
centos-preinstalled/abrt-action-analyze-backtrace:     file format elf32-littlearm


Disassembly of section .init:

00000b14 <_init@@Base>:
 b14:	push	{r3, lr}
 b18:	bl	12d8 <main@@Base+0x624>
 b1c:	pop	{r3, pc}

Disassembly of section .plt:

00000b20 <dd_opendir@plt-0x14>:
 b20:	push	{lr}		; (str lr, [sp, #-4]!)
 b24:	ldr	lr, [pc, #4]	; b30 <_init@@Base+0x1c>
 b28:	add	lr, pc, lr
 b2c:	ldr	pc, [lr, #8]!
 b30:	andeq	r1, r1, ip, lsl r4

00000b34 <dd_opendir@plt>:
 b34:	add	ip, pc, #0, 12
 b38:	add	ip, ip, #69632	; 0x11000
 b3c:	ldr	pc, [ip, #1052]!	; 0x41c

00000b40 <sr_gdb_frame_free@plt>:
 b40:	add	ip, pc, #0, 12
 b44:	add	ip, ip, #69632	; 0x11000
 b48:	ldr	pc, [ip, #1044]!	; 0x414

00000b4c <free@plt>:
 b4c:	add	ip, pc, #0, 12
 b50:	add	ip, ip, #69632	; 0x11000
 b54:	ldr	pc, [ip, #1036]!	; 0x40c

00000b58 <dd_close@plt>:
 b58:	add	ip, pc, #0, 12
 b5c:	add	ip, ip, #69632	; 0x11000
 b60:	ldr	pc, [ip, #1028]!	; 0x404

00000b64 <libreport_parse_opts@plt>:
 b64:	add	ip, pc, #0, 12
 b68:	add	ip, ip, #69632	; 0x11000
 b6c:	ldr	pc, [ip, #1020]!	; 0x3fc

00000b70 <sr_gdb_stacktrace_get_crash_frame@plt>:
 b70:	add	ip, pc, #0, 12
 b74:	add	ip, ip, #69632	; 0x11000
 b78:	ldr	pc, [ip, #1012]!	; 0x3f4

00000b7c <libreport_export_abrt_envvars@plt>:
 b7c:	add	ip, pc, #0, 12
 b80:	add	ip, ip, #69632	; 0x11000
 b84:	ldr	pc, [ip, #1004]!	; 0x3ec

00000b88 <textdomain@plt>:
 b88:	add	ip, pc, #0, 12
 b8c:	add	ip, ip, #69632	; 0x11000
 b90:	ldr	pc, [ip, #996]!	; 0x3e4

00000b94 <memset@plt>:
 b94:	add	ip, pc, #0, 12
 b98:	add	ip, ip, #69632	; 0x11000
 b9c:	ldr	pc, [ip, #988]!	; 0x3dc

00000ba0 <abort@plt>:
 ba0:	add	ip, pc, #0, 12
 ba4:	add	ip, ip, #69632	; 0x11000
 ba8:	ldr	pc, [ip, #980]!	; 0x3d4

00000bac <sr_thread_get_duphash@plt>:
 bac:	add	ip, pc, #0, 12
 bb0:	add	ip, ip, #69632	; 0x11000
 bb4:	ldr	pc, [ip, #972]!	; 0x3cc

00000bb8 <libreport_str_to_sha1str@plt>:
 bb8:	add	ip, pc, #0, 12
 bbc:	add	ip, ip, #69632	; 0x11000
 bc0:	ldr	pc, [ip, #964]!	; 0x3c4

00000bc4 <dd_load_text@plt>:
 bc4:	add	ip, pc, #0, 12
 bc8:	add	ip, ip, #69632	; 0x11000
 bcc:	ldr	pc, [ip, #956]!	; 0x3bc

00000bd0 <__stack_chk_fail@plt>:
 bd0:	add	ip, pc, #0, 12
 bd4:	add	ip, ip, #69632	; 0x11000
 bd8:	ldr	pc, [ip, #948]!	; 0x3b4

00000bdc <dcgettext@plt>:
 bdc:	add	ip, pc, #0, 12
 be0:	add	ip, ip, #69632	; 0x11000
 be4:	ldr	pc, [ip, #940]!	; 0x3ac

00000be8 <log_wrapper@plt>:
 be8:	add	ip, pc, #0, 12
 bec:	add	ip, ip, #69632	; 0x11000
 bf0:	ldr	pc, [ip, #932]!	; 0x3a4

00000bf4 <sr_gdb_stacktrace_quality_complex@plt>:
 bf4:	add	ip, pc, #0, 12
 bf8:	add	ip, ip, #69632	; 0x11000
 bfc:	ldr	pc, [ip, #924]!	; 0x39c

00000c00 <bindtextdomain@plt>:
 c00:	add	ip, pc, #0, 12
 c04:	add	ip, ip, #69632	; 0x11000
 c08:	ldr	pc, [ip, #916]!	; 0x394

00000c0c <setlocale@plt>:
 c0c:	add	ip, pc, #0, 12
 c10:	add	ip, ip, #69632	; 0x11000
 c14:	ldr	pc, [ip, #908]!	; 0x38c

00000c18 <libreport_strbuf_free@plt>:
 c18:	add	ip, pc, #0, 12
 c1c:	add	ip, ip, #69632	; 0x11000
 c20:	ldr	pc, [ip, #900]!	; 0x384

00000c24 <libreport_strbuf_prepend_str@plt>:
 c24:	add	ip, pc, #0, 12
 c28:	add	ip, ip, #69632	; 0x11000
 c2c:	ldr	pc, [ip, #892]!	; 0x37c

00000c30 <dd_load_text_ext@plt>:
 c30:	add	ip, pc, #0, 12
 c34:	add	ip, ip, #69632	; 0x11000
 c38:	ldr	pc, [ip, #884]!	; 0x374

00000c3c <abrt_init@plt>:
 c3c:	add	ip, pc, #0, 12
 c40:	add	ip, ip, #69632	; 0x11000
 c44:	ldr	pc, [ip, #876]!	; 0x36c

00000c48 <libreport_strbuf_new@plt>:
 c48:	add	ip, pc, #0, 12
 c4c:	add	ip, ip, #69632	; 0x11000
 c50:	ldr	pc, [ip, #868]!	; 0x364

00000c54 <sr_location_init@plt>:
 c54:	add	ip, pc, #0, 12
 c58:	add	ip, ip, #69632	; 0x11000
 c5c:	ldr	pc, [ip, #860]!	; 0x35c

00000c60 <sr_gdb_stacktrace_free@plt>:
 c60:	add	ip, pc, #0, 12
 c64:	add	ip, ip, #69632	; 0x11000
 c68:	ldr	pc, [ip, #852]!	; 0x354

00000c6c <dd_save_text@plt>:
 c6c:	add	ip, pc, #0, 12
 c70:	add	ip, ip, #69632	; 0x11000
 c74:	ldr	pc, [ip, #844]!	; 0x34c

00000c78 <__libc_start_main@plt>:
 c78:	add	ip, pc, #0, 12
 c7c:	add	ip, ip, #69632	; 0x11000
 c80:	ldr	pc, [ip, #836]!	; 0x344

00000c84 <sr_gdb_stacktrace_parse@plt>:
 c84:	add	ip, pc, #0, 12
 c88:	add	ip, ip, #69632	; 0x11000
 c8c:	ldr	pc, [ip, #828]!	; 0x33c

00000c90 <__gmon_start__@plt>:
 c90:	add	ip, pc, #0, 12
 c94:	add	ip, ip, #69632	; 0x11000
 c98:	ldr	pc, [ip, #820]!	; 0x334

00000c9c <__cxa_finalize@plt>:
 c9c:	add	ip, pc, #0, 12
 ca0:	add	ip, ip, #69632	; 0x11000
 ca4:	ldr	pc, [ip, #812]!	; 0x32c

00000ca8 <sr_gdb_stacktrace_find_crash_thread@plt>:
 ca8:	add	ip, pc, #0, 12
 cac:	add	ip, ip, #69632	; 0x11000
 cb0:	ldr	pc, [ip, #804]!	; 0x324

Disassembly of section .text:

00000cb4 <main@@Base>:
     cb4:	ldr	r3, [pc, #1328]	; 11ec <main@@Base+0x538>
     cb8:	ldr	r2, [pc, #1328]	; 11f0 <main@@Base+0x53c>
     cbc:	add	r3, pc, r3
     cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cc4:	sub	sp, sp, #180	; 0xb4
     cc8:	ldr	r2, [r3, r2]
     ccc:	mov	r5, r1
     cd0:	ldr	r1, [pc, #1308]	; 11f4 <main@@Base+0x540>
     cd4:	mov	r8, r0
     cd8:	ldr	r4, [pc, #1304]	; 11f8 <main@@Base+0x544>
     cdc:	mov	r0, #6
     ce0:	str	r2, [sp, #36]	; 0x24
     ce4:	add	r1, pc, r1
     ce8:	ldr	r2, [r2]
     cec:	add	r4, pc, r4
     cf0:	str	r3, [sp, #28]
     cf4:	add	r6, sp, #56	; 0x38
     cf8:	ldr	r7, [pc, #1276]	; 11fc <main@@Base+0x548>
     cfc:	mov	sl, #2
     d00:	str	r2, [sp, #172]	; 0xac
     d04:	bl	c0c <setlocale@plt>
     d08:	ldr	r1, [pc, #1264]	; 1200 <main@@Base+0x54c>
     d0c:	mov	r0, r4
     d10:	add	r7, pc, r7
     d14:	mov	fp, #100	; 0x64
     d18:	add	r1, pc, r1
     d1c:	bl	c00 <bindtextdomain@plt>
     d20:	mov	r0, r4
     d24:	bl	b88 <textdomain@plt>
     d28:	mov	r0, r5
     d2c:	bl	c3c <abrt_init@plt>
     d30:	ldr	r1, [pc, #1228]	; 1204 <main@@Base+0x550>
     d34:	mov	r2, #5
     d38:	mov	r0, r4
     d3c:	add	r1, pc, r1
     d40:	bl	bdc <dcgettext@plt>
     d44:	mov	r1, #0
     d48:	mov	r2, #72	; 0x48
     d4c:	mov	r9, r0
     d50:	mov	r0, r6
     d54:	bl	b94 <memset@plt>
     d58:	ldr	r3, [sp, #28]
     d5c:	ldr	r1, [pc, #1188]	; 1208 <main@@Base+0x554>
     d60:	mov	r0, #118	; 0x76
     d64:	ldr	r2, [pc, #1184]	; 120c <main@@Base+0x558>
     d68:	str	r0, [sp, #60]	; 0x3c
     d6c:	mov	r0, r4
     d70:	add	r2, pc, r2
     d74:	str	r2, [sp, #64]	; 0x40
     d78:	ldr	r1, [r3, r1]
     d7c:	mov	r2, #5
     d80:	str	r1, [sp, #32]
     d84:	ldr	ip, [sp, #32]
     d88:	ldr	r1, [pc, #1152]	; 1210 <main@@Base+0x55c>
     d8c:	add	r1, pc, r1
     d90:	str	ip, [sp, #68]	; 0x44
     d94:	bl	bdc <dcgettext@plt>
     d98:	ldr	r1, [pc, #1140]	; 1214 <main@@Base+0x560>
     d9c:	ldr	r3, [pc, #1140]	; 1218 <main@@Base+0x564>
     da0:	mov	r2, #5
     da4:	add	r1, pc, r1
     da8:	str	r7, [sp, #92]	; 0x5c
     dac:	add	r3, pc, r3
     db0:	str	sl, [sp, #80]	; 0x50
     db4:	str	r3, [sp, #96]	; 0x60
     db8:	str	fp, [sp, #84]	; 0x54
     dbc:	str	r0, [sp, #76]	; 0x4c
     dc0:	mov	r0, r4
     dc4:	bl	bdc <dcgettext@plt>
     dc8:	mov	r2, r6
     dcc:	mov	r1, r5
     dd0:	mov	r3, r9
     dd4:	mov	ip, #6
     dd8:	str	ip, [sp, #104]	; 0x68
     ddc:	str	r0, [sp, #100]	; 0x64
     de0:	mov	r0, r8
     de4:	bl	b64 <libreport_parse_opts@plt>
     de8:	mov	r0, #0
     dec:	bl	b7c <libreport_export_abrt_envvars@plt>
     df0:	ldr	r0, [r7]
     df4:	mov	r1, #0
     df8:	bl	b34 <dd_opendir@plt>
     dfc:	subs	r6, r0, #0
     e00:	moveq	r0, #1
     e04:	beq	f44 <main@@Base+0x290>
     e08:	ldr	r1, [pc, #1036]	; 121c <main@@Base+0x568>
     e0c:	add	r1, pc, r1
     e10:	bl	bc4 <dd_load_text@plt>
     e14:	ldr	r1, [pc, #1028]	; 1220 <main@@Base+0x56c>
     e18:	mov	r2, #16
     e1c:	add	r1, pc, r1
     e20:	mov	r8, r0
     e24:	mov	r0, r6
     e28:	bl	c30 <dd_load_text_ext@plt>
     e2c:	subs	r9, r0, #0
     e30:	beq	101c <main@@Base+0x368>
     e34:	add	r5, sp, #44	; 0x2c
     e38:	mov	r0, r5
     e3c:	bl	c54 <sr_location_init@plt>
     e40:	add	r0, sp, #176	; 0xb0
     e44:	mov	r1, r5
     e48:	str	r9, [r0, #-136]!	; 0xffffff78
     e4c:	bl	c84 <sr_gdb_stacktrace_parse@plt>
     e50:	mov	r5, r0
     e54:	mov	r0, r9
     e58:	bl	b4c <free@plt>
     e5c:	cmp	r5, #0
     e60:	beq	1038 <main@@Base+0x384>
     e64:	mov	r0, r5
     e68:	bl	ca8 <sr_gdb_stacktrace_find_crash_thread@plt>
     e6c:	subs	r7, r0, #0
     e70:	beq	1198 <main@@Base+0x4e4>
     e74:	ldr	ip, [sp, #32]
     e78:	ldr	r3, [ip]
     e7c:	cmp	r3, #2
     e80:	bgt	fb8 <main@@Base+0x304>
     e84:	mov	r1, #3
     e88:	mov	r2, r8
     e8c:	mov	r3, #1
     e90:	mov	r0, r7
     e94:	bl	bac <sr_thread_get_duphash@plt>
     e98:	ldr	r1, [pc, #900]	; 1224 <main@@Base+0x570>
     e9c:	add	r1, pc, r1
     ea0:	mov	r4, r0
     ea4:	mov	r0, r6
     ea8:	mov	r2, r4
     eac:	bl	c6c <dd_save_text@plt>
     eb0:	mov	r0, r4
     eb4:	bl	b4c <free@plt>
     eb8:	mov	r0, r5
     ebc:	bl	bf4 <sr_gdb_stacktrace_quality_complex@plt>
     ec0:	vldr	s15, [pc, #788]	; 11dc <main@@Base+0x528>
     ec4:	vcmpe.f32	s0, s15
     ec8:	vmrs	APSR_nzcv, fpscr
     ecc:	bpl	f60 <main@@Base+0x2ac>
     ed0:	ldr	r2, [pc, #848]	; 1228 <main@@Base+0x574>
     ed4:	add	r2, pc, r2
     ed8:	ldr	r1, [pc, #844]	; 122c <main@@Base+0x578>
     edc:	mov	r0, r6
     ee0:	add	r1, pc, r1
     ee4:	bl	c6c <dd_save_text@plt>
     ee8:	mov	r0, r5
     eec:	bl	b70 <sr_gdb_stacktrace_get_crash_frame@plt>
     ef0:	subs	r4, r0, #0
     ef4:	beq	f28 <main@@Base+0x274>
     ef8:	ldr	r2, [r4, #4]
     efc:	cmp	r2, #0
     f00:	beq	f20 <main@@Base+0x26c>
     f04:	ldrb	r3, [r2]
     f08:	cmp	r3, #63	; 0x3f
     f0c:	beq	f9c <main@@Base+0x2e8>
     f10:	ldr	r1, [pc, #792]	; 1230 <main@@Base+0x57c>
     f14:	mov	r0, r6
     f18:	add	r1, pc, r1
     f1c:	bl	c6c <dd_save_text@plt>
     f20:	mov	r0, r4
     f24:	bl	b40 <sr_gdb_frame_free@plt>
     f28:	mov	r0, r5
     f2c:	bl	c60 <sr_gdb_stacktrace_free@plt>
     f30:	mov	r0, r6
     f34:	bl	b58 <dd_close@plt>
     f38:	mov	r0, r8
     f3c:	bl	b4c <free@plt>
     f40:	mov	r0, #0
     f44:	ldr	ip, [sp, #36]	; 0x24
     f48:	ldr	r2, [sp, #172]	; 0xac
     f4c:	ldr	r3, [ip]
     f50:	cmp	r2, r3
     f54:	bne	11d8 <main@@Base+0x524>
     f58:	add	sp, sp, #180	; 0xb4
     f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f60:	vldr	s15, [pc, #632]	; 11e0 <main@@Base+0x52c>
     f64:	vcmpe.f32	s0, s15
     f68:	vmrs	APSR_nzcv, fpscr
     f6c:	bmi	1010 <main@@Base+0x35c>
     f70:	vldr	s15, [pc, #620]	; 11e4 <main@@Base+0x530>
     f74:	vcmpe.f32	s0, s15
     f78:	vmrs	APSR_nzcv, fpscr
     f7c:	bmi	102c <main@@Base+0x378>
     f80:	vldr	s15, [pc, #608]	; 11e8 <main@@Base+0x534>
     f84:	vcmpe.f32	s0, s15
     f88:	vmrs	APSR_nzcv, fpscr
     f8c:	bpl	118c <main@@Base+0x4d8>
     f90:	ldr	r2, [pc, #668]	; 1234 <main@@Base+0x580>
     f94:	add	r2, pc, r2
     f98:	b	ed8 <main@@Base+0x224>
     f9c:	ldrb	r3, [r2, #1]
     fa0:	cmp	r3, #63	; 0x3f
     fa4:	bne	f10 <main@@Base+0x25c>
     fa8:	ldrb	r3, [r2, #2]
     fac:	cmp	r3, #0
     fb0:	beq	f20 <main@@Base+0x26c>
     fb4:	b	f10 <main@@Base+0x25c>
     fb8:	mov	r3, sl
     fbc:	mov	r2, r8
     fc0:	mov	r1, #3
     fc4:	bl	bac <sr_thread_get_duphash@plt>
     fc8:	ldr	r1, [pc, #616]	; 1238 <main@@Base+0x584>
     fcc:	mov	r3, #0
     fd0:	str	r3, [sp]
     fd4:	str	r3, [sp, #4]
     fd8:	add	r1, pc, r1
     fdc:	ldr	r3, [pc, #600]	; 123c <main@@Base+0x588>
     fe0:	mov	r2, #136	; 0x88
     fe4:	str	r1, [sp, #8]
     fe8:	ldr	r1, [pc, #592]	; 1240 <main@@Base+0x58c>
     fec:	add	r3, pc, r3
     ff0:	add	r1, pc, r1
     ff4:	mov	r4, r0
     ff8:	str	r0, [sp, #12]
     ffc:	mov	r0, #4
    1000:	bl	be8 <log_wrapper@plt>
    1004:	mov	r0, r4
    1008:	bl	b4c <free@plt>
    100c:	b	e84 <main@@Base+0x1d0>
    1010:	ldr	r2, [pc, #556]	; 1244 <main@@Base+0x590>
    1014:	add	r2, pc, r2
    1018:	b	ed8 <main@@Base+0x224>
    101c:	mov	r0, r6
    1020:	bl	b58 <dd_close@plt>
    1024:	mov	r0, #1
    1028:	b	f44 <main@@Base+0x290>
    102c:	ldr	r2, [pc, #532]	; 1248 <main@@Base+0x594>
    1030:	add	r2, pc, r2
    1034:	b	ed8 <main@@Base+0x224>
    1038:	ldr	r1, [pc, #524]	; 124c <main@@Base+0x598>
    103c:	mov	r0, r4
    1040:	mov	r2, #5
    1044:	ldr	r9, [pc, #516]	; 1250 <main@@Base+0x59c>
    1048:	add	r1, pc, r1
    104c:	bl	bdc <dcgettext@plt>
    1050:	ldr	ip, [r7]
    1054:	ldr	r3, [pc, #504]	; 1254 <main@@Base+0x5a0>
    1058:	add	r9, pc, r9
    105c:	mov	r2, #90	; 0x5a
    1060:	str	r5, [sp]
    1064:	add	r3, pc, r3
    1068:	mov	r1, r9
    106c:	str	ip, [sp, #12]
    1070:	str	r5, [sp, #4]
    1074:	mov	r7, r3
    1078:	str	r0, [sp, #8]
    107c:	mov	r0, #4
    1080:	bl	be8 <log_wrapper@plt>
    1084:	ldr	lr, [sp, #48]	; 0x30
    1088:	ldr	ip, [sp, #52]	; 0x34
    108c:	mov	r3, r7
    1090:	ldr	r2, [sp, #44]	; 0x2c
    1094:	mov	r1, r9
    1098:	ldr	r0, [pc, #440]	; 1258 <main@@Base+0x5a4>
    109c:	str	lr, [sp, #16]
    10a0:	str	ip, [sp, #20]
    10a4:	add	r0, pc, r0
    10a8:	str	r2, [sp, #12]
    10ac:	mov	r2, #91	; 0x5b
    10b0:	str	r0, [sp, #8]
    10b4:	mov	r0, #4
    10b8:	str	r5, [sp]
    10bc:	str	r5, [sp, #4]
    10c0:	bl	be8 <log_wrapper@plt>
    10c4:	bl	c48 <libreport_strbuf_new@plt>
    10c8:	ldr	r1, [pc, #396]	; 125c <main@@Base+0x5a8>
    10cc:	add	r1, pc, r1
    10d0:	mov	r4, r0
    10d4:	mov	r0, r6
    10d8:	bl	bc4 <dd_load_text@plt>
    10dc:	mov	sl, r0
    10e0:	mov	r0, r4
    10e4:	mov	r1, sl
    10e8:	bl	c24 <libreport_strbuf_prepend_str@plt>
    10ec:	mov	r0, sl
    10f0:	bl	b4c <free@plt>
    10f4:	mov	r1, r8
    10f8:	mov	r0, r4
    10fc:	bl	c24 <libreport_strbuf_prepend_str@plt>
    1100:	ldr	r2, [pc, #344]	; 1260 <main@@Base+0x5ac>
    1104:	str	r5, [sp]
    1108:	mov	r3, r7
    110c:	add	r2, pc, r2
    1110:	str	r5, [sp, #4]
    1114:	str	r2, [sp, #8]
    1118:	add	r7, sp, #128	; 0x80
    111c:	ldr	ip, [r4, #8]
    1120:	mov	r2, fp
    1124:	mov	r1, r9
    1128:	mov	r0, #7
    112c:	str	ip, [sp, #12]
    1130:	bl	be8 <log_wrapper@plt>
    1134:	ldr	r1, [r4, #8]
    1138:	mov	r0, r7
    113c:	bl	bb8 <libreport_str_to_sha1str@plt>
    1140:	ldr	r1, [pc, #284]	; 1264 <main@@Base+0x5b0>
    1144:	mov	r0, r6
    1148:	mov	r2, r7
    114c:	add	r1, pc, r1
    1150:	bl	c6c <dd_save_text@plt>
    1154:	ldr	r1, [pc, #268]	; 1268 <main@@Base+0x5b4>
    1158:	ldr	r2, [pc, #268]	; 126c <main@@Base+0x5b8>
    115c:	mov	r0, r6
    1160:	add	r1, pc, r1
    1164:	add	r2, pc, r2
    1168:	bl	c6c <dd_save_text@plt>
    116c:	mov	r0, r4
    1170:	bl	c18 <libreport_strbuf_free@plt>
    1174:	mov	r0, r8
    1178:	bl	b4c <free@plt>
    117c:	mov	r0, r6
    1180:	bl	b58 <dd_close@plt>
    1184:	mov	r0, r5
    1188:	b	f44 <main@@Base+0x290>
    118c:	ldr	r2, [pc, #220]	; 1270 <main@@Base+0x5bc>
    1190:	add	r2, pc, r2
    1194:	b	ed8 <main@@Base+0x224>
    1198:	ldr	r1, [pc, #212]	; 1274 <main@@Base+0x5c0>
    119c:	mov	r0, r4
    11a0:	mov	r2, #5
    11a4:	add	r1, pc, r1
    11a8:	bl	bdc <dcgettext@plt>
    11ac:	ldr	r1, [pc, #196]	; 1278 <main@@Base+0x5c4>
    11b0:	ldr	r3, [pc, #196]	; 127c <main@@Base+0x5c8>
    11b4:	mov	r2, #146	; 0x92
    11b8:	str	r7, [sp]
    11bc:	add	r1, pc, r1
    11c0:	str	r7, [sp, #4]
    11c4:	add	r3, pc, r3
    11c8:	str	r0, [sp, #8]
    11cc:	mov	r0, #4
    11d0:	bl	be8 <log_wrapper@plt>
    11d4:	b	eb8 <main@@Base+0x204>
    11d8:	bl	bd0 <__stack_chk_fail@plt>
    11dc:	svccc	0x0019999a
    11e0:	svccc	0x00333333
    11e4:	svccc	0x004ccccd
    11e8:	svccc	0x00666666
    11ec:	andeq	r1, r1, r8, lsl #5
    11f0:	andeq	r0, r0, ip, lsl #1
    11f4:	andeq	r0, r0, ip, ror r9
    11f8:	strdeq	r0, [r0], -r8
    11fc:	andeq	r1, r1, ip, ror #5
    1200:	ldrdeq	r0, [r0], -r4
    1204:	andeq	r0, r0, r4, asr #15
    1208:	muleq	r0, r8, r0
    120c:	andeq	r0, r0, r4, lsr #16
    1210:	andeq	r0, r0, r0, lsl r8
    1214:	andeq	r0, r0, r8, lsl #16
    1218:	strdeq	r0, [r0], -ip
    121c:			; <UNDEFINED> instruction: 0x000007b4
    1220:			; <UNDEFINED> instruction: 0x000007b0
    1224:	andeq	r0, r0, ip, lsr #15
    1228:	strdeq	r0, [r0], -ip
    122c:	andeq	r0, r0, r0, ror r7
    1230:	andeq	r0, r0, r4, ror #14
    1234:	andeq	r0, r0, r8, asr #10
    1238:	andeq	r0, r0, r8, asr r6
    123c:	ldrdeq	r0, [r0], -ip
    1240:	andeq	r0, r0, r8, lsl #12
    1244:	andeq	r0, r0, r0, asr #9
    1248:	andeq	r0, r0, r8, lsr #9
    124c:	muleq	r0, r0, r5
    1250:	andeq	r0, r0, r0, lsr #11
    1254:	andeq	r0, r0, r4, ror #8
    1258:	andeq	r0, r0, r4, ror r5
    125c:	andeq	r0, r0, r8, asr r5
    1260:	andeq	r0, r0, r4, lsr #10
    1264:	strdeq	r0, [r0], -ip
    1268:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    126c:	andeq	r0, r0, ip, ror #6
    1270:	andeq	r0, r0, r0, asr r3
    1274:	andeq	r0, r0, r0, asr #9
    1278:	andeq	r0, r0, ip, lsr r4
    127c:	andeq	r0, r0, r4, lsl #6
    1280:	mov	fp, #0
    1284:	mov	lr, #0
    1288:	pop	{r1}		; (ldr r1, [sp], #4)
    128c:	mov	r2, sp
    1290:	push	{r2}		; (str r2, [sp, #-4]!)
    1294:	push	{r0}		; (str r0, [sp, #-4]!)
    1298:	ldr	sl, [pc, #40]	; 12c8 <main@@Base+0x614>
    129c:	add	r3, pc, #36	; 0x24
    12a0:	add	sl, sl, r3
    12a4:	ldr	ip, [pc, #32]	; 12cc <main@@Base+0x618>
    12a8:	ldr	ip, [sl, ip]
    12ac:	push	{ip}		; (str ip, [sp, #-4]!)
    12b0:	ldr	r3, [pc, #24]	; 12d0 <main@@Base+0x61c>
    12b4:	ldr	r3, [sl, r3]
    12b8:	ldr	r0, [pc, #20]	; 12d4 <main@@Base+0x620>
    12bc:	ldr	r0, [sl, r0]
    12c0:	bl	c78 <__libc_start_main@plt>
    12c4:	bl	ba0 <abort@plt>
    12c8:	andeq	r0, r1, r4, lsl #25
    12cc:	andeq	r0, r0, r4, lsr #1
    12d0:	muleq	r0, ip, r0
    12d4:	muleq	r0, r0, r0
    12d8:	ldr	r3, [pc, #20]	; 12f4 <main@@Base+0x640>
    12dc:	ldr	r2, [pc, #20]	; 12f8 <main@@Base+0x644>
    12e0:	add	r3, pc, r3
    12e4:	ldr	r2, [r3, r2]
    12e8:	cmp	r2, #0
    12ec:	bxeq	lr
    12f0:	b	c90 <__gmon_start__@plt>
    12f4:	andeq	r0, r1, r4, ror #24
    12f8:	andeq	r0, r0, r8, lsr #1
    12fc:	ldr	r2, [pc, #60]	; 1340 <main@@Base+0x68c>
    1300:	ldr	r0, [pc, #60]	; 1344 <main@@Base+0x690>
    1304:	add	r2, pc, r2
    1308:	add	r0, pc, r0
    130c:	add	r2, r2, #3
    1310:	rsb	r2, r0, r2
    1314:	push	{r3, lr}
    1318:	cmp	r2, #6
    131c:	ldr	r3, [pc, #36]	; 1348 <main@@Base+0x694>
    1320:	add	r3, pc, r3
    1324:	popls	{r3, pc}
    1328:	ldr	r2, [pc, #28]	; 134c <main@@Base+0x698>
    132c:	ldr	r3, [r3, r2]
    1330:	cmp	r3, #0
    1334:	popeq	{r3, pc}
    1338:	blx	r3
    133c:	pop	{r3, pc}
    1340:	strdeq	r0, [r1], -ip
    1344:	strdeq	r0, [r1], -r8
    1348:	andeq	r0, r1, r4, lsr #24
    134c:	andeq	r0, r0, r0, lsr #1
    1350:	push	{r3, lr}
    1354:	ldr	r0, [pc, #64]	; 139c <main@@Base+0x6e8>
    1358:	ldr	r3, [pc, #64]	; 13a0 <main@@Base+0x6ec>
    135c:	add	r0, pc, r0
    1360:	ldr	r2, [pc, #60]	; 13a4 <main@@Base+0x6f0>
    1364:	add	r3, pc, r3
    1368:	rsb	r3, r0, r3
    136c:	add	r2, pc, r2
    1370:	asr	r3, r3, #2
    1374:	add	r3, r3, r3, lsr #31
    1378:	asrs	r3, r3, #1
    137c:	popeq	{r3, pc}
    1380:	ldr	r1, [pc, #32]	; 13a8 <main@@Base+0x6f4>
    1384:	ldr	r2, [r2, r1]
    1388:	cmp	r2, #0
    138c:	popeq	{r3, pc}
    1390:	mov	r1, r3
    1394:	blx	r2
    1398:	pop	{r3, pc}
    139c:	andeq	r0, r1, r4, lsr #25
    13a0:	muleq	r1, ip, ip
    13a4:	ldrdeq	r0, [r1], -r8
    13a8:	andeq	r0, r0, ip, lsr #1
    13ac:	ldr	r2, [pc, #76]	; 1400 <main@@Base+0x74c>
    13b0:	push	{r3, lr}
    13b4:	add	r2, pc, r2
    13b8:	ldr	r3, [pc, #68]	; 1404 <main@@Base+0x750>
    13bc:	ldrb	r2, [r2]
    13c0:	add	r3, pc, r3
    13c4:	cmp	r2, #0
    13c8:	popne	{r3, pc}
    13cc:	ldr	r2, [pc, #52]	; 1408 <main@@Base+0x754>
    13d0:	ldr	r3, [r3, r2]
    13d4:	cmp	r3, #0
    13d8:	beq	13e8 <main@@Base+0x734>
    13dc:	ldr	r0, [pc, #40]	; 140c <main@@Base+0x758>
    13e0:	add	r0, pc, r0
    13e4:	bl	c9c <__cxa_finalize@plt>
    13e8:	bl	12fc <main@@Base+0x648>
    13ec:	ldr	r3, [pc, #28]	; 1410 <main@@Base+0x75c>
    13f0:	mov	r2, #1
    13f4:	add	r3, pc, r3
    13f8:	strb	r2, [r3]
    13fc:	pop	{r3, pc}
    1400:	andeq	r0, r1, ip, asr #24
    1404:	andeq	r0, r1, r4, lsl #23
    1408:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    140c:	andeq	r0, r1, r0, asr #20
    1410:	andeq	r0, r1, ip, lsl #24
    1414:	ldr	r0, [pc, #52]	; 1450 <main@@Base+0x79c>
    1418:	push	{r3, lr}
    141c:	add	r0, pc, r0
    1420:	ldr	r3, [pc, #44]	; 1454 <main@@Base+0x7a0>
    1424:	ldr	r2, [r0]
    1428:	add	r3, pc, r3
    142c:	cmp	r2, #0
    1430:	beq	1448 <main@@Base+0x794>
    1434:	ldr	r2, [pc, #28]	; 1458 <main@@Base+0x7a4>
    1438:	ldr	r3, [r3, r2]
    143c:	cmp	r3, #0
    1440:	beq	1448 <main@@Base+0x794>
    1444:	blx	r3
    1448:	pop	{r3, lr}
    144c:	b	1350 <main@@Base+0x69c>
    1450:	andeq	r0, r1, r0, lsl #20
    1454:	andeq	r0, r1, ip, lsl fp
    1458:	muleq	r0, r4, r0

0000145c <__libc_csu_init@@Base>:
    145c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    1460:	mov	r7, r0
    1464:	ldr	r6, [pc, #76]	; 14b8 <__libc_csu_init@@Base+0x5c>
    1468:	mov	r8, r1
    146c:	ldr	r5, [pc, #72]	; 14bc <__libc_csu_init@@Base+0x60>
    1470:	mov	r9, r2
    1474:	add	r6, pc, r6
    1478:	bl	b14 <_init@@Base>
    147c:	add	r5, pc, r5
    1480:	rsb	r6, r5, r6
    1484:	asrs	r6, r6, #2
    1488:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    148c:	sub	r5, r5, #4
    1490:	mov	r4, #0
    1494:	add	r4, r4, #1
    1498:	ldr	r3, [r5, #4]!
    149c:	mov	r0, r7
    14a0:	mov	r1, r8
    14a4:	mov	r2, r9
    14a8:	blx	r3
    14ac:	cmp	r4, r6
    14b0:	bne	1494 <__libc_csu_init@@Base+0x38>
    14b4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    14b8:	andeq	r0, r1, r4, lsr #19
    14bc:	muleq	r1, r8, r9

000014c0 <__libc_csu_fini@@Base>:
    14c0:	bx	lr

Disassembly of section .fini:

000014c4 <_fini@@Base>:
    14c4:	push	{r3, lr}
    14c8:	pop	{r3, pc}
