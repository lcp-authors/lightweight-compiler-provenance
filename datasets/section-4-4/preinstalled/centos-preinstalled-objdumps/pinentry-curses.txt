
centos-preinstalled/pinentry-curses:     file format elf32-littlearm


Disassembly of section .init:

00011538 <_init@@Base>:
   11538:	push	{r3, lr}
   1153c:	bl	11a1c <__assert_fail@plt+0x98>
   11540:	pop	{r3, pc}

Disassembly of section .plt:

00011544 <calloc@plt-0x14>:
   11544:	push	{lr}		; (str lr, [sp, #-4]!)
   11548:	ldr	lr, [pc, #4]	; 11554 <_init@@Base+0x1c>
   1154c:	add	lr, pc, lr
   11550:	ldr	pc, [lr, #8]!
   11554:	andeq	r7, r1, ip, lsr #21

00011558 <calloc@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #94208	; 0x17000
   11560:	ldr	pc, [ip, #2732]!	; 0xaac

00011564 <strstr@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #94208	; 0x17000
   1156c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011570 <iconv_close@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #94208	; 0x17000
   11578:	ldr	pc, [ip, #2716]!	; 0xa9c

0001157c <iconv@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #94208	; 0x17000
   11584:	ldr	pc, [ip, #2708]!	; 0xa94

00011588 <mbsrtowcs@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #94208	; 0x17000
   11590:	ldr	pc, [ip, #2700]!	; 0xa8c

00011594 <strcmp@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #94208	; 0x17000
   1159c:	ldr	pc, [ip, #2692]!	; 0xa84

000115a0 <strtol@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #94208	; 0x17000
   115a8:	ldr	pc, [ip, #2684]!	; 0xa7c

000115ac <use_default_colors@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #94208	; 0x17000
   115b4:	ldr	pc, [ip, #2676]!	; 0xa74

000115b8 <fopen@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #94208	; 0x17000
   115c0:	ldr	pc, [ip, #2668]!	; 0xa6c

000115c4 <read@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #94208	; 0x17000
   115cc:	ldr	pc, [ip, #2660]!	; 0xa64

000115d0 <fflush@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #94208	; 0x17000
   115d8:	ldr	pc, [ip, #2652]!	; 0xa5c

000115dc <whline@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #94208	; 0x17000
   115e4:	ldr	pc, [ip, #2644]!	; 0xa54

000115e8 <wcwidth@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #94208	; 0x17000
   115f0:	ldr	pc, [ip, #2636]!	; 0xa4c

000115f4 <getuid@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #94208	; 0x17000
   115fc:	ldr	pc, [ip, #2628]!	; 0xa44

00011600 <wattr_on@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #94208	; 0x17000
   11608:	ldr	pc, [ip, #2620]!	; 0xa3c

0001160c <has_colors@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #94208	; 0x17000
   11614:	ldr	pc, [ip, #2612]!	; 0xa34

00011618 <waddch@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #94208	; 0x17000
   11620:	ldr	pc, [ip, #2604]!	; 0xa2c

00011624 <free@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #94208	; 0x17000
   1162c:	ldr	pc, [ip, #2596]!	; 0xa24

00011630 <cbreak@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #94208	; 0x17000
   11638:	ldr	pc, [ip, #2588]!	; 0xa1c

0001163c <memcpy@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #94208	; 0x17000
   11644:	ldr	pc, [ip, #2580]!	; 0xa14

00011648 <waddnstr@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #94208	; 0x17000
   11650:	ldr	pc, [ip, #2572]!	; 0xa0c

00011654 <time@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #94208	; 0x17000
   1165c:	ldr	pc, [ip, #2564]!	; 0xa04

00011660 <waddnwstr@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #94208	; 0x17000
   11668:	ldr	pc, [ip, #2556]!	; 0x9fc

0001166c <sleep@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #94208	; 0x17000
   11674:	ldr	pc, [ip, #2548]!	; 0x9f4

00011678 <stpcpy@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #94208	; 0x17000
   11680:	ldr	pc, [ip, #2540]!	; 0x9ec

00011684 <init_pair@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #94208	; 0x17000
   1168c:	ldr	pc, [ip, #2532]!	; 0x9e4

00011690 <__stack_chk_fail@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #94208	; 0x17000
   11698:	ldr	pc, [ip, #2524]!	; 0x9dc

0001169c <wbkgd@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #94208	; 0x17000
   116a4:	ldr	pc, [ip, #2516]!	; 0x9d4

000116a8 <wrefresh@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #94208	; 0x17000
   116b0:	ldr	pc, [ip, #2508]!	; 0x9cc

000116b4 <keypad@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #94208	; 0x17000
   116bc:	ldr	pc, [ip, #2500]!	; 0x9c4

000116c0 <initscr@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #94208	; 0x17000
   116c8:	ldr	pc, [ip, #2492]!	; 0x9bc

000116cc <realloc@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #94208	; 0x17000
   116d4:	ldr	pc, [ip, #2484]!	; 0x9b4

000116d8 <start_color@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #94208	; 0x17000
   116e0:	ldr	pc, [ip, #2476]!	; 0x9ac

000116e4 <geteuid@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #94208	; 0x17000
   116ec:	ldr	pc, [ip, #2468]!	; 0x9a4

000116f0 <perror@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #94208	; 0x17000
   116f8:	ldr	pc, [ip, #2460]!	; 0x99c

000116fc <__xstat@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #94208	; 0x17000
   11704:	ldr	pc, [ip, #2452]!	; 0x994

00011708 <__memcpy_chk@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #94208	; 0x17000
   11710:	ldr	pc, [ip, #2444]!	; 0x98c

00011714 <wattr_off@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #94208	; 0x17000
   1171c:	ldr	pc, [ip, #2436]!	; 0x984

00011720 <_IO_putc@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #94208	; 0x17000
   11728:	ldr	pc, [ip, #2428]!	; 0x97c

0001172c <fwrite@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #94208	; 0x17000
   11734:	ldr	pc, [ip, #2420]!	; 0x974

00011738 <strcpy@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #94208	; 0x17000
   11740:	ldr	pc, [ip, #2412]!	; 0x96c

00011744 <getenv@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #94208	; 0x17000
   1174c:	ldr	pc, [ip, #2404]!	; 0x964

00011750 <puts@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #94208	; 0x17000
   11758:	ldr	pc, [ip, #2396]!	; 0x95c

0001175c <malloc@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #94208	; 0x17000
   11764:	ldr	pc, [ip, #2388]!	; 0x954

00011768 <iconv_open@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #94208	; 0x17000
   11770:	ldr	pc, [ip, #2380]!	; 0x94c

00011774 <__libc_start_main@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #94208	; 0x17000
   1177c:	ldr	pc, [ip, #2372]!	; 0x944

00011780 <strerror@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #94208	; 0x17000
   11788:	ldr	pc, [ip, #2364]!	; 0x93c

0001178c <__vfprintf_chk@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #94208	; 0x17000
   11794:	ldr	pc, [ip, #2356]!	; 0x934

00011798 <nonl@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #94208	; 0x17000
   117a0:	ldr	pc, [ip, #2348]!	; 0x92c

000117a4 <__gmon_start__@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #94208	; 0x17000
   117ac:	ldr	pc, [ip, #2340]!	; 0x924

000117b0 <getopt_long@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #94208	; 0x17000
   117b8:	ldr	pc, [ip, #2332]!	; 0x91c

000117bc <getpid@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #94208	; 0x17000
   117c4:	ldr	pc, [ip, #2324]!	; 0x914

000117c8 <exit@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #94208	; 0x17000
   117d0:	ldr	pc, [ip, #2316]!	; 0x90c

000117d4 <strtoul@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #94208	; 0x17000
   117dc:	ldr	pc, [ip, #2308]!	; 0x904

000117e0 <strlen@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #94208	; 0x17000
   117e8:	ldr	pc, [ip, #2300]!	; 0x8fc

000117ec <mmap@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #94208	; 0x17000
   117f4:	ldr	pc, [ip, #2292]!	; 0x8f4

000117f8 <strchr@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #94208	; 0x17000
   11800:	ldr	pc, [ip, #2284]!	; 0x8ec

00011804 <__errno_location@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #94208	; 0x17000
   1180c:	ldr	pc, [ip, #2276]!	; 0x8e4

00011810 <strncasecmp@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #94208	; 0x17000
   11818:	ldr	pc, [ip, #2268]!	; 0x8dc

0001181c <__sprintf_chk@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #94208	; 0x17000
   11824:	ldr	pc, [ip, #2260]!	; 0x8d4

00011828 <__cxa_atexit@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #94208	; 0x17000
   11830:	ldr	pc, [ip, #2252]!	; 0x8cc

00011834 <__strdup@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #94208	; 0x17000
   1183c:	ldr	pc, [ip, #2244]!	; 0x8c4

00011840 <memset@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #94208	; 0x17000
   11848:	ldr	pc, [ip, #2236]!	; 0x8bc

0001184c <newterm@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #94208	; 0x17000
   11854:	ldr	pc, [ip, #2228]!	; 0x8b4

00011858 <write@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #94208	; 0x17000
   11860:	ldr	pc, [ip, #2220]!	; 0x8ac

00011864 <fileno@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #94208	; 0x17000
   1186c:	ldr	pc, [ip, #2212]!	; 0x8a4

00011870 <mlock@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #94208	; 0x17000
   11878:	ldr	pc, [ip, #2204]!	; 0x89c

0001187c <__fprintf_chk@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #94208	; 0x17000
   11884:	ldr	pc, [ip, #2196]!	; 0x894

00011888 <fclose@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #94208	; 0x17000
   11890:	ldr	pc, [ip, #2188]!	; 0x88c

00011894 <delscreen@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #94208	; 0x17000
   1189c:	ldr	pc, [ip, #2180]!	; 0x884

000118a0 <munmap@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #94208	; 0x17000
   118a8:	ldr	pc, [ip, #2172]!	; 0x87c

000118ac <setlocale@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #94208	; 0x17000
   118b4:	ldr	pc, [ip, #2164]!	; 0x874

000118b8 <endwin@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #94208	; 0x17000
   118c0:	ldr	pc, [ip, #2156]!	; 0x86c

000118c4 <wgetch@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #94208	; 0x17000
   118cc:	ldr	pc, [ip, #2148]!	; 0x864

000118d0 <wclear@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #94208	; 0x17000
   118d8:	ldr	pc, [ip, #2140]!	; 0x85c

000118dc <wvline@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #94208	; 0x17000
   118e4:	ldr	pc, [ip, #2132]!	; 0x854

000118e8 <wcslen@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #94208	; 0x17000
   118f0:	ldr	pc, [ip, #2124]!	; 0x84c

000118f4 <utime@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #94208	; 0x17000
   118fc:	ldr	pc, [ip, #2116]!	; 0x844

00011900 <nl_langinfo@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #94208	; 0x17000
   11908:	ldr	pc, [ip, #2108]!	; 0x83c

0001190c <set_term@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #94208	; 0x17000
   11914:	ldr	pc, [ip, #2100]!	; 0x834

00011918 <setuid@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #94208	; 0x17000
   11920:	ldr	pc, [ip, #2092]!	; 0x82c

00011924 <noecho@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #94208	; 0x17000
   1192c:	ldr	pc, [ip, #2084]!	; 0x824

00011930 <wmove@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #94208	; 0x17000
   11938:	ldr	pc, [ip, #2076]!	; 0x81c

0001193c <isatty@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #94208	; 0x17000
   11944:	ldr	pc, [ip, #2068]!	; 0x814

00011948 <curs_set@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #94208	; 0x17000
   11950:	ldr	pc, [ip, #2060]!	; 0x80c

00011954 <strncmp@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #94208	; 0x17000
   1195c:	ldr	pc, [ip, #2052]!	; 0x804

00011960 <abort@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #94208	; 0x17000
   11968:	ldr	pc, [ip, #2044]!	; 0x7fc

0001196c <close@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #94208	; 0x17000
   11974:	ldr	pc, [ip, #2036]!	; 0x7f4

00011978 <__snprintf_chk@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #94208	; 0x17000
   11980:	ldr	pc, [ip, #2028]!	; 0x7ec

00011984 <__assert_fail@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #94208	; 0x17000
   1198c:	ldr	pc, [ip, #2020]!	; 0x7e4

Disassembly of section .text:

00011990 <.text>:
   11990:	push	{r3, r4, r5, lr}
   11994:	mov	r4, r0
   11998:	mov	r5, r1
   1199c:	movw	r0, #30776	; 0x7838
   119a0:	movt	r0, #1
   119a4:	bl	12de4 <__assert_fail@plt+0x1460>
   119a8:	mov	r0, r4
   119ac:	mov	r1, r5
   119b0:	bl	12ffc <__assert_fail@plt+0x1678>
   119b4:	cmp	r0, #0
   119b8:	bne	119cc <__assert_fail@plt+0x48>
   119bc:	bl	13728 <__assert_fail@plt+0x1da4>
   119c0:	adds	r0, r0, #0
   119c4:	movne	r0, #1
   119c8:	pop	{r3, r4, r5, pc}
   119cc:	movw	r0, #30792	; 0x7848
   119d0:	movt	r0, #1
   119d4:	bl	11750 <puts@plt>
   119d8:	mov	r0, #0
   119dc:	bl	117c8 <exit@plt>
   119e0:	mov	fp, #0
   119e4:	mov	lr, #0
   119e8:	pop	{r1}		; (ldr r1, [sp], #4)
   119ec:	mov	r2, sp
   119f0:	push	{r2}		; (str r2, [sp, #-4]!)
   119f4:	push	{r0}		; (str r0, [sp, #-4]!)
   119f8:	ldr	ip, [pc, #16]	; 11a10 <__assert_fail@plt+0x8c>
   119fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11a00:	ldr	r0, [pc, #12]	; 11a14 <__assert_fail@plt+0x90>
   11a04:	ldr	r3, [pc, #12]	; 11a18 <__assert_fail@plt+0x94>
   11a08:	bl	11774 <__libc_start_main@plt>
   11a0c:	bl	11960 <abort@plt>
   11a10:	strdeq	r7, [r1], -r8
   11a14:	muleq	r1, r0, r9
   11a18:	muleq	r1, r4, r7
   11a1c:	ldr	r3, [pc, #20]	; 11a38 <__assert_fail@plt+0xb4>
   11a20:	ldr	r2, [pc, #20]	; 11a3c <__assert_fail@plt+0xb8>
   11a24:	add	r3, pc, r3
   11a28:	ldr	r2, [r3, r2]
   11a2c:	cmp	r2, #0
   11a30:	bxeq	lr
   11a34:	b	117a4 <__gmon_start__@plt>
   11a38:	ldrdeq	r7, [r1], -r4
   11a3c:	andeq	r0, r0, r4, ror r1
   11a40:	push	{r3, lr}
   11a44:	movw	r0, #37404	; 0x921c
   11a48:	ldr	r3, [pc, #36]	; 11a74 <__assert_fail@plt+0xf0>
   11a4c:	movt	r0, #2
   11a50:	rsb	r3, r0, r3
   11a54:	cmp	r3, #6
   11a58:	popls	{r3, pc}
   11a5c:	movw	r3, #0
   11a60:	movt	r3, #0
   11a64:	cmp	r3, #0
   11a68:	popeq	{r3, pc}
   11a6c:	blx	r3
   11a70:	pop	{r3, pc}
   11a74:	andeq	r9, r2, pc, lsl r2
   11a78:	push	{r3, lr}
   11a7c:	movw	r0, #37404	; 0x921c
   11a80:	movw	r3, #37404	; 0x921c
   11a84:	movt	r0, #2
   11a88:	movt	r3, #2
   11a8c:	rsb	r3, r0, r3
   11a90:	asr	r3, r3, #2
   11a94:	add	r3, r3, r3, lsr #31
   11a98:	asrs	r1, r3, #1
   11a9c:	popeq	{r3, pc}
   11aa0:	movw	r2, #0
   11aa4:	movt	r2, #0
   11aa8:	cmp	r2, #0
   11aac:	popeq	{r3, pc}
   11ab0:	blx	r2
   11ab4:	pop	{r3, pc}
   11ab8:	push	{r4, lr}
   11abc:	movw	r4, #37952	; 0x9440
   11ac0:	movt	r4, #2
   11ac4:	ldrb	r3, [r4]
   11ac8:	cmp	r3, #0
   11acc:	popne	{r4, pc}
   11ad0:	bl	11a40 <__assert_fail@plt+0xbc>
   11ad4:	mov	r3, #1
   11ad8:	strb	r3, [r4]
   11adc:	pop	{r4, pc}
   11ae0:	movw	r0, #36596	; 0x8ef4
   11ae4:	movt	r0, #2
   11ae8:	push	{r3, lr}
   11aec:	ldr	r3, [r0]
   11af0:	cmp	r3, #0
   11af4:	beq	11b0c <__assert_fail@plt+0x188>
   11af8:	movw	r3, #0
   11afc:	movt	r3, #0
   11b00:	cmp	r3, #0
   11b04:	beq	11b0c <__assert_fail@plt+0x188>
   11b08:	blx	r3
   11b0c:	pop	{r3, lr}
   11b10:	b	11a78 <__assert_fail@plt+0xf4>
   11b14:	b	11b20 <__assert_fail@plt+0x19c>
   11b18:	add	r1, r1, #1
   11b1c:	strb	r3, [r0, #-1]
   11b20:	ldrb	r3, [r1]
   11b24:	add	r0, r0, #1
   11b28:	cmp	r3, #0
   11b2c:	beq	11bb0 <__assert_fail@plt+0x22c>
   11b30:	cmp	r3, #37	; 0x25
   11b34:	bne	11b18 <__assert_fail@plt+0x194>
   11b38:	ldrb	r2, [r1, #1]
   11b3c:	cmp	r2, #0
   11b40:	beq	11b18 <__assert_fail@plt+0x194>
   11b44:	ldrb	ip, [r1, #2]
   11b48:	cmp	ip, #0
   11b4c:	beq	11b18 <__assert_fail@plt+0x194>
   11b50:	cmp	r2, #57	; 0x39
   11b54:	lslls	r2, r2, #4
   11b58:	andls	r2, r2, #240	; 0xf0
   11b5c:	bls	11b74 <__assert_fail@plt+0x1f0>
   11b60:	cmp	r2, #70	; 0x46
   11b64:	subls	r2, r2, #55	; 0x37
   11b68:	subhi	r2, r2, #87	; 0x57
   11b6c:	lsl	r2, r2, #4
   11b70:	uxtb	r2, r2
   11b74:	cmp	ip, #57	; 0x39
   11b78:	subls	r3, ip, #48	; 0x30
   11b7c:	uxtbls	r3, r3
   11b80:	bls	11b94 <__assert_fail@plt+0x210>
   11b84:	cmp	ip, #70	; 0x46
   11b88:	subls	r3, ip, #55	; 0x37
   11b8c:	subhi	r3, ip, #87	; 0x57
   11b90:	uxtb	r3, r3
   11b94:	add	r1, r1, #3
   11b98:	add	r3, r3, r2
   11b9c:	strb	r3, [r0, #-1]
   11ba0:	add	r0, r0, #1
   11ba4:	ldrb	r3, [r1]
   11ba8:	cmp	r3, #0
   11bac:	bne	11b30 <__assert_fail@plt+0x1ac>
   11bb0:	strb	r3, [r0, #-1]
   11bb4:	bx	lr
   11bb8:	push	{r4, r5, r6, lr}
   11bbc:	mov	r0, r1
   11bc0:	mov	r5, r1
   11bc4:	bl	117e0 <strlen@plt>
   11bc8:	add	r0, r0, #1
   11bcc:	bl	1175c <malloc@plt>
   11bd0:	subs	r6, r0, #0
   11bd4:	beq	11c04 <__assert_fail@plt+0x280>
   11bd8:	movw	r4, #37252	; 0x9184
   11bdc:	movt	r4, #2
   11be0:	mov	r1, r5
   11be4:	bl	11b14 <__assert_fail@plt+0x190>
   11be8:	ldr	r0, [r4]
   11bec:	cmp	r0, #0
   11bf0:	beq	11bf8 <__assert_fail@plt+0x274>
   11bf4:	bl	11624 <free@plt>
   11bf8:	str	r6, [r4]
   11bfc:	mov	r0, #0
   11c00:	pop	{r4, r5, r6, pc}
   11c04:	movw	r0, #32854	; 0x8056
   11c08:	movt	r0, #1280	; 0x500
   11c0c:	pop	{r4, r5, r6, pc}
   11c10:	push	{r3, r4, r5, lr}
   11c14:	mov	r4, r1
   11c18:	ldrb	r3, [r1]
   11c1c:	cmp	r3, #0
   11c20:	moveq	r5, r3
   11c24:	bne	11c4c <__assert_fail@plt+0x2c8>
   11c28:	movw	r4, #37252	; 0x9184
   11c2c:	movt	r4, #2
   11c30:	ldr	r0, [r4, #96]	; 0x60
   11c34:	cmp	r0, #0
   11c38:	beq	11c40 <__assert_fail@plt+0x2bc>
   11c3c:	bl	11624 <free@plt>
   11c40:	str	r5, [r4, #96]	; 0x60
   11c44:	mov	r0, #0
   11c48:	pop	{r3, r4, r5, pc}
   11c4c:	mov	r0, r1
   11c50:	bl	117e0 <strlen@plt>
   11c54:	add	r0, r0, #1
   11c58:	bl	1175c <malloc@plt>
   11c5c:	subs	r5, r0, #0
   11c60:	beq	11c70 <__assert_fail@plt+0x2ec>
   11c64:	mov	r1, r4
   11c68:	bl	11b14 <__assert_fail@plt+0x190>
   11c6c:	b	11c28 <__assert_fail@plt+0x2a4>
   11c70:	movw	r0, #32854	; 0x8056
   11c74:	movt	r0, #1280	; 0x500
   11c78:	pop	{r3, r4, r5, pc}
   11c7c:	push	{r4, r5, r6, lr}
   11c80:	mov	r4, r1
   11c84:	ldrb	r3, [r1]
   11c88:	cmp	r3, #0
   11c8c:	beq	11cd4 <__assert_fail@plt+0x350>
   11c90:	mov	r0, r1
   11c94:	bl	117e0 <strlen@plt>
   11c98:	add	r0, r0, #1
   11c9c:	bl	1175c <malloc@plt>
   11ca0:	subs	r6, r0, #0
   11ca4:	beq	11cec <__assert_fail@plt+0x368>
   11ca8:	movw	r5, #37252	; 0x9184
   11cac:	movt	r5, #2
   11cb0:	mov	r1, r4
   11cb4:	bl	11b14 <__assert_fail@plt+0x190>
   11cb8:	ldr	r0, [r5, #92]	; 0x5c
   11cbc:	cmp	r0, #0
   11cc0:	beq	11cc8 <__assert_fail@plt+0x344>
   11cc4:	bl	11624 <free@plt>
   11cc8:	str	r6, [r5, #92]	; 0x5c
   11ccc:	mov	r0, #0
   11cd0:	pop	{r4, r5, r6, pc}
   11cd4:	mov	r0, #9
   11cd8:	movw	r4, #31092	; 0x7974
   11cdc:	bl	1175c <malloc@plt>
   11ce0:	movt	r4, #1
   11ce4:	subs	r6, r0, #0
   11ce8:	bne	11ca8 <__assert_fail@plt+0x324>
   11cec:	movw	r0, #32854	; 0x8056
   11cf0:	movt	r0, #1280	; 0x500
   11cf4:	pop	{r4, r5, r6, pc}
   11cf8:	push	{r4, r5, r6, lr}
   11cfc:	mov	r0, r1
   11d00:	mov	r5, r1
   11d04:	bl	117e0 <strlen@plt>
   11d08:	add	r0, r0, #1
   11d0c:	bl	1175c <malloc@plt>
   11d10:	subs	r6, r0, #0
   11d14:	beq	11d44 <__assert_fail@plt+0x3c0>
   11d18:	movw	r4, #37252	; 0x9184
   11d1c:	movt	r4, #2
   11d20:	mov	r1, r5
   11d24:	bl	11b14 <__assert_fail@plt+0x190>
   11d28:	ldr	r0, [r4, #24]
   11d2c:	cmp	r0, #0
   11d30:	beq	11d38 <__assert_fail@plt+0x3b4>
   11d34:	bl	11624 <free@plt>
   11d38:	str	r6, [r4, #24]
   11d3c:	mov	r0, #0
   11d40:	pop	{r4, r5, r6, pc}
   11d44:	movw	r0, #32854	; 0x8056
   11d48:	movt	r0, #1280	; 0x500
   11d4c:	pop	{r4, r5, r6, pc}
   11d50:	push	{r4, r5, r6, lr}
   11d54:	mov	r0, r1
   11d58:	mov	r5, r1
   11d5c:	bl	117e0 <strlen@plt>
   11d60:	add	r0, r0, #1
   11d64:	bl	1175c <malloc@plt>
   11d68:	subs	r6, r0, #0
   11d6c:	beq	11d9c <__assert_fail@plt+0x418>
   11d70:	movw	r4, #37252	; 0x9184
   11d74:	movt	r4, #2
   11d78:	mov	r1, r5
   11d7c:	bl	11b14 <__assert_fail@plt+0x190>
   11d80:	ldr	r0, [r4, #20]
   11d84:	cmp	r0, #0
   11d88:	beq	11d90 <__assert_fail@plt+0x40c>
   11d8c:	bl	11624 <free@plt>
   11d90:	str	r6, [r4, #20]
   11d94:	mov	r0, #0
   11d98:	pop	{r4, r5, r6, pc}
   11d9c:	movw	r0, #32854	; 0x8056
   11da0:	movt	r0, #1280	; 0x500
   11da4:	pop	{r4, r5, r6, pc}
   11da8:	push	{r4, r5, r6, lr}
   11dac:	mov	r0, r1
   11db0:	mov	r5, r1
   11db4:	bl	117e0 <strlen@plt>
   11db8:	add	r0, r0, #1
   11dbc:	bl	1175c <malloc@plt>
   11dc0:	subs	r6, r0, #0
   11dc4:	beq	11df4 <__assert_fail@plt+0x470>
   11dc8:	movw	r4, #37252	; 0x9184
   11dcc:	movt	r4, #2
   11dd0:	mov	r1, r5
   11dd4:	bl	11b14 <__assert_fail@plt+0x190>
   11dd8:	ldr	r0, [r4, #16]
   11ddc:	cmp	r0, #0
   11de0:	beq	11de8 <__assert_fail@plt+0x464>
   11de4:	bl	11624 <free@plt>
   11de8:	str	r6, [r4, #16]
   11dec:	mov	r0, #0
   11df0:	pop	{r4, r5, r6, pc}
   11df4:	movw	r0, #32854	; 0x8056
   11df8:	movt	r0, #1280	; 0x500
   11dfc:	pop	{r4, r5, r6, pc}
   11e00:	push	{r4, r5, r6, lr}
   11e04:	mov	r0, r1
   11e08:	mov	r5, r1
   11e0c:	bl	117e0 <strlen@plt>
   11e10:	add	r0, r0, #1
   11e14:	bl	1175c <malloc@plt>
   11e18:	subs	r6, r0, #0
   11e1c:	beq	11e4c <__assert_fail@plt+0x4c8>
   11e20:	movw	r4, #37252	; 0x9184
   11e24:	movt	r4, #2
   11e28:	mov	r1, r5
   11e2c:	bl	11b14 <__assert_fail@plt+0x190>
   11e30:	ldr	r0, [r4, #8]
   11e34:	cmp	r0, #0
   11e38:	beq	11e40 <__assert_fail@plt+0x4bc>
   11e3c:	bl	11624 <free@plt>
   11e40:	str	r6, [r4, #8]
   11e44:	mov	r0, #0
   11e48:	pop	{r4, r5, r6, pc}
   11e4c:	movw	r0, #32854	; 0x8056
   11e50:	movt	r0, #1280	; 0x500
   11e54:	pop	{r4, r5, r6, pc}
   11e58:	push	{r4, r5, r6, lr}
   11e5c:	mov	r0, r1
   11e60:	mov	r5, r1
   11e64:	bl	117e0 <strlen@plt>
   11e68:	add	r0, r0, #1
   11e6c:	bl	1175c <malloc@plt>
   11e70:	subs	r6, r0, #0
   11e74:	beq	11ea4 <__assert_fail@plt+0x520>
   11e78:	movw	r4, #37252	; 0x9184
   11e7c:	movt	r4, #2
   11e80:	mov	r1, r5
   11e84:	bl	11b14 <__assert_fail@plt+0x190>
   11e88:	ldr	r0, [r4, #12]
   11e8c:	cmp	r0, #0
   11e90:	beq	11e98 <__assert_fail@plt+0x514>
   11e94:	bl	11624 <free@plt>
   11e98:	str	r6, [r4, #12]
   11e9c:	mov	r0, #0
   11ea0:	pop	{r4, r5, r6, pc}
   11ea4:	movw	r0, #32854	; 0x8056
   11ea8:	movt	r0, #1280	; 0x500
   11eac:	pop	{r4, r5, r6, pc}
   11eb0:	push	{r4, r5, r6, lr}
   11eb4:	mov	r0, r1
   11eb8:	mov	r5, r1
   11ebc:	bl	117e0 <strlen@plt>
   11ec0:	add	r0, r0, #1
   11ec4:	bl	1175c <malloc@plt>
   11ec8:	subs	r6, r0, #0
   11ecc:	beq	11efc <__assert_fail@plt+0x578>
   11ed0:	movw	r4, #37252	; 0x9184
   11ed4:	movt	r4, #2
   11ed8:	mov	r1, r5
   11edc:	bl	11b14 <__assert_fail@plt+0x190>
   11ee0:	ldr	r0, [r4, #4]
   11ee4:	cmp	r0, #0
   11ee8:	beq	11ef0 <__assert_fail@plt+0x56c>
   11eec:	bl	11624 <free@plt>
   11ef0:	str	r6, [r4, #4]
   11ef4:	mov	r0, #0
   11ef8:	pop	{r4, r5, r6, pc}
   11efc:	movw	r0, #32854	; 0x8056
   11f00:	movt	r0, #1280	; 0x500
   11f04:	pop	{r4, r5, r6, pc}
   11f08:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11f0c:	movw	r4, #37252	; 0x9184
   11f10:	movt	r4, #2
   11f14:	mov	r8, r0
   11f18:	ldr	r0, [r4, #32]
   11f1c:	bl	172f8 <__assert_fail@plt+0x5974>
   11f20:	cmp	r0, #0
   11f24:	str	r0, [r4, #28]
   11f28:	beq	11fdc <__assert_fail@plt+0x658>
   11f2c:	ldr	r3, [r4, #12]
   11f30:	cmp	r3, #0
   11f34:	movne	r9, #0
   11f38:	beq	12084 <__assert_fail@plt+0x700>
   11f3c:	movw	r6, #37252	; 0x9184
   11f40:	movw	r3, #37248	; 0x9180
   11f44:	movt	r6, #2
   11f48:	movt	r3, #2
   11f4c:	mov	r5, #0
   11f50:	str	r8, [r4, #132]	; 0x84
   11f54:	mov	r0, r6
   11f58:	ldr	r3, [r3]
   11f5c:	str	r5, [r4, #80]	; 0x50
   11f60:	str	r5, [r4, #84]	; 0x54
   11f64:	str	r5, [r4, #88]	; 0x58
   11f68:	blx	r3
   11f6c:	str	r5, [r4, #132]	; 0x84
   11f70:	mov	r7, r0
   11f74:	ldr	r0, [r4, #8]
   11f78:	cmp	r0, r5
   11f7c:	beq	11f88 <__assert_fail@plt+0x604>
   11f80:	bl	11624 <free@plt>
   11f84:	str	r5, [r6, #8]
   11f88:	cmp	r9, #0
   11f8c:	mov	r2, #0
   11f90:	str	r2, [r4, #92]	; 0x5c
   11f94:	movne	r3, #0
   11f98:	strne	r3, [r4, #12]
   11f9c:	ldr	r3, [r4, #84]	; 0x54
   11fa0:	cmp	r3, r2
   11fa4:	bne	11fe8 <__assert_fail@plt+0x664>
   11fa8:	cmp	r7, #0
   11fac:	blt	12008 <__assert_fail@plt+0x684>
   11fb0:	bne	12054 <__assert_fail@plt+0x6d0>
   11fb4:	ldr	r0, [r4, #28]
   11fb8:	movw	r4, #37252	; 0x9184
   11fbc:	movt	r4, #2
   11fc0:	cmp	r0, #0
   11fc4:	beq	1204c <__assert_fail@plt+0x6c8>
   11fc8:	bl	17458 <__assert_fail@plt+0x5ad4>
   11fcc:	mov	r3, #0
   11fd0:	mov	r0, r7
   11fd4:	str	r3, [r4, #28]
   11fd8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11fdc:	movw	r0, #32854	; 0x8056
   11fe0:	movt	r0, #1280	; 0x500
   11fe4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11fe8:	movw	r1, #31112	; 0x7988
   11fec:	movw	r2, #31124	; 0x7994
   11ff0:	movt	r1, #1
   11ff4:	movt	r2, #1
   11ff8:	mov	r0, r8
   11ffc:	bl	16b54 <__assert_fail@plt+0x51d0>
   12000:	cmp	r7, #0
   12004:	bge	11fb0 <__assert_fail@plt+0x62c>
   12008:	ldr	r0, [r4, #28]
   1200c:	movw	r5, #37252	; 0x9184
   12010:	movt	r5, #2
   12014:	cmp	r0, #0
   12018:	beq	12028 <__assert_fail@plt+0x6a4>
   1201c:	bl	17458 <__assert_fail@plt+0x5ad4>
   12020:	mov	r3, #0
   12024:	str	r3, [r5, #28]
   12028:	ldr	r0, [r4, #80]	; 0x50
   1202c:	mov	r2, #99	; 0x63
   12030:	mov	r3, #166	; 0xa6
   12034:	movt	r2, #1280	; 0x500
   12038:	cmp	r0, #0
   1203c:	movt	r3, #1280	; 0x500
   12040:	moveq	r0, r2
   12044:	movne	r0, r3
   12048:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1204c:	mov	r0, r7
   12050:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12054:	mov	r2, r7
   12058:	mov	r0, r8
   1205c:	ldr	r1, [r4, #28]
   12060:	bl	15d54 <__assert_fail@plt+0x43d0>
   12064:	subs	r7, r0, #0
   12068:	bne	11fb4 <__assert_fail@plt+0x630>
   1206c:	mov	r1, r7
   12070:	mov	r2, r7
   12074:	mov	r0, r8
   12078:	bl	15d54 <__assert_fail@plt+0x43d0>
   1207c:	mov	r7, r0
   12080:	b	11fb4 <__assert_fail@plt+0x630>
   12084:	ldr	r2, [r4, #128]	; 0x80
   12088:	movw	r3, #31104	; 0x7980
   1208c:	movt	r3, #1
   12090:	mov	r9, #1
   12094:	cmp	r2, #0
   12098:	moveq	r2, r3
   1209c:	str	r2, [r4, #12]
   120a0:	b	11f3c <__assert_fail@plt+0x5b8>
   120a4:	push	{r4, r5, r6, r7, lr}
   120a8:	mov	r4, r1
   120ac:	sub	sp, sp, #12
   120b0:	movw	r1, #31132	; 0x799c
   120b4:	mov	r0, r4
   120b8:	movt	r1, #1
   120bc:	mov	r5, r2
   120c0:	bl	11594 <strcmp@plt>
   120c4:	cmp	r0, #0
   120c8:	bne	120d8 <__assert_fail@plt+0x754>
   120cc:	ldrb	r2, [r5]
   120d0:	cmp	r2, #0
   120d4:	beq	121c0 <__assert_fail@plt+0x83c>
   120d8:	movw	r1, #31140	; 0x79a4
   120dc:	mov	r0, r4
   120e0:	movt	r1, #1
   120e4:	bl	11594 <strcmp@plt>
   120e8:	cmp	r0, #0
   120ec:	bne	120fc <__assert_fail@plt+0x778>
   120f0:	ldrb	r3, [r5]
   120f4:	cmp	r3, #0
   120f8:	beq	1225c <__assert_fail@plt+0x8d8>
   120fc:	movw	r1, #31148	; 0x79ac
   12100:	mov	r0, r4
   12104:	movt	r1, #1
   12108:	bl	11594 <strcmp@plt>
   1210c:	subs	r6, r0, #0
   12110:	beq	121dc <__assert_fail@plt+0x858>
   12114:	movw	r1, #31224	; 0x79f8
   12118:	mov	r0, r4
   1211c:	movt	r1, #1
   12120:	bl	11594 <strcmp@plt>
   12124:	cmp	r0, #0
   12128:	bne	12168 <__assert_fail@plt+0x7e4>
   1212c:	movw	r4, #37252	; 0x9184
   12130:	movt	r4, #2
   12134:	ldr	r0, [r4, #36]	; 0x24
   12138:	cmp	r0, #0
   1213c:	beq	12144 <__assert_fail@plt+0x7c0>
   12140:	bl	11624 <free@plt>
   12144:	mov	r0, r5
   12148:	bl	11834 <__strdup@plt>
   1214c:	cmp	r0, #0
   12150:	str	r0, [r4, #36]	; 0x24
   12154:	beq	121ac <__assert_fail@plt+0x828>
   12158:	mov	r3, #0
   1215c:	mov	r0, r3
   12160:	add	sp, sp, #12
   12164:	pop	{r4, r5, r6, r7, pc}
   12168:	movw	r1, #31232	; 0x7a00
   1216c:	mov	r0, r4
   12170:	movt	r1, #1
   12174:	bl	11594 <strcmp@plt>
   12178:	cmp	r0, #0
   1217c:	bne	12278 <__assert_fail@plt+0x8f4>
   12180:	movw	r4, #37252	; 0x9184
   12184:	movt	r4, #2
   12188:	ldr	r0, [r4, #40]	; 0x28
   1218c:	cmp	r0, #0
   12190:	beq	12198 <__assert_fail@plt+0x814>
   12194:	bl	11624 <free@plt>
   12198:	mov	r0, r5
   1219c:	bl	11834 <__strdup@plt>
   121a0:	cmp	r0, #0
   121a4:	str	r0, [r4, #40]	; 0x28
   121a8:	bne	12158 <__assert_fail@plt+0x7d4>
   121ac:	movw	r3, #32854	; 0x8056
   121b0:	movt	r3, #1280	; 0x500
   121b4:	mov	r0, r3
   121b8:	add	sp, sp, #12
   121bc:	pop	{r4, r5, r6, r7, pc}
   121c0:	movw	r1, #37252	; 0x9184
   121c4:	movt	r1, #2
   121c8:	mov	r3, r2
   121cc:	mov	r0, r3
   121d0:	str	r2, [r1, #60]	; 0x3c
   121d4:	add	sp, sp, #12
   121d8:	pop	{r4, r5, r6, r7, pc}
   121dc:	movw	r4, #37928	; 0x9428
   121e0:	movt	r4, #2
   121e4:	ldr	r7, [r4]
   121e8:	bl	117bc <getpid@plt>
   121ec:	movw	r2, #31160	; 0x79b8
   121f0:	movw	r3, #37956	; 0x9444
   121f4:	movt	r2, #1
   121f8:	movt	r3, #2
   121fc:	mov	r1, #1
   12200:	str	r0, [sp]
   12204:	mov	r0, r7
   12208:	bl	1187c <__fprintf_chk@plt>
   1220c:	ldrb	r3, [r5]
   12210:	cmp	r3, #0
   12214:	moveq	r0, #5
   12218:	beq	1222c <__assert_fail@plt+0x8a8>
   1221c:	mov	r0, r5
   12220:	mov	r1, r6
   12224:	mov	r2, #10
   12228:	bl	115a0 <strtol@plt>
   1222c:	bl	1166c <sleep@plt>
   12230:	ldr	r0, [r4]
   12234:	mov	r1, #1
   12238:	movw	r2, #31208	; 0x79e8
   1223c:	movw	r3, #37956	; 0x9444
   12240:	movt	r2, #1
   12244:	movt	r3, #2
   12248:	bl	1187c <__fprintf_chk@plt>
   1224c:	mov	r3, #0
   12250:	mov	r0, r3
   12254:	add	sp, sp, #12
   12258:	pop	{r4, r5, r6, r7, pc}
   1225c:	movw	r2, #37252	; 0x9184
   12260:	movt	r2, #2
   12264:	mov	r1, #1
   12268:	mov	r0, r3
   1226c:	str	r1, [r2, #60]	; 0x3c
   12270:	add	sp, sp, #12
   12274:	pop	{r4, r5, r6, r7, pc}
   12278:	movw	r1, #31240	; 0x7a08
   1227c:	mov	r0, r4
   12280:	movt	r1, #1
   12284:	bl	11594 <strcmp@plt>
   12288:	cmp	r0, #0
   1228c:	bne	122c0 <__assert_fail@plt+0x93c>
   12290:	movw	r4, #37252	; 0x9184
   12294:	movt	r4, #2
   12298:	ldr	r0, [r4, #44]	; 0x2c
   1229c:	cmp	r0, #0
   122a0:	beq	122a8 <__assert_fail@plt+0x924>
   122a4:	bl	11624 <free@plt>
   122a8:	mov	r0, r5
   122ac:	bl	11834 <__strdup@plt>
   122b0:	cmp	r0, #0
   122b4:	str	r0, [r4, #44]	; 0x2c
   122b8:	bne	12158 <__assert_fail@plt+0x7d4>
   122bc:	b	121ac <__assert_fail@plt+0x828>
   122c0:	movw	r1, #31248	; 0x7a10
   122c4:	mov	r0, r4
   122c8:	movt	r1, #1
   122cc:	bl	11594 <strcmp@plt>
   122d0:	cmp	r0, #0
   122d4:	beq	12320 <__assert_fail@plt+0x99c>
   122d8:	movw	r1, #31260	; 0x7a1c
   122dc:	mov	r0, r4
   122e0:	movt	r1, #1
   122e4:	bl	11594 <strcmp@plt>
   122e8:	cmp	r0, #0
   122ec:	bne	12350 <__assert_fail@plt+0x9cc>
   122f0:	movw	r4, #37252	; 0x9184
   122f4:	movt	r4, #2
   122f8:	ldr	r0, [r4, #52]	; 0x34
   122fc:	cmp	r0, #0
   12300:	beq	12308 <__assert_fail@plt+0x984>
   12304:	bl	11624 <free@plt>
   12308:	mov	r0, r5
   1230c:	bl	11834 <__strdup@plt>
   12310:	cmp	r0, #0
   12314:	str	r0, [r4, #52]	; 0x34
   12318:	bne	12158 <__assert_fail@plt+0x7d4>
   1231c:	b	121ac <__assert_fail@plt+0x828>
   12320:	movw	r4, #37252	; 0x9184
   12324:	movt	r4, #2
   12328:	ldr	r0, [r4, #48]	; 0x30
   1232c:	cmp	r0, #0
   12330:	beq	12338 <__assert_fail@plt+0x9b4>
   12334:	bl	11624 <free@plt>
   12338:	mov	r0, r5
   1233c:	bl	11834 <__strdup@plt>
   12340:	cmp	r0, #0
   12344:	str	r0, [r4, #48]	; 0x30
   12348:	bne	12158 <__assert_fail@plt+0x7d4>
   1234c:	b	121ac <__assert_fail@plt+0x828>
   12350:	movw	r1, #31272	; 0x7a28
   12354:	mov	r0, r4
   12358:	movt	r1, #1
   1235c:	bl	11594 <strcmp@plt>
   12360:	subs	r6, r0, #0
   12364:	beq	12420 <__assert_fail@plt+0xa9c>
   12368:	movw	r1, #31284	; 0x7a34
   1236c:	mov	r0, r4
   12370:	movt	r1, #1
   12374:	bl	11594 <strcmp@plt>
   12378:	cmp	r0, #0
   1237c:	bne	123b0 <__assert_fail@plt+0xa2c>
   12380:	movw	r4, #37252	; 0x9184
   12384:	movt	r4, #2
   12388:	ldr	r0, [r4, #68]	; 0x44
   1238c:	cmp	r0, #0
   12390:	beq	12398 <__assert_fail@plt+0xa14>
   12394:	bl	11624 <free@plt>
   12398:	mov	r0, r5
   1239c:	bl	11834 <__strdup@plt>
   123a0:	cmp	r0, #0
   123a4:	str	r0, [r4, #68]	; 0x44
   123a8:	bne	12158 <__assert_fail@plt+0x7d4>
   123ac:	b	121ac <__assert_fail@plt+0x828>
   123b0:	movw	r1, #31296	; 0x7a40
   123b4:	mov	r0, r4
   123b8:	movt	r1, #1
   123bc:	bl	11594 <strcmp@plt>
   123c0:	cmp	r0, #0
   123c4:	beq	12444 <__assert_fail@plt+0xac0>
   123c8:	movw	r1, #31308	; 0x7a4c
   123cc:	mov	r0, r4
   123d0:	movt	r1, #1
   123d4:	bl	11594 <strcmp@plt>
   123d8:	cmp	r0, #0
   123dc:	beq	12464 <__assert_fail@plt+0xae0>
   123e0:	mov	r0, r4
   123e4:	movw	r1, #31324	; 0x7a5c
   123e8:	movt	r1, #1
   123ec:	bl	11594 <strcmp@plt>
   123f0:	cmp	r0, #0
   123f4:	movne	r3, #174	; 0xae
   123f8:	movtne	r3, #1280	; 0x500
   123fc:	bne	1215c <__assert_fail@plt+0x7d8>
   12400:	mov	r0, r5
   12404:	bl	11834 <__strdup@plt>
   12408:	movw	r3, #37252	; 0x9184
   1240c:	movt	r3, #2
   12410:	cmp	r0, #0
   12414:	str	r0, [r3, #128]	; 0x80
   12418:	bne	12158 <__assert_fail@plt+0x7d4>
   1241c:	b	121ac <__assert_fail@plt+0x828>
   12420:	mov	r2, #10
   12424:	mov	r0, r5
   12428:	mov	r1, r6
   1242c:	bl	115a0 <strtol@plt>
   12430:	movw	r2, #37252	; 0x9184
   12434:	movt	r2, #2
   12438:	mov	r3, r6
   1243c:	str	r0, [r2, #64]	; 0x40
   12440:	b	1215c <__assert_fail@plt+0x7d8>
   12444:	mov	r0, r5
   12448:	bl	11834 <__strdup@plt>
   1244c:	movw	r3, #37252	; 0x9184
   12450:	movt	r3, #2
   12454:	cmp	r0, #0
   12458:	str	r0, [r3, #120]	; 0x78
   1245c:	bne	12158 <__assert_fail@plt+0x7d4>
   12460:	b	121ac <__assert_fail@plt+0x828>
   12464:	mov	r0, r5
   12468:	bl	11834 <__strdup@plt>
   1246c:	movw	r3, #37252	; 0x9184
   12470:	movt	r3, #2
   12474:	cmp	r0, #0
   12478:	str	r0, [r3, #124]	; 0x7c
   1247c:	bne	12158 <__assert_fail@plt+0x7d4>
   12480:	b	121ac <__assert_fail@plt+0x828>
   12484:	push	{r4, r5, r6, lr}
   12488:	movw	r4, #37920	; 0x9420
   1248c:	movt	r4, #2
   12490:	sub	sp, sp, #64	; 0x40
   12494:	mov	r5, r1
   12498:	mov	r6, r0
   1249c:	ldr	r3, [r4]
   124a0:	mov	r0, r1
   124a4:	movw	r1, #31340	; 0x7a6c
   124a8:	movt	r1, #1
   124ac:	str	r3, [sp, #60]	; 0x3c
   124b0:	bl	11594 <strcmp@plt>
   124b4:	cmp	r0, #0
   124b8:	beq	12550 <__assert_fail@plt+0xbcc>
   124bc:	ldrb	r3, [r5]
   124c0:	cmp	r3, #112	; 0x70
   124c4:	beq	124e8 <__assert_fail@plt+0xb64>
   124c8:	mov	r0, #280	; 0x118
   124cc:	movt	r0, #1280	; 0x500
   124d0:	ldr	r2, [sp, #60]	; 0x3c
   124d4:	ldr	r3, [r4]
   124d8:	cmp	r2, r3
   124dc:	bne	12568 <__assert_fail@plt+0xbe4>
   124e0:	add	sp, sp, #64	; 0x40
   124e4:	pop	{r4, r5, r6, pc}
   124e8:	ldrb	r3, [r5, #1]
   124ec:	cmp	r3, #105	; 0x69
   124f0:	bne	124c8 <__assert_fail@plt+0xb44>
   124f4:	ldrb	r3, [r5, #2]
   124f8:	cmp	r3, #100	; 0x64
   124fc:	bne	124c8 <__assert_fail@plt+0xb44>
   12500:	ldrb	r3, [r5, #3]
   12504:	cmp	r3, #0
   12508:	bne	124c8 <__assert_fail@plt+0xb44>
   1250c:	bl	117bc <getpid@plt>
   12510:	mov	r1, #50	; 0x32
   12514:	mov	r3, r1
   12518:	mov	r2, #1
   1251c:	movw	ip, #31356	; 0x7a7c
   12520:	movt	ip, #1
   12524:	str	ip, [sp]
   12528:	str	r0, [sp, #4]
   1252c:	add	r0, sp, #8
   12530:	bl	11978 <__snprintf_chk@plt>
   12534:	add	r0, sp, #8
   12538:	bl	117e0 <strlen@plt>
   1253c:	add	r1, sp, #8
   12540:	mov	r2, r0
   12544:	mov	r0, r6
   12548:	bl	15d54 <__assert_fail@plt+0x43d0>
   1254c:	b	124d0 <__assert_fail@plt+0xb4c>
   12550:	mov	r0, r6
   12554:	movw	r1, #31348	; 0x7a74
   12558:	mov	r2, #5
   1255c:	movt	r1, #1
   12560:	bl	15d54 <__assert_fail@plt+0x43d0>
   12564:	b	124d0 <__assert_fail@plt+0xb4c>
   12568:	bl	11690 <__stack_chk_fail@plt>
   1256c:	push	{r3, r4, r5, r6, r7, lr}
   12570:	movw	r4, #37252	; 0x9184
   12574:	movw	r3, #37248	; 0x9180
   12578:	movt	r4, #2
   1257c:	movt	r3, #2
   12580:	mov	r5, #0
   12584:	mov	r2, #1
   12588:	mov	r7, r0
   1258c:	str	r2, [r4, #88]	; 0x58
   12590:	mov	r0, r4
   12594:	str	r5, [r4, #92]	; 0x5c
   12598:	str	r5, [r4, #84]	; 0x54
   1259c:	str	r5, [r4, #80]	; 0x50
   125a0:	ldr	r3, [r3]
   125a4:	blx	r3
   125a8:	mov	r6, r0
   125ac:	ldr	r0, [r4, #8]
   125b0:	cmp	r0, r5
   125b4:	beq	125c0 <__assert_fail@plt+0xc3c>
   125b8:	bl	11624 <free@plt>
   125bc:	str	r5, [r4, #8]
   125c0:	ldr	r3, [r4, #84]	; 0x54
   125c4:	cmp	r3, #0
   125c8:	bne	125f8 <__assert_fail@plt+0xc74>
   125cc:	cmp	r6, #0
   125d0:	bne	125f0 <__assert_fail@plt+0xc6c>
   125d4:	ldr	r0, [r4, #80]	; 0x50
   125d8:	mov	r3, #166	; 0xa6
   125dc:	movt	r3, #1280	; 0x500
   125e0:	cmp	r0, #0
   125e4:	movne	r0, r3
   125e8:	moveq	r0, #0
   125ec:	pop	{r3, r4, r5, r6, r7, pc}
   125f0:	mov	r0, #0
   125f4:	pop	{r3, r4, r5, r6, r7, pc}
   125f8:	mov	r0, r7
   125fc:	movw	r1, #31112	; 0x7988
   12600:	movw	r2, #31124	; 0x7994
   12604:	movt	r1, #1
   12608:	movt	r2, #1
   1260c:	bl	16b54 <__assert_fail@plt+0x51d0>
   12610:	b	125cc <__assert_fail@plt+0xc48>
   12614:	push	{r3, r4, r5, r6, r7, lr}
   12618:	mov	r7, r0
   1261c:	mov	r0, r1
   12620:	movw	r1, #31360	; 0x7a80
   12624:	movt	r1, #1
   12628:	mov	r5, #0
   1262c:	bl	11564 <strstr@plt>
   12630:	movw	r4, #37252	; 0x9184
   12634:	movw	r3, #37248	; 0x9180
   12638:	movt	r4, #2
   1263c:	movt	r3, #2
   12640:	str	r5, [r4, #92]	; 0x5c
   12644:	str	r5, [r4, #84]	; 0x54
   12648:	str	r5, [r4, #80]	; 0x50
   1264c:	str	r5, [r4, #76]	; 0x4c
   12650:	ldr	r3, [r3]
   12654:	subs	r2, r0, r5
   12658:	mov	r0, r4
   1265c:	movne	r2, #1
   12660:	str	r2, [r4, #88]	; 0x58
   12664:	blx	r3
   12668:	mov	r6, r0
   1266c:	ldr	r0, [r4, #8]
   12670:	cmp	r0, r5
   12674:	beq	12680 <__assert_fail@plt+0xcfc>
   12678:	bl	11624 <free@plt>
   1267c:	str	r5, [r4, #8]
   12680:	ldr	r3, [r4, #84]	; 0x54
   12684:	cmp	r3, #0
   12688:	bne	126ec <__assert_fail@plt+0xd68>
   1268c:	cmp	r6, #0
   12690:	bne	126e4 <__assert_fail@plt+0xd60>
   12694:	ldr	r2, [r4, #80]	; 0x50
   12698:	movw	r3, #37252	; 0x9184
   1269c:	movt	r3, #2
   126a0:	cmp	r2, #0
   126a4:	bne	126d8 <__assert_fail@plt+0xd54>
   126a8:	ldr	r2, [r3, #88]	; 0x58
   126ac:	cmp	r2, #0
   126b0:	bne	12708 <__assert_fail@plt+0xd84>
   126b4:	ldr	r0, [r3, #76]	; 0x4c
   126b8:	mov	r2, #114	; 0x72
   126bc:	mov	r3, #99	; 0x63
   126c0:	movt	r2, #1280	; 0x500
   126c4:	cmp	r0, #0
   126c8:	movt	r3, #1280	; 0x500
   126cc:	moveq	r0, r2
   126d0:	movne	r0, r3
   126d4:	pop	{r3, r4, r5, r6, r7, pc}
   126d8:	mov	r0, #166	; 0xa6
   126dc:	movt	r0, #1280	; 0x500
   126e0:	pop	{r3, r4, r5, r6, r7, pc}
   126e4:	mov	r0, #0
   126e8:	pop	{r3, r4, r5, r6, r7, pc}
   126ec:	mov	r0, r7
   126f0:	movw	r1, #31112	; 0x7988
   126f4:	movw	r2, #31124	; 0x7994
   126f8:	movt	r1, #1
   126fc:	movt	r2, #1
   12700:	bl	16b54 <__assert_fail@plt+0x51d0>
   12704:	b	1268c <__assert_fail@plt+0xd08>
   12708:	mov	r0, r6
   1270c:	pop	{r3, r4, r5, r6, r7, pc}
   12710:	push	{r4, r5, r6, r7, r8, lr}
   12714:	movw	r4, #37920	; 0x9420
   12718:	movt	r4, #2
   1271c:	sub	sp, sp, #32
   12720:	mov	r6, r0
   12724:	mov	r0, r1
   12728:	ldr	r3, [r4]
   1272c:	mov	r5, r1
   12730:	str	r1, [sp, #12]
   12734:	str	r3, [sp, #28]
   12738:	bl	117e0 <strlen@plt>
   1273c:	cmp	r6, #0
   12740:	add	r0, r0, #1
   12744:	str	r0, [sp, #16]
   12748:	beq	1287c <__assert_fail@plt+0xef8>
   1274c:	mov	r0, #0
   12750:	mov	r1, r0
   12754:	bl	118ac <setlocale@plt>
   12758:	bl	11834 <__strdup@plt>
   1275c:	subs	r5, r0, #0
   12760:	beq	12874 <__assert_fail@plt+0xef0>
   12764:	mov	r1, r6
   12768:	mov	r0, #0
   1276c:	bl	118ac <setlocale@plt>
   12770:	mov	r0, #14
   12774:	bl	11900 <nl_langinfo@plt>
   12778:	movw	r3, #31376	; 0x7a90
   1277c:	movt	r3, #1
   12780:	mov	r1, r5
   12784:	cmp	r0, #0
   12788:	movne	r7, r0
   1278c:	mov	r0, #0
   12790:	moveq	r7, r3
   12794:	bl	118ac <setlocale@plt>
   12798:	mov	r0, r5
   1279c:	bl	11624 <free@plt>
   127a0:	ldr	r0, [sp, #16]
   127a4:	lsl	r0, r0, #4
   127a8:	str	r0, [sp, #24]
   127ac:	bl	1175c <malloc@plt>
   127b0:	cmp	r0, #0
   127b4:	mov	r5, r0
   127b8:	str	r0, [sp, #20]
   127bc:	beq	12874 <__assert_fail@plt+0xef0>
   127c0:	movw	r1, #31420	; 0x7abc
   127c4:	mov	r0, r7
   127c8:	movt	r1, #1
   127cc:	bl	11768 <iconv_open@plt>
   127d0:	cmn	r0, #1
   127d4:	mov	r6, r0
   127d8:	beq	128ac <__assert_fail@plt+0xf28>
   127dc:	add	r3, sp, #24
   127e0:	add	r1, sp, #12
   127e4:	str	r3, [sp]
   127e8:	add	r2, sp, #16
   127ec:	add	r3, sp, #20
   127f0:	bl	1157c <iconv@plt>
   127f4:	mov	r8, r0
   127f8:	mov	r0, r6
   127fc:	bl	11570 <iconv_close@plt>
   12800:	cmn	r8, #1
   12804:	beq	12830 <__assert_fail@plt+0xeac>
   12808:	ldr	r3, [sp, #16]
   1280c:	cmp	r3, #0
   12810:	moveq	r0, r5
   12814:	bne	12830 <__assert_fail@plt+0xeac>
   12818:	ldr	r2, [sp, #28]
   1281c:	ldr	r3, [r4]
   12820:	cmp	r2, r3
   12824:	bne	128d8 <__assert_fail@plt+0xf54>
   12828:	add	sp, sp, #32
   1282c:	pop	{r4, r5, r6, r7, r8, pc}
   12830:	movw	r3, #37928	; 0x9428
   12834:	movt	r3, #2
   12838:	ldr	r6, [r3]
   1283c:	bl	11804 <__errno_location@plt>
   12840:	ldr	r0, [r0]
   12844:	bl	11780 <strerror@plt>
   12848:	movw	r2, #31468	; 0x7aec
   1284c:	movt	r2, #1
   12850:	movw	r3, #37956	; 0x9444
   12854:	str	r7, [sp]
   12858:	str	r0, [sp, #4]
   1285c:	movt	r3, #2
   12860:	mov	r1, #1
   12864:	mov	r0, r6
   12868:	bl	1187c <__fprintf_chk@plt>
   1286c:	mov	r0, r5
   12870:	bl	11624 <free@plt>
   12874:	mov	r0, #0
   12878:	b	12818 <__assert_fail@plt+0xe94>
   1287c:	movw	r1, #37928	; 0x9428
   12880:	movt	r1, #2
   12884:	movw	r2, #31380	; 0x7a94
   12888:	movw	r3, #37956	; 0x9444
   1288c:	ldr	r0, [r1]
   12890:	movt	r2, #1
   12894:	movt	r3, #2
   12898:	mov	r1, #1
   1289c:	bl	1187c <__fprintf_chk@plt>
   128a0:	mov	r0, r5
   128a4:	bl	11834 <__strdup@plt>
   128a8:	b	12818 <__assert_fail@plt+0xe94>
   128ac:	movw	r3, #37928	; 0x9428
   128b0:	movt	r3, #2
   128b4:	ldr	r6, [r3]
   128b8:	bl	11804 <__errno_location@plt>
   128bc:	ldr	r0, [r0]
   128c0:	bl	11780 <strerror@plt>
   128c4:	movw	r2, #31428	; 0x7ac4
   128c8:	str	r7, [sp]
   128cc:	movw	r3, #37956	; 0x9444
   128d0:	movt	r2, #1
   128d4:	b	12858 <__assert_fail@plt+0xed4>
   128d8:	bl	11690 <__stack_chk_fail@plt>
   128dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   128e0:	movw	r4, #37920	; 0x9420
   128e4:	movt	r4, #2
   128e8:	sub	sp, sp, #36	; 0x24
   128ec:	mov	r5, r0
   128f0:	mov	r0, r1
   128f4:	ldr	r3, [r4]
   128f8:	mov	r6, r2
   128fc:	str	r1, [sp, #12]
   12900:	str	r3, [sp, #28]
   12904:	bl	117e0 <strlen@plt>
   12908:	cmp	r5, #0
   1290c:	add	r0, r0, #1
   12910:	str	r0, [sp, #16]
   12914:	beq	12aa8 <__assert_fail@plt+0x1124>
   12918:	mov	r0, #0
   1291c:	mov	r1, r0
   12920:	bl	118ac <setlocale@plt>
   12924:	bl	11834 <__strdup@plt>
   12928:	subs	r8, r0, #0
   1292c:	beq	12a38 <__assert_fail@plt+0x10b4>
   12930:	mov	r1, r5
   12934:	mov	r0, #0
   12938:	bl	118ac <setlocale@plt>
   1293c:	mov	r0, #14
   12940:	bl	11900 <nl_langinfo@plt>
   12944:	mov	r1, r8
   12948:	mov	r7, r0
   1294c:	mov	r0, #0
   12950:	bl	118ac <setlocale@plt>
   12954:	mov	r0, r8
   12958:	bl	11624 <free@plt>
   1295c:	ldr	r0, [sp, #16]
   12960:	cmp	r6, #0
   12964:	lsl	r0, r0, #4
   12968:	str	r0, [sp, #24]
   1296c:	bne	12a54 <__assert_fail@plt+0x10d0>
   12970:	bl	1175c <malloc@plt>
   12974:	mov	r5, r0
   12978:	cmp	r5, #0
   1297c:	str	r5, [sp, #20]
   12980:	beq	12a38 <__assert_fail@plt+0x10b4>
   12984:	movw	r0, #31420	; 0x7abc
   12988:	mov	r1, r7
   1298c:	movt	r0, #1
   12990:	bl	11768 <iconv_open@plt>
   12994:	cmn	r0, #1
   12998:	mov	r8, r0
   1299c:	beq	12a6c <__assert_fail@plt+0x10e8>
   129a0:	add	r3, sp, #24
   129a4:	add	r1, sp, #12
   129a8:	str	r3, [sp]
   129ac:	add	r2, sp, #16
   129b0:	add	r3, sp, #20
   129b4:	bl	1157c <iconv@plt>
   129b8:	mov	r9, r0
   129bc:	mov	r0, r8
   129c0:	bl	11570 <iconv_close@plt>
   129c4:	cmn	r9, #1
   129c8:	beq	129dc <__assert_fail@plt+0x1058>
   129cc:	ldr	r3, [sp, #16]
   129d0:	cmp	r3, #0
   129d4:	moveq	r0, r5
   129d8:	beq	12a3c <__assert_fail@plt+0x10b8>
   129dc:	cmp	r7, #0
   129e0:	movw	r2, #37928	; 0x9428
   129e4:	movw	r3, #31376	; 0x7a90
   129e8:	movt	r2, #2
   129ec:	movt	r3, #1
   129f0:	ldr	r8, [r2]
   129f4:	moveq	r7, r3
   129f8:	bl	11804 <__errno_location@plt>
   129fc:	ldr	r0, [r0]
   12a00:	bl	11780 <strerror@plt>
   12a04:	movw	r2, #31552	; 0x7b40
   12a08:	movt	r2, #1
   12a0c:	movw	r3, #37956	; 0x9444
   12a10:	str	r7, [sp]
   12a14:	str	r0, [sp, #4]
   12a18:	movt	r3, #2
   12a1c:	mov	r1, #1
   12a20:	mov	r0, r8
   12a24:	bl	1187c <__fprintf_chk@plt>
   12a28:	cmp	r6, #0
   12a2c:	mov	r0, r5
   12a30:	beq	12a60 <__assert_fail@plt+0x10dc>
   12a34:	bl	17458 <__assert_fail@plt+0x5ad4>
   12a38:	mov	r0, #0
   12a3c:	ldr	r2, [sp, #28]
   12a40:	ldr	r3, [r4]
   12a44:	cmp	r2, r3
   12a48:	bne	12b04 <__assert_fail@plt+0x1180>
   12a4c:	add	sp, sp, #36	; 0x24
   12a50:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12a54:	bl	172f8 <__assert_fail@plt+0x5974>
   12a58:	mov	r5, r0
   12a5c:	b	12978 <__assert_fail@plt+0xff4>
   12a60:	bl	11624 <free@plt>
   12a64:	mov	r0, r6
   12a68:	b	12a3c <__assert_fail@plt+0x10b8>
   12a6c:	cmp	r7, #0
   12a70:	movw	r2, #37928	; 0x9428
   12a74:	movw	r3, #31376	; 0x7a90
   12a78:	movt	r2, #2
   12a7c:	movt	r3, #1
   12a80:	ldr	r8, [r2]
   12a84:	moveq	r7, r3
   12a88:	bl	11804 <__errno_location@plt>
   12a8c:	ldr	r0, [r0]
   12a90:	bl	11780 <strerror@plt>
   12a94:	movw	r2, #31512	; 0x7b18
   12a98:	str	r7, [sp]
   12a9c:	movw	r3, #37956	; 0x9444
   12aa0:	movt	r2, #1
   12aa4:	b	12a14 <__assert_fail@plt+0x1090>
   12aa8:	movw	r1, #37928	; 0x9428
   12aac:	movt	r1, #2
   12ab0:	movw	r2, #31380	; 0x7a94
   12ab4:	movw	r3, #37956	; 0x9444
   12ab8:	ldr	r0, [r1]
   12abc:	movt	r2, #1
   12ac0:	movt	r3, #2
   12ac4:	mov	r1, #1
   12ac8:	bl	1187c <__fprintf_chk@plt>
   12acc:	cmp	r6, #0
   12ad0:	ldr	r0, [sp, #16]
   12ad4:	beq	12af8 <__assert_fail@plt+0x1174>
   12ad8:	bl	172f8 <__assert_fail@plt+0x5974>
   12adc:	mov	r5, r0
   12ae0:	subs	r0, r5, #0
   12ae4:	beq	12a3c <__assert_fail@plt+0x10b8>
   12ae8:	ldr	r1, [sp, #12]
   12aec:	bl	11738 <strcpy@plt>
   12af0:	mov	r0, r5
   12af4:	b	12a3c <__assert_fail@plt+0x10b8>
   12af8:	bl	1175c <malloc@plt>
   12afc:	mov	r5, r0
   12b00:	b	12ae0 <__assert_fail@plt+0x115c>
   12b04:	bl	11690 <__stack_chk_fail@plt>
   12b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b0c:	movw	r4, #31672	; 0x7bb8
   12b10:	movt	r4, #1
   12b14:	ldr	r5, [r0, #132]	; 0x84
   12b18:	mov	fp, r1
   12b1c:	mov	r7, r2
   12b20:	ldm	r4!, {r0, r1, r2, r3}
   12b24:	movw	r8, #37920	; 0x9420
   12b28:	movt	r8, #2
   12b2c:	sub	sp, sp, #44	; 0x2c
   12b30:	add	r6, sp, #16
   12b34:	cmp	r5, #0
   12b38:	ldr	r9, [r8]
   12b3c:	ldr	r4, [r4]
   12b40:	stmia	r6!, {r0, r1, r2, r3}
   12b44:	str	r9, [sp, #36]	; 0x24
   12b48:	strb	r4, [r6]
   12b4c:	beq	12d6c <__assert_fail@plt+0x13e8>
   12b50:	cmp	r7, #300	; 0x12c
   12b54:	movcs	r7, #300	; 0x12c
   12b58:	add	r0, r7, r7, lsl #1
   12b5c:	add	r0, r0, #17
   12b60:	bl	172f8 <__assert_fail@plt+0x5974>
   12b64:	subs	sl, r0, #0
   12b68:	beq	12d6c <__assert_fail@plt+0x13e8>
   12b6c:	add	r1, sp, #16
   12b70:	bl	11678 <stpcpy@plt>
   12b74:	cmp	r7, #0
   12b78:	movne	r4, #0
   12b7c:	movwne	r9, #31596	; 0x7b6c
   12b80:	movne	r3, r4
   12b84:	movtne	r9, #1
   12b88:	mov	r6, r0
   12b8c:	bne	12bb4 <__assert_fail@plt+0x1230>
   12b90:	b	12bf4 <__assert_fail@plt+0x1270>
   12b94:	cmp	r3, #32
   12b98:	add	r4, r4, #1
   12b9c:	add	r6, r6, #1
   12ba0:	moveq	r3, #43	; 0x2b
   12ba4:	cmp	r4, r7
   12ba8:	strb	r3, [r6, #-1]
   12bac:	mov	r3, r4
   12bb0:	beq	12bf4 <__assert_fail@plt+0x1270>
   12bb4:	ldrb	r3, [fp, r3]
   12bb8:	cmp	r3, #43	; 0x2b
   12bbc:	cmpne	r3, #31
   12bc0:	bhi	12b94 <__assert_fail@plt+0x1210>
   12bc4:	mov	r0, r6
   12bc8:	str	r3, [sp, #4]
   12bcc:	add	r4, r4, #1
   12bd0:	mvn	r3, #0
   12bd4:	str	r9, [sp]
   12bd8:	mov	r1, #4
   12bdc:	mov	r2, #1
   12be0:	add	r6, r6, #3
   12be4:	bl	11978 <__snprintf_chk@plt>
   12be8:	cmp	r4, r7
   12bec:	mov	r3, r4
   12bf0:	bne	12bb4 <__assert_fail@plt+0x1230>
   12bf4:	mov	r1, sl
   12bf8:	mov	r0, r5
   12bfc:	bl	159c0 <__assert_fail@plt+0x403c>
   12c00:	mov	r6, r0
   12c04:	mov	r0, sl
   12c08:	bl	17458 <__assert_fail@plt+0x5ad4>
   12c0c:	cmp	r6, #0
   12c10:	moveq	r7, r6
   12c14:	bne	12d4c <__assert_fail@plt+0x13c8>
   12c18:	mov	r0, r5
   12c1c:	add	r1, sp, #8
   12c20:	add	r2, sp, #12
   12c24:	bl	15970 <__assert_fail@plt+0x3fec>
   12c28:	cmp	r0, #0
   12c2c:	bne	12d10 <__assert_fail@plt+0x138c>
   12c30:	ldr	r0, [sp, #8]
   12c34:	ldrb	r2, [r0]
   12c38:	cmp	r2, #35	; 0x23
   12c3c:	beq	12c18 <__assert_fail@plt+0x1294>
   12c40:	ldr	r4, [sp, #12]
   12c44:	cmp	r4, #0
   12c48:	beq	12c18 <__assert_fail@plt+0x1294>
   12c4c:	cmp	r2, #69	; 0x45
   12c50:	beq	12cdc <__assert_fail@plt+0x1358>
   12c54:	cmp	r2, #67	; 0x43
   12c58:	beq	12c9c <__assert_fail@plt+0x1318>
   12c5c:	cmp	r2, #68	; 0x44
   12c60:	bne	12c18 <__assert_fail@plt+0x1294>
   12c64:	ldrb	r3, [r0, #1]
   12c68:	cmp	r3, #32
   12c6c:	bne	12c18 <__assert_fail@plt+0x1294>
   12c70:	cmp	r4, #2
   12c74:	bls	12c18 <__assert_fail@plt+0x1294>
   12c78:	cmp	r7, #0
   12c7c:	bne	12c18 <__assert_fail@plt+0x1294>
   12c80:	mov	r1, r7
   12c84:	add	r0, r0, #2
   12c88:	mov	r2, #10
   12c8c:	mov	r7, #1
   12c90:	bl	115a0 <strtol@plt>
   12c94:	mov	r6, r0
   12c98:	b	12c18 <__assert_fail@plt+0x1294>
   12c9c:	ldrb	r3, [r0, #1]
   12ca0:	cmp	r3, #65	; 0x41
   12ca4:	bne	12c18 <__assert_fail@plt+0x1294>
   12ca8:	ldrb	r3, [r0, #2]
   12cac:	cmp	r3, #78	; 0x4e
   12cb0:	bne	12c18 <__assert_fail@plt+0x1294>
   12cb4:	ldrb	r3, [r0, #3]
   12cb8:	tst	r3, #223	; 0xdf
   12cbc:	bne	12c18 <__assert_fail@plt+0x1294>
   12cc0:	cmp	r6, #100	; 0x64
   12cc4:	movlt	r0, r6
   12cc8:	movge	r0, #100	; 0x64
   12ccc:	mvn	r3, #99	; 0x63
   12cd0:	cmp	r0, r3
   12cd4:	movlt	r0, r3
   12cd8:	b	12d34 <__assert_fail@plt+0x13b0>
   12cdc:	ldrb	r3, [r0, #1]
   12ce0:	cmp	r3, #78	; 0x4e
   12ce4:	beq	12d00 <__assert_fail@plt+0x137c>
   12ce8:	cmp	r3, #82	; 0x52
   12cec:	bne	12c18 <__assert_fail@plt+0x1294>
   12cf0:	ldrb	r3, [r0, #2]
   12cf4:	cmp	r3, #82	; 0x52
   12cf8:	bne	12c18 <__assert_fail@plt+0x1294>
   12cfc:	b	12cb4 <__assert_fail@plt+0x1330>
   12d00:	ldrb	r3, [r0, #2]
   12d04:	cmp	r3, #68	; 0x44
   12d08:	bne	12c18 <__assert_fail@plt+0x1294>
   12d0c:	b	12cb4 <__assert_fail@plt+0x1330>
   12d10:	movw	r1, #37928	; 0x9428
   12d14:	movt	r1, #2
   12d18:	mov	r3, r0
   12d1c:	movw	r2, #31640	; 0x7b98
   12d20:	ldr	r0, [r1]
   12d24:	movt	r2, #1
   12d28:	mov	r1, #1
   12d2c:	bl	1187c <__fprintf_chk@plt>
   12d30:	mov	r0, #0
   12d34:	ldr	r2, [sp, #36]	; 0x24
   12d38:	ldr	r3, [r8]
   12d3c:	cmp	r2, r3
   12d40:	bne	12d74 <__assert_fail@plt+0x13f0>
   12d44:	add	sp, sp, #44	; 0x2c
   12d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d4c:	movw	r1, #37928	; 0x9428
   12d50:	movt	r1, #2
   12d54:	movw	r2, #31604	; 0x7b74
   12d58:	mov	r3, r6
   12d5c:	ldr	r0, [r1]
   12d60:	movt	r2, #1
   12d64:	mov	r1, #1
   12d68:	bl	1187c <__fprintf_chk@plt>
   12d6c:	mov	r0, #0
   12d70:	b	12d34 <__assert_fail@plt+0x13b0>
   12d74:	bl	11690 <__stack_chk_fail@plt>
   12d78:	push	{r3, r4, r5, lr}
   12d7c:	movw	r3, #37252	; 0x9184
   12d80:	movt	r3, #2
   12d84:	mov	r4, r0
   12d88:	ldr	r3, [r3, #32]
   12d8c:	cmp	r3, r1
   12d90:	bgt	12dc4 <__assert_fail@plt+0x1440>
   12d94:	ldr	r1, [r0, #32]
   12d98:	ldr	r0, [r0, #28]
   12d9c:	lsl	r1, r1, #1
   12da0:	bl	17504 <__assert_fail@plt+0x5b80>
   12da4:	subs	r5, r0, #0
   12da8:	beq	12dcc <__assert_fail@plt+0x1448>
   12dac:	ldr	r3, [r4, #32]
   12db0:	mov	r0, r5
   12db4:	str	r5, [r4, #28]
   12db8:	lsl	r3, r3, #1
   12dbc:	str	r3, [r4, #32]
   12dc0:	pop	{r3, r4, r5, pc}
   12dc4:	mov	r0, #0
   12dc8:	pop	{r3, r4, r5, pc}
   12dcc:	ldr	r0, [r4, #28]
   12dd0:	bl	17458 <__assert_fail@plt+0x5ad4>
   12dd4:	str	r5, [r4, #28]
   12dd8:	str	r5, [r4, #32]
   12ddc:	mov	r0, r5
   12de0:	pop	{r3, r4, r5, pc}
   12de4:	push	{r4, lr}
   12de8:	mov	r4, r0
   12dec:	bl	117e0 <strlen@plt>
   12df0:	cmp	r0, #48	; 0x30
   12df4:	bhi	12e50 <__assert_fail@plt+0x14cc>
   12df8:	mov	r1, r4
   12dfc:	add	r2, r0, #1
   12e00:	mov	r3, #50	; 0x32
   12e04:	movw	r0, #37956	; 0x9444
   12e08:	movt	r0, #2
   12e0c:	bl	11708 <__memcpy_chk@plt>
   12e10:	mov	r0, #1
   12e14:	bl	170b8 <__assert_fail@plt+0x5734>
   12e18:	mov	r0, #0
   12e1c:	bl	1703c <__assert_fail@plt+0x56b8>
   12e20:	bl	1771c <__assert_fail@plt+0x5d98>
   12e24:	movw	r0, #30092	; 0x758c
   12e28:	movt	r0, #1
   12e2c:	bl	177fc <__assert_fail@plt+0x5e78>
   12e30:	movw	r0, #29432	; 0x72f8
   12e34:	movw	r1, #29956	; 0x7504
   12e38:	movw	r2, #29784	; 0x7458
   12e3c:	movt	r0, #1
   12e40:	movt	r1, #1
   12e44:	movt	r2, #1
   12e48:	pop	{r4, lr}
   12e4c:	b	14f34 <__assert_fail@plt+0x35b0>
   12e50:	bl	11960 <abort@plt>
   12e54:	push	{r4, r5, r6, lr}
   12e58:	mov	r4, r0
   12e5c:	movw	r0, #31692	; 0x7bcc
   12e60:	movt	r0, #1
   12e64:	mov	r6, r1
   12e68:	bl	11744 <getenv@plt>
   12e6c:	cmp	r0, #0
   12e70:	beq	12e80 <__assert_fail@plt+0x14fc>
   12e74:	ldrb	r3, [r0]
   12e78:	cmp	r3, #0
   12e7c:	bne	12ed0 <__assert_fail@plt+0x154c>
   12e80:	cmp	r4, #0
   12e84:	subne	r6, r6, #4
   12e88:	bne	12ea4 <__assert_fail@plt+0x1520>
   12e8c:	b	12ed8 <__assert_fail@plt+0x1554>
   12e90:	bl	11954 <strncmp@plt>
   12e94:	cmp	r0, #0
   12e98:	beq	12ed0 <__assert_fail@plt+0x154c>
   12e9c:	subs	r4, r4, #1
   12ea0:	beq	12ed8 <__assert_fail@plt+0x1554>
   12ea4:	ldr	r5, [r6, #4]!
   12ea8:	movw	r1, #31700	; 0x7bd4
   12eac:	movt	r1, #1
   12eb0:	mov	r0, r5
   12eb4:	bl	11594 <strcmp@plt>
   12eb8:	movw	r1, #31712	; 0x7be0
   12ebc:	mov	r2, #10
   12ec0:	movt	r1, #1
   12ec4:	cmp	r0, #0
   12ec8:	mov	r0, r5
   12ecc:	bne	12e90 <__assert_fail@plt+0x150c>
   12ed0:	mov	r0, #1
   12ed4:	pop	{r4, r5, r6, pc}
   12ed8:	mov	r0, r4
   12edc:	pop	{r4, r5, r6, pc}
   12ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee4:	movw	r9, #37920	; 0x9420
   12ee8:	movt	r9, #2
   12eec:	sub	sp, sp, #36	; 0x24
   12ef0:	subs	r5, r0, #0
   12ef4:	mov	r6, r2
   12ef8:	ldr	r3, [r9]
   12efc:	str	r1, [sp, #4]
   12f00:	str	r3, [sp, #28]
   12f04:	beq	12fec <__assert_fail@plt+0x1668>
   12f08:	mov	r1, #44	; 0x2c
   12f0c:	bl	117f8 <strchr@plt>
   12f10:	subs	sl, r0, #0
   12f14:	addne	sl, sl, #1
   12f18:	cmp	r6, #0
   12f1c:	beq	12f84 <__assert_fail@plt+0x1600>
   12f20:	movw	r3, #30828	; 0x786c
   12f24:	movt	r3, #1
   12f28:	add	lr, sp, #12
   12f2c:	add	fp, sp, #8
   12f30:	ldm	r3, {r0, r1, r2, r3}
   12f34:	add	r7, sp, #24
   12f38:	mov	r8, #1
   12f3c:	mov	r4, #0
   12f40:	str	r4, [r6]
   12f44:	stm	lr, {r0, r1, r2, r3}
   12f48:	ldr	r4, [fp, #4]!
   12f4c:	mov	r0, r4
   12f50:	bl	117e0 <strlen@plt>
   12f54:	mov	r1, r4
   12f58:	mov	r2, r0
   12f5c:	mov	r0, r5
   12f60:	bl	11810 <strncasecmp@plt>
   12f64:	cmp	r0, #0
   12f68:	bne	12f7c <__assert_fail@plt+0x15f8>
   12f6c:	str	r8, [r6]
   12f70:	mov	r0, r4
   12f74:	bl	117e0 <strlen@plt>
   12f78:	add	r5, r5, r0
   12f7c:	cmp	fp, r7
   12f80:	bne	12f48 <__assert_fail@plt+0x15c4>
   12f84:	ldr	r6, [pc, #108]	; 12ff8 <__assert_fail@plt+0x1674>
   12f88:	mov	r4, #0
   12f8c:	mov	r7, #1
   12f90:	mov	r8, r6
   12f94:	ldr	fp, [r6, r4]
   12f98:	mov	r0, fp
   12f9c:	bl	117e0 <strlen@plt>
   12fa0:	mov	r1, fp
   12fa4:	mov	r2, r0
   12fa8:	mov	r0, r5
   12fac:	bl	11810 <strncasecmp@plt>
   12fb0:	cmp	r0, #0
   12fb4:	addeq	r3, r8, r4
   12fb8:	add	r4, r4, #8
   12fbc:	ldreq	r7, [r3, #4]
   12fc0:	cmp	r4, #80	; 0x50
   12fc4:	bne	12f94 <__assert_fail@plt+0x1610>
   12fc8:	ldr	r3, [sp, #4]
   12fcc:	mov	r0, sl
   12fd0:	str	r7, [r3]
   12fd4:	ldr	r2, [sp, #28]
   12fd8:	ldr	r3, [r9]
   12fdc:	cmp	r2, r3
   12fe0:	bne	12ff4 <__assert_fail@plt+0x1670>
   12fe4:	add	sp, sp, #36	; 0x24
   12fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fec:	mov	r0, r5
   12ff0:	b	12fd4 <__assert_fail@plt+0x1650>
   12ff4:	bl	11690 <__stack_chk_fail@plt>
   12ff8:	andeq	r7, r1, ip, ror r8
   12ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13000:	movw	r9, #37920	; 0x9420
   13004:	movt	r9, #2
   13008:	sub	sp, sp, #212	; 0xd4
   1300c:	mov	r3, #0
   13010:	mov	r6, #1
   13014:	ldr	ip, [r9]
   13018:	mov	fp, #84	; 0x54
   1301c:	mov	sl, #78	; 0x4e
   13020:	mov	r7, #67	; 0x43
   13024:	mov	lr, #77	; 0x4d
   13028:	str	r6, [sp, #32]
   1302c:	str	ip, [sp, #204]	; 0xcc
   13030:	mov	r5, r0
   13034:	mov	ip, #103	; 0x67
   13038:	str	r6, [sp, #48]	; 0x30
   1303c:	str	r6, [sp, #64]	; 0x40
   13040:	mov	r4, r1
   13044:	str	r6, [sp, #80]	; 0x50
   13048:	movw	r0, #31724	; 0x7bec
   1304c:	str	r6, [sp, #96]	; 0x60
   13050:	movt	r0, #1
   13054:	str	r6, [sp, #128]	; 0x80
   13058:	movw	r2, #31224	; 0x79f8
   1305c:	str	r0, [sp, #12]
   13060:	movt	r2, #1
   13064:	str	fp, [sp, #56]	; 0x38
   13068:	movw	r1, #31232	; 0x7a00
   1306c:	str	r2, [sp, #28]
   13070:	movt	r1, #1
   13074:	str	sl, [sp, #72]	; 0x48
   13078:	movw	r2, #31240	; 0x7a08
   1307c:	str	r1, [sp, #44]	; 0x2c
   13080:	movt	r2, #1
   13084:	str	r7, [sp, #88]	; 0x58
   13088:	movw	r1, #31248	; 0x7a10
   1308c:	str	r2, [sp, #60]	; 0x3c
   13090:	movt	r1, #1
   13094:	str	lr, [sp, #104]	; 0x68
   13098:	movw	r2, #31260	; 0x7a1c
   1309c:	str	r1, [sp, #76]	; 0x4c
   130a0:	movt	r2, #1
   130a4:	movw	r1, #31732	; 0x7bf4
   130a8:	str	r2, [sp, #92]	; 0x5c
   130ac:	movt	r1, #1
   130b0:	movw	r2, #31272	; 0x7a28
   130b4:	str	r1, [sp, #108]	; 0x6c
   130b8:	movt	r2, #1
   130bc:	mov	r1, #100	; 0x64
   130c0:	str	r2, [sp, #124]	; 0x7c
   130c4:	str	r1, [sp, #24]
   130c8:	mov	r2, #68	; 0x44
   130cc:	str	r3, [sp, #8]
   130d0:	movw	r7, #37928	; 0x9428
   130d4:	str	r2, [sp, #40]	; 0x28
   130d8:	movt	r7, #2
   130dc:	str	r3, [sp, #16]
   130e0:	mov	r8, r3
   130e4:	str	r3, [sp, #20]
   130e8:	movw	r0, #31748	; 0x7c04
   130ec:	str	r3, [sp, #36]	; 0x24
   130f0:	movt	r0, #1
   130f4:	str	r3, [sp, #52]	; 0x34
   130f8:	movw	r1, #31756	; 0x7c0c
   130fc:	str	r3, [sp, #68]	; 0x44
   13100:	movt	r1, #1
   13104:	str	r3, [sp, #84]	; 0x54
   13108:	movw	r2, #31340	; 0x7a6c
   1310c:	str	r3, [sp, #100]	; 0x64
   13110:	movt	r2, #1
   13114:	str	r3, [sp, #112]	; 0x70
   13118:	mov	fp, #87	; 0x57
   1311c:	str	r3, [sp, #116]	; 0x74
   13120:	mov	sl, #99	; 0x63
   13124:	str	ip, [sp, #120]	; 0x78
   13128:	mov	lr, #104	; 0x68
   1312c:	str	r6, [sp, #144]	; 0x90
   13130:	add	ip, sp, #8
   13134:	str	r6, [sp, #184]	; 0xb8
   13138:	movw	r6, #37948	; 0x943c
   1313c:	movt	r6, #2
   13140:	str	r3, [sp, #132]	; 0x84
   13144:	str	r3, [sp, #148]	; 0x94
   13148:	str	r3, [sp, #160]	; 0xa0
   1314c:	str	r3, [sp, #164]	; 0xa4
   13150:	str	r3, [sp, #176]	; 0xb0
   13154:	str	r3, [sp, #188]	; 0xbc
   13158:	str	r3, [sp, #192]	; 0xc0
   1315c:	str	r3, [sp, #196]	; 0xc4
   13160:	str	r3, [sp, #200]	; 0xc8
   13164:	str	r0, [sp, #140]	; 0x8c
   13168:	str	r1, [sp, #156]	; 0x9c
   1316c:	str	r2, [sp, #172]	; 0xac
   13170:	str	fp, [sp, #136]	; 0x88
   13174:	str	sl, [sp, #152]	; 0x98
   13178:	str	lr, [sp, #168]	; 0xa8
   1317c:	str	ip, [sp, #180]	; 0xb4
   13180:	mov	r3, #0
   13184:	movw	r2, #31796	; 0x7c34
   13188:	str	r3, [sp]
   1318c:	movt	r2, #1
   13190:	mov	r0, r5
   13194:	mov	r1, r4
   13198:	add	r3, sp, #12
   1319c:	bl	117b0 <getopt_long@plt>
   131a0:	cmn	r0, #1
   131a4:	beq	134dc <__assert_fail@plt+0x1b58>
   131a8:	cmp	r0, #104	; 0x68
   131ac:	ldrls	pc, [pc, r0, lsl #2]
   131b0:	b	134bc <__assert_fail@plt+0x1b38>
   131b4:	andeq	r3, r1, r0, lsl #3
   131b8:			; <UNDEFINED> instruction: 0x000134bc
   131bc:			; <UNDEFINED> instruction: 0x000134bc
   131c0:			; <UNDEFINED> instruction: 0x000134bc
   131c4:			; <UNDEFINED> instruction: 0x000134bc
   131c8:			; <UNDEFINED> instruction: 0x000134bc
   131cc:			; <UNDEFINED> instruction: 0x000134bc
   131d0:			; <UNDEFINED> instruction: 0x000134bc
   131d4:			; <UNDEFINED> instruction: 0x000134bc
   131d8:			; <UNDEFINED> instruction: 0x000134bc
   131dc:			; <UNDEFINED> instruction: 0x000134bc
   131e0:			; <UNDEFINED> instruction: 0x000134bc
   131e4:			; <UNDEFINED> instruction: 0x000134bc
   131e8:			; <UNDEFINED> instruction: 0x000134bc
   131ec:			; <UNDEFINED> instruction: 0x000134bc
   131f0:			; <UNDEFINED> instruction: 0x000134bc
   131f4:			; <UNDEFINED> instruction: 0x000134bc
   131f8:			; <UNDEFINED> instruction: 0x000134bc
   131fc:			; <UNDEFINED> instruction: 0x000134bc
   13200:			; <UNDEFINED> instruction: 0x000134bc
   13204:			; <UNDEFINED> instruction: 0x000134bc
   13208:			; <UNDEFINED> instruction: 0x000134bc
   1320c:			; <UNDEFINED> instruction: 0x000134bc
   13210:			; <UNDEFINED> instruction: 0x000134bc
   13214:			; <UNDEFINED> instruction: 0x000134bc
   13218:			; <UNDEFINED> instruction: 0x000134bc
   1321c:			; <UNDEFINED> instruction: 0x000134bc
   13220:			; <UNDEFINED> instruction: 0x000134bc
   13224:			; <UNDEFINED> instruction: 0x000134bc
   13228:			; <UNDEFINED> instruction: 0x000134bc
   1322c:			; <UNDEFINED> instruction: 0x000134bc
   13230:			; <UNDEFINED> instruction: 0x000134bc
   13234:			; <UNDEFINED> instruction: 0x000134bc
   13238:			; <UNDEFINED> instruction: 0x000134bc
   1323c:			; <UNDEFINED> instruction: 0x000134bc
   13240:			; <UNDEFINED> instruction: 0x000134bc
   13244:			; <UNDEFINED> instruction: 0x000134bc
   13248:			; <UNDEFINED> instruction: 0x000134bc
   1324c:			; <UNDEFINED> instruction: 0x000134bc
   13250:			; <UNDEFINED> instruction: 0x000134bc
   13254:			; <UNDEFINED> instruction: 0x000134bc
   13258:			; <UNDEFINED> instruction: 0x000134bc
   1325c:			; <UNDEFINED> instruction: 0x000134bc
   13260:			; <UNDEFINED> instruction: 0x000134bc
   13264:			; <UNDEFINED> instruction: 0x000134bc
   13268:			; <UNDEFINED> instruction: 0x000134bc
   1326c:			; <UNDEFINED> instruction: 0x000134bc
   13270:			; <UNDEFINED> instruction: 0x000134bc
   13274:			; <UNDEFINED> instruction: 0x000134bc
   13278:			; <UNDEFINED> instruction: 0x000134bc
   1327c:			; <UNDEFINED> instruction: 0x000134bc
   13280:			; <UNDEFINED> instruction: 0x000134bc
   13284:			; <UNDEFINED> instruction: 0x000134bc
   13288:			; <UNDEFINED> instruction: 0x000134bc
   1328c:			; <UNDEFINED> instruction: 0x000134bc
   13290:			; <UNDEFINED> instruction: 0x000134bc
   13294:			; <UNDEFINED> instruction: 0x000134bc
   13298:			; <UNDEFINED> instruction: 0x000134bc
   1329c:			; <UNDEFINED> instruction: 0x000134bc
   132a0:			; <UNDEFINED> instruction: 0x000134bc
   132a4:			; <UNDEFINED> instruction: 0x000134bc
   132a8:			; <UNDEFINED> instruction: 0x000134bc
   132ac:			; <UNDEFINED> instruction: 0x000134bc
   132b0:	andeq	r3, r1, r0, lsl #3
   132b4:			; <UNDEFINED> instruction: 0x000134bc
   132b8:			; <UNDEFINED> instruction: 0x000134bc
   132bc:			; <UNDEFINED> instruction: 0x000134bc
   132c0:	muleq	r1, ip, r4
   132c4:	andeq	r3, r1, ip, ror r4
   132c8:			; <UNDEFINED> instruction: 0x000134bc
   132cc:			; <UNDEFINED> instruction: 0x000134bc
   132d0:			; <UNDEFINED> instruction: 0x000134bc
   132d4:			; <UNDEFINED> instruction: 0x000134bc
   132d8:			; <UNDEFINED> instruction: 0x000134bc
   132dc:			; <UNDEFINED> instruction: 0x000134bc
   132e0:			; <UNDEFINED> instruction: 0x000134bc
   132e4:			; <UNDEFINED> instruction: 0x000134bc
   132e8:	andeq	r3, r1, ip, asr r4
   132ec:	andeq	r3, r1, ip, lsr r4
   132f0:			; <UNDEFINED> instruction: 0x000134bc
   132f4:			; <UNDEFINED> instruction: 0x000134bc
   132f8:			; <UNDEFINED> instruction: 0x000134bc
   132fc:			; <UNDEFINED> instruction: 0x000134bc
   13300:			; <UNDEFINED> instruction: 0x000134bc
   13304:	andeq	r3, r1, r0, ror #7
   13308:			; <UNDEFINED> instruction: 0x000134bc
   1330c:			; <UNDEFINED> instruction: 0x000134bc
   13310:	andeq	r3, r1, r0, asr #7
   13314:			; <UNDEFINED> instruction: 0x000134bc
   13318:			; <UNDEFINED> instruction: 0x000134bc
   1331c:			; <UNDEFINED> instruction: 0x000134bc
   13320:			; <UNDEFINED> instruction: 0x000134bc
   13324:			; <UNDEFINED> instruction: 0x000134bc
   13328:			; <UNDEFINED> instruction: 0x000134bc
   1332c:			; <UNDEFINED> instruction: 0x000134bc
   13330:			; <UNDEFINED> instruction: 0x000134bc
   13334:			; <UNDEFINED> instruction: 0x000134bc
   13338:			; <UNDEFINED> instruction: 0x000134bc
   1333c:			; <UNDEFINED> instruction: 0x000134bc
   13340:	andeq	r3, r1, r8, lsl #7
   13344:	andeq	r3, r1, r4, ror r3
   13348:			; <UNDEFINED> instruction: 0x000134bc
   1334c:			; <UNDEFINED> instruction: 0x000134bc
   13350:	andeq	r3, r1, r0, ror #6
   13354:	andeq	r3, r1, r8, asr r3
   13358:	mov	r8, #1
   1335c:	b	13180 <__assert_fail@plt+0x17fc>
   13360:	movw	r3, #37252	; 0x9184
   13364:	movt	r3, #2
   13368:	mov	r2, #0
   1336c:	str	r2, [r3, #60]	; 0x3c
   13370:	b	13180 <__assert_fail@plt+0x17fc>
   13374:	movw	r3, #37252	; 0x9184
   13378:	movt	r3, #2
   1337c:	mov	r2, #1
   13380:	str	r2, [r3, #56]	; 0x38
   13384:	b	13180 <__assert_fail@plt+0x17fc>
   13388:	ldr	r1, [pc, #436]	; 13544 <__assert_fail@plt+0x1bc0>
   1338c:	ldr	r0, [r6]
   13390:	add	r2, r1, #4
   13394:	bl	12ee0 <__assert_fail@plt+0x155c>
   13398:	ldr	r1, [pc, #424]	; 13548 <__assert_fail@plt+0x1bc4>
   1339c:	mov	r2, #0
   133a0:	str	r0, [r6]
   133a4:	bl	12ee0 <__assert_fail@plt+0x155c>
   133a8:	ldr	r1, [pc, #412]	; 1354c <__assert_fail@plt+0x1bc8>
   133ac:	add	r2, r1, #4
   133b0:	str	r0, [r6]
   133b4:	bl	12ee0 <__assert_fail@plt+0x155c>
   133b8:	str	r0, [r6]
   133bc:	b	13180 <__assert_fail@plt+0x17fc>
   133c0:	ldr	r0, [r6]
   133c4:	mov	r1, #0
   133c8:	mov	r2, #10
   133cc:	bl	115a0 <strtol@plt>
   133d0:	movw	r3, #37252	; 0x9184
   133d4:	movt	r3, #2
   133d8:	str	r0, [r3, #64]	; 0x40
   133dc:	b	13180 <__assert_fail@plt+0x17fc>
   133e0:	ldr	r0, [r6]
   133e4:	bl	11834 <__strdup@plt>
   133e8:	movw	r3, #37252	; 0x9184
   133ec:	movt	r3, #2
   133f0:	cmp	r0, #0
   133f4:	str	r0, [r3, #40]	; 0x28
   133f8:	bne	13180 <__assert_fail@plt+0x17fc>
   133fc:	movw	r3, #37928	; 0x9428
   13400:	movt	r3, #2
   13404:	ldr	r4, [r3]
   13408:	bl	11804 <__errno_location@plt>
   1340c:	ldr	r0, [r0]
   13410:	bl	11780 <strerror@plt>
   13414:	movw	r2, #31460	; 0x7ae4
   13418:	movw	r3, #37956	; 0x9444
   1341c:	movt	r2, #1
   13420:	movt	r3, #2
   13424:	mov	r1, #1
   13428:	str	r0, [sp]
   1342c:	mov	r0, r4
   13430:	bl	1187c <__fprintf_chk@plt>
   13434:	mov	r0, #1
   13438:	bl	117c8 <exit@plt>
   1343c:	ldr	r0, [r6]
   13440:	bl	11834 <__strdup@plt>
   13444:	movw	r3, #37252	; 0x9184
   13448:	movt	r3, #2
   1344c:	cmp	r0, #0
   13450:	str	r0, [r3, #44]	; 0x2c
   13454:	bne	13180 <__assert_fail@plt+0x17fc>
   13458:	b	133fc <__assert_fail@plt+0x1a78>
   1345c:	ldr	r0, [r6]
   13460:	bl	11834 <__strdup@plt>
   13464:	movw	r3, #37252	; 0x9184
   13468:	movt	r3, #2
   1346c:	cmp	r0, #0
   13470:	str	r0, [r3, #52]	; 0x34
   13474:	bne	13180 <__assert_fail@plt+0x17fc>
   13478:	b	133fc <__assert_fail@plt+0x1a78>
   1347c:	ldr	r0, [r6]
   13480:	bl	11834 <__strdup@plt>
   13484:	movw	r3, #37252	; 0x9184
   13488:	movt	r3, #2
   1348c:	cmp	r0, #0
   13490:	str	r0, [r3, #36]	; 0x24
   13494:	bne	13180 <__assert_fail@plt+0x17fc>
   13498:	b	133fc <__assert_fail@plt+0x1a78>
   1349c:	ldr	r0, [r6]
   134a0:	bl	11834 <__strdup@plt>
   134a4:	movw	r3, #37252	; 0x9184
   134a8:	movt	r3, #2
   134ac:	cmp	r0, #0
   134b0:	str	r0, [r3, #48]	; 0x30
   134b4:	bne	13180 <__assert_fail@plt+0x17fc>
   134b8:	b	133fc <__assert_fail@plt+0x1a78>
   134bc:	movw	r2, #31764	; 0x7c14
   134c0:	movw	r3, #37956	; 0x9444
   134c4:	movt	r2, #1
   134c8:	movt	r3, #2
   134cc:	ldr	r0, [r7]
   134d0:	mov	r1, #1
   134d4:	bl	1187c <__fprintf_chk@plt>
   134d8:	b	13180 <__assert_fail@plt+0x17fc>
   134dc:	ldr	r4, [sp, #8]
   134e0:	cmp	r4, #0
   134e4:	bne	1350c <__assert_fail@plt+0x1b88>
   134e8:	cmp	r8, #0
   134ec:	moveq	r0, r8
   134f0:	bne	13518 <__assert_fail@plt+0x1b94>
   134f4:	ldr	r2, [sp, #204]	; 0xcc
   134f8:	ldr	r3, [r9]
   134fc:	cmp	r2, r3
   13500:	bne	13514 <__assert_fail@plt+0x1b90>
   13504:	add	sp, sp, #212	; 0xd4
   13508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1350c:	mov	r0, #1
   13510:	b	134f4 <__assert_fail@plt+0x1b70>
   13514:	bl	11690 <__stack_chk_fail@plt>
   13518:	movw	r1, #37944	; 0x9438
   1351c:	movt	r1, #2
   13520:	movw	r2, #31804	; 0x7c3c
   13524:	movw	r3, #37956	; 0x9444
   13528:	ldr	r0, [r1]
   1352c:	movt	r2, #1
   13530:	movt	r3, #2
   13534:	mov	r1, #1
   13538:	bl	1187c <__fprintf_chk@plt>
   1353c:	mov	r0, r4
   13540:	bl	117c8 <exit@plt>
   13544:	andeq	r9, r2, r8, ror #3
   13548:	strdeq	r9, [r2], -r0
   1354c:	strdeq	r9, [r2], -r4
   13550:	push	{r4, r5, r6, r7, lr}
   13554:	movw	r7, #37920	; 0x9420
   13558:	movt	r7, #2
   1355c:	sub	sp, sp, #28
   13560:	mov	r4, r1
   13564:	mov	r5, r0
   13568:	ldr	r3, [r7]
   1356c:	str	r3, [sp, #20]
   13570:	bl	115f4 <getuid@plt>
   13574:	mov	r6, r0
   13578:	bl	116e4 <geteuid@plt>
   1357c:	cmp	r6, r0
   13580:	bne	13720 <__assert_fail@plt+0x1d9c>
   13584:	add	r0, sp, #8
   13588:	add	r1, sp, #12
   1358c:	str	r5, [sp, #12]
   13590:	str	r4, [sp, #16]
   13594:	bl	16f04 <__assert_fail@plt+0x5580>
   13598:	subs	r5, r0, #0
   1359c:	bne	136fc <__assert_fail@plt+0x1d78>
   135a0:	movw	r2, #32412	; 0x7e9c
   135a4:	ldr	r6, [sp, #8]
   135a8:	ldr	r4, [pc, #372]	; 13724 <__assert_fail@plt+0x1da0>
   135ac:	movt	r2, #1
   135b0:	b	135c4 <__assert_fail@plt+0x1c40>
   135b4:	add	r4, r4, #12
   135b8:	ldr	r2, [r4, #-4]
   135bc:	cmp	r2, #0
   135c0:	beq	13634 <__assert_fail@plt+0x1cb0>
   135c4:	ldr	r1, [r4]
   135c8:	mov	r0, r6
   135cc:	ldr	r3, [r4, #4]
   135d0:	cmp	r1, #0
   135d4:	addeq	r1, r5, #256	; 0x100
   135d8:	addeq	r5, r5, #1
   135dc:	bl	1679c <__assert_fail@plt+0x4e18>
   135e0:	cmp	r0, #0
   135e4:	beq	135b4 <__assert_fail@plt+0x1c30>
   135e8:	movw	r3, #37928	; 0x9428
   135ec:	movt	r3, #2
   135f0:	ldr	r4, [r3]
   135f4:	bl	15218 <__assert_fail@plt+0x3894>
   135f8:	movw	r2, #32532	; 0x7f14
   135fc:	movt	r2, #1
   13600:	movw	r3, #37956	; 0x9444
   13604:	str	r0, [sp]
   13608:	movt	r3, #2
   1360c:	mov	r1, #1
   13610:	mov	r0, r4
   13614:	bl	1187c <__fprintf_chk@plt>
   13618:	mvn	r0, #0
   1361c:	ldr	r2, [sp, #20]
   13620:	ldr	r3, [r7]
   13624:	cmp	r2, r3
   13628:	bne	1371c <__assert_fail@plt+0x1d98>
   1362c:	add	sp, sp, #28
   13630:	pop	{r4, r5, r6, r7, pc}
   13634:	movw	r1, #8356	; 0x20a4
   13638:	ldr	r0, [sp, #8]
   1363c:	movt	r1, #1
   13640:	movw	r5, #37928	; 0x9428
   13644:	bl	1696c <__assert_fail@plt+0x4fe8>
   13648:	movt	r5, #2
   1364c:	ldr	r0, [sp, #8]
   13650:	bl	16d3c <__assert_fail@plt+0x53b8>
   13654:	cmn	r0, #1
   13658:	beq	136ac <__assert_fail@plt+0x1d28>
   1365c:	cmp	r0, #0
   13660:	bne	136bc <__assert_fail@plt+0x1d38>
   13664:	ldr	r0, [sp, #8]
   13668:	bl	16a0c <__assert_fail@plt+0x5088>
   1366c:	cmp	r0, #0
   13670:	beq	1364c <__assert_fail@plt+0x1cc8>
   13674:	ldr	r4, [r5]
   13678:	bl	15218 <__assert_fail@plt+0x3894>
   1367c:	mov	r1, #1
   13680:	movw	r2, #32496	; 0x7ef0
   13684:	movw	r3, #37956	; 0x9444
   13688:	movt	r2, #1
   1368c:	movt	r3, #2
   13690:	str	r0, [sp]
   13694:	mov	r0, r4
   13698:	bl	1187c <__fprintf_chk@plt>
   1369c:	ldr	r0, [sp, #8]
   136a0:	bl	16d3c <__assert_fail@plt+0x53b8>
   136a4:	cmn	r0, #1
   136a8:	bne	1365c <__assert_fail@plt+0x1cd8>
   136ac:	ldr	r0, [sp, #8]
   136b0:	bl	16f68 <__assert_fail@plt+0x55e4>
   136b4:	mov	r0, #0
   136b8:	b	1361c <__assert_fail@plt+0x1c98>
   136bc:	movw	r3, #37928	; 0x9428
   136c0:	movt	r3, #2
   136c4:	ldr	r4, [r3]
   136c8:	bl	15218 <__assert_fail@plt+0x3894>
   136cc:	mov	r1, #1
   136d0:	movw	r2, #32464	; 0x7ed0
   136d4:	movw	r3, #37956	; 0x9444
   136d8:	movt	r2, #1
   136dc:	movt	r3, #2
   136e0:	str	r0, [sp]
   136e4:	mov	r0, r4
   136e8:	bl	1187c <__fprintf_chk@plt>
   136ec:	ldr	r0, [sp, #8]
   136f0:	bl	16f68 <__assert_fail@plt+0x55e4>
   136f4:	mov	r0, #0
   136f8:	b	1361c <__assert_fail@plt+0x1c98>
   136fc:	movw	r3, #37928	; 0x9428
   13700:	movt	r3, #2
   13704:	ldr	r4, [r3]
   13708:	bl	15218 <__assert_fail@plt+0x3894>
   1370c:	movw	r2, #32420	; 0x7ea4
   13710:	movw	r3, #37956	; 0x9444
   13714:	movt	r2, #1
   13718:	b	13604 <__assert_fail@plt+0x1c80>
   1371c:	bl	11690 <__stack_chk_fail@plt>
   13720:	bl	11960 <abort@plt>
   13724:	ldrdeq	r7, [r1], -r0
   13728:	mov	r0, #0
   1372c:	mov	r1, #1
   13730:	b	13550 <__assert_fail@plt+0x1bcc>
   13734:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13738:	mov	r9, r2
   1373c:	ldr	r3, [r2]
   13740:	mov	r8, r1
   13744:	ldr	r2, [r1]
   13748:	add	r4, r2, r3, lsl #2
   1374c:	str	r4, [r1]
   13750:	ldr	r3, [r2, r3, lsl #2]
   13754:	cmp	r3, #32
   13758:	bne	13778 <__assert_fail@plt+0x1df4>
   1375c:	add	r3, r4, #4
   13760:	mov	r4, r3
   13764:	add	r3, r3, #4
   13768:	ldr	r2, [r4]
   1376c:	cmp	r2, #32
   13770:	beq	13760 <__assert_fail@plt+0x1ddc>
   13774:	str	r4, [r8]
   13778:	sub	r7, r0, #1
   1377c:	cmp	r7, #0
   13780:	ble	13820 <__assert_fail@plt+0x1e9c>
   13784:	ldr	r3, [r4]
   13788:	cmp	r3, #0
   1378c:	beq	13820 <__assert_fail@plt+0x1e9c>
   13790:	cmp	r3, #10
   13794:	beq	13820 <__assert_fail@plt+0x1e9c>
   13798:	mov	r5, #0
   1379c:	add	r4, r4, #4
   137a0:	mov	r6, r5
   137a4:	mov	fp, r5
   137a8:	b	137c0 <__assert_fail@plt+0x1e3c>
   137ac:	ldr	r3, [r4, #-4]
   137b0:	cmp	r3, #0
   137b4:	beq	13814 <__assert_fail@plt+0x1e90>
   137b8:	cmp	r3, #10
   137bc:	beq	13814 <__assert_fail@plt+0x1e90>
   137c0:	mov	sl, r4
   137c4:	ldr	r0, [r4], #4
   137c8:	add	r6, r6, #1
   137cc:	cmp	r0, #32
   137d0:	moveq	fp, r6
   137d4:	bl	115e8 <wcwidth@plt>
   137d8:	add	r5, r5, r0
   137dc:	cmp	r5, r7
   137e0:	blt	137ac <__assert_fail@plt+0x1e28>
   137e4:	ldr	r3, [sl]
   137e8:	cmp	r3, #10
   137ec:	cmpne	r3, #0
   137f0:	beq	13814 <__assert_fail@plt+0x1e90>
   137f4:	cmp	fp, #0
   137f8:	beq	13814 <__assert_fail@plt+0x1e90>
   137fc:	ldr	r3, [r8]
   13800:	mov	r2, #10
   13804:	add	r6, fp, #1
   13808:	str	r2, [r3, fp, lsl #2]
   1380c:	str	r6, [r9]
   13810:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13814:	add	r6, r6, #1
   13818:	str	r6, [r9]
   1381c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13820:	mov	r6, #1
   13824:	b	13818 <__assert_fail@plt+0x1e94>
   13828:	push	{r4, r5, r6, r7, r8, r9, lr}
   1382c:	movw	r5, #37920	; 0x9420
   13830:	movt	r5, #2
   13834:	sub	sp, sp, #20
   13838:	mov	r7, r0
   1383c:	mov	r9, r1
   13840:	ldr	r3, [r5]
   13844:	str	r3, [sp, #12]
   13848:	bl	12710 <__assert_fail@plt+0xd8c>
   1384c:	subs	r8, r0, #0
   13850:	beq	13940 <__assert_fail@plt+0x1fbc>
   13854:	mov	r0, #0
   13858:	mov	r4, #0
   1385c:	mov	r1, r0
   13860:	bl	118ac <setlocale@plt>
   13864:	bl	11834 <__strdup@plt>
   13868:	cmp	r7, r4
   1386c:	movw	r1, #34200	; 0x8598
   13870:	movt	r1, #1
   13874:	movne	r1, r7
   13878:	mov	r6, r0
   1387c:	mov	r0, r4
   13880:	bl	118ac <setlocale@plt>
   13884:	mov	r0, r9
   13888:	str	r8, [sp]
   1388c:	str	r4, [sp, #8]
   13890:	str	r4, [sp, #4]
   13894:	bl	117e0 <strlen@plt>
   13898:	add	r3, sp, #4
   1389c:	mov	r1, sp
   138a0:	mov	r2, r0
   138a4:	mov	r0, r4
   138a8:	bl	11588 <mbsrtowcs@plt>
   138ac:	cmn	r0, #1
   138b0:	mov	r7, r0
   138b4:	beq	13924 <__assert_fail@plt+0x1fa0>
   138b8:	add	r0, r0, #1
   138bc:	mov	r1, #4
   138c0:	bl	11558 <calloc@plt>
   138c4:	subs	r9, r0, #0
   138c8:	beq	13934 <__assert_fail@plt+0x1fb0>
   138cc:	mov	r1, sp
   138d0:	mov	r2, r7
   138d4:	add	r3, sp, #4
   138d8:	str	r8, [sp]
   138dc:	str	r4, [sp, #4]
   138e0:	str	r4, [sp, #8]
   138e4:	bl	11588 <mbsrtowcs@plt>
   138e8:	cmp	r6, #0
   138ec:	moveq	r0, r9
   138f0:	beq	1390c <__assert_fail@plt+0x1f88>
   138f4:	mov	r1, r6
   138f8:	mov	r0, #0
   138fc:	bl	118ac <setlocale@plt>
   13900:	mov	r0, r6
   13904:	bl	11624 <free@plt>
   13908:	mov	r0, r9
   1390c:	ldr	r2, [sp, #12]
   13910:	ldr	r3, [r5]
   13914:	cmp	r2, r3
   13918:	bne	13948 <__assert_fail@plt+0x1fc4>
   1391c:	add	sp, sp, #20
   13920:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13924:	mov	r0, r8
   13928:	mov	r9, r4
   1392c:	bl	11624 <free@plt>
   13930:	b	138e8 <__assert_fail@plt+0x1f64>
   13934:	mov	r0, r8
   13938:	bl	11624 <free@plt>
   1393c:	b	138e8 <__assert_fail@plt+0x1f64>
   13940:	mov	r0, r8
   13944:	b	1390c <__assert_fail@plt+0x1f88>
   13948:	bl	11690 <__stack_chk_fail@plt>
   1394c:	push	{r3, r4, r5, lr}
   13950:	movw	r4, #37388	; 0x920c
   13954:	movt	r4, #2
   13958:	mov	r5, r0
   1395c:	ldr	r3, [r4]
   13960:	cmp	r3, #0
   13964:	blt	13994 <__assert_fail@plt+0x2010>
   13968:	movw	r4, #38008	; 0x9478
   1396c:	movt	r4, #2
   13970:	ldr	r2, [r4]
   13974:	cmp	r0, r2
   13978:	popeq	{r3, r4, r5, pc}
   1397c:	cmp	r0, #0
   13980:	movne	r0, r3
   13984:	moveq	r0, #0
   13988:	bl	11948 <curs_set@plt>
   1398c:	str	r5, [r4]
   13990:	pop	{r3, r4, r5, pc}
   13994:	cmp	r0, #0
   13998:	beq	139b8 <__assert_fail@plt+0x2034>
   1399c:	movw	r4, #38008	; 0x9478
   139a0:	movt	r4, #2
   139a4:	ldr	r2, [r4]
   139a8:	cmp	r0, r2
   139ac:	popeq	{r3, r4, r5, pc}
   139b0:	mov	r0, r3
   139b4:	b	13988 <__assert_fail@plt+0x2004>
   139b8:	bl	11948 <curs_set@plt>
   139bc:	movw	r3, #38008	; 0x9478
   139c0:	movt	r3, #2
   139c4:	str	r5, [r3]
   139c8:	str	r0, [r4]
   139cc:	pop	{r3, r4, r5, pc}
   139d0:	ldr	r3, [r0]
   139d4:	push	{r4, r5, r6, lr}
   139d8:	cmp	r3, r1
   139dc:	mov	r4, r0
   139e0:	mov	r6, r1
   139e4:	beq	13ab0 <__assert_fail@plt+0x212c>
   139e8:	cmp	r3, #3
   139ec:	beq	13af0 <__assert_fail@plt+0x216c>
   139f0:	cmp	r3, #4
   139f4:	beq	13ab8 <__assert_fail@plt+0x2134>
   139f8:	cmp	r3, #2
   139fc:	movw	r5, #37940	; 0x9434
   13a00:	movt	r5, #2
   13a04:	bne	13a28 <__assert_fail@plt+0x20a4>
   13a08:	ldr	r1, [r0, #32]
   13a0c:	ldr	r2, [r4, #36]	; 0x24
   13a10:	ldr	r0, [r5]
   13a14:	bl	11930 <wmove@plt>
   13a18:	ldr	r0, [r5]
   13a1c:	ldr	r1, [r4, #40]	; 0x28
   13a20:	mvn	r2, #0
   13a24:	bl	11648 <waddnstr@plt>
   13a28:	str	r6, [r4]
   13a2c:	cmp	r6, #4
   13a30:	ldrls	pc, [pc, r6, lsl #2]
   13a34:	b	13aa8 <__assert_fail@plt+0x2124>
   13a38:	andeq	r3, r1, r0, lsl ip
   13a3c:	andeq	r3, r1, r4, ror #23
   13a40:	andeq	r3, r1, r8, lsl #23
   13a44:	andeq	r3, r1, ip, asr #20
   13a48:	andeq	r3, r1, r8, lsr #22
   13a4c:	ldr	r3, [r4, #64]	; 0x40
   13a50:	cmp	r3, #0
   13a54:	beq	13aa8 <__assert_fail@plt+0x2124>
   13a58:	mov	r0, #0
   13a5c:	bl	1394c <__assert_fail@plt+0x1fc8>
   13a60:	ldr	r1, [r4, #56]	; 0x38
   13a64:	ldr	r2, [r4, #60]	; 0x3c
   13a68:	ldr	r0, [r5]
   13a6c:	bl	11930 <wmove@plt>
   13a70:	ldr	r0, [r5]
   13a74:	ldr	r1, [r4, #64]	; 0x40
   13a78:	mvn	r2, #0
   13a7c:	cmp	r0, #0
   13a80:	movne	r3, #65536	; 0x10000
   13a84:	strne	r3, [r0, #16]
   13a88:	bl	11648 <waddnstr@plt>
   13a8c:	ldr	r0, [r5]
   13a90:	ldr	r1, [r4, #56]	; 0x38
   13a94:	cmp	r0, #0
   13a98:	ldr	r2, [r4, #60]	; 0x3c
   13a9c:	movne	r3, #0
   13aa0:	strne	r3, [r0, #16]
   13aa4:	bl	11930 <wmove@plt>
   13aa8:	ldr	r0, [r5]
   13aac:	bl	116a8 <wrefresh@plt>
   13ab0:	mov	r0, #0
   13ab4:	pop	{r4, r5, r6, pc}
   13ab8:	ldr	r3, [r0, #52]	; 0x34
   13abc:	movw	r5, #37940	; 0x9434
   13ac0:	movt	r5, #2
   13ac4:	cmp	r3, #0
   13ac8:	beq	13a28 <__assert_fail@plt+0x20a4>
   13acc:	ldr	r1, [r0, #44]	; 0x2c
   13ad0:	ldr	r2, [r4, #48]	; 0x30
   13ad4:	ldr	r0, [r5]
   13ad8:	bl	11930 <wmove@plt>
   13adc:	ldr	r0, [r5]
   13ae0:	ldr	r1, [r4, #52]	; 0x34
   13ae4:	mvn	r2, #0
   13ae8:	bl	11648 <waddnstr@plt>
   13aec:	b	13a28 <__assert_fail@plt+0x20a4>
   13af0:	ldr	r3, [r0, #64]	; 0x40
   13af4:	movw	r5, #37940	; 0x9434
   13af8:	movt	r5, #2
   13afc:	cmp	r3, #0
   13b00:	beq	13a28 <__assert_fail@plt+0x20a4>
   13b04:	ldr	r1, [r0, #56]	; 0x38
   13b08:	ldr	r2, [r4, #60]	; 0x3c
   13b0c:	ldr	r0, [r5]
   13b10:	bl	11930 <wmove@plt>
   13b14:	ldr	r0, [r5]
   13b18:	ldr	r1, [r4, #64]	; 0x40
   13b1c:	mvn	r2, #0
   13b20:	bl	11648 <waddnstr@plt>
   13b24:	b	13a28 <__assert_fail@plt+0x20a4>
   13b28:	ldr	r3, [r4, #52]	; 0x34
   13b2c:	cmp	r3, #0
   13b30:	beq	13aa8 <__assert_fail@plt+0x2124>
   13b34:	mov	r0, #0
   13b38:	bl	1394c <__assert_fail@plt+0x1fc8>
   13b3c:	ldr	r1, [r4, #44]	; 0x2c
   13b40:	ldr	r2, [r4, #48]	; 0x30
   13b44:	ldr	r0, [r5]
   13b48:	bl	11930 <wmove@plt>
   13b4c:	ldr	r0, [r5]
   13b50:	ldr	r1, [r4, #52]	; 0x34
   13b54:	mvn	r2, #0
   13b58:	cmp	r0, #0
   13b5c:	movne	r3, #65536	; 0x10000
   13b60:	strne	r3, [r0, #16]
   13b64:	bl	11648 <waddnstr@plt>
   13b68:	ldr	r0, [r5]
   13b6c:	ldr	r1, [r4, #44]	; 0x2c
   13b70:	cmp	r0, #0
   13b74:	ldr	r2, [r4, #48]	; 0x30
   13b78:	movne	r3, #0
   13b7c:	strne	r3, [r0, #16]
   13b80:	bl	11930 <wmove@plt>
   13b84:	b	13aa8 <__assert_fail@plt+0x2124>
   13b88:	mov	r0, #0
   13b8c:	bl	1394c <__assert_fail@plt+0x1fc8>
   13b90:	ldr	r1, [r4, #32]
   13b94:	ldr	r2, [r4, #36]	; 0x24
   13b98:	ldr	r0, [r5]
   13b9c:	bl	11930 <wmove@plt>
   13ba0:	ldr	r0, [r5]
   13ba4:	ldr	r1, [r4, #40]	; 0x28
   13ba8:	mvn	r2, #0
   13bac:	cmp	r0, #0
   13bb0:	movne	r3, #65536	; 0x10000
   13bb4:	strne	r3, [r0, #16]
   13bb8:	bl	11648 <waddnstr@plt>
   13bbc:	ldr	r0, [r5]
   13bc0:	ldr	r1, [r4, #32]
   13bc4:	cmp	r0, #0
   13bc8:	ldr	r2, [r4, #36]	; 0x24
   13bcc:	movne	r3, #0
   13bd0:	strne	r3, [r0, #16]
   13bd4:	bl	11930 <wmove@plt>
   13bd8:	ldr	r0, [r5]
   13bdc:	bl	116a8 <wrefresh@plt>
   13be0:	b	13ab0 <__assert_fail@plt+0x212c>
   13be4:	ldr	r3, [r4, #16]
   13be8:	ldr	r2, [r4, #8]
   13bec:	ldr	r1, [r4, #4]
   13bf0:	add	r2, r2, r3
   13bf4:	ldr	r0, [r5]
   13bf8:	bl	11930 <wmove@plt>
   13bfc:	mov	r0, #1
   13c00:	bl	1394c <__assert_fail@plt+0x1fc8>
   13c04:	ldr	r0, [r5]
   13c08:	bl	116a8 <wrefresh@plt>
   13c0c:	b	13ab0 <__assert_fail@plt+0x212c>
   13c10:	mov	r0, #0
   13c14:	bl	1394c <__assert_fail@plt+0x1fc8>
   13c18:	ldr	r0, [r5]
   13c1c:	bl	116a8 <wrefresh@plt>
   13c20:	b	13ab0 <__assert_fail@plt+0x212c>
   13c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c28:	movw	r7, #37920	; 0x9420
   13c2c:	movt	r7, #2
   13c30:	ldr	r3, [r0, #48]	; 0x30
   13c34:	sub	sp, sp, #180	; 0xb4
   13c38:	mov	r5, r0
   13c3c:	ldr	r2, [r7]
   13c40:	cmp	r3, #0
   13c44:	ldr	r6, [r0, #40]	; 0x28
   13c48:	ldr	r4, [r0, #44]	; 0x2c
   13c4c:	str	r2, [sp, #172]	; 0xac
   13c50:	beq	148f8 <__assert_fail@plt+0x2f74>
   13c54:	mov	r0, #0
   13c58:	mov	r1, r0
   13c5c:	bl	118ac <setlocale@plt>
   13c60:	bl	11834 <__strdup@plt>
   13c64:	ldr	r1, [r5, #48]	; 0x30
   13c68:	str	r0, [sp, #24]
   13c6c:	mov	r0, #0
   13c70:	bl	118ac <setlocale@plt>
   13c74:	cmp	r6, #0
   13c78:	beq	1424c <__assert_fail@plt+0x28c8>
   13c7c:	movw	r1, #32960	; 0x80c0
   13c80:	mov	r0, r6
   13c84:	movt	r1, #1
   13c88:	bl	115b8 <fopen@plt>
   13c8c:	cmp	r0, #0
   13c90:	str	r0, [sp, #20]
   13c94:	beq	14234 <__assert_fail@plt+0x28b0>
   13c98:	mov	r0, r6
   13c9c:	movw	r1, #32884	; 0x8074
   13ca0:	movt	r1, #1
   13ca4:	bl	115b8 <fopen@plt>
   13ca8:	cmp	r0, #0
   13cac:	str	r0, [sp, #28]
   13cb0:	beq	14ef0 <__assert_fail@plt+0x356c>
   13cb4:	mov	r0, r4
   13cb8:	ldr	r1, [sp, #28]
   13cbc:	ldr	r2, [sp, #20]
   13cc0:	movw	r4, #37940	; 0x9434
   13cc4:	bl	1184c <newterm@plt>
   13cc8:	movt	r4, #2
   13ccc:	mov	r6, r0
   13cd0:	bl	1190c <set_term@plt>
   13cd4:	mov	r1, #1
   13cd8:	ldr	r0, [r4]
   13cdc:	bl	116b4 <keypad@plt>
   13ce0:	bl	11798 <nonl@plt>
   13ce4:	bl	11630 <cbreak@plt>
   13ce8:	bl	11924 <noecho@plt>
   13cec:	bl	1160c <has_colors@plt>
   13cf0:	cmp	r0, #0
   13cf4:	bne	142ec <__assert_fail@plt+0x2968>
   13cf8:	ldr	r0, [r4]
   13cfc:	bl	116a8 <wrefresh@plt>
   13d00:	ldr	r1, [r5, #4]
   13d04:	cmp	r1, #0
   13d08:	beq	142b8 <__assert_fail@plt+0x2934>
   13d0c:	ldr	r0, [r5, #48]	; 0x30
   13d10:	bl	13828 <__assert_fail@plt+0x1ea4>
   13d14:	cmp	r0, #0
   13d18:	str	r0, [sp, #12]
   13d1c:	beq	14910 <__assert_fail@plt+0x2f8c>
   13d20:	ldr	r1, [r5, #8]
   13d24:	cmp	r1, #0
   13d28:	beq	142c8 <__assert_fail@plt+0x2944>
   13d2c:	ldr	r0, [r5, #48]	; 0x30
   13d30:	bl	13828 <__assert_fail@plt+0x1ea4>
   13d34:	cmp	r0, #0
   13d38:	str	r0, [sp, #16]
   13d3c:	beq	14918 <__assert_fail@plt+0x2f94>
   13d40:	ldr	r1, [r5, #12]
   13d44:	cmp	r1, #0
   13d48:	beq	142d8 <__assert_fail@plt+0x2954>
   13d4c:	ldr	r0, [r5, #48]	; 0x30
   13d50:	bl	13828 <__assert_fail@plt+0x1ea4>
   13d54:	cmp	r0, #0
   13d58:	str	r0, [sp, #32]
   13d5c:	beq	13ea8 <__assert_fail@plt+0x2524>
   13d60:	ldr	r0, [r5, #16]
   13d64:	cmp	r0, #0
   13d68:	beq	14214 <__assert_fail@plt+0x2890>
   13d6c:	bl	117e0 <strlen@plt>
   13d70:	mov	r8, r0
   13d74:	add	r0, r0, #3
   13d78:	bl	1175c <malloc@plt>
   13d7c:	subs	r9, r0, #0
   13d80:	beq	13ea8 <__assert_fail@plt+0x2524>
   13d84:	mov	r2, r8
   13d88:	mov	r0, r9
   13d8c:	add	r8, r9, r8
   13d90:	mov	r3, #60	; 0x3c
   13d94:	strb	r3, [r0], #1
   13d98:	ldr	r1, [r5, #16]
   13d9c:	bl	1163c <memcpy@plt>
   13da0:	mov	r2, #62	; 0x3e
   13da4:	mov	r3, #0
   13da8:	strb	r2, [r8, #1]
   13dac:	strb	r3, [r8, #2]
   13db0:	mov	r1, r9
   13db4:	ldr	r0, [r5, #48]	; 0x30
   13db8:	bl	12710 <__assert_fail@plt+0xd8c>
   13dbc:	cmp	r0, #0
   13dc0:	str	r0, [sp, #120]	; 0x78
   13dc4:	beq	13ea8 <__assert_fail@plt+0x2524>
   13dc8:	ldr	r8, [r5, #88]	; 0x58
   13dcc:	cmp	r8, #0
   13dd0:	bne	143dc <__assert_fail@plt+0x2a58>
   13dd4:	ldr	r0, [r5, #24]
   13dd8:	cmp	r0, #0
   13ddc:	beq	148d4 <__assert_fail@plt+0x2f50>
   13de0:	bl	117e0 <strlen@plt>
   13de4:	mov	r9, r0
   13de8:	add	r0, r0, #3
   13dec:	bl	1175c <malloc@plt>
   13df0:	subs	sl, r0, #0
   13df4:	beq	13ea8 <__assert_fail@plt+0x2524>
   13df8:	mov	r0, sl
   13dfc:	mov	r2, r9
   13e00:	add	r9, sl, r9
   13e04:	mov	r3, #60	; 0x3c
   13e08:	strb	r3, [r0], #1
   13e0c:	ldr	r1, [r5, #24]
   13e10:	bl	1163c <memcpy@plt>
   13e14:	mov	r3, #62	; 0x3e
   13e18:	strb	r8, [r9, #2]
   13e1c:	mov	r1, sl
   13e20:	strb	r3, [r9, #1]
   13e24:	ldr	r0, [r5, #48]	; 0x30
   13e28:	bl	12710 <__assert_fail@plt+0xd8c>
   13e2c:	cmp	r0, #0
   13e30:	str	r0, [sp, #132]	; 0x84
   13e34:	beq	13ea8 <__assert_fail@plt+0x2524>
   13e38:	ldr	r8, [r5, #88]	; 0x58
   13e3c:	cmp	r8, #0
   13e40:	bne	143e4 <__assert_fail@plt+0x2a60>
   13e44:	ldr	r0, [r5, #20]
   13e48:	cmp	r0, #0
   13e4c:	beq	143e4 <__assert_fail@plt+0x2a60>
   13e50:	bl	117e0 <strlen@plt>
   13e54:	mov	r9, r0
   13e58:	add	r0, r0, #3
   13e5c:	bl	1175c <malloc@plt>
   13e60:	subs	sl, r0, #0
   13e64:	beq	13ea8 <__assert_fail@plt+0x2524>
   13e68:	mov	r2, r9
   13e6c:	mov	r0, sl
   13e70:	add	r9, sl, r9
   13e74:	mov	r3, #60	; 0x3c
   13e78:	strb	r3, [r0], #1
   13e7c:	ldr	r1, [r5, #20]
   13e80:	bl	1163c <memcpy@plt>
   13e84:	mov	r3, #62	; 0x3e
   13e88:	strb	r8, [r9, #2]
   13e8c:	mov	r1, sl
   13e90:	strb	r3, [r9, #1]
   13e94:	ldr	r0, [r5, #48]	; 0x30
   13e98:	bl	12710 <__assert_fail@plt+0xd8c>
   13e9c:	cmp	r0, #0
   13ea0:	str	r0, [sp, #144]	; 0x90
   13ea4:	bne	143ec <__assert_fail@plt+0x2a68>
   13ea8:	mov	r8, #1
   13eac:	ldr	r3, [sp, #12]
   13eb0:	cmp	r3, #0
   13eb4:	beq	13ec0 <__assert_fail@plt+0x253c>
   13eb8:	mov	r0, r3
   13ebc:	bl	11624 <free@plt>
   13ec0:	ldr	r3, [sp, #16]
   13ec4:	cmp	r3, #0
   13ec8:	beq	13ed4 <__assert_fail@plt+0x2550>
   13ecc:	mov	r0, r3
   13ed0:	bl	11624 <free@plt>
   13ed4:	ldr	r3, [sp, #32]
   13ed8:	cmp	r3, #0
   13edc:	beq	13ee8 <__assert_fail@plt+0x2564>
   13ee0:	mov	r0, r3
   13ee4:	bl	11624 <free@plt>
   13ee8:	cmp	r8, #0
   13eec:	bne	14910 <__assert_fail@plt+0x2f8c>
   13ef0:	ldr	r1, [sp, #100]	; 0x64
   13ef4:	add	r0, sp, #80	; 0x50
   13ef8:	movw	r8, #258	; 0x102
   13efc:	movw	r9, #263	; 0x107
   13f00:	cmp	r1, #0
   13f04:	moveq	r1, #2
   13f08:	movne	r1, #1
   13f0c:	bl	139d0 <__assert_fail@plt+0x204c>
   13f10:	ldr	r0, [r4]
   13f14:	bl	118c4 <wgetch@plt>
   13f18:	cmp	r0, r8
   13f1c:	beq	13fe0 <__assert_fail@plt+0x265c>
   13f20:	bgt	13fcc <__assert_fail@plt+0x2648>
   13f24:	cmp	r0, #9
   13f28:	beq	141a0 <__assert_fail@plt+0x281c>
   13f2c:	cmp	r0, #13
   13f30:	beq	14174 <__assert_fail@plt+0x27f0>
   13f34:	cmp	r0, #5
   13f38:	beq	1400c <__assert_fail@plt+0x2688>
   13f3c:	ldr	r3, [sp, #80]	; 0x50
   13f40:	cmp	r3, #1
   13f44:	bne	13f10 <__assert_fail@plt+0x258c>
   13f48:	ldr	r3, [sp, #100]	; 0x64
   13f4c:	ldr	fp, [sp, #96]	; 0x60
   13f50:	cmp	r3, #0
   13f54:	beq	14f14 <__assert_fail@plt+0x3590>
   13f58:	cmp	r0, r9
   13f5c:	bne	14864 <__assert_fail@plt+0x2ee0>
   13f60:	ldr	r2, [sp, #108]	; 0x6c
   13f64:	cmp	r2, #0
   13f68:	ble	148f0 <__assert_fail@plt+0x2f6c>
   13f6c:	sub	r3, fp, #1
   13f70:	sub	r2, r2, #1
   13f74:	cmp	r3, #0
   13f78:	str	r2, [sp, #108]	; 0x6c
   13f7c:	str	r3, [sp, #96]	; 0x60
   13f80:	bne	13fa8 <__assert_fail@plt+0x2624>
   13f84:	cmp	r2, #0
   13f88:	beq	13fa8 <__assert_fail@plt+0x2624>
   13f8c:	ldr	r3, [sp, #92]	; 0x5c
   13f90:	sub	r3, r3, #5
   13f94:	cmp	r2, r3
   13f98:	strlt	r2, [sp, #96]	; 0x60
   13f9c:	movlt	r3, r2
   13fa0:	blt	13fa8 <__assert_fail@plt+0x2624>
   13fa4:	str	r3, [sp, #96]	; 0x60
   13fa8:	cmp	fp, r3
   13fac:	blt	14928 <__assert_fail@plt+0x2fa4>
   13fb0:	bgt	14974 <__assert_fail@plt+0x2ff0>
   13fb4:	ldr	r2, [sp, #88]	; 0x58
   13fb8:	ldr	r0, [r4]
   13fbc:	add	r2, r3, r2
   13fc0:	ldr	r1, [sp, #84]	; 0x54
   13fc4:	bl	11930 <wmove@plt>
   13fc8:	b	13f10 <__assert_fail@plt+0x258c>
   13fcc:	cmp	r0, #260	; 0x104
   13fd0:	ble	14148 <__assert_fail@plt+0x27c4>
   13fd4:	movw	r3, #261	; 0x105
   13fd8:	cmp	r0, r3
   13fdc:	bne	13f3c <__assert_fail@plt+0x25b8>
   13fe0:	ldr	r3, [sp, #80]	; 0x50
   13fe4:	cmp	r3, #2
   13fe8:	beq	141d4 <__assert_fail@plt+0x2850>
   13fec:	cmp	r3, #3
   13ff0:	beq	141c4 <__assert_fail@plt+0x2840>
   13ff4:	cmp	r3, #1
   13ff8:	bne	13f10 <__assert_fail@plt+0x258c>
   13ffc:	add	r0, sp, #80	; 0x50
   14000:	mov	r1, #2
   14004:	bl	139d0 <__assert_fail@plt+0x204c>
   14008:	b	13f10 <__assert_fail@plt+0x258c>
   1400c:	mvn	r4, #1
   14010:	mov	r0, #1
   14014:	bl	1394c <__assert_fail@plt+0x1fc8>
   14018:	bl	118b8 <endwin@plt>
   1401c:	cmp	r6, #0
   14020:	beq	1402c <__assert_fail@plt+0x26a8>
   14024:	mov	r0, r6
   14028:	bl	11894 <delscreen@plt>
   1402c:	ldr	r3, [sp, #24]
   14030:	cmp	r3, #0
   14034:	beq	1404c <__assert_fail@plt+0x26c8>
   14038:	mov	r0, #0
   1403c:	mov	r1, r3
   14040:	bl	118ac <setlocale@plt>
   14044:	ldr	r0, [sp, #24]
   14048:	bl	11624 <free@plt>
   1404c:	ldr	r3, [sp, #20]
   14050:	cmp	r3, #0
   14054:	beq	14060 <__assert_fail@plt+0x26dc>
   14058:	mov	r0, r3
   1405c:	bl	11888 <fclose@plt>
   14060:	ldr	r3, [sp, #28]
   14064:	cmp	r3, #0
   14068:	beq	14074 <__assert_fail@plt+0x26f0>
   1406c:	mov	r0, r3
   14070:	bl	11888 <fclose@plt>
   14074:	ldr	r0, [sp, #120]	; 0x78
   14078:	bl	11624 <free@plt>
   1407c:	ldr	r0, [sp, #132]	; 0x84
   14080:	cmp	r0, #0
   14084:	beq	1408c <__assert_fail@plt+0x2708>
   14088:	bl	11624 <free@plt>
   1408c:	ldr	r0, [sp, #144]	; 0x90
   14090:	cmp	r0, #0
   14094:	beq	1409c <__assert_fail@plt+0x2718>
   14098:	bl	11624 <free@plt>
   1409c:	ldr	r1, [r5, #28]
   140a0:	cmp	r1, #0
   140a4:	beq	140f4 <__assert_fail@plt+0x2770>
   140a8:	mov	r2, #1
   140ac:	ldr	r0, [r5, #48]	; 0x30
   140b0:	str	r2, [r5, #80]	; 0x50
   140b4:	bl	128dc <__assert_fail@plt+0xf58>
   140b8:	subs	r6, r0, #0
   140bc:	beq	140f4 <__assert_fail@plt+0x2770>
   140c0:	bl	117e0 <strlen@plt>
   140c4:	add	r1, r0, #1
   140c8:	mov	r0, r5
   140cc:	bl	12d78 <__assert_fail@plt+0x13f4>
   140d0:	ldr	r0, [r5, #28]
   140d4:	cmp	r0, #0
   140d8:	beq	140e4 <__assert_fail@plt+0x2760>
   140dc:	mov	r1, r6
   140e0:	bl	11738 <strcpy@plt>
   140e4:	mov	r0, r6
   140e8:	bl	17458 <__assert_fail@plt+0x5ad4>
   140ec:	mov	r3, #0
   140f0:	str	r3, [r5, #80]	; 0x50
   140f4:	cmn	r4, #2
   140f8:	ldr	r3, [sp, #100]	; 0x64
   140fc:	beq	14224 <__assert_fail@plt+0x28a0>
   14100:	cmp	r3, #0
   14104:	beq	148e4 <__assert_fail@plt+0x2f60>
   14108:	cmn	r4, #1
   1410c:	beq	14234 <__assert_fail@plt+0x28b0>
   14110:	ldr	r4, [sp, #108]	; 0x6c
   14114:	ldr	r1, [r5, #68]	; 0x44
   14118:	cmp	r1, #0
   1411c:	beq	1412c <__assert_fail@plt+0x27a8>
   14120:	ldrb	r3, [r1]
   14124:	cmp	r3, #0
   14128:	bne	14398 <__assert_fail@plt+0x2a14>
   1412c:	ldr	r2, [sp, #172]	; 0xac
   14130:	mov	r0, r4
   14134:	ldr	r3, [r7]
   14138:	cmp	r2, r3
   1413c:	bne	14f10 <__assert_fail@plt+0x358c>
   14140:	add	sp, sp, #180	; 0xb4
   14144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14148:	ldr	r3, [sp, #80]	; 0x50
   1414c:	cmp	r3, #3
   14150:	beq	13ffc <__assert_fail@plt+0x2678>
   14154:	cmp	r3, #4
   14158:	beq	1423c <__assert_fail@plt+0x28b8>
   1415c:	cmp	r3, #2
   14160:	bne	13f10 <__assert_fail@plt+0x258c>
   14164:	ldr	r3, [sp, #100]	; 0x64
   14168:	cmp	r3, #0
   1416c:	bne	14204 <__assert_fail@plt+0x2880>
   14170:	b	13f10 <__assert_fail@plt+0x258c>
   14174:	ldr	r3, [sp, #80]	; 0x50
   14178:	sub	r3, r3, #1
   1417c:	cmp	r3, #3
   14180:	ldrls	pc, [pc, r3, lsl #2]
   14184:	b	13f10 <__assert_fail@plt+0x258c>
   14188:	strdeq	r4, [r1], -r0
   1418c:	strdeq	r4, [r1], -r0
   14190:	muleq	r1, r8, r1
   14194:	andeq	r4, r1, ip
   14198:	mvn	r4, #0
   1419c:	b	14010 <__assert_fail@plt+0x268c>
   141a0:	ldr	r3, [sp, #80]	; 0x50
   141a4:	sub	r3, r3, #1
   141a8:	cmp	r3, #3
   141ac:	ldrls	pc, [pc, r3, lsl #2]
   141b0:	b	13f10 <__assert_fail@plt+0x258c>
   141b4:	strdeq	r3, [r1], -ip
   141b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141bc:	andeq	r4, r1, r4, asr #3
   141c0:	strdeq	r4, [r1], -r8
   141c4:	add	r0, sp, #80	; 0x50
   141c8:	mov	r1, #4
   141cc:	bl	139d0 <__assert_fail@plt+0x204c>
   141d0:	b	13f10 <__assert_fail@plt+0x258c>
   141d4:	ldr	r3, [sp, #144]	; 0x90
   141d8:	cmp	r3, #0
   141dc:	beq	141c4 <__assert_fail@plt+0x2840>
   141e0:	add	r0, sp, #80	; 0x50
   141e4:	mov	r1, #3
   141e8:	bl	139d0 <__assert_fail@plt+0x204c>
   141ec:	b	13f10 <__assert_fail@plt+0x258c>
   141f0:	mov	r4, #1
   141f4:	b	14010 <__assert_fail@plt+0x268c>
   141f8:	ldr	r3, [sp, #100]	; 0x64
   141fc:	cmp	r3, #0
   14200:	beq	13ffc <__assert_fail@plt+0x2678>
   14204:	add	r0, sp, #80	; 0x50
   14208:	mov	r1, #1
   1420c:	bl	139d0 <__assert_fail@plt+0x204c>
   14210:	b	13f10 <__assert_fail@plt+0x258c>
   14214:	movw	r1, #32864	; 0x8060
   14218:	ldr	r0, [r5, #48]	; 0x30
   1421c:	movt	r1, #1
   14220:	b	13db8 <__assert_fail@plt+0x2434>
   14224:	cmp	r3, #0
   14228:	mov	r2, #1
   1422c:	str	r2, [r5, #76]	; 0x4c
   14230:	beq	148e4 <__assert_fail@plt+0x2f60>
   14234:	mvn	r4, #0
   14238:	b	14114 <__assert_fail@plt+0x2790>
   1423c:	ldr	r3, [sp, #144]	; 0x90
   14240:	cmp	r3, #0
   14244:	bne	141e0 <__assert_fail@plt+0x285c>
   14248:	b	13ffc <__assert_fail@plt+0x2678>
   1424c:	movw	r4, #38008	; 0x9478
   14250:	movt	r4, #2
   14254:	ldr	r3, [r4, #4]
   14258:	cmp	r3, #0
   1425c:	bne	14848 <__assert_fail@plt+0x2ec4>
   14260:	movw	r3, #37936	; 0x9430
   14264:	movt	r3, #2
   14268:	ldr	r0, [r3]
   1426c:	bl	11864 <fileno@plt>
   14270:	bl	1193c <isatty@plt>
   14274:	cmp	r0, #0
   14278:	beq	14e80 <__assert_fail@plt+0x34fc>
   1427c:	movw	r3, #37944	; 0x9438
   14280:	movt	r3, #2
   14284:	ldr	r0, [r3]
   14288:	bl	11864 <fileno@plt>
   1428c:	bl	1193c <isatty@plt>
   14290:	cmp	r0, #0
   14294:	beq	14e80 <__assert_fail@plt+0x34fc>
   14298:	mov	r3, #1
   1429c:	str	r6, [sp, #28]
   142a0:	str	r3, [r4, #4]
   142a4:	movw	r4, #37940	; 0x9434
   142a8:	str	r6, [sp, #20]
   142ac:	movt	r4, #2
   142b0:	bl	116c0 <initscr@plt>
   142b4:	b	13cd4 <__assert_fail@plt+0x2350>
   142b8:	str	r1, [sp, #12]
   142bc:	ldr	r1, [r5, #8]
   142c0:	cmp	r1, #0
   142c4:	bne	13d2c <__assert_fail@plt+0x23a8>
   142c8:	str	r1, [sp, #16]
   142cc:	ldr	r1, [r5, #12]
   142d0:	cmp	r1, #0
   142d4:	bne	13d4c <__assert_fail@plt+0x23c8>
   142d8:	ldr	r0, [r5, #16]
   142dc:	str	r1, [sp, #32]
   142e0:	cmp	r0, #0
   142e4:	bne	13d6c <__assert_fail@plt+0x23e8>
   142e8:	b	14214 <__assert_fail@plt+0x2890>
   142ec:	bl	116d8 <start_color@plt>
   142f0:	bl	115ac <use_default_colors@plt>
   142f4:	ldr	r3, [r5, #112]	; 0x70
   142f8:	cmp	r3, #1
   142fc:	streq	r3, [r5, #116]	; 0x74
   14300:	moveq	r3, #3
   14304:	streq	r3, [r5, #112]	; 0x70
   14308:	movw	r3, #37932	; 0x942c
   1430c:	movt	r3, #2
   14310:	ldr	r3, [r3]
   14314:	cmp	r3, #1
   14318:	ble	13cf8 <__assert_fail@plt+0x2374>
   1431c:	ldr	r2, [r5, #100]	; 0x64
   14320:	mov	r0, #1
   14324:	ldr	r3, [r5, #108]	; 0x6c
   14328:	movw	r8, #32828	; 0x803c
   1432c:	movt	r8, #1
   14330:	lsl	r2, r2, r0
   14334:	lsl	r3, r3, r0
   14338:	ldrsh	r1, [r8, r2]
   1433c:	ldrsh	r2, [r8, r3]
   14340:	bl	11684 <init_pair@plt>
   14344:	ldr	r2, [r5, #112]	; 0x70
   14348:	ldr	r3, [r5, #108]	; 0x6c
   1434c:	mov	r0, #2
   14350:	lsl	r2, r2, #1
   14354:	lsl	r3, r3, #1
   14358:	ldrsh	r1, [r8, r2]
   1435c:	ldrsh	r2, [r8, r3]
   14360:	bl	11684 <init_pair@plt>
   14364:	ldr	r0, [r4]
   14368:	mov	r1, #256	; 0x100
   1436c:	bl	1169c <wbkgd@plt>
   14370:	ldr	r1, [r5, #104]	; 0x68
   14374:	mov	r3, #256	; 0x100
   14378:	movt	r3, #32
   1437c:	cmp	r1, #0
   14380:	ldr	r0, [r4]
   14384:	mov	r2, #0
   14388:	movne	r1, r3
   1438c:	moveq	r1, #256	; 0x100
   14390:	bl	11600 <wattr_on@plt>
   14394:	b	13cf8 <__assert_fail@plt+0x2374>
   14398:	mov	r0, #3
   1439c:	add	r2, sp, #80	; 0x50
   143a0:	bl	116fc <__xstat@plt>
   143a4:	cmp	r0, #0
   143a8:	bne	1412c <__assert_fail@plt+0x27a8>
   143ac:	b	143b8 <__assert_fail@plt+0x2a34>
   143b0:	mov	r0, #1
   143b4:	bl	1166c <sleep@plt>
   143b8:	mov	r0, #0
   143bc:	bl	11654 <time@plt>
   143c0:	ldr	r3, [sp, #144]	; 0x90
   143c4:	cmp	r0, r3
   143c8:	beq	143b0 <__assert_fail@plt+0x2a2c>
   143cc:	ldr	r0, [r5, #68]	; 0x44
   143d0:	mov	r1, #0
   143d4:	bl	118f4 <utime@plt>
   143d8:	b	1412c <__assert_fail@plt+0x27a8>
   143dc:	mov	r3, #0
   143e0:	str	r3, [sp, #132]	; 0x84
   143e4:	mov	r3, #0
   143e8:	str	r3, [sp, #144]	; 0x90
   143ec:	ldr	r3, [r4]
   143f0:	cmp	r3, #0
   143f4:	ldrshne	r2, [r3, #4]
   143f8:	mvneq	r3, #0
   143fc:	ldrshne	sl, [r3, #6]
   14400:	streq	r3, [sp, #36]	; 0x24
   14404:	addne	r2, r2, #1
   14408:	streq	r3, [sp, #40]	; 0x28
   1440c:	addne	sl, sl, #1
   14410:	ldr	r3, [sp, #12]
   14414:	strne	r2, [sp, #36]	; 0x24
   14418:	strne	sl, [sp, #40]	; 0x28
   1441c:	cmp	r3, #0
   14420:	beq	149c0 <__assert_fail@plt+0x303c>
   14424:	ldr	lr, [sp, #40]	; 0x28
   14428:	add	r8, sp, #76	; 0x4c
   1442c:	ldr	r1, [sp, #12]
   14430:	mov	r3, #0
   14434:	sub	ip, lr, #4
   14438:	mov	sl, #1
   1443c:	str	r5, [sp, #44]	; 0x2c
   14440:	add	r9, sp, #72	; 0x48
   14444:	mov	r5, sl
   14448:	mov	fp, r3
   1444c:	mov	sl, r4
   14450:	str	r1, [sp, #72]	; 0x48
   14454:	mov	r4, r8
   14458:	str	r3, [sp, #76]	; 0x4c
   1445c:	mov	r8, ip
   14460:	b	14468 <__assert_fail@plt+0x2ae4>
   14464:	mov	r5, r1
   14468:	mov	r0, r8
   1446c:	mov	r1, r9
   14470:	mov	r2, r4
   14474:	bl	13734 <__assert_fail@plt+0x1db0>
   14478:	ldr	r3, [sp, #76]	; 0x4c
   1447c:	ldr	r2, [sp, #72]	; 0x48
   14480:	add	r1, r5, #1
   14484:	sub	r0, r3, #-1073741823	; 0xc0000001
   14488:	cmp	fp, r3
   1448c:	movlt	fp, r3
   14490:	ldr	r3, [r2, r0, lsl #2]
   14494:	cmp	r3, #0
   14498:	bne	14464 <__assert_fail@plt+0x2ae0>
   1449c:	mov	r4, sl
   144a0:	mov	sl, r5
   144a4:	ldr	r5, [sp, #44]	; 0x2c
   144a8:	add	r8, sl, #2
   144ac:	ldr	r9, [r5, #28]
   144b0:	cmp	r9, #0
   144b4:	moveq	r2, r9
   144b8:	beq	14518 <__assert_fail@plt+0x2b94>
   144bc:	ldr	r3, [sp, #16]
   144c0:	cmp	r3, #0
   144c4:	beq	14e78 <__assert_fail@plt+0x34f4>
   144c8:	mov	r2, #0
   144cc:	sub	r1, r3, #4
   144d0:	mov	r0, r2
   144d4:	ldr	r3, [r1, #4]!
   144d8:	cmp	r3, #0
   144dc:	beq	14508 <__assert_fail@plt+0x2b84>
   144e0:	cmp	r3, #10
   144e4:	addne	r2, r2, #1
   144e8:	bne	144d4 <__assert_fail@plt+0x2b50>
   144ec:	ldr	r3, [r1, #4]!
   144f0:	cmp	r0, r2
   144f4:	movlt	r0, r2
   144f8:	add	r8, r8, #1
   144fc:	mov	r2, #0
   14500:	cmp	r3, #0
   14504:	bne	144e0 <__assert_fail@plt+0x2b5c>
   14508:	cmp	r2, r0
   1450c:	movlt	r2, r0
   14510:	add	r8, r8, #2
   14514:	add	r8, r8, #2
   14518:	ldr	r1, [sp, #36]	; 0x24
   1451c:	add	r3, r8, #2
   14520:	str	r3, [sp, #48]	; 0x30
   14524:	cmp	r3, r1
   14528:	bgt	13ea8 <__assert_fail@plt+0x2524>
   1452c:	ldr	r3, [sp, #12]
   14530:	cmp	r3, #0
   14534:	beq	14e94 <__assert_fail@plt+0x3510>
   14538:	ldr	lr, [sp, #40]	; 0x28
   1453c:	sub	r3, lr, #3
   14540:	cmp	r3, fp
   14544:	suble	fp, lr, #4
   14548:	bic	fp, fp, fp, asr #31
   1454c:	cmp	r9, #0
   14550:	beq	145a8 <__assert_fail@plt+0x2c24>
   14554:	ldr	r3, [sp, #16]
   14558:	cmp	r3, #0
   1455c:	ldr	r3, [sp, #40]	; 0x28
   14560:	sub	sl, r3, #3
   14564:	beq	14578 <__assert_fail@plt+0x2bf4>
   14568:	cmp	sl, r2
   1456c:	suble	r2, r3, #4
   14570:	cmp	fp, r2
   14574:	movlt	fp, r2
   14578:	ldr	r3, [sp, #32]
   1457c:	cmp	r3, #0
   14580:	moveq	r0, #40	; 0x28
   14584:	beq	14594 <__assert_fail@plt+0x2c10>
   14588:	mov	r0, r3
   1458c:	bl	118e8 <wcslen@plt>
   14590:	add	r0, r0, #41	; 0x29
   14594:	cmp	r0, sl
   14598:	ldrge	r3, [sp, #40]	; 0x28
   1459c:	subge	r0, r3, #4
   145a0:	cmp	fp, r0
   145a4:	movlt	fp, r0
   145a8:	ldr	r0, [sp, #120]	; 0x78
   145ac:	bl	117e0 <strlen@plt>
   145b0:	ldr	r3, [sp, #132]	; 0x84
   145b4:	add	r0, r0, r0, lsl #1
   145b8:	cmp	fp, r0
   145bc:	movcc	fp, r0
   145c0:	cmp	r3, #0
   145c4:	beq	145dc <__assert_fail@plt+0x2c58>
   145c8:	mov	r0, r3
   145cc:	bl	117e0 <strlen@plt>
   145d0:	add	r0, r0, r0, lsl #1
   145d4:	cmp	fp, r0
   145d8:	movcc	fp, r0
   145dc:	ldr	r0, [sp, #144]	; 0x90
   145e0:	cmp	r0, #0
   145e4:	beq	145f8 <__assert_fail@plt+0x2c74>
   145e8:	bl	117e0 <strlen@plt>
   145ec:	add	r0, r0, r0, lsl #1
   145f0:	cmp	fp, r0
   145f4:	movcc	fp, r0
   145f8:	ldr	r1, [sp, #40]	; 0x28
   145fc:	add	r3, fp, #4
   14600:	str	r3, [sp, #56]	; 0x38
   14604:	cmp	r1, r3
   14608:	blt	13ea8 <__assert_fail@plt+0x2524>
   1460c:	ldr	r3, [sp, #36]	; 0x24
   14610:	mov	sl, #0
   14614:	ldr	r2, [sp, #56]	; 0x38
   14618:	ldr	lr, [sp, #48]	; 0x30
   1461c:	ldr	r0, [r4]
   14620:	rsb	ip, lr, r3
   14624:	rsb	r3, r2, r1
   14628:	ldr	lr, [r5, #32]
   1462c:	movw	r1, #37408	; 0x9220
   14630:	add	r3, r3, r3, lsr #31
   14634:	add	ip, ip, ip, lsr #31
   14638:	movt	r1, #2
   1463c:	str	r1, [sp, #52]	; 0x34
   14640:	asr	r3, r3, #1
   14644:	asr	ip, ip, #1
   14648:	str	r3, [sp, #36]	; 0x24
   1464c:	add	r3, r2, r3
   14650:	str	r3, [sp, #64]	; 0x40
   14654:	mov	r1, ip
   14658:	str	lr, [sp, #104]	; 0x68
   1465c:	add	r3, fp, #2
   14660:	ldr	lr, [sp, #64]	; 0x40
   14664:	ldr	r2, [sp, #36]	; 0x24
   14668:	stmib	sp, {r3, ip}
   1466c:	str	r9, [sp, #100]	; 0x64
   14670:	sub	r9, lr, #1
   14674:	str	sl, [sp, #80]	; 0x50
   14678:	add	lr, ip, #1
   1467c:	str	sl, [sp, #96]	; 0x60
   14680:	str	lr, [sp, #44]	; 0x2c
   14684:	str	sl, [sp, #108]	; 0x6c
   14688:	bl	11930 <wmove@plt>
   1468c:	ldr	r2, [sp, #52]	; 0x34
   14690:	ldr	r0, [r4]
   14694:	ldr	r1, [r2, #432]	; 0x1b0
   14698:	bl	11618 <waddch@plt>
   1469c:	ldr	r3, [sp, #4]
   146a0:	mov	r1, sl
   146a4:	ldr	r0, [r4]
   146a8:	mov	r2, r3
   146ac:	bl	115dc <whline@plt>
   146b0:	ldr	ip, [sp, #8]
   146b4:	mov	r2, r9
   146b8:	ldr	r0, [r4]
   146bc:	mov	r1, ip
   146c0:	bl	11930 <wmove@plt>
   146c4:	ldr	lr, [sp, #52]	; 0x34
   146c8:	ldr	r0, [r4]
   146cc:	ldr	r1, [lr, #428]	; 0x1ac
   146d0:	bl	11618 <waddch@plt>
   146d4:	mov	r2, r9
   146d8:	ldr	r1, [sp, #44]	; 0x2c
   146dc:	ldr	r0, [r4]
   146e0:	bl	11930 <wmove@plt>
   146e4:	mov	r2, r8
   146e8:	mov	r1, sl
   146ec:	ldr	r0, [r4]
   146f0:	bl	118dc <wvline@plt>
   146f4:	ldr	r1, [sp, #48]	; 0x30
   146f8:	ldr	ip, [sp, #8]
   146fc:	ldr	r2, [sp, #36]	; 0x24
   14700:	add	ip, r1, ip
   14704:	ldr	r0, [r4]
   14708:	sub	r8, ip, #1
   1470c:	mov	r1, r8
   14710:	bl	11930 <wmove@plt>
   14714:	ldr	r2, [sp, #52]	; 0x34
   14718:	ldr	r0, [r4]
   1471c:	ldr	r1, [r2, #436]	; 0x1b4
   14720:	bl	11618 <waddch@plt>
   14724:	ldr	r3, [sp, #4]
   14728:	mov	r1, sl
   1472c:	ldr	r0, [r4]
   14730:	mov	r2, r3
   14734:	bl	115dc <whline@plt>
   14738:	mov	r1, r8
   1473c:	mov	r2, r9
   14740:	ldr	r0, [r4]
   14744:	bl	11930 <wmove@plt>
   14748:	ldr	r3, [sp, #52]	; 0x34
   1474c:	ldr	r0, [r4]
   14750:	ldr	r1, [r3, #424]	; 0x1a8
   14754:	bl	11618 <waddch@plt>
   14758:	ldr	r3, [sp, #12]
   1475c:	cmp	r3, sl
   14760:	beq	14a20 <__assert_fail@plt+0x309c>
   14764:	ldr	lr, [sp, #40]	; 0x28
   14768:	add	r9, sp, #72	; 0x48
   1476c:	ldr	r1, [sp, #12]
   14770:	add	r8, sp, #76	; 0x4c
   14774:	sub	r3, lr, #4
   14778:	str	r6, [sp, #40]	; 0x28
   1477c:	str	fp, [sp, #48]	; 0x30
   14780:	str	r5, [sp, #60]	; 0x3c
   14784:	ldr	r6, [sp, #36]	; 0x24
   14788:	ldr	r5, [sp, #44]	; 0x2c
   1478c:	ldr	fp, [sp, #52]	; 0x34
   14790:	str	sl, [sp, #76]	; 0x4c
   14794:	mov	sl, r3
   14798:	str	r1, [sp, #72]	; 0x48
   1479c:	str	r7, [sp, #68]	; 0x44
   147a0:	mov	r2, r6
   147a4:	mov	r1, r5
   147a8:	ldr	r0, [r4]
   147ac:	bl	11930 <wmove@plt>
   147b0:	ldr	r1, [fp, #480]	; 0x1e0
   147b4:	ldr	r0, [r4]
   147b8:	bl	11618 <waddch@plt>
   147bc:	mov	r1, #32
   147c0:	ldr	r0, [r4]
   147c4:	bl	11618 <waddch@plt>
   147c8:	mov	r2, r8
   147cc:	mov	r0, sl
   147d0:	mov	r1, r9
   147d4:	bl	13734 <__assert_fail@plt+0x1db0>
   147d8:	ldr	r2, [sp, #76]	; 0x4c
   147dc:	cmp	r2, #1
   147e0:	ble	14810 <__assert_fail@plt+0x2e8c>
   147e4:	mov	r7, #0
   147e8:	ldr	r1, [sp, #72]	; 0x48
   147ec:	mov	r2, #1
   147f0:	ldr	r0, [r4]
   147f4:	add	r1, r1, r7, lsl #2
   147f8:	add	r7, r7, r2
   147fc:	bl	11660 <waddnwstr@plt>
   14800:	ldr	r2, [sp, #76]	; 0x4c
   14804:	sub	r3, r2, #1
   14808:	cmp	r7, r3
   1480c:	blt	147e8 <__assert_fail@plt+0x2e64>
   14810:	ldr	r3, [sp, #72]	; 0x48
   14814:	sub	r0, r2, #-1073741823	; 0xc0000001
   14818:	add	r1, r3, r0, lsl #2
   1481c:	ldr	r0, [r3, r0, lsl #2]
   14820:	cmp	r0, #10
   14824:	cmpne	r0, #0
   14828:	bne	149cc <__assert_fail@plt+0x3048>
   1482c:	sub	r2, r2, #-1073741823	; 0xc0000001
   14830:	add	r1, r5, #1
   14834:	ldr	r3, [r3, r2, lsl #2]
   14838:	cmp	r3, #0
   1483c:	beq	149e4 <__assert_fail@plt+0x3060>
   14840:	mov	r5, r1
   14844:	b	147a0 <__assert_fail@plt+0x2e1c>
   14848:	movw	r4, #37940	; 0x9434
   1484c:	movt	r4, #2
   14850:	str	r6, [sp, #28]
   14854:	ldr	r0, [r4]
   14858:	bl	118d0 <wclear@plt>
   1485c:	str	r6, [sp, #20]
   14860:	b	13cd4 <__assert_fail@plt+0x2350>
   14864:	sub	r2, r0, #1
   14868:	cmp	r2, #254	; 0xfe
   1486c:	bhi	148f0 <__assert_fail@plt+0x2f6c>
   14870:	ldr	r2, [sp, #108]	; 0x6c
   14874:	ldr	r1, [sp, #104]	; 0x68
   14878:	cmp	r2, r1
   1487c:	bge	148f0 <__assert_fail@plt+0x2f6c>
   14880:	strb	r0, [r3, r2]
   14884:	ldr	r3, [sp, #96]	; 0x60
   14888:	ldr	r1, [sp, #92]	; 0x5c
   1488c:	add	r3, r3, #1
   14890:	ldr	r2, [sp, #108]	; 0x6c
   14894:	cmp	r3, r1
   14898:	str	r3, [sp, #96]	; 0x60
   1489c:	add	r2, r2, #1
   148a0:	str	r2, [sp, #108]	; 0x6c
   148a4:	bne	13fa8 <__assert_fail@plt+0x2624>
   148a8:	ldr	r1, [sp, #104]	; 0x68
   148ac:	cmp	r2, r1
   148b0:	bge	13fa8 <__assert_fail@plt+0x2624>
   148b4:	mvn	r1, r1
   148b8:	add	r2, r2, r1
   148bc:	add	r3, r3, r2
   148c0:	cmp	r3, #5
   148c4:	movle	r3, #5
   148c8:	strle	r3, [sp, #96]	; 0x60
   148cc:	ble	13fa8 <__assert_fail@plt+0x2624>
   148d0:	b	13fa4 <__assert_fail@plt+0x2620>
   148d4:	movw	r1, #32872	; 0x8068
   148d8:	ldr	r0, [r5, #48]	; 0x30
   148dc:	movt	r1, #1
   148e0:	b	13e28 <__assert_fail@plt+0x24a4>
   148e4:	mvn	r4, r4
   148e8:	lsr	r4, r4, #31
   148ec:	b	14114 <__assert_fail@plt+0x2790>
   148f0:	mov	r3, fp
   148f4:	b	13fb4 <__assert_fail@plt+0x2630>
   148f8:	movw	r1, #34200	; 0x8598
   148fc:	mov	r0, r3
   14900:	movt	r1, #1
   14904:	str	r3, [sp, #24]
   14908:	bl	118ac <setlocale@plt>
   1490c:	b	13c74 <__assert_fail@plt+0x22f0>
   14910:	mvn	r4, #1
   14914:	b	14114 <__assert_fail@plt+0x2790>
   14918:	ldr	r3, [sp, #16]
   1491c:	mov	r8, #1
   14920:	str	r3, [sp, #32]
   14924:	b	13eac <__assert_fail@plt+0x2528>
   14928:	ldr	r2, [sp, #88]	; 0x58
   1492c:	add	sl, fp, #1
   14930:	ldr	r0, [r4]
   14934:	add	r2, fp, r2
   14938:	ldr	r1, [sp, #84]	; 0x54
   1493c:	bl	11930 <wmove@plt>
   14940:	ldr	r3, [sp, #96]	; 0x60
   14944:	cmp	r3, fp
   14948:	bgt	14954 <__assert_fail@plt+0x2fd0>
   1494c:	b	13fb4 <__assert_fail@plt+0x2630>
   14950:	mov	sl, r2
   14954:	ldr	r0, [r4]
   14958:	mov	r1, #42	; 0x2a
   1495c:	bl	11618 <waddch@plt>
   14960:	ldr	r3, [sp, #96]	; 0x60
   14964:	add	r2, sl, #1
   14968:	cmp	r3, sl
   1496c:	bgt	14950 <__assert_fail@plt+0x2fcc>
   14970:	b	13fb4 <__assert_fail@plt+0x2630>
   14974:	ldr	r2, [sp, #88]	; 0x58
   14978:	sub	sl, fp, #1
   1497c:	ldr	r0, [r4]
   14980:	add	r2, r3, r2
   14984:	ldr	r1, [sp, #84]	; 0x54
   14988:	bl	11930 <wmove@plt>
   1498c:	ldr	r3, [sp, #96]	; 0x60
   14990:	cmp	r3, fp
   14994:	blt	149a0 <__assert_fail@plt+0x301c>
   14998:	b	13fb4 <__assert_fail@plt+0x2630>
   1499c:	mov	sl, r2
   149a0:	ldr	r0, [r4]
   149a4:	mov	r1, #95	; 0x5f
   149a8:	bl	11618 <waddch@plt>
   149ac:	ldr	r3, [sp, #96]	; 0x60
   149b0:	sub	r2, sl, #1
   149b4:	cmp	r3, sl
   149b8:	blt	1499c <__assert_fail@plt+0x3018>
   149bc:	b	13fb4 <__assert_fail@plt+0x2630>
   149c0:	ldr	fp, [sp, #12]
   149c4:	mov	r8, #1
   149c8:	b	144ac <__assert_fail@plt+0x2b28>
   149cc:	mov	r2, #1
   149d0:	ldr	r0, [r4]
   149d4:	bl	11660 <waddnwstr@plt>
   149d8:	ldr	r3, [sp, #72]	; 0x48
   149dc:	ldr	r2, [sp, #76]	; 0x4c
   149e0:	b	1482c <__assert_fail@plt+0x2ea8>
   149e4:	str	r5, [sp, #44]	; 0x2c
   149e8:	ldr	r3, [sp, #44]	; 0x2c
   149ec:	ldr	r0, [r4]
   149f0:	ldr	r2, [sp, #36]	; 0x24
   149f4:	add	r3, r3, #2
   149f8:	ldr	r6, [sp, #40]	; 0x28
   149fc:	str	r3, [sp, #44]	; 0x2c
   14a00:	ldr	fp, [sp, #48]	; 0x30
   14a04:	ldr	r5, [sp, #60]	; 0x3c
   14a08:	ldr	r7, [sp, #68]	; 0x44
   14a0c:	bl	11930 <wmove@plt>
   14a10:	ldr	r3, [sp, #52]	; 0x34
   14a14:	ldr	r0, [r4]
   14a18:	ldr	r1, [r3, #480]	; 0x1e0
   14a1c:	bl	11618 <waddch@plt>
   14a20:	ldr	r3, [r5, #28]
   14a24:	cmp	r3, #0
   14a28:	beq	14d28 <__assert_fail@plt+0x33a4>
   14a2c:	ldr	r3, [sp, #16]
   14a30:	cmp	r3, #0
   14a34:	beq	14c18 <__assert_fail@plt+0x3294>
   14a38:	ldr	r3, [r3]
   14a3c:	ldr	r0, [r4]
   14a40:	cmp	r3, #0
   14a44:	beq	14bf4 <__assert_fail@plt+0x3270>
   14a48:	ldr	r9, [sp, #16]
   14a4c:	movw	r3, #37932	; 0x942c
   14a50:	str	r6, [sp, #48]	; 0x30
   14a54:	movt	r3, #2
   14a58:	ldr	r6, [sp, #44]	; 0x2c
   14a5c:	mov	sl, #0
   14a60:	str	r7, [sp, #60]	; 0x3c
   14a64:	mov	r7, r9
   14a68:	mov	r9, r3
   14a6c:	movw	lr, #37940	; 0x9434
   14a70:	movt	lr, #2
   14a74:	str	lr, [sp, #40]	; 0x28
   14a78:	ldr	r2, [sp, #36]	; 0x24
   14a7c:	mov	r1, r6
   14a80:	bl	11930 <wmove@plt>
   14a84:	ldr	r3, [sp, #52]	; 0x34
   14a88:	ldr	r0, [r4]
   14a8c:	ldr	r1, [r3, #480]	; 0x1e0
   14a90:	bl	11618 <waddch@plt>
   14a94:	mov	r1, #32
   14a98:	ldr	r0, [r4]
   14a9c:	bl	11618 <waddch@plt>
   14aa0:	bl	1160c <has_colors@plt>
   14aa4:	cmp	r0, #0
   14aa8:	beq	14e54 <__assert_fail@plt+0x34d0>
   14aac:	ldr	r2, [r9]
   14ab0:	cmp	r2, #1
   14ab4:	ble	14e54 <__assert_fail@plt+0x34d0>
   14ab8:	ldr	r2, [r5, #112]	; 0x70
   14abc:	cmp	r2, #0
   14ac0:	beq	14e54 <__assert_fail@plt+0x34d0>
   14ac4:	ldr	r1, [r5, #104]	; 0x68
   14ac8:	mov	r2, #256	; 0x100
   14acc:	ldr	r3, [sp, #40]	; 0x28
   14ad0:	movt	r2, #32
   14ad4:	cmp	r1, #0
   14ad8:	ldr	r0, [r3]
   14adc:	movne	r1, r2
   14ae0:	moveq	r1, #256	; 0x100
   14ae4:	mov	r2, #0
   14ae8:	bl	11714 <wattr_off@plt>
   14aec:	ldr	r1, [r5, #116]	; 0x74
   14af0:	mov	r2, #512	; 0x200
   14af4:	movt	r2, #32
   14af8:	cmp	r1, #0
   14afc:	ldr	r0, [r4]
   14b00:	movne	r1, r2
   14b04:	moveq	r1, #512	; 0x200
   14b08:	mov	r2, #0
   14b0c:	bl	11600 <wattr_on@plt>
   14b10:	ldr	r2, [r7]
   14b14:	cmp	r2, #0
   14b18:	cmpne	r2, #10
   14b1c:	beq	14b5c <__assert_fail@plt+0x31d8>
   14b20:	mov	r8, #0
   14b24:	b	14b3c <__assert_fail@plt+0x31b8>
   14b28:	ldr	r3, [r7, #4]
   14b2c:	add	r7, r7, #4
   14b30:	cmp	r3, #10
   14b34:	cmpne	r3, #0
   14b38:	beq	14b5c <__assert_fail@plt+0x31d8>
   14b3c:	cmp	fp, r8
   14b40:	ble	14b28 <__assert_fail@plt+0x31a4>
   14b44:	mov	r2, #1
   14b48:	ldr	r0, [r4]
   14b4c:	mov	r1, r7
   14b50:	add	r8, r8, r2
   14b54:	bl	11660 <waddnwstr@plt>
   14b58:	b	14b28 <__assert_fail@plt+0x31a4>
   14b5c:	bl	1160c <has_colors@plt>
   14b60:	cmp	r0, #0
   14b64:	beq	14e68 <__assert_fail@plt+0x34e4>
   14b68:	ldr	r2, [r9]
   14b6c:	cmp	r2, #1
   14b70:	ble	14e68 <__assert_fail@plt+0x34e4>
   14b74:	ldr	r2, [r5, #112]	; 0x70
   14b78:	cmp	r2, #0
   14b7c:	beq	14e68 <__assert_fail@plt+0x34e4>
   14b80:	ldr	r1, [r5, #116]	; 0x74
   14b84:	mov	r2, #512	; 0x200
   14b88:	movt	r2, #32
   14b8c:	ldr	r0, [r4]
   14b90:	cmp	r1, #0
   14b94:	movne	r1, r2
   14b98:	moveq	r1, #512	; 0x200
   14b9c:	mov	r2, #0
   14ba0:	bl	11714 <wattr_off@plt>
   14ba4:	ldr	r1, [r5, #104]	; 0x68
   14ba8:	mov	r2, #256	; 0x100
   14bac:	movt	r2, #32
   14bb0:	cmp	r1, #0
   14bb4:	ldr	r0, [r4]
   14bb8:	movne	r1, r2
   14bbc:	moveq	r1, #256	; 0x100
   14bc0:	mov	r2, #0
   14bc4:	bl	11600 <wattr_on@plt>
   14bc8:	ldr	r0, [r4]
   14bcc:	ldr	r2, [r7]
   14bd0:	add	r6, r6, #1
   14bd4:	cmp	r2, #10
   14bd8:	ldreq	r2, [r7, #4]
   14bdc:	addeq	r7, r7, #4
   14be0:	cmp	r2, #0
   14be4:	bne	14a78 <__assert_fail@plt+0x30f4>
   14be8:	str	r6, [sp, #44]	; 0x2c
   14bec:	ldr	r7, [sp, #60]	; 0x3c
   14bf0:	ldr	r6, [sp, #48]	; 0x30
   14bf4:	ldr	r1, [sp, #44]	; 0x2c
   14bf8:	ldr	r2, [sp, #36]	; 0x24
   14bfc:	add	r3, r1, #1
   14c00:	str	r3, [sp, #44]	; 0x2c
   14c04:	bl	11930 <wmove@plt>
   14c08:	ldr	r3, [sp, #52]	; 0x34
   14c0c:	ldr	r0, [r4]
   14c10:	ldr	r1, [r3, #480]	; 0x1e0
   14c14:	bl	11618 <waddch@plt>
   14c18:	ldr	r2, [sp, #36]	; 0x24
   14c1c:	ldr	r1, [sp, #44]	; 0x2c
   14c20:	ldr	r0, [r4]
   14c24:	add	r8, r2, #2
   14c28:	bl	11930 <wmove@plt>
   14c2c:	ldr	r3, [sp, #52]	; 0x34
   14c30:	ldr	r0, [r4]
   14c34:	ldr	r1, [r3, #480]	; 0x1e0
   14c38:	bl	11618 <waddch@plt>
   14c3c:	ldr	r0, [r4]
   14c40:	mov	r1, #32
   14c44:	bl	11618 <waddch@plt>
   14c48:	ldr	r3, [sp, #32]
   14c4c:	str	fp, [sp, #92]	; 0x5c
   14c50:	cmp	r3, #0
   14c54:	ldr	r3, [sp, #44]	; 0x2c
   14c58:	str	r8, [sp, #88]	; 0x58
   14c5c:	str	r3, [sp, #84]	; 0x54
   14c60:	moveq	r3, fp
   14c64:	beq	14cd4 <__assert_fail@plt+0x3350>
   14c68:	ldr	r0, [sp, #32]
   14c6c:	bl	118e8 <wcslen@plt>
   14c70:	sub	r3, fp, #39	; 0x27
   14c74:	cmp	r0, r3
   14c78:	subge	r0, fp, #40	; 0x28
   14c7c:	cmp	r0, #0
   14c80:	add	r3, r0, #1
   14c84:	add	r8, r8, r3
   14c88:	sub	r9, r0, #1
   14c8c:	mvn	r3, r0
   14c90:	str	r8, [sp, #88]	; 0x58
   14c94:	add	r3, fp, r3
   14c98:	ldrgt	r8, [sp, #32]
   14c9c:	str	r3, [sp, #92]	; 0x5c
   14ca0:	ble	14cc4 <__assert_fail@plt+0x3340>
   14ca4:	mov	r1, r8
   14ca8:	sub	r9, r9, #1
   14cac:	ldr	r0, [r4]
   14cb0:	mov	r2, #1
   14cb4:	bl	11660 <waddnwstr@plt>
   14cb8:	cmn	r9, #1
   14cbc:	add	r8, r8, #4
   14cc0:	bne	14ca4 <__assert_fail@plt+0x3320>
   14cc4:	ldr	r0, [r4]
   14cc8:	mov	r1, #32
   14ccc:	bl	11618 <waddch@plt>
   14cd0:	ldr	r3, [sp, #92]	; 0x5c
   14cd4:	cmp	r3, #0
   14cd8:	movgt	r8, #0
   14cdc:	ble	14cfc <__assert_fail@plt+0x3378>
   14ce0:	ldr	r0, [r4]
   14ce4:	mov	r1, #95	; 0x5f
   14ce8:	bl	11618 <waddch@plt>
   14cec:	ldr	r3, [sp, #92]	; 0x5c
   14cf0:	add	r8, r8, #1
   14cf4:	cmp	r8, r3
   14cf8:	blt	14ce0 <__assert_fail@plt+0x335c>
   14cfc:	ldr	r3, [sp, #44]	; 0x2c
   14d00:	ldr	r0, [r4]
   14d04:	add	r1, r3, #1
   14d08:	ldr	r2, [sp, #36]	; 0x24
   14d0c:	add	r3, r3, #2
   14d10:	str	r3, [sp, #44]	; 0x2c
   14d14:	bl	11930 <wmove@plt>
   14d18:	ldr	r3, [sp, #52]	; 0x34
   14d1c:	ldr	r0, [r4]
   14d20:	ldr	r1, [r3, #480]	; 0x1e0
   14d24:	bl	11618 <waddch@plt>
   14d28:	ldr	r1, [sp, #44]	; 0x2c
   14d2c:	movw	r9, #37940	; 0x9434
   14d30:	ldr	r2, [sp, #36]	; 0x24
   14d34:	movt	r9, #2
   14d38:	ldr	r0, [r4]
   14d3c:	bl	11930 <wmove@plt>
   14d40:	ldr	r3, [sp, #52]	; 0x34
   14d44:	ldr	r0, [r4]
   14d48:	ldr	r1, [r3, #480]	; 0x1e0
   14d4c:	bl	11618 <waddch@plt>
   14d50:	ldr	r3, [sp, #132]	; 0x84
   14d54:	cmp	r3, #0
   14d58:	beq	14e9c <__assert_fail@plt+0x3518>
   14d5c:	movw	r3, #21846	; 0x5556
   14d60:	movt	r3, #21845	; 0x5555
   14d64:	ldr	r1, [sp, #44]	; 0x2c
   14d68:	movw	r8, #37940	; 0x9434
   14d6c:	smull	lr, r3, r3, fp
   14d70:	ldr	r0, [sp, #120]	; 0x78
   14d74:	str	r1, [sp, #112]	; 0x70
   14d78:	movt	r8, #2
   14d7c:	sub	fp, r3, fp, asr #31
   14d80:	bl	117e0 <strlen@plt>
   14d84:	ldr	r2, [sp, #36]	; 0x24
   14d88:	ldr	r1, [sp, #44]	; 0x2c
   14d8c:	add	r3, r2, #2
   14d90:	rsb	r2, r0, fp
   14d94:	ldr	r0, [r4]
   14d98:	add	r2, r3, r2, lsr #1
   14d9c:	str	r2, [sp, #116]	; 0x74
   14da0:	bl	11930 <wmove@plt>
   14da4:	ldr	r0, [r4]
   14da8:	ldr	r1, [sp, #120]	; 0x78
   14dac:	mvn	r2, #0
   14db0:	bl	11648 <waddnstr@plt>
   14db4:	ldr	r0, [sp, #144]	; 0x90
   14db8:	cmp	r0, #0
   14dbc:	beq	14e00 <__assert_fail@plt+0x347c>
   14dc0:	ldr	r3, [sp, #44]	; 0x2c
   14dc4:	str	r3, [sp, #136]	; 0x88
   14dc8:	bl	117e0 <strlen@plt>
   14dcc:	ldr	r3, [sp, #56]	; 0x38
   14dd0:	ldr	r1, [sp, #44]	; 0x2c
   14dd4:	add	r2, r3, r3, lsr #31
   14dd8:	ldr	r3, [sp, #36]	; 0x24
   14ddc:	add	r2, r3, r2, asr #1
   14de0:	sub	r2, r2, r0, lsr #1
   14de4:	ldr	r0, [r8]
   14de8:	str	r2, [sp, #140]	; 0x8c
   14dec:	bl	11930 <wmove@plt>
   14df0:	ldr	r0, [r8]
   14df4:	mvn	r2, #0
   14df8:	ldr	r1, [sp, #144]	; 0x90
   14dfc:	bl	11648 <waddnstr@plt>
   14e00:	ldr	r0, [sp, #132]	; 0x84
   14e04:	cmp	r0, #0
   14e08:	moveq	r8, r0
   14e0c:	beq	13eac <__assert_fail@plt+0x2528>
   14e10:	ldr	r3, [sp, #44]	; 0x2c
   14e14:	mov	r8, #0
   14e18:	str	r3, [sp, #124]	; 0x7c
   14e1c:	bl	117e0 <strlen@plt>
   14e20:	ldr	r3, [sp, #64]	; 0x40
   14e24:	ldr	r1, [sp, #44]	; 0x2c
   14e28:	sub	r2, r3, #2
   14e2c:	add	fp, r0, fp
   14e30:	ldr	r0, [r4]
   14e34:	sub	r2, r2, fp, lsr #1
   14e38:	str	r2, [sp, #128]	; 0x80
   14e3c:	bl	11930 <wmove@plt>
   14e40:	ldr	r0, [r4]
   14e44:	ldr	r1, [sp, #132]	; 0x84
   14e48:	mvn	r2, #0
   14e4c:	bl	11648 <waddnstr@plt>
   14e50:	b	13eac <__assert_fail@plt+0x2528>
   14e54:	ldr	r2, [r4]
   14e58:	cmp	r2, #0
   14e5c:	movne	lr, #65536	; 0x10000
   14e60:	strne	lr, [r2, #16]
   14e64:	b	14b10 <__assert_fail@plt+0x318c>
   14e68:	ldr	r0, [r4]
   14e6c:	cmp	r0, #0
   14e70:	strne	sl, [r0, #16]
   14e74:	b	14bcc <__assert_fail@plt+0x3248>
   14e78:	ldr	r2, [sp, #16]
   14e7c:	b	14514 <__assert_fail@plt+0x2b90>
   14e80:	bl	11804 <__errno_location@plt>
   14e84:	mvn	r4, #0
   14e88:	mov	r3, #25
   14e8c:	str	r3, [r0]
   14e90:	b	14114 <__assert_fail@plt+0x2790>
   14e94:	ldr	fp, [sp, #12]
   14e98:	b	1454c <__assert_fail@plt+0x2bc8>
   14e9c:	ldr	r8, [sp, #144]	; 0x90
   14ea0:	cmp	r8, #0
   14ea4:	bne	14d5c <__assert_fail@plt+0x33d8>
   14ea8:	ldr	r3, [sp, #44]	; 0x2c
   14eac:	ldr	r0, [sp, #120]	; 0x78
   14eb0:	str	r3, [sp, #112]	; 0x70
   14eb4:	bl	117e0 <strlen@plt>
   14eb8:	ldr	r3, [sp, #56]	; 0x38
   14ebc:	ldr	r1, [sp, #44]	; 0x2c
   14ec0:	add	r2, r3, r3, lsr #31
   14ec4:	ldr	r3, [sp, #36]	; 0x24
   14ec8:	add	r2, r3, r2, asr #1
   14ecc:	sub	r2, r2, r0, lsr #1
   14ed0:	ldr	r0, [r9]
   14ed4:	str	r2, [sp, #116]	; 0x74
   14ed8:	bl	11930 <wmove@plt>
   14edc:	ldr	r0, [r9]
   14ee0:	mvn	r2, #0
   14ee4:	ldr	r1, [sp, #120]	; 0x78
   14ee8:	bl	11648 <waddnstr@plt>
   14eec:	b	13eac <__assert_fail@plt+0x2528>
   14ef0:	bl	11804 <__errno_location@plt>
   14ef4:	mvn	r4, #0
   14ef8:	ldr	r8, [r0]
   14efc:	mov	r6, r0
   14f00:	ldr	r0, [sp, #20]
   14f04:	bl	11888 <fclose@plt>
   14f08:	str	r8, [r6]
   14f0c:	b	14114 <__assert_fail@plt+0x2790>
   14f10:	bl	11690 <__stack_chk_fail@plt>
   14f14:	movw	r0, #32888	; 0x8078
   14f18:	movw	r1, #32900	; 0x8084
   14f1c:	movt	r0, #1
   14f20:	movt	r1, #1
   14f24:	movw	r2, #657	; 0x291
   14f28:	ldr	r3, [pc]	; 14f30 <__assert_fail@plt+0x35ac>
   14f2c:	bl	11984 <__assert_fail@plt>
   14f30:	andeq	r8, r1, r0, asr r0
   14f34:	movw	r3, #37392	; 0x9210
   14f38:	movt	r3, #2
   14f3c:	stm	r3, {r0, r1, r2}
   14f40:	bx	lr
   14f44:	push	{r3, lr}
   14f48:	movw	r3, #37392	; 0x9210
   14f4c:	movt	r3, #2
   14f50:	ldr	r3, [r3]
   14f54:	blx	r3
   14f58:	pop	{r3, pc}
   14f5c:	push	{r3, lr}
   14f60:	movw	r3, #37392	; 0x9210
   14f64:	movt	r3, #2
   14f68:	ldr	r3, [r3, #4]
   14f6c:	blx	r3
   14f70:	pop	{r3, pc}
   14f74:	push	{r3, r4, r5, lr}
   14f78:	movw	r3, #37392	; 0x9210
   14f7c:	mul	r4, r1, r0
   14f80:	movt	r3, #2
   14f84:	ldr	r3, [r3]
   14f88:	mov	r0, r4
   14f8c:	blx	r3
   14f90:	subs	r5, r0, #0
   14f94:	beq	14fa4 <__assert_fail@plt+0x3620>
   14f98:	mov	r2, r4
   14f9c:	mov	r1, #0
   14fa0:	bl	11840 <memset@plt>
   14fa4:	mov	r0, r5
   14fa8:	pop	{r3, r4, r5, pc}
   14fac:	cmp	r0, #0
   14fb0:	push	{r3, lr}
   14fb4:	popeq	{r3, pc}
   14fb8:	movw	r3, #37392	; 0x9210
   14fbc:	movt	r3, #2
   14fc0:	ldr	r3, [r3, #8]
   14fc4:	blx	r3
   14fc8:	pop	{r3, pc}
   14fcc:	mov	r3, r0
   14fd0:	str	r2, [r0, #4]
   14fd4:	mov	r0, r1
   14fd8:	str	r1, [r3]
   14fdc:	bx	lr
   14fe0:	cmp	r0, #0
   14fe4:	strne	r1, [r0, #32]
   14fe8:	bx	lr
   14fec:	cmp	r0, #0
   14ff0:	ldrne	r0, [r0, #32]
   14ff4:	bx	lr
   14ff8:	push	{r3, r4, r5, lr}
   14ffc:	subs	r4, r0, #0
   15000:	mov	r5, r1
   15004:	popeq	{r3, r4, r5, pc}
   15008:	ldr	r0, [r4, #36]	; 0x24
   1500c:	cmp	r0, #0
   15010:	beq	15018 <__assert_fail@plt+0x3694>
   15014:	bl	115d0 <fflush@plt>
   15018:	str	r5, [r4, #36]	; 0x24
   1501c:	pop	{r3, r4, r5, pc}
   15020:	cmp	r0, #0
   15024:	movne	r3, #1
   15028:	strne	r3, [r0, #12]
   1502c:	bx	lr
   15030:	cmp	r0, #0
   15034:	movne	r3, #0
   15038:	strne	r3, [r0, #12]
   1503c:	bx	lr
   15040:	cmp	r2, #0
   15044:	mov	ip, r2
   15048:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1504c:	mov	r9, r2
   15050:	mov	r8, r0
   15054:	mov	r5, r1
   15058:	ldrb	r3, [r1]
   1505c:	beq	15094 <__assert_fail@plt+0x3710>
   15060:	sub	r2, r3, #127	; 0x7f
   15064:	cmp	r3, #31
   15068:	cmphi	r2, #33	; 0x21
   1506c:	bls	1509c <__assert_fail@plt+0x3718>
   15070:	mov	r6, r1
   15074:	b	1508c <__assert_fail@plt+0x3708>
   15078:	ldrb	r4, [r6, #1]!
   1507c:	sub	r7, r4, #127	; 0x7f
   15080:	cmp	r4, #31
   15084:	cmphi	r7, #33	; 0x21
   15088:	bls	1509c <__assert_fail@plt+0x3718>
   1508c:	subs	ip, ip, #1
   15090:	bne	15078 <__assert_fail@plt+0x36f4>
   15094:	cmp	r3, #91	; 0x5b
   15098:	bne	150f0 <__assert_fail@plt+0x376c>
   1509c:	mov	r0, #91	; 0x5b
   150a0:	mov	r1, r8
   150a4:	bl	11720 <_IO_putc@plt>
   150a8:	cmp	r9, #0
   150ac:	addne	r4, r5, r9
   150b0:	beq	150d4 <__assert_fail@plt+0x3750>
   150b4:	ldrb	r3, [r5], #1
   150b8:	movw	r2, #32920	; 0x8098
   150bc:	mov	r0, r8
   150c0:	movt	r2, #1
   150c4:	mov	r1, #1
   150c8:	bl	1187c <__fprintf_chk@plt>
   150cc:	cmp	r5, r4
   150d0:	bne	150b4 <__assert_fail@plt+0x3730>
   150d4:	mov	r1, r8
   150d8:	mov	r0, #32
   150dc:	bl	11720 <_IO_putc@plt>
   150e0:	mov	r1, r8
   150e4:	mov	r0, #93	; 0x5d
   150e8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   150ec:	b	11720 <_IO_putc@plt>
   150f0:	mov	r0, r5
   150f4:	mov	r1, r9
   150f8:	mov	r3, r8
   150fc:	mov	r2, #1
   15100:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15104:	b	1172c <fwrite@plt>
   15108:	push	{r3, r4, r5, lr}
   1510c:	mov	r4, r0
   15110:	ldrb	r0, [r0]
   15114:	movw	r3, #37928	; 0x9428
   15118:	movt	r3, #2
   1511c:	cmp	r0, #0
   15120:	ldr	r5, [r3]
   15124:	popeq	{r3, r4, r5, pc}
   15128:	add	r4, r4, #1
   1512c:	b	15188 <__assert_fail@plt+0x3804>
   15130:	mov	r0, #92	; 0x5c
   15134:	mov	r1, r5
   15138:	bl	11720 <_IO_putc@plt>
   1513c:	ldrb	r3, [r4, #-1]
   15140:	cmp	r3, #10
   15144:	beq	151c8 <__assert_fail@plt+0x3844>
   15148:	cmp	r3, #13
   1514c:	beq	151d8 <__assert_fail@plt+0x3854>
   15150:	cmp	r3, #12
   15154:	beq	151e8 <__assert_fail@plt+0x3864>
   15158:	cmp	r3, #11
   1515c:	beq	151f8 <__assert_fail@plt+0x3874>
   15160:	cmp	r3, #8
   15164:	beq	15208 <__assert_fail@plt+0x3884>
   15168:	cmp	r3, #0
   1516c:	bne	151b0 <__assert_fail@plt+0x382c>
   15170:	mov	r0, #48	; 0x30
   15174:	mov	r1, r5
   15178:	bl	11720 <_IO_putc@plt>
   1517c:	ldrb	r0, [r4], #1
   15180:	cmp	r0, #0
   15184:	beq	151ac <__assert_fail@plt+0x3828>
   15188:	sub	r3, r0, #127	; 0x7f
   1518c:	cmp	r0, #31
   15190:	cmphi	r3, #33	; 0x21
   15194:	bls	15130 <__assert_fail@plt+0x37ac>
   15198:	mov	r1, r5
   1519c:	bl	11720 <_IO_putc@plt>
   151a0:	ldrb	r0, [r4], #1
   151a4:	cmp	r0, #0
   151a8:	bne	15188 <__assert_fail@plt+0x3804>
   151ac:	pop	{r3, r4, r5, pc}
   151b0:	movw	r2, #32928	; 0x80a0
   151b4:	mov	r0, r5
   151b8:	movt	r2, #1
   151bc:	mov	r1, #1
   151c0:	bl	1187c <__fprintf_chk@plt>
   151c4:	b	1517c <__assert_fail@plt+0x37f8>
   151c8:	mov	r1, r5
   151cc:	mov	r0, #110	; 0x6e
   151d0:	bl	11720 <_IO_putc@plt>
   151d4:	b	1517c <__assert_fail@plt+0x37f8>
   151d8:	mov	r1, r5
   151dc:	mov	r0, #114	; 0x72
   151e0:	bl	11720 <_IO_putc@plt>
   151e4:	b	1517c <__assert_fail@plt+0x37f8>
   151e8:	mov	r1, r5
   151ec:	mov	r0, #102	; 0x66
   151f0:	bl	11720 <_IO_putc@plt>
   151f4:	b	1517c <__assert_fail@plt+0x37f8>
   151f8:	mov	r1, r5
   151fc:	mov	r0, #118	; 0x76
   15200:	bl	11720 <_IO_putc@plt>
   15204:	b	1517c <__assert_fail@plt+0x37f8>
   15208:	mov	r1, r5
   1520c:	mov	r0, #98	; 0x62
   15210:	bl	11720 <_IO_putc@plt>
   15214:	b	1517c <__assert_fail@plt+0x37f8>
   15218:	movw	r3, #262	; 0x106
   1521c:	movt	r3, #1280	; 0x500
   15220:	cmp	r0, r3
   15224:	push	{lr}		; (str lr, [sp, #-4]!)
   15228:	sub	sp, sp, #12
   1522c:	beq	154d0 <__assert_fail@plt+0x3b4c>
   15230:	bhi	152a4 <__assert_fail@plt+0x3920>
   15234:	mov	r3, #166	; 0xa6
   15238:	movt	r3, #1280	; 0x500
   1523c:	cmp	r0, r3
   15240:	beq	154dc <__assert_fail@plt+0x3b58>
   15244:	bhi	152f0 <__assert_fail@plt+0x396c>
   15248:	mov	r3, #69	; 0x45
   1524c:	movt	r3, #1280	; 0x500
   15250:	cmp	r0, r3
   15254:	beq	1547c <__assert_fail@plt+0x3af8>
   15258:	bls	153b4 <__assert_fail@plt+0x3a30>
   1525c:	mov	r3, #99	; 0x63
   15260:	movt	r3, #1280	; 0x500
   15264:	cmp	r0, r3
   15268:	beq	154a0 <__assert_fail@plt+0x3b1c>
   1526c:	mov	r3, #114	; 0x72
   15270:	movt	r3, #1280	; 0x500
   15274:	cmp	r0, r3
   15278:	movweq	r0, #33352	; 0x8248
   1527c:	movteq	r0, #1
   15280:	beq	1529c <__assert_fail@plt+0x3918>
   15284:	mov	r3, #80	; 0x50
   15288:	movt	r3, #1280	; 0x500
   1528c:	cmp	r0, r3
   15290:	bne	15444 <__assert_fail@plt+0x3ac0>
   15294:	movw	r0, #33204	; 0x81b4
   15298:	movt	r0, #1
   1529c:	add	sp, sp, #12
   152a0:	pop	{pc}		; (ldr pc, [sp], #4)
   152a4:	movw	r3, #269	; 0x10d
   152a8:	movt	r3, #1280	; 0x500
   152ac:	cmp	r0, r3
   152b0:	beq	154e8 <__assert_fail@plt+0x3b64>
   152b4:	bhi	15328 <__assert_fail@plt+0x39a4>
   152b8:	movw	r3, #265	; 0x109
   152bc:	movt	r3, #1280	; 0x500
   152c0:	cmp	r0, r3
   152c4:	beq	15470 <__assert_fail@plt+0x3aec>
   152c8:	bls	153e0 <__assert_fail@plt+0x3a5c>
   152cc:	movw	r3, #267	; 0x10b
   152d0:	movt	r3, #1280	; 0x500
   152d4:	cmp	r0, r3
   152d8:	beq	154ac <__assert_fail@plt+0x3b28>
   152dc:	movwls	r0, #33136	; 0x8170
   152e0:	movtls	r0, #1
   152e4:	movwhi	r0, #33064	; 0x8128
   152e8:	movthi	r0, #1
   152ec:	b	1529c <__assert_fail@plt+0x3918>
   152f0:	movw	r3, #258	; 0x102
   152f4:	movt	r3, #1280	; 0x500
   152f8:	cmp	r0, r3
   152fc:	beq	15494 <__assert_fail@plt+0x3b10>
   15300:	bls	15380 <__assert_fail@plt+0x39fc>
   15304:	mov	r3, #260	; 0x104
   15308:	movt	r3, #1280	; 0x500
   1530c:	cmp	r0, r3
   15310:	beq	154c4 <__assert_fail@plt+0x3b40>
   15314:	movwls	r0, #33156	; 0x8184
   15318:	movtls	r0, #1
   1531c:	movwhi	r0, #32976	; 0x80d0
   15320:	movthi	r0, #1
   15324:	b	1529c <__assert_fail@plt+0x3918>
   15328:	movw	r3, #275	; 0x113
   1532c:	movt	r3, #1280	; 0x500
   15330:	cmp	r0, r3
   15334:	beq	15488 <__assert_fail@plt+0x3b04>
   15338:	bls	15414 <__assert_fail@plt+0x3a90>
   1533c:	mov	r3, #280	; 0x118
   15340:	movt	r3, #1280	; 0x500
   15344:	cmp	r0, r3
   15348:	beq	154b8 <__assert_fail@plt+0x3b34>
   1534c:	movw	r3, #32854	; 0x8056
   15350:	movt	r3, #1280	; 0x500
   15354:	cmp	r0, r3
   15358:	movweq	r0, #32964	; 0x80c4
   1535c:	movteq	r0, #1
   15360:	beq	1529c <__assert_fail@plt+0x3918>
   15364:	mov	r3, #276	; 0x114
   15368:	movt	r3, #1280	; 0x500
   1536c:	cmp	r0, r3
   15370:	bne	15444 <__assert_fail@plt+0x3ac0>
   15374:	movw	r0, #33236	; 0x81d4
   15378:	movt	r0, #1
   1537c:	b	1529c <__assert_fail@plt+0x3918>
   15380:	mov	r3, #174	; 0xae
   15384:	movt	r3, #1280	; 0x500
   15388:	cmp	r0, r3
   1538c:	movweq	r0, #33320	; 0x8228
   15390:	movteq	r0, #1
   15394:	beq	1529c <__assert_fail@plt+0x3918>
   15398:	movw	r3, #257	; 0x101
   1539c:	movt	r3, #1280	; 0x500
   153a0:	cmp	r0, r3
   153a4:	movweq	r0, #32948	; 0x80b4
   153a8:	movteq	r0, #1
   153ac:	beq	1529c <__assert_fail@plt+0x3918>
   153b0:	b	15444 <__assert_fail@plt+0x3ac0>
   153b4:	cmp	r0, #0
   153b8:	movweq	r0, #32936	; 0x80a8
   153bc:	movteq	r0, #1
   153c0:	beq	1529c <__assert_fail@plt+0x3918>
   153c4:	mov	r3, #62	; 0x3e
   153c8:	movt	r3, #1280	; 0x500
   153cc:	cmp	r0, r3
   153d0:	movweq	r0, #32992	; 0x80e0
   153d4:	movteq	r0, #1
   153d8:	beq	1529c <__assert_fail@plt+0x3918>
   153dc:	b	15444 <__assert_fail@plt+0x3ac0>
   153e0:	movw	r3, #263	; 0x107
   153e4:	movt	r3, #1280	; 0x500
   153e8:	cmp	r0, r3
   153ec:	movweq	r0, #33272	; 0x81f8
   153f0:	movteq	r0, #1
   153f4:	beq	1529c <__assert_fail@plt+0x3918>
   153f8:	mov	r3, #264	; 0x108
   153fc:	movt	r3, #1280	; 0x500
   15400:	cmp	r0, r3
   15404:	movweq	r0, #33080	; 0x8138
   15408:	movteq	r0, #1
   1540c:	beq	1529c <__assert_fail@plt+0x3918>
   15410:	b	15444 <__assert_fail@plt+0x3ac0>
   15414:	movw	r3, #270	; 0x10e
   15418:	movt	r3, #1280	; 0x500
   1541c:	cmp	r0, r3
   15420:	movweq	r0, #33000	; 0x80e8
   15424:	movteq	r0, #1
   15428:	beq	1529c <__assert_fail@plt+0x3918>
   1542c:	movw	r3, #271	; 0x10f
   15430:	movt	r3, #1280	; 0x500
   15434:	cmp	r0, r3
   15438:	movweq	r0, #33012	; 0x80f4
   1543c:	movteq	r0, #1
   15440:	beq	1529c <__assert_fail@plt+0x3918>
   15444:	str	r0, [sp]
   15448:	movw	r3, #33368	; 0x8258
   1544c:	movw	r0, #38016	; 0x9480
   15450:	movt	r3, #1
   15454:	movt	r0, #2
   15458:	mov	r1, #1
   1545c:	mov	r2, #25
   15460:	bl	1181c <__sprintf_chk@plt>
   15464:	movw	r0, #38016	; 0x9480
   15468:	movt	r0, #2
   1546c:	b	1529c <__assert_fail@plt+0x3918>
   15470:	movw	r0, #33116	; 0x815c
   15474:	movt	r0, #1
   15478:	b	1529c <__assert_fail@plt+0x3918>
   1547c:	movw	r0, #33188	; 0x81a4
   15480:	movt	r0, #1
   15484:	b	1529c <__assert_fail@plt+0x3918>
   15488:	movw	r0, #33220	; 0x81c4
   1548c:	movt	r0, #1
   15490:	b	1529c <__assert_fail@plt+0x3918>
   15494:	movw	r0, #33172	; 0x8194
   15498:	movt	r0, #1
   1549c:	b	1529c <__assert_fail@plt+0x3918>
   154a0:	movw	r0, #33308	; 0x821c
   154a4:	movt	r0, #1
   154a8:	b	1529c <__assert_fail@plt+0x3918>
   154ac:	movw	r0, #33048	; 0x8118
   154b0:	movt	r0, #1
   154b4:	b	1529c <__assert_fail@plt+0x3918>
   154b8:	movw	r0, #33252	; 0x81e4
   154bc:	movt	r0, #1
   154c0:	b	1529c <__assert_fail@plt+0x3918>
   154c4:	movw	r0, #33096	; 0x8148
   154c8:	movt	r0, #1
   154cc:	b	1529c <__assert_fail@plt+0x3918>
   154d0:	movw	r0, #33288	; 0x8208
   154d4:	movt	r0, #1
   154d8:	b	1529c <__assert_fail@plt+0x3918>
   154dc:	movw	r0, #33336	; 0x8238
   154e0:	movt	r0, #1
   154e4:	b	1529c <__assert_fail@plt+0x3918>
   154e8:	movw	r0, #33024	; 0x8100
   154ec:	movt	r0, #1
   154f0:	b	1529c <__assert_fail@plt+0x3918>
   154f4:	push	{r4, r5, r7, r8, r9, sl, fp, lr}
   154f8:	subs	fp, r2, #0
   154fc:	ldr	sl, [sp, #32]
   15500:	mov	r8, r3
   15504:	mov	r9, r0
   15508:	mov	r3, #0
   1550c:	mov	r7, r1
   15510:	str	r3, [sl]
   15514:	str	r3, [r8]
   15518:	beq	15570 <__assert_fail@plt+0x3bec>
   1551c:	mov	r0, r9
   15520:	mov	r1, r7
   15524:	mov	r2, fp
   15528:	bl	115c4 <read@plt>
   1552c:	cmp	r0, #0
   15530:	blt	15578 <__assert_fail@plt+0x3bf4>
   15534:	beq	15590 <__assert_fail@plt+0x3c0c>
   15538:	ldr	r3, [r8]
   1553c:	sub	r4, r7, #1
   15540:	mov	ip, r0
   15544:	add	r3, r3, r0
   15548:	str	r3, [r8]
   1554c:	ldrb	r5, [r4, #1]!
   15550:	cmp	r5, #10
   15554:	beq	15570 <__assert_fail@plt+0x3bec>
   15558:	subs	ip, ip, #1
   1555c:	bne	1554c <__assert_fail@plt+0x3bc8>
   15560:	rsb	fp, r0, fp
   15564:	add	r7, r7, r0
   15568:	cmp	fp, #0
   1556c:	bne	1551c <__assert_fail@plt+0x3b98>
   15570:	mov	r0, #0
   15574:	pop	{r4, r5, r7, r8, r9, sl, fp, pc}
   15578:	bl	11804 <__errno_location@plt>
   1557c:	ldr	r3, [r0]
   15580:	cmp	r3, #4
   15584:	beq	15568 <__assert_fail@plt+0x3be4>
   15588:	mvn	r0, #0
   1558c:	pop	{r4, r5, r7, r8, r9, sl, fp, pc}
   15590:	mov	r3, #1
   15594:	str	r3, [sl]
   15598:	pop	{r4, r5, r7, r8, r9, sl, fp, pc}
   1559c:	push	{r4, r5, r6, lr}
   155a0:	subs	r4, r2, #0
   155a4:	mov	r6, r0
   155a8:	mov	r5, r1
   155ac:	bne	155bc <__assert_fail@plt+0x3c38>
   155b0:	b	155f4 <__assert_fail@plt+0x3c70>
   155b4:	cmp	r4, #0
   155b8:	beq	155f4 <__assert_fail@plt+0x3c70>
   155bc:	mov	r1, r5
   155c0:	mov	r2, r4
   155c4:	mov	r0, r6
   155c8:	bl	11858 <write@plt>
   155cc:	cmp	r0, #0
   155d0:	rsbge	r4, r0, r4
   155d4:	addge	r5, r5, r0
   155d8:	bge	155b4 <__assert_fail@plt+0x3c30>
   155dc:	bl	11804 <__errno_location@plt>
   155e0:	ldr	r3, [r0]
   155e4:	cmp	r3, #4
   155e8:	beq	155b4 <__assert_fail@plt+0x3c30>
   155ec:	mvn	r0, #0
   155f0:	pop	{r4, r5, r6, pc}
   155f4:	mov	r0, #0
   155f8:	pop	{r4, r5, r6, pc}
   155fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15600:	movw	r6, #37920	; 0x9420
   15604:	movt	r6, #2
   15608:	ldr	r7, [r0, #44]	; 0x2c
   1560c:	sub	sp, sp, #16
   15610:	mov	r4, r0
   15614:	ldr	r3, [r6]
   15618:	cmp	r7, #0
   1561c:	add	r8, r0, #48	; 0x30
   15620:	str	r3, [sp, #12]
   15624:	bne	15814 <__assert_fail@plt+0x3e90>
   15628:	ldr	r9, [r0, #2060]	; 0x80c
   1562c:	cmp	r9, #0
   15630:	bne	156b8 <__assert_fail@plt+0x3d34>
   15634:	ldr	r0, [r0, #40]	; 0x28
   15638:	add	r3, r4, #44	; 0x2c
   1563c:	mov	r1, r8
   15640:	str	r3, [sp]
   15644:	movw	r2, #1002	; 0x3ea
   15648:	add	r3, sp, #8
   1564c:	bl	154f4 <__assert_fail@plt+0x3b70>
   15650:	cmp	r0, #0
   15654:	beq	15738 <__assert_fail@plt+0x3db4>
   15658:	ldr	r5, [r4, #36]	; 0x24
   1565c:	cmp	r5, #0
   15660:	beq	1581c <__assert_fail@plt+0x3e98>
   15664:	bl	11804 <__errno_location@plt>
   15668:	movw	r7, #270	; 0x10e
   1566c:	movt	r7, #1280	; 0x500
   15670:	ldr	r0, [r0]
   15674:	bl	11780 <strerror@plt>
   15678:	movw	r2, #33428	; 0x8294
   1567c:	movw	r3, #34200	; 0x8598
   15680:	str	r4, [sp]
   15684:	movt	r2, #1
   15688:	movt	r3, #1
   1568c:	mov	r1, #1
   15690:	str	r0, [sp, #4]
   15694:	mov	r0, r5
   15698:	bl	1187c <__fprintf_chk@plt>
   1569c:	ldr	r2, [sp, #12]
   156a0:	mov	r0, r7
   156a4:	ldr	r3, [r6]
   156a8:	cmp	r2, r3
   156ac:	bne	1592c <__assert_fail@plt+0x3fa8>
   156b0:	add	sp, sp, #16
   156b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   156b8:	add	r1, r4, #1056	; 0x420
   156bc:	mov	r0, r8
   156c0:	mov	r2, r9
   156c4:	bl	1163c <memcpy@plt>
   156c8:	cmp	r9, #0
   156cc:	str	r7, [r4, #2060]	; 0x80c
   156d0:	addle	r1, r9, r8
   156d4:	ble	15714 <__assert_fail@plt+0x3d90>
   156d8:	ldrb	r2, [r4, #48]	; 0x30
   156dc:	cmp	r2, #10
   156e0:	beq	15780 <__assert_fail@plt+0x3dfc>
   156e4:	add	r1, r9, r8
   156e8:	mov	r3, r8
   156ec:	sub	r5, r1, #1
   156f0:	b	15700 <__assert_fail@plt+0x3d7c>
   156f4:	ldrb	ip, [r3, #1]!
   156f8:	cmp	ip, #10
   156fc:	beq	15780 <__assert_fail@plt+0x3dfc>
   15700:	cmp	r3, r5
   15704:	bne	156f4 <__assert_fail@plt+0x3d70>
   15708:	movw	r3, #1001	; 0x3e9
   1570c:	cmp	r9, r3
   15710:	bgt	15950 <__assert_fail@plt+0x3fcc>
   15714:	rsb	r2, r9, #1000	; 0x3e8
   15718:	ldr	r0, [r4, #40]	; 0x28
   1571c:	add	ip, r4, #44	; 0x2c
   15720:	add	r2, r2, #2
   15724:	add	r3, sp, #8
   15728:	str	ip, [sp]
   1572c:	bl	154f4 <__assert_fail@plt+0x3b70>
   15730:	cmp	r0, #0
   15734:	bne	15658 <__assert_fail@plt+0x3cd4>
   15738:	ldr	r3, [sp, #8]
   1573c:	cmp	r3, #0
   15740:	bne	15910 <__assert_fail@plt+0x3f8c>
   15744:	ldr	r3, [r4, #44]	; 0x2c
   15748:	cmp	r3, #0
   1574c:	beq	15930 <__assert_fail@plt+0x3fac>
   15750:	ldr	r0, [r4, #36]	; 0x24
   15754:	cmp	r0, #0
   15758:	beq	15814 <__assert_fail@plt+0x3e90>
   1575c:	str	r4, [sp]
   15760:	movw	r2, #33472	; 0x82c0
   15764:	movw	r3, #34200	; 0x8598
   15768:	movt	r2, #1
   1576c:	movt	r3, #1
   15770:	mov	r1, #1
   15774:	mvn	r7, #0
   15778:	bl	1187c <__fprintf_chk@plt>
   1577c:	b	1569c <__assert_fail@plt+0x3d18>
   15780:	mov	r3, #0
   15784:	str	r9, [sp, #8]
   15788:	str	r3, [r4, #2064]	; 0x810
   1578c:	cmp	r2, #10
   15790:	movne	ip, r8
   15794:	movne	r3, #0
   15798:	bne	157b0 <__assert_fail@plt+0x3e2c>
   1579c:	b	15900 <__assert_fail@plt+0x3f7c>
   157a0:	ldrb	r1, [ip, #1]!
   157a4:	mov	r2, r3
   157a8:	cmp	r1, #10
   157ac:	beq	15828 <__assert_fail@plt+0x3ea4>
   157b0:	add	r3, r3, #1
   157b4:	cmp	r3, r9
   157b8:	bne	157a0 <__assert_fail@plt+0x3e1c>
   157bc:	ldr	r0, [r4, #36]	; 0x24
   157c0:	cmp	r0, #0
   157c4:	beq	157e4 <__assert_fail@plt+0x3e60>
   157c8:	movw	r2, #33536	; 0x8300
   157cc:	movw	r3, #34200	; 0x8598
   157d0:	str	r4, [sp]
   157d4:	movt	r2, #1
   157d8:	movt	r3, #1
   157dc:	mov	r1, #1
   157e0:	bl	1187c <__fprintf_chk@plt>
   157e4:	ldr	r7, [r4, #44]	; 0x2c
   157e8:	mov	r3, #0
   157ec:	movw	r1, #263	; 0x107
   157f0:	movw	r2, #262	; 0x106
   157f4:	cmp	r7, r3
   157f8:	movt	r1, #1280	; 0x500
   157fc:	movt	r2, #1280	; 0x500
   15800:	strb	r3, [r4, #48]	; 0x30
   15804:	moveq	r7, r1
   15808:	str	r3, [r4, #1052]	; 0x41c
   1580c:	movne	r7, r2
   15810:	b	1569c <__assert_fail@plt+0x3d18>
   15814:	mvn	r7, #0
   15818:	b	1569c <__assert_fail@plt+0x3d18>
   1581c:	movw	r7, #270	; 0x10e
   15820:	movt	r7, #1280	; 0x500
   15824:	b	1569c <__assert_fail@plt+0x3d18>
   15828:	add	r1, r3, #1
   1582c:	cmp	r1, r9
   15830:	bge	1586c <__assert_fail@plt+0x3ee8>
   15834:	subs	r9, r9, r1
   15838:	add	r0, r4, #1056	; 0x420
   1583c:	add	ip, r8, r1
   15840:	addne	r5, r0, r9
   15844:	movne	sl, #1
   15848:	beq	15868 <__assert_fail@plt+0x3ee4>
   1584c:	ldrb	r1, [ip], #1
   15850:	cmp	r1, #10
   15854:	streq	sl, [r4, #2064]	; 0x810
   15858:	ldrbeq	r1, [ip, #-1]
   1585c:	strb	r1, [r0], #1
   15860:	cmp	r0, r5
   15864:	bne	1584c <__assert_fail@plt+0x3ec8>
   15868:	str	r9, [r4, #2060]	; 0x80c
   1586c:	cmp	r3, #0
   15870:	beq	15884 <__assert_fail@plt+0x3f00>
   15874:	add	r2, r8, r2
   15878:	ldrb	r2, [r2, #-1]
   1587c:	cmp	r2, #13
   15880:	subeq	r3, r3, #1
   15884:	mov	r2, #0
   15888:	strb	r2, [r8, r3]
   1588c:	ldr	r0, [r4, #36]	; 0x24
   15890:	str	r3, [r4, #1052]	; 0x41c
   15894:	cmp	r0, r2
   15898:	beq	1569c <__assert_fail@plt+0x3d18>
   1589c:	str	r4, [sp]
   158a0:	movw	r2, #33492	; 0x82d4
   158a4:	movw	r3, #34200	; 0x8598
   158a8:	movt	r2, #1
   158ac:	movt	r3, #1
   158b0:	mov	r1, #1
   158b4:	bl	1187c <__fprintf_chk@plt>
   158b8:	ldr	r3, [r4, #12]
   158bc:	cmp	r3, #0
   158c0:	bne	158e4 <__assert_fail@plt+0x3f60>
   158c4:	mov	r1, r8
   158c8:	ldr	r0, [r4, #36]	; 0x24
   158cc:	ldr	r2, [r4, #1052]	; 0x41c
   158d0:	bl	15040 <__assert_fail@plt+0x36bc>
   158d4:	ldr	r1, [r4, #36]	; 0x24
   158d8:	mov	r0, #10
   158dc:	bl	11720 <_IO_putc@plt>
   158e0:	b	1569c <__assert_fail@plt+0x3d18>
   158e4:	movw	r0, #33504	; 0x82e0
   158e8:	mov	r1, #1
   158ec:	mov	r2, #29
   158f0:	ldr	r3, [r4, #36]	; 0x24
   158f4:	movt	r0, #1
   158f8:	bl	1172c <fwrite@plt>
   158fc:	b	158d4 <__assert_fail@plt+0x3f50>
   15900:	mov	r2, #0
   15904:	mov	r1, #1
   15908:	mov	r3, r2
   1590c:	b	1582c <__assert_fail@plt+0x3ea8>
   15910:	add	r9, r9, r3
   15914:	str	r0, [r4, #2064]	; 0x810
   15918:	cmp	r9, #0
   1591c:	str	r9, [sp, #8]
   15920:	ble	157bc <__assert_fail@plt+0x3e38>
   15924:	ldrb	r2, [r4, #48]	; 0x30
   15928:	b	1578c <__assert_fail@plt+0x3e08>
   1592c:	bl	11690 <__stack_chk_fail@plt>
   15930:	movw	r0, #33452	; 0x82ac
   15934:	movw	r1, #33412	; 0x8284
   15938:	movw	r3, #33376	; 0x8260
   1593c:	movt	r0, #1
   15940:	movt	r1, #1
   15944:	mov	r2, #189	; 0xbd
   15948:	movt	r3, #1
   1594c:	bl	11984 <__assert_fail@plt>
   15950:	movw	r0, #33396	; 0x8274
   15954:	movw	r1, #33412	; 0x8284
   15958:	movw	r3, #33376	; 0x8260
   1595c:	movt	r0, #1
   15960:	movt	r1, #1
   15964:	mov	r2, #172	; 0xac
   15968:	movt	r3, #1
   1596c:	bl	11984 <__assert_fail@plt>
   15970:	push	{r4, r5, r6, lr}
   15974:	subs	r4, r0, #0
   15978:	mov	r5, r1
   1597c:	mov	r6, r2
   15980:	beq	1599c <__assert_fail@plt+0x4018>
   15984:	bl	155fc <__assert_fail@plt+0x3c78>
   15988:	ldr	r3, [r4, #1052]	; 0x41c
   1598c:	add	r4, r4, #48	; 0x30
   15990:	str	r4, [r5]
   15994:	str	r3, [r6]
   15998:	pop	{r4, r5, r6, pc}
   1599c:	movw	r0, #261	; 0x105
   159a0:	movt	r0, #1280	; 0x500
   159a4:	pop	{r4, r5, r6, pc}
   159a8:	cmp	r0, #0
   159ac:	bxeq	lr
   159b0:	ldr	r0, [r0, #2064]	; 0x810
   159b4:	adds	r0, r0, #0
   159b8:	movne	r0, #1
   159bc:	bx	lr
   159c0:	push	{r4, r5, lr}
   159c4:	subs	r4, r0, #0
   159c8:	sub	sp, sp, #12
   159cc:	mov	r5, r1
   159d0:	beq	15a9c <__assert_fail@plt+0x4118>
   159d4:	ldr	r0, [r4, #36]	; 0x24
   159d8:	cmp	r0, #0
   159dc:	beq	15a2c <__assert_fail@plt+0x40a8>
   159e0:	str	r4, [sp]
   159e4:	movw	r2, #33564	; 0x831c
   159e8:	movw	r3, #34200	; 0x8598
   159ec:	movt	r2, #1
   159f0:	movt	r3, #1
   159f4:	mov	r1, #1
   159f8:	bl	1187c <__fprintf_chk@plt>
   159fc:	ldr	r3, [r4, #12]
   15a00:	cmp	r3, #0
   15a04:	bne	15a80 <__assert_fail@plt+0x40fc>
   15a08:	mov	r0, r5
   15a0c:	bl	117e0 <strlen@plt>
   15a10:	mov	r1, r5
   15a14:	mov	r2, r0
   15a18:	ldr	r0, [r4, #36]	; 0x24
   15a1c:	bl	15040 <__assert_fail@plt+0x36bc>
   15a20:	mov	r0, #10
   15a24:	ldr	r1, [r4, #36]	; 0x24
   15a28:	bl	11720 <_IO_putc@plt>
   15a2c:	mov	r0, r5
   15a30:	bl	117e0 <strlen@plt>
   15a34:	mov	r1, r5
   15a38:	mov	r2, r0
   15a3c:	ldr	r0, [r4, #2068]	; 0x814
   15a40:	bl	1559c <__assert_fail@plt+0x3c18>
   15a44:	cmp	r0, #0
   15a48:	beq	15a5c <__assert_fail@plt+0x40d8>
   15a4c:	movw	r0, #271	; 0x10f
   15a50:	movt	r0, #1280	; 0x500
   15a54:	add	sp, sp, #12
   15a58:	pop	{r4, r5, pc}
   15a5c:	ldr	r0, [r4, #2068]	; 0x814
   15a60:	movw	r1, #33560	; 0x8318
   15a64:	mov	r2, #1
   15a68:	movt	r1, #1
   15a6c:	bl	1559c <__assert_fail@plt+0x3c18>
   15a70:	cmp	r0, #0
   15a74:	bne	15a4c <__assert_fail@plt+0x40c8>
   15a78:	add	sp, sp, #12
   15a7c:	pop	{r4, r5, pc}
   15a80:	movw	r0, #33504	; 0x82e0
   15a84:	mov	r1, #1
   15a88:	mov	r2, #29
   15a8c:	ldr	r3, [r4, #36]	; 0x24
   15a90:	movt	r0, #1
   15a94:	bl	1172c <fwrite@plt>
   15a98:	b	15a20 <__assert_fail@plt+0x409c>
   15a9c:	movw	r0, #261	; 0x105
   15aa0:	movt	r0, #1280	; 0x500
   15aa4:	add	sp, sp, #12
   15aa8:	pop	{r4, r5, pc}
   15aac:	ldr	r3, [r0, #3084]	; 0xc0c
   15ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ab4:	cmp	r3, #0
   15ab8:	sub	sp, sp, #12
   15abc:	mov	r9, r0
   15ac0:	mov	r8, r1
   15ac4:	mov	r7, r2
   15ac8:	bne	15c28 <__assert_fail@plt+0x42a4>
   15acc:	add	sl, r0, #2064	; 0x810
   15ad0:	ldr	r6, [r0, #3080]	; 0xc08
   15ad4:	cmp	r2, #0
   15ad8:	add	sl, sl, #12
   15adc:	add	r4, sl, r6
   15ae0:	beq	15c24 <__assert_fail@plt+0x42a0>
   15ae4:	cmp	r6, #0
   15ae8:	beq	15c34 <__assert_fail@plt+0x42b0>
   15aec:	movw	r3, #997	; 0x3e5
   15af0:	cmp	r6, r3
   15af4:	movhi	r3, #0
   15af8:	movls	r3, #1
   15afc:	cmp	r7, #0
   15b00:	moveq	r3, #0
   15b04:	andne	r3, r3, #1
   15b08:	cmp	r3, #0
   15b0c:	beq	15b90 <__assert_fail@plt+0x420c>
   15b10:	mov	r5, r8
   15b14:	movw	fp, #997	; 0x3e5
   15b18:	b	15b54 <__assert_fail@plt+0x41d0>
   15b1c:	cmp	ip, #10
   15b20:	beq	15b7c <__assert_fail@plt+0x41f8>
   15b24:	strb	ip, [r4]
   15b28:	add	r6, r6, #1
   15b2c:	add	r4, r4, #1
   15b30:	mov	r8, r5
   15b34:	subs	r7, r7, #1
   15b38:	moveq	r3, #0
   15b3c:	movne	r3, #1
   15b40:	cmp	r6, fp
   15b44:	movhi	r3, #0
   15b48:	andls	r3, r3, #1
   15b4c:	cmp	r3, #0
   15b50:	beq	15b90 <__assert_fail@plt+0x420c>
   15b54:	ldrb	ip, [r5], #1
   15b58:	movw	r3, #31596	; 0x7b6c
   15b5c:	mov	r0, r4
   15b60:	mov	r1, #1
   15b64:	cmp	ip, #13
   15b68:	cmpne	ip, #37	; 0x25
   15b6c:	mvn	r2, #0
   15b70:	movt	r3, #1
   15b74:	mov	r8, r5
   15b78:	bne	15b1c <__assert_fail@plt+0x4198>
   15b7c:	str	ip, [sp]
   15b80:	add	r4, r4, #3
   15b84:	bl	1181c <__sprintf_chk@plt>
   15b88:	add	r6, r6, #3
   15b8c:	b	15b34 <__assert_fail@plt+0x41b0>
   15b90:	movw	r3, #997	; 0x3e5
   15b94:	cmp	r6, r3
   15b98:	bls	15c1c <__assert_fail@plt+0x4298>
   15b9c:	ldr	r0, [r9, #36]	; 0x24
   15ba0:	cmp	r0, #0
   15ba4:	beq	15bf4 <__assert_fail@plt+0x4270>
   15ba8:	str	r9, [sp]
   15bac:	movw	r2, #33564	; 0x831c
   15bb0:	movw	r3, #34200	; 0x8598
   15bb4:	movt	r2, #1
   15bb8:	movt	r3, #1
   15bbc:	mov	r1, #1
   15bc0:	bl	1187c <__fprintf_chk@plt>
   15bc4:	ldr	r3, [r9, #12]
   15bc8:	cmp	r3, #0
   15bcc:	beq	15c58 <__assert_fail@plt+0x42d4>
   15bd0:	movw	r0, #33504	; 0x82e0
   15bd4:	mov	r1, #1
   15bd8:	movt	r0, #1
   15bdc:	mov	r2, #29
   15be0:	ldr	r3, [r9, #36]	; 0x24
   15be4:	bl	1172c <fwrite@plt>
   15be8:	mov	r0, #10
   15bec:	ldr	r1, [r9, #36]	; 0x24
   15bf0:	bl	11720 <_IO_putc@plt>
   15bf4:	mov	r3, #10
   15bf8:	add	r2, r6, #1
   15bfc:	strb	r3, [r4]
   15c00:	mov	r1, sl
   15c04:	ldr	r0, [r9, #2068]	; 0x814
   15c08:	bl	1559c <__assert_fail@plt+0x3c18>
   15c0c:	cmp	r0, #0
   15c10:	bne	15c6c <__assert_fail@plt+0x42e8>
   15c14:	mov	r6, r0
   15c18:	mov	r4, sl
   15c1c:	cmp	r7, #0
   15c20:	bne	15ae4 <__assert_fail@plt+0x4160>
   15c24:	str	r6, [r9, #3080]	; 0xc08
   15c28:	mov	r0, #0
   15c2c:	add	sp, sp, #12
   15c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c34:	mov	r2, r4
   15c38:	mov	r1, #68	; 0x44
   15c3c:	mov	r3, #1
   15c40:	strb	r1, [r2], #2
   15c44:	mov	r6, #2
   15c48:	mov	r1, #32
   15c4c:	strb	r1, [r4, #1]
   15c50:	mov	r4, r2
   15c54:	b	15afc <__assert_fail@plt+0x4178>
   15c58:	ldr	r0, [r9, #36]	; 0x24
   15c5c:	mov	r1, sl
   15c60:	mov	r2, r6
   15c64:	bl	15040 <__assert_fail@plt+0x36bc>
   15c68:	b	15be8 <__assert_fail@plt+0x4264>
   15c6c:	mov	r0, #0
   15c70:	movw	r3, #271	; 0x10f
   15c74:	movt	r3, #1280	; 0x500
   15c78:	str	r3, [r9, #3084]	; 0xc0c
   15c7c:	add	sp, sp, #12
   15c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c84:	ldr	r3, [r0, #3084]	; 0xc0c
   15c88:	push	{r4, r5, r6, lr}
   15c8c:	cmp	r3, #0
   15c90:	sub	sp, sp, #8
   15c94:	mov	r4, r0
   15c98:	bne	15d2c <__assert_fail@plt+0x43a8>
   15c9c:	ldr	r5, [r0, #3080]	; 0xc08
   15ca0:	cmp	r5, #0
   15ca4:	beq	15d2c <__assert_fail@plt+0x43a8>
   15ca8:	ldr	r0, [r0, #36]	; 0x24
   15cac:	add	r6, r4, #2064	; 0x810
   15cb0:	add	r6, r6, #12
   15cb4:	cmp	r0, #0
   15cb8:	beq	15d00 <__assert_fail@plt+0x437c>
   15cbc:	str	r4, [sp]
   15cc0:	movw	r2, #33564	; 0x831c
   15cc4:	movw	r3, #34200	; 0x8598
   15cc8:	movt	r2, #1
   15ccc:	movt	r3, #1
   15cd0:	mov	r1, #1
   15cd4:	bl	1187c <__fprintf_chk@plt>
   15cd8:	ldr	r3, [r4, #12]
   15cdc:	cmp	r3, #0
   15ce0:	bne	15d38 <__assert_fail@plt+0x43b4>
   15ce4:	ldr	r0, [r4, #36]	; 0x24
   15ce8:	mov	r1, r6
   15cec:	mov	r2, r5
   15cf0:	bl	15040 <__assert_fail@plt+0x36bc>
   15cf4:	mov	r0, #10
   15cf8:	ldr	r1, [r4, #36]	; 0x24
   15cfc:	bl	11720 <_IO_putc@plt>
   15d00:	mov	r3, #10
   15d04:	mov	r1, r6
   15d08:	strb	r3, [r6, r5]
   15d0c:	add	r2, r5, #1
   15d10:	ldr	r0, [r4, #2068]	; 0x814
   15d14:	bl	1559c <__assert_fail@plt+0x3c18>
   15d18:	cmp	r0, #0
   15d1c:	streq	r0, [r4, #3080]	; 0xc08
   15d20:	movwne	r3, #271	; 0x10f
   15d24:	movtne	r3, #1280	; 0x500
   15d28:	strne	r3, [r4, #3084]	; 0xc0c
   15d2c:	mov	r0, #0
   15d30:	add	sp, sp, #8
   15d34:	pop	{r4, r5, r6, pc}
   15d38:	movw	r0, #33504	; 0x82e0
   15d3c:	mov	r1, #1
   15d40:	mov	r2, #29
   15d44:	ldr	r3, [r4, #36]	; 0x24
   15d48:	movt	r0, #1
   15d4c:	bl	1172c <fwrite@plt>
   15d50:	b	15cf4 <__assert_fail@plt+0x4370>
   15d54:	push	{r4, lr}
   15d58:	subs	r4, r0, #0
   15d5c:	beq	15d7c <__assert_fail@plt+0x43f8>
   15d60:	rsbs	ip, r1, #1
   15d64:	movcc	ip, #0
   15d68:	cmp	r2, #0
   15d6c:	moveq	r3, #0
   15d70:	andne	r3, ip, #1
   15d74:	cmp	r3, #0
   15d78:	beq	15d88 <__assert_fail@plt+0x4404>
   15d7c:	movw	r0, #261	; 0x105
   15d80:	movt	r0, #1280	; 0x500
   15d84:	pop	{r4, pc}
   15d88:	cmp	ip, #0
   15d8c:	bne	15dac <__assert_fail@plt+0x4428>
   15d90:	bl	15aac <__assert_fail@plt+0x4128>
   15d94:	ldr	r0, [r4, #3084]	; 0xc0c
   15d98:	cmp	r0, #0
   15d9c:	beq	15da4 <__assert_fail@plt+0x4420>
   15da0:	pop	{r4, pc}
   15da4:	mov	r0, #0
   15da8:	pop	{r4, pc}
   15dac:	bl	15c84 <__assert_fail@plt+0x4300>
   15db0:	ldr	r0, [r4, #3084]	; 0xc0c
   15db4:	cmp	r0, #0
   15db8:	popne	{r4, pc}
   15dbc:	ldr	r3, [r4, #16]
   15dc0:	cmp	r3, #0
   15dc4:	bne	15da4 <__assert_fail@plt+0x4420>
   15dc8:	mov	r0, r4
   15dcc:	movw	r1, #33576	; 0x8328
   15dd0:	pop	{r4, lr}
   15dd4:	movt	r1, #1
   15dd8:	b	159c0 <__assert_fail@plt+0x403c>
   15ddc:	mov	r0, #0
   15de0:	bx	lr
   15de4:	mov	r1, #80	; 0x50
   15de8:	movw	r2, #33756	; 0x83dc
   15dec:	movt	r1, #1280	; 0x500
   15df0:	movt	r2, #1
   15df4:	b	14fcc <__assert_fail@plt+0x3648>
   15df8:	mov	r1, #69	; 0x45
   15dfc:	mov	r2, #0
   15e00:	movt	r1, #1280	; 0x500
   15e04:	b	14fcc <__assert_fail@plt+0x3648>
   15e08:	mov	r1, #69	; 0x45
   15e0c:	mov	r2, #0
   15e10:	movt	r1, #1280	; 0x500
   15e14:	b	14fcc <__assert_fail@plt+0x3648>
   15e18:	ldr	r3, [r0, #3136]	; 0xc40
   15e1c:	push	{r4, lr}
   15e20:	cmp	r3, #0
   15e24:	mov	r4, r0
   15e28:	beq	15e30 <__assert_fail@plt+0x44ac>
   15e2c:	blx	r3
   15e30:	mov	r0, r4
   15e34:	mov	r1, #69	; 0x45
   15e38:	mov	r2, #0
   15e3c:	movt	r1, #1280	; 0x500
   15e40:	pop	{r4, lr}
   15e44:	b	14fcc <__assert_fail@plt+0x3648>
   15e48:	push	{r4, r5, lr}
   15e4c:	mov	r5, r0
   15e50:	ldrb	r3, [r1]
   15e54:	sub	sp, sp, #12
   15e58:	cmp	r3, #32
   15e5c:	cmpne	r3, #9
   15e60:	bne	15e7c <__assert_fail@plt+0x44f8>
   15e64:	add	r2, r1, #1
   15e68:	mov	r1, r2
   15e6c:	ldrb	r3, [r2], #1
   15e70:	cmp	r3, #32
   15e74:	cmpne	r3, #9
   15e78:	beq	15e68 <__assert_fail@plt+0x44e4>
   15e7c:	cmp	r3, #0
   15e80:	beq	15ff0 <__assert_fail@plt+0x466c>
   15e84:	cmp	r3, #61	; 0x3d
   15e88:	beq	16074 <__assert_fail@plt+0x46f0>
   15e8c:	ldrb	r2, [r1]
   15e90:	cmp	r2, #0
   15e94:	beq	160a8 <__assert_fail@plt+0x4724>
   15e98:	cmp	r2, #9
   15e9c:	cmpne	r2, #32
   15ea0:	beq	15f08 <__assert_fail@plt+0x4584>
   15ea4:	cmp	r2, #61	; 0x3d
   15ea8:	moveq	r4, r1
   15eac:	beq	16010 <__assert_fail@plt+0x468c>
   15eb0:	add	ip, r1, #1
   15eb4:	b	15ecc <__assert_fail@plt+0x4548>
   15eb8:	cmp	r3, #9
   15ebc:	cmpne	r3, #32
   15ec0:	beq	15f10 <__assert_fail@plt+0x458c>
   15ec4:	cmp	r3, #61	; 0x3d
   15ec8:	beq	16010 <__assert_fail@plt+0x468c>
   15ecc:	mov	r4, ip
   15ed0:	ldrb	r3, [ip], #1
   15ed4:	cmp	r3, #0
   15ed8:	bne	15eb8 <__assert_fail@plt+0x4534>
   15edc:	cmp	r2, #45	; 0x2d
   15ee0:	beq	15fcc <__assert_fail@plt+0x4648>
   15ee4:	ldr	r3, [r5, #3140]	; 0xc44
   15ee8:	cmp	r3, #0
   15eec:	moveq	r0, r3
   15ef0:	beq	15f00 <__assert_fail@plt+0x457c>
   15ef4:	mov	r0, r5
   15ef8:	mov	r2, r4
   15efc:	blx	r3
   15f00:	add	sp, sp, #12
   15f04:	pop	{r4, r5, pc}
   15f08:	mov	r3, r2
   15f0c:	mov	r4, r1
   15f10:	cmp	r3, #32
   15f14:	cmpne	r3, #9
   15f18:	ldrbne	r3, [r4]
   15f1c:	movne	r2, r4
   15f20:	ldrbeq	r3, [r4, #1]
   15f24:	addeq	r2, r4, #1
   15f28:	moveq	r0, #0
   15f2c:	strbeq	r0, [r4]
   15f30:	cmp	r3, #9
   15f34:	cmpne	r3, #32
   15f38:	movne	r4, r2
   15f3c:	bne	15f58 <__assert_fail@plt+0x45d4>
   15f40:	add	r2, r2, #1
   15f44:	mov	r4, r2
   15f48:	ldrb	r3, [r2], #1
   15f4c:	cmp	r3, #32
   15f50:	cmpne	r3, #9
   15f54:	beq	15f44 <__assert_fail@plt+0x45c0>
   15f58:	cmp	r3, #61	; 0x3d
   15f5c:	beq	16010 <__assert_fail@plt+0x468c>
   15f60:	ldrb	r3, [r4]
   15f64:	cmp	r3, #0
   15f68:	beq	15fc0 <__assert_fail@plt+0x463c>
   15f6c:	mov	r0, r4
   15f70:	str	r1, [sp, #4]
   15f74:	bl	117e0 <strlen@plt>
   15f78:	ldr	r1, [sp, #4]
   15f7c:	sub	r0, r0, #1
   15f80:	add	ip, r4, r0
   15f84:	cmp	r4, ip
   15f88:	bcs	15fc0 <__assert_fail@plt+0x463c>
   15f8c:	ldrb	r3, [r4, r0]
   15f90:	cmp	r3, #32
   15f94:	cmpne	r3, #9
   15f98:	bne	16064 <__assert_fail@plt+0x46e0>
   15f9c:	sub	r3, ip, #1
   15fa0:	b	15fb4 <__assert_fail@plt+0x4630>
   15fa4:	ldrb	r2, [r3], #-1
   15fa8:	cmp	r2, #32
   15fac:	cmpne	r2, #9
   15fb0:	bne	16064 <__assert_fail@plt+0x46e0>
   15fb4:	cmp	r3, r4
   15fb8:	mov	ip, r3
   15fbc:	bne	15fa4 <__assert_fail@plt+0x4620>
   15fc0:	ldrb	r2, [r1]
   15fc4:	cmp	r2, #45	; 0x2d
   15fc8:	bne	15ee4 <__assert_fail@plt+0x4560>
   15fcc:	ldrb	r3, [r1, #1]
   15fd0:	cmp	r3, #45	; 0x2d
   15fd4:	beq	1608c <__assert_fail@plt+0x4708>
   15fd8:	mov	r1, #276	; 0x114
   15fdc:	movw	r2, #33852	; 0x843c
   15fe0:	mov	r0, r5
   15fe4:	movt	r1, #1280	; 0x500
   15fe8:	movt	r2, #1
   15fec:	b	16004 <__assert_fail@plt+0x4680>
   15ff0:	mov	r1, #276	; 0x114
   15ff4:	movw	r2, #33780	; 0x83f4
   15ff8:	movt	r1, #1280	; 0x500
   15ffc:	movt	r2, #1
   16000:	mov	r0, r5
   16004:	add	sp, sp, #12
   16008:	pop	{r4, r5, lr}
   1600c:	b	14fcc <__assert_fail@plt+0x3648>
   16010:	ldrb	r3, [r4, #1]
   16014:	mov	r2, #0
   16018:	add	r0, r4, #1
   1601c:	strb	r2, [r4]
   16020:	cmp	r3, #9
   16024:	cmpne	r3, #32
   16028:	bne	160b0 <__assert_fail@plt+0x472c>
   1602c:	add	r2, r4, #2
   16030:	mov	r4, r2
   16034:	ldrb	r3, [r2], #1
   16038:	cmp	r3, #32
   1603c:	cmpne	r3, #9
   16040:	beq	16030 <__assert_fail@plt+0x46ac>
   16044:	cmp	r3, #0
   16048:	bne	15f60 <__assert_fail@plt+0x45dc>
   1604c:	mov	r1, #276	; 0x114
   16050:	movw	r2, #33824	; 0x8420
   16054:	mov	r0, r5
   16058:	movt	r1, #1280	; 0x500
   1605c:	movt	r2, #1
   16060:	b	16004 <__assert_fail@plt+0x4680>
   16064:	mov	r3, #0
   16068:	strb	r3, [ip, #1]
   1606c:	ldrb	r2, [r1]
   16070:	b	15edc <__assert_fail@plt+0x4558>
   16074:	mov	r1, #276	; 0x114
   16078:	movw	r2, #33800	; 0x8408
   1607c:	mov	r0, r5
   16080:	movt	r1, #1280	; 0x500
   16084:	movt	r2, #1
   16088:	b	16004 <__assert_fail@plt+0x4680>
   1608c:	ldrb	r3, [r1, #2]
   16090:	cmp	r3, #0
   16094:	beq	15fd8 <__assert_fail@plt+0x4654>
   16098:	cmp	r3, #45	; 0x2d
   1609c:	add	r1, r1, #2
   160a0:	bne	15ee4 <__assert_fail@plt+0x4560>
   160a4:	b	15fd8 <__assert_fail@plt+0x4654>
   160a8:	mov	r4, r1
   160ac:	b	15ee4 <__assert_fail@plt+0x4560>
   160b0:	mov	r4, r0
   160b4:	b	16044 <__assert_fail@plt+0x46c0>
   160b8:	push	{r4, r5, r6, r7, r8, lr}
   160bc:	movw	r4, #37920	; 0x9420
   160c0:	movt	r4, #2
   160c4:	sub	sp, sp, #8
   160c8:	mov	r5, r1
   160cc:	mov	r7, r0
   160d0:	ldr	r3, [r4]
   160d4:	mov	r0, r1
   160d8:	mov	r8, r2
   160dc:	movw	r1, #33892	; 0x8464
   160e0:	mov	r2, #3
   160e4:	movt	r1, #1
   160e8:	str	r3, [sp, #4]
   160ec:	bl	11954 <strncmp@plt>
   160f0:	subs	r6, r0, #0
   160f4:	bne	16194 <__assert_fail@plt+0x4810>
   160f8:	ldrb	r3, [r5, #3]
   160fc:	sub	r3, r3, #48	; 0x30
   16100:	cmp	r3, #9
   16104:	bhi	16174 <__assert_fail@plt+0x47f0>
   16108:	add	r5, r5, #3
   1610c:	mov	r2, #10
   16110:	mov	r1, sp
   16114:	mov	r0, r5
   16118:	bl	117d4 <strtoul@plt>
   1611c:	ldr	r2, [sp]
   16120:	cmp	r2, #0
   16124:	str	r0, [r8]
   16128:	beq	161d4 <__assert_fail@plt+0x4850>
   1612c:	rsb	r2, r5, r2
   16130:	mov	r0, r5
   16134:	mov	r1, #32
   16138:	bl	11840 <memset@plt>
   1613c:	ldr	r3, [r8]
   16140:	ldr	r2, [r7, #40]	; 0x28
   16144:	cmp	r3, r2
   16148:	beq	161e4 <__assert_fail@plt+0x4860>
   1614c:	ldr	r2, [r7, #2068]	; 0x814
   16150:	cmp	r3, r2
   16154:	beq	161b4 <__assert_fail@plt+0x4830>
   16158:	ldr	r2, [sp, #4]
   1615c:	mov	r0, r6
   16160:	ldr	r3, [r4]
   16164:	cmp	r2, r3
   16168:	bne	16204 <__assert_fail@plt+0x4880>
   1616c:	add	sp, sp, #8
   16170:	pop	{r4, r5, r6, r7, r8, pc}
   16174:	mov	r0, r7
   16178:	mov	r1, #276	; 0x114
   1617c:	movw	r2, #33912	; 0x8478
   16180:	movt	r1, #1280	; 0x500
   16184:	movt	r2, #1
   16188:	bl	14fcc <__assert_fail@plt+0x3648>
   1618c:	mov	r6, r0
   16190:	b	16158 <__assert_fail@plt+0x47d4>
   16194:	mov	r0, r7
   16198:	mov	r1, #276	; 0x114
   1619c:	movw	r2, #33896	; 0x8468
   161a0:	movt	r1, #1280	; 0x500
   161a4:	movt	r2, #1
   161a8:	bl	14fcc <__assert_fail@plt+0x3648>
   161ac:	mov	r6, r0
   161b0:	b	16158 <__assert_fail@plt+0x47d4>
   161b4:	mov	r0, r7
   161b8:	mov	r1, #280	; 0x118
   161bc:	movw	r2, #33952	; 0x84a0
   161c0:	movt	r1, #1280	; 0x500
   161c4:	movt	r2, #1
   161c8:	bl	14fcc <__assert_fail@plt+0x3648>
   161cc:	mov	r6, r0
   161d0:	b	16158 <__assert_fail@plt+0x47d4>
   161d4:	mov	r0, r5
   161d8:	bl	117e0 <strlen@plt>
   161dc:	mov	r2, r0
   161e0:	b	16130 <__assert_fail@plt+0x47ac>
   161e4:	mov	r0, r7
   161e8:	mov	r1, #280	; 0x118
   161ec:	movw	r2, #33928	; 0x8488
   161f0:	movt	r1, #1280	; 0x500
   161f4:	movt	r2, #1
   161f8:	bl	14fcc <__assert_fail@plt+0x3648>
   161fc:	mov	r6, r0
   16200:	b	16158 <__assert_fail@plt+0x47d4>
   16204:	bl	11690 <__stack_chk_fail@plt>
   16208:	push	{r4, r5, r6, r7, lr}
   1620c:	movw	r4, #37920	; 0x9420
   16210:	movt	r4, #2
   16214:	sub	sp, sp, #12
   16218:	mov	r5, r0
   1621c:	mov	r7, r1
   16220:	ldr	r3, [r4]
   16224:	mov	r2, sp
   16228:	str	r3, [sp, #4]
   1622c:	bl	160b8 <__assert_fail@plt+0x4734>
   16230:	subs	r6, r0, #0
   16234:	movne	r0, r6
   16238:	bne	16264 <__assert_fail@plt+0x48e0>
   1623c:	ldr	r3, [r5, #3148]	; 0xc4c
   16240:	ldr	r2, [sp]
   16244:	cmp	r3, #0
   16248:	str	r2, [r5, #3156]	; 0xc54
   1624c:	moveq	r0, r3
   16250:	beq	16264 <__assert_fail@plt+0x48e0>
   16254:	mov	r0, r5
   16258:	mov	r1, r7
   1625c:	blx	r3
   16260:	mov	r0, r6
   16264:	ldr	r2, [sp, #4]
   16268:	ldr	r3, [r4]
   1626c:	cmp	r2, r3
   16270:	bne	1627c <__assert_fail@plt+0x48f8>
   16274:	add	sp, sp, #12
   16278:	pop	{r4, r5, r6, r7, pc}
   1627c:	bl	11690 <__stack_chk_fail@plt>
   16280:	push	{r4, r5, r6, r7, lr}
   16284:	movw	r4, #37920	; 0x9420
   16288:	movt	r4, #2
   1628c:	sub	sp, sp, #12
   16290:	mov	r5, r0
   16294:	mov	r7, r1
   16298:	ldr	r3, [r4]
   1629c:	mov	r2, sp
   162a0:	str	r3, [sp, #4]
   162a4:	bl	160b8 <__assert_fail@plt+0x4734>
   162a8:	subs	r6, r0, #0
   162ac:	movne	r0, r6
   162b0:	bne	162dc <__assert_fail@plt+0x4958>
   162b4:	ldr	r3, [r5, #3144]	; 0xc48
   162b8:	ldr	r2, [sp]
   162bc:	cmp	r3, #0
   162c0:	str	r2, [r5, #3152]	; 0xc50
   162c4:	moveq	r0, r3
   162c8:	beq	162dc <__assert_fail@plt+0x4958>
   162cc:	mov	r0, r5
   162d0:	mov	r1, r7
   162d4:	blx	r3
   162d8:	mov	r0, r6
   162dc:	ldr	r2, [sp, #4]
   162e0:	ldr	r3, [r4]
   162e4:	cmp	r2, r3
   162e8:	bne	162f4 <__assert_fail@plt+0x4970>
   162ec:	add	sp, sp, #12
   162f0:	pop	{r4, r5, r6, r7, pc}
   162f4:	bl	11690 <__stack_chk_fail@plt>
   162f8:	ldr	r3, [r0, #3132]	; 0xc3c
   162fc:	push	{r4, lr}
   16300:	cmp	r3, #0
   16304:	mov	r4, r0
   16308:	beq	16310 <__assert_fail@plt+0x498c>
   1630c:	blx	r3
   16310:	mov	r0, r4
   16314:	bl	16de8 <__assert_fail@plt+0x5464>
   16318:	mov	r0, r4
   1631c:	bl	16e20 <__assert_fail@plt+0x549c>
   16320:	mov	r0, #0
   16324:	pop	{r4, pc}
   16328:	ldr	r3, [r0, #3128]	; 0xc38
   1632c:	push	{r4, lr}
   16330:	cmp	r3, #0
   16334:	mov	r4, r0
   16338:	beq	16340 <__assert_fail@plt+0x49bc>
   1633c:	blx	r3
   16340:	mov	r0, r4
   16344:	bl	16de8 <__assert_fail@plt+0x5464>
   16348:	mov	r0, r4
   1634c:	bl	16e20 <__assert_fail@plt+0x549c>
   16350:	mvn	r0, #0
   16354:	pop	{r4, pc}
   16358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1635c:	movw	r4, #37920	; 0x9420
   16360:	movt	r4, #2
   16364:	ldr	r5, [r0, #20]
   16368:	sub	sp, sp, #284	; 0x11c
   1636c:	mov	r6, r0
   16370:	ldr	r3, [r4]
   16374:	cmp	r5, #0
   16378:	movne	r5, #264	; 0x108
   1637c:	movtne	r5, #1280	; 0x500
   16380:	str	r3, [sp, #276]	; 0x114
   16384:	beq	163a4 <__assert_fail@plt+0x4a20>
   16388:	ldr	r2, [sp, #276]	; 0x114
   1638c:	mov	r0, r5
   16390:	ldr	r3, [r4]
   16394:	cmp	r2, r3
   16398:	bne	1678c <__assert_fail@plt+0x4e08>
   1639c:	add	sp, sp, #284	; 0x11c
   163a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a4:	bl	155fc <__assert_fail@plt+0x3c78>
   163a8:	cmp	r0, #0
   163ac:	movne	r5, r0
   163b0:	bne	16388 <__assert_fail@plt+0x4a04>
   163b4:	ldrb	r3, [r6, #48]	; 0x30
   163b8:	cmp	r3, #35	; 0x23
   163bc:	beq	16388 <__assert_fail@plt+0x4a04>
   163c0:	ldr	r5, [r6, #1052]	; 0x41c
   163c4:	cmp	r5, #0
   163c8:	beq	16388 <__assert_fail@plt+0x4a04>
   163cc:	cmp	r3, #68	; 0x44
   163d0:	str	r0, [r6, #3084]	; 0xc0c
   163d4:	str	r0, [r6, #3080]	; 0xc08
   163d8:	add	r5, r6, #48	; 0x30
   163dc:	beq	1668c <__assert_fail@plt+0x4d08>
   163e0:	tst	r3, #223	; 0xdf
   163e4:	beq	16754 <__assert_fail@plt+0x4dd0>
   163e8:	cmp	r3, #9
   163ec:	beq	16754 <__assert_fail@plt+0x4dd0>
   163f0:	add	r1, r6, #49	; 0x31
   163f4:	b	16400 <__assert_fail@plt+0x4a7c>
   163f8:	cmp	r2, #9
   163fc:	beq	1674c <__assert_fail@plt+0x4dc8>
   16400:	mov	r3, r1
   16404:	add	r1, r1, #1
   16408:	ldrb	r2, [r3]
   1640c:	tst	r2, #223	; 0xdf
   16410:	bne	163f8 <__assert_fail@plt+0x4a74>
   16414:	cmp	r5, r3
   16418:	beq	16754 <__assert_fail@plt+0x4dd0>
   1641c:	cmp	r2, #0
   16420:	beq	16458 <__assert_fail@plt+0x4ad4>
   16424:	ldrb	r2, [r3, #1]
   16428:	mov	r1, #0
   1642c:	add	r0, r3, #1
   16430:	strb	r1, [r3]
   16434:	cmp	r2, #9
   16438:	cmpne	r2, #32
   1643c:	bne	1677c <__assert_fail@plt+0x4df8>
   16440:	add	r2, r3, #2
   16444:	mov	r3, r2
   16448:	ldrb	r1, [r2], #1
   1644c:	cmp	r1, #32
   16450:	cmpne	r1, #9
   16454:	beq	16444 <__assert_fail@plt+0x4ac0>
   16458:	ldr	r7, [r6, #3116]	; 0xc2c
   1645c:	rsb	r8, r5, r3
   16460:	ldr	r9, [r7]
   16464:	cmp	r9, #0
   16468:	beq	16710 <__assert_fail@plt+0x4d8c>
   1646c:	mov	sl, r7
   16470:	mov	r1, r9
   16474:	mov	fp, #0
   16478:	b	1648c <__assert_fail@plt+0x4b08>
   1647c:	ldr	r1, [sl, #12]!
   16480:	add	fp, fp, #1
   16484:	cmp	r1, #0
   16488:	beq	165b8 <__assert_fail@plt+0x4c34>
   1648c:	mov	r0, r5
   16490:	bl	11594 <strcmp@plt>
   16494:	cmp	r0, #0
   16498:	bne	1647c <__assert_fail@plt+0x4af8>
   1649c:	add	fp, fp, fp, lsl #1
   164a0:	add	r3, r7, fp, lsl #2
   164a4:	add	r1, r5, r8
   164a8:	ldr	r3, [r3, #8]
   164ac:	mov	r0, r6
   164b0:	blx	r3
   164b4:	mov	r5, r0
   164b8:	ldr	r0, [r6, #2072]	; 0x818
   164bc:	cmp	r0, #0
   164c0:	beq	16524 <__assert_fail@plt+0x4ba0>
   164c4:	bl	11888 <fclose@plt>
   164c8:	cmp	r5, #0
   164cc:	mov	r3, #0
   164d0:	str	r3, [r6, #2072]	; 0x818
   164d4:	bne	16548 <__assert_fail@plt+0x4bc4>
   164d8:	ldr	r5, [r6, #3084]	; 0xc0c
   164dc:	cmp	r5, r3
   164e0:	bne	16548 <__assert_fail@plt+0x4bc4>
   164e4:	ldr	r1, [r6, #28]
   164e8:	movw	r3, #33976	; 0x84b8
   164ec:	movt	r3, #1
   164f0:	mov	r0, r6
   164f4:	cmp	r1, #0
   164f8:	moveq	r1, r3
   164fc:	bl	159c0 <__assert_fail@plt+0x403c>
   16500:	mov	r5, r0
   16504:	ldr	r0, [r6, #28]
   16508:	mov	r7, #0
   1650c:	str	r7, [r6, #12]
   16510:	cmp	r0, r7
   16514:	beq	16388 <__assert_fail@plt+0x4a04>
   16518:	bl	14fac <__assert_fail@plt+0x3628>
   1651c:	str	r7, [r6, #28]
   16520:	b	16388 <__assert_fail@plt+0x4a04>
   16524:	mov	r1, r0
   16528:	mov	r0, r6
   1652c:	mov	r2, r1
   16530:	bl	15d54 <__assert_fail@plt+0x43d0>
   16534:	cmp	r5, #0
   16538:	bne	16548 <__assert_fail@plt+0x4bc4>
   1653c:	ldr	r5, [r6, #3084]	; 0xc0c
   16540:	cmp	r5, #0
   16544:	beq	164e4 <__assert_fail@plt+0x4b60>
   16548:	cmn	r5, #1
   1654c:	beq	1672c <__assert_fail@plt+0x4da8>
   16550:	cmp	r5, #99	; 0x63
   16554:	ble	166b4 <__assert_fail@plt+0x4d30>
   16558:	ldr	r3, [r6]
   1655c:	cmp	r3, r5
   16560:	beq	166ec <__assert_fail@plt+0x4d68>
   16564:	mov	r0, r5
   16568:	bl	15218 <__assert_fail@plt+0x3894>
   1656c:	movw	r2, #34200	; 0x8598
   16570:	movt	r2, #1
   16574:	mov	r1, r2
   16578:	add	r7, sp, #20
   1657c:	str	r0, [sp, #4]
   16580:	movw	r3, #34056	; 0x8508
   16584:	str	r2, [sp, #8]
   16588:	str	r1, [sp, #12]
   1658c:	mov	r0, r7
   16590:	str	r5, [sp]
   16594:	movt	r3, #1
   16598:	mov	r1, #1
   1659c:	mov	r2, #256	; 0x100
   165a0:	bl	1181c <__sprintf_chk@plt>
   165a4:	mov	r1, r7
   165a8:	mov	r0, r6
   165ac:	bl	159c0 <__assert_fail@plt+0x403c>
   165b0:	mov	r5, r0
   165b4:	b	16504 <__assert_fail@plt+0x4b80>
   165b8:	cmp	r5, r9
   165bc:	beq	16774 <__assert_fail@plt+0x4df0>
   165c0:	ldrb	fp, [r6, #48]	; 0x30
   165c4:	add	sl, r7, #12
   165c8:	cmp	fp, #0
   165cc:	beq	16784 <__assert_fail@plt+0x4e00>
   165d0:	ldrb	ip, [r9]
   165d4:	cmp	ip, #0
   165d8:	beq	16674 <__assert_fail@plt+0x4cf0>
   165dc:	mov	r2, r9
   165e0:	mov	r0, r5
   165e4:	mov	r3, fp
   165e8:	b	1660c <__assert_fail@plt+0x4c88>
   165ec:	ldrb	r3, [r0, #1]!
   165f0:	add	r9, r2, #1
   165f4:	cmp	r3, #0
   165f8:	beq	1662c <__assert_fail@plt+0x4ca8>
   165fc:	ldrb	ip, [r2, #1]
   16600:	cmp	ip, #0
   16604:	beq	16678 <__assert_fail@plt+0x4cf4>
   16608:	mov	r2, r9
   1660c:	sub	lr, r3, #97	; 0x61
   16610:	mov	r9, r2
   16614:	uxtb	lr, lr
   16618:	cmp	lr, #25
   1661c:	bicls	lr, r3, #32
   16620:	movhi	lr, r3
   16624:	cmp	ip, lr
   16628:	beq	165ec <__assert_fail@plt+0x4c68>
   1662c:	ldrb	r2, [r9]
   16630:	cmp	r3, r2
   16634:	beq	16680 <__assert_fail@plt+0x4cfc>
   16638:	sub	r0, r3, #97	; 0x61
   1663c:	uxtb	r0, r0
   16640:	cmp	r0, #25
   16644:	bicls	r3, r3, #32
   16648:	cmp	r2, r3
   1664c:	beq	16790 <__assert_fail@plt+0x4e0c>
   16650:	ldr	r9, [sl]
   16654:	add	r1, r1, #1
   16658:	mov	r3, sl
   1665c:	cmp	r9, #0
   16660:	beq	16710 <__assert_fail@plt+0x4d8c>
   16664:	cmp	r5, r9
   16668:	add	sl, sl, #12
   1666c:	bne	165c8 <__assert_fail@plt+0x4c44>
   16670:	b	164a4 <__assert_fail@plt+0x4b20>
   16674:	mov	r3, fp
   16678:	mov	r2, #0
   1667c:	b	16638 <__assert_fail@plt+0x4cb4>
   16680:	add	r1, r1, r1, lsl #1
   16684:	add	r3, r7, r1, lsl #2
   16688:	b	164a4 <__assert_fail@plt+0x4b20>
   1668c:	ldrb	r3, [r6, #49]	; 0x31
   16690:	cmp	r3, #32
   16694:	bne	163f0 <__assert_fail@plt+0x4a6c>
   16698:	mov	r2, r0
   1669c:	mov	r1, #69	; 0x45
   166a0:	mov	r0, r6
   166a4:	movt	r1, #1280	; 0x500
   166a8:	bl	14fcc <__assert_fail@plt+0x3648>
   166ac:	mov	r5, r0
   166b0:	b	164b8 <__assert_fail@plt+0x4b34>
   166b4:	mov	r0, r5
   166b8:	add	r7, sp, #20
   166bc:	bl	15218 <__assert_fail@plt+0x3894>
   166c0:	mov	r2, #80	; 0x50
   166c4:	movw	r3, #34028	; 0x84ec
   166c8:	movt	r2, #1280	; 0x500
   166cc:	movt	r3, #1
   166d0:	str	r2, [sp]
   166d4:	mov	r1, #1
   166d8:	mov	r2, #256	; 0x100
   166dc:	str	r0, [sp, #4]
   166e0:	mov	r0, r7
   166e4:	bl	1181c <__sprintf_chk@plt>
   166e8:	b	165a4 <__assert_fail@plt+0x4c20>
   166ec:	ldr	r7, [r6, #4]
   166f0:	mov	r0, r5
   166f4:	bl	15218 <__assert_fail@plt+0x3894>
   166f8:	cmp	r7, #0
   166fc:	beq	1656c <__assert_fail@plt+0x4be8>
   16700:	movw	r2, #33980	; 0x84bc
   16704:	mov	r1, r7
   16708:	movt	r2, #1
   1670c:	b	16578 <__assert_fail@plt+0x4bf4>
   16710:	movw	r1, #275	; 0x113
   16714:	mov	r0, r6
   16718:	movt	r1, #1280	; 0x500
   1671c:	mov	r2, #0
   16720:	bl	14fcc <__assert_fail@plt+0x3648>
   16724:	mov	r5, r0
   16728:	b	164b8 <__assert_fail@plt+0x4b34>
   1672c:	mov	r0, r6
   16730:	movw	r1, #34004	; 0x84d4
   16734:	movt	r1, #1
   16738:	bl	159c0 <__assert_fail@plt+0x403c>
   1673c:	ldr	r3, [r6, #3112]	; 0xc28
   16740:	mov	r0, r6
   16744:	blx	r3
   16748:	b	16504 <__assert_fail@plt+0x4b80>
   1674c:	cmp	r5, r3
   16750:	bne	16424 <__assert_fail@plt+0x4aa0>
   16754:	mov	r1, #276	; 0x114
   16758:	movw	r2, #33984	; 0x84c0
   1675c:	movt	r1, #1280	; 0x500
   16760:	movt	r2, #1
   16764:	mov	r0, r6
   16768:	bl	14fcc <__assert_fail@plt+0x3648>
   1676c:	mov	r5, r0
   16770:	b	164b8 <__assert_fail@plt+0x4b34>
   16774:	mov	r3, r7
   16778:	b	164a4 <__assert_fail@plt+0x4b20>
   1677c:	mov	r3, r0
   16780:	b	16458 <__assert_fail@plt+0x4ad4>
   16784:	mov	r3, fp
   16788:	b	1662c <__assert_fail@plt+0x4ca8>
   1678c:	bl	11690 <__stack_chk_fail@plt>
   16790:	mov	r3, #12
   16794:	mla	r3, r3, r1, r7
   16798:	b	164a4 <__assert_fail@plt+0x4b20>
   1679c:	push	{r4, r5, r6, lr}
   167a0:	subs	r4, r2, #0
   167a4:	sub	sp, sp, #8
   167a8:	mov	r5, r0
   167ac:	mov	r6, r1
   167b0:	beq	167c0 <__assert_fail@plt+0x4e3c>
   167b4:	ldrb	r2, [r4]
   167b8:	cmp	r2, #0
   167bc:	bne	16858 <__assert_fail@plt+0x4ed4>
   167c0:	cmp	r6, #255	; 0xff
   167c4:	movgt	r4, #0
   167c8:	bgt	16880 <__assert_fail@plt+0x4efc>
   167cc:	cmp	r6, #0
   167d0:	movwne	r2, #33580	; 0x832c
   167d4:	movne	r1, #0
   167d8:	movtne	r2, #1
   167dc:	beq	16914 <__assert_fail@plt+0x4f90>
   167e0:	ldr	r4, [r2, #16]
   167e4:	add	r1, r1, #1
   167e8:	add	r2, r2, #16
   167ec:	cmp	r4, #0
   167f0:	beq	16860 <__assert_fail@plt+0x4edc>
   167f4:	ldr	r0, [r2, #4]
   167f8:	cmp	r0, r6
   167fc:	bne	167e0 <__assert_fail@plt+0x4e5c>
   16800:	cmp	r3, #0
   16804:	beq	16870 <__assert_fail@plt+0x4eec>
   16808:	cmp	r4, #0
   1680c:	beq	16860 <__assert_fail@plt+0x4edc>
   16810:	ldr	r0, [r5, #3116]	; 0xc2c
   16814:	cmp	r0, #0
   16818:	beq	168dc <__assert_fail@plt+0x4f58>
   1681c:	ldr	r2, [r5, #3120]	; 0xc30
   16820:	ldr	r1, [r5, #3124]	; 0xc34
   16824:	cmp	r2, r1
   16828:	bcs	16894 <__assert_fail@plt+0x4f10>
   1682c:	add	ip, r2, r2, lsl #1
   16830:	add	r2, r2, #1
   16834:	lsl	ip, ip, #2
   16838:	add	r1, r0, ip
   1683c:	str	r4, [r0, ip]
   16840:	mov	r0, #0
   16844:	str	r6, [r1, #4]
   16848:	str	r3, [r1, #8]
   1684c:	str	r2, [r5, #3120]	; 0xc30
   16850:	add	sp, sp, #8
   16854:	pop	{r4, r5, r6, pc}
   16858:	cmp	r1, #255	; 0xff
   1685c:	bgt	16880 <__assert_fail@plt+0x4efc>
   16860:	movw	r0, #261	; 0x105
   16864:	movt	r0, #1280	; 0x500
   16868:	add	sp, sp, #8
   1686c:	pop	{r4, r5, r6, pc}
   16870:	movw	r3, #33580	; 0x832c
   16874:	movt	r3, #1
   16878:	add	r3, r3, r1, lsl #4
   1687c:	ldr	r3, [r3, #8]
   16880:	movw	r2, #24036	; 0x5de4
   16884:	cmp	r3, #0
   16888:	movt	r2, #1
   1688c:	moveq	r3, r2
   16890:	b	16808 <__assert_fail@plt+0x4e84>
   16894:	add	r1, r1, r1, lsl #1
   16898:	str	r3, [sp, #4]
   1689c:	lsl	r1, r1, #2
   168a0:	add	r1, r1, #120	; 0x78
   168a4:	bl	14f5c <__assert_fail@plt+0x35d8>
   168a8:	ldr	r3, [sp, #4]
   168ac:	subs	r2, r0, #0
   168b0:	beq	16908 <__assert_fail@plt+0x4f84>
   168b4:	ldr	ip, [r5, #3120]	; 0xc30
   168b8:	mov	r0, r2
   168bc:	ldr	r1, [r5, #3124]	; 0xc34
   168c0:	str	r2, [r5, #3116]	; 0xc2c
   168c4:	add	r2, ip, #1
   168c8:	add	ip, ip, ip, lsl #1
   168cc:	add	r1, r1, #50	; 0x32
   168d0:	str	r1, [r5, #3124]	; 0xc34
   168d4:	lsl	ip, ip, #2
   168d8:	b	16838 <__assert_fail@plt+0x4eb4>
   168dc:	mov	r0, #50	; 0x32
   168e0:	mov	r1, #12
   168e4:	str	r0, [r5, #3124]	; 0xc34
   168e8:	str	r3, [sp, #4]
   168ec:	bl	14f74 <__assert_fail@plt+0x35f0>
   168f0:	ldr	r3, [sp, #4]
   168f4:	cmp	r0, #0
   168f8:	str	r0, [r5, #3116]	; 0xc2c
   168fc:	movne	r2, #1
   16900:	movne	ip, #0
   16904:	bne	16838 <__assert_fail@plt+0x4eb4>
   16908:	movw	r0, #32854	; 0x8056
   1690c:	movt	r0, #1280	; 0x500
   16910:	b	16868 <__assert_fail@plt+0x4ee4>
   16914:	movw	r4, #34080	; 0x8520
   16918:	mov	r1, r6
   1691c:	movt	r4, #1
   16920:	b	16800 <__assert_fail@plt+0x4e7c>
   16924:	cmp	r0, #0
   16928:	strne	r1, [r0, #3128]	; 0xc38
   1692c:	movne	r0, #0
   16930:	movweq	r0, #261	; 0x105
   16934:	movteq	r0, #1280	; 0x500
   16938:	bx	lr
   1693c:	cmp	r0, #0
   16940:	strne	r1, [r0, #3132]	; 0xc3c
   16944:	movne	r0, #0
   16948:	movweq	r0, #261	; 0x105
   1694c:	movteq	r0, #1280	; 0x500
   16950:	bx	lr
   16954:	cmp	r0, #0
   16958:	strne	r1, [r0, #3136]	; 0xc40
   1695c:	movne	r0, #0
   16960:	movweq	r0, #261	; 0x105
   16964:	movteq	r0, #1280	; 0x500
   16968:	bx	lr
   1696c:	cmp	r0, #0
   16970:	strne	r1, [r0, #3140]	; 0xc44
   16974:	movne	r0, #0
   16978:	movweq	r0, #261	; 0x105
   1697c:	movteq	r0, #1280	; 0x500
   16980:	bx	lr
   16984:	cmp	r0, #0
   16988:	strne	r1, [r0, #3144]	; 0xc48
   1698c:	movne	r0, #0
   16990:	movweq	r0, #261	; 0x105
   16994:	movteq	r0, #1280	; 0x500
   16998:	bx	lr
   1699c:	cmp	r0, #0
   169a0:	strne	r1, [r0, #3148]	; 0xc4c
   169a4:	movne	r0, #0
   169a8:	movweq	r0, #261	; 0x105
   169ac:	movteq	r0, #1280	; 0x500
   169b0:	bx	lr
   169b4:	push	{r3, r4, r5, lr}
   169b8:	mov	r5, r0
   169bc:	ldr	r4, [pc, #68]	; 16a08 <__assert_fail@plt+0x5084>
   169c0:	b	169d4 <__assert_fail@plt+0x5050>
   169c4:	add	r4, r4, #16
   169c8:	ldr	r3, [r4, #-12]
   169cc:	cmp	r3, #0
   169d0:	beq	16a00 <__assert_fail@plt+0x507c>
   169d4:	ldr	r3, [r4]
   169d8:	cmp	r3, #0
   169dc:	beq	169c4 <__assert_fail@plt+0x5040>
   169e0:	mov	r2, #0
   169e4:	mov	r0, r5
   169e8:	mov	r3, r2
   169ec:	ldr	r1, [r4, #-8]
   169f0:	bl	1679c <__assert_fail@plt+0x4e18>
   169f4:	cmp	r0, #0
   169f8:	beq	169c4 <__assert_fail@plt+0x5040>
   169fc:	pop	{r3, r4, r5, pc}
   16a00:	mov	r0, r3
   16a04:	pop	{r3, r4, r5, pc}
   16a08:	andeq	r8, r1, r8, lsr r3
   16a0c:	push	{r4, lr}
   16a10:	mov	r4, r0
   16a14:	mov	r0, r4
   16a18:	bl	16358 <__assert_fail@plt+0x49d4>
   16a1c:	cmp	r0, #0
   16a20:	beq	16a14 <__assert_fail@plt+0x5090>
   16a24:	cmn	r0, #1
   16a28:	moveq	r0, #0
   16a2c:	pop	{r4, pc}
   16a30:	b	16358 <__assert_fail@plt+0x49d4>
   16a34:	cmp	r0, #0
   16a38:	cmpne	r3, #1
   16a3c:	push	{r4, r5, r6, lr}
   16a40:	movgt	r3, #0
   16a44:	movle	r3, #1
   16a48:	mov	r4, r2
   16a4c:	ble	16ab8 <__assert_fail@plt+0x5134>
   16a50:	cmp	r1, #1
   16a54:	bhi	16ab8 <__assert_fail@plt+0x5134>
   16a58:	cmp	r1, #0
   16a5c:	beq	16a9c <__assert_fail@plt+0x5118>
   16a60:	ldr	r2, [r0, #2068]	; 0x814
   16a64:	ldr	r0, [r0, #2072]	; 0x818
   16a68:	cmn	r2, #1
   16a6c:	strne	r2, [r4]
   16a70:	moveq	r5, r3
   16a74:	movne	r5, #1
   16a78:	cmp	r0, #0
   16a7c:	moveq	r1, r5
   16a80:	beq	16a94 <__assert_fail@plt+0x5110>
   16a84:	bl	11864 <fileno@plt>
   16a88:	add	r6, r5, #1
   16a8c:	mov	r1, r6
   16a90:	str	r0, [r4, r5, lsl #2]
   16a94:	mov	r0, r1
   16a98:	pop	{r4, r5, r6, pc}
   16a9c:	ldr	r3, [r0, #40]	; 0x28
   16aa0:	cmn	r3, #1
   16aa4:	beq	16a94 <__assert_fail@plt+0x5110>
   16aa8:	mov	r1, #1
   16aac:	str	r3, [r2]
   16ab0:	mov	r0, r1
   16ab4:	pop	{r4, r5, r6, pc}
   16ab8:	mvn	r1, #0
   16abc:	mov	r0, r1
   16ac0:	pop	{r4, r5, r6, pc}
   16ac4:	push	{r4, r5, r6, lr}
   16ac8:	subs	r5, r0, #0
   16acc:	mov	r4, r1
   16ad0:	beq	16b34 <__assert_fail@plt+0x51b0>
   16ad4:	cmp	r1, #0
   16ad8:	beq	16b40 <__assert_fail@plt+0x51bc>
   16adc:	mov	r0, r1
   16ae0:	bl	117e0 <strlen@plt>
   16ae4:	add	r0, r0, #4
   16ae8:	bl	14f44 <__assert_fail@plt+0x35c0>
   16aec:	subs	r6, r0, #0
   16af0:	beq	16b28 <__assert_fail@plt+0x51a4>
   16af4:	movw	r2, #34084	; 0x8524
   16af8:	movt	r2, #1
   16afc:	mov	r3, r6
   16b00:	mov	r1, r4
   16b04:	ldr	r0, [r2]
   16b08:	str	r0, [r3], #3
   16b0c:	mov	r0, r3
   16b10:	bl	11738 <strcpy@plt>
   16b14:	ldr	r0, [r5, #28]
   16b18:	bl	14fac <__assert_fail@plt+0x3628>
   16b1c:	str	r6, [r5, #28]
   16b20:	mov	r0, #0
   16b24:	pop	{r4, r5, r6, pc}
   16b28:	movw	r0, #32854	; 0x8056
   16b2c:	movt	r0, #1280	; 0x500
   16b30:	pop	{r4, r5, r6, pc}
   16b34:	movw	r0, #261	; 0x105
   16b38:	movt	r0, #1280	; 0x500
   16b3c:	pop	{r4, r5, r6, pc}
   16b40:	ldr	r0, [r5, #28]
   16b44:	bl	14fac <__assert_fail@plt+0x3628>
   16b48:	str	r4, [r5, #28]
   16b4c:	mov	r0, r4
   16b50:	pop	{r4, r5, r6, pc}
   16b54:	push	{r4, r5, r6, r7, r8, r9, lr}
   16b58:	movw	r4, #37920	; 0x9420
   16b5c:	movt	r4, #2
   16b60:	sub	sp, sp, #268	; 0x10c
   16b64:	cmp	r1, #0
   16b68:	cmpne	r0, #0
   16b6c:	mov	r7, r0
   16b70:	ldr	r3, [r4]
   16b74:	mov	r5, r1
   16b78:	mov	r6, r2
   16b7c:	str	r3, [sp, #260]	; 0x104
   16b80:	beq	16be8 <__assert_fail@plt+0x5264>
   16b84:	cmp	r2, #0
   16b88:	beq	16c50 <__assert_fail@plt+0x52cc>
   16b8c:	mov	r0, r2
   16b90:	bl	117e0 <strlen@plt>
   16b94:	mov	r9, r0
   16b98:	mov	r0, r5
   16b9c:	bl	117e0 <strlen@plt>
   16ba0:	add	r3, r0, r9
   16ba4:	mov	r8, r0
   16ba8:	add	r0, r3, #4
   16bac:	cmp	r0, #255	; 0xff
   16bb0:	bhi	16c00 <__assert_fail@plt+0x527c>
   16bb4:	add	r0, sp, #4
   16bb8:	movw	ip, #8275	; 0x2053
   16bbc:	mov	r3, #256	; 0x100
   16bc0:	mov	r1, r5
   16bc4:	add	r2, r8, #1
   16bc8:	strh	ip, [r0], #2
   16bcc:	bl	11708 <__memcpy_chk@plt>
   16bd0:	ldrb	r3, [r6]
   16bd4:	cmp	r3, #0
   16bd8:	bne	16c60 <__assert_fail@plt+0x52dc>
   16bdc:	mov	r0, r7
   16be0:	add	r1, sp, #4
   16be4:	bl	159c0 <__assert_fail@plt+0x403c>
   16be8:	ldr	r2, [sp, #260]	; 0x104
   16bec:	ldr	r3, [r4]
   16bf0:	cmp	r2, r3
   16bf4:	bne	16ca8 <__assert_fail@plt+0x5324>
   16bf8:	add	sp, sp, #268	; 0x10c
   16bfc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16c00:	bl	14f44 <__assert_fail@plt+0x35c0>
   16c04:	subs	r8, r0, #0
   16c08:	beq	16be8 <__assert_fail@plt+0x5264>
   16c0c:	movw	r3, #34088	; 0x8528
   16c10:	movt	r3, #1
   16c14:	mov	r0, r8
   16c18:	mov	r1, r5
   16c1c:	ldrh	r3, [r3]
   16c20:	strh	r3, [r0], #2
   16c24:	bl	11678 <stpcpy@plt>
   16c28:	ldrb	r3, [r6]
   16c2c:	cmp	r3, #0
   16c30:	mov	r2, r0
   16c34:	bne	16c90 <__assert_fail@plt+0x530c>
   16c38:	mov	r0, r7
   16c3c:	mov	r1, r8
   16c40:	bl	159c0 <__assert_fail@plt+0x403c>
   16c44:	mov	r0, r8
   16c48:	bl	14fac <__assert_fail@plt+0x3628>
   16c4c:	b	16be8 <__assert_fail@plt+0x5264>
   16c50:	movw	r6, #34200	; 0x8598
   16c54:	mov	r9, r2
   16c58:	movt	r6, #1
   16c5c:	b	16b98 <__assert_fail@plt+0x5214>
   16c60:	add	ip, r8, #2
   16c64:	add	r5, sp, #4
   16c68:	add	r3, sp, #4
   16c6c:	add	r0, r8, #3
   16c70:	mov	lr, #32
   16c74:	mov	r1, r6
   16c78:	add	r2, r9, #1
   16c7c:	add	r0, r3, r0
   16c80:	strb	lr, [r5, ip]
   16c84:	mov	r3, #256	; 0x100
   16c88:	bl	11708 <__memcpy_chk@plt>
   16c8c:	b	16bdc <__assert_fail@plt+0x5258>
   16c90:	mov	r3, #32
   16c94:	mov	r1, r6
   16c98:	strb	r3, [r2]
   16c9c:	add	r0, r0, #1
   16ca0:	bl	11738 <strcpy@plt>
   16ca4:	b	16c38 <__assert_fail@plt+0x52b4>
   16ca8:	bl	11690 <__stack_chk_fail@plt>
   16cac:	push	{r4, r5, r6, lr}
   16cb0:	subs	r5, r0, #0
   16cb4:	mov	r4, r1
   16cb8:	beq	16d1c <__assert_fail@plt+0x5398>
   16cbc:	cmp	r1, #0
   16cc0:	beq	16d28 <__assert_fail@plt+0x53a4>
   16cc4:	mov	r0, r1
   16cc8:	bl	117e0 <strlen@plt>
   16ccc:	add	r0, r0, #4
   16cd0:	bl	14f44 <__assert_fail@plt+0x35c0>
   16cd4:	subs	r6, r0, #0
   16cd8:	beq	16d10 <__assert_fail@plt+0x538c>
   16cdc:	movw	r2, #34084	; 0x8524
   16ce0:	movt	r2, #1
   16ce4:	mov	r3, r6
   16ce8:	mov	r1, r4
   16cec:	ldr	r0, [r2]
   16cf0:	str	r0, [r3], #3
   16cf4:	mov	r0, r3
   16cf8:	bl	11738 <strcpy@plt>
   16cfc:	ldr	r0, [r5, #24]
   16d00:	bl	14fac <__assert_fail@plt+0x3628>
   16d04:	str	r6, [r5, #24]
   16d08:	mov	r0, #0
   16d0c:	pop	{r4, r5, r6, pc}
   16d10:	movw	r0, #32854	; 0x8056
   16d14:	movt	r0, #1280	; 0x500
   16d18:	pop	{r4, r5, r6, pc}
   16d1c:	movw	r0, #261	; 0x105
   16d20:	movt	r0, #1280	; 0x500
   16d24:	pop	{r4, r5, r6, pc}
   16d28:	ldr	r0, [r5, #24]
   16d2c:	bl	14fac <__assert_fail@plt+0x3628>
   16d30:	str	r4, [r5, #24]
   16d34:	mov	r0, r4
   16d38:	pop	{r4, r5, r6, pc}
   16d3c:	push	{r4, lr}
   16d40:	subs	r4, r0, #0
   16d44:	beq	16d5c <__assert_fail@plt+0x53d8>
   16d48:	ldr	r3, [r4, #3088]	; 0xc10
   16d4c:	cmp	r3, #1
   16d50:	ble	16d68 <__assert_fail@plt+0x53e4>
   16d54:	mvn	r0, #0
   16d58:	pop	{r4, pc}
   16d5c:	movw	r0, #261	; 0x105
   16d60:	movt	r0, #1280	; 0x500
   16d64:	pop	{r4, pc}
   16d68:	ldr	r3, [r4, #3112]	; 0xc28
   16d6c:	blx	r3
   16d70:	ldr	r3, [r4, #3108]	; 0xc24
   16d74:	mov	r0, r4
   16d78:	blx	r3
   16d7c:	cmp	r0, #0
   16d80:	popne	{r4, pc}
   16d84:	ldr	r1, [r4, #24]
   16d88:	movw	r3, #34144	; 0x8560
   16d8c:	movt	r3, #1
   16d90:	mov	r0, r4
   16d94:	cmp	r1, #0
   16d98:	moveq	r1, r3
   16d9c:	bl	159c0 <__assert_fail@plt+0x403c>
   16da0:	cmp	r0, #0
   16da4:	popne	{r4, pc}
   16da8:	ldr	r3, [r4, #3088]	; 0xc10
   16dac:	cmp	r3, #0
   16db0:	beq	16dc0 <__assert_fail@plt+0x543c>
   16db4:	mov	r3, #2
   16db8:	str	r3, [r4, #3088]	; 0xc10
   16dbc:	pop	{r4, pc}
   16dc0:	mov	r0, r3
   16dc4:	pop	{r4, pc}
   16dc8:	cmp	r0, #0
   16dcc:	ldrne	r0, [r0, #3152]	; 0xc50
   16dd0:	mvneq	r0, #0
   16dd4:	bx	lr
   16dd8:	cmp	r0, #0
   16ddc:	ldrne	r0, [r0, #3156]	; 0xc54
   16de0:	mvneq	r0, #0
   16de4:	bx	lr
   16de8:	push	{r4, lr}
   16dec:	subs	r4, r0, #0
   16df0:	beq	16e00 <__assert_fail@plt+0x547c>
   16df4:	ldr	r0, [r4, #3152]	; 0xc50
   16df8:	cmn	r0, #1
   16dfc:	bne	16e0c <__assert_fail@plt+0x5488>
   16e00:	movw	r0, #261	; 0x105
   16e04:	movt	r0, #1280	; 0x500
   16e08:	pop	{r4, pc}
   16e0c:	bl	1196c <close@plt>
   16e10:	mvn	r3, #0
   16e14:	mov	r0, #0
   16e18:	str	r3, [r4, #3152]	; 0xc50
   16e1c:	pop	{r4, pc}
   16e20:	push	{r4, lr}
   16e24:	subs	r4, r0, #0
   16e28:	beq	16e38 <__assert_fail@plt+0x54b4>
   16e2c:	ldr	r0, [r4, #3156]	; 0xc54
   16e30:	cmn	r0, #1
   16e34:	bne	16e44 <__assert_fail@plt+0x54c0>
   16e38:	movw	r0, #261	; 0x105
   16e3c:	movt	r0, #1280	; 0x500
   16e40:	pop	{r4, pc}
   16e44:	bl	1196c <close@plt>
   16e48:	mvn	r3, #0
   16e4c:	mov	r0, #0
   16e50:	str	r3, [r4, #3156]	; 0xc54
   16e54:	pop	{r4, pc}
   16e58:	bx	lr
   16e5c:	mov	r0, #0
   16e60:	bx	lr
   16e64:	mov	r0, #0
   16e68:	bx	lr
   16e6c:	push	{r4, r5, r6, lr}
   16e70:	mov	r5, r0
   16e74:	mov	r3, #0
   16e78:	mov	r0, #1
   16e7c:	str	r3, [r5]
   16e80:	movw	r1, #3160	; 0xc58
   16e84:	bl	14f74 <__assert_fail@plt+0x35f0>
   16e88:	subs	r4, r0, #0
   16e8c:	beq	16ee8 <__assert_fail@plt+0x5564>
   16e90:	movw	r2, #28248	; 0x6e58
   16e94:	movw	r3, #28252	; 0x6e5c
   16e98:	movt	r2, #1
   16e9c:	movt	r3, #1
   16ea0:	str	r2, [r4, #3104]	; 0xc20
   16ea4:	movw	r2, #28260	; 0x6e64
   16ea8:	str	r3, [r4, #3108]	; 0xc24
   16eac:	movt	r2, #1
   16eb0:	mvn	r3, #0
   16eb4:	str	r2, [r4, #3112]	; 0xc28
   16eb8:	str	r3, [r4, #3152]	; 0xc50
   16ebc:	str	r3, [r4, #3156]	; 0xc54
   16ec0:	str	r3, [r4, #40]	; 0x28
   16ec4:	str	r3, [r4, #2068]	; 0x814
   16ec8:	str	r3, [r4, #3096]	; 0xc18
   16ecc:	str	r3, [r4, #3100]	; 0xc1c
   16ed0:	bl	169b4 <__assert_fail@plt+0x5030>
   16ed4:	subs	r6, r0, #0
   16ed8:	bne	16ef4 <__assert_fail@plt+0x5570>
   16edc:	str	r4, [r5]
   16ee0:	mov	r0, r6
   16ee4:	pop	{r4, r5, r6, pc}
   16ee8:	movw	r0, #32854	; 0x8056
   16eec:	movt	r0, #1280	; 0x500
   16ef0:	pop	{r4, r5, r6, pc}
   16ef4:	mov	r0, r4
   16ef8:	bl	14fac <__assert_fail@plt+0x3628>
   16efc:	mov	r0, r6
   16f00:	pop	{r4, r5, r6, pc}
   16f04:	push	{r3, r4, r5, lr}
   16f08:	mov	r4, r1
   16f0c:	mov	r5, r0
   16f10:	bl	16e6c <__assert_fail@plt+0x54e8>
   16f14:	cmp	r0, #0
   16f18:	popne	{r3, r4, r5, pc}
   16f1c:	ldr	r3, [r5]
   16f20:	mov	r2, #1
   16f24:	str	r2, [r3, #16]
   16f28:	ldr	r1, [r4]
   16f2c:	str	r1, [r3, #40]	; 0x28
   16f30:	ldr	r1, [r4, #4]
   16f34:	str	r2, [r3, #3088]	; 0xc10
   16f38:	str	r1, [r3, #2068]	; 0x814
   16f3c:	pop	{r3, r4, r5, pc}
   16f40:	push	{r4, lr}
   16f44:	subs	r4, r0, #0
   16f48:	popeq	{r4, pc}
   16f4c:	ldr	r0, [r4, #24]
   16f50:	bl	14fac <__assert_fail@plt+0x3628>
   16f54:	ldr	r0, [r4, #28]
   16f58:	bl	14fac <__assert_fail@plt+0x3628>
   16f5c:	mov	r0, r4
   16f60:	pop	{r4, lr}
   16f64:	b	14fac <__assert_fail@plt+0x3628>
   16f68:	push	{r4, lr}
   16f6c:	subs	r4, r0, #0
   16f70:	popeq	{r4, pc}
   16f74:	ldr	r3, [r4, #3104]	; 0xc20
   16f78:	blx	r3
   16f7c:	mov	r3, #0
   16f80:	mov	r0, r4
   16f84:	str	r3, [r4, #3104]	; 0xc20
   16f88:	pop	{r4, lr}
   16f8c:	b	16f40 <__assert_fail@plt+0x55bc>
   16f90:	push	{r0, r1, r2, r3}
   16f94:	movw	r0, #37928	; 0x9428
   16f98:	push	{r4, lr}
   16f9c:	movw	r4, #37920	; 0x9420
   16fa0:	movt	r4, #2
   16fa4:	sub	sp, sp, #8
   16fa8:	add	ip, sp, #20
   16fac:	movt	r0, #2
   16fb0:	ldr	lr, [r4]
   16fb4:	mov	r1, #1
   16fb8:	ldr	r2, [sp, #16]
   16fbc:	mov	r3, ip
   16fc0:	ldr	r0, [r0]
   16fc4:	str	lr, [sp, #4]
   16fc8:	str	ip, [sp]
   16fcc:	bl	1178c <__vfprintf_chk@plt>
   16fd0:	ldr	r2, [sp, #4]
   16fd4:	ldr	r3, [r4]
   16fd8:	cmp	r2, r3
   16fdc:	bne	16ff0 <__assert_fail@plt+0x566c>
   16fe0:	add	sp, sp, #8
   16fe4:	pop	{r4, lr}
   16fe8:	add	sp, sp, #16
   16fec:	bx	lr
   16ff0:	bl	11690 <__stack_chk_fail@plt>
   16ff4:	push	{r0, r1, r2, r3}
   16ff8:	movw	r3, #37920	; 0x9420
   16ffc:	movt	r3, #2
   17000:	movw	r0, #37928	; 0x9428
   17004:	push	{lr}		; (str lr, [sp, #-4]!)
   17008:	sub	sp, sp, #12
   1700c:	ldr	lr, [r3]
   17010:	add	ip, sp, #20
   17014:	movt	r0, #2
   17018:	ldr	r2, [sp, #16]
   1701c:	mov	r1, #1
   17020:	mov	r3, ip
   17024:	ldr	r0, [r0]
   17028:	str	lr, [sp, #4]
   1702c:	str	ip, [sp]
   17030:	bl	1178c <__vfprintf_chk@plt>
   17034:	mov	r0, #1
   17038:	bl	117c8 <exit@plt>
   1703c:	movw	r3, #38044	; 0x949c
   17040:	movt	r3, #2
   17044:	and	r2, r0, #1
   17048:	and	r0, r0, #2
   1704c:	ldr	r1, [r3]
   17050:	str	r2, [r3, #4]
   17054:	cmp	r1, #0
   17058:	str	r0, [r3]
   1705c:	bxeq	lr
   17060:	cmp	r0, #0
   17064:	bxne	lr
   17068:	ldr	r1, [r3, #8]
   1706c:	cmp	r1, #0
   17070:	bxeq	lr
   17074:	cmp	r2, #0
   17078:	str	r0, [r3, #8]
   1707c:	bxne	lr
   17080:	movw	r0, #34168	; 0x8578
   17084:	movt	r0, #1
   17088:	b	16f90 <__assert_fail@plt+0x560c>
   1708c:	movw	r3, #38044	; 0x949c
   17090:	movt	r3, #2
   17094:	ldr	r2, [r3]
   17098:	ldr	r0, [r3, #4]
   1709c:	cmp	r2, #0
   170a0:	movne	r3, #2
   170a4:	moveq	r3, #0
   170a8:	cmp	r0, #0
   170ac:	moveq	r0, r3
   170b0:	orrne	r0, r3, #1
   170b4:	bx	lr
   170b8:	subs	r3, r0, #0
   170bc:	push	{r4, r5, r6, r7, r8, lr}
   170c0:	sub	sp, sp, #8
   170c4:	beq	171f0 <__assert_fail@plt+0x586c>
   170c8:	movw	r4, #38044	; 0x949c
   170cc:	movt	r4, #2
   170d0:	cmp	r3, #16384	; 0x4000
   170d4:	movcc	r3, #16384	; 0x4000
   170d8:	ldr	r2, [r4, #16]
   170dc:	cmp	r2, #0
   170e0:	beq	170f8 <__assert_fail@plt+0x5774>
   170e4:	movw	r0, #34396	; 0x865c
   170e8:	movt	r0, #1
   170ec:	add	sp, sp, #8
   170f0:	pop	{r4, r5, r6, r7, r8, lr}
   170f4:	b	16f90 <__assert_fail@plt+0x560c>
   170f8:	ldr	r0, [r4, #12]
   170fc:	str	r3, [r4, #20]
   17100:	cmp	r0, #0
   17104:	bne	172ec <__assert_fail@plt+0x5968>
   17108:	add	r3, r3, #4080	; 0xff0
   1710c:	str	r0, [sp, #4]
   17110:	add	r3, r3, #15
   17114:	mvn	r2, #0
   17118:	bic	r3, r3, #4080	; 0xff0
   1711c:	str	r2, [sp]
   17120:	bic	r5, r3, #15
   17124:	mov	r2, #3
   17128:	mov	r3, #34	; 0x22
   1712c:	str	r5, [r4, #20]
   17130:	mov	r1, r5
   17134:	bl	117ec <mmap@plt>
   17138:	cmn	r0, #1
   1713c:	str	r0, [r4, #24]
   17140:	movne	r2, #1
   17144:	movne	r6, r5
   17148:	strne	r2, [r4, #28]
   1714c:	strne	r2, [r4, #16]
   17150:	beq	172b4 <__assert_fail@plt+0x5930>
   17154:	ldr	r3, [r4, #16]
   17158:	movw	r5, #38044	; 0x949c
   1715c:	movt	r5, #2
   17160:	cmp	r3, #0
   17164:	bne	17244 <__assert_fail@plt+0x58c0>
   17168:	mov	r0, r6
   1716c:	bl	1175c <malloc@plt>
   17170:	cmp	r0, #0
   17174:	str	r0, [r5, #24]
   17178:	movne	r3, #1
   1717c:	movne	r8, r0
   17180:	strne	r3, [r5, #16]
   17184:	beq	172dc <__assert_fail@plt+0x5958>
   17188:	bl	115f4 <getuid@plt>
   1718c:	mov	r1, r6
   17190:	mov	r7, r0
   17194:	mov	r0, r8
   17198:	bl	11870 <mlock@plt>
   1719c:	subs	r5, r0, #0
   171a0:	beq	171b4 <__assert_fail@plt+0x5830>
   171a4:	bl	11804 <__errno_location@plt>
   171a8:	ldr	r3, [r0]
   171ac:	cmp	r3, #0
   171b0:	movne	r5, r3
   171b4:	cmp	r7, #0
   171b8:	bne	1724c <__assert_fail@plt+0x58c8>
   171bc:	cmp	r5, #0
   171c0:	beq	171e0 <__assert_fail@plt+0x585c>
   171c4:	bl	11804 <__errno_location@plt>
   171c8:	ldr	r3, [r0]
   171cc:	cmp	r3, #11
   171d0:	cmpne	r3, #1
   171d4:	bne	17298 <__assert_fail@plt+0x5914>
   171d8:	mov	r3, #1
   171dc:	str	r3, [r4, #8]
   171e0:	mov	r3, #0
   171e4:	str	r3, [r4, #32]
   171e8:	add	sp, sp, #8
   171ec:	pop	{r4, r5, r6, r7, r8, pc}
   171f0:	movw	r3, #38044	; 0x949c
   171f4:	movt	r3, #2
   171f8:	mov	r2, #1
   171fc:	str	r2, [r3, #12]
   17200:	bl	115f4 <getuid@plt>
   17204:	mov	r4, r0
   17208:	bl	116e4 <geteuid@plt>
   1720c:	cmp	r0, r4
   17210:	beq	171e8 <__assert_fail@plt+0x5864>
   17214:	mov	r0, r4
   17218:	bl	11918 <setuid@plt>
   1721c:	cmp	r0, #0
   17220:	bne	17238 <__assert_fail@plt+0x58b4>
   17224:	bl	115f4 <getuid@plt>
   17228:	mov	r4, r0
   1722c:	bl	116e4 <geteuid@plt>
   17230:	cmp	r4, r0
   17234:	beq	171e8 <__assert_fail@plt+0x5864>
   17238:	movw	r0, #34204	; 0x859c
   1723c:	movt	r0, #1
   17240:	bl	16ff4 <__assert_fail@plt+0x5670>
   17244:	ldr	r8, [r5, #24]
   17248:	b	17188 <__assert_fail@plt+0x5804>
   1724c:	bl	116e4 <geteuid@plt>
   17250:	cmp	r0, #0
   17254:	bne	171bc <__assert_fail@plt+0x5838>
   17258:	mov	r0, r7
   1725c:	bl	11918 <setuid@plt>
   17260:	cmp	r0, #0
   17264:	bne	1727c <__assert_fail@plt+0x58f8>
   17268:	bl	115f4 <getuid@plt>
   1726c:	mov	r6, r0
   17270:	bl	116e4 <geteuid@plt>
   17274:	cmp	r6, r0
   17278:	beq	171bc <__assert_fail@plt+0x5838>
   1727c:	bl	11804 <__errno_location@plt>
   17280:	ldr	r0, [r0]
   17284:	bl	11780 <strerror@plt>
   17288:	mov	r1, r0
   1728c:	movw	r0, #34344	; 0x8628
   17290:	movt	r0, #1
   17294:	bl	16ff4 <__assert_fail@plt+0x5670>
   17298:	mov	r0, r5
   1729c:	bl	11780 <strerror@plt>
   172a0:	mov	r1, r0
   172a4:	movw	r0, #34372	; 0x8644
   172a8:	movt	r0, #1
   172ac:	bl	16f90 <__assert_fail@plt+0x560c>
   172b0:	b	171d8 <__assert_fail@plt+0x5854>
   172b4:	bl	11804 <__errno_location@plt>
   172b8:	ldr	r0, [r0]
   172bc:	bl	11780 <strerror@plt>
   172c0:	mov	r1, r5
   172c4:	mov	r2, r0
   172c8:	movw	r0, #34256	; 0x85d0
   172cc:	movt	r0, #1
   172d0:	bl	16f90 <__assert_fail@plt+0x560c>
   172d4:	ldr	r6, [r4, #20]
   172d8:	b	17154 <__assert_fail@plt+0x57d0>
   172dc:	movw	r0, #34304	; 0x8600
   172e0:	mov	r1, r6
   172e4:	movt	r0, #1
   172e8:	bl	16ff4 <__assert_fail@plt+0x5670>
   172ec:	movw	r0, #34228	; 0x85b4
   172f0:	movt	r0, #1
   172f4:	bl	16ff4 <__assert_fail@plt+0x5670>
   172f8:	push	{r4, r5, r6, r7, r8, lr}
   172fc:	movw	r4, #38044	; 0x949c
   17300:	movt	r4, #2
   17304:	mov	r5, r0
   17308:	ldr	r3, [r4, #16]
   1730c:	cmp	r3, #0
   17310:	beq	17438 <__assert_fail@plt+0x5ab4>
   17314:	ldr	r3, [r4, #8]
   17318:	cmp	r3, #0
   1731c:	beq	1732c <__assert_fail@plt+0x59a8>
   17320:	ldr	r3, [r4]
   17324:	cmp	r3, #0
   17328:	beq	173e8 <__assert_fail@plt+0x5a64>
   1732c:	add	r1, r5, #47	; 0x2f
   17330:	ldr	r5, [r4, #32]
   17334:	bic	r1, r1, #31
   17338:	ldr	ip, [r4, #36]	; 0x24
   1733c:	ldr	r8, [r4, #20]
   17340:	add	r7, r1, r5
   17344:	mov	r6, #0
   17348:	cmp	ip, #0
   1734c:	beq	17380 <__assert_fail@plt+0x59fc>
   17350:	ldr	r3, [ip]
   17354:	cmp	r1, r3
   17358:	bls	17420 <__assert_fail@plt+0x5a9c>
   1735c:	mov	r2, ip
   17360:	b	17374 <__assert_fail@plt+0x59f0>
   17364:	ldr	r3, [r0]
   17368:	cmp	r1, r3
   1736c:	bls	17398 <__assert_fail@plt+0x5a14>
   17370:	mov	r2, r0
   17374:	ldr	r0, [r2, #8]
   17378:	cmp	r0, #0
   1737c:	bne	17364 <__assert_fail@plt+0x59e0>
   17380:	cmp	r7, r8
   17384:	bls	17408 <__assert_fail@plt+0x5a84>
   17388:	cmp	r6, #0
   1738c:	bne	17430 <__assert_fail@plt+0x5aac>
   17390:	mov	r6, #1
   17394:	b	17348 <__assert_fail@plt+0x59c4>
   17398:	ldr	r1, [r0, #8]
   1739c:	str	r1, [r2, #8]
   173a0:	ldr	r2, [r4, #40]	; 0x28
   173a4:	movw	r1, #38044	; 0x949c
   173a8:	ldr	ip, [r4, #48]	; 0x30
   173ac:	movt	r1, #2
   173b0:	add	r3, r3, r2
   173b4:	ldr	r2, [r4, #44]	; 0x2c
   173b8:	cmp	r3, ip
   173bc:	str	r3, [r4, #40]	; 0x28
   173c0:	strhi	r3, [r1, #48]	; 0x30
   173c4:	movw	r3, #38044	; 0x949c
   173c8:	ldr	r1, [r4, #52]	; 0x34
   173cc:	movt	r3, #2
   173d0:	add	r2, r2, #1
   173d4:	add	r0, r0, #8
   173d8:	cmp	r2, r1
   173dc:	str	r2, [r4, #44]	; 0x2c
   173e0:	strhi	r2, [r3, #52]	; 0x34
   173e4:	pop	{r4, r5, r6, r7, r8, pc}
   173e8:	ldr	r2, [r4, #4]
   173ec:	str	r3, [r4, #8]
   173f0:	cmp	r2, #0
   173f4:	bne	1732c <__assert_fail@plt+0x59a8>
   173f8:	movw	r0, #34168	; 0x8578
   173fc:	movt	r0, #1
   17400:	bl	16f90 <__assert_fail@plt+0x560c>
   17404:	b	1732c <__assert_fail@plt+0x59a8>
   17408:	ldr	r2, [r4, #24]
   1740c:	mov	r3, r1
   17410:	str	r7, [r4, #32]
   17414:	add	r0, r2, r5
   17418:	str	r1, [r2, r5]
   1741c:	b	173a0 <__assert_fail@plt+0x5a1c>
   17420:	ldr	r2, [ip, #8]
   17424:	mov	r0, ip
   17428:	str	r2, [r4, #36]	; 0x24
   1742c:	b	173a0 <__assert_fail@plt+0x5a1c>
   17430:	mov	r0, #0
   17434:	pop	{r4, r5, r6, r7, r8, pc}
   17438:	movw	r0, #34444	; 0x868c
   1743c:	movt	r0, #1
   17440:	bl	16f90 <__assert_fail@plt+0x560c>
   17444:	movw	r0, #34508	; 0x86cc
   17448:	movt	r0, #1
   1744c:	bl	16f90 <__assert_fail@plt+0x560c>
   17450:	mov	r0, #2
   17454:	bl	117c8 <exit@plt>
   17458:	cmp	r0, #0
   1745c:	push	{r4, r5}
   17460:	beq	174fc <__assert_fail@plt+0x5b78>
   17464:	ldr	r4, [r0, #-8]
   17468:	sub	ip, r0, #8
   1746c:	cmp	r4, #0
   17470:	subne	r3, r4, #8
   17474:	movne	r2, ip
   17478:	addne	r3, r0, r3
   1747c:	mvnne	r1, #0
   17480:	beq	174cc <__assert_fail@plt+0x5b48>
   17484:	strb	r1, [r2], #1
   17488:	cmp	r2, r3
   1748c:	bne	17484 <__assert_fail@plt+0x5b00>
   17490:	mov	r2, ip
   17494:	mvn	r1, #85	; 0x55
   17498:	strb	r1, [r2], #1
   1749c:	cmp	r2, r3
   174a0:	bne	17498 <__assert_fail@plt+0x5b14>
   174a4:	mov	r2, ip
   174a8:	mov	r1, #85	; 0x55
   174ac:	strb	r1, [r2], #1
   174b0:	cmp	r3, r2
   174b4:	bne	174ac <__assert_fail@plt+0x5b28>
   174b8:	mov	r2, ip
   174bc:	mov	r1, #0
   174c0:	strb	r1, [r2], #1
   174c4:	cmp	r3, r2
   174c8:	bne	174c0 <__assert_fail@plt+0x5b3c>
   174cc:	movw	r3, #38044	; 0x949c
   174d0:	movt	r3, #2
   174d4:	str	r4, [r0, #-8]
   174d8:	ldr	r5, [r3, #36]	; 0x24
   174dc:	ldr	r2, [r3, #44]	; 0x2c
   174e0:	ldr	r1, [r3, #40]	; 0x28
   174e4:	sub	r2, r2, #1
   174e8:	str	ip, [r3, #36]	; 0x24
   174ec:	rsb	r4, r4, r1
   174f0:	str	r5, [r0]
   174f4:	str	r2, [r3, #44]	; 0x2c
   174f8:	str	r4, [r3, #40]	; 0x28
   174fc:	pop	{r4, r5}
   17500:	bx	lr
   17504:	push	{r3, r4, r5, r6, r7, lr}
   17508:	mov	r4, r0
   1750c:	ldr	r5, [r0, #-8]
   17510:	mov	r6, r1
   17514:	cmp	r5, r1
   17518:	bls	17520 <__assert_fail@plt+0x5b9c>
   1751c:	pop	{r3, r4, r5, r6, r7, pc}
   17520:	mov	r0, r1
   17524:	bl	172f8 <__assert_fail@plt+0x5974>
   17528:	mov	r1, r4
   1752c:	mov	r2, r5
   17530:	mov	r7, r0
   17534:	bl	1163c <memcpy@plt>
   17538:	rsb	r2, r5, r6
   1753c:	mov	r1, #0
   17540:	add	r0, r7, r5
   17544:	bl	11840 <memset@plt>
   17548:	mov	r0, r4
   1754c:	bl	17458 <__assert_fail@plt+0x5ad4>
   17550:	mov	r0, r7
   17554:	pop	{r3, r4, r5, r6, r7, pc}
   17558:	movw	r3, #38044	; 0x949c
   1755c:	movt	r3, #2
   17560:	ldr	r2, [r3, #24]
   17564:	cmp	r2, r0
   17568:	bhi	17584 <__assert_fail@plt+0x5c00>
   1756c:	ldr	r3, [r3, #20]
   17570:	add	r2, r2, r3
   17574:	cmp	r0, r2
   17578:	movcs	r0, #0
   1757c:	movcc	r0, #1
   17580:	bx	lr
   17584:	mov	r0, #0
   17588:	bx	lr
   1758c:	push	{r4, lr}
   17590:	movw	r4, #38044	; 0x949c
   17594:	movt	r4, #2
   17598:	ldr	r3, [r4, #16]
   1759c:	cmp	r3, #0
   175a0:	popeq	{r4, pc}
   175a4:	ldr	r1, [r4, #20]
   175a8:	ldr	r0, [r4, #24]
   175ac:	cmp	r1, #0
   175b0:	addne	r3, r0, r1
   175b4:	movne	r2, r0
   175b8:	mvnne	ip, #0
   175bc:	beq	17608 <__assert_fail@plt+0x5c84>
   175c0:	strb	ip, [r2], #1
   175c4:	cmp	r2, r3
   175c8:	bne	175c0 <__assert_fail@plt+0x5c3c>
   175cc:	mov	r2, r0
   175d0:	mvn	ip, #85	; 0x55
   175d4:	strb	ip, [r2], #1
   175d8:	cmp	r2, r3
   175dc:	bne	175d4 <__assert_fail@plt+0x5c50>
   175e0:	mov	r2, r0
   175e4:	mov	ip, #85	; 0x55
   175e8:	strb	ip, [r2], #1
   175ec:	cmp	r2, r3
   175f0:	bne	175e8 <__assert_fail@plt+0x5c64>
   175f4:	mov	r2, r0
   175f8:	mov	ip, #0
   175fc:	strb	ip, [r2], #1
   17600:	cmp	r2, r3
   17604:	bne	175fc <__assert_fail@plt+0x5c78>
   17608:	ldr	r3, [r4, #28]
   1760c:	cmp	r3, #0
   17610:	bne	17630 <__assert_fail@plt+0x5cac>
   17614:	mov	r3, #0
   17618:	str	r3, [r4, #24]
   1761c:	str	r3, [r4, #16]
   17620:	str	r3, [r4, #20]
   17624:	str	r3, [r4, #32]
   17628:	str	r3, [r4, #36]	; 0x24
   1762c:	pop	{r4, pc}
   17630:	bl	118a0 <munmap@plt>
   17634:	b	17614 <__assert_fail@plt+0x5c90>
   17638:	movw	ip, #38044	; 0x949c
   1763c:	movt	ip, #2
   17640:	push	{r4, r5, r6, lr}
   17644:	sub	sp, sp, #24
   17648:	ldr	r3, [ip, #12]
   1764c:	cmp	r3, #0
   17650:	bne	1769c <__assert_fail@plt+0x5d18>
   17654:	ldr	r3, [ip, #40]	; 0x28
   17658:	movw	r1, #37928	; 0x9428
   1765c:	ldr	r6, [ip, #48]	; 0x30
   17660:	movt	r1, #2
   17664:	ldr	r5, [ip, #44]	; 0x2c
   17668:	movw	r2, #34564	; 0x8704
   1766c:	ldr	r4, [ip, #52]	; 0x34
   17670:	movt	r2, #1
   17674:	ldr	lr, [ip, #32]
   17678:	ldr	ip, [ip, #20]
   1767c:	ldr	r0, [r1]
   17680:	mov	r1, #1
   17684:	str	r6, [sp]
   17688:	str	r5, [sp, #4]
   1768c:	str	r4, [sp, #8]
   17690:	str	lr, [sp, #12]
   17694:	str	ip, [sp, #16]
   17698:	bl	1187c <__fprintf_chk@plt>
   1769c:	add	sp, sp, #24
   176a0:	pop	{r4, r5, r6, pc}
   176a4:	movw	r3, #38044	; 0x949c
   176a8:	movt	r3, #2
   176ac:	ldr	r0, [r3, #20]
   176b0:	bx	lr
   176b4:	push	{r3, r4, r5, r6, r7, lr}
   176b8:	subs	r5, r2, #0
   176bc:	mov	r7, r0
   176c0:	mov	r6, r1
   176c4:	bne	176dc <__assert_fail@plt+0x5d58>
   176c8:	b	17714 <__assert_fail@plt+0x5d90>
   176cc:	bl	11804 <__errno_location@plt>
   176d0:	ldr	r3, [r0]
   176d4:	cmp	r3, #4
   176d8:	bne	1770c <__assert_fail@plt+0x5d88>
   176dc:	mov	r0, r7
   176e0:	mov	r1, r6
   176e4:	mov	r2, r5
   176e8:	bl	11858 <write@plt>
   176ec:	cmn	r0, #1
   176f0:	mov	r4, r0
   176f4:	beq	176cc <__assert_fail@plt+0x5d48>
   176f8:	cmp	r0, #0
   176fc:	add	r6, r6, r0
   17700:	blt	1770c <__assert_fail@plt+0x5d88>
   17704:	subs	r5, r5, r0
   17708:	bne	176dc <__assert_fail@plt+0x5d58>
   1770c:	mov	r0, r4
   17710:	pop	{r3, r4, r5, r6, r7, pc}
   17714:	mov	r4, r5
   17718:	b	1770c <__assert_fail@plt+0x5d88>
   1771c:	push	{r3, r4, r5, lr}
   17720:	movw	r4, #38100	; 0x94d4
   17724:	movt	r4, #2
   17728:	ldr	r3, [r4]
   1772c:	cmp	r3, #0
   17730:	beq	1776c <__assert_fail@plt+0x5de8>
   17734:	ldr	r5, [r4, #4]
   17738:	ldr	r0, [r4, #8]
   1773c:	cmp	r5, r0
   17740:	popeq	{r3, r4, r5, pc}
   17744:	mov	r0, r5
   17748:	bl	11918 <setuid@plt>
   1774c:	cmp	r0, #0
   17750:	strge	r5, [r4, #8]
   17754:	popge	{r3, r4, r5, pc}
   17758:	movw	r0, #34624	; 0x8740
   1775c:	movt	r0, #1
   17760:	bl	116f0 <perror@plt>
   17764:	mov	r0, #1
   17768:	bl	117c8 <exit@plt>
   1776c:	bl	115f4 <getuid@plt>
   17770:	mov	r5, r0
   17774:	str	r0, [r4, #4]
   17778:	bl	116e4 <geteuid@plt>
   1777c:	mov	r3, #1
   17780:	str	r3, [r4]
   17784:	cmp	r5, r0
   17788:	str	r0, [r4, #8]
   1778c:	bne	17744 <__assert_fail@plt+0x5dc0>
   17790:	pop	{r3, r4, r5, pc}
   17794:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17798:	mov	r7, r0
   1779c:	ldr	r6, [pc, #76]	; 177f0 <__assert_fail@plt+0x5e6c>
   177a0:	mov	r8, r1
   177a4:	ldr	r5, [pc, #72]	; 177f4 <__assert_fail@plt+0x5e70>
   177a8:	mov	r9, r2
   177ac:	add	r6, pc, r6
   177b0:	bl	11538 <_init@@Base>
   177b4:	add	r5, pc, r5
   177b8:	rsb	r6, r5, r6
   177bc:	asrs	r6, r6, #2
   177c0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   177c4:	sub	r5, r5, #4
   177c8:	mov	r4, #0
   177cc:	add	r4, r4, #1
   177d0:	ldr	r3, [r5, #4]!
   177d4:	mov	r0, r7
   177d8:	mov	r1, r8
   177dc:	mov	r2, r9
   177e0:	blx	r3
   177e4:	cmp	r4, r6
   177e8:	bne	177cc <__assert_fail@plt+0x5e48>
   177ec:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   177f0:	andeq	r1, r1, ip, lsr r7
   177f4:	andeq	r1, r1, r0, lsr r7
   177f8:	bx	lr
   177fc:	ldr	r3, [pc, #28]	; 17820 <__assert_fail@plt+0x5e9c>
   17800:	mov	r1, #0
   17804:	ldr	r2, [pc, #24]	; 17824 <__assert_fail@plt+0x5ea0>
   17808:	add	r3, pc, r3
   1780c:	ldr	r3, [r3, r2]
   17810:	cmp	r3, #0
   17814:	ldrne	r2, [r3]
   17818:	moveq	r2, r3
   1781c:	b	11828 <__cxa_atexit@plt>
   17820:	strdeq	r1, [r1], -r0
   17824:	andeq	r0, r0, r8, ror r1

Disassembly of section .fini:

00017828 <_fini@@Base>:
   17828:	push	{r3, lr}
   1782c:	pop	{r3, pc}
