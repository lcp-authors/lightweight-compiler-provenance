
centos-preinstalled/basename:     file format elf32-littlearm


Disassembly of section .init:

00010e6c <.init>:
   10e6c:	push	{r3, lr}
   10e70:	bl	113b4 <close@plt+0x2b8>
   10e74:	pop	{r3, pc}

Disassembly of section .plt:

00010e78 <fdopen@plt-0x14>:
   10e78:	push	{lr}		; (str lr, [sp, #-4]!)
   10e7c:	ldr	lr, [pc, #4]	; 10e88 <fdopen@plt-0x4>
   10e80:	add	lr, pc, lr
   10e84:	ldr	pc, [lr, #8]!
   10e88:	andeq	r4, r1, r8, ror r1

00010e8c <fdopen@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #376]!	; 0x178

00010e98 <calloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #20, 20	; 0x14000
   10ea0:	ldr	pc, [ip, #368]!	; 0x170

00010ea4 <fputs_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #20, 20	; 0x14000
   10eac:	ldr	pc, [ip, #360]!	; 0x168

00010eb0 <raise@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #20, 20	; 0x14000
   10eb8:	ldr	pc, [ip, #352]!	; 0x160

00010ebc <strcmp@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #20, 20	; 0x14000
   10ec4:	ldr	pc, [ip, #344]!	; 0x158

00010ec8 <fflush@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #20, 20	; 0x14000
   10ed0:	ldr	pc, [ip, #336]!	; 0x150

00010ed4 <free@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #20, 20	; 0x14000
   10edc:	ldr	pc, [ip, #328]!	; 0x148

00010ee0 <_exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #20, 20	; 0x14000
   10ee8:	ldr	pc, [ip, #320]!	; 0x140

00010eec <memcpy@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #20, 20	; 0x14000
   10ef4:	ldr	pc, [ip, #312]!	; 0x138

00010ef8 <mbsinit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #20, 20	; 0x14000
   10f00:	ldr	pc, [ip, #304]!	; 0x130

00010f04 <memcmp@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #20, 20	; 0x14000
   10f0c:	ldr	pc, [ip, #296]!	; 0x128

00010f10 <dcgettext@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #20, 20	; 0x14000
   10f18:	ldr	pc, [ip, #288]!	; 0x120

00010f1c <__stack_chk_fail@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #20, 20	; 0x14000
   10f24:	ldr	pc, [ip, #280]!	; 0x118

00010f28 <realloc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #20, 20	; 0x14000
   10f30:	ldr	pc, [ip, #272]!	; 0x110

00010f34 <textdomain@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #20, 20	; 0x14000
   10f3c:	ldr	pc, [ip, #264]!	; 0x108

00010f40 <__strndup@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #20, 20	; 0x14000
   10f48:	ldr	pc, [ip, #256]!	; 0x100

00010f4c <iswprint@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #20, 20	; 0x14000
   10f54:	ldr	pc, [ip, #248]!	; 0xf8

00010f58 <fwrite@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #20, 20	; 0x14000
   10f60:	ldr	pc, [ip, #240]!	; 0xf0

00010f64 <lseek64@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #20, 20	; 0x14000
   10f6c:	ldr	pc, [ip, #232]!	; 0xe8

00010f70 <__ctype_get_mb_cur_max@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #20, 20	; 0x14000
   10f78:	ldr	pc, [ip, #224]!	; 0xe0

00010f7c <strcpy@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #20, 20	; 0x14000
   10f84:	ldr	pc, [ip, #216]!	; 0xd8

00010f88 <__fpending@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #20, 20	; 0x14000
   10f90:	ldr	pc, [ip, #208]!	; 0xd0

00010f94 <mbrtowc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #20, 20	; 0x14000
   10f9c:	ldr	pc, [ip, #200]!	; 0xc8

00010fa0 <error@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #20, 20	; 0x14000
   10fa8:	ldr	pc, [ip, #192]!	; 0xc0

00010fac <open64@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #20, 20	; 0x14000
   10fb4:	ldr	pc, [ip, #184]!	; 0xb8

00010fb8 <getenv@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #20, 20	; 0x14000
   10fc0:	ldr	pc, [ip, #176]!	; 0xb0

00010fc4 <malloc@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #20, 20	; 0x14000
   10fcc:	ldr	pc, [ip, #168]!	; 0xa8

00010fd0 <__libc_start_main@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #20, 20	; 0x14000
   10fd8:	ldr	pc, [ip, #160]!	; 0xa0

00010fdc <__freading@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #20, 20	; 0x14000
   10fe4:	ldr	pc, [ip, #152]!	; 0x98

00010fe8 <__gmon_start__@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #20, 20	; 0x14000
   10ff0:	ldr	pc, [ip, #144]!	; 0x90

00010ff4 <getopt_long@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #20, 20	; 0x14000
   10ffc:	ldr	pc, [ip, #136]!	; 0x88

00011000 <__ctype_b_loc@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #20, 20	; 0x14000
   11008:	ldr	pc, [ip, #128]!	; 0x80

0001100c <exit@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #20, 20	; 0x14000
   11014:	ldr	pc, [ip, #120]!	; 0x78

00011018 <strlen@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #20, 20	; 0x14000
   11020:	ldr	pc, [ip, #112]!	; 0x70

00011024 <ungetc@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #20, 20	; 0x14000
   1102c:	ldr	pc, [ip, #104]!	; 0x68

00011030 <__errno_location@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #20, 20	; 0x14000
   11038:	ldr	pc, [ip, #96]!	; 0x60

0001103c <__cxa_atexit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #20, 20	; 0x14000
   11044:	ldr	pc, [ip, #88]!	; 0x58

00011048 <memset@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #20, 20	; 0x14000
   11050:	ldr	pc, [ip, #80]!	; 0x50

00011054 <fscanf@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #20, 20	; 0x14000
   1105c:	ldr	pc, [ip, #72]!	; 0x48

00011060 <__printf_chk@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #20, 20	; 0x14000
   11068:	ldr	pc, [ip, #64]!	; 0x40

0001106c <fileno@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #20, 20	; 0x14000
   11074:	ldr	pc, [ip, #56]!	; 0x38

00011078 <__fprintf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #20, 20	; 0x14000
   11080:	ldr	pc, [ip, #48]!	; 0x30

00011084 <fclose@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #20, 20	; 0x14000
   1108c:	ldr	pc, [ip, #40]!	; 0x28

00011090 <fseeko64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #20, 20	; 0x14000
   11098:	ldr	pc, [ip, #32]!

0001109c <__uflow@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #20, 20	; 0x14000
   110a4:	ldr	pc, [ip, #24]!

000110a8 <__overflow@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #20, 20	; 0x14000
   110b0:	ldr	pc, [ip, #16]!

000110b4 <setlocale@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #20, 20	; 0x14000
   110bc:	ldr	pc, [ip, #8]!

000110c0 <strrchr@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #20, 20	; 0x14000
   110c8:	ldr	pc, [ip, #0]!

000110cc <nl_langinfo@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #77824	; 0x13000
   110d4:	ldr	pc, [ip, #4088]!	; 0xff8

000110d8 <bindtextdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #77824	; 0x13000
   110e0:	ldr	pc, [ip, #4080]!	; 0xff0

000110e4 <strncmp@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #77824	; 0x13000
   110ec:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f0 <abort@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #77824	; 0x13000
   110f8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110fc <close@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #77824	; 0x13000
   11104:	ldr	pc, [ip, #4056]!	; 0xfd8

Disassembly of section .text:

00011108 <close_stdout@@Base-0x710>:
   11108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1110c:	mov	r7, r0
   11110:	sub	sp, sp, #20
   11114:	ldr	r0, [r1]
   11118:	mov	r5, r1
   1111c:	bl	11a60 <close_stdout@@Base+0x248>
   11120:	ldr	r1, [pc, #528]	; 11338 <close@plt+0x23c>
   11124:	mov	r0, #6
   11128:	ldr	r6, [pc, #524]	; 1133c <close@plt+0x240>
   1112c:	mov	r4, #0
   11130:	add	r1, pc, r1
   11134:	ldr	r9, [pc, #516]	; 11340 <close@plt+0x244>
   11138:	bl	110b4 <setlocale@plt>
   1113c:	add	r6, pc, r6
   11140:	ldr	r1, [pc, #508]	; 11344 <close@plt+0x248>
   11144:	mov	sl, r4
   11148:	mov	r0, r6
   1114c:	str	r4, [sp, #12]
   11150:	add	r1, pc, r1
   11154:	ldr	r8, [pc, #492]	; 11348 <close@plt+0x24c>
   11158:	bl	110d8 <bindtextdomain@plt>
   1115c:	mov	r0, r6
   11160:	ldr	r6, [pc, #484]	; 1134c <close@plt+0x250>
   11164:	bl	10f34 <textdomain@plt>
   11168:	ldr	r3, [pc, #480]	; 11350 <close@plt+0x254>
   1116c:	add	r9, pc, r9
   11170:	add	r6, pc, r6
   11174:	str	r4, [sp, #8]
   11178:	add	r8, pc, r8
   1117c:	ldr	r0, [r6, r3]
   11180:	bl	143a8 <close_stdout@@Base+0x2b90>
   11184:	str	sl, [sp]
   11188:	mov	r0, r7
   1118c:	mov	r1, r5
   11190:	mov	r2, r9
   11194:	mov	r3, r8
   11198:	mov	fp, #0
   1119c:	bl	10ff4 <getopt_long@plt>
   111a0:	cmn	r0, #1
   111a4:	beq	11278 <close@plt+0x17c>
   111a8:	cmp	r0, #97	; 0x61
   111ac:	beq	1126c <close@plt+0x170>
   111b0:	bgt	111cc <close@plt+0xd0>
   111b4:	cmn	r0, #3
   111b8:	beq	111e8 <close@plt+0xec>
   111bc:	cmn	r0, #2
   111c0:	bne	11264 <close@plt+0x168>
   111c4:	mov	r0, fp
   111c8:	bl	11598 <close@plt+0x49c>
   111cc:	cmp	r0, #115	; 0x73
   111d0:	beq	11228 <close@plt+0x12c>
   111d4:	cmp	r0, #122	; 0x7a
   111d8:	bne	11264 <close@plt+0x168>
   111dc:	mov	r2, #1
   111e0:	str	r2, [sp, #12]
   111e4:	b	11184 <close@plt+0x88>
   111e8:	ldr	r1, [pc, #356]	; 11354 <close@plt+0x258>
   111ec:	ldr	r3, [pc, #356]	; 11358 <close@plt+0x25c>
   111f0:	ldr	r2, [pc, #356]	; 1135c <close@plt+0x260>
   111f4:	ldr	r0, [r6, r1]
   111f8:	ldr	r3, [r6, r3]
   111fc:	add	r2, pc, r2
   11200:	ldr	r1, [pc, #344]	; 11360 <close@plt+0x264>
   11204:	ldr	r0, [r0]
   11208:	ldr	r3, [r3]
   1120c:	add	r1, pc, r1
   11210:	stm	sp, {r2, fp}
   11214:	ldr	r2, [pc, #328]	; 11364 <close@plt+0x268>
   11218:	add	r2, pc, r2
   1121c:	bl	1374c <close_stdout@@Base+0x1f34>
   11220:	mov	r0, fp
   11224:	bl	1100c <exit@plt>
   11228:	ldr	r3, [pc, #312]	; 11368 <close@plt+0x26c>
   1122c:	mov	r2, #1
   11230:	str	r2, [sp, #8]
   11234:	ldr	r3, [r6, r3]
   11238:	ldr	r4, [r3]
   1123c:	b	11184 <close@plt+0x88>
   11240:	ldr	r1, [pc, #292]	; 1136c <close@plt+0x270>
   11244:	mov	r2, #5
   11248:	mov	r0, fp
   1124c:	add	r1, pc, r1
   11250:	bl	10f10 <dcgettext@plt>
   11254:	mov	r1, fp
   11258:	mov	r2, r0
   1125c:	mov	r0, fp
   11260:	bl	10fa0 <error@plt>
   11264:	mov	r0, #1
   11268:	bl	11598 <close@plt+0x49c>
   1126c:	mov	r3, #1
   11270:	str	r3, [sp, #8]
   11274:	b	11184 <close@plt+0x88>
   11278:	ldr	r3, [pc, #240]	; 11370 <close@plt+0x274>
   1127c:	ldr	r6, [r6, r3]
   11280:	ldr	r3, [r6]
   11284:	cmp	r7, r3
   11288:	ble	11240 <close@plt+0x144>
   1128c:	ldr	r2, [sp, #8]
   11290:	cmp	r2, #0
   11294:	bne	112c8 <close@plt+0x1cc>
   11298:	add	r2, r3, #2
   1129c:	cmp	r7, r2
   112a0:	bgt	112f4 <close@plt+0x1f8>
   112a4:	lsl	r2, r3, #2
   112a8:	ldr	r0, [r5, r3, lsl #2]
   112ac:	addeq	r2, r5, r2
   112b0:	ldrne	r1, [sp, #8]
   112b4:	ldreq	r1, [r2, #4]
   112b8:	ldr	r2, [sp, #12]
   112bc:	bl	114ac <close@plt+0x3b0>
   112c0:	mov	r0, #0
   112c4:	bl	1100c <exit@plt>
   112c8:	ldr	r8, [sp, #12]
   112cc:	ldr	r0, [r5, r3, lsl #2]
   112d0:	mov	r1, r4
   112d4:	mov	r2, r8
   112d8:	bl	114ac <close@plt+0x3b0>
   112dc:	ldr	r3, [r6]
   112e0:	add	r3, r3, #1
   112e4:	str	r3, [r6]
   112e8:	cmp	r7, r3
   112ec:	bgt	112cc <close@plt+0x1d0>
   112f0:	b	112c0 <close@plt+0x1c4>
   112f4:	ldr	r1, [pc, #120]	; 11374 <close@plt+0x278>
   112f8:	mov	r2, #5
   112fc:	ldr	r0, [sp, #8]
   11300:	add	r1, pc, r1
   11304:	bl	10f10 <dcgettext@plt>
   11308:	ldr	r3, [r6]
   1130c:	add	r3, r3, #2
   11310:	mov	r4, r0
   11314:	ldr	r0, [r5, r3, lsl #2]
   11318:	bl	132b0 <close_stdout@@Base+0x1a98>
   1131c:	mov	r2, r4
   11320:	mov	r3, r0
   11324:	ldr	r0, [sp, #8]
   11328:	mov	r1, r0
   1132c:	bl	10fa0 <error@plt>
   11330:	mov	r0, #1
   11334:	bl	11598 <close@plt+0x49c>
   11338:	andeq	r3, r0, r0, lsr #11
   1133c:			; <UNDEFINED> instruction: 0x000035b4
   11340:	andeq	r3, r0, ip, asr r6
   11344:	andeq	r3, r0, r4, ror #12
   11348:	andeq	r3, r1, r4, lsl #26
   1134c:	andeq	r3, r1, r8, lsl #29
   11350:	strdeq	r0, [r0], -r4
   11354:	andeq	r0, r0, r0, lsl #2
   11358:	andeq	r0, r0, ip, ror #1
   1135c:	andeq	r3, r0, r0, ror #11
   11360:	andeq	r3, r0, r4, asr #11
   11364:	ldrdeq	r3, [r0], -r4
   11368:	andeq	r0, r0, r8, lsl r1
   1136c:	andeq	r3, r0, r0, lsr #11
   11370:	andeq	r0, r0, r8, ror #1
   11374:	strdeq	r3, [r0], -ip
   11378:	mov	fp, #0
   1137c:	mov	lr, #0
   11380:	pop	{r1}		; (ldr r1, [sp], #4)
   11384:	mov	r2, sp
   11388:	push	{r2}		; (str r2, [sp, #-4]!)
   1138c:	push	{r0}		; (str r0, [sp, #-4]!)
   11390:	ldr	ip, [pc, #16]	; 113a8 <close@plt+0x2ac>
   11394:	push	{ip}		; (str ip, [sp, #-4]!)
   11398:	ldr	r0, [pc, #12]	; 113ac <close@plt+0x2b0>
   1139c:	ldr	r3, [pc, #12]	; 113b0 <close@plt+0x2b4>
   113a0:	bl	10fd0 <__libc_start_main@plt>
   113a4:	bl	110f0 <abort@plt>
   113a8:	andeq	r4, r1, r4, lsr #7
   113ac:	andeq	r1, r1, r8, lsl #2
   113b0:	andeq	r4, r1, r0, asr #6
   113b4:	ldr	r3, [pc, #20]	; 113d0 <close@plt+0x2d4>
   113b8:	ldr	r2, [pc, #20]	; 113d4 <close@plt+0x2d8>
   113bc:	add	r3, pc, r3
   113c0:	ldr	r2, [r3, r2]
   113c4:	cmp	r2, #0
   113c8:	bxeq	lr
   113cc:	b	10fe8 <__gmon_start__@plt>
   113d0:	andeq	r3, r1, ip, lsr ip
   113d4:	strdeq	r0, [r0], -r8
   113d8:	push	{r3, lr}
   113dc:	movw	r0, #20840	; 0x5168
   113e0:	ldr	r3, [pc, #36]	; 1140c <close@plt+0x310>
   113e4:	movt	r0, #2
   113e8:	rsb	r3, r0, r3
   113ec:	cmp	r3, #6
   113f0:	popls	{r3, pc}
   113f4:	movw	r3, #0
   113f8:	movt	r3, #0
   113fc:	cmp	r3, #0
   11400:	popeq	{r3, pc}
   11404:	blx	r3
   11408:	pop	{r3, pc}
   1140c:	andeq	r5, r2, fp, ror #2
   11410:	push	{r3, lr}
   11414:	movw	r0, #20840	; 0x5168
   11418:	movw	r3, #20840	; 0x5168
   1141c:	movt	r0, #2
   11420:	movt	r3, #2
   11424:	rsb	r3, r0, r3
   11428:	asr	r3, r3, #2
   1142c:	add	r3, r3, r3, lsr #31
   11430:	asrs	r1, r3, #1
   11434:	popeq	{r3, pc}
   11438:	movw	r2, #0
   1143c:	movt	r2, #0
   11440:	cmp	r2, #0
   11444:	popeq	{r3, pc}
   11448:	blx	r2
   1144c:	pop	{r3, pc}
   11450:	push	{r4, lr}
   11454:	movw	r4, #20840	; 0x5168
   11458:	movt	r4, #2
   1145c:	ldrb	r3, [r4]
   11460:	cmp	r3, #0
   11464:	popne	{r4, pc}
   11468:	bl	113d8 <close@plt+0x2dc>
   1146c:	mov	r3, #1
   11470:	strb	r3, [r4]
   11474:	pop	{r4, pc}
   11478:	movw	r0, #20096	; 0x4e80
   1147c:	movt	r0, #2
   11480:	push	{r3, lr}
   11484:	ldr	r3, [r0]
   11488:	cmp	r3, #0
   1148c:	beq	114a4 <close@plt+0x3a8>
   11490:	movw	r3, #0
   11494:	movt	r3, #0
   11498:	cmp	r3, #0
   1149c:	beq	114a4 <close@plt+0x3a8>
   114a0:	blx	r3
   114a4:	pop	{r3, lr}
   114a8:	b	11410 <close@plt+0x314>
   114ac:	push	{r4, r5, r6, r7, r8, lr}
   114b0:	mov	r5, r1
   114b4:	mov	r6, r2
   114b8:	bl	11930 <close_stdout@@Base+0x118>
   114bc:	ldr	r7, [pc, #204]	; 11590 <close@plt+0x494>
   114c0:	add	r7, pc, r7
   114c4:	mov	r4, r0
   114c8:	bl	11a28 <close_stdout@@Base+0x210>
   114cc:	cmp	r5, #0
   114d0:	beq	1153c <close@plt+0x440>
   114d4:	ldrb	r3, [r4]
   114d8:	cmp	r3, #47	; 0x2f
   114dc:	beq	1153c <close@plt+0x440>
   114e0:	mov	r0, r4
   114e4:	bl	11018 <strlen@plt>
   114e8:	mov	r8, r0
   114ec:	mov	r0, r5
   114f0:	bl	11018 <strlen@plt>
   114f4:	add	ip, r4, r8
   114f8:	add	r3, r5, r0
   114fc:	b	11514 <close@plt+0x418>
   11500:	ldrb	r2, [r0, #-1]
   11504:	sub	ip, ip, #1
   11508:	ldrb	r1, [r1, #-1]
   1150c:	cmp	r2, r1
   11510:	bne	1153c <close@plt+0x440>
   11514:	cmp	r5, r3
   11518:	cmpcc	r4, ip
   1151c:	mov	r1, r3
   11520:	mov	r0, ip
   11524:	sub	r3, r3, #1
   11528:	movcs	r2, #0
   1152c:	movcc	r2, #1
   11530:	bcc	11500 <close@plt+0x404>
   11534:	cmp	r4, ip
   11538:	strbcc	r2, [ip]
   1153c:	ldr	r3, [pc, #80]	; 11594 <close@plt+0x498>
   11540:	mov	r0, r4
   11544:	ldr	r5, [r7, r3]
   11548:	ldr	r1, [r5]
   1154c:	bl	10ea4 <fputs_unlocked@plt>
   11550:	ldr	r0, [r5]
   11554:	cmp	r6, #0
   11558:	ldr	r3, [r0, #20]
   1155c:	moveq	r1, #10
   11560:	ldr	r2, [r0, #24]
   11564:	movne	r1, #0
   11568:	cmp	r3, r2
   1156c:	addcc	r2, r3, #1
   11570:	strcc	r2, [r0, #20]
   11574:	strbcc	r1, [r3]
   11578:	bcs	11588 <close@plt+0x48c>
   1157c:	mov	r0, r4
   11580:	pop	{r4, r5, r6, r7, r8, lr}
   11584:	b	10ed4 <free@plt>
   11588:	bl	110a8 <__overflow@plt>
   1158c:	b	1157c <close@plt+0x480>
   11590:	andeq	r3, r1, r8, lsr fp
   11594:	andeq	r0, r0, r0, lsl #2
   11598:	push	{r4, r5, r6, lr}
   1159c:	subs	r4, r0, #0
   115a0:	ldr	r5, [pc, #512]	; 117a8 <close@plt+0x6ac>
   115a4:	sub	sp, sp, #8
   115a8:	add	r5, pc, r5
   115ac:	beq	115f4 <close@plt+0x4f8>
   115b0:	ldr	r3, [pc, #500]	; 117ac <close@plt+0x6b0>
   115b4:	mov	r2, #5
   115b8:	ldr	r1, [pc, #496]	; 117b0 <close@plt+0x6b4>
   115bc:	mov	r0, #0
   115c0:	ldr	r3, [r5, r3]
   115c4:	add	r1, pc, r1
   115c8:	ldr	r6, [r3]
   115cc:	bl	10f10 <dcgettext@plt>
   115d0:	ldr	r3, [pc, #476]	; 117b4 <close@plt+0x6b8>
   115d4:	mov	r1, #1
   115d8:	ldr	r3, [r5, r3]
   115dc:	ldr	r3, [r3]
   115e0:	mov	r2, r0
   115e4:	mov	r0, r6
   115e8:	bl	11078 <__fprintf_chk@plt>
   115ec:	mov	r0, r4
   115f0:	bl	1100c <exit@plt>
   115f4:	ldr	r1, [pc, #444]	; 117b8 <close@plt+0x6bc>
   115f8:	mov	r2, #5
   115fc:	add	r1, pc, r1
   11600:	bl	10f10 <dcgettext@plt>
   11604:	ldr	r3, [pc, #424]	; 117b4 <close@plt+0x6b8>
   11608:	ldr	r6, [r5, r3]
   1160c:	ldr	r2, [r6]
   11610:	mov	r3, r2
   11614:	mov	r1, r0
   11618:	mov	r0, #1
   1161c:	bl	11060 <__printf_chk@plt>
   11620:	ldr	r1, [pc, #404]	; 117bc <close@plt+0x6c0>
   11624:	mov	r2, #5
   11628:	mov	r0, r4
   1162c:	add	r1, pc, r1
   11630:	bl	10f10 <dcgettext@plt>
   11634:	ldr	r3, [pc, #388]	; 117c0 <close@plt+0x6c4>
   11638:	ldr	r5, [r5, r3]
   1163c:	ldr	r1, [r5]
   11640:	bl	10ea4 <fputs_unlocked@plt>
   11644:	ldr	r1, [pc, #376]	; 117c4 <close@plt+0x6c8>
   11648:	mov	r2, #5
   1164c:	mov	r0, r4
   11650:	add	r1, pc, r1
   11654:	bl	10f10 <dcgettext@plt>
   11658:	ldr	r1, [r5]
   1165c:	bl	10ea4 <fputs_unlocked@plt>
   11660:	ldr	r1, [pc, #352]	; 117c8 <close@plt+0x6cc>
   11664:	mov	r2, #5
   11668:	mov	r0, r4
   1166c:	add	r1, pc, r1
   11670:	bl	10f10 <dcgettext@plt>
   11674:	ldr	r1, [r5]
   11678:	bl	10ea4 <fputs_unlocked@plt>
   1167c:	ldr	r1, [pc, #328]	; 117cc <close@plt+0x6d0>
   11680:	mov	r2, #5
   11684:	mov	r0, r4
   11688:	add	r1, pc, r1
   1168c:	bl	10f10 <dcgettext@plt>
   11690:	ldr	r1, [r5]
   11694:	bl	10ea4 <fputs_unlocked@plt>
   11698:	ldr	r1, [pc, #304]	; 117d0 <close@plt+0x6d4>
   1169c:	mov	r2, #5
   116a0:	mov	r0, r4
   116a4:	add	r1, pc, r1
   116a8:	bl	10f10 <dcgettext@plt>
   116ac:	ldr	r1, [r5]
   116b0:	bl	10ea4 <fputs_unlocked@plt>
   116b4:	ldr	r1, [pc, #280]	; 117d4 <close@plt+0x6d8>
   116b8:	mov	r2, #5
   116bc:	mov	r0, r4
   116c0:	add	r1, pc, r1
   116c4:	bl	10f10 <dcgettext@plt>
   116c8:	ldr	r3, [r6]
   116cc:	mov	r2, r3
   116d0:	str	r3, [sp]
   116d4:	str	r3, [sp, #4]
   116d8:	mov	r1, r0
   116dc:	mov	r0, #1
   116e0:	bl	11060 <__printf_chk@plt>
   116e4:	ldr	r1, [pc, #236]	; 117d8 <close@plt+0x6dc>
   116e8:	mov	r2, #5
   116ec:	mov	r0, r4
   116f0:	add	r1, pc, r1
   116f4:	bl	10f10 <dcgettext@plt>
   116f8:	ldr	r2, [pc, #220]	; 117dc <close@plt+0x6e0>
   116fc:	ldr	r3, [pc, #220]	; 117e0 <close@plt+0x6e4>
   11700:	add	r2, pc, r2
   11704:	add	r3, pc, r3
   11708:	mov	r1, r0
   1170c:	mov	r0, #1
   11710:	bl	11060 <__printf_chk@plt>
   11714:	mov	r0, #5
   11718:	mov	r1, r4
   1171c:	bl	110b4 <setlocale@plt>
   11720:	cmp	r0, #0
   11724:	beq	11740 <close@plt+0x644>
   11728:	ldr	r1, [pc, #180]	; 117e4 <close@plt+0x6e8>
   1172c:	mov	r2, #3
   11730:	add	r1, pc, r1
   11734:	bl	110e4 <strncmp@plt>
   11738:	cmp	r0, #0
   1173c:	bne	11774 <close@plt+0x678>
   11740:	ldr	r1, [pc, #160]	; 117e8 <close@plt+0x6ec>
   11744:	mov	r2, #5
   11748:	mov	r0, #0
   1174c:	add	r1, pc, r1
   11750:	bl	10f10 <dcgettext@plt>
   11754:	mov	r5, r0
   11758:	ldr	r0, [r6]
   1175c:	bl	11984 <close_stdout@@Base+0x16c>
   11760:	mov	r1, r5
   11764:	mov	r2, r0
   11768:	mov	r0, #1
   1176c:	bl	11060 <__printf_chk@plt>
   11770:	b	115ec <close@plt+0x4f0>
   11774:	ldr	r1, [pc, #112]	; 117ec <close@plt+0x6f0>
   11778:	mov	r2, #5
   1177c:	mov	r0, r4
   11780:	add	r1, pc, r1
   11784:	bl	10f10 <dcgettext@plt>
   11788:	mov	r5, r0
   1178c:	ldr	r0, [r6]
   11790:	bl	11984 <close_stdout@@Base+0x16c>
   11794:	mov	r1, r5
   11798:	mov	r2, r0
   1179c:	mov	r0, #1
   117a0:	bl	11060 <__printf_chk@plt>
   117a4:	b	11740 <close@plt+0x644>
   117a8:	andeq	r3, r1, r0, asr sl
   117ac:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   117b0:	andeq	r2, r0, r8, lsl lr
   117b4:	andeq	r0, r0, ip, lsl #2
   117b8:	andeq	r2, r0, r8, lsl #28
   117bc:	andeq	r2, r0, r0, lsl lr
   117c0:	andeq	r0, r0, r0, lsl #2
   117c4:	andeq	r2, r0, r4, asr lr
   117c8:	andeq	r2, r0, r4, lsl #29
   117cc:	andeq	r2, r0, r8, lsr #30
   117d0:	andeq	r2, r0, ip, lsr pc
   117d4:	andeq	r2, r0, r8, asr pc
   117d8:	andeq	r2, r0, r4, ror #31
   117dc:	andeq	r2, r0, ip, ror #31
   117e0:	strdeq	r2, [r0], -r8
   117e4:	strdeq	r2, [r0], -r4
   117e8:	andeq	r3, r0, r4, lsr #32
   117ec:	andeq	r2, r0, r8, lsr #31
   117f0:	ldr	r3, [pc, #8]	; 11800 <close@plt+0x704>
   117f4:	add	r3, pc, r3
   117f8:	str	r0, [r3]
   117fc:	bx	lr
   11800:	andeq	r3, r1, r0, ror r9
   11804:	ldr	r3, [pc, #8]	; 11814 <close@plt+0x718>
   11808:	add	r3, pc, r3
   1180c:	strb	r0, [r3, #4]
   11810:	bx	lr
   11814:	andeq	r3, r1, ip, asr r9

00011818 <close_stdout@@Base>:
   11818:	push	{r4, r5, r6, r7, lr}
   1181c:	sub	sp, sp, #12
   11820:	ldr	r4, [pc, #228]	; 1190c <close_stdout@@Base+0xf4>
   11824:	ldr	r3, [pc, #228]	; 11910 <close_stdout@@Base+0xf8>
   11828:	add	r4, pc, r4
   1182c:	ldr	r3, [r4, r3]
   11830:	ldr	r0, [r3]
   11834:	bl	13adc <close_stdout@@Base+0x22c4>
   11838:	cmp	r0, #0
   1183c:	beq	11864 <close_stdout@@Base+0x4c>
   11840:	ldr	r3, [pc, #204]	; 11914 <close_stdout@@Base+0xfc>
   11844:	add	r3, pc, r3
   11848:	ldrb	r3, [r3, #4]
   1184c:	cmp	r3, #0
   11850:	beq	11884 <close_stdout@@Base+0x6c>
   11854:	bl	11030 <__errno_location@plt>
   11858:	ldr	r3, [r0]
   1185c:	cmp	r3, #32
   11860:	bne	11884 <close_stdout@@Base+0x6c>
   11864:	ldr	r3, [pc, #172]	; 11918 <close_stdout@@Base+0x100>
   11868:	ldr	r3, [r4, r3]
   1186c:	ldr	r0, [r3]
   11870:	bl	13adc <close_stdout@@Base+0x22c4>
   11874:	cmp	r0, #0
   11878:	bne	118d8 <close_stdout@@Base+0xc0>
   1187c:	add	sp, sp, #12
   11880:	pop	{r4, r5, r6, r7, pc}
   11884:	ldr	r1, [pc, #144]	; 1191c <close_stdout@@Base+0x104>
   11888:	mov	r0, #0
   1188c:	mov	r2, #5
   11890:	add	r1, pc, r1
   11894:	bl	10f10 <dcgettext@plt>
   11898:	ldr	r3, [pc, #128]	; 11920 <close_stdout@@Base+0x108>
   1189c:	ldr	r5, [pc, r3]
   118a0:	cmp	r5, #0
   118a4:	mov	r6, r0
   118a8:	beq	118e8 <close_stdout@@Base+0xd0>
   118ac:	bl	11030 <__errno_location@plt>
   118b0:	ldr	r7, [r0]
   118b4:	mov	r0, r5
   118b8:	bl	1315c <close_stdout@@Base+0x1944>
   118bc:	ldr	r2, [pc, #96]	; 11924 <close_stdout@@Base+0x10c>
   118c0:	str	r6, [sp]
   118c4:	mov	r1, r7
   118c8:	add	r2, pc, r2
   118cc:	mov	r3, r0
   118d0:	mov	r0, #0
   118d4:	bl	10fa0 <error@plt>
   118d8:	ldr	r3, [pc, #72]	; 11928 <close_stdout@@Base+0x110>
   118dc:	ldr	r3, [r4, r3]
   118e0:	ldr	r0, [r3]
   118e4:	bl	10ee0 <_exit@plt>
   118e8:	bl	11030 <__errno_location@plt>
   118ec:	ldr	r2, [pc, #56]	; 1192c <close_stdout@@Base+0x114>
   118f0:	add	r2, pc, r2
   118f4:	mov	r3, r0
   118f8:	mov	r0, r5
   118fc:	ldr	r1, [r3]
   11900:	mov	r3, r6
   11904:	bl	10fa0 <error@plt>
   11908:	b	118d8 <close_stdout@@Base+0xc0>
   1190c:	ldrdeq	r3, [r1], -r0
   11910:	andeq	r0, r0, r0, lsl #2
   11914:	andeq	r3, r1, r0, lsr #18
   11918:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1191c:			; <UNDEFINED> instruction: 0x00002fb4
   11920:	andeq	r3, r1, r8, asr #17
   11924:	andeq	r2, r0, r8, lsl #31
   11928:	andeq	r0, r0, r4, lsl #2
   1192c:	andeq	r2, r0, r4, ror #30
   11930:	push	{r3, r4, r5, lr}
   11934:	mov	r5, r0
   11938:	bl	11984 <close_stdout@@Base+0x16c>
   1193c:	ldrb	r3, [r0]
   11940:	mov	r4, r0
   11944:	cmp	r3, #0
   11948:	beq	1196c <close_stdout@@Base+0x154>
   1194c:	bl	119e0 <close_stdout@@Base+0x1c8>
   11950:	ldrb	r3, [r4, r0]
   11954:	mov	r1, r0
   11958:	cmp	r3, #47	; 0x2f
   1195c:	addeq	r1, r0, #1
   11960:	mov	r0, r4
   11964:	pop	{r3, r4, r5, lr}
   11968:	b	13ac8 <close_stdout@@Base+0x22b0>
   1196c:	mov	r0, r5
   11970:	bl	119e0 <close_stdout@@Base+0x1c8>
   11974:	mov	r1, r0
   11978:	mov	r0, r5
   1197c:	pop	{r3, r4, r5, lr}
   11980:	b	13ac8 <close_stdout@@Base+0x22b0>
   11984:	ldrb	r3, [r0]
   11988:	cmp	r3, #47	; 0x2f
   1198c:	bne	119a8 <close_stdout@@Base+0x190>
   11990:	add	r2, r0, #1
   11994:	mov	r0, r2
   11998:	add	r2, r2, #1
   1199c:	ldrb	r3, [r0]
   119a0:	cmp	r3, #47	; 0x2f
   119a4:	beq	11994 <close_stdout@@Base+0x17c>
   119a8:	cmp	r3, #0
   119ac:	bxeq	lr
   119b0:	mov	r2, r0
   119b4:	mov	r1, #0
   119b8:	cmp	r3, #47	; 0x2f
   119bc:	moveq	r1, #1
   119c0:	beq	119d0 <close_stdout@@Base+0x1b8>
   119c4:	cmp	r1, #0
   119c8:	movne	r0, r2
   119cc:	movne	r1, #0
   119d0:	ldrb	r3, [r2, #1]!
   119d4:	cmp	r3, #0
   119d8:	bne	119b8 <close_stdout@@Base+0x1a0>
   119dc:	bx	lr
   119e0:	push	{r4, lr}
   119e4:	mov	r4, r0
   119e8:	bl	11018 <strlen@plt>
   119ec:	cmp	r0, #1
   119f0:	popls	{r4, pc}
   119f4:	sub	r3, r0, #1
   119f8:	ldrb	r2, [r4, r3]
   119fc:	cmp	r2, #47	; 0x2f
   11a00:	popne	{r4, pc}
   11a04:	mov	r0, r3
   11a08:	cmp	r0, #1
   11a0c:	sub	r3, r3, #1
   11a10:	beq	11a24 <close_stdout@@Base+0x20c>
   11a14:	ldrb	r2, [r4, r3]
   11a18:	cmp	r2, #47	; 0x2f
   11a1c:	popne	{r4, pc}
   11a20:	b	11a04 <close_stdout@@Base+0x1ec>
   11a24:	pop	{r4, pc}
   11a28:	push	{r4, lr}
   11a2c:	mov	r4, r0
   11a30:	bl	11984 <close_stdout@@Base+0x16c>
   11a34:	ldrb	r3, [r0]
   11a38:	cmp	r3, #0
   11a3c:	movne	r4, r0
   11a40:	mov	r0, r4
   11a44:	bl	119e0 <close_stdout@@Base+0x1c8>
   11a48:	mov	r2, #0
   11a4c:	ldrb	r3, [r4, r0]
   11a50:	strb	r2, [r4, r0]
   11a54:	subs	r0, r3, r2
   11a58:	movne	r0, #1
   11a5c:	pop	{r4, pc}
   11a60:	push	{r3, r4, r5, r6, r7, lr}
   11a64:	subs	r4, r0, #0
   11a68:	ldr	r5, [pc, #172]	; 11b1c <close_stdout@@Base+0x304>
   11a6c:	add	r5, pc, r5
   11a70:	beq	11af8 <close_stdout@@Base+0x2e0>
   11a74:	mov	r1, #47	; 0x2f
   11a78:	bl	110c0 <strrchr@plt>
   11a7c:	subs	r6, r0, #0
   11a80:	beq	11adc <close_stdout@@Base+0x2c4>
   11a84:	add	r7, r6, #1
   11a88:	rsb	r3, r4, r7
   11a8c:	cmp	r3, #6
   11a90:	ble	11adc <close_stdout@@Base+0x2c4>
   11a94:	ldr	r1, [pc, #132]	; 11b20 <close_stdout@@Base+0x308>
   11a98:	sub	r0, r6, #6
   11a9c:	mov	r2, #7
   11aa0:	add	r1, pc, r1
   11aa4:	bl	110e4 <strncmp@plt>
   11aa8:	cmp	r0, #0
   11aac:	bne	11adc <close_stdout@@Base+0x2c4>
   11ab0:	ldr	r1, [pc, #108]	; 11b24 <close_stdout@@Base+0x30c>
   11ab4:	mov	r0, r7
   11ab8:	mov	r2, #3
   11abc:	add	r1, pc, r1
   11ac0:	bl	110e4 <strncmp@plt>
   11ac4:	cmp	r0, #0
   11ac8:	movne	r4, r7
   11acc:	ldreq	r3, [pc, #84]	; 11b28 <close_stdout@@Base+0x310>
   11ad0:	addeq	r4, r6, #4
   11ad4:	ldreq	r3, [r5, r3]
   11ad8:	streq	r4, [r3]
   11adc:	ldr	r2, [pc, #72]	; 11b2c <close_stdout@@Base+0x314>
   11ae0:	ldr	r3, [pc, #72]	; 11b30 <close_stdout@@Base+0x318>
   11ae4:	ldr	r2, [r5, r2]
   11ae8:	str	r4, [r2]
   11aec:	ldr	r3, [r5, r3]
   11af0:	str	r4, [r3]
   11af4:	pop	{r3, r4, r5, r6, r7, pc}
   11af8:	ldr	r3, [pc, #52]	; 11b34 <close_stdout@@Base+0x31c>
   11afc:	mov	r1, #1
   11b00:	ldr	r0, [pc, #48]	; 11b38 <close_stdout@@Base+0x320>
   11b04:	mov	r2, #55	; 0x37
   11b08:	ldr	r3, [r5, r3]
   11b0c:	add	r0, pc, r0
   11b10:	ldr	r3, [r3]
   11b14:	bl	10f58 <fwrite@plt>
   11b18:	bl	110f0 <abort@plt>
   11b1c:	andeq	r3, r1, ip, lsl #11
   11b20:	strdeq	r2, [r0], -r0
   11b24:	ldrdeq	r2, [r0], -ip
   11b28:	andeq	r0, r0, r4, lsl r1
   11b2c:	andeq	r0, r0, ip, lsl #2
   11b30:	andeq	r0, r0, r8, lsl #2
   11b34:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11b38:	andeq	r2, r0, ip, asr #26
   11b3c:	push	{r3, lr}
   11b40:	mov	r3, r0
   11b44:	mov	r2, #0
   11b48:	cmp	r1, #8
   11b4c:	str	r2, [r3], #4
   11b50:	add	r3, r3, #4
   11b54:	str	r2, [r0, #4]
   11b58:	str	r2, [r3], #4
   11b5c:	str	r2, [r3], #4
   11b60:	str	r2, [r3], #4
   11b64:	str	r2, [r3], #4
   11b68:	str	r2, [r3], #4
   11b6c:	str	r2, [r3], #4
   11b70:	str	r2, [r3], #4
   11b74:	str	r2, [r3], #4
   11b78:	str	r2, [r3], #4
   11b7c:	str	r2, [r3]
   11b80:	beq	11b8c <close_stdout@@Base+0x374>
   11b84:	str	r1, [r0]
   11b88:	pop	{r3, pc}
   11b8c:	bl	110f0 <abort@plt>
   11b90:	push	{r4, r5, r6, lr}
   11b94:	mov	r4, r0
   11b98:	mov	r6, r1
   11b9c:	mov	r0, #0
   11ba0:	mov	r1, r4
   11ba4:	mov	r2, #5
   11ba8:	bl	10f10 <dcgettext@plt>
   11bac:	cmp	r0, r4
   11bb0:	mov	r5, r0
   11bb4:	beq	11bbc <close_stdout@@Base+0x3a4>
   11bb8:	pop	{r4, r5, r6, pc}
   11bbc:	bl	13b5c <close_stdout@@Base+0x2344>
   11bc0:	ldrb	r3, [r0]
   11bc4:	bic	r3, r3, #32
   11bc8:	cmp	r3, #85	; 0x55
   11bcc:	bne	11c40 <close_stdout@@Base+0x428>
   11bd0:	ldrb	r3, [r0, #1]
   11bd4:	bic	r3, r3, #32
   11bd8:	cmp	r3, #84	; 0x54
   11bdc:	bne	11c2c <close_stdout@@Base+0x414>
   11be0:	ldrb	r3, [r0, #2]
   11be4:	bic	r3, r3, #32
   11be8:	cmp	r3, #70	; 0x46
   11bec:	bne	11c2c <close_stdout@@Base+0x414>
   11bf0:	ldrb	r3, [r0, #3]
   11bf4:	cmp	r3, #45	; 0x2d
   11bf8:	bne	11c2c <close_stdout@@Base+0x414>
   11bfc:	ldrb	r3, [r0, #4]
   11c00:	cmp	r3, #56	; 0x38
   11c04:	bne	11c2c <close_stdout@@Base+0x414>
   11c08:	ldrb	r3, [r0, #5]
   11c0c:	cmp	r3, #0
   11c10:	bne	11c2c <close_stdout@@Base+0x414>
   11c14:	ldrb	r3, [r5]
   11c18:	cmp	r3, #96	; 0x60
   11c1c:	beq	11cb8 <close_stdout@@Base+0x4a0>
   11c20:	ldr	r0, [pc, #180]	; 11cdc <close_stdout@@Base+0x4c4>
   11c24:	add	r0, pc, r0
   11c28:	pop	{r4, r5, r6, pc}
   11c2c:	cmp	r6, #7
   11c30:	beq	11cc4 <close_stdout@@Base+0x4ac>
   11c34:	ldr	r0, [pc, #164]	; 11ce0 <close_stdout@@Base+0x4c8>
   11c38:	add	r0, pc, r0
   11c3c:	pop	{r4, r5, r6, pc}
   11c40:	cmp	r3, #71	; 0x47
   11c44:	bne	11c2c <close_stdout@@Base+0x414>
   11c48:	ldrb	r3, [r0, #1]
   11c4c:	bic	r3, r3, #32
   11c50:	cmp	r3, #66	; 0x42
   11c54:	bne	11c2c <close_stdout@@Base+0x414>
   11c58:	ldrb	r3, [r0, #2]
   11c5c:	cmp	r3, #49	; 0x31
   11c60:	bne	11c2c <close_stdout@@Base+0x414>
   11c64:	ldrb	r3, [r0, #3]
   11c68:	cmp	r3, #56	; 0x38
   11c6c:	bne	11c2c <close_stdout@@Base+0x414>
   11c70:	ldrb	r3, [r0, #4]
   11c74:	cmp	r3, #48	; 0x30
   11c78:	bne	11c2c <close_stdout@@Base+0x414>
   11c7c:	ldrb	r3, [r0, #5]
   11c80:	cmp	r3, #51	; 0x33
   11c84:	bne	11c2c <close_stdout@@Base+0x414>
   11c88:	ldrb	r3, [r0, #6]
   11c8c:	cmp	r3, #48	; 0x30
   11c90:	bne	11c2c <close_stdout@@Base+0x414>
   11c94:	ldrb	r3, [r0, #7]
   11c98:	cmp	r3, #0
   11c9c:	bne	11c2c <close_stdout@@Base+0x414>
   11ca0:	ldrb	r3, [r5]
   11ca4:	cmp	r3, #96	; 0x60
   11ca8:	beq	11cd0 <close_stdout@@Base+0x4b8>
   11cac:	ldr	r0, [pc, #48]	; 11ce4 <close_stdout@@Base+0x4cc>
   11cb0:	add	r0, pc, r0
   11cb4:	pop	{r4, r5, r6, pc}
   11cb8:	ldr	r0, [pc, #40]	; 11ce8 <close_stdout@@Base+0x4d0>
   11cbc:	add	r0, pc, r0
   11cc0:	pop	{r4, r5, r6, pc}
   11cc4:	ldr	r0, [pc, #32]	; 11cec <close_stdout@@Base+0x4d4>
   11cc8:	add	r0, pc, r0
   11ccc:	pop	{r4, r5, r6, pc}
   11cd0:	ldr	r0, [pc, #24]	; 11cf0 <close_stdout@@Base+0x4d8>
   11cd4:	add	r0, pc, r0
   11cd8:	pop	{r4, r5, r6, pc}
   11cdc:	muleq	r0, r8, ip
   11ce0:	andeq	r2, r0, ip, lsl #25
   11ce4:	andeq	r2, r0, r0, lsl ip
   11ce8:	andeq	r2, r0, r4, lsl ip
   11cec:	andeq	r2, r0, r0, lsl #24
   11cf0:	strdeq	r2, [r0], -r8
   11cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf8:	sub	sp, sp, #124	; 0x7c
   11cfc:	ldr	ip, [pc, #3304]	; 129ec <close_stdout@@Base+0x11d4>
   11d00:	mov	sl, r1
   11d04:	str	r0, [sp, #40]	; 0x28
   11d08:	mov	r8, r3
   11d0c:	ldr	r0, [pc, #3292]	; 129f0 <close_stdout@@Base+0x11d8>
   11d10:	add	ip, pc, ip
   11d14:	str	r2, [sp, #32]
   11d18:	ldr	r1, [sp, #164]	; 0xa4
   11d1c:	mov	r3, ip
   11d20:	ldr	r0, [ip, r0]
   11d24:	ldr	r2, [sp, #172]	; 0xac
   11d28:	ubfx	r1, r1, #1, #1
   11d2c:	str	r1, [sp, #36]	; 0x24
   11d30:	str	r0, [sp, #56]	; 0x38
   11d34:	ldr	r0, [sp, #168]	; 0xa8
   11d38:	ldr	r1, [sp, #176]	; 0xb0
   11d3c:	str	r2, [sp, #72]	; 0x48
   11d40:	str	r0, [sp, #48]	; 0x30
   11d44:	ldr	r0, [sp, #56]	; 0x38
   11d48:	str	r1, [sp, #68]	; 0x44
   11d4c:	ldr	r3, [r0]
   11d50:	str	r3, [sp, #116]	; 0x74
   11d54:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   11d58:	ldr	r2, [sp, #160]	; 0xa0
   11d5c:	str	r0, [sp, #64]	; 0x40
   11d60:	cmp	r2, #8
   11d64:	addls	pc, pc, r2, lsl #2
   11d68:	b	128c8 <close_stdout@@Base+0x10b0>
   11d6c:	b	11d90 <close_stdout@@Base+0x578>
   11d70:	b	125e0 <close_stdout@@Base+0xdc8>
   11d74:	b	12610 <close_stdout@@Base+0xdf8>
   11d78:	b	124c0 <close_stdout@@Base+0xca8>
   11d7c:	b	12500 <close_stdout@@Base+0xce8>
   11d80:	b	1252c <close_stdout@@Base+0xd14>
   11d84:	b	1254c <close_stdout@@Base+0xd34>
   11d88:	b	1254c <close_stdout@@Base+0xd34>
   11d8c:	b	1254c <close_stdout@@Base+0xd34>
   11d90:	mov	r2, #0
   11d94:	str	r2, [sp, #36]	; 0x24
   11d98:	mov	r9, r2
   11d9c:	str	r2, [sp, #24]
   11da0:	str	r2, [sp, #28]
   11da4:	str	r2, [sp, #52]	; 0x34
   11da8:	ldr	r0, [sp, #36]	; 0x24
   11dac:	mov	fp, #0
   11db0:	ldr	r1, [sp, #24]
   11db4:	eor	r2, r0, #1
   11db8:	eor	r3, r1, #1
   11dbc:	and	r3, r2, r3
   11dc0:	and	r2, r1, r0
   11dc4:	str	r3, [sp, #44]	; 0x2c
   11dc8:	str	r2, [sp, #76]	; 0x4c
   11dcc:	cmn	r8, #1
   11dd0:	beq	12150 <close_stdout@@Base+0x938>
   11dd4:	subs	r3, fp, r8
   11dd8:	movne	r3, #1
   11ddc:	cmp	r3, #0
   11de0:	beq	12168 <close_stdout@@Base+0x950>
   11de4:	ldr	r3, [sp, #28]
   11de8:	ldr	r0, [sp, #24]
   11dec:	adds	r7, r3, #0
   11df0:	movne	r7, #1
   11df4:	ands	r6, r7, r0
   11df8:	bne	12654 <close_stdout@@Base+0xe3c>
   11dfc:	ldr	r1, [sp, #32]
   11e00:	add	r5, r1, fp
   11e04:	ldrb	r4, [r5]
   11e08:	cmp	r4, #126	; 0x7e
   11e0c:	addls	pc, pc, r4, lsl #2
   11e10:	b	123d4 <close_stdout@@Base+0xbbc>
   11e14:	b	122e0 <close_stdout@@Base+0xac8>
   11e18:	b	123d4 <close_stdout@@Base+0xbbc>
   11e1c:	b	123d4 <close_stdout@@Base+0xbbc>
   11e20:	b	123d4 <close_stdout@@Base+0xbbc>
   11e24:	b	123d4 <close_stdout@@Base+0xbbc>
   11e28:	b	123d4 <close_stdout@@Base+0xbbc>
   11e2c:	b	123d4 <close_stdout@@Base+0xbbc>
   11e30:	b	122c8 <close_stdout@@Base+0xab0>
   11e34:	b	122b0 <close_stdout@@Base+0xa98>
   11e38:	b	122d8 <close_stdout@@Base+0xac0>
   11e3c:	b	122d0 <close_stdout@@Base+0xab8>
   11e40:	b	122c0 <close_stdout@@Base+0xaa8>
   11e44:	b	122b8 <close_stdout@@Base+0xaa0>
   11e48:	b	1227c <close_stdout@@Base+0xa64>
   11e4c:	b	123d4 <close_stdout@@Base+0xbbc>
   11e50:	b	123d4 <close_stdout@@Base+0xbbc>
   11e54:	b	123d4 <close_stdout@@Base+0xbbc>
   11e58:	b	123d4 <close_stdout@@Base+0xbbc>
   11e5c:	b	123d4 <close_stdout@@Base+0xbbc>
   11e60:	b	123d4 <close_stdout@@Base+0xbbc>
   11e64:	b	123d4 <close_stdout@@Base+0xbbc>
   11e68:	b	123d4 <close_stdout@@Base+0xbbc>
   11e6c:	b	123d4 <close_stdout@@Base+0xbbc>
   11e70:	b	123d4 <close_stdout@@Base+0xbbc>
   11e74:	b	123d4 <close_stdout@@Base+0xbbc>
   11e78:	b	123d4 <close_stdout@@Base+0xbbc>
   11e7c:	b	123d4 <close_stdout@@Base+0xbbc>
   11e80:	b	123d4 <close_stdout@@Base+0xbbc>
   11e84:	b	123d4 <close_stdout@@Base+0xbbc>
   11e88:	b	123d4 <close_stdout@@Base+0xbbc>
   11e8c:	b	123d4 <close_stdout@@Base+0xbbc>
   11e90:	b	123d4 <close_stdout@@Base+0xbbc>
   11e94:	b	12208 <close_stdout@@Base+0x9f0>
   11e98:	b	12208 <close_stdout@@Base+0x9f0>
   11e9c:	b	12208 <close_stdout@@Base+0x9f0>
   11ea0:	b	12200 <close_stdout@@Base+0x9e8>
   11ea4:	b	12208 <close_stdout@@Base+0x9f0>
   11ea8:	b	120dc <close_stdout@@Base+0x8c4>
   11eac:	b	12208 <close_stdout@@Base+0x9f0>
   11eb0:	b	1237c <close_stdout@@Base+0xb64>
   11eb4:	b	12208 <close_stdout@@Base+0x9f0>
   11eb8:	b	12208 <close_stdout@@Base+0x9f0>
   11ebc:	b	12208 <close_stdout@@Base+0x9f0>
   11ec0:	b	120dc <close_stdout@@Base+0x8c4>
   11ec4:	b	120dc <close_stdout@@Base+0x8c4>
   11ec8:	b	120dc <close_stdout@@Base+0x8c4>
   11ecc:	b	120dc <close_stdout@@Base+0x8c4>
   11ed0:	b	120dc <close_stdout@@Base+0x8c4>
   11ed4:	b	120dc <close_stdout@@Base+0x8c4>
   11ed8:	b	120dc <close_stdout@@Base+0x8c4>
   11edc:	b	120dc <close_stdout@@Base+0x8c4>
   11ee0:	b	120dc <close_stdout@@Base+0x8c4>
   11ee4:	b	120dc <close_stdout@@Base+0x8c4>
   11ee8:	b	120dc <close_stdout@@Base+0x8c4>
   11eec:	b	120dc <close_stdout@@Base+0x8c4>
   11ef0:	b	120dc <close_stdout@@Base+0x8c4>
   11ef4:	b	120dc <close_stdout@@Base+0x8c4>
   11ef8:	b	120dc <close_stdout@@Base+0x8c4>
   11efc:	b	120dc <close_stdout@@Base+0x8c4>
   11f00:	b	12208 <close_stdout@@Base+0x9f0>
   11f04:	b	12208 <close_stdout@@Base+0x9f0>
   11f08:	b	12208 <close_stdout@@Base+0x9f0>
   11f0c:	b	12208 <close_stdout@@Base+0x9f0>
   11f10:	b	12010 <close_stdout@@Base+0x7f8>
   11f14:	b	123d4 <close_stdout@@Base+0xbbc>
   11f18:	b	120dc <close_stdout@@Base+0x8c4>
   11f1c:	b	120dc <close_stdout@@Base+0x8c4>
   11f20:	b	120dc <close_stdout@@Base+0x8c4>
   11f24:	b	120dc <close_stdout@@Base+0x8c4>
   11f28:	b	120dc <close_stdout@@Base+0x8c4>
   11f2c:	b	120dc <close_stdout@@Base+0x8c4>
   11f30:	b	120dc <close_stdout@@Base+0x8c4>
   11f34:	b	120dc <close_stdout@@Base+0x8c4>
   11f38:	b	120dc <close_stdout@@Base+0x8c4>
   11f3c:	b	120dc <close_stdout@@Base+0x8c4>
   11f40:	b	120dc <close_stdout@@Base+0x8c4>
   11f44:	b	120dc <close_stdout@@Base+0x8c4>
   11f48:	b	120dc <close_stdout@@Base+0x8c4>
   11f4c:	b	120dc <close_stdout@@Base+0x8c4>
   11f50:	b	120dc <close_stdout@@Base+0x8c4>
   11f54:	b	120dc <close_stdout@@Base+0x8c4>
   11f58:	b	120dc <close_stdout@@Base+0x8c4>
   11f5c:	b	120dc <close_stdout@@Base+0x8c4>
   11f60:	b	120dc <close_stdout@@Base+0x8c4>
   11f64:	b	120dc <close_stdout@@Base+0x8c4>
   11f68:	b	120dc <close_stdout@@Base+0x8c4>
   11f6c:	b	120dc <close_stdout@@Base+0x8c4>
   11f70:	b	120dc <close_stdout@@Base+0x8c4>
   11f74:	b	120dc <close_stdout@@Base+0x8c4>
   11f78:	b	120dc <close_stdout@@Base+0x8c4>
   11f7c:	b	120dc <close_stdout@@Base+0x8c4>
   11f80:	b	12208 <close_stdout@@Base+0x9f0>
   11f84:	b	12360 <close_stdout@@Base+0xb48>
   11f88:	b	120dc <close_stdout@@Base+0x8c4>
   11f8c:	b	12208 <close_stdout@@Base+0x9f0>
   11f90:	b	120dc <close_stdout@@Base+0x8c4>
   11f94:	b	12208 <close_stdout@@Base+0x9f0>
   11f98:	b	120dc <close_stdout@@Base+0x8c4>
   11f9c:	b	120dc <close_stdout@@Base+0x8c4>
   11fa0:	b	120dc <close_stdout@@Base+0x8c4>
   11fa4:	b	120dc <close_stdout@@Base+0x8c4>
   11fa8:	b	120dc <close_stdout@@Base+0x8c4>
   11fac:	b	120dc <close_stdout@@Base+0x8c4>
   11fb0:	b	120dc <close_stdout@@Base+0x8c4>
   11fb4:	b	120dc <close_stdout@@Base+0x8c4>
   11fb8:	b	120dc <close_stdout@@Base+0x8c4>
   11fbc:	b	120dc <close_stdout@@Base+0x8c4>
   11fc0:	b	120dc <close_stdout@@Base+0x8c4>
   11fc4:	b	120dc <close_stdout@@Base+0x8c4>
   11fc8:	b	120dc <close_stdout@@Base+0x8c4>
   11fcc:	b	120dc <close_stdout@@Base+0x8c4>
   11fd0:	b	120dc <close_stdout@@Base+0x8c4>
   11fd4:	b	120dc <close_stdout@@Base+0x8c4>
   11fd8:	b	120dc <close_stdout@@Base+0x8c4>
   11fdc:	b	120dc <close_stdout@@Base+0x8c4>
   11fe0:	b	120dc <close_stdout@@Base+0x8c4>
   11fe4:	b	120dc <close_stdout@@Base+0x8c4>
   11fe8:	b	120dc <close_stdout@@Base+0x8c4>
   11fec:	b	120dc <close_stdout@@Base+0x8c4>
   11ff0:	b	120dc <close_stdout@@Base+0x8c4>
   11ff4:	b	120dc <close_stdout@@Base+0x8c4>
   11ff8:	b	120dc <close_stdout@@Base+0x8c4>
   11ffc:	b	120dc <close_stdout@@Base+0x8c4>
   12000:	b	121e8 <close_stdout@@Base+0x9d0>
   12004:	b	12208 <close_stdout@@Base+0x9f0>
   12008:	b	121e8 <close_stdout@@Base+0x9d0>
   1200c:	b	12200 <close_stdout@@Base+0x9e8>
   12010:	ldr	r3, [sp, #160]	; 0xa0
   12014:	cmp	r3, #2
   12018:	beq	128a4 <close_stdout@@Base+0x108c>
   1201c:	cmp	r3, #3
   12020:	bne	120dc <close_stdout@@Base+0x8c4>
   12024:	ldr	r1, [sp, #164]	; 0xa4
   12028:	tst	r1, #4
   1202c:	beq	120dc <close_stdout@@Base+0x8c4>
   12030:	add	r3, fp, #2
   12034:	cmp	r8, r3
   12038:	bls	120dc <close_stdout@@Base+0x8c4>
   1203c:	ldrb	r2, [r5, #1]
   12040:	mov	r1, #1
   12044:	cmp	r2, #63	; 0x3f
   12048:	bne	120dc <close_stdout@@Base+0x8c4>
   1204c:	ldr	r0, [sp, #32]
   12050:	ldrb	ip, [r0, r3]
   12054:	sub	r0, ip, #33	; 0x21
   12058:	uxtb	r0, r0
   1205c:	cmp	r0, #29
   12060:	bhi	120dc <close_stdout@@Base+0x8c4>
   12064:	lsl	r1, r1, r0
   12068:	movw	r0, #20929	; 0x51c1
   1206c:	movt	r0, #14336	; 0x3800
   12070:	and	r0, r1, r0
   12074:	cmp	r0, #0
   12078:	beq	120dc <close_stdout@@Base+0x8c4>
   1207c:	ldr	r1, [sp, #36]	; 0x24
   12080:	cmp	r1, #0
   12084:	bne	12224 <close_stdout@@Base+0xa0c>
   12088:	cmp	r9, sl
   1208c:	mov	r4, ip
   12090:	mov	fp, r3
   12094:	ldrcc	r0, [sp, #40]	; 0x28
   12098:	strbcc	r2, [r0, r9]
   1209c:	add	r2, r9, #1
   120a0:	cmp	sl, r2
   120a4:	ldrhi	r0, [sp, #40]	; 0x28
   120a8:	movhi	r1, #34	; 0x22
   120ac:	strbhi	r1, [r0, r2]
   120b0:	add	r2, r9, #2
   120b4:	cmp	sl, r2
   120b8:	ldrhi	r0, [sp, #40]	; 0x28
   120bc:	movhi	r1, #34	; 0x22
   120c0:	strbhi	r1, [r0, r2]
   120c4:	add	r2, r9, #3
   120c8:	cmp	sl, r2
   120cc:	add	r9, r9, #4
   120d0:	ldrhi	r0, [sp, #40]	; 0x28
   120d4:	movhi	r1, #63	; 0x3f
   120d8:	strbhi	r1, [r0, r2]
   120dc:	ldr	r0, [sp, #44]	; 0x2c
   120e0:	cmp	r0, #0
   120e4:	bne	1210c <close_stdout@@Base+0x8f4>
   120e8:	ldr	r1, [sp, #48]	; 0x30
   120ec:	cmp	r1, #0
   120f0:	beq	1210c <close_stdout@@Base+0x8f4>
   120f4:	ubfx	r2, r4, #5, #8
   120f8:	and	r3, r4, #31
   120fc:	ldr	r2, [r1, r2, lsl #2]
   12100:	lsr	r3, r2, r3
   12104:	tst	r3, #1
   12108:	bne	12114 <close_stdout@@Base+0x8fc>
   1210c:	cmp	r6, #0
   12110:	beq	12134 <close_stdout@@Base+0x91c>
   12114:	ldr	r2, [sp, #36]	; 0x24
   12118:	cmp	r2, #0
   1211c:	bne	12224 <close_stdout@@Base+0xa0c>
   12120:	cmp	r9, sl
   12124:	ldrcc	r0, [sp, #40]	; 0x28
   12128:	movcc	r3, #92	; 0x5c
   1212c:	strbcc	r3, [r0, r9]
   12130:	add	r9, r9, #1
   12134:	add	fp, fp, #1
   12138:	cmp	r9, sl
   1213c:	ldrcc	r1, [sp, #40]	; 0x28
   12140:	strbcc	r4, [r1, r9]
   12144:	cmn	r8, #1
   12148:	add	r9, r9, #1
   1214c:	bne	11dd4 <close_stdout@@Base+0x5bc>
   12150:	ldr	r2, [sp, #32]
   12154:	ldrb	r3, [r2, fp]
   12158:	adds	r3, r3, #0
   1215c:	movne	r3, #1
   12160:	cmp	r3, #0
   12164:	bne	11de4 <close_stdout@@Base+0x5cc>
   12168:	ldr	r3, [sp, #160]	; 0xa0
   1216c:	cmp	r9, #0
   12170:	cmpeq	r3, #2
   12174:	bne	12184 <close_stdout@@Base+0x96c>
   12178:	ldr	r0, [sp, #36]	; 0x24
   1217c:	cmp	r0, #0
   12180:	bne	12224 <close_stdout@@Base+0xa0c>
   12184:	ldr	r1, [sp, #36]	; 0x24
   12188:	ldr	r2, [sp, #52]	; 0x34
   1218c:	eor	r3, r1, #1
   12190:	cmp	r2, #0
   12194:	moveq	r3, #0
   12198:	andne	r3, r3, #1
   1219c:	cmp	r3, #0
   121a0:	beq	121cc <close_stdout@@Base+0x9b4>
   121a4:	ldrb	r3, [r2]
   121a8:	cmp	r3, #0
   121ac:	beq	121cc <close_stdout@@Base+0x9b4>
   121b0:	ldr	r1, [sp, #40]	; 0x28
   121b4:	cmp	sl, r9
   121b8:	strbhi	r3, [r1, r9]
   121bc:	ldrb	r3, [r2, #1]!
   121c0:	add	r9, r9, #1
   121c4:	cmp	r3, #0
   121c8:	bne	121b4 <close_stdout@@Base+0x99c>
   121cc:	cmp	r9, sl
   121d0:	movcs	r0, r9
   121d4:	ldrcc	r1, [sp, #40]	; 0x28
   121d8:	movcc	r3, #0
   121dc:	movcc	r0, r9
   121e0:	strbcc	r3, [r1, r9]
   121e4:	b	12260 <close_stdout@@Base+0xa48>
   121e8:	cmn	r8, #1
   121ec:	beq	128b4 <close_stdout@@Base+0x109c>
   121f0:	subs	r3, r8, #1
   121f4:	movne	r3, #1
   121f8:	cmp	r3, #0
   121fc:	bne	120dc <close_stdout@@Base+0x8c4>
   12200:	cmp	fp, #0
   12204:	bne	120dc <close_stdout@@Base+0x8c4>
   12208:	ldr	r3, [sp, #36]	; 0x24
   1220c:	ldr	r0, [sp, #160]	; 0xa0
   12210:	cmp	r0, #2
   12214:	movne	r3, #0
   12218:	andeq	r3, r3, #1
   1221c:	cmp	r3, #0
   12220:	beq	120dc <close_stdout@@Base+0x8c4>
   12224:	ldr	r2, [sp, #164]	; 0xa4
   12228:	mov	ip, #0
   1222c:	ldr	r0, [sp, #160]	; 0xa0
   12230:	bic	r3, r2, #2
   12234:	ldr	r1, [sp, #72]	; 0x48
   12238:	ldr	r2, [sp, #68]	; 0x44
   1223c:	stm	sp, {r0, r3}
   12240:	mov	r3, r8
   12244:	str	r1, [sp, #12]
   12248:	mov	r1, sl
   1224c:	str	r2, [sp, #16]
   12250:	ldr	r0, [sp, #40]	; 0x28
   12254:	ldr	r2, [sp, #32]
   12258:	str	ip, [sp, #8]
   1225c:	bl	11cf4 <close_stdout@@Base+0x4dc>
   12260:	ldr	r1, [sp, #56]	; 0x38
   12264:	ldr	r2, [sp, #116]	; 0x74
   12268:	ldr	r3, [r1]
   1226c:	cmp	r2, r3
   12270:	bne	129a4 <close_stdout@@Base+0x118c>
   12274:	add	sp, sp, #124	; 0x7c
   12278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1227c:	mov	r3, #114	; 0x72
   12280:	ldr	r2, [sp, #36]	; 0x24
   12284:	ldr	r0, [sp, #160]	; 0xa0
   12288:	cmp	r0, #2
   1228c:	movne	r2, #0
   12290:	andeq	r2, r2, #1
   12294:	cmp	r2, #0
   12298:	bne	12224 <close_stdout@@Base+0xa0c>
   1229c:	ldr	r1, [sp, #24]
   122a0:	cmp	r1, #0
   122a4:	beq	120dc <close_stdout@@Base+0x8c4>
   122a8:	mov	r4, r3
   122ac:	b	12114 <close_stdout@@Base+0x8fc>
   122b0:	mov	r3, #98	; 0x62
   122b4:	b	1229c <close_stdout@@Base+0xa84>
   122b8:	mov	r3, #102	; 0x66
   122bc:	b	1229c <close_stdout@@Base+0xa84>
   122c0:	mov	r3, #118	; 0x76
   122c4:	b	1229c <close_stdout@@Base+0xa84>
   122c8:	mov	r3, #97	; 0x61
   122cc:	b	1229c <close_stdout@@Base+0xa84>
   122d0:	mov	r3, #110	; 0x6e
   122d4:	b	12280 <close_stdout@@Base+0xa68>
   122d8:	mov	r3, #116	; 0x74
   122dc:	b	12280 <close_stdout@@Base+0xa68>
   122e0:	ldr	r2, [sp, #24]
   122e4:	cmp	r2, #0
   122e8:	beq	12890 <close_stdout@@Base+0x1078>
   122ec:	ldr	r3, [sp, #36]	; 0x24
   122f0:	cmp	r3, #0
   122f4:	bne	12224 <close_stdout@@Base+0xa0c>
   122f8:	cmp	r9, sl
   122fc:	add	r2, r9, #1
   12300:	ldrcc	r0, [sp, #40]	; 0x28
   12304:	movcc	r3, #92	; 0x5c
   12308:	strbcc	r3, [r0, r9]
   1230c:	add	r3, fp, #1
   12310:	cmp	r8, r3
   12314:	bls	12354 <close_stdout@@Base+0xb3c>
   12318:	ldr	r1, [sp, #32]
   1231c:	ldrb	r3, [r1, r3]
   12320:	sub	r3, r3, #48	; 0x30
   12324:	cmp	r3, #9
   12328:	bhi	12354 <close_stdout@@Base+0xb3c>
   1232c:	cmp	sl, r2
   12330:	ldrhi	r0, [sp, #40]	; 0x28
   12334:	movhi	r3, #48	; 0x30
   12338:	strbhi	r3, [r0, r2]
   1233c:	add	r3, r9, #2
   12340:	cmp	sl, r3
   12344:	ldrhi	r1, [sp, #40]	; 0x28
   12348:	movhi	r2, #48	; 0x30
   1234c:	strbhi	r2, [r1, r3]
   12350:	add	r2, r9, #3
   12354:	mov	r9, r2
   12358:	mov	r4, #48	; 0x30
   1235c:	b	120e8 <close_stdout@@Base+0x8d0>
   12360:	ldr	r1, [sp, #76]	; 0x4c
   12364:	cmp	r1, #0
   12368:	beq	12374 <close_stdout@@Base+0xb5c>
   1236c:	cmp	r7, #0
   12370:	bne	12134 <close_stdout@@Base+0x91c>
   12374:	mov	r3, r4
   12378:	b	12280 <close_stdout@@Base+0xa68>
   1237c:	ldr	r1, [sp, #160]	; 0xa0
   12380:	cmp	r1, #2
   12384:	bne	120dc <close_stdout@@Base+0x8c4>
   12388:	ldr	r2, [sp, #36]	; 0x24
   1238c:	cmp	r2, #0
   12390:	bne	12224 <close_stdout@@Base+0xa0c>
   12394:	cmp	r9, sl
   12398:	ldrcc	r0, [sp, #40]	; 0x28
   1239c:	movcc	r3, #39	; 0x27
   123a0:	strbcc	r3, [r0, r9]
   123a4:	add	r3, r9, #1
   123a8:	cmp	sl, r3
   123ac:	ldrhi	r1, [sp, #40]	; 0x28
   123b0:	movhi	r2, #92	; 0x5c
   123b4:	strbhi	r2, [r1, r3]
   123b8:	add	r3, r9, #2
   123bc:	cmp	sl, r3
   123c0:	add	r9, r9, #3
   123c4:	ldrhi	r0, [sp, #40]	; 0x28
   123c8:	movhi	r2, #39	; 0x27
   123cc:	strbhi	r2, [r0, r3]
   123d0:	b	120dc <close_stdout@@Base+0x8c4>
   123d4:	ldr	r1, [sp, #64]	; 0x40
   123d8:	cmp	r1, #1
   123dc:	bne	126d4 <close_stdout@@Base+0xebc>
   123e0:	bl	11000 <__ctype_b_loc@plt>
   123e4:	ldr	r2, [sp, #64]	; 0x40
   123e8:	sxth	r3, r4
   123ec:	str	r2, [sp, #60]	; 0x3c
   123f0:	lsl	r3, r3, #1
   123f4:	ldr	r2, [r0]
   123f8:	ldrh	r2, [r2, r3]
   123fc:	eor	r2, r2, #16384	; 0x4000
   12400:	ubfx	r2, r2, #14, #1
   12404:	ldr	r1, [sp, #24]
   12408:	ands	r2, r2, r1
   1240c:	beq	120dc <close_stdout@@Base+0x8c4>
   12410:	ldr	r3, [sp, #60]	; 0x3c
   12414:	mov	r0, #92	; 0x5c
   12418:	ldr	r7, [sp, #36]	; 0x24
   1241c:	add	r1, r3, fp
   12420:	str	r8, [sp, #60]	; 0x3c
   12424:	ldr	r3, [sp, #40]	; 0x28
   12428:	b	1248c <close_stdout@@Base+0xc74>
   1242c:	cmp	r7, #0
   12430:	bne	128cc <close_stdout@@Base+0x10b4>
   12434:	add	ip, r9, #1
   12438:	cmp	r9, sl
   1243c:	strbcc	r0, [r3, r9]
   12440:	cmp	sl, ip
   12444:	lsrhi	r8, r4, #6
   12448:	addhi	r8, r8, #48	; 0x30
   1244c:	strbhi	r8, [r3, ip]
   12450:	add	ip, r9, #2
   12454:	add	r9, r9, #3
   12458:	cmp	sl, ip
   1245c:	ubfxhi	r8, r4, #3, #3
   12460:	and	r4, r4, #7
   12464:	add	r4, r4, #48	; 0x30
   12468:	addhi	r8, r8, #48	; 0x30
   1246c:	strbhi	r8, [r3, ip]
   12470:	add	fp, fp, #1
   12474:	cmp	r1, fp
   12478:	bls	124b8 <close_stdout@@Base+0xca0>
   1247c:	cmp	r9, sl
   12480:	strbcc	r4, [r3, r9]
   12484:	ldrb	r4, [r5, #1]!
   12488:	add	r9, r9, #1
   1248c:	cmp	r2, #0
   12490:	bne	1242c <close_stdout@@Base+0xc14>
   12494:	cmp	r6, #0
   12498:	beq	12470 <close_stdout@@Base+0xc58>
   1249c:	add	fp, fp, #1
   124a0:	cmp	r9, sl
   124a4:	strbcc	r0, [r3, r9]
   124a8:	cmp	r1, fp
   124ac:	add	r9, r9, #1
   124b0:	mov	r6, #0
   124b4:	bhi	1247c <close_stdout@@Base+0xc64>
   124b8:	ldr	r8, [sp, #60]	; 0x3c
   124bc:	b	12138 <close_stdout@@Base+0x920>
   124c0:	ldr	r3, [sp, #36]	; 0x24
   124c4:	cmp	r3, #0
   124c8:	bne	129cc <close_stdout@@Base+0x11b4>
   124cc:	cmp	sl, #0
   124d0:	beq	128e4 <close_stdout@@Base+0x10cc>
   124d4:	ldr	r1, [sp, #40]	; 0x28
   124d8:	mov	r0, #1
   124dc:	ldr	r2, [pc, #1296]	; 129f4 <close_stdout@@Base+0x11dc>
   124e0:	mov	r3, #34	; 0x22
   124e4:	str	r0, [sp, #24]
   124e8:	mov	r9, r0
   124ec:	add	r2, pc, r2
   124f0:	str	r0, [sp, #28]
   124f4:	strb	r3, [r1]
   124f8:	str	r2, [sp, #52]	; 0x34
   124fc:	b	11da8 <close_stdout@@Base+0x590>
   12500:	ldr	r3, [pc, #1264]	; 129f8 <close_stdout@@Base+0x11e0>
   12504:	mov	r2, #1
   12508:	mov	r0, #3
   1250c:	str	r2, [sp, #36]	; 0x24
   12510:	add	r3, pc, r3
   12514:	str	r2, [sp, #24]
   12518:	str	r3, [sp, #52]	; 0x34
   1251c:	mov	r9, #0
   12520:	str	r2, [sp, #28]
   12524:	str	r0, [sp, #160]	; 0xa0
   12528:	b	11da8 <close_stdout@@Base+0x590>
   1252c:	mov	r0, #0
   12530:	mov	r1, #1
   12534:	str	r0, [sp, #36]	; 0x24
   12538:	mov	r9, r0
   1253c:	str	r1, [sp, #24]
   12540:	str	r0, [sp, #28]
   12544:	str	r0, [sp, #52]	; 0x34
   12548:	b	11da8 <close_stdout@@Base+0x590>
   1254c:	ldr	r3, [sp, #160]	; 0xa0
   12550:	cmp	r3, #8
   12554:	beq	12580 <close_stdout@@Base+0xd68>
   12558:	ldr	r0, [pc, #1180]	; 129fc <close_stdout@@Base+0x11e4>
   1255c:	mov	r1, r3
   12560:	add	r0, pc, r0
   12564:	bl	11b90 <close_stdout@@Base+0x378>
   12568:	ldr	r1, [sp, #160]	; 0xa0
   1256c:	str	r0, [sp, #72]	; 0x48
   12570:	ldr	r0, [pc, #1160]	; 12a00 <close_stdout@@Base+0x11e8>
   12574:	add	r0, pc, r0
   12578:	bl	11b90 <close_stdout@@Base+0x378>
   1257c:	str	r0, [sp, #68]	; 0x44
   12580:	ldr	r0, [sp, #36]	; 0x24
   12584:	cmp	r0, #0
   12588:	movne	r9, #0
   1258c:	bne	125c4 <close_stdout@@Base+0xdac>
   12590:	ldr	r1, [sp, #72]	; 0x48
   12594:	ldrb	r3, [r1]
   12598:	cmp	r3, #0
   1259c:	beq	1299c <close_stdout@@Base+0x1184>
   125a0:	mov	r2, r1
   125a4:	ldr	r1, [sp, #40]	; 0x28
   125a8:	mov	r9, r0
   125ac:	cmp	r9, sl
   125b0:	strbcc	r3, [r1, r9]
   125b4:	ldrb	r3, [r2, #1]!
   125b8:	add	r9, r9, #1
   125bc:	cmp	r3, #0
   125c0:	bne	125ac <close_stdout@@Base+0xd94>
   125c4:	ldr	r0, [sp, #68]	; 0x44
   125c8:	str	r0, [sp, #52]	; 0x34
   125cc:	bl	11018 <strlen@plt>
   125d0:	mov	r2, #1
   125d4:	str	r2, [sp, #24]
   125d8:	str	r0, [sp, #28]
   125dc:	b	11da8 <close_stdout@@Base+0x590>
   125e0:	ldr	r3, [pc, #1052]	; 12a04 <close_stdout@@Base+0x11ec>
   125e4:	mov	r2, #0
   125e8:	mov	r1, #1
   125ec:	mov	r0, #2
   125f0:	add	r3, pc, r3
   125f4:	str	r1, [sp, #36]	; 0x24
   125f8:	str	r2, [sp, #24]
   125fc:	mov	r9, r2
   12600:	str	r1, [sp, #28]
   12604:	str	r3, [sp, #52]	; 0x34
   12608:	str	r0, [sp, #160]	; 0xa0
   1260c:	b	11da8 <close_stdout@@Base+0x590>
   12610:	ldr	r3, [sp, #36]	; 0x24
   12614:	cmp	r3, #0
   12618:	bne	129a8 <close_stdout@@Base+0x1190>
   1261c:	cmp	sl, #0
   12620:	beq	12904 <close_stdout@@Base+0x10ec>
   12624:	ldr	r1, [sp, #40]	; 0x28
   12628:	mov	r3, #39	; 0x27
   1262c:	ldr	r2, [sp, #36]	; 0x24
   12630:	mov	r0, #1
   12634:	mov	r9, r0
   12638:	str	r0, [sp, #28]
   1263c:	strb	r3, [r1]
   12640:	ldr	r3, [pc, #960]	; 12a08 <close_stdout@@Base+0x11f0>
   12644:	str	r2, [sp, #24]
   12648:	add	r3, pc, r3
   1264c:	str	r3, [sp, #52]	; 0x34
   12650:	b	11da8 <close_stdout@@Base+0x590>
   12654:	ldr	r2, [sp, #28]
   12658:	cmp	r2, #1
   1265c:	add	r4, fp, r2
   12660:	movls	r3, #0
   12664:	movhi	r3, #1
   12668:	cmn	r8, #1
   1266c:	movne	r3, #0
   12670:	cmp	r3, #0
   12674:	beq	12684 <close_stdout@@Base+0xe6c>
   12678:	ldr	r0, [sp, #32]
   1267c:	bl	11018 <strlen@plt>
   12680:	mov	r8, r0
   12684:	cmp	r8, r4
   12688:	ldrcc	r3, [sp, #32]
   1268c:	movcc	r6, #0
   12690:	addcc	r5, r3, fp
   12694:	bcc	11e04 <close_stdout@@Base+0x5ec>
   12698:	ldr	r0, [sp, #32]
   1269c:	ldr	r1, [sp, #52]	; 0x34
   126a0:	add	r5, r0, fp
   126a4:	ldr	r2, [sp, #28]
   126a8:	mov	r0, r5
   126ac:	bl	10f04 <memcmp@plt>
   126b0:	cmp	r0, #0
   126b4:	bne	126cc <close_stdout@@Base+0xeb4>
   126b8:	ldr	r1, [sp, #36]	; 0x24
   126bc:	cmp	r1, #0
   126c0:	bne	12224 <close_stdout@@Base+0xa0c>
   126c4:	mov	r6, #1
   126c8:	b	11e04 <close_stdout@@Base+0x5ec>
   126cc:	mov	r6, #0
   126d0:	b	11e04 <close_stdout@@Base+0x5ec>
   126d4:	add	r7, sp, #108	; 0x6c
   126d8:	cmn	r8, #1
   126dc:	mov	r3, #0
   126e0:	str	r3, [sp, #108]	; 0x6c
   126e4:	str	r3, [r7, #4]
   126e8:	beq	128d4 <close_stdout@@Base+0x10bc>
   126ec:	mov	r1, #0
   126f0:	ldr	r0, [sp, #32]
   126f4:	mov	ip, #1
   126f8:	str	r9, [sp, #88]	; 0x58
   126fc:	str	r6, [sp, #96]	; 0x60
   12700:	mov	r9, r1
   12704:	str	r5, [sp, #100]	; 0x64
   12708:	mov	r6, ip
   1270c:	mov	r5, r7
   12710:	add	r3, sp, #104	; 0x68
   12714:	sub	r0, r0, #1
   12718:	str	r3, [sp, #80]	; 0x50
   1271c:	str	r0, [sp, #84]	; 0x54
   12720:	str	r1, [sp, #60]	; 0x3c
   12724:	str	r4, [sp, #92]	; 0x5c
   12728:	ldr	r2, [sp, #32]
   1272c:	add	r7, r9, fp
   12730:	add	r0, sp, #104	; 0x68
   12734:	mov	r3, r5
   12738:	add	r4, r2, r7
   1273c:	rsb	r2, r7, r8
   12740:	mov	r1, r4
   12744:	bl	10f94 <mbrtowc@plt>
   12748:	subs	r2, r0, #0
   1274c:	beq	12858 <close_stdout@@Base+0x1040>
   12750:	cmn	r2, #1
   12754:	beq	12980 <close_stdout@@Base+0x1168>
   12758:	cmn	r2, #2
   1275c:	beq	12924 <close_stdout@@Base+0x110c>
   12760:	ldr	r3, [sp, #36]	; 0x24
   12764:	ldr	r0, [sp, #160]	; 0xa0
   12768:	cmp	r0, #2
   1276c:	movne	r3, #0
   12770:	andeq	r3, r3, #1
   12774:	cmp	r3, #0
   12778:	beq	12834 <close_stdout@@Base+0x101c>
   1277c:	cmp	r2, #1
   12780:	beq	12834 <close_stdout@@Base+0x101c>
   12784:	ldr	r1, [sp, #84]	; 0x54
   12788:	add	r3, r1, r2
   1278c:	add	r7, r3, r7
   12790:	ldrb	r3, [r4, #1]!
   12794:	sub	r3, r3, #91	; 0x5b
   12798:	cmp	r3, #33	; 0x21
   1279c:	addls	pc, pc, r3, lsl #2
   127a0:	b	1282c <close_stdout@@Base+0x1014>
   127a4:	b	12224 <close_stdout@@Base+0xa0c>
   127a8:	b	12224 <close_stdout@@Base+0xa0c>
   127ac:	b	1282c <close_stdout@@Base+0x1014>
   127b0:	b	12224 <close_stdout@@Base+0xa0c>
   127b4:	b	1282c <close_stdout@@Base+0x1014>
   127b8:	b	12224 <close_stdout@@Base+0xa0c>
   127bc:	b	1282c <close_stdout@@Base+0x1014>
   127c0:	b	1282c <close_stdout@@Base+0x1014>
   127c4:	b	1282c <close_stdout@@Base+0x1014>
   127c8:	b	1282c <close_stdout@@Base+0x1014>
   127cc:	b	1282c <close_stdout@@Base+0x1014>
   127d0:	b	1282c <close_stdout@@Base+0x1014>
   127d4:	b	1282c <close_stdout@@Base+0x1014>
   127d8:	b	1282c <close_stdout@@Base+0x1014>
   127dc:	b	1282c <close_stdout@@Base+0x1014>
   127e0:	b	1282c <close_stdout@@Base+0x1014>
   127e4:	b	1282c <close_stdout@@Base+0x1014>
   127e8:	b	1282c <close_stdout@@Base+0x1014>
   127ec:	b	1282c <close_stdout@@Base+0x1014>
   127f0:	b	1282c <close_stdout@@Base+0x1014>
   127f4:	b	1282c <close_stdout@@Base+0x1014>
   127f8:	b	1282c <close_stdout@@Base+0x1014>
   127fc:	b	1282c <close_stdout@@Base+0x1014>
   12800:	b	1282c <close_stdout@@Base+0x1014>
   12804:	b	1282c <close_stdout@@Base+0x1014>
   12808:	b	1282c <close_stdout@@Base+0x1014>
   1280c:	b	1282c <close_stdout@@Base+0x1014>
   12810:	b	1282c <close_stdout@@Base+0x1014>
   12814:	b	1282c <close_stdout@@Base+0x1014>
   12818:	b	1282c <close_stdout@@Base+0x1014>
   1281c:	b	1282c <close_stdout@@Base+0x1014>
   12820:	b	1282c <close_stdout@@Base+0x1014>
   12824:	b	1282c <close_stdout@@Base+0x1014>
   12828:	b	12224 <close_stdout@@Base+0xa0c>
   1282c:	cmp	r4, r7
   12830:	bne	12790 <close_stdout@@Base+0xf78>
   12834:	ldr	r0, [sp, #104]	; 0x68
   12838:	add	r9, r9, r2
   1283c:	bl	10f4c <iswprint@plt>
   12840:	cmp	r0, #0
   12844:	mov	r0, r5
   12848:	moveq	r6, #0
   1284c:	bl	10ef8 <mbsinit@plt>
   12850:	cmp	r0, #0
   12854:	beq	12728 <close_stdout@@Base+0xf10>
   12858:	mov	ip, r6
   1285c:	eor	r2, ip, #1
   12860:	str	r9, [sp, #60]	; 0x3c
   12864:	ldr	r4, [sp, #92]	; 0x5c
   12868:	uxtb	r2, r2
   1286c:	ldr	r9, [sp, #88]	; 0x58
   12870:	ldr	r6, [sp, #96]	; 0x60
   12874:	ldr	r5, [sp, #100]	; 0x64
   12878:	ldr	r3, [sp, #60]	; 0x3c
   1287c:	cmp	r3, #1
   12880:	bls	12404 <close_stdout@@Base+0xbec>
   12884:	ldr	r0, [sp, #24]
   12888:	and	r2, r2, r0
   1288c:	b	12410 <close_stdout@@Base+0xbf8>
   12890:	ldr	r2, [sp, #164]	; 0xa4
   12894:	tst	r2, #1
   12898:	addne	fp, fp, #1
   1289c:	bne	11dcc <close_stdout@@Base+0x5b4>
   128a0:	b	120dc <close_stdout@@Base+0x8c4>
   128a4:	ldr	r0, [sp, #36]	; 0x24
   128a8:	cmp	r0, #0
   128ac:	beq	120dc <close_stdout@@Base+0x8c4>
   128b0:	b	12224 <close_stdout@@Base+0xa0c>
   128b4:	ldr	r2, [sp, #32]
   128b8:	ldrb	r3, [r2, #1]
   128bc:	adds	r3, r3, #0
   128c0:	movne	r3, #1
   128c4:	b	121f8 <close_stdout@@Base+0x9e0>
   128c8:	bl	110f0 <abort@plt>
   128cc:	ldr	r8, [sp, #60]	; 0x3c
   128d0:	b	12224 <close_stdout@@Base+0xa0c>
   128d4:	ldr	r0, [sp, #32]
   128d8:	bl	11018 <strlen@plt>
   128dc:	mov	r8, r0
   128e0:	b	126ec <close_stdout@@Base+0xed4>
   128e4:	ldr	r2, [pc, #288]	; 12a0c <close_stdout@@Base+0x11f4>
   128e8:	mov	r1, #1
   128ec:	mov	r9, r1
   128f0:	str	r1, [sp, #24]
   128f4:	add	r2, pc, r2
   128f8:	str	r1, [sp, #28]
   128fc:	str	r2, [sp, #52]	; 0x34
   12900:	b	11da8 <close_stdout@@Base+0x590>
   12904:	ldr	r2, [pc, #260]	; 12a10 <close_stdout@@Base+0x11f8>
   12908:	mov	r3, #1
   1290c:	mov	r9, r3
   12910:	str	r3, [sp, #28]
   12914:	add	r2, pc, r2
   12918:	str	sl, [sp, #24]
   1291c:	str	r2, [sp, #52]	; 0x34
   12920:	b	11da8 <close_stdout@@Base+0x590>
   12924:	cmp	r8, r7
   12928:	str	r9, [sp, #60]	; 0x3c
   1292c:	mov	ip, r4
   12930:	ldr	r6, [sp, #96]	; 0x60
   12934:	ldr	r9, [sp, #88]	; 0x58
   12938:	ldr	r4, [sp, #92]	; 0x5c
   1293c:	ldr	r5, [sp, #100]	; 0x64
   12940:	bls	12978 <close_stdout@@Base+0x1160>
   12944:	ldrb	r3, [ip]
   12948:	cmp	r3, #0
   1294c:	beq	12978 <close_stdout@@Base+0x1160>
   12950:	ldr	r3, [sp, #60]	; 0x3c
   12954:	b	12964 <close_stdout@@Base+0x114c>
   12958:	ldrb	r2, [r5, r3]
   1295c:	cmp	r2, #0
   12960:	beq	12974 <close_stdout@@Base+0x115c>
   12964:	add	r3, r3, #1
   12968:	add	r2, fp, r3
   1296c:	cmp	r8, r2
   12970:	bhi	12958 <close_stdout@@Base+0x1140>
   12974:	str	r3, [sp, #60]	; 0x3c
   12978:	mov	r2, #1
   1297c:	b	12878 <close_stdout@@Base+0x1060>
   12980:	str	r9, [sp, #60]	; 0x3c
   12984:	mov	r2, #1
   12988:	ldr	r4, [sp, #92]	; 0x5c
   1298c:	ldr	r6, [sp, #96]	; 0x60
   12990:	ldr	r9, [sp, #88]	; 0x58
   12994:	ldr	r5, [sp, #100]	; 0x64
   12998:	b	12878 <close_stdout@@Base+0x1060>
   1299c:	ldr	r9, [sp, #36]	; 0x24
   129a0:	b	125c4 <close_stdout@@Base+0xdac>
   129a4:	bl	10f1c <__stack_chk_fail@plt>
   129a8:	ldr	r1, [pc, #100]	; 12a14 <close_stdout@@Base+0x11fc>
   129ac:	mov	r3, #0
   129b0:	mov	r0, #1
   129b4:	str	r3, [sp, #24]
   129b8:	add	r1, pc, r1
   129bc:	str	r0, [sp, #28]
   129c0:	mov	r9, r3
   129c4:	str	r1, [sp, #52]	; 0x34
   129c8:	b	11da8 <close_stdout@@Base+0x590>
   129cc:	ldr	r0, [pc, #68]	; 12a18 <close_stdout@@Base+0x1200>
   129d0:	mov	r3, #1
   129d4:	mov	r9, #0
   129d8:	str	r3, [sp, #24]
   129dc:	add	r0, pc, r0
   129e0:	str	r3, [sp, #28]
   129e4:	str	r0, [sp, #52]	; 0x34
   129e8:	b	11da8 <close_stdout@@Base+0x590>
   129ec:	andeq	r3, r1, r8, ror #5
   129f0:	andeq	r0, r0, r4, ror #1
   129f4:	ldrdeq	r2, [r0], -ip
   129f8:			; <UNDEFINED> instruction: 0x000023b8
   129fc:	andeq	r2, r0, r4, ror r3
   12a00:	andeq	r2, r0, r0, asr r3
   12a04:	ldrdeq	r2, [r0], -r4
   12a08:	andeq	r2, r0, ip, ror r2
   12a0c:	ldrdeq	r1, [r0], -r4
   12a10:			; <UNDEFINED> instruction: 0x00001fb0
   12a14:	andeq	r1, r0, ip, lsl #30
   12a18:	andeq	r1, r0, ip, ror #29
   12a1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a20:	sub	sp, sp, #44	; 0x2c
   12a24:	mov	r6, r0
   12a28:	mov	r9, r1
   12a2c:	mov	sl, r2
   12a30:	mov	r4, r3
   12a34:	bl	11030 <__errno_location@plt>
   12a38:	ldr	fp, [pc, #412]	; 12bdc <close_stdout@@Base+0x13c4>
   12a3c:	cmp	r6, #0
   12a40:	add	fp, pc, fp
   12a44:	ldr	r5, [fp]
   12a48:	ldr	r1, [r0]
   12a4c:	mov	r8, r0
   12a50:	str	r1, [sp, #36]	; 0x24
   12a54:	blt	12bd4 <close_stdout@@Base+0x13bc>
   12a58:	ldr	r3, [pc, #384]	; 12be0 <close_stdout@@Base+0x13c8>
   12a5c:	add	r3, pc, r3
   12a60:	ldr	r3, [r3]
   12a64:	cmp	r6, r3
   12a68:	bcc	12abc <close_stdout@@Base+0x12a4>
   12a6c:	add	r7, r6, #1
   12a70:	cmn	r7, #-536870911	; 0xe0000001
   12a74:	bhi	12bd8 <close_stdout@@Base+0x13c0>
   12a78:	add	r3, fp, #4
   12a7c:	cmp	r5, r3
   12a80:	beq	12bac <close_stdout@@Base+0x1394>
   12a84:	mov	r0, r5
   12a88:	lsl	r1, r7, #3
   12a8c:	bl	138b4 <close_stdout@@Base+0x209c>
   12a90:	mov	r5, r0
   12a94:	str	r0, [fp]
   12a98:	ldr	fp, [pc, #324]	; 12be4 <close_stdout@@Base+0x13cc>
   12a9c:	mov	r1, #0
   12aa0:	add	fp, pc, fp
   12aa4:	ldr	r0, [fp]
   12aa8:	rsb	r2, r0, r7
   12aac:	add	r0, r5, r0, lsl #3
   12ab0:	lsl	r2, r2, #3
   12ab4:	bl	11048 <memset@plt>
   12ab8:	str	r7, [fp]
   12abc:	add	r2, r4, #8
   12ac0:	str	r2, [sp, #32]
   12ac4:	ldr	r1, [r4]
   12ac8:	add	fp, r5, r6, lsl #3
   12acc:	ldr	lr, [sp, #32]
   12ad0:	mov	r2, r9
   12ad4:	ldr	r3, [r4, #4]
   12ad8:	ldr	ip, [r5, r6, lsl #3]
   12adc:	ldr	r7, [fp, #4]
   12ae0:	orr	r3, r3, #1
   12ae4:	str	r1, [sp]
   12ae8:	str	r3, [sp, #4]
   12aec:	mov	r1, ip
   12af0:	str	lr, [sp, #8]
   12af4:	mov	r0, r7
   12af8:	ldr	lr, [r4, #40]	; 0x28
   12afc:	str	r3, [sp, #28]
   12b00:	mov	r3, sl
   12b04:	str	lr, [sp, #12]
   12b08:	ldr	lr, [r4, #44]	; 0x2c
   12b0c:	str	ip, [sp, #24]
   12b10:	str	lr, [sp, #16]
   12b14:	bl	11cf4 <close_stdout@@Base+0x4dc>
   12b18:	ldr	ip, [sp, #24]
   12b1c:	cmp	ip, r0
   12b20:	bhi	12b98 <close_stdout@@Base+0x1380>
   12b24:	ldr	r3, [pc, #188]	; 12be8 <close_stdout@@Base+0x13d0>
   12b28:	add	r1, r0, #1
   12b2c:	str	r1, [r5, r6, lsl #3]
   12b30:	add	r3, pc, r3
   12b34:	cmp	r7, r3
   12b38:	beq	12b4c <close_stdout@@Base+0x1334>
   12b3c:	mov	r0, r7
   12b40:	str	r1, [sp, #24]
   12b44:	bl	10ed4 <free@plt>
   12b48:	ldr	r1, [sp, #24]
   12b4c:	mov	r0, r1
   12b50:	str	r1, [sp, #24]
   12b54:	bl	1385c <close_stdout@@Base+0x2044>
   12b58:	ldr	r3, [sp, #28]
   12b5c:	ldr	lr, [sp, #32]
   12b60:	mov	r2, r9
   12b64:	str	r0, [fp, #4]
   12b68:	mov	r7, r0
   12b6c:	ldr	ip, [r4]
   12b70:	str	r3, [sp, #4]
   12b74:	mov	r3, sl
   12b78:	str	lr, [sp, #8]
   12b7c:	str	ip, [sp]
   12b80:	ldr	ip, [r4, #40]	; 0x28
   12b84:	ldr	r1, [sp, #24]
   12b88:	str	ip, [sp, #12]
   12b8c:	ldr	ip, [r4, #44]	; 0x2c
   12b90:	str	ip, [sp, #16]
   12b94:	bl	11cf4 <close_stdout@@Base+0x4dc>
   12b98:	ldr	r1, [sp, #36]	; 0x24
   12b9c:	mov	r0, r7
   12ba0:	str	r1, [r8]
   12ba4:	add	sp, sp, #44	; 0x2c
   12ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bac:	lsl	r1, r7, #3
   12bb0:	mov	r0, #0
   12bb4:	str	r3, [sp, #24]
   12bb8:	bl	138b4 <close_stdout@@Base+0x209c>
   12bbc:	ldr	r3, [sp, #24]
   12bc0:	mov	r5, r0
   12bc4:	ldm	r3, {r0, r1}
   12bc8:	str	r5, [fp]
   12bcc:	stm	r5, {r0, r1}
   12bd0:	b	12a98 <close_stdout@@Base+0x1280>
   12bd4:	bl	110f0 <abort@plt>
   12bd8:	bl	13a70 <close_stdout@@Base+0x2258>
   12bdc:	andeq	r2, r1, r4, lsl r7
   12be0:	andeq	r2, r1, r4, asr #13
   12be4:	andeq	r2, r1, r0, lsl #13
   12be8:	andeq	r2, r1, r0, asr #12
   12bec:	push	{r4, r5, r6, lr}
   12bf0:	mov	r5, r0
   12bf4:	bl	11030 <__errno_location@plt>
   12bf8:	cmp	r5, #0
   12bfc:	mov	r1, #48	; 0x30
   12c00:	mov	r4, r0
   12c04:	ldr	r0, [pc, #24]	; 12c24 <close_stdout@@Base+0x140c>
   12c08:	ldr	r6, [r4]
   12c0c:	add	r0, pc, r0
   12c10:	add	r0, r0, #256	; 0x100
   12c14:	movne	r0, r5
   12c18:	bl	13a30 <close_stdout@@Base+0x2218>
   12c1c:	str	r6, [r4]
   12c20:	pop	{r4, r5, r6, pc}
   12c24:	andeq	r2, r1, r4, ror #10
   12c28:	cmp	r0, #0
   12c2c:	beq	12c38 <close_stdout@@Base+0x1420>
   12c30:	ldr	r0, [r0]
   12c34:	bx	lr
   12c38:	ldr	r0, [pc, #12]	; 12c4c <close_stdout@@Base+0x1434>
   12c3c:	add	r0, pc, r0
   12c40:	add	r0, r0, #256	; 0x100
   12c44:	ldr	r0, [r0]
   12c48:	bx	lr
   12c4c:	andeq	r2, r1, r4, lsr r5
   12c50:	cmp	r0, #0
   12c54:	beq	12c60 <close_stdout@@Base+0x1448>
   12c58:	str	r1, [r0]
   12c5c:	bx	lr
   12c60:	ldr	r0, [pc, #12]	; 12c74 <close_stdout@@Base+0x145c>
   12c64:	add	r0, pc, r0
   12c68:	add	r0, r0, #256	; 0x100
   12c6c:	str	r1, [r0]
   12c70:	bx	lr
   12c74:	andeq	r2, r1, ip, lsl #10
   12c78:	cmp	r0, #0
   12c7c:	movne	r3, r0
   12c80:	beq	12cb0 <close_stdout@@Base+0x1498>
   12c84:	lsr	ip, r1, #5
   12c88:	and	r1, r1, #31
   12c8c:	add	r3, r3, ip, lsl #2
   12c90:	ldr	ip, [r3, #8]
   12c94:	lsr	r0, ip, r1
   12c98:	eor	r2, r0, r2
   12c9c:	and	r0, r0, #1
   12ca0:	and	r2, r2, #1
   12ca4:	eor	ip, ip, r2, lsl r1
   12ca8:	str	ip, [r3, #8]
   12cac:	bx	lr
   12cb0:	ldr	r3, [pc, #8]	; 12cc0 <close_stdout@@Base+0x14a8>
   12cb4:	add	r3, pc, r3
   12cb8:	add	r3, r3, #256	; 0x100
   12cbc:	b	12c84 <close_stdout@@Base+0x146c>
   12cc0:			; <UNDEFINED> instruction: 0x000124bc
   12cc4:	subs	r3, r0, #0
   12cc8:	beq	12cd8 <close_stdout@@Base+0x14c0>
   12ccc:	ldr	r0, [r3, #4]
   12cd0:	str	r1, [r3, #4]
   12cd4:	bx	lr
   12cd8:	ldr	r3, [pc, #8]	; 12ce8 <close_stdout@@Base+0x14d0>
   12cdc:	add	r3, pc, r3
   12ce0:	add	r3, r3, #256	; 0x100
   12ce4:	b	12ccc <close_stdout@@Base+0x14b4>
   12ce8:	muleq	r1, r4, r4
   12cec:	cmp	r0, #0
   12cf0:	push	{r3, lr}
   12cf4:	beq	12d18 <close_stdout@@Base+0x1500>
   12cf8:	cmp	r2, #0
   12cfc:	cmpne	r1, #0
   12d00:	mov	r3, #8
   12d04:	strne	r1, [r0, #40]	; 0x28
   12d08:	str	r3, [r0]
   12d0c:	strne	r2, [r0, #44]	; 0x2c
   12d10:	popne	{r3, pc}
   12d14:	bl	110f0 <abort@plt>
   12d18:	ldr	r0, [pc, #8]	; 12d28 <close_stdout@@Base+0x1510>
   12d1c:	add	r0, pc, r0
   12d20:	add	r0, r0, #256	; 0x100
   12d24:	b	12cf8 <close_stdout@@Base+0x14e0>
   12d28:	andeq	r2, r1, r4, asr r4
   12d2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d30:	sub	sp, sp, #24
   12d34:	mov	r7, r0
   12d38:	mov	sl, r1
   12d3c:	ldr	r4, [sp, #56]	; 0x38
   12d40:	mov	r9, r2
   12d44:	mov	r8, r3
   12d48:	cmp	r4, #0
   12d4c:	beq	12da0 <close_stdout@@Base+0x1588>
   12d50:	bl	11030 <__errno_location@plt>
   12d54:	ldr	r3, [r4]
   12d58:	add	lr, r4, #8
   12d5c:	mov	r1, sl
   12d60:	mov	r2, r9
   12d64:	ldr	r6, [r0]
   12d68:	mov	r5, r0
   12d6c:	str	r3, [sp]
   12d70:	mov	r0, r7
   12d74:	ldr	ip, [r4, #4]
   12d78:	mov	r3, r8
   12d7c:	stmib	sp, {ip, lr}
   12d80:	ldr	ip, [r4, #40]	; 0x28
   12d84:	str	ip, [sp, #12]
   12d88:	ldr	ip, [r4, #44]	; 0x2c
   12d8c:	str	ip, [sp, #16]
   12d90:	bl	11cf4 <close_stdout@@Base+0x4dc>
   12d94:	str	r6, [r5]
   12d98:	add	sp, sp, #24
   12d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12da0:	ldr	r4, [pc, #8]	; 12db0 <close_stdout@@Base+0x1598>
   12da4:	add	r4, pc, r4
   12da8:	add	r4, r4, #256	; 0x100
   12dac:	b	12d50 <close_stdout@@Base+0x1538>
   12db0:	andeq	r2, r1, ip, asr #7
   12db4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12db8:	subs	r4, r3, #0
   12dbc:	sub	sp, sp, #36	; 0x24
   12dc0:	mov	r7, r0
   12dc4:	mov	r6, r1
   12dc8:	mov	r5, r2
   12dcc:	beq	12e88 <close_stdout@@Base+0x1670>
   12dd0:	bl	11030 <__errno_location@plt>
   12dd4:	ldr	r3, [r4]
   12dd8:	ldr	sl, [r4, #4]
   12ddc:	add	r9, r4, #8
   12de0:	mov	r8, r0
   12de4:	mov	r0, #0
   12de8:	ldr	r2, [r8]
   12dec:	cmp	r5, r0
   12df0:	orreq	sl, sl, #1
   12df4:	str	r9, [sp, #8]
   12df8:	mov	r1, r0
   12dfc:	stm	sp, {r3, sl}
   12e00:	mov	r3, r6
   12e04:	ldr	ip, [r4, #40]	; 0x28
   12e08:	str	r2, [sp, #28]
   12e0c:	mov	r2, r7
   12e10:	str	ip, [sp, #12]
   12e14:	ldr	ip, [r4, #44]	; 0x2c
   12e18:	str	ip, [sp, #16]
   12e1c:	bl	11cf4 <close_stdout@@Base+0x4dc>
   12e20:	add	r1, r0, #1
   12e24:	mov	fp, r0
   12e28:	str	r1, [sp, #24]
   12e2c:	mov	r0, r1
   12e30:	bl	1385c <close_stdout@@Base+0x2044>
   12e34:	ldr	lr, [r4]
   12e38:	str	sl, [sp, #4]
   12e3c:	mov	r3, r6
   12e40:	str	r9, [sp, #8]
   12e44:	mov	r2, r7
   12e48:	str	lr, [sp]
   12e4c:	ldr	lr, [r4, #40]	; 0x28
   12e50:	ldr	r1, [sp, #24]
   12e54:	str	lr, [sp, #12]
   12e58:	ldr	lr, [r4, #44]	; 0x2c
   12e5c:	str	lr, [sp, #16]
   12e60:	str	r0, [sp, #24]
   12e64:	bl	11cf4 <close_stdout@@Base+0x4dc>
   12e68:	ldr	r3, [sp, #28]
   12e6c:	cmp	r5, #0
   12e70:	str	r3, [r8]
   12e74:	ldr	ip, [sp, #24]
   12e78:	strne	fp, [r5]
   12e7c:	mov	r0, ip
   12e80:	add	sp, sp, #36	; 0x24
   12e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e88:	ldr	r4, [pc, #8]	; 12e98 <close_stdout@@Base+0x1680>
   12e8c:	add	r4, pc, r4
   12e90:	add	r4, r4, #256	; 0x100
   12e94:	b	12dd0 <close_stdout@@Base+0x15b8>
   12e98:	andeq	r2, r1, r4, ror #5
   12e9c:	mov	r3, r2
   12ea0:	mov	r2, #0
   12ea4:	b	12db4 <close_stdout@@Base+0x159c>
   12ea8:	ldr	r2, [pc, #152]	; 12f48 <close_stdout@@Base+0x1730>
   12eac:	push	{r3, r4, r5, r6, r7, lr}
   12eb0:	add	r2, pc, r2
   12eb4:	ldr	r3, [pc, #144]	; 12f4c <close_stdout@@Base+0x1734>
   12eb8:	ldr	r6, [r2]
   12ebc:	add	r3, pc, r3
   12ec0:	cmp	r6, #1
   12ec4:	ldr	r7, [r3]
   12ec8:	movhi	r4, #1
   12ecc:	movhi	r5, r7
   12ed0:	bls	12eec <close_stdout@@Base+0x16d4>
   12ed4:	ldr	r0, [r5, #12]
   12ed8:	add	r4, r4, #1
   12edc:	bl	10ed4 <free@plt>
   12ee0:	cmp	r4, r6
   12ee4:	add	r5, r5, #8
   12ee8:	bne	12ed4 <close_stdout@@Base+0x16bc>
   12eec:	ldr	r4, [pc, #92]	; 12f50 <close_stdout@@Base+0x1738>
   12ef0:	ldr	r0, [r7, #4]
   12ef4:	add	r4, pc, r4
   12ef8:	cmp	r0, r4
   12efc:	beq	12f14 <close_stdout@@Base+0x16fc>
   12f00:	bl	10ed4 <free@plt>
   12f04:	ldr	r3, [pc, #72]	; 12f54 <close_stdout@@Base+0x173c>
   12f08:	mov	r2, #256	; 0x100
   12f0c:	add	r3, pc, r3
   12f10:	stmib	r3, {r2, r4}
   12f14:	ldr	r4, [pc, #60]	; 12f58 <close_stdout@@Base+0x1740>
   12f18:	add	r4, pc, r4
   12f1c:	add	r5, r4, #4
   12f20:	cmp	r7, r5
   12f24:	beq	12f34 <close_stdout@@Base+0x171c>
   12f28:	mov	r0, r7
   12f2c:	bl	10ed4 <free@plt>
   12f30:	str	r5, [r4]
   12f34:	ldr	r3, [pc, #32]	; 12f5c <close_stdout@@Base+0x1744>
   12f38:	mov	r2, #1
   12f3c:	add	r3, pc, r3
   12f40:	str	r2, [r3]
   12f44:	pop	{r3, r4, r5, r6, r7, pc}
   12f48:	andeq	r2, r1, r0, ror r2
   12f4c:	muleq	r1, r8, r2
   12f50:	andeq	r2, r1, ip, ror r2
   12f54:	andeq	r2, r1, r8, asr #4
   12f58:	andeq	r2, r1, ip, lsr r2
   12f5c:	andeq	r2, r1, r4, ror #3
   12f60:	ldr	r3, [pc, #12]	; 12f74 <close_stdout@@Base+0x175c>
   12f64:	mvn	r2, #0
   12f68:	add	r3, pc, r3
   12f6c:	add	r3, r3, #256	; 0x100
   12f70:	b	12a1c <close_stdout@@Base+0x1204>
   12f74:	andeq	r2, r1, r8, lsl #4
   12f78:	ldr	r3, [pc, #8]	; 12f88 <close_stdout@@Base+0x1770>
   12f7c:	add	r3, pc, r3
   12f80:	add	r3, r3, #256	; 0x100
   12f84:	b	12a1c <close_stdout@@Base+0x1204>
   12f88:	strdeq	r2, [r1], -r4
   12f8c:	mov	r1, r0
   12f90:	mov	r0, #0
   12f94:	b	12f60 <close_stdout@@Base+0x1748>
   12f98:	mov	r2, r1
   12f9c:	mov	r1, r0
   12fa0:	mov	r0, #0
   12fa4:	b	12f78 <close_stdout@@Base+0x1760>
   12fa8:	ldr	r3, [pc, #92]	; 1300c <close_stdout@@Base+0x17f4>
   12fac:	ldr	ip, [pc, #92]	; 13010 <close_stdout@@Base+0x17f8>
   12fb0:	add	r3, pc, r3
   12fb4:	push	{r4, r5, r6, r7, lr}
   12fb8:	sub	sp, sp, #60	; 0x3c
   12fbc:	ldr	r4, [r3, ip]
   12fc0:	add	r5, sp, #4
   12fc4:	mov	r7, r2
   12fc8:	mov	r6, r0
   12fcc:	mov	r0, r5
   12fd0:	ldr	r3, [r4]
   12fd4:	str	r3, [sp, #52]	; 0x34
   12fd8:	bl	11b3c <close_stdout@@Base+0x324>
   12fdc:	mov	r3, r5
   12fe0:	mvn	r2, #0
   12fe4:	mov	r0, r6
   12fe8:	mov	r1, r7
   12fec:	bl	12a1c <close_stdout@@Base+0x1204>
   12ff0:	ldr	r2, [sp, #52]	; 0x34
   12ff4:	ldr	r3, [r4]
   12ff8:	cmp	r2, r3
   12ffc:	bne	13008 <close_stdout@@Base+0x17f0>
   13000:	add	sp, sp, #60	; 0x3c
   13004:	pop	{r4, r5, r6, r7, pc}
   13008:	bl	10f1c <__stack_chk_fail@plt>
   1300c:	andeq	r2, r1, r8, asr #32
   13010:	andeq	r0, r0, r4, ror #1
   13014:	ldr	ip, [pc, #96]	; 1307c <close_stdout@@Base+0x1864>
   13018:	push	{r4, r5, r6, r7, r8, lr}
   1301c:	add	ip, pc, ip
   13020:	ldr	lr, [pc, #88]	; 13080 <close_stdout@@Base+0x1868>
   13024:	sub	sp, sp, #56	; 0x38
   13028:	mov	r8, r3
   1302c:	add	r5, sp, #4
   13030:	mov	r7, r2
   13034:	mov	r6, r0
   13038:	ldr	r4, [ip, lr]
   1303c:	mov	r0, r5
   13040:	ldr	r3, [r4]
   13044:	str	r3, [sp, #52]	; 0x34
   13048:	bl	11b3c <close_stdout@@Base+0x324>
   1304c:	mov	r2, r8
   13050:	mov	r3, r5
   13054:	mov	r0, r6
   13058:	mov	r1, r7
   1305c:	bl	12a1c <close_stdout@@Base+0x1204>
   13060:	ldr	r2, [sp, #52]	; 0x34
   13064:	ldr	r3, [r4]
   13068:	cmp	r2, r3
   1306c:	bne	13078 <close_stdout@@Base+0x1860>
   13070:	add	sp, sp, #56	; 0x38
   13074:	pop	{r4, r5, r6, r7, r8, pc}
   13078:	bl	10f1c <__stack_chk_fail@plt>
   1307c:	ldrdeq	r1, [r1], -ip
   13080:	andeq	r0, r0, r4, ror #1
   13084:	mov	r2, r1
   13088:	mov	r1, r0
   1308c:	mov	r0, #0
   13090:	b	12fa8 <close_stdout@@Base+0x1790>
   13094:	mov	ip, r1
   13098:	mov	r3, r2
   1309c:	mov	r1, r0
   130a0:	mov	r2, ip
   130a4:	mov	r0, #0
   130a8:	b	13014 <close_stdout@@Base+0x17fc>
   130ac:	push	{r4, r5, r6, r7, r8, lr}
   130b0:	mov	r5, r2
   130b4:	ldr	lr, [pc, #136]	; 13144 <close_stdout@@Base+0x192c>
   130b8:	mov	r7, r0
   130bc:	mov	r6, r1
   130c0:	ldr	r4, [pc, #128]	; 13148 <close_stdout@@Base+0x1930>
   130c4:	add	lr, pc, lr
   130c8:	sub	sp, sp, #56	; 0x38
   130cc:	add	lr, lr, #256	; 0x100
   130d0:	ldr	r8, [pc, #116]	; 1314c <close_stdout@@Base+0x1934>
   130d4:	add	r4, pc, r4
   130d8:	add	ip, sp, #4
   130dc:	ldm	lr!, {r0, r1, r2, r3}
   130e0:	ldr	r4, [r4, r8]
   130e4:	stmia	ip!, {r0, r1, r2, r3}
   130e8:	ldm	lr!, {r0, r1, r2, r3}
   130ec:	ldr	r8, [r4]
   130f0:	stmia	ip!, {r0, r1, r2, r3}
   130f4:	ldm	lr, {r0, r1, r2, r3}
   130f8:	str	r8, [sp, #52]	; 0x34
   130fc:	stm	ip, {r0, r1, r2, r3}
   13100:	mov	r1, r5
   13104:	add	r5, sp, #4
   13108:	mov	r2, #1
   1310c:	mov	r0, r5
   13110:	bl	12c78 <close_stdout@@Base+0x1460>
   13114:	mov	r2, r6
   13118:	mov	r3, r5
   1311c:	mov	r1, r7
   13120:	mov	r0, #0
   13124:	bl	12a1c <close_stdout@@Base+0x1204>
   13128:	ldr	r2, [sp, #52]	; 0x34
   1312c:	ldr	r3, [r4]
   13130:	cmp	r2, r3
   13134:	bne	13140 <close_stdout@@Base+0x1928>
   13138:	add	sp, sp, #56	; 0x38
   1313c:	pop	{r4, r5, r6, r7, r8, pc}
   13140:	bl	10f1c <__stack_chk_fail@plt>
   13144:	andeq	r2, r1, ip, lsr #1
   13148:	andeq	r1, r1, r4, lsr #30
   1314c:	andeq	r0, r0, r4, ror #1
   13150:	mov	r2, r1
   13154:	mvn	r1, #0
   13158:	b	130ac <close_stdout@@Base+0x1894>
   1315c:	mov	r1, #58	; 0x3a
   13160:	b	13150 <close_stdout@@Base+0x1938>
   13164:	mov	r2, #58	; 0x3a
   13168:	b	130ac <close_stdout@@Base+0x1894>
   1316c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13170:	mov	r5, r2
   13174:	ldr	lr, [pc, #144]	; 1320c <close_stdout@@Base+0x19f4>
   13178:	mov	r8, r0
   1317c:	mov	r9, r1
   13180:	mov	r7, r3
   13184:	add	lr, pc, lr
   13188:	ldr	r4, [pc, #128]	; 13210 <close_stdout@@Base+0x19f8>
   1318c:	add	lr, lr, #256	; 0x100
   13190:	sub	sp, sp, #56	; 0x38
   13194:	ldr	sl, [pc, #120]	; 13214 <close_stdout@@Base+0x19fc>
   13198:	add	r4, pc, r4
   1319c:	ldm	lr!, {r0, r1, r2, r3}
   131a0:	add	ip, sp, #4
   131a4:	ldr	r4, [r4, sl]
   131a8:	ldr	r6, [sp, #88]	; 0x58
   131ac:	stmia	ip!, {r0, r1, r2, r3}
   131b0:	ldm	lr!, {r0, r1, r2, r3}
   131b4:	ldr	sl, [r4]
   131b8:	stmia	ip!, {r0, r1, r2, r3}
   131bc:	ldm	lr, {r0, r1, r2, r3}
   131c0:	str	sl, [sp, #52]	; 0x34
   131c4:	stm	ip, {r0, r1, r2, r3}
   131c8:	mov	r2, r5
   131cc:	add	r5, sp, #4
   131d0:	mov	r1, r9
   131d4:	mov	r0, r5
   131d8:	bl	12cec <close_stdout@@Base+0x14d4>
   131dc:	mov	r2, r6
   131e0:	mov	r3, r5
   131e4:	mov	r0, r8
   131e8:	mov	r1, r7
   131ec:	bl	12a1c <close_stdout@@Base+0x1204>
   131f0:	ldr	r2, [sp, #52]	; 0x34
   131f4:	ldr	r3, [r4]
   131f8:	cmp	r2, r3
   131fc:	bne	13208 <close_stdout@@Base+0x19f0>
   13200:	add	sp, sp, #56	; 0x38
   13204:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13208:	bl	10f1c <__stack_chk_fail@plt>
   1320c:	andeq	r1, r1, ip, ror #31
   13210:	andeq	r1, r1, r0, ror #28
   13214:	andeq	r0, r0, r4, ror #1
   13218:	push	{lr}		; (str lr, [sp, #-4]!)
   1321c:	sub	sp, sp, #12
   13220:	mvn	ip, #0
   13224:	str	ip, [sp]
   13228:	bl	1316c <close_stdout@@Base+0x1954>
   1322c:	add	sp, sp, #12
   13230:	pop	{pc}		; (ldr pc, [sp], #4)
   13234:	mov	ip, r1
   13238:	mov	r3, r2
   1323c:	mov	r1, r0
   13240:	mov	r2, ip
   13244:	mov	r0, #0
   13248:	b	13218 <close_stdout@@Base+0x1a00>
   1324c:	push	{lr}		; (str lr, [sp, #-4]!)
   13250:	sub	sp, sp, #12
   13254:	mov	lr, r1
   13258:	mov	ip, r2
   1325c:	mov	r1, r0
   13260:	str	r3, [sp]
   13264:	mov	r2, lr
   13268:	mov	r3, ip
   1326c:	mov	r0, #0
   13270:	bl	1316c <close_stdout@@Base+0x1954>
   13274:	add	sp, sp, #12
   13278:	pop	{pc}		; (ldr pc, [sp], #4)
   1327c:	ldr	r3, [pc, #12]	; 13290 <close_stdout@@Base+0x1a78>
   13280:	ldr	ip, [pc, #12]	; 13294 <close_stdout@@Base+0x1a7c>
   13284:	add	r3, pc, r3
   13288:	ldr	r3, [r3, ip]
   1328c:	b	12a1c <close_stdout@@Base+0x1204>
   13290:	andeq	r1, r1, r4, ror sp
   13294:	andeq	r0, r0, r0, ror #1
   13298:	mov	r2, r1
   1329c:	mov	r1, r0
   132a0:	mov	r0, #0
   132a4:	b	1327c <close_stdout@@Base+0x1a64>
   132a8:	mvn	r2, #0
   132ac:	b	1327c <close_stdout@@Base+0x1a64>
   132b0:	mov	r1, r0
   132b4:	mov	r0, #0
   132b8:	b	132a8 <close_stdout@@Base+0x1a90>
   132bc:	push	{r4, r5, r6, r7, lr}
   132c0:	cmp	r1, #0
   132c4:	sub	sp, sp, #36	; 0x24
   132c8:	ldr	r7, [pc, #896]	; 13650 <close_stdout@@Base+0x1e38>
   132cc:	mov	ip, r3
   132d0:	mov	r5, r0
   132d4:	add	r7, pc, r7
   132d8:	ldr	r4, [sp, #56]	; 0x38
   132dc:	ldr	r6, [sp, #60]	; 0x3c
   132e0:	beq	13624 <close_stdout@@Base+0x1e0c>
   132e4:	str	r2, [sp]
   132e8:	mov	r3, r1
   132ec:	ldr	r2, [pc, #864]	; 13654 <close_stdout@@Base+0x1e3c>
   132f0:	mov	r1, #1
   132f4:	str	ip, [sp, #4]
   132f8:	add	r2, pc, r2
   132fc:	bl	11078 <__fprintf_chk@plt>
   13300:	ldr	r1, [pc, #848]	; 13658 <close_stdout@@Base+0x1e40>
   13304:	mov	r2, #5
   13308:	mov	r0, #0
   1330c:	add	r1, pc, r1
   13310:	bl	10f10 <dcgettext@plt>
   13314:	ldr	r2, [pc, #832]	; 1365c <close_stdout@@Base+0x1e44>
   13318:	movw	ip, #2013	; 0x7dd
   1331c:	mov	r1, #1
   13320:	ldr	r2, [r7, r2]
   13324:	str	ip, [sp]
   13328:	mov	r3, r0
   1332c:	mov	r0, r5
   13330:	bl	11078 <__fprintf_chk@plt>
   13334:	ldr	r1, [pc, #804]	; 13660 <close_stdout@@Base+0x1e48>
   13338:	mov	r0, #0
   1333c:	mov	r2, #5
   13340:	add	r1, pc, r1
   13344:	bl	10f10 <dcgettext@plt>
   13348:	mov	r1, r5
   1334c:	bl	10ea4 <fputs_unlocked@plt>
   13350:	cmp	r6, #9
   13354:	addls	pc, pc, r6, lsl #2
   13358:	b	13640 <close_stdout@@Base+0x1e28>
   1335c:	b	133f0 <close_stdout@@Base+0x1bd8>
   13360:	b	133f4 <close_stdout@@Base+0x1bdc>
   13364:	b	13424 <close_stdout@@Base+0x1c0c>
   13368:	b	13458 <close_stdout@@Base+0x1c40>
   1336c:	b	13494 <close_stdout@@Base+0x1c7c>
   13370:	b	134d4 <close_stdout@@Base+0x1cbc>
   13374:	b	1351c <close_stdout@@Base+0x1d04>
   13378:	b	1356c <close_stdout@@Base+0x1d54>
   1337c:	b	135c4 <close_stdout@@Base+0x1dac>
   13380:	b	13384 <close_stdout@@Base+0x1b6c>
   13384:	ldr	r1, [pc, #728]	; 13664 <close_stdout@@Base+0x1e4c>
   13388:	mov	r0, #0
   1338c:	add	r1, pc, r1
   13390:	mov	r2, #5
   13394:	bl	10f10 <dcgettext@plt>
   13398:	ldm	r4, {r3, ip}
   1339c:	mov	r1, #1
   133a0:	str	ip, [sp]
   133a4:	ldr	ip, [r4, #8]
   133a8:	str	ip, [sp, #4]
   133ac:	ldr	ip, [r4, #12]
   133b0:	str	ip, [sp, #8]
   133b4:	ldr	ip, [r4, #16]
   133b8:	str	ip, [sp, #12]
   133bc:	ldr	ip, [r4, #20]
   133c0:	str	ip, [sp, #16]
   133c4:	ldr	ip, [r4, #24]
   133c8:	str	ip, [sp, #20]
   133cc:	ldr	ip, [r4, #28]
   133d0:	str	ip, [sp, #24]
   133d4:	ldr	ip, [r4, #32]
   133d8:	str	ip, [sp, #28]
   133dc:	mov	r2, r0
   133e0:	mov	r0, r5
   133e4:	bl	11078 <__fprintf_chk@plt>
   133e8:	add	sp, sp, #36	; 0x24
   133ec:	pop	{r4, r5, r6, r7, pc}
   133f0:	bl	110f0 <abort@plt>
   133f4:	ldr	r1, [pc, #620]	; 13668 <close_stdout@@Base+0x1e50>
   133f8:	mov	r2, #5
   133fc:	mov	r0, #0
   13400:	add	r1, pc, r1
   13404:	bl	10f10 <dcgettext@plt>
   13408:	ldr	r3, [r4]
   1340c:	mov	r1, #1
   13410:	mov	r2, r0
   13414:	mov	r0, r5
   13418:	add	sp, sp, #36	; 0x24
   1341c:	pop	{r4, r5, r6, r7, lr}
   13420:	b	11078 <__fprintf_chk@plt>
   13424:	ldr	r1, [pc, #576]	; 1366c <close_stdout@@Base+0x1e54>
   13428:	mov	r2, #5
   1342c:	mov	r0, #0
   13430:	add	r1, pc, r1
   13434:	bl	10f10 <dcgettext@plt>
   13438:	ldm	r4, {r3, ip}
   1343c:	mov	r1, #1
   13440:	str	ip, [sp, #56]	; 0x38
   13444:	mov	r2, r0
   13448:	mov	r0, r5
   1344c:	add	sp, sp, #36	; 0x24
   13450:	pop	{r4, r5, r6, r7, lr}
   13454:	b	11078 <__fprintf_chk@plt>
   13458:	ldr	r1, [pc, #528]	; 13670 <close_stdout@@Base+0x1e58>
   1345c:	mov	r2, #5
   13460:	mov	r0, #0
   13464:	add	r1, pc, r1
   13468:	bl	10f10 <dcgettext@plt>
   1346c:	ldm	r4, {r3, ip}
   13470:	mov	r1, #1
   13474:	str	ip, [sp, #56]	; 0x38
   13478:	ldr	ip, [r4, #8]
   1347c:	str	ip, [sp, #60]	; 0x3c
   13480:	mov	r2, r0
   13484:	mov	r0, r5
   13488:	add	sp, sp, #36	; 0x24
   1348c:	pop	{r4, r5, r6, r7, lr}
   13490:	b	11078 <__fprintf_chk@plt>
   13494:	ldr	r1, [pc, #472]	; 13674 <close_stdout@@Base+0x1e5c>
   13498:	mov	r2, #5
   1349c:	mov	r0, #0
   134a0:	add	r1, pc, r1
   134a4:	bl	10f10 <dcgettext@plt>
   134a8:	ldm	r4, {r3, ip}
   134ac:	mov	r1, #1
   134b0:	str	ip, [sp]
   134b4:	ldr	ip, [r4, #8]
   134b8:	str	ip, [sp, #4]
   134bc:	ldr	ip, [r4, #12]
   134c0:	str	ip, [sp, #8]
   134c4:	mov	r2, r0
   134c8:	mov	r0, r5
   134cc:	bl	11078 <__fprintf_chk@plt>
   134d0:	b	133e8 <close_stdout@@Base+0x1bd0>
   134d4:	ldr	r1, [pc, #412]	; 13678 <close_stdout@@Base+0x1e60>
   134d8:	mov	r2, #5
   134dc:	mov	r0, #0
   134e0:	add	r1, pc, r1
   134e4:	bl	10f10 <dcgettext@plt>
   134e8:	ldm	r4, {r3, ip}
   134ec:	mov	r1, #1
   134f0:	str	ip, [sp]
   134f4:	ldr	ip, [r4, #8]
   134f8:	str	ip, [sp, #4]
   134fc:	ldr	ip, [r4, #12]
   13500:	str	ip, [sp, #8]
   13504:	ldr	ip, [r4, #16]
   13508:	str	ip, [sp, #12]
   1350c:	mov	r2, r0
   13510:	mov	r0, r5
   13514:	bl	11078 <__fprintf_chk@plt>
   13518:	b	133e8 <close_stdout@@Base+0x1bd0>
   1351c:	ldr	r1, [pc, #344]	; 1367c <close_stdout@@Base+0x1e64>
   13520:	mov	r2, #5
   13524:	mov	r0, #0
   13528:	add	r1, pc, r1
   1352c:	bl	10f10 <dcgettext@plt>
   13530:	ldm	r4, {r3, ip}
   13534:	mov	r1, #1
   13538:	str	ip, [sp]
   1353c:	ldr	ip, [r4, #8]
   13540:	str	ip, [sp, #4]
   13544:	ldr	ip, [r4, #12]
   13548:	str	ip, [sp, #8]
   1354c:	ldr	ip, [r4, #16]
   13550:	str	ip, [sp, #12]
   13554:	ldr	ip, [r4, #20]
   13558:	str	ip, [sp, #16]
   1355c:	mov	r2, r0
   13560:	mov	r0, r5
   13564:	bl	11078 <__fprintf_chk@plt>
   13568:	b	133e8 <close_stdout@@Base+0x1bd0>
   1356c:	ldr	r1, [pc, #268]	; 13680 <close_stdout@@Base+0x1e68>
   13570:	mov	r2, #5
   13574:	mov	r0, #0
   13578:	add	r1, pc, r1
   1357c:	bl	10f10 <dcgettext@plt>
   13580:	ldm	r4, {r3, ip}
   13584:	mov	r1, #1
   13588:	str	ip, [sp]
   1358c:	ldr	ip, [r4, #8]
   13590:	str	ip, [sp, #4]
   13594:	ldr	ip, [r4, #12]
   13598:	str	ip, [sp, #8]
   1359c:	ldr	ip, [r4, #16]
   135a0:	str	ip, [sp, #12]
   135a4:	ldr	ip, [r4, #20]
   135a8:	str	ip, [sp, #16]
   135ac:	ldr	ip, [r4, #24]
   135b0:	str	ip, [sp, #20]
   135b4:	mov	r2, r0
   135b8:	mov	r0, r5
   135bc:	bl	11078 <__fprintf_chk@plt>
   135c0:	b	133e8 <close_stdout@@Base+0x1bd0>
   135c4:	ldr	r1, [pc, #184]	; 13684 <close_stdout@@Base+0x1e6c>
   135c8:	mov	r2, #5
   135cc:	mov	r0, #0
   135d0:	add	r1, pc, r1
   135d4:	bl	10f10 <dcgettext@plt>
   135d8:	ldm	r4, {r3, ip}
   135dc:	mov	r1, #1
   135e0:	str	ip, [sp]
   135e4:	ldr	ip, [r4, #8]
   135e8:	str	ip, [sp, #4]
   135ec:	ldr	ip, [r4, #12]
   135f0:	str	ip, [sp, #8]
   135f4:	ldr	ip, [r4, #16]
   135f8:	str	ip, [sp, #12]
   135fc:	ldr	ip, [r4, #20]
   13600:	str	ip, [sp, #16]
   13604:	ldr	ip, [r4, #24]
   13608:	str	ip, [sp, #20]
   1360c:	ldr	ip, [r4, #28]
   13610:	str	ip, [sp, #24]
   13614:	mov	r2, r0
   13618:	mov	r0, r5
   1361c:	bl	11078 <__fprintf_chk@plt>
   13620:	b	133e8 <close_stdout@@Base+0x1bd0>
   13624:	str	r3, [sp]
   13628:	mov	r3, r2
   1362c:	ldr	r2, [pc, #84]	; 13688 <close_stdout@@Base+0x1e70>
   13630:	mov	r1, #1
   13634:	add	r2, pc, r2
   13638:	bl	11078 <__fprintf_chk@plt>
   1363c:	b	13300 <close_stdout@@Base+0x1ae8>
   13640:	ldr	r1, [pc, #68]	; 1368c <close_stdout@@Base+0x1e74>
   13644:	mov	r0, #0
   13648:	add	r1, pc, r1
   1364c:	b	13390 <close_stdout@@Base+0x1b78>
   13650:	andeq	r1, r1, r4, lsr #26
   13654:	andeq	r1, r0, r4, lsr #12
   13658:	andeq	r1, r0, r4, lsr #12
   1365c:	andeq	r0, r0, r0, lsl r1
   13660:	strdeq	r1, [r0], -r4
   13664:	andeq	r1, r0, r0, lsl #15
   13668:	andeq	r1, r0, r0, lsl #12
   1366c:	andeq	r1, r0, r0, ror #11
   13670:	andeq	r1, r0, r4, asr #11
   13674:	andeq	r1, r0, r4, lsr #11
   13678:	andeq	r1, r0, r4, lsl #11
   1367c:	andeq	r1, r0, r0, ror #10
   13680:	andeq	r1, r0, r8, lsr r5
   13684:	andeq	r1, r0, ip, lsl #10
   13688:	strdeq	r1, [r0], -r4
   1368c:	strdeq	r1, [r0], -r8
   13690:	push	{r4, r5, lr}
   13694:	sub	sp, sp, #12
   13698:	ldr	r5, [sp, #24]
   1369c:	ldr	ip, [r5]
   136a0:	cmp	ip, #0
   136a4:	beq	136c0 <close_stdout@@Base+0x1ea8>
   136a8:	mov	lr, r5
   136ac:	mov	ip, #0
   136b0:	ldr	r4, [lr, #4]!
   136b4:	add	ip, ip, #1
   136b8:	cmp	r4, #0
   136bc:	bne	136b0 <close_stdout@@Base+0x1e98>
   136c0:	stm	sp, {r5, ip}
   136c4:	bl	132bc <close_stdout@@Base+0x1aa4>
   136c8:	add	sp, sp, #12
   136cc:	pop	{r4, r5, pc}
   136d0:	push	{r4, r5, r6, r7, lr}
   136d4:	sub	sp, sp, #60	; 0x3c
   136d8:	ldr	r4, [pc, #100]	; 13744 <close_stdout@@Base+0x1f2c>
   136dc:	mov	ip, #0
   136e0:	ldr	r5, [pc, #96]	; 13748 <close_stdout@@Base+0x1f30>
   136e4:	mov	lr, ip
   136e8:	add	r4, pc, r4
   136ec:	ldr	r6, [sp, #80]	; 0x50
   136f0:	ldr	r7, [r4, r5]
   136f4:	add	r5, sp, #12
   136f8:	ldr	r4, [r7]
   136fc:	str	r4, [sp, #52]	; 0x34
   13700:	ldr	r4, [r6, ip]
   13704:	cmp	r4, #0
   13708:	str	r4, [r5, ip]
   1370c:	beq	13720 <close_stdout@@Base+0x1f08>
   13710:	add	lr, lr, #1
   13714:	add	ip, ip, #4
   13718:	cmp	lr, #10
   1371c:	bne	13700 <close_stdout@@Base+0x1ee8>
   13720:	stm	sp, {r5, lr}
   13724:	bl	132bc <close_stdout@@Base+0x1aa4>
   13728:	ldr	r2, [sp, #52]	; 0x34
   1372c:	ldr	r3, [r7]
   13730:	cmp	r2, r3
   13734:	bne	13740 <close_stdout@@Base+0x1f28>
   13738:	add	sp, sp, #60	; 0x3c
   1373c:	pop	{r4, r5, r6, r7, pc}
   13740:	bl	10f1c <__stack_chk_fail@plt>
   13744:	andeq	r1, r1, r0, lsl r9
   13748:	andeq	r0, r0, r4, ror #1
   1374c:	push	{r3}		; (str r3, [sp, #-4]!)
   13750:	push	{r4, lr}
   13754:	sub	sp, sp, #20
   13758:	ldr	lr, [pc, #72]	; 137a8 <close_stdout@@Base+0x1f90>
   1375c:	add	ip, sp, #32
   13760:	ldr	r4, [pc, #68]	; 137ac <close_stdout@@Base+0x1f94>
   13764:	add	lr, pc, lr
   13768:	ldr	r3, [sp, #28]
   1376c:	ldr	r4, [lr, r4]
   13770:	str	ip, [sp]
   13774:	str	ip, [sp, #8]
   13778:	ldr	ip, [r4]
   1377c:	str	ip, [sp, #12]
   13780:	bl	136d0 <close_stdout@@Base+0x1eb8>
   13784:	ldr	r2, [sp, #12]
   13788:	ldr	r3, [r4]
   1378c:	cmp	r2, r3
   13790:	bne	137a4 <close_stdout@@Base+0x1f8c>
   13794:	add	sp, sp, #20
   13798:	pop	{r4, lr}
   1379c:	add	sp, sp, #4
   137a0:	bx	lr
   137a4:	bl	10f1c <__stack_chk_fail@plt>
   137a8:	muleq	r1, r4, r8
   137ac:	andeq	r0, r0, r4, ror #1
   137b0:	ldr	r1, [pc, #132]	; 1383c <close_stdout@@Base+0x2024>
   137b4:	mov	r2, #5
   137b8:	push	{r4, lr}
   137bc:	add	r1, pc, r1
   137c0:	mov	r0, #0
   137c4:	ldr	r4, [pc, #116]	; 13840 <close_stdout@@Base+0x2028>
   137c8:	bl	10f10 <dcgettext@plt>
   137cc:	ldr	r2, [pc, #112]	; 13844 <close_stdout@@Base+0x202c>
   137d0:	add	r4, pc, r4
   137d4:	add	r2, pc, r2
   137d8:	mov	r1, r0
   137dc:	mov	r0, #1
   137e0:	bl	11060 <__printf_chk@plt>
   137e4:	ldr	r1, [pc, #92]	; 13848 <close_stdout@@Base+0x2030>
   137e8:	mov	r2, #5
   137ec:	mov	r0, #0
   137f0:	add	r1, pc, r1
   137f4:	bl	10f10 <dcgettext@plt>
   137f8:	ldr	r2, [pc, #76]	; 1384c <close_stdout@@Base+0x2034>
   137fc:	ldr	r3, [pc, #76]	; 13850 <close_stdout@@Base+0x2038>
   13800:	add	r2, pc, r2
   13804:	add	r3, pc, r3
   13808:	mov	r1, r0
   1380c:	mov	r0, #1
   13810:	bl	11060 <__printf_chk@plt>
   13814:	ldr	r1, [pc, #56]	; 13854 <close_stdout@@Base+0x203c>
   13818:	mov	r0, #0
   1381c:	mov	r2, #5
   13820:	add	r1, pc, r1
   13824:	bl	10f10 <dcgettext@plt>
   13828:	ldr	r3, [pc, #40]	; 13858 <close_stdout@@Base+0x2040>
   1382c:	ldr	r3, [r4, r3]
   13830:	pop	{r4, lr}
   13834:	ldr	r1, [r3]
   13838:	b	10ea4 <fputs_unlocked@plt>
   1383c:	andeq	r1, r0, r0, asr #7
   13840:	andeq	r1, r1, r8, lsr #16
   13844:	andeq	r1, r0, r0, asr #7
   13848:			; <UNDEFINED> instruction: 0x000013bc
   1384c:	andeq	r0, r0, ip, ror #29
   13850:	strdeq	r0, [r0], -r8
   13854:	andeq	r1, r0, r0, lsr #7
   13858:	andeq	r0, r0, r0, lsl #2
   1385c:	push	{r4, lr}
   13860:	mov	r4, r0
   13864:	bl	10fc4 <malloc@plt>
   13868:	rsbs	r3, r0, #1
   1386c:	movcc	r3, #0
   13870:	cmp	r4, #0
   13874:	moveq	r3, #0
   13878:	cmp	r3, #0
   1387c:	popeq	{r4, pc}
   13880:	bl	13a70 <close_stdout@@Base+0x2258>
   13884:	push	{r3, r4, r5, lr}
   13888:	mov	r4, r0
   1388c:	mvn	r0, #0
   13890:	mov	r5, r1
   13894:	bl	14124 <close_stdout@@Base+0x290c>
   13898:	cmp	r0, r4
   1389c:	bcc	138ac <close_stdout@@Base+0x2094>
   138a0:	mul	r0, r4, r5
   138a4:	pop	{r3, r4, r5, lr}
   138a8:	b	1385c <close_stdout@@Base+0x2044>
   138ac:	bl	13a70 <close_stdout@@Base+0x2258>
   138b0:	b	1385c <close_stdout@@Base+0x2044>
   138b4:	rsbs	r3, r1, #1
   138b8:	push	{r4, lr}
   138bc:	movcc	r3, #0
   138c0:	cmp	r0, #0
   138c4:	mov	r4, r1
   138c8:	moveq	r3, #0
   138cc:	cmp	r3, #0
   138d0:	bne	138f4 <close_stdout@@Base+0x20dc>
   138d4:	bl	10f28 <realloc@plt>
   138d8:	rsbs	r3, r0, #1
   138dc:	movcc	r3, #0
   138e0:	cmp	r4, #0
   138e4:	moveq	r3, #0
   138e8:	cmp	r3, #0
   138ec:	popeq	{r4, pc}
   138f0:	bl	13a70 <close_stdout@@Base+0x2258>
   138f4:	bl	10ed4 <free@plt>
   138f8:	mov	r0, #0
   138fc:	pop	{r4, pc}
   13900:	push	{r4, r5, r6, lr}
   13904:	mov	r5, r1
   13908:	mov	r6, r0
   1390c:	mov	r1, r2
   13910:	mvn	r0, #0
   13914:	mov	r4, r2
   13918:	bl	14124 <close_stdout@@Base+0x290c>
   1391c:	cmp	r0, r5
   13920:	bcc	13934 <close_stdout@@Base+0x211c>
   13924:	mov	r0, r6
   13928:	mul	r1, r5, r4
   1392c:	pop	{r4, r5, r6, lr}
   13930:	b	138b4 <close_stdout@@Base+0x209c>
   13934:	bl	13a70 <close_stdout@@Base+0x2258>
   13938:	push	{r3, r4, r5, r6, r7, lr}
   1393c:	subs	r7, r0, #0
   13940:	mov	r5, r1
   13944:	mov	r6, r2
   13948:	ldr	r4, [r1]
   1394c:	beq	13984 <close_stdout@@Base+0x216c>
   13950:	movw	r0, #43690	; 0xaaaa
   13954:	mov	r1, r2
   13958:	bfi	r0, r0, #16, #16
   1395c:	bl	14124 <close_stdout@@Base+0x290c>
   13960:	cmp	r4, r0
   13964:	addcc	r3, r4, #1
   13968:	addcc	r4, r4, r3, lsr #1
   1396c:	bcs	139a8 <close_stdout@@Base+0x2190>
   13970:	str	r4, [r5]
   13974:	mov	r0, r7
   13978:	mul	r1, r6, r4
   1397c:	pop	{r3, r4, r5, r6, r7, lr}
   13980:	b	138b4 <close_stdout@@Base+0x209c>
   13984:	cmp	r4, #0
   13988:	bne	13970 <close_stdout@@Base+0x2158>
   1398c:	mov	r0, #64	; 0x40
   13990:	mov	r1, r2
   13994:	bl	14124 <close_stdout@@Base+0x290c>
   13998:	cmp	r0, #0
   1399c:	movne	r4, r0
   139a0:	addeq	r4, r0, #1
   139a4:	b	13970 <close_stdout@@Base+0x2158>
   139a8:	bl	13a70 <close_stdout@@Base+0x2258>
   139ac:	cmp	r0, #0
   139b0:	push	{r3, lr}
   139b4:	ldr	r3, [r1]
   139b8:	beq	139e4 <close_stdout@@Base+0x21cc>
   139bc:	movw	r2, #43689	; 0xaaa9
   139c0:	movt	r2, #43690	; 0xaaaa
   139c4:	cmp	r3, r2
   139c8:	addls	r2, r3, #1
   139cc:	addls	r3, r3, r2, lsr #1
   139d0:	bhi	139fc <close_stdout@@Base+0x21e4>
   139d4:	str	r3, [r1]
   139d8:	mov	r1, r3
   139dc:	pop	{r3, lr}
   139e0:	b	138b4 <close_stdout@@Base+0x209c>
   139e4:	cmp	r3, #0
   139e8:	moveq	r3, #64	; 0x40
   139ec:	str	r3, [r1]
   139f0:	mov	r1, r3
   139f4:	pop	{r3, lr}
   139f8:	b	138b4 <close_stdout@@Base+0x209c>
   139fc:	bl	13a70 <close_stdout@@Base+0x2258>
   13a00:	push	{r4, lr}
   13a04:	mov	r4, r0
   13a08:	bl	1385c <close_stdout@@Base+0x2044>
   13a0c:	mov	r2, r4
   13a10:	mov	r1, #0
   13a14:	pop	{r4, lr}
   13a18:	b	11048 <memset@plt>
   13a1c:	push	{r3, lr}
   13a20:	bl	10e98 <calloc@plt>
   13a24:	cmp	r0, #0
   13a28:	popne	{r3, pc}
   13a2c:	bl	13a70 <close_stdout@@Base+0x2258>
   13a30:	push	{r3, r4, r5, lr}
   13a34:	mov	r4, r1
   13a38:	mov	r5, r0
   13a3c:	mov	r0, r1
   13a40:	bl	1385c <close_stdout@@Base+0x2044>
   13a44:	mov	r1, r5
   13a48:	mov	r2, r4
   13a4c:	pop	{r3, r4, r5, lr}
   13a50:	b	10eec <memcpy@plt>
   13a54:	push	{r4, lr}
   13a58:	mov	r4, r0
   13a5c:	bl	11018 <strlen@plt>
   13a60:	add	r1, r0, #1
   13a64:	mov	r0, r4
   13a68:	pop	{r4, lr}
   13a6c:	b	13a30 <close_stdout@@Base+0x2218>
   13a70:	ldr	r3, [pc, #64]	; 13ab8 <close_stdout@@Base+0x22a0>
   13a74:	mov	r2, #5
   13a78:	ldr	ip, [pc, #60]	; 13abc <close_stdout@@Base+0x22a4>
   13a7c:	mov	r0, #0
   13a80:	add	r3, pc, r3
   13a84:	ldr	r1, [pc, #52]	; 13ac0 <close_stdout@@Base+0x22a8>
   13a88:	push	{r4, lr}
   13a8c:	add	r1, pc, r1
   13a90:	ldr	r3, [r3, ip]
   13a94:	ldr	r4, [r3]
   13a98:	bl	10f10 <dcgettext@plt>
   13a9c:	ldr	r2, [pc, #32]	; 13ac4 <close_stdout@@Base+0x22ac>
   13aa0:	mov	r1, #0
   13aa4:	add	r2, pc, r2
   13aa8:	mov	r3, r0
   13aac:	mov	r0, r4
   13ab0:	bl	10fa0 <error@plt>
   13ab4:	bl	110f0 <abort@plt>
   13ab8:	andeq	r1, r1, r8, ror r5
   13abc:	andeq	r0, r0, r4, lsl #2
   13ac0:	andeq	r1, r0, r4, lsr #3
   13ac4:			; <UNDEFINED> instruction: 0x00000db0
   13ac8:	push	{r3, lr}
   13acc:	bl	10f40 <__strndup@plt>
   13ad0:	cmp	r0, #0
   13ad4:	popne	{r3, pc}
   13ad8:	bl	13a70 <close_stdout@@Base+0x2258>
   13adc:	push	{r4, r5, r6, lr}
   13ae0:	mov	r4, r0
   13ae4:	bl	10f88 <__fpending@plt>
   13ae8:	mov	r6, r0
   13aec:	mov	r0, r4
   13af0:	ldr	r4, [r4]
   13af4:	bl	13f7c <close_stdout@@Base+0x2764>
   13af8:	and	r4, r4, #32
   13afc:	adds	r5, r0, #0
   13b00:	movne	r5, #1
   13b04:	cmp	r4, #0
   13b08:	bne	13b28 <close_stdout@@Base+0x2310>
   13b0c:	cmp	r5, #0
   13b10:	beq	13b20 <close_stdout@@Base+0x2308>
   13b14:	cmp	r6, #0
   13b18:	beq	13b44 <close_stdout@@Base+0x232c>
   13b1c:	mvn	r4, #0
   13b20:	mov	r0, r4
   13b24:	pop	{r4, r5, r6, pc}
   13b28:	cmp	r5, #0
   13b2c:	bne	13b1c <close_stdout@@Base+0x2304>
   13b30:	bl	11030 <__errno_location@plt>
   13b34:	mvn	r4, #0
   13b38:	str	r5, [r0]
   13b3c:	mov	r0, r4
   13b40:	pop	{r4, r5, r6, pc}
   13b44:	bl	11030 <__errno_location@plt>
   13b48:	ldr	r4, [r0]
   13b4c:	subs	r4, r4, #9
   13b50:	mvnne	r4, #0
   13b54:	mov	r0, r4
   13b58:	pop	{r4, r5, r6, pc}
   13b5c:	ldr	r3, [pc, #984]	; 13f3c <close_stdout@@Base+0x2724>
   13b60:	mov	r0, #14
   13b64:	ldr	r2, [pc, #980]	; 13f40 <close_stdout@@Base+0x2728>
   13b68:	add	r3, pc, r3
   13b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b70:	sub	sp, sp, #132	; 0x84
   13b74:	ldr	r6, [r3, r2]
   13b78:	ldr	r3, [r6]
   13b7c:	str	r3, [sp, #124]	; 0x7c
   13b80:	bl	110cc <nl_langinfo@plt>
   13b84:	subs	r5, r0, #0
   13b88:	beq	13c3c <close_stdout@@Base+0x2424>
   13b8c:	ldr	r3, [pc, #944]	; 13f44 <close_stdout@@Base+0x272c>
   13b90:	ldr	r4, [pc, r3]
   13b94:	cmp	r4, #0
   13b98:	beq	13c48 <close_stdout@@Base+0x2430>
   13b9c:	ldrb	r7, [r4]
   13ba0:	cmp	r7, #0
   13ba4:	bne	13bd8 <close_stdout@@Base+0x23c0>
   13ba8:	b	13c10 <close_stdout@@Base+0x23f8>
   13bac:	mov	r0, r4
   13bb0:	bl	11018 <strlen@plt>
   13bb4:	add	r0, r0, #1
   13bb8:	add	r7, r4, r0
   13bbc:	mov	r0, r7
   13bc0:	bl	11018 <strlen@plt>
   13bc4:	add	r0, r0, #1
   13bc8:	add	r4, r7, r0
   13bcc:	ldrb	r7, [r7, r0]
   13bd0:	cmp	r7, #0
   13bd4:	beq	13c10 <close_stdout@@Base+0x23f8>
   13bd8:	mov	r0, r5
   13bdc:	mov	r1, r4
   13be0:	bl	10ebc <strcmp@plt>
   13be4:	cmp	r0, #0
   13be8:	beq	13c00 <close_stdout@@Base+0x23e8>
   13bec:	cmp	r7, #42	; 0x2a
   13bf0:	bne	13bac <close_stdout@@Base+0x2394>
   13bf4:	ldrb	r3, [r4, #1]
   13bf8:	cmp	r3, #0
   13bfc:	bne	13bac <close_stdout@@Base+0x2394>
   13c00:	mov	r0, r4
   13c04:	bl	11018 <strlen@plt>
   13c08:	add	r0, r0, #1
   13c0c:	add	r5, r4, r0
   13c10:	ldrb	r3, [r5]
   13c14:	cmp	r3, #0
   13c18:	ldreq	r5, [pc, #808]	; 13f48 <close_stdout@@Base+0x2730>
   13c1c:	addeq	r5, pc, r5
   13c20:	ldr	r2, [sp, #124]	; 0x7c
   13c24:	mov	r0, r5
   13c28:	ldr	r3, [r6]
   13c2c:	cmp	r2, r3
   13c30:	bne	13f10 <close_stdout@@Base+0x26f8>
   13c34:	add	sp, sp, #132	; 0x84
   13c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c3c:	ldr	r5, [pc, #776]	; 13f4c <close_stdout@@Base+0x2734>
   13c40:	add	r5, pc, r5
   13c44:	b	13b8c <close_stdout@@Base+0x2374>
   13c48:	ldr	r0, [pc, #768]	; 13f50 <close_stdout@@Base+0x2738>
   13c4c:	add	r0, pc, r0
   13c50:	bl	10fb8 <getenv@plt>
   13c54:	subs	r8, r0, #0
   13c58:	beq	13ee8 <close_stdout@@Base+0x26d0>
   13c5c:	ldrb	r3, [r8]
   13c60:	cmp	r3, #0
   13c64:	beq	13e7c <close_stdout@@Base+0x2664>
   13c68:	bl	11018 <strlen@plt>
   13c6c:	subs	sl, r0, #0
   13c70:	subne	r3, sl, #1
   13c74:	bne	13e8c <close_stdout@@Base+0x2674>
   13c78:	mov	r9, #0
   13c7c:	mov	fp, r9
   13c80:	add	r9, sl, r9
   13c84:	add	r0, r9, #14
   13c88:	bl	10fc4 <malloc@plt>
   13c8c:	subs	r7, r0, #0
   13c90:	beq	13edc <close_stdout@@Base+0x26c4>
   13c94:	mov	r1, r8
   13c98:	mov	r2, sl
   13c9c:	bl	10eec <memcpy@plt>
   13ca0:	cmp	fp, #0
   13ca4:	add	ip, r7, r9
   13ca8:	movne	r3, #47	; 0x2f
   13cac:	strbne	r3, [r7, sl]
   13cb0:	ldr	r3, [pc, #668]	; 13f54 <close_stdout@@Base+0x273c>
   13cb4:	add	r3, pc, r3
   13cb8:	ldm	r3!, {r0, r1, r2}
   13cbc:	ldrh	r3, [r3]
   13cc0:	str	r0, [r7, r9]
   13cc4:	mov	r0, r7
   13cc8:	str	r1, [ip, #4]
   13ccc:	mov	r1, #32768	; 0x8000
   13cd0:	strh	r3, [ip, #12]
   13cd4:	str	r2, [ip, #8]
   13cd8:	bl	10fac <open64@plt>
   13cdc:	subs	r8, r0, #0
   13ce0:	blt	13ea4 <close_stdout@@Base+0x268c>
   13ce4:	ldr	r1, [pc, #620]	; 13f58 <close_stdout@@Base+0x2740>
   13ce8:	add	r1, pc, r1
   13cec:	bl	10e8c <fdopen@plt>
   13cf0:	subs	fp, r0, #0
   13cf4:	beq	13efc <close_stdout@@Base+0x26e4>
   13cf8:	ldr	r0, [pc, #604]	; 13f5c <close_stdout@@Base+0x2744>
   13cfc:	add	sl, sp, #20
   13d00:	add	r9, sp, #72	; 0x48
   13d04:	mov	r8, #0
   13d08:	add	r0, pc, r0
   13d0c:	str	r0, [sp, #12]
   13d10:	ldr	r3, [fp, #4]
   13d14:	ldr	r2, [fp, #8]
   13d18:	cmp	r3, r2
   13d1c:	bcs	13e08 <close_stdout@@Base+0x25f0>
   13d20:	add	r2, r3, #1
   13d24:	str	r2, [fp, #4]
   13d28:	ldrb	r0, [r3]
   13d2c:	cmp	r0, #32
   13d30:	beq	13d10 <close_stdout@@Base+0x24f8>
   13d34:	sub	r3, r0, #9
   13d38:	cmp	r3, #1
   13d3c:	bls	13d10 <close_stdout@@Base+0x24f8>
   13d40:	cmp	r0, #35	; 0x23
   13d44:	beq	13e1c <close_stdout@@Base+0x2604>
   13d48:	mov	r1, fp
   13d4c:	bl	11024 <ungetc@plt>
   13d50:	mov	r0, fp
   13d54:	ldr	r1, [sp, #12]
   13d58:	mov	r2, sl
   13d5c:	mov	r3, r9
   13d60:	bl	11054 <fscanf@plt>
   13d64:	cmp	r0, #1
   13d68:	ble	13e4c <close_stdout@@Base+0x2634>
   13d6c:	mov	r0, sl
   13d70:	bl	11018 <strlen@plt>
   13d74:	str	r0, [sp, #8]
   13d78:	mov	r0, r9
   13d7c:	bl	11018 <strlen@plt>
   13d80:	cmp	r8, #0
   13d84:	mov	r2, r0
   13d88:	bne	13eb0 <close_stdout@@Base+0x2698>
   13d8c:	ldr	r3, [sp, #8]
   13d90:	str	r2, [sp]
   13d94:	add	r8, r0, r3
   13d98:	add	r0, r8, #3
   13d9c:	add	r8, r8, #2
   13da0:	bl	10fc4 <malloc@plt>
   13da4:	ldr	r2, [sp]
   13da8:	mov	r3, r0
   13dac:	cmp	r3, #0
   13db0:	beq	13f14 <close_stdout@@Base+0x26fc>
   13db4:	ldr	r0, [sp, #8]
   13db8:	movw	r1, #65534	; 0xfffe
   13dbc:	movt	r1, #65535	; 0xffff
   13dc0:	rsb	r2, r2, r8
   13dc4:	rsb	r1, r0, r1
   13dc8:	stm	sp, {r2, r3}
   13dcc:	add	r0, r1, r2
   13dd0:	mov	r1, sl
   13dd4:	add	r0, r3, r0
   13dd8:	mov	r4, r3
   13ddc:	bl	10f7c <strcpy@plt>
   13de0:	ldr	r2, [sp]
   13de4:	ldr	r3, [sp, #4]
   13de8:	mov	r1, r9
   13dec:	sub	r0, r2, #1
   13df0:	add	r0, r3, r0
   13df4:	bl	10f7c <strcpy@plt>
   13df8:	ldr	r3, [fp, #4]
   13dfc:	ldr	r2, [fp, #8]
   13e00:	cmp	r3, r2
   13e04:	bcc	13d20 <close_stdout@@Base+0x2508>
   13e08:	mov	r0, fp
   13e0c:	bl	1109c <__uflow@plt>
   13e10:	cmn	r0, #1
   13e14:	beq	13e4c <close_stdout@@Base+0x2634>
   13e18:	b	13d2c <close_stdout@@Base+0x2514>
   13e1c:	ldr	r3, [fp, #4]
   13e20:	ldr	r2, [fp, #8]
   13e24:	cmp	r3, r2
   13e28:	bcs	13f30 <close_stdout@@Base+0x2718>
   13e2c:	add	r2, r3, #1
   13e30:	str	r2, [fp, #4]
   13e34:	ldrb	r0, [r3]
   13e38:	cmp	r0, #10
   13e3c:	cmnne	r0, #1
   13e40:	bne	13e1c <close_stdout@@Base+0x2604>
   13e44:	cmn	r0, #1
   13e48:	bne	13d10 <close_stdout@@Base+0x24f8>
   13e4c:	mov	r0, fp
   13e50:	bl	13f7c <close_stdout@@Base+0x2764>
   13e54:	cmp	r8, #0
   13e58:	beq	13ea4 <close_stdout@@Base+0x268c>
   13e5c:	mov	r3, #0
   13e60:	strb	r3, [r4, r8]
   13e64:	mov	r0, r7
   13e68:	bl	10ed4 <free@plt>
   13e6c:	ldr	r3, [pc, #236]	; 13f60 <close_stdout@@Base+0x2748>
   13e70:	add	r3, pc, r3
   13e74:	str	r4, [r3]
   13e78:	b	13b9c <close_stdout@@Base+0x2384>
   13e7c:	ldr	r8, [pc, #224]	; 13f64 <close_stdout@@Base+0x274c>
   13e80:	mov	r3, #7
   13e84:	mov	sl, #8
   13e88:	add	r8, pc, r8
   13e8c:	ldrb	r3, [r8, r3]
   13e90:	cmp	r3, #47	; 0x2f
   13e94:	movne	r9, #1
   13e98:	movne	fp, r9
   13e9c:	bne	13c80 <close_stdout@@Base+0x2468>
   13ea0:	b	13c78 <close_stdout@@Base+0x2460>
   13ea4:	ldr	r4, [pc, #188]	; 13f68 <close_stdout@@Base+0x2750>
   13ea8:	add	r4, pc, r4
   13eac:	b	13e64 <close_stdout@@Base+0x264c>
   13eb0:	ldr	r0, [sp, #8]
   13eb4:	str	r2, [sp]
   13eb8:	add	r3, r0, r2
   13ebc:	mov	r0, r4
   13ec0:	add	r8, r3, r8
   13ec4:	add	r1, r8, #3
   13ec8:	add	r8, r8, #2
   13ecc:	bl	10f28 <realloc@plt>
   13ed0:	ldr	r2, [sp]
   13ed4:	mov	r3, r0
   13ed8:	b	13dac <close_stdout@@Base+0x2594>
   13edc:	ldr	r4, [pc, #136]	; 13f6c <close_stdout@@Base+0x2754>
   13ee0:	add	r4, pc, r4
   13ee4:	b	13e6c <close_stdout@@Base+0x2654>
   13ee8:	ldr	r8, [pc, #128]	; 13f70 <close_stdout@@Base+0x2758>
   13eec:	mov	r3, #7
   13ef0:	mov	sl, #8
   13ef4:	add	r8, pc, r8
   13ef8:	b	13e8c <close_stdout@@Base+0x2674>
   13efc:	ldr	r4, [pc, #112]	; 13f74 <close_stdout@@Base+0x275c>
   13f00:	mov	r0, r8
   13f04:	add	r4, pc, r4
   13f08:	bl	110fc <close@plt>
   13f0c:	b	13e64 <close_stdout@@Base+0x264c>
   13f10:	bl	10f1c <__stack_chk_fail@plt>
   13f14:	mov	r0, r4
   13f18:	ldr	r4, [pc, #88]	; 13f78 <close_stdout@@Base+0x2760>
   13f1c:	bl	10ed4 <free@plt>
   13f20:	mov	r0, fp
   13f24:	add	r4, pc, r4
   13f28:	bl	13f7c <close_stdout@@Base+0x2764>
   13f2c:	b	13e64 <close_stdout@@Base+0x264c>
   13f30:	mov	r0, fp
   13f34:	bl	1109c <__uflow@plt>
   13f38:	b	13e38 <close_stdout@@Base+0x2620>
   13f3c:	muleq	r1, r0, r4
   13f40:	andeq	r0, r0, r4, ror #1
   13f44:	andeq	r1, r1, r0, lsl r7
   13f48:	andeq	r1, r0, r4, lsr r0
   13f4c:	muleq	r0, r0, sl
   13f50:	andeq	r1, r0, ip
   13f54:			; <UNDEFINED> instruction: 0x00000fb4
   13f58:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   13f5c:	andeq	r0, r0, r4, ror pc
   13f60:	andeq	r1, r1, r0, lsr r4
   13f64:			; <UNDEFINED> instruction: 0x00000dbc
   13f68:	andeq	r0, r0, r8, lsr #16
   13f6c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13f70:	andeq	r0, r0, r0, asr sp
   13f74:	andeq	r0, r0, ip, asr #15
   13f78:	andeq	r0, r0, ip, lsr #15
   13f7c:	push	{r4, r5, r6, lr}
   13f80:	sub	sp, sp, #8
   13f84:	mov	r4, r0
   13f88:	bl	1106c <fileno@plt>
   13f8c:	cmp	r0, #0
   13f90:	mov	r0, r4
   13f94:	blt	14010 <close_stdout@@Base+0x27f8>
   13f98:	bl	10fdc <__freading@plt>
   13f9c:	cmp	r0, #0
   13fa0:	bne	13fdc <close_stdout@@Base+0x27c4>
   13fa4:	mov	r0, r4
   13fa8:	bl	1401c <close_stdout@@Base+0x2804>
   13fac:	cmp	r0, #0
   13fb0:	beq	1400c <close_stdout@@Base+0x27f4>
   13fb4:	bl	11030 <__errno_location@plt>
   13fb8:	ldr	r6, [r0]
   13fbc:	mov	r5, r0
   13fc0:	mov	r0, r4
   13fc4:	bl	11084 <fclose@plt>
   13fc8:	cmp	r6, #0
   13fcc:	mvnne	r0, #0
   13fd0:	strne	r6, [r5]
   13fd4:	add	sp, sp, #8
   13fd8:	pop	{r4, r5, r6, pc}
   13fdc:	mov	r0, r4
   13fe0:	bl	1106c <fileno@plt>
   13fe4:	mov	r1, #1
   13fe8:	mov	r2, #0
   13fec:	mov	r3, #0
   13ff0:	str	r1, [sp]
   13ff4:	bl	10f64 <lseek64@plt>
   13ff8:	mvn	r2, #0
   13ffc:	mvn	r3, #0
   14000:	cmp	r1, r3
   14004:	cmpeq	r0, r2
   14008:	bne	13fa4 <close_stdout@@Base+0x278c>
   1400c:	mov	r0, r4
   14010:	add	sp, sp, #8
   14014:	pop	{r4, r5, r6, lr}
   14018:	b	11084 <fclose@plt>
   1401c:	push	{r4, lr}
   14020:	subs	r4, r0, #0
   14024:	sub	sp, sp, #8
   14028:	beq	14038 <close_stdout@@Base+0x2820>
   1402c:	bl	10fdc <__freading@plt>
   14030:	cmp	r0, #0
   14034:	bne	14048 <close_stdout@@Base+0x2830>
   14038:	mov	r0, r4
   1403c:	add	sp, sp, #8
   14040:	pop	{r4, lr}
   14044:	b	10ec8 <fflush@plt>
   14048:	ldr	r3, [r4]
   1404c:	tst	r3, #256	; 0x100
   14050:	beq	14038 <close_stdout@@Base+0x2820>
   14054:	mov	r3, #1
   14058:	mov	r0, r4
   1405c:	str	r3, [sp]
   14060:	mov	r2, #0
   14064:	mov	r3, #0
   14068:	bl	1407c <close_stdout@@Base+0x2864>
   1406c:	mov	r0, r4
   14070:	add	sp, sp, #8
   14074:	pop	{r4, lr}
   14078:	b	10ec8 <fflush@plt>
   1407c:	push	{r4, r5, r6, r7, lr}
   14080:	sub	sp, sp, #20
   14084:	ldmib	r0, {r1, ip}
   14088:	mov	r6, r0
   1408c:	ldr	r4, [sp, #40]	; 0x28
   14090:	cmp	ip, r1
   14094:	beq	140ac <close_stdout@@Base+0x2894>
   14098:	str	r4, [sp, #40]	; 0x28
   1409c:	mov	r0, r6
   140a0:	add	sp, sp, #20
   140a4:	pop	{r4, r5, r6, r7, lr}
   140a8:	b	11090 <fseeko64@plt>
   140ac:	ldr	ip, [r0, #20]
   140b0:	ldr	r1, [r0, #16]
   140b4:	cmp	ip, r1
   140b8:	bne	14098 <close_stdout@@Base+0x2880>
   140bc:	ldr	r7, [r0, #36]	; 0x24
   140c0:	cmp	r7, #0
   140c4:	bne	14098 <close_stdout@@Base+0x2880>
   140c8:	str	r2, [sp, #12]
   140cc:	mvn	r5, #0
   140d0:	str	r3, [sp, #8]
   140d4:	bl	1106c <fileno@plt>
   140d8:	str	r4, [sp]
   140dc:	mvn	r4, #0
   140e0:	ldr	r2, [sp, #12]
   140e4:	ldr	r3, [sp, #8]
   140e8:	bl	10f64 <lseek64@plt>
   140ec:	mov	r2, r0
   140f0:	mov	r3, r1
   140f4:	cmp	r3, r5
   140f8:	cmpeq	r2, r4
   140fc:	beq	1411c <close_stdout@@Base+0x2904>
   14100:	ldr	r1, [r6]
   14104:	mov	r0, r7
   14108:	strd	r2, [r6, #80]	; 0x50
   1410c:	bic	r3, r1, #16
   14110:	str	r3, [r6]
   14114:	add	sp, sp, #20
   14118:	pop	{r4, r5, r6, r7, pc}
   1411c:	mvn	r0, #0
   14120:	b	14114 <close_stdout@@Base+0x28fc>
   14124:	subs	r2, r1, #1
   14128:	bxeq	lr
   1412c:	bcc	14304 <close_stdout@@Base+0x2aec>
   14130:	cmp	r0, r1
   14134:	bls	142e8 <close_stdout@@Base+0x2ad0>
   14138:	tst	r1, r2
   1413c:	beq	142f4 <close_stdout@@Base+0x2adc>
   14140:	clz	r3, r0
   14144:	clz	r2, r1
   14148:	sub	r3, r2, r3
   1414c:	rsbs	r3, r3, #31
   14150:	addne	r3, r3, r3, lsl #1
   14154:	mov	r2, #0
   14158:	addne	pc, pc, r3, lsl #2
   1415c:	nop	{0}
   14160:	cmp	r0, r1, lsl #31
   14164:	adc	r2, r2, r2
   14168:	subcs	r0, r0, r1, lsl #31
   1416c:	cmp	r0, r1, lsl #30
   14170:	adc	r2, r2, r2
   14174:	subcs	r0, r0, r1, lsl #30
   14178:	cmp	r0, r1, lsl #29
   1417c:	adc	r2, r2, r2
   14180:	subcs	r0, r0, r1, lsl #29
   14184:	cmp	r0, r1, lsl #28
   14188:	adc	r2, r2, r2
   1418c:	subcs	r0, r0, r1, lsl #28
   14190:	cmp	r0, r1, lsl #27
   14194:	adc	r2, r2, r2
   14198:	subcs	r0, r0, r1, lsl #27
   1419c:	cmp	r0, r1, lsl #26
   141a0:	adc	r2, r2, r2
   141a4:	subcs	r0, r0, r1, lsl #26
   141a8:	cmp	r0, r1, lsl #25
   141ac:	adc	r2, r2, r2
   141b0:	subcs	r0, r0, r1, lsl #25
   141b4:	cmp	r0, r1, lsl #24
   141b8:	adc	r2, r2, r2
   141bc:	subcs	r0, r0, r1, lsl #24
   141c0:	cmp	r0, r1, lsl #23
   141c4:	adc	r2, r2, r2
   141c8:	subcs	r0, r0, r1, lsl #23
   141cc:	cmp	r0, r1, lsl #22
   141d0:	adc	r2, r2, r2
   141d4:	subcs	r0, r0, r1, lsl #22
   141d8:	cmp	r0, r1, lsl #21
   141dc:	adc	r2, r2, r2
   141e0:	subcs	r0, r0, r1, lsl #21
   141e4:	cmp	r0, r1, lsl #20
   141e8:	adc	r2, r2, r2
   141ec:	subcs	r0, r0, r1, lsl #20
   141f0:	cmp	r0, r1, lsl #19
   141f4:	adc	r2, r2, r2
   141f8:	subcs	r0, r0, r1, lsl #19
   141fc:	cmp	r0, r1, lsl #18
   14200:	adc	r2, r2, r2
   14204:	subcs	r0, r0, r1, lsl #18
   14208:	cmp	r0, r1, lsl #17
   1420c:	adc	r2, r2, r2
   14210:	subcs	r0, r0, r1, lsl #17
   14214:	cmp	r0, r1, lsl #16
   14218:	adc	r2, r2, r2
   1421c:	subcs	r0, r0, r1, lsl #16
   14220:	cmp	r0, r1, lsl #15
   14224:	adc	r2, r2, r2
   14228:	subcs	r0, r0, r1, lsl #15
   1422c:	cmp	r0, r1, lsl #14
   14230:	adc	r2, r2, r2
   14234:	subcs	r0, r0, r1, lsl #14
   14238:	cmp	r0, r1, lsl #13
   1423c:	adc	r2, r2, r2
   14240:	subcs	r0, r0, r1, lsl #13
   14244:	cmp	r0, r1, lsl #12
   14248:	adc	r2, r2, r2
   1424c:	subcs	r0, r0, r1, lsl #12
   14250:	cmp	r0, r1, lsl #11
   14254:	adc	r2, r2, r2
   14258:	subcs	r0, r0, r1, lsl #11
   1425c:	cmp	r0, r1, lsl #10
   14260:	adc	r2, r2, r2
   14264:	subcs	r0, r0, r1, lsl #10
   14268:	cmp	r0, r1, lsl #9
   1426c:	adc	r2, r2, r2
   14270:	subcs	r0, r0, r1, lsl #9
   14274:	cmp	r0, r1, lsl #8
   14278:	adc	r2, r2, r2
   1427c:	subcs	r0, r0, r1, lsl #8
   14280:	cmp	r0, r1, lsl #7
   14284:	adc	r2, r2, r2
   14288:	subcs	r0, r0, r1, lsl #7
   1428c:	cmp	r0, r1, lsl #6
   14290:	adc	r2, r2, r2
   14294:	subcs	r0, r0, r1, lsl #6
   14298:	cmp	r0, r1, lsl #5
   1429c:	adc	r2, r2, r2
   142a0:	subcs	r0, r0, r1, lsl #5
   142a4:	cmp	r0, r1, lsl #4
   142a8:	adc	r2, r2, r2
   142ac:	subcs	r0, r0, r1, lsl #4
   142b0:	cmp	r0, r1, lsl #3
   142b4:	adc	r2, r2, r2
   142b8:	subcs	r0, r0, r1, lsl #3
   142bc:	cmp	r0, r1, lsl #2
   142c0:	adc	r2, r2, r2
   142c4:	subcs	r0, r0, r1, lsl #2
   142c8:	cmp	r0, r1, lsl #1
   142cc:	adc	r2, r2, r2
   142d0:	subcs	r0, r0, r1, lsl #1
   142d4:	cmp	r0, r1
   142d8:	adc	r2, r2, r2
   142dc:	subcs	r0, r0, r1
   142e0:	mov	r0, r2
   142e4:	bx	lr
   142e8:	moveq	r0, #1
   142ec:	movne	r0, #0
   142f0:	bx	lr
   142f4:	clz	r2, r1
   142f8:	rsb	r2, r2, #31
   142fc:	lsr	r0, r0, r2
   14300:	bx	lr
   14304:	cmp	r0, #0
   14308:	mvnne	r0, #0
   1430c:	b	14330 <close_stdout@@Base+0x2b18>
   14310:	cmp	r1, #0
   14314:	beq	14304 <close_stdout@@Base+0x2aec>
   14318:	push	{r0, r1, lr}
   1431c:	bl	14124 <close_stdout@@Base+0x290c>
   14320:	pop	{r1, r2, lr}
   14324:	mul	r3, r2, r0
   14328:	sub	r1, r1, r3
   1432c:	bx	lr
   14330:	push	{r1, lr}
   14334:	mov	r0, #8
   14338:	bl	10eb0 <raise@plt>
   1433c:	pop	{r1, pc}
   14340:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14344:	mov	r7, r0
   14348:	ldr	r6, [pc, #76]	; 1439c <close_stdout@@Base+0x2b84>
   1434c:	mov	r8, r1
   14350:	ldr	r5, [pc, #72]	; 143a0 <close_stdout@@Base+0x2b88>
   14354:	mov	r9, r2
   14358:	add	r6, pc, r6
   1435c:	bl	10e6c <fdopen@plt-0x20>
   14360:	add	r5, pc, r5
   14364:	rsb	r6, r5, r6
   14368:	asrs	r6, r6, #2
   1436c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14370:	sub	r5, r5, #4
   14374:	mov	r4, #0
   14378:	add	r4, r4, #1
   1437c:	ldr	r3, [r5, #4]!
   14380:	mov	r0, r7
   14384:	mov	r1, r8
   14388:	mov	r2, r9
   1438c:	blx	r3
   14390:	cmp	r4, r6
   14394:	bne	14378 <close_stdout@@Base+0x2b60>
   14398:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1439c:	andeq	r0, r1, ip, lsl fp
   143a0:	andeq	r0, r1, r0, lsl fp
   143a4:	bx	lr
   143a8:	ldr	r3, [pc, #28]	; 143cc <close_stdout@@Base+0x2bb4>
   143ac:	mov	r1, #0
   143b0:	ldr	r2, [pc, #24]	; 143d0 <close_stdout@@Base+0x2bb8>
   143b4:	add	r3, pc, r3
   143b8:	ldr	r3, [r3, r2]
   143bc:	cmp	r3, #0
   143c0:	ldrne	r2, [r3]
   143c4:	moveq	r2, r3
   143c8:	b	1103c <__cxa_atexit@plt>
   143cc:	andeq	r0, r1, r4, asr #24
   143d0:	strdeq	r0, [r0], -ip

Disassembly of section .fini:

000143d4 <.fini>:
   143d4:	push	{r3, lr}
   143d8:	pop	{r3, pc}
