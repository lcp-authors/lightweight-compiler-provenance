
centos-preinstalled/nl-rule-list:     file format elf32-littlearm


Disassembly of section .init:

000107bc <.init>:
   107bc:	push	{r3, lr}
   107c0:	bl	10a40 <exit@plt+0x1b0>
   107c4:	pop	{r3, pc}

Disassembly of section .plt:

000107c8 <abort@plt-0x14>:
   107c8:	push	{lr}		; (str lr, [sp, #-4]!)
   107cc:	ldr	lr, [pc, #4]	; 107d8 <abort@plt-0x4>
   107d0:	add	lr, pc, lr
   107d4:	ldr	pc, [lr, #8]!
   107d8:	andeq	r0, r1, r8, lsr #16

000107dc <abort@plt>:
   107dc:	add	ip, pc, #0, 12
   107e0:	add	ip, ip, #16, 20	; 0x10000
   107e4:	ldr	pc, [ip, #2088]!	; 0x828

000107e8 <nl_cache_dump_filter@plt>:
   107e8:	add	ip, pc, #0, 12
   107ec:	add	ip, ip, #16, 20	; 0x10000
   107f0:	ldr	pc, [ip, #2080]!	; 0x820

000107f4 <__libc_start_main@plt>:
   107f4:	add	ip, pc, #0, 12
   107f8:	add	ip, ip, #16, 20	; 0x10000
   107fc:	ldr	pc, [ip, #2072]!	; 0x818

00010800 <__gmon_start__@plt>:
   10800:	add	ip, pc, #0, 12
   10804:	add	ip, ip, #16, 20	; 0x10000
   10808:	ldr	pc, [ip, #2064]!	; 0x810

0001080c <nl_cli_rule_parse_family@plt>:
   1080c:	add	ip, pc, #0, 12
   10810:	add	ip, ip, #16, 20	; 0x10000
   10814:	ldr	pc, [ip, #2056]!	; 0x808

00010818 <nl_cli_rule_alloc_cache@plt>:
   10818:	add	ip, pc, #0, 12
   1081c:	add	ip, ip, #16, 20	; 0x10000
   10820:	ldr	pc, [ip, #2048]!	; 0x800

00010824 <nl_cli_rule_alloc@plt>:
   10824:	add	ip, pc, #0, 12
   10828:	add	ip, ip, #16, 20	; 0x10000
   1082c:	ldr	pc, [ip, #2040]!	; 0x7f8

00010830 <nl_cli_print_version@plt>:
   10830:	add	ip, pc, #0, 12
   10834:	add	ip, ip, #16, 20	; 0x10000
   10838:	ldr	pc, [ip, #2032]!	; 0x7f0

0001083c <nl_cli_alloc_socket@plt>:
   1083c:	add	ip, pc, #0, 12
   10840:	add	ip, ip, #16, 20	; 0x10000
   10844:	ldr	pc, [ip, #2024]!	; 0x7e8

00010848 <getopt_long@plt>:
   10848:	add	ip, pc, #0, 12
   1084c:	add	ip, ip, #16, 20	; 0x10000
   10850:	ldr	pc, [ip, #2016]!	; 0x7e0

00010854 <nl_cli_parse_dumptype@plt>:
   10854:	add	ip, pc, #0, 12
   10858:	add	ip, ip, #16, 20	; 0x10000
   1085c:	ldr	pc, [ip, #2008]!	; 0x7d8

00010860 <nl_cli_link_alloc_cache@plt>:
   10860:	add	ip, pc, #0, 12
   10864:	add	ip, ip, #16, 20	; 0x10000
   10868:	ldr	pc, [ip, #2000]!	; 0x7d0

0001086c <__stack_chk_fail@plt>:
   1086c:	add	ip, pc, #0, 12
   10870:	add	ip, ip, #16, 20	; 0x10000
   10874:	ldr	pc, [ip, #1992]!	; 0x7c8

00010878 <puts@plt>:
   10878:	add	ip, pc, #0, 12
   1087c:	add	ip, ip, #16, 20	; 0x10000
   10880:	ldr	pc, [ip, #1984]!	; 0x7c0

00010884 <nl_cli_connect@plt>:
   10884:	add	ip, pc, #0, 12
   10888:	add	ip, ip, #16, 20	; 0x10000
   1088c:	ldr	pc, [ip, #1976]!	; 0x7b8

00010890 <exit@plt>:
   10890:	add	ip, pc, #0, 12
   10894:	add	ip, ip, #16, 20	; 0x10000
   10898:	ldr	pc, [ip, #1968]!	; 0x7b0

Disassembly of section .text:

0001089c <.text>:
   1089c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108a0:	movw	r2, #4268	; 0x10ac
   108a4:	movw	r9, #4264	; 0x10a8
   108a8:	movt	r2, #2
   108ac:	movt	r9, #2
   108b0:	mov	r7, r0
   108b4:	ldr	r2, [r2]
   108b8:	sub	sp, sp, #84	; 0x54
   108bc:	ldr	r0, [r9]
   108c0:	mov	r3, #0
   108c4:	mov	r6, r1
   108c8:	str	r3, [sp, #24]
   108cc:	str	r2, [sp, #52]	; 0x34
   108d0:	mov	r4, r3
   108d4:	str	r3, [sp, #28]
   108d8:	movw	r8, #4272	; 0x10b0
   108dc:	str	r3, [sp, #32]
   108e0:	movt	r8, #2
   108e4:	str	r3, [sp, #36]	; 0x24
   108e8:	add	r5, sp, #20
   108ec:	str	r3, [sp, #40]	; 0x28
   108f0:	movw	sl, #257	; 0x101
   108f4:	str	r3, [sp, #44]	; 0x2c
   108f8:	str	r3, [sp, #48]	; 0x30
   108fc:	str	r3, [sp, #56]	; 0x38
   10900:	str	r3, [sp, #60]	; 0x3c
   10904:	str	r3, [sp, #64]	; 0x40
   10908:	str	r3, [sp, #68]	; 0x44
   1090c:	str	r3, [sp, #72]	; 0x48
   10910:	str	r3, [sp, #8]
   10914:	str	r0, [sp, #76]	; 0x4c
   10918:	bl	1083c <nl_cli_alloc_socket@plt>
   1091c:	ldr	r3, [sp, #8]
   10920:	mov	r1, r3
   10924:	mov	fp, r0
   10928:	bl	10884 <nl_cli_connect@plt>
   1092c:	mov	r0, fp
   10930:	bl	10860 <nl_cli_link_alloc_cache@plt>
   10934:	mov	r0, fp
   10938:	bl	10818 <nl_cli_rule_alloc_cache@plt>
   1093c:	str	r0, [sp, #12]
   10940:	bl	10824 <nl_cli_rule_alloc@plt>
   10944:	mov	fp, r0
   10948:	str	r5, [sp]
   1094c:	movw	r2, #2992	; 0xbb0
   10950:	movw	r3, #4180	; 0x1054
   10954:	movt	r2, #1
   10958:	movt	r3, #2
   1095c:	mov	r0, r7
   10960:	mov	r1, r6
   10964:	str	r4, [sp, #20]
   10968:	bl	10848 <getopt_long@plt>
   1096c:	cmn	r0, #1
   10970:	beq	109d4 <exit@plt+0x144>
   10974:	cmp	r0, #104	; 0x68
   10978:	beq	109b8 <exit@plt+0x128>
   1097c:	ble	109a0 <exit@plt+0x110>
   10980:	cmp	r0, #118	; 0x76
   10984:	beq	109cc <exit@plt+0x13c>
   10988:	cmp	r0, sl
   1098c:	bne	10948 <exit@plt+0xb8>
   10990:	mov	r0, fp
   10994:	ldr	r1, [r8]
   10998:	bl	1080c <nl_cli_rule_parse_family@plt>
   1099c:	b	10948 <exit@plt+0xb8>
   109a0:	cmp	r0, #102	; 0x66
   109a4:	bne	10948 <exit@plt+0xb8>
   109a8:	ldr	r0, [r8]
   109ac:	bl	10854 <nl_cli_parse_dumptype@plt>
   109b0:	str	r0, [sp, #24]
   109b4:	b	10948 <exit@plt+0xb8>
   109b8:	movw	r0, #3000	; 0xbb8
   109bc:	movt	r0, #1
   109c0:	bl	10878 <puts@plt>
   109c4:	mov	r0, #0
   109c8:	bl	10890 <exit@plt>
   109cc:	bl	10830 <nl_cli_print_version@plt>
   109d0:	b	10948 <exit@plt+0xb8>
   109d4:	ldr	r0, [sp, #12]
   109d8:	mov	r2, fp
   109dc:	add	r1, sp, #24
   109e0:	bl	107e8 <nl_cache_dump_filter@plt>
   109e4:	ldr	r2, [sp, #76]	; 0x4c
   109e8:	ldr	r3, [r9]
   109ec:	mov	r0, #0
   109f0:	cmp	r2, r3
   109f4:	bne	10a00 <exit@plt+0x170>
   109f8:	add	sp, sp, #84	; 0x54
   109fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a00:	bl	1086c <__stack_chk_fail@plt>
   10a04:	mov	fp, #0
   10a08:	mov	lr, #0
   10a0c:	pop	{r1}		; (ldr r1, [sp], #4)
   10a10:	mov	r2, sp
   10a14:	push	{r2}		; (str r2, [sp, #-4]!)
   10a18:	push	{r0}		; (str r0, [sp, #-4]!)
   10a1c:	ldr	ip, [pc, #16]	; 10a34 <exit@plt+0x1a4>
   10a20:	push	{ip}		; (str ip, [sp, #-4]!)
   10a24:	ldr	r0, [pc, #12]	; 10a38 <exit@plt+0x1a8>
   10a28:	ldr	r3, [pc, #12]	; 10a3c <exit@plt+0x1ac>
   10a2c:	bl	107f4 <__libc_start_main@plt>
   10a30:	bl	107dc <abort@plt>
   10a34:	muleq	r1, ip, fp
   10a38:	muleq	r1, ip, r8
   10a3c:	andeq	r0, r1, r8, lsr fp
   10a40:	ldr	r3, [pc, #20]	; 10a5c <exit@plt+0x1cc>
   10a44:	ldr	r2, [pc, #20]	; 10a60 <exit@plt+0x1d0>
   10a48:	add	r3, pc, r3
   10a4c:	ldr	r2, [r3, r2]
   10a50:	cmp	r2, #0
   10a54:	bxeq	lr
   10a58:	b	10800 <__gmon_start__@plt>
   10a5c:			; <UNDEFINED> instruction: 0x000105b0
   10a60:	andeq	r0, r0, ip, asr #32
   10a64:	push	{r3, lr}
   10a68:	movw	r0, #4260	; 0x10a4
   10a6c:	ldr	r3, [pc, #36]	; 10a98 <exit@plt+0x208>
   10a70:	movt	r0, #2
   10a74:	rsb	r3, r0, r3
   10a78:	cmp	r3, #6
   10a7c:	popls	{r3, pc}
   10a80:	movw	r3, #0
   10a84:	movt	r3, #0
   10a88:	cmp	r3, #0
   10a8c:	popeq	{r3, pc}
   10a90:	blx	r3
   10a94:	pop	{r3, pc}
   10a98:	andeq	r1, r2, r7, lsr #1
   10a9c:	push	{r3, lr}
   10aa0:	movw	r0, #4260	; 0x10a4
   10aa4:	movw	r3, #4260	; 0x10a4
   10aa8:	movt	r0, #2
   10aac:	movt	r3, #2
   10ab0:	rsb	r3, r0, r3
   10ab4:	asr	r3, r3, #2
   10ab8:	add	r3, r3, r3, lsr #31
   10abc:	asrs	r1, r3, #1
   10ac0:	popeq	{r3, pc}
   10ac4:	movw	r2, #0
   10ac8:	movt	r2, #0
   10acc:	cmp	r2, #0
   10ad0:	popeq	{r3, pc}
   10ad4:	blx	r2
   10ad8:	pop	{r3, pc}
   10adc:	push	{r4, lr}
   10ae0:	movw	r4, #4276	; 0x10b4
   10ae4:	movt	r4, #2
   10ae8:	ldrb	r3, [r4]
   10aec:	cmp	r3, #0
   10af0:	popne	{r4, pc}
   10af4:	bl	10a64 <exit@plt+0x1d4>
   10af8:	mov	r3, #1
   10afc:	strb	r3, [r4]
   10b00:	pop	{r4, pc}
   10b04:	movw	r0, #3772	; 0xebc
   10b08:	movt	r0, #2
   10b0c:	push	{r3, lr}
   10b10:	ldr	r3, [r0]
   10b14:	cmp	r3, #0
   10b18:	beq	10b30 <exit@plt+0x2a0>
   10b1c:	movw	r3, #0
   10b20:	movt	r3, #0
   10b24:	cmp	r3, #0
   10b28:	beq	10b30 <exit@plt+0x2a0>
   10b2c:	blx	r3
   10b30:	pop	{r3, lr}
   10b34:	b	10a9c <exit@plt+0x20c>
   10b38:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10b3c:	mov	r7, r0
   10b40:	ldr	r6, [pc, #76]	; 10b94 <exit@plt+0x304>
   10b44:	mov	r8, r1
   10b48:	ldr	r5, [pc, #72]	; 10b98 <exit@plt+0x308>
   10b4c:	mov	r9, r2
   10b50:	add	r6, pc, r6
   10b54:	bl	107bc <abort@plt-0x20>
   10b58:	add	r5, pc, r5
   10b5c:	rsb	r6, r5, r6
   10b60:	asrs	r6, r6, #2
   10b64:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10b68:	sub	r5, r5, #4
   10b6c:	mov	r4, #0
   10b70:	add	r4, r4, #1
   10b74:	ldr	r3, [r5, #4]!
   10b78:	mov	r0, r7
   10b7c:	mov	r1, r8
   10b80:	mov	r2, r9
   10b84:	blx	r3
   10b88:	cmp	r4, r6
   10b8c:	bne	10b70 <exit@plt+0x2e0>
   10b90:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10b94:	andeq	r0, r1, r0, ror #6
   10b98:	andeq	r0, r1, r4, asr r3
   10b9c:	bx	lr

Disassembly of section .fini:

00010ba0 <.fini>:
   10ba0:	push	{r3, lr}
   10ba4:	pop	{r3, pc}
