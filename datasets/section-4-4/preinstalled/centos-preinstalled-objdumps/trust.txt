
centos-preinstalled/trust:     file format elf32-littlearm


Disassembly of section .init:

000121fc <_init@@Base>:
   121fc:	push	{r3, lr}
   12200:	bl	1287c <__assert_fail@plt+0x54>
   12204:	pop	{r3, pc}

Disassembly of section .plt:

00012208 <calloc@plt-0x14>:
   12208:	push	{lr}		; (str lr, [sp, #-4]!)
   1220c:	ldr	lr, [pc, #4]	; 12218 <_init@@Base+0x1c>
   12210:	add	lr, pc, lr
   12214:	ldr	pc, [lr, #8]!
   12218:	andeq	r1, r3, r8, ror #27

0001221c <calloc@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #200704	; 0x31000
   12224:	ldr	pc, [ip, #3560]!	; 0xde8

00012228 <strstr@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #200704	; 0x31000
   12230:	ldr	pc, [ip, #3552]!	; 0xde0

00012234 <p11_kit_iter_add_filter@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #200704	; 0x31000
   1223c:	ldr	pc, [ip, #3544]!	; 0xdd8

00012240 <getpwuid_r@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #200704	; 0x31000
   12248:	ldr	pc, [ip, #3536]!	; 0xdd0

0001224c <raise@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #200704	; 0x31000
   12254:	ldr	pc, [ip, #3528]!	; 0xdc8

00012258 <vasprintf@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #200704	; 0x31000
   12260:	ldr	pc, [ip, #3520]!	; 0xdc0

00012264 <asn1_read_value@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #200704	; 0x31000
   1226c:	ldr	pc, [ip, #3512]!	; 0xdb8

00012270 <pthread_mutexattr_init@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #200704	; 0x31000
   12278:	ldr	pc, [ip, #3504]!	; 0xdb0

0001227c <strcmp@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #200704	; 0x31000
   12284:	ldr	pc, [ip, #3496]!	; 0xda8

00012288 <strtol@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #200704	; 0x31000
   12290:	ldr	pc, [ip, #3488]!	; 0xda0

00012294 <p11_kit_iter_destroy_object@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #200704	; 0x31000
   1229c:	ldr	pc, [ip, #3480]!	; 0xd98

000122a0 <p11_kit_iter_set_uri@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #200704	; 0x31000
   122a8:	ldr	pc, [ip, #3472]!	; 0xd90

000122ac <getuid@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #200704	; 0x31000
   122b4:	ldr	pc, [ip, #3464]!	; 0xd88

000122b8 <memmove@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #200704	; 0x31000
   122c0:	ldr	pc, [ip, #3456]!	; 0xd80

000122c4 <free@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #200704	; 0x31000
   122cc:	ldr	pc, [ip, #3448]!	; 0xd78

000122d0 <p11_kit_iter_get_token@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #200704	; 0x31000
   122d8:	ldr	pc, [ip, #3440]!	; 0xd70

000122dc <__vsnprintf_chk@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #200704	; 0x31000
   122e4:	ldr	pc, [ip, #3432]!	; 0xd68

000122e8 <memcpy@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #200704	; 0x31000
   122f0:	ldr	pc, [ip, #3424]!	; 0xd60

000122f4 <NSSLOWHASH_NewContext@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #200704	; 0x31000
   122fc:	ldr	pc, [ip, #3416]!	; 0xd58

00012300 <p11_kit_iter_get_session@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #200704	; 0x31000
   12308:	ldr	pc, [ip, #3408]!	; 0xd50

0001230c <pthread_mutex_init@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #200704	; 0x31000
   12314:	ldr	pc, [ip, #3400]!	; 0xd48

00012318 <time@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #200704	; 0x31000
   12320:	ldr	pc, [ip, #3392]!	; 0xd40

00012324 <memcmp@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #200704	; 0x31000
   1232c:	ldr	pc, [ip, #3384]!	; 0xd38

00012330 <asn1_number_of_elements@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #200704	; 0x31000
   12338:	ldr	pc, [ip, #3376]!	; 0xd30

0001233c <p11_kit_iter_new@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #200704	; 0x31000
   12344:	ldr	pc, [ip, #3368]!	; 0xd28

00012348 <strdup@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #200704	; 0x31000
   12350:	ldr	pc, [ip, #3360]!	; 0xd20

00012354 <p11_kit_module_get_name@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #200704	; 0x31000
   1235c:	ldr	pc, [ip, #3352]!	; 0xd18

00012360 <__stack_chk_fail@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #200704	; 0x31000
   12368:	ldr	pc, [ip, #3344]!	; 0xd10

0001236c <p11_kit_modules_load_and_initialize@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #200704	; 0x31000
   12374:	ldr	pc, [ip, #3336]!	; 0xd08

00012378 <sysconf@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #200704	; 0x31000
   12380:	ldr	pc, [ip, #3328]!	; 0xd00

00012384 <unlink@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #200704	; 0x31000
   1238c:	ldr	pc, [ip, #3320]!	; 0xcf8

00012390 <realloc@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #200704	; 0x31000
   12398:	ldr	pc, [ip, #3312]!	; 0xcf0

0001239c <getrlimit@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #200704	; 0x31000
   123a4:	ldr	pc, [ip, #3304]!	; 0xce8

000123a8 <dlerror@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #200704	; 0x31000
   123b0:	ldr	pc, [ip, #3296]!	; 0xce0

000123b4 <NSSLOWHASH_Begin@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #200704	; 0x31000
   123bc:	ldr	pc, [ip, #3288]!	; 0xcd8

000123c0 <asn1_strerror@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #200704	; 0x31000
   123c8:	ldr	pc, [ip, #3280]!	; 0xcd0

000123cc <p11_kit_iter_load_attributes@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #200704	; 0x31000
   123d4:	ldr	pc, [ip, #3272]!	; 0xcc8

000123d8 <__xstat@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #200704	; 0x31000
   123e0:	ldr	pc, [ip, #3264]!	; 0xcc0

000123e4 <__memcpy_chk@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #200704	; 0x31000
   123ec:	ldr	pc, [ip, #3256]!	; 0xcb8

000123f0 <fwrite@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #200704	; 0x31000
   123f8:	ldr	pc, [ip, #3248]!	; 0xcb0

000123fc <NSSLOW_Init@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #200704	; 0x31000
   12404:	ldr	pc, [ip, #3240]!	; 0xca8

00012408 <p11_kit_module_release@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #200704	; 0x31000
   12410:	ldr	pc, [ip, #3232]!	; 0xca0

00012414 <p11_kit_uri_format@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #200704	; 0x31000
   1241c:	ldr	pc, [ip, #3224]!	; 0xc98

00012420 <opendir@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #200704	; 0x31000
   12428:	ldr	pc, [ip, #3216]!	; 0xc90

0001242c <asn1_write_value@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #200704	; 0x31000
   12434:	ldr	pc, [ip, #3208]!	; 0xc88

00012438 <asn1_length_der@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #200704	; 0x31000
   12440:	ldr	pc, [ip, #3200]!	; 0xc80

00012444 <getenv@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #200704	; 0x31000
   1244c:	ldr	pc, [ip, #3192]!	; 0xc78

00012450 <puts@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #200704	; 0x31000
   12458:	ldr	pc, [ip, #3184]!	; 0xc70

0001245c <malloc@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #200704	; 0x31000
   12464:	ldr	pc, [ip, #3176]!	; 0xc68

00012468 <__libc_start_main@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #200704	; 0x31000
   12470:	ldr	pc, [ip, #3168]!	; 0xc60

00012474 <p11_kit_uri_free@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #200704	; 0x31000
   1247c:	ldr	pc, [ip, #3160]!	; 0xc58

00012480 <__fxstat@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #200704	; 0x31000
   12488:	ldr	pc, [ip, #3152]!	; 0xc50

0001248c <p11_kit_modules_load@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #200704	; 0x31000
   12494:	ldr	pc, [ip, #3144]!	; 0xc48

00012498 <__vfprintf_chk@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #200704	; 0x31000
   124a0:	ldr	pc, [ip, #3136]!	; 0xc40

000124a4 <__ctype_tolower_loc@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #200704	; 0x31000
   124ac:	ldr	pc, [ip, #3128]!	; 0xc38

000124b0 <__gmon_start__@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #200704	; 0x31000
   124b8:	ldr	pc, [ip, #3120]!	; 0xc30

000124bc <open@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #200704	; 0x31000
   124c4:	ldr	pc, [ip, #3112]!	; 0xc28

000124c8 <pthread_mutexattr_settype@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #200704	; 0x31000
   124d0:	ldr	pc, [ip, #3104]!	; 0xc20

000124d4 <rename@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #200704	; 0x31000
   124dc:	ldr	pc, [ip, #3096]!	; 0xc18

000124e0 <getopt_long@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #200704	; 0x31000
   124e8:	ldr	pc, [ip, #3088]!	; 0xc10

000124ec <__ctype_b_loc@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #200704	; 0x31000
   124f4:	ldr	pc, [ip, #3080]!	; 0xc08

000124f8 <getpid@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #200704	; 0x31000
   12500:	ldr	pc, [ip, #3072]!	; 0xc00

00012504 <asn1_octet_der@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #200704	; 0x31000
   1250c:	ldr	pc, [ip, #3064]!	; 0xbf8

00012510 <exit@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #200704	; 0x31000
   12518:	ldr	pc, [ip, #3056]!	; 0xbf0

0001251c <p11_kit_iter_add_callback@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #200704	; 0x31000
   12524:	ldr	pc, [ip, #3048]!	; 0xbe8

00012528 <strtoul@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #200704	; 0x31000
   12530:	ldr	pc, [ip, #3040]!	; 0xbe0

00012534 <p11_kit_iter_get_object@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #200704	; 0x31000
   1253c:	ldr	pc, [ip, #3032]!	; 0xbd8

00012540 <strlen@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #200704	; 0x31000
   12548:	ldr	pc, [ip, #3024]!	; 0xbd0

0001254c <mmap@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #200704	; 0x31000
   12554:	ldr	pc, [ip, #3016]!	; 0xbc8

00012558 <strchr@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #200704	; 0x31000
   12560:	ldr	pc, [ip, #3008]!	; 0xbc0

00012564 <p11_kit_uri_new@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #200704	; 0x31000
   1256c:	ldr	pc, [ip, #3000]!	; 0xbb8

00012570 <p11_kit_uri_parse@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #200704	; 0x31000
   12578:	ldr	pc, [ip, #2992]!	; 0xbb0

0001257c <p11_kit_uri_any_unrecognized@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #200704	; 0x31000
   12584:	ldr	pc, [ip, #2984]!	; 0xba8

00012588 <mkstemp@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #200704	; 0x31000
   12590:	ldr	pc, [ip, #2976]!	; 0xba0

00012594 <p11_kit_module_initialize@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #200704	; 0x31000
   1259c:	ldr	pc, [ip, #2968]!	; 0xb98

000125a0 <execv@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #200704	; 0x31000
   125a8:	ldr	pc, [ip, #2960]!	; 0xb90

000125ac <asn1_get_length_der@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #200704	; 0x31000
   125b4:	ldr	pc, [ip, #2952]!	; 0xb88

000125b8 <__errno_location@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #200704	; 0x31000
   125c0:	ldr	pc, [ip, #2944]!	; 0xb80

000125c4 <__strdup@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #200704	; 0x31000
   125cc:	ldr	pc, [ip, #2936]!	; 0xb78

000125d0 <p11_kit_iter_begin@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #200704	; 0x31000
   125d8:	ldr	pc, [ip, #2928]!	; 0xb70

000125dc <mkdir@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #200704	; 0x31000
   125e4:	ldr	pc, [ip, #2920]!	; 0xb68

000125e8 <memset@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #200704	; 0x31000
   125f0:	ldr	pc, [ip, #2912]!	; 0xb60

000125f4 <bsearch@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #200704	; 0x31000
   125fc:	ldr	pc, [ip, #2904]!	; 0xb58

00012600 <putchar@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #200704	; 0x31000
   12608:	ldr	pc, [ip, #2896]!	; 0xb50

0001260c <strncpy@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #200704	; 0x31000
   12614:	ldr	pc, [ip, #2888]!	; 0xb48

00012618 <p11_kit_iter_free@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #200704	; 0x31000
   12620:	ldr	pc, [ip, #2880]!	; 0xb40

00012624 <__printf_chk@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #200704	; 0x31000
   1262c:	ldr	pc, [ip, #2872]!	; 0xb38

00012630 <link@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #200704	; 0x31000
   12638:	ldr	pc, [ip, #2864]!	; 0xb30

0001263c <write@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #200704	; 0x31000
   12644:	ldr	pc, [ip, #2856]!	; 0xb28

00012648 <p11_kit_message@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #200704	; 0x31000
   12650:	ldr	pc, [ip, #2848]!	; 0xb20

00012654 <asn1_der_decoding@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #200704	; 0x31000
   1265c:	ldr	pc, [ip, #2840]!	; 0xb18

00012660 <asprintf@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #200704	; 0x31000
   12668:	ldr	pc, [ip, #2832]!	; 0xb10

0001266c <__fprintf_chk@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #200704	; 0x31000
   12674:	ldr	pc, [ip, #2824]!	; 0xb08

00012678 <p11_kit_module_finalize@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #200704	; 0x31000
   12680:	ldr	pc, [ip, #2816]!	; 0xb00

00012684 <memchr@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #200704	; 0x31000
   1268c:	ldr	pc, [ip, #2808]!	; 0xaf8

00012690 <getauxval@plt>:
   12690:	add	ip, pc, #0, 12
   12694:	add	ip, ip, #200704	; 0x31000
   12698:	ldr	pc, [ip, #2800]!	; 0xaf0

0001269c <NSSLOWHASH_Destroy@plt>:
   1269c:	add	ip, pc, #0, 12
   126a0:	add	ip, ip, #200704	; 0x31000
   126a4:	ldr	pc, [ip, #2792]!	; 0xae8

000126a8 <p11_kit_iter_begin_with@plt>:
   126a8:	add	ip, pc, #0, 12
   126ac:	add	ip, ip, #200704	; 0x31000
   126b0:	ldr	pc, [ip, #2784]!	; 0xae0

000126b4 <p11_kit_iter_next@plt>:
   126b4:	add	ip, pc, #0, 12
   126b8:	add	ip, ip, #200704	; 0x31000
   126bc:	ldr	pc, [ip, #2776]!	; 0xad8

000126c0 <munmap@plt>:
   126c0:	add	ip, pc, #0, 12
   126c4:	add	ip, ip, #200704	; 0x31000
   126c8:	ldr	pc, [ip, #2768]!	; 0xad0

000126cc <asn1_get_tag_der@plt>:
   126cc:	add	ip, pc, #0, 12
   126d0:	add	ip, ip, #200704	; 0x31000
   126d4:	ldr	pc, [ip, #2760]!	; 0xac8

000126d8 <putenv@plt>:
   126d8:	add	ip, pc, #0, 12
   126dc:	add	ip, ip, #200704	; 0x31000
   126e0:	ldr	pc, [ip, #2752]!	; 0xac0

000126e4 <__xpg_strerror_r@plt>:
   126e4:	add	ip, pc, #0, 12
   126e8:	add	ip, ip, #200704	; 0x31000
   126ec:	ldr	pc, [ip, #2744]!	; 0xab8

000126f0 <readdir@plt>:
   126f0:	add	ip, pc, #0, 12
   126f4:	add	ip, ip, #200704	; 0x31000
   126f8:	ldr	pc, [ip, #2736]!	; 0xab0

000126fc <strrchr@plt>:
   126fc:	add	ip, pc, #0, 12
   12700:	add	ip, ip, #200704	; 0x31000
   12704:	ldr	pc, [ip, #2728]!	; 0xaa8

00012708 <asn1_der_decoding_startEnd@plt>:
   12708:	add	ip, pc, #0, 12
   1270c:	add	ip, ip, #200704	; 0x31000
   12710:	ldr	pc, [ip, #2720]!	; 0xaa0

00012714 <p11_kit_iter_get_module@plt>:
   12714:	add	ip, pc, #0, 12
   12718:	add	ip, ip, #200704	; 0x31000
   1271c:	ldr	pc, [ip, #2712]!	; 0xa98

00012720 <fputc@plt>:
   12720:	add	ip, pc, #0, 12
   12724:	add	ip, ip, #200704	; 0x31000
   12728:	ldr	pc, [ip, #2704]!	; 0xa90

0001272c <asn1_create_element@plt>:
   1272c:	add	ip, pc, #0, 12
   12730:	add	ip, ip, #200704	; 0x31000
   12734:	ldr	pc, [ip, #2696]!	; 0xa88

00012738 <symlink@plt>:
   12738:	add	ip, pc, #0, 12
   1273c:	add	ip, ip, #200704	; 0x31000
   12740:	ldr	pc, [ip, #2688]!	; 0xa80

00012744 <NSSLOWHASH_Update@plt>:
   12744:	add	ip, pc, #0, 12
   12748:	add	ip, ip, #200704	; 0x31000
   1274c:	ldr	pc, [ip, #2680]!	; 0xa78

00012750 <dirfd@plt>:
   12750:	add	ip, pc, #0, 12
   12754:	add	ip, ip, #200704	; 0x31000
   12758:	ldr	pc, [ip, #2672]!	; 0xa70

0001275c <NSSLOWHASH_End@plt>:
   1275c:	add	ip, pc, #0, 12
   12760:	add	ip, ip, #200704	; 0x31000
   12764:	ldr	pc, [ip, #2664]!	; 0xa68

00012768 <strpbrk@plt>:
   12768:	add	ip, pc, #0, 12
   1276c:	add	ip, ip, #200704	; 0x31000
   12770:	ldr	pc, [ip, #2656]!	; 0xa60

00012774 <p11_kit_strerror@plt>:
   12774:	add	ip, pc, #0, 12
   12778:	add	ip, ip, #200704	; 0x31000
   1277c:	ldr	pc, [ip, #2648]!	; 0xa58

00012780 <asn1_der_coding@plt>:
   12780:	add	ip, pc, #0, 12
   12784:	add	ip, ip, #200704	; 0x31000
   12788:	ldr	pc, [ip, #2640]!	; 0xa50

0001278c <asn1_delete_structure@plt>:
   1278c:	add	ip, pc, #0, 12
   12790:	add	ip, ip, #200704	; 0x31000
   12794:	ldr	pc, [ip, #2632]!	; 0xa48

00012798 <p11_kit_uri_get_token_info@plt>:
   12798:	add	ip, pc, #0, 12
   1279c:	add	ip, ip, #200704	; 0x31000
   127a0:	ldr	pc, [ip, #2624]!	; 0xa40

000127a4 <p11_kit_uri_set_attribute@plt>:
   127a4:	add	ip, pc, #0, 12
   127a8:	add	ip, ip, #200704	; 0x31000
   127ac:	ldr	pc, [ip, #2616]!	; 0xa38

000127b0 <chmod@plt>:
   127b0:	add	ip, pc, #0, 12
   127b4:	add	ip, ip, #200704	; 0x31000
   127b8:	ldr	pc, [ip, #2608]!	; 0xa30

000127bc <strncmp@plt>:
   127bc:	add	ip, pc, #0, 12
   127c0:	add	ip, ip, #200704	; 0x31000
   127c4:	ldr	pc, [ip, #2600]!	; 0xa28

000127c8 <abort@plt>:
   127c8:	add	ip, pc, #0, 12
   127cc:	add	ip, ip, #200704	; 0x31000
   127d0:	ldr	pc, [ip, #2592]!	; 0xa20

000127d4 <close@plt>:
   127d4:	add	ip, pc, #0, 12
   127d8:	add	ip, ip, #200704	; 0x31000
   127dc:	ldr	pc, [ip, #2584]!	; 0xa18

000127e0 <closedir@plt>:
   127e0:	add	ip, pc, #0, 12
   127e4:	add	ip, ip, #200704	; 0x31000
   127e8:	ldr	pc, [ip, #2576]!	; 0xa10

000127ec <pthread_mutexattr_destroy@plt>:
   127ec:	add	ip, pc, #0, 12
   127f0:	add	ip, ip, #200704	; 0x31000
   127f4:	ldr	pc, [ip, #2568]!	; 0xa08

000127f8 <p11_kit_modules_finalize_and_release@plt>:
   127f8:	add	ip, pc, #0, 12
   127fc:	add	ip, ip, #200704	; 0x31000
   12800:	ldr	pc, [ip, #2560]!	; 0xa00

00012804 <__snprintf_chk@plt>:
   12804:	add	ip, pc, #0, 12
   12808:	add	ip, ip, #200704	; 0x31000
   1280c:	ldr	pc, [ip, #2552]!	; 0x9f8

00012810 <asn1_array2tree@plt>:
   12810:	add	ip, pc, #0, 12
   12814:	add	ip, ip, #200704	; 0x31000
   12818:	ldr	pc, [ip, #2544]!	; 0x9f0

0001281c <strspn@plt>:
   1281c:	add	ip, pc, #0, 12
   12820:	add	ip, ip, #200704	; 0x31000
   12824:	ldr	pc, [ip, #2536]!	; 0x9e8

00012828 <__assert_fail@plt>:
   12828:	add	ip, pc, #0, 12
   1282c:	add	ip, ip, #200704	; 0x31000
   12830:	ldr	pc, [ip, #2528]!	; 0x9e0

Disassembly of section .text:

00012834 <strndup@@Base-0xfca0>:
   12834:	movw	r2, #33860	; 0x8444
   12838:	movt	r2, #2
   1283c:	b	255f4 <p11_dict_direct_equal@@Base+0x1dfc>
   12840:	mov	fp, #0
   12844:	mov	lr, #0
   12848:	pop	{r1}		; (ldr r1, [sp], #4)
   1284c:	mov	r2, sp
   12850:	push	{r2}		; (str r2, [sp, #-4]!)
   12854:	push	{r0}		; (str r0, [sp, #-4]!)
   12858:	ldr	ip, [pc, #16]	; 12870 <__assert_fail@plt+0x48>
   1285c:	push	{ip}		; (str ip, [sp, #-4]!)
   12860:	ldr	r0, [pc, #12]	; 12874 <__assert_fail@plt+0x4c>
   12864:	ldr	r3, [pc, #12]	; 12878 <__assert_fail@plt+0x50>
   12868:	bl	12468 <__libc_start_main@plt>
   1286c:	bl	127c8 <abort@plt>
   12870:	andeq	r5, r2, ip, ror ip
   12874:	andeq	r2, r1, r4, lsr r8
   12878:	andeq	r5, r2, r8, lsl ip
   1287c:	ldr	r3, [pc, #20]	; 12898 <__assert_fail@plt+0x70>
   12880:	ldr	r2, [pc, #20]	; 1289c <__assert_fail@plt+0x74>
   12884:	add	r3, pc, r3
   12888:	ldr	r2, [r3, r2]
   1288c:	cmp	r2, #0
   12890:	bxeq	lr
   12894:	b	124b0 <__gmon_start__@plt>
   12898:	andeq	r1, r3, r4, ror r7
   1289c:	andeq	r0, r0, r4, asr #4
   128a0:	push	{r3, lr}
   128a4:	movw	r0, #17144	; 0x42f8
   128a8:	ldr	r3, [pc, #36]	; 128d4 <__assert_fail@plt+0xac>
   128ac:	movt	r0, #4
   128b0:	rsb	r3, r0, r3
   128b4:	cmp	r3, #6
   128b8:	popls	{r3, pc}
   128bc:	movw	r3, #0
   128c0:	movt	r3, #0
   128c4:	cmp	r3, #0
   128c8:	popeq	{r3, pc}
   128cc:	blx	r3
   128d0:	pop	{r3, pc}
   128d4:	strdeq	r4, [r4], -fp
   128d8:	push	{r3, lr}
   128dc:	movw	r0, #17144	; 0x42f8
   128e0:	movw	r3, #17144	; 0x42f8
   128e4:	movt	r0, #4
   128e8:	movt	r3, #4
   128ec:	rsb	r3, r0, r3
   128f0:	asr	r3, r3, #2
   128f4:	add	r3, r3, r3, lsr #31
   128f8:	asrs	r1, r3, #1
   128fc:	popeq	{r3, pc}
   12900:	movw	r2, #0
   12904:	movt	r2, #0
   12908:	cmp	r2, #0
   1290c:	popeq	{r3, pc}
   12910:	blx	r2
   12914:	pop	{r3, pc}
   12918:	push	{r4, lr}
   1291c:	movw	r4, #17164	; 0x430c
   12920:	movt	r4, #4
   12924:	ldrb	r3, [r4]
   12928:	cmp	r3, #0
   1292c:	popne	{r4, pc}
   12930:	bl	128a0 <__assert_fail@plt+0x78>
   12934:	mov	r3, #1
   12938:	strb	r3, [r4]
   1293c:	pop	{r4, pc}
   12940:	movw	r0, #64612	; 0xfc64
   12944:	movt	r0, #3
   12948:	push	{r3, lr}
   1294c:	ldr	r3, [r0]
   12950:	cmp	r3, #0
   12954:	beq	1296c <__assert_fail@plt+0x144>
   12958:	movw	r3, #0
   1295c:	movt	r3, #0
   12960:	cmp	r3, #0
   12964:	beq	1296c <__assert_fail@plt+0x144>
   12968:	blx	r3
   1296c:	pop	{r3, lr}
   12970:	b	128d8 <__assert_fail@plt+0xb0>
   12974:	push	{r3, r4, r5, lr}
   12978:	mov	r4, r1
   1297c:	mov	r5, r0
   12980:	mov	r1, #0
   12984:	mov	r0, r4
   12988:	bl	20d84 <__assert_fail@plt+0xe55c>
   1298c:	subs	r1, r0, #0
   12990:	beq	129c8 <__assert_fail@plt+0x1a0>
   12994:	mov	r0, r5
   12998:	mov	r2, #1
   1299c:	bl	12234 <p11_kit_iter_add_filter@plt>
   129a0:	mov	r1, #17
   129a4:	mov	r0, r4
   129a8:	bl	20d84 <__assert_fail@plt+0xe55c>
   129ac:	subs	r1, r0, #0
   129b0:	beq	129c8 <__assert_fail@plt+0x1a0>
   129b4:	mov	r0, r5
   129b8:	mov	r2, #1
   129bc:	bl	12234 <p11_kit_iter_add_filter@plt>
   129c0:	mov	r0, #1
   129c4:	pop	{r3, r4, r5, pc}
   129c8:	mov	r0, #0
   129cc:	pop	{r3, r4, r5, pc}
   129d0:	push	{r4, lr}
   129d4:	mov	r0, #0
   129d8:	bl	14ab8 <__assert_fail@plt+0x2290>
   129dc:	subs	r4, r0, #0
   129e0:	beq	12a04 <__assert_fail@plt+0x1dc>
   129e4:	movw	r1, #17052	; 0x429c
   129e8:	movw	r2, #18708	; 0x4914
   129ec:	movt	r1, #1
   129f0:	movt	r2, #1
   129f4:	mov	r3, #0
   129f8:	bl	14c30 <__assert_fail@plt+0x2408>
   129fc:	mov	r0, r4
   12a00:	pop	{r4, pc}
   12a04:	movw	r0, #23980	; 0x5dac
   12a08:	movw	r1, #24012	; 0x5dcc
   12a0c:	movt	r0, #2
   12a10:	movt	r1, #2
   12a14:	movw	r2, #23696	; 0x5c90
   12a18:	movt	r2, #2
   12a1c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   12a20:	b	129fc <__assert_fail@plt+0x1d4>
   12a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a28:	movw	r4, #17144	; 0x42f8
   12a2c:	movt	r4, #4
   12a30:	sub	sp, sp, #420	; 0x1a4
   12a34:	mov	r2, #96	; 0x60
   12a38:	mov	r6, r0
   12a3c:	ldr	r3, [r4]
   12a40:	mov	sl, r1
   12a44:	add	r0, sp, #156	; 0x9c
   12a48:	mov	r1, #0
   12a4c:	str	r3, [sp, #412]	; 0x19c
   12a50:	bl	125e8 <memset@plt>
   12a54:	mov	r3, #0
   12a58:	movw	r1, #24036	; 0x5de4
   12a5c:	mov	r5, r3
   12a60:	movt	r1, #2
   12a64:	movw	r2, #24044	; 0x5dec
   12a68:	str	r1, [sp, #156]	; 0x9c
   12a6c:	movt	r2, #2
   12a70:	movw	r1, #24052	; 0x5df4
   12a74:	str	r2, [sp, #172]	; 0xac
   12a78:	movt	r1, #2
   12a7c:	movw	r2, #24060	; 0x5dfc
   12a80:	str	r1, [sp, #188]	; 0xbc
   12a84:	movt	r2, #2
   12a88:	movw	r1, #24068	; 0x5e04
   12a8c:	str	r2, [sp, #204]	; 0xcc
   12a90:	movt	r1, #2
   12a94:	movw	r2, #24076	; 0x5e0c
   12a98:	str	r1, [sp, #220]	; 0xdc
   12a9c:	movt	r2, #2
   12aa0:	movw	r1, #24164	; 0x5e64
   12aa4:	str	r2, [sp, #112]	; 0x70
   12aa8:	movt	r1, #2
   12aac:	movw	r2, #24192	; 0x5e80
   12ab0:	str	r1, [sp, #124]	; 0x7c
   12ab4:	movt	r2, #2
   12ab8:	mov	r1, #118	; 0x76
   12abc:	str	r2, [sp, #136]	; 0x88
   12ac0:	mov	lr, #115	; 0x73
   12ac4:	mov	r2, #113	; 0x71
   12ac8:	mov	ip, #114	; 0x72
   12acc:	mov	r0, #104	; 0x68
   12ad0:	str	r3, [sp, #108]	; 0x6c
   12ad4:	str	r3, [sp, #116]	; 0x74
   12ad8:	str	r3, [sp, #128]	; 0x80
   12adc:	str	r3, [sp, #140]	; 0x8c
   12ae0:	str	r3, [sp, #144]	; 0x90
   12ae4:	str	r3, [sp, #148]	; 0x94
   12ae8:	str	r3, [sp, #152]	; 0x98
   12aec:	str	lr, [sp, #168]	; 0xa8
   12af0:	str	ip, [sp, #184]	; 0xb8
   12af4:	str	r1, [sp, #200]	; 0xc8
   12af8:	str	r1, [sp, #120]	; 0x78
   12afc:	str	r2, [sp, #216]	; 0xd8
   12b00:	str	r2, [sp, #132]	; 0x84
   12b04:	str	r0, [sp, #232]	; 0xe8
   12b08:	mov	r0, r6
   12b0c:	mov	r1, sl
   12b10:	add	r2, sp, #156	; 0x9c
   12b14:	bl	25450 <p11_dict_direct_equal@@Base+0x1c58>
   12b18:	cmn	r0, #1
   12b1c:	beq	12c78 <__assert_fail@plt+0x450>
   12b20:	sub	r3, r0, #63	; 0x3f
   12b24:	cmp	r3, #55	; 0x37
   12b28:	ldrls	pc, [pc, r3, lsl #2]
   12b2c:	b	12c5c <__assert_fail@plt+0x434>
   12b30:	andeq	r2, r1, r8, asr #24
   12b34:	andeq	r2, r1, ip, asr ip
   12b38:	andeq	r2, r1, ip, asr ip
   12b3c:	andeq	r2, r1, ip, asr ip
   12b40:	andeq	r2, r1, ip, asr ip
   12b44:	andeq	r2, r1, ip, asr ip
   12b48:	andeq	r2, r1, ip, asr ip
   12b4c:	andeq	r2, r1, ip, asr ip
   12b50:	andeq	r2, r1, ip, asr ip
   12b54:	andeq	r2, r1, ip, asr ip
   12b58:	andeq	r2, r1, ip, asr ip
   12b5c:	andeq	r2, r1, ip, asr ip
   12b60:	andeq	r2, r1, ip, asr ip
   12b64:	andeq	r2, r1, ip, asr ip
   12b68:	andeq	r2, r1, ip, asr ip
   12b6c:	andeq	r2, r1, ip, asr ip
   12b70:	andeq	r2, r1, ip, asr ip
   12b74:	andeq	r2, r1, ip, asr ip
   12b78:	andeq	r2, r1, ip, asr ip
   12b7c:	andeq	r2, r1, ip, asr ip
   12b80:	andeq	r2, r1, ip, asr ip
   12b84:	andeq	r2, r1, ip, asr ip
   12b88:	andeq	r2, r1, ip, asr ip
   12b8c:	andeq	r2, r1, ip, asr ip
   12b90:	andeq	r2, r1, ip, asr ip
   12b94:	andeq	r2, r1, ip, asr ip
   12b98:	andeq	r2, r1, ip, asr ip
   12b9c:	andeq	r2, r1, ip, asr ip
   12ba0:	andeq	r2, r1, ip, asr ip
   12ba4:	andeq	r2, r1, ip, asr ip
   12ba8:	andeq	r2, r1, ip, asr ip
   12bac:	andeq	r2, r1, ip, asr ip
   12bb0:	andeq	r2, r1, ip, asr ip
   12bb4:	andeq	r2, r1, ip, asr ip
   12bb8:	andeq	r2, r1, ip, asr ip
   12bbc:	andeq	r2, r1, ip, asr ip
   12bc0:	andeq	r2, r1, ip, asr ip
   12bc4:	andeq	r2, r1, ip, asr ip
   12bc8:	andeq	r2, r1, ip, asr ip
   12bcc:	andeq	r2, r1, ip, asr ip
   12bd0:	andeq	r2, r1, ip, asr ip
   12bd4:	andeq	r2, r1, r0, lsr #24
   12bd8:	andeq	r2, r1, ip, asr ip
   12bdc:	andeq	r2, r1, ip, asr ip
   12be0:	andeq	r2, r1, ip, asr ip
   12be4:	andeq	r2, r1, ip, asr ip
   12be8:	andeq	r2, r1, ip, asr ip
   12bec:	andeq	r2, r1, ip, asr ip
   12bf0:	andeq	r2, r1, ip, asr ip
   12bf4:	andeq	r2, r1, ip, asr ip
   12bf8:	andeq	r2, r1, r8, lsl #22
   12bfc:	andeq	r2, r1, r0, lsl ip
   12c00:	andeq	r2, r1, r0, lsl ip
   12c04:	andeq	r2, r1, ip, asr ip
   12c08:	andeq	r2, r1, ip, asr ip
   12c0c:	andeq	r2, r1, r8, lsl #22
   12c10:	cmp	r5, #0
   12c14:	bne	131a4 <__assert_fail@plt+0x97c>
   12c18:	mov	r5, r0
   12c1c:	b	12b08 <__assert_fail@plt+0x2e0>
   12c20:	add	r0, sp, #108	; 0x6c
   12c24:	add	r1, sp, #156	; 0x9c
   12c28:	bl	251b8 <p11_dict_direct_equal@@Base+0x19c0>
   12c2c:	mov	r0, #0
   12c30:	ldr	r2, [sp, #412]	; 0x19c
   12c34:	ldr	r3, [r4]
   12c38:	cmp	r2, r3
   12c3c:	bne	133e0 <__assert_fail@plt+0xbb8>
   12c40:	add	sp, sp, #420	; 0x1a4
   12c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c48:	add	r0, sp, #108	; 0x6c
   12c4c:	add	r1, sp, #156	; 0x9c
   12c50:	bl	251b8 <p11_dict_direct_equal@@Base+0x19c0>
   12c54:	mov	r0, #2
   12c58:	b	12c30 <__assert_fail@plt+0x408>
   12c5c:	movw	r0, #24248	; 0x5eb8
   12c60:	movw	r1, #24288	; 0x5ee0
   12c64:	movt	r0, #2
   12c68:	movt	r1, #2
   12c6c:	mov	r2, #664	; 0x298
   12c70:	ldr	r3, [pc, #3672]	; 13ad0 <__assert_fail@plt+0x12a8>
   12c74:	bl	12828 <__assert_fail@plt>
   12c78:	movw	r3, #17152	; 0x4300
   12c7c:	movt	r3, #4
   12c80:	cmp	r5, #0
   12c84:	ldr	r3, [r3]
   12c88:	rsb	r6, r3, r6
   12c8c:	str	r6, [sp, #16]
   12c90:	str	r3, [sp, #24]
   12c94:	add	r8, sl, r3, lsl #2
   12c98:	bne	12d9c <__assert_fail@plt+0x574>
   12c9c:	movw	r0, #2208	; 0x8a0
   12ca0:	movt	r0, #2
   12ca4:	bl	21c90 <__assert_fail@plt+0xf468>
   12ca8:	subs	r9, r0, #0
   12cac:	beq	13a28 <__assert_fail@plt+0x1200>
   12cb0:	bl	129d0 <__assert_fail@plt+0x1a8>
   12cb4:	subs	ip, r0, #0
   12cb8:	str	ip, [sp, #28]
   12cbc:	beq	13a74 <__assert_fail@plt+0x124c>
   12cc0:	ldr	ip, [sp, #16]
   12cc4:	cmp	ip, #0
   12cc8:	ble	13a50 <__assert_fail@plt+0x1228>
   12ccc:	ldr	r7, [sp, #28]
   12cd0:	mov	r5, #0
   12cd4:	mov	ip, #0
   12cd8:	str	sl, [sp, #32]
   12cdc:	str	ip, [sp, #12]
   12ce0:	movw	ip, #17132	; 0x42ec
   12ce4:	movt	ip, #4
   12ce8:	str	ip, [sp, #20]
   12cec:	ldr	r1, [r8]
   12cf0:	mov	r0, r7
   12cf4:	mov	r2, #0
   12cf8:	mov	r3, #1
   12cfc:	bl	14e04 <__assert_fail@plt+0x25dc>
   12d00:	mov	r6, r8
   12d04:	add	r8, r8, #4
   12d08:	cmp	r0, #0
   12d0c:	beq	13250 <__assert_fail@plt+0xa28>
   12d10:	cmp	r0, #1
   12d14:	bne	1322c <__assert_fail@plt+0xa04>
   12d18:	ldr	ip, [sp, #20]
   12d1c:	ldr	r3, [ip]
   12d20:	tst	r3, #64	; 0x40
   12d24:	bne	133c4 <__assert_fail@plt+0xb9c>
   12d28:	mov	r0, r7
   12d2c:	bl	14bf8 <__assert_fail@plt+0x23d0>
   12d30:	ldr	r2, [r0, #4]
   12d34:	mov	fp, r0
   12d38:	cmp	r2, #0
   12d3c:	movne	r6, #0
   12d40:	movne	sl, r6
   12d44:	bne	12d68 <__assert_fail@plt+0x540>
   12d48:	b	131c4 <__assert_fail@plt+0x99c>
   12d4c:	ldr	r3, [fp]
   12d50:	add	r6, r6, #1
   12d54:	str	r5, [r3, sl, lsl #2]
   12d58:	mov	sl, r6
   12d5c:	ldr	r3, [fp, #4]
   12d60:	cmp	r6, r3
   12d64:	bcs	131c4 <__assert_fail@plt+0x99c>
   12d68:	ldr	r3, [fp]
   12d6c:	mov	r0, r9
   12d70:	ldr	r1, [r3, sl, lsl #2]
   12d74:	bl	21b4c <__assert_fail@plt+0xf324>
   12d78:	cmp	r0, #0
   12d7c:	bne	12d4c <__assert_fail@plt+0x524>
   12d80:	movw	r0, #24400	; 0x5f50
   12d84:	ldr	r1, [pc, #3400]	; 13ad4 <__assert_fail@plt+0x12ac>
   12d88:	movt	r0, #2
   12d8c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   12d90:	mov	r5, #1
   12d94:	mov	r0, r5
   12d98:	b	12c30 <__assert_fail@plt+0x408>
   12d9c:	cmp	r5, #115	; 0x73
   12da0:	beq	12c9c <__assert_fail@plt+0x474>
   12da4:	cmp	r5, #114	; 0x72
   12da8:	bne	13a90 <__assert_fail@plt+0x1268>
   12dac:	movw	r0, #9752	; 0x2618
   12db0:	movt	r0, #1
   12db4:	bl	21c90 <__assert_fail@plt+0xf468>
   12db8:	subs	r7, r0, #0
   12dbc:	beq	13a58 <__assert_fail@plt+0x1230>
   12dc0:	ldr	ip, [sp, #16]
   12dc4:	cmp	ip, #0
   12dc8:	movle	ip, #0
   12dcc:	strle	ip, [sp, #12]
   12dd0:	ble	12f1c <__assert_fail@plt+0x6f4>
   12dd4:	mov	r9, #0
   12dd8:	movw	ip, #17132	; 0x42ec
   12ddc:	str	r9, [sp, #12]
   12de0:	movt	ip, #4
   12de4:	str	sl, [sp, #28]
   12de8:	str	ip, [sp, #20]
   12dec:	mov	r5, r8
   12df0:	ldr	r6, [r8], #4
   12df4:	movw	r1, #24924	; 0x615c
   12df8:	mov	r2, #7
   12dfc:	movt	r1, #2
   12e00:	mov	r0, r6
   12e04:	bl	127bc <strncmp@plt>
   12e08:	cmp	r0, #0
   12e0c:	beq	12f54 <__assert_fail@plt+0x72c>
   12e10:	cmp	r9, #0
   12e14:	beq	13264 <__assert_fail@plt+0xa3c>
   12e18:	mov	r1, r6
   12e1c:	mov	r0, r9
   12e20:	mov	r2, #0
   12e24:	mov	r3, #1
   12e28:	bl	14e04 <__assert_fail@plt+0x25dc>
   12e2c:	cmp	r0, #0
   12e30:	beq	12fd0 <__assert_fail@plt+0x7a8>
   12e34:	cmp	r0, #1
   12e38:	bne	12fb8 <__assert_fail@plt+0x790>
   12e3c:	ldr	ip, [sp, #20]
   12e40:	ldr	r3, [ip]
   12e44:	tst	r3, #64	; 0x40
   12e48:	bne	13210 <__assert_fail@plt+0x9e8>
   12e4c:	mov	r0, r9
   12e50:	bl	14bf8 <__assert_fail@plt+0x23d0>
   12e54:	ldr	r2, [r0, #4]
   12e58:	mov	fp, r0
   12e5c:	cmp	r2, #0
   12e60:	beq	12ef0 <__assert_fail@plt+0x6c8>
   12e64:	mov	r5, #0
   12e68:	mov	r6, r5
   12e6c:	b	12ea4 <__assert_fail@plt+0x67c>
   12e70:	ldr	r3, [fp]
   12e74:	ldr	r1, [r3, r6, lsl #2]
   12e78:	bl	12974 <__assert_fail@plt+0x14c>
   12e7c:	mov	r0, r7
   12e80:	mov	r1, sl
   12e84:	bl	21b4c <__assert_fail@plt+0xf324>
   12e88:	cmp	r0, #0
   12e8c:	beq	12fa4 <__assert_fail@plt+0x77c>
   12e90:	ldr	r3, [fp, #4]
   12e94:	add	r5, r5, #1
   12e98:	cmp	r5, r3
   12e9c:	mov	r6, r5
   12ea0:	bcs	12ef0 <__assert_fail@plt+0x6c8>
   12ea4:	mov	r0, #0
   12ea8:	mov	r1, #4
   12eac:	bl	1233c <p11_kit_iter_new@plt>
   12eb0:	subs	sl, r0, #0
   12eb4:	bne	12e70 <__assert_fail@plt+0x648>
   12eb8:	movw	r0, #23980	; 0x5dac
   12ebc:	movw	r1, #28588	; 0x6fac
   12ec0:	movt	r0, #2
   12ec4:	movt	r1, #2
   12ec8:	ldr	r2, [pc, #3080]	; 13ad8 <__assert_fail@plt+0x12b0>
   12ecc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   12ed0:	movw	r0, #23980	; 0x5dac
   12ed4:	movw	r1, #24908	; 0x614c
   12ed8:	movt	r0, #2
   12edc:	movt	r1, #2
   12ee0:	ldr	r2, [pc, #3060]	; 13adc <__assert_fail@plt+0x12b4>
   12ee4:	mov	r5, #1
   12ee8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   12eec:	b	12d94 <__assert_fail@plt+0x56c>
   12ef0:	ldr	ip, [sp, #12]
   12ef4:	ldr	lr, [sp, #16]
   12ef8:	add	ip, ip, #1
   12efc:	str	ip, [sp, #12]
   12f00:	cmp	ip, lr
   12f04:	bne	12dec <__assert_fail@plt+0x5c4>
   12f08:	ldr	sl, [sp, #28]
   12f0c:	cmp	r9, #0
   12f10:	beq	12f1c <__assert_fail@plt+0x6f4>
   12f14:	mov	r0, r9
   12f18:	bl	14b88 <__assert_fail@plt+0x2360>
   12f1c:	ldr	ip, [sp, #16]
   12f20:	ldr	lr, [sp, #12]
   12f24:	cmp	ip, lr
   12f28:	bne	13a44 <__assert_fail@plt+0x121c>
   12f2c:	ldr	r3, [r7, #4]
   12f30:	cmp	r3, #0
   12f34:	bne	12fe8 <__assert_fail@plt+0x7c0>
   12f38:	movw	r0, #24956	; 0x617c
   12f3c:	movt	r0, #2
   12f40:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   12f44:	mov	r0, r7
   12f48:	bl	21c6c <__assert_fail@plt+0xf444>
   12f4c:	mov	r5, #2
   12f50:	b	12d94 <__assert_fail@plt+0x56c>
   12f54:	bl	12564 <p11_kit_uri_new@plt>
   12f58:	mov	r1, #14
   12f5c:	mov	r2, r0
   12f60:	mov	r6, r0
   12f64:	ldr	r0, [r8, #-4]
   12f68:	bl	12570 <p11_kit_uri_parse@plt>
   12f6c:	cmp	r0, #0
   12f70:	bne	139fc <__assert_fail@plt+0x11d4>
   12f74:	mov	r0, r6
   12f78:	mov	r1, #4
   12f7c:	bl	1233c <p11_kit_iter_new@plt>
   12f80:	subs	r5, r0, #0
   12f84:	beq	12eb8 <__assert_fail@plt+0x690>
   12f88:	mov	r0, r6
   12f8c:	bl	12474 <p11_kit_uri_free@plt>
   12f90:	mov	r0, r7
   12f94:	mov	r1, r5
   12f98:	bl	21b4c <__assert_fail@plt+0xf324>
   12f9c:	cmp	r0, #0
   12fa0:	bne	12ef0 <__assert_fail@plt+0x6c8>
   12fa4:	movw	r0, #24400	; 0x5f50
   12fa8:	ldr	r1, [pc, #2856]	; 13ad8 <__assert_fail@plt+0x12b0>
   12fac:	movt	r0, #2
   12fb0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   12fb4:	b	12ed0 <__assert_fail@plt+0x6a8>
   12fb8:	ldr	r1, [r8, #-4]
   12fbc:	movw	r0, #24372	; 0x5f34
   12fc0:	movt	r0, #2
   12fc4:	ldr	sl, [sp, #28]
   12fc8:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   12fcc:	b	12f0c <__assert_fail@plt+0x6e4>
   12fd0:	ldr	r1, [r5]
   12fd4:	movw	r0, #24340	; 0x5f14
   12fd8:	movt	r0, #2
   12fdc:	ldr	sl, [sp, #28]
   12fe0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   12fe4:	b	12f0c <__assert_fail@plt+0x6e4>
   12fe8:	mov	r0, #4
   12fec:	bl	1236c <p11_kit_modules_load_and_initialize@plt>
   12ff0:	cmp	r0, #0
   12ff4:	str	r0, [sp, #12]
   12ff8:	beq	13a1c <__assert_fail@plt+0x11f4>
   12ffc:	ldr	fp, [r7, #4]
   13000:	cmp	fp, #0
   13004:	beq	1315c <__assert_fail@plt+0x934>
   13008:	mov	fp, #0
   1300c:	movw	r8, #17132	; 0x42ec
   13010:	movt	r8, #4
   13014:	str	sl, [sp, #16]
   13018:	mov	r9, fp
   1301c:	mov	r3, fp
   13020:	mov	sl, r0
   13024:	ldr	r2, [r7]
   13028:	mov	r1, sl
   1302c:	ldr	r5, [r2, r3, lsl #2]
   13030:	mov	r0, r5
   13034:	bl	125d0 <p11_kit_iter_begin@plt>
   13038:	mov	r0, r5
   1303c:	bl	126b4 <p11_kit_iter_next@plt>
   13040:	subs	r3, r0, #0
   13044:	bne	1313c <__assert_fail@plt+0x914>
   13048:	mov	r0, r5
   1304c:	add	r1, sp, #252	; 0xfc
   13050:	mov	r2, #1
   13054:	str	r3, [sp, #252]	; 0xfc
   13058:	str	r3, [sp, #268]	; 0x10c
   1305c:	add	lr, sp, #72	; 0x48
   13060:	str	r3, [sp, #272]	; 0x110
   13064:	mov	ip, #4
   13068:	mvn	r3, #0
   1306c:	str	lr, [sp, #256]	; 0x100
   13070:	str	ip, [sp, #260]	; 0x104
   13074:	str	r3, [sp, #264]	; 0x108
   13078:	bl	123cc <p11_kit_iter_load_attributes@plt>
   1307c:	cmp	r0, #0
   13080:	movwne	r6, #24028	; 0x5ddc
   13084:	movtne	r6, #2
   13088:	bne	130a0 <__assert_fail@plt+0x878>
   1308c:	movw	r0, #12664	; 0x3178
   13090:	ldr	r1, [sp, #72]	; 0x48
   13094:	movt	r0, #4
   13098:	bl	22900 <secure_getenv@@Base+0x2ac>
   1309c:	mov	r6, r0
   130a0:	ldr	r3, [r8]
   130a4:	tst	r3, #64	; 0x40
   130a8:	bne	13114 <__assert_fail@plt+0x8ec>
   130ac:	mov	r0, r5
   130b0:	bl	12294 <p11_kit_iter_destroy_object@plt>
   130b4:	cmp	r0, #130	; 0x82
   130b8:	beq	13038 <__assert_fail@plt+0x810>
   130bc:	bhi	130f0 <__assert_fail@plt+0x8c8>
   130c0:	cmp	r0, #0
   130c4:	moveq	fp, #1
   130c8:	beq	13038 <__assert_fail@plt+0x810>
   130cc:	cmp	r0, #16
   130d0:	beq	13100 <__assert_fail@plt+0x8d8>
   130d4:	bl	12774 <p11_kit_strerror@plt>
   130d8:	mov	r1, r6
   130dc:	mov	r2, r0
   130e0:	movw	r0, #25056	; 0x61e0
   130e4:	movt	r0, #2
   130e8:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   130ec:	b	13038 <__assert_fail@plt+0x810>
   130f0:	cmp	r0, #181	; 0xb5
   130f4:	beq	13100 <__assert_fail@plt+0x8d8>
   130f8:	cmp	r0, #226	; 0xe2
   130fc:	bne	130d4 <__assert_fail@plt+0x8ac>
   13100:	mov	r1, r6
   13104:	movw	r0, #25024	; 0x61c0
   13108:	movt	r0, #2
   1310c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   13110:	b	13038 <__assert_fail@plt+0x810>
   13114:	mov	r0, r5
   13118:	bl	12534 <p11_kit_iter_get_object@plt>
   1311c:	movw	r1, #25000	; 0x61a8
   13120:	ldr	r2, [pc, #2488]	; 13ae0 <__assert_fail@plt+0x12b8>
   13124:	movt	r1, #2
   13128:	mov	r3, r6
   1312c:	str	r0, [sp]
   13130:	mov	r0, #64	; 0x40
   13134:	bl	22d4c <secure_getenv@@Base+0x6f8>
   13138:	b	130ac <__assert_fail@plt+0x884>
   1313c:	cmp	r3, #1
   13140:	add	r9, r9, #1
   13144:	bne	131b8 <__assert_fail@plt+0x990>
   13148:	ldr	r2, [r7, #4]
   1314c:	mov	r3, r9
   13150:	cmp	r9, r2
   13154:	bcc	13024 <__assert_fail@plt+0x7fc>
   13158:	ldr	sl, [sp, #16]
   1315c:	mov	r5, #0
   13160:	mov	r0, r7
   13164:	bl	21c6c <__assert_fail@plt+0xf444>
   13168:	ldr	r0, [sp, #12]
   1316c:	bl	127f8 <p11_kit_modules_finalize_and_release@plt>
   13170:	cmp	r5, #0
   13174:	bne	12d94 <__assert_fail@plt+0x56c>
   13178:	cmp	fp, #0
   1317c:	moveq	r0, fp
   13180:	beq	12c30 <__assert_fail@plt+0x408>
   13184:	ldr	ip, [sp, #24]
   13188:	add	r1, sp, #252	; 0xfc
   1318c:	mov	r0, #1
   13190:	str	r5, [sp, #256]	; 0x100
   13194:	ldr	r3, [sl, ip, lsl #2]
   13198:	str	r3, [sp, #252]	; 0xfc
   1319c:	bl	1a510 <__assert_fail@plt+0x7ce8>
   131a0:	b	12c30 <__assert_fail@plt+0x408>
   131a4:	movw	r0, #24216	; 0x5e98
   131a8:	movt	r0, #2
   131ac:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   131b0:	mov	r0, #2
   131b4:	b	12c30 <__assert_fail@plt+0x408>
   131b8:	ldr	sl, [sp, #16]
   131bc:	mov	r5, #1
   131c0:	b	13160 <__assert_fail@plt+0x938>
   131c4:	ldr	ip, [sp, #12]
   131c8:	ldr	lr, [sp, #16]
   131cc:	add	ip, ip, #1
   131d0:	str	ip, [sp, #12]
   131d4:	cmp	ip, lr
   131d8:	bne	12cec <__assert_fail@plt+0x4c4>
   131dc:	ldr	r0, [sp, #28]
   131e0:	ldr	sl, [sp, #32]
   131e4:	bl	14b88 <__assert_fail@plt+0x2360>
   131e8:	ldr	r3, [r9, #4]
   131ec:	cmp	r3, #0
   131f0:	bne	13274 <__assert_fail@plt+0xa4c>
   131f4:	movw	r0, #24440	; 0x5f78
   131f8:	movt	r0, #2
   131fc:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   13200:	mov	r0, r9
   13204:	bl	21c6c <__assert_fail@plt+0xf444>
   13208:	mov	r5, #2
   1320c:	b	12d94 <__assert_fail@plt+0x56c>
   13210:	movw	r1, #24320	; 0x5f00
   13214:	mov	r0, #64	; 0x40
   13218:	movt	r1, #2
   1321c:	ldr	r2, [pc, #2240]	; 13ae4 <__assert_fail@plt+0x12bc>
   13220:	ldr	r3, [r8, #-4]
   13224:	bl	22d4c <secure_getenv@@Base+0x6f8>
   13228:	b	12e4c <__assert_fail@plt+0x624>
   1322c:	movw	r0, #24372	; 0x5f34
   13230:	ldr	r1, [r8, #-4]
   13234:	movt	r0, #2
   13238:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1323c:	ldr	r0, [sp, #28]
   13240:	bl	14b88 <__assert_fail@plt+0x2360>
   13244:	mov	r0, r9
   13248:	bl	21c6c <__assert_fail@plt+0xf444>
   1324c:	b	12d90 <__assert_fail@plt+0x568>
   13250:	ldr	r1, [r6]
   13254:	movw	r0, #24340	; 0x5f14
   13258:	movt	r0, #2
   1325c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   13260:	b	1323c <__assert_fail@plt+0xa14>
   13264:	bl	129d0 <__assert_fail@plt+0x1a8>
   13268:	ldr	r6, [r8, #-4]
   1326c:	mov	r9, r0
   13270:	b	12e18 <__assert_fail@plt+0x5f0>
   13274:	mov	r0, #0
   13278:	mov	r1, #4
   1327c:	bl	1248c <p11_kit_modules_load@plt>
   13280:	cmp	r0, #0
   13284:	str	r0, [sp, #20]
   13288:	beq	133b4 <__assert_fail@plt+0xb8c>
   1328c:	ldr	r5, [r0]
   13290:	cmp	r5, #0
   13294:	beq	139ec <__assert_fail@plt+0x11c4>
   13298:	mov	r7, #0
   1329c:	movw	ip, #17132	; 0x42ec
   132a0:	add	r8, r0, #4
   132a4:	movt	ip, #4
   132a8:	mov	fp, r0
   132ac:	str	r4, [sp, #44]	; 0x2c
   132b0:	str	ip, [sp, #28]
   132b4:	mov	r0, r5
   132b8:	str	r7, [sp, #12]
   132bc:	mov	r4, r7
   132c0:	str	r9, [sp, #36]	; 0x24
   132c4:	str	sl, [sp, #40]	; 0x28
   132c8:	b	132ec <__assert_fail@plt+0xac4>
   132cc:	ldr	r0, [fp]
   132d0:	cmp	r0, #0
   132d4:	beq	132dc <__assert_fail@plt+0xab4>
   132d8:	bl	12408 <p11_kit_module_release@plt>
   132dc:	mov	fp, r8
   132e0:	ldr	r0, [r8], #4
   132e4:	cmp	r0, #0
   132e8:	beq	1337c <__assert_fail@plt+0xb54>
   132ec:	cmp	r4, #0
   132f0:	bne	132cc <__assert_fail@plt+0xaa4>
   132f4:	bl	12354 <p11_kit_module_get_name@plt>
   132f8:	ldr	r6, [fp]
   132fc:	str	r4, [sp, #56]	; 0x38
   13300:	mov	r9, r0
   13304:	mov	r0, r6
   13308:	bl	12594 <p11_kit_module_initialize@plt>
   1330c:	cmp	r0, #0
   13310:	bne	13360 <__assert_fail@plt+0xb38>
   13314:	ldr	r3, [r6, #20]
   13318:	mov	r0, #1
   1331c:	mov	r1, r4
   13320:	add	r2, sp, #72	; 0x48
   13324:	blx	r3
   13328:	cmp	r0, #0
   1332c:	strne	r4, [sp, #16]
   13330:	beq	13840 <__assert_fail@plt+0x1018>
   13334:	bl	12774 <p11_kit_strerror@plt>
   13338:	mov	r1, r9
   1333c:	mov	r2, r0
   13340:	movw	r0, #24524	; 0x5fcc
   13344:	movt	r0, #2
   13348:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1334c:	ldr	r0, [sp, #16]
   13350:	bl	122c4 <free@plt>
   13354:	mov	r0, r9
   13358:	bl	122c4 <free@plt>
   1335c:	b	132cc <__assert_fail@plt+0xaa4>
   13360:	bl	12648 <p11_kit_message@plt>
   13364:	mov	r1, r9
   13368:	mov	r2, r0
   1336c:	movw	r0, #24480	; 0x5fa0
   13370:	movt	r0, #2
   13374:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   13378:	b	13354 <__assert_fail@plt+0xb2c>
   1337c:	mov	r6, r4
   13380:	cmp	r6, #0
   13384:	ldr	r9, [sp, #36]	; 0x24
   13388:	mov	r5, r0
   1338c:	ldr	sl, [sp, #40]	; 0x28
   13390:	ldr	r4, [sp, #44]	; 0x2c
   13394:	bne	133e4 <__assert_fail@plt+0xbbc>
   13398:	cmp	r7, #0
   1339c:	beq	139ec <__assert_fail@plt+0x11c4>
   133a0:	movw	r0, #24660	; 0x6054
   133a4:	movt	r0, #2
   133a8:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   133ac:	ldr	r0, [sp, #20]
   133b0:	bl	122c4 <free@plt>
   133b4:	mov	r0, r9
   133b8:	mov	r5, #1
   133bc:	bl	21c6c <__assert_fail@plt+0xf444>
   133c0:	b	12d94 <__assert_fail@plt+0x56c>
   133c4:	movw	r1, #24320	; 0x5f00
   133c8:	mov	r0, #64	; 0x40
   133cc:	movt	r1, #2
   133d0:	ldr	r2, [pc, #1808]	; 13ae8 <__assert_fail@plt+0x12c0>
   133d4:	ldr	r3, [r8, #-4]
   133d8:	bl	22d4c <secure_getenv@@Base+0x6f8>
   133dc:	b	12d28 <__assert_fail@plt+0x500>
   133e0:	bl	12360 <__stack_chk_fail@plt>
   133e4:	ldr	r0, [sp, #20]
   133e8:	bl	122c4 <free@plt>
   133ec:	ldr	fp, [r9, #4]
   133f0:	cmp	fp, #0
   133f4:	beq	13ac8 <__assert_fail@plt+0x12a0>
   133f8:	movw	r8, #17132	; 0x42ec
   133fc:	movw	ip, #18376	; 0x47c8
   13400:	str	r4, [sp, #32]
   13404:	movt	ip, #55364	; 0xd844
   13408:	movt	r8, #4
   1340c:	str	ip, [sp, #36]	; 0x24
   13410:	mov	fp, r5
   13414:	add	ip, sp, #56	; 0x38
   13418:	mov	r7, r5
   1341c:	mov	r3, r5
   13420:	str	ip, [sp, #16]
   13424:	mov	r4, r6
   13428:	str	sl, [sp, #28]
   1342c:	b	13568 <__assert_fail@plt+0xd40>
   13430:	mov	r0, sl
   13434:	bl	12618 <p11_kit_iter_free@plt>
   13438:	ldr	r3, [r8]
   1343c:	tst	r3, #64	; 0x40
   13440:	bne	13768 <__assert_fail@plt+0xf40>
   13444:	mov	r3, #0
   13448:	add	r2, sp, #72	; 0x48
   1344c:	mov	r1, r3
   13450:	mov	r0, r5
   13454:	mov	ip, #1
   13458:	add	lr, sp, #55	; 0x37
   1345c:	str	r3, [sp, #280]	; 0x118
   13460:	str	r3, [sp, #284]	; 0x11c
   13464:	str	r3, [sp, #100]	; 0x64
   13468:	str	r3, [sp, #104]	; 0x68
   1346c:	str	r3, [sp, #64]	; 0x40
   13470:	str	r3, [sp, #68]	; 0x44
   13474:	mov	r3, #134	; 0x86
   13478:	str	lr, [sp, #256]	; 0x100
   1347c:	str	r3, [sp, #264]	; 0x108
   13480:	mvn	r3, #0
   13484:	str	lr, [sp, #268]	; 0x10c
   13488:	str	r3, [sp, #276]	; 0x114
   1348c:	str	r3, [sp, #96]	; 0x60
   13490:	str	r3, [sp, #60]	; 0x3c
   13494:	str	lr, [sp, #88]	; 0x58
   13498:	strb	ip, [sp, #55]	; 0x37
   1349c:	str	ip, [sp, #252]	; 0xfc
   134a0:	str	ip, [sp, #260]	; 0x104
   134a4:	str	ip, [sp, #272]	; 0x110
   134a8:	str	ip, [sp, #84]	; 0x54
   134ac:	str	ip, [sp, #92]	; 0x5c
   134b0:	bl	20c54 <__assert_fail@plt+0xe42c>
   134b4:	add	r3, sp, #60	; 0x3c
   134b8:	add	r2, sp, #252	; 0xfc
   134bc:	add	r1, sp, #84	; 0x54
   134c0:	cmp	r0, #0
   134c4:	moveq	r0, r3
   134c8:	beq	134ec <__assert_fail@plt+0xcc4>
   134cc:	ldr	r0, [sp, #72]	; 0x48
   134d0:	cmp	r0, #1
   134d4:	moveq	r0, r2
   134d8:	beq	134ec <__assert_fail@plt+0xcc4>
   134dc:	ldr	ip, [sp, #36]	; 0x24
   134e0:	cmp	r0, ip
   134e4:	moveq	r0, r1
   134e8:	movne	r0, r3
   134ec:	bl	20adc <__assert_fail@plt+0xe2b4>
   134f0:	mov	r2, #1
   134f4:	mov	r1, r0
   134f8:	mov	r0, r5
   134fc:	bl	20a38 <__assert_fail@plt+0xe210>
   13500:	mov	r1, #368	; 0x170
   13504:	mov	r5, r0
   13508:	bl	20de0 <__assert_fail@plt+0xe5b8>
   1350c:	ldr	r3, [r8]
   13510:	tst	r3, #64	; 0x40
   13514:	bne	13720 <__assert_fail@plt+0xef8>
   13518:	ldr	ip, [sp, #12]
   1351c:	mov	r0, r5
   13520:	ldr	r6, [ip, #84]	; 0x54
   13524:	bl	20624 <__assert_fail@plt+0xddfc>
   13528:	mov	r1, r5
   1352c:	ldr	r3, [sp, #16]
   13530:	mov	r2, r0
   13534:	mov	r0, r4
   13538:	blx	r6
   1353c:	mov	r6, r0
   13540:	mov	r0, r5
   13544:	bl	208a0 <__assert_fail@plt+0xe078>
   13548:	cmp	r6, #0
   1354c:	bne	136f8 <__assert_fail@plt+0xed0>
   13550:	ldr	r3, [r9, #4]
   13554:	add	r7, r7, #1
   13558:	cmp	r7, r3
   1355c:	mov	r3, r7
   13560:	bcs	139d8 <__assert_fail@plt+0x11b0>
   13564:	mov	fp, #1
   13568:	ldr	r2, [r9]
   1356c:	mov	r6, #0
   13570:	mov	r1, r6
   13574:	ldr	r5, [r2, r3, lsl #2]
   13578:	str	r6, [r2, r3, lsl #2]
   1357c:	mov	r0, r5
   13580:	bl	20d84 <__assert_fail@plt+0xe55c>
   13584:	cmp	r0, r6
   13588:	beq	137b0 <__assert_fail@plt+0xf88>
   1358c:	mov	r0, r6
   13590:	mov	r1, r6
   13594:	bl	1233c <p11_kit_iter_new@plt>
   13598:	subs	sl, r0, #0
   1359c:	beq	137cc <__assert_fail@plt+0xfa4>
   135a0:	mov	r1, r5
   135a4:	bl	12974 <__assert_fail@plt+0x14c>
   135a8:	cmp	r0, #0
   135ac:	beq	13430 <__assert_fail@plt+0xc08>
   135b0:	mov	r2, r6
   135b4:	mov	r0, sl
   135b8:	ldr	r1, [sp, #12]
   135bc:	mov	r3, r4
   135c0:	bl	126a8 <p11_kit_iter_begin_with@plt>
   135c4:	mov	r0, sl
   135c8:	bl	126b4 <p11_kit_iter_next@plt>
   135cc:	cmp	r0, #0
   135d0:	bne	13430 <__assert_fail@plt+0xc08>
   135d4:	mov	r0, sl
   135d8:	bl	12534 <p11_kit_iter_get_object@plt>
   135dc:	str	r0, [sp, #20]
   135e0:	mov	r0, sl
   135e4:	bl	12618 <p11_kit_iter_free@plt>
   135e8:	ldr	ip, [sp, #20]
   135ec:	cmp	ip, #0
   135f0:	beq	13438 <__assert_fail@plt+0xc10>
   135f4:	ldr	r3, [r8]
   135f8:	tst	r3, #64	; 0x40
   135fc:	bne	13750 <__assert_fail@plt+0xf28>
   13600:	mov	r1, #3
   13604:	mov	r0, r5
   13608:	mov	r3, #1
   1360c:	add	lr, sp, #55	; 0x37
   13610:	mov	r2, #134	; 0x86
   13614:	str	lr, [sp, #76]	; 0x4c
   13618:	strb	r3, [sp, #55]	; 0x37
   1361c:	str	r3, [sp, #80]	; 0x50
   13620:	str	r2, [sp, #72]	; 0x48
   13624:	bl	20d84 <__assert_fail@plt+0xe55c>
   13628:	mov	r1, #0
   1362c:	ldr	r2, [sp, #16]
   13630:	mov	r6, r0
   13634:	mov	r0, r5
   13638:	bl	20c54 <__assert_fail@plt+0xe42c>
   1363c:	cmp	r0, #0
   13640:	mov	r0, #0
   13644:	beq	13654 <__assert_fail@plt+0xe2c>
   13648:	ldr	r3, [sp, #56]	; 0x38
   1364c:	cmp	r3, #1
   13650:	beq	1380c <__assert_fail@plt+0xfe4>
   13654:	mov	r1, r6
   13658:	mov	r2, r0
   1365c:	bl	208dc <__assert_fail@plt+0xe0b4>
   13660:	mov	r6, r0
   13664:	cmp	r5, #0
   13668:	beq	137e8 <__assert_fail@plt+0xfc0>
   1366c:	mov	r0, r5
   13670:	bl	208a0 <__assert_fail@plt+0xe078>
   13674:	ldr	r3, [r8]
   13678:	tst	r3, #64	; 0x40
   1367c:	bne	13780 <__assert_fail@plt+0xf58>
   13680:	ldr	ip, [sp, #12]
   13684:	mov	r0, r6
   13688:	ldr	r5, [ip, #104]	; 0x68
   1368c:	bl	20624 <__assert_fail@plt+0xddfc>
   13690:	ldr	r1, [sp, #20]
   13694:	mov	r2, r6
   13698:	mov	r3, r0
   1369c:	mov	r0, r4
   136a0:	blx	r5
   136a4:	mov	r5, r0
   136a8:	mov	r0, r6
   136ac:	bl	208a0 <__assert_fail@plt+0xe078>
   136b0:	cmp	r5, #0
   136b4:	beq	13550 <__assert_fail@plt+0xd28>
   136b8:	mov	r0, r5
   136bc:	ldr	sl, [sp, #28]
   136c0:	ldr	r4, [sp, #32]
   136c4:	bl	12774 <p11_kit_strerror@plt>
   136c8:	mov	r1, r0
   136cc:	movw	r0, #24816	; 0x60f0
   136d0:	movt	r0, #2
   136d4:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   136d8:	mov	r5, #1
   136dc:	mov	r0, r9
   136e0:	bl	21c6c <__assert_fail@plt+0xf444>
   136e4:	ldr	r0, [sp, #12]
   136e8:	bl	12678 <p11_kit_module_finalize@plt>
   136ec:	ldr	r0, [sp, #12]
   136f0:	bl	12408 <p11_kit_module_release@plt>
   136f4:	b	13170 <__assert_fail@plt+0x948>
   136f8:	mov	r0, r6
   136fc:	ldr	sl, [sp, #28]
   13700:	ldr	r4, [sp, #32]
   13704:	bl	12774 <p11_kit_strerror@plt>
   13708:	mov	r5, #1
   1370c:	mov	r1, r0
   13710:	movw	r0, #24816	; 0x60f0
   13714:	movt	r0, #2
   13718:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1371c:	b	136dc <__assert_fail@plt+0xeb4>
   13720:	mov	r0, r5
   13724:	mvn	r1, #0
   13728:	bl	21974 <__assert_fail@plt+0xf14c>
   1372c:	movw	lr, #17132	; 0x42ec
   13730:	movt	lr, #4
   13734:	ldr	r3, [lr]
   13738:	tst	r3, #64	; 0x40
   1373c:	mov	r6, r0
   13740:	bne	13824 <__assert_fail@plt+0xffc>
   13744:	mov	r0, r6
   13748:	bl	122c4 <free@plt>
   1374c:	b	13518 <__assert_fail@plt+0xcf0>
   13750:	movw	r1, #24844	; 0x610c
   13754:	mov	r0, #64	; 0x40
   13758:	movt	r1, #2
   1375c:	ldr	r2, [pc, #904]	; 13aec <__assert_fail@plt+0x12c4>
   13760:	bl	22d4c <secure_getenv@@Base+0x6f8>
   13764:	b	13600 <__assert_fail@plt+0xdd8>
   13768:	movw	r1, #24768	; 0x60c0
   1376c:	mov	r0, #64	; 0x40
   13770:	movt	r1, #2
   13774:	ldr	r2, [pc, #880]	; 13aec <__assert_fail@plt+0x12c4>
   13778:	bl	22d4c <secure_getenv@@Base+0x6f8>
   1377c:	b	13444 <__assert_fail@plt+0xc1c>
   13780:	mov	r0, r6
   13784:	mvn	r1, #0
   13788:	bl	21974 <__assert_fail@plt+0xf14c>
   1378c:	movw	r2, #17132	; 0x42ec
   13790:	movt	r2, #4
   13794:	ldr	r3, [r2]
   13798:	tst	r3, #64	; 0x40
   1379c:	mov	r5, r0
   137a0:	bne	139bc <__assert_fail@plt+0x1194>
   137a4:	mov	r0, r5
   137a8:	bl	122c4 <free@plt>
   137ac:	b	13680 <__assert_fail@plt+0xe58>
   137b0:	movw	r0, #23980	; 0x5dac
   137b4:	movw	r1, #24752	; 0x60b0
   137b8:	movt	r0, #2
   137bc:	movt	r1, #2
   137c0:	ldr	r2, [pc, #808]	; 13af0 <__assert_fail@plt+0x12c8>
   137c4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   137c8:	b	13438 <__assert_fail@plt+0xc10>
   137cc:	movw	r0, #23980	; 0x5dac
   137d0:	movw	r1, #28588	; 0x6fac
   137d4:	movt	r0, #2
   137d8:	movt	r1, #2
   137dc:	ldr	r2, [pc, #780]	; 13af0 <__assert_fail@plt+0x12c8>
   137e0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   137e4:	b	13438 <__assert_fail@plt+0xc10>
   137e8:	movw	r0, #23980	; 0x5dac
   137ec:	movw	r1, #24876	; 0x612c
   137f0:	movt	r0, #2
   137f4:	movt	r1, #2
   137f8:	ldr	r2, [pc, #756]	; 13af4 <__assert_fail@plt+0x12cc>
   137fc:	ldr	sl, [sp, #28]
   13800:	ldr	r4, [sp, #32]
   13804:	bl	22e10 <secure_getenv@@Base+0x7bc>
   13808:	b	136d8 <__assert_fail@plt+0xeb0>
   1380c:	mov	r2, r6
   13810:	mov	r3, r0
   13814:	add	r1, sp, #72	; 0x48
   13818:	bl	208dc <__assert_fail@plt+0xe0b4>
   1381c:	mov	r6, r0
   13820:	b	13664 <__assert_fail@plt+0xe3c>
   13824:	movw	r1, #24800	; 0x60e0
   13828:	mov	r0, #64	; 0x40
   1382c:	movt	r1, #2
   13830:	ldr	r2, [pc, #704]	; 13af8 <__assert_fail@plt+0x12d0>
   13834:	mov	r3, r6
   13838:	bl	22d4c <secure_getenv@@Base+0x6f8>
   1383c:	b	13744 <__assert_fail@plt+0xf1c>
   13840:	ldr	r0, [sp, #72]	; 0x48
   13844:	mov	r1, #4
   13848:	bl	1221c <calloc@plt>
   1384c:	cmp	r0, #0
   13850:	str	r0, [sp, #16]
   13854:	beq	13aac <__assert_fail@plt+0x1284>
   13858:	add	r2, sp, #72	; 0x48
   1385c:	ldr	r3, [r6, #20]
   13860:	mov	r0, #1
   13864:	ldr	r1, [sp, #16]
   13868:	blx	r3
   1386c:	cmp	r0, #0
   13870:	bne	13334 <__assert_fail@plt+0xb0c>
   13874:	ldr	r3, [sp, #56]	; 0x38
   13878:	cmp	r3, #0
   1387c:	bne	139b0 <__assert_fail@plt+0x1188>
   13880:	ldr	r3, [sp, #72]	; 0x48
   13884:	cmp	r3, #0
   13888:	beq	1397c <__assert_fail@plt+0x1154>
   1388c:	str	r8, [sp, #32]
   13890:	add	sl, sp, #252	; 0xfc
   13894:	ldr	r5, [sp, #16]
   13898:	mov	r8, r7
   1389c:	b	138cc <__assert_fail@plt+0x10a4>
   138a0:	ldr	r7, [sp, #348]	; 0x15c
   138a4:	ands	r7, r7, #2
   138a8:	movne	r8, #1
   138ac:	beq	13900 <__assert_fail@plt+0x10d8>
   138b0:	ldr	r3, [sp, #56]	; 0x38
   138b4:	add	r4, r4, #1
   138b8:	cmp	r3, #0
   138bc:	bne	139a8 <__assert_fail@plt+0x1180>
   138c0:	ldr	r3, [sp, #72]	; 0x48
   138c4:	cmp	r4, r3
   138c8:	bcs	13974 <__assert_fail@plt+0x114c>
   138cc:	ldr	r3, [r6, #28]
   138d0:	mov	r1, sl
   138d4:	ldr	r0, [r5], #4
   138d8:	blx	r3
   138dc:	cmp	r0, #0
   138e0:	beq	138a0 <__assert_fail@plt+0x1078>
   138e4:	bl	12774 <p11_kit_strerror@plt>
   138e8:	mov	r1, r9
   138ec:	mov	r2, r0
   138f0:	movw	r0, #24560	; 0x5ff0
   138f4:	movt	r0, #2
   138f8:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   138fc:	b	138b0 <__assert_fail@plt+0x1088>
   13900:	ldr	r0, [r5, #-4]
   13904:	add	r3, sp, #56	; 0x38
   13908:	mov	r1, #6
   1390c:	str	r3, [sp]
   13910:	mov	r2, r7
   13914:	ldr	ip, [r6, #52]	; 0x34
   13918:	mov	r3, r7
   1391c:	blx	ip
   13920:	cmp	r0, #0
   13924:	bne	13954 <__assert_fail@plt+0x112c>
   13928:	ldr	ip, [sp, #28]
   1392c:	ldr	r3, [ip]
   13930:	tst	r3, #64	; 0x40
   13934:	beq	138b0 <__assert_fail@plt+0x1088>
   13938:	movw	r1, #24624	; 0x6030
   1393c:	mov	r0, #64	; 0x40
   13940:	movt	r1, #2
   13944:	ldr	r2, [pc, #432]	; 13afc <__assert_fail@plt+0x12d4>
   13948:	mov	r3, r9
   1394c:	bl	22d4c <secure_getenv@@Base+0x6f8>
   13950:	b	138b0 <__assert_fail@plt+0x1088>
   13954:	bl	12774 <p11_kit_strerror@plt>
   13958:	mov	r1, r9
   1395c:	mov	r2, r0
   13960:	movw	r0, #24592	; 0x6010
   13964:	movt	r0, #2
   13968:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1396c:	str	r7, [sp, #56]	; 0x38
   13970:	b	13928 <__assert_fail@plt+0x1100>
   13974:	mov	r7, r8
   13978:	ldr	r8, [sp, #32]
   1397c:	ldr	r0, [sp, #16]
   13980:	bl	122c4 <free@plt>
   13984:	mov	r0, r6
   13988:	bl	12678 <p11_kit_module_finalize@plt>
   1398c:	ldr	r4, [sp, #56]	; 0x38
   13990:	cmp	r4, #0
   13994:	ldrne	ip, [fp]
   13998:	movne	r3, #0
   1399c:	strne	r3, [fp]
   139a0:	strne	ip, [sp, #12]
   139a4:	b	13354 <__assert_fail@plt+0xb2c>
   139a8:	mov	r7, r8
   139ac:	ldr	r8, [sp, #32]
   139b0:	ldr	r0, [sp, #16]
   139b4:	bl	122c4 <free@plt>
   139b8:	b	1398c <__assert_fail@plt+0x1164>
   139bc:	movw	r1, #24892	; 0x613c
   139c0:	mov	r0, #64	; 0x40
   139c4:	movt	r1, #2
   139c8:	ldr	r2, [pc, #304]	; 13b00 <__assert_fail@plt+0x12d8>
   139cc:	mov	r3, r5
   139d0:	bl	22d4c <secure_getenv@@Base+0x6f8>
   139d4:	b	137a4 <__assert_fail@plt+0xf7c>
   139d8:	ldr	sl, [sp, #28]
   139dc:	mov	fp, #1
   139e0:	ldr	r4, [sp, #32]
   139e4:	mov	r5, #0
   139e8:	b	136dc <__assert_fail@plt+0xeb4>
   139ec:	movw	r0, #24712	; 0x6088
   139f0:	movt	r0, #2
   139f4:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   139f8:	b	133ac <__assert_fail@plt+0xb84>
   139fc:	ldr	r1, [r5]
   13a00:	movw	r0, #24932	; 0x6164
   13a04:	movt	r0, #2
   13a08:	ldr	sl, [sp, #28]
   13a0c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   13a10:	mov	r0, r6
   13a14:	bl	12474 <p11_kit_uri_free@plt>
   13a18:	b	12f0c <__assert_fail@plt+0x6e4>
   13a1c:	ldr	fp, [sp, #12]
   13a20:	mov	r5, #1
   13a24:	b	13160 <__assert_fail@plt+0x938>
   13a28:	movw	r0, #23980	; 0x5dac
   13a2c:	movw	r1, #24304	; 0x5ef0
   13a30:	movt	r0, #2
   13a34:	movt	r1, #2
   13a38:	ldr	r2, [pc, #148]	; 13ad4 <__assert_fail@plt+0x12ac>
   13a3c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   13a40:	b	12d90 <__assert_fail@plt+0x568>
   13a44:	mov	r0, r7
   13a48:	bl	21c6c <__assert_fail@plt+0xf444>
   13a4c:	b	12ed0 <__assert_fail@plt+0x6a8>
   13a50:	bl	14b88 <__assert_fail@plt+0x2360>
   13a54:	b	131e8 <__assert_fail@plt+0x9c0>
   13a58:	movw	r0, #23980	; 0x5dac
   13a5c:	movw	r1, #24908	; 0x614c
   13a60:	movt	r0, #2
   13a64:	movt	r1, #2
   13a68:	ldr	r2, [pc, #104]	; 13ad8 <__assert_fail@plt+0x12b0>
   13a6c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   13a70:	b	12ed0 <__assert_fail@plt+0x6a8>
   13a74:	movw	r0, #23980	; 0x5dac
   13a78:	movw	r1, #24012	; 0x5dcc
   13a7c:	movt	r0, #2
   13a80:	movt	r1, #2
   13a84:	ldr	r2, [pc, #72]	; 13ad4 <__assert_fail@plt+0x12ac>
   13a88:	bl	22e10 <secure_getenv@@Base+0x7bc>
   13a8c:	b	12d90 <__assert_fail@plt+0x568>
   13a90:	movw	r0, #24248	; 0x5eb8
   13a94:	movw	r1, #24288	; 0x5ee0
   13a98:	movt	r0, #2
   13a9c:	movt	r1, #2
   13aa0:	movw	r2, #683	; 0x2ab
   13aa4:	ldr	r3, [pc, #36]	; 13ad0 <__assert_fail@plt+0x12a8>
   13aa8:	bl	12828 <__assert_fail@plt>
   13aac:	movw	r0, #23980	; 0x5dac
   13ab0:	movw	r1, #24508	; 0x5fbc
   13ab4:	movt	r0, #2
   13ab8:	movt	r1, #2
   13abc:	ldr	r2, [pc, #64]	; 13b04 <__assert_fail@plt+0x12dc>
   13ac0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   13ac4:	b	13354 <__assert_fail@plt+0xb2c>
   13ac8:	mov	r5, fp
   13acc:	b	136dc <__assert_fail@plt+0xeb4>
   13ad0:	andeq	r5, r2, r8, lsr #25
   13ad4:			; <UNDEFINED> instruction: 0x00025cbc
   13ad8:	andeq	r5, r2, r0, ror #26
   13adc:	muleq	r2, ip, sp
   13ae0:	muleq	r2, r0, sp
   13ae4:	andeq	r5, r2, r8, ror sp
   13ae8:	andeq	r5, r2, ip, asr #25
   13aec:	andeq	r5, r2, r0, lsr #26
   13af0:	andeq	r5, r2, r4, lsl sp
   13af4:	andeq	r5, r2, r0, asr #26
   13af8:	andeq	r5, r2, r0, lsr sp
   13afc:	strdeq	r5, [r2], -r8
   13b00:	andeq	r5, r2, r0, asr sp
   13b04:	ldrdeq	r5, [r2], -ip
   13b08:	push	{r4, r5, r6, r7, lr}
   13b0c:	movw	r4, #17144	; 0x42f8
   13b10:	movt	r4, #4
   13b14:	sub	sp, sp, #76	; 0x4c
   13b18:	mov	ip, #0
   13b1c:	add	r3, sp, #56	; 0x38
   13b20:	ldr	lr, [r4]
   13b24:	add	r2, sp, #20
   13b28:	str	r0, [sp, #60]	; 0x3c
   13b2c:	mov	r0, ip
   13b30:	str	r1, [sp, #64]	; 0x40
   13b34:	add	r1, sp, #32
   13b38:	str	ip, [sp, #4]
   13b3c:	mov	r6, #368	; 0x170
   13b40:	str	r3, [sp]
   13b44:	add	r3, sp, #44	; 0x2c
   13b48:	str	lr, [sp, #68]	; 0x44
   13b4c:	add	r5, sp, #11
   13b50:	mov	lr, #1
   13b54:	str	ip, [sp, #16]
   13b58:	strb	ip, [sp, #11]
   13b5c:	add	r7, sp, #12
   13b60:	str	ip, [sp, #32]
   13b64:	mov	ip, #4
   13b68:	str	lr, [sp, #12]
   13b6c:	str	lr, [sp, #28]
   13b70:	mov	lr, #17
   13b74:	str	r6, [sp, #20]
   13b78:	mov	r6, #128	; 0x80
   13b7c:	str	r5, [sp, #24]
   13b80:	add	r5, sp, #16
   13b84:	str	r7, [sp, #36]	; 0x24
   13b88:	str	ip, [sp, #40]	; 0x28
   13b8c:	str	ip, [sp, #52]	; 0x34
   13b90:	str	r6, [sp, #44]	; 0x2c
   13b94:	str	r5, [sp, #48]	; 0x30
   13b98:	str	lr, [sp, #56]	; 0x38
   13b9c:	bl	208dc <__assert_fail@plt+0xe0b4>
   13ba0:	ldr	r2, [sp, #68]	; 0x44
   13ba4:	ldr	r3, [r4]
   13ba8:	cmp	r2, r3
   13bac:	bne	13bb8 <__assert_fail@plt+0x1390>
   13bb0:	add	sp, sp, #76	; 0x4c
   13bb4:	pop	{r4, r5, r6, r7, pc}
   13bb8:	bl	12360 <__stack_chk_fail@plt>
   13bbc:	push	{r4, r5, r6, lr}
   13bc0:	movw	r4, #17144	; 0x42f8
   13bc4:	movt	r4, #4
   13bc8:	sub	sp, sp, #40	; 0x28
   13bcc:	mov	r5, r1
   13bd0:	mov	r6, r0
   13bd4:	ldr	r3, [r4]
   13bd8:	mov	r0, r1
   13bdc:	add	r2, sp, #8
   13be0:	mov	r1, #0
   13be4:	str	r3, [sp, #36]	; 0x24
   13be8:	bl	20c54 <__assert_fail@plt+0xe42c>
   13bec:	cmp	r0, #0
   13bf0:	beq	13c00 <__assert_fail@plt+0x13d8>
   13bf4:	ldr	r3, [sp, #8]
   13bf8:	cmp	r3, #1
   13bfc:	beq	13c40 <__assert_fail@plt+0x1418>
   13c00:	ldr	r0, [r6, #20]
   13c04:	mov	r1, r5
   13c08:	bl	21b4c <__assert_fail@plt+0xf324>
   13c0c:	cmp	r0, #0
   13c10:	bne	13c28 <__assert_fail@plt+0x1400>
   13c14:	movw	r0, #24400	; 0x5f50
   13c18:	movw	r1, #25080	; 0x61f8
   13c1c:	movt	r0, #2
   13c20:	movt	r1, #2
   13c24:	bl	22e10 <secure_getenv@@Base+0x7bc>
   13c28:	ldr	r2, [sp, #36]	; 0x24
   13c2c:	ldr	r3, [r4]
   13c30:	cmp	r2, r3
   13c34:	bne	13d84 <__assert_fail@plt+0x155c>
   13c38:	add	sp, sp, #40	; 0x28
   13c3c:	pop	{r4, r5, r6, pc}
   13c40:	ldr	r0, [r6, #28]
   13c44:	movw	ip, #18276	; 0x4764
   13c48:	str	r3, [sp, #20]
   13c4c:	movt	ip, #55364	; 0xd844
   13c50:	tst	r0, #1
   13c54:	str	r3, [sp, #32]
   13c58:	mov	r1, #134	; 0x86
   13c5c:	add	r2, sp, #6
   13c60:	add	r3, sp, #7
   13c64:	str	ip, [sp, #24]
   13c68:	str	r1, [sp, #12]
   13c6c:	str	r2, [sp, #16]
   13c70:	str	r3, [sp, #28]
   13c74:	bne	13d24 <__assert_fail@plt+0x14fc>
   13c78:	ands	r3, r0, #2
   13c7c:	mov	r0, r5
   13c80:	bne	13cf8 <__assert_fail@plt+0x14d0>
   13c84:	strb	r3, [sp, #6]
   13c88:	strb	r3, [sp, #7]
   13c8c:	bl	20d84 <__assert_fail@plt+0xe55c>
   13c90:	movw	r1, #18276	; 0x4764
   13c94:	movt	r1, #55364	; 0xd844
   13c98:	cmp	r0, #0
   13c9c:	mov	r0, r5
   13ca0:	mvnne	r3, #0
   13ca4:	strne	r3, [sp, #12]
   13ca8:	bl	20d84 <__assert_fail@plt+0xe55c>
   13cac:	cmp	r0, #0
   13cb0:	mvnne	r3, #0
   13cb4:	strne	r3, [sp, #24]
   13cb8:	mov	r0, r5
   13cbc:	add	r1, sp, #12
   13cc0:	add	r2, sp, #24
   13cc4:	mov	r3, #0
   13cc8:	bl	208dc <__assert_fail@plt+0xe0b4>
   13ccc:	mov	r5, r0
   13cd0:	cmp	r5, #0
   13cd4:	bne	13c00 <__assert_fail@plt+0x13d8>
   13cd8:	movw	r0, #23980	; 0x5dac
   13cdc:	movw	r1, #24876	; 0x612c
   13ce0:	movt	r0, #2
   13ce4:	movt	r1, #2
   13ce8:	movw	r2, #25080	; 0x61f8
   13cec:	movt	r2, #2
   13cf0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   13cf4:	b	13c28 <__assert_fail@plt+0x1400>
   13cf8:	bl	20b90 <__assert_fail@plt+0xe368>
   13cfc:	cmp	r0, #0
   13d00:	beq	13d10 <__assert_fail@plt+0x14e8>
   13d04:	ldrb	r3, [sp, #6]
   13d08:	cmp	r3, #0
   13d0c:	bne	13d5c <__assert_fail@plt+0x1534>
   13d10:	mov	r2, #0
   13d14:	mov	r3, #1
   13d18:	strb	r2, [sp, #6]
   13d1c:	strb	r3, [sp, #7]
   13d20:	b	13cb8 <__assert_fail@plt+0x1490>
   13d24:	mov	r1, ip
   13d28:	mov	r2, r3
   13d2c:	mov	r0, r5
   13d30:	bl	20b90 <__assert_fail@plt+0xe368>
   13d34:	cmp	r0, #0
   13d38:	beq	13d48 <__assert_fail@plt+0x1520>
   13d3c:	ldrb	r3, [sp, #7]
   13d40:	cmp	r3, #0
   13d44:	bne	13d70 <__assert_fail@plt+0x1548>
   13d48:	mov	r2, #1
   13d4c:	mov	r3, #0
   13d50:	strb	r2, [sp, #6]
   13d54:	strb	r3, [sp, #7]
   13d58:	b	13cb8 <__assert_fail@plt+0x1490>
   13d5c:	movw	r0, #25564	; 0x63dc
   13d60:	ldr	r1, [r6, #16]
   13d64:	movt	r0, #2
   13d68:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   13d6c:	b	13d10 <__assert_fail@plt+0x14e8>
   13d70:	movw	r0, #25508	; 0x63a4
   13d74:	ldr	r1, [r6, #16]
   13d78:	movt	r0, #2
   13d7c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   13d80:	b	13cd0 <__assert_fail@plt+0x14a8>
   13d84:	bl	12360 <__stack_chk_fail@plt>
   13d88:	push	{r4, r5, r6, r7, r8, r9, lr}
   13d8c:	movw	r9, #17144	; 0x42f8
   13d90:	movt	r9, #4
   13d94:	sub	sp, sp, #156	; 0x9c
   13d98:	mov	r7, r0
   13d9c:	mov	r6, r1
   13da0:	ldr	ip, [r9]
   13da4:	movw	r0, #13676	; 0x356c
   13da8:	movw	r1, #13776	; 0x35d0
   13dac:	movt	r0, #2
   13db0:	movt	r1, #2
   13db4:	movw	r2, #8900	; 0x22c4
   13db8:	mov	r3, #0
   13dbc:	movt	r2, #1
   13dc0:	str	ip, [sp, #148]	; 0x94
   13dc4:	bl	2336c <secure_getenv@@Base+0xd18>
   13dc8:	movw	r5, #25612	; 0x640c
   13dcc:	mov	r4, #1
   13dd0:	movt	r5, #2
   13dd4:	mov	r8, r0
   13dd8:	b	13e0c <__assert_fail@plt+0x15e4>
   13ddc:	add	r1, sp, #20
   13de0:	mov	r0, r7
   13de4:	add	r2, sp, #16
   13de8:	bl	1dc60 <__assert_fail@plt+0xb438>
   13dec:	subs	r1, r0, #0
   13df0:	mov	r0, r8
   13df4:	beq	13e44 <__assert_fail@plt+0x161c>
   13df8:	mov	r2, r1
   13dfc:	bl	23034 <secure_getenv@@Base+0x9e0>
   13e00:	cmp	r0, #0
   13e04:	beq	13e30 <__assert_fail@plt+0x1608>
   13e08:	add	r4, r4, #1
   13e0c:	mov	r1, #128	; 0x80
   13e10:	stm	sp, {r5, r6}
   13e14:	mov	r3, r1
   13e18:	str	r4, [sp, #8]
   13e1c:	add	r0, sp, #20
   13e20:	mov	r2, #1
   13e24:	bl	12804 <__snprintf_chk@plt>
   13e28:	cmp	r0, #0
   13e2c:	bge	13ddc <__assert_fail@plt+0x15b4>
   13e30:	movw	r0, #24400	; 0x5f50
   13e34:	ldr	r1, [pc, #36]	; 13e60 <__assert_fail@plt+0x1638>
   13e38:	movt	r0, #2
   13e3c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   13e40:	mov	r0, #0
   13e44:	ldr	r2, [sp, #148]	; 0x94
   13e48:	ldr	r3, [r9]
   13e4c:	cmp	r2, r3
   13e50:	bne	13e5c <__assert_fail@plt+0x1634>
   13e54:	add	sp, sp, #156	; 0x9c
   13e58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13e5c:	bl	12360 <__stack_chk_fail@plt>
   13e60:	andeq	r6, r2, r4, lsl #4
   13e64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e68:	sub	sp, sp, #76	; 0x4c
   13e6c:	movw	r4, #17144	; 0x42f8
   13e70:	movt	r4, #4
   13e74:	ldr	ip, [sp, #112]	; 0x70
   13e78:	mov	fp, r0
   13e7c:	ldr	lr, [r4]
   13e80:	mov	r5, #0
   13e84:	str	r2, [sp, #12]
   13e88:	mov	r7, r1
   13e8c:	mov	r0, ip
   13e90:	str	ip, [sp, #60]	; 0x3c
   13e94:	str	lr, [sp, #68]	; 0x44
   13e98:	add	r1, sp, #24
   13e9c:	strb	r5, [sp, #23]
   13ea0:	mov	r8, r3
   13ea4:	str	r5, [sp, #32]
   13ea8:	movw	r3, #18376	; 0x47c8
   13eac:	str	r1, [sp, #36]	; 0x24
   13eb0:	movt	r3, #55364	; 0xd844
   13eb4:	mov	r1, #368	; 0x170
   13eb8:	str	r3, [sp, #24]
   13ebc:	str	r1, [sp, #44]	; 0x2c
   13ec0:	mov	r3, #4
   13ec4:	mov	r6, #1
   13ec8:	str	r3, [sp, #40]	; 0x28
   13ecc:	str	r6, [sp, #52]	; 0x34
   13ed0:	add	r3, sp, #23
   13ed4:	ldrb	r9, [sp, #116]	; 0x74
   13ed8:	str	r3, [sp, #48]	; 0x30
   13edc:	mov	r3, #18
   13ee0:	ldr	sl, [sp, #120]	; 0x78
   13ee4:	str	r3, [sp, #56]	; 0x38
   13ee8:	bl	1ea34 <__assert_fail@plt+0xc20c>
   13eec:	ldr	r2, [sp, #12]
   13ef0:	add	r3, sp, #56	; 0x38
   13ef4:	str	r5, [sp, #4]
   13ef8:	str	r3, [sp]
   13efc:	add	r3, sp, #44	; 0x2c
   13f00:	mov	r1, r2
   13f04:	add	r2, sp, #32
   13f08:	str	r0, [sp, #64]	; 0x40
   13f0c:	mov	r0, r5
   13f10:	bl	208dc <__assert_fail@plt+0xe0b4>
   13f14:	subs	r5, r0, #0
   13f18:	beq	14028 <__assert_fail@plt+0x1800>
   13f1c:	ldr	r0, [r7]
   13f20:	movw	r1, #25620	; 0x6414
   13f24:	movt	r1, #2
   13f28:	bl	1d7f4 <__assert_fail@plt+0xafcc>
   13f2c:	subs	r7, r0, #0
   13f30:	beq	14048 <__assert_fail@plt+0x1820>
   13f34:	mov	r2, r8
   13f38:	movw	r1, #25652	; 0x6434
   13f3c:	mov	r3, r6
   13f40:	movt	r1, #2
   13f44:	bl	1242c <asn1_write_value@plt>
   13f48:	cmp	r0, #0
   13f4c:	bne	14008 <__assert_fail@plt+0x17e0>
   13f50:	cmp	r9, #0
   13f54:	bne	13fe4 <__assert_fail@plt+0x17bc>
   13f58:	mov	r2, sl
   13f5c:	movw	r1, #25700	; 0x6464
   13f60:	mov	r0, r7
   13f64:	movt	r1, #2
   13f68:	ldr	r3, [sp, #124]	; 0x7c
   13f6c:	bl	1242c <asn1_write_value@plt>
   13f70:	cmp	r0, #0
   13f74:	bne	14008 <__assert_fail@plt+0x17e0>
   13f78:	mov	r0, r7
   13f7c:	add	r1, sp, #28
   13f80:	bl	1dadc <__assert_fail@plt+0xb2b4>
   13f84:	subs	r6, r0, #0
   13f88:	beq	14068 <__assert_fail@plt+0x1840>
   13f8c:	mov	r0, r5
   13f90:	mov	r1, #17
   13f94:	mov	r2, r6
   13f98:	ldr	r3, [sp, #28]
   13f9c:	bl	209bc <__assert_fail@plt+0xe194>
   13fa0:	subs	r5, r0, #0
   13fa4:	beq	14028 <__assert_fail@plt+0x1800>
   13fa8:	ldr	ip, [sp, #28]
   13fac:	mov	r1, r7
   13fb0:	ldr	r0, [fp]
   13fb4:	mov	r3, r6
   13fb8:	movw	r2, #25620	; 0x6414
   13fbc:	movt	r2, #2
   13fc0:	str	ip, [sp]
   13fc4:	bl	1e1b4 <__assert_fail@plt+0xb98c>
   13fc8:	mov	r0, r5
   13fcc:	ldr	r2, [sp, #68]	; 0x44
   13fd0:	ldr	r3, [r4]
   13fd4:	cmp	r2, r3
   13fd8:	bne	14088 <__assert_fail@plt+0x1860>
   13fdc:	add	sp, sp, #76	; 0x4c
   13fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe4:	mov	r3, r6
   13fe8:	movw	r1, #25680	; 0x6450
   13fec:	movw	r2, #25692	; 0x645c
   13ff0:	movt	r1, #2
   13ff4:	movt	r2, #2
   13ff8:	mov	r0, r7
   13ffc:	bl	1242c <asn1_write_value@plt>
   14000:	cmp	r0, #0
   14004:	beq	13f58 <__assert_fail@plt+0x1730>
   14008:	movw	r0, #23980	; 0x5dac
   1400c:	movw	r1, #25660	; 0x643c
   14010:	movt	r0, #2
   14014:	movt	r1, #2
   14018:	ldr	r2, [pc, #108]	; 1408c <__assert_fail@plt+0x1864>
   1401c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14020:	mov	r0, #0
   14024:	b	13fcc <__assert_fail@plt+0x17a4>
   14028:	movw	r0, #23980	; 0x5dac
   1402c:	movw	r1, #24876	; 0x612c
   14030:	movt	r0, #2
   14034:	movt	r1, #2
   14038:	ldr	r2, [pc, #76]	; 1408c <__assert_fail@plt+0x1864>
   1403c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14040:	mov	r0, #0
   14044:	b	13fcc <__assert_fail@plt+0x17a4>
   14048:	movw	r0, #23980	; 0x5dac
   1404c:	movw	r1, #25636	; 0x6424
   14050:	movt	r0, #2
   14054:	movt	r1, #2
   14058:	ldr	r2, [pc, #44]	; 1408c <__assert_fail@plt+0x1864>
   1405c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14060:	mov	r0, r7
   14064:	b	13fcc <__assert_fail@plt+0x17a4>
   14068:	movw	r0, #23980	; 0x5dac
   1406c:	movw	r1, #25712	; 0x6470
   14070:	movt	r0, #2
   14074:	movt	r1, #2
   14078:	ldr	r2, [pc, #12]	; 1408c <__assert_fail@plt+0x1864>
   1407c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14080:	mov	r0, r6
   14084:	b	13fcc <__assert_fail@plt+0x17a4>
   14088:	bl	12360 <__stack_chk_fail@plt>
   1408c:	andeq	r6, r2, r8, lsl r2
   14090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14094:	movw	r5, #17144	; 0x42f8
   14098:	movt	r5, #4
   1409c:	sub	sp, sp, #52	; 0x34
   140a0:	mov	r6, r0
   140a4:	mov	r8, r1
   140a8:	ldr	ip, [r5]
   140ac:	movw	r1, #25724	; 0x647c
   140b0:	ldr	r0, [r0, #4]
   140b4:	movt	r1, #2
   140b8:	mov	r7, r2
   140bc:	mov	r9, r3
   140c0:	str	ip, [sp, #44]	; 0x2c
   140c4:	ldrb	sl, [sp, #88]	; 0x58
   140c8:	ldr	r4, [sp, #92]	; 0x5c
   140cc:	bl	1d7f4 <__assert_fail@plt+0xafcc>
   140d0:	cmp	r0, #0
   140d4:	mov	ip, r0
   140d8:	str	r0, [sp, #20]
   140dc:	beq	14230 <__assert_fail@plt+0x1a08>
   140e0:	mov	r0, r4
   140e4:	add	r1, sp, #32
   140e8:	mov	r4, #0
   140ec:	bl	22ffc <secure_getenv@@Base+0x9a8>
   140f0:	b	1413c <__assert_fail@plt+0x1914>
   140f4:	movw	r1, #58476	; 0xe46c
   140f8:	movw	r2, #25748	; 0x6494
   140fc:	movt	r1, #2
   14100:	movt	r2, #2
   14104:	ldr	r0, [sp, #20]
   14108:	mov	r3, #1
   1410c:	bl	1242c <asn1_write_value@plt>
   14110:	cmp	r0, #0
   14114:	bne	141f8 <__assert_fail@plt+0x19d0>
   14118:	movw	r1, #25752	; 0x6498
   1411c:	ldr	r0, [sp, #20]
   14120:	movt	r1, #2
   14124:	ldr	r2, [sp, #24]
   14128:	mvn	r3, #0
   1412c:	bl	1242c <asn1_write_value@plt>
   14130:	cmp	r0, #0
   14134:	bne	141f8 <__assert_fail@plt+0x19d0>
   14138:	add	r4, r4, #1
   1413c:	add	r0, sp, #32
   14140:	mov	r1, #0
   14144:	add	r2, sp, #24
   14148:	bl	22f6c <secure_getenv@@Base+0x918>
   1414c:	cmp	r0, #0
   14150:	bne	140f4 <__assert_fail@plt+0x18cc>
   14154:	cmp	r4, #0
   14158:	beq	141b4 <__assert_fail@plt+0x198c>
   1415c:	ldr	r0, [sp, #20]
   14160:	add	r1, sp, #28
   14164:	bl	1dadc <__assert_fail@plt+0xb2b4>
   14168:	subs	fp, r0, #0
   1416c:	beq	14250 <__assert_fail@plt+0x1a28>
   14170:	ldr	ip, [sp, #28]
   14174:	mov	r0, r6
   14178:	str	r9, [sp]
   1417c:	mov	r2, r8
   14180:	str	sl, [sp, #4]
   14184:	mov	r3, r7
   14188:	str	fp, [sp, #8]
   1418c:	add	r1, r6, #4
   14190:	str	ip, [sp, #12]
   14194:	bl	13e64 <__assert_fail@plt+0x163c>
   14198:	subs	r4, r0, #0
   1419c:	beq	14270 <__assert_fail@plt+0x1a48>
   141a0:	mov	r0, fp
   141a4:	bl	122c4 <free@plt>
   141a8:	add	r0, sp, #20
   141ac:	bl	1278c <asn1_delete_structure@plt>
   141b0:	b	14214 <__assert_fail@plt+0x19ec>
   141b4:	movw	r1, #58476	; 0xe46c
   141b8:	movw	r2, #25748	; 0x6494
   141bc:	movt	r1, #2
   141c0:	movt	r2, #2
   141c4:	ldr	r0, [sp, #20]
   141c8:	mov	r3, #1
   141cc:	bl	1242c <asn1_write_value@plt>
   141d0:	cmp	r0, #0
   141d4:	bne	141f8 <__assert_fail@plt+0x19d0>
   141d8:	movw	r1, #25752	; 0x6498
   141dc:	ldr	r0, [sp, #20]
   141e0:	movt	r1, #2
   141e4:	ldr	r2, [pc, #164]	; 14290 <__assert_fail@plt+0x1a68>
   141e8:	mvn	r3, #0
   141ec:	bl	1242c <asn1_write_value@plt>
   141f0:	cmp	r0, #0
   141f4:	beq	1415c <__assert_fail@plt+0x1934>
   141f8:	movw	r0, #23980	; 0x5dac
   141fc:	movw	r1, #25660	; 0x643c
   14200:	movt	r0, #2
   14204:	movt	r1, #2
   14208:	ldr	r2, [pc, #132]	; 14294 <__assert_fail@plt+0x1a6c>
   1420c:	mov	r4, #0
   14210:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14214:	ldr	r2, [sp, #44]	; 0x2c
   14218:	mov	r0, r4
   1421c:	ldr	r3, [r5]
   14220:	cmp	r2, r3
   14224:	bne	1428c <__assert_fail@plt+0x1a64>
   14228:	add	sp, sp, #52	; 0x34
   1422c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14230:	movw	r0, #23980	; 0x5dac
   14234:	movw	r1, #25636	; 0x6424
   14238:	movt	r0, #2
   1423c:	movt	r1, #2
   14240:	ldr	r2, [pc, #76]	; 14294 <__assert_fail@plt+0x1a6c>
   14244:	mov	r4, ip
   14248:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1424c:	b	14214 <__assert_fail@plt+0x19ec>
   14250:	movw	r0, #23980	; 0x5dac
   14254:	movw	r1, #25712	; 0x6470
   14258:	movt	r0, #2
   1425c:	movt	r1, #2
   14260:	ldr	r2, [pc, #48]	; 14298 <__assert_fail@plt+0x1a70>
   14264:	mov	r4, fp
   14268:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1426c:	b	141a8 <__assert_fail@plt+0x1980>
   14270:	movw	r0, #23980	; 0x5dac
   14274:	movw	r1, #24876	; 0x612c
   14278:	movt	r0, #2
   1427c:	movt	r1, #2
   14280:	ldr	r2, [pc, #16]	; 14298 <__assert_fail@plt+0x1a70>
   14284:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14288:	b	141a8 <__assert_fail@plt+0x1980>
   1428c:	bl	12360 <__stack_chk_fail@plt>
   14290:	andeq	r6, r2, ip, lsr r2
   14294:	andeq	r6, r2, r8, lsr #4
   14298:	andeq	r6, r2, r8, asr r2
   1429c:	push	{r4, r5, r6, r7, r8, lr}
   142a0:	movw	r4, #17144	; 0x42f8
   142a4:	movt	r4, #4
   142a8:	sub	sp, sp, #144	; 0x90
   142ac:	mov	r6, r2
   142b0:	add	lr, sp, #12
   142b4:	ldr	ip, [r4]
   142b8:	mov	r2, r1
   142bc:	mov	r5, r0
   142c0:	mov	r7, r1
   142c4:	ldr	r0, [r0, #4]
   142c8:	mov	r3, r6
   142cc:	movw	r1, #25760	; 0x64a0
   142d0:	str	lr, [sp]
   142d4:	movt	r1, #2
   142d8:	str	ip, [sp, #140]	; 0x8c
   142dc:	bl	1d95c <__assert_fail@plt+0xb134>
   142e0:	subs	r8, r0, #0
   142e4:	moveq	r0, r8
   142e8:	beq	14340 <__assert_fail@plt+0x1b18>
   142ec:	mov	r1, r6
   142f0:	mov	r0, r7
   142f4:	bl	13b08 <__assert_fail@plt+0x12e0>
   142f8:	subs	r6, r0, #0
   142fc:	beq	14358 <__assert_fail@plt+0x1b30>
   14300:	mov	r1, #17
   14304:	bl	20d84 <__assert_fail@plt+0xe55c>
   14308:	subs	ip, r0, #0
   1430c:	beq	14378 <__assert_fail@plt+0x1b50>
   14310:	ldr	r3, [ip, #4]
   14314:	mov	r1, r8
   14318:	ldr	ip, [ip, #8]
   1431c:	movw	r2, #25760	; 0x64a0
   14320:	ldr	r0, [r5]
   14324:	movt	r2, #2
   14328:	str	ip, [sp]
   1432c:	bl	1e1b4 <__assert_fail@plt+0xb98c>
   14330:	mov	r0, r5
   14334:	mov	r1, r6
   14338:	bl	13bbc <__assert_fail@plt+0x1394>
   1433c:	mov	r0, #1
   14340:	ldr	r2, [sp, #140]	; 0x8c
   14344:	ldr	r3, [r4]
   14348:	cmp	r2, r3
   1434c:	bne	14398 <__assert_fail@plt+0x1b70>
   14350:	add	sp, sp, #144	; 0x90
   14354:	pop	{r4, r5, r6, r7, r8, pc}
   14358:	movw	r0, #23980	; 0x5dac
   1435c:	movw	r1, #24876	; 0x612c
   14360:	movt	r0, #2
   14364:	movt	r1, #2
   14368:	ldr	r2, [pc, #44]	; 1439c <__assert_fail@plt+0x1b74>
   1436c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14370:	mvn	r0, #0
   14374:	b	14340 <__assert_fail@plt+0x1b18>
   14378:	movw	r0, #23980	; 0x5dac
   1437c:	movw	r1, #25780	; 0x64b4
   14380:	movt	r0, #2
   14384:	movt	r1, #2
   14388:	ldr	r2, [pc, #12]	; 1439c <__assert_fail@plt+0x1b74>
   1438c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14390:	mvn	r0, #0
   14394:	b	14340 <__assert_fail@plt+0x1b18>
   14398:	bl	12360 <__stack_chk_fail@plt>
   1439c:	andeq	r6, r2, r8, ror #4
   143a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143a4:	movw	r4, #17144	; 0x42f8
   143a8:	movt	r4, #4
   143ac:	sub	sp, sp, #260	; 0x104
   143b0:	mov	sl, r1
   143b4:	movw	r1, #25804	; 0x64cc
   143b8:	ldr	ip, [r4]
   143bc:	movt	r1, #2
   143c0:	mov	r7, r2
   143c4:	mov	r6, r3
   143c8:	mov	r5, r0
   143cc:	str	ip, [sp, #252]	; 0xfc
   143d0:	bl	1227c <strcmp@plt>
   143d4:	cmp	r0, #0
   143d8:	beq	14420 <__assert_fail@plt+0x1bf8>
   143dc:	movw	r1, #25796	; 0x64c4
   143e0:	mov	r0, r5
   143e4:	movt	r1, #2
   143e8:	bl	1227c <strcmp@plt>
   143ec:	subs	r3, r0, #0
   143f0:	beq	1444c <__assert_fail@plt+0x1c24>
   143f4:	movw	r3, #17132	; 0x42ec
   143f8:	movt	r3, #4
   143fc:	ldr	r3, [r3]
   14400:	tst	r3, #32
   14404:	bne	14744 <__assert_fail@plt+0x1f1c>
   14408:	ldr	r2, [sp, #252]	; 0xfc
   1440c:	ldr	r3, [r4]
   14410:	cmp	r2, r3
   14414:	bne	148f8 <__assert_fail@plt+0x20d0>
   14418:	add	sp, sp, #260	; 0x104
   1441c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14420:	mov	r0, r6
   14424:	mov	r1, sl
   14428:	mov	r2, r7
   1442c:	bl	1429c <__assert_fail@plt+0x1a74>
   14430:	cmp	r0, #1
   14434:	beq	14408 <__assert_fail@plt+0x1be0>
   14438:	mov	r1, r5
   1443c:	movw	r0, #26024	; 0x65a8
   14440:	movt	r0, #2
   14444:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   14448:	b	14408 <__assert_fail@plt+0x1be0>
   1444c:	mov	r0, sl
   14450:	mov	r1, r7
   14454:	movw	r2, #297	; 0x129
   14458:	str	r3, [sp, #68]	; 0x44
   1445c:	str	r3, [sp, #72]	; 0x48
   14460:	str	r3, [sp, #32]
   14464:	str	r2, [sp, #64]	; 0x40
   14468:	bl	1dec4 <__assert_fail@plt+0xb69c>
   1446c:	subs	fp, r0, #0
   14470:	ble	14438 <__assert_fail@plt+0x1c10>
   14474:	ldr	r0, [r6, #4]
   14478:	add	r3, sp, #124	; 0x7c
   1447c:	movw	r1, #25760	; 0x64a0
   14480:	str	r3, [sp]
   14484:	movt	r1, #2
   14488:	mov	r2, sl
   1448c:	mov	r3, fp
   14490:	bl	1d95c <__assert_fail@plt+0xb134>
   14494:	cmp	r0, #0
   14498:	str	r0, [sp, #28]
   1449c:	beq	14438 <__assert_fail@plt+0x1c10>
   144a0:	cmp	r7, fp
   144a4:	bls	144d4 <__assert_fail@plt+0x1cac>
   144a8:	ldr	r0, [r6, #4]
   144ac:	movw	r1, #25816	; 0x64d8
   144b0:	add	r9, sp, #124	; 0x7c
   144b4:	movt	r1, #2
   144b8:	str	r9, [sp]
   144bc:	add	r2, sl, fp
   144c0:	rsb	r3, fp, r7
   144c4:	bl	1d95c <__assert_fail@plt+0xb134>
   144c8:	cmp	r0, #0
   144cc:	str	r0, [sp, #32]
   144d0:	beq	14898 <__assert_fail@plt+0x2070>
   144d4:	mov	r0, sl
   144d8:	mov	r1, fp
   144dc:	bl	13b08 <__assert_fail@plt+0x12e0>
   144e0:	subs	r8, r0, #0
   144e4:	beq	14860 <__assert_fail@plt+0x2038>
   144e8:	mov	r1, #17
   144ec:	bl	20d84 <__assert_fail@plt+0xe55c>
   144f0:	subs	r9, r0, #0
   144f4:	beq	148dc <__assert_fail@plt+0x20b4>
   144f8:	add	r2, sp, #40	; 0x28
   144fc:	add	r3, sp, #44	; 0x2c
   14500:	ldr	r0, [sp, #28]
   14504:	mov	r1, sl
   14508:	stm	sp, {r2, r3}
   1450c:	movw	r3, #25832	; 0x64e8
   14510:	mov	r2, fp
   14514:	movt	r3, #2
   14518:	bl	12708 <asn1_der_decoding_startEnd@plt>
   1451c:	cmp	r0, #0
   14520:	str	r0, [sp, #20]
   14524:	bne	1487c <__assert_fail@plt+0x2054>
   14528:	ldr	r3, [sp, #40]	; 0x28
   1452c:	movw	r2, #25760	; 0x64a0
   14530:	ldr	r1, [sp, #44]	; 0x2c
   14534:	movt	r2, #2
   14538:	add	r0, sl, r3
   1453c:	str	r0, [sp, #68]	; 0x44
   14540:	rsb	r3, r3, r1
   14544:	ldr	r0, [r6]
   14548:	add	r3, r3, #1
   1454c:	str	r3, [sp, #72]	; 0x48
   14550:	ldmib	r9, {r3, ip}
   14554:	ldr	r1, [sp, #28]
   14558:	str	ip, [sp]
   1455c:	bl	1e1b4 <__assert_fail@plt+0xb98c>
   14560:	ldr	r0, [sp, #32]
   14564:	cmp	r0, #0
   14568:	beq	1472c <__assert_fail@plt+0x1f04>
   1456c:	ldr	r9, [sp, #20]
   14570:	add	r2, sp, #256	; 0x100
   14574:	movw	r1, #25868	; 0x650c
   14578:	movt	r1, #2
   1457c:	str	r9, [r2, #-220]!	; 0xffffff24
   14580:	bl	1dc60 <__assert_fail@plt+0xb438>
   14584:	subs	r9, r0, #0
   14588:	beq	145ac <__assert_fail@plt+0x1d84>
   1458c:	bl	12540 <strlen@plt>
   14590:	mov	r2, r9
   14594:	mov	r1, #3
   14598:	mov	r3, r0
   1459c:	mov	r0, r8
   145a0:	bl	209bc <__assert_fail@plt+0xe194>
   145a4:	subs	r8, r0, #0
   145a8:	beq	14860 <__assert_fail@plt+0x2038>
   145ac:	ldr	r9, [sp, #32]
   145b0:	movw	r1, #52496	; 0xcd10
   145b4:	movt	r1, #2
   145b8:	mov	r3, #0
   145bc:	add	ip, sp, #26
   145c0:	add	sl, sl, fp
   145c4:	mov	r0, r9
   145c8:	strb	r3, [sp, #26]
   145cc:	mov	lr, #134	; 0x86
   145d0:	strb	r3, [sp, #27]
   145d4:	str	r3, [sp, #116]	; 0x74
   145d8:	movw	r2, #18276	; 0x4764
   145dc:	str	r3, [sp, #120]	; 0x78
   145e0:	movt	r2, #55364	; 0xd844
   145e4:	add	r3, sp, #27
   145e8:	str	r2, [sp, #100]	; 0x64
   145ec:	str	lr, [sp, #88]	; 0x58
   145f0:	mov	r2, #1
   145f4:	mvn	lr, #0
   145f8:	str	ip, [sp, #92]	; 0x5c
   145fc:	str	sl, [sp, #20]
   14600:	rsb	fp, fp, r7
   14604:	str	r2, [sp, #96]	; 0x60
   14608:	str	r2, [sp, #108]	; 0x6c
   1460c:	str	r3, [sp, #104]	; 0x68
   14610:	str	lr, [sp, #112]	; 0x70
   14614:	bl	13d88 <__assert_fail@plt+0x1560>
   14618:	movw	r1, #25876	; 0x6514
   1461c:	add	r2, sp, #60	; 0x3c
   14620:	movt	r1, #2
   14624:	mov	r7, r0
   14628:	mov	r0, r9
   1462c:	bl	12330 <asn1_number_of_elements@plt>
   14630:	bics	sl, r0, #2
   14634:	bne	14848 <__assert_fail@plt+0x2020>
   14638:	cmp	r0, #0
   1463c:	beq	147f4 <__assert_fail@plt+0x1fcc>
   14640:	cmp	r7, #0
   14644:	beq	14678 <__assert_fail@plt+0x1e50>
   14648:	ldr	r2, [pc, #684]	; 148fc <__assert_fail@plt+0x20d4>
   1464c:	mov	r1, #1
   14650:	str	r7, [sp, #4]
   14654:	mov	r0, r6
   14658:	str	r1, [sp]
   1465c:	add	r3, r2, #12
   14660:	add	r1, sp, #64	; 0x40
   14664:	bl	14090 <__assert_fail@plt+0x1868>
   14668:	subs	r1, r0, #0
   1466c:	beq	148a4 <__assert_fail@plt+0x207c>
   14670:	mov	r0, r6
   14674:	bl	13bbc <__assert_fail@plt+0x1394>
   14678:	cmp	sl, #0
   1467c:	beq	14690 <__assert_fail@plt+0x1e68>
   14680:	mov	r0, sl
   14684:	bl	23564 <secure_getenv@@Base+0xf10>
   14688:	cmp	r0, #0
   1468c:	bne	147c0 <__assert_fail@plt+0x1f98>
   14690:	cmp	r7, #0
   14694:	beq	146c4 <__assert_fail@plt+0x1e9c>
   14698:	mov	r0, r7
   1469c:	bl	23564 <secure_getenv@@Base+0xf10>
   146a0:	cmp	r0, #0
   146a4:	beq	14760 <__assert_fail@plt+0x1f38>
   146a8:	mov	r0, r7
   146ac:	bl	23564 <secure_getenv@@Base+0xf10>
   146b0:	cmp	r0, #0
   146b4:	movne	r2, #1
   146b8:	movne	r3, #0
   146bc:	strbne	r2, [sp, #26]
   146c0:	strbne	r3, [sp, #27]
   146c4:	add	r0, sp, #88	; 0x58
   146c8:	bl	20adc <__assert_fail@plt+0xe2b4>
   146cc:	mov	r2, #1
   146d0:	mov	r1, r0
   146d4:	mov	r0, r8
   146d8:	bl	20a38 <__assert_fail@plt+0xe210>
   146dc:	subs	r8, r0, #0
   146e0:	beq	148c0 <__assert_fail@plt+0x2098>
   146e4:	mov	r0, r7
   146e8:	bl	23458 <secure_getenv@@Base+0xe04>
   146ec:	mov	r0, sl
   146f0:	bl	23458 <secure_getenv@@Base+0xe04>
   146f4:	mov	r2, fp
   146f8:	add	r1, sp, #52	; 0x34
   146fc:	add	r3, sp, #56	; 0x38
   14700:	mov	r0, r9
   14704:	stm	sp, {r1, r3}
   14708:	movw	r3, #25956	; 0x6564
   1470c:	ldr	r1, [sp, #20]
   14710:	movt	r3, #2
   14714:	bl	12708 <asn1_der_decoding_startEnd@plt>
   14718:	bics	r3, r0, #2
   1471c:	mov	r2, r0
   14720:	bne	14848 <__assert_fail@plt+0x2020>
   14724:	cmp	r0, #0
   14728:	beq	14770 <__assert_fail@plt+0x1f48>
   1472c:	mov	r0, r6
   14730:	mov	r1, r8
   14734:	bl	13bbc <__assert_fail@plt+0x1394>
   14738:	add	r0, sp, #32
   1473c:	bl	1278c <asn1_delete_structure@plt>
   14740:	b	14408 <__assert_fail@plt+0x1be0>
   14744:	mov	r3, r5
   14748:	movw	r1, #25964	; 0x656c
   1474c:	mov	r0, #32
   14750:	movt	r1, #2
   14754:	ldr	r2, [pc, #420]	; 14900 <__assert_fail@plt+0x20d8>
   14758:	bl	22d4c <secure_getenv@@Base+0x6f8>
   1475c:	b	14408 <__assert_fail@plt+0x1be0>
   14760:	mov	r3, #1
   14764:	strb	r0, [sp, #26]
   14768:	strb	r3, [sp, #27]
   1476c:	b	146c4 <__assert_fail@plt+0x1e9c>
   14770:	ldr	ip, [sp, #52]	; 0x34
   14774:	add	r1, r6, #4
   14778:	ldr	r7, [sp, #56]	; 0x38
   1477c:	mov	r0, r6
   14780:	ldr	r3, [pc, #380]	; 14904 <__assert_fail@plt+0x20dc>
   14784:	ldr	r9, [sp, #20]
   14788:	add	lr, r9, ip
   1478c:	rsb	ip, ip, r7
   14790:	stmib	sp, {r2, lr}
   14794:	add	ip, ip, #1
   14798:	str	r3, [sp]
   1479c:	add	r2, sp, #64	; 0x40
   147a0:	sub	r3, r3, #12
   147a4:	str	ip, [sp, #12]
   147a8:	bl	13e64 <__assert_fail@plt+0x163c>
   147ac:	subs	r1, r0, #0
   147b0:	beq	148a4 <__assert_fail@plt+0x207c>
   147b4:	mov	r0, r6
   147b8:	bl	13bbc <__assert_fail@plt+0x1394>
   147bc:	b	1472c <__assert_fail@plt+0x1f04>
   147c0:	ldr	r2, [pc, #320]	; 14908 <__assert_fail@plt+0x20e0>
   147c4:	mov	r1, #0
   147c8:	str	sl, [sp, #4]
   147cc:	mov	r0, r6
   147d0:	str	r1, [sp]
   147d4:	add	r3, r2, #24
   147d8:	add	r1, sp, #64	; 0x40
   147dc:	bl	14090 <__assert_fail@plt+0x1868>
   147e0:	subs	r1, r0, #0
   147e4:	beq	148a4 <__assert_fail@plt+0x207c>
   147e8:	mov	r0, r6
   147ec:	bl	13bbc <__assert_fail@plt+0x1394>
   147f0:	b	14690 <__assert_fail@plt+0x1e68>
   147f4:	movw	r1, #25876	; 0x6514
   147f8:	mov	r0, r9
   147fc:	movt	r1, #2
   14800:	bl	13d88 <__assert_fail@plt+0x1560>
   14804:	cmp	r0, #0
   14808:	cmpne	r7, #0
   1480c:	mov	sl, r0
   14810:	beq	14640 <__assert_fail@plt+0x1e18>
   14814:	add	r1, sp, #76	; 0x4c
   14818:	bl	22ffc <secure_getenv@@Base+0x9a8>
   1481c:	b	1482c <__assert_fail@plt+0x2004>
   14820:	mov	r0, r7
   14824:	ldr	r1, [sp, #48]	; 0x30
   14828:	bl	23250 <secure_getenv@@Base+0xbfc>
   1482c:	add	r0, sp, #76	; 0x4c
   14830:	add	r1, sp, #48	; 0x30
   14834:	mov	r2, #0
   14838:	bl	22f6c <secure_getenv@@Base+0x918>
   1483c:	cmp	r0, #0
   14840:	bne	14820 <__assert_fail@plt+0x1ff8>
   14844:	b	14648 <__assert_fail@plt+0x1e20>
   14848:	movw	r0, #23980	; 0x5dac
   1484c:	movw	r1, #25884	; 0x651c
   14850:	movt	r0, #2
   14854:	movt	r1, #2
   14858:	ldr	r2, [pc, #172]	; 1490c <__assert_fail@plt+0x20e4>
   1485c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14860:	movw	r0, #23980	; 0x5dac
   14864:	movw	r1, #24876	; 0x612c
   14868:	movt	r0, #2
   1486c:	movt	r1, #2
   14870:	ldr	r2, [pc, #152]	; 14910 <__assert_fail@plt+0x20e8>
   14874:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14878:	b	14438 <__assert_fail@plt+0x1c10>
   1487c:	movw	r0, #23980	; 0x5dac
   14880:	movw	r1, #25660	; 0x643c
   14884:	movt	r0, #2
   14888:	movt	r1, #2
   1488c:	ldr	r2, [pc, #124]	; 14910 <__assert_fail@plt+0x20e8>
   14890:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14894:	b	14438 <__assert_fail@plt+0x1c10>
   14898:	add	r0, sp, #28
   1489c:	bl	1278c <asn1_delete_structure@plt>
   148a0:	b	14438 <__assert_fail@plt+0x1c10>
   148a4:	movw	r0, #23980	; 0x5dac
   148a8:	movw	r1, #24876	; 0x612c
   148ac:	movt	r0, #2
   148b0:	movt	r1, #2
   148b4:	ldr	r2, [pc, #80]	; 1490c <__assert_fail@plt+0x20e4>
   148b8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   148bc:	b	14860 <__assert_fail@plt+0x2038>
   148c0:	movw	r0, #23980	; 0x5dac
   148c4:	movw	r1, #25940	; 0x6554
   148c8:	movt	r0, #2
   148cc:	movt	r1, #2
   148d0:	ldr	r2, [pc, #52]	; 1490c <__assert_fail@plt+0x20e4>
   148d4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   148d8:	b	14860 <__assert_fail@plt+0x2038>
   148dc:	movw	r0, #23980	; 0x5dac
   148e0:	movw	r1, #25780	; 0x64b4
   148e4:	movt	r0, #2
   148e8:	movt	r1, #2
   148ec:	ldr	r2, [pc, #28]	; 14910 <__assert_fail@plt+0x20e8>
   148f0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   148f4:	b	14438 <__assert_fail@plt+0x1c10>
   148f8:	bl	12360 <__stack_chk_fail@plt>
   148fc:	andeq	r6, r2, r0, asr #5
   14900:	andeq	r6, r2, ip, lsl #6
   14904:	andeq	r6, r2, r4, lsl #6
   14908:	ldrdeq	r6, [r2], -r4
   1490c:	andeq	r6, r2, r4, lsr #5
   14910:	andeq	r6, r2, r0, lsl #5
   14914:	push	{r3, lr}
   14918:	mov	r3, r0
   1491c:	mov	r0, r1
   14920:	mov	r1, r2
   14924:	movw	r2, #17312	; 0x43a0
   14928:	movt	r2, #1
   1492c:	bl	1e3e0 <__assert_fail@plt+0xbbb8>
   14930:	adds	r0, r0, #0
   14934:	movne	r0, #1
   14938:	pop	{r3, pc}
   1493c:	push	{r4, r5, r6, r7, r8, lr}
   14940:	movw	r6, #17144	; 0x42f8
   14944:	movt	r6, #4
   14948:	sub	sp, sp, #32
   1494c:	mov	r8, r1
   14950:	mov	r7, r0
   14954:	ldr	r3, [r6]
   14958:	mov	r1, r2
   1495c:	mov	r0, r8
   14960:	mov	ip, #1
   14964:	mov	r4, r2
   14968:	strb	ip, [sp, #15]
   1496c:	mov	r2, #368	; 0x170
   14970:	str	r3, [sp, #28]
   14974:	str	ip, [sp, #24]
   14978:	add	r3, sp, #15
   1497c:	str	r2, [sp, #16]
   14980:	str	r3, [sp, #20]
   14984:	bl	15034 <__assert_fail@plt+0x280c>
   14988:	cmp	r0, #0
   1498c:	beq	149d8 <__assert_fail@plt+0x21b0>
   14990:	ldr	r3, [r7, #12]
   14994:	cmp	r3, #0
   14998:	beq	14a5c <__assert_fail@plt+0x2234>
   1499c:	mov	r0, #0
   149a0:	bl	21c90 <__assert_fail@plt+0xf468>
   149a4:	subs	r5, r0, #0
   149a8:	beq	14a90 <__assert_fail@plt+0x2268>
   149ac:	ldr	r0, [r7, #12]
   149b0:	mov	r2, r8
   149b4:	ldr	r1, [r7, #16]
   149b8:	mov	r3, r4
   149bc:	str	r5, [sp]
   149c0:	bl	1512c <__assert_fail@plt+0x2904>
   149c4:	cmp	r0, #0
   149c8:	bne	149f0 <__assert_fail@plt+0x21c8>
   149cc:	mov	r0, r5
   149d0:	bl	21c6c <__assert_fail@plt+0xf444>
   149d4:	mvn	r0, #0
   149d8:	ldr	r2, [sp, #28]
   149dc:	ldr	r3, [r6]
   149e0:	cmp	r2, r3
   149e4:	bne	14ab0 <__assert_fail@plt+0x2288>
   149e8:	add	sp, sp, #32
   149ec:	pop	{r4, r5, r6, r7, r8, pc}
   149f0:	mov	r0, r8
   149f4:	mov	r1, r4
   149f8:	bl	15054 <__assert_fail@plt+0x282c>
   149fc:	ldr	r3, [r5, #4]
   14a00:	cmp	r0, #0
   14a04:	strbeq	r0, [sp, #15]
   14a08:	cmp	r3, #0
   14a0c:	beq	14a4c <__assert_fail@plt+0x2224>
   14a10:	mov	r3, #0
   14a14:	mov	r4, r3
   14a18:	ldr	r0, [r5]
   14a1c:	mov	r2, #0
   14a20:	add	r1, sp, #16
   14a24:	add	r4, r4, #1
   14a28:	ldr	r0, [r0, r3, lsl #2]
   14a2c:	bl	208dc <__assert_fail@plt+0xe0b4>
   14a30:	mov	r1, r0
   14a34:	mov	r0, r7
   14a38:	bl	13bbc <__assert_fail@plt+0x1394>
   14a3c:	ldr	r2, [r5, #4]
   14a40:	mov	r3, r4
   14a44:	cmp	r4, r2
   14a48:	bcc	14a18 <__assert_fail@plt+0x21f0>
   14a4c:	mov	r0, r5
   14a50:	bl	21c6c <__assert_fail@plt+0xf444>
   14a54:	mov	r0, #1
   14a58:	b	149d8 <__assert_fail@plt+0x21b0>
   14a5c:	bl	15084 <__assert_fail@plt+0x285c>
   14a60:	cmp	r0, #0
   14a64:	mov	r5, r0
   14a68:	str	r0, [r7, #12]
   14a6c:	bne	1499c <__assert_fail@plt+0x2174>
   14a70:	movw	r0, #23980	; 0x5dac
   14a74:	movw	r1, #26060	; 0x65cc
   14a78:	movt	r0, #2
   14a7c:	movt	r1, #2
   14a80:	ldr	r2, [pc, #44]	; 14ab4 <__assert_fail@plt+0x228c>
   14a84:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14a88:	mov	r0, r5
   14a8c:	b	149d8 <__assert_fail@plt+0x21b0>
   14a90:	movw	r0, #23980	; 0x5dac
   14a94:	movw	r1, #26084	; 0x65e4
   14a98:	movt	r0, #2
   14a9c:	movt	r1, #2
   14aa0:	ldr	r2, [pc, #12]	; 14ab4 <__assert_fail@plt+0x228c>
   14aa4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14aa8:	mvn	r0, #0
   14aac:	b	149d8 <__assert_fail@plt+0x21b0>
   14ab0:	bl	12360 <__stack_chk_fail@plt>
   14ab4:	andeq	r6, r2, ip, lsl r3
   14ab8:	push	{r4, r5, r6, lr}
   14abc:	movw	r5, #17144	; 0x42f8
   14ac0:	movt	r5, #4
   14ac4:	sub	sp, sp, #40	; 0x28
   14ac8:	subs	r6, r0, #0
   14acc:	mov	r4, #0
   14ad0:	ldr	r3, [r5]
   14ad4:	str	r4, [sp, #4]
   14ad8:	str	r4, [sp, #8]
   14adc:	str	r3, [sp, #36]	; 0x24
   14ae0:	str	r4, [sp, #12]
   14ae4:	str	r4, [sp, #16]
   14ae8:	str	r4, [sp, #20]
   14aec:	str	r4, [sp, #24]
   14af0:	str	r4, [sp, #28]
   14af4:	str	r4, [sp, #32]
   14af8:	beq	14b4c <__assert_fail@plt+0x2324>
   14afc:	bl	1e370 <__assert_fail@plt+0xbb48>
   14b00:	str	r6, [sp, #4]
   14b04:	strb	r4, [sp, #12]
   14b08:	str	r0, [sp, #8]
   14b0c:	movw	r0, #2208	; 0x8a0
   14b10:	movt	r0, #2
   14b14:	bl	21c90 <__assert_fail@plt+0xf468>
   14b18:	cmp	r0, #0
   14b1c:	mov	r4, r0
   14b20:	str	r0, [sp, #24]
   14b24:	beq	14b60 <__assert_fail@plt+0x2338>
   14b28:	add	r0, sp, #4
   14b2c:	mov	r1, #32
   14b30:	bl	22490 <__assert_fail@plt+0xfc68>
   14b34:	ldr	r2, [sp, #36]	; 0x24
   14b38:	ldr	r3, [r5]
   14b3c:	cmp	r2, r3
   14b40:	bne	14b80 <__assert_fail@plt+0x2358>
   14b44:	add	sp, sp, #40	; 0x28
   14b48:	pop	{r4, r5, r6, pc}
   14b4c:	mov	r3, #1
   14b50:	strb	r3, [sp, #12]
   14b54:	bl	1d69c <__assert_fail@plt+0xae74>
   14b58:	str	r0, [sp, #8]
   14b5c:	b	14b0c <__assert_fail@plt+0x22e4>
   14b60:	movw	r0, #23980	; 0x5dac
   14b64:	movw	r1, #26100	; 0x65f4
   14b68:	movt	r0, #2
   14b6c:	movt	r1, #2
   14b70:	ldr	r2, [pc, #12]	; 14b84 <__assert_fail@plt+0x235c>
   14b74:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14b78:	mov	r0, r4
   14b7c:	b	14b34 <__assert_fail@plt+0x230c>
   14b80:	bl	12360 <__stack_chk_fail@plt>
   14b84:	andeq	r6, r2, r8, lsr r3
   14b88:	push	{r4, lr}
   14b8c:	subs	r4, r0, #0
   14b90:	beq	14bd8 <__assert_fail@plt+0x23b0>
   14b94:	ldr	r0, [r4, #12]
   14b98:	bl	15100 <__assert_fail@plt+0x28d8>
   14b9c:	ldr	r0, [r4, #20]
   14ba0:	bl	21c6c <__assert_fail@plt+0xf444>
   14ba4:	ldr	r0, [r4, #24]
   14ba8:	bl	21c6c <__assert_fail@plt+0xf444>
   14bac:	ldrb	r3, [r4, #8]
   14bb0:	cmp	r3, #0
   14bb4:	bne	14bc4 <__assert_fail@plt+0x239c>
   14bb8:	mov	r0, r4
   14bbc:	pop	{r4, lr}
   14bc0:	b	122c4 <free@plt>
   14bc4:	ldr	r0, [r4, #4]
   14bc8:	bl	23458 <secure_getenv@@Base+0xe04>
   14bcc:	mov	r0, r4
   14bd0:	pop	{r4, lr}
   14bd4:	b	122c4 <free@plt>
   14bd8:	movw	r0, #23980	; 0x5dac
   14bdc:	movw	r1, #24012	; 0x5dcc
   14be0:	movt	r0, #2
   14be4:	movt	r1, #2
   14be8:	ldr	r2, [pc, #4]	; 14bf4 <__assert_fail@plt+0x23cc>
   14bec:	pop	{r4, lr}
   14bf0:	b	22e10 <secure_getenv@@Base+0x7bc>
   14bf4:	andeq	r6, r2, r8, asr #6
   14bf8:	push	{r4, lr}
   14bfc:	subs	r4, r0, #0
   14c00:	beq	14c0c <__assert_fail@plt+0x23e4>
   14c04:	ldr	r0, [r4, #20]
   14c08:	pop	{r4, pc}
   14c0c:	ldr	r2, [pc, #24]	; 14c2c <__assert_fail@plt+0x2404>
   14c10:	movw	r0, #23980	; 0x5dac
   14c14:	movw	r1, #24012	; 0x5dcc
   14c18:	movt	r0, #2
   14c1c:	movt	r1, #2
   14c20:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14c24:	mov	r0, r4
   14c28:	pop	{r4, pc}
   14c2c:	andeq	r6, r2, r8, asr r3
   14c30:	push	{r0, r1, r2, r3}
   14c34:	mov	r0, #0
   14c38:	push	{r4, r5, r6, r7, lr}
   14c3c:	movw	r6, #17144	; 0x42f8
   14c40:	movt	r6, #4
   14c44:	sub	sp, sp, #12
   14c48:	ldr	r3, [r6]
   14c4c:	ldr	r7, [sp, #32]
   14c50:	str	r3, [sp, #4]
   14c54:	bl	21c90 <__assert_fail@plt+0xf468>
   14c58:	subs	r5, r0, #0
   14c5c:	addne	r4, sp, #40	; 0x28
   14c60:	bne	14c7c <__assert_fail@plt+0x2454>
   14c64:	b	14ccc <__assert_fail@plt+0x24a4>
   14c68:	mov	r0, r5
   14c6c:	add	r4, r4, #4
   14c70:	bl	21b4c <__assert_fail@plt+0xf324>
   14c74:	cmp	r0, #0
   14c78:	beq	14cb8 <__assert_fail@plt+0x2490>
   14c7c:	ldr	r1, [r4, #-4]
   14c80:	str	r4, [sp]
   14c84:	cmp	r1, #0
   14c88:	bne	14c68 <__assert_fail@plt+0x2440>
   14c8c:	ldr	r0, [r7, #24]
   14c90:	bl	21c6c <__assert_fail@plt+0xf444>
   14c94:	str	r5, [r7, #24]
   14c98:	ldr	r2, [sp, #4]
   14c9c:	ldr	r3, [r6]
   14ca0:	cmp	r2, r3
   14ca4:	bne	14ce8 <__assert_fail@plt+0x24c0>
   14ca8:	add	sp, sp, #12
   14cac:	pop	{r4, r5, r6, r7, lr}
   14cb0:	add	sp, sp, #16
   14cb4:	bx	lr
   14cb8:	movw	r0, #24400	; 0x5f50
   14cbc:	ldr	r1, [pc, #40]	; 14cec <__assert_fail@plt+0x24c4>
   14cc0:	movt	r0, #2
   14cc4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14cc8:	b	14c98 <__assert_fail@plt+0x2470>
   14ccc:	movw	r0, #23980	; 0x5dac
   14cd0:	movw	r1, #26152	; 0x6628
   14cd4:	movt	r0, #2
   14cd8:	movt	r1, #2
   14cdc:	ldr	r2, [pc, #8]	; 14cec <__assert_fail@plt+0x24c4>
   14ce0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14ce4:	b	14c98 <__assert_fail@plt+0x2470>
   14ce8:	bl	12360 <__stack_chk_fail@plt>
   14cec:	andeq	r6, r2, ip, ror #6
   14cf0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14cf4:	subs	r5, r0, #0
   14cf8:	mov	r8, r1
   14cfc:	mov	r9, r2
   14d00:	mov	r6, r3
   14d04:	ldr	r7, [sp, #32]
   14d08:	beq	14de0 <__assert_fail@plt+0x25b8>
   14d0c:	cmp	r1, #0
   14d10:	beq	14dc0 <__assert_fail@plt+0x2598>
   14d14:	ldr	r3, [r5, #24]
   14d18:	cmp	r3, #0
   14d1c:	beq	14da0 <__assert_fail@plt+0x2578>
   14d20:	ldr	r0, [r5, #20]
   14d24:	mov	r4, #0
   14d28:	bl	21c18 <__assert_fail@plt+0xf3f0>
   14d2c:	mov	r0, r8
   14d30:	bl	2438c <p11_dict_direct_equal@@Base+0xb94>
   14d34:	str	r9, [r5, #28]
   14d38:	mov	r8, r0
   14d3c:	str	r0, [r5, #16]
   14d40:	ldr	ip, [r5, #24]
   14d44:	mov	r0, r5
   14d48:	mov	r1, r6
   14d4c:	mov	r2, r7
   14d50:	ldr	lr, [ip, #4]
   14d54:	cmp	r4, lr
   14d58:	bcs	14d98 <__assert_fail@plt+0x2570>
   14d5c:	ldr	r3, [ip]
   14d60:	ldr	ip, [r3, r4, lsl #2]
   14d64:	add	r4, r4, #1
   14d68:	blx	ip
   14d6c:	subs	r9, r0, #0
   14d70:	beq	14d40 <__assert_fail@plt+0x2518>
   14d74:	ldr	r0, [r5]
   14d78:	bl	1e360 <__assert_fail@plt+0xbb38>
   14d7c:	mov	r0, r8
   14d80:	bl	122c4 <free@plt>
   14d84:	mov	r3, #0
   14d88:	mov	r0, r9
   14d8c:	str	r3, [r5, #16]
   14d90:	str	r3, [r5, #28]
   14d94:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14d98:	mov	r9, #0
   14d9c:	b	14d74 <__assert_fail@plt+0x254c>
   14da0:	ldr	r2, [pc, #88]	; 14e00 <__assert_fail@plt+0x25d8>
   14da4:	movw	r0, #23980	; 0x5dac
   14da8:	movw	r1, #26144	; 0x6620
   14dac:	movt	r0, #2
   14db0:	movt	r1, #2
   14db4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14db8:	mvn	r0, #0
   14dbc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14dc0:	ldr	r2, [pc, #56]	; 14e00 <__assert_fail@plt+0x25d8>
   14dc4:	movw	r0, #23980	; 0x5dac
   14dc8:	movw	r1, #26124	; 0x660c
   14dcc:	movt	r0, #2
   14dd0:	movt	r1, #2
   14dd4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14dd8:	mvn	r0, #0
   14ddc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14de0:	ldr	r2, [pc, #24]	; 14e00 <__assert_fail@plt+0x25d8>
   14de4:	movw	r0, #23980	; 0x5dac
   14de8:	movw	r1, #24012	; 0x5dcc
   14dec:	movt	r0, #2
   14df0:	movt	r1, #2
   14df4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14df8:	mvn	r0, #0
   14dfc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14e00:	andeq	r6, r2, r0, lsl #7
   14e04:	push	{r4, r5, r6, r7, r8, lr}
   14e08:	movw	r4, #17144	; 0x42f8
   14e0c:	movt	r4, #4
   14e10:	sub	sp, sp, #24
   14e14:	subs	r7, r0, #0
   14e18:	mov	r5, r1
   14e1c:	ldr	ip, [r4]
   14e20:	mov	r6, r3
   14e24:	str	ip, [sp, #20]
   14e28:	beq	14ed4 <__assert_fail@plt+0x26ac>
   14e2c:	cmp	r1, #0
   14e30:	beq	14e94 <__assert_fail@plt+0x266c>
   14e34:	mov	r1, r2
   14e38:	mov	r0, r5
   14e3c:	add	r2, sp, #12
   14e40:	add	r3, sp, #16
   14e44:	bl	22280 <__assert_fail@plt+0xfa58>
   14e48:	subs	r8, r0, #0
   14e4c:	beq	14eb4 <__assert_fail@plt+0x268c>
   14e50:	ldr	ip, [sp, #16]
   14e54:	mov	r1, r5
   14e58:	ldr	r3, [sp, #12]
   14e5c:	mov	r2, r6
   14e60:	mov	r0, r7
   14e64:	str	ip, [sp]
   14e68:	bl	14cf0 <__assert_fail@plt+0x24c8>
   14e6c:	mov	r5, r0
   14e70:	mov	r0, r8
   14e74:	bl	223d0 <__assert_fail@plt+0xfba8>
   14e78:	mov	r0, r5
   14e7c:	ldr	r2, [sp, #20]
   14e80:	ldr	r3, [r4]
   14e84:	cmp	r2, r3
   14e88:	bne	14ef4 <__assert_fail@plt+0x26cc>
   14e8c:	add	sp, sp, #24
   14e90:	pop	{r4, r5, r6, r7, r8, pc}
   14e94:	movw	r0, #23980	; 0x5dac
   14e98:	movw	r1, #26124	; 0x660c
   14e9c:	movt	r0, #2
   14ea0:	movt	r1, #2
   14ea4:	ldr	r2, [pc, #76]	; 14ef8 <__assert_fail@plt+0x26d0>
   14ea8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14eac:	mvn	r0, #0
   14eb0:	b	14e7c <__assert_fail@plt+0x2654>
   14eb4:	bl	125b8 <__errno_location@plt>
   14eb8:	mov	r2, r5
   14ebc:	movw	r1, #26168	; 0x6638
   14ec0:	movt	r1, #2
   14ec4:	ldr	r0, [r0]
   14ec8:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   14ecc:	mvn	r0, #0
   14ed0:	b	14e7c <__assert_fail@plt+0x2654>
   14ed4:	movw	r0, #23980	; 0x5dac
   14ed8:	movw	r1, #24012	; 0x5dcc
   14edc:	movt	r0, #2
   14ee0:	movt	r1, #2
   14ee4:	ldr	r2, [pc, #12]	; 14ef8 <__assert_fail@plt+0x26d0>
   14ee8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   14eec:	mvn	r0, #0
   14ef0:	b	14e7c <__assert_fail@plt+0x2654>
   14ef4:	bl	12360 <__stack_chk_fail@plt>
   14ef8:	muleq	r2, r4, r3
   14efc:	push	{r4, r5, r6, r7, r8, r9, lr}
   14f00:	movw	r4, #17144	; 0x42f8
   14f04:	movt	r4, #4
   14f08:	sub	sp, sp, #60	; 0x3c
   14f0c:	mov	r9, r1
   14f10:	movw	r1, #25804	; 0x64cc
   14f14:	ldr	ip, [r4]
   14f18:	movt	r1, #2
   14f1c:	mov	r8, r2
   14f20:	mov	r5, r3
   14f24:	mov	r7, r0
   14f28:	str	ip, [sp, #52]	; 0x34
   14f2c:	bl	1227c <strcmp@plt>
   14f30:	subs	r6, r0, #0
   14f34:	beq	14fbc <__assert_fail@plt+0x2794>
   14f38:	mov	r0, r7
   14f3c:	movw	r1, #26480	; 0x6770
   14f40:	movt	r1, #2
   14f44:	bl	1227c <strcmp@plt>
   14f48:	subs	r6, r0, #0
   14f4c:	beq	14f80 <__assert_fail@plt+0x2758>
   14f50:	movw	r1, #26492	; 0x677c
   14f54:	ldr	r0, [r5]
   14f58:	movt	r1, #2
   14f5c:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   14f60:	mov	r3, #0
   14f64:	strb	r3, [r5, #8]
   14f68:	ldr	r2, [sp, #52]	; 0x34
   14f6c:	ldr	r3, [r4]
   14f70:	cmp	r2, r3
   14f74:	bne	15030 <__assert_fail@plt+0x2808>
   14f78:	add	sp, sp, #60	; 0x3c
   14f7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f80:	add	r1, sp, #40	; 0x28
   14f84:	mov	r2, r6
   14f88:	movw	r3, #297	; 0x129
   14f8c:	str	r9, [sp, #44]	; 0x2c
   14f90:	str	r3, [sp, #40]	; 0x28
   14f94:	str	r8, [sp, #48]	; 0x30
   14f98:	bl	208dc <__assert_fail@plt+0xe0b4>
   14f9c:	mov	r2, r6
   14fa0:	mov	r1, r0
   14fa4:	ldr	r0, [r5, #4]
   14fa8:	bl	20a38 <__assert_fail@plt+0xe210>
   14fac:	mov	r3, #1
   14fb0:	strb	r3, [r5, #8]
   14fb4:	str	r0, [r5, #4]
   14fb8:	b	14f68 <__assert_fail@plt+0x2740>
   14fbc:	add	r1, sp, #16
   14fc0:	add	r2, sp, #28
   14fc4:	add	r3, sp, #40	; 0x28
   14fc8:	str	r6, [sp]
   14fcc:	mov	ip, #4
   14fd0:	mov	r7, #1
   14fd4:	add	lr, sp, #8
   14fd8:	str	r9, [sp, #44]	; 0x2c
   14fdc:	str	r8, [sp, #48]	; 0x30
   14fe0:	mov	r9, #128	; 0x80
   14fe4:	str	lr, [sp, #20]
   14fe8:	add	r8, sp, #12
   14fec:	mov	lr, #17
   14ff0:	str	ip, [sp, #24]
   14ff4:	str	ip, [sp, #36]	; 0x24
   14ff8:	str	lr, [sp, #40]	; 0x28
   14ffc:	str	r6, [sp, #12]
   15000:	str	r6, [sp, #16]
   15004:	str	r7, [sp, #8]
   15008:	str	r9, [sp, #28]
   1500c:	str	r8, [sp, #32]
   15010:	bl	208dc <__assert_fail@plt+0xe0b4>
   15014:	mov	r2, r6
   15018:	mov	r1, r0
   1501c:	ldr	r0, [r5, #4]
   15020:	bl	20a38 <__assert_fail@plt+0xe210>
   15024:	strb	r7, [r5, #8]
   15028:	str	r0, [r5, #4]
   1502c:	b	14f68 <__assert_fail@plt+0x2740>
   15030:	bl	12360 <__stack_chk_fail@plt>
   15034:	mov	r2, r1
   15038:	movw	r1, #26524	; 0x679c
   1503c:	push	{r3, lr}
   15040:	movt	r1, #2
   15044:	bl	22400 <__assert_fail@plt+0xfbd8>
   15048:	adds	r0, r0, #0
   1504c:	movne	r0, #1
   15050:	pop	{r3, pc}
   15054:	cmp	r1, #58	; 0x3a
   15058:	push	{r3, lr}
   1505c:	bls	1507c <__assert_fail@plt+0x2854>
   15060:	mov	r2, #59	; 0x3b
   15064:	movw	r1, #26200	; 0x6658
   15068:	movt	r1, #2
   1506c:	bl	12324 <memcmp@plt>
   15070:	rsbs	r0, r0, #1
   15074:	movcc	r0, #0
   15078:	pop	{r3, pc}
   1507c:	mov	r0, #0
   15080:	pop	{r3, pc}
   15084:	push	{r3, r4, r5, lr}
   15088:	mov	r0, #1
   1508c:	mov	r1, #8
   15090:	bl	1221c <calloc@plt>
   15094:	subs	r4, r0, #0
   15098:	beq	150bc <__assert_fail@plt+0x2894>
   1509c:	mov	r0, #1
   150a0:	bl	22914 <secure_getenv@@Base+0x2c0>
   150a4:	cmp	r0, #0
   150a8:	mov	r5, r0
   150ac:	str	r0, [r4]
   150b0:	beq	150dc <__assert_fail@plt+0x28b4>
   150b4:	mov	r0, r4
   150b8:	pop	{r3, r4, r5, pc}
   150bc:	ldr	r2, [pc, #56]	; 150fc <__assert_fail@plt+0x28d4>
   150c0:	movw	r0, #23980	; 0x5dac
   150c4:	movw	r1, #26068	; 0x65d4
   150c8:	movt	r0, #2
   150cc:	movt	r1, #2
   150d0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   150d4:	mov	r0, r4
   150d8:	pop	{r3, r4, r5, pc}
   150dc:	ldr	r2, [pc, #24]	; 150fc <__assert_fail@plt+0x28d4>
   150e0:	movw	r0, #23980	; 0x5dac
   150e4:	movw	r1, #26544	; 0x67b0
   150e8:	movt	r0, #2
   150ec:	movt	r1, #2
   150f0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   150f4:	mov	r0, r5
   150f8:	pop	{r3, r4, r5, pc}
   150fc:	muleq	r2, r4, r6
   15100:	push	{r3, r4, r5, lr}
   15104:	subs	r5, r0, #0
   15108:	popeq	{r3, r4, r5, pc}
   1510c:	mov	r4, r5
   15110:	ldr	r0, [r4], #4
   15114:	bl	23458 <secure_getenv@@Base+0xe04>
   15118:	mov	r0, r4
   1511c:	bl	1278c <asn1_delete_structure@plt>
   15120:	mov	r0, r5
   15124:	pop	{r3, r4, r5, lr}
   15128:	b	122c4 <free@plt>
   1512c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15130:	movw	r9, #17144	; 0x42f8
   15134:	sub	sp, sp, #212	; 0xd4
   15138:	movt	r9, #4
   1513c:	cmp	r0, #0
   15140:	str	r0, [sp, #12]
   15144:	ldr	r0, [r9]
   15148:	ldr	r7, [sp, #248]	; 0xf8
   1514c:	str	r0, [sp, #204]	; 0xcc
   15150:	beq	155d8 <__assert_fail@plt+0x2db0>
   15154:	cmp	r7, #0
   15158:	beq	1550c <__assert_fail@plt+0x2ce4>
   1515c:	add	r4, sp, #48	; 0x30
   15160:	mov	r0, #0
   15164:	mov	r5, r0
   15168:	strb	r0, [sp, #27]
   1516c:	mov	r0, r4
   15170:	mov	r6, r5
   15174:	bl	23a64 <p11_dict_direct_equal@@Base+0x26c>
   15178:	mov	r0, r4
   1517c:	add	r1, sp, #27
   15180:	bl	23c6c <p11_dict_direct_equal@@Base+0x474>
   15184:	subs	sl, r0, #0
   15188:	beq	151b4 <__assert_fail@plt+0x298c>
   1518c:	ldr	r3, [sp, #64]	; 0x40
   15190:	cmp	r3, #2
   15194:	beq	151e8 <__assert_fail@plt+0x29c0>
   15198:	cmp	r3, #3
   1519c:	beq	1530c <__assert_fail@plt+0x2ae4>
   151a0:	cmp	r3, #1
   151a4:	beq	152b4 <__assert_fail@plt+0x2a8c>
   151a8:	ldrb	sl, [sp, #27]
   151ac:	cmp	sl, #0
   151b0:	beq	15178 <__assert_fail@plt+0x2950>
   151b4:	cmp	r5, #0
   151b8:	beq	15460 <__assert_fail@plt+0x2c38>
   151bc:	mov	r0, r7
   151c0:	mov	r1, r5
   151c4:	bl	21b4c <__assert_fail@plt+0xf324>
   151c8:	cmp	r0, #0
   151cc:	bne	15460 <__assert_fail@plt+0x2c38>
   151d0:	movw	r0, #24400	; 0x5f50
   151d4:	ldr	r1, [pc, #1492]	; 157b0 <__assert_fail@plt+0x2f88>
   151d8:	movt	r0, #2
   151dc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   151e0:	mov	r0, #0
   151e4:	b	15470 <__assert_fail@plt+0x2c48>
   151e8:	cmp	r6, #0
   151ec:	bne	15300 <__assert_fail@plt+0x2ad8>
   151f0:	cmp	r5, #0
   151f4:	beq	15488 <__assert_fail@plt+0x2c60>
   151f8:	ldr	r0, [sp, #68]	; 0x44
   151fc:	add	r1, sp, #28
   15200:	mov	r2, #10
   15204:	str	r6, [sp, #28]
   15208:	bl	12528 <strtoul@plt>
   1520c:	ldr	r3, [sp, #28]
   15210:	cmp	r3, #0
   15214:	mov	r8, r0
   15218:	beq	15228 <__assert_fail@plt+0x2a00>
   1521c:	ldrb	r3, [r3]
   15220:	cmp	r3, #0
   15224:	beq	1525c <__assert_fail@plt+0x2a34>
   15228:	ldr	r3, [sp, #12]
   1522c:	ldr	r1, [sp, #68]	; 0x44
   15230:	ldr	r0, [r3]
   15234:	bl	22a54 <secure_getenv@@Base+0x400>
   15238:	cmn	r0, #1
   1523c:	mov	r8, r0
   15240:	beq	154a4 <__assert_fail@plt+0x2c7c>
   15244:	movw	r0, #13072	; 0x3310
   15248:	mov	r1, r8
   1524c:	movt	r0, #4
   15250:	bl	228ec <secure_getenv@@Base+0x298>
   15254:	cmp	r0, #0
   15258:	beq	154a4 <__assert_fail@plt+0x2c7c>
   1525c:	ldr	r3, [sp, #12]
   15260:	ldr	r1, [sp, #72]	; 0x48
   15264:	ldr	r0, [r3]
   15268:	bl	22a54 <secure_getenv@@Base+0x400>
   1526c:	add	r3, sp, #36	; 0x24
   15270:	str	r3, [sp, #16]
   15274:	cmn	r0, #1
   15278:	str	r0, [sp, #36]	; 0x24
   1527c:	beq	153a8 <__assert_fail@plt+0x2b80>
   15280:	mov	r1, #4
   15284:	mov	r0, r3
   15288:	bl	22490 <__assert_fail@plt+0xfc68>
   1528c:	subs	r2, r0, #0
   15290:	beq	15390 <__assert_fail@plt+0x2b68>
   15294:	mov	r3, #4
   15298:	mov	r0, r5
   1529c:	mov	r1, r8
   152a0:	bl	209bc <__assert_fail@plt+0xe194>
   152a4:	mov	sl, #0
   152a8:	mov	r5, r0
   152ac:	strb	sl, [sp, #27]
   152b0:	b	151ac <__assert_fail@plt+0x2984>
   152b4:	cmp	r5, #0
   152b8:	beq	152d0 <__assert_fail@plt+0x2aa8>
   152bc:	mov	r1, r5
   152c0:	mov	r0, r7
   152c4:	bl	21b4c <__assert_fail@plt+0xf324>
   152c8:	cmp	r0, #0
   152cc:	beq	151d0 <__assert_fail@plt+0x29a8>
   152d0:	movw	r1, #26572	; 0x67cc
   152d4:	ldr	r0, [sp, #68]	; 0x44
   152d8:	movt	r1, #2
   152dc:	bl	1227c <strcmp@plt>
   152e0:	subs	r6, r0, #0
   152e4:	beq	15360 <__assert_fail@plt+0x2b38>
   152e8:	movw	r1, #26592	; 0x67e0
   152ec:	mov	r0, r4
   152f0:	movt	r1, #2
   152f4:	mov	r5, #0
   152f8:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   152fc:	mov	r6, #1
   15300:	mov	r3, #0
   15304:	strb	r3, [sp, #27]
   15308:	b	15178 <__assert_fail@plt+0x2950>
   1530c:	cmp	r6, #0
   15310:	bne	15300 <__assert_fail@plt+0x2ad8>
   15314:	cmp	r5, #0
   15318:	beq	15448 <__assert_fail@plt+0x2c20>
   1531c:	movw	r2, #20220	; 0x4efc
   15320:	ldr	r0, [sp, #68]	; 0x44
   15324:	movt	r2, #1
   15328:	ldr	r1, [sp, #72]	; 0x48
   1532c:	add	r3, sp, #36	; 0x24
   15330:	str	r4, [sp, #36]	; 0x24
   15334:	str	r5, [sp, #40]	; 0x28
   15338:	strb	r6, [sp, #44]	; 0x2c
   1533c:	bl	1e3e0 <__assert_fail@plt+0xbbb8>
   15340:	cmp	r0, #0
   15344:	beq	15434 <__assert_fail@plt+0x2c0c>
   15348:	cmp	r0, #1
   1534c:	bne	15418 <__assert_fail@plt+0x2bf0>
   15350:	ldrb	ip, [sp, #44]	; 0x2c
   15354:	ldr	r5, [sp, #40]	; 0x28
   15358:	eor	sl, ip, #1
   1535c:	b	152ac <__assert_fail@plt+0x2a84>
   15360:	mov	r1, r6
   15364:	bl	208dc <__assert_fail@plt+0xe0b4>
   15368:	subs	r5, r0, #0
   1536c:	bne	15300 <__assert_fail@plt+0x2ad8>
   15370:	movw	r0, #23980	; 0x5dac
   15374:	movw	r1, #24876	; 0x612c
   15378:	movt	r0, #2
   1537c:	movt	r1, #2
   15380:	ldr	r2, [pc, #1064]	; 157b0 <__assert_fail@plt+0x2f88>
   15384:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15388:	mov	r0, r5
   1538c:	b	15470 <__assert_fail@plt+0x2c48>
   15390:	movw	r0, #23980	; 0x5dac
   15394:	movw	r1, #26708	; 0x6854
   15398:	movt	r0, #2
   1539c:	movt	r1, #2
   153a0:	ldr	r2, [pc, #1036]	; 157b4 <__assert_fail@plt+0x2f8c>
   153a4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   153a8:	ldr	fp, [sp, #72]	; 0x48
   153ac:	mov	r0, fp
   153b0:	bl	12540 <strlen@plt>
   153b4:	add	r1, fp, r0
   153b8:	cmp	fp, r1
   153bc:	beq	153cc <__assert_fail@plt+0x2ba4>
   153c0:	ldrb	r3, [fp]
   153c4:	cmp	r3, #34	; 0x22
   153c8:	beq	154c4 <__assert_fail@plt+0x2c9c>
   153cc:	movw	r1, #26996	; 0x6974
   153d0:	mov	r0, fp
   153d4:	movt	r1, #2
   153d8:	bl	1227c <strcmp@plt>
   153dc:	cmp	r0, #0
   153e0:	beq	154b8 <__assert_fail@plt+0x2c90>
   153e4:	movw	r1, #26764	; 0x688c
   153e8:	mov	r0, fp
   153ec:	movt	r1, #2
   153f0:	bl	1227c <strcmp@plt>
   153f4:	cmp	r0, #0
   153f8:	bne	1552c <__assert_fail@plt+0x2d04>
   153fc:	strb	r0, [sp, #36]	; 0x24
   15400:	ldr	r0, [sp, #16]
   15404:	mov	r1, #1
   15408:	bl	22490 <__assert_fail@plt+0xfc68>
   1540c:	mov	r3, #1
   15410:	mov	r2, r0
   15414:	b	15298 <__assert_fail@plt+0x2a70>
   15418:	movw	r0, #23980	; 0x5dac
   1541c:	movw	r1, #26984	; 0x6968
   15420:	movt	r0, #2
   15424:	movt	r1, #2
   15428:	ldr	r2, [pc, #904]	; 157b8 <__assert_fail@plt+0x2f90>
   1542c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15430:	b	152ac <__assert_fail@plt+0x2a84>
   15434:	movw	r1, #26964	; 0x6954
   15438:	mov	r0, r4
   1543c:	movt	r1, #2
   15440:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   15444:	b	152ac <__assert_fail@plt+0x2a84>
   15448:	movw	r1, #26924	; 0x692c
   1544c:	mov	r0, r4
   15450:	movt	r1, #2
   15454:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   15458:	mov	r3, #1
   1545c:	strb	r3, [sp, #27]
   15460:	mov	r0, r4
   15464:	bl	23b2c <p11_dict_direct_equal@@Base+0x334>
   15468:	ldrb	r0, [sp, #27]
   1546c:	eor	r0, r0, #1
   15470:	ldr	r2, [sp, #204]	; 0xcc
   15474:	ldr	r3, [r9]
   15478:	cmp	r2, r3
   1547c:	bne	15704 <__assert_fail@plt+0x2edc>
   15480:	add	sp, sp, #212	; 0xd4
   15484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15488:	movw	r1, #26632	; 0x6808
   1548c:	mov	r0, r4
   15490:	movt	r1, #2
   15494:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   15498:	mov	r3, #1
   1549c:	strb	r3, [sp, #27]
   154a0:	b	15460 <__assert_fail@plt+0x2c38>
   154a4:	movw	r1, #26672	; 0x6830
   154a8:	mov	r0, r4
   154ac:	movt	r1, #2
   154b0:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   154b4:	b	152ac <__assert_fail@plt+0x2a84>
   154b8:	mov	r3, #1
   154bc:	strb	r3, [sp, #36]	; 0x24
   154c0:	b	15400 <__assert_fail@plt+0x2bd8>
   154c4:	ldrb	r3, [r1, #-1]
   154c8:	cmp	r3, #34	; 0x22
   154cc:	bne	153cc <__assert_fail@plt+0x2ba4>
   154d0:	ldr	r3, [sp, #16]
   154d4:	add	r0, fp, #1
   154d8:	sub	r1, r1, #1
   154dc:	movw	r2, #58476	; 0xe46c
   154e0:	movt	r2, #2
   154e4:	bl	24e0c <p11_dict_direct_equal@@Base+0x1614>
   154e8:	subs	r2, r0, #0
   154ec:	ldrne	r3, [sp, #36]	; 0x24
   154f0:	bne	15298 <__assert_fail@plt+0x2a70>
   154f4:	movw	r1, #26732	; 0x686c
   154f8:	mov	r0, r4
   154fc:	movt	r1, #2
   15500:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   15504:	ldr	fp, [sp, #72]	; 0x48
   15508:	b	153cc <__assert_fail@plt+0x2ba4>
   1550c:	movw	r0, #23980	; 0x5dac
   15510:	movw	r1, #26084	; 0x65e4
   15514:	movt	r0, #2
   15518:	movt	r1, #2
   1551c:	ldr	r2, [pc, #652]	; 157b0 <__assert_fail@plt+0x2f88>
   15520:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15524:	mov	r0, r7
   15528:	b	15470 <__assert_fail@plt+0x2c48>
   1552c:	mov	r0, fp
   15530:	ldr	r1, [sp, #16]
   15534:	mov	r2, #10
   15538:	mov	r3, #0
   1553c:	str	r3, [sp, #36]	; 0x24
   15540:	bl	12528 <strtoul@plt>
   15544:	ldr	r3, [sp, #36]	; 0x24
   15548:	cmp	r3, #0
   1554c:	str	r0, [sp, #32]
   15550:	beq	15560 <__assert_fail@plt+0x2d38>
   15554:	ldrb	r3, [r3]
   15558:	cmp	r3, #0
   1555c:	beq	155f8 <__assert_fail@plt+0x2dd0>
   15560:	mov	r1, #0
   15564:	mov	r2, #128	; 0x80
   15568:	add	r0, sp, #76	; 0x4c
   1556c:	bl	125e8 <memset@plt>
   15570:	ldr	fp, [sp, #72]	; 0x48
   15574:	mov	r0, fp
   15578:	bl	12540 <strlen@plt>
   1557c:	cmp	r0, #3
   15580:	mov	r3, r0
   15584:	str	r0, [sp, #36]	; 0x24
   15588:	bls	155c4 <__assert_fail@plt+0x2d9c>
   1558c:	mov	r0, fp
   15590:	mov	r1, #46	; 0x2e
   15594:	str	r3, [sp, #4]
   15598:	bl	12558 <strchr@plt>
   1559c:	cmp	r0, #0
   155a0:	str	r0, [sp, #20]
   155a4:	beq	155c4 <__assert_fail@plt+0x2d9c>
   155a8:	movw	r1, #26772	; 0x6894
   155ac:	mov	r0, fp
   155b0:	movt	r1, #2
   155b4:	bl	1281c <strspn@plt>
   155b8:	ldr	r3, [sp, #4]
   155bc:	cmp	r3, r0
   155c0:	beq	15628 <__assert_fail@plt+0x2e00>
   155c4:	movw	r1, #27004	; 0x697c
   155c8:	mov	r0, r4
   155cc:	movt	r1, #2
   155d0:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   155d4:	b	152ac <__assert_fail@plt+0x2a84>
   155d8:	movw	r0, #23980	; 0x5dac
   155dc:	movw	r1, #26068	; 0x65d4
   155e0:	movt	r0, #2
   155e4:	movt	r1, #2
   155e8:	ldr	r2, [pc, #448]	; 157b0 <__assert_fail@plt+0x2f88>
   155ec:	bl	22e10 <secure_getenv@@Base+0x7bc>
   155f0:	ldr	r0, [sp, #12]
   155f4:	b	15470 <__assert_fail@plt+0x2c48>
   155f8:	add	r0, sp, #32
   155fc:	mov	r1, #4
   15600:	bl	22490 <__assert_fail@plt+0xfc68>
   15604:	subs	r2, r0, #0
   15608:	bne	15294 <__assert_fail@plt+0x2a6c>
   1560c:	movw	r0, #23980	; 0x5dac
   15610:	movw	r1, #26708	; 0x6854
   15614:	movt	r0, #2
   15618:	movt	r1, #2
   1561c:	ldr	r2, [pc, #408]	; 157bc <__assert_fail@plt+0x2f94>
   15620:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15624:	b	15560 <__assert_fail@plt+0x2d38>
   15628:	movw	r1, #26784	; 0x68a0
   1562c:	mov	r0, fp
   15630:	movt	r1, #2
   15634:	bl	12228 <strstr@plt>
   15638:	ldr	r3, [sp, #4]
   1563c:	cmp	r0, #0
   15640:	bne	155c4 <__assert_fail@plt+0x2d9c>
   15644:	ldrb	r2, [fp]
   15648:	cmp	r2, #46	; 0x2e
   1564c:	beq	155c4 <__assert_fail@plt+0x2d9c>
   15650:	cmp	r2, #48	; 0x30
   15654:	beq	155c4 <__assert_fail@plt+0x2d9c>
   15658:	add	r3, fp, r3
   1565c:	ldrb	r3, [r3, #-1]
   15660:	cmp	r3, #46	; 0x2e
   15664:	beq	155c4 <__assert_fail@plt+0x2d9c>
   15668:	mov	r0, fp
   1566c:	mov	r1, #46	; 0x2e
   15670:	bl	126fc <strrchr@plt>
   15674:	ldr	r3, [sp, #20]
   15678:	cmp	r3, r0
   1567c:	beq	155c4 <__assert_fail@plt+0x2d9c>
   15680:	ldr	r3, [sp, #12]
   15684:	ldr	r0, [r3, #4]
   15688:	cmp	r0, #0
   1568c:	beq	15774 <__assert_fail@plt+0x2f4c>
   15690:	movw	r1, #26832	; 0x68d0
   15694:	add	r2, sp, #32
   15698:	movt	r1, #2
   1569c:	bl	1272c <asn1_create_element@plt>
   156a0:	cmp	r0, #0
   156a4:	bne	1575c <__assert_fail@plt+0x2f34>
   156a8:	mov	r2, fp
   156ac:	movw	r1, #58476	; 0xe46c
   156b0:	ldr	r0, [sp, #32]
   156b4:	movt	r1, #2
   156b8:	mov	r3, #1
   156bc:	bl	1242c <asn1_write_value@plt>
   156c0:	cmp	r0, #7
   156c4:	beq	15740 <__assert_fail@plt+0x2f18>
   156c8:	cmp	r0, #0
   156cc:	bne	15724 <__assert_fail@plt+0x2efc>
   156d0:	ldr	r1, [sp, #16]
   156d4:	ldr	r0, [sp, #32]
   156d8:	bl	1dadc <__assert_fail@plt+0xb2b4>
   156dc:	subs	r2, r0, #0
   156e0:	beq	15708 <__assert_fail@plt+0x2ee0>
   156e4:	ldr	r3, [sp, #36]	; 0x24
   156e8:	add	r0, sp, #32
   156ec:	str	r2, [sp, #8]
   156f0:	str	r3, [sp, #4]
   156f4:	bl	1278c <asn1_delete_structure@plt>
   156f8:	ldr	r2, [sp, #8]
   156fc:	ldr	r3, [sp, #4]
   15700:	b	15298 <__assert_fail@plt+0x2a70>
   15704:	bl	12360 <__stack_chk_fail@plt>
   15708:	movw	r0, #23980	; 0x5dac
   1570c:	movw	r1, #26708	; 0x6854
   15710:	movt	r0, #2
   15714:	movt	r1, #2
   15718:	ldr	r2, [pc, #160]	; 157c0 <__assert_fail@plt+0x2f98>
   1571c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15720:	b	155c4 <__assert_fail@plt+0x2d9c>
   15724:	movw	r0, #23980	; 0x5dac
   15728:	movw	r1, #25660	; 0x643c
   1572c:	movt	r0, #2
   15730:	movt	r1, #2
   15734:	ldr	r2, [pc, #132]	; 157c0 <__assert_fail@plt+0x2f98>
   15738:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1573c:	b	155c4 <__assert_fail@plt+0x2d9c>
   15740:	mov	r0, r4
   15744:	movw	r1, #26904	; 0x6918
   15748:	movt	r1, #2
   1574c:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   15750:	add	r0, sp, #32
   15754:	bl	1278c <asn1_delete_structure@plt>
   15758:	b	155c4 <__assert_fail@plt+0x2d9c>
   1575c:	bl	123c0 <asn1_strerror@plt>
   15760:	mov	r1, r0
   15764:	movw	r0, #26856	; 0x68e8
   15768:	movt	r0, #2
   1576c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15770:	b	155c4 <__assert_fail@plt+0x2d9c>
   15774:	ldr	r0, [pc, #72]	; 157c4 <__assert_fail@plt+0x2f9c>
   15778:	add	r1, r3, #4
   1577c:	add	r2, sp, #76	; 0x4c
   15780:	bl	12810 <asn1_array2tree@plt>
   15784:	cmp	r0, #0
   15788:	ldreq	r3, [sp, #12]
   1578c:	ldreq	r0, [r3, #4]
   15790:	beq	15690 <__assert_fail@plt+0x2e68>
   15794:	bl	123c0 <asn1_strerror@plt>
   15798:	add	r2, sp, #76	; 0x4c
   1579c:	mov	r1, r0
   157a0:	movw	r0, #26788	; 0x68a4
   157a4:	movt	r0, #2
   157a8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   157ac:	b	155c4 <__assert_fail@plt+0x2d9c>
   157b0:	andeq	r6, r2, r4, lsr #13
   157b4:			; <UNDEFINED> instruction: 0x000266b8
   157b8:	andeq	r6, r2, ip, lsl r7
   157bc:	andeq	r6, r2, r8, asr #13
   157c0:	andeq	r6, r2, r0, lsl r7
   157c4:	ldrdeq	r6, [r2], -r4
   157c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157cc:	movw	r3, #17144	; 0x42f8
   157d0:	sub	sp, sp, #204	; 0xcc
   157d4:	movt	r3, #4
   157d8:	mov	r4, r1
   157dc:	mov	r7, r2
   157e0:	str	r3, [sp, #20]
   157e4:	add	r2, sp, #44	; 0x2c
   157e8:	ldr	r3, [r3]
   157ec:	str	r0, [sp, #32]
   157f0:	mov	r0, r1
   157f4:	mov	r1, #0
   157f8:	str	r3, [sp, #196]	; 0xc4
   157fc:	bl	20c54 <__assert_fail@plt+0xe42c>
   15800:	cmp	r0, #0
   15804:	beq	1584c <__assert_fail@plt+0x3024>
   15808:	ldr	r3, [sp, #44]	; 0x2c
   1580c:	cmp	r3, #1
   15810:	bne	1584c <__assert_fail@plt+0x3024>
   15814:	mov	r0, r4
   15818:	mov	r1, #128	; 0x80
   1581c:	add	r2, sp, #48	; 0x30
   15820:	bl	20c54 <__assert_fail@plt+0xe42c>
   15824:	cmp	r0, #0
   15828:	beq	1584c <__assert_fail@plt+0x3024>
   1582c:	ldr	r3, [sp, #48]	; 0x30
   15830:	cmp	r3, #0
   15834:	bne	1584c <__assert_fail@plt+0x3024>
   15838:	mov	r0, r4
   1583c:	mov	r1, #17
   15840:	bl	20d84 <__assert_fail@plt+0xe55c>
   15844:	mov	r6, r0
   15848:	b	15850 <__assert_fail@plt+0x3028>
   1584c:	mov	r6, #0
   15850:	movw	r1, #297	; 0x129
   15854:	mov	r0, r4
   15858:	bl	20d84 <__assert_fail@plt+0xe55c>
   1585c:	mvn	r2, #0
   15860:	movw	r1, #27020	; 0x698c
   15864:	movt	r1, #2
   15868:	movw	fp, #25439	; 0x635f
   1586c:	movw	r9, #17266	; 0x4372
   15870:	movw	sl, #18276	; 0x4764
   15874:	add	r5, r4, #8
   15878:	movt	fp, #52819	; 0xce53
   1587c:	movt	r9, #52819	; 0xce53
   15880:	movt	sl, #55364	; 0xd844
   15884:	mov	r8, r0
   15888:	mov	r0, r7
   1588c:	bl	2212c <__assert_fail@plt+0xf904>
   15890:	mov	r0, r4
   15894:	movw	r1, #25440	; 0x6360
   15898:	movw	r2, #25425	; 0x6351
   1589c:	movt	r1, #52819	; 0xce53
   158a0:	movt	r2, #52819	; 0xce53
   158a4:	str	r1, [sp, #28]
   158a8:	str	r2, [sp, #24]
   158ac:	bl	20600 <__assert_fail@plt+0xddd8>
   158b0:	cmp	r0, #0
   158b4:	bne	15a04 <__assert_fail@plt+0x31dc>
   158b8:	cmp	r6, #0
   158bc:	ldr	r1, [r5, #-8]
   158c0:	beq	158d4 <__assert_fail@plt+0x30ac>
   158c4:	bics	r3, r1, #128	; 0x80
   158c8:	beq	159ec <__assert_fail@plt+0x31c4>
   158cc:	cmp	r1, #17
   158d0:	beq	159ec <__assert_fail@plt+0x31c4>
   158d4:	cmp	r8, #0
   158d8:	beq	158e8 <__assert_fail@plt+0x30c0>
   158dc:	movw	r3, #297	; 0x129
   158e0:	cmp	r1, r3
   158e4:	beq	159ec <__assert_fail@plt+0x31c4>
   158e8:	cmp	r1, #1
   158ec:	beq	159ec <__assert_fail@plt+0x31c4>
   158f0:	movw	r3, #39360	; 0x99c0
   158f4:	movt	r3, #10171	; 0x27bb
   158f8:	add	r3, r1, r3
   158fc:	cmp	r3, #1
   15900:	bls	159ec <__assert_fail@plt+0x31c4>
   15904:	ldr	r3, [r4, #8]
   15908:	cmn	r3, #1
   1590c:	beq	159ec <__assert_fail@plt+0x31c4>
   15910:	movw	r0, #13072	; 0x3310
   15914:	movt	r0, #4
   15918:	bl	22900 <secure_getenv@@Base+0x2ac>
   1591c:	subs	r1, r0, #0
   15920:	beq	15c88 <__assert_fail@plt+0x3460>
   15924:	mov	r0, r7
   15928:	mvn	r2, #0
   1592c:	bl	2212c <__assert_fail@plt+0xf904>
   15930:	mov	r0, r7
   15934:	movw	r1, #27044	; 0x69a4
   15938:	mov	r2, #2
   1593c:	movt	r1, #2
   15940:	bl	2212c <__assert_fail@plt+0xf904>
   15944:	ldr	r3, [r4, #8]
   15948:	cmn	r3, #1
   1594c:	beq	15f74 <__assert_fail@plt+0x374c>
   15950:	cmp	r3, #1
   15954:	beq	15a68 <__assert_fail@plt+0x3240>
   15958:	cmp	r3, #4
   1595c:	ldr	ip, [r5, #-8]
   15960:	bne	15b78 <__assert_fail@plt+0x3350>
   15964:	movw	r2, #358	; 0x166
   15968:	cmp	ip, r2
   1596c:	beq	15c7c <__assert_fail@plt+0x3454>
   15970:	bhi	15c60 <__assert_fail@plt+0x3438>
   15974:	cmp	ip, #128	; 0x80
   15978:	beq	15c54 <__assert_fail@plt+0x342c>
   1597c:	bls	15cb8 <__assert_fail@plt+0x3490>
   15980:	cmp	ip, #135	; 0x87
   15984:	beq	15e60 <__assert_fail@plt+0x3638>
   15988:	cmp	ip, #256	; 0x100
   1598c:	movweq	r0, #11776	; 0x2e00
   15990:	movteq	r0, #4
   15994:	bne	15cc8 <__assert_fail@plt+0x34a0>
   15998:	ldr	r2, [r5, #-4]
   1599c:	ldr	r1, [r2]
   159a0:	str	r3, [sp, #12]
   159a4:	bl	22900 <secure_getenv@@Base+0x2ac>
   159a8:	ldr	r3, [sp, #12]
   159ac:	subs	r1, r0, #0
   159b0:	beq	15b64 <__assert_fail@plt+0x333c>
   159b4:	mov	r0, r7
   159b8:	mvn	r2, #0
   159bc:	bl	2212c <__assert_fail@plt+0xf904>
   159c0:	b	159d8 <__assert_fail@plt+0x31b0>
   159c4:	movw	r1, #26764	; 0x688c
   159c8:	mov	r0, r7
   159cc:	movt	r1, #2
   159d0:	mvn	r2, #0
   159d4:	bl	2212c <__assert_fail@plt+0xf904>
   159d8:	movw	r1, #58396	; 0xe41c
   159dc:	mov	r0, r7
   159e0:	movt	r1, #2
   159e4:	mov	r2, #1
   159e8:	bl	2212c <__assert_fail@plt+0xf904>
   159ec:	add	r4, r4, #12
   159f0:	add	r5, r5, #12
   159f4:	mov	r0, r4
   159f8:	bl	20600 <__assert_fail@plt+0xddd8>
   159fc:	cmp	r0, #0
   15a00:	beq	158b8 <__assert_fail@plt+0x3090>
   15a04:	cmp	r6, #0
   15a08:	beq	15af4 <__assert_fail@plt+0x32cc>
   15a0c:	movw	r2, #25804	; 0x64cc
   15a10:	ldr	r0, [r6, #4]
   15a14:	movt	r2, #2
   15a18:	ldr	r1, [r6, #8]
   15a1c:	mov	r3, r7
   15a20:	bl	1e754 <__assert_fail@plt+0xbf2c>
   15a24:	cmp	r0, #0
   15a28:	beq	15b1c <__assert_fail@plt+0x32f4>
   15a2c:	mov	r0, r7
   15a30:	movw	r1, #58396	; 0xe41c
   15a34:	mov	r2, #1
   15a38:	movt	r1, #2
   15a3c:	bl	2212c <__assert_fail@plt+0xf904>
   15a40:	ldr	r0, [r7, #8]
   15a44:	and	r0, r0, #1
   15a48:	eor	r0, r0, #1
   15a4c:	ldr	r1, [sp, #20]
   15a50:	ldr	r2, [sp, #196]	; 0xc4
   15a54:	ldr	r3, [r1]
   15a58:	cmp	r2, r3
   15a5c:	bne	15f10 <__assert_fail@plt+0x36e8>
   15a60:	add	sp, sp, #204	; 0xcc
   15a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a68:	ldr	ip, [r5, #-8]
   15a6c:	cmp	ip, #368	; 0x170
   15a70:	beq	15aa8 <__assert_fail@plt+0x3280>
   15a74:	bls	15b34 <__assert_fail@plt+0x330c>
   15a78:	movw	r2, #770	; 0x302
   15a7c:	cmp	ip, r2
   15a80:	bhi	15bcc <__assert_fail@plt+0x33a4>
   15a84:	cmp	ip, #768	; 0x300
   15a88:	bhi	15aa8 <__assert_fail@plt+0x3280>
   15a8c:	movw	r2, #514	; 0x202
   15a90:	cmp	ip, r2
   15a94:	beq	15aa8 <__assert_fail@plt+0x3280>
   15a98:	cmp	ip, #528	; 0x210
   15a9c:	beq	15aa8 <__assert_fail@plt+0x3280>
   15aa0:	cmp	ip, #512	; 0x200
   15aa4:	bne	15be8 <__assert_fail@plt+0x33c0>
   15aa8:	ldr	r2, [r5, #-4]
   15aac:	ldrb	r2, [r2]
   15ab0:	cmp	r2, #1
   15ab4:	beq	15e3c <__assert_fail@plt+0x3614>
   15ab8:	cmp	r2, #0
   15abc:	beq	159c4 <__assert_fail@plt+0x319c>
   15ac0:	add	r1, sp, #68	; 0x44
   15ac4:	str	r1, [sp, #36]	; 0x24
   15ac8:	mov	r2, #128	; 0x80
   15acc:	mov	r1, #0
   15ad0:	ldr	r0, [sp, #36]	; 0x24
   15ad4:	str	r3, [sp, #12]
   15ad8:	str	ip, [sp, #16]
   15adc:	bl	125e8 <memset@plt>
   15ae0:	ldr	ip, [sp, #16]
   15ae4:	ldr	r3, [sp, #12]
   15ae8:	cmp	ip, #18
   15aec:	bne	15ba8 <__assert_fail@plt+0x3380>
   15af0:	b	15d94 <__assert_fail@plt+0x356c>
   15af4:	cmp	r8, #0
   15af8:	beq	15a2c <__assert_fail@plt+0x3204>
   15afc:	movw	r2, #26480	; 0x6770
   15b00:	ldr	r0, [r8, #4]
   15b04:	movt	r2, #2
   15b08:	ldr	r1, [r8, #8]
   15b0c:	mov	r3, r7
   15b10:	bl	1e754 <__assert_fail@plt+0xbf2c>
   15b14:	cmp	r0, #0
   15b18:	bne	15a2c <__assert_fail@plt+0x3204>
   15b1c:	movw	r0, #24400	; 0x5f50
   15b20:	ldr	r1, [pc, #1128]	; 15f90 <__assert_fail@plt+0x3768>
   15b24:	movt	r0, #2
   15b28:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15b2c:	mov	r0, #0
   15b30:	b	15a4c <__assert_fail@plt+0x3224>
   15b34:	cmp	ip, #268	; 0x10c
   15b38:	bhi	15d3c <__assert_fail@plt+0x3514>
   15b3c:	movw	r2, #259	; 0x103
   15b40:	cmp	ip, r2
   15b44:	bcs	15aa8 <__assert_fail@plt+0x3280>
   15b48:	cmp	ip, #1
   15b4c:	bcc	15be8 <__assert_fail@plt+0x33c0>
   15b50:	cmp	ip, #2
   15b54:	bls	15aa8 <__assert_fail@plt+0x3280>
   15b58:	cmp	ip, #134	; 0x86
   15b5c:	beq	15aa8 <__assert_fail@plt+0x3280>
   15b60:	b	15be8 <__assert_fail@plt+0x33c0>
   15b64:	ldr	r2, [r4, #8]
   15b68:	ldr	ip, [r5, #-8]
   15b6c:	cmp	r2, #4
   15b70:	beq	15cc8 <__assert_fail@plt+0x34a0>
   15b74:	mov	r3, r2
   15b78:	add	r2, sp, #68	; 0x44
   15b7c:	str	r2, [sp, #36]	; 0x24
   15b80:	mov	r1, #0
   15b84:	mov	r2, #128	; 0x80
   15b88:	ldr	r0, [sp, #36]	; 0x24
   15b8c:	str	r3, [sp, #12]
   15b90:	str	ip, [sp, #16]
   15b94:	bl	125e8 <memset@plt>
   15b98:	ldr	ip, [sp, #16]
   15b9c:	ldr	r3, [sp, #12]
   15ba0:	cmp	ip, #18
   15ba4:	beq	15d8c <__assert_fail@plt+0x3564>
   15ba8:	cmn	r3, #1
   15bac:	bne	15c10 <__assert_fail@plt+0x33e8>
   15bb0:	movw	r0, #27048	; 0x69a8
   15bb4:	movw	r1, #27092	; 0x69d4
   15bb8:	movt	r0, #2
   15bbc:	movt	r1, #2
   15bc0:	mov	r2, #146	; 0x92
   15bc4:	ldr	r3, [pc, #968]	; 15f94 <__assert_fail@plt+0x376c>
   15bc8:	bl	12828 <__assert_fail@plt>
   15bcc:	cmp	ip, r9
   15bd0:	beq	15aa8 <__assert_fail@plt+0x3280>
   15bd4:	cmp	ip, sl
   15bd8:	beq	15aa8 <__assert_fail@plt+0x3280>
   15bdc:	movw	r2, #1029	; 0x405
   15be0:	cmp	ip, r2
   15be4:	beq	15aa8 <__assert_fail@plt+0x3280>
   15be8:	add	r2, sp, #68	; 0x44
   15bec:	str	r2, [sp, #36]	; 0x24
   15bf0:	mov	r1, #0
   15bf4:	mov	r2, #128	; 0x80
   15bf8:	ldr	r0, [sp, #36]	; 0x24
   15bfc:	str	ip, [sp, #16]
   15c00:	bl	125e8 <memset@plt>
   15c04:	ldr	ip, [sp, #16]
   15c08:	cmp	ip, #18
   15c0c:	beq	15d94 <__assert_fail@plt+0x356c>
   15c10:	mov	r0, r7
   15c14:	mov	r2, #1
   15c18:	movw	r1, #27132	; 0x69fc
   15c1c:	movt	r1, #2
   15c20:	bl	2212c <__assert_fail@plt+0xf904>
   15c24:	ldmib	r4, {r0, r1}
   15c28:	mov	r3, r7
   15c2c:	movw	r2, #27136	; 0x6a00
   15c30:	add	r1, r0, r1
   15c34:	movt	r2, #2
   15c38:	bl	24fd4 <p11_dict_direct_equal@@Base+0x17dc>
   15c3c:	mov	r0, r7
   15c40:	movw	r1, #27132	; 0x69fc
   15c44:	mov	r2, #1
   15c48:	movt	r1, #2
   15c4c:	bl	2212c <__assert_fail@plt+0xf904>
   15c50:	b	159d8 <__assert_fail@plt+0x31b0>
   15c54:	movw	r0, #12400	; 0x3070
   15c58:	movt	r0, #4
   15c5c:	b	15998 <__assert_fail@plt+0x3170>
   15c60:	cmp	ip, fp
   15c64:	bhi	15e20 <__assert_fail@plt+0x35f8>
   15c68:	ldr	r1, [sp, #24]
   15c6c:	cmp	ip, r1
   15c70:	bcs	15e54 <__assert_fail@plt+0x362c>
   15c74:	cmp	ip, #1280	; 0x500
   15c78:	bne	15cc8 <__assert_fail@plt+0x34a0>
   15c7c:	movw	r0, #4120	; 0x1018
   15c80:	movt	r0, #4
   15c84:	b	15998 <__assert_fail@plt+0x3170>
   15c88:	movw	r3, #32800	; 0x8020
   15c8c:	movt	r3, #2
   15c90:	str	r3, [sp]
   15c94:	mov	r1, #16
   15c98:	ldr	ip, [r5, #-8]
   15c9c:	mov	r3, r1
   15ca0:	add	r0, sp, #52	; 0x34
   15ca4:	mov	r2, #1
   15ca8:	str	ip, [sp, #4]
   15cac:	bl	12804 <__snprintf_chk@plt>
   15cb0:	add	r1, sp, #52	; 0x34
   15cb4:	b	15924 <__assert_fail@plt+0x30fc>
   15cb8:	cmp	ip, #0
   15cbc:	movweq	r0, #12664	; 0x3178
   15cc0:	movteq	r0, #4
   15cc4:	beq	15998 <__assert_fail@plt+0x3170>
   15cc8:	movw	r2, #353	; 0x161
   15ccc:	cmp	ip, r2
   15cd0:	bhi	15d50 <__assert_fail@plt+0x3528>
   15cd4:	cmp	ip, #352	; 0x160
   15cd8:	bcs	15cfc <__assert_fail@plt+0x34d4>
   15cdc:	cmp	ip, #136	; 0x88
   15ce0:	bls	15e98 <__assert_fail@plt+0x3670>
   15ce4:	movw	r2, #289	; 0x121
   15ce8:	cmp	ip, r2
   15cec:	beq	15cfc <__assert_fail@plt+0x34d4>
   15cf0:	bhi	15eb4 <__assert_fail@plt+0x368c>
   15cf4:	cmp	ip, #256	; 0x100
   15cf8:	bne	15ac0 <__assert_fail@plt+0x3298>
   15cfc:	movw	r3, #32800	; 0x8020
   15d00:	movt	r3, #2
   15d04:	str	r3, [sp]
   15d08:	mov	r1, #16
   15d0c:	ldr	ip, [r5, #-4]
   15d10:	mov	r3, r1
   15d14:	add	r0, sp, #68	; 0x44
   15d18:	mov	r2, #1
   15d1c:	ldr	ip, [ip]
   15d20:	str	ip, [sp, #4]
   15d24:	bl	12804 <__snprintf_chk@plt>
   15d28:	mov	r0, r7
   15d2c:	add	r1, sp, #68	; 0x44
   15d30:	mvn	r2, #0
   15d34:	bl	2212c <__assert_fail@plt+0xf904>
   15d38:	b	159d8 <__assert_fail@plt+0x31b0>
   15d3c:	sub	r2, ip, #352	; 0x160
   15d40:	sub	r2, r2, #2
   15d44:	cmp	r2, #3
   15d48:	bhi	15be8 <__assert_fail@plt+0x33c0>
   15d4c:	b	15aa8 <__assert_fail@plt+0x3280>
   15d50:	movw	r2, #1028	; 0x404
   15d54:	cmp	ip, r2
   15d58:	bls	15e6c <__assert_fail@plt+0x3644>
   15d5c:	ldr	r2, [sp, #28]
   15d60:	cmp	ip, r2
   15d64:	bhi	15ec8 <__assert_fail@plt+0x36a0>
   15d68:	ldr	r1, [sp, #24]
   15d6c:	cmp	ip, r1
   15d70:	bcs	15cfc <__assert_fail@plt+0x34d4>
   15d74:	movw	r2, #1030	; 0x406
   15d78:	cmp	ip, r2
   15d7c:	beq	15cfc <__assert_fail@plt+0x34d4>
   15d80:	cmp	ip, #1280	; 0x500
   15d84:	bne	15ac0 <__assert_fail@plt+0x3298>
   15d88:	b	15cfc <__assert_fail@plt+0x34d4>
   15d8c:	cmp	r3, #0
   15d90:	beq	15c10 <__assert_fail@plt+0x33e8>
   15d94:	ldr	r2, [sp, #32]
   15d98:	ldr	r0, [r2, #4]
   15d9c:	cmp	r0, #0
   15da0:	beq	15f14 <__assert_fail@plt+0x36ec>
   15da4:	movw	r1, #26832	; 0x68d0
   15da8:	add	r2, sp, #44	; 0x2c
   15dac:	movt	r1, #2
   15db0:	bl	1272c <asn1_create_element@plt>
   15db4:	cmp	r0, #0
   15db8:	bne	15edc <__assert_fail@plt+0x36b4>
   15dbc:	add	r0, sp, #44	; 0x2c
   15dc0:	ldr	r1, [r5, #-4]
   15dc4:	ldr	r2, [r4, #8]
   15dc8:	ldr	r3, [sp, #36]	; 0x24
   15dcc:	bl	12654 <asn1_der_decoding@plt>
   15dd0:	cmp	r0, #0
   15dd4:	bne	15ef8 <__assert_fail@plt+0x36d0>
   15dd8:	movw	r1, #58476	; 0xe46c
   15ddc:	ldr	r0, [sp, #44]	; 0x2c
   15de0:	movt	r1, #2
   15de4:	add	r2, sp, #48	; 0x30
   15de8:	bl	1dc60 <__assert_fail@plt+0xb438>
   15dec:	cmp	r0, #0
   15df0:	str	r0, [sp, #36]	; 0x24
   15df4:	beq	15f54 <__assert_fail@plt+0x372c>
   15df8:	add	r0, sp, #44	; 0x2c
   15dfc:	bl	1278c <asn1_delete_structure@plt>
   15e00:	ldr	r2, [sp, #48]	; 0x30
   15e04:	mov	r0, r7
   15e08:	ldr	r1, [sp, #36]	; 0x24
   15e0c:	sub	r2, r2, #1
   15e10:	bl	2212c <__assert_fail@plt+0xf904>
   15e14:	ldr	r0, [sp, #36]	; 0x24
   15e18:	bl	122c4 <free@plt>
   15e1c:	b	159d8 <__assert_fail@plt+0x31b0>
   15e20:	movw	r2, #18177	; 0x4701
   15e24:	movt	r2, #55364	; 0xd844
   15e28:	cmp	ip, r2
   15e2c:	movweq	r0, #11680	; 0x2da0
   15e30:	movteq	r0, #4
   15e34:	beq	15998 <__assert_fail@plt+0x3170>
   15e38:	b	15cc8 <__assert_fail@plt+0x34a0>
   15e3c:	movw	r1, #26996	; 0x6974
   15e40:	mov	r0, r7
   15e44:	movt	r1, #2
   15e48:	mvn	r2, #0
   15e4c:	bl	2212c <__assert_fail@plt+0xf904>
   15e50:	b	159d8 <__assert_fail@plt+0x31b0>
   15e54:	movw	r0, #12496	; 0x30d0
   15e58:	movt	r0, #4
   15e5c:	b	15998 <__assert_fail@plt+0x3170>
   15e60:	movw	r0, #11560	; 0x2d28
   15e64:	movt	r0, #4
   15e68:	b	15998 <__assert_fail@plt+0x3170>
   15e6c:	cmp	ip, #1024	; 0x400
   15e70:	bcs	15cfc <__assert_fail@plt+0x34d4>
   15e74:	movw	r2, #513	; 0x201
   15e78:	cmp	ip, r2
   15e7c:	beq	15cfc <__assert_fail@plt+0x34d4>
   15e80:	cmp	ip, #768	; 0x300
   15e84:	beq	15cfc <__assert_fail@plt+0x34d4>
   15e88:	movw	r2, #358	; 0x166
   15e8c:	cmp	ip, r2
   15e90:	bne	15ac0 <__assert_fail@plt+0x3298>
   15e94:	b	15cfc <__assert_fail@plt+0x34d4>
   15e98:	cmp	ip, #135	; 0x87
   15e9c:	bcs	15cfc <__assert_fail@plt+0x34d4>
   15ea0:	cmp	ip, #0
   15ea4:	beq	15cfc <__assert_fail@plt+0x34d4>
   15ea8:	cmp	ip, #128	; 0x80
   15eac:	bne	15ac0 <__assert_fail@plt+0x3298>
   15eb0:	b	15cfc <__assert_fail@plt+0x34d4>
   15eb4:	sub	r2, ip, #304	; 0x130
   15eb8:	sub	r2, r2, #3
   15ebc:	cmp	r2, #1
   15ec0:	bhi	15ac0 <__assert_fail@plt+0x3298>
   15ec4:	b	15cfc <__assert_fail@plt+0x34d4>
   15ec8:	movw	r2, #18177	; 0x4701
   15ecc:	movt	r2, #55364	; 0xd844
   15ed0:	cmp	ip, r2
   15ed4:	bne	15ac0 <__assert_fail@plt+0x3298>
   15ed8:	b	15cfc <__assert_fail@plt+0x34d4>
   15edc:	bl	123c0 <asn1_strerror@plt>
   15ee0:	mov	r1, r0
   15ee4:	movw	r0, #26856	; 0x68e8
   15ee8:	movt	r0, #2
   15eec:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15ef0:	ldr	r3, [r4, #8]
   15ef4:	b	15ba8 <__assert_fail@plt+0x3380>
   15ef8:	ldr	r1, [sp, #36]	; 0x24
   15efc:	movw	r0, #27108	; 0x69e4
   15f00:	movt	r0, #2
   15f04:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   15f08:	ldr	r3, [r4, #8]
   15f0c:	b	15ba8 <__assert_fail@plt+0x3380>
   15f10:	bl	12360 <__stack_chk_fail@plt>
   15f14:	add	r1, r2, #4
   15f18:	ldr	r0, [pc, #120]	; 15f98 <__assert_fail@plt+0x3770>
   15f1c:	ldr	r2, [sp, #36]	; 0x24
   15f20:	bl	12810 <asn1_array2tree@plt>
   15f24:	cmp	r0, #0
   15f28:	ldreq	r3, [sp, #32]
   15f2c:	ldreq	r0, [r3, #4]
   15f30:	beq	15da4 <__assert_fail@plt+0x357c>
   15f34:	bl	123c0 <asn1_strerror@plt>
   15f38:	ldr	r2, [sp, #36]	; 0x24
   15f3c:	mov	r1, r0
   15f40:	movw	r0, #26788	; 0x68a4
   15f44:	movt	r0, #2
   15f48:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15f4c:	ldr	r3, [r4, #8]
   15f50:	b	15ba8 <__assert_fail@plt+0x3380>
   15f54:	movw	r0, #23980	; 0x5dac
   15f58:	movw	r1, #32288	; 0x7e20
   15f5c:	movt	r0, #2
   15f60:	movt	r1, #2
   15f64:	ldr	r2, [pc, #48]	; 15f9c <__assert_fail@plt+0x3774>
   15f68:	bl	22e10 <secure_getenv@@Base+0x7bc>
   15f6c:	ldr	r3, [r4, #8]
   15f70:	b	15ba8 <__assert_fail@plt+0x3380>
   15f74:	movw	r0, #27048	; 0x69a8
   15f78:	movw	r1, #27092	; 0x69d4
   15f7c:	movt	r0, #2
   15f80:	movt	r1, #2
   15f84:	movw	r2, #515	; 0x203
   15f88:	ldr	r3, [pc, #16]	; 15fa0 <__assert_fail@plt+0x3778>
   15f8c:	bl	12828 <__assert_fail@plt>
   15f90:	andeq	r6, r2, ip, asr r7
   15f94:	andeq	r6, r2, ip, asr #14
   15f98:	ldrdeq	r6, [r2], -r4
   15f9c:	andeq	r6, r2, r0, asr #14
   15fa0:	andeq	r6, r2, r0, lsr r7
   15fa4:	push	{r4}		; (str r4, [sp, #-4]!)
   15fa8:	subs	r1, r1, #1
   15fac:	ldrb	r4, [r0, #3]
   15fb0:	ldrb	r2, [r0, #2]
   15fb4:	ldrb	r3, [r0, #1]
   15fb8:	ldrb	ip, [r0]
   15fbc:	orr	r2, r2, r4, lsl #8
   15fc0:	orr	r3, ip, r3, lsl #8
   15fc4:	orr	r3, r3, r2, lsl #16
   15fc8:	str	r3, [r0], #4
   15fcc:	bne	15fa8 <__assert_fail@plt+0x3780>
   15fd0:	pop	{r4}		; (ldr r4, [sp], #4)
   15fd4:	bx	lr
   15fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   15fdc:	sub	sp, sp, #48	; 0x30
   15fe0:	ldr	r3, [r1]
   15fe4:	movw	ip, #42104	; 0xa478
   15fe8:	ldr	r5, [r0, #8]
   15fec:	movt	ip, #55146	; 0xd76a
   15ff0:	ldr	r4, [r0, #12]
   15ff4:	movw	r2, #46934	; 0xb756
   15ff8:	str	r3, [sp]
   15ffc:	movt	r2, #59591	; 0xe8c7
   16000:	ldr	r6, [r0, #4]
   16004:	eor	r3, r4, r5
   16008:	ldr	r7, [sp]
   1600c:	movw	fp, #50730	; 0xc62a
   16010:	ldr	r8, [r0]
   16014:	and	r3, r3, r6
   16018:	add	ip, r7, ip
   1601c:	eor	r3, r3, r4
   16020:	add	ip, ip, r8
   16024:	ldr	r9, [r1, #4]
   16028:	add	r3, ip, r3
   1602c:	ldr	ip, [r0, #4]
   16030:	eor	r6, r5, r6
   16034:	add	r2, r9, r2
   16038:	add	r3, ip, r3, ror #25
   1603c:	ldr	sl, [r1, #8]
   16040:	and	r6, r3, r6
   16044:	add	r2, r2, r4
   16048:	eor	r6, r6, r5
   1604c:	movw	r4, #28891	; 0x70db
   16050:	add	r6, r2, r6
   16054:	movt	r4, #9248	; 0x2420
   16058:	add	r4, sl, r4
   1605c:	ldr	r2, [r1, #12]
   16060:	add	r6, r3, r6, ror #20
   16064:	add	r4, r4, r5
   16068:	eor	ip, r3, ip
   1606c:	ldr	r5, [r0, #4]
   16070:	and	ip, r6, ip
   16074:	str	r2, [sp, #12]
   16078:	eor	ip, ip, r5
   1607c:	ldr	r8, [sp, #12]
   16080:	add	ip, r4, ip
   16084:	eor	r2, r6, r3
   16088:	movw	r4, #52974	; 0xceee
   1608c:	movt	r4, #49597	; 0xc1bd
   16090:	add	ip, r6, ip, ror #15
   16094:	add	r4, r8, r4
   16098:	and	r2, ip, r2
   1609c:	add	r4, r4, r5
   160a0:	eor	r2, r2, r3
   160a4:	ldr	r7, [r1, #16]
   160a8:	add	r2, r4, r2
   160ac:	movw	r5, #4015	; 0xfaf
   160b0:	eor	r4, ip, r6
   160b4:	movt	r5, #62844	; 0xf57c
   160b8:	add	r2, ip, r2, ror #10
   160bc:	add	r5, r7, r5
   160c0:	and	r4, r2, r4
   160c4:	add	r3, r5, r3
   160c8:	eor	r4, r4, r6
   160cc:	str	r9, [sp, #4]
   160d0:	add	r3, r3, r4
   160d4:	ldr	r9, [r1, #20]
   160d8:	eor	r4, r2, ip
   160dc:	movt	fp, #18311	; 0x4787
   160e0:	add	r3, r2, r3, ror #25
   160e4:	add	fp, r9, fp
   160e8:	and	r4, r3, r4
   160ec:	add	r6, fp, r6
   160f0:	eor	r4, r4, ip
   160f4:	str	sl, [sp, #8]
   160f8:	add	r6, r6, r4
   160fc:	ldr	sl, [r1, #24]
   16100:	eor	r4, r3, r2
   16104:	movw	r5, #17939	; 0x4613
   16108:	add	r6, r3, r6, ror #20
   1610c:	movt	r5, #43056	; 0xa830
   16110:	str	r7, [sp, #16]
   16114:	add	r5, sl, r5
   16118:	ldr	r7, [r1, #28]
   1611c:	and	r4, r6, r4
   16120:	eor	r4, r4, r2
   16124:	add	ip, r5, ip
   16128:	movw	r5, #38145	; 0x9501
   1612c:	movt	r5, #64838	; 0xfd46
   16130:	add	r5, r7, r5
   16134:	add	ip, ip, r4
   16138:	add	r2, r5, r2
   1613c:	ldr	r5, [r1, #32]
   16140:	add	ip, r6, ip, ror #15
   16144:	eor	r4, r6, r3
   16148:	and	r4, ip, r4
   1614c:	str	r9, [sp, #20]
   16150:	str	r5, [sp, #28]
   16154:	eor	r4, r4, r3
   16158:	ldr	r9, [sp, #28]
   1615c:	add	r2, r2, r4
   16160:	movw	r5, #39128	; 0x98d8
   16164:	movt	r5, #27008	; 0x6980
   16168:	add	r2, ip, r2, ror #10
   1616c:	eor	r8, ip, r6
   16170:	add	r5, r9, r5
   16174:	str	sl, [sp, #24]
   16178:	add	r3, r5, r3
   1617c:	and	r5, r2, r8
   16180:	eor	r5, r5, r6
   16184:	ldr	sl, [r1, #36]	; 0x24
   16188:	add	r5, r3, r5
   1618c:	ldr	r3, [r1, #40]	; 0x28
   16190:	eor	r4, r2, ip
   16194:	movw	fp, #63407	; 0xf7af
   16198:	add	r5, r2, r5, ror #25
   1619c:	movt	fp, #35652	; 0x8b44
   161a0:	add	fp, sl, fp
   161a4:	and	r4, r5, r4
   161a8:	str	r3, [sp, #36]	; 0x24
   161ac:	eor	r4, r4, ip
   161b0:	add	fp, fp, r6
   161b4:	eor	r3, r5, r2
   161b8:	add	fp, fp, r4
   161bc:	ldr	r4, [sp, #36]	; 0x24
   161c0:	ldr	r6, [r1, #44]	; 0x2c
   161c4:	add	fp, r5, fp, ror #20
   161c8:	sub	r9, r4, #41984	; 0xa400
   161cc:	sub	r9, r9, #79	; 0x4f
   161d0:	and	r3, fp, r3
   161d4:	eor	r3, r3, r2
   161d8:	add	ip, r9, ip
   161dc:	add	r9, ip, r3
   161e0:	movw	r4, #55230	; 0xd7be
   161e4:	movt	r4, #35164	; 0x895c
   161e8:	eor	r3, fp, r5
   161ec:	add	r9, fp, r9, ror #15
   161f0:	add	r4, r6, r4
   161f4:	add	r2, r4, r2
   161f8:	and	r4, r9, r3
   161fc:	eor	r4, r4, r5
   16200:	str	sl, [sp, #32]
   16204:	add	r4, r2, r4
   16208:	str	r6, [sp, #40]	; 0x28
   1620c:	ldr	ip, [r1, #48]	; 0x30
   16210:	movw	r3, #4386	; 0x1122
   16214:	ldr	r8, [r1, #52]	; 0x34
   16218:	movt	r3, #27536	; 0x6b90
   1621c:	add	r4, r9, r4, ror #10
   16220:	eor	r6, r9, fp
   16224:	add	r3, ip, r3
   16228:	eor	r2, r4, r9
   1622c:	add	r5, r3, r5
   16230:	and	r3, r4, r6
   16234:	str	r8, [sp, #44]	; 0x2c
   16238:	eor	r3, r3, fp
   1623c:	ldr	sl, [sp, #44]	; 0x2c
   16240:	add	r3, r5, r3
   16244:	movw	r8, #29075	; 0x7193
   16248:	movt	r8, #64920	; 0xfd98
   1624c:	add	r3, r4, r3, ror #25
   16250:	add	r8, sl, r8
   16254:	add	fp, r8, fp
   16258:	and	r8, r3, r2
   1625c:	eor	r8, r8, r9
   16260:	ldr	r5, [r1, #56]	; 0x38
   16264:	add	r8, fp, r8
   16268:	movw	r6, #17294	; 0x438e
   1626c:	movt	r6, #42617	; 0xa679
   16270:	eor	r2, r3, r4
   16274:	add	r8, r3, r8, ror #20
   16278:	add	r6, r5, r6
   1627c:	add	r9, r6, r9
   16280:	and	r6, r8, r2
   16284:	eor	r6, r6, r4
   16288:	ldr	r1, [r1, #60]	; 0x3c
   1628c:	add	r6, r9, r6
   16290:	movw	r2, #2081	; 0x821
   16294:	movt	r2, #18868	; 0x49b4
   16298:	eor	r9, r8, r3
   1629c:	add	r6, r8, r6, ror #15
   162a0:	add	r2, r1, r2
   162a4:	add	r4, r2, r4
   162a8:	and	r2, r6, r9
   162ac:	ldr	r9, [sp, #4]
   162b0:	eor	r2, r2, r3
   162b4:	movw	sl, #9570	; 0x2562
   162b8:	movt	sl, #63006	; 0xf61e
   162bc:	add	sl, r9, sl
   162c0:	add	r2, r4, r2
   162c4:	add	r3, sl, r3
   162c8:	ldr	sl, [sp, #24]
   162cc:	add	r2, r6, r2, ror #10
   162d0:	movw	r4, #45888	; 0xb340
   162d4:	movt	r4, #49216	; 0xc040
   162d8:	movw	fp, #23121	; 0x5a51
   162dc:	add	r4, sl, r4
   162e0:	eor	sl, r2, r6
   162e4:	and	sl, sl, r8
   162e8:	movt	fp, #9822	; 0x265e
   162ec:	eor	sl, sl, r6
   162f0:	add	r4, r4, r8
   162f4:	add	sl, r3, sl
   162f8:	ldr	r3, [sp, #40]	; 0x28
   162fc:	ldr	r9, [sp]
   16300:	movw	r8, #51114	; 0xc7aa
   16304:	add	sl, r2, sl, ror #27
   16308:	add	fp, r3, fp
   1630c:	eor	r3, sl, r2
   16310:	movt	r8, #59830	; 0xe9b6
   16314:	and	r3, r3, r6
   16318:	add	r8, r9, r8
   1631c:	eor	r3, r3, r2
   16320:	add	fp, fp, r6
   16324:	add	r3, r4, r3
   16328:	ldr	r4, [sp, #20]
   1632c:	add	r8, r8, r2
   16330:	movw	r6, #4189	; 0x105d
   16334:	add	r3, sl, r3, ror #23
   16338:	movt	r6, #54831	; 0xd62f
   1633c:	eor	r9, r3, sl
   16340:	add	r6, r4, r6
   16344:	and	r9, r9, r2
   16348:	ldr	r2, [sp, #36]	; 0x24
   1634c:	eor	r9, r9, sl
   16350:	movw	r4, #5203	; 0x1453
   16354:	add	r9, fp, r9
   16358:	movt	r4, #580	; 0x244
   1635c:	add	r4, r2, r4
   16360:	add	r6, r6, sl
   16364:	add	r9, r3, r9, ror #18
   16368:	add	r2, r4, r3
   1636c:	eor	r4, r9, r3
   16370:	movw	fp, #59009	; 0xe681
   16374:	and	r4, r4, sl
   16378:	movt	fp, #55457	; 0xd8a1
   1637c:	eor	r4, r4, r3
   16380:	add	fp, r1, fp
   16384:	add	r4, r8, r4
   16388:	add	fp, fp, r9
   1638c:	movw	sl, #64456	; 0xfbc8
   16390:	movt	sl, #59347	; 0xe7d3
   16394:	add	r4, r9, r4, ror #12
   16398:	eor	r8, r4, r9
   1639c:	and	r8, r8, r3
   163a0:	ldr	r3, [sp, #16]
   163a4:	eor	r8, r8, r9
   163a8:	add	r8, r6, r8
   163ac:	add	sl, r3, sl
   163b0:	movw	r3, #52710	; 0xcde6
   163b4:	movt	r3, #8673	; 0x21e1
   163b8:	add	r8, r4, r8, ror #27
   163bc:	add	sl, sl, r4
   163c0:	eor	r6, r8, r4
   163c4:	and	r6, r6, r9
   163c8:	ldr	r9, [sp, #32]
   163cc:	eor	r6, r6, r4
   163d0:	add	r6, r2, r6
   163d4:	add	r3, r9, r3
   163d8:	add	r9, r3, r8
   163dc:	movw	r3, #2006	; 0x7d6
   163e0:	add	r6, r8, r6, ror #23
   163e4:	movt	r3, #49975	; 0xc337
   163e8:	eor	r2, r6, r8
   163ec:	add	r3, r5, r3
   163f0:	and	r2, r2, r4
   163f4:	add	r4, r3, r6
   163f8:	eor	r2, r2, r8
   163fc:	add	r2, fp, r2
   16400:	movw	fp, #3463	; 0xd87
   16404:	movt	fp, #62677	; 0xf4d5
   16408:	add	r2, r6, r2, ror #18
   1640c:	eor	r3, r2, r6
   16410:	and	r3, r3, r8
   16414:	movw	r8, #5357	; 0x14ed
   16418:	eor	r3, r3, r6
   1641c:	movt	r8, #17754	; 0x455a
   16420:	add	r3, sl, r3
   16424:	ldr	sl, [sp, #12]
   16428:	add	r3, r2, r3, ror #12
   1642c:	add	fp, sl, fp
   16430:	eor	sl, r3, r2
   16434:	add	fp, fp, r2
   16438:	and	sl, sl, r6
   1643c:	ldr	r6, [sp, #28]
   16440:	eor	sl, sl, r2
   16444:	add	sl, r9, sl
   16448:	add	r8, r6, r8
   1644c:	add	r8, r8, r3
   16450:	movw	r6, #59653	; 0xe905
   16454:	add	sl, r3, sl, ror #27
   16458:	movt	r6, #43491	; 0xa9e3
   1645c:	eor	r9, sl, r3
   16460:	and	r9, r9, r2
   16464:	ldr	r2, [sp, #44]	; 0x2c
   16468:	eor	r9, r9, r3
   1646c:	add	r9, r4, r9
   16470:	add	r6, r2, r6
   16474:	movw	r2, #41976	; 0xa3f8
   16478:	movt	r2, #64751	; 0xfcef
   1647c:	add	r9, sl, r9, ror #23
   16480:	add	r6, r6, sl
   16484:	eor	r4, r9, sl
   16488:	and	r4, r4, r3
   1648c:	ldr	r3, [sp, #8]
   16490:	eor	r4, r4, sl
   16494:	add	r4, fp, r4
   16498:	add	r2, r3, r2
   1649c:	add	r2, r2, r9
   164a0:	movw	fp, #729	; 0x2d9
   164a4:	add	r4, r9, r4, ror #18
   164a8:	movt	fp, #26479	; 0x676f
   164ac:	eor	r3, r4, r9
   164b0:	add	fp, r7, fp
   164b4:	and	sl, r3, sl
   164b8:	add	fp, fp, r4
   164bc:	eor	sl, sl, r9
   164c0:	add	r8, r8, sl
   164c4:	movw	sl, #14658	; 0x3942
   164c8:	movt	sl, #65530	; 0xfffa
   164cc:	add	r8, r4, r8, ror #12
   164d0:	eor	r3, r8, r4
   164d4:	and	r9, r3, r9
   164d8:	movw	r3, #19594	; 0x4c8a
   164dc:	eor	r9, r9, r4
   164e0:	movt	r3, #36138	; 0x8d2a
   164e4:	add	r6, r6, r9
   164e8:	add	r3, ip, r3
   164ec:	add	r9, r3, r8
   164f0:	add	r6, r8, r6, ror #27
   164f4:	eor	r3, r6, r8
   164f8:	and	r3, r3, r4
   164fc:	ldr	r4, [sp, #20]
   16500:	eor	r3, r3, r8
   16504:	add	r3, r2, r3
   16508:	add	sl, r4, sl
   1650c:	movw	r4, #63105	; 0xf681
   16510:	movt	r4, #34673	; 0x8771
   16514:	add	r3, r6, r3, ror #23
   16518:	add	sl, sl, r6
   1651c:	eor	r2, r3, r6
   16520:	and	r2, r2, r8
   16524:	ldr	r8, [sp, #28]
   16528:	eor	r2, r2, r6
   1652c:	add	r2, fp, r2
   16530:	add	r4, r8, r4
   16534:	add	r8, r4, r3
   16538:	movw	fp, #53305	; 0xd039
   1653c:	add	r2, r3, r2, ror #18
   16540:	movt	fp, #55764	; 0xd9d4
   16544:	eor	r4, r2, r3
   16548:	and	r6, r4, r6
   1654c:	eor	r3, r6, r3
   16550:	movw	r6, #24866	; 0x6122
   16554:	add	r3, r9, r3
   16558:	ldr	r9, [sp, #40]	; 0x28
   1655c:	movt	r6, #28061	; 0x6d9d
   16560:	add	r3, r2, r3, ror #12
   16564:	add	r6, r9, r6
   16568:	eor	r4, r3, r4
   1656c:	add	r6, r6, r2
   16570:	add	r4, sl, r4
   16574:	eor	r2, r3, r2
   16578:	movw	r9, #14348	; 0x380c
   1657c:	movt	r9, #64997	; 0xfde5
   16580:	add	r4, r3, r4, ror #28
   16584:	add	r9, r5, r9
   16588:	eor	r2, r2, r4
   1658c:	add	r9, r9, r3
   16590:	add	r2, r8, r2
   16594:	eor	r3, r4, r3
   16598:	ldr	r8, [sp, #4]
   1659c:	movw	sl, #59972	; 0xea44
   165a0:	add	r2, r4, r2, ror #21
   165a4:	movt	sl, #42174	; 0xa4be
   165a8:	eor	r3, r3, r2
   165ac:	add	sl, r8, sl
   165b0:	add	r3, r6, r3
   165b4:	add	sl, sl, r4
   165b8:	eor	r4, r2, r4
   165bc:	ldr	r6, [sp, #16]
   165c0:	add	r3, r2, r3, ror #16
   165c4:	movw	r8, #53161	; 0xcfa9
   165c8:	eor	r4, r4, r3
   165cc:	movt	r8, #19422	; 0x4bde
   165d0:	add	r4, r9, r4
   165d4:	add	r8, r6, r8
   165d8:	add	r8, r8, r2
   165dc:	eor	r2, r3, r2
   165e0:	add	r4, r3, r4, ror #9
   165e4:	movw	r6, #19296	; 0x4b60
   165e8:	eor	r2, r2, r4
   165ec:	movt	r6, #63163	; 0xf6bb
   165f0:	add	r2, sl, r2
   165f4:	add	r6, r7, r6
   165f8:	add	r6, r6, r3
   165fc:	eor	r3, r4, r3
   16600:	add	r2, r4, r2, ror #28
   16604:	ldr	sl, [sp, #36]	; 0x24
   16608:	eor	r3, r3, r2
   1660c:	movw	r9, #48240	; 0xbc70
   16610:	add	r3, r8, r3
   16614:	movt	r9, #48831	; 0xbebf
   16618:	add	r9, sl, r9
   1661c:	ldr	r8, [sp, #44]	; 0x2c
   16620:	add	r3, r2, r3, ror #21
   16624:	add	r9, r9, r4
   16628:	eor	r4, r2, r4
   1662c:	movw	sl, #32454	; 0x7ec6
   16630:	eor	r4, r4, r3
   16634:	movt	sl, #10395	; 0x289b
   16638:	add	r6, r6, r4
   1663c:	add	sl, r8, sl
   16640:	add	sl, sl, r2
   16644:	eor	r2, r3, r2
   16648:	add	r6, r3, r6, ror #16
   1664c:	ldr	r4, [sp]
   16650:	eor	r2, r2, r6
   16654:	movw	r8, #10234	; 0x27fa
   16658:	add	r2, r9, r2
   1665c:	movt	r8, #60065	; 0xeaa1
   16660:	add	r8, r4, r8
   16664:	ldr	r9, [sp, #12]
   16668:	add	r2, r6, r2, ror #9
   1666c:	add	r8, r8, r3
   16670:	eor	r3, r6, r3
   16674:	movw	r4, #12421	; 0x3085
   16678:	eor	r3, r3, r2
   1667c:	movt	r4, #54511	; 0xd4ef
   16680:	add	r3, sl, r3
   16684:	add	r4, r9, r4
   16688:	add	r4, r4, r6
   1668c:	eor	r6, r2, r6
   16690:	add	r3, r2, r3, ror #28
   16694:	ldr	sl, [sp, #24]
   16698:	eor	r6, r6, r3
   1669c:	movw	r9, #7429	; 0x1d05
   166a0:	add	r8, r8, r6
   166a4:	movt	r9, #1160	; 0x488
   166a8:	add	r9, sl, r9
   166ac:	ldr	r6, [sp, #32]
   166b0:	add	r8, r3, r8, ror #21
   166b4:	add	r9, r9, r2
   166b8:	eor	r2, r3, r2
   166bc:	add	fp, r6, fp
   166c0:	eor	r2, r2, r8
   166c4:	add	fp, fp, r3
   166c8:	add	r2, r4, r2
   166cc:	eor	r3, r8, r3
   166d0:	movw	r6, #39397	; 0x99e5
   166d4:	movt	r6, #59099	; 0xe6db
   166d8:	add	r2, r8, r2, ror #16
   166dc:	add	r6, ip, r6
   166e0:	eor	r3, r3, r2
   166e4:	add	r6, r6, r8
   166e8:	add	r3, r9, r3
   166ec:	eor	r8, r2, r8
   166f0:	movw	r4, #31992	; 0x7cf8
   166f4:	movt	r4, #8098	; 0x1fa2
   166f8:	add	r3, r2, r3, ror #9
   166fc:	add	r4, r1, r4
   16700:	eor	r8, r8, r3
   16704:	add	r4, r4, r2
   16708:	add	fp, fp, r8
   1670c:	eor	r2, r3, r2
   16710:	ldr	r8, [sp, #8]
   16714:	movw	sl, #22117	; 0x5665
   16718:	add	fp, r3, fp, ror #28
   1671c:	movt	sl, #50348	; 0xc4ac
   16720:	eor	r2, r2, fp
   16724:	add	sl, r8, sl
   16728:	add	r2, r6, r2
   1672c:	add	sl, sl, r3
   16730:	eor	r3, fp, r3
   16734:	ldr	r9, [sp]
   16738:	add	r2, fp, r2, ror #21
   1673c:	movw	r8, #8772	; 0x2244
   16740:	eor	r3, r3, r2
   16744:	movt	r8, #62505	; 0xf429
   16748:	add	r3, r4, r3
   1674c:	add	r8, r9, r8
   16750:	add	r8, r8, fp
   16754:	eor	fp, r2, fp
   16758:	add	r3, r2, r3, ror #16
   1675c:	mvn	r9, r2
   16760:	eor	fp, fp, r3
   16764:	movw	r4, #9127	; 0x23a7
   16768:	add	sl, sl, fp
   1676c:	movt	r4, #43924	; 0xab94
   16770:	add	r4, r5, r4
   16774:	movw	r6, #65431	; 0xff97
   16778:	add	sl, r3, sl, ror #9
   1677c:	movt	r6, #17194	; 0x432a
   16780:	orr	r9, sl, r9
   16784:	add	r6, r7, r6
   16788:	eor	r9, r9, r3
   1678c:	mvn	r7, r3
   16790:	add	r9, r8, r9
   16794:	add	r4, r4, r3
   16798:	ldr	r3, [sp, #20]
   1679c:	add	r2, r6, r2
   167a0:	add	r9, sl, r9, ror #26
   167a4:	movw	r6, #41017	; 0xa039
   167a8:	movt	r6, #64659	; 0xfc93
   167ac:	orr	r7, r9, r7
   167b0:	add	r6, r3, r6
   167b4:	mvn	r5, sl
   167b8:	add	r6, r6, sl
   167bc:	eor	sl, r7, sl
   167c0:	add	r2, r2, sl
   167c4:	movw	fp, #22979	; 0x59c3
   167c8:	movt	fp, #25947	; 0x655b
   167cc:	mvn	r3, r9
   167d0:	add	r2, r9, r2, ror #22
   167d4:	add	fp, ip, fp
   167d8:	orr	r5, r2, r5
   167dc:	add	fp, fp, r9
   167e0:	eor	r9, r5, r9
   167e4:	ldr	r7, [sp, #12]
   167e8:	add	r4, r4, r9
   167ec:	movw	ip, #52370	; 0xcc92
   167f0:	movt	ip, #36620	; 0x8f0c
   167f4:	mvn	r8, r2
   167f8:	add	r4, r2, r4, ror #17
   167fc:	add	ip, r7, ip
   16800:	orr	r3, r4, r3
   16804:	add	ip, ip, r2
   16808:	eor	r2, r3, r2
   1680c:	ldr	r9, [sp, #36]	; 0x24
   16810:	add	r6, r6, r2
   16814:	movw	r7, #62589	; 0xf47d
   16818:	movt	r7, #65519	; 0xffef
   1681c:	movw	r5, #32335	; 0x7e4f
   16820:	add	r6, r4, r6, ror #11
   16824:	add	r7, r9, r7
   16828:	orr	r8, r6, r8
   1682c:	add	r7, r7, r4
   16830:	mvn	r9, r4
   16834:	eor	r4, r8, r4
   16838:	add	r4, fp, r4
   1683c:	ldr	r8, [sp, #28]
   16840:	movt	r5, #28584	; 0x6fa8
   16844:	mvn	r3, r6
   16848:	add	r4, r6, r4, ror #26
   1684c:	add	r5, r8, r5
   16850:	orr	r9, r4, r9
   16854:	add	r5, r5, r4
   16858:	eor	r9, r9, r6
   1685c:	mvn	r8, r4
   16860:	add	ip, ip, r9
   16864:	ldr	r2, [sp, #4]
   16868:	movw	sl, #24017	; 0x5dd1
   1686c:	movt	sl, #34180	; 0x8584
   16870:	add	ip, r4, ip, ror #22
   16874:	add	sl, r2, sl
   16878:	orr	r3, ip, r3
   1687c:	add	sl, sl, r6
   16880:	eor	r4, r3, r4
   16884:	ldr	r9, [sp, #24]
   16888:	add	r7, r7, r4
   1688c:	movw	r2, #59104	; 0xe6e0
   16890:	movt	r2, #65068	; 0xfe2c
   16894:	ldr	r3, [sp, #44]	; 0x2c
   16898:	add	r7, ip, r7, ror #17
   1689c:	add	r2, r1, r2
   168a0:	orr	r8, r7, r8
   168a4:	movw	r1, #17172	; 0x4314
   168a8:	eor	r8, r8, ip
   168ac:	movt	r1, #41729	; 0xa301
   168b0:	add	sl, sl, r8
   168b4:	add	r1, r9, r1
   168b8:	mvn	r9, ip
   168bc:	movw	fp, #4513	; 0x11a1
   168c0:	add	sl, r7, sl, ror #11
   168c4:	movt	fp, #19976	; 0x4e08
   168c8:	orr	r9, sl, r9
   168cc:	add	fp, r3, fp
   168d0:	eor	r9, r9, r7
   168d4:	mvn	r3, r7
   168d8:	add	r5, r5, r9
   168dc:	add	r2, r2, ip
   168e0:	ldr	r4, [sp, #16]
   168e4:	add	r1, r1, r7
   168e8:	add	r5, sl, r5, ror #26
   168ec:	ldr	r7, [sp, #40]	; 0x28
   168f0:	orr	r3, r5, r3
   168f4:	movw	r6, #32386	; 0x7e82
   168f8:	eor	r3, r3, sl
   168fc:	movt	r6, #63315	; 0xf753
   16900:	add	r2, r2, r3
   16904:	add	r6, r4, r6
   16908:	mvn	ip, sl
   1690c:	movw	r4, #62005	; 0xf235
   16910:	add	r2, r5, r2, ror #22
   16914:	movt	r4, #48442	; 0xbd3a
   16918:	orr	ip, r2, ip
   1691c:	add	r4, r7, r4
   16920:	add	r6, r6, r5
   16924:	mvn	r7, r5
   16928:	eor	r5, ip, r5
   1692c:	add	fp, fp, sl
   16930:	add	r5, r1, r5
   16934:	mvn	r3, r2
   16938:	ldr	r9, [sp, #8]
   1693c:	movw	r8, #53947	; 0xd2bb
   16940:	add	r5, r2, r5, ror #17
   16944:	ldr	sl, [sp, #32]
   16948:	orr	r7, r5, r7
   1694c:	movt	r8, #10967	; 0x2ad7
   16950:	eor	r7, r7, r2
   16954:	add	r8, r9, r8
   16958:	add	r7, fp, r7
   1695c:	movw	r9, #54161	; 0xd391
   16960:	movt	r9, #60294	; 0xeb86
   16964:	mvn	ip, r5
   16968:	add	r7, r5, r7, ror #11
   1696c:	add	r9, sl, r9
   16970:	orr	r3, r7, r3
   16974:	add	r4, r4, r2
   16978:	eor	r3, r3, r5
   1697c:	add	r9, r9, r7
   16980:	add	r6, r6, r3
   16984:	mvn	sl, r7
   16988:	ldr	r1, [r0]
   1698c:	add	r8, r8, r5
   16990:	add	r6, r7, r6, ror #26
   16994:	orr	ip, r6, ip
   16998:	add	r3, r6, r1
   1699c:	eor	r7, ip, r7
   169a0:	mvn	r2, r6
   169a4:	add	r4, r4, r7
   169a8:	str	r3, [r0]
   169ac:	ldr	r5, [r0, #12]
   169b0:	add	r4, r6, r4, ror #22
   169b4:	ldr	r7, [r0, #8]
   169b8:	orr	sl, r4, sl
   169bc:	add	r3, r4, r5
   169c0:	eor	r6, sl, r6
   169c4:	str	r3, [r0, #12]
   169c8:	add	r8, r8, r6
   169cc:	ldr	r6, [r0, #4]
   169d0:	add	r8, r4, r8, ror #17
   169d4:	orr	r2, r8, r2
   169d8:	add	r3, r8, r6
   169dc:	eor	r4, r2, r4
   169e0:	add	r8, r8, r7
   169e4:	add	r9, r9, r4
   169e8:	str	r8, [r0, #8]
   169ec:	add	r9, r3, r9, ror #11
   169f0:	str	r9, [r0, #4]
   169f4:	add	sp, sp, #48	; 0x30
   169f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   169fc:	bx	lr
   16a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a04:	movw	r4, #17144	; 0x42f8
   16a08:	movt	r4, #4
   16a0c:	sub	sp, sp, #164	; 0xa4
   16a10:	cmp	r1, #0
   16a14:	ldr	r3, [r4]
   16a18:	str	r4, [sp, #80]	; 0x50
   16a1c:	str	r0, [sp, #76]	; 0x4c
   16a20:	str	r3, [sp, #156]	; 0x9c
   16a24:	beq	181fc <__assert_fail@plt+0x59d4>
   16a28:	ldr	r5, [sp, #76]	; 0x4c
   16a2c:	cmp	r5, #0
   16a30:	addne	r5, sp, #92	; 0x5c
   16a34:	movne	ip, r1
   16a38:	addne	r6, ip, #64	; 0x40
   16a3c:	beq	181dc <__assert_fail@plt+0x59b4>
   16a40:	ldr	r0, [ip]
   16a44:	add	ip, ip, #16
   16a48:	ldr	r1, [ip, #-12]
   16a4c:	mov	r4, r5
   16a50:	ldr	r2, [ip, #-8]
   16a54:	add	r5, r5, #16
   16a58:	ldr	r3, [ip, #-4]
   16a5c:	cmp	ip, r6
   16a60:	stmia	r4!, {r0, r1, r2, r3}
   16a64:	bne	16a40 <__assert_fail@plt+0x4218>
   16a68:	ldr	r6, [sp, #76]	; 0x4c
   16a6c:	movw	r1, #31129	; 0x7999
   16a70:	ldr	r7, [sp, #76]	; 0x4c
   16a74:	movt	r1, #23170	; 0x5a82
   16a78:	ldr	r8, [sp, #76]	; 0x4c
   16a7c:	movw	ip, #31129	; 0x7999
   16a80:	ldr	sl, [sp, #76]	; 0x4c
   16a84:	movt	ip, #23170	; 0x5a82
   16a88:	ldr	r9, [sp, #76]	; 0x4c
   16a8c:	ldr	r6, [r6, #4]
   16a90:	ldr	r7, [r7, #8]
   16a94:	ldr	r8, [r8, #12]
   16a98:	ldr	sl, [sl, #16]
   16a9c:	ror	r0, r6, #2
   16aa0:	ldr	r9, [r9]
   16aa4:	eor	r3, r8, r7
   16aa8:	eor	r2, r0, r7
   16aac:	and	r3, r3, r6
   16ab0:	str	sl, [sp]
   16ab4:	add	r1, sl, r1
   16ab8:	ldr	sl, [sp, #92]	; 0x5c
   16abc:	add	r1, r1, r9, ror #27
   16ac0:	and	r2, r2, r9
   16ac4:	ldr	fp, [sp, #96]	; 0x60
   16ac8:	eor	r3, r3, r8
   16acc:	add	ip, r8, ip
   16ad0:	rev	sl, sl
   16ad4:	eor	r2, r2, r7
   16ad8:	add	r3, r1, r3
   16adc:	ror	r5, r9, #2
   16ae0:	add	r3, r3, sl
   16ae4:	rev	fp, fp
   16ae8:	add	r2, ip, r2
   16aec:	str	r7, [sp, #8]
   16af0:	eor	ip, r5, r0
   16af4:	add	r2, r2, fp
   16af8:	add	r2, r2, r3, ror #27
   16afc:	ror	r4, r3, #2
   16b00:	str	r9, [sp, #16]
   16b04:	and	r3, r3, ip
   16b08:	ldr	r9, [sp, #100]	; 0x64
   16b0c:	movw	r1, #31129	; 0x7999
   16b10:	ldr	ip, [sp, #8]
   16b14:	movt	r1, #23170	; 0x5a82
   16b18:	ldr	r7, [sp, #104]	; 0x68
   16b1c:	rev	r9, r9
   16b20:	add	r1, ip, r1
   16b24:	movw	ip, #31129	; 0x7999
   16b28:	rev	r7, r7
   16b2c:	movt	ip, #23170	; 0x5a82
   16b30:	str	r7, [sp, #20]
   16b34:	eor	r3, r3, r0
   16b38:	str	r6, [sp, #12]
   16b3c:	add	r1, r1, r9
   16b40:	eor	r6, r4, r5
   16b44:	add	ip, r0, ip
   16b48:	ldr	r0, [sp, #20]
   16b4c:	and	r6, r6, r2
   16b50:	add	r1, r1, r3
   16b54:	ldr	r7, [sp, #108]	; 0x6c
   16b58:	ror	r3, r2, #2
   16b5c:	add	r1, r1, r2, ror #27
   16b60:	eor	r6, r6, r5
   16b64:	add	ip, ip, r0
   16b68:	movw	r2, #31129	; 0x7999
   16b6c:	eor	r0, r3, r4
   16b70:	movt	r2, #23170	; 0x5a82
   16b74:	rev	r7, r7
   16b78:	add	ip, ip, r6
   16b7c:	add	r2, r5, r2
   16b80:	and	r0, r0, r1
   16b84:	ldr	r5, [sp, #112]	; 0x70
   16b88:	add	ip, ip, r1, ror #27
   16b8c:	eor	r0, r0, r4
   16b90:	add	r2, r2, r7
   16b94:	rev	r5, r5
   16b98:	add	r2, r2, r0
   16b9c:	str	r5, [sp, #36]	; 0x24
   16ba0:	add	r6, r2, ip, ror #27
   16ba4:	ror	r1, r1, #2
   16ba8:	ldr	r2, [sp, #36]	; 0x24
   16bac:	movw	r5, #31129	; 0x7999
   16bb0:	str	r8, [sp, #4]
   16bb4:	movt	r5, #23170	; 0x5a82
   16bb8:	str	r7, [sp, #24]
   16bbc:	eor	r7, r1, r3
   16bc0:	ldr	r8, [sp, #116]	; 0x74
   16bc4:	add	r5, r2, r5
   16bc8:	and	r7, r7, ip
   16bcc:	add	r4, r5, r4
   16bd0:	ror	ip, ip, #2
   16bd4:	eor	r2, r7, r3
   16bd8:	rev	r8, r8
   16bdc:	str	r8, [sp, #64]	; 0x40
   16be0:	eor	r7, ip, r1
   16be4:	add	r2, r4, r2
   16be8:	ldr	r4, [sp, #64]	; 0x40
   16bec:	and	r7, r7, r6
   16bf0:	ldr	r8, [sp, #120]	; 0x78
   16bf4:	movw	r0, #31129	; 0x7999
   16bf8:	movt	r0, #23170	; 0x5a82
   16bfc:	ror	r5, r6, #2
   16c00:	add	r0, r4, r0
   16c04:	eor	r4, r7, r1
   16c08:	ldr	r7, [sp, #124]	; 0x7c
   16c0c:	add	r2, r2, r6, ror #27
   16c10:	rev	r8, r8
   16c14:	add	r3, r0, r3
   16c18:	eor	r6, r5, ip
   16c1c:	movw	r0, #31129	; 0x7999
   16c20:	movt	r0, #23170	; 0x5a82
   16c24:	rev	r7, r7
   16c28:	add	r0, r8, r0
   16c2c:	str	r8, [sp, #68]	; 0x44
   16c30:	add	r4, r3, r4
   16c34:	str	r7, [sp, #28]
   16c38:	and	r6, r6, r2
   16c3c:	ldr	r3, [sp, #128]	; 0x80
   16c40:	add	r4, r4, r2, ror #27
   16c44:	add	r1, r0, r1
   16c48:	ror	r2, r2, #2
   16c4c:	eor	r6, r6, ip
   16c50:	movw	r0, #31129	; 0x7999
   16c54:	movt	r0, #23170	; 0x5a82
   16c58:	add	r6, r1, r6
   16c5c:	add	r0, r7, r0
   16c60:	eor	r1, r2, r5
   16c64:	rev	r3, r3
   16c68:	str	r3, [sp, #32]
   16c6c:	add	r6, r6, r4, ror #27
   16c70:	and	r1, r1, r4
   16c74:	add	r0, r0, ip
   16c78:	ror	r4, r4, #2
   16c7c:	ldr	ip, [sp, #32]
   16c80:	eor	r1, r1, r5
   16c84:	eor	r7, r4, r2
   16c88:	ldr	r8, [sp, #132]	; 0x84
   16c8c:	movw	r3, #31129	; 0x7999
   16c90:	movt	r3, #23170	; 0x5a82
   16c94:	and	r7, r7, r6
   16c98:	add	r3, ip, r3
   16c9c:	add	r0, r0, r1
   16ca0:	ror	ip, r6, #2
   16ca4:	add	r0, r0, r6, ror #27
   16ca8:	rev	r8, r8
   16cac:	add	r5, r3, r5
   16cb0:	eor	r1, r7, r2
   16cb4:	eor	r6, ip, r4
   16cb8:	movw	r3, #31129	; 0x7999
   16cbc:	movt	r3, #23170	; 0x5a82
   16cc0:	ldr	r7, [sp, #136]	; 0x88
   16cc4:	add	r1, r5, r1
   16cc8:	add	r3, r8, r3
   16ccc:	and	r6, r6, r0
   16cd0:	add	r1, r1, r0, ror #27
   16cd4:	add	r3, r3, r2
   16cd8:	ror	r0, r0, #2
   16cdc:	eor	r6, r6, r4
   16ce0:	rev	r7, r7
   16ce4:	eor	r2, r0, ip
   16ce8:	ldr	r5, [sp, #140]	; 0x8c
   16cec:	add	r6, r3, r6
   16cf0:	movw	r3, #31129	; 0x7999
   16cf4:	movt	r3, #23170	; 0x5a82
   16cf8:	add	r3, r7, r3
   16cfc:	and	r2, r2, r1
   16d00:	eor	r2, r2, ip
   16d04:	rev	r5, r5
   16d08:	add	r3, r3, r4
   16d0c:	str	r5, [sp, #60]	; 0x3c
   16d10:	add	r6, r6, r1, ror #27
   16d14:	add	r3, r3, r2
   16d18:	ror	r1, r1, #2
   16d1c:	ldr	r2, [sp, #60]	; 0x3c
   16d20:	str	r8, [sp, #52]	; 0x34
   16d24:	movw	r4, #31129	; 0x7999
   16d28:	eor	r8, r1, r0
   16d2c:	ldr	r5, [sp, #144]	; 0x90
   16d30:	movt	r4, #23170	; 0x5a82
   16d34:	and	r8, r8, r6
   16d38:	add	r4, r2, r4
   16d3c:	add	r3, r3, r6, ror #27
   16d40:	ror	r2, r6, #2
   16d44:	rev	r5, r5
   16d48:	add	r6, r4, ip
   16d4c:	str	r5, [sp, #40]	; 0x28
   16d50:	eor	r5, r8, r0
   16d54:	eor	r4, r2, r1
   16d58:	add	r5, r6, r5
   16d5c:	ldr	r6, [sp, #40]	; 0x28
   16d60:	movw	ip, #31129	; 0x7999
   16d64:	movt	ip, #23170	; 0x5a82
   16d68:	ldr	r8, [sp, #148]	; 0x94
   16d6c:	add	ip, r6, ip
   16d70:	and	r4, r4, r3
   16d74:	add	r5, r5, r3, ror #27
   16d78:	add	r6, ip, r0
   16d7c:	ror	r3, r3, #2
   16d80:	eor	r4, r4, r1
   16d84:	rev	r0, r8
   16d88:	str	r7, [sp, #56]	; 0x38
   16d8c:	eor	r8, r3, r2
   16d90:	eor	r7, r9, sl
   16d94:	ldr	ip, [sp, #152]	; 0x98
   16d98:	add	r6, r6, r4
   16d9c:	movw	sl, #31129	; 0x7999
   16da0:	ldr	r4, [sp, #28]
   16da4:	movt	sl, #23170	; 0x5a82
   16da8:	add	sl, r0, sl
   16dac:	and	r8, r8, r5
   16db0:	eor	r8, r8, r2
   16db4:	eor	r7, r7, r4
   16db8:	rev	ip, ip
   16dbc:	ldr	r4, [sp, #40]	; 0x28
   16dc0:	str	ip, [sp, #44]	; 0x2c
   16dc4:	add	sl, sl, r1
   16dc8:	add	sl, sl, r8
   16dcc:	ldr	r8, [sp, #44]	; 0x2c
   16dd0:	eor	r7, r7, r4
   16dd4:	movw	r4, #31129	; 0x7999
   16dd8:	str	r7, [sp, #48]	; 0x30
   16ddc:	movt	r4, #23170	; 0x5a82
   16de0:	add	r6, r6, r5, ror #27
   16de4:	add	r4, r8, r4
   16de8:	ror	r5, r5, #2
   16dec:	ldr	r8, [sp, #48]	; 0x30
   16df0:	eor	ip, r5, r3
   16df4:	add	r4, r4, r2
   16df8:	and	ip, ip, r6
   16dfc:	ldr	r7, [sp, #20]
   16e00:	eor	ip, ip, r3
   16e04:	ror	r8, r8, #31
   16e08:	str	r8, [sp, #48]	; 0x30
   16e0c:	add	r4, r4, ip
   16e10:	ldr	r8, [sp, #24]
   16e14:	add	sl, sl, r6, ror #27
   16e18:	ldr	ip, [sp, #52]	; 0x34
   16e1c:	eor	r1, r7, fp
   16e20:	eor	r2, r8, r9
   16e24:	ldr	r9, [sp, #48]	; 0x30
   16e28:	ror	fp, r6, #2
   16e2c:	eor	r2, r2, ip
   16e30:	movw	r6, #31129	; 0x7999
   16e34:	ldr	ip, [sp, #44]	; 0x2c
   16e38:	movt	r6, #23170	; 0x5a82
   16e3c:	ldr	r8, [sp, #36]	; 0x24
   16e40:	add	r6, r9, r6
   16e44:	ldr	r9, [sp, #20]
   16e48:	eor	r2, r2, ip
   16e4c:	str	r2, [sp, #20]
   16e50:	ldr	r2, [sp, #56]	; 0x38
   16e54:	add	r6, r6, r3
   16e58:	eor	r3, r8, r9
   16e5c:	ldr	ip, [sp, #64]	; 0x40
   16e60:	eor	r3, r3, r2
   16e64:	ldr	r2, [sp, #24]
   16e68:	ldr	r7, [sp, #32]
   16e6c:	add	r4, r4, sl, ror #27
   16e70:	eor	r9, ip, r2
   16e74:	ldr	ip, [sp, #48]	; 0x30
   16e78:	eor	r1, r1, r7
   16e7c:	eor	r7, fp, r5
   16e80:	eor	r3, r3, ip
   16e84:	str	r3, [sp, #24]
   16e88:	ldr	r3, [sp, #20]
   16e8c:	eor	r1, r1, r0
   16e90:	and	r7, r7, sl
   16e94:	ror	sl, sl, #2
   16e98:	eor	r7, r7, r5
   16e9c:	ror	r1, r1, #31
   16ea0:	ror	r2, r3, #31
   16ea4:	ldr	r3, [sp, #60]	; 0x3c
   16ea8:	eor	r8, sl, fp
   16eac:	add	r6, r6, r7
   16eb0:	eor	r9, r9, r3
   16eb4:	ldr	r3, [sp, #24]
   16eb8:	movw	r7, #31129	; 0x7999
   16ebc:	movt	r7, #23170	; 0x5a82
   16ec0:	add	r6, r6, r4, ror #27
   16ec4:	eor	r9, r9, r1
   16ec8:	add	r7, r1, r7
   16ecc:	str	r9, [sp, #24]
   16ed0:	and	r8, r8, r4
   16ed4:	ldr	r9, [sp, #68]	; 0x44
   16ed8:	ror	r4, r4, #2
   16edc:	ror	r3, r3, #31
   16ee0:	str	r3, [sp, #20]
   16ee4:	eor	ip, r4, sl
   16ee8:	ldr	r3, [sp, #36]	; 0x24
   16eec:	add	r7, r7, r5
   16ef0:	movw	r5, #31129	; 0x7999
   16ef4:	movt	r5, #23170	; 0x5a82
   16ef8:	add	r5, r2, r5
   16efc:	and	ip, ip, r6
   16f00:	eor	r9, r9, r3
   16f04:	ldr	r3, [sp, #40]	; 0x28
   16f08:	eor	r8, r8, fp
   16f0c:	eor	ip, ip, sl
   16f10:	add	r5, r5, fp
   16f14:	eor	r9, r9, r3
   16f18:	add	r7, r7, r8
   16f1c:	str	r9, [sp, #72]	; 0x48
   16f20:	add	r5, r5, ip
   16f24:	ldr	r9, [sp, #20]
   16f28:	ldr	ip, [sp, #24]
   16f2c:	ror	r8, r6, #2
   16f30:	add	r7, r7, r6, ror #27
   16f34:	movw	r6, #31129	; 0x7999
   16f38:	movt	r6, #23170	; 0x5a82
   16f3c:	ldr	r3, [sp, #28]
   16f40:	add	r6, r9, r6
   16f44:	ldr	r9, [sp, #64]	; 0x40
   16f48:	ror	ip, ip, #31
   16f4c:	str	ip, [sp, #24]
   16f50:	ldr	ip, [sp, #72]	; 0x48
   16f54:	eor	fp, r8, r4
   16f58:	eor	r3, r3, r9
   16f5c:	str	r3, [sp, #36]	; 0x24
   16f60:	and	fp, fp, r7
   16f64:	eor	r3, ip, r2
   16f68:	ldr	ip, [sp, #36]	; 0x24
   16f6c:	add	sl, r6, sl
   16f70:	eor	fp, fp, r4
   16f74:	movw	r6, #60321	; 0xeba1
   16f78:	eor	r9, ip, r0
   16f7c:	add	ip, sl, fp
   16f80:	ldr	sl, [sp, #24]
   16f84:	movt	r6, #28377	; 0x6ed9
   16f88:	add	r5, r5, r7, ror #27
   16f8c:	ror	r7, r7, #2
   16f90:	add	r6, sl, r6
   16f94:	ldr	sl, [sp, #20]
   16f98:	add	r6, r6, r4
   16f9c:	eor	fp, r7, r8
   16fa0:	eor	r9, r9, sl
   16fa4:	ldr	sl, [sp, #68]	; 0x44
   16fa8:	str	r9, [sp, #36]	; 0x24
   16fac:	eor	fp, fp, r5
   16fb0:	ldr	r9, [sp, #32]
   16fb4:	ror	r3, r3, #31
   16fb8:	str	r6, [sp, #68]	; 0x44
   16fbc:	movw	r4, #60321	; 0xeba1
   16fc0:	ldr	r6, [sp, #44]	; 0x2c
   16fc4:	eor	r9, r9, sl
   16fc8:	movt	r4, #28377	; 0x6ed9
   16fcc:	add	ip, ip, r5, ror #27
   16fd0:	eor	sl, r9, r6
   16fd4:	ldr	r9, [sp, #68]	; 0x44
   16fd8:	add	r4, r3, r4
   16fdc:	ror	r5, r5, #2
   16fe0:	add	r6, r9, fp
   16fe4:	ldr	r9, [sp, #36]	; 0x24
   16fe8:	add	r4, r4, r8
   16fec:	ldr	r8, [sp, #48]	; 0x30
   16ff0:	str	r4, [sp, #64]	; 0x40
   16ff4:	eor	fp, r5, r7
   16ff8:	ror	r9, r9, #31
   16ffc:	str	r9, [sp, #36]	; 0x24
   17000:	ldr	r9, [sp, #24]
   17004:	eor	fp, fp, ip
   17008:	add	r6, r6, ip, ror #27
   1700c:	movw	r4, #60321	; 0xeba1
   17010:	eor	sl, sl, r9
   17014:	ldr	r9, [sp, #28]
   17018:	str	sl, [sp, #68]	; 0x44
   1701c:	ror	ip, ip, #2
   17020:	ldr	sl, [sp, #52]	; 0x34
   17024:	movt	r4, #28377	; 0x6ed9
   17028:	eor	sl, sl, r9
   1702c:	eor	r9, sl, r8
   17030:	ldr	sl, [sp, #64]	; 0x40
   17034:	eor	r9, r9, r3
   17038:	add	fp, sl, fp
   1703c:	str	fp, [sp, #64]	; 0x40
   17040:	ldr	r8, [sp, #68]	; 0x44
   17044:	ldr	sl, [sp, #56]	; 0x38
   17048:	str	r9, [sp, #68]	; 0x44
   1704c:	ror	r8, r8, #31
   17050:	ldr	r9, [sp, #64]	; 0x40
   17054:	str	r8, [sp, #28]
   17058:	ldr	r8, [sp, #32]
   1705c:	ldr	fp, [sp, #36]	; 0x24
   17060:	eor	sl, sl, r8
   17064:	add	r8, r9, r6, ror #27
   17068:	ldr	r9, [sp, #36]	; 0x24
   1706c:	eor	sl, sl, r1
   17070:	add	r4, fp, r4
   17074:	eor	fp, ip, r5
   17078:	eor	r9, sl, r9
   1707c:	ldr	sl, [sp, #68]	; 0x44
   17080:	str	r9, [sp, #64]	; 0x40
   17084:	eor	fp, fp, r6
   17088:	ldr	r9, [sp, #60]	; 0x3c
   1708c:	add	r7, r4, r7
   17090:	ror	sl, sl, #31
   17094:	str	sl, [sp, #32]
   17098:	ldr	sl, [sp, #52]	; 0x34
   1709c:	add	r7, r7, fp
   170a0:	ldr	fp, [sp, #28]
   170a4:	ror	r6, r6, #2
   170a8:	eor	r9, r9, sl
   170ac:	movw	r4, #60321	; 0xeba1
   170b0:	ldr	sl, [sp, #64]	; 0x40
   170b4:	movt	r4, #28377	; 0x6ed9
   170b8:	add	r4, fp, r4
   170bc:	eor	fp, r6, ip
   170c0:	eor	fp, fp, r8
   170c4:	add	r5, r4, r5
   170c8:	add	r5, r5, fp
   170cc:	ror	sl, sl, #31
   170d0:	ldr	fp, [sp, #32]
   170d4:	eor	r9, r9, r2
   170d8:	str	sl, [sp, #52]	; 0x34
   170dc:	movw	r4, #60321	; 0xeba1
   170e0:	ldr	sl, [sp, #28]
   170e4:	movt	r4, #28377	; 0x6ed9
   170e8:	add	r4, fp, r4
   170ec:	add	r7, r7, r8, ror #27
   170f0:	eor	r9, r9, sl
   170f4:	ldr	sl, [sp, #56]	; 0x38
   170f8:	str	r9, [sp, #64]	; 0x40
   170fc:	add	r4, r4, ip
   17100:	ldr	r9, [sp, #40]	; 0x28
   17104:	ror	r8, r8, #2
   17108:	ldr	ip, [sp, #20]
   1710c:	eor	fp, r8, r6
   17110:	str	r4, [sp, #68]	; 0x44
   17114:	eor	r9, r9, sl
   17118:	eor	sl, r9, ip
   1711c:	ldr	r9, [sp, #68]	; 0x44
   17120:	eor	fp, fp, r7
   17124:	movw	r4, #60321	; 0xeba1
   17128:	add	ip, r9, fp
   1712c:	ldr	r9, [sp, #64]	; 0x40
   17130:	ldr	fp, [sp, #52]	; 0x34
   17134:	movt	r4, #28377	; 0x6ed9
   17138:	add	r5, r5, r7, ror #27
   1713c:	ror	r7, r7, #2
   17140:	ror	r9, r9, #31
   17144:	str	r9, [sp, #56]	; 0x38
   17148:	ldr	r9, [sp, #60]	; 0x3c
   1714c:	add	r4, fp, r4
   17150:	add	r4, r4, r6
   17154:	ldr	r6, [sp, #24]
   17158:	eor	r9, r0, r9
   1715c:	str	r9, [sp, #64]	; 0x40
   17160:	ldr	r9, [sp, #32]
   17164:	eor	fp, r7, r8
   17168:	str	r4, [sp, #68]	; 0x44
   1716c:	eor	fp, fp, r5
   17170:	eor	sl, sl, r9
   17174:	str	sl, [sp, #60]	; 0x3c
   17178:	ldr	sl, [sp, #64]	; 0x40
   1717c:	add	ip, ip, r5, ror #27
   17180:	movw	r4, #60321	; 0xeba1
   17184:	ror	r5, r5, #2
   17188:	eor	r9, sl, r6
   1718c:	ldr	sl, [sp, #68]	; 0x44
   17190:	movt	r4, #28377	; 0x6ed9
   17194:	add	r6, sl, fp
   17198:	ldr	sl, [sp, #52]	; 0x34
   1719c:	ldr	fp, [sp, #56]	; 0x38
   171a0:	add	r6, r6, ip, ror #27
   171a4:	eor	r9, r9, sl
   171a8:	str	r9, [sp, #64]	; 0x40
   171ac:	ldr	r9, [sp, #60]	; 0x3c
   171b0:	add	r4, fp, r4
   171b4:	ldr	sl, [sp, #44]	; 0x2c
   171b8:	eor	fp, r5, r7
   171bc:	eor	fp, fp, ip
   171c0:	add	r4, r4, r8
   171c4:	ror	r9, r9, #31
   171c8:	str	r9, [sp, #60]	; 0x3c
   171cc:	ldr	r9, [sp, #40]	; 0x28
   171d0:	add	r4, r4, fp
   171d4:	ldr	fp, [sp, #60]	; 0x3c
   171d8:	ror	r8, ip, #2
   171dc:	eor	sl, sl, r9
   171e0:	ldr	r9, [sp, #64]	; 0x40
   171e4:	movw	ip, #60321	; 0xeba1
   171e8:	movt	ip, #28377	; 0x6ed9
   171ec:	eor	sl, sl, r3
   171f0:	add	ip, fp, ip
   171f4:	ror	r9, r9, #31
   171f8:	str	r9, [sp, #40]	; 0x28
   171fc:	ldr	r9, [sp, #56]	; 0x38
   17200:	eor	fp, r8, r5
   17204:	eor	fp, fp, r6
   17208:	add	ip, ip, r7
   1720c:	eor	sl, sl, r9
   17210:	ldr	r9, [sp, #48]	; 0x30
   17214:	add	ip, ip, fp
   17218:	ldr	fp, [sp, #40]	; 0x28
   1721c:	ldr	r7, [sp, #36]	; 0x24
   17220:	eor	r0, r9, r0
   17224:	movw	r9, #60321	; 0xeba1
   17228:	movt	r9, #28377	; 0x6ed9
   1722c:	add	r4, r4, r6, ror #27
   17230:	add	r9, fp, r9
   17234:	ror	r6, r6, #2
   17238:	ldr	fp, [sp, #44]	; 0x2c
   1723c:	eor	r0, r0, r7
   17240:	eor	r7, r6, r8
   17244:	eor	r7, r7, r4
   17248:	ror	sl, sl, #31
   1724c:	add	r5, r9, r5
   17250:	str	sl, [sp, #64]	; 0x40
   17254:	eor	sl, r1, fp
   17258:	ldr	fp, [sp, #60]	; 0x3c
   1725c:	add	r5, r5, r7
   17260:	ldr	r7, [sp, #64]	; 0x40
   17264:	ldr	r9, [sp, #28]
   17268:	eor	r0, r0, fp
   1726c:	movw	fp, #60321	; 0xeba1
   17270:	movt	fp, #28377	; 0x6ed9
   17274:	add	ip, ip, r4, ror #27
   17278:	add	fp, r7, fp
   1727c:	ror	r4, r4, #2
   17280:	ldr	r7, [sp, #40]	; 0x28
   17284:	eor	sl, sl, r9
   17288:	eor	r9, r4, r6
   1728c:	eor	r9, r9, ip
   17290:	eor	sl, sl, r7
   17294:	ror	r0, r0, #31
   17298:	ldr	r7, [sp, #48]	; 0x30
   1729c:	str	r0, [sp, #44]	; 0x2c
   172a0:	add	r8, fp, r8
   172a4:	add	r8, r8, r9
   172a8:	ldr	r9, [sp, #44]	; 0x2c
   172ac:	eor	r0, r2, r7
   172b0:	movw	r7, #60321	; 0xeba1
   172b4:	movt	r7, #28377	; 0x6ed9
   172b8:	ldr	fp, [sp, #32]
   172bc:	add	r7, r9, r7
   172c0:	ldr	r9, [sp, #20]
   172c4:	add	r5, r5, ip, ror #27
   172c8:	ror	sl, sl, #31
   172cc:	ror	ip, ip, #2
   172d0:	str	sl, [sp, #48]	; 0x30
   172d4:	ldr	sl, [sp, #64]	; 0x40
   172d8:	eor	r0, r0, fp
   172dc:	eor	r1, r9, r1
   172e0:	eor	fp, ip, r4
   172e4:	ldr	r9, [sp, #48]	; 0x30
   172e8:	add	r8, r8, r5, ror #27
   172ec:	eor	fp, fp, r5
   172f0:	eor	r0, r0, sl
   172f4:	ror	r5, r5, #2
   172f8:	movw	sl, #60321	; 0xeba1
   172fc:	movt	sl, #28377	; 0x6ed9
   17300:	add	r6, r7, r6
   17304:	add	sl, r9, sl
   17308:	ldr	r7, [sp, #52]	; 0x34
   1730c:	eor	r9, r5, ip
   17310:	add	r6, r6, fp
   17314:	eor	r9, r9, r8
   17318:	ldr	fp, [sp, #24]
   1731c:	ror	r0, r0, #31
   17320:	add	r4, sl, r4
   17324:	str	r0, [sp, #68]	; 0x44
   17328:	eor	r1, r1, r7
   1732c:	ldr	r0, [sp, #44]	; 0x2c
   17330:	add	r4, r4, r9
   17334:	ldr	r7, [sp, #56]	; 0x38
   17338:	add	r6, r6, r8, ror #27
   1733c:	ldr	r9, [sp, #68]	; 0x44
   17340:	ror	r8, r8, #2
   17344:	eor	r2, fp, r2
   17348:	eor	r1, r1, r0
   1734c:	movw	r0, #60321	; 0xeba1
   17350:	movt	r0, #28377	; 0x6ed9
   17354:	add	r0, r9, r0
   17358:	ldr	sl, [sp, #48]	; 0x30
   1735c:	ldr	fp, [sp, #20]
   17360:	eor	r2, r2, r7
   17364:	eor	r7, r8, r5
   17368:	ror	r1, r1, #31
   1736c:	eor	r7, r7, r6
   17370:	str	r1, [sp, #72]	; 0x48
   17374:	add	ip, r0, ip
   17378:	ldr	r0, [sp, #60]	; 0x3c
   1737c:	eor	r1, r3, fp
   17380:	eor	r2, r2, sl
   17384:	add	ip, ip, r7
   17388:	ldr	r7, [sp, #72]	; 0x48
   1738c:	eor	r1, r1, r0
   17390:	movw	sl, #60321	; 0xeba1
   17394:	movt	sl, #28377	; 0x6ed9
   17398:	add	r4, r4, r6, ror #27
   1739c:	add	sl, r7, sl
   173a0:	ror	r6, r6, #2
   173a4:	ror	r2, r2, #31
   173a8:	eor	r1, r1, r9
   173ac:	str	r2, [sp, #20]
   173b0:	eor	fp, r6, r8
   173b4:	ldr	r0, [sp, #36]	; 0x24
   173b8:	add	r5, sl, r5
   173bc:	ldr	r2, [sp, #24]
   173c0:	eor	fp, fp, r4
   173c4:	ldr	sl, [sp, #20]
   173c8:	ror	r1, r1, #31
   173cc:	ldr	r7, [sp, #40]	; 0x28
   173d0:	eor	r9, r0, r2
   173d4:	str	r1, [sp, #24]
   173d8:	movw	r2, #60321	; 0xeba1
   173dc:	ldr	r1, [sp, #72]	; 0x48
   173e0:	movt	r2, #28377	; 0x6ed9
   173e4:	add	r2, sl, r2
   173e8:	eor	r9, r9, r7
   173ec:	add	r5, r5, fp
   173f0:	ldr	fp, [sp, #28]
   173f4:	add	ip, ip, r4, ror #27
   173f8:	ldr	r7, [sp, #24]
   173fc:	ror	r4, r4, #2
   17400:	eor	r9, r9, r1
   17404:	add	r8, r2, r8
   17408:	ldr	r2, [sp, #64]	; 0x40
   1740c:	eor	r0, r4, r6
   17410:	eor	r3, fp, r3
   17414:	movw	r1, #60321	; 0xeba1
   17418:	movt	r1, #28377	; 0x6ed9
   1741c:	add	r5, r5, ip, ror #27
   17420:	eor	r0, r0, ip
   17424:	add	r1, r7, r1
   17428:	ror	ip, ip, #2
   1742c:	eor	r3, r3, r2
   17430:	ror	r9, r9, #31
   17434:	str	r9, [sp, #84]	; 0x54
   17438:	eor	r7, ip, r4
   1743c:	ldr	fp, [sp, #36]	; 0x24
   17440:	eor	r3, r3, sl
   17444:	add	r6, r1, r6
   17448:	ldr	sl, [sp, #32]
   1744c:	ldr	r1, [sp, #84]	; 0x54
   17450:	eor	r7, r7, r5
   17454:	add	r8, r8, r0
   17458:	movw	r2, #60321	; 0xeba1
   1745c:	ldr	r0, [sp, #44]	; 0x2c
   17460:	movt	r2, #28377	; 0x6ed9
   17464:	add	r8, r8, r5, ror #27
   17468:	eor	r9, sl, fp
   1746c:	ror	r5, r5, #2
   17470:	ldr	fp, [sp, #28]
   17474:	add	r2, r1, r2
   17478:	add	r6, r6, r7
   1747c:	ror	r3, r3, #31
   17480:	ldr	r7, [sp, #52]	; 0x34
   17484:	str	r3, [sp, #36]	; 0x24
   17488:	eor	r9, r9, r0
   1748c:	ldr	r3, [sp, #24]
   17490:	eor	r0, r5, ip
   17494:	ldr	r1, [sp, #48]	; 0x30
   17498:	add	r4, r2, r4
   1749c:	ldr	r2, [sp, #36]	; 0x24
   174a0:	add	r6, r6, r8, ror #27
   174a4:	eor	sl, r7, fp
   174a8:	eor	r0, r0, r8
   174ac:	eor	r9, r9, r3
   174b0:	ror	r8, r8, #2
   174b4:	movw	r3, #60321	; 0xeba1
   174b8:	movt	r3, #28377	; 0x6ed9
   174bc:	add	r3, r2, r3
   174c0:	ldr	r7, [sp, #84]	; 0x54
   174c4:	eor	sl, sl, r1
   174c8:	eor	r1, r8, r5
   174cc:	eor	r1, r1, r6
   174d0:	ror	r9, r9, #31
   174d4:	add	ip, r3, ip
   174d8:	str	r9, [sp, #28]
   174dc:	ldr	fp, [sp, #56]	; 0x38
   174e0:	add	r4, r4, r0
   174e4:	eor	sl, sl, r7
   174e8:	ldr	r0, [sp, #32]
   174ec:	add	ip, ip, r1
   174f0:	ldr	r1, [sp, #28]
   174f4:	ldr	r3, [sp, #68]	; 0x44
   174f8:	movw	r2, #60321	; 0xeba1
   174fc:	movt	r2, #28377	; 0x6ed9
   17500:	add	r4, r4, r6, ror #27
   17504:	eor	r9, fp, r0
   17508:	ror	r6, r6, #2
   1750c:	add	r2, r1, r2
   17510:	ldr	r7, [sp, #36]	; 0x24
   17514:	ror	sl, sl, #31
   17518:	str	sl, [sp, #32]
   1751c:	ldr	r1, [sp, #52]	; 0x34
   17520:	eor	r0, r6, r8
   17524:	ldr	fp, [sp, #60]	; 0x3c
   17528:	eor	r9, r9, r3
   1752c:	add	r5, r2, r5
   17530:	ldr	r2, [sp, #32]
   17534:	add	ip, ip, r4, ror #27
   17538:	eor	r0, r0, r4
   1753c:	eor	r9, r9, r7
   17540:	ror	r4, r4, #2
   17544:	movw	r3, #60321	; 0xeba1
   17548:	movt	r3, #28377	; 0x6ed9
   1754c:	eor	sl, fp, r1
   17550:	add	r3, r2, r3
   17554:	eor	r1, r4, r6
   17558:	ldr	r7, [sp, #72]	; 0x48
   1755c:	eor	r1, r1, ip
   17560:	add	r5, r5, r0
   17564:	add	r8, r3, r8
   17568:	ror	r9, r9, #31
   1756c:	str	r9, [sp, #52]	; 0x34
   17570:	add	r5, r5, ip, ror #27
   17574:	ldr	r9, [sp, #28]
   17578:	ror	ip, ip, #2
   1757c:	add	r8, r8, r1
   17580:	eor	sl, sl, r7
   17584:	ldr	r1, [sp, #52]	; 0x34
   17588:	orr	r2, r5, ip
   1758c:	ldr	fp, [sp, #40]	; 0x28
   17590:	eor	sl, sl, r9
   17594:	ldr	r0, [sp, #56]	; 0x38
   17598:	movw	r7, #48348	; 0xbcdc
   1759c:	movt	r7, #36635	; 0x8f1b
   175a0:	and	r2, r2, r4
   175a4:	add	r7, r1, r7
   175a8:	and	r1, r5, ip
   175ac:	add	r3, r8, r5, ror #27
   175b0:	eor	r9, fp, r0
   175b4:	orr	r2, r2, r1
   175b8:	ror	sl, sl, #31
   175bc:	str	sl, [sp, #56]	; 0x38
   175c0:	add	r6, r7, r6
   175c4:	ldr	fp, [sp, #64]	; 0x40
   175c8:	ror	r5, r5, #2
   175cc:	ldr	r1, [sp, #60]	; 0x3c
   175d0:	movw	r0, #48348	; 0xbcdc
   175d4:	ldr	r8, [sp, #20]
   175d8:	movt	r0, #36635	; 0x8f1b
   175dc:	ldr	r7, [sp, #32]
   175e0:	eor	sl, fp, r1
   175e4:	eor	r9, r9, r8
   175e8:	ldr	fp, [sp, #56]	; 0x38
   175ec:	orr	r8, r3, r5
   175f0:	eor	r9, r9, r7
   175f4:	add	r0, fp, r0
   175f8:	ldr	r1, [sp, #24]
   175fc:	and	fp, r3, r5
   17600:	and	r8, r8, ip
   17604:	orr	r8, r8, fp
   17608:	add	r6, r6, r2
   1760c:	add	r4, r0, r4
   17610:	ldr	r2, [sp, #52]	; 0x34
   17614:	ror	r9, r9, #31
   17618:	str	r9, [sp, #60]	; 0x3c
   1761c:	add	r6, r6, r3, ror #27
   17620:	ldr	r7, [sp, #44]	; 0x2c
   17624:	ror	r3, r3, #2
   17628:	ldr	fp, [sp, #60]	; 0x3c
   1762c:	eor	sl, sl, r1
   17630:	add	r4, r4, r8
   17634:	ldr	r8, [sp, #40]	; 0x28
   17638:	eor	sl, sl, r2
   1763c:	movw	r1, #48348	; 0xbcdc
   17640:	orr	r2, r6, r3
   17644:	movt	r1, #36635	; 0x8f1b
   17648:	and	r0, r6, r3
   1764c:	eor	r9, r7, r8
   17650:	add	r1, fp, r1
   17654:	ldr	r7, [sp, #84]	; 0x54
   17658:	and	r2, r2, r5
   1765c:	orr	r2, r2, r0
   17660:	ldr	r8, [sp, #56]	; 0x38
   17664:	ror	sl, sl, #31
   17668:	add	ip, r1, ip
   1766c:	str	sl, [sp, #40]	; 0x28
   17670:	add	r4, r4, r6, ror #27
   17674:	eor	r9, r9, r7
   17678:	ror	r6, r6, #2
   1767c:	add	ip, ip, r2
   17680:	ldr	r2, [sp, #40]	; 0x28
   17684:	ldr	r0, [sp, #48]	; 0x30
   17688:	orr	fp, r4, r6
   1768c:	ldr	r1, [sp, #64]	; 0x40
   17690:	eor	r9, r9, r8
   17694:	movw	r7, #48348	; 0xbcdc
   17698:	movt	r7, #36635	; 0x8f1b
   1769c:	and	r8, r4, r6
   176a0:	add	r7, r2, r7
   176a4:	and	fp, fp, r3
   176a8:	eor	sl, r0, r1
   176ac:	orr	fp, fp, r8
   176b0:	ldr	r0, [sp, #36]	; 0x24
   176b4:	add	r5, r7, r5
   176b8:	ror	r9, r9, #31
   176bc:	str	r9, [sp, #64]	; 0x40
   176c0:	add	ip, ip, r4, ror #27
   176c4:	ldr	r8, [sp, #44]	; 0x2c
   176c8:	ror	r4, r4, #2
   176cc:	ldr	r1, [sp, #60]	; 0x3c
   176d0:	add	r5, r5, fp
   176d4:	ldr	r7, [sp, #68]	; 0x44
   176d8:	orr	r2, ip, r4
   176dc:	ldr	fp, [sp, #64]	; 0x40
   176e0:	eor	sl, sl, r0
   176e4:	movw	r9, #48348	; 0xbcdc
   176e8:	movt	r9, #36635	; 0x8f1b
   176ec:	eor	r0, r7, r8
   176f0:	add	r9, fp, r9
   176f4:	and	r8, ip, r4
   176f8:	eor	sl, sl, r1
   176fc:	and	r2, r2, r6
   17700:	ldr	r1, [sp, #28]
   17704:	orr	r2, r2, r8
   17708:	ldr	r7, [sp, #40]	; 0x28
   1770c:	ldr	r8, [sp, #72]	; 0x48
   17710:	add	r3, r9, r3
   17714:	ldr	r9, [sp, #48]	; 0x30
   17718:	ror	sl, sl, #31
   1771c:	eor	r0, r0, r1
   17720:	str	sl, [sp, #44]	; 0x2c
   17724:	add	r5, r5, ip, ror #27
   17728:	eor	sl, r8, r9
   1772c:	ror	ip, ip, #2
   17730:	add	r3, r3, r2
   17734:	ldr	r8, [sp, #32]
   17738:	eor	r0, r0, r7
   1773c:	ldr	r2, [sp, #44]	; 0x2c
   17740:	orr	fp, r5, ip
   17744:	ldr	r9, [sp, #64]	; 0x40
   17748:	movw	r1, #48348	; 0xbcdc
   1774c:	movt	r1, #36635	; 0x8f1b
   17750:	and	r7, r5, ip
   17754:	add	r1, r2, r1
   17758:	and	fp, fp, r4
   1775c:	eor	sl, sl, r8
   17760:	ror	r0, r0, #31
   17764:	str	r0, [sp, #48]	; 0x30
   17768:	add	r2, r3, r5, ror #27
   1776c:	orr	fp, fp, r7
   17770:	ror	r5, r5, #2
   17774:	add	r6, r1, r6
   17778:	eor	sl, sl, r9
   1777c:	ldr	r1, [sp, #48]	; 0x30
   17780:	add	r6, r6, fp
   17784:	orr	r9, r2, r5
   17788:	ldr	fp, [sp, #20]
   1778c:	ldr	r0, [sp, #68]	; 0x44
   17790:	movw	r8, #48348	; 0xbcdc
   17794:	movt	r8, #36635	; 0x8f1b
   17798:	add	r3, r6, r2, ror #27
   1779c:	add	r8, r1, r8
   177a0:	and	r9, r9, ip
   177a4:	and	r1, r2, r5
   177a8:	ror	sl, sl, #31
   177ac:	str	sl, [sp, #68]	; 0x44
   177b0:	eor	r7, fp, r0
   177b4:	ldr	r6, [sp, #52]	; 0x34
   177b8:	orr	r9, r9, r1
   177bc:	add	r4, r8, r4
   177c0:	ror	r2, r2, #2
   177c4:	add	r4, r4, r9
   177c8:	eor	r7, r7, r6
   177cc:	ldr	r9, [sp, #68]	; 0x44
   177d0:	orr	sl, r3, r2
   177d4:	ldr	r6, [sp, #44]	; 0x2c
   177d8:	movw	r8, #48348	; 0xbcdc
   177dc:	ldr	fp, [sp, #24]
   177e0:	movt	r8, #36635	; 0x8f1b
   177e4:	ldr	r0, [sp, #72]	; 0x48
   177e8:	add	r8, r9, r8
   177ec:	eor	r7, r7, r6
   177f0:	and	r9, sl, r5
   177f4:	ldr	sl, [sp, #56]	; 0x38
   177f8:	eor	r1, fp, r0
   177fc:	ldr	fp, [sp, #48]	; 0x30
   17800:	and	r0, r3, r2
   17804:	eor	r1, r1, sl
   17808:	ror	r7, r7, #31
   1780c:	str	r7, [sp, #72]	; 0x48
   17810:	add	r6, r4, r3, ror #27
   17814:	orr	r0, r9, r0
   17818:	ldr	r4, [sp, #84]	; 0x54
   1781c:	ldr	r9, [sp, #20]
   17820:	eor	r1, r1, fp
   17824:	ldr	sl, [sp, #72]	; 0x48
   17828:	add	ip, r8, ip
   1782c:	ldr	fp, [sp, #60]	; 0x3c
   17830:	movw	r8, #48348	; 0xbcdc
   17834:	movt	r8, #36635	; 0x8f1b
   17838:	ror	r3, r3, #2
   1783c:	add	ip, ip, r0
   17840:	eor	r7, r4, r9
   17844:	add	r8, sl, r8
   17848:	ror	r1, r1, #31
   1784c:	str	r1, [sp, #20]
   17850:	add	r4, ip, r6, ror #27
   17854:	ldr	r1, [sp, #68]	; 0x44
   17858:	and	ip, r6, r3
   1785c:	ldr	r9, [sp, #24]
   17860:	orr	r0, r6, r3
   17864:	add	r5, r8, r5
   17868:	ror	r6, r6, #2
   1786c:	ldr	r8, [sp, #36]	; 0x24
   17870:	eor	r7, r7, fp
   17874:	ldr	sl, [sp, #20]
   17878:	orr	fp, r4, r6
   1787c:	and	r0, r0, r2
   17880:	eor	r7, r7, r1
   17884:	orr	r0, r0, ip
   17888:	eor	r1, r8, r9
   1788c:	and	fp, fp, r3
   17890:	and	r9, r4, r6
   17894:	ldr	r8, [sp, #40]	; 0x28
   17898:	movw	ip, #48348	; 0xbcdc
   1789c:	movt	ip, #36635	; 0x8f1b
   178a0:	orr	fp, fp, r9
   178a4:	add	ip, sl, ip
   178a8:	ldr	r9, [sp, #72]	; 0x48
   178ac:	ror	r7, r7, #31
   178b0:	str	r7, [sp, #24]
   178b4:	add	r2, ip, r2
   178b8:	add	r0, r5, r0
   178bc:	eor	r5, r1, r8
   178c0:	ldr	r8, [sp, #24]
   178c4:	add	r0, r0, r4, ror #27
   178c8:	ldr	ip, [sp, #28]
   178cc:	ror	r4, r4, #2
   178d0:	eor	r5, r5, r9
   178d4:	add	fp, r2, fp
   178d8:	movw	r7, #48348	; 0xbcdc
   178dc:	ldr	r2, [sp, #84]	; 0x54
   178e0:	movt	r7, #36635	; 0x8f1b
   178e4:	orr	r1, r0, r4
   178e8:	ldr	r9, [sp, #64]	; 0x40
   178ec:	add	r7, r8, r7
   178f0:	add	fp, fp, r0, ror #27
   178f4:	ldr	r8, [sp, #36]	; 0x24
   178f8:	eor	sl, ip, r2
   178fc:	and	r1, r1, r6
   17900:	and	ip, r0, r4
   17904:	ror	r5, r5, #31
   17908:	ror	r0, r0, #2
   1790c:	str	r5, [sp, #84]	; 0x54
   17910:	add	r7, r7, r3
   17914:	ldr	r5, [sp, #32]
   17918:	orr	r1, r1, ip
   1791c:	ldr	r3, [sp, #20]
   17920:	orr	r2, fp, r0
   17924:	eor	sl, sl, r9
   17928:	ldr	r9, [sp, #84]	; 0x54
   1792c:	eor	sl, sl, r3
   17930:	add	r7, r7, r1
   17934:	eor	r3, r5, r8
   17938:	ldr	r1, [sp, #44]	; 0x2c
   1793c:	and	r5, fp, r0
   17940:	and	r2, r2, r4
   17944:	movw	ip, #48348	; 0xbcdc
   17948:	movt	ip, #36635	; 0x8f1b
   1794c:	add	ip, r9, ip
   17950:	orr	r2, r2, r5
   17954:	ldr	r5, [sp, #24]
   17958:	eor	r3, r3, r1
   1795c:	add	r6, ip, r6
   17960:	ror	sl, sl, #31
   17964:	str	sl, [sp, #36]	; 0x24
   17968:	add	r7, r7, fp, ror #27
   1796c:	add	ip, r6, r2
   17970:	ror	fp, fp, #2
   17974:	ldr	r2, [sp, #36]	; 0x24
   17978:	eor	r3, r3, r5
   1797c:	orr	r1, r7, fp
   17980:	ldr	r6, [sp, #52]	; 0x34
   17984:	ldr	r8, [sp, #28]
   17988:	movw	sl, #48348	; 0xbcdc
   1798c:	movt	sl, #36635	; 0x8f1b
   17990:	and	r1, r1, r0
   17994:	add	sl, r2, sl
   17998:	ror	r3, r3, #31
   1799c:	and	r2, r7, fp
   179a0:	str	r3, [sp, #28]
   179a4:	ldr	r3, [sp, #48]	; 0x30
   179a8:	eor	r9, r6, r8
   179ac:	orr	r1, r1, r2
   179b0:	ldr	r6, [sp, #84]	; 0x54
   179b4:	add	sl, sl, r4
   179b8:	add	ip, ip, r7, ror #27
   179bc:	ldr	r4, [sp, #56]	; 0x38
   179c0:	ror	r7, r7, #2
   179c4:	ldr	r5, [sp, #32]
   179c8:	eor	r9, r9, r3
   179cc:	add	sl, sl, r1
   179d0:	ldr	r1, [sp, #28]
   179d4:	orr	r3, ip, r7
   179d8:	eor	r9, r9, r6
   179dc:	movw	r2, #48348	; 0xbcdc
   179e0:	movt	r2, #36635	; 0x8f1b
   179e4:	eor	r8, r4, r5
   179e8:	add	r2, r1, r2
   179ec:	ldr	r4, [sp, #68]	; 0x44
   179f0:	and	r1, ip, r7
   179f4:	and	r3, r3, fp
   179f8:	ldr	r5, [sp, #36]	; 0x24
   179fc:	orr	r3, r3, r1
   17a00:	add	r0, r2, r0
   17a04:	ror	r9, r9, #31
   17a08:	str	r9, [sp, #32]
   17a0c:	ldr	r6, [sp, #60]	; 0x3c
   17a10:	add	r2, r0, r3
   17a14:	ldr	r1, [sp, #52]	; 0x34
   17a18:	eor	r8, r8, r4
   17a1c:	ldr	r3, [sp, #32]
   17a20:	eor	r8, r8, r5
   17a24:	ldr	r4, [sp, #72]	; 0x48
   17a28:	movw	r5, #48348	; 0xbcdc
   17a2c:	movt	r5, #36635	; 0x8f1b
   17a30:	add	sl, sl, ip, ror #27
   17a34:	eor	r9, r6, r1
   17a38:	ror	ip, ip, #2
   17a3c:	ldr	r6, [sp, #28]
   17a40:	add	r5, r3, r5
   17a44:	orr	r0, sl, ip
   17a48:	ror	r8, r8, #31
   17a4c:	eor	r9, r9, r4
   17a50:	str	r8, [sp, #52]	; 0x34
   17a54:	ldr	r4, [sp, #56]	; 0x38
   17a58:	add	r5, r5, fp
   17a5c:	ldr	fp, [sp, #40]	; 0x28
   17a60:	add	r2, r2, sl, ror #27
   17a64:	and	r3, sl, ip
   17a68:	and	r0, r0, r7
   17a6c:	ror	sl, sl, #2
   17a70:	eor	r9, r9, r6
   17a74:	ldr	r6, [sp, #52]	; 0x34
   17a78:	orr	r0, r0, r3
   17a7c:	eor	r8, fp, r4
   17a80:	orr	r3, r2, sl
   17a84:	ldr	fp, [sp, #20]
   17a88:	movw	r1, #48348	; 0xbcdc
   17a8c:	movt	r1, #36635	; 0x8f1b
   17a90:	and	r4, r2, sl
   17a94:	add	r1, r6, r1
   17a98:	add	r5, r5, r0
   17a9c:	and	r3, r3, ip
   17aa0:	ldr	r0, [sp, #32]
   17aa4:	ror	r9, r9, #31
   17aa8:	str	r9, [sp, #56]	; 0x38
   17aac:	orr	r3, r3, r4
   17ab0:	ldr	r6, [sp, #56]	; 0x38
   17ab4:	eor	r8, r8, fp
   17ab8:	add	r7, r1, r7
   17abc:	add	r5, r5, r2, ror #27
   17ac0:	ldr	r4, [sp, #60]	; 0x3c
   17ac4:	ror	r2, r2, #2
   17ac8:	add	r1, r7, r3
   17acc:	eor	r8, r8, r0
   17ad0:	ldr	r3, [sp, #64]	; 0x40
   17ad4:	movw	r9, #48348	; 0xbcdc
   17ad8:	movt	r9, #36635	; 0x8f1b
   17adc:	orr	r0, r5, r2
   17ae0:	ldr	r7, [sp, #24]
   17ae4:	add	r9, r6, r9
   17ae8:	add	r1, r1, r5, ror #27
   17aec:	eor	fp, r3, r4
   17af0:	and	r0, r0, sl
   17af4:	and	r3, r5, r2
   17af8:	ldr	r4, [sp, #40]	; 0x28
   17afc:	ror	r5, r5, #2
   17b00:	ror	r8, r8, #31
   17b04:	add	r9, r9, ip
   17b08:	str	r8, [sp, #60]	; 0x3c
   17b0c:	ldr	ip, [sp, #44]	; 0x2c
   17b10:	orr	r0, r0, r3
   17b14:	ldr	r8, [sp, #52]	; 0x34
   17b18:	orr	r6, r1, r5
   17b1c:	eor	fp, fp, r7
   17b20:	add	r9, r9, r0
   17b24:	eor	r7, ip, r4
   17b28:	and	r0, r1, r5
   17b2c:	ldr	ip, [sp, #84]	; 0x54
   17b30:	eor	fp, fp, r8
   17b34:	and	r6, r6, r2
   17b38:	ldr	r8, [sp, #60]	; 0x3c
   17b3c:	orr	r6, r6, r0
   17b40:	movw	r3, #48348	; 0xbcdc
   17b44:	ldr	r0, [sp, #56]	; 0x38
   17b48:	movt	r3, #36635	; 0x8f1b
   17b4c:	ldr	r4, [sp, #48]	; 0x30
   17b50:	add	r3, r8, r3
   17b54:	eor	r7, r7, ip
   17b58:	ldr	r8, [sp, #64]	; 0x40
   17b5c:	ror	fp, fp, #31
   17b60:	eor	r7, r7, r0
   17b64:	str	fp, [sp, #40]	; 0x28
   17b68:	add	r3, r3, sl
   17b6c:	ldr	fp, [sp, #36]	; 0x24
   17b70:	eor	sl, r4, r8
   17b74:	ldr	ip, [sp, #40]	; 0x28
   17b78:	add	r9, r9, r1, ror #27
   17b7c:	eor	sl, sl, fp
   17b80:	ror	r1, r1, #2
   17b84:	ror	r7, r7, #31
   17b88:	movw	r4, #48348	; 0xbcdc
   17b8c:	str	r7, [sp, #64]	; 0x40
   17b90:	movt	r4, #36635	; 0x8f1b
   17b94:	ldr	r7, [sp, #68]	; 0x44
   17b98:	add	r6, r3, r6
   17b9c:	ldr	fp, [sp, #44]	; 0x2c
   17ba0:	orr	r3, r9, r1
   17ba4:	add	r4, ip, r4
   17ba8:	ldr	ip, [sp, #60]	; 0x3c
   17bac:	add	r6, r6, r9, ror #27
   17bb0:	and	r0, r9, r1
   17bb4:	eor	r8, r7, fp
   17bb8:	ror	r9, r9, #2
   17bbc:	ldr	r7, [sp, #28]
   17bc0:	and	r3, r3, r5
   17bc4:	ldr	fp, [sp, #64]	; 0x40
   17bc8:	orr	r3, r3, r0
   17bcc:	eor	sl, sl, ip
   17bd0:	add	r4, r4, r2
   17bd4:	ldr	ip, [sp, #40]	; 0x28
   17bd8:	orr	r2, r6, r9
   17bdc:	movw	r0, #48348	; 0xbcdc
   17be0:	movt	r0, #36635	; 0x8f1b
   17be4:	eor	r8, r8, r7
   17be8:	add	r4, r4, r3
   17bec:	add	r0, fp, r0
   17bf0:	and	r3, r6, r9
   17bf4:	and	r2, r2, r1
   17bf8:	ldr	fp, [sp, #48]	; 0x30
   17bfc:	orr	r2, r2, r3
   17c00:	eor	r8, r8, ip
   17c04:	ror	sl, sl, #31
   17c08:	add	r0, r0, r5
   17c0c:	str	sl, [sp, #44]	; 0x2c
   17c10:	add	r0, r0, r2
   17c14:	ldr	sl, [sp, #72]	; 0x48
   17c18:	ror	r8, r8, #31
   17c1c:	ldr	ip, [sp, #32]
   17c20:	movw	r3, #49622	; 0xc1d6
   17c24:	ldr	r2, [sp, #44]	; 0x2c
   17c28:	eor	r7, sl, fp
   17c2c:	str	r8, [sp, #48]	; 0x30
   17c30:	movt	r3, #51810	; 0xca62
   17c34:	ldr	r8, [sp, #20]
   17c38:	eor	r7, r7, ip
   17c3c:	ldr	sl, [sp, #68]	; 0x44
   17c40:	add	r3, r2, r3
   17c44:	ldr	r5, [sp, #64]	; 0x40
   17c48:	add	r3, r3, r1
   17c4c:	ldr	fp, [sp, #52]	; 0x34
   17c50:	add	r4, r4, r6, ror #27
   17c54:	ldr	r1, [sp, #48]	; 0x30
   17c58:	eor	r7, r7, r5
   17c5c:	eor	r5, r8, sl
   17c60:	ldr	sl, [sp, #72]	; 0x48
   17c64:	ldr	r8, [sp, #24]
   17c68:	ror	r6, r6, #2
   17c6c:	eor	r5, r5, fp
   17c70:	movw	ip, #49622	; 0xc1d6
   17c74:	ldr	fp, [sp, #44]	; 0x2c
   17c78:	movt	ip, #51810	; 0xca62
   17c7c:	eor	r2, r6, r9
   17c80:	add	ip, r1, ip
   17c84:	ror	r7, r7, #31
   17c88:	str	r7, [sp, #68]	; 0x44
   17c8c:	eor	r7, r8, sl
   17c90:	ldr	r8, [sp, #56]	; 0x38
   17c94:	add	r0, r0, r4, ror #27
   17c98:	eor	r2, r2, r4
   17c9c:	ldr	sl, [sp, #48]	; 0x30
   17ca0:	ror	r4, r4, #2
   17ca4:	eor	r5, r5, fp
   17ca8:	add	ip, ip, r9
   17cac:	ldr	r9, [sp, #68]	; 0x44
   17cb0:	add	r3, r3, r2
   17cb4:	ldr	fp, [sp, #84]	; 0x54
   17cb8:	eor	r2, r4, r6
   17cbc:	eor	r7, r7, r8
   17cc0:	movw	r1, #49622	; 0xc1d6
   17cc4:	ldr	r8, [sp, #20]
   17cc8:	movt	r1, #51810	; 0xca62
   17ccc:	add	r3, r3, r0, ror #27
   17cd0:	eor	r2, r2, r0
   17cd4:	add	r1, r9, r1
   17cd8:	ror	r0, r0, #2
   17cdc:	ldr	r9, [sp, #60]	; 0x3c
   17ce0:	eor	r7, r7, sl
   17ce4:	ror	r5, r5, #31
   17ce8:	str	r5, [sp, #72]	; 0x48
   17cec:	ldr	sl, [sp, #72]	; 0x48
   17cf0:	eor	r5, fp, r8
   17cf4:	add	ip, ip, r2
   17cf8:	ldr	fp, [sp, #68]	; 0x44
   17cfc:	eor	r2, r0, r4
   17d00:	add	ip, ip, r3, ror #27
   17d04:	eor	r2, r2, r3
   17d08:	add	r6, r1, r6
   17d0c:	ror	r3, r3, #2
   17d10:	eor	r5, r5, r9
   17d14:	ror	r7, r7, #31
   17d18:	movw	r1, #49622	; 0xc1d6
   17d1c:	str	r7, [sp, #20]
   17d20:	movt	r1, #51810	; 0xca62
   17d24:	add	r1, sl, r1
   17d28:	add	r6, r6, r2
   17d2c:	eor	r5, r5, fp
   17d30:	eor	r2, r3, r0
   17d34:	ldr	fp, [sp, #20]
   17d38:	add	r6, r6, ip, ror #27
   17d3c:	ldr	r8, [sp, #36]	; 0x24
   17d40:	eor	r2, r2, ip
   17d44:	ldr	r9, [sp, #24]
   17d48:	ror	ip, ip, #2
   17d4c:	add	r4, r1, r4
   17d50:	movw	r1, #49622	; 0xc1d6
   17d54:	movt	r1, #51810	; 0xca62
   17d58:	add	r4, r4, r2
   17d5c:	add	r1, fp, r1
   17d60:	eor	r2, ip, r3
   17d64:	eor	r7, r8, r9
   17d68:	ldr	sl, [sp, #40]	; 0x28
   17d6c:	eor	r2, r2, r6
   17d70:	ror	r5, r5, #31
   17d74:	add	r0, r1, r0
   17d78:	str	r5, [sp, #24]
   17d7c:	ldr	r8, [sp, #28]
   17d80:	add	r0, r0, r2
   17d84:	ldr	r9, [sp, #84]	; 0x54
   17d88:	eor	r7, r7, sl
   17d8c:	ldr	fp, [sp, #64]	; 0x40
   17d90:	movw	r1, #49622	; 0xc1d6
   17d94:	ldr	r2, [sp, #24]
   17d98:	eor	r5, r8, r9
   17d9c:	ldr	sl, [sp, #72]	; 0x48
   17da0:	movt	r1, #51810	; 0xca62
   17da4:	ldr	r9, [sp, #32]
   17da8:	add	r1, r2, r1
   17dac:	eor	r5, r5, fp
   17db0:	ldr	fp, [sp, #36]	; 0x24
   17db4:	ldr	r8, [sp, #20]
   17db8:	eor	r7, r7, sl
   17dbc:	add	r3, r1, r3
   17dc0:	ldr	r1, [sp, #44]	; 0x2c
   17dc4:	eor	sl, r9, fp
   17dc8:	ldr	r9, [sp, #24]
   17dcc:	ror	r7, r7, #31
   17dd0:	eor	r5, r5, r8
   17dd4:	eor	sl, sl, r1
   17dd8:	movw	r8, #49622	; 0xc1d6
   17ddc:	movt	r8, #51810	; 0xca62
   17de0:	add	r4, r4, r6, ror #27
   17de4:	add	r8, r7, r8
   17de8:	ror	r6, r6, #2
   17dec:	ldr	fp, [sp, #52]	; 0x34
   17df0:	eor	sl, sl, r9
   17df4:	ldr	r9, [sp, #28]
   17df8:	eor	r2, r6, ip
   17dfc:	add	ip, r8, ip
   17e00:	ldr	r8, [sp, #48]	; 0x30
   17e04:	ror	r5, r5, #31
   17e08:	eor	r1, fp, r9
   17e0c:	movw	fp, #49622	; 0xc1d6
   17e10:	movt	fp, #51810	; 0xca62
   17e14:	add	r0, r0, r4, ror #27
   17e18:	eor	r2, r2, r4
   17e1c:	add	fp, r5, fp
   17e20:	ror	r4, r4, #2
   17e24:	eor	r1, r1, r8
   17e28:	ror	sl, sl, #31
   17e2c:	ldr	r8, [sp, #32]
   17e30:	eor	r1, r1, r7
   17e34:	str	sl, [sp, #36]	; 0x24
   17e38:	add	r3, r3, r2
   17e3c:	ldr	sl, [sp, #56]	; 0x38
   17e40:	eor	r2, r4, r6
   17e44:	str	r1, [sp, #28]
   17e48:	add	r6, fp, r6
   17e4c:	ldr	r1, [sp, #36]	; 0x24
   17e50:	add	r3, r3, r0, ror #27
   17e54:	ldr	fp, [sp, #68]	; 0x44
   17e58:	eor	r2, r2, r0
   17e5c:	eor	r9, sl, r8
   17e60:	ror	r0, r0, #2
   17e64:	movw	sl, #49622	; 0xc1d6
   17e68:	movt	sl, #51810	; 0xca62
   17e6c:	add	sl, r1, sl
   17e70:	add	ip, ip, r2
   17e74:	ldr	r1, [sp, #52]	; 0x34
   17e78:	eor	r2, r0, r4
   17e7c:	eor	r9, r9, fp
   17e80:	ldr	fp, [sp, #60]	; 0x3c
   17e84:	add	ip, ip, r3, ror #27
   17e88:	eor	r2, r2, r3
   17e8c:	ror	r3, r3, #2
   17e90:	eor	r8, fp, r1
   17e94:	add	r6, r6, r2
   17e98:	ldr	fp, [sp, #28]
   17e9c:	eor	r2, r3, r0
   17ea0:	add	r4, sl, r4
   17ea4:	eor	r2, r2, ip
   17ea8:	ldr	sl, [sp, #72]	; 0x48
   17eac:	add	r4, r4, r2
   17eb0:	ldr	r2, [sp, #36]	; 0x24
   17eb4:	ror	r1, fp, #31
   17eb8:	add	r6, r6, ip, ror #27
   17ebc:	eor	r9, r9, r5
   17ec0:	ror	ip, ip, #2
   17ec4:	eor	r8, r8, sl
   17ec8:	movw	fp, #49622	; 0xc1d6
   17ecc:	movt	fp, #51810	; 0xca62
   17ed0:	eor	sl, ip, r3
   17ed4:	add	fp, r1, fp
   17ed8:	eor	r8, r8, r2
   17edc:	ldr	r2, [sp, #56]	; 0x38
   17ee0:	eor	sl, sl, r6
   17ee4:	str	r8, [sp, #32]
   17ee8:	ror	r9, r9, #31
   17eec:	ldr	r8, [sp, #40]	; 0x28
   17ef0:	add	r0, fp, r0
   17ef4:	str	r9, [sp, #28]
   17ef8:	add	r0, r0, sl
   17efc:	ldr	fp, [sp, #32]
   17f00:	eor	r9, r8, r2
   17f04:	ldr	sl, [sp, #28]
   17f08:	add	r4, r4, r6, ror #27
   17f0c:	ldr	r8, [sp, #20]
   17f10:	ror	r6, r6, #2
   17f14:	movw	r2, #49622	; 0xc1d6
   17f18:	movt	r2, #51810	; 0xca62
   17f1c:	add	r2, sl, r2
   17f20:	eor	r9, r9, r8
   17f24:	eor	sl, r6, ip
   17f28:	ror	fp, fp, #31
   17f2c:	ldr	r8, [sp, #64]	; 0x40
   17f30:	eor	r9, r9, r1
   17f34:	str	fp, [sp, #32]
   17f38:	eor	sl, sl, r4
   17f3c:	ldr	fp, [sp, #60]	; 0x3c
   17f40:	add	r3, r2, r3
   17f44:	str	r9, [sp, #56]	; 0x38
   17f48:	add	r3, r3, sl
   17f4c:	ldr	r9, [sp, #24]
   17f50:	eor	r8, r8, fp
   17f54:	ldr	sl, [sp, #32]
   17f58:	add	r0, r0, r4, ror #27
   17f5c:	ldr	fp, [sp, #28]
   17f60:	ror	r4, r4, #2
   17f64:	eor	r8, r8, r9
   17f68:	movw	r2, #49622	; 0xc1d6
   17f6c:	movt	r2, #51810	; 0xca62
   17f70:	eor	r8, r8, fp
   17f74:	add	r2, sl, r2
   17f78:	str	r8, [sp, #52]	; 0x34
   17f7c:	eor	sl, r4, r6
   17f80:	ldr	r8, [sp, #56]	; 0x38
   17f84:	eor	sl, sl, r0
   17f88:	add	ip, r2, ip
   17f8c:	add	ip, ip, sl
   17f90:	ldr	sl, [sp, #52]	; 0x34
   17f94:	ror	r9, r8, #31
   17f98:	ldr	fp, [sp, #44]	; 0x2c
   17f9c:	ldr	r8, [sp, #40]	; 0x28
   17fa0:	add	r3, r3, r0, ror #27
   17fa4:	movw	r2, #49622	; 0xc1d6
   17fa8:	ror	r0, r0, #2
   17fac:	eor	fp, fp, r8
   17fb0:	ror	r8, sl, #31
   17fb4:	ldr	sl, [sp, #32]
   17fb8:	eor	r7, fp, r7
   17fbc:	movt	r2, #51810	; 0xca62
   17fc0:	eor	fp, r0, r4
   17fc4:	eor	r7, r7, sl
   17fc8:	ldr	sl, [sp, #64]	; 0x40
   17fcc:	str	r7, [sp, #40]	; 0x28
   17fd0:	add	r2, r9, r2
   17fd4:	ldr	r7, [sp, #48]	; 0x30
   17fd8:	add	ip, ip, r3, ror #27
   17fdc:	eor	fp, fp, r3
   17fe0:	add	r2, r2, r6
   17fe4:	eor	r7, r7, sl
   17fe8:	ldr	sl, [sp, #44]	; 0x2c
   17fec:	eor	r5, r7, r5
   17ff0:	ldr	r7, [sp, #68]	; 0x44
   17ff4:	ror	r6, r3, #2
   17ff8:	movw	r3, #49622	; 0xc1d6
   17ffc:	eor	r7, r7, sl
   18000:	movt	r3, #51810	; 0xca62
   18004:	ldr	sl, [sp, #40]	; 0x28
   18008:	add	r3, r8, r3
   1800c:	str	r7, [sp, #44]	; 0x2c
   18010:	eor	r5, r5, r9
   18014:	add	r2, r2, fp
   18018:	str	r5, [sp, #40]	; 0x28
   1801c:	eor	fp, r6, r0
   18020:	ldr	r5, [sp, #36]	; 0x24
   18024:	add	r3, r3, r4
   18028:	ldr	r4, [sp, #44]	; 0x2c
   1802c:	ror	r7, sl, #31
   18030:	add	r2, r2, ip, ror #27
   18034:	eor	fp, fp, ip
   18038:	movw	r9, #49622	; 0xc1d6
   1803c:	ror	ip, ip, #2
   18040:	movt	r9, #51810	; 0xca62
   18044:	eor	sl, r4, r5
   18048:	add	r9, r7, r9
   1804c:	eor	r4, ip, r6
   18050:	eor	sl, sl, r8
   18054:	eor	r4, r4, r2
   18058:	str	sl, [sp, #36]	; 0x24
   1805c:	ldr	r8, [sp, #40]	; 0x28
   18060:	add	r0, r9, r0
   18064:	ldr	sl, [sp, #72]	; 0x48
   18068:	add	r3, r3, fp
   1806c:	add	r0, r0, r4
   18070:	ldr	fp, [sp, #48]	; 0x30
   18074:	ldr	r4, [sp, #36]	; 0x24
   18078:	ror	r5, r8, #31
   1807c:	eor	r8, sl, fp
   18080:	add	r3, r3, r2, ror #27
   18084:	eor	r1, r8, r1
   18088:	ldr	r8, [sp, #20]
   1808c:	ror	sl, r4, #31
   18090:	ldr	r4, [sp, #68]	; 0x44
   18094:	ror	r2, r2, #2
   18098:	eor	r1, r1, r7
   1809c:	eor	r9, r2, ip
   180a0:	eor	r7, r8, r4
   180a4:	movw	fp, #49622	; 0xc1d6
   180a8:	ldr	r8, [sp, #28]
   180ac:	movt	fp, #51810	; 0xca62
   180b0:	add	r0, r0, r3, ror #27
   180b4:	add	fp, r5, fp
   180b8:	eor	r9, r9, r3
   180bc:	movw	r4, #49622	; 0xc1d6
   180c0:	ror	r3, r3, #2
   180c4:	movt	r4, #51810	; 0xca62
   180c8:	add	r6, fp, r6
   180cc:	add	r4, sl, r4
   180d0:	eor	r7, r7, r8
   180d4:	eor	r8, r3, r2
   180d8:	add	r6, r6, r9
   180dc:	eor	r8, r8, r0
   180e0:	ldr	r9, [sp, #24]
   180e4:	add	ip, r4, ip
   180e8:	ldr	r4, [sp, #72]	; 0x48
   180ec:	add	r6, r6, r0, ror #27
   180f0:	ror	r1, r1, #31
   180f4:	ror	r0, r0, #2
   180f8:	eor	r7, r7, r5
   180fc:	add	ip, ip, r8
   18100:	movw	fp, #49622	; 0xc1d6
   18104:	ldr	r8, [sp, #32]
   18108:	movt	fp, #51810	; 0xca62
   1810c:	eor	r5, r9, r4
   18110:	add	fp, r1, fp
   18114:	eor	r9, r0, r3
   18118:	add	ip, ip, r6, ror #27
   1811c:	ror	r1, r6, #2
   18120:	eor	r5, r5, r8
   18124:	add	r2, fp, r2
   18128:	ror	r7, r7, #31
   1812c:	eor	r6, r9, r6
   18130:	movw	fp, #49622	; 0xc1d6
   18134:	ldr	r9, [sp, #16]
   18138:	movt	fp, #51810	; 0xca62
   1813c:	add	r6, r2, r6
   18140:	add	fp, r7, fp
   18144:	eor	sl, r5, sl
   18148:	movw	r4, #49622	; 0xc1d6
   1814c:	eor	r5, r1, r0
   18150:	movt	r4, #51810	; 0xca62
   18154:	add	r4, r9, r4
   18158:	add	r3, fp, r3
   1815c:	ror	r9, ip, #2
   18160:	eor	r5, r5, ip
   18164:	add	ip, r6, ip, ror #27
   18168:	add	sl, r4, sl, ror #31
   1816c:	eor	r2, r9, r1
   18170:	ldr	r4, [sp, #76]	; 0x4c
   18174:	add	r5, r3, r5
   18178:	eor	r2, r2, ip
   1817c:	add	r5, r5, ip, ror #27
   18180:	add	r0, sl, r0
   18184:	add	r0, r0, r2
   18188:	ldr	r3, [sp, #156]	; 0x9c
   1818c:	ldr	sl, [sp, #4]
   18190:	add	r0, r0, r5, ror #27
   18194:	ldr	fp, [sp]
   18198:	str	r0, [r4]
   1819c:	add	r9, r9, sl
   181a0:	ldr	r6, [sp, #80]	; 0x50
   181a4:	add	r1, r1, fp
   181a8:	ldr	r7, [sp, #8]
   181ac:	ldr	r8, [sp, #12]
   181b0:	ldr	r2, [r6]
   181b4:	add	ip, r7, ip, ror #2
   181b8:	add	r5, r5, r8
   181bc:	str	r9, [r4, #12]
   181c0:	cmp	r3, r2
   181c4:	str	r1, [r4, #16]
   181c8:	stmib	r4, {r5, ip}
   181cc:	bne	181d8 <__assert_fail@plt+0x59b0>
   181d0:	add	sp, sp, #164	; 0xa4
   181d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181d8:	bl	12360 <__stack_chk_fail@plt>
   181dc:	movw	r0, #27336	; 0x6ac8
   181e0:	movw	r1, #27320	; 0x6ab8
   181e4:	movw	r3, #27236	; 0x6a64
   181e8:	movt	r0, #2
   181ec:	movt	r1, #2
   181f0:	mov	r2, #146	; 0x92
   181f4:	movt	r3, #2
   181f8:	bl	12828 <__assert_fail@plt>
   181fc:	movw	r0, #27296	; 0x6aa0
   18200:	movw	r1, #27320	; 0x6ab8
   18204:	movw	r3, #27236	; 0x6a64
   18208:	movt	r0, #2
   1820c:	movt	r1, #2
   18210:	mov	r2, #145	; 0x91
   18214:	movt	r3, #2
   18218:	bl	12828 <__assert_fail@plt>
   1821c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   18220:	subs	r5, r0, #0
   18224:	mov	r7, r1
   18228:	mov	r6, r2
   1822c:	beq	18314 <__assert_fail@plt+0x5aec>
   18230:	cmp	r1, #0
   18234:	beq	182f8 <__assert_fail@plt+0x5ad0>
   18238:	ldr	r3, [r5, #20]
   1823c:	add	r2, r3, r2, lsl #3
   18240:	str	r2, [r5, #20]
   18244:	cmp	r3, r2
   18248:	ubfx	r8, r3, #3, #6
   1824c:	add	r3, r8, r6
   18250:	ldrhi	r2, [r5, #24]
   18254:	addhi	r2, r2, #1
   18258:	addhi	r2, r2, r6, lsr #29
   1825c:	strhi	r2, [r5, #24]
   18260:	cmp	r3, #63	; 0x3f
   18264:	bhi	18284 <__assert_fail@plt+0x5a5c>
   18268:	add	r5, r5, r8
   1826c:	mov	r2, #0
   18270:	add	r0, r5, #28
   18274:	add	r1, r7, r2
   18278:	rsb	r2, r2, r6
   1827c:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   18280:	b	122e8 <memcpy@plt>
   18284:	rsb	r4, r8, #64	; 0x40
   18288:	add	r0, r5, r8
   1828c:	add	r9, r5, #28
   18290:	add	r0, r0, #28
   18294:	mov	r2, r4
   18298:	rsb	r8, r8, #127	; 0x7f
   1829c:	bl	122e8 <memcpy@plt>
   182a0:	mov	r1, r9
   182a4:	mov	r0, r5
   182a8:	bl	16a00 <__assert_fail@plt+0x41d8>
   182ac:	cmp	r6, r8
   182b0:	bhi	182bc <__assert_fail@plt+0x5a94>
   182b4:	b	182ec <__assert_fail@plt+0x5ac4>
   182b8:	mov	r4, r2
   182bc:	mov	r0, r5
   182c0:	add	r1, r7, r4
   182c4:	bl	16a00 <__assert_fail@plt+0x41d8>
   182c8:	add	r3, r4, #127	; 0x7f
   182cc:	cmp	r6, r3
   182d0:	add	r2, r4, #64	; 0x40
   182d4:	bhi	182b8 <__assert_fail@plt+0x5a90>
   182d8:	add	r1, r7, r2
   182dc:	mov	r0, r9
   182e0:	rsb	r2, r2, r6
   182e4:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   182e8:	b	122e8 <memcpy@plt>
   182ec:	mov	r0, r9
   182f0:	mov	r2, r4
   182f4:	b	18274 <__assert_fail@plt+0x5a4c>
   182f8:	movw	r0, #27376	; 0x6af0
   182fc:	movw	r1, #27320	; 0x6ab8
   18300:	movt	r0, #2
   18304:	movt	r1, #2
   18308:	mov	r2, #230	; 0xe6
   1830c:	ldr	r3, [pc, #28]	; 18330 <__assert_fail@plt+0x5b08>
   18310:	bl	12828 <__assert_fail@plt>
   18314:	movw	r0, #27360	; 0x6ae0
   18318:	movw	r1, #27320	; 0x6ab8
   1831c:	movt	r0, #2
   18320:	movt	r1, #2
   18324:	mov	r2, #229	; 0xe5
   18328:	ldr	r3, [pc]	; 18330 <__assert_fail@plt+0x5b08>
   1832c:	bl	12828 <__assert_fail@plt>
   18330:	andeq	r6, r2, r4, ror sl
   18334:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18338:	movw	r8, #17144	; 0x42f8
   1833c:	movt	r8, #4
   18340:	mov	sl, r1
   18344:	sub	sp, sp, #8
   18348:	mov	r4, r0
   1834c:	ldr	r1, [r8]
   18350:	mov	r9, r2
   18354:	mov	r5, r3
   18358:	ldr	r6, [sp, #40]	; 0x28
   1835c:	str	r1, [sp, #4]
   18360:	bl	123fc <NSSLOW_Init@plt>
   18364:	mov	r1, r4
   18368:	bl	122f4 <NSSLOWHASH_NewContext@plt>
   1836c:	subs	r7, r0, #0
   18370:	beq	183f0 <__assert_fail@plt+0x5bc8>
   18374:	bl	123b4 <NSSLOWHASH_Begin@plt>
   18378:	cmp	r5, #0
   1837c:	beq	183ac <__assert_fail@plt+0x5b84>
   18380:	ldr	r4, [sp, #44]	; 0x2c
   18384:	b	18390 <__assert_fail@plt+0x5b68>
   18388:	ldr	r6, [r4, #4]
   1838c:	add	r4, r4, #8
   18390:	mov	r1, r5
   18394:	mov	r2, r6
   18398:	mov	r0, r7
   1839c:	bl	12744 <NSSLOWHASH_Update@plt>
   183a0:	ldr	r5, [r4]
   183a4:	cmp	r5, #0
   183a8:	bne	18388 <__assert_fail@plt+0x5b60>
   183ac:	mov	r3, r9
   183b0:	mov	r1, sl
   183b4:	mov	r0, r7
   183b8:	mov	r2, sp
   183bc:	bl	1275c <NSSLOWHASH_End@plt>
   183c0:	ldr	r3, [sp]
   183c4:	cmp	r3, r9
   183c8:	bne	183fc <__assert_fail@plt+0x5bd4>
   183cc:	mov	r0, r7
   183d0:	bl	1269c <NSSLOWHASH_Destroy@plt>
   183d4:	mov	r0, #1
   183d8:	ldr	r2, [sp, #4]
   183dc:	ldr	r3, [r8]
   183e0:	cmp	r2, r3
   183e4:	bne	183f8 <__assert_fail@plt+0x5bd0>
   183e8:	add	sp, sp, #8
   183ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   183f0:	mov	r0, r7
   183f4:	b	183d8 <__assert_fail@plt+0x5bb0>
   183f8:	bl	12360 <__stack_chk_fail@plt>
   183fc:	movw	r0, #27388	; 0x6afc
   18400:	movw	r1, #27320	; 0x6ab8
   18404:	movt	r0, #2
   18408:	movt	r1, #2
   1840c:	movw	r2, #315	; 0x13b
   18410:	ldr	r3, [pc]	; 18418 <__assert_fail@plt+0x5bf0>
   18414:	bl	12828 <__assert_fail@plt>
   18418:	andeq	r6, r2, r0, lsl #21
   1841c:	push	{r2, r3}
   18420:	mov	r3, r1
   18424:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18428:	sub	sp, sp, #120	; 0x78
   1842c:	movw	r8, #17144	; 0x42f8
   18430:	movt	r8, #4
   18434:	ldr	sl, [sp, #152]	; 0x98
   18438:	add	r5, sp, #156	; 0x9c
   1843c:	ldr	ip, [r8]
   18440:	mov	r7, r0
   18444:	mov	r4, r1
   18448:	str	r5, [sp, #4]
   1844c:	mov	r1, r0
   18450:	str	sl, [sp]
   18454:	mov	r0, #3
   18458:	mov	r2, #20
   1845c:	str	ip, [sp, #116]	; 0x74
   18460:	str	r5, [sp, #12]
   18464:	bl	18334 <__assert_fail@plt+0x5b0c>
   18468:	cmp	r0, #0
   1846c:	beq	18490 <__assert_fail@plt+0x5c68>
   18470:	ldr	r2, [sp, #116]	; 0x74
   18474:	ldr	r3, [r8]
   18478:	cmp	r2, r3
   1847c:	bne	18604 <__assert_fail@plt+0x5ddc>
   18480:	add	sp, sp, #120	; 0x78
   18484:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18488:	add	sp, sp, #8
   1848c:	bx	lr
   18490:	cmp	r4, #0
   18494:	movw	r3, #8961	; 0x2301
   18498:	movw	r2, #43913	; 0xab89
   1849c:	movt	r3, #26437	; 0x6745
   184a0:	movt	r2, #61389	; 0xefcd
   184a4:	str	r3, [sp, #16]
   184a8:	str	r2, [sp, #20]
   184ac:	movw	r3, #56574	; 0xdcfe
   184b0:	movw	r2, #21622	; 0x5476
   184b4:	movt	r3, #39098	; 0x98ba
   184b8:	movt	r2, #4146	; 0x1032
   184bc:	str	r3, [sp, #24]
   184c0:	str	r0, [sp, #36]	; 0x24
   184c4:	movw	r3, #57840	; 0xe1f0
   184c8:	str	r0, [sp, #40]	; 0x28
   184cc:	movt	r3, #50130	; 0xc3d2
   184d0:	str	r5, [sp, #12]
   184d4:	str	r2, [sp, #28]
   184d8:	str	r3, [sp, #32]
   184dc:	beq	18520 <__assert_fail@plt+0x5cf8>
   184e0:	add	r6, r5, #8
   184e4:	add	r9, sp, #16
   184e8:	b	184fc <__assert_fail@plt+0x5cd4>
   184ec:	str	r6, [sp, #12]
   184f0:	add	r5, r5, #8
   184f4:	ldr	sl, [r5, #-4]
   184f8:	add	r6, r6, #8
   184fc:	mov	r1, r4
   18500:	mov	r2, sl
   18504:	mov	r0, r9
   18508:	bl	1821c <__assert_fail@plt+0x59f4>
   1850c:	ldr	r4, [r6, #-8]
   18510:	add	r3, r5, #4
   18514:	str	r3, [sp, #12]
   18518:	cmp	r4, #0
   1851c:	bne	184ec <__assert_fail@plt+0x5cc4>
   18520:	cmp	r7, #0
   18524:	addne	r4, sp, #108	; 0x6c
   18528:	movne	r3, #0
   1852c:	beq	18608 <__assert_fail@plt+0x5de0>
   18530:	cmp	r3, #3
   18534:	add	r0, sp, #120	; 0x78
   18538:	mvn	r2, r3
   1853c:	and	r2, r2, #3
   18540:	movls	r1, #20
   18544:	movhi	r1, #16
   18548:	add	r1, r0, r1
   1854c:	lsl	r2, r2, #3
   18550:	ldr	r1, [r1, #-100]	; 0xffffff9c
   18554:	lsr	r2, r1, r2
   18558:	strb	r2, [r4, r3]
   1855c:	add	r3, r3, #1
   18560:	cmp	r3, #8
   18564:	bne	18530 <__assert_fail@plt+0x5d08>
   18568:	add	r9, sp, #16
   1856c:	ldr	r1, [pc, #176]	; 18624 <__assert_fail@plt+0x5dfc>
   18570:	mov	r2, #1
   18574:	mov	r0, r9
   18578:	b	18588 <__assert_fail@plt+0x5d60>
   1857c:	ldr	r1, [pc, #164]	; 18628 <__assert_fail@plt+0x5e00>
   18580:	mov	r0, r9
   18584:	mov	r2, #1
   18588:	bl	1821c <__assert_fail@plt+0x59f4>
   1858c:	ldr	r3, [sp, #36]	; 0x24
   18590:	and	r3, r3, #504	; 0x1f8
   18594:	cmp	r3, #448	; 0x1c0
   18598:	bne	1857c <__assert_fail@plt+0x5d54>
   1859c:	mov	r1, r4
   185a0:	mov	r0, r9
   185a4:	mov	r2, #8
   185a8:	bl	1821c <__assert_fail@plt+0x59f4>
   185ac:	mov	r3, #0
   185b0:	bic	r1, r3, #3
   185b4:	add	r0, sp, #120	; 0x78
   185b8:	add	r1, r0, r1
   185bc:	mvn	r2, r3
   185c0:	and	r2, r2, #3
   185c4:	ldr	r1, [r1, #-104]	; 0xffffff98
   185c8:	lsl	r2, r2, #3
   185cc:	lsr	r2, r1, r2
   185d0:	strb	r2, [r7, r3]
   185d4:	add	r3, r3, #1
   185d8:	cmp	r3, #20
   185dc:	bne	185b0 <__assert_fail@plt+0x5d88>
   185e0:	mov	r0, r9
   185e4:	mov	r1, #0
   185e8:	mov	r2, #92	; 0x5c
   185ec:	bl	125e8 <memset@plt>
   185f0:	mov	r0, r9
   185f4:	mov	r1, #0
   185f8:	mov	r2, #92	; 0x5c
   185fc:	bl	125e8 <memset@plt>
   18600:	b	18470 <__assert_fail@plt+0x5c48>
   18604:	bl	12360 <__stack_chk_fail@plt>
   18608:	movw	r0, #27404	; 0x6b0c
   1860c:	movw	r1, #27320	; 0x6ab8
   18610:	movt	r0, #2
   18614:	movt	r1, #2
   18618:	mov	r2, #264	; 0x108
   1861c:	ldr	r3, [pc, #8]	; 1862c <__assert_fail@plt+0x5e04>
   18620:	bl	12828 <__assert_fail@plt>
   18624:	muleq	r2, fp, sl
   18628:	muleq	r2, ip, sl
   1862c:	muleq	r2, r0, sl
   18630:	push	{r2, r3}
   18634:	mov	r3, r1
   18638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1863c:	sub	sp, sp, #116	; 0x74
   18640:	movw	r9, #17144	; 0x42f8
   18644:	movt	r9, #4
   18648:	ldr	r6, [sp, #152]	; 0x98
   1864c:	add	r5, sp, #156	; 0x9c
   18650:	ldr	ip, [r9]
   18654:	mov	r4, r1
   18658:	str	r0, [sp, #12]
   1865c:	mov	r1, r0
   18660:	str	r6, [sp]
   18664:	mov	r0, #2
   18668:	str	r5, [sp, #4]
   1866c:	mov	r2, #16
   18670:	str	ip, [sp, #108]	; 0x6c
   18674:	str	r5, [sp, #16]
   18678:	bl	18334 <__assert_fail@plt+0x5b0c>
   1867c:	cmp	r0, #0
   18680:	beq	186a4 <__assert_fail@plt+0x5e7c>
   18684:	ldr	r2, [sp, #108]	; 0x6c
   18688:	ldr	r3, [r9]
   1868c:	cmp	r2, r3
   18690:	bne	188f8 <__assert_fail@plt+0x60d0>
   18694:	add	sp, sp, #116	; 0x74
   18698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1869c:	add	sp, sp, #8
   186a0:	bx	lr
   186a4:	cmp	r4, #0
   186a8:	movw	r2, #8961	; 0x2301
   186ac:	str	r5, [sp, #16]
   186b0:	movt	r2, #26437	; 0x6745
   186b4:	movw	r3, #43913	; 0xab89
   186b8:	str	r2, [sp, #20]
   186bc:	movt	r3, #61389	; 0xefcd
   186c0:	movw	r2, #56574	; 0xdcfe
   186c4:	str	r3, [sp, #24]
   186c8:	movt	r2, #39098	; 0x98ba
   186cc:	movw	r3, #21622	; 0x5476
   186d0:	str	r0, [sp, #36]	; 0x24
   186d4:	movt	r3, #4146	; 0x1032
   186d8:	str	r0, [sp, #40]	; 0x28
   186dc:	str	r2, [sp, #28]
   186e0:	addeq	r7, sp, #20
   186e4:	str	r3, [sp, #32]
   186e8:	addeq	r5, sp, #44	; 0x2c
   186ec:	beq	18820 <__assert_fail@plt+0x5ff8>
   186f0:	add	r7, sp, #20
   186f4:	add	r5, sp, #44	; 0x2c
   186f8:	add	ip, sp, #108	; 0x6c
   186fc:	str	ip, [sp, #8]
   18700:	ldr	r3, [sp, #36]	; 0x24
   18704:	mov	r1, r4
   18708:	ldr	ip, [sp, #8]
   1870c:	add	r2, r6, r3
   18710:	str	r2, [sp, #36]	; 0x24
   18714:	cmp	r3, r2
   18718:	and	r8, r3, #63	; 0x3f
   1871c:	rsb	r8, r8, #64	; 0x40
   18720:	ldrhi	r2, [sp, #40]	; 0x28
   18724:	rsb	r0, r8, ip
   18728:	addhi	r2, r2, #1
   1872c:	strhi	r2, [sp, #40]	; 0x28
   18730:	cmp	r8, r6
   18734:	bhi	18814 <__assert_fail@plt+0x5fec>
   18738:	mov	r2, r8
   1873c:	rsb	r6, r8, r6
   18740:	bl	122e8 <memcpy@plt>
   18744:	mov	r0, r5
   18748:	mov	r1, #16
   1874c:	add	r8, r4, r8
   18750:	bl	15fa4 <__assert_fail@plt+0x377c>
   18754:	mov	r0, r7
   18758:	mov	r1, r5
   1875c:	bl	15fd8 <__assert_fail@plt+0x37b0>
   18760:	cmp	r6, #63	; 0x3f
   18764:	bls	187d8 <__assert_fail@plt+0x5fb0>
   18768:	mov	sl, r6
   1876c:	mov	r4, r8
   18770:	add	fp, r4, #64	; 0x40
   18774:	mov	lr, r5
   18778:	ldr	r0, [r4]
   1877c:	add	r4, r4, #16
   18780:	ldr	r1, [r4, #-12]
   18784:	mov	ip, lr
   18788:	ldr	r2, [r4, #-8]
   1878c:	add	lr, lr, #16
   18790:	ldr	r3, [r4, #-4]
   18794:	cmp	r4, fp
   18798:	stmia	ip!, {r0, r1, r2, r3}
   1879c:	bne	18778 <__assert_fail@plt+0x5f50>
   187a0:	mov	r0, r5
   187a4:	mov	r1, #16
   187a8:	bl	15fa4 <__assert_fail@plt+0x377c>
   187ac:	sub	sl, sl, #64	; 0x40
   187b0:	mov	r0, r7
   187b4:	mov	r1, r5
   187b8:	bl	15fd8 <__assert_fail@plt+0x37b0>
   187bc:	cmp	sl, #63	; 0x3f
   187c0:	bhi	18770 <__assert_fail@plt+0x5f48>
   187c4:	sub	r3, r6, #64	; 0x40
   187c8:	and	r6, r6, #63	; 0x3f
   187cc:	bic	r3, r3, #63	; 0x3f
   187d0:	add	r3, r3, #64	; 0x40
   187d4:	add	r8, r8, r3
   187d8:	mov	r1, r8
   187dc:	mov	r2, r6
   187e0:	mov	r0, r5
   187e4:	mov	r3, #64	; 0x40
   187e8:	bl	123e4 <__memcpy_chk@plt>
   187ec:	ldr	r3, [sp, #16]
   187f0:	add	r2, r3, #4
   187f4:	str	r2, [sp, #16]
   187f8:	ldr	r4, [r3]
   187fc:	cmp	r4, #0
   18800:	beq	18820 <__assert_fail@plt+0x5ff8>
   18804:	add	r2, r3, #8
   18808:	ldr	r6, [r3, #4]
   1880c:	str	r2, [sp, #16]
   18810:	b	18700 <__assert_fail@plt+0x5ed8>
   18814:	mov	r2, r6
   18818:	bl	122e8 <memcpy@plt>
   1881c:	b	187ec <__assert_fail@plt+0x5fc4>
   18820:	ldr	r3, [sp, #36]	; 0x24
   18824:	mvn	r0, #127	; 0x7f
   18828:	and	r3, r3, #63	; 0x3f
   1882c:	rsbs	r2, r3, #55	; 0x37
   18830:	add	r1, r5, r3
   18834:	strb	r0, [r5, r3]
   18838:	add	r0, r1, #1
   1883c:	bmi	188c8 <__assert_fail@plt+0x60a0>
   18840:	mov	r1, #0
   18844:	bl	125e8 <memset@plt>
   18848:	mov	r0, r5
   1884c:	mov	r1, #14
   18850:	bl	15fa4 <__assert_fail@plt+0x377c>
   18854:	ldr	r2, [sp, #40]	; 0x28
   18858:	ldr	r3, [sp, #36]	; 0x24
   1885c:	mov	r1, r5
   18860:	mov	r0, r7
   18864:	lsl	r2, r2, #3
   18868:	orr	r2, r2, r3, lsr #29
   1886c:	lsl	r3, r3, #3
   18870:	str	r2, [sp, #104]	; 0x68
   18874:	str	r3, [sp, #100]	; 0x64
   18878:	bl	15fd8 <__assert_fail@plt+0x37b0>
   1887c:	mov	r0, r7
   18880:	mov	r1, #4
   18884:	bl	15fa4 <__assert_fail@plt+0x377c>
   18888:	mov	ip, r7
   1888c:	ldm	ip!, {r0, r1, r2, r3}
   18890:	ldr	ip, [sp, #12]
   18894:	str	r0, [ip]
   18898:	mov	r0, r7
   1889c:	str	r1, [ip, #4]
   188a0:	mov	r1, #0
   188a4:	str	r2, [ip, #8]
   188a8:	mov	r2, #88	; 0x58
   188ac:	str	r3, [ip, #12]
   188b0:	bl	125e8 <memset@plt>
   188b4:	mov	r0, r7
   188b8:	mov	r1, #0
   188bc:	mov	r2, #88	; 0x58
   188c0:	bl	125e8 <memset@plt>
   188c4:	b	18684 <__assert_fail@plt+0x5e5c>
   188c8:	rsb	r2, r3, #63	; 0x3f
   188cc:	mov	r1, #0
   188d0:	bl	125e8 <memset@plt>
   188d4:	mov	r0, r5
   188d8:	mov	r1, #16
   188dc:	bl	15fa4 <__assert_fail@plt+0x377c>
   188e0:	mov	r0, r7
   188e4:	mov	r1, r5
   188e8:	bl	15fd8 <__assert_fail@plt+0x37b0>
   188ec:	mov	r2, #56	; 0x38
   188f0:	mov	r0, r5
   188f4:	b	18840 <__assert_fail@plt+0x6018>
   188f8:	bl	12360 <__stack_chk_fail@plt>
   188fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18900:	movw	r4, #17144	; 0x42f8
   18904:	movt	r4, #4
   18908:	sub	sp, sp, #240	; 0xf0
   1890c:	mov	r2, #80	; 0x50
   18910:	mov	r5, r0
   18914:	ldr	r3, [r4]
   18918:	mov	r6, r1
   1891c:	add	r0, sp, #156	; 0x9c
   18920:	mov	r1, #0
   18924:	mov	sl, #1000	; 0x3e8
   18928:	mov	r9, #118	; 0x76
   1892c:	str	r3, [sp, #236]	; 0xec
   18930:	bl	125e8 <memset@plt>
   18934:	mov	r2, #60	; 0x3c
   18938:	add	r0, sp, #28
   1893c:	mov	r1, #0
   18940:	mov	r8, #113	; 0x71
   18944:	movw	ip, #27448	; 0x6b38
   18948:	movw	r3, #24052	; 0x5df4
   1894c:	movt	ip, #2
   18950:	movt	r3, #2
   18954:	str	ip, [sp, #156]	; 0x9c
   18958:	movw	ip, #24060	; 0x5dfc
   1895c:	str	r3, [sp, #172]	; 0xac
   18960:	movt	ip, #2
   18964:	movw	r3, #24068	; 0x5e04
   18968:	str	ip, [sp, #188]	; 0xbc
   1896c:	movt	r3, #2
   18970:	mov	ip, #1
   18974:	str	r3, [sp, #204]	; 0xcc
   18978:	mov	r3, #104	; 0x68
   1897c:	str	ip, [sp, #160]	; 0xa0
   18980:	movw	r7, #17160	; 0x4308
   18984:	str	r3, [sp, #216]	; 0xd8
   18988:	movt	r7, #4
   1898c:	str	sl, [sp, #168]	; 0xa8
   18990:	str	r9, [sp, #184]	; 0xb8
   18994:	str	r8, [sp, #200]	; 0xc8
   18998:	bl	125e8 <memset@plt>
   1899c:	add	r0, sp, #88	; 0x58
   189a0:	movw	r3, #27456	; 0x6b40
   189a4:	movw	r2, #27492	; 0x6b64
   189a8:	movt	r3, #2
   189ac:	movt	r2, #2
   189b0:	str	r3, [sp, #32]
   189b4:	str	r2, [sp, #44]	; 0x2c
   189b8:	movw	r3, #27584	; 0x6bc0
   189bc:	movw	r2, #24164	; 0x5e64
   189c0:	movt	r3, #2
   189c4:	movt	r2, #2
   189c8:	str	r3, [sp, #48]	; 0x30
   189cc:	str	sl, [sp, #40]	; 0x28
   189d0:	movw	r3, #24192	; 0x5e80
   189d4:	str	r9, [sp, #52]	; 0x34
   189d8:	movt	r3, #2
   189dc:	str	r8, [sp, #64]	; 0x40
   189e0:	str	r2, [sp, #56]	; 0x38
   189e4:	str	r3, [sp, #68]	; 0x44
   189e8:	bl	19644 <__assert_fail@plt+0x6e1c>
   189ec:	mov	r0, r5
   189f0:	mov	r1, r6
   189f4:	add	r2, sp, #156	; 0x9c
   189f8:	bl	25450 <p11_dict_direct_equal@@Base+0x1c58>
   189fc:	cmn	r0, #1
   18a00:	beq	18a80 <__assert_fail@plt+0x6258>
   18a04:	cmp	r0, #113	; 0x71
   18a08:	beq	189ec <__assert_fail@plt+0x61c4>
   18a0c:	bgt	18a34 <__assert_fail@plt+0x620c>
   18a10:	cmp	r0, #63	; 0x3f
   18a14:	beq	18a58 <__assert_fail@plt+0x6230>
   18a18:	cmp	r0, #104	; 0x68
   18a1c:	bne	18a60 <__assert_fail@plt+0x6238>
   18a20:	add	r0, sp, #28
   18a24:	add	r1, sp, #156	; 0x9c
   18a28:	bl	251b8 <p11_dict_direct_equal@@Base+0x19c0>
   18a2c:	mov	r0, #0
   18a30:	bl	12510 <exit@plt>
   18a34:	cmp	r0, #118	; 0x76
   18a38:	beq	189ec <__assert_fail@plt+0x61c4>
   18a3c:	cmp	r0, #1000	; 0x3e8
   18a40:	bne	18a60 <__assert_fail@plt+0x6238>
   18a44:	add	r0, sp, #88	; 0x58
   18a48:	ldr	r1, [r7]
   18a4c:	bl	197f0 <__assert_fail@plt+0x6fc8>
   18a50:	cmp	r0, #0
   18a54:	bne	189ec <__assert_fail@plt+0x61c4>
   18a58:	mov	r0, #2
   18a5c:	bl	12510 <exit@plt>
   18a60:	movw	r0, #24248	; 0x5eb8
   18a64:	movw	r1, #27592	; 0x6bc8
   18a68:	movw	r3, #27416	; 0x6b18
   18a6c:	movt	r0, #2
   18a70:	movt	r1, #2
   18a74:	mov	r2, #174	; 0xae
   18a78:	movt	r3, #2
   18a7c:	bl	12828 <__assert_fail@plt>
   18a80:	movw	r3, #17152	; 0x4300
   18a84:	movt	r3, #4
   18a88:	ldr	r3, [r3]
   18a8c:	cmp	r5, r3
   18a90:	bne	18c58 <__assert_fail@plt+0x6430>
   18a94:	movw	r1, #27644	; 0x6bfc
   18a98:	add	r0, sp, #88	; 0x58
   18a9c:	movt	r1, #2
   18aa0:	bl	19d18 <__assert_fail@plt+0x74f0>
   18aa4:	cmp	r0, #0
   18aa8:	beq	18c50 <__assert_fail@plt+0x6428>
   18aac:	bl	15084 <__assert_fail@plt+0x285c>
   18ab0:	mov	r1, #0
   18ab4:	mov	r8, r0
   18ab8:	add	r0, sp, #4
   18abc:	bl	21e08 <__assert_fail@plt+0xf5e0>
   18ac0:	cmp	r0, #0
   18ac4:	beq	18c34 <__assert_fail@plt+0x640c>
   18ac8:	movw	r9, #17156	; 0x4304
   18acc:	movt	r9, #4
   18ad0:	mov	sl, #0
   18ad4:	ldr	r0, [sp, #92]	; 0x5c
   18ad8:	bl	126b4 <p11_kit_iter_next@plt>
   18adc:	subs	r6, r0, #0
   18ae0:	bne	18bd4 <__assert_fail@plt+0x63ac>
   18ae4:	add	r0, sp, #4
   18ae8:	mov	r1, #8192	; 0x2000
   18aec:	bl	21fa0 <__assert_fail@plt+0xf778>
   18af0:	cmp	r0, #0
   18af4:	beq	18c34 <__assert_fail@plt+0x640c>
   18af8:	bl	12564 <p11_kit_uri_new@plt>
   18afc:	mov	r5, r0
   18b00:	bl	12798 <p11_kit_uri_get_token_info@plt>
   18b04:	mov	r7, r0
   18b08:	ldr	r0, [sp, #92]	; 0x5c
   18b0c:	bl	122d0 <p11_kit_iter_get_token@plt>
   18b10:	mov	r2, #160	; 0xa0
   18b14:	mov	r1, r0
   18b18:	mov	r0, r7
   18b1c:	bl	122e8 <memcpy@plt>
   18b20:	mov	r1, r6
   18b24:	ldr	r0, [sp, #132]	; 0x84
   18b28:	bl	20afc <__assert_fail@plt+0xe2d4>
   18b2c:	subs	r1, r0, #0
   18b30:	beq	18b3c <__assert_fail@plt+0x6314>
   18b34:	mov	r0, r5
   18b38:	bl	127a4 <p11_kit_uri_set_attribute@plt>
   18b3c:	movw	r1, #258	; 0x102
   18b40:	ldr	r0, [sp, #132]	; 0x84
   18b44:	bl	20afc <__assert_fail@plt+0xe2d4>
   18b48:	subs	r1, r0, #0
   18b4c:	beq	18b58 <__assert_fail@plt+0x6330>
   18b50:	mov	r0, r5
   18b54:	bl	127a4 <p11_kit_uri_set_attribute@plt>
   18b58:	mov	r0, r5
   18b5c:	mov	r1, #2
   18b60:	mov	r2, sp
   18b64:	bl	12414 <p11_kit_uri_format@plt>
   18b68:	cmp	r0, #0
   18b6c:	mov	r0, r5
   18b70:	strne	sl, [sp]
   18b74:	bl	12474 <p11_kit_uri_free@plt>
   18b78:	ldr	r5, [sp]
   18b7c:	cmp	r5, #0
   18b80:	beq	18ba0 <__assert_fail@plt+0x6378>
   18b84:	movw	r1, #27648	; 0x6c00
   18b88:	mov	r0, #1
   18b8c:	movt	r1, #2
   18b90:	mov	r2, r5
   18b94:	bl	12624 <__printf_chk@plt>
   18b98:	mov	r0, r5
   18b9c:	bl	122c4 <free@plt>
   18ba0:	mov	r0, r8
   18ba4:	ldr	r1, [sp, #132]	; 0x84
   18ba8:	add	r2, sp, #4
   18bac:	bl	157c8 <__assert_fail@plt+0x2fa0>
   18bb0:	cmp	r0, #0
   18bb4:	bne	18c14 <__assert_fail@plt+0x63ec>
   18bb8:	movw	r0, #27656	; 0x6c08
   18bbc:	movt	r0, #2
   18bc0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   18bc4:	ldr	r0, [sp, #92]	; 0x5c
   18bc8:	bl	126b4 <p11_kit_iter_next@plt>
   18bcc:	subs	r6, r0, #0
   18bd0:	beq	18ae4 <__assert_fail@plt+0x62bc>
   18bd4:	mov	r0, r8
   18bd8:	bl	15100 <__assert_fail@plt+0x28d8>
   18bdc:	add	r0, sp, #4
   18be0:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   18be4:	cmp	r6, #1
   18be8:	moveq	r5, #0
   18bec:	bne	18c44 <__assert_fail@plt+0x641c>
   18bf0:	add	r0, sp, #88	; 0x58
   18bf4:	bl	19768 <__assert_fail@plt+0x6f40>
   18bf8:	ldr	r2, [sp, #236]	; 0xec
   18bfc:	ldr	r3, [r4]
   18c00:	mov	r0, r5
   18c04:	cmp	r2, r3
   18c08:	bne	18c4c <__assert_fail@plt+0x6424>
   18c0c:	add	sp, sp, #240	; 0xf0
   18c10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c14:	ldr	r0, [sp, #4]
   18c18:	mov	r1, #1
   18c1c:	ldr	r2, [sp, #8]
   18c20:	ldr	r3, [r9]
   18c24:	bl	123f0 <fwrite@plt>
   18c28:	mov	r0, #10
   18c2c:	bl	12600 <putchar@plt>
   18c30:	b	18ad4 <__assert_fail@plt+0x62ac>
   18c34:	movw	r0, #24400	; 0x5f50
   18c38:	ldr	r1, [pc, #40]	; 18c68 <__assert_fail@plt+0x6440>
   18c3c:	movt	r0, #2
   18c40:	bl	22e10 <secure_getenv@@Base+0x7bc>
   18c44:	mov	r5, #1
   18c48:	b	18bf0 <__assert_fail@plt+0x63c8>
   18c4c:	bl	12360 <__stack_chk_fail@plt>
   18c50:	mov	r0, #1
   18c54:	bl	12510 <exit@plt>
   18c58:	movw	r0, #27608	; 0x6bd8
   18c5c:	movt	r0, #2
   18c60:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   18c64:	b	18a58 <__assert_fail@plt+0x6230>
   18c68:	andeq	r6, r2, r8, lsr #22
   18c6c:	push	{r3, r4, r5, lr}
   18c70:	mov	r4, r0
   18c74:	mvn	r3, #0
   18c78:	ldr	r0, [r0, #44]	; 0x2c
   18c7c:	str	r3, [r4, #40]	; 0x28
   18c80:	mov	r5, #0
   18c84:	bl	208a0 <__assert_fail@plt+0xe078>
   18c88:	str	r5, [r4, #44]	; 0x2c
   18c8c:	add	r0, r4, #48	; 0x30
   18c90:	bl	1278c <asn1_delete_structure@plt>
   18c94:	ldr	r0, [r4, #60]	; 0x3c
   18c98:	str	r5, [r4, #52]	; 0x34
   18c9c:	str	r5, [r4, #56]	; 0x38
   18ca0:	bl	23458 <secure_getenv@@Base+0xe04>
   18ca4:	str	r5, [r4, #60]	; 0x3c
   18ca8:	ldr	r0, [r4, #64]	; 0x40
   18cac:	bl	21c6c <__assert_fail@plt+0xf444>
   18cb0:	str	r5, [r4, #64]	; 0x40
   18cb4:	pop	{r3, r4, r5, pc}
   18cb8:	push	{r3, r4, r5, lr}
   18cbc:	mov	r1, #129	; 0x81
   18cc0:	mov	r5, r0
   18cc4:	bl	20d84 <__assert_fail@plt+0xe55c>
   18cc8:	bl	210f4 <__assert_fail@plt+0xe8cc>
   18ccc:	mov	r1, #130	; 0x82
   18cd0:	mov	r4, r0
   18cd4:	mov	r0, r5
   18cd8:	bl	20d84 <__assert_fail@plt+0xe55c>
   18cdc:	bl	210f4 <__assert_fail@plt+0xe8cc>
   18ce0:	eor	r0, r0, r4
   18ce4:	pop	{r3, r4, r5, pc}
   18ce8:	push	{r3, lr}
   18cec:	movw	r1, #297	; 0x129
   18cf0:	bl	20d84 <__assert_fail@plt+0xe55c>
   18cf4:	pop	{r3, lr}
   18cf8:	b	210f4 <__assert_fail@plt+0xe8cc>
   18cfc:	push	{r4, r5, r6, lr}
   18d00:	mov	r4, r1
   18d04:	mov	r1, #129	; 0x81
   18d08:	mov	r6, r0
   18d0c:	bl	20d84 <__assert_fail@plt+0xe55c>
   18d10:	mov	r1, #129	; 0x81
   18d14:	mov	r5, r0
   18d18:	mov	r0, r4
   18d1c:	bl	20d84 <__assert_fail@plt+0xe55c>
   18d20:	mov	r1, r0
   18d24:	mov	r0, r5
   18d28:	bl	20ff4 <__assert_fail@plt+0xe7cc>
   18d2c:	cmp	r0, #0
   18d30:	popeq	{r4, r5, r6, pc}
   18d34:	mov	r0, r6
   18d38:	mov	r1, #130	; 0x82
   18d3c:	bl	20d84 <__assert_fail@plt+0xe55c>
   18d40:	mov	r1, #130	; 0x82
   18d44:	mov	r5, r0
   18d48:	mov	r0, r4
   18d4c:	bl	20d84 <__assert_fail@plt+0xe55c>
   18d50:	mov	r1, r0
   18d54:	mov	r0, r5
   18d58:	pop	{r4, r5, r6, lr}
   18d5c:	b	20ff4 <__assert_fail@plt+0xe7cc>
   18d60:	push	{r3, r4, r5, lr}
   18d64:	mov	r5, r1
   18d68:	movw	r1, #297	; 0x129
   18d6c:	bl	20d84 <__assert_fail@plt+0xe55c>
   18d70:	movw	r1, #297	; 0x129
   18d74:	mov	r4, r0
   18d78:	mov	r0, r5
   18d7c:	bl	20d84 <__assert_fail@plt+0xe55c>
   18d80:	mov	r1, r0
   18d84:	mov	r0, r4
   18d88:	pop	{r3, r4, r5, lr}
   18d8c:	b	20ff4 <__assert_fail@plt+0xe7cc>
   18d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d94:	movw	r5, #17144	; 0x42f8
   18d98:	movt	r5, #4
   18d9c:	sub	sp, sp, #204	; 0xcc
   18da0:	movw	r8, #13072	; 0x3310
   18da4:	movt	r8, #4
   18da8:	ldr	r3, [r5]
   18dac:	mov	r0, r2
   18db0:	mov	r4, r2
   18db4:	mov	r6, r1
   18db8:	str	r3, [sp, #196]	; 0xc4
   18dbc:	bl	18c6c <__assert_fail@plt+0x6444>
   18dc0:	ldr	r9, [r8]
   18dc4:	cmn	r9, #1
   18dc8:	beq	194f0 <__assert_fail@plt+0x6cc8>
   18dcc:	mov	r3, r8
   18dd0:	mov	r7, #0
   18dd4:	ldr	r2, [r3, #24]!
   18dd8:	add	r7, r7, #1
   18ddc:	cmn	r2, #1
   18de0:	bne	18dd4 <__assert_fail@plt+0x65ac>
   18de4:	add	r0, r7, #1
   18de8:	mov	r1, #12
   18dec:	bl	1221c <calloc@plt>
   18df0:	subs	ip, r0, #0
   18df4:	beq	1927c <__assert_fail@plt+0x6a54>
   18df8:	cmp	r7, #0
   18dfc:	beq	19174 <__assert_fail@plt+0x694c>
   18e00:	lsl	r0, r7, #1
   18e04:	mov	r2, r9
   18e08:	add	r1, r0, r7
   18e0c:	mov	r3, #0
   18e10:	lsl	r1, r1, #2
   18e14:	b	18e1c <__assert_fail@plt+0x65f4>
   18e18:	ldr	r2, [r8, r3, lsl #1]
   18e1c:	str	r2, [ip, r3]
   18e20:	add	r3, r3, #12
   18e24:	cmp	r3, r1
   18e28:	bne	18e18 <__assert_fail@plt+0x65f0>
   18e2c:	add	r7, r0, r7
   18e30:	mov	r8, ip
   18e34:	mvn	r3, #0
   18e38:	str	r3, [ip, r7, lsl #2]
   18e3c:	str	r8, [r4, #44]	; 0x2c
   18e40:	mov	r0, r8
   18e44:	ldr	r7, [r4, #4]
   18e48:	bl	20624 <__assert_fail@plt+0xddfc>
   18e4c:	mov	r1, r8
   18e50:	mov	r2, r0
   18e54:	mov	r0, r7
   18e58:	bl	123cc <p11_kit_iter_load_attributes@plt>
   18e5c:	subs	r3, r0, #0
   18e60:	beq	18e70 <__assert_fail@plt+0x6648>
   18e64:	sub	r3, r3, #17
   18e68:	cmp	r3, #1
   18e6c:	bhi	18ed0 <__assert_fail@plt+0x66a8>
   18e70:	ldr	r0, [r4, #44]	; 0x2c
   18e74:	mov	r1, #0
   18e78:	add	r2, r4, #40	; 0x28
   18e7c:	bl	20c54 <__assert_fail@plt+0xe42c>
   18e80:	cmp	r0, #0
   18e84:	beq	18eac <__assert_fail@plt+0x6684>
   18e88:	ldr	r3, [r4, #28]
   18e8c:	tst	r3, #16777216	; 0x1000000
   18e90:	beq	190d4 <__assert_fail@plt+0x68ac>
   18e94:	ldr	r3, [r4, #40]	; 0x28
   18e98:	cmp	r3, #1
   18e9c:	beq	18ee8 <__assert_fail@plt+0x66c0>
   18ea0:	movw	r0, #28140	; 0x6dec
   18ea4:	movt	r0, #2
   18ea8:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   18eac:	mov	r3, #0
   18eb0:	strb	r3, [r6]
   18eb4:	ldr	r2, [sp, #196]	; 0xc4
   18eb8:	mov	r0, #0
   18ebc:	ldr	r3, [r5]
   18ec0:	cmp	r2, r3
   18ec4:	bne	194a8 <__assert_fail@plt+0x6c80>
   18ec8:	add	sp, sp, #204	; 0xcc
   18ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ed0:	bl	12774 <p11_kit_strerror@plt>
   18ed4:	mov	r1, r0
   18ed8:	movw	r0, #28108	; 0x6dcc
   18edc:	movt	r0, #2
   18ee0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   18ee4:	b	18eac <__assert_fail@plt+0x6684>
   18ee8:	ldr	r0, [r4, #44]	; 0x2c
   18eec:	mov	r1, #128	; 0x80
   18ef0:	add	r2, sp, #28
   18ef4:	bl	20c54 <__assert_fail@plt+0xe42c>
   18ef8:	cmp	r0, #0
   18efc:	mvneq	r3, #0
   18f00:	streq	r3, [sp, #28]
   18f04:	beq	19148 <__assert_fail@plt+0x6920>
   18f08:	ldr	r3, [sp, #28]
   18f0c:	cmp	r3, #0
   18f10:	bne	19148 <__assert_fail@plt+0x6920>
   18f14:	ldr	r0, [r4, #44]	; 0x2c
   18f18:	mov	r1, #17
   18f1c:	bl	20d84 <__assert_fail@plt+0xe55c>
   18f20:	subs	r7, r0, #0
   18f24:	beq	192a0 <__assert_fail@plt+0x6a78>
   18f28:	ldr	r3, [r7, #4]
   18f2c:	cmp	r3, #0
   18f30:	beq	192a0 <__assert_fail@plt+0x6a78>
   18f34:	ldr	r3, [r4, #28]
   18f38:	tst	r3, #8388608	; 0x800000
   18f3c:	beq	18f60 <__assert_fail@plt+0x6738>
   18f40:	ldr	r0, [r4, #20]
   18f44:	cmp	r0, #0
   18f48:	beq	193dc <__assert_fail@plt+0x6bb4>
   18f4c:	mov	r1, r7
   18f50:	bl	23010 <secure_getenv@@Base+0x9bc>
   18f54:	cmp	r0, #0
   18f58:	bne	18eac <__assert_fail@plt+0x6684>
   18f5c:	ldr	r3, [r4, #28]
   18f60:	tst	r3, #6291456	; 0x600000
   18f64:	bne	19378 <__assert_fail@plt+0x6b50>
   18f68:	ldr	r8, [r4, #20]
   18f6c:	cmp	r8, #0
   18f70:	beq	18fa0 <__assert_fail@plt+0x6778>
   18f74:	mov	r0, #0
   18f78:	mov	r1, r7
   18f7c:	mov	r2, r0
   18f80:	bl	208dc <__assert_fail@plt+0xe0b4>
   18f84:	movw	r2, #35716	; 0x8b84
   18f88:	movt	r2, #2
   18f8c:	mov	r1, r0
   18f90:	mov	r0, r8
   18f94:	bl	23034 <secure_getenv@@Base+0x9e0>
   18f98:	cmp	r0, #0
   18f9c:	beq	19478 <__assert_fail@plt+0x6c50>
   18fa0:	ldr	r2, [r7, #4]
   18fa4:	add	r8, sp, #68	; 0x44
   18fa8:	ldr	r0, [r4, #12]
   18fac:	movw	r1, #25760	; 0x64a0
   18fb0:	movt	r1, #2
   18fb4:	str	r2, [r4, #52]	; 0x34
   18fb8:	ldr	r3, [r7, #8]
   18fbc:	str	r3, [r4, #56]	; 0x38
   18fc0:	str	r8, [sp]
   18fc4:	bl	1d95c <__assert_fail@plt+0xb134>
   18fc8:	cmp	r0, #0
   18fcc:	str	r0, [r4, #48]	; 0x30
   18fd0:	beq	194dc <__assert_fail@plt+0x6cb4>
   18fd4:	ldr	r0, [r4, #44]	; 0x2c
   18fd8:	movw	r1, #297	; 0x129
   18fdc:	bl	20d84 <__assert_fail@plt+0xe55c>
   18fe0:	subs	r7, r0, #0
   18fe4:	beq	1917c <__assert_fail@plt+0x6954>
   18fe8:	add	r2, sp, #20
   18fec:	movw	r3, #18376	; 0x47c8
   18ff0:	str	r2, [sp, #48]	; 0x30
   18ff4:	movt	r3, #55364	; 0xd844
   18ff8:	mov	r2, #4
   18ffc:	str	r3, [sp, #20]
   19000:	str	r2, [sp, #52]	; 0x34
   19004:	movw	r3, #297	; 0x129
   19008:	str	r3, [sp, #56]	; 0x38
   1900c:	movw	r0, #60080	; 0xeab0
   19010:	ldr	r3, [r7, #4]
   19014:	movt	r0, #1
   19018:	movw	r1, #60180	; 0xeb14
   1901c:	movw	r2, #8900	; 0x22c4
   19020:	movt	r1, #1
   19024:	movt	r2, #1
   19028:	str	r3, [sp, #60]	; 0x3c
   1902c:	movw	r3, #56940	; 0xde6c
   19030:	ldr	lr, [r7, #8]
   19034:	movt	r3, #1
   19038:	mov	r9, #0
   1903c:	mov	ip, #17
   19040:	str	r9, [sp, #44]	; 0x2c
   19044:	str	lr, [sp, #64]	; 0x40
   19048:	str	r9, [sp, #36]	; 0x24
   1904c:	str	r9, [sp, #40]	; 0x28
   19050:	str	ip, [sp, #32]
   19054:	bl	2336c <secure_getenv@@Base+0xd18>
   19058:	ldr	r3, [r7, #4]
   1905c:	cmp	r3, r9
   19060:	mov	r8, r0
   19064:	beq	19074 <__assert_fail@plt+0x684c>
   19068:	ldr	r3, [r7, #8]
   1906c:	cmp	r3, r9
   19070:	bne	191b8 <__assert_fail@plt+0x6990>
   19074:	cmp	r8, #0
   19078:	str	r8, [r4, #60]	; 0x3c
   1907c:	beq	18eac <__assert_fail@plt+0x6684>
   19080:	mov	r0, r8
   19084:	ldr	r1, [pc, #1284]	; 19590 <__assert_fail@plt+0x6d68>
   19088:	bl	23010 <secure_getenv@@Base+0x9bc>
   1908c:	cmp	r0, #0
   19090:	beq	19188 <__assert_fail@plt+0x6960>
   19094:	add	r2, sp, #28
   19098:	movw	r1, #25700	; 0x6464
   1909c:	movt	r1, #2
   190a0:	bl	1dc60 <__assert_fail@plt+0xb438>
   190a4:	subs	r7, r0, #0
   190a8:	beq	1948c <__assert_fail@plt+0x6c64>
   190ac:	mov	r1, r7
   190b0:	ldr	r2, [sp, #28]
   190b4:	ldr	r0, [r4, #12]
   190b8:	bl	1f298 <__assert_fail@plt+0xca70>
   190bc:	str	r0, [r4, #64]	; 0x40
   190c0:	mov	r0, r7
   190c4:	bl	122c4 <free@plt>
   190c8:	ldr	r3, [r4, #64]	; 0x40
   190cc:	cmp	r3, #0
   190d0:	beq	18eac <__assert_fail@plt+0x6684>
   190d4:	ldr	r3, [r4, #16]
   190d8:	cmp	r3, #0
   190dc:	beq	18eb4 <__assert_fail@plt+0x668c>
   190e0:	ldr	r3, [r4, #64]	; 0x40
   190e4:	cmp	r3, #0
   190e8:	beq	18eb4 <__assert_fail@plt+0x668c>
   190ec:	mov	r7, #0
   190f0:	strb	r7, [r6]
   190f4:	ldr	r3, [r4, #64]	; 0x40
   190f8:	ldr	r2, [r3, #4]
   190fc:	cmp	r2, r7
   19100:	beq	18eb4 <__assert_fail@plt+0x668c>
   19104:	mov	r2, r7
   19108:	b	19124 <__assert_fail@plt+0x68fc>
   1910c:	ldr	r3, [r4, #64]	; 0x40
   19110:	add	r7, r7, #1
   19114:	mov	r2, r7
   19118:	ldr	r1, [r3, #4]
   1911c:	cmp	r7, r1
   19120:	bcs	18eb4 <__assert_fail@plt+0x668c>
   19124:	ldr	r3, [r3]
   19128:	ldr	r0, [r4, #16]
   1912c:	ldr	r1, [r3, r2, lsl #2]
   19130:	bl	23010 <secure_getenv@@Base+0x9bc>
   19134:	cmp	r0, #0
   19138:	beq	1910c <__assert_fail@plt+0x68e4>
   1913c:	mov	r3, #1
   19140:	strb	r3, [r6]
   19144:	b	18eb4 <__assert_fail@plt+0x668c>
   19148:	movw	r3, #17132	; 0x42ec
   1914c:	movt	r3, #4
   19150:	ldr	r3, [r3]
   19154:	tst	r3, #64	; 0x40
   19158:	beq	18eac <__assert_fail@plt+0x6684>
   1915c:	movw	r1, #28172	; 0x6e0c
   19160:	mov	r0, #64	; 0x40
   19164:	movt	r1, #2
   19168:	ldr	r2, [pc, #1060]	; 19594 <__assert_fail@plt+0x6d6c>
   1916c:	bl	22d4c <secure_getenv@@Base+0x6f8>
   19170:	b	18eac <__assert_fail@plt+0x6684>
   19174:	mov	r0, r7
   19178:	b	18e2c <__assert_fail@plt+0x6604>
   1917c:	ldr	r0, [r4, #60]	; 0x3c
   19180:	cmp	r0, #0
   19184:	bne	19084 <__assert_fail@plt+0x685c>
   19188:	ldr	r0, [r4, #48]	; 0x30
   1918c:	cmp	r0, #0
   19190:	beq	190d4 <__assert_fail@plt+0x68ac>
   19194:	ldr	r2, [r4, #52]	; 0x34
   19198:	add	ip, sp, #28
   1919c:	ldr	r3, [r4, #56]	; 0x38
   191a0:	ldr	r1, [pc, #1000]	; 19590 <__assert_fail@plt+0x6d68>
   191a4:	str	ip, [sp]
   191a8:	bl	1eb5c <__assert_fail@plt+0xc334>
   191ac:	subs	r7, r0, #0
   191b0:	beq	190d4 <__assert_fail@plt+0x68ac>
   191b4:	b	190ac <__assert_fail@plt+0x6884>
   191b8:	mov	r1, r9
   191bc:	mov	r0, r9
   191c0:	bl	1233c <p11_kit_iter_new@plt>
   191c4:	add	r1, sp, #44	; 0x2c
   191c8:	mov	r2, #2
   191cc:	add	fp, sp, #68	; 0x44
   191d0:	mov	r7, r0
   191d4:	bl	12234 <p11_kit_iter_add_filter@plt>
   191d8:	ldr	r0, [r4, #4]
   191dc:	bl	12714 <p11_kit_iter_get_module@plt>
   191e0:	mov	sl, r0
   191e4:	ldr	r0, [r4, #4]
   191e8:	bl	12300 <p11_kit_iter_get_session@plt>
   191ec:	mov	r1, sl
   191f0:	mov	r2, r9
   191f4:	mov	r3, r0
   191f8:	mov	r0, r7
   191fc:	bl	126a8 <p11_kit_iter_begin_with@plt>
   19200:	mov	r0, r7
   19204:	bl	126b4 <p11_kit_iter_next@plt>
   19208:	subs	sl, r0, #0
   1920c:	beq	19248 <__assert_fail@plt+0x6a20>
   19210:	cmp	sl, #1
   19214:	bls	1923c <__assert_fail@plt+0x6a14>
   19218:	mov	r0, sl
   1921c:	bl	12774 <p11_kit_strerror@plt>
   19220:	mov	r1, r0
   19224:	movw	r0, #28484	; 0x6f44
   19228:	movt	r0, #2
   1922c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   19230:	mov	r0, r8
   19234:	bl	23458 <secure_getenv@@Base+0xe04>
   19238:	mov	r8, #0
   1923c:	mov	r0, r7
   19240:	bl	12618 <p11_kit_iter_free@plt>
   19244:	b	19074 <__assert_fail@plt+0x684c>
   19248:	add	r1, sp, #32
   1924c:	mov	r2, #1
   19250:	bl	20980 <__assert_fail@plt+0xe158>
   19254:	mov	r2, #1
   19258:	mov	r9, r0
   1925c:	mov	r0, r7
   19260:	mov	r1, r9
   19264:	bl	123cc <p11_kit_iter_load_attributes@plt>
   19268:	subs	sl, r0, #0
   1926c:	beq	192cc <__assert_fail@plt+0x6aa4>
   19270:	mov	r0, r9
   19274:	bl	208a0 <__assert_fail@plt+0xe078>
   19278:	b	19210 <__assert_fail@plt+0x69e8>
   1927c:	movw	r0, #23980	; 0x5dac
   19280:	movw	r1, #24876	; 0x612c
   19284:	movt	r0, #2
   19288:	movt	r1, #2
   1928c:	movw	r2, #27680	; 0x6c20
   19290:	movt	r2, #2
   19294:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19298:	mov	r8, #0
   1929c:	b	18e3c <__assert_fail@plt+0x6614>
   192a0:	movw	r3, #17132	; 0x42ec
   192a4:	movt	r3, #4
   192a8:	ldr	r3, [r3]
   192ac:	tst	r3, #64	; 0x40
   192b0:	beq	18eac <__assert_fail@plt+0x6684>
   192b4:	movw	r1, #28208	; 0x6e30
   192b8:	mov	r0, #64	; 0x40
   192bc:	movt	r1, #2
   192c0:	ldr	r2, [pc, #716]	; 19594 <__assert_fail@plt+0x6d6c>
   192c4:	bl	22d4c <secure_getenv@@Base+0x6f8>
   192c8:	b	18eac <__assert_fail@plt+0x6684>
   192cc:	ldr	ip, [r9, #8]
   192d0:	movw	r1, #25620	; 0x6414
   192d4:	ldr	sl, [r9, #4]
   192d8:	movt	r1, #2
   192dc:	ldr	r0, [r4, #12]
   192e0:	mov	r3, ip
   192e4:	str	fp, [sp]
   192e8:	mov	r2, sl
   192ec:	str	ip, [sp, #8]
   192f0:	bl	1d95c <__assert_fail@plt+0xb134>
   192f4:	ldr	ip, [sp, #8]
   192f8:	subs	r3, r0, #0
   192fc:	str	r3, [sp, #12]
   19300:	beq	194c8 <__assert_fail@plt+0x6ca0>
   19304:	add	r3, sp, #24
   19308:	mov	r2, ip
   1930c:	str	r3, [sp]
   19310:	add	ip, sp, #28
   19314:	movw	r3, #25652	; 0x6434
   19318:	str	ip, [sp, #4]
   1931c:	mov	r1, sl
   19320:	movt	r3, #2
   19324:	bl	12708 <asn1_der_decoding_startEnd@plt>
   19328:	cmp	r0, #0
   1932c:	bne	194ac <__assert_fail@plt+0x6c84>
   19330:	ldr	r3, [sp, #24]
   19334:	ldr	r2, [sp, #28]
   19338:	add	r0, sl, r3
   1933c:	rsb	r3, r3, r2
   19340:	add	r3, r3, #1
   19344:	str	r3, [sp, #8]
   19348:	mov	r1, r3
   1934c:	bl	1e9e8 <__assert_fail@plt+0xc1c0>
   19350:	ldr	r3, [sp, #8]
   19354:	cmp	r0, #0
   19358:	bne	19528 <__assert_fail@plt+0x6d00>
   1935c:	movw	r3, #17132	; 0x42ec
   19360:	movt	r3, #4
   19364:	ldr	r3, [r3]
   19368:	tst	r3, #64	; 0x40
   1936c:	bne	19510 <__assert_fail@plt+0x6ce8>
   19370:	mov	sl, #5
   19374:	b	19270 <__assert_fail@plt+0x6a48>
   19378:	movw	r1, #18276	; 0x4764
   1937c:	ldr	r0, [r4, #44]	; 0x2c
   19380:	movt	r1, #55364	; 0xd844
   19384:	add	r2, sp, #24
   19388:	bl	20b90 <__assert_fail@plt+0xe368>
   1938c:	cmp	r0, #0
   19390:	beq	19424 <__assert_fail@plt+0x6bfc>
   19394:	ldrb	r3, [sp, #24]
   19398:	cmp	r3, #0
   1939c:	beq	19424 <__assert_fail@plt+0x6bfc>
   193a0:	mov	r3, #4194304	; 0x400000
   193a4:	ldr	r2, [r4, #28]
   193a8:	tst	r3, r2
   193ac:	bne	18f68 <__assert_fail@plt+0x6740>
   193b0:	movw	r3, #17132	; 0x42ec
   193b4:	movt	r3, #4
   193b8:	ldr	r3, [r3]
   193bc:	tst	r3, #64	; 0x40
   193c0:	beq	18eac <__assert_fail@plt+0x6684>
   193c4:	movw	r1, #28280	; 0x6e78
   193c8:	mov	r0, #64	; 0x40
   193cc:	movt	r1, #2
   193d0:	ldr	r2, [pc, #444]	; 19594 <__assert_fail@plt+0x6d6c>
   193d4:	bl	22d4c <secure_getenv@@Base+0x6f8>
   193d8:	b	18eac <__assert_fail@plt+0x6684>
   193dc:	mov	r3, r0
   193e0:	movw	r1, #4084	; 0xff4
   193e4:	movw	r0, #4340	; 0x10f4
   193e8:	movt	r1, #2
   193ec:	movt	r0, #2
   193f0:	movw	r2, #2208	; 0x8a0
   193f4:	movt	r2, #2
   193f8:	bl	2336c <secure_getenv@@Base+0xd18>
   193fc:	cmp	r0, #0
   19400:	str	r0, [r4, #20]
   19404:	bne	18f4c <__assert_fail@plt+0x6724>
   19408:	movw	r0, #23980	; 0x5dac
   1940c:	movw	r1, #28252	; 0x6e5c
   19410:	movt	r0, #2
   19414:	movt	r1, #2
   19418:	ldr	r2, [pc, #376]	; 19598 <__assert_fail@plt+0x6d70>
   1941c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19420:	b	18fd4 <__assert_fail@plt+0x67ac>
   19424:	ldr	r0, [r4, #36]	; 0x24
   19428:	ldr	r1, [r4, #44]	; 0x2c
   1942c:	bl	23010 <secure_getenv@@Base+0x9bc>
   19430:	cmp	r0, #0
   19434:	bne	193b0 <__assert_fail@plt+0x6b88>
   19438:	ldr	r0, [r4, #32]
   1943c:	ldr	r1, [r4, #44]	; 0x2c
   19440:	bl	23010 <secure_getenv@@Base+0x9bc>
   19444:	cmp	r0, #0
   19448:	bne	193b0 <__assert_fail@plt+0x6b88>
   1944c:	ldr	r0, [r4, #44]	; 0x2c
   19450:	mov	r1, #134	; 0x86
   19454:	add	r2, sp, #20
   19458:	bl	20b90 <__assert_fail@plt+0xe368>
   1945c:	cmp	r0, #0
   19460:	beq	193b0 <__assert_fail@plt+0x6b88>
   19464:	ldrb	r3, [sp, #20]
   19468:	cmp	r3, #0
   1946c:	movne	r3, #2097152	; 0x200000
   19470:	bne	193a4 <__assert_fail@plt+0x6b7c>
   19474:	b	193b0 <__assert_fail@plt+0x6b88>
   19478:	movw	r0, #24400	; 0x5f50
   1947c:	ldr	r1, [pc, #276]	; 19598 <__assert_fail@plt+0x6d70>
   19480:	movt	r0, #2
   19484:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19488:	b	18fd4 <__assert_fail@plt+0x67ac>
   1948c:	movw	r0, #23980	; 0x5dac
   19490:	movw	r1, #25780	; 0x64b4
   19494:	movt	r0, #2
   19498:	movt	r1, #2
   1949c:	ldr	r2, [pc, #248]	; 1959c <__assert_fail@plt+0x6d74>
   194a0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   194a4:	b	18eac <__assert_fail@plt+0x6684>
   194a8:	bl	12360 <__stack_chk_fail@plt>
   194ac:	movw	r0, #23980	; 0x5dac
   194b0:	movw	r1, #25660	; 0x643c
   194b4:	movt	r0, #2
   194b8:	movt	r1, #2
   194bc:	ldr	r2, [pc, #220]	; 195a0 <__assert_fail@plt+0x6d78>
   194c0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   194c4:	b	19370 <__assert_fail@plt+0x6b48>
   194c8:	mov	r1, fp
   194cc:	movw	r0, #28368	; 0x6ed0
   194d0:	movt	r0, #2
   194d4:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   194d8:	b	19370 <__assert_fail@plt+0x6b48>
   194dc:	mov	r1, r8
   194e0:	movw	r0, #28336	; 0x6eb0
   194e4:	movt	r0, #2
   194e8:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   194ec:	b	18eac <__assert_fail@plt+0x6684>
   194f0:	mov	r0, #1
   194f4:	mov	r1, #12
   194f8:	bl	1221c <calloc@plt>
   194fc:	subs	ip, r0, #0
   19500:	beq	1927c <__assert_fail@plt+0x6a54>
   19504:	mov	r7, #0
   19508:	mov	r0, r7
   1950c:	b	18e2c <__assert_fail@plt+0x6604>
   19510:	movw	r1, #28420	; 0x6f04
   19514:	mov	r0, #64	; 0x40
   19518:	movt	r1, #2
   1951c:	ldr	r2, [pc, #128]	; 195a4 <__assert_fail@plt+0x6d7c>
   19520:	bl	22d4c <secure_getenv@@Base+0x6f8>
   19524:	b	19370 <__assert_fail@plt+0x6b48>
   19528:	ldr	r0, [sp, #24]
   1952c:	mov	r1, r3
   19530:	add	r0, sl, r0
   19534:	bl	22490 <__assert_fail@plt+0xfc68>
   19538:	subs	r1, r0, #0
   1953c:	beq	19560 <__assert_fail@plt+0x6d38>
   19540:	ldr	r2, [sp, #12]
   19544:	mov	r0, r8
   19548:	bl	23034 <secure_getenv@@Base+0x9e0>
   1954c:	cmp	r0, #0
   19550:	beq	1957c <__assert_fail@plt+0x6d54>
   19554:	mov	r0, r9
   19558:	bl	208a0 <__assert_fail@plt+0xe078>
   1955c:	b	19200 <__assert_fail@plt+0x69d8>
   19560:	movw	r0, #23980	; 0x5dac
   19564:	movw	r1, #28472	; 0x6f38
   19568:	movt	r0, #2
   1956c:	movt	r1, #2
   19570:	ldr	r2, [pc, #40]	; 195a0 <__assert_fail@plt+0x6d78>
   19574:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19578:	b	19370 <__assert_fail@plt+0x6b48>
   1957c:	movw	r0, #24400	; 0x5f50
   19580:	ldr	r1, [pc, #24]	; 195a0 <__assert_fail@plt+0x6d78>
   19584:	movt	r0, #2
   19588:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1958c:	b	19370 <__assert_fail@plt+0x6b48>
   19590:	andeq	r6, r2, ip, lsl #25
   19594:	andeq	r6, r2, r4, lsr ip
   19598:	andeq	r6, r2, r8, asr #24
   1959c:	muleq	r2, r4, ip
   195a0:	andeq	r6, r2, ip, asr ip
   195a4:	andeq	r6, r2, r4, ror ip
   195a8:	push	{r4, lr}
   195ac:	mov	r4, r0
   195b0:	mov	r0, r1
   195b4:	mov	r1, #3
   195b8:	bl	20d84 <__assert_fail@plt+0xe55c>
   195bc:	subs	r3, r0, #0
   195c0:	beq	195dc <__assert_fail@plt+0x6db4>
   195c4:	ldr	r0, [r3, #4]
   195c8:	cmp	r0, #0
   195cc:	beq	195dc <__assert_fail@plt+0x6db4>
   195d0:	ldr	r1, [r3, #8]
   195d4:	cmp	r1, #0
   195d8:	bne	1963c <__assert_fail@plt+0x6e14>
   195dc:	ldr	r3, [r4]
   195e0:	cmp	r3, #1
   195e4:	beq	19614 <__assert_fail@plt+0x6dec>
   195e8:	mov	r0, #8
   195ec:	bl	1245c <malloc@plt>
   195f0:	subs	r2, r0, #0
   195f4:	movwne	r3, #28552	; 0x6f88
   195f8:	movtne	r3, #2
   195fc:	movne	ip, r2
   19600:	moveq	ip, r2
   19604:	ldmne	r3, {r0, r1}
   19608:	stmne	r2, {r0, r1}
   1960c:	mov	r0, ip
   19610:	pop	{r4, pc}
   19614:	mov	r0, #12
   19618:	bl	1245c <malloc@plt>
   1961c:	subs	ip, r0, #0
   19620:	beq	1960c <__assert_fail@plt+0x6de4>
   19624:	movw	r3, #28540	; 0x6f7c
   19628:	movt	r3, #2
   1962c:	ldm	r3, {r0, r1, r2}
   19630:	stm	ip, {r0, r1, r2}
   19634:	mov	r0, ip
   19638:	pop	{r4, pc}
   1963c:	pop	{r4, lr}
   19640:	b	224d4 <strndup@@Base>
   19644:	push	{r4, lr}
   19648:	mov	r1, #0
   1964c:	mov	r2, #68	; 0x44
   19650:	mov	r4, r0
   19654:	bl	125e8 <memset@plt>
   19658:	bl	1d69c <__assert_fail@plt+0xae74>
   1965c:	cmp	r0, #0
   19660:	str	r0, [r4, #12]
   19664:	beq	196f4 <__assert_fail@plt+0x6ecc>
   19668:	mov	r0, #0
   1966c:	mov	r1, r0
   19670:	bl	1233c <p11_kit_iter_new@plt>
   19674:	cmp	r0, #0
   19678:	str	r0, [r4, #4]
   1967c:	beq	19710 <__assert_fail@plt+0x6ee8>
   19680:	movw	r0, #36072	; 0x8ce8
   19684:	movw	r1, #36192	; 0x8d60
   19688:	movt	r0, #1
   1968c:	movt	r1, #1
   19690:	movw	r2, #2208	; 0x8a0
   19694:	mov	r3, #0
   19698:	movt	r2, #2
   1969c:	bl	2336c <secure_getenv@@Base+0xd18>
   196a0:	cmp	r0, #0
   196a4:	str	r0, [r4, #36]	; 0x24
   196a8:	beq	1972c <__assert_fail@plt+0x6f04>
   196ac:	movw	r0, #36024	; 0x8cb8
   196b0:	movw	r1, #36092	; 0x8cfc
   196b4:	movt	r0, #1
   196b8:	movt	r1, #1
   196bc:	movw	r2, #2208	; 0x8a0
   196c0:	mov	r3, #0
   196c4:	movt	r2, #2
   196c8:	bl	2336c <secure_getenv@@Base+0xd18>
   196cc:	cmp	r0, #0
   196d0:	str	r0, [r4, #32]
   196d4:	beq	19748 <__assert_fail@plt+0x6f20>
   196d8:	movw	r1, #36240	; 0x8d90
   196dc:	ldr	r0, [r4, #4]
   196e0:	mov	r2, r4
   196e4:	movt	r1, #1
   196e8:	mov	r3, #0
   196ec:	pop	{r4, lr}
   196f0:	b	1251c <p11_kit_iter_add_callback@plt>
   196f4:	movw	r0, #23980	; 0x5dac
   196f8:	movw	r1, #28560	; 0x6f90
   196fc:	movt	r0, #2
   19700:	movt	r1, #2
   19704:	ldr	r2, [pc, #88]	; 19764 <__assert_fail@plt+0x6f3c>
   19708:	pop	{r4, lr}
   1970c:	b	22e10 <secure_getenv@@Base+0x7bc>
   19710:	movw	r0, #23980	; 0x5dac
   19714:	movw	r1, #28584	; 0x6fa8
   19718:	movt	r0, #2
   1971c:	movt	r1, #2
   19720:	ldr	r2, [pc, #60]	; 19764 <__assert_fail@plt+0x6f3c>
   19724:	pop	{r4, lr}
   19728:	b	22e10 <secure_getenv@@Base+0x7bc>
   1972c:	movw	r0, #23980	; 0x5dac
   19730:	movw	r1, #28604	; 0x6fbc
   19734:	movt	r0, #2
   19738:	movt	r1, #2
   1973c:	ldr	r2, [pc, #32]	; 19764 <__assert_fail@plt+0x6f3c>
   19740:	pop	{r4, lr}
   19744:	b	22e10 <secure_getenv@@Base+0x7bc>
   19748:	movw	r0, #23980	; 0x5dac
   1974c:	movw	r1, #28632	; 0x6fd8
   19750:	movt	r0, #2
   19754:	movt	r1, #2
   19758:	ldr	r2, [pc, #4]	; 19764 <__assert_fail@plt+0x6f3c>
   1975c:	pop	{r4, lr}
   19760:	b	22e10 <secure_getenv@@Base+0x7bc>
   19764:	andeq	r6, r2, r8, lsr #25
   19768:	push	{r3, r4, r5, lr}
   1976c:	mov	r4, r0
   19770:	bl	18c6c <__assert_fail@plt+0x6444>
   19774:	ldr	r0, [r4, #16]
   19778:	mov	r5, #0
   1977c:	bl	23458 <secure_getenv@@Base+0xe04>
   19780:	ldr	r0, [r4, #20]
   19784:	str	r5, [r4, #16]
   19788:	bl	23458 <secure_getenv@@Base+0xe04>
   1978c:	ldr	r0, [r4, #36]	; 0x24
   19790:	str	r5, [r4, #20]
   19794:	bl	23458 <secure_getenv@@Base+0xe04>
   19798:	ldr	r0, [r4, #32]
   1979c:	str	r5, [r4, #36]	; 0x24
   197a0:	bl	23458 <secure_getenv@@Base+0xe04>
   197a4:	ldr	r0, [r4, #12]
   197a8:	str	r5, [r4, #32]
   197ac:	bl	23458 <secure_getenv@@Base+0xe04>
   197b0:	ldr	r0, [r4, #4]
   197b4:	str	r5, [r4, #12]
   197b8:	bl	12618 <p11_kit_iter_free@plt>
   197bc:	ldr	r0, [r4]
   197c0:	str	r5, [r4, #4]
   197c4:	cmp	r0, r5
   197c8:	beq	197d4 <__assert_fail@plt+0x6fac>
   197cc:	bl	127f8 <p11_kit_modules_finalize_and_release@plt>
   197d0:	str	r5, [r4]
   197d4:	ldr	r0, [r4, #8]
   197d8:	cmp	r0, #0
   197dc:	popeq	{r3, r4, r5, pc}
   197e0:	bl	12474 <p11_kit_uri_free@plt>
   197e4:	mov	r3, #0
   197e8:	str	r3, [r4, #8]
   197ec:	pop	{r3, r4, r5, pc}
   197f0:	push	{r4, r5, r6, r7, r8, lr}
   197f4:	movw	r4, #17144	; 0x42f8
   197f8:	movt	r4, #4
   197fc:	sub	sp, sp, #64	; 0x40
   19800:	mov	r6, r1
   19804:	mov	r5, r0
   19808:	ldr	r3, [r4]
   1980c:	mov	r0, r1
   19810:	mov	r2, #7
   19814:	movw	r1, #24924	; 0x615c
   19818:	movt	r1, #2
   1981c:	mov	ip, #1
   19820:	str	r3, [sp, #60]	; 0x3c
   19824:	add	lr, sp, #12
   19828:	mov	r3, #2
   1982c:	str	ip, [sp, #12]
   19830:	str	r3, [sp, #16]
   19834:	mov	ip, #0
   19838:	mov	r3, #4
   1983c:	str	ip, [sp, #20]
   19840:	str	ip, [sp, #24]
   19844:	add	r7, sp, #16
   19848:	str	lr, [sp, #28]
   1984c:	add	ip, sp, #20
   19850:	mov	lr, #128	; 0x80
   19854:	str	r7, [sp, #40]	; 0x28
   19858:	mov	r8, #135	; 0x87
   1985c:	str	r3, [sp, #32]
   19860:	str	r3, [sp, #44]	; 0x2c
   19864:	str	r3, [sp, #56]	; 0x38
   19868:	str	r8, [sp, #36]	; 0x24
   1986c:	str	lr, [sp, #48]	; 0x30
   19870:	str	ip, [sp, #52]	; 0x34
   19874:	bl	127bc <strncmp@plt>
   19878:	subs	r7, r0, #0
   1987c:	bne	198b4 <__assert_fail@plt+0x708c>
   19880:	ldr	r8, [r5, #8]
   19884:	cmp	r8, #0
   19888:	beq	1998c <__assert_fail@plt+0x7164>
   1988c:	movw	r0, #28660	; 0x6ff4
   19890:	movt	r0, #2
   19894:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   19898:	mov	r0, r7
   1989c:	ldr	r2, [sp, #60]	; 0x3c
   198a0:	ldr	r3, [r4]
   198a4:	cmp	r2, r3
   198a8:	bne	19a94 <__assert_fail@plt+0x726c>
   198ac:	add	sp, sp, #64	; 0x40
   198b0:	pop	{r4, r5, r6, r7, r8, pc}
   198b4:	movw	r1, #28812	; 0x708c
   198b8:	mov	r0, r6
   198bc:	movt	r1, #2
   198c0:	bl	1227c <strcmp@plt>
   198c4:	subs	r3, r0, #0
   198c8:	beq	19938 <__assert_fail@plt+0x7110>
   198cc:	movw	r1, #28824	; 0x7098
   198d0:	mov	r0, r6
   198d4:	movt	r1, #2
   198d8:	bl	1227c <strcmp@plt>
   198dc:	subs	r3, r0, #0
   198e0:	beq	199f8 <__assert_fail@plt+0x71d0>
   198e4:	movw	r1, #28840	; 0x70a8
   198e8:	mov	r0, r6
   198ec:	movt	r1, #2
   198f0:	bl	1227c <strcmp@plt>
   198f4:	subs	r3, r0, #0
   198f8:	beq	199d8 <__assert_fail@plt+0x71b0>
   198fc:	movw	r1, #28852	; 0x70b4
   19900:	mov	r0, r6
   19904:	movt	r1, #2
   19908:	bl	1227c <strcmp@plt>
   1990c:	subs	r3, r0, #0
   19910:	beq	19a4c <__assert_fail@plt+0x7224>
   19914:	ldrb	r3, [r6]
   19918:	cmp	r3, #97	; 0x61
   1991c:	beq	19a18 <__assert_fail@plt+0x71f0>
   19920:	mov	r1, r6
   19924:	movw	r0, #28868	; 0x70c4
   19928:	movt	r0, #2
   1992c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   19930:	mov	r0, #0
   19934:	b	1989c <__assert_fail@plt+0x7074>
   19938:	str	r3, [sp]
   1993c:	add	r1, sp, #24
   19940:	add	r3, sp, #48	; 0x30
   19944:	add	r2, sp, #36	; 0x24
   19948:	bl	208dc <__assert_fail@plt+0xe0b4>
   1994c:	ldr	r3, [r5, #28]
   19950:	orr	r3, r3, #10485760	; 0xa00000
   19954:	str	r3, [r5, #28]
   19958:	mov	r6, r0
   1995c:	mov	r0, r6
   19960:	ldr	r7, [r5, #4]
   19964:	bl	20624 <__assert_fail@plt+0xddfc>
   19968:	mov	r1, r6
   1996c:	mov	r2, r0
   19970:	mov	r0, r7
   19974:	bl	12234 <p11_kit_iter_add_filter@plt>
   19978:	ldr	r3, [r5, #24]
   1997c:	mov	r0, #1
   19980:	add	r3, r3, r0
   19984:	str	r3, [r5, #24]
   19988:	b	1989c <__assert_fail@plt+0x7074>
   1998c:	bl	12564 <p11_kit_uri_new@plt>
   19990:	mov	r1, #14
   19994:	mov	r2, r0
   19998:	str	r0, [r5, #8]
   1999c:	mov	r0, r6
   199a0:	bl	12570 <p11_kit_uri_parse@plt>
   199a4:	cmp	r0, #0
   199a8:	bne	19a7c <__assert_fail@plt+0x7254>
   199ac:	ldr	r0, [r5, #8]
   199b0:	bl	1257c <p11_kit_uri_any_unrecognized@plt>
   199b4:	cmp	r0, #0
   199b8:	bne	19a6c <__assert_fail@plt+0x7244>
   199bc:	ldmib	r5, {r0, r1}
   199c0:	bl	122a0 <p11_kit_iter_set_uri@plt>
   199c4:	ldr	r3, [r5, #24]
   199c8:	mov	r0, #1
   199cc:	add	r3, r3, r0
   199d0:	str	r3, [r5, #24]
   199d4:	b	1989c <__assert_fail@plt+0x7074>
   199d8:	add	r1, sp, #24
   199dc:	add	r2, sp, #48	; 0x30
   199e0:	bl	208dc <__assert_fail@plt+0xe0b4>
   199e4:	ldr	r3, [r5, #28]
   199e8:	orr	r3, r3, #12582912	; 0xc00000
   199ec:	str	r3, [r5, #28]
   199f0:	mov	r6, r0
   199f4:	b	1995c <__assert_fail@plt+0x7134>
   199f8:	add	r1, sp, #24
   199fc:	add	r2, sp, #48	; 0x30
   19a00:	bl	208dc <__assert_fail@plt+0xe0b4>
   19a04:	ldr	r3, [r5, #28]
   19a08:	orr	r3, r3, #14680064	; 0xe00000
   19a0c:	str	r3, [r5, #28]
   19a10:	mov	r6, r0
   19a14:	b	1995c <__assert_fail@plt+0x7134>
   19a18:	ldrb	r3, [r6, #1]
   19a1c:	cmp	r3, #108	; 0x6c
   19a20:	bne	19920 <__assert_fail@plt+0x70f8>
   19a24:	ldrb	r3, [r6, #2]
   19a28:	cmp	r3, #108	; 0x6c
   19a2c:	bne	19920 <__assert_fail@plt+0x70f8>
   19a30:	ldrb	r0, [r6, #3]
   19a34:	cmp	r0, #0
   19a38:	bne	19920 <__assert_fail@plt+0x70f8>
   19a3c:	mov	r1, r0
   19a40:	bl	208dc <__assert_fail@plt+0xe0b4>
   19a44:	mov	r6, r0
   19a48:	b	1995c <__assert_fail@plt+0x7134>
   19a4c:	add	r1, sp, #24
   19a50:	add	r2, sp, #48	; 0x30
   19a54:	bl	208dc <__assert_fail@plt+0xe0b4>
   19a58:	ldr	r3, [r5, #28]
   19a5c:	orr	r3, r3, #8388608	; 0x800000
   19a60:	str	r3, [r5, #28]
   19a64:	mov	r6, r0
   19a68:	b	1995c <__assert_fail@plt+0x7134>
   19a6c:	movw	r0, #28744	; 0x7048
   19a70:	movt	r0, #2
   19a74:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   19a78:	b	199bc <__assert_fail@plt+0x7194>
   19a7c:	mov	r1, r6
   19a80:	movw	r0, #28704	; 0x7020
   19a84:	movt	r0, #2
   19a88:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   19a8c:	mov	r0, r8
   19a90:	b	1989c <__assert_fail@plt+0x7074>
   19a94:	bl	12360 <__stack_chk_fail@plt>
   19a98:	push	{r4, r5, r6, lr}
   19a9c:	mov	r4, r1
   19aa0:	mov	r5, r0
   19aa4:	movw	r1, #28908	; 0x70ec
   19aa8:	mov	r0, r4
   19aac:	movt	r1, #2
   19ab0:	bl	1227c <strcmp@plt>
   19ab4:	cmp	r0, #0
   19ab8:	beq	19b30 <__assert_fail@plt+0x7308>
   19abc:	movw	r1, #28920	; 0x70f8
   19ac0:	mov	r0, r4
   19ac4:	movt	r1, #2
   19ac8:	bl	1227c <strcmp@plt>
   19acc:	cmp	r0, #0
   19ad0:	bne	19b80 <__assert_fail@plt+0x7358>
   19ad4:	ldr	r3, [r5, #16]
   19ad8:	ldr	r4, [pc, #532]	; 19cf4 <__assert_fail@plt+0x74cc>
   19adc:	cmp	r3, #0
   19ae0:	bne	19b40 <__assert_fail@plt+0x7318>
   19ae4:	movw	r0, #13676	; 0x356c
   19ae8:	movw	r1, #13776	; 0x35d0
   19aec:	movt	r0, #2
   19af0:	movt	r1, #2
   19af4:	movw	r2, #8900	; 0x22c4
   19af8:	movt	r2, #1
   19afc:	bl	2336c <secure_getenv@@Base+0xd18>
   19b00:	cmp	r0, #0
   19b04:	mov	r3, r0
   19b08:	str	r0, [r5, #16]
   19b0c:	bne	19b40 <__assert_fail@plt+0x7318>
   19b10:	movw	r0, #23980	; 0x5dac
   19b14:	movw	r1, #29044	; 0x7174
   19b18:	movt	r0, #2
   19b1c:	movt	r1, #2
   19b20:	ldr	r2, [pc, #464]	; 19cf8 <__assert_fail@plt+0x74d0>
   19b24:	mov	r4, r3
   19b28:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19b2c:	b	19b78 <__assert_fail@plt+0x7350>
   19b30:	ldr	r4, [pc, #452]	; 19cfc <__assert_fail@plt+0x74d4>
   19b34:	ldr	r3, [r5, #16]
   19b38:	cmp	r3, #0
   19b3c:	beq	19ae4 <__assert_fail@plt+0x72bc>
   19b40:	mov	r0, r4
   19b44:	bl	125c4 <__strdup@plt>
   19b48:	subs	r4, r0, #0
   19b4c:	beq	19c6c <__assert_fail@plt+0x7444>
   19b50:	mov	r1, r4
   19b54:	mov	r2, r4
   19b58:	ldr	r0, [r5, #16]
   19b5c:	bl	23034 <secure_getenv@@Base+0x9e0>
   19b60:	subs	r4, r0, #0
   19b64:	bne	19b78 <__assert_fail@plt+0x7350>
   19b68:	movw	r0, #24400	; 0x5f50
   19b6c:	ldr	r1, [pc, #388]	; 19cf8 <__assert_fail@plt+0x74d0>
   19b70:	movt	r0, #2
   19b74:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19b78:	mov	r0, r4
   19b7c:	pop	{r4, r5, r6, pc}
   19b80:	movw	r1, #28932	; 0x7104
   19b84:	mov	r0, r4
   19b88:	movt	r1, #2
   19b8c:	bl	1227c <strcmp@plt>
   19b90:	cmp	r0, #0
   19b94:	beq	19c64 <__assert_fail@plt+0x743c>
   19b98:	movw	r1, #55308	; 0xd80c
   19b9c:	mov	r0, r4
   19ba0:	movt	r1, #2
   19ba4:	bl	1227c <strcmp@plt>
   19ba8:	cmp	r0, #0
   19bac:	beq	19c64 <__assert_fail@plt+0x743c>
   19bb0:	movw	r1, #28952	; 0x7118
   19bb4:	mov	r0, r4
   19bb8:	movt	r1, #2
   19bbc:	bl	1227c <strcmp@plt>
   19bc0:	cmp	r0, #0
   19bc4:	beq	19c8c <__assert_fail@plt+0x7464>
   19bc8:	movw	r1, #28968	; 0x7128
   19bcc:	mov	r0, r4
   19bd0:	movt	r1, #2
   19bd4:	bl	1227c <strcmp@plt>
   19bd8:	cmp	r0, #0
   19bdc:	beq	19c94 <__assert_fail@plt+0x746c>
   19be0:	movw	r1, #28988	; 0x713c
   19be4:	mov	r0, r4
   19be8:	movt	r1, #2
   19bec:	bl	1227c <strcmp@plt>
   19bf0:	cmp	r0, #0
   19bf4:	beq	19c9c <__assert_fail@plt+0x7474>
   19bf8:	movw	r1, #29004	; 0x714c
   19bfc:	mov	r0, r4
   19c00:	movt	r1, #2
   19c04:	bl	1227c <strcmp@plt>
   19c08:	cmp	r0, #0
   19c0c:	beq	19ca4 <__assert_fail@plt+0x747c>
   19c10:	movw	r1, #29016	; 0x7158
   19c14:	mov	r0, r4
   19c18:	movt	r1, #2
   19c1c:	bl	1227c <strcmp@plt>
   19c20:	cmp	r0, #0
   19c24:	beq	19cac <__assert_fail@plt+0x7484>
   19c28:	mov	r0, r4
   19c2c:	bl	12540 <strlen@plt>
   19c30:	movw	r1, #29032	; 0x7168
   19c34:	movt	r1, #2
   19c38:	mov	r6, r0
   19c3c:	mov	r0, r4
   19c40:	bl	1281c <strspn@plt>
   19c44:	cmp	r6, r0
   19c48:	beq	19cb4 <__assert_fail@plt+0x748c>
   19c4c:	mov	r1, r4
   19c50:	movw	r0, #29076	; 0x7194
   19c54:	movt	r0, #2
   19c58:	mov	r4, #0
   19c5c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   19c60:	b	19b78 <__assert_fail@plt+0x7350>
   19c64:	ldr	r4, [pc, #148]	; 19d00 <__assert_fail@plt+0x74d8>
   19c68:	b	19b34 <__assert_fail@plt+0x730c>
   19c6c:	ldr	r2, [pc, #132]	; 19cf8 <__assert_fail@plt+0x74d0>
   19c70:	movw	r0, #23980	; 0x5dac
   19c74:	movw	r1, #25780	; 0x64b4
   19c78:	movt	r0, #2
   19c7c:	movt	r1, #2
   19c80:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19c84:	mov	r0, r4
   19c88:	pop	{r4, r5, r6, pc}
   19c8c:	ldr	r4, [pc, #112]	; 19d04 <__assert_fail@plt+0x74dc>
   19c90:	b	19b34 <__assert_fail@plt+0x730c>
   19c94:	ldr	r4, [pc, #108]	; 19d08 <__assert_fail@plt+0x74e0>
   19c98:	b	19b34 <__assert_fail@plt+0x730c>
   19c9c:	ldr	r4, [pc, #104]	; 19d0c <__assert_fail@plt+0x74e4>
   19ca0:	b	19b34 <__assert_fail@plt+0x730c>
   19ca4:	ldr	r4, [pc, #100]	; 19d10 <__assert_fail@plt+0x74e8>
   19ca8:	b	19b34 <__assert_fail@plt+0x730c>
   19cac:	ldr	r4, [pc, #96]	; 19d14 <__assert_fail@plt+0x74ec>
   19cb0:	b	19b34 <__assert_fail@plt+0x730c>
   19cb4:	movw	r1, #26784	; 0x68a0
   19cb8:	mov	r0, r4
   19cbc:	movt	r1, #2
   19cc0:	bl	12228 <strstr@plt>
   19cc4:	cmp	r0, #0
   19cc8:	bne	19c4c <__assert_fail@plt+0x7424>
   19ccc:	ldrb	r3, [r4]
   19cd0:	cmp	r3, #0
   19cd4:	beq	19c4c <__assert_fail@plt+0x7424>
   19cd8:	cmp	r3, #46	; 0x2e
   19cdc:	beq	19c4c <__assert_fail@plt+0x7424>
   19ce0:	add	r6, r4, r6
   19ce4:	ldrb	r3, [r6, #-1]
   19ce8:	cmp	r3, #46	; 0x2e
   19cec:	bne	19b34 <__assert_fail@plt+0x730c>
   19cf0:	b	19c4c <__assert_fail@plt+0x7424>
   19cf4:	ldrdeq	r6, [r2], -r0
   19cf8:	andeq	r6, r2, ip, asr sp
   19cfc:			; <UNDEFINED> instruction: 0x00026cbc
   19d00:	andeq	r6, r2, r4, ror #25
   19d04:	strdeq	r6, [r2], -r8
   19d08:	andeq	r6, r2, ip, lsl #26
   19d0c:	andeq	r6, r2, r0, lsr #26
   19d10:	andeq	r6, r2, r4, lsr sp
   19d14:	andeq	r6, r2, r8, asr #26
   19d18:	push	{r4, r5, r6, r7, r8, r9, lr}
   19d1c:	movw	r9, #17144	; 0x42f8
   19d20:	movt	r9, #4
   19d24:	sub	sp, sp, #60	; 0x3c
   19d28:	cmp	r1, #0
   19d2c:	mov	r8, r0
   19d30:	ldr	r3, [r9]
   19d34:	str	r3, [sp, #52]	; 0x34
   19d38:	beq	19d48 <__assert_fail@plt+0x7520>
   19d3c:	ldr	r3, [r0, #24]
   19d40:	cmp	r3, #0
   19d44:	beq	19f58 <__assert_fail@plt+0x7730>
   19d48:	ldr	r0, [r8]
   19d4c:	cmp	r0, #0
   19d50:	beq	19f78 <__assert_fail@plt+0x7750>
   19d54:	ldr	r3, [r0]
   19d58:	cmp	r3, #0
   19d5c:	beq	19f94 <__assert_fail@plt+0x776c>
   19d60:	ldr	r3, [r8, #28]
   19d64:	tst	r3, #2097152	; 0x200000
   19d68:	beq	19e7c <__assert_fail@plt+0x7654>
   19d6c:	mov	r4, #0
   19d70:	ldr	r0, [r8, #8]
   19d74:	mov	r1, r4
   19d78:	add	lr, sp, #3
   19d7c:	mov	ip, #130	; 0x82
   19d80:	str	lr, [sp, #8]
   19d84:	str	ip, [sp, #16]
   19d88:	mov	r6, #1
   19d8c:	movw	r2, #297	; 0x129
   19d90:	str	r4, [sp, #20]
   19d94:	str	r4, [sp, #24]
   19d98:	movw	r3, #18276	; 0x4764
   19d9c:	str	r4, [sp, #32]
   19da0:	movt	r3, #55364	; 0xd844
   19da4:	str	r4, [sp, #36]	; 0x24
   19da8:	str	r3, [sp, #4]
   19dac:	mov	r3, #129	; 0x81
   19db0:	str	r4, [sp, #44]	; 0x2c
   19db4:	str	r3, [sp, #40]	; 0x28
   19db8:	str	r4, [sp, #48]	; 0x30
   19dbc:	str	r2, [sp, #28]
   19dc0:	strb	r6, [sp, #3]
   19dc4:	str	r6, [sp, #12]
   19dc8:	bl	1233c <p11_kit_iter_new@plt>
   19dcc:	mov	r2, r6
   19dd0:	add	r1, sp, #4
   19dd4:	mov	r5, r0
   19dd8:	bl	12234 <p11_kit_iter_add_filter@plt>
   19ddc:	mov	r0, r5
   19de0:	ldr	r1, [r8]
   19de4:	bl	125d0 <p11_kit_iter_begin@plt>
   19de8:	mov	r0, r4
   19dec:	add	r1, sp, #16
   19df0:	mov	r2, #3
   19df4:	bl	20980 <__assert_fail@plt+0xe158>
   19df8:	mov	r4, r0
   19dfc:	mov	r0, r5
   19e00:	bl	126b4 <p11_kit_iter_next@plt>
   19e04:	subs	r6, r0, #0
   19e08:	bne	19e48 <__assert_fail@plt+0x7620>
   19e0c:	mov	r0, r5
   19e10:	mov	r1, r4
   19e14:	mov	r2, #3
   19e18:	bl	123cc <p11_kit_iter_load_attributes@plt>
   19e1c:	subs	r7, r0, #0
   19e20:	beq	19ea8 <__assert_fail@plt+0x7680>
   19e24:	bl	12774 <p11_kit_strerror@plt>
   19e28:	mov	r1, r0
   19e2c:	movw	r0, #29168	; 0x71f0
   19e30:	movt	r0, #2
   19e34:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   19e38:	mov	r0, r5
   19e3c:	bl	126b4 <p11_kit_iter_next@plt>
   19e40:	subs	r6, r0, #0
   19e44:	beq	19e0c <__assert_fail@plt+0x75e4>
   19e48:	mov	r0, r4
   19e4c:	bl	208a0 <__assert_fail@plt+0xe078>
   19e50:	mov	r0, r5
   19e54:	bl	12618 <p11_kit_iter_free@plt>
   19e58:	cmp	r6, #1
   19e5c:	beq	19e7c <__assert_fail@plt+0x7654>
   19e60:	mov	r0, r6
   19e64:	bl	12774 <p11_kit_strerror@plt>
   19e68:	mov	r1, r0
   19e6c:	movw	r0, #29168	; 0x71f0
   19e70:	movt	r0, #2
   19e74:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   19e78:	b	19f50 <__assert_fail@plt+0x7728>
   19e7c:	ldr	r0, [r8, #4]
   19e80:	mov	r4, #1
   19e84:	ldr	r1, [r8]
   19e88:	bl	125d0 <p11_kit_iter_begin@plt>
   19e8c:	ldr	r2, [sp, #52]	; 0x34
   19e90:	mov	r0, r4
   19e94:	ldr	r3, [r9]
   19e98:	cmp	r2, r3
   19e9c:	bne	19fa4 <__assert_fail@plt+0x777c>
   19ea0:	add	sp, sp, #60	; 0x3c
   19ea4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19ea8:	mov	r1, #129	; 0x81
   19eac:	mov	r0, r4
   19eb0:	bl	20d84 <__assert_fail@plt+0xe55c>
   19eb4:	mov	r1, #130	; 0x82
   19eb8:	mov	r6, r0
   19ebc:	mov	r0, r4
   19ec0:	bl	20d84 <__assert_fail@plt+0xe55c>
   19ec4:	cmp	r0, #0
   19ec8:	cmpne	r6, #0
   19ecc:	mov	r2, r0
   19ed0:	beq	19f04 <__assert_fail@plt+0x76dc>
   19ed4:	mov	r1, r6
   19ed8:	mov	r0, r7
   19edc:	mov	r3, r7
   19ee0:	bl	208dc <__assert_fail@plt+0xe0b4>
   19ee4:	subs	r1, r0, #0
   19ee8:	beq	19f40 <__assert_fail@plt+0x7718>
   19eec:	movw	r2, #35716	; 0x8b84
   19ef0:	ldr	r0, [r8, #32]
   19ef4:	movt	r2, #2
   19ef8:	bl	23034 <secure_getenv@@Base+0x9e0>
   19efc:	cmp	r0, #0
   19f00:	beq	19f40 <__assert_fail@plt+0x7718>
   19f04:	movw	r1, #297	; 0x129
   19f08:	mov	r0, r4
   19f0c:	bl	20d84 <__assert_fail@plt+0xe55c>
   19f10:	subs	r1, r0, #0
   19f14:	beq	19dfc <__assert_fail@plt+0x75d4>
   19f18:	mov	r0, #0
   19f1c:	mov	r2, r0
   19f20:	bl	208dc <__assert_fail@plt+0xe0b4>
   19f24:	movw	r2, #35716	; 0x8b84
   19f28:	movt	r2, #2
   19f2c:	mov	r1, r0
   19f30:	ldr	r0, [r8, #36]	; 0x24
   19f34:	bl	23034 <secure_getenv@@Base+0x9e0>
   19f38:	cmp	r0, #0
   19f3c:	bne	19dfc <__assert_fail@plt+0x75d4>
   19f40:	movw	r0, #24400	; 0x5f50
   19f44:	ldr	r1, [pc, #92]	; 19fa8 <__assert_fail@plt+0x7780>
   19f48:	movt	r0, #2
   19f4c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19f50:	mov	r4, #0
   19f54:	b	19e8c <__assert_fail@plt+0x7664>
   19f58:	bl	197f0 <__assert_fail@plt+0x6fc8>
   19f5c:	subs	r4, r0, #0
   19f60:	bne	19d48 <__assert_fail@plt+0x7520>
   19f64:	movw	r0, #24400	; 0x5f50
   19f68:	ldr	r1, [pc, #60]	; 19fac <__assert_fail@plt+0x7784>
   19f6c:	movt	r0, #2
   19f70:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19f74:	b	19e8c <__assert_fail@plt+0x7664>
   19f78:	mov	r0, #4
   19f7c:	bl	1236c <p11_kit_modules_load_and_initialize@plt>
   19f80:	cmp	r0, #0
   19f84:	str	r0, [r8]
   19f88:	moveq	r4, r0
   19f8c:	beq	19e8c <__assert_fail@plt+0x7664>
   19f90:	b	19d54 <__assert_fail@plt+0x752c>
   19f94:	movw	r0, #29116	; 0x71bc
   19f98:	movt	r0, #2
   19f9c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   19fa0:	b	19d60 <__assert_fail@plt+0x7538>
   19fa4:	bl	12360 <__stack_chk_fail@plt>
   19fa8:	andeq	r6, r2, ip, lsl #27
   19fac:	andeq	r6, r2, r8, ror sp
   19fb0:	mov	r3, r0
   19fb4:	add	r0, r0, #40	; 0x28
   19fb8:	push	{r4, lr}
   19fbc:	ldr	r1, [r3, #44]	; 0x2c
   19fc0:	bl	195a8 <__assert_fail@plt+0x6d80>
   19fc4:	subs	r4, r0, #0
   19fc8:	beq	19fd8 <__assert_fail@plt+0x77b0>
   19fcc:	bl	24c1c <p11_dict_direct_equal@@Base+0x1424>
   19fd0:	mov	r0, r4
   19fd4:	pop	{r4, pc}
   19fd8:	movw	r0, #23980	; 0x5dac
   19fdc:	movw	r1, #29196	; 0x720c
   19fe0:	movt	r0, #2
   19fe4:	movt	r1, #2
   19fe8:	ldr	r2, [pc, #4]	; 19ff4 <__assert_fail@plt+0x77cc>
   19fec:	bl	22e10 <secure_getenv@@Base+0x7bc>
   19ff0:	b	19fd0 <__assert_fail@plt+0x77a8>
   19ff4:	muleq	r2, ip, sp
   19ff8:	push	{r4, r5, r6, lr}
   19ffc:	movw	r4, #17144	; 0x42f8
   1a000:	movt	r4, #4
   1a004:	mov	r3, r0
   1a008:	ldr	r0, [r0, #28]
   1a00c:	sub	sp, sp, #8
   1a010:	ldr	ip, [r4]
   1a014:	mov	r5, r1
   1a018:	ands	r0, r0, #1024	; 0x400
   1a01c:	str	ip, [sp, #4]
   1a020:	beq	1a078 <__assert_fail@plt+0x7850>
   1a024:	ldr	r1, [r3, #44]	; 0x2c
   1a028:	add	r0, r3, #40	; 0x28
   1a02c:	bl	195a8 <__assert_fail@plt+0x6d80>
   1a030:	cmp	r5, #0
   1a034:	movw	r3, #58476	; 0xe46c
   1a038:	movt	r3, #2
   1a03c:	movw	r2, #58396	; 0xe41c
   1a040:	movt	r2, #2
   1a044:	movne	r2, r3
   1a048:	movw	r1, #29212	; 0x721c
   1a04c:	movt	r1, #2
   1a050:	cmp	r0, #0
   1a054:	mov	r5, r0
   1a058:	movne	r3, r0
   1a05c:	mov	r0, sp
   1a060:	bl	12660 <asprintf@plt>
   1a064:	subs	r6, r0, #0
   1a068:	beq	1a090 <__assert_fail@plt+0x7868>
   1a06c:	mov	r0, r5
   1a070:	bl	122c4 <free@plt>
   1a074:	ldr	r0, [sp]
   1a078:	ldr	r2, [sp, #4]
   1a07c:	ldr	r3, [r4]
   1a080:	cmp	r2, r3
   1a084:	bne	1a0a8 <__assert_fail@plt+0x7880>
   1a088:	add	sp, sp, #8
   1a08c:	pop	{r4, r5, r6, pc}
   1a090:	movw	r0, #24400	; 0x5f50
   1a094:	ldr	r1, [pc, #16]	; 1a0ac <__assert_fail@plt+0x7884>
   1a098:	movt	r0, #2
   1a09c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1a0a0:	mov	r0, r6
   1a0a4:	b	1a078 <__assert_fail@plt+0x7850>
   1a0a8:	bl	12360 <__stack_chk_fail@plt>
   1a0ac:			; <UNDEFINED> instruction: 0x00026db4
   1a0b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0b4:	movw	r5, #17144	; 0x42f8
   1a0b8:	movt	r5, #4
   1a0bc:	sub	sp, sp, #340	; 0x154
   1a0c0:	mov	r2, #144	; 0x90
   1a0c4:	mov	r7, r0
   1a0c8:	ldr	r3, [r5]
   1a0cc:	mov	r6, r1
   1a0d0:	add	r0, sp, #188	; 0xbc
   1a0d4:	mov	r1, #0
   1a0d8:	mov	r9, #1000	; 0x3e8
   1a0dc:	movw	r4, #1002	; 0x3ea
   1a0e0:	str	r3, [sp, #332]	; 0x14c
   1a0e4:	bl	125e8 <memset@plt>
   1a0e8:	mov	r1, #0
   1a0ec:	add	r0, sp, #80	; 0x50
   1a0f0:	movw	r2, #27448	; 0x6b38
   1a0f4:	movt	r2, #2
   1a0f8:	str	r2, [sp, #188]	; 0xbc
   1a0fc:	movw	r2, #29360	; 0x72b0
   1a100:	movt	r2, #2
   1a104:	str	r2, [sp, #220]	; 0xdc
   1a108:	movw	r2, #29380	; 0x72c4
   1a10c:	movt	r2, #2
   1a110:	str	r2, [sp, #252]	; 0xfc
   1a114:	movw	r2, #24060	; 0x5dfc
   1a118:	movt	r2, #2
   1a11c:	str	r2, [sp, #284]	; 0x11c
   1a120:	mov	r2, #108	; 0x6c
   1a124:	movw	ip, #1001	; 0x3e9
   1a128:	mov	sl, #118	; 0x76
   1a12c:	mov	r8, #113	; 0x71
   1a130:	mov	lr, #104	; 0x68
   1a134:	str	r9, [sp, #200]	; 0xc8
   1a138:	str	r4, [sp, #216]	; 0xd8
   1a13c:	movw	fp, #1003	; 0x3eb
   1a140:	str	ip, [sp, #232]	; 0xe8
   1a144:	movw	r3, #29352	; 0x72a8
   1a148:	str	sl, [sp, #280]	; 0x118
   1a14c:	movt	r3, #2
   1a150:	str	r8, [sp, #296]	; 0x128
   1a154:	str	r3, [sp, #204]	; 0xcc
   1a158:	movw	r3, #29368	; 0x72b8
   1a15c:	str	lr, [sp, #312]	; 0x138
   1a160:	movt	r3, #2
   1a164:	str	fp, [sp, #264]	; 0x108
   1a168:	str	r3, [sp, #236]	; 0xec
   1a16c:	movw	r3, #24052	; 0x5df4
   1a170:	movt	r3, #2
   1a174:	str	r3, [sp, #268]	; 0x10c
   1a178:	movw	r3, #24068	; 0x5e04
   1a17c:	movt	r3, #2
   1a180:	str	r3, [sp, #300]	; 0x12c
   1a184:	mov	r3, #1
   1a188:	str	r3, [sp, #192]	; 0xc0
   1a18c:	str	r3, [sp, #208]	; 0xd0
   1a190:	str	r3, [sp, #224]	; 0xe0
   1a194:	mov	r3, #102	; 0x66
   1a198:	stm	sp, {r3, ip}
   1a19c:	str	r3, [sp, #248]	; 0xf8
   1a1a0:	bl	125e8 <memset@plt>
   1a1a4:	ldr	ip, [sp, #4]
   1a1a8:	add	r0, sp, #12
   1a1ac:	ldr	r3, [sp]
   1a1b0:	movw	r2, #29444	; 0x7304
   1a1b4:	str	r9, [sp, #92]	; 0x5c
   1a1b8:	movt	r2, #2
   1a1bc:	str	r4, [sp, #104]	; 0x68
   1a1c0:	mov	r9, ip
   1a1c4:	str	r3, [sp, #128]	; 0x80
   1a1c8:	movw	r3, #29388	; 0x72cc
   1a1cc:	str	sl, [sp, #152]	; 0x98
   1a1d0:	movt	r3, #2
   1a1d4:	str	r8, [sp, #164]	; 0xa4
   1a1d8:	movw	r4, #29220	; 0x7224
   1a1dc:	str	r3, [sp, #84]	; 0x54
   1a1e0:	movw	r3, #27584	; 0x6bc0
   1a1e4:	str	r2, [sp, #96]	; 0x60
   1a1e8:	movt	r3, #2
   1a1ec:	str	ip, [sp, #116]	; 0x74
   1a1f0:	movw	r2, #29668	; 0x73e4
   1a1f4:	str	r3, [sp, #100]	; 0x64
   1a1f8:	movt	r2, #2
   1a1fc:	str	fp, [sp, #140]	; 0x8c
   1a200:	movw	r3, #52892	; 0xce9c
   1a204:	str	r2, [sp, #108]	; 0x6c
   1a208:	movt	r3, #2
   1a20c:	movw	r2, #30116	; 0x75a4
   1a210:	str	r3, [sp, #112]	; 0x70
   1a214:	movt	r2, #2
   1a218:	movw	r3, #30392	; 0x76b8
   1a21c:	str	r2, [sp, #120]	; 0x78
   1a220:	movt	r3, #2
   1a224:	movw	r2, #30400	; 0x76c0
   1a228:	str	r3, [sp, #124]	; 0x7c
   1a22c:	movt	r2, #2
   1a230:	movw	r3, #30436	; 0x76e4
   1a234:	str	r2, [sp, #132]	; 0x84
   1a238:	movt	r3, #2
   1a23c:	movw	r2, #24164	; 0x5e64
   1a240:	str	r3, [sp, #144]	; 0x90
   1a244:	movt	r2, #2
   1a248:	movw	r3, #24192	; 0x5e80
   1a24c:	str	r2, [sp, #156]	; 0x9c
   1a250:	movt	r3, #2
   1a254:	str	r3, [sp, #168]	; 0xa8
   1a258:	bl	19644 <__assert_fail@plt+0x6e1c>
   1a25c:	movw	r8, #17160	; 0x4308
   1a260:	movt	r4, #2
   1a264:	movt	r8, #4
   1a268:	mov	sl, #0
   1a26c:	mov	r0, r7
   1a270:	mov	r1, r6
   1a274:	add	r2, sp, #188	; 0xbc
   1a278:	bl	25450 <p11_dict_direct_equal@@Base+0x1c58>
   1a27c:	cmn	r0, #1
   1a280:	beq	1a3d8 <__assert_fail@plt+0x7bb0>
   1a284:	cmp	r0, #118	; 0x76
   1a288:	beq	1a26c <__assert_fail@plt+0x7a44>
   1a28c:	ble	1a2c4 <__assert_fail@plt+0x7a9c>
   1a290:	cmp	r0, r9
   1a294:	beq	1a370 <__assert_fail@plt+0x7b48>
   1a298:	ble	1a330 <__assert_fail@plt+0x7b08>
   1a29c:	movw	r3, #1002	; 0x3ea
   1a2a0:	cmp	r0, r3
   1a2a4:	beq	1a2ec <__assert_fail@plt+0x7ac4>
   1a2a8:	add	r3, r3, #1
   1a2ac:	cmp	r0, r3
   1a2b0:	bne	1a314 <__assert_fail@plt+0x7aec>
   1a2b4:	ldr	r3, [sp, #40]	; 0x28
   1a2b8:	orr	r3, r3, #1024	; 0x400
   1a2bc:	str	r3, [sp, #40]	; 0x28
   1a2c0:	b	1a26c <__assert_fail@plt+0x7a44>
   1a2c4:	cmp	r0, #102	; 0x66
   1a2c8:	beq	1a360 <__assert_fail@plt+0x7b38>
   1a2cc:	ble	1a350 <__assert_fail@plt+0x7b28>
   1a2d0:	cmp	r0, #104	; 0x68
   1a2d4:	bne	1a30c <__assert_fail@plt+0x7ae4>
   1a2d8:	add	r0, sp, #80	; 0x50
   1a2dc:	add	r1, sp, #188	; 0xbc
   1a2e0:	bl	251b8 <p11_dict_direct_equal@@Base+0x19c0>
   1a2e4:	mov	r0, #0
   1a2e8:	bl	12510 <exit@plt>
   1a2ec:	cmp	sl, #0
   1a2f0:	ldr	fp, [r8]
   1a2f4:	beq	1a388 <__assert_fail@plt+0x7b60>
   1a2f8:	movw	r0, #30472	; 0x7708
   1a2fc:	movt	r0, #2
   1a300:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1a304:	mov	r0, #2
   1a308:	bl	12510 <exit@plt>
   1a30c:	cmp	r0, #113	; 0x71
   1a310:	beq	1a26c <__assert_fail@plt+0x7a44>
   1a314:	movw	r0, #24248	; 0x5eb8
   1a318:	movw	r1, #30544	; 0x7750
   1a31c:	movt	r0, #2
   1a320:	movt	r1, #2
   1a324:	movw	r2, #265	; 0x109
   1a328:	ldr	r3, [pc, #476]	; 1a50c <__assert_fail@plt+0x7ce4>
   1a32c:	bl	12828 <__assert_fail@plt>
   1a330:	cmp	r0, #1000	; 0x3e8
   1a334:	bne	1a314 <__assert_fail@plt+0x7aec>
   1a338:	add	r0, sp, #12
   1a33c:	ldr	r1, [r8]
   1a340:	bl	197f0 <__assert_fail@plt+0x6fc8>
   1a344:	cmp	r0, #0
   1a348:	bne	1a26c <__assert_fail@plt+0x7a44>
   1a34c:	b	1a304 <__assert_fail@plt+0x7adc>
   1a350:	cmp	r0, #63	; 0x3f
   1a354:	bne	1a314 <__assert_fail@plt+0x7aec>
   1a358:	mov	r0, #2
   1a35c:	bl	12510 <exit@plt>
   1a360:	ldr	r3, [sp, #40]	; 0x28
   1a364:	orr	r3, r3, #1
   1a368:	str	r3, [sp, #40]	; 0x28
   1a36c:	b	1a26c <__assert_fail@plt+0x7a44>
   1a370:	add	r0, sp, #12
   1a374:	ldr	r1, [r8]
   1a378:	bl	19a98 <__assert_fail@plt+0x7270>
   1a37c:	cmp	r0, #0
   1a380:	bne	1a26c <__assert_fail@plt+0x7a44>
   1a384:	b	1a304 <__assert_fail@plt+0x7adc>
   1a388:	movw	r1, #29340	; 0x729c
   1a38c:	movt	r1, #2
   1a390:	b	1a3a4 <__assert_fail@plt+0x7b7c>
   1a394:	add	sl, sl, #1
   1a398:	ldr	r1, [r4, sl, lsl #3]
   1a39c:	cmp	r1, #0
   1a3a0:	beq	1a3c4 <__assert_fail@plt+0x7b9c>
   1a3a4:	mov	r0, fp
   1a3a8:	bl	1227c <strcmp@plt>
   1a3ac:	cmp	r0, #0
   1a3b0:	bne	1a394 <__assert_fail@plt+0x7b6c>
   1a3b4:	add	sl, r4, sl, lsl #3
   1a3b8:	ldr	sl, [sl, #4]
   1a3bc:	cmp	sl, #0
   1a3c0:	bne	1a26c <__assert_fail@plt+0x7a44>
   1a3c4:	mov	r1, fp
   1a3c8:	movw	r0, #30504	; 0x7728
   1a3cc:	movt	r0, #2
   1a3d0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1a3d4:	b	1a304 <__assert_fail@plt+0x7adc>
   1a3d8:	movw	r3, #17152	; 0x4300
   1a3dc:	movt	r3, #4
   1a3e0:	ldr	r4, [r3]
   1a3e4:	rsb	r7, r4, r7
   1a3e8:	cmp	r7, #1
   1a3ec:	bne	1a4fc <__assert_fail@plt+0x7cd4>
   1a3f0:	cmp	sl, #0
   1a3f4:	beq	1a4e8 <__assert_fail@plt+0x7cc0>
   1a3f8:	movw	r3, #45804	; 0xb2ec
   1a3fc:	movt	r3, #1
   1a400:	cmp	sl, r3
   1a404:	beq	1a46c <__assert_fail@plt+0x7c44>
   1a408:	movw	r3, #47992	; 0xbb78
   1a40c:	movt	r3, #1
   1a410:	cmp	sl, r3
   1a414:	beq	1a46c <__assert_fail@plt+0x7c44>
   1a418:	ldr	r3, [sp, #40]	; 0x28
   1a41c:	and	r2, r3, #6291456	; 0x600000
   1a420:	cmp	r2, #6291456	; 0x600000
   1a424:	beq	1a4c8 <__assert_fail@plt+0x7ca0>
   1a428:	tst	r3, #2097152	; 0x200000
   1a42c:	beq	1a46c <__assert_fail@plt+0x7c44>
   1a430:	ldr	r0, [sp, #28]
   1a434:	cmp	r0, #0
   1a438:	movweq	r0, #30672	; 0x77d0
   1a43c:	movteq	r0, #2
   1a440:	beq	1a458 <__assert_fail@plt+0x7c30>
   1a444:	bl	23564 <secure_getenv@@Base+0xf10>
   1a448:	cmp	r0, #1
   1a44c:	bls	1a46c <__assert_fail@plt+0x7c44>
   1a450:	movw	r0, #30756	; 0x7824
   1a454:	movt	r0, #2
   1a458:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1a45c:	movw	r1, #28908	; 0x70ec
   1a460:	add	r0, sp, #12
   1a464:	movt	r1, #2
   1a468:	bl	19a98 <__assert_fail@plt+0x7270>
   1a46c:	movw	r1, #28812	; 0x708c
   1a470:	add	r0, sp, #12
   1a474:	movt	r1, #2
   1a478:	bl	19d18 <__assert_fail@plt+0x74f0>
   1a47c:	cmp	r0, #0
   1a480:	beq	1a4e0 <__assert_fail@plt+0x7cb8>
   1a484:	ldr	r3, [sp, #40]	; 0x28
   1a488:	add	r0, sp, #12
   1a48c:	ldr	r1, [r6, r4, lsl #2]
   1a490:	orr	r3, r3, #16777216	; 0x1000000
   1a494:	str	r3, [sp, #40]	; 0x28
   1a498:	blx	sl
   1a49c:	mov	r4, r0
   1a4a0:	add	r0, sp, #12
   1a4a4:	bl	19768 <__assert_fail@plt+0x6f40>
   1a4a8:	ldr	r2, [sp, #332]	; 0x14c
   1a4ac:	ldr	r3, [r5]
   1a4b0:	eor	r0, r4, #1
   1a4b4:	cmp	r2, r3
   1a4b8:	uxtb	r0, r0
   1a4bc:	bne	1a4dc <__assert_fail@plt+0x7cb4>
   1a4c0:	add	sp, sp, #340	; 0x154
   1a4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4c8:	movw	r0, #30632	; 0x77a8
   1a4cc:	movt	r0, #2
   1a4d0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1a4d4:	mov	r0, r7
   1a4d8:	bl	12510 <exit@plt>
   1a4dc:	bl	12360 <__stack_chk_fail@plt>
   1a4e0:	mov	r0, #1
   1a4e4:	bl	12510 <exit@plt>
   1a4e8:	movw	r0, #30604	; 0x778c
   1a4ec:	movt	r0, #2
   1a4f0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1a4f4:	mov	r0, #2
   1a4f8:	bl	12510 <exit@plt>
   1a4fc:	movw	r0, #30560	; 0x7760
   1a500:	movt	r0, #2
   1a504:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1a508:	b	1a304 <__assert_fail@plt+0x7adc>
   1a50c:	andeq	r7, r2, ip, ror #4
   1a510:	push	{r3, r4, r5, r6, r7, lr}
   1a514:	mov	r3, r0
   1a518:	mov	r4, #0
   1a51c:	mov	r6, r1
   1a520:	str	r4, [r1, r3, lsl #2]
   1a524:	movw	r0, #30828	; 0x786c
   1a528:	mov	r2, r4
   1a52c:	movt	r0, #2
   1a530:	movw	r1, #30852	; 0x7884
   1a534:	movt	r1, #2
   1a538:	bl	244e4 <p11_dict_direct_equal@@Base+0xcec>
   1a53c:	subs	r5, r0, #0
   1a540:	beq	1a5b8 <__assert_fail@plt+0x7d90>
   1a544:	mov	r1, r6
   1a548:	bl	125a0 <execv@plt>
   1a54c:	bl	125b8 <__errno_location@plt>
   1a550:	mov	r7, r0
   1a554:	ldr	r0, [r0]
   1a558:	cmp	r0, #2
   1a55c:	beq	1a580 <__assert_fail@plt+0x7d58>
   1a560:	mov	r2, r5
   1a564:	movw	r1, #30916	; 0x78c4
   1a568:	movt	r1, #2
   1a56c:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1a570:	mov	r0, r5
   1a574:	bl	122c4 <free@plt>
   1a578:	mov	r0, #2
   1a57c:	pop	{r3, r4, r5, r6, r7, pc}
   1a580:	mov	r0, r5
   1a584:	bl	122c4 <free@plt>
   1a588:	mov	r2, r4
   1a58c:	movw	r0, #30828	; 0x786c
   1a590:	movw	r1, #30892	; 0x78ac
   1a594:	movt	r0, #2
   1a598:	movt	r1, #2
   1a59c:	bl	244e4 <p11_dict_direct_equal@@Base+0xcec>
   1a5a0:	subs	r5, r0, #0
   1a5a4:	beq	1a5b8 <__assert_fail@plt+0x7d90>
   1a5a8:	mov	r1, r6
   1a5ac:	bl	125a0 <execv@plt>
   1a5b0:	ldr	r0, [r7]
   1a5b4:	b	1a560 <__assert_fail@plt+0x7d38>
   1a5b8:	ldr	r2, [pc, #24]	; 1a5d8 <__assert_fail@plt+0x7db0>
   1a5bc:	movw	r0, #23980	; 0x5dac
   1a5c0:	movw	r1, #30876	; 0x789c
   1a5c4:	movt	r0, #2
   1a5c8:	movt	r1, #2
   1a5cc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1a5d0:	mov	r0, #1
   1a5d4:	pop	{r3, r4, r5, r6, r7, pc}
   1a5d8:	andeq	r7, r2, r0, lsl #5
   1a5dc:	cmp	r2, #32768	; 0x8000
   1a5e0:	push	{r4, r5, r6, lr}
   1a5e4:	mov	r4, r2
   1a5e8:	mov	r5, r0
   1a5ec:	mov	r6, r1
   1a5f0:	bcs	1a638 <__assert_fail@plt+0x7e10>
   1a5f4:	mov	r0, r5
   1a5f8:	mov	r1, #2
   1a5fc:	bl	21fd8 <__assert_fail@plt+0xf7b0>
   1a600:	subs	r3, r0, #0
   1a604:	beq	1a64c <__assert_fail@plt+0x7e24>
   1a608:	sxth	r1, r4
   1a60c:	movw	r2, #32767	; 0x7fff
   1a610:	cmp	r1, r2
   1a614:	beq	1a66c <__assert_fail@plt+0x7e44>
   1a618:	ubfx	ip, r4, #8, #8
   1a61c:	strb	r4, [r3, #1]
   1a620:	mov	r0, r5
   1a624:	mov	r1, r6
   1a628:	mov	r2, r4
   1a62c:	strb	ip, [r3]
   1a630:	pop	{r4, r5, r6, lr}
   1a634:	b	2212c <__assert_fail@plt+0xf904>
   1a638:	movw	r0, #31192	; 0x79d8
   1a63c:	movt	r0, #2
   1a640:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1a644:	movw	r4, #32767	; 0x7fff
   1a648:	b	1a5f4 <__assert_fail@plt+0x7dcc>
   1a64c:	movw	r0, #23980	; 0x5dac
   1a650:	movw	r1, #32288	; 0x7e20
   1a654:	movw	r2, #31060	; 0x7954
   1a658:	movt	r0, #2
   1a65c:	movt	r1, #2
   1a660:	movt	r2, #2
   1a664:	pop	{r4, r5, r6, lr}
   1a668:	b	22e10 <secure_getenv@@Base+0x7bc>
   1a66c:	movw	r0, #31216	; 0x79f0
   1a670:	movw	r1, #31232	; 0x7a00
   1a674:	movt	r0, #2
   1a678:	movt	r1, #2
   1a67c:	mov	r2, #60	; 0x3c
   1a680:	ldr	r3, [pc]	; 1a688 <__assert_fail@plt+0x7e60>
   1a684:	bl	12828 <__assert_fail@plt>
   1a688:	andeq	r7, r2, r0, ror #18
   1a68c:	cmp	r1, #0
   1a690:	push	{r3, lr}
   1a694:	blt	1a6c0 <__assert_fail@plt+0x7e98>
   1a698:	cmn	r1, #-2147483647	; 0x80000001
   1a69c:	beq	1a6dc <__assert_fail@plt+0x7eb4>
   1a6a0:	lsr	r2, r1, #24
   1a6a4:	lsr	r3, r1, #16
   1a6a8:	strb	r1, [r0, #3]
   1a6ac:	lsr	r1, r1, #8
   1a6b0:	strb	r2, [r0]
   1a6b4:	strb	r3, [r0, #1]
   1a6b8:	strb	r1, [r0, #2]
   1a6bc:	pop	{r3, pc}
   1a6c0:	movw	r0, #31252	; 0x7a14
   1a6c4:	movw	r1, #31232	; 0x7a00
   1a6c8:	movt	r0, #2
   1a6cc:	movt	r1, #2
   1a6d0:	mov	r2, #74	; 0x4a
   1a6d4:	ldr	r3, [pc, #28]	; 1a6f8 <__assert_fail@plt+0x7ed0>
   1a6d8:	bl	12828 <__assert_fail@plt>
   1a6dc:	movw	r0, #31264	; 0x7a20
   1a6e0:	movw	r1, #31232	; 0x7a00
   1a6e4:	movt	r0, #2
   1a6e8:	movt	r1, #2
   1a6ec:	mov	r2, #75	; 0x4b
   1a6f0:	ldr	r3, [pc]	; 1a6f8 <__assert_fail@plt+0x7ed0>
   1a6f4:	bl	12828 <__assert_fail@plt>
   1a6f8:	andeq	r7, r2, r4, ror r9
   1a6fc:	push	{r4, lr}
   1a700:	mov	r4, r1
   1a704:	mov	r1, #4
   1a708:	bl	21fd8 <__assert_fail@plt+0xf7b0>
   1a70c:	cmp	r0, #0
   1a710:	beq	1a720 <__assert_fail@plt+0x7ef8>
   1a714:	mov	r1, r4
   1a718:	pop	{r4, lr}
   1a71c:	b	1a68c <__assert_fail@plt+0x7e64>
   1a720:	movw	r0, #23980	; 0x5dac
   1a724:	movw	r1, #32288	; 0x7e20
   1a728:	movt	r0, #2
   1a72c:	movt	r1, #2
   1a730:	ldr	r2, [pc, #4]	; 1a73c <__assert_fail@plt+0x7f14>
   1a734:	pop	{r4, lr}
   1a738:	b	22e10 <secure_getenv@@Base+0x7bc>
   1a73c:	andeq	r7, r2, r4, lsl #19
   1a740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a744:	movw	r6, #17144	; 0x42f8
   1a748:	movt	r6, #4
   1a74c:	sub	sp, sp, #164	; 0xa4
   1a750:	ldr	r4, [pc, #1192]	; 1ac00 <__assert_fail@plt+0x83d8>
   1a754:	mov	r9, r0
   1a758:	ldr	r3, [r6]
   1a75c:	add	r0, sp, #72	; 0x48
   1a760:	str	r1, [sp, #60]	; 0x3c
   1a764:	mov	r1, #10240	; 0x2800
   1a768:	str	r6, [sp, #52]	; 0x34
   1a76c:	str	r3, [sp, #156]	; 0x9c
   1a770:	bl	21e08 <__assert_fail@plt+0xf5e0>
   1a774:	ldr	r0, [r4]
   1a778:	mov	r2, #4
   1a77c:	add	r1, sp, #120	; 0x78
   1a780:	str	r0, [sp, #120]	; 0x78
   1a784:	add	r0, sp, #72	; 0x48
   1a788:	bl	2212c <__assert_fail@plt+0xf904>
   1a78c:	add	r0, sp, #72	; 0x48
   1a790:	mov	r1, #2
   1a794:	bl	1a6fc <__assert_fail@plt+0x7ed4>
   1a798:	ldr	r7, [sp, #76]	; 0x4c
   1a79c:	mov	r1, #4
   1a7a0:	add	r0, sp, #72	; 0x48
   1a7a4:	str	r7, [sp, #56]	; 0x38
   1a7a8:	bl	21fd8 <__assert_fail@plt+0xf7b0>
   1a7ac:	mov	r0, #0
   1a7b0:	bl	12318 <time@plt>
   1a7b4:	subs	ip, r0, #0
   1a7b8:	ble	1ab04 <__assert_fail@plt+0x82dc>
   1a7bc:	mov	lr, #1000	; 0x3e8
   1a7c0:	movw	r0, #13676	; 0x356c
   1a7c4:	smull	r6, r7, ip, lr
   1a7c8:	movw	r1, #13776	; 0x35d0
   1a7cc:	movt	r0, #2
   1a7d0:	movt	r1, #2
   1a7d4:	movw	r2, #8900	; 0x22c4
   1a7d8:	mov	r3, #0
   1a7dc:	movt	r2, #1
   1a7e0:	strd	r6, [sp, #24]
   1a7e4:	bl	2336c <secure_getenv@@Base+0xd18>
   1a7e8:	subs	r6, r0, #0
   1a7ec:	beq	1abc4 <__assert_fail@plt+0x839c>
   1a7f0:	ldrb	r2, [sp, #28]
   1a7f4:	movw	r7, #31324	; 0x7a5c
   1a7f8:	ldr	r1, [sp, #28]
   1a7fc:	movt	r7, #2
   1a800:	ldr	r3, [sp, #24]
   1a804:	ubfx	r1, r1, #8, #8
   1a808:	str	r2, [sp, #36]	; 0x24
   1a80c:	str	r1, [sp, #32]
   1a810:	ldr	r2, [sp, #24]
   1a814:	lsr	r3, r3, #24
   1a818:	ldr	r1, [sp, #24]
   1a81c:	ldr	r0, [r9, #4]
   1a820:	ubfx	r2, r2, #8, #8
   1a824:	str	r3, [sp, #40]	; 0x28
   1a828:	ubfx	r1, r1, #16, #8
   1a82c:	mov	r3, #0
   1a830:	str	r1, [sp, #44]	; 0x2c
   1a834:	str	r2, [sp, #48]	; 0x30
   1a838:	str	r3, [sp, #20]
   1a83c:	bl	126b4 <p11_kit_iter_next@plt>
   1a840:	cmp	r0, #0
   1a844:	bne	1aaa8 <__assert_fail@plt+0x8280>
   1a848:	add	r0, sp, #72	; 0x48
   1a84c:	mov	r1, #2
   1a850:	bl	1a6fc <__assert_fail@plt+0x7ed4>
   1a854:	mov	r1, #3
   1a858:	ldr	r0, [r9, #44]	; 0x2c
   1a85c:	bl	20d84 <__assert_fail@plt+0xe55c>
   1a860:	mov	r1, #64	; 0x40
   1a864:	mov	r4, r0
   1a868:	add	r0, sp, #96	; 0x60
   1a86c:	bl	21e68 <__assert_fail@plt+0xf640>
   1a870:	ldr	r1, [sp, #20]
   1a874:	cmp	r4, #0
   1a878:	add	r1, r1, #1
   1a87c:	str	r1, [sp, #20]
   1a880:	beq	1aad8 <__assert_fail@plt+0x82b0>
   1a884:	ldr	r8, [r4, #4]
   1a888:	cmp	r8, #0
   1a88c:	movweq	r8, #31288	; 0x7a38
   1a890:	moveq	fp, #9
   1a894:	movteq	r8, #2
   1a898:	beq	1a8a8 <__assert_fail@plt+0x8080>
   1a89c:	ldr	fp, [r4, #8]
   1a8a0:	cmp	fp, #0
   1a8a4:	beq	1a908 <__assert_fail@plt+0x80e0>
   1a8a8:	bl	124ec <__ctype_b_loc@plt>
   1a8ac:	mov	r4, #0
   1a8b0:	mov	sl, r0
   1a8b4:	ldrb	r3, [r8, r4]
   1a8b8:	ldr	r1, [sl]
   1a8bc:	sxth	r5, r3
   1a8c0:	strb	r3, [sp, #68]	; 0x44
   1a8c4:	lsl	r2, r5, #1
   1a8c8:	ldrh	r2, [r1, r2]
   1a8cc:	tst	r2, #8192	; 0x2000
   1a8d0:	bne	1a8fc <__assert_fail@plt+0x80d4>
   1a8d4:	tst	r3, #128	; 0x80
   1a8d8:	bne	1a8fc <__assert_fail@plt+0x80d4>
   1a8dc:	bl	124a4 <__ctype_tolower_loc@plt>
   1a8e0:	add	r1, sp, #68	; 0x44
   1a8e4:	mov	r2, #1
   1a8e8:	ldr	r3, [r0]
   1a8ec:	add	r0, sp, #96	; 0x60
   1a8f0:	ldr	r3, [r3, r5, lsl #2]
   1a8f4:	strb	r3, [sp, #68]	; 0x44
   1a8f8:	bl	2212c <__assert_fail@plt+0xf904>
   1a8fc:	add	r4, r4, #1
   1a900:	cmp	r4, fp
   1a904:	bcc	1a8b4 <__assert_fail@plt+0x808c>
   1a908:	mov	r4, #0
   1a90c:	b	1a968 <__assert_fail@plt+0x8140>
   1a910:	mov	r0, r6
   1a914:	ldr	r1, [sp, #96]	; 0x60
   1a918:	bl	23010 <secure_getenv@@Base+0x9bc>
   1a91c:	cmp	r0, #0
   1a920:	beq	1a9cc <__assert_fail@plt+0x81a4>
   1a924:	mov	r1, r8
   1a928:	add	r4, r4, #1
   1a92c:	add	r0, sp, #96	; 0x60
   1a930:	bl	21fa0 <__assert_fail@plt+0xf778>
   1a934:	cmn	r4, #-2147483647	; 0x80000001
   1a938:	beq	1a98c <__assert_fail@plt+0x8164>
   1a93c:	mov	r1, #32
   1a940:	mov	r2, #1
   1a944:	mov	r3, r1
   1a948:	str	r7, [sp]
   1a94c:	str	r4, [sp, #4]
   1a950:	add	r0, sp, #124	; 0x7c
   1a954:	bl	12804 <__snprintf_chk@plt>
   1a958:	add	r0, sp, #96	; 0x60
   1a95c:	add	r1, sp, #124	; 0x7c
   1a960:	mvn	r2, #0
   1a964:	bl	2212c <__assert_fail@plt+0xf904>
   1a968:	ldr	r1, [sp, #104]	; 0x68
   1a96c:	ands	r8, r1, #1
   1a970:	beq	1a910 <__assert_fail@plt+0x80e8>
   1a974:	movw	r0, #23980	; 0x5dac
   1a978:	movw	r1, #31328	; 0x7a60
   1a97c:	movt	r0, #2
   1a980:	movt	r1, #2
   1a984:	ldr	r2, [pc, #632]	; 1ac04 <__assert_fail@plt+0x83dc>
   1a988:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1a98c:	movw	r0, #31452	; 0x7adc
   1a990:	movt	r0, #2
   1a994:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1a998:	mov	r0, r6
   1a99c:	bl	23458 <secure_getenv@@Base+0xe04>
   1a9a0:	mov	r4, #0
   1a9a4:	add	r0, sp, #72	; 0x48
   1a9a8:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1a9ac:	ldr	r7, [sp, #52]	; 0x34
   1a9b0:	ldr	r2, [sp, #156]	; 0x9c
   1a9b4:	mov	r0, r4
   1a9b8:	ldr	r3, [r7]
   1a9bc:	cmp	r2, r3
   1a9c0:	bne	1abfc <__assert_fail@plt+0x83d4>
   1a9c4:	add	sp, sp, #164	; 0xa4
   1a9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9cc:	add	r1, sp, #68	; 0x44
   1a9d0:	mov	r5, r0
   1a9d4:	add	r0, sp, #96	; 0x60
   1a9d8:	bl	21f34 <__assert_fail@plt+0xf70c>
   1a9dc:	mov	r4, r0
   1a9e0:	mov	r0, r6
   1a9e4:	mov	r1, r4
   1a9e8:	mov	r2, r4
   1a9ec:	bl	23034 <secure_getenv@@Base+0x9e0>
   1a9f0:	cmp	r0, #0
   1a9f4:	bne	1aa0c <__assert_fail@plt+0x81e4>
   1a9f8:	movw	r0, #24400	; 0x5f50
   1a9fc:	ldr	r1, [pc, #512]	; 1ac04 <__assert_fail@plt+0x83dc>
   1aa00:	movt	r0, #2
   1aa04:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1aa08:	b	1a98c <__assert_fail@plt+0x8164>
   1aa0c:	mov	r1, r4
   1aa10:	add	r0, sp, #72	; 0x48
   1aa14:	ldr	r2, [sp, #68]	; 0x44
   1aa18:	bl	1a5dc <__assert_fail@plt+0x7db4>
   1aa1c:	add	r0, sp, #72	; 0x48
   1aa20:	mov	r1, #8
   1aa24:	bl	21fd8 <__assert_fail@plt+0xf7b0>
   1aa28:	cmp	r0, #0
   1aa2c:	beq	1aae8 <__assert_fail@plt+0x82c0>
   1aa30:	ldr	r2, [sp, #32]
   1aa34:	ldr	r3, [sp, #36]	; 0x24
   1aa38:	ldr	r1, [sp, #40]	; 0x28
   1aa3c:	strb	r2, [r0, #2]
   1aa40:	strb	r3, [r0, #3]
   1aa44:	strb	r1, [r0, #4]
   1aa48:	ldr	r2, [sp, #44]	; 0x2c
   1aa4c:	ldr	r3, [sp, #48]	; 0x30
   1aa50:	ldrb	r1, [sp, #24]
   1aa54:	strb	r5, [r0]
   1aa58:	strb	r5, [r0, #1]
   1aa5c:	strb	r2, [r0, #5]
   1aa60:	strb	r3, [r0, #6]
   1aa64:	strb	r1, [r0, #7]
   1aa68:	mov	r2, #5
   1aa6c:	add	r0, sp, #72	; 0x48
   1aa70:	movw	r1, #31352	; 0x7a78
   1aa74:	movt	r1, #2
   1aa78:	bl	1a5dc <__assert_fail@plt+0x7db4>
   1aa7c:	add	r0, sp, #72	; 0x48
   1aa80:	ldr	r1, [r9, #56]	; 0x38
   1aa84:	bl	1a6fc <__assert_fail@plt+0x7ed4>
   1aa88:	add	r0, sp, #72	; 0x48
   1aa8c:	ldr	r1, [r9, #52]	; 0x34
   1aa90:	ldr	r2, [r9, #56]	; 0x38
   1aa94:	bl	2212c <__assert_fail@plt+0xf904>
   1aa98:	ldr	r0, [r9, #4]
   1aa9c:	bl	126b4 <p11_kit_iter_next@plt>
   1aaa0:	cmp	r0, #0
   1aaa4:	beq	1a848 <__assert_fail@plt+0x8020>
   1aaa8:	mov	r4, r0
   1aaac:	mov	r0, r6
   1aab0:	bl	23458 <secure_getenv@@Base+0xe04>
   1aab4:	cmp	r4, #1
   1aab8:	bls	1ab20 <__assert_fail@plt+0x82f8>
   1aabc:	mov	r0, r4
   1aac0:	bl	12774 <p11_kit_strerror@plt>
   1aac4:	mov	r1, r0
   1aac8:	movw	r0, #31360	; 0x7a80
   1aacc:	movt	r0, #2
   1aad0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1aad4:	b	1a9a0 <__assert_fail@plt+0x8178>
   1aad8:	movw	r8, #31288	; 0x7a38
   1aadc:	mov	fp, #9
   1aae0:	movt	r8, #2
   1aae4:	b	1a8a8 <__assert_fail@plt+0x8080>
   1aae8:	movw	r0, #23980	; 0x5dac
   1aaec:	movw	r1, #32288	; 0x7e20
   1aaf0:	movt	r0, #2
   1aaf4:	movt	r1, #2
   1aaf8:	ldr	r2, [pc, #264]	; 1ac08 <__assert_fail@plt+0x83e0>
   1aafc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ab00:	b	1aa68 <__assert_fail@plt+0x8240>
   1ab04:	add	r2, r4, #4
   1ab08:	movw	r0, #23980	; 0x5dac
   1ab0c:	movw	r1, #31300	; 0x7a44
   1ab10:	movt	r0, #2
   1ab14:	movt	r1, #2
   1ab18:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ab1c:	b	1a9a0 <__assert_fail@plt+0x8178>
   1ab20:	ldr	r0, [sp, #72]	; 0x48
   1ab24:	ldr	r6, [sp, #56]	; 0x38
   1ab28:	ldr	r1, [sp, #20]
   1ab2c:	add	r0, r0, r6
   1ab30:	bl	1a68c <__assert_fail@plt+0x7e64>
   1ab34:	add	r0, sp, #72	; 0x48
   1ab38:	mov	r1, #20
   1ab3c:	ldr	r4, [sp, #76]	; 0x4c
   1ab40:	bl	21fd8 <__assert_fail@plt+0xf7b0>
   1ab44:	cmp	r0, #0
   1ab48:	beq	1abe0 <__assert_fail@plt+0x83b8>
   1ab4c:	ldr	ip, [sp, #72]	; 0x48
   1ab50:	mov	r3, #16
   1ab54:	mov	r2, r3
   1ab58:	str	r3, [sp]
   1ab5c:	mov	r1, #0
   1ab60:	str	r4, [sp, #8]
   1ab64:	str	r1, [sp, #12]
   1ab68:	movw	r3, #31408	; 0x7ab0
   1ab6c:	ldr	r1, [pc, #152]	; 1ac0c <__assert_fail@plt+0x83e4>
   1ab70:	movt	r3, #2
   1ab74:	str	ip, [sp, #4]
   1ab78:	bl	1841c <__assert_fail@plt+0x5bf4>
   1ab7c:	ldr	r3, [sp, #80]	; 0x50
   1ab80:	ands	r1, r3, #1
   1ab84:	bne	1aba8 <__assert_fail@plt+0x8380>
   1ab88:	ldr	r2, [r9, #28]
   1ab8c:	ldr	r0, [sp, #60]	; 0x3c
   1ab90:	bl	1ca78 <__assert_fail@plt+0xa250>
   1ab94:	ldr	r1, [sp, #72]	; 0x48
   1ab98:	ldr	r2, [sp, #76]	; 0x4c
   1ab9c:	bl	1cef4 <__assert_fail@plt+0xa6cc>
   1aba0:	mov	r4, r0
   1aba4:	b	1a9a4 <__assert_fail@plt+0x817c>
   1aba8:	movw	r0, #23980	; 0x5dac
   1abac:	movw	r1, #31428	; 0x7ac4
   1abb0:	movt	r0, #2
   1abb4:	movt	r1, #2
   1abb8:	ldr	r2, [pc, #80]	; 1ac10 <__assert_fail@plt+0x83e8>
   1abbc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1abc0:	b	1a9a0 <__assert_fail@plt+0x8178>
   1abc4:	add	r2, r4, #4
   1abc8:	movw	r0, #23980	; 0x5dac
   1abcc:	movw	r1, #31308	; 0x7a4c
   1abd0:	movt	r0, #2
   1abd4:	movt	r1, #2
   1abd8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1abdc:	b	1a9a0 <__assert_fail@plt+0x8178>
   1abe0:	movw	r0, #23980	; 0x5dac
   1abe4:	movw	r1, #31392	; 0x7aa0
   1abe8:	movt	r0, #2
   1abec:	movt	r1, #2
   1abf0:	ldr	r2, [pc, #24]	; 1ac10 <__assert_fail@plt+0x83e8>
   1abf4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1abf8:	b	1a9a0 <__assert_fail@plt+0x8178>
   1abfc:	bl	12360 <__stack_chk_fail@plt>
   1ac00:	muleq	r2, r0, r9
   1ac04:	andeq	r7, r2, r8, lsr #19
   1ac08:			; <UNDEFINED> instruction: 0x000279b4
   1ac0c:	andeq	r7, r2, r4, asr #19
   1ac10:	muleq	r2, r4, r9
   1ac14:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ac18:	movw	r9, #17144	; 0x42f8
   1ac1c:	movt	r9, #4
   1ac20:	sub	sp, sp, #12
   1ac24:	subs	r5, r2, #0
   1ac28:	mov	r6, r0
   1ac2c:	ldr	r3, [r9]
   1ac30:	mov	r8, r1
   1ac34:	str	r3, [sp, #4]
   1ac38:	beq	1ad0c <__assert_fail@plt+0x84e4>
   1ac3c:	movw	r1, #32064	; 0x7d40
   1ac40:	mov	r0, sp
   1ac44:	movt	r1, #2
   1ac48:	mov	r2, r8
   1ac4c:	bl	12660 <asprintf@plt>
   1ac50:	cmp	r0, #0
   1ac54:	blt	1ad24 <__assert_fail@plt+0x84fc>
   1ac58:	ldr	r3, [r5, #4]
   1ac5c:	cmp	r3, #0
   1ac60:	movne	r7, #0
   1ac64:	movne	r4, r7
   1ac68:	bne	1aca4 <__assert_fail@plt+0x847c>
   1ac6c:	b	1acfc <__assert_fail@plt+0x84d4>
   1ac70:	ldr	ip, [r5]
   1ac74:	mov	r0, r6
   1ac78:	ldr	r1, [sp]
   1ac7c:	mvn	r3, #0
   1ac80:	ldr	r2, [ip, r7, lsl #2]
   1ac84:	bl	1242c <asn1_write_value@plt>
   1ac88:	cmp	r0, #0
   1ac8c:	bne	1acc4 <__assert_fail@plt+0x849c>
   1ac90:	ldr	r3, [r5, #4]
   1ac94:	add	r4, r4, #1
   1ac98:	cmp	r4, r3
   1ac9c:	mov	r7, r4
   1aca0:	bcs	1acfc <__assert_fail@plt+0x84d4>
   1aca4:	movw	r2, #25748	; 0x6494
   1aca8:	mov	r0, r6
   1acac:	movt	r2, #2
   1acb0:	mov	r1, r8
   1acb4:	mov	r3, #1
   1acb8:	bl	1242c <asn1_write_value@plt>
   1acbc:	cmp	r0, #0
   1acc0:	beq	1ac70 <__assert_fail@plt+0x8448>
   1acc4:	movw	r0, #23980	; 0x5dac
   1acc8:	movw	r1, #25660	; 0x643c
   1accc:	movt	r0, #2
   1acd0:	movt	r1, #2
   1acd4:	movw	r2, #31496	; 0x7b08
   1acd8:	movt	r2, #2
   1acdc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ace0:	mov	r0, #0
   1ace4:	ldr	r2, [sp, #4]
   1ace8:	ldr	r3, [r9]
   1acec:	cmp	r2, r3
   1acf0:	bne	1ad40 <__assert_fail@plt+0x8518>
   1acf4:	add	sp, sp, #12
   1acf8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1acfc:	ldr	r0, [sp]
   1ad00:	bl	122c4 <free@plt>
   1ad04:	mov	r0, #1
   1ad08:	b	1ace4 <__assert_fail@plt+0x84bc>
   1ad0c:	mov	r3, r5
   1ad10:	bl	1242c <asn1_write_value@plt>
   1ad14:	cmp	r0, #0
   1ad18:	moveq	r0, #1
   1ad1c:	beq	1ace4 <__assert_fail@plt+0x84bc>
   1ad20:	b	1acc4 <__assert_fail@plt+0x849c>
   1ad24:	movw	r0, #24400	; 0x5f50
   1ad28:	movw	r1, #31496	; 0x7b08
   1ad2c:	movt	r0, #2
   1ad30:	movt	r1, #2
   1ad34:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ad38:	mov	r0, #0
   1ad3c:	b	1ace4 <__assert_fail@plt+0x84bc>
   1ad40:	bl	12360 <__stack_chk_fail@plt>
   1ad44:	push	{r4, r5, r6, r7, lr}
   1ad48:	movw	r4, #17144	; 0x42f8
   1ad4c:	movt	r4, #4
   1ad50:	sub	sp, sp, #12
   1ad54:	cmp	r1, #0
   1ad58:	mov	r6, r0
   1ad5c:	ldr	ip, [r4]
   1ad60:	mov	r7, r3
   1ad64:	str	ip, [sp, #4]
   1ad68:	beq	1addc <__assert_fail@plt+0x85b4>
   1ad6c:	mov	r0, r1
   1ad70:	mov	r1, r2
   1ad74:	bl	23010 <secure_getenv@@Base+0x9bc>
   1ad78:	cmp	r0, #0
   1ad7c:	beq	1addc <__assert_fail@plt+0x85b4>
   1ad80:	movw	r1, #25700	; 0x6464
   1ad84:	mov	r2, sp
   1ad88:	movt	r1, #2
   1ad8c:	bl	1dc60 <__assert_fail@plt+0xb438>
   1ad90:	subs	r5, r0, #0
   1ad94:	beq	1adec <__assert_fail@plt+0x85c4>
   1ad98:	ldr	r0, [r6]
   1ad9c:	mov	r1, r5
   1ada0:	ldr	r2, [sp]
   1ada4:	bl	1f298 <__assert_fail@plt+0xca70>
   1ada8:	cmp	r0, #0
   1adac:	mov	r6, r0
   1adb0:	str	r0, [r7]
   1adb4:	beq	1ae0c <__assert_fail@plt+0x85e4>
   1adb8:	mov	r0, r5
   1adbc:	bl	122c4 <free@plt>
   1adc0:	mov	r0, #1
   1adc4:	ldr	r2, [sp, #4]
   1adc8:	ldr	r3, [r4]
   1adcc:	cmp	r2, r3
   1add0:	bne	1ae2c <__assert_fail@plt+0x8604>
   1add4:	add	sp, sp, #12
   1add8:	pop	{r4, r5, r6, r7, pc}
   1addc:	mov	r3, #0
   1ade0:	mov	r0, #1
   1ade4:	str	r3, [r7]
   1ade8:	b	1adc4 <__assert_fail@plt+0x859c>
   1adec:	movw	r0, #23980	; 0x5dac
   1adf0:	movw	r1, #25780	; 0x64b4
   1adf4:	movt	r0, #2
   1adf8:	movt	r1, #2
   1adfc:	ldr	r2, [pc, #44]	; 1ae30 <__assert_fail@plt+0x8608>
   1ae00:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ae04:	mov	r0, r5
   1ae08:	b	1adc4 <__assert_fail@plt+0x859c>
   1ae0c:	movw	r0, #23980	; 0x5dac
   1ae10:	movw	r1, #32076	; 0x7d4c
   1ae14:	movt	r0, #2
   1ae18:	movt	r1, #2
   1ae1c:	ldr	r2, [pc, #12]	; 1ae30 <__assert_fail@plt+0x8608>
   1ae20:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ae24:	mov	r0, r6
   1ae28:	b	1adc4 <__assert_fail@plt+0x859c>
   1ae2c:	bl	12360 <__stack_chk_fail@plt>
   1ae30:	andeq	r7, r2, r8, lsl fp
   1ae34:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ae38:	movw	r6, #17144	; 0x42f8
   1ae3c:	movt	r6, #4
   1ae40:	sub	sp, sp, #164	; 0xa4
   1ae44:	mov	r4, r0
   1ae48:	mov	r9, r1
   1ae4c:	ldr	r3, [r6]
   1ae50:	mov	r0, r1
   1ae54:	ldr	r2, [r4, #56]	; 0x38
   1ae58:	ldr	r1, [r4, #52]	; 0x34
   1ae5c:	str	r3, [sp, #156]	; 0x9c
   1ae60:	bl	2212c <__assert_fail@plt+0xf904>
   1ae64:	ldr	r0, [r4, #12]
   1ae68:	movw	r1, #25816	; 0x64d8
   1ae6c:	movt	r1, #2
   1ae70:	bl	1d7f4 <__assert_fail@plt+0xafcc>
   1ae74:	cmp	r0, #0
   1ae78:	mov	r8, r0
   1ae7c:	str	r0, [sp, #16]
   1ae80:	beq	1b1a4 <__assert_fail@plt+0x897c>
   1ae84:	mov	r1, #134	; 0x86
   1ae88:	add	r2, sp, #14
   1ae8c:	ldr	r0, [r4, #44]	; 0x2c
   1ae90:	mov	r3, #0
   1ae94:	str	r3, [sp, #20]
   1ae98:	add	r5, r4, #12
   1ae9c:	str	r3, [sp, #24]
   1aea0:	bl	20b90 <__assert_fail@plt+0xe368>
   1aea4:	add	r2, sp, #15
   1aea8:	movw	r1, #18276	; 0x4764
   1aeac:	movt	r1, #55364	; 0xd844
   1aeb0:	cmp	r0, #0
   1aeb4:	strbeq	r0, [sp, #14]
   1aeb8:	ldr	r0, [r4, #44]	; 0x2c
   1aebc:	bl	20b90 <__assert_fail@plt+0xe368>
   1aec0:	ldr	r1, [r4, #60]	; 0x3c
   1aec4:	add	r3, sp, #24
   1aec8:	ldr	r2, [pc, #1012]	; 1b2c4 <__assert_fail@plt+0x8a9c>
   1aecc:	cmp	r0, #0
   1aed0:	strbeq	r0, [sp, #15]
   1aed4:	mov	r0, r5
   1aed8:	bl	1ad44 <__assert_fail@plt+0x851c>
   1aedc:	cmp	r0, #0
   1aee0:	beq	1af50 <__assert_fail@plt+0x8728>
   1aee4:	ldrb	r3, [sp, #15]
   1aee8:	cmp	r3, #0
   1aeec:	beq	1af90 <__assert_fail@plt+0x8768>
   1aef0:	ldr	r7, [sp, #24]
   1aef4:	mov	r3, #0
   1aef8:	str	r3, [sp, #20]
   1aefc:	cmp	r7, r3
   1af00:	beq	1b24c <__assert_fail@plt+0x8a24>
   1af04:	ldr	r5, [pc, #956]	; 1b2c8 <__assert_fail@plt+0x8aa0>
   1af08:	sub	r0, r5, #148	; 0x94
   1af0c:	b	1af2c <__assert_fail@plt+0x8704>
   1af10:	mov	r0, r7
   1af14:	bl	21b4c <__assert_fail@plt+0xf324>
   1af18:	cmp	r0, #0
   1af1c:	beq	1b190 <__assert_fail@plt+0x8968>
   1af20:	ldr	r0, [r5, #4]!
   1af24:	cmp	r0, #0
   1af28:	beq	1b168 <__assert_fail@plt+0x8940>
   1af2c:	bl	125c4 <__strdup@plt>
   1af30:	subs	r1, r0, #0
   1af34:	bne	1af10 <__assert_fail@plt+0x86e8>
   1af38:	movw	r0, #23980	; 0x5dac
   1af3c:	movw	r1, #32104	; 0x7d68
   1af40:	movt	r0, #2
   1af44:	movt	r1, #2
   1af48:	ldr	r2, [pc, #892]	; 1b2cc <__assert_fail@plt+0x8aa4>
   1af4c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1af50:	movw	r0, #24400	; 0x5f50
   1af54:	ldr	r1, [pc, #884]	; 1b2d0 <__assert_fail@plt+0x8aa8>
   1af58:	movt	r0, #2
   1af5c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1af60:	movw	r0, #24400	; 0x5f50
   1af64:	ldr	r1, [pc, #872]	; 1b2d4 <__assert_fail@plt+0x8aac>
   1af68:	movt	r0, #2
   1af6c:	mov	r8, #0
   1af70:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1af74:	ldr	r2, [sp, #156]	; 0x9c
   1af78:	mov	r0, r8
   1af7c:	ldr	r3, [r6]
   1af80:	cmp	r2, r3
   1af84:	bne	1b2c0 <__assert_fail@plt+0x8a98>
   1af88:	add	sp, sp, #164	; 0xa4
   1af8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1af90:	ldrb	r3, [sp, #14]
   1af94:	cmp	r3, #0
   1af98:	bne	1b10c <__assert_fail@plt+0x88e4>
   1af9c:	movw	r0, #8900	; 0x22c4
   1afa0:	movt	r0, #1
   1afa4:	bl	21c90 <__assert_fail@plt+0xf468>
   1afa8:	mov	r2, r0
   1afac:	str	r0, [sp, #20]
   1afb0:	movw	r1, #52496	; 0xcd10
   1afb4:	mov	r0, r8
   1afb8:	movt	r1, #2
   1afbc:	bl	1ac14 <__assert_fail@plt+0x83ec>
   1afc0:	cmp	r0, #0
   1afc4:	beq	1af50 <__assert_fail@plt+0x8728>
   1afc8:	mov	r0, r8
   1afcc:	movw	r1, #25876	; 0x6514
   1afd0:	ldr	r2, [sp, #24]
   1afd4:	movt	r1, #2
   1afd8:	bl	1ac14 <__assert_fail@plt+0x83ec>
   1afdc:	subs	r8, r0, #0
   1afe0:	beq	1af50 <__assert_fail@plt+0x8728>
   1afe4:	ldr	r0, [sp, #20]
   1afe8:	bl	21c6c <__assert_fail@plt+0xf444>
   1afec:	ldr	r0, [sp, #24]
   1aff0:	bl	21c6c <__assert_fail@plt+0xf444>
   1aff4:	ldr	r0, [r4, #44]	; 0x2c
   1aff8:	mov	r1, #3
   1affc:	ldr	r5, [sp, #16]
   1b000:	bl	20d84 <__assert_fail@plt+0xe55c>
   1b004:	subs	r3, r0, #0
   1b008:	beq	1b130 <__assert_fail@plt+0x8908>
   1b00c:	ldr	r2, [r3, #4]
   1b010:	mov	r0, r5
   1b014:	movw	r1, #25868	; 0x650c
   1b018:	ldr	r3, [r3, #8]
   1b01c:	movt	r1, #2
   1b020:	bl	1242c <asn1_write_value@plt>
   1b024:	cmp	r0, #0
   1b028:	bne	1b14c <__assert_fail@plt+0x8924>
   1b02c:	ldr	r0, [r4, #60]	; 0x3c
   1b030:	mov	r2, #0
   1b034:	ldr	r5, [sp, #16]
   1b038:	cmp	r0, r2
   1b03c:	str	r2, [sp, #24]
   1b040:	moveq	r3, r0
   1b044:	moveq	r4, r3
   1b048:	beq	1b078 <__assert_fail@plt+0x8850>
   1b04c:	ldr	r1, [pc, #644]	; 1b2d8 <__assert_fail@plt+0x8ab0>
   1b050:	bl	23010 <secure_getenv@@Base+0x9bc>
   1b054:	subs	r4, r0, #0
   1b058:	beq	1b074 <__assert_fail@plt+0x884c>
   1b05c:	movw	r1, #25700	; 0x6464
   1b060:	add	r2, sp, #24
   1b064:	movt	r1, #2
   1b068:	bl	1dc60 <__assert_fail@plt+0xb438>
   1b06c:	subs	r4, r0, #0
   1b070:	beq	1b264 <__assert_fail@plt+0x8a3c>
   1b074:	ldr	r3, [sp, #24]
   1b078:	mov	r0, r5
   1b07c:	movw	r1, #25956	; 0x6564
   1b080:	mov	r2, r4
   1b084:	movt	r1, #2
   1b088:	bl	1242c <asn1_write_value@plt>
   1b08c:	subs	r5, r0, #0
   1b090:	bne	1b1c0 <__assert_fail@plt+0x8998>
   1b094:	mov	r0, r4
   1b098:	bl	122c4 <free@plt>
   1b09c:	mov	r2, r5
   1b0a0:	mov	r3, r5
   1b0a4:	movw	r1, #32136	; 0x7d88
   1b0a8:	ldr	r0, [sp, #16]
   1b0ac:	movt	r1, #2
   1b0b0:	bl	1242c <asn1_write_value@plt>
   1b0b4:	subs	r4, r0, #0
   1b0b8:	bne	1b230 <__assert_fail@plt+0x8a08>
   1b0bc:	ldr	r5, [r9, #4]
   1b0c0:	add	r3, sp, #28
   1b0c4:	ldr	r0, [sp, #16]
   1b0c8:	movw	r1, #58476	; 0xe46c
   1b0cc:	str	r3, [sp]
   1b0d0:	movt	r1, #2
   1b0d4:	mov	r2, r4
   1b0d8:	add	r3, sp, #24
   1b0dc:	str	r4, [sp, #24]
   1b0e0:	bl	12780 <asn1_der_coding@plt>
   1b0e4:	cmp	r0, #12
   1b0e8:	beq	1b1dc <__assert_fail@plt+0x89b4>
   1b0ec:	movw	r0, #23980	; 0x5dac
   1b0f0:	movw	r1, #32144	; 0x7d90
   1b0f4:	movt	r0, #2
   1b0f8:	movt	r1, #2
   1b0fc:	ldr	r2, [pc, #464]	; 1b2d4 <__assert_fail@plt+0x8aac>
   1b100:	mov	r8, r4
   1b104:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b108:	b	1af74 <__assert_fail@plt+0x874c>
   1b10c:	mov	r0, r5
   1b110:	ldr	r1, [r4, #60]	; 0x3c
   1b114:	ldr	r2, [pc, #448]	; 1b2dc <__assert_fail@plt+0x8ab4>
   1b118:	add	r3, sp, #20
   1b11c:	bl	1ad44 <__assert_fail@plt+0x851c>
   1b120:	cmp	r0, #0
   1b124:	beq	1af50 <__assert_fail@plt+0x8728>
   1b128:	ldr	r2, [sp, #20]
   1b12c:	b	1afb0 <__assert_fail@plt+0x8788>
   1b130:	mov	r2, r3
   1b134:	mov	r0, r5
   1b138:	movw	r1, #25868	; 0x650c
   1b13c:	movt	r1, #2
   1b140:	bl	1242c <asn1_write_value@plt>
   1b144:	cmp	r0, #0
   1b148:	beq	1b02c <__assert_fail@plt+0x8804>
   1b14c:	movw	r0, #23980	; 0x5dac
   1b150:	movw	r1, #25660	; 0x643c
   1b154:	movt	r0, #2
   1b158:	movt	r1, #2
   1b15c:	ldr	r2, [pc, #380]	; 1b2e0 <__assert_fail@plt+0x8ab8>
   1b160:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b164:	b	1af60 <__assert_fail@plt+0x8738>
   1b168:	ldr	r3, [sp, #24]
   1b16c:	cmp	r3, #0
   1b170:	bne	1b128 <__assert_fail@plt+0x8900>
   1b174:	movw	r0, #23980	; 0x5dac
   1b178:	movw	r1, #32120	; 0x7d78
   1b17c:	movt	r0, #2
   1b180:	movt	r1, #2
   1b184:	ldr	r2, [pc, #324]	; 1b2d0 <__assert_fail@plt+0x8aa8>
   1b188:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b18c:	b	1af60 <__assert_fail@plt+0x8738>
   1b190:	movw	r0, #24400	; 0x5f50
   1b194:	ldr	r1, [pc, #304]	; 1b2cc <__assert_fail@plt+0x8aa4>
   1b198:	movt	r0, #2
   1b19c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b1a0:	b	1af50 <__assert_fail@plt+0x8728>
   1b1a4:	movw	r0, #23980	; 0x5dac
   1b1a8:	movw	r1, #32092	; 0x7d5c
   1b1ac:	movt	r0, #2
   1b1b0:	movt	r1, #2
   1b1b4:	ldr	r2, [pc, #280]	; 1b2d4 <__assert_fail@plt+0x8aac>
   1b1b8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b1bc:	b	1af74 <__assert_fail@plt+0x874c>
   1b1c0:	movw	r0, #23980	; 0x5dac
   1b1c4:	movw	r1, #25660	; 0x643c
   1b1c8:	movt	r0, #2
   1b1cc:	movt	r1, #2
   1b1d0:	ldr	r2, [pc, #268]	; 1b2e4 <__assert_fail@plt+0x8abc>
   1b1d4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b1d8:	b	1af60 <__assert_fail@plt+0x8738>
   1b1dc:	mov	r0, r9
   1b1e0:	ldr	r1, [sp, #24]
   1b1e4:	bl	21fd8 <__assert_fail@plt+0xf7b0>
   1b1e8:	subs	r3, r0, #0
   1b1ec:	beq	1b2a0 <__assert_fail@plt+0x8a78>
   1b1f0:	mov	r2, r3
   1b1f4:	ldr	r0, [sp, #16]
   1b1f8:	add	r3, sp, #28
   1b1fc:	movw	r1, #58476	; 0xe46c
   1b200:	str	r3, [sp]
   1b204:	movt	r1, #2
   1b208:	add	r3, sp, #24
   1b20c:	bl	12780 <asn1_der_coding@plt>
   1b210:	cmp	r0, #0
   1b214:	bne	1b280 <__assert_fail@plt+0x8a58>
   1b218:	ldr	r3, [sp, #24]
   1b21c:	add	r0, sp, #16
   1b220:	add	r5, r3, r5
   1b224:	str	r5, [r9, #4]
   1b228:	bl	1278c <asn1_delete_structure@plt>
   1b22c:	b	1af74 <__assert_fail@plt+0x874c>
   1b230:	movw	r0, #23980	; 0x5dac
   1b234:	movw	r1, #25660	; 0x643c
   1b238:	movt	r0, #2
   1b23c:	movt	r1, #2
   1b240:	ldr	r2, [pc, #160]	; 1b2e8 <__assert_fail@plt+0x8ac0>
   1b244:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b248:	b	1af60 <__assert_fail@plt+0x8738>
   1b24c:	movw	r0, #8900	; 0x22c4
   1b250:	movt	r0, #1
   1b254:	bl	21c90 <__assert_fail@plt+0xf468>
   1b258:	mov	r7, r0
   1b25c:	str	r0, [sp, #24]
   1b260:	b	1af04 <__assert_fail@plt+0x86dc>
   1b264:	movw	r0, #23980	; 0x5dac
   1b268:	movw	r1, #25780	; 0x64b4
   1b26c:	movt	r0, #2
   1b270:	movt	r1, #2
   1b274:	ldr	r2, [pc, #104]	; 1b2e4 <__assert_fail@plt+0x8abc>
   1b278:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b27c:	b	1af60 <__assert_fail@plt+0x8738>
   1b280:	movw	r0, #23980	; 0x5dac
   1b284:	movw	r1, #25660	; 0x643c
   1b288:	movt	r0, #2
   1b28c:	movt	r1, #2
   1b290:	ldr	r2, [pc, #60]	; 1b2d4 <__assert_fail@plt+0x8aac>
   1b294:	mov	r8, r4
   1b298:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b29c:	b	1af74 <__assert_fail@plt+0x874c>
   1b2a0:	movw	r0, #23980	; 0x5dac
   1b2a4:	movw	r1, #25712	; 0x6470
   1b2a8:	movt	r0, #2
   1b2ac:	movt	r1, #2
   1b2b0:	ldr	r2, [pc, #28]	; 1b2d4 <__assert_fail@plt+0x8aac>
   1b2b4:	mov	r8, r3
   1b2b8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b2bc:	b	1af74 <__assert_fail@plt+0x874c>
   1b2c0:	bl	12360 <__stack_chk_fail@plt>
   1b2c4:	andeq	r7, r2, r4, asr fp
   1b2c8:			; <UNDEFINED> instruction: 0x00027bbc
   1b2cc:	andeq	r7, r2, r8, ror fp
   1b2d0:	andeq	r7, r2, r0, ror #22
   1b2d4:	andeq	r7, r2, ip, lsr fp
   1b2d8:	muleq	r2, ip, fp
   1b2dc:	andeq	r7, r2, r8, lsl #23
   1b2e0:	muleq	r2, r0, fp
   1b2e4:	andeq	r7, r2, r4, lsr #23
   1b2e8:			; <UNDEFINED> instruction: 0x00027bb0
   1b2ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b2f0:	movw	r9, #17144	; 0x42f8
   1b2f4:	movt	r9, #4
   1b2f8:	sub	sp, sp, #60	; 0x3c
   1b2fc:	mov	r4, r0
   1b300:	mov	r0, r1
   1b304:	ldr	r3, [r9]
   1b308:	mov	r1, #0
   1b30c:	ldr	r2, [r4, #28]
   1b310:	str	r3, [sp, #52]	; 0x34
   1b314:	bl	1ca78 <__assert_fail@plt+0xa250>
   1b318:	subs	r8, r0, #0
   1b31c:	moveq	r0, r8
   1b320:	beq	1b438 <__assert_fail@plt+0x8c10>
   1b324:	mov	r1, #0
   1b328:	add	r0, sp, #4
   1b32c:	mov	r7, #1
   1b330:	bl	21e08 <__assert_fail@plt+0xf5e0>
   1b334:	ldr	r0, [r4, #4]
   1b338:	bl	126b4 <p11_kit_iter_next@plt>
   1b33c:	subs	r5, r0, #0
   1b340:	bne	1b3ec <__assert_fail@plt+0x8bc4>
   1b344:	mov	r1, #1024	; 0x400
   1b348:	add	r0, sp, #28
   1b34c:	bl	21e08 <__assert_fail@plt+0xf5e0>
   1b350:	add	r0, sp, #4
   1b354:	mov	r1, #2048	; 0x800
   1b358:	bl	21fa0 <__assert_fail@plt+0xf778>
   1b35c:	cmp	r0, #0
   1b360:	beq	1b470 <__assert_fail@plt+0x8c48>
   1b364:	mov	r0, r4
   1b368:	add	r1, sp, #28
   1b36c:	bl	1ae34 <__assert_fail@plt+0x860c>
   1b370:	cmp	r0, #0
   1b374:	beq	1b450 <__assert_fail@plt+0x8c28>
   1b378:	movw	r2, #25796	; 0x64c4
   1b37c:	ldr	r0, [sp, #28]
   1b380:	movt	r2, #2
   1b384:	ldr	r1, [sp, #32]
   1b388:	add	r3, sp, #4
   1b38c:	bl	1e754 <__assert_fail@plt+0xbf2c>
   1b390:	cmp	r0, #0
   1b394:	beq	1b470 <__assert_fail@plt+0x8c48>
   1b398:	mov	r1, r7
   1b39c:	mov	r0, r4
   1b3a0:	bl	19ff8 <__assert_fail@plt+0x77d0>
   1b3a4:	mvn	r2, #0
   1b3a8:	mov	r5, r0
   1b3ac:	mov	r0, r8
   1b3b0:	mov	r1, r5
   1b3b4:	bl	1cc1c <__assert_fail@plt+0xa3f4>
   1b3b8:	subs	r6, r0, #0
   1b3bc:	bne	1b45c <__assert_fail@plt+0x8c34>
   1b3c0:	mov	r0, r5
   1b3c4:	bl	122c4 <free@plt>
   1b3c8:	add	r0, sp, #28
   1b3cc:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1b3d0:	cmp	r6, #0
   1b3d4:	beq	1b488 <__assert_fail@plt+0x8c60>
   1b3d8:	ldr	r0, [r4, #4]
   1b3dc:	mov	r7, #0
   1b3e0:	bl	126b4 <p11_kit_iter_next@plt>
   1b3e4:	subs	r5, r0, #0
   1b3e8:	beq	1b344 <__assert_fail@plt+0x8b1c>
   1b3ec:	add	r0, sp, #4
   1b3f0:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1b3f4:	cmp	r5, #1
   1b3f8:	movls	r6, #1
   1b3fc:	bls	1b41c <__assert_fail@plt+0x8bf4>
   1b400:	mov	r0, r5
   1b404:	mov	r6, #0
   1b408:	bl	12774 <p11_kit_strerror@plt>
   1b40c:	mov	r1, r0
   1b410:	movw	r0, #31360	; 0x7a80
   1b414:	movt	r0, #2
   1b418:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1b41c:	mov	r0, r8
   1b420:	mov	r1, #0
   1b424:	mov	r2, r6
   1b428:	bl	1ccd0 <__assert_fail@plt+0xa4a8>
   1b42c:	cmp	r0, #0
   1b430:	movne	r0, r6
   1b434:	moveq	r0, #0
   1b438:	ldr	r2, [sp, #52]	; 0x34
   1b43c:	ldr	r3, [r9]
   1b440:	cmp	r2, r3
   1b444:	bne	1b494 <__assert_fail@plt+0x8c6c>
   1b448:	add	sp, sp, #60	; 0x3c
   1b44c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b450:	add	r0, sp, #28
   1b454:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1b458:	b	1b334 <__assert_fail@plt+0x8b0c>
   1b45c:	mov	r0, r8
   1b460:	ldmib	sp, {r1, r2}
   1b464:	bl	1cc1c <__assert_fail@plt+0xa3f4>
   1b468:	mov	r6, r0
   1b46c:	b	1b3c0 <__assert_fail@plt+0x8b98>
   1b470:	movw	r0, #24400	; 0x5f50
   1b474:	ldr	r1, [pc, #28]	; 1b498 <__assert_fail@plt+0x8c70>
   1b478:	movt	r0, #2
   1b47c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b480:	mov	r0, #0
   1b484:	b	1b438 <__assert_fail@plt+0x8c10>
   1b488:	add	r0, sp, #4
   1b48c:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1b490:	b	1b41c <__assert_fail@plt+0x8bf4>
   1b494:	bl	12360 <__stack_chk_fail@plt>
   1b498:	andeq	r7, r2, r0, ror #23
   1b49c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4a0:	sub	sp, sp, #12
   1b4a4:	ldr	r8, [r1]
   1b4a8:	mov	r9, r0
   1b4ac:	str	r1, [sp, #4]
   1b4b0:	add	r8, r0, r8
   1b4b4:	cmp	r0, r8
   1b4b8:	bcs	1b574 <__assert_fail@plt+0x8d4c>
   1b4bc:	mov	fp, #0
   1b4c0:	mov	r5, r0
   1b4c4:	mov	r7, fp
   1b4c8:	mov	r6, r0
   1b4cc:	b	1b4e4 <__assert_fail@plt+0x8cbc>
   1b4d0:	cmp	r7, #0
   1b4d4:	movne	fp, #1
   1b4d8:	movne	r7, #0
   1b4dc:	cmp	r5, r8
   1b4e0:	beq	1b554 <__assert_fail@plt+0x8d2c>
   1b4e4:	ldrb	r4, [r5], #1
   1b4e8:	sxtb	sl, r4
   1b4ec:	cmp	sl, #0
   1b4f0:	blt	1b50c <__assert_fail@plt+0x8ce4>
   1b4f4:	bl	124ec <__ctype_b_loc@plt>
   1b4f8:	lsl	r1, r4, #1
   1b4fc:	ldr	r0, [r0]
   1b500:	ldrh	r1, [r0, r1]
   1b504:	tst	r1, #8192	; 0x2000
   1b508:	bne	1b4d0 <__assert_fail@plt+0x8ca8>
   1b50c:	cmp	fp, #0
   1b510:	movne	r3, #32
   1b514:	strbne	r3, [r6]
   1b518:	ldrbne	r4, [r5, #-1]
   1b51c:	addne	r6, r6, #1
   1b520:	add	r7, r6, #1
   1b524:	sxtbne	sl, r4
   1b528:	cmp	sl, #0
   1b52c:	blt	1b53c <__assert_fail@plt+0x8d14>
   1b530:	bl	124a4 <__ctype_tolower_loc@plt>
   1b534:	ldr	r3, [r0]
   1b538:	ldrb	r4, [r3, r4, lsl #2]
   1b53c:	cmp	r5, r8
   1b540:	strb	r4, [r6]
   1b544:	mov	fp, #0
   1b548:	mov	r6, r7
   1b54c:	mov	r7, #1
   1b550:	bne	1b4e4 <__assert_fail@plt+0x8cbc>
   1b554:	cmp	r5, r6
   1b558:	rsb	r9, r9, r6
   1b55c:	movhi	r3, #0
   1b560:	strbhi	r3, [r6]
   1b564:	ldr	r3, [sp, #4]
   1b568:	str	r9, [r3]
   1b56c:	add	sp, sp, #12
   1b570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b574:	mov	r9, #0
   1b578:	b	1b564 <__assert_fail@plt+0x8d3c>
   1b57c:	push	{r4, r5, r6, r7, r8, lr}
   1b580:	movw	r4, #17144	; 0x42f8
   1b584:	movt	r4, #4
   1b588:	sub	sp, sp, #24
   1b58c:	mov	r5, r0
   1b590:	add	r2, sp, #7
   1b594:	ldr	ip, [r4]
   1b598:	add	r3, sp, #8
   1b59c:	ldr	r0, [r0]
   1b5a0:	ldr	r1, [r5, #4]
   1b5a4:	str	ip, [sp, #20]
   1b5a8:	bl	1f3f4 <__assert_fail@plt+0xcbcc>
   1b5ac:	subs	r8, r0, #0
   1b5b0:	ldrbeq	r7, [sp, #7]
   1b5b4:	beq	1b630 <__assert_fail@plt+0x8e08>
   1b5b8:	add	r1, sp, #8
   1b5bc:	bl	1b49c <__assert_fail@plt+0x8c74>
   1b5c0:	ldr	r0, [sp, #8]
   1b5c4:	mov	r1, #0
   1b5c8:	add	r2, sp, #12
   1b5cc:	bl	12438 <asn1_length_der@plt>
   1b5d0:	ldr	r6, [sp, #8]
   1b5d4:	ldr	r3, [sp, #12]
   1b5d8:	mov	r0, r5
   1b5dc:	add	r6, r6, #1
   1b5e0:	add	r6, r6, r3
   1b5e4:	mov	r1, r6
   1b5e8:	bl	21fa0 <__assert_fail@plt+0xf778>
   1b5ec:	subs	r7, r0, #0
   1b5f0:	beq	1b64c <__assert_fail@plt+0x8e24>
   1b5f4:	ldr	r2, [r5]
   1b5f8:	mov	r1, #12
   1b5fc:	str	r6, [r5, #4]
   1b600:	add	r3, sp, #16
   1b604:	mov	r0, r8
   1b608:	sub	r6, r6, #1
   1b60c:	strb	r1, [r2], #1
   1b610:	ldr	r1, [sp, #8]
   1b614:	str	r6, [sp, #16]
   1b618:	bl	12504 <asn1_octet_der@plt>
   1b61c:	ldr	r3, [sp, #16]
   1b620:	cmp	r6, r3
   1b624:	bne	1b664 <__assert_fail@plt+0x8e3c>
   1b628:	mov	r0, r8
   1b62c:	bl	122c4 <free@plt>
   1b630:	ldr	r2, [sp, #20]
   1b634:	mov	r0, r7
   1b638:	ldr	r3, [r4]
   1b63c:	cmp	r2, r3
   1b640:	bne	1b660 <__assert_fail@plt+0x8e38>
   1b644:	add	sp, sp, #24
   1b648:	pop	{r4, r5, r6, r7, r8, pc}
   1b64c:	movw	r0, #24400	; 0x5f50
   1b650:	ldr	r1, [pc, #40]	; 1b680 <__assert_fail@plt+0x8e58>
   1b654:	movt	r0, #2
   1b658:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b65c:	b	1b630 <__assert_fail@plt+0x8e08>
   1b660:	bl	12360 <__stack_chk_fail@plt>
   1b664:	movw	r0, #32168	; 0x7da8
   1b668:	movw	r1, #32192	; 0x7dc0
   1b66c:	movt	r0, #2
   1b670:	movt	r1, #2
   1b674:	mov	r2, #444	; 0x1bc
   1b678:	ldr	r3, [pc, #4]	; 1b684 <__assert_fail@plt+0x8e5c>
   1b67c:	bl	12828 <__assert_fail@plt>
   1b680:	strdeq	r7, [r2], -ip
   1b684:	andeq	r7, r2, ip, lsl ip
   1b688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b68c:	movw	r9, #17144	; 0x42f8
   1b690:	movt	r9, #4
   1b694:	sub	sp, sp, #204	; 0xcc
   1b698:	ldm	r1, {r2, r3}
   1b69c:	mov	lr, #0
   1b6a0:	ldr	ip, [r9]
   1b6a4:	mov	sl, r1
   1b6a8:	str	lr, [sp]
   1b6ac:	movw	r1, #32216	; 0x7dd8
   1b6b0:	movt	r1, #2
   1b6b4:	str	ip, [sp, #196]	; 0xc4
   1b6b8:	bl	1d95c <__assert_fail@plt+0xb134>
   1b6bc:	cmp	r0, #0
   1b6c0:	mov	r4, r0
   1b6c4:	str	r0, [sp, #28]
   1b6c8:	beq	1b8fc <__assert_fail@plt+0x90d4>
   1b6cc:	movw	r1, #32228	; 0x7de4
   1b6d0:	add	r2, sp, #36	; 0x24
   1b6d4:	movt	r1, #2
   1b6d8:	bl	12330 <asn1_number_of_elements@plt>
   1b6dc:	subs	r4, r0, #0
   1b6e0:	bne	1b82c <__assert_fail@plt+0x9004>
   1b6e4:	mov	r1, r4
   1b6e8:	movw	fp, #32240	; 0x7df0
   1b6ec:	movw	r6, #32256	; 0x7e00
   1b6f0:	add	r0, sp, #44	; 0x2c
   1b6f4:	movt	fp, #2
   1b6f8:	movt	r6, #2
   1b6fc:	add	r7, sp, #68	; 0x44
   1b700:	bl	21e08 <__assert_fail@plt+0xf5e0>
   1b704:	mov	r0, sl
   1b708:	mov	r1, r4
   1b70c:	bl	21fa0 <__assert_fail@plt+0xf778>
   1b710:	mov	r2, #1
   1b714:	str	r2, [sp, #20]
   1b718:	ldr	r3, [sp, #36]	; 0x24
   1b71c:	ldr	r2, [sp, #20]
   1b720:	cmp	r3, r2
   1b724:	blt	1b918 <__assert_fail@plt+0x90f0>
   1b728:	ldr	r3, [sp, #20]
   1b72c:	mov	r1, #64	; 0x40
   1b730:	str	fp, [sp]
   1b734:	mov	r0, r7
   1b738:	mov	r2, #1
   1b73c:	mov	r5, #1
   1b740:	str	r3, [sp, #4]
   1b744:	mov	r3, r1
   1b748:	bl	12804 <__snprintf_chk@plt>
   1b74c:	mov	r8, #0
   1b750:	mov	r1, #64	; 0x40
   1b754:	mov	r2, #1
   1b758:	mov	r3, r1
   1b75c:	stm	sp, {r6, r7}
   1b760:	str	r5, [sp, #8]
   1b764:	add	r0, sp, #132	; 0x84
   1b768:	mov	r4, #0
   1b76c:	bl	12804 <__snprintf_chk@plt>
   1b770:	mov	r2, r4
   1b774:	ldr	r0, [sp, #28]
   1b778:	add	r1, sp, #132	; 0x84
   1b77c:	add	r3, sp, #32
   1b780:	str	r8, [sp, #32]
   1b784:	bl	12264 <asn1_read_value@plt>
   1b788:	cmp	r0, #2
   1b78c:	beq	1b84c <__assert_fail@plt+0x9024>
   1b790:	cmp	r0, #12
   1b794:	bne	1b8c8 <__assert_fail@plt+0x90a0>
   1b798:	add	r0, sp, #44	; 0x2c
   1b79c:	ldr	r1, [sp, #32]
   1b7a0:	bl	21fa0 <__assert_fail@plt+0xf778>
   1b7a4:	subs	r4, r0, #0
   1b7a8:	beq	1b8e8 <__assert_fail@plt+0x90c0>
   1b7ac:	ldr	r0, [sp, #28]
   1b7b0:	add	r1, sp, #132	; 0x84
   1b7b4:	ldr	r2, [sp, #44]	; 0x2c
   1b7b8:	add	r3, sp, #32
   1b7bc:	bl	12264 <asn1_read_value@plt>
   1b7c0:	cmp	r0, #0
   1b7c4:	bne	1b82c <__assert_fail@plt+0x9004>
   1b7c8:	ldr	r3, [sp, #32]
   1b7cc:	add	r0, sp, #44	; 0x2c
   1b7d0:	str	r3, [sp, #48]	; 0x30
   1b7d4:	bl	1b57c <__assert_fail@plt+0x8d54>
   1b7d8:	subs	r4, r0, #0
   1b7dc:	bne	1b80c <__assert_fail@plt+0x8fe4>
   1b7e0:	add	r0, sp, #28
   1b7e4:	bl	1278c <asn1_delete_structure@plt>
   1b7e8:	add	r0, sp, #44	; 0x2c
   1b7ec:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1b7f0:	ldr	r2, [sp, #196]	; 0xc4
   1b7f4:	mov	r0, r4
   1b7f8:	ldr	r3, [r9]
   1b7fc:	cmp	r2, r3
   1b800:	bne	1b940 <__assert_fail@plt+0x9118>
   1b804:	add	sp, sp, #204	; 0xcc
   1b808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b80c:	ldr	r0, [sp, #28]
   1b810:	add	r1, sp, #132	; 0x84
   1b814:	ldr	r2, [sp, #44]	; 0x2c
   1b818:	ldr	r3, [sp, #48]	; 0x30
   1b81c:	bl	1242c <asn1_write_value@plt>
   1b820:	cmp	r0, #0
   1b824:	addeq	r5, r5, #1
   1b828:	beq	1b750 <__assert_fail@plt+0x8f28>
   1b82c:	movw	r0, #23980	; 0x5dac
   1b830:	movw	r1, #25660	; 0x643c
   1b834:	movt	r0, #2
   1b838:	movt	r1, #2
   1b83c:	ldr	r2, [pc, #256]	; 1b944 <__assert_fail@plt+0x911c>
   1b840:	mov	r4, #0
   1b844:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b848:	b	1b7f0 <__assert_fail@plt+0x8fc8>
   1b84c:	ldr	r0, [sp, #28]
   1b850:	mov	r1, r7
   1b854:	str	r4, [sp]
   1b858:	add	r3, sp, #40	; 0x28
   1b85c:	mov	r2, r4
   1b860:	mvn	ip, #0
   1b864:	str	ip, [sp, #40]	; 0x28
   1b868:	bl	12780 <asn1_der_coding@plt>
   1b86c:	cmp	r0, #12
   1b870:	bne	1b8c8 <__assert_fail@plt+0x90a0>
   1b874:	mov	r0, sl
   1b878:	ldr	r1, [sp, #40]	; 0x28
   1b87c:	ldr	r5, [sl, #4]
   1b880:	bl	21fd8 <__assert_fail@plt+0xf7b0>
   1b884:	subs	r3, r0, #0
   1b888:	beq	1b920 <__assert_fail@plt+0x90f8>
   1b88c:	mov	r2, r3
   1b890:	ldr	r0, [sp, #28]
   1b894:	str	r4, [sp]
   1b898:	add	r3, sp, #40	; 0x28
   1b89c:	mov	r1, r7
   1b8a0:	bl	12780 <asn1_der_coding@plt>
   1b8a4:	cmp	r0, #0
   1b8a8:	bne	1b82c <__assert_fail@plt+0x9004>
   1b8ac:	ldr	r2, [sp, #20]
   1b8b0:	ldr	r3, [sp, #40]	; 0x28
   1b8b4:	add	r2, r2, #1
   1b8b8:	str	r2, [sp, #20]
   1b8bc:	add	r5, r3, r5
   1b8c0:	str	r5, [sl, #4]
   1b8c4:	b	1b718 <__assert_fail@plt+0x8ef0>
   1b8c8:	movw	r0, #23980	; 0x5dac
   1b8cc:	movw	r1, #32144	; 0x7d90
   1b8d0:	movt	r0, #2
   1b8d4:	movt	r1, #2
   1b8d8:	ldr	r2, [pc, #100]	; 1b944 <__assert_fail@plt+0x911c>
   1b8dc:	mov	r4, #0
   1b8e0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b8e4:	b	1b7f0 <__assert_fail@plt+0x8fc8>
   1b8e8:	movw	r0, #24400	; 0x5f50
   1b8ec:	ldr	r1, [pc, #80]	; 1b944 <__assert_fail@plt+0x911c>
   1b8f0:	movt	r0, #2
   1b8f4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b8f8:	b	1b7f0 <__assert_fail@plt+0x8fc8>
   1b8fc:	movw	r0, #23980	; 0x5dac
   1b900:	movw	r1, #26128	; 0x6610
   1b904:	movt	r0, #2
   1b908:	movt	r1, #2
   1b90c:	ldr	r2, [pc, #48]	; 1b944 <__assert_fail@plt+0x911c>
   1b910:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b914:	b	1b7f0 <__assert_fail@plt+0x8fc8>
   1b918:	mov	r4, #1
   1b91c:	b	1b7e0 <__assert_fail@plt+0x8fb8>
   1b920:	movw	r0, #23980	; 0x5dac
   1b924:	movw	r1, #32272	; 0x7e10
   1b928:	movt	r0, #2
   1b92c:	movt	r1, #2
   1b930:	ldr	r2, [pc, #12]	; 1b944 <__assert_fail@plt+0x911c>
   1b934:	mov	r4, r3
   1b938:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1b93c:	b	1b7f0 <__assert_fail@plt+0x8fc8>
   1b940:	bl	12360 <__stack_chk_fail@plt>
   1b944:	andeq	r7, r2, ip, lsr ip
   1b948:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b94c:	movw	r4, #17144	; 0x42f8
   1b950:	movt	r4, #4
   1b954:	sub	sp, sp, #68	; 0x44
   1b958:	mov	r6, r0
   1b95c:	mov	r9, r1
   1b960:	ldr	r3, [r4]
   1b964:	movw	r1, #257	; 0x101
   1b968:	ldr	r0, [r0, #44]	; 0x2c
   1b96c:	mov	r8, r2
   1b970:	mov	r7, #0
   1b974:	str	r7, [sp, #12]
   1b978:	str	r3, [sp, #60]	; 0x3c
   1b97c:	bl	20d84 <__assert_fail@plt+0xe55c>
   1b980:	subs	r5, r0, #0
   1b984:	beq	1baa8 <__assert_fail@plt+0x9280>
   1b988:	ldr	r0, [r5, #4]
   1b98c:	cmp	r0, r7
   1b990:	beq	1baa8 <__assert_fail@plt+0x9280>
   1b994:	ldr	r1, [r5, #8]
   1b998:	cmp	r1, r7
   1b99c:	beq	1baa8 <__assert_fail@plt+0x9280>
   1b9a0:	bl	22490 <__assert_fail@plt+0xfc68>
   1b9a4:	ldr	r2, [r5, #8]
   1b9a8:	mov	r3, r7
   1b9ac:	movw	lr, #9104	; 0x2390
   1b9b0:	movw	ip, #8900	; 0x22c4
   1b9b4:	movt	lr, #1
   1b9b8:	movt	ip, #1
   1b9bc:	str	lr, [sp]
   1b9c0:	str	ip, [sp, #4]
   1b9c4:	mov	r1, r0
   1b9c8:	add	r0, sp, #16
   1b9cc:	bl	21d90 <__assert_fail@plt+0xf568>
   1b9d0:	ldr	r3, [sp, #16]
   1b9d4:	cmp	r3, r7
   1b9d8:	beq	1bb50 <__assert_fail@plt+0x9328>
   1b9dc:	ldr	r0, [r6, #12]
   1b9e0:	add	r1, sp, #16
   1b9e4:	bl	1b688 <__assert_fail@plt+0x8e60>
   1b9e8:	cmp	r0, #0
   1b9ec:	bne	1ba4c <__assert_fail@plt+0x9224>
   1b9f0:	add	r0, sp, #16
   1b9f4:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1b9f8:	ldr	r5, [sp, #12]
   1b9fc:	cmp	r5, #0
   1ba00:	beq	1baa8 <__assert_fail@plt+0x9280>
   1ba04:	mov	r1, r5
   1ba08:	mov	r3, r8
   1ba0c:	movw	r2, #32312	; 0x7e38
   1ba10:	mov	r0, r9
   1ba14:	movt	r2, #2
   1ba18:	bl	1d250 <__assert_fail@plt+0xaa28>
   1ba1c:	mov	r7, r0
   1ba20:	mov	r0, r5
   1ba24:	bl	122c4 <free@plt>
   1ba28:	cmp	r7, #0
   1ba2c:	bne	1baa8 <__assert_fail@plt+0x9280>
   1ba30:	ldr	r2, [sp, #60]	; 0x3c
   1ba34:	mov	r0, r7
   1ba38:	ldr	r3, [r4]
   1ba3c:	cmp	r2, r3
   1ba40:	bne	1bb6c <__assert_fail@plt+0x9344>
   1ba44:	add	sp, sp, #68	; 0x44
   1ba48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ba4c:	mov	r3, r7
   1ba50:	add	r0, sp, #40	; 0x28
   1ba54:	ldr	r1, [sp, #16]
   1ba58:	ldr	r2, [sp, #20]
   1ba5c:	bl	1841c <__assert_fail@plt+0x5bf4>
   1ba60:	ldrb	r3, [sp, #42]	; 0x2a
   1ba64:	ldrb	r0, [sp, #41]	; 0x29
   1ba68:	movw	r1, #32304	; 0x7e30
   1ba6c:	ldrb	ip, [sp, #40]	; 0x28
   1ba70:	movt	r1, #2
   1ba74:	ldrb	r2, [sp, #43]	; 0x2b
   1ba78:	lsl	r3, r3, #16
   1ba7c:	orr	r3, r3, r0, lsl #8
   1ba80:	add	r0, sp, #12
   1ba84:	orr	r3, r3, ip
   1ba88:	orr	r2, r3, r2, lsl #24
   1ba8c:	bl	12660 <asprintf@plt>
   1ba90:	cmp	r0, #0
   1ba94:	bge	1b9f0 <__assert_fail@plt+0x91c8>
   1ba98:	movw	r0, #24400	; 0x5f50
   1ba9c:	ldr	r1, [pc, #204]	; 1bb70 <__assert_fail@plt+0x9348>
   1baa0:	movt	r0, #2
   1baa4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1baa8:	ldr	r0, [r6, #44]	; 0x2c
   1baac:	movw	r1, #257	; 0x101
   1bab0:	bl	20d84 <__assert_fail@plt+0xe55c>
   1bab4:	subs	r3, r0, #0
   1bab8:	beq	1bb48 <__assert_fail@plt+0x9320>
   1babc:	ldmib	r3, {r1, r2}
   1bac0:	add	r0, sp, #40	; 0x28
   1bac4:	mov	r3, #0
   1bac8:	bl	18630 <__assert_fail@plt+0x5e08>
   1bacc:	ldrb	r3, [sp, #42]	; 0x2a
   1bad0:	ldrb	r0, [sp, #41]	; 0x29
   1bad4:	movw	r1, #32304	; 0x7e30
   1bad8:	ldrb	ip, [sp, #40]	; 0x28
   1badc:	movt	r1, #2
   1bae0:	ldrb	r2, [sp, #43]	; 0x2b
   1bae4:	lsl	r3, r3, #16
   1bae8:	orr	r3, r3, r0, lsl #8
   1baec:	add	r0, sp, #16
   1baf0:	orr	r3, r3, ip
   1baf4:	orr	r2, r3, r2, lsl #24
   1baf8:	bl	12660 <asprintf@plt>
   1bafc:	cmp	r0, #0
   1bb00:	blt	1bb38 <__assert_fail@plt+0x9310>
   1bb04:	ldr	r5, [sp, #16]
   1bb08:	cmp	r5, #0
   1bb0c:	beq	1bb48 <__assert_fail@plt+0x9320>
   1bb10:	mov	r0, r9
   1bb14:	mov	r3, r8
   1bb18:	mov	r1, r5
   1bb1c:	movw	r2, #32312	; 0x7e38
   1bb20:	movt	r2, #2
   1bb24:	bl	1d250 <__assert_fail@plt+0xaa28>
   1bb28:	mov	r7, r0
   1bb2c:	mov	r0, r5
   1bb30:	bl	122c4 <free@plt>
   1bb34:	b	1ba30 <__assert_fail@plt+0x9208>
   1bb38:	movw	r0, #24400	; 0x5f50
   1bb3c:	ldr	r1, [pc, #48]	; 1bb74 <__assert_fail@plt+0x934c>
   1bb40:	movt	r0, #2
   1bb44:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1bb48:	mov	r7, #1
   1bb4c:	b	1ba30 <__assert_fail@plt+0x9208>
   1bb50:	movw	r0, #23980	; 0x5dac
   1bb54:	movw	r1, #32284	; 0x7e1c
   1bb58:	movt	r0, #2
   1bb5c:	movt	r1, #2
   1bb60:	ldr	r2, [pc, #8]	; 1bb70 <__assert_fail@plt+0x9348>
   1bb64:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1bb68:	b	1baa8 <__assert_fail@plt+0x9280>
   1bb6c:	bl	12360 <__stack_chk_fail@plt>
   1bb70:	andeq	r7, r2, r8, asr ip
   1bb74:	andeq	r7, r2, r4, ror ip
   1bb78:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bb7c:	movw	r9, #17144	; 0x42f8
   1bb80:	movt	r9, #4
   1bb84:	sub	sp, sp, #60	; 0x3c
   1bb88:	mov	r4, r0
   1bb8c:	mov	r0, r1
   1bb90:	ldr	r3, [r9]
   1bb94:	ldr	r1, [r4, #28]
   1bb98:	str	r3, [sp, #52]	; 0x34
   1bb9c:	bl	1cf30 <__assert_fail@plt+0xa708>
   1bba0:	subs	r7, r0, #0
   1bba4:	moveq	r0, r7
   1bba8:	beq	1bcf4 <__assert_fail@plt+0x94cc>
   1bbac:	mov	r1, #0
   1bbb0:	add	r0, sp, #28
   1bbb4:	bl	21e08 <__assert_fail@plt+0xf5e0>
   1bbb8:	add	r0, sp, #4
   1bbbc:	mov	r1, #0
   1bbc0:	bl	21e08 <__assert_fail@plt+0xf5e0>
   1bbc4:	ldr	r0, [r4, #4]
   1bbc8:	bl	126b4 <p11_kit_iter_next@plt>
   1bbcc:	subs	r5, r0, #0
   1bbd0:	add	r0, sp, #28
   1bbd4:	bne	1bd24 <__assert_fail@plt+0x94fc>
   1bbd8:	mov	r1, #1024	; 0x400
   1bbdc:	bl	21fa0 <__assert_fail@plt+0xf778>
   1bbe0:	cmp	r0, #0
   1bbe4:	beq	1bd0c <__assert_fail@plt+0x94e4>
   1bbe8:	add	r0, sp, #4
   1bbec:	mov	r1, #2048	; 0x800
   1bbf0:	bl	21fa0 <__assert_fail@plt+0xf778>
   1bbf4:	cmp	r0, #0
   1bbf8:	beq	1bd0c <__assert_fail@plt+0x94e4>
   1bbfc:	mov	r0, r4
   1bc00:	add	r1, sp, #28
   1bc04:	bl	1ae34 <__assert_fail@plt+0x860c>
   1bc08:	cmp	r0, #0
   1bc0c:	beq	1bbc4 <__assert_fail@plt+0x939c>
   1bc10:	movw	r2, #25796	; 0x64c4
   1bc14:	ldr	r0, [sp, #28]
   1bc18:	movt	r2, #2
   1bc1c:	ldr	r1, [sp, #32]
   1bc20:	add	r3, sp, #4
   1bc24:	bl	1e754 <__assert_fail@plt+0xbf2c>
   1bc28:	cmp	r0, #0
   1bc2c:	beq	1bd0c <__assert_fail@plt+0x94e4>
   1bc30:	mov	r0, r4
   1bc34:	bl	19fb0 <__assert_fail@plt+0x7788>
   1bc38:	subs	r6, r0, #0
   1bc3c:	beq	1bd5c <__assert_fail@plt+0x9534>
   1bc40:	movw	r2, #32316	; 0x7e3c
   1bc44:	mov	r0, r7
   1bc48:	movt	r2, #2
   1bc4c:	mov	r1, r6
   1bc50:	str	r5, [sp]
   1bc54:	bl	1d104 <__assert_fail@plt+0xa8dc>
   1bc58:	subs	r8, r0, #0
   1bc5c:	beq	1bc9c <__assert_fail@plt+0x9474>
   1bc60:	ldmib	sp, {r1, r2}
   1bc64:	bl	1cc1c <__assert_fail@plt+0xa3f4>
   1bc68:	mov	r1, sp
   1bc6c:	mov	r5, r0
   1bc70:	mov	r0, r8
   1bc74:	mov	r2, r5
   1bc78:	bl	1ccd0 <__assert_fail@plt+0xa4a8>
   1bc7c:	cmp	r0, #0
   1bc80:	beq	1bc9c <__assert_fail@plt+0x9474>
   1bc84:	cmp	r5, #0
   1bc88:	beq	1bc9c <__assert_fail@plt+0x9474>
   1bc8c:	ldr	r0, [sp]
   1bc90:	bl	2438c <p11_dict_direct_equal@@Base+0xb94>
   1bc94:	mov	r5, r0
   1bc98:	b	1bca0 <__assert_fail@plt+0x9478>
   1bc9c:	mov	r5, #0
   1bca0:	mov	r1, r7
   1bca4:	mov	r2, r5
   1bca8:	mov	r0, r4
   1bcac:	bl	1b948 <__assert_fail@plt+0x9120>
   1bcb0:	mov	r8, r0
   1bcb4:	mov	r0, r5
   1bcb8:	bl	122c4 <free@plt>
   1bcbc:	ldr	r0, [sp]
   1bcc0:	bl	122c4 <free@plt>
   1bcc4:	mov	r0, r6
   1bcc8:	bl	122c4 <free@plt>
   1bccc:	cmp	r8, #0
   1bcd0:	bne	1bbc4 <__assert_fail@plt+0x939c>
   1bcd4:	add	r0, sp, #28
   1bcd8:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1bcdc:	add	r0, sp, #4
   1bce0:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1bce4:	mov	r0, r7
   1bce8:	mov	r1, r8
   1bcec:	bl	1d3f0 <__assert_fail@plt+0xabc8>
   1bcf0:	mov	r0, r8
   1bcf4:	ldr	r2, [sp, #52]	; 0x34
   1bcf8:	ldr	r3, [r9]
   1bcfc:	cmp	r2, r3
   1bd00:	bne	1bd7c <__assert_fail@plt+0x9554>
   1bd04:	add	sp, sp, #60	; 0x3c
   1bd08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bd0c:	movw	r0, #24400	; 0x5f50
   1bd10:	ldr	r1, [pc, #104]	; 1bd80 <__assert_fail@plt+0x9558>
   1bd14:	movt	r0, #2
   1bd18:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1bd1c:	mov	r0, #0
   1bd20:	b	1bcf4 <__assert_fail@plt+0x94cc>
   1bd24:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1bd28:	add	r0, sp, #4
   1bd2c:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1bd30:	cmp	r5, #1
   1bd34:	movls	r8, #1
   1bd38:	bls	1bce4 <__assert_fail@plt+0x94bc>
   1bd3c:	mov	r0, r5
   1bd40:	mov	r8, #0
   1bd44:	bl	12774 <p11_kit_strerror@plt>
   1bd48:	mov	r1, r0
   1bd4c:	movw	r0, #31360	; 0x7a80
   1bd50:	movt	r0, #2
   1bd54:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1bd58:	b	1bce4 <__assert_fail@plt+0x94bc>
   1bd5c:	movw	r0, #23980	; 0x5dac
   1bd60:	movw	r1, #26128	; 0x6610
   1bd64:	movt	r0, #2
   1bd68:	movt	r1, #2
   1bd6c:	ldr	r2, [pc, #12]	; 1bd80 <__assert_fail@plt+0x9558>
   1bd70:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1bd74:	mov	r0, r6
   1bd78:	b	1bcf4 <__assert_fail@plt+0x94cc>
   1bd7c:	bl	12360 <__stack_chk_fail@plt>
   1bd80:	muleq	r2, r4, ip
   1bd84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bd88:	movw	r9, #17144	; 0x42f8
   1bd8c:	movt	r9, #4
   1bd90:	sub	sp, sp, #32
   1bd94:	mov	r4, r0
   1bd98:	mov	r0, r1
   1bd9c:	ldr	r3, [r9]
   1bda0:	mov	sl, r2
   1bda4:	ldr	r1, [r4, #28]
   1bda8:	str	r3, [sp, #28]
   1bdac:	bl	1cf30 <__assert_fail@plt+0xa708>
   1bdb0:	subs	r8, r0, #0
   1bdb4:	moveq	r0, r8
   1bdb8:	beq	1bed4 <__assert_fail@plt+0x96ac>
   1bdbc:	mov	r1, #0
   1bdc0:	add	r0, sp, #4
   1bdc4:	bl	21e08 <__assert_fail@plt+0xf5e0>
   1bdc8:	ldr	r0, [r4, #4]
   1bdcc:	bl	126b4 <p11_kit_iter_next@plt>
   1bdd0:	subs	r5, r0, #0
   1bdd4:	add	r0, sp, #4
   1bdd8:	bne	1bf08 <__assert_fail@plt+0x96e0>
   1bddc:	mov	r1, #2048	; 0x800
   1bde0:	bl	21fa0 <__assert_fail@plt+0xf778>
   1bde4:	cmp	r0, #0
   1bde8:	beq	1beec <__assert_fail@plt+0x96c4>
   1bdec:	movw	r2, #25804	; 0x64cc
   1bdf0:	ldr	r0, [r4, #52]	; 0x34
   1bdf4:	movt	r2, #2
   1bdf8:	ldr	r1, [r4, #56]	; 0x38
   1bdfc:	add	r3, sp, #4
   1be00:	bl	1e754 <__assert_fail@plt+0xbf2c>
   1be04:	cmp	r0, #0
   1be08:	beq	1beec <__assert_fail@plt+0x96c4>
   1be0c:	mov	r0, r4
   1be10:	bl	19fb0 <__assert_fail@plt+0x7788>
   1be14:	subs	r6, r0, #0
   1be18:	beq	1bf38 <__assert_fail@plt+0x9710>
   1be1c:	mov	r1, r6
   1be20:	movw	r2, #32316	; 0x7e3c
   1be24:	mov	r0, r8
   1be28:	movt	r2, #2
   1be2c:	str	r5, [sp]
   1be30:	bl	1d104 <__assert_fail@plt+0xa8dc>
   1be34:	ldmib	sp, {r1, r2}
   1be38:	mov	r7, r0
   1be3c:	bl	1cc1c <__assert_fail@plt+0xa3f4>
   1be40:	mov	r1, sp
   1be44:	mov	r5, r0
   1be48:	mov	r0, r7
   1be4c:	mov	r2, r5
   1be50:	bl	1ccd0 <__assert_fail@plt+0xa4a8>
   1be54:	cmp	r0, #0
   1be58:	beq	1bea8 <__assert_fail@plt+0x9680>
   1be5c:	tst	r5, sl
   1be60:	beq	1be8c <__assert_fail@plt+0x9664>
   1be64:	ldr	r0, [sp]
   1be68:	bl	2438c <p11_dict_direct_equal@@Base+0xb94>
   1be6c:	mov	r1, r8
   1be70:	mov	r7, r0
   1be74:	mov	r0, r4
   1be78:	mov	r2, r7
   1be7c:	bl	1b948 <__assert_fail@plt+0x9120>
   1be80:	mov	r5, r0
   1be84:	mov	r0, r7
   1be88:	bl	122c4 <free@plt>
   1be8c:	ldr	r0, [sp]
   1be90:	bl	122c4 <free@plt>
   1be94:	mov	r0, r6
   1be98:	bl	122c4 <free@plt>
   1be9c:	cmp	r5, #0
   1bea0:	bne	1bdc8 <__assert_fail@plt+0x95a0>
   1bea4:	b	1beb8 <__assert_fail@plt+0x9690>
   1bea8:	ldr	r0, [sp]
   1beac:	bl	122c4 <free@plt>
   1beb0:	mov	r0, r6
   1beb4:	bl	122c4 <free@plt>
   1beb8:	add	r0, sp, #4
   1bebc:	mov	r6, #0
   1bec0:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1bec4:	mov	r0, r8
   1bec8:	mov	r1, r6
   1becc:	bl	1d3f0 <__assert_fail@plt+0xabc8>
   1bed0:	mov	r0, r6
   1bed4:	ldr	r2, [sp, #28]
   1bed8:	ldr	r3, [r9]
   1bedc:	cmp	r2, r3
   1bee0:	bne	1bf5c <__assert_fail@plt+0x9734>
   1bee4:	add	sp, sp, #32
   1bee8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1beec:	movw	r0, #24400	; 0x5f50
   1bef0:	movw	r1, #32324	; 0x7e44
   1bef4:	movt	r0, #2
   1bef8:	movt	r1, #2
   1befc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1bf00:	mov	r0, #0
   1bf04:	b	1bed4 <__assert_fail@plt+0x96ac>
   1bf08:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1bf0c:	cmp	r5, #1
   1bf10:	movls	r6, #1
   1bf14:	bls	1bec4 <__assert_fail@plt+0x969c>
   1bf18:	mov	r0, r5
   1bf1c:	mov	r6, #0
   1bf20:	bl	12774 <p11_kit_strerror@plt>
   1bf24:	mov	r1, r0
   1bf28:	movw	r0, #31360	; 0x7a80
   1bf2c:	movt	r0, #2
   1bf30:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1bf34:	b	1bec4 <__assert_fail@plt+0x969c>
   1bf38:	movw	r0, #23980	; 0x5dac
   1bf3c:	movw	r1, #26128	; 0x6610
   1bf40:	movt	r0, #2
   1bf44:	movt	r1, #2
   1bf48:	movw	r2, #32324	; 0x7e44
   1bf4c:	movt	r2, #2
   1bf50:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1bf54:	mov	r0, r6
   1bf58:	b	1bed4 <__assert_fail@plt+0x96ac>
   1bf5c:	bl	12360 <__stack_chk_fail@plt>
   1bf60:	push	{r4, r5, r6, r7, r8, lr}
   1bf64:	movw	r8, #17144	; 0x42f8
   1bf68:	movt	r8, #4
   1bf6c:	sub	sp, sp, #32
   1bf70:	mov	r4, r0
   1bf74:	mov	r0, r1
   1bf78:	ldr	r3, [r8]
   1bf7c:	mov	r1, #0
   1bf80:	ldr	r2, [r4, #28]
   1bf84:	str	r3, [sp, #28]
   1bf88:	bl	1ca78 <__assert_fail@plt+0xa250>
   1bf8c:	subs	r6, r0, #0
   1bf90:	moveq	r0, r6
   1bf94:	beq	1c044 <__assert_fail@plt+0x981c>
   1bf98:	mov	r1, #0
   1bf9c:	add	r0, sp, #4
   1bfa0:	mov	r5, #1
   1bfa4:	bl	21e08 <__assert_fail@plt+0xf5e0>
   1bfa8:	ldr	r0, [r4, #4]
   1bfac:	bl	126b4 <p11_kit_iter_next@plt>
   1bfb0:	subs	r7, r0, #0
   1bfb4:	add	r0, sp, #4
   1bfb8:	bne	1c098 <__assert_fail@plt+0x9870>
   1bfbc:	mov	r1, #2048	; 0x800
   1bfc0:	bl	21fa0 <__assert_fail@plt+0xf778>
   1bfc4:	cmp	r0, #0
   1bfc8:	beq	1c080 <__assert_fail@plt+0x9858>
   1bfcc:	movw	r2, #25804	; 0x64cc
   1bfd0:	ldr	r0, [r4, #52]	; 0x34
   1bfd4:	movt	r2, #2
   1bfd8:	ldr	r1, [r4, #56]	; 0x38
   1bfdc:	add	r3, sp, #4
   1bfe0:	bl	1e754 <__assert_fail@plt+0xbf2c>
   1bfe4:	cmp	r0, #0
   1bfe8:	beq	1c080 <__assert_fail@plt+0x9858>
   1bfec:	mov	r1, r5
   1bff0:	mov	r0, r4
   1bff4:	bl	19ff8 <__assert_fail@plt+0x77d0>
   1bff8:	mvn	r2, #0
   1bffc:	mov	r5, r0
   1c000:	mov	r0, r6
   1c004:	mov	r1, r5
   1c008:	bl	1cc1c <__assert_fail@plt+0xa3f4>
   1c00c:	cmp	r0, #0
   1c010:	bne	1c05c <__assert_fail@plt+0x9834>
   1c014:	mov	r0, r5
   1c018:	mov	r4, #0
   1c01c:	bl	122c4 <free@plt>
   1c020:	add	r0, sp, #4
   1c024:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1c028:	mov	r0, r6
   1c02c:	mov	r1, #0
   1c030:	mov	r2, r4
   1c034:	bl	1ccd0 <__assert_fail@plt+0xa4a8>
   1c038:	cmp	r0, #0
   1c03c:	movne	r0, r4
   1c040:	moveq	r0, #0
   1c044:	ldr	r2, [sp, #28]
   1c048:	ldr	r3, [r8]
   1c04c:	cmp	r2, r3
   1c050:	bne	1c0c8 <__assert_fail@plt+0x98a0>
   1c054:	add	sp, sp, #32
   1c058:	pop	{r4, r5, r6, r7, r8, pc}
   1c05c:	mov	r0, r6
   1c060:	ldmib	sp, {r1, r2}
   1c064:	bl	1cc1c <__assert_fail@plt+0xa3f4>
   1c068:	cmp	r0, #0
   1c06c:	beq	1c014 <__assert_fail@plt+0x97ec>
   1c070:	mov	r0, r5
   1c074:	mov	r5, r7
   1c078:	bl	122c4 <free@plt>
   1c07c:	b	1bfa8 <__assert_fail@plt+0x9780>
   1c080:	movw	r0, #24400	; 0x5f50
   1c084:	ldr	r1, [pc, #64]	; 1c0cc <__assert_fail@plt+0x98a4>
   1c088:	movt	r0, #2
   1c08c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1c090:	mov	r0, #0
   1c094:	b	1c044 <__assert_fail@plt+0x981c>
   1c098:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1c09c:	cmp	r7, #1
   1c0a0:	movls	r4, #1
   1c0a4:	bls	1c028 <__assert_fail@plt+0x9800>
   1c0a8:	mov	r0, r7
   1c0ac:	mov	r4, #0
   1c0b0:	bl	12774 <p11_kit_strerror@plt>
   1c0b4:	mov	r1, r0
   1c0b8:	movw	r0, #31360	; 0x7a80
   1c0bc:	movt	r0, #2
   1c0c0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1c0c4:	b	1c028 <__assert_fail@plt+0x9800>
   1c0c8:	bl	12360 <__stack_chk_fail@plt>
   1c0cc:	andeq	r7, r2, ip, asr lr
   1c0d0:	mov	r2, #0
   1c0d4:	b	1bd84 <__assert_fail@plt+0x955c>
   1c0d8:	mov	r2, #1
   1c0dc:	b	1bd84 <__assert_fail@plt+0x955c>
   1c0e0:	push	{r4, r5, r6, lr}
   1c0e4:	mov	r4, r0
   1c0e8:	mov	r6, r1
   1c0ec:	mov	r5, #0
   1c0f0:	ldr	r0, [r4, #4]
   1c0f4:	bl	126b4 <p11_kit_iter_next@plt>
   1c0f8:	mov	r1, r5
   1c0fc:	subs	r3, r0, #0
   1c100:	bne	1c134 <__assert_fail@plt+0x990c>
   1c104:	cmp	r5, #0
   1c108:	mov	r0, r6
   1c10c:	mov	r5, #1
   1c110:	bne	1c14c <__assert_fail@plt+0x9924>
   1c114:	ldr	r2, [r4, #28]
   1c118:	bl	1ca78 <__assert_fail@plt+0xa250>
   1c11c:	ldr	r1, [r4, #52]	; 0x34
   1c120:	ldr	r2, [r4, #56]	; 0x38
   1c124:	bl	1cef4 <__assert_fail@plt+0xa6cc>
   1c128:	cmp	r0, #0
   1c12c:	bne	1c0f0 <__assert_fail@plt+0x98c8>
   1c130:	pop	{r4, r5, r6, pc}
   1c134:	cmp	r3, #1
   1c138:	bhi	1c174 <__assert_fail@plt+0x994c>
   1c13c:	cmp	r5, #0
   1c140:	beq	1c160 <__assert_fail@plt+0x9938>
   1c144:	mov	r0, #1
   1c148:	pop	{r4, r5, r6, pc}
   1c14c:	movw	r0, #32400	; 0x7e90
   1c150:	movt	r0, #2
   1c154:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1c158:	mov	r0, r5
   1c15c:	pop	{r4, r5, r6, pc}
   1c160:	movw	r0, #32464	; 0x7ed0
   1c164:	movt	r0, #2
   1c168:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1c16c:	mov	r0, r5
   1c170:	pop	{r4, r5, r6, pc}
   1c174:	bl	12774 <p11_kit_strerror@plt>
   1c178:	mov	r1, r0
   1c17c:	movw	r0, #31360	; 0x7a80
   1c180:	movt	r0, #2
   1c184:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1c188:	mov	r0, #0
   1c18c:	pop	{r4, r5, r6, pc}
   1c190:	push	{r3, r4, r5, r6, r7, lr}
   1c194:	mov	r4, r0
   1c198:	mov	r0, r1
   1c19c:	ldr	r1, [r4, #28]
   1c1a0:	bl	1cf30 <__assert_fail@plt+0xa708>
   1c1a4:	subs	r7, r0, #0
   1c1a8:	bne	1c1f8 <__assert_fail@plt+0x99d0>
   1c1ac:	b	1c268 <__assert_fail@plt+0x9a40>
   1c1b0:	mov	r0, r4
   1c1b4:	bl	19fb0 <__assert_fail@plt+0x7788>
   1c1b8:	movw	r2, #32488	; 0x7ee8
   1c1bc:	movt	r2, #2
   1c1c0:	subs	r5, r0, #0
   1c1c4:	mov	r0, r7
   1c1c8:	mov	r1, r5
   1c1cc:	beq	1c240 <__assert_fail@plt+0x9a18>
   1c1d0:	bl	1d104 <__assert_fail@plt+0xa8dc>
   1c1d4:	mov	r6, r0
   1c1d8:	mov	r0, r5
   1c1dc:	bl	122c4 <free@plt>
   1c1e0:	mov	r0, r6
   1c1e4:	ldr	r1, [r4, #52]	; 0x34
   1c1e8:	ldr	r2, [r4, #56]	; 0x38
   1c1ec:	bl	1cef4 <__assert_fail@plt+0xa6cc>
   1c1f0:	subs	r5, r0, #0
   1c1f4:	beq	1c22c <__assert_fail@plt+0x9a04>
   1c1f8:	ldr	r0, [r4, #4]
   1c1fc:	bl	126b4 <p11_kit_iter_next@plt>
   1c200:	subs	r3, r0, #0
   1c204:	beq	1c1b0 <__assert_fail@plt+0x9988>
   1c208:	cmp	r3, #1
   1c20c:	movls	r5, #1
   1c210:	bls	1c22c <__assert_fail@plt+0x9a04>
   1c214:	bl	12774 <p11_kit_strerror@plt>
   1c218:	mov	r5, #0
   1c21c:	mov	r1, r0
   1c220:	movw	r0, #31360	; 0x7a80
   1c224:	movt	r0, #2
   1c228:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1c22c:	mov	r0, r7
   1c230:	mov	r1, r5
   1c234:	bl	1d3f0 <__assert_fail@plt+0xabc8>
   1c238:	mov	r0, r5
   1c23c:	pop	{r3, r4, r5, r6, r7, pc}
   1c240:	mov	r5, #1
   1c244:	movw	r0, #23980	; 0x5dac
   1c248:	movw	r1, #26124	; 0x660c
   1c24c:	movt	r0, #2
   1c250:	movt	r1, #2
   1c254:	movw	r2, #32372	; 0x7e74
   1c258:	movt	r2, #2
   1c25c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1c260:	mov	r0, r5
   1c264:	pop	{r3, r4, r5, r6, r7, pc}
   1c268:	mov	r5, r7
   1c26c:	mov	r0, r5
   1c270:	pop	{r3, r4, r5, r6, r7, pc}
   1c274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c278:	movw	r4, #17144	; 0x42f8
   1c27c:	movt	r4, #4
   1c280:	sub	sp, sp, #300	; 0x12c
   1c284:	mov	r2, #112	; 0x70
   1c288:	mov	r6, r0
   1c28c:	ldr	r3, [r4]
   1c290:	mov	r7, r1
   1c294:	add	r0, sp, #180	; 0xb4
   1c298:	mov	r1, #0
   1c29c:	movw	r5, #1001	; 0x3e9
   1c2a0:	mov	r8, #1000	; 0x3e8
   1c2a4:	str	r3, [sp, #292]	; 0x124
   1c2a8:	bl	125e8 <memset@plt>
   1c2ac:	mov	r1, #0
   1c2b0:	add	r0, sp, #108	; 0x6c
   1c2b4:	movw	r2, #27448	; 0x6b38
   1c2b8:	movt	r2, #2
   1c2bc:	str	r2, [sp, #180]	; 0xb4
   1c2c0:	movw	r2, #32528	; 0x7f10
   1c2c4:	movt	r2, #2
   1c2c8:	str	r2, [sp, #212]	; 0xd4
   1c2cc:	movw	r2, #24060	; 0x5dfc
   1c2d0:	movt	r2, #2
   1c2d4:	str	r2, [sp, #244]	; 0xf4
   1c2d8:	mov	r2, #72	; 0x48
   1c2dc:	mov	sl, #113	; 0x71
   1c2e0:	str	r8, [sp, #192]	; 0xc0
   1c2e4:	str	r5, [sp, #208]	; 0xd0
   1c2e8:	mov	fp, #118	; 0x76
   1c2ec:	str	sl, [sp, #256]	; 0x100
   1c2f0:	movw	r3, #29360	; 0x72b0
   1c2f4:	movw	r9, #1002	; 0x3ea
   1c2f8:	movt	r3, #2
   1c2fc:	str	r9, [sp, #224]	; 0xe0
   1c300:	str	r3, [sp, #196]	; 0xc4
   1c304:	movw	r3, #24052	; 0x5df4
   1c308:	str	fp, [sp, #240]	; 0xf0
   1c30c:	movt	r3, #2
   1c310:	str	r3, [sp, #228]	; 0xe4
   1c314:	movw	r3, #24068	; 0x5e04
   1c318:	movt	r3, #2
   1c31c:	str	r3, [sp, #260]	; 0x104
   1c320:	mov	r3, #1
   1c324:	str	r3, [sp, #184]	; 0xb8
   1c328:	str	r3, [sp, #200]	; 0xc8
   1c32c:	mov	r3, #104	; 0x68
   1c330:	str	r3, [sp, #272]	; 0x110
   1c334:	bl	125e8 <memset@plt>
   1c338:	add	r0, sp, #40	; 0x28
   1c33c:	str	r8, [sp, #120]	; 0x78
   1c340:	str	r5, [sp, #132]	; 0x84
   1c344:	movw	r3, #27456	; 0x6b40
   1c348:	str	sl, [sp, #156]	; 0x9c
   1c34c:	movt	r3, #2
   1c350:	str	fp, [sp, #144]	; 0x90
   1c354:	movw	r2, #32536	; 0x7f18
   1c358:	str	r3, [sp, #112]	; 0x70
   1c35c:	movt	r2, #2
   1c360:	movw	r3, #27584	; 0x6bc0
   1c364:	str	r2, [sp, #124]	; 0x7c
   1c368:	movt	r3, #2
   1c36c:	movw	r2, #30116	; 0x75a4
   1c370:	str	r3, [sp, #128]	; 0x80
   1c374:	movt	r2, #2
   1c378:	movw	r3, #30392	; 0x76b8
   1c37c:	str	r2, [sp, #136]	; 0x88
   1c380:	movt	r3, #2
   1c384:	movw	r2, #24164	; 0x5e64
   1c388:	str	r3, [sp, #140]	; 0x8c
   1c38c:	movt	r2, #2
   1c390:	movw	r3, #24192	; 0x5e80
   1c394:	str	r2, [sp, #148]	; 0x94
   1c398:	movt	r3, #2
   1c39c:	str	r3, [sp, #160]	; 0xa0
   1c3a0:	bl	19644 <__assert_fail@plt+0x6e1c>
   1c3a4:	mov	r8, r5
   1c3a8:	movw	r5, #17160	; 0x4308
   1c3ac:	movt	r5, #4
   1c3b0:	mov	sl, #0
   1c3b4:	mov	r0, r6
   1c3b8:	mov	r1, r7
   1c3bc:	add	r2, sp, #180	; 0xb4
   1c3c0:	bl	25450 <p11_dict_direct_equal@@Base+0x1c58>
   1c3c4:	cmn	r0, #1
   1c3c8:	beq	1c47c <__assert_fail@plt+0x9c54>
   1c3cc:	cmp	r0, #118	; 0x76
   1c3d0:	beq	1c3b4 <__assert_fail@plt+0x9b8c>
   1c3d4:	ble	1c410 <__assert_fail@plt+0x9be8>
   1c3d8:	cmp	r0, r8
   1c3dc:	beq	1c464 <__assert_fail@plt+0x9c3c>
   1c3e0:	cmp	r0, r9
   1c3e4:	beq	1c430 <__assert_fail@plt+0x9c08>
   1c3e8:	cmp	r0, #1000	; 0x3e8
   1c3ec:	beq	1c438 <__assert_fail@plt+0x9c10>
   1c3f0:	movw	r0, #24248	; 0x5eb8
   1c3f4:	movw	r1, #32772	; 0x8004
   1c3f8:	movw	r3, #32496	; 0x7ef0
   1c3fc:	movt	r0, #2
   1c400:	movt	r1, #2
   1c404:	mov	r2, #243	; 0xf3
   1c408:	movt	r3, #2
   1c40c:	bl	12828 <__assert_fail@plt>
   1c410:	cmp	r0, #104	; 0x68
   1c414:	beq	1c450 <__assert_fail@plt+0x9c28>
   1c418:	cmp	r0, #113	; 0x71
   1c41c:	beq	1c3b4 <__assert_fail@plt+0x9b8c>
   1c420:	cmp	r0, #63	; 0x3f
   1c424:	bne	1c3f0 <__assert_fail@plt+0x9bc8>
   1c428:	mov	r0, #2
   1c42c:	bl	12510 <exit@plt>
   1c430:	mov	sl, #1
   1c434:	b	1c3b4 <__assert_fail@plt+0x9b8c>
   1c438:	add	r0, sp, #40	; 0x28
   1c43c:	ldr	r1, [r5]
   1c440:	bl	197f0 <__assert_fail@plt+0x6fc8>
   1c444:	cmp	r0, #0
   1c448:	bne	1c3b4 <__assert_fail@plt+0x9b8c>
   1c44c:	b	1c428 <__assert_fail@plt+0x9c00>
   1c450:	add	r0, sp, #108	; 0x6c
   1c454:	add	r1, sp, #180	; 0xb4
   1c458:	bl	251b8 <p11_dict_direct_equal@@Base+0x19c0>
   1c45c:	mov	r0, #0
   1c460:	bl	12510 <exit@plt>
   1c464:	add	r0, sp, #40	; 0x28
   1c468:	ldr	r1, [r5]
   1c46c:	bl	19a98 <__assert_fail@plt+0x7270>
   1c470:	cmp	r0, #0
   1c474:	bne	1c3b4 <__assert_fail@plt+0x9b8c>
   1c478:	b	1c428 <__assert_fail@plt+0x9c00>
   1c47c:	movw	r3, #17152	; 0x4300
   1c480:	movt	r3, #4
   1c484:	ldr	r3, [r3]
   1c488:	cmp	r6, r3
   1c48c:	bne	1c814 <__assert_fail@plt+0x9fec>
   1c490:	movw	r1, #28824	; 0x7098
   1c494:	add	r0, sp, #40	; 0x28
   1c498:	movt	r1, #2
   1c49c:	bl	19d18 <__assert_fail@plt+0x74f0>
   1c4a0:	cmp	r0, #0
   1c4a4:	beq	1c80c <__assert_fail@plt+0x9fe4>
   1c4a8:	cmp	sl, #0
   1c4ac:	ldr	r3, [sp, #68]	; 0x44
   1c4b0:	movw	r6, #17132	; 0x42ec
   1c4b4:	movt	r6, #4
   1c4b8:	movne	r7, #6
   1c4bc:	moveq	r7, #2
   1c4c0:	orr	r3, r3, #16777216	; 0x1000000
   1c4c4:	str	r3, [sp, #68]	; 0x44
   1c4c8:	ldr	r0, [sp, #44]	; 0x2c
   1c4cc:	bl	126b4 <p11_kit_iter_next@plt>
   1c4d0:	subs	r5, r0, #0
   1c4d4:	bne	1c660 <__assert_fail@plt+0x9e38>
   1c4d8:	ldr	r3, [r6]
   1c4dc:	movw	r5, #17132	; 0x42ec
   1c4e0:	movt	r5, #4
   1c4e4:	tst	r3, #64	; 0x40
   1c4e8:	bne	1c688 <__assert_fail@plt+0x9e60>
   1c4ec:	bl	12564 <p11_kit_uri_new@plt>
   1c4f0:	mov	r5, r0
   1c4f4:	bl	12798 <p11_kit_uri_get_token_info@plt>
   1c4f8:	mov	r8, r0
   1c4fc:	ldr	r0, [sp, #44]	; 0x2c
   1c500:	bl	122d0 <p11_kit_iter_get_token@plt>
   1c504:	mov	r2, #160	; 0xa0
   1c508:	mov	r1, r0
   1c50c:	mov	r0, r8
   1c510:	bl	122e8 <memcpy@plt>
   1c514:	mov	r1, #0
   1c518:	ldr	r0, [sp, #84]	; 0x54
   1c51c:	bl	20afc <__assert_fail@plt+0xe2d4>
   1c520:	subs	r1, r0, #0
   1c524:	beq	1c530 <__assert_fail@plt+0x9d08>
   1c528:	mov	r0, r5
   1c52c:	bl	127a4 <p11_kit_uri_set_attribute@plt>
   1c530:	movw	r1, #258	; 0x102
   1c534:	ldr	r0, [sp, #84]	; 0x54
   1c538:	bl	20afc <__assert_fail@plt+0xe2d4>
   1c53c:	subs	r1, r0, #0
   1c540:	beq	1c54c <__assert_fail@plt+0x9d24>
   1c544:	mov	r0, r5
   1c548:	bl	127a4 <p11_kit_uri_set_attribute@plt>
   1c54c:	mov	r0, r5
   1c550:	mov	r1, r7
   1c554:	add	r2, sp, #12
   1c558:	bl	12414 <p11_kit_uri_format@plt>
   1c55c:	cmp	r0, #0
   1c560:	mov	r0, r5
   1c564:	movne	r3, #0
   1c568:	strne	r3, [sp, #12]
   1c56c:	bl	12474 <p11_kit_uri_free@plt>
   1c570:	ldr	r5, [sp, #12]
   1c574:	cmp	r5, #0
   1c578:	beq	1c7b0 <__assert_fail@plt+0x9f88>
   1c57c:	mov	r0, r5
   1c580:	bl	12450 <puts@plt>
   1c584:	mov	r0, r5
   1c588:	bl	122c4 <free@plt>
   1c58c:	add	r2, sp, #4
   1c590:	ldr	r0, [sp, #84]	; 0x54
   1c594:	mov	r1, #0
   1c598:	bl	20c54 <__assert_fail@plt+0xe42c>
   1c59c:	cmp	r0, #0
   1c5a0:	bne	1c74c <__assert_fail@plt+0x9f24>
   1c5a4:	ldr	r0, [sp, #84]	; 0x54
   1c5a8:	mov	r1, #3
   1c5ac:	bl	20d84 <__assert_fail@plt+0xe55c>
   1c5b0:	subs	r3, r0, #0
   1c5b4:	beq	1c5d0 <__assert_fail@plt+0x9da8>
   1c5b8:	ldr	r0, [r3, #4]
   1c5bc:	cmp	r0, #0
   1c5c0:	beq	1c5d0 <__assert_fail@plt+0x9da8>
   1c5c4:	ldr	r1, [r3, #8]
   1c5c8:	cmp	r1, #0
   1c5cc:	bne	1c778 <__assert_fail@plt+0x9f50>
   1c5d0:	movw	r1, #18276	; 0x4764
   1c5d4:	ldr	r0, [sp, #84]	; 0x54
   1c5d8:	movt	r1, #55364	; 0xd844
   1c5dc:	add	r2, sp, #3
   1c5e0:	bl	20b90 <__assert_fail@plt+0xe368>
   1c5e4:	cmp	r0, #0
   1c5e8:	beq	1c5f8 <__assert_fail@plt+0x9dd0>
   1c5ec:	ldrb	r3, [sp, #3]
   1c5f0:	cmp	r3, #0
   1c5f4:	bne	1c7a0 <__assert_fail@plt+0x9f78>
   1c5f8:	add	r2, sp, #3
   1c5fc:	ldr	r0, [sp, #84]	; 0x54
   1c600:	mov	r1, #134	; 0x86
   1c604:	bl	20b90 <__assert_fail@plt+0xe368>
   1c608:	cmp	r0, #0
   1c60c:	beq	1c61c <__assert_fail@plt+0x9df4>
   1c610:	ldrb	r3, [sp, #3]
   1c614:	cmp	r3, #0
   1c618:	bne	1c7c0 <__assert_fail@plt+0x9f98>
   1c61c:	movw	r0, #32932	; 0x80a4
   1c620:	movt	r0, #2
   1c624:	bl	12450 <puts@plt>
   1c628:	ldr	r0, [sp, #84]	; 0x54
   1c62c:	mov	r1, #135	; 0x87
   1c630:	add	r2, sp, #8
   1c634:	bl	20c54 <__assert_fail@plt+0xe42c>
   1c638:	cmp	r0, #0
   1c63c:	bne	1c6c4 <__assert_fail@plt+0x9e9c>
   1c640:	cmp	sl, #0
   1c644:	bne	1c6f0 <__assert_fail@plt+0x9ec8>
   1c648:	mov	r0, #10
   1c64c:	bl	12600 <putchar@plt>
   1c650:	ldr	r0, [sp, #44]	; 0x2c
   1c654:	bl	126b4 <p11_kit_iter_next@plt>
   1c658:	subs	r5, r0, #0
   1c65c:	beq	1c4d8 <__assert_fail@plt+0x9cb0>
   1c660:	add	r0, sp, #40	; 0x28
   1c664:	bl	19768 <__assert_fail@plt+0x6f40>
   1c668:	ldr	r2, [sp, #292]	; 0x124
   1c66c:	subs	r0, r5, #1
   1c670:	ldr	r3, [r4]
   1c674:	movne	r0, #1
   1c678:	cmp	r2, r3
   1c67c:	bne	1c808 <__assert_fail@plt+0x9fe0>
   1c680:	add	sp, sp, #300	; 0x12c
   1c684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c688:	ldr	r0, [sp, #44]	; 0x2c
   1c68c:	bl	12534 <p11_kit_iter_get_object@plt>
   1c690:	ldr	r2, [r5]
   1c694:	tst	r2, #64	; 0x40
   1c698:	bne	1c7ec <__assert_fail@plt+0x9fc4>
   1c69c:	ldr	r0, [sp, #84]	; 0x54
   1c6a0:	mvn	r1, #0
   1c6a4:	bl	21974 <__assert_fail@plt+0xf14c>
   1c6a8:	ldr	r3, [r6]
   1c6ac:	tst	r3, #64	; 0x40
   1c6b0:	mov	r5, r0
   1c6b4:	bne	1c7d0 <__assert_fail@plt+0x9fa8>
   1c6b8:	mov	r0, r5
   1c6bc:	bl	122c4 <free@plt>
   1c6c0:	b	1c4ec <__assert_fail@plt+0x9cc4>
   1c6c4:	movw	r0, #11560	; 0x2d28
   1c6c8:	ldr	r1, [sp, #8]
   1c6cc:	movt	r0, #4
   1c6d0:	bl	22900 <secure_getenv@@Base+0x2ac>
   1c6d4:	subs	r2, r0, #0
   1c6d8:	beq	1c640 <__assert_fail@plt+0x9e18>
   1c6dc:	movw	r1, #32956	; 0x80bc
   1c6e0:	mov	r0, #1
   1c6e4:	movt	r1, #2
   1c6e8:	bl	12624 <__printf_chk@plt>
   1c6ec:	b	1c640 <__assert_fail@plt+0x9e18>
   1c6f0:	ldr	r0, [sp, #84]	; 0x54
   1c6f4:	movw	r1, #297	; 0x129
   1c6f8:	bl	20d84 <__assert_fail@plt+0xe55c>
   1c6fc:	subs	r5, r0, #0
   1c700:	beq	1c648 <__assert_fail@plt+0x9e20>
   1c704:	mov	r1, #1024	; 0x400
   1c708:	add	r0, sp, #16
   1c70c:	bl	21e08 <__assert_fail@plt+0xf5e0>
   1c710:	ldmib	r5, {r0, r1}
   1c714:	add	r3, sp, #16
   1c718:	movw	r2, #58476	; 0xe46c
   1c71c:	add	r1, r0, r1
   1c720:	movt	r2, #2
   1c724:	bl	24fd4 <p11_dict_direct_equal@@Base+0x17dc>
   1c728:	ldr	r2, [sp, #20]
   1c72c:	ldr	r3, [sp, #16]
   1c730:	movw	r1, #32976	; 0x80d0
   1c734:	mov	r0, #1
   1c738:	movt	r1, #2
   1c73c:	bl	12624 <__printf_chk@plt>
   1c740:	add	r0, sp, #16
   1c744:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   1c748:	b	1c648 <__assert_fail@plt+0x9e20>
   1c74c:	movw	r0, #12664	; 0x3178
   1c750:	ldr	r1, [sp, #4]
   1c754:	movt	r0, #4
   1c758:	bl	22900 <secure_getenv@@Base+0x2ac>
   1c75c:	subs	r2, r0, #0
   1c760:	beq	1c5a4 <__assert_fail@plt+0x9d7c>
   1c764:	movw	r1, #32856	; 0x8058
   1c768:	mov	r0, #1
   1c76c:	movt	r1, #2
   1c770:	bl	12624 <__printf_chk@plt>
   1c774:	b	1c5a4 <__assert_fail@plt+0x9d7c>
   1c778:	bl	224d4 <strndup@@Base>
   1c77c:	movw	r1, #32872	; 0x8068
   1c780:	movt	r1, #2
   1c784:	mov	r5, r0
   1c788:	mov	r2, r0
   1c78c:	mov	r0, #1
   1c790:	bl	12624 <__printf_chk@plt>
   1c794:	mov	r0, r5
   1c798:	bl	122c4 <free@plt>
   1c79c:	b	1c5d0 <__assert_fail@plt+0x9da8>
   1c7a0:	movw	r0, #32888	; 0x8078
   1c7a4:	movt	r0, #2
   1c7a8:	bl	12450 <puts@plt>
   1c7ac:	b	1c628 <__assert_fail@plt+0x9e00>
   1c7b0:	movw	r0, #32820	; 0x8034
   1c7b4:	movt	r0, #2
   1c7b8:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1c7bc:	b	1c4c8 <__assert_fail@plt+0x9ca0>
   1c7c0:	movw	r0, #32912	; 0x8090
   1c7c4:	movt	r0, #2
   1c7c8:	bl	12450 <puts@plt>
   1c7cc:	b	1c628 <__assert_fail@plt+0x9e00>
   1c7d0:	movw	r1, #32804	; 0x8024
   1c7d4:	mov	r0, #64	; 0x40
   1c7d8:	movt	r1, #2
   1c7dc:	ldr	r2, [pc, #64]	; 1c824 <__assert_fail@plt+0x9ffc>
   1c7e0:	mov	r3, r5
   1c7e4:	bl	22d4c <secure_getenv@@Base+0x6f8>
   1c7e8:	b	1c6b8 <__assert_fail@plt+0x9e90>
   1c7ec:	mov	r3, r0
   1c7f0:	movw	r1, #32788	; 0x8014
   1c7f4:	mov	r0, #64	; 0x40
   1c7f8:	movt	r1, #2
   1c7fc:	ldr	r2, [pc, #32]	; 1c824 <__assert_fail@plt+0x9ffc>
   1c800:	bl	22d4c <secure_getenv@@Base+0x6f8>
   1c804:	b	1c69c <__assert_fail@plt+0x9e74>
   1c808:	bl	12360 <__stack_chk_fail@plt>
   1c80c:	mov	r0, #1
   1c810:	bl	12510 <exit@plt>
   1c814:	movw	r0, #27608	; 0x6bd8
   1c818:	movt	r0, #2
   1c81c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1c820:	b	1c428 <__assert_fail@plt+0x9c00>
   1c824:	andeq	r7, r2, r0, lsl #30
   1c828:	push	{r4, lr}
   1c82c:	mov	r4, r0
   1c830:	ldr	r0, [r0, #8]
   1c834:	bl	122c4 <free@plt>
   1c838:	ldr	r0, [r4]
   1c83c:	bl	122c4 <free@plt>
   1c840:	ldr	r0, [r4, #4]
   1c844:	bl	122c4 <free@plt>
   1c848:	mov	r0, r4
   1c84c:	pop	{r4, lr}
   1c850:	b	122c4 <free@plt>
   1c854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c858:	movw	sl, #17144	; 0x42f8
   1c85c:	movt	sl, #4
   1c860:	mov	r5, r1
   1c864:	sub	sp, sp, #60	; 0x3c
   1c868:	subs	r7, r0, #0
   1c86c:	ldr	r1, [sl]
   1c870:	mov	r6, r2
   1c874:	mov	r8, r3
   1c878:	str	r1, [sp, #52]	; 0x34
   1c87c:	beq	1c9ec <__assert_fail@plt+0xa1c4>
   1c880:	cmp	r2, #0
   1c884:	beq	1c9cc <__assert_fail@plt+0xa1a4>
   1c888:	mov	r1, #0
   1c88c:	add	r0, sp, #12
   1c890:	movw	r9, #33236	; 0x81d4
   1c894:	bl	21e68 <__assert_fail@plt+0xf640>
   1c898:	movt	r9, #2
   1c89c:	mov	r4, #0
   1c8a0:	b	1c954 <__assert_fail@plt+0xa12c>
   1c8a4:	cmp	r4, #1
   1c8a8:	bne	1c8d8 <__assert_fail@plt+0xa0b0>
   1c8ac:	cmp	r5, #0
   1c8b0:	beq	1c8d8 <__assert_fail@plt+0xa0b0>
   1c8b4:	ldrb	r3, [r5]
   1c8b8:	cmp	r3, #46	; 0x2e
   1c8bc:	bne	1c8d8 <__assert_fail@plt+0xa0b0>
   1c8c0:	ldrb	r3, [r5, #1]
   1c8c4:	cmp	r3, #48	; 0x30
   1c8c8:	bne	1c8d8 <__assert_fail@plt+0xa0b0>
   1c8cc:	ldrb	r3, [r5, #2]
   1c8d0:	cmp	r3, #0
   1c8d4:	moveq	r5, #0
   1c8d8:	add	r0, sp, #12
   1c8dc:	mov	r1, r7
   1c8e0:	mvn	r2, #0
   1c8e4:	bl	2212c <__assert_fail@plt+0xf904>
   1c8e8:	mov	r1, #16
   1c8ec:	mov	r3, r1
   1c8f0:	mov	r2, #1
   1c8f4:	str	r9, [sp]
   1c8f8:	add	r0, sp, #36	; 0x24
   1c8fc:	str	r4, [sp, #4]
   1c900:	bl	12804 <__snprintf_chk@plt>
   1c904:	add	r0, sp, #12
   1c908:	add	r1, sp, #36	; 0x24
   1c90c:	mvn	r2, #0
   1c910:	bl	2212c <__assert_fail@plt+0xf904>
   1c914:	cmp	r5, #0
   1c918:	beq	1c92c <__assert_fail@plt+0xa104>
   1c91c:	add	r0, sp, #12
   1c920:	mov	r1, r5
   1c924:	mvn	r2, #0
   1c928:	bl	2212c <__assert_fail@plt+0xf904>
   1c92c:	ldr	ip, [sp, #20]
   1c930:	ands	fp, ip, #1
   1c934:	bne	1c97c <__assert_fail@plt+0xa154>
   1c938:	mov	r0, r8
   1c93c:	ldr	r1, [sp, #12]
   1c940:	blx	r6
   1c944:	cmp	r0, #0
   1c948:	blt	1c9b0 <__assert_fail@plt+0xa188>
   1c94c:	bne	1c9b8 <__assert_fail@plt+0xa190>
   1c950:	add	r4, r4, #1
   1c954:	add	r0, sp, #12
   1c958:	mov	r1, #64	; 0x40
   1c95c:	bl	21fa0 <__assert_fail@plt+0xf778>
   1c960:	cmp	r4, #0
   1c964:	bne	1c8a4 <__assert_fail@plt+0xa07c>
   1c968:	add	r0, sp, #12
   1c96c:	mov	r1, r7
   1c970:	mvn	r2, #0
   1c974:	bl	2212c <__assert_fail@plt+0xf904>
   1c978:	b	1c914 <__assert_fail@plt+0xa0ec>
   1c97c:	movw	r0, #23980	; 0x5dac
   1c980:	movw	r1, #31328	; 0x7a60
   1c984:	movt	r0, #2
   1c988:	movt	r1, #2
   1c98c:	ldr	r2, [pc, #120]	; 1ca0c <__assert_fail@plt+0xa1e4>
   1c990:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1c994:	mov	r0, #0
   1c998:	ldr	r2, [sp, #52]	; 0x34
   1c99c:	ldr	r3, [sl]
   1c9a0:	cmp	r2, r3
   1c9a4:	bne	1c9c8 <__assert_fail@plt+0xa1a0>
   1c9a8:	add	sp, sp, #60	; 0x3c
   1c9ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9b0:	mov	r0, fp
   1c9b4:	b	1c998 <__assert_fail@plt+0xa170>
   1c9b8:	add	r0, sp, #12
   1c9bc:	mov	r1, fp
   1c9c0:	bl	21f34 <__assert_fail@plt+0xf70c>
   1c9c4:	b	1c998 <__assert_fail@plt+0xa170>
   1c9c8:	bl	12360 <__stack_chk_fail@plt>
   1c9cc:	movw	r0, #33212	; 0x81bc
   1c9d0:	movw	r1, #33196	; 0x81ac
   1c9d4:	movw	r3, #33004	; 0x80ec
   1c9d8:	movt	r0, #2
   1c9dc:	movt	r1, #2
   1c9e0:	movw	r2, #373	; 0x175
   1c9e4:	movt	r3, #2
   1c9e8:	bl	12828 <__assert_fail@plt>
   1c9ec:	movw	r0, #33176	; 0x8198
   1c9f0:	movw	r1, #33196	; 0x81ac
   1c9f4:	movw	r3, #33004	; 0x80ec
   1c9f8:	movt	r0, #2
   1c9fc:	movt	r1, #2
   1ca00:	mov	r2, #372	; 0x174
   1ca04:	movt	r3, #2
   1ca08:	bl	12828 <__assert_fail@plt>
   1ca0c:	andeq	r8, r2, r0, lsl #2
   1ca10:	push	{r3, lr}
   1ca14:	ldr	r0, [r0]
   1ca18:	bl	23010 <secure_getenv@@Base+0x9bc>
   1ca1c:	rsbs	r0, r0, #1
   1ca20:	movcc	r0, #0
   1ca24:	pop	{r3, pc}
   1ca28:	push	{r4, lr}
   1ca2c:	mov	r4, r1
   1ca30:	ldr	r0, [r0, #8]
   1ca34:	bl	12630 <link@plt>
   1ca38:	cmp	r0, #0
   1ca3c:	blt	1ca48 <__assert_fail@plt+0xa220>
   1ca40:	mov	r0, #1
   1ca44:	pop	{r4, pc}
   1ca48:	bl	125b8 <__errno_location@plt>
   1ca4c:	ldr	r0, [r0]
   1ca50:	cmp	r0, #17
   1ca54:	bne	1ca60 <__assert_fail@plt+0xa238>
   1ca58:	mov	r0, #0
   1ca5c:	pop	{r4, pc}
   1ca60:	mov	r2, r4
   1ca64:	movw	r1, #33240	; 0x81d8
   1ca68:	movt	r1, #2
   1ca6c:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1ca70:	mvn	r0, #0
   1ca74:	pop	{r4, pc}
   1ca78:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ca7c:	movw	r6, #17144	; 0x42f8
   1ca80:	movt	r6, #4
   1ca84:	sub	sp, sp, #12
   1ca88:	subs	r7, r0, #0
   1ca8c:	mov	r5, r1
   1ca90:	ldr	r3, [r6]
   1ca94:	mov	r8, r2
   1ca98:	str	r3, [sp, #4]
   1ca9c:	beq	1cbd4 <__assert_fail@plt+0xa3ac>
   1caa0:	cmp	r1, #0
   1caa4:	movw	r3, #58476	; 0xe46c
   1caa8:	movt	r3, #2
   1caac:	movw	r1, #33280	; 0x8200
   1cab0:	mov	r0, sp
   1cab4:	movt	r1, #2
   1cab8:	moveq	r5, r3
   1cabc:	mov	r2, r7
   1cac0:	mov	r3, r5
   1cac4:	bl	12660 <asprintf@plt>
   1cac8:	cmp	r0, #0
   1cacc:	blt	1cb50 <__assert_fail@plt+0xa328>
   1cad0:	ldr	r0, [sp]
   1cad4:	bl	12588 <mkstemp@plt>
   1cad8:	subs	r9, r0, #0
   1cadc:	blt	1cb68 <__assert_fail@plt+0xa340>
   1cae0:	mov	r0, #1
   1cae4:	mov	r1, #20
   1cae8:	bl	1221c <calloc@plt>
   1caec:	subs	r4, r0, #0
   1caf0:	beq	1cb94 <__assert_fail@plt+0xa36c>
   1caf4:	ldr	r3, [sp]
   1caf8:	mov	r0, r7
   1cafc:	str	r3, [r4, #8]
   1cb00:	bl	125c4 <__strdup@plt>
   1cb04:	cmp	r0, #0
   1cb08:	mov	r7, r0
   1cb0c:	str	r0, [r4]
   1cb10:	beq	1cbb4 <__assert_fail@plt+0xa38c>
   1cb14:	mov	r0, r5
   1cb18:	bl	125c4 <__strdup@plt>
   1cb1c:	cmp	r0, #0
   1cb20:	mov	r7, r0
   1cb24:	str	r0, [r4, #4]
   1cb28:	strne	r8, [r4, #16]
   1cb2c:	movne	r0, r4
   1cb30:	strne	r9, [r4, #12]
   1cb34:	beq	1cbf4 <__assert_fail@plt+0xa3cc>
   1cb38:	ldr	r2, [sp, #4]
   1cb3c:	ldr	r3, [r6]
   1cb40:	cmp	r2, r3
   1cb44:	bne	1cc14 <__assert_fail@plt+0xa3ec>
   1cb48:	add	sp, sp, #12
   1cb4c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cb50:	movw	r0, #24400	; 0x5f50
   1cb54:	ldr	r1, [pc, #188]	; 1cc18 <__assert_fail@plt+0xa3f0>
   1cb58:	movt	r0, #2
   1cb5c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1cb60:	mov	r0, #0
   1cb64:	b	1cb38 <__assert_fail@plt+0xa310>
   1cb68:	bl	125b8 <__errno_location@plt>
   1cb6c:	mov	r2, r7
   1cb70:	mov	r3, r5
   1cb74:	movw	r1, #33292	; 0x820c
   1cb78:	movt	r1, #2
   1cb7c:	ldr	r0, [r0]
   1cb80:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1cb84:	ldr	r0, [sp]
   1cb88:	bl	122c4 <free@plt>
   1cb8c:	mov	r0, #0
   1cb90:	b	1cb38 <__assert_fail@plt+0xa310>
   1cb94:	movw	r0, #23980	; 0x5dac
   1cb98:	movw	r1, #33320	; 0x8228
   1cb9c:	movt	r0, #2
   1cba0:	movt	r1, #2
   1cba4:	ldr	r2, [pc, #108]	; 1cc18 <__assert_fail@plt+0xa3f0>
   1cba8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1cbac:	mov	r0, r4
   1cbb0:	b	1cb38 <__assert_fail@plt+0xa310>
   1cbb4:	movw	r0, #23980	; 0x5dac
   1cbb8:	movw	r1, #33336	; 0x8238
   1cbbc:	movt	r0, #2
   1cbc0:	movt	r1, #2
   1cbc4:	ldr	r2, [pc, #76]	; 1cc18 <__assert_fail@plt+0xa3f0>
   1cbc8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1cbcc:	mov	r0, r7
   1cbd0:	b	1cb38 <__assert_fail@plt+0xa310>
   1cbd4:	movw	r0, #23980	; 0x5dac
   1cbd8:	movw	r1, #30876	; 0x789c
   1cbdc:	movt	r0, #2
   1cbe0:	movt	r1, #2
   1cbe4:	ldr	r2, [pc, #44]	; 1cc18 <__assert_fail@plt+0xa3f0>
   1cbe8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1cbec:	mov	r0, r7
   1cbf0:	b	1cb38 <__assert_fail@plt+0xa310>
   1cbf4:	movw	r0, #23980	; 0x5dac
   1cbf8:	movw	r1, #33356	; 0x824c
   1cbfc:	movt	r0, #2
   1cc00:	movt	r1, #2
   1cc04:	ldr	r2, [pc, #12]	; 1cc18 <__assert_fail@plt+0xa3f0>
   1cc08:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1cc0c:	mov	r0, r7
   1cc10:	b	1cb38 <__assert_fail@plt+0xa310>
   1cc14:	bl	12360 <__stack_chk_fail@plt>
   1cc18:	andeq	r8, r2, r4, lsl r1
   1cc1c:	push	{r4, r5, r6, r7, r8, lr}
   1cc20:	subs	r6, r0, #0
   1cc24:	mov	r7, r1
   1cc28:	mov	r5, r2
   1cc2c:	beq	1ccc4 <__assert_fail@plt+0xa49c>
   1cc30:	cmp	r2, #0
   1cc34:	blt	1ccac <__assert_fail@plt+0xa484>
   1cc38:	cmp	r5, #0
   1cc3c:	ble	1cca0 <__assert_fail@plt+0xa478>
   1cc40:	mov	r4, #0
   1cc44:	b	1cc50 <__assert_fail@plt+0xa428>
   1cc48:	cmp	r4, r5
   1cc4c:	bge	1cca0 <__assert_fail@plt+0xa478>
   1cc50:	add	r1, r7, r4
   1cc54:	rsb	r2, r4, r5
   1cc58:	ldr	r0, [r6, #12]
   1cc5c:	bl	1263c <write@plt>
   1cc60:	cmp	r0, #0
   1cc64:	addgt	r4, r4, r0
   1cc68:	bgt	1cc48 <__assert_fail@plt+0xa420>
   1cc6c:	bl	125b8 <__errno_location@plt>
   1cc70:	ldr	r0, [r0]
   1cc74:	cmp	r0, #11
   1cc78:	cmpne	r0, #4
   1cc7c:	movne	r8, #0
   1cc80:	moveq	r8, #1
   1cc84:	beq	1cc48 <__assert_fail@plt+0xa420>
   1cc88:	ldr	r2, [r6, #8]
   1cc8c:	movw	r1, #33380	; 0x8264
   1cc90:	movt	r1, #2
   1cc94:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1cc98:	mov	r0, r8
   1cc9c:	pop	{r4, r5, r6, r7, r8, pc}
   1cca0:	mov	r8, #1
   1cca4:	mov	r0, r8
   1cca8:	pop	{r4, r5, r6, r7, r8, pc}
   1ccac:	cmp	r1, #0
   1ccb0:	beq	1cca0 <__assert_fail@plt+0xa478>
   1ccb4:	mov	r0, r1
   1ccb8:	bl	12540 <strlen@plt>
   1ccbc:	mov	r5, r0
   1ccc0:	b	1cc38 <__assert_fail@plt+0xa410>
   1ccc4:	mov	r8, r6
   1ccc8:	mov	r0, r8
   1cccc:	pop	{r4, r5, r6, r7, r8, pc}
   1ccd0:	push	{r4, r5, r6, r7, r8, lr}
   1ccd4:	movw	r5, #17144	; 0x42f8
   1ccd8:	movt	r5, #4
   1ccdc:	sub	sp, sp, #8
   1cce0:	subs	r4, r0, #0
   1cce4:	mov	r6, r1
   1cce8:	ldr	r3, [r5]
   1ccec:	str	r3, [sp, #4]
   1ccf0:	beq	1ce60 <__assert_fail@plt+0xa638>
   1ccf4:	cmp	r2, #0
   1ccf8:	beq	1cdc4 <__assert_fail@plt+0xa59c>
   1ccfc:	movw	r1, #33408	; 0x8280
   1cd00:	mov	r0, sp
   1cd04:	movt	r1, #2
   1cd08:	ldm	r4, {r2, r3}
   1cd0c:	bl	12660 <asprintf@plt>
   1cd10:	cmp	r0, #0
   1cd14:	blt	1cdf8 <__assert_fail@plt+0xa5d0>
   1cd18:	ldr	r0, [r4, #12]
   1cd1c:	bl	127d4 <close@plt>
   1cd20:	cmp	r0, #0
   1cd24:	blt	1ce3c <__assert_fail@plt+0xa614>
   1cd28:	ldr	r0, [r4, #8]
   1cd2c:	mov	r1, #292	; 0x124
   1cd30:	bl	127b0 <chmod@plt>
   1cd34:	cmp	r0, #0
   1cd38:	blt	1ce94 <__assert_fail@plt+0xa66c>
   1cd3c:	ldr	r3, [r4, #16]
   1cd40:	tst	r3, #1
   1cd44:	bne	1ce10 <__assert_fail@plt+0xa5e8>
   1cd48:	ands	r8, r3, #2
   1cd4c:	beq	1ce68 <__assert_fail@plt+0xa640>
   1cd50:	ldr	r0, [sp]
   1cd54:	bl	122c4 <free@plt>
   1cd58:	mov	r3, r4
   1cd5c:	movw	r2, #51752	; 0xca28
   1cd60:	ldr	r0, [r4]
   1cd64:	movt	r2, #1
   1cd68:	ldr	r1, [r4, #4]
   1cd6c:	bl	1c854 <__assert_fail@plt+0xa02c>
   1cd70:	mov	r3, r0
   1cd74:	adds	r7, r3, #0
   1cd78:	ldr	r0, [r4, #8]
   1cd7c:	movne	r7, #1
   1cd80:	str	r3, [sp]
   1cd84:	cmp	r6, #0
   1cd88:	moveq	r8, #0
   1cd8c:	andne	r8, r7, #1
   1cd90:	bl	12384 <unlink@plt>
   1cd94:	cmp	r8, #0
   1cd98:	ldrne	r2, [sp]
   1cd9c:	movne	r3, #0
   1cda0:	ldreq	r0, [sp]
   1cda4:	movne	r0, r3
   1cda8:	strne	r3, [sp]
   1cdac:	strne	r2, [r6]
   1cdb0:	bl	122c4 <free@plt>
   1cdb4:	mov	r0, r4
   1cdb8:	bl	1c828 <__assert_fail@plt+0xa000>
   1cdbc:	mov	r0, r7
   1cdc0:	b	1cde0 <__assert_fail@plt+0xa5b8>
   1cdc4:	ldr	r0, [r4, #12]
   1cdc8:	bl	127d4 <close@plt>
   1cdcc:	ldr	r0, [r4, #8]
   1cdd0:	bl	12384 <unlink@plt>
   1cdd4:	mov	r0, r4
   1cdd8:	bl	1c828 <__assert_fail@plt+0xa000>
   1cddc:	mov	r0, #1
   1cde0:	ldr	r2, [sp, #4]
   1cde4:	ldr	r3, [r5]
   1cde8:	cmp	r2, r3
   1cdec:	bne	1ceec <__assert_fail@plt+0xa6c4>
   1cdf0:	add	sp, sp, #8
   1cdf4:	pop	{r4, r5, r6, r7, r8, pc}
   1cdf8:	movw	r0, #24400	; 0x5f50
   1cdfc:	ldr	r1, [pc, #236]	; 1cef0 <__assert_fail@plt+0xa6c8>
   1ce00:	movt	r0, #2
   1ce04:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ce08:	mov	r0, #0
   1ce0c:	b	1cde0 <__assert_fail@plt+0xa5b8>
   1ce10:	ldr	r0, [r4, #8]
   1ce14:	ldr	r1, [sp]
   1ce18:	bl	124d4 <rename@plt>
   1ce1c:	cmp	r0, #0
   1ce20:	blt	1ceb0 <__assert_fail@plt+0xa688>
   1ce24:	adds	r8, r6, #0
   1ce28:	ldr	r0, [r4, #8]
   1ce2c:	mov	r7, #1
   1ce30:	movne	r8, #1
   1ce34:	bl	12384 <unlink@plt>
   1ce38:	b	1cd94 <__assert_fail@plt+0xa56c>
   1ce3c:	bl	125b8 <__errno_location@plt>
   1ce40:	movw	r1, #33416	; 0x8288
   1ce44:	ldr	r2, [r4, #8]
   1ce48:	movt	r1, #2
   1ce4c:	ldr	r0, [r0]
   1ce50:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1ce54:	ldr	r0, [sp]
   1ce58:	mov	r7, #0
   1ce5c:	b	1cdb0 <__assert_fail@plt+0xa588>
   1ce60:	mov	r0, r4
   1ce64:	b	1cde0 <__assert_fail@plt+0xa5b8>
   1ce68:	ldr	r0, [r4, #8]
   1ce6c:	ldr	r1, [sp]
   1ce70:	bl	12630 <link@plt>
   1ce74:	cmp	r0, #0
   1ce78:	blt	1cecc <__assert_fail@plt+0xa6a4>
   1ce7c:	adds	r8, r6, #0
   1ce80:	mov	r7, #1
   1ce84:	movne	r8, #1
   1ce88:	ldr	r0, [r4, #8]
   1ce8c:	bl	12384 <unlink@plt>
   1ce90:	b	1cd94 <__assert_fail@plt+0xa56c>
   1ce94:	bl	125b8 <__errno_location@plt>
   1ce98:	movw	r1, #33440	; 0x82a0
   1ce9c:	ldr	r2, [r4, #8]
   1cea0:	movt	r1, #2
   1cea4:	ldr	r0, [r0]
   1cea8:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1ceac:	b	1ce54 <__assert_fail@plt+0xa62c>
   1ceb0:	bl	125b8 <__errno_location@plt>
   1ceb4:	movw	r1, #33476	; 0x82c4
   1ceb8:	ldr	r2, [sp]
   1cebc:	movt	r1, #2
   1cec0:	ldr	r0, [r0]
   1cec4:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1cec8:	b	1ce54 <__assert_fail@plt+0xa62c>
   1cecc:	bl	125b8 <__errno_location@plt>
   1ced0:	movw	r1, #33240	; 0x81d8
   1ced4:	ldr	r2, [sp]
   1ced8:	movt	r1, #2
   1cedc:	mov	r7, r8
   1cee0:	ldr	r0, [r0]
   1cee4:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1cee8:	b	1ce88 <__assert_fail@plt+0xa660>
   1ceec:	bl	12360 <__stack_chk_fail@plt>
   1cef0:	andeq	r8, r2, r8, lsr #2
   1cef4:	push	{r3, r4, r5, lr}
   1cef8:	subs	r5, r0, #0
   1cefc:	beq	1cf28 <__assert_fail@plt+0xa700>
   1cf00:	bl	1cc1c <__assert_fail@plt+0xa3f4>
   1cf04:	mov	r1, #0
   1cf08:	mov	r4, r0
   1cf0c:	mov	r0, r5
   1cf10:	mov	r2, r4
   1cf14:	bl	1ccd0 <__assert_fail@plt+0xa4a8>
   1cf18:	cmp	r0, #0
   1cf1c:	movne	r0, r4
   1cf20:	moveq	r0, #0
   1cf24:	pop	{r3, r4, r5, pc}
   1cf28:	mov	r0, r5
   1cf2c:	pop	{r3, r4, r5, pc}
   1cf30:	push	{r4, r5, r6, r7, r8, lr}
   1cf34:	movw	r4, #17144	; 0x42f8
   1cf38:	movt	r4, #4
   1cf3c:	sub	sp, sp, #96	; 0x60
   1cf40:	subs	r6, r0, #0
   1cf44:	mov	r7, r1
   1cf48:	ldr	r3, [r4]
   1cf4c:	str	r3, [sp, #92]	; 0x5c
   1cf50:	beq	1d07c <__assert_fail@plt+0xa854>
   1cf54:	mov	r1, #448	; 0x1c0
   1cf58:	bl	125dc <mkdir@plt>
   1cf5c:	cmp	r0, #0
   1cf60:	blt	1cfe0 <__assert_fail@plt+0xa7b8>
   1cf64:	mov	r0, #1
   1cf68:	mov	r1, #12
   1cf6c:	bl	1221c <calloc@plt>
   1cf70:	subs	r5, r0, #0
   1cf74:	beq	1d09c <__assert_fail@plt+0xa874>
   1cf78:	mov	r0, r6
   1cf7c:	bl	125c4 <__strdup@plt>
   1cf80:	cmp	r0, #0
   1cf84:	mov	r6, r0
   1cf88:	str	r0, [r5, #4]
   1cf8c:	beq	1d0bc <__assert_fail@plt+0xa894>
   1cf90:	movw	r0, #13676	; 0x356c
   1cf94:	movw	r1, #13776	; 0x35d0
   1cf98:	movt	r0, #2
   1cf9c:	movt	r1, #2
   1cfa0:	movw	r2, #8900	; 0x22c4
   1cfa4:	mov	r3, #0
   1cfa8:	movt	r2, #1
   1cfac:	bl	2336c <secure_getenv@@Base+0xd18>
   1cfb0:	cmp	r0, #0
   1cfb4:	mov	r6, r0
   1cfb8:	str	r0, [r5]
   1cfbc:	strne	r7, [r5, #8]
   1cfc0:	movne	r0, r5
   1cfc4:	beq	1d0dc <__assert_fail@plt+0xa8b4>
   1cfc8:	ldr	r2, [sp, #92]	; 0x5c
   1cfcc:	ldr	r3, [r4]
   1cfd0:	cmp	r2, r3
   1cfd4:	bne	1d0fc <__assert_fail@plt+0xa8d4>
   1cfd8:	add	sp, sp, #96	; 0x60
   1cfdc:	pop	{r4, r5, r6, r7, r8, pc}
   1cfe0:	bl	125b8 <__errno_location@plt>
   1cfe4:	mov	r5, r0
   1cfe8:	ldr	r0, [r0]
   1cfec:	cmp	r0, #17
   1cff0:	beq	1d05c <__assert_fail@plt+0xa834>
   1cff4:	movw	r1, #33512	; 0x82e8
   1cff8:	mov	r2, r6
   1cffc:	movt	r1, #2
   1d000:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1d004:	mov	r0, #3
   1d008:	mov	r1, r6
   1d00c:	mov	r2, sp
   1d010:	bl	123d8 <__xstat@plt>
   1d014:	cmp	r0, #0
   1d018:	blt	1cf64 <__assert_fail@plt+0xa73c>
   1d01c:	ldr	r1, [sp, #16]
   1d020:	and	r3, r1, #448	; 0x1c0
   1d024:	cmp	r3, #448	; 0x1c0
   1d028:	beq	1cf64 <__assert_fail@plt+0xa73c>
   1d02c:	orr	r1, r1, #448	; 0x1c0
   1d030:	mov	r0, r6
   1d034:	bl	127b0 <chmod@plt>
   1d038:	cmp	r0, #0
   1d03c:	bge	1cf64 <__assert_fail@plt+0xa73c>
   1d040:	ldr	r0, [r5]
   1d044:	mov	r2, r6
   1d048:	movw	r1, #33576	; 0x8328
   1d04c:	movt	r1, #2
   1d050:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1d054:	mov	r0, #0
   1d058:	b	1cfc8 <__assert_fail@plt+0xa7a0>
   1d05c:	ands	r8, r7, #1
   1d060:	bne	1d004 <__assert_fail@plt+0xa7dc>
   1d064:	mov	r1, r6
   1d068:	movw	r0, #33544	; 0x8308
   1d06c:	movt	r0, #2
   1d070:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   1d074:	mov	r0, r8
   1d078:	b	1cfc8 <__assert_fail@plt+0xa7a0>
   1d07c:	movw	r0, #23980	; 0x5dac
   1d080:	movw	r1, #30876	; 0x789c
   1d084:	movt	r0, #2
   1d088:	movt	r1, #2
   1d08c:	ldr	r2, [pc, #108]	; 1d100 <__assert_fail@plt+0xa8d8>
   1d090:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d094:	mov	r0, r6
   1d098:	b	1cfc8 <__assert_fail@plt+0xa7a0>
   1d09c:	movw	r0, #23980	; 0x5dac
   1d0a0:	movw	r1, #33616	; 0x8350
   1d0a4:	movt	r0, #2
   1d0a8:	movt	r1, #2
   1d0ac:	ldr	r2, [pc, #76]	; 1d100 <__assert_fail@plt+0xa8d8>
   1d0b0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d0b4:	mov	r0, r5
   1d0b8:	b	1cfc8 <__assert_fail@plt+0xa7a0>
   1d0bc:	movw	r0, #23980	; 0x5dac
   1d0c0:	movw	r1, #33628	; 0x835c
   1d0c4:	movt	r0, #2
   1d0c8:	movt	r1, #2
   1d0cc:	ldr	r2, [pc, #44]	; 1d100 <__assert_fail@plt+0xa8d8>
   1d0d0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d0d4:	mov	r0, r6
   1d0d8:	b	1cfc8 <__assert_fail@plt+0xa7a0>
   1d0dc:	movw	r0, #23980	; 0x5dac
   1d0e0:	movw	r1, #33648	; 0x8370
   1d0e4:	movt	r0, #2
   1d0e8:	movt	r1, #2
   1d0ec:	ldr	r2, [pc, #12]	; 1d100 <__assert_fail@plt+0xa8d8>
   1d0f0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d0f4:	mov	r0, r6
   1d0f8:	b	1cfc8 <__assert_fail@plt+0xa7a0>
   1d0fc:	bl	12360 <__stack_chk_fail@plt>
   1d100:	andeq	r8, r2, r0, asr #2
   1d104:	push	{r4, r5, r6, r7, lr}
   1d108:	movw	r4, #17144	; 0x42f8
   1d10c:	movt	r4, #4
   1d110:	sub	sp, sp, #12
   1d114:	subs	r5, r0, #0
   1d118:	mov	r6, r1
   1d11c:	ldr	r3, [r4]
   1d120:	str	r3, [sp, #4]
   1d124:	beq	1d228 <__assert_fail@plt+0xaa00>
   1d128:	cmp	r1, #0
   1d12c:	beq	1d1e8 <__assert_fail@plt+0xa9c0>
   1d130:	mov	r0, r1
   1d134:	mov	r3, r5
   1d138:	mov	r1, r2
   1d13c:	movw	r2, #51728	; 0xca10
   1d140:	movt	r2, #1
   1d144:	bl	1c854 <__assert_fail@plt+0xa02c>
   1d148:	subs	r6, r0, #0
   1d14c:	beq	1d208 <__assert_fail@plt+0xa9e0>
   1d150:	movw	r1, #33688	; 0x8398
   1d154:	mov	r0, sp
   1d158:	movt	r1, #2
   1d15c:	ldr	r2, [r5, #4]
   1d160:	mov	r3, r6
   1d164:	bl	12660 <asprintf@plt>
   1d168:	cmp	r0, #0
   1d16c:	blt	1d1d0 <__assert_fail@plt+0xa9a8>
   1d170:	ldr	r0, [sp]
   1d174:	mov	r1, #0
   1d178:	ldr	r2, [r5, #8]
   1d17c:	bl	1ca78 <__assert_fail@plt+0xa250>
   1d180:	subs	r7, r0, #0
   1d184:	beq	1d1a4 <__assert_fail@plt+0xa97c>
   1d188:	mov	r1, r6
   1d18c:	ldr	r0, [r5]
   1d190:	mov	r2, r6
   1d194:	bl	23034 <secure_getenv@@Base+0x9e0>
   1d198:	cmp	r0, #0
   1d19c:	beq	1d1d0 <__assert_fail@plt+0xa9a8>
   1d1a0:	mov	r6, #0
   1d1a4:	mov	r0, r6
   1d1a8:	bl	122c4 <free@plt>
   1d1ac:	ldr	r0, [sp]
   1d1b0:	bl	122c4 <free@plt>
   1d1b4:	mov	r0, r7
   1d1b8:	ldr	r2, [sp, #4]
   1d1bc:	ldr	r3, [r4]
   1d1c0:	cmp	r2, r3
   1d1c4:	bne	1d248 <__assert_fail@plt+0xaa20>
   1d1c8:	add	sp, sp, #12
   1d1cc:	pop	{r4, r5, r6, r7, pc}
   1d1d0:	movw	r0, #24400	; 0x5f50
   1d1d4:	ldr	r1, [pc, #112]	; 1d24c <__assert_fail@plt+0xaa24>
   1d1d8:	movt	r0, #2
   1d1dc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d1e0:	mov	r0, #0
   1d1e4:	b	1d1b8 <__assert_fail@plt+0xa990>
   1d1e8:	movw	r0, #23980	; 0x5dac
   1d1ec:	movw	r1, #33668	; 0x8384
   1d1f0:	movt	r0, #2
   1d1f4:	movt	r1, #2
   1d1f8:	ldr	r2, [pc, #76]	; 1d24c <__assert_fail@plt+0xaa24>
   1d1fc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d200:	mov	r0, r6
   1d204:	b	1d1b8 <__assert_fail@plt+0xa990>
   1d208:	movw	r0, #23980	; 0x5dac
   1d20c:	movw	r1, #26128	; 0x6610
   1d210:	movt	r0, #2
   1d214:	movt	r1, #2
   1d218:	ldr	r2, [pc, #44]	; 1d24c <__assert_fail@plt+0xaa24>
   1d21c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d220:	mov	r0, r6
   1d224:	b	1d1b8 <__assert_fail@plt+0xa990>
   1d228:	movw	r0, #23980	; 0x5dac
   1d22c:	movw	r1, #33616	; 0x8350
   1d230:	movt	r0, #2
   1d234:	movt	r1, #2
   1d238:	ldr	r2, [pc, #12]	; 1d24c <__assert_fail@plt+0xaa24>
   1d23c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d240:	mov	r0, r5
   1d244:	b	1d1b8 <__assert_fail@plt+0xa990>
   1d248:	bl	12360 <__stack_chk_fail@plt>
   1d24c:	andeq	r8, r2, r8, asr r1
   1d250:	push	{r4, r5, r6, r7, r8, lr}
   1d254:	movw	r4, #17144	; 0x42f8
   1d258:	movt	r4, #4
   1d25c:	subs	r5, r0, #0
   1d260:	sub	sp, sp, #8
   1d264:	mov	r7, r1
   1d268:	ldr	r0, [r4]
   1d26c:	mov	r8, r3
   1d270:	str	r0, [sp, #4]
   1d274:	beq	1d3a8 <__assert_fail@plt+0xab80>
   1d278:	cmp	r1, #0
   1d27c:	beq	1d3c8 <__assert_fail@plt+0xaba0>
   1d280:	cmp	r3, #0
   1d284:	beq	1d368 <__assert_fail@plt+0xab40>
   1d288:	mov	r0, r1
   1d28c:	mov	r3, r5
   1d290:	mov	r1, r2
   1d294:	movw	r2, #51728	; 0xca10
   1d298:	movt	r2, #1
   1d29c:	bl	1c854 <__assert_fail@plt+0xa02c>
   1d2a0:	subs	r6, r0, #0
   1d2a4:	beq	1d388 <__assert_fail@plt+0xab60>
   1d2a8:	movw	r1, #33688	; 0x8398
   1d2ac:	mov	r0, sp
   1d2b0:	movt	r1, #2
   1d2b4:	ldr	r2, [r5, #4]
   1d2b8:	mov	r3, r6
   1d2bc:	bl	12660 <asprintf@plt>
   1d2c0:	cmp	r0, #0
   1d2c4:	blt	1d330 <__assert_fail@plt+0xab08>
   1d2c8:	ldr	r0, [sp]
   1d2cc:	bl	12384 <unlink@plt>
   1d2d0:	mov	r0, r8
   1d2d4:	ldr	r1, [sp]
   1d2d8:	bl	12738 <symlink@plt>
   1d2dc:	cmp	r0, #0
   1d2e0:	blt	1d348 <__assert_fail@plt+0xab20>
   1d2e4:	mov	r1, r6
   1d2e8:	ldr	r0, [r5]
   1d2ec:	mov	r2, r6
   1d2f0:	bl	23034 <secure_getenv@@Base+0x9e0>
   1d2f4:	cmp	r0, #0
   1d2f8:	beq	1d330 <__assert_fail@plt+0xab08>
   1d2fc:	mov	r5, #1
   1d300:	mov	r6, #0
   1d304:	ldr	r0, [sp]
   1d308:	bl	122c4 <free@plt>
   1d30c:	mov	r0, r6
   1d310:	bl	122c4 <free@plt>
   1d314:	mov	r0, r5
   1d318:	ldr	r2, [sp, #4]
   1d31c:	ldr	r3, [r4]
   1d320:	cmp	r2, r3
   1d324:	bne	1d3e8 <__assert_fail@plt+0xabc0>
   1d328:	add	sp, sp, #8
   1d32c:	pop	{r4, r5, r6, r7, r8, pc}
   1d330:	movw	r0, #24400	; 0x5f50
   1d334:	ldr	r1, [pc, #176]	; 1d3ec <__assert_fail@plt+0xabc4>
   1d338:	movt	r0, #2
   1d33c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d340:	mov	r0, #0
   1d344:	b	1d318 <__assert_fail@plt+0xaaf0>
   1d348:	bl	125b8 <__errno_location@plt>
   1d34c:	movw	r1, #33736	; 0x83c8
   1d350:	ldr	r2, [sp]
   1d354:	movt	r1, #2
   1d358:	mov	r5, #0
   1d35c:	ldr	r0, [r0]
   1d360:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1d364:	b	1d304 <__assert_fail@plt+0xaadc>
   1d368:	movw	r0, #23980	; 0x5dac
   1d36c:	movw	r1, #33716	; 0x83b4
   1d370:	movt	r0, #2
   1d374:	movt	r1, #2
   1d378:	ldr	r2, [pc, #108]	; 1d3ec <__assert_fail@plt+0xabc4>
   1d37c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d380:	mov	r0, r8
   1d384:	b	1d318 <__assert_fail@plt+0xaaf0>
   1d388:	movw	r0, #23980	; 0x5dac
   1d38c:	movw	r1, #26128	; 0x6610
   1d390:	movt	r0, #2
   1d394:	movt	r1, #2
   1d398:	ldr	r2, [pc, #76]	; 1d3ec <__assert_fail@plt+0xabc4>
   1d39c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d3a0:	mov	r0, r6
   1d3a4:	b	1d318 <__assert_fail@plt+0xaaf0>
   1d3a8:	movw	r0, #23980	; 0x5dac
   1d3ac:	movw	r1, #33616	; 0x8350
   1d3b0:	movt	r0, #2
   1d3b4:	movt	r1, #2
   1d3b8:	ldr	r2, [pc, #44]	; 1d3ec <__assert_fail@plt+0xabc4>
   1d3bc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d3c0:	mov	r0, r5
   1d3c4:	b	1d318 <__assert_fail@plt+0xaaf0>
   1d3c8:	movw	r0, #23980	; 0x5dac
   1d3cc:	movw	r1, #33696	; 0x83a0
   1d3d0:	movt	r0, #2
   1d3d4:	movt	r1, #2
   1d3d8:	ldr	r2, [pc, #12]	; 1d3ec <__assert_fail@plt+0xabc4>
   1d3dc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d3e0:	mov	r0, r7
   1d3e4:	b	1d318 <__assert_fail@plt+0xaaf0>
   1d3e8:	bl	12360 <__stack_chk_fail@plt>
   1d3ec:	andeq	r8, r2, r0, ror r1
   1d3f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d3f4:	movw	r5, #17144	; 0x42f8
   1d3f8:	movt	r5, #4
   1d3fc:	sub	sp, sp, #112	; 0x70
   1d400:	subs	r6, r0, #0
   1d404:	ldr	r3, [r5]
   1d408:	str	r3, [sp, #108]	; 0x6c
   1d40c:	beq	1d5ec <__assert_fail@plt+0xadc4>
   1d410:	cmp	r1, #0
   1d414:	bne	1d450 <__assert_fail@plt+0xac28>
   1d418:	mov	r4, #1
   1d41c:	ldr	r0, [r6]
   1d420:	bl	23458 <secure_getenv@@Base+0xe04>
   1d424:	ldr	r0, [r6, #4]
   1d428:	bl	122c4 <free@plt>
   1d42c:	mov	r0, r6
   1d430:	bl	122c4 <free@plt>
   1d434:	mov	r0, r4
   1d438:	ldr	r2, [sp, #108]	; 0x6c
   1d43c:	ldr	r3, [r5]
   1d440:	cmp	r2, r3
   1d444:	bne	1d61c <__assert_fail@plt+0xadf4>
   1d448:	add	sp, sp, #112	; 0x70
   1d44c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d450:	ldr	r3, [r6, #8]
   1d454:	tst	r3, #1
   1d458:	bne	1d490 <__assert_fail@plt+0xac68>
   1d45c:	ldr	r0, [r6, #4]
   1d460:	movw	r1, #365	; 0x16d
   1d464:	bl	127b0 <chmod@plt>
   1d468:	cmp	r0, #0
   1d46c:	bge	1d418 <__assert_fail@plt+0xabf0>
   1d470:	bl	125b8 <__errno_location@plt>
   1d474:	movw	r1, #33820	; 0x841c
   1d478:	ldr	r2, [r6, #4]
   1d47c:	movt	r1, #2
   1d480:	mov	r4, #0
   1d484:	ldr	r0, [r0]
   1d488:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1d48c:	b	1d41c <__assert_fail@plt+0xabf4>
   1d490:	ldm	r6, {r8, sl}
   1d494:	mov	r0, sl
   1d498:	bl	12420 <opendir@plt>
   1d49c:	subs	r7, r0, #0
   1d4a0:	beq	1d600 <__assert_fail@plt+0xadd8>
   1d4a4:	movw	r0, #13676	; 0x356c
   1d4a8:	movw	r1, #13776	; 0x35d0
   1d4ac:	movt	r0, #2
   1d4b0:	movt	r1, #2
   1d4b4:	movw	r2, #8900	; 0x22c4
   1d4b8:	mov	r3, #0
   1d4bc:	movt	r2, #1
   1d4c0:	bl	2336c <secure_getenv@@Base+0xd18>
   1d4c4:	mov	r9, r0
   1d4c8:	mov	r0, r7
   1d4cc:	bl	126f0 <readdir@plt>
   1d4d0:	cmp	r0, #0
   1d4d4:	beq	1d580 <__assert_fail@plt+0xad58>
   1d4d8:	add	r4, r0, #11
   1d4dc:	mov	r0, r8
   1d4e0:	mov	r1, r4
   1d4e4:	bl	23010 <secure_getenv@@Base+0x9bc>
   1d4e8:	cmp	r0, #0
   1d4ec:	bne	1d4c8 <__assert_fail@plt+0xaca0>
   1d4f0:	mov	r3, r4
   1d4f4:	movw	r1, #33688	; 0x8398
   1d4f8:	mov	r0, sp
   1d4fc:	movt	r1, #2
   1d500:	mov	r2, sl
   1d504:	bl	12660 <asprintf@plt>
   1d508:	cmp	r0, #0
   1d50c:	blt	1d550 <__assert_fail@plt+0xad28>
   1d510:	mov	r0, #3
   1d514:	ldr	r1, [sp]
   1d518:	add	r2, sp, #16
   1d51c:	bl	123d8 <__xstat@plt>
   1d520:	cmp	r0, #0
   1d524:	blt	1d568 <__assert_fail@plt+0xad40>
   1d528:	ldr	r3, [sp, #32]
   1d52c:	and	r3, r3, #61440	; 0xf000
   1d530:	cmp	r3, #16384	; 0x4000
   1d534:	beq	1d568 <__assert_fail@plt+0xad40>
   1d538:	ldr	r1, [sp]
   1d53c:	mov	r0, r9
   1d540:	mov	r2, r1
   1d544:	bl	23034 <secure_getenv@@Base+0x9e0>
   1d548:	cmp	r0, #0
   1d54c:	bne	1d4c8 <__assert_fail@plt+0xaca0>
   1d550:	movw	r0, #24400	; 0x5f50
   1d554:	ldr	r1, [pc, #196]	; 1d620 <__assert_fail@plt+0xadf8>
   1d558:	movt	r0, #2
   1d55c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d560:	mov	r4, #0
   1d564:	b	1d41c <__assert_fail@plt+0xabf4>
   1d568:	ldr	r0, [sp]
   1d56c:	bl	122c4 <free@plt>
   1d570:	mov	r0, r7
   1d574:	bl	126f0 <readdir@plt>
   1d578:	cmp	r0, #0
   1d57c:	bne	1d4d8 <__assert_fail@plt+0xacb0>
   1d580:	mov	r0, r7
   1d584:	bl	127e0 <closedir@plt>
   1d588:	mov	r0, r9
   1d58c:	add	r1, sp, #4
   1d590:	bl	22ffc <secure_getenv@@Base+0x9a8>
   1d594:	add	r0, sp, #4
   1d598:	mov	r1, sp
   1d59c:	mov	r2, #0
   1d5a0:	bl	22f6c <secure_getenv@@Base+0x918>
   1d5a4:	cmp	r0, #0
   1d5a8:	beq	1d5f4 <__assert_fail@plt+0xadcc>
   1d5ac:	ldr	r0, [sp]
   1d5b0:	bl	12384 <unlink@plt>
   1d5b4:	cmp	r0, #0
   1d5b8:	bge	1d594 <__assert_fail@plt+0xad6c>
   1d5bc:	bl	125b8 <__errno_location@plt>
   1d5c0:	ldr	r0, [r0]
   1d5c4:	cmp	r0, #2
   1d5c8:	beq	1d594 <__assert_fail@plt+0xad6c>
   1d5cc:	ldr	r2, [sp]
   1d5d0:	movw	r1, #33792	; 0x8400
   1d5d4:	movt	r1, #2
   1d5d8:	mov	r4, #0
   1d5dc:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1d5e0:	mov	r0, r9
   1d5e4:	bl	23458 <secure_getenv@@Base+0xe04>
   1d5e8:	b	1d41c <__assert_fail@plt+0xabf4>
   1d5ec:	mov	r0, r6
   1d5f0:	b	1d438 <__assert_fail@plt+0xac10>
   1d5f4:	mov	r0, r9
   1d5f8:	bl	23458 <secure_getenv@@Base+0xe04>
   1d5fc:	b	1d45c <__assert_fail@plt+0xac34>
   1d600:	bl	125b8 <__errno_location@plt>
   1d604:	mov	r2, sl
   1d608:	movw	r1, #33764	; 0x83e4
   1d60c:	movt	r1, #2
   1d610:	ldr	r0, [r0]
   1d614:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   1d618:	b	1d560 <__assert_fail@plt+0xad38>
   1d61c:	bl	12360 <__stack_chk_fail@plt>
   1d620:	andeq	r8, r2, r4, lsl #3
   1d624:	ldr	r2, [pc, #68]	; 1d670 <__assert_fail@plt+0xae48>
   1d628:	ldr	r1, [pc, #68]	; 1d674 <__assert_fail@plt+0xae4c>
   1d62c:	add	r2, pc, r2
   1d630:	push	{r4, lr}
   1d634:	sub	sp, sp, #8
   1d638:	ldr	r4, [r2, r1]
   1d63c:	add	r3, sp, #8
   1d640:	str	r0, [r3, #-8]!
   1d644:	mov	r0, sp
   1d648:	ldr	r3, [r4]
   1d64c:	str	r3, [sp, #4]
   1d650:	bl	1278c <asn1_delete_structure@plt>
   1d654:	ldr	r2, [sp, #4]
   1d658:	ldr	r3, [r4]
   1d65c:	cmp	r2, r3
   1d660:	bne	1d66c <__assert_fail@plt+0xae44>
   1d664:	add	sp, sp, #8
   1d668:	pop	{r4, pc}
   1d66c:	bl	12360 <__stack_chk_fail@plt>
   1d670:	andeq	r6, r2, ip, asr #19
   1d674:	andeq	r0, r0, r4, lsr #4
   1d678:	push	{r4, lr}
   1d67c:	mov	r4, r0
   1d680:	ldr	r0, [r0, #4]
   1d684:	bl	122c4 <free@plt>
   1d688:	mov	r0, r4
   1d68c:	bl	1278c <asn1_delete_structure@plt>
   1d690:	mov	r0, r4
   1d694:	pop	{r4, lr}
   1d698:	b	122c4 <free@plt>
   1d69c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6a0:	sub	sp, sp, #148	; 0x94
   1d6a4:	ldr	r4, [pc, #292]	; 1d7d0 <__assert_fail@plt+0xafa8>
   1d6a8:	add	r6, sp, #12
   1d6ac:	ldr	r3, [pc, #288]	; 1d7d4 <__assert_fail@plt+0xafac>
   1d6b0:	mov	r1, #0
   1d6b4:	add	r4, pc, r4
   1d6b8:	mov	r2, #128	; 0x80
   1d6bc:	mov	r0, r6
   1d6c0:	ldr	fp, [r4, r3]
   1d6c4:	ldr	r3, [fp]
   1d6c8:	str	r3, [sp, #140]	; 0x8c
   1d6cc:	bl	125e8 <memset@plt>
   1d6d0:	ldr	r0, [pc, #256]	; 1d7d8 <__assert_fail@plt+0xafb0>
   1d6d4:	mov	r2, #0
   1d6d8:	ldr	r1, [pc, #252]	; 1d7dc <__assert_fail@plt+0xafb4>
   1d6dc:	ldr	r3, [pc, #252]	; 1d7e0 <__assert_fail@plt+0xafb8>
   1d6e0:	ldr	r0, [r4, r0]
   1d6e4:	add	r3, pc, r3
   1d6e8:	ldr	r1, [r4, r1]
   1d6ec:	bl	2336c <secure_getenv@@Base+0xd18>
   1d6f0:	ldr	r3, [pc, #236]	; 1d7e4 <__assert_fail@plt+0xafbc>
   1d6f4:	ldr	sl, [r4, r3]
   1d6f8:	mov	r7, r0
   1d6fc:	ldr	r0, [sl]
   1d700:	cmp	r0, #0
   1d704:	beq	1d7a0 <__assert_fail@plt+0xaf78>
   1d708:	mov	r5, #0
   1d70c:	add	r4, sl, #12
   1d710:	add	r9, sp, #8
   1d714:	mov	r8, r5
   1d718:	b	1d744 <__assert_fail@plt+0xaf1c>
   1d71c:	mov	r0, r7
   1d720:	ldr	r1, [r4, #-8]
   1d724:	ldr	r2, [sp, #8]
   1d728:	bl	23034 <secure_getenv@@Base+0x9e0>
   1d72c:	subs	r3, r0, #0
   1d730:	beq	1d7a8 <__assert_fail@plt+0xaf80>
   1d734:	ldr	r0, [r4], #12
   1d738:	add	r5, r5, #1
   1d73c:	cmp	r0, #0
   1d740:	beq	1d7a0 <__assert_fail@plt+0xaf78>
   1d744:	mov	r1, r9
   1d748:	mov	r2, r6
   1d74c:	str	r8, [sp, #8]
   1d750:	bl	12810 <asn1_array2tree@plt>
   1d754:	cmp	r0, #0
   1d758:	beq	1d71c <__assert_fail@plt+0xaef4>
   1d75c:	add	r5, r5, r5, lsl #1
   1d760:	add	sl, sl, r5, lsl #2
   1d764:	ldr	r4, [sl, #4]
   1d768:	bl	123c0 <asn1_strerror@plt>
   1d76c:	mov	r3, r6
   1d770:	mov	r1, r4
   1d774:	mov	r2, r0
   1d778:	ldr	r0, [pc, #104]	; 1d7e8 <__assert_fail@plt+0xafc0>
   1d77c:	add	r0, pc, r0
   1d780:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d784:	mov	r0, #0
   1d788:	ldr	r2, [sp, #140]	; 0x8c
   1d78c:	ldr	r3, [fp]
   1d790:	cmp	r2, r3
   1d794:	bne	1d7cc <__assert_fail@plt+0xafa4>
   1d798:	add	sp, sp, #148	; 0x94
   1d79c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7a0:	mov	r0, r7
   1d7a4:	b	1d788 <__assert_fail@plt+0xaf60>
   1d7a8:	ldr	r0, [pc, #60]	; 1d7ec <__assert_fail@plt+0xafc4>
   1d7ac:	ldr	r1, [pc, #60]	; 1d7f0 <__assert_fail@plt+0xafc8>
   1d7b0:	add	r0, pc, r0
   1d7b4:	str	r3, [sp, #4]
   1d7b8:	add	r1, pc, r1
   1d7bc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d7c0:	ldr	r3, [sp, #4]
   1d7c4:	mov	r0, r3
   1d7c8:	b	1d788 <__assert_fail@plt+0xaf60>
   1d7cc:	bl	12360 <__stack_chk_fail@plt>
   1d7d0:	andeq	r6, r2, r4, asr #18
   1d7d4:	andeq	r0, r0, r4, lsr #4
   1d7d8:	andeq	r0, r0, r0, ror #4
   1d7dc:	andeq	r0, r0, ip, lsr #4
   1d7e0:			; <UNDEFINED> instruction: 0xffffff38
   1d7e4:	andeq	r0, r0, r8, asr #4
   1d7e8:	muleq	r0, r0, lr
   1d7ec:	muleq	r0, r8, r7
   1d7f0:	andeq	sl, r0, r0, lsr #27
   1d7f4:	ldr	r3, [pc, #308]	; 1d930 <__assert_fail@plt+0xb108>
   1d7f8:	ldr	r2, [pc, #308]	; 1d934 <__assert_fail@plt+0xb10c>
   1d7fc:	add	r3, pc, r3
   1d800:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d804:	subs	r9, r0, #0
   1d808:	ldr	r8, [r3, r2]
   1d80c:	sub	sp, sp, #12
   1d810:	mov	r6, r1
   1d814:	ldr	r2, [r8]
   1d818:	str	r2, [sp, #4]
   1d81c:	beq	1d904 <__assert_fail@plt+0xb0dc>
   1d820:	ldr	r2, [pc, #272]	; 1d938 <__assert_fail@plt+0xb110>
   1d824:	ldr	r4, [r3, r2]
   1d828:	ldr	r3, [r4]
   1d82c:	cmp	r3, #0
   1d830:	addne	r4, r4, #4
   1d834:	bne	1d84c <__assert_fail@plt+0xb024>
   1d838:	b	1d8ac <__assert_fail@plt+0xb084>
   1d83c:	add	r4, r4, #12
   1d840:	ldr	r3, [r4, #-4]
   1d844:	cmp	r3, #0
   1d848:	beq	1d8ac <__assert_fail@plt+0xb084>
   1d84c:	ldr	r5, [r4]
   1d850:	mov	r0, r6
   1d854:	ldr	r2, [r4, #4]
   1d858:	mov	r1, r5
   1d85c:	bl	127bc <strncmp@plt>
   1d860:	subs	r7, r0, #0
   1d864:	bne	1d83c <__assert_fail@plt+0xb014>
   1d868:	mov	r0, r9
   1d86c:	mov	r1, r5
   1d870:	bl	23010 <secure_getenv@@Base+0x9bc>
   1d874:	cmp	r0, #0
   1d878:	beq	1d8bc <__assert_fail@plt+0xb094>
   1d87c:	mov	r1, r6
   1d880:	mov	r2, sp
   1d884:	bl	1272c <asn1_create_element@plt>
   1d888:	cmp	r0, #0
   1d88c:	ldreq	r0, [sp]
   1d890:	bne	1d8e4 <__assert_fail@plt+0xb0bc>
   1d894:	ldr	r2, [sp, #4]
   1d898:	ldr	r3, [r8]
   1d89c:	cmp	r2, r3
   1d8a0:	bne	1d92c <__assert_fail@plt+0xb104>
   1d8a4:	add	sp, sp, #12
   1d8a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d8ac:	ldr	r0, [pc, #136]	; 1d93c <__assert_fail@plt+0xb114>
   1d8b0:	mov	r1, r6
   1d8b4:	add	r0, pc, r0
   1d8b8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d8bc:	ldr	r2, [pc, #124]	; 1d940 <__assert_fail@plt+0xb118>
   1d8c0:	ldr	r0, [pc, #124]	; 1d944 <__assert_fail@plt+0xb11c>
   1d8c4:	ldr	r1, [pc, #124]	; 1d948 <__assert_fail@plt+0xb120>
   1d8c8:	add	r2, pc, r2
   1d8cc:	add	r0, pc, r0
   1d8d0:	add	r2, r2, #20
   1d8d4:	add	r1, pc, r1
   1d8d8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d8dc:	mov	r0, #0
   1d8e0:	b	1d894 <__assert_fail@plt+0xb06c>
   1d8e4:	bl	123c0 <asn1_strerror@plt>
   1d8e8:	mov	r1, r6
   1d8ec:	mov	r2, r0
   1d8f0:	ldr	r0, [pc, #84]	; 1d94c <__assert_fail@plt+0xb124>
   1d8f4:	add	r0, pc, r0
   1d8f8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d8fc:	mov	r0, r7
   1d900:	b	1d894 <__assert_fail@plt+0xb06c>
   1d904:	ldr	r2, [pc, #68]	; 1d950 <__assert_fail@plt+0xb128>
   1d908:	ldr	r0, [pc, #68]	; 1d954 <__assert_fail@plt+0xb12c>
   1d90c:	ldr	r1, [pc, #68]	; 1d958 <__assert_fail@plt+0xb130>
   1d910:	add	r2, pc, r2
   1d914:	add	r0, pc, r0
   1d918:	add	r2, r2, #20
   1d91c:	add	r1, pc, r1
   1d920:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1d924:	mov	r0, r9
   1d928:	b	1d894 <__assert_fail@plt+0xb06c>
   1d92c:	bl	12360 <__stack_chk_fail@plt>
   1d930:	strdeq	r6, [r2], -ip
   1d934:	andeq	r0, r0, r4, lsr #4
   1d938:	andeq	r0, r0, r8, asr #4
   1d93c:	andeq	sl, r0, r0, lsl #27
   1d940:	muleq	r0, r0, ip
   1d944:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1d948:	andeq	sl, r0, r0, lsl #27
   1d94c:	andeq	sl, r0, ip, ror #26
   1d950:	andeq	sl, r0, r8, asr #24
   1d954:	muleq	r0, r0, r4
   1d958:	andeq	r9, r0, r0, ror r6
   1d95c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d960:	sub	sp, sp, #144	; 0x90
   1d964:	ldr	r5, [pc, #324]	; 1dab0 <__assert_fail@plt+0xb288>
   1d968:	mov	r9, r3
   1d96c:	ldr	ip, [pc, #320]	; 1dab4 <__assert_fail@plt+0xb28c>
   1d970:	mov	r3, #0
   1d974:	add	r5, pc, r5
   1d978:	subs	r4, r0, #0
   1d97c:	mov	sl, r2
   1d980:	mov	r8, r1
   1d984:	ldr	r6, [r5, ip]
   1d988:	str	r3, [sp, #8]
   1d98c:	ldr	r7, [sp, #176]	; 0xb0
   1d990:	ldr	r3, [r6]
   1d994:	str	r3, [sp, #140]	; 0x8c
   1d998:	beq	1d9f4 <__assert_fail@plt+0xb1cc>
   1d99c:	bl	1d7f4 <__assert_fail@plt+0xafcc>
   1d9a0:	cmp	r0, #0
   1d9a4:	mov	r4, r0
   1d9a8:	str	r0, [sp, #8]
   1d9ac:	beq	1da18 <__assert_fail@plt+0xb1f0>
   1d9b0:	cmp	r7, #0
   1d9b4:	beq	1da40 <__assert_fail@plt+0xb218>
   1d9b8:	mov	r1, sl
   1d9bc:	mov	r2, r9
   1d9c0:	mov	r3, r7
   1d9c4:	add	r0, sp, #8
   1d9c8:	bl	12654 <asn1_der_decoding@plt>
   1d9cc:	cmp	r0, #0
   1d9d0:	beq	1da60 <__assert_fail@plt+0xb238>
   1d9d4:	mov	r4, #0
   1d9d8:	ldr	r2, [sp, #140]	; 0x8c
   1d9dc:	mov	r0, r4
   1d9e0:	ldr	r3, [r6]
   1d9e4:	cmp	r2, r3
   1d9e8:	bne	1da3c <__assert_fail@plt+0xb214>
   1d9ec:	add	sp, sp, #144	; 0x90
   1d9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d9f4:	ldr	r2, [pc, #188]	; 1dab8 <__assert_fail@plt+0xb290>
   1d9f8:	ldr	r0, [pc, #188]	; 1dabc <__assert_fail@plt+0xb294>
   1d9fc:	ldr	r1, [pc, #188]	; 1dac0 <__assert_fail@plt+0xb298>
   1da00:	add	r2, pc, r2
   1da04:	add	r0, pc, r0
   1da08:	add	r2, r2, #36	; 0x24
   1da0c:	add	r1, pc, r1
   1da10:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1da14:	b	1d9d8 <__assert_fail@plt+0xb1b0>
   1da18:	ldr	r2, [pc, #164]	; 1dac4 <__assert_fail@plt+0xb29c>
   1da1c:	ldr	r0, [pc, #164]	; 1dac8 <__assert_fail@plt+0xb2a0>
   1da20:	ldr	r1, [pc, #164]	; 1dacc <__assert_fail@plt+0xb2a4>
   1da24:	add	r2, pc, r2
   1da28:	add	r0, pc, r0
   1da2c:	add	r2, r2, #36	; 0x24
   1da30:	add	r1, pc, r1
   1da34:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1da38:	b	1d9d8 <__assert_fail@plt+0xb1b0>
   1da3c:	bl	12360 <__stack_chk_fail@plt>
   1da40:	add	r4, sp, #12
   1da44:	mov	r1, sl
   1da48:	mov	r2, r9
   1da4c:	add	r0, sp, #8
   1da50:	mov	r3, r4
   1da54:	bl	12654 <asn1_der_decoding@plt>
   1da58:	cmp	r0, #0
   1da5c:	bne	1da68 <__assert_fail@plt+0xb240>
   1da60:	ldr	r4, [sp, #8]
   1da64:	b	1d9d8 <__assert_fail@plt+0xb1b0>
   1da68:	ldr	r3, [pc, #96]	; 1dad0 <__assert_fail@plt+0xb2a8>
   1da6c:	ldr	r3, [r5, r3]
   1da70:	ldr	r2, [r3]
   1da74:	tst	r2, #32
   1da78:	beq	1d9d4 <__assert_fail@plt+0xb1ac>
   1da7c:	bl	123c0 <asn1_strerror@plt>
   1da80:	ldr	r2, [pc, #76]	; 1dad4 <__assert_fail@plt+0xb2ac>
   1da84:	ldr	r1, [pc, #76]	; 1dad8 <__assert_fail@plt+0xb2b0>
   1da88:	mov	r3, r8
   1da8c:	add	r2, pc, r2
   1da90:	str	r4, [sp, #4]
   1da94:	add	r2, r2, #52	; 0x34
   1da98:	add	r1, pc, r1
   1da9c:	mov	r4, r7
   1daa0:	str	r0, [sp]
   1daa4:	mov	r0, #32
   1daa8:	bl	22d4c <secure_getenv@@Base+0x6f8>
   1daac:	b	1d9d8 <__assert_fail@plt+0xb1b0>
   1dab0:	andeq	r6, r2, r4, lsl #13
   1dab4:	andeq	r0, r0, r4, lsr #4
   1dab8:	andeq	sl, r0, r8, asr fp
   1dabc:	andeq	r8, r0, r0, lsr #7
   1dac0:	andeq	r9, r0, r0, lsl #11
   1dac4:	andeq	sl, r0, r4, lsr fp
   1dac8:	andeq	r8, r0, ip, ror r3
   1dacc:	andeq	sl, r0, r4, lsr #6
   1dad0:	andeq	r0, r0, r4, ror #4
   1dad4:	andeq	sl, r0, ip, asr #21
   1dad8:	andeq	sl, r0, ip, ror #23
   1dadc:	ldr	r3, [pc, #328]	; 1dc2c <__assert_fail@plt+0xb404>
   1dae0:	ldr	r2, [pc, #328]	; 1dc30 <__assert_fail@plt+0xb408>
   1dae4:	add	r3, pc, r3
   1dae8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1daec:	subs	r8, r1, #0
   1daf0:	ldr	r5, [r3, r2]
   1daf4:	sub	sp, sp, #144	; 0x90
   1daf8:	mov	r9, r0
   1dafc:	ldr	r3, [r5]
   1db00:	str	r3, [sp, #140]	; 0x8c
   1db04:	beq	1dbd8 <__assert_fail@plt+0xb3b0>
   1db08:	ldr	r7, [pc, #292]	; 1dc34 <__assert_fail@plt+0xb40c>
   1db0c:	add	r4, sp, #144	; 0x90
   1db10:	mov	r3, #0
   1db14:	add	r6, sp, #12
   1db18:	add	r7, pc, r7
   1db1c:	str	r3, [r4, #-136]!	; 0xffffff78
   1db20:	mov	r2, r3
   1db24:	str	r6, [sp]
   1db28:	mov	r3, r4
   1db2c:	mov	r1, r7
   1db30:	bl	12780 <asn1_der_coding@plt>
   1db34:	subs	sl, r0, #0
   1db38:	beq	1dbb0 <__assert_fail@plt+0xb388>
   1db3c:	cmp	sl, #12
   1db40:	beq	1db70 <__assert_fail@plt+0xb348>
   1db44:	ldr	r0, [pc, #236]	; 1dc38 <__assert_fail@plt+0xb410>
   1db48:	mov	r1, r6
   1db4c:	add	r0, pc, r0
   1db50:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1db54:	mov	r0, #0
   1db58:	ldr	r2, [sp, #140]	; 0x8c
   1db5c:	ldr	r3, [r5]
   1db60:	cmp	r2, r3
   1db64:	bne	1dc28 <__assert_fail@plt+0xb400>
   1db68:	add	sp, sp, #144	; 0x90
   1db6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1db70:	ldr	r0, [sp, #8]
   1db74:	bl	1245c <malloc@plt>
   1db78:	subs	sl, r0, #0
   1db7c:	beq	1dc00 <__assert_fail@plt+0xb3d8>
   1db80:	str	r6, [sp]
   1db84:	mov	r0, r9
   1db88:	mov	r1, r7
   1db8c:	mov	r3, r4
   1db90:	mov	r2, sl
   1db94:	bl	12780 <asn1_der_coding@plt>
   1db98:	cmp	r0, #0
   1db9c:	bne	1db44 <__assert_fail@plt+0xb31c>
   1dba0:	ldr	r3, [sp, #8]
   1dba4:	mov	r0, sl
   1dba8:	str	r3, [r8]
   1dbac:	b	1db58 <__assert_fail@plt+0xb330>
   1dbb0:	ldr	r2, [pc, #132]	; 1dc3c <__assert_fail@plt+0xb414>
   1dbb4:	ldr	r0, [pc, #132]	; 1dc40 <__assert_fail@plt+0xb418>
   1dbb8:	ldr	r1, [pc, #132]	; 1dc44 <__assert_fail@plt+0xb41c>
   1dbbc:	add	r2, pc, r2
   1dbc0:	add	r0, pc, r0
   1dbc4:	add	r2, r2, #68	; 0x44
   1dbc8:	add	r1, pc, r1
   1dbcc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1dbd0:	mov	r0, sl
   1dbd4:	b	1db58 <__assert_fail@plt+0xb330>
   1dbd8:	ldr	r2, [pc, #104]	; 1dc48 <__assert_fail@plt+0xb420>
   1dbdc:	ldr	r0, [pc, #104]	; 1dc4c <__assert_fail@plt+0xb424>
   1dbe0:	ldr	r1, [pc, #104]	; 1dc50 <__assert_fail@plt+0xb428>
   1dbe4:	add	r2, pc, r2
   1dbe8:	add	r0, pc, r0
   1dbec:	add	r2, r2, #68	; 0x44
   1dbf0:	add	r1, pc, r1
   1dbf4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1dbf8:	mov	r0, r8
   1dbfc:	b	1db58 <__assert_fail@plt+0xb330>
   1dc00:	ldr	r2, [pc, #76]	; 1dc54 <__assert_fail@plt+0xb42c>
   1dc04:	ldr	r0, [pc, #76]	; 1dc58 <__assert_fail@plt+0xb430>
   1dc08:	ldr	r1, [pc, #76]	; 1dc5c <__assert_fail@plt+0xb434>
   1dc0c:	add	r2, pc, r2
   1dc10:	add	r0, pc, r0
   1dc14:	add	r2, r2, #68	; 0x44
   1dc18:	add	r1, pc, r1
   1dc1c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1dc20:	mov	r0, sl
   1dc24:	b	1db58 <__assert_fail@plt+0xb330>
   1dc28:	bl	12360 <__stack_chk_fail@plt>
   1dc2c:	andeq	r6, r2, r4, lsl r5
   1dc30:	andeq	r0, r0, r4, lsr #4
   1dc34:	andeq	r0, r1, ip, asr #18
   1dc38:	andeq	sl, r0, ip, ror fp
   1dc3c:	muleq	r0, ip, r9
   1dc40:	andeq	r8, r0, r4, ror #3
   1dc44:	andeq	sl, r0, ip, ror #21
   1dc48:	andeq	sl, r0, r4, ror r9
   1dc4c:			; <UNDEFINED> instruction: 0x000081bc
   1dc50:			; <UNDEFINED> instruction: 0x0000aab4
   1dc54:	andeq	sl, r0, ip, asr #18
   1dc58:	muleq	r0, r4, r1
   1dc5c:	andeq	r8, r0, r0, asr r8
   1dc60:	ldr	r3, [pc, #436]	; 1de1c <__assert_fail@plt+0xb5f4>
   1dc64:	ldr	ip, [pc, #436]	; 1de20 <__assert_fail@plt+0xb5f8>
   1dc68:	add	r3, pc, r3
   1dc6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dc70:	subs	r9, r0, #0
   1dc74:	ldr	r6, [r3, ip]
   1dc78:	sub	sp, sp, #8
   1dc7c:	mov	r8, r2
   1dc80:	mov	r7, r1
   1dc84:	ldr	r3, [r6]
   1dc88:	str	r3, [sp, #4]
   1dc8c:	beq	1ddc8 <__assert_fail@plt+0xb5a0>
   1dc90:	cmp	r1, #0
   1dc94:	beq	1ddf0 <__assert_fail@plt+0xb5c8>
   1dc98:	cmp	r2, #0
   1dc9c:	beq	1dd78 <__assert_fail@plt+0xb550>
   1dca0:	mov	r5, #0
   1dca4:	add	r4, sp, #8
   1dca8:	mov	r2, r5
   1dcac:	mov	r3, sp
   1dcb0:	str	r5, [r4, #-8]!
   1dcb4:	bl	12264 <asn1_read_value@plt>
   1dcb8:	cmp	r0, #2
   1dcbc:	beq	1dd48 <__assert_fail@plt+0xb520>
   1dcc0:	cmp	r0, #12
   1dcc4:	bne	1dd20 <__assert_fail@plt+0xb4f8>
   1dcc8:	ldr	r0, [sp]
   1dccc:	add	r0, r0, #1
   1dcd0:	bl	1245c <malloc@plt>
   1dcd4:	subs	sl, r0, #0
   1dcd8:	beq	1dda0 <__assert_fail@plt+0xb578>
   1dcdc:	mov	r2, sl
   1dce0:	mov	r0, r9
   1dce4:	mov	r1, r7
   1dce8:	mov	r3, sp
   1dcec:	bl	12264 <asn1_read_value@plt>
   1dcf0:	subs	r2, r0, #0
   1dcf4:	bne	1dd50 <__assert_fail@plt+0xb528>
   1dcf8:	ldr	r3, [sp]
   1dcfc:	mov	r0, sl
   1dd00:	strb	r2, [sl, r3]
   1dd04:	str	r3, [r8]
   1dd08:	ldr	r2, [sp, #4]
   1dd0c:	ldr	r3, [r6]
   1dd10:	cmp	r2, r3
   1dd14:	bne	1de18 <__assert_fail@plt+0xb5f0>
   1dd18:	add	sp, sp, #8
   1dd1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd20:	ldr	r2, [pc, #252]	; 1de24 <__assert_fail@plt+0xb5fc>
   1dd24:	ldr	r0, [pc, #252]	; 1de28 <__assert_fail@plt+0xb600>
   1dd28:	ldr	r1, [pc, #252]	; 1de2c <__assert_fail@plt+0xb604>
   1dd2c:	add	r2, pc, r2
   1dd30:	add	r0, pc, r0
   1dd34:	add	r2, r2, #84	; 0x54
   1dd38:	add	r1, pc, r1
   1dd3c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1dd40:	mov	r0, r5
   1dd44:	b	1dd08 <__assert_fail@plt+0xb4e0>
   1dd48:	mov	r0, r5
   1dd4c:	b	1dd08 <__assert_fail@plt+0xb4e0>
   1dd50:	ldr	r2, [pc, #216]	; 1de30 <__assert_fail@plt+0xb608>
   1dd54:	ldr	r0, [pc, #216]	; 1de34 <__assert_fail@plt+0xb60c>
   1dd58:	ldr	r1, [pc, #216]	; 1de38 <__assert_fail@plt+0xb610>
   1dd5c:	add	r2, pc, r2
   1dd60:	add	r0, pc, r0
   1dd64:	add	r2, r2, #84	; 0x54
   1dd68:	add	r1, pc, r1
   1dd6c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1dd70:	mov	r0, r5
   1dd74:	b	1dd08 <__assert_fail@plt+0xb4e0>
   1dd78:	ldr	r2, [pc, #188]	; 1de3c <__assert_fail@plt+0xb614>
   1dd7c:	ldr	r0, [pc, #188]	; 1de40 <__assert_fail@plt+0xb618>
   1dd80:	ldr	r1, [pc, #188]	; 1de44 <__assert_fail@plt+0xb61c>
   1dd84:	add	r2, pc, r2
   1dd88:	add	r0, pc, r0
   1dd8c:	add	r2, r2, #84	; 0x54
   1dd90:	add	r1, pc, r1
   1dd94:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1dd98:	mov	r0, r8
   1dd9c:	b	1dd08 <__assert_fail@plt+0xb4e0>
   1dda0:	ldr	r2, [pc, #160]	; 1de48 <__assert_fail@plt+0xb620>
   1dda4:	ldr	r0, [pc, #160]	; 1de4c <__assert_fail@plt+0xb624>
   1dda8:	ldr	r1, [pc, #160]	; 1de50 <__assert_fail@plt+0xb628>
   1ddac:	add	r2, pc, r2
   1ddb0:	add	r0, pc, r0
   1ddb4:	add	r2, r2, #84	; 0x54
   1ddb8:	add	r1, pc, r1
   1ddbc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ddc0:	mov	r0, sl
   1ddc4:	b	1dd08 <__assert_fail@plt+0xb4e0>
   1ddc8:	ldr	r2, [pc, #132]	; 1de54 <__assert_fail@plt+0xb62c>
   1ddcc:	ldr	r0, [pc, #132]	; 1de58 <__assert_fail@plt+0xb630>
   1ddd0:	ldr	r1, [pc, #132]	; 1de5c <__assert_fail@plt+0xb634>
   1ddd4:	add	r2, pc, r2
   1ddd8:	add	r0, pc, r0
   1dddc:	add	r2, r2, #84	; 0x54
   1dde0:	add	r1, pc, r1
   1dde4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1dde8:	mov	r0, r9
   1ddec:	b	1dd08 <__assert_fail@plt+0xb4e0>
   1ddf0:	ldr	r2, [pc, #104]	; 1de60 <__assert_fail@plt+0xb638>
   1ddf4:	ldr	r0, [pc, #104]	; 1de64 <__assert_fail@plt+0xb63c>
   1ddf8:	ldr	r1, [pc, #104]	; 1de68 <__assert_fail@plt+0xb640>
   1ddfc:	add	r2, pc, r2
   1de00:	add	r0, pc, r0
   1de04:	add	r2, r2, #84	; 0x54
   1de08:	add	r1, pc, r1
   1de0c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1de10:	mov	r0, r7
   1de14:	b	1dd08 <__assert_fail@plt+0xb4e0>
   1de18:	bl	12360 <__stack_chk_fail@plt>
   1de1c:	muleq	r2, r0, r3
   1de20:	andeq	r0, r0, r4, lsr #4
   1de24:	andeq	sl, r0, ip, lsr #16
   1de28:	andeq	r8, r0, r4, ror r0
   1de2c:	andeq	sl, r0, r0, asr r0
   1de30:	strdeq	sl, [r0], -ip
   1de34:	andeq	r8, r0, r4, asr #32
   1de38:	andeq	r8, r0, ip, asr #13
   1de3c:	ldrdeq	sl, [r0], -r4
   1de40:	andeq	r8, r0, ip, lsl r0
   1de44:	andeq	sl, r0, r0, ror #18
   1de48:	andeq	sl, r0, ip, lsr #15
   1de4c:	strdeq	r7, [r0], -r4
   1de50:	strdeq	r8, [r0], -r4
   1de54:	andeq	sl, r0, r4, lsl #15
   1de58:	andeq	r7, r0, ip, asr #31
   1de5c:	andeq	r9, r0, r4, ror pc
   1de60:	andeq	sl, r0, ip, asr r7
   1de64:	andeq	r7, r0, r4, lsr #31
   1de68:	ldrdeq	sl, [r0], -r8
   1de6c:	ldr	r3, [pc, #72]	; 1debc <__assert_fail@plt+0xb694>
   1de70:	cmp	r0, #0
   1de74:	ldr	r2, [pc, #68]	; 1dec0 <__assert_fail@plt+0xb698>
   1de78:	add	r3, pc, r3
   1de7c:	push	{r4, lr}
   1de80:	sub	sp, sp, #8
   1de84:	ldr	r4, [r3, r2]
   1de88:	str	r0, [sp]
   1de8c:	ldr	r3, [r4]
   1de90:	str	r3, [sp, #4]
   1de94:	beq	1dea0 <__assert_fail@plt+0xb678>
   1de98:	mov	r0, sp
   1de9c:	bl	1278c <asn1_delete_structure@plt>
   1dea0:	ldr	r2, [sp, #4]
   1dea4:	ldr	r3, [r4]
   1dea8:	cmp	r2, r3
   1deac:	bne	1deb8 <__assert_fail@plt+0xb690>
   1deb0:	add	sp, sp, #8
   1deb4:	pop	{r4, pc}
   1deb8:	bl	12360 <__stack_chk_fail@plt>
   1debc:	andeq	r6, r2, r0, lsl #3
   1dec0:	andeq	r0, r0, r4, lsr #4
   1dec4:	ldr	ip, [pc, #148]	; 1df60 <__assert_fail@plt+0xb738>
   1dec8:	push	{r4, r5, r6, r7, r8, lr}
   1decc:	add	ip, pc, ip
   1ded0:	ldr	lr, [pc, #140]	; 1df64 <__assert_fail@plt+0xb73c>
   1ded4:	sub	sp, sp, #24
   1ded8:	add	r6, sp, #12
   1dedc:	add	r2, sp, #11
   1dee0:	mov	r8, r0
   1dee4:	mov	r7, r1
   1dee8:	ldr	r5, [ip, lr]
   1deec:	add	ip, sp, #16
   1def0:	str	ip, [sp]
   1def4:	mov	r3, r6
   1def8:	ldr	ip, [r5]
   1defc:	str	ip, [sp, #20]
   1df00:	bl	126cc <asn1_get_tag_der@plt>
   1df04:	cmp	r0, #0
   1df08:	bne	1df54 <__assert_fail@plt+0xb72c>
   1df0c:	ldr	r4, [sp, #12]
   1df10:	mov	r2, r6
   1df14:	add	r0, r8, r4
   1df18:	rsb	r1, r4, r7
   1df1c:	bl	125ac <asn1_get_length_der@plt>
   1df20:	ldr	r3, [sp, #12]
   1df24:	add	r4, r4, r3
   1df28:	cmp	r0, #0
   1df2c:	blt	1df54 <__assert_fail@plt+0xb72c>
   1df30:	add	r0, r0, r4
   1df34:	cmp	r7, r0
   1df38:	bcc	1df54 <__assert_fail@plt+0xb72c>
   1df3c:	ldr	r2, [sp, #20]
   1df40:	ldr	r3, [r5]
   1df44:	cmp	r2, r3
   1df48:	bne	1df5c <__assert_fail@plt+0xb734>
   1df4c:	add	sp, sp, #24
   1df50:	pop	{r4, r5, r6, r7, r8, pc}
   1df54:	mvn	r0, #0
   1df58:	b	1df3c <__assert_fail@plt+0xb714>
   1df5c:	bl	12360 <__stack_chk_fail@plt>
   1df60:	andeq	r6, r2, ip, lsr #2
   1df64:	andeq	r0, r0, r4, lsr #4
   1df68:	push	{r4, r5, r6, lr}
   1df6c:	mov	r0, #1
   1df70:	mov	r1, #8
   1df74:	ldr	r4, [pc, #208]	; 1e04c <__assert_fail@plt+0xb824>
   1df78:	bl	1221c <calloc@plt>
   1df7c:	add	r4, pc, r4
   1df80:	subs	r5, r0, #0
   1df84:	beq	1dfd4 <__assert_fail@plt+0xb7ac>
   1df88:	bl	1d69c <__assert_fail@plt+0xae74>
   1df8c:	cmp	r0, #0
   1df90:	mov	r6, r0
   1df94:	str	r0, [r5]
   1df98:	beq	1dffc <__assert_fail@plt+0xb7d4>
   1df9c:	ldr	r0, [pc, #172]	; 1e050 <__assert_fail@plt+0xb828>
   1dfa0:	mov	r2, #0
   1dfa4:	ldr	r1, [pc, #168]	; 1e054 <__assert_fail@plt+0xb82c>
   1dfa8:	ldr	r3, [pc, #168]	; 1e058 <__assert_fail@plt+0xb830>
   1dfac:	ldr	r0, [r4, r0]
   1dfb0:	add	r3, pc, r3
   1dfb4:	ldr	r1, [r4, r1]
   1dfb8:	bl	2336c <secure_getenv@@Base+0xd18>
   1dfbc:	cmp	r0, #0
   1dfc0:	mov	r6, r0
   1dfc4:	str	r0, [r5, #4]
   1dfc8:	beq	1e024 <__assert_fail@plt+0xb7fc>
   1dfcc:	mov	r0, r5
   1dfd0:	pop	{r4, r5, r6, pc}
   1dfd4:	ldr	r2, [pc, #128]	; 1e05c <__assert_fail@plt+0xb834>
   1dfd8:	ldr	r0, [pc, #128]	; 1e060 <__assert_fail@plt+0xb838>
   1dfdc:	ldr	r1, [pc, #128]	; 1e064 <__assert_fail@plt+0xb83c>
   1dfe0:	add	r2, pc, r2
   1dfe4:	add	r0, pc, r0
   1dfe8:	add	r2, r2, #100	; 0x64
   1dfec:	add	r1, pc, r1
   1dff0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1dff4:	mov	r0, r5
   1dff8:	pop	{r4, r5, r6, pc}
   1dffc:	ldr	r2, [pc, #100]	; 1e068 <__assert_fail@plt+0xb840>
   1e000:	ldr	r0, [pc, #100]	; 1e06c <__assert_fail@plt+0xb844>
   1e004:	ldr	r1, [pc, #100]	; 1e070 <__assert_fail@plt+0xb848>
   1e008:	add	r2, pc, r2
   1e00c:	add	r0, pc, r0
   1e010:	add	r2, r2, #100	; 0x64
   1e014:	add	r1, pc, r1
   1e018:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e01c:	mov	r0, r6
   1e020:	pop	{r4, r5, r6, pc}
   1e024:	ldr	r2, [pc, #72]	; 1e074 <__assert_fail@plt+0xb84c>
   1e028:	ldr	r0, [pc, #72]	; 1e078 <__assert_fail@plt+0xb850>
   1e02c:	ldr	r1, [pc, #72]	; 1e07c <__assert_fail@plt+0xb854>
   1e030:	add	r2, pc, r2
   1e034:	add	r0, pc, r0
   1e038:	add	r2, r2, #100	; 0x64
   1e03c:	add	r1, pc, r1
   1e040:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e044:	mov	r0, r6
   1e048:	pop	{r4, r5, r6, pc}
   1e04c:	andeq	r6, r2, ip, ror r0
   1e050:	andeq	r0, r0, ip, lsr r2
   1e054:	andeq	r0, r0, r4, asr r2
   1e058:			; <UNDEFINED> instruction: 0xfffff6c0
   1e05c:	andeq	sl, r0, r8, ror r5
   1e060:	andeq	r7, r0, r0, asr #27
   1e064:	andeq	sl, r0, r4, lsl r7
   1e068:	andeq	sl, r0, r0, asr r5
   1e06c:	muleq	r0, r8, sp
   1e070:	strdeq	sl, [r0], -ip
   1e074:	andeq	sl, r0, r8, lsr #10
   1e078:	andeq	r7, r0, r0, ror sp
   1e07c:	andeq	sl, r0, r8, ror #13
   1e080:	cmp	r0, #0
   1e084:	push	{r4, r5, r6, lr}
   1e088:	mov	r5, r1
   1e08c:	mov	r4, r2
   1e090:	mov	r6, r3
   1e094:	beq	1e104 <__assert_fail@plt+0xb8dc>
   1e098:	cmp	r1, #0
   1e09c:	beq	1e15c <__assert_fail@plt+0xb934>
   1e0a0:	cmp	r2, #0
   1e0a4:	beq	1e134 <__assert_fail@plt+0xb90c>
   1e0a8:	ldr	r0, [r0, #4]
   1e0ac:	mov	r1, r2
   1e0b0:	bl	23010 <secure_getenv@@Base+0x9bc>
   1e0b4:	subs	r4, r0, #0
   1e0b8:	beq	1e104 <__assert_fail@plt+0xb8dc>
   1e0bc:	ldr	r3, [r4, #8]
   1e0c0:	cmp	r3, r6
   1e0c4:	bne	1e0e4 <__assert_fail@plt+0xb8bc>
   1e0c8:	mov	r1, r5
   1e0cc:	ldr	r0, [r4, #4]
   1e0d0:	bl	1227c <strcmp@plt>
   1e0d4:	cmp	r0, #0
   1e0d8:	bne	1e10c <__assert_fail@plt+0xb8e4>
   1e0dc:	ldr	r0, [r4]
   1e0e0:	pop	{r4, r5, r6, pc}
   1e0e4:	ldr	r2, [pc, #152]	; 1e184 <__assert_fail@plt+0xb95c>
   1e0e8:	ldr	r0, [pc, #152]	; 1e188 <__assert_fail@plt+0xb960>
   1e0ec:	ldr	r1, [pc, #152]	; 1e18c <__assert_fail@plt+0xb964>
   1e0f0:	add	r2, pc, r2
   1e0f4:	add	r0, pc, r0
   1e0f8:	add	r2, r2, #120	; 0x78
   1e0fc:	add	r1, pc, r1
   1e100:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e104:	mov	r0, #0
   1e108:	pop	{r4, r5, r6, pc}
   1e10c:	ldr	r2, [pc, #124]	; 1e190 <__assert_fail@plt+0xb968>
   1e110:	ldr	r0, [pc, #124]	; 1e194 <__assert_fail@plt+0xb96c>
   1e114:	ldr	r1, [pc, #124]	; 1e198 <__assert_fail@plt+0xb970>
   1e118:	add	r2, pc, r2
   1e11c:	add	r0, pc, r0
   1e120:	add	r2, r2, #120	; 0x78
   1e124:	add	r1, pc, r1
   1e128:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e12c:	mov	r0, #0
   1e130:	pop	{r4, r5, r6, pc}
   1e134:	ldr	r2, [pc, #96]	; 1e19c <__assert_fail@plt+0xb974>
   1e138:	ldr	r0, [pc, #96]	; 1e1a0 <__assert_fail@plt+0xb978>
   1e13c:	ldr	r1, [pc, #96]	; 1e1a4 <__assert_fail@plt+0xb97c>
   1e140:	add	r2, pc, r2
   1e144:	add	r0, pc, r0
   1e148:	add	r2, r2, #120	; 0x78
   1e14c:	add	r1, pc, r1
   1e150:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e154:	mov	r0, r4
   1e158:	pop	{r4, r5, r6, pc}
   1e15c:	ldr	r2, [pc, #68]	; 1e1a8 <__assert_fail@plt+0xb980>
   1e160:	ldr	r0, [pc, #68]	; 1e1ac <__assert_fail@plt+0xb984>
   1e164:	ldr	r1, [pc, #68]	; 1e1b0 <__assert_fail@plt+0xb988>
   1e168:	add	r2, pc, r2
   1e16c:	add	r0, pc, r0
   1e170:	add	r2, r2, #120	; 0x78
   1e174:	add	r1, pc, r1
   1e178:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e17c:	mov	r0, r5
   1e180:	pop	{r4, r5, r6, pc}
   1e184:	andeq	sl, r0, r8, ror #8
   1e188:			; <UNDEFINED> instruction: 0x00007cb0
   1e18c:	andeq	sl, r0, r4, asr r6
   1e190:	andeq	sl, r0, r0, asr #8
   1e194:	andeq	r7, r0, r8, lsl #25
   1e198:	andeq	sl, r0, r4, asr #12
   1e19c:	andeq	sl, r0, r8, lsl r4
   1e1a0:	andeq	r7, r0, r0, ror #24
   1e1a4:	andeq	r8, r0, ip, lsl r3
   1e1a8:	strdeq	sl, [r0], -r0
   1e1ac:	andeq	r7, r0, r8, lsr ip
   1e1b0:	andeq	sl, r0, r8, asr #11
   1e1b4:	push	{r4, r5, r6, r7, r8, lr}
   1e1b8:	subs	r8, r0, #0
   1e1bc:	sub	sp, sp, #8
   1e1c0:	mov	r4, r2
   1e1c4:	mov	r7, r3
   1e1c8:	str	r1, [sp, #4]
   1e1cc:	ldr	r6, [sp, #32]
   1e1d0:	beq	1e2c8 <__assert_fail@plt+0xbaa0>
   1e1d4:	cmp	r2, #0
   1e1d8:	beq	1e2d4 <__assert_fail@plt+0xbaac>
   1e1dc:	cmp	r3, #0
   1e1e0:	beq	1e2f8 <__assert_fail@plt+0xbad0>
   1e1e4:	cmp	r6, #0
   1e1e8:	beq	1e258 <__assert_fail@plt+0xba30>
   1e1ec:	mov	r0, #1
   1e1f0:	mov	r1, #12
   1e1f4:	bl	1221c <calloc@plt>
   1e1f8:	subs	r5, r0, #0
   1e1fc:	beq	1e280 <__assert_fail@plt+0xba58>
   1e200:	ldr	r3, [sp, #4]
   1e204:	mov	r0, r4
   1e208:	str	r6, [r5, #8]
   1e20c:	str	r3, [r5]
   1e210:	bl	125c4 <__strdup@plt>
   1e214:	cmp	r0, #0
   1e218:	str	r0, [r5, #4]
   1e21c:	beq	1e2a4 <__assert_fail@plt+0xba7c>
   1e220:	ldr	r0, [r8, #4]
   1e224:	mov	r1, r7
   1e228:	mov	r2, r5
   1e22c:	bl	23034 <secure_getenv@@Base+0x9e0>
   1e230:	cmp	r0, #0
   1e234:	bne	1e250 <__assert_fail@plt+0xba28>
   1e238:	ldr	r1, [pc, #220]	; 1e31c <__assert_fail@plt+0xbaf4>
   1e23c:	ldr	r0, [pc, #220]	; 1e320 <__assert_fail@plt+0xbaf8>
   1e240:	add	r1, pc, r1
   1e244:	add	r0, pc, r0
   1e248:	add	r1, r1, #140	; 0x8c
   1e24c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e250:	add	sp, sp, #8
   1e254:	pop	{r4, r5, r6, r7, r8, pc}
   1e258:	ldr	r2, [pc, #196]	; 1e324 <__assert_fail@plt+0xbafc>
   1e25c:	ldr	r0, [pc, #196]	; 1e328 <__assert_fail@plt+0xbb00>
   1e260:	ldr	r1, [pc, #196]	; 1e32c <__assert_fail@plt+0xbb04>
   1e264:	add	r2, pc, r2
   1e268:	add	r0, pc, r0
   1e26c:	add	r2, r2, #140	; 0x8c
   1e270:	add	r1, pc, r1
   1e274:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e278:	add	sp, sp, #8
   1e27c:	pop	{r4, r5, r6, r7, r8, pc}
   1e280:	ldr	r2, [pc, #168]	; 1e330 <__assert_fail@plt+0xbb08>
   1e284:	ldr	r0, [pc, #168]	; 1e334 <__assert_fail@plt+0xbb0c>
   1e288:	ldr	r1, [pc, #168]	; 1e338 <__assert_fail@plt+0xbb10>
   1e28c:	add	r2, pc, r2
   1e290:	add	r0, pc, r0
   1e294:	add	r2, r2, #140	; 0x8c
   1e298:	add	r1, pc, r1
   1e29c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e2a0:	b	1e250 <__assert_fail@plt+0xba28>
   1e2a4:	ldr	r2, [pc, #144]	; 1e33c <__assert_fail@plt+0xbb14>
   1e2a8:	ldr	r0, [pc, #144]	; 1e340 <__assert_fail@plt+0xbb18>
   1e2ac:	ldr	r1, [pc, #144]	; 1e344 <__assert_fail@plt+0xbb1c>
   1e2b0:	add	r2, pc, r2
   1e2b4:	add	r0, pc, r0
   1e2b8:	add	r2, r2, #140	; 0x8c
   1e2bc:	add	r1, pc, r1
   1e2c0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e2c4:	b	1e250 <__assert_fail@plt+0xba28>
   1e2c8:	add	r0, sp, #4
   1e2cc:	bl	1278c <asn1_delete_structure@plt>
   1e2d0:	b	1e250 <__assert_fail@plt+0xba28>
   1e2d4:	ldr	r2, [pc, #108]	; 1e348 <__assert_fail@plt+0xbb20>
   1e2d8:	ldr	r0, [pc, #108]	; 1e34c <__assert_fail@plt+0xbb24>
   1e2dc:	ldr	r1, [pc, #108]	; 1e350 <__assert_fail@plt+0xbb28>
   1e2e0:	add	r2, pc, r2
   1e2e4:	add	r0, pc, r0
   1e2e8:	add	r2, r2, #140	; 0x8c
   1e2ec:	add	r1, pc, r1
   1e2f0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e2f4:	b	1e250 <__assert_fail@plt+0xba28>
   1e2f8:	ldr	r2, [pc, #84]	; 1e354 <__assert_fail@plt+0xbb2c>
   1e2fc:	ldr	r0, [pc, #84]	; 1e358 <__assert_fail@plt+0xbb30>
   1e300:	ldr	r1, [pc, #84]	; 1e35c <__assert_fail@plt+0xbb34>
   1e304:	add	r2, pc, r2
   1e308:	add	r0, pc, r0
   1e30c:	add	r2, r2, #140	; 0x8c
   1e310:	add	r1, pc, r1
   1e314:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e318:	b	1e250 <__assert_fail@plt+0xba28>
   1e31c:	andeq	sl, r0, r8, lsl r3
   1e320:	andeq	r7, r0, r4, lsl #26
   1e324:	strdeq	sl, [r0], -r4
   1e328:	andeq	r7, r0, ip, lsr fp
   1e32c:	andeq	sl, r0, r8, lsr #10
   1e330:	andeq	sl, r0, ip, asr #5
   1e334:	andeq	r7, r0, r4, lsl fp
   1e338:	andeq	sl, r0, r0, lsl r5
   1e33c:	andeq	sl, r0, r8, lsr #5
   1e340:	strdeq	r7, [r0], -r0
   1e344:	strdeq	sl, [r0], -ip
   1e348:	andeq	sl, r0, r8, ror r2
   1e34c:	andeq	r7, r0, r0, asr #21
   1e350:	andeq	sl, r0, r0, asr r4
   1e354:	andeq	sl, r0, r4, asr r2
   1e358:	muleq	r0, ip, sl
   1e35c:	andeq	r8, r0, r8, asr r1
   1e360:	cmp	r0, #0
   1e364:	bxeq	lr
   1e368:	ldr	r0, [r0, #4]
   1e36c:	b	232d8 <secure_getenv@@Base+0xc84>
   1e370:	push	{r4, lr}
   1e374:	subs	r4, r0, #0
   1e378:	beq	1e384 <__assert_fail@plt+0xbb5c>
   1e37c:	ldr	r0, [r4]
   1e380:	pop	{r4, pc}
   1e384:	ldr	r2, [pc, #32]	; 1e3ac <__assert_fail@plt+0xbb84>
   1e388:	ldr	r0, [pc, #32]	; 1e3b0 <__assert_fail@plt+0xbb88>
   1e38c:	ldr	r1, [pc, #32]	; 1e3b4 <__assert_fail@plt+0xbb8c>
   1e390:	add	r2, pc, r2
   1e394:	add	r0, pc, r0
   1e398:	add	r2, r2, #160	; 0xa0
   1e39c:	add	r1, pc, r1
   1e3a0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e3a4:	mov	r0, r4
   1e3a8:	pop	{r4, pc}
   1e3ac:	andeq	sl, r0, r8, asr #3
   1e3b0:	andeq	r7, r0, r0, lsl sl
   1e3b4:	andeq	sl, r0, r4, ror #6
   1e3b8:	push	{r4, lr}
   1e3bc:	subs	r4, r0, #0
   1e3c0:	popeq	{r4, pc}
   1e3c4:	ldr	r0, [r4, #4]
   1e3c8:	bl	23458 <secure_getenv@@Base+0xe04>
   1e3cc:	ldr	r0, [r4]
   1e3d0:	bl	23458 <secure_getenv@@Base+0xe04>
   1e3d4:	mov	r0, r4
   1e3d8:	pop	{r4, lr}
   1e3dc:	b	122c4 <free@plt>
   1e3e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3e4:	subs	r7, r0, #0
   1e3e8:	sub	sp, sp, #36	; 0x24
   1e3ec:	mov	r6, r1
   1e3f0:	str	r2, [sp, #4]
   1e3f4:	str	r3, [sp, #24]
   1e3f8:	beq	1e6a0 <__assert_fail@plt+0xbe78>
   1e3fc:	cmp	r1, #0
   1e400:	streq	r1, [sp]
   1e404:	beq	1e634 <__assert_fail@plt+0xbe0c>
   1e408:	mov	ip, #0
   1e40c:	str	ip, [sp]
   1e410:	ldr	ip, [pc, #752]	; 1e708 <__assert_fail@plt+0xbee0>
   1e414:	ldr	r3, [pc, #752]	; 1e70c <__assert_fail@plt+0xbee4>
   1e418:	add	ip, pc, ip
   1e41c:	str	ip, [sp, #8]
   1e420:	ldr	ip, [pc, #744]	; 1e710 <__assert_fail@plt+0xbee8>
   1e424:	add	r3, pc, r3
   1e428:	add	r3, r3, #64	; 0x40
   1e42c:	str	r3, [sp, #28]
   1e430:	add	ip, pc, ip
   1e434:	str	ip, [sp, #12]
   1e438:	ldr	ip, [pc, #724]	; 1e714 <__assert_fail@plt+0xbeec>
   1e43c:	add	ip, pc, ip
   1e440:	str	ip, [sp, #16]
   1e444:	ldr	ip, [pc, #716]	; 1e718 <__assert_fail@plt+0xbef0>
   1e448:	add	ip, pc, ip
   1e44c:	str	ip, [sp, #20]
   1e450:	mov	r0, r7
   1e454:	ldr	r1, [sp, #8]
   1e458:	mov	r2, r6
   1e45c:	bl	22400 <__assert_fail@plt+0xfbd8>
   1e460:	subs	r8, r0, #0
   1e464:	beq	1e634 <__assert_fail@plt+0xbe0c>
   1e468:	add	r4, r8, #11
   1e46c:	rsb	r3, r8, r7
   1e470:	sub	r2, r6, #11
   1e474:	ldr	r1, [sp, #12]
   1e478:	add	r2, r2, r3
   1e47c:	mov	r0, r4
   1e480:	bl	22400 <__assert_fail@plt+0xfbd8>
   1e484:	mov	r9, r7
   1e488:	subs	r5, r0, #0
   1e48c:	beq	1e634 <__assert_fail@plt+0xbe0c>
   1e490:	mov	r0, r8
   1e494:	mov	r1, #10
   1e498:	rsb	r2, r8, r5
   1e49c:	bl	12684 <memchr@plt>
   1e4a0:	cmp	r0, #0
   1e4a4:	bne	1e634 <__assert_fail@plt+0xbe0c>
   1e4a8:	cmp	r4, r5
   1e4ac:	bcs	1e6c0 <__assert_fail@plt+0xbe98>
   1e4b0:	mov	r0, r4
   1e4b4:	rsb	r1, r4, r5
   1e4b8:	bl	224d4 <strndup@@Base>
   1e4bc:	subs	r8, r0, #0
   1e4c0:	beq	1e670 <__assert_fail@plt+0xbe48>
   1e4c4:	adds	r5, r5, #5
   1e4c8:	beq	1e634 <__assert_fail@plt+0xbe0c>
   1e4cc:	rsb	r4, r5, r7
   1e4d0:	mov	r0, r5
   1e4d4:	add	r4, r4, r6
   1e4d8:	ldr	r1, [sp, #16]
   1e4dc:	mov	r2, r4
   1e4e0:	bl	22400 <__assert_fail@plt+0xfbd8>
   1e4e4:	subs	r7, r0, #0
   1e4e8:	beq	1e640 <__assert_fail@plt+0xbe18>
   1e4ec:	rsb	r3, r7, r5
   1e4f0:	sub	r4, r4, #9
   1e4f4:	mov	r0, r8
   1e4f8:	add	r4, r4, r3
   1e4fc:	bl	12540 <strlen@plt>
   1e500:	add	fp, r7, #9
   1e504:	cmp	r4, r0
   1e508:	mov	sl, r0
   1e50c:	bcc	1e640 <__assert_fail@plt+0xbe18>
   1e510:	mov	r0, fp
   1e514:	mov	r1, r8
   1e518:	mov	r2, sl
   1e51c:	bl	127bc <strncmp@plt>
   1e520:	cmp	r0, #0
   1e524:	bne	1e640 <__assert_fail@plt+0xbe18>
   1e528:	rsb	r4, sl, r4
   1e52c:	add	r0, fp, sl
   1e530:	cmp	r4, #4
   1e534:	bls	1e640 <__assert_fail@plt+0xbe18>
   1e538:	ldr	r1, [sp, #20]
   1e53c:	mov	r2, #5
   1e540:	bl	127bc <strncmp@plt>
   1e544:	cmp	r0, #0
   1e548:	bne	1e640 <__assert_fail@plt+0xbe18>
   1e54c:	cmp	r5, r7
   1e550:	beq	1e61c <__assert_fail@plt+0xbdf4>
   1e554:	subs	sl, r7, r5
   1e558:	beq	1e6e4 <__assert_fail@plt+0xbebc>
   1e55c:	add	r4, r5, sl
   1e560:	mov	r0, r5
   1e564:	mov	r1, #10
   1e568:	rsb	r2, r0, r4
   1e56c:	bl	12684 <memchr@plt>
   1e570:	subs	fp, r0, #0
   1e574:	beq	1e5b4 <__assert_fail@plt+0xbd8c>
   1e578:	bl	124ec <__ctype_b_loc@plt>
   1e57c:	add	r3, fp, #1
   1e580:	ldr	ip, [r0]
   1e584:	mov	r0, r3
   1e588:	ldrb	r2, [r3], #1
   1e58c:	lsl	r1, r2, #1
   1e590:	ldrh	r1, [ip, r1]
   1e594:	tst	r1, #8192	; 0x2000
   1e598:	beq	1e564 <__assert_fail@plt+0xbd3c>
   1e59c:	cmp	r2, #10
   1e5a0:	bne	1e584 <__assert_fail@plt+0xbd5c>
   1e5a4:	cmp	r0, #0
   1e5a8:	beq	1e564 <__assert_fail@plt+0xbd3c>
   1e5ac:	rsb	sl, r0, r4
   1e5b0:	mov	r5, r0
   1e5b4:	add	r3, sl, sl, lsl #1
   1e5b8:	lsr	r3, r3, #2
   1e5bc:	add	fp, r3, #1
   1e5c0:	mov	r0, fp
   1e5c4:	bl	1245c <malloc@plt>
   1e5c8:	subs	r4, r0, #0
   1e5cc:	beq	1e654 <__assert_fail@plt+0xbe2c>
   1e5d0:	mov	r2, r4
   1e5d4:	mov	r0, r5
   1e5d8:	mov	r1, sl
   1e5dc:	mov	r3, fp
   1e5e0:	bl	1f8ec <__assert_fail@plt+0xd0c4>
   1e5e4:	subs	r2, r0, #0
   1e5e8:	blt	1e694 <__assert_fail@plt+0xbe6c>
   1e5ec:	ldr	ip, [sp, #4]
   1e5f0:	cmp	ip, #0
   1e5f4:	beq	1e608 <__assert_fail@plt+0xbde0>
   1e5f8:	mov	r0, r8
   1e5fc:	mov	r1, r4
   1e600:	ldr	r3, [sp, #24]
   1e604:	blx	ip
   1e608:	ldr	ip, [sp]
   1e60c:	mov	r0, r4
   1e610:	add	ip, ip, #1
   1e614:	str	ip, [sp]
   1e618:	bl	122c4 <free@plt>
   1e61c:	add	r7, r7, #5
   1e620:	mov	r0, r8
   1e624:	rsb	r9, r7, r9
   1e628:	bl	122c4 <free@plt>
   1e62c:	adds	r6, r6, r9
   1e630:	bne	1e450 <__assert_fail@plt+0xbc28>
   1e634:	ldr	r0, [sp]
   1e638:	add	sp, sp, #36	; 0x24
   1e63c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e640:	mov	r0, r8
   1e644:	bl	122c4 <free@plt>
   1e648:	ldr	r0, [sp]
   1e64c:	add	sp, sp, #36	; 0x24
   1e650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e654:	ldr	r0, [pc, #192]	; 1e71c <__assert_fail@plt+0xbef4>
   1e658:	ldr	r1, [pc, #192]	; 1e720 <__assert_fail@plt+0xbef8>
   1e65c:	add	r0, pc, r0
   1e660:	ldr	r2, [sp, #28]
   1e664:	add	r1, pc, r1
   1e668:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e66c:	b	1e61c <__assert_fail@plt+0xbdf4>
   1e670:	ldr	r2, [pc, #172]	; 1e724 <__assert_fail@plt+0xbefc>
   1e674:	ldr	r0, [pc, #172]	; 1e728 <__assert_fail@plt+0xbf00>
   1e678:	ldr	r1, [pc, #172]	; 1e72c <__assert_fail@plt+0xbf04>
   1e67c:	add	r2, pc, r2
   1e680:	add	r0, pc, r0
   1e684:	add	r2, r2, #32
   1e688:	add	r1, pc, r1
   1e68c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e690:	b	1e634 <__assert_fail@plt+0xbe0c>
   1e694:	mov	r0, r4
   1e698:	bl	122c4 <free@plt>
   1e69c:	b	1e61c <__assert_fail@plt+0xbdf4>
   1e6a0:	ldr	r0, [pc, #136]	; 1e730 <__assert_fail@plt+0xbf08>
   1e6a4:	mov	r2, #204	; 0xcc
   1e6a8:	ldr	r1, [pc, #132]	; 1e734 <__assert_fail@plt+0xbf0c>
   1e6ac:	ldr	r3, [pc, #132]	; 1e738 <__assert_fail@plt+0xbf10>
   1e6b0:	add	r0, pc, r0
   1e6b4:	add	r1, pc, r1
   1e6b8:	add	r3, pc, r3
   1e6bc:	bl	12828 <__assert_fail@plt>
   1e6c0:	ldr	r3, [pc, #116]	; 1e73c <__assert_fail@plt+0xbf14>
   1e6c4:	mov	r2, #87	; 0x57
   1e6c8:	ldr	r0, [pc, #112]	; 1e740 <__assert_fail@plt+0xbf18>
   1e6cc:	ldr	r1, [pc, #112]	; 1e744 <__assert_fail@plt+0xbf1c>
   1e6d0:	add	r3, pc, r3
   1e6d4:	add	r0, pc, r0
   1e6d8:	add	r3, r3, #16
   1e6dc:	add	r1, pc, r1
   1e6e0:	bl	12828 <__assert_fail@plt>
   1e6e4:	ldr	r3, [pc, #92]	; 1e748 <__assert_fail@plt+0xbf20>
   1e6e8:	mov	r2, #140	; 0x8c
   1e6ec:	ldr	r0, [pc, #88]	; 1e74c <__assert_fail@plt+0xbf24>
   1e6f0:	ldr	r1, [pc, #88]	; 1e750 <__assert_fail@plt+0xbf28>
   1e6f4:	add	r3, pc, r3
   1e6f8:	add	r0, pc, r0
   1e6fc:	add	r3, r3, #48	; 0x30
   1e700:	add	r1, pc, r1
   1e704:	bl	12828 <__assert_fail@plt>
   1e708:	andeq	fp, r0, r4, lsr #8
   1e70c:	andeq	fp, r0, r8, lsl #7
   1e710:	andeq	fp, r0, r8, lsl r4
   1e714:	andeq	fp, r0, r0, lsr r4
   1e718:	andeq	fp, r0, r0, lsl #8
   1e71c:	andeq	r7, r0, r8, asr #14
   1e720:	andeq	fp, r0, r0, lsr #4
   1e724:	andeq	fp, r0, r0, lsr r1
   1e728:	andeq	r7, r0, r4, lsr #14
   1e72c:	ldrdeq	fp, [r0], -r4
   1e730:	andeq	fp, r0, ip, ror #2
   1e734:	andeq	fp, r0, ip, ror r1
   1e738:	strdeq	fp, [r0], -r4
   1e73c:	ldrdeq	fp, [r0], -ip
   1e740:	andeq	fp, r0, ip, ror r1
   1e744:	andeq	fp, r0, r4, asr r1
   1e748:	strheq	fp, [r0], -r8
   1e74c:	andeq	fp, r0, r0, lsl #3
   1e750:	andeq	fp, r0, r0, lsr r1
   1e754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e758:	rsbs	r5, r0, #1
   1e75c:	sub	sp, sp, #12
   1e760:	mov	r8, r0
   1e764:	movcc	r5, #0
   1e768:	cmp	r1, #0
   1e76c:	mov	r6, r1
   1e770:	mov	r7, r2
   1e774:	moveq	r5, #0
   1e778:	cmp	r5, #0
   1e77c:	mov	r4, r3
   1e780:	bne	1e8ac <__assert_fail@plt+0xc084>
   1e784:	cmp	r2, #0
   1e788:	beq	1e924 <__assert_fail@plt+0xc0fc>
   1e78c:	cmp	r3, #0
   1e790:	beq	1e8dc <__assert_fail@plt+0xc0b4>
   1e794:	lsl	r9, r1, #2
   1e798:	movw	r3, #43691	; 0xaaab
   1e79c:	movt	r3, #43690	; 0xaaaa
   1e7a0:	ldr	sl, [pc, #488]	; 1e990 <__assert_fail@plt+0xc168>
   1e7a4:	ldr	r1, [pc, #488]	; 1e994 <__assert_fail@plt+0xc16c>
   1e7a8:	mov	r0, r4
   1e7ac:	umull	r2, r3, r3, r9
   1e7b0:	add	r1, pc, r1
   1e7b4:	mov	r2, #11
   1e7b8:	add	sl, pc, sl
   1e7bc:	lsr	r3, r3, #1
   1e7c0:	add	r9, r3, #7
   1e7c4:	add	r3, r3, #8
   1e7c8:	add	r9, r3, r9, lsr #6
   1e7cc:	bl	2212c <__assert_fail@plt+0xf904>
   1e7d0:	mov	r0, r4
   1e7d4:	mov	r1, r7
   1e7d8:	mvn	r2, #0
   1e7dc:	bl	2212c <__assert_fail@plt+0xf904>
   1e7e0:	mov	r2, #5
   1e7e4:	mov	r1, sl
   1e7e8:	mov	r0, r4
   1e7ec:	bl	2212c <__assert_fail@plt+0xf904>
   1e7f0:	mov	r1, r9
   1e7f4:	mov	r0, r4
   1e7f8:	ldr	fp, [r4, #4]
   1e7fc:	bl	21fd8 <__assert_fail@plt+0xf7b0>
   1e800:	subs	r2, r0, #0
   1e804:	beq	1e900 <__assert_fail@plt+0xc0d8>
   1e808:	mov	ip, #64	; 0x40
   1e80c:	mov	r0, r8
   1e810:	mov	r1, r6
   1e814:	mov	r3, r9
   1e818:	str	ip, [sp]
   1e81c:	bl	1fbe4 <__assert_fail@plt+0xd3bc>
   1e820:	cmp	r0, #0
   1e824:	ble	1e948 <__assert_fail@plt+0xc120>
   1e828:	cmp	r9, r0
   1e82c:	bcc	1e96c <__assert_fail@plt+0xc144>
   1e830:	ldr	r5, [pc, #352]	; 1e998 <__assert_fail@plt+0xc170>
   1e834:	add	fp, r0, fp
   1e838:	mov	r2, #1
   1e83c:	mov	r0, r4
   1e840:	add	r5, pc, r5
   1e844:	str	fp, [r4, #4]
   1e848:	mov	r1, r5
   1e84c:	bl	2212c <__assert_fail@plt+0xf904>
   1e850:	ldr	r1, [pc, #324]	; 1e99c <__assert_fail@plt+0xc174>
   1e854:	mov	r0, r4
   1e858:	mov	r2, #9
   1e85c:	add	r1, pc, r1
   1e860:	bl	2212c <__assert_fail@plt+0xf904>
   1e864:	mov	r0, r4
   1e868:	mov	r1, r7
   1e86c:	mvn	r2, #0
   1e870:	bl	2212c <__assert_fail@plt+0xf904>
   1e874:	mov	r0, r4
   1e878:	mov	r1, sl
   1e87c:	mov	r2, #5
   1e880:	bl	2212c <__assert_fail@plt+0xf904>
   1e884:	mov	r1, r5
   1e888:	mov	r0, r4
   1e88c:	mov	r2, #1
   1e890:	bl	2212c <__assert_fail@plt+0xf904>
   1e894:	ldr	r5, [r4, #8]
   1e898:	and	r5, r5, #1
   1e89c:	eor	r5, r5, #1
   1e8a0:	mov	r0, r5
   1e8a4:	add	sp, sp, #12
   1e8a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8ac:	ldr	r2, [pc, #236]	; 1e9a0 <__assert_fail@plt+0xc178>
   1e8b0:	mov	r5, #0
   1e8b4:	ldr	r0, [pc, #232]	; 1e9a4 <__assert_fail@plt+0xc17c>
   1e8b8:	ldr	r1, [pc, #232]	; 1e9a8 <__assert_fail@plt+0xc180>
   1e8bc:	add	r2, pc, r2
   1e8c0:	add	r0, pc, r0
   1e8c4:	add	r2, r2, #80	; 0x50
   1e8c8:	add	r1, pc, r1
   1e8cc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e8d0:	mov	r0, r5
   1e8d4:	add	sp, sp, #12
   1e8d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8dc:	ldr	r2, [pc, #200]	; 1e9ac <__assert_fail@plt+0xc184>
   1e8e0:	ldr	r0, [pc, #200]	; 1e9b0 <__assert_fail@plt+0xc188>
   1e8e4:	ldr	r1, [pc, #200]	; 1e9b4 <__assert_fail@plt+0xc18c>
   1e8e8:	add	r2, pc, r2
   1e8ec:	add	r0, pc, r0
   1e8f0:	add	r2, r2, #80	; 0x50
   1e8f4:	add	r1, pc, r1
   1e8f8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e8fc:	b	1e8a0 <__assert_fail@plt+0xc078>
   1e900:	ldr	r2, [pc, #176]	; 1e9b8 <__assert_fail@plt+0xc190>
   1e904:	ldr	r0, [pc, #176]	; 1e9bc <__assert_fail@plt+0xc194>
   1e908:	ldr	r1, [pc, #176]	; 1e9c0 <__assert_fail@plt+0xc198>
   1e90c:	add	r2, pc, r2
   1e910:	add	r0, pc, r0
   1e914:	add	r2, r2, #80	; 0x50
   1e918:	add	r1, pc, r1
   1e91c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e920:	b	1e8a0 <__assert_fail@plt+0xc078>
   1e924:	ldr	r2, [pc, #152]	; 1e9c4 <__assert_fail@plt+0xc19c>
   1e928:	ldr	r0, [pc, #152]	; 1e9c8 <__assert_fail@plt+0xc1a0>
   1e92c:	ldr	r1, [pc, #152]	; 1e9cc <__assert_fail@plt+0xc1a4>
   1e930:	add	r2, pc, r2
   1e934:	add	r0, pc, r0
   1e938:	add	r2, r2, #80	; 0x50
   1e93c:	add	r1, pc, r1
   1e940:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1e944:	b	1e8a0 <__assert_fail@plt+0xc078>
   1e948:	ldr	r3, [pc, #128]	; 1e9d0 <__assert_fail@plt+0xc1a8>
   1e94c:	movw	r2, #277	; 0x115
   1e950:	ldr	r0, [pc, #124]	; 1e9d4 <__assert_fail@plt+0xc1ac>
   1e954:	ldr	r1, [pc, #124]	; 1e9d8 <__assert_fail@plt+0xc1b0>
   1e958:	add	r3, pc, r3
   1e95c:	add	r0, pc, r0
   1e960:	add	r3, r3, #96	; 0x60
   1e964:	add	r1, pc, r1
   1e968:	bl	12828 <__assert_fail@plt>
   1e96c:	ldr	r3, [pc, #104]	; 1e9dc <__assert_fail@plt+0xc1b4>
   1e970:	movw	r2, #278	; 0x116
   1e974:	ldr	r0, [pc, #100]	; 1e9e0 <__assert_fail@plt+0xc1b8>
   1e978:	ldr	r1, [pc, #100]	; 1e9e4 <__assert_fail@plt+0xc1bc>
   1e97c:	add	r3, pc, r3
   1e980:	add	r0, pc, r0
   1e984:	add	r3, r3, #96	; 0x60
   1e988:	add	r1, pc, r1
   1e98c:	bl	12828 <__assert_fail@plt>
   1e990:	muleq	r0, r0, r0
   1e994:	andeq	fp, r0, ip, lsl #1
   1e998:	ldrdeq	pc, [r0], -r4
   1e99c:	andeq	fp, r0, r0, lsl r0
   1e9a0:	strdeq	sl, [r0], -r0
   1e9a4:	andeq	r7, r0, r4, ror #9
   1e9a8:	andeq	sl, r0, ip, asr #31
   1e9ac:	andeq	sl, r0, r4, asr #29
   1e9b0:			; <UNDEFINED> instruction: 0x000074b8
   1e9b4:			; <UNDEFINED> instruction: 0x0000afb4
   1e9b8:	andeq	sl, r0, r0, lsr #29
   1e9bc:	muleq	r0, r4, r4
   1e9c0:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   1e9c4:	andeq	sl, r0, ip, ror lr
   1e9c8:	andeq	r7, r0, r0, ror r4
   1e9cc:	andeq	lr, r0, r8, asr r5
   1e9d0:	andeq	sl, r0, r4, asr lr
   1e9d4:	andeq	sl, r0, r0, ror #30
   1e9d8:	andeq	sl, r0, ip, asr #29
   1e9dc:	andeq	sl, r0, r0, lsr lr
   1e9e0:	andeq	sl, r0, r4, asr #30
   1e9e4:	andeq	sl, r0, r8, lsr #29
   1e9e8:	cmp	r0, #0
   1e9ec:	cmpne	r1, #3
   1e9f0:	mov	r3, r0
   1e9f4:	movle	r0, #0
   1e9f8:	movgt	r0, #1
   1e9fc:	bxle	lr
   1ea00:	ldrb	r2, [r3]
   1ea04:	cmp	r2, #6
   1ea08:	beq	1ea14 <__assert_fail@plt+0xc1ec>
   1ea0c:	mov	r0, #0
   1ea10:	bx	lr
   1ea14:	ldrb	r3, [r3, #1]
   1ea18:	tst	r3, #128	; 0x80
   1ea1c:	bne	1ea0c <__assert_fail@plt+0xc1e4>
   1ea20:	sub	r1, r1, #2
   1ea24:	subs	r3, r3, r1
   1ea28:	rsbs	r0, r3, #0
   1ea2c:	adcs	r0, r0, r3
   1ea30:	bx	lr
   1ea34:	push	{r3, lr}
   1ea38:	ldrb	r3, [r0]
   1ea3c:	cmp	r3, #6
   1ea40:	bne	1ea58 <__assert_fail@plt+0xc230>
   1ea44:	ldrb	r0, [r0, #1]
   1ea48:	tst	r0, #128	; 0x80
   1ea4c:	bne	1ea78 <__assert_fail@plt+0xc250>
   1ea50:	add	r0, r0, #2
   1ea54:	pop	{r3, pc}
   1ea58:	ldr	r0, [pc, #56]	; 1ea98 <__assert_fail@plt+0xc270>
   1ea5c:	mov	r2, #93	; 0x5d
   1ea60:	ldr	r1, [pc, #52]	; 1ea9c <__assert_fail@plt+0xc274>
   1ea64:	ldr	r3, [pc, #52]	; 1eaa0 <__assert_fail@plt+0xc278>
   1ea68:	add	r0, pc, r0
   1ea6c:	add	r1, pc, r1
   1ea70:	add	r3, pc, r3
   1ea74:	bl	12828 <__assert_fail@plt>
   1ea78:	ldr	r0, [pc, #36]	; 1eaa4 <__assert_fail@plt+0xc27c>
   1ea7c:	mov	r2, #94	; 0x5e
   1ea80:	ldr	r1, [pc, #32]	; 1eaa8 <__assert_fail@plt+0xc280>
   1ea84:	ldr	r3, [pc, #32]	; 1eaac <__assert_fail@plt+0xc284>
   1ea88:	add	r0, pc, r0
   1ea8c:	add	r1, pc, r1
   1ea90:	add	r3, pc, r3
   1ea94:	bl	12828 <__assert_fail@plt>
   1ea98:	andeq	sl, r0, ip, ror lr
   1ea9c:	andeq	sl, r0, r8, lsl #29
   1eaa0:	andeq	sl, r0, r4, ror #28
   1eaa4:	andeq	sl, r0, r8, ror lr
   1eaa8:	andeq	sl, r0, r8, ror #28
   1eaac:	andeq	sl, r0, r4, asr #28
   1eab0:	ldr	r3, [pc, #84]	; 1eb0c <__assert_fail@plt+0xc2e4>
   1eab4:	ldr	r2, [pc, #84]	; 1eb10 <__assert_fail@plt+0xc2e8>
   1eab8:	add	r3, pc, r3
   1eabc:	push	{r4, r5, lr}
   1eac0:	sub	sp, sp, #12
   1eac4:	ldr	r4, [r3, r2]
   1eac8:	mov	r5, r0
   1eacc:	ldr	r3, [r4]
   1ead0:	str	r3, [sp, #4]
   1ead4:	bl	1ea34 <__assert_fail@plt+0xc20c>
   1ead8:	mov	r3, #0
   1eadc:	mov	r1, r5
   1eae0:	mov	r2, r0
   1eae4:	mov	r0, sp
   1eae8:	bl	23808 <p11_dict_direct_equal@@Base+0x10>
   1eaec:	ldr	r2, [sp, #4]
   1eaf0:	ldr	r3, [r4]
   1eaf4:	ldr	r0, [sp]
   1eaf8:	cmp	r2, r3
   1eafc:	bne	1eb08 <__assert_fail@plt+0xc2e0>
   1eb00:	add	sp, sp, #12
   1eb04:	pop	{r4, r5, pc}
   1eb08:	bl	12360 <__stack_chk_fail@plt>
   1eb0c:	andeq	r5, r2, r0, asr #10
   1eb10:	andeq	r0, r0, r4, lsr #4
   1eb14:	push	{r4, r5, r6, lr}
   1eb18:	mov	r4, r1
   1eb1c:	mov	r6, r0
   1eb20:	bl	1ea34 <__assert_fail@plt+0xc20c>
   1eb24:	mov	r5, r0
   1eb28:	mov	r0, r4
   1eb2c:	bl	1ea34 <__assert_fail@plt+0xc20c>
   1eb30:	cmp	r5, r0
   1eb34:	beq	1eb40 <__assert_fail@plt+0xc318>
   1eb38:	mov	r0, #0
   1eb3c:	pop	{r4, r5, r6, pc}
   1eb40:	mov	r0, r6
   1eb44:	mov	r1, r4
   1eb48:	mov	r2, r5
   1eb4c:	bl	12324 <memcmp@plt>
   1eb50:	rsbs	r0, r0, #1
   1eb54:	movcc	r0, #0
   1eb58:	pop	{r4, r5, r6, pc}
   1eb5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb60:	sub	sp, sp, #172	; 0xac
   1eb64:	ldr	ip, [pc, #516]	; 1ed70 <__assert_fail@plt+0xc548>
   1eb68:	subs	r7, r0, #0
   1eb6c:	str	r1, [sp, #12]
   1eb70:	mov	r9, r3
   1eb74:	ldr	r0, [pc, #504]	; 1ed74 <__assert_fail@plt+0xc54c>
   1eb78:	add	ip, pc, ip
   1eb7c:	ldr	r1, [sp, #208]	; 0xd0
   1eb80:	mov	r5, r2
   1eb84:	mov	r3, ip
   1eb88:	str	r1, [sp, #20]
   1eb8c:	ldr	r0, [ip, r0]
   1eb90:	ldr	r3, [r0]
   1eb94:	str	r0, [sp, #16]
   1eb98:	str	r3, [sp, #164]	; 0xa4
   1eb9c:	beq	1ed00 <__assert_fail@plt+0xc4d8>
   1eba0:	ldr	r2, [sp, #12]
   1eba4:	cmp	r2, #0
   1eba8:	beq	1ed48 <__assert_fail@plt+0xc520>
   1ebac:	ldr	r3, [sp, #20]
   1ebb0:	cmp	r3, #0
   1ebb4:	beq	1ed24 <__assert_fail@plt+0xc4fc>
   1ebb8:	ldr	r8, [pc, #440]	; 1ed78 <__assert_fail@plt+0xc550>
   1ebbc:	add	r6, sp, #36	; 0x24
   1ebc0:	add	fp, sp, #28
   1ebc4:	add	sl, sp, #32
   1ebc8:	add	r8, pc, r8
   1ebcc:	mov	r4, #1
   1ebd0:	b	1ebd8 <__assert_fail@plt+0xc3b0>
   1ebd4:	add	r4, r4, #1
   1ebd8:	mov	r1, #128	; 0x80
   1ebdc:	str	r8, [sp]
   1ebe0:	str	r4, [sp, #4]
   1ebe4:	mov	r3, r1
   1ebe8:	mov	r0, r6
   1ebec:	mov	r2, #1
   1ebf0:	bl	12804 <__snprintf_chk@plt>
   1ebf4:	cmp	r0, #0
   1ebf8:	blt	1ecb8 <__assert_fail@plt+0xc490>
   1ebfc:	str	fp, [sp]
   1ec00:	mov	r0, r7
   1ec04:	str	sl, [sp, #4]
   1ec08:	mov	r1, r5
   1ec0c:	mov	r2, r9
   1ec10:	mov	r3, r6
   1ec14:	bl	12708 <asn1_der_decoding_startEnd@plt>
   1ec18:	cmp	r0, #2
   1ec1c:	beq	1ecd4 <__assert_fail@plt+0xc4ac>
   1ec20:	cmp	r0, #0
   1ec24:	bne	1ecdc <__assert_fail@plt+0xc4b4>
   1ec28:	ldr	r3, [sp, #28]
   1ec2c:	ldr	r2, [sp, #32]
   1ec30:	add	r0, r5, r3
   1ec34:	rsb	r1, r3, r2
   1ec38:	add	r1, r1, #1
   1ec3c:	bl	1e9e8 <__assert_fail@plt+0xc1c0>
   1ec40:	cmp	r0, #0
   1ec44:	beq	1ebd4 <__assert_fail@plt+0xc3ac>
   1ec48:	ldr	r0, [sp, #28]
   1ec4c:	ldr	r1, [sp, #12]
   1ec50:	add	r0, r5, r0
   1ec54:	bl	1eb14 <__assert_fail@plt+0xc2ec>
   1ec58:	cmp	r0, #0
   1ec5c:	beq	1ebd4 <__assert_fail@plt+0xc3ac>
   1ec60:	ldr	ip, [pc, #276]	; 1ed7c <__assert_fail@plt+0xc554>
   1ec64:	mov	r1, #128	; 0x80
   1ec68:	str	r4, [sp, #4]
   1ec6c:	mov	r3, r1
   1ec70:	add	ip, pc, ip
   1ec74:	mov	r0, r6
   1ec78:	mov	r2, #1
   1ec7c:	str	ip, [sp]
   1ec80:	bl	12804 <__snprintf_chk@plt>
   1ec84:	cmp	r0, #0
   1ec88:	blt	1ecb8 <__assert_fail@plt+0xc490>
   1ec8c:	mov	r0, r7
   1ec90:	mov	r1, r6
   1ec94:	ldr	r2, [sp, #20]
   1ec98:	bl	1dc60 <__assert_fail@plt+0xb438>
   1ec9c:	ldr	r1, [sp, #16]
   1eca0:	ldr	r2, [sp, #164]	; 0xa4
   1eca4:	ldr	r3, [r1]
   1eca8:	cmp	r2, r3
   1ecac:	bne	1ed6c <__assert_fail@plt+0xc544>
   1ecb0:	add	sp, sp, #172	; 0xac
   1ecb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecb8:	ldr	r0, [pc, #192]	; 1ed80 <__assert_fail@plt+0xc558>
   1ecbc:	ldr	r1, [pc, #192]	; 1ed84 <__assert_fail@plt+0xc55c>
   1ecc0:	add	r0, pc, r0
   1ecc4:	add	r1, pc, r1
   1ecc8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1eccc:	mov	r0, #0
   1ecd0:	b	1ec9c <__assert_fail@plt+0xc474>
   1ecd4:	mov	r0, #0
   1ecd8:	b	1ec9c <__assert_fail@plt+0xc474>
   1ecdc:	ldr	r0, [pc, #164]	; 1ed88 <__assert_fail@plt+0xc560>
   1ece0:	ldr	r1, [pc, #164]	; 1ed8c <__assert_fail@plt+0xc564>
   1ece4:	ldr	r2, [pc, #164]	; 1ed90 <__assert_fail@plt+0xc568>
   1ece8:	add	r0, pc, r0
   1ecec:	add	r1, pc, r1
   1ecf0:	add	r2, pc, r2
   1ecf4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ecf8:	mov	r0, #0
   1ecfc:	b	1ec9c <__assert_fail@plt+0xc474>
   1ed00:	ldr	r0, [pc, #140]	; 1ed94 <__assert_fail@plt+0xc56c>
   1ed04:	ldr	r1, [pc, #140]	; 1ed98 <__assert_fail@plt+0xc570>
   1ed08:	ldr	r2, [pc, #140]	; 1ed9c <__assert_fail@plt+0xc574>
   1ed0c:	add	r0, pc, r0
   1ed10:	add	r1, pc, r1
   1ed14:	add	r2, pc, r2
   1ed18:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ed1c:	mov	r0, r7
   1ed20:	b	1ec9c <__assert_fail@plt+0xc474>
   1ed24:	ldr	r0, [pc, #116]	; 1eda0 <__assert_fail@plt+0xc578>
   1ed28:	ldr	r1, [pc, #116]	; 1eda4 <__assert_fail@plt+0xc57c>
   1ed2c:	ldr	r2, [pc, #116]	; 1eda8 <__assert_fail@plt+0xc580>
   1ed30:	add	r0, pc, r0
   1ed34:	add	r1, pc, r1
   1ed38:	add	r2, pc, r2
   1ed3c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ed40:	ldr	r0, [sp, #20]
   1ed44:	b	1ec9c <__assert_fail@plt+0xc474>
   1ed48:	ldr	r0, [pc, #92]	; 1edac <__assert_fail@plt+0xc584>
   1ed4c:	ldr	r1, [pc, #92]	; 1edb0 <__assert_fail@plt+0xc588>
   1ed50:	ldr	r2, [pc, #92]	; 1edb4 <__assert_fail@plt+0xc58c>
   1ed54:	add	r0, pc, r0
   1ed58:	add	r1, pc, r1
   1ed5c:	add	r2, pc, r2
   1ed60:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ed64:	ldr	r0, [sp, #12]
   1ed68:	b	1ec9c <__assert_fail@plt+0xc474>
   1ed6c:	bl	12360 <__stack_chk_fail@plt>
   1ed70:	andeq	r5, r2, r0, lsl #9
   1ed74:	andeq	r0, r0, r4, lsr #4
   1ed78:	andeq	sl, r0, r8, ror lr
   1ed7c:	strdeq	sl, [r0], -r8
   1ed80:	andeq	r7, r0, r8, lsl #5
   1ed84:	andeq	sl, r0, r0, asr ip
   1ed88:	strheq	r7, [r0], -ip
   1ed8c:	andeq	r7, r0, r8, asr #14
   1ed90:	andeq	sl, r0, r4, lsr #24
   1ed94:	muleq	r0, r8, r0
   1ed98:	andeq	r7, r0, ip, lsr r8
   1ed9c:	andeq	sl, r0, r0, lsl #24
   1eda0:	andeq	r7, r0, r4, ror r0
   1eda4:	strdeq	sl, [r0], -ip
   1eda8:	ldrdeq	sl, [r0], -ip
   1edac:	andeq	r7, r0, r0, asr r0
   1edb0:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1edb4:			; <UNDEFINED> instruction: 0x0000abb8
   1edb8:	ldr	ip, [pc, #316]	; 1eefc <__assert_fail@plt+0xc6d4>
   1edbc:	push	{r4, r5, r6, r7, lr}
   1edc0:	add	ip, pc, ip
   1edc4:	ldr	lr, [pc, #308]	; 1ef00 <__assert_fail@plt+0xc6d8>
   1edc8:	sub	sp, sp, #28
   1edcc:	subs	r7, r0, #0
   1edd0:	mov	r6, r3
   1edd4:	mov	r5, r1
   1edd8:	ldr	r4, [ip, lr]
   1eddc:	ldr	ip, [r4]
   1ede0:	str	ip, [sp, #20]
   1ede4:	beq	1eed0 <__assert_fail@plt+0xc6a8>
   1ede8:	cmp	r1, #0
   1edec:	beq	1eea8 <__assert_fail@plt+0xc680>
   1edf0:	add	r3, sp, #12
   1edf4:	str	r3, [sp]
   1edf8:	add	r3, sp, #16
   1edfc:	str	r3, [sp, #4]
   1ee00:	ldr	r3, [pc, #252]	; 1ef04 <__assert_fail@plt+0xc6dc>
   1ee04:	add	r3, pc, r3
   1ee08:	bl	12708 <asn1_der_decoding_startEnd@plt>
   1ee0c:	subs	r7, r0, #0
   1ee10:	bne	1ee80 <__assert_fail@plt+0xc658>
   1ee14:	ldr	r2, [sp, #16]
   1ee18:	ldr	r1, [sp, #12]
   1ee1c:	cmp	r2, r1
   1ee20:	blt	1ee58 <__assert_fail@plt+0xc630>
   1ee24:	rsb	r2, r1, r2
   1ee28:	mov	r0, r6
   1ee2c:	add	r2, r2, #1
   1ee30:	add	r1, r5, r1
   1ee34:	mov	r3, r7
   1ee38:	bl	1841c <__assert_fail@plt+0x5bf4>
   1ee3c:	mov	r0, #1
   1ee40:	ldr	r2, [sp, #20]
   1ee44:	ldr	r3, [r4]
   1ee48:	cmp	r2, r3
   1ee4c:	bne	1eef8 <__assert_fail@plt+0xc6d0>
   1ee50:	add	sp, sp, #28
   1ee54:	pop	{r4, r5, r6, r7, pc}
   1ee58:	ldr	r2, [pc, #168]	; 1ef08 <__assert_fail@plt+0xc6e0>
   1ee5c:	ldr	r0, [pc, #168]	; 1ef0c <__assert_fail@plt+0xc6e4>
   1ee60:	ldr	r1, [pc, #168]	; 1ef10 <__assert_fail@plt+0xc6e8>
   1ee64:	add	r2, pc, r2
   1ee68:	add	r0, pc, r0
   1ee6c:	add	r2, r2, #24
   1ee70:	add	r1, pc, r1
   1ee74:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1ee78:	mov	r0, r7
   1ee7c:	b	1ee40 <__assert_fail@plt+0xc618>
   1ee80:	ldr	r2, [pc, #140]	; 1ef14 <__assert_fail@plt+0xc6ec>
   1ee84:	ldr	r0, [pc, #140]	; 1ef18 <__assert_fail@plt+0xc6f0>
   1ee88:	ldr	r1, [pc, #140]	; 1ef1c <__assert_fail@plt+0xc6f4>
   1ee8c:	add	r2, pc, r2
   1ee90:	add	r0, pc, r0
   1ee94:	add	r2, r2, #24
   1ee98:	add	r1, pc, r1
   1ee9c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1eea0:	mov	r0, #0
   1eea4:	b	1ee40 <__assert_fail@plt+0xc618>
   1eea8:	ldr	r2, [pc, #112]	; 1ef20 <__assert_fail@plt+0xc6f8>
   1eeac:	ldr	r0, [pc, #112]	; 1ef24 <__assert_fail@plt+0xc6fc>
   1eeb0:	ldr	r1, [pc, #112]	; 1ef28 <__assert_fail@plt+0xc700>
   1eeb4:	add	r2, pc, r2
   1eeb8:	add	r0, pc, r0
   1eebc:	add	r2, r2, #24
   1eec0:	add	r1, pc, r1
   1eec4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1eec8:	mov	r0, r5
   1eecc:	b	1ee40 <__assert_fail@plt+0xc618>
   1eed0:	ldr	r2, [pc, #84]	; 1ef2c <__assert_fail@plt+0xc704>
   1eed4:	ldr	r0, [pc, #84]	; 1ef30 <__assert_fail@plt+0xc708>
   1eed8:	ldr	r1, [pc, #84]	; 1ef34 <__assert_fail@plt+0xc70c>
   1eedc:	add	r2, pc, r2
   1eee0:	add	r0, pc, r0
   1eee4:	add	r2, r2, #24
   1eee8:	add	r1, pc, r1
   1eeec:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1eef0:	mov	r0, r7
   1eef4:	b	1ee40 <__assert_fail@plt+0xc618>
   1eef8:	bl	12360 <__stack_chk_fail@plt>
   1eefc:	andeq	r5, r2, r8, lsr r2
   1ef00:	andeq	r0, r0, r4, lsr #4
   1ef04:	ldrdeq	r7, [r0], -ip
   1ef08:			; <UNDEFINED> instruction: 0x0000aab0
   1ef0c:	andeq	r6, r0, ip, lsr pc
   1ef10:	andeq	sl, r0, r0, lsr #24
   1ef14:	andeq	sl, r0, r8, lsl #21
   1ef18:	andeq	r6, r0, r4, lsl pc
   1ef1c:	muleq	r0, ip, r5
   1ef20:	andeq	sl, r0, r0, ror #20
   1ef24:	andeq	r6, r0, ip, ror #29
   1ef28:	andeq	r7, r0, r8, lsr #11
   1ef2c:	andeq	sl, r0, r8, lsr sl
   1ef30:	andeq	r6, r0, r4, asr #29
   1ef34:	andeq	r7, r0, r4, ror #12
   1ef38:	ldr	ip, [pc, #216]	; 1f018 <__assert_fail@plt+0xc7f0>
   1ef3c:	push	{r4, r5, lr}
   1ef40:	add	ip, pc, ip
   1ef44:	ldr	lr, [pc, #208]	; 1f01c <__assert_fail@plt+0xc7f4>
   1ef48:	sub	sp, sp, #20
   1ef4c:	subs	r5, r3, #0
   1ef50:	mov	r3, r2
   1ef54:	ldr	r4, [ip, lr]
   1ef58:	ldr	ip, [r4]
   1ef5c:	str	ip, [sp, #12]
   1ef60:	beq	1efc4 <__assert_fail@plt+0xc79c>
   1ef64:	mov	r2, r1
   1ef68:	ldr	r1, [pc, #176]	; 1f020 <__assert_fail@plt+0xc7f8>
   1ef6c:	mov	ip, #0
   1ef70:	str	ip, [sp]
   1ef74:	add	r1, pc, r1
   1ef78:	bl	1d95c <__assert_fail@plt+0xb134>
   1ef7c:	cmp	r0, #0
   1ef80:	str	r0, [sp, #8]
   1ef84:	beq	1efac <__assert_fail@plt+0xc784>
   1ef88:	ldr	r1, [pc, #148]	; 1f024 <__assert_fail@plt+0xc7fc>
   1ef8c:	mov	r2, r5
   1ef90:	add	r1, pc, r1
   1ef94:	bl	1dc60 <__assert_fail@plt+0xb438>
   1ef98:	subs	r5, r0, #0
   1ef9c:	beq	1efec <__assert_fail@plt+0xc7c4>
   1efa0:	add	r0, sp, #8
   1efa4:	bl	1278c <asn1_delete_structure@plt>
   1efa8:	mov	r0, r5
   1efac:	ldr	ip, [sp, #12]
   1efb0:	ldr	r3, [r4]
   1efb4:	cmp	ip, r3
   1efb8:	bne	1f014 <__assert_fail@plt+0xc7ec>
   1efbc:	add	sp, sp, #20
   1efc0:	pop	{r4, r5, pc}
   1efc4:	ldr	r2, [pc, #92]	; 1f028 <__assert_fail@plt+0xc800>
   1efc8:	ldr	r0, [pc, #92]	; 1f02c <__assert_fail@plt+0xc804>
   1efcc:	ldr	r1, [pc, #92]	; 1f030 <__assert_fail@plt+0xc808>
   1efd0:	add	r2, pc, r2
   1efd4:	add	r0, pc, r0
   1efd8:	add	r2, r2, #60	; 0x3c
   1efdc:	add	r1, pc, r1
   1efe0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1efe4:	mov	r0, r5
   1efe8:	b	1efac <__assert_fail@plt+0xc784>
   1efec:	ldr	r2, [pc, #64]	; 1f034 <__assert_fail@plt+0xc80c>
   1eff0:	ldr	r0, [pc, #64]	; 1f038 <__assert_fail@plt+0xc810>
   1eff4:	ldr	r1, [pc, #64]	; 1f03c <__assert_fail@plt+0xc814>
   1eff8:	add	r2, pc, r2
   1effc:	add	r0, pc, r0
   1f000:	add	r2, r2, #60	; 0x3c
   1f004:	add	r1, pc, r1
   1f008:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f00c:	mov	r0, r5
   1f010:	b	1efac <__assert_fail@plt+0xc784>
   1f014:	bl	12360 <__stack_chk_fail@plt>
   1f018:	strheq	r5, [r2], -r8
   1f01c:	andeq	r0, r0, r4, lsr #4
   1f020:	andeq	sl, r0, r0, asr #22
   1f024:	ldrdeq	pc, [r0], -r4
   1f028:	andeq	sl, r0, r4, asr #18
   1f02c:	ldrdeq	r6, [r0], -r0
   1f030:	andeq	sl, r0, r4, asr #21
   1f034:	andeq	sl, r0, ip, lsl r9
   1f038:	andeq	r6, r0, r8, lsr #27
   1f03c:	andeq	sl, r0, ip, asr #21
   1f040:	ldr	ip, [pc, #276]	; 1f15c <__assert_fail@plt+0xc934>
   1f044:	push	{r4, r5, r6, r7, lr}
   1f048:	add	ip, pc, ip
   1f04c:	ldr	lr, [pc, #268]	; 1f160 <__assert_fail@plt+0xc938>
   1f050:	sub	sp, sp, #36	; 0x24
   1f054:	subs	r6, r3, #0
   1f058:	mov	r3, r2
   1f05c:	ldr	r4, [ip, lr]
   1f060:	ldr	ip, [r4]
   1f064:	str	ip, [sp, #28]
   1f068:	beq	1f130 <__assert_fail@plt+0xc908>
   1f06c:	mov	r2, r1
   1f070:	ldr	r1, [pc, #236]	; 1f164 <__assert_fail@plt+0xc93c>
   1f074:	mov	r5, #0
   1f078:	str	r5, [sp]
   1f07c:	add	r1, pc, r1
   1f080:	bl	1d95c <__assert_fail@plt+0xb134>
   1f084:	cmp	r0, r5
   1f088:	str	r0, [sp, #12]
   1f08c:	moveq	r0, r0
   1f090:	beq	1f0f0 <__assert_fail@plt+0xc8c8>
   1f094:	add	r7, sp, #20
   1f098:	ldr	r1, [pc, #200]	; 1f168 <__assert_fail@plt+0xc940>
   1f09c:	add	r3, sp, #16
   1f0a0:	mov	ip, #8
   1f0a4:	add	r1, pc, r1
   1f0a8:	mov	r2, r7
   1f0ac:	str	ip, [sp, #16]
   1f0b0:	bl	12264 <asn1_read_value@plt>
   1f0b4:	cmp	r0, #2
   1f0b8:	strbeq	r5, [r6]
   1f0bc:	beq	1f0e4 <__assert_fail@plt+0xc8bc>
   1f0c0:	cmp	r0, #0
   1f0c4:	bne	1f108 <__assert_fail@plt+0xc8e0>
   1f0c8:	ldr	r1, [pc, #156]	; 1f16c <__assert_fail@plt+0xc944>
   1f0cc:	mov	r0, r7
   1f0d0:	add	r1, pc, r1
   1f0d4:	bl	1227c <strcmp@plt>
   1f0d8:	rsbs	r0, r0, #1
   1f0dc:	movcc	r0, #0
   1f0e0:	strb	r0, [r6]
   1f0e4:	add	r0, sp, #12
   1f0e8:	bl	1278c <asn1_delete_structure@plt>
   1f0ec:	mov	r0, #1
   1f0f0:	ldr	r1, [sp, #28]
   1f0f4:	ldr	r3, [r4]
   1f0f8:	cmp	r1, r3
   1f0fc:	bne	1f158 <__assert_fail@plt+0xc930>
   1f100:	add	sp, sp, #36	; 0x24
   1f104:	pop	{r4, r5, r6, r7, pc}
   1f108:	ldr	r2, [pc, #96]	; 1f170 <__assert_fail@plt+0xc948>
   1f10c:	ldr	r0, [pc, #96]	; 1f174 <__assert_fail@plt+0xc94c>
   1f110:	ldr	r1, [pc, #96]	; 1f178 <__assert_fail@plt+0xc950>
   1f114:	add	r2, pc, r2
   1f118:	add	r0, pc, r0
   1f11c:	add	r2, r2, #100	; 0x64
   1f120:	add	r1, pc, r1
   1f124:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f128:	mov	r0, r5
   1f12c:	b	1f0f0 <__assert_fail@plt+0xc8c8>
   1f130:	ldr	r2, [pc, #68]	; 1f17c <__assert_fail@plt+0xc954>
   1f134:	ldr	r0, [pc, #68]	; 1f180 <__assert_fail@plt+0xc958>
   1f138:	ldr	r1, [pc, #68]	; 1f184 <__assert_fail@plt+0xc95c>
   1f13c:	add	r2, pc, r2
   1f140:	add	r0, pc, r0
   1f144:	add	r2, r2, #100	; 0x64
   1f148:	add	r1, pc, r1
   1f14c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f150:	mov	r0, r6
   1f154:	b	1f0f0 <__assert_fail@plt+0xc8c8>
   1f158:	bl	12360 <__stack_chk_fail@plt>
   1f15c:			; <UNDEFINED> instruction: 0x00024fb0
   1f160:	andeq	r0, r0, r4, lsr #4
   1f164:	andeq	sl, r0, r4, ror sl
   1f168:	strdeq	r9, [r0], -r8
   1f16c:	andeq	r7, r0, r4, lsl #7
   1f170:	andeq	sl, r0, r0, lsl #16
   1f174:	andeq	r6, r0, ip, lsl #25
   1f178:	andeq	r7, r0, r4, lsl r3
   1f17c:	ldrdeq	sl, [r0], -r8
   1f180:	andeq	r6, r0, r4, ror #24
   1f184:	muleq	r0, r8, r9
   1f188:	ldr	ip, [pc, #236]	; 1f27c <__assert_fail@plt+0xca54>
   1f18c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f190:	add	ip, pc, ip
   1f194:	ldr	lr, [pc, #228]	; 1f280 <__assert_fail@plt+0xca58>
   1f198:	sub	sp, sp, #156	; 0x9c
   1f19c:	add	r5, sp, #20
   1f1a0:	mov	r9, r3
   1f1a4:	mov	r8, r0
   1f1a8:	mov	r7, r1
   1f1ac:	ldr	r4, [ip, lr]
   1f1b0:	mov	r6, r2
   1f1b4:	mov	r1, #0
   1f1b8:	mov	r2, #128	; 0x80
   1f1bc:	mov	r0, r5
   1f1c0:	ldr	r3, [r4]
   1f1c4:	str	r3, [sp, #148]	; 0x94
   1f1c8:	bl	125e8 <memset@plt>
   1f1cc:	ldr	r1, [pc, #176]	; 1f284 <__assert_fail@plt+0xca5c>
   1f1d0:	mov	r0, r8
   1f1d4:	str	r5, [sp]
   1f1d8:	mov	r2, r7
   1f1dc:	mov	r3, r6
   1f1e0:	add	r1, pc, r1
   1f1e4:	bl	1d95c <__assert_fail@plt+0xb134>
   1f1e8:	cmp	r0, #0
   1f1ec:	str	r0, [sp, #8]
   1f1f0:	moveq	r0, r0
   1f1f4:	beq	1f238 <__assert_fail@plt+0xca10>
   1f1f8:	ldr	r1, [pc, #136]	; 1f288 <__assert_fail@plt+0xca60>
   1f1fc:	add	r2, sp, #16
   1f200:	add	r3, sp, #12
   1f204:	mov	ip, #2
   1f208:	add	r1, pc, r1
   1f20c:	str	ip, [sp, #12]
   1f210:	bl	12264 <asn1_read_value@plt>
   1f214:	cmp	r0, #0
   1f218:	bne	1f250 <__assert_fail@plt+0xca28>
   1f21c:	ldrb	r2, [sp, #17]
   1f220:	add	r0, sp, #8
   1f224:	ldrb	r3, [sp, #16]
   1f228:	orr	r3, r3, r2, lsl #8
   1f22c:	str	r3, [r9]
   1f230:	bl	1278c <asn1_delete_structure@plt>
   1f234:	mov	r0, #1
   1f238:	ldr	r1, [sp, #148]	; 0x94
   1f23c:	ldr	r3, [r4]
   1f240:	cmp	r1, r3
   1f244:	bne	1f278 <__assert_fail@plt+0xca50>
   1f248:	add	sp, sp, #156	; 0x9c
   1f24c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f250:	ldr	r2, [pc, #52]	; 1f28c <__assert_fail@plt+0xca64>
   1f254:	ldr	r0, [pc, #52]	; 1f290 <__assert_fail@plt+0xca68>
   1f258:	ldr	r1, [pc, #52]	; 1f294 <__assert_fail@plt+0xca6c>
   1f25c:	add	r2, pc, r2
   1f260:	add	r0, pc, r0
   1f264:	add	r2, r2, #136	; 0x88
   1f268:	add	r1, pc, r1
   1f26c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f270:	mov	r0, #0
   1f274:	b	1f238 <__assert_fail@plt+0xca10>
   1f278:	bl	12360 <__stack_chk_fail@plt>
   1f27c:	andeq	r4, r2, r8, ror #28
   1f280:	andeq	r0, r0, r4, lsr #4
   1f284:	andeq	sl, r0, r8, lsr #18
   1f288:	andeq	pc, r0, ip, asr r2	; <UNPREDICTABLE>
   1f28c:			; <UNDEFINED> instruction: 0x0000a6b8
   1f290:	andeq	r6, r0, r4, asr #22
   1f294:	andeq	r7, r0, ip, asr #3
   1f298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f29c:	sub	sp, sp, #156	; 0x9c
   1f2a0:	ldr	r5, [pc, #300]	; 1f3d4 <__assert_fail@plt+0xcbac>
   1f2a4:	mov	ip, #0
   1f2a8:	ldr	lr, [pc, #296]	; 1f3d8 <__assert_fail@plt+0xcbb0>
   1f2ac:	mov	r3, r2
   1f2b0:	add	r5, pc, r5
   1f2b4:	mov	r2, r1
   1f2b8:	ldr	r1, [pc, #284]	; 1f3dc <__assert_fail@plt+0xcbb4>
   1f2bc:	ldr	fp, [r5, lr]
   1f2c0:	str	ip, [sp]
   1f2c4:	add	r1, pc, r1
   1f2c8:	ldr	ip, [fp]
   1f2cc:	str	ip, [sp, #148]	; 0x94
   1f2d0:	bl	1d95c <__assert_fail@plt+0xb134>
   1f2d4:	cmp	r0, #0
   1f2d8:	str	r0, [sp, #12]
   1f2dc:	beq	1f3a8 <__assert_fail@plt+0xcb80>
   1f2e0:	ldr	r3, [pc, #248]	; 1f3e0 <__assert_fail@plt+0xcbb8>
   1f2e4:	add	r6, sp, #20
   1f2e8:	ldr	r9, [pc, #244]	; 1f3e4 <__assert_fail@plt+0xcbbc>
   1f2ec:	add	r8, sp, #16
   1f2f0:	ldr	r7, [pc, #240]	; 1f3e8 <__assert_fail@plt+0xcbc0>
   1f2f4:	mov	r4, #1
   1f2f8:	ldr	r0, [r5, r3]
   1f2fc:	add	r9, pc, r9
   1f300:	bl	21c90 <__assert_fail@plt+0xf468>
   1f304:	add	r7, pc, r7
   1f308:	add	r9, r9, #200	; 0xc8
   1f30c:	mov	sl, r0
   1f310:	b	1f320 <__assert_fail@plt+0xcaf8>
   1f314:	mov	r0, r5
   1f318:	bl	122c4 <free@plt>
   1f31c:	add	r4, r4, #1
   1f320:	mov	r1, #128	; 0x80
   1f324:	str	r7, [sp]
   1f328:	str	r4, [sp, #4]
   1f32c:	mov	r3, r1
   1f330:	mov	r0, r6
   1f334:	mov	r2, #1
   1f338:	bl	12804 <__snprintf_chk@plt>
   1f33c:	cmp	r0, #0
   1f340:	blt	1f38c <__assert_fail@plt+0xcb64>
   1f344:	ldr	r0, [sp, #12]
   1f348:	mov	r1, r6
   1f34c:	mov	r2, r8
   1f350:	bl	1dc60 <__assert_fail@plt+0xb438>
   1f354:	subs	r5, r0, #0
   1f358:	beq	1f3c0 <__assert_fail@plt+0xcb98>
   1f35c:	ldr	r3, [sp, #16]
   1f360:	mov	r2, #0
   1f364:	mov	r1, r9
   1f368:	strb	r2, [r5, r3]
   1f36c:	bl	1227c <strcmp@plt>
   1f370:	cmp	r0, #0
   1f374:	beq	1f314 <__assert_fail@plt+0xcaec>
   1f378:	mov	r1, r5
   1f37c:	mov	r0, sl
   1f380:	bl	21b4c <__assert_fail@plt+0xf324>
   1f384:	cmp	r0, #0
   1f388:	bne	1f31c <__assert_fail@plt+0xcaf4>
   1f38c:	ldr	r1, [pc, #88]	; 1f3ec <__assert_fail@plt+0xcbc4>
   1f390:	ldr	r0, [pc, #88]	; 1f3f0 <__assert_fail@plt+0xcbc8>
   1f394:	add	r1, pc, r1
   1f398:	add	r0, pc, r0
   1f39c:	add	r1, r1, #164	; 0xa4
   1f3a0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f3a4:	mov	r0, #0
   1f3a8:	ldr	r2, [sp, #148]	; 0x94
   1f3ac:	ldr	r3, [fp]
   1f3b0:	cmp	r2, r3
   1f3b4:	bne	1f3d0 <__assert_fail@plt+0xcba8>
   1f3b8:	add	sp, sp, #156	; 0x9c
   1f3bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3c0:	add	r0, sp, #12
   1f3c4:	bl	1278c <asn1_delete_structure@plt>
   1f3c8:	mov	r0, sl
   1f3cc:	b	1f3a8 <__assert_fail@plt+0xcb80>
   1f3d0:	bl	12360 <__stack_chk_fail@plt>
   1f3d4:	andeq	r4, r2, r8, asr #26
   1f3d8:	andeq	r0, r0, r4, lsr #4
   1f3dc:			; <UNDEFINED> instruction: 0x000071b0
   1f3e0:	andeq	r0, r0, r0, lsr #4
   1f3e4:	andeq	sl, r0, r8, lsl r6
   1f3e8:	andeq	sl, r0, r4, lsl r8
   1f3ec:	andeq	sl, r0, r0, lsl #11
   1f3f0:			; <UNDEFINED> instruction: 0x00006bb0
   1f3f4:	ldr	ip, [pc, #448]	; 1f5bc <__assert_fail@plt+0xcd94>
   1f3f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f3fc:	add	ip, pc, ip
   1f400:	ldr	lr, [pc, #440]	; 1f5c0 <__assert_fail@plt+0xcd98>
   1f404:	sub	sp, sp, #32
   1f408:	mov	r4, r2
   1f40c:	mov	r9, r3
   1f410:	add	r2, sp, #15
   1f414:	add	r3, sp, #20
   1f418:	ldr	r5, [ip, lr]
   1f41c:	add	ip, sp, #16
   1f420:	str	ip, [sp]
   1f424:	mov	r7, r0
   1f428:	mov	r6, r1
   1f42c:	ldr	ip, [r5]
   1f430:	str	ip, [sp, #28]
   1f434:	bl	126cc <asn1_get_tag_der@plt>
   1f438:	subs	sl, r0, #0
   1f43c:	bne	1f518 <__assert_fail@plt+0xccf0>
   1f440:	ldr	r1, [sp, #20]
   1f444:	add	r2, sp, #24
   1f448:	add	r0, r7, r1
   1f44c:	rsb	r1, r1, r6
   1f450:	bl	125ac <asn1_get_length_der@plt>
   1f454:	subs	r8, r0, #0
   1f458:	blt	1f590 <__assert_fail@plt+0xcd68>
   1f45c:	ldr	r3, [sp, #24]
   1f460:	ldr	r0, [sp, #20]
   1f464:	add	r0, r0, r3
   1f468:	add	r3, r8, r0
   1f46c:	cmp	r3, r6
   1f470:	bne	1f540 <__assert_fail@plt+0xcd18>
   1f474:	ldr	r3, [sp, #16]
   1f478:	cmp	r4, #0
   1f47c:	strbne	sl, [r4]
   1f480:	sub	r3, r3, #12
   1f484:	cmp	r3, #18
   1f488:	bhi	1f4b8 <__assert_fail@plt+0xcc90>
   1f48c:	mov	r1, #1
   1f490:	movw	r2, #1473	; 0x5c1
   1f494:	lsl	r3, r1, r3
   1f498:	add	r7, r7, r0
   1f49c:	and	r2, r3, r2
   1f4a0:	cmp	r2, #0
   1f4a4:	bne	1f4ec <__assert_fail@plt+0xccc4>
   1f4a8:	tst	r3, #262144	; 0x40000
   1f4ac:	bne	1f568 <__assert_fail@plt+0xcd40>
   1f4b0:	tst	r3, #65536	; 0x10000
   1f4b4:	bne	1f57c <__assert_fail@plt+0xcd54>
   1f4b8:	cmp	r4, #0
   1f4bc:	beq	1f4e4 <__assert_fail@plt+0xccbc>
   1f4c0:	mov	r0, #0
   1f4c4:	mov	r3, #1
   1f4c8:	strb	r3, [r4]
   1f4cc:	ldr	r2, [sp, #28]
   1f4d0:	ldr	r3, [r5]
   1f4d4:	cmp	r2, r3
   1f4d8:	bne	1f5b8 <__assert_fail@plt+0xcd90>
   1f4dc:	add	sp, sp, #32
   1f4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f4e4:	mov	r0, #0
   1f4e8:	b	1f4cc <__assert_fail@plt+0xcca4>
   1f4ec:	mov	r0, r7
   1f4f0:	mov	r1, r8
   1f4f4:	bl	2029c <__assert_fail@plt+0xda74>
   1f4f8:	cmp	r0, #0
   1f4fc:	beq	1f4e4 <__assert_fail@plt+0xccbc>
   1f500:	cmp	r9, #0
   1f504:	mov	r0, r7
   1f508:	strne	r8, [r9]
   1f50c:	mov	r1, r8
   1f510:	bl	224d4 <strndup@@Base>
   1f514:	b	1f4cc <__assert_fail@plt+0xcca4>
   1f518:	ldr	r2, [pc, #164]	; 1f5c4 <__assert_fail@plt+0xcd9c>
   1f51c:	ldr	r0, [pc, #164]	; 1f5c8 <__assert_fail@plt+0xcda0>
   1f520:	ldr	r1, [pc, #164]	; 1f5cc <__assert_fail@plt+0xcda4>
   1f524:	add	r2, pc, r2
   1f528:	add	r0, pc, r0
   1f52c:	add	r2, r2, #228	; 0xe4
   1f530:	add	r1, pc, r1
   1f534:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f538:	mov	r0, #0
   1f53c:	b	1f4cc <__assert_fail@plt+0xcca4>
   1f540:	ldr	r2, [pc, #136]	; 1f5d0 <__assert_fail@plt+0xcda8>
   1f544:	ldr	r0, [pc, #136]	; 1f5d4 <__assert_fail@plt+0xcdac>
   1f548:	ldr	r1, [pc, #136]	; 1f5d8 <__assert_fail@plt+0xcdb0>
   1f54c:	add	r2, pc, r2
   1f550:	add	r0, pc, r0
   1f554:	add	r2, r2, #228	; 0xe4
   1f558:	add	r1, pc, r1
   1f55c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f560:	mov	r0, sl
   1f564:	b	1f4cc <__assert_fail@plt+0xcca4>
   1f568:	mov	r0, r7
   1f56c:	mov	r1, r8
   1f570:	mov	r2, r9
   1f574:	bl	20448 <__assert_fail@plt+0xdc20>
   1f578:	b	1f4cc <__assert_fail@plt+0xcca4>
   1f57c:	mov	r0, r7
   1f580:	mov	r1, r8
   1f584:	mov	r2, r9
   1f588:	bl	204a8 <__assert_fail@plt+0xdc80>
   1f58c:	b	1f4cc <__assert_fail@plt+0xcca4>
   1f590:	ldr	r2, [pc, #68]	; 1f5dc <__assert_fail@plt+0xcdb4>
   1f594:	ldr	r0, [pc, #68]	; 1f5e0 <__assert_fail@plt+0xcdb8>
   1f598:	ldr	r1, [pc, #68]	; 1f5e4 <__assert_fail@plt+0xcdbc>
   1f59c:	add	r2, pc, r2
   1f5a0:	add	r0, pc, r0
   1f5a4:	add	r2, r2, #228	; 0xe4
   1f5a8:	add	r1, pc, r1
   1f5ac:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f5b0:	mov	r0, sl
   1f5b4:	b	1f4cc <__assert_fail@plt+0xcca4>
   1f5b8:	bl	12360 <__stack_chk_fail@plt>
   1f5bc:	strdeq	r4, [r2], -ip
   1f5c0:	andeq	r0, r0, r4, lsr #4
   1f5c4:	strdeq	sl, [r0], -r0
   1f5c8:	andeq	r6, r0, ip, ror r8
   1f5cc:	andeq	r6, r0, r4, lsl #30
   1f5d0:	andeq	sl, r0, r8, asr #7
   1f5d4:	andeq	r6, r0, r4, asr r8
   1f5d8:	ldrdeq	sl, [r0], -r4
   1f5dc:	andeq	sl, r0, r8, ror r3
   1f5e0:	andeq	r6, r0, r4, lsl #16
   1f5e4:	andeq	sl, r0, r4, ror r5
   1f5e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5ec:	sub	sp, sp, #196	; 0xc4
   1f5f0:	ldr	lr, [pc, #540]	; 1f814 <__assert_fail@plt+0xcfec>
   1f5f4:	add	r5, sp, #60	; 0x3c
   1f5f8:	ldr	r4, [sp, #232]	; 0xe8
   1f5fc:	add	fp, sp, #52	; 0x34
   1f600:	ldr	ip, [pc, #528]	; 1f818 <__assert_fail@plt+0xcff0>
   1f604:	add	lr, pc, lr
   1f608:	add	sl, sp, #56	; 0x38
   1f60c:	mov	r6, r1
   1f610:	str	r4, [sp, #44]	; 0x2c
   1f614:	mov	r7, r2
   1f618:	ldr	r4, [pc, #508]	; 1f81c <__assert_fail@plt+0xcff4>
   1f61c:	mov	r8, #1
   1f620:	mov	r9, r0
   1f624:	mov	r0, lr
   1f628:	add	r4, pc, r4
   1f62c:	str	r4, [sp, #28]
   1f630:	ldr	ip, [lr, ip]
   1f634:	ldr	r4, [pc, #484]	; 1f820 <__assert_fail@plt+0xcff8>
   1f638:	str	r3, [sp, #24]
   1f63c:	ldr	r3, [ip]
   1f640:	add	r4, pc, r4
   1f644:	str	r4, [sp, #32]
   1f648:	ldr	r4, [pc, #468]	; 1f824 <__assert_fail@plt+0xcffc>
   1f64c:	str	ip, [sp, #40]	; 0x28
   1f650:	add	r4, pc, r4
   1f654:	str	r3, [sp, #188]	; 0xbc
   1f658:	str	r4, [sp, #36]	; 0x24
   1f65c:	mov	r4, #1
   1f660:	b	1f668 <__assert_fail@plt+0xce40>
   1f664:	add	r4, r4, #1
   1f668:	ldr	r2, [sp, #36]	; 0x24
   1f66c:	cmp	r6, #0
   1f670:	ldr	ip, [sp, #28]
   1f674:	mov	r1, #128	; 0x80
   1f678:	mov	r3, r1
   1f67c:	str	r6, [sp, #4]
   1f680:	str	r2, [sp]
   1f684:	mov	r0, r5
   1f688:	ldr	r2, [sp, #32]
   1f68c:	str	r8, [sp, #12]
   1f690:	str	r4, [sp, #16]
   1f694:	movne	ip, r2
   1f698:	mov	r2, #1
   1f69c:	str	ip, [sp, #8]
   1f6a0:	bl	12804 <__snprintf_chk@plt>
   1f6a4:	str	fp, [sp]
   1f6a8:	str	sl, [sp, #4]
   1f6ac:	mov	r0, r9
   1f6b0:	mov	r1, r7
   1f6b4:	ldr	r2, [sp, #24]
   1f6b8:	mov	r3, r5
   1f6bc:	bl	12708 <asn1_der_decoding_startEnd@plt>
   1f6c0:	cmp	r0, #2
   1f6c4:	beq	1f79c <__assert_fail@plt+0xcf74>
   1f6c8:	cmp	r0, #0
   1f6cc:	bne	1f7ac <__assert_fail@plt+0xcf84>
   1f6d0:	ldr	r3, [sp, #52]	; 0x34
   1f6d4:	ldr	r2, [sp, #56]	; 0x38
   1f6d8:	add	r0, r7, r3
   1f6dc:	rsb	r1, r3, r2
   1f6e0:	add	r1, r1, #1
   1f6e4:	bl	1e9e8 <__assert_fail@plt+0xc1c0>
   1f6e8:	cmp	r0, #0
   1f6ec:	beq	1f664 <__assert_fail@plt+0xce3c>
   1f6f0:	ldr	r0, [sp, #52]	; 0x34
   1f6f4:	ldr	r1, [sp, #44]	; 0x2c
   1f6f8:	add	r0, r7, r0
   1f6fc:	bl	1eb14 <__assert_fail@plt+0xc2ec>
   1f700:	cmp	r0, #0
   1f704:	beq	1f664 <__assert_fail@plt+0xce3c>
   1f708:	cmp	r6, #0
   1f70c:	beq	1f7d4 <__assert_fail@plt+0xcfac>
   1f710:	ldr	r2, [pc, #272]	; 1f828 <__assert_fail@plt+0xd000>
   1f714:	add	r2, pc, r2
   1f718:	ldr	ip, [pc, #268]	; 1f82c <__assert_fail@plt+0xd004>
   1f71c:	mov	r1, #128	; 0x80
   1f720:	mov	r3, r1
   1f724:	str	r2, [sp, #8]
   1f728:	add	ip, pc, ip
   1f72c:	mov	r2, #1
   1f730:	str	r4, [sp, #16]
   1f734:	mov	r0, r5
   1f738:	str	ip, [sp]
   1f73c:	str	r6, [sp, #4]
   1f740:	str	r8, [sp, #12]
   1f744:	bl	12804 <__snprintf_chk@plt>
   1f748:	mov	r0, r9
   1f74c:	mov	r1, r5
   1f750:	add	r2, sp, #48	; 0x30
   1f754:	bl	1dc60 <__assert_fail@plt+0xb438>
   1f758:	subs	r4, r0, #0
   1f75c:	beq	1f7e0 <__assert_fail@plt+0xcfb8>
   1f760:	mov	r2, #0
   1f764:	ldr	r1, [sp, #48]	; 0x30
   1f768:	mov	r3, r2
   1f76c:	bl	1f3f4 <__assert_fail@plt+0xcbcc>
   1f770:	mov	r5, r0
   1f774:	mov	r0, r4
   1f778:	bl	122c4 <free@plt>
   1f77c:	mov	r0, r5
   1f780:	ldr	r4, [sp, #40]	; 0x28
   1f784:	ldr	r2, [sp, #188]	; 0xbc
   1f788:	ldr	r3, [r4]
   1f78c:	cmp	r2, r3
   1f790:	bne	1f810 <__assert_fail@plt+0xcfe8>
   1f794:	add	sp, sp, #196	; 0xc4
   1f798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f79c:	cmp	r4, #1
   1f7a0:	beq	1f808 <__assert_fail@plt+0xcfe0>
   1f7a4:	add	r8, r8, #1
   1f7a8:	b	1f65c <__assert_fail@plt+0xce34>
   1f7ac:	ldr	r2, [pc, #124]	; 1f830 <__assert_fail@plt+0xd008>
   1f7b0:	ldr	r0, [pc, #124]	; 1f834 <__assert_fail@plt+0xd00c>
   1f7b4:	ldr	r1, [pc, #124]	; 1f838 <__assert_fail@plt+0xd010>
   1f7b8:	add	r2, pc, r2
   1f7bc:	add	r0, pc, r0
   1f7c0:	add	r2, r2, #260	; 0x104
   1f7c4:	add	r1, pc, r1
   1f7c8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f7cc:	mov	r0, #0
   1f7d0:	b	1f780 <__assert_fail@plt+0xcf58>
   1f7d4:	ldr	r2, [pc, #96]	; 1f83c <__assert_fail@plt+0xd014>
   1f7d8:	add	r2, pc, r2
   1f7dc:	b	1f718 <__assert_fail@plt+0xcef0>
   1f7e0:	ldr	r2, [pc, #88]	; 1f840 <__assert_fail@plt+0xd018>
   1f7e4:	ldr	r0, [pc, #88]	; 1f844 <__assert_fail@plt+0xd01c>
   1f7e8:	ldr	r1, [pc, #88]	; 1f848 <__assert_fail@plt+0xd020>
   1f7ec:	add	r2, pc, r2
   1f7f0:	add	r0, pc, r0
   1f7f4:	add	r2, r2, #260	; 0x104
   1f7f8:	add	r1, pc, r1
   1f7fc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1f800:	mov	r0, r4
   1f804:	b	1f780 <__assert_fail@plt+0xcf58>
   1f808:	mov	r0, #0
   1f80c:	b	1f780 <__assert_fail@plt+0xcf58>
   1f810:	bl	12360 <__stack_chk_fail@plt>
   1f814:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1f818:	andeq	r0, r0, r4, lsr #4
   1f81c:	andeq	lr, r0, ip, lsr lr
   1f820:	andeq	r6, r0, r8, lsl r8
   1f824:	andeq	sl, r0, r8, lsl #10
   1f828:	andeq	r6, r0, r4, asr #14
   1f82c:	andeq	sl, r0, r0, asr r4
   1f830:	andeq	sl, r0, ip, asr r1
   1f834:	andeq	r6, r0, r8, ror #11
   1f838:	andeq	r6, r0, r0, ror ip
   1f83c:	andeq	lr, r0, ip, lsl #25
   1f840:	andeq	sl, r0, r8, lsr #2
   1f844:			; <UNDEFINED> instruction: 0x000065b4
   1f848:			; <UNDEFINED> instruction: 0x00006cb4
   1f84c:	ldr	ip, [pc, #140]	; 1f8e0 <__assert_fail@plt+0xd0b8>
   1f850:	push	{r4, r5, r6, r7, r8, lr}
   1f854:	mov	r6, r1
   1f858:	ldr	r1, [pc, #132]	; 1f8e4 <__assert_fail@plt+0xd0bc>
   1f85c:	add	ip, pc, ip
   1f860:	sub	sp, sp, #16
   1f864:	mov	r7, #0
   1f868:	mov	r5, r2
   1f86c:	mov	r8, r3
   1f870:	ldr	r4, [ip, r1]
   1f874:	mov	r2, r6
   1f878:	str	r7, [sp]
   1f87c:	mov	r3, r5
   1f880:	ldr	r1, [pc, #96]	; 1f8e8 <__assert_fail@plt+0xd0c0>
   1f884:	ldr	ip, [r4]
   1f888:	add	r1, pc, r1
   1f88c:	str	ip, [sp, #12]
   1f890:	bl	1d95c <__assert_fail@plt+0xb134>
   1f894:	cmp	r0, r7
   1f898:	str	r0, [sp, #8]
   1f89c:	beq	1f8c4 <__assert_fail@plt+0xd09c>
   1f8a0:	mov	r3, r5
   1f8a4:	mov	r1, r7
   1f8a8:	mov	r2, r6
   1f8ac:	str	r8, [sp]
   1f8b0:	bl	1f5e8 <__assert_fail@plt+0xcdc0>
   1f8b4:	mov	r5, r0
   1f8b8:	add	r0, sp, #8
   1f8bc:	bl	1278c <asn1_delete_structure@plt>
   1f8c0:	mov	r0, r5
   1f8c4:	ldr	r2, [sp, #12]
   1f8c8:	ldr	r3, [r4]
   1f8cc:	cmp	r2, r3
   1f8d0:	bne	1f8dc <__assert_fail@plt+0xd0b4>
   1f8d4:	add	sp, sp, #16
   1f8d8:	pop	{r4, r5, r6, r7, r8, pc}
   1f8dc:	bl	12360 <__stack_chk_fail@plt>
   1f8e0:	muleq	r2, ip, r7
   1f8e4:	andeq	r0, r0, r4, lsr #4
   1f8e8:	andeq	r8, r0, r8, asr #10
   1f8ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8f0:	add	r7, r0, r1
   1f8f4:	cmp	r0, r7
   1f8f8:	sub	sp, sp, #28
   1f8fc:	mov	sl, r2
   1f900:	beq	1fb00 <__assert_fail@plt+0xd2d8>
   1f904:	ldrb	r4, [r0]
   1f908:	add	r5, r0, #1
   1f90c:	cmp	r4, #0
   1f910:	beq	1fbbc <__assert_fail@plt+0xd394>
   1f914:	ldr	r2, [pc, #680]	; 1fbc4 <__assert_fail@plt+0xd39c>
   1f918:	mov	r6, #0
   1f91c:	str	r3, [sp, #4]
   1f920:	mov	fp, r6
   1f924:	add	r2, pc, r2
   1f928:	str	r2, [sp, #12]
   1f92c:	ldr	r2, [pc, #660]	; 1fbc8 <__assert_fail@plt+0xd3a0>
   1f930:	ldr	r8, [pc, #660]	; 1fbcc <__assert_fail@plt+0xd3a4>
   1f934:	add	r2, pc, r2
   1f938:	str	r2, [sp, #16]
   1f93c:	bl	124ec <__ctype_b_loc@plt>
   1f940:	ldr	r2, [pc, #648]	; 1fbd0 <__assert_fail@plt+0xd3a8>
   1f944:	ldr	r3, [sp, #4]
   1f948:	add	r8, pc, r8
   1f94c:	add	r2, pc, r2
   1f950:	str	r2, [sp, #20]
   1f954:	ldr	r2, [pc, #632]	; 1fbd4 <__assert_fail@plt+0xd3ac>
   1f958:	mov	r1, r4
   1f95c:	mov	r4, r3
   1f960:	add	r2, pc, r2
   1f964:	str	r2, [sp, #8]
   1f968:	mov	r9, r0
   1f96c:	ldr	r3, [r9]
   1f970:	lsl	r2, r1, #1
   1f974:	ldrh	r2, [r3, r2]
   1f978:	and	r2, r2, #8192	; 0x2000
   1f97c:	uxth	r2, r2
   1f980:	cmp	r2, #0
   1f984:	bne	1f9f0 <__assert_fail@plt+0xd1c8>
   1f988:	cmp	r1, #61	; 0x3d
   1f98c:	beq	1fb08 <__assert_fail@plt+0xd2e0>
   1f990:	mov	r0, r8
   1f994:	bl	12558 <strchr@plt>
   1f998:	cmp	r0, #0
   1f99c:	beq	1faec <__assert_fail@plt+0xd2c4>
   1f9a0:	cmp	r6, #3
   1f9a4:	addls	pc, pc, r6, lsl #2
   1f9a8:	b	1fac8 <__assert_fail@plt+0xd2a0>
   1f9ac:	b	1faa0 <__assert_fail@plt+0xd278>
   1f9b0:	b	1fa18 <__assert_fail@plt+0xd1f0>
   1f9b4:	b	1fa5c <__assert_fail@plt+0xd234>
   1f9b8:	b	1f9bc <__assert_fail@plt+0xd194>
   1f9bc:	cmn	fp, #-2147483647	; 0x80000001
   1f9c0:	beq	1facc <__assert_fail@plt+0xd2a4>
   1f9c4:	cmp	sl, #0
   1f9c8:	beq	1f9e8 <__assert_fail@plt+0xd1c0>
   1f9cc:	cmp	r4, fp
   1f9d0:	bls	1faec <__assert_fail@plt+0xd2c4>
   1f9d4:	ldr	r2, [sp, #12]
   1f9d8:	ldrb	r3, [sl, fp]
   1f9dc:	rsb	r0, r2, r0
   1f9e0:	orr	r0, r0, r3
   1f9e4:	strb	r0, [sl, fp]
   1f9e8:	add	fp, fp, #1
   1f9ec:	mov	r6, #0
   1f9f0:	cmp	r5, r7
   1f9f4:	beq	1fa04 <__assert_fail@plt+0xd1dc>
   1f9f8:	ldrb	r1, [r5], #1
   1f9fc:	cmp	r1, #0
   1fa00:	bne	1f96c <__assert_fail@plt+0xd144>
   1fa04:	cmp	r6, #0
   1fa08:	bne	1faec <__assert_fail@plt+0xd2c4>
   1fa0c:	mov	r0, fp
   1fa10:	add	sp, sp, #28
   1fa14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa18:	cmn	fp, #-2147483647	; 0x80000001
   1fa1c:	beq	1facc <__assert_fail@plt+0xd2a4>
   1fa20:	cmp	sl, #0
   1fa24:	add	r3, fp, #1
   1fa28:	beq	1fa50 <__assert_fail@plt+0xd228>
   1fa2c:	cmp	r4, r3
   1fa30:	bls	1faec <__assert_fail@plt+0xd2c4>
   1fa34:	ldr	r2, [sp, #20]
   1fa38:	rsb	r0, r2, r0
   1fa3c:	ldrb	r2, [sl, fp]
   1fa40:	orr	r2, r2, r0, asr #4
   1fa44:	lsl	r0, r0, #4
   1fa48:	strb	r2, [sl, fp]
   1fa4c:	strb	r0, [sl, r3]
   1fa50:	mov	fp, r3
   1fa54:	mov	r6, #2
   1fa58:	b	1f9f0 <__assert_fail@plt+0xd1c8>
   1fa5c:	cmn	fp, #-2147483647	; 0x80000001
   1fa60:	beq	1facc <__assert_fail@plt+0xd2a4>
   1fa64:	cmp	sl, #0
   1fa68:	add	r3, fp, #1
   1fa6c:	beq	1fa94 <__assert_fail@plt+0xd26c>
   1fa70:	cmp	r4, r3
   1fa74:	bls	1faec <__assert_fail@plt+0xd2c4>
   1fa78:	ldr	r2, [sp, #16]
   1fa7c:	rsb	r0, r2, r0
   1fa80:	ldrb	r2, [sl, fp]
   1fa84:	orr	r2, r2, r0, asr #2
   1fa88:	lsl	r0, r0, #6
   1fa8c:	strb	r2, [sl, fp]
   1fa90:	strb	r0, [sl, r3]
   1fa94:	mov	fp, r3
   1fa98:	mov	r6, #3
   1fa9c:	b	1f9f0 <__assert_fail@plt+0xd1c8>
   1faa0:	cmp	sl, #0
   1faa4:	beq	1faf8 <__assert_fail@plt+0xd2d0>
   1faa8:	cmp	fp, r4
   1faac:	bcs	1faec <__assert_fail@plt+0xd2c4>
   1fab0:	ldr	r3, [sp, #8]
   1fab4:	mov	r6, #1
   1fab8:	rsb	r0, r3, r0
   1fabc:	lsl	r0, r0, #2
   1fac0:	strb	r0, [sl, fp]
   1fac4:	b	1f9f0 <__assert_fail@plt+0xd1c8>
   1fac8:	bl	127c8 <abort@plt>
   1facc:	ldr	r2, [pc, #260]	; 1fbd8 <__assert_fail@plt+0xd3b0>
   1fad0:	ldr	r0, [pc, #260]	; 1fbdc <__assert_fail@plt+0xd3b4>
   1fad4:	ldr	r1, [pc, #260]	; 1fbe0 <__assert_fail@plt+0xd3b8>
   1fad8:	add	r2, pc, r2
   1fadc:	add	r0, pc, r0
   1fae0:	add	r2, r2, #68	; 0x44
   1fae4:	add	r1, pc, r1
   1fae8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   1faec:	mvn	r0, #0
   1faf0:	add	sp, sp, #28
   1faf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1faf8:	mov	r6, #1
   1fafc:	b	1f9f0 <__assert_fail@plt+0xd1c8>
   1fb00:	mov	fp, #0
   1fb04:	b	1fa0c <__assert_fail@plt+0xd1e4>
   1fb08:	cmp	r7, r5
   1fb0c:	mov	r1, r3
   1fb10:	mov	r0, r2
   1fb14:	mov	ip, r5
   1fb18:	ldrbne	r0, [ip]
   1fb1c:	addne	r5, r5, #1
   1fb20:	cmp	r6, #3
   1fb24:	addls	pc, pc, r6, lsl #2
   1fb28:	b	1fa0c <__assert_fail@plt+0xd1e4>
   1fb2c:	b	1faec <__assert_fail@plt+0xd2c4>
   1fb30:	b	1faec <__assert_fail@plt+0xd2c4>
   1fb34:	b	1fb40 <__assert_fail@plt+0xd318>
   1fb38:	b	1fb7c <__assert_fail@plt+0xd354>
   1fb3c:	ldrb	r0, [r5], #1
   1fb40:	cmp	r0, #0
   1fb44:	beq	1faec <__assert_fail@plt+0xd2c4>
   1fb48:	lsl	r3, r0, #1
   1fb4c:	ldrh	r3, [r1, r3]
   1fb50:	tst	r3, #8192	; 0x2000
   1fb54:	beq	1fb64 <__assert_fail@plt+0xd33c>
   1fb58:	cmp	r5, r7
   1fb5c:	bne	1fb3c <__assert_fail@plt+0xd314>
   1fb60:	b	1faec <__assert_fail@plt+0xd2c4>
   1fb64:	cmp	r0, #61	; 0x3d
   1fb68:	bne	1faec <__assert_fail@plt+0xd2c4>
   1fb6c:	cmp	r7, r5
   1fb70:	beq	1fba4 <__assert_fail@plt+0xd37c>
   1fb74:	ldrb	r0, [r5]
   1fb78:	add	r5, r5, #1
   1fb7c:	cmp	r7, r5
   1fb80:	beq	1fba4 <__assert_fail@plt+0xd37c>
   1fb84:	mov	r3, r0
   1fb88:	lsl	r3, r3, #1
   1fb8c:	ldrh	r3, [r1, r3]
   1fb90:	tst	r3, #8192	; 0x2000
   1fb94:	beq	1faec <__assert_fail@plt+0xd2c4>
   1fb98:	ldrb	r3, [r5], #1
   1fb9c:	cmp	r7, r5
   1fba0:	bne	1fb88 <__assert_fail@plt+0xd360>
   1fba4:	cmp	sl, #0
   1fba8:	beq	1fa0c <__assert_fail@plt+0xd1e4>
   1fbac:	ldrb	r2, [sl, fp]
   1fbb0:	cmp	r2, #0
   1fbb4:	beq	1fa0c <__assert_fail@plt+0xd1e4>
   1fbb8:	b	1faec <__assert_fail@plt+0xd2c4>
   1fbbc:	mov	fp, r4
   1fbc0:	b	1fa0c <__assert_fail@plt+0xd1e4>
   1fbc4:	andeq	sl, r0, r4, ror r2
   1fbc8:	andeq	sl, r0, r4, ror #4
   1fbcc:	andeq	sl, r0, r0, asr r2
   1fbd0:	andeq	sl, r0, ip, asr #4
   1fbd4:	andeq	sl, r0, r8, lsr r2
   1fbd8:	andeq	sl, r0, r0, asr #1
   1fbdc:	andeq	r6, r0, r8, asr #5
   1fbe0:	andeq	sl, r0, r8, lsl r1
   1fbe4:	ldr	ip, [pc, #664]	; 1fe84 <__assert_fail@plt+0xd65c>
   1fbe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbec:	subs	sl, r1, #0
   1fbf0:	ldr	r1, [pc, #656]	; 1fe88 <__assert_fail@plt+0xd660>
   1fbf4:	add	ip, pc, ip
   1fbf8:	mov	r6, r3
   1fbfc:	sub	sp, sp, #28
   1fc00:	mov	r3, ip
   1fc04:	mov	r9, r0
   1fc08:	ldr	r1, [ip, r1]
   1fc0c:	mov	r5, r2
   1fc10:	ldr	r7, [sp, #64]	; 0x40
   1fc14:	ldr	r3, [r1]
   1fc18:	str	r1, [sp, #12]
   1fc1c:	str	r3, [sp, #20]
   1fc20:	beq	1fe4c <__assert_fail@plt+0xd624>
   1fc24:	ldr	r2, [pc, #608]	; 1fe8c <__assert_fail@plt+0xd664>
   1fc28:	cmp	sl, #2
   1fc2c:	add	r3, sp, #15
   1fc30:	add	r8, sp, #19
   1fc34:	add	r2, pc, r2
   1fc38:	str	r3, [sp, #8]
   1fc3c:	str	r2, [sp]
   1fc40:	mov	r4, #0
   1fc44:	add	r2, r7, #1
   1fc48:	str	r2, [sp, #4]
   1fc4c:	bhi	1fd4c <__assert_fail@plt+0xd524>
   1fc50:	ldrb	r3, [r9]
   1fc54:	bne	1fd94 <__assert_fail@plt+0xd56c>
   1fc58:	ldrb	r2, [r9, #1]
   1fc5c:	and	r1, r3, #3
   1fc60:	lsr	r0, r3, #2
   1fc64:	add	r9, r9, #2
   1fc68:	and	r3, r2, #15
   1fc6c:	strb	r0, [sp, #16]
   1fc70:	lsr	r2, r2, #4
   1fc74:	lsl	r3, r3, #2
   1fc78:	add	r2, r2, r1, lsl #4
   1fc7c:	strb	r3, [sp, #18]
   1fc80:	strb	r2, [sp, #17]
   1fc84:	mov	sl, #0
   1fc88:	mvn	r3, #0
   1fc8c:	strb	r3, [sp, #19]
   1fc90:	mov	r3, r8
   1fc94:	mov	r8, r7
   1fc98:	cmp	r8, #0
   1fc9c:	mov	r7, r5
   1fca0:	add	fp, sp, #15
   1fca4:	mov	r5, r3
   1fca8:	beq	1fcd8 <__assert_fail@plt+0xd4b0>
   1fcac:	mov	r0, r4
   1fcb0:	ldr	r1, [sp, #4]
   1fcb4:	bl	25be8 <p11_dict_direct_equal@@Base+0x23f0>
   1fcb8:	cmp	r1, #0
   1fcbc:	bne	1fcd8 <__assert_fail@plt+0xd4b0>
   1fcc0:	add	r3, r4, #1
   1fcc4:	cmp	r3, r6
   1fcc8:	bcs	1fe28 <__assert_fail@plt+0xd600>
   1fccc:	mov	r1, #10
   1fcd0:	strb	r1, [r7, r4]
   1fcd4:	mov	r4, r3
   1fcd8:	ldrb	r3, [fp, #1]!
   1fcdc:	sub	r1, r3, #64	; 0x40
   1fce0:	uxtb	r1, r1
   1fce4:	cmp	r1, #190	; 0xbe
   1fce8:	bls	1fde0 <__assert_fail@plt+0xd5b8>
   1fcec:	add	r1, r4, #1
   1fcf0:	cmp	r6, r1
   1fcf4:	bls	1fe04 <__assert_fail@plt+0xd5dc>
   1fcf8:	cmp	r3, #255	; 0xff
   1fcfc:	ldrne	r2, [sp]
   1fd00:	moveq	r2, #61	; 0x3d
   1fd04:	strbeq	r2, [r7, r4]
   1fd08:	ldrbne	r3, [r2, r3]
   1fd0c:	strbne	r3, [r7, r4]
   1fd10:	cmp	fp, r5
   1fd14:	beq	1fd28 <__assert_fail@plt+0xd500>
   1fd18:	cmp	r8, #0
   1fd1c:	mov	r4, r1
   1fd20:	beq	1fcd8 <__assert_fail@plt+0xd4b0>
   1fd24:	b	1fcac <__assert_fail@plt+0xd484>
   1fd28:	cmp	sl, #0
   1fd2c:	mov	r3, r5
   1fd30:	mov	r5, r7
   1fd34:	mov	r7, r8
   1fd38:	mov	r8, r3
   1fd3c:	beq	1fdb8 <__assert_fail@plt+0xd590>
   1fd40:	cmp	sl, #2
   1fd44:	mov	r4, r1
   1fd48:	bls	1fc50 <__assert_fail@plt+0xd428>
   1fd4c:	ldrb	r1, [r9]
   1fd50:	sub	sl, sl, #3
   1fd54:	ldrb	r2, [r9, #1]
   1fd58:	add	r9, r9, #3
   1fd5c:	ldrb	r3, [r9, #-1]
   1fd60:	and	ip, r1, #3
   1fd64:	and	r0, r2, #15
   1fd68:	lsr	r1, r1, #2
   1fd6c:	lsr	r2, r2, #4
   1fd70:	strb	r1, [sp, #16]
   1fd74:	lsr	r1, r3, #6
   1fd78:	add	r2, r2, ip, lsl #4
   1fd7c:	add	r0, r1, r0, lsl #2
   1fd80:	and	r3, r3, #63	; 0x3f
   1fd84:	strb	r2, [sp, #17]
   1fd88:	strb	r0, [sp, #18]
   1fd8c:	strb	r3, [sp, #19]
   1fd90:	b	1fc90 <__assert_fail@plt+0xd468>
   1fd94:	and	r2, r3, #3
   1fd98:	mvn	r1, #0
   1fd9c:	lsr	r3, r3, #2
   1fda0:	add	r9, r9, #1
   1fda4:	lsl	r2, r2, #4
   1fda8:	strb	r1, [sp, #18]
   1fdac:	strb	r3, [sp, #16]
   1fdb0:	strb	r2, [sp, #17]
   1fdb4:	b	1fc84 <__assert_fail@plt+0xd45c>
   1fdb8:	mov	r0, r1
   1fdbc:	mov	r3, #0
   1fdc0:	strb	r3, [r5, r1]
   1fdc4:	ldr	r1, [sp, #12]
   1fdc8:	ldr	r2, [sp, #20]
   1fdcc:	ldr	r3, [r1]
   1fdd0:	cmp	r2, r3
   1fdd4:	bne	1fe80 <__assert_fail@plt+0xd658>
   1fdd8:	add	sp, sp, #28
   1fddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fde0:	ldr	r3, [pc, #168]	; 1fe90 <__assert_fail@plt+0xd668>
   1fde4:	mov	r2, #243	; 0xf3
   1fde8:	ldr	r0, [pc, #164]	; 1fe94 <__assert_fail@plt+0xd66c>
   1fdec:	ldr	r1, [pc, #164]	; 1fe98 <__assert_fail@plt+0xd670>
   1fdf0:	add	r3, pc, r3
   1fdf4:	add	r0, pc, r0
   1fdf8:	add	r3, r3, #84	; 0x54
   1fdfc:	add	r1, pc, r1
   1fe00:	bl	12828 <__assert_fail@plt>
   1fe04:	ldr	r3, [pc, #144]	; 1fe9c <__assert_fail@plt+0xd674>
   1fe08:	mov	r2, #244	; 0xf4
   1fe0c:	ldr	r0, [pc, #140]	; 1fea0 <__assert_fail@plt+0xd678>
   1fe10:	ldr	r1, [pc, #140]	; 1fea4 <__assert_fail@plt+0xd67c>
   1fe14:	add	r3, pc, r3
   1fe18:	add	r0, pc, r0
   1fe1c:	add	r3, r3, #84	; 0x54
   1fe20:	add	r1, pc, r1
   1fe24:	bl	12828 <__assert_fail@plt>
   1fe28:	ldr	r3, [pc, #120]	; 1fea8 <__assert_fail@plt+0xd680>
   1fe2c:	mov	r2, #239	; 0xef
   1fe30:	ldr	r0, [pc, #116]	; 1feac <__assert_fail@plt+0xd684>
   1fe34:	ldr	r1, [pc, #116]	; 1feb0 <__assert_fail@plt+0xd688>
   1fe38:	add	r3, pc, r3
   1fe3c:	add	r0, pc, r0
   1fe40:	add	r3, r3, #84	; 0x54
   1fe44:	add	r1, pc, r1
   1fe48:	bl	12828 <__assert_fail@plt>
   1fe4c:	cmp	r6, #0
   1fe50:	movne	r0, sl
   1fe54:	movne	r1, r0
   1fe58:	bne	1fdbc <__assert_fail@plt+0xd594>
   1fe5c:	ldr	r3, [pc, #80]	; 1feb4 <__assert_fail@plt+0xd68c>
   1fe60:	mov	r2, #253	; 0xfd
   1fe64:	ldr	r0, [pc, #76]	; 1feb8 <__assert_fail@plt+0xd690>
   1fe68:	ldr	r1, [pc, #76]	; 1febc <__assert_fail@plt+0xd694>
   1fe6c:	add	r3, pc, r3
   1fe70:	add	r0, pc, r0
   1fe74:	add	r3, r3, #84	; 0x54
   1fe78:	add	r1, pc, r1
   1fe7c:	bl	12828 <__assert_fail@plt>
   1fe80:	bl	12360 <__stack_chk_fail@plt>
   1fe84:	andeq	r4, r2, r4, lsl #8
   1fe88:	andeq	r0, r0, r4, lsr #4
   1fe8c:	andeq	r9, r0, r4, ror #30
   1fe90:	andeq	r9, r0, r8, lsr #27
   1fe94:	andeq	r9, r0, r0, asr #28
   1fe98:	andeq	r9, r0, r8, lsr #28
   1fe9c:	andeq	r9, r0, r4, lsl #27
   1fea0:	strdeq	r9, [r0], -r8
   1fea4:	andeq	r9, r0, r4, lsl #28
   1fea8:	andeq	r9, r0, r0, ror #26
   1feac:	ldrdeq	r9, [r0], -r4
   1feb0:	andeq	r9, r0, r0, ror #27
   1feb4:	andeq	r9, r0, ip, lsr #26
   1feb8:	andeq	r9, r0, r8, ror #27
   1febc:	andeq	r9, r0, ip, lsr #27
   1fec0:	push	{r3, lr}
   1fec4:	subs	r3, r0, #0
   1fec8:	beq	1fefc <__assert_fail@plt+0xd6d4>
   1fecc:	cmp	r1, #0
   1fed0:	beq	1ff3c <__assert_fail@plt+0xd714>
   1fed4:	cmp	r2, #0
   1fed8:	beq	1ff1c <__assert_fail@plt+0xd6f4>
   1fedc:	cmp	r1, #1
   1fee0:	ldrbhi	r1, [r3]
   1fee4:	movhi	r0, #2
   1fee8:	ldrbhi	r3, [r3, #1]
   1feec:	mvnls	r0, #0
   1fef0:	orrhi	r3, r3, r1, lsl #8
   1fef4:	strhi	r3, [r2]
   1fef8:	pop	{r3, pc}
   1fefc:	ldr	r0, [pc, #88]	; 1ff5c <__assert_fail@plt+0xd734>
   1ff00:	mov	r2, #233	; 0xe9
   1ff04:	ldr	r1, [pc, #84]	; 1ff60 <__assert_fail@plt+0xd738>
   1ff08:	ldr	r3, [pc, #84]	; 1ff64 <__assert_fail@plt+0xd73c>
   1ff0c:	add	r0, pc, r0
   1ff10:	add	r1, pc, r1
   1ff14:	add	r3, pc, r3
   1ff18:	bl	12828 <__assert_fail@plt>
   1ff1c:	ldr	r0, [pc, #68]	; 1ff68 <__assert_fail@plt+0xd740>
   1ff20:	mov	r2, #235	; 0xeb
   1ff24:	ldr	r1, [pc, #64]	; 1ff6c <__assert_fail@plt+0xd744>
   1ff28:	ldr	r3, [pc, #64]	; 1ff70 <__assert_fail@plt+0xd748>
   1ff2c:	add	r0, pc, r0
   1ff30:	add	r1, pc, r1
   1ff34:	add	r3, pc, r3
   1ff38:	bl	12828 <__assert_fail@plt>
   1ff3c:	ldr	r0, [pc, #48]	; 1ff74 <__assert_fail@plt+0xd74c>
   1ff40:	mov	r2, #234	; 0xea
   1ff44:	ldr	r1, [pc, #44]	; 1ff78 <__assert_fail@plt+0xd750>
   1ff48:	ldr	r3, [pc, #44]	; 1ff7c <__assert_fail@plt+0xd754>
   1ff4c:	add	r0, pc, r0
   1ff50:	add	r1, pc, r1
   1ff54:	add	r3, pc, r3
   1ff58:	bl	12828 <__assert_fail@plt>
   1ff5c:	ldrdeq	r9, [r0], -ip
   1ff60:	andeq	r9, r0, ip, ror #27
   1ff64:	andeq	r9, r0, r4, asr sp
   1ff68:	andeq	r9, r0, r0, ror #27
   1ff6c:	andeq	r9, r0, ip, asr #27
   1ff70:	andeq	r9, r0, r4, lsr sp
   1ff74:	andeq	r8, r0, r0, asr r8
   1ff78:	andeq	r9, r0, ip, lsr #27
   1ff7c:	andeq	r9, r0, r4, lsl sp
   1ff80:	push	{r3, r4, r5, lr}
   1ff84:	subs	r3, r0, #0
   1ff88:	beq	20020 <__assert_fail@plt+0xd7f8>
   1ff8c:	cmp	r1, #0
   1ff90:	beq	1fffc <__assert_fail@plt+0xd7d4>
   1ff94:	cmp	r2, #0
   1ff98:	beq	1ffd8 <__assert_fail@plt+0xd7b0>
   1ff9c:	cmp	r1, #3
   1ffa0:	bls	1ffd0 <__assert_fail@plt+0xd7a8>
   1ffa4:	ldrb	r4, [r3, #1]
   1ffa8:	mov	r0, #4
   1ffac:	ldrb	r5, [r3]
   1ffb0:	ldrb	ip, [r3, #3]
   1ffb4:	ldrb	r1, [r3, #2]
   1ffb8:	lsl	r4, r4, #16
   1ffbc:	orr	r3, r4, r5, lsl #24
   1ffc0:	orr	r3, r3, ip
   1ffc4:	orr	r3, r3, r1, lsl #8
   1ffc8:	str	r3, [r2]
   1ffcc:	pop	{r3, r4, r5, pc}
   1ffd0:	mvn	r0, #0
   1ffd4:	pop	{r3, r4, r5, pc}
   1ffd8:	ldr	r3, [pc, #100]	; 20044 <__assert_fail@plt+0xd81c>
   1ffdc:	mov	r2, #251	; 0xfb
   1ffe0:	ldr	r0, [pc, #96]	; 20048 <__assert_fail@plt+0xd820>
   1ffe4:	ldr	r1, [pc, #96]	; 2004c <__assert_fail@plt+0xd824>
   1ffe8:	add	r3, pc, r3
   1ffec:	add	r0, pc, r0
   1fff0:	add	r3, r3, #16
   1fff4:	add	r1, pc, r1
   1fff8:	bl	12828 <__assert_fail@plt>
   1fffc:	ldr	r3, [pc, #76]	; 20050 <__assert_fail@plt+0xd828>
   20000:	mov	r2, #250	; 0xfa
   20004:	ldr	r0, [pc, #72]	; 20054 <__assert_fail@plt+0xd82c>
   20008:	ldr	r1, [pc, #72]	; 20058 <__assert_fail@plt+0xd830>
   2000c:	add	r3, pc, r3
   20010:	add	r0, pc, r0
   20014:	add	r3, r3, #16
   20018:	add	r1, pc, r1
   2001c:	bl	12828 <__assert_fail@plt>
   20020:	ldr	r3, [pc, #52]	; 2005c <__assert_fail@plt+0xd834>
   20024:	mov	r2, #249	; 0xf9
   20028:	ldr	r0, [pc, #48]	; 20060 <__assert_fail@plt+0xd838>
   2002c:	ldr	r1, [pc, #48]	; 20064 <__assert_fail@plt+0xd83c>
   20030:	add	r3, pc, r3
   20034:	add	r0, pc, r0
   20038:	add	r3, r3, #16
   2003c:	add	r1, pc, r1
   20040:	bl	12828 <__assert_fail@plt>
   20044:	andeq	r9, r0, r0, lsl #25
   20048:	andeq	r9, r0, r4, lsr sp
   2004c:	andeq	r9, r0, r8, lsl #26
   20050:	andeq	r9, r0, ip, asr ip
   20054:	andeq	r8, r0, ip, lsl #15
   20058:	andeq	r9, r0, r4, ror #25
   2005c:	andeq	r9, r0, r8, lsr ip
   20060:			; <UNDEFINED> instruction: 0x00009cb4
   20064:	andeq	r9, r0, r0, asr #25
   20068:	ldr	ip, [pc, #516]	; 20274 <__assert_fail@plt+0xda4c>
   2006c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20070:	subs	r7, r0, #0
   20074:	ldr	r0, [pc, #508]	; 20278 <__assert_fail@plt+0xda50>
   20078:	add	ip, pc, ip
   2007c:	mov	sl, r3
   20080:	sub	sp, sp, #52	; 0x34
   20084:	mov	r3, ip
   20088:	mov	r4, r1
   2008c:	ldr	r0, [ip, r0]
   20090:	mov	fp, r2
   20094:	ldr	r3, [r0]
   20098:	str	r0, [sp, #4]
   2009c:	str	r3, [sp, #44]	; 0x2c
   200a0:	beq	2024c <__assert_fail@plt+0xda24>
   200a4:	add	r6, sp, #12
   200a8:	mov	r1, r2
   200ac:	mov	r0, r6
   200b0:	bl	21e68 <__assert_fail@plt+0xf640>
   200b4:	subs	r5, r0, #0
   200b8:	beq	20204 <__assert_fail@plt+0xd9dc>
   200bc:	cmp	fp, #0
   200c0:	addne	r8, sp, #8
   200c4:	addne	r5, sp, #36	; 0x24
   200c8:	addne	r9, sp, #37	; 0x25
   200cc:	beq	20190 <__assert_fail@plt+0xd968>
   200d0:	mov	r0, r4
   200d4:	mov	r1, fp
   200d8:	mov	r2, r8
   200dc:	blx	r7
   200e0:	cmp	r0, #0
   200e4:	blt	201cc <__assert_fail@plt+0xd9a4>
   200e8:	ldr	r1, [sp, #8]
   200ec:	add	r4, r4, r0
   200f0:	rsb	fp, r0, fp
   200f4:	bics	r2, r1, #127	; 0x7f
   200f8:	strbeq	r1, [sp, #36]	; 0x24
   200fc:	moveq	r2, #1
   20100:	beq	2017c <__assert_fail@plt+0xd954>
   20104:	bic	r2, r1, #2032	; 0x7f0
   20108:	bic	r2, r2, #15
   2010c:	cmp	r2, #0
   20110:	beq	20144 <__assert_fail@plt+0xd91c>
   20114:	lsrs	r3, r1, #16
   20118:	beq	201ac <__assert_fail@plt+0xd984>
   2011c:	lsrs	r2, r1, #21
   20120:	beq	201bc <__assert_fail@plt+0xd994>
   20124:	tst	r1, #-67108864	; 0xfc000000
   20128:	beq	201f4 <__assert_fail@plt+0xd9cc>
   2012c:	cmp	r1, #0
   20130:	blt	201cc <__assert_fail@plt+0xd9a4>
   20134:	mov	r0, #5
   20138:	mov	r2, #6
   2013c:	mov	lr, #252	; 0xfc
   20140:	b	20150 <__assert_fail@plt+0xd928>
   20144:	mov	r0, #1
   20148:	mov	r2, #2
   2014c:	mov	lr, #192	; 0xc0
   20150:	add	r0, r0, #1
   20154:	add	r0, r5, r0
   20158:	and	ip, r1, #63	; 0x3f
   2015c:	lsr	r1, r1, #6
   20160:	mvn	ip, ip, lsl #25
   20164:	mvn	ip, ip, lsr #25
   20168:	strb	ip, [r0, #-1]!
   2016c:	cmp	r0, r9
   20170:	bne	20158 <__assert_fail@plt+0xd930>
   20174:	orr	r1, lr, r1
   20178:	strb	r1, [sp, #36]	; 0x24
   2017c:	mov	r0, r6
   20180:	mov	r1, r5
   20184:	bl	2212c <__assert_fail@plt+0xf904>
   20188:	cmp	fp, #0
   2018c:	bne	200d0 <__assert_fail@plt+0xd8a8>
   20190:	ldr	r3, [sp, #20]
   20194:	tst	r3, #1
   20198:	bne	20224 <__assert_fail@plt+0xd9fc>
   2019c:	mov	r0, r6
   201a0:	mov	r1, sl
   201a4:	bl	21f34 <__assert_fail@plt+0xf70c>
   201a8:	b	201d8 <__assert_fail@plt+0xd9b0>
   201ac:	mov	r0, #2
   201b0:	mov	r2, #3
   201b4:	mov	lr, #224	; 0xe0
   201b8:	b	20150 <__assert_fail@plt+0xd928>
   201bc:	mov	r0, #3
   201c0:	mov	r2, #4
   201c4:	mov	lr, #240	; 0xf0
   201c8:	b	20150 <__assert_fail@plt+0xd928>
   201cc:	mov	r0, r6
   201d0:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   201d4:	mov	r0, #0
   201d8:	ldr	r1, [sp, #4]
   201dc:	ldr	r2, [sp, #44]	; 0x2c
   201e0:	ldr	r3, [r1]
   201e4:	cmp	r2, r3
   201e8:	bne	20270 <__assert_fail@plt+0xda48>
   201ec:	add	sp, sp, #52	; 0x34
   201f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201f4:	mov	r0, #4
   201f8:	mov	r2, #5
   201fc:	mov	lr, #248	; 0xf8
   20200:	b	20150 <__assert_fail@plt+0xd928>
   20204:	ldr	r1, [pc, #112]	; 2027c <__assert_fail@plt+0xda54>
   20208:	ldr	r0, [pc, #112]	; 20280 <__assert_fail@plt+0xda58>
   2020c:	add	r1, pc, r1
   20210:	add	r0, pc, r0
   20214:	add	r1, r1, #52	; 0x34
   20218:	bl	22e10 <secure_getenv@@Base+0x7bc>
   2021c:	mov	r0, r5
   20220:	b	201d8 <__assert_fail@plt+0xd9b0>
   20224:	ldr	r2, [pc, #88]	; 20284 <__assert_fail@plt+0xda5c>
   20228:	ldr	r0, [pc, #88]	; 20288 <__assert_fail@plt+0xda60>
   2022c:	ldr	r1, [pc, #88]	; 2028c <__assert_fail@plt+0xda64>
   20230:	add	r2, pc, r2
   20234:	add	r0, pc, r0
   20238:	add	r2, r2, #52	; 0x34
   2023c:	add	r1, pc, r1
   20240:	bl	22e10 <secure_getenv@@Base+0x7bc>
   20244:	mov	r0, #0
   20248:	b	201d8 <__assert_fail@plt+0xd9b0>
   2024c:	ldr	r3, [pc, #60]	; 20290 <__assert_fail@plt+0xda68>
   20250:	mov	r2, #292	; 0x124
   20254:	ldr	r0, [pc, #56]	; 20294 <__assert_fail@plt+0xda6c>
   20258:	ldr	r1, [pc, #56]	; 20298 <__assert_fail@plt+0xda70>
   2025c:	add	r3, pc, r3
   20260:	add	r0, pc, r0
   20264:	add	r3, r3, #32
   20268:	add	r1, pc, r1
   2026c:	bl	12828 <__assert_fail@plt>
   20270:	bl	12360 <__stack_chk_fail@plt>
   20274:	andeq	r3, r2, r0, lsl #31
   20278:	andeq	r0, r0, r4, lsr #4
   2027c:	andeq	r9, r0, ip, asr sl
   20280:	andeq	r5, r0, r8, lsr sp
   20284:	andeq	r9, r0, r8, lsr sl
   20288:	andeq	r5, r0, r0, ror fp
   2028c:	andeq	r7, r0, ip, lsl r8
   20290:	andeq	r9, r0, ip, lsl #20
   20294:	ldrdeq	r9, [r0], -r4
   20298:	muleq	r0, r4, sl
   2029c:	cmp	r1, #0
   202a0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   202a4:	mov	r5, r0
   202a8:	blt	20430 <__assert_fail@plt+0xdc08>
   202ac:	cmp	r1, #0
   202b0:	ble	203d0 <__assert_fail@plt+0xdba8>
   202b4:	cmp	r5, #0
   202b8:	beq	20394 <__assert_fail@plt+0xdb6c>
   202bc:	movw	r7, #65535	; 0xffff
   202c0:	movt	r7, #16
   202c4:	movw	r8, #2047	; 0x7ff
   202c8:	ldrb	r3, [r5]
   202cc:	tst	r3, #128	; 0x80
   202d0:	beq	203b8 <__assert_fail@plt+0xdb90>
   202d4:	and	r2, r3, #224	; 0xe0
   202d8:	cmp	r2, #192	; 0xc0
   202dc:	beq	203e0 <__assert_fail@plt+0xdbb8>
   202e0:	and	r2, r3, #240	; 0xf0
   202e4:	cmp	r2, #224	; 0xe0
   202e8:	beq	203f4 <__assert_fail@plt+0xdbcc>
   202ec:	and	r2, r3, #248	; 0xf8
   202f0:	cmp	r2, #240	; 0xf0
   202f4:	beq	20408 <__assert_fail@plt+0xdbe0>
   202f8:	and	r2, r3, #252	; 0xfc
   202fc:	cmp	r2, #248	; 0xf8
   20300:	beq	2041c <__assert_fail@plt+0xdbf4>
   20304:	and	r2, r3, #254	; 0xfe
   20308:	cmp	r2, #252	; 0xfc
   2030c:	bne	203d8 <__assert_fail@plt+0xdbb0>
   20310:	mov	r0, #6
   20314:	mov	r9, #67108864	; 0x4000000
   20318:	mov	r6, r0
   2031c:	mov	ip, #1
   20320:	cmp	r0, r1
   20324:	bhi	203d8 <__assert_fail@plt+0xdbb0>
   20328:	and	ip, ip, r3
   2032c:	mov	r3, #1
   20330:	ldrb	r2, [r5, r3]
   20334:	and	r4, r2, #192	; 0xc0
   20338:	cmp	r4, #128	; 0x80
   2033c:	bne	203d8 <__assert_fail@plt+0xdbb0>
   20340:	add	r3, r3, #1
   20344:	and	r2, r2, #63	; 0x3f
   20348:	cmp	r6, r3
   2034c:	orr	ip, r2, ip, lsl #6
   20350:	bgt	20330 <__assert_fail@plt+0xdb08>
   20354:	cmp	r9, ip
   20358:	bhi	203d8 <__assert_fail@plt+0xdbb0>
   2035c:	cmp	ip, r7
   20360:	sub	r3, ip, #55296	; 0xd800
   20364:	movls	ip, #0
   20368:	movhi	ip, #1
   2036c:	cmp	r3, r8
   20370:	orrls	ip, ip, #1
   20374:	cmp	ip, #0
   20378:	bne	203d8 <__assert_fail@plt+0xdbb0>
   2037c:	rsb	r1, r6, r1
   20380:	add	r5, r5, r0
   20384:	cmp	r1, #0
   20388:	ble	203d0 <__assert_fail@plt+0xdba8>
   2038c:	cmp	r5, #0
   20390:	bne	202c8 <__assert_fail@plt+0xdaa0>
   20394:	ldr	r3, [pc, #160]	; 2043c <__assert_fail@plt+0xdc14>
   20398:	mov	r2, #82	; 0x52
   2039c:	ldr	r0, [pc, #156]	; 20440 <__assert_fail@plt+0xdc18>
   203a0:	ldr	r1, [pc, #156]	; 20444 <__assert_fail@plt+0xdc1c>
   203a4:	add	r3, pc, r3
   203a8:	add	r0, pc, r0
   203ac:	add	r3, r3, #72	; 0x48
   203b0:	add	r1, pc, r1
   203b4:	bl	12828 <__assert_fail@plt>
   203b8:	mov	r0, #1
   203bc:	add	r5, r5, r0
   203c0:	mov	r6, r0
   203c4:	rsb	r1, r6, r1
   203c8:	cmp	r1, #0
   203cc:	bgt	2038c <__assert_fail@plt+0xdb64>
   203d0:	mov	r0, #1
   203d4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   203d8:	mov	r0, #0
   203dc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   203e0:	mov	r0, #2
   203e4:	mov	r9, #128	; 0x80
   203e8:	mov	r6, r0
   203ec:	mov	ip, #31
   203f0:	b	20320 <__assert_fail@plt+0xdaf8>
   203f4:	mov	r0, #3
   203f8:	mov	r9, #2048	; 0x800
   203fc:	mov	r6, r0
   20400:	mov	ip, #15
   20404:	b	20320 <__assert_fail@plt+0xdaf8>
   20408:	mov	r0, #4
   2040c:	mov	r9, #65536	; 0x10000
   20410:	mov	r6, r0
   20414:	mov	ip, #7
   20418:	b	20320 <__assert_fail@plt+0xdaf8>
   2041c:	mov	r0, #5
   20420:	mov	r9, #2097152	; 0x200000
   20424:	mov	r6, r0
   20428:	mov	ip, #3
   2042c:	b	20320 <__assert_fail@plt+0xdaf8>
   20430:	bl	12540 <strlen@plt>
   20434:	mov	r1, r0
   20438:	b	202ac <__assert_fail@plt+0xda84>
   2043c:	andeq	r9, r0, r4, asr #17
   20440:	andeq	r9, r0, r0, asr #18
   20444:	andeq	r9, r0, ip, asr #18
   20448:	cmp	r0, #0
   2044c:	mov	ip, r1
   20450:	push	{r4, lr}
   20454:	mov	r3, r2
   20458:	beq	20474 <__assert_fail@plt+0xdc4c>
   2045c:	mov	r1, r0
   20460:	ldr	r0, [pc, #48]	; 20498 <__assert_fail@plt+0xdc70>
   20464:	mov	r2, ip
   20468:	add	r0, pc, r0
   2046c:	pop	{r4, lr}
   20470:	b	20068 <__assert_fail@plt+0xd840>
   20474:	ldr	r3, [pc, #32]	; 2049c <__assert_fail@plt+0xdc74>
   20478:	mov	r2, #324	; 0x144
   2047c:	ldr	r0, [pc, #28]	; 204a0 <__assert_fail@plt+0xdc78>
   20480:	ldr	r1, [pc, #28]	; 204a4 <__assert_fail@plt+0xdc7c>
   20484:	add	r3, pc, r3
   20488:	add	r0, pc, r0
   2048c:	add	r3, r3, #88	; 0x58
   20490:	add	r1, pc, r1
   20494:	bl	12828 <__assert_fail@plt>
   20498:			; <UNDEFINED> instruction: 0xfffffa50
   2049c:	andeq	r9, r0, r4, ror #15
   204a0:	andeq	r9, r0, r0, ror #16
   204a4:	andeq	r9, r0, ip, ror #16
   204a8:	cmp	r0, #0
   204ac:	mov	ip, r1
   204b0:	push	{r4, lr}
   204b4:	mov	r3, r2
   204b8:	beq	204d4 <__assert_fail@plt+0xdcac>
   204bc:	mov	r1, r0
   204c0:	ldr	r0, [pc, #48]	; 204f8 <__assert_fail@plt+0xdcd0>
   204c4:	mov	r2, ip
   204c8:	add	r0, pc, r0
   204cc:	pop	{r4, lr}
   204d0:	b	20068 <__assert_fail@plt+0xd840>
   204d4:	ldr	r3, [pc, #32]	; 204fc <__assert_fail@plt+0xdcd4>
   204d8:	movw	r2, #333	; 0x14d
   204dc:	ldr	r0, [pc, #28]	; 20500 <__assert_fail@plt+0xdcd8>
   204e0:	ldr	r1, [pc, #28]	; 20504 <__assert_fail@plt+0xdcdc>
   204e4:	add	r3, pc, r3
   204e8:	add	r0, pc, r0
   204ec:	add	r3, r3, #108	; 0x6c
   204f0:	add	r1, pc, r1
   204f4:	bl	12828 <__assert_fail@plt>
   204f8:			; <UNDEFINED> instruction: 0xfffffab0
   204fc:	andeq	r9, r0, r4, lsl #15
   20500:	andeq	r9, r0, r0, lsl #16
   20504:	andeq	r9, r0, ip, lsl #16
   20508:	ldr	r3, [r0]
   2050c:	add	r2, r3, #4
   20510:	str	r2, [r0]
   20514:	ldr	r0, [r3]
   20518:	bx	lr
   2051c:	ldr	r3, [r0]
   20520:	add	r2, r3, #12
   20524:	str	r2, [r0]
   20528:	mov	r0, r3
   2052c:	bx	lr
   20530:	ldr	ip, [pc, #148]	; 205cc <__assert_fail@plt+0xdda4>
   20534:	push	{r1, r2, r3}
   20538:	add	ip, pc, ip
   2053c:	push	{r4, r5, lr}
   20540:	sub	sp, sp, #16
   20544:	ldr	lr, [pc, #132]	; 205d0 <__assert_fail@plt+0xdda8>
   20548:	add	r3, sp, #32
   2054c:	mov	r5, r0
   20550:	ldr	r1, [sp, #28]
   20554:	mov	r2, r3
   20558:	add	r0, sp, #4
   2055c:	ldr	r4, [ip, lr]
   20560:	str	r3, [sp, #8]
   20564:	ldr	r3, [r4]
   20568:	str	r3, [sp, #12]
   2056c:	bl	12258 <vasprintf@plt>
   20570:	cmp	r0, #0
   20574:	blt	205b0 <__assert_fail@plt+0xdd88>
   20578:	mov	r0, r5
   2057c:	ldr	r1, [sp, #4]
   20580:	mvn	r2, #0
   20584:	bl	2212c <__assert_fail@plt+0xf904>
   20588:	ldr	r0, [sp, #4]
   2058c:	bl	122c4 <free@plt>
   20590:	ldr	r2, [sp, #12]
   20594:	ldr	r3, [r4]
   20598:	cmp	r2, r3
   2059c:	bne	205c8 <__assert_fail@plt+0xdda0>
   205a0:	add	sp, sp, #16
   205a4:	pop	{r4, r5, lr}
   205a8:	add	sp, sp, #12
   205ac:	bx	lr
   205b0:	ldr	r0, [pc, #28]	; 205d4 <__assert_fail@plt+0xddac>
   205b4:	ldr	r1, [pc, #28]	; 205d8 <__assert_fail@plt+0xddb0>
   205b8:	add	r0, pc, r0
   205bc:	add	r1, pc, r1
   205c0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   205c4:	b	20590 <__assert_fail@plt+0xdd68>
   205c8:	bl	12360 <__stack_chk_fail@plt>
   205cc:	andeq	r3, r2, r0, asr #21
   205d0:	andeq	r0, r0, r4, lsr #4
   205d4:	muleq	r0, r0, r9
   205d8:	andeq	r9, r0, r0, lsl #15
   205dc:	ldr	r3, [r0, #8]
   205e0:	cmp	r3, #4
   205e4:	beq	205f0 <__assert_fail@plt+0xddc8>
   205e8:	mov	r0, #0
   205ec:	bx	lr
   205f0:	ldr	r0, [r0, #4]
   205f4:	adds	r0, r0, #0
   205f8:	movne	r0, #1
   205fc:	bx	lr
   20600:	cmp	r0, #0
   20604:	beq	2061c <__assert_fail@plt+0xddf4>
   20608:	ldr	r0, [r0]
   2060c:	cmn	r0, #1
   20610:	movne	r0, #0
   20614:	moveq	r0, #1
   20618:	bx	lr
   2061c:	mov	r0, #1
   20620:	bx	lr
   20624:	push	{r3, r4, r5, lr}
   20628:	subs	r4, r0, #0
   2062c:	beq	20658 <__assert_fail@plt+0xde30>
   20630:	mov	r5, #0
   20634:	b	2063c <__assert_fail@plt+0xde14>
   20638:	add	r5, r5, #1
   2063c:	mov	r0, r4
   20640:	add	r4, r4, #12
   20644:	bl	20600 <__assert_fail@plt+0xddd8>
   20648:	cmp	r0, #0
   2064c:	beq	20638 <__assert_fail@plt+0xde10>
   20650:	mov	r0, r5
   20654:	pop	{r3, r4, r5, pc}
   20658:	mov	r0, r4
   2065c:	pop	{r3, r4, r5, pc}
   20660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20664:	sub	sp, sp, #20
   20668:	mov	r7, r1
   2066c:	mov	r5, r0
   20670:	str	r2, [sp, #8]
   20674:	str	r3, [sp, #12]
   20678:	ldr	r8, [sp, #56]	; 0x38
   2067c:	ldr	r9, [sp, #60]	; 0x3c
   20680:	bl	20624 <__assert_fail@plt+0xddfc>
   20684:	add	r3, r7, #1
   20688:	mov	r4, r0
   2068c:	add	r3, r3, r4
   20690:	mov	r0, r5
   20694:	add	r1, r3, r3, lsl #1
   20698:	lsl	r1, r1, #2
   2069c:	bl	12390 <realloc@plt>
   206a0:	subs	r5, r0, #0
   206a4:	beq	20830 <__assert_fail@plt+0xe008>
   206a8:	cmp	r7, #0
   206ac:	mov	r6, r4
   206b0:	movne	sl, #0
   206b4:	movne	r3, sl
   206b8:	movne	sl, r4
   206bc:	movne	r4, r3
   206c0:	beq	20780 <__assert_fail@plt+0xdf58>
   206c4:	mov	r0, r9
   206c8:	blx	r8
   206cc:	subs	r2, r0, #0
   206d0:	beq	20774 <__assert_fail@plt+0xdf4c>
   206d4:	ldr	lr, [r2]
   206d8:	cmn	lr, #1
   206dc:	beq	20774 <__assert_fail@plt+0xdf4c>
   206e0:	cmp	sl, #0
   206e4:	beq	2071c <__assert_fail@plt+0xdef4>
   206e8:	ldr	r3, [r5]
   206ec:	cmp	lr, r3
   206f0:	beq	207ac <__assert_fail@plt+0xdf84>
   206f4:	add	r1, r5, #12
   206f8:	mov	r3, #0
   206fc:	b	20710 <__assert_fail@plt+0xdee8>
   20700:	mov	fp, r1
   20704:	ldr	r0, [r1], #12
   20708:	cmp	lr, r0
   2070c:	beq	207b0 <__assert_fail@plt+0xdf88>
   20710:	add	r3, r3, #1
   20714:	cmp	r3, sl
   20718:	bne	20700 <__assert_fail@plt+0xded8>
   2071c:	add	fp, r6, r6, lsl #1
   20720:	add	r6, r6, #1
   20724:	add	fp, r5, fp, lsl #2
   20728:	ldr	r3, [sp, #8]
   2072c:	ldr	r0, [r2]
   20730:	ldr	r1, [r2, #4]
   20734:	cmp	r3, #0
   20738:	ldr	r2, [r2, #8]
   2073c:	mov	r3, fp
   20740:	stmia	r3!, {r0, r1, r2}
   20744:	bne	20774 <__assert_fail@plt+0xdf4c>
   20748:	cmp	r1, #0
   2074c:	mov	r0, r1
   20750:	beq	20774 <__assert_fail@plt+0xdf4c>
   20754:	cmp	r2, #0
   20758:	mov	r1, r2
   2075c:	bne	207e8 <__assert_fail@plt+0xdfc0>
   20760:	mov	r0, #1
   20764:	bl	1245c <malloc@plt>
   20768:	cmp	r0, #0
   2076c:	str	r0, [fp, #4]
   20770:	beq	207f8 <__assert_fail@plt+0xdfd0>
   20774:	add	r4, r4, #1
   20778:	cmp	r4, r7
   2077c:	bne	206c4 <__assert_fail@plt+0xde9c>
   20780:	add	r6, r6, r6, lsl #1
   20784:	mvn	r2, #0
   20788:	lsl	r3, r6, #2
   2078c:	add	r0, r5, r3
   20790:	str	r2, [r5, r3]
   20794:	bl	20600 <__assert_fail@plt+0xddd8>
   20798:	cmp	r0, #0
   2079c:	movne	r0, r5
   207a0:	beq	20858 <__assert_fail@plt+0xe030>
   207a4:	add	sp, sp, #20
   207a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207ac:	mov	fp, r5
   207b0:	ldr	r3, [sp, #12]
   207b4:	cmp	r3, #0
   207b8:	bne	207d4 <__assert_fail@plt+0xdfac>
   207bc:	ldr	r3, [sp, #8]
   207c0:	cmp	r3, #0
   207c4:	beq	20774 <__assert_fail@plt+0xdf4c>
   207c8:	ldr	r0, [r2, #4]
   207cc:	bl	122c4 <free@plt>
   207d0:	b	20774 <__assert_fail@plt+0xdf4c>
   207d4:	ldr	r0, [fp, #4]
   207d8:	str	r2, [sp, #4]
   207dc:	bl	122c4 <free@plt>
   207e0:	ldr	r2, [sp, #4]
   207e4:	b	20728 <__assert_fail@plt+0xdf00>
   207e8:	bl	22490 <__assert_fail@plt+0xfc68>
   207ec:	cmp	r0, #0
   207f0:	str	r0, [fp, #4]
   207f4:	bne	20774 <__assert_fail@plt+0xdf4c>
   207f8:	ldr	r2, [pc, #124]	; 2087c <__assert_fail@plt+0xe054>
   207fc:	mov	r3, r0
   20800:	ldr	r1, [pc, #120]	; 20880 <__assert_fail@plt+0xe058>
   20804:	ldr	r0, [pc, #120]	; 20884 <__assert_fail@plt+0xe05c>
   20808:	add	r2, pc, r2
   2080c:	add	r2, r2, #24
   20810:	add	r1, pc, r1
   20814:	add	r0, pc, r0
   20818:	str	r3, [sp, #4]
   2081c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   20820:	ldr	r3, [sp, #4]
   20824:	mov	r0, r3
   20828:	add	sp, sp, #20
   2082c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20830:	ldr	r2, [pc, #80]	; 20888 <__assert_fail@plt+0xe060>
   20834:	ldr	r0, [pc, #80]	; 2088c <__assert_fail@plt+0xe064>
   20838:	ldr	r1, [pc, #80]	; 20890 <__assert_fail@plt+0xe068>
   2083c:	add	r2, pc, r2
   20840:	add	r0, pc, r0
   20844:	add	r2, r2, #24
   20848:	add	r1, pc, r1
   2084c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   20850:	mov	r0, r5
   20854:	b	207a4 <__assert_fail@plt+0xdf7c>
   20858:	ldr	r3, [pc, #52]	; 20894 <__assert_fail@plt+0xe06c>
   2085c:	mov	r2, #158	; 0x9e
   20860:	ldr	r0, [pc, #48]	; 20898 <__assert_fail@plt+0xe070>
   20864:	ldr	r1, [pc, #48]	; 2089c <__assert_fail@plt+0xe074>
   20868:	add	r3, pc, r3
   2086c:	add	r0, pc, r0
   20870:	add	r3, r3, #36	; 0x24
   20874:	add	r1, pc, r1
   20878:	bl	12828 <__assert_fail@plt>
   2087c:	andeq	r9, r0, r4, lsr r5
   20880:	andeq	r6, r0, ip, lsr r0
   20884:	muleq	r0, r0, r5
   20888:	andeq	r9, r0, r0, lsl #10
   2088c:	andeq	r5, r0, r4, ror #10
   20890:	ldrdeq	r5, [r0], -ip
   20894:	ldrdeq	r9, [r0], -r4
   20898:	andeq	r9, r0, r8, lsr r5
   2089c:	andeq	r9, r0, r4, asr r5
   208a0:	push	{r3, r4, r5, lr}
   208a4:	subs	r5, r0, #0
   208a8:	popeq	{r3, r4, r5, pc}
   208ac:	mov	r4, r5
   208b0:	b	208bc <__assert_fail@plt+0xe094>
   208b4:	ldr	r0, [r4, #-8]
   208b8:	bl	122c4 <free@plt>
   208bc:	mov	r0, r4
   208c0:	add	r4, r4, #12
   208c4:	bl	20600 <__assert_fail@plt+0xddd8>
   208c8:	cmp	r0, #0
   208cc:	beq	208b4 <__assert_fail@plt+0xe08c>
   208d0:	mov	r0, r5
   208d4:	pop	{r3, r4, r5, lr}
   208d8:	b	122c4 <free@plt>
   208dc:	push	{r0, r1, r2, r3}
   208e0:	ldr	r2, [pc, #140]	; 20974 <__assert_fail@plt+0xe14c>
   208e4:	ldr	ip, [pc, #140]	; 20978 <__assert_fail@plt+0xe150>
   208e8:	add	r2, pc, r2
   208ec:	push	{r4, lr}
   208f0:	sub	sp, sp, #16
   208f4:	ldr	r4, [r2, ip]
   208f8:	add	lr, sp, #28
   208fc:	ldr	r1, [sp, #28]
   20900:	add	r3, sp, #32
   20904:	ldr	r0, [sp, #24]
   20908:	ldr	r2, [r4]
   2090c:	cmp	r1, #0
   20910:	str	r2, [sp, #12]
   20914:	beq	2092c <__assert_fail@plt+0xe104>
   20918:	mov	r1, #0
   2091c:	ldr	r2, [r3], #4
   20920:	add	r1, r1, #1
   20924:	cmp	r2, #0
   20928:	bne	2091c <__assert_fail@plt+0xe0f4>
   2092c:	add	r3, sp, #16
   20930:	ldr	ip, [pc, #68]	; 2097c <__assert_fail@plt+0xe154>
   20934:	mov	r2, #0
   20938:	str	lr, [r3, #-8]!
   2093c:	add	ip, pc, ip
   20940:	str	r3, [sp, #4]
   20944:	mov	r3, #1
   20948:	str	ip, [sp]
   2094c:	bl	20660 <__assert_fail@plt+0xde38>
   20950:	ldr	r2, [sp, #12]
   20954:	ldr	r3, [r4]
   20958:	cmp	r2, r3
   2095c:	bne	20970 <__assert_fail@plt+0xe148>
   20960:	add	sp, sp, #16
   20964:	pop	{r4, lr}
   20968:	add	sp, sp, #16
   2096c:	bx	lr
   20970:	bl	12360 <__stack_chk_fail@plt>
   20974:	andeq	r3, r2, r0, lsl r7
   20978:	andeq	r0, r0, r4, lsr #4
   2097c:			; <UNDEFINED> instruction: 0xfffffbc4
   20980:	push	{lr}		; (str lr, [sp, #-4]!)
   20984:	sub	sp, sp, #20
   20988:	add	ip, sp, #16
   2098c:	ldr	lr, [pc, #36]	; 209b8 <__assert_fail@plt+0xe190>
   20990:	mov	r3, #1
   20994:	str	r1, [ip, #-4]!
   20998:	add	lr, pc, lr
   2099c:	mov	r1, r2
   209a0:	str	ip, [sp, #4]
   209a4:	str	lr, [sp]
   209a8:	mov	r2, #0
   209ac:	bl	20660 <__assert_fail@plt+0xde38>
   209b0:	add	sp, sp, #20
   209b4:	pop	{pc}		; (ldr pc, [sp], #4)
   209b8:			; <UNDEFINED> instruction: 0xfffffb7c
   209bc:	push	{r4, r5, r6, lr}
   209c0:	sub	sp, sp, #32
   209c4:	ldr	lr, [pc, #96]	; 20a2c <__assert_fail@plt+0xe204>
   209c8:	add	ip, sp, #32
   209cc:	ldr	r4, [pc, #92]	; 20a30 <__assert_fail@plt+0xe208>
   209d0:	add	r6, sp, #16
   209d4:	add	lr, pc, lr
   209d8:	ldr	r5, [pc, #84]	; 20a34 <__assert_fail@plt+0xe20c>
   209dc:	ldr	r4, [lr, r4]
   209e0:	add	r5, pc, r5
   209e4:	str	r1, [sp, #16]
   209e8:	mov	r1, #1
   209ec:	str	r2, [sp, #20]
   209f0:	mov	r2, r1
   209f4:	ldr	lr, [r4]
   209f8:	str	r3, [sp, #24]
   209fc:	mov	r3, r1
   20a00:	str	r6, [ip, #-20]!	; 0xffffffec
   20a04:	stm	sp, {r5, ip}
   20a08:	str	lr, [sp, #28]
   20a0c:	bl	20660 <__assert_fail@plt+0xde38>
   20a10:	ldr	r2, [sp, #28]
   20a14:	ldr	r3, [r4]
   20a18:	cmp	r2, r3
   20a1c:	bne	20a28 <__assert_fail@plt+0xe200>
   20a20:	add	sp, sp, #32
   20a24:	pop	{r4, r5, r6, pc}
   20a28:	bl	12360 <__stack_chk_fail@plt>
   20a2c:	andeq	r3, r2, r4, lsr #12
   20a30:	andeq	r0, r0, r4, lsr #4
   20a34:			; <UNDEFINED> instruction: 0xfffffb34
   20a38:	ldr	ip, [pc, #144]	; 20ad0 <__assert_fail@plt+0xe2a8>
   20a3c:	push	{r4, r5, r6, r7, r8, lr}
   20a40:	add	ip, pc, ip
   20a44:	ldr	r5, [pc, #136]	; 20ad4 <__assert_fail@plt+0xe2ac>
   20a48:	mov	r4, r1
   20a4c:	mov	r1, ip
   20a50:	sub	sp, sp, #16
   20a54:	subs	r7, r0, #0
   20a58:	mov	r8, r2
   20a5c:	ldr	r6, [ip, r5]
   20a60:	moveq	r0, r4
   20a64:	ldr	r1, [r6]
   20a68:	str	r1, [sp, #12]
   20a6c:	beq	20ab4 <__assert_fail@plt+0xe28c>
   20a70:	add	r5, sp, #16
   20a74:	mov	r0, r4
   20a78:	str	r4, [r5, #-8]!
   20a7c:	bl	20624 <__assert_fail@plt+0xddfc>
   20a80:	ldr	ip, [pc, #80]	; 20ad8 <__assert_fail@plt+0xe2b0>
   20a84:	mov	r3, r8
   20a88:	str	r5, [sp, #4]
   20a8c:	mov	r2, #1
   20a90:	add	ip, pc, ip
   20a94:	str	ip, [sp]
   20a98:	mov	r1, r0
   20a9c:	mov	r0, r7
   20aa0:	bl	20660 <__assert_fail@plt+0xde38>
   20aa4:	mov	r5, r0
   20aa8:	mov	r0, r4
   20aac:	bl	122c4 <free@plt>
   20ab0:	mov	r0, r5
   20ab4:	ldr	r2, [sp, #12]
   20ab8:	ldr	r3, [r6]
   20abc:	cmp	r2, r3
   20ac0:	bne	20acc <__assert_fail@plt+0xe2a4>
   20ac4:	add	sp, sp, #16
   20ac8:	pop	{r4, r5, r6, r7, r8, pc}
   20acc:	bl	12360 <__stack_chk_fail@plt>
   20ad0:			; <UNDEFINED> instruction: 0x000235b8
   20ad4:	andeq	r0, r0, r4, lsr #4
   20ad8:			; <UNDEFINED> instruction: 0xfffffa84
   20adc:	push	{r4, lr}
   20ae0:	mov	r4, r0
   20ae4:	bl	20624 <__assert_fail@plt+0xddfc>
   20ae8:	mov	r1, r4
   20aec:	pop	{r4, lr}
   20af0:	mov	r2, r0
   20af4:	mov	r0, #0
   20af8:	b	20980 <__assert_fail@plt+0xe158>
   20afc:	push	{r4, r5, r6, lr}
   20b00:	mov	r6, r1
   20b04:	mov	r4, r0
   20b08:	b	20b18 <__assert_fail@plt+0xe2f0>
   20b0c:	ldr	r3, [r4], #12
   20b10:	cmp	r3, r6
   20b14:	beq	20b34 <__assert_fail@plt+0xe30c>
   20b18:	mov	r0, r4
   20b1c:	mov	r5, r4
   20b20:	bl	20600 <__assert_fail@plt+0xddd8>
   20b24:	cmp	r0, #0
   20b28:	beq	20b0c <__assert_fail@plt+0xe2e4>
   20b2c:	mov	r0, #0
   20b30:	pop	{r4, r5, r6, pc}
   20b34:	mov	r0, r5
   20b38:	pop	{r4, r5, r6, pc}
   20b3c:	cmp	r1, #0
   20b40:	push	{r4}		; (str r4, [sp, #-4]!)
   20b44:	beq	20b88 <__assert_fail@plt+0xe360>
   20b48:	ldr	r3, [r0]
   20b4c:	cmp	r3, r2
   20b50:	beq	20b80 <__assert_fail@plt+0xe358>
   20b54:	add	ip, r0, #12
   20b58:	mov	r3, #0
   20b5c:	b	20b6c <__assert_fail@plt+0xe344>
   20b60:	ldr	r4, [ip], #12
   20b64:	cmp	r4, r2
   20b68:	beq	20b80 <__assert_fail@plt+0xe358>
   20b6c:	add	r3, r3, #1
   20b70:	mov	r0, ip
   20b74:	cmp	r3, r1
   20b78:	bne	20b60 <__assert_fail@plt+0xe338>
   20b7c:	mov	r0, #0
   20b80:	pop	{r4}		; (ldr r4, [sp], #4)
   20b84:	bx	lr
   20b88:	mov	r0, r1
   20b8c:	b	20b80 <__assert_fail@plt+0xe358>
   20b90:	push	{r4, r5, r6, lr}
   20b94:	mov	r5, r1
   20b98:	mov	r6, r2
   20b9c:	mov	r4, r0
   20ba0:	b	20ba8 <__assert_fail@plt+0xe380>
   20ba4:	add	r4, r4, #12
   20ba8:	mov	r0, r4
   20bac:	bl	20600 <__assert_fail@plt+0xddd8>
   20bb0:	cmp	r0, #0
   20bb4:	bne	20be8 <__assert_fail@plt+0xe3c0>
   20bb8:	ldr	r3, [r4]
   20bbc:	cmp	r3, r5
   20bc0:	bne	20ba4 <__assert_fail@plt+0xe37c>
   20bc4:	ldr	r0, [r4, #8]
   20bc8:	cmp	r0, #1
   20bcc:	bne	20ba4 <__assert_fail@plt+0xe37c>
   20bd0:	ldr	r3, [r4, #4]
   20bd4:	cmp	r3, #0
   20bd8:	beq	20ba4 <__assert_fail@plt+0xe37c>
   20bdc:	ldrb	r3, [r3]
   20be0:	strb	r3, [r6]
   20be4:	pop	{r4, r5, r6, pc}
   20be8:	mov	r0, #0
   20bec:	pop	{r4, r5, r6, pc}
   20bf0:	cmp	r1, #0
   20bf4:	push	{r4, r5}
   20bf8:	beq	20c48 <__assert_fail@plt+0xe420>
   20bfc:	mov	ip, #0
   20c00:	b	20c10 <__assert_fail@plt+0xe3e8>
   20c04:	cmp	ip, r1
   20c08:	add	r0, r0, #12
   20c0c:	beq	20c48 <__assert_fail@plt+0xe420>
   20c10:	ldr	r4, [r0]
   20c14:	add	ip, ip, #1
   20c18:	cmp	r4, r2
   20c1c:	bne	20c04 <__assert_fail@plt+0xe3dc>
   20c20:	ldr	r4, [r0, #8]
   20c24:	cmp	r4, #1
   20c28:	bne	20c04 <__assert_fail@plt+0xe3dc>
   20c2c:	ldr	r5, [r0, #4]
   20c30:	cmp	r5, #0
   20c34:	beq	20c04 <__assert_fail@plt+0xe3dc>
   20c38:	ldrb	r2, [r5]
   20c3c:	mov	r0, r4
   20c40:	strb	r2, [r3]
   20c44:	b	20c4c <__assert_fail@plt+0xe424>
   20c48:	mov	r0, #0
   20c4c:	pop	{r4, r5}
   20c50:	bx	lr
   20c54:	push	{r4, r5, r6, lr}
   20c58:	mov	r5, r1
   20c5c:	mov	r6, r2
   20c60:	mov	r4, r0
   20c64:	b	20c6c <__assert_fail@plt+0xe444>
   20c68:	add	r4, r4, #12
   20c6c:	mov	r0, r4
   20c70:	bl	20600 <__assert_fail@plt+0xddd8>
   20c74:	cmp	r0, #0
   20c78:	bne	20cb0 <__assert_fail@plt+0xe488>
   20c7c:	ldr	r3, [r4]
   20c80:	cmp	r3, r5
   20c84:	bne	20c68 <__assert_fail@plt+0xe440>
   20c88:	ldr	r3, [r4, #8]
   20c8c:	cmp	r3, #4
   20c90:	bne	20c68 <__assert_fail@plt+0xe440>
   20c94:	ldr	r3, [r4, #4]
   20c98:	cmp	r3, #0
   20c9c:	beq	20c68 <__assert_fail@plt+0xe440>
   20ca0:	ldr	r3, [r3]
   20ca4:	mov	r0, #1
   20ca8:	str	r3, [r6]
   20cac:	pop	{r4, r5, r6, pc}
   20cb0:	mov	r0, #0
   20cb4:	pop	{r4, r5, r6, pc}
   20cb8:	cmp	r1, #0
   20cbc:	push	{r4}		; (str r4, [sp, #-4]!)
   20cc0:	beq	20d10 <__assert_fail@plt+0xe4e8>
   20cc4:	mov	ip, #0
   20cc8:	b	20cd8 <__assert_fail@plt+0xe4b0>
   20ccc:	cmp	ip, r1
   20cd0:	add	r0, r0, #12
   20cd4:	beq	20d10 <__assert_fail@plt+0xe4e8>
   20cd8:	ldr	r4, [r0]
   20cdc:	add	ip, ip, #1
   20ce0:	cmp	r4, r2
   20ce4:	bne	20ccc <__assert_fail@plt+0xe4a4>
   20ce8:	ldr	r4, [r0, #8]
   20cec:	cmp	r4, #4
   20cf0:	bne	20ccc <__assert_fail@plt+0xe4a4>
   20cf4:	ldr	r4, [r0, #4]
   20cf8:	cmp	r4, #0
   20cfc:	beq	20ccc <__assert_fail@plt+0xe4a4>
   20d00:	ldr	r2, [r4]
   20d04:	mov	r0, #1
   20d08:	str	r2, [r3]
   20d0c:	b	20d14 <__assert_fail@plt+0xe4ec>
   20d10:	mov	r0, #0
   20d14:	pop	{r4}		; (ldr r4, [sp], #4)
   20d18:	bx	lr
   20d1c:	push	{r4, r5, r6, lr}
   20d20:	mov	r5, r1
   20d24:	mov	r6, r2
   20d28:	mov	r4, r0
   20d2c:	b	20d34 <__assert_fail@plt+0xe50c>
   20d30:	add	r4, r4, #12
   20d34:	mov	r0, r4
   20d38:	bl	20600 <__assert_fail@plt+0xddd8>
   20d3c:	cmp	r0, #0
   20d40:	bne	20d7c <__assert_fail@plt+0xe554>
   20d44:	ldr	r3, [r4]
   20d48:	cmp	r3, r5
   20d4c:	bne	20d30 <__assert_fail@plt+0xe508>
   20d50:	ldr	r3, [r4, #8]
   20d54:	sub	r1, r3, #1
   20d58:	cmn	r1, #3
   20d5c:	bhi	20d30 <__assert_fail@plt+0xe508>
   20d60:	ldr	r0, [r4, #4]
   20d64:	cmp	r0, #0
   20d68:	beq	20d30 <__assert_fail@plt+0xe508>
   20d6c:	cmp	r6, #0
   20d70:	strne	r3, [r6]
   20d74:	ldrne	r0, [r4, #4]
   20d78:	pop	{r4, r5, r6, pc}
   20d7c:	mov	r0, #0
   20d80:	pop	{r4, r5, r6, pc}
   20d84:	push	{r3, r4, r5, lr}
   20d88:	mov	r5, r1
   20d8c:	mov	r4, r0
   20d90:	b	20d98 <__assert_fail@plt+0xe570>
   20d94:	add	r4, r4, #12
   20d98:	mov	r0, r4
   20d9c:	bl	20600 <__assert_fail@plt+0xddd8>
   20da0:	cmp	r0, #0
   20da4:	bne	20dd8 <__assert_fail@plt+0xe5b0>
   20da8:	ldr	r3, [r4]
   20dac:	cmp	r3, r5
   20db0:	bne	20d94 <__assert_fail@plt+0xe56c>
   20db4:	ldr	r3, [r4, #4]
   20db8:	cmp	r3, #0
   20dbc:	beq	20d94 <__assert_fail@plt+0xe56c>
   20dc0:	ldr	r3, [r4, #8]
   20dc4:	sub	r3, r3, #1
   20dc8:	cmn	r3, #3
   20dcc:	bhi	20d94 <__assert_fail@plt+0xe56c>
   20dd0:	mov	r0, r4
   20dd4:	pop	{r3, r4, r5, pc}
   20dd8:	mov	r0, #0
   20ddc:	pop	{r3, r4, r5, pc}
   20de0:	push	{r4, r5, r6, r7, r8, lr}
   20de4:	mov	r6, r1
   20de8:	mov	r7, r0
   20dec:	bl	20624 <__assert_fail@plt+0xddfc>
   20df0:	subs	r5, r0, #0
   20df4:	beq	20e28 <__assert_fail@plt+0xe600>
   20df8:	ldr	r3, [r7]
   20dfc:	cmp	r3, r6
   20e00:	beq	20e8c <__assert_fail@plt+0xe664>
   20e04:	mov	r3, r7
   20e08:	mov	r4, #0
   20e0c:	b	20e1c <__assert_fail@plt+0xe5f4>
   20e10:	ldr	r2, [r3, #12]!
   20e14:	cmp	r2, r6
   20e18:	beq	20e30 <__assert_fail@plt+0xe608>
   20e1c:	add	r4, r4, #1
   20e20:	cmp	r4, r5
   20e24:	bne	20e10 <__assert_fail@plt+0xe5e8>
   20e28:	mov	r0, #0
   20e2c:	pop	{r4, r5, r6, r7, r8, pc}
   20e30:	cmp	r5, r4
   20e34:	addne	r6, r4, r4, lsl #1
   20e38:	lslne	r6, r6, #2
   20e3c:	addne	r8, r6, #12
   20e40:	beq	20e28 <__assert_fail@plt+0xe600>
   20e44:	add	r6, r7, r6
   20e48:	ldr	r0, [r6, #4]
   20e4c:	cmp	r0, #0
   20e50:	beq	20e58 <__assert_fail@plt+0xe630>
   20e54:	bl	122c4 <free@plt>
   20e58:	rsb	r4, r4, r5
   20e5c:	add	r5, r5, r5, lsl #1
   20e60:	add	r1, r7, r8
   20e64:	mov	r0, r6
   20e68:	add	r4, r4, r4, lsl #1
   20e6c:	add	r7, r7, r5, lsl #2
   20e70:	lsl	r2, r4, #2
   20e74:	sub	r2, r2, #12
   20e78:	bl	122b8 <memmove@plt>
   20e7c:	mvn	r3, #0
   20e80:	mov	r0, #1
   20e84:	str	r3, [r7, #-12]
   20e88:	pop	{r4, r5, r6, r7, r8, pc}
   20e8c:	mov	r6, #0
   20e90:	mov	r8, #12
   20e94:	mov	r4, r6
   20e98:	b	20e44 <__assert_fail@plt+0xe61c>
   20e9c:	push	{r4, r5, r6, r7, r8, lr}
   20ea0:	mov	r5, #0
   20ea4:	mov	r8, r0
   20ea8:	mov	r4, r0
   20eac:	mov	r6, r5
   20eb0:	b	20ee8 <__assert_fail@plt+0xe6c0>
   20eb4:	cmp	r6, r5
   20eb8:	beq	20edc <__assert_fail@plt+0xe6b4>
   20ebc:	add	r2, r5, r5, lsl #1
   20ec0:	ldr	ip, [r4]
   20ec4:	ldr	r0, [r4, #4]
   20ec8:	ldr	r1, [r4, #8]
   20ecc:	add	r3, r8, r2, lsl #2
   20ed0:	str	ip, [r8, r2, lsl #2]
   20ed4:	str	r0, [r3, #4]
   20ed8:	str	r1, [r3, #8]
   20edc:	add	r5, r5, #1
   20ee0:	add	r6, r6, #1
   20ee4:	add	r4, r4, #12
   20ee8:	mov	r0, r4
   20eec:	bl	20600 <__assert_fail@plt+0xddd8>
   20ef0:	subs	r7, r0, #0
   20ef4:	bne	20f18 <__assert_fail@plt+0xe6f0>
   20ef8:	ldr	r3, [r4, #8]
   20efc:	cmn	r3, #1
   20f00:	bne	20eb4 <__assert_fail@plt+0xe68c>
   20f04:	ldr	r0, [r4, #4]
   20f08:	bl	122c4 <free@plt>
   20f0c:	str	r7, [r4, #4]
   20f10:	str	r7, [r4, #8]
   20f14:	b	20ee0 <__assert_fail@plt+0xe6b8>
   20f18:	add	r5, r5, r5, lsl #1
   20f1c:	mvn	r3, #0
   20f20:	lsl	r5, r5, #2
   20f24:	add	r0, r8, r5
   20f28:	str	r3, [r8, r5]
   20f2c:	bl	20600 <__assert_fail@plt+0xddd8>
   20f30:	cmp	r0, #0
   20f34:	popne	{r4, r5, r6, r7, r8, pc}
   20f38:	ldr	r3, [pc, #28]	; 20f5c <__assert_fail@plt+0xe734>
   20f3c:	mov	r2, #440	; 0x1b8
   20f40:	ldr	r0, [pc, #24]	; 20f60 <__assert_fail@plt+0xe738>
   20f44:	ldr	r1, [pc, #24]	; 20f64 <__assert_fail@plt+0xe73c>
   20f48:	add	r3, pc, r3
   20f4c:	add	r0, pc, r0
   20f50:	add	r3, r3, #48	; 0x30
   20f54:	add	r1, pc, r1
   20f58:	bl	12828 <__assert_fail@plt>
   20f5c:	strdeq	r8, [r0], -r4
   20f60:	andeq	r8, r0, ip, lsl #29
   20f64:	andeq	r8, r0, r4, ror lr
   20f68:	cmp	r2, #0
   20f6c:	push	{r3, r4, r5, lr}
   20f70:	mov	r4, r0
   20f74:	mov	r5, r1
   20f78:	blt	20f98 <__assert_fail@plt+0xe770>
   20f7c:	cmp	r4, #0
   20f80:	beq	20fac <__assert_fail@plt+0xe784>
   20f84:	ldr	r3, [r4, #8]
   20f88:	cmp	r3, r2
   20f8c:	beq	20fb4 <__assert_fail@plt+0xe78c>
   20f90:	mov	r0, #0
   20f94:	pop	{r3, r4, r5, pc}
   20f98:	mov	r0, r1
   20f9c:	bl	12540 <strlen@plt>
   20fa0:	cmp	r4, #0
   20fa4:	mov	r2, r0
   20fa8:	bne	20f84 <__assert_fail@plt+0xe75c>
   20fac:	mov	r0, r4
   20fb0:	pop	{r3, r4, r5, pc}
   20fb4:	ldr	r0, [r4, #4]
   20fb8:	cmp	r0, r5
   20fbc:	beq	20fec <__assert_fail@plt+0xe7c4>
   20fc0:	cmp	r0, #0
   20fc4:	popeq	{r3, r4, r5, pc}
   20fc8:	cmp	r5, #0
   20fcc:	beq	20fe4 <__assert_fail@plt+0xe7bc>
   20fd0:	mov	r1, r5
   20fd4:	bl	12324 <memcmp@plt>
   20fd8:	rsbs	r0, r0, #1
   20fdc:	movcc	r0, #0
   20fe0:	pop	{r3, r4, r5, pc}
   20fe4:	mov	r0, r5
   20fe8:	pop	{r3, r4, r5, pc}
   20fec:	mov	r0, #1
   20ff0:	pop	{r3, r4, r5, pc}
   20ff4:	cmp	r0, r1
   20ff8:	mov	r3, r1
   20ffc:	beq	21038 <__assert_fail@plt+0xe810>
   21000:	cmp	r0, #0
   21004:	cmpne	r1, #0
   21008:	moveq	r1, #0
   2100c:	movne	r1, #1
   21010:	beq	21028 <__assert_fail@plt+0xe800>
   21014:	ldr	r1, [r0]
   21018:	ldr	r2, [r3]
   2101c:	cmp	r1, r2
   21020:	movne	r1, #0
   21024:	beq	21030 <__assert_fail@plt+0xe808>
   21028:	mov	r0, r1
   2102c:	bx	lr
   21030:	ldmib	r3, {r1, r2}
   21034:	b	20f68 <__assert_fail@plt+0xe740>
   21038:	mov	r1, #1
   2103c:	mov	r0, r1
   21040:	bx	lr
   21044:	push	{r4, r5, r6, lr}
   21048:	mov	r6, r0
   2104c:	mov	r4, r1
   21050:	b	21078 <__assert_fail@plt+0xe850>
   21054:	ldr	r1, [r4]
   21058:	bl	20afc <__assert_fail@plt+0xe2d4>
   2105c:	mov	r1, r4
   21060:	add	r4, r4, #12
   21064:	cmp	r0, #0
   21068:	beq	2108c <__assert_fail@plt+0xe864>
   2106c:	bl	20ff4 <__assert_fail@plt+0xe7cc>
   21070:	cmp	r0, #0
   21074:	beq	2108c <__assert_fail@plt+0xe864>
   21078:	mov	r0, r4
   2107c:	bl	20600 <__assert_fail@plt+0xddd8>
   21080:	subs	r5, r0, #0
   21084:	mov	r0, r6
   21088:	beq	21054 <__assert_fail@plt+0xe82c>
   2108c:	mov	r0, r5
   21090:	pop	{r4, r5, r6, pc}
   21094:	push	{r3, r4, r5, r6, r7, lr}
   21098:	subs	r7, r2, #0
   2109c:	mov	r6, r0
   210a0:	movne	r4, r1
   210a4:	movne	r5, #0
   210a8:	bne	210c4 <__assert_fail@plt+0xe89c>
   210ac:	b	210ec <__assert_fail@plt+0xe8c4>
   210b0:	bl	20ff4 <__assert_fail@plt+0xe7cc>
   210b4:	cmp	r0, #0
   210b8:	beq	210e4 <__assert_fail@plt+0xe8bc>
   210bc:	cmp	r5, r7
   210c0:	beq	210ec <__assert_fail@plt+0xe8c4>
   210c4:	ldr	r1, [r4]
   210c8:	mov	r0, r6
   210cc:	bl	20afc <__assert_fail@plt+0xe2d4>
   210d0:	add	r5, r5, #1
   210d4:	mov	r1, r4
   210d8:	add	r4, r4, #12
   210dc:	cmp	r0, #0
   210e0:	bne	210b0 <__assert_fail@plt+0xe888>
   210e4:	mov	r0, #0
   210e8:	pop	{r3, r4, r5, r6, r7, pc}
   210ec:	mov	r0, #1
   210f0:	pop	{r3, r4, r5, r6, r7, pc}
   210f4:	ldr	r3, [pc, #104]	; 21164 <__assert_fail@plt+0xe93c>
   210f8:	cmp	r0, #0
   210fc:	ldr	r1, [pc, #100]	; 21168 <__assert_fail@plt+0xe940>
   21100:	mov	r2, #0
   21104:	add	r3, pc, r3
   21108:	push	{r4, lr}
   2110c:	sub	sp, sp, #16
   21110:	ldr	r4, [r3, r1]
   21114:	str	r2, [sp, #8]
   21118:	ldr	r3, [r4]
   2111c:	str	r3, [sp, #12]
   21120:	beq	21148 <__assert_fail@plt+0xe920>
   21124:	ldr	ip, [r0, #8]
   21128:	mov	r1, r0
   2112c:	ldr	r3, [r0, #4]
   21130:	add	r0, sp, #8
   21134:	str	r2, [sp, #4]
   21138:	mov	r2, #4
   2113c:	str	ip, [sp]
   21140:	bl	23808 <p11_dict_direct_equal@@Base+0x10>
   21144:	ldr	r0, [sp, #8]
   21148:	ldr	r2, [sp, #12]
   2114c:	ldr	r3, [r4]
   21150:	cmp	r2, r3
   21154:	bne	21160 <__assert_fail@plt+0xe938>
   21158:	add	sp, sp, #16
   2115c:	pop	{r4, pc}
   21160:	bl	12360 <__stack_chk_fail@plt>
   21164:	strdeq	r2, [r2], -r4
   21168:	andeq	r0, r0, r4, lsr #4
   2116c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21170:	mov	r6, r1
   21174:	ldr	r7, [pc, #1636]	; 217e0 <__assert_fail@plt+0xefb8>
   21178:	sub	sp, sp, #20
   2117c:	ldr	r3, [pc, #1632]	; 217e4 <__assert_fail@plt+0xefbc>
   21180:	mov	sl, r2
   21184:	add	r7, pc, r7
   21188:	ldr	r1, [pc, #1624]	; 217e8 <__assert_fail@plt+0xefc0>
   2118c:	mvn	r2, #0
   21190:	mov	r4, r0
   21194:	ldr	r5, [r7, r3]
   21198:	add	r1, pc, r1
   2119c:	ldr	r3, [r5]
   211a0:	str	r3, [sp, #12]
   211a4:	bl	2212c <__assert_fail@plt+0xf904>
   211a8:	ldr	r3, [pc, #1596]	; 217ec <__assert_fail@plt+0xefc4>
   211ac:	ldr	r8, [r6]
   211b0:	ldr	r0, [r7, r3]
   211b4:	mov	r1, r8
   211b8:	bl	228ec <secure_getenv@@Base+0x298>
   211bc:	subs	r1, r0, #0
   211c0:	beq	21438 <__assert_fail@plt+0xec10>
   211c4:	mov	r0, r4
   211c8:	mvn	r2, #0
   211cc:	bl	2212c <__assert_fail@plt+0xf904>
   211d0:	ldr	r1, [pc, #1560]	; 217f0 <__assert_fail@plt+0xefc8>
   211d4:	mov	r0, r4
   211d8:	mvn	r2, #0
   211dc:	add	r1, pc, r1
   211e0:	bl	2212c <__assert_fail@plt+0xf904>
   211e4:	ldr	r9, [r6, #8]
   211e8:	cmn	r9, #1
   211ec:	beq	21584 <__assert_fail@plt+0xed5c>
   211f0:	ldr	r8, [r6]
   211f4:	cmp	r8, #0
   211f8:	beq	2127c <__assert_fail@plt+0xea54>
   211fc:	movw	r3, #18177	; 0x4701
   21200:	movt	r3, #55364	; 0xd844
   21204:	cmp	r8, r3
   21208:	beq	21450 <__assert_fail@plt+0xec28>
   2120c:	cmp	r8, #128	; 0x80
   21210:	bne	213e0 <__assert_fail@plt+0xebb8>
   21214:	mov	r0, r6
   21218:	bl	205dc <__assert_fail@plt+0xddb4>
   2121c:	cmp	r0, #0
   21220:	beq	212b0 <__assert_fail@plt+0xea88>
   21224:	ldr	r2, [r6, #4]
   21228:	ldr	r3, [pc, #1476]	; 217f4 <__assert_fail@plt+0xefcc>
   2122c:	ldr	r6, [r2]
   21230:	ldr	r0, [r7, r3]
   21234:	mov	r1, r6
   21238:	bl	228ec <secure_getenv@@Base+0x298>
   2123c:	subs	r1, r0, #0
   21240:	beq	216d0 <__assert_fail@plt+0xeea8>
   21244:	mov	r0, r4
   21248:	mvn	r2, #0
   2124c:	bl	2212c <__assert_fail@plt+0xf904>
   21250:	ldr	r1, [pc, #1440]	; 217f8 <__assert_fail@plt+0xefd0>
   21254:	mvn	r2, #0
   21258:	mov	r0, r4
   2125c:	add	r1, pc, r1
   21260:	bl	2212c <__assert_fail@plt+0xf904>
   21264:	ldr	r2, [sp, #12]
   21268:	ldr	r3, [r5]
   2126c:	cmp	r2, r3
   21270:	bne	217dc <__assert_fail@plt+0xefb4>
   21274:	add	sp, sp, #20
   21278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2127c:	mov	r0, r6
   21280:	bl	205dc <__assert_fail@plt+0xddb4>
   21284:	cmp	r0, #0
   21288:	bne	21498 <__assert_fail@plt+0xec70>
   2128c:	movw	r3, #40111	; 0x9caf
   21290:	movt	r3, #12716	; 0x31ac
   21294:	add	r3, r8, r3
   21298:	cmp	r3, #14
   2129c:	bhi	212b0 <__assert_fail@plt+0xea88>
   212a0:	mov	r0, r6
   212a4:	bl	205dc <__assert_fail@plt+0xddb4>
   212a8:	cmp	r0, #0
   212ac:	bne	215e8 <__assert_fail@plt+0xedc0>
   212b0:	movw	r3, #770	; 0x302
   212b4:	cmp	r8, r3
   212b8:	bhi	21620 <__assert_fail@plt+0xedf8>
   212bc:	cmp	r8, #768	; 0x300
   212c0:	bcs	21304 <__assert_fail@plt+0xeadc>
   212c4:	movw	r3, #273	; 0x111
   212c8:	cmp	r8, r3
   212cc:	bhi	21598 <__assert_fail@plt+0xed70>
   212d0:	cmp	r8, #272	; 0x110
   212d4:	bcs	21304 <__assert_fail@plt+0xeadc>
   212d8:	cmp	r8, #18
   212dc:	beq	21304 <__assert_fail@plt+0xeadc>
   212e0:	bhi	21718 <__assert_fail@plt+0xeef0>
   212e4:	cmp	r8, #16
   212e8:	beq	21304 <__assert_fail@plt+0xeadc>
   212ec:	bls	217b4 <__assert_fail@plt+0xef8c>
   212f0:	movw	r3, #18376	; 0x47c8
   212f4:	movt	r3, #55364	; 0xd844
   212f8:	cmp	sl, r3
   212fc:	cmpne	sl, #1
   21300:	bne	215d0 <__assert_fail@plt+0xeda8>
   21304:	ldr	r1, [pc, #1264]	; 217fc <__assert_fail@plt+0xefd4>
   21308:	mov	r0, r4
   2130c:	mov	r2, r9
   21310:	add	r1, pc, r1
   21314:	bl	20530 <__assert_fail@plt+0xdd08>
   21318:	ldr	r7, [r6, #4]
   2131c:	mov	r0, r4
   21320:	ldr	r6, [r6, #8]
   21324:	cmp	r7, #0
   21328:	beq	21734 <__assert_fail@plt+0xef0c>
   2132c:	ldr	r1, [pc, #1228]	; 21800 <__assert_fail@plt+0xefd8>
   21330:	mov	r2, #1
   21334:	add	r1, pc, r1
   21338:	bl	2212c <__assert_fail@plt+0xf904>
   2133c:	cmp	r6, #0
   21340:	beq	2156c <__assert_fail@plt+0xed44>
   21344:	ldr	r3, [pc, #1208]	; 21804 <__assert_fail@plt+0xefdc>
   21348:	add	r8, sp, #11
   2134c:	ldr	r9, [pc, #1204]	; 21808 <__assert_fail@plt+0xefe0>
   21350:	mov	fp, #0
   21354:	add	r3, pc, r3
   21358:	ldr	sl, [pc, #1196]	; 2180c <__assert_fail@plt+0xefe4>
   2135c:	str	r3, [sp, #4]
   21360:	add	r9, pc, r9
   21364:	ldr	r3, [pc, #1188]	; 21810 <__assert_fail@plt+0xefe8>
   21368:	add	sl, pc, sl
   2136c:	add	r3, pc, r3
   21370:	str	r3, [sp]
   21374:	b	213a4 <__assert_fail@plt+0xeb7c>
   21378:	mov	r1, r8
   2137c:	mov	r2, #1
   21380:	bl	2212c <__assert_fail@plt+0xf904>
   21384:	add	fp, fp, #1
   21388:	cmp	fp, #127	; 0x7f
   2138c:	movhi	r2, #0
   21390:	movls	r2, #1
   21394:	cmp	r6, fp
   21398:	movls	r2, #0
   2139c:	cmp	r2, #0
   213a0:	beq	21554 <__assert_fail@plt+0xed2c>
   213a4:	ldrb	r2, [r7, fp]
   213a8:	cmp	r2, #9
   213ac:	strb	r2, [sp, #11]
   213b0:	beq	214d0 <__assert_fail@plt+0xeca8>
   213b4:	cmp	r2, #10
   213b8:	beq	214e4 <__assert_fail@plt+0xecbc>
   213bc:	cmp	r2, #13
   213c0:	beq	214f8 <__assert_fail@plt+0xecd0>
   213c4:	sub	r1, r2, #32
   213c8:	mov	r0, r4
   213cc:	cmp	r1, #94	; 0x5e
   213d0:	bls	21378 <__assert_fail@plt+0xeb50>
   213d4:	mov	r1, r9
   213d8:	bl	20530 <__assert_fail@plt+0xdd08>
   213dc:	b	21384 <__assert_fail@plt+0xeb5c>
   213e0:	cmp	r8, #135	; 0x87
   213e4:	beq	2150c <__assert_fail@plt+0xece4>
   213e8:	cmp	r8, #256	; 0x100
   213ec:	bne	2128c <__assert_fail@plt+0xea64>
   213f0:	mov	r0, r6
   213f4:	bl	205dc <__assert_fail@plt+0xddb4>
   213f8:	cmp	r0, #0
   213fc:	beq	21304 <__assert_fail@plt+0xeadc>
   21400:	ldr	r2, [r6, #4]
   21404:	ldr	r3, [pc, #1032]	; 21814 <__assert_fail@plt+0xefec>
   21408:	ldr	r6, [r2]
   2140c:	ldr	r0, [r7, r3]
   21410:	mov	r1, r6
   21414:	bl	228ec <secure_getenv@@Base+0x298>
   21418:	subs	r1, r0, #0
   2141c:	bne	21244 <__assert_fail@plt+0xea1c>
   21420:	ldr	r1, [pc, #1008]	; 21818 <__assert_fail@plt+0xeff0>
   21424:	mov	r2, r6
   21428:	mov	r0, r4
   2142c:	add	r1, pc, r1
   21430:	bl	20530 <__assert_fail@plt+0xdd08>
   21434:	b	21250 <__assert_fail@plt+0xea28>
   21438:	ldr	r1, [pc, #988]	; 2181c <__assert_fail@plt+0xeff4>
   2143c:	mov	r2, r8
   21440:	mov	r0, r4
   21444:	add	r1, pc, r1
   21448:	bl	20530 <__assert_fail@plt+0xdd08>
   2144c:	b	211d0 <__assert_fail@plt+0xe9a8>
   21450:	mov	r0, r6
   21454:	bl	205dc <__assert_fail@plt+0xddb4>
   21458:	cmp	r0, #0
   2145c:	beq	2128c <__assert_fail@plt+0xea64>
   21460:	ldr	r2, [r6, #4]
   21464:	ldr	r3, [pc, #948]	; 21820 <__assert_fail@plt+0xeff8>
   21468:	ldr	r6, [r2]
   2146c:	ldr	r0, [r7, r3]
   21470:	mov	r1, r6
   21474:	bl	228ec <secure_getenv@@Base+0x298>
   21478:	subs	r1, r0, #0
   2147c:	bne	21244 <__assert_fail@plt+0xea1c>
   21480:	ldr	r1, [pc, #924]	; 21824 <__assert_fail@plt+0xeffc>
   21484:	mov	r2, r6
   21488:	mov	r0, r4
   2148c:	add	r1, pc, r1
   21490:	bl	20530 <__assert_fail@plt+0xdd08>
   21494:	b	21250 <__assert_fail@plt+0xea28>
   21498:	ldr	r2, [r6, #4]
   2149c:	ldr	r3, [pc, #900]	; 21828 <__assert_fail@plt+0xf000>
   214a0:	ldr	r6, [r2]
   214a4:	ldr	r0, [r7, r3]
   214a8:	mov	r1, r6
   214ac:	bl	228ec <secure_getenv@@Base+0x298>
   214b0:	subs	r1, r0, #0
   214b4:	bne	21244 <__assert_fail@plt+0xea1c>
   214b8:	ldr	r1, [pc, #876]	; 2182c <__assert_fail@plt+0xf004>
   214bc:	mov	r2, r6
   214c0:	mov	r0, r4
   214c4:	add	r1, pc, r1
   214c8:	bl	20530 <__assert_fail@plt+0xdd08>
   214cc:	b	21250 <__assert_fail@plt+0xea28>
   214d0:	mov	r0, r4
   214d4:	mov	r1, sl
   214d8:	mvn	r2, #0
   214dc:	bl	2212c <__assert_fail@plt+0xf904>
   214e0:	b	21384 <__assert_fail@plt+0xeb5c>
   214e4:	mov	r0, r4
   214e8:	ldr	r1, [sp]
   214ec:	mvn	r2, #0
   214f0:	bl	2212c <__assert_fail@plt+0xf904>
   214f4:	b	21384 <__assert_fail@plt+0xeb5c>
   214f8:	mov	r0, r4
   214fc:	ldr	r1, [sp, #4]
   21500:	mvn	r2, #0
   21504:	bl	2212c <__assert_fail@plt+0xf904>
   21508:	b	21384 <__assert_fail@plt+0xeb5c>
   2150c:	mov	r0, r6
   21510:	bl	205dc <__assert_fail@plt+0xddb4>
   21514:	cmp	r0, #0
   21518:	beq	212b0 <__assert_fail@plt+0xea88>
   2151c:	ldr	r2, [r6, #4]
   21520:	ldr	r3, [pc, #776]	; 21830 <__assert_fail@plt+0xf008>
   21524:	ldr	r6, [r2]
   21528:	ldr	r0, [r7, r3]
   2152c:	mov	r1, r6
   21530:	bl	228ec <secure_getenv@@Base+0x298>
   21534:	mov	r2, r6
   21538:	subs	r3, r0, #0
   2153c:	mov	r0, r4
   21540:	beq	216e8 <__assert_fail@plt+0xeec0>
   21544:	ldr	r1, [pc, #744]	; 21834 <__assert_fail@plt+0xf00c>
   21548:	add	r1, pc, r1
   2154c:	bl	20530 <__assert_fail@plt+0xdd08>
   21550:	b	21250 <__assert_fail@plt+0xea28>
   21554:	cmp	r6, fp
   21558:	bls	2156c <__assert_fail@plt+0xed44>
   2155c:	ldr	r1, [pc, #724]	; 21838 <__assert_fail@plt+0xf010>
   21560:	mov	r0, r4
   21564:	add	r1, pc, r1
   21568:	bl	20530 <__assert_fail@plt+0xdd08>
   2156c:	ldr	r1, [pc, #712]	; 2183c <__assert_fail@plt+0xf014>
   21570:	mov	r0, r4
   21574:	mov	r2, #1
   21578:	add	r1, pc, r1
   2157c:	bl	2212c <__assert_fail@plt+0xf904>
   21580:	b	21250 <__assert_fail@plt+0xea28>
   21584:	ldr	r1, [pc, #692]	; 21840 <__assert_fail@plt+0xf018>
   21588:	mov	r0, r4
   2158c:	add	r1, pc, r1
   21590:	bl	20530 <__assert_fail@plt+0xdd08>
   21594:	b	21250 <__assert_fail@plt+0xea28>
   21598:	movw	r3, #358	; 0x166
   2159c:	cmp	r8, r3
   215a0:	bhi	216f8 <__assert_fail@plt+0xeed0>
   215a4:	cmp	r8, #352	; 0x160
   215a8:	bcs	21304 <__assert_fail@plt+0xeadc>
   215ac:	movw	r3, #297	; 0x129
   215b0:	cmp	r8, r3
   215b4:	beq	21304 <__assert_fail@plt+0xeadc>
   215b8:	add	r3, r3, #10
   215bc:	cmp	r8, r3
   215c0:	beq	21304 <__assert_fail@plt+0xeadc>
   215c4:	movw	r3, #289	; 0x121
   215c8:	cmp	r8, r3
   215cc:	beq	21304 <__assert_fail@plt+0xeadc>
   215d0:	ldr	r1, [pc, #620]	; 21844 <__assert_fail@plt+0xf01c>
   215d4:	mov	r2, r9
   215d8:	mov	r0, r4
   215dc:	add	r1, pc, r1
   215e0:	bl	20530 <__assert_fail@plt+0xdd08>
   215e4:	b	21250 <__assert_fail@plt+0xea28>
   215e8:	ldr	r2, [r6, #4]
   215ec:	ldr	r3, [pc, #596]	; 21848 <__assert_fail@plt+0xf020>
   215f0:	ldr	r6, [r2]
   215f4:	ldr	r0, [r7, r3]
   215f8:	mov	r1, r6
   215fc:	bl	228ec <secure_getenv@@Base+0x298>
   21600:	subs	r1, r0, #0
   21604:	bne	21244 <__assert_fail@plt+0xea1c>
   21608:	ldr	r1, [pc, #572]	; 2184c <__assert_fail@plt+0xf024>
   2160c:	mov	r2, r6
   21610:	mov	r0, r4
   21614:	add	r1, pc, r1
   21618:	bl	20530 <__assert_fail@plt+0xdd08>
   2161c:	b	21250 <__assert_fail@plt+0xea28>
   21620:	movw	r3, #17240	; 0x4358
   21624:	movt	r3, #52819	; 0xce53
   21628:	cmp	r8, r3
   2162c:	bhi	21678 <__assert_fail@plt+0xee50>
   21630:	movw	r3, #17233	; 0x4351
   21634:	movt	r3, #52819	; 0xce53
   21638:	cmp	r8, r3
   2163c:	bcs	21304 <__assert_fail@plt+0xeadc>
   21640:	movw	r3, #1283	; 0x503
   21644:	cmp	r8, r3
   21648:	bhi	21748 <__assert_fail@plt+0xef20>
   2164c:	cmp	r8, #1280	; 0x500
   21650:	bcs	21304 <__assert_fail@plt+0xeadc>
   21654:	cmp	r8, #1024	; 0x400
   21658:	bcc	215d0 <__assert_fail@plt+0xeda8>
   2165c:	movw	r3, #1030	; 0x406
   21660:	cmp	r8, r3
   21664:	bls	21304 <__assert_fail@plt+0xeadc>
   21668:	sub	r8, r8, #1152	; 0x480
   2166c:	cmp	r8, #2
   21670:	bhi	215d0 <__assert_fail@plt+0xeda8>
   21674:	b	21304 <__assert_fail@plt+0xeadc>
   21678:	movw	r3, #25525	; 0x63b5
   2167c:	movt	r3, #52819	; 0xce53
   21680:	cmp	r8, r3
   21684:	bhi	2177c <__assert_fail@plt+0xef54>
   21688:	movw	r3, #25524	; 0x63b4
   2168c:	movt	r3, #52819	; 0xce53
   21690:	cmp	r8, r3
   21694:	bcs	21304 <__assert_fail@plt+0xeadc>
   21698:	movw	r3, #17252	; 0x4364
   2169c:	movt	r3, #52819	; 0xce53
   216a0:	cmp	r8, r3
   216a4:	bcc	215d0 <__assert_fail@plt+0xeda8>
   216a8:	movw	r3, #17256	; 0x4368
   216ac:	movt	r3, #52819	; 0xce53
   216b0:	cmp	r8, r3
   216b4:	bls	21304 <__assert_fail@plt+0xeadc>
   216b8:	movw	r3, #40111	; 0x9caf
   216bc:	movt	r3, #12716	; 0x31ac
   216c0:	add	r3, r8, r3
   216c4:	cmp	r3, #15
   216c8:	bhi	215d0 <__assert_fail@plt+0xeda8>
   216cc:	b	21304 <__assert_fail@plt+0xeadc>
   216d0:	ldr	r1, [pc, #376]	; 21850 <__assert_fail@plt+0xf028>
   216d4:	mov	r2, r6
   216d8:	mov	r0, r4
   216dc:	add	r1, pc, r1
   216e0:	bl	20530 <__assert_fail@plt+0xdd08>
   216e4:	b	21250 <__assert_fail@plt+0xea28>
   216e8:	ldr	r1, [pc, #356]	; 21854 <__assert_fail@plt+0xf02c>
   216ec:	add	r1, pc, r1
   216f0:	bl	20530 <__assert_fail@plt+0xdd08>
   216f4:	b	21250 <__assert_fail@plt+0xea28>
   216f8:	movw	r3, #514	; 0x202
   216fc:	cmp	r8, r3
   21700:	bhi	217d0 <__assert_fail@plt+0xefa8>
   21704:	cmp	r8, #512	; 0x200
   21708:	bcs	21304 <__assert_fail@plt+0xeadc>
   2170c:	cmp	r8, #368	; 0x170
   21710:	bne	215d0 <__assert_fail@plt+0xeda8>
   21714:	b	21304 <__assert_fail@plt+0xeadc>
   21718:	cmp	r8, #144	; 0x90
   2171c:	beq	21304 <__assert_fail@plt+0xeadc>
   21720:	bhi	217c0 <__assert_fail@plt+0xef98>
   21724:	sub	r8, r8, #128	; 0x80
   21728:	cmp	r8, #11
   2172c:	bhi	215d0 <__assert_fail@plt+0xeda8>
   21730:	b	21304 <__assert_fail@plt+0xeadc>
   21734:	ldr	r1, [pc, #284]	; 21858 <__assert_fail@plt+0xf030>
   21738:	mvn	r2, #0
   2173c:	add	r1, pc, r1
   21740:	bl	2212c <__assert_fail@plt+0xf904>
   21744:	b	21250 <__assert_fail@plt+0xea28>
   21748:	movw	r3, #529	; 0x211
   2174c:	movt	r3, #16384	; 0x4000
   21750:	cmp	r8, r3
   21754:	bcc	215d0 <__assert_fail@plt+0xeda8>
   21758:	movw	r3, #530	; 0x212
   2175c:	movt	r3, #16384	; 0x4000
   21760:	cmp	r8, r3
   21764:	bls	21304 <__assert_fail@plt+0xeadc>
   21768:	mov	r3, #1536	; 0x600
   2176c:	movt	r3, #16384	; 0x4000
   21770:	cmp	r8, r3
   21774:	bne	215d0 <__assert_fail@plt+0xeda8>
   21778:	b	21304 <__assert_fail@plt+0xeadc>
   2177c:	movw	r3, #18177	; 0x4701
   21780:	movt	r3, #55364	; 0xd844
   21784:	cmp	r8, r3
   21788:	bcc	215d0 <__assert_fail@plt+0xeda8>
   2178c:	movw	r3, #18180	; 0x4704
   21790:	movt	r3, #55364	; 0xd844
   21794:	cmp	r8, r3
   21798:	bls	21304 <__assert_fail@plt+0xeadc>
   2179c:	movw	r3, #47260	; 0xb89c
   217a0:	movt	r3, #10171	; 0x27bb
   217a4:	add	r3, r8, r3
   217a8:	cmp	r3, #1
   217ac:	bhi	215d0 <__assert_fail@plt+0xeda8>
   217b0:	b	21304 <__assert_fail@plt+0xeadc>
   217b4:	cmp	r8, #3
   217b8:	bhi	215d0 <__assert_fail@plt+0xeda8>
   217bc:	b	21304 <__assert_fail@plt+0xeadc>
   217c0:	sub	r8, r8, #256	; 0x100
   217c4:	cmp	r8, #12
   217c8:	bhi	215d0 <__assert_fail@plt+0xeda8>
   217cc:	b	21304 <__assert_fail@plt+0xeadc>
   217d0:	cmp	r8, #528	; 0x210
   217d4:	bne	215d0 <__assert_fail@plt+0xeda8>
   217d8:	b	21304 <__assert_fail@plt+0xeadc>
   217dc:	bl	12360 <__stack_chk_fail@plt>
   217e0:	andeq	r2, r2, r4, ror lr
   217e4:	andeq	r0, r0, r4, lsr #4
   217e8:	andeq	r8, r0, r4, ror #24
   217ec:	andeq	r0, r0, r8, lsr #4
   217f0:	andeq	r8, r0, r0, lsr ip
   217f4:	andeq	r0, r0, ip, asr #4
   217f8:	andeq	r8, r0, r4, lsl #24
   217fc:	andeq	r8, r0, r0, lsr fp
   21800:	andeq	r5, r0, r0, asr #13
   21804:	strdeq	r8, [r0], -ip
   21808:	strdeq	r8, [r0], -r4
   2180c:	andeq	r8, r0, r0, ror #21
   21810:	andeq	r8, r0, r0, ror #21
   21814:	andeq	r0, r0, r0, asr r2
   21818:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   2181c:			; <UNDEFINED> instruction: 0x000089bc
   21820:	andeq	r0, r0, r8, ror #4
   21824:	andeq	r8, r0, r8, ror r9
   21828:	andeq	r0, r0, r8, lsl r2
   2182c:	andeq	r8, r0, r0, asr #18
   21830:	andeq	r0, r0, ip, lsl r2
   21834:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   21838:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   2183c:	andeq	r5, r0, ip, ror r4
   21840:	andeq	r8, r0, r4, lsl #17
   21844:	andeq	r8, r0, r0, asr r8
   21848:	andeq	r0, r0, r0, asr #4
   2184c:	strdeq	r8, [r0], -r0
   21850:	andeq	r8, r0, r8, lsr #14
   21854:	andeq	r6, r0, ip, lsr #18
   21858:	andeq	r6, r0, r4, ror #13
   2185c:	ldr	r3, [pc, #248]	; 2195c <__assert_fail@plt+0xf134>
   21860:	push	{r4, r5, r6, r7, r8, r9, lr}
   21864:	subs	r7, r2, #0
   21868:	ldr	r2, [pc, #240]	; 21960 <__assert_fail@plt+0xf138>
   2186c:	add	r3, pc, r3
   21870:	sub	sp, sp, #12
   21874:	mov	r6, r0
   21878:	mov	r5, r1
   2187c:	ldr	r9, [r3, r2]
   21880:	ldr	r3, [r9]
   21884:	str	r3, [sp, #4]
   21888:	blt	21948 <__assert_fail@plt+0xf120>
   2188c:	mov	r3, sp
   21890:	mov	r1, #0
   21894:	mov	r2, r7
   21898:	mov	r0, r5
   2189c:	bl	20cb8 <__assert_fail@plt+0xe490>
   218a0:	ldr	r1, [pc, #188]	; 21964 <__assert_fail@plt+0xf13c>
   218a4:	mov	r2, r7
   218a8:	add	r1, pc, r1
   218ac:	cmp	r0, #0
   218b0:	mov	r0, r6
   218b4:	mvneq	r3, #0
   218b8:	streq	r3, [sp]
   218bc:	bl	20530 <__assert_fail@plt+0xdd08>
   218c0:	cmp	r7, #0
   218c4:	ble	2191c <__assert_fail@plt+0xf0f4>
   218c8:	ldr	r1, [pc, #152]	; 21968 <__assert_fail@plt+0xf140>
   218cc:	mov	r0, r6
   218d0:	ldr	r8, [pc, #148]	; 2196c <__assert_fail@plt+0xf144>
   218d4:	mov	r2, #1
   218d8:	add	r1, pc, r1
   218dc:	mov	r4, #0
   218e0:	add	r8, pc, r8
   218e4:	bl	2212c <__assert_fail@plt+0xf904>
   218e8:	mov	r1, r5
   218ec:	add	r4, r4, #1
   218f0:	mov	r0, r6
   218f4:	ldr	r2, [sp]
   218f8:	bl	2116c <__assert_fail@plt+0xe944>
   218fc:	cmp	r4, r7
   21900:	add	r5, r5, #12
   21904:	beq	2191c <__assert_fail@plt+0xf0f4>
   21908:	mov	r0, r6
   2190c:	mov	r1, r8
   21910:	mov	r2, #2
   21914:	bl	2212c <__assert_fail@plt+0xf904>
   21918:	b	218e8 <__assert_fail@plt+0xf0c0>
   2191c:	ldr	r1, [pc, #76]	; 21970 <__assert_fail@plt+0xf148>
   21920:	mvn	r2, #0
   21924:	mov	r0, r6
   21928:	add	r1, pc, r1
   2192c:	bl	2212c <__assert_fail@plt+0xf904>
   21930:	ldr	r2, [sp, #4]
   21934:	ldr	r3, [r9]
   21938:	cmp	r2, r3
   2193c:	bne	21958 <__assert_fail@plt+0xf130>
   21940:	add	sp, sp, #12
   21944:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21948:	mov	r0, r1
   2194c:	bl	20624 <__assert_fail@plt+0xddfc>
   21950:	mov	r7, r0
   21954:	b	2188c <__assert_fail@plt+0xf064>
   21958:	bl	12360 <__stack_chk_fail@plt>
   2195c:	andeq	r2, r2, ip, lsl #15
   21960:	andeq	r0, r0, r4, lsr #4
   21964:			; <UNDEFINED> instruction: 0x000085bc
   21968:	andeq	ip, r0, r0, asr #10
   2196c:	muleq	r0, r0, r5
   21970:	andeq	r8, r0, r4, asr #10
   21974:	ldr	r3, [pc, #144]	; 21a0c <__assert_fail@plt+0xf1e4>
   21978:	ldr	ip, [pc, #144]	; 21a10 <__assert_fail@plt+0xf1e8>
   2197c:	add	r3, pc, r3
   21980:	push	{r4, r5, r6, r7, r8, lr}
   21984:	sub	sp, sp, #32
   21988:	ldr	r5, [r3, ip]
   2198c:	add	r4, sp, #4
   21990:	mov	r6, r0
   21994:	mov	r7, r1
   21998:	mov	r0, r4
   2199c:	mov	r1, #128	; 0x80
   219a0:	ldr	r3, [r5]
   219a4:	str	r3, [sp, #28]
   219a8:	bl	21e68 <__assert_fail@plt+0xf640>
   219ac:	subs	r8, r0, #0
   219b0:	beq	219e8 <__assert_fail@plt+0xf1c0>
   219b4:	mov	r1, r6
   219b8:	mov	r0, r4
   219bc:	mov	r2, r7
   219c0:	bl	2185c <__assert_fail@plt+0xf034>
   219c4:	mov	r0, r4
   219c8:	mov	r1, #0
   219cc:	bl	21f34 <__assert_fail@plt+0xf70c>
   219d0:	ldr	r2, [sp, #28]
   219d4:	ldr	r3, [r5]
   219d8:	cmp	r2, r3
   219dc:	bne	21a08 <__assert_fail@plt+0xf1e0>
   219e0:	add	sp, sp, #32
   219e4:	pop	{r4, r5, r6, r7, r8, pc}
   219e8:	ldr	r1, [pc, #36]	; 21a14 <__assert_fail@plt+0xf1ec>
   219ec:	ldr	r0, [pc, #36]	; 21a18 <__assert_fail@plt+0xf1f0>
   219f0:	add	r1, pc, r1
   219f4:	add	r0, pc, r0
   219f8:	add	r1, r1, #64	; 0x40
   219fc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   21a00:	mov	r0, r8
   21a04:	b	219d0 <__assert_fail@plt+0xf1a8>
   21a08:	bl	12360 <__stack_chk_fail@plt>
   21a0c:	andeq	r2, r2, ip, ror r6
   21a10:	andeq	r0, r0, r4, lsr #4
   21a14:	andeq	r8, r0, ip, asr #6
   21a18:	andeq	r4, r0, r4, asr r5
   21a1c:	ldr	r3, [pc, #144]	; 21ab4 <__assert_fail@plt+0xf28c>
   21a20:	ldr	ip, [pc, #144]	; 21ab8 <__assert_fail@plt+0xf290>
   21a24:	add	r3, pc, r3
   21a28:	push	{r4, r5, r6, r7, r8, lr}
   21a2c:	sub	sp, sp, #32
   21a30:	ldr	r5, [r3, ip]
   21a34:	add	r4, sp, #4
   21a38:	mov	r6, r0
   21a3c:	mov	r7, r1
   21a40:	mov	r0, r4
   21a44:	mov	r1, #32
   21a48:	ldr	r3, [r5]
   21a4c:	str	r3, [sp, #28]
   21a50:	bl	21e68 <__assert_fail@plt+0xf640>
   21a54:	subs	r8, r0, #0
   21a58:	beq	21a90 <__assert_fail@plt+0xf268>
   21a5c:	mov	r1, r6
   21a60:	mov	r0, r4
   21a64:	mov	r2, r7
   21a68:	bl	2116c <__assert_fail@plt+0xe944>
   21a6c:	mov	r0, r4
   21a70:	mov	r1, #0
   21a74:	bl	21f34 <__assert_fail@plt+0xf70c>
   21a78:	ldr	r2, [sp, #28]
   21a7c:	ldr	r3, [r5]
   21a80:	cmp	r2, r3
   21a84:	bne	21ab0 <__assert_fail@plt+0xf288>
   21a88:	add	sp, sp, #32
   21a8c:	pop	{r4, r5, r6, r7, r8, pc}
   21a90:	ldr	r1, [pc, #36]	; 21abc <__assert_fail@plt+0xf294>
   21a94:	ldr	r0, [pc, #36]	; 21ac0 <__assert_fail@plt+0xf298>
   21a98:	add	r1, pc, r1
   21a9c:	add	r0, pc, r0
   21aa0:	add	r1, r1, #84	; 0x54
   21aa4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   21aa8:	mov	r0, r8
   21aac:	b	21a78 <__assert_fail@plt+0xf250>
   21ab0:	bl	12360 <__stack_chk_fail@plt>
   21ab4:	ldrdeq	r2, [r2], -r4
   21ab8:	andeq	r0, r0, r4, lsr #4
   21abc:	andeq	r8, r0, r4, lsr #5
   21ac0:	andeq	r4, r0, ip, lsr #9
   21ac4:	push	{r3, r4, r5, r6, r7, lr}
   21ac8:	mov	r4, r1
   21acc:	ldr	r3, [r1]
   21ad0:	mov	r5, r0
   21ad4:	cmp	r3, r2
   21ad8:	bcs	21b14 <__assert_fail@plt+0xf2ec>
   21adc:	lsls	r3, r3, #1
   21ae0:	ldr	r0, [r0]
   21ae4:	moveq	r3, #16
   21ae8:	cmp	r3, r2
   21aec:	movcs	r6, r3
   21af0:	movcc	r6, r2
   21af4:	lsl	r1, r6, #2
   21af8:	bl	12390 <realloc@plt>
   21afc:	subs	r7, r0, #0
   21b00:	beq	21b1c <__assert_fail@plt+0xf2f4>
   21b04:	str	r7, [r5]
   21b08:	mov	r0, #1
   21b0c:	str	r6, [r4]
   21b10:	pop	{r3, r4, r5, r6, r7, pc}
   21b14:	mov	r0, #1
   21b18:	pop	{r3, r4, r5, r6, r7, pc}
   21b1c:	ldr	r0, [pc, #28]	; 21b40 <__assert_fail@plt+0xf318>
   21b20:	ldr	r1, [pc, #28]	; 21b44 <__assert_fail@plt+0xf31c>
   21b24:	ldr	r2, [pc, #28]	; 21b48 <__assert_fail@plt+0xf320>
   21b28:	add	r0, pc, r0
   21b2c:	add	r1, pc, r1
   21b30:	add	r2, pc, r2
   21b34:	bl	22e10 <secure_getenv@@Base+0x7bc>
   21b38:	mov	r0, r7
   21b3c:	pop	{r3, r4, r5, r6, r7, pc}
   21b40:	andeq	r4, r0, ip, ror r2
   21b44:	andeq	r8, r0, ip, ror #6
   21b48:	andeq	r8, r0, r4, asr #6
   21b4c:	push	{r4, r5, r6, lr}
   21b50:	mov	r6, r1
   21b54:	ldr	r2, [r0, #4]
   21b58:	add	r1, r0, #8
   21b5c:	mov	r4, r0
   21b60:	add	r2, r2, #1
   21b64:	bl	21ac4 <__assert_fail@plt+0xf29c>
   21b68:	subs	r5, r0, #0
   21b6c:	beq	21b90 <__assert_fail@plt+0xf368>
   21b70:	ldr	r2, [r4, #4]
   21b74:	mov	r0, r5
   21b78:	ldr	r3, [r4]
   21b7c:	str	r6, [r3, r2, lsl #2]
   21b80:	ldr	r3, [r4, #4]
   21b84:	add	r3, r3, #1
   21b88:	str	r3, [r4, #4]
   21b8c:	pop	{r4, r5, r6, pc}
   21b90:	ldr	r1, [pc, #24]	; 21bb0 <__assert_fail@plt+0xf388>
   21b94:	ldr	r0, [pc, #24]	; 21bb4 <__assert_fail@plt+0xf38c>
   21b98:	add	r1, pc, r1
   21b9c:	add	r0, pc, r0
   21ba0:	add	r1, r1, #20
   21ba4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   21ba8:	mov	r0, r5
   21bac:	pop	{r4, r5, r6, pc}
   21bb0:	ldrdeq	r8, [r0], -ip
   21bb4:	andeq	r4, r0, ip, lsr #7
   21bb8:	push	{r4, r5, r6, lr}
   21bbc:	mov	r4, r0
   21bc0:	ldr	r3, [r0, #12]
   21bc4:	mov	r5, r1
   21bc8:	cmp	r3, #0
   21bcc:	lsleq	r6, r1, #2
   21bd0:	beq	21be4 <__assert_fail@plt+0xf3bc>
   21bd4:	ldr	r2, [r0]
   21bd8:	lsl	r6, r1, #2
   21bdc:	ldr	r0, [r2, r1, lsl #2]
   21be0:	blx	r3
   21be4:	ldr	r2, [r4, #4]
   21be8:	add	r1, r5, #1
   21bec:	ldr	r0, [r4]
   21bf0:	sub	r2, r2, #-1073741823	; 0xc0000001
   21bf4:	rsb	r2, r5, r2
   21bf8:	add	r1, r0, r1, lsl #2
   21bfc:	add	r0, r0, r6
   21c00:	lsl	r2, r2, #2
   21c04:	bl	122b8 <memmove@plt>
   21c08:	ldr	r3, [r4, #4]
   21c0c:	sub	r3, r3, #1
   21c10:	str	r3, [r4, #4]
   21c14:	pop	{r4, r5, r6, pc}
   21c18:	push	{r3, r4, r5, lr}
   21c1c:	mov	r5, r0
   21c20:	ldr	r2, [r0, #12]
   21c24:	cmp	r2, #0
   21c28:	beq	21c60 <__assert_fail@plt+0xf438>
   21c2c:	ldr	r3, [r0, #4]
   21c30:	cmp	r3, #0
   21c34:	beq	21c60 <__assert_fail@plt+0xf438>
   21c38:	mov	r4, #0
   21c3c:	b	21c44 <__assert_fail@plt+0xf41c>
   21c40:	ldr	r2, [r5, #12]
   21c44:	ldr	r3, [r5]
   21c48:	ldr	r0, [r3, r4, lsl #2]
   21c4c:	add	r4, r4, #1
   21c50:	blx	r2
   21c54:	ldr	r3, [r5, #4]
   21c58:	cmp	r3, r4
   21c5c:	bhi	21c40 <__assert_fail@plt+0xf418>
   21c60:	mov	r3, #0
   21c64:	str	r3, [r5, #4]
   21c68:	pop	{r3, r4, r5, pc}
   21c6c:	push	{r4, lr}
   21c70:	subs	r4, r0, #0
   21c74:	popeq	{r4, pc}
   21c78:	bl	21c18 <__assert_fail@plt+0xf3f0>
   21c7c:	ldr	r0, [r4]
   21c80:	bl	122c4 <free@plt>
   21c84:	mov	r0, r4
   21c88:	pop	{r4, lr}
   21c8c:	b	122c4 <free@plt>
   21c90:	push	{r4, r5, r6, lr}
   21c94:	mov	r1, #16
   21c98:	mov	r5, r0
   21c9c:	mov	r0, #1
   21ca0:	bl	1221c <calloc@plt>
   21ca4:	subs	r4, r0, #0
   21ca8:	beq	21ccc <__assert_fail@plt+0xf4a4>
   21cac:	add	r1, r4, #8
   21cb0:	mov	r2, #2
   21cb4:	bl	21ac4 <__assert_fail@plt+0xf29c>
   21cb8:	subs	r6, r0, #0
   21cbc:	beq	21cd4 <__assert_fail@plt+0xf4ac>
   21cc0:	str	r5, [r4, #12]
   21cc4:	mov	r0, r4
   21cc8:	pop	{r4, r5, r6, pc}
   21ccc:	mov	r0, r4
   21cd0:	pop	{r4, r5, r6, pc}
   21cd4:	mov	r0, r4
   21cd8:	bl	21c6c <__assert_fail@plt+0xf444>
   21cdc:	mov	r0, r6
   21ce0:	pop	{r4, r5, r6, pc}
   21ce4:	push	{r4, r5, r6, lr}
   21ce8:	mov	r4, r0
   21cec:	ldr	r5, [r0, #16]
   21cf0:	mov	r6, r1
   21cf4:	cmp	r5, #0
   21cf8:	beq	21d58 <__assert_fail@plt+0xf530>
   21cfc:	ldr	r0, [r0]
   21d00:	blx	r5
   21d04:	rsbs	r2, r0, #1
   21d08:	mov	r3, r0
   21d0c:	movcc	r2, #0
   21d10:	cmp	r6, #0
   21d14:	moveq	r2, #0
   21d18:	cmp	r2, #0
   21d1c:	bne	21d30 <__assert_fail@plt+0xf508>
   21d20:	mov	r0, #1
   21d24:	str	r3, [r4]
   21d28:	str	r6, [r4, #12]
   21d2c:	pop	{r4, r5, r6, pc}
   21d30:	ldr	r3, [r4, #8]
   21d34:	ldr	r0, [pc, #64]	; 21d7c <__assert_fail@plt+0xf554>
   21d38:	ldr	r1, [pc, #64]	; 21d80 <__assert_fail@plt+0xf558>
   21d3c:	orr	r3, r3, #1
   21d40:	add	r0, pc, r0
   21d44:	str	r3, [r4, #8]
   21d48:	add	r1, pc, r1
   21d4c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   21d50:	mov	r0, #0
   21d54:	pop	{r4, r5, r6, pc}
   21d58:	ldr	r0, [pc, #36]	; 21d84 <__assert_fail@plt+0xf55c>
   21d5c:	ldr	r1, [pc, #36]	; 21d88 <__assert_fail@plt+0xf560>
   21d60:	ldr	r2, [pc, #36]	; 21d8c <__assert_fail@plt+0xf564>
   21d64:	add	r0, pc, r0
   21d68:	add	r1, pc, r1
   21d6c:	add	r2, pc, r2
   21d70:	bl	22e10 <secure_getenv@@Base+0x7bc>
   21d74:	mov	r0, r5
   21d78:	pop	{r4, r5, r6, pc}
   21d7c:	andeq	r4, r0, r8, lsl #4
   21d80:	andeq	r8, r0, r4, ror #2
   21d84:	andeq	r4, r0, r0, asr #32
   21d88:			; <UNDEFINED> instruction: 0x000081b8
   21d8c:	andeq	r8, r0, r0, asr #2
   21d90:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   21d94:	mov	r5, r2
   21d98:	mov	r9, r1
   21d9c:	ldr	r8, [sp, #32]
   21da0:	ldr	r7, [sp, #36]	; 0x24
   21da4:	mov	r1, #0
   21da8:	mov	r2, #24
   21dac:	mov	r4, r0
   21db0:	mov	r6, r3
   21db4:	bl	125e8 <memset@plt>
   21db8:	tst	r6, #1
   21dbc:	str	r9, [r4]
   21dc0:	str	r5, [r4, #4]
   21dc4:	str	r5, [r4, #12]
   21dc8:	str	r6, [r4, #8]
   21dcc:	str	r8, [r4, #16]
   21dd0:	str	r7, [r4, #20]
   21dd4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   21dd8:	ldr	r2, [pc, #28]	; 21dfc <__assert_fail@plt+0xf5d4>
   21ddc:	ldr	r0, [pc, #28]	; 21e00 <__assert_fail@plt+0xf5d8>
   21de0:	ldr	r1, [pc, #28]	; 21e04 <__assert_fail@plt+0xf5dc>
   21de4:	add	r2, pc, r2
   21de8:	add	r0, pc, r0
   21dec:	add	r2, r2, #16
   21df0:	add	r1, pc, r1
   21df4:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   21df8:	b	22e10 <secure_getenv@@Base+0x7bc>
   21dfc:	andeq	r8, r0, r8, asr #1
   21e00:			; <UNDEFINED> instruction: 0x00003fbc
   21e04:	andeq	r8, r0, ip, asr #2
   21e08:	ldr	ip, [pc, #76]	; 21e5c <__assert_fail@plt+0xf634>
   21e0c:	push	{r4, r5, r6, lr}
   21e10:	add	ip, pc, ip
   21e14:	ldr	r6, [pc, #68]	; 21e60 <__assert_fail@plt+0xf638>
   21e18:	sub	sp, sp, #8
   21e1c:	ldr	lr, [pc, #64]	; 21e64 <__assert_fail@plt+0xf63c>
   21e20:	mov	r4, r1
   21e24:	mov	r1, #0
   21e28:	mov	r5, r0
   21e2c:	ldr	r6, [ip, r6]
   21e30:	mov	r2, r1
   21e34:	mov	r3, r1
   21e38:	str	r6, [sp]
   21e3c:	ldr	ip, [ip, lr]
   21e40:	str	ip, [sp, #4]
   21e44:	bl	21d90 <__assert_fail@plt+0xf568>
   21e48:	mov	r0, r5
   21e4c:	mov	r1, r4
   21e50:	add	sp, sp, #8
   21e54:	pop	{r4, r5, r6, lr}
   21e58:	b	21ce4 <__assert_fail@plt+0xf4bc>
   21e5c:	andeq	r2, r2, r8, ror #3
   21e60:	andeq	r0, r0, r0, lsr r2
   21e64:	andeq	r0, r0, r0, lsr #4
   21e68:	ldr	ip, [pc, #76]	; 21ebc <__assert_fail@plt+0xf694>
   21e6c:	mov	r3, #2
   21e70:	push	{r4, r5, r6, lr}
   21e74:	add	ip, pc, ip
   21e78:	ldr	r6, [pc, #64]	; 21ec0 <__assert_fail@plt+0xf698>
   21e7c:	sub	sp, sp, #8
   21e80:	ldr	lr, [pc, #60]	; 21ec4 <__assert_fail@plt+0xf69c>
   21e84:	mov	r4, r1
   21e88:	mov	r1, #0
   21e8c:	mov	r5, r0
   21e90:	ldr	r6, [ip, r6]
   21e94:	mov	r2, r1
   21e98:	str	r6, [sp]
   21e9c:	ldr	ip, [ip, lr]
   21ea0:	str	ip, [sp, #4]
   21ea4:	bl	21d90 <__assert_fail@plt+0xf568>
   21ea8:	mov	r0, r5
   21eac:	mov	r1, r4
   21eb0:	add	sp, sp, #8
   21eb4:	pop	{r4, r5, r6, lr}
   21eb8:	b	21ce4 <__assert_fail@plt+0xf4bc>
   21ebc:	andeq	r2, r2, r4, lsl #3
   21ec0:	andeq	r0, r0, r0, lsr r2
   21ec4:	andeq	r0, r0, r0, lsr #4
   21ec8:	push	{r4, lr}
   21ecc:	subs	r4, r0, #0
   21ed0:	beq	21f04 <__assert_fail@plt+0xf6dc>
   21ed4:	ldr	r3, [r4, #20]
   21ed8:	cmp	r3, #0
   21edc:	beq	21ef0 <__assert_fail@plt+0xf6c8>
   21ee0:	ldr	r0, [r4]
   21ee4:	cmp	r0, #0
   21ee8:	beq	21ef0 <__assert_fail@plt+0xf6c8>
   21eec:	blx	r3
   21ef0:	mov	r0, r4
   21ef4:	mov	r1, #0
   21ef8:	mov	r2, #24
   21efc:	pop	{r4, lr}
   21f00:	b	125e8 <memset@plt>
   21f04:	ldr	r2, [pc, #28]	; 21f28 <__assert_fail@plt+0xf700>
   21f08:	ldr	r0, [pc, #28]	; 21f2c <__assert_fail@plt+0xf704>
   21f0c:	ldr	r1, [pc, #28]	; 21f30 <__assert_fail@plt+0xf708>
   21f10:	add	r2, pc, r2
   21f14:	add	r0, pc, r0
   21f18:	add	r2, r2, #40	; 0x28
   21f1c:	add	r1, pc, r1
   21f20:	pop	{r4, lr}
   21f24:	b	22e10 <secure_getenv@@Base+0x7bc>
   21f28:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   21f2c:	muleq	r0, r0, lr
   21f30:	andeq	r8, r0, r0, asr #32
   21f34:	push	{r3, lr}
   21f38:	mov	r3, r0
   21f3c:	ldr	r2, [r0, #8]
   21f40:	tst	r2, #1
   21f44:	bne	21f6c <__assert_fail@plt+0xf744>
   21f48:	cmp	r1, #0
   21f4c:	ldrne	r2, [r0, #4]
   21f50:	strne	r2, [r1]
   21f54:	mov	r2, #0
   21f58:	ldr	r0, [r0]
   21f5c:	str	r2, [r3]
   21f60:	str	r2, [r3, #12]
   21f64:	str	r2, [r3, #4]
   21f68:	pop	{r3, pc}
   21f6c:	ldr	r2, [pc, #32]	; 21f94 <__assert_fail@plt+0xf76c>
   21f70:	ldr	r0, [pc, #32]	; 21f98 <__assert_fail@plt+0xf770>
   21f74:	ldr	r1, [pc, #32]	; 21f9c <__assert_fail@plt+0xf774>
   21f78:	add	r2, pc, r2
   21f7c:	add	r0, pc, r0
   21f80:	add	r2, r2, #60	; 0x3c
   21f84:	add	r1, pc, r1
   21f88:	bl	22e10 <secure_getenv@@Base+0x7bc>
   21f8c:	mov	r0, #0
   21f90:	pop	{r3, pc}
   21f94:	andeq	r7, r0, r4, lsr pc
   21f98:	andeq	r3, r0, r8, lsr #28
   21f9c:	andeq	r5, r0, r8, lsr fp
   21fa0:	push	{r4}		; (str r4, [sp, #-4]!)
   21fa4:	mov	ip, #0
   21fa8:	ldr	r4, [r0, #12]
   21fac:	ldr	r2, [r0, #8]
   21fb0:	cmp	r4, r1
   21fb4:	str	ip, [r0, #4]
   21fb8:	bic	r2, r2, #1
   21fbc:	str	r2, [r0, #8]
   21fc0:	bls	21fd0 <__assert_fail@plt+0xf7a8>
   21fc4:	mov	r0, #1
   21fc8:	pop	{r4}		; (ldr r4, [sp], #4)
   21fcc:	bx	lr
   21fd0:	pop	{r4}		; (ldr r4, [sp], #4)
   21fd4:	b	21ce4 <__assert_fail@plt+0xf4bc>
   21fd8:	push	{r3, r4, r5, r6, r7, lr}
   21fdc:	mov	r4, r0
   21fe0:	ldr	r3, [r0, #8]
   21fe4:	mov	r5, r1
   21fe8:	ands	r7, r3, #1
   21fec:	bne	22068 <__assert_fail@plt+0xf840>
   21ff0:	ubfx	r6, r3, #1, #1
   21ff4:	ldr	r2, [r0, #4]
   21ff8:	add	r1, r6, r1
   21ffc:	mvn	r3, r1
   22000:	cmp	r3, r2
   22004:	bls	22090 <__assert_fail@plt+0xf868>
   22008:	ldr	ip, [r0, #12]
   2200c:	add	r1, r1, r2
   22010:	cmp	r1, ip
   22014:	bls	22040 <__assert_fail@plt+0xf818>
   22018:	cmn	ip, #-2147483646	; 0x80000002
   2201c:	bhi	220b8 <__assert_fail@plt+0xf890>
   22020:	lsls	ip, ip, #1
   22024:	moveq	ip, #16
   22028:	cmp	ip, r1
   2202c:	movcs	r1, ip
   22030:	bl	21ce4 <__assert_fail@plt+0xf4bc>
   22034:	subs	r7, r0, #0
   22038:	beq	220e0 <__assert_fail@plt+0xf8b8>
   2203c:	ldr	r2, [r4, #4]
   22040:	ldr	r3, [r4]
   22044:	cmp	r6, #0
   22048:	add	r1, r2, r5
   2204c:	str	r1, [r4, #4]
   22050:	add	r2, r3, r2
   22054:	movne	r3, #0
   22058:	movne	r0, r2
   2205c:	strbne	r3, [r2, r5]
   22060:	moveq	r0, r2
   22064:	pop	{r3, r4, r5, r6, r7, pc}
   22068:	ldr	r2, [pc, #144]	; 22100 <__assert_fail@plt+0xf8d8>
   2206c:	ldr	r0, [pc, #144]	; 22104 <__assert_fail@plt+0xf8dc>
   22070:	ldr	r1, [pc, #144]	; 22108 <__assert_fail@plt+0xf8e0>
   22074:	add	r2, pc, r2
   22078:	add	r0, pc, r0
   2207c:	add	r2, r2, #80	; 0x50
   22080:	add	r1, pc, r1
   22084:	bl	22e10 <secure_getenv@@Base+0x7bc>
   22088:	mov	r0, #0
   2208c:	pop	{r3, r4, r5, r6, r7, pc}
   22090:	ldr	r2, [pc, #116]	; 2210c <__assert_fail@plt+0xf8e4>
   22094:	ldr	r0, [pc, #116]	; 22110 <__assert_fail@plt+0xf8e8>
   22098:	ldr	r1, [pc, #116]	; 22114 <__assert_fail@plt+0xf8ec>
   2209c:	add	r2, pc, r2
   220a0:	add	r0, pc, r0
   220a4:	add	r2, r2, #80	; 0x50
   220a8:	add	r1, pc, r1
   220ac:	bl	22e10 <secure_getenv@@Base+0x7bc>
   220b0:	mov	r0, r7
   220b4:	pop	{r3, r4, r5, r6, r7, pc}
   220b8:	ldr	r2, [pc, #88]	; 22118 <__assert_fail@plt+0xf8f0>
   220bc:	ldr	r0, [pc, #88]	; 2211c <__assert_fail@plt+0xf8f4>
   220c0:	ldr	r1, [pc, #88]	; 22120 <__assert_fail@plt+0xf8f8>
   220c4:	add	r2, pc, r2
   220c8:	add	r0, pc, r0
   220cc:	add	r2, r2, #80	; 0x50
   220d0:	add	r1, pc, r1
   220d4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   220d8:	mov	r0, r7
   220dc:	pop	{r3, r4, r5, r6, r7, pc}
   220e0:	ldr	r1, [pc, #60]	; 22124 <__assert_fail@plt+0xf8fc>
   220e4:	ldr	r0, [pc, #60]	; 22128 <__assert_fail@plt+0xf900>
   220e8:	add	r1, pc, r1
   220ec:	add	r0, pc, r0
   220f0:	add	r1, r1, #80	; 0x50
   220f4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   220f8:	mov	r0, r7
   220fc:	pop	{r3, r4, r5, r6, r7, pc}
   22100:	andeq	r7, r0, r8, lsr lr
   22104:	andeq	r3, r0, ip, lsr #26
   22108:	andeq	r5, r0, ip, lsr sl
   2210c:	andeq	r7, r0, r0, lsl lr
   22110:	andeq	r3, r0, r4, lsl #26
   22114:	andeq	r7, r0, r4, asr #29
   22118:	andeq	r7, r0, r8, ror #27
   2211c:	ldrdeq	r3, [r0], -ip
   22120:	andeq	r7, r0, ip, asr #29
   22124:	andeq	r7, r0, r4, asr #27
   22128:	andeq	r3, r0, ip, asr lr
   2212c:	push	{r4, r5, r6, lr}
   22130:	subs	r4, r2, #0
   22134:	mov	r6, r0
   22138:	mov	r5, r1
   2213c:	blt	22164 <__assert_fail@plt+0xf93c>
   22140:	mov	r0, r6
   22144:	mov	r1, r4
   22148:	bl	21fd8 <__assert_fail@plt+0xf7b0>
   2214c:	cmp	r0, #0
   22150:	beq	22174 <__assert_fail@plt+0xf94c>
   22154:	mov	r1, r5
   22158:	mov	r2, r4
   2215c:	pop	{r4, r5, r6, lr}
   22160:	b	122e8 <memcpy@plt>
   22164:	mov	r0, r1
   22168:	bl	12540 <strlen@plt>
   2216c:	mov	r4, r0
   22170:	b	22140 <__assert_fail@plt+0xf918>
   22174:	ldr	r2, [pc, #28]	; 22198 <__assert_fail@plt+0xf970>
   22178:	ldr	r0, [pc, #28]	; 2219c <__assert_fail@plt+0xf974>
   2217c:	ldr	r1, [pc, #28]	; 221a0 <__assert_fail@plt+0xf978>
   22180:	add	r2, pc, r2
   22184:	add	r0, pc, r0
   22188:	add	r2, r2, #100	; 0x64
   2218c:	add	r1, pc, r1
   22190:	pop	{r4, r5, r6, lr}
   22194:	b	22e10 <secure_getenv@@Base+0x7bc>
   22198:	andeq	r7, r0, ip, lsr #26
   2219c:	andeq	r3, r0, r0, lsr #24
   221a0:	andeq	r5, r0, ip, ror ip
   221a4:	ldr	r3, [pc, #16]	; 221bc <__assert_fail@plt+0xf994>
   221a8:	ldr	r2, [pc, #16]	; 221c0 <__assert_fail@plt+0xf998>
   221ac:	add	r3, pc, r3
   221b0:	ldr	r3, [r3, r2]
   221b4:	ldr	r0, [r3]
   221b8:	bx	lr
   221bc:	andeq	r1, r2, ip, asr #28
   221c0:	andeq	r0, r0, r4, lsl r2
   221c4:	ldr	r3, [pc, #136]	; 22254 <__assert_fail@plt+0xfa2c>
   221c8:	ldr	r2, [pc, #136]	; 22258 <__assert_fail@plt+0xfa30>
   221cc:	add	r3, pc, r3
   221d0:	push	{r4, r5, r6, lr}
   221d4:	sub	sp, sp, #8
   221d8:	ldr	r5, [r3, r2]
   221dc:	mov	r6, r0
   221e0:	mov	r0, sp
   221e4:	ldr	r3, [r5]
   221e8:	str	r3, [sp, #4]
   221ec:	bl	12270 <pthread_mutexattr_init@plt>
   221f0:	mov	r1, #1
   221f4:	mov	r0, sp
   221f8:	bl	124c8 <pthread_mutexattr_settype@plt>
   221fc:	mov	r0, r6
   22200:	mov	r1, sp
   22204:	bl	1230c <pthread_mutex_init@plt>
   22208:	cmp	r0, #0
   2220c:	bne	22230 <__assert_fail@plt+0xfa08>
   22210:	mov	r0, sp
   22214:	bl	127ec <pthread_mutexattr_destroy@plt>
   22218:	ldr	r2, [sp, #4]
   2221c:	ldr	r3, [r5]
   22220:	cmp	r2, r3
   22224:	bne	22250 <__assert_fail@plt+0xfa28>
   22228:	add	sp, sp, #8
   2222c:	pop	{r4, r5, r6, pc}
   22230:	ldr	r0, [pc, #36]	; 2225c <__assert_fail@plt+0xfa34>
   22234:	mov	r2, #180	; 0xb4
   22238:	ldr	r1, [pc, #32]	; 22260 <__assert_fail@plt+0xfa38>
   2223c:	ldr	r3, [pc, #32]	; 22264 <__assert_fail@plt+0xfa3c>
   22240:	add	r0, pc, r0
   22244:	add	r1, pc, r1
   22248:	add	r3, pc, r3
   2224c:	bl	12828 <__assert_fail@plt>
   22250:	bl	12360 <__stack_chk_fail@plt>
   22254:	andeq	r1, r2, ip, lsr #28
   22258:	andeq	r0, r0, r4, lsr #4
   2225c:	muleq	r0, r4, sp
   22260:	muleq	r0, ip, sp
   22264:	andeq	r7, r0, r0, ror sp
   22268:	push	{r3, lr}
   2226c:	bl	123a8 <dlerror@plt>
   22270:	cmp	r0, #0
   22274:	popeq	{r3, pc}
   22278:	pop	{r3, lr}
   2227c:	b	12348 <strdup@plt>
   22280:	ldr	ip, [pc, #316]	; 223c4 <__assert_fail@plt+0xfb9c>
   22284:	push	{r4, r5, r6, r7, r8, r9, lr}
   22288:	add	ip, pc, ip
   2228c:	ldr	lr, [pc, #308]	; 223c8 <__assert_fail@plt+0xfba0>
   22290:	mov	r7, r3
   22294:	sub	sp, sp, #108	; 0x6c
   22298:	mov	r9, r0
   2229c:	mov	r5, r1
   222a0:	mov	r0, #1
   222a4:	ldr	r6, [ip, lr]
   222a8:	mov	r1, #12
   222ac:	mov	r8, r2
   222b0:	ldr	r3, [r6]
   222b4:	str	r3, [sp, #100]	; 0x64
   222b8:	bl	1221c <calloc@plt>
   222bc:	subs	r4, r0, #0
   222c0:	beq	223a8 <__assert_fail@plt+0xfb80>
   222c4:	mov	r0, r9
   222c8:	mov	r1, #524288	; 0x80000
   222cc:	bl	124bc <open@plt>
   222d0:	cmn	r0, #1
   222d4:	str	r0, [r4]
   222d8:	beq	22398 <__assert_fail@plt+0xfb70>
   222dc:	cmp	r5, #0
   222e0:	beq	22370 <__assert_fail@plt+0xfb48>
   222e4:	ldr	r3, [r5, #16]
   222e8:	and	r3, r3, #61440	; 0xf000
   222ec:	cmp	r3, #16384	; 0x4000
   222f0:	beq	223b0 <__assert_fail@plt+0xfb88>
   222f4:	ldr	r1, [r5, #44]	; 0x2c
   222f8:	cmp	r1, #0
   222fc:	bne	2232c <__assert_fail@plt+0xfb04>
   22300:	ldr	r3, [pc, #196]	; 223cc <__assert_fail@plt+0xfba4>
   22304:	mov	r0, r4
   22308:	add	r3, pc, r3
   2230c:	str	r3, [r8]
   22310:	str	r1, [r7]
   22314:	ldr	r2, [sp, #100]	; 0x64
   22318:	ldr	r3, [r6]
   2231c:	cmp	r2, r3
   22320:	bne	223c0 <__assert_fail@plt+0xfb98>
   22324:	add	sp, sp, #108	; 0x6c
   22328:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2232c:	ldr	r3, [r4]
   22330:	mov	r5, #0
   22334:	str	r1, [r4, #8]
   22338:	mov	r0, r5
   2233c:	str	r5, [sp, #4]
   22340:	mov	r2, #1
   22344:	str	r3, [sp]
   22348:	mov	r3, #2
   2234c:	bl	1254c <mmap@plt>
   22350:	cmn	r0, #1
   22354:	str	r0, [r4, #4]
   22358:	beq	22390 <__assert_fail@plt+0xfb68>
   2235c:	str	r0, [r8]
   22360:	mov	r0, r4
   22364:	ldr	r3, [r4, #8]
   22368:	str	r3, [r7]
   2236c:	b	22314 <__assert_fail@plt+0xfaec>
   22370:	add	r9, sp, #8
   22374:	mov	r1, r0
   22378:	mov	r0, #3
   2237c:	mov	r2, r9
   22380:	bl	12480 <__fxstat@plt>
   22384:	cmp	r0, #0
   22388:	movge	r5, r9
   2238c:	bge	222e4 <__assert_fail@plt+0xfabc>
   22390:	ldr	r0, [r4]
   22394:	bl	127d4 <close@plt>
   22398:	mov	r0, r4
   2239c:	bl	122c4 <free@plt>
   223a0:	mov	r0, #0
   223a4:	b	22314 <__assert_fail@plt+0xfaec>
   223a8:	mov	r0, r4
   223ac:	b	22314 <__assert_fail@plt+0xfaec>
   223b0:	bl	125b8 <__errno_location@plt>
   223b4:	mov	r3, #21
   223b8:	str	r3, [r0]
   223bc:	b	22390 <__assert_fail@plt+0xfb68>
   223c0:	bl	12360 <__stack_chk_fail@plt>
   223c4:	andeq	r1, r2, r0, ror sp
   223c8:	andeq	r0, r0, r4, lsr #4
   223cc:	andeq	ip, r0, ip, asr r1
   223d0:	push	{r4, lr}
   223d4:	mov	r4, r0
   223d8:	ldr	r1, [r0, #8]
   223dc:	cmp	r1, #0
   223e0:	beq	223ec <__assert_fail@plt+0xfbc4>
   223e4:	ldr	r0, [r0, #4]
   223e8:	bl	126c0 <munmap@plt>
   223ec:	ldr	r0, [r4]
   223f0:	bl	127d4 <close@plt>
   223f4:	mov	r0, r4
   223f8:	pop	{r4, lr}
   223fc:	b	122c4 <free@plt>
   22400:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22404:	mov	r5, r0
   22408:	ldrb	r7, [r1]
   2240c:	mov	r6, r2
   22410:	cmp	r7, #0
   22414:	beq	22478 <__assert_fail@plt+0xfc50>
   22418:	add	sl, r1, #1
   2241c:	add	r8, r0, r2
   22420:	mov	r0, sl
   22424:	bl	12540 <strlen@plt>
   22428:	mov	r9, r0
   2242c:	b	22434 <__assert_fail@plt+0xfc0c>
   22430:	mov	r5, r4
   22434:	cmp	r5, r8
   22438:	mov	r4, r5
   2243c:	sub	r6, r6, #1
   22440:	beq	22480 <__assert_fail@plt+0xfc58>
   22444:	ldrb	r3, [r4], #1
   22448:	cmp	r3, #0
   2244c:	beq	22488 <__assert_fail@plt+0xfc60>
   22450:	cmp	r3, r7
   22454:	bne	22430 <__assert_fail@plt+0xfc08>
   22458:	cmp	r9, r6
   2245c:	mov	r0, r4
   22460:	mov	r1, sl
   22464:	mov	r2, r9
   22468:	bhi	22480 <__assert_fail@plt+0xfc58>
   2246c:	bl	127bc <strncmp@plt>
   22470:	cmp	r0, #0
   22474:	bne	22430 <__assert_fail@plt+0xfc08>
   22478:	mov	r0, r5
   2247c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22480:	mov	r0, #0
   22484:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22488:	mov	r0, r3
   2248c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22490:	push	{r4, r5, r6, lr}
   22494:	subs	r6, r0, #0
   22498:	mov	r4, r1
   2249c:	beq	224cc <__assert_fail@plt+0xfca4>
   224a0:	mov	r0, r1
   224a4:	bl	1245c <malloc@plt>
   224a8:	subs	r5, r0, #0
   224ac:	beq	224c4 <__assert_fail@plt+0xfc9c>
   224b0:	mov	r1, r6
   224b4:	mov	r2, r4
   224b8:	bl	122e8 <memcpy@plt>
   224bc:	mov	r0, r5
   224c0:	pop	{r4, r5, r6, pc}
   224c4:	mov	r0, r5
   224c8:	pop	{r4, r5, r6, pc}
   224cc:	mov	r0, r6
   224d0:	pop	{r4, r5, r6, pc}

000224d4 <strndup@@Base>:
   224d4:	push	{r4, r5, r6, lr}
   224d8:	mov	r6, r0
   224dc:	add	r0, r1, #1
   224e0:	mov	r4, r1
   224e4:	bl	1245c <malloc@plt>
   224e8:	subs	r5, r0, #0
   224ec:	beq	22504 <strndup@@Base+0x30>
   224f0:	mov	r1, r6
   224f4:	mov	r2, r4
   224f8:	bl	1260c <strncpy@plt>
   224fc:	mov	r3, #0
   22500:	strb	r3, [r5, r4]
   22504:	mov	r0, r5
   22508:	pop	{r4, r5, r6, pc}
   2250c:	push	{r0, r1, r2, r3}
   22510:	ldr	r3, [pc, #296]	; 22640 <strndup@@Base+0x16c>
   22514:	ldr	r2, [pc, #296]	; 22644 <strndup@@Base+0x170>
   22518:	add	r3, pc, r3
   2251c:	push	{r4, r5, r6, r7, r8, r9, lr}
   22520:	sub	sp, sp, #12
   22524:	ldr	r7, [r3, r2]
   22528:	add	r8, sp, #44	; 0x2c
   2252c:	ldr	r6, [sp, #40]	; 0x28
   22530:	str	r8, [sp]
   22534:	ldr	r3, [r7]
   22538:	cmp	r6, #0
   2253c:	moveq	r0, #1
   22540:	str	r3, [sp, #4]
   22544:	beq	225c8 <strndup@@Base+0xf4>
   22548:	mov	r0, r6
   2254c:	mov	r4, r8
   22550:	bl	12540 <strlen@plt>
   22554:	mov	r5, r0
   22558:	b	22560 <strndup@@Base+0x8c>
   2255c:	mov	r5, r0
   22560:	add	r4, r4, #4
   22564:	ldr	r0, [r4, #-4]
   22568:	str	r4, [sp]
   2256c:	cmp	r0, #0
   22570:	beq	225c4 <strndup@@Base+0xf0>
   22574:	bl	12540 <strlen@plt>
   22578:	adds	r0, r0, r5
   2257c:	bcc	2255c <strndup@@Base+0x88>
   22580:	ldr	r2, [pc, #192]	; 22648 <strndup@@Base+0x174>
   22584:	ldr	r0, [pc, #192]	; 2264c <strndup@@Base+0x178>
   22588:	ldr	r1, [pc, #192]	; 22650 <strndup@@Base+0x17c>
   2258c:	add	r2, pc, r2
   22590:	add	r0, pc, r0
   22594:	add	r2, r2, #16
   22598:	add	r1, pc, r1
   2259c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   225a0:	mov	r0, #0
   225a4:	ldr	r2, [sp, #4]
   225a8:	ldr	r3, [r7]
   225ac:	cmp	r2, r3
   225b0:	bne	2263c <strndup@@Base+0x168>
   225b4:	add	sp, sp, #12
   225b8:	pop	{r4, r5, r6, r7, r8, r9, lr}
   225bc:	add	sp, sp, #16
   225c0:	bx	lr
   225c4:	add	r0, r5, #1
   225c8:	bl	1245c <malloc@plt>
   225cc:	subs	r9, r0, #0
   225d0:	beq	2262c <strndup@@Base+0x158>
   225d4:	cmp	r6, #0
   225d8:	str	r8, [sp]
   225dc:	beq	22634 <strndup@@Base+0x160>
   225e0:	add	r4, sp, #48	; 0x30
   225e4:	mov	r5, r9
   225e8:	mov	r0, r6
   225ec:	bl	12540 <strlen@plt>
   225f0:	mov	r1, r6
   225f4:	mov	r8, r0
   225f8:	mov	r0, r5
   225fc:	mov	r2, r8
   22600:	add	r5, r5, r8
   22604:	bl	122e8 <memcpy@plt>
   22608:	str	r4, [sp]
   2260c:	add	r4, r4, #4
   22610:	ldr	r6, [r4, #-8]
   22614:	cmp	r6, #0
   22618:	bne	225e8 <strndup@@Base+0x114>
   2261c:	mov	r3, #0
   22620:	mov	r0, r9
   22624:	strb	r3, [r5]
   22628:	b	225a4 <strndup@@Base+0xd0>
   2262c:	mov	r0, r9
   22630:	b	225a4 <strndup@@Base+0xd0>
   22634:	mov	r5, r9
   22638:	b	2261c <strndup@@Base+0x148>
   2263c:	bl	12360 <__stack_chk_fail@plt>
   22640:	andeq	r1, r2, r0, ror #21
   22644:	andeq	r0, r0, r4, lsr #4
   22648:	andeq	r7, r0, ip, lsr #20
   2264c:	andeq	r3, r0, r4, lsl r8
   22650:	andeq	r7, r0, r8, asr sl

00022654 <secure_getenv@@Base>:
   22654:	push	{r4, lr}
   22658:	mov	r4, r0
   2265c:	mov	r0, #23
   22660:	bl	12690 <getauxval@plt>
   22664:	cmp	r0, #0
   22668:	bne	22678 <secure_getenv@@Base+0x24>
   2266c:	mov	r0, r4
   22670:	pop	{r4, lr}
   22674:	b	12444 <getenv@plt>
   22678:	mov	r0, #0
   2267c:	pop	{r4, pc}
   22680:	ldr	r3, [pc, #308]	; 227bc <secure_getenv@@Base+0x168>
   22684:	ldr	r2, [pc, #308]	; 227c0 <secure_getenv@@Base+0x16c>
   22688:	add	r3, pc, r3
   2268c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22690:	mov	r7, r0
   22694:	ldr	r9, [r3, r2]
   22698:	sub	sp, sp, #16
   2269c:	ldr	r0, [pc, #288]	; 227c4 <secure_getenv@@Base+0x170>
   226a0:	mov	r8, r1
   226a4:	ldr	r3, [r9]
   226a8:	add	r0, pc, r0
   226ac:	str	r3, [sp, #12]
   226b0:	bl	12420 <opendir@plt>
   226b4:	subs	r4, r0, #0
   226b8:	beq	22754 <secure_getenv@@Base+0x100>
   226bc:	add	r5, sp, #4
   226c0:	mov	r6, #0
   226c4:	mov	r0, r4
   226c8:	bl	126f0 <readdir@plt>
   226cc:	cmp	r0, #0
   226d0:	beq	2274c <secure_getenv@@Base+0xf8>
   226d4:	add	r0, r0, #11
   226d8:	mov	r1, r5
   226dc:	mov	r2, #10
   226e0:	str	r6, [sp, #4]
   226e4:	bl	12288 <strtol@plt>
   226e8:	ldr	r3, [sp, #4]
   226ec:	cmp	r3, #0
   226f0:	mov	sl, r0
   226f4:	beq	226c4 <secure_getenv@@Base+0x70>
   226f8:	ldrb	r3, [r3]
   226fc:	cmp	r3, #0
   22700:	bne	226c4 <secure_getenv@@Base+0x70>
   22704:	mov	r0, r4
   22708:	bl	12750 <dirfd@plt>
   2270c:	cmp	r0, sl
   22710:	beq	226c4 <secure_getenv@@Base+0x70>
   22714:	mov	r1, sl
   22718:	mov	r0, r8
   2271c:	blx	r7
   22720:	subs	sl, r0, #0
   22724:	beq	226c4 <secure_getenv@@Base+0x70>
   22728:	mov	r0, r4
   2272c:	bl	127e0 <closedir@plt>
   22730:	ldr	r2, [sp, #12]
   22734:	mov	r0, sl
   22738:	ldr	r3, [r9]
   2273c:	cmp	r2, r3
   22740:	bne	227b8 <secure_getenv@@Base+0x164>
   22744:	add	sp, sp, #16
   22748:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2274c:	mov	sl, r0
   22750:	b	22728 <secure_getenv@@Base+0xd4>
   22754:	mov	r0, #7
   22758:	add	r1, sp, #4
   2275c:	bl	1239c <getrlimit@plt>
   22760:	cmp	r0, #0
   22764:	bne	227a8 <secure_getenv@@Base+0x154>
   22768:	ldr	r5, [sp, #8]
   2276c:	cmn	r5, #1
   22770:	beq	227a8 <secure_getenv@@Base+0x154>
   22774:	cmp	r5, #0
   22778:	movgt	r4, #0
   2277c:	ble	227a0 <secure_getenv@@Base+0x14c>
   22780:	mov	r0, r8
   22784:	mov	r1, r4
   22788:	blx	r7
   2278c:	subs	sl, r0, #0
   22790:	bne	22730 <secure_getenv@@Base+0xdc>
   22794:	add	r4, r4, #1
   22798:	cmp	r4, r5
   2279c:	bne	22780 <secure_getenv@@Base+0x12c>
   227a0:	mov	sl, #0
   227a4:	b	22730 <secure_getenv@@Base+0xdc>
   227a8:	mov	r0, #4
   227ac:	bl	12378 <sysconf@plt>
   227b0:	mov	r5, r0
   227b4:	b	22774 <secure_getenv@@Base+0x120>
   227b8:	bl	12360 <__stack_chk_fail@plt>
   227bc:	andeq	r1, r2, r0, ror r9
   227c0:	andeq	r0, r0, r4, lsr #4
   227c4:	andeq	r7, r0, r0, ror #18
   227c8:	ldr	r3, [r0]
   227cc:	ldr	r2, [r1]
   227d0:	cmp	r3, r2
   227d4:	beq	227e4 <secure_getenv@@Base+0x190>
   227d8:	bcc	227ec <secure_getenv@@Base+0x198>
   227dc:	mov	r0, #1
   227e0:	bx	lr
   227e4:	mov	r0, #0
   227e8:	bx	lr
   227ec:	mvn	r0, #0
   227f0:	bx	lr
   227f4:	ldr	r3, [pc, #212]	; 228d0 <secure_getenv@@Base+0x27c>
   227f8:	mov	ip, #0
   227fc:	ldr	r2, [pc, #208]	; 228d4 <secure_getenv@@Base+0x280>
   22800:	add	r3, pc, r3
   22804:	push	{r4, lr}
   22808:	sub	sp, sp, #40	; 0x28
   2280c:	ldr	r4, [r3, r2]
   22810:	ldr	lr, [pc, #192]	; 228d8 <secure_getenv@@Base+0x284>
   22814:	str	r1, [sp, #12]
   22818:	ldr	r2, [r4]
   2281c:	str	ip, [sp, #16]
   22820:	str	ip, [sp, #20]
   22824:	str	ip, [sp, #24]
   22828:	str	r2, [sp, #36]	; 0x24
   2282c:	str	ip, [sp, #28]
   22830:	str	ip, [sp, #32]
   22834:	ldr	r1, [r3, lr]
   22838:	ldr	r3, [r1]
   2283c:	cmp	r3, r0
   22840:	beq	22888 <secure_getenv@@Base+0x234>
   22844:	mov	r3, #1
   22848:	ldr	r2, [r1, r3, lsl #3]
   2284c:	lsl	ip, r3, #3
   22850:	cmp	r2, r0
   22854:	beq	22888 <secure_getenv@@Base+0x234>
   22858:	add	r3, r3, #1
   2285c:	cmp	r3, #11
   22860:	bne	22848 <secure_getenv@@Base+0x1f4>
   22864:	ldr	r0, [pc, #112]	; 228dc <secure_getenv@@Base+0x288>
   22868:	ldr	r1, [pc, #112]	; 228e0 <secure_getenv@@Base+0x28c>
   2286c:	ldr	r2, [pc, #112]	; 228e4 <secure_getenv@@Base+0x290>
   22870:	add	r0, pc, r0
   22874:	add	r1, pc, r1
   22878:	add	r2, pc, r2
   2287c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   22880:	mov	r0, #0
   22884:	b	228b4 <secure_getenv@@Base+0x260>
   22888:	add	r1, r1, ip
   2288c:	ldr	r2, [r1, #4]
   22890:	cmn	r2, #1
   22894:	beq	22864 <secure_getenv@@Base+0x210>
   22898:	ldr	ip, [pc, #72]	; 228e8 <secure_getenv@@Base+0x294>
   2289c:	mov	r1, r0
   228a0:	mov	r3, #24
   228a4:	add	r0, sp, #12
   228a8:	add	ip, pc, ip
   228ac:	str	ip, [sp]
   228b0:	bl	125f4 <bsearch@plt>
   228b4:	ldr	r2, [sp, #36]	; 0x24
   228b8:	ldr	r3, [r4]
   228bc:	cmp	r2, r3
   228c0:	bne	228cc <secure_getenv@@Base+0x278>
   228c4:	add	sp, sp, #40	; 0x28
   228c8:	pop	{r4, pc}
   228cc:	bl	12360 <__stack_chk_fail@plt>
   228d0:	strdeq	r1, [r2], -r8
   228d4:	andeq	r0, r0, r4, lsr #4
   228d8:	andeq	r0, r0, r4, lsr r2
   228dc:	andeq	r3, r0, r4, lsr r5
   228e0:	andeq	r7, r0, r0, ror #15
   228e4:	andeq	r7, r0, r0, lsr #15
   228e8:			; <UNDEFINED> instruction: 0xffffff18
   228ec:	push	{r3, lr}
   228f0:	bl	227f4 <secure_getenv@@Base+0x1a0>
   228f4:	cmp	r0, #0
   228f8:	ldrne	r0, [r0, #4]
   228fc:	pop	{r3, pc}
   22900:	push	{r3, lr}
   22904:	bl	227f4 <secure_getenv@@Base+0x1a0>
   22908:	cmp	r0, #0
   2290c:	ldrne	r0, [r0, #8]
   22910:	pop	{r3, pc}
   22914:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22918:	mov	r2, #0
   2291c:	ldr	r4, [pc, #268]	; 22a30 <secure_getenv@@Base+0x3dc>
   22920:	mov	r8, r0
   22924:	ldr	r1, [pc, #264]	; 22a34 <secure_getenv@@Base+0x3e0>
   22928:	mov	r3, r2
   2292c:	ldr	ip, [pc, #260]	; 22a38 <secure_getenv@@Base+0x3e4>
   22930:	add	r4, pc, r4
   22934:	ldr	r0, [r4, r1]
   22938:	ldr	r1, [r4, ip]
   2293c:	bl	2336c <secure_getenv@@Base+0xd18>
   22940:	subs	r5, r0, #0
   22944:	beq	22a08 <secure_getenv@@Base+0x3b4>
   22948:	ldr	r3, [pc, #236]	; 22a3c <secure_getenv@@Base+0x3e8>
   2294c:	mov	r9, #0
   22950:	ldr	sl, [r4, r3]
   22954:	add	r3, sl, r9
   22958:	ldr	r4, [sl, r9]
   2295c:	ldr	r7, [r3, #4]
   22960:	cmp	r7, #0
   22964:	movgt	r6, #0
   22968:	ble	229f4 <secure_getenv@@Base+0x3a0>
   2296c:	cmp	r8, #0
   22970:	beq	229cc <secure_getenv@@Base+0x378>
   22974:	ldr	r1, [r4, #8]
   22978:	cmp	r1, #0
   2297c:	beq	229e4 <secure_getenv@@Base+0x390>
   22980:	mov	fp, r4
   22984:	b	22994 <secure_getenv@@Base+0x340>
   22988:	ldr	r1, [fp, #8]
   2298c:	cmp	r1, #0
   22990:	beq	229e4 <secure_getenv@@Base+0x390>
   22994:	mov	r0, r5
   22998:	mov	r2, r4
   2299c:	bl	23034 <secure_getenv@@Base+0x9e0>
   229a0:	add	fp, fp, #4
   229a4:	cmp	r0, #0
   229a8:	bne	22988 <secure_getenv@@Base+0x334>
   229ac:	ldr	r1, [pc, #140]	; 22a40 <secure_getenv@@Base+0x3ec>
   229b0:	ldr	r0, [pc, #140]	; 22a44 <secure_getenv@@Base+0x3f0>
   229b4:	add	r1, pc, r1
   229b8:	add	r0, pc, r0
   229bc:	add	r1, r1, #12
   229c0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   229c4:	mov	r0, #0
   229c8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229cc:	mov	r0, r5
   229d0:	ldr	r1, [r4, #4]
   229d4:	mov	r2, r4
   229d8:	bl	23034 <secure_getenv@@Base+0x9e0>
   229dc:	cmp	r0, #0
   229e0:	beq	229ac <secure_getenv@@Base+0x358>
   229e4:	add	r6, r6, #1
   229e8:	add	r4, r4, #24
   229ec:	cmp	r6, r7
   229f0:	bne	2296c <secure_getenv@@Base+0x318>
   229f4:	add	r9, r9, #8
   229f8:	cmp	r9, #88	; 0x58
   229fc:	bne	22954 <secure_getenv@@Base+0x300>
   22a00:	mov	r0, r5
   22a04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a08:	ldr	r2, [pc, #56]	; 22a48 <secure_getenv@@Base+0x3f4>
   22a0c:	ldr	r0, [pc, #56]	; 22a4c <secure_getenv@@Base+0x3f8>
   22a10:	ldr	r1, [pc, #56]	; 22a50 <secure_getenv@@Base+0x3fc>
   22a14:	add	r2, pc, r2
   22a18:	add	r0, pc, r0
   22a1c:	add	r2, r2, #12
   22a20:	add	r1, pc, r1
   22a24:	bl	22e10 <secure_getenv@@Base+0x7bc>
   22a28:	mov	r0, r5
   22a2c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a30:	andeq	r1, r2, r8, asr #13
   22a34:	andeq	r0, r0, r0, ror #4
   22a38:	andeq	r0, r0, ip, lsr #4
   22a3c:	andeq	r0, r0, r4, lsr r2
   22a40:	andeq	r7, r0, r4, ror #12
   22a44:	muleq	r0, r0, r5
   22a48:	andeq	r7, r0, r4, lsl #12
   22a4c:	andeq	r3, r0, ip, lsl #7
   22a50:	andeq	r7, r0, r4, asr #12
   22a54:	cmp	r0, #0
   22a58:	push	{r3, lr}
   22a5c:	beq	22aa4 <secure_getenv@@Base+0x450>
   22a60:	cmp	r1, #0
   22a64:	beq	22a7c <secure_getenv@@Base+0x428>
   22a68:	bl	23010 <secure_getenv@@Base+0x9bc>
   22a6c:	cmp	r0, #0
   22a70:	ldrne	r0, [r0]
   22a74:	mvneq	r0, #0
   22a78:	pop	{r3, pc}
   22a7c:	ldr	r2, [pc, #72]	; 22acc <secure_getenv@@Base+0x478>
   22a80:	ldr	r0, [pc, #72]	; 22ad0 <secure_getenv@@Base+0x47c>
   22a84:	ldr	r1, [pc, #72]	; 22ad4 <secure_getenv@@Base+0x480>
   22a88:	add	r2, pc, r2
   22a8c:	add	r0, pc, r0
   22a90:	add	r2, r2, #36	; 0x24
   22a94:	add	r1, pc, r1
   22a98:	bl	22e10 <secure_getenv@@Base+0x7bc>
   22a9c:	mvn	r0, #0
   22aa0:	pop	{r3, pc}
   22aa4:	ldr	r2, [pc, #44]	; 22ad8 <secure_getenv@@Base+0x484>
   22aa8:	ldr	r0, [pc, #44]	; 22adc <secure_getenv@@Base+0x488>
   22aac:	ldr	r1, [pc, #44]	; 22ae0 <secure_getenv@@Base+0x48c>
   22ab0:	add	r2, pc, r2
   22ab4:	add	r0, pc, r0
   22ab8:	add	r2, r2, #36	; 0x24
   22abc:	add	r1, pc, r1
   22ac0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   22ac4:	mvn	r0, #0
   22ac8:	pop	{r3, pc}
   22acc:	muleq	r0, r0, r5
   22ad0:	andeq	r3, r0, r8, lsl r3
   22ad4:	andeq	r5, r0, ip, asr #5
   22ad8:	andeq	r7, r0, r8, ror #10
   22adc:	strdeq	r3, [r0], -r0
   22ae0:			; <UNDEFINED> instruction: 0x000075b8
   22ae4:	ldr	r0, [pc, #544]	; 22d0c <secure_getenv@@Base+0x6b8>
   22ae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22aec:	add	r0, pc, r0
   22af0:	sub	sp, sp, #12
   22af4:	bl	22654 <secure_getenv@@Base>
   22af8:	ldr	ip, [pc, #528]	; 22d10 <secure_getenv@@Base+0x6bc>
   22afc:	add	ip, pc, ip
   22b00:	str	ip, [sp, #4]
   22b04:	cmp	r0, #0
   22b08:	beq	22b18 <secure_getenv@@Base+0x4c4>
   22b0c:	ldrb	r3, [r0]
   22b10:	cmp	r3, #0
   22b14:	bne	22c68 <secure_getenv@@Base+0x614>
   22b18:	ldr	r0, [pc, #500]	; 22d14 <secure_getenv@@Base+0x6c0>
   22b1c:	add	r0, pc, r0
   22b20:	bl	12444 <getenv@plt>
   22b24:	subs	r5, r0, #0
   22b28:	beq	22d04 <secure_getenv@@Base+0x6b0>
   22b2c:	ldrb	r4, [r5]
   22b30:	cmp	r4, #97	; 0x61
   22b34:	beq	22c20 <secure_getenv@@Base+0x5cc>
   22b38:	ldr	r1, [pc, #472]	; 22d18 <secure_getenv@@Base+0x6c4>
   22b3c:	mov	r0, r5
   22b40:	add	r1, pc, r1
   22b44:	bl	1227c <strcmp@plt>
   22b48:	cmp	r0, #0
   22b4c:	beq	22c98 <secure_getenv@@Base+0x644>
   22b50:	ldr	sl, [pc, #452]	; 22d1c <secure_getenv@@Base+0x6c8>
   22b54:	mov	r3, r4
   22b58:	ldr	r9, [pc, #448]	; 22d20 <secure_getenv@@Base+0x6cc>
   22b5c:	mov	r7, #0
   22b60:	ldr	ip, [pc, #444]	; 22d24 <secure_getenv@@Base+0x6d0>
   22b64:	add	sl, pc, sl
   22b68:	add	r9, pc, r9
   22b6c:	add	ip, pc, ip
   22b70:	str	ip, [sp]
   22b74:	cmp	r3, #0
   22b78:	beq	22bf8 <secure_getenv@@Base+0x5a4>
   22b7c:	mov	r0, r5
   22b80:	mov	r1, sl
   22b84:	bl	12768 <strpbrk@plt>
   22b88:	subs	r6, r0, #0
   22b8c:	beq	22c88 <secure_getenv@@Base+0x634>
   22b90:	rsb	r4, r5, r6
   22b94:	add	r8, r9, #8
   22b98:	mov	r0, #3
   22b9c:	ldr	fp, [sp]
   22ba0:	b	22bb8 <secure_getenv@@Base+0x564>
   22ba4:	ldr	fp, [r8], #8
   22ba8:	cmp	fp, #0
   22bac:	mov	r0, fp
   22bb0:	beq	22bec <secure_getenv@@Base+0x598>
   22bb4:	bl	12540 <strlen@plt>
   22bb8:	cmp	r0, r4
   22bbc:	bne	22ba4 <secure_getenv@@Base+0x550>
   22bc0:	mov	r0, fp
   22bc4:	mov	r1, r5
   22bc8:	mov	r2, r4
   22bcc:	bl	127bc <strncmp@plt>
   22bd0:	cmp	r0, #0
   22bd4:	ldreq	r3, [r8, #-4]
   22bd8:	ldr	fp, [r8], #8
   22bdc:	orreq	r7, r7, r3
   22be0:	cmp	fp, #0
   22be4:	mov	r0, fp
   22be8:	bne	22bb4 <secure_getenv@@Base+0x560>
   22bec:	ldrb	r3, [r6]
   22bf0:	cmp	r3, #0
   22bf4:	bne	22c7c <secure_getenv@@Base+0x628>
   22bf8:	ldr	ip, [sp, #4]
   22bfc:	mov	r1, #1
   22c00:	ldr	r3, [pc, #288]	; 22d28 <secure_getenv@@Base+0x6d4>
   22c04:	ldr	r2, [pc, #288]	; 22d2c <secure_getenv@@Base+0x6d8>
   22c08:	ldr	r3, [ip, r3]
   22c0c:	add	r2, pc, r2
   22c10:	strb	r1, [r2, #1]
   22c14:	str	r7, [r3]
   22c18:	add	sp, sp, #12
   22c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c20:	ldrb	r3, [r5, #1]
   22c24:	cmp	r3, #108	; 0x6c
   22c28:	bne	22b38 <secure_getenv@@Base+0x4e4>
   22c2c:	ldrb	r3, [r5, #2]
   22c30:	cmp	r3, #108	; 0x6c
   22c34:	bne	22b38 <secure_getenv@@Base+0x4e4>
   22c38:	ldrb	r7, [r5, #3]
   22c3c:	cmp	r7, #0
   22c40:	bne	22b38 <secure_getenv@@Base+0x4e4>
   22c44:	ldr	r3, [pc, #228]	; 22d30 <secure_getenv@@Base+0x6dc>
   22c48:	add	r3, pc, r3
   22c4c:	add	r3, r3, #4
   22c50:	ldr	r2, [r3], #8
   22c54:	orr	r7, r7, r2
   22c58:	ldr	r2, [r3, #-4]
   22c5c:	cmp	r2, #0
   22c60:	bne	22c50 <secure_getenv@@Base+0x5fc>
   22c64:	b	22bf8 <secure_getenv@@Base+0x5a4>
   22c68:	ldr	r3, [pc, #196]	; 22d34 <secure_getenv@@Base+0x6e0>
   22c6c:	mov	r2, #1
   22c70:	add	r3, pc, r3
   22c74:	strb	r2, [r3]
   22c78:	b	22b18 <secure_getenv@@Base+0x4c4>
   22c7c:	ldrb	r3, [r6, #1]
   22c80:	add	r5, r6, #1
   22c84:	b	22b74 <secure_getenv@@Base+0x520>
   22c88:	mov	r0, r5
   22c8c:	bl	12540 <strlen@plt>
   22c90:	add	r6, r5, r0
   22c94:	b	22b90 <secure_getenv@@Base+0x53c>
   22c98:	ldr	r3, [pc, #152]	; 22d38 <secure_getenv@@Base+0x6e4>
   22c9c:	mov	r1, #1
   22ca0:	ldr	ip, [sp, #4]
   22ca4:	mov	r2, #23
   22ca8:	ldr	r0, [pc, #140]	; 22d3c <secure_getenv@@Base+0x6e8>
   22cac:	ldr	r4, [pc, #140]	; 22d40 <secure_getenv@@Base+0x6ec>
   22cb0:	ldr	r5, [ip, r3]
   22cb4:	add	r0, pc, r0
   22cb8:	ldr	r7, [pc, #132]	; 22d44 <secure_getenv@@Base+0x6f0>
   22cbc:	add	r4, pc, r4
   22cc0:	ldr	r6, [pc, #128]	; 22d48 <secure_getenv@@Base+0x6f4>
   22cc4:	ldr	r3, [r5]
   22cc8:	add	r7, pc, r7
   22ccc:	add	r6, pc, r6
   22cd0:	bl	123f0 <fwrite@plt>
   22cd4:	mov	r3, r7
   22cd8:	ldr	r0, [r5]
   22cdc:	mov	r1, #1
   22ce0:	mov	r2, r6
   22ce4:	bl	1266c <__fprintf_chk@plt>
   22ce8:	ldr	r7, [r4, #8]!
   22cec:	cmp	r7, #0
   22cf0:	bne	22cd4 <secure_getenv@@Base+0x680>
   22cf4:	ldr	r1, [r5]
   22cf8:	mov	r0, #10
   22cfc:	bl	12720 <fputc@plt>
   22d00:	b	22bf8 <secure_getenv@@Base+0x5a4>
   22d04:	mov	r7, r5
   22d08:	b	22bf8 <secure_getenv@@Base+0x5a4>
   22d0c:	andeq	fp, r0, r0, ror #5
   22d10:	strdeq	r1, [r2], -ip
   22d14:	andeq	fp, r0, r0, asr #5
   22d18:			; <UNDEFINED> instruction: 0x000032bc
   22d1c:	andeq	fp, r0, r0, lsr #5
   22d20:	andeq	r1, r2, r8, lsr #6
   22d24:	andeq	fp, r0, ip, asr r2
   22d28:	andeq	r0, r0, r4, ror #4
   22d2c:	strdeq	r1, [r2], -r9
   22d30:	andeq	r1, r2, r8, asr #4
   22d34:	muleq	r2, r5, r6
   22d38:	andeq	r0, r0, r8, lsr r2
   22d3c:	andeq	fp, r0, r8, lsr r1
   22d40:	ldrdeq	r1, [r2], -r4
   22d44:	andeq	fp, r0, r0, lsl #2
   22d48:	andeq	fp, r0, ip, ror r4
   22d4c:	push	{r1, r2, r3}
   22d50:	ldr	r3, [pc, #164]	; 22dfc <secure_getenv@@Base+0x7a8>
   22d54:	ldr	ip, [pc, #164]	; 22e00 <secure_getenv@@Base+0x7ac>
   22d58:	add	r3, pc, r3
   22d5c:	ldr	r1, [pc, #160]	; 22e04 <secure_getenv@@Base+0x7b0>
   22d60:	push	{r4, r5, r6, r7, lr}
   22d64:	sub	sp, sp, #8
   22d68:	ldr	r4, [r3, ip]
   22d6c:	ldr	r5, [sp, #28]
   22d70:	ldr	ip, [r4]
   22d74:	str	ip, [sp, #4]
   22d78:	ldr	r1, [r3, r1]
   22d7c:	ldr	r1, [r1]
   22d80:	tst	r0, r1
   22d84:	beq	22dd8 <secure_getenv@@Base+0x784>
   22d88:	ldr	r2, [pc, #120]	; 22e08 <secure_getenv@@Base+0x7b4>
   22d8c:	ldr	r6, [r3, r2]
   22d90:	ldr	r7, [r6]
   22d94:	bl	124f8 <getpid@plt>
   22d98:	ldr	r2, [pc, #108]	; 22e0c <secure_getenv@@Base+0x7b8>
   22d9c:	mov	r1, #1
   22da0:	add	r2, pc, r2
   22da4:	mov	r3, r0
   22da8:	mov	r0, r7
   22dac:	bl	1266c <__fprintf_chk@plt>
   22db0:	add	ip, sp, #32
   22db4:	mov	r1, #1
   22db8:	mov	r2, r5
   22dbc:	ldr	r0, [r6]
   22dc0:	mov	r3, ip
   22dc4:	str	ip, [sp]
   22dc8:	bl	12498 <__vfprintf_chk@plt>
   22dcc:	ldr	r1, [r6]
   22dd0:	mov	r0, #10
   22dd4:	bl	12720 <fputc@plt>
   22dd8:	ldr	r2, [sp, #4]
   22ddc:	ldr	r3, [r4]
   22de0:	cmp	r2, r3
   22de4:	bne	22df8 <secure_getenv@@Base+0x7a4>
   22de8:	add	sp, sp, #8
   22dec:	pop	{r4, r5, r6, r7, lr}
   22df0:	add	sp, sp, #12
   22df4:	bx	lr
   22df8:	bl	12360 <__stack_chk_fail@plt>
   22dfc:	andeq	r1, r2, r0, lsr #5
   22e00:	andeq	r0, r0, r4, lsr #4
   22e04:	andeq	r0, r0, r4, ror #4
   22e08:	andeq	r0, r0, r8, lsr r2
   22e0c:	andeq	fp, r0, ip, rrx
   22e10:	push	{r0, r1, r2, r3}
   22e14:	mov	r1, #1
   22e18:	ldr	r0, [pc, #116]	; 22e94 <secure_getenv@@Base+0x840>
   22e1c:	push	{r4, lr}
   22e20:	add	r0, pc, r0
   22e24:	ldr	r4, [pc, #108]	; 22e98 <secure_getenv@@Base+0x844>
   22e28:	sub	sp, sp, #8
   22e2c:	add	ip, sp, #20
   22e30:	ldr	lr, [pc, #100]	; 22e9c <secure_getenv@@Base+0x848>
   22e34:	ldr	r2, [sp, #16]
   22e38:	ldr	r4, [r0, r4]
   22e3c:	mov	r3, ip
   22e40:	str	ip, [sp]
   22e44:	ldr	ip, [r4]
   22e48:	str	ip, [sp, #4]
   22e4c:	ldr	r0, [r0, lr]
   22e50:	ldr	r0, [r0]
   22e54:	bl	12498 <__vfprintf_chk@plt>
   22e58:	ldr	r3, [pc, #64]	; 22ea0 <secure_getenv@@Base+0x84c>
   22e5c:	add	r3, pc, r3
   22e60:	ldrb	r3, [r3]
   22e64:	cmp	r3, #0
   22e68:	bne	22e8c <secure_getenv@@Base+0x838>
   22e6c:	ldr	r2, [sp, #4]
   22e70:	ldr	r3, [r4]
   22e74:	cmp	r2, r3
   22e78:	bne	22e90 <secure_getenv@@Base+0x83c>
   22e7c:	add	sp, sp, #8
   22e80:	pop	{r4, lr}
   22e84:	add	sp, sp, #16
   22e88:	bx	lr
   22e8c:	bl	127c8 <abort@plt>
   22e90:	bl	12360 <__stack_chk_fail@plt>
   22e94:	ldrdeq	r1, [r2], -r8
   22e98:	andeq	r0, r0, r4, lsr #4
   22e9c:	andeq	r0, r0, r8, lsr r2
   22ea0:	andeq	r1, r2, r9, lsr #9
   22ea4:	push	{r4, r5, r6, r7, r8, lr}
   22ea8:	mov	r6, r0
   22eac:	ldr	r3, [r0]
   22eb0:	mov	r0, r1
   22eb4:	mov	r7, r1
   22eb8:	mov	r8, r2
   22ebc:	blx	r3
   22ec0:	ldr	r1, [r6, #24]
   22ec4:	mov	r5, r0
   22ec8:	bl	25be8 <p11_dict_direct_equal@@Base+0x23f0>
   22ecc:	ldr	r3, [r6, #16]
   22ed0:	add	r4, r3, r1, lsl #2
   22ed4:	ldr	r3, [r3, r1, lsl #2]
   22ed8:	cmp	r3, #0
   22edc:	bne	22ef8 <secure_getenv@@Base+0x8a4>
   22ee0:	b	22f30 <secure_getenv@@Base+0x8dc>
   22ee4:	ldr	r3, [r4]
   22ee8:	add	r4, r3, #12
   22eec:	ldr	r3, [r3, #12]
   22ef0:	cmp	r3, #0
   22ef4:	beq	22f30 <secure_getenv@@Base+0x8dc>
   22ef8:	ldr	ip, [r3, #4]
   22efc:	cmp	r5, ip
   22f00:	bne	22ee4 <secure_getenv@@Base+0x890>
   22f04:	ldr	r0, [r3]
   22f08:	mov	r1, r7
   22f0c:	ldr	r3, [r6, #4]
   22f10:	blx	r3
   22f14:	cmp	r0, #0
   22f18:	beq	22ee4 <secure_getenv@@Base+0x890>
   22f1c:	ldr	r3, [r4]
   22f20:	cmp	r3, #0
   22f24:	beq	22f30 <secure_getenv@@Base+0x8dc>
   22f28:	mov	r0, r4
   22f2c:	pop	{r4, r5, r6, r7, r8, pc}
   22f30:	cmp	r8, #0
   22f34:	beq	22f28 <secure_getenv@@Base+0x8d4>
   22f38:	mov	r0, #16
   22f3c:	mov	r1, #1
   22f40:	bl	1221c <calloc@plt>
   22f44:	cmp	r0, #0
   22f48:	str	r0, [r4]
   22f4c:	beq	22f28 <secure_getenv@@Base+0x8d4>
   22f50:	str	r7, [r0]
   22f54:	ldr	r3, [r4]
   22f58:	str	r5, [r3, #4]
   22f5c:	ldr	r3, [r6, #20]
   22f60:	add	r3, r3, #1
   22f64:	str	r3, [r6, #20]
   22f68:	b	22f28 <secure_getenv@@Base+0x8d4>
   22f6c:	push	{r4, r5}
   22f70:	ldr	r4, [r0, #4]
   22f74:	cmp	r4, #0
   22f78:	bne	22fc0 <secure_getenv@@Base+0x96c>
   22f7c:	ldr	r5, [r0]
   22f80:	ldr	r3, [r0, #8]
   22f84:	ldr	ip, [r5, #24]
   22f88:	cmp	ip, r3
   22f8c:	bls	22ff0 <secure_getenv@@Base+0x99c>
   22f90:	lsl	ip, r3, #2
   22f94:	b	22fa4 <secure_getenv@@Base+0x950>
   22f98:	ldr	r4, [r5, #24]
   22f9c:	cmp	r4, r3
   22fa0:	bls	22ff0 <secure_getenv@@Base+0x99c>
   22fa4:	ldr	r4, [r5, #16]
   22fa8:	add	r3, r3, #1
   22fac:	str	r3, [r0, #8]
   22fb0:	ldr	r4, [r4, ip]
   22fb4:	add	ip, ip, #4
   22fb8:	cmp	r4, #0
   22fbc:	beq	22f98 <secure_getenv@@Base+0x944>
   22fc0:	ldr	r3, [r4, #12]
   22fc4:	cmp	r1, #0
   22fc8:	str	r3, [r0, #4]
   22fcc:	ldrne	r3, [r4]
   22fd0:	strne	r3, [r1]
   22fd4:	cmp	r2, #0
   22fd8:	ldrne	r3, [r4, #8]
   22fdc:	movne	r0, #1
   22fe0:	moveq	r0, #1
   22fe4:	pop	{r4, r5}
   22fe8:	strne	r3, [r2]
   22fec:	bx	lr
   22ff0:	mov	r0, #0
   22ff4:	pop	{r4, r5}
   22ff8:	bx	lr
   22ffc:	mov	r3, #0
   23000:	str	r0, [r1]
   23004:	str	r3, [r1, #8]
   23008:	str	r3, [r1, #4]
   2300c:	bx	lr
   23010:	push	{r3, lr}
   23014:	mov	r2, #0
   23018:	bl	22ea4 <secure_getenv@@Base+0x850>
   2301c:	cmp	r0, #0
   23020:	popeq	{r3, pc}
   23024:	ldr	r0, [r0]
   23028:	cmp	r0, #0
   2302c:	ldrne	r0, [r0, #8]
   23030:	pop	{r3, pc}
   23034:	ldr	r3, [pc, #408]	; 231d4 <secure_getenv@@Base+0xb80>
   23038:	ldr	ip, [pc, #408]	; 231d8 <secure_getenv@@Base+0xb84>
   2303c:	add	r3, pc, r3
   23040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23044:	sub	sp, sp, #20
   23048:	ldr	r9, [r3, ip]
   2304c:	mov	r5, r2
   23050:	mov	r2, #1
   23054:	mov	r6, r0
   23058:	mov	r7, r1
   2305c:	ldr	r3, [r9]
   23060:	str	r3, [sp, #12]
   23064:	bl	22ea4 <secure_getenv@@Base+0x850>
   23068:	subs	r4, r0, #0
   2306c:	beq	231b4 <secure_getenv@@Base+0xb60>
   23070:	ldr	r3, [r4]
   23074:	cmp	r3, #0
   23078:	beq	231b4 <secure_getenv@@Base+0xb60>
   2307c:	ldr	r0, [r3]
   23080:	cmp	r0, #0
   23084:	beq	230a4 <secure_getenv@@Base+0xa50>
   23088:	cmp	r7, r0
   2308c:	beq	230a4 <secure_getenv@@Base+0xa50>
   23090:	ldr	r2, [r6, #8]
   23094:	cmp	r2, #0
   23098:	beq	230a4 <secure_getenv@@Base+0xa50>
   2309c:	blx	r2
   230a0:	ldr	r3, [r4]
   230a4:	ldr	r0, [r3, #8]
   230a8:	cmp	r0, #0
   230ac:	beq	230cc <secure_getenv@@Base+0xa78>
   230b0:	cmp	r0, r5
   230b4:	beq	230cc <secure_getenv@@Base+0xa78>
   230b8:	ldr	r2, [r6, #12]
   230bc:	cmp	r2, #0
   230c0:	beq	230cc <secure_getenv@@Base+0xa78>
   230c4:	blx	r2
   230c8:	ldr	r3, [r4]
   230cc:	str	r7, [r3]
   230d0:	ldr	r3, [r4]
   230d4:	str	r5, [r3, #8]
   230d8:	ldr	r3, [r6, #24]
   230dc:	ldr	r2, [r6, #20]
   230e0:	cmp	r2, r3
   230e4:	bhi	23104 <secure_getenv@@Base+0xab0>
   230e8:	mov	r0, #1
   230ec:	ldr	r2, [sp, #12]
   230f0:	ldr	r3, [r9]
   230f4:	cmp	r2, r3
   230f8:	bne	231d0 <secure_getenv@@Base+0xb7c>
   230fc:	add	sp, sp, #20
   23100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23104:	lsl	r3, r3, #1
   23108:	mov	r0, #4
   2310c:	add	r8, r3, #1
   23110:	mov	r1, r8
   23114:	bl	1221c <calloc@plt>
   23118:	subs	r7, r0, #0
   2311c:	beq	230e8 <secure_getenv@@Base+0xa94>
   23120:	mov	r0, r6
   23124:	mov	r1, sp
   23128:	bl	22ffc <secure_getenv@@Base+0x9a8>
   2312c:	ldr	r4, [sp, #8]
   23130:	ldr	sl, [sp]
   23134:	ldr	r5, [sp, #4]
   23138:	cmp	r5, #0
   2313c:	bne	23178 <secure_getenv@@Base+0xb24>
   23140:	ldr	r2, [sl, #24]
   23144:	cmp	r2, r4
   23148:	bls	231a0 <secure_getenv@@Base+0xb4c>
   2314c:	sub	r3, r4, #-1073741823	; 0xc0000001
   23150:	ldr	r1, [sl, #16]
   23154:	add	r3, r1, r3, lsl #2
   23158:	b	23164 <secure_getenv@@Base+0xb10>
   2315c:	cmp	r4, r2
   23160:	bcs	231a0 <secure_getenv@@Base+0xb4c>
   23164:	add	r4, r4, #1
   23168:	str	r4, [sp, #8]
   2316c:	ldr	r5, [r3, #4]!
   23170:	cmp	r5, #0
   23174:	beq	2315c <secure_getenv@@Base+0xb08>
   23178:	ldr	fp, [r5, #12]
   2317c:	mov	r1, r8
   23180:	str	fp, [sp, #4]
   23184:	ldr	r0, [r5, #4]
   23188:	bl	25be8 <p11_dict_direct_equal@@Base+0x23f0>
   2318c:	ldr	r3, [r7, r1, lsl #2]
   23190:	str	r3, [r5, #12]
   23194:	str	r5, [r7, r1, lsl #2]
   23198:	mov	r5, fp
   2319c:	b	23138 <secure_getenv@@Base+0xae4>
   231a0:	ldr	r0, [r6, #16]
   231a4:	bl	122c4 <free@plt>
   231a8:	str	r7, [r6, #16]
   231ac:	str	r8, [r6, #24]
   231b0:	b	230e8 <secure_getenv@@Base+0xa94>
   231b4:	ldr	r0, [pc, #32]	; 231dc <secure_getenv@@Base+0xb88>
   231b8:	ldr	r1, [pc, #32]	; 231e0 <secure_getenv@@Base+0xb8c>
   231bc:	add	r0, pc, r0
   231c0:	add	r1, pc, r1
   231c4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   231c8:	mov	r0, #0
   231cc:	b	230ec <secure_getenv@@Base+0xa98>
   231d0:	bl	12360 <__stack_chk_fail@plt>
   231d4:			; <UNDEFINED> instruction: 0x00020fbc
   231d8:	andeq	r0, r0, r4, lsr #4
   231dc:	andeq	r2, r0, ip, lsl #27
   231e0:	andeq	sl, r0, r8, ror ip
   231e4:	push	{r4, r5, r6, lr}
   231e8:	mov	r5, r2
   231ec:	mov	r2, #0
   231f0:	mov	r6, r3
   231f4:	mov	r4, r0
   231f8:	bl	22ea4 <secure_getenv@@Base+0x850>
   231fc:	subs	r1, r0, #0
   23200:	beq	23248 <secure_getenv@@Base+0xbf4>
   23204:	ldr	r0, [r1]
   23208:	cmp	r0, #0
   2320c:	popeq	{r4, r5, r6, pc}
   23210:	ldr	r3, [r0, #12]
   23214:	cmp	r5, #0
   23218:	str	r3, [r1]
   2321c:	ldr	r3, [r4, #20]
   23220:	sub	r3, r3, #1
   23224:	str	r3, [r4, #20]
   23228:	ldrne	r3, [r0]
   2322c:	strne	r3, [r5]
   23230:	cmp	r6, #0
   23234:	ldrne	r3, [r0, #8]
   23238:	strne	r3, [r6]
   2323c:	bl	122c4 <free@plt>
   23240:	mov	r0, #1
   23244:	pop	{r4, r5, r6, pc}
   23248:	mov	r0, r1
   2324c:	pop	{r4, r5, r6, pc}
   23250:	ldr	ip, [pc, #120]	; 232d0 <secure_getenv@@Base+0xc7c>
   23254:	push	{r4, r5, r6, lr}
   23258:	add	ip, pc, ip
   2325c:	ldr	lr, [pc, #112]	; 232d4 <secure_getenv@@Base+0xc80>
   23260:	sub	sp, sp, #16
   23264:	add	r2, sp, #4
   23268:	add	r3, sp, #8
   2326c:	mov	r5, r0
   23270:	ldr	r4, [ip, lr]
   23274:	ldr	ip, [r4]
   23278:	str	ip, [sp, #12]
   2327c:	bl	231e4 <secure_getenv@@Base+0xb90>
   23280:	subs	r6, r0, #0
   23284:	beq	232b0 <secure_getenv@@Base+0xc5c>
   23288:	ldr	r3, [r5, #8]
   2328c:	cmp	r3, #0
   23290:	beq	2329c <secure_getenv@@Base+0xc48>
   23294:	ldr	r0, [sp, #4]
   23298:	blx	r3
   2329c:	ldr	r3, [r5, #12]
   232a0:	cmp	r3, #0
   232a4:	beq	232b0 <secure_getenv@@Base+0xc5c>
   232a8:	ldr	r0, [sp, #8]
   232ac:	blx	r3
   232b0:	ldr	r2, [sp, #12]
   232b4:	mov	r0, r6
   232b8:	ldr	r3, [r4]
   232bc:	cmp	r2, r3
   232c0:	bne	232cc <secure_getenv@@Base+0xc78>
   232c4:	add	sp, sp, #16
   232c8:	pop	{r4, r5, r6, pc}
   232cc:	bl	12360 <__stack_chk_fail@plt>
   232d0:	andeq	r0, r2, r0, lsr #27
   232d4:	andeq	r0, r0, r4, lsr #4
   232d8:	push	{r3, r4, r5, r6, r7, lr}
   232dc:	mov	r6, r0
   232e0:	ldr	r2, [r0, #24]
   232e4:	ldr	r0, [r0, #16]
   232e8:	cmp	r2, #0
   232ec:	movne	r7, #0
   232f0:	beq	23354 <secure_getenv@@Base+0xd00>
   232f4:	ldr	r4, [r0, r7, lsl #2]
   232f8:	cmp	r4, #0
   232fc:	beq	23348 <secure_getenv@@Base+0xcf4>
   23300:	ldr	r3, [r6, #8]
   23304:	ldr	r5, [r4, #12]
   23308:	cmp	r3, #0
   2330c:	beq	23318 <secure_getenv@@Base+0xcc4>
   23310:	ldr	r0, [r4]
   23314:	blx	r3
   23318:	ldr	r3, [r6, #12]
   2331c:	cmp	r3, #0
   23320:	beq	2332c <secure_getenv@@Base+0xcd8>
   23324:	ldr	r0, [r4, #8]
   23328:	blx	r3
   2332c:	mov	r0, r4
   23330:	mov	r4, r5
   23334:	bl	122c4 <free@plt>
   23338:	cmp	r5, #0
   2333c:	bne	23300 <secure_getenv@@Base+0xcac>
   23340:	ldr	r0, [r6, #16]
   23344:	ldr	r2, [r6, #24]
   23348:	add	r7, r7, #1
   2334c:	cmp	r2, r7
   23350:	bhi	232f4 <secure_getenv@@Base+0xca0>
   23354:	lsl	r2, r2, #2
   23358:	mov	r1, #0
   2335c:	bl	125e8 <memset@plt>
   23360:	mov	r3, #0
   23364:	str	r3, [r6, #20]
   23368:	pop	{r3, r4, r5, r6, r7, pc}
   2336c:	push	{r4, r5, r6, r7, r8, lr}
   23370:	subs	r6, r0, #0
   23374:	mov	r5, r1
   23378:	mov	r8, r2
   2337c:	mov	r7, r3
   23380:	beq	2341c <secure_getenv@@Base+0xdc8>
   23384:	cmp	r1, #0
   23388:	beq	233f8 <secure_getenv@@Base+0xda4>
   2338c:	mov	r0, #28
   23390:	bl	1245c <malloc@plt>
   23394:	subs	r4, r0, #0
   23398:	beq	233e0 <secure_getenv@@Base+0xd8c>
   2339c:	mov	ip, #9
   233a0:	str	r5, [r4, #4]
   233a4:	str	r6, [r4]
   233a8:	mov	r1, ip
   233ac:	str	r8, [r4, #8]
   233b0:	mov	r0, #4
   233b4:	str	r7, [r4, #12]
   233b8:	str	ip, [r4, #24]
   233bc:	bl	1221c <calloc@plt>
   233c0:	cmp	r0, #0
   233c4:	mov	r5, r0
   233c8:	str	r0, [r4, #16]
   233cc:	beq	233e8 <secure_getenv@@Base+0xd94>
   233d0:	mov	r3, #0
   233d4:	mov	r0, r4
   233d8:	str	r3, [r4, #20]
   233dc:	pop	{r4, r5, r6, r7, r8, pc}
   233e0:	mov	r0, r4
   233e4:	pop	{r4, r5, r6, r7, r8, pc}
   233e8:	mov	r0, r4
   233ec:	bl	122c4 <free@plt>
   233f0:	mov	r0, r5
   233f4:	pop	{r4, r5, r6, r7, r8, pc}
   233f8:	ldr	r3, [pc, #64]	; 23440 <secure_getenv@@Base+0xdec>
   233fc:	mov	r2, #276	; 0x114
   23400:	ldr	r0, [pc, #60]	; 23444 <secure_getenv@@Base+0xdf0>
   23404:	ldr	r1, [pc, #60]	; 23448 <secure_getenv@@Base+0xdf4>
   23408:	add	r3, pc, r3
   2340c:	add	r0, pc, r0
   23410:	add	r3, r3, #16
   23414:	add	r1, pc, r1
   23418:	bl	12828 <__assert_fail@plt>
   2341c:	ldr	r3, [pc, #40]	; 2344c <secure_getenv@@Base+0xdf8>
   23420:	movw	r2, #275	; 0x113
   23424:	ldr	r0, [pc, #36]	; 23450 <secure_getenv@@Base+0xdfc>
   23428:	ldr	r1, [pc, #36]	; 23454 <secure_getenv@@Base+0xe00>
   2342c:	add	r3, pc, r3
   23430:	add	r0, pc, r0
   23434:	add	r3, r3, #16
   23438:	add	r1, pc, r1
   2343c:	bl	12828 <__assert_fail@plt>
   23440:	andeq	sl, r0, r0, lsr sl
   23444:	ldrdeq	sl, [r0], -ip
   23448:	andeq	sl, r0, r4, asr #21
   2344c:	andeq	sl, r0, ip, lsl #20
   23450:	muleq	r0, ip, sl
   23454:	andeq	sl, r0, r0, lsr #21
   23458:	ldr	r3, [pc, #252]	; 2355c <secure_getenv@@Base+0xf08>
   2345c:	ldr	r2, [pc, #252]	; 23560 <secure_getenv@@Base+0xf0c>
   23460:	add	r3, pc, r3
   23464:	push	{r4, r5, r6, lr}
   23468:	subs	r5, r0, #0
   2346c:	ldr	r6, [r3, r2]
   23470:	sub	sp, sp, #16
   23474:	ldr	r3, [r6]
   23478:	str	r3, [sp, #12]
   2347c:	beq	23540 <secure_getenv@@Base+0xeec>
   23480:	mov	r1, sp
   23484:	bl	22ffc <secure_getenv@@Base+0x9a8>
   23488:	ldr	r4, [sp, #4]
   2348c:	cmp	r4, #0
   23490:	bne	234d4 <secure_getenv@@Base+0xe80>
   23494:	ldr	r2, [sp]
   23498:	ldr	r3, [sp, #8]
   2349c:	ldr	r1, [r2, #24]
   234a0:	cmp	r1, r3
   234a4:	bls	23510 <secure_getenv@@Base+0xebc>
   234a8:	ldr	r2, [r2, #16]
   234ac:	sub	r0, r3, #-1073741823	; 0xc0000001
   234b0:	add	r2, r2, r0, lsl #2
   234b4:	b	234c0 <secure_getenv@@Base+0xe6c>
   234b8:	cmp	r3, r1
   234bc:	bcs	23510 <secure_getenv@@Base+0xebc>
   234c0:	add	r3, r3, #1
   234c4:	str	r3, [sp, #8]
   234c8:	ldr	r4, [r2, #4]!
   234cc:	cmp	r4, #0
   234d0:	beq	234b8 <secure_getenv@@Base+0xe64>
   234d4:	ldr	r3, [r5, #8]
   234d8:	ldr	r2, [r4, #12]
   234dc:	cmp	r3, #0
   234e0:	str	r2, [sp, #4]
   234e4:	beq	234f0 <secure_getenv@@Base+0xe9c>
   234e8:	ldr	r0, [r4]
   234ec:	blx	r3
   234f0:	ldr	r3, [r5, #12]
   234f4:	cmp	r3, #0
   234f8:	beq	23504 <secure_getenv@@Base+0xeb0>
   234fc:	ldr	r0, [r4, #8]
   23500:	blx	r3
   23504:	mov	r0, r4
   23508:	bl	122c4 <free@plt>
   2350c:	b	23488 <secure_getenv@@Base+0xe34>
   23510:	ldr	r0, [r5, #16]
   23514:	cmp	r0, #0
   23518:	beq	23520 <secure_getenv@@Base+0xecc>
   2351c:	bl	122c4 <free@plt>
   23520:	ldr	r2, [sp, #12]
   23524:	ldr	r3, [r6]
   23528:	cmp	r2, r3
   2352c:	bne	23558 <secure_getenv@@Base+0xf04>
   23530:	mov	r0, r5
   23534:	add	sp, sp, #16
   23538:	pop	{r4, r5, r6, lr}
   2353c:	b	122c4 <free@plt>
   23540:	ldr	r2, [sp, #12]
   23544:	ldr	r3, [r6]
   23548:	cmp	r2, r3
   2354c:	bne	23558 <secure_getenv@@Base+0xf04>
   23550:	add	sp, sp, #16
   23554:	pop	{r4, r5, r6, pc}
   23558:	bl	12360 <__stack_chk_fail@plt>
   2355c:	muleq	r2, r8, fp
   23560:	andeq	r0, r0, r4, lsr #4
   23564:	ldr	r0, [r0, #20]
   23568:	bx	lr

0002356c <p11_dict_str_hash@@Base>:
   2356c:	ldr	r3, [pc, #84]	; 235c8 <p11_dict_str_hash@@Base+0x5c>
   23570:	ldr	r2, [pc, #84]	; 235cc <p11_dict_str_hash@@Base+0x60>
   23574:	add	r3, pc, r3
   23578:	push	{r4, r5, lr}
   2357c:	sub	sp, sp, #12
   23580:	ldr	r4, [r3, r2]
   23584:	mov	r5, r0
   23588:	ldr	r3, [r4]
   2358c:	str	r3, [sp, #4]
   23590:	bl	12540 <strlen@plt>
   23594:	mov	r3, #0
   23598:	mov	r1, r5
   2359c:	mov	r2, r0
   235a0:	mov	r0, sp
   235a4:	bl	23808 <p11_dict_direct_equal@@Base+0x10>
   235a8:	ldr	r2, [sp, #4]
   235ac:	ldr	r3, [r4]
   235b0:	ldr	r0, [sp]
   235b4:	cmp	r2, r3
   235b8:	bne	235c4 <p11_dict_str_hash@@Base+0x58>
   235bc:	add	sp, sp, #12
   235c0:	pop	{r4, r5, pc}
   235c4:	bl	12360 <__stack_chk_fail@plt>
   235c8:	andeq	r0, r2, r4, lsl #21
   235cc:	andeq	r0, r0, r4, lsr #4

000235d0 <p11_dict_str_equal@@Base>:
   235d0:	cmp	r0, #0
   235d4:	push	{r3, lr}
   235d8:	beq	235f4 <p11_dict_str_equal@@Base+0x24>
   235dc:	cmp	r1, #0
   235e0:	beq	23618 <p11_dict_str_equal@@Base+0x48>
   235e4:	bl	1227c <strcmp@plt>
   235e8:	rsbs	r0, r0, #1
   235ec:	movcc	r0, #0
   235f0:	pop	{r3, pc}
   235f4:	ldr	r3, [pc, #64]	; 2363c <p11_dict_str_equal@@Base+0x6c>
   235f8:	mov	r2, #340	; 0x154
   235fc:	ldr	r0, [pc, #60]	; 23640 <p11_dict_str_equal@@Base+0x70>
   23600:	ldr	r1, [pc, #60]	; 23644 <p11_dict_str_equal@@Base+0x74>
   23604:	add	r3, pc, r3
   23608:	add	r0, pc, r0
   2360c:	add	r3, r3, #32
   23610:	add	r1, pc, r1
   23614:	bl	12828 <__assert_fail@plt>
   23618:	ldr	r3, [pc, #40]	; 23648 <p11_dict_str_equal@@Base+0x78>
   2361c:	movw	r2, #341	; 0x155
   23620:	ldr	r0, [pc, #36]	; 2364c <p11_dict_str_equal@@Base+0x7c>
   23624:	ldr	r1, [pc, #36]	; 23650 <p11_dict_str_equal@@Base+0x80>
   23628:	add	r3, pc, r3
   2362c:	add	r0, pc, r0
   23630:	add	r3, r3, #32
   23634:	add	r1, pc, r1
   23638:	bl	12828 <__assert_fail@plt>
   2363c:	andeq	sl, r0, r4, lsr r8
   23640:	andeq	sl, r0, ip, ror #17
   23644:	andeq	sl, r0, r8, asr #17
   23648:	andeq	sl, r0, r0, lsl r8
   2364c:	ldrdeq	sl, [r0], -r4
   23650:	andeq	sl, r0, r4, lsr #17
   23654:	cmp	r0, #0
   23658:	push	{r3, lr}
   2365c:	beq	23668 <p11_dict_str_equal@@Base+0x98>
   23660:	ldr	r0, [r0]
   23664:	pop	{r3, pc}
   23668:	ldr	r3, [pc, #28]	; 2368c <p11_dict_str_equal@@Base+0xbc>
   2366c:	movw	r2, #349	; 0x15d
   23670:	ldr	r0, [pc, #24]	; 23690 <p11_dict_str_equal@@Base+0xc0>
   23674:	ldr	r1, [pc, #24]	; 23694 <p11_dict_str_equal@@Base+0xc4>
   23678:	add	r3, pc, r3
   2367c:	add	r0, pc, r0
   23680:	add	r3, r3, #52	; 0x34
   23684:	add	r1, pc, r1
   23688:	bl	12828 <__assert_fail@plt>
   2368c:	andeq	sl, r0, r0, asr #15
   23690:	muleq	r0, r0, r8
   23694:	andeq	sl, r0, r4, asr r8
   23698:	cmp	r0, #0
   2369c:	push	{r3, lr}
   236a0:	beq	236c4 <p11_dict_str_equal@@Base+0xf4>
   236a4:	cmp	r1, #0
   236a8:	beq	236e8 <p11_dict_str_equal@@Base+0x118>
   236ac:	ldr	r0, [r0]
   236b0:	ldr	r3, [r1]
   236b4:	subs	r3, r0, r3
   236b8:	rsbs	r0, r3, #0
   236bc:	adcs	r0, r0, r3
   236c0:	pop	{r3, pc}
   236c4:	ldr	r3, [pc, #64]	; 2370c <p11_dict_str_equal@@Base+0x13c>
   236c8:	movw	r2, #357	; 0x165
   236cc:	ldr	r0, [pc, #60]	; 23710 <p11_dict_str_equal@@Base+0x140>
   236d0:	ldr	r1, [pc, #60]	; 23714 <p11_dict_str_equal@@Base+0x144>
   236d4:	add	r3, pc, r3
   236d8:	add	r0, pc, r0
   236dc:	add	r3, r3, #76	; 0x4c
   236e0:	add	r1, pc, r1
   236e4:	bl	12828 <__assert_fail@plt>
   236e8:	ldr	r3, [pc, #40]	; 23718 <p11_dict_str_equal@@Base+0x148>
   236ec:	movw	r2, #358	; 0x166
   236f0:	ldr	r0, [pc, #36]	; 2371c <p11_dict_str_equal@@Base+0x14c>
   236f4:	ldr	r1, [pc, #36]	; 23720 <p11_dict_str_equal@@Base+0x150>
   236f8:	add	r3, pc, r3
   236fc:	add	r0, pc, r0
   23700:	add	r3, r3, #76	; 0x4c
   23704:	add	r1, pc, r1
   23708:	bl	12828 <__assert_fail@plt>
   2370c:	andeq	sl, r0, r4, ror #14
   23710:	andeq	sl, r0, r0, asr #16
   23714:	strdeq	sl, [r0], -r8
   23718:	andeq	sl, r0, r0, asr #14
   2371c:	andeq	sl, r0, r8, lsr #16
   23720:	ldrdeq	sl, [r0], -r4
   23724:	cmp	r0, #0
   23728:	push	{r3, lr}
   2372c:	beq	23738 <p11_dict_str_equal@@Base+0x168>
   23730:	ldr	r0, [r0]
   23734:	pop	{r3, pc}
   23738:	ldr	r3, [pc, #28]	; 2375c <p11_dict_str_equal@@Base+0x18c>
   2373c:	movw	r2, #365	; 0x16d
   23740:	ldr	r0, [pc, #24]	; 23760 <p11_dict_str_equal@@Base+0x190>
   23744:	ldr	r1, [pc, #24]	; 23764 <p11_dict_str_equal@@Base+0x194>
   23748:	add	r3, pc, r3
   2374c:	add	r0, pc, r0
   23750:	add	r3, r3, #100	; 0x64
   23754:	add	r1, pc, r1
   23758:	bl	12828 <__assert_fail@plt>
   2375c:	strdeq	sl, [r0], -r0
   23760:	andeq	sl, r0, r4, ror #15
   23764:	andeq	sl, r0, r4, lsl #15
   23768:	cmp	r0, #0
   2376c:	push	{r3, lr}
   23770:	beq	23794 <p11_dict_str_equal@@Base+0x1c4>
   23774:	cmp	r1, #0
   23778:	beq	237b8 <p11_dict_str_equal@@Base+0x1e8>
   2377c:	ldr	r0, [r0]
   23780:	ldr	r3, [r1]
   23784:	subs	r3, r0, r3
   23788:	rsbs	r0, r3, #0
   2378c:	adcs	r0, r0, r3
   23790:	pop	{r3, pc}
   23794:	ldr	r3, [pc, #64]	; 237dc <p11_dict_str_equal@@Base+0x20c>
   23798:	movw	r2, #373	; 0x175
   2379c:	ldr	r0, [pc, #60]	; 237e0 <p11_dict_str_equal@@Base+0x210>
   237a0:	ldr	r1, [pc, #60]	; 237e4 <p11_dict_str_equal@@Base+0x214>
   237a4:	add	r3, pc, r3
   237a8:	add	r0, pc, r0
   237ac:	add	r3, r3, #124	; 0x7c
   237b0:	add	r1, pc, r1
   237b4:	bl	12828 <__assert_fail@plt>
   237b8:	ldr	r3, [pc, #40]	; 237e8 <p11_dict_str_equal@@Base+0x218>
   237bc:	movw	r2, #374	; 0x176
   237c0:	ldr	r0, [pc, #36]	; 237ec <p11_dict_str_equal@@Base+0x21c>
   237c4:	ldr	r1, [pc, #36]	; 237f0 <p11_dict_str_equal@@Base+0x220>
   237c8:	add	r3, pc, r3
   237cc:	add	r0, pc, r0
   237d0:	add	r3, r3, #124	; 0x7c
   237d4:	add	r1, pc, r1
   237d8:	bl	12828 <__assert_fail@plt>
   237dc:	muleq	r0, r4, r6
   237e0:	muleq	r0, r0, r7
   237e4:	andeq	sl, r0, r8, lsr #14
   237e8:	andeq	sl, r0, r0, ror r6
   237ec:	andeq	sl, r0, r4, ror r7
   237f0:	andeq	sl, r0, r4, lsl #14

000237f4 <p11_dict_direct_hash@@Base>:
   237f4:	bx	lr

000237f8 <p11_dict_direct_equal@@Base>:
   237f8:	subs	r3, r1, r0
   237fc:	rsbs	r0, r3, #0
   23800:	adcs	r0, r0, r3
   23804:	bx	lr
   23808:	push	{r2, r3}
   2380c:	mov	r3, #42	; 0x2a
   23810:	ldr	r2, [pc, #476]	; 239f4 <p11_dict_direct_equal@@Base+0x1fc>
   23814:	ldr	ip, [pc, #476]	; 239f8 <p11_dict_direct_equal@@Base+0x200>
   23818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2381c:	add	r2, pc, r2
   23820:	sub	sp, sp, #44	; 0x2c
   23824:	movw	lr, #11601	; 0x2d51
   23828:	movt	lr, #52382	; 0xcc9e
   2382c:	mov	r9, r3
   23830:	str	lr, [sp]
   23834:	add	r8, sp, #32
   23838:	ldr	ip, [r2, ip]
   2383c:	movw	lr, #13715	; 0x3593
   23840:	ldr	r4, [sp, #80]	; 0x50
   23844:	movt	lr, #7047	; 0x1b87
   23848:	str	r3, [sp, #24]
   2384c:	add	r2, sp, #84	; 0x54
   23850:	ldr	r3, [ip]
   23854:	cmp	r4, #3
   23858:	str	ip, [sp, #8]
   2385c:	str	lr, [sp, #4]
   23860:	str	r0, [sp, #12]
   23864:	str	r2, [sp, #20]
   23868:	str	r3, [sp, #36]	; 0x24
   2386c:	bhi	23924 <p11_dict_direct_equal@@Base+0x12c>
   23870:	mov	r3, #4
   23874:	mov	r0, r8
   23878:	mov	r2, r4
   2387c:	bl	123e4 <__memcpy_chk@plt>
   23880:	ldr	r3, [sp, #20]
   23884:	add	r5, r3, #8
   23888:	mov	fp, r3
   2388c:	ldr	r6, [r5, #-8]
   23890:	sub	r3, r5, #4
   23894:	str	r3, [sp, #20]
   23898:	cmp	r6, #0
   2389c:	beq	23938 <p11_dict_direct_equal@@Base+0x140>
   238a0:	ldr	sl, [fp, #4]
   238a4:	rsb	r7, r4, #4
   238a8:	add	r0, r8, r4
   238ac:	mov	r1, r6
   238b0:	cmp	sl, r7
   238b4:	movcc	r7, sl
   238b8:	str	r5, [sp, #20]
   238bc:	add	r4, r4, r7
   238c0:	add	r5, r5, #8
   238c4:	mov	r2, r7
   238c8:	add	fp, fp, #8
   238cc:	bl	122e8 <memcpy@plt>
   238d0:	cmp	r4, #3
   238d4:	bls	2388c <p11_dict_direct_equal@@Base+0x94>
   238d8:	ldr	r2, [sp, #32]
   238dc:	add	r1, r6, r7
   238e0:	rsb	r4, r7, sl
   238e4:	ldr	ip, [sp]
   238e8:	movw	r3, #27492	; 0x6b64
   238ec:	movt	r3, #58964	; 0xe654
   238f0:	cmp	r4, #3
   238f4:	mul	r2, ip, r2
   238f8:	ldr	ip, [sp, #4]
   238fc:	ror	r2, r2, #17
   23900:	mul	r2, ip, r2
   23904:	eor	r9, r2, r9
   23908:	ror	r9, r9, #19
   2390c:	str	r2, [sp, #28]
   23910:	add	r9, r9, r9, lsl #2
   23914:	add	r3, r9, r3
   23918:	str	r3, [sp, #24]
   2391c:	mov	r9, r3
   23920:	bls	23870 <p11_dict_direct_equal@@Base+0x78>
   23924:	ldr	r0, [r1], #4
   23928:	sub	r4, r4, #4
   2392c:	str	r0, [sp, #28]
   23930:	ldr	r2, [sp, #28]
   23934:	b	238e4 <p11_dict_direct_equal@@Base+0xec>
   23938:	cmp	r4, #2
   2393c:	str	r6, [sp, #28]
   23940:	beq	239bc <p11_dict_direct_equal@@Base+0x1c4>
   23944:	cmp	r4, #3
   23948:	beq	239b4 <p11_dict_direct_equal@@Base+0x1bc>
   2394c:	cmp	r4, #1
   23950:	beq	239c4 <p11_dict_direct_equal@@Base+0x1cc>
   23954:	eor	r4, r9, r4
   23958:	movw	r0, #51819	; 0xca6b
   2395c:	movt	r0, #34283	; 0x85eb
   23960:	movw	r1, #44597	; 0xae35
   23964:	eor	r4, r4, r4, lsr #16
   23968:	movt	r1, #49842	; 0xc2b2
   2396c:	add	r3, sp, #40	; 0x28
   23970:	ldr	ip, [sp, #36]	; 0x24
   23974:	mul	r2, r0, r4
   23978:	eor	r2, r2, r2, lsr #13
   2397c:	mul	r2, r1, r2
   23980:	eor	r2, r2, r2, lsr #16
   23984:	str	r2, [r3, #-16]!
   23988:	ldr	r2, [sp, #12]
   2398c:	ldr	r0, [r3]
   23990:	str	r0, [r2]
   23994:	ldr	r0, [sp, #8]
   23998:	ldr	r3, [r0]
   2399c:	cmp	ip, r3
   239a0:	bne	239f0 <p11_dict_direct_equal@@Base+0x1f8>
   239a4:	add	sp, sp, #44	; 0x2c
   239a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239ac:	add	sp, sp, #8
   239b0:	bx	lr
   239b4:	ldrb	r6, [sp, #34]	; 0x22
   239b8:	lsl	r6, r6, #16
   239bc:	ldrb	r3, [sp, #33]	; 0x21
   239c0:	eor	r6, r6, r3, lsl #8
   239c4:	ldrb	r1, [sp, #32]
   239c8:	movw	r2, #11601	; 0x2d51
   239cc:	movt	r2, #52382	; 0xcc9e
   239d0:	movw	r3, #13715	; 0x3593
   239d4:	eor	r6, r6, r1
   239d8:	movt	r3, #7047	; 0x1b87
   239dc:	mul	r2, r2, r6
   239e0:	ror	r2, r2, #17
   239e4:	mul	r3, r3, r2
   239e8:	eor	r9, r3, r9
   239ec:	b	23954 <p11_dict_direct_equal@@Base+0x15c>
   239f0:	bl	12360 <__stack_chk_fail@plt>
   239f4:	ldrdeq	r0, [r2], -ip
   239f8:	andeq	r0, r0, r4, lsr #4
   239fc:	push	{r4, lr}
   23a00:	mov	r4, r0
   23a04:	ldr	r3, [r0, #16]
   23a08:	cmp	r3, #1
   23a0c:	beq	23a58 <p11_dict_direct_equal@@Base+0x260>
   23a10:	cmp	r3, #2
   23a14:	bne	23a28 <p11_dict_direct_equal@@Base+0x230>
   23a18:	ldr	r0, [r0, #20]
   23a1c:	bl	122c4 <free@plt>
   23a20:	ldr	r0, [r4, #24]
   23a24:	bl	122c4 <free@plt>
   23a28:	mov	r3, #0
   23a2c:	strb	r3, [r4, #20]
   23a30:	strb	r3, [r4, #21]
   23a34:	strb	r3, [r4, #22]
   23a38:	strb	r3, [r4, #23]
   23a3c:	strb	r3, [r4, #24]
   23a40:	strb	r3, [r4, #25]
   23a44:	strb	r3, [r4, #26]
   23a48:	strb	r3, [r4, #27]
   23a4c:	str	r3, [r4, #16]
   23a50:	str	r3, [r4, #12]
   23a54:	pop	{r4, pc}
   23a58:	ldr	r0, [r0, #20]
   23a5c:	bl	122c4 <free@plt>
   23a60:	b	23a28 <p11_dict_direct_equal@@Base+0x230>
   23a64:	push	{r3, r4, r5, r6, r7, lr}
   23a68:	subs	r4, r0, #0
   23a6c:	mov	r5, r1
   23a70:	mov	r6, r2
   23a74:	mov	r7, r3
   23a78:	beq	23ac8 <p11_dict_direct_equal@@Base+0x2d0>
   23a7c:	mov	r1, #0
   23a80:	mov	r2, #28
   23a84:	bl	125e8 <memset@plt>
   23a88:	cmp	r5, #0
   23a8c:	stmib	r4, {r6, r7}
   23a90:	beq	23ae8 <p11_dict_direct_equal@@Base+0x2f0>
   23a94:	mov	r0, r5
   23a98:	bl	125c4 <__strdup@plt>
   23a9c:	cmp	r0, #0
   23aa0:	str	r0, [r4]
   23aa4:	popne	{r3, r4, r5, r6, r7, pc}
   23aa8:	ldr	r0, [pc, #88]	; 23b08 <p11_dict_direct_equal@@Base+0x310>
   23aac:	ldr	r1, [pc, #88]	; 23b0c <p11_dict_direct_equal@@Base+0x314>
   23ab0:	ldr	r2, [pc, #88]	; 23b10 <p11_dict_direct_equal@@Base+0x318>
   23ab4:	add	r0, pc, r0
   23ab8:	add	r1, pc, r1
   23abc:	add	r2, pc, r2
   23ac0:	pop	{r3, r4, r5, r6, r7, lr}
   23ac4:	b	22e10 <secure_getenv@@Base+0x7bc>
   23ac8:	ldr	r0, [pc, #68]	; 23b14 <p11_dict_direct_equal@@Base+0x31c>
   23acc:	ldr	r1, [pc, #68]	; 23b18 <p11_dict_direct_equal@@Base+0x320>
   23ad0:	ldr	r2, [pc, #68]	; 23b1c <p11_dict_direct_equal@@Base+0x324>
   23ad4:	add	r0, pc, r0
   23ad8:	add	r1, pc, r1
   23adc:	add	r2, pc, r2
   23ae0:	pop	{r3, r4, r5, r6, r7, lr}
   23ae4:	b	22e10 <secure_getenv@@Base+0x7bc>
   23ae8:	ldr	r0, [pc, #48]	; 23b20 <p11_dict_direct_equal@@Base+0x328>
   23aec:	ldr	r1, [pc, #48]	; 23b24 <p11_dict_direct_equal@@Base+0x32c>
   23af0:	ldr	r2, [pc, #48]	; 23b28 <p11_dict_direct_equal@@Base+0x330>
   23af4:	add	r0, pc, r0
   23af8:	add	r1, pc, r1
   23afc:	add	r2, pc, r2
   23b00:	pop	{r3, r4, r5, r6, r7, lr}
   23b04:	b	22e10 <secure_getenv@@Base+0x7bc>
   23b08:	strdeq	r2, [r0], -r0
   23b0c:	strdeq	sl, [r0], -r0
   23b10:	andeq	sl, r0, ip, lsl #9
   23b14:	ldrdeq	r2, [r0], -r0
   23b18:	andeq	sl, r0, r0, asr #9
   23b1c:	andeq	sl, r0, ip, ror #8
   23b20:			; <UNDEFINED> instruction: 0x000022b0
   23b24:	andeq	r2, r0, ip, lsl #22
   23b28:	andeq	sl, r0, ip, asr #8
   23b2c:	push	{r4, lr}
   23b30:	subs	r4, r0, #0
   23b34:	beq	23b58 <p11_dict_direct_equal@@Base+0x360>
   23b38:	bl	239fc <p11_dict_direct_equal@@Base+0x204>
   23b3c:	ldr	r0, [r4]
   23b40:	bl	122c4 <free@plt>
   23b44:	mov	r0, r4
   23b48:	mov	r1, #0
   23b4c:	mov	r2, #28
   23b50:	pop	{r4, lr}
   23b54:	b	125e8 <memset@plt>
   23b58:	ldr	r2, [pc, #28]	; 23b7c <p11_dict_direct_equal@@Base+0x384>
   23b5c:	ldr	r0, [pc, #28]	; 23b80 <p11_dict_direct_equal@@Base+0x388>
   23b60:	ldr	r1, [pc, #28]	; 23b84 <p11_dict_direct_equal@@Base+0x38c>
   23b64:	add	r2, pc, r2
   23b68:	add	r0, pc, r0
   23b6c:	add	r2, r2, #16
   23b70:	add	r1, pc, r1
   23b74:	pop	{r4, lr}
   23b78:	b	22e10 <secure_getenv@@Base+0x7bc>
   23b7c:	andeq	sl, r0, r4, ror #7
   23b80:	andeq	r2, r0, ip, lsr r2
   23b84:	andeq	sl, r0, r8, lsr #8
   23b88:	push	{r4, lr}
   23b8c:	subs	r4, r0, #0
   23b90:	beq	23c2c <p11_dict_direct_equal@@Base+0x434>
   23b94:	ldr	r0, [r4, #12]
   23b98:	cmp	r0, #0
   23b9c:	popne	{r4, pc}
   23ba0:	ldr	r0, [r4, #16]
   23ba4:	cmp	r0, #2
   23ba8:	beq	23bdc <p11_dict_direct_equal@@Base+0x3e4>
   23bac:	cmp	r0, #3
   23bb0:	beq	23c14 <p11_dict_direct_equal@@Base+0x41c>
   23bb4:	cmp	r0, #1
   23bb8:	beq	23bf8 <p11_dict_direct_equal@@Base+0x400>
   23bbc:	ldr	r0, [pc, #140]	; 23c50 <p11_dict_direct_equal@@Base+0x458>
   23bc0:	mov	r2, r1
   23bc4:	ldr	r1, [r4]
   23bc8:	add	r0, pc, r0
   23bcc:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   23bd0:	mov	r3, #1
   23bd4:	str	r3, [r4, #12]
   23bd8:	pop	{r4, pc}
   23bdc:	ldr	r0, [pc, #112]	; 23c54 <p11_dict_direct_equal@@Base+0x45c>
   23be0:	mov	r3, r1
   23be4:	ldr	r2, [r4, #20]
   23be8:	add	r0, pc, r0
   23bec:	ldr	r1, [r4]
   23bf0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   23bf4:	b	23bd0 <p11_dict_direct_equal@@Base+0x3d8>
   23bf8:	ldr	r0, [pc, #88]	; 23c58 <p11_dict_direct_equal@@Base+0x460>
   23bfc:	mov	r3, r1
   23c00:	ldr	r2, [r4, #20]
   23c04:	add	r0, pc, r0
   23c08:	ldr	r1, [r4]
   23c0c:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   23c10:	b	23bd0 <p11_dict_direct_equal@@Base+0x3d8>
   23c14:	ldr	r0, [pc, #64]	; 23c5c <p11_dict_direct_equal@@Base+0x464>
   23c18:	mov	r2, r1
   23c1c:	ldr	r1, [r4]
   23c20:	add	r0, pc, r0
   23c24:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   23c28:	b	23bd0 <p11_dict_direct_equal@@Base+0x3d8>
   23c2c:	ldr	r2, [pc, #44]	; 23c60 <p11_dict_direct_equal@@Base+0x468>
   23c30:	ldr	r0, [pc, #44]	; 23c64 <p11_dict_direct_equal@@Base+0x46c>
   23c34:	ldr	r1, [pc, #44]	; 23c68 <p11_dict_direct_equal@@Base+0x470>
   23c38:	add	r2, pc, r2
   23c3c:	add	r0, pc, r0
   23c40:	add	r2, r2, #32
   23c44:	add	r1, pc, r1
   23c48:	pop	{r4, lr}
   23c4c:	b	22e10 <secure_getenv@@Base+0x7bc>
   23c50:	strdeq	sl, [r0], -ip
   23c54:	ldrdeq	sl, [r0], -r8
   23c58:	andeq	sl, r0, r8, asr #7
   23c5c:			; <UNDEFINED> instruction: 0x0000a3bc
   23c60:	andeq	sl, r0, r0, lsl r3
   23c64:	andeq	r2, r0, r8, ror #2
   23c68:	andeq	sl, r0, r4, asr r3
   23c6c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   23c70:	subs	r7, r0, #0
   23c74:	mov	r8, r1
   23c78:	beq	23ef4 <p11_dict_direct_equal@@Base+0x6fc>
   23c7c:	bl	239fc <p11_dict_direct_equal@@Base+0x204>
   23c80:	ldr	r9, [pc, #948]	; 2403c <p11_dict_direct_equal@@Base+0x844>
   23c84:	cmp	r8, #0
   23c88:	add	r9, pc, r9
   23c8c:	movne	r3, #0
   23c90:	strbne	r3, [r8]
   23c94:	ldr	r6, [r7, #8]
   23c98:	cmp	r6, #0
   23c9c:	beq	23e9c <p11_dict_direct_equal@@Base+0x6a4>
   23ca0:	ble	24018 <p11_dict_direct_equal@@Base+0x820>
   23ca4:	ldr	r5, [r7, #4]
   23ca8:	mov	r1, r9
   23cac:	mov	r2, #11
   23cb0:	mov	r0, r5
   23cb4:	bl	127bc <strncmp@plt>
   23cb8:	cmp	r0, #0
   23cbc:	mov	r0, r5
   23cc0:	beq	23f3c <p11_dict_direct_equal@@Base+0x744>
   23cc4:	mov	r1, #10
   23cc8:	mov	r2, r6
   23ccc:	bl	12684 <memchr@plt>
   23cd0:	subs	r4, r0, #0
   23cd4:	beq	23e6c <p11_dict_direct_equal@@Base+0x674>
   23cd8:	rsb	r3, r5, r4
   23cdc:	cmp	r6, r3
   23ce0:	ble	23ff4 <p11_dict_direct_equal@@Base+0x7fc>
   23ce4:	mvn	r3, r3
   23ce8:	add	r2, r4, #1
   23cec:	add	r6, r6, r3
   23cf0:	stmib	r7, {r2, r6}
   23cf4:	cmp	r5, r4
   23cf8:	beq	23c94 <p11_dict_direct_equal@@Base+0x49c>
   23cfc:	bl	124ec <__ctype_b_loc@plt>
   23d00:	mov	r3, r5
   23d04:	ldr	r6, [r0]
   23d08:	b	23d14 <p11_dict_direct_equal@@Base+0x51c>
   23d0c:	cmp	r4, r3
   23d10:	beq	23c94 <p11_dict_direct_equal@@Base+0x49c>
   23d14:	mov	r5, r3
   23d18:	add	r3, r3, #1
   23d1c:	ldrb	r2, [r5]
   23d20:	lsl	r1, r2, #1
   23d24:	ldrh	r1, [r6, r1]
   23d28:	tst	r1, #8192	; 0x2000
   23d2c:	bne	23d0c <p11_dict_direct_equal@@Base+0x514>
   23d30:	b	23d38 <p11_dict_direct_equal@@Base+0x540>
   23d34:	sub	r4, r4, #1
   23d38:	cmp	r4, r5
   23d3c:	beq	23c94 <p11_dict_direct_equal@@Base+0x49c>
   23d40:	ldrb	r3, [r4, #-1]
   23d44:	lsl	r1, r3, #1
   23d48:	ldrh	r1, [r6, r1]
   23d4c:	tst	r1, #8192	; 0x2000
   23d50:	bne	23d34 <p11_dict_direct_equal@@Base+0x53c>
   23d54:	cmp	r2, #35	; 0x23
   23d58:	beq	23c94 <p11_dict_direct_equal@@Base+0x49c>
   23d5c:	cmp	r2, #91	; 0x5b
   23d60:	beq	23e24 <p11_dict_direct_equal@@Base+0x62c>
   23d64:	rsb	r9, r5, r4
   23d68:	mov	r1, #58	; 0x3a
   23d6c:	mov	r0, r5
   23d70:	mov	r2, r9
   23d74:	bl	12684 <memchr@plt>
   23d78:	subs	r1, r0, #0
   23d7c:	beq	23f1c <p11_dict_direct_equal@@Base+0x724>
   23d80:	add	r8, r1, #1
   23d84:	cmp	r8, r4
   23d88:	movne	r3, r8
   23d8c:	bne	23da0 <p11_dict_direct_equal@@Base+0x5a8>
   23d90:	b	23dd8 <p11_dict_direct_equal@@Base+0x5e0>
   23d94:	cmp	r3, r4
   23d98:	mov	r8, r3
   23d9c:	beq	23dd8 <p11_dict_direct_equal@@Base+0x5e0>
   23da0:	mov	r8, r3
   23da4:	ldrb	r2, [r3], #1
   23da8:	lsl	r2, r2, #1
   23dac:	ldrh	r2, [r6, r2]
   23db0:	tst	r2, #8192	; 0x2000
   23db4:	bne	23d94 <p11_dict_direct_equal@@Base+0x59c>
   23db8:	cmp	r1, r5
   23dbc:	beq	23de0 <p11_dict_direct_equal@@Base+0x5e8>
   23dc0:	ldrb	r3, [r1, #-1]
   23dc4:	lsl	r3, r3, #1
   23dc8:	ldrh	r3, [r6, r3]
   23dcc:	tst	r3, #8192	; 0x2000
   23dd0:	beq	23de0 <p11_dict_direct_equal@@Base+0x5e8>
   23dd4:	sub	r1, r1, #1
   23dd8:	cmp	r1, r5
   23ddc:	bne	23dc0 <p11_dict_direct_equal@@Base+0x5c8>
   23de0:	mov	r3, #2
   23de4:	rsb	r1, r5, r1
   23de8:	mov	r0, r5
   23dec:	str	r3, [r7, #16]
   23df0:	bl	224d4 <strndup@@Base>
   23df4:	rsb	r1, r8, r4
   23df8:	mov	r5, r0
   23dfc:	mov	r0, r8
   23e00:	str	r5, [r7, #20]
   23e04:	bl	224d4 <strndup@@Base>
   23e08:	cmp	r5, #0
   23e0c:	str	r0, [r7, #24]
   23e10:	beq	23e7c <p11_dict_direct_equal@@Base+0x684>
   23e14:	cmp	r0, #0
   23e18:	beq	23e7c <p11_dict_direct_equal@@Base+0x684>
   23e1c:	mov	r0, #1
   23e20:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   23e24:	cmp	r3, #93	; 0x5d
   23e28:	beq	23ea4 <p11_dict_direct_equal@@Base+0x6ac>
   23e2c:	rsb	r1, r5, r4
   23e30:	mov	r0, r5
   23e34:	bl	224d4 <strndup@@Base>
   23e38:	ldr	r1, [pc, #512]	; 24040 <p11_dict_direct_equal@@Base+0x848>
   23e3c:	add	r1, pc, r1
   23e40:	mov	r4, r0
   23e44:	mov	r0, r7
   23e48:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   23e4c:	mov	r0, r4
   23e50:	bl	122c4 <free@plt>
   23e54:	cmp	r8, #0
   23e58:	beq	23e9c <p11_dict_direct_equal@@Base+0x6a4>
   23e5c:	mov	r3, #1
   23e60:	mov	r0, #0
   23e64:	strb	r3, [r8]
   23e68:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   23e6c:	add	r4, r5, r6
   23e70:	str	r0, [r7, #8]
   23e74:	str	r4, [r7, #4]
   23e78:	b	23cf4 <p11_dict_direct_equal@@Base+0x4fc>
   23e7c:	ldr	r2, [pc, #448]	; 24044 <p11_dict_direct_equal@@Base+0x84c>
   23e80:	ldr	r0, [pc, #448]	; 24048 <p11_dict_direct_equal@@Base+0x850>
   23e84:	ldr	r1, [pc, #448]	; 2404c <p11_dict_direct_equal@@Base+0x854>
   23e88:	add	r2, pc, r2
   23e8c:	add	r0, pc, r0
   23e90:	add	r2, r2, #48	; 0x30
   23e94:	add	r1, pc, r1
   23e98:	bl	22e10 <secure_getenv@@Base+0x7bc>
   23e9c:	mov	r0, #0
   23ea0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   23ea4:	rsb	r1, r5, r4
   23ea8:	mov	r3, #1
   23eac:	add	r0, r5, #1
   23eb0:	sub	r1, r1, #2
   23eb4:	str	r3, [r7, #16]
   23eb8:	bl	224d4 <strndup@@Base>
   23ebc:	cmp	r0, #0
   23ec0:	mov	r4, r0
   23ec4:	str	r0, [r7, #20]
   23ec8:	bne	23e1c <p11_dict_direct_equal@@Base+0x624>
   23ecc:	ldr	r2, [pc, #380]	; 24050 <p11_dict_direct_equal@@Base+0x858>
   23ed0:	ldr	r0, [pc, #380]	; 24054 <p11_dict_direct_equal@@Base+0x85c>
   23ed4:	ldr	r1, [pc, #380]	; 24058 <p11_dict_direct_equal@@Base+0x860>
   23ed8:	add	r2, pc, r2
   23edc:	add	r0, pc, r0
   23ee0:	add	r2, r2, #48	; 0x30
   23ee4:	add	r1, pc, r1
   23ee8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   23eec:	mov	r0, r4
   23ef0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   23ef4:	ldr	r2, [pc, #352]	; 2405c <p11_dict_direct_equal@@Base+0x864>
   23ef8:	ldr	r0, [pc, #352]	; 24060 <p11_dict_direct_equal@@Base+0x868>
   23efc:	ldr	r1, [pc, #352]	; 24064 <p11_dict_direct_equal@@Base+0x86c>
   23f00:	add	r2, pc, r2
   23f04:	add	r0, pc, r0
   23f08:	add	r2, r2, #48	; 0x30
   23f0c:	add	r1, pc, r1
   23f10:	bl	22e10 <secure_getenv@@Base+0x7bc>
   23f14:	mov	r0, r7
   23f18:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   23f1c:	mov	r1, r9
   23f20:	mov	r0, r5
   23f24:	bl	224d4 <strndup@@Base>
   23f28:	ldr	r1, [pc, #312]	; 24068 <p11_dict_direct_equal@@Base+0x870>
   23f2c:	add	r1, pc, r1
   23f30:	mov	r4, r0
   23f34:	mov	r0, r7
   23f38:	b	23e48 <p11_dict_direct_equal@@Base+0x650>
   23f3c:	ldr	r1, [pc, #296]	; 2406c <p11_dict_direct_equal@@Base+0x874>
   23f40:	mov	r2, r6
   23f44:	add	r1, pc, r1
   23f48:	bl	22400 <__assert_fail@plt+0xfbd8>
   23f4c:	subs	r3, r0, #0
   23f50:	beq	23fb4 <p11_dict_direct_equal@@Base+0x7bc>
   23f54:	ldr	r4, [r7, #4]
   23f58:	add	r0, r3, #1
   23f5c:	ldr	r5, [r7, #8]
   23f60:	mov	r1, #10
   23f64:	rsb	r3, r3, r4
   23f68:	add	r2, r5, r3
   23f6c:	sub	r2, r2, #1
   23f70:	bl	12684 <memchr@plt>
   23f74:	str	r4, [r7, #20]
   23f78:	cmp	r0, #0
   23f7c:	addne	r3, r0, #1
   23f80:	addeq	r3, r4, r5
   23f84:	rsb	r2, r4, r3
   23f88:	str	r2, [r7, #24]
   23f8c:	cmp	r5, r2
   23f90:	mov	r2, #3
   23f94:	str	r2, [r7, #16]
   23f98:	blt	23fd0 <p11_dict_direct_equal@@Base+0x7d8>
   23f9c:	rsb	r4, r3, r4
   23fa0:	str	r3, [r7, #4]
   23fa4:	add	r5, r5, r4
   23fa8:	mov	r0, #1
   23fac:	str	r5, [r7, #8]
   23fb0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   23fb4:	ldr	r1, [pc, #180]	; 24070 <p11_dict_direct_equal@@Base+0x878>
   23fb8:	mov	r0, r7
   23fbc:	add	r1, pc, r1
   23fc0:	bl	23b88 <p11_dict_direct_equal@@Base+0x390>
   23fc4:	cmp	r8, #0
   23fc8:	bne	23e5c <p11_dict_direct_equal@@Base+0x664>
   23fcc:	b	23e9c <p11_dict_direct_equal@@Base+0x6a4>
   23fd0:	ldr	r3, [pc, #156]	; 24074 <p11_dict_direct_equal@@Base+0x87c>
   23fd4:	mov	r2, #124	; 0x7c
   23fd8:	ldr	r0, [pc, #152]	; 24078 <p11_dict_direct_equal@@Base+0x880>
   23fdc:	ldr	r1, [pc, #152]	; 2407c <p11_dict_direct_equal@@Base+0x884>
   23fe0:	add	r3, pc, r3
   23fe4:	add	r0, pc, r0
   23fe8:	add	r3, r3, #64	; 0x40
   23fec:	add	r1, pc, r1
   23ff0:	bl	12828 <__assert_fail@plt>
   23ff4:	ldr	r3, [pc, #132]	; 24080 <p11_dict_direct_equal@@Base+0x888>
   23ff8:	mov	r2, #143	; 0x8f
   23ffc:	ldr	r0, [pc, #128]	; 24084 <p11_dict_direct_equal@@Base+0x88c>
   24000:	ldr	r1, [pc, #128]	; 24088 <p11_dict_direct_equal@@Base+0x890>
   24004:	add	r3, pc, r3
   24008:	add	r0, pc, r0
   2400c:	add	r3, r3, #64	; 0x40
   24010:	add	r1, pc, r1
   24014:	bl	12828 <__assert_fail@plt>
   24018:	ldr	r3, [pc, #108]	; 2408c <p11_dict_direct_equal@@Base+0x894>
   2401c:	mov	r2, #110	; 0x6e
   24020:	ldr	r0, [pc, #104]	; 24090 <p11_dict_direct_equal@@Base+0x898>
   24024:	ldr	r1, [pc, #104]	; 24094 <p11_dict_direct_equal@@Base+0x89c>
   24028:	add	r3, pc, r3
   2402c:	add	r0, pc, r0
   24030:	add	r3, r3, #64	; 0x40
   24034:	add	r1, pc, r1
   24038:	bl	12828 <__assert_fail@plt>
   2403c:			; <UNDEFINED> instruction: 0x00005bb4
   24040:	andeq	sl, r0, ip, asr r2
   24044:	andeq	sl, r0, r0, asr #1
   24048:	andeq	r1, r0, r8, lsl pc
   2404c:	andeq	sl, r0, ip, ror #4
   24050:	andeq	sl, r0, r0, ror r0
   24054:	andeq	r1, r0, r8, asr #29
   24058:	ldrdeq	sl, [r0], -ip
   2405c:	andeq	sl, r0, r8, asr #32
   24060:	andeq	r1, r0, r0, lsr #29
   24064:	andeq	sl, r0, ip, lsl #1
   24068:			; <UNDEFINED> instruction: 0x0000a1b4
   2406c:	ldrdeq	sl, [r0], -r4
   24070:	andeq	sl, r0, ip, lsl #1
   24074:	andeq	r9, r0, r8, ror #30
   24078:	andeq	sl, r0, r0, asr #32
   2407c:	andeq	sl, r0, ip, lsl r0
   24080:	andeq	r9, r0, r4, asr #30
   24084:	andeq	sl, r0, r4, rrx
   24088:	strdeq	r9, [r0], -r8
   2408c:	andeq	r9, r0, r0, lsr #30
   24090:	andeq	r9, r0, r4, asr #31
   24094:	ldrdeq	r9, [r0], -r4
   24098:	ldr	r0, [pc, #4]	; 240a4 <p11_dict_direct_equal@@Base+0x8ac>
   2409c:	add	r0, pc, r0
   240a0:	bx	lr
   240a4:	andeq	r0, r2, ip, ror #4
   240a8:	ldr	r3, [pc, #72]	; 240f8 <p11_dict_direct_equal@@Base+0x900>
   240ac:	ldr	r2, [pc, #72]	; 240fc <p11_dict_direct_equal@@Base+0x904>
   240b0:	add	r3, pc, r3
   240b4:	push	{r4, r5, r6, lr}
   240b8:	mov	r4, r1
   240bc:	ldr	r3, [r3, r2]
   240c0:	mov	r5, r0
   240c4:	ldr	r3, [r3]
   240c8:	blx	r3
   240cc:	movw	r3, #511	; 0x1ff
   240d0:	cmp	r4, r3
   240d4:	movcs	r4, r3
   240d8:	subs	r6, r0, #0
   240dc:	popeq	{r4, r5, r6, pc}
   240e0:	mov	r1, r5
   240e4:	mov	r2, r4
   240e8:	bl	122e8 <memcpy@plt>
   240ec:	mov	r3, #0
   240f0:	strb	r3, [r6, r4]
   240f4:	pop	{r4, r5, r6, pc}
   240f8:	andeq	pc, r1, r8, asr #30
   240fc:	andeq	r0, r0, ip, asr r2
   24100:	push	{r0, r1, r2, r3}
   24104:	movw	r1, #511	; 0x1ff
   24108:	push	{r4, r5, r6, r7, lr}
   2410c:	sub	sp, sp, #532	; 0x214
   24110:	ldr	r5, [pc, #208]	; 241e8 <p11_dict_direct_equal@@Base+0x9f0>
   24114:	add	ip, sp, #556	; 0x22c
   24118:	ldr	r3, [pc, #204]	; 241ec <p11_dict_direct_equal@@Base+0x9f4>
   2411c:	add	r4, sp, #12
   24120:	add	r5, pc, r5
   24124:	ldr	lr, [sp, #552]	; 0x228
   24128:	mov	r2, #1
   2412c:	mov	r0, r4
   24130:	ldr	r6, [r5, r3]
   24134:	mov	r3, #512	; 0x200
   24138:	str	lr, [sp]
   2413c:	movw	r7, #511	; 0x1ff
   24140:	str	ip, [sp, #4]
   24144:	ldr	lr, [r6]
   24148:	str	ip, [sp, #8]
   2414c:	str	lr, [sp, #524]	; 0x20c
   24150:	bl	122dc <__vsnprintf_chk@plt>
   24154:	ldr	r2, [pc, #148]	; 241f0 <p11_dict_direct_equal@@Base+0x9f8>
   24158:	add	r1, sp, #528	; 0x210
   2415c:	mov	r3, #0
   24160:	add	r2, pc, r2
   24164:	ldrb	r2, [r2]
   24168:	cmp	r0, r7
   2416c:	movcc	r7, r0
   24170:	cmp	r2, r3
   24174:	add	r2, r1, r7
   24178:	strb	r3, [r2, #-516]	; 0xfffffdfc
   2417c:	bne	241c0 <p11_dict_direct_equal@@Base+0x9c8>
   24180:	ldr	r1, [pc, #108]	; 241f4 <p11_dict_direct_equal@@Base+0x9fc>
   24184:	mov	r0, #2
   24188:	mov	r2, r4
   2418c:	add	r1, pc, r1
   24190:	bl	22d4c <secure_getenv@@Base+0x6f8>
   24194:	mov	r0, r4
   24198:	mov	r1, r7
   2419c:	bl	240a8 <p11_dict_direct_equal@@Base+0x8b0>
   241a0:	ldr	r2, [sp, #524]	; 0x20c
   241a4:	ldr	r3, [r6]
   241a8:	cmp	r2, r3
   241ac:	bne	241e4 <p11_dict_direct_equal@@Base+0x9ec>
   241b0:	add	sp, sp, #532	; 0x214
   241b4:	pop	{r4, r5, r6, r7, lr}
   241b8:	add	sp, sp, #16
   241bc:	bx	lr
   241c0:	ldr	r0, [pc, #48]	; 241f8 <p11_dict_direct_equal@@Base+0xa00>
   241c4:	mov	r1, #1
   241c8:	ldr	r2, [pc, #44]	; 241fc <p11_dict_direct_equal@@Base+0xa04>
   241cc:	mov	r3, r4
   241d0:	ldr	r0, [r5, r0]
   241d4:	add	r2, pc, r2
   241d8:	ldr	r0, [r0]
   241dc:	bl	1266c <__fprintf_chk@plt>
   241e0:	b	24194 <p11_dict_direct_equal@@Base+0x99c>
   241e4:	bl	12360 <__stack_chk_fail@plt>
   241e8:	ldrdeq	pc, [r1], -r8
   241ec:	andeq	r0, r0, r4, lsr #4
   241f0:	andeq	r0, r2, r8, lsl #3
   241f4:			; <UNDEFINED> instruction: 0x00009fb4
   241f8:	andeq	r0, r0, r8, lsr r2
   241fc:	andeq	r9, r0, ip, asr pc
   24200:	push	{r1, r2, r3}
   24204:	movw	r1, #511	; 0x1ff
   24208:	push	{r4, r5, r6, r7, r8, lr}
   2420c:	sub	sp, sp, #1040	; 0x410
   24210:	ldr	lr, [pc, #196]	; 242dc <p11_dict_direct_equal@@Base+0xae4>
   24214:	sub	sp, sp, #4
   24218:	ldr	r2, [pc, #192]	; 242e0 <p11_dict_direct_equal@@Base+0xae8>
   2421c:	add	ip, sp, #1072	; 0x430
   24220:	add	lr, pc, lr
   24224:	ldr	r3, [sp, #1068]	; 0x42c
   24228:	add	r7, sp, #12
   2422c:	mov	r8, r0
   24230:	ldr	r5, [lr, r2]
   24234:	mov	r2, #1
   24238:	str	r3, [sp]
   2423c:	mov	r0, r7
   24240:	str	ip, [sp, #4]
   24244:	mov	r3, #512	; 0x200
   24248:	ldr	r4, [r5]
   2424c:	mov	r6, #0
   24250:	str	ip, [sp, #8]
   24254:	str	r4, [sp, #1036]	; 0x40c
   24258:	bl	122dc <__vsnprintf_chk@plt>
   2425c:	add	r4, sp, #524	; 0x20c
   24260:	add	ip, sp, #1040	; 0x410
   24264:	movw	r3, #511	; 0x1ff
   24268:	ldr	r1, [pc, #116]	; 242e4 <p11_dict_direct_equal@@Base+0xaec>
   2426c:	mov	r2, #512	; 0x200
   24270:	add	r1, pc, r1
   24274:	cmp	r0, r3
   24278:	movcc	r3, r0
   2427c:	mov	r0, r4
   24280:	add	r3, ip, r3
   24284:	strb	r6, [r3, #-1028]	; 0xfffffbfc
   24288:	bl	1260c <strncpy@plt>
   2428c:	mov	r1, r4
   24290:	mov	r2, #512	; 0x200
   24294:	mov	r0, r8
   24298:	bl	126e4 <__xpg_strerror_r@plt>
   2429c:	ldr	r0, [pc, #68]	; 242e8 <p11_dict_direct_equal@@Base+0xaf0>
   242a0:	mov	r2, r4
   242a4:	mov	r1, r7
   242a8:	add	r0, pc, r0
   242ac:	strb	r6, [sp, #1035]	; 0x40b
   242b0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   242b4:	ldr	r2, [sp, #1036]	; 0x40c
   242b8:	ldr	r3, [r5]
   242bc:	cmp	r2, r3
   242c0:	bne	242d8 <p11_dict_direct_equal@@Base+0xae0>
   242c4:	add	sp, sp, #1040	; 0x410
   242c8:	add	sp, sp, #4
   242cc:	pop	{r4, r5, r6, r7, r8, lr}
   242d0:	add	sp, sp, #12
   242d4:	bx	lr
   242d8:	bl	12360 <__stack_chk_fail@plt>
   242dc:	ldrdeq	pc, [r1], -r8
   242e0:	andeq	r0, r0, r4, lsr #4
   242e4:	ldrdeq	r9, [r0], -ip
   242e8:	andeq	r9, r0, ip, lsl sp
   242ec:	ldr	r3, [pc, #12]	; 24300 <p11_dict_direct_equal@@Base+0xb08>
   242f0:	mov	r2, #0
   242f4:	add	r3, pc, r3
   242f8:	strb	r2, [r3]
   242fc:	bx	lr
   24300:	strdeq	pc, [r1], -r4
   24304:	ldr	r3, [pc, #12]	; 24318 <p11_dict_direct_equal@@Base+0xb20>
   24308:	mov	r2, #1
   2430c:	add	r3, pc, r3
   24310:	strb	r2, [r3]
   24314:	bx	lr
   24318:	ldrdeq	pc, [r1], -ip
   2431c:	push	{r3, lr}
   24320:	ldr	r3, [pc, #40]	; 24350 <p11_dict_direct_equal@@Base+0xb58>
   24324:	ldr	r2, [pc, #40]	; 24354 <p11_dict_direct_equal@@Base+0xb5c>
   24328:	add	r3, pc, r3
   2432c:	ldr	r3, [r3, r2]
   24330:	ldr	r3, [r3]
   24334:	blx	r3
   24338:	cmp	r0, #0
   2433c:	popeq	{r3, pc}
   24340:	ldrb	r3, [r0]
   24344:	cmp	r3, #0
   24348:	moveq	r0, #0
   2434c:	pop	{r3, pc}
   24350:	ldrdeq	pc, [r1], -r0
   24354:	andeq	r0, r0, ip, asr r2
   24358:	push	{r3, lr}
   2435c:	ldr	r3, [pc, #32]	; 24384 <p11_dict_direct_equal@@Base+0xb8c>
   24360:	ldr	r2, [pc, #32]	; 24388 <p11_dict_direct_equal@@Base+0xb90>
   24364:	add	r3, pc, r3
   24368:	ldr	r3, [r3, r2]
   2436c:	ldr	r3, [r3]
   24370:	blx	r3
   24374:	cmp	r0, #0
   24378:	movne	r3, #0
   2437c:	strbne	r3, [r0]
   24380:	pop	{r3, pc}
   24384:	muleq	r1, r4, ip
   24388:	andeq	r0, r0, ip, asr r2
   2438c:	push	{r4, r5, r6, r7, r8, lr}
   24390:	subs	r5, r0, #0
   24394:	beq	24458 <p11_dict_direct_equal@@Base+0xc60>
   24398:	bl	12540 <strlen@plt>
   2439c:	add	r4, r5, r0
   243a0:	cmp	r5, r4
   243a4:	beq	24434 <p11_dict_direct_equal@@Base+0xc3c>
   243a8:	ldr	r6, [pc, #204]	; 2447c <p11_dict_direct_equal@@Base+0xc84>
   243ac:	add	r6, pc, r6
   243b0:	b	243c0 <p11_dict_direct_equal@@Base+0xbc8>
   243b4:	sub	r4, r4, #1
   243b8:	cmp	r5, r4
   243bc:	beq	24434 <p11_dict_direct_equal@@Base+0xc3c>
   243c0:	mov	r0, r6
   243c4:	ldrb	r1, [r4, #-1]
   243c8:	bl	12558 <strchr@plt>
   243cc:	subs	r2, r0, #0
   243d0:	bne	243b4 <p11_dict_direct_equal@@Base+0xbbc>
   243d4:	cmp	r5, r4
   243d8:	mov	r8, r4
   243dc:	moveq	r1, r2
   243e0:	beq	24438 <p11_dict_direct_equal@@Base+0xc40>
   243e4:	ldr	r6, [pc, #148]	; 24480 <p11_dict_direct_equal@@Base+0xc88>
   243e8:	add	r7, r5, #1
   243ec:	mov	r3, r4
   243f0:	add	r6, pc, r6
   243f4:	b	24410 <p11_dict_direct_equal@@Base+0xc18>
   243f8:	cmp	r3, r7
   243fc:	beq	24444 <p11_dict_direct_equal@@Base+0xc4c>
   24400:	ldrb	r1, [r3, #-2]
   24404:	bl	12558 <strchr@plt>
   24408:	mov	r3, r5
   2440c:	mov	r2, r0
   24410:	cmp	r2, #0
   24414:	mov	r0, r6
   24418:	mov	r4, r3
   2441c:	sub	r5, r3, #1
   24420:	beq	243f8 <p11_dict_direct_equal@@Base+0xc00>
   24424:	rsb	r1, r3, r8
   24428:	mov	r0, r4
   2442c:	pop	{r4, r5, r6, r7, r8, lr}
   24430:	b	224d4 <strndup@@Base>
   24434:	mov	r1, #0
   24438:	mov	r0, r4
   2443c:	pop	{r4, r5, r6, r7, r8, lr}
   24440:	b	224d4 <strndup@@Base>
   24444:	mov	r4, r5
   24448:	rsb	r1, r5, r8
   2444c:	mov	r0, r4
   24450:	pop	{r4, r5, r6, r7, r8, lr}
   24454:	b	224d4 <strndup@@Base>
   24458:	ldr	r0, [pc, #36]	; 24484 <p11_dict_direct_equal@@Base+0xc8c>
   2445c:	ldr	r1, [pc, #36]	; 24488 <p11_dict_direct_equal@@Base+0xc90>
   24460:	ldr	r2, [pc, #36]	; 2448c <p11_dict_direct_equal@@Base+0xc94>
   24464:	add	r0, pc, r0
   24468:	add	r1, pc, r1
   2446c:	add	r2, pc, r2
   24470:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24474:	mov	r0, r5
   24478:	pop	{r4, r5, r6, r7, r8, pc}
   2447c:	andeq	r9, r0, r4, asr #28
   24480:	andeq	r9, r0, r0, lsl #28
   24484:	andeq	r1, r0, r0, asr #18
   24488:	andeq	r3, r0, ip, lsr #8
   2448c:	strdeq	r9, [r0], -r0
   24490:	push	{r4, lr}
   24494:	subs	r4, r0, #0
   24498:	beq	244b0 <p11_dict_direct_equal@@Base+0xcb8>
   2449c:	ldrb	r0, [r4]
   244a0:	subs	r3, r0, #47	; 0x2f
   244a4:	rsbs	r0, r3, #0
   244a8:	adcs	r0, r0, r3
   244ac:	pop	{r4, pc}
   244b0:	ldr	r2, [pc, #32]	; 244d8 <p11_dict_direct_equal@@Base+0xce0>
   244b4:	ldr	r0, [pc, #32]	; 244dc <p11_dict_direct_equal@@Base+0xce4>
   244b8:	ldr	r1, [pc, #32]	; 244e0 <p11_dict_direct_equal@@Base+0xce8>
   244bc:	add	r2, pc, r2
   244c0:	add	r0, pc, r0
   244c4:	add	r2, r2, #16
   244c8:	add	r1, pc, r1
   244cc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   244d0:	mov	r0, r4
   244d4:	pop	{r4, pc}
   244d8:	andeq	r9, r0, r0, lsr #25
   244dc:	andeq	r1, r0, r4, ror #17
   244e0:	andeq	r3, r0, ip, asr #7
   244e4:	push	{r0, r1, r2, r3}
   244e8:	ldr	r3, [pc, #632]	; 24768 <p11_dict_direct_equal@@Base+0xf70>
   244ec:	ldr	r2, [pc, #632]	; 2476c <p11_dict_direct_equal@@Base+0xf74>
   244f0:	add	r3, pc, r3
   244f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   244f8:	sub	sp, sp, #8
   244fc:	ldr	r7, [r3, r2]
   24500:	ldr	r4, [sp, #40]	; 0x28
   24504:	ldr	r3, [r7]
   24508:	cmp	r4, #0
   2450c:	addne	r6, sp, #44	; 0x2c
   24510:	strne	r6, [sp]
   24514:	movne	sl, r4
   24518:	movne	r5, #1
   2451c:	str	r3, [sp, #4]
   24520:	bne	2452c <p11_dict_direct_equal@@Base+0xd34>
   24524:	b	246cc <p11_dict_direct_equal@@Base+0xed4>
   24528:	mov	r5, r8
   2452c:	mov	r0, sl
   24530:	bl	12540 <strlen@plt>
   24534:	add	r0, r5, r0
   24538:	add	r8, r0, #1
   2453c:	cmp	r8, r5
   24540:	bcc	246a4 <p11_dict_direct_equal@@Base+0xeac>
   24544:	ldr	r3, [sp]
   24548:	add	r2, r3, #4
   2454c:	str	r2, [sp]
   24550:	ldr	sl, [r3]
   24554:	cmp	sl, #0
   24558:	bne	24528 <p11_dict_direct_equal@@Base+0xd30>
   2455c:	add	r0, r0, #2
   24560:	bl	1245c <malloc@plt>
   24564:	subs	r5, r0, #0
   24568:	beq	246f4 <p11_dict_direct_equal@@Base+0xefc>
   2456c:	mov	r0, r4
   24570:	str	r6, [sp]
   24574:	mov	r6, #47	; 0x2f
   24578:	bl	12540 <strlen@plt>
   2457c:	rsbs	ip, sl, #1
   24580:	movcc	ip, #0
   24584:	cmp	ip, r0
   24588:	bcs	2468c <p11_dict_direct_equal@@Base+0xe94>
   2458c:	sub	r2, r0, #1
   24590:	ldrb	r3, [r4, r2]
   24594:	cmp	r3, #47	; 0x2f
   24598:	cmpne	r3, #0
   2459c:	beq	245bc <p11_dict_direct_equal@@Base+0xdc4>
   245a0:	b	2468c <p11_dict_direct_equal@@Base+0xe94>
   245a4:	sub	r1, r2, #1
   245a8:	ldrb	r3, [r4, r1]
   245ac:	cmp	r3, #0
   245b0:	cmpne	r3, #47	; 0x2f
   245b4:	bne	245c4 <p11_dict_direct_equal@@Base+0xdcc>
   245b8:	mov	r2, r1
   245bc:	cmp	ip, r2
   245c0:	bcc	245a4 <p11_dict_direct_equal@@Base+0xdac>
   245c4:	cmp	sl, #0
   245c8:	beq	245dc <p11_dict_direct_equal@@Base+0xde4>
   245cc:	cmp	r2, #0
   245d0:	beq	24694 <p11_dict_direct_equal@@Base+0xe9c>
   245d4:	strb	r6, [r5, sl]
   245d8:	add	sl, sl, #1
   245dc:	add	r9, sl, r2
   245e0:	cmp	r9, r8
   245e4:	bcs	2471c <p11_dict_direct_equal@@Base+0xf24>
   245e8:	mov	r1, r4
   245ec:	add	r0, r5, sl
   245f0:	bl	122e8 <memcpy@plt>
   245f4:	ldr	r3, [sp]
   245f8:	add	r2, r3, #4
   245fc:	str	r2, [sp]
   24600:	ldr	r4, [r3]
   24604:	cmp	r4, #0
   24608:	beq	2463c <p11_dict_direct_equal@@Base+0xe44>
   2460c:	ldrb	r3, [r4]
   24610:	cmp	r3, #47	; 0x2f
   24614:	bne	24670 <p11_dict_direct_equal@@Base+0xe78>
   24618:	add	r3, r4, #1
   2461c:	b	24630 <p11_dict_direct_equal@@Base+0xe38>
   24620:	ldrb	r2, [r3]
   24624:	add	r3, r3, #1
   24628:	cmp	r2, #47	; 0x2f
   2462c:	bne	24670 <p11_dict_direct_equal@@Base+0xe78>
   24630:	cmp	r3, #0
   24634:	mov	r4, r3
   24638:	bne	24620 <p11_dict_direct_equal@@Base+0xe28>
   2463c:	cmp	r9, r8
   24640:	movcc	r3, #0
   24644:	movcc	r0, r5
   24648:	strbcc	r3, [r5, r9]
   2464c:	bcs	24744 <p11_dict_direct_equal@@Base+0xf4c>
   24650:	ldr	r2, [sp, #4]
   24654:	ldr	r3, [r7]
   24658:	cmp	r2, r3
   2465c:	bne	24740 <p11_dict_direct_equal@@Base+0xf48>
   24660:	add	sp, sp, #8
   24664:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   24668:	add	sp, sp, #16
   2466c:	bx	lr
   24670:	mov	r0, r4
   24674:	mov	sl, r9
   24678:	bl	12540 <strlen@plt>
   2467c:	rsbs	ip, sl, #1
   24680:	movcc	ip, #0
   24684:	cmp	ip, r0
   24688:	bcc	2458c <p11_dict_direct_equal@@Base+0xd94>
   2468c:	mov	r2, r0
   24690:	b	245c4 <p11_dict_direct_equal@@Base+0xdcc>
   24694:	cmp	r4, #0
   24698:	bne	2457c <p11_dict_direct_equal@@Base+0xd84>
   2469c:	mov	r9, sl
   246a0:	b	2463c <p11_dict_direct_equal@@Base+0xe44>
   246a4:	ldr	r2, [pc, #196]	; 24770 <p11_dict_direct_equal@@Base+0xf78>
   246a8:	ldr	r0, [pc, #196]	; 24774 <p11_dict_direct_equal@@Base+0xf7c>
   246ac:	ldr	r1, [pc, #196]	; 24778 <p11_dict_direct_equal@@Base+0xf80>
   246b0:	add	r2, pc, r2
   246b4:	add	r0, pc, r0
   246b8:	add	r2, r2, #36	; 0x24
   246bc:	add	r1, pc, r1
   246c0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   246c4:	mov	r0, #0
   246c8:	b	24650 <p11_dict_direct_equal@@Base+0xe58>
   246cc:	ldr	r2, [pc, #168]	; 2477c <p11_dict_direct_equal@@Base+0xf84>
   246d0:	ldr	r0, [pc, #168]	; 24780 <p11_dict_direct_equal@@Base+0xf88>
   246d4:	ldr	r1, [pc, #168]	; 24784 <p11_dict_direct_equal@@Base+0xf8c>
   246d8:	add	r2, pc, r2
   246dc:	add	r0, pc, r0
   246e0:	add	r2, r2, #36	; 0x24
   246e4:	add	r1, pc, r1
   246e8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   246ec:	mov	r0, r4
   246f0:	b	24650 <p11_dict_direct_equal@@Base+0xe58>
   246f4:	ldr	r2, [pc, #140]	; 24788 <p11_dict_direct_equal@@Base+0xf90>
   246f8:	ldr	r0, [pc, #140]	; 2478c <p11_dict_direct_equal@@Base+0xf94>
   246fc:	ldr	r1, [pc, #140]	; 24790 <p11_dict_direct_equal@@Base+0xf98>
   24700:	add	r2, pc, r2
   24704:	add	r0, pc, r0
   24708:	add	r2, r2, #36	; 0x24
   2470c:	add	r1, pc, r1
   24710:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24714:	mov	r0, sl
   24718:	b	24650 <p11_dict_direct_equal@@Base+0xe58>
   2471c:	ldr	r3, [pc, #112]	; 24794 <p11_dict_direct_equal@@Base+0xf9c>
   24720:	mov	r2, #246	; 0xf6
   24724:	ldr	r0, [pc, #108]	; 24798 <p11_dict_direct_equal@@Base+0xfa0>
   24728:	ldr	r1, [pc, #108]	; 2479c <p11_dict_direct_equal@@Base+0xfa4>
   2472c:	add	r3, pc, r3
   24730:	add	r0, pc, r0
   24734:	add	r3, r3, #52	; 0x34
   24738:	add	r1, pc, r1
   2473c:	bl	12828 <__assert_fail@plt>
   24740:	bl	12360 <__stack_chk_fail@plt>
   24744:	ldr	r3, [pc, #84]	; 247a0 <p11_dict_direct_equal@@Base+0xfa8>
   24748:	movw	r2, #258	; 0x102
   2474c:	ldr	r0, [pc, #80]	; 247a4 <p11_dict_direct_equal@@Base+0xfac>
   24750:	ldr	r1, [pc, #80]	; 247a8 <p11_dict_direct_equal@@Base+0xfb0>
   24754:	add	r3, pc, r3
   24758:	add	r0, pc, r0
   2475c:	add	r3, r3, #52	; 0x34
   24760:	add	r1, pc, r1
   24764:	bl	12828 <__assert_fail@plt>
   24768:	andeq	pc, r1, r8, lsl #22
   2476c:	andeq	r0, r0, r4, lsr #4
   24770:	andeq	r9, r0, ip, lsr #21
   24774:	strdeq	r1, [r0], -r0
   24778:	andeq	r9, r0, r8, lsr fp
   2477c:	andeq	r9, r0, r4, lsl #21
   24780:	andeq	r1, r0, r8, asr #13
   24784:			; <UNDEFINED> instruction: 0x000031b0
   24788:	andeq	r9, r0, ip, asr sl
   2478c:	andeq	r1, r0, r0, lsr #13
   24790:	strdeq	r9, [r0], -r8
   24794:	andeq	r9, r0, r0, lsr sl
   24798:	andeq	r9, r0, r4, ror #21
   2479c:	andeq	r9, r0, ip, ror #21
   247a0:	andeq	r9, r0, r8, lsl #20
   247a4:	ldrdeq	r9, [r0], -ip
   247a8:	andeq	r9, r0, r4, asr #21
   247ac:	ldr	r3, [pc, #444]	; 24970 <p11_dict_direct_equal@@Base+0x1178>
   247b0:	ldr	r2, [pc, #444]	; 24974 <p11_dict_direct_equal@@Base+0x117c>
   247b4:	add	r3, pc, r3
   247b8:	push	{r4, r5, r6, r7, lr}
   247bc:	sub	sp, sp, #1072	; 0x430
   247c0:	ldr	r5, [r3, r2]
   247c4:	sub	sp, sp, #4
   247c8:	mov	r4, r0
   247cc:	mov	r0, #23
   247d0:	ldr	r3, [r5]
   247d4:	str	r3, [sp, #1068]	; 0x42c
   247d8:	bl	12690 <getauxval@plt>
   247dc:	cmp	r0, #0
   247e0:	bne	24950 <p11_dict_direct_equal@@Base+0x1158>
   247e4:	ldrb	r3, [r4]
   247e8:	cmp	r3, #0
   247ec:	beq	24964 <p11_dict_direct_equal@@Base+0x116c>
   247f0:	cmp	r3, #47	; 0x2f
   247f4:	addeq	r3, r4, #1
   247f8:	beq	24808 <p11_dict_direct_equal@@Base+0x1010>
   247fc:	b	248ac <p11_dict_direct_equal@@Base+0x10b4>
   24800:	cmp	r2, #47	; 0x2f
   24804:	bne	248ac <p11_dict_direct_equal@@Base+0x10b4>
   24808:	mov	r4, r3
   2480c:	ldrb	r2, [r3], #1
   24810:	cmp	r2, #0
   24814:	bne	24800 <p11_dict_direct_equal@@Base+0x1008>
   24818:	mov	r4, r2
   2481c:	ldr	r0, [pc, #340]	; 24978 <p11_dict_direct_equal@@Base+0x1180>
   24820:	add	r0, pc, r0
   24824:	bl	12444 <getenv@plt>
   24828:	subs	r3, r0, #0
   2482c:	beq	2483c <p11_dict_direct_equal@@Base+0x1044>
   24830:	ldrb	r3, [r3]
   24834:	cmp	r3, #0
   24838:	bne	2493c <p11_dict_direct_equal@@Base+0x1144>
   2483c:	mov	r6, #0
   24840:	str	r6, [sp, #12]
   24844:	bl	125b8 <__errno_location@plt>
   24848:	str	r6, [r0]
   2484c:	mov	r7, r0
   24850:	bl	122ac <getuid@plt>
   24854:	add	r1, sp, #16
   24858:	sub	r3, r1, #4
   2485c:	add	r2, sp, #44	; 0x2c
   24860:	str	r3, [sp]
   24864:	mov	r3, #1024	; 0x400
   24868:	bl	12240 <getpwuid_r@plt>
   2486c:	ldr	r3, [sp, #12]
   24870:	cmp	r3, r6
   24874:	beq	2490c <p11_dict_direct_equal@@Base+0x1114>
   24878:	ldr	r0, [r3, #20]
   2487c:	mov	r1, r4
   24880:	mov	r2, r6
   24884:	bl	244e4 <p11_dict_direct_equal@@Base+0xcec>
   24888:	mov	r3, r0
   2488c:	ldr	r2, [sp, #1068]	; 0x42c
   24890:	mov	r0, r3
   24894:	ldr	r3, [r5]
   24898:	cmp	r2, r3
   2489c:	bne	2496c <p11_dict_direct_equal@@Base+0x1174>
   248a0:	add	sp, sp, #1072	; 0x430
   248a4:	add	sp, sp, #4
   248a8:	pop	{r4, r5, r6, r7, pc}
   248ac:	ldr	r1, [pc, #200]	; 2497c <p11_dict_direct_equal@@Base+0x1184>
   248b0:	mov	r0, r4
   248b4:	mov	r2, #7
   248b8:	add	r1, pc, r1
   248bc:	bl	127bc <strncmp@plt>
   248c0:	subs	r6, r0, #0
   248c4:	bne	2481c <p11_dict_direct_equal@@Base+0x1024>
   248c8:	ldrb	r3, [r4, #7]
   248cc:	cmp	r3, #0
   248d0:	cmpne	r3, #47	; 0x2f
   248d4:	bne	2481c <p11_dict_direct_equal@@Base+0x1024>
   248d8:	ldr	r0, [pc, #160]	; 24980 <p11_dict_direct_equal@@Base+0x1188>
   248dc:	add	r0, pc, r0
   248e0:	bl	12444 <getenv@plt>
   248e4:	subs	r3, r0, #0
   248e8:	beq	2481c <p11_dict_direct_equal@@Base+0x1024>
   248ec:	ldrb	r3, [r3]
   248f0:	cmp	r3, #0
   248f4:	beq	2481c <p11_dict_direct_equal@@Base+0x1024>
   248f8:	add	r1, r4, #8
   248fc:	mov	r2, r6
   24900:	bl	244e4 <p11_dict_direct_equal@@Base+0xcec>
   24904:	mov	r3, r0
   24908:	b	2488c <p11_dict_direct_equal@@Base+0x1094>
   2490c:	cmp	r0, r6
   24910:	ldrne	r4, [r7]
   24914:	moveq	r4, #3
   24918:	bl	122ac <getuid@plt>
   2491c:	ldr	r1, [pc, #96]	; 24984 <p11_dict_direct_equal@@Base+0x118c>
   24920:	add	r1, pc, r1
   24924:	mov	r2, r0
   24928:	mov	r0, r4
   2492c:	bl	24200 <p11_dict_direct_equal@@Base+0xa08>
   24930:	str	r4, [r7]
   24934:	mov	r3, #0
   24938:	b	2488c <p11_dict_direct_equal@@Base+0x1094>
   2493c:	mov	r1, r4
   24940:	mov	r2, #0
   24944:	bl	244e4 <p11_dict_direct_equal@@Base+0xcec>
   24948:	mov	r3, r0
   2494c:	b	2488c <p11_dict_direct_equal@@Base+0x1094>
   24950:	bl	125b8 <__errno_location@plt>
   24954:	mov	r2, #1
   24958:	mov	r3, #0
   2495c:	str	r2, [r0]
   24960:	b	2488c <p11_dict_direct_equal@@Base+0x1094>
   24964:	mov	r4, r3
   24968:	b	2481c <p11_dict_direct_equal@@Base+0x1024>
   2496c:	bl	12360 <__stack_chk_fail@plt>
   24970:	andeq	pc, r1, r4, asr #16
   24974:	andeq	r0, r0, r4, lsr #4
   24978:	andeq	r9, r0, r0, lsr sl
   2497c:	andeq	r9, r0, ip, asr #19
   24980:	andeq	r9, r0, r4, ror #18
   24984:	andeq	r9, r0, r8, lsr r9
   24988:	push	{r4, lr}
   2498c:	subs	r4, r0, #0
   24990:	beq	249c8 <p11_dict_direct_equal@@Base+0x11d0>
   24994:	ldrb	r3, [r4]
   24998:	cmp	r3, #126	; 0x7e
   2499c:	beq	249ac <p11_dict_direct_equal@@Base+0x11b4>
   249a0:	mov	r0, r4
   249a4:	pop	{r4, lr}
   249a8:	b	125c4 <__strdup@plt>
   249ac:	ldrb	r3, [r4, #1]
   249b0:	cmp	r3, #0
   249b4:	cmpne	r3, #47	; 0x2f
   249b8:	bne	249a0 <p11_dict_direct_equal@@Base+0x11a8>
   249bc:	add	r0, r4, #1
   249c0:	pop	{r4, lr}
   249c4:	b	247ac <p11_dict_direct_equal@@Base+0xfb4>
   249c8:	ldr	r2, [pc, #32]	; 249f0 <p11_dict_direct_equal@@Base+0x11f8>
   249cc:	ldr	r0, [pc, #32]	; 249f4 <p11_dict_direct_equal@@Base+0x11fc>
   249d0:	ldr	r1, [pc, #32]	; 249f8 <p11_dict_direct_equal@@Base+0x1200>
   249d4:	add	r2, pc, r2
   249d8:	add	r0, pc, r0
   249dc:	add	r2, r2, #68	; 0x44
   249e0:	add	r1, pc, r1
   249e4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   249e8:	mov	r0, r4
   249ec:	pop	{r4, pc}
   249f0:	andeq	r9, r0, r8, lsl #15
   249f4:	andeq	r1, r0, ip, asr #7
   249f8:			; <UNDEFINED> instruction: 0x00002eb4
   249fc:	push	{r4, lr}
   24a00:	subs	r4, r0, #0
   24a04:	beq	24b08 <p11_dict_direct_equal@@Base+0x1310>
   24a08:	bl	12540 <strlen@plt>
   24a0c:	add	r1, r4, r0
   24a10:	cmp	r4, r1
   24a14:	beq	24a4c <p11_dict_direct_equal@@Base+0x1254>
   24a18:	ldrb	r3, [r4, r0]
   24a1c:	cmp	r3, #0
   24a20:	cmpne	r3, #47	; 0x2f
   24a24:	bne	24a54 <p11_dict_direct_equal@@Base+0x125c>
   24a28:	sub	r3, r1, #1
   24a2c:	b	24a40 <p11_dict_direct_equal@@Base+0x1248>
   24a30:	ldrb	r2, [r3], #-1
   24a34:	cmp	r2, #0
   24a38:	cmpne	r2, #47	; 0x2f
   24a3c:	bne	24a54 <p11_dict_direct_equal@@Base+0x125c>
   24a40:	cmp	r3, r4
   24a44:	mov	r1, r3
   24a48:	bne	24a30 <p11_dict_direct_equal@@Base+0x1238>
   24a4c:	mov	r0, #0
   24a50:	pop	{r4, pc}
   24a54:	sub	r3, r1, #1
   24a58:	b	24a6c <p11_dict_direct_equal@@Base+0x1274>
   24a5c:	ldrb	r1, [r3], #-1
   24a60:	cmp	r1, #0
   24a64:	cmpne	r1, #47	; 0x2f
   24a68:	beq	24aa0 <p11_dict_direct_equal@@Base+0x12a8>
   24a6c:	cmp	r3, r4
   24a70:	mov	r2, r3
   24a74:	bne	24a5c <p11_dict_direct_equal@@Base+0x1264>
   24a78:	mov	r0, #2
   24a7c:	bl	1245c <malloc@plt>
   24a80:	subs	r3, r0, #0
   24a84:	movne	r2, #47	; 0x2f
   24a88:	movne	r0, r3
   24a8c:	strhne	r2, [r3]
   24a90:	beq	24ae0 <p11_dict_direct_equal@@Base+0x12e8>
   24a94:	cmp	r0, #0
   24a98:	beq	24ae0 <p11_dict_direct_equal@@Base+0x12e8>
   24a9c:	pop	{r4, pc}
   24aa0:	sub	r2, r2, #1
   24aa4:	b	24abc <p11_dict_direct_equal@@Base+0x12c4>
   24aa8:	ldrb	r1, [r3], #-1
   24aac:	cmp	r1, #0
   24ab0:	cmpne	r1, #47	; 0x2f
   24ab4:	bne	24acc <p11_dict_direct_equal@@Base+0x12d4>
   24ab8:	mov	r2, r3
   24abc:	cmp	r2, r4
   24ac0:	mov	r3, r2
   24ac4:	bne	24aa8 <p11_dict_direct_equal@@Base+0x12b0>
   24ac8:	b	24a78 <p11_dict_direct_equal@@Base+0x1280>
   24acc:	rsb	r1, r4, r2
   24ad0:	mov	r0, r4
   24ad4:	add	r1, r1, #1
   24ad8:	bl	224d4 <strndup@@Base>
   24adc:	b	24a94 <p11_dict_direct_equal@@Base+0x129c>
   24ae0:	ldr	r2, [pc, #72]	; 24b30 <p11_dict_direct_equal@@Base+0x1338>
   24ae4:	ldr	r0, [pc, #72]	; 24b34 <p11_dict_direct_equal@@Base+0x133c>
   24ae8:	ldr	r1, [pc, #72]	; 24b38 <p11_dict_direct_equal@@Base+0x1340>
   24aec:	add	r2, pc, r2
   24af0:	add	r0, pc, r0
   24af4:	add	r2, r2, #84	; 0x54
   24af8:	add	r1, pc, r1
   24afc:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24b00:	mov	r0, #0
   24b04:	pop	{r4, pc}
   24b08:	ldr	r2, [pc, #44]	; 24b3c <p11_dict_direct_equal@@Base+0x1344>
   24b0c:	ldr	r0, [pc, #44]	; 24b40 <p11_dict_direct_equal@@Base+0x1348>
   24b10:	ldr	r1, [pc, #44]	; 24b44 <p11_dict_direct_equal@@Base+0x134c>
   24b14:	add	r2, pc, r2
   24b18:	add	r0, pc, r0
   24b1c:	add	r2, r2, #84	; 0x54
   24b20:	add	r1, pc, r1
   24b24:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24b28:	mov	r0, r4
   24b2c:	pop	{r4, pc}
   24b30:	andeq	r9, r0, r0, ror r6
   24b34:			; <UNDEFINED> instruction: 0x000012b4
   24b38:	muleq	r0, r4, r7
   24b3c:	andeq	r9, r0, r8, asr #12
   24b40:	andeq	r1, r0, ip, lsl #5
   24b44:	andeq	r2, r0, r4, ror sp
   24b48:	push	{r3, r4, r5, r6, r7, lr}
   24b4c:	subs	r7, r0, #0
   24b50:	mov	r4, r1
   24b54:	beq	24bb4 <p11_dict_direct_equal@@Base+0x13bc>
   24b58:	cmp	r1, #0
   24b5c:	beq	24bdc <p11_dict_direct_equal@@Base+0x13e4>
   24b60:	bl	12540 <strlen@plt>
   24b64:	mov	r6, r0
   24b68:	mov	r0, r4
   24b6c:	bl	12540 <strlen@plt>
   24b70:	cmp	r6, r0
   24b74:	mov	r5, r0
   24b78:	ble	24bac <p11_dict_direct_equal@@Base+0x13b4>
   24b7c:	mov	r1, r4
   24b80:	mov	r0, r7
   24b84:	mov	r2, r5
   24b88:	bl	127bc <strncmp@plt>
   24b8c:	cmp	r0, #0
   24b90:	bne	24bac <p11_dict_direct_equal@@Base+0x13b4>
   24b94:	ldrb	r0, [r7, r5]
   24b98:	cmp	r0, #0
   24b9c:	cmpne	r0, #47	; 0x2f
   24ba0:	movne	r0, #0
   24ba4:	moveq	r0, #1
   24ba8:	pop	{r3, r4, r5, r6, r7, pc}
   24bac:	mov	r0, #0
   24bb0:	pop	{r3, r4, r5, r6, r7, pc}
   24bb4:	ldr	r2, [pc, #72]	; 24c04 <p11_dict_direct_equal@@Base+0x140c>
   24bb8:	ldr	r0, [pc, #72]	; 24c08 <p11_dict_direct_equal@@Base+0x1410>
   24bbc:	ldr	r1, [pc, #72]	; 24c0c <p11_dict_direct_equal@@Base+0x1414>
   24bc0:	add	r2, pc, r2
   24bc4:	add	r0, pc, r0
   24bc8:	add	r2, r2, #100	; 0x64
   24bcc:	add	r1, pc, r1
   24bd0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24bd4:	mov	r0, r7
   24bd8:	pop	{r3, r4, r5, r6, r7, pc}
   24bdc:	ldr	r2, [pc, #44]	; 24c10 <p11_dict_direct_equal@@Base+0x1418>
   24be0:	ldr	r0, [pc, #44]	; 24c14 <p11_dict_direct_equal@@Base+0x141c>
   24be4:	ldr	r1, [pc, #44]	; 24c18 <p11_dict_direct_equal@@Base+0x1420>
   24be8:	add	r2, pc, r2
   24bec:	add	r0, pc, r0
   24bf0:	add	r2, r2, #100	; 0x64
   24bf4:	add	r1, pc, r1
   24bf8:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24bfc:	mov	r0, r4
   24c00:	pop	{r3, r4, r5, r6, r7, pc}
   24c04:	muleq	r0, ip, r5
   24c08:	andeq	r1, r0, r0, ror #3
   24c0c:	muleq	r0, r4, r1
   24c10:	andeq	r9, r0, r4, ror r5
   24c14:			; <UNDEFINED> instruction: 0x000011b8
   24c18:	andeq	r9, r0, r8, lsr #13
   24c1c:	cmp	r0, #0
   24c20:	push	{r3, r4, r5, r6, r7, lr}
   24c24:	beq	24c6c <p11_dict_direct_equal@@Base+0x1474>
   24c28:	ldrb	r1, [r0]
   24c2c:	cmp	r1, #0
   24c30:	popeq	{r3, r4, r5, r6, r7, pc}
   24c34:	ldr	r6, [pc, #84]	; 24c90 <p11_dict_direct_equal@@Base+0x1498>
   24c38:	add	r4, r0, #1
   24c3c:	mov	r5, r0
   24c40:	mov	r7, #95	; 0x5f
   24c44:	add	r6, pc, r6
   24c48:	mov	r0, r6
   24c4c:	bl	12558 <strchr@plt>
   24c50:	cmp	r0, #0
   24c54:	strbeq	r7, [r5]
   24c58:	mov	r5, r4
   24c5c:	ldrb	r1, [r4], #1
   24c60:	cmp	r1, #0
   24c64:	bne	24c48 <p11_dict_direct_equal@@Base+0x1450>
   24c68:	pop	{r3, r4, r5, r6, r7, pc}
   24c6c:	ldr	r2, [pc, #32]	; 24c94 <p11_dict_direct_equal@@Base+0x149c>
   24c70:	ldr	r0, [pc, #32]	; 24c98 <p11_dict_direct_equal@@Base+0x14a0>
   24c74:	ldr	r1, [pc, #32]	; 24c9c <p11_dict_direct_equal@@Base+0x14a4>
   24c78:	add	r2, pc, r2
   24c7c:	add	r0, pc, r0
   24c80:	add	r2, r2, #116	; 0x74
   24c84:	add	r1, pc, r1
   24c88:	pop	{r3, r4, r5, r6, r7, lr}
   24c8c:	b	22e10 <secure_getenv@@Base+0x7bc>
   24c90:	andeq	r9, r0, r8, ror #12
   24c94:	andeq	r9, r0, r4, ror #9
   24c98:	andeq	r1, r0, r8, lsr #2
   24c9c:	andeq	r1, r0, r4, lsl #19
   24ca0:	ldr	r3, [pc, #268]	; 24db4 <p11_dict_direct_equal@@Base+0x15bc>
   24ca4:	ldr	r2, [pc, #268]	; 24db8 <p11_dict_direct_equal@@Base+0x15c0>
   24ca8:	add	r3, pc, r3
   24cac:	push	{r4, r5, r6, r7, lr}
   24cb0:	subs	r5, r0, #0
   24cb4:	ldr	r6, [r3, r2]
   24cb8:	sub	sp, sp, #36	; 0x24
   24cbc:	ldr	r3, [r6]
   24cc0:	str	r3, [sp, #28]
   24cc4:	beq	24d88 <p11_dict_direct_equal@@Base+0x1590>
   24cc8:	bl	12540 <strlen@plt>
   24ccc:	add	r4, sp, #4
   24cd0:	mov	r1, r0
   24cd4:	mov	r0, r4
   24cd8:	bl	21e68 <__assert_fail@plt+0xf640>
   24cdc:	subs	r7, r0, #0
   24ce0:	beq	24d40 <p11_dict_direct_equal@@Base+0x1548>
   24ce4:	mov	r0, r5
   24ce8:	bl	12540 <strlen@plt>
   24cec:	ldr	r2, [pc, #200]	; 24dbc <p11_dict_direct_equal@@Base+0x15c4>
   24cf0:	mov	r3, r4
   24cf4:	add	r2, pc, r2
   24cf8:	add	r1, r5, r0
   24cfc:	mov	r0, r5
   24d00:	bl	24fd4 <p11_dict_direct_equal@@Base+0x17dc>
   24d04:	ldr	r1, [sp, #12]
   24d08:	ands	r1, r1, #1
   24d0c:	bne	24d60 <p11_dict_direct_equal@@Base+0x1568>
   24d10:	mov	r0, r4
   24d14:	bl	21f34 <__assert_fail@plt+0xf70c>
   24d18:	mov	r5, r0
   24d1c:	mov	r0, r4
   24d20:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   24d24:	mov	r0, r5
   24d28:	ldr	r2, [sp, #28]
   24d2c:	ldr	r3, [r6]
   24d30:	cmp	r2, r3
   24d34:	bne	24db0 <p11_dict_direct_equal@@Base+0x15b8>
   24d38:	add	sp, sp, #36	; 0x24
   24d3c:	pop	{r4, r5, r6, r7, pc}
   24d40:	ldr	r1, [pc, #120]	; 24dc0 <p11_dict_direct_equal@@Base+0x15c8>
   24d44:	ldr	r0, [pc, #120]	; 24dc4 <p11_dict_direct_equal@@Base+0x15cc>
   24d48:	add	r1, pc, r1
   24d4c:	add	r0, pc, r0
   24d50:	add	r1, r1, #132	; 0x84
   24d54:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24d58:	mov	r0, r7
   24d5c:	b	24d28 <p11_dict_direct_equal@@Base+0x1530>
   24d60:	ldr	r2, [pc, #96]	; 24dc8 <p11_dict_direct_equal@@Base+0x15d0>
   24d64:	ldr	r0, [pc, #96]	; 24dcc <p11_dict_direct_equal@@Base+0x15d4>
   24d68:	ldr	r1, [pc, #96]	; 24dd0 <p11_dict_direct_equal@@Base+0x15d8>
   24d6c:	add	r2, pc, r2
   24d70:	add	r0, pc, r0
   24d74:	add	r2, r2, #132	; 0x84
   24d78:	add	r1, pc, r1
   24d7c:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24d80:	mov	r0, #0
   24d84:	b	24d28 <p11_dict_direct_equal@@Base+0x1530>
   24d88:	ldr	r2, [pc, #68]	; 24dd4 <p11_dict_direct_equal@@Base+0x15dc>
   24d8c:	ldr	r0, [pc, #68]	; 24dd8 <p11_dict_direct_equal@@Base+0x15e0>
   24d90:	ldr	r1, [pc, #68]	; 24ddc <p11_dict_direct_equal@@Base+0x15e4>
   24d94:	add	r2, pc, r2
   24d98:	add	r0, pc, r0
   24d9c:	add	r2, r2, #132	; 0x84
   24da0:	add	r1, pc, r1
   24da4:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24da8:	mov	r0, r5
   24dac:	b	24d28 <p11_dict_direct_equal@@Base+0x1530>
   24db0:	bl	12360 <__stack_chk_fail@plt>
   24db4:	andeq	pc, r1, r0, asr r3	; <UNPREDICTABLE>
   24db8:	andeq	r0, r0, r4, lsr #4
   24dbc:	strdeq	r9, [r0], -ip
   24dc0:	andeq	r9, r0, r4, lsl r4
   24dc4:	strdeq	r1, [r0], -ip
   24dc8:	strdeq	r9, [r0], -r0
   24dcc:	andeq	r1, r0, r4, lsr r0
   24dd0:	andeq	r2, r0, r0, ror #25
   24dd4:	andeq	r9, r0, r8, asr #7
   24dd8:	andeq	r1, r0, ip
   24ddc:	strdeq	r2, [r0], -r4
   24de0:	push	{r4, lr}
   24de4:	mov	r4, r0
   24de8:	bl	12540 <strlen@plt>
   24dec:	ldr	r2, [pc, #20]	; 24e08 <p11_dict_direct_equal@@Base+0x1610>
   24df0:	mov	r3, #0
   24df4:	add	r2, pc, r2
   24df8:	add	r1, r4, r0
   24dfc:	mov	r0, r4
   24e00:	pop	{r4, lr}
   24e04:	b	24e0c <p11_dict_direct_equal@@Base+0x1614>
   24e08:	andeq	r9, r0, r0, ror r6
   24e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e10:	cmp	r0, r1
   24e14:	sub	sp, sp, #12
   24e18:	mov	r4, r0
   24e1c:	mov	r7, r1
   24e20:	mov	r9, r2
   24e24:	str	r3, [sp, #4]
   24e28:	bhi	24f8c <p11_dict_direct_equal@@Base+0x1794>
   24e2c:	cmp	r2, #0
   24e30:	beq	24f6c <p11_dict_direct_equal@@Base+0x1774>
   24e34:	rsb	r0, r0, r1
   24e38:	add	r0, r0, #1
   24e3c:	bl	1245c <malloc@plt>
   24e40:	subs	sl, r0, #0
   24e44:	beq	24f44 <p11_dict_direct_equal@@Base+0x174c>
   24e48:	cmp	r4, r7
   24e4c:	moveq	r6, sl
   24e50:	beq	24f04 <p11_dict_direct_equal@@Base+0x170c>
   24e54:	ldr	r8, [pc, #336]	; 24fac <p11_dict_direct_equal@@Base+0x17b4>
   24e58:	mov	r6, sl
   24e5c:	add	r8, pc, r8
   24e60:	add	r8, r8, #32
   24e64:	b	24e90 <p11_dict_direct_equal@@Base+0x1698>
   24e68:	mov	r0, r9
   24e6c:	mov	r1, r5
   24e70:	bl	12558 <strchr@plt>
   24e74:	cmp	r0, #0
   24e78:	strbeq	r5, [r6]
   24e7c:	addne	r4, r4, #1
   24e80:	addeq	r4, r4, #1
   24e84:	addeq	r6, r6, #1
   24e88:	cmp	r7, r4
   24e8c:	beq	24f04 <p11_dict_direct_equal@@Base+0x170c>
   24e90:	ldrb	r5, [r4]
   24e94:	cmp	r5, #37	; 0x25
   24e98:	bne	24e68 <p11_dict_direct_equal@@Base+0x1670>
   24e9c:	add	r3, r4, #1
   24ea0:	rsb	r3, r3, r7
   24ea4:	cmp	r3, #1
   24ea8:	ble	24f30 <p11_dict_direct_equal@@Base+0x1738>
   24eac:	bl	124a4 <__ctype_tolower_loc@plt>
   24eb0:	ldrb	r3, [r4, #1]
   24eb4:	ldr	r5, [r0]
   24eb8:	mov	r0, r8
   24ebc:	ldr	r1, [r5, r3, lsl #2]
   24ec0:	bl	12558 <strchr@plt>
   24ec4:	ldrb	r2, [r4, #2]
   24ec8:	ldr	r1, [r5, r2, lsl #2]
   24ecc:	mov	fp, r0
   24ed0:	mov	r0, r8
   24ed4:	bl	12558 <strchr@plt>
   24ed8:	cmp	fp, #0
   24edc:	cmpne	r0, #0
   24ee0:	beq	24f30 <p11_dict_direct_equal@@Base+0x1738>
   24ee4:	add	r4, r4, #3
   24ee8:	rsb	r3, r8, fp
   24eec:	cmp	r7, r4
   24ef0:	rsb	r0, r8, r0
   24ef4:	orr	r3, r0, r3, lsl #4
   24ef8:	add	r6, r6, #1
   24efc:	strb	r3, [r6, #-1]
   24f00:	bne	24e90 <p11_dict_direct_equal@@Base+0x1698>
   24f04:	ldr	r3, [sp, #4]
   24f08:	cmp	r3, #0
   24f0c:	mov	r3, #0
   24f10:	strb	r3, [r6]
   24f14:	rsbne	r6, sl, r6
   24f18:	ldrne	r3, [sp, #4]
   24f1c:	movne	r0, sl
   24f20:	moveq	r0, sl
   24f24:	strne	r6, [r3]
   24f28:	add	sp, sp, #12
   24f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f30:	mov	r0, sl
   24f34:	bl	122c4 <free@plt>
   24f38:	mov	r0, #0
   24f3c:	add	sp, sp, #12
   24f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f44:	ldr	r2, [pc, #100]	; 24fb0 <p11_dict_direct_equal@@Base+0x17b8>
   24f48:	ldr	r0, [pc, #100]	; 24fb4 <p11_dict_direct_equal@@Base+0x17bc>
   24f4c:	ldr	r1, [pc, #100]	; 24fb8 <p11_dict_direct_equal@@Base+0x17c0>
   24f50:	add	r2, pc, r2
   24f54:	add	r0, pc, r0
   24f58:	add	r2, r2, #16
   24f5c:	add	r1, pc, r1
   24f60:	bl	22e10 <secure_getenv@@Base+0x7bc>
   24f64:	mov	r0, sl
   24f68:	b	24f28 <p11_dict_direct_equal@@Base+0x1730>
   24f6c:	ldr	r0, [pc, #72]	; 24fbc <p11_dict_direct_equal@@Base+0x17c4>
   24f70:	mov	r2, #59	; 0x3b
   24f74:	ldr	r1, [pc, #68]	; 24fc0 <p11_dict_direct_equal@@Base+0x17c8>
   24f78:	ldr	r3, [pc, #68]	; 24fc4 <p11_dict_direct_equal@@Base+0x17cc>
   24f7c:	add	r0, pc, r0
   24f80:	add	r1, pc, r1
   24f84:	add	r3, pc, r3
   24f88:	bl	12828 <__assert_fail@plt>
   24f8c:	ldr	r0, [pc, #52]	; 24fc8 <p11_dict_direct_equal@@Base+0x17d0>
   24f90:	mov	r2, #58	; 0x3a
   24f94:	ldr	r1, [pc, #48]	; 24fcc <p11_dict_direct_equal@@Base+0x17d4>
   24f98:	ldr	r3, [pc, #48]	; 24fd0 <p11_dict_direct_equal@@Base+0x17d8>
   24f9c:	add	r0, pc, r0
   24fa0:	add	r1, pc, r1
   24fa4:	add	r3, pc, r3
   24fa8:	bl	12828 <__assert_fail@plt>
   24fac:	ldrdeq	r9, [r0], -r8
   24fb0:	andeq	r9, r0, r4, ror #7
   24fb4:	andeq	r0, r0, r0, asr lr
   24fb8:	andeq	r9, r0, r0, asr r4
   24fbc:	andeq	r9, r0, ip, lsl r4
   24fc0:	andeq	r9, r0, r8, lsl #8
   24fc4:			; <UNDEFINED> instruction: 0x000093b0
   24fc8:	ldrdeq	r9, [r0], -ip
   24fcc:	andeq	r9, r0, r8, ror #7
   24fd0:	muleq	r0, r0, r3
   24fd4:	ldr	ip, [pc, #264]	; 250e4 <p11_dict_direct_equal@@Base+0x18ec>
   24fd8:	cmp	r0, r1
   24fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24fe0:	add	ip, pc, ip
   24fe4:	ldr	r4, [pc, #252]	; 250e8 <p11_dict_direct_equal@@Base+0x18f0>
   24fe8:	mov	r6, r3
   24fec:	mov	r3, ip
   24ff0:	sub	sp, sp, #20
   24ff4:	mov	r5, r1
   24ff8:	mov	r8, r2
   24ffc:	ldr	r4, [ip, r4]
   25000:	ldr	r3, [r4]
   25004:	str	r4, [sp, #4]
   25008:	str	r3, [sp, #12]
   2500c:	bhi	250bc <p11_dict_direct_equal@@Base+0x18c4>
   25010:	beq	250a0 <p11_dict_direct_equal@@Base+0x18a8>
   25014:	ldr	r7, [pc, #208]	; 250ec <p11_dict_direct_equal@@Base+0x18f4>
   25018:	add	sl, sp, #8
   2501c:	mov	r4, r0
   25020:	add	r7, pc, r7
   25024:	b	25054 <p11_dict_direct_equal@@Base+0x185c>
   25028:	mov	r0, r8
   2502c:	mov	r1, fp
   25030:	bl	12558 <strchr@plt>
   25034:	cmp	r0, #0
   25038:	beq	25064 <p11_dict_direct_equal@@Base+0x186c>
   2503c:	mov	r1, r9
   25040:	mov	r0, r6
   25044:	mov	r2, #1
   25048:	bl	2212c <__assert_fail@plt+0xf904>
   2504c:	cmp	r5, r4
   25050:	beq	250a0 <p11_dict_direct_equal@@Base+0x18a8>
   25054:	mov	r9, r4
   25058:	ldrb	fp, [r4], #1
   2505c:	cmp	fp, #0
   25060:	bne	25028 <p11_dict_direct_equal@@Base+0x1830>
   25064:	and	r2, fp, #15
   25068:	add	r3, r7, fp, lsr #4
   2506c:	add	r2, r7, r2
   25070:	mov	r0, r6
   25074:	ldrb	ip, [r3, #32]
   25078:	mov	r1, sl
   2507c:	ldrb	r3, [r2, #32]
   25080:	mov	r2, #3
   25084:	mov	lr, #37	; 0x25
   25088:	strb	lr, [sp, #8]
   2508c:	strb	ip, [sp, #9]
   25090:	strb	r3, [sp, #10]
   25094:	bl	2212c <__assert_fail@plt+0xf904>
   25098:	cmp	r5, r4
   2509c:	bne	25054 <p11_dict_direct_equal@@Base+0x185c>
   250a0:	ldr	r1, [sp, #4]
   250a4:	ldr	r2, [sp, #12]
   250a8:	ldr	r3, [r1]
   250ac:	cmp	r2, r3
   250b0:	bne	250e0 <p11_dict_direct_equal@@Base+0x18e8>
   250b4:	add	sp, sp, #20
   250b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250bc:	ldr	r3, [pc, #44]	; 250f0 <p11_dict_direct_equal@@Base+0x18f8>
   250c0:	mov	r2, #114	; 0x72
   250c4:	ldr	r0, [pc, #40]	; 250f4 <p11_dict_direct_equal@@Base+0x18fc>
   250c8:	ldr	r1, [pc, #40]	; 250f8 <p11_dict_direct_equal@@Base+0x1900>
   250cc:	add	r3, pc, r3
   250d0:	add	r0, pc, r0
   250d4:	add	r3, r3, #52	; 0x34
   250d8:	add	r1, pc, r1
   250dc:	bl	12828 <__assert_fail@plt>
   250e0:	bl	12360 <__stack_chk_fail@plt>
   250e4:	andeq	pc, r1, r8, lsl r0	; <UNPREDICTABLE>
   250e8:	andeq	r0, r0, r4, lsr #4
   250ec:	andeq	r9, r0, r4, lsl r3
   250f0:	andeq	r9, r0, r8, ror #4
   250f4:	andeq	r9, r0, r8, lsr #5
   250f8:			; <UNDEFINED> instruction: 0x000092b0
   250fc:	push	{r3, r4, r5, r6, r7, lr}
   25100:	mov	r7, r0
   25104:	bl	221a4 <__assert_fail@plt+0xf97c>
   25108:	ldr	r1, [pc, #152]	; 251a8 <p11_dict_direct_equal@@Base+0x19b0>
   2510c:	add	r4, r7, #12
   25110:	ldr	r6, [pc, #148]	; 251ac <p11_dict_direct_equal@@Base+0x19b4>
   25114:	add	r1, pc, r1
   25118:	add	r6, pc, r6
   2511c:	mov	r5, r0
   25120:	mov	r0, #1
   25124:	mov	r2, r5
   25128:	bl	12624 <__printf_chk@plt>
   2512c:	ldr	r1, [pc, #124]	; 251b0 <p11_dict_direct_equal@@Base+0x19b8>
   25130:	mov	r2, r5
   25134:	mov	r0, #1
   25138:	add	r1, pc, r1
   2513c:	bl	12624 <__printf_chk@plt>
   25140:	ldr	r2, [r7]
   25144:	mov	ip, r7
   25148:	cmp	r2, #0
   2514c:	bne	25164 <p11_dict_direct_equal@@Base+0x196c>
   25150:	b	25190 <p11_dict_direct_equal@@Base+0x1998>
   25154:	mov	ip, r4
   25158:	ldr	r2, [r4], #12
   2515c:	cmp	r2, #0
   25160:	beq	25190 <p11_dict_direct_equal@@Base+0x1998>
   25164:	ldrb	r3, [r2]
   25168:	cmp	r3, #0
   2516c:	beq	25154 <p11_dict_direct_equal@@Base+0x195c>
   25170:	ldr	r3, [ip, #8]
   25174:	mov	r0, #1
   25178:	mov	r1, r6
   2517c:	bl	12624 <__printf_chk@plt>
   25180:	mov	ip, r4
   25184:	ldr	r2, [r4], #12
   25188:	cmp	r2, #0
   2518c:	bne	25164 <p11_dict_direct_equal@@Base+0x196c>
   25190:	ldr	r1, [pc, #28]	; 251b4 <p11_dict_direct_equal@@Base+0x19bc>
   25194:	mov	r2, r5
   25198:	mov	r0, #1
   2519c:	add	r1, pc, r1
   251a0:	pop	{r3, r4, r5, r6, r7, lr}
   251a4:	b	12624 <__printf_chk@plt>
   251a8:	andeq	r9, r0, r8, asr #5
   251ac:	andeq	r9, r0, r4, lsr r3
   251b0:	andeq	r9, r0, r4, asr #5
   251b4:	andeq	r9, r0, ip, ror r2
   251b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251bc:	sub	sp, sp, #28
   251c0:	ldr	r4, [r0, #4]
   251c4:	mov	sl, r1
   251c8:	ldr	ip, [pc, #596]	; 25424 <p11_dict_direct_equal@@Base+0x1c2c>
   251cc:	cmp	r4, #0
   251d0:	add	ip, pc, ip
   251d4:	str	ip, [sp]
   251d8:	beq	253ac <p11_dict_direct_equal@@Base+0x1bb4>
   251dc:	ldr	ip, [pc, #580]	; 25428 <p11_dict_direct_equal@@Base+0x1c30>
   251e0:	add	r7, r0, #12
   251e4:	ldr	r6, [pc, #576]	; 2542c <p11_dict_direct_equal@@Base+0x1c34>
   251e8:	mov	r9, r0
   251ec:	add	ip, pc, ip
   251f0:	str	ip, [sp, #4]
   251f4:	ldr	ip, [pc, #564]	; 25430 <p11_dict_direct_equal@@Base+0x1c38>
   251f8:	add	r6, pc, r6
   251fc:	add	ip, pc, ip
   25200:	str	ip, [sp, #8]
   25204:	ldr	ip, [pc, #552]	; 25434 <p11_dict_direct_equal@@Base+0x1c3c>
   25208:	add	ip, pc, ip
   2520c:	str	ip, [sp, #12]
   25210:	ldr	ip, [pc, #544]	; 25438 <p11_dict_direct_equal@@Base+0x1c40>
   25214:	add	ip, pc, ip
   25218:	str	ip, [sp, #16]
   2521c:	ldr	ip, [pc, #536]	; 2543c <p11_dict_direct_equal@@Base+0x1c44>
   25220:	add	ip, pc, ip
   25224:	str	ip, [sp, #20]
   25228:	ldr	fp, [r9]
   2522c:	cmp	fp, #0
   25230:	beq	25388 <p11_dict_direct_equal@@Base+0x1b90>
   25234:	ldr	r5, [sl]
   25238:	cmp	r5, #0
   2523c:	beq	25410 <p11_dict_direct_equal@@Base+0x1c18>
   25240:	ldr	r3, [sl, #12]
   25244:	cmp	fp, r3
   25248:	beq	25418 <p11_dict_direct_equal@@Base+0x1c20>
   2524c:	add	r3, sl, #16
   25250:	b	25260 <p11_dict_direct_equal@@Base+0x1a68>
   25254:	ldr	r2, [r3, #-4]
   25258:	cmp	fp, r2
   2525c:	beq	25278 <p11_dict_direct_equal@@Base+0x1a80>
   25260:	mov	r5, r3
   25264:	add	r3, r3, #16
   25268:	ldr	r8, [r5]
   2526c:	cmp	r8, #0
   25270:	bne	25254 <p11_dict_direct_equal@@Base+0x1a5c>
   25274:	mov	r5, r8
   25278:	bl	124ec <__ctype_b_loc@plt>
   2527c:	lsl	r3, fp, #1
   25280:	ldr	r1, [r0]
   25284:	ldrh	r3, [r1, r3]
   25288:	ands	r3, r3, #3072	; 0xc00
   2528c:	beq	253c0 <p11_dict_direct_equal@@Base+0x1bc8>
   25290:	ands	r2, fp, #255	; 0xff
   25294:	moveq	r3, #0
   25298:	movne	r3, #1
   2529c:	cmp	r8, #0
   252a0:	moveq	r3, #0
   252a4:	andne	r3, r3, #1
   252a8:	cmp	r3, #0
   252ac:	bne	253e4 <p11_dict_direct_equal@@Base+0x1bec>
   252b0:	cmp	r8, #0
   252b4:	mov	r0, #1
   252b8:	beq	253d0 <p11_dict_direct_equal@@Base+0x1bd8>
   252bc:	ldr	r1, [pc, #380]	; 25440 <p11_dict_direct_equal@@Base+0x1c48>
   252c0:	mov	r2, r8
   252c4:	add	r1, pc, r1
   252c8:	bl	12624 <__printf_chk@plt>
   252cc:	mov	fp, r0
   252d0:	cmp	r5, #0
   252d4:	beq	25314 <p11_dict_direct_equal@@Base+0x1b1c>
   252d8:	ldr	r3, [r5, #4]
   252dc:	cmp	r3, #0
   252e0:	beq	25314 <p11_dict_direct_equal@@Base+0x1b1c>
   252e4:	ldr	ip, [sp, #20]
   252e8:	cmp	r8, #0
   252ec:	ldr	r2, [sp, #16]
   252f0:	mov	r0, #1
   252f4:	ldr	r3, [r9, #8]
   252f8:	ldr	r1, [sp, #8]
   252fc:	movne	r2, ip
   25300:	ldr	ip, [sp, #12]
   25304:	cmp	r3, #0
   25308:	moveq	r3, ip
   2530c:	bl	12624 <__printf_chk@plt>
   25310:	add	fp, fp, r0
   25314:	cmp	fp, #21
   25318:	rsble	r8, fp, #22
   2531c:	bgt	25400 <p11_dict_direct_equal@@Base+0x1c08>
   25320:	ldr	r3, [pc, #284]	; 25444 <p11_dict_direct_equal@@Base+0x1c4c>
   25324:	ldr	ip, [sp]
   25328:	ldr	r5, [ip, r3]
   2532c:	sub	r8, r8, #1
   25330:	sub	r8, r8, #1
   25334:	mov	r0, #32
   25338:	ldr	r1, [r5]
   2533c:	bl	12720 <fputc@plt>
   25340:	cmn	r8, #1
   25344:	bne	25330 <p11_dict_direct_equal@@Base+0x1b38>
   25348:	mov	r0, r4
   2534c:	mov	r1, #10
   25350:	bl	12558 <strchr@plt>
   25354:	cmp	r0, #0
   25358:	beq	253b4 <p11_dict_direct_equal@@Base+0x1bbc>
   2535c:	add	r8, r0, #1
   25360:	mov	r3, r4
   25364:	rsb	r2, r4, r8
   25368:	mov	r0, #1
   2536c:	mov	r1, r6
   25370:	bl	12624 <__printf_chk@plt>
   25374:	cmp	r8, #0
   25378:	beq	25398 <p11_dict_direct_equal@@Base+0x1ba0>
   2537c:	mov	r4, r8
   25380:	mov	r8, #22
   25384:	b	2532c <p11_dict_direct_equal@@Base+0x1b34>
   25388:	mov	r2, r4
   2538c:	mov	r0, #1
   25390:	ldr	r1, [sp, #4]
   25394:	bl	12624 <__printf_chk@plt>
   25398:	mov	r9, r7
   2539c:	add	r7, r7, #12
   253a0:	ldr	r4, [r7, #-8]
   253a4:	cmp	r4, #0
   253a8:	bne	25228 <p11_dict_direct_equal@@Base+0x1a30>
   253ac:	add	sp, sp, #28
   253b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253b4:	mov	r0, r4
   253b8:	bl	12450 <puts@plt>
   253bc:	b	25398 <p11_dict_direct_equal@@Base+0x1ba0>
   253c0:	cmp	r8, #0
   253c4:	mov	r2, r3
   253c8:	mov	r0, #1
   253cc:	bne	252bc <p11_dict_direct_equal@@Base+0x1ac4>
   253d0:	ldr	r1, [pc, #112]	; 25448 <p11_dict_direct_equal@@Base+0x1c50>
   253d4:	add	r1, pc, r1
   253d8:	bl	12624 <__printf_chk@plt>
   253dc:	mov	fp, r0
   253e0:	b	252d0 <p11_dict_direct_equal@@Base+0x1ad8>
   253e4:	ldr	r1, [pc, #96]	; 2544c <p11_dict_direct_equal@@Base+0x1c54>
   253e8:	mov	r0, #1
   253ec:	mov	r3, r8
   253f0:	add	r1, pc, r1
   253f4:	bl	12624 <__printf_chk@plt>
   253f8:	mov	fp, r0
   253fc:	b	252d0 <p11_dict_direct_equal@@Base+0x1ad8>
   25400:	mov	r0, #10
   25404:	mov	r8, #22
   25408:	bl	12600 <putchar@plt>
   2540c:	b	25320 <p11_dict_direct_equal@@Base+0x1b28>
   25410:	mov	r8, r5
   25414:	b	25278 <p11_dict_direct_equal@@Base+0x1a80>
   25418:	mov	r8, r5
   2541c:	mov	r5, sl
   25420:	b	25278 <p11_dict_direct_equal@@Base+0x1a80>
   25424:	andeq	lr, r1, r8, lsr #28
   25428:	andeq	r9, r0, r4, ror r2
   2542c:	muleq	r0, r4, r2
   25430:	andeq	r9, r0, r8, lsl #5
   25434:	andeq	r4, r0, r4, asr ip
   25438:	andeq	r8, r0, r4, lsl #24
   2543c:	andeq	r9, r0, ip, lsr r2
   25440:			; <UNDEFINED> instruction: 0x000091b0
   25444:	andeq	r0, r0, r8, asr r2
   25448:	andeq	r9, r0, r8, lsr #1
   2544c:	andeq	r9, r0, r8, ror r0
   25450:	ldr	r3, [pc, #380]	; 255d4 <p11_dict_direct_equal@@Base+0x1ddc>
   25454:	ldr	ip, [pc, #380]	; 255d8 <p11_dict_direct_equal@@Base+0x1de0>
   25458:	add	r3, pc, r3
   2545c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25460:	sub	sp, sp, #52	; 0x34
   25464:	ldr	ip, [r3, ip]
   25468:	add	r5, sp, #20
   2546c:	mov	r9, r0
   25470:	mov	sl, r1
   25474:	mov	r0, r5
   25478:	mov	r1, #64	; 0x40
   2547c:	ldr	r3, [ip]
   25480:	mov	r7, r2
   25484:	str	ip, [sp, #8]
   25488:	str	r3, [sp, #44]	; 0x2c
   2548c:	bl	21e68 <__assert_fail@plt+0xf640>
   25490:	cmp	r0, #0
   25494:	beq	25590 <p11_dict_direct_equal@@Base+0x1d98>
   25498:	ldr	r3, [r7]
   2549c:	cmp	r3, #0
   254a0:	beq	25514 <p11_dict_direct_equal@@Base+0x1d1c>
   254a4:	ldr	r3, [pc, #304]	; 255dc <p11_dict_direct_equal@@Base+0x1de4>
   254a8:	add	r4, r7, #16
   254ac:	add	r6, sp, #19
   254b0:	mov	r8, r7
   254b4:	add	r3, pc, r3
   254b8:	str	r3, [sp, #12]
   254bc:	bl	124ec <__ctype_b_loc@plt>
   254c0:	mov	fp, r0
   254c4:	b	254e8 <p11_dict_direct_equal@@Base+0x1cf0>
   254c8:	uxtb	r1, r1
   254cc:	strb	r1, [sp, #19]
   254d0:	cmp	r1, #0
   254d4:	bne	2555c <p11_dict_direct_equal@@Base+0x1d64>
   254d8:	mov	r8, r4
   254dc:	ldr	r2, [r4], #16
   254e0:	cmp	r2, #0
   254e4:	beq	25514 <p11_dict_direct_equal@@Base+0x1d1c>
   254e8:	ldr	r1, [r8, #12]
   254ec:	ldr	r0, [fp]
   254f0:	lsl	r2, r1, #1
   254f4:	ldrh	r2, [r0, r2]
   254f8:	ands	r2, r2, #3072	; 0xc00
   254fc:	bne	254c8 <p11_dict_direct_equal@@Base+0x1cd0>
   25500:	strb	r2, [sp, #19]
   25504:	mov	r8, r4
   25508:	ldr	r2, [r4], #16
   2550c:	cmp	r2, #0
   25510:	bne	254e8 <p11_dict_direct_equal@@Base+0x1cf0>
   25514:	mov	ip, #0
   25518:	ldr	r2, [sp, #20]
   2551c:	mov	r1, sl
   25520:	mov	r3, r7
   25524:	str	ip, [sp]
   25528:	mov	r0, r9
   2552c:	bl	124e0 <getopt_long@plt>
   25530:	mov	r4, r0
   25534:	mov	r0, r5
   25538:	bl	21ec8 <__assert_fail@plt+0xf6a0>
   2553c:	mov	r0, r4
   25540:	ldr	r1, [sp, #8]
   25544:	ldr	r2, [sp, #44]	; 0x2c
   25548:	ldr	r3, [r1]
   2554c:	cmp	r2, r3
   25550:	bne	255d0 <p11_dict_direct_equal@@Base+0x1dd8>
   25554:	add	sp, sp, #52	; 0x34
   25558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2555c:	mov	r2, #1
   25560:	mov	r0, r5
   25564:	mov	r1, r6
   25568:	bl	2212c <__assert_fail@plt+0xf904>
   2556c:	ldr	r2, [r8, #4]
   25570:	cmp	r2, #2
   25574:	beq	255ac <p11_dict_direct_equal@@Base+0x1db4>
   25578:	cmp	r2, #1
   2557c:	bne	254d8 <p11_dict_direct_equal@@Base+0x1ce0>
   25580:	mov	r0, r5
   25584:	ldr	r1, [sp, #12]
   25588:	bl	2212c <__assert_fail@plt+0xf904>
   2558c:	b	254d8 <p11_dict_direct_equal@@Base+0x1ce0>
   25590:	ldr	r0, [pc, #72]	; 255e0 <p11_dict_direct_equal@@Base+0x1de8>
   25594:	ldr	r1, [pc, #72]	; 255e4 <p11_dict_direct_equal@@Base+0x1dec>
   25598:	add	r0, pc, r0
   2559c:	add	r1, pc, r1
   255a0:	bl	22e10 <secure_getenv@@Base+0x7bc>
   255a4:	mvn	r0, #0
   255a8:	b	25540 <p11_dict_direct_equal@@Base+0x1d48>
   255ac:	ldr	r3, [pc, #52]	; 255e8 <p11_dict_direct_equal@@Base+0x1df0>
   255b0:	mov	r2, #153	; 0x99
   255b4:	ldr	r0, [pc, #48]	; 255ec <p11_dict_direct_equal@@Base+0x1df4>
   255b8:	ldr	r1, [pc, #48]	; 255f0 <p11_dict_direct_equal@@Base+0x1df8>
   255bc:	add	r3, pc, r3
   255c0:	add	r0, pc, r0
   255c4:	add	r3, r3, #16
   255c8:	add	r1, pc, r1
   255cc:	bl	12828 <__assert_fail@plt>
   255d0:	bl	12360 <__stack_chk_fail@plt>
   255d4:	andeq	lr, r1, r0, lsr #23
   255d8:	andeq	r0, r0, r4, lsr #4
   255dc:	andeq	r9, r0, ip
   255e0:			; <UNDEFINED> instruction: 0x000009b0
   255e4:	andeq	r8, r0, r0, lsr #28
   255e8:	andeq	r8, r0, r0, lsl #28
   255ec:	ldrdeq	r8, [r0], -r4
   255f0:	andeq	r8, r0, r8, ror #29
   255f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255f8:	cmp	r0, #1
   255fc:	sub	sp, sp, #52	; 0x34
   25600:	mov	r7, r0
   25604:	mov	r8, r1
   25608:	str	r2, [sp, #28]
   2560c:	ble	259b0 <p11_dict_direct_equal@@Base+0x21b8>
   25610:	ldr	r3, [pc, #948]	; 259cc <p11_dict_direct_equal@@Base+0x21d4>
   25614:	mov	r4, #1
   25618:	ldr	r2, [pc, #944]	; 259d0 <p11_dict_direct_equal@@Base+0x21d8>
   2561c:	add	fp, r1, #4
   25620:	add	r3, pc, r3
   25624:	str	r3, [sp, #32]
   25628:	ldr	r3, [pc, #932]	; 259d4 <p11_dict_direct_equal@@Base+0x21dc>
   2562c:	add	r2, pc, r2
   25630:	str	r2, [sp, #24]
   25634:	mov	r2, #0
   25638:	add	r3, pc, r3
   2563c:	str	r3, [sp, #36]	; 0x24
   25640:	ldr	r3, [pc, #912]	; 259d8 <p11_dict_direct_equal@@Base+0x21e0>
   25644:	mov	r5, r4
   25648:	mov	r6, r2
   2564c:	add	r3, pc, r3
   25650:	str	r3, [sp, #44]	; 0x2c
   25654:	ldr	r3, [pc, #896]	; 259dc <p11_dict_direct_equal@@Base+0x21e4>
   25658:	add	r3, pc, r3
   2565c:	str	r3, [sp, #40]	; 0x28
   25660:	ldr	r3, [pc, #888]	; 259e0 <p11_dict_direct_equal@@Base+0x21e8>
   25664:	add	r3, pc, r3
   25668:	str	r3, [sp, #20]
   2566c:	b	25690 <p11_dict_direct_equal@@Base+0x1e98>
   25670:	cmp	r6, #0
   25674:	beq	257bc <p11_dict_direct_equal@@Base+0x1fc4>
   25678:	mov	r0, r9
   2567c:	add	r5, r5, #1
   25680:	str	r0, [r8, r4, lsl #2]
   25684:	cmp	r5, r7
   25688:	add	r4, r4, #1
   2568c:	beq	257d4 <p11_dict_direct_equal@@Base+0x1fdc>
   25690:	ldr	r9, [fp], #4
   25694:	ldrb	r3, [r9]
   25698:	cmp	r3, #45	; 0x2d
   2569c:	bne	25670 <p11_dict_direct_equal@@Base+0x1e78>
   256a0:	ldrb	r1, [r9, #1]
   256a4:	cmp	r1, #45	; 0x2d
   256a8:	beq	25874 <p11_dict_direct_equal@@Base+0x207c>
   256ac:	cmp	r1, #0
   256b0:	beq	25678 <p11_dict_direct_equal@@Base+0x1e80>
   256b4:	ldr	r3, [pc, #808]	; 259e4 <p11_dict_direct_equal@@Base+0x21ec>
   256b8:	mov	r9, #1
   256bc:	ldr	sl, [pc, #804]	; 259e8 <p11_dict_direct_equal@@Base+0x21f0>
   256c0:	add	r3, pc, r3
   256c4:	str	r5, [sp, #8]
   256c8:	mov	r5, r9
   256cc:	ldr	r9, [sp, #20]
   256d0:	add	sl, pc, sl
   256d4:	str	r4, [sp, #12]
   256d8:	str	r7, [sp, #16]
   256dc:	mov	r4, r3
   256e0:	mov	r7, fp
   256e4:	mov	fp, r8
   256e8:	mov	r8, r2
   256ec:	sub	r3, r1, #104	; 0x68
   256f0:	cmp	r3, #14
   256f4:	addls	pc, pc, r3, lsl #2
   256f8:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   256fc:	b	2576c <p11_dict_direct_equal@@Base+0x1f74>
   25700:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   25704:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   25708:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   2570c:	b	25738 <p11_dict_direct_equal@@Base+0x1f40>
   25710:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   25714:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   25718:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   2571c:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   25720:	b	25788 <p11_dict_direct_equal@@Base+0x1f90>
   25724:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   25728:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   2572c:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   25730:	b	2579c <p11_dict_direct_equal@@Base+0x1fa4>
   25734:	b	25774 <p11_dict_direct_equal@@Base+0x1f7c>
   25738:	mov	r6, r9
   2573c:	ldr	r0, [r7, #-4]
   25740:	add	r5, r5, #1
   25744:	ldrb	r1, [r0, r5]
   25748:	cmp	r1, #0
   2574c:	bne	256ec <p11_dict_direct_equal@@Base+0x1ef4>
   25750:	mov	r2, r8
   25754:	ldr	r5, [sp, #8]
   25758:	mov	r8, fp
   2575c:	ldr	r4, [sp, #12]
   25760:	mov	fp, r7
   25764:	ldr	r7, [sp, #16]
   25768:	b	2567c <p11_dict_direct_equal@@Base+0x1e84>
   2576c:	mov	r8, #1
   25770:	b	2573c <p11_dict_direct_equal@@Base+0x1f44>
   25774:	mov	r0, r4
   25778:	bl	126d8 <putenv@plt>
   2577c:	bl	24304 <p11_dict_direct_equal@@Base+0xb0c>
   25780:	bl	22ae4 <secure_getenv@@Base+0x490>
   25784:	b	2573c <p11_dict_direct_equal@@Base+0x1f44>
   25788:	mov	r0, sl
   2578c:	bl	126d8 <putenv@plt>
   25790:	bl	242ec <p11_dict_direct_equal@@Base+0xaf4>
   25794:	bl	22ae4 <secure_getenv@@Base+0x490>
   25798:	b	2573c <p11_dict_direct_equal@@Base+0x1f44>
   2579c:	cmp	r6, #0
   257a0:	bne	2573c <p11_dict_direct_equal@@Base+0x1f44>
   257a4:	ldr	r0, [pc, #576]	; 259ec <p11_dict_direct_equal@@Base+0x21f4>
   257a8:	add	r0, pc, r0
   257ac:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   257b0:	mov	r0, #2
   257b4:	add	sp, sp, #52	; 0x34
   257b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   257bc:	add	r5, r5, #1
   257c0:	sub	r4, r4, #1
   257c4:	cmp	r5, r7
   257c8:	mov	r6, r9
   257cc:	add	r4, r4, #1
   257d0:	bne	25690 <p11_dict_direct_equal@@Base+0x1e98>
   257d4:	str	r2, [sp, #4]
   257d8:	bl	22ae4 <secure_getenv@@Base+0x490>
   257dc:	cmp	r6, #0
   257e0:	ldr	r2, [sp, #4]
   257e4:	beq	25974 <p11_dict_direct_equal@@Base+0x217c>
   257e8:	ldr	r2, [sp, #28]
   257ec:	ldr	r3, [r2]
   257f0:	cmp	r3, #0
   257f4:	beq	25934 <p11_dict_direct_equal@@Base+0x213c>
   257f8:	ldr	r2, [sp, #28]
   257fc:	mov	r7, #0
   25800:	add	r5, r2, #12
   25804:	mov	r9, r2
   25808:	b	25828 <p11_dict_direct_equal@@Base+0x2030>
   2580c:	bl	1227c <strcmp@plt>
   25810:	cmp	r0, #0
   25814:	beq	25954 <p11_dict_direct_equal@@Base+0x215c>
   25818:	mov	r9, r5
   2581c:	ldr	r3, [r5], #12
   25820:	cmp	r3, #0
   25824:	beq	25850 <p11_dict_direct_equal@@Base+0x2058>
   25828:	mov	r0, r3
   2582c:	ldrb	r3, [r3]
   25830:	mov	r1, r6
   25834:	cmp	r3, #0
   25838:	bne	2580c <p11_dict_direct_equal@@Base+0x2014>
   2583c:	mov	r7, r9
   25840:	mov	r9, r5
   25844:	ldr	r3, [r5], #12
   25848:	cmp	r3, #0
   2584c:	bne	25828 <p11_dict_direct_equal@@Base+0x2030>
   25850:	cmp	r7, #0
   25854:	beq	25934 <p11_dict_direct_equal@@Base+0x213c>
   25858:	str	r6, [r8]
   2585c:	mov	r0, r4
   25860:	ldr	r3, [r7, #4]
   25864:	mov	r1, r8
   25868:	blx	r3
   2586c:	add	sp, sp, #52	; 0x34
   25870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25874:	ldrb	r3, [r9, #2]
   25878:	cmp	r3, #0
   2587c:	beq	259a0 <p11_dict_direct_equal@@Base+0x21a8>
   25880:	mov	r0, r9
   25884:	ldr	r1, [sp, #24]
   25888:	str	r2, [sp, #4]
   2588c:	bl	1227c <strcmp@plt>
   25890:	ldr	r2, [sp, #4]
   25894:	cmp	r0, #0
   25898:	beq	258fc <p11_dict_direct_equal@@Base+0x2104>
   2589c:	mov	r0, r9
   258a0:	ldr	r1, [sp, #32]
   258a4:	str	r2, [sp, #4]
   258a8:	bl	1227c <strcmp@plt>
   258ac:	ldr	r2, [sp, #4]
   258b0:	cmp	r0, #0
   258b4:	beq	25918 <p11_dict_direct_equal@@Base+0x2120>
   258b8:	mov	r0, r9
   258bc:	ldr	r1, [sp, #36]	; 0x24
   258c0:	str	r2, [sp, #4]
   258c4:	bl	1227c <strcmp@plt>
   258c8:	ldr	r2, [sp, #4]
   258cc:	cmp	r0, #0
   258d0:	moveq	r0, r9
   258d4:	moveq	r2, #1
   258d8:	beq	2567c <p11_dict_direct_equal@@Base+0x1e84>
   258dc:	cmp	r6, #0
   258e0:	bne	25678 <p11_dict_direct_equal@@Base+0x1e80>
   258e4:	ldr	r0, [pc, #260]	; 259f0 <p11_dict_direct_equal@@Base+0x21f8>
   258e8:	mov	r1, r9
   258ec:	add	r0, pc, r0
   258f0:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   258f4:	mov	r0, #2
   258f8:	b	257b4 <p11_dict_direct_equal@@Base+0x1fbc>
   258fc:	ldr	r0, [sp, #40]	; 0x28
   25900:	bl	126d8 <putenv@plt>
   25904:	bl	24304 <p11_dict_direct_equal@@Base+0xb0c>
   25908:	bl	22ae4 <secure_getenv@@Base+0x490>
   2590c:	ldr	r0, [fp, #-4]
   25910:	ldr	r2, [sp, #4]
   25914:	b	2567c <p11_dict_direct_equal@@Base+0x1e84>
   25918:	ldr	r0, [sp, #44]	; 0x2c
   2591c:	bl	126d8 <putenv@plt>
   25920:	bl	242ec <p11_dict_direct_equal@@Base+0xaf4>
   25924:	bl	22ae4 <secure_getenv@@Base+0x490>
   25928:	ldr	r0, [fp, #-4]
   2592c:	ldr	r2, [sp, #4]
   25930:	b	2567c <p11_dict_direct_equal@@Base+0x1e84>
   25934:	bl	221a4 <__assert_fail@plt+0xf97c>
   25938:	mov	r1, r6
   2593c:	mov	r2, r0
   25940:	ldr	r0, [pc, #172]	; 259f4 <p11_dict_direct_equal@@Base+0x21fc>
   25944:	add	r0, pc, r0
   25948:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   2594c:	mov	r0, #2
   25950:	b	257b4 <p11_dict_direct_equal@@Base+0x1fbc>
   25954:	str	r6, [r8]
   25958:	mov	r0, r4
   2595c:	str	r9, [sp, #28]
   25960:	mov	r1, r8
   25964:	ldr	r3, [r9, #4]
   25968:	blx	r3
   2596c:	add	sp, sp, #52	; 0x34
   25970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25974:	cmp	r2, #0
   25978:	bne	25990 <p11_dict_direct_equal@@Base+0x2198>
   2597c:	ldr	r0, [pc, #116]	; 259f8 <p11_dict_direct_equal@@Base+0x2200>
   25980:	add	r0, pc, r0
   25984:	bl	24100 <p11_dict_direct_equal@@Base+0x908>
   25988:	mov	r0, #2
   2598c:	b	257b4 <p11_dict_direct_equal@@Base+0x1fbc>
   25990:	ldr	r0, [sp, #28]
   25994:	bl	250fc <p11_dict_direct_equal@@Base+0x1904>
   25998:	mov	r0, r6
   2599c:	b	257b4 <p11_dict_direct_equal@@Base+0x1fbc>
   259a0:	cmp	r6, #0
   259a4:	beq	2597c <p11_dict_direct_equal@@Base+0x2184>
   259a8:	bl	22ae4 <secure_getenv@@Base+0x490>
   259ac:	b	257e8 <p11_dict_direct_equal@@Base+0x1ff0>
   259b0:	bl	22ae4 <secure_getenv@@Base+0x490>
   259b4:	cmp	r7, #1
   259b8:	bne	2597c <p11_dict_direct_equal@@Base+0x2184>
   259bc:	ldr	r0, [sp, #28]
   259c0:	bl	250fc <p11_dict_direct_equal@@Base+0x1904>
   259c4:	mov	r0, #2
   259c8:	b	257b4 <p11_dict_direct_equal@@Base+0x1fbc>
   259cc:	andeq	r8, r0, ip, ror #29
   259d0:	andeq	r8, r0, r0, asr #29
   259d4:	andeq	r8, r0, ip, ror #29
   259d8:	andeq	r8, r0, r8, asr #29
   259dc:	andeq	r8, r0, r0, lsr #29
   259e0:	andeq	r8, r0, r0, ror #28
   259e4:	andeq	r8, r0, r8, lsr lr
   259e8:	andeq	r8, r0, r4, asr #28
   259ec:	andeq	r8, r0, r0, lsr #27
   259f0:	andeq	r8, r0, r0, asr #24
   259f4:	andeq	r8, r0, r0, lsr #24
   259f8:	andeq	r8, r0, r4, asr fp
   259fc:	subs	r2, r1, #1
   25a00:	bxeq	lr
   25a04:	bcc	25bdc <p11_dict_direct_equal@@Base+0x23e4>
   25a08:	cmp	r0, r1
   25a0c:	bls	25bc0 <p11_dict_direct_equal@@Base+0x23c8>
   25a10:	tst	r1, r2
   25a14:	beq	25bcc <p11_dict_direct_equal@@Base+0x23d4>
   25a18:	clz	r3, r0
   25a1c:	clz	r2, r1
   25a20:	sub	r3, r2, r3
   25a24:	rsbs	r3, r3, #31
   25a28:	addne	r3, r3, r3, lsl #1
   25a2c:	mov	r2, #0
   25a30:	addne	pc, pc, r3, lsl #2
   25a34:	nop	{0}
   25a38:	cmp	r0, r1, lsl #31
   25a3c:	adc	r2, r2, r2
   25a40:	subcs	r0, r0, r1, lsl #31
   25a44:	cmp	r0, r1, lsl #30
   25a48:	adc	r2, r2, r2
   25a4c:	subcs	r0, r0, r1, lsl #30
   25a50:	cmp	r0, r1, lsl #29
   25a54:	adc	r2, r2, r2
   25a58:	subcs	r0, r0, r1, lsl #29
   25a5c:	cmp	r0, r1, lsl #28
   25a60:	adc	r2, r2, r2
   25a64:	subcs	r0, r0, r1, lsl #28
   25a68:	cmp	r0, r1, lsl #27
   25a6c:	adc	r2, r2, r2
   25a70:	subcs	r0, r0, r1, lsl #27
   25a74:	cmp	r0, r1, lsl #26
   25a78:	adc	r2, r2, r2
   25a7c:	subcs	r0, r0, r1, lsl #26
   25a80:	cmp	r0, r1, lsl #25
   25a84:	adc	r2, r2, r2
   25a88:	subcs	r0, r0, r1, lsl #25
   25a8c:	cmp	r0, r1, lsl #24
   25a90:	adc	r2, r2, r2
   25a94:	subcs	r0, r0, r1, lsl #24
   25a98:	cmp	r0, r1, lsl #23
   25a9c:	adc	r2, r2, r2
   25aa0:	subcs	r0, r0, r1, lsl #23
   25aa4:	cmp	r0, r1, lsl #22
   25aa8:	adc	r2, r2, r2
   25aac:	subcs	r0, r0, r1, lsl #22
   25ab0:	cmp	r0, r1, lsl #21
   25ab4:	adc	r2, r2, r2
   25ab8:	subcs	r0, r0, r1, lsl #21
   25abc:	cmp	r0, r1, lsl #20
   25ac0:	adc	r2, r2, r2
   25ac4:	subcs	r0, r0, r1, lsl #20
   25ac8:	cmp	r0, r1, lsl #19
   25acc:	adc	r2, r2, r2
   25ad0:	subcs	r0, r0, r1, lsl #19
   25ad4:	cmp	r0, r1, lsl #18
   25ad8:	adc	r2, r2, r2
   25adc:	subcs	r0, r0, r1, lsl #18
   25ae0:	cmp	r0, r1, lsl #17
   25ae4:	adc	r2, r2, r2
   25ae8:	subcs	r0, r0, r1, lsl #17
   25aec:	cmp	r0, r1, lsl #16
   25af0:	adc	r2, r2, r2
   25af4:	subcs	r0, r0, r1, lsl #16
   25af8:	cmp	r0, r1, lsl #15
   25afc:	adc	r2, r2, r2
   25b00:	subcs	r0, r0, r1, lsl #15
   25b04:	cmp	r0, r1, lsl #14
   25b08:	adc	r2, r2, r2
   25b0c:	subcs	r0, r0, r1, lsl #14
   25b10:	cmp	r0, r1, lsl #13
   25b14:	adc	r2, r2, r2
   25b18:	subcs	r0, r0, r1, lsl #13
   25b1c:	cmp	r0, r1, lsl #12
   25b20:	adc	r2, r2, r2
   25b24:	subcs	r0, r0, r1, lsl #12
   25b28:	cmp	r0, r1, lsl #11
   25b2c:	adc	r2, r2, r2
   25b30:	subcs	r0, r0, r1, lsl #11
   25b34:	cmp	r0, r1, lsl #10
   25b38:	adc	r2, r2, r2
   25b3c:	subcs	r0, r0, r1, lsl #10
   25b40:	cmp	r0, r1, lsl #9
   25b44:	adc	r2, r2, r2
   25b48:	subcs	r0, r0, r1, lsl #9
   25b4c:	cmp	r0, r1, lsl #8
   25b50:	adc	r2, r2, r2
   25b54:	subcs	r0, r0, r1, lsl #8
   25b58:	cmp	r0, r1, lsl #7
   25b5c:	adc	r2, r2, r2
   25b60:	subcs	r0, r0, r1, lsl #7
   25b64:	cmp	r0, r1, lsl #6
   25b68:	adc	r2, r2, r2
   25b6c:	subcs	r0, r0, r1, lsl #6
   25b70:	cmp	r0, r1, lsl #5
   25b74:	adc	r2, r2, r2
   25b78:	subcs	r0, r0, r1, lsl #5
   25b7c:	cmp	r0, r1, lsl #4
   25b80:	adc	r2, r2, r2
   25b84:	subcs	r0, r0, r1, lsl #4
   25b88:	cmp	r0, r1, lsl #3
   25b8c:	adc	r2, r2, r2
   25b90:	subcs	r0, r0, r1, lsl #3
   25b94:	cmp	r0, r1, lsl #2
   25b98:	adc	r2, r2, r2
   25b9c:	subcs	r0, r0, r1, lsl #2
   25ba0:	cmp	r0, r1, lsl #1
   25ba4:	adc	r2, r2, r2
   25ba8:	subcs	r0, r0, r1, lsl #1
   25bac:	cmp	r0, r1
   25bb0:	adc	r2, r2, r2
   25bb4:	subcs	r0, r0, r1
   25bb8:	mov	r0, r2
   25bbc:	bx	lr
   25bc0:	moveq	r0, #1
   25bc4:	movne	r0, #0
   25bc8:	bx	lr
   25bcc:	clz	r2, r1
   25bd0:	rsb	r2, r2, #31
   25bd4:	lsr	r0, r0, r2
   25bd8:	bx	lr
   25bdc:	cmp	r0, #0
   25be0:	mvnne	r0, #0
   25be4:	b	25c08 <p11_dict_direct_equal@@Base+0x2410>
   25be8:	cmp	r1, #0
   25bec:	beq	25bdc <p11_dict_direct_equal@@Base+0x23e4>
   25bf0:	push	{r0, r1, lr}
   25bf4:	bl	259fc <p11_dict_direct_equal@@Base+0x2204>
   25bf8:	pop	{r1, r2, lr}
   25bfc:	mul	r3, r2, r0
   25c00:	sub	r1, r1, r3
   25c04:	bx	lr
   25c08:	push	{r1, lr}
   25c0c:	mov	r0, #8
   25c10:	bl	1224c <raise@plt>
   25c14:	pop	{r1, pc}
   25c18:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   25c1c:	mov	r7, r0
   25c20:	ldr	r6, [pc, #76]	; 25c74 <p11_dict_direct_equal@@Base+0x247c>
   25c24:	mov	r8, r1
   25c28:	ldr	r5, [pc, #72]	; 25c78 <p11_dict_direct_equal@@Base+0x2480>
   25c2c:	mov	r9, r2
   25c30:	add	r6, pc, r6
   25c34:	bl	121fc <_init@@Base>
   25c38:	add	r5, pc, r5
   25c3c:	rsb	r6, r5, r6
   25c40:	asrs	r6, r6, #2
   25c44:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   25c48:	sub	r5, r5, #4
   25c4c:	mov	r4, #0
   25c50:	add	r4, r4, #1
   25c54:	ldr	r3, [r5, #4]!
   25c58:	mov	r0, r7
   25c5c:	mov	r1, r8
   25c60:	mov	r2, r9
   25c64:	blx	r3
   25c68:	cmp	r4, r6
   25c6c:	bne	25c50 <p11_dict_direct_equal@@Base+0x2458>
   25c70:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   25c74:	andeq	sl, r1, r8, lsr #32
   25c78:	andeq	sl, r1, ip, lsl r0
   25c7c:	bx	lr

Disassembly of section .fini:

00025c80 <_fini@@Base>:
   25c80:	push	{r3, lr}
   25c84:	pop	{r3, pc}
