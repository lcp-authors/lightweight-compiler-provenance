
centos-preinstalled/shred:     file format elf32-littlearm


Disassembly of section .init:

00011394 <.init>:
   11394:	push	{r3, lr}
   11398:	bl	12238 <__assert_fail@plt+0xaac>
   1139c:	pop	{r3, pc}

Disassembly of section .plt:

000113a0 <fdopen@plt-0x14>:
   113a0:	push	{lr}		; (str lr, [sp, #-4]!)
   113a4:	ldr	lr, [pc, #4]	; 113b0 <fdopen@plt-0x4>
   113a8:	add	lr, pc, lr
   113ac:	ldr	pc, [lr, #8]!
   113b0:	andeq	sl, r1, r0, asr ip

000113b4 <fdopen@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3152]!	; 0xc50

000113c0 <calloc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3144]!	; 0xc48

000113cc <fputs_unlocked@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3136]!	; 0xc40

000113d8 <raise@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3128]!	; 0xc38

000113e4 <fsync@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3120]!	; 0xc30

000113f0 <strcmp@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3112]!	; 0xc28

000113fc <__read_chk@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3104]!	; 0xc20

00011408 <fflush@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3096]!	; 0xc18

00011414 <getuid@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3088]!	; 0xc10

00011420 <memmove@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3080]!	; 0xc08

0001142c <free@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3072]!	; 0xc00

00011438 <_exit@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3064]!	; 0xbf8

00011444 <memcpy@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011450 <__strtoull_internal@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3048]!	; 0xbe8

0001145c <mbsinit@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3040]!	; 0xbe0

00011468 <time@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3032]!	; 0xbd8

00011474 <ftruncate64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011480 <memcmp@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3016]!	; 0xbc8

0001148c <dcgettext@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3008]!	; 0xbc0

00011498 <__stack_chk_fail@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3000]!	; 0xbb8

000114a4 <unlink@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #2992]!	; 0xbb0

000114b0 <realloc@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #2984]!	; 0xba8

000114bc <textdomain@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #2976]!	; 0xba0

000114c8 <iswprint@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #2968]!	; 0xb98

000114d4 <__fxstat64@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #2960]!	; 0xb90

000114e0 <__memcpy_chk@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #2952]!	; 0xb88

000114ec <fwrite@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #2944]!	; 0xb80

000114f8 <lseek64@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2936]!	; 0xb78

00011504 <__ctype_get_mb_cur_max@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2928]!	; 0xb70

00011510 <strcpy@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2920]!	; 0xb68

0001151c <gettimeofday@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2912]!	; 0xb60

00011528 <__strcpy_chk@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2904]!	; 0xb58

00011534 <__fpending@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2896]!	; 0xb50

00011540 <mbrtowc@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2888]!	; 0xb48

0001154c <error@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2880]!	; 0xb40

00011558 <open64@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2872]!	; 0xb38

00011564 <getenv@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2864]!	; 0xb30

00011570 <malloc@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2856]!	; 0xb28

0001157c <__libc_start_main@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2848]!	; 0xb20

00011588 <__freading@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2840]!	; 0xb18

00011594 <__gmon_start__@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2832]!	; 0xb10

000115a0 <rename@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2824]!	; 0xb08

000115ac <getopt_long@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2816]!	; 0xb00

000115b8 <__ctype_b_loc@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2808]!	; 0xaf8

000115c4 <getpid@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2800]!	; 0xaf0

000115d0 <exit@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2792]!	; 0xae8

000115dc <strlen@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2784]!	; 0xae0

000115e8 <strchr@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2776]!	; 0xad8

000115f4 <getpagesize@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2768]!	; 0xad0

00011600 <ungetc@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2760]!	; 0xac8

0001160c <fcntl@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2752]!	; 0xac0

00011618 <__errno_location@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2744]!	; 0xab8

00011624 <__sprintf_chk@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2736]!	; 0xab0

00011630 <__cxa_atexit@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2728]!	; 0xaa8

0001163c <setvbuf@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2720]!	; 0xaa0

00011648 <getgid@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2712]!	; 0xa98

00011654 <memset@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2704]!	; 0xa90

00011660 <fscanf@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2696]!	; 0xa88

0001166c <__printf_chk@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2688]!	; 0xa80

00011678 <write@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2680]!	; 0xa78

00011684 <fileno@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2672]!	; 0xa70

00011690 <__fprintf_chk@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2664]!	; 0xa68

0001169c <fclose@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2656]!	; 0xa60

000116a8 <fseeko64@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2648]!	; 0xa58

000116b4 <__uflow@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2640]!	; 0xa50

000116c0 <__overflow@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2632]!	; 0xa48

000116cc <setlocale@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2624]!	; 0xa40

000116d8 <strrchr@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #106496	; 0x1a000
   116e0:	ldr	pc, [ip, #2616]!	; 0xa38

000116e4 <nl_langinfo@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #106496	; 0x1a000
   116ec:	ldr	pc, [ip, #2608]!	; 0xa30

000116f0 <localeconv@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #106496	; 0x1a000
   116f8:	ldr	pc, [ip, #2600]!	; 0xa28

000116fc <getppid@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #106496	; 0x1a000
   11704:	ldr	pc, [ip, #2592]!	; 0xa20

00011708 <fopen64@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #106496	; 0x1a000
   11710:	ldr	pc, [ip, #2584]!	; 0xa18

00011714 <bindtextdomain@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #106496	; 0x1a000
   1171c:	ldr	pc, [ip, #2576]!	; 0xa10

00011720 <fread_unlocked@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #106496	; 0x1a000
   11728:	ldr	pc, [ip, #2568]!	; 0xa08

0001172c <sync@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #106496	; 0x1a000
   11734:	ldr	pc, [ip, #2560]!	; 0xa00

00011738 <chmod@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #106496	; 0x1a000
   11740:	ldr	pc, [ip, #2552]!	; 0x9f8

00011744 <isatty@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #106496	; 0x1a000
   1174c:	ldr	pc, [ip, #2544]!	; 0x9f0

00011750 <strncmp@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #106496	; 0x1a000
   11758:	ldr	pc, [ip, #2536]!	; 0x9e8

0001175c <fdatasync@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #106496	; 0x1a000
   11764:	ldr	pc, [ip, #2528]!	; 0x9e0

00011768 <abort@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #106496	; 0x1a000
   11770:	ldr	pc, [ip, #2520]!	; 0x9d8

00011774 <close@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #106496	; 0x1a000
   1177c:	ldr	pc, [ip, #2512]!	; 0x9d0

00011780 <__lxstat64@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #106496	; 0x1a000
   11788:	ldr	pc, [ip, #2504]!	; 0x9c8

0001178c <__assert_fail@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #106496	; 0x1a000
   11794:	ldr	pc, [ip, #2496]!	; 0x9c0

Disassembly of section .text:

00011798 <close_stdout@@Base-0x2348>:
   11798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1179c:	sub	sp, sp, #212	; 0xd4
   117a0:	ldr	r4, [pc, #2484]	; 1215c <__assert_fail@plt+0x9d0>
   117a4:	mov	r3, #0
   117a8:	ldr	r2, [pc, #2480]	; 12160 <__assert_fail@plt+0x9d4>
   117ac:	mov	r6, r0
   117b0:	add	r4, pc, r4
   117b4:	str	r3, [sp, #12]
   117b8:	ldr	r0, [r1]
   117bc:	mov	r5, r1
   117c0:	ldr	r2, [r4, r2]
   117c4:	str	r3, [sp, #72]	; 0x48
   117c8:	str	r3, [sp, #76]	; 0x4c
   117cc:	ldr	r2, [r2]
   117d0:	str	r3, [sp, #80]	; 0x50
   117d4:	str	r3, [sp, #84]	; 0x54
   117d8:	str	r2, [sp, #204]	; 0xcc
   117dc:	str	r3, [sp, #88]	; 0x58
   117e0:	str	r3, [sp, #92]	; 0x5c
   117e4:	bl	14a64 <close_stdout@@Base+0xf84>
   117e8:	ldr	r1, [pc, #2420]	; 12164 <__assert_fail@plt+0x9d8>
   117ec:	mov	r0, #6
   117f0:	ldr	r7, [pc, #2416]	; 12168 <__assert_fail@plt+0x9dc>
   117f4:	add	r1, pc, r1
   117f8:	ldr	r8, [pc, #2412]	; 1216c <__assert_fail@plt+0x9e0>
   117fc:	bl	116cc <setlocale@plt>
   11800:	add	r7, pc, r7
   11804:	ldr	r1, [pc, #2404]	; 12170 <__assert_fail@plt+0x9e4>
   11808:	add	r8, pc, r8
   1180c:	mov	r0, r7
   11810:	ldr	r9, [pc, #2396]	; 12174 <__assert_fail@plt+0x9e8>
   11814:	add	r1, pc, r1
   11818:	bl	11714 <bindtextdomain@plt>
   1181c:	mov	r0, r7
   11820:	bl	114bc <textdomain@plt>
   11824:	ldr	r3, [pc, #2380]	; 12178 <__assert_fail@plt+0x9ec>
   11828:	add	ip, r8, #220	; 0xdc
   1182c:	add	r9, pc, r9
   11830:	add	r7, r9, #16
   11834:	ldr	r0, [r4, r3]
   11838:	str	ip, [sp, #20]
   1183c:	ldr	ip, [pc, #2360]	; 1217c <__assert_fail@plt+0x9f0>
   11840:	add	ip, pc, ip
   11844:	str	ip, [sp, #16]
   11848:	ldr	ip, [pc, #2352]	; 12180 <__assert_fail@plt+0x9f4>
   1184c:	add	ip, pc, ip
   11850:	str	ip, [sp, #24]
   11854:	bl	19684 <close_stdout@@Base+0x5ba4>
   11858:	mov	r1, #3
   1185c:	mvn	r2, #0
   11860:	mvn	r3, #0
   11864:	str	r1, [sp, #76]	; 0x4c
   11868:	strd	r2, [sp, #80]	; 0x50
   1186c:	ldr	r2, [pc, #2320]	; 12184 <__assert_fail@plt+0x9f8>
   11870:	mov	sl, #0
   11874:	mov	r0, r6
   11878:	str	sl, [sp]
   1187c:	mov	r1, r5
   11880:	add	r2, pc, r2
   11884:	mov	r3, r7
   11888:	bl	115ac <getopt_long@plt>
   1188c:	cmn	r0, #1
   11890:	beq	11a64 <__assert_fail@plt+0x2d8>
   11894:	cmp	r0, #115	; 0x73
   11898:	beq	11abc <__assert_fail@plt+0x330>
   1189c:	ble	118c8 <__assert_fail@plt+0x13c>
   118a0:	cmp	r0, #120	; 0x78
   118a4:	beq	11ab0 <__assert_fail@plt+0x324>
   118a8:	bgt	11964 <__assert_fail@plt+0x1d8>
   118ac:	cmp	r0, #117	; 0x75
   118b0:	beq	119b8 <__assert_fail@plt+0x22c>
   118b4:	cmp	r0, #118	; 0x76
   118b8:	bne	11aa0 <__assert_fail@plt+0x314>
   118bc:	mov	r3, #1
   118c0:	strb	r3, [sp, #92]	; 0x5c
   118c4:	b	1186c <__assert_fail@plt+0xe0>
   118c8:	cmn	r0, #2
   118cc:	beq	11aa8 <__assert_fail@plt+0x31c>
   118d0:	ble	11a1c <__assert_fail@plt+0x290>
   118d4:	cmp	r0, #102	; 0x66
   118d8:	beq	11a10 <__assert_fail@plt+0x284>
   118dc:	cmp	r0, #110	; 0x6e
   118e0:	bne	11aa0 <__assert_fail@plt+0x314>
   118e4:	ldr	r0, [pc, #2204]	; 12188 <__assert_fail@plt+0x9fc>
   118e8:	mov	r1, sl
   118ec:	mov	r2, #10
   118f0:	add	r3, sp, #96	; 0x60
   118f4:	ldr	fp, [r4, r0]
   118f8:	str	sl, [sp]
   118fc:	ldr	r0, [fp]
   11900:	bl	1768c <close_stdout@@Base+0x3bac>
   11904:	cmp	r0, #0
   11908:	bne	11924 <__assert_fail@plt+0x198>
   1190c:	ldrd	r2, [sp, #96]	; 0x60
   11910:	mvn	r0, #-1073741824	; 0xc0000000
   11914:	mov	r1, #0
   11918:	cmp	r3, r1
   1191c:	cmpeq	r2, r0
   11920:	bls	11958 <__assert_fail@plt+0x1cc>
   11924:	ldr	r1, [pc, #2144]	; 1218c <__assert_fail@plt+0xa00>
   11928:	mov	r2, #5
   1192c:	mov	r0, #0
   11930:	add	r1, pc, r1
   11934:	bl	1148c <dcgettext@plt>
   11938:	mov	sl, r0
   1193c:	ldr	r0, [fp]
   11940:	bl	16160 <close_stdout@@Base+0x2680>
   11944:	mov	r2, sl
   11948:	mov	r1, #0
   1194c:	mov	r3, r0
   11950:	mov	r0, #1
   11954:	bl	1154c <error@plt>
   11958:	ldr	r3, [sp, #96]	; 0x60
   1195c:	str	r3, [sp, #76]	; 0x4c
   11960:	b	1186c <__assert_fail@plt+0xe0>
   11964:	cmp	r0, #122	; 0x7a
   11968:	beq	119ac <__assert_fail@plt+0x220>
   1196c:	cmp	r0, #256	; 0x100
   11970:	bne	11aa0 <__assert_fail@plt+0x314>
   11974:	ldr	ip, [sp, #12]
   11978:	ldr	r3, [pc, #2056]	; 12188 <__assert_fail@plt+0x9fc>
   1197c:	cmp	ip, #0
   11980:	ldreq	fp, [r4, r3]
   11984:	beq	119a0 <__assert_fail@plt+0x214>
   11988:	ldr	fp, [r4, r3]
   1198c:	ldr	r0, [sp, #12]
   11990:	ldr	r1, [fp]
   11994:	bl	113f0 <strcmp@plt>
   11998:	cmp	r0, #0
   1199c:	bne	11af8 <__assert_fail@plt+0x36c>
   119a0:	ldr	fp, [fp]
   119a4:	str	fp, [sp, #12]
   119a8:	b	1186c <__assert_fail@plt+0xe0>
   119ac:	mov	r3, #1
   119b0:	strb	r3, [sp, #94]	; 0x5e
   119b4:	b	1186c <__assert_fail@plt+0xe0>
   119b8:	ldr	r3, [pc, #1992]	; 12188 <__assert_fail@plt+0x9fc>
   119bc:	ldr	fp, [r4, r3]
   119c0:	ldr	r1, [fp]
   119c4:	cmp	r1, #0
   119c8:	moveq	r3, #3
   119cc:	streq	r3, [sp, #88]	; 0x58
   119d0:	beq	1186c <__assert_fail@plt+0xe0>
   119d4:	ldr	r3, [pc, #1972]	; 12190 <__assert_fail@plt+0xa04>
   119d8:	mov	r2, #4
   119dc:	str	r2, [sp]
   119e0:	mov	r2, r9
   119e4:	ldr	r0, [pc, #1960]	; 12194 <__assert_fail@plt+0xa08>
   119e8:	ldr	ip, [r4, r3]
   119ec:	add	r0, pc, r0
   119f0:	ldr	r3, [sp, #20]
   119f4:	ldr	ip, [ip]
   119f8:	str	ip, [sp, #4]
   119fc:	bl	139fc <__assert_fail@plt+0x2270>
   11a00:	add	r0, r8, r0, lsl #2
   11a04:	ldr	r3, [r0, #220]	; 0xdc
   11a08:	str	r3, [sp, #88]	; 0x58
   11a0c:	b	1186c <__assert_fail@plt+0xe0>
   11a10:	mov	r3, #1
   11a14:	strb	r3, [sp, #72]	; 0x48
   11a18:	b	1186c <__assert_fail@plt+0xe0>
   11a1c:	cmn	r0, #3
   11a20:	bne	11aa0 <__assert_fail@plt+0x314>
   11a24:	ldr	r1, [pc, #1900]	; 12198 <__assert_fail@plt+0xa0c>
   11a28:	ldr	r3, [pc, #1900]	; 1219c <__assert_fail@plt+0xa10>
   11a2c:	ldr	r2, [pc, #1900]	; 121a0 <__assert_fail@plt+0xa14>
   11a30:	ldr	r0, [r4, r1]
   11a34:	ldr	r3, [r4, r3]
   11a38:	add	r2, pc, r2
   11a3c:	ldr	r1, [pc, #1888]	; 121a4 <__assert_fail@plt+0xa18>
   11a40:	ldr	r0, [r0]
   11a44:	ldr	r3, [r3]
   11a48:	add	r1, pc, r1
   11a4c:	stm	sp, {r2, sl}
   11a50:	ldr	r2, [pc, #1872]	; 121a8 <__assert_fail@plt+0xa1c>
   11a54:	add	r2, pc, r2
   11a58:	bl	17310 <close_stdout@@Base+0x3830>
   11a5c:	mov	r0, sl
   11a60:	bl	115d0 <exit@plt>
   11a64:	ldr	r3, [pc, #1856]	; 121ac <__assert_fail@plt+0xa20>
   11a68:	ldr	r3, [r4, r3]
   11a6c:	ldr	r4, [r3]
   11a70:	subs	r6, r6, r4
   11a74:	str	r6, [sp, #28]
   11a78:	bne	11b58 <__assert_fail@plt+0x3cc>
   11a7c:	ldr	r1, [pc, #1836]	; 121b0 <__assert_fail@plt+0xa24>
   11a80:	mov	r2, #5
   11a84:	mov	r0, r6
   11a88:	add	r1, pc, r1
   11a8c:	bl	1148c <dcgettext@plt>
   11a90:	mov	r2, r0
   11a94:	ldr	r0, [sp, #28]
   11a98:	mov	r1, r0
   11a9c:	bl	1154c <error@plt>
   11aa0:	mov	r0, #1
   11aa4:	bl	1342c <__assert_fail@plt+0x1ca0>
   11aa8:	mov	r0, sl
   11aac:	bl	1342c <__assert_fail@plt+0x1ca0>
   11ab0:	mov	r3, #1
   11ab4:	strb	r3, [sp, #93]	; 0x5d
   11ab8:	b	1186c <__assert_fail@plt+0xe0>
   11abc:	ldr	r0, [pc, #1732]	; 12188 <__assert_fail@plt+0x9fc>
   11ac0:	mov	r1, sl
   11ac4:	ldr	ip, [sp, #16]
   11ac8:	mov	r2, sl
   11acc:	add	r3, sp, #96	; 0x60
   11ad0:	ldr	r0, [r4, r0]
   11ad4:	str	ip, [sp]
   11ad8:	str	r0, [sp, #28]
   11adc:	ldr	r0, [r0]
   11ae0:	bl	1768c <close_stdout@@Base+0x3bac>
   11ae4:	cmp	r0, #0
   11ae8:	bne	11b20 <__assert_fail@plt+0x394>
   11aec:	ldrd	r2, [sp, #96]	; 0x60
   11af0:	strd	r2, [sp, #80]	; 0x50
   11af4:	b	1186c <__assert_fail@plt+0xe0>
   11af8:	ldr	r1, [pc, #1716]	; 121b4 <__assert_fail@plt+0xa28>
   11afc:	mov	r0, sl
   11b00:	mov	r2, #5
   11b04:	add	r1, pc, r1
   11b08:	bl	1148c <dcgettext@plt>
   11b0c:	mov	r1, sl
   11b10:	mov	r2, r0
   11b14:	mov	r0, #1
   11b18:	bl	1154c <error@plt>
   11b1c:	b	119a0 <__assert_fail@plt+0x214>
   11b20:	ldr	r1, [sp, #24]
   11b24:	mov	r2, #5
   11b28:	mov	r0, sl
   11b2c:	bl	1148c <dcgettext@plt>
   11b30:	ldr	ip, [sp, #28]
   11b34:	mov	fp, r0
   11b38:	ldr	r0, [ip]
   11b3c:	bl	16160 <close_stdout@@Base+0x2680>
   11b40:	mov	r2, fp
   11b44:	mov	r1, sl
   11b48:	mov	r3, r0
   11b4c:	mov	r0, #1
   11b50:	bl	1154c <error@plt>
   11b54:	b	11aec <__assert_fail@plt+0x360>
   11b58:	mov	r1, r0
   11b5c:	ldr	r0, [sp, #12]
   11b60:	bl	162e8 <close_stdout@@Base+0x2808>
   11b64:	ldr	r3, [pc, #1612]	; 121b8 <__assert_fail@plt+0xa2c>
   11b68:	add	r3, pc, r3
   11b6c:	cmp	r0, #0
   11b70:	str	r0, [r3]
   11b74:	beq	12118 <__assert_fail@plt+0x98c>
   11b78:	ldr	ip, [pc, #1596]	; 121bc <__assert_fail@plt+0xa30>
   11b7c:	add	r5, r5, r4, lsl #2
   11b80:	ldr	r0, [pc, #1592]	; 121c0 <__assert_fail@plt+0xa34>
   11b84:	add	ip, pc, ip
   11b88:	str	ip, [sp, #52]	; 0x34
   11b8c:	mov	ip, #0
   11b90:	str	ip, [sp, #20]
   11b94:	ldr	ip, [sp, #52]	; 0x34
   11b98:	add	r0, pc, r0
   11b9c:	str	r5, [sp, #16]
   11ba0:	add	fp, ip, #232	; 0xe8
   11ba4:	bl	19684 <close_stdout@@Base+0x5ba4>
   11ba8:	mov	ip, #1
   11bac:	str	ip, [sp, #24]
   11bb0:	ldr	ip, [pc, #1548]	; 121c4 <__assert_fail@plt+0xa38>
   11bb4:	add	ip, pc, ip
   11bb8:	str	ip, [sp, #36]	; 0x24
   11bbc:	ldr	ip, [pc, #1540]	; 121c8 <__assert_fail@plt+0xa3c>
   11bc0:	add	ip, pc, ip
   11bc4:	str	ip, [sp, #64]	; 0x40
   11bc8:	b	11c34 <__assert_fail@plt+0x4a8>
   11bcc:	ldrb	r4, [r9, #1]
   11bd0:	cmp	r4, #0
   11bd4:	bne	11c70 <__assert_fail@plt+0x4e4>
   11bd8:	ldr	r3, [pc, #1516]	; 121cc <__assert_fail@plt+0xa40>
   11bdc:	mov	r0, #1
   11be0:	mov	r1, #3
   11be4:	add	r3, pc, r3
   11be8:	ldr	r5, [r3]
   11bec:	bl	17e84 <close_stdout@@Base+0x43a4>
   11bf0:	cmp	r0, #0
   11bf4:	blt	11f44 <__assert_fail@plt+0x7b8>
   11bf8:	tst	r0, #1024	; 0x400
   11bfc:	bne	11ce0 <__assert_fail@plt+0x554>
   11c00:	mov	r2, r5
   11c04:	mov	r0, #1
   11c08:	ldr	r1, [sp, #12]
   11c0c:	add	r3, sp, #72	; 0x48
   11c10:	bl	12e40 <__assert_fail@plt+0x16b4>
   11c14:	ldr	ip, [sp, #24]
   11c18:	and	ip, r0, ip
   11c1c:	str	ip, [sp, #24]
   11c20:	ldr	ip, [sp, #20]
   11c24:	ldr	r0, [sp, #12]
   11c28:	add	ip, ip, #1
   11c2c:	str	ip, [sp, #20]
   11c30:	bl	1142c <free@plt>
   11c34:	ldr	ip, [sp, #20]
   11c38:	ldr	r0, [sp, #28]
   11c3c:	cmp	ip, r0
   11c40:	bge	11d8c <__assert_fail@plt+0x600>
   11c44:	ldr	ip, [sp, #16]
   11c48:	ldr	r0, [ip]
   11c4c:	bl	16160 <close_stdout@@Base+0x2680>
   11c50:	bl	17618 <close_stdout@@Base+0x3b38>
   11c54:	ldr	ip, [sp, #16]
   11c58:	ldr	r9, [ip], #4
   11c5c:	ldrb	r3, [r9]
   11c60:	str	ip, [sp, #16]
   11c64:	cmp	r3, #45	; 0x2d
   11c68:	str	r0, [sp, #12]
   11c6c:	beq	11bcc <__assert_fail@plt+0x440>
   11c70:	ldr	ip, [sp, #36]	; 0x24
   11c74:	mov	r0, r9
   11c78:	movw	r1, #257	; 0x101
   11c7c:	ldr	r4, [ip]
   11c80:	bl	13d6c <close_stdout@@Base+0x28c>
   11c84:	subs	r5, r0, #0
   11c88:	blt	11d10 <__assert_fail@plt+0x584>
   11c8c:	mov	r2, r4
   11c90:	ldr	r1, [sp, #12]
   11c94:	add	r3, sp, #72	; 0x48
   11c98:	mov	r0, r5
   11c9c:	bl	12e40 <__assert_fail@plt+0x16b4>
   11ca0:	str	r0, [sp, #32]
   11ca4:	mov	r0, r5
   11ca8:	bl	11774 <close@plt>
   11cac:	cmp	r0, #0
   11cb0:	bne	11d54 <__assert_fail@plt+0x5c8>
   11cb4:	ldr	ip, [sp, #32]
   11cb8:	cmp	ip, #0
   11cbc:	beq	11d9c <__assert_fail@plt+0x610>
   11cc0:	ldr	r3, [sp, #88]	; 0x58
   11cc4:	cmp	r3, #0
   11cc8:	moveq	r3, #1
   11ccc:	bne	11da4 <__assert_fail@plt+0x618>
   11cd0:	ldr	ip, [sp, #24]
   11cd4:	and	ip, r3, ip
   11cd8:	str	ip, [sp, #24]
   11cdc:	b	11c20 <__assert_fail@plt+0x494>
   11ce0:	ldr	r1, [pc, #1256]	; 121d0 <__assert_fail@plt+0xa44>
   11ce4:	mov	r2, #5
   11ce8:	mov	r0, r4
   11cec:	add	r1, pc, r1
   11cf0:	bl	1148c <dcgettext@plt>
   11cf4:	mov	r1, r4
   11cf8:	ldr	r3, [sp, #12]
   11cfc:	mov	r2, r0
   11d00:	mov	r0, r4
   11d04:	bl	1154c <error@plt>
   11d08:	mov	r0, r4
   11d0c:	b	11c14 <__assert_fail@plt+0x488>
   11d10:	bl	11618 <__errno_location@plt>
   11d14:	ldr	r5, [r0]
   11d18:	mov	r6, r0
   11d1c:	cmp	r5, #13
   11d20:	beq	1202c <__assert_fail@plt+0x8a0>
   11d24:	ldr	r1, [pc, #1192]	; 121d4 <__assert_fail@plt+0xa48>
   11d28:	mov	r2, #5
   11d2c:	mov	r0, #0
   11d30:	add	r1, pc, r1
   11d34:	bl	1148c <dcgettext@plt>
   11d38:	ldr	r3, [sp, #12]
   11d3c:	mov	r1, r5
   11d40:	mov	r2, r0
   11d44:	mov	r0, #0
   11d48:	bl	1154c <error@plt>
   11d4c:	mov	r3, #0
   11d50:	b	11cd0 <__assert_fail@plt+0x544>
   11d54:	bl	11618 <__errno_location@plt>
   11d58:	ldr	r1, [pc, #1144]	; 121d8 <__assert_fail@plt+0xa4c>
   11d5c:	mov	r2, #5
   11d60:	add	r1, pc, r1
   11d64:	ldr	r4, [r0]
   11d68:	mov	r0, #0
   11d6c:	bl	1148c <dcgettext@plt>
   11d70:	ldr	r3, [sp, #12]
   11d74:	mov	r1, r4
   11d78:	mov	r2, r0
   11d7c:	mov	r0, #0
   11d80:	bl	1154c <error@plt>
   11d84:	mov	r3, #0
   11d88:	b	11cd0 <__assert_fail@plt+0x544>
   11d8c:	ldr	ip, [sp, #24]
   11d90:	rsbs	r0, ip, #1
   11d94:	movcc	r0, #0
   11d98:	bl	115d0 <exit@plt>
   11d9c:	ldr	r3, [sp, #32]
   11da0:	b	11cd0 <__assert_fail@plt+0x544>
   11da4:	mov	r0, r9
   11da8:	bl	17618 <close_stdout@@Base+0x3b38>
   11dac:	mov	r7, r0
   11db0:	bl	13cc8 <close_stdout@@Base+0x1e8>
   11db4:	mov	r4, r0
   11db8:	bl	13d24 <close_stdout@@Base+0x244>
   11dbc:	mov	sl, r0
   11dc0:	mov	r0, r7
   11dc4:	bl	13bf8 <close_stdout@@Base+0x118>
   11dc8:	str	r0, [sp, #56]	; 0x38
   11dcc:	bl	16160 <close_stdout@@Base+0x2680>
   11dd0:	bl	17618 <close_stdout@@Base+0x3b38>
   11dd4:	ldr	r3, [sp, #88]	; 0x58
   11dd8:	cmp	r3, #3
   11ddc:	mvnne	ip, #0
   11de0:	str	r0, [sp, #48]	; 0x30
   11de4:	strne	ip, [sp, #40]	; 0x28
   11de8:	beq	120dc <__assert_fail@plt+0x950>
   11dec:	ldrb	r3, [sp, #92]	; 0x5c
   11df0:	cmp	r3, #0
   11df4:	bne	12074 <__assert_fail@plt+0x8e8>
   11df8:	add	r8, sp, #96	; 0x60
   11dfc:	rsb	r3, r7, r4
   11e00:	mov	ip, #1
   11e04:	add	r3, r9, r3
   11e08:	str	ip, [sp, #60]	; 0x3c
   11e0c:	str	r3, [sp, #68]	; 0x44
   11e10:	str	r9, [sp, #44]	; 0x2c
   11e14:	ldr	r3, [sp, #88]	; 0x58
   11e18:	cmp	r3, #1
   11e1c:	beq	11f7c <__assert_fail@plt+0x7f0>
   11e20:	cmp	sl, #0
   11e24:	beq	11f7c <__assert_fail@plt+0x7f0>
   11e28:	mov	r0, r4
   11e2c:	mov	r1, #48	; 0x30
   11e30:	mov	r2, sl
   11e34:	mov	r6, sl
   11e38:	mov	r5, #48	; 0x30
   11e3c:	bl	11654 <memset@plt>
   11e40:	mov	r3, #0
   11e44:	strb	r3, [r6, r4]!
   11e48:	mov	r0, #3
   11e4c:	mov	r1, r7
   11e50:	mov	r2, r8
   11e54:	bl	11780 <__lxstat64@plt>
   11e58:	cmp	r0, #0
   11e5c:	blt	11ea4 <__assert_fail@plt+0x718>
   11e60:	mov	r9, r6
   11e64:	b	11e78 <__assert_fail@plt+0x6ec>
   11e68:	cmp	r2, r4
   11e6c:	strb	r5, [r9, #-1]
   11e70:	mov	r9, r2
   11e74:	beq	11f3c <__assert_fail@plt+0x7b0>
   11e78:	mov	r0, fp
   11e7c:	ldrb	r1, [r9, #-1]
   11e80:	bl	115e8 <strchr@plt>
   11e84:	sub	r2, r9, #1
   11e88:	cmp	r0, #0
   11e8c:	beq	12054 <__assert_fail@plt+0x8c8>
   11e90:	ldrb	r3, [r0, #1]
   11e94:	cmp	r3, #0
   11e98:	beq	11e68 <__assert_fail@plt+0x6dc>
   11e9c:	strb	r3, [r2]
   11ea0:	b	11e48 <__assert_fail@plt+0x6bc>
   11ea4:	ldr	r0, [sp, #44]	; 0x2c
   11ea8:	mov	r1, r7
   11eac:	bl	115a0 <rename@plt>
   11eb0:	cmp	r0, #0
   11eb4:	bne	11f3c <__assert_fail@plt+0x7b0>
   11eb8:	ldr	ip, [sp, #40]	; 0x28
   11ebc:	cmp	ip, #0
   11ec0:	blt	11ee0 <__assert_fail@plt+0x754>
   11ec4:	mov	r0, ip
   11ec8:	ldr	r1, [sp, #48]	; 0x30
   11ecc:	bl	12380 <__assert_fail@plt+0xbf4>
   11ed0:	ldr	ip, [sp, #32]
   11ed4:	cmp	r0, #0
   11ed8:	movne	ip, #0
   11edc:	str	ip, [sp, #32]
   11ee0:	ldrb	r3, [sp, #92]	; 0x5c
   11ee4:	cmp	r3, #0
   11ee8:	beq	11f2c <__assert_fail@plt+0x7a0>
   11eec:	ldr	r0, [sp, #60]	; 0x3c
   11ef0:	mov	r2, #5
   11ef4:	ldr	ip, [sp, #12]
   11ef8:	cmp	r0, #0
   11efc:	ldr	r1, [sp, #64]	; 0x40
   11f00:	mov	r0, #0
   11f04:	ldr	r5, [sp, #44]	; 0x2c
   11f08:	movne	r5, ip
   11f0c:	bl	1148c <dcgettext@plt>
   11f10:	str	r7, [sp]
   11f14:	mov	r3, r5
   11f18:	mov	r2, r0
   11f1c:	mov	r0, #0
   11f20:	mov	r1, r0
   11f24:	str	r0, [sp, #60]	; 0x3c
   11f28:	bl	1154c <error@plt>
   11f2c:	ldr	r0, [sp, #68]	; 0x44
   11f30:	mov	r1, r4
   11f34:	add	r2, sl, #1
   11f38:	bl	11444 <memcpy@plt>
   11f3c:	sub	sl, sl, #1
   11f40:	b	11e14 <__assert_fail@plt+0x688>
   11f44:	bl	11618 <__errno_location@plt>
   11f48:	ldr	r1, [pc, #652]	; 121dc <__assert_fail@plt+0xa50>
   11f4c:	mov	r2, #5
   11f50:	add	r1, pc, r1
   11f54:	ldr	r5, [r0]
   11f58:	mov	r0, r4
   11f5c:	bl	1148c <dcgettext@plt>
   11f60:	ldr	r3, [sp, #12]
   11f64:	mov	r1, r5
   11f68:	mov	r2, r0
   11f6c:	mov	r0, r4
   11f70:	bl	1154c <error@plt>
   11f74:	mov	r0, r4
   11f78:	b	11c14 <__assert_fail@plt+0x488>
   11f7c:	ldr	r9, [sp, #44]	; 0x2c
   11f80:	mov	r0, r9
   11f84:	bl	114a4 <unlink@plt>
   11f88:	subs	r4, r0, #0
   11f8c:	bne	120a0 <__assert_fail@plt+0x914>
   11f90:	ldrb	r3, [sp, #92]	; 0x5c
   11f94:	cmp	r3, #0
   11f98:	bne	120f0 <__assert_fail@plt+0x964>
   11f9c:	ldr	ip, [sp, #40]	; 0x28
   11fa0:	cmp	ip, #0
   11fa4:	blt	1200c <__assert_fail@plt+0x880>
   11fa8:	mov	r0, ip
   11fac:	ldr	r1, [sp, #48]	; 0x30
   11fb0:	bl	12380 <__assert_fail@plt+0xbf4>
   11fb4:	ldr	ip, [sp, #32]
   11fb8:	cmp	r0, #0
   11fbc:	ldr	r0, [sp, #40]	; 0x28
   11fc0:	movne	ip, #0
   11fc4:	str	ip, [sp, #32]
   11fc8:	bl	11774 <close@plt>
   11fcc:	cmp	r0, #0
   11fd0:	beq	1200c <__assert_fail@plt+0x880>
   11fd4:	bl	11618 <__errno_location@plt>
   11fd8:	ldr	r1, [pc, #512]	; 121e0 <__assert_fail@plt+0xa54>
   11fdc:	mov	ip, #0
   11fe0:	mov	r2, #5
   11fe4:	add	r1, pc, r1
   11fe8:	str	ip, [sp, #32]
   11fec:	ldr	r4, [r0]
   11ff0:	mov	r0, ip
   11ff4:	bl	1148c <dcgettext@plt>
   11ff8:	ldr	r3, [sp, #48]	; 0x30
   11ffc:	mov	r1, r4
   12000:	mov	r2, r0
   12004:	mov	r0, #0
   12008:	bl	1154c <error@plt>
   1200c:	mov	r0, r7
   12010:	bl	1142c <free@plt>
   12014:	ldr	r0, [sp, #56]	; 0x38
   12018:	bl	1142c <free@plt>
   1201c:	ldr	r0, [sp, #48]	; 0x30
   12020:	bl	1142c <free@plt>
   12024:	ldr	r3, [sp, #32]
   12028:	b	11cd0 <__assert_fail@plt+0x544>
   1202c:	ldrb	r3, [sp, #72]	; 0x48
   12030:	cmp	r3, #0
   12034:	beq	11d24 <__assert_fail@plt+0x598>
   12038:	mov	r0, r9
   1203c:	mov	r1, #128	; 0x80
   12040:	bl	11738 <chmod@plt>
   12044:	cmp	r0, #0
   12048:	beq	12144 <__assert_fail@plt+0x9b8>
   1204c:	ldr	r5, [r6]
   12050:	b	11d24 <__assert_fail@plt+0x598>
   12054:	ldr	ip, [sp, #52]	; 0x34
   12058:	movw	r2, #973	; 0x3cd
   1205c:	ldr	r0, [pc, #384]	; 121e4 <__assert_fail@plt+0xa58>
   12060:	ldr	r1, [pc, #384]	; 121e8 <__assert_fail@plt+0xa5c>
   12064:	add	r3, ip, #300	; 0x12c
   12068:	add	r0, pc, r0
   1206c:	add	r1, pc, r1
   12070:	bl	1178c <__assert_fail@plt>
   12074:	ldr	r1, [pc, #368]	; 121ec <__assert_fail@plt+0xa60>
   12078:	mov	r2, #5
   1207c:	mov	r0, #0
   12080:	add	r1, pc, r1
   12084:	bl	1148c <dcgettext@plt>
   12088:	ldr	r3, [sp, #12]
   1208c:	mov	r2, r0
   12090:	mov	r0, #0
   12094:	mov	r1, r0
   12098:	bl	1154c <error@plt>
   1209c:	b	11df8 <__assert_fail@plt+0x66c>
   120a0:	bl	11618 <__errno_location@plt>
   120a4:	ldr	r1, [pc, #324]	; 121f0 <__assert_fail@plt+0xa64>
   120a8:	mov	ip, #0
   120ac:	mov	r2, #5
   120b0:	add	r1, pc, r1
   120b4:	str	ip, [sp, #32]
   120b8:	ldr	r4, [r0]
   120bc:	mov	r0, ip
   120c0:	bl	1148c <dcgettext@plt>
   120c4:	ldr	r3, [sp, #12]
   120c8:	mov	r1, r4
   120cc:	mov	r2, r0
   120d0:	mov	r0, #0
   120d4:	bl	1154c <error@plt>
   120d8:	b	11f9c <__assert_fail@plt+0x810>
   120dc:	ldr	r0, [sp, #56]	; 0x38
   120e0:	mov	r1, #18688	; 0x4900
   120e4:	bl	13d6c <close_stdout@@Base+0x28c>
   120e8:	str	r0, [sp, #40]	; 0x28
   120ec:	b	11dec <__assert_fail@plt+0x660>
   120f0:	ldr	r1, [pc, #252]	; 121f4 <__assert_fail@plt+0xa68>
   120f4:	mov	r2, #5
   120f8:	add	r1, pc, r1
   120fc:	bl	1148c <dcgettext@plt>
   12100:	mov	r1, r4
   12104:	ldr	r3, [sp, #12]
   12108:	mov	r2, r0
   1210c:	mov	r0, r4
   12110:	bl	1154c <error@plt>
   12114:	b	11f9c <__assert_fail@plt+0x810>
   12118:	bl	11618 <__errno_location@plt>
   1211c:	ldr	r6, [r0]
   12120:	ldr	r0, [sp, #12]
   12124:	bl	16160 <close_stdout@@Base+0x2680>
   12128:	ldr	r2, [pc, #200]	; 121f8 <__assert_fail@plt+0xa6c>
   1212c:	mov	r1, r6
   12130:	add	r2, pc, r2
   12134:	mov	r3, r0
   12138:	mov	r0, #1
   1213c:	bl	1154c <error@plt>
   12140:	b	11b78 <__assert_fail@plt+0x3ec>
   12144:	mov	r0, r9
   12148:	movw	r1, #257	; 0x101
   1214c:	bl	13d6c <close_stdout@@Base+0x28c>
   12150:	subs	r5, r0, #0
   12154:	bge	11c8c <__assert_fail@plt+0x500>
   12158:	b	1204c <__assert_fail@plt+0x8c0>
   1215c:	andeq	sl, r1, r8, asr #16
   12160:	andeq	r0, r0, ip, asr r1
   12164:	andeq	r8, r0, r4, lsl r7
   12168:	andeq	r8, r0, r0, asr #25
   1216c:			; <UNDEFINED> instruction: 0x00007eb0
   12170:	andeq	r8, r0, r0, ror sp
   12174:	andeq	sl, r1, r4, ror #11
   12178:	andeq	r0, r0, r0, ror r1
   1217c:	andeq	r8, r0, r8, lsr #27
   12180:	andeq	r8, r0, ip, lsr #27
   12184:	andeq	r8, r0, r4, lsr #27
   12188:	muleq	r0, r4, r1
   1218c:	andeq	r8, r0, r8, ror #24
   12190:	andeq	r0, r0, ip, ror #2
   12194:	strdeq	r8, [r0], -r0
   12198:	andeq	r0, r0, ip, ror r1
   1219c:	andeq	r0, r0, r4, ror #2
   121a0:	andeq	r8, r0, r0, ror #23
   121a4:	andeq	r8, r0, r8, asr #23
   121a8:	andeq	r8, r0, r8, ror #20
   121ac:	andeq	r0, r0, r0, ror #2
   121b0:	andeq	r8, r0, r8, lsr #23
   121b4:			; <UNDEFINED> instruction: 0x00008ab4
   121b8:	andeq	sl, r1, ip, ror r6
   121bc:	andeq	r7, r0, r4, lsr fp
   121c0:	muleq	r0, r0, r7
   121c4:	andeq	sl, r1, r0, lsr r6
   121c8:	andeq	r8, r0, r0, lsl fp
   121cc:	andeq	sl, r1, r0, lsl #12
   121d0:	andeq	r8, r0, r0, ror r9
   121d4:	andeq	r8, r0, ip, asr r9
   121d8:	andeq	r8, r0, ip, asr #18
   121dc:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   121e0:	andeq	r8, r0, r8, asr #13
   121e4:	andeq	r8, r0, ip, ror r6
   121e8:	andeq	r8, r0, ip, ror r6
   121ec:	andeq	r8, r0, r0, asr #12
   121f0:	andeq	r8, r0, r4, asr #12
   121f4:	andeq	r8, r0, r4, lsl r6
   121f8:	ldrdeq	r8, [r0], -ip
   121fc:	mov	fp, #0
   12200:	mov	lr, #0
   12204:	pop	{r1}		; (ldr r1, [sp], #4)
   12208:	mov	r2, sp
   1220c:	push	{r2}		; (str r2, [sp, #-4]!)
   12210:	push	{r0}		; (str r0, [sp, #-4]!)
   12214:	ldr	ip, [pc, #16]	; 1222c <__assert_fail@plt+0xaa0>
   12218:	push	{ip}		; (str ip, [sp, #-4]!)
   1221c:	ldr	r0, [pc, #12]	; 12230 <__assert_fail@plt+0xaa4>
   12220:	ldr	r3, [pc, #12]	; 12234 <__assert_fail@plt+0xaa8>
   12224:	bl	1157c <__libc_start_main@plt>
   12228:	bl	11768 <abort@plt>
   1222c:	andeq	r9, r1, r0, lsl #13
   12230:	muleq	r1, r8, r7
   12234:	andeq	r9, r1, ip, lsl r6
   12238:	ldr	r3, [pc, #20]	; 12254 <__assert_fail@plt+0xac8>
   1223c:	ldr	r2, [pc, #20]	; 12258 <__assert_fail@plt+0xacc>
   12240:	add	r3, pc, r3
   12244:	ldr	r2, [r3, r2]
   12248:	cmp	r2, #0
   1224c:	bxeq	lr
   12250:	b	11594 <__gmon_start__@plt>
   12254:			; <UNDEFINED> instruction: 0x00019db8
   12258:	andeq	r0, r0, r4, ror r1
   1225c:	push	{r3, lr}
   12260:	movw	r0, #49640	; 0xc1e8
   12264:	ldr	r3, [pc, #36]	; 12290 <__assert_fail@plt+0xb04>
   12268:	movt	r0, #2
   1226c:	rsb	r3, r0, r3
   12270:	cmp	r3, #6
   12274:	popls	{r3, pc}
   12278:	movw	r3, #0
   1227c:	movt	r3, #0
   12280:	cmp	r3, #0
   12284:	popeq	{r3, pc}
   12288:	blx	r3
   1228c:	pop	{r3, pc}
   12290:	andeq	ip, r2, fp, ror #3
   12294:	push	{r3, lr}
   12298:	movw	r0, #49640	; 0xc1e8
   1229c:	movw	r3, #49640	; 0xc1e8
   122a0:	movt	r0, #2
   122a4:	movt	r3, #2
   122a8:	rsb	r3, r0, r3
   122ac:	asr	r3, r3, #2
   122b0:	add	r3, r3, r3, lsr #31
   122b4:	asrs	r1, r3, #1
   122b8:	popeq	{r3, pc}
   122bc:	movw	r2, #0
   122c0:	movt	r2, #0
   122c4:	cmp	r2, #0
   122c8:	popeq	{r3, pc}
   122cc:	blx	r2
   122d0:	pop	{r3, pc}
   122d4:	push	{r4, lr}
   122d8:	movw	r4, #49640	; 0xc1e8
   122dc:	movt	r4, #2
   122e0:	ldrb	r3, [r4]
   122e4:	cmp	r3, #0
   122e8:	popne	{r4, pc}
   122ec:	bl	1225c <__assert_fail@plt+0xad0>
   122f0:	mov	r3, #1
   122f4:	strb	r3, [r4]
   122f8:	pop	{r4, pc}
   122fc:	movw	r0, #48660	; 0xbe14
   12300:	movt	r0, #2
   12304:	push	{r3, lr}
   12308:	ldr	r3, [r0]
   1230c:	cmp	r3, #0
   12310:	beq	12328 <__assert_fail@plt+0xb9c>
   12314:	movw	r3, #0
   12318:	movt	r3, #0
   1231c:	cmp	r3, #0
   12320:	beq	12328 <__assert_fail@plt+0xb9c>
   12324:	blx	r3
   12328:	pop	{r3, lr}
   1232c:	b	12294 <__assert_fail@plt+0xb08>
   12330:	ldr	r3, [pc, #4]	; 1233c <__assert_fail@plt+0xbb0>
   12334:	ldr	r0, [pc, r3]
   12338:	b	16530 <close_stdout@@Base+0x2a50>
   1233c:			; <UNDEFINED> instruction: 0x00019eb0
   12340:	push	{r3, r4, r5, lr}
   12344:	mov	r4, r1
   12348:	mov	r1, #3
   1234c:	mov	r5, r0
   12350:	bl	17e84 <close_stdout@@Base+0x43a4>
   12354:	cmp	r0, #0
   12358:	pople	{r3, r4, r5, pc}
   1235c:	cmp	r4, #0
   12360:	orrne	r2, r0, #65536	; 0x10000
   12364:	biceq	r2, r0, #65536	; 0x10000
   12368:	cmp	r2, r0
   1236c:	popeq	{r3, r4, r5, pc}
   12370:	mov	r0, r5
   12374:	mov	r1, #4
   12378:	pop	{r3, r4, r5, lr}
   1237c:	b	17e84 <close_stdout@@Base+0x43a4>
   12380:	push	{r3, r4, r5, r6, r7, lr}
   12384:	mov	r7, r1
   12388:	mov	r6, r0
   1238c:	bl	1175c <fdatasync@plt>
   12390:	cmp	r0, #0
   12394:	popeq	{r3, r4, r5, r6, r7, pc}
   12398:	bl	11618 <__errno_location@plt>
   1239c:	ldr	r4, [r0]
   123a0:	mov	r5, r0
   123a4:	cmp	r4, #9
   123a8:	bne	12408 <__assert_fail@plt+0xc7c>
   123ac:	mov	r0, r6
   123b0:	bl	113e4 <fsync@plt>
   123b4:	cmp	r0, #0
   123b8:	beq	12454 <__assert_fail@plt+0xcc8>
   123bc:	ldr	r4, [r5]
   123c0:	cmp	r4, #9
   123c4:	beq	12448 <__assert_fail@plt+0xcbc>
   123c8:	sub	r3, r4, #21
   123cc:	cmp	r3, #1
   123d0:	bls	12448 <__assert_fail@plt+0xcbc>
   123d4:	ldr	r1, [pc, #124]	; 12458 <__assert_fail@plt+0xccc>
   123d8:	mov	r2, #5
   123dc:	mov	r0, #0
   123e0:	add	r1, pc, r1
   123e4:	bl	1148c <dcgettext@plt>
   123e8:	mov	r3, r7
   123ec:	mov	r1, r4
   123f0:	mov	r2, r0
   123f4:	mov	r0, #0
   123f8:	bl	1154c <error@plt>
   123fc:	mvn	r0, #0
   12400:	str	r4, [r5]
   12404:	pop	{r3, r4, r5, r6, r7, pc}
   12408:	sub	r3, r4, #21
   1240c:	cmp	r3, #1
   12410:	bls	123ac <__assert_fail@plt+0xc20>
   12414:	ldr	r1, [pc, #64]	; 1245c <__assert_fail@plt+0xcd0>
   12418:	mov	r2, #5
   1241c:	mov	r0, #0
   12420:	add	r1, pc, r1
   12424:	bl	1148c <dcgettext@plt>
   12428:	mov	r3, r7
   1242c:	mov	r1, r4
   12430:	mov	r2, r0
   12434:	mov	r0, #0
   12438:	bl	1154c <error@plt>
   1243c:	str	r4, [r5]
   12440:	mvn	r0, #0
   12444:	pop	{r3, r4, r5, r6, r7, pc}
   12448:	bl	1172c <sync@plt>
   1244c:	mov	r0, #0
   12450:	pop	{r3, r4, r5, r6, r7, pc}
   12454:	pop	{r3, r4, r5, r6, r7, pc}
   12458:	andeq	r7, r0, r4, lsr #8
   1245c:	andeq	r7, r0, ip, asr #7
   12460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12464:	sub	sp, sp, #2080	; 0x820
   12468:	sub	sp, sp, #12
   1246c:	ldr	ip, [pc, #2460]	; 12e10 <__assert_fail@plt+0x1684>
   12470:	mov	r7, r0
   12474:	str	r2, [sp, #76]	; 0x4c
   12478:	add	ip, pc, ip
   1247c:	ldr	r5, [sp, #76]	; 0x4c
   12480:	ldr	r2, [pc, #2444]	; 12e14 <__assert_fail@plt+0x1688>
   12484:	ldr	r8, [sp, #2128]	; 0x850
   12488:	ldrd	r4, [r5]
   1248c:	str	r3, [sp, #48]	; 0x30
   12490:	mov	r3, ip
   12494:	str	r1, [sp, #44]	; 0x2c
   12498:	orrs	r9, r4, r5
   1249c:	strd	r4, [sp, #32]
   124a0:	str	r8, [sp, #92]	; 0x5c
   124a4:	moveq	r4, #0
   124a8:	ldr	r2, [ip, r2]
   124ac:	ldr	r3, [r2]
   124b0:	str	r2, [sp, #68]	; 0x44
   124b4:	str	r3, [sp, #2084]	; 0x824
   124b8:	beq	12ac8 <__assert_fail@plt+0x133c>
   124bc:	bl	115f4 <getpagesize@plt>
   124c0:	ldr	ip, [sp, #48]	; 0x30
   124c4:	cmp	ip, #0
   124c8:	mov	r6, r0
   124cc:	ble	12550 <__assert_fail@plt+0xdc4>
   124d0:	ubfx	r4, ip, #0, #12
   124d4:	orr	sl, r4, r4, lsl #12
   124d8:	ubfx	r8, sl, #4, #8
   124dc:	ubfx	r9, sl, #8, #8
   124e0:	cmp	r8, r9
   124e4:	uxtb	sl, sl
   124e8:	beq	12c80 <__assert_fail@plt+0x14f4>
   124ec:	add	r0, r6, #61184	; 0xef00
   124f0:	sub	r5, r6, #1
   124f4:	add	r0, r0, #255	; 0xff
   124f8:	bl	17420 <close_stdout@@Base+0x3940>
   124fc:	mov	r1, r6
   12500:	add	r5, r0, r5
   12504:	str	r0, [sp, #80]	; 0x50
   12508:	mov	r0, r5
   1250c:	bl	18834 <close_stdout@@Base+0x4d54>
   12510:	mov	r3, #0
   12514:	mov	r2, #0
   12518:	str	r3, [sp]
   1251c:	mov	r0, r7
   12520:	mov	r3, #0
   12524:	rsb	r5, r1, r5
   12528:	bl	114f8 <lseek64@plt>
   1252c:	mvn	r2, #0
   12530:	mvn	r3, #0
   12534:	cmp	r1, r3
   12538:	cmpeq	r0, r2
   1253c:	beq	12e04 <__assert_fail@plt+0x1678>
   12540:	mov	ip, #61440	; 0xf000
   12544:	str	ip, [sp, #72]	; 0x48
   12548:	str	ip, [sp, #84]	; 0x54
   1254c:	b	125e4 <__assert_fail@plt+0xe58>
   12550:	add	r0, r0, #65536	; 0x10000
   12554:	sub	r5, r6, #1
   12558:	add	r0, r0, #1
   1255c:	bl	17420 <close_stdout@@Base+0x3940>
   12560:	mov	r1, r6
   12564:	add	r5, r0, r5
   12568:	str	r0, [sp, #80]	; 0x50
   1256c:	mov	r0, r5
   12570:	bl	18834 <close_stdout@@Base+0x4d54>
   12574:	mov	r3, #0
   12578:	mov	r2, #0
   1257c:	str	r3, [sp]
   12580:	mov	r0, r7
   12584:	mov	r3, #0
   12588:	rsb	r5, r1, r5
   1258c:	bl	114f8 <lseek64@plt>
   12590:	mvn	r2, #0
   12594:	mvn	r3, #0
   12598:	cmp	r1, r3
   1259c:	cmpeq	r0, r2
   125a0:	moveq	r4, #2
   125a4:	movteq	r4, #1
   125a8:	streq	r4, [sp, #72]	; 0x48
   125ac:	beq	12ce8 <__assert_fail@plt+0x155c>
   125b0:	ldr	ip, [sp, #48]	; 0x30
   125b4:	cmp	ip, #0
   125b8:	blt	12be0 <__assert_fail@plt+0x1454>
   125bc:	ubfx	r4, ip, #0, #12
   125c0:	orr	r4, r4, r4, lsl #12
   125c4:	mov	ip, #2
   125c8:	ubfx	r8, r4, #4, #8
   125cc:	ubfx	r9, r4, #8, #8
   125d0:	uxtb	sl, r4
   125d4:	movt	ip, #1
   125d8:	mov	r4, #65536	; 0x10000
   125dc:	str	ip, [sp, #72]	; 0x48
   125e0:	str	r4, [sp, #84]	; 0x54
   125e4:	ldrd	r0, [sp, #32]
   125e8:	cmp	r0, #0
   125ec:	sbcs	r1, r1, #0
   125f0:	blt	12d1c <__assert_fail@plt+0x1590>
   125f4:	ldr	r0, [sp, #72]	; 0x48
   125f8:	mov	r1, #0
   125fc:	mov	r3, r1
   12600:	ldr	r6, [sp, #72]	; 0x48
   12604:	mov	r2, r0
   12608:	ldrd	r0, [sp, #32]
   1260c:	cmp	r0, r2
   12610:	sbcs	r1, r1, r3
   12614:	ldr	r2, [sp, #32]
   12618:	movlt	r6, r2
   1261c:	lsr	r4, r6, #1
   12620:	strb	r8, [r5]
   12624:	cmp	r4, #3
   12628:	mov	r8, #3
   1262c:	strb	r9, [r5, #1]
   12630:	strb	sl, [r5, #2]
   12634:	bls	12654 <__assert_fail@plt+0xec8>
   12638:	add	r0, r5, r8
   1263c:	mov	r2, r8
   12640:	mov	r1, r5
   12644:	lsl	r8, r8, #1
   12648:	bl	11444 <memcpy@plt>
   1264c:	cmp	r8, r4
   12650:	bcc	12638 <__assert_fail@plt+0xeac>
   12654:	cmp	r6, r8
   12658:	bhi	12c6c <__assert_fail@plt+0x14e0>
   1265c:	ldr	r4, [sp, #48]	; 0x30
   12660:	tst	r4, #4096	; 0x1000
   12664:	movne	r3, #0
   12668:	beq	12688 <__assert_fail@plt+0xefc>
   1266c:	ldrb	r2, [r5, r3]
   12670:	eor	r2, r2, #127	; 0x7f
   12674:	mvn	r2, r2
   12678:	strb	r2, [r5, r3]
   1267c:	add	r3, r3, #512	; 0x200
   12680:	cmp	r6, r3
   12684:	bhi	1266c <__assert_fail@plt+0xee0>
   12688:	ldrb	ip, [r5]
   1268c:	add	r8, sp, #120	; 0x78
   12690:	ldr	r3, [pc, #1920]	; 12e18 <__assert_fail@plt+0x168c>
   12694:	mov	r1, #1
   12698:	mov	r2, #7
   1269c:	mov	r0, r8
   126a0:	str	ip, [sp]
   126a4:	add	r3, pc, r3
   126a8:	ldrb	ip, [r5, #1]
   126ac:	str	r8, [sp, #88]	; 0x58
   126b0:	str	ip, [sp, #4]
   126b4:	ldrb	ip, [r5, #2]
   126b8:	str	ip, [sp, #8]
   126bc:	bl	11624 <__sprintf_chk@plt>
   126c0:	ldr	r8, [sp, #2136]	; 0x858
   126c4:	cmp	r8, #0
   126c8:	bne	12c1c <__assert_fail@plt+0x1490>
   126cc:	ldr	r4, [pc, #1864]	; 12e1c <__assert_fail@plt+0x1690>
   126d0:	add	r3, sp, #128	; 0x80
   126d4:	ldr	r9, [pc, #1860]	; 12e20 <__assert_fail@plt+0x1694>
   126d8:	mov	r0, #0
   126dc:	add	r4, pc, r4
   126e0:	ldr	r8, [pc, #1852]	; 12e24 <__assert_fail@plt+0x1698>
   126e4:	add	r9, pc, r9
   126e8:	str	r4, [sp, #100]	; 0x64
   126ec:	str	r9, [sp, #108]	; 0x6c
   126f0:	mov	r9, #0
   126f4:	ldr	r4, [pc, #1836]	; 12e28 <__assert_fail@plt+0x169c>
   126f8:	mov	fp, r9
   126fc:	add	r8, pc, r8
   12700:	mov	r1, #0
   12704:	add	r4, pc, r4
   12708:	str	r8, [sp, #60]	; 0x3c
   1270c:	str	r3, [sp, #104]	; 0x68
   12710:	strd	r0, [sp, #24]
   12714:	str	r4, [sp, #112]	; 0x70
   12718:	str	r9, [sp, #64]	; 0x40
   1271c:	str	r9, [sp, #96]	; 0x60
   12720:	ldrd	r8, [sp, #32]
   12724:	cmp	r8, #0
   12728:	sbcs	r9, r9, #0
   1272c:	blt	12b74 <__assert_fail@plt+0x13e8>
   12730:	ldrd	r8, [sp, #24]
   12734:	ldrd	r0, [sp, #32]
   12738:	subs	r0, r0, r8
   1273c:	sbc	r1, r1, r9
   12740:	ldr	r8, [sp, #84]	; 0x54
   12744:	mov	r9, #0
   12748:	mov	r3, r9
   1274c:	mov	r2, r8
   12750:	cmp	r0, r2
   12754:	sbcs	r9, r1, r3
   12758:	bge	12b74 <__assert_fail@plt+0x13e8>
   1275c:	ldrd	r8, [sp, #32]
   12760:	ldrd	r0, [sp, #24]
   12764:	cmp	r8, r0
   12768:	sbcs	r1, r9, r1
   1276c:	blt	12a88 <__assert_fail@plt+0x12fc>
   12770:	ldr	r2, [sp, #24]
   12774:	subs	r6, r8, r2
   12778:	beq	12a88 <__assert_fail@plt+0x12fc>
   1277c:	ldr	r4, [sp, #48]	; 0x30
   12780:	cmp	r4, #0
   12784:	blt	12b84 <__assert_fail@plt+0x13f8>
   12788:	ldr	r9, [sp, #36]	; 0x24
   1278c:	mov	r4, #0
   12790:	add	r8, sp, #1424	; 0x590
   12794:	cmp	r9, r4
   12798:	add	r8, r8, #8
   1279c:	str	r8, [sp, #52]	; 0x34
   127a0:	movlt	r9, #0
   127a4:	movge	r9, #1
   127a8:	str	r9, [sp, #56]	; 0x38
   127ac:	b	127bc <__assert_fail@plt+0x1030>
   127b0:	add	r4, r4, ip
   127b4:	cmp	r6, r4
   127b8:	bls	128d0 <__assert_fail@plt+0x1144>
   127bc:	mov	r0, r7
   127c0:	add	r1, r5, r4
   127c4:	rsb	r2, r4, r6
   127c8:	bl	11678 <write@plt>
   127cc:	cmp	r0, #0
   127d0:	movgt	ip, r0
   127d4:	bgt	127b0 <__assert_fail@plt+0x1024>
   127d8:	ldrd	r8, [sp, #32]
   127dc:	cmp	r8, #0
   127e0:	sbcs	r9, r9, #0
   127e4:	blt	12aec <__assert_fail@plt+0x1360>
   127e8:	bl	11618 <__errno_location@plt>
   127ec:	ldr	sl, [r0]
   127f0:	mov	r8, r0
   127f4:	ldr	r9, [sp, #2132]	; 0x854
   127f8:	eor	r3, fp, #1
   127fc:	cmp	r9, #1
   12800:	movne	r3, #0
   12804:	andeq	r3, r3, #1
   12808:	cmp	r3, #0
   1280c:	beq	12818 <__assert_fail@plt+0x108c>
   12810:	cmp	sl, #22
   12814:	beq	12bc8 <__assert_fail@plt+0x143c>
   12818:	ldr	r1, [sp, #60]	; 0x3c
   1281c:	mov	r2, #5
   12820:	mov	r0, #0
   12824:	bl	1148c <dcgettext@plt>
   12828:	add	r2, sp, #1424	; 0x590
   1282c:	add	r2, r2, #8
   12830:	mov	r9, r0
   12834:	ldrd	r0, [sp, #24]
   12838:	adds	r0, r0, r4
   1283c:	adc	r1, r1, #0
   12840:	bl	14a00 <close_stdout@@Base+0xf20>
   12844:	mov	r2, r9
   12848:	mov	r1, sl
   1284c:	ldr	r3, [sp, #44]	; 0x2c
   12850:	str	r0, [sp]
   12854:	mov	r0, #0
   12858:	bl	1154c <error@plt>
   1285c:	ldr	ip, [sp, #56]	; 0x38
   12860:	cmp	sl, #5
   12864:	movne	ip, #0
   12868:	andeq	ip, ip, #1
   1286c:	cmp	ip, #0
   12870:	beq	12b54 <__assert_fail@plt+0x13c8>
   12874:	mvn	ip, r4, lsr #9
   12878:	mvn	ip, ip, lsl #9
   1287c:	cmp	r6, ip
   12880:	bls	12b54 <__assert_fail@plt+0x13c8>
   12884:	ldrd	r2, [sp, #24]
   12888:	add	sl, ip, #1
   1288c:	mov	r0, r7
   12890:	mov	ip, #0
   12894:	adds	r2, r2, sl
   12898:	str	ip, [sp]
   1289c:	adc	r3, r3, #0
   128a0:	bl	114f8 <lseek64@plt>
   128a4:	mvn	r2, #0
   128a8:	mvn	r3, #0
   128ac:	cmp	r1, r3
   128b0:	cmpeq	r0, r2
   128b4:	beq	12b98 <__assert_fail@plt+0x140c>
   128b8:	rsb	ip, r4, sl
   128bc:	mov	r8, #1
   128c0:	add	r4, r4, ip
   128c4:	str	r8, [sp, #64]	; 0x40
   128c8:	cmp	r6, r4
   128cc:	bhi	127bc <__assert_fail@plt+0x1030>
   128d0:	mov	r0, r4
   128d4:	mov	r1, #0
   128d8:	ldrd	r8, [sp, #24]
   128dc:	mvn	r2, #0
   128e0:	mvn	r3, #-2147483648	; 0x80000000
   128e4:	subs	r2, r2, r0
   128e8:	sbc	r3, r3, r1
   128ec:	cmp	r2, r8
   128f0:	sbcs	r9, r3, r9
   128f4:	blt	12b2c <__assert_fail@plt+0x13a0>
   128f8:	ldrd	r8, [sp, #24]
   128fc:	adds	r8, r8, r0
   12900:	adc	r9, r9, r1
   12904:	strd	r8, [sp, #24]
   12908:	ldr	r9, [sp, #2136]	; 0x858
   1290c:	cmp	r9, #0
   12910:	beq	12720 <__assert_fail@plt+0xf94>
   12914:	ldrd	r8, [sp, #24]
   12918:	ldrd	r0, [sp, #32]
   1291c:	cmp	r9, r1
   12920:	cmpeq	r8, r0
   12924:	movne	r6, #0
   12928:	moveq	r6, #1
   1292c:	bne	12d24 <__assert_fail@plt+0x1598>
   12930:	ldr	r4, [sp, #100]	; 0x64
   12934:	ldrb	r3, [r4]
   12938:	cmp	r3, #0
   1293c:	beq	12d24 <__assert_fail@plt+0x1598>
   12940:	mov	r0, #1
   12944:	mov	r1, #0
   12948:	add	r2, sp, #780	; 0x30c
   1294c:	strd	r0, [sp]
   12950:	strd	r0, [sp, #8]
   12954:	movw	r3, #434	; 0x1b2
   12958:	ldrd	r0, [sp, #24]
   1295c:	bl	13dd8 <close_stdout@@Base+0x2f8>
   12960:	mov	r4, r0
   12964:	ldrd	r8, [sp, #32]
   12968:	cmp	r8, #0
   1296c:	sbcs	r9, r9, #0
   12970:	blt	12db4 <__assert_fail@plt+0x1628>
   12974:	ldrd	r8, [sp, #32]
   12978:	orrs	r9, r8, r9
   1297c:	moveq	sl, #100	; 0x64
   12980:	beq	129bc <__assert_fail@plt+0x1230>
   12984:	ldrd	r8, [sp, #24]
   12988:	movw	r0, #36700	; 0x8f5c
   1298c:	movw	r1, #23592	; 0x5c28
   12990:	movt	r0, #62914	; 0xf5c2
   12994:	movt	r1, #655	; 0x28f
   12998:	cmp	r9, r1
   1299c:	cmpeq	r8, r0
   129a0:	bhi	12d8c <__assert_fail@plt+0x1600>
   129a4:	mov	ip, #100	; 0x64
   129a8:	ldrd	r2, [sp, #32]
   129ac:	umull	r0, r1, r8, ip
   129b0:	mla	r1, ip, r9, r1
   129b4:	bl	18c54 <close_stdout@@Base+0x5174>
   129b8:	mov	sl, r0
   129bc:	add	r2, sp, #1424	; 0x590
   129c0:	mov	r8, #1
   129c4:	mov	r9, #0
   129c8:	mov	r3, #432	; 0x1b0
   129cc:	strd	r8, [sp]
   129d0:	add	r2, r2, #8
   129d4:	strd	r8, [sp, #8]
   129d8:	ldrd	r0, [sp, #32]
   129dc:	bl	13dd8 <close_stdout@@Base+0x2f8>
   129e0:	ldr	r1, [sp, #108]	; 0x6c
   129e4:	mov	r2, #5
   129e8:	mov	r9, r0
   129ec:	mov	r0, #0
   129f0:	cmp	r6, r0
   129f4:	movne	r4, r9
   129f8:	bl	1148c <dcgettext@plt>
   129fc:	str	r9, [sp, #16]
   12a00:	ldr	r8, [sp, #2132]	; 0x854
   12a04:	ldr	r9, [sp, #2136]	; 0x858
   12a08:	ldr	ip, [sp, #88]	; 0x58
   12a0c:	str	r4, [sp, #12]
   12a10:	str	r8, [sp]
   12a14:	str	r9, [sp, #4]
   12a18:	ldr	r3, [sp, #44]	; 0x2c
   12a1c:	str	ip, [sp, #8]
   12a20:	str	sl, [sp, #20]
   12a24:	mov	r2, r0
   12a28:	mov	r0, #0
   12a2c:	mov	r1, r0
   12a30:	bl	1154c <error@plt>
   12a34:	mov	r1, r4
   12a38:	ldr	r4, [sp, #96]	; 0x60
   12a3c:	mov	r2, #652	; 0x28c
   12a40:	ldr	r0, [sp, #104]	; 0x68
   12a44:	add	r4, r4, #5
   12a48:	str	r4, [sp, #116]	; 0x74
   12a4c:	bl	11528 <__strcpy_chk@plt>
   12a50:	mov	r0, r7
   12a54:	ldr	r1, [sp, #44]	; 0x2c
   12a58:	bl	12380 <__assert_fail@plt+0xbf4>
   12a5c:	cmp	r0, #0
   12a60:	beq	12d80 <__assert_fail@plt+0x15f4>
   12a64:	bl	11618 <__errno_location@plt>
   12a68:	ldr	r3, [r0]
   12a6c:	cmp	r3, #5
   12a70:	bne	12b54 <__assert_fail@plt+0x13c8>
   12a74:	ldr	r9, [sp, #104]	; 0x68
   12a78:	mov	ip, #1
   12a7c:	str	ip, [sp, #64]	; 0x40
   12a80:	str	r9, [sp, #100]	; 0x64
   12a84:	b	12720 <__assert_fail@plt+0xf94>
   12a88:	mov	r0, r7
   12a8c:	ldr	r1, [sp, #44]	; 0x2c
   12a90:	bl	12380 <__assert_fail@plt+0xbf4>
   12a94:	cmp	r0, #0
   12a98:	beq	12df8 <__assert_fail@plt+0x166c>
   12a9c:	bl	11618 <__errno_location@plt>
   12aa0:	ldr	r3, [r0]
   12aa4:	cmp	r3, #5
   12aa8:	moveq	r4, #1
   12aac:	bne	12b54 <__assert_fail@plt+0x13c8>
   12ab0:	mov	r0, r5
   12ab4:	ldr	r2, [sp, #72]	; 0x48
   12ab8:	mov	r1, #0
   12abc:	bl	11654 <memset@plt>
   12ac0:	ldr	r0, [sp, #80]	; 0x50
   12ac4:	bl	1142c <free@plt>
   12ac8:	mov	r0, r4
   12acc:	ldr	r4, [sp, #68]	; 0x44
   12ad0:	ldr	r2, [sp, #2084]	; 0x824
   12ad4:	ldr	r3, [r4]
   12ad8:	cmp	r2, r3
   12adc:	bne	12e00 <__assert_fail@plt+0x1674>
   12ae0:	add	sp, sp, #2080	; 0x820
   12ae4:	add	sp, sp, #12
   12ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aec:	cmp	r0, #0
   12af0:	beq	12b08 <__assert_fail@plt+0x137c>
   12af4:	bl	11618 <__errno_location@plt>
   12af8:	ldr	sl, [r0]
   12afc:	mov	r8, r0
   12b00:	cmp	sl, #28
   12b04:	bne	127f4 <__assert_fail@plt+0x1068>
   12b08:	ldrd	r8, [sp, #24]
   12b0c:	mov	r1, #0
   12b10:	ldr	ip, [sp, #76]	; 0x4c
   12b14:	mov	r0, r4
   12b18:	adds	r8, r8, r4
   12b1c:	adc	r9, r9, r1
   12b20:	strd	r8, [sp, #32]
   12b24:	strd	r8, [ip]
   12b28:	b	128d8 <__assert_fail@plt+0x114c>
   12b2c:	ldr	r1, [pc, #760]	; 12e2c <__assert_fail@plt+0x16a0>
   12b30:	mov	r2, #5
   12b34:	mov	r0, #0
   12b38:	add	r1, pc, r1
   12b3c:	bl	1148c <dcgettext@plt>
   12b40:	ldr	r3, [sp, #44]	; 0x2c
   12b44:	mov	r2, r0
   12b48:	mov	r0, #0
   12b4c:	mov	r1, r0
   12b50:	bl	1154c <error@plt>
   12b54:	mov	r0, r5
   12b58:	ldr	r2, [sp, #72]	; 0x48
   12b5c:	mov	r1, #0
   12b60:	mvn	r4, #0
   12b64:	bl	11654 <memset@plt>
   12b68:	ldr	r0, [sp, #80]	; 0x50
   12b6c:	bl	1142c <free@plt>
   12b70:	b	12ac8 <__assert_fail@plt+0x133c>
   12b74:	ldr	r4, [sp, #48]	; 0x30
   12b78:	ldr	r6, [sp, #84]	; 0x54
   12b7c:	cmp	r4, #0
   12b80:	bge	12788 <__assert_fail@plt+0xffc>
   12b84:	ldr	r0, [sp, #92]	; 0x5c
   12b88:	mov	r1, r5
   12b8c:	mov	r2, r6
   12b90:	bl	16878 <close_stdout@@Base+0x2d98>
   12b94:	b	12788 <__assert_fail@plt+0xffc>
   12b98:	ldr	r1, [pc, #656]	; 12e30 <__assert_fail@plt+0x16a4>
   12b9c:	mov	r2, #5
   12ba0:	mov	r0, #0
   12ba4:	ldr	r4, [r8]
   12ba8:	add	r1, pc, r1
   12bac:	bl	1148c <dcgettext@plt>
   12bb0:	ldr	r3, [sp, #44]	; 0x2c
   12bb4:	mov	r1, r4
   12bb8:	mov	r2, r0
   12bbc:	mov	r0, #0
   12bc0:	bl	1154c <error@plt>
   12bc4:	b	12b54 <__assert_fail@plt+0x13c8>
   12bc8:	mov	r0, r7
   12bcc:	mov	r1, #0
   12bd0:	bl	12340 <__assert_fail@plt+0xbb4>
   12bd4:	mov	fp, #1
   12bd8:	mov	ip, #0
   12bdc:	b	127b0 <__assert_fail@plt+0x1024>
   12be0:	ldr	r3, [pc, #588]	; 12e34 <__assert_fail@plt+0x16a8>
   12be4:	add	r9, sp, #120	; 0x78
   12be8:	mov	ip, #2
   12bec:	mov	r4, #65536	; 0x10000
   12bf0:	add	r3, pc, r3
   12bf4:	movt	ip, #1
   12bf8:	str	r9, [sp, #88]	; 0x58
   12bfc:	ldm	r3, {r0, r1}
   12c00:	str	ip, [sp, #72]	; 0x48
   12c04:	lsr	r3, r1, #16
   12c08:	str	r4, [sp, #84]	; 0x54
   12c0c:	str	r0, [sp, #120]	; 0x78
   12c10:	strh	r1, [sp, #124]	; 0x7c
   12c14:	strb	r3, [sp, #126]	; 0x7e
   12c18:	b	126c0 <__assert_fail@plt+0xf34>
   12c1c:	ldr	r1, [pc, #532]	; 12e38 <__assert_fail@plt+0x16ac>
   12c20:	mov	r2, #5
   12c24:	mov	r0, #0
   12c28:	add	r1, pc, r1
   12c2c:	bl	1148c <dcgettext@plt>
   12c30:	ldr	ip, [sp, #88]	; 0x58
   12c34:	ldr	r9, [sp, #2132]	; 0x854
   12c38:	ldr	r3, [sp, #44]	; 0x2c
   12c3c:	str	ip, [sp, #8]
   12c40:	str	r9, [sp]
   12c44:	str	r8, [sp, #4]
   12c48:	mov	r2, r0
   12c4c:	mov	r0, #0
   12c50:	mov	r1, r0
   12c54:	bl	1154c <error@plt>
   12c58:	mov	r0, #0
   12c5c:	bl	11468 <time@plt>
   12c60:	add	r0, r0, #5
   12c64:	str	r0, [sp, #116]	; 0x74
   12c68:	b	126cc <__assert_fail@plt+0xf40>
   12c6c:	add	r0, r5, r8
   12c70:	rsb	r2, r8, r6
   12c74:	mov	r1, r5
   12c78:	bl	11444 <memcpy@plt>
   12c7c:	b	1265c <__assert_fail@plt+0xed0>
   12c80:	cmp	r8, sl
   12c84:	bne	124ec <__assert_fail@plt+0xd60>
   12c88:	add	r0, r0, #65536	; 0x10000
   12c8c:	sub	r5, r6, #1
   12c90:	add	r0, r0, #1
   12c94:	bl	17420 <close_stdout@@Base+0x3940>
   12c98:	mov	r1, r6
   12c9c:	add	r5, r0, r5
   12ca0:	str	r0, [sp, #80]	; 0x50
   12ca4:	mov	r0, r5
   12ca8:	bl	18834 <close_stdout@@Base+0x4d54>
   12cac:	mov	r3, #0
   12cb0:	mov	r2, #0
   12cb4:	str	r3, [sp]
   12cb8:	mov	r0, r7
   12cbc:	mov	r3, #0
   12cc0:	rsb	r5, r1, r5
   12cc4:	bl	114f8 <lseek64@plt>
   12cc8:	mvn	r2, #0
   12ccc:	mvn	r3, #0
   12cd0:	cmp	r1, r3
   12cd4:	cmpeq	r0, r2
   12cd8:	bne	125c0 <__assert_fail@plt+0xe34>
   12cdc:	mov	r9, #2
   12ce0:	movt	r9, #1
   12ce4:	str	r9, [sp, #72]	; 0x48
   12ce8:	bl	11618 <__errno_location@plt>
   12cec:	ldr	r1, [pc, #328]	; 12e3c <__assert_fail@plt+0x16b0>
   12cf0:	mov	r2, #5
   12cf4:	add	r1, pc, r1
   12cf8:	ldr	r4, [r0]
   12cfc:	mov	r0, #0
   12d00:	bl	1148c <dcgettext@plt>
   12d04:	ldr	r3, [sp, #44]	; 0x2c
   12d08:	mov	r1, r4
   12d0c:	mov	r2, r0
   12d10:	mov	r0, #0
   12d14:	bl	1154c <error@plt>
   12d18:	b	12b54 <__assert_fail@plt+0x13c8>
   12d1c:	ldr	r6, [sp, #72]	; 0x48
   12d20:	b	1261c <__assert_fail@plt+0xe90>
   12d24:	mov	r0, #0
   12d28:	bl	11468 <time@plt>
   12d2c:	ldr	r8, [sp, #116]	; 0x74
   12d30:	cmp	r8, r0
   12d34:	str	r0, [sp, #96]	; 0x60
   12d38:	bgt	12720 <__assert_fail@plt+0xf94>
   12d3c:	mov	r0, #1
   12d40:	mov	r1, #0
   12d44:	add	r2, sp, #780	; 0x30c
   12d48:	strd	r0, [sp]
   12d4c:	strd	r0, [sp, #8]
   12d50:	movw	r3, #434	; 0x1b2
   12d54:	ldrd	r0, [sp, #24]
   12d58:	bl	13dd8 <close_stdout@@Base+0x2f8>
   12d5c:	cmp	r6, #0
   12d60:	mov	r4, r0
   12d64:	bne	12964 <__assert_fail@plt+0x11d8>
   12d68:	ldr	r0, [sp, #100]	; 0x64
   12d6c:	mov	r1, r4
   12d70:	bl	113f0 <strcmp@plt>
   12d74:	cmp	r0, #0
   12d78:	beq	12720 <__assert_fail@plt+0xf94>
   12d7c:	b	12964 <__assert_fail@plt+0x11d8>
   12d80:	ldr	r8, [sp, #104]	; 0x68
   12d84:	str	r8, [sp, #100]	; 0x64
   12d88:	b	12720 <__assert_fail@plt+0xf94>
   12d8c:	mov	r2, #100	; 0x64
   12d90:	mov	r3, #0
   12d94:	ldrd	r0, [sp, #32]
   12d98:	bl	18c0c <close_stdout@@Base+0x512c>
   12d9c:	mov	r2, r0
   12da0:	mov	r3, r1
   12da4:	ldrd	r0, [sp, #24]
   12da8:	bl	18c54 <close_stdout@@Base+0x5174>
   12dac:	mov	sl, r0
   12db0:	b	129bc <__assert_fail@plt+0x1230>
   12db4:	ldr	r1, [sp, #112]	; 0x70
   12db8:	mov	r2, #5
   12dbc:	mov	r0, #0
   12dc0:	bl	1148c <dcgettext@plt>
   12dc4:	ldr	ip, [sp, #2132]	; 0x854
   12dc8:	ldr	r8, [sp, #2136]	; 0x858
   12dcc:	ldr	r9, [sp, #88]	; 0x58
   12dd0:	str	ip, [sp]
   12dd4:	str	r8, [sp, #4]
   12dd8:	ldr	r3, [sp, #44]	; 0x2c
   12ddc:	str	r9, [sp, #8]
   12de0:	str	r4, [sp, #12]
   12de4:	mov	r2, r0
   12de8:	mov	r0, #0
   12dec:	mov	r1, r0
   12df0:	bl	1154c <error@plt>
   12df4:	b	12a34 <__assert_fail@plt+0x12a8>
   12df8:	ldr	r4, [sp, #64]	; 0x40
   12dfc:	b	12ab0 <__assert_fail@plt+0x1324>
   12e00:	bl	11498 <__stack_chk_fail@plt>
   12e04:	mov	r8, #61440	; 0xf000
   12e08:	str	r8, [sp, #72]	; 0x48
   12e0c:	b	12ce8 <__assert_fail@plt+0x155c>
   12e10:	andeq	r9, r1, r0, lsl #23
   12e14:	andeq	r0, r0, ip, asr r1
   12e18:	andeq	r7, r0, r8, lsl #3
   12e1c:	andeq	r7, r0, ip, lsr #16
   12e20:	ldrdeq	r7, [r0], -r8
   12e24:	andeq	r7, r0, ip, asr r1
   12e28:	muleq	r0, ip, r1
   12e2c:	andeq	r6, r0, r4, asr sp
   12e30:	ldrdeq	r6, [r0], -r0
   12e34:	strdeq	r6, [r0], -r0
   12e38:	andeq	r6, r0, r4, lsl ip
   12e3c:	andeq	r6, r0, r4, lsr #22
   12e40:	ldr	ip, [pc, #1476]	; 1340c <__assert_fail@plt+0x1c80>
   12e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e48:	add	ip, pc, ip
   12e4c:	ldr	lr, [pc, #1468]	; 13410 <__assert_fail@plt+0x1c84>
   12e50:	sub	sp, sp, #188	; 0xbc
   12e54:	mov	r8, r0
   12e58:	ldrb	r0, [r3, #20]
   12e5c:	str	r2, [sp, #32]
   12e60:	mov	r6, r3
   12e64:	str	r1, [sp, #36]	; 0x24
   12e68:	mov	r3, ip
   12e6c:	ldr	lr, [ip, lr]
   12e70:	cmp	r0, #0
   12e74:	mov	r1, r8
   12e78:	streq	r0, [sp, #44]	; 0x2c
   12e7c:	ldrbne	r2, [r6, #22]
   12e80:	mov	r0, #3
   12e84:	ldr	r3, [lr]
   12e88:	str	lr, [sp, #28]
   12e8c:	str	r3, [sp, #180]	; 0xb4
   12e90:	ldrne	r3, [r6, #4]
   12e94:	addne	r3, r2, r3
   12e98:	add	r2, sp, #72	; 0x48
   12e9c:	strne	r3, [sp, #44]	; 0x2c
   12ea0:	bl	114d4 <__fxstat64@plt>
   12ea4:	cmp	r0, #0
   12ea8:	bne	12ff4 <__assert_fail@plt+0x1868>
   12eac:	ldr	r3, [sp, #88]	; 0x58
   12eb0:	and	r3, r3, #61440	; 0xf000
   12eb4:	cmp	r3, #8192	; 0x2000
   12eb8:	beq	132e4 <__assert_fail@plt+0x1b58>
   12ebc:	cmp	r3, #4096	; 0x1000
   12ec0:	beq	12f8c <__assert_fail@plt+0x1800>
   12ec4:	cmp	r3, #49152	; 0xc000
   12ec8:	beq	12f8c <__assert_fail@plt+0x1800>
   12ecc:	mov	r0, r8
   12ed0:	mov	r1, #1
   12ed4:	bl	12340 <__assert_fail@plt+0xbb4>
   12ed8:	ldr	r0, [r6, #4]
   12edc:	cmn	r0, #-1073741823	; 0xc0000001
   12ee0:	bhi	13408 <__assert_fail@plt+0x1c7c>
   12ee4:	lsl	r0, r0, #2
   12ee8:	bl	17420 <close_stdout@@Base+0x3940>
   12eec:	ldrd	r4, [r6, #8]
   12ef0:	mvn	r2, #0
   12ef4:	mvn	r3, #0
   12ef8:	cmp	r5, r3
   12efc:	cmpeq	r4, r2
   12f00:	strd	r4, [sp, #64]	; 0x40
   12f04:	mov	r7, r0
   12f08:	beq	1302c <__assert_fail@plt+0x18a0>
   12f0c:	ldr	r0, [r6, #4]
   12f10:	cmp	r0, #0
   12f14:	str	r0, [sp, #40]	; 0x28
   12f18:	beq	132b4 <__assert_fail@plt+0x1b28>
   12f1c:	ldr	r4, [pc, #1264]	; 13414 <__assert_fail@plt+0x1c88>
   12f20:	mov	r1, #0
   12f24:	ldr	sl, [pc, #1260]	; 13418 <__assert_fail@plt+0x1c8c>
   12f28:	mov	fp, r0
   12f2c:	add	r4, pc, r4
   12f30:	mov	r9, r7
   12f34:	add	sl, pc, sl
   12f38:	str	r1, [sp, #24]
   12f3c:	b	12f44 <__assert_fail@plt+0x17b8>
   12f40:	mov	r4, sl
   12f44:	ldr	r5, [r4]
   12f48:	cmp	r5, #0
   12f4c:	beq	12f40 <__assert_fail@plt+0x17b4>
   12f50:	add	r4, r4, #4
   12f54:	blt	12fd4 <__assert_fail@plt+0x1848>
   12f58:	cmp	r5, fp
   12f5c:	bhi	130b4 <__assert_fail@plt+0x1928>
   12f60:	lsl	r3, r5, #2
   12f64:	mov	r0, r9
   12f68:	mov	r1, r4
   12f6c:	add	r9, r9, r3
   12f70:	mov	r2, r3
   12f74:	str	r3, [sp, #20]
   12f78:	bl	11444 <memcpy@plt>
   12f7c:	ldr	r3, [sp, #20]
   12f80:	rsb	fp, r5, fp
   12f84:	add	r4, r4, r3
   12f88:	b	12f44 <__assert_fail@plt+0x17b8>
   12f8c:	ldr	r1, [pc, #1160]	; 1341c <__assert_fail@plt+0x1c90>
   12f90:	mov	r0, #0
   12f94:	add	r1, pc, r1
   12f98:	mov	r2, #5
   12f9c:	bl	1148c <dcgettext@plt>
   12fa0:	ldr	r3, [sp, #36]	; 0x24
   12fa4:	mov	r2, r0
   12fa8:	mov	r0, #0
   12fac:	mov	r1, r0
   12fb0:	bl	1154c <error@plt>
   12fb4:	mov	r0, #0
   12fb8:	ldr	r1, [sp, #28]
   12fbc:	ldr	r2, [sp, #180]	; 0xb4
   12fc0:	ldr	r3, [r1]
   12fc4:	cmp	r2, r3
   12fc8:	bne	13404 <__assert_fail@plt+0x1c78>
   12fcc:	add	sp, sp, #188	; 0xbc
   12fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fd4:	rsb	r5, r5, #0
   12fd8:	cmp	r5, fp
   12fdc:	bcs	133b8 <__assert_fail@plt+0x1c2c>
   12fe0:	ldr	r3, [sp, #24]
   12fe4:	rsb	fp, r5, fp
   12fe8:	add	r3, r3, r5
   12fec:	str	r3, [sp, #24]
   12ff0:	b	12f44 <__assert_fail@plt+0x17b8>
   12ff4:	bl	11618 <__errno_location@plt>
   12ff8:	ldr	r1, [pc, #1056]	; 13420 <__assert_fail@plt+0x1c94>
   12ffc:	add	r1, pc, r1
   13000:	ldr	r4, [r0]
   13004:	mov	r2, #5
   13008:	mov	r0, #0
   1300c:	bl	1148c <dcgettext@plt>
   13010:	ldr	r3, [sp, #36]	; 0x24
   13014:	mov	r1, r4
   13018:	mov	r2, r0
   1301c:	mov	r0, #0
   13020:	bl	1154c <error@plt>
   13024:	mov	r0, #0
   13028:	b	12fb8 <__assert_fail@plt+0x182c>
   1302c:	ldr	r3, [sp, #88]	; 0x58
   13030:	and	r3, r3, #61440	; 0xf000
   13034:	cmp	r3, #32768	; 0x8000
   13038:	bne	13310 <__assert_fail@plt+0x1b84>
   1303c:	ldrd	r4, [sp, #120]	; 0x78
   13040:	cmp	r4, #0
   13044:	sbcs	r0, r5, #0
   13048:	strd	r4, [sp, #64]	; 0x40
   1304c:	blt	133e4 <__assert_fail@plt+0x1c58>
   13050:	ldrb	r3, [r6, #21]
   13054:	cmp	r3, #0
   13058:	bne	12f0c <__assert_fail@plt+0x1780>
   1305c:	ldr	r3, [sp, #88]	; 0x58
   13060:	and	r3, r3, #61440	; 0xf000
   13064:	cmp	r3, #32768	; 0x8000
   13068:	bne	12f0c <__assert_fail@plt+0x1780>
   1306c:	ldr	r2, [sp, #128]	; 0x80
   13070:	sub	sl, r2, #1
   13074:	cmn	sl, #-536870911	; 0xe0000001
   13078:	bhi	133c8 <__assert_fail@plt+0x1c3c>
   1307c:	subs	r0, r4, #1
   13080:	asr	fp, sl, #31
   13084:	sbc	r1, r5, #0
   13088:	asr	r3, r2, #31
   1308c:	bl	18c0c <close_stdout@@Base+0x512c>
   13090:	subs	r2, sl, r2
   13094:	sbc	r3, fp, r3
   13098:	adds	r4, r4, r2
   1309c:	adc	r5, r5, r3
   130a0:	cmp	r4, #0
   130a4:	sbcs	r3, r5, #0
   130a8:	blt	133f4 <__assert_fail@plt+0x1c68>
   130ac:	strd	r4, [sp, #64]	; 0x40
   130b0:	b	12f0c <__assert_fail@plt+0x1780>
   130b4:	cmp	fp, #1
   130b8:	bls	13300 <__assert_fail@plt+0x1b74>
   130bc:	add	r3, fp, fp, lsl #1
   130c0:	cmp	r3, r5
   130c4:	bcc	13300 <__assert_fail@plt+0x1b74>
   130c8:	subs	r0, r5, #1
   130cc:	asr	r3, r5, #31
   130d0:	add	r4, r4, #4
   130d4:	sbc	r1, r3, #0
   130d8:	str	r7, [sp, #56]	; 0x38
   130dc:	mov	sl, r0
   130e0:	ldr	r7, [sp, #32]
   130e4:	str	r6, [sp, #60]	; 0x3c
   130e8:	mov	r6, r5
   130ec:	mov	r5, r4
   130f0:	mov	r4, fp
   130f4:	mov	fp, r1
   130f8:	strd	r0, [sp, #48]	; 0x30
   130fc:	cmp	r6, r4
   13100:	beq	13128 <__assert_fail@plt+0x199c>
   13104:	mov	r2, sl
   13108:	mov	r3, fp
   1310c:	mov	r0, r7
   13110:	bl	16308 <close_stdout@@Base+0x2828>
   13114:	mov	r2, r4
   13118:	mov	r3, #0
   1311c:	cmp	r1, r3
   13120:	cmpeq	r0, r2
   13124:	bcs	13138 <__assert_fail@plt+0x19ac>
   13128:	ldr	r3, [r5, #-4]
   1312c:	sub	r4, r4, #1
   13130:	add	r9, r9, #4
   13134:	str	r3, [r9, #-4]
   13138:	cmp	r4, #0
   1313c:	add	r5, r5, #4
   13140:	bne	130fc <__assert_fail@plt+0x1970>
   13144:	ldr	r7, [sp, #56]	; 0x38
   13148:	ldr	r6, [sp, #60]	; 0x3c
   1314c:	ldr	r2, [sp, #24]
   13150:	mov	r4, #0
   13154:	ldr	r3, [sp, #40]	; 0x28
   13158:	sub	fp, r2, #1
   1315c:	str	r6, [sp, #24]
   13160:	sub	ip, r3, #1
   13164:	rsb	sl, r2, r3
   13168:	mov	r5, fp
   1316c:	mov	r9, r3
   13170:	mov	r6, ip
   13174:	b	131a0 <__assert_fail@plt+0x1a14>
   13178:	ldr	r3, [r7, r4, lsl #2]
   1317c:	mvn	r1, #0
   13180:	add	r5, r5, r6
   13184:	rsb	r5, fp, r5
   13188:	str	r3, [r7, sl, lsl #2]
   1318c:	add	sl, sl, #1
   13190:	str	r1, [r7, r4, lsl #2]
   13194:	add	r4, r4, #1
   13198:	cmp	r4, r9
   1319c:	beq	131e4 <__assert_fail@plt+0x1a58>
   131a0:	cmp	r5, fp
   131a4:	bls	13178 <__assert_fail@plt+0x19ec>
   131a8:	rsb	r2, r4, sl
   131ac:	ldr	r0, [sp, #32]
   131b0:	subs	r2, r2, #1
   131b4:	mov	r3, #0
   131b8:	sbc	r3, r3, #0
   131bc:	rsb	r5, fp, r5
   131c0:	bl	16308 <close_stdout@@Base+0x2828>
   131c4:	ldr	r3, [r7, r4, lsl #2]
   131c8:	add	r0, r4, r0
   131cc:	ldr	r2, [r7, r0, lsl #2]
   131d0:	str	r2, [r7, r4, lsl #2]
   131d4:	add	r4, r4, #1
   131d8:	cmp	r4, r9
   131dc:	str	r3, [r7, r0, lsl #2]
   131e0:	bne	131a0 <__assert_fail@plt+0x1a14>
   131e4:	ldr	r6, [sp, #24]
   131e8:	ldr	r3, [r6, #4]
   131ec:	ldr	r0, [sp, #32]
   131f0:	sub	r4, r7, #4
   131f4:	str	r3, [sp, #20]
   131f8:	bl	16300 <close_stdout@@Base+0x2820>
   131fc:	mov	r9, #1
   13200:	str	r7, [sp, #32]
   13204:	str	r9, [sp, #24]
   13208:	mov	fp, #0
   1320c:	mov	r9, r4
   13210:	add	sl, sp, #64	; 0x40
   13214:	ldr	r7, [sp, #44]	; 0x2c
   13218:	ldr	r3, [sp, #20]
   1321c:	ldr	r4, [sp, #36]	; 0x24
   13220:	mov	r5, r0
   13224:	b	13264 <__assert_fail@plt+0x1ad8>
   13228:	ldr	r3, [r9, #4]!
   1322c:	add	fp, fp, #1
   13230:	str	r5, [sp]
   13234:	mov	r0, r8
   13238:	str	fp, [sp, #4]
   1323c:	mov	r1, r4
   13240:	str	r7, [sp, #8]
   13244:	mov	r2, sl
   13248:	bl	12460 <__assert_fail@plt+0xcd4>
   1324c:	cmp	r0, #0
   13250:	beq	13260 <__assert_fail@plt+0x1ad4>
   13254:	blt	132bc <__assert_fail@plt+0x1b30>
   13258:	mov	r2, #0
   1325c:	str	r2, [sp, #24]
   13260:	ldr	r3, [r6, #4]
   13264:	cmp	fp, r3
   13268:	bcc	13228 <__assert_fail@plt+0x1a9c>
   1326c:	ldr	r7, [sp, #32]
   13270:	lsl	r2, r3, #2
   13274:	mov	r1, #0
   13278:	str	r3, [sp, #20]
   1327c:	ldr	r9, [sp, #24]
   13280:	mov	r0, r7
   13284:	bl	11654 <memset@plt>
   13288:	mov	r0, r7
   1328c:	bl	1142c <free@plt>
   13290:	ldrb	r2, [r6, #22]
   13294:	ldr	r3, [sp, #20]
   13298:	cmp	r2, #0
   1329c:	bne	1337c <__assert_fail@plt+0x1bf0>
   132a0:	ldr	r3, [r6, #16]
   132a4:	cmp	r3, #0
   132a8:	bne	13344 <__assert_fail@plt+0x1bb8>
   132ac:	mov	r0, r9
   132b0:	b	12fb8 <__assert_fail@plt+0x182c>
   132b4:	ldr	r3, [sp, #40]	; 0x28
   132b8:	b	131ec <__assert_fail@plt+0x1a60>
   132bc:	ldr	r7, [sp, #32]
   132c0:	mov	r1, #0
   132c4:	ldr	r2, [r6, #4]
   132c8:	mov	r0, r7
   132cc:	lsl	r2, r2, #2
   132d0:	bl	11654 <memset@plt>
   132d4:	mov	r0, r7
   132d8:	bl	1142c <free@plt>
   132dc:	mov	r0, #0
   132e0:	b	12fb8 <__assert_fail@plt+0x182c>
   132e4:	mov	r0, r8
   132e8:	bl	11744 <isatty@plt>
   132ec:	cmp	r0, #0
   132f0:	bne	12f8c <__assert_fail@plt+0x1800>
   132f4:	ldr	r3, [sp, #88]	; 0x58
   132f8:	and	r3, r3, #61440	; 0xf000
   132fc:	b	12ebc <__assert_fail@plt+0x1730>
   13300:	ldr	r0, [sp, #24]
   13304:	add	r0, r0, fp
   13308:	str	r0, [sp, #24]
   1330c:	b	1314c <__assert_fail@plt+0x19c0>
   13310:	mov	r3, #2
   13314:	mov	r2, #0
   13318:	str	r3, [sp]
   1331c:	mov	r0, r8
   13320:	mov	r3, #0
   13324:	bl	114f8 <lseek64@plt>
   13328:	cmp	r0, #1
   1332c:	sbcs	r2, r1, #0
   13330:	blt	130ac <__assert_fail@plt+0x1920>
   13334:	strd	r0, [sp, #64]	; 0x40
   13338:	mov	r4, r0
   1333c:	mov	r5, r1
   13340:	b	13050 <__assert_fail@plt+0x18c4>
   13344:	mov	r0, r8
   13348:	mov	r2, #0
   1334c:	mov	r3, #0
   13350:	bl	11474 <ftruncate64@plt>
   13354:	cmp	r0, #0
   13358:	beq	132ac <__assert_fail@plt+0x1b20>
   1335c:	ldr	r3, [sp, #88]	; 0x58
   13360:	and	r3, r3, #61440	; 0xf000
   13364:	cmp	r3, #32768	; 0x8000
   13368:	bne	132ac <__assert_fail@plt+0x1b20>
   1336c:	bl	11618 <__errno_location@plt>
   13370:	ldr	r1, [pc, #172]	; 13424 <__assert_fail@plt+0x1c98>
   13374:	add	r1, pc, r1
   13378:	b	13000 <__assert_fail@plt+0x1874>
   1337c:	add	r3, r3, #1
   13380:	str	r3, [sp, #4]
   13384:	ldr	r3, [sp, #44]	; 0x2c
   13388:	mov	r0, r8
   1338c:	str	r5, [sp]
   13390:	add	r2, sp, #64	; 0x40
   13394:	ldr	r1, [sp, #36]	; 0x24
   13398:	str	r3, [sp, #8]
   1339c:	mov	r3, #0
   133a0:	bl	12460 <__assert_fail@plt+0xcd4>
   133a4:	cmp	r0, #0
   133a8:	beq	132a0 <__assert_fail@plt+0x1b14>
   133ac:	blt	13024 <__assert_fail@plt+0x1898>
   133b0:	mov	r9, #0
   133b4:	b	132a0 <__assert_fail@plt+0x1b14>
   133b8:	ldr	r2, [sp, #24]
   133bc:	add	r2, r2, fp
   133c0:	str	r2, [sp, #24]
   133c4:	b	1314c <__assert_fail@plt+0x19c0>
   133c8:	subs	r0, r4, #1
   133cc:	movw	sl, #511	; 0x1ff
   133d0:	sbc	r1, r5, #0
   133d4:	mov	fp, #0
   133d8:	mov	r2, #512	; 0x200
   133dc:	mov	r3, #0
   133e0:	b	1308c <__assert_fail@plt+0x1900>
   133e4:	ldr	r1, [pc, #60]	; 13428 <__assert_fail@plt+0x1c9c>
   133e8:	mov	r0, #0
   133ec:	add	r1, pc, r1
   133f0:	b	12f98 <__assert_fail@plt+0x180c>
   133f4:	mvn	r2, #0
   133f8:	mvn	r3, #-2147483648	; 0x80000000
   133fc:	strd	r2, [sp, #64]	; 0x40
   13400:	b	12f0c <__assert_fail@plt+0x1780>
   13404:	bl	11498 <__stack_chk_fail@plt>
   13408:	bl	17634 <close_stdout@@Base+0x3b54>
   1340c:			; <UNDEFINED> instruction: 0x000191b0
   13410:	andeq	r0, r0, ip, asr r1
   13414:	andeq	r6, r0, ip, lsl #15
   13418:	andeq	r6, r0, r4, lsl #15
   1341c:	andeq	r6, r0, r8, ror #18
   13420:	andeq	r6, r0, ip, ror #17
   13424:			; <UNDEFINED> instruction: 0x000065bc
   13428:	andeq	r6, r0, r8, lsr #10
   1342c:	push	{r4, r5, r6, lr}
   13430:	subs	r4, r0, #0
   13434:	ldr	r5, [pc, #660]	; 136d0 <__assert_fail@plt+0x1f44>
   13438:	add	r5, pc, r5
   1343c:	beq	13484 <__assert_fail@plt+0x1cf8>
   13440:	ldr	r3, [pc, #652]	; 136d4 <__assert_fail@plt+0x1f48>
   13444:	mov	r2, #5
   13448:	ldr	r1, [pc, #648]	; 136d8 <__assert_fail@plt+0x1f4c>
   1344c:	mov	r0, #0
   13450:	ldr	r3, [r5, r3]
   13454:	add	r1, pc, r1
   13458:	ldr	r6, [r3]
   1345c:	bl	1148c <dcgettext@plt>
   13460:	ldr	r3, [pc, #628]	; 136dc <__assert_fail@plt+0x1f50>
   13464:	mov	r1, #1
   13468:	ldr	r3, [r5, r3]
   1346c:	ldr	r3, [r3]
   13470:	mov	r2, r0
   13474:	mov	r0, r6
   13478:	bl	11690 <__fprintf_chk@plt>
   1347c:	mov	r0, r4
   13480:	bl	115d0 <exit@plt>
   13484:	ldr	r1, [pc, #596]	; 136e0 <__assert_fail@plt+0x1f54>
   13488:	mov	r2, #5
   1348c:	add	r1, pc, r1
   13490:	bl	1148c <dcgettext@plt>
   13494:	ldr	r3, [pc, #576]	; 136dc <__assert_fail@plt+0x1f50>
   13498:	ldr	r6, [r5, r3]
   1349c:	ldr	r2, [r6]
   134a0:	mov	r1, r0
   134a4:	mov	r0, #1
   134a8:	bl	1166c <__printf_chk@plt>
   134ac:	ldr	r1, [pc, #560]	; 136e4 <__assert_fail@plt+0x1f58>
   134b0:	mov	r2, #5
   134b4:	mov	r0, r4
   134b8:	add	r1, pc, r1
   134bc:	bl	1148c <dcgettext@plt>
   134c0:	ldr	r3, [pc, #544]	; 136e8 <__assert_fail@plt+0x1f5c>
   134c4:	ldr	r5, [r5, r3]
   134c8:	ldr	r1, [r5]
   134cc:	bl	113cc <fputs_unlocked@plt>
   134d0:	ldr	r1, [pc, #532]	; 136ec <__assert_fail@plt+0x1f60>
   134d4:	mov	r2, #5
   134d8:	mov	r0, r4
   134dc:	add	r1, pc, r1
   134e0:	bl	1148c <dcgettext@plt>
   134e4:	ldr	r1, [r5]
   134e8:	bl	113cc <fputs_unlocked@plt>
   134ec:	ldr	r1, [pc, #508]	; 136f0 <__assert_fail@plt+0x1f64>
   134f0:	mov	r2, #5
   134f4:	mov	r0, r4
   134f8:	add	r1, pc, r1
   134fc:	bl	1148c <dcgettext@plt>
   13500:	mov	r2, #3
   13504:	mov	r1, r0
   13508:	mov	r0, #1
   1350c:	bl	1166c <__printf_chk@plt>
   13510:	ldr	r1, [pc, #476]	; 136f4 <__assert_fail@plt+0x1f68>
   13514:	mov	r2, #5
   13518:	mov	r0, r4
   1351c:	add	r1, pc, r1
   13520:	bl	1148c <dcgettext@plt>
   13524:	ldr	r1, [r5]
   13528:	bl	113cc <fputs_unlocked@plt>
   1352c:	ldr	r1, [pc, #452]	; 136f8 <__assert_fail@plt+0x1f6c>
   13530:	mov	r2, #5
   13534:	mov	r0, r4
   13538:	add	r1, pc, r1
   1353c:	bl	1148c <dcgettext@plt>
   13540:	ldr	r1, [r5]
   13544:	bl	113cc <fputs_unlocked@plt>
   13548:	ldr	r1, [pc, #428]	; 136fc <__assert_fail@plt+0x1f70>
   1354c:	mov	r2, #5
   13550:	mov	r0, r4
   13554:	add	r1, pc, r1
   13558:	bl	1148c <dcgettext@plt>
   1355c:	ldr	r1, [r5]
   13560:	bl	113cc <fputs_unlocked@plt>
   13564:	ldr	r1, [pc, #404]	; 13700 <__assert_fail@plt+0x1f74>
   13568:	mov	r2, #5
   1356c:	mov	r0, r4
   13570:	add	r1, pc, r1
   13574:	bl	1148c <dcgettext@plt>
   13578:	ldr	r1, [r5]
   1357c:	bl	113cc <fputs_unlocked@plt>
   13580:	ldr	r1, [pc, #380]	; 13704 <__assert_fail@plt+0x1f78>
   13584:	mov	r2, #5
   13588:	mov	r0, r4
   1358c:	add	r1, pc, r1
   13590:	bl	1148c <dcgettext@plt>
   13594:	ldr	r1, [r5]
   13598:	bl	113cc <fputs_unlocked@plt>
   1359c:	ldr	r1, [pc, #356]	; 13708 <__assert_fail@plt+0x1f7c>
   135a0:	mov	r2, #5
   135a4:	mov	r0, r4
   135a8:	add	r1, pc, r1
   135ac:	bl	1148c <dcgettext@plt>
   135b0:	ldr	r1, [r5]
   135b4:	bl	113cc <fputs_unlocked@plt>
   135b8:	ldr	r1, [pc, #332]	; 1370c <__assert_fail@plt+0x1f80>
   135bc:	mov	r2, #5
   135c0:	mov	r0, r4
   135c4:	add	r1, pc, r1
   135c8:	bl	1148c <dcgettext@plt>
   135cc:	ldr	r1, [r5]
   135d0:	bl	113cc <fputs_unlocked@plt>
   135d4:	ldr	r1, [pc, #308]	; 13710 <__assert_fail@plt+0x1f84>
   135d8:	mov	r2, #5
   135dc:	mov	r0, r4
   135e0:	add	r1, pc, r1
   135e4:	bl	1148c <dcgettext@plt>
   135e8:	ldr	r1, [r5]
   135ec:	bl	113cc <fputs_unlocked@plt>
   135f0:	ldr	r1, [pc, #284]	; 13714 <__assert_fail@plt+0x1f88>
   135f4:	mov	r2, #5
   135f8:	mov	r0, r4
   135fc:	add	r1, pc, r1
   13600:	bl	1148c <dcgettext@plt>
   13604:	ldr	r1, [r5]
   13608:	bl	113cc <fputs_unlocked@plt>
   1360c:	ldr	r1, [pc, #260]	; 13718 <__assert_fail@plt+0x1f8c>
   13610:	mov	r2, #5
   13614:	mov	r0, r4
   13618:	add	r1, pc, r1
   1361c:	bl	1148c <dcgettext@plt>
   13620:	ldr	r2, [pc, #244]	; 1371c <__assert_fail@plt+0x1f90>
   13624:	ldr	r3, [pc, #244]	; 13720 <__assert_fail@plt+0x1f94>
   13628:	add	r2, pc, r2
   1362c:	add	r3, pc, r3
   13630:	mov	r1, r0
   13634:	mov	r0, #1
   13638:	bl	1166c <__printf_chk@plt>
   1363c:	mov	r0, #5
   13640:	mov	r1, r4
   13644:	bl	116cc <setlocale@plt>
   13648:	cmp	r0, #0
   1364c:	beq	13668 <__assert_fail@plt+0x1edc>
   13650:	ldr	r1, [pc, #204]	; 13724 <__assert_fail@plt+0x1f98>
   13654:	mov	r2, #3
   13658:	add	r1, pc, r1
   1365c:	bl	11750 <strncmp@plt>
   13660:	cmp	r0, #0
   13664:	bne	1369c <__assert_fail@plt+0x1f10>
   13668:	ldr	r1, [pc, #184]	; 13728 <__assert_fail@plt+0x1f9c>
   1366c:	mov	r2, #5
   13670:	mov	r0, #0
   13674:	add	r1, pc, r1
   13678:	bl	1148c <dcgettext@plt>
   1367c:	mov	r5, r0
   13680:	ldr	r0, [r6]
   13684:	bl	13cc8 <close_stdout@@Base+0x1e8>
   13688:	mov	r1, r5
   1368c:	mov	r2, r0
   13690:	mov	r0, #1
   13694:	bl	1166c <__printf_chk@plt>
   13698:	b	1347c <__assert_fail@plt+0x1cf0>
   1369c:	ldr	r1, [pc, #136]	; 1372c <__assert_fail@plt+0x1fa0>
   136a0:	mov	r2, #5
   136a4:	mov	r0, r4
   136a8:	add	r1, pc, r1
   136ac:	bl	1148c <dcgettext@plt>
   136b0:	mov	r5, r0
   136b4:	ldr	r0, [r6]
   136b8:	bl	13cc8 <close_stdout@@Base+0x1e8>
   136bc:	mov	r1, r5
   136c0:	mov	r2, r0
   136c4:	mov	r0, #1
   136c8:	bl	1166c <__printf_chk@plt>
   136cc:	b	13668 <__assert_fail@plt+0x1edc>
   136d0:	andeq	r8, r1, r0, asr #23
   136d4:	andeq	r0, r0, r8, ror #2
   136d8:	strdeq	r6, [r0], -r4
   136dc:	andeq	r0, r0, r8, lsl #3
   136e0:	andeq	r6, r0, r4, ror #9
   136e4:	ldrdeq	r6, [r0], -r8
   136e8:	andeq	r0, r0, ip, ror r1
   136ec:	andeq	r6, r0, ip, lsr r5
   136f0:	andeq	r6, r0, ip, ror #10
   136f4:	andeq	r6, r0, r0, asr r6
   136f8:	andeq	r6, r0, r8, ror #14
   136fc:	andeq	r6, r0, ip, ror r7
   13700:	muleq	r0, r8, r7
   13704:	andeq	r6, r0, r0, lsl #19
   13708:	ldrdeq	r6, [r0], -r0
   1370c:	strdeq	r6, [r0], -r0
   13710:	andeq	r6, r0, r4, asr #24
   13714:	andeq	r6, r0, r0, lsl #28
   13718:	andeq	r6, r0, ip, lsl #29
   1371c:	muleq	r0, r4, lr
   13720:	andeq	r6, r0, r0, lsr #29
   13724:	muleq	r0, ip, lr
   13728:	andeq	r6, r0, ip, asr #29
   1372c:	andeq	r6, r0, r0, asr lr
   13730:	mov	r0, #1
   13734:	b	1342c <__assert_fail@plt+0x1ca0>
   13738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1373c:	sub	sp, sp, #12
   13740:	mov	r7, r1
   13744:	mov	r6, r3
   13748:	str	r2, [sp]
   1374c:	mov	sl, r0
   13750:	bl	115dc <strlen@plt>
   13754:	ldr	fp, [r7]
   13758:	cmp	fp, #0
   1375c:	mov	r8, r0
   13760:	beq	13824 <__assert_fail@plt+0x2098>
   13764:	mov	r3, #0
   13768:	ldr	r4, [sp]
   1376c:	str	r3, [sp, #4]
   13770:	mov	r5, r3
   13774:	mvn	r9, #0
   13778:	b	137a4 <__assert_fail@plt+0x2018>
   1377c:	bl	11480 <memcmp@plt>
   13780:	ldr	r3, [sp, #4]
   13784:	cmp	r0, #0
   13788:	movne	r3, #1
   1378c:	str	r3, [sp, #4]
   13790:	ldr	fp, [r7, #4]!
   13794:	add	r5, r5, #1
   13798:	add	r4, r4, r6
   1379c:	cmp	fp, #0
   137a0:	beq	13800 <__assert_fail@plt+0x2074>
   137a4:	mov	r0, fp
   137a8:	mov	r1, sl
   137ac:	mov	r2, r8
   137b0:	bl	11750 <strncmp@plt>
   137b4:	cmp	r0, #0
   137b8:	mov	r0, fp
   137bc:	bne	13790 <__assert_fail@plt+0x2004>
   137c0:	bl	115dc <strlen@plt>
   137c4:	ldr	r3, [sp]
   137c8:	mov	r1, r4
   137cc:	mov	r2, r6
   137d0:	cmp	r0, r8
   137d4:	mla	r0, r6, r9, r3
   137d8:	beq	13818 <__assert_fail@plt+0x208c>
   137dc:	cmn	r9, #1
   137e0:	moveq	r9, r5
   137e4:	beq	13790 <__assert_fail@plt+0x2004>
   137e8:	ldr	r3, [sp]
   137ec:	cmp	r3, #0
   137f0:	bne	1377c <__assert_fail@plt+0x1ff0>
   137f4:	mov	r3, #1
   137f8:	str	r3, [sp, #4]
   137fc:	b	13790 <__assert_fail@plt+0x2004>
   13800:	ldr	r3, [sp, #4]
   13804:	cmp	r3, #0
   13808:	bne	1382c <__assert_fail@plt+0x20a0>
   1380c:	mov	r0, r9
   13810:	add	sp, sp, #12
   13814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13818:	mov	r0, r5
   1381c:	add	sp, sp, #12
   13820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13824:	mvn	r9, #0
   13828:	b	1380c <__assert_fail@plt+0x2080>
   1382c:	mvn	r0, #1
   13830:	b	13810 <__assert_fail@plt+0x2084>
   13834:	cmn	r2, #1
   13838:	push	{r4, r5, r6, lr}
   1383c:	mov	r4, r0
   13840:	sub	sp, sp, #8
   13844:	mov	r5, r1
   13848:	mov	r0, #0
   1384c:	beq	138a4 <__assert_fail@plt+0x2118>
   13850:	ldr	r1, [pc, #100]	; 138bc <__assert_fail@plt+0x2130>
   13854:	mov	r2, #5
   13858:	add	r1, pc, r1
   1385c:	bl	1148c <dcgettext@plt>
   13860:	mov	r6, r0
   13864:	mov	r2, r5
   13868:	mov	r1, #6
   1386c:	mov	r0, #0
   13870:	bl	15fac <close_stdout@@Base+0x24cc>
   13874:	mov	r1, r4
   13878:	mov	r5, r0
   1387c:	mov	r0, #1
   13880:	bl	162ac <close_stdout@@Base+0x27cc>
   13884:	mov	r3, r5
   13888:	mov	r2, r6
   1388c:	str	r0, [sp]
   13890:	mov	r0, #0
   13894:	mov	r1, r0
   13898:	bl	1154c <error@plt>
   1389c:	add	sp, sp, #8
   138a0:	pop	{r4, r5, r6, pc}
   138a4:	ldr	r1, [pc, #20]	; 138c0 <__assert_fail@plt+0x2134>
   138a8:	mov	r2, #5
   138ac:	add	r1, pc, r1
   138b0:	bl	1148c <dcgettext@plt>
   138b4:	mov	r6, r0
   138b8:	b	13864 <__assert_fail@plt+0x20d8>
   138bc:	andeq	r6, r0, ip, asr pc
   138c0:	andeq	r6, r0, ip, ror #29
   138c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138c8:	mov	r4, r1
   138cc:	ldr	r1, [pc, #276]	; 139e8 <__assert_fail@plt+0x225c>
   138d0:	sub	sp, sp, #12
   138d4:	mov	r7, r0
   138d8:	mov	r6, r2
   138dc:	add	r1, pc, r1
   138e0:	mov	r2, #5
   138e4:	mov	r0, #0
   138e8:	bl	1148c <dcgettext@plt>
   138ec:	ldr	r3, [pc, #248]	; 139ec <__assert_fail@plt+0x2260>
   138f0:	ldr	r2, [pc, #248]	; 139f0 <__assert_fail@plt+0x2264>
   138f4:	add	r3, pc, r3
   138f8:	ldr	r9, [r3, r2]
   138fc:	ldr	r1, [r9]
   13900:	bl	113cc <fputs_unlocked@plt>
   13904:	ldr	fp, [r7]
   13908:	cmp	fp, #0
   1390c:	beq	139ac <__assert_fail@plt+0x2220>
   13910:	ldr	sl, [pc, #220]	; 139f4 <__assert_fail@plt+0x2268>
   13914:	mov	r8, #0
   13918:	ldr	r3, [pc, #216]	; 139f8 <__assert_fail@plt+0x226c>
   1391c:	mov	r5, r8
   13920:	add	sl, pc, sl
   13924:	add	r3, pc, r3
   13928:	str	r3, [sp, #4]
   1392c:	b	13968 <__assert_fail@plt+0x21dc>
   13930:	mov	r0, fp
   13934:	ldr	fp, [r9]
   13938:	bl	162b4 <close_stdout@@Base+0x27d4>
   1393c:	mov	r1, #1
   13940:	mov	r2, sl
   13944:	mov	r8, r4
   13948:	mov	r3, r0
   1394c:	mov	r0, fp
   13950:	bl	11690 <__fprintf_chk@plt>
   13954:	ldr	fp, [r7, #4]!
   13958:	add	r5, r5, #1
   1395c:	add	r4, r4, r6
   13960:	cmp	fp, #0
   13964:	beq	139ac <__assert_fail@plt+0x2220>
   13968:	cmp	r5, #0
   1396c:	mov	r1, r4
   13970:	mov	r2, r6
   13974:	mov	r0, r8
   13978:	beq	13930 <__assert_fail@plt+0x21a4>
   1397c:	bl	11480 <memcmp@plt>
   13980:	cmp	r0, #0
   13984:	bne	13930 <__assert_fail@plt+0x21a4>
   13988:	mov	r0, fp
   1398c:	ldr	fp, [r9]
   13990:	bl	162b4 <close_stdout@@Base+0x27d4>
   13994:	mov	r1, #1
   13998:	ldr	r2, [sp, #4]
   1399c:	mov	r3, r0
   139a0:	mov	r0, fp
   139a4:	bl	11690 <__fprintf_chk@plt>
   139a8:	b	13954 <__assert_fail@plt+0x21c8>
   139ac:	ldr	r0, [r9]
   139b0:	ldr	r3, [r0, #20]
   139b4:	ldr	r2, [r0, #24]
   139b8:	cmp	r3, r2
   139bc:	bcs	139d8 <__assert_fail@plt+0x224c>
   139c0:	add	r1, r3, #1
   139c4:	mov	r2, #10
   139c8:	str	r1, [r0, #20]
   139cc:	strb	r2, [r3]
   139d0:	add	sp, sp, #12
   139d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139d8:	mov	r1, #10
   139dc:	add	sp, sp, #12
   139e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139e4:	b	116c0 <__overflow@plt>
   139e8:	strdeq	r6, [r0], -r8
   139ec:	andeq	r8, r1, r4, lsl #14
   139f0:	andeq	r0, r0, r8, ror #2
   139f4:	andeq	r6, r0, ip, asr #29
   139f8:	ldrdeq	r6, [r0], -r0
   139fc:	push	{r4, r5, r6, r7, r8, lr}
   13a00:	mov	r7, r1
   13a04:	ldr	r4, [sp, #24]
   13a08:	mov	r1, r2
   13a0c:	mov	r6, r2
   13a10:	mov	r5, r3
   13a14:	mov	r2, r3
   13a18:	mov	r8, r0
   13a1c:	mov	r3, r4
   13a20:	mov	r0, r7
   13a24:	bl	13738 <__assert_fail@plt+0x1fac>
   13a28:	subs	r2, r0, #0
   13a2c:	blt	13a38 <__assert_fail@plt+0x22ac>
   13a30:	mov	r0, r2
   13a34:	pop	{r4, r5, r6, r7, r8, pc}
   13a38:	mov	r0, r8
   13a3c:	mov	r1, r7
   13a40:	bl	13834 <__assert_fail@plt+0x20a8>
   13a44:	mov	r0, r6
   13a48:	mov	r1, r5
   13a4c:	mov	r2, r4
   13a50:	bl	138c4 <__assert_fail@plt+0x2138>
   13a54:	ldr	r3, [sp, #28]
   13a58:	blx	r3
   13a5c:	mvn	r0, #0
   13a60:	pop	{r4, r5, r6, r7, r8, pc}
   13a64:	push	{r4, r5, r6, r7, r8, lr}
   13a68:	mov	r8, r0
   13a6c:	ldr	r5, [r1]
   13a70:	mov	r6, r3
   13a74:	cmp	r5, #0
   13a78:	beq	13ab0 <__assert_fail@plt+0x2324>
   13a7c:	mov	r4, r2
   13a80:	mov	r7, r1
   13a84:	b	13a94 <__assert_fail@plt+0x2308>
   13a88:	ldr	r5, [r7, #4]!
   13a8c:	cmp	r5, #0
   13a90:	beq	13ab0 <__assert_fail@plt+0x2324>
   13a94:	mov	r1, r4
   13a98:	mov	r0, r8
   13a9c:	mov	r2, r6
   13aa0:	add	r4, r4, r6
   13aa4:	bl	11480 <memcmp@plt>
   13aa8:	cmp	r0, #0
   13aac:	bne	13a88 <__assert_fail@plt+0x22fc>
   13ab0:	mov	r0, r5
   13ab4:	pop	{r4, r5, r6, r7, r8, pc}
   13ab8:	ldr	r3, [pc, #8]	; 13ac8 <__assert_fail@plt+0x233c>
   13abc:	add	r3, pc, r3
   13ac0:	str	r0, [r3]
   13ac4:	bx	lr
   13ac8:	andeq	r8, r1, ip, lsr #14
   13acc:	ldr	r3, [pc, #8]	; 13adc <__assert_fail@plt+0x2350>
   13ad0:	add	r3, pc, r3
   13ad4:	strb	r0, [r3, #4]
   13ad8:	bx	lr
   13adc:	andeq	r8, r1, r8, lsl r7

00013ae0 <close_stdout@@Base>:
   13ae0:	push	{r4, r5, r6, r7, lr}
   13ae4:	sub	sp, sp, #12
   13ae8:	ldr	r4, [pc, #228]	; 13bd4 <close_stdout@@Base+0xf4>
   13aec:	ldr	r3, [pc, #228]	; 13bd8 <close_stdout@@Base+0xf8>
   13af0:	add	r4, pc, r4
   13af4:	ldr	r3, [r4, r3]
   13af8:	ldr	r0, [r3]
   13afc:	bl	18100 <close_stdout@@Base+0x4620>
   13b00:	cmp	r0, #0
   13b04:	beq	13b2c <close_stdout@@Base+0x4c>
   13b08:	ldr	r3, [pc, #204]	; 13bdc <close_stdout@@Base+0xfc>
   13b0c:	add	r3, pc, r3
   13b10:	ldrb	r3, [r3, #4]
   13b14:	cmp	r3, #0
   13b18:	beq	13b4c <close_stdout@@Base+0x6c>
   13b1c:	bl	11618 <__errno_location@plt>
   13b20:	ldr	r3, [r0]
   13b24:	cmp	r3, #32
   13b28:	bne	13b4c <close_stdout@@Base+0x6c>
   13b2c:	ldr	r3, [pc, #172]	; 13be0 <close_stdout@@Base+0x100>
   13b30:	ldr	r3, [r4, r3]
   13b34:	ldr	r0, [r3]
   13b38:	bl	18100 <close_stdout@@Base+0x4620>
   13b3c:	cmp	r0, #0
   13b40:	bne	13ba0 <close_stdout@@Base+0xc0>
   13b44:	add	sp, sp, #12
   13b48:	pop	{r4, r5, r6, r7, pc}
   13b4c:	ldr	r1, [pc, #144]	; 13be4 <close_stdout@@Base+0x104>
   13b50:	mov	r0, #0
   13b54:	mov	r2, #5
   13b58:	add	r1, pc, r1
   13b5c:	bl	1148c <dcgettext@plt>
   13b60:	ldr	r3, [pc, #128]	; 13be8 <close_stdout@@Base+0x108>
   13b64:	ldr	r5, [pc, r3]
   13b68:	cmp	r5, #0
   13b6c:	mov	r6, r0
   13b70:	beq	13bb0 <close_stdout@@Base+0xd0>
   13b74:	bl	11618 <__errno_location@plt>
   13b78:	ldr	r7, [r0]
   13b7c:	mov	r0, r5
   13b80:	bl	16160 <close_stdout@@Base+0x2680>
   13b84:	ldr	r2, [pc, #96]	; 13bec <close_stdout@@Base+0x10c>
   13b88:	str	r6, [sp]
   13b8c:	mov	r1, r7
   13b90:	add	r2, pc, r2
   13b94:	mov	r3, r0
   13b98:	mov	r0, #0
   13b9c:	bl	1154c <error@plt>
   13ba0:	ldr	r3, [pc, #72]	; 13bf0 <close_stdout@@Base+0x110>
   13ba4:	ldr	r3, [r4, r3]
   13ba8:	ldr	r0, [r3]
   13bac:	bl	11438 <_exit@plt>
   13bb0:	bl	11618 <__errno_location@plt>
   13bb4:	ldr	r2, [pc, #56]	; 13bf4 <close_stdout@@Base+0x114>
   13bb8:	add	r2, pc, r2
   13bbc:	mov	r3, r0
   13bc0:	mov	r0, r5
   13bc4:	ldr	r1, [r3]
   13bc8:	mov	r3, r6
   13bcc:	bl	1154c <error@plt>
   13bd0:	b	13ba0 <close_stdout@@Base+0xc0>
   13bd4:	andeq	r8, r1, r8, lsl #10
   13bd8:	andeq	r0, r0, ip, ror r1
   13bdc:	ldrdeq	r8, [r1], -ip
   13be0:	andeq	r0, r0, r8, ror #2
   13be4:	andeq	r6, r0, r4, lsr #25
   13be8:	andeq	r8, r1, r4, lsl #13
   13bec:	andeq	r6, r0, r8, ror ip
   13bf0:	andeq	r0, r0, r0, lsl #3
   13bf4:	andeq	r6, r0, r4, asr ip
   13bf8:	push	{r3, lr}
   13bfc:	bl	13c70 <close_stdout@@Base+0x190>
   13c00:	cmp	r0, #0
   13c04:	popne	{r3, pc}
   13c08:	bl	17634 <close_stdout@@Base+0x3b54>
   13c0c:	push	{r3, r4, r5, lr}
   13c10:	mov	r4, r0
   13c14:	ldrb	r5, [r0]
   13c18:	subs	r3, r5, #47	; 0x2f
   13c1c:	rsbs	r5, r3, #0
   13c20:	adcs	r5, r5, r3
   13c24:	bl	13cc8 <close_stdout@@Base+0x1e8>
   13c28:	rsb	r3, r4, r0
   13c2c:	cmp	r3, r5
   13c30:	bls	13c68 <close_stdout@@Base+0x188>
   13c34:	sub	r0, r3, #1
   13c38:	ldrb	r2, [r4, r0]
   13c3c:	cmp	r2, #47	; 0x2f
   13c40:	beq	13c58 <close_stdout@@Base+0x178>
   13c44:	b	13c68 <close_stdout@@Base+0x188>
   13c48:	ldrb	r2, [r4, r3]
   13c4c:	cmp	r2, #47	; 0x2f
   13c50:	popne	{r3, r4, r5, pc}
   13c54:	mov	r0, r3
   13c58:	cmp	r5, r0
   13c5c:	sub	r3, r0, #1
   13c60:	bcc	13c48 <close_stdout@@Base+0x168>
   13c64:	pop	{r3, r4, r5, pc}
   13c68:	mov	r0, r3
   13c6c:	pop	{r3, r4, r5, pc}
   13c70:	push	{r4, r5, r6, r7, r8, lr}
   13c74:	mov	r8, r0
   13c78:	bl	13c0c <close_stdout@@Base+0x12c>
   13c7c:	rsbs	r6, r0, #1
   13c80:	add	r7, r0, #1
   13c84:	mov	r4, r0
   13c88:	movcc	r6, #0
   13c8c:	add	r0, r6, r7
   13c90:	bl	11570 <malloc@plt>
   13c94:	subs	r5, r0, #0
   13c98:	beq	13cc0 <close_stdout@@Base+0x1e0>
   13c9c:	mov	r2, r4
   13ca0:	mov	r1, r8
   13ca4:	bl	11444 <memcpy@plt>
   13ca8:	cmp	r6, #0
   13cac:	movne	r3, #46	; 0x2e
   13cb0:	strbne	r3, [r5, r4]
   13cb4:	movne	r4, r7
   13cb8:	mov	r3, #0
   13cbc:	strb	r3, [r5, r4]
   13cc0:	mov	r0, r5
   13cc4:	pop	{r4, r5, r6, r7, r8, pc}
   13cc8:	ldrb	r3, [r0]
   13ccc:	cmp	r3, #47	; 0x2f
   13cd0:	bne	13cec <close_stdout@@Base+0x20c>
   13cd4:	add	r2, r0, #1
   13cd8:	mov	r0, r2
   13cdc:	add	r2, r2, #1
   13ce0:	ldrb	r3, [r0]
   13ce4:	cmp	r3, #47	; 0x2f
   13ce8:	beq	13cd8 <close_stdout@@Base+0x1f8>
   13cec:	cmp	r3, #0
   13cf0:	bxeq	lr
   13cf4:	mov	r2, r0
   13cf8:	mov	r1, #0
   13cfc:	cmp	r3, #47	; 0x2f
   13d00:	moveq	r1, #1
   13d04:	beq	13d14 <close_stdout@@Base+0x234>
   13d08:	cmp	r1, #0
   13d0c:	movne	r0, r2
   13d10:	movne	r1, #0
   13d14:	ldrb	r3, [r2, #1]!
   13d18:	cmp	r3, #0
   13d1c:	bne	13cfc <close_stdout@@Base+0x21c>
   13d20:	bx	lr
   13d24:	push	{r4, lr}
   13d28:	mov	r4, r0
   13d2c:	bl	115dc <strlen@plt>
   13d30:	cmp	r0, #1
   13d34:	popls	{r4, pc}
   13d38:	sub	r3, r0, #1
   13d3c:	ldrb	r2, [r4, r3]
   13d40:	cmp	r2, #47	; 0x2f
   13d44:	popne	{r4, pc}
   13d48:	mov	r0, r3
   13d4c:	cmp	r0, #1
   13d50:	sub	r3, r3, #1
   13d54:	beq	13d68 <close_stdout@@Base+0x288>
   13d58:	ldrb	r2, [r4, r3]
   13d5c:	cmp	r2, #47	; 0x2f
   13d60:	popne	{r4, pc}
   13d64:	b	13d48 <close_stdout@@Base+0x268>
   13d68:	pop	{r4, pc}
   13d6c:	push	{r1, r2, r3}
   13d70:	ldr	r3, [pc, #88]	; 13dd0 <close_stdout@@Base+0x2f0>
   13d74:	ldr	r2, [pc, #88]	; 13dd4 <close_stdout@@Base+0x2f4>
   13d78:	add	r3, pc, r3
   13d7c:	push	{r4, lr}
   13d80:	sub	sp, sp, #12
   13d84:	ldr	r4, [r3, r2]
   13d88:	ldr	r1, [sp, #20]
   13d8c:	ldr	r3, [r4]
   13d90:	ands	r2, r1, #64	; 0x40
   13d94:	ldrne	r2, [sp, #24]
   13d98:	str	r3, [sp, #4]
   13d9c:	addne	r3, sp, #24
   13da0:	strne	r3, [sp]
   13da4:	bl	11558 <open64@plt>
   13da8:	bl	16e44 <close_stdout@@Base+0x3364>
   13dac:	ldr	r2, [sp, #4]
   13db0:	ldr	r3, [r4]
   13db4:	cmp	r2, r3
   13db8:	bne	13dcc <close_stdout@@Base+0x2ec>
   13dbc:	add	sp, sp, #12
   13dc0:	pop	{r4, lr}
   13dc4:	add	sp, sp, #12
   13dc8:	bx	lr
   13dcc:	bl	11498 <__stack_chk_fail@plt>
   13dd0:	andeq	r8, r1, r0, lsl #5
   13dd4:	andeq	r0, r0, ip, asr r1
   13dd8:	ldr	ip, [pc, #1192]	; 14288 <close_stdout@@Base+0x7a8>
   13ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13de0:	vpush	{d8-d9}
   13de4:	ands	r4, r3, #32
   13de8:	ldr	lr, [pc, #1180]	; 1428c <close_stdout@@Base+0x7ac>
   13dec:	sub	sp, sp, #140	; 0x8c
   13df0:	add	ip, pc, ip
   13df4:	moveq	r5, #1000	; 0x3e8
   13df8:	movne	r5, #1024	; 0x400
   13dfc:	str	r4, [sp, #56]	; 0x38
   13e00:	mov	r8, r3
   13e04:	str	r2, [sp, #28]
   13e08:	mov	r3, ip
   13e0c:	str	r5, [sp, #60]	; 0x3c
   13e10:	mov	r7, r1
   13e14:	ldr	lr, [ip, lr]
   13e18:	and	r4, r8, #3
   13e1c:	mov	r6, r0
   13e20:	str	r4, [sp, #48]	; 0x30
   13e24:	ldr	r3, [lr]
   13e28:	str	lr, [sp, #44]	; 0x2c
   13e2c:	str	r3, [sp, #132]	; 0x84
   13e30:	bl	116f0 <localeconv@plt>
   13e34:	ldr	r5, [r0]
   13e38:	mov	r4, r0
   13e3c:	mov	r0, r5
   13e40:	str	r5, [sp, #52]	; 0x34
   13e44:	bl	115dc <strlen@plt>
   13e48:	sub	r3, r0, #1
   13e4c:	mov	fp, r0
   13e50:	cmp	r3, #15
   13e54:	ldrhi	r5, [pc, #1076]	; 14290 <close_stdout@@Base+0x7b0>
   13e58:	movhi	fp, #1
   13e5c:	addhi	r5, pc, r5
   13e60:	strhi	r5, [sp, #52]	; 0x34
   13e64:	ldr	r5, [r4, #4]
   13e68:	ldr	r9, [r4, #8]
   13e6c:	mov	r0, r5
   13e70:	str	r5, [sp, #40]	; 0x28
   13e74:	bl	115dc <strlen@plt>
   13e78:	cmp	r0, #16
   13e7c:	ldrhi	r4, [pc, #1040]	; 14294 <close_stdout@@Base+0x7b4>
   13e80:	addhi	r4, pc, r4
   13e84:	strhi	r4, [sp, #40]	; 0x28
   13e88:	ldrd	r4, [sp, #200]	; 0xc8
   13e8c:	ldrd	r0, [sp, #192]	; 0xc0
   13e90:	cmp	r5, r1
   13e94:	cmpeq	r4, r0
   13e98:	ldr	r4, [sp, #28]
   13e9c:	add	r4, r4, #648	; 0x288
   13ea0:	str	r4, [sp, #32]
   13ea4:	str	r4, [sp, #36]	; 0x24
   13ea8:	bhi	140e0 <close_stdout@@Base+0x600>
   13eac:	ldrd	r2, [sp, #200]	; 0xc8
   13eb0:	bl	18c54 <close_stdout@@Base+0x5174>
   13eb4:	orrs	r5, r2, r3
   13eb8:	bne	13ef8 <close_stdout@@Base+0x418>
   13ebc:	ldrd	r2, [sp, #200]	; 0xc8
   13ec0:	ldrd	r0, [sp, #192]	; 0xc0
   13ec4:	bl	18c54 <close_stdout@@Base+0x5174>
   13ec8:	mul	r2, r0, r7
   13ecc:	mov	r3, r1
   13ed0:	umull	r4, r5, r0, r6
   13ed4:	mla	r1, r6, r1, r2
   13ed8:	mov	r2, r0
   13edc:	add	r5, r1, r5
   13ee0:	mov	r0, r4
   13ee4:	mov	r1, r5
   13ee8:	bl	18c54 <close_stdout@@Base+0x5174>
   13eec:	cmp	r1, r7
   13ef0:	cmpeq	r0, r6
   13ef4:	beq	14508 <close_stdout@@Base+0xa28>
   13ef8:	mov	r0, r6
   13efc:	mov	r1, r7
   13f00:	bl	18b98 <close_stdout@@Base+0x50b8>
   13f04:	vmov	d9, r0, r1
   13f08:	ldrd	r0, [sp, #192]	; 0xc0
   13f0c:	bl	18b98 <close_stdout@@Base+0x50b8>
   13f10:	vmov	d8, r0, r1
   13f14:	ldrd	r0, [sp, #200]	; 0xc8
   13f18:	bl	18b98 <close_stdout@@Base+0x50b8>
   13f1c:	tst	r8, #16
   13f20:	vmov	d7, r0, r1
   13f24:	vdiv.f64	d8, d8, d7
   13f28:	vmul.f64	d8, d9, d8
   13f2c:	beq	142a0 <close_stdout@@Base+0x7c0>
   13f30:	vldr	s15, [sp, #60]	; 0x3c
   13f34:	mov	r6, #0
   13f38:	vcvt.f64.s32	d6, s15
   13f3c:	vmov.f64	d7, d6
   13f40:	add	r6, r6, #1
   13f44:	vmov.f64	d5, d7
   13f48:	vmul.f64	d7, d7, d6
   13f4c:	vcmpe.f64	d8, d7
   13f50:	vmrs	APSR_nzcv, fpscr
   13f54:	blt	13f60 <close_stdout@@Base+0x480>
   13f58:	cmp	r6, #8
   13f5c:	bne	13f40 <close_stdout@@Base+0x460>
   13f60:	vdiv.f64	d8, d8, d5
   13f64:	ldr	r4, [sp, #48]	; 0x30
   13f68:	cmp	r4, #1
   13f6c:	vmoveq	r0, r1, d8
   13f70:	beq	13fd0 <close_stdout@@Base+0x4f0>
   13f74:	vldr	d7, [pc, #772]	; 14280 <close_stdout@@Base+0x7a0>
   13f78:	vcmpe.f64	d8, d7
   13f7c:	vmov	r0, r1, d8
   13f80:	vmrs	APSR_nzcv, fpscr
   13f84:	bpl	13fd0 <close_stdout@@Base+0x4f0>
   13f88:	bl	18ca0 <close_stdout@@Base+0x51c0>
   13f8c:	ldr	r2, [sp, #48]	; 0x30
   13f90:	cmp	r2, #0
   13f94:	mov	r4, r0
   13f98:	mov	r5, r1
   13f9c:	movne	r0, #0
   13fa0:	movne	r1, #0
   13fa4:	bne	13fc4 <close_stdout@@Base+0x4e4>
   13fa8:	bl	18b98 <close_stdout@@Base+0x50b8>
   13fac:	vmov	d7, r0, r1
   13fb0:	ldr	r1, [sp, #48]	; 0x30
   13fb4:	vcmp.f64	d8, d7
   13fb8:	vmrs	APSR_nzcv, fpscr
   13fbc:	moveq	r0, #0
   13fc0:	movne	r0, #1
   13fc4:	adds	r0, r0, r4
   13fc8:	adc	r1, r1, r5
   13fcc:	bl	18b98 <close_stdout@@Base+0x50b8>
   13fd0:	ldr	r3, [pc, #704]	; 14298 <close_stdout@@Base+0x7b8>
   13fd4:	mvn	r2, #0
   13fd8:	strd	r0, [sp]
   13fdc:	mov	r1, #1
   13fe0:	add	r3, pc, r3
   13fe4:	ldr	r0, [sp, #28]
   13fe8:	add	r4, fp, r1
   13fec:	bl	11624 <__sprintf_chk@plt>
   13ff0:	ldr	r0, [sp, #28]
   13ff4:	bl	115dc <strlen@plt>
   13ff8:	ldr	r5, [sp, #56]	; 0x38
   13ffc:	cmp	r5, #0
   14000:	movne	r3, #1
   14004:	moveq	r3, #2
   14008:	add	r3, r3, r4
   1400c:	mov	fp, r0
   14010:	cmp	r0, r3
   14014:	bhi	14034 <close_stdout@@Base+0x554>
   14018:	tst	r8, #8
   1401c:	beq	142ec <close_stdout@@Base+0x80c>
   14020:	ldr	r5, [sp, #28]
   14024:	add	r3, r5, r0
   14028:	ldrb	r3, [r3, #-1]
   1402c:	cmp	r3, #48	; 0x30
   14030:	bne	142ec <close_stdout@@Base+0x80c>
   14034:	vmov.f64	d5, #36	; 0x41200000  10.0
   14038:	ldr	r4, [sp, #48]	; 0x30
   1403c:	cmp	r4, #1
   14040:	vmul.f64	d8, d8, d5
   14044:	beq	140a8 <close_stdout@@Base+0x5c8>
   14048:	vldr	d7, [pc, #560]	; 14280 <close_stdout@@Base+0x7a0>
   1404c:	vcmpe.f64	d8, d7
   14050:	vmrs	APSR_nzcv, fpscr
   14054:	bpl	140a8 <close_stdout@@Base+0x5c8>
   14058:	vmov	r0, r1, d8
   1405c:	bl	18ca0 <close_stdout@@Base+0x51c0>
   14060:	ldr	r2, [sp, #48]	; 0x30
   14064:	cmp	r2, #0
   14068:	mov	r4, r0
   1406c:	mov	r5, r1
   14070:	movne	r0, #0
   14074:	movne	r1, #0
   14078:	bne	14098 <close_stdout@@Base+0x5b8>
   1407c:	bl	18b98 <close_stdout@@Base+0x50b8>
   14080:	vmov	d7, r0, r1
   14084:	ldr	r1, [sp, #48]	; 0x30
   14088:	vcmp.f64	d8, d7
   1408c:	vmrs	APSR_nzcv, fpscr
   14090:	moveq	r0, #0
   14094:	movne	r0, #1
   14098:	adds	r0, r0, r4
   1409c:	adc	r1, r1, r5
   140a0:	bl	18b98 <close_stdout@@Base+0x50b8>
   140a4:	vmov	d8, r0, r1
   140a8:	ldr	r3, [pc, #492]	; 1429c <close_stdout@@Base+0x7bc>
   140ac:	mov	r1, #1
   140b0:	vmov.f64	d7, #36	; 0x41200000  10.0
   140b4:	mvn	r2, #0
   140b8:	add	r3, pc, r3
   140bc:	ldr	r0, [sp, #28]
   140c0:	mov	r4, #0
   140c4:	vdiv.f64	d8, d8, d7
   140c8:	vstr	d8, [sp]
   140cc:	bl	11624 <__sprintf_chk@plt>
   140d0:	ldr	r0, [sp, #28]
   140d4:	bl	115dc <strlen@plt>
   140d8:	mov	fp, r0
   140dc:	b	142ec <close_stdout@@Base+0x80c>
   140e0:	ldrd	r4, [sp, #192]	; 0xc0
   140e4:	orrs	r5, r4, r5
   140e8:	beq	13ef8 <close_stdout@@Base+0x418>
   140ec:	ldrd	r0, [sp, #200]	; 0xc8
   140f0:	ldrd	r2, [sp, #192]	; 0xc0
   140f4:	bl	18c54 <close_stdout@@Base+0x5174>
   140f8:	orrs	r0, r2, r3
   140fc:	bne	13ef8 <close_stdout@@Base+0x418>
   14100:	ldrd	r2, [sp, #192]	; 0xc0
   14104:	ldrd	r0, [sp, #200]	; 0xc8
   14108:	bl	18c54 <close_stdout@@Base+0x5174>
   1410c:	strd	r0, [sp, #16]
   14110:	mov	r0, r6
   14114:	mov	r1, r7
   14118:	ldrd	r2, [sp, #16]
   1411c:	bl	18c54 <close_stdout@@Base+0x5174>
   14120:	mov	r1, #10
   14124:	umull	r4, r5, r2, r1
   14128:	mla	r1, r1, r3, r5
   1412c:	strd	r4, [sp, #64]	; 0x40
   14130:	ldrd	r2, [sp, #16]
   14134:	str	r1, [sp, #68]	; 0x44
   14138:	ldrd	r0, [sp, #64]	; 0x40
   1413c:	bl	18c54 <close_stdout@@Base+0x5174>
   14140:	mov	r0, r6
   14144:	mov	r1, r7
   14148:	adds	r6, r2, r2
   1414c:	adc	r7, r3, r3
   14150:	ldrd	r2, [sp, #16]
   14154:	bl	18c54 <close_stdout@@Base+0x5174>
   14158:	ldrd	r2, [sp, #16]
   1415c:	mov	r4, r0
   14160:	mov	r5, r1
   14164:	ldrd	r0, [sp, #64]	; 0x40
   14168:	bl	18c54 <close_stdout@@Base+0x5174>
   1416c:	str	r0, [sp, #64]	; 0x40
   14170:	ldrd	r0, [sp, #16]
   14174:	cmp	r1, r7
   14178:	cmpeq	r0, r6
   1417c:	bls	14674 <close_stdout@@Base+0xb94>
   14180:	orrs	r1, r6, r7
   14184:	moveq	ip, #0
   14188:	movne	ip, #1
   1418c:	ands	r0, r8, #16
   14190:	str	r0, [sp, #72]	; 0x48
   14194:	beq	14564 <close_stdout@@Base+0xa84>
   14198:	ldr	r2, [sp, #60]	; 0x3c
   1419c:	mov	r3, #0
   141a0:	cmp	r5, r3
   141a4:	cmpeq	r4, r2
   141a8:	strd	r2, [sp, #16]
   141ac:	bcc	146cc <close_stdout@@Base+0xbec>
   141b0:	mov	r6, #0
   141b4:	mov	sl, ip
   141b8:	str	r9, [sp, #80]	; 0x50
   141bc:	mov	ip, r6
   141c0:	str	r8, [sp, #84]	; 0x54
   141c4:	mov	r9, r3
   141c8:	ldr	r6, [sp, #64]	; 0x40
   141cc:	mov	r8, r2
   141d0:	str	fp, [sp, #76]	; 0x4c
   141d4:	ldr	r7, [sp, #60]	; 0x3c
   141d8:	b	141fc <close_stdout@@Base+0x71c>
   141dc:	adds	sl, sl, #0
   141e0:	movne	sl, #1
   141e4:	cmp	r9, r5
   141e8:	cmpeq	r8, r4
   141ec:	add	ip, ip, #1
   141f0:	bhi	14700 <close_stdout@@Base+0xc20>
   141f4:	cmp	ip, #8
   141f8:	beq	146dc <close_stdout@@Base+0xbfc>
   141fc:	mov	r0, r4
   14200:	mov	r1, r5
   14204:	mov	r2, r8
   14208:	mov	r3, r9
   1420c:	str	ip, [sp, #12]
   14210:	bl	18c54 <close_stdout@@Base+0x5174>
   14214:	mov	r1, r7
   14218:	asr	fp, sl, #1
   1421c:	add	r2, r2, r2, lsl #2
   14220:	add	r6, r6, r2, lsl #1
   14224:	mov	r0, r6
   14228:	bl	18834 <close_stdout@@Base+0x4d54>
   1422c:	mov	r2, r8
   14230:	mov	r3, r9
   14234:	mov	r0, r4
   14238:	add	fp, fp, r1, lsl #1
   1423c:	mov	r1, r5
   14240:	bl	18c54 <close_stdout@@Base+0x5174>
   14244:	add	sl, fp, sl
   14248:	mov	r4, r0
   1424c:	mov	r5, r1
   14250:	mov	r0, r6
   14254:	mov	r1, r7
   14258:	bl	18648 <close_stdout@@Base+0x4b68>
   1425c:	cmp	r7, fp
   14260:	ldr	ip, [sp, #12]
   14264:	mov	r6, r0
   14268:	bhi	141dc <close_stdout@@Base+0x6fc>
   1426c:	cmp	r7, sl
   14270:	movcs	sl, #2
   14274:	movcc	sl, #3
   14278:	b	141e4 <close_stdout@@Base+0x704>
   1427c:	nop	{0}
   14280:	andeq	r0, r0, r0
   14284:	mvnsmi	r0, #0
   14288:	andeq	r8, r1, r8, lsl #4
   1428c:	andeq	r0, r0, ip, asr r1
   14290:	andeq	r6, r0, r8, asr #19
   14294:	andeq	r6, r0, r8, lsl #1
   14298:	andeq	r6, r0, r0, asr r8
   1429c:	andeq	r6, r0, r0, ror r7
   142a0:	ldr	r4, [sp, #48]	; 0x30
   142a4:	cmp	r4, #1
   142a8:	beq	142bc <close_stdout@@Base+0x7dc>
   142ac:	vldr	d7, [pc, #972]	; 14680 <close_stdout@@Base+0xba0>
   142b0:	vcmpe.f64	d8, d7
   142b4:	vmrs	APSR_nzcv, fpscr
   142b8:	bmi	144b4 <close_stdout@@Base+0x9d4>
   142bc:	ldr	r3, [pc, #964]	; 14688 <close_stdout@@Base+0xba8>
   142c0:	mov	r1, #1
   142c4:	mvn	r2, #0
   142c8:	vstr	d8, [sp]
   142cc:	add	r3, pc, r3
   142d0:	ldr	r0, [sp, #28]
   142d4:	bl	11624 <__sprintf_chk@plt>
   142d8:	ldr	r0, [sp, #28]
   142dc:	bl	115dc <strlen@plt>
   142e0:	mov	r4, #0
   142e4:	mvn	r6, #0
   142e8:	mov	fp, r0
   142ec:	ldr	r5, [sp, #32]
   142f0:	mov	r2, fp
   142f4:	ldr	r1, [sp, #28]
   142f8:	rsb	sl, fp, r5
   142fc:	rsb	fp, r4, fp
   14300:	add	fp, sl, fp
   14304:	mov	r0, sl
   14308:	bl	11420 <memmove@plt>
   1430c:	str	fp, [sp, #16]
   14310:	tst	r8, #4
   14314:	bne	143c8 <close_stdout@@Base+0x8e8>
   14318:	tst	r8, #128	; 0x80
   1431c:	beq	14398 <close_stdout@@Base+0x8b8>
   14320:	cmn	r6, #1
   14324:	beq	14514 <close_stdout@@Base+0xa34>
   14328:	and	r3, r8, #256	; 0x100
   1432c:	orrs	r5, r6, r3
   14330:	beq	14398 <close_stdout@@Base+0x8b8>
   14334:	tst	r8, #64	; 0x40
   14338:	bne	14498 <close_stdout@@Base+0x9b8>
   1433c:	cmp	r6, #0
   14340:	ldreq	r2, [sp, #36]	; 0x24
   14344:	beq	14370 <close_stdout@@Base+0x890>
   14348:	ldr	r4, [sp, #56]	; 0x38
   1434c:	ldr	r5, [sp, #36]	; 0x24
   14350:	cmp	r4, #0
   14354:	add	r2, r5, #1
   14358:	beq	14488 <close_stdout@@Base+0x9a8>
   1435c:	ldr	r1, [pc, #808]	; 1468c <close_stdout@@Base+0xbac>
   14360:	add	r1, pc, r1
   14364:	ldrb	r1, [r1, r6]
   14368:	ldr	r4, [sp, #36]	; 0x24
   1436c:	strb	r1, [r4]
   14370:	cmp	r3, #0
   14374:	streq	r2, [sp, #36]	; 0x24
   14378:	beq	14398 <close_stdout@@Base+0x8b8>
   1437c:	ldr	r5, [sp, #56]	; 0x38
   14380:	cmp	r5, #0
   14384:	bne	14474 <close_stdout@@Base+0x994>
   14388:	mov	r3, #66	; 0x42
   1438c:	add	r4, r2, #1
   14390:	strb	r3, [r2]
   14394:	str	r4, [sp, #36]	; 0x24
   14398:	ldr	r5, [sp, #36]	; 0x24
   1439c:	mov	r3, #0
   143a0:	ldr	r4, [sp, #44]	; 0x2c
   143a4:	mov	r0, sl
   143a8:	ldr	r2, [sp, #132]	; 0x84
   143ac:	strb	r3, [r5]
   143b0:	ldr	r3, [r4]
   143b4:	cmp	r2, r3
   143b8:	bne	14820 <close_stdout@@Base+0xd40>
   143bc:	add	sp, sp, #140	; 0x8c
   143c0:	vpop	{d8-d9}
   143c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143c8:	ldr	r0, [sp, #40]	; 0x28
   143cc:	add	r5, sp, #88	; 0x58
   143d0:	ldr	r4, [sp, #16]
   143d4:	str	r5, [sp, #16]
   143d8:	bl	115dc <strlen@plt>
   143dc:	rsb	fp, sl, r4
   143e0:	mov	r1, sl
   143e4:	add	r7, sl, fp
   143e8:	mov	r3, #41	; 0x29
   143ec:	mov	r2, fp
   143f0:	mvn	r5, #0
   143f4:	mov	r4, r0
   143f8:	add	r0, sp, #88	; 0x58
   143fc:	bl	114e0 <__memcpy_chk@plt>
   14400:	mov	ip, r7
   14404:	ldr	sl, [sp, #40]	; 0x28
   14408:	add	r7, sp, #88	; 0x58
   1440c:	b	14428 <close_stdout@@Base+0x948>
   14410:	rsb	ip, r4, r0
   14414:	mov	r1, sl
   14418:	mov	r2, r4
   1441c:	mov	r0, ip
   14420:	bl	11444 <memcpy@plt>
   14424:	mov	ip, r0
   14428:	ldrb	r3, [r9]
   1442c:	cmp	r3, #0
   14430:	beq	14444 <close_stdout@@Base+0x964>
   14434:	cmp	r3, #255	; 0xff
   14438:	add	r9, r9, #1
   1443c:	movne	r5, r3
   14440:	moveq	r5, fp
   14444:	cmp	r5, fp
   14448:	movcs	r5, fp
   1444c:	rsb	r3, r5, ip
   14450:	rsb	fp, r5, fp
   14454:	add	r1, r7, fp
   14458:	mov	r2, r5
   1445c:	mov	r0, r3
   14460:	bl	11444 <memcpy@plt>
   14464:	cmp	fp, #0
   14468:	bne	14410 <close_stdout@@Base+0x930>
   1446c:	mov	sl, r0
   14470:	b	14318 <close_stdout@@Base+0x838>
   14474:	cmp	r6, #0
   14478:	movne	r3, #105	; 0x69
   1447c:	strbne	r3, [r2]
   14480:	addne	r2, r2, #1
   14484:	b	14388 <close_stdout@@Base+0x8a8>
   14488:	cmp	r6, #1
   1448c:	moveq	r1, #107	; 0x6b
   14490:	bne	1435c <close_stdout@@Base+0x87c>
   14494:	b	14368 <close_stdout@@Base+0x888>
   14498:	ldr	r5, [sp, #28]
   1449c:	mov	r2, #32
   144a0:	ldr	r4, [sp, #32]
   144a4:	strb	r2, [r5, #648]	; 0x288
   144a8:	add	r4, r4, #1
   144ac:	str	r4, [sp, #36]	; 0x24
   144b0:	b	1433c <close_stdout@@Base+0x85c>
   144b4:	vmov	r0, r1, d8
   144b8:	bl	18ca0 <close_stdout@@Base+0x51c0>
   144bc:	ldr	r2, [sp, #48]	; 0x30
   144c0:	cmp	r2, #0
   144c4:	mov	r4, r0
   144c8:	mov	r5, r1
   144cc:	movne	r0, #0
   144d0:	movne	r1, #0
   144d4:	bne	144f4 <close_stdout@@Base+0xa14>
   144d8:	bl	18b98 <close_stdout@@Base+0x50b8>
   144dc:	vmov	d7, r0, r1
   144e0:	ldr	r1, [sp, #48]	; 0x30
   144e4:	vcmp.f64	d8, d7
   144e8:	vmrs	APSR_nzcv, fpscr
   144ec:	moveq	r0, #0
   144f0:	movne	r0, #1
   144f4:	adds	r0, r0, r4
   144f8:	adc	r1, r1, r5
   144fc:	bl	18b98 <close_stdout@@Base+0x50b8>
   14500:	vmov	d8, r0, r1
   14504:	b	142bc <close_stdout@@Base+0x7dc>
   14508:	mov	ip, #0
   1450c:	str	ip, [sp, #64]	; 0x40
   14510:	b	1418c <close_stdout@@Base+0x6ac>
   14514:	ldrd	r4, [sp, #200]	; 0xc8
   14518:	cmp	r5, #0
   1451c:	cmpeq	r4, #1
   14520:	bls	147c0 <close_stdout@@Base+0xce0>
   14524:	ldr	ip, [sp, #60]	; 0x3c
   14528:	mov	r6, #1
   1452c:	mov	r2, #1
   14530:	mov	r3, #0
   14534:	mov	r0, r4
   14538:	mov	r1, r5
   1453c:	mul	r4, ip, r3
   14540:	umull	r2, r3, r2, ip
   14544:	add	r3, r4, r3
   14548:	cmp	r1, r3
   1454c:	cmpeq	r0, r2
   14550:	bls	14328 <close_stdout@@Base+0x848>
   14554:	add	r6, r6, #1
   14558:	cmp	r6, #8
   1455c:	bne	1453c <close_stdout@@Base+0xa5c>
   14560:	b	14328 <close_stdout@@Base+0x848>
   14564:	ldr	r0, [sp, #32]
   14568:	mvn	r6, #0
   1456c:	str	r0, [sp, #16]
   14570:	ldr	r0, [sp, #48]	; 0x30
   14574:	cmp	r0, #1
   14578:	beq	14690 <close_stdout@@Base+0xbb0>
   1457c:	ldr	r0, [sp, #48]	; 0x30
   14580:	cmp	r0, #0
   14584:	movne	ip, #0
   14588:	bne	145a0 <close_stdout@@Base+0xac0>
   1458c:	ldr	r3, [sp, #64]	; 0x40
   14590:	add	ip, r3, ip
   14594:	cmp	ip, #0
   14598:	movle	ip, #0
   1459c:	movgt	ip, #1
   145a0:	cmp	ip, #0
   145a4:	beq	14624 <close_stdout@@Base+0xb44>
   145a8:	ldr	r0, [sp, #72]	; 0x48
   145ac:	adds	r4, r4, #1
   145b0:	adc	r5, r5, #0
   145b4:	cmp	r0, #0
   145b8:	beq	14624 <close_stdout@@Base+0xb44>
   145bc:	ldr	r0, [sp, #60]	; 0x3c
   145c0:	mov	r1, #0
   145c4:	mov	r3, r1
   145c8:	mov	r2, r0
   145cc:	cmp	r3, r5
   145d0:	cmpeq	r2, r4
   145d4:	bne	14624 <close_stdout@@Base+0xb44>
   145d8:	cmp	r6, #8
   145dc:	beq	14624 <close_stdout@@Base+0xb44>
   145e0:	tst	r8, #8
   145e4:	add	r6, r6, #1
   145e8:	movne	r4, #1
   145ec:	movne	r5, #0
   145f0:	bne	14624 <close_stdout@@Base+0xb44>
   145f4:	ldr	r4, [sp, #16]
   145f8:	mov	r2, #48	; 0x30
   145fc:	ldr	r1, [sp, #52]	; 0x34
   14600:	mov	r5, #0
   14604:	sub	r3, r4, #1
   14608:	rsb	r3, fp, r3
   1460c:	strb	r2, [r4, #-1]
   14610:	mov	r2, fp
   14614:	str	r3, [sp, #16]
   14618:	mov	r0, r3
   1461c:	mov	r4, #1
   14620:	bl	11444 <memcpy@plt>
   14624:	ldr	r0, [sp, #16]
   14628:	sub	r7, r0, #1
   1462c:	mov	r0, r4
   14630:	mov	r1, r5
   14634:	mov	r2, #10
   14638:	mov	r3, #0
   1463c:	bl	18c54 <close_stdout@@Base+0x5174>
   14640:	mov	sl, r7
   14644:	mov	r0, r4
   14648:	mov	r1, r5
   1464c:	mov	r3, #0
   14650:	add	r2, r2, #48	; 0x30
   14654:	strb	r2, [r7], #-1
   14658:	mov	r2, #10
   1465c:	bl	18c54 <close_stdout@@Base+0x5174>
   14660:	mov	r4, r0
   14664:	mov	r5, r1
   14668:	orrs	r1, r4, r5
   1466c:	bne	1462c <close_stdout@@Base+0xb4c>
   14670:	b	14310 <close_stdout@@Base+0x830>
   14674:	movcc	ip, #3
   14678:	movcs	ip, #2
   1467c:	b	1418c <close_stdout@@Base+0x6ac>
   14680:	andeq	r0, r0, r0
   14684:	mvnsmi	r0, #0
   14688:	andeq	r6, r0, ip, asr r5
   1468c:			; <UNDEFINED> instruction: 0x000064b0
   14690:	mov	r2, #1
   14694:	mov	r3, #0
   14698:	and	r2, r2, r4
   1469c:	and	r3, r3, r5
   146a0:	adds	r2, r2, ip
   146a4:	adc	r3, r3, ip, asr #31
   146a8:	orr	ip, r2, r3
   146ac:	ldr	r3, [sp, #64]	; 0x40
   146b0:	cmp	ip, #0
   146b4:	addne	r3, r3, #1
   146b8:	cmp	r3, #5
   146bc:	mov	ip, r3
   146c0:	movle	ip, #0
   146c4:	movgt	ip, #1
   146c8:	b	145a0 <close_stdout@@Base+0xac0>
   146cc:	ldr	r1, [sp, #32]
   146d0:	mov	r6, #0
   146d4:	str	r1, [sp, #16]
   146d8:	b	14570 <close_stdout@@Base+0xa90>
   146dc:	ldr	r2, [sp, #32]
   146e0:	str	r6, [sp, #64]	; 0x40
   146e4:	mov	r6, ip
   146e8:	ldr	fp, [sp, #76]	; 0x4c
   146ec:	mov	ip, sl
   146f0:	ldr	r9, [sp, #80]	; 0x50
   146f4:	ldr	r8, [sp, #84]	; 0x54
   146f8:	str	r2, [sp, #16]
   146fc:	b	14570 <close_stdout@@Base+0xa90>
   14700:	cmp	r5, #0
   14704:	cmpeq	r4, #9
   14708:	str	r6, [sp, #64]	; 0x40
   1470c:	ldr	fp, [sp, #76]	; 0x4c
   14710:	mov	r6, ip
   14714:	ldrhi	r3, [sp, #32]
   14718:	mov	ip, sl
   1471c:	ldr	r9, [sp, #80]	; 0x50
   14720:	ldr	r8, [sp, #84]	; 0x54
   14724:	strhi	r3, [sp, #16]
   14728:	bhi	14570 <close_stdout@@Base+0xa90>
   1472c:	ldr	r3, [sp, #48]	; 0x30
   14730:	cmp	r3, #1
   14734:	beq	147c8 <close_stdout@@Base+0xce8>
   14738:	adds	r3, sl, #0
   1473c:	ldr	r1, [sp, #48]	; 0x30
   14740:	movne	r3, #1
   14744:	cmp	r1, #0
   14748:	movne	r3, #0
   1474c:	cmp	r3, #0
   14750:	ldr	r3, [sp, #64]	; 0x40
   14754:	beq	147a8 <close_stdout@@Base+0xcc8>
   14758:	add	r3, r3, #1
   1475c:	str	r3, [sp, #64]	; 0x40
   14760:	cmp	r3, #10
   14764:	beq	147f8 <close_stdout@@Base+0xd18>
   14768:	ldr	r0, [sp, #28]
   1476c:	ldr	r1, [sp, #64]	; 0x40
   14770:	add	r2, r0, #644	; 0x284
   14774:	add	r2, r2, #3
   14778:	add	r3, r1, #48	; 0x30
   1477c:	rsb	r2, fp, r2
   14780:	str	r2, [sp, #16]
   14784:	strb	r3, [r0, #647]	; 0x287
   14788:	mov	r2, fp
   1478c:	ldr	r1, [sp, #52]	; 0x34
   14790:	mov	r3, #0
   14794:	ldr	r0, [sp, #16]
   14798:	str	r3, [sp, #64]	; 0x40
   1479c:	bl	11444 <memcpy@plt>
   147a0:	ldr	ip, [sp, #64]	; 0x40
   147a4:	b	14570 <close_stdout@@Base+0xa90>
   147a8:	cmp	r3, #0
   147ac:	bne	14768 <close_stdout@@Base+0xc88>
   147b0:	ands	r3, r8, #8
   147b4:	bne	147e4 <close_stdout@@Base+0xd04>
   147b8:	str	r3, [sp, #64]	; 0x40
   147bc:	b	14768 <close_stdout@@Base+0xc88>
   147c0:	mov	r6, #0
   147c4:	b	14328 <close_stdout@@Base+0x848>
   147c8:	ldr	r0, [sp, #64]	; 0x40
   147cc:	and	r3, r0, #1
   147d0:	add	r3, sl, r3
   147d4:	cmp	r3, #2
   147d8:	movle	r3, #0
   147dc:	movgt	r3, #1
   147e0:	b	1474c <close_stdout@@Base+0xc6c>
   147e4:	ldr	r1, [sp, #32]
   147e8:	mov	r3, #0
   147ec:	str	r3, [sp, #64]	; 0x40
   147f0:	str	r1, [sp, #16]
   147f4:	b	14570 <close_stdout@@Base+0xa90>
   147f8:	adds	r4, r4, #1
   147fc:	mov	ip, #0
   14800:	adc	r5, r5, #0
   14804:	cmp	r5, #0
   14808:	cmpeq	r4, #10
   1480c:	bne	147b0 <close_stdout@@Base+0xcd0>
   14810:	ldr	r0, [sp, #32]
   14814:	str	ip, [sp, #64]	; 0x40
   14818:	str	r0, [sp, #16]
   1481c:	b	14570 <close_stdout@@Base+0xa90>
   14820:	bl	11498 <__stack_chk_fail@plt>
   14824:	ldr	r3, [pc, #432]	; 149dc <close_stdout@@Base+0xefc>
   14828:	push	{r4, r5, r6, r7, r8, r9, lr}
   1482c:	subs	r4, r0, #0
   14830:	ldr	r0, [pc, #424]	; 149e0 <close_stdout@@Base+0xf00>
   14834:	add	r3, pc, r3
   14838:	sub	sp, sp, #20
   1483c:	mov	r8, r1
   14840:	mov	r6, r2
   14844:	ldr	r7, [r3, r0]
   14848:	ldr	r3, [r7]
   1484c:	str	r3, [sp, #12]
   14850:	beq	14974 <close_stdout@@Base+0xe94>
   14854:	ldrb	r3, [r4]
   14858:	ldr	r5, [pc, #388]	; 149e4 <close_stdout@@Base+0xf04>
   1485c:	cmp	r3, #39	; 0x27
   14860:	ldr	r1, [pc, #384]	; 149e8 <close_stdout@@Base+0xf08>
   14864:	addeq	r4, r4, #1
   14868:	add	r5, pc, r5
   1486c:	add	r1, pc, r1
   14870:	mov	r3, #4
   14874:	mov	r0, r4
   14878:	add	r2, r5, #12
   1487c:	moveq	r9, #4
   14880:	movne	r9, #0
   14884:	bl	13738 <__assert_fail@plt+0x1fac>
   14888:	cmp	r0, #0
   1488c:	blt	148f8 <close_stdout@@Base+0xe18>
   14890:	add	r0, r5, r0, lsl #2
   14894:	mov	r4, #1
   14898:	mov	r5, #0
   1489c:	strd	r4, [r6]
   148a0:	ldr	r3, [r0, #12]
   148a4:	orr	r9, r9, r3
   148a8:	mov	r0, #0
   148ac:	str	r9, [r8]
   148b0:	ldrd	r4, [r6]
   148b4:	orrs	r3, r4, r5
   148b8:	bne	148e0 <close_stdout@@Base+0xe00>
   148bc:	ldr	r0, [pc, #296]	; 149ec <close_stdout@@Base+0xf0c>
   148c0:	mov	r5, #0
   148c4:	add	r0, pc, r0
   148c8:	bl	11564 <getenv@plt>
   148cc:	cmp	r0, #0
   148d0:	mov	r0, #4
   148d4:	movne	r4, #512	; 0x200
   148d8:	moveq	r4, #1024	; 0x400
   148dc:	strd	r4, [r6]
   148e0:	ldr	r2, [sp, #12]
   148e4:	ldr	r3, [r7]
   148e8:	cmp	r2, r3
   148ec:	bne	149d8 <close_stdout@@Base+0xef8>
   148f0:	add	sp, sp, #20
   148f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   148f8:	ldr	ip, [pc, #240]	; 149f0 <close_stdout@@Base+0xf10>
   148fc:	mov	r3, r6
   14900:	mov	r0, r4
   14904:	add	r1, sp, #8
   14908:	add	ip, pc, ip
   1490c:	mov	r2, #0
   14910:	str	ip, [sp]
   14914:	bl	1768c <close_stdout@@Base+0x3bac>
   14918:	cmp	r0, #0
   1491c:	movne	r3, #0
   14920:	strne	r3, [r8]
   14924:	bne	148b0 <close_stdout@@Base+0xdd0>
   14928:	ldrb	r3, [r4]
   1492c:	sub	r3, r3, #48	; 0x30
   14930:	cmp	r3, #9
   14934:	bls	148a8 <close_stdout@@Base+0xdc8>
   14938:	ldr	r2, [sp, #8]
   1493c:	cmp	r4, r2
   14940:	beq	1495c <close_stdout@@Base+0xe7c>
   14944:	ldrb	r3, [r4, #1]!
   14948:	sub	r3, r3, #48	; 0x30
   1494c:	cmp	r3, #9
   14950:	bls	148a8 <close_stdout@@Base+0xdc8>
   14954:	cmp	r2, r4
   14958:	bne	14944 <close_stdout@@Base+0xe64>
   1495c:	ldrb	r3, [r2, #-1]
   14960:	cmp	r3, #66	; 0x42
   14964:	orrne	r9, r9, #128	; 0x80
   14968:	beq	149c4 <close_stdout@@Base+0xee4>
   1496c:	orr	r9, r9, #32
   14970:	b	148a8 <close_stdout@@Base+0xdc8>
   14974:	ldr	r0, [pc, #120]	; 149f4 <close_stdout@@Base+0xf14>
   14978:	add	r0, pc, r0
   1497c:	bl	11564 <getenv@plt>
   14980:	subs	r4, r0, #0
   14984:	bne	14854 <close_stdout@@Base+0xd74>
   14988:	ldr	r0, [pc, #104]	; 149f8 <close_stdout@@Base+0xf18>
   1498c:	add	r0, pc, r0
   14990:	bl	11564 <getenv@plt>
   14994:	subs	r4, r0, #0
   14998:	bne	14854 <close_stdout@@Base+0xd74>
   1499c:	ldr	r0, [pc, #88]	; 149fc <close_stdout@@Base+0xf1c>
   149a0:	mov	r9, #0
   149a4:	add	r0, pc, r0
   149a8:	bl	11564 <getenv@plt>
   149ac:	mov	r3, #0
   149b0:	cmp	r0, #0
   149b4:	movne	r2, #512	; 0x200
   149b8:	moveq	r2, #1024	; 0x400
   149bc:	strd	r2, [r6]
   149c0:	b	148a8 <close_stdout@@Base+0xdc8>
   149c4:	ldrb	r3, [r2, #-2]
   149c8:	orr	r9, r9, #384	; 0x180
   149cc:	cmp	r3, #105	; 0x69
   149d0:	bne	148a8 <close_stdout@@Base+0xdc8>
   149d4:	b	1496c <close_stdout@@Base+0xe8c>
   149d8:	bl	11498 <__stack_chk_fail@plt>
   149dc:	andeq	r7, r1, r4, asr #15
   149e0:	andeq	r0, r0, ip, asr r1
   149e4:	andeq	r5, r0, r8, lsr #31
   149e8:	andeq	r7, r1, r4, ror #12
   149ec:	andeq	r5, r0, ip, lsl #31
   149f0:	andeq	r5, r0, r8, asr pc
   149f4:	andeq	r5, r0, r0, asr #29
   149f8:			; <UNDEFINED> instruction: 0x00005eb8
   149fc:	andeq	r5, r0, ip, lsr #29
   14a00:	push	{r3, r4, r5, r6, r7, lr}
   14a04:	add	r6, r2, #19
   14a08:	mov	r4, r0
   14a0c:	mov	r5, r1
   14a10:	mov	r3, #0
   14a14:	strb	r3, [r2, #20]
   14a18:	mov	r0, r4
   14a1c:	mov	r1, r5
   14a20:	mov	r2, #10
   14a24:	mov	r3, #0
   14a28:	bl	18c54 <close_stdout@@Base+0x5174>
   14a2c:	mov	r7, r6
   14a30:	mov	r0, r4
   14a34:	mov	r1, r5
   14a38:	mov	r3, #0
   14a3c:	add	ip, r2, #48	; 0x30
   14a40:	mov	r2, #10
   14a44:	strb	ip, [r6], #-1
   14a48:	bl	18c54 <close_stdout@@Base+0x5174>
   14a4c:	mov	r4, r0
   14a50:	mov	r5, r1
   14a54:	orrs	r3, r4, r5
   14a58:	bne	14a18 <close_stdout@@Base+0xf38>
   14a5c:	mov	r0, r7
   14a60:	pop	{r3, r4, r5, r6, r7, pc}
   14a64:	push	{r3, r4, r5, r6, r7, lr}
   14a68:	subs	r4, r0, #0
   14a6c:	ldr	r5, [pc, #172]	; 14b20 <close_stdout@@Base+0x1040>
   14a70:	add	r5, pc, r5
   14a74:	beq	14afc <close_stdout@@Base+0x101c>
   14a78:	mov	r1, #47	; 0x2f
   14a7c:	bl	116d8 <strrchr@plt>
   14a80:	subs	r6, r0, #0
   14a84:	beq	14ae0 <close_stdout@@Base+0x1000>
   14a88:	add	r7, r6, #1
   14a8c:	rsb	r3, r4, r7
   14a90:	cmp	r3, #6
   14a94:	ble	14ae0 <close_stdout@@Base+0x1000>
   14a98:	ldr	r1, [pc, #132]	; 14b24 <close_stdout@@Base+0x1044>
   14a9c:	sub	r0, r6, #6
   14aa0:	mov	r2, #7
   14aa4:	add	r1, pc, r1
   14aa8:	bl	11750 <strncmp@plt>
   14aac:	cmp	r0, #0
   14ab0:	bne	14ae0 <close_stdout@@Base+0x1000>
   14ab4:	ldr	r1, [pc, #108]	; 14b28 <close_stdout@@Base+0x1048>
   14ab8:	mov	r0, r7
   14abc:	mov	r2, #3
   14ac0:	add	r1, pc, r1
   14ac4:	bl	11750 <strncmp@plt>
   14ac8:	cmp	r0, #0
   14acc:	movne	r4, r7
   14ad0:	ldreq	r3, [pc, #84]	; 14b2c <close_stdout@@Base+0x104c>
   14ad4:	addeq	r4, r6, #4
   14ad8:	ldreq	r3, [r5, r3]
   14adc:	streq	r4, [r3]
   14ae0:	ldr	r2, [pc, #72]	; 14b30 <close_stdout@@Base+0x1050>
   14ae4:	ldr	r3, [pc, #72]	; 14b34 <close_stdout@@Base+0x1054>
   14ae8:	ldr	r2, [r5, r2]
   14aec:	str	r4, [r2]
   14af0:	ldr	r3, [r5, r3]
   14af4:	str	r4, [r3]
   14af8:	pop	{r3, r4, r5, r6, r7, pc}
   14afc:	ldr	r3, [pc, #52]	; 14b38 <close_stdout@@Base+0x1058>
   14b00:	mov	r1, #1
   14b04:	ldr	r0, [pc, #48]	; 14b3c <close_stdout@@Base+0x105c>
   14b08:	mov	r2, #55	; 0x37
   14b0c:	ldr	r3, [r5, r3]
   14b10:	add	r0, pc, r0
   14b14:	ldr	r3, [r3]
   14b18:	bl	114ec <fwrite@plt>
   14b1c:	bl	11768 <abort@plt>
   14b20:	andeq	r7, r1, r8, lsl #11
   14b24:	andeq	r5, r0, ip, lsl lr
   14b28:	andeq	r5, r0, r8, lsl #28
   14b2c:	muleq	r0, r0, r1
   14b30:	andeq	r0, r0, r8, lsl #3
   14b34:	andeq	r0, r0, r4, lsl #3
   14b38:	andeq	r0, r0, r8, ror #2
   14b3c:	andeq	r5, r0, r8, ror sp
   14b40:	push	{r3, lr}
   14b44:	mov	r3, r0
   14b48:	mov	r2, #0
   14b4c:	cmp	r1, #8
   14b50:	str	r2, [r3], #4
   14b54:	add	r3, r3, #4
   14b58:	str	r2, [r0, #4]
   14b5c:	str	r2, [r3], #4
   14b60:	str	r2, [r3], #4
   14b64:	str	r2, [r3], #4
   14b68:	str	r2, [r3], #4
   14b6c:	str	r2, [r3], #4
   14b70:	str	r2, [r3], #4
   14b74:	str	r2, [r3], #4
   14b78:	str	r2, [r3], #4
   14b7c:	str	r2, [r3], #4
   14b80:	str	r2, [r3]
   14b84:	beq	14b90 <close_stdout@@Base+0x10b0>
   14b88:	str	r1, [r0]
   14b8c:	pop	{r3, pc}
   14b90:	bl	11768 <abort@plt>
   14b94:	push	{r4, r5, r6, lr}
   14b98:	mov	r4, r0
   14b9c:	mov	r6, r1
   14ba0:	mov	r0, #0
   14ba4:	mov	r1, r4
   14ba8:	mov	r2, #5
   14bac:	bl	1148c <dcgettext@plt>
   14bb0:	cmp	r0, r4
   14bb4:	mov	r5, r0
   14bb8:	beq	14bc0 <close_stdout@@Base+0x10e0>
   14bbc:	pop	{r4, r5, r6, pc}
   14bc0:	bl	1821c <close_stdout@@Base+0x473c>
   14bc4:	ldrb	r3, [r0]
   14bc8:	bic	r3, r3, #32
   14bcc:	cmp	r3, #85	; 0x55
   14bd0:	bne	14c44 <close_stdout@@Base+0x1164>
   14bd4:	ldrb	r3, [r0, #1]
   14bd8:	bic	r3, r3, #32
   14bdc:	cmp	r3, #84	; 0x54
   14be0:	bne	14c30 <close_stdout@@Base+0x1150>
   14be4:	ldrb	r3, [r0, #2]
   14be8:	bic	r3, r3, #32
   14bec:	cmp	r3, #70	; 0x46
   14bf0:	bne	14c30 <close_stdout@@Base+0x1150>
   14bf4:	ldrb	r3, [r0, #3]
   14bf8:	cmp	r3, #45	; 0x2d
   14bfc:	bne	14c30 <close_stdout@@Base+0x1150>
   14c00:	ldrb	r3, [r0, #4]
   14c04:	cmp	r3, #56	; 0x38
   14c08:	bne	14c30 <close_stdout@@Base+0x1150>
   14c0c:	ldrb	r3, [r0, #5]
   14c10:	cmp	r3, #0
   14c14:	bne	14c30 <close_stdout@@Base+0x1150>
   14c18:	ldrb	r3, [r5]
   14c1c:	cmp	r3, #96	; 0x60
   14c20:	beq	14cbc <close_stdout@@Base+0x11dc>
   14c24:	ldr	r0, [pc, #180]	; 14ce0 <close_stdout@@Base+0x1200>
   14c28:	add	r0, pc, r0
   14c2c:	pop	{r4, r5, r6, pc}
   14c30:	cmp	r6, #7
   14c34:	beq	14cc8 <close_stdout@@Base+0x11e8>
   14c38:	ldr	r0, [pc, #164]	; 14ce4 <close_stdout@@Base+0x1204>
   14c3c:	add	r0, pc, r0
   14c40:	pop	{r4, r5, r6, pc}
   14c44:	cmp	r3, #71	; 0x47
   14c48:	bne	14c30 <close_stdout@@Base+0x1150>
   14c4c:	ldrb	r3, [r0, #1]
   14c50:	bic	r3, r3, #32
   14c54:	cmp	r3, #66	; 0x42
   14c58:	bne	14c30 <close_stdout@@Base+0x1150>
   14c5c:	ldrb	r3, [r0, #2]
   14c60:	cmp	r3, #49	; 0x31
   14c64:	bne	14c30 <close_stdout@@Base+0x1150>
   14c68:	ldrb	r3, [r0, #3]
   14c6c:	cmp	r3, #56	; 0x38
   14c70:	bne	14c30 <close_stdout@@Base+0x1150>
   14c74:	ldrb	r3, [r0, #4]
   14c78:	cmp	r3, #48	; 0x30
   14c7c:	bne	14c30 <close_stdout@@Base+0x1150>
   14c80:	ldrb	r3, [r0, #5]
   14c84:	cmp	r3, #51	; 0x33
   14c88:	bne	14c30 <close_stdout@@Base+0x1150>
   14c8c:	ldrb	r3, [r0, #6]
   14c90:	cmp	r3, #48	; 0x30
   14c94:	bne	14c30 <close_stdout@@Base+0x1150>
   14c98:	ldrb	r3, [r0, #7]
   14c9c:	cmp	r3, #0
   14ca0:	bne	14c30 <close_stdout@@Base+0x1150>
   14ca4:	ldrb	r3, [r5]
   14ca8:	cmp	r3, #96	; 0x60
   14cac:	beq	14cd4 <close_stdout@@Base+0x11f4>
   14cb0:	ldr	r0, [pc, #48]	; 14ce8 <close_stdout@@Base+0x1208>
   14cb4:	add	r0, pc, r0
   14cb8:	pop	{r4, r5, r6, pc}
   14cbc:	ldr	r0, [pc, #40]	; 14cec <close_stdout@@Base+0x120c>
   14cc0:	add	r0, pc, r0
   14cc4:	pop	{r4, r5, r6, pc}
   14cc8:	ldr	r0, [pc, #32]	; 14cf0 <close_stdout@@Base+0x1210>
   14ccc:	add	r0, pc, r0
   14cd0:	pop	{r4, r5, r6, pc}
   14cd4:	ldr	r0, [pc, #24]	; 14cf4 <close_stdout@@Base+0x1214>
   14cd8:	add	r0, pc, r0
   14cdc:	pop	{r4, r5, r6, pc}
   14ce0:	andeq	r5, r0, r4, asr #25
   14ce4:			; <UNDEFINED> instruction: 0x00005cb8
   14ce8:	andeq	r5, r0, ip, lsr ip
   14cec:	andeq	r5, r0, r0, asr #24
   14cf0:	andeq	r5, r0, ip, lsr #24
   14cf4:	andeq	r5, r0, r4, lsr #24
   14cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cfc:	sub	sp, sp, #124	; 0x7c
   14d00:	ldr	ip, [pc, #3304]	; 159f0 <close_stdout@@Base+0x1f10>
   14d04:	mov	sl, r1
   14d08:	str	r0, [sp, #40]	; 0x28
   14d0c:	mov	r8, r3
   14d10:	ldr	r0, [pc, #3292]	; 159f4 <close_stdout@@Base+0x1f14>
   14d14:	add	ip, pc, ip
   14d18:	str	r2, [sp, #32]
   14d1c:	ldr	r1, [sp, #164]	; 0xa4
   14d20:	mov	r3, ip
   14d24:	ldr	r0, [ip, r0]
   14d28:	ldr	r2, [sp, #172]	; 0xac
   14d2c:	ubfx	r1, r1, #1, #1
   14d30:	str	r1, [sp, #36]	; 0x24
   14d34:	str	r0, [sp, #56]	; 0x38
   14d38:	ldr	r0, [sp, #168]	; 0xa8
   14d3c:	ldr	r1, [sp, #176]	; 0xb0
   14d40:	str	r2, [sp, #72]	; 0x48
   14d44:	str	r0, [sp, #48]	; 0x30
   14d48:	ldr	r0, [sp, #56]	; 0x38
   14d4c:	str	r1, [sp, #68]	; 0x44
   14d50:	ldr	r3, [r0]
   14d54:	str	r3, [sp, #116]	; 0x74
   14d58:	bl	11504 <__ctype_get_mb_cur_max@plt>
   14d5c:	ldr	r2, [sp, #160]	; 0xa0
   14d60:	str	r0, [sp, #64]	; 0x40
   14d64:	cmp	r2, #8
   14d68:	addls	pc, pc, r2, lsl #2
   14d6c:	b	158cc <close_stdout@@Base+0x1dec>
   14d70:	b	14d94 <close_stdout@@Base+0x12b4>
   14d74:	b	155e4 <close_stdout@@Base+0x1b04>
   14d78:	b	15614 <close_stdout@@Base+0x1b34>
   14d7c:	b	154c4 <close_stdout@@Base+0x19e4>
   14d80:	b	15504 <close_stdout@@Base+0x1a24>
   14d84:	b	15530 <close_stdout@@Base+0x1a50>
   14d88:	b	15550 <close_stdout@@Base+0x1a70>
   14d8c:	b	15550 <close_stdout@@Base+0x1a70>
   14d90:	b	15550 <close_stdout@@Base+0x1a70>
   14d94:	mov	r2, #0
   14d98:	str	r2, [sp, #36]	; 0x24
   14d9c:	mov	r9, r2
   14da0:	str	r2, [sp, #24]
   14da4:	str	r2, [sp, #28]
   14da8:	str	r2, [sp, #52]	; 0x34
   14dac:	ldr	r0, [sp, #36]	; 0x24
   14db0:	mov	fp, #0
   14db4:	ldr	r1, [sp, #24]
   14db8:	eor	r2, r0, #1
   14dbc:	eor	r3, r1, #1
   14dc0:	and	r3, r2, r3
   14dc4:	and	r2, r1, r0
   14dc8:	str	r3, [sp, #44]	; 0x2c
   14dcc:	str	r2, [sp, #76]	; 0x4c
   14dd0:	cmn	r8, #1
   14dd4:	beq	15154 <close_stdout@@Base+0x1674>
   14dd8:	subs	r3, fp, r8
   14ddc:	movne	r3, #1
   14de0:	cmp	r3, #0
   14de4:	beq	1516c <close_stdout@@Base+0x168c>
   14de8:	ldr	r3, [sp, #28]
   14dec:	ldr	r0, [sp, #24]
   14df0:	adds	r7, r3, #0
   14df4:	movne	r7, #1
   14df8:	ands	r6, r7, r0
   14dfc:	bne	15658 <close_stdout@@Base+0x1b78>
   14e00:	ldr	r1, [sp, #32]
   14e04:	add	r5, r1, fp
   14e08:	ldrb	r4, [r5]
   14e0c:	cmp	r4, #126	; 0x7e
   14e10:	addls	pc, pc, r4, lsl #2
   14e14:	b	153d8 <close_stdout@@Base+0x18f8>
   14e18:	b	152e4 <close_stdout@@Base+0x1804>
   14e1c:	b	153d8 <close_stdout@@Base+0x18f8>
   14e20:	b	153d8 <close_stdout@@Base+0x18f8>
   14e24:	b	153d8 <close_stdout@@Base+0x18f8>
   14e28:	b	153d8 <close_stdout@@Base+0x18f8>
   14e2c:	b	153d8 <close_stdout@@Base+0x18f8>
   14e30:	b	153d8 <close_stdout@@Base+0x18f8>
   14e34:	b	152cc <close_stdout@@Base+0x17ec>
   14e38:	b	152b4 <close_stdout@@Base+0x17d4>
   14e3c:	b	152dc <close_stdout@@Base+0x17fc>
   14e40:	b	152d4 <close_stdout@@Base+0x17f4>
   14e44:	b	152c4 <close_stdout@@Base+0x17e4>
   14e48:	b	152bc <close_stdout@@Base+0x17dc>
   14e4c:	b	15280 <close_stdout@@Base+0x17a0>
   14e50:	b	153d8 <close_stdout@@Base+0x18f8>
   14e54:	b	153d8 <close_stdout@@Base+0x18f8>
   14e58:	b	153d8 <close_stdout@@Base+0x18f8>
   14e5c:	b	153d8 <close_stdout@@Base+0x18f8>
   14e60:	b	153d8 <close_stdout@@Base+0x18f8>
   14e64:	b	153d8 <close_stdout@@Base+0x18f8>
   14e68:	b	153d8 <close_stdout@@Base+0x18f8>
   14e6c:	b	153d8 <close_stdout@@Base+0x18f8>
   14e70:	b	153d8 <close_stdout@@Base+0x18f8>
   14e74:	b	153d8 <close_stdout@@Base+0x18f8>
   14e78:	b	153d8 <close_stdout@@Base+0x18f8>
   14e7c:	b	153d8 <close_stdout@@Base+0x18f8>
   14e80:	b	153d8 <close_stdout@@Base+0x18f8>
   14e84:	b	153d8 <close_stdout@@Base+0x18f8>
   14e88:	b	153d8 <close_stdout@@Base+0x18f8>
   14e8c:	b	153d8 <close_stdout@@Base+0x18f8>
   14e90:	b	153d8 <close_stdout@@Base+0x18f8>
   14e94:	b	153d8 <close_stdout@@Base+0x18f8>
   14e98:	b	1520c <close_stdout@@Base+0x172c>
   14e9c:	b	1520c <close_stdout@@Base+0x172c>
   14ea0:	b	1520c <close_stdout@@Base+0x172c>
   14ea4:	b	15204 <close_stdout@@Base+0x1724>
   14ea8:	b	1520c <close_stdout@@Base+0x172c>
   14eac:	b	150e0 <close_stdout@@Base+0x1600>
   14eb0:	b	1520c <close_stdout@@Base+0x172c>
   14eb4:	b	15380 <close_stdout@@Base+0x18a0>
   14eb8:	b	1520c <close_stdout@@Base+0x172c>
   14ebc:	b	1520c <close_stdout@@Base+0x172c>
   14ec0:	b	1520c <close_stdout@@Base+0x172c>
   14ec4:	b	150e0 <close_stdout@@Base+0x1600>
   14ec8:	b	150e0 <close_stdout@@Base+0x1600>
   14ecc:	b	150e0 <close_stdout@@Base+0x1600>
   14ed0:	b	150e0 <close_stdout@@Base+0x1600>
   14ed4:	b	150e0 <close_stdout@@Base+0x1600>
   14ed8:	b	150e0 <close_stdout@@Base+0x1600>
   14edc:	b	150e0 <close_stdout@@Base+0x1600>
   14ee0:	b	150e0 <close_stdout@@Base+0x1600>
   14ee4:	b	150e0 <close_stdout@@Base+0x1600>
   14ee8:	b	150e0 <close_stdout@@Base+0x1600>
   14eec:	b	150e0 <close_stdout@@Base+0x1600>
   14ef0:	b	150e0 <close_stdout@@Base+0x1600>
   14ef4:	b	150e0 <close_stdout@@Base+0x1600>
   14ef8:	b	150e0 <close_stdout@@Base+0x1600>
   14efc:	b	150e0 <close_stdout@@Base+0x1600>
   14f00:	b	150e0 <close_stdout@@Base+0x1600>
   14f04:	b	1520c <close_stdout@@Base+0x172c>
   14f08:	b	1520c <close_stdout@@Base+0x172c>
   14f0c:	b	1520c <close_stdout@@Base+0x172c>
   14f10:	b	1520c <close_stdout@@Base+0x172c>
   14f14:	b	15014 <close_stdout@@Base+0x1534>
   14f18:	b	153d8 <close_stdout@@Base+0x18f8>
   14f1c:	b	150e0 <close_stdout@@Base+0x1600>
   14f20:	b	150e0 <close_stdout@@Base+0x1600>
   14f24:	b	150e0 <close_stdout@@Base+0x1600>
   14f28:	b	150e0 <close_stdout@@Base+0x1600>
   14f2c:	b	150e0 <close_stdout@@Base+0x1600>
   14f30:	b	150e0 <close_stdout@@Base+0x1600>
   14f34:	b	150e0 <close_stdout@@Base+0x1600>
   14f38:	b	150e0 <close_stdout@@Base+0x1600>
   14f3c:	b	150e0 <close_stdout@@Base+0x1600>
   14f40:	b	150e0 <close_stdout@@Base+0x1600>
   14f44:	b	150e0 <close_stdout@@Base+0x1600>
   14f48:	b	150e0 <close_stdout@@Base+0x1600>
   14f4c:	b	150e0 <close_stdout@@Base+0x1600>
   14f50:	b	150e0 <close_stdout@@Base+0x1600>
   14f54:	b	150e0 <close_stdout@@Base+0x1600>
   14f58:	b	150e0 <close_stdout@@Base+0x1600>
   14f5c:	b	150e0 <close_stdout@@Base+0x1600>
   14f60:	b	150e0 <close_stdout@@Base+0x1600>
   14f64:	b	150e0 <close_stdout@@Base+0x1600>
   14f68:	b	150e0 <close_stdout@@Base+0x1600>
   14f6c:	b	150e0 <close_stdout@@Base+0x1600>
   14f70:	b	150e0 <close_stdout@@Base+0x1600>
   14f74:	b	150e0 <close_stdout@@Base+0x1600>
   14f78:	b	150e0 <close_stdout@@Base+0x1600>
   14f7c:	b	150e0 <close_stdout@@Base+0x1600>
   14f80:	b	150e0 <close_stdout@@Base+0x1600>
   14f84:	b	1520c <close_stdout@@Base+0x172c>
   14f88:	b	15364 <close_stdout@@Base+0x1884>
   14f8c:	b	150e0 <close_stdout@@Base+0x1600>
   14f90:	b	1520c <close_stdout@@Base+0x172c>
   14f94:	b	150e0 <close_stdout@@Base+0x1600>
   14f98:	b	1520c <close_stdout@@Base+0x172c>
   14f9c:	b	150e0 <close_stdout@@Base+0x1600>
   14fa0:	b	150e0 <close_stdout@@Base+0x1600>
   14fa4:	b	150e0 <close_stdout@@Base+0x1600>
   14fa8:	b	150e0 <close_stdout@@Base+0x1600>
   14fac:	b	150e0 <close_stdout@@Base+0x1600>
   14fb0:	b	150e0 <close_stdout@@Base+0x1600>
   14fb4:	b	150e0 <close_stdout@@Base+0x1600>
   14fb8:	b	150e0 <close_stdout@@Base+0x1600>
   14fbc:	b	150e0 <close_stdout@@Base+0x1600>
   14fc0:	b	150e0 <close_stdout@@Base+0x1600>
   14fc4:	b	150e0 <close_stdout@@Base+0x1600>
   14fc8:	b	150e0 <close_stdout@@Base+0x1600>
   14fcc:	b	150e0 <close_stdout@@Base+0x1600>
   14fd0:	b	150e0 <close_stdout@@Base+0x1600>
   14fd4:	b	150e0 <close_stdout@@Base+0x1600>
   14fd8:	b	150e0 <close_stdout@@Base+0x1600>
   14fdc:	b	150e0 <close_stdout@@Base+0x1600>
   14fe0:	b	150e0 <close_stdout@@Base+0x1600>
   14fe4:	b	150e0 <close_stdout@@Base+0x1600>
   14fe8:	b	150e0 <close_stdout@@Base+0x1600>
   14fec:	b	150e0 <close_stdout@@Base+0x1600>
   14ff0:	b	150e0 <close_stdout@@Base+0x1600>
   14ff4:	b	150e0 <close_stdout@@Base+0x1600>
   14ff8:	b	150e0 <close_stdout@@Base+0x1600>
   14ffc:	b	150e0 <close_stdout@@Base+0x1600>
   15000:	b	150e0 <close_stdout@@Base+0x1600>
   15004:	b	151ec <close_stdout@@Base+0x170c>
   15008:	b	1520c <close_stdout@@Base+0x172c>
   1500c:	b	151ec <close_stdout@@Base+0x170c>
   15010:	b	15204 <close_stdout@@Base+0x1724>
   15014:	ldr	r3, [sp, #160]	; 0xa0
   15018:	cmp	r3, #2
   1501c:	beq	158a8 <close_stdout@@Base+0x1dc8>
   15020:	cmp	r3, #3
   15024:	bne	150e0 <close_stdout@@Base+0x1600>
   15028:	ldr	r1, [sp, #164]	; 0xa4
   1502c:	tst	r1, #4
   15030:	beq	150e0 <close_stdout@@Base+0x1600>
   15034:	add	r3, fp, #2
   15038:	cmp	r8, r3
   1503c:	bls	150e0 <close_stdout@@Base+0x1600>
   15040:	ldrb	r2, [r5, #1]
   15044:	mov	r1, #1
   15048:	cmp	r2, #63	; 0x3f
   1504c:	bne	150e0 <close_stdout@@Base+0x1600>
   15050:	ldr	r0, [sp, #32]
   15054:	ldrb	ip, [r0, r3]
   15058:	sub	r0, ip, #33	; 0x21
   1505c:	uxtb	r0, r0
   15060:	cmp	r0, #29
   15064:	bhi	150e0 <close_stdout@@Base+0x1600>
   15068:	lsl	r1, r1, r0
   1506c:	movw	r0, #20929	; 0x51c1
   15070:	movt	r0, #14336	; 0x3800
   15074:	and	r0, r1, r0
   15078:	cmp	r0, #0
   1507c:	beq	150e0 <close_stdout@@Base+0x1600>
   15080:	ldr	r1, [sp, #36]	; 0x24
   15084:	cmp	r1, #0
   15088:	bne	15228 <close_stdout@@Base+0x1748>
   1508c:	cmp	r9, sl
   15090:	mov	r4, ip
   15094:	mov	fp, r3
   15098:	ldrcc	r0, [sp, #40]	; 0x28
   1509c:	strbcc	r2, [r0, r9]
   150a0:	add	r2, r9, #1
   150a4:	cmp	sl, r2
   150a8:	ldrhi	r0, [sp, #40]	; 0x28
   150ac:	movhi	r1, #34	; 0x22
   150b0:	strbhi	r1, [r0, r2]
   150b4:	add	r2, r9, #2
   150b8:	cmp	sl, r2
   150bc:	ldrhi	r0, [sp, #40]	; 0x28
   150c0:	movhi	r1, #34	; 0x22
   150c4:	strbhi	r1, [r0, r2]
   150c8:	add	r2, r9, #3
   150cc:	cmp	sl, r2
   150d0:	add	r9, r9, #4
   150d4:	ldrhi	r0, [sp, #40]	; 0x28
   150d8:	movhi	r1, #63	; 0x3f
   150dc:	strbhi	r1, [r0, r2]
   150e0:	ldr	r0, [sp, #44]	; 0x2c
   150e4:	cmp	r0, #0
   150e8:	bne	15110 <close_stdout@@Base+0x1630>
   150ec:	ldr	r1, [sp, #48]	; 0x30
   150f0:	cmp	r1, #0
   150f4:	beq	15110 <close_stdout@@Base+0x1630>
   150f8:	ubfx	r2, r4, #5, #8
   150fc:	and	r3, r4, #31
   15100:	ldr	r2, [r1, r2, lsl #2]
   15104:	lsr	r3, r2, r3
   15108:	tst	r3, #1
   1510c:	bne	15118 <close_stdout@@Base+0x1638>
   15110:	cmp	r6, #0
   15114:	beq	15138 <close_stdout@@Base+0x1658>
   15118:	ldr	r2, [sp, #36]	; 0x24
   1511c:	cmp	r2, #0
   15120:	bne	15228 <close_stdout@@Base+0x1748>
   15124:	cmp	r9, sl
   15128:	ldrcc	r0, [sp, #40]	; 0x28
   1512c:	movcc	r3, #92	; 0x5c
   15130:	strbcc	r3, [r0, r9]
   15134:	add	r9, r9, #1
   15138:	add	fp, fp, #1
   1513c:	cmp	r9, sl
   15140:	ldrcc	r1, [sp, #40]	; 0x28
   15144:	strbcc	r4, [r1, r9]
   15148:	cmn	r8, #1
   1514c:	add	r9, r9, #1
   15150:	bne	14dd8 <close_stdout@@Base+0x12f8>
   15154:	ldr	r2, [sp, #32]
   15158:	ldrb	r3, [r2, fp]
   1515c:	adds	r3, r3, #0
   15160:	movne	r3, #1
   15164:	cmp	r3, #0
   15168:	bne	14de8 <close_stdout@@Base+0x1308>
   1516c:	ldr	r3, [sp, #160]	; 0xa0
   15170:	cmp	r9, #0
   15174:	cmpeq	r3, #2
   15178:	bne	15188 <close_stdout@@Base+0x16a8>
   1517c:	ldr	r0, [sp, #36]	; 0x24
   15180:	cmp	r0, #0
   15184:	bne	15228 <close_stdout@@Base+0x1748>
   15188:	ldr	r1, [sp, #36]	; 0x24
   1518c:	ldr	r2, [sp, #52]	; 0x34
   15190:	eor	r3, r1, #1
   15194:	cmp	r2, #0
   15198:	moveq	r3, #0
   1519c:	andne	r3, r3, #1
   151a0:	cmp	r3, #0
   151a4:	beq	151d0 <close_stdout@@Base+0x16f0>
   151a8:	ldrb	r3, [r2]
   151ac:	cmp	r3, #0
   151b0:	beq	151d0 <close_stdout@@Base+0x16f0>
   151b4:	ldr	r1, [sp, #40]	; 0x28
   151b8:	cmp	sl, r9
   151bc:	strbhi	r3, [r1, r9]
   151c0:	ldrb	r3, [r2, #1]!
   151c4:	add	r9, r9, #1
   151c8:	cmp	r3, #0
   151cc:	bne	151b8 <close_stdout@@Base+0x16d8>
   151d0:	cmp	r9, sl
   151d4:	movcs	r0, r9
   151d8:	ldrcc	r1, [sp, #40]	; 0x28
   151dc:	movcc	r3, #0
   151e0:	movcc	r0, r9
   151e4:	strbcc	r3, [r1, r9]
   151e8:	b	15264 <close_stdout@@Base+0x1784>
   151ec:	cmn	r8, #1
   151f0:	beq	158b8 <close_stdout@@Base+0x1dd8>
   151f4:	subs	r3, r8, #1
   151f8:	movne	r3, #1
   151fc:	cmp	r3, #0
   15200:	bne	150e0 <close_stdout@@Base+0x1600>
   15204:	cmp	fp, #0
   15208:	bne	150e0 <close_stdout@@Base+0x1600>
   1520c:	ldr	r3, [sp, #36]	; 0x24
   15210:	ldr	r0, [sp, #160]	; 0xa0
   15214:	cmp	r0, #2
   15218:	movne	r3, #0
   1521c:	andeq	r3, r3, #1
   15220:	cmp	r3, #0
   15224:	beq	150e0 <close_stdout@@Base+0x1600>
   15228:	ldr	r2, [sp, #164]	; 0xa4
   1522c:	mov	ip, #0
   15230:	ldr	r0, [sp, #160]	; 0xa0
   15234:	bic	r3, r2, #2
   15238:	ldr	r1, [sp, #72]	; 0x48
   1523c:	ldr	r2, [sp, #68]	; 0x44
   15240:	stm	sp, {r0, r3}
   15244:	mov	r3, r8
   15248:	str	r1, [sp, #12]
   1524c:	mov	r1, sl
   15250:	str	r2, [sp, #16]
   15254:	ldr	r0, [sp, #40]	; 0x28
   15258:	ldr	r2, [sp, #32]
   1525c:	str	ip, [sp, #8]
   15260:	bl	14cf8 <close_stdout@@Base+0x1218>
   15264:	ldr	r1, [sp, #56]	; 0x38
   15268:	ldr	r2, [sp, #116]	; 0x74
   1526c:	ldr	r3, [r1]
   15270:	cmp	r2, r3
   15274:	bne	159a8 <close_stdout@@Base+0x1ec8>
   15278:	add	sp, sp, #124	; 0x7c
   1527c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15280:	mov	r3, #114	; 0x72
   15284:	ldr	r2, [sp, #36]	; 0x24
   15288:	ldr	r0, [sp, #160]	; 0xa0
   1528c:	cmp	r0, #2
   15290:	movne	r2, #0
   15294:	andeq	r2, r2, #1
   15298:	cmp	r2, #0
   1529c:	bne	15228 <close_stdout@@Base+0x1748>
   152a0:	ldr	r1, [sp, #24]
   152a4:	cmp	r1, #0
   152a8:	beq	150e0 <close_stdout@@Base+0x1600>
   152ac:	mov	r4, r3
   152b0:	b	15118 <close_stdout@@Base+0x1638>
   152b4:	mov	r3, #98	; 0x62
   152b8:	b	152a0 <close_stdout@@Base+0x17c0>
   152bc:	mov	r3, #102	; 0x66
   152c0:	b	152a0 <close_stdout@@Base+0x17c0>
   152c4:	mov	r3, #118	; 0x76
   152c8:	b	152a0 <close_stdout@@Base+0x17c0>
   152cc:	mov	r3, #97	; 0x61
   152d0:	b	152a0 <close_stdout@@Base+0x17c0>
   152d4:	mov	r3, #110	; 0x6e
   152d8:	b	15284 <close_stdout@@Base+0x17a4>
   152dc:	mov	r3, #116	; 0x74
   152e0:	b	15284 <close_stdout@@Base+0x17a4>
   152e4:	ldr	r2, [sp, #24]
   152e8:	cmp	r2, #0
   152ec:	beq	15894 <close_stdout@@Base+0x1db4>
   152f0:	ldr	r3, [sp, #36]	; 0x24
   152f4:	cmp	r3, #0
   152f8:	bne	15228 <close_stdout@@Base+0x1748>
   152fc:	cmp	r9, sl
   15300:	add	r2, r9, #1
   15304:	ldrcc	r0, [sp, #40]	; 0x28
   15308:	movcc	r3, #92	; 0x5c
   1530c:	strbcc	r3, [r0, r9]
   15310:	add	r3, fp, #1
   15314:	cmp	r8, r3
   15318:	bls	15358 <close_stdout@@Base+0x1878>
   1531c:	ldr	r1, [sp, #32]
   15320:	ldrb	r3, [r1, r3]
   15324:	sub	r3, r3, #48	; 0x30
   15328:	cmp	r3, #9
   1532c:	bhi	15358 <close_stdout@@Base+0x1878>
   15330:	cmp	sl, r2
   15334:	ldrhi	r0, [sp, #40]	; 0x28
   15338:	movhi	r3, #48	; 0x30
   1533c:	strbhi	r3, [r0, r2]
   15340:	add	r3, r9, #2
   15344:	cmp	sl, r3
   15348:	ldrhi	r1, [sp, #40]	; 0x28
   1534c:	movhi	r2, #48	; 0x30
   15350:	strbhi	r2, [r1, r3]
   15354:	add	r2, r9, #3
   15358:	mov	r9, r2
   1535c:	mov	r4, #48	; 0x30
   15360:	b	150ec <close_stdout@@Base+0x160c>
   15364:	ldr	r1, [sp, #76]	; 0x4c
   15368:	cmp	r1, #0
   1536c:	beq	15378 <close_stdout@@Base+0x1898>
   15370:	cmp	r7, #0
   15374:	bne	15138 <close_stdout@@Base+0x1658>
   15378:	mov	r3, r4
   1537c:	b	15284 <close_stdout@@Base+0x17a4>
   15380:	ldr	r1, [sp, #160]	; 0xa0
   15384:	cmp	r1, #2
   15388:	bne	150e0 <close_stdout@@Base+0x1600>
   1538c:	ldr	r2, [sp, #36]	; 0x24
   15390:	cmp	r2, #0
   15394:	bne	15228 <close_stdout@@Base+0x1748>
   15398:	cmp	r9, sl
   1539c:	ldrcc	r0, [sp, #40]	; 0x28
   153a0:	movcc	r3, #39	; 0x27
   153a4:	strbcc	r3, [r0, r9]
   153a8:	add	r3, r9, #1
   153ac:	cmp	sl, r3
   153b0:	ldrhi	r1, [sp, #40]	; 0x28
   153b4:	movhi	r2, #92	; 0x5c
   153b8:	strbhi	r2, [r1, r3]
   153bc:	add	r3, r9, #2
   153c0:	cmp	sl, r3
   153c4:	add	r9, r9, #3
   153c8:	ldrhi	r0, [sp, #40]	; 0x28
   153cc:	movhi	r2, #39	; 0x27
   153d0:	strbhi	r2, [r0, r3]
   153d4:	b	150e0 <close_stdout@@Base+0x1600>
   153d8:	ldr	r1, [sp, #64]	; 0x40
   153dc:	cmp	r1, #1
   153e0:	bne	156d8 <close_stdout@@Base+0x1bf8>
   153e4:	bl	115b8 <__ctype_b_loc@plt>
   153e8:	ldr	r2, [sp, #64]	; 0x40
   153ec:	sxth	r3, r4
   153f0:	str	r2, [sp, #60]	; 0x3c
   153f4:	lsl	r3, r3, #1
   153f8:	ldr	r2, [r0]
   153fc:	ldrh	r2, [r2, r3]
   15400:	eor	r2, r2, #16384	; 0x4000
   15404:	ubfx	r2, r2, #14, #1
   15408:	ldr	r1, [sp, #24]
   1540c:	ands	r2, r2, r1
   15410:	beq	150e0 <close_stdout@@Base+0x1600>
   15414:	ldr	r3, [sp, #60]	; 0x3c
   15418:	mov	r0, #92	; 0x5c
   1541c:	ldr	r7, [sp, #36]	; 0x24
   15420:	add	r1, r3, fp
   15424:	str	r8, [sp, #60]	; 0x3c
   15428:	ldr	r3, [sp, #40]	; 0x28
   1542c:	b	15490 <close_stdout@@Base+0x19b0>
   15430:	cmp	r7, #0
   15434:	bne	158d0 <close_stdout@@Base+0x1df0>
   15438:	add	ip, r9, #1
   1543c:	cmp	r9, sl
   15440:	strbcc	r0, [r3, r9]
   15444:	cmp	sl, ip
   15448:	lsrhi	r8, r4, #6
   1544c:	addhi	r8, r8, #48	; 0x30
   15450:	strbhi	r8, [r3, ip]
   15454:	add	ip, r9, #2
   15458:	add	r9, r9, #3
   1545c:	cmp	sl, ip
   15460:	ubfxhi	r8, r4, #3, #3
   15464:	and	r4, r4, #7
   15468:	add	r4, r4, #48	; 0x30
   1546c:	addhi	r8, r8, #48	; 0x30
   15470:	strbhi	r8, [r3, ip]
   15474:	add	fp, fp, #1
   15478:	cmp	r1, fp
   1547c:	bls	154bc <close_stdout@@Base+0x19dc>
   15480:	cmp	r9, sl
   15484:	strbcc	r4, [r3, r9]
   15488:	ldrb	r4, [r5, #1]!
   1548c:	add	r9, r9, #1
   15490:	cmp	r2, #0
   15494:	bne	15430 <close_stdout@@Base+0x1950>
   15498:	cmp	r6, #0
   1549c:	beq	15474 <close_stdout@@Base+0x1994>
   154a0:	add	fp, fp, #1
   154a4:	cmp	r9, sl
   154a8:	strbcc	r0, [r3, r9]
   154ac:	cmp	r1, fp
   154b0:	add	r9, r9, #1
   154b4:	mov	r6, #0
   154b8:	bhi	15480 <close_stdout@@Base+0x19a0>
   154bc:	ldr	r8, [sp, #60]	; 0x3c
   154c0:	b	1513c <close_stdout@@Base+0x165c>
   154c4:	ldr	r3, [sp, #36]	; 0x24
   154c8:	cmp	r3, #0
   154cc:	bne	159d0 <close_stdout@@Base+0x1ef0>
   154d0:	cmp	sl, #0
   154d4:	beq	158e8 <close_stdout@@Base+0x1e08>
   154d8:	ldr	r1, [sp, #40]	; 0x28
   154dc:	mov	r0, #1
   154e0:	ldr	r2, [pc, #1296]	; 159f8 <close_stdout@@Base+0x1f18>
   154e4:	mov	r3, #34	; 0x22
   154e8:	str	r0, [sp, #24]
   154ec:	mov	r9, r0
   154f0:	add	r2, pc, r2
   154f4:	str	r0, [sp, #28]
   154f8:	strb	r3, [r1]
   154fc:	str	r2, [sp, #52]	; 0x34
   15500:	b	14dac <close_stdout@@Base+0x12cc>
   15504:	ldr	r3, [pc, #1264]	; 159fc <close_stdout@@Base+0x1f1c>
   15508:	mov	r2, #1
   1550c:	mov	r0, #3
   15510:	str	r2, [sp, #36]	; 0x24
   15514:	add	r3, pc, r3
   15518:	str	r2, [sp, #24]
   1551c:	str	r3, [sp, #52]	; 0x34
   15520:	mov	r9, #0
   15524:	str	r2, [sp, #28]
   15528:	str	r0, [sp, #160]	; 0xa0
   1552c:	b	14dac <close_stdout@@Base+0x12cc>
   15530:	mov	r0, #0
   15534:	mov	r1, #1
   15538:	str	r0, [sp, #36]	; 0x24
   1553c:	mov	r9, r0
   15540:	str	r1, [sp, #24]
   15544:	str	r0, [sp, #28]
   15548:	str	r0, [sp, #52]	; 0x34
   1554c:	b	14dac <close_stdout@@Base+0x12cc>
   15550:	ldr	r3, [sp, #160]	; 0xa0
   15554:	cmp	r3, #8
   15558:	beq	15584 <close_stdout@@Base+0x1aa4>
   1555c:	ldr	r0, [pc, #1180]	; 15a00 <close_stdout@@Base+0x1f20>
   15560:	mov	r1, r3
   15564:	add	r0, pc, r0
   15568:	bl	14b94 <close_stdout@@Base+0x10b4>
   1556c:	ldr	r1, [sp, #160]	; 0xa0
   15570:	str	r0, [sp, #72]	; 0x48
   15574:	ldr	r0, [pc, #1160]	; 15a04 <close_stdout@@Base+0x1f24>
   15578:	add	r0, pc, r0
   1557c:	bl	14b94 <close_stdout@@Base+0x10b4>
   15580:	str	r0, [sp, #68]	; 0x44
   15584:	ldr	r0, [sp, #36]	; 0x24
   15588:	cmp	r0, #0
   1558c:	movne	r9, #0
   15590:	bne	155c8 <close_stdout@@Base+0x1ae8>
   15594:	ldr	r1, [sp, #72]	; 0x48
   15598:	ldrb	r3, [r1]
   1559c:	cmp	r3, #0
   155a0:	beq	159a0 <close_stdout@@Base+0x1ec0>
   155a4:	mov	r2, r1
   155a8:	ldr	r1, [sp, #40]	; 0x28
   155ac:	mov	r9, r0
   155b0:	cmp	r9, sl
   155b4:	strbcc	r3, [r1, r9]
   155b8:	ldrb	r3, [r2, #1]!
   155bc:	add	r9, r9, #1
   155c0:	cmp	r3, #0
   155c4:	bne	155b0 <close_stdout@@Base+0x1ad0>
   155c8:	ldr	r0, [sp, #68]	; 0x44
   155cc:	str	r0, [sp, #52]	; 0x34
   155d0:	bl	115dc <strlen@plt>
   155d4:	mov	r2, #1
   155d8:	str	r2, [sp, #24]
   155dc:	str	r0, [sp, #28]
   155e0:	b	14dac <close_stdout@@Base+0x12cc>
   155e4:	ldr	r3, [pc, #1052]	; 15a08 <close_stdout@@Base+0x1f28>
   155e8:	mov	r2, #0
   155ec:	mov	r1, #1
   155f0:	mov	r0, #2
   155f4:	add	r3, pc, r3
   155f8:	str	r1, [sp, #36]	; 0x24
   155fc:	str	r2, [sp, #24]
   15600:	mov	r9, r2
   15604:	str	r1, [sp, #28]
   15608:	str	r3, [sp, #52]	; 0x34
   1560c:	str	r0, [sp, #160]	; 0xa0
   15610:	b	14dac <close_stdout@@Base+0x12cc>
   15614:	ldr	r3, [sp, #36]	; 0x24
   15618:	cmp	r3, #0
   1561c:	bne	159ac <close_stdout@@Base+0x1ecc>
   15620:	cmp	sl, #0
   15624:	beq	15908 <close_stdout@@Base+0x1e28>
   15628:	ldr	r1, [sp, #40]	; 0x28
   1562c:	mov	r3, #39	; 0x27
   15630:	ldr	r2, [sp, #36]	; 0x24
   15634:	mov	r0, #1
   15638:	mov	r9, r0
   1563c:	str	r0, [sp, #28]
   15640:	strb	r3, [r1]
   15644:	ldr	r3, [pc, #960]	; 15a0c <close_stdout@@Base+0x1f2c>
   15648:	str	r2, [sp, #24]
   1564c:	add	r3, pc, r3
   15650:	str	r3, [sp, #52]	; 0x34
   15654:	b	14dac <close_stdout@@Base+0x12cc>
   15658:	ldr	r2, [sp, #28]
   1565c:	cmp	r2, #1
   15660:	add	r4, fp, r2
   15664:	movls	r3, #0
   15668:	movhi	r3, #1
   1566c:	cmn	r8, #1
   15670:	movne	r3, #0
   15674:	cmp	r3, #0
   15678:	beq	15688 <close_stdout@@Base+0x1ba8>
   1567c:	ldr	r0, [sp, #32]
   15680:	bl	115dc <strlen@plt>
   15684:	mov	r8, r0
   15688:	cmp	r8, r4
   1568c:	ldrcc	r3, [sp, #32]
   15690:	movcc	r6, #0
   15694:	addcc	r5, r3, fp
   15698:	bcc	14e08 <close_stdout@@Base+0x1328>
   1569c:	ldr	r0, [sp, #32]
   156a0:	ldr	r1, [sp, #52]	; 0x34
   156a4:	add	r5, r0, fp
   156a8:	ldr	r2, [sp, #28]
   156ac:	mov	r0, r5
   156b0:	bl	11480 <memcmp@plt>
   156b4:	cmp	r0, #0
   156b8:	bne	156d0 <close_stdout@@Base+0x1bf0>
   156bc:	ldr	r1, [sp, #36]	; 0x24
   156c0:	cmp	r1, #0
   156c4:	bne	15228 <close_stdout@@Base+0x1748>
   156c8:	mov	r6, #1
   156cc:	b	14e08 <close_stdout@@Base+0x1328>
   156d0:	mov	r6, #0
   156d4:	b	14e08 <close_stdout@@Base+0x1328>
   156d8:	add	r7, sp, #108	; 0x6c
   156dc:	cmn	r8, #1
   156e0:	mov	r3, #0
   156e4:	str	r3, [sp, #108]	; 0x6c
   156e8:	str	r3, [r7, #4]
   156ec:	beq	158d8 <close_stdout@@Base+0x1df8>
   156f0:	mov	r1, #0
   156f4:	ldr	r0, [sp, #32]
   156f8:	mov	ip, #1
   156fc:	str	r9, [sp, #88]	; 0x58
   15700:	str	r6, [sp, #96]	; 0x60
   15704:	mov	r9, r1
   15708:	str	r5, [sp, #100]	; 0x64
   1570c:	mov	r6, ip
   15710:	mov	r5, r7
   15714:	add	r3, sp, #104	; 0x68
   15718:	sub	r0, r0, #1
   1571c:	str	r3, [sp, #80]	; 0x50
   15720:	str	r0, [sp, #84]	; 0x54
   15724:	str	r1, [sp, #60]	; 0x3c
   15728:	str	r4, [sp, #92]	; 0x5c
   1572c:	ldr	r2, [sp, #32]
   15730:	add	r7, r9, fp
   15734:	add	r0, sp, #104	; 0x68
   15738:	mov	r3, r5
   1573c:	add	r4, r2, r7
   15740:	rsb	r2, r7, r8
   15744:	mov	r1, r4
   15748:	bl	11540 <mbrtowc@plt>
   1574c:	subs	r2, r0, #0
   15750:	beq	1585c <close_stdout@@Base+0x1d7c>
   15754:	cmn	r2, #1
   15758:	beq	15984 <close_stdout@@Base+0x1ea4>
   1575c:	cmn	r2, #2
   15760:	beq	15928 <close_stdout@@Base+0x1e48>
   15764:	ldr	r3, [sp, #36]	; 0x24
   15768:	ldr	r0, [sp, #160]	; 0xa0
   1576c:	cmp	r0, #2
   15770:	movne	r3, #0
   15774:	andeq	r3, r3, #1
   15778:	cmp	r3, #0
   1577c:	beq	15838 <close_stdout@@Base+0x1d58>
   15780:	cmp	r2, #1
   15784:	beq	15838 <close_stdout@@Base+0x1d58>
   15788:	ldr	r1, [sp, #84]	; 0x54
   1578c:	add	r3, r1, r2
   15790:	add	r7, r3, r7
   15794:	ldrb	r3, [r4, #1]!
   15798:	sub	r3, r3, #91	; 0x5b
   1579c:	cmp	r3, #33	; 0x21
   157a0:	addls	pc, pc, r3, lsl #2
   157a4:	b	15830 <close_stdout@@Base+0x1d50>
   157a8:	b	15228 <close_stdout@@Base+0x1748>
   157ac:	b	15228 <close_stdout@@Base+0x1748>
   157b0:	b	15830 <close_stdout@@Base+0x1d50>
   157b4:	b	15228 <close_stdout@@Base+0x1748>
   157b8:	b	15830 <close_stdout@@Base+0x1d50>
   157bc:	b	15228 <close_stdout@@Base+0x1748>
   157c0:	b	15830 <close_stdout@@Base+0x1d50>
   157c4:	b	15830 <close_stdout@@Base+0x1d50>
   157c8:	b	15830 <close_stdout@@Base+0x1d50>
   157cc:	b	15830 <close_stdout@@Base+0x1d50>
   157d0:	b	15830 <close_stdout@@Base+0x1d50>
   157d4:	b	15830 <close_stdout@@Base+0x1d50>
   157d8:	b	15830 <close_stdout@@Base+0x1d50>
   157dc:	b	15830 <close_stdout@@Base+0x1d50>
   157e0:	b	15830 <close_stdout@@Base+0x1d50>
   157e4:	b	15830 <close_stdout@@Base+0x1d50>
   157e8:	b	15830 <close_stdout@@Base+0x1d50>
   157ec:	b	15830 <close_stdout@@Base+0x1d50>
   157f0:	b	15830 <close_stdout@@Base+0x1d50>
   157f4:	b	15830 <close_stdout@@Base+0x1d50>
   157f8:	b	15830 <close_stdout@@Base+0x1d50>
   157fc:	b	15830 <close_stdout@@Base+0x1d50>
   15800:	b	15830 <close_stdout@@Base+0x1d50>
   15804:	b	15830 <close_stdout@@Base+0x1d50>
   15808:	b	15830 <close_stdout@@Base+0x1d50>
   1580c:	b	15830 <close_stdout@@Base+0x1d50>
   15810:	b	15830 <close_stdout@@Base+0x1d50>
   15814:	b	15830 <close_stdout@@Base+0x1d50>
   15818:	b	15830 <close_stdout@@Base+0x1d50>
   1581c:	b	15830 <close_stdout@@Base+0x1d50>
   15820:	b	15830 <close_stdout@@Base+0x1d50>
   15824:	b	15830 <close_stdout@@Base+0x1d50>
   15828:	b	15830 <close_stdout@@Base+0x1d50>
   1582c:	b	15228 <close_stdout@@Base+0x1748>
   15830:	cmp	r4, r7
   15834:	bne	15794 <close_stdout@@Base+0x1cb4>
   15838:	ldr	r0, [sp, #104]	; 0x68
   1583c:	add	r9, r9, r2
   15840:	bl	114c8 <iswprint@plt>
   15844:	cmp	r0, #0
   15848:	mov	r0, r5
   1584c:	moveq	r6, #0
   15850:	bl	1145c <mbsinit@plt>
   15854:	cmp	r0, #0
   15858:	beq	1572c <close_stdout@@Base+0x1c4c>
   1585c:	mov	ip, r6
   15860:	eor	r2, ip, #1
   15864:	str	r9, [sp, #60]	; 0x3c
   15868:	ldr	r4, [sp, #92]	; 0x5c
   1586c:	uxtb	r2, r2
   15870:	ldr	r9, [sp, #88]	; 0x58
   15874:	ldr	r6, [sp, #96]	; 0x60
   15878:	ldr	r5, [sp, #100]	; 0x64
   1587c:	ldr	r3, [sp, #60]	; 0x3c
   15880:	cmp	r3, #1
   15884:	bls	15408 <close_stdout@@Base+0x1928>
   15888:	ldr	r0, [sp, #24]
   1588c:	and	r2, r2, r0
   15890:	b	15414 <close_stdout@@Base+0x1934>
   15894:	ldr	r2, [sp, #164]	; 0xa4
   15898:	tst	r2, #1
   1589c:	addne	fp, fp, #1
   158a0:	bne	14dd0 <close_stdout@@Base+0x12f0>
   158a4:	b	150e0 <close_stdout@@Base+0x1600>
   158a8:	ldr	r0, [sp, #36]	; 0x24
   158ac:	cmp	r0, #0
   158b0:	beq	150e0 <close_stdout@@Base+0x1600>
   158b4:	b	15228 <close_stdout@@Base+0x1748>
   158b8:	ldr	r2, [sp, #32]
   158bc:	ldrb	r3, [r2, #1]
   158c0:	adds	r3, r3, #0
   158c4:	movne	r3, #1
   158c8:	b	151fc <close_stdout@@Base+0x171c>
   158cc:	bl	11768 <abort@plt>
   158d0:	ldr	r8, [sp, #60]	; 0x3c
   158d4:	b	15228 <close_stdout@@Base+0x1748>
   158d8:	ldr	r0, [sp, #32]
   158dc:	bl	115dc <strlen@plt>
   158e0:	mov	r8, r0
   158e4:	b	156f0 <close_stdout@@Base+0x1c10>
   158e8:	ldr	r2, [pc, #288]	; 15a10 <close_stdout@@Base+0x1f30>
   158ec:	mov	r1, #1
   158f0:	mov	r9, r1
   158f4:	str	r1, [sp, #24]
   158f8:	add	r2, pc, r2
   158fc:	str	r1, [sp, #28]
   15900:	str	r2, [sp, #52]	; 0x34
   15904:	b	14dac <close_stdout@@Base+0x12cc>
   15908:	ldr	r2, [pc, #260]	; 15a14 <close_stdout@@Base+0x1f34>
   1590c:	mov	r3, #1
   15910:	mov	r9, r3
   15914:	str	r3, [sp, #28]
   15918:	add	r2, pc, r2
   1591c:	str	sl, [sp, #24]
   15920:	str	r2, [sp, #52]	; 0x34
   15924:	b	14dac <close_stdout@@Base+0x12cc>
   15928:	cmp	r8, r7
   1592c:	str	r9, [sp, #60]	; 0x3c
   15930:	mov	ip, r4
   15934:	ldr	r6, [sp, #96]	; 0x60
   15938:	ldr	r9, [sp, #88]	; 0x58
   1593c:	ldr	r4, [sp, #92]	; 0x5c
   15940:	ldr	r5, [sp, #100]	; 0x64
   15944:	bls	1597c <close_stdout@@Base+0x1e9c>
   15948:	ldrb	r3, [ip]
   1594c:	cmp	r3, #0
   15950:	beq	1597c <close_stdout@@Base+0x1e9c>
   15954:	ldr	r3, [sp, #60]	; 0x3c
   15958:	b	15968 <close_stdout@@Base+0x1e88>
   1595c:	ldrb	r2, [r5, r3]
   15960:	cmp	r2, #0
   15964:	beq	15978 <close_stdout@@Base+0x1e98>
   15968:	add	r3, r3, #1
   1596c:	add	r2, fp, r3
   15970:	cmp	r8, r2
   15974:	bhi	1595c <close_stdout@@Base+0x1e7c>
   15978:	str	r3, [sp, #60]	; 0x3c
   1597c:	mov	r2, #1
   15980:	b	1587c <close_stdout@@Base+0x1d9c>
   15984:	str	r9, [sp, #60]	; 0x3c
   15988:	mov	r2, #1
   1598c:	ldr	r4, [sp, #92]	; 0x5c
   15990:	ldr	r6, [sp, #96]	; 0x60
   15994:	ldr	r9, [sp, #88]	; 0x58
   15998:	ldr	r5, [sp, #100]	; 0x64
   1599c:	b	1587c <close_stdout@@Base+0x1d9c>
   159a0:	ldr	r9, [sp, #36]	; 0x24
   159a4:	b	155c8 <close_stdout@@Base+0x1ae8>
   159a8:	bl	11498 <__stack_chk_fail@plt>
   159ac:	ldr	r1, [pc, #100]	; 15a18 <close_stdout@@Base+0x1f38>
   159b0:	mov	r3, #0
   159b4:	mov	r0, #1
   159b8:	str	r3, [sp, #24]
   159bc:	add	r1, pc, r1
   159c0:	str	r0, [sp, #28]
   159c4:	mov	r9, r3
   159c8:	str	r1, [sp, #52]	; 0x34
   159cc:	b	14dac <close_stdout@@Base+0x12cc>
   159d0:	ldr	r0, [pc, #68]	; 15a1c <close_stdout@@Base+0x1f3c>
   159d4:	mov	r3, #1
   159d8:	mov	r9, #0
   159dc:	str	r3, [sp, #24]
   159e0:	add	r0, pc, r0
   159e4:	str	r3, [sp, #28]
   159e8:	str	r0, [sp, #52]	; 0x34
   159ec:	b	14dac <close_stdout@@Base+0x12cc>
   159f0:	andeq	r7, r1, r4, ror #5
   159f4:	andeq	r0, r0, ip, asr r1
   159f8:	andeq	r5, r0, r8, lsl #8
   159fc:	andeq	r5, r0, r4, ror #7
   15a00:	andeq	r5, r0, r0, lsr #7
   15a04:	andeq	r5, r0, ip, ror r3
   15a08:	andeq	r5, r0, r0, lsl #6
   15a0c:	andeq	r5, r0, r8, lsr #5
   15a10:	andeq	r5, r0, r0
   15a14:	ldrdeq	r4, [r0], -ip
   15a18:	andeq	r4, r0, r8, lsr pc
   15a1c:	andeq	r4, r0, r8, lsl pc
   15a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a24:	sub	sp, sp, #44	; 0x2c
   15a28:	mov	r6, r0
   15a2c:	mov	r9, r1
   15a30:	mov	sl, r2
   15a34:	mov	r4, r3
   15a38:	bl	11618 <__errno_location@plt>
   15a3c:	ldr	fp, [pc, #412]	; 15be0 <close_stdout@@Base+0x2100>
   15a40:	cmp	r6, #0
   15a44:	add	fp, pc, fp
   15a48:	ldr	r5, [fp]
   15a4c:	ldr	r1, [r0]
   15a50:	mov	r8, r0
   15a54:	str	r1, [sp, #36]	; 0x24
   15a58:	blt	15bd8 <close_stdout@@Base+0x20f8>
   15a5c:	ldr	r3, [pc, #384]	; 15be4 <close_stdout@@Base+0x2104>
   15a60:	add	r3, pc, r3
   15a64:	ldr	r3, [r3]
   15a68:	cmp	r6, r3
   15a6c:	bcc	15ac0 <close_stdout@@Base+0x1fe0>
   15a70:	add	r7, r6, #1
   15a74:	cmn	r7, #-536870911	; 0xe0000001
   15a78:	bhi	15bdc <close_stdout@@Base+0x20fc>
   15a7c:	add	r3, fp, #4
   15a80:	cmp	r5, r3
   15a84:	beq	15bb0 <close_stdout@@Base+0x20d0>
   15a88:	mov	r0, r5
   15a8c:	lsl	r1, r7, #3
   15a90:	bl	17478 <close_stdout@@Base+0x3998>
   15a94:	mov	r5, r0
   15a98:	str	r0, [fp]
   15a9c:	ldr	fp, [pc, #324]	; 15be8 <close_stdout@@Base+0x2108>
   15aa0:	mov	r1, #0
   15aa4:	add	fp, pc, fp
   15aa8:	ldr	r0, [fp]
   15aac:	rsb	r2, r0, r7
   15ab0:	add	r0, r5, r0, lsl #3
   15ab4:	lsl	r2, r2, #3
   15ab8:	bl	11654 <memset@plt>
   15abc:	str	r7, [fp]
   15ac0:	add	r2, r4, #8
   15ac4:	str	r2, [sp, #32]
   15ac8:	ldr	r1, [r4]
   15acc:	add	fp, r5, r6, lsl #3
   15ad0:	ldr	lr, [sp, #32]
   15ad4:	mov	r2, r9
   15ad8:	ldr	r3, [r4, #4]
   15adc:	ldr	ip, [r5, r6, lsl #3]
   15ae0:	ldr	r7, [fp, #4]
   15ae4:	orr	r3, r3, #1
   15ae8:	str	r1, [sp]
   15aec:	str	r3, [sp, #4]
   15af0:	mov	r1, ip
   15af4:	str	lr, [sp, #8]
   15af8:	mov	r0, r7
   15afc:	ldr	lr, [r4, #40]	; 0x28
   15b00:	str	r3, [sp, #28]
   15b04:	mov	r3, sl
   15b08:	str	lr, [sp, #12]
   15b0c:	ldr	lr, [r4, #44]	; 0x2c
   15b10:	str	ip, [sp, #24]
   15b14:	str	lr, [sp, #16]
   15b18:	bl	14cf8 <close_stdout@@Base+0x1218>
   15b1c:	ldr	ip, [sp, #24]
   15b20:	cmp	ip, r0
   15b24:	bhi	15b9c <close_stdout@@Base+0x20bc>
   15b28:	ldr	r3, [pc, #188]	; 15bec <close_stdout@@Base+0x210c>
   15b2c:	add	r1, r0, #1
   15b30:	str	r1, [r5, r6, lsl #3]
   15b34:	add	r3, pc, r3
   15b38:	cmp	r7, r3
   15b3c:	beq	15b50 <close_stdout@@Base+0x2070>
   15b40:	mov	r0, r7
   15b44:	str	r1, [sp, #24]
   15b48:	bl	1142c <free@plt>
   15b4c:	ldr	r1, [sp, #24]
   15b50:	mov	r0, r1
   15b54:	str	r1, [sp, #24]
   15b58:	bl	17420 <close_stdout@@Base+0x3940>
   15b5c:	ldr	r3, [sp, #28]
   15b60:	ldr	lr, [sp, #32]
   15b64:	mov	r2, r9
   15b68:	str	r0, [fp, #4]
   15b6c:	mov	r7, r0
   15b70:	ldr	ip, [r4]
   15b74:	str	r3, [sp, #4]
   15b78:	mov	r3, sl
   15b7c:	str	lr, [sp, #8]
   15b80:	str	ip, [sp]
   15b84:	ldr	ip, [r4, #40]	; 0x28
   15b88:	ldr	r1, [sp, #24]
   15b8c:	str	ip, [sp, #12]
   15b90:	ldr	ip, [r4, #44]	; 0x2c
   15b94:	str	ip, [sp, #16]
   15b98:	bl	14cf8 <close_stdout@@Base+0x1218>
   15b9c:	ldr	r1, [sp, #36]	; 0x24
   15ba0:	mov	r0, r7
   15ba4:	str	r1, [r8]
   15ba8:	add	sp, sp, #44	; 0x2c
   15bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bb0:	lsl	r1, r7, #3
   15bb4:	mov	r0, #0
   15bb8:	str	r3, [sp, #24]
   15bbc:	bl	17478 <close_stdout@@Base+0x3998>
   15bc0:	ldr	r3, [sp, #24]
   15bc4:	mov	r5, r0
   15bc8:	ldm	r3, {r0, r1}
   15bcc:	str	r5, [fp]
   15bd0:	stm	r5, {r0, r1}
   15bd4:	b	15a9c <close_stdout@@Base+0x1fbc>
   15bd8:	bl	11768 <abort@plt>
   15bdc:	bl	17634 <close_stdout@@Base+0x3b54>
   15be0:	muleq	r1, r0, r7
   15be4:	andeq	r6, r1, r0, asr #14
   15be8:	strdeq	r6, [r1], -ip
   15bec:	andeq	r6, r1, r0, asr #13
   15bf0:	push	{r4, r5, r6, lr}
   15bf4:	mov	r5, r0
   15bf8:	bl	11618 <__errno_location@plt>
   15bfc:	cmp	r5, #0
   15c00:	mov	r1, #48	; 0x30
   15c04:	mov	r4, r0
   15c08:	ldr	r0, [pc, #24]	; 15c28 <close_stdout@@Base+0x2148>
   15c0c:	ldr	r6, [r4]
   15c10:	add	r0, pc, r0
   15c14:	add	r0, r0, #256	; 0x100
   15c18:	movne	r0, r5
   15c1c:	bl	175f4 <close_stdout@@Base+0x3b14>
   15c20:	str	r6, [r4]
   15c24:	pop	{r4, r5, r6, pc}
   15c28:	andeq	r6, r1, r4, ror #11
   15c2c:	cmp	r0, #0
   15c30:	beq	15c3c <close_stdout@@Base+0x215c>
   15c34:	ldr	r0, [r0]
   15c38:	bx	lr
   15c3c:	ldr	r0, [pc, #12]	; 15c50 <close_stdout@@Base+0x2170>
   15c40:	add	r0, pc, r0
   15c44:	add	r0, r0, #256	; 0x100
   15c48:	ldr	r0, [r0]
   15c4c:	bx	lr
   15c50:			; <UNDEFINED> instruction: 0x000165b4
   15c54:	cmp	r0, #0
   15c58:	beq	15c64 <close_stdout@@Base+0x2184>
   15c5c:	str	r1, [r0]
   15c60:	bx	lr
   15c64:	ldr	r0, [pc, #12]	; 15c78 <close_stdout@@Base+0x2198>
   15c68:	add	r0, pc, r0
   15c6c:	add	r0, r0, #256	; 0x100
   15c70:	str	r1, [r0]
   15c74:	bx	lr
   15c78:	andeq	r6, r1, ip, lsl #11
   15c7c:	cmp	r0, #0
   15c80:	movne	r3, r0
   15c84:	beq	15cb4 <close_stdout@@Base+0x21d4>
   15c88:	lsr	ip, r1, #5
   15c8c:	and	r1, r1, #31
   15c90:	add	r3, r3, ip, lsl #2
   15c94:	ldr	ip, [r3, #8]
   15c98:	lsr	r0, ip, r1
   15c9c:	eor	r2, r0, r2
   15ca0:	and	r0, r0, #1
   15ca4:	and	r2, r2, #1
   15ca8:	eor	ip, ip, r2, lsl r1
   15cac:	str	ip, [r3, #8]
   15cb0:	bx	lr
   15cb4:	ldr	r3, [pc, #8]	; 15cc4 <close_stdout@@Base+0x21e4>
   15cb8:	add	r3, pc, r3
   15cbc:	add	r3, r3, #256	; 0x100
   15cc0:	b	15c88 <close_stdout@@Base+0x21a8>
   15cc4:	andeq	r6, r1, ip, lsr r5
   15cc8:	subs	r3, r0, #0
   15ccc:	beq	15cdc <close_stdout@@Base+0x21fc>
   15cd0:	ldr	r0, [r3, #4]
   15cd4:	str	r1, [r3, #4]
   15cd8:	bx	lr
   15cdc:	ldr	r3, [pc, #8]	; 15cec <close_stdout@@Base+0x220c>
   15ce0:	add	r3, pc, r3
   15ce4:	add	r3, r3, #256	; 0x100
   15ce8:	b	15cd0 <close_stdout@@Base+0x21f0>
   15cec:	andeq	r6, r1, r4, lsl r5
   15cf0:	cmp	r0, #0
   15cf4:	push	{r3, lr}
   15cf8:	beq	15d1c <close_stdout@@Base+0x223c>
   15cfc:	cmp	r2, #0
   15d00:	cmpne	r1, #0
   15d04:	mov	r3, #8
   15d08:	strne	r1, [r0, #40]	; 0x28
   15d0c:	str	r3, [r0]
   15d10:	strne	r2, [r0, #44]	; 0x2c
   15d14:	popne	{r3, pc}
   15d18:	bl	11768 <abort@plt>
   15d1c:	ldr	r0, [pc, #8]	; 15d2c <close_stdout@@Base+0x224c>
   15d20:	add	r0, pc, r0
   15d24:	add	r0, r0, #256	; 0x100
   15d28:	b	15cfc <close_stdout@@Base+0x221c>
   15d2c:	ldrdeq	r6, [r1], -r4
   15d30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d34:	sub	sp, sp, #24
   15d38:	mov	r7, r0
   15d3c:	mov	sl, r1
   15d40:	ldr	r4, [sp, #56]	; 0x38
   15d44:	mov	r9, r2
   15d48:	mov	r8, r3
   15d4c:	cmp	r4, #0
   15d50:	beq	15da4 <close_stdout@@Base+0x22c4>
   15d54:	bl	11618 <__errno_location@plt>
   15d58:	ldr	r3, [r4]
   15d5c:	add	lr, r4, #8
   15d60:	mov	r1, sl
   15d64:	mov	r2, r9
   15d68:	ldr	r6, [r0]
   15d6c:	mov	r5, r0
   15d70:	str	r3, [sp]
   15d74:	mov	r0, r7
   15d78:	ldr	ip, [r4, #4]
   15d7c:	mov	r3, r8
   15d80:	stmib	sp, {ip, lr}
   15d84:	ldr	ip, [r4, #40]	; 0x28
   15d88:	str	ip, [sp, #12]
   15d8c:	ldr	ip, [r4, #44]	; 0x2c
   15d90:	str	ip, [sp, #16]
   15d94:	bl	14cf8 <close_stdout@@Base+0x1218>
   15d98:	str	r6, [r5]
   15d9c:	add	sp, sp, #24
   15da0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15da4:	ldr	r4, [pc, #8]	; 15db4 <close_stdout@@Base+0x22d4>
   15da8:	add	r4, pc, r4
   15dac:	add	r4, r4, #256	; 0x100
   15db0:	b	15d54 <close_stdout@@Base+0x2274>
   15db4:	andeq	r6, r1, ip, asr #8
   15db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dbc:	subs	r4, r3, #0
   15dc0:	sub	sp, sp, #36	; 0x24
   15dc4:	mov	r7, r0
   15dc8:	mov	r6, r1
   15dcc:	mov	r5, r2
   15dd0:	beq	15e8c <close_stdout@@Base+0x23ac>
   15dd4:	bl	11618 <__errno_location@plt>
   15dd8:	ldr	r3, [r4]
   15ddc:	ldr	sl, [r4, #4]
   15de0:	add	r9, r4, #8
   15de4:	mov	r8, r0
   15de8:	mov	r0, #0
   15dec:	ldr	r2, [r8]
   15df0:	cmp	r5, r0
   15df4:	orreq	sl, sl, #1
   15df8:	str	r9, [sp, #8]
   15dfc:	mov	r1, r0
   15e00:	stm	sp, {r3, sl}
   15e04:	mov	r3, r6
   15e08:	ldr	ip, [r4, #40]	; 0x28
   15e0c:	str	r2, [sp, #28]
   15e10:	mov	r2, r7
   15e14:	str	ip, [sp, #12]
   15e18:	ldr	ip, [r4, #44]	; 0x2c
   15e1c:	str	ip, [sp, #16]
   15e20:	bl	14cf8 <close_stdout@@Base+0x1218>
   15e24:	add	r1, r0, #1
   15e28:	mov	fp, r0
   15e2c:	str	r1, [sp, #24]
   15e30:	mov	r0, r1
   15e34:	bl	17420 <close_stdout@@Base+0x3940>
   15e38:	ldr	lr, [r4]
   15e3c:	str	sl, [sp, #4]
   15e40:	mov	r3, r6
   15e44:	str	r9, [sp, #8]
   15e48:	mov	r2, r7
   15e4c:	str	lr, [sp]
   15e50:	ldr	lr, [r4, #40]	; 0x28
   15e54:	ldr	r1, [sp, #24]
   15e58:	str	lr, [sp, #12]
   15e5c:	ldr	lr, [r4, #44]	; 0x2c
   15e60:	str	lr, [sp, #16]
   15e64:	str	r0, [sp, #24]
   15e68:	bl	14cf8 <close_stdout@@Base+0x1218>
   15e6c:	ldr	r3, [sp, #28]
   15e70:	cmp	r5, #0
   15e74:	str	r3, [r8]
   15e78:	ldr	ip, [sp, #24]
   15e7c:	strne	fp, [r5]
   15e80:	mov	r0, ip
   15e84:	add	sp, sp, #36	; 0x24
   15e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e8c:	ldr	r4, [pc, #8]	; 15e9c <close_stdout@@Base+0x23bc>
   15e90:	add	r4, pc, r4
   15e94:	add	r4, r4, #256	; 0x100
   15e98:	b	15dd4 <close_stdout@@Base+0x22f4>
   15e9c:	andeq	r6, r1, r4, ror #6
   15ea0:	mov	r3, r2
   15ea4:	mov	r2, #0
   15ea8:	b	15db8 <close_stdout@@Base+0x22d8>
   15eac:	ldr	r2, [pc, #152]	; 15f4c <close_stdout@@Base+0x246c>
   15eb0:	push	{r3, r4, r5, r6, r7, lr}
   15eb4:	add	r2, pc, r2
   15eb8:	ldr	r3, [pc, #144]	; 15f50 <close_stdout@@Base+0x2470>
   15ebc:	ldr	r6, [r2]
   15ec0:	add	r3, pc, r3
   15ec4:	cmp	r6, #1
   15ec8:	ldr	r7, [r3]
   15ecc:	movhi	r4, #1
   15ed0:	movhi	r5, r7
   15ed4:	bls	15ef0 <close_stdout@@Base+0x2410>
   15ed8:	ldr	r0, [r5, #12]
   15edc:	add	r4, r4, #1
   15ee0:	bl	1142c <free@plt>
   15ee4:	cmp	r4, r6
   15ee8:	add	r5, r5, #8
   15eec:	bne	15ed8 <close_stdout@@Base+0x23f8>
   15ef0:	ldr	r4, [pc, #92]	; 15f54 <close_stdout@@Base+0x2474>
   15ef4:	ldr	r0, [r7, #4]
   15ef8:	add	r4, pc, r4
   15efc:	cmp	r0, r4
   15f00:	beq	15f18 <close_stdout@@Base+0x2438>
   15f04:	bl	1142c <free@plt>
   15f08:	ldr	r3, [pc, #72]	; 15f58 <close_stdout@@Base+0x2478>
   15f0c:	mov	r2, #256	; 0x100
   15f10:	add	r3, pc, r3
   15f14:	stmib	r3, {r2, r4}
   15f18:	ldr	r4, [pc, #60]	; 15f5c <close_stdout@@Base+0x247c>
   15f1c:	add	r4, pc, r4
   15f20:	add	r5, r4, #4
   15f24:	cmp	r7, r5
   15f28:	beq	15f38 <close_stdout@@Base+0x2458>
   15f2c:	mov	r0, r7
   15f30:	bl	1142c <free@plt>
   15f34:	str	r5, [r4]
   15f38:	ldr	r3, [pc, #32]	; 15f60 <close_stdout@@Base+0x2480>
   15f3c:	mov	r2, #1
   15f40:	add	r3, pc, r3
   15f44:	str	r2, [r3]
   15f48:	pop	{r3, r4, r5, r6, r7, pc}
   15f4c:	andeq	r6, r1, ip, ror #5
   15f50:	andeq	r6, r1, r4, lsl r3
   15f54:	strdeq	r6, [r1], -ip
   15f58:	andeq	r6, r1, r4, asr #5
   15f5c:			; <UNDEFINED> instruction: 0x000162b8
   15f60:	andeq	r6, r1, r0, ror #4
   15f64:	ldr	r3, [pc, #12]	; 15f78 <close_stdout@@Base+0x2498>
   15f68:	mvn	r2, #0
   15f6c:	add	r3, pc, r3
   15f70:	add	r3, r3, #256	; 0x100
   15f74:	b	15a20 <close_stdout@@Base+0x1f40>
   15f78:	andeq	r6, r1, r8, lsl #5
   15f7c:	ldr	r3, [pc, #8]	; 15f8c <close_stdout@@Base+0x24ac>
   15f80:	add	r3, pc, r3
   15f84:	add	r3, r3, #256	; 0x100
   15f88:	b	15a20 <close_stdout@@Base+0x1f40>
   15f8c:	andeq	r6, r1, r4, ror r2
   15f90:	mov	r1, r0
   15f94:	mov	r0, #0
   15f98:	b	15f64 <close_stdout@@Base+0x2484>
   15f9c:	mov	r2, r1
   15fa0:	mov	r1, r0
   15fa4:	mov	r0, #0
   15fa8:	b	15f7c <close_stdout@@Base+0x249c>
   15fac:	ldr	r3, [pc, #92]	; 16010 <close_stdout@@Base+0x2530>
   15fb0:	ldr	ip, [pc, #92]	; 16014 <close_stdout@@Base+0x2534>
   15fb4:	add	r3, pc, r3
   15fb8:	push	{r4, r5, r6, r7, lr}
   15fbc:	sub	sp, sp, #60	; 0x3c
   15fc0:	ldr	r4, [r3, ip]
   15fc4:	add	r5, sp, #4
   15fc8:	mov	r7, r2
   15fcc:	mov	r6, r0
   15fd0:	mov	r0, r5
   15fd4:	ldr	r3, [r4]
   15fd8:	str	r3, [sp, #52]	; 0x34
   15fdc:	bl	14b40 <close_stdout@@Base+0x1060>
   15fe0:	mov	r3, r5
   15fe4:	mvn	r2, #0
   15fe8:	mov	r0, r6
   15fec:	mov	r1, r7
   15ff0:	bl	15a20 <close_stdout@@Base+0x1f40>
   15ff4:	ldr	r2, [sp, #52]	; 0x34
   15ff8:	ldr	r3, [r4]
   15ffc:	cmp	r2, r3
   16000:	bne	1600c <close_stdout@@Base+0x252c>
   16004:	add	sp, sp, #60	; 0x3c
   16008:	pop	{r4, r5, r6, r7, pc}
   1600c:	bl	11498 <__stack_chk_fail@plt>
   16010:	andeq	r6, r1, r4, asr #32
   16014:	andeq	r0, r0, ip, asr r1
   16018:	ldr	ip, [pc, #96]	; 16080 <close_stdout@@Base+0x25a0>
   1601c:	push	{r4, r5, r6, r7, r8, lr}
   16020:	add	ip, pc, ip
   16024:	ldr	lr, [pc, #88]	; 16084 <close_stdout@@Base+0x25a4>
   16028:	sub	sp, sp, #56	; 0x38
   1602c:	mov	r8, r3
   16030:	add	r5, sp, #4
   16034:	mov	r7, r2
   16038:	mov	r6, r0
   1603c:	ldr	r4, [ip, lr]
   16040:	mov	r0, r5
   16044:	ldr	r3, [r4]
   16048:	str	r3, [sp, #52]	; 0x34
   1604c:	bl	14b40 <close_stdout@@Base+0x1060>
   16050:	mov	r2, r8
   16054:	mov	r3, r5
   16058:	mov	r0, r6
   1605c:	mov	r1, r7
   16060:	bl	15a20 <close_stdout@@Base+0x1f40>
   16064:	ldr	r2, [sp, #52]	; 0x34
   16068:	ldr	r3, [r4]
   1606c:	cmp	r2, r3
   16070:	bne	1607c <close_stdout@@Base+0x259c>
   16074:	add	sp, sp, #56	; 0x38
   16078:	pop	{r4, r5, r6, r7, r8, pc}
   1607c:	bl	11498 <__stack_chk_fail@plt>
   16080:	ldrdeq	r5, [r1], -r8
   16084:	andeq	r0, r0, ip, asr r1
   16088:	mov	r2, r1
   1608c:	mov	r1, r0
   16090:	mov	r0, #0
   16094:	b	15fac <close_stdout@@Base+0x24cc>
   16098:	mov	ip, r1
   1609c:	mov	r3, r2
   160a0:	mov	r1, r0
   160a4:	mov	r2, ip
   160a8:	mov	r0, #0
   160ac:	b	16018 <close_stdout@@Base+0x2538>
   160b0:	push	{r4, r5, r6, r7, r8, lr}
   160b4:	mov	r5, r2
   160b8:	ldr	lr, [pc, #136]	; 16148 <close_stdout@@Base+0x2668>
   160bc:	mov	r7, r0
   160c0:	mov	r6, r1
   160c4:	ldr	r4, [pc, #128]	; 1614c <close_stdout@@Base+0x266c>
   160c8:	add	lr, pc, lr
   160cc:	sub	sp, sp, #56	; 0x38
   160d0:	add	lr, lr, #256	; 0x100
   160d4:	ldr	r8, [pc, #116]	; 16150 <close_stdout@@Base+0x2670>
   160d8:	add	r4, pc, r4
   160dc:	add	ip, sp, #4
   160e0:	ldm	lr!, {r0, r1, r2, r3}
   160e4:	ldr	r4, [r4, r8]
   160e8:	stmia	ip!, {r0, r1, r2, r3}
   160ec:	ldm	lr!, {r0, r1, r2, r3}
   160f0:	ldr	r8, [r4]
   160f4:	stmia	ip!, {r0, r1, r2, r3}
   160f8:	ldm	lr, {r0, r1, r2, r3}
   160fc:	str	r8, [sp, #52]	; 0x34
   16100:	stm	ip, {r0, r1, r2, r3}
   16104:	mov	r1, r5
   16108:	add	r5, sp, #4
   1610c:	mov	r2, #1
   16110:	mov	r0, r5
   16114:	bl	15c7c <close_stdout@@Base+0x219c>
   16118:	mov	r2, r6
   1611c:	mov	r3, r5
   16120:	mov	r1, r7
   16124:	mov	r0, #0
   16128:	bl	15a20 <close_stdout@@Base+0x1f40>
   1612c:	ldr	r2, [sp, #52]	; 0x34
   16130:	ldr	r3, [r4]
   16134:	cmp	r2, r3
   16138:	bne	16144 <close_stdout@@Base+0x2664>
   1613c:	add	sp, sp, #56	; 0x38
   16140:	pop	{r4, r5, r6, r7, r8, pc}
   16144:	bl	11498 <__stack_chk_fail@plt>
   16148:	andeq	r6, r1, ip, lsr #2
   1614c:	andeq	r5, r1, r0, lsr #30
   16150:	andeq	r0, r0, ip, asr r1
   16154:	mov	r2, r1
   16158:	mvn	r1, #0
   1615c:	b	160b0 <close_stdout@@Base+0x25d0>
   16160:	mov	r1, #58	; 0x3a
   16164:	b	16154 <close_stdout@@Base+0x2674>
   16168:	mov	r2, #58	; 0x3a
   1616c:	b	160b0 <close_stdout@@Base+0x25d0>
   16170:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16174:	mov	r5, r2
   16178:	ldr	lr, [pc, #144]	; 16210 <close_stdout@@Base+0x2730>
   1617c:	mov	r8, r0
   16180:	mov	r9, r1
   16184:	mov	r7, r3
   16188:	add	lr, pc, lr
   1618c:	ldr	r4, [pc, #128]	; 16214 <close_stdout@@Base+0x2734>
   16190:	add	lr, lr, #256	; 0x100
   16194:	sub	sp, sp, #56	; 0x38
   16198:	ldr	sl, [pc, #120]	; 16218 <close_stdout@@Base+0x2738>
   1619c:	add	r4, pc, r4
   161a0:	ldm	lr!, {r0, r1, r2, r3}
   161a4:	add	ip, sp, #4
   161a8:	ldr	r4, [r4, sl]
   161ac:	ldr	r6, [sp, #88]	; 0x58
   161b0:	stmia	ip!, {r0, r1, r2, r3}
   161b4:	ldm	lr!, {r0, r1, r2, r3}
   161b8:	ldr	sl, [r4]
   161bc:	stmia	ip!, {r0, r1, r2, r3}
   161c0:	ldm	lr, {r0, r1, r2, r3}
   161c4:	str	sl, [sp, #52]	; 0x34
   161c8:	stm	ip, {r0, r1, r2, r3}
   161cc:	mov	r2, r5
   161d0:	add	r5, sp, #4
   161d4:	mov	r1, r9
   161d8:	mov	r0, r5
   161dc:	bl	15cf0 <close_stdout@@Base+0x2210>
   161e0:	mov	r2, r6
   161e4:	mov	r3, r5
   161e8:	mov	r0, r8
   161ec:	mov	r1, r7
   161f0:	bl	15a20 <close_stdout@@Base+0x1f40>
   161f4:	ldr	r2, [sp, #52]	; 0x34
   161f8:	ldr	r3, [r4]
   161fc:	cmp	r2, r3
   16200:	bne	1620c <close_stdout@@Base+0x272c>
   16204:	add	sp, sp, #56	; 0x38
   16208:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1620c:	bl	11498 <__stack_chk_fail@plt>
   16210:	andeq	r6, r1, ip, rrx
   16214:	andeq	r5, r1, ip, asr lr
   16218:	andeq	r0, r0, ip, asr r1
   1621c:	push	{lr}		; (str lr, [sp, #-4]!)
   16220:	sub	sp, sp, #12
   16224:	mvn	ip, #0
   16228:	str	ip, [sp]
   1622c:	bl	16170 <close_stdout@@Base+0x2690>
   16230:	add	sp, sp, #12
   16234:	pop	{pc}		; (ldr pc, [sp], #4)
   16238:	mov	ip, r1
   1623c:	mov	r3, r2
   16240:	mov	r1, r0
   16244:	mov	r2, ip
   16248:	mov	r0, #0
   1624c:	b	1621c <close_stdout@@Base+0x273c>
   16250:	push	{lr}		; (str lr, [sp, #-4]!)
   16254:	sub	sp, sp, #12
   16258:	mov	lr, r1
   1625c:	mov	ip, r2
   16260:	mov	r1, r0
   16264:	str	r3, [sp]
   16268:	mov	r2, lr
   1626c:	mov	r3, ip
   16270:	mov	r0, #0
   16274:	bl	16170 <close_stdout@@Base+0x2690>
   16278:	add	sp, sp, #12
   1627c:	pop	{pc}		; (ldr pc, [sp], #4)
   16280:	ldr	r3, [pc, #12]	; 16294 <close_stdout@@Base+0x27b4>
   16284:	ldr	ip, [pc, #12]	; 16298 <close_stdout@@Base+0x27b8>
   16288:	add	r3, pc, r3
   1628c:	ldr	r3, [r3, ip]
   16290:	b	15a20 <close_stdout@@Base+0x1f40>
   16294:	andeq	r5, r1, r0, ror sp
   16298:	andeq	r0, r0, r8, asr r1
   1629c:	mov	r2, r1
   162a0:	mov	r1, r0
   162a4:	mov	r0, #0
   162a8:	b	16280 <close_stdout@@Base+0x27a0>
   162ac:	mvn	r2, #0
   162b0:	b	16280 <close_stdout@@Base+0x27a0>
   162b4:	mov	r1, r0
   162b8:	mov	r0, #0
   162bc:	b	162ac <close_stdout@@Base+0x27cc>
   162c0:	push	{r4, lr}
   162c4:	mov	r4, r0
   162c8:	mov	r0, #24
   162cc:	bl	17420 <close_stdout@@Base+0x3940>
   162d0:	mov	r2, #0
   162d4:	mov	r3, #0
   162d8:	str	r4, [r0]
   162dc:	strd	r2, [r0, #16]
   162e0:	strd	r2, [r0, #8]
   162e4:	pop	{r4, pc}
   162e8:	push	{r3, lr}
   162ec:	bl	165e8 <close_stdout@@Base+0x2b08>
   162f0:	cmp	r0, #0
   162f4:	popeq	{r3, pc}
   162f8:	pop	{r3, lr}
   162fc:	b	162c0 <close_stdout@@Base+0x27e0>
   16300:	ldr	r0, [r0]
   16304:	bx	lr
   16308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1630c:	sub	sp, sp, #84	; 0x54
   16310:	ldr	r1, [pc, #496]	; 16508 <close_stdout@@Base+0x2a28>
   16314:	str	r0, [sp, #56]	; 0x38
   16318:	ldr	ip, [sp, #56]	; 0x38
   1631c:	add	r1, pc, r1
   16320:	ldr	r0, [pc, #484]	; 1650c <close_stdout@@Base+0x2a2c>
   16324:	strd	r2, [sp, #8]
   16328:	adds	r2, r2, #1
   1632c:	ldr	ip, [ip]
   16330:	adc	r3, r3, #0
   16334:	strd	r2, [sp, #24]
   16338:	str	ip, [sp, #48]	; 0x30
   1633c:	ldr	ip, [sp, #56]	; 0x38
   16340:	ldrd	r8, [ip, #8]
   16344:	add	ip, sp, #68	; 0x44
   16348:	str	ip, [sp, #52]	; 0x34
   1634c:	ldr	ip, [sp, #56]	; 0x38
   16350:	ldr	r0, [r1, r0]
   16354:	ldrd	r6, [ip, #16]
   16358:	ldr	r3, [r0]
   1635c:	str	r0, [sp, #60]	; 0x3c
   16360:	str	r3, [sp, #76]	; 0x4c
   16364:	ldrd	r0, [sp, #8]
   16368:	cmp	r7, r1
   1636c:	cmpeq	r6, r0
   16370:	bcs	16418 <close_stdout@@Base+0x2938>
   16374:	mov	r2, #0
   16378:	mov	r3, r9
   1637c:	mov	ip, r2
   16380:	mov	r2, r8
   16384:	ldrd	r8, [sp, #8]
   16388:	mov	r0, r6
   1638c:	mov	r1, r7
   16390:	lsl	r5, r1, #8
   16394:	lsl	r4, r0, #8
   16398:	orr	r5, r5, r0, lsr #24
   1639c:	adds	r0, r4, #255	; 0xff
   163a0:	adc	r1, r5, #0
   163a4:	add	ip, ip, #1
   163a8:	cmp	r9, r1
   163ac:	cmpeq	r8, r0
   163b0:	bhi	16390 <close_stdout@@Base+0x28b0>
   163b4:	ldr	r0, [sp, #48]	; 0x30
   163b8:	add	r1, sp, #68	; 0x44
   163bc:	mov	r8, r2
   163c0:	mov	r2, ip
   163c4:	mov	r9, r3
   163c8:	bl	16878 <close_stdout@@Base+0x2d98>
   163cc:	add	r3, sp, #67	; 0x43
   163d0:	ldrd	r0, [sp, #8]
   163d4:	mov	ip, r3
   163d8:	lsl	fp, r9, #8
   163dc:	lsl	r3, r7, #8
   163e0:	orr	fp, fp, r8, lsr #24
   163e4:	lsl	sl, r8, #8
   163e8:	lsl	r2, r6, #8
   163ec:	ldrb	r8, [ip, #1]!
   163f0:	orr	r3, r3, r6, lsr #24
   163f4:	adds	r6, r2, #255	; 0xff
   163f8:	adc	r7, r3, #0
   163fc:	adds	r8, r8, sl
   16400:	mov	r9, #0
   16404:	adc	r9, r9, fp
   16408:	cmp	r1, r7
   1640c:	cmpeq	r0, r6
   16410:	bhi	163d8 <close_stdout@@Base+0x28f8>
   16414:	strd	r2, [sp, #40]	; 0x28
   16418:	ldrd	r2, [sp, #8]
   1641c:	cmp	r7, r3
   16420:	cmpeq	r6, r2
   16424:	beq	16484 <close_stdout@@Base+0x29a4>
   16428:	ldrd	r0, [sp, #8]
   1642c:	ldrd	r2, [sp, #24]
   16430:	subs	r0, r6, r0
   16434:	sbc	r1, r7, r1
   16438:	strd	r0, [sp, #32]
   1643c:	bl	18c54 <close_stdout@@Base+0x5174>
   16440:	mov	r0, r8
   16444:	mov	r1, r9
   16448:	strd	r2, [sp, #16]
   1644c:	ldrd	r2, [sp, #24]
   16450:	bl	18c54 <close_stdout@@Base+0x5174>
   16454:	ldrd	r0, [sp, #16]
   16458:	subs	r6, r6, r0
   1645c:	sbc	r7, r7, r1
   16460:	cmp	r9, r7
   16464:	cmpeq	r8, r6
   16468:	bls	164bc <close_stdout@@Base+0x29dc>
   1646c:	ldrd	r6, [sp, #16]
   16470:	mov	r8, r2
   16474:	mov	r9, r3
   16478:	subs	r6, r6, #1
   1647c:	sbc	r7, r7, #0
   16480:	b	16364 <close_stdout@@Base+0x2884>
   16484:	ldr	ip, [sp, #56]	; 0x38
   16488:	mov	r2, #0
   1648c:	mov	r3, #0
   16490:	strd	r2, [ip, #16]
   16494:	strd	r2, [ip, #8]
   16498:	ldr	ip, [sp, #60]	; 0x3c
   1649c:	mov	r0, r8
   164a0:	ldr	r2, [sp, #76]	; 0x4c
   164a4:	mov	r1, r9
   164a8:	ldr	r3, [ip]
   164ac:	cmp	r2, r3
   164b0:	bne	16504 <close_stdout@@Base+0x2a24>
   164b4:	add	sp, sp, #84	; 0x54
   164b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164bc:	mov	ip, r3
   164c0:	mov	r4, r2
   164c4:	mov	r0, r8
   164c8:	mov	r1, r9
   164cc:	ldrd	r2, [sp, #24]
   164d0:	mov	r8, r4
   164d4:	str	ip, [sp, #4]
   164d8:	bl	18c54 <close_stdout@@Base+0x5174>
   164dc:	ldr	lr, [sp, #56]	; 0x38
   164e0:	ldrd	r2, [sp, #24]
   164e4:	strd	r0, [lr, #8]
   164e8:	ldrd	r0, [sp, #32]
   164ec:	bl	18c54 <close_stdout@@Base+0x5174>
   164f0:	ldr	ip, [sp, #4]
   164f4:	mov	r9, ip
   164f8:	ldr	ip, [sp, #56]	; 0x38
   164fc:	strd	r0, [ip, #16]
   16500:	b	16498 <close_stdout@@Base+0x29b8>
   16504:	bl	11498 <__stack_chk_fail@plt>
   16508:	ldrdeq	r5, [r1], -ip
   1650c:	andeq	r0, r0, ip, asr r1
   16510:	push	{r4, lr}
   16514:	mov	r1, #0
   16518:	mov	r4, r0
   1651c:	mov	r2, #24
   16520:	bl	11654 <memset@plt>
   16524:	mov	r0, r4
   16528:	pop	{r4, lr}
   1652c:	b	1142c <free@plt>
   16530:	push	{r3, r4, r5, r6, r7, lr}
   16534:	mov	r5, r0
   16538:	ldr	r0, [r0]
   1653c:	bl	169c8 <close_stdout@@Base+0x2ee8>
   16540:	mov	r7, r0
   16544:	bl	11618 <__errno_location@plt>
   16548:	ldr	r6, [r0]
   1654c:	mov	r4, r0
   16550:	mov	r0, r5
   16554:	bl	16510 <close_stdout@@Base+0x2a30>
   16558:	mov	r0, r7
   1655c:	str	r6, [r4]
   16560:	pop	{r3, r4, r5, r6, r7, pc}
   16564:	push	{r3, r4, r5, r6, r7, lr}
   16568:	subs	r5, r0, #0
   1656c:	ldr	r3, [pc, #100]	; 165d8 <close_stdout@@Base+0x2af8>
   16570:	add	r3, pc, r3
   16574:	beq	165c8 <close_stdout@@Base+0x2ae8>
   16578:	ldr	r2, [pc, #92]	; 165dc <close_stdout@@Base+0x2afc>
   1657c:	ldr	r3, [r3, r2]
   16580:	ldr	r6, [r3]
   16584:	bl	11618 <__errno_location@plt>
   16588:	ldr	r4, [r0]
   1658c:	cmp	r4, #0
   16590:	beq	165cc <close_stdout@@Base+0x2aec>
   16594:	ldr	r1, [pc, #68]	; 165e0 <close_stdout@@Base+0x2b00>
   16598:	add	r1, pc, r1
   1659c:	mov	r2, #5
   165a0:	mov	r0, #0
   165a4:	bl	1148c <dcgettext@plt>
   165a8:	mov	r7, r0
   165ac:	mov	r0, r5
   165b0:	bl	16160 <close_stdout@@Base+0x2680>
   165b4:	mov	r1, r4
   165b8:	mov	r2, r7
   165bc:	mov	r3, r0
   165c0:	mov	r0, r6
   165c4:	bl	1154c <error@plt>
   165c8:	bl	11768 <abort@plt>
   165cc:	ldr	r1, [pc, #16]	; 165e4 <close_stdout@@Base+0x2b04>
   165d0:	add	r1, pc, r1
   165d4:	b	1659c <close_stdout@@Base+0x2abc>
   165d8:	andeq	r5, r1, r8, lsl #21
   165dc:	andeq	r0, r0, r0, lsl #3
   165e0:	andeq	r4, r0, r0, asr #7
   165e4:	andeq	r4, r0, r8, ror r3
   165e8:	ldr	ip, [pc, #604]	; 1684c <close_stdout@@Base+0x2d6c>
   165ec:	ldr	r3, [pc, #604]	; 16850 <close_stdout@@Base+0x2d70>
   165f0:	add	ip, pc, ip
   165f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   165f8:	subs	r7, r1, #0
   165fc:	ldr	r5, [ip, r3]
   16600:	sub	sp, sp, #16
   16604:	mov	r6, r0
   16608:	ldr	r3, [r5]
   1660c:	str	r3, [sp, #12]
   16610:	beq	16688 <close_stdout@@Base+0x2ba8>
   16614:	cmp	r0, #0
   16618:	beq	166a8 <close_stdout@@Base+0x2bc8>
   1661c:	ldr	r1, [pc, #560]	; 16854 <close_stdout@@Base+0x2d74>
   16620:	add	r1, pc, r1
   16624:	bl	18180 <close_stdout@@Base+0x46a0>
   16628:	subs	r8, r0, #0
   1662c:	beq	167d8 <close_stdout@@Base+0x2cf8>
   16630:	movw	r0, #2076	; 0x81c
   16634:	bl	17420 <close_stdout@@Base+0x3940>
   16638:	ldr	ip, [pc, #536]	; 16858 <close_stdout@@Base+0x2d78>
   1663c:	cmp	r7, #2048	; 0x800
   16640:	movcc	r3, r7
   16644:	movcs	r3, #2048	; 0x800
   16648:	mov	r2, #0
   1664c:	add	ip, pc, ip
   16650:	mov	r4, r0
   16654:	mov	r0, r8
   16658:	add	r1, r4, #12
   1665c:	str	r8, [r4]
   16660:	str	r6, [r4, #8]
   16664:	str	ip, [r4, #4]
   16668:	bl	1163c <setvbuf@plt>
   1666c:	mov	r0, r4
   16670:	ldr	r2, [sp, #12]
   16674:	ldr	r3, [r5]
   16678:	cmp	r2, r3
   1667c:	bne	16848 <close_stdout@@Base+0x2d68>
   16680:	add	sp, sp, #16
   16684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16688:	movw	r0, #2076	; 0x81c
   1668c:	bl	17420 <close_stdout@@Base+0x3940>
   16690:	ldr	r2, [pc, #452]	; 1685c <close_stdout@@Base+0x2d7c>
   16694:	add	r2, pc, r2
   16698:	mov	r3, r0
   1669c:	str	r7, [r3]
   166a0:	stmib	r3, {r2, r7}
   166a4:	b	16670 <close_stdout@@Base+0x2b90>
   166a8:	movw	r0, #2076	; 0x81c
   166ac:	bl	17420 <close_stdout@@Base+0x3940>
   166b0:	ldr	r3, [pc, #424]	; 16860 <close_stdout@@Base+0x2d80>
   166b4:	mov	r1, r6
   166b8:	add	r3, pc, r3
   166bc:	mov	r4, r0
   166c0:	ldr	r0, [pc, #412]	; 16864 <close_stdout@@Base+0x2d84>
   166c4:	str	r6, [r4]
   166c8:	add	r8, r4, #16
   166cc:	add	r0, pc, r0
   166d0:	str	r6, [r4, #8]
   166d4:	str	r6, [r4, #12]
   166d8:	str	r3, [r4, #4]
   166dc:	bl	11558 <open64@plt>
   166e0:	subs	r9, r0, #0
   166e4:	blt	16728 <close_stdout@@Base+0x2c48>
   166e8:	cmp	r7, #1024	; 0x400
   166ec:	movcc	r2, r7
   166f0:	movcs	r2, #1024	; 0x400
   166f4:	mov	r1, r8
   166f8:	movw	r3, #2060	; 0x80c
   166fc:	bl	113fc <__read_chk@plt>
   16700:	mov	r3, r0
   16704:	mov	r0, r9
   16708:	bic	r9, r3, r3, asr #31
   1670c:	bl	11774 <close@plt>
   16710:	cmp	r9, #1024	; 0x400
   16714:	bcc	167e0 <close_stdout@@Base+0x2d00>
   16718:	mov	r0, r8
   1671c:	bl	16c2c <close_stdout@@Base+0x314c>
   16720:	mov	r0, r4
   16724:	b	16670 <close_stdout@@Base+0x2b90>
   16728:	add	r7, sp, #4
   1672c:	mov	r1, r6
   16730:	mov	r9, #12
   16734:	mov	r0, r7
   16738:	bl	1151c <gettimeofday@plt>
   1673c:	mov	r3, r7
   16740:	ldm	r3!, {r0, r1}
   16744:	str	r0, [r4, #16]
   16748:	str	r1, [r8, #4]
   1674c:	bl	115c4 <getpid@plt>
   16750:	str	r0, [sp, #4]
   16754:	ldr	r0, [r7]
   16758:	str	r0, [r4, #24]
   1675c:	bl	116fc <getppid@plt>
   16760:	rsb	r2, r9, #1024	; 0x400
   16764:	cmp	r2, #4
   16768:	movcs	r2, #4
   1676c:	mov	r1, r7
   16770:	add	r6, r2, r9
   16774:	str	r0, [sp, #4]
   16778:	add	r0, r8, r9
   1677c:	bl	11444 <memcpy@plt>
   16780:	cmp	r6, #1024	; 0x400
   16784:	bcs	16718 <close_stdout@@Base+0x2c38>
   16788:	bl	11414 <getuid@plt>
   1678c:	rsb	r2, r6, #1024	; 0x400
   16790:	cmp	r2, #4
   16794:	movcs	r2, #4
   16798:	mov	r1, r7
   1679c:	add	r9, r2, r6
   167a0:	str	r0, [sp, #4]
   167a4:	add	r0, r8, r6
   167a8:	bl	11444 <memcpy@plt>
   167ac:	cmp	r9, #1024	; 0x400
   167b0:	bcs	16718 <close_stdout@@Base+0x2c38>
   167b4:	bl	11648 <getgid@plt>
   167b8:	rsb	r2, r9, #1024	; 0x400
   167bc:	mov	r1, r7
   167c0:	cmp	r2, #4
   167c4:	movcs	r2, #4
   167c8:	str	r0, [sp, #4]
   167cc:	add	r0, r8, r9
   167d0:	bl	11444 <memcpy@plt>
   167d4:	b	16718 <close_stdout@@Base+0x2c38>
   167d8:	mov	r0, r8
   167dc:	b	16670 <close_stdout@@Base+0x2b90>
   167e0:	add	r7, sp, #4
   167e4:	rsb	sl, r9, #1024	; 0x400
   167e8:	cmp	sl, #8
   167ec:	movcs	sl, #8
   167f0:	mov	r1, r6
   167f4:	mov	r0, r7
   167f8:	add	r6, sl, r9
   167fc:	bl	1151c <gettimeofday@plt>
   16800:	mov	r2, sl
   16804:	add	r0, r8, r9
   16808:	mov	r1, r7
   1680c:	bl	11444 <memcpy@plt>
   16810:	cmp	r6, #1024	; 0x400
   16814:	bcs	16718 <close_stdout@@Base+0x2c38>
   16818:	bl	115c4 <getpid@plt>
   1681c:	rsb	r2, r6, #1024	; 0x400
   16820:	cmp	r2, #4
   16824:	movcs	r2, #4
   16828:	mov	r1, r7
   1682c:	add	r9, r2, r6
   16830:	str	r0, [sp, #4]
   16834:	add	r0, r8, r6
   16838:	bl	11444 <memcpy@plt>
   1683c:	cmp	r9, #1024	; 0x400
   16840:	bcc	1675c <close_stdout@@Base+0x2c7c>
   16844:	b	16718 <close_stdout@@Base+0x2c38>
   16848:	bl	11498 <__stack_chk_fail@plt>
   1684c:	andeq	r5, r1, r8, lsl #20
   16850:	andeq	r0, r0, ip, asr r1
   16854:	andeq	r4, r0, r8, asr #6
   16858:			; <UNDEFINED> instruction: 0xffffff10
   1685c:			; <UNDEFINED> instruction: 0xfffffec8
   16860:			; <UNDEFINED> instruction: 0xfffffea4
   16864:	andeq	r4, r0, r0, lsr #5
   16868:	str	r1, [r0, #4]
   1686c:	bx	lr
   16870:	str	r1, [r0, #8]
   16874:	bx	lr
   16878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1687c:	mov	r6, r0
   16880:	ldr	r3, [r0]
   16884:	sub	sp, sp, #12
   16888:	mov	r5, r1
   1688c:	mov	r4, r2
   16890:	cmp	r3, #0
   16894:	beq	168f8 <close_stdout@@Base+0x2e18>
   16898:	str	r3, [sp, #4]
   1689c:	bl	11618 <__errno_location@plt>
   168a0:	ldr	r3, [sp, #4]
   168a4:	mov	r7, r0
   168a8:	b	168d0 <close_stdout@@Base+0x2df0>
   168ac:	ldr	r3, [r6]
   168b0:	ldr	r3, [r3]
   168b4:	ands	r3, r3, #32
   168b8:	movne	r3, r2
   168bc:	str	r3, [r7]
   168c0:	ldr	r3, [r6, #4]
   168c4:	ldr	r0, [r6, #8]
   168c8:	blx	r3
   168cc:	ldr	r3, [r6]
   168d0:	mov	r2, r4
   168d4:	mov	r0, r5
   168d8:	mov	r1, #1
   168dc:	bl	11720 <fread_unlocked@plt>
   168e0:	ldr	r2, [r7]
   168e4:	subs	r4, r4, r0
   168e8:	add	r5, r5, r0
   168ec:	bne	168ac <close_stdout@@Base+0x2dcc>
   168f0:	add	sp, sp, #12
   168f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168f8:	ldr	r8, [r0, #12]
   168fc:	cmp	r2, r8
   16900:	bls	169b8 <close_stdout@@Base+0x2ed8>
   16904:	add	r9, r0, #12
   16908:	rsb	r1, r8, #2064	; 0x810
   1690c:	add	r1, r9, r1
   16910:	add	sl, r9, #1040	; 0x410
   16914:	add	r7, r0, #16
   16918:	mov	r0, r5
   1691c:	mov	r2, r8
   16920:	add	r5, r5, r8
   16924:	bl	11444 <memcpy@plt>
   16928:	tst	r5, #3
   1692c:	rsb	r4, r8, r4
   16930:	beq	16950 <close_stdout@@Base+0x2e70>
   16934:	b	16994 <close_stdout@@Base+0x2eb4>
   16938:	mov	r1, r5
   1693c:	mov	r0, r7
   16940:	bl	169fc <close_stdout@@Base+0x2f1c>
   16944:	subs	r4, r4, #1024	; 0x400
   16948:	add	r5, r5, #1024	; 0x400
   1694c:	beq	16988 <close_stdout@@Base+0x2ea8>
   16950:	cmp	r4, #1024	; 0x400
   16954:	bcs	16938 <close_stdout@@Base+0x2e58>
   16958:	add	fp, r9, #1040	; 0x410
   1695c:	mov	r0, r7
   16960:	mov	r1, fp
   16964:	bl	169fc <close_stdout@@Base+0x2f1c>
   16968:	mov	r1, fp
   1696c:	mov	r8, #1024	; 0x400
   16970:	mov	r2, r4
   16974:	mov	r0, r5
   16978:	bl	11444 <memcpy@plt>
   1697c:	rsb	r4, r4, r8
   16980:	str	r4, [r6, #12]
   16984:	b	168f0 <close_stdout@@Base+0x2e10>
   16988:	str	r4, [r6, #12]
   1698c:	add	sp, sp, #12
   16990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16994:	mov	r1, sl
   16998:	mov	r0, r7
   1699c:	bl	169fc <close_stdout@@Base+0x2f1c>
   169a0:	mov	r8, #1024	; 0x400
   169a4:	cmp	r4, r8
   169a8:	mov	r1, sl
   169ac:	mov	fp, sl
   169b0:	bhi	16918 <close_stdout@@Base+0x2e38>
   169b4:	b	16968 <close_stdout@@Base+0x2e88>
   169b8:	add	r1, r0, #12
   169bc:	rsb	r3, r8, #2064	; 0x810
   169c0:	add	r1, r1, r3
   169c4:	b	16970 <close_stdout@@Base+0x2e90>
   169c8:	push	{r3, r4, r5, lr}
   169cc:	mov	r1, #0
   169d0:	mov	r4, r0
   169d4:	ldr	r5, [r0]
   169d8:	movw	r2, #2076	; 0x81c
   169dc:	bl	11654 <memset@plt>
   169e0:	mov	r0, r4
   169e4:	bl	1142c <free@plt>
   169e8:	subs	r0, r5, #0
   169ec:	beq	169f8 <close_stdout@@Base+0x2f18>
   169f0:	pop	{r3, r4, r5, lr}
   169f4:	b	17de4 <close_stdout@@Base+0x4304>
   169f8:	pop	{r3, r4, r5, pc}
   169fc:	push	{r4, r5, r6, r7, r8, r9}
   16a00:	add	r6, r0, #512	; 0x200
   16a04:	ldr	r5, [r0, #1032]	; 0x408
   16a08:	add	r4, r0, #16
   16a0c:	ldr	ip, [r0, #1028]	; 0x404
   16a10:	mov	r3, r0
   16a14:	add	r5, r5, #1
   16a18:	ldr	r2, [r0, #1024]	; 0x400
   16a1c:	add	ip, r5, ip
   16a20:	str	r5, [r0, #1032]	; 0x408
   16a24:	ldr	r7, [r4, #-16]
   16a28:	eor	r2, r2, r2, lsl #13
   16a2c:	ldr	r5, [r3, #512]	; 0x200
   16a30:	add	r3, r3, #16
   16a34:	and	r8, r7, #1020	; 0x3fc
   16a38:	add	r4, r4, #16
   16a3c:	add	r5, r2, r5
   16a40:	add	r1, r1, #16
   16a44:	ldr	r2, [r0, r8]
   16a48:	eor	r8, r5, r5, lsr #6
   16a4c:	add	r5, r5, r2
   16a50:	add	ip, r5, ip
   16a54:	str	ip, [r4, #-32]	; 0xffffffe0
   16a58:	lsr	ip, ip, #8
   16a5c:	and	ip, ip, #1020	; 0x3fc
   16a60:	ldr	r2, [r0, ip]
   16a64:	add	r7, r7, r2
   16a68:	str	r7, [r1, #-16]
   16a6c:	ldr	r5, [r3, #-12]
   16a70:	ldr	r2, [r3, #500]	; 0x1f4
   16a74:	and	ip, r5, #1020	; 0x3fc
   16a78:	add	r2, r8, r2
   16a7c:	ldr	ip, [r0, ip]
   16a80:	eor	r8, r2, r2, lsl #2
   16a84:	add	r2, r2, ip
   16a88:	add	r2, r2, r7
   16a8c:	str	r2, [r3, #-12]
   16a90:	lsr	r2, r2, #8
   16a94:	and	r2, r2, #1020	; 0x3fc
   16a98:	ldr	r7, [r0, r2]
   16a9c:	add	r7, r5, r7
   16aa0:	str	r7, [r1, #-12]
   16aa4:	ldr	r5, [r3, #-8]
   16aa8:	ldr	ip, [r3, #504]	; 0x1f8
   16aac:	and	r2, r5, #1020	; 0x3fc
   16ab0:	add	ip, r8, ip
   16ab4:	ldr	r8, [r0, r2]
   16ab8:	eor	r2, ip, ip, lsr #16
   16abc:	add	ip, ip, r8
   16ac0:	add	ip, ip, r7
   16ac4:	str	ip, [r3, #-8]
   16ac8:	lsr	ip, ip, #8
   16acc:	and	ip, ip, #1020	; 0x3fc
   16ad0:	ldr	r7, [r0, ip]
   16ad4:	add	r7, r5, r7
   16ad8:	str	r7, [r1, #-8]
   16adc:	ldr	ip, [r3, #-4]
   16ae0:	ldr	r8, [r3, #508]	; 0x1fc
   16ae4:	and	r5, ip, #1020	; 0x3fc
   16ae8:	add	r2, r2, r8
   16aec:	ldr	r5, [r0, r5]
   16af0:	add	r5, r2, r5
   16af4:	add	r5, r5, r7
   16af8:	str	r5, [r3, #-4]
   16afc:	cmp	r3, r6
   16b00:	lsr	r5, r5, #8
   16b04:	and	r5, r5, #1020	; 0x3fc
   16b08:	ldr	r5, [r0, r5]
   16b0c:	add	ip, ip, r5
   16b10:	str	ip, [r1, #-4]
   16b14:	bcc	16a24 <close_stdout@@Base+0x2f44>
   16b18:	add	r4, r3, #16
   16b1c:	add	r7, r0, #1024	; 0x400
   16b20:	mov	r5, r4
   16b24:	ldr	r8, [r5, #-16]
   16b28:	eor	r2, r2, r2, lsl #13
   16b2c:	ldr	r6, [r3, #-512]	; 0xfffffe00
   16b30:	cmp	r4, r7
   16b34:	and	r9, r8, #1020	; 0x3fc
   16b38:	add	r5, r5, #16
   16b3c:	add	r6, r2, r6
   16b40:	add	r1, r1, #16
   16b44:	ldr	r2, [r0, r9]
   16b48:	eor	r9, r6, r6, lsr #6
   16b4c:	add	r6, r6, r2
   16b50:	add	ip, r6, ip
   16b54:	str	ip, [r5, #-32]	; 0xffffffe0
   16b58:	lsr	ip, ip, #8
   16b5c:	and	ip, ip, #1020	; 0x3fc
   16b60:	ldr	r2, [r0, ip]
   16b64:	add	r8, r8, r2
   16b68:	str	r8, [r1, #-16]
   16b6c:	ldr	r6, [r3, #4]
   16b70:	ldr	r2, [r3, #-508]	; 0xfffffe04
   16b74:	and	ip, r6, #1020	; 0x3fc
   16b78:	add	r2, r9, r2
   16b7c:	ldr	ip, [r0, ip]
   16b80:	eor	r9, r2, r2, lsl #2
   16b84:	add	r2, r2, ip
   16b88:	add	r2, r2, r8
   16b8c:	str	r2, [r3, #4]
   16b90:	lsr	r2, r2, #8
   16b94:	and	r2, r2, #1020	; 0x3fc
   16b98:	ldr	r8, [r0, r2]
   16b9c:	add	r8, r6, r8
   16ba0:	str	r8, [r1, #-12]
   16ba4:	ldr	r6, [r3, #8]
   16ba8:	ldr	ip, [r3, #-504]	; 0xfffffe08
   16bac:	and	r2, r6, #1020	; 0x3fc
   16bb0:	add	ip, r9, ip
   16bb4:	ldr	r9, [r0, r2]
   16bb8:	eor	r2, ip, ip, lsr #16
   16bbc:	add	ip, ip, r9
   16bc0:	add	ip, ip, r8
   16bc4:	str	ip, [r3, #8]
   16bc8:	lsr	ip, ip, #8
   16bcc:	and	ip, ip, #1020	; 0x3fc
   16bd0:	ldr	r8, [r0, ip]
   16bd4:	add	r8, r6, r8
   16bd8:	str	r8, [r1, #-8]
   16bdc:	ldr	ip, [r3, #12]
   16be0:	ldr	r9, [r3, #-500]	; 0xfffffe0c
   16be4:	and	r6, ip, #1020	; 0x3fc
   16be8:	add	r2, r2, r9
   16bec:	ldr	r6, [r0, r6]
   16bf0:	add	r6, r2, r6
   16bf4:	add	r6, r6, r8
   16bf8:	str	r6, [r3, #12]
   16bfc:	mov	r3, r4
   16c00:	add	r4, r4, #16
   16c04:	lsr	r6, r6, #8
   16c08:	and	r6, r6, #1020	; 0x3fc
   16c0c:	ldr	r6, [r0, r6]
   16c10:	add	ip, ip, r6
   16c14:	str	ip, [r1, #-4]
   16c18:	bcc	16b24 <close_stdout@@Base+0x3044>
   16c1c:	str	r2, [r0, #1024]	; 0x400
   16c20:	str	ip, [r0, #1028]	; 0x404
   16c24:	pop	{r4, r5, r6, r7, r8, r9}
   16c28:	bx	lr
   16c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   16c30:	movw	ip, #15433	; 0x3c49
   16c34:	movw	r6, #37145	; 0x9119
   16c38:	movw	r4, #59931	; 0xea1b
   16c3c:	movw	r1, #19064	; 0x4a78
   16c40:	movw	r2, #6872	; 0x1ad8
   16c44:	movw	r7, #15947	; 0x3e4b
   16c48:	mov	r5, #89	; 0x59
   16c4c:	movw	r8, #57178	; 0xdf5a
   16c50:	sub	sp, sp, #8
   16c54:	movt	r6, #12384	; 0x3060
   16c58:	movt	r4, #50415	; 0xc4ef
   16c5c:	movt	ip, #42266	; 0xa51a
   16c60:	movt	r1, #55594	; 0xd92a
   16c64:	movt	r2, #3906	; 0xf42
   16c68:	movt	r7, #49942	; 0xc316
   16c6c:	movt	r5, #38361	; 0x95d9
   16c70:	movt	r8, #4967	; 0x1367
   16c74:	mov	r3, r0
   16c78:	mov	r9, #0
   16c7c:	ldr	fp, [r3, #4]
   16c80:	add	r3, r3, #32
   16c84:	ldr	sl, [r0, r9]
   16c88:	add	r5, r5, fp
   16c8c:	ldr	fp, [r3, #-20]	; 0xffffffec
   16c90:	add	r8, r8, sl
   16c94:	ldr	sl, [r3, #-24]	; 0xffffffe8
   16c98:	eor	r8, r8, r5, lsl #11
   16c9c:	add	fp, r8, fp
   16ca0:	add	r7, r7, sl
   16ca4:	add	fp, fp, r2
   16ca8:	add	r5, r7, r5
   16cac:	add	r2, fp, r7
   16cb0:	ldr	sl, [r3, #-12]
   16cb4:	eor	r5, r5, r7, lsr #2
   16cb8:	eor	r7, r2, fp, lsl #8
   16cbc:	ldr	r2, [r3, #-16]
   16cc0:	add	sl, r7, sl
   16cc4:	add	sl, sl, ip
   16cc8:	ldr	ip, [r3, #-4]
   16ccc:	add	r2, r5, r2
   16cd0:	str	r2, [sp, #4]
   16cd4:	add	r2, r2, r1
   16cd8:	add	r1, sl, r2
   16cdc:	add	fp, r2, fp
   16ce0:	eor	r1, r1, sl, lsl #10
   16ce4:	eor	r2, fp, r2, lsr #16
   16ce8:	add	fp, r1, ip
   16cec:	ldr	ip, [r3, #-8]
   16cf0:	add	r6, fp, r6
   16cf4:	add	ip, r2, ip
   16cf8:	add	r4, ip, r4
   16cfc:	add	ip, r4, sl
   16d00:	add	fp, r6, r4
   16d04:	eor	ip, ip, r4, lsr #4
   16d08:	eor	r4, fp, r6, lsl #8
   16d0c:	add	sl, ip, r8
   16d10:	add	r5, r4, r5
   16d14:	add	r8, r5, sl
   16d18:	str	r8, [r0, r9]
   16d1c:	add	r9, r9, #32
   16d20:	add	r6, r6, sl
   16d24:	cmp	r9, #1024	; 0x400
   16d28:	eor	r6, r6, sl, lsr #9
   16d2c:	str	r5, [r3, #-28]	; 0xffffffe4
   16d30:	add	r7, r6, r7
   16d34:	str	r4, [r3, #-8]
   16d38:	str	r7, [r3, #-24]	; 0xffffffe8
   16d3c:	str	r6, [r3, #-4]
   16d40:	str	ip, [r3, #-12]
   16d44:	str	r1, [r3, #-16]
   16d48:	str	r2, [r3, #-20]	; 0xffffffec
   16d4c:	bne	16c7c <close_stdout@@Base+0x319c>
   16d50:	add	r3, r0, #4
   16d54:	mov	r9, #0
   16d58:	ldr	fp, [r3]
   16d5c:	add	r9, r9, #8
   16d60:	ldr	sl, [r3, #-4]
   16d64:	cmp	r9, #256	; 0x100
   16d68:	add	r5, r5, fp
   16d6c:	ldr	fp, [r3, #4]
   16d70:	add	r8, r8, sl
   16d74:	add	r3, r3, #32
   16d78:	add	r7, r7, fp
   16d7c:	ldr	fp, [r3, #-24]	; 0xffffffe8
   16d80:	eor	r8, r8, r5, lsl #11
   16d84:	add	r5, r7, r5
   16d88:	add	sl, r8, fp
   16d8c:	ldr	fp, [r3, #-20]	; 0xffffffec
   16d90:	eor	r5, r5, r7, lsr #2
   16d94:	add	r2, sl, r2
   16d98:	add	sl, r5, fp
   16d9c:	add	r7, r2, r7
   16da0:	add	r1, sl, r1
   16da4:	ldr	sl, [r3, #-16]
   16da8:	eor	r7, r7, r2, lsl #8
   16dac:	add	r2, r1, r2
   16db0:	add	fp, r7, sl
   16db4:	ldr	sl, [r3, #-12]
   16db8:	eor	r2, r2, r1, lsr #16
   16dbc:	add	ip, fp, ip
   16dc0:	add	fp, r2, sl
   16dc4:	add	r1, ip, r1
   16dc8:	add	r4, fp, r4
   16dcc:	ldr	fp, [r3, #-8]
   16dd0:	eor	r1, r1, ip, lsl #10
   16dd4:	add	ip, r4, ip
   16dd8:	add	sl, r1, fp
   16ddc:	eor	ip, ip, r4, lsr #4
   16de0:	add	r6, sl, r6
   16de4:	add	r8, ip, r8
   16de8:	add	r4, r6, r4
   16dec:	str	r1, [r3, #-20]	; 0xffffffec
   16df0:	eor	r4, r4, r6, lsl #8
   16df4:	add	r6, r6, r8
   16df8:	eor	r6, r6, r8, lsr #9
   16dfc:	add	r5, r4, r5
   16e00:	add	r8, r5, r8
   16e04:	str	r2, [r3, #-24]	; 0xffffffe8
   16e08:	add	r7, r6, r7
   16e0c:	str	r5, [r3, #-32]	; 0xffffffe0
   16e10:	str	r8, [r3, #-36]	; 0xffffffdc
   16e14:	str	r7, [r3, #-28]	; 0xffffffe4
   16e18:	str	r4, [r3, #-12]
   16e1c:	str	r6, [r3, #-8]
   16e20:	str	ip, [r3, #-16]
   16e24:	bne	16d58 <close_stdout@@Base+0x3278>
   16e28:	mov	r3, #0
   16e2c:	str	r3, [r0, #1032]	; 0x408
   16e30:	str	r3, [r0, #1028]	; 0x404
   16e34:	str	r3, [r0, #1024]	; 0x400
   16e38:	add	sp, sp, #8
   16e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   16e40:	bx	lr
   16e44:	cmp	r0, #2
   16e48:	push	{r3, r4, r5, r6, r7, lr}
   16e4c:	mov	r4, r0
   16e50:	bhi	16e78 <close_stdout@@Base+0x3398>
   16e54:	bl	1863c <close_stdout@@Base+0x4b5c>
   16e58:	mov	r7, r0
   16e5c:	bl	11618 <__errno_location@plt>
   16e60:	ldr	r6, [r0]
   16e64:	mov	r5, r0
   16e68:	mov	r0, r4
   16e6c:	mov	r4, r7
   16e70:	bl	11774 <close@plt>
   16e74:	str	r6, [r5]
   16e78:	mov	r0, r4
   16e7c:	pop	{r3, r4, r5, r6, r7, pc}
   16e80:	push	{r4, r5, r6, r7, lr}
   16e84:	cmp	r1, #0
   16e88:	sub	sp, sp, #36	; 0x24
   16e8c:	ldr	r7, [pc, #896]	; 17214 <close_stdout@@Base+0x3734>
   16e90:	mov	ip, r3
   16e94:	mov	r5, r0
   16e98:	add	r7, pc, r7
   16e9c:	ldr	r4, [sp, #56]	; 0x38
   16ea0:	ldr	r6, [sp, #60]	; 0x3c
   16ea4:	beq	171e8 <close_stdout@@Base+0x3708>
   16ea8:	str	r2, [sp]
   16eac:	mov	r3, r1
   16eb0:	ldr	r2, [pc, #864]	; 17218 <close_stdout@@Base+0x3738>
   16eb4:	mov	r1, #1
   16eb8:	str	ip, [sp, #4]
   16ebc:	add	r2, pc, r2
   16ec0:	bl	11690 <__fprintf_chk@plt>
   16ec4:	ldr	r1, [pc, #848]	; 1721c <close_stdout@@Base+0x373c>
   16ec8:	mov	r2, #5
   16ecc:	mov	r0, #0
   16ed0:	add	r1, pc, r1
   16ed4:	bl	1148c <dcgettext@plt>
   16ed8:	ldr	r2, [pc, #832]	; 17220 <close_stdout@@Base+0x3740>
   16edc:	movw	ip, #2013	; 0x7dd
   16ee0:	mov	r1, #1
   16ee4:	ldr	r2, [r7, r2]
   16ee8:	str	ip, [sp]
   16eec:	mov	r3, r0
   16ef0:	mov	r0, r5
   16ef4:	bl	11690 <__fprintf_chk@plt>
   16ef8:	ldr	r1, [pc, #804]	; 17224 <close_stdout@@Base+0x3744>
   16efc:	mov	r0, #0
   16f00:	mov	r2, #5
   16f04:	add	r1, pc, r1
   16f08:	bl	1148c <dcgettext@plt>
   16f0c:	mov	r1, r5
   16f10:	bl	113cc <fputs_unlocked@plt>
   16f14:	cmp	r6, #9
   16f18:	addls	pc, pc, r6, lsl #2
   16f1c:	b	17204 <close_stdout@@Base+0x3724>
   16f20:	b	16fb4 <close_stdout@@Base+0x34d4>
   16f24:	b	16fb8 <close_stdout@@Base+0x34d8>
   16f28:	b	16fe8 <close_stdout@@Base+0x3508>
   16f2c:	b	1701c <close_stdout@@Base+0x353c>
   16f30:	b	17058 <close_stdout@@Base+0x3578>
   16f34:	b	17098 <close_stdout@@Base+0x35b8>
   16f38:	b	170e0 <close_stdout@@Base+0x3600>
   16f3c:	b	17130 <close_stdout@@Base+0x3650>
   16f40:	b	17188 <close_stdout@@Base+0x36a8>
   16f44:	b	16f48 <close_stdout@@Base+0x3468>
   16f48:	ldr	r1, [pc, #728]	; 17228 <close_stdout@@Base+0x3748>
   16f4c:	mov	r0, #0
   16f50:	add	r1, pc, r1
   16f54:	mov	r2, #5
   16f58:	bl	1148c <dcgettext@plt>
   16f5c:	ldm	r4, {r3, ip}
   16f60:	mov	r1, #1
   16f64:	str	ip, [sp]
   16f68:	ldr	ip, [r4, #8]
   16f6c:	str	ip, [sp, #4]
   16f70:	ldr	ip, [r4, #12]
   16f74:	str	ip, [sp, #8]
   16f78:	ldr	ip, [r4, #16]
   16f7c:	str	ip, [sp, #12]
   16f80:	ldr	ip, [r4, #20]
   16f84:	str	ip, [sp, #16]
   16f88:	ldr	ip, [r4, #24]
   16f8c:	str	ip, [sp, #20]
   16f90:	ldr	ip, [r4, #28]
   16f94:	str	ip, [sp, #24]
   16f98:	ldr	ip, [r4, #32]
   16f9c:	str	ip, [sp, #28]
   16fa0:	mov	r2, r0
   16fa4:	mov	r0, r5
   16fa8:	bl	11690 <__fprintf_chk@plt>
   16fac:	add	sp, sp, #36	; 0x24
   16fb0:	pop	{r4, r5, r6, r7, pc}
   16fb4:	bl	11768 <abort@plt>
   16fb8:	ldr	r1, [pc, #620]	; 1722c <close_stdout@@Base+0x374c>
   16fbc:	mov	r2, #5
   16fc0:	mov	r0, #0
   16fc4:	add	r1, pc, r1
   16fc8:	bl	1148c <dcgettext@plt>
   16fcc:	ldr	r3, [r4]
   16fd0:	mov	r1, #1
   16fd4:	mov	r2, r0
   16fd8:	mov	r0, r5
   16fdc:	add	sp, sp, #36	; 0x24
   16fe0:	pop	{r4, r5, r6, r7, lr}
   16fe4:	b	11690 <__fprintf_chk@plt>
   16fe8:	ldr	r1, [pc, #576]	; 17230 <close_stdout@@Base+0x3750>
   16fec:	mov	r2, #5
   16ff0:	mov	r0, #0
   16ff4:	add	r1, pc, r1
   16ff8:	bl	1148c <dcgettext@plt>
   16ffc:	ldm	r4, {r3, ip}
   17000:	mov	r1, #1
   17004:	str	ip, [sp, #56]	; 0x38
   17008:	mov	r2, r0
   1700c:	mov	r0, r5
   17010:	add	sp, sp, #36	; 0x24
   17014:	pop	{r4, r5, r6, r7, lr}
   17018:	b	11690 <__fprintf_chk@plt>
   1701c:	ldr	r1, [pc, #528]	; 17234 <close_stdout@@Base+0x3754>
   17020:	mov	r2, #5
   17024:	mov	r0, #0
   17028:	add	r1, pc, r1
   1702c:	bl	1148c <dcgettext@plt>
   17030:	ldm	r4, {r3, ip}
   17034:	mov	r1, #1
   17038:	str	ip, [sp, #56]	; 0x38
   1703c:	ldr	ip, [r4, #8]
   17040:	str	ip, [sp, #60]	; 0x3c
   17044:	mov	r2, r0
   17048:	mov	r0, r5
   1704c:	add	sp, sp, #36	; 0x24
   17050:	pop	{r4, r5, r6, r7, lr}
   17054:	b	11690 <__fprintf_chk@plt>
   17058:	ldr	r1, [pc, #472]	; 17238 <close_stdout@@Base+0x3758>
   1705c:	mov	r2, #5
   17060:	mov	r0, #0
   17064:	add	r1, pc, r1
   17068:	bl	1148c <dcgettext@plt>
   1706c:	ldm	r4, {r3, ip}
   17070:	mov	r1, #1
   17074:	str	ip, [sp]
   17078:	ldr	ip, [r4, #8]
   1707c:	str	ip, [sp, #4]
   17080:	ldr	ip, [r4, #12]
   17084:	str	ip, [sp, #8]
   17088:	mov	r2, r0
   1708c:	mov	r0, r5
   17090:	bl	11690 <__fprintf_chk@plt>
   17094:	b	16fac <close_stdout@@Base+0x34cc>
   17098:	ldr	r1, [pc, #412]	; 1723c <close_stdout@@Base+0x375c>
   1709c:	mov	r2, #5
   170a0:	mov	r0, #0
   170a4:	add	r1, pc, r1
   170a8:	bl	1148c <dcgettext@plt>
   170ac:	ldm	r4, {r3, ip}
   170b0:	mov	r1, #1
   170b4:	str	ip, [sp]
   170b8:	ldr	ip, [r4, #8]
   170bc:	str	ip, [sp, #4]
   170c0:	ldr	ip, [r4, #12]
   170c4:	str	ip, [sp, #8]
   170c8:	ldr	ip, [r4, #16]
   170cc:	str	ip, [sp, #12]
   170d0:	mov	r2, r0
   170d4:	mov	r0, r5
   170d8:	bl	11690 <__fprintf_chk@plt>
   170dc:	b	16fac <close_stdout@@Base+0x34cc>
   170e0:	ldr	r1, [pc, #344]	; 17240 <close_stdout@@Base+0x3760>
   170e4:	mov	r2, #5
   170e8:	mov	r0, #0
   170ec:	add	r1, pc, r1
   170f0:	bl	1148c <dcgettext@plt>
   170f4:	ldm	r4, {r3, ip}
   170f8:	mov	r1, #1
   170fc:	str	ip, [sp]
   17100:	ldr	ip, [r4, #8]
   17104:	str	ip, [sp, #4]
   17108:	ldr	ip, [r4, #12]
   1710c:	str	ip, [sp, #8]
   17110:	ldr	ip, [r4, #16]
   17114:	str	ip, [sp, #12]
   17118:	ldr	ip, [r4, #20]
   1711c:	str	ip, [sp, #16]
   17120:	mov	r2, r0
   17124:	mov	r0, r5
   17128:	bl	11690 <__fprintf_chk@plt>
   1712c:	b	16fac <close_stdout@@Base+0x34cc>
   17130:	ldr	r1, [pc, #268]	; 17244 <close_stdout@@Base+0x3764>
   17134:	mov	r2, #5
   17138:	mov	r0, #0
   1713c:	add	r1, pc, r1
   17140:	bl	1148c <dcgettext@plt>
   17144:	ldm	r4, {r3, ip}
   17148:	mov	r1, #1
   1714c:	str	ip, [sp]
   17150:	ldr	ip, [r4, #8]
   17154:	str	ip, [sp, #4]
   17158:	ldr	ip, [r4, #12]
   1715c:	str	ip, [sp, #8]
   17160:	ldr	ip, [r4, #16]
   17164:	str	ip, [sp, #12]
   17168:	ldr	ip, [r4, #20]
   1716c:	str	ip, [sp, #16]
   17170:	ldr	ip, [r4, #24]
   17174:	str	ip, [sp, #20]
   17178:	mov	r2, r0
   1717c:	mov	r0, r5
   17180:	bl	11690 <__fprintf_chk@plt>
   17184:	b	16fac <close_stdout@@Base+0x34cc>
   17188:	ldr	r1, [pc, #184]	; 17248 <close_stdout@@Base+0x3768>
   1718c:	mov	r2, #5
   17190:	mov	r0, #0
   17194:	add	r1, pc, r1
   17198:	bl	1148c <dcgettext@plt>
   1719c:	ldm	r4, {r3, ip}
   171a0:	mov	r1, #1
   171a4:	str	ip, [sp]
   171a8:	ldr	ip, [r4, #8]
   171ac:	str	ip, [sp, #4]
   171b0:	ldr	ip, [r4, #12]
   171b4:	str	ip, [sp, #8]
   171b8:	ldr	ip, [r4, #16]
   171bc:	str	ip, [sp, #12]
   171c0:	ldr	ip, [r4, #20]
   171c4:	str	ip, [sp, #16]
   171c8:	ldr	ip, [r4, #24]
   171cc:	str	ip, [sp, #20]
   171d0:	ldr	ip, [r4, #28]
   171d4:	str	ip, [sp, #24]
   171d8:	mov	r2, r0
   171dc:	mov	r0, r5
   171e0:	bl	11690 <__fprintf_chk@plt>
   171e4:	b	16fac <close_stdout@@Base+0x34cc>
   171e8:	str	r3, [sp]
   171ec:	mov	r3, r2
   171f0:	ldr	r2, [pc, #84]	; 1724c <close_stdout@@Base+0x376c>
   171f4:	mov	r1, #1
   171f8:	add	r2, pc, r2
   171fc:	bl	11690 <__fprintf_chk@plt>
   17200:	b	16ec4 <close_stdout@@Base+0x33e4>
   17204:	ldr	r1, [pc, #68]	; 17250 <close_stdout@@Base+0x3770>
   17208:	mov	r0, #0
   1720c:	add	r1, pc, r1
   17210:	b	16f54 <close_stdout@@Base+0x3474>
   17214:	andeq	r5, r1, r0, ror #2
   17218:	andeq	r3, r0, r0, asr #21
   1721c:	andeq	r3, r0, r0, asr #21
   17220:	andeq	r0, r0, ip, lsl #3
   17224:	muleq	r0, r0, sl
   17228:	andeq	r3, r0, ip, lsl ip
   1722c:	muleq	r0, ip, sl
   17230:	andeq	r3, r0, ip, ror sl
   17234:	andeq	r3, r0, r0, ror #20
   17238:	andeq	r3, r0, r0, asr #20
   1723c:	andeq	r3, r0, r0, lsr #20
   17240:	strdeq	r3, [r0], -ip
   17244:	ldrdeq	r3, [r0], -r4
   17248:	andeq	r3, r0, r8, lsr #19
   1724c:	muleq	r0, r0, r7
   17250:	muleq	r0, r4, r9
   17254:	push	{r4, r5, lr}
   17258:	sub	sp, sp, #12
   1725c:	ldr	r5, [sp, #24]
   17260:	ldr	ip, [r5]
   17264:	cmp	ip, #0
   17268:	beq	17284 <close_stdout@@Base+0x37a4>
   1726c:	mov	lr, r5
   17270:	mov	ip, #0
   17274:	ldr	r4, [lr, #4]!
   17278:	add	ip, ip, #1
   1727c:	cmp	r4, #0
   17280:	bne	17274 <close_stdout@@Base+0x3794>
   17284:	stm	sp, {r5, ip}
   17288:	bl	16e80 <close_stdout@@Base+0x33a0>
   1728c:	add	sp, sp, #12
   17290:	pop	{r4, r5, pc}
   17294:	push	{r4, r5, r6, r7, lr}
   17298:	sub	sp, sp, #60	; 0x3c
   1729c:	ldr	r4, [pc, #100]	; 17308 <close_stdout@@Base+0x3828>
   172a0:	mov	ip, #0
   172a4:	ldr	r5, [pc, #96]	; 1730c <close_stdout@@Base+0x382c>
   172a8:	mov	lr, ip
   172ac:	add	r4, pc, r4
   172b0:	ldr	r6, [sp, #80]	; 0x50
   172b4:	ldr	r7, [r4, r5]
   172b8:	add	r5, sp, #12
   172bc:	ldr	r4, [r7]
   172c0:	str	r4, [sp, #52]	; 0x34
   172c4:	ldr	r4, [r6, ip]
   172c8:	cmp	r4, #0
   172cc:	str	r4, [r5, ip]
   172d0:	beq	172e4 <close_stdout@@Base+0x3804>
   172d4:	add	lr, lr, #1
   172d8:	add	ip, ip, #4
   172dc:	cmp	lr, #10
   172e0:	bne	172c4 <close_stdout@@Base+0x37e4>
   172e4:	stm	sp, {r5, lr}
   172e8:	bl	16e80 <close_stdout@@Base+0x33a0>
   172ec:	ldr	r2, [sp, #52]	; 0x34
   172f0:	ldr	r3, [r7]
   172f4:	cmp	r2, r3
   172f8:	bne	17304 <close_stdout@@Base+0x3824>
   172fc:	add	sp, sp, #60	; 0x3c
   17300:	pop	{r4, r5, r6, r7, pc}
   17304:	bl	11498 <__stack_chk_fail@plt>
   17308:	andeq	r4, r1, ip, asr #26
   1730c:	andeq	r0, r0, ip, asr r1
   17310:	push	{r3}		; (str r3, [sp, #-4]!)
   17314:	push	{r4, lr}
   17318:	sub	sp, sp, #20
   1731c:	ldr	lr, [pc, #72]	; 1736c <close_stdout@@Base+0x388c>
   17320:	add	ip, sp, #32
   17324:	ldr	r4, [pc, #68]	; 17370 <close_stdout@@Base+0x3890>
   17328:	add	lr, pc, lr
   1732c:	ldr	r3, [sp, #28]
   17330:	ldr	r4, [lr, r4]
   17334:	str	ip, [sp]
   17338:	str	ip, [sp, #8]
   1733c:	ldr	ip, [r4]
   17340:	str	ip, [sp, #12]
   17344:	bl	17294 <close_stdout@@Base+0x37b4>
   17348:	ldr	r2, [sp, #12]
   1734c:	ldr	r3, [r4]
   17350:	cmp	r2, r3
   17354:	bne	17368 <close_stdout@@Base+0x3888>
   17358:	add	sp, sp, #20
   1735c:	pop	{r4, lr}
   17360:	add	sp, sp, #4
   17364:	bx	lr
   17368:	bl	11498 <__stack_chk_fail@plt>
   1736c:	ldrdeq	r4, [r1], -r0
   17370:	andeq	r0, r0, ip, asr r1
   17374:	ldr	r1, [pc, #132]	; 17400 <close_stdout@@Base+0x3920>
   17378:	mov	r2, #5
   1737c:	push	{r4, lr}
   17380:	add	r1, pc, r1
   17384:	mov	r0, #0
   17388:	ldr	r4, [pc, #116]	; 17404 <close_stdout@@Base+0x3924>
   1738c:	bl	1148c <dcgettext@plt>
   17390:	ldr	r2, [pc, #112]	; 17408 <close_stdout@@Base+0x3928>
   17394:	add	r4, pc, r4
   17398:	add	r2, pc, r2
   1739c:	mov	r1, r0
   173a0:	mov	r0, #1
   173a4:	bl	1166c <__printf_chk@plt>
   173a8:	ldr	r1, [pc, #92]	; 1740c <close_stdout@@Base+0x392c>
   173ac:	mov	r2, #5
   173b0:	mov	r0, #0
   173b4:	add	r1, pc, r1
   173b8:	bl	1148c <dcgettext@plt>
   173bc:	ldr	r2, [pc, #76]	; 17410 <close_stdout@@Base+0x3930>
   173c0:	ldr	r3, [pc, #76]	; 17414 <close_stdout@@Base+0x3934>
   173c4:	add	r2, pc, r2
   173c8:	add	r3, pc, r3
   173cc:	mov	r1, r0
   173d0:	mov	r0, #1
   173d4:	bl	1166c <__printf_chk@plt>
   173d8:	ldr	r1, [pc, #56]	; 17418 <close_stdout@@Base+0x3938>
   173dc:	mov	r0, #0
   173e0:	mov	r2, #5
   173e4:	add	r1, pc, r1
   173e8:	bl	1148c <dcgettext@plt>
   173ec:	ldr	r3, [pc, #40]	; 1741c <close_stdout@@Base+0x393c>
   173f0:	ldr	r3, [r4, r3]
   173f4:	pop	{r4, lr}
   173f8:	ldr	r1, [r3]
   173fc:	b	113cc <fputs_unlocked@plt>
   17400:	andeq	r3, r0, ip, asr r8
   17404:	andeq	r4, r1, r4, ror #24
   17408:	andeq	r3, r0, ip, asr r8
   1740c:	andeq	r3, r0, r8, asr r8
   17410:	strdeq	r3, [r0], -r8
   17414:	andeq	r3, r0, r4, lsl #2
   17418:	andeq	r3, r0, ip, lsr r8
   1741c:	andeq	r0, r0, ip, ror r1
   17420:	push	{r4, lr}
   17424:	mov	r4, r0
   17428:	bl	11570 <malloc@plt>
   1742c:	rsbs	r3, r0, #1
   17430:	movcc	r3, #0
   17434:	cmp	r4, #0
   17438:	moveq	r3, #0
   1743c:	cmp	r3, #0
   17440:	popeq	{r4, pc}
   17444:	bl	17634 <close_stdout@@Base+0x3b54>
   17448:	push	{r3, r4, r5, lr}
   1744c:	mov	r4, r0
   17450:	mvn	r0, #0
   17454:	mov	r5, r1
   17458:	bl	18648 <close_stdout@@Base+0x4b68>
   1745c:	cmp	r0, r4
   17460:	bcc	17470 <close_stdout@@Base+0x3990>
   17464:	mul	r0, r4, r5
   17468:	pop	{r3, r4, r5, lr}
   1746c:	b	17420 <close_stdout@@Base+0x3940>
   17470:	bl	17634 <close_stdout@@Base+0x3b54>
   17474:	b	17420 <close_stdout@@Base+0x3940>
   17478:	rsbs	r3, r1, #1
   1747c:	push	{r4, lr}
   17480:	movcc	r3, #0
   17484:	cmp	r0, #0
   17488:	mov	r4, r1
   1748c:	moveq	r3, #0
   17490:	cmp	r3, #0
   17494:	bne	174b8 <close_stdout@@Base+0x39d8>
   17498:	bl	114b0 <realloc@plt>
   1749c:	rsbs	r3, r0, #1
   174a0:	movcc	r3, #0
   174a4:	cmp	r4, #0
   174a8:	moveq	r3, #0
   174ac:	cmp	r3, #0
   174b0:	popeq	{r4, pc}
   174b4:	bl	17634 <close_stdout@@Base+0x3b54>
   174b8:	bl	1142c <free@plt>
   174bc:	mov	r0, #0
   174c0:	pop	{r4, pc}
   174c4:	push	{r4, r5, r6, lr}
   174c8:	mov	r5, r1
   174cc:	mov	r6, r0
   174d0:	mov	r1, r2
   174d4:	mvn	r0, #0
   174d8:	mov	r4, r2
   174dc:	bl	18648 <close_stdout@@Base+0x4b68>
   174e0:	cmp	r0, r5
   174e4:	bcc	174f8 <close_stdout@@Base+0x3a18>
   174e8:	mov	r0, r6
   174ec:	mul	r1, r5, r4
   174f0:	pop	{r4, r5, r6, lr}
   174f4:	b	17478 <close_stdout@@Base+0x3998>
   174f8:	bl	17634 <close_stdout@@Base+0x3b54>
   174fc:	push	{r3, r4, r5, r6, r7, lr}
   17500:	subs	r7, r0, #0
   17504:	mov	r5, r1
   17508:	mov	r6, r2
   1750c:	ldr	r4, [r1]
   17510:	beq	17548 <close_stdout@@Base+0x3a68>
   17514:	movw	r0, #43690	; 0xaaaa
   17518:	mov	r1, r2
   1751c:	bfi	r0, r0, #16, #16
   17520:	bl	18648 <close_stdout@@Base+0x4b68>
   17524:	cmp	r4, r0
   17528:	addcc	r3, r4, #1
   1752c:	addcc	r4, r4, r3, lsr #1
   17530:	bcs	1756c <close_stdout@@Base+0x3a8c>
   17534:	str	r4, [r5]
   17538:	mov	r0, r7
   1753c:	mul	r1, r6, r4
   17540:	pop	{r3, r4, r5, r6, r7, lr}
   17544:	b	17478 <close_stdout@@Base+0x3998>
   17548:	cmp	r4, #0
   1754c:	bne	17534 <close_stdout@@Base+0x3a54>
   17550:	mov	r0, #64	; 0x40
   17554:	mov	r1, r2
   17558:	bl	18648 <close_stdout@@Base+0x4b68>
   1755c:	cmp	r0, #0
   17560:	movne	r4, r0
   17564:	addeq	r4, r0, #1
   17568:	b	17534 <close_stdout@@Base+0x3a54>
   1756c:	bl	17634 <close_stdout@@Base+0x3b54>
   17570:	cmp	r0, #0
   17574:	push	{r3, lr}
   17578:	ldr	r3, [r1]
   1757c:	beq	175a8 <close_stdout@@Base+0x3ac8>
   17580:	movw	r2, #43689	; 0xaaa9
   17584:	movt	r2, #43690	; 0xaaaa
   17588:	cmp	r3, r2
   1758c:	addls	r2, r3, #1
   17590:	addls	r3, r3, r2, lsr #1
   17594:	bhi	175c0 <close_stdout@@Base+0x3ae0>
   17598:	str	r3, [r1]
   1759c:	mov	r1, r3
   175a0:	pop	{r3, lr}
   175a4:	b	17478 <close_stdout@@Base+0x3998>
   175a8:	cmp	r3, #0
   175ac:	moveq	r3, #64	; 0x40
   175b0:	str	r3, [r1]
   175b4:	mov	r1, r3
   175b8:	pop	{r3, lr}
   175bc:	b	17478 <close_stdout@@Base+0x3998>
   175c0:	bl	17634 <close_stdout@@Base+0x3b54>
   175c4:	push	{r4, lr}
   175c8:	mov	r4, r0
   175cc:	bl	17420 <close_stdout@@Base+0x3940>
   175d0:	mov	r2, r4
   175d4:	mov	r1, #0
   175d8:	pop	{r4, lr}
   175dc:	b	11654 <memset@plt>
   175e0:	push	{r3, lr}
   175e4:	bl	113c0 <calloc@plt>
   175e8:	cmp	r0, #0
   175ec:	popne	{r3, pc}
   175f0:	bl	17634 <close_stdout@@Base+0x3b54>
   175f4:	push	{r3, r4, r5, lr}
   175f8:	mov	r4, r1
   175fc:	mov	r5, r0
   17600:	mov	r0, r1
   17604:	bl	17420 <close_stdout@@Base+0x3940>
   17608:	mov	r1, r5
   1760c:	mov	r2, r4
   17610:	pop	{r3, r4, r5, lr}
   17614:	b	11444 <memcpy@plt>
   17618:	push	{r4, lr}
   1761c:	mov	r4, r0
   17620:	bl	115dc <strlen@plt>
   17624:	add	r1, r0, #1
   17628:	mov	r0, r4
   1762c:	pop	{r4, lr}
   17630:	b	175f4 <close_stdout@@Base+0x3b14>
   17634:	ldr	r3, [pc, #64]	; 1767c <close_stdout@@Base+0x3b9c>
   17638:	mov	r2, #5
   1763c:	ldr	ip, [pc, #60]	; 17680 <close_stdout@@Base+0x3ba0>
   17640:	mov	r0, #0
   17644:	add	r3, pc, r3
   17648:	ldr	r1, [pc, #52]	; 17684 <close_stdout@@Base+0x3ba4>
   1764c:	push	{r4, lr}
   17650:	add	r1, pc, r1
   17654:	ldr	r3, [r3, ip]
   17658:	ldr	r4, [r3]
   1765c:	bl	1148c <dcgettext@plt>
   17660:	ldr	r2, [pc, #32]	; 17688 <close_stdout@@Base+0x3ba8>
   17664:	mov	r1, #0
   17668:	add	r2, pc, r2
   1766c:	mov	r3, r0
   17670:	mov	r0, r4
   17674:	bl	1154c <error@plt>
   17678:	bl	11768 <abort@plt>
   1767c:			; <UNDEFINED> instruction: 0x000149b4
   17680:	andeq	r0, r0, r0, lsl #3
   17684:	andeq	r3, r0, r0, asr #12
   17688:	andeq	r3, r0, r4, lsr #3
   1768c:	ldr	ip, [pc, #1852]	; 17dd0 <close_stdout@@Base+0x42f0>
   17690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17694:	mov	fp, r2
   17698:	ldr	r2, [pc, #1844]	; 17dd4 <close_stdout@@Base+0x42f4>
   1769c:	add	ip, pc, ip
   176a0:	mov	r9, r3
   176a4:	sub	sp, sp, #36	; 0x24
   176a8:	mov	r3, ip
   176ac:	cmp	fp, #36	; 0x24
   176b0:	ldr	sl, [ip, r2]
   176b4:	mov	r5, r0
   176b8:	mov	r8, r1
   176bc:	ldr	r6, [sp, #72]	; 0x48
   176c0:	ldr	r3, [sl]
   176c4:	str	r3, [sp, #28]
   176c8:	bhi	17db0 <close_stdout@@Base+0x42d0>
   176cc:	cmp	r1, #0
   176d0:	addeq	r8, sp, #24
   176d4:	bl	115b8 <__ctype_b_loc@plt>
   176d8:	ldrb	r3, [r5]
   176dc:	mov	r1, r5
   176e0:	ldr	r0, [r0]
   176e4:	b	176ec <close_stdout@@Base+0x3c0c>
   176e8:	ldrb	r3, [r1, #1]!
   176ec:	lsl	r2, r3, #1
   176f0:	ldrh	r4, [r0, r2]
   176f4:	and	r4, r4, #8192	; 0x2000
   176f8:	uxth	r4, r4
   176fc:	cmp	r4, #0
   17700:	bne	176e8 <close_stdout@@Base+0x3c08>
   17704:	cmp	r3, #45	; 0x2d
   17708:	bne	17728 <close_stdout@@Base+0x3c48>
   1770c:	mov	r0, #4
   17710:	ldr	r2, [sp, #28]
   17714:	ldr	r3, [sl]
   17718:	cmp	r2, r3
   1771c:	bne	17dac <close_stdout@@Base+0x42cc>
   17720:	add	sp, sp, #36	; 0x24
   17724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17728:	bl	11618 <__errno_location@plt>
   1772c:	mov	r2, fp
   17730:	mov	r1, r8
   17734:	mov	r3, r4
   17738:	str	r4, [r0]
   1773c:	mov	r7, r0
   17740:	mov	r0, r5
   17744:	bl	11450 <__strtoull_internal@plt>
   17748:	ldr	fp, [r8]
   1774c:	cmp	fp, r5
   17750:	strd	r0, [sp]
   17754:	beq	178d0 <close_stdout@@Base+0x3df0>
   17758:	ldr	ip, [r7]
   1775c:	cmp	ip, #0
   17760:	bne	1778c <close_stdout@@Base+0x3cac>
   17764:	mov	r7, ip
   17768:	cmp	r6, #0
   1776c:	beq	17d3c <close_stdout@@Base+0x425c>
   17770:	ldrb	r5, [fp]
   17774:	cmp	r5, #0
   17778:	bne	1779c <close_stdout@@Base+0x3cbc>
   1777c:	ldrd	r2, [sp]
   17780:	mov	r0, r7
   17784:	strd	r2, [r9]
   17788:	b	17710 <close_stdout@@Base+0x3c30>
   1778c:	cmp	ip, #34	; 0x22
   17790:	moveq	r7, #1
   17794:	bne	1770c <close_stdout@@Base+0x3c2c>
   17798:	b	17768 <close_stdout@@Base+0x3c88>
   1779c:	mov	r0, r6
   177a0:	mov	r1, r5
   177a4:	bl	115e8 <strchr@plt>
   177a8:	cmp	r0, #0
   177ac:	beq	1790c <close_stdout@@Base+0x3e2c>
   177b0:	mov	r0, r6
   177b4:	mov	r1, #48	; 0x30
   177b8:	bl	115e8 <strchr@plt>
   177bc:	cmp	r0, #0
   177c0:	beq	177e0 <close_stdout@@Base+0x3d00>
   177c4:	ldrb	r3, [fp, #1]
   177c8:	cmp	r3, #68	; 0x44
   177cc:	beq	17d64 <close_stdout@@Base+0x4284>
   177d0:	cmp	r3, #105	; 0x69
   177d4:	beq	17d4c <close_stdout@@Base+0x426c>
   177d8:	cmp	r3, #66	; 0x42
   177dc:	beq	17d64 <close_stdout@@Base+0x4284>
   177e0:	mov	r6, #1
   177e4:	mov	r4, #1024	; 0x400
   177e8:	sub	r5, r5, #66	; 0x42
   177ec:	cmp	r5, #53	; 0x35
   177f0:	addls	pc, pc, r5, lsl #2
   177f4:	b	1790c <close_stdout@@Base+0x3e2c>
   177f8:	b	17bb4 <close_stdout@@Base+0x40d4>
   177fc:	b	1790c <close_stdout@@Base+0x3e2c>
   17800:	b	1790c <close_stdout@@Base+0x3e2c>
   17804:	b	17b48 <close_stdout@@Base+0x4068>
   17808:	b	1790c <close_stdout@@Base+0x3e2c>
   1780c:	b	17adc <close_stdout@@Base+0x3ffc>
   17810:	b	1790c <close_stdout@@Base+0x3e2c>
   17814:	b	1790c <close_stdout@@Base+0x3e2c>
   17818:	b	1790c <close_stdout@@Base+0x3e2c>
   1781c:	b	17a84 <close_stdout@@Base+0x3fa4>
   17820:	b	1790c <close_stdout@@Base+0x3e2c>
   17824:	b	17c5c <close_stdout@@Base+0x417c>
   17828:	b	1790c <close_stdout@@Base+0x3e2c>
   1782c:	b	1790c <close_stdout@@Base+0x3e2c>
   17830:	b	17bf0 <close_stdout@@Base+0x4110>
   17834:	b	1790c <close_stdout@@Base+0x3e2c>
   17838:	b	1790c <close_stdout@@Base+0x3e2c>
   1783c:	b	1790c <close_stdout@@Base+0x3e2c>
   17840:	b	17cd0 <close_stdout@@Base+0x41f0>
   17844:	b	1790c <close_stdout@@Base+0x3e2c>
   17848:	b	1790c <close_stdout@@Base+0x3e2c>
   1784c:	b	1790c <close_stdout@@Base+0x3e2c>
   17850:	b	1790c <close_stdout@@Base+0x3e2c>
   17854:	b	17a18 <close_stdout@@Base+0x3f38>
   17858:	b	179a0 <close_stdout@@Base+0x3ec0>
   1785c:	b	1790c <close_stdout@@Base+0x3e2c>
   17860:	b	1790c <close_stdout@@Base+0x3e2c>
   17864:	b	1790c <close_stdout@@Base+0x3e2c>
   17868:	b	1790c <close_stdout@@Base+0x3e2c>
   1786c:	b	1790c <close_stdout@@Base+0x3e2c>
   17870:	b	1790c <close_stdout@@Base+0x3e2c>
   17874:	b	1790c <close_stdout@@Base+0x3e2c>
   17878:	b	17964 <close_stdout@@Base+0x3e84>
   1787c:	b	1791c <close_stdout@@Base+0x3e3c>
   17880:	b	1790c <close_stdout@@Base+0x3e2c>
   17884:	b	1790c <close_stdout@@Base+0x3e2c>
   17888:	b	1790c <close_stdout@@Base+0x3e2c>
   1788c:	b	17adc <close_stdout@@Base+0x3ffc>
   17890:	b	1790c <close_stdout@@Base+0x3e2c>
   17894:	b	1790c <close_stdout@@Base+0x3e2c>
   17898:	b	1790c <close_stdout@@Base+0x3e2c>
   1789c:	b	17a84 <close_stdout@@Base+0x3fa4>
   178a0:	b	1790c <close_stdout@@Base+0x3e2c>
   178a4:	b	17c5c <close_stdout@@Base+0x417c>
   178a8:	b	1790c <close_stdout@@Base+0x3e2c>
   178ac:	b	1790c <close_stdout@@Base+0x3e2c>
   178b0:	b	1790c <close_stdout@@Base+0x3e2c>
   178b4:	b	1790c <close_stdout@@Base+0x3e2c>
   178b8:	b	1790c <close_stdout@@Base+0x3e2c>
   178bc:	b	1790c <close_stdout@@Base+0x3e2c>
   178c0:	b	17cd0 <close_stdout@@Base+0x41f0>
   178c4:	b	1790c <close_stdout@@Base+0x3e2c>
   178c8:	b	1790c <close_stdout@@Base+0x3e2c>
   178cc:	b	1793c <close_stdout@@Base+0x3e5c>
   178d0:	cmp	r6, #0
   178d4:	beq	1770c <close_stdout@@Base+0x3c2c>
   178d8:	ldrb	r5, [r5]
   178dc:	cmp	r5, #0
   178e0:	beq	1770c <close_stdout@@Base+0x3c2c>
   178e4:	mov	r0, r6
   178e8:	mov	r1, r5
   178ec:	bl	115e8 <strchr@plt>
   178f0:	cmp	r0, #0
   178f4:	beq	1770c <close_stdout@@Base+0x3c2c>
   178f8:	mov	r0, #1
   178fc:	mov	r1, #0
   17900:	mov	r7, r4
   17904:	strd	r0, [sp]
   17908:	b	177b0 <close_stdout@@Base+0x3cd0>
   1790c:	ldrd	r2, [sp]
   17910:	orr	r0, r7, #2
   17914:	strd	r2, [r9]
   17918:	b	17710 <close_stdout@@Base+0x3c30>
   1791c:	mov	r3, #0
   17920:	add	r2, fp, r6
   17924:	str	r2, [r8]
   17928:	ldrb	r2, [fp, r6]
   1792c:	orr	r7, r7, r3
   17930:	cmp	r2, #0
   17934:	orrne	r7, r7, #2
   17938:	b	1777c <close_stdout@@Base+0x3c9c>
   1793c:	ldrd	r2, [sp]
   17940:	cmp	r2, #0
   17944:	sbcs	r3, r3, #0
   17948:	blt	17d84 <close_stdout@@Base+0x42a4>
   1794c:	ldrd	r0, [sp]
   17950:	mov	r3, #0
   17954:	adds	r0, r0, r0
   17958:	adc	r1, r1, r1
   1795c:	strd	r0, [sp]
   17960:	b	17920 <close_stdout@@Base+0x3e40>
   17964:	ldrd	r0, [sp]
   17968:	movw	r3, #65535	; 0xffff
   1796c:	movt	r3, #127	; 0x7f
   17970:	mvn	r2, #0
   17974:	cmp	r1, r3
   17978:	cmpeq	r0, r2
   1797c:	bhi	17d84 <close_stdout@@Base+0x42a4>
   17980:	lsl	r2, r1, #9
   17984:	ldr	r1, [sp]
   17988:	lsl	r3, r0, #9
   1798c:	str	r3, [sp]
   17990:	mov	r3, #0
   17994:	orr	r2, r2, r1, lsr #23
   17998:	str	r2, [sp, #4]
   1799c:	b	17920 <close_stdout@@Base+0x3e40>
   179a0:	asr	r5, r4, #31
   179a4:	mov	r2, r4
   179a8:	mvn	r0, #0
   179ac:	mvn	r1, #0
   179b0:	mov	r3, r5
   179b4:	bl	18c54 <close_stdout@@Base+0x5174>
   179b8:	mov	ip, r7
   179bc:	str	r6, [sp, #20]
   179c0:	mov	r2, #7
   179c4:	ldrd	r6, [sp]
   179c8:	mov	r3, #0
   179cc:	strd	r0, [sp, #8]
   179d0:	ldrd	r0, [sp, #8]
   179d4:	cmp	r1, r7
   179d8:	cmpeq	r0, r6
   179dc:	mulcs	r0, r6, r5
   179e0:	movcs	r1, #0
   179e4:	mlacs	r0, r4, r7, r0
   179e8:	movcc	r1, #1
   179ec:	umullcs	r6, r7, r6, r4
   179f0:	mvncc	r6, #0
   179f4:	mvncc	r7, #0
   179f8:	orr	r3, r3, r1
   179fc:	addcs	r7, r0, r7
   17a00:	subs	r2, r2, #1
   17a04:	bne	179d0 <close_stdout@@Base+0x3ef0>
   17a08:	strd	r6, [sp]
   17a0c:	mov	r7, ip
   17a10:	ldr	r6, [sp, #20]
   17a14:	b	17920 <close_stdout@@Base+0x3e40>
   17a18:	asr	r5, r4, #31
   17a1c:	mov	r2, r4
   17a20:	mvn	r0, #0
   17a24:	mvn	r1, #0
   17a28:	mov	r3, r5
   17a2c:	bl	18c54 <close_stdout@@Base+0x5174>
   17a30:	mov	ip, r7
   17a34:	str	r6, [sp, #20]
   17a38:	mov	r2, #8
   17a3c:	ldrd	r6, [sp]
   17a40:	mov	r3, #0
   17a44:	strd	r0, [sp, #8]
   17a48:	ldrd	r0, [sp, #8]
   17a4c:	cmp	r1, r7
   17a50:	cmpeq	r0, r6
   17a54:	mulcs	r0, r6, r5
   17a58:	movcs	r1, #0
   17a5c:	mlacs	r0, r4, r7, r0
   17a60:	movcc	r1, #1
   17a64:	umullcs	r6, r7, r6, r4
   17a68:	mvncc	r6, #0
   17a6c:	mvncc	r7, #0
   17a70:	orr	r3, r3, r1
   17a74:	addcs	r7, r0, r7
   17a78:	subs	r2, r2, #1
   17a7c:	bne	17a48 <close_stdout@@Base+0x3f68>
   17a80:	b	17a08 <close_stdout@@Base+0x3f28>
   17a84:	mov	r2, r4
   17a88:	asr	r3, r4, #31
   17a8c:	mvn	r0, #0
   17a90:	mvn	r1, #0
   17a94:	strd	r2, [sp, #8]
   17a98:	bl	18c54 <close_stdout@@Base+0x5174>
   17a9c:	ldrd	r2, [sp]
   17aa0:	cmp	r3, r1
   17aa4:	cmpeq	r2, r0
   17aa8:	bhi	17d70 <close_stdout@@Base+0x4290>
   17aac:	ldr	r3, [sp]
   17ab0:	ldr	ip, [sp, #12]
   17ab4:	ldr	r0, [sp, #4]
   17ab8:	ldr	r1, [sp]
   17abc:	mul	r2, r3, ip
   17ac0:	mov	r3, #0
   17ac4:	mla	r2, r4, r0, r2
   17ac8:	umull	r0, r1, r1, r4
   17acc:	add	r2, r2, r1
   17ad0:	strd	r0, [sp]
   17ad4:	str	r2, [sp, #4]
   17ad8:	b	17920 <close_stdout@@Base+0x3e40>
   17adc:	asr	r5, r4, #31
   17ae0:	mov	r2, r4
   17ae4:	mvn	r0, #0
   17ae8:	mvn	r1, #0
   17aec:	mov	r3, r5
   17af0:	bl	18c54 <close_stdout@@Base+0x5174>
   17af4:	mov	ip, r7
   17af8:	str	r6, [sp, #20]
   17afc:	mov	r2, #3
   17b00:	ldrd	r6, [sp]
   17b04:	mov	r3, #0
   17b08:	strd	r0, [sp, #8]
   17b0c:	ldrd	r0, [sp, #8]
   17b10:	cmp	r1, r7
   17b14:	cmpeq	r0, r6
   17b18:	mulcs	r0, r6, r5
   17b1c:	movcs	r1, #0
   17b20:	mlacs	r0, r4, r7, r0
   17b24:	movcc	r1, #1
   17b28:	umullcs	r6, r7, r6, r4
   17b2c:	mvncc	r6, #0
   17b30:	mvncc	r7, #0
   17b34:	orr	r3, r3, r1
   17b38:	addcs	r7, r0, r7
   17b3c:	subs	r2, r2, #1
   17b40:	bne	17b0c <close_stdout@@Base+0x402c>
   17b44:	b	17a08 <close_stdout@@Base+0x3f28>
   17b48:	asr	r5, r4, #31
   17b4c:	mov	r2, r4
   17b50:	mvn	r0, #0
   17b54:	mvn	r1, #0
   17b58:	mov	r3, r5
   17b5c:	bl	18c54 <close_stdout@@Base+0x5174>
   17b60:	mov	ip, r7
   17b64:	str	r6, [sp, #20]
   17b68:	mov	r2, #6
   17b6c:	ldrd	r6, [sp]
   17b70:	mov	r3, #0
   17b74:	strd	r0, [sp, #8]
   17b78:	ldrd	r0, [sp, #8]
   17b7c:	cmp	r1, r7
   17b80:	cmpeq	r0, r6
   17b84:	mulcs	r0, r6, r5
   17b88:	movcs	r1, #0
   17b8c:	mlacs	r0, r4, r7, r0
   17b90:	movcc	r1, #1
   17b94:	umullcs	r6, r7, r6, r4
   17b98:	mvncc	r6, #0
   17b9c:	mvncc	r7, #0
   17ba0:	orr	r3, r3, r1
   17ba4:	addcs	r7, r0, r7
   17ba8:	subs	r2, r2, #1
   17bac:	bne	17b78 <close_stdout@@Base+0x4098>
   17bb0:	b	17a08 <close_stdout@@Base+0x3f28>
   17bb4:	ldrd	r0, [sp]
   17bb8:	movw	r3, #65535	; 0xffff
   17bbc:	movt	r3, #63	; 0x3f
   17bc0:	mvn	r2, #0
   17bc4:	cmp	r1, r3
   17bc8:	cmpeq	r0, r2
   17bcc:	bhi	17d70 <close_stdout@@Base+0x4290>
   17bd0:	lsl	r2, r1, #10
   17bd4:	ldr	r1, [sp]
   17bd8:	lsl	r3, r0, #10
   17bdc:	str	r3, [sp]
   17be0:	mov	r3, #0
   17be4:	orr	r2, r2, r1, lsr #22
   17be8:	str	r2, [sp, #4]
   17bec:	b	17920 <close_stdout@@Base+0x3e40>
   17bf0:	asr	r5, r4, #31
   17bf4:	mov	r2, r4
   17bf8:	mvn	r0, #0
   17bfc:	mvn	r1, #0
   17c00:	mov	r3, r5
   17c04:	bl	18c54 <close_stdout@@Base+0x5174>
   17c08:	mov	ip, r7
   17c0c:	str	r6, [sp, #20]
   17c10:	mov	r2, #5
   17c14:	ldrd	r6, [sp]
   17c18:	mov	r3, #0
   17c1c:	strd	r0, [sp, #8]
   17c20:	ldrd	r0, [sp, #8]
   17c24:	cmp	r1, r7
   17c28:	cmpeq	r0, r6
   17c2c:	mulcs	r0, r6, r5
   17c30:	movcs	r1, #0
   17c34:	mlacs	r0, r4, r7, r0
   17c38:	movcc	r1, #1
   17c3c:	umullcs	r6, r7, r6, r4
   17c40:	mvncc	r6, #0
   17c44:	mvncc	r7, #0
   17c48:	orr	r3, r3, r1
   17c4c:	addcs	r7, r0, r7
   17c50:	subs	r2, r2, #1
   17c54:	bne	17c20 <close_stdout@@Base+0x4140>
   17c58:	b	17a08 <close_stdout@@Base+0x3f28>
   17c5c:	mov	r2, r4
   17c60:	asr	r3, r4, #31
   17c64:	mvn	r0, #0
   17c68:	mvn	r1, #0
   17c6c:	strd	r2, [sp, #8]
   17c70:	bl	18c54 <close_stdout@@Base+0x5174>
   17c74:	ldrd	r2, [sp]
   17c78:	cmp	r3, r1
   17c7c:	cmpeq	r2, r0
   17c80:	bhi	17d98 <close_stdout@@Base+0x42b8>
   17c84:	ldr	ip, [sp, #4]
   17c88:	mul	r3, r4, ip
   17c8c:	ldr	ip, [sp, #12]
   17c90:	mla	r3, r2, ip, r3
   17c94:	ldr	r2, [sp]
   17c98:	umull	r4, r5, r4, r2
   17c9c:	add	r5, r3, r5
   17ca0:	cmp	r1, r5
   17ca4:	cmpeq	r0, r4
   17ca8:	bcc	17d98 <close_stdout@@Base+0x42b8>
   17cac:	mul	r2, r4, ip
   17cb0:	ldr	ip, [sp, #8]
   17cb4:	mov	r3, #0
   17cb8:	umull	r0, r1, r4, ip
   17cbc:	mla	r2, ip, r5, r2
   17cc0:	strd	r0, [sp]
   17cc4:	add	r2, r2, r1
   17cc8:	str	r2, [sp, #4]
   17ccc:	b	17920 <close_stdout@@Base+0x3e40>
   17cd0:	asr	r5, r4, #31
   17cd4:	mov	r2, r4
   17cd8:	mvn	r0, #0
   17cdc:	mvn	r1, #0
   17ce0:	mov	r3, r5
   17ce4:	bl	18c54 <close_stdout@@Base+0x5174>
   17ce8:	mov	ip, r7
   17cec:	str	r6, [sp, #20]
   17cf0:	mov	r2, #4
   17cf4:	ldrd	r6, [sp]
   17cf8:	mov	r3, #0
   17cfc:	strd	r0, [sp, #8]
   17d00:	ldrd	r0, [sp, #8]
   17d04:	cmp	r1, r7
   17d08:	cmpeq	r0, r6
   17d0c:	mulcs	r0, r6, r5
   17d10:	movcs	r1, #0
   17d14:	mlacs	r0, r4, r7, r0
   17d18:	movcc	r1, #1
   17d1c:	umullcs	r6, r7, r6, r4
   17d20:	mvncc	r6, #0
   17d24:	mvncc	r7, #0
   17d28:	orr	r3, r3, r1
   17d2c:	addcs	r7, r0, r7
   17d30:	subs	r2, r2, #1
   17d34:	bne	17d00 <close_stdout@@Base+0x4220>
   17d38:	b	17a08 <close_stdout@@Base+0x3f28>
   17d3c:	ldrd	r0, [sp]
   17d40:	strd	r0, [r9]
   17d44:	mov	r0, r7
   17d48:	b	17710 <close_stdout@@Base+0x3c30>
   17d4c:	ldrb	r3, [fp, #2]
   17d50:	mov	r4, #1024	; 0x400
   17d54:	cmp	r3, #66	; 0x42
   17d58:	moveq	r6, #3
   17d5c:	movne	r6, #1
   17d60:	b	177e8 <close_stdout@@Base+0x3d08>
   17d64:	mov	r6, #2
   17d68:	mov	r4, #1000	; 0x3e8
   17d6c:	b	177e8 <close_stdout@@Base+0x3d08>
   17d70:	mvn	r3, #0
   17d74:	mvn	r2, #0
   17d78:	strd	r2, [sp]
   17d7c:	mov	r3, #1
   17d80:	b	17920 <close_stdout@@Base+0x3e40>
   17d84:	mvn	r0, #0
   17d88:	mvn	r1, #0
   17d8c:	mov	r3, #1
   17d90:	strd	r0, [sp]
   17d94:	b	17920 <close_stdout@@Base+0x3e40>
   17d98:	mvn	r0, #0
   17d9c:	mvn	r1, #0
   17da0:	mov	r3, #1
   17da4:	strd	r0, [sp]
   17da8:	b	17920 <close_stdout@@Base+0x3e40>
   17dac:	bl	11498 <__stack_chk_fail@plt>
   17db0:	ldr	r0, [pc, #32]	; 17dd8 <close_stdout@@Base+0x42f8>
   17db4:	mov	r2, #96	; 0x60
   17db8:	ldr	r1, [pc, #28]	; 17ddc <close_stdout@@Base+0x42fc>
   17dbc:	ldr	r3, [pc, #28]	; 17de0 <close_stdout@@Base+0x4300>
   17dc0:	add	r0, pc, r0
   17dc4:	add	r1, pc, r1
   17dc8:	add	r3, pc, r3
   17dcc:	bl	1178c <__assert_fail@plt>
   17dd0:	andeq	r4, r1, ip, asr r9
   17dd4:	andeq	r0, r0, ip, asr r1
   17dd8:	strdeq	r2, [r0], -r0
   17ddc:	andeq	r2, r0, r4, lsl pc
   17de0:	ldrdeq	r2, [r0], -ip
   17de4:	push	{r4, r5, r6, lr}
   17de8:	sub	sp, sp, #8
   17dec:	mov	r4, r0
   17df0:	bl	11684 <fileno@plt>
   17df4:	cmp	r0, #0
   17df8:	mov	r0, r4
   17dfc:	blt	17e78 <close_stdout@@Base+0x4398>
   17e00:	bl	11588 <__freading@plt>
   17e04:	cmp	r0, #0
   17e08:	bne	17e44 <close_stdout@@Base+0x4364>
   17e0c:	mov	r0, r4
   17e10:	bl	17ff8 <close_stdout@@Base+0x4518>
   17e14:	cmp	r0, #0
   17e18:	beq	17e74 <close_stdout@@Base+0x4394>
   17e1c:	bl	11618 <__errno_location@plt>
   17e20:	ldr	r6, [r0]
   17e24:	mov	r5, r0
   17e28:	mov	r0, r4
   17e2c:	bl	1169c <fclose@plt>
   17e30:	cmp	r6, #0
   17e34:	mvnne	r0, #0
   17e38:	strne	r6, [r5]
   17e3c:	add	sp, sp, #8
   17e40:	pop	{r4, r5, r6, pc}
   17e44:	mov	r0, r4
   17e48:	bl	11684 <fileno@plt>
   17e4c:	mov	r1, #1
   17e50:	mov	r2, #0
   17e54:	mov	r3, #0
   17e58:	str	r1, [sp]
   17e5c:	bl	114f8 <lseek64@plt>
   17e60:	mvn	r2, #0
   17e64:	mvn	r3, #0
   17e68:	cmp	r1, r3
   17e6c:	cmpeq	r0, r2
   17e70:	bne	17e0c <close_stdout@@Base+0x432c>
   17e74:	mov	r0, r4
   17e78:	add	sp, sp, #8
   17e7c:	pop	{r4, r5, r6, lr}
   17e80:	b	1169c <fclose@plt>
   17e84:	push	{r1, r2, r3}
   17e88:	movw	ip, #1030	; 0x406
   17e8c:	ldr	r3, [pc, #336]	; 17fe4 <close_stdout@@Base+0x4504>
   17e90:	push	{r4, r5, r6, r7, r8, lr}
   17e94:	add	r3, pc, r3
   17e98:	ldr	lr, [pc, #328]	; 17fe8 <close_stdout@@Base+0x4508>
   17e9c:	sub	sp, sp, #12
   17ea0:	add	r2, sp, #40	; 0x28
   17ea4:	mov	r6, r0
   17ea8:	ldr	r1, [sp, #36]	; 0x24
   17eac:	ldr	r4, [r3, lr]
   17eb0:	cmp	r1, ip
   17eb4:	str	r2, [sp]
   17eb8:	ldr	r3, [r4]
   17ebc:	str	r3, [sp, #4]
   17ec0:	bne	17f44 <close_stdout@@Base+0x4464>
   17ec4:	ldr	r8, [pc, #288]	; 17fec <close_stdout@@Base+0x450c>
   17ec8:	add	r3, sp, #44	; 0x2c
   17ecc:	str	r3, [sp]
   17ed0:	add	r8, pc, r8
   17ed4:	ldr	r7, [sp, #40]	; 0x28
   17ed8:	ldr	r3, [r8]
   17edc:	mov	r2, r7
   17ee0:	cmp	r3, #0
   17ee4:	blt	17fd0 <close_stdout@@Base+0x44f0>
   17ee8:	bl	1160c <fcntl@plt>
   17eec:	subs	r5, r0, #0
   17ef0:	blt	17f54 <close_stdout@@Base+0x4474>
   17ef4:	ldr	r3, [pc, #244]	; 17ff0 <close_stdout@@Base+0x4510>
   17ef8:	mov	r2, #1
   17efc:	add	r3, pc, r3
   17f00:	str	r2, [r3]
   17f04:	cmp	r5, #0
   17f08:	blt	17f20 <close_stdout@@Base+0x4440>
   17f0c:	ldr	r3, [pc, #224]	; 17ff4 <close_stdout@@Base+0x4514>
   17f10:	add	r3, pc, r3
   17f14:	ldr	r3, [r3]
   17f18:	cmn	r3, #1
   17f1c:	beq	17f84 <close_stdout@@Base+0x44a4>
   17f20:	ldr	r2, [sp, #4]
   17f24:	mov	r0, r5
   17f28:	ldr	r3, [r4]
   17f2c:	cmp	r2, r3
   17f30:	bne	17fe0 <close_stdout@@Base+0x4500>
   17f34:	add	sp, sp, #12
   17f38:	pop	{r4, r5, r6, r7, r8, lr}
   17f3c:	add	sp, sp, #12
   17f40:	bx	lr
   17f44:	ldr	r2, [sp, #40]	; 0x28
   17f48:	bl	1160c <fcntl@plt>
   17f4c:	mov	r5, r0
   17f50:	b	17f20 <close_stdout@@Base+0x4440>
   17f54:	bl	11618 <__errno_location@plt>
   17f58:	ldr	r3, [r0]
   17f5c:	cmp	r3, #22
   17f60:	bne	17ef4 <close_stdout@@Base+0x4414>
   17f64:	mov	r0, r6
   17f68:	mov	r2, r7
   17f6c:	mov	r1, #0
   17f70:	bl	17e84 <close_stdout@@Base+0x43a4>
   17f74:	subs	r5, r0, #0
   17f78:	blt	17f20 <close_stdout@@Base+0x4440>
   17f7c:	mvn	r3, #0
   17f80:	str	r3, [r8]
   17f84:	mov	r0, r5
   17f88:	mov	r1, #1
   17f8c:	bl	1160c <fcntl@plt>
   17f90:	subs	r2, r0, #0
   17f94:	blt	17fb0 <close_stdout@@Base+0x44d0>
   17f98:	orr	r2, r2, #1
   17f9c:	mov	r0, r5
   17fa0:	mov	r1, #2
   17fa4:	bl	1160c <fcntl@plt>
   17fa8:	cmn	r0, #1
   17fac:	bne	17f20 <close_stdout@@Base+0x4440>
   17fb0:	bl	11618 <__errno_location@plt>
   17fb4:	ldr	r7, [r0]
   17fb8:	mov	r6, r0
   17fbc:	mov	r0, r5
   17fc0:	mvn	r5, #0
   17fc4:	bl	11774 <close@plt>
   17fc8:	str	r7, [r6]
   17fcc:	b	17f20 <close_stdout@@Base+0x4440>
   17fd0:	mov	r1, #0
   17fd4:	bl	17e84 <close_stdout@@Base+0x43a4>
   17fd8:	mov	r5, r0
   17fdc:	b	17f04 <close_stdout@@Base+0x4424>
   17fe0:	bl	11498 <__stack_chk_fail@plt>
   17fe4:	andeq	r4, r1, r4, ror #2
   17fe8:	andeq	r0, r0, ip, asr r1
   17fec:	andeq	r4, r1, r4, asr r4
   17ff0:	andeq	r4, r1, r8, lsr #8
   17ff4:	andeq	r4, r1, r4, lsl r4
   17ff8:	push	{r4, lr}
   17ffc:	subs	r4, r0, #0
   18000:	sub	sp, sp, #8
   18004:	beq	18014 <close_stdout@@Base+0x4534>
   18008:	bl	11588 <__freading@plt>
   1800c:	cmp	r0, #0
   18010:	bne	18024 <close_stdout@@Base+0x4544>
   18014:	mov	r0, r4
   18018:	add	sp, sp, #8
   1801c:	pop	{r4, lr}
   18020:	b	11408 <fflush@plt>
   18024:	ldr	r3, [r4]
   18028:	tst	r3, #256	; 0x100
   1802c:	beq	18014 <close_stdout@@Base+0x4534>
   18030:	mov	r3, #1
   18034:	mov	r0, r4
   18038:	str	r3, [sp]
   1803c:	mov	r2, #0
   18040:	mov	r3, #0
   18044:	bl	18058 <close_stdout@@Base+0x4578>
   18048:	mov	r0, r4
   1804c:	add	sp, sp, #8
   18050:	pop	{r4, lr}
   18054:	b	11408 <fflush@plt>
   18058:	push	{r4, r5, r6, r7, lr}
   1805c:	sub	sp, sp, #20
   18060:	ldmib	r0, {r1, ip}
   18064:	mov	r6, r0
   18068:	ldr	r4, [sp, #40]	; 0x28
   1806c:	cmp	ip, r1
   18070:	beq	18088 <close_stdout@@Base+0x45a8>
   18074:	str	r4, [sp, #40]	; 0x28
   18078:	mov	r0, r6
   1807c:	add	sp, sp, #20
   18080:	pop	{r4, r5, r6, r7, lr}
   18084:	b	116a8 <fseeko64@plt>
   18088:	ldr	ip, [r0, #20]
   1808c:	ldr	r1, [r0, #16]
   18090:	cmp	ip, r1
   18094:	bne	18074 <close_stdout@@Base+0x4594>
   18098:	ldr	r7, [r0, #36]	; 0x24
   1809c:	cmp	r7, #0
   180a0:	bne	18074 <close_stdout@@Base+0x4594>
   180a4:	str	r2, [sp, #12]
   180a8:	mvn	r5, #0
   180ac:	str	r3, [sp, #8]
   180b0:	bl	11684 <fileno@plt>
   180b4:	str	r4, [sp]
   180b8:	mvn	r4, #0
   180bc:	ldr	r2, [sp, #12]
   180c0:	ldr	r3, [sp, #8]
   180c4:	bl	114f8 <lseek64@plt>
   180c8:	mov	r2, r0
   180cc:	mov	r3, r1
   180d0:	cmp	r3, r5
   180d4:	cmpeq	r2, r4
   180d8:	beq	180f8 <close_stdout@@Base+0x4618>
   180dc:	ldr	r1, [r6]
   180e0:	mov	r0, r7
   180e4:	strd	r2, [r6, #80]	; 0x50
   180e8:	bic	r3, r1, #16
   180ec:	str	r3, [r6]
   180f0:	add	sp, sp, #20
   180f4:	pop	{r4, r5, r6, r7, pc}
   180f8:	mvn	r0, #0
   180fc:	b	180f0 <close_stdout@@Base+0x4610>
   18100:	push	{r4, r5, r6, lr}
   18104:	mov	r4, r0
   18108:	bl	11534 <__fpending@plt>
   1810c:	mov	r6, r0
   18110:	mov	r0, r4
   18114:	ldr	r4, [r4]
   18118:	bl	17de4 <close_stdout@@Base+0x4304>
   1811c:	and	r4, r4, #32
   18120:	adds	r5, r0, #0
   18124:	movne	r5, #1
   18128:	cmp	r4, #0
   1812c:	bne	1814c <close_stdout@@Base+0x466c>
   18130:	cmp	r5, #0
   18134:	beq	18144 <close_stdout@@Base+0x4664>
   18138:	cmp	r6, #0
   1813c:	beq	18168 <close_stdout@@Base+0x4688>
   18140:	mvn	r4, #0
   18144:	mov	r0, r4
   18148:	pop	{r4, r5, r6, pc}
   1814c:	cmp	r5, #0
   18150:	bne	18140 <close_stdout@@Base+0x4660>
   18154:	bl	11618 <__errno_location@plt>
   18158:	mvn	r4, #0
   1815c:	str	r5, [r0]
   18160:	mov	r0, r4
   18164:	pop	{r4, r5, r6, pc}
   18168:	bl	11618 <__errno_location@plt>
   1816c:	ldr	r4, [r0]
   18170:	subs	r4, r4, #9
   18174:	mvnne	r4, #0
   18178:	mov	r0, r4
   1817c:	pop	{r4, r5, r6, pc}
   18180:	push	{r4, r5, r6, lr}
   18184:	mov	r5, r1
   18188:	bl	11708 <fopen64@plt>
   1818c:	subs	r4, r0, #0
   18190:	beq	181a0 <close_stdout@@Base+0x46c0>
   18194:	bl	11684 <fileno@plt>
   18198:	cmp	r0, #2
   1819c:	bls	181a8 <close_stdout@@Base+0x46c8>
   181a0:	mov	r0, r4
   181a4:	pop	{r4, r5, r6, pc}
   181a8:	bl	1863c <close_stdout@@Base+0x4b5c>
   181ac:	subs	r6, r0, #0
   181b0:	blt	181dc <close_stdout@@Base+0x46fc>
   181b4:	mov	r0, r4
   181b8:	bl	17de4 <close_stdout@@Base+0x4304>
   181bc:	cmp	r0, #0
   181c0:	bne	181fc <close_stdout@@Base+0x471c>
   181c4:	mov	r1, r5
   181c8:	mov	r0, r6
   181cc:	bl	113b4 <fdopen@plt>
   181d0:	cmp	r0, #0
   181d4:	beq	181fc <close_stdout@@Base+0x471c>
   181d8:	pop	{r4, r5, r6, pc}
   181dc:	bl	11618 <__errno_location@plt>
   181e0:	ldr	r6, [r0]
   181e4:	mov	r5, r0
   181e8:	mov	r0, r4
   181ec:	bl	17de4 <close_stdout@@Base+0x4304>
   181f0:	mov	r0, #0
   181f4:	str	r6, [r5]
   181f8:	pop	{r4, r5, r6, pc}
   181fc:	bl	11618 <__errno_location@plt>
   18200:	ldr	r5, [r0]
   18204:	mov	r4, r0
   18208:	mov	r0, r6
   1820c:	bl	11774 <close@plt>
   18210:	mov	r0, #0
   18214:	str	r5, [r4]
   18218:	pop	{r4, r5, r6, pc}
   1821c:	ldr	r3, [pc, #984]	; 185fc <close_stdout@@Base+0x4b1c>
   18220:	mov	r0, #14
   18224:	ldr	r2, [pc, #980]	; 18600 <close_stdout@@Base+0x4b20>
   18228:	add	r3, pc, r3
   1822c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18230:	sub	sp, sp, #132	; 0x84
   18234:	ldr	r6, [r3, r2]
   18238:	ldr	r3, [r6]
   1823c:	str	r3, [sp, #124]	; 0x7c
   18240:	bl	116e4 <nl_langinfo@plt>
   18244:	subs	r5, r0, #0
   18248:	beq	182fc <close_stdout@@Base+0x481c>
   1824c:	ldr	r3, [pc, #944]	; 18604 <close_stdout@@Base+0x4b24>
   18250:	ldr	r4, [pc, r3]
   18254:	cmp	r4, #0
   18258:	beq	18308 <close_stdout@@Base+0x4828>
   1825c:	ldrb	r7, [r4]
   18260:	cmp	r7, #0
   18264:	bne	18298 <close_stdout@@Base+0x47b8>
   18268:	b	182d0 <close_stdout@@Base+0x47f0>
   1826c:	mov	r0, r4
   18270:	bl	115dc <strlen@plt>
   18274:	add	r0, r0, #1
   18278:	add	r7, r4, r0
   1827c:	mov	r0, r7
   18280:	bl	115dc <strlen@plt>
   18284:	add	r0, r0, #1
   18288:	add	r4, r7, r0
   1828c:	ldrb	r7, [r7, r0]
   18290:	cmp	r7, #0
   18294:	beq	182d0 <close_stdout@@Base+0x47f0>
   18298:	mov	r0, r5
   1829c:	mov	r1, r4
   182a0:	bl	113f0 <strcmp@plt>
   182a4:	cmp	r0, #0
   182a8:	beq	182c0 <close_stdout@@Base+0x47e0>
   182ac:	cmp	r7, #42	; 0x2a
   182b0:	bne	1826c <close_stdout@@Base+0x478c>
   182b4:	ldrb	r3, [r4, #1]
   182b8:	cmp	r3, #0
   182bc:	bne	1826c <close_stdout@@Base+0x478c>
   182c0:	mov	r0, r4
   182c4:	bl	115dc <strlen@plt>
   182c8:	add	r0, r0, #1
   182cc:	add	r5, r4, r0
   182d0:	ldrb	r3, [r5]
   182d4:	cmp	r3, #0
   182d8:	ldreq	r5, [pc, #808]	; 18608 <close_stdout@@Base+0x4b28>
   182dc:	addeq	r5, pc, r5
   182e0:	ldr	r2, [sp, #124]	; 0x7c
   182e4:	mov	r0, r5
   182e8:	ldr	r3, [r6]
   182ec:	cmp	r2, r3
   182f0:	bne	185d0 <close_stdout@@Base+0x4af0>
   182f4:	add	sp, sp, #132	; 0x84
   182f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182fc:	ldr	r5, [pc, #776]	; 1860c <close_stdout@@Base+0x4b2c>
   18300:	add	r5, pc, r5
   18304:	b	1824c <close_stdout@@Base+0x476c>
   18308:	ldr	r0, [pc, #768]	; 18610 <close_stdout@@Base+0x4b30>
   1830c:	add	r0, pc, r0
   18310:	bl	11564 <getenv@plt>
   18314:	subs	r8, r0, #0
   18318:	beq	185a8 <close_stdout@@Base+0x4ac8>
   1831c:	ldrb	r3, [r8]
   18320:	cmp	r3, #0
   18324:	beq	1853c <close_stdout@@Base+0x4a5c>
   18328:	bl	115dc <strlen@plt>
   1832c:	subs	sl, r0, #0
   18330:	subne	r3, sl, #1
   18334:	bne	1854c <close_stdout@@Base+0x4a6c>
   18338:	mov	r9, #0
   1833c:	mov	fp, r9
   18340:	add	r9, sl, r9
   18344:	add	r0, r9, #14
   18348:	bl	11570 <malloc@plt>
   1834c:	subs	r7, r0, #0
   18350:	beq	1859c <close_stdout@@Base+0x4abc>
   18354:	mov	r1, r8
   18358:	mov	r2, sl
   1835c:	bl	11444 <memcpy@plt>
   18360:	cmp	fp, #0
   18364:	add	ip, r7, r9
   18368:	movne	r3, #47	; 0x2f
   1836c:	strbne	r3, [r7, sl]
   18370:	ldr	r3, [pc, #668]	; 18614 <close_stdout@@Base+0x4b34>
   18374:	add	r3, pc, r3
   18378:	ldm	r3!, {r0, r1, r2}
   1837c:	ldrh	r3, [r3]
   18380:	str	r0, [r7, r9]
   18384:	mov	r0, r7
   18388:	str	r1, [ip, #4]
   1838c:	mov	r1, #32768	; 0x8000
   18390:	strh	r3, [ip, #12]
   18394:	str	r2, [ip, #8]
   18398:	bl	11558 <open64@plt>
   1839c:	subs	r8, r0, #0
   183a0:	blt	18564 <close_stdout@@Base+0x4a84>
   183a4:	ldr	r1, [pc, #620]	; 18618 <close_stdout@@Base+0x4b38>
   183a8:	add	r1, pc, r1
   183ac:	bl	113b4 <fdopen@plt>
   183b0:	subs	fp, r0, #0
   183b4:	beq	185bc <close_stdout@@Base+0x4adc>
   183b8:	ldr	r0, [pc, #604]	; 1861c <close_stdout@@Base+0x4b3c>
   183bc:	add	sl, sp, #20
   183c0:	add	r9, sp, #72	; 0x48
   183c4:	mov	r8, #0
   183c8:	add	r0, pc, r0
   183cc:	str	r0, [sp, #12]
   183d0:	ldr	r3, [fp, #4]
   183d4:	ldr	r2, [fp, #8]
   183d8:	cmp	r3, r2
   183dc:	bcs	184c8 <close_stdout@@Base+0x49e8>
   183e0:	add	r2, r3, #1
   183e4:	str	r2, [fp, #4]
   183e8:	ldrb	r0, [r3]
   183ec:	cmp	r0, #32
   183f0:	beq	183d0 <close_stdout@@Base+0x48f0>
   183f4:	sub	r3, r0, #9
   183f8:	cmp	r3, #1
   183fc:	bls	183d0 <close_stdout@@Base+0x48f0>
   18400:	cmp	r0, #35	; 0x23
   18404:	beq	184dc <close_stdout@@Base+0x49fc>
   18408:	mov	r1, fp
   1840c:	bl	11600 <ungetc@plt>
   18410:	mov	r0, fp
   18414:	ldr	r1, [sp, #12]
   18418:	mov	r2, sl
   1841c:	mov	r3, r9
   18420:	bl	11660 <fscanf@plt>
   18424:	cmp	r0, #1
   18428:	ble	1850c <close_stdout@@Base+0x4a2c>
   1842c:	mov	r0, sl
   18430:	bl	115dc <strlen@plt>
   18434:	str	r0, [sp, #8]
   18438:	mov	r0, r9
   1843c:	bl	115dc <strlen@plt>
   18440:	cmp	r8, #0
   18444:	mov	r2, r0
   18448:	bne	18570 <close_stdout@@Base+0x4a90>
   1844c:	ldr	r3, [sp, #8]
   18450:	str	r2, [sp]
   18454:	add	r8, r0, r3
   18458:	add	r0, r8, #3
   1845c:	add	r8, r8, #2
   18460:	bl	11570 <malloc@plt>
   18464:	ldr	r2, [sp]
   18468:	mov	r3, r0
   1846c:	cmp	r3, #0
   18470:	beq	185d4 <close_stdout@@Base+0x4af4>
   18474:	ldr	r0, [sp, #8]
   18478:	movw	r1, #65534	; 0xfffe
   1847c:	movt	r1, #65535	; 0xffff
   18480:	rsb	r2, r2, r8
   18484:	rsb	r1, r0, r1
   18488:	stm	sp, {r2, r3}
   1848c:	add	r0, r1, r2
   18490:	mov	r1, sl
   18494:	add	r0, r3, r0
   18498:	mov	r4, r3
   1849c:	bl	11510 <strcpy@plt>
   184a0:	ldr	r2, [sp]
   184a4:	ldr	r3, [sp, #4]
   184a8:	mov	r1, r9
   184ac:	sub	r0, r2, #1
   184b0:	add	r0, r3, r0
   184b4:	bl	11510 <strcpy@plt>
   184b8:	ldr	r3, [fp, #4]
   184bc:	ldr	r2, [fp, #8]
   184c0:	cmp	r3, r2
   184c4:	bcc	183e0 <close_stdout@@Base+0x4900>
   184c8:	mov	r0, fp
   184cc:	bl	116b4 <__uflow@plt>
   184d0:	cmn	r0, #1
   184d4:	beq	1850c <close_stdout@@Base+0x4a2c>
   184d8:	b	183ec <close_stdout@@Base+0x490c>
   184dc:	ldr	r3, [fp, #4]
   184e0:	ldr	r2, [fp, #8]
   184e4:	cmp	r3, r2
   184e8:	bcs	185f0 <close_stdout@@Base+0x4b10>
   184ec:	add	r2, r3, #1
   184f0:	str	r2, [fp, #4]
   184f4:	ldrb	r0, [r3]
   184f8:	cmp	r0, #10
   184fc:	cmnne	r0, #1
   18500:	bne	184dc <close_stdout@@Base+0x49fc>
   18504:	cmn	r0, #1
   18508:	bne	183d0 <close_stdout@@Base+0x48f0>
   1850c:	mov	r0, fp
   18510:	bl	17de4 <close_stdout@@Base+0x4304>
   18514:	cmp	r8, #0
   18518:	beq	18564 <close_stdout@@Base+0x4a84>
   1851c:	mov	r3, #0
   18520:	strb	r3, [r4, r8]
   18524:	mov	r0, r7
   18528:	bl	1142c <free@plt>
   1852c:	ldr	r3, [pc, #236]	; 18620 <close_stdout@@Base+0x4b40>
   18530:	add	r3, pc, r3
   18534:	str	r4, [r3]
   18538:	b	1825c <close_stdout@@Base+0x477c>
   1853c:	ldr	r8, [pc, #224]	; 18624 <close_stdout@@Base+0x4b44>
   18540:	mov	r3, #7
   18544:	mov	sl, #8
   18548:	add	r8, pc, r8
   1854c:	ldrb	r3, [r8, r3]
   18550:	cmp	r3, #47	; 0x2f
   18554:	movne	r9, #1
   18558:	movne	fp, r9
   1855c:	bne	18340 <close_stdout@@Base+0x4860>
   18560:	b	18338 <close_stdout@@Base+0x4858>
   18564:	ldr	r4, [pc, #188]	; 18628 <close_stdout@@Base+0x4b48>
   18568:	add	r4, pc, r4
   1856c:	b	18524 <close_stdout@@Base+0x4a44>
   18570:	ldr	r0, [sp, #8]
   18574:	str	r2, [sp]
   18578:	add	r3, r0, r2
   1857c:	mov	r0, r4
   18580:	add	r8, r3, r8
   18584:	add	r1, r8, #3
   18588:	add	r8, r8, #2
   1858c:	bl	114b0 <realloc@plt>
   18590:	ldr	r2, [sp]
   18594:	mov	r3, r0
   18598:	b	1846c <close_stdout@@Base+0x498c>
   1859c:	ldr	r4, [pc, #136]	; 1862c <close_stdout@@Base+0x4b4c>
   185a0:	add	r4, pc, r4
   185a4:	b	1852c <close_stdout@@Base+0x4a4c>
   185a8:	ldr	r8, [pc, #128]	; 18630 <close_stdout@@Base+0x4b50>
   185ac:	mov	r3, #7
   185b0:	mov	sl, #8
   185b4:	add	r8, pc, r8
   185b8:	b	1854c <close_stdout@@Base+0x4a6c>
   185bc:	ldr	r4, [pc, #112]	; 18634 <close_stdout@@Base+0x4b54>
   185c0:	mov	r0, r8
   185c4:	add	r4, pc, r4
   185c8:	bl	11774 <close@plt>
   185cc:	b	18524 <close_stdout@@Base+0x4a44>
   185d0:	bl	11498 <__stack_chk_fail@plt>
   185d4:	mov	r0, r4
   185d8:	ldr	r4, [pc, #88]	; 18638 <close_stdout@@Base+0x4b58>
   185dc:	bl	1142c <free@plt>
   185e0:	mov	r0, fp
   185e4:	add	r4, pc, r4
   185e8:	bl	17de4 <close_stdout@@Base+0x4304>
   185ec:	b	18524 <close_stdout@@Base+0x4a44>
   185f0:	mov	r0, fp
   185f4:	bl	116b4 <__uflow@plt>
   185f8:	b	184f8 <close_stdout@@Base+0x4a18>
   185fc:	ldrdeq	r3, [r1], -r0
   18600:	andeq	r0, r0, ip, asr r1
   18604:	ldrdeq	r4, [r1], -r8
   18608:	andeq	r2, r0, r8, lsl sl
   1860c:	andeq	r1, r0, r8, lsl #24
   18610:	strdeq	r2, [r0], -r0
   18614:	muleq	r0, r8, r9
   18618:	andeq	r2, r0, r4, ror r9
   1861c:	andeq	r2, r0, r8, asr r9
   18620:	strdeq	r3, [r1], -r8
   18624:	andeq	r2, r0, r0, lsr #15
   18628:	andeq	r1, r0, r0, lsr #19
   1862c:	andeq	r1, r0, r8, ror #18
   18630:	andeq	r2, r0, r4, lsr r7
   18634:	andeq	r1, r0, r4, asr #18
   18638:	andeq	r1, r0, r4, lsr #18
   1863c:	mov	r1, #0
   18640:	mov	r2, #3
   18644:	b	17e84 <close_stdout@@Base+0x43a4>
   18648:	subs	r2, r1, #1
   1864c:	bxeq	lr
   18650:	bcc	18828 <close_stdout@@Base+0x4d48>
   18654:	cmp	r0, r1
   18658:	bls	1880c <close_stdout@@Base+0x4d2c>
   1865c:	tst	r1, r2
   18660:	beq	18818 <close_stdout@@Base+0x4d38>
   18664:	clz	r3, r0
   18668:	clz	r2, r1
   1866c:	sub	r3, r2, r3
   18670:	rsbs	r3, r3, #31
   18674:	addne	r3, r3, r3, lsl #1
   18678:	mov	r2, #0
   1867c:	addne	pc, pc, r3, lsl #2
   18680:	nop	{0}
   18684:	cmp	r0, r1, lsl #31
   18688:	adc	r2, r2, r2
   1868c:	subcs	r0, r0, r1, lsl #31
   18690:	cmp	r0, r1, lsl #30
   18694:	adc	r2, r2, r2
   18698:	subcs	r0, r0, r1, lsl #30
   1869c:	cmp	r0, r1, lsl #29
   186a0:	adc	r2, r2, r2
   186a4:	subcs	r0, r0, r1, lsl #29
   186a8:	cmp	r0, r1, lsl #28
   186ac:	adc	r2, r2, r2
   186b0:	subcs	r0, r0, r1, lsl #28
   186b4:	cmp	r0, r1, lsl #27
   186b8:	adc	r2, r2, r2
   186bc:	subcs	r0, r0, r1, lsl #27
   186c0:	cmp	r0, r1, lsl #26
   186c4:	adc	r2, r2, r2
   186c8:	subcs	r0, r0, r1, lsl #26
   186cc:	cmp	r0, r1, lsl #25
   186d0:	adc	r2, r2, r2
   186d4:	subcs	r0, r0, r1, lsl #25
   186d8:	cmp	r0, r1, lsl #24
   186dc:	adc	r2, r2, r2
   186e0:	subcs	r0, r0, r1, lsl #24
   186e4:	cmp	r0, r1, lsl #23
   186e8:	adc	r2, r2, r2
   186ec:	subcs	r0, r0, r1, lsl #23
   186f0:	cmp	r0, r1, lsl #22
   186f4:	adc	r2, r2, r2
   186f8:	subcs	r0, r0, r1, lsl #22
   186fc:	cmp	r0, r1, lsl #21
   18700:	adc	r2, r2, r2
   18704:	subcs	r0, r0, r1, lsl #21
   18708:	cmp	r0, r1, lsl #20
   1870c:	adc	r2, r2, r2
   18710:	subcs	r0, r0, r1, lsl #20
   18714:	cmp	r0, r1, lsl #19
   18718:	adc	r2, r2, r2
   1871c:	subcs	r0, r0, r1, lsl #19
   18720:	cmp	r0, r1, lsl #18
   18724:	adc	r2, r2, r2
   18728:	subcs	r0, r0, r1, lsl #18
   1872c:	cmp	r0, r1, lsl #17
   18730:	adc	r2, r2, r2
   18734:	subcs	r0, r0, r1, lsl #17
   18738:	cmp	r0, r1, lsl #16
   1873c:	adc	r2, r2, r2
   18740:	subcs	r0, r0, r1, lsl #16
   18744:	cmp	r0, r1, lsl #15
   18748:	adc	r2, r2, r2
   1874c:	subcs	r0, r0, r1, lsl #15
   18750:	cmp	r0, r1, lsl #14
   18754:	adc	r2, r2, r2
   18758:	subcs	r0, r0, r1, lsl #14
   1875c:	cmp	r0, r1, lsl #13
   18760:	adc	r2, r2, r2
   18764:	subcs	r0, r0, r1, lsl #13
   18768:	cmp	r0, r1, lsl #12
   1876c:	adc	r2, r2, r2
   18770:	subcs	r0, r0, r1, lsl #12
   18774:	cmp	r0, r1, lsl #11
   18778:	adc	r2, r2, r2
   1877c:	subcs	r0, r0, r1, lsl #11
   18780:	cmp	r0, r1, lsl #10
   18784:	adc	r2, r2, r2
   18788:	subcs	r0, r0, r1, lsl #10
   1878c:	cmp	r0, r1, lsl #9
   18790:	adc	r2, r2, r2
   18794:	subcs	r0, r0, r1, lsl #9
   18798:	cmp	r0, r1, lsl #8
   1879c:	adc	r2, r2, r2
   187a0:	subcs	r0, r0, r1, lsl #8
   187a4:	cmp	r0, r1, lsl #7
   187a8:	adc	r2, r2, r2
   187ac:	subcs	r0, r0, r1, lsl #7
   187b0:	cmp	r0, r1, lsl #6
   187b4:	adc	r2, r2, r2
   187b8:	subcs	r0, r0, r1, lsl #6
   187bc:	cmp	r0, r1, lsl #5
   187c0:	adc	r2, r2, r2
   187c4:	subcs	r0, r0, r1, lsl #5
   187c8:	cmp	r0, r1, lsl #4
   187cc:	adc	r2, r2, r2
   187d0:	subcs	r0, r0, r1, lsl #4
   187d4:	cmp	r0, r1, lsl #3
   187d8:	adc	r2, r2, r2
   187dc:	subcs	r0, r0, r1, lsl #3
   187e0:	cmp	r0, r1, lsl #2
   187e4:	adc	r2, r2, r2
   187e8:	subcs	r0, r0, r1, lsl #2
   187ec:	cmp	r0, r1, lsl #1
   187f0:	adc	r2, r2, r2
   187f4:	subcs	r0, r0, r1, lsl #1
   187f8:	cmp	r0, r1
   187fc:	adc	r2, r2, r2
   18800:	subcs	r0, r0, r1
   18804:	mov	r0, r2
   18808:	bx	lr
   1880c:	moveq	r0, #1
   18810:	movne	r0, #0
   18814:	bx	lr
   18818:	clz	r2, r1
   1881c:	rsb	r2, r2, #31
   18820:	lsr	r0, r0, r2
   18824:	bx	lr
   18828:	cmp	r0, #0
   1882c:	mvnne	r0, #0
   18830:	b	18c90 <close_stdout@@Base+0x51b0>
   18834:	cmp	r1, #0
   18838:	beq	18828 <close_stdout@@Base+0x4d48>
   1883c:	push	{r0, r1, lr}
   18840:	bl	18648 <close_stdout@@Base+0x4b68>
   18844:	pop	{r1, r2, lr}
   18848:	mul	r3, r2, r0
   1884c:	sub	r1, r1, r3
   18850:	bx	lr
   18854:	eor	r1, r1, #-2147483648	; 0x80000000
   18858:	b	18860 <close_stdout@@Base+0x4d80>
   1885c:	eor	r3, r3, #-2147483648	; 0x80000000
   18860:	push	{r4, r5, lr}
   18864:	lsl	r4, r1, #1
   18868:	lsl	r5, r3, #1
   1886c:	teq	r4, r5
   18870:	teqeq	r0, r2
   18874:	orrsne	ip, r4, r0
   18878:	orrsne	ip, r5, r2
   1887c:	mvnsne	ip, r4, asr #21
   18880:	mvnsne	ip, r5, asr #21
   18884:	beq	18a70 <close_stdout@@Base+0x4f90>
   18888:	lsr	r4, r4, #21
   1888c:	rsbs	r5, r4, r5, lsr #21
   18890:	rsblt	r5, r5, #0
   18894:	ble	188b4 <close_stdout@@Base+0x4dd4>
   18898:	add	r4, r4, r5
   1889c:	eor	r2, r0, r2
   188a0:	eor	r3, r1, r3
   188a4:	eor	r0, r2, r0
   188a8:	eor	r1, r3, r1
   188ac:	eor	r2, r0, r2
   188b0:	eor	r3, r1, r3
   188b4:	cmp	r5, #54	; 0x36
   188b8:	pophi	{r4, r5, pc}
   188bc:	tst	r1, #-2147483648	; 0x80000000
   188c0:	lsl	r1, r1, #12
   188c4:	mov	ip, #1048576	; 0x100000
   188c8:	orr	r1, ip, r1, lsr #12
   188cc:	beq	188d8 <close_stdout@@Base+0x4df8>
   188d0:	rsbs	r0, r0, #0
   188d4:	rsc	r1, r1, #0
   188d8:	tst	r3, #-2147483648	; 0x80000000
   188dc:	lsl	r3, r3, #12
   188e0:	orr	r3, ip, r3, lsr #12
   188e4:	beq	188f0 <close_stdout@@Base+0x4e10>
   188e8:	rsbs	r2, r2, #0
   188ec:	rsc	r3, r3, #0
   188f0:	teq	r4, r5
   188f4:	beq	18a58 <close_stdout@@Base+0x4f78>
   188f8:	sub	r4, r4, #1
   188fc:	rsbs	lr, r5, #32
   18900:	blt	1891c <close_stdout@@Base+0x4e3c>
   18904:	lsl	ip, r2, lr
   18908:	adds	r0, r0, r2, lsr r5
   1890c:	adc	r1, r1, #0
   18910:	adds	r0, r0, r3, lsl lr
   18914:	adcs	r1, r1, r3, asr r5
   18918:	b	18938 <close_stdout@@Base+0x4e58>
   1891c:	sub	r5, r5, #32
   18920:	add	lr, lr, #32
   18924:	cmp	r2, #1
   18928:	lsl	ip, r3, lr
   1892c:	orrcs	ip, ip, #2
   18930:	adds	r0, r0, r3, asr r5
   18934:	adcs	r1, r1, r3, asr #31
   18938:	and	r5, r1, #-2147483648	; 0x80000000
   1893c:	bpl	1894c <close_stdout@@Base+0x4e6c>
   18940:	rsbs	ip, ip, #0
   18944:	rscs	r0, r0, #0
   18948:	rsc	r1, r1, #0
   1894c:	cmp	r1, #1048576	; 0x100000
   18950:	bcc	18990 <close_stdout@@Base+0x4eb0>
   18954:	cmp	r1, #2097152	; 0x200000
   18958:	bcc	18978 <close_stdout@@Base+0x4e98>
   1895c:	lsrs	r1, r1, #1
   18960:	rrxs	r0, r0
   18964:	rrx	ip, ip
   18968:	add	r4, r4, #1
   1896c:	lsl	r2, r4, #21
   18970:	cmn	r2, #4194304	; 0x400000
   18974:	bcs	18ad0 <close_stdout@@Base+0x4ff0>
   18978:	cmp	ip, #-2147483648	; 0x80000000
   1897c:	lsrseq	ip, r0, #1
   18980:	adcs	r0, r0, #0
   18984:	adc	r1, r1, r4, lsl #20
   18988:	orr	r1, r1, r5
   1898c:	pop	{r4, r5, pc}
   18990:	lsls	ip, ip, #1
   18994:	adcs	r0, r0, r0
   18998:	adc	r1, r1, r1
   1899c:	tst	r1, #1048576	; 0x100000
   189a0:	sub	r4, r4, #1
   189a4:	bne	18978 <close_stdout@@Base+0x4e98>
   189a8:	teq	r1, #0
   189ac:	moveq	r1, r0
   189b0:	moveq	r0, #0
   189b4:	clz	r3, r1
   189b8:	addeq	r3, r3, #32
   189bc:	sub	r3, r3, #11
   189c0:	subs	r2, r3, #32
   189c4:	bge	189e8 <close_stdout@@Base+0x4f08>
   189c8:	adds	r2, r2, #12
   189cc:	ble	189e4 <close_stdout@@Base+0x4f04>
   189d0:	add	ip, r2, #20
   189d4:	rsb	r2, r2, #12
   189d8:	lsl	r0, r1, ip
   189dc:	lsr	r1, r1, r2
   189e0:	b	189f8 <close_stdout@@Base+0x4f18>
   189e4:	add	r2, r2, #20
   189e8:	rsble	ip, r2, #32
   189ec:	lsl	r1, r1, r2
   189f0:	orrle	r1, r1, r0, lsr ip
   189f4:	lslle	r0, r0, r2
   189f8:	subs	r4, r4, r3
   189fc:	addge	r1, r1, r4, lsl #20
   18a00:	orrge	r1, r1, r5
   18a04:	popge	{r4, r5, pc}
   18a08:	mvn	r4, r4
   18a0c:	subs	r4, r4, #31
   18a10:	bge	18a4c <close_stdout@@Base+0x4f6c>
   18a14:	adds	r4, r4, #12
   18a18:	bgt	18a34 <close_stdout@@Base+0x4f54>
   18a1c:	add	r4, r4, #20
   18a20:	rsb	r2, r4, #32
   18a24:	lsr	r0, r0, r4
   18a28:	orr	r0, r0, r1, lsl r2
   18a2c:	orr	r1, r5, r1, lsr r4
   18a30:	pop	{r4, r5, pc}
   18a34:	rsb	r4, r4, #12
   18a38:	rsb	r2, r4, #32
   18a3c:	lsr	r0, r0, r2
   18a40:	orr	r0, r0, r1, lsl r4
   18a44:	mov	r1, r5
   18a48:	pop	{r4, r5, pc}
   18a4c:	lsr	r0, r1, r4
   18a50:	mov	r1, r5
   18a54:	pop	{r4, r5, pc}
   18a58:	teq	r4, #0
   18a5c:	eor	r3, r3, #1048576	; 0x100000
   18a60:	eoreq	r1, r1, #1048576	; 0x100000
   18a64:	addeq	r4, r4, #1
   18a68:	subne	r5, r5, #1
   18a6c:	b	188f8 <close_stdout@@Base+0x4e18>
   18a70:	mvns	ip, r4, asr #21
   18a74:	mvnsne	ip, r5, asr #21
   18a78:	beq	18ae0 <close_stdout@@Base+0x5000>
   18a7c:	teq	r4, r5
   18a80:	teqeq	r0, r2
   18a84:	beq	18a98 <close_stdout@@Base+0x4fb8>
   18a88:	orrs	ip, r4, r0
   18a8c:	moveq	r1, r3
   18a90:	moveq	r0, r2
   18a94:	pop	{r4, r5, pc}
   18a98:	teq	r1, r3
   18a9c:	movne	r1, #0
   18aa0:	movne	r0, #0
   18aa4:	popne	{r4, r5, pc}
   18aa8:	lsrs	ip, r4, #21
   18aac:	bne	18ac0 <close_stdout@@Base+0x4fe0>
   18ab0:	lsls	r0, r0, #1
   18ab4:	adcs	r1, r1, r1
   18ab8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   18abc:	pop	{r4, r5, pc}
   18ac0:	adds	r4, r4, #4194304	; 0x400000
   18ac4:	addcc	r1, r1, #1048576	; 0x100000
   18ac8:	popcc	{r4, r5, pc}
   18acc:	and	r5, r1, #-2147483648	; 0x80000000
   18ad0:	orr	r1, r5, #2130706432	; 0x7f000000
   18ad4:	orr	r1, r1, #15728640	; 0xf00000
   18ad8:	mov	r0, #0
   18adc:	pop	{r4, r5, pc}
   18ae0:	mvns	ip, r4, asr #21
   18ae4:	movne	r1, r3
   18ae8:	movne	r0, r2
   18aec:	mvnseq	ip, r5, asr #21
   18af0:	movne	r3, r1
   18af4:	movne	r2, r0
   18af8:	orrs	r4, r0, r1, lsl #12
   18afc:	orrseq	r5, r2, r3, lsl #12
   18b00:	teqeq	r1, r3
   18b04:	orrne	r1, r1, #524288	; 0x80000
   18b08:	pop	{r4, r5, pc}
   18b0c:	teq	r0, #0
   18b10:	moveq	r1, #0
   18b14:	bxeq	lr
   18b18:	push	{r4, r5, lr}
   18b1c:	mov	r4, #1024	; 0x400
   18b20:	add	r4, r4, #50	; 0x32
   18b24:	mov	r5, #0
   18b28:	mov	r1, #0
   18b2c:	b	189a8 <close_stdout@@Base+0x4ec8>
   18b30:	teq	r0, #0
   18b34:	moveq	r1, #0
   18b38:	bxeq	lr
   18b3c:	push	{r4, r5, lr}
   18b40:	mov	r4, #1024	; 0x400
   18b44:	add	r4, r4, #50	; 0x32
   18b48:	ands	r5, r0, #-2147483648	; 0x80000000
   18b4c:	rsbmi	r0, r0, #0
   18b50:	mov	r1, #0
   18b54:	b	189a8 <close_stdout@@Base+0x4ec8>
   18b58:	lsls	r2, r0, #1
   18b5c:	asr	r1, r2, #3
   18b60:	rrx	r1, r1
   18b64:	lsl	r0, r2, #28
   18b68:	andsne	r3, r2, #-16777216	; 0xff000000
   18b6c:	teqne	r3, #-16777216	; 0xff000000
   18b70:	eorne	r1, r1, #939524096	; 0x38000000
   18b74:	bxne	lr
   18b78:	teq	r2, #0
   18b7c:	teqne	r3, #-16777216	; 0xff000000
   18b80:	bxeq	lr
   18b84:	push	{r4, r5, lr}
   18b88:	mov	r4, #896	; 0x380
   18b8c:	and	r5, r1, #-2147483648	; 0x80000000
   18b90:	bic	r1, r1, #-2147483648	; 0x80000000
   18b94:	b	189a8 <close_stdout@@Base+0x4ec8>
   18b98:	orrs	r2, r0, r1
   18b9c:	bxeq	lr
   18ba0:	push	{r4, r5, lr}
   18ba4:	mov	r5, #0
   18ba8:	b	18bc8 <close_stdout@@Base+0x50e8>
   18bac:	orrs	r2, r0, r1
   18bb0:	bxeq	lr
   18bb4:	push	{r4, r5, lr}
   18bb8:	ands	r5, r1, #-2147483648	; 0x80000000
   18bbc:	bpl	18bc8 <close_stdout@@Base+0x50e8>
   18bc0:	rsbs	r0, r0, #0
   18bc4:	rsc	r1, r1, #0
   18bc8:	mov	r4, #1024	; 0x400
   18bcc:	add	r4, r4, #50	; 0x32
   18bd0:	lsrs	ip, r1, #22
   18bd4:	beq	1894c <close_stdout@@Base+0x4e6c>
   18bd8:	mov	r2, #3
   18bdc:	lsrs	ip, ip, #3
   18be0:	addne	r2, r2, #3
   18be4:	lsrs	ip, ip, #3
   18be8:	addne	r2, r2, #3
   18bec:	add	r2, r2, ip, lsr #3
   18bf0:	rsb	r3, r2, #32
   18bf4:	lsl	ip, r0, r3
   18bf8:	lsr	r0, r0, r2
   18bfc:	orr	r0, r0, r1, lsl r3
   18c00:	lsr	r1, r1, r2
   18c04:	add	r4, r4, r2
   18c08:	b	1894c <close_stdout@@Base+0x4e6c>
   18c0c:	cmp	r3, #0
   18c10:	cmpeq	r2, #0
   18c14:	bne	18c38 <close_stdout@@Base+0x5158>
   18c18:	cmp	r1, #0
   18c1c:	movlt	r1, #-2147483648	; 0x80000000
   18c20:	movlt	r0, #0
   18c24:	blt	18c34 <close_stdout@@Base+0x5154>
   18c28:	cmpeq	r0, #0
   18c2c:	mvnne	r1, #-2147483648	; 0x80000000
   18c30:	mvnne	r0, #0
   18c34:	b	18c90 <close_stdout@@Base+0x51b0>
   18c38:	sub	sp, sp, #8
   18c3c:	push	{sp, lr}
   18c40:	bl	18ce8 <close_stdout@@Base+0x5208>
   18c44:	ldr	lr, [sp, #4]
   18c48:	add	sp, sp, #8
   18c4c:	pop	{r2, r3}
   18c50:	bx	lr
   18c54:	cmp	r3, #0
   18c58:	cmpeq	r2, #0
   18c5c:	bne	18c74 <close_stdout@@Base+0x5194>
   18c60:	cmp	r1, #0
   18c64:	cmpeq	r0, #0
   18c68:	mvnne	r1, #0
   18c6c:	mvnne	r0, #0
   18c70:	b	18c90 <close_stdout@@Base+0x51b0>
   18c74:	sub	sp, sp, #8
   18c78:	push	{sp, lr}
   18c7c:	bl	18d24 <close_stdout@@Base+0x5244>
   18c80:	ldr	lr, [sp, #4]
   18c84:	add	sp, sp, #8
   18c88:	pop	{r2, r3}
   18c8c:	bx	lr
   18c90:	push	{r1, lr}
   18c94:	mov	r0, #8
   18c98:	bl	113d8 <raise@plt>
   18c9c:	pop	{r1, pc}
   18ca0:	vmov	d7, r0, r1
   18ca4:	vldr	d5, [pc, #44]	; 18cd8 <close_stdout@@Base+0x51f8>
   18ca8:	vldr	d6, [pc, #48]	; 18ce0 <close_stdout@@Base+0x5200>
   18cac:	mov	r0, #0
   18cb0:	vmul.f64	d5, d7, d5
   18cb4:	vcvt.u32.f64	s9, d5
   18cb8:	vcvt.f64.u32	d5, s9
   18cbc:	vmov	r1, s9
   18cc0:	vmls.f64	d7, d5, d6
   18cc4:	vcvt.u32.f64	s14, d7
   18cc8:	vmov	r3, s14
   18ccc:	orr	r0, r0, r3
   18cd0:	bx	lr
   18cd4:	nop	{0}
   18cd8:	andeq	r0, r0, r0
   18cdc:	ldclcc	0, cr0, [r0]
   18ce0:	andeq	r0, r0, r0
   18ce4:	mvnsmi	r0, r0
   18ce8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18cec:	mov	r8, r2
   18cf0:	mov	r6, r0
   18cf4:	mov	r7, r1
   18cf8:	mov	sl, r3
   18cfc:	ldr	r9, [sp, #32]
   18d00:	bl	18d60 <close_stdout@@Base+0x5280>
   18d04:	umull	r4, r5, r8, r0
   18d08:	mul	r8, r8, r1
   18d0c:	mla	r2, r0, sl, r8
   18d10:	add	r5, r2, r5
   18d14:	subs	r4, r6, r4
   18d18:	sbc	r5, r7, r5
   18d1c:	strd	r4, [r9]
   18d20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d24:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   18d28:	mov	r8, r2
   18d2c:	mov	r6, r0
   18d30:	mov	r7, r1
   18d34:	mov	r5, r3
   18d38:	ldr	r9, [sp, #32]
   18d3c:	bl	191ec <close_stdout@@Base+0x570c>
   18d40:	mul	r3, r0, r5
   18d44:	umull	r4, r5, r0, r8
   18d48:	mla	r8, r8, r1, r3
   18d4c:	add	r5, r8, r5
   18d50:	subs	r4, r6, r4
   18d54:	sbc	r5, r7, r5
   18d58:	strd	r4, [r9]
   18d5c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   18d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d64:	rsbs	r4, r0, #0
   18d68:	rsc	r5, r1, #0
   18d6c:	cmp	r1, #0
   18d70:	mvn	r6, #0
   18d74:	sub	sp, sp, #12
   18d78:	movge	r4, r0
   18d7c:	movge	r5, r1
   18d80:	movge	r6, #0
   18d84:	cmp	r3, #0
   18d88:	blt	18fc0 <close_stdout@@Base+0x54e0>
   18d8c:	cmp	r3, #0
   18d90:	mov	sl, r4
   18d94:	mov	ip, r5
   18d98:	mov	r0, r2
   18d9c:	mov	r1, r3
   18da0:	mov	r8, r2
   18da4:	mov	r7, r4
   18da8:	mov	r9, r5
   18dac:	bne	18ea4 <close_stdout@@Base+0x53c4>
   18db0:	cmp	r2, r5
   18db4:	bls	18ee0 <close_stdout@@Base+0x5400>
   18db8:	clz	r3, r2
   18dbc:	cmp	r3, #0
   18dc0:	rsbne	r2, r3, #32
   18dc4:	lslne	r8, r0, r3
   18dc8:	lsrne	r2, r4, r2
   18dcc:	lslne	r7, r4, r3
   18dd0:	orrne	r9, r2, r5, lsl r3
   18dd4:	lsr	r4, r8, #16
   18dd8:	uxth	sl, r8
   18ddc:	mov	r1, r4
   18de0:	mov	r0, r9
   18de4:	bl	18648 <close_stdout@@Base+0x4b68>
   18de8:	mov	r1, r4
   18dec:	mov	fp, r0
   18df0:	mov	r0, r9
   18df4:	bl	18834 <close_stdout@@Base+0x4d54>
   18df8:	mul	r0, sl, fp
   18dfc:	lsr	r2, r7, #16
   18e00:	orr	r1, r2, r1, lsl #16
   18e04:	cmp	r0, r1
   18e08:	bls	18e2c <close_stdout@@Base+0x534c>
   18e0c:	adds	r1, r1, r8
   18e10:	sub	r3, fp, #1
   18e14:	bcs	18e28 <close_stdout@@Base+0x5348>
   18e18:	cmp	r0, r1
   18e1c:	subhi	fp, fp, #2
   18e20:	addhi	r1, r1, r8
   18e24:	bhi	18e2c <close_stdout@@Base+0x534c>
   18e28:	mov	fp, r3
   18e2c:	rsb	r9, r0, r1
   18e30:	mov	r1, r4
   18e34:	uxth	r7, r7
   18e38:	mov	r0, r9
   18e3c:	bl	18648 <close_stdout@@Base+0x4b68>
   18e40:	mov	r1, r4
   18e44:	mov	r5, r0
   18e48:	mov	r0, r9
   18e4c:	bl	18834 <close_stdout@@Base+0x4d54>
   18e50:	mul	sl, sl, r5
   18e54:	orr	r1, r7, r1, lsl #16
   18e58:	cmp	sl, r1
   18e5c:	bls	18e7c <close_stdout@@Base+0x539c>
   18e60:	adds	r8, r1, r8
   18e64:	sub	r3, r5, #1
   18e68:	bcs	18e78 <close_stdout@@Base+0x5398>
   18e6c:	cmp	sl, r8
   18e70:	subhi	r5, r5, #2
   18e74:	bhi	18e7c <close_stdout@@Base+0x539c>
   18e78:	mov	r5, r3
   18e7c:	orr	r3, r5, fp, lsl #16
   18e80:	mov	r4, #0
   18e84:	cmp	r6, #0
   18e88:	mov	r0, r3
   18e8c:	mov	r1, r4
   18e90:	beq	18e9c <close_stdout@@Base+0x53bc>
   18e94:	rsbs	r0, r0, #0
   18e98:	rsc	r1, r1, #0
   18e9c:	add	sp, sp, #12
   18ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ea4:	cmp	r3, r5
   18ea8:	movhi	r4, #0
   18eac:	movhi	r3, r4
   18eb0:	bhi	18e84 <close_stdout@@Base+0x53a4>
   18eb4:	clz	r5, r1
   18eb8:	cmp	r5, #0
   18ebc:	bne	190ac <close_stdout@@Base+0x55cc>
   18ec0:	cmp	r1, ip
   18ec4:	cmpcs	r2, sl
   18ec8:	movhi	r4, #0
   18ecc:	movls	r4, #1
   18ed0:	movls	r3, #1
   18ed4:	movls	r4, r5
   18ed8:	movhi	r3, r4
   18edc:	b	18e84 <close_stdout@@Base+0x53a4>
   18ee0:	cmp	r2, #0
   18ee4:	bne	18ef8 <close_stdout@@Base+0x5418>
   18ee8:	mov	r1, r2
   18eec:	mov	r0, #1
   18ef0:	bl	18648 <close_stdout@@Base+0x4b68>
   18ef4:	mov	r8, r0
   18ef8:	clz	r3, r8
   18efc:	cmp	r3, #0
   18f00:	bne	18fd0 <close_stdout@@Base+0x54f0>
   18f04:	rsb	r9, r8, r9
   18f08:	lsr	r5, r8, #16
   18f0c:	uxth	sl, r8
   18f10:	mov	r4, #1
   18f14:	mov	r1, r5
   18f18:	mov	r0, r9
   18f1c:	bl	18648 <close_stdout@@Base+0x4b68>
   18f20:	mov	r1, r5
   18f24:	mov	fp, r0
   18f28:	mov	r0, r9
   18f2c:	bl	18834 <close_stdout@@Base+0x4d54>
   18f30:	mul	r0, sl, fp
   18f34:	lsr	r2, r7, #16
   18f38:	orr	r1, r2, r1, lsl #16
   18f3c:	cmp	r0, r1
   18f40:	bls	18f60 <close_stdout@@Base+0x5480>
   18f44:	adds	r1, r1, r8
   18f48:	sub	r3, fp, #1
   18f4c:	bcs	191cc <close_stdout@@Base+0x56ec>
   18f50:	cmp	r0, r1
   18f54:	subhi	fp, fp, #2
   18f58:	addhi	r1, r1, r8
   18f5c:	bls	191cc <close_stdout@@Base+0x56ec>
   18f60:	rsb	r2, r0, r1
   18f64:	mov	r1, r5
   18f68:	str	r2, [sp]
   18f6c:	uxth	r7, r7
   18f70:	mov	r0, r2
   18f74:	bl	18648 <close_stdout@@Base+0x4b68>
   18f78:	ldr	r2, [sp]
   18f7c:	mov	r1, r5
   18f80:	mov	r9, r0
   18f84:	mov	r0, r2
   18f88:	bl	18834 <close_stdout@@Base+0x4d54>
   18f8c:	mul	sl, sl, r9
   18f90:	orr	r1, r7, r1, lsl #16
   18f94:	cmp	sl, r1
   18f98:	bls	18fb8 <close_stdout@@Base+0x54d8>
   18f9c:	adds	r8, r1, r8
   18fa0:	sub	r3, r9, #1
   18fa4:	bcs	18fb4 <close_stdout@@Base+0x54d4>
   18fa8:	cmp	sl, r8
   18fac:	subhi	r9, r9, #2
   18fb0:	bhi	18fb8 <close_stdout@@Base+0x54d8>
   18fb4:	mov	r9, r3
   18fb8:	orr	r3, r9, fp, lsl #16
   18fbc:	b	18e84 <close_stdout@@Base+0x53a4>
   18fc0:	mvn	r6, r6
   18fc4:	rsbs	r2, r2, #0
   18fc8:	rsc	r3, r3, #0
   18fcc:	b	18d8c <close_stdout@@Base+0x52ac>
   18fd0:	lsl	r8, r8, r3
   18fd4:	rsb	fp, r3, #32
   18fd8:	lsr	r4, r9, fp
   18fdc:	lsr	fp, r7, fp
   18fe0:	lsr	r5, r8, #16
   18fe4:	orr	fp, fp, r9, lsl r3
   18fe8:	mov	r0, r4
   18fec:	lsl	r7, r7, r3
   18ff0:	mov	r1, r5
   18ff4:	uxth	sl, r8
   18ff8:	bl	18648 <close_stdout@@Base+0x4b68>
   18ffc:	mov	r1, r5
   19000:	mov	r3, r0
   19004:	mov	r0, r4
   19008:	str	r3, [sp]
   1900c:	bl	18834 <close_stdout@@Base+0x4d54>
   19010:	ldr	r3, [sp]
   19014:	lsr	r2, fp, #16
   19018:	mul	r0, sl, r3
   1901c:	orr	r1, r2, r1, lsl #16
   19020:	cmp	r0, r1
   19024:	bls	19044 <close_stdout@@Base+0x5564>
   19028:	adds	r1, r1, r8
   1902c:	sub	r2, r3, #1
   19030:	bcs	191e4 <close_stdout@@Base+0x5704>
   19034:	cmp	r0, r1
   19038:	subhi	r3, r3, #2
   1903c:	addhi	r1, r1, r8
   19040:	bls	191e4 <close_stdout@@Base+0x5704>
   19044:	rsb	r9, r0, r1
   19048:	mov	r1, r5
   1904c:	str	r3, [sp]
   19050:	uxth	fp, fp
   19054:	mov	r0, r9
   19058:	bl	18648 <close_stdout@@Base+0x4b68>
   1905c:	mov	r1, r5
   19060:	mov	r4, r0
   19064:	mov	r0, r9
   19068:	bl	18834 <close_stdout@@Base+0x4d54>
   1906c:	mul	r9, sl, r4
   19070:	ldr	r3, [sp]
   19074:	orr	r1, fp, r1, lsl #16
   19078:	cmp	r9, r1
   1907c:	bls	190a0 <close_stdout@@Base+0x55c0>
   19080:	adds	r1, r1, r8
   19084:	sub	r2, r4, #1
   19088:	bcs	1909c <close_stdout@@Base+0x55bc>
   1908c:	cmp	r9, r1
   19090:	subhi	r4, r4, #2
   19094:	addhi	r1, r1, r8
   19098:	bhi	190a0 <close_stdout@@Base+0x55c0>
   1909c:	mov	r4, r2
   190a0:	rsb	r9, r9, r1
   190a4:	orr	r4, r4, r3, lsl #16
   190a8:	b	18f14 <close_stdout@@Base+0x5434>
   190ac:	rsb	sl, r5, #32
   190b0:	lsl	r3, r2, r5
   190b4:	lsr	r0, r2, sl
   190b8:	lsr	r2, ip, sl
   190bc:	orr	r4, r0, r1, lsl r5
   190c0:	lsr	sl, r7, sl
   190c4:	mov	r0, r2
   190c8:	orr	sl, sl, ip, lsl r5
   190cc:	lsr	r9, r4, #16
   190d0:	str	r3, [sp, #4]
   190d4:	str	r2, [sp]
   190d8:	uxth	fp, r4
   190dc:	mov	r1, r9
   190e0:	bl	18648 <close_stdout@@Base+0x4b68>
   190e4:	ldr	r2, [sp]
   190e8:	mov	r1, r9
   190ec:	mov	r8, r0
   190f0:	mov	r0, r2
   190f4:	bl	18834 <close_stdout@@Base+0x4d54>
   190f8:	mul	r0, fp, r8
   190fc:	lsr	r2, sl, #16
   19100:	orr	r1, r2, r1, lsl #16
   19104:	cmp	r0, r1
   19108:	bls	19128 <close_stdout@@Base+0x5648>
   1910c:	adds	r1, r1, r4
   19110:	sub	r2, r8, #1
   19114:	bcs	191dc <close_stdout@@Base+0x56fc>
   19118:	cmp	r0, r1
   1911c:	subhi	r8, r8, #2
   19120:	addhi	r1, r1, r4
   19124:	bls	191dc <close_stdout@@Base+0x56fc>
   19128:	rsb	ip, r0, r1
   1912c:	mov	r1, r9
   19130:	str	ip, [sp]
   19134:	mov	r0, ip
   19138:	bl	18648 <close_stdout@@Base+0x4b68>
   1913c:	ldr	ip, [sp]
   19140:	mov	r1, r9
   19144:	mov	r2, r0
   19148:	mov	r0, ip
   1914c:	str	r2, [sp]
   19150:	bl	18834 <close_stdout@@Base+0x4d54>
   19154:	ldr	r2, [sp]
   19158:	uxth	ip, sl
   1915c:	mul	fp, fp, r2
   19160:	orr	ip, ip, r1, lsl #16
   19164:	cmp	fp, ip
   19168:	bls	19188 <close_stdout@@Base+0x56a8>
   1916c:	adds	ip, ip, r4
   19170:	sub	r1, r2, #1
   19174:	bcs	191d4 <close_stdout@@Base+0x56f4>
   19178:	cmp	fp, ip
   1917c:	subhi	r2, r2, #2
   19180:	addhi	ip, ip, r4
   19184:	bls	191d4 <close_stdout@@Base+0x56f4>
   19188:	ldr	r0, [sp, #4]
   1918c:	orr	r1, r2, r8, lsl #16
   19190:	rsb	fp, fp, ip
   19194:	umull	r2, r3, r1, r0
   19198:	cmp	fp, r3
   1919c:	bcc	191c0 <close_stdout@@Base+0x56e0>
   191a0:	movne	r4, #0
   191a4:	moveq	r4, #1
   191a8:	cmp	r2, r7, lsl r5
   191ac:	movls	r4, #0
   191b0:	andhi	r4, r4, #1
   191b4:	cmp	r4, #0
   191b8:	moveq	r3, r1
   191bc:	beq	18e84 <close_stdout@@Base+0x53a4>
   191c0:	sub	r3, r1, #1
   191c4:	mov	r4, #0
   191c8:	b	18e84 <close_stdout@@Base+0x53a4>
   191cc:	mov	fp, r3
   191d0:	b	18f60 <close_stdout@@Base+0x5480>
   191d4:	mov	r2, r1
   191d8:	b	19188 <close_stdout@@Base+0x56a8>
   191dc:	mov	r8, r2
   191e0:	b	19128 <close_stdout@@Base+0x5648>
   191e4:	mov	r3, r2
   191e8:	b	19044 <close_stdout@@Base+0x5564>
   191ec:	cmp	r3, #0
   191f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191f4:	mov	r6, r0
   191f8:	sub	sp, sp, #12
   191fc:	mov	r5, r1
   19200:	mov	r7, r0
   19204:	mov	r4, r2
   19208:	mov	r8, r1
   1920c:	bne	192ec <close_stdout@@Base+0x580c>
   19210:	cmp	r2, r1
   19214:	bls	19328 <close_stdout@@Base+0x5848>
   19218:	clz	r3, r2
   1921c:	cmp	r3, #0
   19220:	rsbne	r8, r3, #32
   19224:	lslne	r4, r2, r3
   19228:	lsrne	r8, r0, r8
   1922c:	lslne	r7, r0, r3
   19230:	orrne	r8, r8, r1, lsl r3
   19234:	lsr	r5, r4, #16
   19238:	uxth	sl, r4
   1923c:	mov	r1, r5
   19240:	mov	r0, r8
   19244:	bl	18648 <close_stdout@@Base+0x4b68>
   19248:	mov	r1, r5
   1924c:	mov	r9, r0
   19250:	mov	r0, r8
   19254:	bl	18834 <close_stdout@@Base+0x4d54>
   19258:	mul	r0, sl, r9
   1925c:	lsr	r3, r7, #16
   19260:	orr	r1, r3, r1, lsl #16
   19264:	cmp	r0, r1
   19268:	bls	1928c <close_stdout@@Base+0x57ac>
   1926c:	adds	r1, r1, r4
   19270:	sub	r2, r9, #1
   19274:	bcs	19288 <close_stdout@@Base+0x57a8>
   19278:	cmp	r0, r1
   1927c:	subhi	r9, r9, #2
   19280:	addhi	r1, r1, r4
   19284:	bhi	1928c <close_stdout@@Base+0x57ac>
   19288:	mov	r9, r2
   1928c:	rsb	r8, r0, r1
   19290:	mov	r1, r5
   19294:	uxth	r7, r7
   19298:	mov	r0, r8
   1929c:	bl	18648 <close_stdout@@Base+0x4b68>
   192a0:	mov	r1, r5
   192a4:	mov	r6, r0
   192a8:	mov	r0, r8
   192ac:	bl	18834 <close_stdout@@Base+0x4d54>
   192b0:	mul	sl, sl, r6
   192b4:	orr	r1, r7, r1, lsl #16
   192b8:	cmp	sl, r1
   192bc:	bls	192d8 <close_stdout@@Base+0x57f8>
   192c0:	adds	r4, r1, r4
   192c4:	sub	r3, r6, #1
   192c8:	bcs	195d4 <close_stdout@@Base+0x5af4>
   192cc:	cmp	sl, r4
   192d0:	subhi	r6, r6, #2
   192d4:	bls	195d4 <close_stdout@@Base+0x5af4>
   192d8:	orr	r0, r6, r9, lsl #16
   192dc:	mov	r6, #0
   192e0:	mov	r1, r6
   192e4:	add	sp, sp, #12
   192e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192ec:	cmp	r3, r1
   192f0:	movhi	r6, #0
   192f4:	movhi	r0, r6
   192f8:	bhi	192e0 <close_stdout@@Base+0x5800>
   192fc:	clz	r7, r3
   19300:	cmp	r7, #0
   19304:	bne	19404 <close_stdout@@Base+0x5924>
   19308:	cmp	r3, r1
   1930c:	cmpcs	r2, r6
   19310:	movhi	r6, #0
   19314:	movls	r6, #1
   19318:	movls	r0, #1
   1931c:	movls	r6, r7
   19320:	movhi	r0, r6
   19324:	b	192e0 <close_stdout@@Base+0x5800>
   19328:	cmp	r2, #0
   1932c:	bne	19340 <close_stdout@@Base+0x5860>
   19330:	mov	r1, r2
   19334:	mov	r0, #1
   19338:	bl	18648 <close_stdout@@Base+0x4b68>
   1933c:	mov	r4, r0
   19340:	clz	r3, r4
   19344:	cmp	r3, #0
   19348:	bne	19500 <close_stdout@@Base+0x5a20>
   1934c:	rsb	r5, r4, r5
   19350:	lsr	r8, r4, #16
   19354:	uxth	sl, r4
   19358:	mov	r6, #1
   1935c:	mov	r1, r8
   19360:	mov	r0, r5
   19364:	bl	18648 <close_stdout@@Base+0x4b68>
   19368:	mov	r1, r8
   1936c:	mov	r9, r0
   19370:	mov	r0, r5
   19374:	bl	18834 <close_stdout@@Base+0x4d54>
   19378:	mul	r0, sl, r9
   1937c:	lsr	r3, r7, #16
   19380:	orr	r1, r3, r1, lsl #16
   19384:	cmp	r0, r1
   19388:	bls	193a8 <close_stdout@@Base+0x58c8>
   1938c:	adds	r1, r1, r4
   19390:	sub	r2, r9, #1
   19394:	bcs	195dc <close_stdout@@Base+0x5afc>
   19398:	cmp	r0, r1
   1939c:	subhi	r9, r9, #2
   193a0:	addhi	r1, r1, r4
   193a4:	bls	195dc <close_stdout@@Base+0x5afc>
   193a8:	rsb	fp, r0, r1
   193ac:	mov	r1, r8
   193b0:	uxth	r7, r7
   193b4:	mov	r0, fp
   193b8:	bl	18648 <close_stdout@@Base+0x4b68>
   193bc:	mov	r1, r8
   193c0:	mov	r5, r0
   193c4:	mov	r0, fp
   193c8:	bl	18834 <close_stdout@@Base+0x4d54>
   193cc:	mul	sl, sl, r5
   193d0:	orr	r1, r7, r1, lsl #16
   193d4:	cmp	sl, r1
   193d8:	bls	193f4 <close_stdout@@Base+0x5914>
   193dc:	adds	r4, r1, r4
   193e0:	sub	r3, r5, #1
   193e4:	bcs	195e4 <close_stdout@@Base+0x5b04>
   193e8:	cmp	sl, r4
   193ec:	subhi	r5, r5, #2
   193f0:	bls	195e4 <close_stdout@@Base+0x5b04>
   193f4:	orr	r0, r5, r9, lsl #16
   193f8:	mov	r1, r6
   193fc:	add	sp, sp, #12
   19400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19404:	rsb	r1, r7, #32
   19408:	lsl	r0, r2, r7
   1940c:	lsr	r2, r2, r1
   19410:	lsr	fp, r5, r1
   19414:	orr	r8, r2, r3, lsl r7
   19418:	lsr	r1, r6, r1
   1941c:	str	r0, [sp, #4]
   19420:	orr	r5, r1, r5, lsl r7
   19424:	lsr	r9, r8, #16
   19428:	mov	r0, fp
   1942c:	uxth	sl, r8
   19430:	mov	r1, r9
   19434:	bl	18648 <close_stdout@@Base+0x4b68>
   19438:	mov	r1, r9
   1943c:	mov	r4, r0
   19440:	mov	r0, fp
   19444:	bl	18834 <close_stdout@@Base+0x4d54>
   19448:	mul	r0, sl, r4
   1944c:	lsr	ip, r5, #16
   19450:	orr	r1, ip, r1, lsl #16
   19454:	cmp	r0, r1
   19458:	bls	1946c <close_stdout@@Base+0x598c>
   1945c:	adds	r1, r1, r8
   19460:	sub	r2, r4, #1
   19464:	bcc	19600 <close_stdout@@Base+0x5b20>
   19468:	mov	r4, r2
   1946c:	rsb	ip, r0, r1
   19470:	mov	r1, r9
   19474:	str	ip, [sp]
   19478:	uxth	r5, r5
   1947c:	mov	r0, ip
   19480:	bl	18648 <close_stdout@@Base+0x4b68>
   19484:	ldr	ip, [sp]
   19488:	mov	r1, r9
   1948c:	mov	fp, r0
   19490:	mov	r0, ip
   19494:	bl	18834 <close_stdout@@Base+0x4d54>
   19498:	mul	sl, sl, fp
   1949c:	orr	r1, r5, r1, lsl #16
   194a0:	cmp	sl, r1
   194a4:	bls	194b8 <close_stdout@@Base+0x59d8>
   194a8:	adds	r1, r1, r8
   194ac:	sub	r2, fp, #1
   194b0:	bcc	195ec <close_stdout@@Base+0x5b0c>
   194b4:	mov	fp, r2
   194b8:	ldr	r3, [sp, #4]
   194bc:	orr	r0, fp, r4, lsl #16
   194c0:	rsb	sl, sl, r1
   194c4:	umull	r4, r5, r0, r3
   194c8:	cmp	sl, r5
   194cc:	bcc	194ec <close_stdout@@Base+0x5a0c>
   194d0:	movne	r3, #0
   194d4:	moveq	r3, #1
   194d8:	cmp	r4, r6, lsl r7
   194dc:	movls	r6, #0
   194e0:	andhi	r6, r3, #1
   194e4:	cmp	r6, #0
   194e8:	beq	192e0 <close_stdout@@Base+0x5800>
   194ec:	mov	r6, #0
   194f0:	sub	r0, r0, #1
   194f4:	mov	r1, r6
   194f8:	add	sp, sp, #12
   194fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19500:	lsl	r4, r4, r3
   19504:	rsb	r9, r3, #32
   19508:	lsr	r2, r5, r9
   1950c:	lsr	r9, r6, r9
   19510:	lsr	r8, r4, #16
   19514:	orr	r9, r9, r5, lsl r3
   19518:	mov	r0, r2
   1951c:	lsl	r7, r6, r3
   19520:	mov	r1, r8
   19524:	str	r2, [sp]
   19528:	bl	18648 <close_stdout@@Base+0x4b68>
   1952c:	ldr	r2, [sp]
   19530:	mov	r1, r8
   19534:	uxth	sl, r4
   19538:	mov	fp, r0
   1953c:	mov	r0, r2
   19540:	bl	18834 <close_stdout@@Base+0x4d54>
   19544:	mul	r0, sl, fp
   19548:	lsr	r3, r9, #16
   1954c:	orr	r1, r3, r1, lsl #16
   19550:	cmp	r0, r1
   19554:	bls	19574 <close_stdout@@Base+0x5a94>
   19558:	adds	r1, r1, r4
   1955c:	sub	r3, fp, #1
   19560:	bcs	19614 <close_stdout@@Base+0x5b34>
   19564:	cmp	r0, r1
   19568:	subhi	fp, fp, #2
   1956c:	addhi	r1, r1, r4
   19570:	bls	19614 <close_stdout@@Base+0x5b34>
   19574:	rsb	r5, r0, r1
   19578:	mov	r1, r8
   1957c:	uxth	r9, r9
   19580:	mov	r0, r5
   19584:	bl	18648 <close_stdout@@Base+0x4b68>
   19588:	mov	r1, r8
   1958c:	mov	r6, r0
   19590:	mov	r0, r5
   19594:	bl	18834 <close_stdout@@Base+0x4d54>
   19598:	mul	r5, sl, r6
   1959c:	orr	r1, r9, r1, lsl #16
   195a0:	cmp	r5, r1
   195a4:	bls	195c8 <close_stdout@@Base+0x5ae8>
   195a8:	adds	r1, r1, r4
   195ac:	sub	r3, r6, #1
   195b0:	bcs	195c4 <close_stdout@@Base+0x5ae4>
   195b4:	cmp	r5, r1
   195b8:	subhi	r6, r6, #2
   195bc:	addhi	r1, r1, r4
   195c0:	bhi	195c8 <close_stdout@@Base+0x5ae8>
   195c4:	mov	r6, r3
   195c8:	rsb	r5, r5, r1
   195cc:	orr	r6, r6, fp, lsl #16
   195d0:	b	1935c <close_stdout@@Base+0x587c>
   195d4:	mov	r6, r3
   195d8:	b	192d8 <close_stdout@@Base+0x57f8>
   195dc:	mov	r9, r2
   195e0:	b	193a8 <close_stdout@@Base+0x58c8>
   195e4:	mov	r5, r3
   195e8:	b	193f4 <close_stdout@@Base+0x5914>
   195ec:	cmp	sl, r1
   195f0:	subhi	fp, fp, #2
   195f4:	addhi	r1, r1, r8
   195f8:	bhi	194b8 <close_stdout@@Base+0x59d8>
   195fc:	b	194b4 <close_stdout@@Base+0x59d4>
   19600:	cmp	r0, r1
   19604:	subhi	r4, r4, #2
   19608:	addhi	r1, r1, r8
   1960c:	bhi	1946c <close_stdout@@Base+0x598c>
   19610:	b	19468 <close_stdout@@Base+0x5988>
   19614:	mov	fp, r3
   19618:	b	19574 <close_stdout@@Base+0x5a94>
   1961c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   19620:	mov	r7, r0
   19624:	ldr	r6, [pc, #76]	; 19678 <close_stdout@@Base+0x5b98>
   19628:	mov	r8, r1
   1962c:	ldr	r5, [pc, #72]	; 1967c <close_stdout@@Base+0x5b9c>
   19630:	mov	r9, r2
   19634:	add	r6, pc, r6
   19638:	bl	11394 <fdopen@plt-0x20>
   1963c:	add	r5, pc, r5
   19640:	rsb	r6, r5, r6
   19644:	asrs	r6, r6, #2
   19648:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1964c:	sub	r5, r5, #4
   19650:	mov	r4, #0
   19654:	add	r4, r4, #1
   19658:	ldr	r3, [r5, #4]!
   1965c:	mov	r0, r7
   19660:	mov	r1, r8
   19664:	mov	r2, r9
   19668:	blx	r3
   1966c:	cmp	r4, r6
   19670:	bne	19654 <close_stdout@@Base+0x5b74>
   19674:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   19678:	ldrdeq	r2, [r1], -r4
   1967c:	andeq	r2, r1, r8, asr #15
   19680:	bx	lr
   19684:	ldr	r3, [pc, #28]	; 196a8 <close_stdout@@Base+0x5bc8>
   19688:	mov	r1, #0
   1968c:	ldr	r2, [pc, #24]	; 196ac <close_stdout@@Base+0x5bcc>
   19690:	add	r3, pc, r3
   19694:	ldr	r3, [r3, r2]
   19698:	cmp	r3, #0
   1969c:	ldrne	r2, [r3]
   196a0:	moveq	r2, r3
   196a4:	b	11630 <__cxa_atexit@plt>
   196a8:	andeq	r2, r1, r8, ror #18
   196ac:	andeq	r0, r0, r8, ror r1

Disassembly of section .fini:

000196b0 <.fini>:
   196b0:	push	{r3, lr}
   196b4:	pop	{r3, pc}
