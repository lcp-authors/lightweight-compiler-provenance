
centos-preinstalled/eu-elflint:     file format elf32-littlearm


Disassembly of section .init:

000112fc <.init>:
   112fc:	push	{r3, lr}
   11300:	bl	11964 <elf32_fsize@plt+0x2ac>
   11304:	pop	{r3, pc}

Disassembly of section .plt:

00011308 <calloc@plt-0x14>:
   11308:	push	{lr}		; (str lr, [sp, #-4]!)
   1130c:	ldr	lr, [pc, #4]	; 11318 <calloc@plt-0x4>
   11310:	add	lr, pc, lr
   11314:	ldr	pc, [lr, #8]!
   11318:	andeq	r7, r2, r8, ror #25

0001131c <calloc@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #159744	; 0x27000
   11324:	ldr	pc, [ip, #3304]!	; 0xce8

00011328 <gelf_getehdr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #159744	; 0x27000
   11330:	ldr	pc, [ip, #3296]!	; 0xce0

00011334 <raise@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #159744	; 0x27000
   1133c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011340 <gelf_getvernaux@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #159744	; 0x27000
   11348:	ldr	pc, [ip, #3280]!	; 0xcd0

0001134c <gelf_getshdr@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #159744	; 0x27000
   11354:	ldr	pc, [ip, #3272]!	; 0xcc8

00011358 <strcmp@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #159744	; 0x27000
   11360:	ldr	pc, [ip, #3264]!	; 0xcc0

00011364 <elf_version@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #159744	; 0x27000
   1136c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011370 <free@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #159744	; 0x27000
   11378:	ldr	pc, [ip, #3248]!	; 0xcb0

0001137c <memcpy@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #159744	; 0x27000
   11384:	ldr	pc, [ip, #3240]!	; 0xca8

00011388 <memcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #159744	; 0x27000
   11390:	ldr	pc, [ip, #3232]!	; 0xca0

00011394 <stpcpy@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #159744	; 0x27000
   1139c:	ldr	pc, [ip, #3224]!	; 0xc98

000113a0 <elf_getident@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #159744	; 0x27000
   113a8:	ldr	pc, [ip, #3216]!	; 0xc90

000113ac <gelf_getversym@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #159744	; 0x27000
   113b4:	ldr	pc, [ip, #3208]!	; 0xc88

000113b8 <dcgettext@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #159744	; 0x27000
   113c0:	ldr	pc, [ip, #3200]!	; 0xc80

000113c4 <gelf_getverneed@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #159744	; 0x27000
   113cc:	ldr	pc, [ip, #3192]!	; 0xc78

000113d0 <gelf_getnote@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #159744	; 0x27000
   113d8:	ldr	pc, [ip, #3184]!	; 0xc70

000113dc <__stack_chk_fail@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #159744	; 0x27000
   113e4:	ldr	pc, [ip, #3176]!	; 0xc68

000113e8 <dlclose@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #159744	; 0x27000
   113f0:	ldr	pc, [ip, #3168]!	; 0xc60

000113f4 <gelf_getphdr@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #159744	; 0x27000
   113fc:	ldr	pc, [ip, #3160]!	; 0xc58

00011400 <elf_hash@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #159744	; 0x27000
   11408:	ldr	pc, [ip, #3152]!	; 0xc50

0001140c <realloc@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #159744	; 0x27000
   11414:	ldr	pc, [ip, #3144]!	; 0xc48

00011418 <gelf_getsym@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #159744	; 0x27000
   11420:	ldr	pc, [ip, #3136]!	; 0xc40

00011424 <gelf_getclass@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #159744	; 0x27000
   1142c:	ldr	pc, [ip, #3128]!	; 0xc38

00011430 <elf_strptr@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #159744	; 0x27000
   11438:	ldr	pc, [ip, #3120]!	; 0xc30

0001143c <textdomain@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #159744	; 0x27000
   11444:	ldr	pc, [ip, #3112]!	; 0xc28

00011448 <elf_compress@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #159744	; 0x27000
   11450:	ldr	pc, [ip, #3104]!	; 0xc20

00011454 <__fxstat64@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #159744	; 0x27000
   1145c:	ldr	pc, [ip, #3096]!	; 0xc18

00011460 <__memcpy_chk@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #159744	; 0x27000
   11468:	ldr	pc, [ip, #3088]!	; 0xc10

0001146c <__stpcpy_chk@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #159744	; 0x27000
   11474:	ldr	pc, [ip, #3080]!	; 0xc08

00011478 <dlopen@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #159744	; 0x27000
   11480:	ldr	pc, [ip, #3072]!	; 0xc00

00011484 <elf_getdata@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #159744	; 0x27000
   1148c:	ldr	pc, [ip, #3064]!	; 0xbf8

00011490 <gelf_fsize@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #159744	; 0x27000
   11498:	ldr	pc, [ip, #3056]!	; 0xbf0

0001149c <error@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #159744	; 0x27000
   114a4:	ldr	pc, [ip, #3048]!	; 0xbe8

000114a8 <gelf_offscn@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #159744	; 0x27000
   114b0:	ldr	pc, [ip, #3040]!	; 0xbe0

000114b4 <open64@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #159744	; 0x27000
   114bc:	ldr	pc, [ip, #3032]!	; 0xbd8

000114c0 <puts@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #159744	; 0x27000
   114c8:	ldr	pc, [ip, #3024]!	; 0xbd0

000114cc <malloc@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #159744	; 0x27000
   114d4:	ldr	pc, [ip, #3016]!	; 0xbc8

000114d8 <__libc_start_main@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #159744	; 0x27000
   114e0:	ldr	pc, [ip, #3008]!	; 0xbc0

000114e4 <__gmon_start__@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #159744	; 0x27000
   114ec:	ldr	pc, [ip, #3000]!	; 0xbb8

000114f0 <mempcpy@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #159744	; 0x27000
   114f8:	ldr	pc, [ip, #2992]!	; 0xbb0

000114fc <elf_end@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #159744	; 0x27000
   11504:	ldr	pc, [ip, #2984]!	; 0xba8

00011508 <exit@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #159744	; 0x27000
   11510:	ldr	pc, [ip, #2976]!	; 0xba0

00011514 <strlen@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #159744	; 0x27000
   1151c:	ldr	pc, [ip, #2968]!	; 0xb98

00011520 <elf_errmsg@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #159744	; 0x27000
   11528:	ldr	pc, [ip, #2960]!	; 0xb90

0001152c <gelf_getverdaux@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #159744	; 0x27000
   11534:	ldr	pc, [ip, #2952]!	; 0xb88

00011538 <gelf_getrela@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #159744	; 0x27000
   11540:	ldr	pc, [ip, #2944]!	; 0xb80

00011544 <__errno_location@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #159744	; 0x27000
   1154c:	ldr	pc, [ip, #2936]!	; 0xb78

00011550 <argp_help@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #159744	; 0x27000
   11558:	ldr	pc, [ip, #2928]!	; 0xb70

0001155c <memset@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #159744	; 0x27000
   11564:	ldr	pc, [ip, #2920]!	; 0xb68

00011568 <elf_rawdata@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #159744	; 0x27000
   11570:	ldr	pc, [ip, #2912]!	; 0xb60

00011574 <argp_parse@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #159744	; 0x27000
   1157c:	ldr	pc, [ip, #2904]!	; 0xb58

00011580 <__printf_chk@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #159744	; 0x27000
   11588:	ldr	pc, [ip, #2896]!	; 0xb50

0001158c <__fprintf_chk@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #159744	; 0x27000
   11594:	ldr	pc, [ip, #2888]!	; 0xb48

00011598 <elf_begin@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #159744	; 0x27000
   115a0:	ldr	pc, [ip, #2880]!	; 0xb40

000115a4 <memchr@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #159744	; 0x27000
   115ac:	ldr	pc, [ip, #2872]!	; 0xb38

000115b0 <gelf_getverdef@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #159744	; 0x27000
   115b8:	ldr	pc, [ip, #2864]!	; 0xb30

000115bc <elf_gnu_hash@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #159744	; 0x27000
   115c4:	ldr	pc, [ip, #2856]!	; 0xb28

000115c8 <setlocale@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #159744	; 0x27000
   115d0:	ldr	pc, [ip, #2848]!	; 0xb20

000115d4 <elf_nextscn@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #159744	; 0x27000
   115dc:	ldr	pc, [ip, #2840]!	; 0xb18

000115e0 <elf_getdata_rawchunk@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #159744	; 0x27000
   115e8:	ldr	pc, [ip, #2832]!	; 0xb10

000115ec <gelf_getrel@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #159744	; 0x27000
   115f4:	ldr	pc, [ip, #2824]!	; 0xb08

000115f8 <gelf_getdyn@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #159744	; 0x27000
   11600:	ldr	pc, [ip, #2816]!	; 0xb00

00011604 <elf_next@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #159744	; 0x27000
   1160c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011610 <gelf_getchdr@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #159744	; 0x27000
   11618:	ldr	pc, [ip, #2800]!	; 0xaf0

0001161c <elf_ndxscn@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #159744	; 0x27000
   11624:	ldr	pc, [ip, #2792]!	; 0xae8

00011628 <elf_getscn@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #159744	; 0x27000
   11630:	ldr	pc, [ip, #2784]!	; 0xae0

00011634 <elf_getarhdr@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #159744	; 0x27000
   1163c:	ldr	pc, [ip, #2776]!	; 0xad8

00011640 <gelf_getsymshndx@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #159744	; 0x27000
   11648:	ldr	pc, [ip, #2768]!	; 0xad0

0001164c <fputs@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #159744	; 0x27000
   11654:	ldr	pc, [ip, #2760]!	; 0xac8

00011658 <strncmp@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #159744	; 0x27000
   11660:	ldr	pc, [ip, #2752]!	; 0xac0

00011664 <abort@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #159744	; 0x27000
   1166c:	ldr	pc, [ip, #2744]!	; 0xab8

00011670 <close@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #159744	; 0x27000
   11678:	ldr	pc, [ip, #2736]!	; 0xab0

0001167c <dlsym@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #159744	; 0x27000
   11684:	ldr	pc, [ip, #2728]!	; 0xaa8

00011688 <elf_kind@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #159744	; 0x27000
   11690:	ldr	pc, [ip, #2720]!	; 0xaa0

00011694 <__snprintf_chk@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #159744	; 0x27000
   1169c:	ldr	pc, [ip, #2712]!	; 0xa98

000116a0 <__mempcpy_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #159744	; 0x27000
   116a8:	ldr	pc, [ip, #2704]!	; 0xa90

000116ac <__assert_fail@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #159744	; 0x27000
   116b4:	ldr	pc, [ip, #2696]!	; 0xa88

000116b8 <elf32_fsize@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #159744	; 0x27000
   116c0:	ldr	pc, [ip, #2688]!	; 0xa80

Disassembly of section .text:

000116c4 <.text>:
   116c4:	movw	ip, #37240	; 0x9178
   116c8:	movt	ip, #3
   116cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116d0:	sub	sp, sp, #148	; 0x94
   116d4:	ldr	r3, [ip]
   116d8:	mov	r8, r0
   116dc:	mov	r5, r1
   116e0:	mov	r0, #6
   116e4:	movw	r1, #6476	; 0x194c
   116e8:	movt	r1, #2
   116ec:	str	ip, [sp, #16]
   116f0:	movw	r6, #37252	; 0x9184
   116f4:	str	r3, [sp, #140]	; 0x8c
   116f8:	bl	115c8 <setlocale@plt>
   116fc:	movw	r0, #26948	; 0x6944
   11700:	movt	r0, #2
   11704:	bl	1143c <textdomain@plt>
   11708:	mov	r3, #0
   1170c:	mov	r1, r8
   11710:	mov	r2, r5
   11714:	str	r3, [sp, #4]
   11718:	add	ip, sp, #28
   1171c:	movw	r0, #37200	; 0x9150
   11720:	str	ip, [sp]
   11724:	movt	r0, #3
   11728:	movt	r6, #3
   1172c:	bl	11574 <argp_parse@plt>
   11730:	mov	r0, #1
   11734:	bl	11364 <elf_version@plt>
   11738:	ldr	r3, [sp, #28]
   1173c:	mov	sl, r6
   11740:	add	r2, r3, #1
   11744:	subs	r1, r2, r8
   11748:	rsbs	r2, r1, #0
   1174c:	adcs	r2, r2, r1
   11750:	str	r2, [sp, #20]
   11754:	b	1178c <elf32_fsize@plt+0xd4>
   11758:	ldr	r3, [sp, #28]
   1175c:	movw	r1, #27020	; 0x698c
   11760:	mov	r0, #1
   11764:	movt	r1, #2
   11768:	ldr	r2, [r5, r3, lsl #2]
   1176c:	bl	11580 <__printf_chk@plt>
   11770:	mov	r0, r4
   11774:	bl	11670 <close@plt>
   11778:	ldr	r3, [sp, #28]
   1177c:	add	r3, r3, #1
   11780:	str	r3, [sp, #28]
   11784:	cmp	r8, r3
   11788:	ble	11894 <elf32_fsize@plt+0x1dc>
   1178c:	ldr	r0, [r5, r3, lsl #2]
   11790:	mov	r1, #0
   11794:	bl	114b4 <open64@plt>
   11798:	cmn	r0, #1
   1179c:	mov	r4, r0
   117a0:	beq	11828 <elf32_fsize@plt+0x170>
   117a4:	mov	r1, #8
   117a8:	mov	r2, #0
   117ac:	bl	11598 <elf_begin@plt>
   117b0:	subs	r9, r0, #0
   117b4:	beq	11858 <elf32_fsize@plt+0x1a0>
   117b8:	mov	r0, #3
   117bc:	mov	r1, r4
   117c0:	add	r2, sp, #32
   117c4:	ldr	fp, [r6, #4]
   117c8:	bl	11454 <__fxstat64@plt>
   117cc:	subs	r7, r0, #0
   117d0:	bne	11758 <elf32_fsize@plt+0xa0>
   117d4:	ldr	lr, [sp, #28]
   117d8:	mov	r0, r4
   117dc:	ldr	r3, [sp, #80]	; 0x50
   117e0:	mov	r1, r9
   117e4:	ldr	ip, [sp, #20]
   117e8:	mov	r2, r7
   117ec:	ldr	lr, [r5, lr, lsl #2]
   117f0:	stmib	sp, {r3, ip}
   117f4:	mov	r3, r7
   117f8:	str	lr, [sp]
   117fc:	bl	1d880 <elf32_fsize@plt+0xc1c8>
   11800:	mov	r0, r9
   11804:	bl	114fc <elf_end@plt>
   11808:	cmp	r0, #0
   1180c:	bne	118bc <elf32_fsize@plt+0x204>
   11810:	ldr	r3, [sl, #4]
   11814:	cmp	fp, r3
   11818:	beq	11900 <elf32_fsize@plt+0x248>
   1181c:	mov	r0, r4
   11820:	bl	11670 <close@plt>
   11824:	b	11778 <elf32_fsize@plt+0xc0>
   11828:	bl	11544 <__errno_location@plt>
   1182c:	mov	r2, #5
   11830:	movw	r1, #26960	; 0x6950
   11834:	movt	r1, #2
   11838:	ldr	r4, [r0]
   1183c:	mov	r0, #0
   11840:	bl	113b8 <dcgettext@plt>
   11844:	mov	r1, r4
   11848:	mov	r2, r0
   1184c:	mov	r0, #0
   11850:	bl	1149c <error@plt>
   11854:	b	11778 <elf32_fsize@plt+0xc0>
   11858:	mov	r2, #5
   1185c:	movw	r1, #26984	; 0x6968
   11860:	movt	r1, #2
   11864:	bl	113b8 <dcgettext@plt>
   11868:	mov	r9, r0
   1186c:	mvn	r0, #0
   11870:	bl	11520 <elf_errmsg@plt>
   11874:	mov	r1, r9
   11878:	mov	r2, r0
   1187c:	mov	r0, #1
   11880:	bl	11580 <__printf_chk@plt>
   11884:	ldr	r3, [r6, #4]
   11888:	add	r3, r3, #1
   1188c:	str	r3, [r6, #4]
   11890:	b	1181c <elf32_fsize@plt+0x164>
   11894:	ldr	ip, [sp, #16]
   11898:	ldr	r0, [r6, #4]
   1189c:	ldr	r2, [sp, #140]	; 0x8c
   118a0:	adds	r0, r0, #0
   118a4:	ldr	r3, [ip]
   118a8:	movne	r0, #1
   118ac:	cmp	r2, r3
   118b0:	bne	11924 <elf32_fsize@plt+0x26c>
   118b4:	add	sp, sp, #148	; 0x94
   118b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118bc:	mov	r2, #5
   118c0:	mov	r0, r7
   118c4:	movw	r1, #27044	; 0x69a4
   118c8:	movt	r1, #2
   118cc:	bl	113b8 <dcgettext@plt>
   118d0:	mov	r9, r0
   118d4:	mvn	r0, #0
   118d8:	bl	11520 <elf_errmsg@plt>
   118dc:	mov	r1, r9
   118e0:	mov	r2, r0
   118e4:	mov	r0, #1
   118e8:	bl	11580 <__printf_chk@plt>
   118ec:	ldr	r3, [sl, #4]
   118f0:	add	r3, r3, #1
   118f4:	str	r3, [sl, #4]
   118f8:	cmp	fp, r3
   118fc:	bne	1181c <elf32_fsize@plt+0x164>
   11900:	ldrb	r0, [r6, #21]
   11904:	cmp	r0, #0
   11908:	bne	1181c <elf32_fsize@plt+0x164>
   1190c:	mov	r2, #5
   11910:	movw	r1, #27084	; 0x69cc
   11914:	movt	r1, #2
   11918:	bl	113b8 <dcgettext@plt>
   1191c:	bl	114c0 <puts@plt>
   11920:	b	1181c <elf32_fsize@plt+0x164>
   11924:	bl	113dc <__stack_chk_fail@plt>
   11928:	mov	fp, #0
   1192c:	mov	lr, #0
   11930:	pop	{r1}		; (ldr r1, [sp], #4)
   11934:	mov	r2, sp
   11938:	push	{r2}		; (str r2, [sp, #-4]!)
   1193c:	push	{r0}		; (str r0, [sp, #-4]!)
   11940:	ldr	ip, [pc, #16]	; 11958 <elf32_fsize@plt+0x2a0>
   11944:	push	{ip}		; (str ip, [sp, #-4]!)
   11948:	ldr	r0, [pc, #12]	; 1195c <elf32_fsize@plt+0x2a4>
   1194c:	ldr	r3, [pc, #12]	; 11960 <elf32_fsize@plt+0x2a8>
   11950:	bl	114d8 <__libc_start_main@plt>
   11954:	bl	11664 <abort@plt>
   11958:	andeq	r0, r2, r0, lsl lr
   1195c:	andeq	r1, r1, r4, asr #13
   11960:	andeq	r0, r2, ip, lsr #27
   11964:	ldr	r3, [pc, #20]	; 11980 <elf32_fsize@plt+0x2c8>
   11968:	ldr	r2, [pc, #20]	; 11984 <elf32_fsize@plt+0x2cc>
   1196c:	add	r3, pc, r3
   11970:	ldr	r2, [r3, r2]
   11974:	cmp	r2, #0
   11978:	bxeq	lr
   1197c:	b	114e4 <__gmon_start__@plt>
   11980:	andeq	r7, r2, ip, lsl #13
   11984:	andeq	r0, r0, r8, asr #2
   11988:	push	{r3, lr}
   1198c:	movw	r0, #37228	; 0x916c
   11990:	ldr	r3, [pc, #36]	; 119bc <elf32_fsize@plt+0x304>
   11994:	movt	r0, #3
   11998:	rsb	r3, r0, r3
   1199c:	cmp	r3, #6
   119a0:	popls	{r3, pc}
   119a4:	movw	r3, #0
   119a8:	movt	r3, #0
   119ac:	cmp	r3, #0
   119b0:	popeq	{r3, pc}
   119b4:	blx	r3
   119b8:	pop	{r3, pc}
   119bc:	andeq	r9, r3, pc, ror #2
   119c0:	push	{r3, lr}
   119c4:	movw	r0, #37228	; 0x916c
   119c8:	movw	r3, #37228	; 0x916c
   119cc:	movt	r0, #3
   119d0:	movt	r3, #3
   119d4:	rsb	r3, r0, r3
   119d8:	asr	r3, r3, #2
   119dc:	add	r3, r3, r3, lsr #31
   119e0:	asrs	r1, r3, #1
   119e4:	popeq	{r3, pc}
   119e8:	movw	r2, #0
   119ec:	movt	r2, #0
   119f0:	cmp	r2, #0
   119f4:	popeq	{r3, pc}
   119f8:	blx	r2
   119fc:	pop	{r3, pc}
   11a00:	push	{r4, lr}
   11a04:	movw	r4, #37248	; 0x9180
   11a08:	movt	r4, #3
   11a0c:	ldrb	r3, [r4]
   11a10:	cmp	r3, #0
   11a14:	popne	{r4, pc}
   11a18:	bl	11988 <elf32_fsize@plt+0x2d0>
   11a1c:	mov	r3, #1
   11a20:	strb	r3, [r4]
   11a24:	pop	{r4, pc}
   11a28:	movw	r0, #33928	; 0x8488
   11a2c:	movt	r0, #3
   11a30:	push	{r3, lr}
   11a34:	ldr	r3, [r0]
   11a38:	cmp	r3, #0
   11a3c:	beq	11a54 <elf32_fsize@plt+0x39c>
   11a40:	movw	r3, #0
   11a44:	movt	r3, #0
   11a48:	cmp	r3, #0
   11a4c:	beq	11a54 <elf32_fsize@plt+0x39c>
   11a50:	blx	r3
   11a54:	pop	{r3, lr}
   11a58:	b	119c0 <elf32_fsize@plt+0x308>
   11a5c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11a60:	movw	r7, #37252	; 0x9184
   11a64:	movt	r7, #3
   11a68:	mov	r5, r0
   11a6c:	mov	r6, r1
   11a70:	mov	r9, r2
   11a74:	ldr	r4, [r7]
   11a78:	mov	r8, r3
   11a7c:	cmp	r4, #0
   11a80:	bne	11abc <elf32_fsize@plt+0x404>
   11a84:	b	11ae0 <elf32_fsize@plt+0x428>
   11a88:	cmp	r5, #0
   11a8c:	beq	11ab0 <elf32_fsize@plt+0x3f8>
   11a90:	bl	11358 <strcmp@plt>
   11a94:	cmp	r0, #0
   11a98:	bne	11ab0 <elf32_fsize@plt+0x3f8>
   11a9c:	ldr	r0, [r4, #4]
   11aa0:	mov	r1, r6
   11aa4:	bl	11358 <strcmp@plt>
   11aa8:	cmp	r0, #0
   11aac:	beq	11b0c <elf32_fsize@plt+0x454>
   11ab0:	ldr	r4, [r4, #16]
   11ab4:	cmp	r4, #0
   11ab8:	beq	11ae0 <elf32_fsize@plt+0x428>
   11abc:	ldr	r0, [r4]
   11ac0:	mov	r1, r5
   11ac4:	cmp	r0, #0
   11ac8:	bne	11a88 <elf32_fsize@plt+0x3d0>
   11acc:	cmp	r5, #0
   11ad0:	beq	11a9c <elf32_fsize@plt+0x3e4>
   11ad4:	ldr	r4, [r4, #16]
   11ad8:	cmp	r4, #0
   11adc:	bne	11abc <elf32_fsize@plt+0x404>
   11ae0:	mov	r0, #20
   11ae4:	bl	200f4 <elf32_fsize@plt+0xea3c>
   11ae8:	ldr	r3, [r7]
   11aec:	mov	r1, r0
   11af0:	mov	r0, #0
   11af4:	stm	r1, {r5, r6}
   11af8:	strh	r9, [r1, #8]
   11afc:	str	r8, [r1, #12]
   11b00:	str	r3, [r1, #16]
   11b04:	str	r1, [r7]
   11b08:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11b0c:	ldr	r3, [r4, #12]
   11b10:	cmp	r3, #0
   11b14:	mvnne	r0, #0
   11b18:	moveq	r0, #1
   11b1c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b24:	movw	r9, #37240	; 0x9178
   11b28:	movt	r9, #3
   11b2c:	ldrb	r3, [r1]
   11b30:	mov	sl, r2
   11b34:	sub	sp, sp, #588	; 0x24c
   11b38:	ldr	r2, [r9]
   11b3c:	cmp	r3, #127	; 0x7f
   11b40:	movw	r6, #37252	; 0x9184
   11b44:	mov	r7, r1
   11b48:	mov	r8, r0
   11b4c:	movt	r6, #3
   11b50:	str	r2, [sp, #580]	; 0x244
   11b54:	beq	11b7c <elf32_fsize@plt+0x4c4>
   11b58:	mov	r3, #127	; 0x7f
   11b5c:	movw	r1, #6456	; 0x1938
   11b60:	mov	r0, #1
   11b64:	movt	r1, #2
   11b68:	mov	r2, #0
   11b6c:	bl	11580 <__printf_chk@plt>
   11b70:	ldr	r3, [r6, #4]
   11b74:	add	r3, r3, #1
   11b78:	str	r3, [r6, #4]
   11b7c:	ldrb	r3, [r7, #1]
   11b80:	cmp	r3, #69	; 0x45
   11b84:	beq	11bac <elf32_fsize@plt+0x4f4>
   11b88:	mov	r0, #1
   11b8c:	mov	r3, #69	; 0x45
   11b90:	movw	r1, #6456	; 0x1938
   11b94:	mov	r2, r0
   11b98:	movt	r1, #2
   11b9c:	bl	11580 <__printf_chk@plt>
   11ba0:	ldr	r3, [r6, #4]
   11ba4:	add	r3, r3, #1
   11ba8:	str	r3, [r6, #4]
   11bac:	ldrb	r3, [r7, #2]
   11bb0:	cmp	r3, #76	; 0x4c
   11bb4:	beq	11bdc <elf32_fsize@plt+0x524>
   11bb8:	mov	r3, #76	; 0x4c
   11bbc:	movw	r1, #6456	; 0x1938
   11bc0:	mov	r0, #1
   11bc4:	movt	r1, #2
   11bc8:	mov	r2, #2
   11bcc:	bl	11580 <__printf_chk@plt>
   11bd0:	ldr	r3, [r6, #4]
   11bd4:	add	r3, r3, #1
   11bd8:	str	r3, [r6, #4]
   11bdc:	ldrb	r3, [r7, #3]
   11be0:	cmp	r3, #70	; 0x46
   11be4:	beq	11c0c <elf32_fsize@plt+0x554>
   11be8:	mov	r3, #70	; 0x46
   11bec:	movw	r1, #6456	; 0x1938
   11bf0:	mov	r0, #1
   11bf4:	movt	r1, #2
   11bf8:	mov	r2, #3
   11bfc:	bl	11580 <__printf_chk@plt>
   11c00:	ldr	r3, [r6, #4]
   11c04:	add	r3, r3, #1
   11c08:	str	r3, [r6, #4]
   11c0c:	ldrb	r3, [r7, #4]
   11c10:	sub	r3, r3, #1
   11c14:	cmp	r3, #1
   11c18:	bls	11c50 <elf32_fsize@plt+0x598>
   11c1c:	mov	r2, #5
   11c20:	movw	r1, #6480	; 0x1950
   11c24:	mov	r0, #0
   11c28:	movt	r1, #2
   11c2c:	bl	113b8 <dcgettext@plt>
   11c30:	ldrb	r3, [r7, #4]
   11c34:	mov	r2, #4
   11c38:	mov	r1, r0
   11c3c:	mov	r0, #1
   11c40:	bl	11580 <__printf_chk@plt>
   11c44:	ldr	r3, [r6, #4]
   11c48:	add	r3, r3, #1
   11c4c:	str	r3, [r6, #4]
   11c50:	ldrb	r3, [r7, #5]
   11c54:	sub	r3, r3, #1
   11c58:	cmp	r3, #1
   11c5c:	bls	11c94 <elf32_fsize@plt+0x5dc>
   11c60:	mov	r2, #5
   11c64:	movw	r1, #6520	; 0x1978
   11c68:	mov	r0, #0
   11c6c:	movt	r1, #2
   11c70:	bl	113b8 <dcgettext@plt>
   11c74:	ldrb	r3, [r7, #5]
   11c78:	mov	r2, #5
   11c7c:	mov	r1, r0
   11c80:	mov	r0, #1
   11c84:	bl	11580 <__printf_chk@plt>
   11c88:	ldr	r3, [r6, #4]
   11c8c:	add	r3, r3, #1
   11c90:	str	r3, [r6, #4]
   11c94:	ldrb	r3, [r7, #6]
   11c98:	cmp	r3, #1
   11c9c:	beq	11cd4 <elf32_fsize@plt+0x61c>
   11ca0:	mov	r2, #5
   11ca4:	movw	r1, #6568	; 0x19a8
   11ca8:	mov	r0, #0
   11cac:	movt	r1, #2
   11cb0:	bl	113b8 <dcgettext@plt>
   11cb4:	ldrb	r3, [r7, #6]
   11cb8:	mov	r2, #6
   11cbc:	mov	r1, r0
   11cc0:	mov	r0, #1
   11cc4:	bl	11580 <__printf_chk@plt>
   11cc8:	ldr	r3, [r6, #4]
   11ccc:	add	r3, r3, #1
   11cd0:	str	r3, [r6, #4]
   11cd4:	ldrb	r3, [r7, #7]
   11cd8:	cmp	r3, #0
   11cdc:	cmpne	r3, #3
   11ce0:	beq	11d38 <elf32_fsize@plt+0x680>
   11ce4:	cmp	r3, #9
   11ce8:	beq	11d38 <elf32_fsize@plt+0x680>
   11cec:	mov	r2, #5
   11cf0:	movw	r1, #6624	; 0x19e0
   11cf4:	mov	r0, #0
   11cf8:	movt	r1, #2
   11cfc:	bl	113b8 <dcgettext@plt>
   11d00:	ldrb	r1, [r7, #7]
   11d04:	add	r2, sp, #68	; 0x44
   11d08:	mov	r3, #512	; 0x200
   11d0c:	mov	r4, r0
   11d10:	mov	r0, r8
   11d14:	bl	1fb84 <elf32_fsize@plt+0xe4cc>
   11d18:	mov	r1, r4
   11d1c:	mov	r2, #7
   11d20:	mov	r3, r0
   11d24:	mov	r0, #1
   11d28:	bl	11580 <__printf_chk@plt>
   11d2c:	ldr	r3, [r6, #4]
   11d30:	add	r3, r3, #1
   11d34:	str	r3, [r6, #4]
   11d38:	ldrb	r3, [r7, #8]
   11d3c:	cmp	r3, #0
   11d40:	bne	121a0 <elf32_fsize@plt+0xae8>
   11d44:	mov	r4, #9
   11d48:	b	11d58 <elf32_fsize@plt+0x6a0>
   11d4c:	add	r4, r4, #1
   11d50:	cmp	r4, #16
   11d54:	beq	11da0 <elf32_fsize@plt+0x6e8>
   11d58:	ldrb	r3, [r7, r4]
   11d5c:	cmp	r3, #0
   11d60:	beq	11d4c <elf32_fsize@plt+0x694>
   11d64:	mov	r2, #5
   11d68:	movw	r1, #6708	; 0x1a34
   11d6c:	mov	r0, #0
   11d70:	movt	r1, #2
   11d74:	bl	113b8 <dcgettext@plt>
   11d78:	mov	r2, r4
   11d7c:	add	r4, r4, #1
   11d80:	mov	r1, r0
   11d84:	mov	r0, #1
   11d88:	bl	11580 <__printf_chk@plt>
   11d8c:	ldr	r3, [r6, #4]
   11d90:	cmp	r4, #16
   11d94:	add	r3, r3, #1
   11d98:	str	r3, [r6, #4]
   11d9c:	bne	11d58 <elf32_fsize@plt+0x6a0>
   11da0:	ldrh	r3, [r7, #16]
   11da4:	sub	r3, r3, #1
   11da8:	cmp	r3, #3
   11dac:	bhi	12220 <elf32_fsize@plt+0xb68>
   11db0:	ldr	r3, [pc, #1988]	; 1257c <elf32_fsize@plt+0xec4>
   11db4:	ldrh	r1, [r7, #18]
   11db8:	add	r0, r3, #316	; 0x13c
   11dbc:	b	11dc8 <elf32_fsize@plt+0x710>
   11dc0:	cmp	r3, r0
   11dc4:	beq	12254 <elf32_fsize@plt+0xb9c>
   11dc8:	ldr	r2, [r3, #4]!
   11dcc:	cmp	r2, r1
   11dd0:	bne	11dc0 <elf32_fsize@plt+0x708>
   11dd4:	ldr	r3, [r7, #20]
   11dd8:	cmp	r3, #1
   11ddc:	beq	11e0c <elf32_fsize@plt+0x754>
   11de0:	mov	r2, #5
   11de4:	movw	r1, #6768	; 0x1a70
   11de8:	mov	r0, #0
   11dec:	movt	r1, #2
   11df0:	bl	113b8 <dcgettext@plt>
   11df4:	mov	r1, r0
   11df8:	mov	r0, #1
   11dfc:	bl	11580 <__printf_chk@plt>
   11e00:	ldr	r3, [r6, #4]
   11e04:	add	r3, r3, #1
   11e08:	str	r3, [r6, #4]
   11e0c:	ldrd	r2, [r7, #32]
   11e10:	ldrh	r0, [r7, #56]	; 0x38
   11e14:	orrs	r1, r2, r3
   11e18:	bne	11e84 <elf32_fsize@plt+0x7cc>
   11e1c:	cmp	r0, #0
   11e20:	bne	122f8 <elf32_fsize@plt+0xc40>
   11e24:	ldrh	r3, [r7, #16]
   11e28:	sub	r3, r3, #2
   11e2c:	cmp	r3, #1
   11e30:	movwls	r1, #6832	; 0x1ab0
   11e34:	movls	r2, #5
   11e38:	movtls	r1, #2
   11e3c:	bls	11e98 <elf32_fsize@plt+0x7e0>
   11e40:	ldrd	r0, [r7, #40]	; 0x28
   11e44:	movw	fp, #37252	; 0x9184
   11e48:	ldrh	r4, [r7, #60]	; 0x3c
   11e4c:	movt	fp, #3
   11e50:	ldrh	r3, [r7, #62]	; 0x3e
   11e54:	orrs	r2, r0, r1
   11e58:	str	r4, [r6, #8]
   11e5c:	str	r3, [r6, #12]
   11e60:	bne	11eb8 <elf32_fsize@plt+0x800>
   11e64:	cmp	r4, #0
   11e68:	bne	122c8 <elf32_fsize@plt+0xc10>
   11e6c:	ldrh	r3, [r7, #16]
   11e70:	sub	r3, r3, #2
   11e74:	cmp	r3, #2
   11e78:	bhi	12474 <elf32_fsize@plt+0xdbc>
   11e7c:	mov	r5, #1
   11e80:	b	11f6c <elf32_fsize@plt+0x8b4>
   11e84:	cmp	r0, #0
   11e88:	bne	11e40 <elf32_fsize@plt+0x788>
   11e8c:	movw	r1, #6896	; 0x1af0
   11e90:	movt	r1, #2
   11e94:	mov	r2, #5
   11e98:	bl	113b8 <dcgettext@plt>
   11e9c:	mov	r1, r0
   11ea0:	mov	r0, #1
   11ea4:	bl	11580 <__printf_chk@plt>
   11ea8:	ldr	r3, [r6, #4]
   11eac:	add	r3, r3, #1
   11eb0:	str	r3, [r6, #4]
   11eb4:	b	11e40 <elf32_fsize@plt+0x788>
   11eb8:	cmp	r4, #0
   11ebc:	beq	12288 <elf32_fsize@plt+0xbd0>
   11ec0:	movw	r2, #65535	; 0xffff
   11ec4:	cmp	r3, r2
   11ec8:	beq	1230c <elf32_fsize@plt+0xc54>
   11ecc:	ldr	r3, [r6, #8]
   11ed0:	movw	r4, #37252	; 0x9184
   11ed4:	ldr	r2, [r6, #12]
   11ed8:	movt	r4, #3
   11edc:	cmp	r2, r3
   11ee0:	bcs	12444 <elf32_fsize@plt+0xd8c>
   11ee4:	cmp	r3, #1
   11ee8:	movhi	r4, #0
   11eec:	movhi	r5, #1
   11ef0:	bhi	11f14 <elf32_fsize@plt+0x85c>
   11ef4:	b	11e7c <elf32_fsize@plt+0x7c4>
   11ef8:	mov	r1, #0
   11efc:	add	r5, r5, #1
   11f00:	mov	r2, r1
   11f04:	bl	11448 <elf_compress@plt>
   11f08:	ldr	r3, [r6, #8]
   11f0c:	cmp	r3, r5
   11f10:	bls	11f6c <elf32_fsize@plt+0x8b4>
   11f14:	mov	r1, r4
   11f18:	ldr	r0, [r8, #16]
   11f1c:	bl	115d4 <elf_nextscn@plt>
   11f20:	subs	r4, r0, #0
   11f24:	bne	11ef8 <elf32_fsize@plt+0x840>
   11f28:	ldr	fp, [r6, #8]
   11f2c:	movw	r4, #37252	; 0x9184
   11f30:	movt	r4, #3
   11f34:	cmp	fp, r5
   11f38:	bls	11f6c <elf32_fsize@plt+0x8b4>
   11f3c:	mov	r2, #5
   11f40:	movw	r1, #7100	; 0x1bbc
   11f44:	movt	r1, #2
   11f48:	bl	113b8 <dcgettext@plt>
   11f4c:	mov	r3, fp
   11f50:	mov	r2, r5
   11f54:	mov	r1, r0
   11f58:	mov	r0, #1
   11f5c:	bl	11580 <__printf_chk@plt>
   11f60:	ldr	r3, [r4, #4]
   11f64:	add	r3, r3, #1
   11f68:	str	r3, [r4, #4]
   11f6c:	ldrh	r4, [r7, #56]	; 0x38
   11f70:	movw	r3, #65535	; 0xffff
   11f74:	str	r5, [r6, #8]
   11f78:	movw	r5, #37252	; 0x9184
   11f7c:	cmp	r4, r3
   11f80:	movt	r5, #3
   11f84:	str	r4, [r6, #16]
   11f88:	beq	123dc <elf32_fsize@plt+0xd24>
   11f8c:	cmp	r4, #0
   11f90:	beq	12008 <elf32_fsize@plt+0x950>
   11f94:	mov	r4, #0
   11f98:	b	11fac <elf32_fsize@plt+0x8f4>
   11f9c:	ldr	r3, [r6, #16]
   11fa0:	add	r4, r4, #1
   11fa4:	cmp	r3, r4
   11fa8:	bls	12008 <elf32_fsize@plt+0x950>
   11fac:	ldr	r0, [r8, #16]
   11fb0:	mov	r1, r4
   11fb4:	mov	r2, sp
   11fb8:	bl	113f4 <gelf_getphdr@plt>
   11fbc:	cmp	r0, #0
   11fc0:	bne	11f9c <elf32_fsize@plt+0x8e4>
   11fc4:	ldr	fp, [r6, #16]
   11fc8:	movw	r5, #37252	; 0x9184
   11fcc:	movt	r5, #3
   11fd0:	cmp	fp, r4
   11fd4:	bls	12008 <elf32_fsize@plt+0x950>
   11fd8:	mov	r2, #5
   11fdc:	movw	r1, #7192	; 0x1c18
   11fe0:	movt	r1, #2
   11fe4:	bl	113b8 <dcgettext@plt>
   11fe8:	mov	r3, fp
   11fec:	mov	r2, r4
   11ff0:	mov	r1, r0
   11ff4:	mov	r0, #1
   11ff8:	bl	11580 <__printf_chk@plt>
   11ffc:	ldr	r3, [r5, #4]
   12000:	add	r3, r3, #1
   12004:	str	r3, [r5, #4]
   12008:	mov	r0, r8
   1200c:	ldr	r1, [r7, #48]	; 0x30
   12010:	str	r4, [r6, #16]
   12014:	bl	1fd58 <elf32_fsize@plt+0xe6a0>
   12018:	movw	r4, #37252	; 0x9184
   1201c:	movt	r4, #3
   12020:	cmp	r0, #0
   12024:	beq	121d8 <elf32_fsize@plt+0xb20>
   12028:	ldr	r0, [r8, #16]
   1202c:	bl	11424 <gelf_getclass@plt>
   12030:	cmp	r0, #1
   12034:	mov	r4, r0
   12038:	bne	120ec <elf32_fsize@plt+0xa34>
   1203c:	ldrh	r3, [r7, #52]	; 0x34
   12040:	cmp	r3, #52	; 0x34
   12044:	cmpne	r3, #0
   12048:	bne	123a8 <elf32_fsize@plt+0xcf0>
   1204c:	ldrh	r3, [r7, #54]	; 0x36
   12050:	movw	r0, #65503	; 0xffdf
   12054:	and	r0, r3, r0
   12058:	cmp	r0, #0
   1205c:	bne	12374 <elf32_fsize@plt+0xcbc>
   12060:	ldr	r2, [r6, #16]
   12064:	movw	r8, #37252	; 0x9184
   12068:	ldrd	r4, [r7, #32]
   1206c:	movt	r8, #3
   12070:	mul	r3, r2, r3
   12074:	mov	r2, sl
   12078:	adds	r4, r4, r3
   1207c:	mov	r3, #0
   12080:	adc	r5, r5, #0
   12084:	cmp	r5, r3
   12088:	cmpeq	r4, r2
   1208c:	bhi	12488 <elf32_fsize@plt+0xdd0>
   12090:	ldrh	r1, [r7, #58]	; 0x3a
   12094:	cmp	r1, #40	; 0x28
   12098:	cmpne	r1, #0
   1209c:	moveq	r0, #0
   120a0:	movne	r0, #1
   120a4:	bne	1216c <elf32_fsize@plt+0xab4>
   120a8:	ldr	ip, [r6, #8]
   120ac:	mov	fp, #0
   120b0:	ldrd	r2, [r7, #40]	; 0x28
   120b4:	movw	r4, #37252	; 0x9184
   120b8:	movt	r4, #3
   120bc:	mul	r1, ip, r1
   120c0:	adds	r2, r2, r1
   120c4:	adc	r3, r3, #0
   120c8:	cmp	r3, fp
   120cc:	cmpeq	r2, sl
   120d0:	bhi	12348 <elf32_fsize@plt+0xc90>
   120d4:	ldr	r2, [sp, #580]	; 0x244
   120d8:	ldr	r3, [r9]
   120dc:	cmp	r2, r3
   120e0:	bne	12578 <elf32_fsize@plt+0xec0>
   120e4:	add	sp, sp, #588	; 0x24c
   120e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ec:	ldr	r0, [r8, #16]
   120f0:	bl	11424 <gelf_getclass@plt>
   120f4:	cmp	r0, #2
   120f8:	bne	120d4 <elf32_fsize@plt+0xa1c>
   120fc:	ldrh	r2, [r7, #52]	; 0x34
   12100:	movw	r3, #65471	; 0xffbf
   12104:	and	r3, r2, r3
   12108:	cmp	r3, #0
   1210c:	bne	124e8 <elf32_fsize@plt+0xe30>
   12110:	ldrh	r3, [r7, #54]	; 0x36
   12114:	cmp	r3, #56	; 0x38
   12118:	cmpne	r3, #0
   1211c:	moveq	r0, #0
   12120:	movne	r0, #1
   12124:	bne	124b4 <elf32_fsize@plt+0xdfc>
   12128:	ldr	r2, [r6, #16]
   1212c:	movw	r8, #37252	; 0x9184
   12130:	ldrd	r4, [r7, #32]
   12134:	movt	r8, #3
   12138:	mul	r3, r2, r3
   1213c:	mov	r2, sl
   12140:	adds	r4, r4, r3
   12144:	mov	r3, #0
   12148:	adc	r5, r5, #0
   1214c:	cmp	r5, r3
   12150:	cmpeq	r4, r2
   12154:	bhi	1251c <elf32_fsize@plt+0xe64>
   12158:	ldrh	r1, [r7, #58]	; 0x3a
   1215c:	movw	r0, #65471	; 0xffbf
   12160:	and	r0, r1, r0
   12164:	cmp	r0, #0
   12168:	beq	120a8 <elf32_fsize@plt+0x9f0>
   1216c:	mov	r2, #5
   12170:	movw	r1, #7376	; 0x1cd0
   12174:	mov	r0, #0
   12178:	movt	r1, #2
   1217c:	bl	113b8 <dcgettext@plt>
   12180:	ldrh	r2, [r7, #58]	; 0x3a
   12184:	mov	r1, r0
   12188:	mov	r0, #1
   1218c:	bl	11580 <__printf_chk@plt>
   12190:	ldr	r3, [r6, #4]
   12194:	add	r3, r3, #1
   12198:	str	r3, [r6, #4]
   1219c:	b	120d4 <elf32_fsize@plt+0xa1c>
   121a0:	mov	r2, #5
   121a4:	movw	r1, #6664	; 0x1a08
   121a8:	mov	r0, #0
   121ac:	movt	r1, #2
   121b0:	bl	113b8 <dcgettext@plt>
   121b4:	ldrb	r3, [r7, #8]
   121b8:	mov	r2, #8
   121bc:	mov	r1, r0
   121c0:	mov	r0, #1
   121c4:	bl	11580 <__printf_chk@plt>
   121c8:	ldr	r3, [r6, #4]
   121cc:	add	r3, r3, #1
   121d0:	str	r3, [r6, #4]
   121d4:	b	11d44 <elf32_fsize@plt+0x68c>
   121d8:	mov	r2, #5
   121dc:	movw	r1, #7236	; 0x1c44
   121e0:	movt	r1, #2
   121e4:	bl	113b8 <dcgettext@plt>
   121e8:	mov	r3, #512	; 0x200
   121ec:	ldr	r1, [r7, #48]	; 0x30
   121f0:	add	r2, sp, #68	; 0x44
   121f4:	mov	r5, r0
   121f8:	mov	r0, r8
   121fc:	bl	1f69c <elf32_fsize@plt+0xdfe4>
   12200:	mov	r1, r5
   12204:	mov	r2, r0
   12208:	mov	r0, #1
   1220c:	bl	11580 <__printf_chk@plt>
   12210:	ldr	r3, [r4, #4]
   12214:	add	r3, r3, #1
   12218:	str	r3, [r4, #4]
   1221c:	b	12028 <elf32_fsize@plt+0x970>
   12220:	mov	r2, #5
   12224:	movw	r1, #6736	; 0x1a50
   12228:	mov	r0, #0
   1222c:	movt	r1, #2
   12230:	bl	113b8 <dcgettext@plt>
   12234:	ldrh	r2, [r7, #16]
   12238:	mov	r1, r0
   1223c:	mov	r0, #1
   12240:	bl	11580 <__printf_chk@plt>
   12244:	ldr	r3, [r6, #4]
   12248:	add	r3, r3, #1
   1224c:	str	r3, [r6, #4]
   12250:	b	11db0 <elf32_fsize@plt+0x6f8>
   12254:	mov	r2, #5
   12258:	movw	r1, #7456	; 0x1d20
   1225c:	mov	r0, #0
   12260:	movt	r1, #2
   12264:	bl	113b8 <dcgettext@plt>
   12268:	ldrh	r2, [r7, #18]
   1226c:	mov	r1, r0
   12270:	mov	r0, #1
   12274:	bl	11580 <__printf_chk@plt>
   12278:	ldr	r3, [r6, #4]
   1227c:	add	r3, r3, #1
   12280:	str	r3, [r6, #4]
   12284:	b	11dd4 <elf32_fsize@plt+0x71c>
   12288:	mov	r1, r4
   1228c:	ldr	r0, [r8, #16]
   12290:	bl	11628 <elf_getscn@plt>
   12294:	mov	r1, sp
   12298:	bl	1134c <gelf_getshdr@plt>
   1229c:	cmp	r0, #0
   122a0:	beq	122b4 <elf32_fsize@plt+0xbfc>
   122a4:	ldrd	r2, [r0, #32]
   122a8:	orrs	r1, r2, r3
   122ac:	strne	r2, [fp, #8]
   122b0:	beq	12548 <elf32_fsize@plt+0xe90>
   122b4:	ldrh	r3, [r7, #62]	; 0x3e
   122b8:	movw	r2, #65535	; 0xffff
   122bc:	cmp	r3, r2
   122c0:	bne	11ecc <elf32_fsize@plt+0x814>
   122c4:	b	1230c <elf32_fsize@plt+0xc54>
   122c8:	movw	r1, #6940	; 0x1b1c
   122cc:	movt	r1, #2
   122d0:	mov	r0, #0
   122d4:	mov	r2, #5
   122d8:	bl	113b8 <dcgettext@plt>
   122dc:	mov	r1, r0
   122e0:	mov	r0, #1
   122e4:	bl	11580 <__printf_chk@plt>
   122e8:	ldmib	fp, {r2, r3}
   122ec:	add	r2, r2, #1
   122f0:	str	r2, [fp, #4]
   122f4:	b	11ee4 <elf32_fsize@plt+0x82c>
   122f8:	movw	r1, #6800	; 0x1a90
   122fc:	mov	r0, #0
   12300:	movt	r1, #2
   12304:	mov	r2, #5
   12308:	b	11e98 <elf32_fsize@plt+0x7e0>
   1230c:	mov	r1, #0
   12310:	ldr	r0, [r8, #16]
   12314:	bl	11628 <elf_getscn@plt>
   12318:	mov	r1, sp
   1231c:	bl	1134c <gelf_getshdr@plt>
   12320:	cmp	r0, #0
   12324:	ldreq	r3, [r6, #8]
   12328:	beq	11ee4 <elf32_fsize@plt+0x82c>
   1232c:	ldr	r1, [r0, #40]	; 0x28
   12330:	movw	r2, #37252	; 0x9184
   12334:	ldr	r3, [r6, #8]
   12338:	movt	r2, #3
   1233c:	cmp	r1, r3
   12340:	strcc	r1, [r2, #12]
   12344:	b	11ee4 <elf32_fsize@plt+0x82c>
   12348:	mov	r2, #5
   1234c:	movw	r1, #7412	; 0x1cf4
   12350:	movt	r1, #2
   12354:	bl	113b8 <dcgettext@plt>
   12358:	mov	r1, r0
   1235c:	mov	r0, #1
   12360:	bl	11580 <__printf_chk@plt>
   12364:	ldr	r3, [r4, #4]
   12368:	add	r3, r3, #1
   1236c:	str	r3, [r4, #4]
   12370:	b	120d4 <elf32_fsize@plt+0xa1c>
   12374:	mov	r2, #5
   12378:	movw	r1, #7296	; 0x1c80
   1237c:	mov	r0, #0
   12380:	movt	r1, #2
   12384:	bl	113b8 <dcgettext@plt>
   12388:	ldrh	r2, [r7, #54]	; 0x36
   1238c:	mov	r1, r0
   12390:	mov	r0, #1
   12394:	bl	11580 <__printf_chk@plt>
   12398:	ldr	r3, [r6, #4]
   1239c:	add	r3, r3, #1
   123a0:	str	r3, [r6, #4]
   123a4:	b	12090 <elf32_fsize@plt+0x9d8>
   123a8:	mov	r2, #5
   123ac:	movw	r1, #7264	; 0x1c60
   123b0:	mov	r0, #0
   123b4:	movt	r1, #2
   123b8:	bl	113b8 <dcgettext@plt>
   123bc:	ldrh	r2, [r7, #52]	; 0x34
   123c0:	mov	r1, r0
   123c4:	mov	r0, r4
   123c8:	bl	11580 <__printf_chk@plt>
   123cc:	ldr	r3, [r6, #4]
   123d0:	add	r3, r3, #1
   123d4:	str	r3, [r6, #4]
   123d8:	b	1204c <elf32_fsize@plt+0x994>
   123dc:	mov	r1, #0
   123e0:	ldr	r0, [r8, #16]
   123e4:	bl	11628 <elf_getscn@plt>
   123e8:	mov	r1, sp
   123ec:	bl	1134c <gelf_getshdr@plt>
   123f0:	cmp	r0, #0
   123f4:	ldreq	r4, [r5, #16]
   123f8:	beq	11f8c <elf32_fsize@plt+0x8d4>
   123fc:	ldr	r4, [r0, #44]	; 0x2c
   12400:	movw	r3, #65534	; 0xfffe
   12404:	cmp	r4, r3
   12408:	strhi	r4, [r5, #16]
   1240c:	bhi	11f8c <elf32_fsize@plt+0x8d4>
   12410:	mov	r2, #5
   12414:	movw	r1, #7144	; 0x1be8
   12418:	mov	r0, #0
   1241c:	movt	r1, #2
   12420:	bl	113b8 <dcgettext@plt>
   12424:	mov	r1, r0
   12428:	mov	r0, #1
   1242c:	bl	11580 <__printf_chk@plt>
   12430:	ldr	r3, [r5, #4]
   12434:	ldr	r4, [r5, #16]
   12438:	add	r3, r3, #1
   1243c:	str	r3, [r5, #4]
   12440:	b	11f8c <elf32_fsize@plt+0x8d4>
   12444:	mov	r2, #5
   12448:	movw	r1, #7068	; 0x1b9c
   1244c:	mov	r0, #0
   12450:	movt	r1, #2
   12454:	bl	113b8 <dcgettext@plt>
   12458:	mov	r1, r0
   1245c:	mov	r0, #1
   12460:	bl	11580 <__printf_chk@plt>
   12464:	ldmib	r4, {r2, r3}
   12468:	add	r2, r2, #1
   1246c:	str	r2, [r4, #4]
   12470:	b	11ee4 <elf32_fsize@plt+0x82c>
   12474:	movw	r1, #6980	; 0x1b44
   12478:	mov	r0, r4
   1247c:	mov	r2, #5
   12480:	movt	r1, #2
   12484:	b	122d8 <elf32_fsize@plt+0xc20>
   12488:	mov	r2, #5
   1248c:	movw	r1, #7332	; 0x1ca4
   12490:	movt	r1, #2
   12494:	bl	113b8 <dcgettext@plt>
   12498:	mov	r1, r0
   1249c:	mov	r0, #1
   124a0:	bl	11580 <__printf_chk@plt>
   124a4:	ldr	r3, [r8, #4]
   124a8:	add	r3, r3, #1
   124ac:	str	r3, [r8, #4]
   124b0:	b	12090 <elf32_fsize@plt+0x9d8>
   124b4:	mov	r2, #5
   124b8:	movw	r1, #7296	; 0x1c80
   124bc:	mov	r0, #0
   124c0:	movt	r1, #2
   124c4:	bl	113b8 <dcgettext@plt>
   124c8:	ldrh	r2, [r7, #54]	; 0x36
   124cc:	mov	r1, r0
   124d0:	mov	r0, #1
   124d4:	bl	11580 <__printf_chk@plt>
   124d8:	ldr	r3, [r6, #4]
   124dc:	add	r3, r3, #1
   124e0:	str	r3, [r6, #4]
   124e4:	b	12158 <elf32_fsize@plt+0xaa0>
   124e8:	mov	r2, #5
   124ec:	movw	r1, #7264	; 0x1c60
   124f0:	mov	r0, #0
   124f4:	movt	r1, #2
   124f8:	bl	113b8 <dcgettext@plt>
   124fc:	ldrh	r2, [r7, #52]	; 0x34
   12500:	mov	r1, r0
   12504:	mov	r0, #1
   12508:	bl	11580 <__printf_chk@plt>
   1250c:	ldr	r3, [r6, #4]
   12510:	add	r3, r3, #1
   12514:	str	r3, [r6, #4]
   12518:	b	12110 <elf32_fsize@plt+0xa58>
   1251c:	mov	r2, #5
   12520:	movw	r1, #7332	; 0x1ca4
   12524:	movt	r1, #2
   12528:	bl	113b8 <dcgettext@plt>
   1252c:	mov	r1, r0
   12530:	mov	r0, #1
   12534:	bl	11580 <__printf_chk@plt>
   12538:	ldr	r3, [r8, #4]
   1253c:	add	r3, r3, #1
   12540:	str	r3, [r8, #4]
   12544:	b	12158 <elf32_fsize@plt+0xaa0>
   12548:	mov	r2, #5
   1254c:	mov	r0, r4
   12550:	movw	r1, #7020	; 0x1b6c
   12554:	movt	r1, #2
   12558:	bl	113b8 <dcgettext@plt>
   1255c:	mov	r1, r0
   12560:	mov	r0, #1
   12564:	bl	11580 <__printf_chk@plt>
   12568:	ldr	r3, [fp, #4]
   1256c:	add	r3, r3, #1
   12570:	str	r3, [fp, #4]
   12574:	b	122b4 <elf32_fsize@plt+0xbfc>
   12578:	bl	113dc <__stack_chk_fail@plt>
   1257c:	andeq	r0, r2, r0, lsr #28
   12580:	cmp	r0, #300	; 0x12c
   12584:	push	{r4, lr}
   12588:	beq	12658 <elf32_fsize@plt+0xfa0>
   1258c:	bgt	125b8 <elf32_fsize@plt+0xf00>
   12590:	cmp	r0, #100	; 0x64
   12594:	beq	12640 <elf32_fsize@plt+0xf88>
   12598:	cmp	r0, #113	; 0x71
   1259c:	bne	12620 <elf32_fsize@plt+0xf68>
   125a0:	movw	r3, #37252	; 0x9184
   125a4:	movt	r3, #3
   125a8:	mov	r2, #1
   125ac:	mov	r0, #0
   125b0:	strb	r2, [r3, #21]
   125b4:	pop	{r4, pc}
   125b8:	movw	r3, #301	; 0x12d
   125bc:	cmp	r0, r3
   125c0:	beq	12628 <elf32_fsize@plt+0xf70>
   125c4:	mov	r3, #2
   125c8:	movt	r3, #256	; 0x100
   125cc:	cmp	r0, r3
   125d0:	bne	12620 <elf32_fsize@plt+0xf68>
   125d4:	movw	r4, #37244	; 0x917c
   125d8:	movt	r4, #3
   125dc:	mov	r2, #5
   125e0:	movw	r1, #7484	; 0x1d3c
   125e4:	mov	r0, #0
   125e8:	movt	r1, #2
   125ec:	bl	113b8 <dcgettext@plt>
   125f0:	ldr	r1, [r4]
   125f4:	bl	1164c <fputs@plt>
   125f8:	movw	r3, #37232	; 0x9170
   125fc:	movt	r3, #3
   12600:	ldr	r1, [r4]
   12604:	movw	r0, #37200	; 0x9150
   12608:	mov	r2, #4
   1260c:	movt	r0, #3
   12610:	ldr	r3, [r3]
   12614:	bl	11550 <argp_help@plt>
   12618:	mov	r0, #1
   1261c:	bl	11508 <exit@plt>
   12620:	mov	r0, #7
   12624:	pop	{r4, pc}
   12628:	movw	r3, #37252	; 0x9184
   1262c:	movt	r3, #3
   12630:	mov	r2, #1
   12634:	mov	r0, #0
   12638:	strb	r2, [r3, #23]
   1263c:	pop	{r4, pc}
   12640:	movw	r3, #37252	; 0x9184
   12644:	movt	r3, #3
   12648:	mov	r2, #1
   1264c:	mov	r0, #0
   12650:	strb	r2, [r3, #22]
   12654:	pop	{r4, pc}
   12658:	movw	r3, #37252	; 0x9184
   1265c:	movt	r3, #3
   12660:	mov	r2, #1
   12664:	mov	r0, #0
   12668:	strb	r2, [r3, #20]
   1266c:	pop	{r4, pc}
   12670:	push	{r4, r5, r6, lr}
   12674:	movw	r5, #37252	; 0x9184
   12678:	movt	r5, #3
   1267c:	movw	r4, #37240	; 0x9178
   12680:	movt	r4, #3
   12684:	sub	sp, sp, #72	; 0x48
   12688:	ldr	r3, [r5, #8]
   1268c:	mov	r6, r0
   12690:	ldr	r2, [r4]
   12694:	cmp	r1, r3
   12698:	str	r2, [sp, #68]	; 0x44
   1269c:	bls	126c0 <elf32_fsize@plt+0x1008>
   126a0:	movw	r0, #7504	; 0x1d50
   126a4:	movt	r0, #2
   126a8:	ldr	r2, [sp, #68]	; 0x44
   126ac:	ldr	r3, [r4]
   126b0:	cmp	r2, r3
   126b4:	bne	126fc <elf32_fsize@plt+0x1044>
   126b8:	add	sp, sp, #72	; 0x48
   126bc:	pop	{r4, r5, r6, pc}
   126c0:	ldr	r0, [r0]
   126c4:	bl	11628 <elf_getscn@plt>
   126c8:	mov	r1, sp
   126cc:	bl	1134c <gelf_getshdr@plt>
   126d0:	subs	r3, r0, #0
   126d4:	beq	126a0 <elf32_fsize@plt+0xfe8>
   126d8:	ldr	r2, [r3]
   126dc:	ldr	r0, [r6]
   126e0:	ldr	r1, [r5, #12]
   126e4:	bl	11430 <elf_strptr@plt>
   126e8:	movw	r3, #7504	; 0x1d50
   126ec:	movt	r3, #2
   126f0:	cmp	r0, #0
   126f4:	moveq	r0, r3
   126f8:	b	126a8 <elf32_fsize@plt+0xff0>
   126fc:	bl	113dc <__stack_chk_fail@plt>
   12700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12704:	movw	fp, #37240	; 0x9178
   12708:	sub	sp, sp, #52	; 0x34
   1270c:	movt	fp, #3
   12710:	mov	r8, r1
   12714:	mov	r9, #0
   12718:	ldr	r1, [fp]
   1271c:	movw	r7, #37252	; 0x9184
   12720:	ldr	ip, [sp, #88]	; 0x58
   12724:	mov	sl, r0
   12728:	str	fp, [sp, #20]
   1272c:	mov	r4, r2
   12730:	mov	fp, r9
   12734:	mov	r6, r3
   12738:	movt	r7, #3
   1273c:	str	r1, [sp, #44]	; 0x2c
   12740:	mov	r9, ip
   12744:	b	12794 <elf32_fsize@plt+0x10dc>
   12748:	mov	r2, #5
   1274c:	movw	r1, #7656	; 0x1de8
   12750:	mov	r0, r6
   12754:	movt	r1, #2
   12758:	bl	113b8 <dcgettext@plt>
   1275c:	ldr	lr, [r4]
   12760:	ldr	ip, [sp, #24]
   12764:	mov	r2, r9
   12768:	ldr	r3, [sp, #40]	; 0x28
   1276c:	add	ip, lr, ip
   12770:	str	r5, [sp, #4]
   12774:	mov	r1, r0
   12778:	mov	r0, #1
   1277c:	str	ip, [sp]
   12780:	bl	11580 <__printf_chk@plt>
   12784:	ldr	r3, [r7, #4]
   12788:	add	r3, r3, #1
   1278c:	str	r3, [r7, #4]
   12790:	mov	fp, r5
   12794:	ldr	r3, [r4, #12]
   12798:	cmp	r3, fp
   1279c:	bls	1297c <elf32_fsize@plt+0x12c4>
   127a0:	add	r3, sp, #28
   127a4:	mov	r0, r4
   127a8:	str	r3, [sp]
   127ac:	mov	r1, fp
   127b0:	add	r2, sp, #32
   127b4:	add	r3, sp, #24
   127b8:	bl	113d0 <gelf_getnote@plt>
   127bc:	subs	r5, r0, #0
   127c0:	beq	1297c <elf32_fsize@plt+0x12c4>
   127c4:	ldrh	r3, [r8]
   127c8:	cmp	r3, #4
   127cc:	ldr	r3, [sp, #40]	; 0x28
   127d0:	beq	1285c <elf32_fsize@plt+0x11a4>
   127d4:	cmp	r3, #5
   127d8:	bhi	128d8 <elf32_fsize@plt+0x1220>
   127dc:	cmp	r3, #1
   127e0:	bcs	12918 <elf32_fsize@plt+0x1260>
   127e4:	ldr	r2, [sp, #32]
   127e8:	cmp	r2, #6
   127ec:	beq	129e4 <elf32_fsize@plt+0x132c>
   127f0:	cmp	r6, #0
   127f4:	beq	12748 <elf32_fsize@plt+0x1090>
   127f8:	mov	r2, #5
   127fc:	movw	r1, #7736	; 0x1e38
   12800:	mov	r0, #0
   12804:	movt	r1, #2
   12808:	bl	113b8 <dcgettext@plt>
   1280c:	mov	r1, r6
   12810:	mov	fp, r0
   12814:	add	r0, sl, #16
   12818:	bl	12670 <elf32_fsize@plt+0xfb8>
   1281c:	ldr	ip, [sp, #40]	; 0x28
   12820:	ldr	lr, [r4]
   12824:	mov	r1, fp
   12828:	ldr	r2, [sp, #24]
   1282c:	str	r5, [sp, #8]
   12830:	add	r2, lr, r2
   12834:	str	ip, [sp]
   12838:	str	r2, [sp, #4]
   1283c:	mov	r2, r6
   12840:	mov	r3, r0
   12844:	mov	r0, #1
   12848:	bl	11580 <__printf_chk@plt>
   1284c:	ldr	r3, [r7, #4]
   12850:	add	r3, r3, #1
   12854:	str	r3, [r7, #4]
   12858:	b	12790 <elf32_fsize@plt+0x10d8>
   1285c:	sub	r3, r3, #1
   12860:	cmp	r3, #19
   12864:	bhi	12884 <elf32_fsize@plt+0x11cc>
   12868:	mov	r1, #1
   1286c:	movw	r2, #62207	; 0xf2ff
   12870:	lsl	r3, r1, r3
   12874:	movt	r2, #9
   12878:	and	r2, r3, r2
   1287c:	cmp	r2, #0
   12880:	bne	12790 <elf32_fsize@plt+0x10d8>
   12884:	cmp	r6, #0
   12888:	bne	1293c <elf32_fsize@plt+0x1284>
   1288c:	mov	r2, #5
   12890:	movw	r1, #7516	; 0x1d5c
   12894:	mov	r0, r6
   12898:	movt	r1, #2
   1289c:	bl	113b8 <dcgettext@plt>
   128a0:	ldrd	r2, [sp, #96]	; 0x60
   128a4:	ldr	ip, [sp, #40]	; 0x28
   128a8:	adds	r2, r2, r5
   128ac:	adc	r3, r3, #0
   128b0:	strd	r2, [sp]
   128b4:	mov	r3, ip
   128b8:	mov	r2, r9
   128bc:	mov	r1, r0
   128c0:	mov	r0, #1
   128c4:	bl	11580 <__printf_chk@plt>
   128c8:	ldr	r3, [r7, #4]
   128cc:	add	r3, r3, #1
   128d0:	str	r3, [r7, #4]
   128d4:	b	12790 <elf32_fsize@plt+0x10d8>
   128d8:	sub	r3, r3, #256	; 0x100
   128dc:	cmp	r3, #1
   128e0:	bhi	127f0 <elf32_fsize@plt+0x1138>
   128e4:	ldr	r3, [sp, #32]
   128e8:	cmp	r3, #2
   128ec:	bls	127f0 <elf32_fsize@plt+0x1138>
   128f0:	ldr	r3, [sp, #24]
   128f4:	movw	r1, #7644	; 0x1ddc
   128f8:	ldr	r0, [r4]
   128fc:	movt	r1, #2
   12900:	mov	r2, #2
   12904:	add	r0, r0, r3
   12908:	bl	11658 <strncmp@plt>
   1290c:	cmp	r0, #0
   12910:	beq	12790 <elf32_fsize@plt+0x10d8>
   12914:	b	127f0 <elf32_fsize@plt+0x1138>
   12918:	ldr	r2, [sp, #32]
   1291c:	cmp	r2, #4
   12920:	beq	129a4 <elf32_fsize@plt+0x12ec>
   12924:	ldr	r2, [sp, #36]	; 0x24
   12928:	cmp	r2, #0
   1292c:	bne	127f0 <elf32_fsize@plt+0x1138>
   12930:	cmp	r3, #1
   12934:	bne	127f0 <elf32_fsize@plt+0x1138>
   12938:	b	12790 <elf32_fsize@plt+0x10d8>
   1293c:	mov	r2, #5
   12940:	movw	r1, #7576	; 0x1d98
   12944:	mov	r0, #0
   12948:	movt	r1, #2
   1294c:	bl	113b8 <dcgettext@plt>
   12950:	mov	r1, r6
   12954:	mov	fp, r0
   12958:	add	r0, sl, #16
   1295c:	bl	12670 <elf32_fsize@plt+0xfb8>
   12960:	ldr	ip, [sp, #40]	; 0x28
   12964:	mov	r1, fp
   12968:	str	r5, [sp, #4]
   1296c:	mov	r2, r6
   12970:	mov	r3, r0
   12974:	mov	r0, #1
   12978:	b	1277c <elf32_fsize@plt+0x10c4>
   1297c:	mov	r9, fp
   12980:	ldr	fp, [sp, #20]
   12984:	ldr	r2, [sp, #44]	; 0x2c
   12988:	mov	r0, r9
   1298c:	mov	r1, #0
   12990:	ldr	r3, [fp]
   12994:	cmp	r2, r3
   12998:	bne	12a08 <elf32_fsize@plt+0x1350>
   1299c:	add	sp, sp, #52	; 0x34
   129a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129a4:	ldr	r1, [r4]
   129a8:	ldr	r2, [sp, #24]
   129ac:	add	r0, r1, r2
   129b0:	ldrb	r2, [r1, r2]
   129b4:	cmp	r2, #71	; 0x47
   129b8:	bne	12924 <elf32_fsize@plt+0x126c>
   129bc:	ldrb	r2, [r0, #1]
   129c0:	cmp	r2, #78	; 0x4e
   129c4:	bne	12924 <elf32_fsize@plt+0x126c>
   129c8:	ldrb	r2, [r0, #2]
   129cc:	cmp	r2, #85	; 0x55
   129d0:	bne	12924 <elf32_fsize@plt+0x126c>
   129d4:	ldrb	r2, [r0, #3]
   129d8:	cmp	r2, #0
   129dc:	beq	12790 <elf32_fsize@plt+0x10d8>
   129e0:	b	12924 <elf32_fsize@plt+0x126c>
   129e4:	ldr	r3, [sp, #24]
   129e8:	movw	r1, #7648	; 0x1de0
   129ec:	ldr	r0, [r4]
   129f0:	movt	r1, #2
   129f4:	add	r0, r0, r3
   129f8:	bl	11388 <memcmp@plt>
   129fc:	cmp	r0, #0
   12a00:	beq	12790 <elf32_fsize@plt+0x10d8>
   12a04:	b	127f0 <elf32_fsize@plt+0x1138>
   12a08:	bl	113dc <__stack_chk_fail@plt>
   12a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a10:	movw	r4, #37240	; 0x9178
   12a14:	movt	r4, #3
   12a18:	sub	sp, sp, #348	; 0x15c
   12a1c:	mov	r9, r3
   12a20:	mov	sl, r0
   12a24:	ldr	r3, [r4]
   12a28:	str	r1, [sp, #76]	; 0x4c
   12a2c:	mov	r1, r9
   12a30:	ldr	r0, [r0, #16]
   12a34:	str	r2, [sp, #56]	; 0x38
   12a38:	str	r3, [sp, #340]	; 0x154
   12a3c:	str	r4, [sp, #84]	; 0x54
   12a40:	bl	11628 <elf_getscn@plt>
   12a44:	mov	r1, #0
   12a48:	bl	11484 <elf_getdata@plt>
   12a4c:	subs	r5, r0, #0
   12a50:	str	r5, [sp, #72]	; 0x48
   12a54:	beq	14140 <elf32_fsize@plt+0x2a88>
   12a58:	ldr	ip, [sp, #56]	; 0x38
   12a5c:	ldr	r0, [sl, #16]
   12a60:	ldr	r1, [ip, #40]	; 0x28
   12a64:	bl	11628 <elf_getscn@plt>
   12a68:	add	r1, sp, #208	; 0xd0
   12a6c:	bl	1134c <gelf_getshdr@plt>
   12a70:	cmp	r0, #0
   12a74:	str	r0, [sp, #48]	; 0x30
   12a78:	beq	12f48 <elf32_fsize@plt+0x1890>
   12a7c:	ldr	r3, [r0, #4]
   12a80:	cmp	r3, #3
   12a84:	movweq	r8, #37252	; 0x9184
   12a88:	movteq	r8, #3
   12a8c:	beq	12b08 <elf32_fsize@plt+0x1450>
   12a90:	mov	r2, #5
   12a94:	movw	r1, #7876	; 0x1ec4
   12a98:	mov	r0, #0
   12a9c:	movt	r1, #2
   12aa0:	bl	113b8 <dcgettext@plt>
   12aa4:	ldr	r5, [sp, #56]	; 0x38
   12aa8:	mov	ip, #0
   12aac:	str	ip, [sp, #48]	; 0x30
   12ab0:	movw	r8, #37252	; 0x9184
   12ab4:	movt	r8, #3
   12ab8:	ldr	r4, [r5, #40]	; 0x28
   12abc:	add	r5, sl, #16
   12ac0:	mov	r1, r4
   12ac4:	mov	r7, r0
   12ac8:	mov	r0, r5
   12acc:	bl	12670 <elf32_fsize@plt+0xfb8>
   12ad0:	mov	r1, r9
   12ad4:	mov	r6, r0
   12ad8:	mov	r0, r5
   12adc:	bl	12670 <elf32_fsize@plt+0xfb8>
   12ae0:	mov	r3, r6
   12ae4:	mov	r1, r7
   12ae8:	mov	r2, r4
   12aec:	str	r9, [sp]
   12af0:	str	r0, [sp, #4]
   12af4:	mov	r0, #1
   12af8:	bl	11580 <__printf_chk@plt>
   12afc:	ldr	r3, [r8, #4]
   12b00:	add	r3, r3, #1
   12b04:	str	r3, [r8, #4]
   12b08:	ldr	r3, [r8, #8]
   12b0c:	cmp	r3, #1
   12b10:	bls	141e0 <elf32_fsize@plt+0x2b28>
   12b14:	mov	r4, #0
   12b18:	add	r6, sl, #16
   12b1c:	str	r4, [sp, #96]	; 0x60
   12b20:	mov	r5, r4
   12b24:	str	r4, [sp, #52]	; 0x34
   12b28:	mov	r7, #1
   12b2c:	b	12b40 <elf32_fsize@plt+0x1488>
   12b30:	ldr	r3, [r8, #8]
   12b34:	add	r7, r7, #1
   12b38:	cmp	r7, r3
   12b3c:	bcs	12bb8 <elf32_fsize@plt+0x1500>
   12b40:	cmp	r9, r7
   12b44:	beq	12b30 <elf32_fsize@plt+0x1478>
   12b48:	mov	r1, r7
   12b4c:	ldr	r0, [sl, #16]
   12b50:	bl	11628 <elf_getscn@plt>
   12b54:	add	r1, sp, #272	; 0x110
   12b58:	mov	r4, r0
   12b5c:	bl	1134c <gelf_getshdr@plt>
   12b60:	cmp	r0, #0
   12b64:	beq	12b30 <elf32_fsize@plt+0x1478>
   12b68:	ldr	r2, [r0, #4]
   12b6c:	cmp	r2, #18
   12b70:	bne	12b30 <elf32_fsize@plt+0x1478>
   12b74:	ldr	r3, [r0, #40]	; 0x28
   12b78:	cmp	r9, r3
   12b7c:	bne	12b30 <elf32_fsize@plt+0x1478>
   12b80:	cmp	r5, #0
   12b84:	bne	140f8 <elf32_fsize@plt+0x2a40>
   12b88:	mov	r1, #0
   12b8c:	mov	r0, r4
   12b90:	bl	11484 <elf_getdata@plt>
   12b94:	add	r7, r7, #1
   12b98:	mov	r5, #1
   12b9c:	str	r0, [sp, #52]	; 0x34
   12ba0:	mov	r0, r4
   12ba4:	bl	1161c <elf_ndxscn@plt>
   12ba8:	ldr	r3, [r8, #8]
   12bac:	cmp	r7, r3
   12bb0:	str	r0, [sp, #96]	; 0x60
   12bb4:	bcc	12b40 <elf32_fsize@plt+0x1488>
   12bb8:	mov	r2, #1
   12bbc:	ldr	r0, [sl, #16]
   12bc0:	mov	r3, r2
   12bc4:	mov	r1, #11
   12bc8:	bl	11490 <gelf_fsize@plt>
   12bcc:	ldr	ip, [sp, #56]	; 0x38
   12bd0:	mov	r5, #0
   12bd4:	ldrd	r2, [ip, #56]	; 0x38
   12bd8:	mov	r4, r0
   12bdc:	cmp	r3, r5
   12be0:	cmpeq	r2, r4
   12be4:	strd	r4, [sp, #64]	; 0x40
   12be8:	beq	12c30 <elf32_fsize@plt+0x1578>
   12bec:	mov	r2, #5
   12bf0:	movw	r1, #8060	; 0x1f7c
   12bf4:	mov	r0, #0
   12bf8:	movt	r1, #2
   12bfc:	bl	113b8 <dcgettext@plt>
   12c00:	mov	r1, r9
   12c04:	mov	r4, r0
   12c08:	add	r0, sl, #16
   12c0c:	bl	12670 <elf32_fsize@plt+0xfb8>
   12c10:	mov	r1, r4
   12c14:	mov	r2, r9
   12c18:	mov	r3, r0
   12c1c:	mov	r0, #1
   12c20:	bl	11580 <__printf_chk@plt>
   12c24:	ldr	r3, [r8, #4]
   12c28:	add	r3, r3, #1
   12c2c:	str	r3, [r8, #4]
   12c30:	ldr	r0, [sp, #72]	; 0x48
   12c34:	add	r5, sp, #124	; 0x7c
   12c38:	add	r3, sp, #128	; 0x80
   12c3c:	str	r5, [sp]
   12c40:	ldr	r1, [sp, #52]	; 0x34
   12c44:	mov	r2, #0
   12c48:	bl	11640 <gelf_getsymshndx@plt>
   12c4c:	subs	r4, r0, #0
   12c50:	beq	14270 <elf32_fsize@plt+0x2bb8>
   12c54:	ldr	r3, [r4]
   12c58:	cmp	r3, #0
   12c5c:	bne	13d40 <elf32_fsize@plt+0x2688>
   12c60:	ldrd	r2, [r4, #8]
   12c64:	orrs	ip, r2, r3
   12c68:	bne	13ce0 <elf32_fsize@plt+0x2628>
   12c6c:	ldrd	r2, [r4, #16]
   12c70:	orrs	r0, r2, r3
   12c74:	bne	13c80 <elf32_fsize@plt+0x25c8>
   12c78:	ldrb	r3, [r4, #4]
   12c7c:	cmp	r3, #0
   12c80:	bne	13c20 <elf32_fsize@plt+0x2568>
   12c84:	ldrb	r3, [r4, #5]
   12c88:	cmp	r3, #0
   12c8c:	bne	13bc0 <elf32_fsize@plt+0x2508>
   12c90:	ldrh	r3, [r4, #6]
   12c94:	cmp	r3, #0
   12c98:	bne	13b6c <elf32_fsize@plt+0x24b4>
   12c9c:	ldr	r4, [sp, #52]	; 0x34
   12ca0:	cmp	r4, #0
   12ca4:	beq	12cb4 <elf32_fsize@plt+0x15fc>
   12ca8:	ldr	r3, [sp, #124]	; 0x7c
   12cac:	cmp	r3, #0
   12cb0:	bne	1402c <elf32_fsize@plt+0x2974>
   12cb4:	ldr	r5, [sp, #56]	; 0x38
   12cb8:	ldrd	r2, [sp, #64]	; 0x40
   12cbc:	ldrd	r0, [r5, #32]
   12cc0:	bl	2042c <elf32_fsize@plt+0xed74>
   12cc4:	cmp	r1, #0
   12cc8:	cmpeq	r0, #1
   12ccc:	bls	12f48 <elf32_fsize@plt+0x1890>
   12cd0:	str	r9, [sp, #44]	; 0x2c
   12cd4:	mov	fp, #1
   12cd8:	ldr	r9, [sp, #56]	; 0x38
   12cdc:	mov	ip, #0
   12ce0:	movw	r4, #37252	; 0x9184
   12ce4:	str	ip, [sp, #100]	; 0x64
   12ce8:	movt	r4, #3
   12cec:	str	ip, [sp, #104]	; 0x68
   12cf0:	str	r4, [sp, #80]	; 0x50
   12cf4:	add	r5, sp, #124	; 0x7c
   12cf8:	ldr	r0, [sp, #72]	; 0x48
   12cfc:	str	r5, [sp]
   12d00:	mov	r2, fp
   12d04:	ldr	r1, [sp, #52]	; 0x34
   12d08:	add	r3, sp, #128	; 0x80
   12d0c:	bl	11640 <gelf_getsymshndx@plt>
   12d10:	subs	r7, r0, #0
   12d14:	beq	1376c <elf32_fsize@plt+0x20b4>
   12d18:	ldr	ip, [sp, #48]	; 0x30
   12d1c:	cmp	ip, #0
   12d20:	beq	131cc <elf32_fsize@plt+0x1b14>
   12d24:	ldr	r5, [sp, #48]	; 0x30
   12d28:	ldr	r2, [r7]
   12d2c:	ldrd	r0, [r5, #32]
   12d30:	mov	r5, #0
   12d34:	mov	r4, r2
   12d38:	cmp	r5, r1
   12d3c:	cmpeq	r4, r0
   12d40:	bcc	131b4 <elf32_fsize@plt+0x1afc>
   12d44:	mov	r2, #5
   12d48:	movw	r1, #8384	; 0x20c0
   12d4c:	mov	r0, #0
   12d50:	movt	r1, #2
   12d54:	bl	113b8 <dcgettext@plt>
   12d58:	ldr	r1, [sp, #44]	; 0x2c
   12d5c:	mov	r4, r0
   12d60:	add	r0, sl, #16
   12d64:	bl	12670 <elf32_fsize@plt+0xfb8>
   12d68:	mov	r1, r4
   12d6c:	str	fp, [sp]
   12d70:	mov	ip, #0
   12d74:	ldr	r2, [sp, #44]	; 0x2c
   12d78:	str	ip, [sp, #112]	; 0x70
   12d7c:	mov	r3, r0
   12d80:	mov	r0, #1
   12d84:	bl	11580 <__printf_chk@plt>
   12d88:	ldr	r3, [r8, #4]
   12d8c:	add	r3, r3, #1
   12d90:	str	r3, [r8, #4]
   12d94:	ldrh	r3, [r7, #6]
   12d98:	movw	r2, #65535	; 0xffff
   12d9c:	cmp	r3, r2
   12da0:	beq	131e8 <elf32_fsize@plt+0x1b30>
   12da4:	movw	r2, #65521	; 0xfff1
   12da8:	subs	r2, r3, r2
   12dac:	movne	r2, #1
   12db0:	cmp	r3, #65280	; 0xff00
   12db4:	movcc	r2, #0
   12db8:	cmp	r2, #0
   12dbc:	beq	13018 <elf32_fsize@plt+0x1960>
   12dc0:	movw	r2, #65522	; 0xfff2
   12dc4:	cmp	r3, r2
   12dc8:	beq	1302c <elf32_fsize@plt+0x1974>
   12dcc:	mov	r2, #5
   12dd0:	movw	r1, #8620	; 0x21ac
   12dd4:	mov	r0, #0
   12dd8:	movt	r1, #2
   12ddc:	bl	113b8 <dcgettext@plt>
   12de0:	ldr	r1, [sp, #44]	; 0x2c
   12de4:	mov	r4, r0
   12de8:	add	r0, sl, #16
   12dec:	bl	12670 <elf32_fsize@plt+0xfb8>
   12df0:	mov	r1, r4
   12df4:	str	fp, [sp]
   12df8:	ldr	r2, [sp, #44]	; 0x2c
   12dfc:	mov	r3, r0
   12e00:	mov	r0, #1
   12e04:	bl	11580 <__printf_chk@plt>
   12e08:	ldr	r3, [r8, #4]
   12e0c:	add	r3, r3, #1
   12e10:	str	r3, [r8, #4]
   12e14:	ldrb	r3, [r7, #4]
   12e18:	and	r1, r3, #15
   12e1c:	cmp	r1, #6
   12e20:	bgt	13040 <elf32_fsize@plt+0x1988>
   12e24:	lsr	r1, r3, #4
   12e28:	cmp	r1, #2
   12e2c:	bhi	13068 <elf32_fsize@plt+0x19b0>
   12e30:	ldr	r1, [sp, #124]	; 0x7c
   12e34:	movw	r3, #65522	; 0xfff2
   12e38:	cmp	r1, r3
   12e3c:	beq	130f4 <elf32_fsize@plt+0x1a3c>
   12e40:	cmp	r1, #0
   12e44:	beq	12e54 <elf32_fsize@plt+0x179c>
   12e48:	ldr	r3, [r8, #8]
   12e4c:	cmp	r1, r3
   12e50:	bcc	134a4 <elf32_fsize@plt+0x1dec>
   12e54:	ldrb	r3, [r7, #4]
   12e58:	lsrs	r0, r3, #4
   12e5c:	ldr	r2, [r9, #44]	; 0x2c
   12e60:	bne	12f64 <elf32_fsize@plt+0x18ac>
   12e64:	cmp	r2, fp
   12e68:	bls	13374 <elf32_fsize@plt+0x1cbc>
   12e6c:	and	r2, r3, #15
   12e70:	cmp	r2, #3
   12e74:	beq	12fc4 <elf32_fsize@plt+0x190c>
   12e78:	ldr	r5, [sp, #112]	; 0x70
   12e7c:	cmp	r5, #0
   12e80:	beq	12efc <elf32_fsize@plt+0x1844>
   12e84:	movw	r1, #10092	; 0x276c
   12e88:	mov	r0, r5
   12e8c:	movt	r1, #2
   12e90:	bl	11358 <strcmp@plt>
   12e94:	cmp	r0, #0
   12e98:	beq	1329c <elf32_fsize@plt+0x1be4>
   12e9c:	ldr	r0, [sp, #112]	; 0x70
   12ea0:	movw	r1, #10612	; 0x2974
   12ea4:	movt	r1, #2
   12ea8:	bl	11358 <strcmp@plt>
   12eac:	cmp	r0, #0
   12eb0:	bne	12efc <elf32_fsize@plt+0x1844>
   12eb4:	ldr	r3, [r8, #16]
   12eb8:	cmp	r3, #0
   12ebc:	beq	12efc <elf32_fsize@plt+0x1844>
   12ec0:	add	r4, sp, #272	; 0x110
   12ec4:	mov	r5, r0
   12ec8:	ldr	r0, [sl, #16]
   12ecc:	mov	r1, r5
   12ed0:	mov	r2, r4
   12ed4:	bl	113f4 <gelf_getphdr@plt>
   12ed8:	cmp	r0, #0
   12edc:	beq	12eec <elf32_fsize@plt+0x1834>
   12ee0:	ldr	r3, [r0]
   12ee4:	cmp	r3, #2
   12ee8:	beq	133c0 <elf32_fsize@plt+0x1d08>
   12eec:	ldr	r3, [r8, #16]
   12ef0:	add	r5, r5, #1
   12ef4:	cmp	r5, r3
   12ef8:	bcc	12ec8 <elf32_fsize@plt+0x1810>
   12efc:	ldrb	r1, [r7, #5]
   12f00:	tst	r1, #3
   12f04:	beq	12f14 <elf32_fsize@plt+0x185c>
   12f08:	ldr	r3, [r9, #4]
   12f0c:	cmp	r3, #11
   12f10:	beq	137c4 <elf32_fsize@plt+0x210c>
   12f14:	mov	r0, sl
   12f18:	bl	2000c <elf32_fsize@plt+0xe954>
   12f1c:	cmp	r0, #0
   12f20:	beq	13254 <elf32_fsize@plt+0x1b9c>
   12f24:	ldrd	r2, [sp, #64]	; 0x40
   12f28:	add	fp, fp, #1
   12f2c:	ldrd	r0, [r9, #32]
   12f30:	bl	2042c <elf32_fsize@plt+0xed74>
   12f34:	mov	r2, fp
   12f38:	mov	r3, #0
   12f3c:	cmp	r3, r1
   12f40:	cmpeq	r2, r0
   12f44:	bcc	12cf4 <elf32_fsize@plt+0x163c>
   12f48:	ldr	ip, [sp, #84]	; 0x54
   12f4c:	ldr	r2, [sp, #340]	; 0x154
   12f50:	ldr	r3, [ip]
   12f54:	cmp	r2, r3
   12f58:	bne	14400 <elf32_fsize@plt+0x2d48>
   12f5c:	add	sp, sp, #348	; 0x15c
   12f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f64:	cmp	r2, fp
   12f68:	bls	12e6c <elf32_fsize@plt+0x17b4>
   12f6c:	mov	r2, #5
   12f70:	movw	r1, #9944	; 0x26d8
   12f74:	mov	r0, #0
   12f78:	movt	r1, #2
   12f7c:	bl	113b8 <dcgettext@plt>
   12f80:	ldr	r1, [sp, #44]	; 0x2c
   12f84:	mov	r4, r0
   12f88:	add	r0, sl, #16
   12f8c:	bl	12670 <elf32_fsize@plt+0xfb8>
   12f90:	ldr	r2, [sp, #44]	; 0x2c
   12f94:	mov	r1, r4
   12f98:	str	fp, [sp]
   12f9c:	mov	r3, r0
   12fa0:	mov	r0, #1
   12fa4:	bl	11580 <__printf_chk@plt>
   12fa8:	ldr	r2, [r8, #4]
   12fac:	ldrb	r3, [r7, #4]
   12fb0:	add	r2, r2, #1
   12fb4:	str	r2, [r8, #4]
   12fb8:	and	r2, r3, #15
   12fbc:	cmp	r2, #3
   12fc0:	bne	12e78 <elf32_fsize@plt+0x17c0>
   12fc4:	lsrs	r3, r3, #4
   12fc8:	beq	12e78 <elf32_fsize@plt+0x17c0>
   12fcc:	mov	r2, #5
   12fd0:	movw	r1, #10032	; 0x2730
   12fd4:	mov	r0, #0
   12fd8:	movt	r1, #2
   12fdc:	bl	113b8 <dcgettext@plt>
   12fe0:	ldr	r1, [sp, #44]	; 0x2c
   12fe4:	mov	r4, r0
   12fe8:	add	r0, sl, #16
   12fec:	bl	12670 <elf32_fsize@plt+0xfb8>
   12ff0:	mov	r1, r4
   12ff4:	str	fp, [sp]
   12ff8:	ldr	r2, [sp, #44]	; 0x2c
   12ffc:	mov	r3, r0
   13000:	mov	r0, #1
   13004:	bl	11580 <__printf_chk@plt>
   13008:	ldr	r3, [r8, #4]
   1300c:	add	r3, r3, #1
   13010:	str	r3, [r8, #4]
   13014:	b	12e78 <elf32_fsize@plt+0x17c0>
   13018:	ldr	r2, [r8, #8]
   1301c:	cmp	r3, r2
   13020:	bcc	1302c <elf32_fsize@plt+0x1974>
   13024:	cmp	r3, #65280	; 0xff00
   13028:	bcc	12dcc <elf32_fsize@plt+0x1714>
   1302c:	str	r3, [sp, #124]	; 0x7c
   13030:	ldrb	r3, [r7, #4]
   13034:	and	r1, r3, #15
   13038:	cmp	r1, #6
   1303c:	ble	12e24 <elf32_fsize@plt+0x176c>
   13040:	mov	r2, #0
   13044:	mov	r0, sl
   13048:	mov	r3, r2
   1304c:	bl	1f79c <elf32_fsize@plt+0xe0e4>
   13050:	cmp	r0, #0
   13054:	beq	13e7c <elf32_fsize@plt+0x27c4>
   13058:	ldrb	r3, [r7, #4]
   1305c:	lsr	r1, r3, #4
   13060:	cmp	r1, #2
   13064:	bls	12e30 <elf32_fsize@plt+0x1778>
   13068:	mov	r2, #0
   1306c:	mov	r0, sl
   13070:	mov	r3, r2
   13074:	bl	1fa60 <elf32_fsize@plt+0xe3a8>
   13078:	cmp	r0, #0
   1307c:	beq	13e2c <elf32_fsize@plt+0x2774>
   13080:	ldrb	r3, [r7, #4]
   13084:	lsr	r2, r3, #4
   13088:	cmp	r2, #10
   1308c:	bne	12e30 <elf32_fsize@plt+0x1778>
   13090:	and	r3, r3, #15
   13094:	cmp	r3, #1
   13098:	beq	12e30 <elf32_fsize@plt+0x1778>
   1309c:	mov	r2, #5
   130a0:	movw	r1, #8780	; 0x224c
   130a4:	mov	r0, #0
   130a8:	movt	r1, #2
   130ac:	bl	113b8 <dcgettext@plt>
   130b0:	ldr	r1, [sp, #44]	; 0x2c
   130b4:	mov	r4, r0
   130b8:	add	r0, sl, #16
   130bc:	bl	12670 <elf32_fsize@plt+0xfb8>
   130c0:	mov	r1, r4
   130c4:	str	fp, [sp]
   130c8:	ldr	r2, [sp, #44]	; 0x2c
   130cc:	mov	r3, r0
   130d0:	mov	r0, #1
   130d4:	bl	11580 <__printf_chk@plt>
   130d8:	ldr	r3, [r8, #4]
   130dc:	ldr	r1, [sp, #124]	; 0x7c
   130e0:	add	r3, r3, #1
   130e4:	str	r3, [r8, #4]
   130e8:	movw	r3, #65522	; 0xfff2
   130ec:	cmp	r1, r3
   130f0:	bne	12e40 <elf32_fsize@plt+0x1788>
   130f4:	ldr	r4, [sp, #76]	; 0x4c
   130f8:	ldrh	r3, [r4]
   130fc:	cmp	r3, #1
   13100:	beq	1314c <elf32_fsize@plt+0x1a94>
   13104:	mov	r2, #5
   13108:	movw	r1, #8848	; 0x2290
   1310c:	mov	r0, #0
   13110:	movt	r1, #2
   13114:	bl	113b8 <dcgettext@plt>
   13118:	ldr	r1, [sp, #44]	; 0x2c
   1311c:	mov	r4, r0
   13120:	add	r0, sl, #16
   13124:	bl	12670 <elf32_fsize@plt+0xfb8>
   13128:	mov	r1, r4
   1312c:	str	fp, [sp]
   13130:	ldr	r2, [sp, #44]	; 0x2c
   13134:	mov	r3, r0
   13138:	mov	r0, #1
   1313c:	bl	11580 <__printf_chk@plt>
   13140:	ldr	r3, [r8, #4]
   13144:	add	r3, r3, #1
   13148:	str	r3, [r8, #4]
   1314c:	ldr	r3, [r9, #44]	; 0x2c
   13150:	cmp	r3, fp
   13154:	bhi	13720 <elf32_fsize@plt+0x2068>
   13158:	ldrb	r3, [r7, #4]
   1315c:	cmp	r3, #2
   13160:	bne	12e58 <elf32_fsize@plt+0x17a0>
   13164:	mov	r2, #5
   13168:	movw	r1, #8992	; 0x2320
   1316c:	mov	r0, #0
   13170:	movt	r1, #2
   13174:	bl	113b8 <dcgettext@plt>
   13178:	ldr	r1, [sp, #44]	; 0x2c
   1317c:	mov	r4, r0
   13180:	add	r0, sl, #16
   13184:	bl	12670 <elf32_fsize@plt+0xfb8>
   13188:	ldr	r2, [sp, #44]	; 0x2c
   1318c:	mov	r1, r4
   13190:	str	fp, [sp]
   13194:	mov	r3, r0
   13198:	mov	r0, #1
   1319c:	bl	11580 <__printf_chk@plt>
   131a0:	ldr	r2, [r8, #4]
   131a4:	ldrb	r3, [r7, #4]
   131a8:	add	r2, r2, #1
   131ac:	str	r2, [r8, #4]
   131b0:	b	12e58 <elf32_fsize@plt+0x17a0>
   131b4:	ldr	r0, [sl, #16]
   131b8:	ldr	r1, [r9, #40]	; 0x28
   131bc:	bl	11430 <elf_strptr@plt>
   131c0:	cmp	r0, #0
   131c4:	str	r0, [sp, #112]	; 0x70
   131c8:	bne	12d94 <elf32_fsize@plt+0x16dc>
   131cc:	ldrh	r3, [r7, #6]
   131d0:	movw	r2, #65535	; 0xffff
   131d4:	movw	r4, #6476	; 0x194c
   131d8:	movt	r4, #2
   131dc:	cmp	r3, r2
   131e0:	str	r4, [sp, #112]	; 0x70
   131e4:	bne	12da4 <elf32_fsize@plt+0x16ec>
   131e8:	ldr	r4, [sp, #52]	; 0x34
   131ec:	cmp	r4, #0
   131f0:	beq	13af4 <elf32_fsize@plt+0x243c>
   131f4:	ldr	r3, [sp, #124]	; 0x7c
   131f8:	cmp	r3, #65280	; 0xff00
   131fc:	bcs	12e14 <elf32_fsize@plt+0x175c>
   13200:	mov	r2, #5
   13204:	movw	r1, #8532	; 0x2154
   13208:	mov	r0, #0
   1320c:	movt	r1, #2
   13210:	bl	113b8 <dcgettext@plt>
   13214:	ldr	r1, [sp, #96]	; 0x60
   13218:	mov	r4, r0
   1321c:	add	r0, sl, #16
   13220:	bl	12670 <elf32_fsize@plt+0xfb8>
   13224:	ldr	ip, [sp, #124]	; 0x7c
   13228:	mov	r1, r4
   1322c:	str	fp, [sp]
   13230:	ldr	r2, [sp, #96]	; 0x60
   13234:	str	ip, [sp, #4]
   13238:	mov	r3, r0
   1323c:	mov	r0, #1
   13240:	bl	11580 <__printf_chk@plt>
   13244:	ldr	r3, [r8, #4]
   13248:	add	r3, r3, #1
   1324c:	str	r3, [r8, #4]
   13250:	b	12e14 <elf32_fsize@plt+0x175c>
   13254:	mov	r2, #5
   13258:	movw	r1, #10900	; 0x2a94
   1325c:	movt	r1, #2
   13260:	bl	113b8 <dcgettext@plt>
   13264:	ldr	r1, [sp, #44]	; 0x2c
   13268:	mov	r4, r0
   1326c:	add	r0, sl, #16
   13270:	bl	12670 <elf32_fsize@plt+0xfb8>
   13274:	mov	r1, r4
   13278:	str	fp, [sp]
   1327c:	ldr	r2, [sp, #44]	; 0x2c
   13280:	mov	r3, r0
   13284:	mov	r0, #1
   13288:	bl	11580 <__printf_chk@plt>
   1328c:	ldr	r3, [r8, #4]
   13290:	add	r3, r3, #1
   13294:	str	r3, [r8, #4]
   13298:	b	12f24 <elf32_fsize@plt+0x186c>
   1329c:	add	r4, sp, #272	; 0x110
   132a0:	ldr	r1, [sp, #124]	; 0x7c
   132a4:	ldr	r0, [sl, #16]
   132a8:	bl	11628 <elf_getscn@plt>
   132ac:	mov	r1, r4
   132b0:	bl	1134c <gelf_getshdr@plt>
   132b4:	subs	r6, r0, #0
   132b8:	beq	13b50 <elf32_fsize@plt+0x2498>
   132bc:	ldr	r3, [sp, #124]	; 0x7c
   132c0:	cmp	r3, #0
   132c4:	bne	13814 <elf32_fsize@plt+0x215c>
   132c8:	ldr	r5, [sp, #76]	; 0x4c
   132cc:	ldrh	r3, [r5]
   132d0:	cmp	r3, #1
   132d4:	beq	13324 <elf32_fsize@plt+0x1c6c>
   132d8:	mov	r2, #5
   132dc:	movw	r1, #10172	; 0x27bc
   132e0:	mov	r0, #0
   132e4:	movt	r1, #2
   132e8:	bl	113b8 <dcgettext@plt>
   132ec:	ldr	r1, [sp, #44]	; 0x2c
   132f0:	mov	r4, r0
   132f4:	add	r0, sl, #16
   132f8:	bl	12670 <elf32_fsize@plt+0xfb8>
   132fc:	ldr	ip, [sp, #124]	; 0x7c
   13300:	mov	r1, r4
   13304:	ldr	r2, [sp, #44]	; 0x2c
   13308:	str	ip, [sp]
   1330c:	mov	r3, r0
   13310:	mov	r0, #1
   13314:	bl	11580 <__printf_chk@plt>
   13318:	ldr	r3, [r8, #4]
   1331c:	add	r3, r3, #1
   13320:	str	r3, [r8, #4]
   13324:	cmp	r6, #0
   13328:	bne	143f4 <elf32_fsize@plt+0x2d3c>
   1332c:	mov	r2, #5
   13330:	mov	r0, r6
   13334:	movw	r1, #10532	; 0x2924
   13338:	movt	r1, #2
   1333c:	bl	113b8 <dcgettext@plt>
   13340:	ldr	r1, [sp, #44]	; 0x2c
   13344:	mov	r4, r0
   13348:	add	r0, sl, #16
   1334c:	bl	12670 <elf32_fsize@plt+0xfb8>
   13350:	mov	r1, r4
   13354:	ldr	r2, [sp, #44]	; 0x2c
   13358:	mov	r3, r0
   1335c:	mov	r0, #1
   13360:	bl	11580 <__printf_chk@plt>
   13364:	ldr	r3, [r8, #4]
   13368:	add	r3, r3, #1
   1336c:	str	r3, [r8, #4]
   13370:	b	12efc <elf32_fsize@plt+0x1844>
   13374:	mov	r2, #5
   13378:	movw	r1, #9860	; 0x2684
   1337c:	movt	r1, #2
   13380:	bl	113b8 <dcgettext@plt>
   13384:	ldr	r1, [sp, #44]	; 0x2c
   13388:	mov	r4, r0
   1338c:	add	r0, sl, #16
   13390:	bl	12670 <elf32_fsize@plt+0xfb8>
   13394:	ldr	r2, [sp, #44]	; 0x2c
   13398:	mov	r1, r4
   1339c:	str	fp, [sp]
   133a0:	mov	r3, r0
   133a4:	mov	r0, #1
   133a8:	bl	11580 <__printf_chk@plt>
   133ac:	ldr	r2, [r8, #4]
   133b0:	ldrb	r3, [r7, #4]
   133b4:	add	r2, r2, #1
   133b8:	str	r2, [r8, #4]
   133bc:	b	12e6c <elf32_fsize@plt+0x17b4>
   133c0:	ldrd	r4, [r7, #8]
   133c4:	mov	r6, r0
   133c8:	ldrd	r2, [r0, #16]
   133cc:	cmp	r5, r3
   133d0:	cmpeq	r4, r2
   133d4:	beq	1342c <elf32_fsize@plt+0x1d74>
   133d8:	mov	r2, #5
   133dc:	movw	r1, #10624	; 0x2980
   133e0:	mov	r0, #0
   133e4:	movt	r1, #2
   133e8:	bl	113b8 <dcgettext@plt>
   133ec:	ldr	r1, [sp, #44]	; 0x2c
   133f0:	mov	r4, r0
   133f4:	add	r0, sl, #16
   133f8:	bl	12670 <elf32_fsize@plt+0xfb8>
   133fc:	mov	r1, r4
   13400:	ldrd	r4, [r7, #8]
   13404:	ldr	r2, [sp, #44]	; 0x2c
   13408:	strd	r4, [sp]
   1340c:	ldrd	r4, [r6, #16]
   13410:	strd	r4, [sp, #8]
   13414:	mov	r3, r0
   13418:	mov	r0, #1
   1341c:	bl	11580 <__printf_chk@plt>
   13420:	ldr	r3, [r8, #4]
   13424:	add	r3, r3, #1
   13428:	str	r3, [r8, #4]
   1342c:	ldrb	r0, [r8, #23]
   13430:	cmp	r0, #0
   13434:	bne	12efc <elf32_fsize@plt+0x1844>
   13438:	ldrd	r4, [r7, #16]
   1343c:	ldrd	r2, [r6, #40]	; 0x28
   13440:	cmp	r5, r3
   13444:	cmpeq	r4, r2
   13448:	beq	12efc <elf32_fsize@plt+0x1844>
   1344c:	mov	r2, #5
   13450:	movw	r1, #10720	; 0x29e0
   13454:	movt	r1, #2
   13458:	bl	113b8 <dcgettext@plt>
   1345c:	ldr	r1, [sp, #44]	; 0x2c
   13460:	mov	r4, r0
   13464:	add	r0, sl, #16
   13468:	bl	12670 <elf32_fsize@plt+0xfb8>
   1346c:	mov	r1, r4
   13470:	ldrd	r4, [r7, #16]
   13474:	ldr	r2, [sp, #44]	; 0x2c
   13478:	strd	r4, [sp]
   1347c:	ldrd	r4, [r6, #40]	; 0x28
   13480:	strd	r4, [sp, #8]
   13484:	mov	r3, r0
   13488:	mov	r0, #1
   1348c:	bl	11580 <__printf_chk@plt>
   13490:	ldr	r5, [sp, #80]	; 0x50
   13494:	ldr	r3, [r5, #4]
   13498:	add	r3, r3, #1
   1349c:	str	r3, [r5, #4]
   134a0:	b	12efc <elf32_fsize@plt+0x1844>
   134a4:	ldr	r0, [sl, #16]
   134a8:	bl	11628 <elf_getscn@plt>
   134ac:	add	r1, sp, #272	; 0x110
   134b0:	bl	1134c <gelf_getshdr@plt>
   134b4:	subs	r4, r0, #0
   134b8:	beq	12e54 <elf32_fsize@plt+0x179c>
   134bc:	ldr	r5, [sp, #76]	; 0x4c
   134c0:	ldrb	ip, [r7, #4]
   134c4:	ldrh	r3, [r5]
   134c8:	cmp	r3, #1
   134cc:	ldrdne	r0, [r4, #16]
   134d0:	moveq	r3, #0
   134d4:	moveq	r2, #0
   134d8:	strdeq	r2, [sp, #88]	; 0x58
   134dc:	and	r3, ip, #7
   134e0:	strdne	r0, [sp, #88]	; 0x58
   134e4:	cmp	r3, #2
   134e8:	beq	13e04 <elf32_fsize@plt+0x274c>
   134ec:	ldrd	r0, [r7, #8]
   134f0:	strd	r0, [sp, #56]	; 0x38
   134f4:	and	ip, ip, #15
   134f8:	cmp	ip, #6
   134fc:	beq	13974 <elf32_fsize@plt+0x22bc>
   13500:	mov	r0, sl
   13504:	mov	r1, r7
   13508:	ldr	r2, [sp, #112]	; 0x70
   1350c:	mov	r3, r4
   13510:	bl	1fefc <elf32_fsize@plt+0xe844>
   13514:	cmp	r0, #0
   13518:	bne	12e54 <elf32_fsize@plt+0x179c>
   1351c:	ldrd	r2, [r4, #32]
   13520:	ldrd	r4, [sp, #56]	; 0x38
   13524:	strd	r2, [sp, #24]
   13528:	ldrd	r2, [sp, #88]	; 0x58
   1352c:	subs	r4, r4, r2
   13530:	sbc	r5, r5, r3
   13534:	ldrd	r2, [sp, #24]
   13538:	strd	r4, [sp, #56]	; 0x38
   1353c:	cmp	r5, r3
   13540:	cmpeq	r4, r2
   13544:	bls	13f98 <elf32_fsize@plt+0x28e0>
   13548:	ldrb	r3, [r8, #23]
   1354c:	add	r6, sl, #16
   13550:	cmp	r3, #0
   13554:	beq	136d4 <elf32_fsize@plt+0x201c>
   13558:	ldr	r1, [sp, #44]	; 0x2c
   1355c:	mov	r0, r6
   13560:	bl	12670 <elf32_fsize@plt+0xfb8>
   13564:	movw	r1, #9120	; 0x23a0
   13568:	movt	r1, #2
   1356c:	bl	11358 <strcmp@plt>
   13570:	cmp	r0, #0
   13574:	bne	14364 <elf32_fsize@plt+0x2cac>
   13578:	ldrd	r2, [r7, #16]
   1357c:	orrs	r4, r2, r3
   13580:	bne	136d4 <elf32_fsize@plt+0x201c>
   13584:	movw	r1, #9136	; 0x23b0
   13588:	ldr	r0, [sp, #112]	; 0x70
   1358c:	movt	r1, #2
   13590:	bl	11358 <strcmp@plt>
   13594:	cmp	r0, #0
   13598:	beq	12e54 <elf32_fsize@plt+0x179c>
   1359c:	movw	r1, #9160	; 0x23c8
   135a0:	ldr	r0, [sp, #112]	; 0x70
   135a4:	movt	r1, #2
   135a8:	bl	11358 <strcmp@plt>
   135ac:	cmp	r0, #0
   135b0:	beq	12e54 <elf32_fsize@plt+0x179c>
   135b4:	movw	r1, #9180	; 0x23dc
   135b8:	ldr	r0, [sp, #112]	; 0x70
   135bc:	movt	r1, #2
   135c0:	bl	11358 <strcmp@plt>
   135c4:	cmp	r0, #0
   135c8:	beq	12e54 <elf32_fsize@plt+0x179c>
   135cc:	movw	r1, #9200	; 0x23f0
   135d0:	ldr	r0, [sp, #112]	; 0x70
   135d4:	movt	r1, #2
   135d8:	bl	11358 <strcmp@plt>
   135dc:	cmp	r0, #0
   135e0:	beq	12e54 <elf32_fsize@plt+0x179c>
   135e4:	movw	r1, #9220	; 0x2404
   135e8:	ldr	r0, [sp, #112]	; 0x70
   135ec:	movt	r1, #2
   135f0:	bl	11358 <strcmp@plt>
   135f4:	cmp	r0, #0
   135f8:	beq	12e54 <elf32_fsize@plt+0x179c>
   135fc:	movw	r1, #9240	; 0x2418
   13600:	ldr	r0, [sp, #112]	; 0x70
   13604:	movt	r1, #2
   13608:	bl	11358 <strcmp@plt>
   1360c:	cmp	r0, #0
   13610:	beq	12e54 <elf32_fsize@plt+0x179c>
   13614:	movw	r1, #9260	; 0x242c
   13618:	ldr	r0, [sp, #112]	; 0x70
   1361c:	movt	r1, #2
   13620:	bl	11358 <strcmp@plt>
   13624:	cmp	r0, #0
   13628:	beq	12e54 <elf32_fsize@plt+0x179c>
   1362c:	movw	r1, #9272	; 0x2438
   13630:	ldr	r0, [sp, #112]	; 0x70
   13634:	movt	r1, #2
   13638:	bl	11358 <strcmp@plt>
   1363c:	cmp	r0, #0
   13640:	beq	12e54 <elf32_fsize@plt+0x179c>
   13644:	movw	r1, #9288	; 0x2448
   13648:	ldr	r0, [sp, #112]	; 0x70
   1364c:	movt	r1, #2
   13650:	bl	11358 <strcmp@plt>
   13654:	cmp	r0, #0
   13658:	beq	12e54 <elf32_fsize@plt+0x179c>
   1365c:	movw	r1, #9300	; 0x2454
   13660:	ldr	r0, [sp, #112]	; 0x70
   13664:	movt	r1, #2
   13668:	bl	11358 <strcmp@plt>
   1366c:	cmp	r0, #0
   13670:	beq	12e54 <elf32_fsize@plt+0x179c>
   13674:	movw	r1, #9308	; 0x245c
   13678:	ldr	r0, [sp, #112]	; 0x70
   1367c:	movt	r1, #2
   13680:	bl	11358 <strcmp@plt>
   13684:	cmp	r0, #0
   13688:	beq	12e54 <elf32_fsize@plt+0x179c>
   1368c:	movw	r1, #9316	; 0x2464
   13690:	ldr	r0, [sp, #112]	; 0x70
   13694:	movt	r1, #2
   13698:	bl	11358 <strcmp@plt>
   1369c:	cmp	r0, #0
   136a0:	beq	12e54 <elf32_fsize@plt+0x179c>
   136a4:	movw	r1, #9252	; 0x2424
   136a8:	ldr	r0, [sp, #112]	; 0x70
   136ac:	movt	r1, #2
   136b0:	bl	11358 <strcmp@plt>
   136b4:	cmp	r0, #0
   136b8:	beq	12e54 <elf32_fsize@plt+0x179c>
   136bc:	movw	r1, #9324	; 0x246c
   136c0:	ldr	r0, [sp, #112]	; 0x70
   136c4:	movt	r1, #2
   136c8:	bl	11358 <strcmp@plt>
   136cc:	cmp	r0, #0
   136d0:	beq	12e54 <elf32_fsize@plt+0x179c>
   136d4:	mov	r2, #5
   136d8:	movw	r1, #9064	; 0x2368
   136dc:	mov	r0, #0
   136e0:	movt	r1, #2
   136e4:	bl	113b8 <dcgettext@plt>
   136e8:	ldr	r1, [sp, #44]	; 0x2c
   136ec:	mov	r4, r0
   136f0:	mov	r0, r6
   136f4:	bl	12670 <elf32_fsize@plt+0xfb8>
   136f8:	mov	r1, r4
   136fc:	str	fp, [sp]
   13700:	ldr	r2, [sp, #44]	; 0x2c
   13704:	mov	r3, r0
   13708:	mov	r0, #1
   1370c:	bl	11580 <__printf_chk@plt>
   13710:	ldr	r3, [r8, #4]
   13714:	add	r3, r3, #1
   13718:	str	r3, [r8, #4]
   1371c:	b	12e54 <elf32_fsize@plt+0x179c>
   13720:	mov	r2, #5
   13724:	movw	r1, #8924	; 0x22dc
   13728:	mov	r0, #0
   1372c:	movt	r1, #2
   13730:	bl	113b8 <dcgettext@plt>
   13734:	ldr	r1, [sp, #44]	; 0x2c
   13738:	mov	r4, r0
   1373c:	add	r0, sl, #16
   13740:	bl	12670 <elf32_fsize@plt+0xfb8>
   13744:	mov	r1, r4
   13748:	str	fp, [sp]
   1374c:	ldr	r2, [sp, #44]	; 0x2c
   13750:	mov	r3, r0
   13754:	mov	r0, #1
   13758:	bl	11580 <__printf_chk@plt>
   1375c:	ldr	r3, [r8, #4]
   13760:	add	r3, r3, #1
   13764:	str	r3, [r8, #4]
   13768:	b	13158 <elf32_fsize@plt+0x1aa0>
   1376c:	mov	r2, #5
   13770:	movw	r1, #8336	; 0x2090
   13774:	movt	r1, #2
   13778:	bl	113b8 <dcgettext@plt>
   1377c:	ldr	r1, [sp, #44]	; 0x2c
   13780:	mov	r5, r0
   13784:	add	r0, sl, #16
   13788:	bl	12670 <elf32_fsize@plt+0xfb8>
   1378c:	mov	r4, r0
   13790:	mvn	r0, #0
   13794:	bl	11520 <elf_errmsg@plt>
   13798:	mov	r3, r4
   1379c:	mov	r1, r5
   137a0:	str	fp, [sp]
   137a4:	ldr	r2, [sp, #44]	; 0x2c
   137a8:	str	r0, [sp, #4]
   137ac:	mov	r0, #1
   137b0:	bl	11580 <__printf_chk@plt>
   137b4:	ldr	r3, [r8, #4]
   137b8:	add	r3, r3, #1
   137bc:	str	r3, [r8, #4]
   137c0:	b	12f24 <elf32_fsize@plt+0x186c>
   137c4:	mov	r2, #5
   137c8:	movw	r1, #10808	; 0x2a38
   137cc:	mov	r0, #0
   137d0:	movt	r1, #2
   137d4:	bl	113b8 <dcgettext@plt>
   137d8:	ldr	r1, [sp, #44]	; 0x2c
   137dc:	mov	r4, r0
   137e0:	add	r0, sl, #16
   137e4:	bl	12670 <elf32_fsize@plt+0xfb8>
   137e8:	mov	r1, r4
   137ec:	str	fp, [sp]
   137f0:	ldr	r2, [sp, #44]	; 0x2c
   137f4:	mov	r3, r0
   137f8:	mov	r0, #1
   137fc:	bl	11580 <__printf_chk@plt>
   13800:	ldr	r3, [r8, #4]
   13804:	ldrb	r1, [r7, #5]
   13808:	add	r3, r3, #1
   1380c:	str	r3, [r8, #4]
   13810:	b	12f14 <elf32_fsize@plt+0x185c>
   13814:	ldr	r0, [sl, #16]
   13818:	ldr	r1, [r8, #12]
   1381c:	ldr	r2, [r6]
   13820:	bl	11430 <elf_strptr@plt>
   13824:	subs	r4, r0, #0
   13828:	str	r4, [sp, #56]	; 0x38
   1382c:	beq	141a0 <elf32_fsize@plt+0x2ae8>
   13830:	movw	r1, #10152	; 0x27a8
   13834:	movt	r1, #2
   13838:	bl	11358 <strcmp@plt>
   1383c:	cmp	r0, #0
   13840:	beq	1385c <elf32_fsize@plt+0x21a4>
   13844:	movw	r1, #10164	; 0x27b4
   13848:	ldr	r0, [sp, #56]	; 0x38
   1384c:	movt	r1, #2
   13850:	bl	11358 <strcmp@plt>
   13854:	cmp	r0, #0
   13858:	bne	13da0 <elf32_fsize@plt+0x26e8>
   1385c:	ldr	r2, [sp, #112]	; 0x70
   13860:	mov	r0, sl
   13864:	mov	r1, r7
   13868:	mov	r3, r6
   1386c:	bl	1fefc <elf32_fsize@plt+0xe844>
   13870:	cmp	r0, #0
   13874:	bne	12efc <elf32_fsize@plt+0x1844>
   13878:	ldr	r4, [sp, #76]	; 0x4c
   1387c:	ldrh	r3, [r4]
   13880:	cmp	r3, #1
   13884:	beq	138f4 <elf32_fsize@plt+0x223c>
   13888:	ldrd	r4, [r7, #8]
   1388c:	ldrd	r2, [r6, #16]
   13890:	cmp	r5, r3
   13894:	cmpeq	r4, r2
   13898:	beq	138f4 <elf32_fsize@plt+0x223c>
   1389c:	mov	r2, #5
   138a0:	movw	r1, #10332	; 0x285c
   138a4:	movt	r1, #2
   138a8:	bl	113b8 <dcgettext@plt>
   138ac:	ldr	r1, [sp, #44]	; 0x2c
   138b0:	mov	r5, r0
   138b4:	add	r0, sl, #16
   138b8:	bl	12670 <elf32_fsize@plt+0xfb8>
   138bc:	ldr	r4, [sp, #56]	; 0x38
   138c0:	ldr	r2, [sp, #44]	; 0x2c
   138c4:	mov	r3, r0
   138c8:	ldrd	r0, [r7, #8]
   138cc:	str	r4, [sp, #8]
   138d0:	strd	r0, [sp]
   138d4:	mov	r1, r5
   138d8:	ldrd	r4, [r6, #16]
   138dc:	mov	r0, #1
   138e0:	strd	r4, [sp, #16]
   138e4:	bl	11580 <__printf_chk@plt>
   138e8:	ldr	r3, [r8, #4]
   138ec:	add	r3, r3, #1
   138f0:	str	r3, [r8, #4]
   138f4:	ldrb	r0, [r8, #23]
   138f8:	cmp	r0, #0
   138fc:	bne	12efc <elf32_fsize@plt+0x1844>
   13900:	ldrd	r2, [r6, #32]
   13904:	ldrd	r4, [r7, #16]
   13908:	cmp	r5, r3
   1390c:	cmpeq	r4, r2
   13910:	beq	12efc <elf32_fsize@plt+0x1844>
   13914:	mov	r2, #5
   13918:	movw	r1, #10436	; 0x28c4
   1391c:	movt	r1, #2
   13920:	bl	113b8 <dcgettext@plt>
   13924:	ldr	r1, [sp, #44]	; 0x2c
   13928:	mov	r5, r0
   1392c:	add	r0, sl, #16
   13930:	bl	12670 <elf32_fsize@plt+0xfb8>
   13934:	ldr	r4, [sp, #56]	; 0x38
   13938:	ldr	r2, [sp, #44]	; 0x2c
   1393c:	mov	r3, r0
   13940:	ldrd	r0, [r7, #16]
   13944:	str	r4, [sp, #8]
   13948:	strd	r0, [sp]
   1394c:	mov	r1, r5
   13950:	ldrd	r4, [r6, #32]
   13954:	mov	r0, #1
   13958:	strd	r4, [sp, #16]
   1395c:	bl	11580 <__printf_chk@plt>
   13960:	ldr	r5, [sp, #80]	; 0x50
   13964:	ldr	r3, [r5, #4]
   13968:	add	r3, r3, #1
   1396c:	str	r3, [r5, #4]
   13970:	b	12efc <elf32_fsize@plt+0x1844>
   13974:	ldrd	r2, [r4, #8]
   13978:	mov	r0, #1024	; 0x400
   1397c:	mov	r1, #0
   13980:	and	r2, r2, r0
   13984:	and	r3, r3, r1
   13988:	orrs	r5, r2, r3
   1398c:	beq	13ec8 <elf32_fsize@plt+0x2810>
   13990:	ldr	r5, [sp, #76]	; 0x4c
   13994:	ldrh	ip, [r5]
   13998:	cmp	ip, #1
   1399c:	beq	13f54 <elf32_fsize@plt+0x289c>
   139a0:	ldr	r3, [r8, #16]
   139a4:	cmp	r3, #0
   139a8:	movne	r6, #0
   139ac:	ldrne	r5, [sp, #112]	; 0x70
   139b0:	beq	141c0 <elf32_fsize@plt+0x2b08>
   139b4:	ldr	r0, [sl, #16]
   139b8:	mov	r1, r6
   139bc:	add	r2, sp, #152	; 0x98
   139c0:	bl	113f4 <gelf_getphdr@plt>
   139c4:	cmp	r0, #0
   139c8:	beq	139d8 <elf32_fsize@plt+0x2320>
   139cc:	ldr	r3, [r0]
   139d0:	cmp	r3, #7
   139d4:	beq	141b0 <elf32_fsize@plt+0x2af8>
   139d8:	ldr	r3, [r8, #16]
   139dc:	add	r6, r6, #1
   139e0:	movw	ip, #37252	; 0x9184
   139e4:	movt	ip, #3
   139e8:	cmp	r6, r3
   139ec:	bcc	139b4 <elf32_fsize@plt+0x22fc>
   139f0:	cmp	r3, r6
   139f4:	str	r5, [sp, #112]	; 0x70
   139f8:	beq	141c0 <elf32_fsize@plt+0x2b08>
   139fc:	cmp	r0, #0
   13a00:	beq	14388 <elf32_fsize@plt+0x2cd0>
   13a04:	ldrb	ip, [r8, #22]
   13a08:	cmp	ip, #0
   13a0c:	bne	12e54 <elf32_fsize@plt+0x179c>
   13a10:	ldrd	r2, [r4, #24]
   13a14:	strd	r2, [sp, #24]
   13a18:	ldrd	r2, [r0, #8]
   13a1c:	ldrd	r0, [sp, #24]
   13a20:	subs	r0, r0, r2
   13a24:	sbc	r1, r1, r3
   13a28:	ldrd	r2, [sp, #56]	; 0x38
   13a2c:	strd	r0, [sp, #24]
   13a30:	cmp	r3, r1
   13a34:	cmpeq	r2, r0
   13a38:	bcc	142e4 <elf32_fsize@plt+0x2c2c>
   13a3c:	ldrd	r4, [r4, #32]
   13a40:	ldrd	r0, [sp, #24]
   13a44:	ldrd	r2, [sp, #56]	; 0x38
   13a48:	adds	r4, r4, r0
   13a4c:	adc	r5, r5, r1
   13a50:	cmp	r3, r5
   13a54:	cmpeq	r2, r4
   13a58:	bhi	1434c <elf32_fsize@plt+0x2c94>
   13a5c:	ldrd	r0, [sp, #56]	; 0x38
   13a60:	ldrd	r2, [r7, #16]
   13a64:	adds	r0, r0, r2
   13a68:	adc	r1, r1, r3
   13a6c:	cmp	r5, r1
   13a70:	cmpeq	r4, r0
   13a74:	bcs	12e54 <elf32_fsize@plt+0x179c>
   13a78:	movw	r1, #9332	; 0x2474
   13a7c:	add	r6, sl, #16
   13a80:	movt	r1, #2
   13a84:	mov	r0, ip
   13a88:	mov	r2, #5
   13a8c:	bl	113b8 <dcgettext@plt>
   13a90:	ldr	r1, [sp, #44]	; 0x2c
   13a94:	mov	r2, r0
   13a98:	mov	r0, r6
   13a9c:	str	r2, [sp, #32]
   13aa0:	bl	12670 <elf32_fsize@plt+0xfb8>
   13aa4:	ldr	r4, [sp, #124]	; 0x7c
   13aa8:	mov	r1, r4
   13aac:	mov	r3, r0
   13ab0:	mov	r0, r6
   13ab4:	str	r3, [sp, #40]	; 0x28
   13ab8:	bl	12670 <elf32_fsize@plt+0xfb8>
   13abc:	ldr	r2, [sp, #32]
   13ac0:	str	r4, [sp, #4]
   13ac4:	ldr	r3, [sp, #40]	; 0x28
   13ac8:	mov	r1, r2
   13acc:	str	fp, [sp]
   13ad0:	ldr	r2, [sp, #44]	; 0x2c
   13ad4:	str	r0, [sp, #8]
   13ad8:	mov	r0, #1
   13adc:	bl	11580 <__printf_chk@plt>
   13ae0:	ldr	r4, [sp, #80]	; 0x50
   13ae4:	ldr	r3, [r4, #4]
   13ae8:	add	r3, r3, #1
   13aec:	str	r3, [r4, #4]
   13af0:	b	12e54 <elf32_fsize@plt+0x179c>
   13af4:	ldr	r5, [sp, #104]	; 0x68
   13af8:	cmp	r5, #0
   13afc:	bne	12e14 <elf32_fsize@plt+0x175c>
   13b00:	mov	r2, #5
   13b04:	mov	r0, r5
   13b08:	movw	r1, #8436	; 0x20f4
   13b0c:	movt	r1, #2
   13b10:	bl	113b8 <dcgettext@plt>
   13b14:	ldr	r1, [sp, #44]	; 0x2c
   13b18:	mov	r4, r0
   13b1c:	add	r0, sl, #16
   13b20:	bl	12670 <elf32_fsize@plt+0xfb8>
   13b24:	mov	r1, r4
   13b28:	str	fp, [sp]
   13b2c:	ldr	r2, [sp, #44]	; 0x2c
   13b30:	mov	r3, r0
   13b34:	mov	r0, #1
   13b38:	str	r0, [sp, #104]	; 0x68
   13b3c:	bl	11580 <__printf_chk@plt>
   13b40:	ldr	r3, [r8, #4]
   13b44:	add	r3, r3, #1
   13b48:	str	r3, [r8, #4]
   13b4c:	b	12e14 <elf32_fsize@plt+0x175c>
   13b50:	ldr	r3, [sp, #124]	; 0x7c
   13b54:	movw	r2, #65521	; 0xfff1
   13b58:	cmp	r3, r2
   13b5c:	beq	14074 <elf32_fsize@plt+0x29bc>
   13b60:	cmp	r3, #0
   13b64:	beq	132c8 <elf32_fsize@plt+0x1c10>
   13b68:	b	132d8 <elf32_fsize@plt+0x1c20>
   13b6c:	mov	r2, #5
   13b70:	movw	r1, #8168	; 0x1fe8
   13b74:	mov	r0, #0
   13b78:	movt	r1, #2
   13b7c:	bl	113b8 <dcgettext@plt>
   13b80:	mov	r1, r9
   13b84:	mov	r4, r0
   13b88:	add	r0, sl, #16
   13b8c:	bl	12670 <elf32_fsize@plt+0xfb8>
   13b90:	mov	r1, r4
   13b94:	movw	r2, #8268	; 0x204c
   13b98:	movt	r2, #2
   13b9c:	str	r2, [sp]
   13ba0:	mov	r2, r9
   13ba4:	mov	r3, r0
   13ba8:	mov	r0, #1
   13bac:	bl	11580 <__printf_chk@plt>
   13bb0:	ldr	r3, [r8, #4]
   13bb4:	add	r3, r3, #1
   13bb8:	str	r3, [r8, #4]
   13bbc:	b	12c9c <elf32_fsize@plt+0x15e4>
   13bc0:	mov	r2, #5
   13bc4:	movw	r1, #8168	; 0x1fe8
   13bc8:	mov	r0, #0
   13bcc:	movt	r1, #2
   13bd0:	bl	113b8 <dcgettext@plt>
   13bd4:	mov	r1, r9
   13bd8:	mov	r5, r0
   13bdc:	add	r0, sl, #16
   13be0:	bl	12670 <elf32_fsize@plt+0xfb8>
   13be4:	mov	r1, r5
   13be8:	movw	r2, #8256	; 0x2040
   13bec:	movt	r2, #2
   13bf0:	str	r2, [sp]
   13bf4:	mov	r2, r9
   13bf8:	mov	r3, r0
   13bfc:	mov	r0, #1
   13c00:	bl	11580 <__printf_chk@plt>
   13c04:	ldr	r3, [r8, #4]
   13c08:	add	r3, r3, #1
   13c0c:	str	r3, [r8, #4]
   13c10:	ldrh	r3, [r4, #6]
   13c14:	cmp	r3, #0
   13c18:	beq	12c9c <elf32_fsize@plt+0x15e4>
   13c1c:	b	13b6c <elf32_fsize@plt+0x24b4>
   13c20:	mov	r2, #5
   13c24:	movw	r1, #8168	; 0x1fe8
   13c28:	mov	r0, #0
   13c2c:	movt	r1, #2
   13c30:	bl	113b8 <dcgettext@plt>
   13c34:	mov	r1, r9
   13c38:	mov	r5, r0
   13c3c:	add	r0, sl, #16
   13c40:	bl	12670 <elf32_fsize@plt+0xfb8>
   13c44:	mov	r1, r5
   13c48:	movw	r2, #8248	; 0x2038
   13c4c:	movt	r2, #2
   13c50:	str	r2, [sp]
   13c54:	mov	r2, r9
   13c58:	mov	r3, r0
   13c5c:	mov	r0, #1
   13c60:	bl	11580 <__printf_chk@plt>
   13c64:	ldr	r3, [r8, #4]
   13c68:	add	r3, r3, #1
   13c6c:	str	r3, [r8, #4]
   13c70:	ldrb	r3, [r4, #5]
   13c74:	cmp	r3, #0
   13c78:	beq	12c90 <elf32_fsize@plt+0x15d8>
   13c7c:	b	13bc0 <elf32_fsize@plt+0x2508>
   13c80:	mov	r2, #5
   13c84:	movw	r1, #8168	; 0x1fe8
   13c88:	mov	r0, #0
   13c8c:	movt	r1, #2
   13c90:	bl	113b8 <dcgettext@plt>
   13c94:	mov	r1, r9
   13c98:	mov	r5, r0
   13c9c:	add	r0, sl, #16
   13ca0:	bl	12670 <elf32_fsize@plt+0xfb8>
   13ca4:	mov	r1, r5
   13ca8:	movw	r2, #8240	; 0x2030
   13cac:	movt	r2, #2
   13cb0:	str	r2, [sp]
   13cb4:	mov	r2, r9
   13cb8:	mov	r3, r0
   13cbc:	mov	r0, #1
   13cc0:	bl	11580 <__printf_chk@plt>
   13cc4:	ldr	r3, [r8, #4]
   13cc8:	add	r3, r3, #1
   13ccc:	str	r3, [r8, #4]
   13cd0:	ldrb	r3, [r4, #4]
   13cd4:	cmp	r3, #0
   13cd8:	beq	12c84 <elf32_fsize@plt+0x15cc>
   13cdc:	b	13c20 <elf32_fsize@plt+0x2568>
   13ce0:	mov	r2, #5
   13ce4:	movw	r1, #8168	; 0x1fe8
   13ce8:	mov	r0, #0
   13cec:	movt	r1, #2
   13cf0:	bl	113b8 <dcgettext@plt>
   13cf4:	mov	r1, r9
   13cf8:	mov	r5, r0
   13cfc:	add	r0, sl, #16
   13d00:	bl	12670 <elf32_fsize@plt+0xfb8>
   13d04:	mov	r1, r5
   13d08:	movw	r2, #8228	; 0x2024
   13d0c:	movt	r2, #2
   13d10:	str	r2, [sp]
   13d14:	mov	r2, r9
   13d18:	mov	r3, r0
   13d1c:	mov	r0, #1
   13d20:	bl	11580 <__printf_chk@plt>
   13d24:	ldr	r3, [r8, #4]
   13d28:	add	r3, r3, #1
   13d2c:	str	r3, [r8, #4]
   13d30:	ldrd	r2, [r4, #16]
   13d34:	orrs	r0, r2, r3
   13d38:	beq	12c78 <elf32_fsize@plt+0x15c0>
   13d3c:	b	13c80 <elf32_fsize@plt+0x25c8>
   13d40:	mov	r2, #5
   13d44:	movw	r1, #8168	; 0x1fe8
   13d48:	mov	r0, #0
   13d4c:	movt	r1, #2
   13d50:	bl	113b8 <dcgettext@plt>
   13d54:	mov	r1, r9
   13d58:	mov	r5, r0
   13d5c:	add	r0, sl, #16
   13d60:	bl	12670 <elf32_fsize@plt+0xfb8>
   13d64:	mov	r1, r5
   13d68:	movw	r2, #8220	; 0x201c
   13d6c:	movt	r2, #2
   13d70:	str	r2, [sp]
   13d74:	mov	r2, r9
   13d78:	mov	r3, r0
   13d7c:	mov	r0, #1
   13d80:	bl	11580 <__printf_chk@plt>
   13d84:	ldr	r3, [r8, #4]
   13d88:	add	r3, r3, #1
   13d8c:	str	r3, [r8, #4]
   13d90:	ldrd	r2, [r4, #8]
   13d94:	orrs	ip, r2, r3
   13d98:	beq	12c6c <elf32_fsize@plt+0x15b4>
   13d9c:	b	13ce0 <elf32_fsize@plt+0x2628>
   13da0:	mov	r2, #5
   13da4:	movw	r1, #10252	; 0x280c
   13da8:	mov	r0, #0
   13dac:	movt	r1, #2
   13db0:	bl	113b8 <dcgettext@plt>
   13db4:	ldr	r1, [sp, #44]	; 0x2c
   13db8:	mov	r2, r0
   13dbc:	add	r0, sl, #16
   13dc0:	str	r2, [sp, #32]
   13dc4:	bl	12670 <elf32_fsize@plt+0xfb8>
   13dc8:	ldr	r2, [sp, #32]
   13dcc:	ldr	ip, [sp, #124]	; 0x7c
   13dd0:	ldr	r4, [sp, #56]	; 0x38
   13dd4:	mov	r1, r2
   13dd8:	ldr	r2, [sp, #44]	; 0x2c
   13ddc:	str	ip, [sp]
   13de0:	str	r4, [sp, #4]
   13de4:	mov	r3, r0
   13de8:	mov	r0, #1
   13dec:	bl	11580 <__printf_chk@plt>
   13df0:	ldr	r5, [sp, #80]	; 0x50
   13df4:	ldr	r3, [r5, #4]
   13df8:	add	r3, r3, #1
   13dfc:	str	r3, [r5, #4]
   13e00:	b	1385c <elf32_fsize@plt+0x21a4>
   13e04:	ldrd	r2, [r7, #8]
   13e08:	mov	r0, sl
   13e0c:	strd	r2, [sp, #56]	; 0x38
   13e10:	bl	20088 <elf32_fsize@plt+0xe9d0>
   13e14:	ldrd	r2, [sp, #56]	; 0x38
   13e18:	ldrb	ip, [r7, #4]
   13e1c:	and	r2, r2, r0
   13e20:	and	r3, r3, r1
   13e24:	strd	r2, [sp, #56]	; 0x38
   13e28:	b	134f4 <elf32_fsize@plt+0x1e3c>
   13e2c:	mov	r2, #5
   13e30:	movw	r1, #8724	; 0x2214
   13e34:	movt	r1, #2
   13e38:	bl	113b8 <dcgettext@plt>
   13e3c:	ldr	r1, [sp, #44]	; 0x2c
   13e40:	mov	r4, r0
   13e44:	add	r0, sl, #16
   13e48:	bl	12670 <elf32_fsize@plt+0xfb8>
   13e4c:	mov	r1, r4
   13e50:	ldr	r2, [sp, #44]	; 0x2c
   13e54:	str	fp, [sp]
   13e58:	mov	r3, r0
   13e5c:	mov	r0, #1
   13e60:	bl	11580 <__printf_chk@plt>
   13e64:	ldrb	r3, [r7, #4]
   13e68:	ldr	r1, [r8, #4]
   13e6c:	lsr	r2, r3, #4
   13e70:	add	r1, r1, #1
   13e74:	str	r1, [r8, #4]
   13e78:	b	13088 <elf32_fsize@plt+0x19d0>
   13e7c:	mov	r2, #5
   13e80:	movw	r1, #8676	; 0x21e4
   13e84:	movt	r1, #2
   13e88:	bl	113b8 <dcgettext@plt>
   13e8c:	ldr	r1, [sp, #44]	; 0x2c
   13e90:	mov	r4, r0
   13e94:	add	r0, sl, #16
   13e98:	bl	12670 <elf32_fsize@plt+0xfb8>
   13e9c:	ldr	r2, [sp, #44]	; 0x2c
   13ea0:	mov	r1, r4
   13ea4:	str	fp, [sp]
   13ea8:	mov	r3, r0
   13eac:	mov	r0, #1
   13eb0:	bl	11580 <__printf_chk@plt>
   13eb4:	ldr	r2, [r8, #4]
   13eb8:	ldrb	r3, [r7, #4]
   13ebc:	add	r2, r2, #1
   13ec0:	str	r2, [r8, #4]
   13ec4:	b	12e24 <elf32_fsize@plt+0x176c>
   13ec8:	mov	r2, #5
   13ecc:	movw	r1, #9424	; 0x24d0
   13ed0:	mov	r0, #0
   13ed4:	movt	r1, #2
   13ed8:	bl	113b8 <dcgettext@plt>
   13edc:	add	r6, sl, #16
   13ee0:	ldr	r1, [sp, #44]	; 0x2c
   13ee4:	mov	ip, r0
   13ee8:	mov	r0, r6
   13eec:	str	ip, [sp, #36]	; 0x24
   13ef0:	bl	12670 <elf32_fsize@plt+0xfb8>
   13ef4:	ldr	r2, [sp, #124]	; 0x7c
   13ef8:	mov	r1, r2
   13efc:	str	r2, [sp, #32]
   13f00:	mov	r3, r0
   13f04:	mov	r0, r6
   13f08:	str	r3, [sp, #40]	; 0x28
   13f0c:	bl	12670 <elf32_fsize@plt+0xfb8>
   13f10:	ldr	r2, [sp, #32]
   13f14:	ldr	ip, [sp, #36]	; 0x24
   13f18:	ldr	r3, [sp, #40]	; 0x28
   13f1c:	str	r2, [sp, #4]
   13f20:	mov	r1, ip
   13f24:	str	fp, [sp]
   13f28:	ldr	r2, [sp, #44]	; 0x2c
   13f2c:	str	r0, [sp, #8]
   13f30:	mov	r0, #1
   13f34:	bl	11580 <__printf_chk@plt>
   13f38:	ldr	r5, [sp, #76]	; 0x4c
   13f3c:	ldr	r3, [r8, #4]
   13f40:	ldrh	ip, [r5]
   13f44:	add	r3, r3, #1
   13f48:	str	r3, [r8, #4]
   13f4c:	cmp	ip, #1
   13f50:	bne	139a0 <elf32_fsize@plt+0x22e8>
   13f54:	ldrd	r0, [r4, #32]
   13f58:	ldrd	r4, [sp, #56]	; 0x38
   13f5c:	cmp	r5, r1
   13f60:	cmpeq	r4, r0
   13f64:	bhi	141f0 <elf32_fsize@plt+0x2b38>
   13f68:	ldrd	r2, [r7, #16]
   13f6c:	ldrd	r4, [sp, #56]	; 0x38
   13f70:	adds	r2, r2, r4
   13f74:	adc	r3, r3, r5
   13f78:	cmp	r1, r3
   13f7c:	cmpeq	r0, r2
   13f80:	bcs	12e54 <elf32_fsize@plt+0x179c>
   13f84:	movw	r1, #9332	; 0x2474
   13f88:	add	r6, sl, #16
   13f8c:	mov	r0, #0
   13f90:	movt	r1, #2
   13f94:	b	14200 <elf32_fsize@plt+0x2b48>
   13f98:	ldrd	r4, [r7, #16]
   13f9c:	ldrd	r2, [sp, #56]	; 0x38
   13fa0:	adds	r2, r2, r4
   13fa4:	adc	r3, r3, r5
   13fa8:	ldrd	r4, [sp, #24]
   13fac:	cmp	r5, r3
   13fb0:	cmpeq	r4, r2
   13fb4:	bcs	12e54 <elf32_fsize@plt+0x179c>
   13fb8:	mov	r2, #5
   13fbc:	movw	r1, #9332	; 0x2474
   13fc0:	movt	r1, #2
   13fc4:	add	r6, sl, #16
   13fc8:	bl	113b8 <dcgettext@plt>
   13fcc:	ldr	r1, [sp, #44]	; 0x2c
   13fd0:	mov	r2, r0
   13fd4:	mov	r0, r6
   13fd8:	str	r2, [sp, #32]
   13fdc:	bl	12670 <elf32_fsize@plt+0xfb8>
   13fe0:	ldr	r4, [sp, #124]	; 0x7c
   13fe4:	mov	r1, r4
   13fe8:	mov	r3, r0
   13fec:	mov	r0, r6
   13ff0:	str	r3, [sp, #40]	; 0x28
   13ff4:	bl	12670 <elf32_fsize@plt+0xfb8>
   13ff8:	ldr	r2, [sp, #32]
   13ffc:	ldr	r3, [sp, #40]	; 0x28
   14000:	str	r4, [sp, #4]
   14004:	mov	r1, r2
   14008:	str	fp, [sp]
   1400c:	ldr	r2, [sp, #44]	; 0x2c
   14010:	str	r0, [sp, #8]
   14014:	mov	r0, #1
   14018:	bl	11580 <__printf_chk@plt>
   1401c:	ldr	r3, [r8, #4]
   14020:	add	r3, r3, #1
   14024:	str	r3, [r8, #4]
   14028:	b	12e54 <elf32_fsize@plt+0x179c>
   1402c:	mov	r2, #5
   14030:	movw	r1, #8280	; 0x2058
   14034:	mov	r0, #0
   14038:	movt	r1, #2
   1403c:	bl	113b8 <dcgettext@plt>
   14040:	ldr	r1, [sp, #96]	; 0x60
   14044:	mov	r4, r0
   14048:	add	r0, sl, #16
   1404c:	bl	12670 <elf32_fsize@plt+0xfb8>
   14050:	mov	r1, r4
   14054:	ldr	r2, [sp, #96]	; 0x60
   14058:	mov	r3, r0
   1405c:	mov	r0, #1
   14060:	bl	11580 <__printf_chk@plt>
   14064:	ldr	r3, [r8, #4]
   14068:	add	r3, r3, #1
   1406c:	str	r3, [r8, #4]
   14070:	b	12cb4 <elf32_fsize@plt+0x15fc>
   14074:	mov	r5, r6
   14078:	str	r6, [sp, #56]	; 0x38
   1407c:	str	r7, [sp, #108]	; 0x6c
   14080:	str	r6, [sp, #116]	; 0x74
   14084:	mov	r1, r5
   14088:	ldr	r0, [sl, #16]
   1408c:	bl	115d4 <elf_nextscn@plt>
   14090:	subs	r5, r0, #0
   14094:	beq	1418c <elf32_fsize@plt+0x2ad4>
   14098:	mov	r1, r4
   1409c:	bl	1134c <gelf_getshdr@plt>
   140a0:	subs	r6, r0, #0
   140a4:	beq	143d8 <elf32_fsize@plt+0x2d20>
   140a8:	ldr	r0, [sl, #16]
   140ac:	ldr	r1, [r8, #12]
   140b0:	ldr	r2, [r6]
   140b4:	bl	11430 <elf_strptr@plt>
   140b8:	subs	r7, r0, #0
   140bc:	beq	14084 <elf32_fsize@plt+0x29cc>
   140c0:	movw	r1, #10152	; 0x27a8
   140c4:	movt	r1, #2
   140c8:	bl	11358 <strcmp@plt>
   140cc:	cmp	r0, #0
   140d0:	beq	141d8 <elf32_fsize@plt+0x2b20>
   140d4:	mov	r0, r7
   140d8:	movw	r1, #10164	; 0x27b4
   140dc:	movt	r1, #2
   140e0:	bl	11358 <strcmp@plt>
   140e4:	ldr	ip, [sp, #56]	; 0x38
   140e8:	cmp	r0, #0
   140ec:	moveq	ip, r5
   140f0:	str	ip, [sp, #56]	; 0x38
   140f4:	b	14084 <elf32_fsize@plt+0x29cc>
   140f8:	mov	r2, #5
   140fc:	movw	r1, #7976	; 0x1f28
   14100:	mov	r0, #0
   14104:	movt	r1, #2
   14108:	bl	113b8 <dcgettext@plt>
   1410c:	mov	r1, r9
   14110:	mov	r5, r0
   14114:	mov	r0, r6
   14118:	bl	12670 <elf32_fsize@plt+0xfb8>
   1411c:	mov	r1, r5
   14120:	mov	r2, r9
   14124:	mov	r3, r0
   14128:	mov	r0, #1
   1412c:	bl	11580 <__printf_chk@plt>
   14130:	ldr	r3, [r8, #4]
   14134:	add	r3, r3, #1
   14138:	str	r3, [r8, #4]
   1413c:	b	12b88 <elf32_fsize@plt+0x14d0>
   14140:	mov	r2, #5
   14144:	movw	r1, #7828	; 0x1e94
   14148:	movt	r1, #2
   1414c:	bl	113b8 <dcgettext@plt>
   14150:	mov	r1, r9
   14154:	mov	r4, r0
   14158:	add	r0, sl, #16
   1415c:	bl	12670 <elf32_fsize@plt+0xfb8>
   14160:	mov	r2, r9
   14164:	mov	r1, r4
   14168:	mov	r3, r0
   1416c:	mov	r0, #1
   14170:	bl	11580 <__printf_chk@plt>
   14174:	movw	r3, #37252	; 0x9184
   14178:	movt	r3, #3
   1417c:	ldr	r2, [r3, #4]
   14180:	add	r2, r2, #1
   14184:	str	r2, [r3, #4]
   14188:	b	12f48 <elf32_fsize@plt+0x1890>
   1418c:	ldr	r3, [sp, #56]	; 0x38
   14190:	ldr	r7, [sp, #108]	; 0x6c
   14194:	cmp	r3, #0
   14198:	ldr	r6, [sp, #116]	; 0x74
   1419c:	bne	142c8 <elf32_fsize@plt+0x2c10>
   141a0:	ldr	r3, [sp, #124]	; 0x7c
   141a4:	cmp	r3, #0
   141a8:	beq	132c8 <elf32_fsize@plt+0x1c10>
   141ac:	b	132d8 <elf32_fsize@plt+0x1c20>
   141b0:	ldr	r3, [r8, #16]
   141b4:	str	r5, [sp, #112]	; 0x70
   141b8:	cmp	r3, r6
   141bc:	bne	13a04 <elf32_fsize@plt+0x234c>
   141c0:	ldr	r5, [sp, #100]	; 0x64
   141c4:	cmp	r5, #0
   141c8:	beq	142fc <elf32_fsize@plt+0x2c44>
   141cc:	add	r5, r5, #1
   141d0:	str	r5, [sp, #100]	; 0x64
   141d4:	b	12e54 <elf32_fsize@plt+0x179c>
   141d8:	ldr	r7, [sp, #108]	; 0x6c
   141dc:	b	132bc <elf32_fsize@plt+0x1c04>
   141e0:	mov	r5, #0
   141e4:	str	r5, [sp, #96]	; 0x60
   141e8:	str	r5, [sp, #52]	; 0x34
   141ec:	b	12bb8 <elf32_fsize@plt+0x1500>
   141f0:	movw	r1, #9520	; 0x2530
   141f4:	add	r6, sl, #16
   141f8:	movt	r1, #2
   141fc:	mov	r0, #0
   14200:	mov	r2, #5
   14204:	str	ip, [sp, #36]	; 0x24
   14208:	bl	113b8 <dcgettext@plt>
   1420c:	ldr	r1, [sp, #44]	; 0x2c
   14210:	mov	r2, r0
   14214:	mov	r0, r6
   14218:	str	r2, [sp, #32]
   1421c:	bl	12670 <elf32_fsize@plt+0xfb8>
   14220:	ldr	r4, [sp, #124]	; 0x7c
   14224:	mov	r1, r4
   14228:	mov	r3, r0
   1422c:	mov	r0, r6
   14230:	str	r3, [sp, #40]	; 0x28
   14234:	bl	12670 <elf32_fsize@plt+0xfb8>
   14238:	ldr	r2, [sp, #32]
   1423c:	ldr	ip, [sp, #36]	; 0x24
   14240:	ldr	r3, [sp, #40]	; 0x28
   14244:	mov	r1, r2
   14248:	str	r4, [sp, #4]
   1424c:	str	fp, [sp]
   14250:	ldr	r2, [sp, #44]	; 0x2c
   14254:	str	r0, [sp, #8]
   14258:	mov	r0, ip
   1425c:	bl	11580 <__printf_chk@plt>
   14260:	ldr	r3, [r8, #4]
   14264:	add	r3, r3, #1
   14268:	str	r3, [r8, #4]
   1426c:	b	12e54 <elf32_fsize@plt+0x179c>
   14270:	mov	r2, #5
   14274:	movw	r1, #8120	; 0x1fb8
   14278:	movt	r1, #2
   1427c:	bl	113b8 <dcgettext@plt>
   14280:	mov	r1, r9
   14284:	mov	r6, r0
   14288:	add	r0, sl, #16
   1428c:	bl	12670 <elf32_fsize@plt+0xfb8>
   14290:	mov	r5, r0
   14294:	mvn	r0, #0
   14298:	bl	11520 <elf_errmsg@plt>
   1429c:	mov	r3, r5
   142a0:	mov	r1, r6
   142a4:	str	r4, [sp]
   142a8:	mov	r2, r9
   142ac:	str	r0, [sp, #4]
   142b0:	mov	r0, #1
   142b4:	bl	11580 <__printf_chk@plt>
   142b8:	ldr	r3, [r8, #4]
   142bc:	add	r3, r3, #1
   142c0:	str	r3, [r8, #4]
   142c4:	b	12cb4 <elf32_fsize@plt+0x15fc>
   142c8:	mov	r0, r3
   142cc:	mov	r1, r4
   142d0:	bl	1134c <gelf_getshdr@plt>
   142d4:	cmp	r0, #0
   142d8:	beq	141a0 <elf32_fsize@plt+0x2ae8>
   142dc:	mov	r6, r0
   142e0:	b	132bc <elf32_fsize@plt+0x1c04>
   142e4:	movw	r1, #9776	; 0x2630
   142e8:	add	r6, sl, #16
   142ec:	mov	r0, ip
   142f0:	mov	r2, #5
   142f4:	movt	r1, #2
   142f8:	b	13a8c <elf32_fsize@plt+0x23d4>
   142fc:	mov	r2, #5
   14300:	ldr	r0, [sp, #100]	; 0x64
   14304:	movw	r1, #9612	; 0x258c
   14308:	movt	r1, #2
   1430c:	bl	113b8 <dcgettext@plt>
   14310:	ldr	r1, [sp, #44]	; 0x2c
   14314:	mov	r4, r0
   14318:	add	r0, sl, #16
   1431c:	bl	12670 <elf32_fsize@plt+0xfb8>
   14320:	mov	r1, r4
   14324:	str	fp, [sp]
   14328:	ldr	r2, [sp, #44]	; 0x2c
   1432c:	mov	r3, r0
   14330:	mov	r0, #1
   14334:	str	r0, [sp, #100]	; 0x64
   14338:	bl	11580 <__printf_chk@plt>
   1433c:	ldr	r3, [r8, #4]
   14340:	add	r3, r3, #1
   14344:	str	r3, [r8, #4]
   14348:	b	12e54 <elf32_fsize@plt+0x179c>
   1434c:	movw	r1, #9520	; 0x2530
   14350:	add	r6, sl, #16
   14354:	mov	r0, ip
   14358:	mov	r2, #5
   1435c:	movt	r1, #2
   14360:	b	13a8c <elf32_fsize@plt+0x23d4>
   14364:	ldr	r1, [sp, #44]	; 0x2c
   14368:	mov	r0, r6
   1436c:	bl	12670 <elf32_fsize@plt+0xfb8>
   14370:	movw	r1, #9128	; 0x23a8
   14374:	movt	r1, #2
   14378:	bl	11358 <strcmp@plt>
   1437c:	cmp	r0, #0
   14380:	bne	136d4 <elf32_fsize@plt+0x201c>
   14384:	b	13578 <elf32_fsize@plt+0x1ec0>
   14388:	mov	r2, #5
   1438c:	movw	r1, #9688	; 0x25d8
   14390:	movt	r1, #2
   14394:	str	ip, [sp, #36]	; 0x24
   14398:	bl	113b8 <dcgettext@plt>
   1439c:	ldr	r1, [sp, #44]	; 0x2c
   143a0:	mov	r4, r0
   143a4:	add	r0, sl, #16
   143a8:	bl	12670 <elf32_fsize@plt+0xfb8>
   143ac:	mov	r1, r4
   143b0:	str	fp, [sp]
   143b4:	ldr	r2, [sp, #44]	; 0x2c
   143b8:	mov	r3, r0
   143bc:	mov	r0, #1
   143c0:	bl	11580 <__printf_chk@plt>
   143c4:	ldr	ip, [sp, #36]	; 0x24
   143c8:	ldr	r3, [ip, #4]
   143cc:	add	r3, r3, #1
   143d0:	str	r3, [ip, #4]
   143d4:	b	12e54 <elf32_fsize@plt+0x179c>
   143d8:	movw	r0, #10116	; 0x2784
   143dc:	movw	r1, #10140	; 0x279c
   143e0:	movt	r0, #2
   143e4:	movt	r1, #2
   143e8:	movw	r2, #957	; 0x3bd
   143ec:	ldr	r3, [pc, #16]	; 14404 <elf32_fsize@plt+0x2d4c>
   143f0:	bl	116ac <__assert_fail@plt>
   143f4:	mov	ip, #0
   143f8:	str	ip, [sp, #56]	; 0x38
   143fc:	b	1385c <elf32_fsize@plt+0x21a4>
   14400:	bl	113dc <__stack_chk_fail@plt>
   14404:	andeq	r0, r2, r0, ror #30
   14408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1440c:	movw	r8, #37252	; 0x9184
   14410:	sub	sp, sp, #172	; 0xac
   14414:	movt	r8, #3
   14418:	movw	r7, #37240	; 0x9178
   1441c:	movt	r7, #3
   14420:	str	r2, [sp, #52]	; 0x34
   14424:	mov	fp, r0
   14428:	ldrb	r2, [r8, #23]
   1442c:	str	r3, [sp, #40]	; 0x28
   14430:	ldr	r3, [sp, #216]	; 0xd8
   14434:	ldr	r5, [sp, #232]	; 0xe8
   14438:	ldr	ip, [r7]
   1443c:	str	r2, [sp, #64]	; 0x40
   14440:	str	r3, [sp, #56]	; 0x38
   14444:	ldr	lr, [sp, #240]	; 0xf0
   14448:	ldrb	r2, [sp, #244]	; 0xf4
   1444c:	ldr	r3, [sp, #252]	; 0xfc
   14450:	str	r1, [sp, #44]	; 0x2c
   14454:	mov	r1, r5
   14458:	str	ip, [sp, #164]	; 0xa4
   1445c:	ldr	r9, [sp, #212]	; 0xd4
   14460:	ldr	r6, [sp, #236]	; 0xec
   14464:	str	lr, [sp, #68]	; 0x44
   14468:	str	r2, [sp, #60]	; 0x3c
   1446c:	ldr	sl, [sp, #248]	; 0xf8
   14470:	str	r3, [sp, #48]	; 0x30
   14474:	bl	1fdb0 <elf32_fsize@plt+0xe6f8>
   14478:	cmp	r0, #0
   1447c:	beq	145a4 <elf32_fsize@plt+0x2eec>
   14480:	ldr	r0, [sp, #44]	; 0x2c
   14484:	ldrh	r3, [r0]
   14488:	sub	r3, r3, #2
   1448c:	cmp	r3, #1
   14490:	bls	14530 <elf32_fsize@plt+0x2e78>
   14494:	mov	r0, fp
   14498:	mov	r1, r5
   1449c:	bl	1fdcc <elf32_fsize@plt+0xe714>
   144a0:	cmp	r0, #0
   144a4:	beq	147d8 <elf32_fsize@plt+0x3120>
   144a8:	cmp	r9, #0
   144ac:	beq	14504 <elf32_fsize@plt+0x2e4c>
   144b0:	mov	r2, #1
   144b4:	mov	r1, #11
   144b8:	mov	r3, r2
   144bc:	ldr	r0, [fp, #16]
   144c0:	bl	11490 <gelf_fsize@plt>
   144c4:	mov	r3, #0
   144c8:	str	r6, [sp, #8]
   144cc:	str	r3, [sp, #12]
   144d0:	ldrd	r2, [sp, #8]
   144d4:	adds	r2, r2, #1
   144d8:	adc	r3, r3, #0
   144dc:	mov	ip, r0
   144e0:	umull	r0, r1, r0, r2
   144e4:	mla	ip, ip, r3, r1
   144e8:	strd	r0, [sp, #16]
   144ec:	ldrd	r0, [r9, #32]
   144f0:	str	ip, [sp, #20]
   144f4:	ldrd	r2, [sp, #16]
   144f8:	cmp	r3, r1
   144fc:	cmpeq	r2, r0
   14500:	bhi	14554 <elf32_fsize@plt+0x2e9c>
   14504:	mov	r0, fp
   14508:	mov	r1, r5
   1450c:	bl	1ff34 <elf32_fsize@plt+0xe87c>
   14510:	subs	r4, r0, #0
   14514:	beq	145f0 <elf32_fsize@plt+0x2f38>
   14518:	ldr	r2, [sp, #164]	; 0xa4
   1451c:	ldr	r3, [r7]
   14520:	cmp	r2, r3
   14524:	bne	14a60 <elf32_fsize@plt+0x33a8>
   14528:	add	sp, sp, #172	; 0xac
   1452c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14530:	ldr	r1, [sp, #52]	; 0x34
   14534:	mov	r0, #2
   14538:	ldrd	r2, [r1]
   1453c:	mov	r1, #0
   14540:	and	r2, r2, r0
   14544:	and	r3, r3, r1
   14548:	orrs	lr, r2, r3
   1454c:	beq	144a8 <elf32_fsize@plt+0x2df0>
   14550:	b	14494 <elf32_fsize@plt+0x2ddc>
   14554:	mov	r2, #5
   14558:	mov	r0, #0
   1455c:	movw	r1, #11096	; 0x2b58
   14560:	movt	r1, #2
   14564:	bl	113b8 <dcgettext@plt>
   14568:	ldr	r1, [sp, #40]	; 0x28
   1456c:	mov	r4, r0
   14570:	add	r0, fp, #16
   14574:	bl	12670 <elf32_fsize@plt+0xfb8>
   14578:	ldr	r2, [sp, #208]	; 0xd0
   1457c:	mov	r1, r4
   14580:	str	r2, [sp]
   14584:	ldr	r2, [sp, #40]	; 0x28
   14588:	mov	r3, r0
   1458c:	mov	r0, #1
   14590:	bl	11580 <__printf_chk@plt>
   14594:	ldr	r3, [r8, #4]
   14598:	add	r3, r3, #1
   1459c:	str	r3, [r8, #4]
   145a0:	b	14504 <elf32_fsize@plt+0x2e4c>
   145a4:	mov	r2, #5
   145a8:	movw	r1, #10964	; 0x2ad4
   145ac:	movt	r1, #2
   145b0:	bl	113b8 <dcgettext@plt>
   145b4:	ldr	r1, [sp, #40]	; 0x28
   145b8:	mov	r4, r0
   145bc:	add	r0, fp, #16
   145c0:	bl	12670 <elf32_fsize@plt+0xfb8>
   145c4:	ldr	lr, [sp, #208]	; 0xd0
   145c8:	mov	r1, r4
   145cc:	str	lr, [sp]
   145d0:	mov	r3, r0
   145d4:	mov	r0, #1
   145d8:	ldr	r2, [sp, #40]	; 0x28
   145dc:	bl	11580 <__printf_chk@plt>
   145e0:	ldr	r3, [r8, #4]
   145e4:	add	r3, r3, #1
   145e8:	str	r3, [r8, #4]
   145ec:	b	144a8 <elf32_fsize@plt+0x2df0>
   145f0:	mov	r0, fp
   145f4:	mov	r1, r5
   145f8:	bl	1fecc <elf32_fsize@plt+0xe814>
   145fc:	cmp	r0, #0
   14600:	bne	14964 <elf32_fsize@plt+0x32ac>
   14604:	mov	ip, r6
   14608:	add	r3, sp, #72	; 0x48
   1460c:	str	r3, [sp, #32]
   14610:	ldr	r3, [sp, #60]	; 0x3c
   14614:	cmp	r3, #0
   14618:	bne	146d0 <elf32_fsize@plt+0x3018>
   1461c:	ldr	lr, [sp, #64]	; 0x40
   14620:	cmp	lr, #0
   14624:	bne	146d0 <elf32_fsize@plt+0x3018>
   14628:	ldr	r0, [sp, #68]	; 0x44
   1462c:	cmp	r0, #0
   14630:	beq	146d0 <elf32_fsize@plt+0x3018>
   14634:	cmp	r5, #0
   14638:	beq	146d0 <elf32_fsize@plt+0x3018>
   1463c:	ldr	r1, [sp, #44]	; 0x2c
   14640:	ldrh	r3, [r1]
   14644:	cmp	r3, #1
   14648:	ldr	r3, [sp, #68]	; 0x44
   1464c:	ldrdne	r0, [r0, #16]
   14650:	moveq	r0, #0
   14654:	ldrd	r2, [r3, #32]
   14658:	moveq	r1, #0
   1465c:	strd	r2, [sp, #16]
   14660:	ldrd	r2, [sp, #224]	; 0xe0
   14664:	subs	r0, r2, r0
   14668:	sbc	r1, r3, r1
   1466c:	ldrd	r2, [sp, #16]
   14670:	cmp	r1, r3
   14674:	cmpeq	r0, r2
   14678:	bcc	146d0 <elf32_fsize@plt+0x3018>
   1467c:	mov	r2, #5
   14680:	movw	r1, #11252	; 0x2bf4
   14684:	mov	r0, #0
   14688:	movt	r1, #2
   1468c:	str	ip, [sp, #24]
   14690:	bl	113b8 <dcgettext@plt>
   14694:	ldr	r1, [sp, #40]	; 0x28
   14698:	mov	r4, r0
   1469c:	add	r0, fp, #16
   146a0:	bl	12670 <elf32_fsize@plt+0xfb8>
   146a4:	ldr	lr, [sp, #208]	; 0xd0
   146a8:	mov	r1, r4
   146ac:	ldr	r2, [sp, #40]	; 0x28
   146b0:	str	lr, [sp]
   146b4:	mov	r3, r0
   146b8:	mov	r0, #1
   146bc:	bl	11580 <__printf_chk@plt>
   146c0:	ldr	ip, [sp, #24]
   146c4:	ldr	r3, [r8, #4]
   146c8:	add	r3, r3, #1
   146cc:	str	r3, [r8, #4]
   146d0:	mov	r1, ip
   146d4:	ldr	r2, [sp, #32]
   146d8:	ldr	r0, [sp, #56]	; 0x38
   146dc:	bl	11418 <gelf_getsym@plt>
   146e0:	mov	r1, r5
   146e4:	mov	r6, r0
   146e8:	mov	r0, fp
   146ec:	bl	1fee8 <elf32_fsize@plt+0xe830>
   146f0:	cmp	r0, #0
   146f4:	bne	1480c <elf32_fsize@plt+0x3154>
   146f8:	ldr	r0, [sp, #44]	; 0x2c
   146fc:	ldrh	r3, [r0]
   14700:	sub	r3, r3, #2
   14704:	cmp	r3, #1
   14708:	bls	14a30 <elf32_fsize@plt+0x3378>
   1470c:	cmp	sl, #0
   14710:	beq	14a64 <elf32_fsize@plt+0x33ac>
   14714:	movw	r4, #37252	; 0x9184
   14718:	movt	r4, #3
   1471c:	add	r5, fp, #16
   14720:	str	r5, [sp, #44]	; 0x2c
   14724:	mov	r9, r4
   14728:	ldrd	r4, [sp, #224]	; 0xe0
   1472c:	mov	ip, #1
   14730:	mov	r1, #0
   14734:	str	r1, [sp, #32]
   14738:	ldrd	r2, [sl, #8]
   1473c:	cmp	r5, r3
   14740:	cmpeq	r4, r2
   14744:	bcs	1479c <elf32_fsize@plt+0x30e4>
   14748:	cmp	r6, #0
   1474c:	ldrd	r0, [sl]
   14750:	ldrdne	r2, [r6, #16]
   14754:	moveq	r3, #0
   14758:	moveq	r2, #0
   1475c:	adds	r2, r2, r4
   14760:	adc	r3, r3, r5
   14764:	cmp	r3, r1
   14768:	cmpeq	r2, r0
   1476c:	bcc	1479c <elf32_fsize@plt+0x30e4>
   14770:	ldrb	r3, [sl, #16]
   14774:	cmp	r3, #0
   14778:	moveq	r1, #1
   1477c:	streq	r1, [sp, #32]
   14780:	beq	1479c <elf32_fsize@plt+0x30e4>
   14784:	ldrb	r0, [r8, #24]
   14788:	cmp	r0, #0
   1478c:	beq	14900 <elf32_fsize@plt+0x3248>
   14790:	mov	r1, #1
   14794:	strb	ip, [r9, #25]
   14798:	str	r1, [sp, #32]
   1479c:	ldr	sl, [sl, #20]
   147a0:	cmp	sl, #0
   147a4:	bne	14738 <elf32_fsize@plt+0x3080>
   147a8:	ldr	r2, [sp, #48]	; 0x30
   147ac:	ldr	r1, [sp, #32]
   147b0:	ldr	r3, [r2]
   147b4:	cmp	r3, #0
   147b8:	bne	14894 <elf32_fsize@plt+0x31dc>
   147bc:	cmp	r1, #0
   147c0:	movne	r3, #1
   147c4:	bne	147cc <elf32_fsize@plt+0x3114>
   147c8:	mov	r3, #2
   147cc:	ldr	r0, [sp, #48]	; 0x30
   147d0:	str	r3, [r0]
   147d4:	b	14518 <elf32_fsize@plt+0x2e60>
   147d8:	mov	r2, #5
   147dc:	movw	r1, #11016	; 0x2b08
   147e0:	movt	r1, #2
   147e4:	bl	113b8 <dcgettext@plt>
   147e8:	ldr	r1, [sp, #40]	; 0x28
   147ec:	mov	r4, r0
   147f0:	add	r0, fp, #16
   147f4:	bl	12670 <elf32_fsize@plt+0xfb8>
   147f8:	mov	r1, r4
   147fc:	mov	r3, r0
   14800:	ldr	r0, [sp, #208]	; 0xd0
   14804:	str	r0, [sp]
   14808:	b	145d4 <elf32_fsize@plt+0x2f1c>
   1480c:	cmp	r6, #0
   14810:	beq	146f8 <elf32_fsize@plt+0x3040>
   14814:	ldrb	r3, [r6, #4]
   14818:	and	r3, r3, #15
   1481c:	cmp	r3, #1
   14820:	bls	146f8 <elf32_fsize@plt+0x3040>
   14824:	mov	r2, #5
   14828:	movw	r1, #11312	; 0x2c30
   1482c:	mov	r0, #0
   14830:	movt	r1, #2
   14834:	bl	113b8 <dcgettext@plt>
   14838:	ldr	r1, [sp, #40]	; 0x28
   1483c:	mov	r5, r0
   14840:	add	r0, fp, #16
   14844:	bl	12670 <elf32_fsize@plt+0xfb8>
   14848:	ldrb	r1, [r6, #4]
   1484c:	add	r2, sp, #100	; 0x64
   14850:	mov	r3, #64	; 0x40
   14854:	and	r1, r1, #15
   14858:	mov	r4, r0
   1485c:	mov	r0, fp
   14860:	bl	1f79c <elf32_fsize@plt+0xe0e4>
   14864:	ldr	r2, [sp, #208]	; 0xd0
   14868:	mov	r3, r4
   1486c:	mov	r1, r5
   14870:	str	r2, [sp]
   14874:	ldr	r2, [sp, #40]	; 0x28
   14878:	str	r0, [sp, #4]
   1487c:	mov	r0, #1
   14880:	bl	11580 <__printf_chk@plt>
   14884:	ldr	r3, [r8, #4]
   14888:	add	r3, r3, #1
   1488c:	str	r3, [r8, #4]
   14890:	b	146f8 <elf32_fsize@plt+0x3040>
   14894:	cmp	r3, #2
   14898:	beq	14a54 <elf32_fsize@plt+0x339c>
   1489c:	cmp	r3, #1
   148a0:	bne	14518 <elf32_fsize@plt+0x2e60>
   148a4:	cmp	r1, #0
   148a8:	bne	14518 <elf32_fsize@plt+0x2e60>
   148ac:	mov	r2, #5
   148b0:	movw	r1, #11492	; 0x2ce4
   148b4:	mov	r0, #0
   148b8:	movt	r1, #2
   148bc:	bl	113b8 <dcgettext@plt>
   148c0:	ldr	r1, [sp, #40]	; 0x28
   148c4:	mov	r4, r0
   148c8:	add	r0, fp, #16
   148cc:	bl	12670 <elf32_fsize@plt+0xfb8>
   148d0:	mov	r1, r4
   148d4:	ldr	r2, [sp, #40]	; 0x28
   148d8:	mov	r3, r0
   148dc:	mov	r0, #1
   148e0:	bl	11580 <__printf_chk@plt>
   148e4:	ldr	r1, [sp, #48]	; 0x30
   148e8:	ldr	r3, [r8, #4]
   148ec:	mov	r2, #3
   148f0:	add	r3, r3, #1
   148f4:	str	r2, [r1]
   148f8:	str	r3, [r8, #4]
   148fc:	b	14518 <elf32_fsize@plt+0x2e60>
   14900:	mov	r2, #5
   14904:	movw	r1, #11392	; 0x2c80
   14908:	movt	r1, #2
   1490c:	str	ip, [sp, #24]
   14910:	bl	113b8 <dcgettext@plt>
   14914:	ldr	r1, [sp, #40]	; 0x28
   14918:	mov	r2, r0
   1491c:	ldr	r0, [sp, #44]	; 0x2c
   14920:	str	r2, [sp, #28]
   14924:	bl	12670 <elf32_fsize@plt+0xfb8>
   14928:	ldr	r2, [sp, #28]
   1492c:	mov	r1, r2
   14930:	ldr	r2, [sp, #208]	; 0xd0
   14934:	str	r2, [sp]
   14938:	ldr	r2, [sp, #40]	; 0x28
   1493c:	mov	r3, r0
   14940:	mov	r0, #1
   14944:	bl	11580 <__printf_chk@plt>
   14948:	ldr	r3, [r9, #4]
   1494c:	mov	r0, #1
   14950:	ldr	ip, [sp, #24]
   14954:	add	r3, r3, r0
   14958:	str	r0, [sp, #32]
   1495c:	str	r3, [r9, #4]
   14960:	b	1479c <elf32_fsize@plt+0x30e4>
   14964:	add	lr, sp, #72	; 0x48
   14968:	ldr	r0, [sp, #56]	; 0x38
   1496c:	mov	r1, r6
   14970:	str	lr, [sp, #32]
   14974:	mov	r2, lr
   14978:	str	r6, [sp, #24]
   1497c:	bl	11418 <gelf_getsym@plt>
   14980:	ldr	ip, [sp, #24]
   14984:	cmp	r0, #0
   14988:	beq	14610 <elf32_fsize@plt+0x2f58>
   1498c:	ldr	r2, [r0]
   14990:	ldr	r1, [r9, #40]	; 0x28
   14994:	ldr	r0, [fp, #16]
   14998:	bl	11430 <elf_strptr@plt>
   1499c:	ldr	ip, [sp, #24]
   149a0:	cmp	r0, #0
   149a4:	beq	14610 <elf32_fsize@plt+0x2f58>
   149a8:	movw	r1, #10092	; 0x276c
   149ac:	movt	r1, #2
   149b0:	bl	11358 <strcmp@plt>
   149b4:	ldr	ip, [sp, #24]
   149b8:	cmp	r0, #0
   149bc:	beq	14610 <elf32_fsize@plt+0x2f58>
   149c0:	mov	r2, #5
   149c4:	mov	r0, r4
   149c8:	movw	r1, #11156	; 0x2b94
   149cc:	movt	r1, #2
   149d0:	bl	113b8 <dcgettext@plt>
   149d4:	ldr	r1, [sp, #40]	; 0x28
   149d8:	mov	r9, r0
   149dc:	add	r0, fp, #16
   149e0:	bl	12670 <elf32_fsize@plt+0xfb8>
   149e4:	mov	r1, r6
   149e8:	add	r2, sp, #100	; 0x64
   149ec:	mov	r3, #64	; 0x40
   149f0:	mov	r4, r0
   149f4:	mov	r0, fp
   149f8:	bl	1f2e8 <elf32_fsize@plt+0xdc30>
   149fc:	ldr	r2, [sp, #208]	; 0xd0
   14a00:	mov	r3, r4
   14a04:	mov	r1, r9
   14a08:	str	r2, [sp]
   14a0c:	ldr	r2, [sp, #40]	; 0x28
   14a10:	str	r0, [sp, #4]
   14a14:	mov	r0, #1
   14a18:	bl	11580 <__printf_chk@plt>
   14a1c:	ldr	r3, [r8, #4]
   14a20:	ldr	ip, [sp, #24]
   14a24:	add	r3, r3, #1
   14a28:	str	r3, [r8, #4]
   14a2c:	b	14610 <elf32_fsize@plt+0x2f58>
   14a30:	ldr	r1, [sp, #52]	; 0x34
   14a34:	mov	r2, #2
   14a38:	mov	r3, #0
   14a3c:	ldrd	r4, [r1]
   14a40:	and	r2, r2, r4
   14a44:	and	r3, r3, r5
   14a48:	orrs	r0, r2, r3
   14a4c:	bne	1470c <elf32_fsize@plt+0x3054>
   14a50:	b	14518 <elf32_fsize@plt+0x2e60>
   14a54:	cmp	r1, #0
   14a58:	bne	148ac <elf32_fsize@plt+0x31f4>
   14a5c:	b	14518 <elf32_fsize@plt+0x2e60>
   14a60:	bl	113dc <__stack_chk_fail@plt>
   14a64:	ldr	r2, [sp, #48]	; 0x30
   14a68:	ldr	r3, [r2]
   14a6c:	cmp	r3, #0
   14a70:	beq	147c8 <elf32_fsize@plt+0x3110>
   14a74:	cmp	r3, #2
   14a78:	beq	14518 <elf32_fsize@plt+0x2e60>
   14a7c:	cmp	r3, #1
   14a80:	bne	14518 <elf32_fsize@plt+0x2e60>
   14a84:	b	148ac <elf32_fsize@plt+0x31f4>
   14a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a8c:	sub	sp, sp, #412	; 0x19c
   14a90:	movw	r9, #37252	; 0x9184
   14a94:	movw	r4, #37240	; 0x9178
   14a98:	movt	r9, #3
   14a9c:	movt	r4, #3
   14aa0:	str	r4, [sp, #56]	; 0x38
   14aa4:	mov	fp, r0
   14aa8:	ldr	r5, [sp, #56]	; 0x38
   14aac:	add	ip, sp, #104	; 0x68
   14ab0:	ldr	r4, [r9, #28]
   14ab4:	mov	sl, r3
   14ab8:	str	r1, [sp, #92]	; 0x5c
   14abc:	add	r0, r4, #1
   14ac0:	ldr	lr, [r5]
   14ac4:	cmp	r0, #2
   14ac8:	str	r0, [r9, #28]
   14acc:	str	r2, [sp, #32]
   14ad0:	mov	r0, #0
   14ad4:	str	lr, [sp, #404]	; 0x194
   14ad8:	str	r0, [sp, #96]	; 0x60
   14adc:	str	r0, [sp, #100]	; 0x64
   14ae0:	str	r0, [sp, #140]	; 0x8c
   14ae4:	strh	r0, [ip], #2
   14ae8:	str	r0, [sp, #144]	; 0x90
   14aec:	str	r0, [sp, #148]	; 0x94
   14af0:	str	r0, [sp, #152]	; 0x98
   14af4:	str	r0, [sp, #156]	; 0x9c
   14af8:	str	r0, [sp, #160]	; 0xa0
   14afc:	str	r0, [sp, #164]	; 0xa4
   14b00:	str	r0, [sp, #168]	; 0xa8
   14b04:	strh	r0, [sp, #172]	; 0xac
   14b08:	strb	r0, [sp, #174]	; 0xae
   14b0c:	str	r0, [sp, #108]	; 0x6c
   14b10:	str	r0, [sp, #112]	; 0x70
   14b14:	str	r0, [sp, #116]	; 0x74
   14b18:	strb	r0, [ip]
   14b1c:	beq	15abc <elf32_fsize@plt+0x4404>
   14b20:	mov	r1, sl
   14b24:	ldr	r0, [fp, #16]
   14b28:	bl	11628 <elf_getscn@plt>
   14b2c:	mov	r1, #0
   14b30:	bl	11484 <elf_getdata@plt>
   14b34:	subs	ip, r0, #0
   14b38:	str	ip, [sp, #36]	; 0x24
   14b3c:	beq	15ae8 <elf32_fsize@plt+0x4430>
   14b40:	ldr	r4, [sp, #32]
   14b44:	ldr	r0, [fp, #16]
   14b48:	ldr	r1, [r4, #40]	; 0x28
   14b4c:	bl	11628 <elf_getscn@plt>
   14b50:	add	r1, sp, #232	; 0xe8
   14b54:	bl	1134c <gelf_getshdr@plt>
   14b58:	subs	r5, r0, #0
   14b5c:	str	r5, [sp, #44]	; 0x2c
   14b60:	beq	15bb4 <elf32_fsize@plt+0x44fc>
   14b64:	ldr	r3, [r5, #4]
   14b68:	cmp	r3, #3
   14b6c:	beq	14bd8 <elf32_fsize@plt+0x3520>
   14b70:	mov	r2, #5
   14b74:	movw	r1, #7876	; 0x1ec4
   14b78:	mov	r0, #0
   14b7c:	movt	r1, #2
   14b80:	bl	113b8 <dcgettext@plt>
   14b84:	ldr	r4, [sp, #32]
   14b88:	add	r5, fp, #16
   14b8c:	ldr	r4, [r4, #40]	; 0x28
   14b90:	mov	r1, r4
   14b94:	mov	r7, r0
   14b98:	mov	r0, r5
   14b9c:	bl	12670 <elf32_fsize@plt+0xfb8>
   14ba0:	mov	r1, sl
   14ba4:	mov	r6, r0
   14ba8:	mov	r0, r5
   14bac:	bl	12670 <elf32_fsize@plt+0xfb8>
   14bb0:	mov	r3, r6
   14bb4:	mov	r1, r7
   14bb8:	mov	r2, r4
   14bbc:	str	sl, [sp]
   14bc0:	str	r0, [sp, #4]
   14bc4:	mov	r0, #1
   14bc8:	bl	11580 <__printf_chk@plt>
   14bcc:	ldr	r3, [r9, #4]
   14bd0:	add	r3, r3, #1
   14bd4:	str	r3, [r9, #4]
   14bd8:	mov	r2, #1
   14bdc:	ldr	r0, [fp, #16]
   14be0:	mov	r3, r2
   14be4:	mov	r1, #2
   14be8:	bl	11490 <gelf_fsize@plt>
   14bec:	ldr	r4, [sp, #32]
   14bf0:	mov	r5, #0
   14bf4:	ldrd	r2, [r4, #56]	; 0x38
   14bf8:	mov	r4, r0
   14bfc:	cmp	r3, r5
   14c00:	cmpeq	r2, r4
   14c04:	strd	r4, [sp, #24]
   14c08:	beq	14c50 <elf32_fsize@plt+0x3598>
   14c0c:	mov	r2, #5
   14c10:	movw	r1, #11704	; 0x2db8
   14c14:	mov	r0, #0
   14c18:	movt	r1, #2
   14c1c:	bl	113b8 <dcgettext@plt>
   14c20:	mov	r1, sl
   14c24:	mov	r4, r0
   14c28:	add	r0, fp, #16
   14c2c:	bl	12670 <elf32_fsize@plt+0xfb8>
   14c30:	mov	r1, r4
   14c34:	mov	r2, sl
   14c38:	mov	r3, r0
   14c3c:	mov	r0, #1
   14c40:	bl	11580 <__printf_chk@plt>
   14c44:	ldr	r3, [r9, #4]
   14c48:	add	r3, r3, #1
   14c4c:	str	r3, [r9, #4]
   14c50:	ldr	r5, [sp, #32]
   14c54:	ldr	r3, [r5, #44]	; 0x2c
   14c58:	cmp	r3, #0
   14c5c:	bne	15a04 <elf32_fsize@plt+0x434c>
   14c60:	ldr	ip, [sp, #32]
   14c64:	ldrd	r2, [sp, #24]
   14c68:	ldrd	r0, [ip, #32]
   14c6c:	bl	2042c <elf32_fsize@plt+0xed74>
   14c70:	orrs	r2, r0, r1
   14c74:	beq	15b80 <elf32_fsize@plt+0x44c8>
   14c78:	mov	r4, #0
   14c7c:	movw	r5, #37252	; 0x9184
   14c80:	mov	r8, r4
   14c84:	movw	ip, #3620	; 0xe24
   14c88:	movt	r5, #3
   14c8c:	movt	ip, #2
   14c90:	str	r4, [sp, #48]	; 0x30
   14c94:	str	r5, [sp, #60]	; 0x3c
   14c98:	str	ip, [sp, #52]	; 0x34
   14c9c:	ldr	r0, [sp, #36]	; 0x24
   14ca0:	mov	r1, r8
   14ca4:	add	r2, sp, #120	; 0x78
   14ca8:	bl	115f8 <gelf_getdyn@plt>
   14cac:	subs	r4, r0, #0
   14cb0:	beq	158b4 <elf32_fsize@plt+0x41fc>
   14cb4:	ldrb	r3, [sp, #140]	; 0x8c
   14cb8:	cmp	r3, #0
   14cbc:	bne	1536c <elf32_fsize@plt+0x3cb4>
   14cc0:	ldm	r4, {r2, r3}
   14cc4:	mov	r0, fp
   14cc8:	bl	1fde8 <elf32_fsize@plt+0xe730>
   14ccc:	cmp	r0, #0
   14cd0:	beq	1539c <elf32_fsize@plt+0x3ce4>
   14cd4:	ldrd	r2, [r4]
   14cd8:	cmp	r3, #0
   14cdc:	cmpeq	r2, #34	; 0x22
   14ce0:	bhi	1523c <elf32_fsize@plt+0x3b84>
   14ce4:	add	r0, sp, #408	; 0x198
   14ce8:	add	r1, r0, r2
   14cec:	ldrb	r1, [r1, #-268]	; 0xfffffef4
   14cf0:	cmp	r1, #0
   14cf4:	beq	14d74 <elf32_fsize@plt+0x36bc>
   14cf8:	cmp	r3, #0
   14cfc:	cmpeq	r2, #1
   14d00:	bls	14d74 <elf32_fsize@plt+0x36bc>
   14d04:	mov	r2, #5
   14d08:	movw	r1, #11984	; 0x2ed0
   14d0c:	mov	r0, #0
   14d10:	movt	r1, #2
   14d14:	bl	113b8 <dcgettext@plt>
   14d18:	mov	r1, sl
   14d1c:	mov	r6, r0
   14d20:	add	r0, fp, #16
   14d24:	bl	12670 <elf32_fsize@plt+0xfb8>
   14d28:	ldrd	r2, [r4]
   14d2c:	add	r1, sp, #352	; 0x160
   14d30:	str	r1, [sp]
   14d34:	mov	r1, #50	; 0x32
   14d38:	str	r1, [sp, #4]
   14d3c:	mov	r5, r0
   14d40:	mov	r0, fp
   14d44:	bl	1f8c0 <elf32_fsize@plt+0xe208>
   14d48:	mov	r1, r6
   14d4c:	mov	r3, r5
   14d50:	mov	r2, sl
   14d54:	str	r8, [sp]
   14d58:	str	r0, [sp, #4]
   14d5c:	mov	r0, #1
   14d60:	bl	11580 <__printf_chk@plt>
   14d64:	ldrd	r2, [r4]
   14d68:	ldr	r1, [r9, #4]
   14d6c:	add	r1, r1, #1
   14d70:	str	r1, [r9, #4]
   14d74:	ldrb	r1, [r9, #20]
   14d78:	cmp	r1, #0
   14d7c:	beq	14d94 <elf32_fsize@plt+0x36dc>
   14d80:	ldr	r5, [sp, #52]	; 0x34
   14d84:	add	r1, r5, r2
   14d88:	ldrb	r1, [r1, #332]	; 0x14c
   14d8c:	cmp	r1, #0
   14d90:	bne	1583c <elf32_fsize@plt+0x4184>
   14d94:	add	r0, sp, #408	; 0x198
   14d98:	cmp	r3, #0
   14d9c:	cmpeq	r2, #20
   14da0:	add	r1, r0, r2
   14da4:	mov	r5, #1
   14da8:	strb	r5, [r1, #-268]	; 0xfffffef4
   14dac:	bne	14e18 <elf32_fsize@plt+0x3760>
   14db0:	ldrd	r2, [r4, #8]
   14db4:	cmp	r3, #0
   14db8:	cmpeq	r2, #17
   14dbc:	beq	14ed8 <elf32_fsize@plt+0x3820>
   14dc0:	cmp	r3, #0
   14dc4:	cmpeq	r2, #7
   14dc8:	beq	14ed8 <elf32_fsize@plt+0x3820>
   14dcc:	mov	r2, #5
   14dd0:	movw	r1, #12100	; 0x2f44
   14dd4:	mov	r0, #0
   14dd8:	movt	r1, #2
   14ddc:	bl	113b8 <dcgettext@plt>
   14de0:	mov	r1, sl
   14de4:	mov	r6, r0
   14de8:	add	r0, fp, #16
   14dec:	bl	12670 <elf32_fsize@plt+0xfb8>
   14df0:	mov	r1, r6
   14df4:	mov	r2, sl
   14df8:	str	r8, [sp]
   14dfc:	mov	r3, r0
   14e00:	mov	r0, r5
   14e04:	bl	11580 <__printf_chk@plt>
   14e08:	ldrd	r2, [r4]
   14e0c:	ldr	r1, [r9, #4]
   14e10:	add	r1, r1, #1
   14e14:	str	r1, [r9, #4]
   14e18:	cmp	r2, #18
   14e1c:	sbcs	r0, r3, #0
   14e20:	bge	15284 <elf32_fsize@plt+0x3bcc>
   14e24:	cmp	r2, #16
   14e28:	sbcs	r1, r3, #0
   14e2c:	bge	1514c <elf32_fsize@plt+0x3a94>
   14e30:	cmp	r2, #8
   14e34:	sbcs	r5, r3, #0
   14e38:	bge	15448 <elf32_fsize@plt+0x3d90>
   14e3c:	cmp	r2, #6
   14e40:	sbcs	ip, r3, #0
   14e44:	bge	1514c <elf32_fsize@plt+0x3a94>
   14e48:	cmp	r2, #5
   14e4c:	sbcs	r0, r3, #0
   14e50:	blt	1542c <elf32_fsize@plt+0x3d74>
   14e54:	ldr	ip, [sp, #44]	; 0x2c
   14e58:	ldrd	r2, [r4, #8]
   14e5c:	ldrd	r0, [ip, #16]
   14e60:	cmp	r1, r3
   14e64:	cmpeq	r0, r2
   14e68:	beq	1514c <elf32_fsize@plt+0x3a94>
   14e6c:	mov	r2, #5
   14e70:	movw	r1, #12176	; 0x2f90
   14e74:	mov	r0, #0
   14e78:	movt	r1, #2
   14e7c:	bl	113b8 <dcgettext@plt>
   14e80:	add	r5, fp, #16
   14e84:	mov	r1, sl
   14e88:	mov	r7, r0
   14e8c:	mov	r0, r5
   14e90:	bl	12670 <elf32_fsize@plt+0xfb8>
   14e94:	ldr	ip, [sp, #32]
   14e98:	ldr	r4, [ip, #40]	; 0x28
   14e9c:	mov	r1, r4
   14ea0:	mov	r6, r0
   14ea4:	mov	r0, r5
   14ea8:	bl	12670 <elf32_fsize@plt+0xfb8>
   14eac:	mov	r3, r6
   14eb0:	str	r4, [sp, #4]
   14eb4:	mov	r1, r7
   14eb8:	str	r8, [sp]
   14ebc:	mov	r2, sl
   14ec0:	str	r0, [sp, #8]
   14ec4:	mov	r0, #1
   14ec8:	bl	11580 <__printf_chk@plt>
   14ecc:	ldr	r3, [r9, #4]
   14ed0:	add	r3, r3, #1
   14ed4:	str	r3, [r9, #4]
   14ed8:	ldr	r4, [sp, #32]
   14edc:	add	r8, r8, #1
   14ee0:	ldrd	r2, [sp, #24]
   14ee4:	ldrd	r0, [r4, #32]
   14ee8:	bl	2042c <elf32_fsize@plt+0xed74>
   14eec:	mov	r2, r8
   14ef0:	mov	r3, #0
   14ef4:	cmp	r3, r1
   14ef8:	cmpeq	r2, r0
   14efc:	bcc	14c9c <elf32_fsize@plt+0x35e4>
   14f00:	ldrb	r5, [sp, #144]	; 0x90
   14f04:	ldrb	ip, [sp, #147]	; 0x93
   14f08:	ldrb	r4, [sp, #148]	; 0x94
   14f0c:	str	r5, [sp, #44]	; 0x2c
   14f10:	str	ip, [sp, #80]	; 0x50
   14f14:	ldrb	r5, [sp, #157]	; 0x9d
   14f18:	ldrb	ip, [sp, #158]	; 0x9e
   14f1c:	str	r4, [sp, #68]	; 0x44
   14f20:	str	r5, [sp, #88]	; 0x58
   14f24:	ldrb	r4, [sp, #118]	; 0x76
   14f28:	ldrb	r5, [sp, #115]	; 0x73
   14f2c:	str	ip, [sp, #76]	; 0x4c
   14f30:	ldrb	ip, [sp, #117]	; 0x75
   14f34:	str	r4, [sp, #72]	; 0x48
   14f38:	str	r5, [sp, #48]	; 0x30
   14f3c:	str	ip, [sp, #84]	; 0x54
   14f40:	ldrb	r4, [sp, #116]	; 0x74
   14f44:	ldrb	r5, [sp, #103]	; 0x67
   14f48:	ldrb	ip, [sp, #102]	; 0x66
   14f4c:	ldrb	r0, [sp, #141]	; 0x8d
   14f50:	str	r4, [sp, #64]	; 0x40
   14f54:	str	r5, [sp, #60]	; 0x3c
   14f58:	str	ip, [sp, #52]	; 0x34
   14f5c:	ldr	r7, [pc, #3236]	; 15c08 <elf32_fsize@plt+0x4550>
   14f60:	mov	r5, #0
   14f64:	mov	r4, #1
   14f68:	add	ip, fp, #16
   14f6c:	strd	r4, [sp, #24]
   14f70:	mov	r5, #1
   14f74:	str	ip, [sp, #40]	; 0x28
   14f78:	str	r5, [sp, #36]	; 0x24
   14f7c:	cmp	r0, #0
   14f80:	beq	15060 <elf32_fsize@plt+0x39a8>
   14f84:	mov	r4, #0
   14f88:	mov	r5, #0
   14f8c:	mov	r6, #0
   14f90:	mov	r8, #50	; 0x32
   14f94:	b	14fac <elf32_fsize@plt+0x38f4>
   14f98:	adds	r4, r4, #1
   14f9c:	add	r6, r6, #1
   14fa0:	adc	r5, r5, #0
   14fa4:	cmp	r6, #35	; 0x23
   14fa8:	beq	150d8 <elf32_fsize@plt+0x3a20>
   14fac:	ldrb	r3, [r7, r6]
   14fb0:	cmp	r3, #0
   14fb4:	beq	14f98 <elf32_fsize@plt+0x38e0>
   14fb8:	add	r3, sp, #140	; 0x8c
   14fbc:	ldrb	r0, [r6, r3]
   14fc0:	cmp	r0, #0
   14fc4:	bne	14f98 <elf32_fsize@plt+0x38e0>
   14fc8:	mov	r2, #5
   14fcc:	movw	r1, #12440	; 0x3098
   14fd0:	movt	r1, #2
   14fd4:	bl	113b8 <dcgettext@plt>
   14fd8:	mov	r1, sl
   14fdc:	mov	ip, r0
   14fe0:	ldr	r0, [sp, #40]	; 0x28
   14fe4:	str	ip, [sp, #16]
   14fe8:	bl	12670 <elf32_fsize@plt+0xfb8>
   14fec:	ldrd	r2, [sp, #24]
   14ff0:	str	r8, [sp, #4]
   14ff4:	str	r0, [sp, #32]
   14ff8:	add	r0, sp, #300	; 0x12c
   14ffc:	str	r0, [sp]
   15000:	mov	r0, fp
   15004:	bl	1f8c0 <elf32_fsize@plt+0xe208>
   15008:	add	r3, sp, #352	; 0x160
   1500c:	mov	r2, r4
   15010:	str	r3, [sp]
   15014:	str	r8, [sp, #4]
   15018:	mov	r3, r5
   1501c:	mov	r1, r0
   15020:	mov	r0, fp
   15024:	str	r1, [sp, #20]
   15028:	bl	1f8c0 <elf32_fsize@plt+0xe208>
   1502c:	ldr	r1, [sp, #20]
   15030:	mov	r2, sl
   15034:	ldr	ip, [sp, #16]
   15038:	ldr	r3, [sp, #32]
   1503c:	str	r1, [sp]
   15040:	mov	r1, ip
   15044:	str	r0, [sp, #4]
   15048:	mov	r0, #1
   1504c:	bl	11580 <__printf_chk@plt>
   15050:	ldr	r3, [r9, #4]
   15054:	add	r3, r3, #1
   15058:	str	r3, [r9, #4]
   1505c:	b	14f98 <elf32_fsize@plt+0x38e0>
   15060:	ldr	r4, [sp, #36]	; 0x24
   15064:	ldr	r1, [pc, #2976]	; 15c0c <elf32_fsize@plt+0x4554>
   15068:	ldrb	r3, [r4, r1]
   1506c:	cmp	r3, #0
   15070:	beq	150d8 <elf32_fsize@plt+0x3a20>
   15074:	mov	r2, #5
   15078:	movw	r1, #12492	; 0x30cc
   1507c:	movt	r1, #2
   15080:	bl	113b8 <dcgettext@plt>
   15084:	mov	r1, sl
   15088:	mov	r5, r0
   1508c:	ldr	r0, [sp, #40]	; 0x28
   15090:	bl	12670 <elf32_fsize@plt+0xfb8>
   15094:	add	r2, sp, #352	; 0x160
   15098:	mov	r3, #50	; 0x32
   1509c:	str	r2, [sp]
   150a0:	str	r3, [sp, #4]
   150a4:	ldrd	r2, [sp, #24]
   150a8:	mov	r4, r0
   150ac:	mov	r0, fp
   150b0:	bl	1f8c0 <elf32_fsize@plt+0xe208>
   150b4:	mov	r3, r4
   150b8:	mov	r1, r5
   150bc:	mov	r2, sl
   150c0:	str	r0, [sp]
   150c4:	mov	r0, #1
   150c8:	bl	11580 <__printf_chk@plt>
   150cc:	ldr	r3, [r9, #4]
   150d0:	add	r3, r3, #1
   150d4:	str	r3, [r9, #4]
   150d8:	ldr	r5, [sp, #36]	; 0x24
   150dc:	add	r7, r7, #35	; 0x23
   150e0:	add	r5, r5, #1
   150e4:	str	r5, [sp, #36]	; 0x24
   150e8:	ldrd	r4, [sp, #24]
   150ec:	adds	r4, r4, #1
   150f0:	adc	r5, r5, #0
   150f4:	strd	r4, [sp, #24]
   150f8:	ldr	r5, [sp, #36]	; 0x24
   150fc:	cmp	r5, #35	; 0x23
   15100:	beq	154b0 <elf32_fsize@plt+0x3df8>
   15104:	ldr	r4, [sp, #36]	; 0x24
   15108:	add	r3, sp, #140	; 0x8c
   1510c:	ldrb	r0, [r4, r3]
   15110:	b	14f7c <elf32_fsize@plt+0x38c4>
   15114:	cmp	r2, #25
   15118:	sbcs	r0, r3, #0
   1511c:	bge	1514c <elf32_fsize@plt+0x3a94>
   15120:	cmp	r3, #0
   15124:	cmpeq	r2, #23
   15128:	beq	1514c <elf32_fsize@plt+0x3a94>
   1512c:	mov	r0, #512	; 0x200
   15130:	movt	r0, #36864	; 0x9000
   15134:	adds	r2, r2, r0
   15138:	mvn	r1, #0
   1513c:	adc	r3, r3, r1
   15140:	cmp	r3, #0
   15144:	cmpeq	r2, #255	; 0xff
   15148:	bhi	14ed8 <elf32_fsize@plt+0x3820>
   1514c:	ldr	r3, [r9, #16]
   15150:	cmp	r3, #0
   15154:	beq	151cc <elf32_fsize@plt+0x3b14>
   15158:	mov	r5, #0
   1515c:	b	15170 <elf32_fsize@plt+0x3ab8>
   15160:	ldr	r3, [r9, #16]
   15164:	add	r5, r5, #1
   15168:	cmp	r5, r3
   1516c:	bcs	151cc <elf32_fsize@plt+0x3b14>
   15170:	ldr	r0, [fp, #16]
   15174:	mov	r1, r5
   15178:	add	r2, sp, #176	; 0xb0
   1517c:	bl	113f4 <gelf_getphdr@plt>
   15180:	cmp	r0, #0
   15184:	beq	15160 <elf32_fsize@plt+0x3aa8>
   15188:	ldr	r3, [r0]
   1518c:	cmp	r3, #1
   15190:	bne	15160 <elf32_fsize@plt+0x3aa8>
   15194:	ldrd	r6, [r0, #16]
   15198:	ldrd	r2, [r4, #8]
   1519c:	cmp	r7, r3
   151a0:	cmpeq	r6, r2
   151a4:	bhi	15160 <elf32_fsize@plt+0x3aa8>
   151a8:	ldrd	r0, [r0, #40]	; 0x28
   151ac:	adds	r0, r0, r6
   151b0:	adc	r1, r1, r7
   151b4:	cmp	r3, r1
   151b8:	cmpeq	r2, r0
   151bc:	bcs	15160 <elf32_fsize@plt+0x3aa8>
   151c0:	ldr	r3, [r9, #16]
   151c4:	cmp	r5, r3
   151c8:	bcc	14ed8 <elf32_fsize@plt+0x3820>
   151cc:	mov	r2, #5
   151d0:	movw	r1, #12284	; 0x2ffc
   151d4:	mov	r0, #0
   151d8:	movt	r1, #2
   151dc:	bl	113b8 <dcgettext@plt>
   151e0:	mov	r1, sl
   151e4:	mov	r6, r0
   151e8:	add	r0, fp, #16
   151ec:	bl	12670 <elf32_fsize@plt+0xfb8>
   151f0:	ldrd	r2, [r4]
   151f4:	add	r1, sp, #352	; 0x160
   151f8:	str	r1, [sp]
   151fc:	mov	r1, #50	; 0x32
   15200:	str	r1, [sp, #4]
   15204:	mov	r5, r0
   15208:	mov	r0, fp
   1520c:	bl	1f8c0 <elf32_fsize@plt+0xe208>
   15210:	mov	r1, r6
   15214:	mov	r3, r5
   15218:	str	r0, [sp, #4]
   1521c:	mov	r2, sl
   15220:	str	r8, [sp]
   15224:	mov	r0, #1
   15228:	bl	11580 <__printf_chk@plt>
   1522c:	ldr	r3, [r9, #4]
   15230:	add	r3, r3, #1
   15234:	str	r3, [r9, #4]
   15238:	b	14ed8 <elf32_fsize@plt+0x3820>
   1523c:	movw	r0, #65023	; 0xfdff
   15240:	movt	r0, #28671	; 0x6fff
   15244:	mov	r1, #0
   15248:	cmp	r3, r1
   1524c:	cmpeq	r2, r0
   15250:	bhi	153e4 <elf32_fsize@plt+0x3d2c>
   15254:	subs	r0, r0, r2
   15258:	sbc	r1, r1, r3
   1525c:	cmp	r0, #12
   15260:	sbcs	r5, r1, #0
   15264:	bge	153fc <elf32_fsize@plt+0x3d44>
   15268:	add	ip, sp, #408	; 0x198
   1526c:	mov	r1, #1
   15270:	add	r0, ip, r0
   15274:	strb	r1, [r0, #-300]	; 0xfffffed4
   15278:	cmp	r2, #18
   1527c:	sbcs	r0, r3, #0
   15280:	blt	14e24 <elf32_fsize@plt+0x376c>
   15284:	mvn	r0, #-1879048177	; 0x9000000f
   15288:	mov	r1, #0
   1528c:	cmp	r3, r1
   15290:	cmpeq	r2, r0
   15294:	beq	1514c <elf32_fsize@plt+0x3a94>
   15298:	cmp	r0, r2
   1529c:	sbcs	r5, r1, r3
   152a0:	blt	15464 <elf32_fsize@plt+0x3dac>
   152a4:	cmp	r2, #27
   152a8:	sbcs	ip, r3, #0
   152ac:	blt	15114 <elf32_fsize@plt+0x3a5c>
   152b0:	cmp	r3, #0
   152b4:	cmpeq	r2, #29
   152b8:	bne	1512c <elf32_fsize@plt+0x3a74>
   152bc:	ldr	r5, [sp, #44]	; 0x2c
   152c0:	ldrd	r0, [r4, #8]
   152c4:	ldrd	r2, [r5, #32]
   152c8:	cmp	r1, r3
   152cc:	cmpeq	r0, r2
   152d0:	bcc	14ed8 <elf32_fsize@plt+0x3820>
   152d4:	mov	r2, #5
   152d8:	movw	r1, #12356	; 0x3044
   152dc:	mov	r0, #0
   152e0:	movt	r1, #2
   152e4:	bl	113b8 <dcgettext@plt>
   152e8:	add	r5, fp, #16
   152ec:	mov	r1, sl
   152f0:	mov	r6, r0
   152f4:	mov	r0, r5
   152f8:	bl	12670 <elf32_fsize@plt+0xfb8>
   152fc:	ldrd	r2, [r4]
   15300:	add	r1, sp, #352	; 0x160
   15304:	str	r1, [sp]
   15308:	mov	r1, #50	; 0x32
   1530c:	str	r1, [sp, #4]
   15310:	mov	r7, r0
   15314:	mov	r0, fp
   15318:	bl	1f8c0 <elf32_fsize@plt+0xe208>
   1531c:	ldr	ip, [sp, #32]
   15320:	ldr	r4, [ip, #40]	; 0x28
   15324:	mov	r1, r4
   15328:	mov	r3, r0
   1532c:	mov	r0, r5
   15330:	str	r3, [sp, #20]
   15334:	bl	12670 <elf32_fsize@plt+0xfb8>
   15338:	ldr	r3, [sp, #20]
   1533c:	mov	r1, r6
   15340:	str	r8, [sp]
   15344:	mov	r2, sl
   15348:	stmib	sp, {r3, r4}
   1534c:	mov	r3, r7
   15350:	str	r0, [sp, #12]
   15354:	mov	r0, #1
   15358:	bl	11580 <__printf_chk@plt>
   1535c:	ldr	r3, [r9, #4]
   15360:	add	r3, r3, #1
   15364:	str	r3, [r9, #4]
   15368:	b	14ed8 <elf32_fsize@plt+0x3820>
   1536c:	ldrd	r0, [r4]
   15370:	orrs	r2, r0, r1
   15374:	beq	15384 <elf32_fsize@plt+0x3ccc>
   15378:	ldr	r5, [sp, #48]	; 0x30
   1537c:	cmp	r5, #0
   15380:	beq	158ec <elf32_fsize@plt+0x4234>
   15384:	mov	r2, r0
   15388:	mov	r3, r1
   1538c:	mov	r0, fp
   15390:	bl	1fde8 <elf32_fsize@plt+0xe730>
   15394:	cmp	r0, #0
   15398:	bne	14cd4 <elf32_fsize@plt+0x361c>
   1539c:	mov	r2, #5
   153a0:	movw	r1, #11940	; 0x2ea4
   153a4:	movt	r1, #2
   153a8:	bl	113b8 <dcgettext@plt>
   153ac:	mov	r1, sl
   153b0:	mov	r5, r0
   153b4:	add	r0, fp, #16
   153b8:	bl	12670 <elf32_fsize@plt+0xfb8>
   153bc:	mov	r1, r5
   153c0:	str	r8, [sp]
   153c4:	mov	r2, sl
   153c8:	mov	r3, r0
   153cc:	mov	r0, #1
   153d0:	bl	11580 <__printf_chk@plt>
   153d4:	ldr	r3, [r9, #4]
   153d8:	add	r3, r3, #1
   153dc:	str	r3, [r9, #4]
   153e0:	b	14cd4 <elf32_fsize@plt+0x361c>
   153e4:	movw	r0, #65279	; 0xfeff
   153e8:	movt	r0, #28671	; 0x6fff
   153ec:	mov	r1, #0
   153f0:	cmp	r3, r1
   153f4:	cmpeq	r2, r0
   153f8:	bhi	14e18 <elf32_fsize@plt+0x3760>
   153fc:	movw	r0, #65279	; 0xfeff
   15400:	movt	r0, #28671	; 0x6fff
   15404:	mov	r1, #0
   15408:	subs	r0, r0, r2
   1540c:	sbc	r1, r1, r3
   15410:	cmp	r0, #11
   15414:	sbcs	r5, r1, #0
   15418:	addlt	ip, sp, #408	; 0x198
   1541c:	movlt	r1, #1
   15420:	addlt	r0, ip, r0
   15424:	strblt	r1, [r0, #-312]	; 0xfffffec8
   15428:	b	14e18 <elf32_fsize@plt+0x3760>
   1542c:	cmp	r2, #3
   15430:	sbcs	r1, r3, #0
   15434:	bge	1514c <elf32_fsize@plt+0x3a94>
   15438:	cmp	r3, #0
   1543c:	cmpeq	r2, #1
   15440:	beq	152bc <elf32_fsize@plt+0x3c04>
   15444:	b	1512c <elf32_fsize@plt+0x3a74>
   15448:	cmp	r2, #12
   1544c:	sbcs	r5, r3, #0
   15450:	blt	1512c <elf32_fsize@plt+0x3a74>
   15454:	cmp	r2, #14
   15458:	sbcs	ip, r3, #0
   1545c:	bge	152bc <elf32_fsize@plt+0x3c04>
   15460:	b	1514c <elf32_fsize@plt+0x3a94>
   15464:	mvn	r0, #-1879048191	; 0x90000001
   15468:	mov	r1, #0
   1546c:	cmp	r3, r1
   15470:	cmpeq	r2, r0
   15474:	beq	1514c <elf32_fsize@plt+0x3a94>
   15478:	cmp	r0, r2
   1547c:	sbcs	r5, r1, r3
   15480:	bge	15944 <elf32_fsize@plt+0x428c>
   15484:	mvn	r0, #-2147483646	; 0x80000002
   15488:	mov	r1, #0
   1548c:	cmp	r3, r1
   15490:	cmpeq	r2, r0
   15494:	beq	1514c <elf32_fsize@plt+0x3a94>
   15498:	mvn	r0, #-2147483648	; 0x80000000
   1549c:	mov	r1, #0
   154a0:	cmp	r3, r1
   154a4:	cmpeq	r2, r0
   154a8:	beq	1514c <elf32_fsize@plt+0x3a94>
   154ac:	b	1512c <elf32_fsize@plt+0x3a74>
   154b0:	ldr	ip, [sp, #44]	; 0x2c
   154b4:	cmp	ip, #0
   154b8:	bne	154d4 <elf32_fsize@plt+0x3e1c>
   154bc:	ldrb	r3, [sp, #106]	; 0x6a
   154c0:	cmp	r3, #0
   154c4:	beq	15b2c <elf32_fsize@plt+0x4474>
   154c8:	ldrb	r3, [sp, #146]	; 0x92
   154cc:	cmp	r3, #0
   154d0:	beq	15a5c <elf32_fsize@plt+0x43a4>
   154d4:	ldr	r4, [sp, #80]	; 0x50
   154d8:	cmp	r4, #0
   154dc:	bne	157ac <elf32_fsize@plt+0x40f4>
   154e0:	ldr	r5, [sp, #68]	; 0x44
   154e4:	cmp	r5, #0
   154e8:	bne	154f8 <elf32_fsize@plt+0x3e40>
   154ec:	ldrb	r3, [sp, #149]	; 0x95
   154f0:	cmp	r3, #0
   154f4:	beq	15560 <elf32_fsize@plt+0x3ea8>
   154f8:	mov	r2, #5
   154fc:	movw	r1, #12616	; 0x3148
   15500:	mov	r0, #0
   15504:	movt	r1, #2
   15508:	bl	113b8 <dcgettext@plt>
   1550c:	mov	r1, sl
   15510:	mov	r4, r0
   15514:	add	r0, fp, #16
   15518:	bl	12670 <elf32_fsize@plt+0xfb8>
   1551c:	mov	r1, r4
   15520:	movw	r2, #12676	; 0x3184
   15524:	movt	r2, #2
   15528:	str	r2, [sp]
   1552c:	movw	r2, #12696	; 0x3198
   15530:	movt	r2, #2
   15534:	str	r2, [sp, #8]
   15538:	mov	r2, sl
   1553c:	mov	r3, r0
   15540:	movw	r0, #12684	; 0x318c
   15544:	movt	r0, #2
   15548:	str	r0, [sp, #4]
   1554c:	mov	r0, #1
   15550:	bl	11580 <__printf_chk@plt>
   15554:	ldr	r3, [r9, #4]
   15558:	add	r3, r3, #1
   1555c:	str	r3, [r9, #4]
   15560:	ldr	r4, [sp, #88]	; 0x58
   15564:	cmp	r4, #0
   15568:	bne	157d0 <elf32_fsize@plt+0x4118>
   1556c:	ldr	r5, [sp, #76]	; 0x4c
   15570:	cmp	r5, #0
   15574:	bne	15584 <elf32_fsize@plt+0x3ecc>
   15578:	ldrb	r3, [sp, #159]	; 0x9f
   1557c:	cmp	r3, #0
   15580:	beq	155ec <elf32_fsize@plt+0x3f34>
   15584:	mov	r2, #5
   15588:	movw	r1, #12616	; 0x3148
   1558c:	mov	r0, #0
   15590:	movt	r1, #2
   15594:	bl	113b8 <dcgettext@plt>
   15598:	mov	r1, sl
   1559c:	mov	r4, r0
   155a0:	add	r0, fp, #16
   155a4:	bl	12670 <elf32_fsize@plt+0xfb8>
   155a8:	mov	r1, r4
   155ac:	movw	r2, #12708	; 0x31a4
   155b0:	movt	r2, #2
   155b4:	str	r2, [sp]
   155b8:	movw	r2, #12728	; 0x31b8
   155bc:	movt	r2, #2
   155c0:	str	r2, [sp, #8]
   155c4:	mov	r2, sl
   155c8:	mov	r3, r0
   155cc:	movw	r0, #12716	; 0x31ac
   155d0:	movt	r0, #2
   155d4:	str	r0, [sp, #4]
   155d8:	mov	r0, #1
   155dc:	bl	11580 <__printf_chk@plt>
   155e0:	ldr	r3, [r9, #4]
   155e4:	add	r3, r3, #1
   155e8:	str	r3, [r9, #4]
   155ec:	ldr	r4, [sp, #72]	; 0x48
   155f0:	cmp	r4, #0
   155f4:	bne	157f4 <elf32_fsize@plt+0x413c>
   155f8:	ldr	r5, [sp, #48]	; 0x30
   155fc:	cmp	r5, #0
   15600:	beq	156a8 <elf32_fsize@plt+0x3ff0>
   15604:	mov	r2, #5
   15608:	mov	r0, r4
   1560c:	movw	r1, #12740	; 0x31c4
   15610:	movt	r1, #2
   15614:	bl	113b8 <dcgettext@plt>
   15618:	mov	r1, sl
   1561c:	mov	r4, r0
   15620:	add	r0, fp, #16
   15624:	bl	12670 <elf32_fsize@plt+0xfb8>
   15628:	movw	r2, #12808	; 0x3208
   1562c:	movt	r2, #2
   15630:	mov	r1, r4
   15634:	mov	r3, r0
   15638:	mov	r0, #1
   1563c:	str	r2, [sp]
   15640:	mov	r2, sl
   15644:	bl	11580 <__printf_chk@plt>
   15648:	ldr	r3, [r9, #4]
   1564c:	add	r3, r3, #1
   15650:	str	r3, [r9, #4]
   15654:	ldr	r4, [sp, #92]	; 0x5c
   15658:	ldrh	r3, [r4]
   1565c:	cmp	r3, #3
   15660:	beq	156a8 <elf32_fsize@plt+0x3ff0>
   15664:	mov	r2, #5
   15668:	movw	r1, #12840	; 0x3228
   1566c:	mov	r0, #0
   15670:	movt	r1, #2
   15674:	bl	113b8 <dcgettext@plt>
   15678:	mov	r1, sl
   1567c:	mov	r4, r0
   15680:	add	r0, fp, #16
   15684:	bl	12670 <elf32_fsize@plt+0xfb8>
   15688:	mov	r1, r4
   1568c:	mov	r2, sl
   15690:	mov	r3, r0
   15694:	mov	r0, #1
   15698:	bl	11580 <__printf_chk@plt>
   1569c:	ldr	r3, [r9, #4]
   156a0:	add	r3, r3, #1
   156a4:	str	r3, [r9, #4]
   156a8:	ldr	r5, [sp, #84]	; 0x54
   156ac:	cmp	r5, #0
   156b0:	bne	1571c <elf32_fsize@plt+0x4064>
   156b4:	ldr	ip, [sp, #64]	; 0x40
   156b8:	cmp	ip, #0
   156bc:	bne	156cc <elf32_fsize@plt+0x4014>
   156c0:	ldr	r4, [sp, #60]	; 0x3c
   156c4:	cmp	r4, #0
   156c8:	beq	15a4c <elf32_fsize@plt+0x4394>
   156cc:	mov	r2, #5
   156d0:	movw	r1, #12912	; 0x3270
   156d4:	mov	r0, #0
   156d8:	movt	r1, #2
   156dc:	bl	113b8 <dcgettext@plt>
   156e0:	mov	r1, sl
   156e4:	mov	r4, r0
   156e8:	add	r0, fp, #16
   156ec:	bl	12670 <elf32_fsize@plt+0xfb8>
   156f0:	mov	r1, r4
   156f4:	movw	ip, #12972	; 0x32ac
   156f8:	mov	r2, sl
   156fc:	movt	ip, #2
   15700:	str	ip, [sp]
   15704:	mov	r3, r0
   15708:	mov	r0, #1
   1570c:	bl	11580 <__printf_chk@plt>
   15710:	ldr	r3, [r9, #4]
   15714:	add	r3, r3, #1
   15718:	str	r3, [r9, #4]
   1571c:	ldr	ip, [sp, #64]	; 0x40
   15720:	cmp	ip, #0
   15724:	beq	159b0 <elf32_fsize@plt+0x42f8>
   15728:	ldr	r4, [sp, #60]	; 0x3c
   1572c:	cmp	r4, #0
   15730:	beq	1595c <elf32_fsize@plt+0x42a4>
   15734:	ldr	r5, [sp, #52]	; 0x34
   15738:	cmp	r5, #0
   1573c:	bne	15790 <elf32_fsize@plt+0x40d8>
   15740:	mov	r2, #5
   15744:	mov	r0, r5
   15748:	movw	r1, #12912	; 0x3270
   1574c:	movt	r1, #2
   15750:	bl	113b8 <dcgettext@plt>
   15754:	mov	r1, sl
   15758:	mov	r4, r0
   1575c:	add	r0, fp, #16
   15760:	bl	12670 <elf32_fsize@plt+0xfb8>
   15764:	mov	r1, r4
   15768:	mov	r2, sl
   1576c:	movw	ip, #13028	; 0x32e4
   15770:	movt	ip, #2
   15774:	str	ip, [sp]
   15778:	mov	r3, r0
   1577c:	mov	r0, #1
   15780:	bl	11580 <__printf_chk@plt>
   15784:	ldr	r3, [r9, #4]
   15788:	add	r3, r3, #1
   1578c:	str	r3, [r9, #4]
   15790:	ldr	r4, [sp, #56]	; 0x38
   15794:	ldr	r2, [sp, #404]	; 0x194
   15798:	ldr	r3, [r4]
   1579c:	cmp	r2, r3
   157a0:	bne	15c04 <elf32_fsize@plt+0x454c>
   157a4:	add	sp, sp, #412	; 0x19c
   157a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157ac:	ldr	ip, [sp, #68]	; 0x44
   157b0:	cmp	ip, #0
   157b4:	beq	154f8 <elf32_fsize@plt+0x3e40>
   157b8:	ldrb	r3, [sp, #149]	; 0x95
   157bc:	cmp	r3, #0
   157c0:	beq	154f8 <elf32_fsize@plt+0x3e40>
   157c4:	ldr	r4, [sp, #88]	; 0x58
   157c8:	cmp	r4, #0
   157cc:	beq	1556c <elf32_fsize@plt+0x3eb4>
   157d0:	ldr	ip, [sp, #76]	; 0x4c
   157d4:	cmp	ip, #0
   157d8:	beq	15584 <elf32_fsize@plt+0x3ecc>
   157dc:	ldrb	r3, [sp, #159]	; 0x9f
   157e0:	cmp	r3, #0
   157e4:	beq	15584 <elf32_fsize@plt+0x3ecc>
   157e8:	ldr	r4, [sp, #72]	; 0x48
   157ec:	cmp	r4, #0
   157f0:	beq	155f8 <elf32_fsize@plt+0x3f40>
   157f4:	ldr	ip, [sp, #48]	; 0x30
   157f8:	cmp	ip, #0
   157fc:	bne	15654 <elf32_fsize@plt+0x3f9c>
   15800:	mov	r2, #5
   15804:	mov	r0, ip
   15808:	movw	r1, #12740	; 0x31c4
   1580c:	movt	r1, #2
   15810:	bl	113b8 <dcgettext@plt>
   15814:	mov	r1, sl
   15818:	mov	r4, r0
   1581c:	add	r0, fp, #16
   15820:	bl	12670 <elf32_fsize@plt+0xfb8>
   15824:	movw	r2, #12828	; 0x321c
   15828:	mov	r1, r4
   1582c:	movt	r2, #2
   15830:	mov	r3, r0
   15834:	mov	r0, #1
   15838:	b	1563c <elf32_fsize@plt+0x3f84>
   1583c:	mov	r2, #5
   15840:	movw	r1, #12048	; 0x2f10
   15844:	mov	r0, #0
   15848:	movt	r1, #2
   1584c:	bl	113b8 <dcgettext@plt>
   15850:	mov	r1, sl
   15854:	mov	r6, r0
   15858:	add	r0, fp, #16
   1585c:	bl	12670 <elf32_fsize@plt+0xfb8>
   15860:	ldrd	r2, [r4]
   15864:	add	r1, sp, #352	; 0x160
   15868:	str	r1, [sp]
   1586c:	mov	r1, #50	; 0x32
   15870:	str	r1, [sp, #4]
   15874:	mov	r5, r0
   15878:	mov	r0, fp
   1587c:	bl	1f8c0 <elf32_fsize@plt+0xe208>
   15880:	mov	r1, r6
   15884:	mov	r3, r5
   15888:	mov	r2, sl
   1588c:	str	r8, [sp]
   15890:	str	r0, [sp, #4]
   15894:	mov	r0, #1
   15898:	bl	11580 <__printf_chk@plt>
   1589c:	ldr	ip, [sp, #60]	; 0x3c
   158a0:	ldrd	r2, [r4]
   158a4:	ldr	r1, [ip, #4]
   158a8:	add	r1, r1, #1
   158ac:	str	r1, [ip, #4]
   158b0:	b	14d94 <elf32_fsize@plt+0x36dc>
   158b4:	mov	r2, #5
   158b8:	movw	r1, #11812	; 0x2e24
   158bc:	movt	r1, #2
   158c0:	bl	113b8 <dcgettext@plt>
   158c4:	mov	r1, sl
   158c8:	mov	r5, r0
   158cc:	add	r0, fp, #16
   158d0:	bl	12670 <elf32_fsize@plt+0xfb8>
   158d4:	mov	r4, r0
   158d8:	mvn	r0, #0
   158dc:	bl	11520 <elf_errmsg@plt>
   158e0:	mov	r1, r5
   158e4:	mov	r3, r4
   158e8:	b	15218 <elf32_fsize@plt+0x3b60>
   158ec:	mov	r2, #5
   158f0:	mov	r0, r5
   158f4:	movw	r1, #11876	; 0x2e64
   158f8:	movt	r1, #2
   158fc:	bl	113b8 <dcgettext@plt>
   15900:	mov	r1, sl
   15904:	mov	r5, r0
   15908:	add	r0, fp, #16
   1590c:	bl	12670 <elf32_fsize@plt+0xfb8>
   15910:	mov	r1, r5
   15914:	mov	r2, sl
   15918:	mov	r3, r0
   1591c:	mov	r0, #1
   15920:	bl	11580 <__printf_chk@plt>
   15924:	ldr	r1, [r9, #4]
   15928:	mov	ip, #1
   1592c:	ldr	r2, [r4]
   15930:	add	r1, r1, ip
   15934:	str	ip, [sp, #48]	; 0x30
   15938:	ldr	r3, [r4, #4]
   1593c:	str	r1, [r9, #4]
   15940:	b	14cc4 <elf32_fsize@plt+0x360c>
   15944:	mvn	r0, #-1879048189	; 0x90000003
   15948:	mov	r1, #0
   1594c:	cmp	r3, r1
   15950:	cmpeq	r2, r0
   15954:	beq	1514c <elf32_fsize@plt+0x3a94>
   15958:	b	1512c <elf32_fsize@plt+0x3a74>
   1595c:	mov	r2, #5
   15960:	mov	r0, r4
   15964:	movw	r1, #12912	; 0x3270
   15968:	movt	r1, #2
   1596c:	bl	113b8 <dcgettext@plt>
   15970:	mov	r1, sl
   15974:	mov	r4, r0
   15978:	add	r0, fp, #16
   1597c:	bl	12670 <elf32_fsize@plt+0xfb8>
   15980:	mov	r1, r4
   15984:	movw	ip, #13012	; 0x32d4
   15988:	mov	r2, sl
   1598c:	movt	ip, #2
   15990:	str	ip, [sp]
   15994:	mov	r3, r0
   15998:	mov	r0, #1
   1599c:	bl	11580 <__printf_chk@plt>
   159a0:	ldr	r3, [r9, #4]
   159a4:	add	r3, r3, #1
   159a8:	str	r3, [r9, #4]
   159ac:	b	15734 <elf32_fsize@plt+0x407c>
   159b0:	mov	r0, ip
   159b4:	mov	r2, #5
   159b8:	movw	r1, #12912	; 0x3270
   159bc:	movt	r1, #2
   159c0:	bl	113b8 <dcgettext@plt>
   159c4:	mov	r1, sl
   159c8:	mov	r4, r0
   159cc:	add	r0, fp, #16
   159d0:	bl	12670 <elf32_fsize@plt+0xfb8>
   159d4:	mov	r1, r4
   159d8:	movw	ip, #12992	; 0x32c0
   159dc:	mov	r2, sl
   159e0:	movt	ip, #2
   159e4:	str	ip, [sp]
   159e8:	mov	r3, r0
   159ec:	mov	r0, #1
   159f0:	bl	11580 <__printf_chk@plt>
   159f4:	ldr	r3, [r9, #4]
   159f8:	add	r3, r3, #1
   159fc:	str	r3, [r9, #4]
   15a00:	b	15728 <elf32_fsize@plt+0x4070>
   15a04:	mov	r2, #5
   15a08:	movw	r1, #11772	; 0x2dfc
   15a0c:	mov	r0, #0
   15a10:	movt	r1, #2
   15a14:	bl	113b8 <dcgettext@plt>
   15a18:	mov	r1, sl
   15a1c:	mov	r4, r0
   15a20:	add	r0, fp, #16
   15a24:	bl	12670 <elf32_fsize@plt+0xfb8>
   15a28:	mov	r1, r4
   15a2c:	mov	r2, sl
   15a30:	mov	r3, r0
   15a34:	mov	r0, #1
   15a38:	bl	11580 <__printf_chk@plt>
   15a3c:	ldr	r3, [r9, #4]
   15a40:	add	r3, r3, #1
   15a44:	str	r3, [r9, #4]
   15a48:	b	14c60 <elf32_fsize@plt+0x35a8>
   15a4c:	ldr	r5, [sp, #52]	; 0x34
   15a50:	cmp	r5, #0
   15a54:	bne	156cc <elf32_fsize@plt+0x4014>
   15a58:	b	15790 <elf32_fsize@plt+0x40d8>
   15a5c:	mov	r2, #5
   15a60:	ldr	r0, [sp, #44]	; 0x2c
   15a64:	movw	r1, #12440	; 0x3098
   15a68:	movt	r1, #2
   15a6c:	bl	113b8 <dcgettext@plt>
   15a70:	mov	r1, sl
   15a74:	mov	r4, r0
   15a78:	add	r0, fp, #16
   15a7c:	bl	12670 <elf32_fsize@plt+0xfb8>
   15a80:	mov	r1, r4
   15a84:	movw	r2, #12604	; 0x313c
   15a88:	movt	r2, #2
   15a8c:	str	r2, [sp, #4]
   15a90:	mov	r2, sl
   15a94:	mov	r3, r0
   15a98:	movw	r0, #12592	; 0x3130
   15a9c:	movt	r0, #2
   15aa0:	str	r0, [sp]
   15aa4:	mov	r0, #1
   15aa8:	bl	11580 <__printf_chk@plt>
   15aac:	ldr	r3, [r9, #4]
   15ab0:	add	r3, r3, #1
   15ab4:	str	r3, [r9, #4]
   15ab8:	b	154d4 <elf32_fsize@plt+0x3e1c>
   15abc:	mov	r2, #5
   15ac0:	movw	r1, #11564	; 0x2d2c
   15ac4:	movt	r1, #2
   15ac8:	bl	113b8 <dcgettext@plt>
   15acc:	mov	r1, r0
   15ad0:	mov	r0, #1
   15ad4:	bl	11580 <__printf_chk@plt>
   15ad8:	ldr	r3, [r9, #4]
   15adc:	add	r3, r3, #1
   15ae0:	str	r3, [r9, #4]
   15ae4:	b	14b20 <elf32_fsize@plt+0x3468>
   15ae8:	mov	r2, #5
   15aec:	movw	r1, #7828	; 0x1e94
   15af0:	movt	r1, #2
   15af4:	bl	113b8 <dcgettext@plt>
   15af8:	mov	r1, sl
   15afc:	mov	r4, r0
   15b00:	add	r0, fp, #16
   15b04:	bl	12670 <elf32_fsize@plt+0xfb8>
   15b08:	mov	r1, r4
   15b0c:	mov	r2, sl
   15b10:	mov	r3, r0
   15b14:	mov	r0, #1
   15b18:	bl	11580 <__printf_chk@plt>
   15b1c:	ldr	r3, [r9, #4]
   15b20:	add	r3, r3, #1
   15b24:	str	r3, [r9, #4]
   15b28:	b	15790 <elf32_fsize@plt+0x40d8>
   15b2c:	mov	r2, #5
   15b30:	ldr	r0, [sp, #44]	; 0x2c
   15b34:	movw	r1, #12544	; 0x3100
   15b38:	movt	r1, #2
   15b3c:	bl	113b8 <dcgettext@plt>
   15b40:	mov	r1, sl
   15b44:	mov	r4, r0
   15b48:	add	r0, fp, #16
   15b4c:	bl	12670 <elf32_fsize@plt+0xfb8>
   15b50:	mov	r1, r4
   15b54:	mov	r2, sl
   15b58:	mov	r3, r0
   15b5c:	mov	r0, #1
   15b60:	bl	11580 <__printf_chk@plt>
   15b64:	ldr	r4, [sp, #80]	; 0x50
   15b68:	ldr	r3, [r9, #4]
   15b6c:	cmp	r4, #0
   15b70:	add	r3, r3, #1
   15b74:	str	r3, [r9, #4]
   15b78:	bne	157ac <elf32_fsize@plt+0x40f4>
   15b7c:	b	154e0 <elf32_fsize@plt+0x3e28>
   15b80:	mov	r0, #0
   15b84:	str	r0, [sp, #52]	; 0x34
   15b88:	str	r0, [sp, #60]	; 0x3c
   15b8c:	str	r0, [sp, #64]	; 0x40
   15b90:	str	r0, [sp, #84]	; 0x54
   15b94:	str	r0, [sp, #48]	; 0x30
   15b98:	str	r0, [sp, #72]	; 0x48
   15b9c:	str	r0, [sp, #76]	; 0x4c
   15ba0:	str	r0, [sp, #88]	; 0x58
   15ba4:	str	r0, [sp, #68]	; 0x44
   15ba8:	str	r0, [sp, #80]	; 0x50
   15bac:	str	r0, [sp, #44]	; 0x2c
   15bb0:	b	14f5c <elf32_fsize@plt+0x38a4>
   15bb4:	mov	r2, #5
   15bb8:	movw	r1, #11604	; 0x2d54
   15bbc:	movt	r1, #2
   15bc0:	bl	113b8 <dcgettext@plt>
   15bc4:	ldr	ip, [sp, #32]
   15bc8:	mov	r1, sl
   15bcc:	ldr	r4, [ip, #40]	; 0x28
   15bd0:	mov	r5, r0
   15bd4:	add	r0, fp, #16
   15bd8:	bl	12670 <elf32_fsize@plt+0xfb8>
   15bdc:	mov	r3, sl
   15be0:	mov	r1, r5
   15be4:	mov	r2, r4
   15be8:	str	r0, [sp]
   15bec:	mov	r0, #1
   15bf0:	bl	11580 <__printf_chk@plt>
   15bf4:	ldr	r3, [r9, #4]
   15bf8:	add	r3, r3, #1
   15bfc:	str	r3, [r9, #4]
   15c00:	b	15790 <elf32_fsize@plt+0x40d8>
   15c04:	bl	113dc <__stack_chk_fail@plt>
   15c08:	ldrdeq	r0, [r2], -fp
   15c0c:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   15c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c14:	movw	sl, #37240	; 0x9178
   15c18:	movt	sl, #3
   15c1c:	mov	r7, r2
   15c20:	cmp	r2, #1
   15c24:	sub	sp, sp, #244	; 0xf4
   15c28:	ldr	r2, [sl]
   15c2c:	mov	r6, r0
   15c30:	mov	fp, r1
   15c34:	mov	r5, r3
   15c38:	ldr	r4, [sp, #280]	; 0x118
   15c3c:	str	r2, [sp, #236]	; 0xec
   15c40:	beq	15eb4 <elf32_fsize@plt+0x47fc>
   15c44:	ldr	r0, [r1, #16]
   15c48:	mov	r1, r4
   15c4c:	bl	11628 <elf_getscn@plt>
   15c50:	mov	r1, #0
   15c54:	bl	11484 <elf_getdata@plt>
   15c58:	subs	r9, r0, #0
   15c5c:	beq	15e50 <elf32_fsize@plt+0x4798>
   15c60:	ldr	r3, [r9]
   15c64:	cmp	r3, #0
   15c68:	beq	15e50 <elf32_fsize@plt+0x4798>
   15c6c:	ldr	r1, [r5, #40]	; 0x28
   15c70:	ldr	r0, [fp, #16]
   15c74:	bl	11628 <elf_getscn@plt>
   15c78:	add	r1, sp, #168	; 0xa8
   15c7c:	bl	1134c <gelf_getshdr@plt>
   15c80:	subs	r8, r0, #0
   15c84:	str	r8, [sp, #32]
   15c88:	beq	16a0c <elf32_fsize@plt+0x5354>
   15c8c:	ldr	r3, [r8, #4]
   15c90:	cmp	r3, #11
   15c94:	beq	15ce4 <elf32_fsize@plt+0x462c>
   15c98:	mov	r2, #5
   15c9c:	movw	r1, #13108	; 0x3334
   15ca0:	mov	r0, #0
   15ca4:	movt	r1, #2
   15ca8:	bl	113b8 <dcgettext@plt>
   15cac:	mov	r1, r4
   15cb0:	mov	r7, r0
   15cb4:	add	r0, fp, #16
   15cb8:	bl	12670 <elf32_fsize@plt+0xfb8>
   15cbc:	mov	r1, r7
   15cc0:	mov	r2, r4
   15cc4:	mov	r3, r0
   15cc8:	mov	r0, #1
   15ccc:	bl	11580 <__printf_chk@plt>
   15cd0:	movw	r3, #37252	; 0x9184
   15cd4:	movt	r3, #3
   15cd8:	ldr	r2, [r3, #4]
   15cdc:	add	r2, r2, #1
   15ce0:	str	r2, [r3, #4]
   15ce4:	cmn	r6, #-1879048182	; 0x9000000a
   15ce8:	beq	15f58 <elf32_fsize@plt+0x48a0>
   15cec:	mov	r0, fp
   15cf0:	bl	1ff5c <elf32_fsize@plt+0xe8a4>
   15cf4:	mov	r1, #0
   15cf8:	mov	r7, r0
   15cfc:	ldrd	r2, [r5, #56]	; 0x38
   15d00:	cmp	r3, r1
   15d04:	cmpeq	r2, r0
   15d08:	beq	15d58 <elf32_fsize@plt+0x46a0>
   15d0c:	mov	r2, #5
   15d10:	movw	r1, #13244	; 0x33bc
   15d14:	mov	r0, #0
   15d18:	movt	r1, #2
   15d1c:	bl	113b8 <dcgettext@plt>
   15d20:	mov	r1, r4
   15d24:	mov	r8, r0
   15d28:	add	r0, fp, #16
   15d2c:	bl	12670 <elf32_fsize@plt+0xfb8>
   15d30:	mov	r2, r4
   15d34:	mov	r1, r8
   15d38:	mov	r3, r0
   15d3c:	mov	r0, #1
   15d40:	bl	11580 <__printf_chk@plt>
   15d44:	movw	r3, #37252	; 0x9184
   15d48:	movt	r3, #3
   15d4c:	ldr	r2, [r3, #4]
   15d50:	add	r2, r2, #1
   15d54:	str	r2, [r3, #4]
   15d58:	ldrd	r2, [r5, #8]
   15d5c:	mov	r0, #2
   15d60:	mov	r1, #0
   15d64:	and	r2, r2, r0
   15d68:	and	r3, r3, r1
   15d6c:	orrs	ip, r2, r3
   15d70:	beq	15f08 <elf32_fsize@plt+0x4850>
   15d74:	cmp	r7, #0
   15d78:	ldrd	r2, [r5, #32]
   15d7c:	mov	r1, #0
   15d80:	moveq	r7, #4
   15d84:	cmn	r6, #-1879048182	; 0x9000000a
   15d88:	movne	r0, #2
   15d8c:	moveq	r0, #4
   15d90:	mul	r0, r0, r7
   15d94:	cmp	r3, r1
   15d98:	cmpeq	r2, r0
   15d9c:	movwcc	r1, #13348	; 0x3424
   15da0:	movcc	r0, #0
   15da4:	movtcc	r1, #2
   15da8:	bcc	15e5c <elf32_fsize@plt+0x47a4>
   15dac:	cmp	r6, #5
   15db0:	beq	15f80 <elf32_fsize@plt+0x48c8>
   15db4:	cmn	r6, #-1879048182	; 0x9000000a
   15db8:	bne	15eec <elf32_fsize@plt+0x4834>
   15dbc:	ldr	r3, [r9, #12]
   15dc0:	cmp	r3, #15
   15dc4:	movwls	r1, #13744	; 0x35b0
   15dc8:	movls	r0, #0
   15dcc:	movtls	r1, #2
   15dd0:	bls	15e5c <elf32_fsize@plt+0x47a4>
   15dd4:	ldr	r3, [r9]
   15dd8:	ldr	r8, [r3, #8]
   15ddc:	str	r8, [sp, #48]	; 0x30
   15de0:	ldr	ip, [sp, #48]	; 0x30
   15de4:	ldr	r8, [r3]
   15de8:	ldr	r3, [r3, #4]
   15dec:	cmp	ip, #0
   15df0:	str	r3, [sp, #120]	; 0x78
   15df4:	beq	15e0c <elf32_fsize@plt+0x4754>
   15df8:	ldr	lr, [sp, #48]	; 0x30
   15dfc:	sub	ip, ip, #1
   15e00:	str	ip, [sp, #96]	; 0x60
   15e04:	tst	ip, lr
   15e08:	beq	160e8 <elf32_fsize@plt+0x4a30>
   15e0c:	mov	r2, #5
   15e10:	movw	r1, #13784	; 0x35d8
   15e14:	mov	r0, #0
   15e18:	movt	r1, #2
   15e1c:	bl	113b8 <dcgettext@plt>
   15e20:	mov	r1, r4
   15e24:	mov	r5, r0
   15e28:	add	r0, fp, #16
   15e2c:	bl	12670 <elf32_fsize@plt+0xfb8>
   15e30:	ldr	r8, [sp, #48]	; 0x30
   15e34:	mov	r1, r5
   15e38:	mov	r2, r4
   15e3c:	str	r8, [sp]
   15e40:	mov	r3, r0
   15e44:	mov	r0, #1
   15e48:	bl	11580 <__printf_chk@plt>
   15e4c:	b	15e88 <elf32_fsize@plt+0x47d0>
   15e50:	movw	r1, #7828	; 0x1e94
   15e54:	movt	r1, #2
   15e58:	mov	r0, #0
   15e5c:	mov	r2, #5
   15e60:	bl	113b8 <dcgettext@plt>
   15e64:	mov	r1, r4
   15e68:	mov	r5, r0
   15e6c:	add	r0, fp, #16
   15e70:	bl	12670 <elf32_fsize@plt+0xfb8>
   15e74:	mov	r1, r5
   15e78:	mov	r2, r4
   15e7c:	mov	r3, r0
   15e80:	mov	r0, #1
   15e84:	bl	11580 <__printf_chk@plt>
   15e88:	movw	r3, #37252	; 0x9184
   15e8c:	movt	r3, #3
   15e90:	ldr	r2, [r3, #4]
   15e94:	add	r2, r2, #1
   15e98:	str	r2, [r3, #4]
   15e9c:	ldr	r2, [sp, #236]	; 0xec
   15ea0:	ldr	r3, [sl]
   15ea4:	cmp	r2, r3
   15ea8:	bne	16db8 <elf32_fsize@plt+0x5700>
   15eac:	add	sp, sp, #244	; 0xf4
   15eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb4:	mov	r2, #5
   15eb8:	movw	r1, #13044	; 0x32f4
   15ebc:	mov	r0, #0
   15ec0:	movt	r1, #2
   15ec4:	bl	113b8 <dcgettext@plt>
   15ec8:	mov	r1, r4
   15ecc:	mov	r5, r0
   15ed0:	add	r0, fp, #16
   15ed4:	bl	12670 <elf32_fsize@plt+0xfb8>
   15ed8:	mov	r1, r5
   15edc:	mov	r2, r4
   15ee0:	mov	r3, r0
   15ee4:	mov	r0, r7
   15ee8:	b	15e84 <elf32_fsize@plt+0x47cc>
   15eec:	movw	r0, #14512	; 0x38b0
   15ef0:	movw	r1, #10140	; 0x279c
   15ef4:	movt	r0, #2
   15ef8:	movt	r1, #2
   15efc:	movw	r2, #2366	; 0x93e
   15f00:	ldr	r3, [pc, #3764]	; 16dbc <elf32_fsize@plt+0x5704>
   15f04:	bl	116ac <__assert_fail@plt>
   15f08:	mov	r2, #5
   15f0c:	movw	r1, #13300	; 0x33f4
   15f10:	mov	r0, #0
   15f14:	movt	r1, #2
   15f18:	bl	113b8 <dcgettext@plt>
   15f1c:	mov	r1, r4
   15f20:	mov	r8, r0
   15f24:	add	r0, fp, #16
   15f28:	bl	12670 <elf32_fsize@plt+0xfb8>
   15f2c:	mov	r2, r4
   15f30:	mov	r1, r8
   15f34:	mov	r3, r0
   15f38:	mov	r0, #1
   15f3c:	bl	11580 <__printf_chk@plt>
   15f40:	movw	r3, #37252	; 0x9184
   15f44:	movt	r3, #3
   15f48:	ldr	r2, [r3, #4]
   15f4c:	add	r2, r2, #1
   15f50:	str	r2, [r3, #4]
   15f54:	b	15d74 <elf32_fsize@plt+0x46bc>
   15f58:	ldr	r0, [fp, #16]
   15f5c:	bl	11424 <gelf_getclass@plt>
   15f60:	cmp	r0, #1
   15f64:	moveq	r0, #4
   15f68:	moveq	r1, #0
   15f6c:	moveq	r7, #4
   15f70:	movne	r0, #0
   15f74:	movne	r1, #0
   15f78:	movne	r7, #0
   15f7c:	b	15cfc <elf32_fsize@plt+0x4644>
   15f80:	mov	r0, fp
   15f84:	bl	1ff5c <elf32_fsize@plt+0xe8a4>
   15f88:	cmp	r0, #8
   15f8c:	beq	16764 <elf32_fsize@plt+0x50ac>
   15f90:	ldr	ip, [r9]
   15f94:	ldrd	r0, [r5, #32]
   15f98:	ldr	r8, [ip, #4]
   15f9c:	str	ip, [sp, #16]
   15fa0:	ldr	ip, [ip]
   15fa4:	strd	r0, [sp, #40]	; 0x28
   15fa8:	mov	r0, r8
   15fac:	mov	r1, #0
   15fb0:	strd	r0, [sp, #56]	; 0x38
   15fb4:	adds	r0, r0, ip
   15fb8:	str	r8, [sp, #48]	; 0x30
   15fbc:	adc	r1, r1, #0
   15fc0:	adds	r0, r0, #2
   15fc4:	adc	r1, r1, #0
   15fc8:	lsl	r2, r0, #2
   15fcc:	str	ip, [sp, #24]
   15fd0:	mov	r8, ip
   15fd4:	lsl	r3, r1, #2
   15fd8:	orr	r3, r3, r0, lsr #30
   15fdc:	ldrd	r0, [sp, #40]	; 0x28
   15fe0:	cmp	r1, r3
   15fe4:	cmpeq	r0, r2
   15fe8:	bcc	16a4c <elf32_fsize@plt+0x5394>
   15fec:	ldr	ip, [sp, #32]
   15ff0:	cmp	ip, #0
   15ff4:	beq	16004 <elf32_fsize@plt+0x494c>
   15ff8:	ldrd	r2, [ip, #56]	; 0x38
   15ffc:	orrs	r0, r2, r3
   16000:	bne	164d4 <elf32_fsize@plt+0x4e1c>
   16004:	ldr	r8, [sp, #40]	; 0x28
   16008:	ldr	r7, [sp, #48]	; 0x30
   1600c:	ldr	ip, [sp, #24]
   16010:	add	r9, ip, #2
   16014:	ldr	ip, [sp, #16]
   16018:	cmp	r9, #2
   1601c:	add	r8, ip, r8
   16020:	bls	16b5c <elf32_fsize@plt+0x54a4>
   16024:	add	r3, ip, #8
   16028:	cmp	r8, r3
   1602c:	bls	16b5c <elf32_fsize@plt+0x54a4>
   16030:	add	r6, ip, #12
   16034:	mov	r5, #2
   16038:	rsb	r2, r6, r8
   1603c:	movw	ip, #37252	; 0x9184
   16040:	add	r2, r2, #3
   16044:	movt	ip, #3
   16048:	add	r0, fp, #16
   1604c:	str	r8, [sp, #56]	; 0x38
   16050:	lsr	r2, r2, r5
   16054:	str	fp, [sp, #40]	; 0x28
   16058:	add	r2, r2, #3
   1605c:	str	r0, [sp, #32]
   16060:	str	sl, [sp, #64]	; 0x40
   16064:	mov	fp, ip
   16068:	mov	r8, r2
   1606c:	b	1608c <elf32_fsize@plt+0x49d4>
   16070:	add	r5, r5, #1
   16074:	cmp	r5, r9
   16078:	beq	16684 <elf32_fsize@plt+0x4fcc>
   1607c:	cmp	r5, r8
   16080:	mov	r3, r6
   16084:	add	r6, r6, #4
   16088:	beq	16684 <elf32_fsize@plt+0x4fcc>
   1608c:	ldr	r3, [r3]
   16090:	cmp	r3, r7
   16094:	bcc	16070 <elf32_fsize@plt+0x49b8>
   16098:	mov	r2, #5
   1609c:	movw	r1, #13556	; 0x34f4
   160a0:	mov	r0, #0
   160a4:	movt	r1, #2
   160a8:	bl	113b8 <dcgettext@plt>
   160ac:	mov	r1, r4
   160b0:	mov	sl, r0
   160b4:	ldr	r0, [sp, #32]
   160b8:	bl	12670 <elf32_fsize@plt+0xfb8>
   160bc:	sub	r2, r5, #2
   160c0:	mov	r1, sl
   160c4:	str	r2, [sp]
   160c8:	mov	r2, r4
   160cc:	mov	r3, r0
   160d0:	mov	r0, #1
   160d4:	bl	11580 <__printf_chk@plt>
   160d8:	ldr	r3, [fp, #4]
   160dc:	add	r3, r3, #1
   160e0:	str	r3, [fp, #4]
   160e4:	b	16070 <elf32_fsize@plt+0x49b8>
   160e8:	ldr	r0, [fp, #16]
   160ec:	bl	11424 <gelf_getclass@plt>
   160f0:	mov	r3, #0
   160f4:	ldr	r1, [r9, #12]
   160f8:	cmp	r0, #2
   160fc:	ldr	r0, [r9]
   16100:	ldreq	ip, [sp, #48]	; 0x30
   16104:	ldr	r0, [r0, #12]
   16108:	lsleq	ip, ip, #1
   1610c:	streq	ip, [sp, #48]	; 0x30
   16110:	ldr	ip, [sp, #48]	; 0x30
   16114:	adds	r2, r8, #4
   16118:	adc	r3, r3, #0
   1611c:	str	r0, [sp, #112]	; 0x70
   16120:	adds	r2, r2, ip
   16124:	adc	r3, r3, #0
   16128:	lsl	r6, r2, #2
   1612c:	lsl	r7, r3, #2
   16130:	mov	r3, #0
   16134:	orr	r7, r7, r2, lsr #30
   16138:	mov	r2, r1
   1613c:	cmp	r7, r3
   16140:	cmpeq	r6, r2
   16144:	bhi	16b18 <elf32_fsize@plt+0x5460>
   16148:	ldr	ip, [sp, #112]	; 0x70
   1614c:	cmp	ip, #31
   16150:	bhi	16cbc <elf32_fsize@plt+0x5604>
   16154:	ldr	r3, [r5, #32]
   16158:	ldr	ip, [sp, #32]
   1615c:	ldr	r2, [r5, #36]	; 0x24
   16160:	cmp	ip, #0
   16164:	lsr	r3, r3, #2
   16168:	ldr	ip, [sp, #48]	; 0x30
   1616c:	orr	r3, r3, r2, lsl #30
   16170:	add	r8, ip, r8
   16174:	sub	r3, r3, #4
   16178:	rsb	r3, r8, r3
   1617c:	str	r8, [sp, #128]	; 0x80
   16180:	str	r3, [sp, #64]	; 0x40
   16184:	beq	161b8 <elf32_fsize@plt+0x4b00>
   16188:	ldr	r8, [sp, #32]
   1618c:	ldrd	r2, [r8, #56]	; 0x38
   16190:	orrs	ip, r2, r3
   16194:	beq	161b8 <elf32_fsize@plt+0x4b00>
   16198:	ldrd	r0, [r8, #32]
   1619c:	bl	2042c <elf32_fsize@plt+0xed74>
   161a0:	ldr	r2, [sp, #64]	; 0x40
   161a4:	mov	r3, #0
   161a8:	cmp	r3, r1
   161ac:	cmpeq	r2, r0
   161b0:	movhi	r2, r0
   161b4:	str	r2, [sp, #64]	; 0x40
   161b8:	ldr	r8, [sp, #48]	; 0x30
   161bc:	ldr	ip, [sp, #128]	; 0x80
   161c0:	ldr	r1, [r5, #40]	; 0x28
   161c4:	add	r8, r8, #4
   161c8:	ldr	r0, [fp, #16]
   161cc:	add	ip, ip, #4
   161d0:	str	r8, [sp, #108]	; 0x6c
   161d4:	str	ip, [sp, #124]	; 0x7c
   161d8:	bl	11628 <elf_getscn@plt>
   161dc:	mov	r1, #0
   161e0:	bl	11484 <elf_getdata@plt>
   161e4:	ldr	r8, [r9]
   161e8:	mov	r1, #4
   161ec:	str	r8, [sp, #140]	; 0x8c
   161f0:	mov	r5, r0
   161f4:	ldr	r0, [sp, #48]	; 0x30
   161f8:	bl	20128 <elf32_fsize@plt+0xea70>
   161fc:	str	r0, [sp, #132]	; 0x84
   16200:	ldr	r0, [fp, #16]
   16204:	bl	11424 <gelf_getclass@plt>
   16208:	ldr	ip, [sp, #108]	; 0x6c
   1620c:	ldr	r8, [sp, #124]	; 0x7c
   16210:	cmp	r0, #1
   16214:	movne	r0, #64	; 0x40
   16218:	moveq	r0, #32
   1621c:	cmp	ip, r8
   16220:	str	r0, [sp, #40]	; 0x28
   16224:	bcs	1661c <elf32_fsize@plt+0x4f64>
   16228:	ldr	ip, [sp, #108]	; 0x6c
   1622c:	movw	r8, #37252	; 0x9184
   16230:	str	sl, [sp, #136]	; 0x88
   16234:	movt	r8, #3
   16238:	ldr	sl, [sp, #132]	; 0x84
   1623c:	str	r9, [sp, #56]	; 0x38
   16240:	mov	r9, r5
   16244:	lsl	ip, ip, #2
   16248:	str	r8, [sp, #92]	; 0x5c
   1624c:	str	ip, [sp, #116]	; 0x74
   16250:	mov	r8, #0
   16254:	str	fp, [sp, #84]	; 0x54
   16258:	str	r8, [sp, #100]	; 0x64
   1625c:	str	r4, [sp, #104]	; 0x68
   16260:	ldr	ip, [sp, #56]	; 0x38
   16264:	ldr	r8, [sp, #116]	; 0x74
   16268:	ldr	r3, [ip]
   1626c:	ldr	r6, [r3, r8]
   16270:	cmp	r6, #0
   16274:	beq	165e0 <elf32_fsize@plt+0x4f28>
   16278:	ldr	fp, [sp, #120]	; 0x78
   1627c:	cmp	fp, r6
   16280:	bhi	169b4 <elf32_fsize@plt+0x52fc>
   16284:	ldr	r8, [sp, #64]	; 0x40
   16288:	rsb	ip, fp, r6
   1628c:	str	ip, [sp, #72]	; 0x48
   16290:	cmp	r8, ip
   16294:	bls	16b08 <elf32_fsize@plt+0x5450>
   16298:	ldr	ip, [sp, #120]	; 0x78
   1629c:	mov	r7, #1
   162a0:	ldr	r8, [sp, #128]	; 0x80
   162a4:	rsb	r5, ip, #4
   162a8:	ldr	fp, [sp, #40]	; 0x28
   162ac:	add	r5, r5, r8
   162b0:	rsb	r4, ip, #1
   162b4:	add	r5, r5, r6
   162b8:	sub	fp, fp, #1
   162bc:	add	r4, r4, r6
   162c0:	str	fp, [sp, #88]	; 0x58
   162c4:	lsl	r5, r5, #2
   162c8:	b	163a0 <elf32_fsize@plt+0x4ce8>
   162cc:	mov	r0, fp
   162d0:	ldr	r1, [sp, #40]	; 0x28
   162d4:	bl	20220 <elf32_fsize@plt+0xeb68>
   162d8:	ldr	ip, [sp, #96]	; 0x60
   162dc:	and	r0, r0, ip
   162e0:	ldr	ip, [sp, #48]	; 0x30
   162e4:	cmp	ip, r0
   162e8:	bls	16aa4 <elf32_fsize@plt+0x53ec>
   162ec:	ldr	ip, [sp, #40]	; 0x28
   162f0:	cmp	ip, #32
   162f4:	beq	1665c <elf32_fsize@plt+0x4fa4>
   162f8:	ldr	ip, [sp, #88]	; 0x58
   162fc:	ldr	lr, [sp, #112]	; 0x70
   16300:	and	r3, ip, fp, lsr lr
   16304:	and	ip, fp, ip
   16308:	sub	r1, r3, #32
   1630c:	lsl	lr, r0, #3
   16310:	lsl	r1, r7, r1
   16314:	str	r1, [sp, #20]
   16318:	ldr	r0, [sp, #20]
   1631c:	sub	r2, ip, #32
   16320:	rsb	r1, r3, #32
   16324:	lsl	r2, r7, r2
   16328:	str	r2, [sp, #28]
   1632c:	orr	r1, r0, r7, lsr r1
   16330:	str	r1, [sp, #20]
   16334:	rsb	r2, ip, #32
   16338:	ldr	r1, [sp, #28]
   1633c:	lsl	r3, r7, r3
   16340:	lsl	ip, r7, ip
   16344:	str	r3, [sp, #16]
   16348:	orr	r2, r1, r7, lsr r2
   1634c:	str	ip, [sp, #24]
   16350:	str	r2, [sp, #28]
   16354:	ldrd	r2, [sp, #24]
   16358:	ldrd	r0, [sp, #16]
   1635c:	orr	r0, r0, r2
   16360:	orr	r1, r1, r3
   16364:	ldrd	r2, [sl, lr]
   16368:	orr	r2, r2, r0
   1636c:	orr	r3, r3, r1
   16370:	strd	r2, [sl, lr]
   16374:	tst	r8, #1
   16378:	ldr	r8, [sp, #64]	; 0x40
   1637c:	bne	16550 <elf32_fsize@plt+0x4e98>
   16380:	cmp	r4, r8
   16384:	add	r6, r6, #1
   16388:	add	r5, r5, #4
   1638c:	bcs	16b08 <elf32_fsize@plt+0x5450>
   16390:	ldr	ip, [sp, #56]	; 0x38
   16394:	str	r4, [sp, #72]	; 0x48
   16398:	add	r4, r4, #1
   1639c:	ldr	r3, [ip]
   163a0:	cmp	r9, #0
   163a4:	ldr	r8, [r3, r5]
   163a8:	beq	16374 <elf32_fsize@plt+0x4cbc>
   163ac:	mov	r0, r9
   163b0:	mov	r1, r6
   163b4:	add	r2, sp, #144	; 0x90
   163b8:	bl	11418 <gelf_getsym@plt>
   163bc:	subs	ip, r0, #0
   163c0:	beq	16374 <elf32_fsize@plt+0x4cbc>
   163c4:	ldrh	r0, [ip, #6]
   163c8:	cmp	r0, #0
   163cc:	bne	1643c <elf32_fsize@plt+0x4d84>
   163d0:	ldrb	r3, [ip, #4]
   163d4:	and	r3, r3, #15
   163d8:	cmp	r3, #2
   163dc:	beq	1643c <elf32_fsize@plt+0x4d84>
   163e0:	mov	r2, #5
   163e4:	movw	r1, #14072	; 0x36f8
   163e8:	movt	r1, #2
   163ec:	str	ip, [sp, #8]
   163f0:	bl	113b8 <dcgettext@plt>
   163f4:	ldr	lr, [sp, #84]	; 0x54
   163f8:	ldr	r1, [sp, #104]	; 0x68
   163fc:	mov	fp, r0
   16400:	add	r0, lr, #16
   16404:	bl	12670 <elf32_fsize@plt+0xfb8>
   16408:	mov	r1, fp
   1640c:	ldr	fp, [sp, #100]	; 0x64
   16410:	str	r6, [sp]
   16414:	ldr	r2, [sp, #104]	; 0x68
   16418:	str	fp, [sp, #4]
   1641c:	mov	r3, r0
   16420:	mov	r0, #1
   16424:	bl	11580 <__printf_chk@plt>
   16428:	ldr	fp, [sp, #92]	; 0x5c
   1642c:	ldr	ip, [sp, #8]
   16430:	ldr	r3, [fp, #4]
   16434:	add	r3, r3, #1
   16438:	str	r3, [fp, #4]
   1643c:	ldr	r2, [ip]
   16440:	ldr	fp, [sp, #32]
   16444:	ldr	ip, [sp, #84]	; 0x54
   16448:	ldr	r1, [fp, #40]	; 0x28
   1644c:	ldr	r0, [ip, #16]
   16450:	bl	11430 <elf_strptr@plt>
   16454:	cmp	r0, #0
   16458:	beq	16374 <elf32_fsize@plt+0x4cbc>
   1645c:	bl	115bc <elf_gnu_hash@plt>
   16460:	eor	r3, r0, r8
   16464:	mov	fp, r0
   16468:	bics	ip, r3, #1
   1646c:	beq	162cc <elf32_fsize@plt+0x4c14>
   16470:	mov	r2, #5
   16474:	movw	r1, #14152	; 0x3748
   16478:	mov	r0, #0
   1647c:	movt	r1, #2
   16480:	bl	113b8 <dcgettext@plt>
   16484:	ldr	ip, [sp, #84]	; 0x54
   16488:	ldr	r1, [sp, #104]	; 0x68
   1648c:	mov	r2, r0
   16490:	add	r0, ip, #16
   16494:	str	r2, [sp, #12]
   16498:	bl	12670 <elf32_fsize@plt+0xfb8>
   1649c:	ldr	r2, [sp, #12]
   164a0:	ldr	ip, [sp, #100]	; 0x64
   164a4:	str	r6, [sp]
   164a8:	mov	r1, r2
   164ac:	ldr	r2, [sp, #104]	; 0x68
   164b0:	str	ip, [sp, #4]
   164b4:	mov	r3, r0
   164b8:	mov	r0, #1
   164bc:	bl	11580 <__printf_chk@plt>
   164c0:	ldr	ip, [sp, #92]	; 0x5c
   164c4:	ldr	r3, [ip, #4]
   164c8:	add	r3, r3, #1
   164cc:	str	r3, [ip, #4]
   164d0:	b	162cc <elf32_fsize@plt+0x4c14>
   164d4:	ldrd	r0, [ip, #32]
   164d8:	bl	2042c <elf32_fsize@plt+0xed74>
   164dc:	ldrd	r2, [sp, #56]	; 0x38
   164e0:	cmp	r3, r1
   164e4:	cmpeq	r2, r0
   164e8:	mov	r7, r0
   164ec:	ldrls	r8, [sp, #40]	; 0x28
   164f0:	bls	1600c <elf32_fsize@plt+0x4954>
   164f4:	mov	r2, r6
   164f8:	movw	r1, #13512	; 0x34c8
   164fc:	mov	r0, #0
   16500:	movt	r1, #2
   16504:	bl	113b8 <dcgettext@plt>
   16508:	mov	r1, r4
   1650c:	mov	r6, r0
   16510:	add	r0, fp, #16
   16514:	bl	12670 <elf32_fsize@plt+0xfb8>
   16518:	mov	r2, r4
   1651c:	mov	r1, r6
   16520:	mov	r3, r0
   16524:	mov	r0, #1
   16528:	bl	11580 <__printf_chk@plt>
   1652c:	movw	r3, #37252	; 0x9184
   16530:	movt	r3, #3
   16534:	ldr	r9, [r9]
   16538:	ldr	r8, [r5, #32]
   1653c:	ldr	r2, [r3, #4]
   16540:	str	r9, [sp, #16]
   16544:	add	r2, r2, #1
   16548:	str	r2, [r3, #4]
   1654c:	b	1600c <elf32_fsize@plt+0x4954>
   16550:	ldr	fp, [sp, #72]	; 0x48
   16554:	cmp	r8, fp
   16558:	bls	16b08 <elf32_fsize@plt+0x5450>
   1655c:	ldr	ip, [sp, #32]
   16560:	cmp	ip, #0
   16564:	beq	165e0 <elf32_fsize@plt+0x4f28>
   16568:	ldrd	r2, [ip, #56]	; 0x38
   1656c:	orrs	lr, r2, r3
   16570:	beq	165e0 <elf32_fsize@plt+0x4f28>
   16574:	ldrd	r0, [ip, #32]
   16578:	mov	r7, #0
   1657c:	bl	2042c <elf32_fsize@plt+0xed74>
   16580:	cmp	r7, r1
   16584:	cmpeq	r6, r0
   16588:	bls	165e0 <elf32_fsize@plt+0x4f28>
   1658c:	mov	r2, #5
   16590:	movw	r1, #14368	; 0x3820
   16594:	mov	r0, #0
   16598:	movt	r1, #2
   1659c:	bl	113b8 <dcgettext@plt>
   165a0:	ldr	r8, [sp, #84]	; 0x54
   165a4:	ldr	r1, [sp, #104]	; 0x68
   165a8:	mov	r4, r0
   165ac:	add	r0, r8, #16
   165b0:	bl	12670 <elf32_fsize@plt+0xfb8>
   165b4:	ldr	fp, [sp, #100]	; 0x64
   165b8:	mov	r1, r4
   165bc:	ldr	r2, [sp, #104]	; 0x68
   165c0:	str	fp, [sp]
   165c4:	mov	r3, r0
   165c8:	mov	r0, #1
   165cc:	bl	11580 <__printf_chk@plt>
   165d0:	ldr	ip, [sp, #92]	; 0x5c
   165d4:	ldr	r3, [ip, #4]
   165d8:	add	r3, r3, #1
   165dc:	str	r3, [ip, #4]
   165e0:	ldr	r8, [sp, #108]	; 0x6c
   165e4:	ldr	ip, [sp, #124]	; 0x7c
   165e8:	add	r8, r8, #1
   165ec:	ldr	fp, [sp, #100]	; 0x64
   165f0:	str	r8, [sp, #108]	; 0x6c
   165f4:	cmp	r8, ip
   165f8:	ldr	r8, [sp, #116]	; 0x74
   165fc:	add	fp, fp, #1
   16600:	str	fp, [sp, #100]	; 0x64
   16604:	add	r8, r8, #4
   16608:	str	r8, [sp, #116]	; 0x74
   1660c:	bcc	16260 <elf32_fsize@plt+0x4ba8>
   16610:	ldr	fp, [sp, #84]	; 0x54
   16614:	ldr	r4, [sp, #104]	; 0x68
   16618:	ldr	sl, [sp, #136]	; 0x88
   1661c:	ldr	ip, [sp, #48]	; 0x30
   16620:	ldr	r9, [sp, #140]	; 0x8c
   16624:	ldr	r0, [sp, #132]	; 0x84
   16628:	add	r1, r9, #16
   1662c:	lsl	r2, ip, #2
   16630:	bl	11388 <memcmp@plt>
   16634:	cmp	r0, #0
   16638:	bne	16d00 <elf32_fsize@plt+0x5648>
   1663c:	ldr	r2, [sp, #236]	; 0xec
   16640:	ldr	r3, [sl]
   16644:	cmp	r2, r3
   16648:	bne	16db8 <elf32_fsize@plt+0x5700>
   1664c:	ldr	r0, [sp, #132]	; 0x84
   16650:	add	sp, sp, #244	; 0xf4
   16654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16658:	b	11370 <free@plt>
   1665c:	ldr	ip, [sp, #112]	; 0x70
   16660:	ldr	r2, [sl, r0, lsl #2]
   16664:	lsr	r3, fp, ip
   16668:	and	ip, fp, #31
   1666c:	and	r3, r3, #31
   16670:	lsl	ip, r7, ip
   16674:	orr	r3, ip, r7, lsl r3
   16678:	orr	r3, r2, r3
   1667c:	str	r3, [sl, r0, lsl #2]
   16680:	b	16374 <elf32_fsize@plt+0x4cbc>
   16684:	ldr	r8, [sp, #56]	; 0x38
   16688:	ldr	fp, [sp, #40]	; 0x28
   1668c:	ldr	sl, [sp, #64]	; 0x40
   16690:	ldr	r9, [sp, #48]	; 0x30
   16694:	ldr	ip, [sp, #24]
   16698:	add	r3, r9, ip
   1669c:	add	r3, r3, #2
   166a0:	cmp	r5, r3
   166a4:	bcs	15e9c <elf32_fsize@plt+0x47e4>
   166a8:	ldr	r9, [sp, #16]
   166ac:	add	r6, r9, r5, lsl #2
   166b0:	cmp	r8, r6
   166b4:	bls	15e9c <elf32_fsize@plt+0x47e4>
   166b8:	movw	r3, #65534	; 0xfffe
   166bc:	movt	r3, #65535	; 0xffff
   166c0:	rsb	r3, ip, r3
   166c4:	add	fp, fp, #16
   166c8:	ldr	ip, [sp, #48]	; 0x30
   166cc:	add	r5, r3, r5
   166d0:	str	fp, [sp, #16]
   166d4:	movw	fp, #37252	; 0x9184
   166d8:	movt	fp, #3
   166dc:	str	sl, [sp, #24]
   166e0:	sub	r9, ip, #1
   166e4:	mov	sl, fp
   166e8:	b	16704 <elf32_fsize@plt+0x504c>
   166ec:	cmp	r5, r9
   166f0:	beq	1675c <elf32_fsize@plt+0x50a4>
   166f4:	add	r6, r6, #4
   166f8:	add	r5, r5, #1
   166fc:	cmp	r8, r6
   16700:	bls	1675c <elf32_fsize@plt+0x50a4>
   16704:	ldr	r3, [r6]
   16708:	cmp	r7, r3
   1670c:	bhi	166ec <elf32_fsize@plt+0x5034>
   16710:	mov	r2, #5
   16714:	movw	r1, #13684	; 0x3574
   16718:	mov	r0, #0
   1671c:	movt	r1, #2
   16720:	bl	113b8 <dcgettext@plt>
   16724:	mov	r1, r4
   16728:	mov	fp, r0
   1672c:	ldr	r0, [sp, #16]
   16730:	bl	12670 <elf32_fsize@plt+0xfb8>
   16734:	mov	r1, fp
   16738:	str	r5, [sp]
   1673c:	mov	r2, r4
   16740:	mov	r3, r0
   16744:	mov	r0, #1
   16748:	bl	11580 <__printf_chk@plt>
   1674c:	ldr	r3, [sl, #4]
   16750:	add	r3, r3, #1
   16754:	str	r3, [sl, #4]
   16758:	b	166ec <elf32_fsize@plt+0x5034>
   1675c:	ldr	sl, [sp, #24]
   16760:	b	15e9c <elf32_fsize@plt+0x47e4>
   16764:	ldr	r8, [r5, #32]
   16768:	ldr	r1, [r5, #36]	; 0x24
   1676c:	ldr	r7, [r9]
   16770:	lsr	r2, r8, #3
   16774:	orr	r2, r2, r1, lsl #29
   16778:	lsr	r3, r1, #3
   1677c:	ldrd	r0, [r7]
   16780:	cmp	r3, #0
   16784:	cmpeq	r2, #1
   16788:	strd	r0, [sp, #16]
   1678c:	ldrd	r0, [r7, #8]
   16790:	strd	r0, [sp, #48]	; 0x30
   16794:	bls	1695c <elf32_fsize@plt+0x52a4>
   16798:	subs	r2, r2, #2
   1679c:	ldrd	r0, [sp, #16]
   167a0:	sbc	r3, r3, #0
   167a4:	cmp	r1, r3
   167a8:	cmpeq	r0, r2
   167ac:	bhi	1695c <elf32_fsize@plt+0x52a4>
   167b0:	subs	r2, r2, r0
   167b4:	sbc	r3, r3, r1
   167b8:	ldrd	r0, [sp, #48]	; 0x30
   167bc:	cmp	r1, r3
   167c0:	cmpeq	r0, r2
   167c4:	bhi	1695c <elf32_fsize@plt+0x52a4>
   167c8:	ldr	ip, [sp, #32]
   167cc:	cmp	ip, #0
   167d0:	ldr	ip, [sp, #48]	; 0x30
   167d4:	str	ip, [sp, #56]	; 0x38
   167d8:	beq	16808 <elf32_fsize@plt+0x5150>
   167dc:	ldr	ip, [sp, #32]
   167e0:	ldrd	r2, [ip, #56]	; 0x38
   167e4:	orrs	r0, r2, r3
   167e8:	beq	16808 <elf32_fsize@plt+0x5150>
   167ec:	ldrd	r0, [ip, #32]
   167f0:	bl	2042c <elf32_fsize@plt+0xed74>
   167f4:	ldrd	r2, [sp, #48]	; 0x30
   167f8:	cmp	r3, r1
   167fc:	cmpeq	r2, r0
   16800:	str	r0, [sp, #56]	; 0x38
   16804:	bhi	16d50 <elf32_fsize@plt+0x5698>
   16808:	ldrd	r0, [sp, #16]
   1680c:	add	ip, r7, r8
   16810:	orrs	r1, r0, r1
   16814:	beq	16da8 <elf32_fsize@plt+0x56f0>
   16818:	add	r1, r7, #16
   1681c:	cmp	ip, r1
   16820:	bls	16da8 <elf32_fsize@plt+0x56f0>
   16824:	ldr	r8, [sp, #56]	; 0x38
   16828:	rsb	r2, r7, ip
   1682c:	sub	r2, r2, #17
   16830:	mov	r9, #0
   16834:	movw	r6, #37252	; 0x9184
   16838:	movt	r6, #3
   1683c:	strd	r8, [sp, #24]
   16840:	lsr	r2, r2, #3
   16844:	ldrd	r8, [sp, #16]
   16848:	mov	r5, r7
   1684c:	str	ip, [sp, #84]	; 0x54
   16850:	mov	r7, #0
   16854:	subs	r8, r8, #1
   16858:	str	fp, [sp, #88]	; 0x58
   1685c:	sbc	r9, r9, #0
   16860:	strd	r8, [sp, #64]	; 0x40
   16864:	mov	r8, #0
   16868:	mov	r9, #0
   1686c:	strd	r8, [sp, #72]	; 0x48
   16870:	mov	r8, r2
   16874:	mov	r9, #0
   16878:	strd	r8, [sp, #32]
   1687c:	ldrd	r2, [sp, #32]
   16880:	mov	ip, r6
   16884:	str	sl, [sp, #92]	; 0x5c
   16888:	mov	r8, #3
   1688c:	adds	r2, r2, #4
   16890:	mov	r9, #0
   16894:	adc	r3, r3, #0
   16898:	mov	r6, #0
   1689c:	strd	r2, [sp, #32]
   168a0:	add	r3, fp, #16
   168a4:	ldrd	sl, [sp, #64]	; 0x40
   168a8:	str	r3, [sp, #40]	; 0x28
   168ac:	b	168ec <elf32_fsize@plt+0x5234>
   168b0:	cmp	r7, fp
   168b4:	cmpeq	r6, sl
   168b8:	str	r8, [sp, #64]	; 0x40
   168bc:	beq	16b64 <elf32_fsize@plt+0x54ac>
   168c0:	adds	r2, r8, #1
   168c4:	ldrd	r0, [sp, #32]
   168c8:	adc	r3, r9, #0
   168cc:	adds	r6, r6, #1
   168d0:	adc	r7, r7, #0
   168d4:	cmp	r3, r1
   168d8:	cmpeq	r2, r0
   168dc:	add	r1, r5, r8, lsl #3
   168e0:	beq	16ca4 <elf32_fsize@plt+0x55ec>
   168e4:	mov	r8, r2
   168e8:	mov	r9, r3
   168ec:	ldrd	r2, [r1]
   168f0:	ldrd	r0, [sp, #24]
   168f4:	cmp	r3, r1
   168f8:	cmpeq	r2, r0
   168fc:	bcc	168b0 <elf32_fsize@plt+0x51f8>
   16900:	mov	r2, #5
   16904:	movw	r1, #13556	; 0x34f4
   16908:	mov	r0, #0
   1690c:	movt	r1, #2
   16910:	str	ip, [sp, #8]
   16914:	bl	113b8 <dcgettext@plt>
   16918:	mov	r1, r4
   1691c:	mov	r2, r0
   16920:	ldr	r0, [sp, #40]	; 0x28
   16924:	str	r2, [sp, #12]
   16928:	bl	12670 <elf32_fsize@plt+0xfb8>
   1692c:	ldr	r2, [sp, #12]
   16930:	str	r6, [sp]
   16934:	mov	r1, r2
   16938:	mov	r2, r4
   1693c:	mov	r3, r0
   16940:	mov	r0, #1
   16944:	bl	11580 <__printf_chk@plt>
   16948:	ldr	ip, [sp, #8]
   1694c:	ldr	r3, [ip, #4]
   16950:	add	r3, r3, #1
   16954:	str	r3, [ip, #4]
   16958:	b	168b0 <elf32_fsize@plt+0x51f8>
   1695c:	mov	r2, #5
   16960:	movw	r1, #13436	; 0x347c
   16964:	mov	r0, #0
   16968:	movt	r1, #2
   1696c:	bl	113b8 <dcgettext@plt>
   16970:	mov	r1, r4
   16974:	mov	r8, r0
   16978:	add	r0, fp, #16
   1697c:	bl	12670 <elf32_fsize@plt+0xfb8>
   16980:	ldrd	r6, [sp, #16]
   16984:	mov	r2, r4
   16988:	mov	r3, r0
   1698c:	ldrd	r0, [sp, #48]	; 0x30
   16990:	mov	r1, r8
   16994:	adds	r6, r6, r0
   16998:	ldr	r0, [r5, #32]
   1699c:	adds	r6, r6, #2
   169a0:	lsl	r6, r6, #3
   169a4:	stm	sp, {r0, r6}
   169a8:	mov	r0, #1
   169ac:	bl	11580 <__printf_chk@plt>
   169b0:	b	15e88 <elf32_fsize@plt+0x47d0>
   169b4:	movw	r1, #13996	; 0x36ac
   169b8:	movt	r1, #2
   169bc:	mov	r0, #0
   169c0:	mov	r2, #5
   169c4:	bl	113b8 <dcgettext@plt>
   169c8:	ldr	ip, [sp, #84]	; 0x54
   169cc:	ldr	r1, [sp, #104]	; 0x68
   169d0:	mov	r4, r0
   169d4:	add	r0, ip, #16
   169d8:	bl	12670 <elf32_fsize@plt+0xfb8>
   169dc:	ldr	r8, [sp, #100]	; 0x64
   169e0:	mov	r1, r4
   169e4:	ldr	r2, [sp, #104]	; 0x68
   169e8:	str	r8, [sp]
   169ec:	mov	r3, r0
   169f0:	mov	r0, #1
   169f4:	bl	11580 <__printf_chk@plt>
   169f8:	ldr	fp, [sp, #92]	; 0x5c
   169fc:	ldr	r3, [fp, #4]
   16a00:	add	r3, r3, #1
   16a04:	str	r3, [fp, #4]
   16a08:	b	165e0 <elf32_fsize@plt+0x4f28>
   16a0c:	mov	r2, #5
   16a10:	movw	r1, #13172	; 0x3374
   16a14:	movt	r1, #2
   16a18:	bl	113b8 <dcgettext@plt>
   16a1c:	mov	r1, r4
   16a20:	mov	r7, r0
   16a24:	add	r0, fp, #16
   16a28:	bl	12670 <elf32_fsize@plt+0xfb8>
   16a2c:	ldr	ip, [r5, #40]	; 0x28
   16a30:	mov	r1, r7
   16a34:	mov	r2, r4
   16a38:	str	ip, [sp]
   16a3c:	mov	r3, r0
   16a40:	mov	r0, #1
   16a44:	bl	11580 <__printf_chk@plt>
   16a48:	b	15cd0 <elf32_fsize@plt+0x4618>
   16a4c:	mov	r2, r6
   16a50:	movw	r1, #13436	; 0x347c
   16a54:	mov	r0, #0
   16a58:	movt	r1, #2
   16a5c:	bl	113b8 <dcgettext@plt>
   16a60:	mov	r1, r4
   16a64:	mov	r6, r0
   16a68:	add	r0, fp, #16
   16a6c:	bl	12670 <elf32_fsize@plt+0xfb8>
   16a70:	ldr	r9, [sp, #48]	; 0x30
   16a74:	ldr	ip, [r5, #32]
   16a78:	mov	r1, r6
   16a7c:	add	lr, r8, r9
   16a80:	mov	r2, r4
   16a84:	add	lr, lr, #2
   16a88:	str	ip, [sp]
   16a8c:	mov	r3, r0
   16a90:	lsl	r0, lr, #2
   16a94:	str	r0, [sp, #4]
   16a98:	mov	r0, #1
   16a9c:	bl	11580 <__printf_chk@plt>
   16aa0:	b	15e88 <elf32_fsize@plt+0x47d0>
   16aa4:	mov	r2, #5
   16aa8:	movw	r1, #14228	; 0x3794
   16aac:	mov	r0, #0
   16ab0:	movt	r1, #2
   16ab4:	ldr	r4, [sp, #104]	; 0x68
   16ab8:	ldr	fp, [sp, #84]	; 0x54
   16abc:	ldr	sl, [sp, #136]	; 0x88
   16ac0:	bl	113b8 <dcgettext@plt>
   16ac4:	mov	r1, r4
   16ac8:	mov	r5, r0
   16acc:	add	r0, fp, #16
   16ad0:	bl	12670 <elf32_fsize@plt+0xfb8>
   16ad4:	ldr	r8, [sp, #48]	; 0x30
   16ad8:	movw	ip, #65532	; 0xfffc
   16adc:	ldr	r9, [sp, #108]	; 0x6c
   16ae0:	movt	ip, #65535	; 0xffff
   16ae4:	mov	r1, r5
   16ae8:	rsb	ip, r8, ip
   16aec:	str	r6, [sp]
   16af0:	add	ip, ip, r9
   16af4:	mov	r2, r4
   16af8:	str	ip, [sp, #4]
   16afc:	mov	r3, r0
   16b00:	mov	r0, #1
   16b04:	b	16a9c <elf32_fsize@plt+0x53e4>
   16b08:	movw	r1, #14304	; 0x37e0
   16b0c:	mov	r0, #0
   16b10:	movt	r1, #2
   16b14:	b	169c0 <elf32_fsize@plt+0x5308>
   16b18:	mov	r2, #5
   16b1c:	movw	r1, #13848	; 0x3618
   16b20:	mov	r0, #0
   16b24:	movt	r1, #2
   16b28:	bl	113b8 <dcgettext@plt>
   16b2c:	mov	r1, r4
   16b30:	mov	r7, r0
   16b34:	add	r0, fp, #16
   16b38:	bl	12670 <elf32_fsize@plt+0xfb8>
   16b3c:	ldr	ip, [r5, #32]
   16b40:	mov	r1, r7
   16b44:	str	r6, [sp, #4]
   16b48:	mov	r2, r4
   16b4c:	str	ip, [sp]
   16b50:	mov	r3, r0
   16b54:	mov	r0, #1
   16b58:	b	16a9c <elf32_fsize@plt+0x53e4>
   16b5c:	mov	r5, #2
   16b60:	b	16690 <elf32_fsize@plt+0x4fd8>
   16b64:	ldr	ip, [sp, #84]	; 0x54
   16b68:	mov	r7, r5
   16b6c:	ldr	fp, [sp, #88]	; 0x58
   16b70:	mov	r5, r8
   16b74:	ldr	sl, [sp, #92]	; 0x5c
   16b78:	ldrd	r0, [sp, #48]	; 0x30
   16b7c:	ldrd	r2, [sp, #16]
   16b80:	adds	r2, r2, r0
   16b84:	adc	r3, r3, r1
   16b88:	adds	r0, r2, #2
   16b8c:	adc	r1, r3, #0
   16b90:	strd	r0, [sp, #48]	; 0x30
   16b94:	cmp	r1, r9
   16b98:	cmpeq	r0, r8
   16b9c:	bls	15e9c <elf32_fsize@plt+0x47e4>
   16ba0:	add	r7, r7, r5, lsl #3
   16ba4:	cmp	ip, r7
   16ba8:	bls	15e9c <elf32_fsize@plt+0x47e4>
   16bac:	ldrd	r0, [sp, #16]
   16bb0:	mvn	r2, #1
   16bb4:	mvn	r3, #0
   16bb8:	movw	r6, #37252	; 0x9184
   16bbc:	subs	r2, r2, r0
   16bc0:	sbc	r3, r3, r1
   16bc4:	strd	r2, [sp, #24]
   16bc8:	ldr	r2, [sp, #56]	; 0x38
   16bcc:	movt	r6, #3
   16bd0:	mov	r3, #0
   16bd4:	str	fp, [sp, #32]
   16bd8:	str	sl, [sp, #40]	; 0x28
   16bdc:	strd	r2, [sp, #16]
   16be0:	mov	r3, r6
   16be4:	mov	r6, r4
   16be8:	mov	r4, ip
   16bec:	mov	ip, r3
   16bf0:	b	16c1c <elf32_fsize@plt+0x5564>
   16bf4:	add	r5, r5, #1
   16bf8:	ldrd	sl, [sp, #48]	; 0x30
   16bfc:	mov	r9, #0
   16c00:	mov	r8, r5
   16c04:	cmp	fp, r9
   16c08:	cmpeq	sl, r8
   16c0c:	bls	16c9c <elf32_fsize@plt+0x55e4>
   16c10:	add	r7, r7, #8
   16c14:	cmp	r4, r7
   16c18:	bls	16c9c <elf32_fsize@plt+0x55e4>
   16c1c:	ldrd	r2, [r7]
   16c20:	ldrd	sl, [sp, #16]
   16c24:	cmp	r3, fp
   16c28:	cmpeq	r2, sl
   16c2c:	bcc	16bf4 <elf32_fsize@plt+0x553c>
   16c30:	mov	r2, #5
   16c34:	movw	r1, #13620	; 0x3534
   16c38:	mov	r0, #0
   16c3c:	movt	r1, #2
   16c40:	str	ip, [sp, #8]
   16c44:	bl	113b8 <dcgettext@plt>
   16c48:	ldr	sl, [sp, #32]
   16c4c:	mov	r1, r6
   16c50:	mov	r2, r0
   16c54:	add	r0, sl, #16
   16c58:	str	r2, [sp, #12]
   16c5c:	bl	12670 <elf32_fsize@plt+0xfb8>
   16c60:	ldr	r2, [sp, #12]
   16c64:	ldrd	sl, [sp, #24]
   16c68:	adds	r8, r8, sl
   16c6c:	mov	r1, r2
   16c70:	adc	r9, r9, fp
   16c74:	mov	r2, r6
   16c78:	strd	r8, [sp]
   16c7c:	mov	r3, r0
   16c80:	mov	r0, #1
   16c84:	bl	11580 <__printf_chk@plt>
   16c88:	ldr	ip, [sp, #8]
   16c8c:	ldr	r3, [ip, #4]
   16c90:	add	r3, r3, #1
   16c94:	str	r3, [ip, #4]
   16c98:	b	16bf4 <elf32_fsize@plt+0x553c>
   16c9c:	ldr	sl, [sp, #40]	; 0x28
   16ca0:	b	15e9c <elf32_fsize@plt+0x47e4>
   16ca4:	mov	r7, r5
   16ca8:	ldr	ip, [sp, #84]	; 0x54
   16cac:	ldr	r5, [sp, #64]	; 0x40
   16cb0:	ldr	fp, [sp, #88]	; 0x58
   16cb4:	ldr	sl, [sp, #92]	; 0x5c
   16cb8:	b	16b78 <elf32_fsize@plt+0x54c0>
   16cbc:	mov	r2, #5
   16cc0:	movw	r1, #13936	; 0x3670
   16cc4:	mov	r0, #0
   16cc8:	movt	r1, #2
   16ccc:	bl	113b8 <dcgettext@plt>
   16cd0:	mov	r1, r4
   16cd4:	mov	r5, r0
   16cd8:	add	r0, fp, #16
   16cdc:	bl	12670 <elf32_fsize@plt+0xfb8>
   16ce0:	ldr	r8, [sp, #112]	; 0x70
   16ce4:	mov	r1, r5
   16ce8:	mov	r2, r4
   16cec:	str	r8, [sp]
   16cf0:	mov	r3, r0
   16cf4:	mov	r0, #1
   16cf8:	bl	11580 <__printf_chk@plt>
   16cfc:	b	15e88 <elf32_fsize@plt+0x47d0>
   16d00:	mov	r2, #5
   16d04:	movw	r1, #14444	; 0x386c
   16d08:	mov	r0, #0
   16d0c:	movt	r1, #2
   16d10:	bl	113b8 <dcgettext@plt>
   16d14:	mov	r1, r4
   16d18:	mov	r5, r0
   16d1c:	add	r0, fp, #16
   16d20:	bl	12670 <elf32_fsize@plt+0xfb8>
   16d24:	mov	r2, r4
   16d28:	mov	r1, r5
   16d2c:	mov	r3, r0
   16d30:	mov	r0, #1
   16d34:	bl	11580 <__printf_chk@plt>
   16d38:	movw	r3, #37252	; 0x9184
   16d3c:	movt	r3, #3
   16d40:	ldr	r2, [r3, #4]
   16d44:	add	r2, r2, #1
   16d48:	str	r2, [r3, #4]
   16d4c:	b	1663c <elf32_fsize@plt+0x4f84>
   16d50:	mov	r2, r6
   16d54:	movw	r1, #13512	; 0x34c8
   16d58:	mov	r0, #0
   16d5c:	movt	r1, #2
   16d60:	bl	113b8 <dcgettext@plt>
   16d64:	mov	r1, r4
   16d68:	mov	r6, r0
   16d6c:	add	r0, fp, #16
   16d70:	bl	12670 <elf32_fsize@plt+0xfb8>
   16d74:	mov	r2, r4
   16d78:	mov	r1, r6
   16d7c:	mov	r3, r0
   16d80:	mov	r0, #1
   16d84:	bl	11580 <__printf_chk@plt>
   16d88:	movw	r3, #37252	; 0x9184
   16d8c:	movt	r3, #3
   16d90:	ldr	r7, [r9]
   16d94:	ldr	r8, [r5, #32]
   16d98:	ldr	r2, [r3, #4]
   16d9c:	add	r2, r2, #1
   16da0:	str	r2, [r3, #4]
   16da4:	b	16808 <elf32_fsize@plt+0x5150>
   16da8:	mov	r8, #2
   16dac:	mov	r9, #0
   16db0:	mov	r5, #2
   16db4:	b	16b78 <elf32_fsize@plt+0x54c0>
   16db8:	bl	113dc <__stack_chk_fail@plt>
   16dbc:	andeq	r1, r2, r4, lsl #9
   16dc0:	movw	ip, #37240	; 0x9178
   16dc4:	movt	ip, #3
   16dc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dcc:	cmp	r1, #1
   16dd0:	mov	r4, r1
   16dd4:	ldr	r1, [ip]
   16dd8:	sub	sp, sp, #196	; 0xc4
   16ddc:	mov	r7, r0
   16de0:	mov	r6, r2
   16de4:	mov	sl, r3
   16de8:	str	ip, [sp, #28]
   16dec:	str	r1, [sp, #188]	; 0xbc
   16df0:	beq	16e5c <elf32_fsize@plt+0x57a4>
   16df4:	mov	r2, #5
   16df8:	movw	r1, #14536	; 0x38c8
   16dfc:	mov	r0, #0
   16e00:	movt	r1, #2
   16e04:	bl	113b8 <dcgettext@plt>
   16e08:	mov	r1, sl
   16e0c:	mov	r4, r0
   16e10:	add	r0, r7, #16
   16e14:	bl	12670 <elf32_fsize@plt+0xfb8>
   16e18:	mov	r2, sl
   16e1c:	mov	r1, r4
   16e20:	mov	r3, r0
   16e24:	mov	r0, #1
   16e28:	bl	11580 <__printf_chk@plt>
   16e2c:	movw	r3, #37252	; 0x9184
   16e30:	movt	r3, #3
   16e34:	ldr	r2, [r3, #4]
   16e38:	add	r2, r2, #1
   16e3c:	str	r2, [r3, #4]
   16e40:	ldr	ip, [sp, #28]
   16e44:	ldr	r2, [sp, #188]	; 0xbc
   16e48:	ldr	r3, [ip]
   16e4c:	cmp	r2, r3
   16e50:	bne	17654 <elf32_fsize@plt+0x5f9c>
   16e54:	add	sp, sp, #196	; 0xc4
   16e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e5c:	ldr	r1, [r2, #40]	; 0x28
   16e60:	ldr	r0, [r0, #16]
   16e64:	bl	11628 <elf_getscn@plt>
   16e68:	add	r1, sp, #56	; 0x38
   16e6c:	mov	r8, r0
   16e70:	bl	1134c <gelf_getshdr@plt>
   16e74:	subs	fp, r0, #0
   16e78:	beq	175f8 <elf32_fsize@plt+0x5f40>
   16e7c:	ldr	r3, [fp, #4]
   16e80:	cmp	r3, #2
   16e84:	movweq	r9, #37252	; 0x9184
   16e88:	movteq	r9, #3
   16e8c:	beq	16edc <elf32_fsize@plt+0x5824>
   16e90:	mov	r2, #5
   16e94:	movw	r1, #14668	; 0x394c
   16e98:	mov	r0, #0
   16e9c:	movt	r1, #2
   16ea0:	bl	113b8 <dcgettext@plt>
   16ea4:	mov	r1, sl
   16ea8:	movw	r9, #37252	; 0x9184
   16eac:	movt	r9, #3
   16eb0:	mov	r5, r0
   16eb4:	add	r0, r7, #16
   16eb8:	bl	12670 <elf32_fsize@plt+0xfb8>
   16ebc:	mov	r1, r5
   16ec0:	mov	r2, sl
   16ec4:	mov	r3, r0
   16ec8:	mov	r0, r4
   16ecc:	bl	11580 <__printf_chk@plt>
   16ed0:	ldr	r3, [r9, #4]
   16ed4:	add	r3, r3, #1
   16ed8:	str	r3, [r9, #4]
   16edc:	ldrd	r0, [fp, #32]
   16ee0:	mov	r2, #1
   16ee4:	mov	r3, r2
   16ee8:	ldr	r4, [r6, #44]	; 0x2c
   16eec:	mov	r5, #0
   16ef0:	strd	r0, [sp, #32]
   16ef4:	mov	r1, #11
   16ef8:	ldr	r0, [r7, #16]
   16efc:	bl	11490 <gelf_fsize@plt>
   16f00:	mov	r3, #0
   16f04:	mov	r2, r0
   16f08:	ldrd	r0, [sp, #32]
   16f0c:	bl	2042c <elf32_fsize@plt+0xed74>
   16f10:	cmp	r5, r1
   16f14:	cmpeq	r4, r0
   16f18:	bcs	17288 <elf32_fsize@plt+0x5bd0>
   16f1c:	ldrd	r2, [r6, #8]
   16f20:	orrs	r1, r2, r3
   16f24:	bne	17240 <elf32_fsize@plt+0x5b88>
   16f28:	mov	r1, #0
   16f2c:	mov	r0, r8
   16f30:	bl	11484 <elf_getdata@plt>
   16f34:	ldr	r1, [r6, #44]	; 0x2c
   16f38:	add	r2, sp, #120	; 0x78
   16f3c:	bl	11418 <gelf_getsym@plt>
   16f40:	subs	r4, r0, #0
   16f44:	movweq	r1, #14836	; 0x39f4
   16f48:	moveq	r2, #5
   16f4c:	movteq	r1, #2
   16f50:	beq	172dc <elf32_fsize@plt+0x5c24>
   16f54:	ldr	r1, [fp, #40]	; 0x28
   16f58:	ldr	r2, [r4]
   16f5c:	ldr	r0, [r7, #16]
   16f60:	bl	11430 <elf_strptr@plt>
   16f64:	cmp	r0, #0
   16f68:	movweq	r1, #14892	; 0x3a2c
   16f6c:	moveq	r2, #5
   16f70:	movteq	r1, #2
   16f74:	beq	172dc <elf32_fsize@plt+0x5c24>
   16f78:	ldr	r1, [fp, #40]	; 0x28
   16f7c:	ldr	r2, [r4]
   16f80:	ldr	r0, [r7, #16]
   16f84:	bl	11430 <elf_strptr@plt>
   16f88:	ldrb	r0, [r0]
   16f8c:	cmp	r0, #0
   16f90:	beq	172d0 <elf32_fsize@plt+0x5c18>
   16f94:	ldrb	r3, [r9, #20]
   16f98:	movw	r4, #37252	; 0x9184
   16f9c:	movt	r4, #3
   16fa0:	cmp	r3, #0
   16fa4:	beq	17010 <elf32_fsize@plt+0x5958>
   16fa8:	mov	r1, #1
   16fac:	mov	r0, #12
   16fb0:	mov	r2, r1
   16fb4:	bl	116b8 <elf32_fsize@plt>
   16fb8:	ldrd	r2, [r6, #56]	; 0x38
   16fbc:	mov	r1, #0
   16fc0:	cmp	r3, r1
   16fc4:	cmpeq	r2, r0
   16fc8:	beq	17010 <elf32_fsize@plt+0x5958>
   16fcc:	mov	r2, #5
   16fd0:	movw	r1, #15016	; 0x3aa8
   16fd4:	mov	r0, #0
   16fd8:	movt	r1, #2
   16fdc:	bl	113b8 <dcgettext@plt>
   16fe0:	mov	r1, sl
   16fe4:	mov	r5, r0
   16fe8:	add	r0, r7, #16
   16fec:	bl	12670 <elf32_fsize@plt+0xfb8>
   16ff0:	mov	r1, r5
   16ff4:	mov	r2, sl
   16ff8:	mov	r3, r0
   16ffc:	mov	r0, #1
   17000:	bl	11580 <__printf_chk@plt>
   17004:	ldr	r3, [r4, #4]
   17008:	add	r3, r3, #1
   1700c:	str	r3, [r4, #4]
   17010:	mov	r1, sl
   17014:	ldr	r0, [r7, #16]
   17018:	bl	11628 <elf_getscn@plt>
   1701c:	mov	r1, #0
   17020:	bl	11484 <elf_getdata@plt>
   17024:	subs	fp, r0, #0
   17028:	beq	174a0 <elf32_fsize@plt+0x5de8>
   1702c:	ldr	r3, [fp]
   17030:	cmp	r3, #0
   17034:	beq	174a0 <elf32_fsize@plt+0x5de8>
   17038:	mov	r1, #1
   1703c:	mov	r0, #12
   17040:	mov	r2, r1
   17044:	bl	116b8 <elf32_fsize@plt>
   17048:	ldr	r4, [fp, #12]
   1704c:	mov	r1, r0
   17050:	mov	r6, r0
   17054:	mov	r0, r4
   17058:	bl	2040c <elf32_fsize@plt+0xed54>
   1705c:	cmp	r1, #0
   17060:	bne	17454 <elf32_fsize@plt+0x5d9c>
   17064:	cmp	r6, r4
   17068:	bhi	1740c <elf32_fsize@plt+0x5d54>
   1706c:	ldrb	r3, [r9, #20]
   17070:	movw	r5, #37252	; 0x9184
   17074:	movt	r5, #3
   17078:	cmp	r3, #0
   1707c:	beq	170a4 <elf32_fsize@plt+0x59ec>
   17080:	lsl	r3, r6, #1
   17084:	cmp	r3, r4
   17088:	movwhi	r1, #15236	; 0x3b84
   1708c:	movhi	r0, #0
   17090:	movthi	r1, #2
   17094:	bhi	17574 <elf32_fsize@plt+0x5ebc>
   17098:	add	r3, r3, r6
   1709c:	cmp	r3, r4
   170a0:	bhi	17568 <elf32_fsize@plt+0x5eb0>
   170a4:	mov	r2, r6
   170a8:	mov	r3, #4
   170ac:	ldr	r1, [fp]
   170b0:	add	r0, sp, #52	; 0x34
   170b4:	bl	11460 <__memcpy_chk@plt>
   170b8:	ldr	r3, [sp, #52]	; 0x34
   170bc:	bics	r2, r3, #1
   170c0:	bne	175b0 <elf32_fsize@plt+0x5ef8>
   170c4:	movw	ip, #37252	; 0x9184
   170c8:	str	r7, [sp, #44]	; 0x2c
   170cc:	movt	ip, #3
   170d0:	mov	r8, r6
   170d4:	str	ip, [sp, #32]
   170d8:	mov	r7, r6
   170dc:	str	sl, [sp, #40]	; 0x28
   170e0:	b	17148 <elf32_fsize@plt+0x5a90>
   170e4:	mov	r2, #5
   170e8:	movw	r1, #15396	; 0x3c24
   170ec:	mov	r0, #0
   170f0:	movt	r1, #2
   170f4:	bl	113b8 <dcgettext@plt>
   170f8:	ldr	ip, [sp, #44]	; 0x2c
   170fc:	ldr	r1, [sp, #40]	; 0x28
   17100:	mov	r5, r0
   17104:	add	r0, ip, #16
   17108:	bl	12670 <elf32_fsize@plt+0xfb8>
   1710c:	mov	r1, r7
   17110:	mov	r4, r0
   17114:	mov	r0, r8
   17118:	bl	20220 <elf32_fsize@plt+0xeb68>
   1711c:	mov	r3, r4
   17120:	mov	r1, r5
   17124:	ldr	r2, [sp, #40]	; 0x28
   17128:	str	r0, [sp]
   1712c:	mov	r0, #1
   17130:	bl	11580 <__printf_chk@plt>
   17134:	ldr	ip, [sp, #32]
   17138:	ldr	r3, [ip, #4]
   1713c:	add	r3, r3, #1
   17140:	str	r3, [ip, #4]
   17144:	mov	r8, sl
   17148:	ldr	r3, [fp, #12]
   1714c:	add	sl, r8, r7
   17150:	cmp	sl, r3
   17154:	bhi	16e40 <elf32_fsize@plt+0x5788>
   17158:	ldr	r1, [fp]
   1715c:	mov	r3, #4
   17160:	add	r0, sp, #52	; 0x34
   17164:	mov	r2, r7
   17168:	add	r1, r1, r8
   1716c:	bl	11460 <__memcpy_chk@plt>
   17170:	ldr	r6, [sp, #52]	; 0x34
   17174:	ldr	r3, [r9, #8]
   17178:	cmp	r6, r3
   1717c:	bhi	170e4 <elf32_fsize@plt+0x5a2c>
   17180:	ldr	ip, [sp, #44]	; 0x2c
   17184:	mov	r1, r6
   17188:	ldr	r0, [ip, #16]
   1718c:	bl	11628 <elf_getscn@plt>
   17190:	add	r1, sp, #120	; 0x78
   17194:	bl	1134c <gelf_getshdr@plt>
   17198:	subs	r4, r0, #0
   1719c:	beq	174f8 <elf32_fsize@plt+0x5e40>
   171a0:	ldr	r3, [r4, #4]
   171a4:	cmp	r3, #17
   171a8:	beq	17394 <elf32_fsize@plt+0x5cdc>
   171ac:	ldrd	r2, [r4, #8]
   171b0:	mov	r5, #0
   171b4:	mov	r4, #512	; 0x200
   171b8:	and	r5, r5, r3
   171bc:	and	r4, r4, r2
   171c0:	orrs	r0, r4, r5
   171c4:	beq	17314 <elf32_fsize@plt+0x5c5c>
   171c8:	ldr	r3, [r9, #8]
   171cc:	cmp	r6, r3
   171d0:	bcs	17144 <elf32_fsize@plt+0x5a8c>
   171d4:	ldr	ip, [sp, #32]
   171d8:	ldr	r2, [ip, #32]
   171dc:	ldr	r3, [r2, r6, lsl #2]
   171e0:	add	r3, r3, #1
   171e4:	str	r3, [r2, r6, lsl #2]
   171e8:	cmp	r3, #2
   171ec:	bne	17144 <elf32_fsize@plt+0x5a8c>
   171f0:	mov	r2, #5
   171f4:	movw	r1, #15680	; 0x3d40
   171f8:	mov	r0, #0
   171fc:	movt	r1, #2
   17200:	bl	113b8 <dcgettext@plt>
   17204:	ldr	ip, [sp, #44]	; 0x2c
   17208:	mov	r1, r6
   1720c:	mov	r4, r0
   17210:	add	r0, ip, #16
   17214:	bl	12670 <elf32_fsize@plt+0xfb8>
   17218:	mov	r1, r4
   1721c:	mov	r2, r6
   17220:	mov	r3, r0
   17224:	mov	r0, #1
   17228:	bl	11580 <__printf_chk@plt>
   1722c:	ldr	ip, [sp, #32]
   17230:	ldr	r3, [ip, #4]
   17234:	add	r3, r3, #1
   17238:	str	r3, [ip, #4]
   1723c:	b	17144 <elf32_fsize@plt+0x5a8c>
   17240:	mov	r2, #5
   17244:	movw	r1, #14796	; 0x39cc
   17248:	mov	r0, #0
   1724c:	movt	r1, #2
   17250:	bl	113b8 <dcgettext@plt>
   17254:	mov	r1, sl
   17258:	mov	r4, r0
   1725c:	add	r0, r7, #16
   17260:	bl	12670 <elf32_fsize@plt+0xfb8>
   17264:	mov	r1, r4
   17268:	mov	r2, sl
   1726c:	mov	r3, r0
   17270:	mov	r0, #1
   17274:	bl	11580 <__printf_chk@plt>
   17278:	ldr	r3, [r9, #4]
   1727c:	add	r3, r3, #1
   17280:	str	r3, [r9, #4]
   17284:	b	16f28 <elf32_fsize@plt+0x5870>
   17288:	mov	r2, #5
   1728c:	movw	r1, #14740	; 0x3994
   17290:	mov	r0, #0
   17294:	movt	r1, #2
   17298:	bl	113b8 <dcgettext@plt>
   1729c:	mov	r1, sl
   172a0:	mov	r4, r0
   172a4:	add	r0, r7, #16
   172a8:	bl	12670 <elf32_fsize@plt+0xfb8>
   172ac:	mov	r1, r4
   172b0:	mov	r2, sl
   172b4:	mov	r3, r0
   172b8:	mov	r0, #1
   172bc:	bl	11580 <__printf_chk@plt>
   172c0:	ldr	r3, [r9, #4]
   172c4:	add	r3, r3, #1
   172c8:	str	r3, [r9, #4]
   172cc:	b	16f1c <elf32_fsize@plt+0x5864>
   172d0:	movw	r1, #14952	; 0x3a68
   172d4:	movt	r1, #2
   172d8:	mov	r2, #5
   172dc:	bl	113b8 <dcgettext@plt>
   172e0:	mov	r1, sl
   172e4:	mov	r4, r0
   172e8:	add	r0, r7, #16
   172ec:	bl	12670 <elf32_fsize@plt+0xfb8>
   172f0:	mov	r1, r4
   172f4:	mov	r2, sl
   172f8:	mov	r3, r0
   172fc:	mov	r0, #1
   17300:	bl	11580 <__printf_chk@plt>
   17304:	ldr	r3, [r9, #4]
   17308:	add	r3, r3, #1
   1730c:	str	r3, [r9, #4]
   17310:	b	16f94 <elf32_fsize@plt+0x58dc>
   17314:	ldr	ip, [sp, #44]	; 0x2c
   17318:	mov	r2, #5
   1731c:	movw	r1, #15588	; 0x3ce4
   17320:	mov	r0, #0
   17324:	movt	r1, #2
   17328:	add	r4, ip, #16
   1732c:	bl	113b8 <dcgettext@plt>
   17330:	ldr	r1, [sp, #40]	; 0x28
   17334:	mov	r5, r0
   17338:	mov	r0, r4
   1733c:	bl	12670 <elf32_fsize@plt+0xfb8>
   17340:	mov	r1, r7
   17344:	mov	r3, r0
   17348:	mov	r0, r8
   1734c:	str	r3, [sp, #20]
   17350:	bl	20220 <elf32_fsize@plt+0xeb68>
   17354:	mov	r1, r6
   17358:	mov	r8, r0
   1735c:	mov	r0, r4
   17360:	bl	12670 <elf32_fsize@plt+0xfb8>
   17364:	ldr	r3, [sp, #20]
   17368:	str	r8, [sp]
   1736c:	mov	r1, r5
   17370:	str	r6, [sp, #4]
   17374:	ldr	r2, [sp, #40]	; 0x28
   17378:	str	r0, [sp, #8]
   1737c:	mov	r0, #1
   17380:	bl	11580 <__printf_chk@plt>
   17384:	ldr	r3, [r9, #4]
   17388:	add	r3, r3, #1
   1738c:	str	r3, [r9, #4]
   17390:	b	171c8 <elf32_fsize@plt+0x5b10>
   17394:	ldr	ip, [sp, #44]	; 0x2c
   17398:	mov	r2, #5
   1739c:	movw	r1, #15516	; 0x3c9c
   173a0:	mov	r0, #0
   173a4:	movt	r1, #2
   173a8:	add	r5, ip, #16
   173ac:	bl	113b8 <dcgettext@plt>
   173b0:	ldr	r1, [sp, #40]	; 0x28
   173b4:	mov	r2, r0
   173b8:	mov	r0, r5
   173bc:	str	r2, [sp, #24]
   173c0:	bl	12670 <elf32_fsize@plt+0xfb8>
   173c4:	mov	r1, r6
   173c8:	mov	r3, r0
   173cc:	mov	r0, r5
   173d0:	str	r3, [sp, #20]
   173d4:	bl	12670 <elf32_fsize@plt+0xfb8>
   173d8:	ldr	r2, [sp, #24]
   173dc:	ldr	r3, [sp, #20]
   173e0:	str	r6, [sp]
   173e4:	mov	r1, r2
   173e8:	ldr	r2, [sp, #40]	; 0x28
   173ec:	str	r0, [sp, #4]
   173f0:	mov	r0, #1
   173f4:	bl	11580 <__printf_chk@plt>
   173f8:	ldr	ip, [sp, #32]
   173fc:	ldr	r3, [ip, #4]
   17400:	add	r3, r3, #1
   17404:	str	r3, [ip, #4]
   17408:	b	171ac <elf32_fsize@plt+0x5af4>
   1740c:	mov	r2, #5
   17410:	movw	r1, #15180	; 0x3b4c
   17414:	mov	r0, #0
   17418:	movt	r1, #2
   1741c:	bl	113b8 <dcgettext@plt>
   17420:	mov	r1, sl
   17424:	mov	r4, r0
   17428:	add	r0, r7, #16
   1742c:	bl	12670 <elf32_fsize@plt+0xfb8>
   17430:	mov	r1, r4
   17434:	mov	r2, sl
   17438:	mov	r3, r0
   1743c:	mov	r0, #1
   17440:	bl	11580 <__printf_chk@plt>
   17444:	ldr	r3, [r9, #4]
   17448:	add	r3, r3, #1
   1744c:	str	r3, [r9, #4]
   17450:	b	16e40 <elf32_fsize@plt+0x5788>
   17454:	mov	r2, #5
   17458:	movw	r1, #15108	; 0x3b04
   1745c:	mov	r0, #0
   17460:	movt	r1, #2
   17464:	bl	113b8 <dcgettext@plt>
   17468:	mov	r1, sl
   1746c:	mov	r4, r0
   17470:	add	r0, r7, #16
   17474:	bl	12670 <elf32_fsize@plt+0xfb8>
   17478:	mov	r1, r4
   1747c:	mov	r2, sl
   17480:	mov	r3, r0
   17484:	mov	r0, #1
   17488:	bl	11580 <__printf_chk@plt>
   1748c:	ldr	r3, [r9, #4]
   17490:	ldr	r4, [fp, #12]
   17494:	add	r3, r3, #1
   17498:	str	r3, [r9, #4]
   1749c:	b	17064 <elf32_fsize@plt+0x59ac>
   174a0:	mov	r2, #5
   174a4:	movw	r1, #15064	; 0x3ad8
   174a8:	mov	r0, #0
   174ac:	movt	r1, #2
   174b0:	bl	113b8 <dcgettext@plt>
   174b4:	mov	r1, sl
   174b8:	mov	r5, r0
   174bc:	add	r0, r7, #16
   174c0:	bl	12670 <elf32_fsize@plt+0xfb8>
   174c4:	mov	r4, r0
   174c8:	mvn	r0, #0
   174cc:	bl	11520 <elf_errmsg@plt>
   174d0:	mov	r3, r4
   174d4:	mov	r1, r5
   174d8:	mov	r2, sl
   174dc:	str	r0, [sp]
   174e0:	mov	r0, #1
   174e4:	bl	11580 <__printf_chk@plt>
   174e8:	ldr	r3, [r9, #4]
   174ec:	add	r3, r3, #1
   174f0:	str	r3, [r9, #4]
   174f4:	b	16e40 <elf32_fsize@plt+0x5788>
   174f8:	mov	r2, #5
   174fc:	movw	r1, #15448	; 0x3c58
   17500:	movt	r1, #2
   17504:	bl	113b8 <dcgettext@plt>
   17508:	ldr	ip, [sp, #44]	; 0x2c
   1750c:	ldr	r1, [sp, #40]	; 0x28
   17510:	mov	r5, r0
   17514:	add	r0, ip, #16
   17518:	bl	12670 <elf32_fsize@plt+0xfb8>
   1751c:	mov	r1, r7
   17520:	mov	r4, r0
   17524:	mov	r0, r8
   17528:	bl	20220 <elf32_fsize@plt+0xeb68>
   1752c:	mov	r8, r0
   17530:	mvn	r0, #0
   17534:	bl	11520 <elf_errmsg@plt>
   17538:	mov	r3, r4
   1753c:	str	r8, [sp]
   17540:	mov	r1, r5
   17544:	ldr	r2, [sp, #40]	; 0x28
   17548:	str	r0, [sp, #4]
   1754c:	mov	r0, #1
   17550:	bl	11580 <__printf_chk@plt>
   17554:	ldr	ip, [sp, #32]
   17558:	ldr	r3, [ip, #4]
   1755c:	add	r3, r3, #1
   17560:	str	r3, [ip, #4]
   17564:	b	171c8 <elf32_fsize@plt+0x5b10>
   17568:	movw	r1, #15288	; 0x3bb8
   1756c:	movt	r1, #2
   17570:	mov	r0, #0
   17574:	mov	r2, #5
   17578:	bl	113b8 <dcgettext@plt>
   1757c:	mov	r1, sl
   17580:	mov	r4, r0
   17584:	add	r0, r7, #16
   17588:	bl	12670 <elf32_fsize@plt+0xfb8>
   1758c:	mov	r1, r4
   17590:	mov	r2, sl
   17594:	mov	r3, r0
   17598:	mov	r0, #1
   1759c:	bl	11580 <__printf_chk@plt>
   175a0:	ldr	r3, [r5, #4]
   175a4:	add	r3, r3, #1
   175a8:	str	r3, [r5, #4]
   175ac:	b	170a4 <elf32_fsize@plt+0x59ec>
   175b0:	mov	r2, #5
   175b4:	movw	r1, #15344	; 0x3bf0
   175b8:	mov	r0, #0
   175bc:	movt	r1, #2
   175c0:	bl	113b8 <dcgettext@plt>
   175c4:	mov	r1, sl
   175c8:	mov	r4, r0
   175cc:	add	r0, r7, #16
   175d0:	bl	12670 <elf32_fsize@plt+0xfb8>
   175d4:	mov	r1, r4
   175d8:	mov	r2, sl
   175dc:	mov	r3, r0
   175e0:	mov	r0, #1
   175e4:	bl	11580 <__printf_chk@plt>
   175e8:	ldr	r3, [r9, #4]
   175ec:	add	r3, r3, #1
   175f0:	str	r3, [r9, #4]
   175f4:	b	170c4 <elf32_fsize@plt+0x5a0c>
   175f8:	mov	r2, #5
   175fc:	movw	r1, #14616	; 0x3918
   17600:	movt	r1, #2
   17604:	movw	r9, #37252	; 0x9184
   17608:	bl	113b8 <dcgettext@plt>
   1760c:	mov	r1, sl
   17610:	movt	r9, #3
   17614:	mov	r6, r0
   17618:	add	r0, r7, #16
   1761c:	bl	12670 <elf32_fsize@plt+0xfb8>
   17620:	mov	r5, r0
   17624:	mvn	r0, #0
   17628:	bl	11520 <elf_errmsg@plt>
   1762c:	mov	r3, r5
   17630:	mov	r1, r6
   17634:	mov	r2, sl
   17638:	str	r0, [sp]
   1763c:	mov	r0, r4
   17640:	bl	11580 <__printf_chk@plt>
   17644:	ldr	r3, [r9, #4]
   17648:	add	r3, r3, #1
   1764c:	str	r3, [r9, #4]
   17650:	b	17010 <elf32_fsize@plt+0x5958>
   17654:	bl	113dc <__stack_chk_fail@plt>
   17658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1765c:	sub	sp, sp, #284	; 0x11c
   17660:	movw	r9, #37252	; 0x9184
   17664:	movw	ip, #37240	; 0x9178
   17668:	movt	r9, #3
   1766c:	movt	ip, #3
   17670:	str	ip, [sp, #52]	; 0x34
   17674:	mov	r7, r0
   17678:	ldr	lr, [sp, #52]	; 0x34
   1767c:	mov	r4, r2
   17680:	ldr	ip, [r9, #36]	; 0x24
   17684:	str	r1, [sp, #32]
   17688:	ldr	r0, [lr]
   1768c:	add	r1, ip, #1
   17690:	cmp	r1, #2
   17694:	str	r3, [sp, #44]	; 0x2c
   17698:	str	r1, [r9, #36]	; 0x24
   1769c:	str	r0, [sp, #276]	; 0x114
   176a0:	beq	17ce0 <elf32_fsize@plt+0x6628>
   176a4:	ldr	ip, [sp, #32]
   176a8:	ldr	r0, [r7, #16]
   176ac:	ldr	r1, [ip]
   176b0:	bl	11628 <elf_getscn@plt>
   176b4:	add	r1, sp, #144	; 0x90
   176b8:	bl	1134c <gelf_getshdr@plt>
   176bc:	cmp	r0, #0
   176c0:	beq	17b24 <elf32_fsize@plt+0x646c>
   176c4:	ldr	r3, [r0, #4]
   176c8:	cmp	r3, #3
   176cc:	beq	17714 <elf32_fsize@plt+0x605c>
   176d0:	mov	r2, #5
   176d4:	movw	r1, #15796	; 0x3db4
   176d8:	mov	r0, #0
   176dc:	movt	r1, #2
   176e0:	bl	113b8 <dcgettext@plt>
   176e4:	ldr	r1, [sp, #44]	; 0x2c
   176e8:	mov	r5, r0
   176ec:	add	r0, r7, #16
   176f0:	bl	12670 <elf32_fsize@plt+0xfb8>
   176f4:	mov	r1, r5
   176f8:	ldr	r2, [sp, #44]	; 0x2c
   176fc:	mov	r3, r0
   17700:	mov	r0, #1
   17704:	bl	11580 <__printf_chk@plt>
   17708:	ldr	r3, [r9, #4]
   1770c:	add	r3, r3, #1
   17710:	str	r3, [r9, #4]
   17714:	ldr	r1, [sp, #44]	; 0x2c
   17718:	ldr	r0, [r7, #16]
   1771c:	bl	11628 <elf_getscn@plt>
   17720:	mov	r1, #0
   17724:	bl	11484 <elf_getdata@plt>
   17728:	subs	ip, r0, #0
   1772c:	str	ip, [sp, #28]
   17730:	beq	17d74 <elf32_fsize@plt+0x66bc>
   17734:	ldr	r4, [r4]
   17738:	cmp	r4, #0
   1773c:	str	r4, [sp, #24]
   17740:	beq	17b24 <elf32_fsize@plt+0x646c>
   17744:	mov	ip, #0
   17748:	str	ip, [sp, #48]	; 0x30
   1774c:	ldr	ip, [sp, #24]
   17750:	add	r2, sp, #72	; 0x48
   17754:	ldr	r0, [sp, #28]
   17758:	ldr	r1, [sp, #48]	; 0x30
   1775c:	sub	ip, ip, #1
   17760:	str	ip, [sp, #24]
   17764:	bl	113c4 <gelf_getverneed@plt>
   17768:	cmp	r0, #0
   1776c:	str	r0, [sp, #20]
   17770:	beq	17b24 <elf32_fsize@plt+0x646c>
   17774:	ldrh	r3, [r0]
   17778:	ldr	r6, [r0, #8]
   1777c:	ldr	ip, [sp, #48]	; 0x30
   17780:	cmp	r3, #1
   17784:	add	r6, ip, r6
   17788:	beq	177e4 <elf32_fsize@plt+0x612c>
   1778c:	mov	r2, #5
   17790:	movw	r1, #15856	; 0x3df0
   17794:	mov	r0, #0
   17798:	movt	r1, #2
   1779c:	bl	113b8 <dcgettext@plt>
   177a0:	ldr	r1, [sp, #44]	; 0x2c
   177a4:	mov	r4, r0
   177a8:	add	r0, r7, #16
   177ac:	bl	12670 <elf32_fsize@plt+0xfb8>
   177b0:	ldr	ip, [sp, #24]
   177b4:	ldr	lr, [sp, #20]
   177b8:	mov	r1, r4
   177bc:	ldr	r2, [sp, #44]	; 0x2c
   177c0:	str	ip, [sp]
   177c4:	ldrh	ip, [lr]
   177c8:	str	ip, [sp, #4]
   177cc:	mov	r3, r0
   177d0:	mov	r0, #1
   177d4:	bl	11580 <__printf_chk@plt>
   177d8:	ldr	r3, [r9, #4]
   177dc:	add	r3, r3, #1
   177e0:	str	r3, [r9, #4]
   177e4:	ldr	ip, [sp, #20]
   177e8:	ldrh	r3, [ip, #2]
   177ec:	cmp	r3, #0
   177f0:	beq	17814 <elf32_fsize@plt+0x615c>
   177f4:	mov	r2, #1
   177f8:	ldr	r0, [r7, #16]
   177fc:	mov	r3, r2
   17800:	mov	r1, #17
   17804:	ldr	r4, [ip, #8]
   17808:	bl	11490 <gelf_fsize@plt>
   1780c:	cmp	r4, r0
   17810:	bcc	17d60 <elf32_fsize@plt+0x66a8>
   17814:	ldr	ip, [sp, #32]
   17818:	ldr	r0, [r7, #16]
   1781c:	ldr	r1, [ip]
   17820:	ldr	ip, [sp, #20]
   17824:	ldr	r2, [ip, #4]
   17828:	bl	11430 <elf_strptr@plt>
   1782c:	subs	ip, r0, #0
   17830:	str	ip, [sp, #36]	; 0x24
   17834:	beq	17c8c <elf32_fsize@plt+0x65d4>
   17838:	ldr	r3, [r9, #16]
   1783c:	ldr	r8, [r7, #16]
   17840:	cmp	r3, #0
   17844:	beq	178d4 <elf32_fsize@plt+0x621c>
   17848:	mov	r4, #0
   1784c:	mov	r0, r8
   17850:	mov	r1, r4
   17854:	add	r2, sp, #88	; 0x58
   17858:	bl	113f4 <gelf_getphdr@plt>
   1785c:	cmp	r0, #0
   17860:	beq	17870 <elf32_fsize@plt+0x61b8>
   17864:	ldr	r3, [r0]
   17868:	cmp	r3, #2
   1786c:	beq	17e44 <elf32_fsize@plt+0x678c>
   17870:	ldr	r3, [r9, #16]
   17874:	add	r4, r4, #1
   17878:	cmp	r4, r3
   1787c:	bcc	1784c <elf32_fsize@plt+0x6194>
   17880:	cmp	r3, r4
   17884:	mov	r2, r0
   17888:	beq	178d4 <elf32_fsize@plt+0x621c>
   1788c:	cmp	r0, #0
   17890:	beq	17e24 <elf32_fsize@plt+0x676c>
   17894:	ldrd	r2, [r2, #8]
   17898:	mov	r0, r8
   1789c:	bl	114a8 <gelf_offscn@plt>
   178a0:	add	r1, sp, #208	; 0xd0
   178a4:	mov	r4, r0
   178a8:	bl	1134c <gelf_getshdr@plt>
   178ac:	mov	r1, #0
   178b0:	mov	fp, r0
   178b4:	mov	r0, r4
   178b8:	bl	11484 <elf_getdata@plt>
   178bc:	cmp	fp, #0
   178c0:	mov	r4, r0
   178c4:	beq	178d4 <elf32_fsize@plt+0x621c>
   178c8:	ldr	r3, [fp, #4]
   178cc:	cmp	r3, #6
   178d0:	beq	17b6c <elf32_fsize@plt+0x64b4>
   178d4:	mov	r2, #5
   178d8:	movw	r1, #16056	; 0x3eb8
   178dc:	mov	r0, #0
   178e0:	movt	r1, #2
   178e4:	bl	113b8 <dcgettext@plt>
   178e8:	ldr	r1, [sp, #44]	; 0x2c
   178ec:	mov	r4, r0
   178f0:	add	r0, r7, #16
   178f4:	bl	12670 <elf32_fsize@plt+0xfb8>
   178f8:	ldr	ip, [sp, #24]
   178fc:	mov	r1, r4
   17900:	ldr	r2, [sp, #44]	; 0x2c
   17904:	str	ip, [sp]
   17908:	mov	r3, r0
   1790c:	mov	r0, #1
   17910:	bl	11580 <__printf_chk@plt>
   17914:	ldr	r3, [r9, #4]
   17918:	add	r3, r3, #1
   1791c:	str	r3, [r9, #4]
   17920:	ldr	ip, [sp, #20]
   17924:	ldrh	r5, [ip, #2]
   17928:	subs	r5, r5, #1
   1792c:	bcc	17b10 <elf32_fsize@plt+0x6458>
   17930:	add	ip, r7, #16
   17934:	ldr	sl, [sp, #44]	; 0x2c
   17938:	str	ip, [sp, #40]	; 0x28
   1793c:	b	17a60 <elf32_fsize@plt+0x63a8>
   17940:	ldr	ip, [sp, #32]
   17944:	ldr	r0, [r7, #16]
   17948:	ldr	r2, [r4, #8]
   1794c:	ldr	r1, [ip]
   17950:	bl	11430 <elf_strptr@plt>
   17954:	subs	r8, r0, #0
   17958:	beq	17c1c <elf32_fsize@plt+0x6564>
   1795c:	bl	11400 <elf_hash@plt>
   17960:	ldr	r3, [r4]
   17964:	cmp	r0, r3
   17968:	mov	fp, r0
   1796c:	beq	179e0 <elf32_fsize@plt+0x6328>
   17970:	mov	r2, #5
   17974:	movw	r1, #16268	; 0x3f8c
   17978:	mov	r0, #0
   1797c:	movt	r1, #2
   17980:	bl	113b8 <dcgettext@plt>
   17984:	mov	r1, sl
   17988:	mov	r2, r0
   1798c:	ldr	r0, [sp, #40]	; 0x28
   17990:	str	r2, [sp, #16]
   17994:	bl	12670 <elf32_fsize@plt+0xfb8>
   17998:	ldr	ip, [sp, #20]
   1799c:	ldr	r2, [sp, #16]
   179a0:	ldrh	lr, [ip, #2]
   179a4:	ldr	ip, [sp, #24]
   179a8:	mov	r1, r2
   179ac:	str	fp, [sp, #8]
   179b0:	rsb	r2, r5, lr
   179b4:	str	r2, [sp]
   179b8:	mov	r2, sl
   179bc:	str	ip, [sp, #4]
   179c0:	ldr	ip, [r4]
   179c4:	str	ip, [sp, #12]
   179c8:	mov	r3, r0
   179cc:	mov	r0, #1
   179d0:	bl	11580 <__printf_chk@plt>
   179d4:	ldr	r3, [r9, #4]
   179d8:	add	r3, r3, #1
   179dc:	str	r3, [r9, #4]
   179e0:	ldr	r0, [sp, #36]	; 0x24
   179e4:	mov	r1, r8
   179e8:	ldrh	r2, [r4, #6]
   179ec:	mov	r3, #1
   179f0:	bl	11a5c <elf32_fsize@plt+0x3a4>
   179f4:	cmp	r0, #0
   179f8:	bne	17db8 <elf32_fsize@plt+0x6700>
   179fc:	ldr	r8, [r4, #12]
   17a00:	mov	r2, #1
   17a04:	ldr	r0, [r7, #16]
   17a08:	mov	r3, r2
   17a0c:	cmp	r8, #0
   17a10:	mov	r1, #18
   17a14:	bne	17a20 <elf32_fsize@plt+0x6368>
   17a18:	cmp	r5, #0
   17a1c:	beq	17ae8 <elf32_fsize@plt+0x6430>
   17a20:	bl	11490 <gelf_fsize@plt>
   17a24:	cmp	r8, r0
   17a28:	bcc	17c78 <elf32_fsize@plt+0x65c0>
   17a2c:	mov	r2, #1
   17a30:	ldr	r0, [r7, #16]
   17a34:	mov	r3, r2
   17a38:	mov	r1, #18
   17a3c:	ldr	r8, [r4, #12]
   17a40:	bl	11490 <gelf_fsize@plt>
   17a44:	cmp	r8, r0
   17a48:	bls	17aec <elf32_fsize@plt+0x6434>
   17a4c:	sub	r5, r5, #1
   17a50:	ldr	r0, [r4, #12]
   17a54:	cmn	r5, #1
   17a58:	add	r6, r6, r0
   17a5c:	beq	17b10 <elf32_fsize@plt+0x6458>
   17a60:	ldr	r0, [sp, #28]
   17a64:	mov	r1, r6
   17a68:	add	r2, sp, #208	; 0xd0
   17a6c:	bl	11340 <gelf_getvernaux@plt>
   17a70:	subs	r4, r0, #0
   17a74:	beq	17b10 <elf32_fsize@plt+0x6458>
   17a78:	ldrh	r3, [r4, #4]
   17a7c:	bic	r3, r3, #2
   17a80:	cmp	r3, #0
   17a84:	beq	17940 <elf32_fsize@plt+0x6288>
   17a88:	mov	r2, #5
   17a8c:	movw	r1, #16116	; 0x3ef4
   17a90:	mov	r0, #0
   17a94:	movt	r1, #2
   17a98:	bl	113b8 <dcgettext@plt>
   17a9c:	mov	r1, sl
   17aa0:	mov	r8, r0
   17aa4:	ldr	r0, [sp, #40]	; 0x28
   17aa8:	bl	12670 <elf32_fsize@plt+0xfb8>
   17aac:	ldr	ip, [sp, #20]
   17ab0:	mov	r1, r8
   17ab4:	ldrh	r2, [ip, #2]
   17ab8:	ldr	ip, [sp, #24]
   17abc:	rsb	r2, r5, r2
   17ac0:	str	r2, [sp]
   17ac4:	mov	r2, sl
   17ac8:	str	ip, [sp, #4]
   17acc:	mov	r3, r0
   17ad0:	mov	r0, #1
   17ad4:	bl	11580 <__printf_chk@plt>
   17ad8:	ldr	r3, [r9, #4]
   17adc:	add	r3, r3, #1
   17ae0:	str	r3, [r9, #4]
   17ae4:	b	17940 <elf32_fsize@plt+0x6288>
   17ae8:	bl	11490 <gelf_fsize@plt>
   17aec:	mov	r2, #1
   17af0:	ldr	r0, [r7, #16]
   17af4:	mov	r3, r2
   17af8:	mov	r1, #18
   17afc:	bl	11490 <gelf_fsize@plt>
   17b00:	sub	r5, r5, #1
   17b04:	cmn	r5, #1
   17b08:	add	r6, r6, r0
   17b0c:	bne	17a60 <elf32_fsize@plt+0x63a8>
   17b10:	ldr	ip, [sp, #20]
   17b14:	ldr	r0, [ip, #12]
   17b18:	ldr	ip, [sp, #24]
   17b1c:	orrs	ip, ip, r0
   17b20:	bne	17b40 <elf32_fsize@plt+0x6488>
   17b24:	ldr	ip, [sp, #52]	; 0x34
   17b28:	ldr	r2, [sp, #276]	; 0x114
   17b2c:	ldr	r3, [ip]
   17b30:	cmp	r2, r3
   17b34:	bne	17e40 <elf32_fsize@plt+0x6788>
   17b38:	add	sp, sp, #284	; 0x11c
   17b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b40:	ldr	ip, [sp, #48]	; 0x30
   17b44:	add	ip, ip, r0
   17b48:	str	ip, [sp, #48]	; 0x30
   17b4c:	cmp	ip, r6
   17b50:	bcc	17d10 <elf32_fsize@plt+0x6658>
   17b54:	cmp	r0, #0
   17b58:	ldr	ip, [sp, #24]
   17b5c:	beq	17e58 <elf32_fsize@plt+0x67a0>
   17b60:	cmp	ip, #0
   17b64:	bne	1774c <elf32_fsize@plt+0x6094>
   17b68:	b	17b24 <elf32_fsize@plt+0x646c>
   17b6c:	cmp	r0, #0
   17b70:	beq	178d4 <elf32_fsize@plt+0x621c>
   17b74:	ldrd	r2, [fp, #56]	; 0x38
   17b78:	orrs	lr, r2, r3
   17b7c:	beq	178d4 <elf32_fsize@plt+0x621c>
   17b80:	ldrd	r0, [fp, #32]
   17b84:	bl	2042c <elf32_fsize@plt+0xed74>
   17b88:	orrs	r2, r0, r1
   17b8c:	beq	178d4 <elf32_fsize@plt+0x621c>
   17b90:	str	r6, [sp, #40]	; 0x28
   17b94:	mov	sl, #0
   17b98:	mov	r6, r4
   17b9c:	b	17bc4 <elf32_fsize@plt+0x650c>
   17ba0:	ldrd	r0, [fp, #32]
   17ba4:	add	sl, sl, #1
   17ba8:	ldrd	r2, [fp, #56]	; 0x38
   17bac:	mov	r5, #0
   17bb0:	bl	2042c <elf32_fsize@plt+0xed74>
   17bb4:	mov	r4, sl
   17bb8:	cmp	r5, r1
   17bbc:	cmpeq	r4, r0
   17bc0:	bcs	17cd8 <elf32_fsize@plt+0x6620>
   17bc4:	mov	r0, r6
   17bc8:	mov	r1, sl
   17bcc:	add	r2, sp, #56	; 0x38
   17bd0:	bl	115f8 <gelf_getdyn@plt>
   17bd4:	cmp	r0, #0
   17bd8:	beq	17ba0 <elf32_fsize@plt+0x64e8>
   17bdc:	ldrd	r2, [r0]
   17be0:	cmp	r3, #0
   17be4:	cmpeq	r2, #1
   17be8:	bne	17ba0 <elf32_fsize@plt+0x64e8>
   17bec:	ldr	r2, [r0, #8]
   17bf0:	mov	r0, r8
   17bf4:	ldr	r1, [fp, #40]	; 0x28
   17bf8:	bl	11430 <elf_strptr@plt>
   17bfc:	cmp	r0, #0
   17c00:	beq	17ba0 <elf32_fsize@plt+0x64e8>
   17c04:	ldr	r1, [sp, #36]	; 0x24
   17c08:	bl	11358 <strcmp@plt>
   17c0c:	cmp	r0, #0
   17c10:	bne	17ba0 <elf32_fsize@plt+0x64e8>
   17c14:	ldr	r6, [sp, #40]	; 0x28
   17c18:	b	17920 <elf32_fsize@plt+0x6268>
   17c1c:	movw	r1, #16188	; 0x3f3c
   17c20:	movt	r1, #2
   17c24:	mov	r2, #5
   17c28:	bl	113b8 <dcgettext@plt>
   17c2c:	ldr	r1, [sp, #44]	; 0x2c
   17c30:	mov	r4, r0
   17c34:	add	r0, r7, #16
   17c38:	bl	12670 <elf32_fsize@plt+0xfb8>
   17c3c:	ldr	ip, [sp, #20]
   17c40:	mov	r1, r4
   17c44:	ldrh	r2, [ip, #2]
   17c48:	ldr	ip, [sp, #24]
   17c4c:	rsb	r5, r5, r2
   17c50:	ldr	r2, [sp, #44]	; 0x2c
   17c54:	str	r5, [sp]
   17c58:	str	ip, [sp, #4]
   17c5c:	mov	r3, r0
   17c60:	mov	r0, #1
   17c64:	bl	11580 <__printf_chk@plt>
   17c68:	ldr	r3, [r9, #4]
   17c6c:	add	r3, r3, #1
   17c70:	str	r3, [r9, #4]
   17c74:	b	17b10 <elf32_fsize@plt+0x6458>
   17c78:	movw	r1, #16444	; 0x403c
   17c7c:	mov	r0, #0
   17c80:	movt	r1, #2
   17c84:	mov	r2, #5
   17c88:	b	17c28 <elf32_fsize@plt+0x6570>
   17c8c:	mov	r2, #5
   17c90:	movw	r1, #15976	; 0x3e68
   17c94:	movt	r1, #2
   17c98:	bl	113b8 <dcgettext@plt>
   17c9c:	ldr	r1, [sp, #44]	; 0x2c
   17ca0:	mov	r4, r0
   17ca4:	add	r0, r7, #16
   17ca8:	bl	12670 <elf32_fsize@plt+0xfb8>
   17cac:	ldr	ip, [sp, #24]
   17cb0:	mov	r1, r4
   17cb4:	ldr	r2, [sp, #44]	; 0x2c
   17cb8:	str	ip, [sp]
   17cbc:	mov	r3, r0
   17cc0:	mov	r0, #1
   17cc4:	bl	11580 <__printf_chk@plt>
   17cc8:	ldr	r3, [r9, #4]
   17ccc:	add	r3, r3, #1
   17cd0:	str	r3, [r9, #4]
   17cd4:	b	17b10 <elf32_fsize@plt+0x6458>
   17cd8:	ldr	r6, [sp, #40]	; 0x28
   17cdc:	b	178d4 <elf32_fsize@plt+0x621c>
   17ce0:	mov	r2, #5
   17ce4:	movw	r1, #15744	; 0x3d80
   17ce8:	mov	r0, #0
   17cec:	movt	r1, #2
   17cf0:	bl	113b8 <dcgettext@plt>
   17cf4:	mov	r1, r0
   17cf8:	mov	r0, #1
   17cfc:	bl	11580 <__printf_chk@plt>
   17d00:	ldr	r3, [r9, #4]
   17d04:	add	r3, r3, #1
   17d08:	str	r3, [r9, #4]
   17d0c:	b	176a4 <elf32_fsize@plt+0x5fec>
   17d10:	movw	r1, #16520	; 0x4088
   17d14:	movt	r1, #2
   17d18:	mov	r0, #0
   17d1c:	mov	r2, #5
   17d20:	bl	113b8 <dcgettext@plt>
   17d24:	ldr	r1, [sp, #44]	; 0x2c
   17d28:	mov	r4, r0
   17d2c:	add	r0, r7, #16
   17d30:	bl	12670 <elf32_fsize@plt+0xfb8>
   17d34:	ldr	ip, [sp, #24]
   17d38:	mov	r1, r4
   17d3c:	ldr	r2, [sp, #44]	; 0x2c
   17d40:	str	ip, [sp]
   17d44:	mov	r3, r0
   17d48:	mov	r0, #1
   17d4c:	bl	11580 <__printf_chk@plt>
   17d50:	ldr	r3, [r9, #4]
   17d54:	add	r3, r3, #1
   17d58:	str	r3, [r9, #4]
   17d5c:	b	17b24 <elf32_fsize@plt+0x646c>
   17d60:	movw	r1, #15908	; 0x3e24
   17d64:	mov	r0, #0
   17d68:	movt	r1, #2
   17d6c:	mov	r2, #5
   17d70:	b	17d20 <elf32_fsize@plt+0x6668>
   17d74:	mov	r2, #5
   17d78:	movw	r1, #7828	; 0x1e94
   17d7c:	movt	r1, #2
   17d80:	bl	113b8 <dcgettext@plt>
   17d84:	ldr	r1, [sp, #44]	; 0x2c
   17d88:	mov	r4, r0
   17d8c:	add	r0, r7, #16
   17d90:	bl	12670 <elf32_fsize@plt+0xfb8>
   17d94:	mov	r1, r4
   17d98:	ldr	r2, [sp, #44]	; 0x2c
   17d9c:	mov	r3, r0
   17da0:	mov	r0, #1
   17da4:	bl	11580 <__printf_chk@plt>
   17da8:	ldr	r3, [r9, #4]
   17dac:	add	r3, r3, #1
   17db0:	str	r3, [r9, #4]
   17db4:	b	17b24 <elf32_fsize@plt+0x646c>
   17db8:	mov	r2, #5
   17dbc:	movw	r1, #16360	; 0x3fe8
   17dc0:	mov	r0, #0
   17dc4:	movt	r1, #2
   17dc8:	bl	113b8 <dcgettext@plt>
   17dcc:	mov	r1, sl
   17dd0:	mov	r2, r0
   17dd4:	ldr	r0, [sp, #40]	; 0x28
   17dd8:	str	r2, [sp, #16]
   17ddc:	bl	12670 <elf32_fsize@plt+0xfb8>
   17de0:	ldr	lr, [sp, #20]
   17de4:	ldr	r2, [sp, #16]
   17de8:	ldrh	ip, [lr, #2]
   17dec:	mov	r1, r2
   17df0:	str	r8, [sp, #8]
   17df4:	rsb	r2, r5, ip
   17df8:	str	r2, [sp]
   17dfc:	mov	r2, sl
   17e00:	mov	r3, r0
   17e04:	ldr	r0, [sp, #24]
   17e08:	str	r0, [sp, #4]
   17e0c:	mov	r0, #1
   17e10:	bl	11580 <__printf_chk@plt>
   17e14:	ldr	r3, [r9, #4]
   17e18:	add	r3, r3, #1
   17e1c:	str	r3, [r9, #4]
   17e20:	b	179fc <elf32_fsize@plt+0x6344>
   17e24:	movw	r0, #16036	; 0x3ea4
   17e28:	movw	r1, #10140	; 0x279c
   17e2c:	movt	r0, #2
   17e30:	movt	r1, #2
   17e34:	movw	r2, #3050	; 0xbea
   17e38:	ldr	r3, [pc, #48]	; 17e70 <elf32_fsize@plt+0x67b8>
   17e3c:	bl	116ac <__assert_fail@plt>
   17e40:	bl	113dc <__stack_chk_fail@plt>
   17e44:	ldr	r3, [r9, #16]
   17e48:	mov	r2, r0
   17e4c:	cmp	r3, r4
   17e50:	bne	17894 <elf32_fsize@plt+0x61dc>
   17e54:	b	178d4 <elf32_fsize@plt+0x621c>
   17e58:	cmp	ip, #0
   17e5c:	beq	17b24 <elf32_fsize@plt+0x646c>
   17e60:	movw	r1, #16584	; 0x40c8
   17e64:	mov	r2, #5
   17e68:	movt	r1, #2
   17e6c:	b	17d20 <elf32_fsize@plt+0x6668>
   17e70:	muleq	r2, r0, r4
   17e74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e78:	add	fp, sp, #32
   17e7c:	sub	sp, sp, #172	; 0xac
   17e80:	movw	ip, #37252	; 0x9184
   17e84:	movt	ip, #3
   17e88:	str	ip, [fp, #-152]	; 0xffffff68
   17e8c:	movw	ip, #37240	; 0x9178
   17e90:	ldr	lr, [fp, #-152]	; 0xffffff68
   17e94:	movt	ip, #3
   17e98:	str	ip, [fp, #-172]	; 0xffffff54
   17e9c:	mov	r7, r0
   17ea0:	str	r1, [fp, #-148]	; 0xffffff6c
   17ea4:	mov	r4, r2
   17ea8:	ldr	ip, [lr, #40]	; 0x28
   17eac:	ldr	lr, [fp, #-172]	; 0xffffff54
   17eb0:	add	r1, ip, #1
   17eb4:	ldr	ip, [fp, #-152]	; 0xffffff68
   17eb8:	cmp	r1, #2
   17ebc:	str	r3, [fp, #-156]	; 0xffffff64
   17ec0:	ldr	r0, [lr]
   17ec4:	str	r1, [ip, #40]	; 0x28
   17ec8:	str	r0, [fp, #-40]	; 0xffffffd8
   17ecc:	beq	18570 <elf32_fsize@plt+0x6eb8>
   17ed0:	ldr	ip, [fp, #-148]	; 0xffffff6c
   17ed4:	ldr	r0, [r7, #16]
   17ed8:	ldr	r1, [ip]
   17edc:	bl	11628 <elf_getscn@plt>
   17ee0:	sub	r1, fp, #108	; 0x6c
   17ee4:	bl	1134c <gelf_getshdr@plt>
   17ee8:	cmp	r0, #0
   17eec:	beq	18378 <elf32_fsize@plt+0x6cc0>
   17ef0:	ldr	r3, [r0, #4]
   17ef4:	cmp	r3, #3
   17ef8:	beq	17f44 <elf32_fsize@plt+0x688c>
   17efc:	mov	r2, #5
   17f00:	movw	r1, #15796	; 0x3db4
   17f04:	mov	r0, #0
   17f08:	movt	r1, #2
   17f0c:	bl	113b8 <dcgettext@plt>
   17f10:	ldr	r1, [fp, #-156]	; 0xffffff64
   17f14:	mov	r5, r0
   17f18:	add	r0, r7, #16
   17f1c:	bl	12670 <elf32_fsize@plt+0xfb8>
   17f20:	mov	r1, r5
   17f24:	ldr	r2, [fp, #-156]	; 0xffffff64
   17f28:	mov	r3, r0
   17f2c:	mov	r0, #1
   17f30:	bl	11580 <__printf_chk@plt>
   17f34:	ldr	ip, [fp, #-152]	; 0xffffff68
   17f38:	ldr	r3, [ip, #4]
   17f3c:	add	r3, r3, #1
   17f40:	str	r3, [ip, #4]
   17f44:	ldr	r1, [fp, #-156]	; 0xffffff64
   17f48:	ldr	r0, [r7, #16]
   17f4c:	bl	11628 <elf_getscn@plt>
   17f50:	mov	r1, #0
   17f54:	bl	11484 <elf_getdata@plt>
   17f58:	cmp	r0, #0
   17f5c:	str	r0, [fp, #-144]	; 0xffffff70
   17f60:	beq	183cc <elf32_fsize@plt+0x6d14>
   17f64:	ldr	r4, [r4]
   17f68:	cmp	r4, #0
   17f6c:	str	r4, [fp, #-160]	; 0xffffff60
   17f70:	beq	185ac <elf32_fsize@plt+0x6ef4>
   17f74:	mov	sl, #0
   17f78:	str	sl, [fp, #-176]	; 0xffffff50
   17f7c:	str	sl, [fp, #-180]	; 0xffffff4c
   17f80:	str	sl, [fp, #-164]	; 0xffffff5c
   17f84:	ldr	ip, [fp, #-160]	; 0xffffff60
   17f88:	sub	r2, fp, #128	; 0x80
   17f8c:	ldr	r0, [fp, #-144]	; 0xffffff70
   17f90:	ldr	r1, [fp, #-164]	; 0xffffff5c
   17f94:	sub	ip, ip, #1
   17f98:	str	ip, [fp, #-160]	; 0xffffff60
   17f9c:	bl	115b0 <gelf_getverdef@plt>
   17fa0:	subs	r9, r0, #0
   17fa4:	beq	183cc <elf32_fsize@plt+0x6d14>
   17fa8:	ldrh	r3, [r9, #2]
   17fac:	tst	r3, #1
   17fb0:	beq	17fd4 <elf32_fsize@plt+0x691c>
   17fb4:	ldr	ip, [fp, #-180]	; 0xffffff4c
   17fb8:	cmp	ip, #0
   17fbc:	bne	184dc <elf32_fsize@plt+0x6e24>
   17fc0:	ldrh	r3, [r9, #4]
   17fc4:	cmp	r3, #1
   17fc8:	bne	1846c <elf32_fsize@plt+0x6db4>
   17fcc:	str	r3, [fp, #-180]	; 0xffffff4c
   17fd0:	ldrh	r3, [r9, #2]
   17fd4:	bic	r3, r3, #3
   17fd8:	cmp	r3, #0
   17fdc:	bne	18418 <elf32_fsize@plt+0x6d60>
   17fe0:	ldrh	r3, [r9]
   17fe4:	cmp	r3, #1
   17fe8:	beq	18044 <elf32_fsize@plt+0x698c>
   17fec:	mov	r2, #5
   17ff0:	movw	r1, #15856	; 0x3df0
   17ff4:	mov	r0, #0
   17ff8:	movt	r1, #2
   17ffc:	bl	113b8 <dcgettext@plt>
   18000:	ldr	r1, [fp, #-156]	; 0xffffff64
   18004:	mov	r4, r0
   18008:	add	r0, r7, #16
   1800c:	bl	12670 <elf32_fsize@plt+0xfb8>
   18010:	ldr	ip, [fp, #-160]	; 0xffffff60
   18014:	mov	r1, r4
   18018:	ldr	r2, [fp, #-156]	; 0xffffff64
   1801c:	str	ip, [sp]
   18020:	ldrh	ip, [r9]
   18024:	str	ip, [sp, #4]
   18028:	mov	r3, r0
   1802c:	mov	r0, #1
   18030:	bl	11580 <__printf_chk@plt>
   18034:	ldr	ip, [fp, #-152]	; 0xffffff68
   18038:	ldr	r3, [ip, #4]
   1803c:	add	r3, r3, #1
   18040:	str	r3, [ip, #4]
   18044:	ldrh	r3, [r9, #6]
   18048:	cmp	r3, #0
   1804c:	beq	18070 <elf32_fsize@plt+0x69b8>
   18050:	mov	r2, #1
   18054:	ldr	r0, [r7, #16]
   18058:	mov	r3, r2
   1805c:	mov	r1, #15
   18060:	ldr	r4, [r9, #12]
   18064:	bl	11490 <gelf_fsize@plt>
   18068:	cmp	r4, r0
   1806c:	bcc	18600 <elf32_fsize@plt+0x6f48>
   18070:	ldr	r8, [r9, #12]
   18074:	sub	r2, fp, #136	; 0x88
   18078:	ldr	ip, [fp, #-164]	; 0xffffff5c
   1807c:	ldr	r0, [fp, #-144]	; 0xffffff70
   18080:	add	r8, ip, r8
   18084:	mov	r1, r8
   18088:	bl	1152c <gelf_getverdaux@plt>
   1808c:	subs	r4, r0, #0
   18090:	beq	183cc <elf32_fsize@plt+0x6d14>
   18094:	ldr	ip, [fp, #-148]	; 0xffffff6c
   18098:	ldr	r0, [r7, #16]
   1809c:	ldr	r2, [r4]
   180a0:	ldr	r1, [ip]
   180a4:	bl	11430 <elf_strptr@plt>
   180a8:	subs	r5, r0, #0
   180ac:	beq	18528 <elf32_fsize@plt+0x6e70>
   180b0:	bl	11400 <elf_hash@plt>
   180b4:	ldr	r3, [r9, #8]
   180b8:	cmp	r0, r3
   180bc:	mov	r6, r0
   180c0:	beq	18128 <elf32_fsize@plt+0x6a70>
   180c4:	mov	r2, #5
   180c8:	movw	r1, #16968	; 0x4248
   180cc:	mov	r0, #0
   180d0:	movt	r1, #2
   180d4:	bl	113b8 <dcgettext@plt>
   180d8:	ldr	r1, [fp, #-156]	; 0xffffff64
   180dc:	mov	r2, r0
   180e0:	add	r0, r7, #16
   180e4:	str	r2, [fp, #-184]	; 0xffffff48
   180e8:	bl	12670 <elf32_fsize@plt+0xfb8>
   180ec:	ldr	ip, [fp, #-160]	; 0xffffff60
   180f0:	ldr	r2, [fp, #-184]	; 0xffffff48
   180f4:	str	r6, [sp, #4]
   180f8:	str	ip, [sp]
   180fc:	ldr	ip, [r9, #8]
   18100:	mov	r1, r2
   18104:	ldr	r2, [fp, #-156]	; 0xffffff64
   18108:	str	ip, [sp, #8]
   1810c:	mov	r3, r0
   18110:	mov	r0, #1
   18114:	bl	11580 <__printf_chk@plt>
   18118:	ldr	ip, [fp, #-152]	; 0xffffff68
   1811c:	ldr	r3, [ip, #4]
   18120:	add	r3, r3, #1
   18124:	str	r3, [ip, #4]
   18128:	mov	r0, #0
   1812c:	mov	r1, r5
   18130:	mov	r3, r0
   18134:	ldrh	r2, [r9, #4]
   18138:	bl	11a5c <elf32_fsize@plt+0x3a4>
   1813c:	cmp	r0, #0
   18140:	bne	186b8 <elf32_fsize@plt+0x7000>
   18144:	ldrh	r2, [r9, #6]
   18148:	sub	sp, sp, #16
   1814c:	ldr	r1, [fp, #-176]	; 0xffffff50
   18150:	add	ip, sp, #16
   18154:	ldr	r3, [r4, #4]
   18158:	cmp	r2, #1
   1815c:	str	ip, [fp, #-168]	; 0xffffff58
   18160:	add	r8, r8, r3
   18164:	str	r5, [sp, #16]
   18168:	str	r1, [sp, #20]
   1816c:	ble	185a4 <elf32_fsize@plt+0x6eec>
   18170:	mov	r5, #2
   18174:	b	181b4 <elf32_fsize@plt+0x6afc>
   18178:	ldr	r0, [r7, #16]
   1817c:	mov	r3, r2
   18180:	mov	r1, #16
   18184:	bl	11490 <gelf_fsize@plt>
   18188:	mov	r2, #1
   1818c:	ldr	r0, [r7, #16]
   18190:	mov	r3, r2
   18194:	mov	r1, #16
   18198:	bl	11490 <gelf_fsize@plt>
   1819c:	ldrh	r3, [r9, #6]
   181a0:	add	r8, r8, r0
   181a4:	add	r5, r5, #1
   181a8:	cmp	r3, sl
   181ac:	ble	182b0 <elf32_fsize@plt+0x6bf8>
   181b0:	mov	sl, r6
   181b4:	ldr	r0, [fp, #-144]	; 0xffffff70
   181b8:	mov	r1, r8
   181bc:	sub	r2, fp, #136	; 0x88
   181c0:	bl	1152c <gelf_getverdaux@plt>
   181c4:	subs	r4, r0, #0
   181c8:	beq	183cc <elf32_fsize@plt+0x6d14>
   181cc:	ldr	ip, [fp, #-148]	; 0xffffff6c
   181d0:	ldr	r0, [r7, #16]
   181d4:	ldr	r2, [r4]
   181d8:	ldr	r1, [ip]
   181dc:	bl	11430 <elf_strptr@plt>
   181e0:	subs	r3, r0, #0
   181e4:	beq	18260 <elf32_fsize@plt+0x6ba8>
   181e8:	ldr	ip, [r4, #4]
   181ec:	sub	sp, sp, #16
   181f0:	add	r6, sp, #16
   181f4:	mov	r2, #1
   181f8:	cmp	ip, #0
   181fc:	stm	r6, {r3, sl}
   18200:	bne	18214 <elf32_fsize@plt+0x6b5c>
   18204:	ldrh	r3, [r9, #6]
   18208:	mov	sl, r5
   1820c:	cmp	r5, r3
   18210:	bge	18178 <elf32_fsize@plt+0x6ac0>
   18214:	ldr	r0, [r7, #16]
   18218:	mov	r3, r2
   1821c:	mov	r1, #16
   18220:	str	ip, [fp, #-184]	; 0xffffff48
   18224:	bl	11490 <gelf_fsize@plt>
   18228:	ldr	ip, [fp, #-184]	; 0xffffff48
   1822c:	cmp	ip, r0
   18230:	bcc	184c8 <elf32_fsize@plt+0x6e10>
   18234:	mov	r2, #1
   18238:	ldr	r0, [r7, #16]
   1823c:	mov	r3, r2
   18240:	mov	r1, #16
   18244:	ldr	sl, [r4, #4]
   18248:	bl	11490 <gelf_fsize@plt>
   1824c:	cmp	sl, r0
   18250:	bls	18710 <elf32_fsize@plt+0x7058>
   18254:	ldr	r0, [r4, #4]
   18258:	mov	sl, r5
   1825c:	b	1819c <elf32_fsize@plt+0x6ae4>
   18260:	movw	r1, #17104	; 0x42d0
   18264:	movt	r1, #2
   18268:	mov	r2, #5
   1826c:	mov	r6, sl
   18270:	bl	113b8 <dcgettext@plt>
   18274:	ldr	r1, [fp, #-156]	; 0xffffff64
   18278:	mov	r4, r0
   1827c:	add	r0, r7, #16
   18280:	bl	12670 <elf32_fsize@plt+0xfb8>
   18284:	ldr	ip, [fp, #-160]	; 0xffffff60
   18288:	ldr	r2, [fp, #-156]	; 0xffffff64
   1828c:	mov	r1, r4
   18290:	str	ip, [sp]
   18294:	mov	r3, r0
   18298:	mov	r0, #1
   1829c:	bl	11580 <__printf_chk@plt>
   182a0:	ldr	ip, [fp, #-152]	; 0xffffff68
   182a4:	ldr	r3, [ip, #4]
   182a8:	add	r3, r3, #1
   182ac:	str	r3, [ip, #4]
   182b0:	ldr	r0, [r9, #16]
   182b4:	ldr	ip, [fp, #-160]	; 0xffffff60
   182b8:	orrs	ip, ip, r0
   182bc:	bne	18394 <elf32_fsize@plt+0x6cdc>
   182c0:	ldr	ip, [fp, #-180]	; 0xffffff4c
   182c4:	cmp	ip, #0
   182c8:	beq	185b4 <elf32_fsize@plt+0x6efc>
   182cc:	ldr	ip, [fp, #-168]	; 0xffffff58
   182d0:	cmp	ip, #0
   182d4:	beq	18378 <elf32_fsize@plt+0x6cc0>
   182d8:	ldr	r8, [fp, #-156]	; 0xffffff64
   182dc:	add	r7, r7, #16
   182e0:	ldr	r6, [fp, #-152]	; 0xffffff68
   182e4:	mov	r5, ip
   182e8:	ldr	r4, [r6]
   182ec:	cmp	r4, #0
   182f0:	beq	18320 <elf32_fsize@plt+0x6c68>
   182f4:	ldr	r3, [r4, #12]
   182f8:	cmp	r3, #0
   182fc:	bne	18314 <elf32_fsize@plt+0x6c5c>
   18300:	ldr	r0, [r4, #4]
   18304:	ldr	r1, [r5]
   18308:	bl	11358 <strcmp@plt>
   1830c:	cmp	r0, #0
   18310:	beq	1836c <elf32_fsize@plt+0x6cb4>
   18314:	ldr	r4, [r4, #16]
   18318:	cmp	r4, #0
   1831c:	bne	182f4 <elf32_fsize@plt+0x6c3c>
   18320:	mov	r2, #5
   18324:	movw	r1, #17292	; 0x438c
   18328:	mov	r0, #0
   1832c:	movt	r1, #2
   18330:	bl	113b8 <dcgettext@plt>
   18334:	mov	r1, r8
   18338:	mov	r4, r0
   1833c:	mov	r0, r7
   18340:	bl	12670 <elf32_fsize@plt+0xfb8>
   18344:	ldr	ip, [r5]
   18348:	mov	r1, r4
   1834c:	mov	r2, r8
   18350:	str	ip, [sp]
   18354:	mov	r3, r0
   18358:	mov	r0, #1
   1835c:	bl	11580 <__printf_chk@plt>
   18360:	ldr	r3, [r6, #4]
   18364:	add	r3, r3, #1
   18368:	str	r3, [r6, #4]
   1836c:	ldr	r5, [r5, #4]
   18370:	cmp	r5, #0
   18374:	bne	182e8 <elf32_fsize@plt+0x6c30>
   18378:	ldr	ip, [fp, #-172]	; 0xffffff54
   1837c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18380:	ldr	r3, [ip]
   18384:	cmp	r2, r3
   18388:	bne	1869c <elf32_fsize@plt+0x6fe4>
   1838c:	sub	sp, fp, #32
   18390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18394:	ldr	ip, [fp, #-164]	; 0xffffff5c
   18398:	add	ip, ip, r0
   1839c:	str	ip, [fp, #-164]	; 0xffffff5c
   183a0:	cmp	ip, r8
   183a4:	bcc	1865c <elf32_fsize@plt+0x6fa4>
   183a8:	cmp	r0, #0
   183ac:	ldr	ip, [fp, #-160]	; 0xffffff60
   183b0:	beq	186a0 <elf32_fsize@plt+0x6fe8>
   183b4:	cmp	ip, #0
   183b8:	beq	182c0 <elf32_fsize@plt+0x6c08>
   183bc:	ldr	ip, [fp, #-168]	; 0xffffff58
   183c0:	mov	sl, r6
   183c4:	str	ip, [fp, #-176]	; 0xffffff50
   183c8:	b	17f84 <elf32_fsize@plt+0x68cc>
   183cc:	mov	r2, #5
   183d0:	movw	r1, #7828	; 0x1e94
   183d4:	mov	r0, #0
   183d8:	movt	r1, #2
   183dc:	bl	113b8 <dcgettext@plt>
   183e0:	ldr	r1, [fp, #-156]	; 0xffffff64
   183e4:	mov	r4, r0
   183e8:	add	r0, r7, #16
   183ec:	bl	12670 <elf32_fsize@plt+0xfb8>
   183f0:	mov	r1, r4
   183f4:	ldr	r2, [fp, #-156]	; 0xffffff64
   183f8:	mov	r3, r0
   183fc:	mov	r0, #1
   18400:	bl	11580 <__printf_chk@plt>
   18404:	ldr	ip, [fp, #-152]	; 0xffffff68
   18408:	ldr	r3, [ip, #4]
   1840c:	add	r3, r3, #1
   18410:	str	r3, [ip, #4]
   18414:	b	18378 <elf32_fsize@plt+0x6cc0>
   18418:	mov	r2, #5
   1841c:	movw	r1, #16860	; 0x41dc
   18420:	mov	r0, #0
   18424:	movt	r1, #2
   18428:	bl	113b8 <dcgettext@plt>
   1842c:	ldr	r1, [fp, #-156]	; 0xffffff64
   18430:	mov	r4, r0
   18434:	add	r0, r7, #16
   18438:	bl	12670 <elf32_fsize@plt+0xfb8>
   1843c:	ldr	ip, [fp, #-160]	; 0xffffff60
   18440:	mov	r1, r4
   18444:	ldr	r2, [fp, #-156]	; 0xffffff64
   18448:	str	ip, [sp]
   1844c:	mov	r3, r0
   18450:	mov	r0, #1
   18454:	bl	11580 <__printf_chk@plt>
   18458:	ldr	ip, [fp, #-152]	; 0xffffff68
   1845c:	ldr	r3, [ip, #4]
   18460:	add	r3, r3, #1
   18464:	str	r3, [ip, #4]
   18468:	b	17fe0 <elf32_fsize@plt+0x6928>
   1846c:	mov	r2, #5
   18470:	movw	r1, #16792	; 0x4198
   18474:	mov	r0, #0
   18478:	movt	r1, #2
   1847c:	bl	113b8 <dcgettext@plt>
   18480:	ldr	r1, [fp, #-156]	; 0xffffff64
   18484:	mov	r4, r0
   18488:	add	r0, r7, #16
   1848c:	bl	12670 <elf32_fsize@plt+0xfb8>
   18490:	ldr	r2, [fp, #-156]	; 0xffffff64
   18494:	mov	r1, r4
   18498:	mov	r3, r0
   1849c:	mov	r0, #1
   184a0:	bl	11580 <__printf_chk@plt>
   184a4:	ldr	ip, [fp, #-152]	; 0xffffff68
   184a8:	ldrh	r3, [r9, #2]
   184ac:	ldr	r2, [ip, #4]
   184b0:	mov	ip, #1
   184b4:	str	ip, [fp, #-180]	; 0xffffff4c
   184b8:	add	r2, r2, ip
   184bc:	ldr	ip, [fp, #-152]	; 0xffffff68
   184c0:	str	r2, [ip, #4]
   184c4:	b	17fd4 <elf32_fsize@plt+0x691c>
   184c8:	movw	r1, #17180	; 0x431c
   184cc:	mov	r0, #0
   184d0:	movt	r1, #2
   184d4:	mov	r2, #5
   184d8:	b	18270 <elf32_fsize@plt+0x6bb8>
   184dc:	mov	r2, #5
   184e0:	movw	r1, #16740	; 0x4164
   184e4:	mov	r0, #0
   184e8:	movt	r1, #2
   184ec:	bl	113b8 <dcgettext@plt>
   184f0:	ldr	r1, [fp, #-156]	; 0xffffff64
   184f4:	mov	r4, r0
   184f8:	add	r0, r7, #16
   184fc:	bl	12670 <elf32_fsize@plt+0xfb8>
   18500:	mov	r1, r4
   18504:	ldr	r2, [fp, #-156]	; 0xffffff64
   18508:	mov	r3, r0
   1850c:	mov	r0, #1
   18510:	bl	11580 <__printf_chk@plt>
   18514:	ldr	ip, [fp, #-152]	; 0xffffff68
   18518:	ldr	r3, [ip, #4]
   1851c:	add	r3, r3, #1
   18520:	str	r3, [ip, #4]
   18524:	b	17fc0 <elf32_fsize@plt+0x6908>
   18528:	mov	r2, #5
   1852c:	movw	r1, #16908	; 0x420c
   18530:	movt	r1, #2
   18534:	mov	r6, sl
   18538:	bl	113b8 <dcgettext@plt>
   1853c:	ldr	r1, [fp, #-156]	; 0xffffff64
   18540:	mov	r4, r0
   18544:	add	r0, r7, #16
   18548:	bl	12670 <elf32_fsize@plt+0xfb8>
   1854c:	ldr	ip, [fp, #-160]	; 0xffffff60
   18550:	mov	r1, r4
   18554:	ldr	r2, [fp, #-156]	; 0xffffff64
   18558:	str	ip, [sp]
   1855c:	ldr	ip, [fp, #-176]	; 0xffffff50
   18560:	str	ip, [fp, #-168]	; 0xffffff58
   18564:	mov	r3, r0
   18568:	mov	r0, #1
   1856c:	b	1829c <elf32_fsize@plt+0x6be4>
   18570:	mov	r2, #5
   18574:	movw	r1, #16688	; 0x4130
   18578:	mov	r0, #0
   1857c:	movt	r1, #2
   18580:	bl	113b8 <dcgettext@plt>
   18584:	mov	r1, r0
   18588:	mov	r0, #1
   1858c:	bl	11580 <__printf_chk@plt>
   18590:	ldr	ip, [fp, #-152]	; 0xffffff68
   18594:	ldr	r3, [ip, #4]
   18598:	add	r3, r3, #1
   1859c:	str	r3, [ip, #4]
   185a0:	b	17ed0 <elf32_fsize@plt+0x6818>
   185a4:	mov	r6, sl
   185a8:	b	182b0 <elf32_fsize@plt+0x6bf8>
   185ac:	ldr	ip, [fp, #-160]	; 0xffffff60
   185b0:	str	ip, [fp, #-168]	; 0xffffff58
   185b4:	mov	r2, #5
   185b8:	movw	r1, #17252	; 0x4364
   185bc:	mov	r0, #0
   185c0:	movt	r1, #2
   185c4:	bl	113b8 <dcgettext@plt>
   185c8:	ldr	r1, [fp, #-156]	; 0xffffff64
   185cc:	mov	r4, r0
   185d0:	add	r0, r7, #16
   185d4:	bl	12670 <elf32_fsize@plt+0xfb8>
   185d8:	mov	r1, r4
   185dc:	ldr	r2, [fp, #-156]	; 0xffffff64
   185e0:	mov	r3, r0
   185e4:	mov	r0, #1
   185e8:	bl	11580 <__printf_chk@plt>
   185ec:	ldr	ip, [fp, #-152]	; 0xffffff68
   185f0:	ldr	r3, [ip, #4]
   185f4:	add	r3, r3, #1
   185f8:	str	r3, [ip, #4]
   185fc:	b	182cc <elf32_fsize@plt+0x6c14>
   18600:	mov	r2, #5
   18604:	movw	r1, #15908	; 0x3e24
   18608:	mov	r0, #0
   1860c:	movt	r1, #2
   18610:	bl	113b8 <dcgettext@plt>
   18614:	ldr	r1, [fp, #-156]	; 0xffffff64
   18618:	mov	r4, r0
   1861c:	add	r0, r7, #16
   18620:	bl	12670 <elf32_fsize@plt+0xfb8>
   18624:	ldr	ip, [fp, #-160]	; 0xffffff60
   18628:	ldr	r2, [fp, #-156]	; 0xffffff64
   1862c:	mov	r1, r4
   18630:	str	ip, [sp]
   18634:	ldr	ip, [fp, #-176]	; 0xffffff50
   18638:	str	ip, [fp, #-168]	; 0xffffff58
   1863c:	mov	r3, r0
   18640:	mov	r0, #1
   18644:	bl	11580 <__printf_chk@plt>
   18648:	ldr	ip, [fp, #-152]	; 0xffffff68
   1864c:	ldr	r3, [ip, #4]
   18650:	add	r3, r3, #1
   18654:	str	r3, [ip, #4]
   18658:	b	182c0 <elf32_fsize@plt+0x6c08>
   1865c:	movw	r1, #16520	; 0x4088
   18660:	movt	r1, #2
   18664:	mov	r0, #0
   18668:	mov	r2, #5
   1866c:	bl	113b8 <dcgettext@plt>
   18670:	ldr	r1, [fp, #-156]	; 0xffffff64
   18674:	mov	r4, r0
   18678:	add	r0, r7, #16
   1867c:	bl	12670 <elf32_fsize@plt+0xfb8>
   18680:	ldr	ip, [fp, #-160]	; 0xffffff60
   18684:	mov	r1, r4
   18688:	ldr	r2, [fp, #-156]	; 0xffffff64
   1868c:	str	ip, [sp]
   18690:	mov	r3, r0
   18694:	mov	r0, #1
   18698:	b	18644 <elf32_fsize@plt+0x6f8c>
   1869c:	bl	113dc <__stack_chk_fail@plt>
   186a0:	cmp	ip, #0
   186a4:	beq	182c0 <elf32_fsize@plt+0x6c08>
   186a8:	movw	r1, #16584	; 0x40c8
   186ac:	mov	r2, #5
   186b0:	movt	r1, #2
   186b4:	b	1866c <elf32_fsize@plt+0x6fb4>
   186b8:	mov	r2, #5
   186bc:	movw	r1, #17040	; 0x4290
   186c0:	mov	r0, #0
   186c4:	movt	r1, #2
   186c8:	bl	113b8 <dcgettext@plt>
   186cc:	ldr	r1, [fp, #-156]	; 0xffffff64
   186d0:	mov	r6, r0
   186d4:	add	r0, r7, #16
   186d8:	bl	12670 <elf32_fsize@plt+0xfb8>
   186dc:	ldr	ip, [fp, #-160]	; 0xffffff60
   186e0:	mov	r1, r6
   186e4:	str	r5, [sp, #4]
   186e8:	ldr	r2, [fp, #-156]	; 0xffffff64
   186ec:	str	ip, [sp]
   186f0:	mov	r3, r0
   186f4:	mov	r0, #1
   186f8:	bl	11580 <__printf_chk@plt>
   186fc:	ldr	ip, [fp, #-152]	; 0xffffff68
   18700:	ldr	r3, [ip, #4]
   18704:	add	r3, r3, #1
   18708:	str	r3, [ip, #4]
   1870c:	b	18144 <elf32_fsize@plt+0x6a8c>
   18710:	mov	sl, r5
   18714:	b	18188 <elf32_fsize@plt+0x6ad0>
   18718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1871c:	add	fp, sp, #32
   18720:	sub	sp, sp, #340	; 0x154
   18724:	movw	r4, #37240	; 0x9178
   18728:	movt	r4, #3
   1872c:	str	r2, [fp, #-264]	; 0xfffffef8
   18730:	mov	r5, r0
   18734:	ldr	r2, [r4]
   18738:	mov	sl, r3
   1873c:	str	r1, [fp, #-276]	; 0xfffffeec
   18740:	ldr	r0, [r0]
   18744:	ldr	r1, [fp, #-264]	; 0xfffffef8
   18748:	str	r2, [fp, #-40]	; 0xffffffd8
   1874c:	bl	11628 <elf_getscn@plt>
   18750:	mov	r1, #0
   18754:	mov	r6, r0
   18758:	bl	11484 <elf_getdata@plt>
   1875c:	sub	r1, fp, #236	; 0xec
   18760:	mov	r9, r0
   18764:	mov	r0, r6
   18768:	bl	1134c <gelf_getshdr@plt>
   1876c:	mov	r1, sl
   18770:	mov	r8, r0
   18774:	ldr	r0, [r5]
   18778:	bl	11628 <elf_getscn@plt>
   1877c:	mov	r1, #0
   18780:	mov	r6, r0
   18784:	bl	11484 <elf_getdata@plt>
   18788:	sub	r1, fp, #172	; 0xac
   1878c:	mov	r7, r0
   18790:	mov	r0, r6
   18794:	bl	1134c <gelf_getshdr@plt>
   18798:	cmp	r0, #0
   1879c:	cmpne	r8, #0
   187a0:	mov	r6, r0
   187a4:	movne	r3, #0
   187a8:	moveq	r3, #1
   187ac:	beq	18854 <elf32_fsize@plt+0x719c>
   187b0:	cmp	r9, #0
   187b4:	beq	18854 <elf32_fsize@plt+0x719c>
   187b8:	ldr	r2, [r9]
   187bc:	cmp	r2, #0
   187c0:	beq	18854 <elf32_fsize@plt+0x719c>
   187c4:	cmp	r7, #0
   187c8:	beq	18854 <elf32_fsize@plt+0x719c>
   187cc:	ldr	r2, [r7]
   187d0:	cmp	r2, #0
   187d4:	beq	18854 <elf32_fsize@plt+0x719c>
   187d8:	ldr	r1, [r8, #40]	; 0x28
   187dc:	ldr	r2, [r0, #40]	; 0x28
   187e0:	cmp	r1, r2
   187e4:	beq	1886c <elf32_fsize@plt+0x71b4>
   187e8:	mov	r0, r3
   187ec:	mov	r2, #5
   187f0:	movw	r1, #17344	; 0x43c0
   187f4:	movt	r1, #2
   187f8:	bl	113b8 <dcgettext@plt>
   187fc:	movw	r7, #37252	; 0x9184
   18800:	movt	r7, #3
   18804:	ldr	r2, [r8]
   18808:	ldr	r1, [r7, #12]
   1880c:	mov	r9, r0
   18810:	ldr	r0, [r5]
   18814:	bl	11430 <elf_strptr@plt>
   18818:	ldr	r2, [r6]
   1881c:	ldr	r1, [r7, #12]
   18820:	mov	r8, r0
   18824:	ldr	r0, [r5]
   18828:	bl	11430 <elf_strptr@plt>
   1882c:	mov	r3, r8
   18830:	mov	r1, r9
   18834:	str	sl, [sp]
   18838:	ldr	r2, [fp, #-264]	; 0xfffffef8
   1883c:	str	r0, [sp, #4]
   18840:	mov	r0, #1
   18844:	bl	11580 <__printf_chk@plt>
   18848:	ldr	r3, [r7, #4]
   1884c:	add	r3, r3, #1
   18850:	str	r3, [r7, #4]
   18854:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18858:	ldr	r3, [r4]
   1885c:	cmp	r2, r3
   18860:	bne	18d7c <elf32_fsize@plt+0x76c4>
   18864:	sub	sp, fp, #32
   18868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1886c:	ldr	r0, [r5]
   18870:	str	r3, [fp, #-344]	; 0xfffffea8
   18874:	bl	11628 <elf_getscn@plt>
   18878:	ldr	r3, [fp, #-344]	; 0xfffffea8
   1887c:	mov	r1, r3
   18880:	str	r0, [fp, #-344]	; 0xfffffea8
   18884:	bl	11484 <elf_getdata@plt>
   18888:	ldr	r2, [fp, #-344]	; 0xfffffea8
   1888c:	sub	r1, fp, #108	; 0x6c
   18890:	mov	ip, r0
   18894:	mov	r0, r2
   18898:	str	ip, [fp, #-348]	; 0xfffffea4
   1889c:	bl	1134c <gelf_getshdr@plt>
   188a0:	ldr	ip, [fp, #-348]	; 0xfffffea4
   188a4:	cmp	ip, #0
   188a8:	mov	r3, r0
   188ac:	beq	18854 <elf32_fsize@plt+0x719c>
   188b0:	ldr	r2, [ip]
   188b4:	cmp	r2, #0
   188b8:	beq	18854 <elf32_fsize@plt+0x719c>
   188bc:	cmp	r0, #0
   188c0:	beq	18854 <elf32_fsize@plt+0x719c>
   188c4:	ldrd	r0, [r0, #56]	; 0x38
   188c8:	orrs	r2, r0, r1
   188cc:	beq	18854 <elf32_fsize@plt+0x719c>
   188d0:	movw	r0, #37252	; 0x9184
   188d4:	movt	r0, #3
   188d8:	str	r0, [fp, #-268]	; 0xfffffef4
   188dc:	ldr	r2, [fp, #-268]	; 0xfffffef4
   188e0:	ldr	r0, [r5]
   188e4:	ldr	r1, [r2, #12]
   188e8:	ldr	r2, [r8]
   188ec:	str	r3, [fp, #-344]	; 0xfffffea8
   188f0:	bl	11430 <elf_strptr@plt>
   188f4:	ldr	r2, [r6]
   188f8:	str	r0, [fp, #-312]	; 0xfffffec8
   188fc:	ldr	r0, [fp, #-268]	; 0xfffffef4
   18900:	ldr	r1, [r0, #12]
   18904:	ldr	r0, [r5]
   18908:	bl	11430 <elf_strptr@plt>
   1890c:	ldr	r1, [r7, #12]
   18910:	ldr	r3, [fp, #-344]	; 0xfffffea8
   18914:	cmp	r1, #15
   18918:	ldr	ip, [fp, #-348]	; 0xfffffea4
   1891c:	str	r1, [fp, #-284]	; 0xfffffee4
   18920:	str	r0, [fp, #-300]	; 0xfffffed4
   18924:	bhi	18964 <elf32_fsize@plt+0x72ac>
   18928:	movw	r1, #17412	; 0x4404
   1892c:	movt	r1, #2
   18930:	mov	r0, #0
   18934:	mov	r2, #5
   18938:	bl	113b8 <dcgettext@plt>
   1893c:	ldr	r3, [fp, #-300]	; 0xfffffed4
   18940:	mov	r2, sl
   18944:	mov	r1, r0
   18948:	mov	r0, #1
   1894c:	bl	11580 <__printf_chk@plt>
   18950:	ldr	r7, [fp, #-268]	; 0xfffffef4
   18954:	ldr	r3, [r7, #4]
   18958:	add	r3, r3, #1
   1895c:	str	r3, [r7, #4]
   18960:	b	18854 <elf32_fsize@plt+0x719c>
   18964:	ldrd	r0, [r3, #32]
   18968:	ldrd	r2, [r3, #56]	; 0x38
   1896c:	str	ip, [fp, #-348]	; 0xfffffea4
   18970:	bl	2042c <elf32_fsize@plt+0xed74>
   18974:	mov	r1, #0
   18978:	add	r3, r0, #14
   1897c:	mov	r2, r0
   18980:	bic	r3, r3, #7
   18984:	str	r0, [fp, #-292]	; 0xfffffedc
   18988:	sub	sp, sp, r3
   1898c:	str	r0, [fp, #-316]	; 0xfffffec4
   18990:	add	r0, sp, #16
   18994:	str	r0, [fp, #-308]	; 0xfffffecc
   18998:	bl	1155c <memset@plt>
   1899c:	ldr	r7, [r7]
   189a0:	ldr	ip, [fp, #-348]	; 0xfffffea4
   189a4:	str	r7, [fp, #-320]	; 0xfffffec0
   189a8:	ldr	r7, [fp, #-276]	; 0xfffffeec
   189ac:	ldr	r1, [fp, #-320]	; 0xfffffec0
   189b0:	ldrb	r3, [r7]
   189b4:	ldr	r0, [r1, #8]
   189b8:	cmp	r3, #1
   189bc:	ldr	r2, [r1]
   189c0:	ldr	r7, [r1, #4]
   189c4:	movne	r3, #2
   189c8:	moveq	r3, #1
   189cc:	cmp	r0, #0
   189d0:	str	r2, [fp, #-304]	; 0xfffffed0
   189d4:	str	r7, [fp, #-340]	; 0xfffffeac
   189d8:	beq	18d34 <elf32_fsize@plt+0x767c>
   189dc:	mul	r3, r0, r3
   189e0:	ldr	r2, [fp, #-304]	; 0xfffffed0
   189e4:	sub	r7, fp, #512	; 0x200
   189e8:	adds	r0, r2, #4
   189ec:	ldr	r2, [fp, #-284]	; 0xfffffee4
   189f0:	str	r3, [fp, #-324]	; 0xfffffebc
   189f4:	mov	r3, #0
   189f8:	adc	r1, r3, #0
   189fc:	mov	r3, #0
   18a00:	strd	r2, [r7, #228]	; 0xe4
   18a04:	ldr	r7, [fp, #-324]	; 0xfffffebc
   18a08:	adds	r2, r0, r7
   18a0c:	adc	r3, r1, #0
   18a10:	lsl	r7, r2, #2
   18a14:	str	r7, [fp, #-276]	; 0xfffffeec
   18a18:	lsl	r0, r3, #2
   18a1c:	sub	r3, fp, #512	; 0x200
   18a20:	orr	r1, r0, r2, lsr #30
   18a24:	str	r1, [fp, #-272]	; 0xfffffef0
   18a28:	ldrd	r0, [r3, #236]	; 0xec
   18a2c:	ldrd	r2, [r3, #228]	; 0xe4
   18a30:	cmp	r1, r3
   18a34:	cmpeq	r0, r2
   18a38:	bhi	18d6c <elf32_fsize@plt+0x76b4>
   18a3c:	ldr	r3, [fp, #-304]	; 0xfffffed0
   18a40:	cmp	r3, #0
   18a44:	beq	18bc8 <elf32_fsize@plt+0x7510>
   18a48:	ldr	r0, [fp, #-324]	; 0xfffffebc
   18a4c:	str	r8, [fp, #-328]	; 0xfffffeb8
   18a50:	add	r7, r0, #4
   18a54:	sub	r0, fp, #512	; 0x200
   18a58:	str	ip, [fp, #-336]	; 0xfffffeb0
   18a5c:	ldrd	r2, [r0, #228]	; 0xe4
   18a60:	ldrd	r0, [r0, #236]	; 0xec
   18a64:	ldr	r8, [fp, #-316]	; 0xfffffec4
   18a68:	subs	r2, r2, r0
   18a6c:	sbc	r3, r3, r1
   18a70:	sub	r1, fp, #512	; 0x200
   18a74:	ldr	ip, [fp, #-308]	; 0xfffffecc
   18a78:	mov	r0, #0
   18a7c:	strd	r2, [r1, #236]	; 0xec
   18a80:	ldr	r2, [fp, #-320]	; 0xfffffec0
   18a84:	str	r9, [fp, #-324]	; 0xfffffebc
   18a88:	add	r1, r2, r7, lsl #2
   18a8c:	ldr	r7, [fp, #-276]	; 0xfffffeec
   18a90:	str	r6, [fp, #-332]	; 0xfffffeb4
   18a94:	ldr	r9, [fp, #-340]	; 0xfffffeac
   18a98:	lsr	r3, r7, #2
   18a9c:	ldr	r7, [fp, #-304]	; 0xfffffed0
   18aa0:	str	r5, [fp, #-340]	; 0xfffffeac
   18aa4:	str	sl, [fp, #-284]	; 0xfffffee4
   18aa8:	mov	sl, r0
   18aac:	add	r2, r1, r7, lsl #2
   18ab0:	ldr	r7, [fp, #-272]	; 0xfffffef0
   18ab4:	sub	r1, r1, #4
   18ab8:	str	r4, [fp, #-320]	; 0xfffffec0
   18abc:	mov	r5, r2
   18ac0:	orr	r3, r3, r7, lsl #30
   18ac4:	mov	r4, r1
   18ac8:	str	r3, [fp, #-276]	; 0xfffffeec
   18acc:	mov	r6, r3
   18ad0:	ldr	r2, [r4, #4]!
   18ad4:	cmp	r2, #0
   18ad8:	beq	18ba0 <elf32_fsize@plt+0x74e8>
   18adc:	rsb	r1, r9, r2
   18ae0:	cmp	r6, r1
   18ae4:	bls	18d80 <elf32_fsize@plt+0x76c8>
   18ae8:	cmp	r8, r2
   18aec:	bls	18d80 <elf32_fsize@plt+0x76c8>
   18af0:	ldr	r3, [r5, r1, lsl #2]
   18af4:	add	r7, r1, #1
   18af8:	ldrb	r0, [ip, r2]
   18afc:	tst	r3, #1
   18b00:	add	r3, ip, r2
   18b04:	orr	r0, r0, #1
   18b08:	strb	r0, [ip, r2]
   18b0c:	add	r2, r5, r1, lsl #2
   18b10:	beq	18b40 <elf32_fsize@plt+0x7488>
   18b14:	b	18ba0 <elf32_fsize@plt+0x74e8>
   18b18:	add	r1, r7, r9
   18b1c:	cmp	r8, r1
   18b20:	bls	18b48 <elf32_fsize@plt+0x7490>
   18b24:	ldr	r0, [r2, #4]!
   18b28:	add	r7, r7, #1
   18b2c:	ldrb	r1, [r3, #1]
   18b30:	tst	r0, #1
   18b34:	orr	r1, r1, #1
   18b38:	strb	r1, [r3, #1]!
   18b3c:	bne	18ba0 <elf32_fsize@plt+0x74e8>
   18b40:	cmp	r6, r7
   18b44:	bhi	18b18 <elf32_fsize@plt+0x7460>
   18b48:	ldr	sl, [fp, #-284]	; 0xfffffee4
   18b4c:	ldr	r4, [fp, #-320]	; 0xfffffec0
   18b50:	mov	r2, #5
   18b54:	movw	r1, #17568	; 0x44a0
   18b58:	mov	r0, #0
   18b5c:	movt	r1, #2
   18b60:	bl	113b8 <dcgettext@plt>
   18b64:	ldr	r3, [fp, #-292]	; 0xfffffedc
   18b68:	ldr	r9, [fp, #-276]	; 0xfffffeec
   18b6c:	mov	r2, sl
   18b70:	str	r7, [sp]
   18b74:	str	r3, [sp, #8]
   18b78:	str	r9, [sp, #4]
   18b7c:	ldr	r3, [fp, #-300]	; 0xfffffed4
   18b80:	mov	r1, r0
   18b84:	mov	r0, #1
   18b88:	bl	11580 <__printf_chk@plt>
   18b8c:	ldr	r7, [fp, #-268]	; 0xfffffef4
   18b90:	ldr	r3, [r7, #4]
   18b94:	add	r3, r3, #1
   18b98:	str	r3, [r7, #4]
   18b9c:	b	18854 <elf32_fsize@plt+0x719c>
   18ba0:	ldr	r0, [fp, #-304]	; 0xfffffed0
   18ba4:	add	sl, sl, #1
   18ba8:	cmp	sl, r0
   18bac:	bne	18ad0 <elf32_fsize@plt+0x7418>
   18bb0:	sub	r6, fp, #332	; 0x14c
   18bb4:	ldr	ip, [fp, #-336]	; 0xfffffeb0
   18bb8:	ldr	r5, [fp, #-340]	; 0xfffffeac
   18bbc:	ldm	r6, {r6, r8, r9}
   18bc0:	ldr	sl, [fp, #-284]	; 0xfffffee4
   18bc4:	ldr	r4, [fp, #-320]	; 0xfffffec0
   18bc8:	ldrd	r2, [r8, #56]	; 0x38
   18bcc:	cmp	r3, #0
   18bd0:	cmpeq	r2, #4
   18bd4:	beq	18d90 <elf32_fsize@plt+0x76d8>
   18bd8:	cmp	r3, #0
   18bdc:	cmpeq	r2, #8
   18be0:	bne	18ea4 <elf32_fsize@plt+0x77ec>
   18be4:	ldr	r2, [r9, #12]
   18be8:	ldr	r7, [r9]
   18bec:	cmp	r2, #7
   18bf0:	bls	18eb4 <elf32_fsize@plt+0x77fc>
   18bf4:	ldrd	r0, [r7]
   18bf8:	sub	r3, fp, #512	; 0x200
   18bfc:	lsr	r2, r2, #3
   18c00:	strd	r0, [r3, #236]	; 0xec
   18c04:	mov	r0, r2
   18c08:	mov	r1, #0
   18c0c:	strd	r0, [r3, #156]	; 0x9c
   18c10:	ldrd	r0, [r7, #8]
   18c14:	strd	r0, [r3, #228]	; 0xe4
   18c18:	ldrd	r0, [r3, #156]	; 0x9c
   18c1c:	cmp	r1, #0
   18c20:	cmpeq	r0, #1
   18c24:	beq	18e80 <elf32_fsize@plt+0x77c8>
   18c28:	subs	r0, r0, #2
   18c2c:	sbc	r1, r1, #0
   18c30:	strd	r0, [r3, #212]	; 0xd4
   18c34:	ldrd	r2, [r3, #236]	; 0xec
   18c38:	cmp	r3, r1
   18c3c:	cmpeq	r2, r0
   18c40:	bhi	18e80 <elf32_fsize@plt+0x77c8>
   18c44:	sub	r1, fp, #512	; 0x200
   18c48:	ldrd	r2, [r1, #156]	; 0x9c
   18c4c:	ldrd	r0, [r1, #236]	; 0xec
   18c50:	subs	r2, r2, r0
   18c54:	sbc	r3, r3, r1
   18c58:	sub	r1, fp, #512	; 0x200
   18c5c:	subs	r2, r2, #2
   18c60:	ldrd	r0, [r1, #228]	; 0xe4
   18c64:	sbc	r3, r3, #0
   18c68:	cmp	r1, r3
   18c6c:	cmpeq	r0, r2
   18c70:	bhi	18e80 <elf32_fsize@plt+0x77c8>
   18c74:	ldr	r9, [fp, #-276]	; 0xfffffeec
   18c78:	sub	r2, fp, #512	; 0x200
   18c7c:	mov	r0, #0
   18c80:	mov	r1, #0
   18c84:	add	r3, r9, #2
   18c88:	strd	r0, [r2, #212]	; 0xd4
   18c8c:	ldr	r0, [fp, #-292]	; 0xfffffedc
   18c90:	add	r9, r7, #8
   18c94:	add	r7, r7, r3, lsl #3
   18c98:	mov	r1, #0
   18c9c:	strd	r0, [r2, #220]	; 0xdc
   18ca0:	sub	r1, fp, #512	; 0x200
   18ca4:	ldrd	r2, [r1, #212]	; 0xd4
   18ca8:	ldrd	r0, [r1, #236]	; 0xec
   18cac:	cmp	r3, r1
   18cb0:	cmpeq	r2, r0
   18cb4:	beq	18ecc <elf32_fsize@plt+0x7814>
   18cb8:	ldrd	r2, [r9, #8]!
   18cbc:	orrs	r0, r2, r3
   18cc0:	bne	18d08 <elf32_fsize@plt+0x7650>
   18cc4:	b	18d1c <elf32_fsize@plt+0x7664>
   18cc8:	sub	r1, fp, #512	; 0x200
   18ccc:	ldrd	r0, [r1, #228]	; 0xe4
   18cd0:	cmp	r1, r3
   18cd4:	cmpeq	r0, r2
   18cd8:	bls	18d1c <elf32_fsize@plt+0x7664>
   18cdc:	ldr	r0, [fp, #-308]	; 0xfffffecc
   18ce0:	lsl	r3, r2, #3
   18ce4:	add	r1, r0, r2
   18ce8:	ldrd	r2, [r3, r7]
   18cec:	ldrb	r0, [r1]
   18cf0:	str	r0, [fp, #-304]	; 0xfffffed0
   18cf4:	orrs	r0, r2, r3
   18cf8:	ldr	r0, [fp, #-304]	; 0xfffffed0
   18cfc:	orr	r0, r0, #2
   18d00:	strb	r0, [r1]
   18d04:	beq	18d1c <elf32_fsize@plt+0x7664>
   18d08:	sub	r1, fp, #512	; 0x200
   18d0c:	ldrd	r0, [r1, #220]	; 0xdc
   18d10:	cmp	r3, r1
   18d14:	cmpeq	r2, r0
   18d18:	bcc	18cc8 <elf32_fsize@plt+0x7610>
   18d1c:	sub	r0, fp, #512	; 0x200
   18d20:	ldrd	r2, [r0, #212]	; 0xd4
   18d24:	adds	r2, r2, #1
   18d28:	adc	r3, r3, #0
   18d2c:	strd	r2, [r0, #212]	; 0xd4
   18d30:	b	18ca0 <elf32_fsize@plt+0x75e8>
   18d34:	mov	r2, #5
   18d38:	movw	r1, #17468	; 0x443c
   18d3c:	movt	r1, #2
   18d40:	bl	113b8 <dcgettext@plt>
   18d44:	ldr	r3, [fp, #-300]	; 0xfffffed4
   18d48:	mov	r2, sl
   18d4c:	mov	r1, r0
   18d50:	mov	r0, #1
   18d54:	bl	11580 <__printf_chk@plt>
   18d58:	ldr	r9, [fp, #-268]	; 0xfffffef4
   18d5c:	ldr	r3, [r9, #4]
   18d60:	add	r3, r3, #1
   18d64:	str	r3, [r9, #4]
   18d68:	b	18854 <elf32_fsize@plt+0x719c>
   18d6c:	movw	r1, #17520	; 0x4470
   18d70:	mov	r0, #0
   18d74:	movt	r1, #2
   18d78:	b	18934 <elf32_fsize@plt+0x727c>
   18d7c:	bl	113dc <__stack_chk_fail@plt>
   18d80:	ldr	sl, [fp, #-284]	; 0xfffffee4
   18d84:	mov	r7, r1
   18d88:	ldr	r4, [fp, #-320]	; 0xfffffec0
   18d8c:	b	18b50 <elf32_fsize@plt+0x7498>
   18d90:	ldr	r1, [r9, #12]
   18d94:	ldr	r9, [r9]
   18d98:	cmp	r1, #7
   18d9c:	str	r9, [fp, #-292]	; 0xfffffedc
   18da0:	bls	18eb4 <elf32_fsize@plt+0x77fc>
   18da4:	ldr	r9, [fp, #-292]	; 0xfffffedc
   18da8:	sub	r7, fp, #512	; 0x200
   18dac:	ldr	r0, [fp, #-292]	; 0xfffffedc
   18db0:	mov	r2, r1
   18db4:	mov	r3, #0
   18db8:	strd	r2, [r7, #228]	; 0xe4
   18dbc:	ldr	r9, [r9]
   18dc0:	mov	r1, #0
   18dc4:	str	r9, [fp, #-300]	; 0xfffffed4
   18dc8:	ldr	r9, [r0, #4]
   18dcc:	ldr	r0, [fp, #-300]	; 0xfffffed4
   18dd0:	adds	r2, r0, r9
   18dd4:	adc	r3, r1, #0
   18dd8:	adds	r2, r2, #2
   18ddc:	adc	r3, r3, #0
   18de0:	lsl	r0, r2, #2
   18de4:	str	r0, [fp, #-276]	; 0xfffffeec
   18de8:	lsl	r1, r3, #2
   18dec:	orr	r7, r1, r2, lsr #30
   18df0:	sub	r1, fp, #512	; 0x200
   18df4:	str	r7, [fp, #-272]	; 0xfffffef0
   18df8:	ldrd	r2, [r1, #236]	; 0xec
   18dfc:	ldrd	r0, [r1, #228]	; 0xe4
   18e00:	cmp	r3, r1
   18e04:	cmpeq	r2, r0
   18e08:	bhi	18e80 <elf32_fsize@plt+0x77c8>
   18e0c:	ldr	r0, [fp, #-300]	; 0xfffffed4
   18e10:	ldr	r7, [fp, #-292]	; 0xfffffedc
   18e14:	add	r2, r0, #2
   18e18:	str	ip, [fp, #-284]	; 0xfffffee4
   18e1c:	ldr	ip, [fp, #-316]	; 0xfffffec4
   18e20:	lsl	r2, r2, #2
   18e24:	str	r8, [fp, #-276]	; 0xfffffeec
   18e28:	sub	r3, r2, #8
   18e2c:	add	r1, r7, r2
   18e30:	ldr	r2, [fp, #-308]	; 0xfffffecc
   18e34:	add	r0, r7, r3
   18e38:	cmp	r7, r0
   18e3c:	beq	18ec4 <elf32_fsize@plt+0x780c>
   18e40:	ldr	r3, [r7, #8]
   18e44:	cmp	r3, #0
   18e48:	cmpne	ip, r3
   18e4c:	bhi	18e70 <elf32_fsize@plt+0x77b8>
   18e50:	b	18e78 <elf32_fsize@plt+0x77c0>
   18e54:	ldrb	r8, [r2, r3]
   18e58:	orr	r8, r8, #2
   18e5c:	strb	r8, [r2, r3]
   18e60:	ldr	r3, [r1, r3, lsl #2]
   18e64:	cmp	r3, #0
   18e68:	cmpne	ip, r3
   18e6c:	bls	18e78 <elf32_fsize@plt+0x77c0>
   18e70:	cmp	r9, r3
   18e74:	bhi	18e54 <elf32_fsize@plt+0x779c>
   18e78:	add	r7, r7, #4
   18e7c:	b	18e38 <elf32_fsize@plt+0x7780>
   18e80:	movw	r1, #17520	; 0x4470
   18e84:	movt	r1, #2
   18e88:	mov	r0, #0
   18e8c:	mov	r2, #5
   18e90:	bl	113b8 <dcgettext@plt>
   18e94:	ldr	r2, [fp, #-264]	; 0xfffffef8
   18e98:	ldr	r3, [fp, #-312]	; 0xfffffec8
   18e9c:	mov	r1, r0
   18ea0:	b	18948 <elf32_fsize@plt+0x7290>
   18ea4:	movw	r1, #17648	; 0x44f0
   18ea8:	mov	r0, #0
   18eac:	movt	r1, #2
   18eb0:	b	18e8c <elf32_fsize@plt+0x77d4>
   18eb4:	movw	r1, #17412	; 0x4404
   18eb8:	mov	r0, #0
   18ebc:	movt	r1, #2
   18ec0:	b	18e8c <elf32_fsize@plt+0x77d4>
   18ec4:	ldr	r8, [fp, #-276]	; 0xfffffeec
   18ec8:	ldr	ip, [fp, #-284]	; 0xfffffee4
   18ecc:	ldr	r9, [fp, #-308]	; 0xfffffecc
   18ed0:	ldrb	r7, [r9]
   18ed4:	tst	r7, #1
   18ed8:	beq	18f34 <elf32_fsize@plt+0x787c>
   18edc:	mov	r2, #5
   18ee0:	movw	r1, #17696	; 0x4520
   18ee4:	mov	r0, #0
   18ee8:	movt	r1, #2
   18eec:	str	ip, [fp, #-348]	; 0xfffffea4
   18ef0:	bl	113b8 <dcgettext@plt>
   18ef4:	ldr	r2, [r6]
   18ef8:	mov	r9, r0
   18efc:	ldr	r0, [fp, #-268]	; 0xfffffef4
   18f00:	ldr	r1, [r0, #12]
   18f04:	ldr	r0, [r5]
   18f08:	bl	11430 <elf_strptr@plt>
   18f0c:	mov	r1, r9
   18f10:	mov	r2, sl
   18f14:	mov	r3, r0
   18f18:	mov	r0, #1
   18f1c:	bl	11580 <__printf_chk@plt>
   18f20:	ldr	r9, [fp, #-268]	; 0xfffffef4
   18f24:	ldr	ip, [fp, #-348]	; 0xfffffea4
   18f28:	ldr	r3, [r9, #4]
   18f2c:	add	r3, r3, #1
   18f30:	str	r3, [r9, #4]
   18f34:	tst	r7, #2
   18f38:	bne	19030 <elf32_fsize@plt+0x7978>
   18f3c:	mov	r0, #1
   18f40:	ldr	r7, [fp, #-268]	; 0xfffffef4
   18f44:	str	r0, [fp, #-276]	; 0xfffffeec
   18f48:	mov	r9, ip
   18f4c:	str	r4, [fp, #-268]	; 0xfffffef4
   18f50:	mov	r4, r0
   18f54:	b	18f9c <elf32_fsize@plt+0x78e4>
   18f58:	ldr	r1, [fp, #-308]	; 0xfffffecc
   18f5c:	ldrb	ip, [r1, r4]
   18f60:	cmp	ip, #3
   18f64:	cmpne	ip, #0
   18f68:	beq	18f98 <elf32_fsize@plt+0x78e0>
   18f6c:	cmp	ip, #1
   18f70:	beq	18fb0 <elf32_fsize@plt+0x78f8>
   18f74:	mov	r0, r9
   18f78:	mov	r1, r4
   18f7c:	sub	r2, fp, #260	; 0x104
   18f80:	bl	11418 <gelf_getsym@plt>
   18f84:	cmp	r0, #0
   18f88:	beq	18f98 <elf32_fsize@plt+0x78e0>
   18f8c:	ldrh	r3, [r0, #6]
   18f90:	cmp	r3, #0
   18f94:	bne	19088 <elf32_fsize@plt+0x79d0>
   18f98:	add	r4, r4, #1
   18f9c:	ldr	r3, [fp, #-316]	; 0xfffffec4
   18fa0:	cmp	r3, r4
   18fa4:	bhi	18f58 <elf32_fsize@plt+0x78a0>
   18fa8:	ldr	r4, [fp, #-268]	; 0xfffffef4
   18fac:	b	18854 <elf32_fsize@plt+0x719c>
   18fb0:	mov	r2, #5
   18fb4:	movw	r1, #17748	; 0x4554
   18fb8:	mov	r0, #0
   18fbc:	movt	r1, #2
   18fc0:	str	ip, [fp, #-348]	; 0xfffffea4
   18fc4:	bl	113b8 <dcgettext@plt>
   18fc8:	ldr	r1, [r7, #12]
   18fcc:	ldr	r2, [r6]
   18fd0:	str	r0, [fp, #-276]	; 0xfffffeec
   18fd4:	ldr	r0, [r5]
   18fd8:	bl	11430 <elf_strptr@plt>
   18fdc:	ldr	r1, [r7, #12]
   18fe0:	ldr	r2, [r8]
   18fe4:	mov	r3, r0
   18fe8:	ldr	r0, [r5]
   18fec:	str	r3, [fp, #-344]	; 0xfffffea8
   18ff0:	bl	11430 <elf_strptr@plt>
   18ff4:	ldr	r3, [fp, #-344]	; 0xfffffea8
   18ff8:	ldr	r2, [fp, #-264]	; 0xfffffef8
   18ffc:	ldr	ip, [fp, #-348]	; 0xfffffea4
   19000:	str	r3, [sp]
   19004:	mov	r3, sl
   19008:	str	r2, [sp, #4]
   1900c:	mov	r2, r4
   19010:	ldr	r1, [fp, #-276]	; 0xfffffeec
   19014:	str	r0, [sp, #8]
   19018:	mov	r0, ip
   1901c:	bl	11580 <__printf_chk@plt>
   19020:	ldr	r3, [r7, #4]
   19024:	add	r3, r3, #1
   19028:	str	r3, [r7, #4]
   1902c:	b	18f98 <elf32_fsize@plt+0x78e0>
   19030:	mov	r2, #5
   19034:	movw	r1, #17696	; 0x4520
   19038:	mov	r0, #0
   1903c:	movt	r1, #2
   19040:	str	ip, [fp, #-348]	; 0xfffffea4
   19044:	bl	113b8 <dcgettext@plt>
   19048:	ldr	r9, [fp, #-268]	; 0xfffffef4
   1904c:	ldr	r2, [r8]
   19050:	ldr	r1, [r9, #12]
   19054:	mov	r7, r0
   19058:	ldr	r0, [r5]
   1905c:	bl	11430 <elf_strptr@plt>
   19060:	mov	r1, r7
   19064:	ldr	r2, [fp, #-264]	; 0xfffffef8
   19068:	mov	r3, r0
   1906c:	mov	r0, #1
   19070:	bl	11580 <__printf_chk@plt>
   19074:	ldr	r3, [r9, #4]
   19078:	ldr	ip, [fp, #-348]	; 0xfffffea4
   1907c:	add	r3, r3, #1
   19080:	str	r3, [r9, #4]
   19084:	b	18f3c <elf32_fsize@plt+0x7884>
   19088:	mov	r2, #5
   1908c:	movw	r1, #17844	; 0x45b4
   19090:	mov	r0, #0
   19094:	movt	r1, #2
   19098:	bl	113b8 <dcgettext@plt>
   1909c:	ldr	r1, [r7, #12]
   190a0:	ldr	r2, [r8]
   190a4:	mov	r3, r0
   190a8:	ldr	r0, [r5]
   190ac:	str	r3, [fp, #-344]	; 0xfffffea8
   190b0:	bl	11430 <elf_strptr@plt>
   190b4:	ldr	r1, [r7, #12]
   190b8:	ldr	r2, [r6]
   190bc:	mov	ip, r0
   190c0:	ldr	r0, [r5]
   190c4:	str	ip, [fp, #-348]	; 0xfffffea4
   190c8:	bl	11430 <elf_strptr@plt>
   190cc:	ldr	r3, [fp, #-344]	; 0xfffffea8
   190d0:	mov	r2, r4
   190d4:	ldr	ip, [fp, #-348]	; 0xfffffea4
   190d8:	str	sl, [sp, #4]
   190dc:	mov	r1, r3
   190e0:	ldr	r3, [fp, #-264]	; 0xfffffef8
   190e4:	str	ip, [sp]
   190e8:	str	r0, [sp, #8]
   190ec:	mov	r0, #1
   190f0:	bl	11580 <__printf_chk@plt>
   190f4:	ldr	r3, [r7, #4]
   190f8:	add	r3, r3, #1
   190fc:	str	r3, [r7, #4]
   19100:	b	18f98 <elf32_fsize@plt+0x78e0>
   19104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19108:	sub	sp, sp, #20
   1910c:	ldr	r8, [pc, #212]	; 191e8 <elf32_fsize@plt+0x7b30>
   19110:	mov	r9, r1
   19114:	mov	r7, r0
   19118:	mov	r6, r1
   1911c:	mov	r4, #0
   19120:	mov	r5, #100	; 0x64
   19124:	ldr	r3, [r8, r4]
   19128:	add	r2, r8, r4
   1912c:	add	r4, r4, #8
   19130:	tst	r3, r7
   19134:	beq	19184 <elf32_fsize@plt+0x7acc>
   19138:	cmp	r6, r9
   1913c:	cmpne	r5, #1
   19140:	eor	r7, r7, r3
   19144:	subhi	r5, r5, #1
   19148:	movhi	r3, #124	; 0x7c
   1914c:	strbhi	r3, [r6]
   19150:	ldr	fp, [r2, #4]
   19154:	addhi	r6, r6, #1
   19158:	sub	sl, r5, #1
   1915c:	mov	r0, fp
   19160:	bl	11514 <strlen@plt>
   19164:	mov	r1, fp
   19168:	cmp	sl, r0
   1916c:	movcc	r2, sl
   19170:	movcs	r2, r0
   19174:	mov	r0, r6
   19178:	rsb	r5, r2, r5
   1917c:	bl	114f0 <mempcpy@plt>
   19180:	mov	r6, r0
   19184:	cmp	r4, #88	; 0x58
   19188:	bne	19124 <elf32_fsize@plt+0x7a6c>
   1918c:	adds	r3, r7, #0
   19190:	movne	r3, #1
   19194:	cmp	r9, r6
   19198:	orreq	r3, r3, #1
   1919c:	cmp	r3, #0
   191a0:	bne	191b8 <elf32_fsize@plt+0x7b00>
   191a4:	mov	r0, r9
   191a8:	mov	r3, #0
   191ac:	strb	r3, [r6]
   191b0:	add	sp, sp, #20
   191b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191b8:	mov	r2, #0
   191bc:	str	r7, [sp, #8]
   191c0:	str	r2, [sp, #12]
   191c4:	sub	r1, r5, #1
   191c8:	movw	r3, #17940	; 0x4614
   191cc:	mov	r0, r6
   191d0:	movt	r3, #2
   191d4:	mov	r2, #1
   191d8:	str	r3, [sp]
   191dc:	mvn	r3, #0
   191e0:	bl	11694 <__snprintf_chk@plt>
   191e4:	b	191a4 <elf32_fsize@plt+0x7aec>
   191e8:	andeq	r1, r2, r8, lsr #9
   191ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191f0:	movw	r7, #37252	; 0x9184
   191f4:	movt	r7, #3
   191f8:	movw	r4, #37240	; 0x9178
   191fc:	movt	r4, #3
   19200:	mov	sl, r2
   19204:	ldr	ip, [r7, #8]
   19208:	mov	r8, r0
   1920c:	ldr	r2, [r2, #44]	; 0x2c
   19210:	sub	sp, sp, #204	; 0xcc
   19214:	ldr	r0, [r4]
   19218:	mov	r9, r3
   1921c:	cmp	r2, ip
   19220:	str	r4, [sp, #16]
   19224:	ldr	r6, [sp, #244]	; 0xf4
   19228:	mov	r4, r1
   1922c:	str	r0, [sp, #196]	; 0xc4
   19230:	ldr	r5, [sp, #248]	; 0xf8
   19234:	ldr	fp, [sp, #252]	; 0xfc
   19238:	bcs	194ec <elf32_fsize@plt+0x7e34>
   1923c:	cmp	r2, #0
   19240:	bne	1953c <elf32_fsize@plt+0x7e84>
   19244:	mov	ip, #0
   19248:	str	ip, [sp, #32]
   1924c:	mov	r2, #1
   19250:	ldr	r1, [sp, #240]	; 0xf0
   19254:	mov	r3, r2
   19258:	ldr	r0, [r8, #16]
   1925c:	bl	11490 <gelf_fsize@plt>
   19260:	ldrd	r2, [sl, #56]	; 0x38
   19264:	mov	r1, #0
   19268:	cmp	r3, r1
   1926c:	cmpeq	r2, r0
   19270:	beq	192cc <elf32_fsize@plt+0x7c14>
   19274:	ldr	r4, [sp, #240]	; 0xf0
   19278:	movw	r3, #17948	; 0x461c
   1927c:	movt	r3, #2
   19280:	mov	r2, #5
   19284:	cmp	r4, #7
   19288:	movw	r1, #18016	; 0x4660
   1928c:	mov	r0, #0
   19290:	movt	r1, #2
   19294:	moveq	r1, r3
   19298:	bl	113b8 <dcgettext@plt>
   1929c:	mov	r1, r9
   192a0:	mov	r4, r0
   192a4:	add	r0, r8, #16
   192a8:	bl	12670 <elf32_fsize@plt+0xfb8>
   192ac:	mov	r1, r4
   192b0:	mov	r2, r9
   192b4:	mov	r3, r0
   192b8:	mov	r0, #1
   192bc:	bl	11580 <__printf_chk@plt>
   192c0:	ldr	r3, [r7, #4]
   192c4:	add	r3, r3, #1
   192c8:	str	r3, [r7, #4]
   192cc:	ldr	r3, [r7, #16]
   192d0:	cmp	r3, #0
   192d4:	addne	r9, sp, #72	; 0x48
   192d8:	movne	r6, #0
   192dc:	bne	192fc <elf32_fsize@plt+0x7c44>
   192e0:	b	1936c <elf32_fsize@plt+0x7cb4>
   192e4:	cmp	r3, #2
   192e8:	beq	193c0 <elf32_fsize@plt+0x7d08>
   192ec:	ldr	r3, [r7, #16]
   192f0:	add	r6, r6, #1
   192f4:	cmp	r6, r3
   192f8:	bcs	1936c <elf32_fsize@plt+0x7cb4>
   192fc:	ldr	r0, [r8, #16]
   19300:	mov	r1, r6
   19304:	mov	r2, r9
   19308:	bl	113f4 <gelf_getphdr@plt>
   1930c:	subs	r4, r0, #0
   19310:	beq	192ec <elf32_fsize@plt+0x7c34>
   19314:	ldr	r3, [r4]
   19318:	cmp	r3, #1
   1931c:	bne	192e4 <elf32_fsize@plt+0x7c2c>
   19320:	mov	r0, #24
   19324:	add	r6, r6, #1
   19328:	bl	200f4 <elf32_fsize@plt+0xea3c>
   1932c:	ldrd	r2, [r4, #16]
   19330:	ldr	r1, [r4, #4]
   19334:	ldrd	r4, [r4, #40]	; 0x28
   19338:	ldr	ip, [fp]
   1933c:	eor	r1, r1, #2
   19340:	ubfx	r1, r1, #1, #1
   19344:	strd	r2, [r0]
   19348:	adds	r2, r2, r4
   1934c:	adc	r3, r3, r5
   19350:	strd	r2, [r0, #8]
   19354:	ldr	r3, [r7, #16]
   19358:	strb	r1, [r0, #16]
   1935c:	cmp	r6, r3
   19360:	str	ip, [r0, #20]
   19364:	str	r0, [fp]
   19368:	bcc	192fc <elf32_fsize@plt+0x7c44>
   1936c:	ldrb	r3, [r7, #24]
   19370:	cmp	r3, #0
   19374:	beq	193a0 <elf32_fsize@plt+0x7ce8>
   19378:	ldr	r3, [fp]
   1937c:	cmp	r3, #0
   19380:	bne	19394 <elf32_fsize@plt+0x7cdc>
   19384:	b	194bc <elf32_fsize@plt+0x7e04>
   19388:	ldr	r3, [r3, #20]
   1938c:	cmp	r3, #0
   19390:	beq	194bc <elf32_fsize@plt+0x7e04>
   19394:	ldrb	r2, [r3, #16]
   19398:	cmp	r2, #0
   1939c:	beq	19388 <elf32_fsize@plt+0x7cd0>
   193a0:	ldr	r4, [sp, #16]
   193a4:	ldr	r2, [sp, #196]	; 0xc4
   193a8:	ldr	r0, [sp, #32]
   193ac:	ldr	r3, [r4]
   193b0:	cmp	r2, r3
   193b4:	bne	19834 <elf32_fsize@plt+0x817c>
   193b8:	add	sp, sp, #204	; 0xcc
   193bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193c0:	ldrd	r2, [r4, #8]
   193c4:	ldr	r0, [r8, #16]
   193c8:	bl	114a8 <gelf_offscn@plt>
   193cc:	add	r1, sp, #128	; 0x80
   193d0:	mov	r4, r0
   193d4:	bl	1134c <gelf_getshdr@plt>
   193d8:	mov	r1, #0
   193dc:	mov	sl, r0
   193e0:	mov	r0, r4
   193e4:	bl	11484 <elf_getdata@plt>
   193e8:	cmp	sl, #0
   193ec:	mov	r5, r0
   193f0:	beq	192ec <elf32_fsize@plt+0x7c34>
   193f4:	ldr	r3, [sl, #4]
   193f8:	cmp	r3, #6
   193fc:	bne	192ec <elf32_fsize@plt+0x7c34>
   19400:	cmp	r0, #0
   19404:	beq	192ec <elf32_fsize@plt+0x7c34>
   19408:	ldrd	r2, [sl, #56]	; 0x38
   1940c:	orrs	ip, r2, r3
   19410:	beq	192ec <elf32_fsize@plt+0x7c34>
   19414:	ldrd	r0, [sl, #32]
   19418:	bl	2042c <elf32_fsize@plt+0xed74>
   1941c:	orrs	r2, r0, r1
   19420:	beq	192ec <elf32_fsize@plt+0x7c34>
   19424:	mov	r4, #0
   19428:	str	r6, [sp, #20]
   1942c:	str	r7, [sp, #24]
   19430:	b	19458 <elf32_fsize@plt+0x7da0>
   19434:	ldrd	r0, [sl, #32]
   19438:	add	r4, r4, #1
   1943c:	ldrd	r2, [sl, #56]	; 0x38
   19440:	mov	r7, #0
   19444:	bl	2042c <elf32_fsize@plt+0xed74>
   19448:	mov	r6, r4
   1944c:	cmp	r7, r1
   19450:	cmpeq	r6, r0
   19454:	bcs	195e4 <elf32_fsize@plt+0x7f2c>
   19458:	mov	r0, r5
   1945c:	mov	r1, r4
   19460:	add	r2, sp, #56	; 0x38
   19464:	bl	115f8 <gelf_getdyn@plt>
   19468:	cmp	r0, #0
   1946c:	beq	19434 <elf32_fsize@plt+0x7d7c>
   19470:	ldrd	r2, [r0]
   19474:	cmp	r3, #0
   19478:	cmpeq	r2, #22
   1947c:	beq	194a8 <elf32_fsize@plt+0x7df0>
   19480:	cmp	r3, #0
   19484:	cmpeq	r2, #30
   19488:	bne	19434 <elf32_fsize@plt+0x7d7c>
   1948c:	ldrd	r2, [r0, #8]
   19490:	mov	r1, #0
   19494:	mov	r0, #4
   19498:	and	r3, r3, r1
   1949c:	and	r2, r2, r0
   194a0:	orrs	r1, r2, r3
   194a4:	beq	19434 <elf32_fsize@plt+0x7d7c>
   194a8:	ldr	r7, [sp, #24]
   194ac:	mov	r2, #1
   194b0:	ldr	r6, [sp, #20]
   194b4:	strb	r2, [r7, #24]
   194b8:	b	192ec <elf32_fsize@plt+0x7c34>
   194bc:	mov	r2, #5
   194c0:	movw	r1, #18700	; 0x490c
   194c4:	mov	r0, #0
   194c8:	movt	r1, #2
   194cc:	bl	113b8 <dcgettext@plt>
   194d0:	mov	r1, r0
   194d4:	mov	r0, #1
   194d8:	bl	11580 <__printf_chk@plt>
   194dc:	ldr	r3, [r7, #4]
   194e0:	add	r3, r3, #1
   194e4:	str	r3, [r7, #4]
   194e8:	b	193a0 <elf32_fsize@plt+0x7ce8>
   194ec:	mov	r2, #5
   194f0:	movw	r1, #18084	; 0x46a4
   194f4:	mov	r0, #0
   194f8:	movt	r1, #2
   194fc:	bl	113b8 <dcgettext@plt>
   19500:	mov	r1, r9
   19504:	mov	r5, #0
   19508:	mov	r4, r0
   1950c:	add	r0, r8, #16
   19510:	bl	12670 <elf32_fsize@plt+0xfb8>
   19514:	mov	r1, r4
   19518:	mov	r2, r9
   1951c:	mov	r3, r0
   19520:	mov	r0, #1
   19524:	bl	11580 <__printf_chk@plt>
   19528:	ldr	r3, [r7, #4]
   1952c:	str	r5, [sp, #32]
   19530:	add	r3, r3, #1
   19534:	str	r3, [r7, #4]
   19538:	b	1924c <elf32_fsize@plt+0x7b94>
   1953c:	mov	r1, r2
   19540:	ldr	r0, [r8, #16]
   19544:	bl	11628 <elf_getscn@plt>
   19548:	mov	r1, r5
   1954c:	bl	1134c <gelf_getshdr@plt>
   19550:	cmp	r0, #0
   19554:	str	r0, [r6]
   19558:	beq	19244 <elf32_fsize@plt+0x7b8c>
   1955c:	ldr	r1, [r0, #4]
   19560:	mov	r0, r8
   19564:	bl	200b4 <elf32_fsize@plt+0xe9fc>
   19568:	cmp	r0, #0
   1956c:	movne	ip, #0
   19570:	strne	ip, [sp, #32]
   19574:	beq	195f0 <elf32_fsize@plt+0x7f38>
   19578:	ldr	r1, [r6]
   1957c:	mov	r2, #48	; 0x30
   19580:	mov	r3, #0
   19584:	ldrd	r0, [r1, #8]
   19588:	and	r2, r2, r0
   1958c:	and	r3, r3, r1
   19590:	cmp	r3, #0
   19594:	cmpeq	r2, #48	; 0x30
   19598:	bne	1924c <elf32_fsize@plt+0x7b94>
   1959c:	mov	r2, #5
   195a0:	movw	r1, #18568	; 0x4888
   195a4:	mov	r0, #0
   195a8:	movt	r1, #2
   195ac:	bl	113b8 <dcgettext@plt>
   195b0:	mov	r1, r9
   195b4:	mov	r4, r0
   195b8:	add	r0, r8, #16
   195bc:	bl	12670 <elf32_fsize@plt+0xfb8>
   195c0:	mov	r1, r4
   195c4:	mov	r2, r9
   195c8:	mov	r3, r0
   195cc:	mov	r0, #1
   195d0:	bl	11580 <__printf_chk@plt>
   195d4:	ldr	r3, [r7, #4]
   195d8:	add	r3, r3, #1
   195dc:	str	r3, [r7, #4]
   195e0:	b	1924c <elf32_fsize@plt+0x7b94>
   195e4:	ldr	r6, [sp, #20]
   195e8:	ldr	r7, [sp, #24]
   195ec:	b	192ec <elf32_fsize@plt+0x7c34>
   195f0:	ldrh	r3, [r4, #16]
   195f4:	sub	r3, r3, #2
   195f8:	cmp	r3, #1
   195fc:	bls	19658 <elf32_fsize@plt+0x7fa0>
   19600:	add	r4, r8, #16
   19604:	str	r4, [sp, #32]
   19608:	mov	r2, #5
   1960c:	movw	r1, #18644	; 0x48d4
   19610:	mov	r0, #0
   19614:	movt	r1, #2
   19618:	bl	113b8 <dcgettext@plt>
   1961c:	mov	r1, r9
   19620:	mov	r5, #0
   19624:	mov	r4, r0
   19628:	ldr	r0, [sp, #32]
   1962c:	bl	12670 <elf32_fsize@plt+0xfb8>
   19630:	mov	r1, r4
   19634:	mov	r2, r9
   19638:	mov	r3, r0
   1963c:	mov	r0, #1
   19640:	bl	11580 <__printf_chk@plt>
   19644:	ldr	r3, [r7, #4]
   19648:	str	r5, [sp, #32]
   1964c:	add	r3, r3, #1
   19650:	str	r3, [r7, #4]
   19654:	b	19578 <elf32_fsize@plt+0x7ec0>
   19658:	add	r5, r8, #16
   1965c:	mov	r1, r9
   19660:	str	r5, [sp, #32]
   19664:	mov	r0, r5
   19668:	bl	12670 <elf32_fsize@plt+0xfb8>
   1966c:	movw	r1, #18140	; 0x46dc
   19670:	movt	r1, #2
   19674:	bl	11358 <strcmp@plt>
   19678:	cmp	r0, #0
   1967c:	moveq	r4, r0
   19680:	bne	19608 <elf32_fsize@plt+0x7f50>
   19684:	mov	r1, r4
   19688:	ldr	r0, [r8, #16]
   1968c:	bl	115d4 <elf_nextscn@plt>
   19690:	subs	r4, r0, #0
   19694:	beq	197d0 <elf32_fsize@plt+0x8118>
   19698:	add	r1, sp, #128	; 0x80
   1969c:	bl	1134c <gelf_getshdr@plt>
   196a0:	cmp	r0, #0
   196a4:	beq	197d0 <elf32_fsize@plt+0x8118>
   196a8:	ldr	r3, [r0, #4]
   196ac:	cmp	r3, #6
   196b0:	bne	19684 <elf32_fsize@plt+0x7fcc>
   196b4:	ldrd	r2, [r0, #56]	; 0x38
   196b8:	orrs	ip, r2, r3
   196bc:	beq	19684 <elf32_fsize@plt+0x7fcc>
   196c0:	mov	r5, r0
   196c4:	mov	r1, #0
   196c8:	mov	r0, r4
   196cc:	bl	11484 <elf_getdata@plt>
   196d0:	subs	r4, r0, #0
   196d4:	str	r4, [sp, #48]	; 0x30
   196d8:	beq	19a3c <elf32_fsize@plt+0x8384>
   196dc:	ldrd	r0, [r5, #32]
   196e0:	ldrd	r2, [r5, #56]	; 0x38
   196e4:	bl	2042c <elf32_fsize@plt+0xed74>
   196e8:	cmp	r1, #0
   196ec:	cmpeq	r0, #1
   196f0:	bls	197d0 <elf32_fsize@plt+0x8118>
   196f4:	mov	ip, #1
   196f8:	str	r6, [sp, #40]	; 0x28
   196fc:	str	ip, [sp, #36]	; 0x24
   19700:	mov	r6, r5
   19704:	str	fp, [sp, #44]	; 0x2c
   19708:	b	1974c <elf32_fsize@plt+0x8094>
   1970c:	mvn	r0, #-1879048186	; 0x90000006
   19710:	mov	r1, #0
   19714:	cmp	r3, r1
   19718:	cmpeq	r2, r0
   1971c:	beq	19838 <elf32_fsize@plt+0x8180>
   19720:	ldr	fp, [sp, #36]	; 0x24
   19724:	mov	r5, #0
   19728:	ldrd	r0, [r6, #32]
   1972c:	ldrd	r2, [r6, #56]	; 0x38
   19730:	add	fp, fp, #1
   19734:	str	fp, [sp, #36]	; 0x24
   19738:	bl	2042c <elf32_fsize@plt+0xed74>
   1973c:	mov	r4, fp
   19740:	cmp	r5, r1
   19744:	cmpeq	r4, r0
   19748:	bcs	197c8 <elf32_fsize@plt+0x8110>
   1974c:	ldr	r0, [sp, #48]	; 0x30
   19750:	add	r2, sp, #56	; 0x38
   19754:	ldr	r1, [sp, #36]	; 0x24
   19758:	bl	115f8 <gelf_getdyn@plt>
   1975c:	subs	r4, r0, #0
   19760:	beq	197c8 <elf32_fsize@plt+0x8110>
   19764:	ldrd	r2, [r4]
   19768:	mvn	r0, #-1879048187	; 0x90000005
   1976c:	mov	r1, #0
   19770:	cmp	r3, r1
   19774:	cmpeq	r2, r0
   19778:	bne	1970c <elf32_fsize@plt+0x8054>
   1977c:	mov	r2, #5
   19780:	movw	r1, #18200	; 0x4718
   19784:	mov	r0, #0
   19788:	movt	r1, #2
   1978c:	bl	113b8 <dcgettext@plt>
   19790:	mov	r1, r9
   19794:	mov	r5, r0
   19798:	ldr	r0, [sp, #32]
   1979c:	bl	12670 <elf32_fsize@plt+0xfb8>
   197a0:	mov	r1, r5
   197a4:	mov	r2, r9
   197a8:	mov	r3, r0
   197ac:	mov	r0, #1
   197b0:	bl	11580 <__printf_chk@plt>
   197b4:	ldr	r1, [r7, #4]
   197b8:	ldrd	r2, [r4]
   197bc:	add	r1, r1, #1
   197c0:	str	r1, [r7, #4]
   197c4:	b	1970c <elf32_fsize@plt+0x8054>
   197c8:	ldr	r6, [sp, #40]	; 0x28
   197cc:	ldr	fp, [sp, #44]	; 0x2c
   197d0:	ldr	r3, [sl, #44]	; 0x2c
   197d4:	cmp	r3, #0
   197d8:	moveq	ip, #1
   197dc:	streq	ip, [sp, #32]
   197e0:	beq	19578 <elf32_fsize@plt+0x7ec0>
   197e4:	mov	r2, #5
   197e8:	movw	r1, #18524	; 0x485c
   197ec:	mov	r0, #0
   197f0:	movt	r1, #2
   197f4:	bl	113b8 <dcgettext@plt>
   197f8:	mov	r1, r9
   197fc:	mov	r5, #1
   19800:	mov	r4, r0
   19804:	ldr	r0, [sp, #32]
   19808:	bl	12670 <elf32_fsize@plt+0xfb8>
   1980c:	mov	r1, r4
   19810:	mov	r2, r9
   19814:	mov	r3, r0
   19818:	mov	r0, #1
   1981c:	bl	11580 <__printf_chk@plt>
   19820:	ldr	r3, [r7, #4]
   19824:	str	r5, [sp, #32]
   19828:	add	r3, r3, r5
   1982c:	str	r3, [r7, #4]
   19830:	b	19578 <elf32_fsize@plt+0x7ec0>
   19834:	bl	113dc <__stack_chk_fail@plt>
   19838:	ldrd	r2, [sl, #56]	; 0x38
   1983c:	orrs	r1, r2, r3
   19840:	beq	1985c <elf32_fsize@plt+0x81a4>
   19844:	ldrd	r0, [sl, #32]
   19848:	bl	2042c <elf32_fsize@plt+0xed74>
   1984c:	ldrd	r2, [r4, #8]
   19850:	cmp	r3, r1
   19854:	cmpeq	r2, r0
   19858:	bhi	199ec <elf32_fsize@plt+0x8334>
   1985c:	mov	r1, r9
   19860:	ldr	r0, [r8, #16]
   19864:	bl	11628 <elf_getscn@plt>
   19868:	mov	r1, #0
   1986c:	bl	11484 <elf_getdata@plt>
   19870:	cmp	r0, #0
   19874:	str	r0, [sp, #52]	; 0x34
   19878:	beq	19720 <elf32_fsize@plt+0x8068>
   1987c:	ldrd	r2, [sl, #56]	; 0x38
   19880:	orrs	r5, r2, r3
   19884:	beq	19720 <elf32_fsize@plt+0x8068>
   19888:	ldrd	r0, [sl, #32]
   1988c:	bl	2042c <elf32_fsize@plt+0xed74>
   19890:	orrs	fp, r0, r1
   19894:	beq	19720 <elf32_fsize@plt+0x8068>
   19898:	mov	r0, #0
   1989c:	mov	r1, #0
   198a0:	add	fp, sp, #72	; 0x48
   198a4:	strd	r0, [sp, #24]
   198a8:	mov	r5, #0
   198ac:	str	sl, [sp, #20]
   198b0:	str	fp, [sp, #8]
   198b4:	b	1994c <elf32_fsize@plt+0x8294>
   198b8:	ldrd	r2, [r4, #8]
   198bc:	ldrd	sl, [sp, #24]
   198c0:	cmp	r3, fp
   198c4:	cmpeq	r2, sl
   198c8:	bhi	19920 <elf32_fsize@plt+0x8268>
   198cc:	mov	r2, #5
   198d0:	movw	r1, #18328	; 0x4798
   198d4:	mov	r0, #0
   198d8:	movt	r1, #2
   198dc:	bl	113b8 <dcgettext@plt>
   198e0:	mov	r1, r9
   198e4:	mov	r2, r0
   198e8:	ldr	r0, [sp, #32]
   198ec:	str	r2, [sp, #12]
   198f0:	bl	12670 <elf32_fsize@plt+0xfb8>
   198f4:	ldr	r2, [sp, #12]
   198f8:	ldr	ip, [r4, #8]
   198fc:	mov	r1, r2
   19900:	mov	r2, r9
   19904:	str	ip, [sp]
   19908:	mov	r3, r0
   1990c:	mov	r0, #1
   19910:	bl	11580 <__printf_chk@plt>
   19914:	ldr	r3, [r7, #4]
   19918:	add	r3, r3, #1
   1991c:	str	r3, [r7, #4]
   19920:	ldr	sl, [sp, #20]
   19924:	add	r5, r5, #1
   19928:	mov	fp, #0
   1992c:	ldrd	r0, [sl, #32]
   19930:	ldrd	r2, [sl, #56]	; 0x38
   19934:	mov	sl, r5
   19938:	strd	sl, [sp, #24]
   1993c:	bl	2042c <elf32_fsize@plt+0xed74>
   19940:	cmp	fp, r1
   19944:	cmpeq	sl, r0
   19948:	bcs	199e4 <elf32_fsize@plt+0x832c>
   1994c:	ldr	r0, [sp, #52]	; 0x34
   19950:	mov	r1, r5
   19954:	ldr	r2, [sp, #8]
   19958:	bl	11538 <gelf_getrela@plt>
   1995c:	cmp	r0, #0
   19960:	beq	199e4 <elf32_fsize@plt+0x832c>
   19964:	ldr	r1, [r0, #8]
   19968:	mov	r0, r8
   1996c:	bl	1ff48 <elf32_fsize@plt+0xe890>
   19970:	cmp	r0, #0
   19974:	bne	198b8 <elf32_fsize@plt+0x8200>
   19978:	ldrd	sl, [r4, #8]
   1997c:	ldrd	r2, [sp, #24]
   19980:	cmp	fp, r3
   19984:	cmpeq	sl, r2
   19988:	bls	19920 <elf32_fsize@plt+0x8268>
   1998c:	mov	r2, #5
   19990:	movw	r1, #18416	; 0x47f0
   19994:	movt	r1, #2
   19998:	bl	113b8 <dcgettext@plt>
   1999c:	mov	r1, r9
   199a0:	mov	r2, r0
   199a4:	ldr	r0, [sp, #32]
   199a8:	str	r2, [sp, #12]
   199ac:	bl	12670 <elf32_fsize@plt+0xfb8>
   199b0:	ldr	r2, [sp, #12]
   199b4:	str	r5, [sp]
   199b8:	ldr	ip, [r4, #8]
   199bc:	mov	r1, r2
   199c0:	mov	r2, r9
   199c4:	str	ip, [sp, #4]
   199c8:	mov	r3, r0
   199cc:	mov	r0, #1
   199d0:	bl	11580 <__printf_chk@plt>
   199d4:	ldr	r3, [r7, #4]
   199d8:	add	r3, r3, #1
   199dc:	str	r3, [r7, #4]
   199e0:	b	19920 <elf32_fsize@plt+0x8268>
   199e4:	ldr	sl, [sp, #20]
   199e8:	b	19720 <elf32_fsize@plt+0x8068>
   199ec:	mov	r2, #5
   199f0:	movw	r1, #18260	; 0x4754
   199f4:	mov	r0, #0
   199f8:	movt	r1, #2
   199fc:	bl	113b8 <dcgettext@plt>
   19a00:	mov	r1, r9
   19a04:	mov	r5, r0
   19a08:	ldr	r0, [sp, #32]
   19a0c:	bl	12670 <elf32_fsize@plt+0xfb8>
   19a10:	ldr	ip, [r4, #8]
   19a14:	mov	r1, r5
   19a18:	mov	r2, r9
   19a1c:	str	ip, [sp]
   19a20:	mov	r3, r0
   19a24:	mov	r0, #1
   19a28:	bl	11580 <__printf_chk@plt>
   19a2c:	ldr	r3, [r7, #4]
   19a30:	add	r3, r3, #1
   19a34:	str	r3, [r7, #4]
   19a38:	b	1985c <elf32_fsize@plt+0x81a4>
   19a3c:	mov	r2, #5
   19a40:	movw	r1, #18152	; 0x46e8
   19a44:	movt	r1, #2
   19a48:	bl	113b8 <dcgettext@plt>
   19a4c:	mov	r1, r9
   19a50:	mov	r4, r0
   19a54:	ldr	r0, [sp, #32]
   19a58:	bl	12670 <elf32_fsize@plt+0xfb8>
   19a5c:	mov	r1, r4
   19a60:	mov	r2, r9
   19a64:	mov	r3, r0
   19a68:	mov	r0, #1
   19a6c:	bl	11580 <__printf_chk@plt>
   19a70:	ldr	r3, [r7, #4]
   19a74:	add	r3, r3, #1
   19a78:	str	r3, [r7, #4]
   19a7c:	b	196dc <elf32_fsize@plt+0x8024>
   19a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a84:	movw	r4, #37240	; 0x9178
   19a88:	movt	r4, #3
   19a8c:	orrs	r5, r2, r3
   19a90:	sub	sp, sp, #132	; 0x84
   19a94:	ldr	r3, [r4]
   19a98:	str	r4, [sp, #40]	; 0x28
   19a9c:	str	r0, [sp, #16]
   19aa0:	str	r1, [sp, #36]	; 0x24
   19aa4:	str	r3, [sp, #124]	; 0x7c
   19aa8:	beq	19e28 <elf32_fsize@plt+0x8770>
   19aac:	ldr	r4, [sp, #16]
   19ab0:	ldr	r1, [sp, #168]	; 0xa8
   19ab4:	ldr	r0, [r4, #16]
   19ab8:	bl	11628 <elf_getscn@plt>
   19abc:	mov	r1, #0
   19ac0:	bl	11568 <elf_rawdata@plt>
   19ac4:	cmp	r0, #0
   19ac8:	str	r0, [sp, #28]
   19acc:	beq	19dbc <elf32_fsize@plt+0x8704>
   19ad0:	ldr	r5, [r0, #12]
   19ad4:	cmp	r5, #0
   19ad8:	beq	19dbc <elf32_fsize@plt+0x8704>
   19adc:	ldr	r6, [r0]
   19ae0:	cmp	r6, #0
   19ae4:	beq	19dbc <elf32_fsize@plt+0x8704>
   19ae8:	ldrb	r3, [r6]
   19aec:	cmp	r3, #65	; 0x41
   19af0:	bne	19e50 <elf32_fsize@plt+0x8798>
   19af4:	add	r3, r6, #1
   19af8:	add	r4, r6, r5
   19afc:	rsb	r2, r3, r4
   19b00:	cmp	r2, #3
   19b04:	mov	r8, r3
   19b08:	strls	r3, [sp, #44]	; 0x2c
   19b0c:	bls	1a198 <elf32_fsize@plt+0x8ae0>
   19b10:	movw	fp, #37252	; 0x9184
   19b14:	movt	fp, #3
   19b18:	mov	r9, r3
   19b1c:	mov	r7, fp
   19b20:	ldr	r0, [r9]
   19b24:	str	r0, [sp, #108]	; 0x6c
   19b28:	ldr	r4, [sp, #108]	; 0x6c
   19b2c:	cmp	r4, #0
   19b30:	beq	19fe0 <elf32_fsize@plt+0x8928>
   19b34:	ldr	ip, [sp, #36]	; 0x24
   19b38:	ldrb	r3, [ip]
   19b3c:	cmp	r3, #1
   19b40:	moveq	r3, r4
   19b44:	revne	r3, r4
   19b48:	strne	r3, [sp, #108]	; 0x6c
   19b4c:	add	r4, r6, r5
   19b50:	rsb	r2, r8, r4
   19b54:	cmp	r2, r3
   19b58:	bcc	1a124 <elf32_fsize@plt+0x8a6c>
   19b5c:	add	ip, r9, #4
   19b60:	mov	r2, r3
   19b64:	mov	r1, #0
   19b68:	add	r9, r9, r3
   19b6c:	mov	r0, ip
   19b70:	str	ip, [sp, #20]
   19b74:	str	r9, [sp, #24]
   19b78:	bl	115a4 <memchr@plt>
   19b7c:	subs	r8, r0, #0
   19b80:	beq	1a2c8 <elf32_fsize@plt+0x8c10>
   19b84:	ldr	ip, [sp, #20]
   19b88:	add	r8, r8, #1
   19b8c:	rsb	r2, ip, r8
   19b90:	cmp	r2, #4
   19b94:	bne	19f60 <elf32_fsize@plt+0x88a8>
   19b98:	movw	r1, #19080	; 0x4a88
   19b9c:	mov	r0, ip
   19ba0:	movt	r1, #2
   19ba4:	bl	11388 <memcmp@plt>
   19ba8:	cmp	r0, #0
   19bac:	bne	19f60 <elf32_fsize@plt+0x88a8>
   19bb0:	ldr	ip, [sp, #24]
   19bb4:	cmp	ip, r8
   19bb8:	strls	ip, [sp, #44]	; 0x2c
   19bbc:	bls	19ee8 <elf32_fsize@plt+0x8830>
   19bc0:	ldr	r4, [sp, #24]
   19bc4:	mov	r6, r7
   19bc8:	str	r4, [sp, #44]	; 0x2c
   19bcc:	b	19c38 <elf32_fsize@plt+0x8580>
   19bd0:	mov	r2, #5
   19bd4:	movw	r1, #19376	; 0x4bb0
   19bd8:	mov	r0, #0
   19bdc:	movt	r1, #2
   19be0:	bl	113b8 <dcgettext@plt>
   19be4:	ldr	ip, [sp, #16]
   19be8:	ldr	r1, [sp, #168]	; 0xa8
   19bec:	mov	r7, r0
   19bf0:	add	r0, ip, #16
   19bf4:	bl	12670 <elf32_fsize@plt+0xfb8>
   19bf8:	ldr	lr, [sp, #28]
   19bfc:	mov	r1, r7
   19c00:	ldr	r2, [sp, #168]	; 0xa8
   19c04:	ldr	ip, [lr]
   19c08:	str	r5, [sp, #4]
   19c0c:	rsb	r4, ip, r4
   19c10:	str	r4, [sp]
   19c14:	mov	r3, r0
   19c18:	mov	r0, #1
   19c1c:	bl	11580 <__printf_chk@plt>
   19c20:	ldr	r3, [r6, #4]
   19c24:	add	r3, r3, #1
   19c28:	str	r3, [r6, #4]
   19c2c:	ldr	ip, [sp, #24]
   19c30:	cmp	ip, r8
   19c34:	bls	19ed4 <elf32_fsize@plt+0x881c>
   19c38:	ldrb	r5, [r8]
   19c3c:	add	r4, r8, #1
   19c40:	mov	r1, #0
   19c44:	tst	r5, #128	; 0x80
   19c48:	and	r5, r5, #127	; 0x7f
   19c4c:	uxtb	r0, r5
   19c50:	bne	1a428 <elf32_fsize@plt+0x8d70>
   19c54:	ldr	ip, [sp, #24]
   19c58:	cmp	ip, r4
   19c5c:	bls	1a268 <elf32_fsize@plt+0x8bb0>
   19c60:	ldr	ip, [sp, #24]
   19c64:	rsb	r3, r4, ip
   19c68:	cmp	r3, #3
   19c6c:	ble	1a2b4 <elf32_fsize@plt+0x8bfc>
   19c70:	ldr	r0, [r4]
   19c74:	str	r0, [sp, #112]	; 0x70
   19c78:	ldr	r0, [sp, #112]	; 0x70
   19c7c:	cmp	r0, #0
   19c80:	beq	19f04 <elf32_fsize@plt+0x884c>
   19c84:	ldr	ip, [sp, #36]	; 0x24
   19c88:	ldrb	r3, [ip]
   19c8c:	cmp	r3, #1
   19c90:	revne	r0, r0
   19c94:	strne	r0, [sp, #112]	; 0x70
   19c98:	ldr	ip, [sp, #24]
   19c9c:	rsb	r3, r8, ip
   19ca0:	cmp	r3, r0
   19ca4:	blt	1a1f8 <elf32_fsize@plt+0x8b40>
   19ca8:	cmn	r0, #-2147483646	; 0x80000002
   19cac:	bhi	1a1f8 <elf32_fsize@plt+0x8b40>
   19cb0:	cmp	r5, #1
   19cb4:	add	r8, r8, r0
   19cb8:	bne	19bd0 <elf32_fsize@plt+0x8518>
   19cbc:	add	r7, r4, #4
   19cc0:	cmp	r8, r7
   19cc4:	bls	19c2c <elf32_fsize@plt+0x8574>
   19cc8:	str	r6, [sp, #32]
   19ccc:	mov	sl, #0
   19cd0:	mov	r6, r7
   19cd4:	b	19d4c <elf32_fsize@plt+0x8694>
   19cd8:	mov	r4, #0
   19cdc:	mov	r5, #0
   19ce0:	mov	r0, r6
   19ce4:	mov	r1, #0
   19ce8:	rsb	r2, r6, r8
   19cec:	bl	115a4 <memchr@plt>
   19cf0:	subs	ip, r0, #0
   19cf4:	beq	1a0b0 <elf32_fsize@plt+0x89f8>
   19cf8:	add	r6, ip, #1
   19cfc:	add	r1, sp, #116	; 0x74
   19d00:	add	r3, sp, #120	; 0x78
   19d04:	str	r1, [sp, #8]
   19d08:	mov	r2, r7
   19d0c:	strd	r4, [sp]
   19d10:	ldr	r0, [sp, #16]
   19d14:	str	r3, [sp, #12]
   19d18:	ldr	r1, [sp, #20]
   19d1c:	str	sl, [sp, #116]	; 0x74
   19d20:	str	sl, [sp, #120]	; 0x78
   19d24:	bl	1ff64 <elf32_fsize@plt+0xe8ac>
   19d28:	cmp	r0, #0
   19d2c:	beq	19e60 <elf32_fsize@plt+0x87a8>
   19d30:	tst	fp, #1
   19d34:	bne	19d44 <elf32_fsize@plt+0x868c>
   19d38:	ldr	r0, [sp, #120]	; 0x78
   19d3c:	cmp	r0, #0
   19d40:	beq	1a048 <elf32_fsize@plt+0x8990>
   19d44:	cmp	r8, r6
   19d48:	bls	19ec4 <elf32_fsize@plt+0x880c>
   19d4c:	ldrb	r2, [r6]
   19d50:	add	r9, r6, #1
   19d54:	mov	r3, #0
   19d58:	tst	r2, #128	; 0x80
   19d5c:	and	r2, r2, #127	; 0x7f
   19d60:	uxtb	r2, r2
   19d64:	moveq	r7, r2
   19d68:	bne	1a31c <elf32_fsize@plt+0x8c64>
   19d6c:	cmp	r7, #32
   19d70:	mov	fp, r7
   19d74:	beq	19d84 <elf32_fsize@plt+0x86cc>
   19d78:	tst	r7, #1
   19d7c:	movne	r6, r9
   19d80:	bne	19cd8 <elf32_fsize@plt+0x8620>
   19d84:	ldrb	r4, [r9]
   19d88:	add	r6, r9, #1
   19d8c:	mov	r5, #0
   19d90:	tst	r4, #128	; 0x80
   19d94:	and	r4, r4, #127	; 0x7f
   19d98:	uxtb	r4, r4
   19d9c:	bne	1a374 <elf32_fsize@plt+0x8cbc>
   19da0:	cmp	r8, r6
   19da4:	bcc	1a10c <elf32_fsize@plt+0x8a54>
   19da8:	cmp	r7, #32
   19dac:	beq	19ce0 <elf32_fsize@plt+0x8628>
   19db0:	tst	r7, #1
   19db4:	beq	19cfc <elf32_fsize@plt+0x8644>
   19db8:	b	19ce0 <elf32_fsize@plt+0x8628>
   19dbc:	movw	r1, #7828	; 0x1e94
   19dc0:	mov	r0, #0
   19dc4:	movt	r1, #2
   19dc8:	mov	r2, #5
   19dcc:	bl	113b8 <dcgettext@plt>
   19dd0:	ldr	r5, [sp, #16]
   19dd4:	ldr	r1, [sp, #168]	; 0xa8
   19dd8:	mov	r4, r0
   19ddc:	add	r0, r5, #16
   19de0:	bl	12670 <elf32_fsize@plt+0xfb8>
   19de4:	mov	r1, r4
   19de8:	ldr	r2, [sp, #168]	; 0xa8
   19dec:	mov	r3, r0
   19df0:	mov	r0, #1
   19df4:	bl	11580 <__printf_chk@plt>
   19df8:	movw	r3, #37252	; 0x9184
   19dfc:	movt	r3, #3
   19e00:	ldr	r2, [r3, #4]
   19e04:	add	r2, r2, #1
   19e08:	str	r2, [r3, #4]
   19e0c:	ldr	r5, [sp, #40]	; 0x28
   19e10:	ldr	r2, [sp, #124]	; 0x7c
   19e14:	ldr	r3, [r5]
   19e18:	cmp	r2, r3
   19e1c:	bne	1a500 <elf32_fsize@plt+0x8e48>
   19e20:	add	sp, sp, #132	; 0x84
   19e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e28:	movw	r1, #18760	; 0x4948
   19e2c:	movt	r1, #2
   19e30:	mov	r0, #0
   19e34:	mov	r2, #5
   19e38:	bl	113b8 <dcgettext@plt>
   19e3c:	ldr	ip, [sp, #16]
   19e40:	ldr	r1, [sp, #168]	; 0xa8
   19e44:	mov	r4, r0
   19e48:	add	r0, ip, #16
   19e4c:	b	19de0 <elf32_fsize@plt+0x8728>
   19e50:	movw	r1, #18816	; 0x4980
   19e54:	mov	r0, #0
   19e58:	movt	r1, #2
   19e5c:	b	19e34 <elf32_fsize@plt+0x877c>
   19e60:	mov	r2, #5
   19e64:	movw	r1, #19588	; 0x4c84
   19e68:	movt	r1, #2
   19e6c:	bl	113b8 <dcgettext@plt>
   19e70:	ldr	r5, [sp, #16]
   19e74:	ldr	r1, [sp, #168]	; 0xa8
   19e78:	mov	r4, r0
   19e7c:	add	r0, r5, #16
   19e80:	bl	12670 <elf32_fsize@plt+0xfb8>
   19e84:	ldr	ip, [sp, #28]
   19e88:	mov	r1, r4
   19e8c:	ldr	r2, [ip]
   19e90:	str	fp, [sp, #4]
   19e94:	rsb	r9, r2, r9
   19e98:	ldr	r2, [sp, #168]	; 0xa8
   19e9c:	str	r9, [sp]
   19ea0:	mov	r3, r0
   19ea4:	mov	r0, #1
   19ea8:	bl	11580 <__printf_chk@plt>
   19eac:	ldr	r4, [sp, #32]
   19eb0:	cmp	r8, r6
   19eb4:	ldr	r3, [r4, #4]
   19eb8:	add	r3, r3, #1
   19ebc:	str	r3, [r4, #4]
   19ec0:	bhi	19d4c <elf32_fsize@plt+0x8694>
   19ec4:	ldr	ip, [sp, #24]
   19ec8:	ldr	r6, [sp, #32]
   19ecc:	cmp	ip, r8
   19ed0:	bhi	19c38 <elf32_fsize@plt+0x8580>
   19ed4:	ldr	r4, [sp, #28]
   19ed8:	mov	r7, r6
   19edc:	ldr	r5, [r4, #12]
   19ee0:	ldr	r6, [r4]
   19ee4:	add	r4, r6, r5
   19ee8:	ldr	ip, [sp, #24]
   19eec:	rsb	r3, ip, r4
   19ef0:	cmp	r3, #3
   19ef4:	bls	1a198 <elf32_fsize@plt+0x8ae0>
   19ef8:	mov	r9, ip
   19efc:	mov	r8, ip
   19f00:	b	19b20 <elf32_fsize@plt+0x8468>
   19f04:	mov	r2, #5
   19f08:	movw	r1, #19228	; 0x4b1c
   19f0c:	movt	r1, #2
   19f10:	add	r8, r4, #4
   19f14:	bl	113b8 <dcgettext@plt>
   19f18:	ldr	ip, [sp, #16]
   19f1c:	ldr	r1, [sp, #168]	; 0xa8
   19f20:	mov	r5, r0
   19f24:	add	r0, ip, #16
   19f28:	bl	12670 <elf32_fsize@plt+0xfb8>
   19f2c:	ldr	ip, [sp, #28]
   19f30:	mov	r1, r5
   19f34:	ldr	r2, [ip]
   19f38:	rsb	r2, r2, r4
   19f3c:	str	r2, [sp]
   19f40:	ldr	r2, [sp, #168]	; 0xa8
   19f44:	mov	r3, r0
   19f48:	mov	r0, #1
   19f4c:	bl	11580 <__printf_chk@plt>
   19f50:	ldr	r3, [r6, #4]
   19f54:	add	r3, r3, #1
   19f58:	str	r3, [r6, #4]
   19f5c:	b	19c2c <elf32_fsize@plt+0x8574>
   19f60:	mov	r2, #5
   19f64:	movw	r1, #19724	; 0x4d0c
   19f68:	mov	r0, #0
   19f6c:	movt	r1, #2
   19f70:	bl	113b8 <dcgettext@plt>
   19f74:	ldr	r5, [sp, #16]
   19f78:	ldr	r1, [sp, #168]	; 0xa8
   19f7c:	mov	r4, r0
   19f80:	add	r0, r5, #16
   19f84:	bl	12670 <elf32_fsize@plt+0xfb8>
   19f88:	ldr	ip, [sp, #28]
   19f8c:	mov	r1, r4
   19f90:	ldr	r4, [sp, #20]
   19f94:	ldr	r5, [sp, #24]
   19f98:	ldr	r2, [ip]
   19f9c:	str	r4, [sp, #4]
   19fa0:	rsb	r2, r2, r5
   19fa4:	str	r2, [sp]
   19fa8:	ldr	r2, [sp, #168]	; 0xa8
   19fac:	mov	r3, r0
   19fb0:	mov	r0, #1
   19fb4:	bl	11580 <__printf_chk@plt>
   19fb8:	ldr	ip, [sp, #28]
   19fbc:	ldr	r4, [sp, #24]
   19fc0:	ldr	r3, [r7, #4]
   19fc4:	ldr	r6, [ip]
   19fc8:	ldr	r5, [ip, #12]
   19fcc:	add	r3, r3, #1
   19fd0:	str	r4, [sp, #44]	; 0x2c
   19fd4:	str	r3, [r7, #4]
   19fd8:	add	r4, r6, r5
   19fdc:	b	19ee8 <elf32_fsize@plt+0x8830>
   19fe0:	mov	r2, #5
   19fe4:	movw	r1, #18868	; 0x49b4
   19fe8:	mov	r0, r4
   19fec:	movt	r1, #2
   19ff0:	bl	113b8 <dcgettext@plt>
   19ff4:	ldr	ip, [sp, #16]
   19ff8:	ldr	r1, [sp, #168]	; 0xa8
   19ffc:	mov	r5, r0
   1a000:	add	r0, ip, #16
   1a004:	bl	12670 <elf32_fsize@plt+0xfb8>
   1a008:	ldr	ip, [sp, #28]
   1a00c:	mov	r1, r5
   1a010:	ldr	r2, [ip]
   1a014:	rsb	r2, r2, r8
   1a018:	str	r2, [sp]
   1a01c:	ldr	r2, [sp, #168]	; 0xa8
   1a020:	mov	r3, r0
   1a024:	mov	r0, #1
   1a028:	bl	11580 <__printf_chk@plt>
   1a02c:	ldr	ip, [sp, #28]
   1a030:	ldr	r3, [r7, #4]
   1a034:	ldr	r5, [ip, #12]
   1a038:	add	r3, r3, #1
   1a03c:	ldr	r6, [ip]
   1a040:	str	r3, [r7, #4]
   1a044:	b	19b34 <elf32_fsize@plt+0x847c>
   1a048:	mov	r2, #5
   1a04c:	movw	r1, #19652	; 0x4cc4
   1a050:	movt	r1, #2
   1a054:	bl	113b8 <dcgettext@plt>
   1a058:	ldr	ip, [sp, #16]
   1a05c:	ldr	r1, [sp, #168]	; 0xa8
   1a060:	mov	fp, r0
   1a064:	add	r0, ip, #16
   1a068:	bl	12670 <elf32_fsize@plt+0xfb8>
   1a06c:	ldr	ip, [sp, #28]
   1a070:	ldr	r2, [sp, #116]	; 0x74
   1a074:	mov	r1, fp
   1a078:	ldr	lr, [ip]
   1a07c:	strd	r4, [sp, #8]
   1a080:	rsb	r9, lr, r9
   1a084:	str	r2, [sp, #4]
   1a088:	str	r9, [sp]
   1a08c:	ldr	r2, [sp, #168]	; 0xa8
   1a090:	mov	r3, r0
   1a094:	mov	r0, #1
   1a098:	bl	11580 <__printf_chk@plt>
   1a09c:	ldr	r4, [sp, #32]
   1a0a0:	ldr	r3, [r4, #4]
   1a0a4:	add	r3, r3, #1
   1a0a8:	str	r3, [r4, #4]
   1a0ac:	b	19d44 <elf32_fsize@plt+0x868c>
   1a0b0:	ldr	r6, [sp, #32]
   1a0b4:	movw	r1, #19520	; 0x4c40
   1a0b8:	movt	r1, #2
   1a0bc:	mov	r2, #5
   1a0c0:	bl	113b8 <dcgettext@plt>
   1a0c4:	ldr	r5, [sp, #16]
   1a0c8:	ldr	r1, [sp, #168]	; 0xa8
   1a0cc:	mov	r4, r0
   1a0d0:	add	r0, r5, #16
   1a0d4:	bl	12670 <elf32_fsize@plt+0xfb8>
   1a0d8:	ldr	ip, [sp, #28]
   1a0dc:	mov	r1, r4
   1a0e0:	ldr	r2, [ip]
   1a0e4:	rsb	r9, r2, r9
   1a0e8:	ldr	r2, [sp, #168]	; 0xa8
   1a0ec:	str	r9, [sp]
   1a0f0:	mov	r3, r0
   1a0f4:	mov	r0, #1
   1a0f8:	bl	11580 <__printf_chk@plt>
   1a0fc:	ldr	r3, [r6, #4]
   1a100:	add	r3, r3, #1
   1a104:	str	r3, [r6, #4]
   1a108:	b	19c2c <elf32_fsize@plt+0x8574>
   1a10c:	movw	r1, #19452	; 0x4bfc
   1a110:	ldr	r6, [sp, #32]
   1a114:	mov	r0, #0
   1a118:	movt	r1, #2
   1a11c:	mov	r2, #5
   1a120:	b	1a0c0 <elf32_fsize@plt+0x8a08>
   1a124:	mov	r2, #5
   1a128:	movw	r1, #18940	; 0x49fc
   1a12c:	mov	r0, #0
   1a130:	movt	r1, #2
   1a134:	bl	113b8 <dcgettext@plt>
   1a138:	ldr	r5, [sp, #16]
   1a13c:	ldr	r1, [sp, #168]	; 0xa8
   1a140:	mov	r4, r0
   1a144:	add	r0, r5, #16
   1a148:	bl	12670 <elf32_fsize@plt+0xfb8>
   1a14c:	ldr	ip, [sp, #28]
   1a150:	mov	r1, r4
   1a154:	str	r9, [sp, #44]	; 0x2c
   1a158:	ldr	r2, [ip]
   1a15c:	rsb	r8, r2, r8
   1a160:	ldr	r2, [sp, #168]	; 0xa8
   1a164:	str	r8, [sp]
   1a168:	mov	r3, r0
   1a16c:	mov	r0, #1
   1a170:	bl	11580 <__printf_chk@plt>
   1a174:	movw	r3, #37252	; 0x9184
   1a178:	movt	r3, #3
   1a17c:	ldr	r5, [sp, #28]
   1a180:	ldr	r2, [r3, #4]
   1a184:	ldr	r4, [r5]
   1a188:	add	r2, r2, #1
   1a18c:	str	r2, [r3, #4]
   1a190:	ldr	r3, [r5, #12]
   1a194:	add	r4, r4, r3
   1a198:	ldr	ip, [sp, #44]	; 0x2c
   1a19c:	cmp	r4, ip
   1a1a0:	beq	19e0c <elf32_fsize@plt+0x8754>
   1a1a4:	mov	r2, #5
   1a1a8:	movw	r1, #19780	; 0x4d44
   1a1ac:	mov	r0, #0
   1a1b0:	movt	r1, #2
   1a1b4:	bl	113b8 <dcgettext@plt>
   1a1b8:	ldr	r5, [sp, #16]
   1a1bc:	ldr	r1, [sp, #168]	; 0xa8
   1a1c0:	mov	r4, r0
   1a1c4:	add	r0, r5, #16
   1a1c8:	bl	12670 <elf32_fsize@plt+0xfb8>
   1a1cc:	ldr	r5, [sp, #28]
   1a1d0:	mov	r1, r4
   1a1d4:	ldr	r4, [sp, #44]	; 0x2c
   1a1d8:	ldr	r2, [sp, #168]	; 0xa8
   1a1dc:	ldr	ip, [r5]
   1a1e0:	rsb	ip, ip, r4
   1a1e4:	str	ip, [sp]
   1a1e8:	mov	r3, r0
   1a1ec:	mov	r0, #1
   1a1f0:	bl	11580 <__printf_chk@plt>
   1a1f4:	b	19df8 <elf32_fsize@plt+0x8740>
   1a1f8:	movw	r1, #19304	; 0x4b68
   1a1fc:	movt	r1, #2
   1a200:	mov	r7, r6
   1a204:	mov	r0, #0
   1a208:	mov	r2, #5
   1a20c:	bl	113b8 <dcgettext@plt>
   1a210:	ldr	ip, [sp, #16]
   1a214:	ldr	r1, [sp, #168]	; 0xa8
   1a218:	mov	r5, r0
   1a21c:	add	r0, ip, #16
   1a220:	bl	12670 <elf32_fsize@plt+0xfb8>
   1a224:	ldr	ip, [sp, #28]
   1a228:	mov	r1, r5
   1a22c:	ldr	r2, [ip]
   1a230:	rsb	r4, r2, r4
   1a234:	str	r4, [sp]
   1a238:	mov	r3, r0
   1a23c:	mov	r0, #1
   1a240:	ldr	r2, [sp, #168]	; 0xa8
   1a244:	bl	11580 <__printf_chk@plt>
   1a248:	ldr	r5, [sp, #28]
   1a24c:	ldr	r3, [r7, #4]
   1a250:	ldr	r6, [r5]
   1a254:	add	r3, r3, #1
   1a258:	ldr	r5, [r5, #12]
   1a25c:	str	r3, [r7, #4]
   1a260:	add	r4, r6, r5
   1a264:	b	19ee8 <elf32_fsize@plt+0x8830>
   1a268:	mov	r2, #5
   1a26c:	movw	r1, #19084	; 0x4a8c
   1a270:	mov	r0, #0
   1a274:	movt	r1, #2
   1a278:	bl	113b8 <dcgettext@plt>
   1a27c:	ldr	r5, [sp, #16]
   1a280:	ldr	r1, [sp, #168]	; 0xa8
   1a284:	mov	r7, r6
   1a288:	mov	r4, r0
   1a28c:	add	r0, r5, #16
   1a290:	bl	12670 <elf32_fsize@plt+0xfb8>
   1a294:	ldr	ip, [sp, #28]
   1a298:	mov	r1, r4
   1a29c:	ldr	r2, [ip]
   1a2a0:	rsb	r8, r2, r8
   1a2a4:	str	r8, [sp]
   1a2a8:	mov	r3, r0
   1a2ac:	mov	r0, #1
   1a2b0:	b	1a240 <elf32_fsize@plt+0x8b88>
   1a2b4:	movw	r1, #19164	; 0x4adc
   1a2b8:	mov	r7, r6
   1a2bc:	mov	r0, #0
   1a2c0:	movt	r1, #2
   1a2c4:	b	1a208 <elf32_fsize@plt+0x8b50>
   1a2c8:	ldr	r9, [sp, #24]
   1a2cc:	mov	r2, #5
   1a2d0:	movw	r1, #19012	; 0x4a44
   1a2d4:	movt	r1, #2
   1a2d8:	str	r9, [sp, #44]	; 0x2c
   1a2dc:	bl	113b8 <dcgettext@plt>
   1a2e0:	ldr	r5, [sp, #16]
   1a2e4:	ldr	r1, [sp, #168]	; 0xa8
   1a2e8:	mov	r4, r0
   1a2ec:	add	r0, r5, #16
   1a2f0:	bl	12670 <elf32_fsize@plt+0xfb8>
   1a2f4:	ldr	r5, [sp, #28]
   1a2f8:	ldr	r9, [sp, #24]
   1a2fc:	mov	r1, r4
   1a300:	ldr	r2, [sp, #168]	; 0xa8
   1a304:	ldr	ip, [r5]
   1a308:	rsb	ip, ip, r9
   1a30c:	str	ip, [sp]
   1a310:	mov	r3, r0
   1a314:	mov	r0, #1
   1a318:	b	1a170 <elf32_fsize@plt+0x8ab8>
   1a31c:	cmp	r8, r6
   1a320:	bls	1a55c <elf32_fsize@plt+0x8ea4>
   1a324:	rsb	r5, r6, r8
   1a328:	cmp	r5, #9
   1a32c:	movhi	r5, #10
   1a330:	bls	1a554 <elf32_fsize@plt+0x8e9c>
   1a334:	ldrb	r1, [r6, #1]
   1a338:	add	r9, r6, #2
   1a33c:	and	r0, r1, #127	; 0x7f
   1a340:	tst	r1, #128	; 0x80
   1a344:	uxtb	r0, r0
   1a348:	lsr	r4, r0, #25
   1a34c:	lsl	ip, r0, #7
   1a350:	str	r4, [sp, #84]	; 0x54
   1a354:	movne	r4, #1
   1a358:	str	ip, [sp, #80]	; 0x50
   1a35c:	ldrd	r6, [sp, #80]	; 0x50
   1a360:	orr	r6, r6, r2
   1a364:	orr	r7, r7, r3
   1a368:	bne	1a504 <elf32_fsize@plt+0x8e4c>
   1a36c:	mov	r7, r6
   1a370:	b	19d6c <elf32_fsize@plt+0x86b4>
   1a374:	cmp	r8, r9
   1a378:	bls	1a490 <elf32_fsize@plt+0x8dd8>
   1a37c:	rsb	r2, r9, r8
   1a380:	cmp	r2, #9
   1a384:	movhi	ip, #10
   1a388:	bls	1a484 <elf32_fsize@plt+0x8dcc>
   1a38c:	ldrb	r2, [r9, #1]
   1a390:	add	r6, r9, #2
   1a394:	and	r0, r2, #127	; 0x7f
   1a398:	tst	r2, #128	; 0x80
   1a39c:	uxtb	r0, r0
   1a3a0:	lsl	r3, r0, #7
   1a3a4:	lsr	r2, r0, #25
   1a3a8:	str	r3, [sp, #88]	; 0x58
   1a3ac:	movne	r3, #1
   1a3b0:	str	r2, [sp, #92]	; 0x5c
   1a3b4:	ldrd	r0, [sp, #88]	; 0x58
   1a3b8:	orr	r5, r5, r1
   1a3bc:	orr	r4, r4, r0
   1a3c0:	movne	r1, r3
   1a3c4:	strdne	r4, [sp, #96]	; 0x60
   1a3c8:	beq	19da0 <elf32_fsize@plt+0x86e8>
   1a3cc:	add	r1, r1, #1
   1a3d0:	cmp	ip, r1
   1a3d4:	bls	1a490 <elf32_fsize@plt+0x8dd8>
   1a3d8:	ldrb	lr, [r6], #1
   1a3dc:	rsb	r0, r1, r1, lsl #3
   1a3e0:	sub	r5, r0, #32
   1a3e4:	rsb	r4, r0, #32
   1a3e8:	and	r2, lr, #127	; 0x7f
   1a3ec:	tst	lr, #128	; 0x80
   1a3f0:	uxtb	r2, r2
   1a3f4:	lsl	r5, r2, r5
   1a3f8:	lsl	r0, r2, r0
   1a3fc:	orr	r4, r5, r2, lsr r4
   1a400:	str	r0, [sp, #64]	; 0x40
   1a404:	str	r4, [sp, #68]	; 0x44
   1a408:	ldrd	r2, [sp, #64]	; 0x40
   1a40c:	ldrd	r4, [sp, #96]	; 0x60
   1a410:	orr	r4, r4, r2
   1a414:	orr	r5, r5, r3
   1a418:	strd	r4, [sp, #96]	; 0x60
   1a41c:	bne	1a3cc <elf32_fsize@plt+0x8d14>
   1a420:	ldrd	r4, [sp, #96]	; 0x60
   1a424:	b	19da0 <elf32_fsize@plt+0x86e8>
   1a428:	ldr	r5, [sp, #24]
   1a42c:	cmp	r5, r8
   1a430:	bls	1a4f8 <elf32_fsize@plt+0x8e40>
   1a434:	rsb	r3, r8, r5
   1a438:	cmp	r3, #9
   1a43c:	movhi	r9, #10
   1a440:	bls	1a4ec <elf32_fsize@plt+0x8e34>
   1a444:	ldrb	r3, [r8, #1]
   1a448:	add	r4, r8, #2
   1a44c:	and	r2, r3, #127	; 0x7f
   1a450:	tst	r3, #128	; 0x80
   1a454:	uxtb	r2, r2
   1a458:	movne	r7, #1
   1a45c:	lsr	r5, r2, #25
   1a460:	lsl	ip, r2, #7
   1a464:	str	r5, [sp, #76]	; 0x4c
   1a468:	str	ip, [sp, #72]	; 0x48
   1a46c:	ldrd	sl, [sp, #72]	; 0x48
   1a470:	orr	sl, sl, r0
   1a474:	orr	fp, fp, r1
   1a478:	bne	1a49c <elf32_fsize@plt+0x8de4>
   1a47c:	mov	r5, sl
   1a480:	b	19c54 <elf32_fsize@plt+0x859c>
   1a484:	cmp	r2, #1
   1a488:	movhi	ip, r2
   1a48c:	bhi	1a38c <elf32_fsize@plt+0x8cd4>
   1a490:	mvn	r4, #0
   1a494:	mvn	r5, #0
   1a498:	b	19da0 <elf32_fsize@plt+0x86e8>
   1a49c:	add	r7, r7, #1
   1a4a0:	cmp	r7, r9
   1a4a4:	bcs	1a4f8 <elf32_fsize@plt+0x8e40>
   1a4a8:	ldrb	r0, [r4], #1
   1a4ac:	rsb	r1, r7, r7, lsl #3
   1a4b0:	sub	r5, r1, #32
   1a4b4:	rsb	ip, r1, #32
   1a4b8:	and	r2, r0, #127	; 0x7f
   1a4bc:	tst	r0, #128	; 0x80
   1a4c0:	uxtb	r2, r2
   1a4c4:	lsl	r5, r2, r5
   1a4c8:	lsl	r1, r2, r1
   1a4cc:	orr	ip, r5, r2, lsr ip
   1a4d0:	str	r1, [sp, #48]	; 0x30
   1a4d4:	str	ip, [sp, #52]	; 0x34
   1a4d8:	ldrd	r0, [sp, #48]	; 0x30
   1a4dc:	orr	sl, sl, r0
   1a4e0:	orr	fp, fp, r1
   1a4e4:	beq	1a47c <elf32_fsize@plt+0x8dc4>
   1a4e8:	b	1a49c <elf32_fsize@plt+0x8de4>
   1a4ec:	cmp	r3, #1
   1a4f0:	movhi	r9, r3
   1a4f4:	bhi	1a444 <elf32_fsize@plt+0x8d8c>
   1a4f8:	mvn	r5, #0
   1a4fc:	b	19c54 <elf32_fsize@plt+0x859c>
   1a500:	bl	113dc <__stack_chk_fail@plt>
   1a504:	add	r4, r4, #1
   1a508:	cmp	r5, r4
   1a50c:	bls	1a55c <elf32_fsize@plt+0x8ea4>
   1a510:	ldrb	r0, [r9], #1
   1a514:	rsb	r1, r4, r4, lsl #3
   1a518:	sub	lr, r1, #32
   1a51c:	rsb	ip, r1, #32
   1a520:	and	r2, r0, #127	; 0x7f
   1a524:	tst	r0, #128	; 0x80
   1a528:	uxtb	r2, r2
   1a52c:	lsl	lr, r2, lr
   1a530:	lsl	r1, r2, r1
   1a534:	orr	ip, lr, r2, lsr ip
   1a538:	str	r1, [sp, #56]	; 0x38
   1a53c:	str	ip, [sp, #60]	; 0x3c
   1a540:	ldrd	r0, [sp, #56]	; 0x38
   1a544:	orr	r6, r6, r0
   1a548:	orr	r7, r7, r1
   1a54c:	beq	1a36c <elf32_fsize@plt+0x8cb4>
   1a550:	b	1a504 <elf32_fsize@plt+0x8e4c>
   1a554:	cmp	r5, #1
   1a558:	bhi	1a334 <elf32_fsize@plt+0x8c7c>
   1a55c:	mvn	fp, #0
   1a560:	mov	r6, r9
   1a564:	mov	r7, fp
   1a568:	b	19cd8 <elf32_fsize@plt+0x8620>
   1a56c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a570:	movw	r4, #37240	; 0x9178
   1a574:	sub	sp, sp, #788	; 0x314
   1a578:	movt	r4, #3
   1a57c:	ldrd	r2, [r1, #40]	; 0x28
   1a580:	str	r1, [sp, #100]	; 0x64
   1a584:	ldr	r1, [r4]
   1a588:	orrs	r5, r2, r3
   1a58c:	str	r4, [sp, #112]	; 0x70
   1a590:	str	r0, [sp, #76]	; 0x4c
   1a594:	str	r1, [sp, #780]	; 0x30c
   1a598:	bne	1a5b8 <elf32_fsize@plt+0x8f00>
   1a59c:	ldr	r4, [sp, #112]	; 0x70
   1a5a0:	ldr	r2, [sp, #780]	; 0x30c
   1a5a4:	ldr	r3, [r4]
   1a5a8:	cmp	r2, r3
   1a5ac:	bne	1d794 <elf32_fsize@plt+0xc0dc>
   1a5b0:	add	sp, sp, #788	; 0x314
   1a5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5b8:	movw	r8, #37252	; 0x9184
   1a5bc:	movt	r8, #3
   1a5c0:	mov	r1, #4
   1a5c4:	ldr	r0, [r8, #8]
   1a5c8:	bl	20128 <elf32_fsize@plt+0xea70>
   1a5cc:	ldr	r6, [sp, #76]	; 0x4c
   1a5d0:	mov	r1, #0
   1a5d4:	str	r0, [r8, #32]
   1a5d8:	ldr	r0, [r6, #16]
   1a5dc:	bl	11628 <elf_getscn@plt>
   1a5e0:	add	r1, sp, #224	; 0xe0
   1a5e4:	bl	1134c <gelf_getshdr@plt>
   1a5e8:	subs	r4, r0, #0
   1a5ec:	movweq	r1, #19864	; 0x4d98
   1a5f0:	moveq	r2, #5
   1a5f4:	movteq	r1, #2
   1a5f8:	beq	1beac <elf32_fsize@plt+0xa7f4>
   1a5fc:	ldr	r3, [r4]
   1a600:	cmp	r3, #0
   1a604:	bne	1bfdc <elf32_fsize@plt+0xa924>
   1a608:	ldr	r3, [r4, #4]
   1a60c:	cmp	r3, #0
   1a610:	bne	1c00c <elf32_fsize@plt+0xa954>
   1a614:	ldrd	r2, [r4, #8]
   1a618:	orrs	r7, r2, r3
   1a61c:	bne	1bfac <elf32_fsize@plt+0xa8f4>
   1a620:	ldrd	r2, [r4, #16]
   1a624:	orrs	r9, r2, r3
   1a628:	bne	1bf7c <elf32_fsize@plt+0xa8c4>
   1a62c:	ldrd	r2, [r4, #24]
   1a630:	orrs	ip, r2, r3
   1a634:	bne	1bf4c <elf32_fsize@plt+0xa894>
   1a638:	ldrd	r2, [r4, #48]	; 0x30
   1a63c:	orrs	lr, r2, r3
   1a640:	bne	1bf1c <elf32_fsize@plt+0xa864>
   1a644:	ldrd	r2, [r4, #56]	; 0x38
   1a648:	orrs	r0, r2, r3
   1a64c:	bne	1beec <elf32_fsize@plt+0xa834>
   1a650:	ldrd	r2, [r4, #32]
   1a654:	orrs	r1, r2, r3
   1a658:	beq	1a66c <elf32_fsize@plt+0x8fb4>
   1a65c:	ldr	r5, [sp, #100]	; 0x64
   1a660:	ldrh	r3, [r5, #60]	; 0x3c
   1a664:	cmp	r3, #0
   1a668:	bne	1c6cc <elf32_fsize@plt+0xb014>
   1a66c:	ldr	r3, [r4, #40]	; 0x28
   1a670:	cmp	r3, #0
   1a674:	beq	1a6b8 <elf32_fsize@plt+0x9000>
   1a678:	ldr	r6, [sp, #100]	; 0x64
   1a67c:	movw	r3, #65535	; 0xffff
   1a680:	ldrh	r2, [r6, #62]	; 0x3e
   1a684:	cmp	r2, r3
   1a688:	beq	1a6b8 <elf32_fsize@plt+0x9000>
   1a68c:	mov	r2, #5
   1a690:	movw	r1, #20260	; 0x4f24
   1a694:	mov	r0, #0
   1a698:	movt	r1, #2
   1a69c:	bl	113b8 <dcgettext@plt>
   1a6a0:	mov	r1, r0
   1a6a4:	mov	r0, #1
   1a6a8:	bl	11580 <__printf_chk@plt>
   1a6ac:	ldr	r3, [r8, #4]
   1a6b0:	add	r3, r3, #1
   1a6b4:	str	r3, [r8, #4]
   1a6b8:	ldr	r3, [r4, #44]	; 0x2c
   1a6bc:	cmp	r3, #0
   1a6c0:	bne	1be88 <elf32_fsize@plt+0xa7d0>
   1a6c4:	ldr	r0, [r8, #16]
   1a6c8:	mov	r1, #4
   1a6cc:	bl	20128 <elf32_fsize@plt+0xea70>
   1a6d0:	ldr	r2, [r8, #8]
   1a6d4:	movw	r3, #37252	; 0x9184
   1a6d8:	movt	r3, #3
   1a6dc:	cmp	r2, #1
   1a6e0:	str	r0, [sp, #136]	; 0x88
   1a6e4:	bls	1d798 <elf32_fsize@plt+0xc0e0>
   1a6e8:	movw	r9, #3620	; 0xe24
   1a6ec:	movt	r9, #2
   1a6f0:	add	ip, r9, #1744	; 0x6d0
   1a6f4:	mov	fp, r8
   1a6f8:	mov	r4, #0
   1a6fc:	add	ip, ip, #12
   1a700:	mov	r5, #1
   1a704:	str	r9, [sp, #120]	; 0x78
   1a708:	str	r4, [sp, #124]	; 0x7c
   1a70c:	str	ip, [sp, #116]	; 0x74
   1a710:	str	r4, [sp, #144]	; 0x90
   1a714:	str	r4, [sp, #140]	; 0x8c
   1a718:	str	r4, [sp, #132]	; 0x84
   1a71c:	str	r5, [sp, #72]	; 0x48
   1a720:	ldr	r6, [sp, #76]	; 0x4c
   1a724:	ldr	r1, [sp, #72]	; 0x48
   1a728:	ldr	r0, [r6, #16]
   1a72c:	bl	11628 <elf_getscn@plt>
   1a730:	add	r1, sp, #224	; 0xe0
   1a734:	str	r0, [sp, #96]	; 0x60
   1a738:	bl	1134c <gelf_getshdr@plt>
   1a73c:	subs	r9, r0, #0
   1a740:	beq	1b6b8 <elf32_fsize@plt+0xa000>
   1a744:	ldr	r8, [sp, #76]	; 0x4c
   1a748:	ldr	r1, [fp, #12]
   1a74c:	ldr	r2, [r9]
   1a750:	ldr	r0, [r8, #16]
   1a754:	bl	11430 <elf_strptr@plt>
   1a758:	subs	r6, r0, #0
   1a75c:	beq	1c1bc <elf32_fsize@plt+0xab04>
   1a760:	mov	r8, #0
   1a764:	str	r9, [sp, #64]	; 0x40
   1a768:	mov	r4, r8
   1a76c:	mov	r9, r8
   1a770:	ldr	sl, [sp, #116]	; 0x74
   1a774:	b	1a788 <elf32_fsize@plt+0x90d0>
   1a778:	add	r4, r4, #1
   1a77c:	add	r9, r9, #24
   1a780:	cmp	r4, #36	; 0x24
   1a784:	beq	1b24c <elf32_fsize@plt+0x9b94>
   1a788:	mov	r3, sl
   1a78c:	mov	r0, r6
   1a790:	ldr	r7, [r3, r9]!
   1a794:	movw	r5, #3620	; 0xe24
   1a798:	movt	r5, #2
   1a79c:	ldr	r8, [r3, #4]
   1a7a0:	mov	r1, r7
   1a7a4:	mov	r2, r8
   1a7a8:	bl	11658 <strncmp@plt>
   1a7ac:	cmp	r0, #0
   1a7b0:	bne	1a778 <elf32_fsize@plt+0x90c0>
   1a7b4:	mov	sl, r8
   1a7b8:	lsl	r8, r4, #1
   1a7bc:	add	r3, r8, r4
   1a7c0:	cmp	sl, #5
   1a7c4:	ldr	r9, [sp, #64]	; 0x40
   1a7c8:	add	r5, r5, r3, lsl #3
   1a7cc:	ldr	r5, [r5, #1764]	; 0x6e4
   1a7d0:	beq	1b958 <elf32_fsize@plt+0xa2a0>
   1a7d4:	mov	r0, r5
   1a7d8:	ldr	r3, [r9, #4]
   1a7dc:	cmp	r3, r0
   1a7e0:	beq	1a82c <elf32_fsize@plt+0x9174>
   1a7e4:	cmp	r3, #8
   1a7e8:	bne	1b270 <elf32_fsize@plt+0x9bb8>
   1a7ec:	ldrb	r3, [fp, #22]
   1a7f0:	cmp	r3, #0
   1a7f4:	beq	1b270 <elf32_fsize@plt+0x9bb8>
   1a7f8:	cmp	sl, #11
   1a7fc:	beq	1c03c <elf32_fsize@plt+0xa984>
   1a800:	cmp	sl, #6
   1a804:	beq	1b254 <elf32_fsize@plt+0x9b9c>
   1a808:	cmp	sl, #10
   1a80c:	bne	1a82c <elf32_fsize@plt+0x9174>
   1a810:	mov	r0, r7
   1a814:	mov	r2, sl
   1a818:	movw	r1, #20556	; 0x504c
   1a81c:	movt	r1, #2
   1a820:	bl	11388 <memcmp@plt>
   1a824:	cmp	r0, #0
   1a828:	beq	1b270 <elf32_fsize@plt+0x9bb8>
   1a82c:	add	r8, r8, r4
   1a830:	ldr	r4, [sp, #120]	; 0x78
   1a834:	add	r8, r4, r8, lsl #3
   1a838:	ldr	r1, [r8, #1768]	; 0x6e8
   1a83c:	bic	r3, r1, #2
   1a840:	cmp	r3, #1
   1a844:	bne	1b4f8 <elf32_fsize@plt+0x9e40>
   1a848:	ldr	r7, [r8, #1772]	; 0x6ec
   1a84c:	mov	r3, #0
   1a850:	mvn	r4, #2688	; 0xa80
   1a854:	mvn	r5, #0
   1a858:	mov	r2, r7
   1a85c:	strd	r2, [sp, #80]	; 0x50
   1a860:	ldrd	r2, [r9, #8]
   1a864:	and	r4, r4, r2
   1a868:	and	r5, r5, r3
   1a86c:	ldrd	r2, [sp, #80]	; 0x50
   1a870:	cmp	r5, r3
   1a874:	cmpeq	r4, r2
   1a878:	beq	1a8f4 <elf32_fsize@plt+0x923c>
   1a87c:	cmp	r1, #1
   1a880:	beq	1a890 <elf32_fsize@plt+0x91d8>
   1a884:	ldrb	r3, [fp, #23]
   1a888:	cmp	r3, #0
   1a88c:	bne	1a8f4 <elf32_fsize@plt+0x923c>
   1a890:	movw	r1, #20624	; 0x5090
   1a894:	mov	r0, #0
   1a898:	movt	r1, #2
   1a89c:	mov	r2, #5
   1a8a0:	bl	113b8 <dcgettext@plt>
   1a8a4:	cmp	r7, #0
   1a8a8:	movweq	r4, #19856	; 0x4d90
   1a8ac:	movteq	r4, #2
   1a8b0:	mov	r5, r0
   1a8b4:	bne	1c660 <elf32_fsize@plt+0xafa8>
   1a8b8:	ldr	r3, [r9, #8]
   1a8bc:	bics	r0, r3, #128	; 0x80
   1a8c0:	movweq	r0, #19856	; 0x4d90
   1a8c4:	movteq	r0, #2
   1a8c8:	bne	1c654 <elf32_fsize@plt+0xaf9c>
   1a8cc:	str	r0, [sp, #4]
   1a8d0:	mov	r3, r6
   1a8d4:	str	r4, [sp]
   1a8d8:	mov	r1, r5
   1a8dc:	mov	r0, #1
   1a8e0:	ldr	r2, [sp, #72]	; 0x48
   1a8e4:	bl	11580 <__printf_chk@plt>
   1a8e8:	ldr	r3, [fp, #4]
   1a8ec:	add	r3, r3, #1
   1a8f0:	str	r3, [fp, #4]
   1a8f4:	movw	r1, #20760	; 0x5118
   1a8f8:	mov	r0, r6
   1a8fc:	movt	r1, #2
   1a900:	bl	11358 <strcmp@plt>
   1a904:	cmp	r0, #0
   1a908:	bne	1b49c <elf32_fsize@plt+0x9de4>
   1a90c:	ldr	r5, [sp, #100]	; 0x64
   1a910:	ldrh	r4, [r5, #16]
   1a914:	cmp	r4, #1
   1a918:	beq	1c524 <elf32_fsize@plt+0xae6c>
   1a91c:	ldrd	r2, [r9, #8]
   1a920:	mov	r0, #2
   1a924:	mov	r1, #0
   1a928:	and	r2, r2, r0
   1a92c:	and	r3, r3, r1
   1a930:	orrs	r7, r2, r3
   1a934:	bne	1bb00 <elf32_fsize@plt+0xa448>
   1a938:	ldrb	r3, [fp, #44]	; 0x2c
   1a93c:	cmp	r3, #0
   1a940:	moveq	r8, #1
   1a944:	streq	r8, [sp, #132]	; 0x84
   1a948:	bne	1c60c <elf32_fsize@plt+0xaf54>
   1a94c:	movw	r1, #21064	; 0x5248
   1a950:	mov	r0, r6
   1a954:	movt	r1, #2
   1a958:	bl	11358 <strcmp@plt>
   1a95c:	cmp	r0, #0
   1a960:	bne	1b024 <elf32_fsize@plt+0x996c>
   1a964:	ldr	ip, [sp, #72]	; 0x48
   1a968:	str	ip, [fp, #48]	; 0x30
   1a96c:	ldrd	r2, [r9, #56]	; 0x38
   1a970:	orrs	r6, r2, r3
   1a974:	beq	1a988 <elf32_fsize@plt+0x92d0>
   1a978:	ldrd	r0, [r9, #32]
   1a97c:	bl	2042c <elf32_fsize@plt+0xed74>
   1a980:	orrs	r7, r2, r3
   1a984:	bne	1bab4 <elf32_fsize@plt+0xa3fc>
   1a988:	ldr	ip, [sp, #76]	; 0x4c
   1a98c:	ldr	r1, [fp, #12]
   1a990:	ldr	r2, [r9]
   1a994:	ldr	r0, [ip, #16]
   1a998:	bl	11430 <elf_strptr@plt>
   1a99c:	cmp	r0, #0
   1a9a0:	beq	1c188 <elf32_fsize@plt+0xaad0>
   1a9a4:	ldr	r1, [r9, #4]
   1a9a8:	cmn	r1, #-1879048181	; 0x9000000b
   1a9ac:	cmpne	r1, #18
   1a9b0:	bls	1a9e4 <elf32_fsize@plt+0x932c>
   1a9b4:	add	r3, r1, #-1879048183	; 0x90000009
   1a9b8:	cmp	r3, #1
   1a9bc:	bls	1a9e4 <elf32_fsize@plt+0x932c>
   1a9c0:	add	r3, r1, #-1879048189	; 0x90000003
   1a9c4:	cmp	r3, #2
   1a9c8:	bls	1a9e4 <elf32_fsize@plt+0x932c>
   1a9cc:	mov	r2, #0
   1a9d0:	ldr	r0, [sp, #76]	; 0x4c
   1a9d4:	mov	r3, r2
   1a9d8:	bl	1f4d4 <elf32_fsize@plt+0xde1c>
   1a9dc:	cmp	r0, #0
   1a9e0:	beq	1c9cc <elf32_fsize@plt+0xb314>
   1a9e4:	ldrd	r4, [r9, #8]
   1a9e8:	movw	r6, #61448	; 0xf008
   1a9ec:	movt	r6, #65535	; 0xffff
   1a9f0:	mvn	r7, #0
   1a9f4:	and	r6, r6, r4
   1a9f8:	and	r7, r7, r5
   1a9fc:	orrs	r8, r6, r7
   1aa00:	beq	1aa70 <elf32_fsize@plt+0x93b8>
   1aa04:	mov	r2, #-268435456	; 0xf0000000
   1aa08:	mov	r3, #0
   1aa0c:	and	r0, r4, r2
   1aa10:	and	r1, r5, r3
   1aa14:	strd	r0, [sp, #64]	; 0x40
   1aa18:	orrs	r1, r0, r1
   1aa1c:	bne	1b98c <elf32_fsize@plt+0xa2d4>
   1aa20:	mov	r2, #5
   1aa24:	movw	r1, #21316	; 0x5344
   1aa28:	mov	r0, #0
   1aa2c:	movt	r1, #2
   1aa30:	bl	113b8 <dcgettext@plt>
   1aa34:	ldr	ip, [sp, #76]	; 0x4c
   1aa38:	ldr	r1, [sp, #72]	; 0x48
   1aa3c:	mov	r4, r0
   1aa40:	add	r0, ip, #16
   1aa44:	bl	12670 <elf32_fsize@plt+0xfb8>
   1aa48:	mov	r1, r4
   1aa4c:	strd	r6, [sp]
   1aa50:	ldr	r2, [sp, #72]	; 0x48
   1aa54:	mov	r3, r0
   1aa58:	mov	r0, #1
   1aa5c:	bl	11580 <__printf_chk@plt>
   1aa60:	ldrd	r4, [r9, #8]
   1aa64:	ldr	r3, [fp, #4]
   1aa68:	add	r3, r3, #1
   1aa6c:	str	r3, [fp, #4]
   1aa70:	mov	r2, #1024	; 0x400
   1aa74:	mov	r3, #0
   1aa78:	and	r2, r2, r4
   1aa7c:	and	r3, r3, r5
   1aa80:	orrs	lr, r2, r3
   1aa84:	beq	1aaa0 <elf32_fsize@plt+0x93e8>
   1aa88:	ldrd	r2, [r9, #16]
   1aa8c:	orrs	r0, r2, r3
   1aa90:	beq	1aaa0 <elf32_fsize@plt+0x93e8>
   1aa94:	ldrb	r0, [fp, #23]
   1aa98:	cmp	r0, #0
   1aa9c:	beq	1c134 <elf32_fsize@plt+0xaa7c>
   1aaa0:	mov	r2, #2048	; 0x800
   1aaa4:	mov	r3, #0
   1aaa8:	and	r2, r2, r4
   1aaac:	and	r3, r3, r5
   1aab0:	orrs	r7, r2, r3
   1aab4:	beq	1aaf0 <elf32_fsize@plt+0x9438>
   1aab8:	mov	r2, #2
   1aabc:	mov	r3, #0
   1aac0:	and	r4, r4, r2
   1aac4:	and	r5, r5, r3
   1aac8:	orrs	r8, r4, r5
   1aacc:	bne	1b9c4 <elf32_fsize@plt+0xa30c>
   1aad0:	ldr	r3, [r9, #4]
   1aad4:	cmp	r3, #8
   1aad8:	beq	1ba18 <elf32_fsize@plt+0xa360>
   1aadc:	ldr	r0, [sp, #96]	; 0x60
   1aae0:	add	r1, sp, #416	; 0x1a0
   1aae4:	bl	11610 <gelf_getchdr@plt>
   1aae8:	cmp	r0, #0
   1aaec:	beq	1c674 <elf32_fsize@plt+0xafbc>
   1aaf0:	ldr	r2, [r9, #40]	; 0x28
   1aaf4:	ldr	r3, [fp, #8]
   1aaf8:	cmp	r2, r3
   1aafc:	bcs	1b2e0 <elf32_fsize@plt+0x9c28>
   1ab00:	ldr	r3, [r9, #4]
   1ab04:	cmp	r3, #9
   1ab08:	cmpne	r3, #4
   1ab0c:	beq	1ab34 <elf32_fsize@plt+0x947c>
   1ab10:	ldrd	r2, [r9, #8]
   1ab14:	mov	r0, #64	; 0x40
   1ab18:	mov	r1, #0
   1ab1c:	and	r0, r0, r2
   1ab20:	and	r1, r1, r3
   1ab24:	orrs	ip, r0, r1
   1ab28:	moveq	r0, r2
   1ab2c:	moveq	r1, r3
   1ab30:	beq	1ab50 <elf32_fsize@plt+0x9498>
   1ab34:	ldr	r2, [r9, #44]	; 0x2c
   1ab38:	ldr	r3, [fp, #8]
   1ab3c:	cmp	r2, r3
   1ab40:	bcs	1b658 <elf32_fsize@plt+0x9fa0>
   1ab44:	ldrd	r2, [r9, #8]
   1ab48:	mov	r0, r2
   1ab4c:	mov	r1, r3
   1ab50:	mov	r4, #16
   1ab54:	mov	r5, #0
   1ab58:	and	r6, r2, r4
   1ab5c:	and	r7, r3, r5
   1ab60:	orrs	r8, r6, r7
   1ab64:	beq	1af98 <elf32_fsize@plt+0x98e0>
   1ab68:	ldrd	r0, [r9, #56]	; 0x38
   1ab6c:	orrs	ip, r0, r1
   1ab70:	beq	1ba64 <elf32_fsize@plt+0xa3ac>
   1ab74:	mov	r0, r2
   1ab78:	mov	r1, r3
   1ab7c:	mov	r2, #512	; 0x200
   1ab80:	mov	r3, #0
   1ab84:	and	r2, r2, r0
   1ab88:	and	r3, r3, r1
   1ab8c:	orrs	r6, r2, r3
   1ab90:	bne	1b334 <elf32_fsize@plt+0x9c7c>
   1ab94:	ldr	r7, [sp, #72]	; 0x48
   1ab98:	add	r7, r7, #1
   1ab9c:	str	r7, [sp, #96]	; 0x60
   1aba0:	mov	r2, #4
   1aba4:	mov	r3, #0
   1aba8:	and	r2, r2, r0
   1abac:	and	r3, r3, r1
   1abb0:	orrs	lr, r2, r3
   1abb4:	beq	1ac80 <elf32_fsize@plt+0x95c8>
   1abb8:	ldr	r3, [r9, #4]
   1abbc:	cmp	r3, #1
   1abc0:	beq	1ac2c <elf32_fsize@plt+0x9574>
   1abc4:	cmp	r3, #8
   1abc8:	bne	1abd8 <elf32_fsize@plt+0x9520>
   1abcc:	ldrb	r3, [fp, #22]
   1abd0:	cmp	r3, #0
   1abd4:	bne	1ac2c <elf32_fsize@plt+0x9574>
   1abd8:	mov	r2, #5
   1abdc:	movw	r1, #22044	; 0x561c
   1abe0:	mov	r0, #0
   1abe4:	movt	r1, #2
   1abe8:	bl	113b8 <dcgettext@plt>
   1abec:	ldr	r5, [sp, #76]	; 0x4c
   1abf0:	ldr	r1, [sp, #72]	; 0x48
   1abf4:	mov	r4, r0
   1abf8:	add	r0, r5, #16
   1abfc:	bl	12670 <elf32_fsize@plt+0xfb8>
   1ac00:	ldr	ip, [r9, #4]
   1ac04:	mov	r1, r4
   1ac08:	ldr	r2, [sp, #72]	; 0x48
   1ac0c:	str	ip, [sp]
   1ac10:	mov	r3, r0
   1ac14:	mov	r0, #1
   1ac18:	bl	11580 <__printf_chk@plt>
   1ac1c:	ldrd	r0, [r9, #8]
   1ac20:	ldr	r3, [fp, #4]
   1ac24:	add	r3, r3, #1
   1ac28:	str	r3, [fp, #4]
   1ac2c:	mov	r2, #1
   1ac30:	mov	r3, #0
   1ac34:	and	r0, r0, r2
   1ac38:	and	r1, r1, r3
   1ac3c:	orrs	r6, r0, r1
   1ac40:	beq	1ac80 <elf32_fsize@plt+0x95c8>
   1ac44:	ldrb	r3, [fp, #22]
   1ac48:	cmp	r3, #0
   1ac4c:	bne	1bb58 <elf32_fsize@plt+0xa4a0>
   1ac50:	ldr	r7, [sp, #76]	; 0x4c
   1ac54:	add	r4, r7, #16
   1ac58:	ldr	r1, [sp, #72]	; 0x48
   1ac5c:	mov	r0, r4
   1ac60:	bl	12670 <elf32_fsize@plt+0xfb8>
   1ac64:	ldr	r1, [sp, #72]	; 0x48
   1ac68:	mov	r2, r9
   1ac6c:	mov	r3, r0
   1ac70:	ldr	r0, [sp, #76]	; 0x4c
   1ac74:	bl	1ffec <elf32_fsize@plt+0xe934>
   1ac78:	cmp	r0, #0
   1ac7c:	beq	1c0a8 <elf32_fsize@plt+0xa9f0>
   1ac80:	ldr	r4, [sp, #100]	; 0x64
   1ac84:	ldrh	r3, [r4, #16]
   1ac88:	cmp	r3, #1
   1ac8c:	beq	1ae7c <elf32_fsize@plt+0x97c4>
   1ac90:	ldrd	r2, [r9, #8]
   1ac94:	mov	r0, #2
   1ac98:	mov	r1, #0
   1ac9c:	and	r2, r2, r0
   1aca0:	and	r3, r3, r1
   1aca4:	orrs	r5, r2, r3
   1aca8:	beq	1ae7c <elf32_fsize@plt+0x97c4>
   1acac:	ldrb	r8, [fp, #22]
   1acb0:	cmp	r8, #0
   1acb4:	bne	1ae7c <elf32_fsize@plt+0x97c4>
   1acb8:	movw	r6, #37252	; 0x9184
   1acbc:	movt	r6, #3
   1acc0:	ldr	r3, [r6, #16]
   1acc4:	cmp	r3, #0
   1acc8:	beq	1c05c <elf32_fsize@plt+0xa9a4>
   1accc:	add	r6, sp, #416	; 0x1a0
   1acd0:	ldr	r7, [sp, #76]	; 0x4c
   1acd4:	b	1acf0 <elf32_fsize@plt+0x9638>
   1acd8:	cmp	r3, #7
   1acdc:	beq	1af78 <elf32_fsize@plt+0x98c0>
   1ace0:	ldr	r3, [fp, #16]
   1ace4:	add	r8, r8, #1
   1ace8:	cmp	r3, r8
   1acec:	bls	1ae74 <elf32_fsize@plt+0x97bc>
   1acf0:	ldr	r0, [r7, #16]
   1acf4:	mov	r1, r8
   1acf8:	mov	r2, r6
   1acfc:	bl	113f4 <gelf_getphdr@plt>
   1ad00:	cmp	r0, #0
   1ad04:	beq	1ace0 <elf32_fsize@plt+0x9628>
   1ad08:	ldr	r3, [r0]
   1ad0c:	cmp	r3, #1
   1ad10:	bne	1acd8 <elf32_fsize@plt+0x9620>
   1ad14:	ldrd	r2, [r9, #8]
   1ad18:	mov	r5, #0
   1ad1c:	mov	r4, #1024	; 0x400
   1ad20:	and	r3, r3, r5
   1ad24:	and	r2, r2, r4
   1ad28:	orrs	r5, r2, r3
   1ad2c:	bne	1ace0 <elf32_fsize@plt+0x9628>
   1ad30:	ldrd	r2, [r0, #8]
   1ad34:	ldrd	r4, [r9, #24]
   1ad38:	cmp	r3, r5
   1ad3c:	cmpeq	r2, r4
   1ad40:	strd	r2, [sp, #48]	; 0x30
   1ad44:	strd	r4, [sp, #64]	; 0x40
   1ad48:	bhi	1ace0 <elf32_fsize@plt+0x9628>
   1ad4c:	ldrd	r2, [r0, #32]
   1ad50:	strd	r2, [sp, #104]	; 0x68
   1ad54:	ldrd	r2, [sp, #48]	; 0x30
   1ad58:	subs	r4, r4, r2
   1ad5c:	sbc	r5, r5, r3
   1ad60:	ldrd	r2, [sp, #104]	; 0x68
   1ad64:	strd	r4, [sp, #80]	; 0x50
   1ad68:	cmp	r5, r3
   1ad6c:	cmpeq	r4, r2
   1ad70:	bhi	1ad84 <elf32_fsize@plt+0x96cc>
   1ad74:	bcc	1d360 <elf32_fsize@plt+0xbca8>
   1ad78:	ldrd	r4, [r9, #32]
   1ad7c:	orrs	r3, r4, r5
   1ad80:	beq	1d378 <elf32_fsize@plt+0xbcc0>
   1ad84:	ldrd	r4, [r0, #40]	; 0x28
   1ad88:	ldrd	r2, [sp, #80]	; 0x50
   1ad8c:	cmp	r3, r5
   1ad90:	cmpeq	r2, r4
   1ad94:	strd	r4, [sp, #88]	; 0x58
   1ad98:	bcs	1ace0 <elf32_fsize@plt+0x9628>
   1ad9c:	ldr	r1, [r9, #4]
   1ada0:	cmp	r1, #8
   1ada4:	bne	1ace0 <elf32_fsize@plt+0x9628>
   1ada8:	mov	sl, r0
   1adac:	ldrd	r2, [sp, #48]	; 0x30
   1adb0:	ldrd	r0, [sp, #64]	; 0x40
   1adb4:	ldrd	r4, [r9, #32]
   1adb8:	ldrd	r6, [sp, #88]	; 0x58
   1adbc:	adds	r6, r6, r2
   1adc0:	adc	r7, r7, r3
   1adc4:	adds	r4, r4, r0
   1adc8:	adc	r5, r5, r1
   1adcc:	cmp	r7, r5
   1add0:	cmpeq	r6, r4
   1add4:	bcc	1d420 <elf32_fsize@plt+0xbd68>
   1add8:	ldrd	r4, [sp, #104]	; 0x68
   1addc:	mov	r6, r2
   1ade0:	mov	r7, r3
   1ade4:	mov	r2, r0
   1ade8:	mov	r3, r1
   1adec:	ldr	r1, [r9, #4]
   1adf0:	adds	r4, r4, r6
   1adf4:	adc	r5, r5, r7
   1adf8:	cmp	r1, #8
   1adfc:	beq	1d3a8 <elf32_fsize@plt+0xbcf0>
   1ae00:	cmp	r5, r3
   1ae04:	cmpeq	r4, r2
   1ae08:	bcc	1d0f0 <elf32_fsize@plt+0xba38>
   1ae0c:	beq	1d0e4 <elf32_fsize@plt+0xba2c>
   1ae10:	ldrd	r2, [r9, #8]
   1ae14:	mov	r0, #4
   1ae18:	mov	r1, #0
   1ae1c:	and	r0, r0, r2
   1ae20:	and	r1, r1, r3
   1ae24:	orrs	r6, r0, r1
   1ae28:	beq	1ae48 <elf32_fsize@plt+0x9790>
   1ae2c:	ldr	r4, [sp, #136]	; 0x88
   1ae30:	ldr	r1, [sl, #4]
   1ae34:	ldr	ip, [r4, r8, lsl #2]
   1ae38:	ands	r0, r1, #1
   1ae3c:	orr	r1, ip, #1
   1ae40:	str	r1, [r4, r8, lsl #2]
   1ae44:	beq	1d548 <elf32_fsize@plt+0xbe90>
   1ae48:	mov	r0, #1
   1ae4c:	mov	r1, #0
   1ae50:	and	r2, r2, r0
   1ae54:	and	r3, r3, r1
   1ae58:	orrs	r6, r2, r3
   1ae5c:	beq	1d148 <elf32_fsize@plt+0xba90>
   1ae60:	ldr	r7, [sp, #136]	; 0x88
   1ae64:	ldr	r3, [fp, #16]
   1ae68:	ldr	r2, [r7, r8, lsl #2]
   1ae6c:	orr	r2, r2, #2
   1ae70:	str	r2, [r7, r8, lsl #2]
   1ae74:	cmp	r8, r3
   1ae78:	beq	1c05c <elf32_fsize@plt+0xa9a4>
   1ae7c:	ldr	r3, [fp, #12]
   1ae80:	ldr	ip, [sp, #72]	; 0x48
   1ae84:	cmp	ip, r3
   1ae88:	beq	1b5a4 <elf32_fsize@plt+0x9eec>
   1ae8c:	ldr	r0, [r9, #4]
   1ae90:	cmp	r0, #11
   1ae94:	beq	1b60c <elf32_fsize@plt+0x9f54>
   1ae98:	bhi	1b048 <elf32_fsize@plt+0x9990>
   1ae9c:	cmp	r0, #5
   1aea0:	beq	1c274 <elf32_fsize@plt+0xabbc>
   1aea4:	bhi	1b740 <elf32_fsize@plt+0xa088>
   1aea8:	cmp	r0, #2
   1aeac:	beq	1b61c <elf32_fsize@plt+0x9f64>
   1aeb0:	cmp	r0, #4
   1aeb4:	beq	1bbc8 <elf32_fsize@plt+0xa510>
   1aeb8:	cmp	r0, #0
   1aebc:	bne	1b084 <elf32_fsize@plt+0x99cc>
   1aec0:	ldr	r3, [r9]
   1aec4:	cmp	r3, #0
   1aec8:	bne	1cb90 <elf32_fsize@plt+0xb4d8>
   1aecc:	ldrd	r2, [r9, #8]
   1aed0:	orrs	ip, r2, r3
   1aed4:	bne	1cb38 <elf32_fsize@plt+0xb480>
   1aed8:	ldrd	r2, [r9, #16]
   1aedc:	orrs	r6, r2, r3
   1aee0:	bne	1cae0 <elf32_fsize@plt+0xb428>
   1aee4:	ldrd	r2, [r9, #24]
   1aee8:	orrs	r8, r2, r3
   1aeec:	bne	1ca88 <elf32_fsize@plt+0xb3d0>
   1aef0:	ldr	r4, [sp, #72]	; 0x48
   1aef4:	cmp	r4, #0
   1aef8:	beq	1af14 <elf32_fsize@plt+0x985c>
   1aefc:	ldrd	r2, [r9, #32]
   1af00:	orrs	r5, r2, r3
   1af04:	bne	1d1a8 <elf32_fsize@plt+0xbaf0>
   1af08:	ldr	r3, [r9, #40]	; 0x28
   1af0c:	cmp	r3, #0
   1af10:	bne	1d150 <elf32_fsize@plt+0xba98>
   1af14:	ldr	r3, [r9, #44]	; 0x2c
   1af18:	cmp	r3, #0
   1af1c:	bne	1ca30 <elf32_fsize@plt+0xb378>
   1af20:	ldrd	r2, [r9, #48]	; 0x30
   1af24:	orrs	ip, r2, r3
   1af28:	bne	1cc1c <elf32_fsize@plt+0xb564>
   1af2c:	ldrd	r2, [r9, #56]	; 0x38
   1af30:	orrs	r6, r2, r3
   1af34:	beq	1b084 <elf32_fsize@plt+0x99cc>
   1af38:	mov	r2, #5
   1af3c:	movw	r1, #23672	; 0x5c78
   1af40:	mov	r0, #0
   1af44:	movt	r1, #2
   1af48:	bl	113b8 <dcgettext@plt>
   1af4c:	ldr	r7, [sp, #76]	; 0x4c
   1af50:	ldr	r1, [sp, #72]	; 0x48
   1af54:	mov	r4, r0
   1af58:	add	r0, r7, #16
   1af5c:	bl	12670 <elf32_fsize@plt+0xfb8>
   1af60:	mov	r1, r4
   1af64:	ldr	r2, [sp, #72]	; 0x48
   1af68:	mov	r3, r0
   1af6c:	movw	r0, #23784	; 0x5ce8
   1af70:	movt	r0, #2
   1af74:	b	1b6fc <elf32_fsize@plt+0xa044>
   1af78:	ldrd	r2, [r9, #8]
   1af7c:	mov	r5, #0
   1af80:	mov	r4, #1024	; 0x400
   1af84:	and	r3, r3, r5
   1af88:	and	r2, r2, r4
   1af8c:	orrs	r5, r2, r3
   1af90:	beq	1ace0 <elf32_fsize@plt+0x9628>
   1af94:	b	1ad30 <elf32_fsize@plt+0x9678>
   1af98:	mov	r6, #32
   1af9c:	mov	r7, #0
   1afa0:	and	r2, r2, r6
   1afa4:	and	r3, r3, r7
   1afa8:	orrs	lr, r2, r3
   1afac:	beq	1ab7c <elf32_fsize@plt+0x94c4>
   1afb0:	ldrb	r3, [fp, #20]
   1afb4:	cmp	r3, #0
   1afb8:	beq	1ab7c <elf32_fsize@plt+0x94c4>
   1afbc:	mov	r2, #5
   1afc0:	movw	r1, #21760	; 0x5500
   1afc4:	mov	r0, #0
   1afc8:	movt	r1, #2
   1afcc:	bl	113b8 <dcgettext@plt>
   1afd0:	ldr	r7, [sp, #76]	; 0x4c
   1afd4:	ldr	r1, [sp, #72]	; 0x48
   1afd8:	movw	r8, #37252	; 0x9184
   1afdc:	movt	r8, #3
   1afe0:	mov	r6, r0
   1afe4:	add	r0, r7, #16
   1afe8:	bl	12670 <elf32_fsize@plt+0xfb8>
   1afec:	mov	r1, r6
   1aff0:	ldr	r2, [sp, #72]	; 0x48
   1aff4:	mov	r3, r0
   1aff8:	mov	r0, #1
   1affc:	bl	11580 <__printf_chk@plt>
   1b000:	ldrd	r2, [r9, #8]
   1b004:	ldr	r1, [r8, #4]
   1b008:	and	r4, r4, r2
   1b00c:	and	r5, r5, r3
   1b010:	orrs	ip, r4, r5
   1b014:	add	r1, r1, #1
   1b018:	str	r1, [r8, #4]
   1b01c:	beq	1ab74 <elf32_fsize@plt+0x94bc>
   1b020:	b	1ab68 <elf32_fsize@plt+0x94b0>
   1b024:	movw	r1, #21080	; 0x5258
   1b028:	mov	r0, r6
   1b02c:	movt	r1, #2
   1b030:	bl	11358 <strcmp@plt>
   1b034:	cmp	r0, #0
   1b038:	bne	1b638 <elf32_fsize@plt+0x9f80>
   1b03c:	ldr	r4, [sp, #72]	; 0x48
   1b040:	str	r4, [fp, #52]	; 0x34
   1b044:	b	1a96c <elf32_fsize@plt+0x92b4>
   1b048:	cmn	r0, #-1879048182	; 0x9000000a
   1b04c:	beq	1c250 <elf32_fsize@plt+0xab98>
   1b050:	bhi	1b718 <elf32_fsize@plt+0xa060>
   1b054:	cmp	r0, #18
   1b058:	beq	1c1f4 <elf32_fsize@plt+0xab3c>
   1b05c:	cmn	r0, #-1879048181	; 0x9000000b
   1b060:	beq	1bde8 <elf32_fsize@plt+0xa730>
   1b064:	cmp	r0, #17
   1b068:	bne	1b084 <elf32_fsize@plt+0x99cc>
   1b06c:	ldr	r8, [sp, #100]	; 0x64
   1b070:	mov	r2, r9
   1b074:	ldr	r3, [sp, #72]	; 0x48
   1b078:	ldr	r0, [sp, #76]	; 0x4c
   1b07c:	ldrh	r1, [r8, #16]
   1b080:	bl	16dc0 <elf32_fsize@plt+0x5708>
   1b084:	ldr	r9, [sp, #96]	; 0x60
   1b088:	movw	r3, #37252	; 0x9184
   1b08c:	ldr	r2, [fp, #8]
   1b090:	movt	r3, #3
   1b094:	cmp	r2, r9
   1b098:	str	r9, [sp, #72]	; 0x48
   1b09c:	bhi	1a720 <elf32_fsize@plt+0x9068>
   1b0a0:	ldrb	r3, [r3, #60]	; 0x3c
   1b0a4:	mov	r8, fp
   1b0a8:	cmp	r3, #0
   1b0ac:	bne	1be60 <elf32_fsize@plt+0xa7a8>
   1b0b0:	ldr	ip, [sp, #140]	; 0x8c
   1b0b4:	ldr	r4, [sp, #144]	; 0x90
   1b0b8:	cmp	ip, #0
   1b0bc:	cmpne	r4, #0
   1b0c0:	moveq	sl, #0
   1b0c4:	movne	sl, #1
   1b0c8:	ldrb	r6, [r8, #22]
   1b0cc:	movw	r3, #37252	; 0x9184
   1b0d0:	movt	r3, #3
   1b0d4:	cmp	r6, #0
   1b0d8:	bne	1b160 <elf32_fsize@plt+0x9aa8>
   1b0dc:	ldr	r3, [r3, #16]
   1b0e0:	cmp	r3, #0
   1b0e4:	beq	1b160 <elf32_fsize@plt+0x9aa8>
   1b0e8:	ldr	fp, [sp, #136]	; 0x88
   1b0ec:	add	r5, sp, #416	; 0x1a0
   1b0f0:	ldr	r9, [sp, #76]	; 0x4c
   1b0f4:	mov	r4, r6
   1b0f8:	ldr	r0, [r9, #16]
   1b0fc:	mov	r1, r4
   1b100:	mov	r2, r5
   1b104:	bl	113f4 <gelf_getphdr@plt>
   1b108:	subs	r7, r0, #0
   1b10c:	beq	1b14c <elf32_fsize@plt+0x9a94>
   1b110:	ldr	r3, [r7]
   1b114:	cmp	r3, #1
   1b118:	cmpne	r3, #7
   1b11c:	bne	1b14c <elf32_fsize@plt+0x9a94>
   1b120:	ldr	r3, [r7, #4]
   1b124:	tst	r3, #1
   1b128:	beq	1b138 <elf32_fsize@plt+0x9a80>
   1b12c:	ldr	r2, [fp, r6]
   1b130:	ands	r0, r2, #1
   1b134:	beq	1c558 <elf32_fsize@plt+0xaea0>
   1b138:	tst	r3, #2
   1b13c:	beq	1b14c <elf32_fsize@plt+0x9a94>
   1b140:	ldr	r3, [fp, r6]
   1b144:	ands	r0, r3, #2
   1b148:	beq	1c58c <elf32_fsize@plt+0xaed4>
   1b14c:	ldr	r3, [r8, #16]
   1b150:	add	r4, r4, #1
   1b154:	add	r6, r6, #4
   1b158:	cmp	r3, r4
   1b15c:	bhi	1b0f8 <elf32_fsize@plt+0x9a40>
   1b160:	ldr	r0, [sp, #136]	; 0x88
   1b164:	movw	r6, #37252	; 0x9184
   1b168:	bl	11370 <free@plt>
   1b16c:	ldr	r0, [r8]
   1b170:	movt	r6, #3
   1b174:	cmp	r0, #0
   1b178:	beq	1d044 <elf32_fsize@plt+0xb98c>
   1b17c:	ldr	r4, [sp, #124]	; 0x7c
   1b180:	cmp	r4, #0
   1b184:	bne	1c3fc <elf32_fsize@plt+0xad44>
   1b188:	mov	r2, #5
   1b18c:	mov	r0, r4
   1b190:	movw	r1, #24216	; 0x5e98
   1b194:	movt	r1, #2
   1b198:	bl	113b8 <dcgettext@plt>
   1b19c:	mov	r1, r0
   1b1a0:	mov	r0, #1
   1b1a4:	bl	11580 <__printf_chk@plt>
   1b1a8:	ldr	r3, [r6, #4]
   1b1ac:	add	r3, r3, #1
   1b1b0:	str	r3, [r6, #4]
   1b1b4:	ldr	r4, [r8]
   1b1b8:	ldr	ip, [r4, #16]
   1b1bc:	cmp	ip, #0
   1b1c0:	beq	1b210 <elf32_fsize@plt+0x9b58>
   1b1c4:	ldrh	r3, [ip, #8]
   1b1c8:	ldrh	r1, [r4, #8]
   1b1cc:	cmp	r3, r1
   1b1d0:	movne	r3, ip
   1b1d4:	bne	1b1e8 <elf32_fsize@plt+0x9b30>
   1b1d8:	b	1c0ec <elf32_fsize@plt+0xaa34>
   1b1dc:	ldrh	r2, [r3, #8]
   1b1e0:	cmp	r2, r1
   1b1e4:	beq	1c0ec <elf32_fsize@plt+0xaa34>
   1b1e8:	ldr	r3, [r3, #16]
   1b1ec:	cmp	r3, #0
   1b1f0:	bne	1b1dc <elf32_fsize@plt+0x9b24>
   1b1f4:	mov	r0, r4
   1b1f8:	mov	r4, ip
   1b1fc:	str	ip, [r8]
   1b200:	bl	11370 <free@plt>
   1b204:	ldr	ip, [r4, #16]
   1b208:	cmp	ip, #0
   1b20c:	bne	1b1c4 <elf32_fsize@plt+0x9b0c>
   1b210:	mov	r0, r4
   1b214:	str	ip, [r8]
   1b218:	bl	11370 <free@plt>
   1b21c:	cmp	sl, #0
   1b220:	beq	1b240 <elf32_fsize@plt+0x9b88>
   1b224:	ldr	r5, [sp, #76]	; 0x4c
   1b228:	ldr	r6, [sp, #100]	; 0x64
   1b22c:	add	r0, r5, #16
   1b230:	ldr	r2, [sp, #140]	; 0x8c
   1b234:	add	r1, r6, #4
   1b238:	ldr	r3, [sp, #144]	; 0x90
   1b23c:	bl	18718 <elf32_fsize@plt+0x7060>
   1b240:	ldr	r0, [r8, #32]
   1b244:	bl	11370 <free@plt>
   1b248:	b	1a59c <elf32_fsize@plt+0x8ee4>
   1b24c:	ldr	r9, [sp, #64]	; 0x40
   1b250:	b	1a94c <elf32_fsize@plt+0x9294>
   1b254:	mov	r0, r7
   1b258:	mov	r2, sl
   1b25c:	movw	r1, #20548	; 0x5044
   1b260:	movt	r1, #2
   1b264:	bl	11388 <memcmp@plt>
   1b268:	cmp	r0, #0
   1b26c:	bne	1a82c <elf32_fsize@plt+0x9174>
   1b270:	mov	r2, #5
   1b274:	movw	r1, #20568	; 0x5058
   1b278:	mov	r0, #0
   1b27c:	movt	r1, #2
   1b280:	bl	113b8 <dcgettext@plt>
   1b284:	mov	r1, r5
   1b288:	add	r2, sp, #480	; 0x1e0
   1b28c:	mov	r3, #100	; 0x64
   1b290:	mov	r7, r0
   1b294:	ldr	r0, [sp, #76]	; 0x4c
   1b298:	bl	1f4d4 <elf32_fsize@plt+0xde1c>
   1b29c:	ldr	r1, [r9, #4]
   1b2a0:	add	r2, sp, #580	; 0x244
   1b2a4:	mov	r3, #100	; 0x64
   1b2a8:	mov	r5, r0
   1b2ac:	ldr	r0, [sp, #76]	; 0x4c
   1b2b0:	bl	1f4d4 <elf32_fsize@plt+0xde1c>
   1b2b4:	mov	r3, r6
   1b2b8:	str	r5, [sp]
   1b2bc:	mov	r1, r7
   1b2c0:	ldr	r2, [sp, #72]	; 0x48
   1b2c4:	str	r0, [sp, #4]
   1b2c8:	mov	r0, #1
   1b2cc:	bl	11580 <__printf_chk@plt>
   1b2d0:	ldr	r3, [fp, #4]
   1b2d4:	add	r3, r3, #1
   1b2d8:	str	r3, [fp, #4]
   1b2dc:	b	1a82c <elf32_fsize@plt+0x9174>
   1b2e0:	mov	r2, #5
   1b2e4:	movw	r1, #21632	; 0x5480
   1b2e8:	mov	r0, #0
   1b2ec:	movt	r1, #2
   1b2f0:	bl	113b8 <dcgettext@plt>
   1b2f4:	ldr	r7, [sp, #76]	; 0x4c
   1b2f8:	ldr	r1, [sp, #72]	; 0x48
   1b2fc:	movw	r8, #37252	; 0x9184
   1b300:	movt	r8, #3
   1b304:	mov	r4, r0
   1b308:	add	r0, r7, #16
   1b30c:	bl	12670 <elf32_fsize@plt+0xfb8>
   1b310:	mov	r1, r4
   1b314:	ldr	r2, [sp, #72]	; 0x48
   1b318:	mov	r3, r0
   1b31c:	mov	r0, #1
   1b320:	bl	11580 <__printf_chk@plt>
   1b324:	ldr	r3, [r8, #4]
   1b328:	add	r3, r3, #1
   1b32c:	str	r3, [r8, #4]
   1b330:	b	1ab00 <elf32_fsize@plt+0x9448>
   1b334:	ldr	r8, [sp, #72]	; 0x48
   1b338:	ldr	r3, [fp, #32]
   1b33c:	ldr	r3, [r3, r8, lsl #2]
   1b340:	cmp	r3, #0
   1b344:	addne	ip, r8, #1
   1b348:	strne	ip, [sp, #96]	; 0x60
   1b34c:	bne	1aba0 <elf32_fsize@plt+0x94e8>
   1b350:	movw	lr, #37252	; 0x9184
   1b354:	movt	lr, #3
   1b358:	ldr	r4, [sp, #72]	; 0x48
   1b35c:	ldr	r3, [lr, #8]
   1b360:	add	r4, r4, #1
   1b364:	str	r4, [sp, #96]	; 0x60
   1b368:	cmp	r4, r3
   1b36c:	mov	r5, r4
   1b370:	bcs	1b428 <elf32_fsize@plt+0x9d70>
   1b374:	add	r6, sp, #416	; 0x1a0
   1b378:	ldr	r4, [sp, #76]	; 0x4c
   1b37c:	b	1b390 <elf32_fsize@plt+0x9cd8>
   1b380:	ldr	r3, [fp, #8]
   1b384:	add	r5, r5, #1
   1b388:	cmp	r5, r3
   1b38c:	bcs	1b428 <elf32_fsize@plt+0x9d70>
   1b390:	mov	r1, r5
   1b394:	ldr	r0, [r4, #16]
   1b398:	bl	11628 <elf_getscn@plt>
   1b39c:	mov	r1, r6
   1b3a0:	mov	r8, r0
   1b3a4:	bl	1134c <gelf_getshdr@plt>
   1b3a8:	cmp	r0, #0
   1b3ac:	beq	1b380 <elf32_fsize@plt+0x9cc8>
   1b3b0:	ldr	r3, [r0, #4]
   1b3b4:	cmp	r3, #17
   1b3b8:	bne	1b380 <elf32_fsize@plt+0x9cc8>
   1b3bc:	mov	r0, r8
   1b3c0:	mov	r1, #0
   1b3c4:	bl	11484 <elf_getdata@plt>
   1b3c8:	cmp	r0, #0
   1b3cc:	beq	1b380 <elf32_fsize@plt+0x9cc8>
   1b3d0:	ldr	r2, [r0]
   1b3d4:	cmp	r2, #0
   1b3d8:	beq	1b380 <elf32_fsize@plt+0x9cc8>
   1b3dc:	ldr	r0, [r0, #12]
   1b3e0:	cmp	r0, #3
   1b3e4:	bls	1b380 <elf32_fsize@plt+0x9cc8>
   1b3e8:	lsr	r0, r0, #2
   1b3ec:	cmp	r0, #1
   1b3f0:	beq	1b380 <elf32_fsize@plt+0x9cc8>
   1b3f4:	ldr	r3, [r2, #4]
   1b3f8:	ldr	r7, [sp, #72]	; 0x48
   1b3fc:	cmp	r7, r3
   1b400:	beq	1b424 <elf32_fsize@plt+0x9d6c>
   1b404:	add	r2, r2, #4
   1b408:	mov	r3, #1
   1b40c:	add	r3, r3, #1
   1b410:	cmp	r3, r0
   1b414:	beq	1b380 <elf32_fsize@plt+0x9cc8>
   1b418:	ldr	r1, [r2, #4]!
   1b41c:	cmp	r7, r1
   1b420:	bne	1b40c <elf32_fsize@plt+0x9d54>
   1b424:	ldr	r3, [fp, #8]
   1b428:	cmp	r5, r3
   1b42c:	beq	1c5bc <elf32_fsize@plt+0xaf04>
   1b430:	ldr	ip, [sp, #76]	; 0x4c
   1b434:	mov	r2, #5
   1b438:	movw	r1, #21964	; 0x55cc
   1b43c:	mov	r0, #0
   1b440:	movt	r1, #2
   1b444:	add	r4, ip, #16
   1b448:	bl	113b8 <dcgettext@plt>
   1b44c:	ldr	r1, [sp, #72]	; 0x48
   1b450:	mov	r6, r0
   1b454:	mov	r0, r4
   1b458:	bl	12670 <elf32_fsize@plt+0xfb8>
   1b45c:	mov	r1, r5
   1b460:	mov	r7, r0
   1b464:	mov	r0, r4
   1b468:	bl	12670 <elf32_fsize@plt+0xfb8>
   1b46c:	mov	r1, r6
   1b470:	mov	r3, r7
   1b474:	str	r5, [sp]
   1b478:	ldr	r2, [sp, #72]	; 0x48
   1b47c:	str	r0, [sp, #4]
   1b480:	mov	r0, #1
   1b484:	bl	11580 <__printf_chk@plt>
   1b488:	ldr	r3, [fp, #4]
   1b48c:	ldrd	r0, [r9, #8]
   1b490:	add	r3, r3, #1
   1b494:	str	r3, [fp, #4]
   1b498:	b	1aba0 <elf32_fsize@plt+0x94e8>
   1b49c:	movw	r1, #20972	; 0x51ec
   1b4a0:	mov	r0, r6
   1b4a4:	movt	r1, #2
   1b4a8:	bl	11358 <strcmp@plt>
   1b4ac:	cmp	r0, #0
   1b4b0:	bne	1a94c <elf32_fsize@plt+0x9294>
   1b4b4:	ldr	r5, [sp, #100]	; 0x64
   1b4b8:	ldrh	r3, [r5, #16]
   1b4bc:	cmp	r3, #1
   1b4c0:	beq	1a94c <elf32_fsize@plt+0x9294>
   1b4c4:	mov	r2, #5
   1b4c8:	movw	r1, #20988	; 0x51fc
   1b4cc:	movt	r1, #2
   1b4d0:	bl	113b8 <dcgettext@plt>
   1b4d4:	mov	r3, r6
   1b4d8:	ldr	r2, [sp, #72]	; 0x48
   1b4dc:	mov	r1, r0
   1b4e0:	mov	r0, #1
   1b4e4:	bl	11580 <__printf_chk@plt>
   1b4e8:	ldr	r3, [fp, #4]
   1b4ec:	add	r3, r3, #1
   1b4f0:	str	r3, [fp, #4]
   1b4f4:	b	1a94c <elf32_fsize@plt+0x9294>
   1b4f8:	cmp	r1, #2
   1b4fc:	bne	1a8f4 <elf32_fsize@plt+0x923c>
   1b500:	ldr	r7, [r8, #1772]	; 0x6ec
   1b504:	mov	r3, #0
   1b508:	ldrd	r0, [r9, #8]
   1b50c:	and	r4, r7, r0
   1b510:	and	r5, r3, r1
   1b514:	mov	r2, r7
   1b518:	cmp	r3, r5
   1b51c:	cmpeq	r2, r4
   1b520:	ldr	r4, [r8, #1776]	; 0x6f0
   1b524:	beq	1becc <elf32_fsize@plt+0xa814>
   1b528:	movw	r1, #20684	; 0x50cc
   1b52c:	mov	r0, #0
   1b530:	movt	r1, #2
   1b534:	mov	r2, #5
   1b538:	bl	113b8 <dcgettext@plt>
   1b53c:	cmp	r7, #0
   1b540:	movweq	r7, #19856	; 0x4d90
   1b544:	movteq	r7, #2
   1b548:	mov	r5, r0
   1b54c:	bne	1d020 <elf32_fsize@plt+0xb968>
   1b550:	cmp	r4, #0
   1b554:	movweq	r4, #19856	; 0x4d90
   1b558:	movteq	r4, #2
   1b55c:	bne	1d00c <elf32_fsize@plt+0xb954>
   1b560:	ldr	r3, [r9, #8]
   1b564:	bics	r0, r3, #640	; 0x280
   1b568:	movweq	r3, #19856	; 0x4d90
   1b56c:	movteq	r3, #2
   1b570:	bne	1d034 <elf32_fsize@plt+0xb97c>
   1b574:	str	r3, [sp, #8]
   1b578:	mov	r1, r5
   1b57c:	mov	r3, r6
   1b580:	str	r7, [sp]
   1b584:	str	r4, [sp, #4]
   1b588:	mov	r0, #1
   1b58c:	ldr	r2, [sp, #72]	; 0x48
   1b590:	bl	11580 <__printf_chk@plt>
   1b594:	ldr	r3, [fp, #4]
   1b598:	add	r3, r3, #1
   1b59c:	str	r3, [fp, #4]
   1b5a0:	b	1a8f4 <elf32_fsize@plt+0x923c>
   1b5a4:	ldr	r3, [r9, #4]
   1b5a8:	cmp	r3, #3
   1b5ac:	beq	1b084 <elf32_fsize@plt+0x99cc>
   1b5b0:	mov	r2, #5
   1b5b4:	movw	r1, #22804	; 0x5914
   1b5b8:	mov	r0, #0
   1b5bc:	movt	r1, #2
   1b5c0:	bl	113b8 <dcgettext@plt>
   1b5c4:	ldr	r5, [sp, #76]	; 0x4c
   1b5c8:	ldr	r1, [sp, #72]	; 0x48
   1b5cc:	movw	r6, #37252	; 0x9184
   1b5d0:	movt	r6, #3
   1b5d4:	mov	r4, r0
   1b5d8:	add	r0, r5, #16
   1b5dc:	bl	12670 <elf32_fsize@plt+0xfb8>
   1b5e0:	mov	r1, r4
   1b5e4:	ldr	r2, [sp, #72]	; 0x48
   1b5e8:	mov	r3, r0
   1b5ec:	mov	r0, #1
   1b5f0:	bl	11580 <__printf_chk@plt>
   1b5f4:	ldr	r0, [r9, #4]
   1b5f8:	ldr	r3, [r6, #4]
   1b5fc:	cmp	r0, #11
   1b600:	add	r3, r3, #1
   1b604:	str	r3, [r6, #4]
   1b608:	bne	1ae98 <elf32_fsize@plt+0x97e0>
   1b60c:	ldr	r7, [sp, #100]	; 0x64
   1b610:	ldrh	r4, [r7, #16]
   1b614:	cmp	r4, #1
   1b618:	beq	1c980 <elf32_fsize@plt+0xb2c8>
   1b61c:	mov	r2, r9
   1b620:	ldr	r9, [sp, #100]	; 0x64
   1b624:	ldr	r3, [sp, #72]	; 0x48
   1b628:	ldr	r0, [sp, #76]	; 0x4c
   1b62c:	add	r1, r9, #16
   1b630:	bl	12a0c <elf32_fsize@plt+0x1354>
   1b634:	b	1b084 <elf32_fsize@plt+0x99cc>
   1b638:	mov	r0, r6
   1b63c:	movw	r1, #21092	; 0x5264
   1b640:	movt	r1, #2
   1b644:	bl	11358 <strcmp@plt>
   1b648:	cmp	r0, #0
   1b64c:	ldreq	r5, [sp, #72]	; 0x48
   1b650:	streq	r5, [fp, #56]	; 0x38
   1b654:	b	1a96c <elf32_fsize@plt+0x92b4>
   1b658:	mov	r2, #5
   1b65c:	movw	r1, #21696	; 0x54c0
   1b660:	mov	r0, #0
   1b664:	movt	r1, #2
   1b668:	bl	113b8 <dcgettext@plt>
   1b66c:	ldr	r5, [sp, #76]	; 0x4c
   1b670:	ldr	r1, [sp, #72]	; 0x48
   1b674:	movw	r6, #37252	; 0x9184
   1b678:	movt	r6, #3
   1b67c:	mov	r4, r0
   1b680:	add	r0, r5, #16
   1b684:	bl	12670 <elf32_fsize@plt+0xfb8>
   1b688:	mov	r1, r4
   1b68c:	ldr	r2, [sp, #72]	; 0x48
   1b690:	mov	r3, r0
   1b694:	mov	r0, #1
   1b698:	bl	11580 <__printf_chk@plt>
   1b69c:	ldrd	r2, [r9, #8]
   1b6a0:	ldr	r1, [r6, #4]
   1b6a4:	mov	r0, r2
   1b6a8:	add	r1, r1, #1
   1b6ac:	str	r1, [r6, #4]
   1b6b0:	mov	r1, r3
   1b6b4:	b	1ab50 <elf32_fsize@plt+0x9498>
   1b6b8:	ldr	r7, [sp, #72]	; 0x48
   1b6bc:	mov	r2, #5
   1b6c0:	movw	r1, #20448	; 0x4fe0
   1b6c4:	movt	r1, #2
   1b6c8:	add	r7, r7, #1
   1b6cc:	str	r7, [sp, #96]	; 0x60
   1b6d0:	bl	113b8 <dcgettext@plt>
   1b6d4:	ldr	r1, [sp, #72]	; 0x48
   1b6d8:	mov	r5, r0
   1b6dc:	add	r0, r6, #16
   1b6e0:	bl	12670 <elf32_fsize@plt+0xfb8>
   1b6e4:	mov	r4, r0
   1b6e8:	mvn	r0, #0
   1b6ec:	bl	11520 <elf_errmsg@plt>
   1b6f0:	ldr	r2, [sp, #72]	; 0x48
   1b6f4:	mov	r1, r5
   1b6f8:	mov	r3, r4
   1b6fc:	str	r0, [sp]
   1b700:	mov	r0, #1
   1b704:	bl	11580 <__printf_chk@plt>
   1b708:	ldr	r3, [fp, #4]
   1b70c:	add	r3, r3, #1
   1b710:	str	r3, [fp, #4]
   1b714:	b	1b084 <elf32_fsize@plt+0x99cc>
   1b718:	cmn	r0, #-1879048190	; 0x90000002
   1b71c:	beq	1c3d4 <elf32_fsize@plt+0xad1c>
   1b720:	cmn	r0, #-1879048191	; 0x90000001
   1b724:	bne	1be24 <elf32_fsize@plt+0xa76c>
   1b728:	ldr	r4, [sp, #124]	; 0x7c
   1b72c:	cmp	r4, #0
   1b730:	bne	1cbe4 <elf32_fsize@plt+0xb52c>
   1b734:	ldr	r8, [sp, #72]	; 0x48
   1b738:	str	r8, [sp, #124]	; 0x7c
   1b73c:	b	1b084 <elf32_fsize@plt+0x99cc>
   1b740:	cmp	r0, #7
   1b744:	beq	1c298 <elf32_fsize@plt+0xabe0>
   1b748:	bcc	1be08 <elf32_fsize@plt+0xa750>
   1b74c:	cmp	r0, #9
   1b750:	bne	1b084 <elf32_fsize@plt+0x99cc>
   1b754:	ldr	ip, [sp, #76]	; 0x4c
   1b758:	ldr	r1, [sp, #72]	; 0x48
   1b75c:	ldr	r0, [ip, #16]
   1b760:	bl	11628 <elf_getscn@plt>
   1b764:	mov	r1, #0
   1b768:	bl	11484 <elf_getdata@plt>
   1b76c:	subs	r7, r0, #0
   1b770:	beq	1d0d4 <elf32_fsize@plt+0xba1c>
   1b774:	mov	r5, #8
   1b778:	add	r3, sp, #172	; 0xac
   1b77c:	add	r2, sp, #352	; 0x160
   1b780:	str	r3, [sp, #4]
   1b784:	str	r2, [sp, #8]
   1b788:	add	r3, sp, #176	; 0xb0
   1b78c:	mov	r2, r9
   1b790:	str	r3, [sp, #12]
   1b794:	ldr	r1, [sp, #100]	; 0x64
   1b798:	mov	r4, #0
   1b79c:	ldr	r3, [sp, #72]	; 0x48
   1b7a0:	str	r5, [sp]
   1b7a4:	ldr	r0, [sp, #76]	; 0x4c
   1b7a8:	str	r4, [sp, #172]	; 0xac
   1b7ac:	str	r4, [sp, #176]	; 0xb0
   1b7b0:	bl	191ec <elf32_fsize@plt+0x7b34>
   1b7b4:	ldr	r6, [sp, #76]	; 0x4c
   1b7b8:	ldr	r1, [r9, #40]	; 0x28
   1b7bc:	mov	r8, r0
   1b7c0:	ldr	r0, [r6, #16]
   1b7c4:	bl	11628 <elf_getscn@plt>
   1b7c8:	add	r1, sp, #416	; 0x1a0
   1b7cc:	mov	r6, r0
   1b7d0:	bl	1134c <gelf_getshdr@plt>
   1b7d4:	mov	r1, r4
   1b7d8:	mov	sl, r0
   1b7dc:	mov	r0, r6
   1b7e0:	bl	11484 <elf_getdata@plt>
   1b7e4:	ldr	ip, [sp, #76]	; 0x4c
   1b7e8:	mov	r2, #1
   1b7ec:	mov	r1, r5
   1b7f0:	mov	r3, r2
   1b7f4:	str	r4, [sp, #200]	; 0xc8
   1b7f8:	str	r0, [sp, #80]	; 0x50
   1b7fc:	ldr	r0, [ip, #16]
   1b800:	bl	11490 <gelf_fsize@plt>
   1b804:	mov	r3, r4
   1b808:	mov	r6, r0
   1b80c:	ldrd	r0, [r9, #32]
   1b810:	mov	r2, r6
   1b814:	bl	2042c <elf32_fsize@plt+0xed74>
   1b818:	orrs	lr, r0, r1
   1b81c:	beq	1be50 <elf32_fsize@plt+0xa798>
   1b820:	ldr	ip, [sp, #100]	; 0x64
   1b824:	add	r5, sp, #288	; 0x120
   1b828:	str	fp, [sp, #128]	; 0x80
   1b82c:	add	ip, ip, #16
   1b830:	str	ip, [sp, #104]	; 0x68
   1b834:	add	ip, r9, #8
   1b838:	str	ip, [sp, #88]	; 0x58
   1b83c:	ldr	ip, [sp, #76]	; 0x4c
   1b840:	str	r9, [sp, #64]	; 0x40
   1b844:	add	ip, ip, #16
   1b848:	str	r8, [sp, #48]	; 0x30
   1b84c:	str	ip, [sp, #148]	; 0x94
   1b850:	ldr	fp, [sp, #72]	; 0x48
   1b854:	b	1b8d8 <elf32_fsize@plt+0xa220>
   1b858:	ldr	r9, [sp, #80]	; 0x50
   1b85c:	str	r4, [sp]
   1b860:	str	sl, [sp, #4]
   1b864:	str	r9, [sp, #8]
   1b868:	ldrd	r8, [r3]
   1b86c:	ldr	ip, [sp, #172]	; 0xac
   1b870:	ldr	lr, [sp, #176]	; 0xb0
   1b874:	strd	r8, [sp, #16]
   1b878:	ldrd	r8, [r3, #8]
   1b87c:	mov	r3, fp
   1b880:	ldr	r0, [sp, #76]	; 0x4c
   1b884:	ldr	r1, [sp, #104]	; 0x68
   1b888:	strd	r8, [sp, #24]
   1b88c:	add	r8, sp, #200	; 0xc8
   1b890:	ldr	r9, [sp, #48]	; 0x30
   1b894:	ldr	r2, [sp, #88]	; 0x58
   1b898:	str	r8, [sp, #44]	; 0x2c
   1b89c:	str	r9, [sp, #36]	; 0x24
   1b8a0:	str	ip, [sp, #32]
   1b8a4:	str	lr, [sp, #40]	; 0x28
   1b8a8:	bl	14408 <elf32_fsize@plt+0x2d50>
   1b8ac:	ldr	r9, [sp, #64]	; 0x40
   1b8b0:	mov	r2, r6
   1b8b4:	mov	r3, #0
   1b8b8:	add	r4, r4, #1
   1b8bc:	ldrd	r0, [r9, #32]
   1b8c0:	bl	2042c <elf32_fsize@plt+0xed74>
   1b8c4:	mov	r2, r4
   1b8c8:	mov	r3, #0
   1b8cc:	cmp	r3, r1
   1b8d0:	cmpeq	r2, r0
   1b8d4:	bcs	1c3ec <elf32_fsize@plt+0xad34>
   1b8d8:	mov	r0, r7
   1b8dc:	mov	r1, r4
   1b8e0:	mov	r2, r5
   1b8e4:	bl	115ec <gelf_getrel@plt>
   1b8e8:	subs	r3, r0, #0
   1b8ec:	bne	1b858 <elf32_fsize@plt+0xa1a0>
   1b8f0:	mov	r2, #5
   1b8f4:	movw	r1, #22984	; 0x59c8
   1b8f8:	movt	r1, #2
   1b8fc:	bl	113b8 <dcgettext@plt>
   1b900:	mov	r1, fp
   1b904:	mov	r2, r0
   1b908:	ldr	r0, [sp, #148]	; 0x94
   1b90c:	str	r2, [sp, #56]	; 0x38
   1b910:	bl	12670 <elf32_fsize@plt+0xfb8>
   1b914:	mov	r3, r0
   1b918:	mvn	r0, #0
   1b91c:	str	r3, [sp, #60]	; 0x3c
   1b920:	bl	11520 <elf_errmsg@plt>
   1b924:	ldr	r2, [sp, #56]	; 0x38
   1b928:	ldr	r3, [sp, #60]	; 0x3c
   1b92c:	str	r4, [sp]
   1b930:	mov	r1, r2
   1b934:	mov	r2, fp
   1b938:	str	r0, [sp, #4]
   1b93c:	mov	r0, #1
   1b940:	bl	11580 <__printf_chk@plt>
   1b944:	ldr	r8, [sp, #128]	; 0x80
   1b948:	ldr	r3, [r8, #4]
   1b94c:	add	r3, r3, #1
   1b950:	str	r3, [r8, #4]
   1b954:	b	1b8ac <elf32_fsize@plt+0xa1f4>
   1b958:	movw	r1, #10156	; 0x27ac
   1b95c:	mov	r0, r7
   1b960:	movt	r1, #2
   1b964:	mov	r2, sl
   1b968:	bl	11388 <memcmp@plt>
   1b96c:	cmp	r0, #0
   1b970:	bne	1a7d4 <elf32_fsize@plt+0x911c>
   1b974:	ldr	r0, [sp, #76]	; 0x4c
   1b978:	bl	1ff18 <elf32_fsize@plt+0xe860>
   1b97c:	cmp	r0, #0
   1b980:	moveq	r0, r5
   1b984:	movne	r0, #8
   1b988:	b	1a7d8 <elf32_fsize@plt+0x9120>
   1b98c:	ldr	r0, [sp, #76]	; 0x4c
   1b990:	ldrd	r2, [sp, #64]	; 0x40
   1b994:	bl	1fd80 <elf32_fsize@plt+0xe6c8>
   1b998:	cmp	r0, #0
   1b99c:	beq	1c4d4 <elf32_fsize@plt+0xae1c>
   1b9a0:	movw	r6, #61448	; 0xf008
   1b9a4:	movt	r6, #4095	; 0xfff
   1b9a8:	mvn	r7, #0
   1b9ac:	and	r6, r6, r4
   1b9b0:	and	r7, r7, r5
   1b9b4:	orrs	r8, r6, r7
   1b9b8:	bne	1aa20 <elf32_fsize@plt+0x9368>
   1b9bc:	ldrd	r4, [r9, #8]
   1b9c0:	b	1aa70 <elf32_fsize@plt+0x93b8>
   1b9c4:	mov	r2, #5
   1b9c8:	movw	r1, #21436	; 0x53bc
   1b9cc:	mov	r0, #0
   1b9d0:	movt	r1, #2
   1b9d4:	bl	113b8 <dcgettext@plt>
   1b9d8:	ldr	ip, [sp, #76]	; 0x4c
   1b9dc:	ldr	r1, [sp, #72]	; 0x48
   1b9e0:	mov	r4, r0
   1b9e4:	add	r0, ip, #16
   1b9e8:	bl	12670 <elf32_fsize@plt+0xfb8>
   1b9ec:	mov	r1, r4
   1b9f0:	ldr	r2, [sp, #72]	; 0x48
   1b9f4:	mov	r3, r0
   1b9f8:	mov	r0, #1
   1b9fc:	bl	11580 <__printf_chk@plt>
   1ba00:	ldr	r3, [fp, #4]
   1ba04:	add	r3, r3, #1
   1ba08:	str	r3, [fp, #4]
   1ba0c:	ldr	r3, [r9, #4]
   1ba10:	cmp	r3, #8
   1ba14:	bne	1aadc <elf32_fsize@plt+0x9424>
   1ba18:	mov	r2, #5
   1ba1c:	movw	r1, #21500	; 0x53fc
   1ba20:	mov	r0, #0
   1ba24:	movt	r1, #2
   1ba28:	bl	113b8 <dcgettext@plt>
   1ba2c:	ldr	r5, [sp, #76]	; 0x4c
   1ba30:	ldr	r1, [sp, #72]	; 0x48
   1ba34:	mov	r4, r0
   1ba38:	add	r0, r5, #16
   1ba3c:	bl	12670 <elf32_fsize@plt+0xfb8>
   1ba40:	mov	r1, r4
   1ba44:	ldr	r2, [sp, #72]	; 0x48
   1ba48:	mov	r3, r0
   1ba4c:	mov	r0, #1
   1ba50:	bl	11580 <__printf_chk@plt>
   1ba54:	ldr	r3, [fp, #4]
   1ba58:	add	r3, r3, #1
   1ba5c:	str	r3, [fp, #4]
   1ba60:	b	1aadc <elf32_fsize@plt+0x9424>
   1ba64:	mov	r2, #5
   1ba68:	movw	r1, #21820	; 0x553c
   1ba6c:	mov	r0, #0
   1ba70:	movt	r1, #2
   1ba74:	bl	113b8 <dcgettext@plt>
   1ba78:	ldr	r5, [sp, #76]	; 0x4c
   1ba7c:	ldr	r1, [sp, #72]	; 0x48
   1ba80:	mov	r4, r0
   1ba84:	add	r0, r5, #16
   1ba88:	bl	12670 <elf32_fsize@plt+0xfb8>
   1ba8c:	mov	r1, r4
   1ba90:	ldr	r2, [sp, #72]	; 0x48
   1ba94:	mov	r3, r0
   1ba98:	mov	r0, #1
   1ba9c:	bl	11580 <__printf_chk@plt>
   1baa0:	ldr	r3, [fp, #4]
   1baa4:	ldrd	r0, [r9, #8]
   1baa8:	add	r3, r3, #1
   1baac:	str	r3, [fp, #4]
   1bab0:	b	1ab7c <elf32_fsize@plt+0x94c4>
   1bab4:	mov	r2, #5
   1bab8:	movw	r1, #21112	; 0x5278
   1babc:	mov	r0, #0
   1bac0:	movt	r1, #2
   1bac4:	bl	113b8 <dcgettext@plt>
   1bac8:	ldr	r8, [sp, #76]	; 0x4c
   1bacc:	ldr	r1, [sp, #72]	; 0x48
   1bad0:	mov	r4, r0
   1bad4:	add	r0, r8, #16
   1bad8:	bl	12670 <elf32_fsize@plt+0xfb8>
   1badc:	mov	r1, r4
   1bae0:	ldr	r2, [sp, #72]	; 0x48
   1bae4:	mov	r3, r0
   1bae8:	mov	r0, #1
   1baec:	bl	11580 <__printf_chk@plt>
   1baf0:	ldr	r3, [fp, #4]
   1baf4:	add	r3, r3, #1
   1baf8:	str	r3, [fp, #4]
   1bafc:	b	1a988 <elf32_fsize@plt+0x92d0>
   1bb00:	ldrb	r0, [fp, #44]	; 0x2c
   1bb04:	cmp	r0, #0
   1bb08:	movne	r7, #1
   1bb0c:	strne	r7, [sp, #132]	; 0x84
   1bb10:	bne	1a94c <elf32_fsize@plt+0x9294>
   1bb14:	mov	r2, #5
   1bb18:	movw	r1, #20812	; 0x514c
   1bb1c:	movt	r1, #2
   1bb20:	movw	r8, #37252	; 0x9184
   1bb24:	bl	113b8 <dcgettext@plt>
   1bb28:	movt	r8, #3
   1bb2c:	mov	r3, r6
   1bb30:	ldr	r2, [sp, #72]	; 0x48
   1bb34:	mov	r1, r0
   1bb38:	mov	r0, #1
   1bb3c:	bl	11580 <__printf_chk@plt>
   1bb40:	ldr	r3, [r8, #4]
   1bb44:	mov	ip, #1
   1bb48:	str	ip, [sp, #132]	; 0x84
   1bb4c:	add	r3, r3, ip
   1bb50:	str	r3, [r8, #4]
   1bb54:	b	1a94c <elf32_fsize@plt+0x9294>
   1bb58:	ldr	r3, [r9, #4]
   1bb5c:	cmp	r3, #8
   1bb60:	beq	1ac80 <elf32_fsize@plt+0x95c8>
   1bb64:	mov	r2, #5
   1bb68:	movw	r1, #22116	; 0x5664
   1bb6c:	mov	r0, #0
   1bb70:	movt	r1, #2
   1bb74:	ldr	r8, [sp, #76]	; 0x4c
   1bb78:	bl	113b8 <dcgettext@plt>
   1bb7c:	ldr	r1, [sp, #72]	; 0x48
   1bb80:	add	r4, r8, #16
   1bb84:	mov	r5, r0
   1bb88:	mov	r0, r4
   1bb8c:	bl	12670 <elf32_fsize@plt+0xfb8>
   1bb90:	ldr	r2, [sp, #72]	; 0x48
   1bb94:	mov	r1, r5
   1bb98:	mov	r3, r0
   1bb9c:	mov	r0, #1
   1bba0:	bl	11580 <__printf_chk@plt>
   1bba4:	movw	ip, #37252	; 0x9184
   1bba8:	movt	ip, #3
   1bbac:	ldrb	r2, [ip, #22]
   1bbb0:	ldr	r3, [ip, #4]
   1bbb4:	cmp	r2, #0
   1bbb8:	add	r3, r3, #1
   1bbbc:	str	r3, [ip, #4]
   1bbc0:	bne	1ac80 <elf32_fsize@plt+0x95c8>
   1bbc4:	b	1ac58 <elf32_fsize@plt+0x95a0>
   1bbc8:	ldr	ip, [sp, #76]	; 0x4c
   1bbcc:	ldr	r1, [sp, #72]	; 0x48
   1bbd0:	ldr	r0, [ip, #16]
   1bbd4:	bl	11628 <elf_getscn@plt>
   1bbd8:	mov	r1, #0
   1bbdc:	bl	11484 <elf_getdata@plt>
   1bbe0:	subs	r7, r0, #0
   1bbe4:	beq	1d0d4 <elf32_fsize@plt+0xba1c>
   1bbe8:	mov	r5, #7
   1bbec:	add	r3, sp, #172	; 0xac
   1bbf0:	add	r2, sp, #352	; 0x160
   1bbf4:	str	r3, [sp, #4]
   1bbf8:	str	r2, [sp, #8]
   1bbfc:	add	r3, sp, #176	; 0xb0
   1bc00:	mov	r2, r9
   1bc04:	str	r3, [sp, #12]
   1bc08:	ldr	r1, [sp, #100]	; 0x64
   1bc0c:	mov	r4, #0
   1bc10:	ldr	r3, [sp, #72]	; 0x48
   1bc14:	str	r5, [sp]
   1bc18:	ldr	r0, [sp, #76]	; 0x4c
   1bc1c:	str	r4, [sp, #172]	; 0xac
   1bc20:	str	r4, [sp, #176]	; 0xb0
   1bc24:	bl	191ec <elf32_fsize@plt+0x7b34>
   1bc28:	ldr	r6, [sp, #76]	; 0x4c
   1bc2c:	ldr	r1, [r9, #40]	; 0x28
   1bc30:	mov	r8, r0
   1bc34:	ldr	r0, [r6, #16]
   1bc38:	bl	11628 <elf_getscn@plt>
   1bc3c:	add	r1, sp, #416	; 0x1a0
   1bc40:	mov	r6, r0
   1bc44:	bl	1134c <gelf_getshdr@plt>
   1bc48:	mov	r1, r4
   1bc4c:	mov	sl, r0
   1bc50:	mov	r0, r6
   1bc54:	bl	11484 <elf_getdata@plt>
   1bc58:	ldr	ip, [sp, #76]	; 0x4c
   1bc5c:	mov	r2, #1
   1bc60:	mov	r1, r5
   1bc64:	mov	r3, r2
   1bc68:	str	r4, [sp, #200]	; 0xc8
   1bc6c:	str	r0, [sp, #80]	; 0x50
   1bc70:	ldr	r0, [ip, #16]
   1bc74:	bl	11490 <gelf_fsize@plt>
   1bc78:	mov	r3, r4
   1bc7c:	mov	r6, r0
   1bc80:	ldrd	r0, [r9, #32]
   1bc84:	mov	r2, r6
   1bc88:	bl	2042c <elf32_fsize@plt+0xed74>
   1bc8c:	orrs	lr, r0, r1
   1bc90:	beq	1bdd8 <elf32_fsize@plt+0xa720>
   1bc94:	ldr	ip, [sp, #100]	; 0x64
   1bc98:	add	r5, sp, #288	; 0x120
   1bc9c:	str	fp, [sp, #128]	; 0x80
   1bca0:	add	ip, ip, #16
   1bca4:	str	ip, [sp, #104]	; 0x68
   1bca8:	add	ip, r9, #8
   1bcac:	str	ip, [sp, #88]	; 0x58
   1bcb0:	ldr	ip, [sp, #76]	; 0x4c
   1bcb4:	str	r9, [sp, #64]	; 0x40
   1bcb8:	add	ip, ip, #16
   1bcbc:	str	r8, [sp, #48]	; 0x30
   1bcc0:	str	ip, [sp, #148]	; 0x94
   1bcc4:	ldr	fp, [sp, #72]	; 0x48
   1bcc8:	b	1bd4c <elf32_fsize@plt+0xa694>
   1bccc:	ldr	r9, [sp, #80]	; 0x50
   1bcd0:	str	r4, [sp]
   1bcd4:	str	sl, [sp, #4]
   1bcd8:	str	r9, [sp, #8]
   1bcdc:	ldrd	r8, [r3]
   1bce0:	ldr	ip, [sp, #172]	; 0xac
   1bce4:	ldr	lr, [sp, #176]	; 0xb0
   1bce8:	strd	r8, [sp, #16]
   1bcec:	ldrd	r8, [r3, #8]
   1bcf0:	mov	r3, fp
   1bcf4:	ldr	r0, [sp, #76]	; 0x4c
   1bcf8:	ldr	r1, [sp, #104]	; 0x68
   1bcfc:	strd	r8, [sp, #24]
   1bd00:	add	r8, sp, #200	; 0xc8
   1bd04:	ldr	r9, [sp, #48]	; 0x30
   1bd08:	ldr	r2, [sp, #88]	; 0x58
   1bd0c:	str	r8, [sp, #44]	; 0x2c
   1bd10:	str	r9, [sp, #36]	; 0x24
   1bd14:	str	ip, [sp, #32]
   1bd18:	str	lr, [sp, #40]	; 0x28
   1bd1c:	bl	14408 <elf32_fsize@plt+0x2d50>
   1bd20:	ldr	r9, [sp, #64]	; 0x40
   1bd24:	mov	r2, r6
   1bd28:	mov	r3, #0
   1bd2c:	add	r4, r4, #1
   1bd30:	ldrd	r0, [r9, #32]
   1bd34:	bl	2042c <elf32_fsize@plt+0xed74>
   1bd38:	mov	r2, r4
   1bd3c:	mov	r3, #0
   1bd40:	cmp	r3, r1
   1bd44:	cmpeq	r2, r0
   1bd48:	bcs	1c3f4 <elf32_fsize@plt+0xad3c>
   1bd4c:	mov	r0, r7
   1bd50:	mov	r1, r4
   1bd54:	mov	r2, r5
   1bd58:	bl	11538 <gelf_getrela@plt>
   1bd5c:	subs	r3, r0, #0
   1bd60:	bne	1bccc <elf32_fsize@plt+0xa614>
   1bd64:	mov	r2, #5
   1bd68:	movw	r1, #22984	; 0x59c8
   1bd6c:	movt	r1, #2
   1bd70:	bl	113b8 <dcgettext@plt>
   1bd74:	mov	r1, fp
   1bd78:	mov	r2, r0
   1bd7c:	ldr	r0, [sp, #148]	; 0x94
   1bd80:	str	r2, [sp, #56]	; 0x38
   1bd84:	bl	12670 <elf32_fsize@plt+0xfb8>
   1bd88:	mov	r3, r0
   1bd8c:	mvn	r0, #0
   1bd90:	str	r3, [sp, #60]	; 0x3c
   1bd94:	bl	11520 <elf_errmsg@plt>
   1bd98:	ldr	r2, [sp, #56]	; 0x38
   1bd9c:	ldr	r3, [sp, #60]	; 0x3c
   1bda0:	str	r4, [sp]
   1bda4:	mov	r1, r2
   1bda8:	mov	r2, fp
   1bdac:	str	r0, [sp, #4]
   1bdb0:	mov	r0, #1
   1bdb4:	bl	11580 <__printf_chk@plt>
   1bdb8:	ldr	r8, [sp, #128]	; 0x80
   1bdbc:	ldr	r3, [r8, #4]
   1bdc0:	add	r3, r3, #1
   1bdc4:	str	r3, [r8, #4]
   1bdc8:	b	1bd20 <elf32_fsize@plt+0xa668>
   1bdcc:	ldr	r3, [r0, #20]
   1bdd0:	str	r3, [sp, #176]	; 0xb0
   1bdd4:	bl	11370 <free@plt>
   1bdd8:	ldr	r0, [sp, #176]	; 0xb0
   1bddc:	cmp	r0, #0
   1bde0:	bne	1bdcc <elf32_fsize@plt+0xa714>
   1bde4:	b	1b084 <elf32_fsize@plt+0x99cc>
   1bde8:	ldr	r6, [sp, #72]	; 0x48
   1bdec:	ldr	r7, [sp, #100]	; 0x64
   1bdf0:	ldrd	r2, [r9, #32]
   1bdf4:	ldr	r0, [sp, #76]	; 0x4c
   1bdf8:	add	r1, r7, #5
   1bdfc:	str	r6, [sp]
   1be00:	bl	19a80 <elf32_fsize@plt+0x83c8>
   1be04:	b	1b084 <elf32_fsize@plt+0x99cc>
   1be08:	ldr	ip, [sp, #100]	; 0x64
   1be0c:	mov	r2, r9
   1be10:	ldr	r3, [sp, #72]	; 0x48
   1be14:	ldr	r0, [sp, #76]	; 0x4c
   1be18:	add	r1, ip, #16
   1be1c:	bl	14a88 <elf32_fsize@plt+0x33d0>
   1be20:	b	1b084 <elf32_fsize@plt+0x99cc>
   1be24:	cmn	r0, #-1879048189	; 0x90000003
   1be28:	bne	1b084 <elf32_fsize@plt+0x99cc>
   1be2c:	ldr	r3, [sp, #72]	; 0x48
   1be30:	add	r1, r9, #40	; 0x28
   1be34:	ldr	r0, [sp, #76]	; 0x4c
   1be38:	add	r2, r9, #44	; 0x2c
   1be3c:	bl	17e74 <elf32_fsize@plt+0x67bc>
   1be40:	b	1b084 <elf32_fsize@plt+0x99cc>
   1be44:	ldr	r3, [r0, #20]
   1be48:	str	r3, [sp, #176]	; 0xb0
   1be4c:	bl	11370 <free@plt>
   1be50:	ldr	r0, [sp, #176]	; 0xb0
   1be54:	cmp	r0, #0
   1be58:	bne	1be44 <elf32_fsize@plt+0xa78c>
   1be5c:	b	1b084 <elf32_fsize@plt+0x99cc>
   1be60:	ldr	r5, [sp, #132]	; 0x84
   1be64:	cmp	r5, #0
   1be68:	beq	1cc74 <elf32_fsize@plt+0xb5bc>
   1be6c:	ldr	r6, [sp, #144]	; 0x90
   1be70:	ldr	r7, [sp, #140]	; 0x8c
   1be74:	cmp	r6, #0
   1be78:	cmpne	r7, #0
   1be7c:	moveq	sl, #0
   1be80:	movne	sl, #1
   1be84:	b	1b0c8 <elf32_fsize@plt+0x9a10>
   1be88:	ldr	r7, [sp, #100]	; 0x64
   1be8c:	movw	r3, #65535	; 0xffff
   1be90:	ldrh	r2, [r7, #56]	; 0x38
   1be94:	cmp	r2, r3
   1be98:	beq	1a6c4 <elf32_fsize@plt+0x900c>
   1be9c:	movw	r1, #20356	; 0x4f84
   1bea0:	movt	r1, #2
   1bea4:	mov	r0, #0
   1bea8:	mov	r2, #5
   1beac:	bl	113b8 <dcgettext@plt>
   1beb0:	mov	r1, r0
   1beb4:	mov	r0, #1
   1beb8:	bl	11580 <__printf_chk@plt>
   1bebc:	ldr	r3, [r8, #4]
   1bec0:	add	r3, r3, #1
   1bec4:	str	r3, [r8, #4]
   1bec8:	b	1a6c4 <elf32_fsize@plt+0x900c>
   1becc:	orr	r3, r7, r4
   1bed0:	mov	r1, #0
   1bed4:	orr	r3, r3, #2688	; 0xa80
   1bed8:	mvn	r3, r3
   1bedc:	and	r0, r0, r3
   1bee0:	orrs	r3, r0, r1
   1bee4:	beq	1a8f4 <elf32_fsize@plt+0x923c>
   1bee8:	b	1b528 <elf32_fsize@plt+0x9e70>
   1beec:	mov	r2, #5
   1bef0:	movw	r1, #20132	; 0x4ea4
   1bef4:	mov	r0, #0
   1bef8:	movt	r1, #2
   1befc:	bl	113b8 <dcgettext@plt>
   1bf00:	mov	r1, r0
   1bf04:	mov	r0, #1
   1bf08:	bl	11580 <__printf_chk@plt>
   1bf0c:	ldr	r3, [r8, #4]
   1bf10:	add	r3, r3, #1
   1bf14:	str	r3, [r8, #4]
   1bf18:	b	1a650 <elf32_fsize@plt+0x8f98>
   1bf1c:	mov	r2, #5
   1bf20:	movw	r1, #20092	; 0x4e7c
   1bf24:	mov	r0, #0
   1bf28:	movt	r1, #2
   1bf2c:	bl	113b8 <dcgettext@plt>
   1bf30:	mov	r1, r0
   1bf34:	mov	r0, #1
   1bf38:	bl	11580 <__printf_chk@plt>
   1bf3c:	ldr	r3, [r8, #4]
   1bf40:	add	r3, r3, #1
   1bf44:	str	r3, [r8, #4]
   1bf48:	b	1a644 <elf32_fsize@plt+0x8f8c>
   1bf4c:	mov	r2, #5
   1bf50:	movw	r1, #20056	; 0x4e58
   1bf54:	mov	r0, #0
   1bf58:	movt	r1, #2
   1bf5c:	bl	113b8 <dcgettext@plt>
   1bf60:	mov	r1, r0
   1bf64:	mov	r0, #1
   1bf68:	bl	11580 <__printf_chk@plt>
   1bf6c:	ldr	r3, [r8, #4]
   1bf70:	add	r3, r3, #1
   1bf74:	str	r3, [r8, #4]
   1bf78:	b	1a638 <elf32_fsize@plt+0x8f80>
   1bf7c:	mov	r2, #5
   1bf80:	movw	r1, #20020	; 0x4e34
   1bf84:	mov	r0, #0
   1bf88:	movt	r1, #2
   1bf8c:	bl	113b8 <dcgettext@plt>
   1bf90:	mov	r1, r0
   1bf94:	mov	r0, #1
   1bf98:	bl	11580 <__printf_chk@plt>
   1bf9c:	ldr	r3, [r8, #4]
   1bfa0:	add	r3, r3, #1
   1bfa4:	str	r3, [r8, #4]
   1bfa8:	b	1a62c <elf32_fsize@plt+0x8f74>
   1bfac:	mov	r2, #5
   1bfb0:	movw	r1, #19984	; 0x4e10
   1bfb4:	mov	r0, #0
   1bfb8:	movt	r1, #2
   1bfbc:	bl	113b8 <dcgettext@plt>
   1bfc0:	mov	r1, r0
   1bfc4:	mov	r0, #1
   1bfc8:	bl	11580 <__printf_chk@plt>
   1bfcc:	ldr	r3, [r8, #4]
   1bfd0:	add	r3, r3, #1
   1bfd4:	str	r3, [r8, #4]
   1bfd8:	b	1a620 <elf32_fsize@plt+0x8f68>
   1bfdc:	mov	r2, #5
   1bfe0:	movw	r1, #19912	; 0x4dc8
   1bfe4:	mov	r0, #0
   1bfe8:	movt	r1, #2
   1bfec:	bl	113b8 <dcgettext@plt>
   1bff0:	mov	r1, r0
   1bff4:	mov	r0, #1
   1bff8:	bl	11580 <__printf_chk@plt>
   1bffc:	ldr	r3, [r8, #4]
   1c000:	add	r3, r3, #1
   1c004:	str	r3, [r8, #4]
   1c008:	b	1a608 <elf32_fsize@plt+0x8f50>
   1c00c:	mov	r2, #5
   1c010:	movw	r1, #19948	; 0x4dec
   1c014:	mov	r0, #0
   1c018:	movt	r1, #2
   1c01c:	bl	113b8 <dcgettext@plt>
   1c020:	mov	r1, r0
   1c024:	mov	r0, #1
   1c028:	bl	11580 <__printf_chk@plt>
   1c02c:	ldr	r3, [r8, #4]
   1c030:	add	r3, r3, #1
   1c034:	str	r3, [r8, #4]
   1c038:	b	1a614 <elf32_fsize@plt+0x8f5c>
   1c03c:	mov	r0, r7
   1c040:	mov	r2, sl
   1c044:	movw	r1, #20536	; 0x5038
   1c048:	movt	r1, #2
   1c04c:	bl	11388 <memcmp@plt>
   1c050:	cmp	r0, #0
   1c054:	beq	1b270 <elf32_fsize@plt+0x9bb8>
   1c058:	b	1a82c <elf32_fsize@plt+0x9174>
   1c05c:	mov	r2, #5
   1c060:	movw	r1, #22728	; 0x58c8
   1c064:	mov	r0, #0
   1c068:	movt	r1, #2
   1c06c:	bl	113b8 <dcgettext@plt>
   1c070:	ldr	r8, [sp, #76]	; 0x4c
   1c074:	ldr	r1, [sp, #72]	; 0x48
   1c078:	mov	r4, r0
   1c07c:	add	r0, r8, #16
   1c080:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c084:	mov	r1, r4
   1c088:	ldr	r2, [sp, #72]	; 0x48
   1c08c:	mov	r3, r0
   1c090:	mov	r0, #1
   1c094:	bl	11580 <__printf_chk@plt>
   1c098:	ldr	r3, [fp, #4]
   1c09c:	add	r3, r3, #1
   1c0a0:	str	r3, [fp, #4]
   1c0a4:	b	1ae7c <elf32_fsize@plt+0x97c4>
   1c0a8:	mov	r2, #5
   1c0ac:	movw	r1, #22180	; 0x56a4
   1c0b0:	movt	r1, #2
   1c0b4:	bl	113b8 <dcgettext@plt>
   1c0b8:	ldr	r1, [sp, #72]	; 0x48
   1c0bc:	mov	r5, r0
   1c0c0:	mov	r0, r4
   1c0c4:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c0c8:	mov	r1, r5
   1c0cc:	ldr	r2, [sp, #72]	; 0x48
   1c0d0:	mov	r3, r0
   1c0d4:	mov	r0, #1
   1c0d8:	bl	11580 <__printf_chk@plt>
   1c0dc:	ldr	r3, [fp, #4]
   1c0e0:	add	r3, r3, #1
   1c0e4:	str	r3, [fp, #4]
   1c0e8:	b	1ac80 <elf32_fsize@plt+0x95c8>
   1c0ec:	mov	r2, #5
   1c0f0:	movw	r1, #24736	; 0x60a0
   1c0f4:	mov	r0, #0
   1c0f8:	movt	r1, #2
   1c0fc:	bl	113b8 <dcgettext@plt>
   1c100:	ldrh	r2, [r4, #8]
   1c104:	mov	r1, r0
   1c108:	mov	r0, #1
   1c10c:	bl	11580 <__printf_chk@plt>
   1c110:	ldm	r8, {r0, r3}
   1c114:	add	r3, r3, #1
   1c118:	str	r3, [r8, #4]
   1c11c:	ldr	r4, [r0, #16]
   1c120:	str	r4, [r8]
   1c124:	bl	11370 <free@plt>
   1c128:	cmp	r4, #0
   1c12c:	bne	1b1b8 <elf32_fsize@plt+0x9b00>
   1c130:	b	1b21c <elf32_fsize@plt+0x9b64>
   1c134:	mov	r2, #5
   1c138:	movw	r1, #21368	; 0x5378
   1c13c:	movt	r1, #2
   1c140:	movw	r6, #37252	; 0x9184
   1c144:	bl	113b8 <dcgettext@plt>
   1c148:	ldr	r5, [sp, #76]	; 0x4c
   1c14c:	ldr	r1, [sp, #72]	; 0x48
   1c150:	movt	r6, #3
   1c154:	mov	r4, r0
   1c158:	add	r0, r5, #16
   1c15c:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c160:	mov	r1, r4
   1c164:	ldr	r2, [sp, #72]	; 0x48
   1c168:	mov	r3, r0
   1c16c:	mov	r0, #1
   1c170:	bl	11580 <__printf_chk@plt>
   1c174:	ldr	r3, [r6, #4]
   1c178:	ldrd	r4, [r9, #8]
   1c17c:	add	r3, r3, #1
   1c180:	str	r3, [r6, #4]
   1c184:	b	1aaa0 <elf32_fsize@plt+0x93e8>
   1c188:	mov	r2, #5
   1c18c:	movw	r1, #21168	; 0x52b0
   1c190:	movt	r1, #2
   1c194:	bl	113b8 <dcgettext@plt>
   1c198:	mov	r1, r0
   1c19c:	mov	r0, #1
   1c1a0:	bl	11580 <__printf_chk@plt>
   1c1a4:	movw	lr, #37252	; 0x9184
   1c1a8:	movt	lr, #3
   1c1ac:	ldr	r3, [lr, #4]
   1c1b0:	add	r3, r3, #1
   1c1b4:	str	r3, [lr, #4]
   1c1b8:	b	1a9a4 <elf32_fsize@plt+0x92ec>
   1c1bc:	mov	r2, #5
   1c1c0:	movw	r1, #20504	; 0x5018
   1c1c4:	movt	r1, #2
   1c1c8:	bl	113b8 <dcgettext@plt>
   1c1cc:	ldr	r2, [sp, #72]	; 0x48
   1c1d0:	mov	r1, r0
   1c1d4:	mov	r0, #1
   1c1d8:	bl	11580 <__printf_chk@plt>
   1c1dc:	movw	ip, #37252	; 0x9184
   1c1e0:	movt	ip, #3
   1c1e4:	ldr	r3, [ip, #4]
   1c1e8:	add	r3, r3, #1
   1c1ec:	str	r3, [ip, #4]
   1c1f0:	b	1a96c <elf32_fsize@plt+0x92b4>
   1c1f4:	ldr	r4, [sp, #100]	; 0x64
   1c1f8:	ldrh	r5, [r4, #16]
   1c1fc:	cmp	r5, #1
   1c200:	beq	1ccbc <elf32_fsize@plt+0xb604>
   1c204:	movw	r1, #23036	; 0x59fc
   1c208:	movt	r1, #2
   1c20c:	mov	r0, #0
   1c210:	mov	r2, #5
   1c214:	bl	113b8 <dcgettext@plt>
   1c218:	ldr	r5, [sp, #76]	; 0x4c
   1c21c:	ldr	r1, [sp, #72]	; 0x48
   1c220:	mov	r4, r0
   1c224:	add	r0, r5, #16
   1c228:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c22c:	mov	r1, r4
   1c230:	ldr	r2, [sp, #72]	; 0x48
   1c234:	mov	r3, r0
   1c238:	mov	r0, #1
   1c23c:	bl	11580 <__printf_chk@plt>
   1c240:	ldr	r3, [fp, #4]
   1c244:	add	r3, r3, #1
   1c248:	str	r3, [fp, #4]
   1c24c:	b	1b084 <elf32_fsize@plt+0x99cc>
   1c250:	ldr	r7, [sp, #72]	; 0x48
   1c254:	mov	r3, r9
   1c258:	ldr	r6, [sp, #100]	; 0x64
   1c25c:	ldr	r1, [sp, #76]	; 0x4c
   1c260:	str	r7, [sp, #144]	; 0x90
   1c264:	ldrh	r2, [r6, #16]
   1c268:	str	r7, [sp]
   1c26c:	bl	15c10 <elf32_fsize@plt+0x4558>
   1c270:	b	1b084 <elf32_fsize@plt+0x99cc>
   1c274:	ldr	r5, [sp, #72]	; 0x48
   1c278:	mov	r3, r9
   1c27c:	ldr	r4, [sp, #100]	; 0x64
   1c280:	ldr	r1, [sp, #76]	; 0x4c
   1c284:	str	r5, [sp, #140]	; 0x8c
   1c288:	ldrh	r2, [r4, #16]
   1c28c:	str	r5, [sp]
   1c290:	bl	15c10 <elf32_fsize@plt+0x4558>
   1c294:	b	1b084 <elf32_fsize@plt+0x99cc>
   1c298:	ldrd	r2, [r9, #32]
   1c29c:	orrs	ip, r2, r3
   1c2a0:	beq	1b084 <elf32_fsize@plt+0x99cc>
   1c2a4:	ldr	r4, [sp, #76]	; 0x4c
   1c2a8:	ldr	r1, [sp, #72]	; 0x48
   1c2ac:	ldr	r0, [r4, #16]
   1c2b0:	bl	11628 <elf_getscn@plt>
   1c2b4:	mov	r1, #0
   1c2b8:	bl	11484 <elf_getdata@plt>
   1c2bc:	subs	r4, r0, #0
   1c2c0:	beq	1d50c <elf32_fsize@plt+0xbe54>
   1c2c4:	ldr	r3, [r4]
   1c2c8:	cmp	r3, #0
   1c2cc:	beq	1d50c <elf32_fsize@plt+0xbe54>
   1c2d0:	ldr	r6, [sp, #100]	; 0x64
   1c2d4:	ldrh	r3, [r6, #16]
   1c2d8:	sub	r3, r3, #1
   1c2dc:	cmp	r3, #3
   1c2e0:	bls	1c32c <elf32_fsize@plt+0xac74>
   1c2e4:	mov	r2, #5
   1c2e8:	movw	r1, #23792	; 0x5cf0
   1c2ec:	mov	r0, #0
   1c2f0:	movt	r1, #2
   1c2f4:	bl	113b8 <dcgettext@plt>
   1c2f8:	ldr	r7, [sp, #76]	; 0x4c
   1c2fc:	ldr	r1, [sp, #72]	; 0x48
   1c300:	mov	r5, r0
   1c304:	add	r0, r7, #16
   1c308:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c30c:	mov	r1, r5
   1c310:	ldr	r2, [sp, #72]	; 0x48
   1c314:	mov	r3, r0
   1c318:	mov	r0, #1
   1c31c:	bl	11580 <__printf_chk@plt>
   1c320:	ldr	r3, [fp, #4]
   1c324:	add	r3, r3, #1
   1c328:	str	r3, [fp, #4]
   1c32c:	ldr	r8, [sp, #100]	; 0x64
   1c330:	mov	r2, r4
   1c334:	mov	r0, #0
   1c338:	mov	r1, #0
   1c33c:	mov	r4, #0
   1c340:	strd	r0, [sp, #8]
   1c344:	str	r4, [sp]
   1c348:	add	r1, r8, #16
   1c34c:	ldr	r0, [sp, #76]	; 0x4c
   1c350:	ldr	r3, [sp, #72]	; 0x48
   1c354:	bl	12700 <elf32_fsize@plt+0x1048>
   1c358:	mov	r6, r0
   1c35c:	mov	r7, r1
   1c360:	orrs	ip, r6, r7
   1c364:	beq	1ca1c <elf32_fsize@plt+0xb364>
   1c368:	ldrd	r2, [r9, #32]
   1c36c:	cmp	r7, r3
   1c370:	cmpeq	r6, r2
   1c374:	beq	1b084 <elf32_fsize@plt+0x99cc>
   1c378:	mov	r2, #5
   1c37c:	mov	r0, r4
   1c380:	movw	r1, #23916	; 0x5d6c
   1c384:	movt	r1, #2
   1c388:	bl	113b8 <dcgettext@plt>
   1c38c:	ldr	ip, [sp, #76]	; 0x4c
   1c390:	ldr	r1, [sp, #72]	; 0x48
   1c394:	mov	r8, r0
   1c398:	add	r0, ip, #16
   1c39c:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c3a0:	ldrd	r4, [r9, #32]
   1c3a4:	mov	r1, r8
   1c3a8:	ldr	r2, [sp, #72]	; 0x48
   1c3ac:	subs	r4, r4, r6
   1c3b0:	sbc	r5, r5, r7
   1c3b4:	strd	r4, [sp]
   1c3b8:	mov	r3, r0
   1c3bc:	mov	r0, #1
   1c3c0:	bl	11580 <__printf_chk@plt>
   1c3c4:	ldr	r3, [fp, #4]
   1c3c8:	add	r3, r3, #1
   1c3cc:	str	r3, [fp, #4]
   1c3d0:	b	1b084 <elf32_fsize@plt+0x99cc>
   1c3d4:	ldr	r3, [sp, #72]	; 0x48
   1c3d8:	add	r1, r9, #40	; 0x28
   1c3dc:	ldr	r0, [sp, #76]	; 0x4c
   1c3e0:	add	r2, r9, #44	; 0x2c
   1c3e4:	bl	17658 <elf32_fsize@plt+0x5fa0>
   1c3e8:	b	1b084 <elf32_fsize@plt+0x99cc>
   1c3ec:	ldr	fp, [sp, #128]	; 0x80
   1c3f0:	b	1be50 <elf32_fsize@plt+0xa798>
   1c3f4:	ldr	fp, [sp, #128]	; 0x80
   1c3f8:	b	1bdd8 <elf32_fsize@plt+0xa720>
   1c3fc:	ldr	r5, [sp, #76]	; 0x4c
   1c400:	ldr	r1, [sp, #124]	; 0x7c
   1c404:	ldr	r0, [r5, #16]
   1c408:	bl	11628 <elf_getscn@plt>
   1c40c:	add	r1, sp, #288	; 0x120
   1c410:	mov	r4, r0
   1c414:	bl	1134c <gelf_getshdr@plt>
   1c418:	subs	r9, r0, #0
   1c41c:	beq	1b1b4 <elf32_fsize@plt+0x9afc>
   1c420:	mov	r0, r4
   1c424:	mov	r1, #0
   1c428:	bl	11484 <elf_getdata@plt>
   1c42c:	subs	r7, r0, #0
   1c430:	str	r7, [sp, #72]	; 0x48
   1c434:	beq	1d4c8 <elf32_fsize@plt+0xbe10>
   1c438:	ldr	ip, [sp, #76]	; 0x4c
   1c43c:	ldr	r1, [r9, #40]	; 0x28
   1c440:	ldr	r0, [ip, #16]
   1c444:	bl	11628 <elf_getscn@plt>
   1c448:	add	r1, sp, #352	; 0x160
   1c44c:	mov	fp, r0
   1c450:	bl	1134c <gelf_getshdr@plt>
   1c454:	subs	r7, r0, #0
   1c458:	beq	1b1b4 <elf32_fsize@plt+0x9afc>
   1c45c:	ldr	r3, [r7, #4]
   1c460:	cmp	r3, #11
   1c464:	beq	1c6fc <elf32_fsize@plt+0xb044>
   1c468:	mov	r2, #5
   1c46c:	movw	r1, #24300	; 0x5eec
   1c470:	mov	r0, #0
   1c474:	movt	r1, #2
   1c478:	ldr	r4, [sp, #76]	; 0x4c
   1c47c:	bl	113b8 <dcgettext@plt>
   1c480:	ldr	r1, [sp, #124]	; 0x7c
   1c484:	add	r5, r4, #16
   1c488:	mov	fp, r0
   1c48c:	mov	r0, r5
   1c490:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c494:	ldr	r4, [r9, #40]	; 0x28
   1c498:	mov	r1, r4
   1c49c:	mov	r7, r0
   1c4a0:	mov	r0, r5
   1c4a4:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c4a8:	mov	r3, r7
   1c4ac:	str	r4, [sp]
   1c4b0:	mov	r1, fp
   1c4b4:	ldr	r2, [sp, #124]	; 0x7c
   1c4b8:	str	r0, [sp, #4]
   1c4bc:	mov	r0, #1
   1c4c0:	bl	11580 <__printf_chk@plt>
   1c4c4:	ldr	r3, [r6, #4]
   1c4c8:	add	r3, r3, #1
   1c4cc:	str	r3, [r6, #4]
   1c4d0:	b	1b1b4 <elf32_fsize@plt+0x9afc>
   1c4d4:	mov	r2, #5
   1c4d8:	movw	r1, #21244	; 0x52fc
   1c4dc:	movt	r1, #2
   1c4e0:	bl	113b8 <dcgettext@plt>
   1c4e4:	ldr	r7, [sp, #76]	; 0x4c
   1c4e8:	ldr	r1, [sp, #72]	; 0x48
   1c4ec:	mov	r6, r0
   1c4f0:	add	r0, r7, #16
   1c4f4:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c4f8:	mov	r1, r6
   1c4fc:	ldrd	r6, [sp, #64]	; 0x40
   1c500:	ldr	r2, [sp, #72]	; 0x48
   1c504:	strd	r6, [sp]
   1c508:	mov	r3, r0
   1c50c:	mov	r0, #1
   1c510:	bl	11580 <__printf_chk@plt>
   1c514:	ldr	r3, [fp, #4]
   1c518:	add	r3, r3, #1
   1c51c:	str	r3, [fp, #4]
   1c520:	b	1b9a0 <elf32_fsize@plt+0xa2e8>
   1c524:	mov	r2, #5
   1c528:	movw	r1, #20768	; 0x5120
   1c52c:	movt	r1, #2
   1c530:	bl	113b8 <dcgettext@plt>
   1c534:	mov	r3, r6
   1c538:	ldr	r2, [sp, #72]	; 0x48
   1c53c:	mov	r1, r0
   1c540:	mov	r0, r4
   1c544:	bl	11580 <__printf_chk@plt>
   1c548:	ldr	r3, [fp, #4]
   1c54c:	add	r3, r3, #1
   1c550:	str	r3, [fp, #4]
   1c554:	b	1a91c <elf32_fsize@plt+0x9264>
   1c558:	mov	r2, #5
   1c55c:	movw	r1, #24068	; 0x5e04
   1c560:	movt	r1, #2
   1c564:	bl	113b8 <dcgettext@plt>
   1c568:	mov	r2, r4
   1c56c:	mov	r1, r0
   1c570:	mov	r0, #1
   1c574:	bl	11580 <__printf_chk@plt>
   1c578:	ldr	r2, [r8, #4]
   1c57c:	ldr	r3, [r7, #4]
   1c580:	add	r2, r2, #1
   1c584:	str	r2, [r8, #4]
   1c588:	b	1b138 <elf32_fsize@plt+0x9a80>
   1c58c:	mov	r2, #5
   1c590:	movw	r1, #24144	; 0x5e50
   1c594:	movt	r1, #2
   1c598:	bl	113b8 <dcgettext@plt>
   1c59c:	mov	r2, r4
   1c5a0:	mov	r1, r0
   1c5a4:	mov	r0, #1
   1c5a8:	bl	11580 <__printf_chk@plt>
   1c5ac:	ldr	r3, [r8, #4]
   1c5b0:	add	r3, r3, #1
   1c5b4:	str	r3, [r8, #4]
   1c5b8:	b	1b14c <elf32_fsize@plt+0x9a94>
   1c5bc:	mov	r2, #5
   1c5c0:	movw	r1, #21880	; 0x5578
   1c5c4:	mov	r0, #0
   1c5c8:	movt	r1, #2
   1c5cc:	bl	113b8 <dcgettext@plt>
   1c5d0:	ldr	r8, [sp, #76]	; 0x4c
   1c5d4:	ldr	r1, [sp, #72]	; 0x48
   1c5d8:	mov	r4, r0
   1c5dc:	add	r0, r8, #16
   1c5e0:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c5e4:	mov	r1, r4
   1c5e8:	ldr	r2, [sp, #72]	; 0x48
   1c5ec:	mov	r3, r0
   1c5f0:	mov	r0, #1
   1c5f4:	bl	11580 <__printf_chk@plt>
   1c5f8:	ldr	r3, [fp, #4]
   1c5fc:	ldrd	r0, [r9, #8]
   1c600:	add	r3, r3, #1
   1c604:	str	r3, [fp, #4]
   1c608:	b	1aba0 <elf32_fsize@plt+0x94e8>
   1c60c:	mov	r2, #5
   1c610:	movw	r1, #20892	; 0x519c
   1c614:	mov	r0, #0
   1c618:	movt	r1, #2
   1c61c:	bl	113b8 <dcgettext@plt>
   1c620:	mov	r3, r6
   1c624:	ldr	r2, [sp, #72]	; 0x48
   1c628:	mov	r4, #1
   1c62c:	mov	r1, r0
   1c630:	mov	r0, #1
   1c634:	bl	11580 <__printf_chk@plt>
   1c638:	movw	lr, #37252	; 0x9184
   1c63c:	movt	lr, #3
   1c640:	str	r4, [sp, #132]	; 0x84
   1c644:	ldr	r3, [lr, #4]
   1c648:	add	r3, r3, r4
   1c64c:	str	r3, [lr, #4]
   1c650:	b	1a94c <elf32_fsize@plt+0x9294>
   1c654:	add	r1, sp, #580	; 0x244
   1c658:	bl	19104 <elf32_fsize@plt+0x7a4c>
   1c65c:	b	1a8cc <elf32_fsize@plt+0x9214>
   1c660:	mov	r0, r7
   1c664:	add	r1, sp, #480	; 0x1e0
   1c668:	bl	19104 <elf32_fsize@plt+0x7a4c>
   1c66c:	mov	r4, r0
   1c670:	b	1a8b8 <elf32_fsize@plt+0x9200>
   1c674:	mov	r2, #5
   1c678:	movw	r1, #21560	; 0x5438
   1c67c:	movt	r1, #2
   1c680:	bl	113b8 <dcgettext@plt>
   1c684:	ldr	r6, [sp, #76]	; 0x4c
   1c688:	ldr	r1, [sp, #72]	; 0x48
   1c68c:	mov	r5, r0
   1c690:	add	r0, r6, #16
   1c694:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c698:	mov	r4, r0
   1c69c:	mvn	r0, #0
   1c6a0:	bl	11520 <elf_errmsg@plt>
   1c6a4:	mov	r3, r4
   1c6a8:	mov	r1, r5
   1c6ac:	ldr	r2, [sp, #72]	; 0x48
   1c6b0:	str	r0, [sp]
   1c6b4:	mov	r0, #1
   1c6b8:	bl	11580 <__printf_chk@plt>
   1c6bc:	ldr	r3, [fp, #4]
   1c6c0:	add	r3, r3, #1
   1c6c4:	str	r3, [fp, #4]
   1c6c8:	b	1aaf0 <elf32_fsize@plt+0x9438>
   1c6cc:	mov	r2, #5
   1c6d0:	movw	r1, #20180	; 0x4ed4
   1c6d4:	mov	r0, #0
   1c6d8:	movt	r1, #2
   1c6dc:	bl	113b8 <dcgettext@plt>
   1c6e0:	mov	r1, r0
   1c6e4:	mov	r0, #1
   1c6e8:	bl	11580 <__printf_chk@plt>
   1c6ec:	ldr	r3, [r8, #4]
   1c6f0:	add	r3, r3, #1
   1c6f4:	str	r3, [r8, #4]
   1c6f8:	b	1a66c <elf32_fsize@plt+0x8fb4>
   1c6fc:	ldrd	r2, [r9, #56]	; 0x38
   1c700:	orrs	r5, r2, r3
   1c704:	beq	1c7b0 <elf32_fsize@plt+0xb0f8>
   1c708:	ldrd	r4, [r7, #56]	; 0x38
   1c70c:	orrs	ip, r4, r5
   1c710:	beq	1c7b0 <elf32_fsize@plt+0xb0f8>
   1c714:	ldrd	r0, [r9, #32]
   1c718:	bl	2042c <elf32_fsize@plt+0xed74>
   1c71c:	mov	r2, r4
   1c720:	mov	r3, r5
   1c724:	strd	r0, [sp, #64]	; 0x40
   1c728:	ldrd	r0, [r7, #32]
   1c72c:	bl	2042c <elf32_fsize@plt+0xed74>
   1c730:	ldrd	r4, [sp, #64]	; 0x40
   1c734:	cmp	r5, r1
   1c738:	cmpeq	r4, r0
   1c73c:	beq	1c7b0 <elf32_fsize@plt+0xb0f8>
   1c740:	mov	r2, #5
   1c744:	movw	r1, #24396	; 0x5f4c
   1c748:	mov	r0, #0
   1c74c:	movt	r1, #2
   1c750:	ldr	r7, [sp, #76]	; 0x4c
   1c754:	bl	113b8 <dcgettext@plt>
   1c758:	ldr	r1, [sp, #124]	; 0x7c
   1c75c:	add	r5, r7, #16
   1c760:	mov	r3, r0
   1c764:	mov	r0, r5
   1c768:	str	r3, [sp, #60]	; 0x3c
   1c76c:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c770:	ldr	r4, [r9, #40]	; 0x28
   1c774:	mov	r1, r4
   1c778:	mov	r7, r0
   1c77c:	mov	r0, r5
   1c780:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c784:	ldr	r3, [sp, #60]	; 0x3c
   1c788:	str	r4, [sp]
   1c78c:	ldr	r2, [sp, #124]	; 0x7c
   1c790:	mov	r1, r3
   1c794:	mov	r3, r7
   1c798:	str	r0, [sp, #4]
   1c79c:	mov	r0, #1
   1c7a0:	bl	11580 <__printf_chk@plt>
   1c7a4:	ldr	r3, [r6, #4]
   1c7a8:	add	r3, r3, #1
   1c7ac:	str	r3, [r6, #4]
   1c7b0:	mov	r0, fp
   1c7b4:	mov	r1, #0
   1c7b8:	bl	11484 <elf_getdata@plt>
   1c7bc:	cmp	r0, #0
   1c7c0:	str	r0, [sp, #96]	; 0x60
   1c7c4:	beq	1b1b4 <elf32_fsize@plt+0x9afc>
   1c7c8:	ldrd	r2, [r9, #56]	; 0x38
   1c7cc:	orrs	ip, r2, r3
   1c7d0:	beq	1b1b4 <elf32_fsize@plt+0x9afc>
   1c7d4:	ldrd	r0, [r9, #32]
   1c7d8:	bl	2042c <elf32_fsize@plt+0xed74>
   1c7dc:	cmp	r1, #0
   1c7e0:	cmpeq	r0, #1
   1c7e4:	bls	1b1b4 <elf32_fsize@plt+0x9afc>
   1c7e8:	mov	r4, #2
   1c7ec:	mov	r5, #0
   1c7f0:	mov	r7, #0
   1c7f4:	movw	r6, #37252	; 0x9184
   1c7f8:	str	sl, [sp, #132]	; 0x84
   1c7fc:	movt	r6, #3
   1c800:	str	r6, [sp, #88]	; 0x58
   1c804:	mov	r6, #1
   1c808:	strd	r6, [sp, #64]	; 0x40
   1c80c:	add	r7, sp, #172	; 0xac
   1c810:	str	r7, [sp, #104]	; 0x68
   1c814:	sub	fp, r4, #1
   1c818:	ldr	r0, [sp, #72]	; 0x48
   1c81c:	ldr	r2, [sp, #104]	; 0x68
   1c820:	mov	r1, fp
   1c824:	bl	113ac <gelf_getversym@plt>
   1c828:	subs	r6, r0, #0
   1c82c:	beq	1d5e4 <elf32_fsize@plt+0xbf2c>
   1c830:	ldr	r0, [sp, #96]	; 0x60
   1c834:	mov	r1, fp
   1c838:	add	r2, sp, #176	; 0xb0
   1c83c:	bl	11418 <gelf_getsym@plt>
   1c840:	subs	sl, r0, #0
   1c844:	beq	1c950 <elf32_fsize@plt+0xb298>
   1c848:	ldrh	r7, [r6]
   1c84c:	cmp	r7, #1
   1c850:	beq	1d07c <elf32_fsize@plt+0xb9c4>
   1c854:	cmp	r7, #0
   1c858:	beq	1c950 <elf32_fsize@plt+0xb298>
   1c85c:	ldrb	r3, [r8, #23]
   1c860:	cmp	r3, #0
   1c864:	bne	1c8c0 <elf32_fsize@plt+0xb208>
   1c868:	ldrb	r3, [sl, #4]
   1c86c:	lsrs	r0, r3, #4
   1c870:	bne	1c8c0 <elf32_fsize@plt+0xb208>
   1c874:	mov	r2, #5
   1c878:	movw	r1, #24604	; 0x601c
   1c87c:	movt	r1, #2
   1c880:	bl	113b8 <dcgettext@plt>
   1c884:	ldr	ip, [sp, #76]	; 0x4c
   1c888:	ldr	r1, [sp, #124]	; 0x7c
   1c88c:	mov	r7, r0
   1c890:	add	r0, ip, #16
   1c894:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c898:	mov	r1, r7
   1c89c:	str	fp, [sp]
   1c8a0:	ldr	r2, [sp, #124]	; 0x7c
   1c8a4:	mov	r3, r0
   1c8a8:	mov	r0, #1
   1c8ac:	bl	11580 <__printf_chk@plt>
   1c8b0:	ldr	r7, [sp, #88]	; 0x58
   1c8b4:	ldr	r3, [r7, #4]
   1c8b8:	add	r3, r3, #1
   1c8bc:	str	r3, [r7, #4]
   1c8c0:	ldr	r3, [r8]
   1c8c4:	cmp	r3, #0
   1c8c8:	beq	1c8fc <elf32_fsize@plt+0xb244>
   1c8cc:	ldrh	r1, [r6]
   1c8d0:	ldrh	r2, [r3, #8]
   1c8d4:	ubfx	r1, r1, #0, #15
   1c8d8:	cmp	r2, r1
   1c8dc:	bne	1c8f0 <elf32_fsize@plt+0xb238>
   1c8e0:	b	1d200 <elf32_fsize@plt+0xbb48>
   1c8e4:	ldrh	r2, [r3, #8]
   1c8e8:	cmp	r2, r1
   1c8ec:	beq	1d200 <elf32_fsize@plt+0xbb48>
   1c8f0:	ldr	r3, [r3, #16]
   1c8f4:	cmp	r3, #0
   1c8f8:	bne	1c8e4 <elf32_fsize@plt+0xb22c>
   1c8fc:	movw	r1, #24832	; 0x6100
   1c900:	movt	r1, #2
   1c904:	mov	r0, #0
   1c908:	mov	r2, #5
   1c90c:	bl	113b8 <dcgettext@plt>
   1c910:	ldr	ip, [sp, #76]	; 0x4c
   1c914:	ldr	r1, [sp, #124]	; 0x7c
   1c918:	mov	r7, r0
   1c91c:	add	r0, ip, #16
   1c920:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c924:	str	fp, [sp]
   1c928:	ldrh	ip, [r6]
   1c92c:	mov	r1, r7
   1c930:	ldr	r2, [sp, #124]	; 0x7c
   1c934:	str	ip, [sp, #4]
   1c938:	mov	r3, r0
   1c93c:	mov	r0, #1
   1c940:	bl	11580 <__printf_chk@plt>
   1c944:	ldr	r3, [r8, #4]
   1c948:	add	r3, r3, #1
   1c94c:	str	r3, [r8, #4]
   1c950:	ldrd	r2, [r9, #56]	; 0x38
   1c954:	ldrd	r0, [r9, #32]
   1c958:	bl	2042c <elf32_fsize@plt+0xed74>
   1c95c:	adds	r2, r4, #1
   1c960:	adc	r3, r5, #0
   1c964:	cmp	r1, r5
   1c968:	cmpeq	r0, r4
   1c96c:	bls	1d598 <elf32_fsize@plt+0xbee0>
   1c970:	strd	r4, [sp, #64]	; 0x40
   1c974:	mov	r4, r2
   1c978:	mov	r5, r3
   1c97c:	b	1c814 <elf32_fsize@plt+0xb15c>
   1c980:	mov	r2, #5
   1c984:	movw	r1, #22908	; 0x597c
   1c988:	mov	r0, #0
   1c98c:	movt	r1, #2
   1c990:	bl	113b8 <dcgettext@plt>
   1c994:	ldr	r8, [sp, #76]	; 0x4c
   1c998:	ldr	r1, [sp, #72]	; 0x48
   1c99c:	mov	r5, r0
   1c9a0:	add	r0, r8, #16
   1c9a4:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c9a8:	mov	r1, r5
   1c9ac:	ldr	r2, [sp, #72]	; 0x48
   1c9b0:	mov	r3, r0
   1c9b4:	mov	r0, r4
   1c9b8:	bl	11580 <__printf_chk@plt>
   1c9bc:	ldr	r3, [fp, #4]
   1c9c0:	add	r3, r3, #1
   1c9c4:	str	r3, [fp, #4]
   1c9c8:	b	1b61c <elf32_fsize@plt+0x9f64>
   1c9cc:	mov	r2, #5
   1c9d0:	movw	r1, #21196	; 0x52cc
   1c9d4:	movt	r1, #2
   1c9d8:	bl	113b8 <dcgettext@plt>
   1c9dc:	ldr	r5, [sp, #76]	; 0x4c
   1c9e0:	ldr	r1, [sp, #72]	; 0x48
   1c9e4:	mov	r4, r0
   1c9e8:	add	r0, r5, #16
   1c9ec:	bl	12670 <elf32_fsize@plt+0xfb8>
   1c9f0:	ldr	ip, [r9, #4]
   1c9f4:	mov	r1, r4
   1c9f8:	ldr	r2, [sp, #72]	; 0x48
   1c9fc:	str	ip, [sp]
   1ca00:	mov	r3, r0
   1ca04:	mov	r0, #1
   1ca08:	bl	11580 <__printf_chk@plt>
   1ca0c:	ldr	r3, [fp, #4]
   1ca10:	add	r3, r3, #1
   1ca14:	str	r3, [fp, #4]
   1ca18:	b	1a9e4 <elf32_fsize@plt+0x932c>
   1ca1c:	movw	r1, #23860	; 0x5d34
   1ca20:	mov	r0, r4
   1ca24:	mov	r2, #5
   1ca28:	movt	r1, #2
   1ca2c:	b	1c214 <elf32_fsize@plt+0xab5c>
   1ca30:	mov	r2, #5
   1ca34:	movw	r1, #23672	; 0x5c78
   1ca38:	mov	r0, #0
   1ca3c:	movt	r1, #2
   1ca40:	bl	113b8 <dcgettext@plt>
   1ca44:	ldr	r8, [sp, #76]	; 0x4c
   1ca48:	ldr	r1, [sp, #72]	; 0x48
   1ca4c:	mov	r4, r0
   1ca50:	add	r0, r8, #16
   1ca54:	bl	12670 <elf32_fsize@plt+0xfb8>
   1ca58:	mov	r1, r4
   1ca5c:	movw	r2, #29556	; 0x7374
   1ca60:	movt	r2, #2
   1ca64:	str	r2, [sp]
   1ca68:	ldr	r2, [sp, #72]	; 0x48
   1ca6c:	mov	r3, r0
   1ca70:	mov	r0, #1
   1ca74:	bl	11580 <__printf_chk@plt>
   1ca78:	ldr	r3, [fp, #4]
   1ca7c:	add	r3, r3, #1
   1ca80:	str	r3, [fp, #4]
   1ca84:	b	1af20 <elf32_fsize@plt+0x9868>
   1ca88:	mov	r2, #5
   1ca8c:	movw	r1, #23672	; 0x5c78
   1ca90:	mov	r0, #0
   1ca94:	movt	r1, #2
   1ca98:	bl	113b8 <dcgettext@plt>
   1ca9c:	ldr	ip, [sp, #76]	; 0x4c
   1caa0:	ldr	r1, [sp, #72]	; 0x48
   1caa4:	mov	r4, r0
   1caa8:	add	r0, ip, #16
   1caac:	bl	12670 <elf32_fsize@plt+0xfb8>
   1cab0:	mov	r1, r4
   1cab4:	movw	r2, #23748	; 0x5cc4
   1cab8:	movt	r2, #2
   1cabc:	str	r2, [sp]
   1cac0:	ldr	r2, [sp, #72]	; 0x48
   1cac4:	mov	r3, r0
   1cac8:	mov	r0, #1
   1cacc:	bl	11580 <__printf_chk@plt>
   1cad0:	ldr	r3, [fp, #4]
   1cad4:	add	r3, r3, #1
   1cad8:	str	r3, [fp, #4]
   1cadc:	b	1aef0 <elf32_fsize@plt+0x9838>
   1cae0:	mov	r2, #5
   1cae4:	movw	r1, #23672	; 0x5c78
   1cae8:	mov	r0, #0
   1caec:	movt	r1, #2
   1caf0:	bl	113b8 <dcgettext@plt>
   1caf4:	ldr	r7, [sp, #76]	; 0x4c
   1caf8:	ldr	r1, [sp, #72]	; 0x48
   1cafc:	mov	r4, r0
   1cb00:	add	r0, r7, #16
   1cb04:	bl	12670 <elf32_fsize@plt+0xfb8>
   1cb08:	mov	r1, r4
   1cb0c:	movw	r2, #23740	; 0x5cbc
   1cb10:	movt	r2, #2
   1cb14:	str	r2, [sp]
   1cb18:	ldr	r2, [sp, #72]	; 0x48
   1cb1c:	mov	r3, r0
   1cb20:	mov	r0, #1
   1cb24:	bl	11580 <__printf_chk@plt>
   1cb28:	ldr	r3, [fp, #4]
   1cb2c:	add	r3, r3, #1
   1cb30:	str	r3, [fp, #4]
   1cb34:	b	1aee4 <elf32_fsize@plt+0x982c>
   1cb38:	mov	r2, #5
   1cb3c:	movw	r1, #23672	; 0x5c78
   1cb40:	mov	r0, #0
   1cb44:	movt	r1, #2
   1cb48:	bl	113b8 <dcgettext@plt>
   1cb4c:	ldr	r5, [sp, #76]	; 0x4c
   1cb50:	ldr	r1, [sp, #72]	; 0x48
   1cb54:	mov	r4, r0
   1cb58:	add	r0, r5, #16
   1cb5c:	bl	12670 <elf32_fsize@plt+0xfb8>
   1cb60:	mov	r1, r4
   1cb64:	movw	r2, #23732	; 0x5cb4
   1cb68:	movt	r2, #2
   1cb6c:	str	r2, [sp]
   1cb70:	ldr	r2, [sp, #72]	; 0x48
   1cb74:	mov	r3, r0
   1cb78:	mov	r0, #1
   1cb7c:	bl	11580 <__printf_chk@plt>
   1cb80:	ldr	r3, [fp, #4]
   1cb84:	add	r3, r3, #1
   1cb88:	str	r3, [fp, #4]
   1cb8c:	b	1aed8 <elf32_fsize@plt+0x9820>
   1cb90:	mov	r2, #5
   1cb94:	movw	r1, #23672	; 0x5c78
   1cb98:	movt	r1, #2
   1cb9c:	bl	113b8 <dcgettext@plt>
   1cba0:	ldr	r8, [sp, #76]	; 0x4c
   1cba4:	ldr	r1, [sp, #72]	; 0x48
   1cba8:	mov	r4, r0
   1cbac:	add	r0, r8, #16
   1cbb0:	bl	12670 <elf32_fsize@plt+0xfb8>
   1cbb4:	mov	r1, r4
   1cbb8:	movw	r2, #23724	; 0x5cac
   1cbbc:	movt	r2, #2
   1cbc0:	str	r2, [sp]
   1cbc4:	ldr	r2, [sp, #72]	; 0x48
   1cbc8:	mov	r3, r0
   1cbcc:	mov	r0, #1
   1cbd0:	bl	11580 <__printf_chk@plt>
   1cbd4:	ldr	r3, [fp, #4]
   1cbd8:	add	r3, r3, #1
   1cbdc:	str	r3, [fp, #4]
   1cbe0:	b	1aecc <elf32_fsize@plt+0x9814>
   1cbe4:	mov	r2, #5
   1cbe8:	movw	r1, #23972	; 0x5da4
   1cbec:	mov	r0, #0
   1cbf0:	movt	r1, #2
   1cbf4:	bl	113b8 <dcgettext@plt>
   1cbf8:	mov	r1, r0
   1cbfc:	mov	r0, #1
   1cc00:	bl	11580 <__printf_chk@plt>
   1cc04:	ldr	r5, [sp, #72]	; 0x48
   1cc08:	ldr	r3, [fp, #4]
   1cc0c:	str	r5, [sp, #124]	; 0x7c
   1cc10:	add	r3, r3, #1
   1cc14:	str	r3, [fp, #4]
   1cc18:	b	1b084 <elf32_fsize@plt+0x99cc>
   1cc1c:	mov	r2, #5
   1cc20:	movw	r1, #23672	; 0x5c78
   1cc24:	mov	r0, #0
   1cc28:	movt	r1, #2
   1cc2c:	bl	113b8 <dcgettext@plt>
   1cc30:	ldr	r5, [sp, #76]	; 0x4c
   1cc34:	ldr	r1, [sp, #72]	; 0x48
   1cc38:	mov	r4, r0
   1cc3c:	add	r0, r5, #16
   1cc40:	bl	12670 <elf32_fsize@plt+0xfb8>
   1cc44:	mov	r1, r4
   1cc48:	movw	r2, #23772	; 0x5cdc
   1cc4c:	movt	r2, #2
   1cc50:	str	r2, [sp]
   1cc54:	ldr	r2, [sp, #72]	; 0x48
   1cc58:	mov	r3, r0
   1cc5c:	mov	r0, #1
   1cc60:	bl	11580 <__printf_chk@plt>
   1cc64:	ldr	r3, [fp, #4]
   1cc68:	add	r3, r3, #1
   1cc6c:	str	r3, [fp, #4]
   1cc70:	b	1af2c <elf32_fsize@plt+0x9874>
   1cc74:	ldr	r9, [sp, #144]	; 0x90
   1cc78:	ldr	ip, [sp, #140]	; 0x8c
   1cc7c:	cmp	r9, #0
   1cc80:	cmpne	ip, #0
   1cc84:	moveq	sl, #0
   1cc88:	movne	sl, #1
   1cc8c:	mov	r2, #5
   1cc90:	movw	r1, #24016	; 0x5dd0
   1cc94:	mov	r0, #0
   1cc98:	movt	r1, #2
   1cc9c:	bl	113b8 <dcgettext@plt>
   1cca0:	mov	r1, r0
   1cca4:	mov	r0, #1
   1cca8:	bl	11580 <__printf_chk@plt>
   1ccac:	ldr	r3, [r8, #4]
   1ccb0:	add	r3, r3, #1
   1ccb4:	str	r3, [r8, #4]
   1ccb8:	b	1b0c8 <elf32_fsize@plt+0x9a10>
   1ccbc:	ldr	r6, [sp, #76]	; 0x4c
   1ccc0:	ldr	r1, [r9, #40]	; 0x28
   1ccc4:	ldr	r0, [r6, #16]
   1ccc8:	bl	11628 <elf_getscn@plt>
   1cccc:	add	r1, sp, #352	; 0x160
   1ccd0:	mov	r4, r0
   1ccd4:	bl	1134c <gelf_getshdr@plt>
   1ccd8:	subs	r6, r0, #0
   1ccdc:	beq	1d708 <elf32_fsize@plt+0xc050>
   1cce0:	ldr	r3, [r6, #4]
   1cce4:	cmp	r3, #2
   1cce8:	beq	1cd34 <elf32_fsize@plt+0xb67c>
   1ccec:	mov	r2, #5
   1ccf0:	movw	r1, #23112	; 0x5a48
   1ccf4:	mov	r0, #0
   1ccf8:	movt	r1, #2
   1ccfc:	bl	113b8 <dcgettext@plt>
   1cd00:	ldr	r8, [sp, #76]	; 0x4c
   1cd04:	ldr	r1, [sp, #72]	; 0x48
   1cd08:	mov	r7, r0
   1cd0c:	add	r0, r8, #16
   1cd10:	bl	12670 <elf32_fsize@plt+0xfb8>
   1cd14:	mov	r1, r7
   1cd18:	ldr	r2, [sp, #72]	; 0x48
   1cd1c:	mov	r3, r0
   1cd20:	mov	r0, r5
   1cd24:	bl	11580 <__printf_chk@plt>
   1cd28:	ldr	r3, [fp, #4]
   1cd2c:	add	r3, r3, #1
   1cd30:	str	r3, [fp, #4]
   1cd34:	mov	r0, r4
   1cd38:	mov	r1, #0
   1cd3c:	bl	11484 <elf_getdata@plt>
   1cd40:	subs	r8, r0, #0
   1cd44:	beq	1d634 <elf32_fsize@plt+0xbf7c>
   1cd48:	ldrd	r2, [r9, #56]	; 0x38
   1cd4c:	cmp	r3, #0
   1cd50:	cmpeq	r2, #4
   1cd54:	beq	1cda0 <elf32_fsize@plt+0xb6e8>
   1cd58:	mov	r2, #5
   1cd5c:	movw	r1, #23296	; 0x5b00
   1cd60:	mov	r0, #0
   1cd64:	movt	r1, #2
   1cd68:	bl	113b8 <dcgettext@plt>
   1cd6c:	ldr	r5, [sp, #76]	; 0x4c
   1cd70:	ldr	r1, [sp, #72]	; 0x48
   1cd74:	mov	r4, r0
   1cd78:	add	r0, r5, #16
   1cd7c:	bl	12670 <elf32_fsize@plt+0xfb8>
   1cd80:	mov	r1, r4
   1cd84:	ldr	r2, [sp, #72]	; 0x48
   1cd88:	mov	r3, r0
   1cd8c:	mov	r0, #1
   1cd90:	bl	11580 <__printf_chk@plt>
   1cd94:	ldr	r3, [fp, #4]
   1cd98:	add	r3, r3, #1
   1cd9c:	str	r3, [fp, #4]
   1cda0:	cmp	r6, #0
   1cda4:	beq	1ce34 <elf32_fsize@plt+0xb77c>
   1cda8:	ldrd	r2, [r9, #56]	; 0x38
   1cdac:	orrs	r7, r2, r3
   1cdb0:	beq	1ce34 <elf32_fsize@plt+0xb77c>
   1cdb4:	ldrd	r4, [r6, #56]	; 0x38
   1cdb8:	orrs	ip, r4, r5
   1cdbc:	beq	1ce34 <elf32_fsize@plt+0xb77c>
   1cdc0:	ldrd	r0, [r9, #32]
   1cdc4:	bl	2042c <elf32_fsize@plt+0xed74>
   1cdc8:	mov	r2, r4
   1cdcc:	mov	r3, r5
   1cdd0:	strd	r0, [sp, #64]	; 0x40
   1cdd4:	ldrd	r0, [r6, #32]
   1cdd8:	bl	2042c <elf32_fsize@plt+0xed74>
   1cddc:	ldrd	r4, [sp, #64]	; 0x40
   1cde0:	cmp	r5, r1
   1cde4:	cmpeq	r4, r0
   1cde8:	bcs	1ce34 <elf32_fsize@plt+0xb77c>
   1cdec:	mov	r2, #5
   1cdf0:	movw	r1, #23356	; 0x5b3c
   1cdf4:	mov	r0, #0
   1cdf8:	movt	r1, #2
   1cdfc:	bl	113b8 <dcgettext@plt>
   1ce00:	ldr	r5, [sp, #76]	; 0x4c
   1ce04:	ldr	r1, [sp, #72]	; 0x48
   1ce08:	mov	r4, r0
   1ce0c:	add	r0, r5, #16
   1ce10:	bl	12670 <elf32_fsize@plt+0xfb8>
   1ce14:	mov	r1, r4
   1ce18:	ldr	r2, [sp, #72]	; 0x48
   1ce1c:	mov	r3, r0
   1ce20:	mov	r0, #1
   1ce24:	bl	11580 <__printf_chk@plt>
   1ce28:	ldr	r3, [fp, #4]
   1ce2c:	add	r3, r3, #1
   1ce30:	str	r3, [fp, #4]
   1ce34:	ldr	r3, [r9, #44]	; 0x2c
   1ce38:	cmp	r3, #0
   1ce3c:	bne	1d47c <elf32_fsize@plt+0xbdc4>
   1ce40:	ldr	r3, [fp, #8]
   1ce44:	ldr	r4, [sp, #96]	; 0x60
   1ce48:	cmp	r4, r3
   1ce4c:	bcs	1cf08 <elf32_fsize@plt+0xb850>
   1ce50:	add	r6, sp, #416	; 0x1a0
   1ce54:	ldr	r5, [sp, #76]	; 0x4c
   1ce58:	b	1ce6c <elf32_fsize@plt+0xb7b4>
   1ce5c:	ldr	r3, [fp, #8]
   1ce60:	add	r4, r4, #1
   1ce64:	cmp	r4, r3
   1ce68:	bcs	1cf08 <elf32_fsize@plt+0xb850>
   1ce6c:	mov	r1, r4
   1ce70:	ldr	r0, [r5, #16]
   1ce74:	bl	11628 <elf_getscn@plt>
   1ce78:	mov	r1, r6
   1ce7c:	bl	1134c <gelf_getshdr@plt>
   1ce80:	cmp	r0, #0
   1ce84:	beq	1ce5c <elf32_fsize@plt+0xb7a4>
   1ce88:	ldr	r3, [r0, #4]
   1ce8c:	cmp	r3, #18
   1ce90:	bne	1ce5c <elf32_fsize@plt+0xb7a4>
   1ce94:	ldr	r2, [r0, #40]	; 0x28
   1ce98:	ldr	r3, [r9, #40]	; 0x28
   1ce9c:	cmp	r2, r3
   1cea0:	bne	1ce5c <elf32_fsize@plt+0xb7a4>
   1cea4:	mov	r2, #5
   1cea8:	movw	r1, #23428	; 0x5b84
   1ceac:	mov	r0, #0
   1ceb0:	movt	r1, #2
   1ceb4:	ldr	r7, [sp, #76]	; 0x4c
   1ceb8:	bl	113b8 <dcgettext@plt>
   1cebc:	ldr	r1, [sp, #72]	; 0x48
   1cec0:	add	r5, r7, #16
   1cec4:	mov	r6, r0
   1cec8:	mov	r0, r5
   1cecc:	bl	12670 <elf32_fsize@plt+0xfb8>
   1ced0:	mov	r1, r4
   1ced4:	mov	r7, r0
   1ced8:	mov	r0, r5
   1cedc:	bl	12670 <elf32_fsize@plt+0xfb8>
   1cee0:	mov	r3, r7
   1cee4:	mov	r1, r6
   1cee8:	str	r4, [sp]
   1ceec:	ldr	r2, [sp, #72]	; 0x48
   1cef0:	str	r0, [sp, #4]
   1cef4:	mov	r0, #1
   1cef8:	bl	11580 <__printf_chk@plt>
   1cefc:	ldr	r3, [fp, #4]
   1cf00:	add	r3, r3, #1
   1cf04:	str	r3, [fp, #4]
   1cf08:	ldr	r9, [sp, #76]	; 0x4c
   1cf0c:	ldr	r1, [sp, #72]	; 0x48
   1cf10:	ldr	r0, [r9, #16]
   1cf14:	bl	11628 <elf_getscn@plt>
   1cf18:	mov	r1, #0
   1cf1c:	bl	11484 <elf_getdata@plt>
   1cf20:	subs	r5, r0, #0
   1cf24:	beq	1d520 <elf32_fsize@plt+0xbe68>
   1cf28:	ldr	r3, [r5]
   1cf2c:	cmp	r3, #0
   1cf30:	beq	1d520 <elf32_fsize@plt+0xbe68>
   1cf34:	ldr	r2, [r5, #12]
   1cf38:	cmp	r2, #3
   1cf3c:	bls	1cf4c <elf32_fsize@plt+0xb894>
   1cf40:	ldr	r3, [r3]
   1cf44:	cmp	r3, #0
   1cf48:	beq	1cf7c <elf32_fsize@plt+0xb8c4>
   1cf4c:	mov	r2, #5
   1cf50:	movw	r1, #23524	; 0x5be4
   1cf54:	mov	r0, #0
   1cf58:	movt	r1, #2
   1cf5c:	bl	113b8 <dcgettext@plt>
   1cf60:	mov	r1, r0
   1cf64:	mov	r0, #1
   1cf68:	bl	11580 <__printf_chk@plt>
   1cf6c:	ldr	r2, [r5, #12]
   1cf70:	ldr	r3, [fp, #4]
   1cf74:	add	r3, r3, #1
   1cf78:	str	r3, [fp, #4]
   1cf7c:	cmp	r2, #7
   1cf80:	bls	1b084 <elf32_fsize@plt+0x99cc>
   1cf84:	mov	r4, #1
   1cf88:	movw	r7, #65535	; 0xffff
   1cf8c:	b	1cf9c <elf32_fsize@plt+0xb8e4>
   1cf90:	add	r4, r4, #1
   1cf94:	cmp	r4, r2, lsr #2
   1cf98:	bcs	1b084 <elf32_fsize@plt+0x99cc>
   1cf9c:	ldr	r3, [r5]
   1cfa0:	ldr	r6, [r3, r4, lsl #2]
   1cfa4:	cmp	r6, #0
   1cfa8:	beq	1cf90 <elf32_fsize@plt+0xb8d8>
   1cfac:	mov	r0, r8
   1cfb0:	mov	r1, r4
   1cfb4:	add	r2, sp, #416	; 0x1a0
   1cfb8:	bl	11418 <gelf_getsym@plt>
   1cfbc:	subs	r3, r0, #0
   1cfc0:	beq	1d5a0 <elf32_fsize@plt+0xbee8>
   1cfc4:	ldrh	r3, [r3, #6]
   1cfc8:	cmp	r3, r7
   1cfcc:	ldreq	r2, [r5, #12]
   1cfd0:	beq	1cf90 <elf32_fsize@plt+0xb8d8>
   1cfd4:	mov	r2, #5
   1cfd8:	movw	r1, #23608	; 0x5c38
   1cfdc:	mov	r0, #0
   1cfe0:	movt	r1, #2
   1cfe4:	bl	113b8 <dcgettext@plt>
   1cfe8:	mov	r2, r6
   1cfec:	mov	r1, r0
   1cff0:	mov	r0, #1
   1cff4:	bl	11580 <__printf_chk@plt>
   1cff8:	ldr	r3, [fp, #4]
   1cffc:	ldr	r2, [r5, #12]
   1d000:	add	r3, r3, #1
   1d004:	str	r3, [fp, #4]
   1d008:	b	1cf90 <elf32_fsize@plt+0xb8d8>
   1d00c:	mov	r0, r4
   1d010:	add	r1, sp, #580	; 0x244
   1d014:	bl	19104 <elf32_fsize@plt+0x7a4c>
   1d018:	mov	r4, r0
   1d01c:	b	1b560 <elf32_fsize@plt+0x9ea8>
   1d020:	mov	r0, r7
   1d024:	add	r1, sp, #480	; 0x1e0
   1d028:	bl	19104 <elf32_fsize@plt+0x7a4c>
   1d02c:	mov	r7, r0
   1d030:	b	1b550 <elf32_fsize@plt+0x9e98>
   1d034:	add	r1, sp, #680	; 0x2a8
   1d038:	bl	19104 <elf32_fsize@plt+0x7a4c>
   1d03c:	mov	r3, r0
   1d040:	b	1b574 <elf32_fsize@plt+0x9ebc>
   1d044:	ldr	r4, [sp, #124]	; 0x7c
   1d048:	cmp	r4, #0
   1d04c:	beq	1b21c <elf32_fsize@plt+0x9b64>
   1d050:	mov	r2, #5
   1d054:	movw	r1, #24764	; 0x60bc
   1d058:	movt	r1, #2
   1d05c:	bl	113b8 <dcgettext@plt>
   1d060:	mov	r1, r0
   1d064:	mov	r0, #1
   1d068:	bl	11580 <__printf_chk@plt>
   1d06c:	ldr	r3, [r6, #4]
   1d070:	add	r3, r3, #1
   1d074:	str	r3, [r6, #4]
   1d078:	b	1b21c <elf32_fsize@plt+0x9b64>
   1d07c:	ldrb	r3, [sl, #4]
   1d080:	lsrs	r0, r3, #4
   1d084:	bne	1c950 <elf32_fsize@plt+0xb298>
   1d088:	mov	r2, #5
   1d08c:	movw	r1, #24540	; 0x5fdc
   1d090:	movt	r1, #2
   1d094:	bl	113b8 <dcgettext@plt>
   1d098:	ldr	ip, [sp, #76]	; 0x4c
   1d09c:	ldr	r1, [sp, #124]	; 0x7c
   1d0a0:	mov	r6, r0
   1d0a4:	add	r0, ip, #16
   1d0a8:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d0ac:	mov	r1, r6
   1d0b0:	str	fp, [sp]
   1d0b4:	ldr	r2, [sp, #124]	; 0x7c
   1d0b8:	mov	r3, r0
   1d0bc:	mov	r0, r7
   1d0c0:	bl	11580 <__printf_chk@plt>
   1d0c4:	ldr	r3, [r8, #4]
   1d0c8:	add	r3, r3, #1
   1d0cc:	str	r3, [r8, #4]
   1d0d0:	b	1c950 <elf32_fsize@plt+0xb298>
   1d0d4:	movw	r1, #7828	; 0x1e94
   1d0d8:	mov	r2, #5
   1d0dc:	movt	r1, #2
   1d0e0:	b	1c214 <elf32_fsize@plt+0xab5c>
   1d0e4:	ldrd	r2, [r9, #32]
   1d0e8:	orrs	r7, r2, r3
   1d0ec:	beq	1ae10 <elf32_fsize@plt+0x9758>
   1d0f0:	movw	r1, #22552	; 0x5818
   1d0f4:	mov	r0, #0
   1d0f8:	movt	r1, #2
   1d0fc:	mov	r2, #5
   1d100:	bl	113b8 <dcgettext@plt>
   1d104:	ldr	ip, [sp, #76]	; 0x4c
   1d108:	ldr	r1, [sp, #72]	; 0x48
   1d10c:	mov	r4, r0
   1d110:	add	r0, ip, #16
   1d114:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d118:	mov	r1, r4
   1d11c:	str	r8, [sp]
   1d120:	ldr	r2, [sp, #72]	; 0x48
   1d124:	mov	r3, r0
   1d128:	mov	r0, #1
   1d12c:	bl	11580 <__printf_chk@plt>
   1d130:	ldr	r3, [fp, #4]
   1d134:	add	r3, r3, #1
   1d138:	str	r3, [fp, #4]
   1d13c:	ldr	r3, [r9, #4]
   1d140:	cmp	r3, #8
   1d144:	bne	1ae10 <elf32_fsize@plt+0x9758>
   1d148:	ldr	r3, [fp, #16]
   1d14c:	b	1ae74 <elf32_fsize@plt+0x97bc>
   1d150:	mov	r2, #5
   1d154:	movw	r1, #23672	; 0x5c78
   1d158:	mov	r0, #0
   1d15c:	movt	r1, #2
   1d160:	bl	113b8 <dcgettext@plt>
   1d164:	ldr	r7, [sp, #76]	; 0x4c
   1d168:	ldr	r1, [sp, #72]	; 0x48
   1d16c:	mov	r4, r0
   1d170:	add	r0, r7, #16
   1d174:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d178:	mov	r1, r4
   1d17c:	movw	r2, #23764	; 0x5cd4
   1d180:	movt	r2, #2
   1d184:	str	r2, [sp]
   1d188:	ldr	r2, [sp, #72]	; 0x48
   1d18c:	mov	r3, r0
   1d190:	mov	r0, #1
   1d194:	bl	11580 <__printf_chk@plt>
   1d198:	ldr	r3, [fp, #4]
   1d19c:	add	r3, r3, #1
   1d1a0:	str	r3, [fp, #4]
   1d1a4:	b	1af14 <elf32_fsize@plt+0x985c>
   1d1a8:	mov	r2, #5
   1d1ac:	movw	r1, #23672	; 0x5c78
   1d1b0:	mov	r0, #0
   1d1b4:	movt	r1, #2
   1d1b8:	bl	113b8 <dcgettext@plt>
   1d1bc:	ldr	r6, [sp, #76]	; 0x4c
   1d1c0:	ldr	r1, [sp, #72]	; 0x48
   1d1c4:	mov	r4, r0
   1d1c8:	add	r0, r6, #16
   1d1cc:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d1d0:	mov	r1, r4
   1d1d4:	movw	r2, #23756	; 0x5ccc
   1d1d8:	movt	r2, #2
   1d1dc:	str	r2, [sp]
   1d1e0:	ldr	r2, [sp, #72]	; 0x48
   1d1e4:	mov	r3, r0
   1d1e8:	mov	r0, #1
   1d1ec:	bl	11580 <__printf_chk@plt>
   1d1f0:	ldr	r3, [fp, #4]
   1d1f4:	add	r3, r3, #1
   1d1f8:	str	r3, [fp, #4]
   1d1fc:	b	1af08 <elf32_fsize@plt+0x9850>
   1d200:	ldrh	r2, [sl, #6]
   1d204:	cmp	r2, #0
   1d208:	beq	1d38c <elf32_fsize@plt+0xbcd4>
   1d20c:	ldr	r3, [r3, #12]
   1d210:	cmp	r3, #1
   1d214:	bne	1c950 <elf32_fsize@plt+0xb298>
   1d218:	ldr	r7, [r9, #40]	; 0x28
   1d21c:	mov	r3, #0
   1d220:	add	ip, sp, #416	; 0x1a0
   1d224:	str	ip, [sp, #136]	; 0x88
   1d228:	ldr	ip, [sp, #76]	; 0x4c
   1d22c:	mov	r1, r3
   1d230:	ldr	r0, [ip, #16]
   1d234:	bl	115d4 <elf_nextscn@plt>
   1d238:	subs	r3, r0, #0
   1d23c:	beq	1d758 <elf32_fsize@plt+0xc0a0>
   1d240:	ldr	r1, [sp, #136]	; 0x88
   1d244:	str	r3, [sp, #60]	; 0x3c
   1d248:	bl	1134c <gelf_getshdr@plt>
   1d24c:	ldr	r3, [sp, #60]	; 0x3c
   1d250:	cmp	r0, #0
   1d254:	beq	1d228 <elf32_fsize@plt+0xbb70>
   1d258:	ldr	r2, [r0, #4]
   1d25c:	cmp	r2, #9
   1d260:	cmpne	r2, #4
   1d264:	bne	1d228 <elf32_fsize@plt+0xbb70>
   1d268:	ldr	r2, [r0, #40]	; 0x28
   1d26c:	cmp	r7, r2
   1d270:	bne	1d228 <elf32_fsize@plt+0xbb70>
   1d274:	mov	r7, r0
   1d278:	mov	r1, #0
   1d27c:	mov	r0, r3
   1d280:	bl	11484 <elf_getdata@plt>
   1d284:	cmp	r0, #0
   1d288:	str	r0, [sp, #120]	; 0x78
   1d28c:	beq	1d758 <elf32_fsize@plt+0xc0a0>
   1d290:	ldrd	r2, [r7, #56]	; 0x38
   1d294:	orrs	lr, r2, r3
   1d298:	beq	1d758 <elf32_fsize@plt+0xc0a0>
   1d29c:	ldr	r1, [r7, #4]
   1d2a0:	cmp	r1, #9
   1d2a4:	ldrd	r0, [r7, #32]
   1d2a8:	beq	1d7b8 <elf32_fsize@plt+0xc100>
   1d2ac:	bl	2042c <elf32_fsize@plt+0xed74>
   1d2b0:	orrs	r2, r0, r1
   1d2b4:	beq	1d758 <elf32_fsize@plt+0xc0a0>
   1d2b8:	mov	r0, #1
   1d2bc:	mov	r1, #0
   1d2c0:	add	ip, sp, #200	; 0xc8
   1d2c4:	strd	r0, [sp, #80]	; 0x50
   1d2c8:	str	ip, [sp, #116]	; 0x74
   1d2cc:	b	1d304 <elf32_fsize@plt+0xbc4c>
   1d2d0:	ldrd	r2, [r7, #56]	; 0x38
   1d2d4:	ldrd	r0, [r7, #32]
   1d2d8:	bl	2042c <elf32_fsize@plt+0xed74>
   1d2dc:	ldrd	r2, [sp, #80]	; 0x50
   1d2e0:	adds	r2, r2, #1
   1d2e4:	adc	r3, r3, #0
   1d2e8:	strd	r2, [sp, #48]	; 0x30
   1d2ec:	ldrd	r2, [sp, #80]	; 0x50
   1d2f0:	cmp	r3, r1
   1d2f4:	cmpeq	r2, r0
   1d2f8:	bcs	1d758 <elf32_fsize@plt+0xc0a0>
   1d2fc:	ldrd	r2, [sp, #48]	; 0x30
   1d300:	strd	r2, [sp, #80]	; 0x50
   1d304:	ldr	lr, [sp, #80]	; 0x50
   1d308:	ldr	r0, [sp, #120]	; 0x78
   1d30c:	sub	r1, lr, #1
   1d310:	ldr	r2, [sp, #116]	; 0x74
   1d314:	bl	11538 <gelf_getrela@plt>
   1d318:	cmp	r0, #0
   1d31c:	beq	1d2d0 <elf32_fsize@plt+0xbc18>
   1d320:	ldr	r1, [r0, #12]
   1d324:	mov	r2, #0
   1d328:	str	r2, [sp, #164]	; 0xa4
   1d32c:	ldr	ip, [r0, #8]
   1d330:	str	r1, [sp, #160]	; 0xa0
   1d334:	ldrd	r2, [sp, #160]	; 0xa0
   1d338:	ldrd	r0, [sp, #64]	; 0x40
   1d33c:	cmp	r1, r3
   1d340:	cmpeq	r0, r2
   1d344:	bne	1d2d0 <elf32_fsize@plt+0xbc18>
   1d348:	mov	r1, ip
   1d34c:	ldr	r0, [sp, #76]	; 0x4c
   1d350:	bl	1fee8 <elf32_fsize@plt+0xe830>
   1d354:	cmp	r0, #0
   1d358:	beq	1d2d0 <elf32_fsize@plt+0xbc18>
   1d35c:	b	1c950 <elf32_fsize@plt+0xb298>
   1d360:	mov	sl, r0
   1d364:	ldrd	r2, [sp, #48]	; 0x30
   1d368:	ldrd	r0, [sp, #64]	; 0x40
   1d36c:	ldrd	r4, [r9, #32]
   1d370:	ldrd	r6, [sl, #40]	; 0x28
   1d374:	b	1adbc <elf32_fsize@plt+0x9704>
   1d378:	mov	sl, r0
   1d37c:	ldrd	r2, [sp, #48]	; 0x30
   1d380:	ldrd	r0, [sp, #64]	; 0x40
   1d384:	ldrd	r6, [sl, #40]	; 0x28
   1d388:	b	1adbc <elf32_fsize@plt+0x9704>
   1d38c:	ldr	r0, [r3, #12]
   1d390:	cmp	r0, #0
   1d394:	movweq	r1, #24664	; 0x6058
   1d398:	moveq	r2, #5
   1d39c:	movteq	r1, #2
   1d3a0:	bne	1c950 <elf32_fsize@plt+0xb298>
   1d3a4:	b	1c90c <elf32_fsize@plt+0xb254>
   1d3a8:	cmp	r5, r3
   1d3ac:	cmpeq	r4, r2
   1d3b0:	bls	1d148 <elf32_fsize@plt+0xba90>
   1d3b4:	ldrb	r1, [fp, #22]
   1d3b8:	cmp	r1, #0
   1d3bc:	bne	1d5d4 <elf32_fsize@plt+0xbf1c>
   1d3c0:	movw	r7, #37252	; 0x9184
   1d3c4:	movt	r7, #3
   1d3c8:	ldrb	r0, [r7, #23]
   1d3cc:	cmp	r0, #0
   1d3d0:	bne	1d660 <elf32_fsize@plt+0xbfa8>
   1d3d4:	mov	r2, #5
   1d3d8:	movw	r1, #22316	; 0x572c
   1d3dc:	movt	r1, #2
   1d3e0:	bl	113b8 <dcgettext@plt>
   1d3e4:	ldr	ip, [sp, #76]	; 0x4c
   1d3e8:	ldr	r1, [sp, #72]	; 0x48
   1d3ec:	mov	r4, r0
   1d3f0:	add	r0, ip, #16
   1d3f4:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d3f8:	mov	r1, r4
   1d3fc:	str	r8, [sp]
   1d400:	ldr	r2, [sp, #72]	; 0x48
   1d404:	mov	r3, r0
   1d408:	mov	r0, #1
   1d40c:	bl	11580 <__printf_chk@plt>
   1d410:	ldr	r3, [r7, #4]
   1d414:	add	r3, r3, #1
   1d418:	str	r3, [r7, #4]
   1d41c:	b	1d13c <elf32_fsize@plt+0xba84>
   1d420:	mov	r2, #5
   1d424:	movw	r1, #22236	; 0x56dc
   1d428:	mov	r0, #0
   1d42c:	movt	r1, #2
   1d430:	bl	113b8 <dcgettext@plt>
   1d434:	ldr	r5, [sp, #76]	; 0x4c
   1d438:	ldr	r1, [sp, #72]	; 0x48
   1d43c:	mov	r4, r0
   1d440:	add	r0, r5, #16
   1d444:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d448:	mov	r1, r4
   1d44c:	ldr	r2, [sp, #72]	; 0x48
   1d450:	str	r8, [sp]
   1d454:	mov	r3, r0
   1d458:	mov	r0, #1
   1d45c:	bl	11580 <__printf_chk@plt>
   1d460:	ldr	r1, [fp, #4]
   1d464:	ldrd	r2, [r9, #24]
   1d468:	add	r1, r1, #1
   1d46c:	ldrd	r6, [sl, #8]
   1d470:	str	r1, [fp, #4]
   1d474:	ldrd	r4, [sl, #32]
   1d478:	b	1adec <elf32_fsize@plt+0x9734>
   1d47c:	mov	r2, #5
   1d480:	movw	r1, #11772	; 0x2dfc
   1d484:	mov	r0, #0
   1d488:	movt	r1, #2
   1d48c:	bl	113b8 <dcgettext@plt>
   1d490:	ldr	r6, [sp, #76]	; 0x4c
   1d494:	ldr	r1, [sp, #72]	; 0x48
   1d498:	mov	r4, r0
   1d49c:	add	r0, r6, #16
   1d4a0:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d4a4:	mov	r1, r4
   1d4a8:	ldr	r2, [sp, #72]	; 0x48
   1d4ac:	mov	r3, r0
   1d4b0:	mov	r0, #1
   1d4b4:	bl	11580 <__printf_chk@plt>
   1d4b8:	ldr	r3, [fp, #4]
   1d4bc:	add	r3, r3, #1
   1d4c0:	str	r3, [fp, #4]
   1d4c4:	b	1ce40 <elf32_fsize@plt+0xb788>
   1d4c8:	mov	r2, #5
   1d4cc:	movw	r1, #7828	; 0x1e94
   1d4d0:	movt	r1, #2
   1d4d4:	bl	113b8 <dcgettext@plt>
   1d4d8:	ldr	r1, [sp, #124]	; 0x7c
   1d4dc:	mov	r4, r0
   1d4e0:	add	r0, r5, #16
   1d4e4:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d4e8:	mov	r1, r4
   1d4ec:	ldr	r2, [sp, #124]	; 0x7c
   1d4f0:	mov	r3, r0
   1d4f4:	mov	r0, #1
   1d4f8:	bl	11580 <__printf_chk@plt>
   1d4fc:	ldr	r3, [r6, #4]
   1d500:	add	r3, r3, #1
   1d504:	str	r3, [r6, #4]
   1d508:	b	1b1b4 <elf32_fsize@plt+0x9afc>
   1d50c:	movw	r1, #7828	; 0x1e94
   1d510:	mov	r0, #0
   1d514:	movt	r1, #2
   1d518:	mov	r2, #5
   1d51c:	b	1c214 <elf32_fsize@plt+0xab5c>
   1d520:	movw	r1, #7828	; 0x1e94
   1d524:	mov	r0, #0
   1d528:	movt	r1, #2
   1d52c:	mov	r2, #5
   1d530:	bl	113b8 <dcgettext@plt>
   1d534:	ldr	ip, [sp, #76]	; 0x4c
   1d538:	ldr	r1, [sp, #72]	; 0x48
   1d53c:	mov	r4, r0
   1d540:	add	r0, ip, #16
   1d544:	b	1c228 <elf32_fsize@plt+0xab70>
   1d548:	mov	r2, #5
   1d54c:	movw	r1, #22664	; 0x5888
   1d550:	movt	r1, #2
   1d554:	bl	113b8 <dcgettext@plt>
   1d558:	ldr	r5, [sp, #76]	; 0x4c
   1d55c:	ldr	r1, [sp, #72]	; 0x48
   1d560:	mov	r4, r0
   1d564:	add	r0, r5, #16
   1d568:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d56c:	mov	r1, r4
   1d570:	ldr	r2, [sp, #72]	; 0x48
   1d574:	str	r8, [sp]
   1d578:	mov	r3, r0
   1d57c:	mov	r0, #1
   1d580:	bl	11580 <__printf_chk@plt>
   1d584:	ldr	r1, [fp, #4]
   1d588:	ldrd	r2, [r9, #8]
   1d58c:	add	r1, r1, #1
   1d590:	str	r1, [fp, #4]
   1d594:	b	1ae48 <elf32_fsize@plt+0x9790>
   1d598:	ldr	sl, [sp, #132]	; 0x84
   1d59c:	b	1b1b4 <elf32_fsize@plt+0x9afc>
   1d5a0:	mov	r2, #5
   1d5a4:	movw	r1, #23576	; 0x5c18
   1d5a8:	movt	r1, #2
   1d5ac:	bl	113b8 <dcgettext@plt>
   1d5b0:	mov	r2, r4
   1d5b4:	mov	r1, r0
   1d5b8:	mov	r0, #1
   1d5bc:	bl	11580 <__printf_chk@plt>
   1d5c0:	ldr	r3, [fp, #4]
   1d5c4:	ldr	r2, [r5, #12]
   1d5c8:	add	r3, r3, #1
   1d5cc:	str	r3, [fp, #4]
   1d5d0:	b	1cf90 <elf32_fsize@plt+0xb8d8>
   1d5d4:	movw	r6, #37252	; 0x9184
   1d5d8:	movt	r6, #3
   1d5dc:	ldr	r3, [r6, #16]
   1d5e0:	b	1ae74 <elf32_fsize@plt+0x97bc>
   1d5e4:	mov	r2, #5
   1d5e8:	movw	r1, #24480	; 0x5fa0
   1d5ec:	movt	r1, #2
   1d5f0:	ldr	sl, [sp, #132]	; 0x84
   1d5f4:	bl	113b8 <dcgettext@plt>
   1d5f8:	ldr	r9, [sp, #76]	; 0x4c
   1d5fc:	ldr	r1, [sp, #124]	; 0x7c
   1d600:	mov	r4, r0
   1d604:	add	r0, r9, #16
   1d608:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d60c:	mov	r1, r4
   1d610:	str	fp, [sp]
   1d614:	ldr	r2, [sp, #124]	; 0x7c
   1d618:	mov	r3, r0
   1d61c:	mov	r0, #1
   1d620:	bl	11580 <__printf_chk@plt>
   1d624:	ldr	r3, [r8, #4]
   1d628:	add	r3, r3, #1
   1d62c:	str	r3, [r8, #4]
   1d630:	b	1b1b4 <elf32_fsize@plt+0x9afc>
   1d634:	mov	r2, #5
   1d638:	movw	r1, #23260	; 0x5adc
   1d63c:	movt	r1, #2
   1d640:	bl	113b8 <dcgettext@plt>
   1d644:	mov	r1, r0
   1d648:	mov	r0, #1
   1d64c:	bl	11580 <__printf_chk@plt>
   1d650:	ldr	r3, [fp, #4]
   1d654:	add	r3, r3, #1
   1d658:	str	r3, [fp, #4]
   1d65c:	b	1cd48 <elf32_fsize@plt+0xb690>
   1d660:	ldr	ip, [r9, #32]
   1d664:	ldr	r4, [sp, #76]	; 0x4c
   1d668:	ldr	r0, [r4, #16]
   1d66c:	str	r1, [sp, #4]
   1d670:	str	ip, [sp]
   1d674:	bl	115e0 <elf_getdata_rawchunk@plt>
   1d678:	cmp	r0, #0
   1d67c:	beq	1d6e0 <elf32_fsize@plt+0xc028>
   1d680:	ldr	r1, [r0, #12]
   1d684:	mov	r5, #0
   1d688:	ldrd	r2, [r9, #32]
   1d68c:	mov	r4, r1
   1d690:	cmp	r5, r3
   1d694:	cmpeq	r4, r2
   1d698:	moveq	r3, #0
   1d69c:	movne	r3, #1
   1d6a0:	cmp	r1, #0
   1d6a4:	beq	1d6d8 <elf32_fsize@plt+0xc020>
   1d6a8:	cmp	r3, #0
   1d6ac:	bne	1d6e0 <elf32_fsize@plt+0xc028>
   1d6b0:	ldr	r2, [r0]
   1d6b4:	add	r1, r1, r2
   1d6b8:	b	1d6c4 <elf32_fsize@plt+0xc00c>
   1d6bc:	cmp	r3, #0
   1d6c0:	bne	1d6e0 <elf32_fsize@plt+0xc028>
   1d6c4:	ldrb	r3, [r2], #1
   1d6c8:	adds	r3, r3, #0
   1d6cc:	movne	r3, #1
   1d6d0:	cmp	r2, r1
   1d6d4:	bne	1d6bc <elf32_fsize@plt+0xc004>
   1d6d8:	cmp	r3, #0
   1d6dc:	beq	1d13c <elf32_fsize@plt+0xba84>
   1d6e0:	movw	r1, #22420	; 0x5794
   1d6e4:	mov	r0, #0
   1d6e8:	movt	r1, #2
   1d6ec:	mov	r2, #5
   1d6f0:	bl	113b8 <dcgettext@plt>
   1d6f4:	ldr	r5, [sp, #76]	; 0x4c
   1d6f8:	ldr	r1, [sp, #72]	; 0x48
   1d6fc:	mov	r4, r0
   1d700:	add	r0, r5, #16
   1d704:	b	1d114 <elf32_fsize@plt+0xba5c>
   1d708:	mov	r2, #5
   1d70c:	movw	r1, #23188	; 0x5a94
   1d710:	movt	r1, #2
   1d714:	bl	113b8 <dcgettext@plt>
   1d718:	ldr	ip, [sp, #76]	; 0x4c
   1d71c:	ldr	r1, [sp, #72]	; 0x48
   1d720:	mov	r7, r0
   1d724:	add	r0, ip, #16
   1d728:	bl	12670 <elf32_fsize@plt+0xfb8>
   1d72c:	ldr	ip, [r9, #40]	; 0x28
   1d730:	mov	r1, r7
   1d734:	ldr	r2, [sp, #72]	; 0x48
   1d738:	str	ip, [sp]
   1d73c:	mov	r3, r0
   1d740:	mov	r0, r5
   1d744:	bl	11580 <__printf_chk@plt>
   1d748:	ldr	r3, [fp, #4]
   1d74c:	add	r3, r3, #1
   1d750:	str	r3, [fp, #4]
   1d754:	b	1cd34 <elf32_fsize@plt+0xb67c>
   1d758:	ldr	r7, [sp, #76]	; 0x4c
   1d75c:	ldrh	r1, [sl, #6]
   1d760:	ldr	r0, [r7, #16]
   1d764:	bl	11628 <elf_getscn@plt>
   1d768:	ldr	r1, [sp, #136]	; 0x88
   1d76c:	bl	1134c <gelf_getshdr@plt>
   1d770:	cmp	r0, #0
   1d774:	beq	1d784 <elf32_fsize@plt+0xc0cc>
   1d778:	ldr	r3, [r0, #4]
   1d77c:	cmp	r3, #8
   1d780:	beq	1c950 <elf32_fsize@plt+0xb298>
   1d784:	movw	r1, #24892	; 0x613c
   1d788:	mov	r0, #0
   1d78c:	movt	r1, #2
   1d790:	b	1c908 <elf32_fsize@plt+0xb250>
   1d794:	bl	113dc <__stack_chk_fail@plt>
   1d798:	ldrb	r3, [r3, #60]	; 0x3c
   1d79c:	cmp	r3, #0
   1d7a0:	bne	1d86c <elf32_fsize@plt+0xc1b4>
   1d7a4:	mov	sl, r3
   1d7a8:	str	r3, [sp, #140]	; 0x8c
   1d7ac:	str	r3, [sp, #144]	; 0x90
   1d7b0:	str	r3, [sp, #124]	; 0x7c
   1d7b4:	b	1b0c8 <elf32_fsize@plt+0x9a10>
   1d7b8:	bl	2042c <elf32_fsize@plt+0xed74>
   1d7bc:	orrs	r3, r0, r1
   1d7c0:	beq	1d758 <elf32_fsize@plt+0xc0a0>
   1d7c4:	mov	r0, #1
   1d7c8:	mov	r1, #0
   1d7cc:	add	ip, sp, #200	; 0xc8
   1d7d0:	strd	r0, [sp, #80]	; 0x50
   1d7d4:	str	ip, [sp, #116]	; 0x74
   1d7d8:	b	1d810 <elf32_fsize@plt+0xc158>
   1d7dc:	ldrd	r2, [r7, #56]	; 0x38
   1d7e0:	ldrd	r0, [r7, #32]
   1d7e4:	bl	2042c <elf32_fsize@plt+0xed74>
   1d7e8:	ldrd	r2, [sp, #80]	; 0x50
   1d7ec:	adds	r2, r2, #1
   1d7f0:	adc	r3, r3, #0
   1d7f4:	strd	r2, [sp, #48]	; 0x30
   1d7f8:	ldrd	r2, [sp, #80]	; 0x50
   1d7fc:	cmp	r1, r3
   1d800:	cmpeq	r0, r2
   1d804:	bls	1d758 <elf32_fsize@plt+0xc0a0>
   1d808:	ldrd	r2, [sp, #48]	; 0x30
   1d80c:	strd	r2, [sp, #80]	; 0x50
   1d810:	ldr	lr, [sp, #80]	; 0x50
   1d814:	ldr	r0, [sp, #120]	; 0x78
   1d818:	sub	r1, lr, #1
   1d81c:	ldr	r2, [sp, #116]	; 0x74
   1d820:	bl	115ec <gelf_getrel@plt>
   1d824:	cmp	r0, #0
   1d828:	beq	1d7dc <elf32_fsize@plt+0xc124>
   1d82c:	ldr	r1, [r0, #12]
   1d830:	mov	r2, #0
   1d834:	str	r2, [sp, #156]	; 0x9c
   1d838:	ldr	ip, [r0, #8]
   1d83c:	str	r1, [sp, #152]	; 0x98
   1d840:	ldrd	r2, [sp, #152]	; 0x98
   1d844:	ldrd	r0, [sp, #64]	; 0x40
   1d848:	cmp	r1, r3
   1d84c:	cmpeq	r0, r2
   1d850:	bne	1d7dc <elf32_fsize@plt+0xc124>
   1d854:	mov	r1, ip
   1d858:	ldr	r0, [sp, #76]	; 0x4c
   1d85c:	bl	1fee8 <elf32_fsize@plt+0xe830>
   1d860:	cmp	r0, #0
   1d864:	beq	1d7dc <elf32_fsize@plt+0xc124>
   1d868:	b	1c950 <elf32_fsize@plt+0xb298>
   1d86c:	mov	sl, #0
   1d870:	str	sl, [sp, #140]	; 0x8c
   1d874:	str	sl, [sp, #144]	; 0x90
   1d878:	str	sl, [sp, #124]	; 0x7c
   1d87c:	b	1cc8c <elf32_fsize@plt+0xb5d4>
   1d880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d884:	add	fp, sp, #32
   1d888:	sub	sp, sp, #300	; 0x12c
   1d88c:	movw	r6, #37240	; 0x9178
   1d890:	movt	r6, #3
   1d894:	str	r6, [fp, #-232]	; 0xffffff18
   1d898:	mov	r7, r1
   1d89c:	ldr	ip, [fp, #-232]	; 0xffffff18
   1d8a0:	mov	r6, r0
   1d8a4:	mov	r0, r7
   1d8a8:	mov	r4, r2
   1d8ac:	mov	r5, r3
   1d8b0:	ldr	r1, [ip]
   1d8b4:	str	r1, [fp, #-40]	; 0xffffffd8
   1d8b8:	bl	11688 <elf_kind@plt>
   1d8bc:	ldr	r8, [fp, #4]
   1d8c0:	ldrb	sl, [fp, #12]
   1d8c4:	cmp	r0, #1
   1d8c8:	beq	1dc40 <elf32_fsize@plt+0xc588>
   1d8cc:	cmp	r0, #3
   1d8d0:	beq	1d924 <elf32_fsize@plt+0xc26c>
   1d8d4:	mov	r2, #5
   1d8d8:	movw	r1, #26884	; 0x6904
   1d8dc:	mov	r0, #0
   1d8e0:	movt	r1, #2
   1d8e4:	bl	113b8 <dcgettext@plt>
   1d8e8:	mov	r1, r0
   1d8ec:	mov	r0, #1
   1d8f0:	bl	11580 <__printf_chk@plt>
   1d8f4:	movw	r3, #37252	; 0x9184
   1d8f8:	movt	r3, #3
   1d8fc:	ldr	r2, [r3, #4]
   1d900:	add	r2, r2, #1
   1d904:	str	r2, [r3, #4]
   1d908:	ldr	r7, [fp, #-232]	; 0xffffff18
   1d90c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1d910:	ldr	r3, [r7]
   1d914:	cmp	r2, r3
   1d918:	bne	1e9a0 <elf32_fsize@plt+0xd2e8>
   1d91c:	sub	sp, fp, #32
   1d920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d924:	movw	r9, #37252	; 0x9184
   1d928:	movt	r9, #3
   1d92c:	mov	r0, r7
   1d930:	sub	r1, fp, #172	; 0xac
   1d934:	mov	r3, #0
   1d938:	str	r3, [r9, #28]
   1d93c:	str	r3, [r9, #36]	; 0x24
   1d940:	str	r3, [r9, #40]	; 0x28
   1d944:	strb	r3, [r9, #24]
   1d948:	strb	r3, [r9, #25]
   1d94c:	strb	r3, [r9, #44]	; 0x2c
   1d950:	strb	r3, [r9, #60]	; 0x3c
   1d954:	bl	11328 <gelf_getehdr@plt>
   1d958:	cmp	sl, #0
   1d95c:	str	r0, [fp, #-240]	; 0xffffff10
   1d960:	bne	1d988 <elf32_fsize@plt+0xc2d0>
   1d964:	cmp	r4, #0
   1d968:	beq	1e544 <elf32_fsize@plt+0xce8c>
   1d96c:	movw	r1, #24968	; 0x6188
   1d970:	str	r5, [sp]
   1d974:	mov	r2, r4
   1d978:	mov	r3, r8
   1d97c:	mov	r0, #1
   1d980:	movt	r1, #2
   1d984:	bl	11580 <__printf_chk@plt>
   1d988:	ldr	r6, [fp, #-240]	; 0xffffff10
   1d98c:	cmp	r6, #0
   1d990:	beq	1e504 <elf32_fsize@plt+0xce4c>
   1d994:	mov	r0, r7
   1d998:	bl	1f228 <elf32_fsize@plt+0xdb70>
   1d99c:	ldr	r2, [fp, #8]
   1d9a0:	ldr	r1, [fp, #-240]	; 0xffffff10
   1d9a4:	mov	sl, r0
   1d9a8:	bl	11b20 <elf32_fsize@plt+0x468>
   1d9ac:	ldr	r7, [fp, #-240]	; 0xffffff10
   1d9b0:	ldrd	r2, [r7, #32]
   1d9b4:	orrs	ip, r2, r3
   1d9b8:	beq	1dbac <elf32_fsize@plt+0xc4f4>
   1d9bc:	ldr	r6, [fp, #-240]	; 0xffffff10
   1d9c0:	ldrh	r3, [r6, #16]
   1d9c4:	sub	r3, r3, #2
   1d9c8:	cmp	r3, #2
   1d9cc:	bhi	1e3d4 <elf32_fsize@plt+0xcd1c>
   1d9d0:	ldr	r3, [r9, #16]
   1d9d4:	cmp	r3, #0
   1d9d8:	beq	1dbac <elf32_fsize@plt+0xc4f4>
   1d9dc:	movw	r6, #58706	; 0xe552
   1d9e0:	movt	r6, #25716	; 0x6474
   1d9e4:	str	r6, [fp, #-256]	; 0xffffff00
   1d9e8:	mov	r6, #0
   1d9ec:	mov	r7, #0
   1d9f0:	movw	ip, #58704	; 0xe550
   1d9f4:	str	r7, [fp, #-244]	; 0xffffff0c
   1d9f8:	movt	ip, #25716	; 0x6474
   1d9fc:	movw	r7, #58705	; 0xe551
   1da00:	str	ip, [fp, #-236]	; 0xffffff14
   1da04:	movt	r7, #25716	; 0x6474
   1da08:	movw	ip, #58707	; 0xe553
   1da0c:	mov	r5, sl
   1da10:	movt	ip, #25716	; 0x6474
   1da14:	str	r7, [fp, #-264]	; 0xfffffef8
   1da18:	mov	r4, r6
   1da1c:	str	ip, [fp, #-288]	; 0xfffffee0
   1da20:	mov	sl, r9
   1da24:	str	r6, [fp, #-268]	; 0xfffffef4
   1da28:	str	r6, [fp, #-260]	; 0xfffffefc
   1da2c:	b	1db28 <elf32_fsize@plt+0xc470>
   1da30:	cmp	r1, #3
   1da34:	beq	1df4c <elf32_fsize@plt+0xc894>
   1da38:	cmp	r1, #7
   1da3c:	beq	1df74 <elf32_fsize@plt+0xc8bc>
   1da40:	cmp	r1, #4
   1da44:	beq	1e0b8 <elf32_fsize@plt+0xca00>
   1da48:	cmp	r1, #2
   1da4c:	beq	1df98 <elf32_fsize@plt+0xc8e0>
   1da50:	ldr	ip, [fp, #-256]	; 0xffffff00
   1da54:	cmp	r1, ip
   1da58:	beq	1de00 <elf32_fsize@plt+0xc748>
   1da5c:	cmp	r1, #6
   1da60:	beq	1e200 <elf32_fsize@plt+0xcb48>
   1da64:	ldr	r7, [fp, #-236]	; 0xffffff14
   1da68:	cmp	r1, r7
   1da6c:	beq	1e324 <elf32_fsize@plt+0xcc6c>
   1da70:	ldrd	r6, [r8, #32]
   1da74:	ldrd	r2, [r8, #40]	; 0x28
   1da78:	cmp	r7, r3
   1da7c:	cmpeq	r6, r2
   1da80:	bls	1dac8 <elf32_fsize@plt+0xc410>
   1da84:	orrs	r0, r2, r3
   1da88:	bne	1da98 <elf32_fsize@plt+0xc3e0>
   1da8c:	ldr	r3, [r8]
   1da90:	cmp	r3, #4
   1da94:	beq	1dac8 <elf32_fsize@plt+0xc410>
   1da98:	mov	r2, #5
   1da9c:	movw	r1, #26468	; 0x6764
   1daa0:	mov	r0, #0
   1daa4:	movt	r1, #2
   1daa8:	bl	113b8 <dcgettext@plt>
   1daac:	mov	r2, r4
   1dab0:	mov	r1, r0
   1dab4:	mov	r0, #1
   1dab8:	bl	11580 <__printf_chk@plt>
   1dabc:	ldr	r3, [sl, #4]
   1dac0:	add	r3, r3, #1
   1dac4:	str	r3, [sl, #4]
   1dac8:	ldrd	r2, [r8, #48]	; 0x30
   1dacc:	cmp	r3, #0
   1dad0:	cmpeq	r2, #1
   1dad4:	bls	1db18 <elf32_fsize@plt+0xc460>
   1dad8:	subs	r0, r2, #1
   1dadc:	sbc	r1, r3, #0
   1dae0:	and	r0, r0, r2
   1dae4:	and	r1, r1, r3
   1dae8:	orrs	r6, r0, r1
   1daec:	movwne	r1, #26532	; 0x67a4
   1daf0:	movne	r0, #0
   1daf4:	movtne	r1, #2
   1daf8:	bne	1ddd8 <elf32_fsize@plt+0xc720>
   1dafc:	ldrd	r6, [r8, #8]
   1db00:	ldrd	r0, [r8, #16]
   1db04:	subs	r0, r0, r6
   1db08:	sbc	r1, r1, r7
   1db0c:	bl	2042c <elf32_fsize@plt+0xed74>
   1db10:	orrs	r7, r2, r3
   1db14:	bne	1ddcc <elf32_fsize@plt+0xc714>
   1db18:	ldr	r3, [sl, #16]
   1db1c:	add	r4, r4, #1
   1db20:	cmp	r4, r3
   1db24:	bcs	1dba4 <elf32_fsize@plt+0xc4ec>
   1db28:	ldr	r0, [r5, #16]
   1db2c:	mov	r1, r4
   1db30:	sub	r2, fp, #228	; 0xe4
   1db34:	bl	113f4 <gelf_getphdr@plt>
   1db38:	subs	r8, r0, #0
   1db3c:	beq	1e06c <elf32_fsize@plt+0xc9b4>
   1db40:	ldr	r1, [r8]
   1db44:	ldr	r7, [fp, #-236]	; 0xffffff14
   1db48:	cmp	r1, r7
   1db4c:	cmpne	r1, #7
   1db50:	bls	1db94 <elf32_fsize@plt+0xc4dc>
   1db54:	ldr	ip, [fp, #-264]	; 0xfffffef8
   1db58:	cmp	r1, ip
   1db5c:	beq	1df40 <elf32_fsize@plt+0xc888>
   1db60:	ldr	r6, [fp, #-256]	; 0xffffff00
   1db64:	cmp	r1, r6
   1db68:	beq	1de00 <elf32_fsize@plt+0xc748>
   1db6c:	ldr	ip, [fp, #-288]	; 0xfffffee0
   1db70:	cmp	r1, ip
   1db74:	beq	1da70 <elf32_fsize@plt+0xc3b8>
   1db78:	mov	r2, #0
   1db7c:	mov	r0, r5
   1db80:	mov	r3, r2
   1db84:	bl	1f324 <elf32_fsize@plt+0xdc6c>
   1db88:	subs	r6, r0, #0
   1db8c:	beq	1e55c <elf32_fsize@plt+0xcea4>
   1db90:	ldr	r1, [r8]
   1db94:	cmp	r1, #1
   1db98:	bne	1da30 <elf32_fsize@plt+0xc378>
   1db9c:	strb	r1, [sl, #44]	; 0x2c
   1dba0:	b	1da70 <elf32_fsize@plt+0xc3b8>
   1dba4:	mov	r9, sl
   1dba8:	mov	sl, r5
   1dbac:	mov	r0, sl
   1dbb0:	ldr	r1, [fp, #-240]	; 0xffffff10
   1dbb4:	bl	1a56c <elf32_fsize@plt+0x8eb4>
   1dbb8:	ldr	r0, [r9, #64]	; 0x40
   1dbbc:	movw	r4, #37252	; 0x9184
   1dbc0:	movt	r4, #3
   1dbc4:	cmp	r0, #0
   1dbc8:	bne	1dc14 <elf32_fsize@plt+0xc55c>
   1dbcc:	ldr	r3, [r4, #48]	; 0x30
   1dbd0:	cmp	r3, #0
   1dbd4:	beq	1dc14 <elf32_fsize@plt+0xc55c>
   1dbd8:	ldr	r6, [fp, #-240]	; 0xffffff10
   1dbdc:	ldrh	r3, [r6, #16]
   1dbe0:	sub	r3, r3, #2
   1dbe4:	cmp	r3, #1
   1dbe8:	bhi	1dc14 <elf32_fsize@plt+0xc55c>
   1dbec:	mov	r2, #5
   1dbf0:	movw	r1, #26672	; 0x6830
   1dbf4:	movt	r1, #2
   1dbf8:	bl	113b8 <dcgettext@plt>
   1dbfc:	mov	r1, r0
   1dc00:	mov	r0, #1
   1dc04:	bl	11580 <__printf_chk@plt>
   1dc08:	ldr	r3, [r4, #4]
   1dc0c:	add	r3, r3, #1
   1dc10:	str	r3, [r4, #4]
   1dc14:	ldrb	r3, [r9, #24]
   1dc18:	movw	r4, #37252	; 0x9184
   1dc1c:	movt	r4, #3
   1dc20:	cmp	r3, #0
   1dc24:	beq	1dc34 <elf32_fsize@plt+0xc57c>
   1dc28:	ldrb	r0, [r4, #25]
   1dc2c:	cmp	r0, #0
   1dc30:	beq	1e444 <elf32_fsize@plt+0xcd8c>
   1dc34:	mov	r0, sl
   1dc38:	bl	1f2b8 <elf32_fsize@plt+0xdc00>
   1dc3c:	b	1d908 <elf32_fsize@plt+0xc250>
   1dc40:	cmp	r4, #0
   1dc44:	str	sp, [fp, #-244]	; 0xffffff0c
   1dc48:	beq	1e404 <elf32_fsize@plt+0xcd4c>
   1dc4c:	mov	r0, r4
   1dc50:	bl	11514 <strlen@plt>
   1dc54:	add	r9, r0, #1
   1dc58:	str	r0, [fp, #-240]	; 0xffffff10
   1dc5c:	mov	r0, r8
   1dc60:	bl	11514 <strlen@plt>
   1dc64:	cmp	r5, #0
   1dc68:	add	r0, r0, #1
   1dc6c:	str	r0, [fp, #-236]	; 0xffffff14
   1dc70:	add	r3, r0, r9
   1dc74:	moveq	r0, #2
   1dc78:	add	r3, r3, #7
   1dc7c:	bic	r3, r3, #7
   1dc80:	sub	sp, sp, r3
   1dc84:	add	r9, sp, #16
   1dc88:	beq	1dc98 <elf32_fsize@plt+0xc5e0>
   1dc8c:	mov	r0, r5
   1dc90:	bl	11514 <strlen@plt>
   1dc94:	add	r0, r0, #2
   1dc98:	add	r3, r0, #7
   1dc9c:	cmp	r4, #0
   1dca0:	bic	r3, r3, #7
   1dca4:	sub	sp, sp, r3
   1dca8:	add	sl, sp, #16
   1dcac:	beq	1e0ac <elf32_fsize@plt+0xc9f4>
   1dcb0:	mov	r1, r4
   1dcb4:	ldr	r2, [fp, #-240]	; 0xffffff10
   1dcb8:	mov	r0, r9
   1dcbc:	bl	114f0 <mempcpy@plt>
   1dcc0:	mov	r1, r5
   1dcc4:	mov	r2, #40	; 0x28
   1dcc8:	mov	r3, r0
   1dccc:	mov	r0, sl
   1dcd0:	strb	r2, [r3]
   1dcd4:	add	r5, r3, #1
   1dcd8:	bl	11394 <stpcpy@plt>
   1dcdc:	movw	r3, #30588	; 0x777c
   1dce0:	movt	r3, #2
   1dce4:	ldrh	r3, [r3]
   1dce8:	strh	r3, [r0]
   1dcec:	mov	r0, r5
   1dcf0:	mov	r1, r8
   1dcf4:	ldr	r2, [fp, #-236]	; 0xffffff14
   1dcf8:	movw	r8, #37252	; 0x9184
   1dcfc:	bl	1137c <memcpy@plt>
   1dd00:	movt	r8, #3
   1dd04:	mov	r5, #8
   1dd08:	mov	r1, r5
   1dd0c:	mov	r0, r6
   1dd10:	mov	r2, r7
   1dd14:	bl	11598 <elf_begin@plt>
   1dd18:	subs	r4, r0, #0
   1dd1c:	beq	1ddc4 <elf32_fsize@plt+0xc70c>
   1dd20:	bl	11688 <elf_kind@plt>
   1dd24:	bic	r0, r0, #2
   1dd28:	cmp	r0, #1
   1dd2c:	bne	1dd68 <elf32_fsize@plt+0xc6b0>
   1dd30:	mov	r0, r4
   1dd34:	bl	11634 <elf_getarhdr@plt>
   1dd38:	subs	ip, r0, #0
   1dd3c:	beq	1e984 <elf32_fsize@plt+0xd2cc>
   1dd40:	ldr	lr, [ip]
   1dd44:	mov	r0, r6
   1dd48:	mov	r1, r4
   1dd4c:	mov	r2, r9
   1dd50:	mov	r3, sl
   1dd54:	str	lr, [sp]
   1dd58:	mov	lr, #0
   1dd5c:	ldr	ip, [ip, #24]
   1dd60:	stmib	sp, {ip, lr}
   1dd64:	bl	1d880 <elf32_fsize@plt+0xc1c8>
   1dd68:	mov	r0, r4
   1dd6c:	bl	11604 <elf_next@plt>
   1dd70:	mov	r5, r0
   1dd74:	mov	r0, r4
   1dd78:	bl	114fc <elf_end@plt>
   1dd7c:	cmp	r0, #0
   1dd80:	beq	1dd08 <elf32_fsize@plt+0xc650>
   1dd84:	mov	r2, #5
   1dd88:	movw	r1, #26836	; 0x68d4
   1dd8c:	mov	r0, #0
   1dd90:	movt	r1, #2
   1dd94:	bl	113b8 <dcgettext@plt>
   1dd98:	mov	r4, r0
   1dd9c:	mvn	r0, #0
   1dda0:	bl	11520 <elf_errmsg@plt>
   1dda4:	mov	r1, r4
   1dda8:	mov	r2, r0
   1ddac:	mov	r0, #1
   1ddb0:	bl	11580 <__printf_chk@plt>
   1ddb4:	ldr	r3, [r8, #4]
   1ddb8:	add	r3, r3, #1
   1ddbc:	str	r3, [r8, #4]
   1ddc0:	b	1dd08 <elf32_fsize@plt+0xc650>
   1ddc4:	ldr	sp, [fp, #-244]	; 0xffffff0c
   1ddc8:	b	1d908 <elf32_fsize@plt+0xc250>
   1ddcc:	movw	r1, #26588	; 0x67dc
   1ddd0:	movt	r1, #2
   1ddd4:	mov	r0, #0
   1ddd8:	mov	r2, #5
   1dddc:	bl	113b8 <dcgettext@plt>
   1dde0:	mov	r2, r4
   1dde4:	mov	r1, r0
   1dde8:	mov	r0, #1
   1ddec:	bl	11580 <__printf_chk@plt>
   1ddf0:	ldr	r3, [sl, #4]
   1ddf4:	add	r3, r3, #1
   1ddf8:	str	r3, [sl, #4]
   1ddfc:	b	1db18 <elf32_fsize@plt+0xc460>
   1de00:	ldr	r7, [fp, #-244]	; 0xffffff0c
   1de04:	add	r7, r7, #1
   1de08:	str	r7, [fp, #-244]	; 0xffffff0c
   1de0c:	cmp	r7, #2
   1de10:	beq	1e59c <elf32_fsize@plt+0xcee4>
   1de14:	ldr	r3, [sl, #16]
   1de18:	cmp	r3, #0
   1de1c:	beq	1e1c4 <elf32_fsize@plt+0xcb0c>
   1de20:	sub	r6, fp, #108	; 0x6c
   1de24:	mov	r9, #0
   1de28:	str	r4, [fp, #-292]	; 0xfffffedc
   1de2c:	mov	r4, r9
   1de30:	mov	r9, r5
   1de34:	mov	r5, sl
   1de38:	mov	sl, r8
   1de3c:	mov	r8, r6
   1de40:	b	1de54 <elf32_fsize@plt+0xc79c>
   1de44:	ldr	r2, [r5, #16]
   1de48:	add	r4, r4, #1
   1de4c:	cmp	r4, r2
   1de50:	bcs	1e1b4 <elf32_fsize@plt+0xcafc>
   1de54:	ldr	r0, [r9, #16]
   1de58:	mov	r1, r4
   1de5c:	mov	r2, r8
   1de60:	bl	113f4 <gelf_getphdr@plt>
   1de64:	cmp	r0, #0
   1de68:	beq	1de44 <elf32_fsize@plt+0xc78c>
   1de6c:	ldr	ip, [r0]
   1de70:	cmp	ip, #1
   1de74:	bne	1de44 <elf32_fsize@plt+0xc78c>
   1de78:	ldrd	r2, [sl, #16]
   1de7c:	sub	r6, fp, #512	; 0x200
   1de80:	strd	r2, [r6, #204]	; 0xcc
   1de84:	ldrd	r2, [r0, #16]
   1de88:	ldrd	r6, [r6, #204]	; 0xcc
   1de8c:	cmp	r7, r3
   1de90:	cmpeq	r6, r2
   1de94:	strd	r2, [fp, #-252]	; 0xffffff04
   1de98:	bcc	1de44 <elf32_fsize@plt+0xc78c>
   1de9c:	ldrd	r2, [sl, #40]	; 0x28
   1dea0:	adds	r2, r2, r6
   1dea4:	sub	r6, fp, #512	; 0x200
   1dea8:	adc	r3, r3, r7
   1deac:	strd	r2, [r6, #236]	; 0xec
   1deb0:	ldrd	r6, [r0, #40]	; 0x28
   1deb4:	ldrd	r2, [fp, #-252]	; 0xffffff04
   1deb8:	adds	r2, r2, r6
   1debc:	adc	r3, r3, r7
   1dec0:	sub	r7, fp, #512	; 0x200
   1dec4:	strd	r2, [r7, #228]	; 0xe4
   1dec8:	ldrd	r6, [r7, #236]	; 0xec
   1decc:	cmp	r7, r3
   1ded0:	cmpeq	r6, r2
   1ded4:	bhi	1de44 <elf32_fsize@plt+0xc78c>
   1ded8:	mov	r7, r0
   1dedc:	sub	r1, fp, #512	; 0x200
   1dee0:	ldr	r6, [r7, #4]
   1dee4:	mov	r8, sl
   1dee8:	ldrd	r2, [r1, #204]	; 0xcc
   1deec:	mov	sl, r5
   1def0:	ands	lr, r6, #2
   1def4:	mov	r5, r9
   1def8:	ldrd	r0, [fp, #-252]	; 0xffffff04
   1defc:	mov	r9, r4
   1df00:	ldr	r4, [fp, #-292]	; 0xfffffedc
   1df04:	beq	1e92c <elf32_fsize@plt+0xd274>
   1df08:	strd	r0, [fp, #-252]	; 0xffffff04
   1df0c:	mov	lr, r6
   1df10:	mov	r0, r2
   1df14:	mov	r1, r3
   1df18:	ldrd	r2, [fp, #-252]	; 0xffffff04
   1df1c:	cmp	r1, r3
   1df20:	cmpeq	r0, r2
   1df24:	beq	1e8b8 <elf32_fsize@plt+0xd200>
   1df28:	ldr	r3, [r8, #4]
   1df2c:	bics	r3, r3, lr
   1df30:	bne	1e880 <elf32_fsize@plt+0xd1c8>
   1df34:	ldr	r3, [sl, #16]
   1df38:	cmp	r9, r3
   1df3c:	bcs	1e1c4 <elf32_fsize@plt+0xcb0c>
   1df40:	ldrd	r6, [r8, #32]
   1df44:	ldrd	r2, [r8, #40]	; 0x28
   1df48:	b	1da78 <elf32_fsize@plt+0xc3c0>
   1df4c:	ldr	r6, [fp, #-260]	; 0xfffffefc
   1df50:	add	r6, r6, #1
   1df54:	str	r6, [fp, #-260]	; 0xfffffefc
   1df58:	cmp	r6, #2
   1df5c:	beq	1e4d4 <elf32_fsize@plt+0xce1c>
   1df60:	mov	r3, #1
   1df64:	ldrd	r6, [r8, #32]
   1df68:	strb	r3, [sl, #60]	; 0x3c
   1df6c:	ldrd	r2, [r8, #40]	; 0x28
   1df70:	b	1da78 <elf32_fsize@plt+0xc3c0>
   1df74:	ldr	r7, [fp, #-268]	; 0xfffffef4
   1df78:	add	r7, r7, #1
   1df7c:	str	r7, [fp, #-268]	; 0xfffffef4
   1df80:	cmp	r7, #2
   1df84:	bne	1df40 <elf32_fsize@plt+0xc888>
   1df88:	movw	r1, #25248	; 0x62a0
   1df8c:	mov	r0, #0
   1df90:	movt	r1, #2
   1df94:	b	1e300 <elf32_fsize@plt+0xcc48>
   1df98:	ldr	r7, [fp, #-240]	; 0xffffff10
   1df9c:	ldrh	r3, [r7, #16]
   1dfa0:	cmp	r3, #2
   1dfa4:	beq	1e48c <elf32_fsize@plt+0xcdd4>
   1dfa8:	mov	r7, #0
   1dfac:	mov	r1, r7
   1dfb0:	ldr	r0, [r5, #16]
   1dfb4:	bl	115d4 <elf_nextscn@plt>
   1dfb8:	subs	r7, r0, #0
   1dfbc:	beq	1df40 <elf32_fsize@plt+0xc888>
   1dfc0:	sub	r1, fp, #108	; 0x6c
   1dfc4:	bl	1134c <gelf_getshdr@plt>
   1dfc8:	cmp	r0, #0
   1dfcc:	beq	1dfac <elf32_fsize@plt+0xc8f4>
   1dfd0:	ldr	r3, [r0, #4]
   1dfd4:	cmp	r3, #6
   1dfd8:	bne	1dfac <elf32_fsize@plt+0xc8f4>
   1dfdc:	mov	r6, r0
   1dfe0:	ldrd	r0, [r8, #8]
   1dfe4:	ldrd	r2, [r6, #24]
   1dfe8:	cmp	r1, r3
   1dfec:	cmpeq	r0, r2
   1dff0:	beq	1e020 <elf32_fsize@plt+0xc968>
   1dff4:	mov	r2, #5
   1dff8:	movw	r1, #25492	; 0x6394
   1dffc:	mov	r0, #0
   1e000:	movt	r1, #2
   1e004:	bl	113b8 <dcgettext@plt>
   1e008:	mov	r1, r0
   1e00c:	mov	r0, #1
   1e010:	bl	11580 <__printf_chk@plt>
   1e014:	ldr	r3, [sl, #4]
   1e018:	add	r3, r3, #1
   1e01c:	str	r3, [sl, #4]
   1e020:	ldrd	r2, [r8, #40]	; 0x28
   1e024:	ldrd	r0, [r6, #32]
   1e028:	cmp	r3, r1
   1e02c:	cmpeq	r2, r0
   1e030:	beq	1e064 <elf32_fsize@plt+0xc9ac>
   1e034:	mov	r2, #5
   1e038:	movw	r1, #25556	; 0x63d4
   1e03c:	mov	r0, #0
   1e040:	movt	r1, #2
   1e044:	bl	113b8 <dcgettext@plt>
   1e048:	mov	r1, r0
   1e04c:	mov	r0, #1
   1e050:	bl	11580 <__printf_chk@plt>
   1e054:	ldrd	r2, [r8, #40]	; 0x28
   1e058:	ldr	r1, [sl, #4]
   1e05c:	add	r1, r1, #1
   1e060:	str	r1, [sl, #4]
   1e064:	ldrd	r6, [r8, #32]
   1e068:	b	1da78 <elf32_fsize@plt+0xc3c0>
   1e06c:	mov	r2, #5
   1e070:	movw	r1, #25092	; 0x6204
   1e074:	movt	r1, #2
   1e078:	bl	113b8 <dcgettext@plt>
   1e07c:	mov	r6, r0
   1e080:	mvn	r0, #0
   1e084:	bl	11520 <elf_errmsg@plt>
   1e088:	mov	r1, r6
   1e08c:	mov	r2, r4
   1e090:	mov	r3, r0
   1e094:	mov	r0, #1
   1e098:	bl	11580 <__printf_chk@plt>
   1e09c:	ldr	r3, [sl, #4]
   1e0a0:	add	r3, r3, #1
   1e0a4:	str	r3, [sl, #4]
   1e0a8:	b	1db18 <elf32_fsize@plt+0xc460>
   1e0ac:	mov	r5, r9
   1e0b0:	strb	r4, [sp, #16]
   1e0b4:	b	1dcec <elf32_fsize@plt+0xc634>
   1e0b8:	ldr	ip, [fp, #-240]	; 0xffffff10
   1e0bc:	ldrh	r3, [ip, #16]
   1e0c0:	sub	r3, r3, #1
   1e0c4:	cmp	r3, #3
   1e0c8:	bhi	1e410 <elf32_fsize@plt+0xcd58>
   1e0cc:	ldrb	r9, [sl, #22]
   1e0d0:	ldrd	r6, [r8, #32]
   1e0d4:	cmp	r9, #0
   1e0d8:	bne	1da74 <elf32_fsize@plt+0xc3bc>
   1e0dc:	orrs	lr, r6, r7
   1e0e0:	beq	1dac8 <elf32_fsize@plt+0xc410>
   1e0e4:	ldrd	r2, [r8, #48]	; 0x30
   1e0e8:	ldr	r0, [r5, #16]
   1e0ec:	cmp	r3, #0
   1e0f0:	cmpeq	r2, #8
   1e0f4:	ldrd	r2, [r8, #8]
   1e0f8:	str	r6, [sp]
   1e0fc:	movne	r1, #19
   1e100:	moveq	r1, #26
   1e104:	str	r1, [sp, #4]
   1e108:	bl	115e0 <elf_getdata_rawchunk@plt>
   1e10c:	subs	r2, r0, #0
   1e110:	beq	1e5ac <elf32_fsize@plt+0xcef4>
   1e114:	ldr	r3, [r2]
   1e118:	cmp	r3, #0
   1e11c:	beq	1e5ac <elf32_fsize@plt+0xcef4>
   1e120:	str	r4, [sp]
   1e124:	mov	r0, r5
   1e128:	ldrd	r6, [r8, #8]
   1e12c:	mov	r3, r9
   1e130:	ldr	ip, [fp, #-240]	; 0xffffff10
   1e134:	strd	r6, [sp, #8]
   1e138:	add	r1, ip, #16
   1e13c:	bl	12700 <elf32_fsize@plt+0x1048>
   1e140:	mov	r6, r0
   1e144:	mov	r7, r1
   1e148:	orrs	lr, r6, r7
   1e14c:	beq	1e5ac <elf32_fsize@plt+0xcef4>
   1e150:	ldrd	r2, [r8, #32]
   1e154:	cmp	r7, r3
   1e158:	cmpeq	r6, r2
   1e15c:	beq	1da74 <elf32_fsize@plt+0xc3bc>
   1e160:	mov	r2, #5
   1e164:	mov	r0, r9
   1e168:	movw	r1, #25400	; 0x6338
   1e16c:	movt	r1, #2
   1e170:	bl	113b8 <dcgettext@plt>
   1e174:	ldrd	r2, [r8, #32]
   1e178:	subs	r2, r2, r6
   1e17c:	sbc	r3, r3, r7
   1e180:	strd	r2, [fp, #-252]	; 0xffffff04
   1e184:	ldrd	r6, [fp, #-252]	; 0xffffff04
   1e188:	mov	r2, r4
   1e18c:	strd	r6, [sp]
   1e190:	mov	r1, r0
   1e194:	mov	r0, #1
   1e198:	bl	11580 <__printf_chk@plt>
   1e19c:	ldr	r1, [sl, #4]
   1e1a0:	ldrd	r6, [r8, #32]
   1e1a4:	add	r1, r1, #1
   1e1a8:	ldrd	r2, [r8, #40]	; 0x28
   1e1ac:	str	r1, [sl, #4]
   1e1b0:	b	1da78 <elf32_fsize@plt+0xc3c0>
   1e1b4:	ldr	r4, [fp, #-292]	; 0xfffffedc
   1e1b8:	mov	r8, sl
   1e1bc:	mov	sl, r5
   1e1c0:	mov	r5, r9
   1e1c4:	mov	r2, #5
   1e1c8:	movw	r1, #25868	; 0x650c
   1e1cc:	mov	r0, #0
   1e1d0:	movt	r1, #2
   1e1d4:	bl	113b8 <dcgettext@plt>
   1e1d8:	movw	r2, #25916	; 0x653c
   1e1dc:	movt	r2, #2
   1e1e0:	mov	r1, r0
   1e1e4:	mov	r0, #1
   1e1e8:	bl	11580 <__printf_chk@plt>
   1e1ec:	ldr	r3, [sl, #4]
   1e1f0:	ldrd	r6, [r8, #32]
   1e1f4:	add	r3, r3, #1
   1e1f8:	str	r3, [sl, #4]
   1e1fc:	b	1da74 <elf32_fsize@plt+0xc3bc>
   1e200:	ldr	r3, [sl, #16]
   1e204:	cmp	r3, #0
   1e208:	beq	1e2a8 <elf32_fsize@plt+0xcbf0>
   1e20c:	sub	r6, fp, #108	; 0x6c
   1e210:	mov	r9, #0
   1e214:	mov	r7, r5
   1e218:	str	r4, [fp, #-276]	; 0xfffffeec
   1e21c:	b	1e230 <elf32_fsize@plt+0xcb78>
   1e220:	ldr	r3, [sl, #16]
   1e224:	add	r9, r9, #1
   1e228:	cmp	r9, r3
   1e22c:	bcs	1e318 <elf32_fsize@plt+0xcc60>
   1e230:	ldr	r0, [r7, #16]
   1e234:	mov	r1, r9
   1e238:	mov	r2, r6
   1e23c:	bl	113f4 <gelf_getphdr@plt>
   1e240:	cmp	r0, #0
   1e244:	beq	1e220 <elf32_fsize@plt+0xcb68>
   1e248:	ldr	r3, [r0]
   1e24c:	cmp	r3, #1
   1e250:	bne	1e220 <elf32_fsize@plt+0xcb68>
   1e254:	ldrd	r2, [r0, #16]
   1e258:	ldrd	r4, [r8, #16]
   1e25c:	cmp	r5, r3
   1e260:	cmpeq	r4, r2
   1e264:	strd	r2, [fp, #-252]	; 0xffffff04
   1e268:	bcc	1e220 <elf32_fsize@plt+0xcb68>
   1e26c:	ldrd	r2, [r8, #40]	; 0x28
   1e270:	ldrd	r0, [r0, #40]	; 0x28
   1e274:	adds	r4, r4, r2
   1e278:	adc	r5, r5, r3
   1e27c:	ldrd	r2, [fp, #-252]	; 0xffffff04
   1e280:	adds	r0, r0, r2
   1e284:	adc	r1, r1, r3
   1e288:	cmp	r5, r1
   1e28c:	cmpeq	r4, r0
   1e290:	bhi	1e220 <elf32_fsize@plt+0xcb68>
   1e294:	ldr	r3, [sl, #16]
   1e298:	mov	r5, r7
   1e29c:	ldr	r4, [fp, #-276]	; 0xfffffeec
   1e2a0:	cmp	r3, r9
   1e2a4:	bhi	1e2dc <elf32_fsize@plt+0xcc24>
   1e2a8:	mov	r2, #5
   1e2ac:	movw	r1, #25868	; 0x650c
   1e2b0:	mov	r0, #0
   1e2b4:	movt	r1, #2
   1e2b8:	bl	113b8 <dcgettext@plt>
   1e2bc:	movw	r2, #25928	; 0x6548
   1e2c0:	movt	r2, #2
   1e2c4:	mov	r1, r0
   1e2c8:	mov	r0, #1
   1e2cc:	bl	11580 <__printf_chk@plt>
   1e2d0:	ldr	r3, [sl, #4]
   1e2d4:	add	r3, r3, #1
   1e2d8:	str	r3, [sl, #4]
   1e2dc:	ldr	r6, [fp, #-240]	; 0xffffff10
   1e2e0:	ldrd	r0, [r8, #8]
   1e2e4:	ldrd	r2, [r6, #32]
   1e2e8:	cmp	r1, r3
   1e2ec:	cmpeq	r0, r2
   1e2f0:	beq	1df40 <elf32_fsize@plt+0xc888>
   1e2f4:	movw	r1, #25936	; 0x6550
   1e2f8:	movt	r1, #2
   1e2fc:	mov	r0, #0
   1e300:	mov	r2, #5
   1e304:	bl	113b8 <dcgettext@plt>
   1e308:	mov	r1, r0
   1e30c:	mov	r0, #1
   1e310:	bl	11580 <__printf_chk@plt>
   1e314:	b	1e1ec <elf32_fsize@plt+0xcb34>
   1e318:	mov	r5, r7
   1e31c:	ldr	r4, [fp, #-276]	; 0xfffffeec
   1e320:	b	1e2a8 <elf32_fsize@plt+0xcbf0>
   1e324:	mov	r6, #0
   1e328:	movw	r7, #37252	; 0x9184
   1e32c:	mov	r9, r6
   1e330:	movt	r7, #3
   1e334:	str	r4, [fp, #-252]	; 0xffffff04
   1e338:	b	1e394 <elf32_fsize@plt+0xccdc>
   1e33c:	cmp	r2, #1
   1e340:	cmpne	r2, #1879048193	; 0x70000001
   1e344:	bne	1e390 <elf32_fsize@plt+0xccd8>
   1e348:	ldr	r0, [r5, #16]
   1e34c:	movw	r6, #37252	; 0x9184
   1e350:	ldr	r1, [sl, #12]
   1e354:	movt	r6, #3
   1e358:	ldr	r2, [r4]
   1e35c:	bl	11430 <elf_strptr@plt>
   1e360:	cmp	r0, #0
   1e364:	beq	1e390 <elf32_fsize@plt+0xccd8>
   1e368:	ldr	r1, [r7, #12]
   1e36c:	ldr	r2, [r4]
   1e370:	ldr	r0, [r5, #16]
   1e374:	bl	11430 <elf_strptr@plt>
   1e378:	mov	r1, r0
   1e37c:	movw	r0, #21064	; 0x5248
   1e380:	movt	r0, #2
   1e384:	bl	11358 <strcmp@plt>
   1e388:	cmp	r0, #0
   1e38c:	beq	1e5e4 <elf32_fsize@plt+0xcf2c>
   1e390:	mov	r6, #1
   1e394:	mov	r1, r9
   1e398:	ldr	r0, [r5, #16]
   1e39c:	bl	115d4 <elf_nextscn@plt>
   1e3a0:	subs	r9, r0, #0
   1e3a4:	beq	1e470 <elf32_fsize@plt+0xcdb8>
   1e3a8:	sub	r1, fp, #108	; 0x6c
   1e3ac:	bl	1134c <gelf_getshdr@plt>
   1e3b0:	subs	r4, r0, #0
   1e3b4:	beq	1e390 <elf32_fsize@plt+0xccd8>
   1e3b8:	ldrb	r2, [sl, #22]
   1e3bc:	cmp	r2, #0
   1e3c0:	ldr	r2, [r4, #4]
   1e3c4:	beq	1e33c <elf32_fsize@plt+0xcc84>
   1e3c8:	cmp	r2, #8
   1e3cc:	bne	1e390 <elf32_fsize@plt+0xccd8>
   1e3d0:	b	1e348 <elf32_fsize@plt+0xcc90>
   1e3d4:	mov	r2, #5
   1e3d8:	movw	r1, #25016	; 0x61b8
   1e3dc:	mov	r0, #0
   1e3e0:	movt	r1, #2
   1e3e4:	bl	113b8 <dcgettext@plt>
   1e3e8:	mov	r1, r0
   1e3ec:	mov	r0, #1
   1e3f0:	bl	11580 <__printf_chk@plt>
   1e3f4:	ldr	r3, [r9, #4]
   1e3f8:	add	r3, r3, #1
   1e3fc:	str	r3, [r9, #4]
   1e400:	b	1d9d0 <elf32_fsize@plt+0xc318>
   1e404:	mov	r9, r0
   1e408:	str	r4, [fp, #-240]	; 0xffffff10
   1e40c:	b	1dc5c <elf32_fsize@plt+0xc5a4>
   1e410:	mov	r2, #5
   1e414:	movw	r1, #25292	; 0x62cc
   1e418:	mov	r0, #0
   1e41c:	movt	r1, #2
   1e420:	bl	113b8 <dcgettext@plt>
   1e424:	mov	r2, r4
   1e428:	mov	r1, r0
   1e42c:	mov	r0, #1
   1e430:	bl	11580 <__printf_chk@plt>
   1e434:	ldr	r3, [sl, #4]
   1e438:	add	r3, r3, #1
   1e43c:	str	r3, [sl, #4]
   1e440:	b	1e0cc <elf32_fsize@plt+0xca14>
   1e444:	mov	r2, #5
   1e448:	movw	r1, #26768	; 0x6890
   1e44c:	movt	r1, #2
   1e450:	bl	113b8 <dcgettext@plt>
   1e454:	mov	r1, r0
   1e458:	mov	r0, #1
   1e45c:	bl	11580 <__printf_chk@plt>
   1e460:	ldr	r3, [r4, #4]
   1e464:	add	r3, r3, #1
   1e468:	str	r3, [r4, #4]
   1e46c:	b	1dc34 <elf32_fsize@plt+0xc57c>
   1e470:	cmp	r6, #0
   1e474:	ldr	r4, [fp, #-252]	; 0xffffff04
   1e478:	bne	1e974 <elf32_fsize@plt+0xd2bc>
   1e47c:	ldrd	r6, [r8, #32]
   1e480:	ldrd	r2, [r8, #40]	; 0x28
   1e484:	str	r4, [sl, #64]	; 0x40
   1e488:	b	1da78 <elf32_fsize@plt+0xc3c0>
   1e48c:	ldrb	r0, [sl, #60]	; 0x3c
   1e490:	movw	r9, #37252	; 0x9184
   1e494:	movt	r9, #3
   1e498:	cmp	r0, #0
   1e49c:	bne	1dfa8 <elf32_fsize@plt+0xc8f0>
   1e4a0:	mov	r2, #5
   1e4a4:	movw	r1, #25444	; 0x6364
   1e4a8:	movt	r1, #2
   1e4ac:	bl	113b8 <dcgettext@plt>
   1e4b0:	mov	r1, r0
   1e4b4:	mov	r0, #1
   1e4b8:	bl	11580 <__printf_chk@plt>
   1e4bc:	ldr	r3, [r9, #4]
   1e4c0:	ldrd	r6, [r8, #32]
   1e4c4:	add	r3, r3, #1
   1e4c8:	str	r3, [r9, #4]
   1e4cc:	ldrd	r2, [r8, #40]	; 0x28
   1e4d0:	b	1da78 <elf32_fsize@plt+0xc3c0>
   1e4d4:	mov	r2, #5
   1e4d8:	movw	r1, #25200	; 0x6270
   1e4dc:	mov	r0, #0
   1e4e0:	movt	r1, #2
   1e4e4:	bl	113b8 <dcgettext@plt>
   1e4e8:	mov	r1, r0
   1e4ec:	mov	r0, #1
   1e4f0:	bl	11580 <__printf_chk@plt>
   1e4f4:	ldr	r3, [sl, #4]
   1e4f8:	add	r3, r3, #1
   1e4fc:	str	r3, [sl, #4]
   1e500:	b	1df60 <elf32_fsize@plt+0xc8a8>
   1e504:	mov	r2, #5
   1e508:	mov	r0, r6
   1e50c:	movw	r1, #24988	; 0x619c
   1e510:	movt	r1, #2
   1e514:	bl	113b8 <dcgettext@plt>
   1e518:	mov	r4, r0
   1e51c:	mvn	r0, #0
   1e520:	bl	11520 <elf_errmsg@plt>
   1e524:	mov	r1, r4
   1e528:	mov	r2, r0
   1e52c:	mov	r0, #1
   1e530:	bl	11580 <__printf_chk@plt>
   1e534:	ldr	r3, [r9, #4]
   1e538:	add	r3, r3, #1
   1e53c:	str	r3, [r9, #4]
   1e540:	b	1d908 <elf32_fsize@plt+0xc250>
   1e544:	mov	r2, r8
   1e548:	movw	r1, #24980	; 0x6194
   1e54c:	mov	r0, #1
   1e550:	movt	r1, #2
   1e554:	bl	11580 <__printf_chk@plt>
   1e558:	b	1d988 <elf32_fsize@plt+0xc2d0>
   1e55c:	mov	r2, #5
   1e560:	movw	r1, #25132	; 0x622c
   1e564:	movt	r1, #2
   1e568:	bl	113b8 <dcgettext@plt>
   1e56c:	ldr	r3, [r8]
   1e570:	mov	r2, r4
   1e574:	str	r6, [sp, #4]
   1e578:	str	r3, [sp]
   1e57c:	mov	r1, r0
   1e580:	mov	r0, #1
   1e584:	bl	11580 <__printf_chk@plt>
   1e588:	ldr	r3, [sl, #4]
   1e58c:	ldr	r1, [r8]
   1e590:	add	r3, r3, #1
   1e594:	str	r3, [sl, #4]
   1e598:	b	1db94 <elf32_fsize@plt+0xc4dc>
   1e59c:	movw	r1, #25620	; 0x6414
   1e5a0:	mov	r0, #0
   1e5a4:	movt	r1, #2
   1e5a8:	b	1e300 <elf32_fsize@plt+0xcc48>
   1e5ac:	mov	r2, #5
   1e5b0:	movw	r1, #25348	; 0x6304
   1e5b4:	mov	r0, #0
   1e5b8:	movt	r1, #2
   1e5bc:	bl	113b8 <dcgettext@plt>
   1e5c0:	mov	r6, r0
   1e5c4:	mvn	r0, #0
   1e5c8:	bl	11520 <elf_errmsg@plt>
   1e5cc:	mov	r1, r6
   1e5d0:	mov	r2, r4
   1e5d4:	mov	r3, r0
   1e5d8:	mov	r0, #1
   1e5dc:	bl	11580 <__printf_chk@plt>
   1e5e0:	b	1e1ec <elf32_fsize@plt+0xcb34>
   1e5e4:	ldrb	r3, [r6, #22]
   1e5e8:	mov	ip, r6
   1e5ec:	str	r4, [fp, #-276]	; 0xfffffeec
   1e5f0:	cmp	r3, #0
   1e5f4:	ldr	r4, [fp, #-252]	; 0xffffff04
   1e5f8:	beq	1e7e8 <elf32_fsize@plt+0xd130>
   1e5fc:	ldr	ip, [r8, #4]
   1e600:	ands	r0, ip, #4
   1e604:	beq	1e6bc <elf32_fsize@plt+0xd004>
   1e608:	ldr	r7, [fp, #-276]	; 0xfffffeec
   1e60c:	mov	r0, #2
   1e610:	mov	r1, #0
   1e614:	ldrd	r2, [r7, #8]
   1e618:	and	r2, r2, r0
   1e61c:	and	r3, r3, r1
   1e620:	orrs	lr, r2, r3
   1e624:	beq	1e750 <elf32_fsize@plt+0xd098>
   1e628:	ands	lr, ip, #2
   1e62c:	bne	1e71c <elf32_fsize@plt+0xd064>
   1e630:	ldr	r6, [fp, #-276]	; 0xfffffeec
   1e634:	mov	r0, #1
   1e638:	mov	r1, #0
   1e63c:	ldrd	r2, [r6, #8]
   1e640:	and	r2, r2, r0
   1e644:	and	r3, r3, r1
   1e648:	orrs	r7, r2, r3
   1e64c:	bne	1e79c <elf32_fsize@plt+0xd0e4>
   1e650:	ands	r0, ip, #1
   1e654:	bne	1e6ec <elf32_fsize@plt+0xd034>
   1e658:	ldr	ip, [fp, #-276]	; 0xfffffeec
   1e65c:	mov	r2, #4
   1e660:	mov	r3, #0
   1e664:	ldrd	r6, [ip, #8]
   1e668:	and	r2, r2, r6
   1e66c:	and	r3, r3, r7
   1e670:	orrs	lr, r2, r3
   1e674:	beq	1e47c <elf32_fsize@plt+0xcdc4>
   1e678:	mov	r2, #5
   1e67c:	movw	r1, #26424	; 0x6738
   1e680:	movt	r1, #2
   1e684:	bl	113b8 <dcgettext@plt>
   1e688:	mov	r6, r0
   1e68c:	mov	r0, r9
   1e690:	bl	1161c <elf_ndxscn@plt>
   1e694:	mov	r1, r6
   1e698:	movw	r3, #21064	; 0x5248
   1e69c:	movt	r3, #2
   1e6a0:	mov	r2, r0
   1e6a4:	mov	r0, #1
   1e6a8:	bl	11580 <__printf_chk@plt>
   1e6ac:	ldr	r3, [sl, #4]
   1e6b0:	add	r3, r3, #1
   1e6b4:	str	r3, [sl, #4]
   1e6b8:	b	1e47c <elf32_fsize@plt+0xcdc4>
   1e6bc:	mov	r2, #5
   1e6c0:	movw	r1, #26200	; 0x6658
   1e6c4:	movt	r1, #2
   1e6c8:	bl	113b8 <dcgettext@plt>
   1e6cc:	mov	r1, r0
   1e6d0:	mov	r0, #1
   1e6d4:	bl	11580 <__printf_chk@plt>
   1e6d8:	ldr	r3, [sl, #4]
   1e6dc:	ldr	ip, [r8, #4]
   1e6e0:	add	r3, r3, #1
   1e6e4:	str	r3, [sl, #4]
   1e6e8:	b	1e628 <elf32_fsize@plt+0xcf70>
   1e6ec:	movw	r1, #26376	; 0x6708
   1e6f0:	movt	r1, #2
   1e6f4:	mov	r0, #0
   1e6f8:	mov	r2, #5
   1e6fc:	bl	113b8 <dcgettext@plt>
   1e700:	mov	r1, r0
   1e704:	mov	r0, #1
   1e708:	bl	11580 <__printf_chk@plt>
   1e70c:	ldr	r3, [sl, #4]
   1e710:	add	r3, r3, #1
   1e714:	str	r3, [sl, #4]
   1e718:	b	1e47c <elf32_fsize@plt+0xcdc4>
   1e71c:	mov	r2, #5
   1e720:	movw	r1, #26284	; 0x66ac
   1e724:	mov	r0, #0
   1e728:	movt	r1, #2
   1e72c:	bl	113b8 <dcgettext@plt>
   1e730:	mov	r1, r0
   1e734:	mov	r0, #1
   1e738:	bl	11580 <__printf_chk@plt>
   1e73c:	ldr	r3, [sl, #4]
   1e740:	ldr	ip, [r8, #4]
   1e744:	add	r3, r3, #1
   1e748:	str	r3, [sl, #4]
   1e74c:	b	1e650 <elf32_fsize@plt+0xcf98>
   1e750:	mov	r2, #5
   1e754:	movw	r1, #26244	; 0x6684
   1e758:	mov	r0, #0
   1e75c:	movt	r1, #2
   1e760:	bl	113b8 <dcgettext@plt>
   1e764:	mov	r6, r0
   1e768:	mov	r0, r9
   1e76c:	bl	1161c <elf_ndxscn@plt>
   1e770:	mov	r1, r6
   1e774:	movw	r3, #21064	; 0x5248
   1e778:	movt	r3, #2
   1e77c:	mov	r2, r0
   1e780:	mov	r0, #1
   1e784:	bl	11580 <__printf_chk@plt>
   1e788:	ldr	r3, [sl, #4]
   1e78c:	ldr	ip, [r8, #4]
   1e790:	add	r3, r3, #1
   1e794:	str	r3, [sl, #4]
   1e798:	b	1e628 <elf32_fsize@plt+0xcf70>
   1e79c:	mov	r0, lr
   1e7a0:	mov	r2, #5
   1e7a4:	movw	r1, #26332	; 0x66dc
   1e7a8:	movt	r1, #2
   1e7ac:	bl	113b8 <dcgettext@plt>
   1e7b0:	mov	r6, r0
   1e7b4:	mov	r0, r9
   1e7b8:	bl	1161c <elf_ndxscn@plt>
   1e7bc:	mov	r1, r6
   1e7c0:	movw	r3, #21064	; 0x5248
   1e7c4:	movt	r3, #2
   1e7c8:	mov	r2, r0
   1e7cc:	mov	r0, #1
   1e7d0:	bl	11580 <__printf_chk@plt>
   1e7d4:	ldr	r3, [sl, #4]
   1e7d8:	ldr	ip, [r8, #4]
   1e7dc:	add	r3, r3, #1
   1e7e0:	str	r3, [sl, #4]
   1e7e4:	b	1e650 <elf32_fsize@plt+0xcf98>
   1e7e8:	ldr	r2, [fp, #-276]	; 0xfffffeec
   1e7ec:	sub	r6, fp, #512	; 0x200
   1e7f0:	ldrd	r2, [r2, #24]
   1e7f4:	strd	r2, [r6, #196]	; 0xc4
   1e7f8:	ldrd	r6, [r8, #8]
   1e7fc:	cmp	r7, r3
   1e800:	cmpeq	r6, r2
   1e804:	beq	1e838 <elf32_fsize@plt+0xd180>
   1e808:	mov	r2, #5
   1e80c:	movw	r1, #26000	; 0x6590
   1e810:	movt	r1, #2
   1e814:	str	ip, [fp, #-296]	; 0xfffffed8
   1e818:	bl	113b8 <dcgettext@plt>
   1e81c:	mov	r1, r0
   1e820:	mov	r0, #1
   1e824:	bl	11580 <__printf_chk@plt>
   1e828:	ldr	ip, [fp, #-296]	; 0xfffffed8
   1e82c:	ldr	r3, [ip, #4]
   1e830:	add	r3, r3, #1
   1e834:	str	r3, [ip, #4]
   1e838:	ldr	r6, [fp, #-276]	; 0xfffffeec
   1e83c:	ldrd	r0, [r8, #40]	; 0x28
   1e840:	ldrd	r2, [r6, #32]
   1e844:	cmp	r1, r3
   1e848:	cmpeq	r0, r2
   1e84c:	beq	1e5fc <elf32_fsize@plt+0xcf44>
   1e850:	mov	r2, #5
   1e854:	movw	r1, #26072	; 0x65d8
   1e858:	mov	r0, #0
   1e85c:	movt	r1, #2
   1e860:	bl	113b8 <dcgettext@plt>
   1e864:	mov	r1, r0
   1e868:	mov	r0, #1
   1e86c:	bl	11580 <__printf_chk@plt>
   1e870:	ldr	r3, [sl, #4]
   1e874:	add	r3, r3, #1
   1e878:	str	r3, [sl, #4]
   1e87c:	b	1e5fc <elf32_fsize@plt+0xcf44>
   1e880:	mov	r2, #5
   1e884:	movw	r1, #25792	; 0x64c0
   1e888:	mov	r0, #0
   1e88c:	movt	r1, #2
   1e890:	bl	113b8 <dcgettext@plt>
   1e894:	mov	r3, r4
   1e898:	mov	r2, r9
   1e89c:	mov	r1, r0
   1e8a0:	mov	r0, #1
   1e8a4:	bl	11580 <__printf_chk@plt>
   1e8a8:	ldr	r3, [sl, #4]
   1e8ac:	add	r3, r3, #1
   1e8b0:	str	r3, [sl, #4]
   1e8b4:	b	1df34 <elf32_fsize@plt+0xc87c>
   1e8b8:	ldrd	r2, [r7, #40]	; 0x28
   1e8bc:	sub	r6, fp, #512	; 0x200
   1e8c0:	strd	r2, [r6, #236]	; 0xec
   1e8c4:	ldrd	r6, [r8, #40]	; 0x28
   1e8c8:	adds	r6, r6, r0
   1e8cc:	adc	r7, r7, r1
   1e8d0:	adds	r0, r0, r2
   1e8d4:	adc	r1, r1, r3
   1e8d8:	cmp	r7, r1
   1e8dc:	cmpeq	r6, r0
   1e8e0:	bne	1df28 <elf32_fsize@plt+0xc870>
   1e8e4:	ldr	r3, [r8, #4]
   1e8e8:	eor	r2, lr, r3
   1e8ec:	bics	lr, r2, #2
   1e8f0:	beq	1df34 <elf32_fsize@plt+0xc87c>
   1e8f4:	mov	r2, #5
   1e8f8:	movw	r1, #25728	; 0x6480
   1e8fc:	mov	r0, #0
   1e900:	movt	r1, #2
   1e904:	bl	113b8 <dcgettext@plt>
   1e908:	mov	r3, r9
   1e90c:	mov	r2, r4
   1e910:	mov	r1, r0
   1e914:	mov	r0, #1
   1e918:	bl	11580 <__printf_chk@plt>
   1e91c:	ldr	r3, [sl, #4]
   1e920:	add	r3, r3, #1
   1e924:	str	r3, [sl, #4]
   1e928:	b	1df34 <elf32_fsize@plt+0xc87c>
   1e92c:	mov	r0, lr
   1e930:	mov	r2, #5
   1e934:	movw	r1, #25672	; 0x6448
   1e938:	movt	r1, #2
   1e93c:	str	ip, [fp, #-296]	; 0xfffffed8
   1e940:	bl	113b8 <dcgettext@plt>
   1e944:	ldr	ip, [fp, #-296]	; 0xfffffed8
   1e948:	mov	r1, r0
   1e94c:	mov	r0, ip
   1e950:	bl	11580 <__printf_chk@plt>
   1e954:	ldr	r2, [sl, #4]
   1e958:	ldrd	r0, [r8, #16]
   1e95c:	add	ip, r2, #1
   1e960:	ldrd	r2, [r7, #16]
   1e964:	str	ip, [sl, #4]
   1e968:	ldr	lr, [r7, #4]
   1e96c:	strd	r2, [fp, #-252]	; 0xffffff04
   1e970:	b	1df18 <elf32_fsize@plt+0xc860>
   1e974:	movw	r1, #26144	; 0x6620
   1e978:	mov	r2, #5
   1e97c:	movt	r1, #2
   1e980:	b	1e6fc <elf32_fsize@plt+0xd044>
   1e984:	movw	r0, #26812	; 0x68bc
   1e988:	movw	r1, #10140	; 0x279c
   1e98c:	movt	r0, #2
   1e990:	movt	r1, #2
   1e994:	movw	r2, #275	; 0x113
   1e998:	ldr	r3, [pc, #4]	; 1e9a4 <elf32_fsize@plt+0xd2ec>
   1e99c:	bl	116ac <__assert_fail@plt>
   1e9a0:	bl	113dc <__stack_chk_fail@plt>
   1e9a4:	andeq	r1, r2, r0, ror #16
   1e9a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   1e9ac:	mov	r2, #0
   1e9b0:	ldr	r3, [pc, #456]	; 1eb80 <elf32_fsize@plt+0xd4c8>
   1e9b4:	ldr	fp, [pc, #456]	; 1eb84 <elf32_fsize@plt+0xd4cc>
   1e9b8:	ldr	sl, [pc, #456]	; 1eb88 <elf32_fsize@plt+0xd4d0>
   1e9bc:	add	r3, pc, r3
   1e9c0:	ldr	r9, [pc, #452]	; 1eb8c <elf32_fsize@plt+0xd4d4>
   1e9c4:	add	fp, pc, fp
   1e9c8:	add	sl, pc, sl
   1e9cc:	str	r3, [r0, #20]
   1e9d0:	add	r9, pc, r9
   1e9d4:	str	fp, [r0, #24]
   1e9d8:	str	sl, [r0, #32]
   1e9dc:	str	r9, [r0, #28]
   1e9e0:	ldr	r8, [pc, #424]	; 1eb90 <elf32_fsize@plt+0xd4d8>
   1e9e4:	ldr	r7, [pc, #424]	; 1eb94 <elf32_fsize@plt+0xd4dc>
   1e9e8:	ldr	r6, [pc, #424]	; 1eb98 <elf32_fsize@plt+0xd4e0>
   1e9ec:	add	r8, pc, r8
   1e9f0:	ldr	r5, [pc, #420]	; 1eb9c <elf32_fsize@plt+0xd4e4>
   1e9f4:	add	r7, pc, r7
   1e9f8:	ldr	r4, [pc, #416]	; 1eba0 <elf32_fsize@plt+0xd4e8>
   1e9fc:	add	r6, pc, r6
   1ea00:	ldr	ip, [pc, #412]	; 1eba4 <elf32_fsize@plt+0xd4ec>
   1ea04:	add	r5, pc, r5
   1ea08:	ldr	r1, [pc, #408]	; 1eba8 <elf32_fsize@plt+0xd4f0>
   1ea0c:	add	r4, pc, r4
   1ea10:	ldr	r3, [pc, #404]	; 1ebac <elf32_fsize@plt+0xd4f4>
   1ea14:	add	ip, pc, ip
   1ea18:	ldr	fp, [pc, #400]	; 1ebb0 <elf32_fsize@plt+0xd4f8>
   1ea1c:	add	r1, pc, r1
   1ea20:	ldr	sl, [pc, #396]	; 1ebb4 <elf32_fsize@plt+0xd4fc>
   1ea24:	add	r3, pc, r3
   1ea28:	ldr	r9, [pc, #392]	; 1ebb8 <elf32_fsize@plt+0xd500>
   1ea2c:	add	fp, pc, fp
   1ea30:	add	sl, pc, sl
   1ea34:	str	r8, [r0, #36]	; 0x24
   1ea38:	add	r9, pc, r9
   1ea3c:	str	r7, [r0, #40]	; 0x28
   1ea40:	str	r6, [r0, #44]	; 0x2c
   1ea44:	str	r5, [r0, #48]	; 0x30
   1ea48:	str	r4, [r0, #52]	; 0x34
   1ea4c:	str	ip, [r0, #56]	; 0x38
   1ea50:	str	r1, [r0, #60]	; 0x3c
   1ea54:	str	r3, [r0, #64]	; 0x40
   1ea58:	str	fp, [r0, #68]	; 0x44
   1ea5c:	str	sl, [r0, #72]	; 0x48
   1ea60:	str	r9, [r0, #76]	; 0x4c
   1ea64:	ldr	r8, [pc, #336]	; 1ebbc <elf32_fsize@plt+0xd504>
   1ea68:	ldr	r7, [pc, #336]	; 1ebc0 <elf32_fsize@plt+0xd508>
   1ea6c:	ldr	r6, [pc, #336]	; 1ebc4 <elf32_fsize@plt+0xd50c>
   1ea70:	add	r8, pc, r8
   1ea74:	ldr	r5, [pc, #332]	; 1ebc8 <elf32_fsize@plt+0xd510>
   1ea78:	add	r7, pc, r7
   1ea7c:	ldr	r4, [pc, #328]	; 1ebcc <elf32_fsize@plt+0xd514>
   1ea80:	add	r6, pc, r6
   1ea84:	ldr	ip, [pc, #324]	; 1ebd0 <elf32_fsize@plt+0xd518>
   1ea88:	add	r5, pc, r5
   1ea8c:	ldr	r1, [pc, #320]	; 1ebd4 <elf32_fsize@plt+0xd51c>
   1ea90:	add	r4, pc, r4
   1ea94:	ldr	r3, [pc, #316]	; 1ebd8 <elf32_fsize@plt+0xd520>
   1ea98:	add	ip, pc, ip
   1ea9c:	ldr	fp, [pc, #312]	; 1ebdc <elf32_fsize@plt+0xd524>
   1eaa0:	add	r1, pc, r1
   1eaa4:	ldr	sl, [pc, #308]	; 1ebe0 <elf32_fsize@plt+0xd528>
   1eaa8:	add	r3, pc, r3
   1eaac:	ldr	r9, [pc, #304]	; 1ebe4 <elf32_fsize@plt+0xd52c>
   1eab0:	add	fp, pc, fp
   1eab4:	add	sl, pc, sl
   1eab8:	str	r8, [r0, #80]	; 0x50
   1eabc:	add	r9, pc, r9
   1eac0:	str	r7, [r0, #84]	; 0x54
   1eac4:	str	r6, [r0, #88]	; 0x58
   1eac8:	str	r5, [r0, #92]	; 0x5c
   1eacc:	str	r4, [r0, #96]	; 0x60
   1ead0:	str	ip, [r0, #112]	; 0x70
   1ead4:	str	r1, [r0, #100]	; 0x64
   1ead8:	str	r3, [r0, #116]	; 0x74
   1eadc:	str	fp, [r0, #120]	; 0x78
   1eae0:	str	sl, [r0, #124]	; 0x7c
   1eae4:	str	r9, [r0, #128]	; 0x80
   1eae8:	ldr	r8, [pc, #248]	; 1ebe8 <elf32_fsize@plt+0xd530>
   1eaec:	ldr	r7, [pc, #248]	; 1ebec <elf32_fsize@plt+0xd534>
   1eaf0:	ldr	r6, [pc, #248]	; 1ebf0 <elf32_fsize@plt+0xd538>
   1eaf4:	add	r8, pc, r8
   1eaf8:	ldr	r5, [pc, #244]	; 1ebf4 <elf32_fsize@plt+0xd53c>
   1eafc:	add	r7, pc, r7
   1eb00:	ldr	r4, [pc, #240]	; 1ebf8 <elf32_fsize@plt+0xd540>
   1eb04:	add	r6, pc, r6
   1eb08:	ldr	ip, [pc, #236]	; 1ebfc <elf32_fsize@plt+0xd544>
   1eb0c:	add	r5, pc, r5
   1eb10:	ldr	r1, [pc, #232]	; 1ec00 <elf32_fsize@plt+0xd548>
   1eb14:	add	r4, pc, r4
   1eb18:	ldr	r3, [pc, #228]	; 1ec04 <elf32_fsize@plt+0xd54c>
   1eb1c:	add	ip, pc, ip
   1eb20:	ldr	fp, [pc, #224]	; 1ec08 <elf32_fsize@plt+0xd550>
   1eb24:	add	r1, pc, r1
   1eb28:	ldr	sl, [pc, #220]	; 1ec0c <elf32_fsize@plt+0xd554>
   1eb2c:	add	r3, pc, r3
   1eb30:	ldr	r9, [pc, #216]	; 1ec10 <elf32_fsize@plt+0xd558>
   1eb34:	add	fp, pc, fp
   1eb38:	add	sl, pc, sl
   1eb3c:	str	r8, [r0, #132]	; 0x84
   1eb40:	add	r9, pc, r9
   1eb44:	str	r7, [r0, #136]	; 0x88
   1eb48:	str	r6, [r0, #140]	; 0x8c
   1eb4c:	str	r5, [r0, #144]	; 0x90
   1eb50:	str	r4, [r0, #148]	; 0x94
   1eb54:	str	ip, [r0, #152]	; 0x98
   1eb58:	str	r1, [r0, #156]	; 0x9c
   1eb5c:	str	r3, [r0, #104]	; 0x68
   1eb60:	mov	r3, #4
   1eb64:	str	fp, [r0, #108]	; 0x6c
   1eb68:	str	sl, [r0, #164]	; 0xa4
   1eb6c:	str	r9, [r0, #188]	; 0xbc
   1eb70:	str	r2, [r0, #160]	; 0xa0
   1eb74:	str	r3, [r0, #192]	; 0xc0
   1eb78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1eb7c:	bx	lr
   1eb80:	andeq	r0, r0, r0, asr r2
   1eb84:	andeq	r0, r0, r0, asr r2
   1eb88:	andeq	r0, r0, r4, asr r2
   1eb8c:	andeq	r0, r0, r4, asr r2
   1eb90:	andeq	r0, r0, r0, asr #4
   1eb94:	andeq	r0, r0, r0, asr #4
   1eb98:	andeq	r0, r0, r0, asr #4
   1eb9c:	andeq	r0, r0, r0, asr #4
   1eba0:	andeq	r0, r0, r0, asr #4
   1eba4:	andeq	r0, r0, r0, asr #4
   1eba8:	andeq	r0, r0, r4, asr #4
   1ebac:	andeq	r0, r0, ip, asr #4
   1ebb0:	andeq	r0, r0, ip, asr #4
   1ebb4:	andeq	r0, r0, r0, asr r2
   1ebb8:	andeq	r0, r0, r0, asr r2
   1ebbc:	andeq	r0, r0, r0, lsr #4
   1ebc0:	andeq	r0, r0, r4, lsr #4
   1ebc4:	andeq	r0, r0, r4, lsr #4
   1ebc8:	andeq	r0, r0, r4, lsr r2
   1ebcc:	andeq	r0, r0, r4, lsr #4
   1ebd0:	andeq	r0, r0, r4, lsl r2
   1ebd4:	andeq	r0, r0, r4, lsr #4
   1ebd8:	andeq	r0, r0, ip, lsr r3
   1ebdc:	andeq	r0, r0, ip, lsl r2
   1ebe0:	andeq	r0, r0, r8, lsl r2
   1ebe4:	andeq	r0, r0, r0, lsl r2
   1ebe8:	andeq	r0, r0, r0, ror #3
   1ebec:	andeq	r0, r0, r0, ror #3
   1ebf0:	andeq	r0, r0, r0, ror #3
   1ebf4:	andeq	r0, r0, r0, ror #3
   1ebf8:	andeq	r0, r0, r0, ror #3
   1ebfc:	andeq	r0, r0, r8, asr #4
   1ec00:	ldrdeq	r0, [r0], -r8
   1ec04:	andeq	r0, r0, ip, lsl #4
   1ec08:	andeq	r0, r0, r0, lsr #4
   1ec0c:	andeq	r0, r0, r4, lsr #4
   1ec10:	andeq	r0, r0, r8, asr r1
   1ec14:	mov	r0, #0
   1ec18:	bx	lr
   1ec1c:	mov	r0, #0
   1ec20:	bx	lr
   1ec24:	mov	r0, #0
   1ec28:	bx	lr
   1ec2c:	mov	r0, #27
   1ec30:	bx	lr
   1ec34:	mov	r0, #0
   1ec38:	bx	lr
   1ec3c:	mov	r0, #0
   1ec40:	bx	lr
   1ec44:	mov	r0, #0
   1ec48:	bx	lr
   1ec4c:	mov	r0, #0
   1ec50:	bx	lr
   1ec54:	mov	r0, #0
   1ec58:	bx	lr
   1ec5c:	rsbs	r0, r0, #1
   1ec60:	movcc	r0, #0
   1ec64:	bx	lr
   1ec68:	orrs	r1, r0, r1
   1ec6c:	movne	r0, #0
   1ec70:	moveq	r0, #1
   1ec74:	bx	lr
   1ec78:	mov	r0, #0
   1ec7c:	bx	lr
   1ec80:	mov	r0, #0
   1ec84:	bx	lr
   1ec88:	mov	r0, #0
   1ec8c:	bx	lr
   1ec90:	mov	r0, #0
   1ec94:	bx	lr
   1ec98:	mov	r0, #0
   1ec9c:	bx	lr
   1eca0:	bx	lr
   1eca4:	mov	r0, #0
   1eca8:	bx	lr
   1ecac:	mov	r0, #0
   1ecb0:	bx	lr
   1ecb4:	mov	r0, #0
   1ecb8:	bx	lr
   1ecbc:	mov	r0, #0
   1ecc0:	bx	lr
   1ecc4:	mov	r0, #0
   1ecc8:	bx	lr
   1eccc:	mov	r0, #0
   1ecd0:	bx	lr
   1ecd4:	mov	r0, #0
   1ecd8:	bx	lr
   1ecdc:	mov	r0, #0
   1ece0:	bx	lr
   1ece4:	mov	r0, #0
   1ece8:	bx	lr
   1ecec:	mov	r0, #0
   1ecf0:	bx	lr
   1ecf4:	mov	r0, #0
   1ecf8:	bx	lr
   1ecfc:	mvn	r0, #1
   1ed00:	bx	lr
   1ed04:	push	{r4}		; (str r4, [sp, #-4]!)
   1ed08:	mvn	ip, #0
   1ed0c:	ldr	r4, [sp, #4]
   1ed10:	mov	r0, ip
   1ed14:	str	ip, [r3]
   1ed18:	str	ip, [r2]
   1ed1c:	str	ip, [r1]
   1ed20:	str	ip, [r4]
   1ed24:	str	ip, [r4, #4]
   1ed28:	str	ip, [r4, #8]
   1ed2c:	str	ip, [r4, #12]
   1ed30:	str	ip, [r4, #16]
   1ed34:	str	ip, [r4, #20]
   1ed38:	pop	{r4}		; (ldr r4, [sp], #4)
   1ed3c:	bx	lr
   1ed40:	ldr	r1, [sp, #8]
   1ed44:	mov	r3, #0
   1ed48:	ldr	r2, [sp, #12]
   1ed4c:	mov	r0, r3
   1ed50:	str	r3, [r1]
   1ed54:	str	r3, [r2]
   1ed58:	bx	lr
   1ed5c:	mov	r0, #0
   1ed60:	bx	lr
   1ed64:	mvn	r0, #0
   1ed68:	bx	lr
   1ed6c:	subs	r0, r2, #0
   1ed70:	push	{r4, r5, r6, r7, r8, r9, sl}
   1ed74:	mov	r7, r1
   1ed78:	ldr	r2, [sp, #28]
   1ed7c:	ldr	r6, [sp, #32]
   1ed80:	ldr	r5, [sp, #36]	; 0x24
   1ed84:	ldr	r4, [sp, #40]	; 0x28
   1ed88:	beq	1edd8 <elf32_fsize@plt+0xd720>
   1ed8c:	ldr	sl, [pc, #76]	; 1ede0 <elf32_fsize@plt+0xd728>
   1ed90:	mvn	ip, #0
   1ed94:	ldr	r9, [pc, #72]	; 1ede4 <elf32_fsize@plt+0xd72c>
   1ed98:	mov	r1, r3
   1ed9c:	ldr	r8, [pc, #68]	; 1ede8 <elf32_fsize@plt+0xd730>
   1eda0:	add	sl, pc, sl
   1eda4:	str	r7, [sp, #32]
   1eda8:	add	r9, pc, r9
   1edac:	str	sl, [r6]
   1edb0:	add	r8, pc, r8
   1edb4:	str	r9, [r2]
   1edb8:	mov	r6, #0
   1edbc:	str	ip, [r5]
   1edc0:	mov	r3, ip
   1edc4:	str	r8, [sp, #28]
   1edc8:	mov	r2, #1
   1edcc:	str	r6, [r4]
   1edd0:	pop	{r4, r5, r6, r7, r8, r9, sl}
   1edd4:	b	11694 <__snprintf_chk@plt>
   1edd8:	pop	{r4, r5, r6, r7, r8, r9, sl}
   1eddc:	bx	lr
   1ede0:	andeq	r7, r0, r0, lsl #30
   1ede4:	muleq	r0, ip, fp
   1ede8:	strdeq	r7, [r0], -r4
   1edec:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1edf0:	add	r8, r0, #2
   1edf4:	ldr	r9, [pc, #112]	; 1ee6c <elf32_fsize@plt+0xd7b4>
   1edf8:	mov	r6, r0
   1edfc:	ldr	r7, [pc, #108]	; 1ee70 <elf32_fsize@plt+0xd7b8>
   1ee00:	add	r9, pc, r9
   1ee04:	sub	r4, r9, #4
   1ee08:	add	r7, pc, r7
   1ee0c:	add	r9, r9, #108	; 0x6c
   1ee10:	ldr	r5, [r4, #4]!
   1ee14:	mov	r0, r6
   1ee18:	mov	r1, r5
   1ee1c:	bl	11358 <strcmp@plt>
   1ee20:	mov	r1, r7
   1ee24:	mov	r2, #7
   1ee28:	cmp	r0, #0
   1ee2c:	mov	r0, r6
   1ee30:	beq	1ee64 <elf32_fsize@plt+0xd7ac>
   1ee34:	bl	11658 <strncmp@plt>
   1ee38:	add	r1, r5, #1
   1ee3c:	cmp	r0, #0
   1ee40:	mov	r0, r8
   1ee44:	bne	1ee54 <elf32_fsize@plt+0xd79c>
   1ee48:	bl	11358 <strcmp@plt>
   1ee4c:	cmp	r0, #0
   1ee50:	beq	1ee64 <elf32_fsize@plt+0xd7ac>
   1ee54:	cmp	r4, r9
   1ee58:	bne	1ee10 <elf32_fsize@plt+0xd758>
   1ee5c:	mov	r0, #0
   1ee60:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1ee64:	mov	r0, #1
   1ee68:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1ee6c:	andeq	r9, r1, r4, lsl #13
   1ee70:	andeq	r7, r0, r4, lsr #29
   1ee74:	ldr	r3, [pc, #860]	; 1f1d8 <elf32_fsize@plt+0xdb20>
   1ee78:	ldr	ip, [pc, #860]	; 1f1dc <elf32_fsize@plt+0xdb24>
   1ee7c:	add	r3, pc, r3
   1ee80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee84:	sub	sp, sp, #148	; 0x94
   1ee88:	ldr	ip, [r3, ip]
   1ee8c:	mov	r6, r0
   1ee90:	mov	r9, r1
   1ee94:	mov	r0, #1
   1ee98:	mov	r1, #232	; 0xe8
   1ee9c:	mov	r7, r2
   1eea0:	ldr	r3, [ip]
   1eea4:	str	ip, [sp, #8]
   1eea8:	str	r3, [sp, #140]	; 0x8c
   1eeac:	bl	1131c <calloc@plt>
   1eeb0:	subs	r5, r0, #0
   1eeb4:	beq	1f088 <elf32_fsize@plt+0xd9d0>
   1eeb8:	ldr	r8, [pc, #800]	; 1f1e0 <elf32_fsize@plt+0xdb28>
   1eebc:	bl	1e9a8 <elf32_fsize@plt+0xd2f0>
   1eec0:	mov	r4, #0
   1eec4:	add	r8, pc, r8
   1eec8:	add	r8, r8, #128	; 0x80
   1eecc:	b	1eef8 <elf32_fsize@plt+0xd840>
   1eed0:	ldr	sl, [r8, #-12]
   1eed4:	mov	r0, r9
   1eed8:	mov	r1, sl
   1eedc:	bl	11358 <strcmp@plt>
   1eee0:	cmp	r0, #0
   1eee4:	beq	1ef28 <elf32_fsize@plt+0xd870>
   1eee8:	add	r4, r4, #1
   1eeec:	add	r8, r8, #28
   1eef0:	cmp	r4, #76	; 0x4c
   1eef4:	beq	1f0fc <elf32_fsize@plt+0xda44>
   1eef8:	cmp	r9, #0
   1eefc:	bne	1eed0 <elf32_fsize@plt+0xd818>
   1ef00:	ldr	r3, [r8]
   1ef04:	cmp	r3, r7
   1ef08:	bne	1eee8 <elf32_fsize@plt+0xd830>
   1ef0c:	lsl	r9, r4, #3
   1ef10:	ldr	r3, [pc, #716]	; 1f1e4 <elf32_fsize@plt+0xdb2c>
   1ef14:	rsb	r2, r4, r9
   1ef18:	add	r3, pc, r3
   1ef1c:	add	r3, r3, r2, lsl #2
   1ef20:	ldr	sl, [r3, #116]	; 0x74
   1ef24:	b	1ef2c <elf32_fsize@plt+0xd874>
   1ef28:	lsl	r9, r4, #3
   1ef2c:	cmp	r6, #0
   1ef30:	str	sl, [r5, #4]
   1ef34:	beq	1f124 <elf32_fsize@plt+0xda6c>
   1ef38:	ldr	r3, [r6, #56]	; 0x38
   1ef3c:	ldrh	r3, [r3, #18]
   1ef40:	str	r3, [r5, #8]
   1ef44:	ldr	r3, [r6, #56]	; 0x38
   1ef48:	ldrb	r3, [r3, #4]
   1ef4c:	strb	r3, [r5, #12]
   1ef50:	ldr	r3, [r6, #56]	; 0x38
   1ef54:	ldrb	r3, [r3, #5]
   1ef58:	strb	r3, [r5, #13]
   1ef5c:	ldr	sl, [pc, #644]	; 1f1e8 <elf32_fsize@plt+0xdb30>
   1ef60:	add	r8, sp, #40	; 0x28
   1ef64:	ldr	ip, [pc, #640]	; 1f1ec <elf32_fsize@plt+0xdb34>
   1ef68:	rsb	fp, r4, r9
   1ef6c:	add	sl, pc, sl
   1ef70:	mov	lr, r8
   1ef74:	add	ip, pc, ip
   1ef78:	ldm	sl!, {r0, r1, r2, r3}
   1ef7c:	add	fp, ip, fp, lsl #2
   1ef80:	str	fp, [sp, #12]
   1ef84:	ldr	fp, [pc, #612]	; 1f1f0 <elf32_fsize@plt+0xdb38>
   1ef88:	stmia	lr!, {r0, r1, r2, r3}
   1ef8c:	add	fp, pc, fp
   1ef90:	ldm	sl!, {r0, r1, r2, r3}
   1ef94:	str	fp, [sp]
   1ef98:	ldr	fp, [sp, #12]
   1ef9c:	ldr	sl, [sl]
   1efa0:	ldr	ip, [fp, #112]	; 0x70
   1efa4:	stmia	lr!, {r0, r1, r2, r3}
   1efa8:	mov	r2, #68	; 0x44
   1efac:	mov	r1, ip
   1efb0:	strb	sl, [lr]
   1efb4:	add	r0, sp, #72	; 0x48
   1efb8:	str	ip, [sp, #4]
   1efbc:	bl	1146c <__stpcpy_chk@plt>
   1efc0:	ldr	fp, [sp]
   1efc4:	mov	r1, #1
   1efc8:	mov	r3, r0
   1efcc:	ldr	r0, [fp]
   1efd0:	str	r0, [r3]
   1efd4:	mov	r0, r8
   1efd8:	bl	11478 <dlopen@plt>
   1efdc:	ldr	ip, [sp, #4]
   1efe0:	subs	sl, r0, #0
   1efe4:	beq	1f14c <elf32_fsize@plt+0xda94>
   1efe8:	ldr	r3, [pc, #516]	; 1f1f4 <elf32_fsize@plt+0xdb3c>
   1efec:	rsb	r4, r4, r9
   1eff0:	add	r3, pc, r3
   1eff4:	add	r4, r3, r4, lsl #2
   1eff8:	ldr	r2, [r4, #124]	; 0x7c
   1effc:	cmp	r2, #16
   1f000:	bgt	1f19c <elf32_fsize@plt+0xdae4>
   1f004:	ldr	r8, [r4, #120]	; 0x78
   1f008:	add	r4, sp, #16
   1f00c:	mov	r3, #22
   1f010:	mov	r0, r4
   1f014:	mov	r1, r8
   1f018:	bl	116a0 <__mempcpy_chk@plt>
   1f01c:	ldr	r2, [pc, #468]	; 1f1f8 <elf32_fsize@plt+0xdb40>
   1f020:	mov	r1, r4
   1f024:	add	r2, pc, r2
   1f028:	mov	r3, r0
   1f02c:	ldr	r0, [r2]
   1f030:	ldrh	r2, [r2, #4]
   1f034:	str	r0, [r3]
   1f038:	mov	r0, sl
   1f03c:	strh	r2, [r3, #4]
   1f040:	bl	1167c <dlsym@plt>
   1f044:	subs	ip, r0, #0
   1f048:	beq	1f068 <elf32_fsize@plt+0xd9b0>
   1f04c:	mov	r1, r7
   1f050:	mov	r0, r6
   1f054:	mov	r2, r5
   1f058:	mov	r3, #232	; 0xe8
   1f05c:	blx	ip
   1f060:	subs	r1, r0, #0
   1f064:	bne	1f0a8 <elf32_fsize@plt+0xd9f0>
   1f068:	mov	r0, sl
   1f06c:	bl	113e8 <dlclose@plt>
   1f070:	mov	r3, #0
   1f074:	str	r6, [r5, #16]
   1f078:	str	r8, [r5]
   1f07c:	mov	r0, r5
   1f080:	str	r3, [r5, #228]	; 0xe4
   1f084:	bl	1e9a8 <elf32_fsize@plt+0xd2f0>
   1f088:	ldr	fp, [sp, #8]
   1f08c:	mov	r0, r5
   1f090:	ldr	r2, [sp, #140]	; 0x8c
   1f094:	ldr	r3, [fp]
   1f098:	cmp	r2, r3
   1f09c:	bne	1f198 <elf32_fsize@plt+0xdae0>
   1f0a0:	add	sp, sp, #148	; 0x94
   1f0a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0a8:	ldr	r4, [pc, #332]	; 1f1fc <elf32_fsize@plt+0xdb44>
   1f0ac:	add	r4, pc, r4
   1f0b0:	add	r0, r4, #12
   1f0b4:	bl	11358 <strcmp@plt>
   1f0b8:	cmp	r0, #0
   1f0bc:	bne	1f068 <elf32_fsize@plt+0xd9b0>
   1f0c0:	ldr	r3, [r5]
   1f0c4:	str	sl, [r5, #228]	; 0xe4
   1f0c8:	cmp	r3, #0
   1f0cc:	str	r6, [r5, #16]
   1f0d0:	beq	1f1bc <elf32_fsize@plt+0xdb04>
   1f0d4:	ldr	r3, [r5, #188]	; 0xbc
   1f0d8:	cmp	r3, #0
   1f0dc:	bne	1f088 <elf32_fsize@plt+0xd9d0>
   1f0e0:	ldr	r0, [pc, #280]	; 1f200 <elf32_fsize@plt+0xdb48>
   1f0e4:	mov	r3, r4
   1f0e8:	ldr	r1, [pc, #276]	; 1f204 <elf32_fsize@plt+0xdb4c>
   1f0ec:	movw	r2, #365	; 0x16d
   1f0f0:	add	r0, pc, r0
   1f0f4:	add	r1, pc, r1
   1f0f8:	bl	116ac <__assert_fail@plt>
   1f0fc:	ldr	r3, [pc, #260]	; 1f208 <elf32_fsize@plt+0xdb50>
   1f100:	mov	r2, #0
   1f104:	str	r6, [r5, #16]
   1f108:	mov	r0, r5
   1f10c:	add	r3, pc, r3
   1f110:	str	r2, [r5, #228]	; 0xe4
   1f114:	str	r3, [r5, #4]
   1f118:	str	r3, [r5]
   1f11c:	bl	1e9a8 <elf32_fsize@plt+0xd2f0>
   1f120:	b	1f088 <elf32_fsize@plt+0xd9d0>
   1f124:	ldr	r3, [pc, #224]	; 1f20c <elf32_fsize@plt+0xdb54>
   1f128:	rsb	r2, r4, r9
   1f12c:	add	r3, pc, r3
   1f130:	add	r3, r3, r2, lsl #2
   1f134:	add	r1, r3, #128	; 0x80
   1f138:	ldm	r1, {r1, r2, r3}
   1f13c:	str	r1, [r5, #8]
   1f140:	strb	r2, [r5, #12]
   1f144:	strb	r3, [r5, #13]
   1f148:	b	1ef5c <elf32_fsize@plt+0xd8a4>
   1f14c:	ldr	r3, [pc, #188]	; 1f210 <elf32_fsize@plt+0xdb58>
   1f150:	mov	r2, #93	; 0x5d
   1f154:	add	r3, pc, r3
   1f158:	ldm	r3, {r0, r1}
   1f15c:	stm	r8, {r0, r1}
   1f160:	mov	r1, ip
   1f164:	add	r0, sp, #47	; 0x2f
   1f168:	bl	1146c <__stpcpy_chk@plt>
   1f16c:	mov	r1, #1
   1f170:	mov	r3, r0
   1f174:	ldr	r0, [fp]
   1f178:	str	r0, [r3]
   1f17c:	mov	r0, r8
   1f180:	bl	11478 <dlopen@plt>
   1f184:	subs	sl, r0, #0
   1f188:	bne	1efe8 <elf32_fsize@plt+0xd930>
   1f18c:	ldr	ip, [sp, #12]
   1f190:	ldr	r8, [ip, #120]	; 0x78
   1f194:	b	1f070 <elf32_fsize@plt+0xd9b8>
   1f198:	bl	113dc <__stack_chk_fail@plt>
   1f19c:	ldr	r0, [pc, #112]	; 1f214 <elf32_fsize@plt+0xdb5c>
   1f1a0:	mov	r2, #348	; 0x15c
   1f1a4:	ldr	r1, [pc, #108]	; 1f218 <elf32_fsize@plt+0xdb60>
   1f1a8:	ldr	r3, [pc, #108]	; 1f21c <elf32_fsize@plt+0xdb64>
   1f1ac:	add	r0, pc, r0
   1f1b0:	add	r1, pc, r1
   1f1b4:	add	r3, pc, r3
   1f1b8:	bl	116ac <__assert_fail@plt>
   1f1bc:	ldr	r0, [pc, #92]	; 1f220 <elf32_fsize@plt+0xdb68>
   1f1c0:	mov	r3, r4
   1f1c4:	ldr	r1, [pc, #88]	; 1f224 <elf32_fsize@plt+0xdb6c>
   1f1c8:	mov	r2, #364	; 0x16c
   1f1cc:	add	r0, pc, r0
   1f1d0:	add	r1, pc, r1
   1f1d4:	bl	116ac <__assert_fail@plt>
   1f1d8:	andeq	sl, r1, ip, ror r1
   1f1dc:	andeq	r0, r0, r4, asr #2
   1f1e0:	andeq	r9, r1, r0, asr #11
   1f1e4:	andeq	r9, r1, ip, ror #10
   1f1e8:	andeq	r7, r0, r8, asr #26
   1f1ec:	andeq	r9, r1, r0, lsl r5
   1f1f0:	andeq	r7, r0, ip, asr #26
   1f1f4:	muleq	r1, r4, r4
   1f1f8:	strdeq	r7, [r0], -r4
   1f1fc:			; <UNDEFINED> instruction: 0x00007bb8
   1f200:	andeq	r7, r0, ip, asr #24
   1f204:	andeq	r7, r0, r0, lsl ip
   1f208:	andeq	r7, r0, r0, asr ip
   1f20c:	andeq	r9, r1, r8, asr r3
   1f210:	andeq	r7, r0, r8, lsl #23
   1f214:	andeq	r7, r0, r8, lsr fp
   1f218:	andeq	r7, r0, r4, asr fp
   1f21c:			; <UNDEFINED> instruction: 0x00007ab0
   1f220:	andeq	r7, r0, r4, asr fp
   1f224:	andeq	r7, r0, r4, lsr fp
   1f228:	ldr	r3, [pc, #96]	; 1f290 <elf32_fsize@plt+0xdbd8>
   1f22c:	ldr	r2, [pc, #96]	; 1f294 <elf32_fsize@plt+0xdbdc>
   1f230:	add	r3, pc, r3
   1f234:	push	{r4, r5, lr}
   1f238:	sub	sp, sp, #76	; 0x4c
   1f23c:	ldr	r4, [r3, r2]
   1f240:	mov	r5, r0
   1f244:	mov	r1, sp
   1f248:	ldr	r3, [r4]
   1f24c:	str	r3, [sp, #68]	; 0x44
   1f250:	bl	11328 <gelf_getehdr@plt>
   1f254:	subs	r3, r0, #0
   1f258:	beq	1f284 <elf32_fsize@plt+0xdbcc>
   1f25c:	mov	r0, r5
   1f260:	ldrh	r2, [r3, #18]
   1f264:	mov	r1, #0
   1f268:	bl	1ee74 <elf32_fsize@plt+0xd7bc>
   1f26c:	ldr	r2, [sp, #68]	; 0x44
   1f270:	ldr	r3, [r4]
   1f274:	cmp	r2, r3
   1f278:	bne	1f28c <elf32_fsize@plt+0xdbd4>
   1f27c:	add	sp, sp, #76	; 0x4c
   1f280:	pop	{r4, r5, pc}
   1f284:	mov	r0, r3
   1f288:	b	1f26c <elf32_fsize@plt+0xdbb4>
   1f28c:	bl	113dc <__stack_chk_fail@plt>
   1f290:	andeq	r9, r1, r8, asr #27
   1f294:	andeq	r0, r0, r4, asr #2
   1f298:	mov	r2, r0
   1f29c:	mov	r0, #0
   1f2a0:	mov	r1, r0
   1f2a4:	b	1ee74 <elf32_fsize@plt+0xd7bc>
   1f2a8:	mov	r1, r0
   1f2ac:	mov	r0, #0
   1f2b0:	mov	r2, r0
   1f2b4:	b	1ee74 <elf32_fsize@plt+0xd7bc>
   1f2b8:	push	{r4, lr}
   1f2bc:	subs	r4, r0, #0
   1f2c0:	popeq	{r4, pc}
   1f2c4:	ldr	r3, [r4, #188]	; 0xbc
   1f2c8:	blx	r3
   1f2cc:	ldr	r0, [r4, #228]	; 0xe4
   1f2d0:	cmp	r0, #0
   1f2d4:	beq	1f2dc <elf32_fsize@plt+0xdc24>
   1f2d8:	bl	113e8 <dlclose@plt>
   1f2dc:	mov	r0, r4
   1f2e0:	pop	{r4, lr}
   1f2e4:	b	11370 <free@plt>
   1f2e8:	cmp	r0, #0
   1f2ec:	push	{r3, lr}
   1f2f0:	beq	1f314 <elf32_fsize@plt+0xdc5c>
   1f2f4:	ldr	ip, [r0, #20]
   1f2f8:	mov	r0, r1
   1f2fc:	mov	r1, r2
   1f300:	mov	r2, r3
   1f304:	blx	ip
   1f308:	cmp	r0, #0
   1f30c:	beq	1f314 <elf32_fsize@plt+0xdc5c>
   1f310:	pop	{r3, pc}
   1f314:	ldr	r0, [pc, #4]	; 1f320 <elf32_fsize@plt+0xdc68>
   1f318:	add	r0, pc, r0
   1f31c:	pop	{r3, pc}
   1f320:	andeq	r7, r0, r8, asr #30
   1f324:	cmp	r0, #0
   1f328:	push	{r4, r5, r6, lr}
   1f32c:	mov	r4, r1
   1f330:	sub	sp, sp, #16
   1f334:	mov	r5, r2
   1f338:	mov	r6, r3
   1f33c:	beq	1f364 <elf32_fsize@plt+0xdcac>
   1f340:	ldr	r3, [r0, #40]	; 0x28
   1f344:	mov	r0, r1
   1f348:	mov	r1, r2
   1f34c:	mov	r2, r6
   1f350:	blx	r3
   1f354:	cmp	r0, #0
   1f358:	beq	1f364 <elf32_fsize@plt+0xdcac>
   1f35c:	add	sp, sp, #16
   1f360:	pop	{r4, r5, r6, pc}
   1f364:	cmp	r4, #7
   1f368:	bls	1f3f0 <elf32_fsize@plt+0xdd38>
   1f36c:	movw	r3, #58704	; 0xe550
   1f370:	movt	r3, #25716	; 0x6474
   1f374:	cmp	r4, r3
   1f378:	beq	1f40c <elf32_fsize@plt+0xdd54>
   1f37c:	movw	r3, #58705	; 0xe551
   1f380:	movt	r3, #25716	; 0x6474
   1f384:	cmp	r4, r3
   1f388:	beq	1f418 <elf32_fsize@plt+0xdd60>
   1f38c:	movw	r3, #58706	; 0xe552
   1f390:	movt	r3, #25716	; 0x6474
   1f394:	cmp	r4, r3
   1f398:	beq	1f424 <elf32_fsize@plt+0xdd6c>
   1f39c:	cmn	r4, #-1879048186	; 0x90000006
   1f3a0:	beq	1f474 <elf32_fsize@plt+0xddbc>
   1f3a4:	cmn	r4, #-1879048187	; 0x90000005
   1f3a8:	beq	1f400 <elf32_fsize@plt+0xdd48>
   1f3ac:	add	r3, r4, #-1610612736	; 0xa0000000
   1f3b0:	cmn	r3, #-268435455	; 0xf0000001
   1f3b4:	bls	1f480 <elf32_fsize@plt+0xddc8>
   1f3b8:	cmn	r4, #-1879048191	; 0x90000001
   1f3bc:	ble	1f430 <elf32_fsize@plt+0xdd78>
   1f3c0:	ldr	r3, [pc, #228]	; 1f4ac <elf32_fsize@plt+0xddf4>
   1f3c4:	add	r4, r4, #-1879048192	; 0x90000000
   1f3c8:	mov	r1, r6
   1f3cc:	str	r4, [sp, #4]
   1f3d0:	add	r3, pc, r3
   1f3d4:	mov	r0, r5
   1f3d8:	str	r3, [sp]
   1f3dc:	mov	r2, #1
   1f3e0:	mvn	r3, #0
   1f3e4:	bl	11694 <__snprintf_chk@plt>
   1f3e8:	mov	r0, r5
   1f3ec:	b	1f35c <elf32_fsize@plt+0xdca4>
   1f3f0:	ldr	r3, [pc, #184]	; 1f4b0 <elf32_fsize@plt+0xddf8>
   1f3f4:	add	r3, pc, r3
   1f3f8:	ldr	r0, [r3, r4, lsl #2]
   1f3fc:	b	1f35c <elf32_fsize@plt+0xdca4>
   1f400:	ldr	r0, [pc, #172]	; 1f4b4 <elf32_fsize@plt+0xddfc>
   1f404:	add	r0, pc, r0
   1f408:	b	1f35c <elf32_fsize@plt+0xdca4>
   1f40c:	ldr	r0, [pc, #164]	; 1f4b8 <elf32_fsize@plt+0xde00>
   1f410:	add	r0, pc, r0
   1f414:	b	1f35c <elf32_fsize@plt+0xdca4>
   1f418:	ldr	r0, [pc, #156]	; 1f4bc <elf32_fsize@plt+0xde04>
   1f41c:	add	r0, pc, r0
   1f420:	b	1f35c <elf32_fsize@plt+0xdca4>
   1f424:	ldr	r0, [pc, #148]	; 1f4c0 <elf32_fsize@plt+0xde08>
   1f428:	add	r0, pc, r0
   1f42c:	b	1f35c <elf32_fsize@plt+0xdca4>
   1f430:	ldr	r1, [pc, #140]	; 1f4c4 <elf32_fsize@plt+0xde0c>
   1f434:	mov	r2, #5
   1f438:	mov	r0, #0
   1f43c:	add	r1, pc, r1
   1f440:	bl	113b8 <dcgettext@plt>
   1f444:	ldr	ip, [pc, #124]	; 1f4c8 <elf32_fsize@plt+0xde10>
   1f448:	str	r4, [sp, #8]
   1f44c:	mov	r1, r6
   1f450:	add	ip, pc, ip
   1f454:	mov	r2, #1
   1f458:	mvn	r3, #0
   1f45c:	str	ip, [sp]
   1f460:	str	r0, [sp, #4]
   1f464:	mov	r0, r5
   1f468:	bl	11694 <__snprintf_chk@plt>
   1f46c:	mov	r0, r5
   1f470:	b	1f35c <elf32_fsize@plt+0xdca4>
   1f474:	ldr	r0, [pc, #80]	; 1f4cc <elf32_fsize@plt+0xde14>
   1f478:	add	r0, pc, r0
   1f47c:	b	1f35c <elf32_fsize@plt+0xdca4>
   1f480:	ldr	ip, [pc, #72]	; 1f4d0 <elf32_fsize@plt+0xde18>
   1f484:	mov	r1, r6
   1f488:	str	r3, [sp, #4]
   1f48c:	mov	r0, r5
   1f490:	add	ip, pc, ip
   1f494:	mov	r2, #1
   1f498:	mvn	r3, #0
   1f49c:	str	ip, [sp]
   1f4a0:	bl	11694 <__snprintf_chk@plt>
   1f4a4:	mov	r0, r5
   1f4a8:	b	1f35c <elf32_fsize@plt+0xdca4>
   1f4ac:	ldrdeq	r7, [r0], -r8
   1f4b0:	andeq	r9, r1, r0, asr r9
   1f4b4:	muleq	r0, r0, lr
   1f4b8:	andeq	r7, r0, r0, ror #28
   1f4bc:	andeq	r7, r0, r4, ror #28
   1f4c0:	andeq	r7, r0, ip, lsl #2
   1f4c4:	andeq	r7, r0, r0, lsr #18
   1f4c8:	andeq	r7, r0, r4, ror #28
   1f4cc:	andeq	r7, r0, r4, lsl lr
   1f4d0:	andeq	r7, r0, r0, lsl lr
   1f4d4:	push	{r4, r5, r6, lr}
   1f4d8:	mov	r4, r1
   1f4dc:	mov	r6, r3
   1f4e0:	mov	r1, r2
   1f4e4:	ldr	r3, [r0, #44]	; 0x2c
   1f4e8:	sub	sp, sp, #16
   1f4ec:	mov	r5, r2
   1f4f0:	mov	r0, r4
   1f4f4:	mov	r2, r6
   1f4f8:	blx	r3
   1f4fc:	cmp	r0, #0
   1f500:	beq	1f50c <elf32_fsize@plt+0xde54>
   1f504:	add	sp, sp, #16
   1f508:	pop	{r4, r5, r6, pc}
   1f50c:	cmp	r4, #18
   1f510:	bls	1f540 <elf32_fsize@plt+0xde88>
   1f514:	add	r3, r4, #-1879048186	; 0x90000006
   1f518:	cmp	r3, #5
   1f51c:	bls	1f558 <elf32_fsize@plt+0xdea0>
   1f520:	add	r3, r4, #-1879048181	; 0x9000000b
   1f524:	cmp	r3, #3
   1f528:	addls	pc, pc, r3, lsl #2
   1f52c:	b	1f59c <elf32_fsize@plt+0xdee4>
   1f530:	b	1f584 <elf32_fsize@plt+0xdecc>
   1f534:	b	1f578 <elf32_fsize@plt+0xdec0>
   1f538:	b	1f56c <elf32_fsize@plt+0xdeb4>
   1f53c:	b	1f590 <elf32_fsize@plt+0xded8>
   1f540:	ldr	r3, [pc, #296]	; 1f670 <elf32_fsize@plt+0xdfb8>
   1f544:	add	r3, pc, r3
   1f548:	ldr	r0, [r3, r4, lsl #2]
   1f54c:	cmp	r0, #0
   1f550:	bne	1f504 <elf32_fsize@plt+0xde4c>
   1f554:	b	1f514 <elf32_fsize@plt+0xde5c>
   1f558:	ldr	r2, [pc, #276]	; 1f674 <elf32_fsize@plt+0xdfbc>
   1f55c:	add	r2, pc, r2
   1f560:	add	r3, r2, r3, lsl #2
   1f564:	ldr	r0, [r3, #76]	; 0x4c
   1f568:	b	1f504 <elf32_fsize@plt+0xde4c>
   1f56c:	ldr	r0, [pc, #260]	; 1f678 <elf32_fsize@plt+0xdfc0>
   1f570:	add	r0, pc, r0
   1f574:	b	1f504 <elf32_fsize@plt+0xde4c>
   1f578:	ldr	r0, [pc, #252]	; 1f67c <elf32_fsize@plt+0xdfc4>
   1f57c:	add	r0, pc, r0
   1f580:	b	1f504 <elf32_fsize@plt+0xde4c>
   1f584:	ldr	r0, [pc, #244]	; 1f680 <elf32_fsize@plt+0xdfc8>
   1f588:	add	r0, pc, r0
   1f58c:	b	1f504 <elf32_fsize@plt+0xde4c>
   1f590:	ldr	r0, [pc, #236]	; 1f684 <elf32_fsize@plt+0xdfcc>
   1f594:	add	r0, pc, r0
   1f598:	b	1f504 <elf32_fsize@plt+0xde4c>
   1f59c:	add	r3, r4, #-1610612736	; 0xa0000000
   1f5a0:	cmn	r3, #-268435455	; 0xf0000001
   1f5a4:	bls	1f5f4 <elf32_fsize@plt+0xdf3c>
   1f5a8:	cmn	r4, #-1879048191	; 0x90000001
   1f5ac:	bgt	1f660 <elf32_fsize@plt+0xdfa8>
   1f5b0:	cmn	r4, #1879048193	; 0x70000001
   1f5b4:	movhi	r3, #0
   1f5b8:	movls	r3, #1
   1f5bc:	ands	r0, r3, r4, lsr #31
   1f5c0:	beq	1f620 <elf32_fsize@plt+0xdf68>
   1f5c4:	ldr	r3, [pc, #188]	; 1f688 <elf32_fsize@plt+0xdfd0>
   1f5c8:	add	r4, r4, #-2147483648	; 0x80000000
   1f5cc:	add	r3, pc, r3
   1f5d0:	str	r3, [sp]
   1f5d4:	mov	r1, r6
   1f5d8:	str	r4, [sp, #4]
   1f5dc:	mov	r0, r5
   1f5e0:	mov	r2, #1
   1f5e4:	mvn	r3, #0
   1f5e8:	bl	11694 <__snprintf_chk@plt>
   1f5ec:	mov	r0, r5
   1f5f0:	b	1f504 <elf32_fsize@plt+0xde4c>
   1f5f4:	ldr	ip, [pc, #144]	; 1f68c <elf32_fsize@plt+0xdfd4>
   1f5f8:	mov	r1, r6
   1f5fc:	str	r3, [sp, #4]
   1f600:	mov	r0, r5
   1f604:	add	ip, pc, ip
   1f608:	mov	r2, #1
   1f60c:	mvn	r3, #0
   1f610:	str	ip, [sp]
   1f614:	bl	11694 <__snprintf_chk@plt>
   1f618:	mov	r0, r5
   1f61c:	b	1f504 <elf32_fsize@plt+0xde4c>
   1f620:	ldr	r1, [pc, #104]	; 1f690 <elf32_fsize@plt+0xdfd8>
   1f624:	mov	r2, #5
   1f628:	add	r1, pc, r1
   1f62c:	bl	113b8 <dcgettext@plt>
   1f630:	ldr	ip, [pc, #92]	; 1f694 <elf32_fsize@plt+0xdfdc>
   1f634:	str	r4, [sp, #8]
   1f638:	mov	r1, r6
   1f63c:	add	ip, pc, ip
   1f640:	mov	r2, #1
   1f644:	mvn	r3, #0
   1f648:	str	ip, [sp]
   1f64c:	str	r0, [sp, #4]
   1f650:	mov	r0, r5
   1f654:	bl	11694 <__snprintf_chk@plt>
   1f658:	mov	r0, r5
   1f65c:	b	1f504 <elf32_fsize@plt+0xde4c>
   1f660:	ldr	r3, [pc, #48]	; 1f698 <elf32_fsize@plt+0xdfe0>
   1f664:	add	r4, r4, #-1879048192	; 0x90000000
   1f668:	add	r3, pc, r3
   1f66c:	b	1f5d0 <elf32_fsize@plt+0xdf18>
   1f670:	andeq	r9, r1, r0, lsr #16
   1f674:	andeq	r9, r1, r8, lsl #16
   1f678:	andeq	r7, r0, r8, lsl #27
   1f67c:	andeq	r7, r0, r8, lsl #27
   1f680:	andeq	r7, r0, r8, lsl #27
   1f684:	andeq	r7, r0, r8, asr sp
   1f688:	andeq	r7, r0, r0, ror sp
   1f68c:	andeq	r7, r0, ip, lsl sp
   1f690:	andeq	r7, r0, r4, lsr r7
   1f694:	andeq	r7, r0, r8, ror ip
   1f698:	andeq	r7, r0, r4, asr #25
   1f69c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f6a0:	subs	ip, r1, #0
   1f6a4:	sub	sp, sp, #16
   1f6a8:	mov	r6, r0
   1f6ac:	mov	r8, r2
   1f6b0:	str	r1, [sp, #12]
   1f6b4:	beq	1f75c <elf32_fsize@plt+0xe0a4>
   1f6b8:	cmp	r0, #0
   1f6bc:	add	r5, r2, r3
   1f6c0:	beq	1f724 <elf32_fsize@plt+0xe06c>
   1f6c4:	add	r7, sp, #12
   1f6c8:	mov	r4, r2
   1f6cc:	mov	r9, #44	; 0x2c
   1f6d0:	ldr	r3, [r6, #52]	; 0x34
   1f6d4:	mov	r0, r7
   1f6d8:	blx	r3
   1f6dc:	subs	sl, r0, #0
   1f6e0:	beq	1f78c <elf32_fsize@plt+0xe0d4>
   1f6e4:	bl	11514 <strlen@plt>
   1f6e8:	rsb	r3, r4, r5
   1f6ec:	mov	r1, sl
   1f6f0:	add	r2, r0, #1
   1f6f4:	mov	r0, r4
   1f6f8:	cmp	r2, r3
   1f6fc:	bhi	1f770 <elf32_fsize@plt+0xe0b8>
   1f700:	bl	114f0 <mempcpy@plt>
   1f704:	ldr	r3, [sp, #12]
   1f708:	cmp	r3, #0
   1f70c:	add	r4, r0, #1
   1f710:	beq	1f750 <elf32_fsize@plt+0xe098>
   1f714:	cmp	r5, r4
   1f718:	bls	1f750 <elf32_fsize@plt+0xe098>
   1f71c:	strb	r9, [r0]
   1f720:	b	1f6d0 <elf32_fsize@plt+0xe018>
   1f724:	mov	r3, ip
   1f728:	mov	r4, r8
   1f72c:	ldr	ip, [pc, #96]	; 1f794 <elf32_fsize@plt+0xe0dc>
   1f730:	mov	r0, r4
   1f734:	str	r3, [sp, #4]
   1f738:	rsb	r1, r4, r5
   1f73c:	add	ip, pc, ip
   1f740:	mov	r2, #1
   1f744:	mvn	r3, #0
   1f748:	str	ip, [sp]
   1f74c:	bl	11694 <__snprintf_chk@plt>
   1f750:	mov	r0, r8
   1f754:	add	sp, sp, #16
   1f758:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f75c:	ldr	r8, [pc, #52]	; 1f798 <elf32_fsize@plt+0xe0e0>
   1f760:	add	r8, pc, r8
   1f764:	mov	r0, r8
   1f768:	add	sp, sp, #16
   1f76c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f770:	sub	r2, r3, #1
   1f774:	bl	114f0 <mempcpy@plt>
   1f778:	mov	r3, #0
   1f77c:	strb	r3, [r0]
   1f780:	mov	r0, r8
   1f784:	add	sp, sp, #16
   1f788:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f78c:	ldr	r3, [sp, #12]
   1f790:	b	1f72c <elf32_fsize@plt+0xe074>
   1f794:	andeq	r7, r0, r8, asr #25
   1f798:	andeq	r2, r0, r4, ror #3
   1f79c:	push	{r4, r5, r6, r7, lr}
   1f7a0:	subs	r7, r0, #0
   1f7a4:	sub	sp, sp, #12
   1f7a8:	mov	r4, r1
   1f7ac:	mov	r5, r2
   1f7b0:	mov	r6, r3
   1f7b4:	beq	1f7dc <elf32_fsize@plt+0xe124>
   1f7b8:	mov	r0, r1
   1f7bc:	ldr	r3, [r7, #68]	; 0x44
   1f7c0:	mov	r1, r2
   1f7c4:	mov	r2, r6
   1f7c8:	blx	r3
   1f7cc:	cmp	r0, #0
   1f7d0:	beq	1f7dc <elf32_fsize@plt+0xe124>
   1f7d4:	add	sp, sp, #12
   1f7d8:	pop	{r4, r5, r6, r7, pc}
   1f7dc:	cmp	r4, #6
   1f7e0:	ble	1f838 <elf32_fsize@plt+0xe180>
   1f7e4:	sub	r3, r4, #13
   1f7e8:	ldr	ip, [pc, #188]	; 1f8ac <elf32_fsize@plt+0xe1f4>
   1f7ec:	cmp	r3, #2
   1f7f0:	add	ip, pc, ip
   1f7f4:	bls	1f814 <elf32_fsize@plt+0xe15c>
   1f7f8:	cmp	r4, #10
   1f7fc:	beq	1f880 <elf32_fsize@plt+0xe1c8>
   1f800:	sub	r3, r4, #10
   1f804:	cmp	r3, #2
   1f808:	bhi	1f848 <elf32_fsize@plt+0xe190>
   1f80c:	ldr	ip, [pc, #156]	; 1f8b0 <elf32_fsize@plt+0xe1f8>
   1f810:	add	ip, pc, ip
   1f814:	str	r3, [sp, #4]
   1f818:	mov	r1, r6
   1f81c:	mov	r0, r5
   1f820:	mov	r2, #1
   1f824:	mvn	r3, #0
   1f828:	str	ip, [sp]
   1f82c:	bl	11694 <__snprintf_chk@plt>
   1f830:	mov	r0, r5
   1f834:	b	1f7d4 <elf32_fsize@plt+0xe11c>
   1f838:	ldr	r3, [pc, #116]	; 1f8b4 <elf32_fsize@plt+0xe1fc>
   1f83c:	add	r3, pc, r3
   1f840:	ldr	r0, [r3, r4, lsl #2]
   1f844:	b	1f7d4 <elf32_fsize@plt+0xe11c>
   1f848:	ldr	r1, [pc, #104]	; 1f8b8 <elf32_fsize@plt+0xe200>
   1f84c:	mov	r2, #5
   1f850:	mov	r0, #0
   1f854:	add	r1, pc, r1
   1f858:	bl	113b8 <dcgettext@plt>
   1f85c:	str	r4, [sp, #4]
   1f860:	mov	r1, r6
   1f864:	mov	r2, #1
   1f868:	mvn	r3, #0
   1f86c:	str	r0, [sp]
   1f870:	mov	r0, r5
   1f874:	bl	11694 <__snprintf_chk@plt>
   1f878:	mov	r0, r5
   1f87c:	b	1f7d4 <elf32_fsize@plt+0xe11c>
   1f880:	ldr	r0, [r7, #16]
   1f884:	mov	r1, #0
   1f888:	bl	113a0 <elf_getident@plt>
   1f88c:	cmp	r0, #0
   1f890:	beq	1f800 <elf32_fsize@plt+0xe148>
   1f894:	ldrb	r3, [r0, #7]
   1f898:	cmp	r3, #3
   1f89c:	bne	1f800 <elf32_fsize@plt+0xe148>
   1f8a0:	ldr	r0, [pc, #20]	; 1f8bc <elf32_fsize@plt+0xe204>
   1f8a4:	add	r0, pc, r0
   1f8a8:	b	1f7d4 <elf32_fsize@plt+0xe11c>
   1f8ac:			; <UNDEFINED> instruction: 0x00007ab8
   1f8b0:	muleq	r0, r0, sl
   1f8b4:	andeq	r9, r1, ip, lsl #11
   1f8b8:	andeq	r7, r0, r0, asr #23
   1f8bc:	andeq	r7, r0, r4, ror #22
   1f8c0:	cmp	r0, #0
   1f8c4:	push	{r4, r5, lr}
   1f8c8:	mov	r4, r2
   1f8cc:	sub	sp, sp, #20
   1f8d0:	mov	r5, r3
   1f8d4:	beq	1f900 <elf32_fsize@plt+0xe248>
   1f8d8:	ldr	ip, [r0, #76]	; 0x4c
   1f8dc:	mov	r1, r3
   1f8e0:	mov	r0, r2
   1f8e4:	ldr	r3, [sp, #36]	; 0x24
   1f8e8:	ldr	r2, [sp, #32]
   1f8ec:	blx	ip
   1f8f0:	cmp	r0, #0
   1f8f4:	beq	1f900 <elf32_fsize@plt+0xe248>
   1f8f8:	add	sp, sp, #20
   1f8fc:	pop	{r4, r5, pc}
   1f900:	cmp	r5, #0
   1f904:	cmpeq	r4, #34	; 0x22
   1f908:	bls	1f9dc <elf32_fsize@plt+0xe324>
   1f90c:	mvn	r2, #-1879048177	; 0x9000000f
   1f910:	mov	r3, #0
   1f914:	cmp	r5, r3
   1f918:	cmpeq	r4, r2
   1f91c:	beq	1fa14 <elf32_fsize@plt+0xe35c>
   1f920:	movw	r2, #523	; 0x20b
   1f924:	movt	r2, #36864	; 0x9000
   1f928:	adds	r2, r2, r4
   1f92c:	mvn	r3, #0
   1f930:	adc	r3, r3, r5
   1f934:	cmp	r3, #0
   1f938:	cmpeq	r2, #10
   1f93c:	bls	1fa00 <elf32_fsize@plt+0xe348>
   1f940:	movw	r2, #267	; 0x10b
   1f944:	movt	r2, #36864	; 0x9000
   1f948:	adds	r2, r2, r4
   1f94c:	mvn	r3, #0
   1f950:	adc	r3, r3, r5
   1f954:	cmp	r3, #0
   1f958:	cmpeq	r2, #10
   1f95c:	bls	1f9ec <elf32_fsize@plt+0xe334>
   1f960:	adds	r2, r4, #-1879048185	; 0x90000007
   1f964:	sbc	r3, r5, #0
   1f968:	cmp	r3, #0
   1f96c:	cmpeq	r2, #6
   1f970:	bls	1fa20 <elf32_fsize@plt+0xe368>
   1f974:	mvn	r2, #-2147483646	; 0x80000002
   1f978:	mov	r3, #0
   1f97c:	cmp	r5, r3
   1f980:	cmpeq	r4, r2
   1f984:	beq	1fa34 <elf32_fsize@plt+0xe37c>
   1f988:	mvn	r2, #-2147483648	; 0x80000000
   1f98c:	mov	r3, #0
   1f990:	ldr	r0, [pc, #168]	; 1fa40 <elf32_fsize@plt+0xe388>
   1f994:	cmp	r5, r3
   1f998:	cmpeq	r4, r2
   1f99c:	add	r0, pc, r0
   1f9a0:	beq	1f8f8 <elf32_fsize@plt+0xe240>
   1f9a4:	ldr	r1, [pc, #152]	; 1fa44 <elf32_fsize@plt+0xe38c>
   1f9a8:	mov	r2, #5
   1f9ac:	mov	r0, #0
   1f9b0:	add	r1, pc, r1
   1f9b4:	bl	113b8 <dcgettext@plt>
   1f9b8:	strd	r4, [sp, #8]
   1f9bc:	ldr	r1, [sp, #36]	; 0x24
   1f9c0:	mov	r2, #1
   1f9c4:	mvn	r3, #0
   1f9c8:	str	r0, [sp]
   1f9cc:	ldr	r0, [sp, #32]
   1f9d0:	bl	11694 <__snprintf_chk@plt>
   1f9d4:	ldr	r0, [sp, #32]
   1f9d8:	b	1f8f8 <elf32_fsize@plt+0xe240>
   1f9dc:	ldr	r3, [pc, #100]	; 1fa48 <elf32_fsize@plt+0xe390>
   1f9e0:	add	r3, pc, r3
   1f9e4:	ldr	r0, [r3, r4, lsl #2]
   1f9e8:	b	1f8f8 <elf32_fsize@plt+0xe240>
   1f9ec:	ldr	r3, [pc, #88]	; 1fa4c <elf32_fsize@plt+0xe394>
   1f9f0:	add	r3, pc, r3
   1f9f4:	add	r2, r3, r2, lsl #2
   1f9f8:	ldr	r0, [r2, #184]	; 0xb8
   1f9fc:	b	1f8f8 <elf32_fsize@plt+0xe240>
   1fa00:	ldr	r3, [pc, #72]	; 1fa50 <elf32_fsize@plt+0xe398>
   1fa04:	add	r3, pc, r3
   1fa08:	add	r2, r3, r2, lsl #2
   1fa0c:	ldr	r0, [r2, #140]	; 0x8c
   1fa10:	b	1f8f8 <elf32_fsize@plt+0xe240>
   1fa14:	ldr	r0, [pc, #56]	; 1fa54 <elf32_fsize@plt+0xe39c>
   1fa18:	add	r0, pc, r0
   1fa1c:	b	1f8f8 <elf32_fsize@plt+0xe240>
   1fa20:	ldr	r3, [pc, #48]	; 1fa58 <elf32_fsize@plt+0xe3a0>
   1fa24:	add	r3, pc, r3
   1fa28:	add	r2, r3, r2, lsl #2
   1fa2c:	ldr	r0, [r2, #228]	; 0xe4
   1fa30:	b	1f8f8 <elf32_fsize@plt+0xe240>
   1fa34:	ldr	r0, [pc, #32]	; 1fa5c <elf32_fsize@plt+0xe3a4>
   1fa38:	add	r0, pc, r0
   1fa3c:	b	1f8f8 <elf32_fsize@plt+0xe240>
   1fa40:	andeq	r7, r0, ip, asr #21
   1fa44:	andeq	r7, r0, r0, asr #21
   1fa48:	andeq	r9, r1, r4, lsl #8
   1fa4c:	strdeq	r9, [r1], -r4
   1fa50:	andeq	r9, r1, r0, ror #7
   1fa54:	andeq	r7, r0, ip, lsr sl
   1fa58:	andeq	r9, r1, r0, asr #7
   1fa5c:	andeq	r7, r0, r4, lsr #20
   1fa60:	push	{r4, r5, r6, r7, lr}
   1fa64:	subs	r7, r0, #0
   1fa68:	sub	sp, sp, #12
   1fa6c:	mov	r4, r1
   1fa70:	mov	r5, r2
   1fa74:	mov	r6, r3
   1fa78:	beq	1faa0 <elf32_fsize@plt+0xe3e8>
   1fa7c:	mov	r0, r1
   1fa80:	ldr	r3, [r7, #68]	; 0x44
   1fa84:	mov	r1, r2
   1fa88:	mov	r2, r6
   1fa8c:	blx	r3
   1fa90:	cmp	r0, #0
   1fa94:	beq	1faa0 <elf32_fsize@plt+0xe3e8>
   1fa98:	add	sp, sp, #12
   1fa9c:	pop	{r4, r5, r6, r7, pc}
   1faa0:	cmp	r4, #2
   1faa4:	ble	1fafc <elf32_fsize@plt+0xe444>
   1faa8:	sub	r3, r4, #13
   1faac:	ldr	ip, [pc, #188]	; 1fb70 <elf32_fsize@plt+0xe4b8>
   1fab0:	cmp	r3, #2
   1fab4:	add	ip, pc, ip
   1fab8:	bls	1fad8 <elf32_fsize@plt+0xe420>
   1fabc:	cmp	r4, #10
   1fac0:	beq	1fb44 <elf32_fsize@plt+0xe48c>
   1fac4:	sub	r3, r4, #10
   1fac8:	cmp	r3, #2
   1facc:	bhi	1fb0c <elf32_fsize@plt+0xe454>
   1fad0:	ldr	ip, [pc, #156]	; 1fb74 <elf32_fsize@plt+0xe4bc>
   1fad4:	add	ip, pc, ip
   1fad8:	str	r3, [sp, #4]
   1fadc:	mov	r1, r6
   1fae0:	mov	r0, r5
   1fae4:	mov	r2, #1
   1fae8:	mvn	r3, #0
   1faec:	str	ip, [sp]
   1faf0:	bl	11694 <__snprintf_chk@plt>
   1faf4:	mov	r0, r5
   1faf8:	b	1fa98 <elf32_fsize@plt+0xe3e0>
   1fafc:	ldr	r3, [pc, #116]	; 1fb78 <elf32_fsize@plt+0xe4c0>
   1fb00:	add	r3, pc, r3
   1fb04:	ldr	r0, [r3, r4, lsl #2]
   1fb08:	b	1fa98 <elf32_fsize@plt+0xe3e0>
   1fb0c:	ldr	r1, [pc, #104]	; 1fb7c <elf32_fsize@plt+0xe4c4>
   1fb10:	mov	r2, #5
   1fb14:	mov	r0, #0
   1fb18:	add	r1, pc, r1
   1fb1c:	bl	113b8 <dcgettext@plt>
   1fb20:	str	r4, [sp, #4]
   1fb24:	mov	r1, r6
   1fb28:	mov	r2, #1
   1fb2c:	mvn	r3, #0
   1fb30:	str	r0, [sp]
   1fb34:	mov	r0, r5
   1fb38:	bl	11694 <__snprintf_chk@plt>
   1fb3c:	mov	r0, r5
   1fb40:	b	1fa98 <elf32_fsize@plt+0xe3e0>
   1fb44:	ldr	r0, [r7, #16]
   1fb48:	mov	r1, #0
   1fb4c:	bl	113a0 <elf_getident@plt>
   1fb50:	cmp	r0, #0
   1fb54:	beq	1fac4 <elf32_fsize@plt+0xe40c>
   1fb58:	ldrb	r3, [r0, #7]
   1fb5c:	cmp	r3, #3
   1fb60:	bne	1fac4 <elf32_fsize@plt+0xe40c>
   1fb64:	ldr	r0, [pc, #20]	; 1fb80 <elf32_fsize@plt+0xe4c8>
   1fb68:	add	r0, pc, r0
   1fb6c:	b	1fa98 <elf32_fsize@plt+0xe3e0>
   1fb70:	strdeq	r7, [r0], -r4
   1fb74:	andeq	r7, r0, ip, asr #15
   1fb78:	andeq	r9, r1, r4, ror #7
   1fb7c:	strdeq	r7, [r0], -ip
   1fb80:	andeq	r7, r0, r8, lsr #22
   1fb84:	cmp	r0, #0
   1fb88:	push	{r4, r5, r6, lr}
   1fb8c:	mov	r4, r1
   1fb90:	sub	sp, sp, #16
   1fb94:	mov	r5, r2
   1fb98:	mov	r6, r3
   1fb9c:	beq	1fbc4 <elf32_fsize@plt+0xe50c>
   1fba0:	ldr	r3, [r0, #84]	; 0x54
   1fba4:	mov	r0, r1
   1fba8:	mov	r1, r2
   1fbac:	mov	r2, r6
   1fbb0:	blx	r3
   1fbb4:	cmp	r0, #0
   1fbb8:	beq	1fbc4 <elf32_fsize@plt+0xe50c>
   1fbbc:	add	sp, sp, #16
   1fbc0:	pop	{r4, r5, r6, pc}
   1fbc4:	cmp	r4, #0
   1fbc8:	beq	1fc70 <elf32_fsize@plt+0xe5b8>
   1fbcc:	cmp	r4, #1
   1fbd0:	beq	1fc8c <elf32_fsize@plt+0xe5d4>
   1fbd4:	cmp	r4, #2
   1fbd8:	beq	1fc98 <elf32_fsize@plt+0xe5e0>
   1fbdc:	cmp	r4, #3
   1fbe0:	beq	1fca4 <elf32_fsize@plt+0xe5ec>
   1fbe4:	cmp	r4, #6
   1fbe8:	beq	1fcb0 <elf32_fsize@plt+0xe5f8>
   1fbec:	cmp	r4, #7
   1fbf0:	beq	1fc80 <elf32_fsize@plt+0xe5c8>
   1fbf4:	cmp	r4, #8
   1fbf8:	beq	1fcbc <elf32_fsize@plt+0xe604>
   1fbfc:	cmp	r4, #9
   1fc00:	beq	1fcc8 <elf32_fsize@plt+0xe610>
   1fc04:	cmp	r4, #10
   1fc08:	beq	1fcd4 <elf32_fsize@plt+0xe61c>
   1fc0c:	cmp	r4, #11
   1fc10:	beq	1fce0 <elf32_fsize@plt+0xe628>
   1fc14:	cmp	r4, #12
   1fc18:	beq	1fcec <elf32_fsize@plt+0xe634>
   1fc1c:	cmp	r4, #97	; 0x61
   1fc20:	beq	1fcf8 <elf32_fsize@plt+0xe640>
   1fc24:	cmp	r4, #255	; 0xff
   1fc28:	mov	r0, #0
   1fc2c:	beq	1fd04 <elf32_fsize@plt+0xe64c>
   1fc30:	ldr	r1, [pc, #228]	; 1fd1c <elf32_fsize@plt+0xe664>
   1fc34:	mov	r2, #5
   1fc38:	add	r1, pc, r1
   1fc3c:	bl	113b8 <dcgettext@plt>
   1fc40:	ldr	ip, [pc, #216]	; 1fd20 <elf32_fsize@plt+0xe668>
   1fc44:	str	r4, [sp, #8]
   1fc48:	mov	r1, r6
   1fc4c:	add	ip, pc, ip
   1fc50:	mov	r2, #1
   1fc54:	mvn	r3, #0
   1fc58:	str	ip, [sp]
   1fc5c:	str	r0, [sp, #4]
   1fc60:	mov	r0, r5
   1fc64:	bl	11694 <__snprintf_chk@plt>
   1fc68:	mov	r0, r5
   1fc6c:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fc70:	ldr	r0, [pc, #172]	; 1fd24 <elf32_fsize@plt+0xe66c>
   1fc74:	add	r0, pc, r0
   1fc78:	add	sp, sp, #16
   1fc7c:	pop	{r4, r5, r6, pc}
   1fc80:	ldr	r0, [pc, #160]	; 1fd28 <elf32_fsize@plt+0xe670>
   1fc84:	add	r0, pc, r0
   1fc88:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fc8c:	ldr	r0, [pc, #152]	; 1fd2c <elf32_fsize@plt+0xe674>
   1fc90:	add	r0, pc, r0
   1fc94:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fc98:	ldr	r0, [pc, #144]	; 1fd30 <elf32_fsize@plt+0xe678>
   1fc9c:	add	r0, pc, r0
   1fca0:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fca4:	ldr	r0, [pc, #136]	; 1fd34 <elf32_fsize@plt+0xe67c>
   1fca8:	add	r0, pc, r0
   1fcac:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fcb0:	ldr	r0, [pc, #128]	; 1fd38 <elf32_fsize@plt+0xe680>
   1fcb4:	add	r0, pc, r0
   1fcb8:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fcbc:	ldr	r0, [pc, #120]	; 1fd3c <elf32_fsize@plt+0xe684>
   1fcc0:	add	r0, pc, r0
   1fcc4:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fcc8:	ldr	r0, [pc, #112]	; 1fd40 <elf32_fsize@plt+0xe688>
   1fccc:	add	r0, pc, r0
   1fcd0:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fcd4:	ldr	r0, [pc, #104]	; 1fd44 <elf32_fsize@plt+0xe68c>
   1fcd8:	add	r0, pc, r0
   1fcdc:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fce0:	ldr	r0, [pc, #96]	; 1fd48 <elf32_fsize@plt+0xe690>
   1fce4:	add	r0, pc, r0
   1fce8:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fcec:	ldr	r0, [pc, #88]	; 1fd4c <elf32_fsize@plt+0xe694>
   1fcf0:	add	r0, pc, r0
   1fcf4:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fcf8:	ldr	r0, [pc, #80]	; 1fd50 <elf32_fsize@plt+0xe698>
   1fcfc:	add	r0, pc, r0
   1fd00:	b	1fbbc <elf32_fsize@plt+0xe504>
   1fd04:	ldr	r1, [pc, #72]	; 1fd54 <elf32_fsize@plt+0xe69c>
   1fd08:	mov	r2, #5
   1fd0c:	add	r1, pc, r1
   1fd10:	add	sp, sp, #16
   1fd14:	pop	{r4, r5, r6, lr}
   1fd18:	b	113b8 <dcgettext@plt>
   1fd1c:	andeq	r7, r0, r4, lsr #2
   1fd20:	andeq	r7, r0, r8, ror #12
   1fd24:	andeq	r7, r0, r0, asr #20
   1fd28:	andeq	r7, r0, r8, asr sl
   1fd2c:	andeq	r7, r0, r4, lsr sl
   1fd30:	andeq	r7, r0, r0, lsr sl
   1fd34:	andeq	r2, r0, r0, lsr r1
   1fd38:	andeq	r7, r0, r0, lsr #20
   1fd3c:	andeq	r7, r0, r0, lsr #20
   1fd40:	andeq	r7, r0, ip, lsl sl
   1fd44:	andeq	r7, r0, r8, lsl sl
   1fd48:	andeq	r7, r0, r4, lsl sl
   1fd4c:	andeq	r7, r0, r0, lsl sl
   1fd50:	andeq	r7, r0, ip, lsl #20
   1fd54:	andeq	r7, r0, r0, lsl #20
   1fd58:	cmp	r0, #0
   1fd5c:	push	{r3, lr}
   1fd60:	beq	1fd74 <elf32_fsize@plt+0xe6bc>
   1fd64:	ldr	r3, [r0, #56]	; 0x38
   1fd68:	mov	r0, r1
   1fd6c:	blx	r3
   1fd70:	pop	{r3, pc}
   1fd74:	rsbs	r0, r1, #1
   1fd78:	movcc	r0, #0
   1fd7c:	pop	{r3, pc}
   1fd80:	cmp	r0, #0
   1fd84:	push	{r3, lr}
   1fd88:	beq	1fda0 <elf32_fsize@plt+0xe6e8>
   1fd8c:	ldr	ip, [r0, #60]	; 0x3c
   1fd90:	mov	r1, r3
   1fd94:	mov	r0, r2
   1fd98:	blx	ip
   1fd9c:	pop	{r3, pc}
   1fda0:	orrs	r3, r2, r3
   1fda4:	movne	r0, #0
   1fda8:	moveq	r0, #1
   1fdac:	pop	{r3, pc}
   1fdb0:	cmp	r0, #0
   1fdb4:	push	{r3, lr}
   1fdb8:	popeq	{r3, pc}
   1fdbc:	ldr	r3, [r0, #24]
   1fdc0:	mov	r0, r1
   1fdc4:	blx	r3
   1fdc8:	pop	{r3, pc}
   1fdcc:	cmp	r0, #0
   1fdd0:	push	{r3, lr}
   1fdd4:	popeq	{r3, pc}
   1fdd8:	ldr	r3, [r0, #32]
   1fddc:	ldr	r0, [r0, #16]
   1fde0:	blx	r3
   1fde4:	pop	{r3, pc}
   1fde8:	cmp	r0, #0
   1fdec:	push	{r3, r4, r5, lr}
   1fdf0:	mov	r4, r2
   1fdf4:	mov	r5, r3
   1fdf8:	beq	1fe1c <elf32_fsize@plt+0xe764>
   1fdfc:	ldr	r3, [r0, #80]	; 0x50
   1fe00:	mov	r1, r5
   1fe04:	mov	r0, r2
   1fe08:	blx	r3
   1fe0c:	cmp	r0, #0
   1fe10:	beq	1fe1c <elf32_fsize@plt+0xe764>
   1fe14:	mov	r0, #1
   1fe18:	pop	{r3, r4, r5, pc}
   1fe1c:	cmp	r5, #0
   1fe20:	cmpeq	r4, #34	; 0x22
   1fe24:	movw	r2, #523	; 0x20b
   1fe28:	movt	r2, #36864	; 0x9000
   1fe2c:	mvn	r3, #0
   1fe30:	movhi	r1, #0
   1fe34:	movls	r1, #1
   1fe38:	adds	r2, r2, r4
   1fe3c:	adc	r3, r3, r5
   1fe40:	cmp	r3, #0
   1fe44:	cmpeq	r2, #10
   1fe48:	movhi	r3, r1
   1fe4c:	orrls	r3, r1, #1
   1fe50:	cmp	r3, #0
   1fe54:	bne	1fe14 <elf32_fsize@plt+0xe75c>
   1fe58:	movw	r2, #267	; 0x10b
   1fe5c:	movt	r2, #36864	; 0x9000
   1fe60:	adds	r2, r2, r4
   1fe64:	mvn	r3, #0
   1fe68:	adc	r3, r3, r5
   1fe6c:	cmp	r3, #0
   1fe70:	cmpeq	r2, #10
   1fe74:	bls	1fe14 <elf32_fsize@plt+0xe75c>
   1fe78:	mvn	r2, #-1879048177	; 0x9000000f
   1fe7c:	mov	r3, #0
   1fe80:	cmp	r5, r3
   1fe84:	cmpeq	r4, r2
   1fe88:	beq	1fe14 <elf32_fsize@plt+0xe75c>
   1fe8c:	adds	r2, r4, #-1879048185	; 0x90000007
   1fe90:	sbc	r3, r5, #0
   1fe94:	cmp	r3, #0
   1fe98:	cmpeq	r2, #6
   1fe9c:	bls	1fe14 <elf32_fsize@plt+0xe75c>
   1fea0:	mvn	r0, #2
   1fea4:	mvn	r1, #0
   1fea8:	and	r4, r4, r0
   1feac:	and	r5, r5, r1
   1feb0:	mvn	r2, #-2147483646	; 0x80000002
   1feb4:	mov	r3, #0
   1feb8:	cmp	r5, r3
   1febc:	cmpeq	r4, r2
   1fec0:	movne	r0, #0
   1fec4:	moveq	r0, #1
   1fec8:	pop	{r3, r4, r5, pc}
   1fecc:	cmp	r0, #0
   1fed0:	push	{r3, lr}
   1fed4:	popeq	{r3, pc}
   1fed8:	ldr	r3, [r0, #36]	; 0x24
   1fedc:	ldr	r0, [r0, #16]
   1fee0:	blx	r3
   1fee4:	pop	{r3, pc}
   1fee8:	push	{r3, lr}
   1feec:	ldr	r3, [r0, #120]	; 0x78
   1fef0:	mov	r0, r1
   1fef4:	blx	r3
   1fef8:	pop	{r3, pc}
   1fefc:	cmp	r0, #0
   1ff00:	push	{r3, lr}
   1ff04:	popeq	{r3, pc}
   1ff08:	ldr	ip, [r0, #132]	; 0x84
   1ff0c:	ldr	r0, [r0, #16]
   1ff10:	blx	ip
   1ff14:	pop	{r3, pc}
   1ff18:	cmp	r0, #0
   1ff1c:	push	{r3, lr}
   1ff20:	popeq	{r3, pc}
   1ff24:	ldr	r3, [r0, #144]	; 0x90
   1ff28:	ldr	r0, [r0, #16]
   1ff2c:	blx	r3
   1ff30:	pop	{r3, pc}
   1ff34:	push	{r3, lr}
   1ff38:	ldr	r3, [r0, #124]	; 0x7c
   1ff3c:	mov	r0, r1
   1ff40:	blx	r3
   1ff44:	pop	{r3, pc}
   1ff48:	push	{r3, lr}
   1ff4c:	ldr	r3, [r0, #128]	; 0x80
   1ff50:	mov	r0, r1
   1ff54:	blx	r3
   1ff58:	pop	{r3, pc}
   1ff5c:	ldr	r0, [r0, #192]	; 0xc0
   1ff60:	bx	lr
   1ff64:	push	{r4, r5, r6, r7, r8, lr}
   1ff68:	sub	sp, sp, #16
   1ff6c:	mov	r6, r1
   1ff70:	mov	r8, r2
   1ff74:	ldr	r3, [sp, #52]	; 0x34
   1ff78:	ldrd	r4, [sp, #40]	; 0x28
   1ff7c:	ldr	r7, [sp, #48]	; 0x30
   1ff80:	str	r3, [sp, #12]
   1ff84:	strd	r4, [sp]
   1ff88:	str	r7, [sp, #8]
   1ff8c:	ldr	r3, [r0, #104]	; 0x68
   1ff90:	blx	r3
   1ff94:	cmp	r0, #0
   1ff98:	bne	1ffe0 <elf32_fsize@plt+0xe928>
   1ff9c:	ldrb	r3, [r6]
   1ffa0:	cmp	r3, #103	; 0x67
   1ffa4:	bne	1ffe0 <elf32_fsize@plt+0xe928>
   1ffa8:	ldrb	r3, [r6, #1]
   1ffac:	cmp	r3, #110	; 0x6e
   1ffb0:	bne	1ffe0 <elf32_fsize@plt+0xe928>
   1ffb4:	ldrb	r3, [r6, #2]
   1ffb8:	cmp	r3, #117	; 0x75
   1ffbc:	bne	1ffe0 <elf32_fsize@plt+0xe928>
   1ffc0:	ldrb	r3, [r6, #3]
   1ffc4:	cmp	r3, #0
   1ffc8:	bne	1ffe0 <elf32_fsize@plt+0xe928>
   1ffcc:	cmp	r8, #32
   1ffd0:	ldreq	r3, [pc, #16]	; 1ffe8 <elf32_fsize@plt+0xe930>
   1ffd4:	moveq	r0, #1
   1ffd8:	addeq	r3, pc, r3
   1ffdc:	streq	r3, [r7]
   1ffe0:	add	sp, sp, #16
   1ffe4:	pop	{r4, r5, r6, r7, r8, pc}
   1ffe8:	andeq	r7, r0, r0, asr #14
   1ffec:	subs	ip, r0, #0
   1fff0:	push	{r3, lr}
   1fff4:	beq	20004 <elf32_fsize@plt+0xe94c>
   1fff8:	ldr	ip, [ip, #64]	; 0x40
   1fffc:	blx	ip
   20000:	pop	{r3, pc}
   20004:	mov	r0, ip
   20008:	pop	{r3, pc}
   2000c:	ands	r1, r1, #252	; 0xfc
   20010:	push	{r3, lr}
   20014:	bne	20020 <elf32_fsize@plt+0xe968>
   20018:	mov	r0, #1
   2001c:	pop	{r3, pc}
   20020:	ldr	r3, [r0, #140]	; 0x8c
   20024:	mov	r0, r1
   20028:	blx	r3
   2002c:	pop	{r3, pc}
   20030:	ldr	ip, [r0, #168]	; 0xa8
   20034:	push	{r3, lr}
   20038:	cmp	ip, #0
   2003c:	beq	20054 <elf32_fsize@plt+0xe99c>
   20040:	mov	r0, r1
   20044:	mov	r1, r2
   20048:	mov	r2, r3
   2004c:	blx	ip
   20050:	pop	{r3, pc}
   20054:	ldr	r0, [pc, #24]	; 20074 <elf32_fsize@plt+0xe9bc>
   20058:	mov	r2, #43	; 0x2b
   2005c:	ldr	r1, [pc, #20]	; 20078 <elf32_fsize@plt+0xe9c0>
   20060:	ldr	r3, [pc, #20]	; 2007c <elf32_fsize@plt+0xe9c4>
   20064:	add	r0, pc, r0
   20068:	add	r1, pc, r1
   2006c:	add	r3, pc, r3
   20070:	bl	116ac <__assert_fail@plt>
   20074:	andeq	r7, r0, r4, ror #13
   20078:	andeq	r7, r0, r0, lsl r7
   2007c:			; <UNDEFINED> instruction: 0x000076bc
   20080:	ldr	r0, [r0, #196]	; 0xc4
   20084:	bx	lr
   20088:	cmp	r0, #0
   2008c:	beq	2009c <elf32_fsize@plt+0xe9e4>
   20090:	ldrd	r2, [r0, #208]	; 0xd0
   20094:	orrs	r1, r2, r3
   20098:	bne	200a8 <elf32_fsize@plt+0xe9f0>
   2009c:	mvn	r0, #0
   200a0:	mov	r1, r0
   200a4:	bx	lr
   200a8:	mov	r0, r2
   200ac:	mov	r1, r3
   200b0:	bx	lr
   200b4:	push	{r4, lr}
   200b8:	mov	r4, r1
   200bc:	ldr	r3, [r0, #108]	; 0x6c
   200c0:	blx	r3
   200c4:	cmp	r0, #0
   200c8:	popne	{r4, pc}
   200cc:	sub	r4, r4, #1
   200d0:	cmp	r4, #15
   200d4:	pophi	{r4, pc}
   200d8:	mov	r3, #1
   200dc:	movw	r0, #57537	; 0xe0c1
   200e0:	lsl	r4, r3, r4
   200e4:	and	r0, r4, r0
   200e8:	adds	r0, r0, #0
   200ec:	movne	r0, #1
   200f0:	pop	{r4, pc}
   200f4:	push	{r4, lr}
   200f8:	bl	114cc <malloc@plt>
   200fc:	subs	r4, r0, #0
   20100:	popne	{r4, pc}
   20104:	ldr	r1, [pc, #24]	; 20124 <elf32_fsize@plt+0xea6c>
   20108:	mov	r2, #5
   2010c:	add	r1, pc, r1
   20110:	bl	113b8 <dcgettext@plt>
   20114:	mov	r1, r4
   20118:	mov	r2, r0
   2011c:	mov	r0, #1
   20120:	bl	1149c <error@plt>
   20124:	andeq	r7, r0, ip, ror r6
   20128:	push	{r4, lr}
   2012c:	bl	1131c <calloc@plt>
   20130:	subs	r4, r0, #0
   20134:	popne	{r4, pc}
   20138:	ldr	r1, [pc, #24]	; 20158 <elf32_fsize@plt+0xeaa0>
   2013c:	mov	r2, #5
   20140:	add	r1, pc, r1
   20144:	bl	113b8 <dcgettext@plt>
   20148:	mov	r1, r4
   2014c:	mov	r2, r0
   20150:	mov	r0, #1
   20154:	bl	1149c <error@plt>
   20158:	andeq	r7, r0, r8, asr #12
   2015c:	push	{r4, lr}
   20160:	bl	1140c <realloc@plt>
   20164:	subs	r4, r0, #0
   20168:	popne	{r4, pc}
   2016c:	ldr	r1, [pc, #24]	; 2018c <elf32_fsize@plt+0xead4>
   20170:	mov	r2, #5
   20174:	add	r1, pc, r1
   20178:	bl	113b8 <dcgettext@plt>
   2017c:	mov	r1, r4
   20180:	mov	r2, r0
   20184:	mov	r0, #1
   20188:	bl	1149c <error@plt>
   2018c:	andeq	r7, r0, r4, lsl r6
   20190:	push	{r4, lr}
   20194:	sub	sp, sp, #8
   20198:	ldr	lr, [pc, #104]	; 20208 <elf32_fsize@plt+0xeb50>
   2019c:	mov	r4, r0
   201a0:	ldr	ip, [pc, #100]	; 2020c <elf32_fsize@plt+0xeb54>
   201a4:	ldr	r2, [pc, #100]	; 20210 <elf32_fsize@plt+0xeb58>
   201a8:	add	lr, pc, lr
   201ac:	ldr	r3, [r1, #40]	; 0x28
   201b0:	add	ip, pc, ip
   201b4:	str	lr, [sp]
   201b8:	mov	r1, #1
   201bc:	str	ip, [sp, #4]
   201c0:	add	r2, pc, r2
   201c4:	bl	1158c <__fprintf_chk@plt>
   201c8:	ldr	r1, [pc, #68]	; 20214 <elf32_fsize@plt+0xeb5c>
   201cc:	mov	r2, #5
   201d0:	mov	r0, #0
   201d4:	add	r1, pc, r1
   201d8:	bl	113b8 <dcgettext@plt>
   201dc:	ldr	ip, [pc, #52]	; 20218 <elf32_fsize@plt+0xeb60>
   201e0:	ldr	r3, [pc, #52]	; 2021c <elf32_fsize@plt+0xeb64>
   201e4:	mov	r1, #1
   201e8:	add	ip, pc, ip
   201ec:	str	ip, [sp]
   201f0:	add	r3, pc, r3
   201f4:	mov	r2, r0
   201f8:	mov	r0, r4
   201fc:	bl	1158c <__fprintf_chk@plt>
   20200:	add	sp, sp, #8
   20204:	pop	{r4, pc}
   20208:	muleq	r0, r4, r7
   2020c:	strdeq	r7, [r0], -r8
   20210:	ldrdeq	r7, [r0], -ip
   20214:	ldrdeq	r7, [r0], -ip
   20218:	muleq	r0, r8, r6
   2021c:	andeq	r7, r0, r8, lsl #13
   20220:	subs	r2, r1, #1
   20224:	bxeq	lr
   20228:	bcc	20400 <elf32_fsize@plt+0xed48>
   2022c:	cmp	r0, r1
   20230:	bls	203e4 <elf32_fsize@plt+0xed2c>
   20234:	tst	r1, r2
   20238:	beq	203f0 <elf32_fsize@plt+0xed38>
   2023c:	clz	r3, r0
   20240:	clz	r2, r1
   20244:	sub	r3, r2, r3
   20248:	rsbs	r3, r3, #31
   2024c:	addne	r3, r3, r3, lsl #1
   20250:	mov	r2, #0
   20254:	addne	pc, pc, r3, lsl #2
   20258:	nop	{0}
   2025c:	cmp	r0, r1, lsl #31
   20260:	adc	r2, r2, r2
   20264:	subcs	r0, r0, r1, lsl #31
   20268:	cmp	r0, r1, lsl #30
   2026c:	adc	r2, r2, r2
   20270:	subcs	r0, r0, r1, lsl #30
   20274:	cmp	r0, r1, lsl #29
   20278:	adc	r2, r2, r2
   2027c:	subcs	r0, r0, r1, lsl #29
   20280:	cmp	r0, r1, lsl #28
   20284:	adc	r2, r2, r2
   20288:	subcs	r0, r0, r1, lsl #28
   2028c:	cmp	r0, r1, lsl #27
   20290:	adc	r2, r2, r2
   20294:	subcs	r0, r0, r1, lsl #27
   20298:	cmp	r0, r1, lsl #26
   2029c:	adc	r2, r2, r2
   202a0:	subcs	r0, r0, r1, lsl #26
   202a4:	cmp	r0, r1, lsl #25
   202a8:	adc	r2, r2, r2
   202ac:	subcs	r0, r0, r1, lsl #25
   202b0:	cmp	r0, r1, lsl #24
   202b4:	adc	r2, r2, r2
   202b8:	subcs	r0, r0, r1, lsl #24
   202bc:	cmp	r0, r1, lsl #23
   202c0:	adc	r2, r2, r2
   202c4:	subcs	r0, r0, r1, lsl #23
   202c8:	cmp	r0, r1, lsl #22
   202cc:	adc	r2, r2, r2
   202d0:	subcs	r0, r0, r1, lsl #22
   202d4:	cmp	r0, r1, lsl #21
   202d8:	adc	r2, r2, r2
   202dc:	subcs	r0, r0, r1, lsl #21
   202e0:	cmp	r0, r1, lsl #20
   202e4:	adc	r2, r2, r2
   202e8:	subcs	r0, r0, r1, lsl #20
   202ec:	cmp	r0, r1, lsl #19
   202f0:	adc	r2, r2, r2
   202f4:	subcs	r0, r0, r1, lsl #19
   202f8:	cmp	r0, r1, lsl #18
   202fc:	adc	r2, r2, r2
   20300:	subcs	r0, r0, r1, lsl #18
   20304:	cmp	r0, r1, lsl #17
   20308:	adc	r2, r2, r2
   2030c:	subcs	r0, r0, r1, lsl #17
   20310:	cmp	r0, r1, lsl #16
   20314:	adc	r2, r2, r2
   20318:	subcs	r0, r0, r1, lsl #16
   2031c:	cmp	r0, r1, lsl #15
   20320:	adc	r2, r2, r2
   20324:	subcs	r0, r0, r1, lsl #15
   20328:	cmp	r0, r1, lsl #14
   2032c:	adc	r2, r2, r2
   20330:	subcs	r0, r0, r1, lsl #14
   20334:	cmp	r0, r1, lsl #13
   20338:	adc	r2, r2, r2
   2033c:	subcs	r0, r0, r1, lsl #13
   20340:	cmp	r0, r1, lsl #12
   20344:	adc	r2, r2, r2
   20348:	subcs	r0, r0, r1, lsl #12
   2034c:	cmp	r0, r1, lsl #11
   20350:	adc	r2, r2, r2
   20354:	subcs	r0, r0, r1, lsl #11
   20358:	cmp	r0, r1, lsl #10
   2035c:	adc	r2, r2, r2
   20360:	subcs	r0, r0, r1, lsl #10
   20364:	cmp	r0, r1, lsl #9
   20368:	adc	r2, r2, r2
   2036c:	subcs	r0, r0, r1, lsl #9
   20370:	cmp	r0, r1, lsl #8
   20374:	adc	r2, r2, r2
   20378:	subcs	r0, r0, r1, lsl #8
   2037c:	cmp	r0, r1, lsl #7
   20380:	adc	r2, r2, r2
   20384:	subcs	r0, r0, r1, lsl #7
   20388:	cmp	r0, r1, lsl #6
   2038c:	adc	r2, r2, r2
   20390:	subcs	r0, r0, r1, lsl #6
   20394:	cmp	r0, r1, lsl #5
   20398:	adc	r2, r2, r2
   2039c:	subcs	r0, r0, r1, lsl #5
   203a0:	cmp	r0, r1, lsl #4
   203a4:	adc	r2, r2, r2
   203a8:	subcs	r0, r0, r1, lsl #4
   203ac:	cmp	r0, r1, lsl #3
   203b0:	adc	r2, r2, r2
   203b4:	subcs	r0, r0, r1, lsl #3
   203b8:	cmp	r0, r1, lsl #2
   203bc:	adc	r2, r2, r2
   203c0:	subcs	r0, r0, r1, lsl #2
   203c4:	cmp	r0, r1, lsl #1
   203c8:	adc	r2, r2, r2
   203cc:	subcs	r0, r0, r1, lsl #1
   203d0:	cmp	r0, r1
   203d4:	adc	r2, r2, r2
   203d8:	subcs	r0, r0, r1
   203dc:	mov	r0, r2
   203e0:	bx	lr
   203e4:	moveq	r0, #1
   203e8:	movne	r0, #0
   203ec:	bx	lr
   203f0:	clz	r2, r1
   203f4:	rsb	r2, r2, #31
   203f8:	lsr	r0, r0, r2
   203fc:	bx	lr
   20400:	cmp	r0, #0
   20404:	mvnne	r0, #0
   20408:	b	20468 <elf32_fsize@plt+0xedb0>
   2040c:	cmp	r1, #0
   20410:	beq	20400 <elf32_fsize@plt+0xed48>
   20414:	push	{r0, r1, lr}
   20418:	bl	20220 <elf32_fsize@plt+0xeb68>
   2041c:	pop	{r1, r2, lr}
   20420:	mul	r3, r2, r0
   20424:	sub	r1, r1, r3
   20428:	bx	lr
   2042c:	cmp	r3, #0
   20430:	cmpeq	r2, #0
   20434:	bne	2044c <elf32_fsize@plt+0xed94>
   20438:	cmp	r1, #0
   2043c:	cmpeq	r0, #0
   20440:	mvnne	r1, #0
   20444:	mvnne	r0, #0
   20448:	b	20468 <elf32_fsize@plt+0xedb0>
   2044c:	sub	sp, sp, #8
   20450:	push	{sp, lr}
   20454:	bl	204b4 <elf32_fsize@plt+0xedfc>
   20458:	ldr	lr, [sp, #4]
   2045c:	add	sp, sp, #8
   20460:	pop	{r2, r3}
   20464:	bx	lr
   20468:	push	{r1, lr}
   2046c:	mov	r0, #8
   20470:	bl	11334 <raise@plt>
   20474:	pop	{r1, pc}
   20478:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2047c:	mov	r8, r2
   20480:	mov	r6, r0
   20484:	mov	r7, r1
   20488:	mov	sl, r3
   2048c:	ldr	r9, [sp, #32]
   20490:	bl	204f0 <elf32_fsize@plt+0xee38>
   20494:	umull	r4, r5, r8, r0
   20498:	mul	r8, r8, r1
   2049c:	mla	r2, r0, sl, r8
   204a0:	add	r5, r2, r5
   204a4:	subs	r4, r6, r4
   204a8:	sbc	r5, r7, r5
   204ac:	strd	r4, [r9]
   204b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   204b4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   204b8:	mov	r8, r2
   204bc:	mov	r6, r0
   204c0:	mov	r7, r1
   204c4:	mov	r5, r3
   204c8:	ldr	r9, [sp, #32]
   204cc:	bl	2097c <elf32_fsize@plt+0xf2c4>
   204d0:	mul	r3, r0, r5
   204d4:	umull	r4, r5, r0, r8
   204d8:	mla	r8, r8, r1, r3
   204dc:	add	r5, r8, r5
   204e0:	subs	r4, r6, r4
   204e4:	sbc	r5, r7, r5
   204e8:	strd	r4, [r9]
   204ec:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   204f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204f4:	rsbs	r4, r0, #0
   204f8:	rsc	r5, r1, #0
   204fc:	cmp	r1, #0
   20500:	mvn	r6, #0
   20504:	sub	sp, sp, #12
   20508:	movge	r4, r0
   2050c:	movge	r5, r1
   20510:	movge	r6, #0
   20514:	cmp	r3, #0
   20518:	blt	20750 <elf32_fsize@plt+0xf098>
   2051c:	cmp	r3, #0
   20520:	mov	sl, r4
   20524:	mov	ip, r5
   20528:	mov	r0, r2
   2052c:	mov	r1, r3
   20530:	mov	r8, r2
   20534:	mov	r7, r4
   20538:	mov	r9, r5
   2053c:	bne	20634 <elf32_fsize@plt+0xef7c>
   20540:	cmp	r2, r5
   20544:	bls	20670 <elf32_fsize@plt+0xefb8>
   20548:	clz	r3, r2
   2054c:	cmp	r3, #0
   20550:	rsbne	r2, r3, #32
   20554:	lslne	r8, r0, r3
   20558:	lsrne	r2, r4, r2
   2055c:	lslne	r7, r4, r3
   20560:	orrne	r9, r2, r5, lsl r3
   20564:	lsr	r4, r8, #16
   20568:	uxth	sl, r8
   2056c:	mov	r1, r4
   20570:	mov	r0, r9
   20574:	bl	20220 <elf32_fsize@plt+0xeb68>
   20578:	mov	r1, r4
   2057c:	mov	fp, r0
   20580:	mov	r0, r9
   20584:	bl	2040c <elf32_fsize@plt+0xed54>
   20588:	mul	r0, sl, fp
   2058c:	lsr	r2, r7, #16
   20590:	orr	r1, r2, r1, lsl #16
   20594:	cmp	r0, r1
   20598:	bls	205bc <elf32_fsize@plt+0xef04>
   2059c:	adds	r1, r1, r8
   205a0:	sub	r3, fp, #1
   205a4:	bcs	205b8 <elf32_fsize@plt+0xef00>
   205a8:	cmp	r0, r1
   205ac:	subhi	fp, fp, #2
   205b0:	addhi	r1, r1, r8
   205b4:	bhi	205bc <elf32_fsize@plt+0xef04>
   205b8:	mov	fp, r3
   205bc:	rsb	r9, r0, r1
   205c0:	mov	r1, r4
   205c4:	uxth	r7, r7
   205c8:	mov	r0, r9
   205cc:	bl	20220 <elf32_fsize@plt+0xeb68>
   205d0:	mov	r1, r4
   205d4:	mov	r5, r0
   205d8:	mov	r0, r9
   205dc:	bl	2040c <elf32_fsize@plt+0xed54>
   205e0:	mul	sl, sl, r5
   205e4:	orr	r1, r7, r1, lsl #16
   205e8:	cmp	sl, r1
   205ec:	bls	2060c <elf32_fsize@plt+0xef54>
   205f0:	adds	r8, r1, r8
   205f4:	sub	r3, r5, #1
   205f8:	bcs	20608 <elf32_fsize@plt+0xef50>
   205fc:	cmp	sl, r8
   20600:	subhi	r5, r5, #2
   20604:	bhi	2060c <elf32_fsize@plt+0xef54>
   20608:	mov	r5, r3
   2060c:	orr	r3, r5, fp, lsl #16
   20610:	mov	r4, #0
   20614:	cmp	r6, #0
   20618:	mov	r0, r3
   2061c:	mov	r1, r4
   20620:	beq	2062c <elf32_fsize@plt+0xef74>
   20624:	rsbs	r0, r0, #0
   20628:	rsc	r1, r1, #0
   2062c:	add	sp, sp, #12
   20630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20634:	cmp	r3, r5
   20638:	movhi	r4, #0
   2063c:	movhi	r3, r4
   20640:	bhi	20614 <elf32_fsize@plt+0xef5c>
   20644:	clz	r5, r1
   20648:	cmp	r5, #0
   2064c:	bne	2083c <elf32_fsize@plt+0xf184>
   20650:	cmp	r1, ip
   20654:	cmpcs	r2, sl
   20658:	movhi	r4, #0
   2065c:	movls	r4, #1
   20660:	movls	r3, #1
   20664:	movls	r4, r5
   20668:	movhi	r3, r4
   2066c:	b	20614 <elf32_fsize@plt+0xef5c>
   20670:	cmp	r2, #0
   20674:	bne	20688 <elf32_fsize@plt+0xefd0>
   20678:	mov	r1, r2
   2067c:	mov	r0, #1
   20680:	bl	20220 <elf32_fsize@plt+0xeb68>
   20684:	mov	r8, r0
   20688:	clz	r3, r8
   2068c:	cmp	r3, #0
   20690:	bne	20760 <elf32_fsize@plt+0xf0a8>
   20694:	rsb	r9, r8, r9
   20698:	lsr	r5, r8, #16
   2069c:	uxth	sl, r8
   206a0:	mov	r4, #1
   206a4:	mov	r1, r5
   206a8:	mov	r0, r9
   206ac:	bl	20220 <elf32_fsize@plt+0xeb68>
   206b0:	mov	r1, r5
   206b4:	mov	fp, r0
   206b8:	mov	r0, r9
   206bc:	bl	2040c <elf32_fsize@plt+0xed54>
   206c0:	mul	r0, sl, fp
   206c4:	lsr	r2, r7, #16
   206c8:	orr	r1, r2, r1, lsl #16
   206cc:	cmp	r0, r1
   206d0:	bls	206f0 <elf32_fsize@plt+0xf038>
   206d4:	adds	r1, r1, r8
   206d8:	sub	r3, fp, #1
   206dc:	bcs	2095c <elf32_fsize@plt+0xf2a4>
   206e0:	cmp	r0, r1
   206e4:	subhi	fp, fp, #2
   206e8:	addhi	r1, r1, r8
   206ec:	bls	2095c <elf32_fsize@plt+0xf2a4>
   206f0:	rsb	r2, r0, r1
   206f4:	mov	r1, r5
   206f8:	str	r2, [sp]
   206fc:	uxth	r7, r7
   20700:	mov	r0, r2
   20704:	bl	20220 <elf32_fsize@plt+0xeb68>
   20708:	ldr	r2, [sp]
   2070c:	mov	r1, r5
   20710:	mov	r9, r0
   20714:	mov	r0, r2
   20718:	bl	2040c <elf32_fsize@plt+0xed54>
   2071c:	mul	sl, sl, r9
   20720:	orr	r1, r7, r1, lsl #16
   20724:	cmp	sl, r1
   20728:	bls	20748 <elf32_fsize@plt+0xf090>
   2072c:	adds	r8, r1, r8
   20730:	sub	r3, r9, #1
   20734:	bcs	20744 <elf32_fsize@plt+0xf08c>
   20738:	cmp	sl, r8
   2073c:	subhi	r9, r9, #2
   20740:	bhi	20748 <elf32_fsize@plt+0xf090>
   20744:	mov	r9, r3
   20748:	orr	r3, r9, fp, lsl #16
   2074c:	b	20614 <elf32_fsize@plt+0xef5c>
   20750:	mvn	r6, r6
   20754:	rsbs	r2, r2, #0
   20758:	rsc	r3, r3, #0
   2075c:	b	2051c <elf32_fsize@plt+0xee64>
   20760:	lsl	r8, r8, r3
   20764:	rsb	fp, r3, #32
   20768:	lsr	r4, r9, fp
   2076c:	lsr	fp, r7, fp
   20770:	lsr	r5, r8, #16
   20774:	orr	fp, fp, r9, lsl r3
   20778:	mov	r0, r4
   2077c:	lsl	r7, r7, r3
   20780:	mov	r1, r5
   20784:	uxth	sl, r8
   20788:	bl	20220 <elf32_fsize@plt+0xeb68>
   2078c:	mov	r1, r5
   20790:	mov	r3, r0
   20794:	mov	r0, r4
   20798:	str	r3, [sp]
   2079c:	bl	2040c <elf32_fsize@plt+0xed54>
   207a0:	ldr	r3, [sp]
   207a4:	lsr	r2, fp, #16
   207a8:	mul	r0, sl, r3
   207ac:	orr	r1, r2, r1, lsl #16
   207b0:	cmp	r0, r1
   207b4:	bls	207d4 <elf32_fsize@plt+0xf11c>
   207b8:	adds	r1, r1, r8
   207bc:	sub	r2, r3, #1
   207c0:	bcs	20974 <elf32_fsize@plt+0xf2bc>
   207c4:	cmp	r0, r1
   207c8:	subhi	r3, r3, #2
   207cc:	addhi	r1, r1, r8
   207d0:	bls	20974 <elf32_fsize@plt+0xf2bc>
   207d4:	rsb	r9, r0, r1
   207d8:	mov	r1, r5
   207dc:	str	r3, [sp]
   207e0:	uxth	fp, fp
   207e4:	mov	r0, r9
   207e8:	bl	20220 <elf32_fsize@plt+0xeb68>
   207ec:	mov	r1, r5
   207f0:	mov	r4, r0
   207f4:	mov	r0, r9
   207f8:	bl	2040c <elf32_fsize@plt+0xed54>
   207fc:	mul	r9, sl, r4
   20800:	ldr	r3, [sp]
   20804:	orr	r1, fp, r1, lsl #16
   20808:	cmp	r9, r1
   2080c:	bls	20830 <elf32_fsize@plt+0xf178>
   20810:	adds	r1, r1, r8
   20814:	sub	r2, r4, #1
   20818:	bcs	2082c <elf32_fsize@plt+0xf174>
   2081c:	cmp	r9, r1
   20820:	subhi	r4, r4, #2
   20824:	addhi	r1, r1, r8
   20828:	bhi	20830 <elf32_fsize@plt+0xf178>
   2082c:	mov	r4, r2
   20830:	rsb	r9, r9, r1
   20834:	orr	r4, r4, r3, lsl #16
   20838:	b	206a4 <elf32_fsize@plt+0xefec>
   2083c:	rsb	sl, r5, #32
   20840:	lsl	r3, r2, r5
   20844:	lsr	r0, r2, sl
   20848:	lsr	r2, ip, sl
   2084c:	orr	r4, r0, r1, lsl r5
   20850:	lsr	sl, r7, sl
   20854:	mov	r0, r2
   20858:	orr	sl, sl, ip, lsl r5
   2085c:	lsr	r9, r4, #16
   20860:	str	r3, [sp, #4]
   20864:	str	r2, [sp]
   20868:	uxth	fp, r4
   2086c:	mov	r1, r9
   20870:	bl	20220 <elf32_fsize@plt+0xeb68>
   20874:	ldr	r2, [sp]
   20878:	mov	r1, r9
   2087c:	mov	r8, r0
   20880:	mov	r0, r2
   20884:	bl	2040c <elf32_fsize@plt+0xed54>
   20888:	mul	r0, fp, r8
   2088c:	lsr	r2, sl, #16
   20890:	orr	r1, r2, r1, lsl #16
   20894:	cmp	r0, r1
   20898:	bls	208b8 <elf32_fsize@plt+0xf200>
   2089c:	adds	r1, r1, r4
   208a0:	sub	r2, r8, #1
   208a4:	bcs	2096c <elf32_fsize@plt+0xf2b4>
   208a8:	cmp	r0, r1
   208ac:	subhi	r8, r8, #2
   208b0:	addhi	r1, r1, r4
   208b4:	bls	2096c <elf32_fsize@plt+0xf2b4>
   208b8:	rsb	ip, r0, r1
   208bc:	mov	r1, r9
   208c0:	str	ip, [sp]
   208c4:	mov	r0, ip
   208c8:	bl	20220 <elf32_fsize@plt+0xeb68>
   208cc:	ldr	ip, [sp]
   208d0:	mov	r1, r9
   208d4:	mov	r2, r0
   208d8:	mov	r0, ip
   208dc:	str	r2, [sp]
   208e0:	bl	2040c <elf32_fsize@plt+0xed54>
   208e4:	ldr	r2, [sp]
   208e8:	uxth	ip, sl
   208ec:	mul	fp, fp, r2
   208f0:	orr	ip, ip, r1, lsl #16
   208f4:	cmp	fp, ip
   208f8:	bls	20918 <elf32_fsize@plt+0xf260>
   208fc:	adds	ip, ip, r4
   20900:	sub	r1, r2, #1
   20904:	bcs	20964 <elf32_fsize@plt+0xf2ac>
   20908:	cmp	fp, ip
   2090c:	subhi	r2, r2, #2
   20910:	addhi	ip, ip, r4
   20914:	bls	20964 <elf32_fsize@plt+0xf2ac>
   20918:	ldr	r0, [sp, #4]
   2091c:	orr	r1, r2, r8, lsl #16
   20920:	rsb	fp, fp, ip
   20924:	umull	r2, r3, r1, r0
   20928:	cmp	fp, r3
   2092c:	bcc	20950 <elf32_fsize@plt+0xf298>
   20930:	movne	r4, #0
   20934:	moveq	r4, #1
   20938:	cmp	r2, r7, lsl r5
   2093c:	movls	r4, #0
   20940:	andhi	r4, r4, #1
   20944:	cmp	r4, #0
   20948:	moveq	r3, r1
   2094c:	beq	20614 <elf32_fsize@plt+0xef5c>
   20950:	sub	r3, r1, #1
   20954:	mov	r4, #0
   20958:	b	20614 <elf32_fsize@plt+0xef5c>
   2095c:	mov	fp, r3
   20960:	b	206f0 <elf32_fsize@plt+0xf038>
   20964:	mov	r2, r1
   20968:	b	20918 <elf32_fsize@plt+0xf260>
   2096c:	mov	r8, r2
   20970:	b	208b8 <elf32_fsize@plt+0xf200>
   20974:	mov	r3, r2
   20978:	b	207d4 <elf32_fsize@plt+0xf11c>
   2097c:	cmp	r3, #0
   20980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20984:	mov	r6, r0
   20988:	sub	sp, sp, #12
   2098c:	mov	r5, r1
   20990:	mov	r7, r0
   20994:	mov	r4, r2
   20998:	mov	r8, r1
   2099c:	bne	20a7c <elf32_fsize@plt+0xf3c4>
   209a0:	cmp	r2, r1
   209a4:	bls	20ab8 <elf32_fsize@plt+0xf400>
   209a8:	clz	r3, r2
   209ac:	cmp	r3, #0
   209b0:	rsbne	r8, r3, #32
   209b4:	lslne	r4, r2, r3
   209b8:	lsrne	r8, r0, r8
   209bc:	lslne	r7, r0, r3
   209c0:	orrne	r8, r8, r1, lsl r3
   209c4:	lsr	r5, r4, #16
   209c8:	uxth	sl, r4
   209cc:	mov	r1, r5
   209d0:	mov	r0, r8
   209d4:	bl	20220 <elf32_fsize@plt+0xeb68>
   209d8:	mov	r1, r5
   209dc:	mov	r9, r0
   209e0:	mov	r0, r8
   209e4:	bl	2040c <elf32_fsize@plt+0xed54>
   209e8:	mul	r0, sl, r9
   209ec:	lsr	r3, r7, #16
   209f0:	orr	r1, r3, r1, lsl #16
   209f4:	cmp	r0, r1
   209f8:	bls	20a1c <elf32_fsize@plt+0xf364>
   209fc:	adds	r1, r1, r4
   20a00:	sub	r2, r9, #1
   20a04:	bcs	20a18 <elf32_fsize@plt+0xf360>
   20a08:	cmp	r0, r1
   20a0c:	subhi	r9, r9, #2
   20a10:	addhi	r1, r1, r4
   20a14:	bhi	20a1c <elf32_fsize@plt+0xf364>
   20a18:	mov	r9, r2
   20a1c:	rsb	r8, r0, r1
   20a20:	mov	r1, r5
   20a24:	uxth	r7, r7
   20a28:	mov	r0, r8
   20a2c:	bl	20220 <elf32_fsize@plt+0xeb68>
   20a30:	mov	r1, r5
   20a34:	mov	r6, r0
   20a38:	mov	r0, r8
   20a3c:	bl	2040c <elf32_fsize@plt+0xed54>
   20a40:	mul	sl, sl, r6
   20a44:	orr	r1, r7, r1, lsl #16
   20a48:	cmp	sl, r1
   20a4c:	bls	20a68 <elf32_fsize@plt+0xf3b0>
   20a50:	adds	r4, r1, r4
   20a54:	sub	r3, r6, #1
   20a58:	bcs	20d64 <elf32_fsize@plt+0xf6ac>
   20a5c:	cmp	sl, r4
   20a60:	subhi	r6, r6, #2
   20a64:	bls	20d64 <elf32_fsize@plt+0xf6ac>
   20a68:	orr	r0, r6, r9, lsl #16
   20a6c:	mov	r6, #0
   20a70:	mov	r1, r6
   20a74:	add	sp, sp, #12
   20a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a7c:	cmp	r3, r1
   20a80:	movhi	r6, #0
   20a84:	movhi	r0, r6
   20a88:	bhi	20a70 <elf32_fsize@plt+0xf3b8>
   20a8c:	clz	r7, r3
   20a90:	cmp	r7, #0
   20a94:	bne	20b94 <elf32_fsize@plt+0xf4dc>
   20a98:	cmp	r3, r1
   20a9c:	cmpcs	r2, r6
   20aa0:	movhi	r6, #0
   20aa4:	movls	r6, #1
   20aa8:	movls	r0, #1
   20aac:	movls	r6, r7
   20ab0:	movhi	r0, r6
   20ab4:	b	20a70 <elf32_fsize@plt+0xf3b8>
   20ab8:	cmp	r2, #0
   20abc:	bne	20ad0 <elf32_fsize@plt+0xf418>
   20ac0:	mov	r1, r2
   20ac4:	mov	r0, #1
   20ac8:	bl	20220 <elf32_fsize@plt+0xeb68>
   20acc:	mov	r4, r0
   20ad0:	clz	r3, r4
   20ad4:	cmp	r3, #0
   20ad8:	bne	20c90 <elf32_fsize@plt+0xf5d8>
   20adc:	rsb	r5, r4, r5
   20ae0:	lsr	r8, r4, #16
   20ae4:	uxth	sl, r4
   20ae8:	mov	r6, #1
   20aec:	mov	r1, r8
   20af0:	mov	r0, r5
   20af4:	bl	20220 <elf32_fsize@plt+0xeb68>
   20af8:	mov	r1, r8
   20afc:	mov	r9, r0
   20b00:	mov	r0, r5
   20b04:	bl	2040c <elf32_fsize@plt+0xed54>
   20b08:	mul	r0, sl, r9
   20b0c:	lsr	r3, r7, #16
   20b10:	orr	r1, r3, r1, lsl #16
   20b14:	cmp	r0, r1
   20b18:	bls	20b38 <elf32_fsize@plt+0xf480>
   20b1c:	adds	r1, r1, r4
   20b20:	sub	r2, r9, #1
   20b24:	bcs	20d6c <elf32_fsize@plt+0xf6b4>
   20b28:	cmp	r0, r1
   20b2c:	subhi	r9, r9, #2
   20b30:	addhi	r1, r1, r4
   20b34:	bls	20d6c <elf32_fsize@plt+0xf6b4>
   20b38:	rsb	fp, r0, r1
   20b3c:	mov	r1, r8
   20b40:	uxth	r7, r7
   20b44:	mov	r0, fp
   20b48:	bl	20220 <elf32_fsize@plt+0xeb68>
   20b4c:	mov	r1, r8
   20b50:	mov	r5, r0
   20b54:	mov	r0, fp
   20b58:	bl	2040c <elf32_fsize@plt+0xed54>
   20b5c:	mul	sl, sl, r5
   20b60:	orr	r1, r7, r1, lsl #16
   20b64:	cmp	sl, r1
   20b68:	bls	20b84 <elf32_fsize@plt+0xf4cc>
   20b6c:	adds	r4, r1, r4
   20b70:	sub	r3, r5, #1
   20b74:	bcs	20d74 <elf32_fsize@plt+0xf6bc>
   20b78:	cmp	sl, r4
   20b7c:	subhi	r5, r5, #2
   20b80:	bls	20d74 <elf32_fsize@plt+0xf6bc>
   20b84:	orr	r0, r5, r9, lsl #16
   20b88:	mov	r1, r6
   20b8c:	add	sp, sp, #12
   20b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b94:	rsb	r1, r7, #32
   20b98:	lsl	r0, r2, r7
   20b9c:	lsr	r2, r2, r1
   20ba0:	lsr	fp, r5, r1
   20ba4:	orr	r8, r2, r3, lsl r7
   20ba8:	lsr	r1, r6, r1
   20bac:	str	r0, [sp, #4]
   20bb0:	orr	r5, r1, r5, lsl r7
   20bb4:	lsr	r9, r8, #16
   20bb8:	mov	r0, fp
   20bbc:	uxth	sl, r8
   20bc0:	mov	r1, r9
   20bc4:	bl	20220 <elf32_fsize@plt+0xeb68>
   20bc8:	mov	r1, r9
   20bcc:	mov	r4, r0
   20bd0:	mov	r0, fp
   20bd4:	bl	2040c <elf32_fsize@plt+0xed54>
   20bd8:	mul	r0, sl, r4
   20bdc:	lsr	ip, r5, #16
   20be0:	orr	r1, ip, r1, lsl #16
   20be4:	cmp	r0, r1
   20be8:	bls	20bfc <elf32_fsize@plt+0xf544>
   20bec:	adds	r1, r1, r8
   20bf0:	sub	r2, r4, #1
   20bf4:	bcc	20d90 <elf32_fsize@plt+0xf6d8>
   20bf8:	mov	r4, r2
   20bfc:	rsb	ip, r0, r1
   20c00:	mov	r1, r9
   20c04:	str	ip, [sp]
   20c08:	uxth	r5, r5
   20c0c:	mov	r0, ip
   20c10:	bl	20220 <elf32_fsize@plt+0xeb68>
   20c14:	ldr	ip, [sp]
   20c18:	mov	r1, r9
   20c1c:	mov	fp, r0
   20c20:	mov	r0, ip
   20c24:	bl	2040c <elf32_fsize@plt+0xed54>
   20c28:	mul	sl, sl, fp
   20c2c:	orr	r1, r5, r1, lsl #16
   20c30:	cmp	sl, r1
   20c34:	bls	20c48 <elf32_fsize@plt+0xf590>
   20c38:	adds	r1, r1, r8
   20c3c:	sub	r2, fp, #1
   20c40:	bcc	20d7c <elf32_fsize@plt+0xf6c4>
   20c44:	mov	fp, r2
   20c48:	ldr	r3, [sp, #4]
   20c4c:	orr	r0, fp, r4, lsl #16
   20c50:	rsb	sl, sl, r1
   20c54:	umull	r4, r5, r0, r3
   20c58:	cmp	sl, r5
   20c5c:	bcc	20c7c <elf32_fsize@plt+0xf5c4>
   20c60:	movne	r3, #0
   20c64:	moveq	r3, #1
   20c68:	cmp	r4, r6, lsl r7
   20c6c:	movls	r6, #0
   20c70:	andhi	r6, r3, #1
   20c74:	cmp	r6, #0
   20c78:	beq	20a70 <elf32_fsize@plt+0xf3b8>
   20c7c:	mov	r6, #0
   20c80:	sub	r0, r0, #1
   20c84:	mov	r1, r6
   20c88:	add	sp, sp, #12
   20c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c90:	lsl	r4, r4, r3
   20c94:	rsb	r9, r3, #32
   20c98:	lsr	r2, r5, r9
   20c9c:	lsr	r9, r6, r9
   20ca0:	lsr	r8, r4, #16
   20ca4:	orr	r9, r9, r5, lsl r3
   20ca8:	mov	r0, r2
   20cac:	lsl	r7, r6, r3
   20cb0:	mov	r1, r8
   20cb4:	str	r2, [sp]
   20cb8:	bl	20220 <elf32_fsize@plt+0xeb68>
   20cbc:	ldr	r2, [sp]
   20cc0:	mov	r1, r8
   20cc4:	uxth	sl, r4
   20cc8:	mov	fp, r0
   20ccc:	mov	r0, r2
   20cd0:	bl	2040c <elf32_fsize@plt+0xed54>
   20cd4:	mul	r0, sl, fp
   20cd8:	lsr	r3, r9, #16
   20cdc:	orr	r1, r3, r1, lsl #16
   20ce0:	cmp	r0, r1
   20ce4:	bls	20d04 <elf32_fsize@plt+0xf64c>
   20ce8:	adds	r1, r1, r4
   20cec:	sub	r3, fp, #1
   20cf0:	bcs	20da4 <elf32_fsize@plt+0xf6ec>
   20cf4:	cmp	r0, r1
   20cf8:	subhi	fp, fp, #2
   20cfc:	addhi	r1, r1, r4
   20d00:	bls	20da4 <elf32_fsize@plt+0xf6ec>
   20d04:	rsb	r5, r0, r1
   20d08:	mov	r1, r8
   20d0c:	uxth	r9, r9
   20d10:	mov	r0, r5
   20d14:	bl	20220 <elf32_fsize@plt+0xeb68>
   20d18:	mov	r1, r8
   20d1c:	mov	r6, r0
   20d20:	mov	r0, r5
   20d24:	bl	2040c <elf32_fsize@plt+0xed54>
   20d28:	mul	r5, sl, r6
   20d2c:	orr	r1, r9, r1, lsl #16
   20d30:	cmp	r5, r1
   20d34:	bls	20d58 <elf32_fsize@plt+0xf6a0>
   20d38:	adds	r1, r1, r4
   20d3c:	sub	r3, r6, #1
   20d40:	bcs	20d54 <elf32_fsize@plt+0xf69c>
   20d44:	cmp	r5, r1
   20d48:	subhi	r6, r6, #2
   20d4c:	addhi	r1, r1, r4
   20d50:	bhi	20d58 <elf32_fsize@plt+0xf6a0>
   20d54:	mov	r6, r3
   20d58:	rsb	r5, r5, r1
   20d5c:	orr	r6, r6, fp, lsl #16
   20d60:	b	20aec <elf32_fsize@plt+0xf434>
   20d64:	mov	r6, r3
   20d68:	b	20a68 <elf32_fsize@plt+0xf3b0>
   20d6c:	mov	r9, r2
   20d70:	b	20b38 <elf32_fsize@plt+0xf480>
   20d74:	mov	r5, r3
   20d78:	b	20b84 <elf32_fsize@plt+0xf4cc>
   20d7c:	cmp	sl, r1
   20d80:	subhi	fp, fp, #2
   20d84:	addhi	r1, r1, r8
   20d88:	bhi	20c48 <elf32_fsize@plt+0xf590>
   20d8c:	b	20c44 <elf32_fsize@plt+0xf58c>
   20d90:	cmp	r0, r1
   20d94:	subhi	r4, r4, #2
   20d98:	addhi	r1, r1, r8
   20d9c:	bhi	20bfc <elf32_fsize@plt+0xf544>
   20da0:	b	20bf8 <elf32_fsize@plt+0xf540>
   20da4:	mov	fp, r3
   20da8:	b	20d04 <elf32_fsize@plt+0xf64c>
   20dac:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   20db0:	mov	r7, r0
   20db4:	ldr	r6, [pc, #76]	; 20e08 <elf32_fsize@plt+0xf750>
   20db8:	mov	r8, r1
   20dbc:	ldr	r5, [pc, #72]	; 20e0c <elf32_fsize@plt+0xf754>
   20dc0:	mov	r9, r2
   20dc4:	add	r6, pc, r6
   20dc8:	bl	112fc <calloc@plt-0x20>
   20dcc:	add	r5, pc, r5
   20dd0:	rsb	r6, r5, r6
   20dd4:	asrs	r6, r6, #2
   20dd8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   20ddc:	sub	r5, r5, #4
   20de0:	mov	r4, #0
   20de4:	add	r4, r4, #1
   20de8:	ldr	r3, [r5, #4]!
   20dec:	mov	r0, r7
   20df0:	mov	r1, r8
   20df4:	mov	r2, r9
   20df8:	blx	r3
   20dfc:	cmp	r4, r6
   20e00:	bne	20de4 <elf32_fsize@plt+0xf72c>
   20e04:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   20e08:			; <UNDEFINED> instruction: 0x000176b8
   20e0c:	andeq	r7, r1, ip, lsr #13
   20e10:	bx	lr

Disassembly of section .fini:

00020e14 <.fini>:
   20e14:	push	{r3, lr}
   20e18:	pop	{r3, pc}
