
centos-preinstalled/uptime:     file format elf32-littlearm


Disassembly of section .init:

00010a50 <_init@@Base>:
   10a50:	push	{r3, lr}
   10a54:	bl	10e2c <fputs@plt+0x2a8>
   10a58:	pop	{r3, pc}

Disassembly of section .plt:

00010a5c <abort@plt-0x14>:
   10a5c:	push	{lr}		; (str lr, [sp, #-4]!)
   10a60:	ldr	lr, [pc, #4]	; 10a6c <_init@@Base+0x1c>
   10a64:	add	lr, pc, lr
   10a68:	ldr	pc, [lr, #8]!
   10a6c:	muleq	r1, r4, r5

00010a70 <abort@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #69632	; 0x11000
   10a78:	ldr	pc, [ip, #1428]!	; 0x594

00010a7c <localtime@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #69632	; 0x11000
   10a84:	ldr	pc, [ip, #1420]!	; 0x58c

00010a88 <__libc_start_main@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #69632	; 0x11000
   10a90:	ldr	pc, [ip, #1412]!	; 0x584

00010a94 <__gmon_start__@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #69632	; 0x11000
   10a9c:	ldr	pc, [ip, #1404]!	; 0x57c

00010aa0 <uptime@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #69632	; 0x11000
   10aa8:	ldr	pc, [ip, #1396]!	; 0x574

00010aac <fclose@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #69632	; 0x11000
   10ab4:	ldr	pc, [ip, #1388]!	; 0x56c

00010ab8 <__printf_chk@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #69632	; 0x11000
   10ac0:	ldr	pc, [ip, #1380]!	; 0x564

00010ac4 <__cxa_atexit@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #69632	; 0x11000
   10acc:	ldr	pc, [ip, #1372]!	; 0x55c

00010ad0 <__fpending@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #69632	; 0x11000
   10ad8:	ldr	pc, [ip, #1364]!	; 0x554

00010adc <bindtextdomain@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #69632	; 0x11000
   10ae4:	ldr	pc, [ip, #1356]!	; 0x54c

00010ae8 <_exit@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #69632	; 0x11000
   10af0:	ldr	pc, [ip, #1348]!	; 0x544

00010af4 <getopt_long@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #69632	; 0x11000
   10afc:	ldr	pc, [ip, #1340]!	; 0x53c

00010b00 <dcgettext@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #69632	; 0x11000
   10b08:	ldr	pc, [ip, #1332]!	; 0x534

00010b0c <gettimeofday@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #69632	; 0x11000
   10b14:	ldr	pc, [ip, #1324]!	; 0x52c

00010b18 <setlocale@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #69632	; 0x11000
   10b20:	ldr	pc, [ip, #1316]!	; 0x524

00010b24 <error@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #69632	; 0x11000
   10b2c:	ldr	pc, [ip, #1308]!	; 0x51c

00010b30 <__stack_chk_fail@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #69632	; 0x11000
   10b38:	ldr	pc, [ip, #1300]!	; 0x514

00010b3c <__fprintf_chk@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #69632	; 0x11000
   10b44:	ldr	pc, [ip, #1292]!	; 0x50c

00010b48 <textdomain@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #69632	; 0x11000
   10b50:	ldr	pc, [ip, #1284]!	; 0x504

00010b54 <ferror@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #69632	; 0x11000
   10b5c:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b60 <print_uptime@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #69632	; 0x11000
   10b68:	ldr	pc, [ip, #1268]!	; 0x4f4

00010b6c <exit@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #69632	; 0x11000
   10b74:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b78 <__errno_location@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #69632	; 0x11000
   10b80:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b84 <fputs@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #69632	; 0x11000
   10b8c:	ldr	pc, [ip, #1244]!	; 0x4dc

Disassembly of section .text:

00010b90 <.text>:
   10b90:	push	{r4, r5, r6, r7, r8, r9, lr}
   10b94:	vpush	{d8}
   10b98:	movw	r4, #8320	; 0x2080
   10b9c:	movw	r5, #8312	; 0x2078
   10ba0:	movt	r4, #2
   10ba4:	movt	r5, #2
   10ba8:	sub	sp, sp, #60	; 0x3c
   10bac:	ldr	ip, [r4]
   10bb0:	movw	r3, #8316	; 0x207c
   10bb4:	ldr	r2, [r5]
   10bb8:	movt	r3, #2
   10bbc:	mov	r8, r1
   10bc0:	mov	r7, r0
   10bc4:	movw	r1, #4700	; 0x125c
   10bc8:	mov	r0, #6
   10bcc:	movt	r1, #1
   10bd0:	str	ip, [sp, #52]	; 0x34
   10bd4:	str	r2, [r3]
   10bd8:	bl	10b18 <setlocale@plt>
   10bdc:	movw	r0, #4956	; 0x135c
   10be0:	movw	r1, #4968	; 0x1368
   10be4:	movt	r0, #1
   10be8:	movt	r1, #1
   10bec:	bl	10adc <bindtextdomain@plt>
   10bf0:	movw	r0, #4956	; 0x135c
   10bf4:	movt	r0, #1
   10bf8:	mov	r6, #0
   10bfc:	bl	10b48 <textdomain@plt>
   10c00:	movw	r0, #4316	; 0x10dc
   10c04:	movt	r0, #1
   10c08:	mov	r9, r6
   10c0c:	bl	111c8 <fputs@plt+0x644>
   10c10:	str	r9, [sp]
   10c14:	movw	r2, #5052	; 0x13bc
   10c18:	movw	r3, #4612	; 0x1204
   10c1c:	movt	r2, #1
   10c20:	movt	r3, #1
   10c24:	mov	r0, r7
   10c28:	mov	r1, r8
   10c2c:	bl	10af4 <getopt_long@plt>
   10c30:	cmn	r0, #1
   10c34:	beq	10dd8 <fputs@plt+0x254>
   10c38:	sub	r3, r0, #86	; 0x56
   10c3c:	cmp	r3, #29
   10c40:	ldrls	pc, [pc, r3, lsl #2]
   10c44:	b	10dc8 <fputs@plt+0x244>
   10c48:	muleq	r1, r8, sp
   10c4c:	andeq	r0, r1, r8, asr #27
   10c50:	andeq	r0, r1, r8, asr #27
   10c54:	andeq	r0, r1, r8, asr #27
   10c58:	andeq	r0, r1, r8, asr #27
   10c5c:	andeq	r0, r1, r8, asr #27
   10c60:	andeq	r0, r1, r8, asr #27
   10c64:	andeq	r0, r1, r8, asr #27
   10c68:	andeq	r0, r1, r8, asr #27
   10c6c:	andeq	r0, r1, r8, asr #27
   10c70:	andeq	r0, r1, r8, asr #27
   10c74:	andeq	r0, r1, r8, asr #27
   10c78:	andeq	r0, r1, r8, asr #27
   10c7c:	andeq	r0, r1, r8, asr #27
   10c80:	andeq	r0, r1, r8, asr #27
   10c84:	andeq	r0, r1, r8, asr #27
   10c88:	andeq	r0, r1, r8, asr #27
   10c8c:	andeq	r0, r1, r8, asr #27
   10c90:	andeq	r0, r1, r8, lsl #27
   10c94:	andeq	r0, r1, r8, asr #27
   10c98:	andeq	r0, r1, r8, asr #27
   10c9c:	andeq	r0, r1, r8, asr #27
   10ca0:	andeq	r0, r1, r8, asr #27
   10ca4:	andeq	r0, r1, r8, asr #27
   10ca8:	andeq	r0, r1, r8, asr #27
   10cac:	andeq	r0, r1, r8, asr #27
   10cb0:	andeq	r0, r1, r0, lsl #27
   10cb4:	andeq	r0, r1, r8, asr #27
   10cb8:	andeq	r0, r1, r8, asr #27
   10cbc:	andeq	r0, r1, r0, asr #25
   10cc0:	mov	r1, #0
   10cc4:	add	r0, sp, #44	; 0x2c
   10cc8:	bl	10b0c <gettimeofday@plt>
   10ccc:	vldr	s13, [sp, #48]	; 0x30
   10cd0:	vcvt.f64.s32	d8, s13
   10cd4:	vldr	d7, [pc, #268]	; 10de8 <fputs@plt+0x264>
   10cd8:	vldr	s13, [sp, #44]	; 0x2c
   10cdc:	add	r1, sp, #32
   10ce0:	add	r0, sp, #24
   10ce4:	vdiv.f64	d8, d8, d7
   10ce8:	vcvt.f64.s32	d7, s13
   10cec:	vadd.f64	d8, d7, d8
   10cf0:	bl	10aa0 <uptime@plt>
   10cf4:	vldr	d7, [sp, #24]
   10cf8:	add	r0, sp, #56	; 0x38
   10cfc:	vmov.f64	d6, #96	; 0x3f000000  0.5
   10d00:	vsub.f64	d7, d8, d7
   10d04:	vadd.f64	d7, d7, d6
   10d08:	vcvt.s32.f64	s14, d7
   10d0c:	vmov	r3, s14
   10d10:	str	r3, [r0, #-36]!	; 0xffffffdc
   10d14:	bl	10a7c <localtime@plt>
   10d18:	movw	r1, #4988	; 0x137c
   10d1c:	movt	r1, #1
   10d20:	ldr	lr, [r0, #12]
   10d24:	mov	ip, r0
   10d28:	ldr	r2, [r0, #20]
   10d2c:	ldr	r3, [r0, #16]
   10d30:	mov	r0, #1
   10d34:	str	lr, [sp]
   10d38:	add	r2, r2, #1888	; 0x760
   10d3c:	ldr	lr, [ip, #8]
   10d40:	add	r2, r2, #12
   10d44:	add	r3, r3, r0
   10d48:	str	lr, [sp, #4]
   10d4c:	ldr	lr, [ip, #4]
   10d50:	str	lr, [sp, #8]
   10d54:	ldr	ip, [ip]
   10d58:	str	ip, [sp, #12]
   10d5c:	bl	10ab8 <__printf_chk@plt>
   10d60:	ldr	r2, [sp, #52]	; 0x34
   10d64:	mov	r0, #0
   10d68:	ldr	r3, [r4]
   10d6c:	cmp	r2, r3
   10d70:	bne	10de4 <fputs@plt+0x260>
   10d74:	add	sp, sp, #60	; 0x3c
   10d78:	vpop	{d8}
   10d7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10d80:	mov	r6, #1
   10d84:	b	10c10 <fputs@plt+0x8c>
   10d88:	movw	r3, #8328	; 0x2088
   10d8c:	movt	r3, #2
   10d90:	ldr	r0, [r3]
   10d94:	bl	10f24 <fputs@plt+0x3a0>
   10d98:	mov	r2, #5
   10d9c:	movw	r1, #5020	; 0x139c
   10da0:	mov	r0, #0
   10da4:	movt	r1, #1
   10da8:	bl	10b00 <dcgettext@plt>
   10dac:	ldr	r2, [r5]
   10db0:	movw	r3, #5032	; 0x13a8
   10db4:	movt	r3, #1
   10db8:	mov	r1, r0
   10dbc:	mov	r0, #1
   10dc0:	bl	10ab8 <__printf_chk@plt>
   10dc4:	b	10d60 <fputs@plt+0x1dc>
   10dc8:	movw	r3, #8332	; 0x208c
   10dcc:	movt	r3, #2
   10dd0:	ldr	r0, [r3]
   10dd4:	bl	10f24 <fputs@plt+0x3a0>
   10dd8:	mov	r0, r6
   10ddc:	bl	10b60 <print_uptime@plt>
   10de0:	b	10d60 <fputs@plt+0x1dc>
   10de4:	bl	10b30 <__stack_chk_fail@plt>
   10de8:	andeq	r0, r0, r0
   10dec:	smlawbmi	lr, r0, r4, r8
   10df0:	mov	fp, #0
   10df4:	mov	lr, #0
   10df8:	pop	{r1}		; (ldr r1, [sp], #4)
   10dfc:	mov	r2, sp
   10e00:	push	{r2}		; (str r2, [sp, #-4]!)
   10e04:	push	{r0}		; (str r0, [sp, #-4]!)
   10e08:	ldr	ip, [pc, #16]	; 10e20 <fputs@plt+0x29c>
   10e0c:	push	{ip}		; (str ip, [sp, #-4]!)
   10e10:	ldr	r0, [pc, #12]	; 10e24 <fputs@plt+0x2a0>
   10e14:	ldr	r3, [pc, #12]	; 10e28 <fputs@plt+0x2a4>
   10e18:	bl	10a88 <__libc_start_main@plt>
   10e1c:	bl	10a70 <abort@plt>
   10e20:	andeq	r1, r1, r4, asr #3
   10e24:	muleq	r1, r0, fp
   10e28:	andeq	r1, r1, r0, ror #2
   10e2c:	ldr	r3, [pc, #20]	; 10e48 <fputs@plt+0x2c4>
   10e30:	ldr	r2, [pc, #20]	; 10e4c <fputs@plt+0x2c8>
   10e34:	add	r3, pc, r3
   10e38:	ldr	r2, [r3, r2]
   10e3c:	cmp	r2, #0
   10e40:	bxeq	lr
   10e44:	b	10a94 <__gmon_start__@plt>
   10e48:	andeq	r1, r1, r4, asr #3
   10e4c:	andeq	r0, r0, ip, rrx
   10e50:	push	{r3, lr}
   10e54:	movw	r0, #8312	; 0x2078
   10e58:	ldr	r3, [pc, #36]	; 10e84 <fputs@plt+0x300>
   10e5c:	movt	r0, #2
   10e60:	rsb	r3, r0, r3
   10e64:	cmp	r3, #6
   10e68:	popls	{r3, pc}
   10e6c:	movw	r3, #0
   10e70:	movt	r3, #0
   10e74:	cmp	r3, #0
   10e78:	popeq	{r3, pc}
   10e7c:	blx	r3
   10e80:	pop	{r3, pc}
   10e84:	andeq	r2, r2, fp, ror r0
   10e88:	push	{r3, lr}
   10e8c:	movw	r0, #8312	; 0x2078
   10e90:	movw	r3, #8312	; 0x2078
   10e94:	movt	r0, #2
   10e98:	movt	r3, #2
   10e9c:	rsb	r3, r0, r3
   10ea0:	asr	r3, r3, #2
   10ea4:	add	r3, r3, r3, lsr #31
   10ea8:	asrs	r1, r3, #1
   10eac:	popeq	{r3, pc}
   10eb0:	movw	r2, #0
   10eb4:	movt	r2, #0
   10eb8:	cmp	r2, #0
   10ebc:	popeq	{r3, pc}
   10ec0:	blx	r2
   10ec4:	pop	{r3, pc}
   10ec8:	push	{r4, lr}
   10ecc:	movw	r4, #8336	; 0x2090
   10ed0:	movt	r4, #2
   10ed4:	ldrb	r3, [r4]
   10ed8:	cmp	r3, #0
   10edc:	popne	{r4, pc}
   10ee0:	bl	10e50 <fputs@plt+0x2cc>
   10ee4:	mov	r3, #1
   10ee8:	strb	r3, [r4]
   10eec:	pop	{r4, pc}
   10ef0:	movw	r0, #7916	; 0x1eec
   10ef4:	movt	r0, #2
   10ef8:	push	{r3, lr}
   10efc:	ldr	r3, [r0]
   10f00:	cmp	r3, #0
   10f04:	beq	10f1c <fputs@plt+0x398>
   10f08:	movw	r3, #0
   10f0c:	movt	r3, #0
   10f10:	cmp	r3, #0
   10f14:	beq	10f1c <fputs@plt+0x398>
   10f18:	blx	r3
   10f1c:	pop	{r3, lr}
   10f20:	b	10e88 <fputs@plt+0x304>
   10f24:	push	{r4, lr}
   10f28:	mov	r2, #5
   10f2c:	mov	r4, r0
   10f30:	movw	r1, #4692	; 0x1254
   10f34:	mov	r0, #0
   10f38:	movt	r1, #1
   10f3c:	bl	10b00 <dcgettext@plt>
   10f40:	mov	r1, r4
   10f44:	bl	10b84 <fputs@plt>
   10f48:	mov	r2, #5
   10f4c:	movw	r1, #4704	; 0x1260
   10f50:	mov	r0, #0
   10f54:	movt	r1, #1
   10f58:	bl	10b00 <dcgettext@plt>
   10f5c:	movw	r3, #8312	; 0x2078
   10f60:	movt	r3, #2
   10f64:	mov	r1, #1
   10f68:	ldr	r3, [r3]
   10f6c:	mov	r2, r0
   10f70:	mov	r0, r4
   10f74:	bl	10b3c <__fprintf_chk@plt>
   10f78:	mov	r2, #5
   10f7c:	movw	r1, #4720	; 0x1270
   10f80:	mov	r0, #0
   10f84:	movt	r1, #1
   10f88:	bl	10b00 <dcgettext@plt>
   10f8c:	mov	r1, r4
   10f90:	bl	10b84 <fputs@plt>
   10f94:	mov	r2, #5
   10f98:	movw	r1, #4732	; 0x127c
   10f9c:	mov	r0, #0
   10fa0:	movt	r1, #1
   10fa4:	bl	10b00 <dcgettext@plt>
   10fa8:	mov	r1, r4
   10fac:	bl	10b84 <fputs@plt>
   10fb0:	mov	r2, #5
   10fb4:	movw	r1, #4780	; 0x12ac
   10fb8:	mov	r0, #0
   10fbc:	movt	r1, #1
   10fc0:	bl	10b00 <dcgettext@plt>
   10fc4:	mov	r1, r4
   10fc8:	bl	10b84 <fputs@plt>
   10fcc:	mov	r2, #5
   10fd0:	movw	r1, #4824	; 0x12d8
   10fd4:	mov	r0, #0
   10fd8:	movt	r1, #1
   10fdc:	bl	10b00 <dcgettext@plt>
   10fe0:	mov	r1, r4
   10fe4:	bl	10b84 <fputs@plt>
   10fe8:	mov	r2, #5
   10fec:	movw	r1, #4860	; 0x12fc
   10ff0:	mov	r0, #0
   10ff4:	movt	r1, #1
   10ff8:	bl	10b00 <dcgettext@plt>
   10ffc:	mov	r1, r4
   11000:	bl	10b84 <fputs@plt>
   11004:	mov	r2, #5
   11008:	movw	r1, #4916	; 0x1334
   1100c:	mov	r0, #0
   11010:	movt	r1, #1
   11014:	bl	10b00 <dcgettext@plt>
   11018:	movw	r3, #4944	; 0x1350
   1101c:	mov	r1, #1
   11020:	movt	r3, #1
   11024:	mov	r2, r0
   11028:	mov	r0, r4
   1102c:	bl	10b3c <__fprintf_chk@plt>
   11030:	movw	r3, #8332	; 0x208c
   11034:	movt	r3, #2
   11038:	ldr	r0, [r3]
   1103c:	subs	r3, r4, r0
   11040:	rsbs	r0, r3, #0
   11044:	adcs	r0, r0, r3
   11048:	bl	10b6c <exit@plt>
   1104c:	push	{r4, r5, r6, lr}
   11050:	mov	r5, r0
   11054:	bl	10ad0 <__fpending@plt>
   11058:	mov	r6, r0
   1105c:	mov	r0, r5
   11060:	bl	10b54 <ferror@plt>
   11064:	mov	r4, r0
   11068:	mov	r0, r5
   1106c:	bl	10aac <fclose@plt>
   11070:	adds	r5, r0, #0
   11074:	movne	r5, #1
   11078:	cmp	r4, #0
   1107c:	bne	1109c <fputs@plt+0x518>
   11080:	cmp	r5, #0
   11084:	beq	11094 <fputs@plt+0x510>
   11088:	cmp	r6, #0
   1108c:	beq	110c4 <fputs@plt+0x540>
   11090:	mvn	r4, #0
   11094:	mov	r0, r4
   11098:	pop	{r4, r5, r6, pc}
   1109c:	cmp	r5, #0
   110a0:	bne	11090 <fputs@plt+0x50c>
   110a4:	bl	10b78 <__errno_location@plt>
   110a8:	ldr	r3, [r0]
   110ac:	cmp	r3, #32
   110b0:	beq	11090 <fputs@plt+0x50c>
   110b4:	mvn	r4, #0
   110b8:	str	r5, [r0]
   110bc:	mov	r0, r4
   110c0:	pop	{r4, r5, r6, pc}
   110c4:	bl	10b78 <__errno_location@plt>
   110c8:	ldr	r4, [r0]
   110cc:	subs	r4, r4, #9
   110d0:	mvnne	r4, #0
   110d4:	mov	r0, r4
   110d8:	pop	{r4, r5, r6, pc}
   110dc:	movw	r3, #8328	; 0x2088
   110e0:	movt	r3, #2
   110e4:	push	{r4, lr}
   110e8:	ldr	r0, [r3]
   110ec:	bl	1104c <fputs@plt+0x4c8>
   110f0:	cmp	r0, #0
   110f4:	beq	1110c <fputs@plt+0x588>
   110f8:	bl	10b78 <__errno_location@plt>
   110fc:	ldr	r3, [r0]
   11100:	mov	r4, r0
   11104:	cmp	r3, #32
   11108:	bne	1112c <fputs@plt+0x5a8>
   1110c:	movw	r3, #8332	; 0x208c
   11110:	movt	r3, #2
   11114:	ldr	r0, [r3]
   11118:	bl	1104c <fputs@plt+0x4c8>
   1111c:	cmp	r0, #0
   11120:	popeq	{r4, pc}
   11124:	mov	r0, #1
   11128:	bl	10ae8 <_exit@plt>
   1112c:	mov	r2, #5
   11130:	movw	r1, #5092	; 0x13e4
   11134:	mov	r0, #0
   11138:	movt	r1, #1
   1113c:	bl	10b00 <dcgettext@plt>
   11140:	ldr	r1, [r4]
   11144:	movw	r2, #5104	; 0x13f0
   11148:	movt	r2, #1
   1114c:	mov	r3, r0
   11150:	mov	r0, #0
   11154:	bl	10b24 <error@plt>
   11158:	mov	r0, #1
   1115c:	bl	10ae8 <_exit@plt>
   11160:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11164:	mov	r7, r0
   11168:	ldr	r6, [pc, #76]	; 111bc <fputs@plt+0x638>
   1116c:	mov	r8, r1
   11170:	ldr	r5, [pc, #72]	; 111c0 <fputs@plt+0x63c>
   11174:	mov	r9, r2
   11178:	add	r6, pc, r6
   1117c:	bl	10a50 <_init@@Base>
   11180:	add	r5, pc, r5
   11184:	rsb	r6, r5, r6
   11188:	asrs	r6, r6, #2
   1118c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   11190:	sub	r5, r5, #4
   11194:	mov	r4, #0
   11198:	add	r4, r4, #1
   1119c:	ldr	r3, [r5, #4]!
   111a0:	mov	r0, r7
   111a4:	mov	r1, r8
   111a8:	mov	r2, r9
   111ac:	blx	r3
   111b0:	cmp	r4, r6
   111b4:	bne	11198 <fputs@plt+0x614>
   111b8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   111bc:	andeq	r0, r1, r8, ror #26
   111c0:	andeq	r0, r1, ip, asr sp
   111c4:	bx	lr
   111c8:	ldr	r3, [pc, #28]	; 111ec <fputs@plt+0x668>
   111cc:	mov	r1, #0
   111d0:	ldr	r2, [pc, #24]	; 111f0 <fputs@plt+0x66c>
   111d4:	add	r3, pc, r3
   111d8:	ldr	r3, [r3, r2]
   111dc:	cmp	r3, #0
   111e0:	ldrne	r2, [r3]
   111e4:	moveq	r2, r3
   111e8:	b	10ac4 <__cxa_atexit@plt>
   111ec:	andeq	r0, r1, r4, lsr #28
   111f0:	andeq	r0, r0, r0, ror r0

Disassembly of section .fini:

000111f4 <_fini@@Base>:
   111f4:	push	{r3, lr}
   111f8:	pop	{r3, pc}
