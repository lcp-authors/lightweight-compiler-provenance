
centos-preinstalled/nss-policy-check:     file format elf32-littlearm


Disassembly of section .init:

00010b0c <_init@@Base>:
   10b0c:	push	{r3, lr}
   10b10:	bl	11280 <PR_GetError@plt+0x640>
   10b14:	pop	{r3, pc}

Disassembly of section .plt:

00010b18 <abort@plt-0x14>:
   10b18:	push	{lr}		; (str lr, [sp, #-4]!)
   10b1c:	ldr	lr, [pc, #4]	; 10b28 <_init@@Base+0x1c>
   10b20:	add	lr, pc, lr
   10b24:	ldr	pc, [lr, #8]!
   10b28:	ldrdeq	r1, [r1], -r8

00010b2c <abort@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #69632	; 0x11000
   10b34:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b38 <__libc_start_main@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #69632	; 0x11000
   10b40:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b44 <__gmon_start__@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #69632	; 0x11000
   10b4c:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b50 <PR_SetEnv@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #69632	; 0x11000
   10b58:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b5c <SSL_OptionSetDefault@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #69632	; 0x11000
   10b64:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b68 <PR_GetEnvSecure@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #69632	; 0x11000
   10b70:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b74 <__strncat_chk@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #69632	; 0x11000
   10b7c:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b80 <SECMOD_LoadModule@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #69632	; 0x11000
   10b88:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b8c <NSS_Shutdown@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #69632	; 0x11000
   10b94:	ldr	pc, [ip, #1176]!	; 0x498

00010b98 <SSL_VersionRangeGetSupported@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #69632	; 0x11000
   10ba0:	ldr	pc, [ip, #1168]!	; 0x490

00010ba4 <strlen@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #69632	; 0x11000
   10bac:	ldr	pc, [ip, #1160]!	; 0x488

00010bb0 <NSS_NoDB_Init@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #69632	; 0x11000
   10bb8:	ldr	pc, [ip, #1152]!	; 0x480

00010bbc <strtol@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #69632	; 0x11000
   10bc4:	ldr	pc, [ip, #1144]!	; 0x478

00010bc8 <PR_ErrorToString@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #69632	; 0x11000
   10bd0:	ldr	pc, [ip, #1136]!	; 0x470

00010bd4 <SECMOD_DestroyModule@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #69632	; 0x11000
   10bdc:	ldr	pc, [ip, #1128]!	; 0x468

00010be0 <fwrite@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #69632	; 0x11000
   10be8:	ldr	pc, [ip, #1120]!	; 0x460

00010bec <SSL_GetCipherSuiteInfo@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #69632	; 0x11000
   10bf4:	ldr	pc, [ip, #1112]!	; 0x458

00010bf8 <__stack_chk_fail@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #69632	; 0x11000
   10c00:	ldr	pc, [ip, #1104]!	; 0x450

00010c04 <__fprintf_chk@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #69632	; 0x11000
   10c0c:	ldr	pc, [ip, #1096]!	; 0x448

00010c10 <PR_Access@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #69632	; 0x11000
   10c18:	ldr	pc, [ip, #1088]!	; 0x440

00010c1c <SSL_VersionRangeGetDefault@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #69632	; 0x11000
   10c24:	ldr	pc, [ip, #1080]!	; 0x438

00010c28 <SSL_CipherPrefGetDefault@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #69632	; 0x11000
   10c30:	ldr	pc, [ip, #1072]!	; 0x430

00010c34 <__sprintf_chk@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #69632	; 0x11000
   10c3c:	ldr	pc, [ip, #1064]!	; 0x428

00010c40 <PR_GetError@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #69632	; 0x11000
   10c48:	ldr	pc, [ip, #1056]!	; 0x420

Disassembly of section .text:

00010c4c <.text>:
   10c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c50:	sub	sp, sp, #9280	; 0x2440
   10c54:	ldr	r4, [pc, #1380]	; 111c0 <PR_GetError@plt+0x580>
   10c58:	sub	sp, sp, #52	; 0x34
   10c5c:	ldr	r3, [pc, #1376]	; 111c4 <PR_GetError@plt+0x584>
   10c60:	mov	r6, r1
   10c64:	add	r4, pc, r4
   10c68:	add	r1, sp, #8192	; 0x2000
   10c6c:	cmp	r0, #2
   10c70:	ldr	r5, [r4, r3]
   10c74:	ldr	r3, [r5]
   10c78:	str	r3, [r1, #1132]	; 0x46c
   10c7c:	beq	10ce0 <PR_GetError@plt+0xa0>
   10c80:	ldr	r3, [pc, #1344]	; 111c8 <PR_GetError@plt+0x588>
   10c84:	mov	r1, #1
   10c88:	ldr	r0, [pc, #1340]	; 111cc <PR_GetError@plt+0x58c>
   10c8c:	mov	r2, #47	; 0x2f
   10c90:	ldr	r6, [r4, r3]
   10c94:	add	r0, pc, r0
   10c98:	ldr	r3, [r6]
   10c9c:	bl	10be0 <fwrite@plt>
   10ca0:	ldr	r0, [pc, #1320]	; 111d0 <PR_GetError@plt+0x590>
   10ca4:	mov	r1, #1
   10ca8:	ldr	r3, [r6]
   10cac:	mov	r2, #16
   10cb0:	add	r0, pc, r0
   10cb4:	mov	r8, #2
   10cb8:	bl	10be0 <fwrite@plt>
   10cbc:	add	r1, sp, #8192	; 0x2000
   10cc0:	mov	r0, r8
   10cc4:	ldr	r2, [r1, #1132]	; 0x46c
   10cc8:	ldr	r3, [r5]
   10ccc:	cmp	r2, r3
   10cd0:	bne	11060 <PR_GetError@plt+0x420>
   10cd4:	add	sp, sp, #9280	; 0x2440
   10cd8:	add	sp, sp, #52	; 0x34
   10cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ce0:	ldr	r7, [r6, #4]
   10ce4:	mov	r0, r7
   10ce8:	bl	10ba4 <strlen@plt>
   10cec:	subs	r8, r0, #0
   10cf0:	bne	10d18 <PR_GetError@plt+0xd8>
   10cf4:	ldr	r0, [pc, #1228]	; 111c8 <PR_GetError@plt+0x588>
   10cf8:	mov	r1, #1
   10cfc:	ldr	r3, [r6, #4]
   10d00:	ldr	r2, [pc, #1228]	; 111d4 <PR_GetError@plt+0x594>
   10d04:	ldr	r6, [r4, r0]
   10d08:	add	r2, pc, r2
   10d0c:	ldr	r0, [r6]
   10d10:	bl	10c04 <__fprintf_chk@plt>
   10d14:	b	10ca0 <PR_GetError@plt+0x60>
   10d18:	mov	r0, r7
   10d1c:	mov	r1, #3
   10d20:	bl	10c10 <PR_Access@plt>
   10d24:	cmp	r0, #0
   10d28:	bne	10cf4 <PR_GetError@plt+0xb4>
   10d2c:	cmp	r8, #4096	; 0x1000
   10d30:	bge	10de4 <PR_GetError@plt+0x1a4>
   10d34:	add	ip, sp, #9280	; 0x2440
   10d38:	ldr	r1, [r6, #4]
   10d3c:	movw	r2, #56316	; 0xdbfc
   10d40:	add	ip, ip, #48	; 0x30
   10d44:	movt	r2, #65535	; 0xffff
   10d48:	sub	r3, r8, #1
   10d4c:	add	r3, r1, r3
   10d50:	strb	r0, [ip, r2]
   10d54:	b	10d68 <PR_GetError@plt+0x128>
   10d58:	ldrb	r2, [r3]
   10d5c:	sub	r3, r3, #1
   10d60:	cmp	r2, #47	; 0x2f
   10d64:	beq	10d74 <PR_GetError@plt+0x134>
   10d68:	cmp	r3, r1
   10d6c:	mov	r6, r3
   10d70:	bhi	10d58 <PR_GetError@plt+0x118>
   10d74:	cmp	r6, r1
   10d78:	beq	10ee0 <PR_GetError@plt+0x2a0>
   10d7c:	add	r6, r6, #1
   10d80:	add	r7, sp, #112	; 0x70
   10d84:	sub	r0, r7, #4
   10d88:	rsb	r2, r1, r6
   10d8c:	mov	r3, #4096	; 0x1000
   10d90:	bl	10b74 <__strncat_chk@plt>
   10d94:	ldr	r0, [pc, #1084]	; 111d8 <PR_GetError@plt+0x598>
   10d98:	add	r0, pc, r0
   10d9c:	bl	10b50 <PR_SetEnv@plt>
   10da0:	mov	r0, #0
   10da4:	bl	10bb0 <NSS_NoDB_Init@plt>
   10da8:	subs	r9, r0, #0
   10dac:	beq	10e08 <PR_GetError@plt+0x1c8>
   10db0:	ldr	r3, [pc, #1040]	; 111c8 <PR_GetError@plt+0x588>
   10db4:	ldr	r6, [r4, r3]
   10db8:	ldr	r4, [r6]
   10dbc:	bl	10c40 <PR_GetError@plt>
   10dc0:	mov	r1, #0
   10dc4:	bl	10bc8 <PR_ErrorToString@plt>
   10dc8:	ldr	r2, [pc, #1036]	; 111dc <PR_GetError@plt+0x59c>
   10dcc:	mov	r1, #1
   10dd0:	add	r2, pc, r2
   10dd4:	mov	r3, r0
   10dd8:	mov	r0, r4
   10ddc:	bl	10c04 <__fprintf_chk@plt>
   10de0:	b	10ca0 <PR_GetError@plt+0x60>
   10de4:	ldr	r3, [pc, #988]	; 111c8 <PR_GetError@plt+0x588>
   10de8:	mov	r1, #1
   10dec:	ldr	r0, [pc, #1004]	; 111e0 <PR_GetError@plt+0x5a0>
   10df0:	mov	r2, #38	; 0x26
   10df4:	ldr	r6, [r4, r3]
   10df8:	add	r0, pc, r0
   10dfc:	ldr	r3, [r6]
   10e00:	bl	10be0 <fwrite@plt>
   10e04:	b	10ca0 <PR_GetError@plt+0x60>
   10e08:	ldr	r0, [pc, #980]	; 111e4 <PR_GetError@plt+0x5a4>
   10e0c:	sub	r7, r7, #4
   10e10:	add	r0, pc, r0
   10e14:	bl	10b50 <PR_SetEnv@plt>
   10e18:	ldr	r0, [pc, #968]	; 111e8 <PR_GetError@plt+0x5a8>
   10e1c:	add	r0, pc, r0
   10e20:	bl	10b50 <PR_SetEnv@plt>
   10e24:	ldr	r0, [pc, #960]	; 111ec <PR_GetError@plt+0x5ac>
   10e28:	add	r0, pc, r0
   10e2c:	bl	10b50 <PR_SetEnv@plt>
   10e30:	str	r6, [sp, #4]
   10e34:	add	r6, sp, #4160	; 0x1040
   10e38:	ldr	r3, [pc, #944]	; 111f0 <PR_GetError@plt+0x5b0>
   10e3c:	add	r6, r6, #44	; 0x2c
   10e40:	str	r7, [sp]
   10e44:	mov	r1, #1
   10e48:	mov	r2, #5120	; 0x1400
   10e4c:	add	r3, pc, r3
   10e50:	mov	r0, r6
   10e54:	bl	10c34 <__sprintf_chk@plt>
   10e58:	mov	r0, r6
   10e5c:	mov	r1, r9
   10e60:	mov	r2, #1
   10e64:	bl	10b80 <SECMOD_LoadModule@plt>
   10e68:	subs	r7, r0, #0
   10e6c:	beq	11064 <PR_GetError@plt+0x424>
   10e70:	ldr	r3, [r7, #8]
   10e74:	cmp	r3, #0
   10e78:	bne	10f1c <PR_GetError@plt+0x2dc>
   10e7c:	ldr	r3, [pc, #836]	; 111c8 <PR_GetError@plt+0x588>
   10e80:	mov	r1, #1
   10e84:	ldr	r0, [pc, #872]	; 111f4 <PR_GetError@plt+0x5b4>
   10e88:	mov	r2, #34	; 0x22
   10e8c:	mov	r8, #2
   10e90:	ldr	r6, [r4, r3]
   10e94:	add	r0, pc, r0
   10e98:	ldr	r3, [r6]
   10e9c:	bl	10be0 <fwrite@plt>
   10ea0:	mov	r0, r7
   10ea4:	bl	10bd4 <SECMOD_DestroyModule@plt>
   10ea8:	bl	10b8c <NSS_Shutdown@plt>
   10eac:	cmp	r0, #0
   10eb0:	bne	10ef0 <PR_GetError@plt+0x2b0>
   10eb4:	cmp	r8, #2
   10eb8:	beq	10ca0 <PR_GetError@plt+0x60>
   10ebc:	cmp	r8, #1
   10ec0:	bne	10cbc <PR_GetError@plt+0x7c>
   10ec4:	ldr	r0, [pc, #812]	; 111f8 <PR_GetError@plt+0x5b8>
   10ec8:	mov	r1, r8
   10ecc:	ldr	r3, [r6]
   10ed0:	mov	r2, #16
   10ed4:	add	r0, pc, r0
   10ed8:	bl	10be0 <fwrite@plt>
   10edc:	b	10cbc <PR_GetError@plt+0x7c>
   10ee0:	add	r7, sp, #112	; 0x70
   10ee4:	mov	r3, #46	; 0x2e
   10ee8:	strh	r3, [r7, #-4]
   10eec:	b	10d94 <PR_GetError@plt+0x154>
   10ef0:	ldr	r4, [r6]
   10ef4:	bl	10c40 <PR_GetError@plt>
   10ef8:	mov	r1, #0
   10efc:	bl	10bc8 <PR_ErrorToString@plt>
   10f00:	ldr	r2, [pc, #756]	; 111fc <PR_GetError@plt+0x5bc>
   10f04:	mov	r1, #1
   10f08:	add	r2, pc, r2
   10f0c:	mov	r3, r0
   10f10:	mov	r0, r4
   10f14:	bl	10c04 <__fprintf_chk@plt>
   10f18:	b	10ca0 <PR_GetError@plt+0x60>
   10f1c:	ldr	r0, [pc, #732]	; 11200 <PR_GetError@plt+0x5c0>
   10f20:	add	r0, pc, r0
   10f24:	bl	10b68 <PR_GetEnvSecure@plt>
   10f28:	mov	r1, r9
   10f2c:	mov	r2, #10
   10f30:	bl	10bbc <strtol@plt>
   10f34:	cmp	r0, #1
   10f38:	mov	sl, r0
   10f3c:	bne	10e7c <PR_GetError@plt+0x23c>
   10f40:	mov	r1, r0
   10f44:	bl	10b5c <SSL_OptionSetDefault@plt>
   10f48:	cmp	r0, #0
   10f4c:	bne	11158 <PR_GetError@plt+0x518>
   10f50:	ldr	r2, [pc, #624]	; 111c8 <PR_GetError@plt+0x588>
   10f54:	add	ip, sp, #48	; 0x30
   10f58:	ldr	r3, [pc, #676]	; 11204 <PR_GetError@plt+0x5c4>
   10f5c:	mov	r8, r0
   10f60:	str	ip, [sp, #12]
   10f64:	add	ip, sp, #40	; 0x28
   10f68:	str	ip, [sp, #20]
   10f6c:	add	ip, sp, #44	; 0x2c
   10f70:	ldr	r6, [r4, r2]
   10f74:	mov	r9, r0
   10f78:	str	ip, [sp, #24]
   10f7c:	ldr	ip, [pc, #644]	; 11208 <PR_GetError@plt+0x5c8>
   10f80:	ldr	r3, [r4, r3]
   10f84:	add	ip, pc, ip
   10f88:	str	ip, [sp, #28]
   10f8c:	ldr	ip, [pc, #632]	; 1120c <PR_GetError@plt+0x5cc>
   10f90:	str	r3, [sp, #16]
   10f94:	add	ip, pc, ip
   10f98:	str	ip, [sp, #32]
   10f9c:	ldr	ip, [pc, #620]	; 11210 <PR_GetError@plt+0x5d0>
   10fa0:	add	ip, pc, ip
   10fa4:	str	ip, [sp, #36]	; 0x24
   10fa8:	b	10fdc <PR_GetError@plt+0x39c>
   10fac:	ldr	fp, [r6]
   10fb0:	bl	10c40 <PR_GetError@plt>
   10fb4:	mov	r1, #0
   10fb8:	bl	10bc8 <PR_ErrorToString@plt>
   10fbc:	str	r9, [sp]
   10fc0:	mov	r3, sl
   10fc4:	mov	r1, #1
   10fc8:	ldr	r2, [sp, #36]	; 0x24
   10fcc:	str	r0, [sp, #4]
   10fd0:	mov	r0, fp
   10fd4:	bl	10c04 <__fprintf_chk@plt>
   10fd8:	add	r9, r9, #1
   10fdc:	ldr	ip, [sp, #16]
   10fe0:	ldrh	r3, [ip]
   10fe4:	cmp	r9, r3
   10fe8:	bge	110c4 <PR_GetError@plt+0x484>
   10fec:	ldr	r3, [pc, #544]	; 11214 <PR_GetError@plt+0x5d4>
   10ff0:	lsl	r2, r9, #1
   10ff4:	ldr	r1, [sp, #20]
   10ff8:	ldr	r3, [r4, r3]
   10ffc:	ldrh	sl, [r2, r3]
   11000:	mov	r0, sl
   11004:	bl	10c28 <SSL_CipherPrefGetDefault@plt>
   11008:	subs	fp, r0, #0
   1100c:	bne	10fac <PR_GetError@plt+0x36c>
   11010:	mov	r0, sl
   11014:	ldr	r1, [sp, #24]
   11018:	mov	r2, #64	; 0x40
   1101c:	bl	10bec <SSL_GetCipherSuiteInfo@plt>
   11020:	cmp	r0, #0
   11024:	bne	1108c <PR_GetError@plt+0x44c>
   11028:	add	r1, sp, #9280	; 0x2440
   1102c:	movw	r3, #56248	; 0xdbb8
   11030:	add	r1, r1, #48	; 0x30
   11034:	movt	r3, #65535	; 0xffff
   11038:	ldr	r3, [r1, r3]
   1103c:	cmp	r3, #0
   11040:	beq	10fd8 <PR_GetError@plt+0x398>
   11044:	mov	r1, #1
   11048:	ldr	r0, [r6]
   1104c:	ldr	r2, [sp, #28]
   11050:	add	r8, r8, r1
   11054:	ldr	r3, [sp, #48]	; 0x30
   11058:	bl	10c04 <__fprintf_chk@plt>
   1105c:	b	10fd8 <PR_GetError@plt+0x398>
   11060:	bl	10bf8 <__stack_chk_fail@plt>
   11064:	ldr	r3, [pc, #348]	; 111c8 <PR_GetError@plt+0x588>
   11068:	mov	r1, #1
   1106c:	ldr	r0, [pc, #420]	; 11218 <PR_GetError@plt+0x5d8>
   11070:	mov	r2, #34	; 0x22
   11074:	mov	r8, #2
   11078:	ldr	r6, [r4, r3]
   1107c:	add	r0, pc, r0
   11080:	ldr	r3, [r6]
   11084:	bl	10be0 <fwrite@plt>
   11088:	b	10ea8 <PR_GetError@plt+0x268>
   1108c:	ldr	ip, [r6]
   11090:	str	ip, [sp, #8]
   11094:	bl	10c40 <PR_GetError@plt>
   11098:	mov	r1, fp
   1109c:	bl	10bc8 <PR_ErrorToString@plt>
   110a0:	ldr	ip, [sp, #8]
   110a4:	str	r9, [sp]
   110a8:	mov	r3, sl
   110ac:	mov	r1, #1
   110b0:	ldr	r2, [sp, #32]
   110b4:	str	r0, [sp, #4]
   110b8:	mov	r0, ip
   110bc:	bl	10c04 <__fprintf_chk@plt>
   110c0:	b	10fd8 <PR_GetError@plt+0x398>
   110c4:	cmp	r8, #0
   110c8:	ldr	r0, [r6]
   110cc:	beq	11190 <PR_GetError@plt+0x550>
   110d0:	ldr	r3, [pc, #324]	; 1121c <PR_GetError@plt+0x5dc>
   110d4:	mov	r1, #1
   110d8:	ldr	r2, [pc, #320]	; 11220 <PR_GetError@plt+0x5e0>
   110dc:	ldr	r3, [r4, r3]
   110e0:	add	r2, pc, r2
   110e4:	str	r8, [sp]
   110e8:	ldr	r3, [r3]
   110ec:	bl	10c04 <__fprintf_chk@plt>
   110f0:	ldr	r1, [pc, #300]	; 11224 <PR_GetError@plt+0x5e4>
   110f4:	mov	r0, #0
   110f8:	add	r1, pc, r1
   110fc:	bl	11378 <PR_GetError@plt+0x738>
   11100:	ldr	r1, [pc, #288]	; 11228 <PR_GetError@plt+0x5e8>
   11104:	mov	r0, #1
   11108:	add	r1, pc, r1
   1110c:	bl	11378 <PR_GetError@plt+0x738>
   11110:	ldr	r0, [pc, #276]	; 1122c <PR_GetError@plt+0x5ec>
   11114:	add	r0, pc, r0
   11118:	bl	10b68 <PR_GetEnvSecure@plt>
   1111c:	mov	r1, #0
   11120:	mov	r2, #10
   11124:	bl	10bbc <strtol@plt>
   11128:	subs	r4, r0, #0
   1112c:	movne	r8, #2
   11130:	bne	10ea0 <PR_GetError@plt+0x260>
   11134:	ldr	r0, [pc, #244]	; 11230 <PR_GetError@plt+0x5f0>
   11138:	add	r0, pc, r0
   1113c:	bl	10b68 <PR_GetEnvSecure@plt>
   11140:	mov	r1, r4
   11144:	mov	r2, #10
   11148:	bl	10bbc <strtol@plt>
   1114c:	adds	r8, r0, #0
   11150:	movne	r8, #1
   11154:	b	10ea0 <PR_GetError@plt+0x260>
   11158:	ldr	r3, [pc, #104]	; 111c8 <PR_GetError@plt+0x588>
   1115c:	mov	r8, #2
   11160:	ldr	r6, [r4, r3]
   11164:	ldr	r4, [r6]
   11168:	bl	10c40 <PR_GetError@plt>
   1116c:	mov	r1, r9
   11170:	bl	10bc8 <PR_ErrorToString@plt>
   11174:	ldr	r2, [pc, #184]	; 11234 <PR_GetError@plt+0x5f4>
   11178:	mov	r1, sl
   1117c:	add	r2, pc, r2
   11180:	mov	r3, r0
   11184:	mov	r0, r4
   11188:	bl	10c04 <__fprintf_chk@plt>
   1118c:	b	10ea0 <PR_GetError@plt+0x260>
   11190:	ldr	r3, [pc, #160]	; 11238 <PR_GetError@plt+0x5f8>
   11194:	mov	r1, #1
   11198:	ldr	r2, [pc, #156]	; 1123c <PR_GetError@plt+0x5fc>
   1119c:	ldr	r3, [r4, r3]
   111a0:	add	r2, pc, r2
   111a4:	str	r8, [sp]
   111a8:	ldr	r3, [r3]
   111ac:	bl	10c04 <__fprintf_chk@plt>
   111b0:	ldr	r0, [pc, #136]	; 11240 <PR_GetError@plt+0x600>
   111b4:	add	r0, pc, r0
   111b8:	bl	10b50 <PR_SetEnv@plt>
   111bc:	b	110f0 <PR_GetError@plt+0x4b0>
   111c0:	muleq	r1, r4, r3
   111c4:	andeq	r0, r0, r8, ror r0
   111c8:	andeq	r0, r0, r0, lsl #1
   111cc:	andeq	r0, r0, r4, ror #17
   111d0:	andeq	r0, r0, r8, asr #23
   111d4:	andeq	r0, r0, r0, lsr #17
   111d8:	andeq	r0, r0, r4, asr r8
   111dc:	andeq	r0, r0, r8, lsr r8
   111e0:	andeq	r0, r0, ip, asr #15
   111e4:	andeq	r0, r0, r0, lsl r8
   111e8:	andeq	r0, r0, r8, lsl r8
   111ec:	andeq	r0, r0, r0, lsr #16
   111f0:	andeq	r0, r0, r0, lsl r8
   111f4:	andeq	r0, r0, ip, lsl #20
   111f8:			; <UNDEFINED> instruction: 0x000009b8
   111fc:	andeq	r0, r0, r4, asr r9
   11200:	andeq	r0, r0, r4, lsl #16
   11204:	andeq	r0, r0, ip, ror r0
   11208:	andeq	r0, r0, r4, asr r8
   1120c:	andeq	r0, r0, r4, lsl #16
   11210:			; <UNDEFINED> instruction: 0x000007b8
   11214:	andeq	r0, r0, r0, ror r0
   11218:	andeq	r0, r0, r4, lsr #16
   1121c:	andeq	r0, r0, r4, ror r0
   11220:	andeq	r0, r0, r4, lsr #14
   11224:	andeq	r0, r0, r8, lsr r7
   11228:	andeq	r0, r0, ip, lsr #14
   1122c:	andeq	r0, r0, r8, lsr #14
   11230:	andeq	r0, r0, r4, lsl r7
   11234:			; <UNDEFINED> instruction: 0x000005bc
   11238:	andeq	r0, r0, r4, lsl #1
   1123c:	andeq	r0, r0, r4, ror #12
   11240:			; <UNDEFINED> instruction: 0x000003b0
   11244:	mov	fp, #0
   11248:	mov	lr, #0
   1124c:	pop	{r1}		; (ldr r1, [sp], #4)
   11250:	mov	r2, sp
   11254:	push	{r2}		; (str r2, [sp, #-4]!)
   11258:	push	{r0}		; (str r0, [sp, #-4]!)
   1125c:	ldr	ip, [pc, #16]	; 11274 <PR_GetError@plt+0x634>
   11260:	push	{ip}		; (str ip, [sp, #-4]!)
   11264:	ldr	r0, [pc, #12]	; 11278 <PR_GetError@plt+0x638>
   11268:	ldr	r3, [pc, #12]	; 1127c <PR_GetError@plt+0x63c>
   1126c:	bl	10b38 <__libc_start_main@plt>
   11270:	bl	10b2c <abort@plt>
   11274:	andeq	r1, r1, ip, lsr #10
   11278:	andeq	r0, r1, ip, asr #24
   1127c:	andeq	r1, r1, r8, asr #9
   11280:	ldr	r3, [pc, #20]	; 1129c <PR_GetError@plt+0x65c>
   11284:	ldr	r2, [pc, #20]	; 112a0 <PR_GetError@plt+0x660>
   11288:	add	r3, pc, r3
   1128c:	ldr	r2, [r3, r2]
   11290:	cmp	r2, #0
   11294:	bxeq	lr
   11298:	b	10b44 <__gmon_start__@plt>
   1129c:	andeq	r0, r1, r0, ror sp
   112a0:	andeq	r0, r0, ip, rrx
   112a4:	push	{r3, lr}
   112a8:	movw	r0, #8340	; 0x2094
   112ac:	ldr	r3, [pc, #36]	; 112d8 <PR_GetError@plt+0x698>
   112b0:	movt	r0, #2
   112b4:	rsb	r3, r0, r3
   112b8:	cmp	r3, #6
   112bc:	popls	{r3, pc}
   112c0:	movw	r3, #0
   112c4:	movt	r3, #0
   112c8:	cmp	r3, #0
   112cc:	popeq	{r3, pc}
   112d0:	blx	r3
   112d4:	pop	{r3, pc}
   112d8:	muleq	r2, r7, r0
   112dc:	push	{r3, lr}
   112e0:	movw	r0, #8340	; 0x2094
   112e4:	movw	r3, #8340	; 0x2094
   112e8:	movt	r0, #2
   112ec:	movt	r3, #2
   112f0:	rsb	r3, r0, r3
   112f4:	asr	r3, r3, #2
   112f8:	add	r3, r3, r3, lsr #31
   112fc:	asrs	r1, r3, #1
   11300:	popeq	{r3, pc}
   11304:	movw	r2, #0
   11308:	movt	r2, #0
   1130c:	cmp	r2, #0
   11310:	popeq	{r3, pc}
   11314:	blx	r2
   11318:	pop	{r3, pc}
   1131c:	push	{r4, lr}
   11320:	movw	r4, #8340	; 0x2094
   11324:	movt	r4, #2
   11328:	ldrb	r3, [r4]
   1132c:	cmp	r3, #0
   11330:	popne	{r4, pc}
   11334:	bl	112a4 <PR_GetError@plt+0x664>
   11338:	mov	r3, #1
   1133c:	strb	r3, [r4]
   11340:	pop	{r4, pc}
   11344:	movw	r0, #7860	; 0x1eb4
   11348:	movt	r0, #2
   1134c:	push	{r3, lr}
   11350:	ldr	r3, [r0]
   11354:	cmp	r3, #0
   11358:	beq	11370 <PR_GetError@plt+0x730>
   1135c:	movw	r3, #0
   11360:	movt	r3, #0
   11364:	cmp	r3, #0
   11368:	beq	11370 <PR_GetError@plt+0x730>
   1136c:	blx	r3
   11370:	pop	{r3, lr}
   11374:	b	112dc <PR_GetError@plt+0x69c>
   11378:	push	{r4, r5, r6, r7, lr}
   1137c:	sub	sp, sp, #28
   11380:	ldr	r4, [pc, #288]	; 114a8 <PR_GetError@plt+0x868>
   11384:	mov	r6, r1
   11388:	ldr	r3, [pc, #284]	; 114ac <PR_GetError@plt+0x86c>
   1138c:	add	r1, sp, #12
   11390:	add	r4, pc, r4
   11394:	mov	r7, r0
   11398:	ldr	r5, [r4, r3]
   1139c:	ldr	r3, [r5]
   113a0:	str	r3, [sp, #20]
   113a4:	bl	10b98 <SSL_VersionRangeGetSupported@plt>
   113a8:	cmp	r0, #0
   113ac:	beq	11404 <PR_GetError@plt+0x7c4>
   113b0:	ldr	r3, [pc, #248]	; 114b0 <PR_GetError@plt+0x870>
   113b4:	ldr	r3, [r4, r3]
   113b8:	ldr	r0, [r3]
   113bc:	ldr	r3, [pc, #240]	; 114b4 <PR_GetError@plt+0x874>
   113c0:	mov	ip, #0
   113c4:	ldr	r2, [pc, #236]	; 114b8 <PR_GetError@plt+0x878>
   113c8:	mov	r1, #1
   113cc:	ldr	r3, [r4, r3]
   113d0:	add	r2, pc, r2
   113d4:	stm	sp, {r6, ip}
   113d8:	ldr	r3, [r3]
   113dc:	bl	10c04 <__fprintf_chk@plt>
   113e0:	ldr	r0, [pc, #212]	; 114bc <PR_GetError@plt+0x87c>
   113e4:	add	r0, pc, r0
   113e8:	bl	10b50 <PR_SetEnv@plt>
   113ec:	ldr	r2, [sp, #20]
   113f0:	ldr	r3, [r5]
   113f4:	cmp	r2, r3
   113f8:	bne	114a4 <PR_GetError@plt+0x864>
   113fc:	add	sp, sp, #28
   11400:	pop	{r4, r5, r6, r7, pc}
   11404:	mov	r0, r7
   11408:	add	r1, sp, #16
   1140c:	bl	10c1c <SSL_VersionRangeGetDefault@plt>
   11410:	cmp	r0, #0
   11414:	bne	113b0 <PR_GetError@plt+0x770>
   11418:	ldrh	r3, [sp, #16]
   1141c:	cmp	r3, #0
   11420:	beq	113b0 <PR_GetError@plt+0x770>
   11424:	ldrh	r2, [sp, #18]
   11428:	cmp	r2, #0
   1142c:	beq	113b0 <PR_GetError@plt+0x770>
   11430:	ldrh	r1, [sp, #12]
   11434:	cmp	r2, r1
   11438:	bcc	113b0 <PR_GetError@plt+0x770>
   1143c:	ldrh	r0, [sp, #14]
   11440:	cmp	r3, r0
   11444:	bhi	113b0 <PR_GetError@plt+0x770>
   11448:	cmp	r3, r1
   1144c:	strhcc	r1, [sp, #16]
   11450:	movcc	r3, r1
   11454:	cmp	r2, r0
   11458:	strhhi	r0, [sp, #18]
   1145c:	movhi	r2, r0
   11460:	cmp	r3, r2
   11464:	bhi	113b0 <PR_GetError@plt+0x770>
   11468:	ldr	r1, [pc, #64]	; 114b0 <PR_GetError@plt+0x870>
   1146c:	rsb	r3, r3, r2
   11470:	adds	ip, r3, #1
   11474:	ldr	r3, [r4, r1]
   11478:	ldr	r0, [r3]
   1147c:	beq	113bc <PR_GetError@plt+0x77c>
   11480:	ldr	r3, [pc, #56]	; 114c0 <PR_GetError@plt+0x880>
   11484:	mov	r1, #1
   11488:	ldr	r2, [pc, #52]	; 114c4 <PR_GetError@plt+0x884>
   1148c:	ldr	r3, [r4, r3]
   11490:	add	r2, pc, r2
   11494:	stm	sp, {r6, ip}
   11498:	ldr	r3, [r3]
   1149c:	bl	10c04 <__fprintf_chk@plt>
   114a0:	b	113ec <PR_GetError@plt+0x7ac>
   114a4:	bl	10bf8 <__stack_chk_fail@plt>
   114a8:	andeq	r0, r1, r8, ror #24
   114ac:	andeq	r0, r0, r8, ror r0
   114b0:	andeq	r0, r0, r0, lsl #1
   114b4:	andeq	r0, r0, r4, lsl #1
   114b8:	andeq	r0, r0, r8, ror #2
   114bc:	andeq	r0, r0, r0, lsl #3
   114c0:	andeq	r0, r0, r4, ror r0
   114c4:	andeq	r0, r0, r8, lsr #1
   114c8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   114cc:	mov	r7, r0
   114d0:	ldr	r6, [pc, #76]	; 11524 <PR_GetError@plt+0x8e4>
   114d4:	mov	r8, r1
   114d8:	ldr	r5, [pc, #72]	; 11528 <PR_GetError@plt+0x8e8>
   114dc:	mov	r9, r2
   114e0:	add	r6, pc, r6
   114e4:	bl	10b0c <_init@@Base>
   114e8:	add	r5, pc, r5
   114ec:	rsb	r6, r5, r6
   114f0:	asrs	r6, r6, #2
   114f4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   114f8:	sub	r5, r5, #4
   114fc:	mov	r4, #0
   11500:	add	r4, r4, #1
   11504:	ldr	r3, [r5, #4]!
   11508:	mov	r0, r7
   1150c:	mov	r1, r8
   11510:	mov	r2, r9
   11514:	blx	r3
   11518:	cmp	r4, r6
   1151c:	bne	11500 <PR_GetError@plt+0x8c0>
   11520:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11524:	andeq	r0, r1, r8, asr #19
   11528:			; <UNDEFINED> instruction: 0x000109bc
   1152c:	bx	lr

Disassembly of section .fini:

00011530 <_fini@@Base>:
   11530:	push	{r3, lr}
   11534:	pop	{r3, pc}
