
centos-preinstalled/head:     file format elf32-littlearm


Disassembly of section .init:

00010f60 <.init>:
   10f60:	push	{r3, lr}
   10f64:	bl	12484 <__assert_fail@plt+0x124c>
   10f68:	pop	{r3, pc}

Disassembly of section .plt:

00010f6c <fdopen@plt-0x14>:
   10f6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f70:	ldr	lr, [pc, #4]	; 10f7c <fdopen@plt-0x4>
   10f74:	add	lr, pc, lr
   10f78:	ldr	pc, [lr, #8]!
   10f7c:	andeq	r8, r1, r4, lsl #1

00010f80 <fdopen@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #132]!	; 0x84

00010f8c <calloc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #124]!	; 0x7c

00010f98 <fputs_unlocked@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #116]!	; 0x74

00010fa4 <raise@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #108]!	; 0x6c

00010fb0 <strcmp@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #100]!	; 0x64

00010fbc <read@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #92]!	; 0x5c

00010fc8 <fflush@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #84]!	; 0x54

00010fd4 <free@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #76]!	; 0x4c

00010fe0 <_exit@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #68]!	; 0x44

00010fec <memcpy@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #60]!	; 0x3c

00010ff8 <__strtoull_internal@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #52]!	; 0x34

00011004 <mbsinit@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #44]!	; 0x2c

00011010 <fwrite_unlocked@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #36]!	; 0x24

0001101c <memcmp@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #28]!

00011028 <dcgettext@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #20]!

00011034 <__stack_chk_fail@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #12]!

00011040 <realloc@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #4]!

0001104c <textdomain@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #4092]!	; 0xffc

00011058 <iswprint@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #4084]!	; 0xff4

00011064 <__fxstat64@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #4076]!	; 0xfec

00011070 <fwrite@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #4068]!	; 0xfe4

0001107c <lseek64@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #4060]!	; 0xfdc

00011088 <__ctype_get_mb_cur_max@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #4052]!	; 0xfd4

00011094 <strcpy@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #4044]!	; 0xfcc

000110a0 <__fpending@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #4036]!	; 0xfc4

000110ac <mbrtowc@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110b8 <error@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110c4 <open64@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #4012]!	; 0xfac

000110d0 <getenv@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110dc <malloc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110e8 <__libc_start_main@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #3988]!	; 0xf94

000110f4 <__freading@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #3980]!	; 0xf8c

00011100 <__gmon_start__@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #3972]!	; 0xf84

0001110c <getopt_long@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #3964]!	; 0xf7c

00011118 <__ctype_b_loc@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #3956]!	; 0xf74

00011124 <exit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011130 <strlen@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #3940]!	; 0xf64

0001113c <strchr@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3932]!	; 0xf5c

00011148 <memrchr@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3924]!	; 0xf54

00011154 <ungetc@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011160 <__errno_location@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #94208	; 0x17000
   11168:	ldr	pc, [ip, #3908]!	; 0xf44

0001116c <__cxa_atexit@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #94208	; 0x17000
   11174:	ldr	pc, [ip, #3900]!	; 0xf3c

00011178 <memset@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #94208	; 0x17000
   11180:	ldr	pc, [ip, #3892]!	; 0xf34

00011184 <fscanf@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #94208	; 0x17000
   1118c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011190 <__printf_chk@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #94208	; 0x17000
   11198:	ldr	pc, [ip, #3876]!	; 0xf24

0001119c <fileno@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #94208	; 0x17000
   111a4:	ldr	pc, [ip, #3868]!	; 0xf1c

000111a8 <__fprintf_chk@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #94208	; 0x17000
   111b0:	ldr	pc, [ip, #3860]!	; 0xf14

000111b4 <memchr@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #94208	; 0x17000
   111bc:	ldr	pc, [ip, #3852]!	; 0xf0c

000111c0 <fclose@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #94208	; 0x17000
   111c8:	ldr	pc, [ip, #3844]!	; 0xf04

000111cc <fseeko64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #94208	; 0x17000
   111d4:	ldr	pc, [ip, #3836]!	; 0xefc

000111d8 <__uflow@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #94208	; 0x17000
   111e0:	ldr	pc, [ip, #3828]!	; 0xef4

000111e4 <setlocale@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #94208	; 0x17000
   111ec:	ldr	pc, [ip, #3820]!	; 0xeec

000111f0 <strrchr@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #94208	; 0x17000
   111f8:	ldr	pc, [ip, #3812]!	; 0xee4

000111fc <nl_langinfo@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #94208	; 0x17000
   11204:	ldr	pc, [ip, #3804]!	; 0xedc

00011208 <bindtextdomain@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #94208	; 0x17000
   11210:	ldr	pc, [ip, #3796]!	; 0xed4

00011214 <strncmp@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #94208	; 0x17000
   1121c:	ldr	pc, [ip, #3788]!	; 0xecc

00011220 <abort@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #94208	; 0x17000
   11228:	ldr	pc, [ip, #3780]!	; 0xec4

0001122c <close@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #94208	; 0x17000
   11234:	ldr	pc, [ip, #3772]!	; 0xebc

00011238 <__assert_fail@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #94208	; 0x17000
   11240:	ldr	pc, [ip, #3764]!	; 0xeb4

Disassembly of section .text:

00011244 <close_stdout@@Base-0x2108>:
   11244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11248:	sub	sp, sp, #276	; 0x114
   1124c:	ldr	fp, [pc, #3884]	; 12180 <__assert_fail@plt+0xf48>
   11250:	mov	r5, r0
   11254:	ldr	r3, [pc, #3880]	; 12184 <__assert_fail@plt+0xf4c>
   11258:	mov	r4, r1
   1125c:	add	fp, pc, fp
   11260:	ldr	r0, [r1]
   11264:	ldr	r6, [pc, #3868]	; 12188 <__assert_fail@plt+0xf50>
   11268:	mov	sl, #0
   1126c:	ldr	r3, [fp, r3]
   11270:	add	r6, pc, r6
   11274:	ldr	r3, [r3]
   11278:	str	r3, [sp, #268]	; 0x10c
   1127c:	bl	136a4 <close_stdout@@Base+0x358>
   11280:	ldr	r1, [pc, #3844]	; 1218c <__assert_fail@plt+0xf54>
   11284:	mov	r0, #6
   11288:	add	r1, pc, r1
   1128c:	bl	111e4 <setlocale@plt>
   11290:	ldr	r1, [pc, #3832]	; 12190 <__assert_fail@plt+0xf58>
   11294:	mov	r0, r6
   11298:	add	r1, pc, r1
   1129c:	bl	11208 <bindtextdomain@plt>
   112a0:	mov	r0, r6
   112a4:	bl	1104c <textdomain@plt>
   112a8:	ldr	r3, [pc, #3812]	; 12194 <__assert_fail@plt+0xf5c>
   112ac:	ldr	r0, [fp, r3]
   112b0:	bl	17148 <close_stdout@@Base+0x3dfc>
   112b4:	ldr	r3, [pc, #3804]	; 12198 <__assert_fail@plt+0xf60>
   112b8:	cmp	r5, #1
   112bc:	add	r3, pc, r3
   112c0:	strb	sl, [r3]
   112c4:	strb	sl, [r3, #1]
   112c8:	ble	112dc <__assert_fail@plt+0xa4>
   112cc:	ldr	r2, [r4, #4]
   112d0:	ldrb	r3, [r2]
   112d4:	cmp	r3, #45	; 0x2d
   112d8:	beq	11498 <__assert_fail@plt+0x260>
   112dc:	mov	ip, #1
   112e0:	mov	r0, #10
   112e4:	mov	r1, #0
   112e8:	str	ip, [sp, #48]	; 0x30
   112ec:	strd	r0, [sp, #40]	; 0x28
   112f0:	ldr	r6, [pc, #3748]	; 1219c <__assert_fail@plt+0xf64>
   112f4:	mov	ip, #0
   112f8:	ldr	r7, [pc, #3744]	; 121a0 <__assert_fail@plt+0xf68>
   112fc:	mov	r8, ip
   11300:	add	r6, pc, r6
   11304:	str	ip, [sp, #32]
   11308:	add	r7, pc, r7
   1130c:	ldr	ip, [pc, #3728]	; 121a4 <__assert_fail@plt+0xf6c>
   11310:	add	r6, r6, #8
   11314:	add	ip, pc, ip
   11318:	str	ip, [sp, #24]
   1131c:	str	r8, [sp]
   11320:	mov	r0, r5
   11324:	mov	r1, r4
   11328:	mov	r2, r7
   1132c:	mov	r3, r6
   11330:	mov	r9, #0
   11334:	bl	1110c <getopt_long@plt>
   11338:	cmn	r0, #1
   1133c:	beq	11600 <__assert_fail@plt+0x3c8>
   11340:	cmp	r0, #110	; 0x6e
   11344:	beq	11450 <__assert_fail@plt+0x218>
   11348:	bgt	113b0 <__assert_fail@plt+0x178>
   1134c:	cmn	r0, #2
   11350:	beq	11448 <__assert_fail@plt+0x210>
   11354:	cmp	r0, #99	; 0x63
   11358:	beq	113f0 <__assert_fail@plt+0x1b8>
   1135c:	cmn	r0, #3
   11360:	mov	r3, r0
   11364:	bne	113cc <__assert_fail@plt+0x194>
   11368:	ldr	r2, [pc, #3772]	; 1222c <__assert_fail@plt+0xff4>
   1136c:	ldr	r3, [pc, #3636]	; 121a8 <__assert_fail@plt+0xf70>
   11370:	ldr	r1, [pc, #3636]	; 121ac <__assert_fail@plt+0xf74>
   11374:	ldr	r0, [fp, r2]
   11378:	ldr	r3, [fp, r3]
   1137c:	add	r1, pc, r1
   11380:	ldr	r2, [pc, #3624]	; 121b0 <__assert_fail@plt+0xf78>
   11384:	ldr	r0, [r0]
   11388:	add	r2, pc, r2
   1138c:	ldr	r3, [r3]
   11390:	stm	sp, {r1, r2, r9}
   11394:	ldr	r1, [pc, #3608]	; 121b4 <__assert_fail@plt+0xf7c>
   11398:	ldr	r2, [pc, #3608]	; 121b8 <__assert_fail@plt+0xf80>
   1139c:	add	r1, pc, r1
   113a0:	add	r2, pc, r2
   113a4:	bl	153f0 <close_stdout@@Base+0x20a4>
   113a8:	mov	r0, r9
   113ac:	bl	11124 <exit@plt>
   113b0:	cmp	r0, #118	; 0x76
   113b4:	beq	11440 <__assert_fail@plt+0x208>
   113b8:	cmp	r0, #256	; 0x100
   113bc:	beq	113e0 <__assert_fail@plt+0x1a8>
   113c0:	cmp	r0, #113	; 0x71
   113c4:	beq	11438 <__assert_fail@plt+0x200>
   113c8:	mov	r3, r0
   113cc:	sub	r2, r3, #48	; 0x30
   113d0:	cmp	r2, #9
   113d4:	bls	115d0 <__assert_fail@plt+0x398>
   113d8:	mov	r0, #1
   113dc:	bl	130c8 <__assert_fail@plt+0x1e90>
   113e0:	ldr	ip, [sp, #24]
   113e4:	mov	lr, #1
   113e8:	strb	lr, [ip, #2]
   113ec:	b	1131c <__assert_fail@plt+0xe4>
   113f0:	ldr	r3, [pc, #3524]	; 121bc <__assert_fail@plt+0xf84>
   113f4:	mov	r0, #0
   113f8:	ldr	r3, [fp, r3]
   113fc:	ldr	r2, [r3]
   11400:	ldrb	r1, [r2]
   11404:	subs	ip, r1, #45	; 0x2d
   11408:	rsbs	r1, ip, #0
   1140c:	adcs	r1, r1, ip
   11410:	str	r1, [sp, #32]
   11414:	cmp	r1, #0
   11418:	addne	r2, r2, #1
   1141c:	strne	r2, [r3]
   11420:	ldr	r1, [r3]
   11424:	bl	1257c <__assert_fail@plt+0x1344>
   11428:	mov	ip, #0
   1142c:	str	ip, [sp, #48]	; 0x30
   11430:	strd	r0, [sp, #40]	; 0x28
   11434:	b	1131c <__assert_fail@plt+0xe4>
   11438:	mov	sl, #2
   1143c:	b	1131c <__assert_fail@plt+0xe4>
   11440:	mov	sl, #1
   11444:	b	1131c <__assert_fail@plt+0xe4>
   11448:	mov	r0, r9
   1144c:	bl	130c8 <__assert_fail@plt+0x1e90>
   11450:	ldr	r3, [pc, #3428]	; 121bc <__assert_fail@plt+0xf84>
   11454:	ldr	r3, [fp, r3]
   11458:	ldr	r2, [r3]
   1145c:	ldrb	r1, [r2]
   11460:	subs	r0, r1, #45	; 0x2d
   11464:	rsbs	r1, r0, #0
   11468:	adcs	r1, r1, r0
   1146c:	mov	r0, #1
   11470:	cmp	r1, #0
   11474:	str	r1, [sp, #32]
   11478:	addne	r2, r2, #1
   1147c:	strne	r2, [r3]
   11480:	ldr	r1, [r3]
   11484:	bl	1257c <__assert_fail@plt+0x1344>
   11488:	mov	ip, #1
   1148c:	str	ip, [sp, #48]	; 0x30
   11490:	strd	r0, [sp, #40]	; 0x28
   11494:	b	1131c <__assert_fail@plt+0xe4>
   11498:	ldrb	r3, [r2, #1]
   1149c:	sub	r3, r3, #48	; 0x30
   114a0:	cmp	r3, #9
   114a4:	bhi	11550 <__assert_fail@plt+0x318>
   114a8:	add	r1, r2, #1
   114ac:	add	r2, r2, #2
   114b0:	mov	r3, r2
   114b4:	add	r2, r2, #1
   114b8:	ldrb	r0, [r3]
   114bc:	sub	r0, r0, #48	; 0x30
   114c0:	cmp	r0, #9
   114c4:	bls	114b0 <__assert_fail@plt+0x278>
   114c8:	mov	lr, #0
   114cc:	mov	r2, r3
   114d0:	mov	sl, lr
   114d4:	mov	ip, #1
   114d8:	str	ip, [sp, #48]	; 0x30
   114dc:	mov	r6, r2
   114e0:	ldrb	r0, [r2], #1
   114e4:	cmp	r0, #0
   114e8:	beq	11fec <__assert_fail@plt+0xdb4>
   114ec:	sub	ip, r0, #98	; 0x62
   114f0:	cmp	ip, #20
   114f4:	addls	pc, pc, ip, lsl #2
   114f8:	b	115a0 <__assert_fail@plt+0x368>
   114fc:	b	11568 <__assert_fail@plt+0x330>
   11500:	b	11594 <__assert_fail@plt+0x35c>
   11504:	b	115a0 <__assert_fail@plt+0x368>
   11508:	b	115a0 <__assert_fail@plt+0x368>
   1150c:	b	115a0 <__assert_fail@plt+0x368>
   11510:	b	115a0 <__assert_fail@plt+0x368>
   11514:	b	115a0 <__assert_fail@plt+0x368>
   11518:	b	115a0 <__assert_fail@plt+0x368>
   1151c:	b	115a0 <__assert_fail@plt+0x368>
   11520:	b	11568 <__assert_fail@plt+0x330>
   11524:	b	11588 <__assert_fail@plt+0x350>
   11528:	b	11568 <__assert_fail@plt+0x330>
   1152c:	b	115a0 <__assert_fail@plt+0x368>
   11530:	b	115a0 <__assert_fail@plt+0x368>
   11534:	b	115a0 <__assert_fail@plt+0x368>
   11538:	b	11580 <__assert_fail@plt+0x348>
   1153c:	b	115a0 <__assert_fail@plt+0x368>
   11540:	b	115a0 <__assert_fail@plt+0x368>
   11544:	b	115a0 <__assert_fail@plt+0x368>
   11548:	b	115a0 <__assert_fail@plt+0x368>
   1154c:	b	11578 <__assert_fail@plt+0x340>
   11550:	mov	r2, #10
   11554:	mov	r3, #0
   11558:	mov	ip, #1
   1155c:	strd	r2, [sp, #40]	; 0x28
   11560:	str	ip, [sp, #48]	; 0x30
   11564:	b	112f0 <__assert_fail@plt+0xb8>
   11568:	mov	ip, #0
   1156c:	mov	lr, r0
   11570:	str	ip, [sp, #48]	; 0x30
   11574:	b	114dc <__assert_fail@plt+0x2a4>
   11578:	mov	sl, #1
   1157c:	b	114dc <__assert_fail@plt+0x2a4>
   11580:	mov	sl, #2
   11584:	b	114dc <__assert_fail@plt+0x2a4>
   11588:	mov	ip, #1
   1158c:	str	ip, [sp, #48]	; 0x30
   11590:	b	114dc <__assert_fail@plt+0x2a4>
   11594:	mov	lr, #0
   11598:	str	lr, [sp, #48]	; 0x30
   1159c:	b	114dc <__assert_fail@plt+0x2a4>
   115a0:	ldr	r1, [pc, #3096]	; 121c0 <__assert_fail@plt+0xf88>
   115a4:	mov	r2, #5
   115a8:	mov	r0, #0
   115ac:	add	r1, pc, r1
   115b0:	bl	11028 <dcgettext@plt>
   115b4:	ldrb	r3, [r6]
   115b8:	mov	r2, r0
   115bc:	mov	r0, #0
   115c0:	mov	r1, r0
   115c4:	bl	110b8 <error@plt>
   115c8:	mov	r0, #1
   115cc:	bl	130c8 <__assert_fail@plt+0x1e90>
   115d0:	ldr	r1, [pc, #3052]	; 121c4 <__assert_fail@plt+0xf8c>
   115d4:	mov	r2, #5
   115d8:	mov	r0, #0
   115dc:	str	r3, [sp, #20]
   115e0:	add	r1, pc, r1
   115e4:	bl	11028 <dcgettext@plt>
   115e8:	ldr	r3, [sp, #20]
   115ec:	mov	r2, r0
   115f0:	mov	r0, #0
   115f4:	mov	r1, r0
   115f8:	bl	110b8 <error@plt>
   115fc:	b	113d8 <__assert_fail@plt+0x1a0>
   11600:	ldr	r3, [pc, #3008]	; 121c8 <__assert_fail@plt+0xf90>
   11604:	cmp	sl, #1
   11608:	ldreq	r6, [fp, r3]
   1160c:	beq	11630 <__assert_fail@plt+0x3f8>
   11610:	cmp	sl, #0
   11614:	ldrne	r6, [fp, r3]
   11618:	bne	11640 <__assert_fail@plt+0x408>
   1161c:	ldr	r6, [fp, r3]
   11620:	sub	r2, r5, #1
   11624:	ldr	r3, [r6]
   11628:	cmp	r2, r3
   1162c:	ble	11640 <__assert_fail@plt+0x408>
   11630:	ldr	r3, [pc, #2964]	; 121cc <__assert_fail@plt+0xf94>
   11634:	mov	r2, #1
   11638:	add	r3, pc, r3
   1163c:	strb	r2, [r3, #1]
   11640:	ldr	ip, [sp, #48]	; 0x30
   11644:	eor	r3, ip, #1
   11648:	ldr	ip, [sp, #32]
   1164c:	tst	ip, r3
   11650:	beq	11664 <__assert_fail@plt+0x42c>
   11654:	ldrd	r0, [sp, #40]	; 0x28
   11658:	cmp	r0, #0
   1165c:	sbcs	r1, r1, #0
   11660:	blt	123f0 <__assert_fail@plt+0x11b8>
   11664:	ldr	r3, [r6]
   11668:	cmp	r3, r5
   1166c:	addlt	r3, r4, r3, lsl #2
   11670:	ldrge	r3, [pc, #2904]	; 121d0 <__assert_fail@plt+0xf98>
   11674:	addge	r3, pc, r3
   11678:	ldr	ip, [sp, #40]	; 0x28
   1167c:	sub	r3, r3, #4
   11680:	ldr	lr, [sp, #40]	; 0x28
   11684:	ubfx	ip, ip, #0, #13
   11688:	str	ip, [sp, #112]	; 0x70
   1168c:	ldr	ip, [sp, #40]	; 0x28
   11690:	str	r3, [sp, #56]	; 0x38
   11694:	add	ip, ip, #8192	; 0x2000
   11698:	str	ip, [sp, #88]	; 0x58
   1169c:	ldr	ip, [sp, #112]	; 0x70
   116a0:	ldrd	r0, [sp, #40]	; 0x28
   116a4:	rsb	ip, ip, #8192	; 0x2000
   116a8:	str	ip, [sp, #104]	; 0x68
   116ac:	add	r3, ip, lr
   116b0:	ldr	ip, [sp, #88]	; 0x58
   116b4:	adds	r0, r0, #8192	; 0x2000
   116b8:	str	lr, [sp, #76]	; 0x4c
   116bc:	lsr	r3, r3, #13
   116c0:	adc	r1, r1, #0
   116c4:	lsl	ip, ip, #1
   116c8:	str	ip, [sp, #108]	; 0x6c
   116cc:	mov	ip, #1
   116d0:	str	ip, [sp, #60]	; 0x3c
   116d4:	ldr	ip, [pc, #2808]	; 121d4 <__assert_fail@plt+0xf9c>
   116d8:	add	r3, r3, #1
   116dc:	strd	r0, [sp, #96]	; 0x60
   116e0:	add	ip, pc, ip
   116e4:	str	ip, [sp, #68]	; 0x44
   116e8:	ldr	ip, [pc, #2792]	; 121d8 <__assert_fail@plt+0xfa0>
   116ec:	str	r3, [sp, #84]	; 0x54
   116f0:	add	ip, pc, ip
   116f4:	str	ip, [sp, #116]	; 0x74
   116f8:	ldr	ip, [pc, #2780]	; 121dc <__assert_fail@plt+0xfa4>
   116fc:	str	fp, [sp, #52]	; 0x34
   11700:	add	ip, pc, ip
   11704:	str	ip, [sp, #92]	; 0x5c
   11708:	lsr	ip, r3, #1
   1170c:	str	ip, [sp, #80]	; 0x50
   11710:	ldr	ip, [pc, #2760]	; 121e0 <__assert_fail@plt+0xfa8>
   11714:	add	ip, pc, ip
   11718:	str	ip, [sp, #120]	; 0x78
   1171c:	ldr	ip, [pc, #2752]	; 121e4 <__assert_fail@plt+0xfac>
   11720:	add	ip, pc, ip
   11724:	str	ip, [sp, #124]	; 0x7c
   11728:	b	1181c <__assert_fail@plt+0x5e4>
   1172c:	ldrb	r3, [ip, #1]
   11730:	cmp	r3, #0
   11734:	bne	11844 <__assert_fail@plt+0x60c>
   11738:	ldr	lr, [pc, #2728]	; 121e8 <__assert_fail@plt+0xfb0>
   1173c:	mov	r0, r3
   11740:	ldr	r1, [pc, #2724]	; 121ec <__assert_fail@plt+0xfb4>
   11744:	mov	r2, #5
   11748:	add	lr, pc, lr
   1174c:	mov	ip, #1
   11750:	add	r1, pc, r1
   11754:	str	r3, [sp, #28]
   11758:	strb	ip, [lr]
   1175c:	str	ip, [sp, #64]	; 0x40
   11760:	bl	11028 <dcgettext@plt>
   11764:	str	r0, [sp, #36]	; 0x24
   11768:	ldr	ip, [sp, #68]	; 0x44
   1176c:	ldrb	r3, [ip, #1]
   11770:	cmp	r3, #0
   11774:	bne	118c8 <__assert_fail@plt+0x690>
   11778:	ldr	ip, [sp, #32]
   1177c:	cmp	ip, #0
   11780:	ldr	ip, [sp, #48]	; 0x30
   11784:	beq	118a8 <__assert_fail@plt+0x670>
   11788:	cmp	ip, #0
   1178c:	beq	1195c <__assert_fail@plt+0x724>
   11790:	ldr	r3, [pc, #2648]	; 121f0 <__assert_fail@plt+0xfb8>
   11794:	add	r3, pc, r3
   11798:	ldrb	r3, [r3, #2]
   1179c:	cmp	r3, #0
   117a0:	bne	11aec <__assert_fail@plt+0x8b4>
   117a4:	mov	r3, #1
   117a8:	mov	r2, #0
   117ac:	str	r3, [sp]
   117b0:	mov	r3, #0
   117b4:	ldr	r0, [sp, #28]
   117b8:	bl	1107c <lseek64@plt>
   117bc:	mov	r3, #2
   117c0:	mov	r2, #0
   117c4:	str	r3, [sp]
   117c8:	mov	r3, #0
   117cc:	mov	r4, r0
   117d0:	ldr	r0, [sp, #28]
   117d4:	mov	r5, r1
   117d8:	bl	1107c <lseek64@plt>
   117dc:	cmp	r1, #0
   117e0:	cmpge	r5, #0
   117e4:	mov	r2, r0
   117e8:	mov	r3, r1
   117ec:	movlt	r8, #0
   117f0:	movge	r8, #1
   117f4:	blt	11aec <__assert_fail@plt+0x8b4>
   117f8:	cmp	r4, r2
   117fc:	sbcs	lr, r5, r3
   11800:	blt	1230c <__assert_fail@plt+0x10d4>
   11804:	ldr	ip, [sp, #64]	; 0x40
   11808:	cmp	ip, #0
   1180c:	beq	1190c <__assert_fail@plt+0x6d4>
   11810:	ldr	ip, [sp, #60]	; 0x3c
   11814:	and	ip, r8, ip
   11818:	str	ip, [sp, #60]	; 0x3c
   1181c:	ldr	lr, [sp, #56]	; 0x38
   11820:	ldr	ip, [lr, #4]!
   11824:	cmp	ip, #0
   11828:	str	lr, [sp, #56]	; 0x38
   1182c:	str	ip, [sp, #36]	; 0x24
   11830:	beq	11f1c <__assert_fail@plt+0xce4>
   11834:	ldr	ip, [sp, #36]	; 0x24
   11838:	ldrb	r3, [ip]
   1183c:	cmp	r3, #45	; 0x2d
   11840:	beq	1172c <__assert_fail@plt+0x4f4>
   11844:	ldr	r0, [sp, #36]	; 0x24
   11848:	mov	r1, #0
   1184c:	bl	110c4 <open64@plt>
   11850:	cmp	r0, #0
   11854:	str	r0, [sp, #28]
   11858:	movge	ip, #0
   1185c:	strge	ip, [sp, #64]	; 0x40
   11860:	bge	11768 <__assert_fail@plt+0x530>
   11864:	bl	11160 <__errno_location@plt>
   11868:	ldr	r1, [pc, #2436]	; 121f4 <__assert_fail@plt+0xfbc>
   1186c:	mov	r8, #0
   11870:	mov	r2, #5
   11874:	add	r1, pc, r1
   11878:	ldr	r4, [r0]
   1187c:	mov	r0, r8
   11880:	bl	11028 <dcgettext@plt>
   11884:	mov	r5, r0
   11888:	ldr	r0, [sp, #36]	; 0x24
   1188c:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   11890:	mov	r1, r4
   11894:	mov	r2, r5
   11898:	mov	r3, r0
   1189c:	mov	r0, r8
   118a0:	bl	110b8 <error@plt>
   118a4:	b	11810 <__assert_fail@plt+0x5d8>
   118a8:	cmp	ip, #0
   118ac:	ldr	r0, [sp, #36]	; 0x24
   118b0:	ldr	r1, [sp, #28]
   118b4:	ldrd	r2, [sp, #40]	; 0x28
   118b8:	bne	11ae0 <__assert_fail@plt+0x8a8>
   118bc:	bl	127e0 <__assert_fail@plt+0x15a8>
   118c0:	mov	r8, r0
   118c4:	b	11804 <__assert_fail@plt+0x5cc>
   118c8:	ldr	r3, [pc, #2344]	; 121f8 <__assert_fail@plt+0xfc0>
   118cc:	add	r3, pc, r3
   118d0:	ldrb	r3, [r3]
   118d4:	cmp	r3, #0
   118d8:	bne	11f10 <__assert_fail@plt+0xcd8>
   118dc:	ldr	r2, [pc, #2328]	; 121fc <__assert_fail@plt+0xfc4>
   118e0:	add	r2, pc, r2
   118e4:	ldr	r1, [pc, #2324]	; 12200 <__assert_fail@plt+0xfc8>
   118e8:	mov	r0, #1
   118ec:	ldr	r3, [sp, #36]	; 0x24
   118f0:	add	r1, pc, r1
   118f4:	bl	11190 <__printf_chk@plt>
   118f8:	ldr	r3, [pc, #2308]	; 12204 <__assert_fail@plt+0xfcc>
   118fc:	mov	r2, #0
   11900:	add	r3, pc, r3
   11904:	strb	r2, [r3]
   11908:	b	11778 <__assert_fail@plt+0x540>
   1190c:	ldr	r0, [sp, #28]
   11910:	bl	1122c <close@plt>
   11914:	cmp	r0, #0
   11918:	beq	11810 <__assert_fail@plt+0x5d8>
   1191c:	bl	11160 <__errno_location@plt>
   11920:	ldr	r8, [sp, #64]	; 0x40
   11924:	ldr	r1, [sp, #116]	; 0x74
   11928:	mov	r2, #5
   1192c:	ldr	r4, [r0]
   11930:	mov	r0, r8
   11934:	bl	11028 <dcgettext@plt>
   11938:	mov	r5, r0
   1193c:	ldr	r0, [sp, #36]	; 0x24
   11940:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   11944:	mov	r1, r4
   11948:	mov	r2, r5
   1194c:	mov	r3, r0
   11950:	ldr	r0, [sp, #64]	; 0x40
   11954:	bl	110b8 <error@plt>
   11958:	b	11810 <__assert_fail@plt+0x5d8>
   1195c:	ldr	ip, [sp, #92]	; 0x5c
   11960:	ldrb	r3, [ip, #2]
   11964:	cmp	r3, #0
   11968:	bne	11994 <__assert_fail@plt+0x75c>
   1196c:	mov	r0, #3
   11970:	ldr	r1, [sp, #28]
   11974:	add	r2, sp, #136	; 0x88
   11978:	bl	11064 <__fxstat64@plt>
   1197c:	cmp	r0, #0
   11980:	bne	11994 <__assert_fail@plt+0x75c>
   11984:	ldr	r3, [sp, #152]	; 0x98
   11988:	and	r3, r3, #61440	; 0xf000
   1198c:	cmp	r3, #32768	; 0x8000
   11990:	beq	12234 <__assert_fail@plt+0xffc>
   11994:	ldrd	r0, [sp, #96]	; 0x60
   11998:	mvn	r2, #0
   1199c:	mov	r3, #0
   119a0:	cmp	r1, r3
   119a4:	cmpeq	r0, r2
   119a8:	bhi	11f40 <__assert_fail@plt+0xd08>
   119ac:	ldr	ip, [sp, #76]	; 0x4c
   119b0:	cmp	ip, #1048576	; 0x100000
   119b4:	bhi	11de8 <__assert_fail@plt+0xbb0>
   119b8:	ldr	r0, [sp, #108]	; 0x6c
   119bc:	mov	r7, #1
   119c0:	bl	15500 <close_stdout@@Base+0x21b4>
   119c4:	ldr	ip, [sp, #88]	; 0x58
   119c8:	mov	r5, #0
   119cc:	ldr	fp, [sp, #28]
   119d0:	ldr	r8, [sp, #76]	; 0x4c
   119d4:	mov	sl, ip
   119d8:	add	r3, r0, ip
   119dc:	str	r0, [sp, #128]	; 0x80
   119e0:	str	r3, [sp, #132]	; 0x84
   119e4:	str	r0, [sp, #72]	; 0x48
   119e8:	b	11a88 <__assert_fail@plt+0x850>
   119ec:	bl	11160 <__errno_location@plt>
   119f0:	ldr	r3, [r0]
   119f4:	cmp	r3, #0
   119f8:	bne	12058 <__assert_fail@plt+0xe20>
   119fc:	cmp	r8, r4
   11a00:	bcc	11ac4 <__assert_fail@plt+0x88c>
   11a04:	cmp	r7, #0
   11a08:	bne	11acc <__assert_fail@plt+0x894>
   11a0c:	rsb	r2, r4, r8
   11a10:	mov	r9, #1
   11a14:	eor	r0, r5, #1
   11a18:	add	ip, sp, #272	; 0x110
   11a1c:	ldr	r3, [pc, #2056]	; 1222c <__assert_fail@plt+0xff4>
   11a20:	rsb	r2, r2, r8
   11a24:	add	r0, ip, r0, lsl #2
   11a28:	ldr	ip, [sp, #52]	; 0x34
   11a2c:	mov	r1, #1
   11a30:	ldr	r0, [r0, #-144]	; 0xffffff70
   11a34:	ldr	r3, [ip, r3]
   11a38:	add	r0, r0, #8192	; 0x2000
   11a3c:	ldr	r3, [r3]
   11a40:	bl	11010 <fwrite_unlocked@plt>
   11a44:	cmp	r8, r4
   11a48:	bcs	11a78 <__assert_fail@plt+0x840>
   11a4c:	ldr	ip, [sp, #52]	; 0x34
   11a50:	rsb	r4, r8, r4
   11a54:	ldr	r3, [pc, #2000]	; 1222c <__assert_fail@plt+0xff4>
   11a58:	mov	r0, r6
   11a5c:	mov	r1, #1
   11a60:	mov	r2, r4
   11a64:	ldr	r3, [ip, r3]
   11a68:	ldr	r3, [r3]
   11a6c:	bl	11010 <fwrite_unlocked@plt>
   11a70:	cmp	r4, r0
   11a74:	bhi	120c8 <__assert_fail@plt+0xe90>
   11a78:	cmp	r9, #0
   11a7c:	eor	r5, r5, #1
   11a80:	bne	11acc <__assert_fail@plt+0x894>
   11a84:	mov	r7, r9
   11a88:	add	lr, sp, #272	; 0x110
   11a8c:	mov	r0, fp
   11a90:	add	r3, lr, r5, lsl #2
   11a94:	mov	r2, sl
   11a98:	ldr	r6, [r3, #-144]	; 0xffffff70
   11a9c:	mov	r1, r6
   11aa0:	bl	13508 <close_stdout@@Base+0x1bc>
   11aa4:	cmp	sl, r0
   11aa8:	mov	r4, r0
   11aac:	bhi	119ec <__assert_fail@plt+0x7b4>
   11ab0:	mov	r9, #0
   11ab4:	cmp	r7, #0
   11ab8:	bne	11a44 <__assert_fail@plt+0x80c>
   11abc:	mov	r2, r7
   11ac0:	b	11a14 <__assert_fail@plt+0x7dc>
   11ac4:	mov	r9, #1
   11ac8:	b	11ab4 <__assert_fail@plt+0x87c>
   11acc:	ldr	sl, [sp, #72]	; 0x48
   11ad0:	mov	r8, #1
   11ad4:	mov	r0, sl
   11ad8:	bl	10fd4 <free@plt>
   11adc:	b	11804 <__assert_fail@plt+0x5cc>
   11ae0:	bl	12e90 <__assert_fail@plt+0x1c58>
   11ae4:	mov	r8, r0
   11ae8:	b	11804 <__assert_fail@plt+0x5cc>
   11aec:	movw	r0, #8204	; 0x200c
   11af0:	movw	r5, #8196	; 0x2004
   11af4:	bl	15500 <close_stdout@@Base+0x21b4>
   11af8:	mov	r1, #8192	; 0x2000
   11afc:	movw	r2, #8200	; 0x2008
   11b00:	mov	r3, #0
   11b04:	mov	fp, r3
   11b08:	str	r3, [r0, r5]
   11b0c:	str	r0, [sp, #24]
   11b10:	str	r3, [r0, r1]
   11b14:	str	r3, [r0, r2]
   11b18:	movw	r0, #8204	; 0x200c
   11b1c:	bl	15500 <close_stdout@@Base+0x21b4>
   11b20:	ldr	r8, [sp, #24]
   11b24:	mov	r4, r0
   11b28:	ldr	r0, [sp, #28]
   11b2c:	mov	r1, r4
   11b30:	mov	r2, #8192	; 0x2000
   11b34:	bl	14f00 <close_stdout@@Base+0x1bb4>
   11b38:	sub	r3, r0, #1
   11b3c:	mov	r9, r0
   11b40:	cmn	r3, #3
   11b44:	bhi	11c68 <__assert_fail@plt+0xa30>
   11b48:	mov	r1, #0
   11b4c:	mov	r0, #8192	; 0x2000
   11b50:	movw	r2, #8200	; 0x2008
   11b54:	str	r9, [r4, r0]
   11b58:	add	r7, r4, r9
   11b5c:	str	r1, [r4, r5]
   11b60:	mov	r0, r4
   11b64:	str	r1, [r4, r2]
   11b68:	mov	sl, r1
   11b6c:	b	11b78 <__assert_fail@plt+0x940>
   11b70:	add	r0, r0, #1
   11b74:	str	sl, [r4, r5]
   11b78:	mov	r1, #10
   11b7c:	rsb	r2, r0, r7
   11b80:	bl	111b4 <memchr@plt>
   11b84:	mov	r6, sl
   11b88:	add	sl, sl, #1
   11b8c:	cmp	r0, #0
   11b90:	bne	11b70 <__assert_fail@plt+0x938>
   11b94:	ldr	ip, [sp, #24]
   11b98:	mov	r3, #8192	; 0x2000
   11b9c:	add	fp, fp, r6
   11ba0:	ldr	r0, [ip, r3]
   11ba4:	add	r3, r9, r0
   11ba8:	cmp	r3, #8192	; 0x2000
   11bac:	bcc	11c18 <__assert_fail@plt+0x9e0>
   11bb0:	ldr	ip, [sp, #24]
   11bb4:	movw	lr, #8200	; 0x2008
   11bb8:	ldrd	r0, [sp, #40]	; 0x28
   11bbc:	mov	r3, #0
   11bc0:	str	r4, [ip, lr]
   11bc4:	ldr	r2, [r8, r5]
   11bc8:	rsb	r2, r2, fp
   11bcc:	cmp	r3, r1
   11bd0:	cmpeq	r2, r0
   11bd4:	bls	11c54 <__assert_fail@plt+0xa1c>
   11bd8:	mov	ip, #8192	; 0x2000
   11bdc:	ldr	r3, [pc, #1608]	; 1222c <__assert_fail@plt+0xff4>
   11be0:	ldr	r2, [r8, ip]
   11be4:	mov	r0, r8
   11be8:	ldr	ip, [sp, #52]	; 0x34
   11bec:	mov	r1, #1
   11bf0:	str	r4, [sp, #24]
   11bf4:	mov	r4, r8
   11bf8:	ldr	r3, [ip, r3]
   11bfc:	ldr	r3, [r3]
   11c00:	bl	11010 <fwrite_unlocked@plt>
   11c04:	ldr	r3, [r8, r5]
   11c08:	movw	lr, #8200	; 0x2008
   11c0c:	ldr	r8, [r8, lr]
   11c10:	rsb	fp, r3, fp
   11c14:	b	11b28 <__assert_fail@plt+0x8f0>
   11c18:	add	r0, ip, r0
   11c1c:	mov	r2, r9
   11c20:	mov	r1, r4
   11c24:	bl	10fec <memcpy@plt>
   11c28:	ldr	ip, [sp, #24]
   11c2c:	mov	lr, #8192	; 0x2000
   11c30:	ldr	r1, [r4, lr]
   11c34:	ldr	r2, [ip, lr]
   11c38:	ldr	r3, [ip, r5]
   11c3c:	add	r2, r1, r2
   11c40:	str	r2, [ip, lr]
   11c44:	ldr	r2, [r4, r5]
   11c48:	add	r3, r2, r3
   11c4c:	str	r3, [ip, r5]
   11c50:	b	11b28 <__assert_fail@plt+0x8f0>
   11c54:	movw	r0, #8204	; 0x200c
   11c58:	str	r4, [sp, #24]
   11c5c:	bl	15500 <close_stdout@@Base+0x21b4>
   11c60:	mov	r4, r0
   11c64:	b	11b28 <__assert_fail@plt+0x8f0>
   11c68:	mov	r0, r4
   11c6c:	bl	10fd4 <free@plt>
   11c70:	cmn	r9, #1
   11c74:	beq	12134 <__assert_fail@plt+0xefc>
   11c78:	ldr	ip, [sp, #24]
   11c7c:	mov	r3, #8192	; 0x2000
   11c80:	ldr	r3, [ip, r3]
   11c84:	cmp	r3, #0
   11c88:	beq	11cac <__assert_fail@plt+0xa74>
   11c8c:	add	r3, ip, r3
   11c90:	ldrb	r3, [r3, #-1]
   11c94:	cmp	r3, #10
   11c98:	addne	fp, fp, #1
   11c9c:	movwne	r3, #8196	; 0x2004
   11ca0:	ldrne	r2, [ip, r3]
   11ca4:	addne	r2, r2, #1
   11ca8:	strne	r2, [ip, r3]
   11cac:	movw	r9, #8196	; 0x2004
   11cb0:	ldrd	r0, [sp, #40]	; 0x28
   11cb4:	ldr	r2, [r8, r9]
   11cb8:	mov	r3, #0
   11cbc:	rsb	r2, r2, fp
   11cc0:	cmp	r1, r3
   11cc4:	cmpeq	r0, r2
   11cc8:	bcs	1232c <__assert_fail@plt+0x10f4>
   11ccc:	ldr	r3, [pc, #1368]	; 1222c <__assert_fail@plt+0xff4>
   11cd0:	mov	r5, r8
   11cd4:	ldr	ip, [sp, #52]	; 0x34
   11cd8:	mov	r7, #8192	; 0x2000
   11cdc:	movw	r6, #8200	; 0x2008
   11ce0:	mov	sl, r0
   11ce4:	ldr	r4, [ip, r3]
   11ce8:	str	r8, [sp, #24]
   11cec:	mov	r8, fp
   11cf0:	mov	fp, r1
   11cf4:	ldr	r2, [r5, r7]
   11cf8:	mov	r0, r5
   11cfc:	ldr	r3, [r4]
   11d00:	mov	r1, #1
   11d04:	bl	11010 <fwrite_unlocked@plt>
   11d08:	ldr	r3, [r5, r9]
   11d0c:	ldr	r5, [r5, r6]
   11d10:	rsb	r8, r3, r8
   11d14:	mov	r3, #0
   11d18:	ldr	r2, [r5, r9]
   11d1c:	rsb	r2, r2, r8
   11d20:	cmp	r3, fp
   11d24:	cmpeq	r2, sl
   11d28:	bhi	11cf4 <__assert_fail@plt+0xabc>
   11d2c:	mov	fp, r8
   11d30:	ldr	r8, [sp, #24]
   11d34:	ldrd	r0, [sp, #40]	; 0x28
   11d38:	mov	r2, fp
   11d3c:	mov	r3, #0
   11d40:	cmp	r3, r1
   11d44:	cmpeq	r2, r0
   11d48:	bls	11dbc <__assert_fail@plt+0xb84>
   11d4c:	mov	r3, #8192	; 0x2000
   11d50:	ldr	ip, [sp, #76]	; 0x4c
   11d54:	ldr	r4, [r5, r3]
   11d58:	mov	r0, r5
   11d5c:	rsb	r6, ip, fp
   11d60:	movw	r7, #8196	; 0x2004
   11d64:	add	r4, r5, r4
   11d68:	b	11d94 <__assert_fail@plt+0xb5c>
   11d6c:	mov	r1, #10
   11d70:	rsb	r2, r0, r4
   11d74:	bl	111b4 <memchr@plt>
   11d78:	cmp	r0, #0
   11d7c:	beq	12014 <__assert_fail@plt+0xddc>
   11d80:	ldr	r3, [r5, r7]
   11d84:	add	r0, r0, #1
   11d88:	sub	r6, r6, #1
   11d8c:	add	r3, r3, #1
   11d90:	str	r3, [r5, r7]
   11d94:	cmp	r6, #0
   11d98:	bne	11d6c <__assert_fail@plt+0xb34>
   11d9c:	rsb	r2, r5, r0
   11da0:	ldr	r3, [pc, #1156]	; 1222c <__assert_fail@plt+0xff4>
   11da4:	mov	r0, r5
   11da8:	ldr	ip, [sp, #52]	; 0x34
   11dac:	mov	r1, #1
   11db0:	ldr	r4, [ip, r3]
   11db4:	ldr	r3, [r4]
   11db8:	bl	11010 <fwrite_unlocked@plt>
   11dbc:	mov	r5, #1
   11dc0:	movw	r4, #8200	; 0x2008
   11dc4:	mov	r0, r8
   11dc8:	b	11dd0 <__assert_fail@plt+0xb98>
   11dcc:	mov	r0, r6
   11dd0:	ldr	r6, [r0, r4]
   11dd4:	bl	10fd4 <free@plt>
   11dd8:	cmp	r6, #0
   11ddc:	bne	11dcc <__assert_fail@plt+0xb94>
   11de0:	mov	r8, r5
   11de4:	b	11804 <__assert_fail@plt+0x5cc>
   11de8:	ldr	fp, [sp, #84]	; 0x54
   11dec:	mov	ip, #0
   11df0:	mov	r7, ip
   11df4:	str	ip, [sp, #24]
   11df8:	cmp	fp, #16
   11dfc:	movcs	fp, #16
   11e00:	mov	r6, ip
   11e04:	str	fp, [sp, #72]	; 0x48
   11e08:	mov	sl, ip
   11e0c:	mov	r8, ip
   11e10:	mov	r4, #1
   11e14:	ldr	fp, [sp, #84]	; 0x54
   11e18:	b	11e64 <__assert_fail@plt+0xc2c>
   11e1c:	bl	11160 <__errno_location@plt>
   11e20:	ldr	r9, [r0]
   11e24:	cmp	r9, #0
   11e28:	bne	1201c <__assert_fail@plt+0xde4>
   11e2c:	mov	r9, #1
   11e30:	add	r3, sl, #1
   11e34:	cmp	fp, r3
   11e38:	beq	11e98 <__assert_fail@plt+0xc60>
   11e3c:	cmp	r7, #0
   11e40:	bne	11e98 <__assert_fail@plt+0xc60>
   11e44:	add	sl, r4, #1
   11e48:	mov	r1, fp
   11e4c:	mov	r0, sl
   11e50:	bl	166f8 <close_stdout@@Base+0x33ac>
   11e54:	cmp	r9, #0
   11e58:	bne	11f7c <__assert_fail@plt+0xd44>
   11e5c:	mov	sl, r4
   11e60:	mov	r4, r1
   11e64:	cmp	r8, sl
   11e68:	beq	11ee0 <__assert_fail@plt+0xca8>
   11e6c:	cmp	r7, #0
   11e70:	beq	11ec8 <__assert_fail@plt+0xc90>
   11e74:	ldr	r0, [sp, #28]
   11e78:	mov	r2, #8192	; 0x2000
   11e7c:	ldr	r1, [r6, sl, lsl #2]
   11e80:	bl	13508 <close_stdout@@Base+0x1bc>
   11e84:	cmp	r0, #8192	; 0x2000
   11e88:	mov	r5, r0
   11e8c:	bcc	11e1c <__assert_fail@plt+0xbe4>
   11e90:	mov	r9, #0
   11e94:	b	11e30 <__assert_fail@plt+0xbf8>
   11e98:	ldr	ip, [sp, #52]	; 0x34
   11e9c:	mov	r1, #1
   11ea0:	ldr	r3, [pc, #900]	; 1222c <__assert_fail@plt+0xff4>
   11ea4:	mov	r2, r5
   11ea8:	ldr	r0, [r6, r4, lsl #2]
   11eac:	ldr	r3, [ip, r3]
   11eb0:	ldr	r3, [r3]
   11eb4:	bl	11010 <fwrite_unlocked@plt>
   11eb8:	cmp	r5, r0
   11ebc:	bhi	12100 <__assert_fail@plt+0xec8>
   11ec0:	mov	r7, #1
   11ec4:	b	11e44 <__assert_fail@plt+0xc0c>
   11ec8:	mov	r0, #8192	; 0x2000
   11ecc:	add	ip, sl, #1
   11ed0:	str	ip, [sp, #24]
   11ed4:	bl	15500 <close_stdout@@Base+0x21b4>
   11ed8:	str	r0, [r6, sl, lsl #2]
   11edc:	b	11e74 <__assert_fail@plt+0xc3c>
   11ee0:	cmp	r8, #0
   11ee4:	ldreq	r8, [sp, #72]	; 0x48
   11ee8:	beq	11efc <__assert_fail@plt+0xcc4>
   11eec:	ldr	ip, [sp, #80]	; 0x50
   11ef0:	cmp	ip, r8
   11ef4:	lslcs	r8, r8, #1
   11ef8:	movcc	r8, fp
   11efc:	mov	r0, r6
   11f00:	lsl	r1, r8, #2
   11f04:	bl	15558 <close_stdout@@Base+0x220c>
   11f08:	mov	r6, r0
   11f0c:	b	11e6c <__assert_fail@plt+0xc34>
   11f10:	ldr	r2, [pc, #752]	; 12208 <__assert_fail@plt+0xfd0>
   11f14:	add	r2, pc, r2
   11f18:	b	118e4 <__assert_fail@plt+0x6ac>
   11f1c:	ldr	r3, [pc, #744]	; 1220c <__assert_fail@plt+0xfd4>
   11f20:	add	r3, pc, r3
   11f24:	ldrb	r3, [r3]
   11f28:	cmp	r3, #0
   11f2c:	bne	1209c <__assert_fail@plt+0xe64>
   11f30:	ldr	ip, [sp, #60]	; 0x3c
   11f34:	rsbs	r0, ip, #1
   11f38:	movcc	r0, #0
   11f3c:	bl	11124 <exit@plt>
   11f40:	ldr	r1, [pc, #712]	; 12210 <__assert_fail@plt+0xfd8>
   11f44:	mov	r2, #5
   11f48:	mov	r0, #0
   11f4c:	add	r1, pc, r1
   11f50:	bl	11028 <dcgettext@plt>
   11f54:	add	r2, sp, #244	; 0xf4
   11f58:	mov	r4, r0
   11f5c:	ldrd	r0, [sp, #40]	; 0x28
   11f60:	bl	13640 <close_stdout@@Base+0x2f4>
   11f64:	mov	r2, r4
   11f68:	mov	r1, #0
   11f6c:	mov	r3, r0
   11f70:	mov	r0, #1
   11f74:	bl	110b8 <error@plt>
   11f78:	b	119ac <__assert_fail@plt+0x774>
   11f7c:	cmp	r7, #0
   11f80:	mov	ip, r1
   11f84:	beq	12334 <__assert_fail@plt+0x10fc>
   11f88:	ldr	lr, [sp, #104]	; 0x68
   11f8c:	rsb	r7, r5, #8192	; 0x2000
   11f90:	ldr	r3, [pc, #660]	; 1222c <__assert_fail@plt+0xff4>
   11f94:	mov	r1, #1
   11f98:	cmp	lr, r7
   11f9c:	ldr	r0, [r6, r4, lsl #2]
   11fa0:	bcs	12370 <__assert_fail@plt+0x1138>
   11fa4:	ldr	ip, [sp, #52]	; 0x34
   11fa8:	mov	r2, lr
   11fac:	add	r0, r0, r5
   11fb0:	mov	r8, r1
   11fb4:	ldr	r4, [ip, r3]
   11fb8:	ldr	r3, [r4]
   11fbc:	bl	11010 <fwrite_unlocked@plt>
   11fc0:	mov	r4, #0
   11fc4:	ldr	r5, [sp, #24]
   11fc8:	b	11fd8 <__assert_fail@plt+0xda0>
   11fcc:	ldr	r0, [r6, r4, lsl #2]
   11fd0:	add	r4, r4, #1
   11fd4:	bl	10fd4 <free@plt>
   11fd8:	cmp	r4, r5
   11fdc:	bne	11fcc <__assert_fail@plt+0xd94>
   11fe0:	mov	r0, r6
   11fe4:	bl	10fd4 <free@plt>
   11fe8:	b	11804 <__assert_fail@plt+0x5cc>
   11fec:	cmp	lr, #0
   11ff0:	strb	lr, [r3]
   11ff4:	strbne	r0, [r3, #1]
   11ff8:	sub	r5, r5, #1
   11ffc:	ldr	r0, [sp, #48]	; 0x30
   12000:	bl	1257c <__assert_fail@plt+0x1344>
   12004:	ldr	r3, [r4]
   12008:	str	r3, [r4, #4]!
   1200c:	strd	r0, [sp, #40]	; 0x28
   12010:	b	112f0 <__assert_fail@plt+0xb8>
   12014:	rsb	r2, r5, #0
   12018:	b	11da0 <__assert_fail@plt+0xb68>
   1201c:	ldr	r1, [pc, #496]	; 12214 <__assert_fail@plt+0xfdc>
   12020:	mov	r2, #5
   12024:	mov	r0, #0
   12028:	add	r1, pc, r1
   1202c:	mov	r8, r0
   12030:	bl	11028 <dcgettext@plt>
   12034:	mov	r4, r0
   12038:	ldr	r0, [sp, #36]	; 0x24
   1203c:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   12040:	mov	r2, r4
   12044:	mov	r1, r9
   12048:	mov	r3, r0
   1204c:	mov	r0, r8
   12050:	bl	110b8 <error@plt>
   12054:	b	11fc0 <__assert_fail@plt+0xd88>
   12058:	ldr	r1, [pc, #440]	; 12218 <__assert_fail@plt+0xfe0>
   1205c:	mov	r2, #5
   12060:	mov	r0, #0
   12064:	mov	r9, r3
   12068:	add	r1, pc, r1
   1206c:	mov	r8, r0
   12070:	ldr	sl, [sp, #72]	; 0x48
   12074:	bl	11028 <dcgettext@plt>
   12078:	mov	r4, r0
   1207c:	ldr	r0, [sp, #36]	; 0x24
   12080:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   12084:	mov	r2, r4
   12088:	mov	r1, r9
   1208c:	mov	r3, r0
   12090:	mov	r0, r8
   12094:	bl	110b8 <error@plt>
   12098:	b	11ad4 <__assert_fail@plt+0x89c>
   1209c:	mov	r0, ip
   120a0:	bl	1122c <close@plt>
   120a4:	cmp	r0, #0
   120a8:	bge	11f30 <__assert_fail@plt+0xcf8>
   120ac:	bl	11160 <__errno_location@plt>
   120b0:	ldr	r2, [pc, #356]	; 1221c <__assert_fail@plt+0xfe4>
   120b4:	add	r2, pc, r2
   120b8:	ldr	r1, [r0]
   120bc:	mov	r0, #1
   120c0:	bl	110b8 <error@plt>
   120c4:	b	11f30 <__assert_fail@plt+0xcf8>
   120c8:	bl	11160 <__errno_location@plt>
   120cc:	ldr	r1, [pc, #332]	; 12220 <__assert_fail@plt+0xfe8>
   120d0:	mov	r8, #0
   120d4:	mov	r2, #5
   120d8:	add	r1, pc, r1
   120dc:	ldr	sl, [sp, #72]	; 0x48
   120e0:	ldr	r4, [r0]
   120e4:	mov	r0, r8
   120e8:	bl	11028 <dcgettext@plt>
   120ec:	mov	r1, r4
   120f0:	mov	r2, r0
   120f4:	mov	r0, r8
   120f8:	bl	110b8 <error@plt>
   120fc:	b	11ad4 <__assert_fail@plt+0x89c>
   12100:	bl	11160 <__errno_location@plt>
   12104:	ldr	r1, [pc, #280]	; 12224 <__assert_fail@plt+0xfec>
   12108:	mov	r8, #0
   1210c:	mov	r2, #5
   12110:	add	r1, pc, r1
   12114:	ldr	r4, [r0]
   12118:	mov	r0, r8
   1211c:	bl	11028 <dcgettext@plt>
   12120:	mov	r1, r4
   12124:	mov	r2, r0
   12128:	mov	r0, r8
   1212c:	bl	110b8 <error@plt>
   12130:	b	11fc0 <__assert_fail@plt+0xd88>
   12134:	bl	11160 <__errno_location@plt>
   12138:	ldr	r1, [pc, #232]	; 12228 <__assert_fail@plt+0xff0>
   1213c:	mov	r2, #5
   12140:	add	r1, pc, r1
   12144:	ldr	r4, [r0]
   12148:	mov	r0, #0
   1214c:	bl	11028 <dcgettext@plt>
   12150:	mov	r5, r0
   12154:	ldr	r0, [sp, #36]	; 0x24
   12158:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   1215c:	mov	r2, r5
   12160:	mov	r1, r4
   12164:	mov	r3, r0
   12168:	mov	r0, #0
   1216c:	bl	110b8 <error@plt>
   12170:	cmp	r8, #0
   12174:	movne	r5, #0
   12178:	bne	11dc0 <__assert_fail@plt+0xb88>
   1217c:	b	11804 <__assert_fail@plt+0x5cc>
   12180:	muleq	r1, ip, sp
   12184:	strdeq	r0, [r0], -ip
   12188:	strdeq	r6, [r0], -r8
   1218c:	andeq	r6, r0, r0, lsr #11
   12190:	muleq	r0, r4, r5
   12194:	andeq	r0, r0, ip, lsl #2
   12198:	andeq	r7, r1, r1, asr #29
   1219c:	andeq	r7, r1, r4, asr #22
   121a0:	andeq	r6, r0, r0, lsl #11
   121a4:	andeq	r7, r1, r9, ror #28
   121a8:	andeq	r0, r0, r4, lsl #2
   121ac:	andeq	r6, r0, ip, ror #9
   121b0:	strdeq	r6, [r0], -r0
   121b4:	andeq	r6, r0, r4, asr #9
   121b8:	andeq	r6, r0, r4, asr #7
   121bc:	andeq	r0, r0, r0, lsr r1
   121c0:	muleq	r0, r4, r2
   121c4:	andeq	r6, r0, r0, ror #4
   121c8:	andeq	r0, r0, r0, lsl #2
   121cc:	andeq	r7, r1, r5, asr #22
   121d0:	ldrdeq	r7, [r1], -r0
   121d4:	muleq	r1, sp, sl
   121d8:	andeq	r6, r0, r8, asr #4
   121dc:	andeq	r7, r1, sp, ror sl
   121e0:	strdeq	r6, [r0], -r8
   121e4:	ldrdeq	r6, [r0], -ip
   121e8:	andeq	r7, r1, r5, lsr sl
   121ec:	andeq	r6, r0, r0, ror r1
   121f0:	andeq	r7, r1, r9, ror #19
   121f4:	andeq	r6, r0, ip, asr r0
   121f8:	andeq	r7, r1, r4, ror #16
   121fc:	andeq	r6, r0, r8, lsl r0
   12200:	strdeq	r5, [r0], -ip
   12204:	andeq	r7, r1, r0, lsr r8
   12208:	andeq	r5, r0, r4, lsl r9
   1220c:	andeq	r7, r1, sp, asr r2
   12210:	andeq	r5, r0, r0, asr r9
   12214:	andeq	r5, r0, ip, asr #3
   12218:	andeq	r5, r0, ip, lsl #3
   1221c:	muleq	r0, r8, r8
   12220:	andeq	r5, r0, r0, lsr r1
   12224:	strdeq	r5, [r0], -r8
   12228:	strheq	r5, [r0], -r4
   1222c:	andeq	r0, r0, r8, lsl r1
   12230:	andeq	r5, r0, r0, lsr #9
   12234:	mov	r3, #1
   12238:	ldr	r0, [sp, #28]
   1223c:	str	r3, [sp]
   12240:	mov	r2, #0
   12244:	mov	r3, #0
   12248:	mvn	r8, #0
   1224c:	bl	1107c <lseek64@plt>
   12250:	mvn	r9, #0
   12254:	mov	r4, r0
   12258:	mov	r5, r1
   1225c:	cmp	r5, r9
   12260:	cmpeq	r4, r8
   12264:	beq	123b0 <__assert_fail@plt+0x1178>
   12268:	mov	r3, #2
   1226c:	ldr	r0, [sp, #28]
   12270:	str	r3, [sp]
   12274:	mov	r2, #0
   12278:	mov	r3, #0
   1227c:	bl	1107c <lseek64@plt>
   12280:	cmp	r1, r9
   12284:	cmpeq	r0, r8
   12288:	beq	123b0 <__assert_fail@plt+0x1178>
   1228c:	mov	r6, r0
   12290:	mov	r7, r1
   12294:	subs	r6, r6, r4
   12298:	sbc	r7, r7, r5
   1229c:	cmp	r6, #0
   122a0:	sbcs	lr, r7, #0
   122a4:	blt	12304 <__assert_fail@plt+0x10cc>
   122a8:	ldrd	r0, [sp, #40]	; 0x28
   122ac:	cmp	r7, r1
   122b0:	cmpeq	r6, r0
   122b4:	bls	12304 <__assert_fail@plt+0x10cc>
   122b8:	str	r4, [sp]
   122bc:	mov	r2, #0
   122c0:	ldr	r0, [sp, #28]
   122c4:	mov	r3, #0
   122c8:	bl	1107c <lseek64@plt>
   122cc:	cmp	r1, r9
   122d0:	cmpeq	r0, r8
   122d4:	beq	1243c <__assert_fail@plt+0x1204>
   122d8:	ldr	r1, [pc, #-180]	; 1222c <__assert_fail@plt+0xff4>
   122dc:	ldr	ip, [sp, #52]	; 0x34
   122e0:	ldrd	r2, [sp, #40]	; 0x28
   122e4:	ldr	r0, [sp, #28]
   122e8:	ldr	r4, [ip, r1]
   122ec:	subs	r2, r6, r2
   122f0:	sbc	r3, r7, r3
   122f4:	ldr	r1, [r4]
   122f8:	bl	126d8 <__assert_fail@plt+0x14a0>
   122fc:	cmp	r0, #0
   12300:	bne	1242c <__assert_fail@plt+0x11f4>
   12304:	mov	r8, #1
   12308:	b	11804 <__assert_fail@plt+0x5cc>
   1230c:	strd	r2, [sp, #8]
   12310:	strd	r4, [sp]
   12314:	ldr	r0, [sp, #36]	; 0x24
   12318:	ldr	r1, [sp, #28]
   1231c:	ldrd	r2, [sp, #40]	; 0x28
   12320:	bl	129f4 <__assert_fail@plt+0x17bc>
   12324:	mov	r8, r0
   12328:	b	11804 <__assert_fail@plt+0x5cc>
   1232c:	mov	r5, r8
   12330:	b	11d34 <__assert_fail@plt+0xafc>
   12334:	ldr	lr, [sp, #84]	; 0x54
   12338:	cmp	lr, sl
   1233c:	movne	r8, #1
   12340:	bne	11fc0 <__assert_fail@plt+0xd88>
   12344:	ldr	r3, [pc, #-288]	; 1222c <__assert_fail@plt+0xff4>
   12348:	ldr	ip, [sp, #52]	; 0x34
   1234c:	ldr	r0, [sp, #112]	; 0x70
   12350:	ldr	r4, [ip, r3]
   12354:	rsb	r2, r0, r5
   12358:	ldr	r0, [r6, r1, lsl #2]
   1235c:	mov	r1, #1
   12360:	mov	r8, r1
   12364:	ldr	r3, [r4]
   12368:	bl	11010 <fwrite_unlocked@plt>
   1236c:	b	11fc0 <__assert_fail@plt+0xd88>
   12370:	ldr	lr, [sp, #52]	; 0x34
   12374:	mov	r2, r7
   12378:	add	r0, r0, r5
   1237c:	mov	r8, r1
   12380:	ldr	r4, [lr, r3]
   12384:	ldr	r3, [r4]
   12388:	str	ip, [sp, #20]
   1238c:	bl	11010 <fwrite_unlocked@plt>
   12390:	ldr	ip, [sp, #20]
   12394:	mov	r1, r8
   12398:	ldr	r3, [r4]
   1239c:	ldr	r0, [r6, ip, lsl #2]
   123a0:	ldr	ip, [sp, #104]	; 0x68
   123a4:	rsb	r2, r7, ip
   123a8:	bl	11010 <fwrite_unlocked@plt>
   123ac:	b	11fc0 <__assert_fail@plt+0xd88>
   123b0:	bl	11160 <__errno_location@plt>
   123b4:	ldr	r1, [sp, #124]	; 0x7c
   123b8:	mov	r8, #0
   123bc:	ldr	r4, [r0]
   123c0:	mov	r2, #5
   123c4:	mov	r0, r8
   123c8:	bl	11028 <dcgettext@plt>
   123cc:	mov	r5, r0
   123d0:	ldr	r0, [sp, #36]	; 0x24
   123d4:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   123d8:	mov	r1, r4
   123dc:	mov	r2, r5
   123e0:	mov	r3, r0
   123e4:	mov	r0, r8
   123e8:	bl	110b8 <error@plt>
   123ec:	b	11804 <__assert_fail@plt+0x5cc>
   123f0:	ldr	r1, [pc, #-456]	; 12230 <__assert_fail@plt+0xff8>
   123f4:	mov	r2, #5
   123f8:	mov	r0, #0
   123fc:	add	r1, pc, r1
   12400:	bl	11028 <dcgettext@plt>
   12404:	add	r2, sp, #244	; 0xf4
   12408:	mov	r7, r0
   1240c:	ldrd	r0, [sp, #40]	; 0x28
   12410:	bl	13640 <close_stdout@@Base+0x2f4>
   12414:	mov	r2, r7
   12418:	mov	r1, #0
   1241c:	mov	r3, r0
   12420:	mov	r0, #1
   12424:	bl	110b8 <error@plt>
   12428:	b	11664 <__assert_fail@plt+0x42c>
   1242c:	ldr	r1, [sp, #36]	; 0x24
   12430:	mov	r8, #0
   12434:	bl	12964 <__assert_fail@plt+0x172c>
   12438:	b	11804 <__assert_fail@plt+0x5cc>
   1243c:	bl	11160 <__errno_location@plt>
   12440:	ldr	r1, [sp, #120]	; 0x78
   12444:	b	123b8 <__assert_fail@plt+0x1180>
   12448:	mov	fp, #0
   1244c:	mov	lr, #0
   12450:	pop	{r1}		; (ldr r1, [sp], #4)
   12454:	mov	r2, sp
   12458:	push	{r2}		; (str r2, [sp, #-4]!)
   1245c:	push	{r0}		; (str r0, [sp, #-4]!)
   12460:	ldr	ip, [pc, #16]	; 12478 <__assert_fail@plt+0x1240>
   12464:	push	{ip}		; (str ip, [sp, #-4]!)
   12468:	ldr	r0, [pc, #12]	; 1247c <__assert_fail@plt+0x1244>
   1246c:	ldr	r3, [pc, #12]	; 12480 <__assert_fail@plt+0x1248>
   12470:	bl	110e8 <__libc_start_main@plt>
   12474:	bl	11220 <abort@plt>
   12478:	andeq	r7, r1, r4, asr #2
   1247c:	andeq	r1, r1, r4, asr #4
   12480:	andeq	r7, r1, r0, ror #1
   12484:	ldr	r3, [pc, #20]	; 124a0 <__assert_fail@plt+0x1268>
   12488:	ldr	r2, [pc, #20]	; 124a4 <__assert_fail@plt+0x126c>
   1248c:	add	r3, pc, r3
   12490:	ldr	r2, [r3, r2]
   12494:	cmp	r2, #0
   12498:	bxeq	lr
   1249c:	b	11100 <__gmon_start__@plt>
   124a0:	andeq	r6, r1, ip, ror #22
   124a4:	andeq	r0, r0, r0, lsl r1
   124a8:	push	{r3, lr}
   124ac:	movw	r0, #37252	; 0x9184
   124b0:	ldr	r3, [pc, #36]	; 124dc <__assert_fail@plt+0x12a4>
   124b4:	movt	r0, #2
   124b8:	rsb	r3, r0, r3
   124bc:	cmp	r3, #6
   124c0:	popls	{r3, pc}
   124c4:	movw	r3, #0
   124c8:	movt	r3, #0
   124cc:	cmp	r3, #0
   124d0:	popeq	{r3, pc}
   124d4:	blx	r3
   124d8:	pop	{r3, pc}
   124dc:	andeq	r9, r2, r7, lsl #3
   124e0:	push	{r3, lr}
   124e4:	movw	r0, #37252	; 0x9184
   124e8:	movw	r3, #37252	; 0x9184
   124ec:	movt	r0, #2
   124f0:	movt	r3, #2
   124f4:	rsb	r3, r0, r3
   124f8:	asr	r3, r3, #2
   124fc:	add	r3, r3, r3, lsr #31
   12500:	asrs	r1, r3, #1
   12504:	popeq	{r3, pc}
   12508:	movw	r2, #0
   1250c:	movt	r2, #0
   12510:	cmp	r2, #0
   12514:	popeq	{r3, pc}
   12518:	blx	r2
   1251c:	pop	{r3, pc}
   12520:	push	{r4, lr}
   12524:	movw	r4, #37252	; 0x9184
   12528:	movt	r4, #2
   1252c:	ldrb	r3, [r4]
   12530:	cmp	r3, #0
   12534:	popne	{r4, pc}
   12538:	bl	124a8 <__assert_fail@plt+0x1270>
   1253c:	mov	r3, #1
   12540:	strb	r3, [r4]
   12544:	pop	{r4, pc}
   12548:	movw	r0, #36424	; 0x8e48
   1254c:	movt	r0, #2
   12550:	push	{r3, lr}
   12554:	ldr	r3, [r0]
   12558:	cmp	r3, #0
   1255c:	beq	12574 <__assert_fail@plt+0x133c>
   12560:	movw	r3, #0
   12564:	movt	r3, #0
   12568:	cmp	r3, #0
   1256c:	beq	12574 <__assert_fail@plt+0x133c>
   12570:	blx	r3
   12574:	pop	{r3, lr}
   12578:	b	124e0 <__assert_fail@plt+0x12a8>
   1257c:	ldr	ip, [pc, #304]	; 126b4 <__assert_fail@plt+0x147c>
   12580:	mov	r2, #10
   12584:	ldr	r3, [pc, #300]	; 126b8 <__assert_fail@plt+0x1480>
   12588:	add	ip, pc, ip
   1258c:	push	{r4, r5, r6, r7, lr}
   12590:	sub	sp, sp, #28
   12594:	ldr	r4, [ip, r3]
   12598:	mov	r5, r1
   1259c:	ldr	lr, [pc, #280]	; 126bc <__assert_fail@plt+0x1484>
   125a0:	mov	r6, r0
   125a4:	add	r3, sp, #8
   125a8:	mov	r0, r1
   125ac:	add	lr, pc, lr
   125b0:	str	lr, [sp]
   125b4:	ldr	ip, [r4]
   125b8:	mov	r1, #0
   125bc:	str	ip, [sp, #20]
   125c0:	bl	1576c <close_stdout@@Base+0x2420>
   125c4:	cmp	r0, #1
   125c8:	beq	12640 <__assert_fail@plt+0x1408>
   125cc:	cmp	r0, #0
   125d0:	beq	1260c <__assert_fail@plt+0x13d4>
   125d4:	cmp	r6, #0
   125d8:	bne	12628 <__assert_fail@plt+0x13f0>
   125dc:	ldr	r1, [pc, #220]	; 126c0 <__assert_fail@plt+0x1488>
   125e0:	mov	r0, r6
   125e4:	mov	r2, #5
   125e8:	add	r1, pc, r1
   125ec:	bl	11028 <dcgettext@plt>
   125f0:	ldr	r2, [pc, #204]	; 126c4 <__assert_fail@plt+0x148c>
   125f4:	mov	r3, r5
   125f8:	str	r0, [sp]
   125fc:	mov	r1, #0
   12600:	mov	r0, #1
   12604:	add	r2, pc, r2
   12608:	bl	110b8 <error@plt>
   1260c:	ldr	r2, [sp, #20]
   12610:	ldr	r3, [r4]
   12614:	ldrd	r0, [sp, #8]
   12618:	cmp	r2, r3
   1261c:	bne	126b0 <__assert_fail@plt+0x1478>
   12620:	add	sp, sp, #28
   12624:	pop	{r4, r5, r6, r7, pc}
   12628:	ldr	r1, [pc, #152]	; 126c8 <__assert_fail@plt+0x1490>
   1262c:	mov	r2, #5
   12630:	mov	r0, #0
   12634:	add	r1, pc, r1
   12638:	bl	11028 <dcgettext@plt>
   1263c:	b	125f0 <__assert_fail@plt+0x13b8>
   12640:	ldr	r1, [pc, #132]	; 126cc <__assert_fail@plt+0x1494>
   12644:	mov	r0, #0
   12648:	mov	r2, #5
   1264c:	add	r1, pc, r1
   12650:	bl	11028 <dcgettext@plt>
   12654:	cmp	r6, #0
   12658:	mov	r7, r0
   1265c:	beq	12698 <__assert_fail@plt+0x1460>
   12660:	ldr	r1, [pc, #104]	; 126d0 <__assert_fail@plt+0x1498>
   12664:	mov	r0, #0
   12668:	mov	r2, #5
   1266c:	add	r1, pc, r1
   12670:	bl	11028 <dcgettext@plt>
   12674:	str	r0, [sp]
   12678:	mov	r2, r7
   1267c:	mov	r0, #1
   12680:	mov	r1, #0
   12684:	mov	r3, r5
   12688:	bl	110b8 <error@plt>
   1268c:	cmp	r6, #0
   12690:	beq	125dc <__assert_fail@plt+0x13a4>
   12694:	b	12628 <__assert_fail@plt+0x13f0>
   12698:	ldr	r1, [pc, #52]	; 126d4 <__assert_fail@plt+0x149c>
   1269c:	mov	r0, r6
   126a0:	mov	r2, #5
   126a4:	add	r1, pc, r1
   126a8:	bl	11028 <dcgettext@plt>
   126ac:	b	12674 <__assert_fail@plt+0x143c>
   126b0:	bl	11034 <__stack_chk_fail@plt>
   126b4:	andeq	r6, r1, r0, ror sl
   126b8:	strdeq	r0, [r0], -ip
   126bc:	ldrdeq	r4, [r0], -r0
   126c0:	andeq	r4, r0, ip, ror #23
   126c4:	andeq	r4, r0, r8, ror #23
   126c8:	andeq	r4, r0, r8, lsl #23
   126cc:	andeq	r4, r0, r0, asr #22
   126d0:	andeq	r4, r0, r8, asr fp
   126d4:	andeq	r4, r0, r8, lsr fp
   126d8:	ldr	ip, [pc, #248]	; 127d8 <__assert_fail@plt+0x15a0>
   126dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126e0:	mov	r4, r2
   126e4:	ldr	r2, [pc, #240]	; 127dc <__assert_fail@plt+0x15a4>
   126e8:	add	ip, pc, ip
   126ec:	sub	sp, sp, #8192	; 0x2000
   126f0:	mov	r5, r3
   126f4:	sub	sp, sp, #12
   126f8:	orrs	r3, r4, r5
   126fc:	ldr	fp, [ip, r2]
   12700:	mov	r3, ip
   12704:	add	r2, sp, #8192	; 0x2000
   12708:	mov	r9, r0
   1270c:	mov	sl, r1
   12710:	addne	r8, sp, #4
   12714:	ldr	r3, [fp]
   12718:	str	r3, [r2, #4]
   1271c:	bne	1272c <__assert_fail@plt+0x14f4>
   12720:	b	127bc <__assert_fail@plt+0x1584>
   12724:	cmp	r7, #0
   12728:	beq	127bc <__assert_fail@plt+0x1584>
   1272c:	cmp	r5, #0
   12730:	cmpeq	r4, #8192	; 0x2000
   12734:	mov	r2, r4
   12738:	mov	r0, r9
   1273c:	mov	r1, r8
   12740:	movhi	r2, #8192	; 0x2000
   12744:	bl	14f00 <close_stdout@@Base+0x1bb4>
   12748:	cmn	r0, #1
   1274c:	mov	r6, r0
   12750:	beq	127c4 <__assert_fail@plt+0x158c>
   12754:	subs	r4, r4, r0
   12758:	sbc	r5, r5, #0
   1275c:	orrs	r3, r4, r5
   12760:	moveq	r7, #0
   12764:	movne	r7, #1
   12768:	cmp	r0, #0
   1276c:	movne	r3, #0
   12770:	andeq	r3, r7, #1
   12774:	cmp	r3, #0
   12778:	bne	127cc <__assert_fail@plt+0x1594>
   1277c:	mov	r0, r8
   12780:	mov	r1, #1
   12784:	mov	r2, r6
   12788:	mov	r3, sl
   1278c:	bl	11010 <fwrite_unlocked@plt>
   12790:	cmp	r6, r0
   12794:	bls	12724 <__assert_fail@plt+0x14ec>
   12798:	mov	r0, #2
   1279c:	add	r3, sp, #8192	; 0x2000
   127a0:	ldr	r2, [r3, #4]
   127a4:	ldr	r3, [fp]
   127a8:	cmp	r2, r3
   127ac:	bne	127d4 <__assert_fail@plt+0x159c>
   127b0:	add	sp, sp, #8192	; 0x2000
   127b4:	add	sp, sp, #12
   127b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127bc:	mov	r0, #0
   127c0:	b	1279c <__assert_fail@plt+0x1564>
   127c4:	mov	r0, #1
   127c8:	b	1279c <__assert_fail@plt+0x1564>
   127cc:	mov	r0, #3
   127d0:	b	1279c <__assert_fail@plt+0x1564>
   127d4:	bl	11034 <__stack_chk_fail@plt>
   127d8:	andeq	r6, r1, r0, lsl r9
   127dc:	strdeq	r0, [r0], -ip
   127e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e4:	mov	r5, r3
   127e8:	ldr	r8, [pc, #352]	; 12950 <__assert_fail@plt+0x1718>
   127ec:	sub	sp, sp, #8192	; 0x2000
   127f0:	ldr	r3, [pc, #348]	; 12954 <__assert_fail@plt+0x171c>
   127f4:	sub	sp, sp, #28
   127f8:	add	r8, pc, r8
   127fc:	mov	r4, r2
   12800:	str	r0, [sp, #12]
   12804:	mov	r9, r1
   12808:	ldr	r3, [r8, r3]
   1280c:	add	r1, sp, #8192	; 0x2000
   12810:	orrs	r2, r4, r5
   12814:	str	r3, [sp, #8]
   12818:	ldr	r3, [r3]
   1281c:	str	r3, [r1, #20]
   12820:	beq	128e0 <__assert_fail@plt+0x16a8>
   12824:	ldr	r2, [pc, #300]	; 12958 <__assert_fail@plt+0x1720>
   12828:	add	r7, sp, #20
   1282c:	mov	r6, #8192	; 0x2000
   12830:	add	r2, pc, r2
   12834:	str	r2, [sp, #4]
   12838:	b	1284c <__assert_fail@plt+0x1614>
   1283c:	subs	r4, r4, fp
   12840:	sbc	r5, r5, #0
   12844:	orrs	r3, r4, r5
   12848:	beq	128e0 <__assert_fail@plt+0x16a8>
   1284c:	mov	r2, r6
   12850:	mov	r3, #0
   12854:	cmp	r5, r3
   12858:	cmpeq	r4, r2
   1285c:	mov	r0, r9
   12860:	mov	r1, r7
   12864:	movcc	r6, r4
   12868:	mov	r2, r6
   1286c:	bl	14f00 <close_stdout@@Base+0x1bb4>
   12870:	cmn	r0, #1
   12874:	mov	fp, r0
   12878:	beq	12908 <__assert_fail@plt+0x16d0>
   1287c:	cmp	r0, #0
   12880:	beq	128e0 <__assert_fail@plt+0x16a8>
   12884:	ldr	r3, [pc, #208]	; 1295c <__assert_fail@plt+0x1724>
   12888:	mov	r0, r7
   1288c:	mov	r1, #1
   12890:	mov	r2, fp
   12894:	ldr	r3, [r8, r3]
   12898:	ldr	r3, [r3]
   1289c:	bl	11010 <fwrite_unlocked@plt>
   128a0:	cmp	fp, r0
   128a4:	bls	1283c <__assert_fail@plt+0x1604>
   128a8:	bl	11160 <__errno_location@plt>
   128ac:	ldr	r1, [sp, #4]
   128b0:	mov	r2, #5
   128b4:	subs	r4, r4, fp
   128b8:	sbc	r5, r5, #0
   128bc:	ldr	sl, [r0]
   128c0:	mov	r0, #0
   128c4:	bl	11028 <dcgettext@plt>
   128c8:	mov	r1, sl
   128cc:	mov	r2, r0
   128d0:	mov	r0, #1
   128d4:	bl	110b8 <error@plt>
   128d8:	orrs	r3, r4, r5
   128dc:	bne	1284c <__assert_fail@plt+0x1614>
   128e0:	mov	r0, #1
   128e4:	add	r1, sp, #8192	; 0x2000
   128e8:	ldr	r2, [r1, #20]
   128ec:	ldr	r1, [sp, #8]
   128f0:	ldr	r3, [r1]
   128f4:	cmp	r2, r3
   128f8:	bne	1294c <__assert_fail@plt+0x1714>
   128fc:	add	sp, sp, #8192	; 0x2000
   12900:	add	sp, sp, #28
   12904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12908:	bl	11160 <__errno_location@plt>
   1290c:	ldr	r1, [pc, #76]	; 12960 <__assert_fail@plt+0x1728>
   12910:	mov	r2, #5
   12914:	add	r1, pc, r1
   12918:	ldr	r4, [r0]
   1291c:	mov	r0, #0
   12920:	bl	11028 <dcgettext@plt>
   12924:	mov	r5, r0
   12928:	ldr	r0, [sp, #12]
   1292c:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   12930:	mov	r1, r4
   12934:	mov	r2, r5
   12938:	mov	r3, r0
   1293c:	mov	r0, #0
   12940:	bl	110b8 <error@plt>
   12944:	mov	r0, #0
   12948:	b	128e4 <__assert_fail@plt+0x16ac>
   1294c:	bl	11034 <__stack_chk_fail@plt>
   12950:	andeq	r6, r1, r0, lsl #16
   12954:	strdeq	r0, [r0], -ip
   12958:	ldrdeq	r4, [r0], -r8
   1295c:	andeq	r0, r0, r8, lsl r1
   12960:	andeq	r4, r0, r0, ror #17
   12964:	cmp	r0, #2
   12968:	push	{r4, r5, r6, lr}
   1296c:	mov	r4, r1
   12970:	beq	129d8 <__assert_fail@plt+0x17a0>
   12974:	cmp	r0, #3
   12978:	beq	129c8 <__assert_fail@plt+0x1790>
   1297c:	cmp	r0, #1
   12980:	beq	12988 <__assert_fail@plt+0x1750>
   12984:	bl	11220 <abort@plt>
   12988:	bl	11160 <__errno_location@plt>
   1298c:	ldr	r1, [pc, #84]	; 129e8 <__assert_fail@plt+0x17b0>
   12990:	add	r1, pc, r1
   12994:	ldr	r5, [r0]
   12998:	mov	r2, #5
   1299c:	mov	r0, #0
   129a0:	bl	11028 <dcgettext@plt>
   129a4:	mov	r6, r0
   129a8:	mov	r0, r4
   129ac:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   129b0:	mov	r1, r5
   129b4:	mov	r2, r6
   129b8:	pop	{r4, r5, r6, lr}
   129bc:	mov	r3, r0
   129c0:	mov	r0, #0
   129c4:	b	110b8 <error@plt>
   129c8:	bl	11160 <__errno_location@plt>
   129cc:	ldr	r1, [pc, #24]	; 129ec <__assert_fail@plt+0x17b4>
   129d0:	add	r1, pc, r1
   129d4:	b	12994 <__assert_fail@plt+0x175c>
   129d8:	bl	11160 <__errno_location@plt>
   129dc:	ldr	r1, [pc, #12]	; 129f0 <__assert_fail@plt+0x17b8>
   129e0:	add	r1, pc, r1
   129e4:	b	12994 <__assert_fail@plt+0x175c>
   129e8:	andeq	r4, r0, r4, ror #16
   129ec:	andeq	r4, r0, r8, asr r8
   129f0:	andeq	r4, r0, r4, lsr r8
   129f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f8:	sub	sp, sp, #8192	; 0x2000
   129fc:	sub	sp, sp, #60	; 0x3c
   12a00:	mov	r8, r1
   12a04:	add	r4, sp, #8192	; 0x2000
   12a08:	add	ip, sp, #8192	; 0x2000
   12a0c:	str	r0, [sp, #20]
   12a10:	mov	r5, r3
   12a14:	ldrd	sl, [r4, #104]	; 0x68
   12a18:	mov	r4, r2
   12a1c:	ldrd	r0, [ip, #96]	; 0x60
   12a20:	mov	r7, #0
   12a24:	ldr	r9, [pc, #1088]	; 12e6c <__assert_fail@plt+0x1c34>
   12a28:	movw	r6, #8191	; 0x1fff
   12a2c:	subs	r0, sl, r0
   12a30:	sbc	r1, fp, r1
   12a34:	ldr	ip, [pc, #1076]	; 12e70 <__assert_fail@plt+0x1c38>
   12a38:	add	r9, pc, r9
   12a3c:	add	lr, sp, #8192	; 0x2000
   12a40:	asr	r2, r1, #31
   12a44:	eor	r0, r0, r2
   12a48:	ldr	ip, [r9, ip]
   12a4c:	asr	r3, r2, #31
   12a50:	eor	r1, r1, r3
   12a54:	subs	r0, r0, r2
   12a58:	sbc	r1, r1, r3
   12a5c:	str	ip, [sp, #12]
   12a60:	and	r1, r1, r7
   12a64:	and	r0, r0, r6
   12a68:	eor	r0, r0, r2
   12a6c:	eor	r1, r1, r3
   12a70:	subs	r0, r0, r2
   12a74:	sbc	r1, r1, r3
   12a78:	ldr	ip, [ip]
   12a7c:	cmp	r0, #0
   12a80:	mov	r7, r0
   12a84:	movne	r1, #0
   12a88:	moveq	r0, #8192	; 0x2000
   12a8c:	moveq	r1, #0
   12a90:	moveq	r7, #8192	; 0x2000
   12a94:	subs	sl, sl, r0
   12a98:	sbc	fp, fp, r1
   12a9c:	str	ip, [lr, #52]	; 0x34
   12aa0:	mov	r0, #0
   12aa4:	str	r0, [sp]
   12aa8:	mov	r2, sl
   12aac:	mov	r3, fp
   12ab0:	mov	r0, r8
   12ab4:	bl	1107c <lseek64@plt>
   12ab8:	cmp	r0, #0
   12abc:	sbcs	r2, r1, #0
   12ac0:	blt	12cec <__assert_fail@plt+0x1ab4>
   12ac4:	mov	r2, r7
   12ac8:	add	r7, sp, #52	; 0x34
   12acc:	mov	r0, r8
   12ad0:	add	ip, sp, #56	; 0x38
   12ad4:	mov	r1, r7
   12ad8:	str	ip, [sp, #16]
   12adc:	bl	14f00 <close_stdout@@Base+0x1bb4>
   12ae0:	cmn	r0, #1
   12ae4:	mov	r6, r0
   12ae8:	beq	12d3c <__assert_fail@plt+0x1b04>
   12aec:	cmp	r0, #0
   12af0:	bne	12c5c <__assert_fail@plt+0x1a24>
   12af4:	mov	r2, r6
   12af8:	cmp	r2, #0
   12afc:	beq	12b4c <__assert_fail@plt+0x1914>
   12b00:	str	r8, [sp, #8]
   12b04:	mov	r8, r7
   12b08:	b	12b30 <__assert_fail@plt+0x18f8>
   12b0c:	subs	r6, r4, #1
   12b10:	rsb	r2, r8, r0
   12b14:	sbc	r7, r5, #0
   12b18:	orrs	r1, r4, r5
   12b1c:	beq	12bb4 <__assert_fail@plt+0x197c>
   12b20:	cmp	r2, #0
   12b24:	beq	12c44 <__assert_fail@plt+0x1a0c>
   12b28:	mov	r4, r6
   12b2c:	mov	r5, r7
   12b30:	mov	r0, r8
   12b34:	mov	r1, #10
   12b38:	bl	11148 <memrchr@plt>
   12b3c:	cmp	r0, #0
   12b40:	bne	12b0c <__assert_fail@plt+0x18d4>
   12b44:	mov	r7, r8
   12b48:	ldr	r8, [sp, #8]
   12b4c:	add	r1, sp, #8192	; 0x2000
   12b50:	ldrd	r0, [r1, #96]	; 0x60
   12b54:	cmp	fp, r1
   12b58:	cmpeq	sl, r0
   12b5c:	beq	12c1c <__assert_fail@plt+0x19e4>
   12b60:	subs	sl, sl, #8192	; 0x2000
   12b64:	mov	r2, #0
   12b68:	sbc	fp, fp, #0
   12b6c:	str	r2, [sp]
   12b70:	mov	r0, r8
   12b74:	mov	r2, sl
   12b78:	mov	r3, fp
   12b7c:	bl	1107c <lseek64@plt>
   12b80:	cmp	r0, #0
   12b84:	sbcs	r3, r1, #0
   12b88:	blt	12df4 <__assert_fail@plt+0x1bbc>
   12b8c:	mov	r2, #8192	; 0x2000
   12b90:	mov	r0, r8
   12b94:	mov	r1, r7
   12b98:	bl	14f00 <close_stdout@@Base+0x1bb4>
   12b9c:	cmn	r0, #1
   12ba0:	mov	r2, r0
   12ba4:	beq	12e24 <__assert_fail@plt+0x1bec>
   12ba8:	cmp	r0, #0
   12bac:	bne	12af8 <__assert_fail@plt+0x18c0>
   12bb0:	b	12c1c <__assert_fail@plt+0x19e4>
   12bb4:	mov	r6, r2
   12bb8:	add	r2, sp, #8192	; 0x2000
   12bbc:	mov	r7, r8
   12bc0:	ldr	r8, [sp, #8]
   12bc4:	ldrd	r2, [r2, #96]	; 0x60
   12bc8:	cmp	r2, sl
   12bcc:	sbcs	r3, r3, fp
   12bd0:	blt	12c88 <__assert_fail@plt+0x1a50>
   12bd4:	ldr	r3, [pc, #664]	; 12e74 <__assert_fail@plt+0x1c3c>
   12bd8:	add	r2, r6, #1
   12bdc:	ldr	r5, [r9, r3]
   12be0:	ldr	r3, [r5]
   12be4:	mov	r1, #1
   12be8:	mov	r0, r7
   12bec:	mov	r4, #0
   12bf0:	bl	11010 <fwrite_unlocked@plt>
   12bf4:	adds	r2, sl, r6
   12bf8:	adc	r3, fp, #0
   12bfc:	adds	r2, r2, #1
   12c00:	adc	r3, r3, #0
   12c04:	mov	r0, r8
   12c08:	str	r4, [sp]
   12c0c:	bl	1107c <lseek64@plt>
   12c10:	cmp	r0, #0
   12c14:	sbcs	r2, r1, #0
   12c18:	blt	12d80 <__assert_fail@plt+0x1b48>
   12c1c:	mov	r0, #1
   12c20:	ldr	r4, [sp, #12]
   12c24:	add	r1, sp, #8192	; 0x2000
   12c28:	ldr	r2, [r1, #52]	; 0x34
   12c2c:	ldr	r3, [r4]
   12c30:	cmp	r2, r3
   12c34:	bne	12e68 <__assert_fail@plt+0x1c30>
   12c38:	add	sp, sp, #8192	; 0x2000
   12c3c:	add	sp, sp, #60	; 0x3c
   12c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c44:	mov	r1, r7
   12c48:	mov	r4, r6
   12c4c:	mov	r7, r8
   12c50:	mov	r5, r1
   12c54:	ldr	r8, [sp, #8]
   12c58:	b	12b4c <__assert_fail@plt+0x1914>
   12c5c:	add	r0, sp, #8192	; 0x2000
   12c60:	add	r0, r0, #56	; 0x38
   12c64:	add	r3, r0, r6
   12c68:	sub	r3, r3, #8192	; 0x2000
   12c6c:	sub	r3, r3, #4
   12c70:	ldrb	r3, [r3, #-1]
   12c74:	cmp	r3, #10
   12c78:	beq	12af4 <__assert_fail@plt+0x18bc>
   12c7c:	subs	r4, r4, #1
   12c80:	sbc	r5, r5, #0
   12c84:	b	12af4 <__assert_fail@plt+0x18bc>
   12c88:	add	r5, sp, #8192	; 0x2000
   12c8c:	mov	r4, #0
   12c90:	mov	r0, r8
   12c94:	str	r4, [sp]
   12c98:	ldrd	r2, [r5, #96]	; 0x60
   12c9c:	bl	1107c <lseek64@plt>
   12ca0:	cmp	r0, #0
   12ca4:	sbcs	ip, r1, #0
   12ca8:	blt	12dc4 <__assert_fail@plt+0x1b8c>
   12cac:	ldr	r1, [pc, #448]	; 12e74 <__assert_fail@plt+0x1c3c>
   12cb0:	add	lr, sp, #8192	; 0x2000
   12cb4:	mov	r0, r8
   12cb8:	ldrd	r2, [lr, #96]	; 0x60
   12cbc:	ldr	r5, [r9, r1]
   12cc0:	subs	r2, sl, r2
   12cc4:	sbc	r3, fp, r3
   12cc8:	ldr	r1, [r5]
   12ccc:	bl	126d8 <__assert_fail@plt+0x14a0>
   12cd0:	cmp	r0, #0
   12cd4:	addeq	r2, r6, #1
   12cd8:	beq	12be0 <__assert_fail@plt+0x19a8>
   12cdc:	ldr	r1, [sp, #20]
   12ce0:	bl	12964 <__assert_fail@plt+0x172c>
   12ce4:	mov	r0, r4
   12ce8:	b	12c20 <__assert_fail@plt+0x19e8>
   12cec:	bl	11160 <__errno_location@plt>
   12cf0:	ldr	r1, [pc, #384]	; 12e78 <__assert_fail@plt+0x1c40>
   12cf4:	mov	r2, #5
   12cf8:	add	r1, pc, r1
   12cfc:	ldr	r5, [r0]
   12d00:	mov	r0, #0
   12d04:	bl	11028 <dcgettext@plt>
   12d08:	add	r2, sp, #52	; 0x34
   12d0c:	mov	r1, fp
   12d10:	mov	r4, r0
   12d14:	mov	r0, sl
   12d18:	bl	13578 <close_stdout@@Base+0x22c>
   12d1c:	mov	r1, r5
   12d20:	mov	r2, r4
   12d24:	ldr	r3, [sp, #20]
   12d28:	str	r0, [sp]
   12d2c:	mov	r0, #0
   12d30:	bl	110b8 <error@plt>
   12d34:	mov	r0, #0
   12d38:	b	12c20 <__assert_fail@plt+0x19e8>
   12d3c:	bl	11160 <__errno_location@plt>
   12d40:	ldr	r1, [pc, #308]	; 12e7c <__assert_fail@plt+0x1c44>
   12d44:	mov	r2, #5
   12d48:	add	r1, pc, r1
   12d4c:	ldr	r4, [r0]
   12d50:	mov	r0, #0
   12d54:	bl	11028 <dcgettext@plt>
   12d58:	mov	r5, r0
   12d5c:	ldr	r0, [sp, #20]
   12d60:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   12d64:	mov	r1, r4
   12d68:	mov	r2, r5
   12d6c:	mov	r3, r0
   12d70:	mov	r0, #0
   12d74:	bl	110b8 <error@plt>
   12d78:	mov	r0, #0
   12d7c:	b	12c20 <__assert_fail@plt+0x19e8>
   12d80:	bl	11160 <__errno_location@plt>
   12d84:	ldr	r1, [pc, #244]	; 12e80 <__assert_fail@plt+0x1c48>
   12d88:	mov	r2, #5
   12d8c:	add	r1, pc, r1
   12d90:	ldr	r5, [r0]
   12d94:	mov	r0, r4
   12d98:	bl	11028 <dcgettext@plt>
   12d9c:	mov	r6, r0
   12da0:	ldr	r0, [sp, #20]
   12da4:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   12da8:	mov	r1, r5
   12dac:	mov	r2, r6
   12db0:	mov	r3, r0
   12db4:	mov	r0, r4
   12db8:	bl	110b8 <error@plt>
   12dbc:	mov	r0, r4
   12dc0:	b	12c20 <__assert_fail@plt+0x19e8>
   12dc4:	bl	11160 <__errno_location@plt>
   12dc8:	ldr	r5, [r0]
   12dcc:	ldr	r0, [sp, #20]
   12dd0:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   12dd4:	ldr	r2, [pc, #168]	; 12e84 <__assert_fail@plt+0x1c4c>
   12dd8:	mov	r1, r5
   12ddc:	add	r2, pc, r2
   12de0:	mov	r3, r0
   12de4:	mov	r0, r4
   12de8:	bl	110b8 <error@plt>
   12dec:	mov	r0, r4
   12df0:	b	12c20 <__assert_fail@plt+0x19e8>
   12df4:	bl	11160 <__errno_location@plt>
   12df8:	ldr	r1, [pc, #136]	; 12e88 <__assert_fail@plt+0x1c50>
   12dfc:	mov	r2, #5
   12e00:	add	r1, pc, r1
   12e04:	ldr	r5, [r0]
   12e08:	mov	r0, #0
   12e0c:	bl	11028 <dcgettext@plt>
   12e10:	mov	r1, fp
   12e14:	add	r2, sp, #28
   12e18:	mov	r4, r0
   12e1c:	mov	r0, sl
   12e20:	b	12d18 <__assert_fail@plt+0x1ae0>
   12e24:	bl	11160 <__errno_location@plt>
   12e28:	ldr	r1, [pc, #92]	; 12e8c <__assert_fail@plt+0x1c54>
   12e2c:	mov	r2, #5
   12e30:	add	r1, pc, r1
   12e34:	ldr	r4, [r0]
   12e38:	mov	r0, #0
   12e3c:	bl	11028 <dcgettext@plt>
   12e40:	mov	r5, r0
   12e44:	ldr	r0, [sp, #20]
   12e48:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   12e4c:	mov	r1, r4
   12e50:	mov	r2, r5
   12e54:	mov	r3, r0
   12e58:	mov	r0, #0
   12e5c:	bl	110b8 <error@plt>
   12e60:	mov	r0, #0
   12e64:	b	12c20 <__assert_fail@plt+0x19e8>
   12e68:	bl	11034 <__stack_chk_fail@plt>
   12e6c:	andeq	r6, r1, r0, asr #11
   12e70:	strdeq	r0, [r0], -ip
   12e74:	andeq	r0, r0, r8, lsl r1
   12e78:	andeq	r4, r0, r0, asr r5
   12e7c:	andeq	r4, r0, ip, lsr #9
   12e80:	andeq	r4, r0, r4, lsl r5
   12e84:	andeq	r4, r0, ip, lsl #9
   12e88:	andeq	r4, r0, r8, asr #8
   12e8c:	andeq	r4, r0, r4, asr #7
   12e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e94:	mov	r5, r3
   12e98:	ldr	r8, [pc, #528]	; 130b0 <__assert_fail@plt+0x1e78>
   12e9c:	sub	sp, sp, #8320	; 0x2080
   12ea0:	ldr	r3, [pc, #524]	; 130b4 <__assert_fail@plt+0x1e7c>
   12ea4:	sub	sp, sp, #20
   12ea8:	add	r8, pc, r8
   12eac:	mov	r4, r2
   12eb0:	str	r0, [sp, #20]
   12eb4:	mov	r7, r1
   12eb8:	ldr	r3, [r8, r3]
   12ebc:	add	r1, sp, #8192	; 0x2000
   12ec0:	orrs	r2, r4, r5
   12ec4:	str	r3, [sp, #16]
   12ec8:	ldr	r3, [r3]
   12ecc:	str	r3, [r1, #140]	; 0x8c
   12ed0:	beq	12fa4 <__assert_fail@plt+0x1d6c>
   12ed4:	ldr	sl, [pc, #476]	; 130b8 <__assert_fail@plt+0x1e80>
   12ed8:	add	r9, sp, #144	; 0x90
   12edc:	ldr	r2, [pc, #472]	; 130bc <__assert_fail@plt+0x1e84>
   12ee0:	add	r6, sp, #140	; 0x8c
   12ee4:	add	sl, pc, sl
   12ee8:	add	r3, sp, #32
   12eec:	add	r2, pc, r2
   12ef0:	str	r3, [sp, #12]
   12ef4:	str	r2, [sp, #24]
   12ef8:	mov	r0, r7
   12efc:	mov	r1, r6
   12f00:	mov	r2, #8192	; 0x2000
   12f04:	bl	14f00 <close_stdout@@Base+0x1bb4>
   12f08:	cmn	r0, #1
   12f0c:	beq	12ff8 <__assert_fail@plt+0x1dc0>
   12f10:	cmp	r0, #0
   12f14:	beq	12fa4 <__assert_fail@plt+0x1d6c>
   12f18:	sub	r3, r9, #5
   12f1c:	mov	fp, #0
   12f20:	b	12f2c <__assert_fail@plt+0x1cf4>
   12f24:	cmp	fp, r0
   12f28:	beq	12f78 <__assert_fail@plt+0x1d40>
   12f2c:	ldrb	r2, [r3, #1]!
   12f30:	add	fp, fp, #1
   12f34:	cmp	r2, #10
   12f38:	bne	12f24 <__assert_fail@plt+0x1cec>
   12f3c:	subs	r4, r4, #1
   12f40:	sbc	r5, r5, #0
   12f44:	orrs	r1, r4, r5
   12f48:	bne	12f24 <__assert_fail@plt+0x1cec>
   12f4c:	rsb	r2, fp, r0
   12f50:	mov	r1, #1
   12f54:	mov	r3, #0
   12f58:	str	r1, [sp]
   12f5c:	rsbs	r2, r2, #0
   12f60:	rsc	r3, r3, #0
   12f64:	mov	r0, r7
   12f68:	bl	1107c <lseek64@plt>
   12f6c:	cmp	r0, #0
   12f70:	sbcs	r2, r1, #0
   12f74:	blt	1303c <__assert_fail@plt+0x1e04>
   12f78:	ldr	r3, [pc, #320]	; 130c0 <__assert_fail@plt+0x1e88>
   12f7c:	mov	r0, r6
   12f80:	mov	r1, #1
   12f84:	mov	r2, fp
   12f88:	ldr	r3, [r8, r3]
   12f8c:	ldr	r3, [r3]
   12f90:	bl	11010 <fwrite_unlocked@plt>
   12f94:	cmp	fp, r0
   12f98:	bhi	12fcc <__assert_fail@plt+0x1d94>
   12f9c:	orrs	r2, r4, r5
   12fa0:	bne	12ef8 <__assert_fail@plt+0x1cc0>
   12fa4:	mov	r0, #1
   12fa8:	ldr	r1, [sp, #16]
   12fac:	add	r3, sp, #8192	; 0x2000
   12fb0:	ldr	r2, [r3, #140]	; 0x8c
   12fb4:	ldr	r3, [r1]
   12fb8:	cmp	r2, r3
   12fbc:	bne	130ac <__assert_fail@plt+0x1e74>
   12fc0:	add	sp, sp, #8320	; 0x2080
   12fc4:	add	sp, sp, #20
   12fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fcc:	bl	11160 <__errno_location@plt>
   12fd0:	mov	r1, sl
   12fd4:	mov	r2, #5
   12fd8:	ldr	fp, [r0]
   12fdc:	mov	r0, #0
   12fe0:	bl	11028 <dcgettext@plt>
   12fe4:	mov	r1, fp
   12fe8:	mov	r2, r0
   12fec:	mov	r0, #1
   12ff0:	bl	110b8 <error@plt>
   12ff4:	b	12f9c <__assert_fail@plt+0x1d64>
   12ff8:	bl	11160 <__errno_location@plt>
   12ffc:	ldr	r1, [pc, #192]	; 130c4 <__assert_fail@plt+0x1e8c>
   13000:	mov	r2, #5
   13004:	add	r1, pc, r1
   13008:	ldr	r4, [r0]
   1300c:	mov	r0, #0
   13010:	bl	11028 <dcgettext@plt>
   13014:	mov	r5, r0
   13018:	ldr	r0, [sp, #20]
   1301c:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   13020:	mov	r1, r4
   13024:	mov	r2, r5
   13028:	mov	r3, r0
   1302c:	mov	r0, #0
   13030:	bl	110b8 <error@plt>
   13034:	mov	r0, #0
   13038:	b	12fa8 <__assert_fail@plt+0x1d70>
   1303c:	bl	11160 <__errno_location@plt>
   13040:	mov	r1, r7
   13044:	ldr	r2, [sp, #12]
   13048:	ldr	r0, [r0]
   1304c:	str	r0, [sp, #28]
   13050:	mov	r0, #3
   13054:	bl	11064 <__fxstat64@plt>
   13058:	cmp	r0, #0
   1305c:	bne	13074 <__assert_fail@plt+0x1e3c>
   13060:	ldr	r1, [sp, #12]
   13064:	ldr	r3, [r1, #16]
   13068:	and	r3, r3, #61440	; 0xf000
   1306c:	cmp	r3, #32768	; 0x8000
   13070:	bne	12f78 <__assert_fail@plt+0x1d40>
   13074:	ldr	r1, [sp, #24]
   13078:	mov	r2, #5
   1307c:	mov	r0, #0
   13080:	bl	11028 <dcgettext@plt>
   13084:	mov	r2, r0
   13088:	ldr	r0, [sp, #20]
   1308c:	str	r2, [sp, #8]
   13090:	bl	14ef4 <close_stdout@@Base+0x1ba8>
   13094:	ldr	r2, [sp, #8]
   13098:	ldr	r1, [sp, #28]
   1309c:	mov	r3, r0
   130a0:	mov	r0, #0
   130a4:	bl	110b8 <error@plt>
   130a8:	b	12f78 <__assert_fail@plt+0x1d40>
   130ac:	bl	11034 <__stack_chk_fail@plt>
   130b0:	andeq	r6, r1, r0, asr r1
   130b4:	strdeq	r0, [r0], -ip
   130b8:	andeq	r4, r0, r4, lsr #6
   130bc:	ldrdeq	r4, [r0], -r8
   130c0:	andeq	r0, r0, r8, lsl r1
   130c4:	strdeq	r4, [r0], -r0
   130c8:	push	{r4, r5, r6, lr}
   130cc:	subs	r4, r0, #0
   130d0:	ldr	r5, [pc, #512]	; 132d8 <__assert_fail@plt+0x20a0>
   130d4:	add	r5, pc, r5
   130d8:	beq	13120 <__assert_fail@plt+0x1ee8>
   130dc:	ldr	r3, [pc, #504]	; 132dc <__assert_fail@plt+0x20a4>
   130e0:	mov	r2, #5
   130e4:	ldr	r1, [pc, #500]	; 132e0 <__assert_fail@plt+0x20a8>
   130e8:	mov	r0, #0
   130ec:	ldr	r3, [r5, r3]
   130f0:	add	r1, pc, r1
   130f4:	ldr	r6, [r3]
   130f8:	bl	11028 <dcgettext@plt>
   130fc:	ldr	r3, [pc, #480]	; 132e4 <__assert_fail@plt+0x20ac>
   13100:	mov	r1, #1
   13104:	ldr	r3, [r5, r3]
   13108:	ldr	r3, [r3]
   1310c:	mov	r2, r0
   13110:	mov	r0, r6
   13114:	bl	111a8 <__fprintf_chk@plt>
   13118:	mov	r0, r4
   1311c:	bl	11124 <exit@plt>
   13120:	ldr	r1, [pc, #448]	; 132e8 <__assert_fail@plt+0x20b0>
   13124:	mov	r2, #5
   13128:	add	r1, pc, r1
   1312c:	bl	11028 <dcgettext@plt>
   13130:	ldr	r3, [pc, #428]	; 132e4 <__assert_fail@plt+0x20ac>
   13134:	ldr	r6, [r5, r3]
   13138:	ldr	r2, [r6]
   1313c:	mov	r1, r0
   13140:	mov	r0, #1
   13144:	bl	11190 <__printf_chk@plt>
   13148:	ldr	r1, [pc, #412]	; 132ec <__assert_fail@plt+0x20b4>
   1314c:	mov	r2, #5
   13150:	mov	r0, r4
   13154:	add	r1, pc, r1
   13158:	bl	11028 <dcgettext@plt>
   1315c:	ldr	r3, [pc, #396]	; 132f0 <__assert_fail@plt+0x20b8>
   13160:	ldr	r5, [r5, r3]
   13164:	ldr	r1, [r5]
   13168:	bl	10f98 <fputs_unlocked@plt>
   1316c:	ldr	r1, [pc, #384]	; 132f4 <__assert_fail@plt+0x20bc>
   13170:	mov	r2, #5
   13174:	mov	r0, r4
   13178:	add	r1, pc, r1
   1317c:	bl	11028 <dcgettext@plt>
   13180:	ldr	r1, [r5]
   13184:	bl	10f98 <fputs_unlocked@plt>
   13188:	ldr	r1, [pc, #360]	; 132f8 <__assert_fail@plt+0x20c0>
   1318c:	mov	r2, #5
   13190:	mov	r0, r4
   13194:	add	r1, pc, r1
   13198:	bl	11028 <dcgettext@plt>
   1319c:	ldr	r1, [r5]
   131a0:	bl	10f98 <fputs_unlocked@plt>
   131a4:	ldr	r1, [pc, #336]	; 132fc <__assert_fail@plt+0x20c4>
   131a8:	mov	r2, #5
   131ac:	mov	r0, r4
   131b0:	add	r1, pc, r1
   131b4:	bl	11028 <dcgettext@plt>
   131b8:	ldr	r1, [r5]
   131bc:	bl	10f98 <fputs_unlocked@plt>
   131c0:	ldr	r1, [pc, #312]	; 13300 <__assert_fail@plt+0x20c8>
   131c4:	mov	r2, #5
   131c8:	mov	r0, r4
   131cc:	add	r1, pc, r1
   131d0:	bl	11028 <dcgettext@plt>
   131d4:	ldr	r1, [r5]
   131d8:	bl	10f98 <fputs_unlocked@plt>
   131dc:	ldr	r1, [pc, #288]	; 13304 <__assert_fail@plt+0x20cc>
   131e0:	mov	r2, #5
   131e4:	mov	r0, r4
   131e8:	add	r1, pc, r1
   131ec:	bl	11028 <dcgettext@plt>
   131f0:	ldr	r1, [r5]
   131f4:	bl	10f98 <fputs_unlocked@plt>
   131f8:	ldr	r1, [pc, #264]	; 13308 <__assert_fail@plt+0x20d0>
   131fc:	mov	r2, #5
   13200:	mov	r0, r4
   13204:	add	r1, pc, r1
   13208:	bl	11028 <dcgettext@plt>
   1320c:	ldr	r1, [r5]
   13210:	bl	10f98 <fputs_unlocked@plt>
   13214:	ldr	r1, [pc, #240]	; 1330c <__assert_fail@plt+0x20d4>
   13218:	mov	r2, #5
   1321c:	mov	r0, r4
   13220:	add	r1, pc, r1
   13224:	bl	11028 <dcgettext@plt>
   13228:	ldr	r2, [pc, #224]	; 13310 <__assert_fail@plt+0x20d8>
   1322c:	ldr	r3, [pc, #224]	; 13314 <__assert_fail@plt+0x20dc>
   13230:	add	r2, pc, r2
   13234:	add	r3, pc, r3
   13238:	mov	r1, r0
   1323c:	mov	r0, #1
   13240:	bl	11190 <__printf_chk@plt>
   13244:	mov	r0, #5
   13248:	mov	r1, r4
   1324c:	bl	111e4 <setlocale@plt>
   13250:	cmp	r0, #0
   13254:	beq	13270 <__assert_fail@plt+0x2038>
   13258:	ldr	r1, [pc, #184]	; 13318 <__assert_fail@plt+0x20e0>
   1325c:	mov	r2, #3
   13260:	add	r1, pc, r1
   13264:	bl	11214 <strncmp@plt>
   13268:	cmp	r0, #0
   1326c:	bne	132a4 <__assert_fail@plt+0x206c>
   13270:	ldr	r1, [pc, #164]	; 1331c <__assert_fail@plt+0x20e4>
   13274:	mov	r2, #5
   13278:	mov	r0, #0
   1327c:	add	r1, pc, r1
   13280:	bl	11028 <dcgettext@plt>
   13284:	mov	r5, r0
   13288:	ldr	r0, [r6]
   1328c:	bl	13464 <close_stdout@@Base+0x118>
   13290:	mov	r1, r5
   13294:	mov	r2, r0
   13298:	mov	r0, #1
   1329c:	bl	11190 <__printf_chk@plt>
   132a0:	b	13118 <__assert_fail@plt+0x1ee0>
   132a4:	ldr	r1, [pc, #116]	; 13320 <__assert_fail@plt+0x20e8>
   132a8:	mov	r2, #5
   132ac:	mov	r0, r4
   132b0:	add	r1, pc, r1
   132b4:	bl	11028 <dcgettext@plt>
   132b8:	mov	r5, r0
   132bc:	ldr	r0, [r6]
   132c0:	bl	13464 <close_stdout@@Base+0x118>
   132c4:	mov	r1, r5
   132c8:	mov	r2, r0
   132cc:	mov	r0, #1
   132d0:	bl	11190 <__printf_chk@plt>
   132d4:	b	13270 <__assert_fail@plt+0x2038>
   132d8:	andeq	r5, r1, r4, lsr #30
   132dc:	andeq	r0, r0, r8, lsl #2
   132e0:	strdeq	r4, [r0], -ip
   132e4:	andeq	r0, r0, r4, lsr #2
   132e8:	andeq	r4, r0, ip, ror #3
   132ec:	andeq	r4, r0, r4, ror #3
   132f0:	andeq	r0, r0, r8, lsl r1
   132f4:	andeq	r4, r0, ip, ror r2
   132f8:	andeq	r4, r0, ip, lsr #5
   132fc:	andeq	r4, r0, r8, lsl r4
   13300:	andeq	r4, r0, r0, lsl #9
   13304:	muleq	r0, r4, r4
   13308:			; <UNDEFINED> instruction: 0x000044b0
   1330c:	andeq	r4, r0, ip, lsr #10
   13310:	andeq	r4, r0, r4, lsr r5
   13314:	andeq	r4, r0, r0, asr #10
   13318:	andeq	r4, r0, ip, lsr r5
   1331c:	andeq	r4, r0, ip, ror #10
   13320:	strdeq	r4, [r0], -r0
   13324:	ldr	r3, [pc, #8]	; 13334 <__assert_fail@plt+0x20fc>
   13328:	add	r3, pc, r3
   1332c:	str	r0, [r3]
   13330:	bx	lr
   13334:	andeq	r5, r1, r8, asr lr
   13338:	ldr	r3, [pc, #8]	; 13348 <__assert_fail@plt+0x2110>
   1333c:	add	r3, pc, r3
   13340:	strb	r0, [r3, #4]
   13344:	bx	lr
   13348:	andeq	r5, r1, r4, asr #28

0001334c <close_stdout@@Base>:
   1334c:	push	{r4, r5, r6, r7, lr}
   13350:	sub	sp, sp, #12
   13354:	ldr	r4, [pc, #228]	; 13440 <close_stdout@@Base+0xf4>
   13358:	ldr	r3, [pc, #228]	; 13444 <close_stdout@@Base+0xf8>
   1335c:	add	r4, pc, r4
   13360:	ldr	r3, [r4, r3]
   13364:	ldr	r0, [r3]
   13368:	bl	15ec4 <close_stdout@@Base+0x2b78>
   1336c:	cmp	r0, #0
   13370:	beq	13398 <close_stdout@@Base+0x4c>
   13374:	ldr	r3, [pc, #204]	; 13448 <close_stdout@@Base+0xfc>
   13378:	add	r3, pc, r3
   1337c:	ldrb	r3, [r3, #4]
   13380:	cmp	r3, #0
   13384:	beq	133b8 <close_stdout@@Base+0x6c>
   13388:	bl	11160 <__errno_location@plt>
   1338c:	ldr	r3, [r0]
   13390:	cmp	r3, #32
   13394:	bne	133b8 <close_stdout@@Base+0x6c>
   13398:	ldr	r3, [pc, #172]	; 1344c <close_stdout@@Base+0x100>
   1339c:	ldr	r3, [r4, r3]
   133a0:	ldr	r0, [r3]
   133a4:	bl	15ec4 <close_stdout@@Base+0x2b78>
   133a8:	cmp	r0, #0
   133ac:	bne	1340c <close_stdout@@Base+0xc0>
   133b0:	add	sp, sp, #12
   133b4:	pop	{r4, r5, r6, r7, pc}
   133b8:	ldr	r1, [pc, #144]	; 13450 <close_stdout@@Base+0x104>
   133bc:	mov	r0, #0
   133c0:	mov	r2, #5
   133c4:	add	r1, pc, r1
   133c8:	bl	11028 <dcgettext@plt>
   133cc:	ldr	r3, [pc, #128]	; 13454 <close_stdout@@Base+0x108>
   133d0:	ldr	r5, [pc, r3]
   133d4:	cmp	r5, #0
   133d8:	mov	r6, r0
   133dc:	beq	1341c <close_stdout@@Base+0xd0>
   133e0:	bl	11160 <__errno_location@plt>
   133e4:	ldr	r7, [r0]
   133e8:	mov	r0, r5
   133ec:	bl	14da0 <close_stdout@@Base+0x1a54>
   133f0:	ldr	r2, [pc, #96]	; 13458 <close_stdout@@Base+0x10c>
   133f4:	str	r6, [sp]
   133f8:	mov	r1, r7
   133fc:	add	r2, pc, r2
   13400:	mov	r3, r0
   13404:	mov	r0, #0
   13408:	bl	110b8 <error@plt>
   1340c:	ldr	r3, [pc, #72]	; 1345c <close_stdout@@Base+0x110>
   13410:	ldr	r3, [r4, r3]
   13414:	ldr	r0, [r3]
   13418:	bl	10fe0 <_exit@plt>
   1341c:	bl	11160 <__errno_location@plt>
   13420:	ldr	r2, [pc, #56]	; 13460 <close_stdout@@Base+0x114>
   13424:	add	r2, pc, r2
   13428:	mov	r3, r0
   1342c:	mov	r0, r5
   13430:	ldr	r1, [r3]
   13434:	mov	r3, r6
   13438:	bl	110b8 <error@plt>
   1343c:	b	1340c <close_stdout@@Base+0xc0>
   13440:	muleq	r1, ip, ip
   13444:	andeq	r0, r0, r8, lsl r1
   13448:	andeq	r5, r1, r8, lsl #28
   1344c:	andeq	r0, r0, r8, lsl #2
   13450:	andeq	r3, r0, r4, asr #28
   13454:			; <UNDEFINED> instruction: 0x00015db0
   13458:	strdeq	r3, [r0], -r0
   1345c:	andeq	r0, r0, ip, lsl r1
   13460:	andeq	r3, r0, ip, asr #27
   13464:	ldrb	r3, [r0]
   13468:	cmp	r3, #47	; 0x2f
   1346c:	bne	13488 <close_stdout@@Base+0x13c>
   13470:	add	r2, r0, #1
   13474:	mov	r0, r2
   13478:	add	r2, r2, #1
   1347c:	ldrb	r3, [r0]
   13480:	cmp	r3, #47	; 0x2f
   13484:	beq	13474 <close_stdout@@Base+0x128>
   13488:	cmp	r3, #0
   1348c:	bxeq	lr
   13490:	mov	r2, r0
   13494:	mov	r1, #0
   13498:	cmp	r3, #47	; 0x2f
   1349c:	moveq	r1, #1
   134a0:	beq	134b0 <close_stdout@@Base+0x164>
   134a4:	cmp	r1, #0
   134a8:	movne	r0, r2
   134ac:	movne	r1, #0
   134b0:	ldrb	r3, [r2, #1]!
   134b4:	cmp	r3, #0
   134b8:	bne	13498 <close_stdout@@Base+0x14c>
   134bc:	bx	lr
   134c0:	push	{r4, lr}
   134c4:	mov	r4, r0
   134c8:	bl	11130 <strlen@plt>
   134cc:	cmp	r0, #1
   134d0:	popls	{r4, pc}
   134d4:	sub	r3, r0, #1
   134d8:	ldrb	r2, [r4, r3]
   134dc:	cmp	r2, #47	; 0x2f
   134e0:	popne	{r4, pc}
   134e4:	mov	r0, r3
   134e8:	cmp	r0, #1
   134ec:	sub	r3, r3, #1
   134f0:	beq	13504 <close_stdout@@Base+0x1b8>
   134f4:	ldrb	r2, [r4, r3]
   134f8:	cmp	r2, #47	; 0x2f
   134fc:	popne	{r4, pc}
   13500:	b	134e4 <close_stdout@@Base+0x198>
   13504:	pop	{r4, pc}
   13508:	push	{r4, r5, r6, r7, r8, lr}
   1350c:	subs	r5, r2, #0
   13510:	mov	r8, r0
   13514:	mov	r6, r1
   13518:	beq	13570 <close_stdout@@Base+0x224>
   1351c:	mov	r7, #0
   13520:	b	13538 <close_stdout@@Base+0x1ec>
   13524:	cmp	r0, #0
   13528:	beq	13560 <close_stdout@@Base+0x214>
   1352c:	subs	r5, r5, r0
   13530:	add	r7, r7, r0
   13534:	beq	13558 <close_stdout@@Base+0x20c>
   13538:	mov	r1, r6
   1353c:	mov	r0, r8
   13540:	mov	r2, r5
   13544:	bl	14f00 <close_stdout@@Base+0x1bb4>
   13548:	cmn	r0, #1
   1354c:	mov	r4, r0
   13550:	add	r6, r6, r0
   13554:	bne	13524 <close_stdout@@Base+0x1d8>
   13558:	mov	r0, r7
   1355c:	pop	{r4, r5, r6, r7, r8, pc}
   13560:	bl	11160 <__errno_location@plt>
   13564:	str	r4, [r0]
   13568:	mov	r0, r7
   1356c:	pop	{r4, r5, r6, r7, r8, pc}
   13570:	mov	r7, r5
   13574:	b	13558 <close_stdout@@Base+0x20c>
   13578:	push	{r4, r5, r6, r7, r8, lr}
   1357c:	mov	r4, r0
   13580:	mov	r5, r1
   13584:	cmp	r4, #0
   13588:	sbcs	r3, r5, #0
   1358c:	add	r6, r2, #19
   13590:	mov	r3, #0
   13594:	strb	r3, [r2, #20]
   13598:	blt	135e8 <close_stdout@@Base+0x29c>
   1359c:	mov	r0, r4
   135a0:	mov	r1, r5
   135a4:	mov	r2, #10
   135a8:	mov	r3, #0
   135ac:	bl	16718 <close_stdout@@Base+0x33cc>
   135b0:	mov	r7, r6
   135b4:	mov	r0, r4
   135b8:	mov	r1, r5
   135bc:	mov	r3, #0
   135c0:	add	ip, r2, #48	; 0x30
   135c4:	mov	r2, #10
   135c8:	strb	ip, [r6], #-1
   135cc:	bl	16718 <close_stdout@@Base+0x33cc>
   135d0:	mov	r4, r0
   135d4:	mov	r5, r1
   135d8:	orrs	r3, r4, r5
   135dc:	bne	1359c <close_stdout@@Base+0x250>
   135e0:	mov	r0, r7
   135e4:	pop	{r4, r5, r6, r7, r8, pc}
   135e8:	mov	r0, r4
   135ec:	mov	r1, r5
   135f0:	mov	r2, #10
   135f4:	mov	r3, #0
   135f8:	bl	16718 <close_stdout@@Base+0x33cc>
   135fc:	mov	r8, r6
   13600:	mov	r0, r4
   13604:	mov	r1, r5
   13608:	mov	r3, #0
   1360c:	rsb	ip, r2, #48	; 0x30
   13610:	mov	r2, #10
   13614:	strb	ip, [r6], #-1
   13618:	bl	16718 <close_stdout@@Base+0x33cc>
   1361c:	mov	r4, r0
   13620:	mov	r5, r1
   13624:	orrs	r3, r4, r5
   13628:	bne	135e8 <close_stdout@@Base+0x29c>
   1362c:	mov	r7, r6
   13630:	mov	r3, #45	; 0x2d
   13634:	mov	r0, r7
   13638:	strb	r3, [r8, #-1]
   1363c:	pop	{r4, r5, r6, r7, r8, pc}
   13640:	push	{r3, r4, r5, r6, r7, lr}
   13644:	add	r6, r2, #19
   13648:	mov	r4, r0
   1364c:	mov	r5, r1
   13650:	mov	r3, #0
   13654:	strb	r3, [r2, #20]
   13658:	mov	r0, r4
   1365c:	mov	r1, r5
   13660:	mov	r2, #10
   13664:	mov	r3, #0
   13668:	bl	16760 <close_stdout@@Base+0x3414>
   1366c:	mov	r7, r6
   13670:	mov	r0, r4
   13674:	mov	r1, r5
   13678:	mov	r3, #0
   1367c:	add	ip, r2, #48	; 0x30
   13680:	mov	r2, #10
   13684:	strb	ip, [r6], #-1
   13688:	bl	16760 <close_stdout@@Base+0x3414>
   1368c:	mov	r4, r0
   13690:	mov	r5, r1
   13694:	orrs	r3, r4, r5
   13698:	bne	13658 <close_stdout@@Base+0x30c>
   1369c:	mov	r0, r7
   136a0:	pop	{r3, r4, r5, r6, r7, pc}
   136a4:	push	{r3, r4, r5, r6, r7, lr}
   136a8:	subs	r4, r0, #0
   136ac:	ldr	r5, [pc, #172]	; 13760 <close_stdout@@Base+0x414>
   136b0:	add	r5, pc, r5
   136b4:	beq	1373c <close_stdout@@Base+0x3f0>
   136b8:	mov	r1, #47	; 0x2f
   136bc:	bl	111f0 <strrchr@plt>
   136c0:	subs	r6, r0, #0
   136c4:	beq	13720 <close_stdout@@Base+0x3d4>
   136c8:	add	r7, r6, #1
   136cc:	rsb	r3, r4, r7
   136d0:	cmp	r3, #6
   136d4:	ble	13720 <close_stdout@@Base+0x3d4>
   136d8:	ldr	r1, [pc, #132]	; 13764 <close_stdout@@Base+0x418>
   136dc:	sub	r0, r6, #6
   136e0:	mov	r2, #7
   136e4:	add	r1, pc, r1
   136e8:	bl	11214 <strncmp@plt>
   136ec:	cmp	r0, #0
   136f0:	bne	13720 <close_stdout@@Base+0x3d4>
   136f4:	ldr	r1, [pc, #108]	; 13768 <close_stdout@@Base+0x41c>
   136f8:	mov	r0, r7
   136fc:	mov	r2, #3
   13700:	add	r1, pc, r1
   13704:	bl	11214 <strncmp@plt>
   13708:	cmp	r0, #0
   1370c:	movne	r4, r7
   13710:	ldreq	r3, [pc, #84]	; 1376c <close_stdout@@Base+0x420>
   13714:	addeq	r4, r6, #4
   13718:	ldreq	r3, [r5, r3]
   1371c:	streq	r4, [r3]
   13720:	ldr	r2, [pc, #72]	; 13770 <close_stdout@@Base+0x424>
   13724:	ldr	r3, [pc, #72]	; 13774 <close_stdout@@Base+0x428>
   13728:	ldr	r2, [r5, r2]
   1372c:	str	r4, [r2]
   13730:	ldr	r3, [r5, r3]
   13734:	str	r4, [r3]
   13738:	pop	{r3, r4, r5, r6, r7, pc}
   1373c:	ldr	r3, [pc, #52]	; 13778 <close_stdout@@Base+0x42c>
   13740:	mov	r1, #1
   13744:	ldr	r0, [pc, #48]	; 1377c <close_stdout@@Base+0x430>
   13748:	mov	r2, #55	; 0x37
   1374c:	ldr	r3, [r5, r3]
   13750:	add	r0, pc, r0
   13754:	ldr	r3, [r3]
   13758:	bl	11070 <fwrite@plt>
   1375c:	bl	11220 <abort@plt>
   13760:	andeq	r5, r1, r8, asr #18
   13764:	strdeq	r4, [r0], -r8
   13768:	andeq	r4, r0, r4, ror #5
   1376c:	andeq	r0, r0, ip, lsr #2
   13770:	andeq	r0, r0, r4, lsr #2
   13774:	andeq	r0, r0, r0, lsr #2
   13778:	andeq	r0, r0, r8, lsl #2
   1377c:	andeq	r4, r0, r4, asr r2
   13780:	push	{r3, lr}
   13784:	mov	r3, r0
   13788:	mov	r2, #0
   1378c:	cmp	r1, #8
   13790:	str	r2, [r3], #4
   13794:	add	r3, r3, #4
   13798:	str	r2, [r0, #4]
   1379c:	str	r2, [r3], #4
   137a0:	str	r2, [r3], #4
   137a4:	str	r2, [r3], #4
   137a8:	str	r2, [r3], #4
   137ac:	str	r2, [r3], #4
   137b0:	str	r2, [r3], #4
   137b4:	str	r2, [r3], #4
   137b8:	str	r2, [r3], #4
   137bc:	str	r2, [r3], #4
   137c0:	str	r2, [r3]
   137c4:	beq	137d0 <close_stdout@@Base+0x484>
   137c8:	str	r1, [r0]
   137cc:	pop	{r3, pc}
   137d0:	bl	11220 <abort@plt>
   137d4:	push	{r4, r5, r6, lr}
   137d8:	mov	r4, r0
   137dc:	mov	r6, r1
   137e0:	mov	r0, #0
   137e4:	mov	r1, r4
   137e8:	mov	r2, #5
   137ec:	bl	11028 <dcgettext@plt>
   137f0:	cmp	r0, r4
   137f4:	mov	r5, r0
   137f8:	beq	13800 <close_stdout@@Base+0x4b4>
   137fc:	pop	{r4, r5, r6, pc}
   13800:	bl	15f44 <close_stdout@@Base+0x2bf8>
   13804:	ldrb	r3, [r0]
   13808:	bic	r3, r3, #32
   1380c:	cmp	r3, #85	; 0x55
   13810:	bne	13884 <close_stdout@@Base+0x538>
   13814:	ldrb	r3, [r0, #1]
   13818:	bic	r3, r3, #32
   1381c:	cmp	r3, #84	; 0x54
   13820:	bne	13870 <close_stdout@@Base+0x524>
   13824:	ldrb	r3, [r0, #2]
   13828:	bic	r3, r3, #32
   1382c:	cmp	r3, #70	; 0x46
   13830:	bne	13870 <close_stdout@@Base+0x524>
   13834:	ldrb	r3, [r0, #3]
   13838:	cmp	r3, #45	; 0x2d
   1383c:	bne	13870 <close_stdout@@Base+0x524>
   13840:	ldrb	r3, [r0, #4]
   13844:	cmp	r3, #56	; 0x38
   13848:	bne	13870 <close_stdout@@Base+0x524>
   1384c:	ldrb	r3, [r0, #5]
   13850:	cmp	r3, #0
   13854:	bne	13870 <close_stdout@@Base+0x524>
   13858:	ldrb	r3, [r5]
   1385c:	cmp	r3, #96	; 0x60
   13860:	beq	138fc <close_stdout@@Base+0x5b0>
   13864:	ldr	r0, [pc, #180]	; 13920 <close_stdout@@Base+0x5d4>
   13868:	add	r0, pc, r0
   1386c:	pop	{r4, r5, r6, pc}
   13870:	cmp	r6, #7
   13874:	beq	13908 <close_stdout@@Base+0x5bc>
   13878:	ldr	r0, [pc, #164]	; 13924 <close_stdout@@Base+0x5d8>
   1387c:	add	r0, pc, r0
   13880:	pop	{r4, r5, r6, pc}
   13884:	cmp	r3, #71	; 0x47
   13888:	bne	13870 <close_stdout@@Base+0x524>
   1388c:	ldrb	r3, [r0, #1]
   13890:	bic	r3, r3, #32
   13894:	cmp	r3, #66	; 0x42
   13898:	bne	13870 <close_stdout@@Base+0x524>
   1389c:	ldrb	r3, [r0, #2]
   138a0:	cmp	r3, #49	; 0x31
   138a4:	bne	13870 <close_stdout@@Base+0x524>
   138a8:	ldrb	r3, [r0, #3]
   138ac:	cmp	r3, #56	; 0x38
   138b0:	bne	13870 <close_stdout@@Base+0x524>
   138b4:	ldrb	r3, [r0, #4]
   138b8:	cmp	r3, #48	; 0x30
   138bc:	bne	13870 <close_stdout@@Base+0x524>
   138c0:	ldrb	r3, [r0, #5]
   138c4:	cmp	r3, #51	; 0x33
   138c8:	bne	13870 <close_stdout@@Base+0x524>
   138cc:	ldrb	r3, [r0, #6]
   138d0:	cmp	r3, #48	; 0x30
   138d4:	bne	13870 <close_stdout@@Base+0x524>
   138d8:	ldrb	r3, [r0, #7]
   138dc:	cmp	r3, #0
   138e0:	bne	13870 <close_stdout@@Base+0x524>
   138e4:	ldrb	r3, [r5]
   138e8:	cmp	r3, #96	; 0x60
   138ec:	beq	13914 <close_stdout@@Base+0x5c8>
   138f0:	ldr	r0, [pc, #48]	; 13928 <close_stdout@@Base+0x5dc>
   138f4:	add	r0, pc, r0
   138f8:	pop	{r4, r5, r6, pc}
   138fc:	ldr	r0, [pc, #40]	; 1392c <close_stdout@@Base+0x5e0>
   13900:	add	r0, pc, r0
   13904:	pop	{r4, r5, r6, pc}
   13908:	ldr	r0, [pc, #32]	; 13930 <close_stdout@@Base+0x5e4>
   1390c:	add	r0, pc, r0
   13910:	pop	{r4, r5, r6, pc}
   13914:	ldr	r0, [pc, #24]	; 13934 <close_stdout@@Base+0x5e8>
   13918:	add	r0, pc, r0
   1391c:	pop	{r4, r5, r6, pc}
   13920:	andeq	r4, r0, r0, lsr #3
   13924:	muleq	r0, r4, r1
   13928:	andeq	r4, r0, r8, lsl r1
   1392c:	andeq	r4, r0, ip, lsl r1
   13930:	andeq	r4, r0, r8, lsl #2
   13934:	andeq	r4, r0, r0, lsl #2
   13938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1393c:	sub	sp, sp, #124	; 0x7c
   13940:	ldr	ip, [pc, #3304]	; 14630 <close_stdout@@Base+0x12e4>
   13944:	mov	sl, r1
   13948:	str	r0, [sp, #40]	; 0x28
   1394c:	mov	r8, r3
   13950:	ldr	r0, [pc, #3292]	; 14634 <close_stdout@@Base+0x12e8>
   13954:	add	ip, pc, ip
   13958:	str	r2, [sp, #32]
   1395c:	ldr	r1, [sp, #164]	; 0xa4
   13960:	mov	r3, ip
   13964:	ldr	r0, [ip, r0]
   13968:	ldr	r2, [sp, #172]	; 0xac
   1396c:	ubfx	r1, r1, #1, #1
   13970:	str	r1, [sp, #36]	; 0x24
   13974:	str	r0, [sp, #56]	; 0x38
   13978:	ldr	r0, [sp, #168]	; 0xa8
   1397c:	ldr	r1, [sp, #176]	; 0xb0
   13980:	str	r2, [sp, #72]	; 0x48
   13984:	str	r0, [sp, #48]	; 0x30
   13988:	ldr	r0, [sp, #56]	; 0x38
   1398c:	str	r1, [sp, #68]	; 0x44
   13990:	ldr	r3, [r0]
   13994:	str	r3, [sp, #116]	; 0x74
   13998:	bl	11088 <__ctype_get_mb_cur_max@plt>
   1399c:	ldr	r2, [sp, #160]	; 0xa0
   139a0:	str	r0, [sp, #64]	; 0x40
   139a4:	cmp	r2, #8
   139a8:	addls	pc, pc, r2, lsl #2
   139ac:	b	1450c <close_stdout@@Base+0x11c0>
   139b0:	b	139d4 <close_stdout@@Base+0x688>
   139b4:	b	14224 <close_stdout@@Base+0xed8>
   139b8:	b	14254 <close_stdout@@Base+0xf08>
   139bc:	b	14104 <close_stdout@@Base+0xdb8>
   139c0:	b	14144 <close_stdout@@Base+0xdf8>
   139c4:	b	14170 <close_stdout@@Base+0xe24>
   139c8:	b	14190 <close_stdout@@Base+0xe44>
   139cc:	b	14190 <close_stdout@@Base+0xe44>
   139d0:	b	14190 <close_stdout@@Base+0xe44>
   139d4:	mov	r2, #0
   139d8:	str	r2, [sp, #36]	; 0x24
   139dc:	mov	r9, r2
   139e0:	str	r2, [sp, #24]
   139e4:	str	r2, [sp, #28]
   139e8:	str	r2, [sp, #52]	; 0x34
   139ec:	ldr	r0, [sp, #36]	; 0x24
   139f0:	mov	fp, #0
   139f4:	ldr	r1, [sp, #24]
   139f8:	eor	r2, r0, #1
   139fc:	eor	r3, r1, #1
   13a00:	and	r3, r2, r3
   13a04:	and	r2, r1, r0
   13a08:	str	r3, [sp, #44]	; 0x2c
   13a0c:	str	r2, [sp, #76]	; 0x4c
   13a10:	cmn	r8, #1
   13a14:	beq	13d94 <close_stdout@@Base+0xa48>
   13a18:	subs	r3, fp, r8
   13a1c:	movne	r3, #1
   13a20:	cmp	r3, #0
   13a24:	beq	13dac <close_stdout@@Base+0xa60>
   13a28:	ldr	r3, [sp, #28]
   13a2c:	ldr	r0, [sp, #24]
   13a30:	adds	r7, r3, #0
   13a34:	movne	r7, #1
   13a38:	ands	r6, r7, r0
   13a3c:	bne	14298 <close_stdout@@Base+0xf4c>
   13a40:	ldr	r1, [sp, #32]
   13a44:	add	r5, r1, fp
   13a48:	ldrb	r4, [r5]
   13a4c:	cmp	r4, #126	; 0x7e
   13a50:	addls	pc, pc, r4, lsl #2
   13a54:	b	14018 <close_stdout@@Base+0xccc>
   13a58:	b	13f24 <close_stdout@@Base+0xbd8>
   13a5c:	b	14018 <close_stdout@@Base+0xccc>
   13a60:	b	14018 <close_stdout@@Base+0xccc>
   13a64:	b	14018 <close_stdout@@Base+0xccc>
   13a68:	b	14018 <close_stdout@@Base+0xccc>
   13a6c:	b	14018 <close_stdout@@Base+0xccc>
   13a70:	b	14018 <close_stdout@@Base+0xccc>
   13a74:	b	13f0c <close_stdout@@Base+0xbc0>
   13a78:	b	13ef4 <close_stdout@@Base+0xba8>
   13a7c:	b	13f1c <close_stdout@@Base+0xbd0>
   13a80:	b	13f14 <close_stdout@@Base+0xbc8>
   13a84:	b	13f04 <close_stdout@@Base+0xbb8>
   13a88:	b	13efc <close_stdout@@Base+0xbb0>
   13a8c:	b	13ec0 <close_stdout@@Base+0xb74>
   13a90:	b	14018 <close_stdout@@Base+0xccc>
   13a94:	b	14018 <close_stdout@@Base+0xccc>
   13a98:	b	14018 <close_stdout@@Base+0xccc>
   13a9c:	b	14018 <close_stdout@@Base+0xccc>
   13aa0:	b	14018 <close_stdout@@Base+0xccc>
   13aa4:	b	14018 <close_stdout@@Base+0xccc>
   13aa8:	b	14018 <close_stdout@@Base+0xccc>
   13aac:	b	14018 <close_stdout@@Base+0xccc>
   13ab0:	b	14018 <close_stdout@@Base+0xccc>
   13ab4:	b	14018 <close_stdout@@Base+0xccc>
   13ab8:	b	14018 <close_stdout@@Base+0xccc>
   13abc:	b	14018 <close_stdout@@Base+0xccc>
   13ac0:	b	14018 <close_stdout@@Base+0xccc>
   13ac4:	b	14018 <close_stdout@@Base+0xccc>
   13ac8:	b	14018 <close_stdout@@Base+0xccc>
   13acc:	b	14018 <close_stdout@@Base+0xccc>
   13ad0:	b	14018 <close_stdout@@Base+0xccc>
   13ad4:	b	14018 <close_stdout@@Base+0xccc>
   13ad8:	b	13e4c <close_stdout@@Base+0xb00>
   13adc:	b	13e4c <close_stdout@@Base+0xb00>
   13ae0:	b	13e4c <close_stdout@@Base+0xb00>
   13ae4:	b	13e44 <close_stdout@@Base+0xaf8>
   13ae8:	b	13e4c <close_stdout@@Base+0xb00>
   13aec:	b	13d20 <close_stdout@@Base+0x9d4>
   13af0:	b	13e4c <close_stdout@@Base+0xb00>
   13af4:	b	13fc0 <close_stdout@@Base+0xc74>
   13af8:	b	13e4c <close_stdout@@Base+0xb00>
   13afc:	b	13e4c <close_stdout@@Base+0xb00>
   13b00:	b	13e4c <close_stdout@@Base+0xb00>
   13b04:	b	13d20 <close_stdout@@Base+0x9d4>
   13b08:	b	13d20 <close_stdout@@Base+0x9d4>
   13b0c:	b	13d20 <close_stdout@@Base+0x9d4>
   13b10:	b	13d20 <close_stdout@@Base+0x9d4>
   13b14:	b	13d20 <close_stdout@@Base+0x9d4>
   13b18:	b	13d20 <close_stdout@@Base+0x9d4>
   13b1c:	b	13d20 <close_stdout@@Base+0x9d4>
   13b20:	b	13d20 <close_stdout@@Base+0x9d4>
   13b24:	b	13d20 <close_stdout@@Base+0x9d4>
   13b28:	b	13d20 <close_stdout@@Base+0x9d4>
   13b2c:	b	13d20 <close_stdout@@Base+0x9d4>
   13b30:	b	13d20 <close_stdout@@Base+0x9d4>
   13b34:	b	13d20 <close_stdout@@Base+0x9d4>
   13b38:	b	13d20 <close_stdout@@Base+0x9d4>
   13b3c:	b	13d20 <close_stdout@@Base+0x9d4>
   13b40:	b	13d20 <close_stdout@@Base+0x9d4>
   13b44:	b	13e4c <close_stdout@@Base+0xb00>
   13b48:	b	13e4c <close_stdout@@Base+0xb00>
   13b4c:	b	13e4c <close_stdout@@Base+0xb00>
   13b50:	b	13e4c <close_stdout@@Base+0xb00>
   13b54:	b	13c54 <close_stdout@@Base+0x908>
   13b58:	b	14018 <close_stdout@@Base+0xccc>
   13b5c:	b	13d20 <close_stdout@@Base+0x9d4>
   13b60:	b	13d20 <close_stdout@@Base+0x9d4>
   13b64:	b	13d20 <close_stdout@@Base+0x9d4>
   13b68:	b	13d20 <close_stdout@@Base+0x9d4>
   13b6c:	b	13d20 <close_stdout@@Base+0x9d4>
   13b70:	b	13d20 <close_stdout@@Base+0x9d4>
   13b74:	b	13d20 <close_stdout@@Base+0x9d4>
   13b78:	b	13d20 <close_stdout@@Base+0x9d4>
   13b7c:	b	13d20 <close_stdout@@Base+0x9d4>
   13b80:	b	13d20 <close_stdout@@Base+0x9d4>
   13b84:	b	13d20 <close_stdout@@Base+0x9d4>
   13b88:	b	13d20 <close_stdout@@Base+0x9d4>
   13b8c:	b	13d20 <close_stdout@@Base+0x9d4>
   13b90:	b	13d20 <close_stdout@@Base+0x9d4>
   13b94:	b	13d20 <close_stdout@@Base+0x9d4>
   13b98:	b	13d20 <close_stdout@@Base+0x9d4>
   13b9c:	b	13d20 <close_stdout@@Base+0x9d4>
   13ba0:	b	13d20 <close_stdout@@Base+0x9d4>
   13ba4:	b	13d20 <close_stdout@@Base+0x9d4>
   13ba8:	b	13d20 <close_stdout@@Base+0x9d4>
   13bac:	b	13d20 <close_stdout@@Base+0x9d4>
   13bb0:	b	13d20 <close_stdout@@Base+0x9d4>
   13bb4:	b	13d20 <close_stdout@@Base+0x9d4>
   13bb8:	b	13d20 <close_stdout@@Base+0x9d4>
   13bbc:	b	13d20 <close_stdout@@Base+0x9d4>
   13bc0:	b	13d20 <close_stdout@@Base+0x9d4>
   13bc4:	b	13e4c <close_stdout@@Base+0xb00>
   13bc8:	b	13fa4 <close_stdout@@Base+0xc58>
   13bcc:	b	13d20 <close_stdout@@Base+0x9d4>
   13bd0:	b	13e4c <close_stdout@@Base+0xb00>
   13bd4:	b	13d20 <close_stdout@@Base+0x9d4>
   13bd8:	b	13e4c <close_stdout@@Base+0xb00>
   13bdc:	b	13d20 <close_stdout@@Base+0x9d4>
   13be0:	b	13d20 <close_stdout@@Base+0x9d4>
   13be4:	b	13d20 <close_stdout@@Base+0x9d4>
   13be8:	b	13d20 <close_stdout@@Base+0x9d4>
   13bec:	b	13d20 <close_stdout@@Base+0x9d4>
   13bf0:	b	13d20 <close_stdout@@Base+0x9d4>
   13bf4:	b	13d20 <close_stdout@@Base+0x9d4>
   13bf8:	b	13d20 <close_stdout@@Base+0x9d4>
   13bfc:	b	13d20 <close_stdout@@Base+0x9d4>
   13c00:	b	13d20 <close_stdout@@Base+0x9d4>
   13c04:	b	13d20 <close_stdout@@Base+0x9d4>
   13c08:	b	13d20 <close_stdout@@Base+0x9d4>
   13c0c:	b	13d20 <close_stdout@@Base+0x9d4>
   13c10:	b	13d20 <close_stdout@@Base+0x9d4>
   13c14:	b	13d20 <close_stdout@@Base+0x9d4>
   13c18:	b	13d20 <close_stdout@@Base+0x9d4>
   13c1c:	b	13d20 <close_stdout@@Base+0x9d4>
   13c20:	b	13d20 <close_stdout@@Base+0x9d4>
   13c24:	b	13d20 <close_stdout@@Base+0x9d4>
   13c28:	b	13d20 <close_stdout@@Base+0x9d4>
   13c2c:	b	13d20 <close_stdout@@Base+0x9d4>
   13c30:	b	13d20 <close_stdout@@Base+0x9d4>
   13c34:	b	13d20 <close_stdout@@Base+0x9d4>
   13c38:	b	13d20 <close_stdout@@Base+0x9d4>
   13c3c:	b	13d20 <close_stdout@@Base+0x9d4>
   13c40:	b	13d20 <close_stdout@@Base+0x9d4>
   13c44:	b	13e2c <close_stdout@@Base+0xae0>
   13c48:	b	13e4c <close_stdout@@Base+0xb00>
   13c4c:	b	13e2c <close_stdout@@Base+0xae0>
   13c50:	b	13e44 <close_stdout@@Base+0xaf8>
   13c54:	ldr	r3, [sp, #160]	; 0xa0
   13c58:	cmp	r3, #2
   13c5c:	beq	144e8 <close_stdout@@Base+0x119c>
   13c60:	cmp	r3, #3
   13c64:	bne	13d20 <close_stdout@@Base+0x9d4>
   13c68:	ldr	r1, [sp, #164]	; 0xa4
   13c6c:	tst	r1, #4
   13c70:	beq	13d20 <close_stdout@@Base+0x9d4>
   13c74:	add	r3, fp, #2
   13c78:	cmp	r8, r3
   13c7c:	bls	13d20 <close_stdout@@Base+0x9d4>
   13c80:	ldrb	r2, [r5, #1]
   13c84:	mov	r1, #1
   13c88:	cmp	r2, #63	; 0x3f
   13c8c:	bne	13d20 <close_stdout@@Base+0x9d4>
   13c90:	ldr	r0, [sp, #32]
   13c94:	ldrb	ip, [r0, r3]
   13c98:	sub	r0, ip, #33	; 0x21
   13c9c:	uxtb	r0, r0
   13ca0:	cmp	r0, #29
   13ca4:	bhi	13d20 <close_stdout@@Base+0x9d4>
   13ca8:	lsl	r1, r1, r0
   13cac:	movw	r0, #20929	; 0x51c1
   13cb0:	movt	r0, #14336	; 0x3800
   13cb4:	and	r0, r1, r0
   13cb8:	cmp	r0, #0
   13cbc:	beq	13d20 <close_stdout@@Base+0x9d4>
   13cc0:	ldr	r1, [sp, #36]	; 0x24
   13cc4:	cmp	r1, #0
   13cc8:	bne	13e68 <close_stdout@@Base+0xb1c>
   13ccc:	cmp	r9, sl
   13cd0:	mov	r4, ip
   13cd4:	mov	fp, r3
   13cd8:	ldrcc	r0, [sp, #40]	; 0x28
   13cdc:	strbcc	r2, [r0, r9]
   13ce0:	add	r2, r9, #1
   13ce4:	cmp	sl, r2
   13ce8:	ldrhi	r0, [sp, #40]	; 0x28
   13cec:	movhi	r1, #34	; 0x22
   13cf0:	strbhi	r1, [r0, r2]
   13cf4:	add	r2, r9, #2
   13cf8:	cmp	sl, r2
   13cfc:	ldrhi	r0, [sp, #40]	; 0x28
   13d00:	movhi	r1, #34	; 0x22
   13d04:	strbhi	r1, [r0, r2]
   13d08:	add	r2, r9, #3
   13d0c:	cmp	sl, r2
   13d10:	add	r9, r9, #4
   13d14:	ldrhi	r0, [sp, #40]	; 0x28
   13d18:	movhi	r1, #63	; 0x3f
   13d1c:	strbhi	r1, [r0, r2]
   13d20:	ldr	r0, [sp, #44]	; 0x2c
   13d24:	cmp	r0, #0
   13d28:	bne	13d50 <close_stdout@@Base+0xa04>
   13d2c:	ldr	r1, [sp, #48]	; 0x30
   13d30:	cmp	r1, #0
   13d34:	beq	13d50 <close_stdout@@Base+0xa04>
   13d38:	ubfx	r2, r4, #5, #8
   13d3c:	and	r3, r4, #31
   13d40:	ldr	r2, [r1, r2, lsl #2]
   13d44:	lsr	r3, r2, r3
   13d48:	tst	r3, #1
   13d4c:	bne	13d58 <close_stdout@@Base+0xa0c>
   13d50:	cmp	r6, #0
   13d54:	beq	13d78 <close_stdout@@Base+0xa2c>
   13d58:	ldr	r2, [sp, #36]	; 0x24
   13d5c:	cmp	r2, #0
   13d60:	bne	13e68 <close_stdout@@Base+0xb1c>
   13d64:	cmp	r9, sl
   13d68:	ldrcc	r0, [sp, #40]	; 0x28
   13d6c:	movcc	r3, #92	; 0x5c
   13d70:	strbcc	r3, [r0, r9]
   13d74:	add	r9, r9, #1
   13d78:	add	fp, fp, #1
   13d7c:	cmp	r9, sl
   13d80:	ldrcc	r1, [sp, #40]	; 0x28
   13d84:	strbcc	r4, [r1, r9]
   13d88:	cmn	r8, #1
   13d8c:	add	r9, r9, #1
   13d90:	bne	13a18 <close_stdout@@Base+0x6cc>
   13d94:	ldr	r2, [sp, #32]
   13d98:	ldrb	r3, [r2, fp]
   13d9c:	adds	r3, r3, #0
   13da0:	movne	r3, #1
   13da4:	cmp	r3, #0
   13da8:	bne	13a28 <close_stdout@@Base+0x6dc>
   13dac:	ldr	r3, [sp, #160]	; 0xa0
   13db0:	cmp	r9, #0
   13db4:	cmpeq	r3, #2
   13db8:	bne	13dc8 <close_stdout@@Base+0xa7c>
   13dbc:	ldr	r0, [sp, #36]	; 0x24
   13dc0:	cmp	r0, #0
   13dc4:	bne	13e68 <close_stdout@@Base+0xb1c>
   13dc8:	ldr	r1, [sp, #36]	; 0x24
   13dcc:	ldr	r2, [sp, #52]	; 0x34
   13dd0:	eor	r3, r1, #1
   13dd4:	cmp	r2, #0
   13dd8:	moveq	r3, #0
   13ddc:	andne	r3, r3, #1
   13de0:	cmp	r3, #0
   13de4:	beq	13e10 <close_stdout@@Base+0xac4>
   13de8:	ldrb	r3, [r2]
   13dec:	cmp	r3, #0
   13df0:	beq	13e10 <close_stdout@@Base+0xac4>
   13df4:	ldr	r1, [sp, #40]	; 0x28
   13df8:	cmp	sl, r9
   13dfc:	strbhi	r3, [r1, r9]
   13e00:	ldrb	r3, [r2, #1]!
   13e04:	add	r9, r9, #1
   13e08:	cmp	r3, #0
   13e0c:	bne	13df8 <close_stdout@@Base+0xaac>
   13e10:	cmp	r9, sl
   13e14:	movcs	r0, r9
   13e18:	ldrcc	r1, [sp, #40]	; 0x28
   13e1c:	movcc	r3, #0
   13e20:	movcc	r0, r9
   13e24:	strbcc	r3, [r1, r9]
   13e28:	b	13ea4 <close_stdout@@Base+0xb58>
   13e2c:	cmn	r8, #1
   13e30:	beq	144f8 <close_stdout@@Base+0x11ac>
   13e34:	subs	r3, r8, #1
   13e38:	movne	r3, #1
   13e3c:	cmp	r3, #0
   13e40:	bne	13d20 <close_stdout@@Base+0x9d4>
   13e44:	cmp	fp, #0
   13e48:	bne	13d20 <close_stdout@@Base+0x9d4>
   13e4c:	ldr	r3, [sp, #36]	; 0x24
   13e50:	ldr	r0, [sp, #160]	; 0xa0
   13e54:	cmp	r0, #2
   13e58:	movne	r3, #0
   13e5c:	andeq	r3, r3, #1
   13e60:	cmp	r3, #0
   13e64:	beq	13d20 <close_stdout@@Base+0x9d4>
   13e68:	ldr	r2, [sp, #164]	; 0xa4
   13e6c:	mov	ip, #0
   13e70:	ldr	r0, [sp, #160]	; 0xa0
   13e74:	bic	r3, r2, #2
   13e78:	ldr	r1, [sp, #72]	; 0x48
   13e7c:	ldr	r2, [sp, #68]	; 0x44
   13e80:	stm	sp, {r0, r3}
   13e84:	mov	r3, r8
   13e88:	str	r1, [sp, #12]
   13e8c:	mov	r1, sl
   13e90:	str	r2, [sp, #16]
   13e94:	ldr	r0, [sp, #40]	; 0x28
   13e98:	ldr	r2, [sp, #32]
   13e9c:	str	ip, [sp, #8]
   13ea0:	bl	13938 <close_stdout@@Base+0x5ec>
   13ea4:	ldr	r1, [sp, #56]	; 0x38
   13ea8:	ldr	r2, [sp, #116]	; 0x74
   13eac:	ldr	r3, [r1]
   13eb0:	cmp	r2, r3
   13eb4:	bne	145e8 <close_stdout@@Base+0x129c>
   13eb8:	add	sp, sp, #124	; 0x7c
   13ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec0:	mov	r3, #114	; 0x72
   13ec4:	ldr	r2, [sp, #36]	; 0x24
   13ec8:	ldr	r0, [sp, #160]	; 0xa0
   13ecc:	cmp	r0, #2
   13ed0:	movne	r2, #0
   13ed4:	andeq	r2, r2, #1
   13ed8:	cmp	r2, #0
   13edc:	bne	13e68 <close_stdout@@Base+0xb1c>
   13ee0:	ldr	r1, [sp, #24]
   13ee4:	cmp	r1, #0
   13ee8:	beq	13d20 <close_stdout@@Base+0x9d4>
   13eec:	mov	r4, r3
   13ef0:	b	13d58 <close_stdout@@Base+0xa0c>
   13ef4:	mov	r3, #98	; 0x62
   13ef8:	b	13ee0 <close_stdout@@Base+0xb94>
   13efc:	mov	r3, #102	; 0x66
   13f00:	b	13ee0 <close_stdout@@Base+0xb94>
   13f04:	mov	r3, #118	; 0x76
   13f08:	b	13ee0 <close_stdout@@Base+0xb94>
   13f0c:	mov	r3, #97	; 0x61
   13f10:	b	13ee0 <close_stdout@@Base+0xb94>
   13f14:	mov	r3, #110	; 0x6e
   13f18:	b	13ec4 <close_stdout@@Base+0xb78>
   13f1c:	mov	r3, #116	; 0x74
   13f20:	b	13ec4 <close_stdout@@Base+0xb78>
   13f24:	ldr	r2, [sp, #24]
   13f28:	cmp	r2, #0
   13f2c:	beq	144d4 <close_stdout@@Base+0x1188>
   13f30:	ldr	r3, [sp, #36]	; 0x24
   13f34:	cmp	r3, #0
   13f38:	bne	13e68 <close_stdout@@Base+0xb1c>
   13f3c:	cmp	r9, sl
   13f40:	add	r2, r9, #1
   13f44:	ldrcc	r0, [sp, #40]	; 0x28
   13f48:	movcc	r3, #92	; 0x5c
   13f4c:	strbcc	r3, [r0, r9]
   13f50:	add	r3, fp, #1
   13f54:	cmp	r8, r3
   13f58:	bls	13f98 <close_stdout@@Base+0xc4c>
   13f5c:	ldr	r1, [sp, #32]
   13f60:	ldrb	r3, [r1, r3]
   13f64:	sub	r3, r3, #48	; 0x30
   13f68:	cmp	r3, #9
   13f6c:	bhi	13f98 <close_stdout@@Base+0xc4c>
   13f70:	cmp	sl, r2
   13f74:	ldrhi	r0, [sp, #40]	; 0x28
   13f78:	movhi	r3, #48	; 0x30
   13f7c:	strbhi	r3, [r0, r2]
   13f80:	add	r3, r9, #2
   13f84:	cmp	sl, r3
   13f88:	ldrhi	r1, [sp, #40]	; 0x28
   13f8c:	movhi	r2, #48	; 0x30
   13f90:	strbhi	r2, [r1, r3]
   13f94:	add	r2, r9, #3
   13f98:	mov	r9, r2
   13f9c:	mov	r4, #48	; 0x30
   13fa0:	b	13d2c <close_stdout@@Base+0x9e0>
   13fa4:	ldr	r1, [sp, #76]	; 0x4c
   13fa8:	cmp	r1, #0
   13fac:	beq	13fb8 <close_stdout@@Base+0xc6c>
   13fb0:	cmp	r7, #0
   13fb4:	bne	13d78 <close_stdout@@Base+0xa2c>
   13fb8:	mov	r3, r4
   13fbc:	b	13ec4 <close_stdout@@Base+0xb78>
   13fc0:	ldr	r1, [sp, #160]	; 0xa0
   13fc4:	cmp	r1, #2
   13fc8:	bne	13d20 <close_stdout@@Base+0x9d4>
   13fcc:	ldr	r2, [sp, #36]	; 0x24
   13fd0:	cmp	r2, #0
   13fd4:	bne	13e68 <close_stdout@@Base+0xb1c>
   13fd8:	cmp	r9, sl
   13fdc:	ldrcc	r0, [sp, #40]	; 0x28
   13fe0:	movcc	r3, #39	; 0x27
   13fe4:	strbcc	r3, [r0, r9]
   13fe8:	add	r3, r9, #1
   13fec:	cmp	sl, r3
   13ff0:	ldrhi	r1, [sp, #40]	; 0x28
   13ff4:	movhi	r2, #92	; 0x5c
   13ff8:	strbhi	r2, [r1, r3]
   13ffc:	add	r3, r9, #2
   14000:	cmp	sl, r3
   14004:	add	r9, r9, #3
   14008:	ldrhi	r0, [sp, #40]	; 0x28
   1400c:	movhi	r2, #39	; 0x27
   14010:	strbhi	r2, [r0, r3]
   14014:	b	13d20 <close_stdout@@Base+0x9d4>
   14018:	ldr	r1, [sp, #64]	; 0x40
   1401c:	cmp	r1, #1
   14020:	bne	14318 <close_stdout@@Base+0xfcc>
   14024:	bl	11118 <__ctype_b_loc@plt>
   14028:	ldr	r2, [sp, #64]	; 0x40
   1402c:	sxth	r3, r4
   14030:	str	r2, [sp, #60]	; 0x3c
   14034:	lsl	r3, r3, #1
   14038:	ldr	r2, [r0]
   1403c:	ldrh	r2, [r2, r3]
   14040:	eor	r2, r2, #16384	; 0x4000
   14044:	ubfx	r2, r2, #14, #1
   14048:	ldr	r1, [sp, #24]
   1404c:	ands	r2, r2, r1
   14050:	beq	13d20 <close_stdout@@Base+0x9d4>
   14054:	ldr	r3, [sp, #60]	; 0x3c
   14058:	mov	r0, #92	; 0x5c
   1405c:	ldr	r7, [sp, #36]	; 0x24
   14060:	add	r1, r3, fp
   14064:	str	r8, [sp, #60]	; 0x3c
   14068:	ldr	r3, [sp, #40]	; 0x28
   1406c:	b	140d0 <close_stdout@@Base+0xd84>
   14070:	cmp	r7, #0
   14074:	bne	14510 <close_stdout@@Base+0x11c4>
   14078:	add	ip, r9, #1
   1407c:	cmp	r9, sl
   14080:	strbcc	r0, [r3, r9]
   14084:	cmp	sl, ip
   14088:	lsrhi	r8, r4, #6
   1408c:	addhi	r8, r8, #48	; 0x30
   14090:	strbhi	r8, [r3, ip]
   14094:	add	ip, r9, #2
   14098:	add	r9, r9, #3
   1409c:	cmp	sl, ip
   140a0:	ubfxhi	r8, r4, #3, #3
   140a4:	and	r4, r4, #7
   140a8:	add	r4, r4, #48	; 0x30
   140ac:	addhi	r8, r8, #48	; 0x30
   140b0:	strbhi	r8, [r3, ip]
   140b4:	add	fp, fp, #1
   140b8:	cmp	r1, fp
   140bc:	bls	140fc <close_stdout@@Base+0xdb0>
   140c0:	cmp	r9, sl
   140c4:	strbcc	r4, [r3, r9]
   140c8:	ldrb	r4, [r5, #1]!
   140cc:	add	r9, r9, #1
   140d0:	cmp	r2, #0
   140d4:	bne	14070 <close_stdout@@Base+0xd24>
   140d8:	cmp	r6, #0
   140dc:	beq	140b4 <close_stdout@@Base+0xd68>
   140e0:	add	fp, fp, #1
   140e4:	cmp	r9, sl
   140e8:	strbcc	r0, [r3, r9]
   140ec:	cmp	r1, fp
   140f0:	add	r9, r9, #1
   140f4:	mov	r6, #0
   140f8:	bhi	140c0 <close_stdout@@Base+0xd74>
   140fc:	ldr	r8, [sp, #60]	; 0x3c
   14100:	b	13d7c <close_stdout@@Base+0xa30>
   14104:	ldr	r3, [sp, #36]	; 0x24
   14108:	cmp	r3, #0
   1410c:	bne	14610 <close_stdout@@Base+0x12c4>
   14110:	cmp	sl, #0
   14114:	beq	14528 <close_stdout@@Base+0x11dc>
   14118:	ldr	r1, [sp, #40]	; 0x28
   1411c:	mov	r0, #1
   14120:	ldr	r2, [pc, #1296]	; 14638 <close_stdout@@Base+0x12ec>
   14124:	mov	r3, #34	; 0x22
   14128:	str	r0, [sp, #24]
   1412c:	mov	r9, r0
   14130:	add	r2, pc, r2
   14134:	str	r0, [sp, #28]
   14138:	strb	r3, [r1]
   1413c:	str	r2, [sp, #52]	; 0x34
   14140:	b	139ec <close_stdout@@Base+0x6a0>
   14144:	ldr	r3, [pc, #1264]	; 1463c <close_stdout@@Base+0x12f0>
   14148:	mov	r2, #1
   1414c:	mov	r0, #3
   14150:	str	r2, [sp, #36]	; 0x24
   14154:	add	r3, pc, r3
   14158:	str	r2, [sp, #24]
   1415c:	str	r3, [sp, #52]	; 0x34
   14160:	mov	r9, #0
   14164:	str	r2, [sp, #28]
   14168:	str	r0, [sp, #160]	; 0xa0
   1416c:	b	139ec <close_stdout@@Base+0x6a0>
   14170:	mov	r0, #0
   14174:	mov	r1, #1
   14178:	str	r0, [sp, #36]	; 0x24
   1417c:	mov	r9, r0
   14180:	str	r1, [sp, #24]
   14184:	str	r0, [sp, #28]
   14188:	str	r0, [sp, #52]	; 0x34
   1418c:	b	139ec <close_stdout@@Base+0x6a0>
   14190:	ldr	r3, [sp, #160]	; 0xa0
   14194:	cmp	r3, #8
   14198:	beq	141c4 <close_stdout@@Base+0xe78>
   1419c:	ldr	r0, [pc, #1180]	; 14640 <close_stdout@@Base+0x12f4>
   141a0:	mov	r1, r3
   141a4:	add	r0, pc, r0
   141a8:	bl	137d4 <close_stdout@@Base+0x488>
   141ac:	ldr	r1, [sp, #160]	; 0xa0
   141b0:	str	r0, [sp, #72]	; 0x48
   141b4:	ldr	r0, [pc, #1160]	; 14644 <close_stdout@@Base+0x12f8>
   141b8:	add	r0, pc, r0
   141bc:	bl	137d4 <close_stdout@@Base+0x488>
   141c0:	str	r0, [sp, #68]	; 0x44
   141c4:	ldr	r0, [sp, #36]	; 0x24
   141c8:	cmp	r0, #0
   141cc:	movne	r9, #0
   141d0:	bne	14208 <close_stdout@@Base+0xebc>
   141d4:	ldr	r1, [sp, #72]	; 0x48
   141d8:	ldrb	r3, [r1]
   141dc:	cmp	r3, #0
   141e0:	beq	145e0 <close_stdout@@Base+0x1294>
   141e4:	mov	r2, r1
   141e8:	ldr	r1, [sp, #40]	; 0x28
   141ec:	mov	r9, r0
   141f0:	cmp	r9, sl
   141f4:	strbcc	r3, [r1, r9]
   141f8:	ldrb	r3, [r2, #1]!
   141fc:	add	r9, r9, #1
   14200:	cmp	r3, #0
   14204:	bne	141f0 <close_stdout@@Base+0xea4>
   14208:	ldr	r0, [sp, #68]	; 0x44
   1420c:	str	r0, [sp, #52]	; 0x34
   14210:	bl	11130 <strlen@plt>
   14214:	mov	r2, #1
   14218:	str	r2, [sp, #24]
   1421c:	str	r0, [sp, #28]
   14220:	b	139ec <close_stdout@@Base+0x6a0>
   14224:	ldr	r3, [pc, #1052]	; 14648 <close_stdout@@Base+0x12fc>
   14228:	mov	r2, #0
   1422c:	mov	r1, #1
   14230:	mov	r0, #2
   14234:	add	r3, pc, r3
   14238:	str	r1, [sp, #36]	; 0x24
   1423c:	str	r2, [sp, #24]
   14240:	mov	r9, r2
   14244:	str	r1, [sp, #28]
   14248:	str	r3, [sp, #52]	; 0x34
   1424c:	str	r0, [sp, #160]	; 0xa0
   14250:	b	139ec <close_stdout@@Base+0x6a0>
   14254:	ldr	r3, [sp, #36]	; 0x24
   14258:	cmp	r3, #0
   1425c:	bne	145ec <close_stdout@@Base+0x12a0>
   14260:	cmp	sl, #0
   14264:	beq	14548 <close_stdout@@Base+0x11fc>
   14268:	ldr	r1, [sp, #40]	; 0x28
   1426c:	mov	r3, #39	; 0x27
   14270:	ldr	r2, [sp, #36]	; 0x24
   14274:	mov	r0, #1
   14278:	mov	r9, r0
   1427c:	str	r0, [sp, #28]
   14280:	strb	r3, [r1]
   14284:	ldr	r3, [pc, #960]	; 1464c <close_stdout@@Base+0x1300>
   14288:	str	r2, [sp, #24]
   1428c:	add	r3, pc, r3
   14290:	str	r3, [sp, #52]	; 0x34
   14294:	b	139ec <close_stdout@@Base+0x6a0>
   14298:	ldr	r2, [sp, #28]
   1429c:	cmp	r2, #1
   142a0:	add	r4, fp, r2
   142a4:	movls	r3, #0
   142a8:	movhi	r3, #1
   142ac:	cmn	r8, #1
   142b0:	movne	r3, #0
   142b4:	cmp	r3, #0
   142b8:	beq	142c8 <close_stdout@@Base+0xf7c>
   142bc:	ldr	r0, [sp, #32]
   142c0:	bl	11130 <strlen@plt>
   142c4:	mov	r8, r0
   142c8:	cmp	r8, r4
   142cc:	ldrcc	r3, [sp, #32]
   142d0:	movcc	r6, #0
   142d4:	addcc	r5, r3, fp
   142d8:	bcc	13a48 <close_stdout@@Base+0x6fc>
   142dc:	ldr	r0, [sp, #32]
   142e0:	ldr	r1, [sp, #52]	; 0x34
   142e4:	add	r5, r0, fp
   142e8:	ldr	r2, [sp, #28]
   142ec:	mov	r0, r5
   142f0:	bl	1101c <memcmp@plt>
   142f4:	cmp	r0, #0
   142f8:	bne	14310 <close_stdout@@Base+0xfc4>
   142fc:	ldr	r1, [sp, #36]	; 0x24
   14300:	cmp	r1, #0
   14304:	bne	13e68 <close_stdout@@Base+0xb1c>
   14308:	mov	r6, #1
   1430c:	b	13a48 <close_stdout@@Base+0x6fc>
   14310:	mov	r6, #0
   14314:	b	13a48 <close_stdout@@Base+0x6fc>
   14318:	add	r7, sp, #108	; 0x6c
   1431c:	cmn	r8, #1
   14320:	mov	r3, #0
   14324:	str	r3, [sp, #108]	; 0x6c
   14328:	str	r3, [r7, #4]
   1432c:	beq	14518 <close_stdout@@Base+0x11cc>
   14330:	mov	r1, #0
   14334:	ldr	r0, [sp, #32]
   14338:	mov	ip, #1
   1433c:	str	r9, [sp, #88]	; 0x58
   14340:	str	r6, [sp, #96]	; 0x60
   14344:	mov	r9, r1
   14348:	str	r5, [sp, #100]	; 0x64
   1434c:	mov	r6, ip
   14350:	mov	r5, r7
   14354:	add	r3, sp, #104	; 0x68
   14358:	sub	r0, r0, #1
   1435c:	str	r3, [sp, #80]	; 0x50
   14360:	str	r0, [sp, #84]	; 0x54
   14364:	str	r1, [sp, #60]	; 0x3c
   14368:	str	r4, [sp, #92]	; 0x5c
   1436c:	ldr	r2, [sp, #32]
   14370:	add	r7, r9, fp
   14374:	add	r0, sp, #104	; 0x68
   14378:	mov	r3, r5
   1437c:	add	r4, r2, r7
   14380:	rsb	r2, r7, r8
   14384:	mov	r1, r4
   14388:	bl	110ac <mbrtowc@plt>
   1438c:	subs	r2, r0, #0
   14390:	beq	1449c <close_stdout@@Base+0x1150>
   14394:	cmn	r2, #1
   14398:	beq	145c4 <close_stdout@@Base+0x1278>
   1439c:	cmn	r2, #2
   143a0:	beq	14568 <close_stdout@@Base+0x121c>
   143a4:	ldr	r3, [sp, #36]	; 0x24
   143a8:	ldr	r0, [sp, #160]	; 0xa0
   143ac:	cmp	r0, #2
   143b0:	movne	r3, #0
   143b4:	andeq	r3, r3, #1
   143b8:	cmp	r3, #0
   143bc:	beq	14478 <close_stdout@@Base+0x112c>
   143c0:	cmp	r2, #1
   143c4:	beq	14478 <close_stdout@@Base+0x112c>
   143c8:	ldr	r1, [sp, #84]	; 0x54
   143cc:	add	r3, r1, r2
   143d0:	add	r7, r3, r7
   143d4:	ldrb	r3, [r4, #1]!
   143d8:	sub	r3, r3, #91	; 0x5b
   143dc:	cmp	r3, #33	; 0x21
   143e0:	addls	pc, pc, r3, lsl #2
   143e4:	b	14470 <close_stdout@@Base+0x1124>
   143e8:	b	13e68 <close_stdout@@Base+0xb1c>
   143ec:	b	13e68 <close_stdout@@Base+0xb1c>
   143f0:	b	14470 <close_stdout@@Base+0x1124>
   143f4:	b	13e68 <close_stdout@@Base+0xb1c>
   143f8:	b	14470 <close_stdout@@Base+0x1124>
   143fc:	b	13e68 <close_stdout@@Base+0xb1c>
   14400:	b	14470 <close_stdout@@Base+0x1124>
   14404:	b	14470 <close_stdout@@Base+0x1124>
   14408:	b	14470 <close_stdout@@Base+0x1124>
   1440c:	b	14470 <close_stdout@@Base+0x1124>
   14410:	b	14470 <close_stdout@@Base+0x1124>
   14414:	b	14470 <close_stdout@@Base+0x1124>
   14418:	b	14470 <close_stdout@@Base+0x1124>
   1441c:	b	14470 <close_stdout@@Base+0x1124>
   14420:	b	14470 <close_stdout@@Base+0x1124>
   14424:	b	14470 <close_stdout@@Base+0x1124>
   14428:	b	14470 <close_stdout@@Base+0x1124>
   1442c:	b	14470 <close_stdout@@Base+0x1124>
   14430:	b	14470 <close_stdout@@Base+0x1124>
   14434:	b	14470 <close_stdout@@Base+0x1124>
   14438:	b	14470 <close_stdout@@Base+0x1124>
   1443c:	b	14470 <close_stdout@@Base+0x1124>
   14440:	b	14470 <close_stdout@@Base+0x1124>
   14444:	b	14470 <close_stdout@@Base+0x1124>
   14448:	b	14470 <close_stdout@@Base+0x1124>
   1444c:	b	14470 <close_stdout@@Base+0x1124>
   14450:	b	14470 <close_stdout@@Base+0x1124>
   14454:	b	14470 <close_stdout@@Base+0x1124>
   14458:	b	14470 <close_stdout@@Base+0x1124>
   1445c:	b	14470 <close_stdout@@Base+0x1124>
   14460:	b	14470 <close_stdout@@Base+0x1124>
   14464:	b	14470 <close_stdout@@Base+0x1124>
   14468:	b	14470 <close_stdout@@Base+0x1124>
   1446c:	b	13e68 <close_stdout@@Base+0xb1c>
   14470:	cmp	r4, r7
   14474:	bne	143d4 <close_stdout@@Base+0x1088>
   14478:	ldr	r0, [sp, #104]	; 0x68
   1447c:	add	r9, r9, r2
   14480:	bl	11058 <iswprint@plt>
   14484:	cmp	r0, #0
   14488:	mov	r0, r5
   1448c:	moveq	r6, #0
   14490:	bl	11004 <mbsinit@plt>
   14494:	cmp	r0, #0
   14498:	beq	1436c <close_stdout@@Base+0x1020>
   1449c:	mov	ip, r6
   144a0:	eor	r2, ip, #1
   144a4:	str	r9, [sp, #60]	; 0x3c
   144a8:	ldr	r4, [sp, #92]	; 0x5c
   144ac:	uxtb	r2, r2
   144b0:	ldr	r9, [sp, #88]	; 0x58
   144b4:	ldr	r6, [sp, #96]	; 0x60
   144b8:	ldr	r5, [sp, #100]	; 0x64
   144bc:	ldr	r3, [sp, #60]	; 0x3c
   144c0:	cmp	r3, #1
   144c4:	bls	14048 <close_stdout@@Base+0xcfc>
   144c8:	ldr	r0, [sp, #24]
   144cc:	and	r2, r2, r0
   144d0:	b	14054 <close_stdout@@Base+0xd08>
   144d4:	ldr	r2, [sp, #164]	; 0xa4
   144d8:	tst	r2, #1
   144dc:	addne	fp, fp, #1
   144e0:	bne	13a10 <close_stdout@@Base+0x6c4>
   144e4:	b	13d20 <close_stdout@@Base+0x9d4>
   144e8:	ldr	r0, [sp, #36]	; 0x24
   144ec:	cmp	r0, #0
   144f0:	beq	13d20 <close_stdout@@Base+0x9d4>
   144f4:	b	13e68 <close_stdout@@Base+0xb1c>
   144f8:	ldr	r2, [sp, #32]
   144fc:	ldrb	r3, [r2, #1]
   14500:	adds	r3, r3, #0
   14504:	movne	r3, #1
   14508:	b	13e3c <close_stdout@@Base+0xaf0>
   1450c:	bl	11220 <abort@plt>
   14510:	ldr	r8, [sp, #60]	; 0x3c
   14514:	b	13e68 <close_stdout@@Base+0xb1c>
   14518:	ldr	r0, [sp, #32]
   1451c:	bl	11130 <strlen@plt>
   14520:	mov	r8, r0
   14524:	b	14330 <close_stdout@@Base+0xfe4>
   14528:	ldr	r2, [pc, #288]	; 14650 <close_stdout@@Base+0x1304>
   1452c:	mov	r1, #1
   14530:	mov	r9, r1
   14534:	str	r1, [sp, #24]
   14538:	add	r2, pc, r2
   1453c:	str	r1, [sp, #28]
   14540:	str	r2, [sp, #52]	; 0x34
   14544:	b	139ec <close_stdout@@Base+0x6a0>
   14548:	ldr	r2, [pc, #260]	; 14654 <close_stdout@@Base+0x1308>
   1454c:	mov	r3, #1
   14550:	mov	r9, r3
   14554:	str	r3, [sp, #28]
   14558:	add	r2, pc, r2
   1455c:	str	sl, [sp, #24]
   14560:	str	r2, [sp, #52]	; 0x34
   14564:	b	139ec <close_stdout@@Base+0x6a0>
   14568:	cmp	r8, r7
   1456c:	str	r9, [sp, #60]	; 0x3c
   14570:	mov	ip, r4
   14574:	ldr	r6, [sp, #96]	; 0x60
   14578:	ldr	r9, [sp, #88]	; 0x58
   1457c:	ldr	r4, [sp, #92]	; 0x5c
   14580:	ldr	r5, [sp, #100]	; 0x64
   14584:	bls	145bc <close_stdout@@Base+0x1270>
   14588:	ldrb	r3, [ip]
   1458c:	cmp	r3, #0
   14590:	beq	145bc <close_stdout@@Base+0x1270>
   14594:	ldr	r3, [sp, #60]	; 0x3c
   14598:	b	145a8 <close_stdout@@Base+0x125c>
   1459c:	ldrb	r2, [r5, r3]
   145a0:	cmp	r2, #0
   145a4:	beq	145b8 <close_stdout@@Base+0x126c>
   145a8:	add	r3, r3, #1
   145ac:	add	r2, fp, r3
   145b0:	cmp	r8, r2
   145b4:	bhi	1459c <close_stdout@@Base+0x1250>
   145b8:	str	r3, [sp, #60]	; 0x3c
   145bc:	mov	r2, #1
   145c0:	b	144bc <close_stdout@@Base+0x1170>
   145c4:	str	r9, [sp, #60]	; 0x3c
   145c8:	mov	r2, #1
   145cc:	ldr	r4, [sp, #92]	; 0x5c
   145d0:	ldr	r6, [sp, #96]	; 0x60
   145d4:	ldr	r9, [sp, #88]	; 0x58
   145d8:	ldr	r5, [sp, #100]	; 0x64
   145dc:	b	144bc <close_stdout@@Base+0x1170>
   145e0:	ldr	r9, [sp, #36]	; 0x24
   145e4:	b	14208 <close_stdout@@Base+0xebc>
   145e8:	bl	11034 <__stack_chk_fail@plt>
   145ec:	ldr	r1, [pc, #100]	; 14658 <close_stdout@@Base+0x130c>
   145f0:	mov	r3, #0
   145f4:	mov	r0, #1
   145f8:	str	r3, [sp, #24]
   145fc:	add	r1, pc, r1
   14600:	str	r0, [sp, #28]
   14604:	mov	r9, r3
   14608:	str	r1, [sp, #52]	; 0x34
   1460c:	b	139ec <close_stdout@@Base+0x6a0>
   14610:	ldr	r0, [pc, #68]	; 1465c <close_stdout@@Base+0x1310>
   14614:	mov	r3, #1
   14618:	mov	r9, #0
   1461c:	str	r3, [sp, #24]
   14620:	add	r0, pc, r0
   14624:	str	r3, [sp, #28]
   14628:	str	r0, [sp, #52]	; 0x34
   1462c:	b	139ec <close_stdout@@Base+0x6a0>
   14630:	andeq	r5, r1, r4, lsr #13
   14634:	strdeq	r0, [r0], -ip
   14638:	andeq	r3, r0, r4, ror #17
   1463c:	andeq	r3, r0, r0, asr #17
   14640:	andeq	r3, r0, ip, ror r8
   14644:	andeq	r3, r0, r8, asr r8
   14648:	ldrdeq	r3, [r0], -ip
   1464c:	andeq	r3, r0, r4, lsl #15
   14650:	ldrdeq	r3, [r0], -ip
   14654:			; <UNDEFINED> instruction: 0x000034b8
   14658:	andeq	r3, r0, r4, lsl r4
   1465c:	strdeq	r3, [r0], -r4
   14660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14664:	sub	sp, sp, #44	; 0x2c
   14668:	mov	r6, r0
   1466c:	mov	r9, r1
   14670:	mov	sl, r2
   14674:	mov	r4, r3
   14678:	bl	11160 <__errno_location@plt>
   1467c:	ldr	fp, [pc, #412]	; 14820 <close_stdout@@Base+0x14d4>
   14680:	cmp	r6, #0
   14684:	add	fp, pc, fp
   14688:	ldr	r5, [fp]
   1468c:	ldr	r1, [r0]
   14690:	mov	r8, r0
   14694:	str	r1, [sp, #36]	; 0x24
   14698:	blt	14818 <close_stdout@@Base+0x14cc>
   1469c:	ldr	r3, [pc, #384]	; 14824 <close_stdout@@Base+0x14d8>
   146a0:	add	r3, pc, r3
   146a4:	ldr	r3, [r3]
   146a8:	cmp	r6, r3
   146ac:	bcc	14700 <close_stdout@@Base+0x13b4>
   146b0:	add	r7, r6, #1
   146b4:	cmn	r7, #-536870911	; 0xe0000001
   146b8:	bhi	1481c <close_stdout@@Base+0x14d0>
   146bc:	add	r3, fp, #4
   146c0:	cmp	r5, r3
   146c4:	beq	147f0 <close_stdout@@Base+0x14a4>
   146c8:	mov	r0, r5
   146cc:	lsl	r1, r7, #3
   146d0:	bl	15558 <close_stdout@@Base+0x220c>
   146d4:	mov	r5, r0
   146d8:	str	r0, [fp]
   146dc:	ldr	fp, [pc, #324]	; 14828 <close_stdout@@Base+0x14dc>
   146e0:	mov	r1, #0
   146e4:	add	fp, pc, fp
   146e8:	ldr	r0, [fp]
   146ec:	rsb	r2, r0, r7
   146f0:	add	r0, r5, r0, lsl #3
   146f4:	lsl	r2, r2, #3
   146f8:	bl	11178 <memset@plt>
   146fc:	str	r7, [fp]
   14700:	add	r2, r4, #8
   14704:	str	r2, [sp, #32]
   14708:	ldr	r1, [r4]
   1470c:	add	fp, r5, r6, lsl #3
   14710:	ldr	lr, [sp, #32]
   14714:	mov	r2, r9
   14718:	ldr	r3, [r4, #4]
   1471c:	ldr	ip, [r5, r6, lsl #3]
   14720:	ldr	r7, [fp, #4]
   14724:	orr	r3, r3, #1
   14728:	str	r1, [sp]
   1472c:	str	r3, [sp, #4]
   14730:	mov	r1, ip
   14734:	str	lr, [sp, #8]
   14738:	mov	r0, r7
   1473c:	ldr	lr, [r4, #40]	; 0x28
   14740:	str	r3, [sp, #28]
   14744:	mov	r3, sl
   14748:	str	lr, [sp, #12]
   1474c:	ldr	lr, [r4, #44]	; 0x2c
   14750:	str	ip, [sp, #24]
   14754:	str	lr, [sp, #16]
   14758:	bl	13938 <close_stdout@@Base+0x5ec>
   1475c:	ldr	ip, [sp, #24]
   14760:	cmp	ip, r0
   14764:	bhi	147dc <close_stdout@@Base+0x1490>
   14768:	ldr	r3, [pc, #188]	; 1482c <close_stdout@@Base+0x14e0>
   1476c:	add	r1, r0, #1
   14770:	str	r1, [r5, r6, lsl #3]
   14774:	add	r3, pc, r3
   14778:	cmp	r7, r3
   1477c:	beq	14790 <close_stdout@@Base+0x1444>
   14780:	mov	r0, r7
   14784:	str	r1, [sp, #24]
   14788:	bl	10fd4 <free@plt>
   1478c:	ldr	r1, [sp, #24]
   14790:	mov	r0, r1
   14794:	str	r1, [sp, #24]
   14798:	bl	15500 <close_stdout@@Base+0x21b4>
   1479c:	ldr	r3, [sp, #28]
   147a0:	ldr	lr, [sp, #32]
   147a4:	mov	r2, r9
   147a8:	str	r0, [fp, #4]
   147ac:	mov	r7, r0
   147b0:	ldr	ip, [r4]
   147b4:	str	r3, [sp, #4]
   147b8:	mov	r3, sl
   147bc:	str	lr, [sp, #8]
   147c0:	str	ip, [sp]
   147c4:	ldr	ip, [r4, #40]	; 0x28
   147c8:	ldr	r1, [sp, #24]
   147cc:	str	ip, [sp, #12]
   147d0:	ldr	ip, [r4, #44]	; 0x2c
   147d4:	str	ip, [sp, #16]
   147d8:	bl	13938 <close_stdout@@Base+0x5ec>
   147dc:	ldr	r1, [sp, #36]	; 0x24
   147e0:	mov	r0, r7
   147e4:	str	r1, [r8]
   147e8:	add	sp, sp, #44	; 0x2c
   147ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f0:	lsl	r1, r7, #3
   147f4:	mov	r0, #0
   147f8:	str	r3, [sp, #24]
   147fc:	bl	15558 <close_stdout@@Base+0x220c>
   14800:	ldr	r3, [sp, #24]
   14804:	mov	r5, r0
   14808:	ldm	r3, {r0, r1}
   1480c:	str	r5, [fp]
   14810:	stm	r5, {r0, r1}
   14814:	b	146dc <close_stdout@@Base+0x1390>
   14818:	bl	11220 <abort@plt>
   1481c:	bl	15714 <close_stdout@@Base+0x23c8>
   14820:	andeq	r4, r1, ip, ror #21
   14824:	muleq	r1, ip, sl
   14828:	andeq	r4, r1, r8, asr sl
   1482c:	andeq	r4, r1, r8, lsl sl
   14830:	push	{r4, r5, r6, lr}
   14834:	mov	r5, r0
   14838:	bl	11160 <__errno_location@plt>
   1483c:	cmp	r5, #0
   14840:	mov	r1, #48	; 0x30
   14844:	mov	r4, r0
   14848:	ldr	r0, [pc, #24]	; 14868 <close_stdout@@Base+0x151c>
   1484c:	ldr	r6, [r4]
   14850:	add	r0, pc, r0
   14854:	add	r0, r0, #256	; 0x100
   14858:	movne	r0, r5
   1485c:	bl	156d4 <close_stdout@@Base+0x2388>
   14860:	str	r6, [r4]
   14864:	pop	{r4, r5, r6, pc}
   14868:	andeq	r4, r1, ip, lsr r9
   1486c:	cmp	r0, #0
   14870:	beq	1487c <close_stdout@@Base+0x1530>
   14874:	ldr	r0, [r0]
   14878:	bx	lr
   1487c:	ldr	r0, [pc, #12]	; 14890 <close_stdout@@Base+0x1544>
   14880:	add	r0, pc, r0
   14884:	add	r0, r0, #256	; 0x100
   14888:	ldr	r0, [r0]
   1488c:	bx	lr
   14890:	andeq	r4, r1, ip, lsl #18
   14894:	cmp	r0, #0
   14898:	beq	148a4 <close_stdout@@Base+0x1558>
   1489c:	str	r1, [r0]
   148a0:	bx	lr
   148a4:	ldr	r0, [pc, #12]	; 148b8 <close_stdout@@Base+0x156c>
   148a8:	add	r0, pc, r0
   148ac:	add	r0, r0, #256	; 0x100
   148b0:	str	r1, [r0]
   148b4:	bx	lr
   148b8:	andeq	r4, r1, r4, ror #17
   148bc:	cmp	r0, #0
   148c0:	movne	r3, r0
   148c4:	beq	148f4 <close_stdout@@Base+0x15a8>
   148c8:	lsr	ip, r1, #5
   148cc:	and	r1, r1, #31
   148d0:	add	r3, r3, ip, lsl #2
   148d4:	ldr	ip, [r3, #8]
   148d8:	lsr	r0, ip, r1
   148dc:	eor	r2, r0, r2
   148e0:	and	r0, r0, #1
   148e4:	and	r2, r2, #1
   148e8:	eor	ip, ip, r2, lsl r1
   148ec:	str	ip, [r3, #8]
   148f0:	bx	lr
   148f4:	ldr	r3, [pc, #8]	; 14904 <close_stdout@@Base+0x15b8>
   148f8:	add	r3, pc, r3
   148fc:	add	r3, r3, #256	; 0x100
   14900:	b	148c8 <close_stdout@@Base+0x157c>
   14904:	muleq	r1, r4, r8
   14908:	subs	r3, r0, #0
   1490c:	beq	1491c <close_stdout@@Base+0x15d0>
   14910:	ldr	r0, [r3, #4]
   14914:	str	r1, [r3, #4]
   14918:	bx	lr
   1491c:	ldr	r3, [pc, #8]	; 1492c <close_stdout@@Base+0x15e0>
   14920:	add	r3, pc, r3
   14924:	add	r3, r3, #256	; 0x100
   14928:	b	14910 <close_stdout@@Base+0x15c4>
   1492c:	andeq	r4, r1, ip, ror #16
   14930:	cmp	r0, #0
   14934:	push	{r3, lr}
   14938:	beq	1495c <close_stdout@@Base+0x1610>
   1493c:	cmp	r2, #0
   14940:	cmpne	r1, #0
   14944:	mov	r3, #8
   14948:	strne	r1, [r0, #40]	; 0x28
   1494c:	str	r3, [r0]
   14950:	strne	r2, [r0, #44]	; 0x2c
   14954:	popne	{r3, pc}
   14958:	bl	11220 <abort@plt>
   1495c:	ldr	r0, [pc, #8]	; 1496c <close_stdout@@Base+0x1620>
   14960:	add	r0, pc, r0
   14964:	add	r0, r0, #256	; 0x100
   14968:	b	1493c <close_stdout@@Base+0x15f0>
   1496c:	andeq	r4, r1, ip, lsr #16
   14970:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14974:	sub	sp, sp, #24
   14978:	mov	r7, r0
   1497c:	mov	sl, r1
   14980:	ldr	r4, [sp, #56]	; 0x38
   14984:	mov	r9, r2
   14988:	mov	r8, r3
   1498c:	cmp	r4, #0
   14990:	beq	149e4 <close_stdout@@Base+0x1698>
   14994:	bl	11160 <__errno_location@plt>
   14998:	ldr	r3, [r4]
   1499c:	add	lr, r4, #8
   149a0:	mov	r1, sl
   149a4:	mov	r2, r9
   149a8:	ldr	r6, [r0]
   149ac:	mov	r5, r0
   149b0:	str	r3, [sp]
   149b4:	mov	r0, r7
   149b8:	ldr	ip, [r4, #4]
   149bc:	mov	r3, r8
   149c0:	stmib	sp, {ip, lr}
   149c4:	ldr	ip, [r4, #40]	; 0x28
   149c8:	str	ip, [sp, #12]
   149cc:	ldr	ip, [r4, #44]	; 0x2c
   149d0:	str	ip, [sp, #16]
   149d4:	bl	13938 <close_stdout@@Base+0x5ec>
   149d8:	str	r6, [r5]
   149dc:	add	sp, sp, #24
   149e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149e4:	ldr	r4, [pc, #8]	; 149f4 <close_stdout@@Base+0x16a8>
   149e8:	add	r4, pc, r4
   149ec:	add	r4, r4, #256	; 0x100
   149f0:	b	14994 <close_stdout@@Base+0x1648>
   149f4:	andeq	r4, r1, r4, lsr #15
   149f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149fc:	subs	r4, r3, #0
   14a00:	sub	sp, sp, #36	; 0x24
   14a04:	mov	r7, r0
   14a08:	mov	r6, r1
   14a0c:	mov	r5, r2
   14a10:	beq	14acc <close_stdout@@Base+0x1780>
   14a14:	bl	11160 <__errno_location@plt>
   14a18:	ldr	r3, [r4]
   14a1c:	ldr	sl, [r4, #4]
   14a20:	add	r9, r4, #8
   14a24:	mov	r8, r0
   14a28:	mov	r0, #0
   14a2c:	ldr	r2, [r8]
   14a30:	cmp	r5, r0
   14a34:	orreq	sl, sl, #1
   14a38:	str	r9, [sp, #8]
   14a3c:	mov	r1, r0
   14a40:	stm	sp, {r3, sl}
   14a44:	mov	r3, r6
   14a48:	ldr	ip, [r4, #40]	; 0x28
   14a4c:	str	r2, [sp, #28]
   14a50:	mov	r2, r7
   14a54:	str	ip, [sp, #12]
   14a58:	ldr	ip, [r4, #44]	; 0x2c
   14a5c:	str	ip, [sp, #16]
   14a60:	bl	13938 <close_stdout@@Base+0x5ec>
   14a64:	add	r1, r0, #1
   14a68:	mov	fp, r0
   14a6c:	str	r1, [sp, #24]
   14a70:	mov	r0, r1
   14a74:	bl	15500 <close_stdout@@Base+0x21b4>
   14a78:	ldr	lr, [r4]
   14a7c:	str	sl, [sp, #4]
   14a80:	mov	r3, r6
   14a84:	str	r9, [sp, #8]
   14a88:	mov	r2, r7
   14a8c:	str	lr, [sp]
   14a90:	ldr	lr, [r4, #40]	; 0x28
   14a94:	ldr	r1, [sp, #24]
   14a98:	str	lr, [sp, #12]
   14a9c:	ldr	lr, [r4, #44]	; 0x2c
   14aa0:	str	lr, [sp, #16]
   14aa4:	str	r0, [sp, #24]
   14aa8:	bl	13938 <close_stdout@@Base+0x5ec>
   14aac:	ldr	r3, [sp, #28]
   14ab0:	cmp	r5, #0
   14ab4:	str	r3, [r8]
   14ab8:	ldr	ip, [sp, #24]
   14abc:	strne	fp, [r5]
   14ac0:	mov	r0, ip
   14ac4:	add	sp, sp, #36	; 0x24
   14ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14acc:	ldr	r4, [pc, #8]	; 14adc <close_stdout@@Base+0x1790>
   14ad0:	add	r4, pc, r4
   14ad4:	add	r4, r4, #256	; 0x100
   14ad8:	b	14a14 <close_stdout@@Base+0x16c8>
   14adc:			; <UNDEFINED> instruction: 0x000146bc
   14ae0:	mov	r3, r2
   14ae4:	mov	r2, #0
   14ae8:	b	149f8 <close_stdout@@Base+0x16ac>
   14aec:	ldr	r2, [pc, #152]	; 14b8c <close_stdout@@Base+0x1840>
   14af0:	push	{r3, r4, r5, r6, r7, lr}
   14af4:	add	r2, pc, r2
   14af8:	ldr	r3, [pc, #144]	; 14b90 <close_stdout@@Base+0x1844>
   14afc:	ldr	r6, [r2]
   14b00:	add	r3, pc, r3
   14b04:	cmp	r6, #1
   14b08:	ldr	r7, [r3]
   14b0c:	movhi	r4, #1
   14b10:	movhi	r5, r7
   14b14:	bls	14b30 <close_stdout@@Base+0x17e4>
   14b18:	ldr	r0, [r5, #12]
   14b1c:	add	r4, r4, #1
   14b20:	bl	10fd4 <free@plt>
   14b24:	cmp	r4, r6
   14b28:	add	r5, r5, #8
   14b2c:	bne	14b18 <close_stdout@@Base+0x17cc>
   14b30:	ldr	r4, [pc, #92]	; 14b94 <close_stdout@@Base+0x1848>
   14b34:	ldr	r0, [r7, #4]
   14b38:	add	r4, pc, r4
   14b3c:	cmp	r0, r4
   14b40:	beq	14b58 <close_stdout@@Base+0x180c>
   14b44:	bl	10fd4 <free@plt>
   14b48:	ldr	r3, [pc, #72]	; 14b98 <close_stdout@@Base+0x184c>
   14b4c:	mov	r2, #256	; 0x100
   14b50:	add	r3, pc, r3
   14b54:	stmib	r3, {r2, r4}
   14b58:	ldr	r4, [pc, #60]	; 14b9c <close_stdout@@Base+0x1850>
   14b5c:	add	r4, pc, r4
   14b60:	add	r5, r4, #4
   14b64:	cmp	r7, r5
   14b68:	beq	14b78 <close_stdout@@Base+0x182c>
   14b6c:	mov	r0, r7
   14b70:	bl	10fd4 <free@plt>
   14b74:	str	r5, [r4]
   14b78:	ldr	r3, [pc, #32]	; 14ba0 <close_stdout@@Base+0x1854>
   14b7c:	mov	r2, #1
   14b80:	add	r3, pc, r3
   14b84:	str	r2, [r3]
   14b88:	pop	{r3, r4, r5, r6, r7, pc}
   14b8c:	andeq	r4, r1, r8, asr #12
   14b90:	andeq	r4, r1, r0, ror r6
   14b94:	andeq	r4, r1, r4, asr r6
   14b98:	andeq	r4, r1, r0, lsr #12
   14b9c:	andeq	r4, r1, r4, lsl r6
   14ba0:			; <UNDEFINED> instruction: 0x000145bc
   14ba4:	ldr	r3, [pc, #12]	; 14bb8 <close_stdout@@Base+0x186c>
   14ba8:	mvn	r2, #0
   14bac:	add	r3, pc, r3
   14bb0:	add	r3, r3, #256	; 0x100
   14bb4:	b	14660 <close_stdout@@Base+0x1314>
   14bb8:	andeq	r4, r1, r0, ror #11
   14bbc:	ldr	r3, [pc, #8]	; 14bcc <close_stdout@@Base+0x1880>
   14bc0:	add	r3, pc, r3
   14bc4:	add	r3, r3, #256	; 0x100
   14bc8:	b	14660 <close_stdout@@Base+0x1314>
   14bcc:	andeq	r4, r1, ip, asr #11
   14bd0:	mov	r1, r0
   14bd4:	mov	r0, #0
   14bd8:	b	14ba4 <close_stdout@@Base+0x1858>
   14bdc:	mov	r2, r1
   14be0:	mov	r1, r0
   14be4:	mov	r0, #0
   14be8:	b	14bbc <close_stdout@@Base+0x1870>
   14bec:	ldr	r3, [pc, #92]	; 14c50 <close_stdout@@Base+0x1904>
   14bf0:	ldr	ip, [pc, #92]	; 14c54 <close_stdout@@Base+0x1908>
   14bf4:	add	r3, pc, r3
   14bf8:	push	{r4, r5, r6, r7, lr}
   14bfc:	sub	sp, sp, #60	; 0x3c
   14c00:	ldr	r4, [r3, ip]
   14c04:	add	r5, sp, #4
   14c08:	mov	r7, r2
   14c0c:	mov	r6, r0
   14c10:	mov	r0, r5
   14c14:	ldr	r3, [r4]
   14c18:	str	r3, [sp, #52]	; 0x34
   14c1c:	bl	13780 <close_stdout@@Base+0x434>
   14c20:	mov	r3, r5
   14c24:	mvn	r2, #0
   14c28:	mov	r0, r6
   14c2c:	mov	r1, r7
   14c30:	bl	14660 <close_stdout@@Base+0x1314>
   14c34:	ldr	r2, [sp, #52]	; 0x34
   14c38:	ldr	r3, [r4]
   14c3c:	cmp	r2, r3
   14c40:	bne	14c4c <close_stdout@@Base+0x1900>
   14c44:	add	sp, sp, #60	; 0x3c
   14c48:	pop	{r4, r5, r6, r7, pc}
   14c4c:	bl	11034 <__stack_chk_fail@plt>
   14c50:	andeq	r4, r1, r4, lsl #8
   14c54:	strdeq	r0, [r0], -ip
   14c58:	ldr	ip, [pc, #96]	; 14cc0 <close_stdout@@Base+0x1974>
   14c5c:	push	{r4, r5, r6, r7, r8, lr}
   14c60:	add	ip, pc, ip
   14c64:	ldr	lr, [pc, #88]	; 14cc4 <close_stdout@@Base+0x1978>
   14c68:	sub	sp, sp, #56	; 0x38
   14c6c:	mov	r8, r3
   14c70:	add	r5, sp, #4
   14c74:	mov	r7, r2
   14c78:	mov	r6, r0
   14c7c:	ldr	r4, [ip, lr]
   14c80:	mov	r0, r5
   14c84:	ldr	r3, [r4]
   14c88:	str	r3, [sp, #52]	; 0x34
   14c8c:	bl	13780 <close_stdout@@Base+0x434>
   14c90:	mov	r2, r8
   14c94:	mov	r3, r5
   14c98:	mov	r0, r6
   14c9c:	mov	r1, r7
   14ca0:	bl	14660 <close_stdout@@Base+0x1314>
   14ca4:	ldr	r2, [sp, #52]	; 0x34
   14ca8:	ldr	r3, [r4]
   14cac:	cmp	r2, r3
   14cb0:	bne	14cbc <close_stdout@@Base+0x1970>
   14cb4:	add	sp, sp, #56	; 0x38
   14cb8:	pop	{r4, r5, r6, r7, r8, pc}
   14cbc:	bl	11034 <__stack_chk_fail@plt>
   14cc0:	muleq	r1, r8, r3
   14cc4:	strdeq	r0, [r0], -ip
   14cc8:	mov	r2, r1
   14ccc:	mov	r1, r0
   14cd0:	mov	r0, #0
   14cd4:	b	14bec <close_stdout@@Base+0x18a0>
   14cd8:	mov	ip, r1
   14cdc:	mov	r3, r2
   14ce0:	mov	r1, r0
   14ce4:	mov	r2, ip
   14ce8:	mov	r0, #0
   14cec:	b	14c58 <close_stdout@@Base+0x190c>
   14cf0:	push	{r4, r5, r6, r7, r8, lr}
   14cf4:	mov	r5, r2
   14cf8:	ldr	lr, [pc, #136]	; 14d88 <close_stdout@@Base+0x1a3c>
   14cfc:	mov	r7, r0
   14d00:	mov	r6, r1
   14d04:	ldr	r4, [pc, #128]	; 14d8c <close_stdout@@Base+0x1a40>
   14d08:	add	lr, pc, lr
   14d0c:	sub	sp, sp, #56	; 0x38
   14d10:	add	lr, lr, #256	; 0x100
   14d14:	ldr	r8, [pc, #116]	; 14d90 <close_stdout@@Base+0x1a44>
   14d18:	add	r4, pc, r4
   14d1c:	add	ip, sp, #4
   14d20:	ldm	lr!, {r0, r1, r2, r3}
   14d24:	ldr	r4, [r4, r8]
   14d28:	stmia	ip!, {r0, r1, r2, r3}
   14d2c:	ldm	lr!, {r0, r1, r2, r3}
   14d30:	ldr	r8, [r4]
   14d34:	stmia	ip!, {r0, r1, r2, r3}
   14d38:	ldm	lr, {r0, r1, r2, r3}
   14d3c:	str	r8, [sp, #52]	; 0x34
   14d40:	stm	ip, {r0, r1, r2, r3}
   14d44:	mov	r1, r5
   14d48:	add	r5, sp, #4
   14d4c:	mov	r2, #1
   14d50:	mov	r0, r5
   14d54:	bl	148bc <close_stdout@@Base+0x1570>
   14d58:	mov	r2, r6
   14d5c:	mov	r3, r5
   14d60:	mov	r1, r7
   14d64:	mov	r0, #0
   14d68:	bl	14660 <close_stdout@@Base+0x1314>
   14d6c:	ldr	r2, [sp, #52]	; 0x34
   14d70:	ldr	r3, [r4]
   14d74:	cmp	r2, r3
   14d78:	bne	14d84 <close_stdout@@Base+0x1a38>
   14d7c:	add	sp, sp, #56	; 0x38
   14d80:	pop	{r4, r5, r6, r7, r8, pc}
   14d84:	bl	11034 <__stack_chk_fail@plt>
   14d88:	andeq	r4, r1, r4, lsl #9
   14d8c:	andeq	r4, r1, r0, ror #5
   14d90:	strdeq	r0, [r0], -ip
   14d94:	mov	r2, r1
   14d98:	mvn	r1, #0
   14d9c:	b	14cf0 <close_stdout@@Base+0x19a4>
   14da0:	mov	r1, #58	; 0x3a
   14da4:	b	14d94 <close_stdout@@Base+0x1a48>
   14da8:	mov	r2, #58	; 0x3a
   14dac:	b	14cf0 <close_stdout@@Base+0x19a4>
   14db0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14db4:	mov	r5, r2
   14db8:	ldr	lr, [pc, #144]	; 14e50 <close_stdout@@Base+0x1b04>
   14dbc:	mov	r8, r0
   14dc0:	mov	r9, r1
   14dc4:	mov	r7, r3
   14dc8:	add	lr, pc, lr
   14dcc:	ldr	r4, [pc, #128]	; 14e54 <close_stdout@@Base+0x1b08>
   14dd0:	add	lr, lr, #256	; 0x100
   14dd4:	sub	sp, sp, #56	; 0x38
   14dd8:	ldr	sl, [pc, #120]	; 14e58 <close_stdout@@Base+0x1b0c>
   14ddc:	add	r4, pc, r4
   14de0:	ldm	lr!, {r0, r1, r2, r3}
   14de4:	add	ip, sp, #4
   14de8:	ldr	r4, [r4, sl]
   14dec:	ldr	r6, [sp, #88]	; 0x58
   14df0:	stmia	ip!, {r0, r1, r2, r3}
   14df4:	ldm	lr!, {r0, r1, r2, r3}
   14df8:	ldr	sl, [r4]
   14dfc:	stmia	ip!, {r0, r1, r2, r3}
   14e00:	ldm	lr, {r0, r1, r2, r3}
   14e04:	str	sl, [sp, #52]	; 0x34
   14e08:	stm	ip, {r0, r1, r2, r3}
   14e0c:	mov	r2, r5
   14e10:	add	r5, sp, #4
   14e14:	mov	r1, r9
   14e18:	mov	r0, r5
   14e1c:	bl	14930 <close_stdout@@Base+0x15e4>
   14e20:	mov	r2, r6
   14e24:	mov	r3, r5
   14e28:	mov	r0, r8
   14e2c:	mov	r1, r7
   14e30:	bl	14660 <close_stdout@@Base+0x1314>
   14e34:	ldr	r2, [sp, #52]	; 0x34
   14e38:	ldr	r3, [r4]
   14e3c:	cmp	r2, r3
   14e40:	bne	14e4c <close_stdout@@Base+0x1b00>
   14e44:	add	sp, sp, #56	; 0x38
   14e48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e4c:	bl	11034 <__stack_chk_fail@plt>
   14e50:	andeq	r4, r1, r4, asr #7
   14e54:	andeq	r4, r1, ip, lsl r2
   14e58:	strdeq	r0, [r0], -ip
   14e5c:	push	{lr}		; (str lr, [sp, #-4]!)
   14e60:	sub	sp, sp, #12
   14e64:	mvn	ip, #0
   14e68:	str	ip, [sp]
   14e6c:	bl	14db0 <close_stdout@@Base+0x1a64>
   14e70:	add	sp, sp, #12
   14e74:	pop	{pc}		; (ldr pc, [sp], #4)
   14e78:	mov	ip, r1
   14e7c:	mov	r3, r2
   14e80:	mov	r1, r0
   14e84:	mov	r2, ip
   14e88:	mov	r0, #0
   14e8c:	b	14e5c <close_stdout@@Base+0x1b10>
   14e90:	push	{lr}		; (str lr, [sp, #-4]!)
   14e94:	sub	sp, sp, #12
   14e98:	mov	lr, r1
   14e9c:	mov	ip, r2
   14ea0:	mov	r1, r0
   14ea4:	str	r3, [sp]
   14ea8:	mov	r2, lr
   14eac:	mov	r3, ip
   14eb0:	mov	r0, #0
   14eb4:	bl	14db0 <close_stdout@@Base+0x1a64>
   14eb8:	add	sp, sp, #12
   14ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec0:	ldr	r3, [pc, #12]	; 14ed4 <close_stdout@@Base+0x1b88>
   14ec4:	ldr	ip, [pc, #12]	; 14ed8 <close_stdout@@Base+0x1b8c>
   14ec8:	add	r3, pc, r3
   14ecc:	ldr	r3, [r3, ip]
   14ed0:	b	14660 <close_stdout@@Base+0x1314>
   14ed4:	andeq	r4, r1, r0, lsr r1
   14ed8:	strdeq	r0, [r0], -r8
   14edc:	mov	r2, r1
   14ee0:	mov	r1, r0
   14ee4:	mov	r0, #0
   14ee8:	b	14ec0 <close_stdout@@Base+0x1b74>
   14eec:	mvn	r2, #0
   14ef0:	b	14ec0 <close_stdout@@Base+0x1b74>
   14ef4:	mov	r1, r0
   14ef8:	mov	r0, #0
   14efc:	b	14eec <close_stdout@@Base+0x1ba0>
   14f00:	push	{r4, r5, r6, r7, r8, lr}
   14f04:	mov	r8, #57344	; 0xe000
   14f08:	movt	r8, #32767	; 0x7fff
   14f0c:	mov	r7, r0
   14f10:	mov	r6, r1
   14f14:	mov	r4, r2
   14f18:	mov	r0, r7
   14f1c:	mov	r1, r6
   14f20:	mov	r2, r4
   14f24:	bl	10fbc <read@plt>
   14f28:	subs	r5, r0, #0
   14f2c:	bge	14f58 <close_stdout@@Base+0x1c0c>
   14f30:	bl	11160 <__errno_location@plt>
   14f34:	ldr	r3, [r0]
   14f38:	cmp	r3, #4
   14f3c:	beq	14f18 <close_stdout@@Base+0x1bcc>
   14f40:	cmp	r3, #22
   14f44:	bne	14f58 <close_stdout@@Base+0x1c0c>
   14f48:	cmp	r4, r8
   14f4c:	mov	r4, #57344	; 0xe000
   14f50:	movt	r4, #32767	; 0x7fff
   14f54:	bhi	14f18 <close_stdout@@Base+0x1bcc>
   14f58:	mov	r0, r5
   14f5c:	pop	{r4, r5, r6, r7, r8, pc}
   14f60:	push	{r4, r5, r6, r7, lr}
   14f64:	cmp	r1, #0
   14f68:	sub	sp, sp, #36	; 0x24
   14f6c:	ldr	r7, [pc, #896]	; 152f4 <close_stdout@@Base+0x1fa8>
   14f70:	mov	ip, r3
   14f74:	mov	r5, r0
   14f78:	add	r7, pc, r7
   14f7c:	ldr	r4, [sp, #56]	; 0x38
   14f80:	ldr	r6, [sp, #60]	; 0x3c
   14f84:	beq	152c8 <close_stdout@@Base+0x1f7c>
   14f88:	str	r2, [sp]
   14f8c:	mov	r3, r1
   14f90:	ldr	r2, [pc, #864]	; 152f8 <close_stdout@@Base+0x1fac>
   14f94:	mov	r1, #1
   14f98:	str	ip, [sp, #4]
   14f9c:	add	r2, pc, r2
   14fa0:	bl	111a8 <__fprintf_chk@plt>
   14fa4:	ldr	r1, [pc, #848]	; 152fc <close_stdout@@Base+0x1fb0>
   14fa8:	mov	r2, #5
   14fac:	mov	r0, #0
   14fb0:	add	r1, pc, r1
   14fb4:	bl	11028 <dcgettext@plt>
   14fb8:	ldr	r2, [pc, #832]	; 15300 <close_stdout@@Base+0x1fb4>
   14fbc:	movw	ip, #2013	; 0x7dd
   14fc0:	mov	r1, #1
   14fc4:	ldr	r2, [r7, r2]
   14fc8:	str	ip, [sp]
   14fcc:	mov	r3, r0
   14fd0:	mov	r0, r5
   14fd4:	bl	111a8 <__fprintf_chk@plt>
   14fd8:	ldr	r1, [pc, #804]	; 15304 <close_stdout@@Base+0x1fb8>
   14fdc:	mov	r0, #0
   14fe0:	mov	r2, #5
   14fe4:	add	r1, pc, r1
   14fe8:	bl	11028 <dcgettext@plt>
   14fec:	mov	r1, r5
   14ff0:	bl	10f98 <fputs_unlocked@plt>
   14ff4:	cmp	r6, #9
   14ff8:	addls	pc, pc, r6, lsl #2
   14ffc:	b	152e4 <close_stdout@@Base+0x1f98>
   15000:	b	15094 <close_stdout@@Base+0x1d48>
   15004:	b	15098 <close_stdout@@Base+0x1d4c>
   15008:	b	150c8 <close_stdout@@Base+0x1d7c>
   1500c:	b	150fc <close_stdout@@Base+0x1db0>
   15010:	b	15138 <close_stdout@@Base+0x1dec>
   15014:	b	15178 <close_stdout@@Base+0x1e2c>
   15018:	b	151c0 <close_stdout@@Base+0x1e74>
   1501c:	b	15210 <close_stdout@@Base+0x1ec4>
   15020:	b	15268 <close_stdout@@Base+0x1f1c>
   15024:	b	15028 <close_stdout@@Base+0x1cdc>
   15028:	ldr	r1, [pc, #728]	; 15308 <close_stdout@@Base+0x1fbc>
   1502c:	mov	r0, #0
   15030:	add	r1, pc, r1
   15034:	mov	r2, #5
   15038:	bl	11028 <dcgettext@plt>
   1503c:	ldm	r4, {r3, ip}
   15040:	mov	r1, #1
   15044:	str	ip, [sp]
   15048:	ldr	ip, [r4, #8]
   1504c:	str	ip, [sp, #4]
   15050:	ldr	ip, [r4, #12]
   15054:	str	ip, [sp, #8]
   15058:	ldr	ip, [r4, #16]
   1505c:	str	ip, [sp, #12]
   15060:	ldr	ip, [r4, #20]
   15064:	str	ip, [sp, #16]
   15068:	ldr	ip, [r4, #24]
   1506c:	str	ip, [sp, #20]
   15070:	ldr	ip, [r4, #28]
   15074:	str	ip, [sp, #24]
   15078:	ldr	ip, [r4, #32]
   1507c:	str	ip, [sp, #28]
   15080:	mov	r2, r0
   15084:	mov	r0, r5
   15088:	bl	111a8 <__fprintf_chk@plt>
   1508c:	add	sp, sp, #36	; 0x24
   15090:	pop	{r4, r5, r6, r7, pc}
   15094:	bl	11220 <abort@plt>
   15098:	ldr	r1, [pc, #620]	; 1530c <close_stdout@@Base+0x1fc0>
   1509c:	mov	r2, #5
   150a0:	mov	r0, #0
   150a4:	add	r1, pc, r1
   150a8:	bl	11028 <dcgettext@plt>
   150ac:	ldr	r3, [r4]
   150b0:	mov	r1, #1
   150b4:	mov	r2, r0
   150b8:	mov	r0, r5
   150bc:	add	sp, sp, #36	; 0x24
   150c0:	pop	{r4, r5, r6, r7, lr}
   150c4:	b	111a8 <__fprintf_chk@plt>
   150c8:	ldr	r1, [pc, #576]	; 15310 <close_stdout@@Base+0x1fc4>
   150cc:	mov	r2, #5
   150d0:	mov	r0, #0
   150d4:	add	r1, pc, r1
   150d8:	bl	11028 <dcgettext@plt>
   150dc:	ldm	r4, {r3, ip}
   150e0:	mov	r1, #1
   150e4:	str	ip, [sp, #56]	; 0x38
   150e8:	mov	r2, r0
   150ec:	mov	r0, r5
   150f0:	add	sp, sp, #36	; 0x24
   150f4:	pop	{r4, r5, r6, r7, lr}
   150f8:	b	111a8 <__fprintf_chk@plt>
   150fc:	ldr	r1, [pc, #528]	; 15314 <close_stdout@@Base+0x1fc8>
   15100:	mov	r2, #5
   15104:	mov	r0, #0
   15108:	add	r1, pc, r1
   1510c:	bl	11028 <dcgettext@plt>
   15110:	ldm	r4, {r3, ip}
   15114:	mov	r1, #1
   15118:	str	ip, [sp, #56]	; 0x38
   1511c:	ldr	ip, [r4, #8]
   15120:	str	ip, [sp, #60]	; 0x3c
   15124:	mov	r2, r0
   15128:	mov	r0, r5
   1512c:	add	sp, sp, #36	; 0x24
   15130:	pop	{r4, r5, r6, r7, lr}
   15134:	b	111a8 <__fprintf_chk@plt>
   15138:	ldr	r1, [pc, #472]	; 15318 <close_stdout@@Base+0x1fcc>
   1513c:	mov	r2, #5
   15140:	mov	r0, #0
   15144:	add	r1, pc, r1
   15148:	bl	11028 <dcgettext@plt>
   1514c:	ldm	r4, {r3, ip}
   15150:	mov	r1, #1
   15154:	str	ip, [sp]
   15158:	ldr	ip, [r4, #8]
   1515c:	str	ip, [sp, #4]
   15160:	ldr	ip, [r4, #12]
   15164:	str	ip, [sp, #8]
   15168:	mov	r2, r0
   1516c:	mov	r0, r5
   15170:	bl	111a8 <__fprintf_chk@plt>
   15174:	b	1508c <close_stdout@@Base+0x1d40>
   15178:	ldr	r1, [pc, #412]	; 1531c <close_stdout@@Base+0x1fd0>
   1517c:	mov	r2, #5
   15180:	mov	r0, #0
   15184:	add	r1, pc, r1
   15188:	bl	11028 <dcgettext@plt>
   1518c:	ldm	r4, {r3, ip}
   15190:	mov	r1, #1
   15194:	str	ip, [sp]
   15198:	ldr	ip, [r4, #8]
   1519c:	str	ip, [sp, #4]
   151a0:	ldr	ip, [r4, #12]
   151a4:	str	ip, [sp, #8]
   151a8:	ldr	ip, [r4, #16]
   151ac:	str	ip, [sp, #12]
   151b0:	mov	r2, r0
   151b4:	mov	r0, r5
   151b8:	bl	111a8 <__fprintf_chk@plt>
   151bc:	b	1508c <close_stdout@@Base+0x1d40>
   151c0:	ldr	r1, [pc, #344]	; 15320 <close_stdout@@Base+0x1fd4>
   151c4:	mov	r2, #5
   151c8:	mov	r0, #0
   151cc:	add	r1, pc, r1
   151d0:	bl	11028 <dcgettext@plt>
   151d4:	ldm	r4, {r3, ip}
   151d8:	mov	r1, #1
   151dc:	str	ip, [sp]
   151e0:	ldr	ip, [r4, #8]
   151e4:	str	ip, [sp, #4]
   151e8:	ldr	ip, [r4, #12]
   151ec:	str	ip, [sp, #8]
   151f0:	ldr	ip, [r4, #16]
   151f4:	str	ip, [sp, #12]
   151f8:	ldr	ip, [r4, #20]
   151fc:	str	ip, [sp, #16]
   15200:	mov	r2, r0
   15204:	mov	r0, r5
   15208:	bl	111a8 <__fprintf_chk@plt>
   1520c:	b	1508c <close_stdout@@Base+0x1d40>
   15210:	ldr	r1, [pc, #268]	; 15324 <close_stdout@@Base+0x1fd8>
   15214:	mov	r2, #5
   15218:	mov	r0, #0
   1521c:	add	r1, pc, r1
   15220:	bl	11028 <dcgettext@plt>
   15224:	ldm	r4, {r3, ip}
   15228:	mov	r1, #1
   1522c:	str	ip, [sp]
   15230:	ldr	ip, [r4, #8]
   15234:	str	ip, [sp, #4]
   15238:	ldr	ip, [r4, #12]
   1523c:	str	ip, [sp, #8]
   15240:	ldr	ip, [r4, #16]
   15244:	str	ip, [sp, #12]
   15248:	ldr	ip, [r4, #20]
   1524c:	str	ip, [sp, #16]
   15250:	ldr	ip, [r4, #24]
   15254:	str	ip, [sp, #20]
   15258:	mov	r2, r0
   1525c:	mov	r0, r5
   15260:	bl	111a8 <__fprintf_chk@plt>
   15264:	b	1508c <close_stdout@@Base+0x1d40>
   15268:	ldr	r1, [pc, #184]	; 15328 <close_stdout@@Base+0x1fdc>
   1526c:	mov	r2, #5
   15270:	mov	r0, #0
   15274:	add	r1, pc, r1
   15278:	bl	11028 <dcgettext@plt>
   1527c:	ldm	r4, {r3, ip}
   15280:	mov	r1, #1
   15284:	str	ip, [sp]
   15288:	ldr	ip, [r4, #8]
   1528c:	str	ip, [sp, #4]
   15290:	ldr	ip, [r4, #12]
   15294:	str	ip, [sp, #8]
   15298:	ldr	ip, [r4, #16]
   1529c:	str	ip, [sp, #12]
   152a0:	ldr	ip, [r4, #20]
   152a4:	str	ip, [sp, #16]
   152a8:	ldr	ip, [r4, #24]
   152ac:	str	ip, [sp, #20]
   152b0:	ldr	ip, [r4, #28]
   152b4:	str	ip, [sp, #24]
   152b8:	mov	r2, r0
   152bc:	mov	r0, r5
   152c0:	bl	111a8 <__fprintf_chk@plt>
   152c4:	b	1508c <close_stdout@@Base+0x1d40>
   152c8:	str	r3, [sp]
   152cc:	mov	r3, r2
   152d0:	ldr	r2, [pc, #84]	; 1532c <close_stdout@@Base+0x1fe0>
   152d4:	mov	r1, #1
   152d8:	add	r2, pc, r2
   152dc:	bl	111a8 <__fprintf_chk@plt>
   152e0:	b	14fa4 <close_stdout@@Base+0x1c58>
   152e4:	ldr	r1, [pc, #68]	; 15330 <close_stdout@@Base+0x1fe4>
   152e8:	mov	r0, #0
   152ec:	add	r1, pc, r1
   152f0:	b	15034 <close_stdout@@Base+0x1ce8>
   152f4:	andeq	r4, r1, r0, lsl #1
   152f8:	andeq	r2, r0, r8, asr #21
   152fc:	andeq	r2, r0, r8, asr #21
   15300:	andeq	r0, r0, r8, lsr #2
   15304:	muleq	r0, r8, sl
   15308:	andeq	r2, r0, r4, lsr #24
   1530c:	andeq	r2, r0, r4, lsr #21
   15310:	andeq	r2, r0, r4, lsl #21
   15314:	andeq	r2, r0, r8, ror #20
   15318:	andeq	r2, r0, r8, asr #20
   1531c:	andeq	r2, r0, r8, lsr #20
   15320:	andeq	r2, r0, r4, lsl #20
   15324:	ldrdeq	r2, [r0], -ip
   15328:			; <UNDEFINED> instruction: 0x000029b0
   1532c:	muleq	r0, r8, r7
   15330:	muleq	r0, ip, r9
   15334:	push	{r4, r5, lr}
   15338:	sub	sp, sp, #12
   1533c:	ldr	r5, [sp, #24]
   15340:	ldr	ip, [r5]
   15344:	cmp	ip, #0
   15348:	beq	15364 <close_stdout@@Base+0x2018>
   1534c:	mov	lr, r5
   15350:	mov	ip, #0
   15354:	ldr	r4, [lr, #4]!
   15358:	add	ip, ip, #1
   1535c:	cmp	r4, #0
   15360:	bne	15354 <close_stdout@@Base+0x2008>
   15364:	stm	sp, {r5, ip}
   15368:	bl	14f60 <close_stdout@@Base+0x1c14>
   1536c:	add	sp, sp, #12
   15370:	pop	{r4, r5, pc}
   15374:	push	{r4, r5, r6, r7, lr}
   15378:	sub	sp, sp, #60	; 0x3c
   1537c:	ldr	r4, [pc, #100]	; 153e8 <close_stdout@@Base+0x209c>
   15380:	mov	ip, #0
   15384:	ldr	r5, [pc, #96]	; 153ec <close_stdout@@Base+0x20a0>
   15388:	mov	lr, ip
   1538c:	add	r4, pc, r4
   15390:	ldr	r6, [sp, #80]	; 0x50
   15394:	ldr	r7, [r4, r5]
   15398:	add	r5, sp, #12
   1539c:	ldr	r4, [r7]
   153a0:	str	r4, [sp, #52]	; 0x34
   153a4:	ldr	r4, [r6, ip]
   153a8:	cmp	r4, #0
   153ac:	str	r4, [r5, ip]
   153b0:	beq	153c4 <close_stdout@@Base+0x2078>
   153b4:	add	lr, lr, #1
   153b8:	add	ip, ip, #4
   153bc:	cmp	lr, #10
   153c0:	bne	153a4 <close_stdout@@Base+0x2058>
   153c4:	stm	sp, {r5, lr}
   153c8:	bl	14f60 <close_stdout@@Base+0x1c14>
   153cc:	ldr	r2, [sp, #52]	; 0x34
   153d0:	ldr	r3, [r7]
   153d4:	cmp	r2, r3
   153d8:	bne	153e4 <close_stdout@@Base+0x2098>
   153dc:	add	sp, sp, #60	; 0x3c
   153e0:	pop	{r4, r5, r6, r7, pc}
   153e4:	bl	11034 <__stack_chk_fail@plt>
   153e8:	andeq	r3, r1, ip, ror #24
   153ec:	strdeq	r0, [r0], -ip
   153f0:	push	{r3}		; (str r3, [sp, #-4]!)
   153f4:	push	{r4, lr}
   153f8:	sub	sp, sp, #20
   153fc:	ldr	lr, [pc, #72]	; 1544c <close_stdout@@Base+0x2100>
   15400:	add	ip, sp, #32
   15404:	ldr	r4, [pc, #68]	; 15450 <close_stdout@@Base+0x2104>
   15408:	add	lr, pc, lr
   1540c:	ldr	r3, [sp, #28]
   15410:	ldr	r4, [lr, r4]
   15414:	str	ip, [sp]
   15418:	str	ip, [sp, #8]
   1541c:	ldr	ip, [r4]
   15420:	str	ip, [sp, #12]
   15424:	bl	15374 <close_stdout@@Base+0x2028>
   15428:	ldr	r2, [sp, #12]
   1542c:	ldr	r3, [r4]
   15430:	cmp	r2, r3
   15434:	bne	15448 <close_stdout@@Base+0x20fc>
   15438:	add	sp, sp, #20
   1543c:	pop	{r4, lr}
   15440:	add	sp, sp, #4
   15444:	bx	lr
   15448:	bl	11034 <__stack_chk_fail@plt>
   1544c:	strdeq	r3, [r1], -r0
   15450:	strdeq	r0, [r0], -ip
   15454:	ldr	r1, [pc, #132]	; 154e0 <close_stdout@@Base+0x2194>
   15458:	mov	r2, #5
   1545c:	push	{r4, lr}
   15460:	add	r1, pc, r1
   15464:	mov	r0, #0
   15468:	ldr	r4, [pc, #116]	; 154e4 <close_stdout@@Base+0x2198>
   1546c:	bl	11028 <dcgettext@plt>
   15470:	ldr	r2, [pc, #112]	; 154e8 <close_stdout@@Base+0x219c>
   15474:	add	r4, pc, r4
   15478:	add	r2, pc, r2
   1547c:	mov	r1, r0
   15480:	mov	r0, #1
   15484:	bl	11190 <__printf_chk@plt>
   15488:	ldr	r1, [pc, #92]	; 154ec <close_stdout@@Base+0x21a0>
   1548c:	mov	r2, #5
   15490:	mov	r0, #0
   15494:	add	r1, pc, r1
   15498:	bl	11028 <dcgettext@plt>
   1549c:	ldr	r2, [pc, #76]	; 154f0 <close_stdout@@Base+0x21a4>
   154a0:	ldr	r3, [pc, #76]	; 154f4 <close_stdout@@Base+0x21a8>
   154a4:	add	r2, pc, r2
   154a8:	add	r3, pc, r3
   154ac:	mov	r1, r0
   154b0:	mov	r0, #1
   154b4:	bl	11190 <__printf_chk@plt>
   154b8:	ldr	r1, [pc, #56]	; 154f8 <close_stdout@@Base+0x21ac>
   154bc:	mov	r0, #0
   154c0:	mov	r2, #5
   154c4:	add	r1, pc, r1
   154c8:	bl	11028 <dcgettext@plt>
   154cc:	ldr	r3, [pc, #40]	; 154fc <close_stdout@@Base+0x21b0>
   154d0:	ldr	r3, [r4, r3]
   154d4:	pop	{r4, lr}
   154d8:	ldr	r1, [r3]
   154dc:	b	10f98 <fputs_unlocked@plt>
   154e0:	andeq	r2, r0, r4, ror #16
   154e4:	andeq	r3, r1, r4, lsl #23
   154e8:	andeq	r2, r0, r4, ror #16
   154ec:	andeq	r2, r0, r0, ror #16
   154f0:	andeq	r2, r0, r0, asr #5
   154f4:	andeq	r2, r0, ip, asr #5
   154f8:	andeq	r2, r0, r4, asr #16
   154fc:	andeq	r0, r0, r8, lsl r1
   15500:	push	{r4, lr}
   15504:	mov	r4, r0
   15508:	bl	110dc <malloc@plt>
   1550c:	rsbs	r3, r0, #1
   15510:	movcc	r3, #0
   15514:	cmp	r4, #0
   15518:	moveq	r3, #0
   1551c:	cmp	r3, #0
   15520:	popeq	{r4, pc}
   15524:	bl	15714 <close_stdout@@Base+0x23c8>
   15528:	push	{r3, r4, r5, lr}
   1552c:	mov	r4, r0
   15530:	mvn	r0, #0
   15534:	mov	r5, r1
   15538:	bl	1650c <close_stdout@@Base+0x31c0>
   1553c:	cmp	r0, r4
   15540:	bcc	15550 <close_stdout@@Base+0x2204>
   15544:	mul	r0, r4, r5
   15548:	pop	{r3, r4, r5, lr}
   1554c:	b	15500 <close_stdout@@Base+0x21b4>
   15550:	bl	15714 <close_stdout@@Base+0x23c8>
   15554:	b	15500 <close_stdout@@Base+0x21b4>
   15558:	rsbs	r3, r1, #1
   1555c:	push	{r4, lr}
   15560:	movcc	r3, #0
   15564:	cmp	r0, #0
   15568:	mov	r4, r1
   1556c:	moveq	r3, #0
   15570:	cmp	r3, #0
   15574:	bne	15598 <close_stdout@@Base+0x224c>
   15578:	bl	11040 <realloc@plt>
   1557c:	rsbs	r3, r0, #1
   15580:	movcc	r3, #0
   15584:	cmp	r4, #0
   15588:	moveq	r3, #0
   1558c:	cmp	r3, #0
   15590:	popeq	{r4, pc}
   15594:	bl	15714 <close_stdout@@Base+0x23c8>
   15598:	bl	10fd4 <free@plt>
   1559c:	mov	r0, #0
   155a0:	pop	{r4, pc}
   155a4:	push	{r4, r5, r6, lr}
   155a8:	mov	r5, r1
   155ac:	mov	r6, r0
   155b0:	mov	r1, r2
   155b4:	mvn	r0, #0
   155b8:	mov	r4, r2
   155bc:	bl	1650c <close_stdout@@Base+0x31c0>
   155c0:	cmp	r0, r5
   155c4:	bcc	155d8 <close_stdout@@Base+0x228c>
   155c8:	mov	r0, r6
   155cc:	mul	r1, r5, r4
   155d0:	pop	{r4, r5, r6, lr}
   155d4:	b	15558 <close_stdout@@Base+0x220c>
   155d8:	bl	15714 <close_stdout@@Base+0x23c8>
   155dc:	push	{r3, r4, r5, r6, r7, lr}
   155e0:	subs	r7, r0, #0
   155e4:	mov	r5, r1
   155e8:	mov	r6, r2
   155ec:	ldr	r4, [r1]
   155f0:	beq	15628 <close_stdout@@Base+0x22dc>
   155f4:	movw	r0, #43690	; 0xaaaa
   155f8:	mov	r1, r2
   155fc:	bfi	r0, r0, #16, #16
   15600:	bl	1650c <close_stdout@@Base+0x31c0>
   15604:	cmp	r4, r0
   15608:	addcc	r3, r4, #1
   1560c:	addcc	r4, r4, r3, lsr #1
   15610:	bcs	1564c <close_stdout@@Base+0x2300>
   15614:	str	r4, [r5]
   15618:	mov	r0, r7
   1561c:	mul	r1, r6, r4
   15620:	pop	{r3, r4, r5, r6, r7, lr}
   15624:	b	15558 <close_stdout@@Base+0x220c>
   15628:	cmp	r4, #0
   1562c:	bne	15614 <close_stdout@@Base+0x22c8>
   15630:	mov	r0, #64	; 0x40
   15634:	mov	r1, r2
   15638:	bl	1650c <close_stdout@@Base+0x31c0>
   1563c:	cmp	r0, #0
   15640:	movne	r4, r0
   15644:	addeq	r4, r0, #1
   15648:	b	15614 <close_stdout@@Base+0x22c8>
   1564c:	bl	15714 <close_stdout@@Base+0x23c8>
   15650:	cmp	r0, #0
   15654:	push	{r3, lr}
   15658:	ldr	r3, [r1]
   1565c:	beq	15688 <close_stdout@@Base+0x233c>
   15660:	movw	r2, #43689	; 0xaaa9
   15664:	movt	r2, #43690	; 0xaaaa
   15668:	cmp	r3, r2
   1566c:	addls	r2, r3, #1
   15670:	addls	r3, r3, r2, lsr #1
   15674:	bhi	156a0 <close_stdout@@Base+0x2354>
   15678:	str	r3, [r1]
   1567c:	mov	r1, r3
   15680:	pop	{r3, lr}
   15684:	b	15558 <close_stdout@@Base+0x220c>
   15688:	cmp	r3, #0
   1568c:	moveq	r3, #64	; 0x40
   15690:	str	r3, [r1]
   15694:	mov	r1, r3
   15698:	pop	{r3, lr}
   1569c:	b	15558 <close_stdout@@Base+0x220c>
   156a0:	bl	15714 <close_stdout@@Base+0x23c8>
   156a4:	push	{r4, lr}
   156a8:	mov	r4, r0
   156ac:	bl	15500 <close_stdout@@Base+0x21b4>
   156b0:	mov	r2, r4
   156b4:	mov	r1, #0
   156b8:	pop	{r4, lr}
   156bc:	b	11178 <memset@plt>
   156c0:	push	{r3, lr}
   156c4:	bl	10f8c <calloc@plt>
   156c8:	cmp	r0, #0
   156cc:	popne	{r3, pc}
   156d0:	bl	15714 <close_stdout@@Base+0x23c8>
   156d4:	push	{r3, r4, r5, lr}
   156d8:	mov	r4, r1
   156dc:	mov	r5, r0
   156e0:	mov	r0, r1
   156e4:	bl	15500 <close_stdout@@Base+0x21b4>
   156e8:	mov	r1, r5
   156ec:	mov	r2, r4
   156f0:	pop	{r3, r4, r5, lr}
   156f4:	b	10fec <memcpy@plt>
   156f8:	push	{r4, lr}
   156fc:	mov	r4, r0
   15700:	bl	11130 <strlen@plt>
   15704:	add	r1, r0, #1
   15708:	mov	r0, r4
   1570c:	pop	{r4, lr}
   15710:	b	156d4 <close_stdout@@Base+0x2388>
   15714:	ldr	r3, [pc, #64]	; 1575c <close_stdout@@Base+0x2410>
   15718:	mov	r2, #5
   1571c:	ldr	ip, [pc, #60]	; 15760 <close_stdout@@Base+0x2414>
   15720:	mov	r0, #0
   15724:	add	r3, pc, r3
   15728:	ldr	r1, [pc, #52]	; 15764 <close_stdout@@Base+0x2418>
   1572c:	push	{r4, lr}
   15730:	add	r1, pc, r1
   15734:	ldr	r3, [r3, ip]
   15738:	ldr	r4, [r3]
   1573c:	bl	11028 <dcgettext@plt>
   15740:	ldr	r2, [pc, #32]	; 15768 <close_stdout@@Base+0x241c>
   15744:	mov	r1, #0
   15748:	add	r2, pc, r2
   1574c:	mov	r3, r0
   15750:	mov	r0, r4
   15754:	bl	110b8 <error@plt>
   15758:	bl	11220 <abort@plt>
   1575c:	ldrdeq	r3, [r1], -r4
   15760:	andeq	r0, r0, ip, lsl r1
   15764:	andeq	r2, r0, r8, asr #12
   15768:	andeq	r1, r0, r8, lsr #21
   1576c:	ldr	ip, [pc, #1852]	; 15eb0 <close_stdout@@Base+0x2b64>
   15770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15774:	mov	fp, r2
   15778:	ldr	r2, [pc, #1844]	; 15eb4 <close_stdout@@Base+0x2b68>
   1577c:	add	ip, pc, ip
   15780:	mov	r9, r3
   15784:	sub	sp, sp, #36	; 0x24
   15788:	mov	r3, ip
   1578c:	cmp	fp, #36	; 0x24
   15790:	ldr	sl, [ip, r2]
   15794:	mov	r5, r0
   15798:	mov	r8, r1
   1579c:	ldr	r6, [sp, #72]	; 0x48
   157a0:	ldr	r3, [sl]
   157a4:	str	r3, [sp, #28]
   157a8:	bhi	15e90 <close_stdout@@Base+0x2b44>
   157ac:	cmp	r1, #0
   157b0:	addeq	r8, sp, #24
   157b4:	bl	11118 <__ctype_b_loc@plt>
   157b8:	ldrb	r3, [r5]
   157bc:	mov	r1, r5
   157c0:	ldr	r0, [r0]
   157c4:	b	157cc <close_stdout@@Base+0x2480>
   157c8:	ldrb	r3, [r1, #1]!
   157cc:	lsl	r2, r3, #1
   157d0:	ldrh	r4, [r0, r2]
   157d4:	and	r4, r4, #8192	; 0x2000
   157d8:	uxth	r4, r4
   157dc:	cmp	r4, #0
   157e0:	bne	157c8 <close_stdout@@Base+0x247c>
   157e4:	cmp	r3, #45	; 0x2d
   157e8:	bne	15808 <close_stdout@@Base+0x24bc>
   157ec:	mov	r0, #4
   157f0:	ldr	r2, [sp, #28]
   157f4:	ldr	r3, [sl]
   157f8:	cmp	r2, r3
   157fc:	bne	15e8c <close_stdout@@Base+0x2b40>
   15800:	add	sp, sp, #36	; 0x24
   15804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15808:	bl	11160 <__errno_location@plt>
   1580c:	mov	r2, fp
   15810:	mov	r1, r8
   15814:	mov	r3, r4
   15818:	str	r4, [r0]
   1581c:	mov	r7, r0
   15820:	mov	r0, r5
   15824:	bl	10ff8 <__strtoull_internal@plt>
   15828:	ldr	fp, [r8]
   1582c:	cmp	fp, r5
   15830:	strd	r0, [sp]
   15834:	beq	159b0 <close_stdout@@Base+0x2664>
   15838:	ldr	ip, [r7]
   1583c:	cmp	ip, #0
   15840:	bne	1586c <close_stdout@@Base+0x2520>
   15844:	mov	r7, ip
   15848:	cmp	r6, #0
   1584c:	beq	15e1c <close_stdout@@Base+0x2ad0>
   15850:	ldrb	r5, [fp]
   15854:	cmp	r5, #0
   15858:	bne	1587c <close_stdout@@Base+0x2530>
   1585c:	ldrd	r2, [sp]
   15860:	mov	r0, r7
   15864:	strd	r2, [r9]
   15868:	b	157f0 <close_stdout@@Base+0x24a4>
   1586c:	cmp	ip, #34	; 0x22
   15870:	moveq	r7, #1
   15874:	bne	157ec <close_stdout@@Base+0x24a0>
   15878:	b	15848 <close_stdout@@Base+0x24fc>
   1587c:	mov	r0, r6
   15880:	mov	r1, r5
   15884:	bl	1113c <strchr@plt>
   15888:	cmp	r0, #0
   1588c:	beq	159ec <close_stdout@@Base+0x26a0>
   15890:	mov	r0, r6
   15894:	mov	r1, #48	; 0x30
   15898:	bl	1113c <strchr@plt>
   1589c:	cmp	r0, #0
   158a0:	beq	158c0 <close_stdout@@Base+0x2574>
   158a4:	ldrb	r3, [fp, #1]
   158a8:	cmp	r3, #68	; 0x44
   158ac:	beq	15e44 <close_stdout@@Base+0x2af8>
   158b0:	cmp	r3, #105	; 0x69
   158b4:	beq	15e2c <close_stdout@@Base+0x2ae0>
   158b8:	cmp	r3, #66	; 0x42
   158bc:	beq	15e44 <close_stdout@@Base+0x2af8>
   158c0:	mov	r6, #1
   158c4:	mov	r4, #1024	; 0x400
   158c8:	sub	r5, r5, #66	; 0x42
   158cc:	cmp	r5, #53	; 0x35
   158d0:	addls	pc, pc, r5, lsl #2
   158d4:	b	159ec <close_stdout@@Base+0x26a0>
   158d8:	b	15c94 <close_stdout@@Base+0x2948>
   158dc:	b	159ec <close_stdout@@Base+0x26a0>
   158e0:	b	159ec <close_stdout@@Base+0x26a0>
   158e4:	b	15c28 <close_stdout@@Base+0x28dc>
   158e8:	b	159ec <close_stdout@@Base+0x26a0>
   158ec:	b	15bbc <close_stdout@@Base+0x2870>
   158f0:	b	159ec <close_stdout@@Base+0x26a0>
   158f4:	b	159ec <close_stdout@@Base+0x26a0>
   158f8:	b	159ec <close_stdout@@Base+0x26a0>
   158fc:	b	15b64 <close_stdout@@Base+0x2818>
   15900:	b	159ec <close_stdout@@Base+0x26a0>
   15904:	b	15d3c <close_stdout@@Base+0x29f0>
   15908:	b	159ec <close_stdout@@Base+0x26a0>
   1590c:	b	159ec <close_stdout@@Base+0x26a0>
   15910:	b	15cd0 <close_stdout@@Base+0x2984>
   15914:	b	159ec <close_stdout@@Base+0x26a0>
   15918:	b	159ec <close_stdout@@Base+0x26a0>
   1591c:	b	159ec <close_stdout@@Base+0x26a0>
   15920:	b	15db0 <close_stdout@@Base+0x2a64>
   15924:	b	159ec <close_stdout@@Base+0x26a0>
   15928:	b	159ec <close_stdout@@Base+0x26a0>
   1592c:	b	159ec <close_stdout@@Base+0x26a0>
   15930:	b	159ec <close_stdout@@Base+0x26a0>
   15934:	b	15af8 <close_stdout@@Base+0x27ac>
   15938:	b	15a80 <close_stdout@@Base+0x2734>
   1593c:	b	159ec <close_stdout@@Base+0x26a0>
   15940:	b	159ec <close_stdout@@Base+0x26a0>
   15944:	b	159ec <close_stdout@@Base+0x26a0>
   15948:	b	159ec <close_stdout@@Base+0x26a0>
   1594c:	b	159ec <close_stdout@@Base+0x26a0>
   15950:	b	159ec <close_stdout@@Base+0x26a0>
   15954:	b	159ec <close_stdout@@Base+0x26a0>
   15958:	b	15a44 <close_stdout@@Base+0x26f8>
   1595c:	b	159fc <close_stdout@@Base+0x26b0>
   15960:	b	159ec <close_stdout@@Base+0x26a0>
   15964:	b	159ec <close_stdout@@Base+0x26a0>
   15968:	b	159ec <close_stdout@@Base+0x26a0>
   1596c:	b	15bbc <close_stdout@@Base+0x2870>
   15970:	b	159ec <close_stdout@@Base+0x26a0>
   15974:	b	159ec <close_stdout@@Base+0x26a0>
   15978:	b	159ec <close_stdout@@Base+0x26a0>
   1597c:	b	15b64 <close_stdout@@Base+0x2818>
   15980:	b	159ec <close_stdout@@Base+0x26a0>
   15984:	b	15d3c <close_stdout@@Base+0x29f0>
   15988:	b	159ec <close_stdout@@Base+0x26a0>
   1598c:	b	159ec <close_stdout@@Base+0x26a0>
   15990:	b	159ec <close_stdout@@Base+0x26a0>
   15994:	b	159ec <close_stdout@@Base+0x26a0>
   15998:	b	159ec <close_stdout@@Base+0x26a0>
   1599c:	b	159ec <close_stdout@@Base+0x26a0>
   159a0:	b	15db0 <close_stdout@@Base+0x2a64>
   159a4:	b	159ec <close_stdout@@Base+0x26a0>
   159a8:	b	159ec <close_stdout@@Base+0x26a0>
   159ac:	b	15a1c <close_stdout@@Base+0x26d0>
   159b0:	cmp	r6, #0
   159b4:	beq	157ec <close_stdout@@Base+0x24a0>
   159b8:	ldrb	r5, [r5]
   159bc:	cmp	r5, #0
   159c0:	beq	157ec <close_stdout@@Base+0x24a0>
   159c4:	mov	r0, r6
   159c8:	mov	r1, r5
   159cc:	bl	1113c <strchr@plt>
   159d0:	cmp	r0, #0
   159d4:	beq	157ec <close_stdout@@Base+0x24a0>
   159d8:	mov	r0, #1
   159dc:	mov	r1, #0
   159e0:	mov	r7, r4
   159e4:	strd	r0, [sp]
   159e8:	b	15890 <close_stdout@@Base+0x2544>
   159ec:	ldrd	r2, [sp]
   159f0:	orr	r0, r7, #2
   159f4:	strd	r2, [r9]
   159f8:	b	157f0 <close_stdout@@Base+0x24a4>
   159fc:	mov	r3, #0
   15a00:	add	r2, fp, r6
   15a04:	str	r2, [r8]
   15a08:	ldrb	r2, [fp, r6]
   15a0c:	orr	r7, r7, r3
   15a10:	cmp	r2, #0
   15a14:	orrne	r7, r7, #2
   15a18:	b	1585c <close_stdout@@Base+0x2510>
   15a1c:	ldrd	r2, [sp]
   15a20:	cmp	r2, #0
   15a24:	sbcs	r3, r3, #0
   15a28:	blt	15e64 <close_stdout@@Base+0x2b18>
   15a2c:	ldrd	r0, [sp]
   15a30:	mov	r3, #0
   15a34:	adds	r0, r0, r0
   15a38:	adc	r1, r1, r1
   15a3c:	strd	r0, [sp]
   15a40:	b	15a00 <close_stdout@@Base+0x26b4>
   15a44:	ldrd	r0, [sp]
   15a48:	movw	r3, #65535	; 0xffff
   15a4c:	movt	r3, #127	; 0x7f
   15a50:	mvn	r2, #0
   15a54:	cmp	r1, r3
   15a58:	cmpeq	r0, r2
   15a5c:	bhi	15e64 <close_stdout@@Base+0x2b18>
   15a60:	lsl	r2, r1, #9
   15a64:	ldr	r1, [sp]
   15a68:	lsl	r3, r0, #9
   15a6c:	str	r3, [sp]
   15a70:	mov	r3, #0
   15a74:	orr	r2, r2, r1, lsr #23
   15a78:	str	r2, [sp, #4]
   15a7c:	b	15a00 <close_stdout@@Base+0x26b4>
   15a80:	asr	r5, r4, #31
   15a84:	mov	r2, r4
   15a88:	mvn	r0, #0
   15a8c:	mvn	r1, #0
   15a90:	mov	r3, r5
   15a94:	bl	16760 <close_stdout@@Base+0x3414>
   15a98:	mov	ip, r7
   15a9c:	str	r6, [sp, #20]
   15aa0:	mov	r2, #7
   15aa4:	ldrd	r6, [sp]
   15aa8:	mov	r3, #0
   15aac:	strd	r0, [sp, #8]
   15ab0:	ldrd	r0, [sp, #8]
   15ab4:	cmp	r1, r7
   15ab8:	cmpeq	r0, r6
   15abc:	mulcs	r0, r6, r5
   15ac0:	movcs	r1, #0
   15ac4:	mlacs	r0, r4, r7, r0
   15ac8:	movcc	r1, #1
   15acc:	umullcs	r6, r7, r6, r4
   15ad0:	mvncc	r6, #0
   15ad4:	mvncc	r7, #0
   15ad8:	orr	r3, r3, r1
   15adc:	addcs	r7, r0, r7
   15ae0:	subs	r2, r2, #1
   15ae4:	bne	15ab0 <close_stdout@@Base+0x2764>
   15ae8:	strd	r6, [sp]
   15aec:	mov	r7, ip
   15af0:	ldr	r6, [sp, #20]
   15af4:	b	15a00 <close_stdout@@Base+0x26b4>
   15af8:	asr	r5, r4, #31
   15afc:	mov	r2, r4
   15b00:	mvn	r0, #0
   15b04:	mvn	r1, #0
   15b08:	mov	r3, r5
   15b0c:	bl	16760 <close_stdout@@Base+0x3414>
   15b10:	mov	ip, r7
   15b14:	str	r6, [sp, #20]
   15b18:	mov	r2, #8
   15b1c:	ldrd	r6, [sp]
   15b20:	mov	r3, #0
   15b24:	strd	r0, [sp, #8]
   15b28:	ldrd	r0, [sp, #8]
   15b2c:	cmp	r1, r7
   15b30:	cmpeq	r0, r6
   15b34:	mulcs	r0, r6, r5
   15b38:	movcs	r1, #0
   15b3c:	mlacs	r0, r4, r7, r0
   15b40:	movcc	r1, #1
   15b44:	umullcs	r6, r7, r6, r4
   15b48:	mvncc	r6, #0
   15b4c:	mvncc	r7, #0
   15b50:	orr	r3, r3, r1
   15b54:	addcs	r7, r0, r7
   15b58:	subs	r2, r2, #1
   15b5c:	bne	15b28 <close_stdout@@Base+0x27dc>
   15b60:	b	15ae8 <close_stdout@@Base+0x279c>
   15b64:	mov	r2, r4
   15b68:	asr	r3, r4, #31
   15b6c:	mvn	r0, #0
   15b70:	mvn	r1, #0
   15b74:	strd	r2, [sp, #8]
   15b78:	bl	16760 <close_stdout@@Base+0x3414>
   15b7c:	ldrd	r2, [sp]
   15b80:	cmp	r3, r1
   15b84:	cmpeq	r2, r0
   15b88:	bhi	15e50 <close_stdout@@Base+0x2b04>
   15b8c:	ldr	r3, [sp]
   15b90:	ldr	ip, [sp, #12]
   15b94:	ldr	r0, [sp, #4]
   15b98:	ldr	r1, [sp]
   15b9c:	mul	r2, r3, ip
   15ba0:	mov	r3, #0
   15ba4:	mla	r2, r4, r0, r2
   15ba8:	umull	r0, r1, r1, r4
   15bac:	add	r2, r2, r1
   15bb0:	strd	r0, [sp]
   15bb4:	str	r2, [sp, #4]
   15bb8:	b	15a00 <close_stdout@@Base+0x26b4>
   15bbc:	asr	r5, r4, #31
   15bc0:	mov	r2, r4
   15bc4:	mvn	r0, #0
   15bc8:	mvn	r1, #0
   15bcc:	mov	r3, r5
   15bd0:	bl	16760 <close_stdout@@Base+0x3414>
   15bd4:	mov	ip, r7
   15bd8:	str	r6, [sp, #20]
   15bdc:	mov	r2, #3
   15be0:	ldrd	r6, [sp]
   15be4:	mov	r3, #0
   15be8:	strd	r0, [sp, #8]
   15bec:	ldrd	r0, [sp, #8]
   15bf0:	cmp	r1, r7
   15bf4:	cmpeq	r0, r6
   15bf8:	mulcs	r0, r6, r5
   15bfc:	movcs	r1, #0
   15c00:	mlacs	r0, r4, r7, r0
   15c04:	movcc	r1, #1
   15c08:	umullcs	r6, r7, r6, r4
   15c0c:	mvncc	r6, #0
   15c10:	mvncc	r7, #0
   15c14:	orr	r3, r3, r1
   15c18:	addcs	r7, r0, r7
   15c1c:	subs	r2, r2, #1
   15c20:	bne	15bec <close_stdout@@Base+0x28a0>
   15c24:	b	15ae8 <close_stdout@@Base+0x279c>
   15c28:	asr	r5, r4, #31
   15c2c:	mov	r2, r4
   15c30:	mvn	r0, #0
   15c34:	mvn	r1, #0
   15c38:	mov	r3, r5
   15c3c:	bl	16760 <close_stdout@@Base+0x3414>
   15c40:	mov	ip, r7
   15c44:	str	r6, [sp, #20]
   15c48:	mov	r2, #6
   15c4c:	ldrd	r6, [sp]
   15c50:	mov	r3, #0
   15c54:	strd	r0, [sp, #8]
   15c58:	ldrd	r0, [sp, #8]
   15c5c:	cmp	r1, r7
   15c60:	cmpeq	r0, r6
   15c64:	mulcs	r0, r6, r5
   15c68:	movcs	r1, #0
   15c6c:	mlacs	r0, r4, r7, r0
   15c70:	movcc	r1, #1
   15c74:	umullcs	r6, r7, r6, r4
   15c78:	mvncc	r6, #0
   15c7c:	mvncc	r7, #0
   15c80:	orr	r3, r3, r1
   15c84:	addcs	r7, r0, r7
   15c88:	subs	r2, r2, #1
   15c8c:	bne	15c58 <close_stdout@@Base+0x290c>
   15c90:	b	15ae8 <close_stdout@@Base+0x279c>
   15c94:	ldrd	r0, [sp]
   15c98:	movw	r3, #65535	; 0xffff
   15c9c:	movt	r3, #63	; 0x3f
   15ca0:	mvn	r2, #0
   15ca4:	cmp	r1, r3
   15ca8:	cmpeq	r0, r2
   15cac:	bhi	15e50 <close_stdout@@Base+0x2b04>
   15cb0:	lsl	r2, r1, #10
   15cb4:	ldr	r1, [sp]
   15cb8:	lsl	r3, r0, #10
   15cbc:	str	r3, [sp]
   15cc0:	mov	r3, #0
   15cc4:	orr	r2, r2, r1, lsr #22
   15cc8:	str	r2, [sp, #4]
   15ccc:	b	15a00 <close_stdout@@Base+0x26b4>
   15cd0:	asr	r5, r4, #31
   15cd4:	mov	r2, r4
   15cd8:	mvn	r0, #0
   15cdc:	mvn	r1, #0
   15ce0:	mov	r3, r5
   15ce4:	bl	16760 <close_stdout@@Base+0x3414>
   15ce8:	mov	ip, r7
   15cec:	str	r6, [sp, #20]
   15cf0:	mov	r2, #5
   15cf4:	ldrd	r6, [sp]
   15cf8:	mov	r3, #0
   15cfc:	strd	r0, [sp, #8]
   15d00:	ldrd	r0, [sp, #8]
   15d04:	cmp	r1, r7
   15d08:	cmpeq	r0, r6
   15d0c:	mulcs	r0, r6, r5
   15d10:	movcs	r1, #0
   15d14:	mlacs	r0, r4, r7, r0
   15d18:	movcc	r1, #1
   15d1c:	umullcs	r6, r7, r6, r4
   15d20:	mvncc	r6, #0
   15d24:	mvncc	r7, #0
   15d28:	orr	r3, r3, r1
   15d2c:	addcs	r7, r0, r7
   15d30:	subs	r2, r2, #1
   15d34:	bne	15d00 <close_stdout@@Base+0x29b4>
   15d38:	b	15ae8 <close_stdout@@Base+0x279c>
   15d3c:	mov	r2, r4
   15d40:	asr	r3, r4, #31
   15d44:	mvn	r0, #0
   15d48:	mvn	r1, #0
   15d4c:	strd	r2, [sp, #8]
   15d50:	bl	16760 <close_stdout@@Base+0x3414>
   15d54:	ldrd	r2, [sp]
   15d58:	cmp	r3, r1
   15d5c:	cmpeq	r2, r0
   15d60:	bhi	15e78 <close_stdout@@Base+0x2b2c>
   15d64:	ldr	ip, [sp, #4]
   15d68:	mul	r3, r4, ip
   15d6c:	ldr	ip, [sp, #12]
   15d70:	mla	r3, r2, ip, r3
   15d74:	ldr	r2, [sp]
   15d78:	umull	r4, r5, r4, r2
   15d7c:	add	r5, r3, r5
   15d80:	cmp	r1, r5
   15d84:	cmpeq	r0, r4
   15d88:	bcc	15e78 <close_stdout@@Base+0x2b2c>
   15d8c:	mul	r2, r4, ip
   15d90:	ldr	ip, [sp, #8]
   15d94:	mov	r3, #0
   15d98:	umull	r0, r1, r4, ip
   15d9c:	mla	r2, ip, r5, r2
   15da0:	strd	r0, [sp]
   15da4:	add	r2, r2, r1
   15da8:	str	r2, [sp, #4]
   15dac:	b	15a00 <close_stdout@@Base+0x26b4>
   15db0:	asr	r5, r4, #31
   15db4:	mov	r2, r4
   15db8:	mvn	r0, #0
   15dbc:	mvn	r1, #0
   15dc0:	mov	r3, r5
   15dc4:	bl	16760 <close_stdout@@Base+0x3414>
   15dc8:	mov	ip, r7
   15dcc:	str	r6, [sp, #20]
   15dd0:	mov	r2, #4
   15dd4:	ldrd	r6, [sp]
   15dd8:	mov	r3, #0
   15ddc:	strd	r0, [sp, #8]
   15de0:	ldrd	r0, [sp, #8]
   15de4:	cmp	r1, r7
   15de8:	cmpeq	r0, r6
   15dec:	mulcs	r0, r6, r5
   15df0:	movcs	r1, #0
   15df4:	mlacs	r0, r4, r7, r0
   15df8:	movcc	r1, #1
   15dfc:	umullcs	r6, r7, r6, r4
   15e00:	mvncc	r6, #0
   15e04:	mvncc	r7, #0
   15e08:	orr	r3, r3, r1
   15e0c:	addcs	r7, r0, r7
   15e10:	subs	r2, r2, #1
   15e14:	bne	15de0 <close_stdout@@Base+0x2a94>
   15e18:	b	15ae8 <close_stdout@@Base+0x279c>
   15e1c:	ldrd	r0, [sp]
   15e20:	strd	r0, [r9]
   15e24:	mov	r0, r7
   15e28:	b	157f0 <close_stdout@@Base+0x24a4>
   15e2c:	ldrb	r3, [fp, #2]
   15e30:	mov	r4, #1024	; 0x400
   15e34:	cmp	r3, #66	; 0x42
   15e38:	moveq	r6, #3
   15e3c:	movne	r6, #1
   15e40:	b	158c8 <close_stdout@@Base+0x257c>
   15e44:	mov	r6, #2
   15e48:	mov	r4, #1000	; 0x3e8
   15e4c:	b	158c8 <close_stdout@@Base+0x257c>
   15e50:	mvn	r3, #0
   15e54:	mvn	r2, #0
   15e58:	strd	r2, [sp]
   15e5c:	mov	r3, #1
   15e60:	b	15a00 <close_stdout@@Base+0x26b4>
   15e64:	mvn	r0, #0
   15e68:	mvn	r1, #0
   15e6c:	mov	r3, #1
   15e70:	strd	r0, [sp]
   15e74:	b	15a00 <close_stdout@@Base+0x26b4>
   15e78:	mvn	r0, #0
   15e7c:	mvn	r1, #0
   15e80:	mov	r3, #1
   15e84:	strd	r0, [sp]
   15e88:	b	15a00 <close_stdout@@Base+0x26b4>
   15e8c:	bl	11034 <__stack_chk_fail@plt>
   15e90:	ldr	r0, [pc, #32]	; 15eb8 <close_stdout@@Base+0x2b6c>
   15e94:	mov	r2, #96	; 0x60
   15e98:	ldr	r1, [pc, #28]	; 15ebc <close_stdout@@Base+0x2b70>
   15e9c:	ldr	r3, [pc, #28]	; 15ec0 <close_stdout@@Base+0x2b74>
   15ea0:	add	r0, pc, r0
   15ea4:	add	r1, pc, r1
   15ea8:	add	r3, pc, r3
   15eac:	bl	11238 <__assert_fail@plt>
   15eb0:	andeq	r3, r1, ip, ror r8
   15eb4:	strdeq	r0, [r0], -ip
   15eb8:	strdeq	r1, [r0], -r8
   15ebc:	andeq	r1, r0, ip, lsl pc
   15ec0:	andeq	r1, r0, r4, ror #29
   15ec4:	push	{r4, r5, r6, lr}
   15ec8:	mov	r4, r0
   15ecc:	bl	110a0 <__fpending@plt>
   15ed0:	mov	r6, r0
   15ed4:	mov	r0, r4
   15ed8:	ldr	r4, [r4]
   15edc:	bl	16364 <close_stdout@@Base+0x3018>
   15ee0:	and	r4, r4, #32
   15ee4:	adds	r5, r0, #0
   15ee8:	movne	r5, #1
   15eec:	cmp	r4, #0
   15ef0:	bne	15f10 <close_stdout@@Base+0x2bc4>
   15ef4:	cmp	r5, #0
   15ef8:	beq	15f08 <close_stdout@@Base+0x2bbc>
   15efc:	cmp	r6, #0
   15f00:	beq	15f2c <close_stdout@@Base+0x2be0>
   15f04:	mvn	r4, #0
   15f08:	mov	r0, r4
   15f0c:	pop	{r4, r5, r6, pc}
   15f10:	cmp	r5, #0
   15f14:	bne	15f04 <close_stdout@@Base+0x2bb8>
   15f18:	bl	11160 <__errno_location@plt>
   15f1c:	mvn	r4, #0
   15f20:	str	r5, [r0]
   15f24:	mov	r0, r4
   15f28:	pop	{r4, r5, r6, pc}
   15f2c:	bl	11160 <__errno_location@plt>
   15f30:	ldr	r4, [r0]
   15f34:	subs	r4, r4, #9
   15f38:	mvnne	r4, #0
   15f3c:	mov	r0, r4
   15f40:	pop	{r4, r5, r6, pc}
   15f44:	ldr	r3, [pc, #984]	; 16324 <close_stdout@@Base+0x2fd8>
   15f48:	mov	r0, #14
   15f4c:	ldr	r2, [pc, #980]	; 16328 <close_stdout@@Base+0x2fdc>
   15f50:	add	r3, pc, r3
   15f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f58:	sub	sp, sp, #132	; 0x84
   15f5c:	ldr	r6, [r3, r2]
   15f60:	ldr	r3, [r6]
   15f64:	str	r3, [sp, #124]	; 0x7c
   15f68:	bl	111fc <nl_langinfo@plt>
   15f6c:	subs	r5, r0, #0
   15f70:	beq	16024 <close_stdout@@Base+0x2cd8>
   15f74:	ldr	r3, [pc, #944]	; 1632c <close_stdout@@Base+0x2fe0>
   15f78:	ldr	r4, [pc, r3]
   15f7c:	cmp	r4, #0
   15f80:	beq	16030 <close_stdout@@Base+0x2ce4>
   15f84:	ldrb	r7, [r4]
   15f88:	cmp	r7, #0
   15f8c:	bne	15fc0 <close_stdout@@Base+0x2c74>
   15f90:	b	15ff8 <close_stdout@@Base+0x2cac>
   15f94:	mov	r0, r4
   15f98:	bl	11130 <strlen@plt>
   15f9c:	add	r0, r0, #1
   15fa0:	add	r7, r4, r0
   15fa4:	mov	r0, r7
   15fa8:	bl	11130 <strlen@plt>
   15fac:	add	r0, r0, #1
   15fb0:	add	r4, r7, r0
   15fb4:	ldrb	r7, [r7, r0]
   15fb8:	cmp	r7, #0
   15fbc:	beq	15ff8 <close_stdout@@Base+0x2cac>
   15fc0:	mov	r0, r5
   15fc4:	mov	r1, r4
   15fc8:	bl	10fb0 <strcmp@plt>
   15fcc:	cmp	r0, #0
   15fd0:	beq	15fe8 <close_stdout@@Base+0x2c9c>
   15fd4:	cmp	r7, #42	; 0x2a
   15fd8:	bne	15f94 <close_stdout@@Base+0x2c48>
   15fdc:	ldrb	r3, [r4, #1]
   15fe0:	cmp	r3, #0
   15fe4:	bne	15f94 <close_stdout@@Base+0x2c48>
   15fe8:	mov	r0, r4
   15fec:	bl	11130 <strlen@plt>
   15ff0:	add	r0, r0, #1
   15ff4:	add	r5, r4, r0
   15ff8:	ldrb	r3, [r5]
   15ffc:	cmp	r3, #0
   16000:	ldreq	r5, [pc, #808]	; 16330 <close_stdout@@Base+0x2fe4>
   16004:	addeq	r5, pc, r5
   16008:	ldr	r2, [sp, #124]	; 0x7c
   1600c:	mov	r0, r5
   16010:	ldr	r3, [r6]
   16014:	cmp	r2, r3
   16018:	bne	162f8 <close_stdout@@Base+0x2fac>
   1601c:	add	sp, sp, #132	; 0x84
   16020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16024:	ldr	r5, [pc, #776]	; 16334 <close_stdout@@Base+0x2fe8>
   16028:	add	r5, pc, r5
   1602c:	b	15f74 <close_stdout@@Base+0x2c28>
   16030:	ldr	r0, [pc, #768]	; 16338 <close_stdout@@Base+0x2fec>
   16034:	add	r0, pc, r0
   16038:	bl	110d0 <getenv@plt>
   1603c:	subs	r8, r0, #0
   16040:	beq	162d0 <close_stdout@@Base+0x2f84>
   16044:	ldrb	r3, [r8]
   16048:	cmp	r3, #0
   1604c:	beq	16264 <close_stdout@@Base+0x2f18>
   16050:	bl	11130 <strlen@plt>
   16054:	subs	sl, r0, #0
   16058:	subne	r3, sl, #1
   1605c:	bne	16274 <close_stdout@@Base+0x2f28>
   16060:	mov	r9, #0
   16064:	mov	fp, r9
   16068:	add	r9, sl, r9
   1606c:	add	r0, r9, #14
   16070:	bl	110dc <malloc@plt>
   16074:	subs	r7, r0, #0
   16078:	beq	162c4 <close_stdout@@Base+0x2f78>
   1607c:	mov	r1, r8
   16080:	mov	r2, sl
   16084:	bl	10fec <memcpy@plt>
   16088:	cmp	fp, #0
   1608c:	add	ip, r7, r9
   16090:	movne	r3, #47	; 0x2f
   16094:	strbne	r3, [r7, sl]
   16098:	ldr	r3, [pc, #668]	; 1633c <close_stdout@@Base+0x2ff0>
   1609c:	add	r3, pc, r3
   160a0:	ldm	r3!, {r0, r1, r2}
   160a4:	ldrh	r3, [r3]
   160a8:	str	r0, [r7, r9]
   160ac:	mov	r0, r7
   160b0:	str	r1, [ip, #4]
   160b4:	mov	r1, #32768	; 0x8000
   160b8:	strh	r3, [ip, #12]
   160bc:	str	r2, [ip, #8]
   160c0:	bl	110c4 <open64@plt>
   160c4:	subs	r8, r0, #0
   160c8:	blt	1628c <close_stdout@@Base+0x2f40>
   160cc:	ldr	r1, [pc, #620]	; 16340 <close_stdout@@Base+0x2ff4>
   160d0:	add	r1, pc, r1
   160d4:	bl	10f80 <fdopen@plt>
   160d8:	subs	fp, r0, #0
   160dc:	beq	162e4 <close_stdout@@Base+0x2f98>
   160e0:	ldr	r0, [pc, #604]	; 16344 <close_stdout@@Base+0x2ff8>
   160e4:	add	sl, sp, #20
   160e8:	add	r9, sp, #72	; 0x48
   160ec:	mov	r8, #0
   160f0:	add	r0, pc, r0
   160f4:	str	r0, [sp, #12]
   160f8:	ldr	r3, [fp, #4]
   160fc:	ldr	r2, [fp, #8]
   16100:	cmp	r3, r2
   16104:	bcs	161f0 <close_stdout@@Base+0x2ea4>
   16108:	add	r2, r3, #1
   1610c:	str	r2, [fp, #4]
   16110:	ldrb	r0, [r3]
   16114:	cmp	r0, #32
   16118:	beq	160f8 <close_stdout@@Base+0x2dac>
   1611c:	sub	r3, r0, #9
   16120:	cmp	r3, #1
   16124:	bls	160f8 <close_stdout@@Base+0x2dac>
   16128:	cmp	r0, #35	; 0x23
   1612c:	beq	16204 <close_stdout@@Base+0x2eb8>
   16130:	mov	r1, fp
   16134:	bl	11154 <ungetc@plt>
   16138:	mov	r0, fp
   1613c:	ldr	r1, [sp, #12]
   16140:	mov	r2, sl
   16144:	mov	r3, r9
   16148:	bl	11184 <fscanf@plt>
   1614c:	cmp	r0, #1
   16150:	ble	16234 <close_stdout@@Base+0x2ee8>
   16154:	mov	r0, sl
   16158:	bl	11130 <strlen@plt>
   1615c:	str	r0, [sp, #8]
   16160:	mov	r0, r9
   16164:	bl	11130 <strlen@plt>
   16168:	cmp	r8, #0
   1616c:	mov	r2, r0
   16170:	bne	16298 <close_stdout@@Base+0x2f4c>
   16174:	ldr	r3, [sp, #8]
   16178:	str	r2, [sp]
   1617c:	add	r8, r0, r3
   16180:	add	r0, r8, #3
   16184:	add	r8, r8, #2
   16188:	bl	110dc <malloc@plt>
   1618c:	ldr	r2, [sp]
   16190:	mov	r3, r0
   16194:	cmp	r3, #0
   16198:	beq	162fc <close_stdout@@Base+0x2fb0>
   1619c:	ldr	r0, [sp, #8]
   161a0:	movw	r1, #65534	; 0xfffe
   161a4:	movt	r1, #65535	; 0xffff
   161a8:	rsb	r2, r2, r8
   161ac:	rsb	r1, r0, r1
   161b0:	stm	sp, {r2, r3}
   161b4:	add	r0, r1, r2
   161b8:	mov	r1, sl
   161bc:	add	r0, r3, r0
   161c0:	mov	r4, r3
   161c4:	bl	11094 <strcpy@plt>
   161c8:	ldr	r2, [sp]
   161cc:	ldr	r3, [sp, #4]
   161d0:	mov	r1, r9
   161d4:	sub	r0, r2, #1
   161d8:	add	r0, r3, r0
   161dc:	bl	11094 <strcpy@plt>
   161e0:	ldr	r3, [fp, #4]
   161e4:	ldr	r2, [fp, #8]
   161e8:	cmp	r3, r2
   161ec:	bcc	16108 <close_stdout@@Base+0x2dbc>
   161f0:	mov	r0, fp
   161f4:	bl	111d8 <__uflow@plt>
   161f8:	cmn	r0, #1
   161fc:	beq	16234 <close_stdout@@Base+0x2ee8>
   16200:	b	16114 <close_stdout@@Base+0x2dc8>
   16204:	ldr	r3, [fp, #4]
   16208:	ldr	r2, [fp, #8]
   1620c:	cmp	r3, r2
   16210:	bcs	16318 <close_stdout@@Base+0x2fcc>
   16214:	add	r2, r3, #1
   16218:	str	r2, [fp, #4]
   1621c:	ldrb	r0, [r3]
   16220:	cmp	r0, #10
   16224:	cmnne	r0, #1
   16228:	bne	16204 <close_stdout@@Base+0x2eb8>
   1622c:	cmn	r0, #1
   16230:	bne	160f8 <close_stdout@@Base+0x2dac>
   16234:	mov	r0, fp
   16238:	bl	16364 <close_stdout@@Base+0x3018>
   1623c:	cmp	r8, #0
   16240:	beq	1628c <close_stdout@@Base+0x2f40>
   16244:	mov	r3, #0
   16248:	strb	r3, [r4, r8]
   1624c:	mov	r0, r7
   16250:	bl	10fd4 <free@plt>
   16254:	ldr	r3, [pc, #236]	; 16348 <close_stdout@@Base+0x2ffc>
   16258:	add	r3, pc, r3
   1625c:	str	r4, [r3]
   16260:	b	15f84 <close_stdout@@Base+0x2c38>
   16264:	ldr	r8, [pc, #224]	; 1634c <close_stdout@@Base+0x3000>
   16268:	mov	r3, #7
   1626c:	mov	sl, #8
   16270:	add	r8, pc, r8
   16274:	ldrb	r3, [r8, r3]
   16278:	cmp	r3, #47	; 0x2f
   1627c:	movne	r9, #1
   16280:	movne	fp, r9
   16284:	bne	16068 <close_stdout@@Base+0x2d1c>
   16288:	b	16060 <close_stdout@@Base+0x2d14>
   1628c:	ldr	r4, [pc, #188]	; 16350 <close_stdout@@Base+0x3004>
   16290:	add	r4, pc, r4
   16294:	b	1624c <close_stdout@@Base+0x2f00>
   16298:	ldr	r0, [sp, #8]
   1629c:	str	r2, [sp]
   162a0:	add	r3, r0, r2
   162a4:	mov	r0, r4
   162a8:	add	r8, r3, r8
   162ac:	add	r1, r8, #3
   162b0:	add	r8, r8, #2
   162b4:	bl	11040 <realloc@plt>
   162b8:	ldr	r2, [sp]
   162bc:	mov	r3, r0
   162c0:	b	16194 <close_stdout@@Base+0x2e48>
   162c4:	ldr	r4, [pc, #136]	; 16354 <close_stdout@@Base+0x3008>
   162c8:	add	r4, pc, r4
   162cc:	b	16254 <close_stdout@@Base+0x2f08>
   162d0:	ldr	r8, [pc, #128]	; 16358 <close_stdout@@Base+0x300c>
   162d4:	mov	r3, #7
   162d8:	mov	sl, #8
   162dc:	add	r8, pc, r8
   162e0:	b	16274 <close_stdout@@Base+0x2f28>
   162e4:	ldr	r4, [pc, #112]	; 1635c <close_stdout@@Base+0x3010>
   162e8:	mov	r0, r8
   162ec:	add	r4, pc, r4
   162f0:	bl	1122c <close@plt>
   162f4:	b	1624c <close_stdout@@Base+0x2f00>
   162f8:	bl	11034 <__stack_chk_fail@plt>
   162fc:	mov	r0, r4
   16300:	ldr	r4, [pc, #88]	; 16360 <close_stdout@@Base+0x3014>
   16304:	bl	10fd4 <free@plt>
   16308:	mov	r0, fp
   1630c:	add	r4, pc, r4
   16310:	bl	16364 <close_stdout@@Base+0x3018>
   16314:	b	1624c <close_stdout@@Base+0x2f00>
   16318:	mov	r0, fp
   1631c:	bl	111d8 <__uflow@plt>
   16320:	b	16220 <close_stdout@@Base+0x2ed4>
   16324:	andeq	r3, r1, r8, lsr #1
   16328:	strdeq	r0, [r0], -ip
   1632c:	andeq	r3, r1, r4, asr #6
   16330:	ldrdeq	r1, [r0], -r8
   16334:	andeq	r1, r0, r0, lsl #16
   16338:			; <UNDEFINED> instruction: 0x00001db0
   1633c:	andeq	r1, r0, r8, asr sp
   16340:	andeq	r1, r0, r4, lsr sp
   16344:	andeq	r1, r0, r8, lsl sp
   16348:	andeq	r3, r1, r4, rrx
   1634c:	andeq	r1, r0, r0, ror #22
   16350:	muleq	r0, r8, r5
   16354:	andeq	r1, r0, r0, ror #10
   16358:	strdeq	r1, [r0], -r4
   1635c:	andeq	r1, r0, ip, lsr r5
   16360:	andeq	r1, r0, ip, lsl r5
   16364:	push	{r4, r5, r6, lr}
   16368:	sub	sp, sp, #8
   1636c:	mov	r4, r0
   16370:	bl	1119c <fileno@plt>
   16374:	cmp	r0, #0
   16378:	mov	r0, r4
   1637c:	blt	163f8 <close_stdout@@Base+0x30ac>
   16380:	bl	110f4 <__freading@plt>
   16384:	cmp	r0, #0
   16388:	bne	163c4 <close_stdout@@Base+0x3078>
   1638c:	mov	r0, r4
   16390:	bl	16404 <close_stdout@@Base+0x30b8>
   16394:	cmp	r0, #0
   16398:	beq	163f4 <close_stdout@@Base+0x30a8>
   1639c:	bl	11160 <__errno_location@plt>
   163a0:	ldr	r6, [r0]
   163a4:	mov	r5, r0
   163a8:	mov	r0, r4
   163ac:	bl	111c0 <fclose@plt>
   163b0:	cmp	r6, #0
   163b4:	mvnne	r0, #0
   163b8:	strne	r6, [r5]
   163bc:	add	sp, sp, #8
   163c0:	pop	{r4, r5, r6, pc}
   163c4:	mov	r0, r4
   163c8:	bl	1119c <fileno@plt>
   163cc:	mov	r1, #1
   163d0:	mov	r2, #0
   163d4:	mov	r3, #0
   163d8:	str	r1, [sp]
   163dc:	bl	1107c <lseek64@plt>
   163e0:	mvn	r2, #0
   163e4:	mvn	r3, #0
   163e8:	cmp	r1, r3
   163ec:	cmpeq	r0, r2
   163f0:	bne	1638c <close_stdout@@Base+0x3040>
   163f4:	mov	r0, r4
   163f8:	add	sp, sp, #8
   163fc:	pop	{r4, r5, r6, lr}
   16400:	b	111c0 <fclose@plt>
   16404:	push	{r4, lr}
   16408:	subs	r4, r0, #0
   1640c:	sub	sp, sp, #8
   16410:	beq	16420 <close_stdout@@Base+0x30d4>
   16414:	bl	110f4 <__freading@plt>
   16418:	cmp	r0, #0
   1641c:	bne	16430 <close_stdout@@Base+0x30e4>
   16420:	mov	r0, r4
   16424:	add	sp, sp, #8
   16428:	pop	{r4, lr}
   1642c:	b	10fc8 <fflush@plt>
   16430:	ldr	r3, [r4]
   16434:	tst	r3, #256	; 0x100
   16438:	beq	16420 <close_stdout@@Base+0x30d4>
   1643c:	mov	r3, #1
   16440:	mov	r0, r4
   16444:	str	r3, [sp]
   16448:	mov	r2, #0
   1644c:	mov	r3, #0
   16450:	bl	16464 <close_stdout@@Base+0x3118>
   16454:	mov	r0, r4
   16458:	add	sp, sp, #8
   1645c:	pop	{r4, lr}
   16460:	b	10fc8 <fflush@plt>
   16464:	push	{r4, r5, r6, r7, lr}
   16468:	sub	sp, sp, #20
   1646c:	ldmib	r0, {r1, ip}
   16470:	mov	r6, r0
   16474:	ldr	r4, [sp, #40]	; 0x28
   16478:	cmp	ip, r1
   1647c:	beq	16494 <close_stdout@@Base+0x3148>
   16480:	str	r4, [sp, #40]	; 0x28
   16484:	mov	r0, r6
   16488:	add	sp, sp, #20
   1648c:	pop	{r4, r5, r6, r7, lr}
   16490:	b	111cc <fseeko64@plt>
   16494:	ldr	ip, [r0, #20]
   16498:	ldr	r1, [r0, #16]
   1649c:	cmp	ip, r1
   164a0:	bne	16480 <close_stdout@@Base+0x3134>
   164a4:	ldr	r7, [r0, #36]	; 0x24
   164a8:	cmp	r7, #0
   164ac:	bne	16480 <close_stdout@@Base+0x3134>
   164b0:	str	r2, [sp, #12]
   164b4:	mvn	r5, #0
   164b8:	str	r3, [sp, #8]
   164bc:	bl	1119c <fileno@plt>
   164c0:	str	r4, [sp]
   164c4:	mvn	r4, #0
   164c8:	ldr	r2, [sp, #12]
   164cc:	ldr	r3, [sp, #8]
   164d0:	bl	1107c <lseek64@plt>
   164d4:	mov	r2, r0
   164d8:	mov	r3, r1
   164dc:	cmp	r3, r5
   164e0:	cmpeq	r2, r4
   164e4:	beq	16504 <close_stdout@@Base+0x31b8>
   164e8:	ldr	r1, [r6]
   164ec:	mov	r0, r7
   164f0:	strd	r2, [r6, #80]	; 0x50
   164f4:	bic	r3, r1, #16
   164f8:	str	r3, [r6]
   164fc:	add	sp, sp, #20
   16500:	pop	{r4, r5, r6, r7, pc}
   16504:	mvn	r0, #0
   16508:	b	164fc <close_stdout@@Base+0x31b0>
   1650c:	subs	r2, r1, #1
   16510:	bxeq	lr
   16514:	bcc	166ec <close_stdout@@Base+0x33a0>
   16518:	cmp	r0, r1
   1651c:	bls	166d0 <close_stdout@@Base+0x3384>
   16520:	tst	r1, r2
   16524:	beq	166dc <close_stdout@@Base+0x3390>
   16528:	clz	r3, r0
   1652c:	clz	r2, r1
   16530:	sub	r3, r2, r3
   16534:	rsbs	r3, r3, #31
   16538:	addne	r3, r3, r3, lsl #1
   1653c:	mov	r2, #0
   16540:	addne	pc, pc, r3, lsl #2
   16544:	nop	{0}
   16548:	cmp	r0, r1, lsl #31
   1654c:	adc	r2, r2, r2
   16550:	subcs	r0, r0, r1, lsl #31
   16554:	cmp	r0, r1, lsl #30
   16558:	adc	r2, r2, r2
   1655c:	subcs	r0, r0, r1, lsl #30
   16560:	cmp	r0, r1, lsl #29
   16564:	adc	r2, r2, r2
   16568:	subcs	r0, r0, r1, lsl #29
   1656c:	cmp	r0, r1, lsl #28
   16570:	adc	r2, r2, r2
   16574:	subcs	r0, r0, r1, lsl #28
   16578:	cmp	r0, r1, lsl #27
   1657c:	adc	r2, r2, r2
   16580:	subcs	r0, r0, r1, lsl #27
   16584:	cmp	r0, r1, lsl #26
   16588:	adc	r2, r2, r2
   1658c:	subcs	r0, r0, r1, lsl #26
   16590:	cmp	r0, r1, lsl #25
   16594:	adc	r2, r2, r2
   16598:	subcs	r0, r0, r1, lsl #25
   1659c:	cmp	r0, r1, lsl #24
   165a0:	adc	r2, r2, r2
   165a4:	subcs	r0, r0, r1, lsl #24
   165a8:	cmp	r0, r1, lsl #23
   165ac:	adc	r2, r2, r2
   165b0:	subcs	r0, r0, r1, lsl #23
   165b4:	cmp	r0, r1, lsl #22
   165b8:	adc	r2, r2, r2
   165bc:	subcs	r0, r0, r1, lsl #22
   165c0:	cmp	r0, r1, lsl #21
   165c4:	adc	r2, r2, r2
   165c8:	subcs	r0, r0, r1, lsl #21
   165cc:	cmp	r0, r1, lsl #20
   165d0:	adc	r2, r2, r2
   165d4:	subcs	r0, r0, r1, lsl #20
   165d8:	cmp	r0, r1, lsl #19
   165dc:	adc	r2, r2, r2
   165e0:	subcs	r0, r0, r1, lsl #19
   165e4:	cmp	r0, r1, lsl #18
   165e8:	adc	r2, r2, r2
   165ec:	subcs	r0, r0, r1, lsl #18
   165f0:	cmp	r0, r1, lsl #17
   165f4:	adc	r2, r2, r2
   165f8:	subcs	r0, r0, r1, lsl #17
   165fc:	cmp	r0, r1, lsl #16
   16600:	adc	r2, r2, r2
   16604:	subcs	r0, r0, r1, lsl #16
   16608:	cmp	r0, r1, lsl #15
   1660c:	adc	r2, r2, r2
   16610:	subcs	r0, r0, r1, lsl #15
   16614:	cmp	r0, r1, lsl #14
   16618:	adc	r2, r2, r2
   1661c:	subcs	r0, r0, r1, lsl #14
   16620:	cmp	r0, r1, lsl #13
   16624:	adc	r2, r2, r2
   16628:	subcs	r0, r0, r1, lsl #13
   1662c:	cmp	r0, r1, lsl #12
   16630:	adc	r2, r2, r2
   16634:	subcs	r0, r0, r1, lsl #12
   16638:	cmp	r0, r1, lsl #11
   1663c:	adc	r2, r2, r2
   16640:	subcs	r0, r0, r1, lsl #11
   16644:	cmp	r0, r1, lsl #10
   16648:	adc	r2, r2, r2
   1664c:	subcs	r0, r0, r1, lsl #10
   16650:	cmp	r0, r1, lsl #9
   16654:	adc	r2, r2, r2
   16658:	subcs	r0, r0, r1, lsl #9
   1665c:	cmp	r0, r1, lsl #8
   16660:	adc	r2, r2, r2
   16664:	subcs	r0, r0, r1, lsl #8
   16668:	cmp	r0, r1, lsl #7
   1666c:	adc	r2, r2, r2
   16670:	subcs	r0, r0, r1, lsl #7
   16674:	cmp	r0, r1, lsl #6
   16678:	adc	r2, r2, r2
   1667c:	subcs	r0, r0, r1, lsl #6
   16680:	cmp	r0, r1, lsl #5
   16684:	adc	r2, r2, r2
   16688:	subcs	r0, r0, r1, lsl #5
   1668c:	cmp	r0, r1, lsl #4
   16690:	adc	r2, r2, r2
   16694:	subcs	r0, r0, r1, lsl #4
   16698:	cmp	r0, r1, lsl #3
   1669c:	adc	r2, r2, r2
   166a0:	subcs	r0, r0, r1, lsl #3
   166a4:	cmp	r0, r1, lsl #2
   166a8:	adc	r2, r2, r2
   166ac:	subcs	r0, r0, r1, lsl #2
   166b0:	cmp	r0, r1, lsl #1
   166b4:	adc	r2, r2, r2
   166b8:	subcs	r0, r0, r1, lsl #1
   166bc:	cmp	r0, r1
   166c0:	adc	r2, r2, r2
   166c4:	subcs	r0, r0, r1
   166c8:	mov	r0, r2
   166cc:	bx	lr
   166d0:	moveq	r0, #1
   166d4:	movne	r0, #0
   166d8:	bx	lr
   166dc:	clz	r2, r1
   166e0:	rsb	r2, r2, #31
   166e4:	lsr	r0, r0, r2
   166e8:	bx	lr
   166ec:	cmp	r0, #0
   166f0:	mvnne	r0, #0
   166f4:	b	1679c <close_stdout@@Base+0x3450>
   166f8:	cmp	r1, #0
   166fc:	beq	166ec <close_stdout@@Base+0x33a0>
   16700:	push	{r0, r1, lr}
   16704:	bl	1650c <close_stdout@@Base+0x31c0>
   16708:	pop	{r1, r2, lr}
   1670c:	mul	r3, r2, r0
   16710:	sub	r1, r1, r3
   16714:	bx	lr
   16718:	cmp	r3, #0
   1671c:	cmpeq	r2, #0
   16720:	bne	16744 <close_stdout@@Base+0x33f8>
   16724:	cmp	r1, #0
   16728:	movlt	r1, #-2147483648	; 0x80000000
   1672c:	movlt	r0, #0
   16730:	blt	16740 <close_stdout@@Base+0x33f4>
   16734:	cmpeq	r0, #0
   16738:	mvnne	r1, #-2147483648	; 0x80000000
   1673c:	mvnne	r0, #0
   16740:	b	1679c <close_stdout@@Base+0x3450>
   16744:	sub	sp, sp, #8
   16748:	push	{sp, lr}
   1674c:	bl	167ac <close_stdout@@Base+0x3460>
   16750:	ldr	lr, [sp, #4]
   16754:	add	sp, sp, #8
   16758:	pop	{r2, r3}
   1675c:	bx	lr
   16760:	cmp	r3, #0
   16764:	cmpeq	r2, #0
   16768:	bne	16780 <close_stdout@@Base+0x3434>
   1676c:	cmp	r1, #0
   16770:	cmpeq	r0, #0
   16774:	mvnne	r1, #0
   16778:	mvnne	r0, #0
   1677c:	b	1679c <close_stdout@@Base+0x3450>
   16780:	sub	sp, sp, #8
   16784:	push	{sp, lr}
   16788:	bl	167e8 <close_stdout@@Base+0x349c>
   1678c:	ldr	lr, [sp, #4]
   16790:	add	sp, sp, #8
   16794:	pop	{r2, r3}
   16798:	bx	lr
   1679c:	push	{r1, lr}
   167a0:	mov	r0, #8
   167a4:	bl	10fa4 <raise@plt>
   167a8:	pop	{r1, pc}
   167ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167b0:	mov	r8, r2
   167b4:	mov	r6, r0
   167b8:	mov	r7, r1
   167bc:	mov	sl, r3
   167c0:	ldr	r9, [sp, #32]
   167c4:	bl	16824 <close_stdout@@Base+0x34d8>
   167c8:	umull	r4, r5, r8, r0
   167cc:	mul	r8, r8, r1
   167d0:	mla	r2, r0, sl, r8
   167d4:	add	r5, r2, r5
   167d8:	subs	r4, r6, r4
   167dc:	sbc	r5, r7, r5
   167e0:	strd	r4, [r9]
   167e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167e8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   167ec:	mov	r8, r2
   167f0:	mov	r6, r0
   167f4:	mov	r7, r1
   167f8:	mov	r5, r3
   167fc:	ldr	r9, [sp, #32]
   16800:	bl	16cb0 <close_stdout@@Base+0x3964>
   16804:	mul	r3, r0, r5
   16808:	umull	r4, r5, r0, r8
   1680c:	mla	r8, r8, r1, r3
   16810:	add	r5, r8, r5
   16814:	subs	r4, r6, r4
   16818:	sbc	r5, r7, r5
   1681c:	strd	r4, [r9]
   16820:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16828:	rsbs	r4, r0, #0
   1682c:	rsc	r5, r1, #0
   16830:	cmp	r1, #0
   16834:	mvn	r6, #0
   16838:	sub	sp, sp, #12
   1683c:	movge	r4, r0
   16840:	movge	r5, r1
   16844:	movge	r6, #0
   16848:	cmp	r3, #0
   1684c:	blt	16a84 <close_stdout@@Base+0x3738>
   16850:	cmp	r3, #0
   16854:	mov	sl, r4
   16858:	mov	ip, r5
   1685c:	mov	r0, r2
   16860:	mov	r1, r3
   16864:	mov	r8, r2
   16868:	mov	r7, r4
   1686c:	mov	r9, r5
   16870:	bne	16968 <close_stdout@@Base+0x361c>
   16874:	cmp	r2, r5
   16878:	bls	169a4 <close_stdout@@Base+0x3658>
   1687c:	clz	r3, r2
   16880:	cmp	r3, #0
   16884:	rsbne	r2, r3, #32
   16888:	lslne	r8, r0, r3
   1688c:	lsrne	r2, r4, r2
   16890:	lslne	r7, r4, r3
   16894:	orrne	r9, r2, r5, lsl r3
   16898:	lsr	r4, r8, #16
   1689c:	uxth	sl, r8
   168a0:	mov	r1, r4
   168a4:	mov	r0, r9
   168a8:	bl	1650c <close_stdout@@Base+0x31c0>
   168ac:	mov	r1, r4
   168b0:	mov	fp, r0
   168b4:	mov	r0, r9
   168b8:	bl	166f8 <close_stdout@@Base+0x33ac>
   168bc:	mul	r0, sl, fp
   168c0:	lsr	r2, r7, #16
   168c4:	orr	r1, r2, r1, lsl #16
   168c8:	cmp	r0, r1
   168cc:	bls	168f0 <close_stdout@@Base+0x35a4>
   168d0:	adds	r1, r1, r8
   168d4:	sub	r3, fp, #1
   168d8:	bcs	168ec <close_stdout@@Base+0x35a0>
   168dc:	cmp	r0, r1
   168e0:	subhi	fp, fp, #2
   168e4:	addhi	r1, r1, r8
   168e8:	bhi	168f0 <close_stdout@@Base+0x35a4>
   168ec:	mov	fp, r3
   168f0:	rsb	r9, r0, r1
   168f4:	mov	r1, r4
   168f8:	uxth	r7, r7
   168fc:	mov	r0, r9
   16900:	bl	1650c <close_stdout@@Base+0x31c0>
   16904:	mov	r1, r4
   16908:	mov	r5, r0
   1690c:	mov	r0, r9
   16910:	bl	166f8 <close_stdout@@Base+0x33ac>
   16914:	mul	sl, sl, r5
   16918:	orr	r1, r7, r1, lsl #16
   1691c:	cmp	sl, r1
   16920:	bls	16940 <close_stdout@@Base+0x35f4>
   16924:	adds	r8, r1, r8
   16928:	sub	r3, r5, #1
   1692c:	bcs	1693c <close_stdout@@Base+0x35f0>
   16930:	cmp	sl, r8
   16934:	subhi	r5, r5, #2
   16938:	bhi	16940 <close_stdout@@Base+0x35f4>
   1693c:	mov	r5, r3
   16940:	orr	r3, r5, fp, lsl #16
   16944:	mov	r4, #0
   16948:	cmp	r6, #0
   1694c:	mov	r0, r3
   16950:	mov	r1, r4
   16954:	beq	16960 <close_stdout@@Base+0x3614>
   16958:	rsbs	r0, r0, #0
   1695c:	rsc	r1, r1, #0
   16960:	add	sp, sp, #12
   16964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16968:	cmp	r3, r5
   1696c:	movhi	r4, #0
   16970:	movhi	r3, r4
   16974:	bhi	16948 <close_stdout@@Base+0x35fc>
   16978:	clz	r5, r1
   1697c:	cmp	r5, #0
   16980:	bne	16b70 <close_stdout@@Base+0x3824>
   16984:	cmp	r1, ip
   16988:	cmpcs	r2, sl
   1698c:	movhi	r4, #0
   16990:	movls	r4, #1
   16994:	movls	r3, #1
   16998:	movls	r4, r5
   1699c:	movhi	r3, r4
   169a0:	b	16948 <close_stdout@@Base+0x35fc>
   169a4:	cmp	r2, #0
   169a8:	bne	169bc <close_stdout@@Base+0x3670>
   169ac:	mov	r1, r2
   169b0:	mov	r0, #1
   169b4:	bl	1650c <close_stdout@@Base+0x31c0>
   169b8:	mov	r8, r0
   169bc:	clz	r3, r8
   169c0:	cmp	r3, #0
   169c4:	bne	16a94 <close_stdout@@Base+0x3748>
   169c8:	rsb	r9, r8, r9
   169cc:	lsr	r5, r8, #16
   169d0:	uxth	sl, r8
   169d4:	mov	r4, #1
   169d8:	mov	r1, r5
   169dc:	mov	r0, r9
   169e0:	bl	1650c <close_stdout@@Base+0x31c0>
   169e4:	mov	r1, r5
   169e8:	mov	fp, r0
   169ec:	mov	r0, r9
   169f0:	bl	166f8 <close_stdout@@Base+0x33ac>
   169f4:	mul	r0, sl, fp
   169f8:	lsr	r2, r7, #16
   169fc:	orr	r1, r2, r1, lsl #16
   16a00:	cmp	r0, r1
   16a04:	bls	16a24 <close_stdout@@Base+0x36d8>
   16a08:	adds	r1, r1, r8
   16a0c:	sub	r3, fp, #1
   16a10:	bcs	16c90 <close_stdout@@Base+0x3944>
   16a14:	cmp	r0, r1
   16a18:	subhi	fp, fp, #2
   16a1c:	addhi	r1, r1, r8
   16a20:	bls	16c90 <close_stdout@@Base+0x3944>
   16a24:	rsb	r2, r0, r1
   16a28:	mov	r1, r5
   16a2c:	str	r2, [sp]
   16a30:	uxth	r7, r7
   16a34:	mov	r0, r2
   16a38:	bl	1650c <close_stdout@@Base+0x31c0>
   16a3c:	ldr	r2, [sp]
   16a40:	mov	r1, r5
   16a44:	mov	r9, r0
   16a48:	mov	r0, r2
   16a4c:	bl	166f8 <close_stdout@@Base+0x33ac>
   16a50:	mul	sl, sl, r9
   16a54:	orr	r1, r7, r1, lsl #16
   16a58:	cmp	sl, r1
   16a5c:	bls	16a7c <close_stdout@@Base+0x3730>
   16a60:	adds	r8, r1, r8
   16a64:	sub	r3, r9, #1
   16a68:	bcs	16a78 <close_stdout@@Base+0x372c>
   16a6c:	cmp	sl, r8
   16a70:	subhi	r9, r9, #2
   16a74:	bhi	16a7c <close_stdout@@Base+0x3730>
   16a78:	mov	r9, r3
   16a7c:	orr	r3, r9, fp, lsl #16
   16a80:	b	16948 <close_stdout@@Base+0x35fc>
   16a84:	mvn	r6, r6
   16a88:	rsbs	r2, r2, #0
   16a8c:	rsc	r3, r3, #0
   16a90:	b	16850 <close_stdout@@Base+0x3504>
   16a94:	lsl	r8, r8, r3
   16a98:	rsb	fp, r3, #32
   16a9c:	lsr	r4, r9, fp
   16aa0:	lsr	fp, r7, fp
   16aa4:	lsr	r5, r8, #16
   16aa8:	orr	fp, fp, r9, lsl r3
   16aac:	mov	r0, r4
   16ab0:	lsl	r7, r7, r3
   16ab4:	mov	r1, r5
   16ab8:	uxth	sl, r8
   16abc:	bl	1650c <close_stdout@@Base+0x31c0>
   16ac0:	mov	r1, r5
   16ac4:	mov	r3, r0
   16ac8:	mov	r0, r4
   16acc:	str	r3, [sp]
   16ad0:	bl	166f8 <close_stdout@@Base+0x33ac>
   16ad4:	ldr	r3, [sp]
   16ad8:	lsr	r2, fp, #16
   16adc:	mul	r0, sl, r3
   16ae0:	orr	r1, r2, r1, lsl #16
   16ae4:	cmp	r0, r1
   16ae8:	bls	16b08 <close_stdout@@Base+0x37bc>
   16aec:	adds	r1, r1, r8
   16af0:	sub	r2, r3, #1
   16af4:	bcs	16ca8 <close_stdout@@Base+0x395c>
   16af8:	cmp	r0, r1
   16afc:	subhi	r3, r3, #2
   16b00:	addhi	r1, r1, r8
   16b04:	bls	16ca8 <close_stdout@@Base+0x395c>
   16b08:	rsb	r9, r0, r1
   16b0c:	mov	r1, r5
   16b10:	str	r3, [sp]
   16b14:	uxth	fp, fp
   16b18:	mov	r0, r9
   16b1c:	bl	1650c <close_stdout@@Base+0x31c0>
   16b20:	mov	r1, r5
   16b24:	mov	r4, r0
   16b28:	mov	r0, r9
   16b2c:	bl	166f8 <close_stdout@@Base+0x33ac>
   16b30:	mul	r9, sl, r4
   16b34:	ldr	r3, [sp]
   16b38:	orr	r1, fp, r1, lsl #16
   16b3c:	cmp	r9, r1
   16b40:	bls	16b64 <close_stdout@@Base+0x3818>
   16b44:	adds	r1, r1, r8
   16b48:	sub	r2, r4, #1
   16b4c:	bcs	16b60 <close_stdout@@Base+0x3814>
   16b50:	cmp	r9, r1
   16b54:	subhi	r4, r4, #2
   16b58:	addhi	r1, r1, r8
   16b5c:	bhi	16b64 <close_stdout@@Base+0x3818>
   16b60:	mov	r4, r2
   16b64:	rsb	r9, r9, r1
   16b68:	orr	r4, r4, r3, lsl #16
   16b6c:	b	169d8 <close_stdout@@Base+0x368c>
   16b70:	rsb	sl, r5, #32
   16b74:	lsl	r3, r2, r5
   16b78:	lsr	r0, r2, sl
   16b7c:	lsr	r2, ip, sl
   16b80:	orr	r4, r0, r1, lsl r5
   16b84:	lsr	sl, r7, sl
   16b88:	mov	r0, r2
   16b8c:	orr	sl, sl, ip, lsl r5
   16b90:	lsr	r9, r4, #16
   16b94:	str	r3, [sp, #4]
   16b98:	str	r2, [sp]
   16b9c:	uxth	fp, r4
   16ba0:	mov	r1, r9
   16ba4:	bl	1650c <close_stdout@@Base+0x31c0>
   16ba8:	ldr	r2, [sp]
   16bac:	mov	r1, r9
   16bb0:	mov	r8, r0
   16bb4:	mov	r0, r2
   16bb8:	bl	166f8 <close_stdout@@Base+0x33ac>
   16bbc:	mul	r0, fp, r8
   16bc0:	lsr	r2, sl, #16
   16bc4:	orr	r1, r2, r1, lsl #16
   16bc8:	cmp	r0, r1
   16bcc:	bls	16bec <close_stdout@@Base+0x38a0>
   16bd0:	adds	r1, r1, r4
   16bd4:	sub	r2, r8, #1
   16bd8:	bcs	16ca0 <close_stdout@@Base+0x3954>
   16bdc:	cmp	r0, r1
   16be0:	subhi	r8, r8, #2
   16be4:	addhi	r1, r1, r4
   16be8:	bls	16ca0 <close_stdout@@Base+0x3954>
   16bec:	rsb	ip, r0, r1
   16bf0:	mov	r1, r9
   16bf4:	str	ip, [sp]
   16bf8:	mov	r0, ip
   16bfc:	bl	1650c <close_stdout@@Base+0x31c0>
   16c00:	ldr	ip, [sp]
   16c04:	mov	r1, r9
   16c08:	mov	r2, r0
   16c0c:	mov	r0, ip
   16c10:	str	r2, [sp]
   16c14:	bl	166f8 <close_stdout@@Base+0x33ac>
   16c18:	ldr	r2, [sp]
   16c1c:	uxth	ip, sl
   16c20:	mul	fp, fp, r2
   16c24:	orr	ip, ip, r1, lsl #16
   16c28:	cmp	fp, ip
   16c2c:	bls	16c4c <close_stdout@@Base+0x3900>
   16c30:	adds	ip, ip, r4
   16c34:	sub	r1, r2, #1
   16c38:	bcs	16c98 <close_stdout@@Base+0x394c>
   16c3c:	cmp	fp, ip
   16c40:	subhi	r2, r2, #2
   16c44:	addhi	ip, ip, r4
   16c48:	bls	16c98 <close_stdout@@Base+0x394c>
   16c4c:	ldr	r0, [sp, #4]
   16c50:	orr	r1, r2, r8, lsl #16
   16c54:	rsb	fp, fp, ip
   16c58:	umull	r2, r3, r1, r0
   16c5c:	cmp	fp, r3
   16c60:	bcc	16c84 <close_stdout@@Base+0x3938>
   16c64:	movne	r4, #0
   16c68:	moveq	r4, #1
   16c6c:	cmp	r2, r7, lsl r5
   16c70:	movls	r4, #0
   16c74:	andhi	r4, r4, #1
   16c78:	cmp	r4, #0
   16c7c:	moveq	r3, r1
   16c80:	beq	16948 <close_stdout@@Base+0x35fc>
   16c84:	sub	r3, r1, #1
   16c88:	mov	r4, #0
   16c8c:	b	16948 <close_stdout@@Base+0x35fc>
   16c90:	mov	fp, r3
   16c94:	b	16a24 <close_stdout@@Base+0x36d8>
   16c98:	mov	r2, r1
   16c9c:	b	16c4c <close_stdout@@Base+0x3900>
   16ca0:	mov	r8, r2
   16ca4:	b	16bec <close_stdout@@Base+0x38a0>
   16ca8:	mov	r3, r2
   16cac:	b	16b08 <close_stdout@@Base+0x37bc>
   16cb0:	cmp	r3, #0
   16cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cb8:	mov	r6, r0
   16cbc:	sub	sp, sp, #12
   16cc0:	mov	r5, r1
   16cc4:	mov	r7, r0
   16cc8:	mov	r4, r2
   16ccc:	mov	r8, r1
   16cd0:	bne	16db0 <close_stdout@@Base+0x3a64>
   16cd4:	cmp	r2, r1
   16cd8:	bls	16dec <close_stdout@@Base+0x3aa0>
   16cdc:	clz	r3, r2
   16ce0:	cmp	r3, #0
   16ce4:	rsbne	r8, r3, #32
   16ce8:	lslne	r4, r2, r3
   16cec:	lsrne	r8, r0, r8
   16cf0:	lslne	r7, r0, r3
   16cf4:	orrne	r8, r8, r1, lsl r3
   16cf8:	lsr	r5, r4, #16
   16cfc:	uxth	sl, r4
   16d00:	mov	r1, r5
   16d04:	mov	r0, r8
   16d08:	bl	1650c <close_stdout@@Base+0x31c0>
   16d0c:	mov	r1, r5
   16d10:	mov	r9, r0
   16d14:	mov	r0, r8
   16d18:	bl	166f8 <close_stdout@@Base+0x33ac>
   16d1c:	mul	r0, sl, r9
   16d20:	lsr	r3, r7, #16
   16d24:	orr	r1, r3, r1, lsl #16
   16d28:	cmp	r0, r1
   16d2c:	bls	16d50 <close_stdout@@Base+0x3a04>
   16d30:	adds	r1, r1, r4
   16d34:	sub	r2, r9, #1
   16d38:	bcs	16d4c <close_stdout@@Base+0x3a00>
   16d3c:	cmp	r0, r1
   16d40:	subhi	r9, r9, #2
   16d44:	addhi	r1, r1, r4
   16d48:	bhi	16d50 <close_stdout@@Base+0x3a04>
   16d4c:	mov	r9, r2
   16d50:	rsb	r8, r0, r1
   16d54:	mov	r1, r5
   16d58:	uxth	r7, r7
   16d5c:	mov	r0, r8
   16d60:	bl	1650c <close_stdout@@Base+0x31c0>
   16d64:	mov	r1, r5
   16d68:	mov	r6, r0
   16d6c:	mov	r0, r8
   16d70:	bl	166f8 <close_stdout@@Base+0x33ac>
   16d74:	mul	sl, sl, r6
   16d78:	orr	r1, r7, r1, lsl #16
   16d7c:	cmp	sl, r1
   16d80:	bls	16d9c <close_stdout@@Base+0x3a50>
   16d84:	adds	r4, r1, r4
   16d88:	sub	r3, r6, #1
   16d8c:	bcs	17098 <close_stdout@@Base+0x3d4c>
   16d90:	cmp	sl, r4
   16d94:	subhi	r6, r6, #2
   16d98:	bls	17098 <close_stdout@@Base+0x3d4c>
   16d9c:	orr	r0, r6, r9, lsl #16
   16da0:	mov	r6, #0
   16da4:	mov	r1, r6
   16da8:	add	sp, sp, #12
   16dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16db0:	cmp	r3, r1
   16db4:	movhi	r6, #0
   16db8:	movhi	r0, r6
   16dbc:	bhi	16da4 <close_stdout@@Base+0x3a58>
   16dc0:	clz	r7, r3
   16dc4:	cmp	r7, #0
   16dc8:	bne	16ec8 <close_stdout@@Base+0x3b7c>
   16dcc:	cmp	r3, r1
   16dd0:	cmpcs	r2, r6
   16dd4:	movhi	r6, #0
   16dd8:	movls	r6, #1
   16ddc:	movls	r0, #1
   16de0:	movls	r6, r7
   16de4:	movhi	r0, r6
   16de8:	b	16da4 <close_stdout@@Base+0x3a58>
   16dec:	cmp	r2, #0
   16df0:	bne	16e04 <close_stdout@@Base+0x3ab8>
   16df4:	mov	r1, r2
   16df8:	mov	r0, #1
   16dfc:	bl	1650c <close_stdout@@Base+0x31c0>
   16e00:	mov	r4, r0
   16e04:	clz	r3, r4
   16e08:	cmp	r3, #0
   16e0c:	bne	16fc4 <close_stdout@@Base+0x3c78>
   16e10:	rsb	r5, r4, r5
   16e14:	lsr	r8, r4, #16
   16e18:	uxth	sl, r4
   16e1c:	mov	r6, #1
   16e20:	mov	r1, r8
   16e24:	mov	r0, r5
   16e28:	bl	1650c <close_stdout@@Base+0x31c0>
   16e2c:	mov	r1, r8
   16e30:	mov	r9, r0
   16e34:	mov	r0, r5
   16e38:	bl	166f8 <close_stdout@@Base+0x33ac>
   16e3c:	mul	r0, sl, r9
   16e40:	lsr	r3, r7, #16
   16e44:	orr	r1, r3, r1, lsl #16
   16e48:	cmp	r0, r1
   16e4c:	bls	16e6c <close_stdout@@Base+0x3b20>
   16e50:	adds	r1, r1, r4
   16e54:	sub	r2, r9, #1
   16e58:	bcs	170a0 <close_stdout@@Base+0x3d54>
   16e5c:	cmp	r0, r1
   16e60:	subhi	r9, r9, #2
   16e64:	addhi	r1, r1, r4
   16e68:	bls	170a0 <close_stdout@@Base+0x3d54>
   16e6c:	rsb	fp, r0, r1
   16e70:	mov	r1, r8
   16e74:	uxth	r7, r7
   16e78:	mov	r0, fp
   16e7c:	bl	1650c <close_stdout@@Base+0x31c0>
   16e80:	mov	r1, r8
   16e84:	mov	r5, r0
   16e88:	mov	r0, fp
   16e8c:	bl	166f8 <close_stdout@@Base+0x33ac>
   16e90:	mul	sl, sl, r5
   16e94:	orr	r1, r7, r1, lsl #16
   16e98:	cmp	sl, r1
   16e9c:	bls	16eb8 <close_stdout@@Base+0x3b6c>
   16ea0:	adds	r4, r1, r4
   16ea4:	sub	r3, r5, #1
   16ea8:	bcs	170a8 <close_stdout@@Base+0x3d5c>
   16eac:	cmp	sl, r4
   16eb0:	subhi	r5, r5, #2
   16eb4:	bls	170a8 <close_stdout@@Base+0x3d5c>
   16eb8:	orr	r0, r5, r9, lsl #16
   16ebc:	mov	r1, r6
   16ec0:	add	sp, sp, #12
   16ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec8:	rsb	r1, r7, #32
   16ecc:	lsl	r0, r2, r7
   16ed0:	lsr	r2, r2, r1
   16ed4:	lsr	fp, r5, r1
   16ed8:	orr	r8, r2, r3, lsl r7
   16edc:	lsr	r1, r6, r1
   16ee0:	str	r0, [sp, #4]
   16ee4:	orr	r5, r1, r5, lsl r7
   16ee8:	lsr	r9, r8, #16
   16eec:	mov	r0, fp
   16ef0:	uxth	sl, r8
   16ef4:	mov	r1, r9
   16ef8:	bl	1650c <close_stdout@@Base+0x31c0>
   16efc:	mov	r1, r9
   16f00:	mov	r4, r0
   16f04:	mov	r0, fp
   16f08:	bl	166f8 <close_stdout@@Base+0x33ac>
   16f0c:	mul	r0, sl, r4
   16f10:	lsr	ip, r5, #16
   16f14:	orr	r1, ip, r1, lsl #16
   16f18:	cmp	r0, r1
   16f1c:	bls	16f30 <close_stdout@@Base+0x3be4>
   16f20:	adds	r1, r1, r8
   16f24:	sub	r2, r4, #1
   16f28:	bcc	170c4 <close_stdout@@Base+0x3d78>
   16f2c:	mov	r4, r2
   16f30:	rsb	ip, r0, r1
   16f34:	mov	r1, r9
   16f38:	str	ip, [sp]
   16f3c:	uxth	r5, r5
   16f40:	mov	r0, ip
   16f44:	bl	1650c <close_stdout@@Base+0x31c0>
   16f48:	ldr	ip, [sp]
   16f4c:	mov	r1, r9
   16f50:	mov	fp, r0
   16f54:	mov	r0, ip
   16f58:	bl	166f8 <close_stdout@@Base+0x33ac>
   16f5c:	mul	sl, sl, fp
   16f60:	orr	r1, r5, r1, lsl #16
   16f64:	cmp	sl, r1
   16f68:	bls	16f7c <close_stdout@@Base+0x3c30>
   16f6c:	adds	r1, r1, r8
   16f70:	sub	r2, fp, #1
   16f74:	bcc	170b0 <close_stdout@@Base+0x3d64>
   16f78:	mov	fp, r2
   16f7c:	ldr	r3, [sp, #4]
   16f80:	orr	r0, fp, r4, lsl #16
   16f84:	rsb	sl, sl, r1
   16f88:	umull	r4, r5, r0, r3
   16f8c:	cmp	sl, r5
   16f90:	bcc	16fb0 <close_stdout@@Base+0x3c64>
   16f94:	movne	r3, #0
   16f98:	moveq	r3, #1
   16f9c:	cmp	r4, r6, lsl r7
   16fa0:	movls	r6, #0
   16fa4:	andhi	r6, r3, #1
   16fa8:	cmp	r6, #0
   16fac:	beq	16da4 <close_stdout@@Base+0x3a58>
   16fb0:	mov	r6, #0
   16fb4:	sub	r0, r0, #1
   16fb8:	mov	r1, r6
   16fbc:	add	sp, sp, #12
   16fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fc4:	lsl	r4, r4, r3
   16fc8:	rsb	r9, r3, #32
   16fcc:	lsr	r2, r5, r9
   16fd0:	lsr	r9, r6, r9
   16fd4:	lsr	r8, r4, #16
   16fd8:	orr	r9, r9, r5, lsl r3
   16fdc:	mov	r0, r2
   16fe0:	lsl	r7, r6, r3
   16fe4:	mov	r1, r8
   16fe8:	str	r2, [sp]
   16fec:	bl	1650c <close_stdout@@Base+0x31c0>
   16ff0:	ldr	r2, [sp]
   16ff4:	mov	r1, r8
   16ff8:	uxth	sl, r4
   16ffc:	mov	fp, r0
   17000:	mov	r0, r2
   17004:	bl	166f8 <close_stdout@@Base+0x33ac>
   17008:	mul	r0, sl, fp
   1700c:	lsr	r3, r9, #16
   17010:	orr	r1, r3, r1, lsl #16
   17014:	cmp	r0, r1
   17018:	bls	17038 <close_stdout@@Base+0x3cec>
   1701c:	adds	r1, r1, r4
   17020:	sub	r3, fp, #1
   17024:	bcs	170d8 <close_stdout@@Base+0x3d8c>
   17028:	cmp	r0, r1
   1702c:	subhi	fp, fp, #2
   17030:	addhi	r1, r1, r4
   17034:	bls	170d8 <close_stdout@@Base+0x3d8c>
   17038:	rsb	r5, r0, r1
   1703c:	mov	r1, r8
   17040:	uxth	r9, r9
   17044:	mov	r0, r5
   17048:	bl	1650c <close_stdout@@Base+0x31c0>
   1704c:	mov	r1, r8
   17050:	mov	r6, r0
   17054:	mov	r0, r5
   17058:	bl	166f8 <close_stdout@@Base+0x33ac>
   1705c:	mul	r5, sl, r6
   17060:	orr	r1, r9, r1, lsl #16
   17064:	cmp	r5, r1
   17068:	bls	1708c <close_stdout@@Base+0x3d40>
   1706c:	adds	r1, r1, r4
   17070:	sub	r3, r6, #1
   17074:	bcs	17088 <close_stdout@@Base+0x3d3c>
   17078:	cmp	r5, r1
   1707c:	subhi	r6, r6, #2
   17080:	addhi	r1, r1, r4
   17084:	bhi	1708c <close_stdout@@Base+0x3d40>
   17088:	mov	r6, r3
   1708c:	rsb	r5, r5, r1
   17090:	orr	r6, r6, fp, lsl #16
   17094:	b	16e20 <close_stdout@@Base+0x3ad4>
   17098:	mov	r6, r3
   1709c:	b	16d9c <close_stdout@@Base+0x3a50>
   170a0:	mov	r9, r2
   170a4:	b	16e6c <close_stdout@@Base+0x3b20>
   170a8:	mov	r5, r3
   170ac:	b	16eb8 <close_stdout@@Base+0x3b6c>
   170b0:	cmp	sl, r1
   170b4:	subhi	fp, fp, #2
   170b8:	addhi	r1, r1, r8
   170bc:	bhi	16f7c <close_stdout@@Base+0x3c30>
   170c0:	b	16f78 <close_stdout@@Base+0x3c2c>
   170c4:	cmp	r0, r1
   170c8:	subhi	r4, r4, #2
   170cc:	addhi	r1, r1, r8
   170d0:	bhi	16f30 <close_stdout@@Base+0x3be4>
   170d4:	b	16f2c <close_stdout@@Base+0x3be0>
   170d8:	mov	fp, r3
   170dc:	b	17038 <close_stdout@@Base+0x3cec>
   170e0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   170e4:	mov	r7, r0
   170e8:	ldr	r6, [pc, #76]	; 1713c <close_stdout@@Base+0x3df0>
   170ec:	mov	r8, r1
   170f0:	ldr	r5, [pc, #72]	; 17140 <close_stdout@@Base+0x3df4>
   170f4:	mov	r9, r2
   170f8:	add	r6, pc, r6
   170fc:	bl	10f60 <fdopen@plt-0x20>
   17100:	add	r5, pc, r5
   17104:	rsb	r6, r5, r6
   17108:	asrs	r6, r6, #2
   1710c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   17110:	sub	r5, r5, #4
   17114:	mov	r4, #0
   17118:	add	r4, r4, #1
   1711c:	ldr	r3, [r5, #4]!
   17120:	mov	r0, r7
   17124:	mov	r1, r8
   17128:	mov	r2, r9
   1712c:	blx	r3
   17130:	cmp	r4, r6
   17134:	bne	17118 <close_stdout@@Base+0x3dcc>
   17138:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1713c:	andeq	r1, r1, r4, asr #26
   17140:	andeq	r1, r1, r8, lsr sp
   17144:	bx	lr
   17148:	ldr	r3, [pc, #28]	; 1716c <close_stdout@@Base+0x3e20>
   1714c:	mov	r1, #0
   17150:	ldr	r2, [pc, #24]	; 17170 <close_stdout@@Base+0x3e24>
   17154:	add	r3, pc, r3
   17158:	ldr	r3, [r3, r2]
   1715c:	cmp	r3, #0
   17160:	ldrne	r2, [r3]
   17164:	moveq	r2, r3
   17168:	b	1116c <__cxa_atexit@plt>
   1716c:	andeq	r1, r1, r4, lsr #29
   17170:	andeq	r0, r0, r4, lsl r1

Disassembly of section .fini:

00017174 <.fini>:
   17174:	push	{r3, lr}
   17178:	pop	{r3, pc}
