
centos-preinstalled/tty:     file format elf32-littlearm


Disassembly of section .init:

00010e68 <.init>:
   10e68:	push	{r3, lr}
   10e6c:	bl	11370 <close@plt+0x26c>
   10e70:	pop	{r3, pc}

Disassembly of section .plt:

00010e74 <fdopen@plt-0x14>:
   10e74:	push	{lr}		; (str lr, [sp, #-4]!)
   10e78:	ldr	lr, [pc, #4]	; 10e84 <fdopen@plt-0x4>
   10e7c:	add	lr, pc, lr
   10e80:	ldr	pc, [lr, #8]!
   10e84:	andeq	r4, r1, ip, ror r1

00010e88 <fdopen@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #20, 20	; 0x14000
   10e90:	ldr	pc, [ip, #380]!	; 0x17c

00010e94 <calloc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #20, 20	; 0x14000
   10e9c:	ldr	pc, [ip, #372]!	; 0x174

00010ea0 <fputs_unlocked@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #364]!	; 0x16c

00010eac <raise@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #356]!	; 0x164

00010eb8 <strcmp@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #348]!	; 0x15c

00010ec4 <fflush@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #20, 20	; 0x14000
   10ecc:	ldr	pc, [ip, #340]!	; 0x154

00010ed0 <free@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #20, 20	; 0x14000
   10ed8:	ldr	pc, [ip, #332]!	; 0x14c

00010edc <_exit@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #20, 20	; 0x14000
   10ee4:	ldr	pc, [ip, #324]!	; 0x144

00010ee8 <memcpy@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #20, 20	; 0x14000
   10ef0:	ldr	pc, [ip, #316]!	; 0x13c

00010ef4 <mbsinit@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #20, 20	; 0x14000
   10efc:	ldr	pc, [ip, #308]!	; 0x134

00010f00 <memcmp@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #20, 20	; 0x14000
   10f08:	ldr	pc, [ip, #300]!	; 0x12c

00010f0c <dcgettext@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #20, 20	; 0x14000
   10f14:	ldr	pc, [ip, #292]!	; 0x124

00010f18 <__stack_chk_fail@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #20, 20	; 0x14000
   10f20:	ldr	pc, [ip, #284]!	; 0x11c

00010f24 <realloc@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #20, 20	; 0x14000
   10f2c:	ldr	pc, [ip, #276]!	; 0x114

00010f30 <textdomain@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #20, 20	; 0x14000
   10f38:	ldr	pc, [ip, #268]!	; 0x10c

00010f3c <iswprint@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #20, 20	; 0x14000
   10f44:	ldr	pc, [ip, #260]!	; 0x104

00010f48 <fwrite@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #20, 20	; 0x14000
   10f50:	ldr	pc, [ip, #252]!	; 0xfc

00010f54 <lseek64@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #20, 20	; 0x14000
   10f5c:	ldr	pc, [ip, #244]!	; 0xf4

00010f60 <__ctype_get_mb_cur_max@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #20, 20	; 0x14000
   10f68:	ldr	pc, [ip, #236]!	; 0xec

00010f6c <strcpy@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #20, 20	; 0x14000
   10f74:	ldr	pc, [ip, #228]!	; 0xe4

00010f78 <__fpending@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #20, 20	; 0x14000
   10f80:	ldr	pc, [ip, #220]!	; 0xdc

00010f84 <mbrtowc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #20, 20	; 0x14000
   10f8c:	ldr	pc, [ip, #212]!	; 0xd4

00010f90 <error@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #20, 20	; 0x14000
   10f98:	ldr	pc, [ip, #204]!	; 0xcc

00010f9c <open64@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #20, 20	; 0x14000
   10fa4:	ldr	pc, [ip, #196]!	; 0xc4

00010fa8 <getenv@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #20, 20	; 0x14000
   10fb0:	ldr	pc, [ip, #188]!	; 0xbc

00010fb4 <puts@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #20, 20	; 0x14000
   10fbc:	ldr	pc, [ip, #180]!	; 0xb4

00010fc0 <malloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #172]!	; 0xac

00010fcc <__libc_start_main@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #164]!	; 0xa4

00010fd8 <__freading@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #156]!	; 0x9c

00010fe4 <__gmon_start__@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #148]!	; 0x94

00010ff0 <getopt_long@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #140]!	; 0x8c

00010ffc <__ctype_b_loc@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #132]!	; 0x84

00011008 <exit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #124]!	; 0x7c

00011014 <ttyname@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #20, 20	; 0x14000
   1101c:	ldr	pc, [ip, #116]!	; 0x74

00011020 <strlen@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #20, 20	; 0x14000
   11028:	ldr	pc, [ip, #108]!	; 0x6c

0001102c <ungetc@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #20, 20	; 0x14000
   11034:	ldr	pc, [ip, #100]!	; 0x64

00011038 <__errno_location@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #20, 20	; 0x14000
   11040:	ldr	pc, [ip, #92]!	; 0x5c

00011044 <__cxa_atexit@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #20, 20	; 0x14000
   1104c:	ldr	pc, [ip, #84]!	; 0x54

00011050 <memset@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #20, 20	; 0x14000
   11058:	ldr	pc, [ip, #76]!	; 0x4c

0001105c <fscanf@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #20, 20	; 0x14000
   11064:	ldr	pc, [ip, #68]!	; 0x44

00011068 <__printf_chk@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #20, 20	; 0x14000
   11070:	ldr	pc, [ip, #60]!	; 0x3c

00011074 <fileno@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #20, 20	; 0x14000
   1107c:	ldr	pc, [ip, #52]!	; 0x34

00011080 <__fprintf_chk@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #20, 20	; 0x14000
   11088:	ldr	pc, [ip, #44]!	; 0x2c

0001108c <fclose@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #20, 20	; 0x14000
   11094:	ldr	pc, [ip, #36]!	; 0x24

00011098 <fseeko64@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #20, 20	; 0x14000
   110a0:	ldr	pc, [ip, #28]!

000110a4 <__uflow@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #20, 20	; 0x14000
   110ac:	ldr	pc, [ip, #20]!

000110b0 <setlocale@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #20, 20	; 0x14000
   110b8:	ldr	pc, [ip, #12]!

000110bc <strrchr@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #20, 20	; 0x14000
   110c4:	ldr	pc, [ip, #4]!

000110c8 <nl_langinfo@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #77824	; 0x13000
   110d0:	ldr	pc, [ip, #4092]!	; 0xffc

000110d4 <bindtextdomain@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #77824	; 0x13000
   110dc:	ldr	pc, [ip, #4084]!	; 0xff4

000110e0 <isatty@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #77824	; 0x13000
   110e8:	ldr	pc, [ip, #4076]!	; 0xfec

000110ec <strncmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #77824	; 0x13000
   110f4:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f8 <abort@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #77824	; 0x13000
   11100:	ldr	pc, [ip, #4060]!	; 0xfdc

00011104 <close@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #77824	; 0x13000
   1110c:	ldr	pc, [ip, #4052]!	; 0xfd4

Disassembly of section .text:

00011110 <close_stdout@@Base-0x55c>:
   11110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11114:	mov	r5, r0
   11118:	sub	sp, sp, #20
   1111c:	ldr	r0, [r1]
   11120:	mov	r4, r1
   11124:	bl	11828 <close_stdout@@Base+0x1bc>
   11128:	ldr	r1, [pc, #440]	; 112e8 <close@plt+0x1e4>
   1112c:	mov	r0, #6
   11130:	ldr	r6, [pc, #436]	; 112ec <close@plt+0x1e8>
   11134:	mov	fp, #1
   11138:	add	r1, pc, r1
   1113c:	ldr	sl, [pc, #428]	; 112f0 <close@plt+0x1ec>
   11140:	bl	110b0 <setlocale@plt>
   11144:	add	r6, pc, r6
   11148:	ldr	r1, [pc, #420]	; 112f4 <close@plt+0x1f0>
   1114c:	add	sl, pc, sl
   11150:	mov	r0, r6
   11154:	ldr	r8, [pc, #412]	; 112f8 <close@plt+0x1f4>
   11158:	add	r1, pc, r1
   1115c:	ldr	r7, [pc, #408]	; 112fc <close@plt+0x1f8>
   11160:	bl	110d4 <bindtextdomain@plt>
   11164:	mov	r0, r6
   11168:	bl	10f30 <textdomain@plt>
   1116c:	ldr	r2, [pc, #396]	; 11300 <close@plt+0x1fc>
   11170:	ldr	r3, [pc, #396]	; 11304 <close@plt+0x200>
   11174:	mov	r1, #3
   11178:	ldr	r0, [pc, #392]	; 11308 <close@plt+0x204>
   1117c:	add	r8, pc, r8
   11180:	ldr	r2, [sl, r2]
   11184:	add	r7, pc, r7
   11188:	add	r0, pc, r0
   1118c:	str	r0, [sp, #12]
   11190:	str	r1, [r2]
   11194:	ldr	r0, [sl, r3]
   11198:	bl	1415c <close_stdout@@Base+0x2af0>
   1119c:	ldr	r2, [pc, #360]	; 1130c <close@plt+0x208>
   111a0:	mov	r3, #0
   111a4:	add	r2, pc, r2
   111a8:	mov	r6, r3
   111ac:	strb	r3, [r2]
   111b0:	str	r6, [sp]
   111b4:	mov	r0, r5
   111b8:	mov	r1, r4
   111bc:	mov	r2, r8
   111c0:	mov	r3, r7
   111c4:	mov	r9, #0
   111c8:	bl	10ff0 <getopt_long@plt>
   111cc:	cmn	r0, #1
   111d0:	beq	11248 <close@plt+0x144>
   111d4:	cmn	r0, #2
   111d8:	beq	11240 <close@plt+0x13c>
   111dc:	cmp	r0, #115	; 0x73
   111e0:	beq	11234 <close@plt+0x130>
   111e4:	cmn	r0, #3
   111e8:	beq	111f4 <close@plt+0xf0>
   111ec:	mov	r0, #2
   111f0:	bl	11468 <close@plt+0x364>
   111f4:	ldr	r1, [pc, #276]	; 11310 <close@plt+0x20c>
   111f8:	ldr	r3, [pc, #276]	; 11314 <close@plt+0x210>
   111fc:	ldr	r2, [pc, #276]	; 11318 <close@plt+0x214>
   11200:	ldr	r0, [sl, r1]
   11204:	ldr	r3, [sl, r3]
   11208:	add	r2, pc, r2
   1120c:	ldr	r1, [pc, #264]	; 1131c <close@plt+0x218>
   11210:	ldr	r0, [r0]
   11214:	ldr	r3, [r3]
   11218:	add	r1, pc, r1
   1121c:	stm	sp, {r2, r9}
   11220:	ldr	r2, [pc, #248]	; 11320 <close@plt+0x21c>
   11224:	add	r2, pc, r2
   11228:	bl	13514 <close_stdout@@Base+0x1ea8>
   1122c:	mov	r0, r9
   11230:	bl	11008 <exit@plt>
   11234:	ldr	r3, [sp, #12]
   11238:	strb	fp, [r3]
   1123c:	b	111b0 <close@plt+0xac>
   11240:	mov	r0, r9
   11244:	bl	11468 <close@plt+0x364>
   11248:	ldr	r3, [pc, #212]	; 11324 <close@plt+0x220>
   1124c:	ldr	r6, [sl, r3]
   11250:	ldr	r3, [r6]
   11254:	cmp	r5, r3
   11258:	bgt	11298 <close@plt+0x194>
   1125c:	mov	r0, #0
   11260:	bl	11014 <ttyname@plt>
   11264:	ldr	r3, [pc, #188]	; 11328 <close@plt+0x224>
   11268:	add	r3, pc, r3
   1126c:	ldrb	r3, [r3]
   11270:	cmp	r3, #0
   11274:	bne	11284 <close@plt+0x180>
   11278:	cmp	r0, #0
   1127c:	beq	112d4 <close@plt+0x1d0>
   11280:	bl	10fb4 <puts@plt>
   11284:	mov	r0, #0
   11288:	bl	110e0 <isatty@plt>
   1128c:	rsbs	r0, r0, #1
   11290:	movcc	r0, #0
   11294:	bl	11008 <exit@plt>
   11298:	ldr	r1, [pc, #140]	; 1132c <close@plt+0x228>
   1129c:	mov	r2, #5
   112a0:	mov	r0, r9
   112a4:	add	r1, pc, r1
   112a8:	bl	10f0c <dcgettext@plt>
   112ac:	ldr	r3, [r6]
   112b0:	mov	r5, r0
   112b4:	ldr	r0, [r4, r3, lsl #2]
   112b8:	bl	13078 <close_stdout@@Base+0x1a0c>
   112bc:	mov	r1, r9
   112c0:	mov	r2, r5
   112c4:	mov	r3, r0
   112c8:	mov	r0, r9
   112cc:	bl	10f90 <error@plt>
   112d0:	b	1125c <close@plt+0x158>
   112d4:	ldr	r1, [pc, #84]	; 11330 <close@plt+0x22c>
   112d8:	mov	r2, #5
   112dc:	add	r1, pc, r1
   112e0:	bl	10f0c <dcgettext@plt>
   112e4:	b	11280 <close@plt+0x17c>
   112e8:	andeq	r3, r0, r4, ror #4
   112ec:	muleq	r0, r8, r1
   112f0:	andeq	r3, r1, ip, lsr #29
   112f4:	andeq	r3, r0, r8, asr #4
   112f8:	ldrdeq	r3, [r0], -r4
   112fc:	andeq	r3, r1, r8, lsl #26
   11300:	andeq	r0, r0, r8, lsl #2
   11304:	strdeq	r0, [r0], -r8
   11308:	ldrdeq	r3, [r1], -r9
   1130c:			; <UNDEFINED> instruction: 0x00013fbd
   11310:	andeq	r0, r0, r4, lsl #2
   11314:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11318:			; <UNDEFINED> instruction: 0x000031b0
   1131c:	muleq	r0, ip, r1
   11320:	strheq	r3, [r0], -r4
   11324:	andeq	r0, r0, ip, ror #1
   11328:	strdeq	r3, [r1], -r9
   1132c:	andeq	r3, r0, r4, lsr #2
   11330:	andeq	r3, r0, r0, lsl #2
   11334:	mov	fp, #0
   11338:	mov	lr, #0
   1133c:	pop	{r1}		; (ldr r1, [sp], #4)
   11340:	mov	r2, sp
   11344:	push	{r2}		; (str r2, [sp, #-4]!)
   11348:	push	{r0}		; (str r0, [sp, #-4]!)
   1134c:	ldr	ip, [pc, #16]	; 11364 <close@plt+0x260>
   11350:	push	{ip}		; (str ip, [sp, #-4]!)
   11354:	ldr	r0, [pc, #12]	; 11368 <close@plt+0x264>
   11358:	ldr	r3, [pc, #12]	; 1136c <close@plt+0x268>
   1135c:	bl	10fcc <__libc_start_main@plt>
   11360:	bl	110f8 <abort@plt>
   11364:	andeq	r4, r1, r8, asr r1
   11368:	andeq	r1, r1, r0, lsl r1
   1136c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11370:	ldr	r3, [pc, #20]	; 1138c <close@plt+0x288>
   11374:	ldr	r2, [pc, #20]	; 11390 <close@plt+0x28c>
   11378:	add	r3, pc, r3
   1137c:	ldr	r2, [r3, r2]
   11380:	cmp	r2, #0
   11384:	bxeq	lr
   11388:	b	10fe4 <__gmon_start__@plt>
   1138c:	andeq	r3, r1, r0, lsl #25
   11390:	strdeq	r0, [r0], -ip
   11394:	push	{r3, lr}
   11398:	movw	r0, #20840	; 0x5168
   1139c:	ldr	r3, [pc, #36]	; 113c8 <close@plt+0x2c4>
   113a0:	movt	r0, #2
   113a4:	rsb	r3, r0, r3
   113a8:	cmp	r3, #6
   113ac:	popls	{r3, pc}
   113b0:	movw	r3, #0
   113b4:	movt	r3, #0
   113b8:	cmp	r3, #0
   113bc:	popeq	{r3, pc}
   113c0:	blx	r3
   113c4:	pop	{r3, pc}
   113c8:	andeq	r5, r2, fp, ror #2
   113cc:	push	{r3, lr}
   113d0:	movw	r0, #20840	; 0x5168
   113d4:	movw	r3, #20840	; 0x5168
   113d8:	movt	r0, #2
   113dc:	movt	r3, #2
   113e0:	rsb	r3, r0, r3
   113e4:	asr	r3, r3, #2
   113e8:	add	r3, r3, r3, lsr #31
   113ec:	asrs	r1, r3, #1
   113f0:	popeq	{r3, pc}
   113f4:	movw	r2, #0
   113f8:	movt	r2, #0
   113fc:	cmp	r2, #0
   11400:	popeq	{r3, pc}
   11404:	blx	r2
   11408:	pop	{r3, pc}
   1140c:	push	{r4, lr}
   11410:	movw	r4, #20840	; 0x5168
   11414:	movt	r4, #2
   11418:	ldrb	r3, [r4]
   1141c:	cmp	r3, #0
   11420:	popne	{r4, pc}
   11424:	bl	11394 <close@plt+0x290>
   11428:	mov	r3, #1
   1142c:	strb	r3, [r4]
   11430:	pop	{r4, pc}
   11434:	movw	r0, #20112	; 0x4e90
   11438:	movt	r0, #2
   1143c:	push	{r3, lr}
   11440:	ldr	r3, [r0]
   11444:	cmp	r3, #0
   11448:	beq	11460 <close@plt+0x35c>
   1144c:	movw	r3, #0
   11450:	movt	r3, #0
   11454:	cmp	r3, #0
   11458:	beq	11460 <close@plt+0x35c>
   1145c:	blx	r3
   11460:	pop	{r3, lr}
   11464:	b	113cc <close@plt+0x2c8>
   11468:	push	{r4, r5, r6, lr}
   1146c:	subs	r4, r0, #0
   11470:	ldr	r5, [pc, #400]	; 11608 <close@plt+0x504>
   11474:	add	r5, pc, r5
   11478:	beq	114c0 <close@plt+0x3bc>
   1147c:	ldr	r3, [pc, #392]	; 1160c <close@plt+0x508>
   11480:	mov	r2, #5
   11484:	ldr	r1, [pc, #388]	; 11610 <close@plt+0x50c>
   11488:	mov	r0, #0
   1148c:	ldr	r3, [r5, r3]
   11490:	add	r1, pc, r1
   11494:	ldr	r6, [r3]
   11498:	bl	10f0c <dcgettext@plt>
   1149c:	ldr	r3, [pc, #368]	; 11614 <close@plt+0x510>
   114a0:	mov	r1, #1
   114a4:	ldr	r3, [r5, r3]
   114a8:	ldr	r3, [r3]
   114ac:	mov	r2, r0
   114b0:	mov	r0, r6
   114b4:	bl	11080 <__fprintf_chk@plt>
   114b8:	mov	r0, r4
   114bc:	bl	11008 <exit@plt>
   114c0:	ldr	r1, [pc, #336]	; 11618 <close@plt+0x514>
   114c4:	mov	r2, #5
   114c8:	add	r1, pc, r1
   114cc:	bl	10f0c <dcgettext@plt>
   114d0:	ldr	r3, [pc, #316]	; 11614 <close@plt+0x510>
   114d4:	ldr	r6, [r5, r3]
   114d8:	ldr	r2, [r6]
   114dc:	mov	r1, r0
   114e0:	mov	r0, #1
   114e4:	bl	11068 <__printf_chk@plt>
   114e8:	ldr	r1, [pc, #300]	; 1161c <close@plt+0x518>
   114ec:	mov	r2, #5
   114f0:	mov	r0, r4
   114f4:	add	r1, pc, r1
   114f8:	bl	10f0c <dcgettext@plt>
   114fc:	ldr	r3, [pc, #284]	; 11620 <close@plt+0x51c>
   11500:	ldr	r5, [r5, r3]
   11504:	ldr	r1, [r5]
   11508:	bl	10ea0 <fputs_unlocked@plt>
   1150c:	ldr	r1, [pc, #272]	; 11624 <close@plt+0x520>
   11510:	mov	r2, #5
   11514:	mov	r0, r4
   11518:	add	r1, pc, r1
   1151c:	bl	10f0c <dcgettext@plt>
   11520:	ldr	r1, [r5]
   11524:	bl	10ea0 <fputs_unlocked@plt>
   11528:	ldr	r1, [pc, #248]	; 11628 <close@plt+0x524>
   1152c:	mov	r2, #5
   11530:	mov	r0, r4
   11534:	add	r1, pc, r1
   11538:	bl	10f0c <dcgettext@plt>
   1153c:	ldr	r1, [r5]
   11540:	bl	10ea0 <fputs_unlocked@plt>
   11544:	ldr	r1, [pc, #224]	; 1162c <close@plt+0x528>
   11548:	mov	r2, #5
   1154c:	mov	r0, r4
   11550:	add	r1, pc, r1
   11554:	bl	10f0c <dcgettext@plt>
   11558:	ldr	r2, [pc, #208]	; 11630 <close@plt+0x52c>
   1155c:	ldr	r3, [pc, #208]	; 11634 <close@plt+0x530>
   11560:	add	r2, pc, r2
   11564:	add	r3, pc, r3
   11568:	mov	r1, r0
   1156c:	mov	r0, #1
   11570:	bl	11068 <__printf_chk@plt>
   11574:	mov	r0, #5
   11578:	mov	r1, r4
   1157c:	bl	110b0 <setlocale@plt>
   11580:	cmp	r0, #0
   11584:	beq	115a0 <close@plt+0x49c>
   11588:	ldr	r1, [pc, #168]	; 11638 <close@plt+0x534>
   1158c:	mov	r2, #3
   11590:	add	r1, pc, r1
   11594:	bl	110ec <strncmp@plt>
   11598:	cmp	r0, #0
   1159c:	bne	115d4 <close@plt+0x4d0>
   115a0:	ldr	r1, [pc, #148]	; 1163c <close@plt+0x538>
   115a4:	mov	r2, #5
   115a8:	mov	r0, #0
   115ac:	add	r1, pc, r1
   115b0:	bl	10f0c <dcgettext@plt>
   115b4:	mov	r5, r0
   115b8:	ldr	r0, [r6]
   115bc:	bl	11784 <close_stdout@@Base+0x118>
   115c0:	mov	r1, r5
   115c4:	mov	r2, r0
   115c8:	mov	r0, #1
   115cc:	bl	11068 <__printf_chk@plt>
   115d0:	b	114b8 <close@plt+0x3b4>
   115d4:	ldr	r1, [pc, #100]	; 11640 <close@plt+0x53c>
   115d8:	mov	r2, #5
   115dc:	mov	r0, r4
   115e0:	add	r1, pc, r1
   115e4:	bl	10f0c <dcgettext@plt>
   115e8:	mov	r5, r0
   115ec:	ldr	r0, [r6]
   115f0:	bl	11784 <close_stdout@@Base+0x118>
   115f4:	mov	r1, r5
   115f8:	mov	r2, r0
   115fc:	mov	r0, #1
   11600:	bl	11068 <__printf_chk@plt>
   11604:	b	115a0 <close@plt+0x49c>
   11608:	andeq	r3, r1, r4, lsl #23
   1160c:	strdeq	r0, [r0], -r4
   11610:	andeq	r2, r0, r0, lsl #26
   11614:	andeq	r0, r0, r0, lsl r1
   11618:	strdeq	r2, [r0], -r0
   1161c:	ldrdeq	r2, [r0], -ip
   11620:	andeq	r0, r0, r4, lsl #2
   11624:	andeq	r2, r0, r0, asr #26
   11628:	andeq	r2, r0, r4, asr sp
   1162c:	andeq	r2, r0, r0, ror sp
   11630:	andeq	r2, r0, r8, ror sp
   11634:	andeq	r2, r0, r4, lsl #27
   11638:	andeq	r2, r0, r0, lsl #27
   1163c:			; <UNDEFINED> instruction: 0x00002db0
   11640:	andeq	r2, r0, r4, lsr sp
   11644:	ldr	r3, [pc, #8]	; 11654 <close@plt+0x550>
   11648:	add	r3, pc, r3
   1164c:	str	r0, [r3]
   11650:	bx	lr
   11654:	andeq	r3, r1, ip, lsl fp
   11658:	ldr	r3, [pc, #8]	; 11668 <close@plt+0x564>
   1165c:	add	r3, pc, r3
   11660:	strb	r0, [r3, #4]
   11664:	bx	lr
   11668:	andeq	r3, r1, r8, lsl #22

0001166c <close_stdout@@Base>:
   1166c:	push	{r4, r5, r6, r7, lr}
   11670:	sub	sp, sp, #12
   11674:	ldr	r4, [pc, #228]	; 11760 <close_stdout@@Base+0xf4>
   11678:	ldr	r3, [pc, #228]	; 11764 <close_stdout@@Base+0xf8>
   1167c:	add	r4, pc, r4
   11680:	ldr	r3, [r4, r3]
   11684:	ldr	r0, [r3]
   11688:	bl	13890 <close_stdout@@Base+0x2224>
   1168c:	cmp	r0, #0
   11690:	beq	116b8 <close_stdout@@Base+0x4c>
   11694:	ldr	r3, [pc, #204]	; 11768 <close_stdout@@Base+0xfc>
   11698:	add	r3, pc, r3
   1169c:	ldrb	r3, [r3, #4]
   116a0:	cmp	r3, #0
   116a4:	beq	116d8 <close_stdout@@Base+0x6c>
   116a8:	bl	11038 <__errno_location@plt>
   116ac:	ldr	r3, [r0]
   116b0:	cmp	r3, #32
   116b4:	bne	116d8 <close_stdout@@Base+0x6c>
   116b8:	ldr	r3, [pc, #172]	; 1176c <close_stdout@@Base+0x100>
   116bc:	ldr	r3, [r4, r3]
   116c0:	ldr	r0, [r3]
   116c4:	bl	13890 <close_stdout@@Base+0x2224>
   116c8:	cmp	r0, #0
   116cc:	bne	1172c <close_stdout@@Base+0xc0>
   116d0:	add	sp, sp, #12
   116d4:	pop	{r4, r5, r6, r7, pc}
   116d8:	ldr	r1, [pc, #144]	; 11770 <close_stdout@@Base+0x104>
   116dc:	mov	r0, #0
   116e0:	mov	r2, #5
   116e4:	add	r1, pc, r1
   116e8:	bl	10f0c <dcgettext@plt>
   116ec:	ldr	r3, [pc, #128]	; 11774 <close_stdout@@Base+0x108>
   116f0:	ldr	r5, [pc, r3]
   116f4:	cmp	r5, #0
   116f8:	mov	r6, r0
   116fc:	beq	1173c <close_stdout@@Base+0xd0>
   11700:	bl	11038 <__errno_location@plt>
   11704:	ldr	r7, [r0]
   11708:	mov	r0, r5
   1170c:	bl	12f24 <close_stdout@@Base+0x18b8>
   11710:	ldr	r2, [pc, #96]	; 11778 <close_stdout@@Base+0x10c>
   11714:	str	r6, [sp]
   11718:	mov	r1, r7
   1171c:	add	r2, pc, r2
   11720:	mov	r3, r0
   11724:	mov	r0, #0
   11728:	bl	10f90 <error@plt>
   1172c:	ldr	r3, [pc, #72]	; 1177c <close_stdout@@Base+0x110>
   11730:	ldr	r3, [r4, r3]
   11734:	ldr	r0, [r3]
   11738:	bl	10edc <_exit@plt>
   1173c:	bl	11038 <__errno_location@plt>
   11740:	ldr	r2, [pc, #56]	; 11780 <close_stdout@@Base+0x114>
   11744:	add	r2, pc, r2
   11748:	mov	r3, r0
   1174c:	mov	r0, r5
   11750:	ldr	r1, [r3]
   11754:	mov	r3, r6
   11758:	bl	10f90 <error@plt>
   1175c:	b	1172c <close_stdout@@Base+0xc0>
   11760:	andeq	r3, r1, ip, ror r9
   11764:	andeq	r0, r0, r4, lsl #2
   11768:	andeq	r3, r1, ip, asr #21
   1176c:	strdeq	r0, [r0], -r4
   11770:	andeq	r2, r0, ip, lsr #26
   11774:	andeq	r3, r1, r4, ror sl
   11778:	andeq	r2, r0, r0, lsl #26
   1177c:	andeq	r0, r0, r8, lsl #2
   11780:	ldrdeq	r2, [r0], -ip
   11784:	ldrb	r3, [r0]
   11788:	cmp	r3, #47	; 0x2f
   1178c:	bne	117a8 <close_stdout@@Base+0x13c>
   11790:	add	r2, r0, #1
   11794:	mov	r0, r2
   11798:	add	r2, r2, #1
   1179c:	ldrb	r3, [r0]
   117a0:	cmp	r3, #47	; 0x2f
   117a4:	beq	11794 <close_stdout@@Base+0x128>
   117a8:	cmp	r3, #0
   117ac:	bxeq	lr
   117b0:	mov	r2, r0
   117b4:	mov	r1, #0
   117b8:	cmp	r3, #47	; 0x2f
   117bc:	moveq	r1, #1
   117c0:	beq	117d0 <close_stdout@@Base+0x164>
   117c4:	cmp	r1, #0
   117c8:	movne	r0, r2
   117cc:	movne	r1, #0
   117d0:	ldrb	r3, [r2, #1]!
   117d4:	cmp	r3, #0
   117d8:	bne	117b8 <close_stdout@@Base+0x14c>
   117dc:	bx	lr
   117e0:	push	{r4, lr}
   117e4:	mov	r4, r0
   117e8:	bl	11020 <strlen@plt>
   117ec:	cmp	r0, #1
   117f0:	popls	{r4, pc}
   117f4:	sub	r3, r0, #1
   117f8:	ldrb	r2, [r4, r3]
   117fc:	cmp	r2, #47	; 0x2f
   11800:	popne	{r4, pc}
   11804:	mov	r0, r3
   11808:	cmp	r0, #1
   1180c:	sub	r3, r3, #1
   11810:	beq	11824 <close_stdout@@Base+0x1b8>
   11814:	ldrb	r2, [r4, r3]
   11818:	cmp	r2, #47	; 0x2f
   1181c:	popne	{r4, pc}
   11820:	b	11804 <close_stdout@@Base+0x198>
   11824:	pop	{r4, pc}
   11828:	push	{r3, r4, r5, r6, r7, lr}
   1182c:	subs	r4, r0, #0
   11830:	ldr	r5, [pc, #172]	; 118e4 <close_stdout@@Base+0x278>
   11834:	add	r5, pc, r5
   11838:	beq	118c0 <close_stdout@@Base+0x254>
   1183c:	mov	r1, #47	; 0x2f
   11840:	bl	110bc <strrchr@plt>
   11844:	subs	r6, r0, #0
   11848:	beq	118a4 <close_stdout@@Base+0x238>
   1184c:	add	r7, r6, #1
   11850:	rsb	r3, r4, r7
   11854:	cmp	r3, #6
   11858:	ble	118a4 <close_stdout@@Base+0x238>
   1185c:	ldr	r1, [pc, #132]	; 118e8 <close_stdout@@Base+0x27c>
   11860:	sub	r0, r6, #6
   11864:	mov	r2, #7
   11868:	add	r1, pc, r1
   1186c:	bl	110ec <strncmp@plt>
   11870:	cmp	r0, #0
   11874:	bne	118a4 <close_stdout@@Base+0x238>
   11878:	ldr	r1, [pc, #108]	; 118ec <close_stdout@@Base+0x280>
   1187c:	mov	r0, r7
   11880:	mov	r2, #3
   11884:	add	r1, pc, r1
   11888:	bl	110ec <strncmp@plt>
   1188c:	cmp	r0, #0
   11890:	movne	r4, r7
   11894:	ldreq	r3, [pc, #84]	; 118f0 <close_stdout@@Base+0x284>
   11898:	addeq	r4, r6, #4
   1189c:	ldreq	r3, [r5, r3]
   118a0:	streq	r4, [r3]
   118a4:	ldr	r2, [pc, #72]	; 118f4 <close_stdout@@Base+0x288>
   118a8:	ldr	r3, [pc, #72]	; 118f8 <close_stdout@@Base+0x28c>
   118ac:	ldr	r2, [r5, r2]
   118b0:	str	r4, [r2]
   118b4:	ldr	r3, [r5, r3]
   118b8:	str	r4, [r3]
   118bc:	pop	{r3, r4, r5, r6, r7, pc}
   118c0:	ldr	r3, [pc, #52]	; 118fc <close_stdout@@Base+0x290>
   118c4:	mov	r1, #1
   118c8:	ldr	r0, [pc, #48]	; 11900 <close_stdout@@Base+0x294>
   118cc:	mov	r2, #55	; 0x37
   118d0:	ldr	r3, [r5, r3]
   118d4:	add	r0, pc, r0
   118d8:	ldr	r3, [r3]
   118dc:	bl	10f48 <fwrite@plt>
   118e0:	bl	110f8 <abort@plt>
   118e4:	andeq	r3, r1, r4, asr #15
   118e8:	strdeq	r2, [r0], -r4
   118ec:	andeq	r2, r0, r0, ror #23
   118f0:	andeq	r0, r0, r8, lsl r1
   118f4:	andeq	r0, r0, r0, lsl r1
   118f8:	andeq	r0, r0, ip, lsl #2
   118fc:	strdeq	r0, [r0], -r4
   11900:	andeq	r2, r0, r0, asr fp
   11904:	push	{r3, lr}
   11908:	mov	r3, r0
   1190c:	mov	r2, #0
   11910:	cmp	r1, #8
   11914:	str	r2, [r3], #4
   11918:	add	r3, r3, #4
   1191c:	str	r2, [r0, #4]
   11920:	str	r2, [r3], #4
   11924:	str	r2, [r3], #4
   11928:	str	r2, [r3], #4
   1192c:	str	r2, [r3], #4
   11930:	str	r2, [r3], #4
   11934:	str	r2, [r3], #4
   11938:	str	r2, [r3], #4
   1193c:	str	r2, [r3], #4
   11940:	str	r2, [r3], #4
   11944:	str	r2, [r3]
   11948:	beq	11954 <close_stdout@@Base+0x2e8>
   1194c:	str	r1, [r0]
   11950:	pop	{r3, pc}
   11954:	bl	110f8 <abort@plt>
   11958:	push	{r4, r5, r6, lr}
   1195c:	mov	r4, r0
   11960:	mov	r6, r1
   11964:	mov	r0, #0
   11968:	mov	r1, r4
   1196c:	mov	r2, #5
   11970:	bl	10f0c <dcgettext@plt>
   11974:	cmp	r0, r4
   11978:	mov	r5, r0
   1197c:	beq	11984 <close_stdout@@Base+0x318>
   11980:	pop	{r4, r5, r6, pc}
   11984:	bl	13910 <close_stdout@@Base+0x22a4>
   11988:	ldrb	r3, [r0]
   1198c:	bic	r3, r3, #32
   11990:	cmp	r3, #85	; 0x55
   11994:	bne	11a08 <close_stdout@@Base+0x39c>
   11998:	ldrb	r3, [r0, #1]
   1199c:	bic	r3, r3, #32
   119a0:	cmp	r3, #84	; 0x54
   119a4:	bne	119f4 <close_stdout@@Base+0x388>
   119a8:	ldrb	r3, [r0, #2]
   119ac:	bic	r3, r3, #32
   119b0:	cmp	r3, #70	; 0x46
   119b4:	bne	119f4 <close_stdout@@Base+0x388>
   119b8:	ldrb	r3, [r0, #3]
   119bc:	cmp	r3, #45	; 0x2d
   119c0:	bne	119f4 <close_stdout@@Base+0x388>
   119c4:	ldrb	r3, [r0, #4]
   119c8:	cmp	r3, #56	; 0x38
   119cc:	bne	119f4 <close_stdout@@Base+0x388>
   119d0:	ldrb	r3, [r0, #5]
   119d4:	cmp	r3, #0
   119d8:	bne	119f4 <close_stdout@@Base+0x388>
   119dc:	ldrb	r3, [r5]
   119e0:	cmp	r3, #96	; 0x60
   119e4:	beq	11a80 <close_stdout@@Base+0x414>
   119e8:	ldr	r0, [pc, #180]	; 11aa4 <close_stdout@@Base+0x438>
   119ec:	add	r0, pc, r0
   119f0:	pop	{r4, r5, r6, pc}
   119f4:	cmp	r6, #7
   119f8:	beq	11a8c <close_stdout@@Base+0x420>
   119fc:	ldr	r0, [pc, #164]	; 11aa8 <close_stdout@@Base+0x43c>
   11a00:	add	r0, pc, r0
   11a04:	pop	{r4, r5, r6, pc}
   11a08:	cmp	r3, #71	; 0x47
   11a0c:	bne	119f4 <close_stdout@@Base+0x388>
   11a10:	ldrb	r3, [r0, #1]
   11a14:	bic	r3, r3, #32
   11a18:	cmp	r3, #66	; 0x42
   11a1c:	bne	119f4 <close_stdout@@Base+0x388>
   11a20:	ldrb	r3, [r0, #2]
   11a24:	cmp	r3, #49	; 0x31
   11a28:	bne	119f4 <close_stdout@@Base+0x388>
   11a2c:	ldrb	r3, [r0, #3]
   11a30:	cmp	r3, #56	; 0x38
   11a34:	bne	119f4 <close_stdout@@Base+0x388>
   11a38:	ldrb	r3, [r0, #4]
   11a3c:	cmp	r3, #48	; 0x30
   11a40:	bne	119f4 <close_stdout@@Base+0x388>
   11a44:	ldrb	r3, [r0, #5]
   11a48:	cmp	r3, #51	; 0x33
   11a4c:	bne	119f4 <close_stdout@@Base+0x388>
   11a50:	ldrb	r3, [r0, #6]
   11a54:	cmp	r3, #48	; 0x30
   11a58:	bne	119f4 <close_stdout@@Base+0x388>
   11a5c:	ldrb	r3, [r0, #7]
   11a60:	cmp	r3, #0
   11a64:	bne	119f4 <close_stdout@@Base+0x388>
   11a68:	ldrb	r3, [r5]
   11a6c:	cmp	r3, #96	; 0x60
   11a70:	beq	11a98 <close_stdout@@Base+0x42c>
   11a74:	ldr	r0, [pc, #48]	; 11aac <close_stdout@@Base+0x440>
   11a78:	add	r0, pc, r0
   11a7c:	pop	{r4, r5, r6, pc}
   11a80:	ldr	r0, [pc, #40]	; 11ab0 <close_stdout@@Base+0x444>
   11a84:	add	r0, pc, r0
   11a88:	pop	{r4, r5, r6, pc}
   11a8c:	ldr	r0, [pc, #32]	; 11ab4 <close_stdout@@Base+0x448>
   11a90:	add	r0, pc, r0
   11a94:	pop	{r4, r5, r6, pc}
   11a98:	ldr	r0, [pc, #24]	; 11ab8 <close_stdout@@Base+0x44c>
   11a9c:	add	r0, pc, r0
   11aa0:	pop	{r4, r5, r6, pc}
   11aa4:	muleq	r0, ip, sl
   11aa8:	muleq	r0, r0, sl
   11aac:	andeq	r2, r0, r4, lsl sl
   11ab0:	andeq	r2, r0, r8, lsl sl
   11ab4:	andeq	r2, r0, r4, lsl #20
   11ab8:	strdeq	r2, [r0], -ip
   11abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ac0:	sub	sp, sp, #124	; 0x7c
   11ac4:	ldr	ip, [pc, #3304]	; 127b4 <close_stdout@@Base+0x1148>
   11ac8:	mov	sl, r1
   11acc:	str	r0, [sp, #40]	; 0x28
   11ad0:	mov	r8, r3
   11ad4:	ldr	r0, [pc, #3292]	; 127b8 <close_stdout@@Base+0x114c>
   11ad8:	add	ip, pc, ip
   11adc:	str	r2, [sp, #32]
   11ae0:	ldr	r1, [sp, #164]	; 0xa4
   11ae4:	mov	r3, ip
   11ae8:	ldr	r0, [ip, r0]
   11aec:	ldr	r2, [sp, #172]	; 0xac
   11af0:	ubfx	r1, r1, #1, #1
   11af4:	str	r1, [sp, #36]	; 0x24
   11af8:	str	r0, [sp, #56]	; 0x38
   11afc:	ldr	r0, [sp, #168]	; 0xa8
   11b00:	ldr	r1, [sp, #176]	; 0xb0
   11b04:	str	r2, [sp, #72]	; 0x48
   11b08:	str	r0, [sp, #48]	; 0x30
   11b0c:	ldr	r0, [sp, #56]	; 0x38
   11b10:	str	r1, [sp, #68]	; 0x44
   11b14:	ldr	r3, [r0]
   11b18:	str	r3, [sp, #116]	; 0x74
   11b1c:	bl	10f60 <__ctype_get_mb_cur_max@plt>
   11b20:	ldr	r2, [sp, #160]	; 0xa0
   11b24:	str	r0, [sp, #64]	; 0x40
   11b28:	cmp	r2, #8
   11b2c:	addls	pc, pc, r2, lsl #2
   11b30:	b	12690 <close_stdout@@Base+0x1024>
   11b34:	b	11b58 <close_stdout@@Base+0x4ec>
   11b38:	b	123a8 <close_stdout@@Base+0xd3c>
   11b3c:	b	123d8 <close_stdout@@Base+0xd6c>
   11b40:	b	12288 <close_stdout@@Base+0xc1c>
   11b44:	b	122c8 <close_stdout@@Base+0xc5c>
   11b48:	b	122f4 <close_stdout@@Base+0xc88>
   11b4c:	b	12314 <close_stdout@@Base+0xca8>
   11b50:	b	12314 <close_stdout@@Base+0xca8>
   11b54:	b	12314 <close_stdout@@Base+0xca8>
   11b58:	mov	r2, #0
   11b5c:	str	r2, [sp, #36]	; 0x24
   11b60:	mov	r9, r2
   11b64:	str	r2, [sp, #24]
   11b68:	str	r2, [sp, #28]
   11b6c:	str	r2, [sp, #52]	; 0x34
   11b70:	ldr	r0, [sp, #36]	; 0x24
   11b74:	mov	fp, #0
   11b78:	ldr	r1, [sp, #24]
   11b7c:	eor	r2, r0, #1
   11b80:	eor	r3, r1, #1
   11b84:	and	r3, r2, r3
   11b88:	and	r2, r1, r0
   11b8c:	str	r3, [sp, #44]	; 0x2c
   11b90:	str	r2, [sp, #76]	; 0x4c
   11b94:	cmn	r8, #1
   11b98:	beq	11f18 <close_stdout@@Base+0x8ac>
   11b9c:	subs	r3, fp, r8
   11ba0:	movne	r3, #1
   11ba4:	cmp	r3, #0
   11ba8:	beq	11f30 <close_stdout@@Base+0x8c4>
   11bac:	ldr	r3, [sp, #28]
   11bb0:	ldr	r0, [sp, #24]
   11bb4:	adds	r7, r3, #0
   11bb8:	movne	r7, #1
   11bbc:	ands	r6, r7, r0
   11bc0:	bne	1241c <close_stdout@@Base+0xdb0>
   11bc4:	ldr	r1, [sp, #32]
   11bc8:	add	r5, r1, fp
   11bcc:	ldrb	r4, [r5]
   11bd0:	cmp	r4, #126	; 0x7e
   11bd4:	addls	pc, pc, r4, lsl #2
   11bd8:	b	1219c <close_stdout@@Base+0xb30>
   11bdc:	b	120a8 <close_stdout@@Base+0xa3c>
   11be0:	b	1219c <close_stdout@@Base+0xb30>
   11be4:	b	1219c <close_stdout@@Base+0xb30>
   11be8:	b	1219c <close_stdout@@Base+0xb30>
   11bec:	b	1219c <close_stdout@@Base+0xb30>
   11bf0:	b	1219c <close_stdout@@Base+0xb30>
   11bf4:	b	1219c <close_stdout@@Base+0xb30>
   11bf8:	b	12090 <close_stdout@@Base+0xa24>
   11bfc:	b	12078 <close_stdout@@Base+0xa0c>
   11c00:	b	120a0 <close_stdout@@Base+0xa34>
   11c04:	b	12098 <close_stdout@@Base+0xa2c>
   11c08:	b	12088 <close_stdout@@Base+0xa1c>
   11c0c:	b	12080 <close_stdout@@Base+0xa14>
   11c10:	b	12044 <close_stdout@@Base+0x9d8>
   11c14:	b	1219c <close_stdout@@Base+0xb30>
   11c18:	b	1219c <close_stdout@@Base+0xb30>
   11c1c:	b	1219c <close_stdout@@Base+0xb30>
   11c20:	b	1219c <close_stdout@@Base+0xb30>
   11c24:	b	1219c <close_stdout@@Base+0xb30>
   11c28:	b	1219c <close_stdout@@Base+0xb30>
   11c2c:	b	1219c <close_stdout@@Base+0xb30>
   11c30:	b	1219c <close_stdout@@Base+0xb30>
   11c34:	b	1219c <close_stdout@@Base+0xb30>
   11c38:	b	1219c <close_stdout@@Base+0xb30>
   11c3c:	b	1219c <close_stdout@@Base+0xb30>
   11c40:	b	1219c <close_stdout@@Base+0xb30>
   11c44:	b	1219c <close_stdout@@Base+0xb30>
   11c48:	b	1219c <close_stdout@@Base+0xb30>
   11c4c:	b	1219c <close_stdout@@Base+0xb30>
   11c50:	b	1219c <close_stdout@@Base+0xb30>
   11c54:	b	1219c <close_stdout@@Base+0xb30>
   11c58:	b	1219c <close_stdout@@Base+0xb30>
   11c5c:	b	11fd0 <close_stdout@@Base+0x964>
   11c60:	b	11fd0 <close_stdout@@Base+0x964>
   11c64:	b	11fd0 <close_stdout@@Base+0x964>
   11c68:	b	11fc8 <close_stdout@@Base+0x95c>
   11c6c:	b	11fd0 <close_stdout@@Base+0x964>
   11c70:	b	11ea4 <close_stdout@@Base+0x838>
   11c74:	b	11fd0 <close_stdout@@Base+0x964>
   11c78:	b	12144 <close_stdout@@Base+0xad8>
   11c7c:	b	11fd0 <close_stdout@@Base+0x964>
   11c80:	b	11fd0 <close_stdout@@Base+0x964>
   11c84:	b	11fd0 <close_stdout@@Base+0x964>
   11c88:	b	11ea4 <close_stdout@@Base+0x838>
   11c8c:	b	11ea4 <close_stdout@@Base+0x838>
   11c90:	b	11ea4 <close_stdout@@Base+0x838>
   11c94:	b	11ea4 <close_stdout@@Base+0x838>
   11c98:	b	11ea4 <close_stdout@@Base+0x838>
   11c9c:	b	11ea4 <close_stdout@@Base+0x838>
   11ca0:	b	11ea4 <close_stdout@@Base+0x838>
   11ca4:	b	11ea4 <close_stdout@@Base+0x838>
   11ca8:	b	11ea4 <close_stdout@@Base+0x838>
   11cac:	b	11ea4 <close_stdout@@Base+0x838>
   11cb0:	b	11ea4 <close_stdout@@Base+0x838>
   11cb4:	b	11ea4 <close_stdout@@Base+0x838>
   11cb8:	b	11ea4 <close_stdout@@Base+0x838>
   11cbc:	b	11ea4 <close_stdout@@Base+0x838>
   11cc0:	b	11ea4 <close_stdout@@Base+0x838>
   11cc4:	b	11ea4 <close_stdout@@Base+0x838>
   11cc8:	b	11fd0 <close_stdout@@Base+0x964>
   11ccc:	b	11fd0 <close_stdout@@Base+0x964>
   11cd0:	b	11fd0 <close_stdout@@Base+0x964>
   11cd4:	b	11fd0 <close_stdout@@Base+0x964>
   11cd8:	b	11dd8 <close_stdout@@Base+0x76c>
   11cdc:	b	1219c <close_stdout@@Base+0xb30>
   11ce0:	b	11ea4 <close_stdout@@Base+0x838>
   11ce4:	b	11ea4 <close_stdout@@Base+0x838>
   11ce8:	b	11ea4 <close_stdout@@Base+0x838>
   11cec:	b	11ea4 <close_stdout@@Base+0x838>
   11cf0:	b	11ea4 <close_stdout@@Base+0x838>
   11cf4:	b	11ea4 <close_stdout@@Base+0x838>
   11cf8:	b	11ea4 <close_stdout@@Base+0x838>
   11cfc:	b	11ea4 <close_stdout@@Base+0x838>
   11d00:	b	11ea4 <close_stdout@@Base+0x838>
   11d04:	b	11ea4 <close_stdout@@Base+0x838>
   11d08:	b	11ea4 <close_stdout@@Base+0x838>
   11d0c:	b	11ea4 <close_stdout@@Base+0x838>
   11d10:	b	11ea4 <close_stdout@@Base+0x838>
   11d14:	b	11ea4 <close_stdout@@Base+0x838>
   11d18:	b	11ea4 <close_stdout@@Base+0x838>
   11d1c:	b	11ea4 <close_stdout@@Base+0x838>
   11d20:	b	11ea4 <close_stdout@@Base+0x838>
   11d24:	b	11ea4 <close_stdout@@Base+0x838>
   11d28:	b	11ea4 <close_stdout@@Base+0x838>
   11d2c:	b	11ea4 <close_stdout@@Base+0x838>
   11d30:	b	11ea4 <close_stdout@@Base+0x838>
   11d34:	b	11ea4 <close_stdout@@Base+0x838>
   11d38:	b	11ea4 <close_stdout@@Base+0x838>
   11d3c:	b	11ea4 <close_stdout@@Base+0x838>
   11d40:	b	11ea4 <close_stdout@@Base+0x838>
   11d44:	b	11ea4 <close_stdout@@Base+0x838>
   11d48:	b	11fd0 <close_stdout@@Base+0x964>
   11d4c:	b	12128 <close_stdout@@Base+0xabc>
   11d50:	b	11ea4 <close_stdout@@Base+0x838>
   11d54:	b	11fd0 <close_stdout@@Base+0x964>
   11d58:	b	11ea4 <close_stdout@@Base+0x838>
   11d5c:	b	11fd0 <close_stdout@@Base+0x964>
   11d60:	b	11ea4 <close_stdout@@Base+0x838>
   11d64:	b	11ea4 <close_stdout@@Base+0x838>
   11d68:	b	11ea4 <close_stdout@@Base+0x838>
   11d6c:	b	11ea4 <close_stdout@@Base+0x838>
   11d70:	b	11ea4 <close_stdout@@Base+0x838>
   11d74:	b	11ea4 <close_stdout@@Base+0x838>
   11d78:	b	11ea4 <close_stdout@@Base+0x838>
   11d7c:	b	11ea4 <close_stdout@@Base+0x838>
   11d80:	b	11ea4 <close_stdout@@Base+0x838>
   11d84:	b	11ea4 <close_stdout@@Base+0x838>
   11d88:	b	11ea4 <close_stdout@@Base+0x838>
   11d8c:	b	11ea4 <close_stdout@@Base+0x838>
   11d90:	b	11ea4 <close_stdout@@Base+0x838>
   11d94:	b	11ea4 <close_stdout@@Base+0x838>
   11d98:	b	11ea4 <close_stdout@@Base+0x838>
   11d9c:	b	11ea4 <close_stdout@@Base+0x838>
   11da0:	b	11ea4 <close_stdout@@Base+0x838>
   11da4:	b	11ea4 <close_stdout@@Base+0x838>
   11da8:	b	11ea4 <close_stdout@@Base+0x838>
   11dac:	b	11ea4 <close_stdout@@Base+0x838>
   11db0:	b	11ea4 <close_stdout@@Base+0x838>
   11db4:	b	11ea4 <close_stdout@@Base+0x838>
   11db8:	b	11ea4 <close_stdout@@Base+0x838>
   11dbc:	b	11ea4 <close_stdout@@Base+0x838>
   11dc0:	b	11ea4 <close_stdout@@Base+0x838>
   11dc4:	b	11ea4 <close_stdout@@Base+0x838>
   11dc8:	b	11fb0 <close_stdout@@Base+0x944>
   11dcc:	b	11fd0 <close_stdout@@Base+0x964>
   11dd0:	b	11fb0 <close_stdout@@Base+0x944>
   11dd4:	b	11fc8 <close_stdout@@Base+0x95c>
   11dd8:	ldr	r3, [sp, #160]	; 0xa0
   11ddc:	cmp	r3, #2
   11de0:	beq	1266c <close_stdout@@Base+0x1000>
   11de4:	cmp	r3, #3
   11de8:	bne	11ea4 <close_stdout@@Base+0x838>
   11dec:	ldr	r1, [sp, #164]	; 0xa4
   11df0:	tst	r1, #4
   11df4:	beq	11ea4 <close_stdout@@Base+0x838>
   11df8:	add	r3, fp, #2
   11dfc:	cmp	r8, r3
   11e00:	bls	11ea4 <close_stdout@@Base+0x838>
   11e04:	ldrb	r2, [r5, #1]
   11e08:	mov	r1, #1
   11e0c:	cmp	r2, #63	; 0x3f
   11e10:	bne	11ea4 <close_stdout@@Base+0x838>
   11e14:	ldr	r0, [sp, #32]
   11e18:	ldrb	ip, [r0, r3]
   11e1c:	sub	r0, ip, #33	; 0x21
   11e20:	uxtb	r0, r0
   11e24:	cmp	r0, #29
   11e28:	bhi	11ea4 <close_stdout@@Base+0x838>
   11e2c:	lsl	r1, r1, r0
   11e30:	movw	r0, #20929	; 0x51c1
   11e34:	movt	r0, #14336	; 0x3800
   11e38:	and	r0, r1, r0
   11e3c:	cmp	r0, #0
   11e40:	beq	11ea4 <close_stdout@@Base+0x838>
   11e44:	ldr	r1, [sp, #36]	; 0x24
   11e48:	cmp	r1, #0
   11e4c:	bne	11fec <close_stdout@@Base+0x980>
   11e50:	cmp	r9, sl
   11e54:	mov	r4, ip
   11e58:	mov	fp, r3
   11e5c:	ldrcc	r0, [sp, #40]	; 0x28
   11e60:	strbcc	r2, [r0, r9]
   11e64:	add	r2, r9, #1
   11e68:	cmp	sl, r2
   11e6c:	ldrhi	r0, [sp, #40]	; 0x28
   11e70:	movhi	r1, #34	; 0x22
   11e74:	strbhi	r1, [r0, r2]
   11e78:	add	r2, r9, #2
   11e7c:	cmp	sl, r2
   11e80:	ldrhi	r0, [sp, #40]	; 0x28
   11e84:	movhi	r1, #34	; 0x22
   11e88:	strbhi	r1, [r0, r2]
   11e8c:	add	r2, r9, #3
   11e90:	cmp	sl, r2
   11e94:	add	r9, r9, #4
   11e98:	ldrhi	r0, [sp, #40]	; 0x28
   11e9c:	movhi	r1, #63	; 0x3f
   11ea0:	strbhi	r1, [r0, r2]
   11ea4:	ldr	r0, [sp, #44]	; 0x2c
   11ea8:	cmp	r0, #0
   11eac:	bne	11ed4 <close_stdout@@Base+0x868>
   11eb0:	ldr	r1, [sp, #48]	; 0x30
   11eb4:	cmp	r1, #0
   11eb8:	beq	11ed4 <close_stdout@@Base+0x868>
   11ebc:	ubfx	r2, r4, #5, #8
   11ec0:	and	r3, r4, #31
   11ec4:	ldr	r2, [r1, r2, lsl #2]
   11ec8:	lsr	r3, r2, r3
   11ecc:	tst	r3, #1
   11ed0:	bne	11edc <close_stdout@@Base+0x870>
   11ed4:	cmp	r6, #0
   11ed8:	beq	11efc <close_stdout@@Base+0x890>
   11edc:	ldr	r2, [sp, #36]	; 0x24
   11ee0:	cmp	r2, #0
   11ee4:	bne	11fec <close_stdout@@Base+0x980>
   11ee8:	cmp	r9, sl
   11eec:	ldrcc	r0, [sp, #40]	; 0x28
   11ef0:	movcc	r3, #92	; 0x5c
   11ef4:	strbcc	r3, [r0, r9]
   11ef8:	add	r9, r9, #1
   11efc:	add	fp, fp, #1
   11f00:	cmp	r9, sl
   11f04:	ldrcc	r1, [sp, #40]	; 0x28
   11f08:	strbcc	r4, [r1, r9]
   11f0c:	cmn	r8, #1
   11f10:	add	r9, r9, #1
   11f14:	bne	11b9c <close_stdout@@Base+0x530>
   11f18:	ldr	r2, [sp, #32]
   11f1c:	ldrb	r3, [r2, fp]
   11f20:	adds	r3, r3, #0
   11f24:	movne	r3, #1
   11f28:	cmp	r3, #0
   11f2c:	bne	11bac <close_stdout@@Base+0x540>
   11f30:	ldr	r3, [sp, #160]	; 0xa0
   11f34:	cmp	r9, #0
   11f38:	cmpeq	r3, #2
   11f3c:	bne	11f4c <close_stdout@@Base+0x8e0>
   11f40:	ldr	r0, [sp, #36]	; 0x24
   11f44:	cmp	r0, #0
   11f48:	bne	11fec <close_stdout@@Base+0x980>
   11f4c:	ldr	r1, [sp, #36]	; 0x24
   11f50:	ldr	r2, [sp, #52]	; 0x34
   11f54:	eor	r3, r1, #1
   11f58:	cmp	r2, #0
   11f5c:	moveq	r3, #0
   11f60:	andne	r3, r3, #1
   11f64:	cmp	r3, #0
   11f68:	beq	11f94 <close_stdout@@Base+0x928>
   11f6c:	ldrb	r3, [r2]
   11f70:	cmp	r3, #0
   11f74:	beq	11f94 <close_stdout@@Base+0x928>
   11f78:	ldr	r1, [sp, #40]	; 0x28
   11f7c:	cmp	sl, r9
   11f80:	strbhi	r3, [r1, r9]
   11f84:	ldrb	r3, [r2, #1]!
   11f88:	add	r9, r9, #1
   11f8c:	cmp	r3, #0
   11f90:	bne	11f7c <close_stdout@@Base+0x910>
   11f94:	cmp	r9, sl
   11f98:	movcs	r0, r9
   11f9c:	ldrcc	r1, [sp, #40]	; 0x28
   11fa0:	movcc	r3, #0
   11fa4:	movcc	r0, r9
   11fa8:	strbcc	r3, [r1, r9]
   11fac:	b	12028 <close_stdout@@Base+0x9bc>
   11fb0:	cmn	r8, #1
   11fb4:	beq	1267c <close_stdout@@Base+0x1010>
   11fb8:	subs	r3, r8, #1
   11fbc:	movne	r3, #1
   11fc0:	cmp	r3, #0
   11fc4:	bne	11ea4 <close_stdout@@Base+0x838>
   11fc8:	cmp	fp, #0
   11fcc:	bne	11ea4 <close_stdout@@Base+0x838>
   11fd0:	ldr	r3, [sp, #36]	; 0x24
   11fd4:	ldr	r0, [sp, #160]	; 0xa0
   11fd8:	cmp	r0, #2
   11fdc:	movne	r3, #0
   11fe0:	andeq	r3, r3, #1
   11fe4:	cmp	r3, #0
   11fe8:	beq	11ea4 <close_stdout@@Base+0x838>
   11fec:	ldr	r2, [sp, #164]	; 0xa4
   11ff0:	mov	ip, #0
   11ff4:	ldr	r0, [sp, #160]	; 0xa0
   11ff8:	bic	r3, r2, #2
   11ffc:	ldr	r1, [sp, #72]	; 0x48
   12000:	ldr	r2, [sp, #68]	; 0x44
   12004:	stm	sp, {r0, r3}
   12008:	mov	r3, r8
   1200c:	str	r1, [sp, #12]
   12010:	mov	r1, sl
   12014:	str	r2, [sp, #16]
   12018:	ldr	r0, [sp, #40]	; 0x28
   1201c:	ldr	r2, [sp, #32]
   12020:	str	ip, [sp, #8]
   12024:	bl	11abc <close_stdout@@Base+0x450>
   12028:	ldr	r1, [sp, #56]	; 0x38
   1202c:	ldr	r2, [sp, #116]	; 0x74
   12030:	ldr	r3, [r1]
   12034:	cmp	r2, r3
   12038:	bne	1276c <close_stdout@@Base+0x1100>
   1203c:	add	sp, sp, #124	; 0x7c
   12040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12044:	mov	r3, #114	; 0x72
   12048:	ldr	r2, [sp, #36]	; 0x24
   1204c:	ldr	r0, [sp, #160]	; 0xa0
   12050:	cmp	r0, #2
   12054:	movne	r2, #0
   12058:	andeq	r2, r2, #1
   1205c:	cmp	r2, #0
   12060:	bne	11fec <close_stdout@@Base+0x980>
   12064:	ldr	r1, [sp, #24]
   12068:	cmp	r1, #0
   1206c:	beq	11ea4 <close_stdout@@Base+0x838>
   12070:	mov	r4, r3
   12074:	b	11edc <close_stdout@@Base+0x870>
   12078:	mov	r3, #98	; 0x62
   1207c:	b	12064 <close_stdout@@Base+0x9f8>
   12080:	mov	r3, #102	; 0x66
   12084:	b	12064 <close_stdout@@Base+0x9f8>
   12088:	mov	r3, #118	; 0x76
   1208c:	b	12064 <close_stdout@@Base+0x9f8>
   12090:	mov	r3, #97	; 0x61
   12094:	b	12064 <close_stdout@@Base+0x9f8>
   12098:	mov	r3, #110	; 0x6e
   1209c:	b	12048 <close_stdout@@Base+0x9dc>
   120a0:	mov	r3, #116	; 0x74
   120a4:	b	12048 <close_stdout@@Base+0x9dc>
   120a8:	ldr	r2, [sp, #24]
   120ac:	cmp	r2, #0
   120b0:	beq	12658 <close_stdout@@Base+0xfec>
   120b4:	ldr	r3, [sp, #36]	; 0x24
   120b8:	cmp	r3, #0
   120bc:	bne	11fec <close_stdout@@Base+0x980>
   120c0:	cmp	r9, sl
   120c4:	add	r2, r9, #1
   120c8:	ldrcc	r0, [sp, #40]	; 0x28
   120cc:	movcc	r3, #92	; 0x5c
   120d0:	strbcc	r3, [r0, r9]
   120d4:	add	r3, fp, #1
   120d8:	cmp	r8, r3
   120dc:	bls	1211c <close_stdout@@Base+0xab0>
   120e0:	ldr	r1, [sp, #32]
   120e4:	ldrb	r3, [r1, r3]
   120e8:	sub	r3, r3, #48	; 0x30
   120ec:	cmp	r3, #9
   120f0:	bhi	1211c <close_stdout@@Base+0xab0>
   120f4:	cmp	sl, r2
   120f8:	ldrhi	r0, [sp, #40]	; 0x28
   120fc:	movhi	r3, #48	; 0x30
   12100:	strbhi	r3, [r0, r2]
   12104:	add	r3, r9, #2
   12108:	cmp	sl, r3
   1210c:	ldrhi	r1, [sp, #40]	; 0x28
   12110:	movhi	r2, #48	; 0x30
   12114:	strbhi	r2, [r1, r3]
   12118:	add	r2, r9, #3
   1211c:	mov	r9, r2
   12120:	mov	r4, #48	; 0x30
   12124:	b	11eb0 <close_stdout@@Base+0x844>
   12128:	ldr	r1, [sp, #76]	; 0x4c
   1212c:	cmp	r1, #0
   12130:	beq	1213c <close_stdout@@Base+0xad0>
   12134:	cmp	r7, #0
   12138:	bne	11efc <close_stdout@@Base+0x890>
   1213c:	mov	r3, r4
   12140:	b	12048 <close_stdout@@Base+0x9dc>
   12144:	ldr	r1, [sp, #160]	; 0xa0
   12148:	cmp	r1, #2
   1214c:	bne	11ea4 <close_stdout@@Base+0x838>
   12150:	ldr	r2, [sp, #36]	; 0x24
   12154:	cmp	r2, #0
   12158:	bne	11fec <close_stdout@@Base+0x980>
   1215c:	cmp	r9, sl
   12160:	ldrcc	r0, [sp, #40]	; 0x28
   12164:	movcc	r3, #39	; 0x27
   12168:	strbcc	r3, [r0, r9]
   1216c:	add	r3, r9, #1
   12170:	cmp	sl, r3
   12174:	ldrhi	r1, [sp, #40]	; 0x28
   12178:	movhi	r2, #92	; 0x5c
   1217c:	strbhi	r2, [r1, r3]
   12180:	add	r3, r9, #2
   12184:	cmp	sl, r3
   12188:	add	r9, r9, #3
   1218c:	ldrhi	r0, [sp, #40]	; 0x28
   12190:	movhi	r2, #39	; 0x27
   12194:	strbhi	r2, [r0, r3]
   12198:	b	11ea4 <close_stdout@@Base+0x838>
   1219c:	ldr	r1, [sp, #64]	; 0x40
   121a0:	cmp	r1, #1
   121a4:	bne	1249c <close_stdout@@Base+0xe30>
   121a8:	bl	10ffc <__ctype_b_loc@plt>
   121ac:	ldr	r2, [sp, #64]	; 0x40
   121b0:	sxth	r3, r4
   121b4:	str	r2, [sp, #60]	; 0x3c
   121b8:	lsl	r3, r3, #1
   121bc:	ldr	r2, [r0]
   121c0:	ldrh	r2, [r2, r3]
   121c4:	eor	r2, r2, #16384	; 0x4000
   121c8:	ubfx	r2, r2, #14, #1
   121cc:	ldr	r1, [sp, #24]
   121d0:	ands	r2, r2, r1
   121d4:	beq	11ea4 <close_stdout@@Base+0x838>
   121d8:	ldr	r3, [sp, #60]	; 0x3c
   121dc:	mov	r0, #92	; 0x5c
   121e0:	ldr	r7, [sp, #36]	; 0x24
   121e4:	add	r1, r3, fp
   121e8:	str	r8, [sp, #60]	; 0x3c
   121ec:	ldr	r3, [sp, #40]	; 0x28
   121f0:	b	12254 <close_stdout@@Base+0xbe8>
   121f4:	cmp	r7, #0
   121f8:	bne	12694 <close_stdout@@Base+0x1028>
   121fc:	add	ip, r9, #1
   12200:	cmp	r9, sl
   12204:	strbcc	r0, [r3, r9]
   12208:	cmp	sl, ip
   1220c:	lsrhi	r8, r4, #6
   12210:	addhi	r8, r8, #48	; 0x30
   12214:	strbhi	r8, [r3, ip]
   12218:	add	ip, r9, #2
   1221c:	add	r9, r9, #3
   12220:	cmp	sl, ip
   12224:	ubfxhi	r8, r4, #3, #3
   12228:	and	r4, r4, #7
   1222c:	add	r4, r4, #48	; 0x30
   12230:	addhi	r8, r8, #48	; 0x30
   12234:	strbhi	r8, [r3, ip]
   12238:	add	fp, fp, #1
   1223c:	cmp	r1, fp
   12240:	bls	12280 <close_stdout@@Base+0xc14>
   12244:	cmp	r9, sl
   12248:	strbcc	r4, [r3, r9]
   1224c:	ldrb	r4, [r5, #1]!
   12250:	add	r9, r9, #1
   12254:	cmp	r2, #0
   12258:	bne	121f4 <close_stdout@@Base+0xb88>
   1225c:	cmp	r6, #0
   12260:	beq	12238 <close_stdout@@Base+0xbcc>
   12264:	add	fp, fp, #1
   12268:	cmp	r9, sl
   1226c:	strbcc	r0, [r3, r9]
   12270:	cmp	r1, fp
   12274:	add	r9, r9, #1
   12278:	mov	r6, #0
   1227c:	bhi	12244 <close_stdout@@Base+0xbd8>
   12280:	ldr	r8, [sp, #60]	; 0x3c
   12284:	b	11f00 <close_stdout@@Base+0x894>
   12288:	ldr	r3, [sp, #36]	; 0x24
   1228c:	cmp	r3, #0
   12290:	bne	12794 <close_stdout@@Base+0x1128>
   12294:	cmp	sl, #0
   12298:	beq	126ac <close_stdout@@Base+0x1040>
   1229c:	ldr	r1, [sp, #40]	; 0x28
   122a0:	mov	r0, #1
   122a4:	ldr	r2, [pc, #1296]	; 127bc <close_stdout@@Base+0x1150>
   122a8:	mov	r3, #34	; 0x22
   122ac:	str	r0, [sp, #24]
   122b0:	mov	r9, r0
   122b4:	add	r2, pc, r2
   122b8:	str	r0, [sp, #28]
   122bc:	strb	r3, [r1]
   122c0:	str	r2, [sp, #52]	; 0x34
   122c4:	b	11b70 <close_stdout@@Base+0x504>
   122c8:	ldr	r3, [pc, #1264]	; 127c0 <close_stdout@@Base+0x1154>
   122cc:	mov	r2, #1
   122d0:	mov	r0, #3
   122d4:	str	r2, [sp, #36]	; 0x24
   122d8:	add	r3, pc, r3
   122dc:	str	r2, [sp, #24]
   122e0:	str	r3, [sp, #52]	; 0x34
   122e4:	mov	r9, #0
   122e8:	str	r2, [sp, #28]
   122ec:	str	r0, [sp, #160]	; 0xa0
   122f0:	b	11b70 <close_stdout@@Base+0x504>
   122f4:	mov	r0, #0
   122f8:	mov	r1, #1
   122fc:	str	r0, [sp, #36]	; 0x24
   12300:	mov	r9, r0
   12304:	str	r1, [sp, #24]
   12308:	str	r0, [sp, #28]
   1230c:	str	r0, [sp, #52]	; 0x34
   12310:	b	11b70 <close_stdout@@Base+0x504>
   12314:	ldr	r3, [sp, #160]	; 0xa0
   12318:	cmp	r3, #8
   1231c:	beq	12348 <close_stdout@@Base+0xcdc>
   12320:	ldr	r0, [pc, #1180]	; 127c4 <close_stdout@@Base+0x1158>
   12324:	mov	r1, r3
   12328:	add	r0, pc, r0
   1232c:	bl	11958 <close_stdout@@Base+0x2ec>
   12330:	ldr	r1, [sp, #160]	; 0xa0
   12334:	str	r0, [sp, #72]	; 0x48
   12338:	ldr	r0, [pc, #1160]	; 127c8 <close_stdout@@Base+0x115c>
   1233c:	add	r0, pc, r0
   12340:	bl	11958 <close_stdout@@Base+0x2ec>
   12344:	str	r0, [sp, #68]	; 0x44
   12348:	ldr	r0, [sp, #36]	; 0x24
   1234c:	cmp	r0, #0
   12350:	movne	r9, #0
   12354:	bne	1238c <close_stdout@@Base+0xd20>
   12358:	ldr	r1, [sp, #72]	; 0x48
   1235c:	ldrb	r3, [r1]
   12360:	cmp	r3, #0
   12364:	beq	12764 <close_stdout@@Base+0x10f8>
   12368:	mov	r2, r1
   1236c:	ldr	r1, [sp, #40]	; 0x28
   12370:	mov	r9, r0
   12374:	cmp	r9, sl
   12378:	strbcc	r3, [r1, r9]
   1237c:	ldrb	r3, [r2, #1]!
   12380:	add	r9, r9, #1
   12384:	cmp	r3, #0
   12388:	bne	12374 <close_stdout@@Base+0xd08>
   1238c:	ldr	r0, [sp, #68]	; 0x44
   12390:	str	r0, [sp, #52]	; 0x34
   12394:	bl	11020 <strlen@plt>
   12398:	mov	r2, #1
   1239c:	str	r2, [sp, #24]
   123a0:	str	r0, [sp, #28]
   123a4:	b	11b70 <close_stdout@@Base+0x504>
   123a8:	ldr	r3, [pc, #1052]	; 127cc <close_stdout@@Base+0x1160>
   123ac:	mov	r2, #0
   123b0:	mov	r1, #1
   123b4:	mov	r0, #2
   123b8:	add	r3, pc, r3
   123bc:	str	r1, [sp, #36]	; 0x24
   123c0:	str	r2, [sp, #24]
   123c4:	mov	r9, r2
   123c8:	str	r1, [sp, #28]
   123cc:	str	r3, [sp, #52]	; 0x34
   123d0:	str	r0, [sp, #160]	; 0xa0
   123d4:	b	11b70 <close_stdout@@Base+0x504>
   123d8:	ldr	r3, [sp, #36]	; 0x24
   123dc:	cmp	r3, #0
   123e0:	bne	12770 <close_stdout@@Base+0x1104>
   123e4:	cmp	sl, #0
   123e8:	beq	126cc <close_stdout@@Base+0x1060>
   123ec:	ldr	r1, [sp, #40]	; 0x28
   123f0:	mov	r3, #39	; 0x27
   123f4:	ldr	r2, [sp, #36]	; 0x24
   123f8:	mov	r0, #1
   123fc:	mov	r9, r0
   12400:	str	r0, [sp, #28]
   12404:	strb	r3, [r1]
   12408:	ldr	r3, [pc, #960]	; 127d0 <close_stdout@@Base+0x1164>
   1240c:	str	r2, [sp, #24]
   12410:	add	r3, pc, r3
   12414:	str	r3, [sp, #52]	; 0x34
   12418:	b	11b70 <close_stdout@@Base+0x504>
   1241c:	ldr	r2, [sp, #28]
   12420:	cmp	r2, #1
   12424:	add	r4, fp, r2
   12428:	movls	r3, #0
   1242c:	movhi	r3, #1
   12430:	cmn	r8, #1
   12434:	movne	r3, #0
   12438:	cmp	r3, #0
   1243c:	beq	1244c <close_stdout@@Base+0xde0>
   12440:	ldr	r0, [sp, #32]
   12444:	bl	11020 <strlen@plt>
   12448:	mov	r8, r0
   1244c:	cmp	r8, r4
   12450:	ldrcc	r3, [sp, #32]
   12454:	movcc	r6, #0
   12458:	addcc	r5, r3, fp
   1245c:	bcc	11bcc <close_stdout@@Base+0x560>
   12460:	ldr	r0, [sp, #32]
   12464:	ldr	r1, [sp, #52]	; 0x34
   12468:	add	r5, r0, fp
   1246c:	ldr	r2, [sp, #28]
   12470:	mov	r0, r5
   12474:	bl	10f00 <memcmp@plt>
   12478:	cmp	r0, #0
   1247c:	bne	12494 <close_stdout@@Base+0xe28>
   12480:	ldr	r1, [sp, #36]	; 0x24
   12484:	cmp	r1, #0
   12488:	bne	11fec <close_stdout@@Base+0x980>
   1248c:	mov	r6, #1
   12490:	b	11bcc <close_stdout@@Base+0x560>
   12494:	mov	r6, #0
   12498:	b	11bcc <close_stdout@@Base+0x560>
   1249c:	add	r7, sp, #108	; 0x6c
   124a0:	cmn	r8, #1
   124a4:	mov	r3, #0
   124a8:	str	r3, [sp, #108]	; 0x6c
   124ac:	str	r3, [r7, #4]
   124b0:	beq	1269c <close_stdout@@Base+0x1030>
   124b4:	mov	r1, #0
   124b8:	ldr	r0, [sp, #32]
   124bc:	mov	ip, #1
   124c0:	str	r9, [sp, #88]	; 0x58
   124c4:	str	r6, [sp, #96]	; 0x60
   124c8:	mov	r9, r1
   124cc:	str	r5, [sp, #100]	; 0x64
   124d0:	mov	r6, ip
   124d4:	mov	r5, r7
   124d8:	add	r3, sp, #104	; 0x68
   124dc:	sub	r0, r0, #1
   124e0:	str	r3, [sp, #80]	; 0x50
   124e4:	str	r0, [sp, #84]	; 0x54
   124e8:	str	r1, [sp, #60]	; 0x3c
   124ec:	str	r4, [sp, #92]	; 0x5c
   124f0:	ldr	r2, [sp, #32]
   124f4:	add	r7, r9, fp
   124f8:	add	r0, sp, #104	; 0x68
   124fc:	mov	r3, r5
   12500:	add	r4, r2, r7
   12504:	rsb	r2, r7, r8
   12508:	mov	r1, r4
   1250c:	bl	10f84 <mbrtowc@plt>
   12510:	subs	r2, r0, #0
   12514:	beq	12620 <close_stdout@@Base+0xfb4>
   12518:	cmn	r2, #1
   1251c:	beq	12748 <close_stdout@@Base+0x10dc>
   12520:	cmn	r2, #2
   12524:	beq	126ec <close_stdout@@Base+0x1080>
   12528:	ldr	r3, [sp, #36]	; 0x24
   1252c:	ldr	r0, [sp, #160]	; 0xa0
   12530:	cmp	r0, #2
   12534:	movne	r3, #0
   12538:	andeq	r3, r3, #1
   1253c:	cmp	r3, #0
   12540:	beq	125fc <close_stdout@@Base+0xf90>
   12544:	cmp	r2, #1
   12548:	beq	125fc <close_stdout@@Base+0xf90>
   1254c:	ldr	r1, [sp, #84]	; 0x54
   12550:	add	r3, r1, r2
   12554:	add	r7, r3, r7
   12558:	ldrb	r3, [r4, #1]!
   1255c:	sub	r3, r3, #91	; 0x5b
   12560:	cmp	r3, #33	; 0x21
   12564:	addls	pc, pc, r3, lsl #2
   12568:	b	125f4 <close_stdout@@Base+0xf88>
   1256c:	b	11fec <close_stdout@@Base+0x980>
   12570:	b	11fec <close_stdout@@Base+0x980>
   12574:	b	125f4 <close_stdout@@Base+0xf88>
   12578:	b	11fec <close_stdout@@Base+0x980>
   1257c:	b	125f4 <close_stdout@@Base+0xf88>
   12580:	b	11fec <close_stdout@@Base+0x980>
   12584:	b	125f4 <close_stdout@@Base+0xf88>
   12588:	b	125f4 <close_stdout@@Base+0xf88>
   1258c:	b	125f4 <close_stdout@@Base+0xf88>
   12590:	b	125f4 <close_stdout@@Base+0xf88>
   12594:	b	125f4 <close_stdout@@Base+0xf88>
   12598:	b	125f4 <close_stdout@@Base+0xf88>
   1259c:	b	125f4 <close_stdout@@Base+0xf88>
   125a0:	b	125f4 <close_stdout@@Base+0xf88>
   125a4:	b	125f4 <close_stdout@@Base+0xf88>
   125a8:	b	125f4 <close_stdout@@Base+0xf88>
   125ac:	b	125f4 <close_stdout@@Base+0xf88>
   125b0:	b	125f4 <close_stdout@@Base+0xf88>
   125b4:	b	125f4 <close_stdout@@Base+0xf88>
   125b8:	b	125f4 <close_stdout@@Base+0xf88>
   125bc:	b	125f4 <close_stdout@@Base+0xf88>
   125c0:	b	125f4 <close_stdout@@Base+0xf88>
   125c4:	b	125f4 <close_stdout@@Base+0xf88>
   125c8:	b	125f4 <close_stdout@@Base+0xf88>
   125cc:	b	125f4 <close_stdout@@Base+0xf88>
   125d0:	b	125f4 <close_stdout@@Base+0xf88>
   125d4:	b	125f4 <close_stdout@@Base+0xf88>
   125d8:	b	125f4 <close_stdout@@Base+0xf88>
   125dc:	b	125f4 <close_stdout@@Base+0xf88>
   125e0:	b	125f4 <close_stdout@@Base+0xf88>
   125e4:	b	125f4 <close_stdout@@Base+0xf88>
   125e8:	b	125f4 <close_stdout@@Base+0xf88>
   125ec:	b	125f4 <close_stdout@@Base+0xf88>
   125f0:	b	11fec <close_stdout@@Base+0x980>
   125f4:	cmp	r4, r7
   125f8:	bne	12558 <close_stdout@@Base+0xeec>
   125fc:	ldr	r0, [sp, #104]	; 0x68
   12600:	add	r9, r9, r2
   12604:	bl	10f3c <iswprint@plt>
   12608:	cmp	r0, #0
   1260c:	mov	r0, r5
   12610:	moveq	r6, #0
   12614:	bl	10ef4 <mbsinit@plt>
   12618:	cmp	r0, #0
   1261c:	beq	124f0 <close_stdout@@Base+0xe84>
   12620:	mov	ip, r6
   12624:	eor	r2, ip, #1
   12628:	str	r9, [sp, #60]	; 0x3c
   1262c:	ldr	r4, [sp, #92]	; 0x5c
   12630:	uxtb	r2, r2
   12634:	ldr	r9, [sp, #88]	; 0x58
   12638:	ldr	r6, [sp, #96]	; 0x60
   1263c:	ldr	r5, [sp, #100]	; 0x64
   12640:	ldr	r3, [sp, #60]	; 0x3c
   12644:	cmp	r3, #1
   12648:	bls	121cc <close_stdout@@Base+0xb60>
   1264c:	ldr	r0, [sp, #24]
   12650:	and	r2, r2, r0
   12654:	b	121d8 <close_stdout@@Base+0xb6c>
   12658:	ldr	r2, [sp, #164]	; 0xa4
   1265c:	tst	r2, #1
   12660:	addne	fp, fp, #1
   12664:	bne	11b94 <close_stdout@@Base+0x528>
   12668:	b	11ea4 <close_stdout@@Base+0x838>
   1266c:	ldr	r0, [sp, #36]	; 0x24
   12670:	cmp	r0, #0
   12674:	beq	11ea4 <close_stdout@@Base+0x838>
   12678:	b	11fec <close_stdout@@Base+0x980>
   1267c:	ldr	r2, [sp, #32]
   12680:	ldrb	r3, [r2, #1]
   12684:	adds	r3, r3, #0
   12688:	movne	r3, #1
   1268c:	b	11fc0 <close_stdout@@Base+0x954>
   12690:	bl	110f8 <abort@plt>
   12694:	ldr	r8, [sp, #60]	; 0x3c
   12698:	b	11fec <close_stdout@@Base+0x980>
   1269c:	ldr	r0, [sp, #32]
   126a0:	bl	11020 <strlen@plt>
   126a4:	mov	r8, r0
   126a8:	b	124b4 <close_stdout@@Base+0xe48>
   126ac:	ldr	r2, [pc, #288]	; 127d4 <close_stdout@@Base+0x1168>
   126b0:	mov	r1, #1
   126b4:	mov	r9, r1
   126b8:	str	r1, [sp, #24]
   126bc:	add	r2, pc, r2
   126c0:	str	r1, [sp, #28]
   126c4:	str	r2, [sp, #52]	; 0x34
   126c8:	b	11b70 <close_stdout@@Base+0x504>
   126cc:	ldr	r2, [pc, #260]	; 127d8 <close_stdout@@Base+0x116c>
   126d0:	mov	r3, #1
   126d4:	mov	r9, r3
   126d8:	str	r3, [sp, #28]
   126dc:	add	r2, pc, r2
   126e0:	str	sl, [sp, #24]
   126e4:	str	r2, [sp, #52]	; 0x34
   126e8:	b	11b70 <close_stdout@@Base+0x504>
   126ec:	cmp	r8, r7
   126f0:	str	r9, [sp, #60]	; 0x3c
   126f4:	mov	ip, r4
   126f8:	ldr	r6, [sp, #96]	; 0x60
   126fc:	ldr	r9, [sp, #88]	; 0x58
   12700:	ldr	r4, [sp, #92]	; 0x5c
   12704:	ldr	r5, [sp, #100]	; 0x64
   12708:	bls	12740 <close_stdout@@Base+0x10d4>
   1270c:	ldrb	r3, [ip]
   12710:	cmp	r3, #0
   12714:	beq	12740 <close_stdout@@Base+0x10d4>
   12718:	ldr	r3, [sp, #60]	; 0x3c
   1271c:	b	1272c <close_stdout@@Base+0x10c0>
   12720:	ldrb	r2, [r5, r3]
   12724:	cmp	r2, #0
   12728:	beq	1273c <close_stdout@@Base+0x10d0>
   1272c:	add	r3, r3, #1
   12730:	add	r2, fp, r3
   12734:	cmp	r8, r2
   12738:	bhi	12720 <close_stdout@@Base+0x10b4>
   1273c:	str	r3, [sp, #60]	; 0x3c
   12740:	mov	r2, #1
   12744:	b	12640 <close_stdout@@Base+0xfd4>
   12748:	str	r9, [sp, #60]	; 0x3c
   1274c:	mov	r2, #1
   12750:	ldr	r4, [sp, #92]	; 0x5c
   12754:	ldr	r6, [sp, #96]	; 0x60
   12758:	ldr	r9, [sp, #88]	; 0x58
   1275c:	ldr	r5, [sp, #100]	; 0x64
   12760:	b	12640 <close_stdout@@Base+0xfd4>
   12764:	ldr	r9, [sp, #36]	; 0x24
   12768:	b	1238c <close_stdout@@Base+0xd20>
   1276c:	bl	10f18 <__stack_chk_fail@plt>
   12770:	ldr	r1, [pc, #100]	; 127dc <close_stdout@@Base+0x1170>
   12774:	mov	r3, #0
   12778:	mov	r0, #1
   1277c:	str	r3, [sp, #24]
   12780:	add	r1, pc, r1
   12784:	str	r0, [sp, #28]
   12788:	mov	r9, r3
   1278c:	str	r1, [sp, #52]	; 0x34
   12790:	b	11b70 <close_stdout@@Base+0x504>
   12794:	ldr	r0, [pc, #68]	; 127e0 <close_stdout@@Base+0x1174>
   12798:	mov	r3, #1
   1279c:	mov	r9, #0
   127a0:	str	r3, [sp, #24]
   127a4:	add	r0, pc, r0
   127a8:	str	r3, [sp, #28]
   127ac:	str	r0, [sp, #52]	; 0x34
   127b0:	b	11b70 <close_stdout@@Base+0x504>
   127b4:	andeq	r3, r1, r0, lsr #10
   127b8:	andeq	r0, r0, r8, ror #1
   127bc:	andeq	r2, r0, r0, ror #3
   127c0:			; <UNDEFINED> instruction: 0x000021bc
   127c4:	andeq	r2, r0, r8, ror r1
   127c8:	andeq	r2, r0, r4, asr r1
   127cc:	ldrdeq	r2, [r0], -r8
   127d0:	andeq	r2, r0, r0, lsl #1
   127d4:	ldrdeq	r1, [r0], -r8
   127d8:			; <UNDEFINED> instruction: 0x00001db4
   127dc:	andeq	r1, r0, r0, lsl sp
   127e0:	strdeq	r1, [r0], -r0
   127e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e8:	sub	sp, sp, #44	; 0x2c
   127ec:	mov	r6, r0
   127f0:	mov	r9, r1
   127f4:	mov	sl, r2
   127f8:	mov	r4, r3
   127fc:	bl	11038 <__errno_location@plt>
   12800:	ldr	fp, [pc, #412]	; 129a4 <close_stdout@@Base+0x1338>
   12804:	cmp	r6, #0
   12808:	add	fp, pc, fp
   1280c:	ldr	r5, [fp]
   12810:	ldr	r1, [r0]
   12814:	mov	r8, r0
   12818:	str	r1, [sp, #36]	; 0x24
   1281c:	blt	1299c <close_stdout@@Base+0x1330>
   12820:	ldr	r3, [pc, #384]	; 129a8 <close_stdout@@Base+0x133c>
   12824:	add	r3, pc, r3
   12828:	ldr	r3, [r3]
   1282c:	cmp	r6, r3
   12830:	bcc	12884 <close_stdout@@Base+0x1218>
   12834:	add	r7, r6, #1
   12838:	cmn	r7, #-536870911	; 0xe0000001
   1283c:	bhi	129a0 <close_stdout@@Base+0x1334>
   12840:	add	r3, fp, #4
   12844:	cmp	r5, r3
   12848:	beq	12974 <close_stdout@@Base+0x1308>
   1284c:	mov	r0, r5
   12850:	lsl	r1, r7, #3
   12854:	bl	1367c <close_stdout@@Base+0x2010>
   12858:	mov	r5, r0
   1285c:	str	r0, [fp]
   12860:	ldr	fp, [pc, #324]	; 129ac <close_stdout@@Base+0x1340>
   12864:	mov	r1, #0
   12868:	add	fp, pc, fp
   1286c:	ldr	r0, [fp]
   12870:	rsb	r2, r0, r7
   12874:	add	r0, r5, r0, lsl #3
   12878:	lsl	r2, r2, #3
   1287c:	bl	11050 <memset@plt>
   12880:	str	r7, [fp]
   12884:	add	r2, r4, #8
   12888:	str	r2, [sp, #32]
   1288c:	ldr	r1, [r4]
   12890:	add	fp, r5, r6, lsl #3
   12894:	ldr	lr, [sp, #32]
   12898:	mov	r2, r9
   1289c:	ldr	r3, [r4, #4]
   128a0:	ldr	ip, [r5, r6, lsl #3]
   128a4:	ldr	r7, [fp, #4]
   128a8:	orr	r3, r3, #1
   128ac:	str	r1, [sp]
   128b0:	str	r3, [sp, #4]
   128b4:	mov	r1, ip
   128b8:	str	lr, [sp, #8]
   128bc:	mov	r0, r7
   128c0:	ldr	lr, [r4, #40]	; 0x28
   128c4:	str	r3, [sp, #28]
   128c8:	mov	r3, sl
   128cc:	str	lr, [sp, #12]
   128d0:	ldr	lr, [r4, #44]	; 0x2c
   128d4:	str	ip, [sp, #24]
   128d8:	str	lr, [sp, #16]
   128dc:	bl	11abc <close_stdout@@Base+0x450>
   128e0:	ldr	ip, [sp, #24]
   128e4:	cmp	ip, r0
   128e8:	bhi	12960 <close_stdout@@Base+0x12f4>
   128ec:	ldr	r3, [pc, #188]	; 129b0 <close_stdout@@Base+0x1344>
   128f0:	add	r1, r0, #1
   128f4:	str	r1, [r5, r6, lsl #3]
   128f8:	add	r3, pc, r3
   128fc:	cmp	r7, r3
   12900:	beq	12914 <close_stdout@@Base+0x12a8>
   12904:	mov	r0, r7
   12908:	str	r1, [sp, #24]
   1290c:	bl	10ed0 <free@plt>
   12910:	ldr	r1, [sp, #24]
   12914:	mov	r0, r1
   12918:	str	r1, [sp, #24]
   1291c:	bl	13624 <close_stdout@@Base+0x1fb8>
   12920:	ldr	r3, [sp, #28]
   12924:	ldr	lr, [sp, #32]
   12928:	mov	r2, r9
   1292c:	str	r0, [fp, #4]
   12930:	mov	r7, r0
   12934:	ldr	ip, [r4]
   12938:	str	r3, [sp, #4]
   1293c:	mov	r3, sl
   12940:	str	lr, [sp, #8]
   12944:	str	ip, [sp]
   12948:	ldr	ip, [r4, #40]	; 0x28
   1294c:	ldr	r1, [sp, #24]
   12950:	str	ip, [sp, #12]
   12954:	ldr	ip, [r4, #44]	; 0x2c
   12958:	str	ip, [sp, #16]
   1295c:	bl	11abc <close_stdout@@Base+0x450>
   12960:	ldr	r1, [sp, #36]	; 0x24
   12964:	mov	r0, r7
   12968:	str	r1, [r8]
   1296c:	add	sp, sp, #44	; 0x2c
   12970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12974:	lsl	r1, r7, #3
   12978:	mov	r0, #0
   1297c:	str	r3, [sp, #24]
   12980:	bl	1367c <close_stdout@@Base+0x2010>
   12984:	ldr	r3, [sp, #24]
   12988:	mov	r5, r0
   1298c:	ldm	r3, {r0, r1}
   12990:	str	r5, [fp]
   12994:	stm	r5, {r0, r1}
   12998:	b	12860 <close_stdout@@Base+0x11f4>
   1299c:	bl	110f8 <abort@plt>
   129a0:	bl	13838 <close_stdout@@Base+0x21cc>
   129a4:	andeq	r2, r1, ip, asr #18
   129a8:	strdeq	r2, [r1], -ip
   129ac:			; <UNDEFINED> instruction: 0x000128b8
   129b0:	andeq	r2, r1, r8, ror r8
   129b4:	push	{r4, r5, r6, lr}
   129b8:	mov	r5, r0
   129bc:	bl	11038 <__errno_location@plt>
   129c0:	cmp	r5, #0
   129c4:	mov	r1, #48	; 0x30
   129c8:	mov	r4, r0
   129cc:	ldr	r0, [pc, #24]	; 129ec <close_stdout@@Base+0x1380>
   129d0:	ldr	r6, [r4]
   129d4:	add	r0, pc, r0
   129d8:	add	r0, r0, #256	; 0x100
   129dc:	movne	r0, r5
   129e0:	bl	137f8 <close_stdout@@Base+0x218c>
   129e4:	str	r6, [r4]
   129e8:	pop	{r4, r5, r6, pc}
   129ec:	muleq	r1, ip, r7
   129f0:	cmp	r0, #0
   129f4:	beq	12a00 <close_stdout@@Base+0x1394>
   129f8:	ldr	r0, [r0]
   129fc:	bx	lr
   12a00:	ldr	r0, [pc, #12]	; 12a14 <close_stdout@@Base+0x13a8>
   12a04:	add	r0, pc, r0
   12a08:	add	r0, r0, #256	; 0x100
   12a0c:	ldr	r0, [r0]
   12a10:	bx	lr
   12a14:	andeq	r2, r1, ip, ror #14
   12a18:	cmp	r0, #0
   12a1c:	beq	12a28 <close_stdout@@Base+0x13bc>
   12a20:	str	r1, [r0]
   12a24:	bx	lr
   12a28:	ldr	r0, [pc, #12]	; 12a3c <close_stdout@@Base+0x13d0>
   12a2c:	add	r0, pc, r0
   12a30:	add	r0, r0, #256	; 0x100
   12a34:	str	r1, [r0]
   12a38:	bx	lr
   12a3c:	andeq	r2, r1, r4, asr #14
   12a40:	cmp	r0, #0
   12a44:	movne	r3, r0
   12a48:	beq	12a78 <close_stdout@@Base+0x140c>
   12a4c:	lsr	ip, r1, #5
   12a50:	and	r1, r1, #31
   12a54:	add	r3, r3, ip, lsl #2
   12a58:	ldr	ip, [r3, #8]
   12a5c:	lsr	r0, ip, r1
   12a60:	eor	r2, r0, r2
   12a64:	and	r0, r0, #1
   12a68:	and	r2, r2, #1
   12a6c:	eor	ip, ip, r2, lsl r1
   12a70:	str	ip, [r3, #8]
   12a74:	bx	lr
   12a78:	ldr	r3, [pc, #8]	; 12a88 <close_stdout@@Base+0x141c>
   12a7c:	add	r3, pc, r3
   12a80:	add	r3, r3, #256	; 0x100
   12a84:	b	12a4c <close_stdout@@Base+0x13e0>
   12a88:	strdeq	r2, [r1], -r4
   12a8c:	subs	r3, r0, #0
   12a90:	beq	12aa0 <close_stdout@@Base+0x1434>
   12a94:	ldr	r0, [r3, #4]
   12a98:	str	r1, [r3, #4]
   12a9c:	bx	lr
   12aa0:	ldr	r3, [pc, #8]	; 12ab0 <close_stdout@@Base+0x1444>
   12aa4:	add	r3, pc, r3
   12aa8:	add	r3, r3, #256	; 0x100
   12aac:	b	12a94 <close_stdout@@Base+0x1428>
   12ab0:	andeq	r2, r1, ip, asr #13
   12ab4:	cmp	r0, #0
   12ab8:	push	{r3, lr}
   12abc:	beq	12ae0 <close_stdout@@Base+0x1474>
   12ac0:	cmp	r2, #0
   12ac4:	cmpne	r1, #0
   12ac8:	mov	r3, #8
   12acc:	strne	r1, [r0, #40]	; 0x28
   12ad0:	str	r3, [r0]
   12ad4:	strne	r2, [r0, #44]	; 0x2c
   12ad8:	popne	{r3, pc}
   12adc:	bl	110f8 <abort@plt>
   12ae0:	ldr	r0, [pc, #8]	; 12af0 <close_stdout@@Base+0x1484>
   12ae4:	add	r0, pc, r0
   12ae8:	add	r0, r0, #256	; 0x100
   12aec:	b	12ac0 <close_stdout@@Base+0x1454>
   12af0:	andeq	r2, r1, ip, lsl #13
   12af4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12af8:	sub	sp, sp, #24
   12afc:	mov	r7, r0
   12b00:	mov	sl, r1
   12b04:	ldr	r4, [sp, #56]	; 0x38
   12b08:	mov	r9, r2
   12b0c:	mov	r8, r3
   12b10:	cmp	r4, #0
   12b14:	beq	12b68 <close_stdout@@Base+0x14fc>
   12b18:	bl	11038 <__errno_location@plt>
   12b1c:	ldr	r3, [r4]
   12b20:	add	lr, r4, #8
   12b24:	mov	r1, sl
   12b28:	mov	r2, r9
   12b2c:	ldr	r6, [r0]
   12b30:	mov	r5, r0
   12b34:	str	r3, [sp]
   12b38:	mov	r0, r7
   12b3c:	ldr	ip, [r4, #4]
   12b40:	mov	r3, r8
   12b44:	stmib	sp, {ip, lr}
   12b48:	ldr	ip, [r4, #40]	; 0x28
   12b4c:	str	ip, [sp, #12]
   12b50:	ldr	ip, [r4, #44]	; 0x2c
   12b54:	str	ip, [sp, #16]
   12b58:	bl	11abc <close_stdout@@Base+0x450>
   12b5c:	str	r6, [r5]
   12b60:	add	sp, sp, #24
   12b64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b68:	ldr	r4, [pc, #8]	; 12b78 <close_stdout@@Base+0x150c>
   12b6c:	add	r4, pc, r4
   12b70:	add	r4, r4, #256	; 0x100
   12b74:	b	12b18 <close_stdout@@Base+0x14ac>
   12b78:	andeq	r2, r1, r4, lsl #12
   12b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b80:	subs	r4, r3, #0
   12b84:	sub	sp, sp, #36	; 0x24
   12b88:	mov	r7, r0
   12b8c:	mov	r6, r1
   12b90:	mov	r5, r2
   12b94:	beq	12c50 <close_stdout@@Base+0x15e4>
   12b98:	bl	11038 <__errno_location@plt>
   12b9c:	ldr	r3, [r4]
   12ba0:	ldr	sl, [r4, #4]
   12ba4:	add	r9, r4, #8
   12ba8:	mov	r8, r0
   12bac:	mov	r0, #0
   12bb0:	ldr	r2, [r8]
   12bb4:	cmp	r5, r0
   12bb8:	orreq	sl, sl, #1
   12bbc:	str	r9, [sp, #8]
   12bc0:	mov	r1, r0
   12bc4:	stm	sp, {r3, sl}
   12bc8:	mov	r3, r6
   12bcc:	ldr	ip, [r4, #40]	; 0x28
   12bd0:	str	r2, [sp, #28]
   12bd4:	mov	r2, r7
   12bd8:	str	ip, [sp, #12]
   12bdc:	ldr	ip, [r4, #44]	; 0x2c
   12be0:	str	ip, [sp, #16]
   12be4:	bl	11abc <close_stdout@@Base+0x450>
   12be8:	add	r1, r0, #1
   12bec:	mov	fp, r0
   12bf0:	str	r1, [sp, #24]
   12bf4:	mov	r0, r1
   12bf8:	bl	13624 <close_stdout@@Base+0x1fb8>
   12bfc:	ldr	lr, [r4]
   12c00:	str	sl, [sp, #4]
   12c04:	mov	r3, r6
   12c08:	str	r9, [sp, #8]
   12c0c:	mov	r2, r7
   12c10:	str	lr, [sp]
   12c14:	ldr	lr, [r4, #40]	; 0x28
   12c18:	ldr	r1, [sp, #24]
   12c1c:	str	lr, [sp, #12]
   12c20:	ldr	lr, [r4, #44]	; 0x2c
   12c24:	str	lr, [sp, #16]
   12c28:	str	r0, [sp, #24]
   12c2c:	bl	11abc <close_stdout@@Base+0x450>
   12c30:	ldr	r3, [sp, #28]
   12c34:	cmp	r5, #0
   12c38:	str	r3, [r8]
   12c3c:	ldr	ip, [sp, #24]
   12c40:	strne	fp, [r5]
   12c44:	mov	r0, ip
   12c48:	add	sp, sp, #36	; 0x24
   12c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c50:	ldr	r4, [pc, #8]	; 12c60 <close_stdout@@Base+0x15f4>
   12c54:	add	r4, pc, r4
   12c58:	add	r4, r4, #256	; 0x100
   12c5c:	b	12b98 <close_stdout@@Base+0x152c>
   12c60:	andeq	r2, r1, ip, lsl r5
   12c64:	mov	r3, r2
   12c68:	mov	r2, #0
   12c6c:	b	12b7c <close_stdout@@Base+0x1510>
   12c70:	ldr	r2, [pc, #152]	; 12d10 <close_stdout@@Base+0x16a4>
   12c74:	push	{r3, r4, r5, r6, r7, lr}
   12c78:	add	r2, pc, r2
   12c7c:	ldr	r3, [pc, #144]	; 12d14 <close_stdout@@Base+0x16a8>
   12c80:	ldr	r6, [r2]
   12c84:	add	r3, pc, r3
   12c88:	cmp	r6, #1
   12c8c:	ldr	r7, [r3]
   12c90:	movhi	r4, #1
   12c94:	movhi	r5, r7
   12c98:	bls	12cb4 <close_stdout@@Base+0x1648>
   12c9c:	ldr	r0, [r5, #12]
   12ca0:	add	r4, r4, #1
   12ca4:	bl	10ed0 <free@plt>
   12ca8:	cmp	r4, r6
   12cac:	add	r5, r5, #8
   12cb0:	bne	12c9c <close_stdout@@Base+0x1630>
   12cb4:	ldr	r4, [pc, #92]	; 12d18 <close_stdout@@Base+0x16ac>
   12cb8:	ldr	r0, [r7, #4]
   12cbc:	add	r4, pc, r4
   12cc0:	cmp	r0, r4
   12cc4:	beq	12cdc <close_stdout@@Base+0x1670>
   12cc8:	bl	10ed0 <free@plt>
   12ccc:	ldr	r3, [pc, #72]	; 12d1c <close_stdout@@Base+0x16b0>
   12cd0:	mov	r2, #256	; 0x100
   12cd4:	add	r3, pc, r3
   12cd8:	stmib	r3, {r2, r4}
   12cdc:	ldr	r4, [pc, #60]	; 12d20 <close_stdout@@Base+0x16b4>
   12ce0:	add	r4, pc, r4
   12ce4:	add	r5, r4, #4
   12ce8:	cmp	r7, r5
   12cec:	beq	12cfc <close_stdout@@Base+0x1690>
   12cf0:	mov	r0, r7
   12cf4:	bl	10ed0 <free@plt>
   12cf8:	str	r5, [r4]
   12cfc:	ldr	r3, [pc, #32]	; 12d24 <close_stdout@@Base+0x16b8>
   12d00:	mov	r2, #1
   12d04:	add	r3, pc, r3
   12d08:	str	r2, [r3]
   12d0c:	pop	{r3, r4, r5, r6, r7, pc}
   12d10:	andeq	r2, r1, r8, lsr #9
   12d14:	ldrdeq	r2, [r1], -r0
   12d18:			; <UNDEFINED> instruction: 0x000124b4
   12d1c:	andeq	r2, r1, r0, lsl #9
   12d20:	andeq	r2, r1, r4, ror r4
   12d24:	andeq	r2, r1, ip, lsl r4
   12d28:	ldr	r3, [pc, #12]	; 12d3c <close_stdout@@Base+0x16d0>
   12d2c:	mvn	r2, #0
   12d30:	add	r3, pc, r3
   12d34:	add	r3, r3, #256	; 0x100
   12d38:	b	127e4 <close_stdout@@Base+0x1178>
   12d3c:	andeq	r2, r1, r0, asr #8
   12d40:	ldr	r3, [pc, #8]	; 12d50 <close_stdout@@Base+0x16e4>
   12d44:	add	r3, pc, r3
   12d48:	add	r3, r3, #256	; 0x100
   12d4c:	b	127e4 <close_stdout@@Base+0x1178>
   12d50:	andeq	r2, r1, ip, lsr #8
   12d54:	mov	r1, r0
   12d58:	mov	r0, #0
   12d5c:	b	12d28 <close_stdout@@Base+0x16bc>
   12d60:	mov	r2, r1
   12d64:	mov	r1, r0
   12d68:	mov	r0, #0
   12d6c:	b	12d40 <close_stdout@@Base+0x16d4>
   12d70:	ldr	r3, [pc, #92]	; 12dd4 <close_stdout@@Base+0x1768>
   12d74:	ldr	ip, [pc, #92]	; 12dd8 <close_stdout@@Base+0x176c>
   12d78:	add	r3, pc, r3
   12d7c:	push	{r4, r5, r6, r7, lr}
   12d80:	sub	sp, sp, #60	; 0x3c
   12d84:	ldr	r4, [r3, ip]
   12d88:	add	r5, sp, #4
   12d8c:	mov	r7, r2
   12d90:	mov	r6, r0
   12d94:	mov	r0, r5
   12d98:	ldr	r3, [r4]
   12d9c:	str	r3, [sp, #52]	; 0x34
   12da0:	bl	11904 <close_stdout@@Base+0x298>
   12da4:	mov	r3, r5
   12da8:	mvn	r2, #0
   12dac:	mov	r0, r6
   12db0:	mov	r1, r7
   12db4:	bl	127e4 <close_stdout@@Base+0x1178>
   12db8:	ldr	r2, [sp, #52]	; 0x34
   12dbc:	ldr	r3, [r4]
   12dc0:	cmp	r2, r3
   12dc4:	bne	12dd0 <close_stdout@@Base+0x1764>
   12dc8:	add	sp, sp, #60	; 0x3c
   12dcc:	pop	{r4, r5, r6, r7, pc}
   12dd0:	bl	10f18 <__stack_chk_fail@plt>
   12dd4:	andeq	r2, r1, r0, lsl #5
   12dd8:	andeq	r0, r0, r8, ror #1
   12ddc:	ldr	ip, [pc, #96]	; 12e44 <close_stdout@@Base+0x17d8>
   12de0:	push	{r4, r5, r6, r7, r8, lr}
   12de4:	add	ip, pc, ip
   12de8:	ldr	lr, [pc, #88]	; 12e48 <close_stdout@@Base+0x17dc>
   12dec:	sub	sp, sp, #56	; 0x38
   12df0:	mov	r8, r3
   12df4:	add	r5, sp, #4
   12df8:	mov	r7, r2
   12dfc:	mov	r6, r0
   12e00:	ldr	r4, [ip, lr]
   12e04:	mov	r0, r5
   12e08:	ldr	r3, [r4]
   12e0c:	str	r3, [sp, #52]	; 0x34
   12e10:	bl	11904 <close_stdout@@Base+0x298>
   12e14:	mov	r2, r8
   12e18:	mov	r3, r5
   12e1c:	mov	r0, r6
   12e20:	mov	r1, r7
   12e24:	bl	127e4 <close_stdout@@Base+0x1178>
   12e28:	ldr	r2, [sp, #52]	; 0x34
   12e2c:	ldr	r3, [r4]
   12e30:	cmp	r2, r3
   12e34:	bne	12e40 <close_stdout@@Base+0x17d4>
   12e38:	add	sp, sp, #56	; 0x38
   12e3c:	pop	{r4, r5, r6, r7, r8, pc}
   12e40:	bl	10f18 <__stack_chk_fail@plt>
   12e44:	andeq	r2, r1, r4, lsl r2
   12e48:	andeq	r0, r0, r8, ror #1
   12e4c:	mov	r2, r1
   12e50:	mov	r1, r0
   12e54:	mov	r0, #0
   12e58:	b	12d70 <close_stdout@@Base+0x1704>
   12e5c:	mov	ip, r1
   12e60:	mov	r3, r2
   12e64:	mov	r1, r0
   12e68:	mov	r2, ip
   12e6c:	mov	r0, #0
   12e70:	b	12ddc <close_stdout@@Base+0x1770>
   12e74:	push	{r4, r5, r6, r7, r8, lr}
   12e78:	mov	r5, r2
   12e7c:	ldr	lr, [pc, #136]	; 12f0c <close_stdout@@Base+0x18a0>
   12e80:	mov	r7, r0
   12e84:	mov	r6, r1
   12e88:	ldr	r4, [pc, #128]	; 12f10 <close_stdout@@Base+0x18a4>
   12e8c:	add	lr, pc, lr
   12e90:	sub	sp, sp, #56	; 0x38
   12e94:	add	lr, lr, #256	; 0x100
   12e98:	ldr	r8, [pc, #116]	; 12f14 <close_stdout@@Base+0x18a8>
   12e9c:	add	r4, pc, r4
   12ea0:	add	ip, sp, #4
   12ea4:	ldm	lr!, {r0, r1, r2, r3}
   12ea8:	ldr	r4, [r4, r8]
   12eac:	stmia	ip!, {r0, r1, r2, r3}
   12eb0:	ldm	lr!, {r0, r1, r2, r3}
   12eb4:	ldr	r8, [r4]
   12eb8:	stmia	ip!, {r0, r1, r2, r3}
   12ebc:	ldm	lr, {r0, r1, r2, r3}
   12ec0:	str	r8, [sp, #52]	; 0x34
   12ec4:	stm	ip, {r0, r1, r2, r3}
   12ec8:	mov	r1, r5
   12ecc:	add	r5, sp, #4
   12ed0:	mov	r2, #1
   12ed4:	mov	r0, r5
   12ed8:	bl	12a40 <close_stdout@@Base+0x13d4>
   12edc:	mov	r2, r6
   12ee0:	mov	r3, r5
   12ee4:	mov	r1, r7
   12ee8:	mov	r0, #0
   12eec:	bl	127e4 <close_stdout@@Base+0x1178>
   12ef0:	ldr	r2, [sp, #52]	; 0x34
   12ef4:	ldr	r3, [r4]
   12ef8:	cmp	r2, r3
   12efc:	bne	12f08 <close_stdout@@Base+0x189c>
   12f00:	add	sp, sp, #56	; 0x38
   12f04:	pop	{r4, r5, r6, r7, r8, pc}
   12f08:	bl	10f18 <__stack_chk_fail@plt>
   12f0c:	andeq	r2, r1, r4, ror #5
   12f10:	andeq	r2, r1, ip, asr r1
   12f14:	andeq	r0, r0, r8, ror #1
   12f18:	mov	r2, r1
   12f1c:	mvn	r1, #0
   12f20:	b	12e74 <close_stdout@@Base+0x1808>
   12f24:	mov	r1, #58	; 0x3a
   12f28:	b	12f18 <close_stdout@@Base+0x18ac>
   12f2c:	mov	r2, #58	; 0x3a
   12f30:	b	12e74 <close_stdout@@Base+0x1808>
   12f34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f38:	mov	r5, r2
   12f3c:	ldr	lr, [pc, #144]	; 12fd4 <close_stdout@@Base+0x1968>
   12f40:	mov	r8, r0
   12f44:	mov	r9, r1
   12f48:	mov	r7, r3
   12f4c:	add	lr, pc, lr
   12f50:	ldr	r4, [pc, #128]	; 12fd8 <close_stdout@@Base+0x196c>
   12f54:	add	lr, lr, #256	; 0x100
   12f58:	sub	sp, sp, #56	; 0x38
   12f5c:	ldr	sl, [pc, #120]	; 12fdc <close_stdout@@Base+0x1970>
   12f60:	add	r4, pc, r4
   12f64:	ldm	lr!, {r0, r1, r2, r3}
   12f68:	add	ip, sp, #4
   12f6c:	ldr	r4, [r4, sl]
   12f70:	ldr	r6, [sp, #88]	; 0x58
   12f74:	stmia	ip!, {r0, r1, r2, r3}
   12f78:	ldm	lr!, {r0, r1, r2, r3}
   12f7c:	ldr	sl, [r4]
   12f80:	stmia	ip!, {r0, r1, r2, r3}
   12f84:	ldm	lr, {r0, r1, r2, r3}
   12f88:	str	sl, [sp, #52]	; 0x34
   12f8c:	stm	ip, {r0, r1, r2, r3}
   12f90:	mov	r2, r5
   12f94:	add	r5, sp, #4
   12f98:	mov	r1, r9
   12f9c:	mov	r0, r5
   12fa0:	bl	12ab4 <close_stdout@@Base+0x1448>
   12fa4:	mov	r2, r6
   12fa8:	mov	r3, r5
   12fac:	mov	r0, r8
   12fb0:	mov	r1, r7
   12fb4:	bl	127e4 <close_stdout@@Base+0x1178>
   12fb8:	ldr	r2, [sp, #52]	; 0x34
   12fbc:	ldr	r3, [r4]
   12fc0:	cmp	r2, r3
   12fc4:	bne	12fd0 <close_stdout@@Base+0x1964>
   12fc8:	add	sp, sp, #56	; 0x38
   12fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fd0:	bl	10f18 <__stack_chk_fail@plt>
   12fd4:	andeq	r2, r1, r4, lsr #4
   12fd8:	muleq	r1, r8, r0
   12fdc:	andeq	r0, r0, r8, ror #1
   12fe0:	push	{lr}		; (str lr, [sp, #-4]!)
   12fe4:	sub	sp, sp, #12
   12fe8:	mvn	ip, #0
   12fec:	str	ip, [sp]
   12ff0:	bl	12f34 <close_stdout@@Base+0x18c8>
   12ff4:	add	sp, sp, #12
   12ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ffc:	mov	ip, r1
   13000:	mov	r3, r2
   13004:	mov	r1, r0
   13008:	mov	r2, ip
   1300c:	mov	r0, #0
   13010:	b	12fe0 <close_stdout@@Base+0x1974>
   13014:	push	{lr}		; (str lr, [sp, #-4]!)
   13018:	sub	sp, sp, #12
   1301c:	mov	lr, r1
   13020:	mov	ip, r2
   13024:	mov	r1, r0
   13028:	str	r3, [sp]
   1302c:	mov	r2, lr
   13030:	mov	r3, ip
   13034:	mov	r0, #0
   13038:	bl	12f34 <close_stdout@@Base+0x18c8>
   1303c:	add	sp, sp, #12
   13040:	pop	{pc}		; (ldr pc, [sp], #4)
   13044:	ldr	r3, [pc, #12]	; 13058 <close_stdout@@Base+0x19ec>
   13048:	ldr	ip, [pc, #12]	; 1305c <close_stdout@@Base+0x19f0>
   1304c:	add	r3, pc, r3
   13050:	ldr	r3, [r3, ip]
   13054:	b	127e4 <close_stdout@@Base+0x1178>
   13058:	andeq	r1, r1, ip, lsr #31
   1305c:	andeq	r0, r0, r4, ror #1
   13060:	mov	r2, r1
   13064:	mov	r1, r0
   13068:	mov	r0, #0
   1306c:	b	13044 <close_stdout@@Base+0x19d8>
   13070:	mvn	r2, #0
   13074:	b	13044 <close_stdout@@Base+0x19d8>
   13078:	mov	r1, r0
   1307c:	mov	r0, #0
   13080:	b	13070 <close_stdout@@Base+0x1a04>
   13084:	push	{r4, r5, r6, r7, lr}
   13088:	cmp	r1, #0
   1308c:	sub	sp, sp, #36	; 0x24
   13090:	ldr	r7, [pc, #896]	; 13418 <close_stdout@@Base+0x1dac>
   13094:	mov	ip, r3
   13098:	mov	r5, r0
   1309c:	add	r7, pc, r7
   130a0:	ldr	r4, [sp, #56]	; 0x38
   130a4:	ldr	r6, [sp, #60]	; 0x3c
   130a8:	beq	133ec <close_stdout@@Base+0x1d80>
   130ac:	str	r2, [sp]
   130b0:	mov	r3, r1
   130b4:	ldr	r2, [pc, #864]	; 1341c <close_stdout@@Base+0x1db0>
   130b8:	mov	r1, #1
   130bc:	str	ip, [sp, #4]
   130c0:	add	r2, pc, r2
   130c4:	bl	11080 <__fprintf_chk@plt>
   130c8:	ldr	r1, [pc, #848]	; 13420 <close_stdout@@Base+0x1db4>
   130cc:	mov	r2, #5
   130d0:	mov	r0, #0
   130d4:	add	r1, pc, r1
   130d8:	bl	10f0c <dcgettext@plt>
   130dc:	ldr	r2, [pc, #832]	; 13424 <close_stdout@@Base+0x1db8>
   130e0:	movw	ip, #2013	; 0x7dd
   130e4:	mov	r1, #1
   130e8:	ldr	r2, [r7, r2]
   130ec:	str	ip, [sp]
   130f0:	mov	r3, r0
   130f4:	mov	r0, r5
   130f8:	bl	11080 <__fprintf_chk@plt>
   130fc:	ldr	r1, [pc, #804]	; 13428 <close_stdout@@Base+0x1dbc>
   13100:	mov	r0, #0
   13104:	mov	r2, #5
   13108:	add	r1, pc, r1
   1310c:	bl	10f0c <dcgettext@plt>
   13110:	mov	r1, r5
   13114:	bl	10ea0 <fputs_unlocked@plt>
   13118:	cmp	r6, #9
   1311c:	addls	pc, pc, r6, lsl #2
   13120:	b	13408 <close_stdout@@Base+0x1d9c>
   13124:	b	131b8 <close_stdout@@Base+0x1b4c>
   13128:	b	131bc <close_stdout@@Base+0x1b50>
   1312c:	b	131ec <close_stdout@@Base+0x1b80>
   13130:	b	13220 <close_stdout@@Base+0x1bb4>
   13134:	b	1325c <close_stdout@@Base+0x1bf0>
   13138:	b	1329c <close_stdout@@Base+0x1c30>
   1313c:	b	132e4 <close_stdout@@Base+0x1c78>
   13140:	b	13334 <close_stdout@@Base+0x1cc8>
   13144:	b	1338c <close_stdout@@Base+0x1d20>
   13148:	b	1314c <close_stdout@@Base+0x1ae0>
   1314c:	ldr	r1, [pc, #728]	; 1342c <close_stdout@@Base+0x1dc0>
   13150:	mov	r0, #0
   13154:	add	r1, pc, r1
   13158:	mov	r2, #5
   1315c:	bl	10f0c <dcgettext@plt>
   13160:	ldm	r4, {r3, ip}
   13164:	mov	r1, #1
   13168:	str	ip, [sp]
   1316c:	ldr	ip, [r4, #8]
   13170:	str	ip, [sp, #4]
   13174:	ldr	ip, [r4, #12]
   13178:	str	ip, [sp, #8]
   1317c:	ldr	ip, [r4, #16]
   13180:	str	ip, [sp, #12]
   13184:	ldr	ip, [r4, #20]
   13188:	str	ip, [sp, #16]
   1318c:	ldr	ip, [r4, #24]
   13190:	str	ip, [sp, #20]
   13194:	ldr	ip, [r4, #28]
   13198:	str	ip, [sp, #24]
   1319c:	ldr	ip, [r4, #32]
   131a0:	str	ip, [sp, #28]
   131a4:	mov	r2, r0
   131a8:	mov	r0, r5
   131ac:	bl	11080 <__fprintf_chk@plt>
   131b0:	add	sp, sp, #36	; 0x24
   131b4:	pop	{r4, r5, r6, r7, pc}
   131b8:	bl	110f8 <abort@plt>
   131bc:	ldr	r1, [pc, #620]	; 13430 <close_stdout@@Base+0x1dc4>
   131c0:	mov	r2, #5
   131c4:	mov	r0, #0
   131c8:	add	r1, pc, r1
   131cc:	bl	10f0c <dcgettext@plt>
   131d0:	ldr	r3, [r4]
   131d4:	mov	r1, #1
   131d8:	mov	r2, r0
   131dc:	mov	r0, r5
   131e0:	add	sp, sp, #36	; 0x24
   131e4:	pop	{r4, r5, r6, r7, lr}
   131e8:	b	11080 <__fprintf_chk@plt>
   131ec:	ldr	r1, [pc, #576]	; 13434 <close_stdout@@Base+0x1dc8>
   131f0:	mov	r2, #5
   131f4:	mov	r0, #0
   131f8:	add	r1, pc, r1
   131fc:	bl	10f0c <dcgettext@plt>
   13200:	ldm	r4, {r3, ip}
   13204:	mov	r1, #1
   13208:	str	ip, [sp, #56]	; 0x38
   1320c:	mov	r2, r0
   13210:	mov	r0, r5
   13214:	add	sp, sp, #36	; 0x24
   13218:	pop	{r4, r5, r6, r7, lr}
   1321c:	b	11080 <__fprintf_chk@plt>
   13220:	ldr	r1, [pc, #528]	; 13438 <close_stdout@@Base+0x1dcc>
   13224:	mov	r2, #5
   13228:	mov	r0, #0
   1322c:	add	r1, pc, r1
   13230:	bl	10f0c <dcgettext@plt>
   13234:	ldm	r4, {r3, ip}
   13238:	mov	r1, #1
   1323c:	str	ip, [sp, #56]	; 0x38
   13240:	ldr	ip, [r4, #8]
   13244:	str	ip, [sp, #60]	; 0x3c
   13248:	mov	r2, r0
   1324c:	mov	r0, r5
   13250:	add	sp, sp, #36	; 0x24
   13254:	pop	{r4, r5, r6, r7, lr}
   13258:	b	11080 <__fprintf_chk@plt>
   1325c:	ldr	r1, [pc, #472]	; 1343c <close_stdout@@Base+0x1dd0>
   13260:	mov	r2, #5
   13264:	mov	r0, #0
   13268:	add	r1, pc, r1
   1326c:	bl	10f0c <dcgettext@plt>
   13270:	ldm	r4, {r3, ip}
   13274:	mov	r1, #1
   13278:	str	ip, [sp]
   1327c:	ldr	ip, [r4, #8]
   13280:	str	ip, [sp, #4]
   13284:	ldr	ip, [r4, #12]
   13288:	str	ip, [sp, #8]
   1328c:	mov	r2, r0
   13290:	mov	r0, r5
   13294:	bl	11080 <__fprintf_chk@plt>
   13298:	b	131b0 <close_stdout@@Base+0x1b44>
   1329c:	ldr	r1, [pc, #412]	; 13440 <close_stdout@@Base+0x1dd4>
   132a0:	mov	r2, #5
   132a4:	mov	r0, #0
   132a8:	add	r1, pc, r1
   132ac:	bl	10f0c <dcgettext@plt>
   132b0:	ldm	r4, {r3, ip}
   132b4:	mov	r1, #1
   132b8:	str	ip, [sp]
   132bc:	ldr	ip, [r4, #8]
   132c0:	str	ip, [sp, #4]
   132c4:	ldr	ip, [r4, #12]
   132c8:	str	ip, [sp, #8]
   132cc:	ldr	ip, [r4, #16]
   132d0:	str	ip, [sp, #12]
   132d4:	mov	r2, r0
   132d8:	mov	r0, r5
   132dc:	bl	11080 <__fprintf_chk@plt>
   132e0:	b	131b0 <close_stdout@@Base+0x1b44>
   132e4:	ldr	r1, [pc, #344]	; 13444 <close_stdout@@Base+0x1dd8>
   132e8:	mov	r2, #5
   132ec:	mov	r0, #0
   132f0:	add	r1, pc, r1
   132f4:	bl	10f0c <dcgettext@plt>
   132f8:	ldm	r4, {r3, ip}
   132fc:	mov	r1, #1
   13300:	str	ip, [sp]
   13304:	ldr	ip, [r4, #8]
   13308:	str	ip, [sp, #4]
   1330c:	ldr	ip, [r4, #12]
   13310:	str	ip, [sp, #8]
   13314:	ldr	ip, [r4, #16]
   13318:	str	ip, [sp, #12]
   1331c:	ldr	ip, [r4, #20]
   13320:	str	ip, [sp, #16]
   13324:	mov	r2, r0
   13328:	mov	r0, r5
   1332c:	bl	11080 <__fprintf_chk@plt>
   13330:	b	131b0 <close_stdout@@Base+0x1b44>
   13334:	ldr	r1, [pc, #268]	; 13448 <close_stdout@@Base+0x1ddc>
   13338:	mov	r2, #5
   1333c:	mov	r0, #0
   13340:	add	r1, pc, r1
   13344:	bl	10f0c <dcgettext@plt>
   13348:	ldm	r4, {r3, ip}
   1334c:	mov	r1, #1
   13350:	str	ip, [sp]
   13354:	ldr	ip, [r4, #8]
   13358:	str	ip, [sp, #4]
   1335c:	ldr	ip, [r4, #12]
   13360:	str	ip, [sp, #8]
   13364:	ldr	ip, [r4, #16]
   13368:	str	ip, [sp, #12]
   1336c:	ldr	ip, [r4, #20]
   13370:	str	ip, [sp, #16]
   13374:	ldr	ip, [r4, #24]
   13378:	str	ip, [sp, #20]
   1337c:	mov	r2, r0
   13380:	mov	r0, r5
   13384:	bl	11080 <__fprintf_chk@plt>
   13388:	b	131b0 <close_stdout@@Base+0x1b44>
   1338c:	ldr	r1, [pc, #184]	; 1344c <close_stdout@@Base+0x1de0>
   13390:	mov	r2, #5
   13394:	mov	r0, #0
   13398:	add	r1, pc, r1
   1339c:	bl	10f0c <dcgettext@plt>
   133a0:	ldm	r4, {r3, ip}
   133a4:	mov	r1, #1
   133a8:	str	ip, [sp]
   133ac:	ldr	ip, [r4, #8]
   133b0:	str	ip, [sp, #4]
   133b4:	ldr	ip, [r4, #12]
   133b8:	str	ip, [sp, #8]
   133bc:	ldr	ip, [r4, #16]
   133c0:	str	ip, [sp, #12]
   133c4:	ldr	ip, [r4, #20]
   133c8:	str	ip, [sp, #16]
   133cc:	ldr	ip, [r4, #24]
   133d0:	str	ip, [sp, #20]
   133d4:	ldr	ip, [r4, #28]
   133d8:	str	ip, [sp, #24]
   133dc:	mov	r2, r0
   133e0:	mov	r0, r5
   133e4:	bl	11080 <__fprintf_chk@plt>
   133e8:	b	131b0 <close_stdout@@Base+0x1b44>
   133ec:	str	r3, [sp]
   133f0:	mov	r3, r2
   133f4:	ldr	r2, [pc, #84]	; 13450 <close_stdout@@Base+0x1de4>
   133f8:	mov	r1, #1
   133fc:	add	r2, pc, r2
   13400:	bl	11080 <__fprintf_chk@plt>
   13404:	b	130c8 <close_stdout@@Base+0x1a5c>
   13408:	ldr	r1, [pc, #68]	; 13454 <close_stdout@@Base+0x1de8>
   1340c:	mov	r0, #0
   13410:	add	r1, pc, r1
   13414:	b	13158 <close_stdout@@Base+0x1aec>
   13418:	andeq	r1, r1, ip, asr pc
   1341c:	andeq	r1, r0, r8, lsr #8
   13420:	andeq	r1, r0, r8, lsr #8
   13424:	andeq	r0, r0, r4, lsl r1
   13428:	strdeq	r1, [r0], -r8
   1342c:	andeq	r1, r0, r4, lsl #11
   13430:	andeq	r1, r0, r4, lsl #8
   13434:	andeq	r1, r0, r4, ror #7
   13438:	andeq	r1, r0, r8, asr #7
   1343c:	andeq	r1, r0, r8, lsr #7
   13440:	andeq	r1, r0, r8, lsl #7
   13444:	andeq	r1, r0, r4, ror #6
   13448:	andeq	r1, r0, ip, lsr r3
   1344c:	andeq	r1, r0, r0, lsl r3
   13450:	strdeq	r1, [r0], -r8
   13454:	strdeq	r1, [r0], -ip
   13458:	push	{r4, r5, lr}
   1345c:	sub	sp, sp, #12
   13460:	ldr	r5, [sp, #24]
   13464:	ldr	ip, [r5]
   13468:	cmp	ip, #0
   1346c:	beq	13488 <close_stdout@@Base+0x1e1c>
   13470:	mov	lr, r5
   13474:	mov	ip, #0
   13478:	ldr	r4, [lr, #4]!
   1347c:	add	ip, ip, #1
   13480:	cmp	r4, #0
   13484:	bne	13478 <close_stdout@@Base+0x1e0c>
   13488:	stm	sp, {r5, ip}
   1348c:	bl	13084 <close_stdout@@Base+0x1a18>
   13490:	add	sp, sp, #12
   13494:	pop	{r4, r5, pc}
   13498:	push	{r4, r5, r6, r7, lr}
   1349c:	sub	sp, sp, #60	; 0x3c
   134a0:	ldr	r4, [pc, #100]	; 1350c <close_stdout@@Base+0x1ea0>
   134a4:	mov	ip, #0
   134a8:	ldr	r5, [pc, #96]	; 13510 <close_stdout@@Base+0x1ea4>
   134ac:	mov	lr, ip
   134b0:	add	r4, pc, r4
   134b4:	ldr	r6, [sp, #80]	; 0x50
   134b8:	ldr	r7, [r4, r5]
   134bc:	add	r5, sp, #12
   134c0:	ldr	r4, [r7]
   134c4:	str	r4, [sp, #52]	; 0x34
   134c8:	ldr	r4, [r6, ip]
   134cc:	cmp	r4, #0
   134d0:	str	r4, [r5, ip]
   134d4:	beq	134e8 <close_stdout@@Base+0x1e7c>
   134d8:	add	lr, lr, #1
   134dc:	add	ip, ip, #4
   134e0:	cmp	lr, #10
   134e4:	bne	134c8 <close_stdout@@Base+0x1e5c>
   134e8:	stm	sp, {r5, lr}
   134ec:	bl	13084 <close_stdout@@Base+0x1a18>
   134f0:	ldr	r2, [sp, #52]	; 0x34
   134f4:	ldr	r3, [r7]
   134f8:	cmp	r2, r3
   134fc:	bne	13508 <close_stdout@@Base+0x1e9c>
   13500:	add	sp, sp, #60	; 0x3c
   13504:	pop	{r4, r5, r6, r7, pc}
   13508:	bl	10f18 <__stack_chk_fail@plt>
   1350c:	andeq	r1, r1, r8, asr #22
   13510:	andeq	r0, r0, r8, ror #1
   13514:	push	{r3}		; (str r3, [sp, #-4]!)
   13518:	push	{r4, lr}
   1351c:	sub	sp, sp, #20
   13520:	ldr	lr, [pc, #72]	; 13570 <close_stdout@@Base+0x1f04>
   13524:	add	ip, sp, #32
   13528:	ldr	r4, [pc, #68]	; 13574 <close_stdout@@Base+0x1f08>
   1352c:	add	lr, pc, lr
   13530:	ldr	r3, [sp, #28]
   13534:	ldr	r4, [lr, r4]
   13538:	str	ip, [sp]
   1353c:	str	ip, [sp, #8]
   13540:	ldr	ip, [r4]
   13544:	str	ip, [sp, #12]
   13548:	bl	13498 <close_stdout@@Base+0x1e2c>
   1354c:	ldr	r2, [sp, #12]
   13550:	ldr	r3, [r4]
   13554:	cmp	r2, r3
   13558:	bne	1356c <close_stdout@@Base+0x1f00>
   1355c:	add	sp, sp, #20
   13560:	pop	{r4, lr}
   13564:	add	sp, sp, #4
   13568:	bx	lr
   1356c:	bl	10f18 <__stack_chk_fail@plt>
   13570:	andeq	r1, r1, ip, asr #21
   13574:	andeq	r0, r0, r8, ror #1
   13578:	ldr	r1, [pc, #132]	; 13604 <close_stdout@@Base+0x1f98>
   1357c:	mov	r2, #5
   13580:	push	{r4, lr}
   13584:	add	r1, pc, r1
   13588:	mov	r0, #0
   1358c:	ldr	r4, [pc, #116]	; 13608 <close_stdout@@Base+0x1f9c>
   13590:	bl	10f0c <dcgettext@plt>
   13594:	ldr	r2, [pc, #112]	; 1360c <close_stdout@@Base+0x1fa0>
   13598:	add	r4, pc, r4
   1359c:	add	r2, pc, r2
   135a0:	mov	r1, r0
   135a4:	mov	r0, #1
   135a8:	bl	11068 <__printf_chk@plt>
   135ac:	ldr	r1, [pc, #92]	; 13610 <close_stdout@@Base+0x1fa4>
   135b0:	mov	r2, #5
   135b4:	mov	r0, #0
   135b8:	add	r1, pc, r1
   135bc:	bl	10f0c <dcgettext@plt>
   135c0:	ldr	r2, [pc, #76]	; 13614 <close_stdout@@Base+0x1fa8>
   135c4:	ldr	r3, [pc, #76]	; 13618 <close_stdout@@Base+0x1fac>
   135c8:	add	r2, pc, r2
   135cc:	add	r3, pc, r3
   135d0:	mov	r1, r0
   135d4:	mov	r0, #1
   135d8:	bl	11068 <__printf_chk@plt>
   135dc:	ldr	r1, [pc, #56]	; 1361c <close_stdout@@Base+0x1fb0>
   135e0:	mov	r0, #0
   135e4:	mov	r2, #5
   135e8:	add	r1, pc, r1
   135ec:	bl	10f0c <dcgettext@plt>
   135f0:	ldr	r3, [pc, #40]	; 13620 <close_stdout@@Base+0x1fb4>
   135f4:	ldr	r3, [r4, r3]
   135f8:	pop	{r4, lr}
   135fc:	ldr	r1, [r3]
   13600:	b	10ea0 <fputs_unlocked@plt>
   13604:	andeq	r1, r0, r4, asr #3
   13608:	andeq	r1, r1, r0, ror #20
   1360c:	andeq	r1, r0, r4, asr #3
   13610:	andeq	r1, r0, r0, asr #3
   13614:	andeq	r0, r0, r0, lsl sp
   13618:	andeq	r0, r0, ip, lsl sp
   1361c:	andeq	r1, r0, r4, lsr #3
   13620:	andeq	r0, r0, r4, lsl #2
   13624:	push	{r4, lr}
   13628:	mov	r4, r0
   1362c:	bl	10fc0 <malloc@plt>
   13630:	rsbs	r3, r0, #1
   13634:	movcc	r3, #0
   13638:	cmp	r4, #0
   1363c:	moveq	r3, #0
   13640:	cmp	r3, #0
   13644:	popeq	{r4, pc}
   13648:	bl	13838 <close_stdout@@Base+0x21cc>
   1364c:	push	{r3, r4, r5, lr}
   13650:	mov	r4, r0
   13654:	mvn	r0, #0
   13658:	mov	r5, r1
   1365c:	bl	13ed8 <close_stdout@@Base+0x286c>
   13660:	cmp	r0, r4
   13664:	bcc	13674 <close_stdout@@Base+0x2008>
   13668:	mul	r0, r4, r5
   1366c:	pop	{r3, r4, r5, lr}
   13670:	b	13624 <close_stdout@@Base+0x1fb8>
   13674:	bl	13838 <close_stdout@@Base+0x21cc>
   13678:	b	13624 <close_stdout@@Base+0x1fb8>
   1367c:	rsbs	r3, r1, #1
   13680:	push	{r4, lr}
   13684:	movcc	r3, #0
   13688:	cmp	r0, #0
   1368c:	mov	r4, r1
   13690:	moveq	r3, #0
   13694:	cmp	r3, #0
   13698:	bne	136bc <close_stdout@@Base+0x2050>
   1369c:	bl	10f24 <realloc@plt>
   136a0:	rsbs	r3, r0, #1
   136a4:	movcc	r3, #0
   136a8:	cmp	r4, #0
   136ac:	moveq	r3, #0
   136b0:	cmp	r3, #0
   136b4:	popeq	{r4, pc}
   136b8:	bl	13838 <close_stdout@@Base+0x21cc>
   136bc:	bl	10ed0 <free@plt>
   136c0:	mov	r0, #0
   136c4:	pop	{r4, pc}
   136c8:	push	{r4, r5, r6, lr}
   136cc:	mov	r5, r1
   136d0:	mov	r6, r0
   136d4:	mov	r1, r2
   136d8:	mvn	r0, #0
   136dc:	mov	r4, r2
   136e0:	bl	13ed8 <close_stdout@@Base+0x286c>
   136e4:	cmp	r0, r5
   136e8:	bcc	136fc <close_stdout@@Base+0x2090>
   136ec:	mov	r0, r6
   136f0:	mul	r1, r5, r4
   136f4:	pop	{r4, r5, r6, lr}
   136f8:	b	1367c <close_stdout@@Base+0x2010>
   136fc:	bl	13838 <close_stdout@@Base+0x21cc>
   13700:	push	{r3, r4, r5, r6, r7, lr}
   13704:	subs	r7, r0, #0
   13708:	mov	r5, r1
   1370c:	mov	r6, r2
   13710:	ldr	r4, [r1]
   13714:	beq	1374c <close_stdout@@Base+0x20e0>
   13718:	movw	r0, #43690	; 0xaaaa
   1371c:	mov	r1, r2
   13720:	bfi	r0, r0, #16, #16
   13724:	bl	13ed8 <close_stdout@@Base+0x286c>
   13728:	cmp	r4, r0
   1372c:	addcc	r3, r4, #1
   13730:	addcc	r4, r4, r3, lsr #1
   13734:	bcs	13770 <close_stdout@@Base+0x2104>
   13738:	str	r4, [r5]
   1373c:	mov	r0, r7
   13740:	mul	r1, r6, r4
   13744:	pop	{r3, r4, r5, r6, r7, lr}
   13748:	b	1367c <close_stdout@@Base+0x2010>
   1374c:	cmp	r4, #0
   13750:	bne	13738 <close_stdout@@Base+0x20cc>
   13754:	mov	r0, #64	; 0x40
   13758:	mov	r1, r2
   1375c:	bl	13ed8 <close_stdout@@Base+0x286c>
   13760:	cmp	r0, #0
   13764:	movne	r4, r0
   13768:	addeq	r4, r0, #1
   1376c:	b	13738 <close_stdout@@Base+0x20cc>
   13770:	bl	13838 <close_stdout@@Base+0x21cc>
   13774:	cmp	r0, #0
   13778:	push	{r3, lr}
   1377c:	ldr	r3, [r1]
   13780:	beq	137ac <close_stdout@@Base+0x2140>
   13784:	movw	r2, #43689	; 0xaaa9
   13788:	movt	r2, #43690	; 0xaaaa
   1378c:	cmp	r3, r2
   13790:	addls	r2, r3, #1
   13794:	addls	r3, r3, r2, lsr #1
   13798:	bhi	137c4 <close_stdout@@Base+0x2158>
   1379c:	str	r3, [r1]
   137a0:	mov	r1, r3
   137a4:	pop	{r3, lr}
   137a8:	b	1367c <close_stdout@@Base+0x2010>
   137ac:	cmp	r3, #0
   137b0:	moveq	r3, #64	; 0x40
   137b4:	str	r3, [r1]
   137b8:	mov	r1, r3
   137bc:	pop	{r3, lr}
   137c0:	b	1367c <close_stdout@@Base+0x2010>
   137c4:	bl	13838 <close_stdout@@Base+0x21cc>
   137c8:	push	{r4, lr}
   137cc:	mov	r4, r0
   137d0:	bl	13624 <close_stdout@@Base+0x1fb8>
   137d4:	mov	r2, r4
   137d8:	mov	r1, #0
   137dc:	pop	{r4, lr}
   137e0:	b	11050 <memset@plt>
   137e4:	push	{r3, lr}
   137e8:	bl	10e94 <calloc@plt>
   137ec:	cmp	r0, #0
   137f0:	popne	{r3, pc}
   137f4:	bl	13838 <close_stdout@@Base+0x21cc>
   137f8:	push	{r3, r4, r5, lr}
   137fc:	mov	r4, r1
   13800:	mov	r5, r0
   13804:	mov	r0, r1
   13808:	bl	13624 <close_stdout@@Base+0x1fb8>
   1380c:	mov	r1, r5
   13810:	mov	r2, r4
   13814:	pop	{r3, r4, r5, lr}
   13818:	b	10ee8 <memcpy@plt>
   1381c:	push	{r4, lr}
   13820:	mov	r4, r0
   13824:	bl	11020 <strlen@plt>
   13828:	add	r1, r0, #1
   1382c:	mov	r0, r4
   13830:	pop	{r4, lr}
   13834:	b	137f8 <close_stdout@@Base+0x218c>
   13838:	ldr	r3, [pc, #64]	; 13880 <close_stdout@@Base+0x2214>
   1383c:	mov	r2, #5
   13840:	ldr	ip, [pc, #60]	; 13884 <close_stdout@@Base+0x2218>
   13844:	mov	r0, #0
   13848:	add	r3, pc, r3
   1384c:	ldr	r1, [pc, #52]	; 13888 <close_stdout@@Base+0x221c>
   13850:	push	{r4, lr}
   13854:	add	r1, pc, r1
   13858:	ldr	r3, [r3, ip]
   1385c:	ldr	r4, [r3]
   13860:	bl	10f0c <dcgettext@plt>
   13864:	ldr	r2, [pc, #32]	; 1388c <close_stdout@@Base+0x2220>
   13868:	mov	r1, #0
   1386c:	add	r2, pc, r2
   13870:	mov	r3, r0
   13874:	mov	r0, r4
   13878:	bl	10f90 <error@plt>
   1387c:	bl	110f8 <abort@plt>
   13880:			; <UNDEFINED> instruction: 0x000117b0
   13884:	andeq	r0, r0, r8, lsl #2
   13888:	andeq	r0, r0, r8, lsr #31
   1388c:			; <UNDEFINED> instruction: 0x00000bb4
   13890:	push	{r4, r5, r6, lr}
   13894:	mov	r4, r0
   13898:	bl	10f78 <__fpending@plt>
   1389c:	mov	r6, r0
   138a0:	mov	r0, r4
   138a4:	ldr	r4, [r4]
   138a8:	bl	13d30 <close_stdout@@Base+0x26c4>
   138ac:	and	r4, r4, #32
   138b0:	adds	r5, r0, #0
   138b4:	movne	r5, #1
   138b8:	cmp	r4, #0
   138bc:	bne	138dc <close_stdout@@Base+0x2270>
   138c0:	cmp	r5, #0
   138c4:	beq	138d4 <close_stdout@@Base+0x2268>
   138c8:	cmp	r6, #0
   138cc:	beq	138f8 <close_stdout@@Base+0x228c>
   138d0:	mvn	r4, #0
   138d4:	mov	r0, r4
   138d8:	pop	{r4, r5, r6, pc}
   138dc:	cmp	r5, #0
   138e0:	bne	138d0 <close_stdout@@Base+0x2264>
   138e4:	bl	11038 <__errno_location@plt>
   138e8:	mvn	r4, #0
   138ec:	str	r5, [r0]
   138f0:	mov	r0, r4
   138f4:	pop	{r4, r5, r6, pc}
   138f8:	bl	11038 <__errno_location@plt>
   138fc:	ldr	r4, [r0]
   13900:	subs	r4, r4, #9
   13904:	mvnne	r4, #0
   13908:	mov	r0, r4
   1390c:	pop	{r4, r5, r6, pc}
   13910:	ldr	r3, [pc, #984]	; 13cf0 <close_stdout@@Base+0x2684>
   13914:	mov	r0, #14
   13918:	ldr	r2, [pc, #980]	; 13cf4 <close_stdout@@Base+0x2688>
   1391c:	add	r3, pc, r3
   13920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13924:	sub	sp, sp, #132	; 0x84
   13928:	ldr	r6, [r3, r2]
   1392c:	ldr	r3, [r6]
   13930:	str	r3, [sp, #124]	; 0x7c
   13934:	bl	110c8 <nl_langinfo@plt>
   13938:	subs	r5, r0, #0
   1393c:	beq	139f0 <close_stdout@@Base+0x2384>
   13940:	ldr	r3, [pc, #944]	; 13cf8 <close_stdout@@Base+0x268c>
   13944:	ldr	r4, [pc, r3]
   13948:	cmp	r4, #0
   1394c:	beq	139fc <close_stdout@@Base+0x2390>
   13950:	ldrb	r7, [r4]
   13954:	cmp	r7, #0
   13958:	bne	1398c <close_stdout@@Base+0x2320>
   1395c:	b	139c4 <close_stdout@@Base+0x2358>
   13960:	mov	r0, r4
   13964:	bl	11020 <strlen@plt>
   13968:	add	r0, r0, #1
   1396c:	add	r7, r4, r0
   13970:	mov	r0, r7
   13974:	bl	11020 <strlen@plt>
   13978:	add	r0, r0, #1
   1397c:	add	r4, r7, r0
   13980:	ldrb	r7, [r7, r0]
   13984:	cmp	r7, #0
   13988:	beq	139c4 <close_stdout@@Base+0x2358>
   1398c:	mov	r0, r5
   13990:	mov	r1, r4
   13994:	bl	10eb8 <strcmp@plt>
   13998:	cmp	r0, #0
   1399c:	beq	139b4 <close_stdout@@Base+0x2348>
   139a0:	cmp	r7, #42	; 0x2a
   139a4:	bne	13960 <close_stdout@@Base+0x22f4>
   139a8:	ldrb	r3, [r4, #1]
   139ac:	cmp	r3, #0
   139b0:	bne	13960 <close_stdout@@Base+0x22f4>
   139b4:	mov	r0, r4
   139b8:	bl	11020 <strlen@plt>
   139bc:	add	r0, r0, #1
   139c0:	add	r5, r4, r0
   139c4:	ldrb	r3, [r5]
   139c8:	cmp	r3, #0
   139cc:	ldreq	r5, [pc, #808]	; 13cfc <close_stdout@@Base+0x2690>
   139d0:	addeq	r5, pc, r5
   139d4:	ldr	r2, [sp, #124]	; 0x7c
   139d8:	mov	r0, r5
   139dc:	ldr	r3, [r6]
   139e0:	cmp	r2, r3
   139e4:	bne	13cc4 <close_stdout@@Base+0x2658>
   139e8:	add	sp, sp, #132	; 0x84
   139ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f0:	ldr	r5, [pc, #776]	; 13d00 <close_stdout@@Base+0x2694>
   139f4:	add	r5, pc, r5
   139f8:	b	13940 <close_stdout@@Base+0x22d4>
   139fc:	ldr	r0, [pc, #768]	; 13d04 <close_stdout@@Base+0x2698>
   13a00:	add	r0, pc, r0
   13a04:	bl	10fa8 <getenv@plt>
   13a08:	subs	r8, r0, #0
   13a0c:	beq	13c9c <close_stdout@@Base+0x2630>
   13a10:	ldrb	r3, [r8]
   13a14:	cmp	r3, #0
   13a18:	beq	13c30 <close_stdout@@Base+0x25c4>
   13a1c:	bl	11020 <strlen@plt>
   13a20:	subs	sl, r0, #0
   13a24:	subne	r3, sl, #1
   13a28:	bne	13c40 <close_stdout@@Base+0x25d4>
   13a2c:	mov	r9, #0
   13a30:	mov	fp, r9
   13a34:	add	r9, sl, r9
   13a38:	add	r0, r9, #14
   13a3c:	bl	10fc0 <malloc@plt>
   13a40:	subs	r7, r0, #0
   13a44:	beq	13c90 <close_stdout@@Base+0x2624>
   13a48:	mov	r1, r8
   13a4c:	mov	r2, sl
   13a50:	bl	10ee8 <memcpy@plt>
   13a54:	cmp	fp, #0
   13a58:	add	ip, r7, r9
   13a5c:	movne	r3, #47	; 0x2f
   13a60:	strbne	r3, [r7, sl]
   13a64:	ldr	r3, [pc, #668]	; 13d08 <close_stdout@@Base+0x269c>
   13a68:	add	r3, pc, r3
   13a6c:	ldm	r3!, {r0, r1, r2}
   13a70:	ldrh	r3, [r3]
   13a74:	str	r0, [r7, r9]
   13a78:	mov	r0, r7
   13a7c:	str	r1, [ip, #4]
   13a80:	mov	r1, #32768	; 0x8000
   13a84:	strh	r3, [ip, #12]
   13a88:	str	r2, [ip, #8]
   13a8c:	bl	10f9c <open64@plt>
   13a90:	subs	r8, r0, #0
   13a94:	blt	13c58 <close_stdout@@Base+0x25ec>
   13a98:	ldr	r1, [pc, #620]	; 13d0c <close_stdout@@Base+0x26a0>
   13a9c:	add	r1, pc, r1
   13aa0:	bl	10e88 <fdopen@plt>
   13aa4:	subs	fp, r0, #0
   13aa8:	beq	13cb0 <close_stdout@@Base+0x2644>
   13aac:	ldr	r0, [pc, #604]	; 13d10 <close_stdout@@Base+0x26a4>
   13ab0:	add	sl, sp, #20
   13ab4:	add	r9, sp, #72	; 0x48
   13ab8:	mov	r8, #0
   13abc:	add	r0, pc, r0
   13ac0:	str	r0, [sp, #12]
   13ac4:	ldr	r3, [fp, #4]
   13ac8:	ldr	r2, [fp, #8]
   13acc:	cmp	r3, r2
   13ad0:	bcs	13bbc <close_stdout@@Base+0x2550>
   13ad4:	add	r2, r3, #1
   13ad8:	str	r2, [fp, #4]
   13adc:	ldrb	r0, [r3]
   13ae0:	cmp	r0, #32
   13ae4:	beq	13ac4 <close_stdout@@Base+0x2458>
   13ae8:	sub	r3, r0, #9
   13aec:	cmp	r3, #1
   13af0:	bls	13ac4 <close_stdout@@Base+0x2458>
   13af4:	cmp	r0, #35	; 0x23
   13af8:	beq	13bd0 <close_stdout@@Base+0x2564>
   13afc:	mov	r1, fp
   13b00:	bl	1102c <ungetc@plt>
   13b04:	mov	r0, fp
   13b08:	ldr	r1, [sp, #12]
   13b0c:	mov	r2, sl
   13b10:	mov	r3, r9
   13b14:	bl	1105c <fscanf@plt>
   13b18:	cmp	r0, #1
   13b1c:	ble	13c00 <close_stdout@@Base+0x2594>
   13b20:	mov	r0, sl
   13b24:	bl	11020 <strlen@plt>
   13b28:	str	r0, [sp, #8]
   13b2c:	mov	r0, r9
   13b30:	bl	11020 <strlen@plt>
   13b34:	cmp	r8, #0
   13b38:	mov	r2, r0
   13b3c:	bne	13c64 <close_stdout@@Base+0x25f8>
   13b40:	ldr	r3, [sp, #8]
   13b44:	str	r2, [sp]
   13b48:	add	r8, r0, r3
   13b4c:	add	r0, r8, #3
   13b50:	add	r8, r8, #2
   13b54:	bl	10fc0 <malloc@plt>
   13b58:	ldr	r2, [sp]
   13b5c:	mov	r3, r0
   13b60:	cmp	r3, #0
   13b64:	beq	13cc8 <close_stdout@@Base+0x265c>
   13b68:	ldr	r0, [sp, #8]
   13b6c:	movw	r1, #65534	; 0xfffe
   13b70:	movt	r1, #65535	; 0xffff
   13b74:	rsb	r2, r2, r8
   13b78:	rsb	r1, r0, r1
   13b7c:	stm	sp, {r2, r3}
   13b80:	add	r0, r1, r2
   13b84:	mov	r1, sl
   13b88:	add	r0, r3, r0
   13b8c:	mov	r4, r3
   13b90:	bl	10f6c <strcpy@plt>
   13b94:	ldr	r2, [sp]
   13b98:	ldr	r3, [sp, #4]
   13b9c:	mov	r1, r9
   13ba0:	sub	r0, r2, #1
   13ba4:	add	r0, r3, r0
   13ba8:	bl	10f6c <strcpy@plt>
   13bac:	ldr	r3, [fp, #4]
   13bb0:	ldr	r2, [fp, #8]
   13bb4:	cmp	r3, r2
   13bb8:	bcc	13ad4 <close_stdout@@Base+0x2468>
   13bbc:	mov	r0, fp
   13bc0:	bl	110a4 <__uflow@plt>
   13bc4:	cmn	r0, #1
   13bc8:	beq	13c00 <close_stdout@@Base+0x2594>
   13bcc:	b	13ae0 <close_stdout@@Base+0x2474>
   13bd0:	ldr	r3, [fp, #4]
   13bd4:	ldr	r2, [fp, #8]
   13bd8:	cmp	r3, r2
   13bdc:	bcs	13ce4 <close_stdout@@Base+0x2678>
   13be0:	add	r2, r3, #1
   13be4:	str	r2, [fp, #4]
   13be8:	ldrb	r0, [r3]
   13bec:	cmp	r0, #10
   13bf0:	cmnne	r0, #1
   13bf4:	bne	13bd0 <close_stdout@@Base+0x2564>
   13bf8:	cmn	r0, #1
   13bfc:	bne	13ac4 <close_stdout@@Base+0x2458>
   13c00:	mov	r0, fp
   13c04:	bl	13d30 <close_stdout@@Base+0x26c4>
   13c08:	cmp	r8, #0
   13c0c:	beq	13c58 <close_stdout@@Base+0x25ec>
   13c10:	mov	r3, #0
   13c14:	strb	r3, [r4, r8]
   13c18:	mov	r0, r7
   13c1c:	bl	10ed0 <free@plt>
   13c20:	ldr	r3, [pc, #236]	; 13d14 <close_stdout@@Base+0x26a8>
   13c24:	add	r3, pc, r3
   13c28:	str	r4, [r3]
   13c2c:	b	13950 <close_stdout@@Base+0x22e4>
   13c30:	ldr	r8, [pc, #224]	; 13d18 <close_stdout@@Base+0x26ac>
   13c34:	mov	r3, #7
   13c38:	mov	sl, #8
   13c3c:	add	r8, pc, r8
   13c40:	ldrb	r3, [r8, r3]
   13c44:	cmp	r3, #47	; 0x2f
   13c48:	movne	r9, #1
   13c4c:	movne	fp, r9
   13c50:	bne	13a34 <close_stdout@@Base+0x23c8>
   13c54:	b	13a2c <close_stdout@@Base+0x23c0>
   13c58:	ldr	r4, [pc, #188]	; 13d1c <close_stdout@@Base+0x26b0>
   13c5c:	add	r4, pc, r4
   13c60:	b	13c18 <close_stdout@@Base+0x25ac>
   13c64:	ldr	r0, [sp, #8]
   13c68:	str	r2, [sp]
   13c6c:	add	r3, r0, r2
   13c70:	mov	r0, r4
   13c74:	add	r8, r3, r8
   13c78:	add	r1, r8, #3
   13c7c:	add	r8, r8, #2
   13c80:	bl	10f24 <realloc@plt>
   13c84:	ldr	r2, [sp]
   13c88:	mov	r3, r0
   13c8c:	b	13b60 <close_stdout@@Base+0x24f4>
   13c90:	ldr	r4, [pc, #136]	; 13d20 <close_stdout@@Base+0x26b4>
   13c94:	add	r4, pc, r4
   13c98:	b	13c20 <close_stdout@@Base+0x25b4>
   13c9c:	ldr	r8, [pc, #128]	; 13d24 <close_stdout@@Base+0x26b8>
   13ca0:	mov	r3, #7
   13ca4:	mov	sl, #8
   13ca8:	add	r8, pc, r8
   13cac:	b	13c40 <close_stdout@@Base+0x25d4>
   13cb0:	ldr	r4, [pc, #112]	; 13d28 <close_stdout@@Base+0x26bc>
   13cb4:	mov	r0, r8
   13cb8:	add	r4, pc, r4
   13cbc:	bl	11104 <close@plt>
   13cc0:	b	13c18 <close_stdout@@Base+0x25ac>
   13cc4:	bl	10f18 <__stack_chk_fail@plt>
   13cc8:	mov	r0, r4
   13ccc:	ldr	r4, [pc, #88]	; 13d2c <close_stdout@@Base+0x26c0>
   13cd0:	bl	10ed0 <free@plt>
   13cd4:	mov	r0, fp
   13cd8:	add	r4, pc, r4
   13cdc:	bl	13d30 <close_stdout@@Base+0x26c4>
   13ce0:	b	13c18 <close_stdout@@Base+0x25ac>
   13ce4:	mov	r0, fp
   13ce8:	bl	110a4 <__uflow@plt>
   13cec:	b	13bec <close_stdout@@Base+0x2580>
   13cf0:	ldrdeq	r1, [r1], -ip
   13cf4:	andeq	r0, r0, r8, ror #1
   13cf8:	andeq	r1, r1, ip, asr r9
   13cfc:	andeq	r0, r0, ip, asr #28
   13d00:	andeq	r0, r0, r8, lsr #19
   13d04:	andeq	r0, r0, r4, lsr #28
   13d08:	andeq	r0, r0, ip, asr #27
   13d0c:	andeq	r0, r0, r8, lsr #27
   13d10:	andeq	r0, r0, ip, lsl #27
   13d14:	andeq	r1, r1, ip, ror r6
   13d18:	ldrdeq	r0, [r0], -r4
   13d1c:	andeq	r0, r0, r0, asr #14
   13d20:	andeq	r0, r0, r8, lsl #14
   13d24:	andeq	r0, r0, r8, ror #22
   13d28:	andeq	r0, r0, r4, ror #13
   13d2c:	andeq	r0, r0, r4, asr #13
   13d30:	push	{r4, r5, r6, lr}
   13d34:	sub	sp, sp, #8
   13d38:	mov	r4, r0
   13d3c:	bl	11074 <fileno@plt>
   13d40:	cmp	r0, #0
   13d44:	mov	r0, r4
   13d48:	blt	13dc4 <close_stdout@@Base+0x2758>
   13d4c:	bl	10fd8 <__freading@plt>
   13d50:	cmp	r0, #0
   13d54:	bne	13d90 <close_stdout@@Base+0x2724>
   13d58:	mov	r0, r4
   13d5c:	bl	13dd0 <close_stdout@@Base+0x2764>
   13d60:	cmp	r0, #0
   13d64:	beq	13dc0 <close_stdout@@Base+0x2754>
   13d68:	bl	11038 <__errno_location@plt>
   13d6c:	ldr	r6, [r0]
   13d70:	mov	r5, r0
   13d74:	mov	r0, r4
   13d78:	bl	1108c <fclose@plt>
   13d7c:	cmp	r6, #0
   13d80:	mvnne	r0, #0
   13d84:	strne	r6, [r5]
   13d88:	add	sp, sp, #8
   13d8c:	pop	{r4, r5, r6, pc}
   13d90:	mov	r0, r4
   13d94:	bl	11074 <fileno@plt>
   13d98:	mov	r1, #1
   13d9c:	mov	r2, #0
   13da0:	mov	r3, #0
   13da4:	str	r1, [sp]
   13da8:	bl	10f54 <lseek64@plt>
   13dac:	mvn	r2, #0
   13db0:	mvn	r3, #0
   13db4:	cmp	r1, r3
   13db8:	cmpeq	r0, r2
   13dbc:	bne	13d58 <close_stdout@@Base+0x26ec>
   13dc0:	mov	r0, r4
   13dc4:	add	sp, sp, #8
   13dc8:	pop	{r4, r5, r6, lr}
   13dcc:	b	1108c <fclose@plt>
   13dd0:	push	{r4, lr}
   13dd4:	subs	r4, r0, #0
   13dd8:	sub	sp, sp, #8
   13ddc:	beq	13dec <close_stdout@@Base+0x2780>
   13de0:	bl	10fd8 <__freading@plt>
   13de4:	cmp	r0, #0
   13de8:	bne	13dfc <close_stdout@@Base+0x2790>
   13dec:	mov	r0, r4
   13df0:	add	sp, sp, #8
   13df4:	pop	{r4, lr}
   13df8:	b	10ec4 <fflush@plt>
   13dfc:	ldr	r3, [r4]
   13e00:	tst	r3, #256	; 0x100
   13e04:	beq	13dec <close_stdout@@Base+0x2780>
   13e08:	mov	r3, #1
   13e0c:	mov	r0, r4
   13e10:	str	r3, [sp]
   13e14:	mov	r2, #0
   13e18:	mov	r3, #0
   13e1c:	bl	13e30 <close_stdout@@Base+0x27c4>
   13e20:	mov	r0, r4
   13e24:	add	sp, sp, #8
   13e28:	pop	{r4, lr}
   13e2c:	b	10ec4 <fflush@plt>
   13e30:	push	{r4, r5, r6, r7, lr}
   13e34:	sub	sp, sp, #20
   13e38:	ldmib	r0, {r1, ip}
   13e3c:	mov	r6, r0
   13e40:	ldr	r4, [sp, #40]	; 0x28
   13e44:	cmp	ip, r1
   13e48:	beq	13e60 <close_stdout@@Base+0x27f4>
   13e4c:	str	r4, [sp, #40]	; 0x28
   13e50:	mov	r0, r6
   13e54:	add	sp, sp, #20
   13e58:	pop	{r4, r5, r6, r7, lr}
   13e5c:	b	11098 <fseeko64@plt>
   13e60:	ldr	ip, [r0, #20]
   13e64:	ldr	r1, [r0, #16]
   13e68:	cmp	ip, r1
   13e6c:	bne	13e4c <close_stdout@@Base+0x27e0>
   13e70:	ldr	r7, [r0, #36]	; 0x24
   13e74:	cmp	r7, #0
   13e78:	bne	13e4c <close_stdout@@Base+0x27e0>
   13e7c:	str	r2, [sp, #12]
   13e80:	mvn	r5, #0
   13e84:	str	r3, [sp, #8]
   13e88:	bl	11074 <fileno@plt>
   13e8c:	str	r4, [sp]
   13e90:	mvn	r4, #0
   13e94:	ldr	r2, [sp, #12]
   13e98:	ldr	r3, [sp, #8]
   13e9c:	bl	10f54 <lseek64@plt>
   13ea0:	mov	r2, r0
   13ea4:	mov	r3, r1
   13ea8:	cmp	r3, r5
   13eac:	cmpeq	r2, r4
   13eb0:	beq	13ed0 <close_stdout@@Base+0x2864>
   13eb4:	ldr	r1, [r6]
   13eb8:	mov	r0, r7
   13ebc:	strd	r2, [r6, #80]	; 0x50
   13ec0:	bic	r3, r1, #16
   13ec4:	str	r3, [r6]
   13ec8:	add	sp, sp, #20
   13ecc:	pop	{r4, r5, r6, r7, pc}
   13ed0:	mvn	r0, #0
   13ed4:	b	13ec8 <close_stdout@@Base+0x285c>
   13ed8:	subs	r2, r1, #1
   13edc:	bxeq	lr
   13ee0:	bcc	140b8 <close_stdout@@Base+0x2a4c>
   13ee4:	cmp	r0, r1
   13ee8:	bls	1409c <close_stdout@@Base+0x2a30>
   13eec:	tst	r1, r2
   13ef0:	beq	140a8 <close_stdout@@Base+0x2a3c>
   13ef4:	clz	r3, r0
   13ef8:	clz	r2, r1
   13efc:	sub	r3, r2, r3
   13f00:	rsbs	r3, r3, #31
   13f04:	addne	r3, r3, r3, lsl #1
   13f08:	mov	r2, #0
   13f0c:	addne	pc, pc, r3, lsl #2
   13f10:	nop	{0}
   13f14:	cmp	r0, r1, lsl #31
   13f18:	adc	r2, r2, r2
   13f1c:	subcs	r0, r0, r1, lsl #31
   13f20:	cmp	r0, r1, lsl #30
   13f24:	adc	r2, r2, r2
   13f28:	subcs	r0, r0, r1, lsl #30
   13f2c:	cmp	r0, r1, lsl #29
   13f30:	adc	r2, r2, r2
   13f34:	subcs	r0, r0, r1, lsl #29
   13f38:	cmp	r0, r1, lsl #28
   13f3c:	adc	r2, r2, r2
   13f40:	subcs	r0, r0, r1, lsl #28
   13f44:	cmp	r0, r1, lsl #27
   13f48:	adc	r2, r2, r2
   13f4c:	subcs	r0, r0, r1, lsl #27
   13f50:	cmp	r0, r1, lsl #26
   13f54:	adc	r2, r2, r2
   13f58:	subcs	r0, r0, r1, lsl #26
   13f5c:	cmp	r0, r1, lsl #25
   13f60:	adc	r2, r2, r2
   13f64:	subcs	r0, r0, r1, lsl #25
   13f68:	cmp	r0, r1, lsl #24
   13f6c:	adc	r2, r2, r2
   13f70:	subcs	r0, r0, r1, lsl #24
   13f74:	cmp	r0, r1, lsl #23
   13f78:	adc	r2, r2, r2
   13f7c:	subcs	r0, r0, r1, lsl #23
   13f80:	cmp	r0, r1, lsl #22
   13f84:	adc	r2, r2, r2
   13f88:	subcs	r0, r0, r1, lsl #22
   13f8c:	cmp	r0, r1, lsl #21
   13f90:	adc	r2, r2, r2
   13f94:	subcs	r0, r0, r1, lsl #21
   13f98:	cmp	r0, r1, lsl #20
   13f9c:	adc	r2, r2, r2
   13fa0:	subcs	r0, r0, r1, lsl #20
   13fa4:	cmp	r0, r1, lsl #19
   13fa8:	adc	r2, r2, r2
   13fac:	subcs	r0, r0, r1, lsl #19
   13fb0:	cmp	r0, r1, lsl #18
   13fb4:	adc	r2, r2, r2
   13fb8:	subcs	r0, r0, r1, lsl #18
   13fbc:	cmp	r0, r1, lsl #17
   13fc0:	adc	r2, r2, r2
   13fc4:	subcs	r0, r0, r1, lsl #17
   13fc8:	cmp	r0, r1, lsl #16
   13fcc:	adc	r2, r2, r2
   13fd0:	subcs	r0, r0, r1, lsl #16
   13fd4:	cmp	r0, r1, lsl #15
   13fd8:	adc	r2, r2, r2
   13fdc:	subcs	r0, r0, r1, lsl #15
   13fe0:	cmp	r0, r1, lsl #14
   13fe4:	adc	r2, r2, r2
   13fe8:	subcs	r0, r0, r1, lsl #14
   13fec:	cmp	r0, r1, lsl #13
   13ff0:	adc	r2, r2, r2
   13ff4:	subcs	r0, r0, r1, lsl #13
   13ff8:	cmp	r0, r1, lsl #12
   13ffc:	adc	r2, r2, r2
   14000:	subcs	r0, r0, r1, lsl #12
   14004:	cmp	r0, r1, lsl #11
   14008:	adc	r2, r2, r2
   1400c:	subcs	r0, r0, r1, lsl #11
   14010:	cmp	r0, r1, lsl #10
   14014:	adc	r2, r2, r2
   14018:	subcs	r0, r0, r1, lsl #10
   1401c:	cmp	r0, r1, lsl #9
   14020:	adc	r2, r2, r2
   14024:	subcs	r0, r0, r1, lsl #9
   14028:	cmp	r0, r1, lsl #8
   1402c:	adc	r2, r2, r2
   14030:	subcs	r0, r0, r1, lsl #8
   14034:	cmp	r0, r1, lsl #7
   14038:	adc	r2, r2, r2
   1403c:	subcs	r0, r0, r1, lsl #7
   14040:	cmp	r0, r1, lsl #6
   14044:	adc	r2, r2, r2
   14048:	subcs	r0, r0, r1, lsl #6
   1404c:	cmp	r0, r1, lsl #5
   14050:	adc	r2, r2, r2
   14054:	subcs	r0, r0, r1, lsl #5
   14058:	cmp	r0, r1, lsl #4
   1405c:	adc	r2, r2, r2
   14060:	subcs	r0, r0, r1, lsl #4
   14064:	cmp	r0, r1, lsl #3
   14068:	adc	r2, r2, r2
   1406c:	subcs	r0, r0, r1, lsl #3
   14070:	cmp	r0, r1, lsl #2
   14074:	adc	r2, r2, r2
   14078:	subcs	r0, r0, r1, lsl #2
   1407c:	cmp	r0, r1, lsl #1
   14080:	adc	r2, r2, r2
   14084:	subcs	r0, r0, r1, lsl #1
   14088:	cmp	r0, r1
   1408c:	adc	r2, r2, r2
   14090:	subcs	r0, r0, r1
   14094:	mov	r0, r2
   14098:	bx	lr
   1409c:	moveq	r0, #1
   140a0:	movne	r0, #0
   140a4:	bx	lr
   140a8:	clz	r2, r1
   140ac:	rsb	r2, r2, #31
   140b0:	lsr	r0, r0, r2
   140b4:	bx	lr
   140b8:	cmp	r0, #0
   140bc:	mvnne	r0, #0
   140c0:	b	140e4 <close_stdout@@Base+0x2a78>
   140c4:	cmp	r1, #0
   140c8:	beq	140b8 <close_stdout@@Base+0x2a4c>
   140cc:	push	{r0, r1, lr}
   140d0:	bl	13ed8 <close_stdout@@Base+0x286c>
   140d4:	pop	{r1, r2, lr}
   140d8:	mul	r3, r2, r0
   140dc:	sub	r1, r1, r3
   140e0:	bx	lr
   140e4:	push	{r1, lr}
   140e8:	mov	r0, #8
   140ec:	bl	10eac <raise@plt>
   140f0:	pop	{r1, pc}
   140f4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   140f8:	mov	r7, r0
   140fc:	ldr	r6, [pc, #76]	; 14150 <close_stdout@@Base+0x2ae4>
   14100:	mov	r8, r1
   14104:	ldr	r5, [pc, #72]	; 14154 <close_stdout@@Base+0x2ae8>
   14108:	mov	r9, r2
   1410c:	add	r6, pc, r6
   14110:	bl	10e68 <fdopen@plt-0x20>
   14114:	add	r5, pc, r5
   14118:	rsb	r6, r5, r6
   1411c:	asrs	r6, r6, #2
   14120:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14124:	sub	r5, r5, #4
   14128:	mov	r4, #0
   1412c:	add	r4, r4, #1
   14130:	ldr	r3, [r5, #4]!
   14134:	mov	r0, r7
   14138:	mov	r1, r8
   1413c:	mov	r2, r9
   14140:	blx	r3
   14144:	cmp	r4, r6
   14148:	bne	1412c <close_stdout@@Base+0x2ac0>
   1414c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14150:	andeq	r0, r1, r8, ror sp
   14154:	andeq	r0, r1, ip, ror #26
   14158:	bx	lr
   1415c:	ldr	r3, [pc, #28]	; 14180 <close_stdout@@Base+0x2b14>
   14160:	mov	r1, #0
   14164:	ldr	r2, [pc, #24]	; 14184 <close_stdout@@Base+0x2b18>
   14168:	add	r3, pc, r3
   1416c:	ldr	r3, [r3, r2]
   14170:	cmp	r3, #0
   14174:	ldrne	r2, [r3]
   14178:	moveq	r2, r3
   1417c:	b	11044 <__cxa_atexit@plt>
   14180:	muleq	r1, r0, lr
   14184:	andeq	r0, r0, r0, lsl #2

Disassembly of section .fini:

00014188 <.fini>:
   14188:	push	{r3, lr}
   1418c:	pop	{r3, pc}
