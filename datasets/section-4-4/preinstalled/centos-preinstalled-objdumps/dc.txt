
centos-preinstalled/dc:     file format elf32-littlearm


Disassembly of section .init:

00008b50 <.init>:
    8b50:	push	{r3, lr}
    8b54:	bl	8fd8 <__assert_fail@plt+0x27c>
    8b58:	pop	{r3, pc}

Disassembly of section .plt:

00008b5c <raise@plt-0x14>:
    8b5c:	push	{lr}		; (str lr, [sp, #-4]!)
    8b60:	ldr	lr, [pc, #4]	; 8b6c <raise@plt-0x4>
    8b64:	add	lr, pc, lr
    8b68:	ldr	pc, [lr, #8]!
    8b6c:	muleq	r1, r4, r4

00008b70 <raise@plt>:
    8b70:	add	ip, pc, #0, 12
    8b74:	add	ip, ip, #16, 20	; 0x10000
    8b78:	ldr	pc, [ip, #1172]!	; 0x494

00008b7c <strtol@plt>:
    8b7c:	add	ip, pc, #0, 12
    8b80:	add	ip, ip, #16, 20	; 0x10000
    8b84:	ldr	pc, [ip, #1164]!	; 0x48c

00008b88 <fopen@plt>:
    8b88:	add	ip, pc, #0, 12
    8b8c:	add	ip, ip, #16, 20	; 0x10000
    8b90:	ldr	pc, [ip, #1156]!	; 0x484

00008b94 <fflush@plt>:
    8b94:	add	ip, pc, #0, 12
    8b98:	add	ip, ip, #16, 20	; 0x10000
    8b9c:	ldr	pc, [ip, #1148]!	; 0x47c

00008ba0 <free@plt>:
    8ba0:	add	ip, pc, #0, 12
    8ba4:	add	ip, ip, #16, 20	; 0x10000
    8ba8:	ldr	pc, [ip, #1140]!	; 0x474

00008bac <ferror@plt>:
    8bac:	add	ip, pc, #0, 12
    8bb0:	add	ip, ip, #16, 20	; 0x10000
    8bb4:	ldr	pc, [ip, #1132]!	; 0x46c

00008bb8 <memcpy@plt>:
    8bb8:	add	ip, pc, #0, 12
    8bbc:	add	ip, ip, #16, 20	; 0x10000
    8bc0:	ldr	pc, [ip, #1124]!	; 0x464

00008bc4 <signal@plt>:
    8bc4:	add	ip, pc, #0, 12
    8bc8:	add	ip, ip, #16, 20	; 0x10000
    8bcc:	ldr	pc, [ip, #1116]!	; 0x45c

00008bd0 <_IO_getc@plt>:
    8bd0:	add	ip, pc, #0, 12
    8bd4:	add	ip, ip, #16, 20	; 0x10000
    8bd8:	ldr	pc, [ip, #1108]!	; 0x454

00008bdc <__stack_chk_fail@plt>:
    8bdc:	add	ip, pc, #0, 12
    8be0:	add	ip, ip, #16, 20	; 0x10000
    8be4:	ldr	pc, [ip, #1100]!	; 0x44c

00008be8 <realloc@plt>:
    8be8:	add	ip, pc, #0, 12
    8bec:	add	ip, ip, #16, 20	; 0x10000
    8bf0:	ldr	pc, [ip, #1092]!	; 0x444

00008bf4 <perror@plt>:
    8bf4:	add	ip, pc, #0, 12
    8bf8:	add	ip, ip, #16, 20	; 0x10000
    8bfc:	ldr	pc, [ip, #1084]!	; 0x43c

00008c00 <_IO_putc@plt>:
    8c00:	add	ip, pc, #0, 12
    8c04:	add	ip, ip, #16, 20	; 0x10000
    8c08:	ldr	pc, [ip, #1076]!	; 0x434

00008c0c <fwrite@plt>:
    8c0c:	add	ip, pc, #0, 12
    8c10:	add	ip, ip, #16, 20	; 0x10000
    8c14:	ldr	pc, [ip, #1068]!	; 0x42c

00008c18 <getenv@plt>:
    8c18:	add	ip, pc, #0, 12
    8c1c:	add	ip, ip, #16, 20	; 0x10000
    8c20:	ldr	pc, [ip, #1060]!	; 0x424

00008c24 <puts@plt>:
    8c24:	add	ip, pc, #0, 12
    8c28:	add	ip, ip, #16, 20	; 0x10000
    8c2c:	ldr	pc, [ip, #1052]!	; 0x41c

00008c30 <malloc@plt>:
    8c30:	add	ip, pc, #0, 12
    8c34:	add	ip, ip, #16, 20	; 0x10000
    8c38:	ldr	pc, [ip, #1044]!	; 0x414

00008c3c <__libc_start_main@plt>:
    8c3c:	add	ip, pc, #0, 12
    8c40:	add	ip, ip, #16, 20	; 0x10000
    8c44:	ldr	pc, [ip, #1036]!	; 0x40c

00008c48 <system@plt>:
    8c48:	add	ip, pc, #0, 12
    8c4c:	add	ip, ip, #16, 20	; 0x10000
    8c50:	ldr	pc, [ip, #1028]!	; 0x404

00008c54 <__fxstat@plt>:
    8c54:	add	ip, pc, #0, 12
    8c58:	add	ip, ip, #16, 20	; 0x10000
    8c5c:	ldr	pc, [ip, #1020]!	; 0x3fc

00008c60 <__vfprintf_chk@plt>:
    8c60:	add	ip, pc, #0, 12
    8c64:	add	ip, ip, #16, 20	; 0x10000
    8c68:	ldr	pc, [ip, #1012]!	; 0x3f4

00008c6c <__gmon_start__@plt>:
    8c6c:	add	ip, pc, #0, 12
    8c70:	add	ip, ip, #16, 20	; 0x10000
    8c74:	ldr	pc, [ip, #1004]!	; 0x3ec

00008c78 <getopt_long@plt>:
    8c78:	add	ip, pc, #0, 12
    8c7c:	add	ip, ip, #16, 20	; 0x10000
    8c80:	ldr	pc, [ip, #996]!	; 0x3e4

00008c84 <__ctype_b_loc@plt>:
    8c84:	add	ip, pc, #0, 12
    8c88:	add	ip, ip, #16, 20	; 0x10000
    8c8c:	ldr	pc, [ip, #988]!	; 0x3dc

00008c90 <exit@plt>:
    8c90:	add	ip, pc, #0, 12
    8c94:	add	ip, ip, #16, 20	; 0x10000
    8c98:	ldr	pc, [ip, #980]!	; 0x3d4

00008c9c <strlen@plt>:
    8c9c:	add	ip, pc, #0, 12
    8ca0:	add	ip, ip, #16, 20	; 0x10000
    8ca4:	ldr	pc, [ip, #972]!	; 0x3cc

00008ca8 <strchr@plt>:
    8ca8:	add	ip, pc, #0, 12
    8cac:	add	ip, ip, #16, 20	; 0x10000
    8cb0:	ldr	pc, [ip, #964]!	; 0x3c4

00008cb4 <ungetc@plt>:
    8cb4:	add	ip, pc, #0, 12
    8cb8:	add	ip, ip, #16, 20	; 0x10000
    8cbc:	ldr	pc, [ip, #956]!	; 0x3bc

00008cc0 <__errno_location@plt>:
    8cc0:	add	ip, pc, #0, 12
    8cc4:	add	ip, ip, #16, 20	; 0x10000
    8cc8:	ldr	pc, [ip, #948]!	; 0x3b4

00008ccc <__sprintf_chk@plt>:
    8ccc:	add	ip, pc, #0, 12
    8cd0:	add	ip, ip, #16, 20	; 0x10000
    8cd4:	ldr	pc, [ip, #940]!	; 0x3ac

00008cd8 <setvbuf@plt>:
    8cd8:	add	ip, pc, #0, 12
    8cdc:	add	ip, ip, #16, 20	; 0x10000
    8ce0:	ldr	pc, [ip, #932]!	; 0x3a4

00008ce4 <memset@plt>:
    8ce4:	add	ip, pc, #0, 12
    8ce8:	add	ip, ip, #16, 20	; 0x10000
    8cec:	ldr	pc, [ip, #924]!	; 0x39c

00008cf0 <strncpy@plt>:
    8cf0:	add	ip, pc, #0, 12
    8cf4:	add	ip, ip, #16, 20	; 0x10000
    8cf8:	ldr	pc, [ip, #916]!	; 0x394

00008cfc <__printf_chk@plt>:
    8cfc:	add	ip, pc, #0, 12
    8d00:	add	ip, ip, #16, 20	; 0x10000
    8d04:	ldr	pc, [ip, #908]!	; 0x38c

00008d08 <fileno@plt>:
    8d08:	add	ip, pc, #0, 12
    8d0c:	add	ip, ip, #16, 20	; 0x10000
    8d10:	ldr	pc, [ip, #900]!	; 0x384

00008d14 <__fprintf_chk@plt>:
    8d14:	add	ip, pc, #0, 12
    8d18:	add	ip, ip, #16, 20	; 0x10000
    8d1c:	ldr	pc, [ip, #892]!	; 0x37c

00008d20 <memchr@plt>:
    8d20:	add	ip, pc, #0, 12
    8d24:	add	ip, ip, #16, 20	; 0x10000
    8d28:	ldr	pc, [ip, #884]!	; 0x374

00008d2c <fclose@plt>:
    8d2c:	add	ip, pc, #0, 12
    8d30:	add	ip, ip, #16, 20	; 0x10000
    8d34:	ldr	pc, [ip, #876]!	; 0x36c

00008d38 <strrchr@plt>:
    8d38:	add	ip, pc, #0, 12
    8d3c:	add	ip, ip, #16, 20	; 0x10000
    8d40:	ldr	pc, [ip, #868]!	; 0x364

00008d44 <fputc@plt>:
    8d44:	add	ip, pc, #0, 12
    8d48:	add	ip, ip, #16, 20	; 0x10000
    8d4c:	ldr	pc, [ip, #860]!	; 0x35c

00008d50 <abort@plt>:
    8d50:	add	ip, pc, #0, 12
    8d54:	add	ip, ip, #16, 20	; 0x10000
    8d58:	ldr	pc, [ip, #852]!	; 0x354

00008d5c <__assert_fail@plt>:
    8d5c:	add	ip, pc, #0, 12
    8d60:	add	ip, ip, #16, 20	; 0x10000
    8d64:	ldr	pc, [ip, #844]!	; 0x34c

Disassembly of section .text:

00008d68 <.text>:
    8d68:	push	{r4, r5, r6, r7, r8, r9, lr}
    8d6c:	movw	r4, #37072	; 0x90d0
    8d70:	movt	r4, #1
    8d74:	ldr	r7, [r1]
    8d78:	sub	sp, sp, #28
    8d7c:	mov	r6, r1
    8d80:	ldr	r3, [r4]
    8d84:	mov	r1, #47	; 0x2f
    8d88:	mov	r8, r0
    8d8c:	mov	r0, r7
    8d90:	movw	r5, #37100	; 0x90ec
    8d94:	movt	r5, #1
    8d98:	str	r3, [sp, #20]
    8d9c:	bl	8d38 <strrchr@plt>
    8da0:	mov	r1, #0
    8da4:	movw	ip, #38188	; 0x952c
    8da8:	movt	ip, #1
    8dac:	mov	r3, r1
    8db0:	mov	r2, #1
    8db4:	mov	r9, #0
    8db8:	cmp	r0, #0
    8dbc:	addne	r7, r0, #1
    8dc0:	ldr	r0, [r5]
    8dc4:	str	r7, [ip]
    8dc8:	bl	8cd8 <setvbuf@plt>
    8dcc:	movw	r7, #37104	; 0x90f0
    8dd0:	bl	c1ec <__assert_fail@plt+0x3490>
    8dd4:	movt	r7, #1
    8dd8:	bl	c6e8 <__assert_fail@plt+0x398c>
    8ddc:	bl	ab9c <__assert_fail@plt+0x1e40>
    8de0:	bl	b6b4 <__assert_fail@plt+0x2958>
    8de4:	mov	r3, #0
    8de8:	movw	r2, #63744	; 0xf900
    8dec:	str	r3, [sp]
    8df0:	movt	r2, #0
    8df4:	movw	r3, #62752	; 0xf520
    8df8:	mov	r0, r8
    8dfc:	movt	r3, #0
    8e00:	mov	r1, r6
    8e04:	bl	8c78 <getopt_long@plt>
    8e08:	cmn	r0, #1
    8e0c:	beq	8f3c <__assert_fail@plt+0x1e0>
    8e10:	sub	r3, r0, #86	; 0x56
    8e14:	cmp	r3, #18
    8e18:	ldrls	pc, [pc, r3, lsl #2]
    8e1c:	b	8f24 <__assert_fail@plt+0x1c8>
    8e20:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8e24:	andeq	r8, r0, r4, lsr #30
    8e28:	andeq	r8, r0, r4, lsr #30
    8e2c:	andeq	r8, r0, r4, lsr #30
    8e30:	andeq	r8, r0, r4, lsr #30
    8e34:	andeq	r8, r0, r4, lsr #30
    8e38:	andeq	r8, r0, r4, lsr #30
    8e3c:	andeq	r8, r0, r4, lsr #30
    8e40:	andeq	r8, r0, r4, lsr #30
    8e44:	andeq	r8, r0, r4, lsr #30
    8e48:	andeq	r8, r0, r4, lsr #30
    8e4c:	andeq	r8, r0, r4, lsr #30
    8e50:	andeq	r8, r0, r4, lsr #30
    8e54:	andeq	r8, r0, r4, lsr #30
    8e58:	andeq	r8, r0, r4, lsr #30
    8e5c:	andeq	r8, r0, r0, lsr #29
    8e60:	muleq	r0, r0, lr
    8e64:	andeq	r8, r0, r4, lsr #30
    8e68:	andeq	r8, r0, ip, ror #28
    8e6c:	ldr	r0, [r5]
    8e70:	bl	9388 <__assert_fail@plt+0x62c>
    8e74:	bl	92bc <__assert_fail@plt+0x560>
    8e78:	ldr	r2, [sp, #20]
    8e7c:	ldr	r3, [r4]
    8e80:	cmp	r2, r3
    8e84:	bne	8f98 <__assert_fail@plt+0x23c>
    8e88:	add	sp, sp, #28
    8e8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
    8e90:	ldr	r0, [r7]
    8e94:	bl	90d0 <__assert_fail@plt+0x374>
    8e98:	mov	r9, #1
    8e9c:	b	8de4 <__assert_fail@plt+0x88>
    8ea0:	ldr	r9, [r7]
    8ea4:	mov	r0, r9
    8ea8:	bl	8c9c <strlen@plt>
    8eac:	mov	r1, r9
    8eb0:	mov	r2, r0
    8eb4:	add	r0, sp, #12
    8eb8:	bl	c574 <__assert_fail@plt+0x3818>
    8ebc:	add	r0, sp, #12
    8ec0:	bl	a298 <__assert_fail@plt+0x153c>
    8ec4:	cmp	r0, #0
    8ec8:	bne	8e74 <__assert_fail@plt+0x118>
    8ecc:	add	r0, sp, #16
    8ed0:	bl	c4e8 <__assert_fail@plt+0x378c>
    8ed4:	b	8e98 <__assert_fail@plt+0x13c>
    8ed8:	movw	r3, #63460	; 0xf7e4
    8edc:	movw	r1, #63428	; 0xf7c4
    8ee0:	movt	r3, #0
    8ee4:	movt	r1, #0
    8ee8:	str	r3, [sp]
    8eec:	movw	r2, #63448	; 0xf7d8
    8ef0:	movw	r3, #63452	; 0xf7dc
    8ef4:	movt	r2, #0
    8ef8:	movt	r3, #0
    8efc:	mov	r0, #1
    8f00:	bl	8cfc <__printf_chk@plt>
    8f04:	movw	r1, #63468	; 0xf7ec
    8f08:	movw	r2, #63656	; 0xf8a8
    8f0c:	movt	r1, #0
    8f10:	movt	r2, #0
    8f14:	mov	r0, #1
    8f18:	bl	8cfc <__printf_chk@plt>
    8f1c:	bl	92bc <__assert_fail@plt+0x560>
    8f20:	b	8e78 <__assert_fail@plt+0x11c>
    8f24:	movw	r3, #37088	; 0x90e0
    8f28:	movt	r3, #1
    8f2c:	ldr	r0, [r3]
    8f30:	bl	9388 <__assert_fail@plt+0x62c>
    8f34:	mov	r0, #1
    8f38:	b	8e78 <__assert_fail@plt+0x11c>
    8f3c:	movw	r7, #37080	; 0x90d8
    8f40:	movt	r7, #1
    8f44:	mov	r5, r7
    8f48:	b	8f64 <__assert_fail@plt+0x208>
    8f4c:	ldr	r0, [r6, r3, lsl #2]
    8f50:	mov	r9, #1
    8f54:	bl	90d0 <__assert_fail@plt+0x374>
    8f58:	ldr	r3, [r5]
    8f5c:	add	r3, r3, r9
    8f60:	str	r3, [r5]
    8f64:	ldr	r3, [r7]
    8f68:	cmp	r8, r3
    8f6c:	bgt	8f4c <__assert_fail@plt+0x1f0>
    8f70:	cmp	r9, #0
    8f74:	bne	8e74 <__assert_fail@plt+0x118>
    8f78:	movw	r3, #37096	; 0x90e8
    8f7c:	movt	r3, #1
    8f80:	ldr	r0, [r3]
    8f84:	bl	a720 <__assert_fail@plt+0x19c4>
    8f88:	cmp	r0, #0
    8f8c:	beq	8e74 <__assert_fail@plt+0x118>
    8f90:	mov	r0, #1
    8f94:	b	8e78 <__assert_fail@plt+0x11c>
    8f98:	bl	8bdc <__stack_chk_fail@plt>
    8f9c:	mov	fp, #0
    8fa0:	mov	lr, #0
    8fa4:	pop	{r1}		; (ldr r1, [sp], #4)
    8fa8:	mov	r2, sp
    8fac:	push	{r2}		; (str r2, [sp, #-4]!)
    8fb0:	push	{r0}		; (str r0, [sp, #-4]!)
    8fb4:	ldr	ip, [pc, #16]	; 8fcc <__assert_fail@plt+0x270>
    8fb8:	push	{ip}		; (str ip, [sp, #-4]!)
    8fbc:	ldr	r0, [pc, #12]	; 8fd0 <__assert_fail@plt+0x274>
    8fc0:	ldr	r3, [pc, #12]	; 8fd4 <__assert_fail@plt+0x278>
    8fc4:	bl	8c3c <__libc_start_main@plt>
    8fc8:	bl	8d50 <abort@plt>
    8fcc:	andeq	pc, r0, ip, lsl #10
    8fd0:	andeq	r8, r0, r8, ror #26
    8fd4:	andeq	pc, r0, r8, lsr #9
    8fd8:	ldr	r3, [pc, #20]	; 8ff4 <__assert_fail@plt+0x298>
    8fdc:	ldr	r2, [pc, #20]	; 8ff8 <__assert_fail@plt+0x29c>
    8fe0:	add	r3, pc, r3
    8fe4:	ldr	r2, [r3, r2]
    8fe8:	cmp	r2, #0
    8fec:	bxeq	lr
    8ff0:	b	8c6c <__gmon_start__@plt>
    8ff4:	andeq	r0, r1, r8, lsl r0
    8ff8:	strheq	r0, [r0], -r4
    8ffc:	push	{r3, lr}
    9000:	movw	r0, #37072	; 0x90d0
    9004:	ldr	r3, [pc, #36]	; 9030 <__assert_fail@plt+0x2d4>
    9008:	movt	r0, #1
    900c:	rsb	r3, r0, r3
    9010:	cmp	r3, #6
    9014:	popls	{r3, pc}
    9018:	movw	r3, #0
    901c:	movt	r3, #0
    9020:	cmp	r3, #0
    9024:	popeq	{r3, pc}
    9028:	blx	r3
    902c:	pop	{r3, pc}
    9030:	ldrdeq	r9, [r1], -r3
    9034:	push	{r3, lr}
    9038:	movw	r0, #37072	; 0x90d0
    903c:	movw	r3, #37072	; 0x90d0
    9040:	movt	r0, #1
    9044:	movt	r3, #1
    9048:	rsb	r3, r0, r3
    904c:	asr	r3, r3, #2
    9050:	add	r3, r3, r3, lsr #31
    9054:	asrs	r1, r3, #1
    9058:	popeq	{r3, pc}
    905c:	movw	r2, #0
    9060:	movt	r2, #0
    9064:	cmp	r2, #0
    9068:	popeq	{r3, pc}
    906c:	blx	r2
    9070:	pop	{r3, pc}
    9074:	push	{r4, lr}
    9078:	movw	r4, #37108	; 0x90f4
    907c:	movt	r4, #1
    9080:	ldrb	r3, [r4]
    9084:	cmp	r3, #0
    9088:	popne	{r4, pc}
    908c:	bl	8ffc <__assert_fail@plt+0x2a0>
    9090:	mov	r3, #1
    9094:	strb	r3, [r4]
    9098:	pop	{r4, pc}
    909c:	movw	r0, #36612	; 0x8f04
    90a0:	movt	r0, #1
    90a4:	push	{r3, lr}
    90a8:	ldr	r3, [r0]
    90ac:	cmp	r3, #0
    90b0:	beq	90c8 <__assert_fail@plt+0x36c>
    90b4:	movw	r3, #0
    90b8:	movt	r3, #0
    90bc:	cmp	r3, #0
    90c0:	beq	90c8 <__assert_fail@plt+0x36c>
    90c4:	blx	r3
    90c8:	pop	{r3, lr}
    90cc:	b	9034 <__assert_fail@plt+0x2d8>
    90d0:	push	{r4, r5, r6, lr}
    90d4:	movw	r4, #37072	; 0x90d0
    90d8:	movt	r4, #1
    90dc:	ldrb	r2, [r0]
    90e0:	sub	sp, sp, #104	; 0x68
    90e4:	mov	r6, r0
    90e8:	ldr	r3, [r4]
    90ec:	cmp	r2, #45	; 0x2d
    90f0:	str	r3, [sp, #100]	; 0x64
    90f4:	beq	91c0 <__assert_fail@plt+0x464>
    90f8:	movw	r1, #62832	; 0xf570
    90fc:	mov	r0, r6
    9100:	movt	r1, #0
    9104:	bl	8b88 <fopen@plt>
    9108:	subs	r5, r0, #0
    910c:	beq	9288 <__assert_fail@plt+0x52c>
    9110:	mov	r0, r5
    9114:	bl	8d08 <fileno@plt>
    9118:	add	r2, sp, #8
    911c:	mov	r1, r0
    9120:	mov	r0, #3
    9124:	bl	8c54 <__fxstat@plt>
    9128:	cmn	r0, #1
    912c:	beq	91f4 <__assert_fail@plt+0x498>
    9130:	ldr	r2, [sp, #24]
    9134:	and	r3, r2, #61440	; 0xf000
    9138:	cmp	r3, #16384	; 0x4000
    913c:	beq	9228 <__assert_fail@plt+0x4cc>
    9140:	cmp	r3, #24576	; 0x6000
    9144:	beq	9258 <__assert_fail@plt+0x4fc>
    9148:	and	r2, r2, #45056	; 0xb000
    914c:	cmp	r2, #32768	; 0x8000
    9150:	cmpne	r3, #8192	; 0x2000
    9154:	beq	91dc <__assert_fail@plt+0x480>
    9158:	cmp	r3, #4096	; 0x1000
    915c:	beq	91dc <__assert_fail@plt+0x480>
    9160:	movw	r1, #37088	; 0x90e0
    9164:	movw	r3, #38188	; 0x952c
    9168:	movt	r1, #1
    916c:	movt	r3, #1
    9170:	str	r6, [sp]
    9174:	movw	r2, #62996	; 0xf614
    9178:	ldr	r0, [r1]
    917c:	movt	r2, #0
    9180:	ldr	r3, [r3]
    9184:	mov	r1, #1
    9188:	bl	8d14 <__fprintf_chk@plt>
    918c:	movw	r3, #37096	; 0x90e8
    9190:	movt	r3, #1
    9194:	ldr	r3, [r3]
    9198:	cmp	r5, r3
    919c:	beq	91a8 <__assert_fail@plt+0x44c>
    91a0:	mov	r0, r5
    91a4:	bl	8d2c <fclose@plt>
    91a8:	ldr	r2, [sp, #100]	; 0x64
    91ac:	ldr	r3, [r4]
    91b0:	cmp	r2, r3
    91b4:	bne	92b8 <__assert_fail@plt+0x55c>
    91b8:	add	sp, sp, #104	; 0x68
    91bc:	pop	{r4, r5, r6, pc}
    91c0:	ldrb	r3, [r0, #1]
    91c4:	cmp	r3, #0
    91c8:	bne	90f8 <__assert_fail@plt+0x39c>
    91cc:	movw	r3, #37096	; 0x90e8
    91d0:	movt	r3, #1
    91d4:	ldr	r5, [r3]
    91d8:	b	9110 <__assert_fail@plt+0x3b4>
    91dc:	mov	r0, r5
    91e0:	bl	a720 <__assert_fail@plt+0x19c4>
    91e4:	cmp	r0, #0
    91e8:	beq	918c <__assert_fail@plt+0x430>
    91ec:	mov	r0, #1
    91f0:	bl	8c90 <exit@plt>
    91f4:	movw	r0, #37088	; 0x90e0
    91f8:	movw	r3, #38188	; 0x952c
    91fc:	movt	r0, #1
    9200:	movt	r3, #1
    9204:	mov	r1, #1
    9208:	movw	r2, #62864	; 0xf590
    920c:	ldr	r3, [r3]
    9210:	movt	r2, #0
    9214:	ldr	r0, [r0]
    9218:	bl	8d14 <__fprintf_chk@plt>
    921c:	mov	r0, r6
    9220:	bl	8bf4 <perror@plt>
    9224:	b	918c <__assert_fail@plt+0x430>
    9228:	movw	r1, #37088	; 0x90e0
    922c:	movw	r3, #38188	; 0x952c
    9230:	movt	r1, #1
    9234:	movt	r3, #1
    9238:	str	r6, [sp]
    923c:	movw	r2, #62892	; 0xf5ac
    9240:	ldr	r0, [r1]
    9244:	movt	r2, #0
    9248:	ldr	r3, [r3]
    924c:	mov	r1, #1
    9250:	bl	8d14 <__fprintf_chk@plt>
    9254:	b	918c <__assert_fail@plt+0x430>
    9258:	movw	r1, #37088	; 0x90e0
    925c:	movw	r3, #38188	; 0x952c
    9260:	movt	r1, #1
    9264:	movt	r3, #1
    9268:	str	r6, [sp]
    926c:	movw	r2, #62940	; 0xf5dc
    9270:	ldr	r0, [r1]
    9274:	movt	r2, #0
    9278:	ldr	r3, [r3]
    927c:	mov	r1, #1
    9280:	bl	8d14 <__fprintf_chk@plt>
    9284:	b	918c <__assert_fail@plt+0x430>
    9288:	movw	r1, #37088	; 0x90e0
    928c:	movw	r3, #38188	; 0x952c
    9290:	movt	r1, #1
    9294:	movt	r3, #1
    9298:	str	r6, [sp]
    929c:	movw	r2, #62836	; 0xf574
    92a0:	ldr	r0, [r1]
    92a4:	movt	r2, #0
    92a8:	ldr	r3, [r3]
    92ac:	mov	r1, #1
    92b0:	bl	8d14 <__fprintf_chk@plt>
    92b4:	b	91a8 <__assert_fail@plt+0x44c>
    92b8:	bl	8bdc <__stack_chk_fail@plt>
    92bc:	push	{r4, r5, r6, lr}
    92c0:	movw	r4, #37100	; 0x90ec
    92c4:	movt	r4, #1
    92c8:	ldr	r0, [r4]
    92cc:	bl	8bac <ferror@plt>
    92d0:	cmp	r0, #0
    92d4:	movwne	r6, #63104	; 0xf680
    92d8:	movtne	r6, #0
    92dc:	beq	9348 <__assert_fail@plt+0x5ec>
    92e0:	movw	r4, #37088	; 0x90e0
    92e4:	movw	r3, #38188	; 0x952c
    92e8:	movt	r4, #1
    92ec:	movt	r3, #1
    92f0:	mov	r1, #1
    92f4:	movw	r2, #63128	; 0xf698
    92f8:	ldr	r0, [r4]
    92fc:	movt	r2, #0
    9300:	ldr	r3, [r3]
    9304:	mov	r5, r1
    9308:	bl	8d14 <__fprintf_chk@plt>
    930c:	mov	r0, r6
    9310:	bl	8bf4 <perror@plt>
    9314:	ldr	r0, [r4]
    9318:	movw	r4, #37088	; 0x90e0
    931c:	bl	8bac <ferror@plt>
    9320:	movt	r4, #1
    9324:	cmp	r0, #0
    9328:	movne	r5, #1
    932c:	bne	9340 <__assert_fail@plt+0x5e4>
    9330:	ldr	r0, [r4]
    9334:	bl	8d2c <fclose@plt>
    9338:	cmp	r0, #0
    933c:	movne	r5, #1
    9340:	mov	r0, r5
    9344:	pop	{r4, r5, r6, pc}
    9348:	ldr	r0, [r4]
    934c:	bl	8b94 <fflush@plt>
    9350:	cmp	r0, #0
    9354:	movwne	r6, #63080	; 0xf668
    9358:	movtne	r6, #0
    935c:	bne	92e0 <__assert_fail@plt+0x584>
    9360:	ldr	r0, [r4]
    9364:	bl	8d2c <fclose@plt>
    9368:	cmp	r0, #0
    936c:	movwne	r6, #63056	; 0xf650
    9370:	movtne	r6, #0
    9374:	bne	92e0 <__assert_fail@plt+0x584>
    9378:	movw	r4, #37088	; 0x90e0
    937c:	mov	r5, r0
    9380:	movt	r4, #1
    9384:	b	9314 <__assert_fail@plt+0x5b8>
    9388:	push	{r3, lr}
    938c:	movw	r3, #38188	; 0x952c
    9390:	movt	r3, #1
    9394:	movw	r2, #63136	; 0xf6a0
    9398:	mov	r1, #1
    939c:	movt	r2, #0
    93a0:	ldr	r3, [r3]
    93a4:	bl	8d14 <__fprintf_chk@plt>
    93a8:	movw	r0, #63388	; 0xf79c
    93ac:	pop	{r3, lr}
    93b0:	movt	r0, #0
    93b4:	b	8c24 <puts@plt>
    93b8:	push	{r3, lr}
    93bc:	movw	r0, #37088	; 0x90e0
    93c0:	movw	r3, #38188	; 0x952c
    93c4:	movt	r0, #1
    93c8:	movt	r3, #1
    93cc:	movw	r2, #63788	; 0xf92c
    93d0:	mov	r1, #1
    93d4:	ldr	r0, [r0]
    93d8:	movt	r2, #0
    93dc:	ldr	r3, [r3]
    93e0:	bl	8d14 <__fprintf_chk@plt>
    93e4:	mov	r0, #1
    93e8:	bl	8c90 <exit@plt>
    93ec:	push	{r3, lr}
    93f0:	bl	8c30 <malloc@plt>
    93f4:	cmp	r0, #0
    93f8:	popne	{r3, pc}
    93fc:	bl	93b8 <__assert_fail@plt+0x65c>
    9400:	push	{r4, r5, r6, lr}
    9404:	sub	sp, sp, #8
    9408:	mov	r4, r1
    940c:	mov	r5, r0
    9410:	mov	r6, r2
    9414:	bl	8c84 <__ctype_b_loc@plt>
    9418:	lsl	r3, r4, #1
    941c:	ldr	r1, [r0]
    9420:	ldrsh	r3, [r1, r3]
    9424:	cmp	r3, #0
    9428:	blt	9450 <__assert_fail@plt+0x6f4>
    942c:	str	r6, [sp]
    9430:	mov	r0, r5
    9434:	mov	r3, r4
    9438:	mov	r1, #1
    943c:	movw	r2, #63824	; 0xf950
    9440:	movt	r2, #0
    9444:	bl	8d14 <__fprintf_chk@plt>
    9448:	add	sp, sp, #8
    944c:	pop	{r4, r5, r6, pc}
    9450:	str	r4, [sp]
    9454:	mov	r0, r5
    9458:	str	r6, [sp, #4]
    945c:	mov	r3, r4
    9460:	mov	r1, #1
    9464:	movw	r2, #63808	; 0xf940
    9468:	movt	r2, #0
    946c:	bl	8d14 <__fprintf_chk@plt>
    9470:	add	sp, sp, #8
    9474:	pop	{r4, r5, r6, pc}
    9478:	push	{r4, r5, lr}
    947c:	subs	r5, r1, #0
    9480:	sub	sp, sp, #12
    9484:	blt	94cc <__assert_fail@plt+0x770>
    9488:	movw	r4, #37088	; 0x90e0
    948c:	movw	r3, #38188	; 0x952c
    9490:	movt	r4, #1
    9494:	movt	r3, #1
    9498:	str	r0, [sp]
    949c:	mov	r1, #1
    94a0:	movw	r2, #63848	; 0xf968
    94a4:	ldr	r0, [r4]
    94a8:	movt	r2, #0
    94ac:	ldr	r3, [r3]
    94b0:	bl	8d14 <__fprintf_chk@plt>
    94b4:	movw	r2, #63864	; 0xf978
    94b8:	ldr	r0, [r4]
    94bc:	mov	r1, r5
    94c0:	movt	r2, #0
    94c4:	bl	9400 <__assert_fail@plt+0x6a4>
    94c8:	bl	8d50 <abort@plt>
    94cc:	movw	r1, #37088	; 0x90e0
    94d0:	movw	r3, #38188	; 0x952c
    94d4:	movt	r1, #1
    94d8:	movt	r3, #1
    94dc:	str	r0, [sp]
    94e0:	movw	r2, #63832	; 0xf958
    94e4:	ldr	r0, [r1]
    94e8:	movt	r2, #0
    94ec:	ldr	r3, [r3]
    94f0:	mov	r1, #1
    94f4:	bl	8d14 <__fprintf_chk@plt>
    94f8:	b	94c8 <__assert_fail@plt+0x76c>
    94fc:	push	{r3, r4, r5, r6, r7, lr}
    9500:	mov	r1, #10
    9504:	mov	r6, r0
    9508:	bl	8ca8 <strchr@plt>
    950c:	subs	r7, r0, #0
    9510:	beq	9554 <__assert_fail@plt+0x7f8>
    9514:	rsb	r4, r6, r7
    9518:	add	r0, r4, #1
    951c:	bl	8c30 <malloc@plt>
    9520:	subs	r5, r0, #0
    9524:	beq	956c <__assert_fail@plt+0x810>
    9528:	mov	r1, r6
    952c:	mov	r2, r4
    9530:	bl	8cf0 <strncpy@plt>
    9534:	mov	r3, #0
    9538:	mov	r0, r5
    953c:	strb	r3, [r5, r4]
    9540:	bl	8c48 <system@plt>
    9544:	mov	r0, r5
    9548:	bl	8ba0 <free@plt>
    954c:	add	r0, r7, #1
    9550:	pop	{r3, r4, r5, r6, r7, pc}
    9554:	mov	r0, r6
    9558:	bl	8c48 <system@plt>
    955c:	mov	r0, r6
    9560:	bl	8c9c <strlen@plt>
    9564:	add	r0, r6, r0
    9568:	pop	{r3, r4, r5, r6, r7, pc}
    956c:	bl	93b8 <__assert_fail@plt+0x65c>
    9570:	push	{r4, lr}
    9574:	sub	sp, sp, #8
    9578:	add	ip, sp, #8
    957c:	ldr	r4, [sp, #16]
    9580:	stmdb	ip, {r0, r1}
    9584:	ldr	ip, [sp]
    9588:	ldr	r0, [sp, #4]
    958c:	cmp	ip, #1
    9590:	beq	95b0 <__assert_fail@plt+0x854>
    9594:	cmp	ip, #2
    9598:	bne	95c8 <__assert_fail@plt+0x86c>
    959c:	mov	r1, r3
    95a0:	mov	r2, r4
    95a4:	add	sp, sp, #8
    95a8:	pop	{r4, lr}
    95ac:	b	c518 <__assert_fail@plt+0x37bc>
    95b0:	mov	r1, r2
    95b4:	mov	r2, r3
    95b8:	mov	r3, r4
    95bc:	add	sp, sp, #8
    95c0:	pop	{r4, lr}
    95c4:	b	c1f0 <__assert_fail@plt+0x3494>
    95c8:	movw	r0, #63880	; 0xf988
    95cc:	mvn	r1, #0
    95d0:	movt	r0, #0
    95d4:	bl	9478 <__assert_fail@plt+0x71c>
    95d8:	push	{r4, lr}
    95dc:	sub	sp, sp, #8
    95e0:	add	r3, sp, #8
    95e4:	mov	r4, r0
    95e8:	stmdb	r3, {r1, r2}
    95ec:	ldr	r3, [sp]
    95f0:	ldr	r1, [sp, #4]
    95f4:	sub	r2, r3, #1
    95f8:	cmp	r2, #1
    95fc:	bhi	9628 <__assert_fail@plt+0x8cc>
    9600:	cmp	r3, #1
    9604:	beq	9618 <__assert_fail@plt+0x8bc>
    9608:	bl	c4cc <__assert_fail@plt+0x3770>
    960c:	mov	r0, r4
    9610:	add	sp, sp, #8
    9614:	pop	{r4, pc}
    9618:	bl	c394 <__assert_fail@plt+0x3638>
    961c:	mov	r0, r4
    9620:	add	sp, sp, #8
    9624:	pop	{r4, pc}
    9628:	movw	r0, #63904	; 0xf9a0
    962c:	mvn	r1, #0
    9630:	movt	r0, #0
    9634:	bl	9478 <__assert_fail@plt+0x71c>
    9638:	movw	r3, #37112	; 0x90f8
    963c:	movt	r3, #1
    9640:	ldr	r2, [r3]
    9644:	ldrb	r0, [r2]
    9648:	cmp	r0, #0
    964c:	addne	r2, r2, #1
    9650:	strne	r2, [r3]
    9654:	mvneq	r0, #0
    9658:	bx	lr
    965c:	push	{r4, r5, r6, r7, r8, lr}
    9660:	movw	r4, #37072	; 0x90d0
    9664:	movt	r4, #1
    9668:	sub	sp, sp, #104	; 0x68
    966c:	sub	r3, r0, #9
    9670:	mov	r5, r0
    9674:	ldr	ip, [r4]
    9678:	mov	r6, r1
    967c:	str	ip, [sp, #100]	; 0x64
    9680:	cmp	r3, #117	; 0x75
    9684:	ldrls	pc, [pc, r3, lsl #2]
    9688:	b	a028 <__assert_fail@plt+0x12cc>
    968c:	andeq	r9, r0, r0, lsr #17
    9690:	andeq	r9, r0, r0, lsr #17
    9694:	andeq	sl, r0, r8, lsr #32
    9698:	andeq	sl, r0, r8, lsr #32
    969c:	andeq	sl, r0, r8, lsr #32
    96a0:	andeq	sl, r0, r8, lsr #32
    96a4:	andeq	sl, r0, r8, lsr #32
    96a8:	andeq	sl, r0, r8, lsr #32
    96ac:	andeq	sl, r0, r8, lsr #32
    96b0:	andeq	sl, r0, r8, lsr #32
    96b4:	andeq	sl, r0, r8, lsr #32
    96b8:	andeq	sl, r0, r8, lsr #32
    96bc:	andeq	sl, r0, r8, lsr #32
    96c0:	andeq	sl, r0, r8, lsr #32
    96c4:	andeq	sl, r0, r8, lsr #32
    96c8:	andeq	sl, r0, r8, lsr #32
    96cc:	andeq	sl, r0, r8, lsr #32
    96d0:	andeq	sl, r0, r8, lsr #32
    96d4:	andeq	sl, r0, r8, lsr #32
    96d8:	andeq	sl, r0, r8, lsr #32
    96dc:	andeq	sl, r0, r8, lsr #32
    96e0:	andeq	sl, r0, r8, lsr #32
    96e4:	andeq	sl, r0, r8, lsr #32
    96e8:	andeq	r9, r0, r0, lsr #17
    96ec:	strdeq	r9, [r0], -r4
    96f0:	andeq	sl, r0, r8, lsr #32
    96f4:	andeq	r9, r0, ip, ror #31
    96f8:	andeq	sl, r0, r8, lsr #32
    96fc:	andeq	sl, r0, r8
    9700:	andeq	sl, r0, r8, lsr #32
    9704:	andeq	sl, r0, r8, lsr #32
    9708:	andeq	sl, r0, r8, lsr #32
    970c:	andeq	sl, r0, r8, lsr #32
    9710:	andeq	r9, r0, r0, asr #29
    9714:	andeq	r9, r0, ip, asr #31
    9718:	andeq	sl, r0, r8, lsr #32
    971c:	andeq	r9, r0, ip, lsr #31
    9720:	andeq	r9, r0, r8, asr ip
    9724:	andeq	r9, r0, r8, lsr ip
    9728:	andeq	r9, r0, r8, asr ip
    972c:	andeq	r9, r0, r8, asr ip
    9730:	andeq	r9, r0, r8, asr ip
    9734:	andeq	r9, r0, r8, asr ip
    9738:	andeq	r9, r0, r8, asr ip
    973c:	andeq	r9, r0, r8, asr ip
    9740:	andeq	r9, r0, r8, asr ip
    9744:	andeq	r9, r0, r8, asr ip
    9748:	andeq	r9, r0, r8, asr ip
    974c:	andeq	r9, r0, r8, asr ip
    9750:	andeq	r9, r0, r4, lsl #29
    9754:	andeq	r9, r0, r0, lsr lr
    9758:	strdeq	r9, [r0], -ip
    975c:	andeq	r9, r0, r4, asr #27
    9760:	andeq	r9, r0, r0, asr pc
    9764:	andeq	r9, r0, r0, ror #29
    9768:	andeq	sl, r0, r8, lsr #32
    976c:	andeq	r9, r0, r8, asr ip
    9770:	andeq	r9, r0, r8, asr ip
    9774:	andeq	r9, r0, r8, asr ip
    9778:	andeq	r9, r0, r8, asr ip
    977c:	andeq	r9, r0, r8, asr ip
    9780:	andeq	r9, r0, r8, asr ip
    9784:	andeq	sl, r0, r8, lsr #32
    9788:	andeq	sl, r0, r8, lsr #32
    978c:	andeq	r9, r0, r4, lsl #31
    9790:	andeq	sl, r0, r8, lsr #32
    9794:	ldrdeq	r9, [r0], -r4
    9798:	muleq	r0, r4, sp
    979c:	andeq	sl, r0, r8, lsr #32
    97a0:	andeq	sl, r0, r8, lsr #32
    97a4:	andeq	r9, r0, r4, lsl #27
    97a8:	strdeq	r9, [r0], -ip
    97ac:	muleq	r0, r4, fp
    97b0:	andeq	sl, r0, r8, lsr #32
    97b4:	andeq	r9, r0, r4, ror #22
    97b8:	andeq	sl, r0, r8, lsr #32
    97bc:	andeq	sl, r0, r8, lsr #32
    97c0:	andeq	sl, r0, r8, lsr #32
    97c4:	andeq	sl, r0, r8, lsr #32
    97c8:	andeq	r9, r0, r0, asr #22
    97cc:	andeq	sl, r0, r8, lsr #32
    97d0:	andeq	r9, r0, r0, lsl #22
    97d4:	strdeq	r9, [r0], -r8
    97d8:	andeq	sl, r0, r8, lsr #32
    97dc:	andeq	sl, r0, r8, lsr #32
    97e0:	strdeq	r9, [r0], -r8
    97e4:	andeq	r9, r0, r8, asr ip
    97e8:	andeq	sl, r0, r8, lsr #32
    97ec:	andeq	r9, r0, r0, lsr #25
    97f0:	andeq	sl, r0, r8, lsr #32
    97f4:	muleq	r0, r4, ip
    97f8:	andeq	r9, r0, r0, ror #24
    97fc:	andeq	sl, r0, r8, lsr #32
    9800:	andeq	r9, r0, ip, ror #26
    9804:	andeq	sl, r0, r8, lsr #32
    9808:	andeq	sl, r0, r8, lsr #32
    980c:	andeq	r9, r0, r8, lsl sp
    9810:	andeq	sl, r0, r8, lsr #32
    9814:	andeq	r9, r0, r8, lsl #21
    9818:	andeq	r9, r0, r0, ror #20
    981c:	andeq	sl, r0, r8, lsr #32
    9820:	andeq	r9, r0, ip, ror #19
    9824:	andeq	r9, r0, r0, lsr #19
    9828:	andeq	r9, r0, r4, lsr #20
    982c:	andeq	r9, r0, r0, lsl #19
    9830:	andeq	r9, r0, r4, ror #16
    9834:	andeq	r9, r0, r0, ror r9
    9838:	andeq	sl, r0, r8, lsr #32
    983c:	andeq	sl, r0, r8, lsr #32
    9840:	andeq	r9, r0, r4, lsr #18
    9844:	andeq	sl, r0, r8, lsr #32
    9848:	andeq	r9, r0, ip, lsl r9
    984c:	andeq	sl, r0, r8, lsr #32
    9850:	strdeq	r9, [r0], -ip
    9854:	andeq	sl, r0, r8, lsr #32
    9858:	ldrdeq	r9, [r0], -ip
    985c:	andeq	sl, r0, r8, lsr #32
    9860:			; <UNDEFINED> instruction: 0x000098bc
    9864:	add	r5, sp, #68	; 0x44
    9868:	mov	r0, r5
    986c:	bl	aee4 <__assert_fail@plt+0x2188>
    9870:	cmp	r0, #0
    9874:	bne	98a0 <__assert_fail@plt+0xb44>
    9878:	add	r6, sp, #92	; 0x5c
    987c:	mov	r0, r6
    9880:	bl	aee4 <__assert_fail@plt+0x2188>
    9884:	mov	r7, r0
    9888:	ldm	r5, {r0, r1}
    988c:	bl	ac40 <__assert_fail@plt+0x1ee4>
    9890:	cmp	r7, #0
    9894:	bne	98a0 <__assert_fail@plt+0xb44>
    9898:	ldm	r6, {r0, r1}
    989c:	bl	ac40 <__assert_fail@plt+0x1ee4>
    98a0:	mov	r0, #0
    98a4:	ldr	r2, [sp, #100]	; 0x64
    98a8:	ldr	r3, [r4]
    98ac:	cmp	r2, r3
    98b0:	bne	a1dc <__assert_fail@plt+0x1480>
    98b4:	add	sp, sp, #104	; 0x68
    98b8:	pop	{r4, r5, r6, r7, r8, pc}
    98bc:	movw	r3, #37112	; 0x90f8
    98c0:	movt	r3, #1
    98c4:	movw	r0, #47896	; 0xbb18
    98c8:	movt	r0, #0
    98cc:	ldr	r1, [r3, #4]
    98d0:	bl	b0b8 <__assert_fail@plt+0x235c>
    98d4:	mov	r0, #0
    98d8:	b	98a4 <__assert_fail@plt+0xb48>
    98dc:	movw	r3, #37112	; 0x90f8
    98e0:	movt	r3, #1
    98e4:	movw	r0, #48128	; 0xbc00
    98e8:	movt	r0, #0
    98ec:	ldr	r1, [r3, #4]
    98f0:	bl	b310 <__assert_fail@plt+0x25b4>
    98f4:	mov	r0, #0
    98f8:	b	98a4 <__assert_fail@plt+0xb48>
    98fc:	bl	b534 <__assert_fail@plt+0x27d8>
    9900:	add	r5, sp, #44	; 0x2c
    9904:	mov	r1, r0
    9908:	mov	r0, r5
    990c:	bl	bde8 <__assert_fail@plt+0x308c>
    9910:	ldm	r5, {r0, r1}
    9914:	bl	ac40 <__assert_fail@plt+0x1ee4>
    9918:	b	98a0 <__assert_fail@plt+0xb44>
    991c:	mov	r0, #3
    9920:	b	98a4 <__assert_fail@plt+0xb48>
    9924:	add	r5, sp, #68	; 0x44
    9928:	mov	r0, r5
    992c:	bl	aee4 <__assert_fail@plt+0x2188>
    9930:	cmp	r0, #0
    9934:	bne	98a0 <__assert_fail@plt+0xb44>
    9938:	ldr	r3, [sp, #68]	; 0x44
    993c:	cmp	r3, #1
    9940:	beq	a094 <__assert_fail@plt+0x1338>
    9944:	movw	r0, #37088	; 0x90e0
    9948:	movw	r3, #38188	; 0x952c
    994c:	movt	r0, #1
    9950:	movt	r3, #1
    9954:	movw	r2, #64104	; 0xfa68
    9958:	mov	r1, #1
    995c:	movt	r2, #0
    9960:	ldr	r3, [r3]
    9964:	ldr	r0, [r0]
    9968:	bl	8d14 <__fprintf_chk@plt>
    996c:	b	98a0 <__assert_fail@plt+0xb44>
    9970:	cmn	r1, #1
    9974:	bne	a070 <__assert_fail@plt+0x1314>
    9978:	mov	r0, #10
    997c:	b	98a4 <__assert_fail@plt+0xb48>
    9980:	movw	r3, #37112	; 0x90f8
    9984:	movt	r3, #1
    9988:	mov	r1, #1
    998c:	mov	r2, #0
    9990:	str	r1, [r3, #8]
    9994:	mov	r0, #4
    9998:	str	r2, [r3, #12]
    999c:	b	98a4 <__assert_fail@plt+0xb48>
    99a0:	add	r0, sp, #68	; 0x44
    99a4:	bl	aee4 <__assert_fail@plt+0x2188>
    99a8:	subs	r5, r0, #0
    99ac:	bne	98a0 <__assert_fail@plt+0xb44>
    99b0:	ldr	r3, [sp, #68]	; 0x44
    99b4:	cmp	r3, #1
    99b8:	beq	a19c <__assert_fail@plt+0x1440>
    99bc:	movw	r0, #37088	; 0x90e0
    99c0:	movw	r3, #38188	; 0x952c
    99c4:	movt	r0, #1
    99c8:	movt	r3, #1
    99cc:	movw	r2, #64052	; 0xfa34
    99d0:	mov	r1, #1
    99d4:	ldr	r0, [r0]
    99d8:	movt	r2, #0
    99dc:	ldr	r3, [r3]
    99e0:	bl	8d14 <__fprintf_chk@plt>
    99e4:	mov	r0, #0
    99e8:	b	98a4 <__assert_fail@plt+0xb48>
    99ec:	add	r5, sp, #68	; 0x44
    99f0:	mov	r0, r5
    99f4:	bl	aee4 <__assert_fail@plt+0x2188>
    99f8:	subs	r6, r0, #0
    99fc:	bne	98a0 <__assert_fail@plt+0xb44>
    9a00:	movw	r2, #37052	; 0x90bc
    9a04:	movt	r2, #1
    9a08:	str	r6, [sp]
    9a0c:	mov	r3, r6
    9a10:	ldm	r5, {r0, r1}
    9a14:	ldr	r2, [r2, #4]
    9a18:	bl	9570 <__assert_fail@plt+0x814>
    9a1c:	mov	r0, r6
    9a20:	b	98a4 <__assert_fail@plt+0xb48>
    9a24:	add	r5, sp, #68	; 0x44
    9a28:	mov	r0, r5
    9a2c:	bl	ad00 <__assert_fail@plt+0x1fa4>
    9a30:	subs	r6, r0, #0
    9a34:	bne	98a0 <__assert_fail@plt+0xb44>
    9a38:	movw	r2, #37052	; 0x90bc
    9a3c:	movt	r2, #1
    9a40:	mov	ip, #1
    9a44:	ldm	r5, {r0, r1}
    9a48:	ldr	r2, [r2, #4]
    9a4c:	mov	r3, ip
    9a50:	str	ip, [sp]
    9a54:	bl	9570 <__assert_fail@plt+0x814>
    9a58:	mov	r0, r6
    9a5c:	b	98a4 <__assert_fail@plt+0xb48>
    9a60:	cmn	r1, #1
    9a64:	beq	9978 <__assert_fail@plt+0xc1c>
    9a68:	add	r5, sp, #68	; 0x44
    9a6c:	mov	r0, r1
    9a70:	mov	r1, r5
    9a74:	bl	ad88 <__assert_fail@plt+0x202c>
    9a78:	cmp	r0, #0
    9a7c:	beq	9db4 <__assert_fail@plt+0x1058>
    9a80:	mov	r0, #1
    9a84:	b	98a4 <__assert_fail@plt+0xb48>
    9a88:	add	r0, sp, #68	; 0x44
    9a8c:	bl	aee4 <__assert_fail@plt+0x2188>
    9a90:	subs	r5, r0, #0
    9a94:	bne	98a0 <__assert_fail@plt+0xb44>
    9a98:	ldr	r3, [sp, #68]	; 0x44
    9a9c:	cmp	r3, #1
    9aa0:	beq	a134 <__assert_fail@plt+0x13d8>
    9aa4:	movw	r0, #37088	; 0x90e0
    9aa8:	movw	r3, #38188	; 0x952c
    9aac:	movt	r0, #1
    9ab0:	movt	r3, #1
    9ab4:	movw	r2, #64012	; 0xfa0c
    9ab8:	mov	r1, #1
    9abc:	ldr	r0, [r0]
    9ac0:	movt	r2, #0
    9ac4:	ldr	r3, [r3]
    9ac8:	bl	8d14 <__fprintf_chk@plt>
    9acc:	mov	r0, #0
    9ad0:	b	98a4 <__assert_fail@plt+0xb48>
    9ad4:	movw	r3, #37112	; 0x90f8
    9ad8:	add	r5, sp, #60	; 0x3c
    9adc:	movt	r3, #1
    9ae0:	mov	r0, r5
    9ae4:	ldr	r1, [r3, #4]
    9ae8:	bl	bde8 <__assert_fail@plt+0x308c>
    9aec:	ldm	r5, {r0, r1}
    9af0:	bl	ac40 <__assert_fail@plt+0x1ee4>
    9af4:	b	98a0 <__assert_fail@plt+0xb44>
    9af8:	mov	r0, #6
    9afc:	b	98a4 <__assert_fail@plt+0xb48>
    9b00:	add	r5, sp, #68	; 0x44
    9b04:	mov	r0, r5
    9b08:	bl	aee4 <__assert_fail@plt+0x2188>
    9b0c:	subs	r6, r0, #0
    9b10:	bne	98a0 <__assert_fail@plt+0xb44>
    9b14:	ldm	r5, {r0, r1}
    9b18:	mov	r2, r6
    9b1c:	bl	b568 <__assert_fail@plt+0x280c>
    9b20:	add	r5, sp, #84	; 0x54
    9b24:	mov	r1, r0
    9b28:	mov	r0, r5
    9b2c:	bl	bde8 <__assert_fail@plt+0x308c>
    9b30:	ldm	r5, {r0, r1}
    9b34:	bl	ac40 <__assert_fail@plt+0x1ee4>
    9b38:	mov	r0, r6
    9b3c:	b	98a4 <__assert_fail@plt+0xb48>
    9b40:	add	r0, sp, #68	; 0x44
    9b44:	bl	aee4 <__assert_fail@plt+0x2188>
    9b48:	subs	r1, r0, #0
    9b4c:	bne	98a0 <__assert_fail@plt+0xb44>
    9b50:	ldr	r3, [sp, #68]	; 0x44
    9b54:	cmp	r3, #1
    9b58:	beq	a104 <__assert_fail@plt+0x13a8>
    9b5c:	add	r5, sp, #76	; 0x4c
    9b60:	b	9908 <__assert_fail@plt+0xbac>
    9b64:	cmn	r1, #1
    9b68:	beq	9978 <__assert_fail@plt+0xc1c>
    9b6c:	add	r5, sp, #68	; 0x44
    9b70:	mov	r0, r5
    9b74:	bl	aee4 <__assert_fail@plt+0x2188>
    9b78:	cmp	r0, #0
    9b7c:	bne	9a80 <__assert_fail@plt+0xd24>
    9b80:	mov	r0, r6
    9b84:	ldm	r5, {r1, r2}
    9b88:	bl	acb0 <__assert_fail@plt+0x1f54>
    9b8c:	mov	r0, #1
    9b90:	b	98a4 <__assert_fail@plt+0xb48>
    9b94:	add	r0, sp, #68	; 0x44
    9b98:	bl	aee4 <__assert_fail@plt+0x2188>
    9b9c:	subs	r1, r0, #0
    9ba0:	bne	98a0 <__assert_fail@plt+0xb44>
    9ba4:	ldr	r2, [sp, #68]	; 0x44
    9ba8:	mov	r3, #1
    9bac:	movw	r5, #37112	; 0x90f8
    9bb0:	movt	r5, #1
    9bb4:	cmp	r2, r3
    9bb8:	str	r1, [r5, #8]
    9bbc:	str	r3, [r5, #12]
    9bc0:	beq	a114 <__assert_fail@plt+0x13b8>
    9bc4:	movw	r1, #37088	; 0x90e0
    9bc8:	movw	r3, #38188	; 0x952c
    9bcc:	movt	r1, #1
    9bd0:	movt	r3, #1
    9bd4:	mov	r6, #0
    9bd8:	movw	r2, #64148	; 0xfa94
    9bdc:	ldr	r0, [r1]
    9be0:	movt	r2, #0
    9be4:	ldr	r3, [r3]
    9be8:	mov	r1, #1
    9bec:	str	r6, [r5, #8]
    9bf0:	bl	8d14 <__fprintf_chk@plt>
    9bf4:	mov	r0, r6
    9bf8:	b	98a4 <__assert_fail@plt+0xb48>
    9bfc:	add	r0, sp, #68	; 0x44
    9c00:	bl	aee4 <__assert_fail@plt+0x2188>
    9c04:	subs	r5, r0, #0
    9c08:	bne	98a0 <__assert_fail@plt+0xb44>
    9c0c:	ldr	r3, [sp, #68]	; 0x44
    9c10:	cmp	r3, #1
    9c14:	beq	a1c8 <__assert_fail@plt+0x146c>
    9c18:	cmp	r3, #2
    9c1c:	beq	a0d0 <__assert_fail@plt+0x1374>
    9c20:	movw	r0, #63932	; 0xf9bc
    9c24:	mvn	r1, #0
    9c28:	movt	r0, #0
    9c2c:	bl	9478 <__assert_fail@plt+0x71c>
    9c30:	mov	r0, r5
    9c34:	b	98a4 <__assert_fail@plt+0xb48>
    9c38:	movw	r3, #37112	; 0x90f8
    9c3c:	movt	r3, #1
    9c40:	movw	r0, #47792	; 0xbab0
    9c44:	movt	r0, #0
    9c48:	ldr	r1, [r3, #4]
    9c4c:	bl	af80 <__assert_fail@plt+0x2224>
    9c50:	mov	r0, #0
    9c54:	b	98a4 <__assert_fail@plt+0xb48>
    9c58:	mov	r0, #5
    9c5c:	b	98a4 <__assert_fail@plt+0xb48>
    9c60:	add	r5, sp, #68	; 0x44
    9c64:	mov	r0, r5
    9c68:	bl	ad00 <__assert_fail@plt+0x1fa4>
    9c6c:	subs	r6, r0, #0
    9c70:	bne	98a0 <__assert_fail@plt+0xb44>
    9c74:	add	r7, sp, #36	; 0x24
    9c78:	ldm	r5, {r1, r2}
    9c7c:	mov	r0, r7
    9c80:	bl	95d8 <__assert_fail@plt+0x87c>
    9c84:	ldm	r7, {r0, r1}
    9c88:	bl	ac40 <__assert_fail@plt+0x1ee4>
    9c8c:	mov	r0, r6
    9c90:	b	98a4 <__assert_fail@plt+0xb48>
    9c94:	bl	abbc <__assert_fail@plt+0x1e60>
    9c98:	mov	r0, #0
    9c9c:	b	98a4 <__assert_fail@plt+0xb48>
    9ca0:	add	r0, sp, #68	; 0x44
    9ca4:	bl	aee4 <__assert_fail@plt+0x2188>
    9ca8:	subs	r1, r0, #0
    9cac:	bne	98a0 <__assert_fail@plt+0xb44>
    9cb0:	ldr	r3, [sp, #68]	; 0x44
    9cb4:	cmp	r3, #1
    9cb8:	beq	a18c <__assert_fail@plt+0x1430>
    9cbc:	cmp	r3, #2
    9cc0:	beq	a0e8 <__assert_fail@plt+0x138c>
    9cc4:	movw	r0, #63932	; 0xf9bc
    9cc8:	mvn	r1, #0
    9ccc:	movt	r0, #0
    9cd0:	bl	9478 <__assert_fail@plt+0x71c>
    9cd4:	add	r5, sp, #28
    9cd8:	add	r1, sp, #92	; 0x5c
    9cdc:	mov	r2, #1
    9ce0:	mov	r0, r5
    9ce4:	bl	c574 <__assert_fail@plt+0x3818>
    9ce8:	ldm	r5, {r0, r1}
    9cec:	bl	ac40 <__assert_fail@plt+0x1ee4>
    9cf0:	mov	r0, #0
    9cf4:	b	98a4 <__assert_fail@plt+0xb48>
    9cf8:	movw	r3, #37112	; 0x90f8
    9cfc:	movt	r3, #1
    9d00:	movw	r0, #48276	; 0xbc94
    9d04:	movt	r0, #0
    9d08:	ldr	r1, [r3, #4]
    9d0c:	bl	af80 <__assert_fail@plt+0x2224>
    9d10:	mov	r0, #0
    9d14:	b	98a4 <__assert_fail@plt+0xb48>
    9d18:	add	r0, sp, #68	; 0x44
    9d1c:	bl	aee4 <__assert_fail@plt+0x2188>
    9d20:	subs	r5, r0, #0
    9d24:	bne	98a0 <__assert_fail@plt+0xb44>
    9d28:	ldr	r3, [sp, #68]	; 0x44
    9d2c:	cmp	r3, #1
    9d30:	beq	a15c <__assert_fail@plt+0x1400>
    9d34:	movw	r1, #37088	; 0x90e0
    9d38:	movw	r3, #38188	; 0x952c
    9d3c:	movt	r1, #1
    9d40:	movt	r3, #1
    9d44:	mov	ip, #16
    9d48:	movw	r2, #63948	; 0xf9cc
    9d4c:	ldr	r0, [r1]
    9d50:	movt	r2, #0
    9d54:	ldr	r3, [r3]
    9d58:	mov	r1, #1
    9d5c:	str	ip, [sp]
    9d60:	bl	8d14 <__fprintf_chk@plt>
    9d64:	mov	r0, #0
    9d68:	b	98a4 <__assert_fail@plt+0xb48>
    9d6c:	movw	r3, #37052	; 0x90bc
    9d70:	movt	r3, #1
    9d74:	ldr	r0, [r3, #4]
    9d78:	bl	b5f0 <__assert_fail@plt+0x2894>
    9d7c:	mov	r0, #0
    9d80:	b	98a4 <__assert_fail@plt+0xb48>
    9d84:	movw	r3, #37052	; 0x90bc
    9d88:	add	r5, sp, #68	; 0x44
    9d8c:	movt	r3, #1
    9d90:	b	9ae0 <__assert_fail@plt+0xd84>
    9d94:	cmn	r1, #1
    9d98:	beq	9978 <__assert_fail@plt+0xc1c>
    9d9c:	add	r5, sp, #68	; 0x44
    9da0:	mov	r0, r1
    9da4:	mov	r1, r5
    9da8:	bl	b488 <__assert_fail@plt+0x272c>
    9dac:	cmp	r0, #0
    9db0:	bne	9a80 <__assert_fail@plt+0xd24>
    9db4:	ldm	r5, {r0, r1}
    9db8:	bl	ac40 <__assert_fail@plt+0x1ee4>
    9dbc:	mov	r0, #1
    9dc0:	b	98a4 <__assert_fail@plt+0xb48>
    9dc4:	cmn	r1, #1
    9dc8:	beq	9978 <__assert_fail@plt+0xc1c>
    9dcc:	str	r2, [sp, #12]
    9dd0:	bl	b20c <__assert_fail@plt+0x24b0>
    9dd4:	ldr	r2, [sp, #12]
    9dd8:	rsbs	r2, r2, #1
    9ddc:	movcc	r2, #0
    9de0:	cmp	r0, #0
    9de4:	moveq	r0, r2
    9de8:	eorne	r0, r2, #1
    9dec:	cmp	r0, #0
    9df0:	beq	9a80 <__assert_fail@plt+0xd24>
    9df4:	mov	r0, #2
    9df8:	b	98a4 <__assert_fail@plt+0xb48>
    9dfc:	cmn	r1, #1
    9e00:	beq	9978 <__assert_fail@plt+0xc1c>
    9e04:	str	r2, [sp, #12]
    9e08:	bl	b20c <__assert_fail@plt+0x24b0>
    9e0c:	ldr	r2, [sp, #12]
    9e10:	rsbs	r2, r2, #1
    9e14:	movcc	r2, #0
    9e18:	cmp	r0, #0
    9e1c:	movlt	r0, r2
    9e20:	eorge	r0, r2, #1
    9e24:	cmp	r0, #0
    9e28:	bne	9df4 <__assert_fail@plt+0x1098>
    9e2c:	b	9a80 <__assert_fail@plt+0xd24>
    9e30:	cmn	r1, #1
    9e34:	beq	9978 <__assert_fail@plt+0xc1c>
    9e38:	add	r0, sp, #68	; 0x44
    9e3c:	bl	aee4 <__assert_fail@plt+0x2188>
    9e40:	subs	r1, r0, #0
    9e44:	bne	9a80 <__assert_fail@plt+0xd24>
    9e48:	ldr	r7, [sp, #68]	; 0x44
    9e4c:	cmp	r7, #1
    9e50:	beq	a21c <__assert_fail@plt+0x14c0>
    9e54:	movw	r0, #37088	; 0x90e0
    9e58:	movw	r3, #38188	; 0x952c
    9e5c:	movt	r0, #1
    9e60:	movt	r3, #1
    9e64:	movw	r2, #64188	; 0xfabc
    9e68:	mov	r1, #1
    9e6c:	ldr	r0, [r0]
    9e70:	movt	r2, #0
    9e74:	ldr	r3, [r3]
    9e78:	bl	8d14 <__fprintf_chk@plt>
    9e7c:	mov	r0, #1
    9e80:	b	98a4 <__assert_fail@plt+0xb48>
    9e84:	cmn	r1, #1
    9e88:	beq	9978 <__assert_fail@plt+0xc1c>
    9e8c:	add	r5, sp, #68	; 0x44
    9e90:	mov	r0, r5
    9e94:	bl	aee4 <__assert_fail@plt+0x2188>
    9e98:	subs	r1, r0, #0
    9e9c:	bne	9a80 <__assert_fail@plt+0xd24>
    9ea0:	ldr	r7, [sp, #68]	; 0x44
    9ea4:	cmp	r7, #1
    9ea8:	beq	a1e0 <__assert_fail@plt+0x1484>
    9eac:	mov	r0, r5
    9eb0:	bl	aee4 <__assert_fail@plt+0x2188>
    9eb4:	cmp	r0, #0
    9eb8:	beq	9e54 <__assert_fail@plt+0x10f8>
    9ebc:	b	9a80 <__assert_fail@plt+0xd24>
    9ec0:	movw	r3, #37112	; 0x90f8
    9ec4:	movt	r3, #1
    9ec8:	movw	r0, #47736	; 0xba78
    9ecc:	movt	r0, #0
    9ed0:	ldr	r1, [r3, #4]
    9ed4:	bl	af80 <__assert_fail@plt+0x2224>
    9ed8:	mov	r0, #0
    9edc:	b	98a4 <__assert_fail@plt+0xb48>
    9ee0:	movw	r6, #37052	; 0x90bc
    9ee4:	movt	r6, #1
    9ee8:	movw	r5, #37096	; 0x90e8
    9eec:	movt	r5, #1
    9ef0:	ldr	r0, [r6]
    9ef4:	cmn	r0, #1
    9ef8:	beq	9f0c <__assert_fail@plt+0x11b0>
    9efc:	ldr	r1, [r5]
    9f00:	bl	8cb4 <ungetc@plt>
    9f04:	mvn	r3, #0
    9f08:	str	r3, [r6]
    9f0c:	add	r6, sp, #16
    9f10:	mov	r2, #10
    9f14:	mov	r3, r2
    9f18:	ldr	r1, [r5]
    9f1c:	mov	r0, r6
    9f20:	add	r7, sp, #68	; 0x44
    9f24:	bl	c5d4 <__assert_fail@plt+0x3878>
    9f28:	ldm	r6, {r0, r1}
    9f2c:	stm	r7, {r0, r1}
    9f30:	ldr	r0, [r5]
    9f34:	bl	8bac <ferror@plt>
    9f38:	cmp	r0, #0
    9f3c:	bne	9978 <__assert_fail@plt+0xc1c>
    9f40:	ldm	r7, {r0, r1}
    9f44:	bl	ac40 <__assert_fail@plt+0x1ee4>
    9f48:	mov	r0, #3
    9f4c:	b	98a4 <__assert_fail@plt+0xb48>
    9f50:	cmn	r1, #1
    9f54:	beq	9978 <__assert_fail@plt+0xc1c>
    9f58:	str	r2, [sp, #12]
    9f5c:	bl	b20c <__assert_fail@plt+0x24b0>
    9f60:	ldr	r2, [sp, #12]
    9f64:	rsbs	r2, r2, #1
    9f68:	movcc	r2, #0
    9f6c:	cmp	r0, #0
    9f70:	movgt	r0, r2
    9f74:	eorle	r0, r2, #1
    9f78:	cmp	r0, #0
    9f7c:	bne	9df4 <__assert_fail@plt+0x1098>
    9f80:	b	9a80 <__assert_fail@plt+0xd24>
    9f84:	add	r5, sp, #52	; 0x34
    9f88:	movw	r3, #37052	; 0x90bc
    9f8c:	movt	r3, #1
    9f90:	mov	r0, r5
    9f94:	ldr	r1, [r3, #8]
    9f98:	bl	bde8 <__assert_fail@plt+0x308c>
    9f9c:	ldm	r5, {r0, r1}
    9fa0:	bl	ac40 <__assert_fail@plt+0x1ee4>
    9fa4:	mov	r0, #0
    9fa8:	b	98a4 <__assert_fail@plt+0xb48>
    9fac:	movw	r3, #37112	; 0x90f8
    9fb0:	movt	r3, #1
    9fb4:	movw	r0, #47684	; 0xba44
    9fb8:	movt	r0, #0
    9fbc:	ldr	r1, [r3, #4]
    9fc0:	bl	af80 <__assert_fail@plt+0x2224>
    9fc4:	mov	r0, #0
    9fc8:	b	98a4 <__assert_fail@plt+0xb48>
    9fcc:	movw	r3, #37112	; 0x90f8
    9fd0:	movt	r3, #1
    9fd4:	movw	r0, #47632	; 0xba10
    9fd8:	movt	r0, #0
    9fdc:	ldr	r1, [r3, #4]
    9fe0:	bl	af80 <__assert_fail@plt+0x2224>
    9fe4:	mov	r0, #0
    9fe8:	b	98a4 <__assert_fail@plt+0xb48>
    9fec:	mov	r0, #8
    9ff0:	b	98a4 <__assert_fail@plt+0xb48>
    9ff4:	sub	r0, r1, #60	; 0x3c
    9ff8:	cmp	r0, #2
    9ffc:	movhi	r0, #7
    a000:	movls	r0, #9
    a004:	b	98a4 <__assert_fail@plt+0xb48>
    a008:	movw	r3, #37112	; 0x90f8
    a00c:	movt	r3, #1
    a010:	movw	r0, #48024	; 0xbb98
    a014:	movt	r0, #0
    a018:	ldr	r1, [r3, #4]
    a01c:	bl	af80 <__assert_fail@plt+0x2224>
    a020:	mov	r0, #0
    a024:	b	98a4 <__assert_fail@plt+0xb48>
    a028:	movw	r0, #37088	; 0x90e0
    a02c:	movw	r3, #38188	; 0x952c
    a030:	movt	r0, #1
    a034:	movt	r3, #1
    a038:	mov	r1, #1
    a03c:	movw	r2, #63128	; 0xf698
    a040:	ldr	r3, [r3]
    a044:	movt	r2, #0
    a048:	ldr	r0, [r0]
    a04c:	bl	8d14 <__fprintf_chk@plt>
    a050:	movw	r3, #37100	; 0x90ec
    a054:	movt	r3, #1
    a058:	mov	r1, r5
    a05c:	movw	r2, #64236	; 0xfaec
    a060:	movt	r2, #0
    a064:	ldr	r0, [r3]
    a068:	bl	9400 <__assert_fail@plt+0x6a4>
    a06c:	b	98a0 <__assert_fail@plt+0xb44>
    a070:	add	r5, sp, #68	; 0x44
    a074:	mov	r0, r5
    a078:	bl	aee4 <__assert_fail@plt+0x2188>
    a07c:	cmp	r0, #0
    a080:	bne	9a80 <__assert_fail@plt+0xd24>
    a084:	mov	r0, r6
    a088:	ldm	r5, {r1, r2}
    a08c:	bl	ae28 <__assert_fail@plt+0x20cc>
    a090:	b	9a80 <__assert_fail@plt+0xd24>
    a094:	movw	r3, #37112	; 0x90f8
    a098:	movt	r3, #1
    a09c:	ldr	r0, [sp, #72]	; 0x48
    a0a0:	add	r2, sp, #92	; 0x5c
    a0a4:	ldr	r1, [r3, #4]
    a0a8:	bl	bccc <__assert_fail@plt+0x2f70>
    a0ac:	cmp	r0, #0
    a0b0:	bne	98a0 <__assert_fail@plt+0xb44>
    a0b4:	add	r0, sp, #72	; 0x48
    a0b8:	bl	c390 <__assert_fail@plt+0x3634>
    a0bc:	ldr	r3, [sp, #92]	; 0x5c
    a0c0:	str	r3, [sp, #72]	; 0x48
    a0c4:	ldm	r5, {r0, r1}
    a0c8:	bl	ac40 <__assert_fail@plt+0x1ee4>
    a0cc:	b	98a0 <__assert_fail@plt+0xb44>
    a0d0:	ldr	r0, [sp, #72]	; 0x48
    a0d4:	mov	r1, r5
    a0d8:	mov	r2, r5
    a0dc:	bl	c518 <__assert_fail@plt+0x37bc>
    a0e0:	mov	r0, r5
    a0e4:	b	98a4 <__assert_fail@plt+0xb48>
    a0e8:	ldr	r0, [sp, #72]	; 0x48
    a0ec:	bl	c6d8 <__assert_fail@plt+0x397c>
    a0f0:	ldrb	r3, [r0]
    a0f4:	add	r0, sp, #72	; 0x48
    a0f8:	strb	r3, [sp, #92]	; 0x5c
    a0fc:	bl	c4e8 <__assert_fail@plt+0x378c>
    a100:	b	9cd4 <__assert_fail@plt+0xf78>
    a104:	ldr	r0, [sp, #72]	; 0x48
    a108:	bl	c1c0 <__assert_fail@plt+0x3464>
    a10c:	mov	r1, r0
    a110:	b	9b5c <__assert_fail@plt+0xe00>
    a114:	ldr	r0, [sp, #72]	; 0x48
    a118:	bl	bd70 <__assert_fail@plt+0x3014>
    a11c:	cmp	r0, #0
    a120:	sub	r0, r0, #1
    a124:	str	r0, [r5, #8]
    a128:	movgt	r0, #4
    a12c:	bgt	98a4 <__assert_fail@plt+0xb48>
    a130:	b	9bc4 <__assert_fail@plt+0xe68>
    a134:	ldr	r0, [sp, #72]	; 0x48
    a138:	mov	r1, r5
    a13c:	bl	bd70 <__assert_fail@plt+0x3014>
    a140:	subs	r2, r0, #0
    a144:	blt	9aa4 <__assert_fail@plt+0xd48>
    a148:	movw	r3, #37112	; 0x90f8
    a14c:	movt	r3, #1
    a150:	mov	r0, r5
    a154:	str	r2, [r3, #4]
    a158:	b	98a4 <__assert_fail@plt+0xb48>
    a15c:	ldr	r0, [sp, #72]	; 0x48
    a160:	mov	r1, r5
    a164:	bl	bd70 <__assert_fail@plt+0x3014>
    a168:	sub	r3, r0, #2
    a16c:	mov	r2, r0
    a170:	cmp	r3, #14
    a174:	bhi	9d34 <__assert_fail@plt+0xfd8>
    a178:	movw	r3, #37052	; 0x90bc
    a17c:	movt	r3, #1
    a180:	mov	r0, r5
    a184:	str	r2, [r3, #8]
    a188:	b	98a4 <__assert_fail@plt+0xb48>
    a18c:	ldr	r0, [sp, #72]	; 0x48
    a190:	bl	bd70 <__assert_fail@plt+0x3014>
    a194:	strb	r0, [sp, #92]	; 0x5c
    a198:	b	9cd4 <__assert_fail@plt+0xf78>
    a19c:	ldr	r0, [sp, #72]	; 0x48
    a1a0:	mov	r1, r5
    a1a4:	bl	bd70 <__assert_fail@plt+0x3014>
    a1a8:	cmp	r0, #1
    a1ac:	mov	r2, r0
    a1b0:	ble	99bc <__assert_fail@plt+0xc60>
    a1b4:	movw	r3, #37052	; 0x90bc
    a1b8:	movt	r3, #1
    a1bc:	mov	r0, r5
    a1c0:	str	r2, [r3, #4]
    a1c4:	b	98a4 <__assert_fail@plt+0xb48>
    a1c8:	ldr	r0, [sp, #72]	; 0x48
    a1cc:	mov	r1, r5
    a1d0:	bl	c25c <__assert_fail@plt+0x3500>
    a1d4:	mov	r0, r5
    a1d8:	b	98a4 <__assert_fail@plt+0xb48>
    a1dc:	bl	8bdc <__stack_chk_fail@plt>
    a1e0:	ldr	r0, [sp, #72]	; 0x48
    a1e4:	bl	bd70 <__assert_fail@plt+0x3014>
    a1e8:	mov	r8, r0
    a1ec:	mov	r0, r5
    a1f0:	bl	aee4 <__assert_fail@plt+0x2188>
    a1f4:	cmp	r0, #0
    a1f8:	bne	9a80 <__assert_fail@plt+0xd24>
    a1fc:	cmp	r8, #0
    a200:	blt	9e54 <__assert_fail@plt+0x10f8>
    a204:	mov	r0, r6
    a208:	mov	r1, r8
    a20c:	ldm	r5, {r2, r3}
    a210:	bl	b6b8 <__assert_fail@plt+0x295c>
    a214:	mov	r0, r7
    a218:	b	98a4 <__assert_fail@plt+0xb48>
    a21c:	ldr	r0, [sp, #72]	; 0x48
    a220:	bl	bd70 <__assert_fail@plt+0x3014>
    a224:	subs	r2, r0, #0
    a228:	blt	9e54 <__assert_fail@plt+0x10f8>
    a22c:	add	r5, sp, #92	; 0x5c
    a230:	mov	r1, r6
    a234:	mov	r0, r5
    a238:	bl	b7b0 <__assert_fail@plt+0x2a54>
    a23c:	ldm	r5, {r0, r1}
    a240:	bl	ac40 <__assert_fail@plt+0x1ee4>
    a244:	mov	r0, r7
    a248:	b	98a4 <__assert_fail@plt+0xb48>
    a24c:	push	{r3, lr}
    a250:	movw	r1, #41548	; 0xa24c
    a254:	movt	r1, #0
    a258:	bl	8bc4 <signal@plt>
    a25c:	movw	r3, #37112	; 0x90f8
    a260:	movt	r3, #1
    a264:	mov	r2, #1
    a268:	str	r2, [r3, #16]
    a26c:	pop	{r3, pc}
    a270:	movw	r3, #37112	; 0x90f8
    a274:	movt	r3, #1
    a278:	ldr	r0, [r3, #20]
    a27c:	cmn	r0, #1
    a280:	beq	a290 <__assert_fail@plt+0x1534>
    a284:	mvn	r2, #0
    a288:	str	r2, [r3, #20]
    a28c:	bx	lr
    a290:	ldr	r0, [r3, #24]
    a294:	b	8bd0 <_IO_getc@plt>
    a298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a29c:	movw	r6, #37072	; 0x90d0
    a2a0:	movt	r6, #1
    a2a4:	ldr	r2, [r0]
    a2a8:	sub	sp, sp, #52	; 0x34
    a2ac:	mov	r8, r0
    a2b0:	ldr	r3, [r6]
    a2b4:	cmp	r2, #2
    a2b8:	str	r3, [sp, #44]	; 0x2c
    a2bc:	beq	a308 <__assert_fail@plt+0x15ac>
    a2c0:	movw	r0, #37088	; 0x90e0
    a2c4:	movw	r3, #38188	; 0x952c
    a2c8:	movt	r0, #1
    a2cc:	movt	r3, #1
    a2d0:	movw	r2, #64252	; 0xfafc
    a2d4:	mov	r1, #1
    a2d8:	ldr	r0, [r0]
    a2dc:	movt	r2, #0
    a2e0:	ldr	r3, [r3]
    a2e4:	mov	fp, #0
    a2e8:	bl	8d14 <__fprintf_chk@plt>
    a2ec:	ldr	r2, [sp, #44]	; 0x2c
    a2f0:	mov	r0, fp
    a2f4:	ldr	r3, [r6]
    a2f8:	cmp	r2, r3
    a2fc:	bne	a71c <__assert_fail@plt+0x19c0>
    a300:	add	sp, sp, #52	; 0x34
    a304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a308:	movw	r7, #37112	; 0x90f8
    a30c:	movt	r7, #1
    a310:	ldr	r0, [r0, #4]
    a314:	mov	r3, #0
    a318:	str	r3, [r7, #16]
    a31c:	bl	c6d8 <__assert_fail@plt+0x397c>
    a320:	mov	r4, r0
    a324:	ldr	r0, [r8, #4]
    a328:	bl	c6e0 <__assert_fail@plt+0x3984>
    a32c:	add	r5, r4, r0
    a330:	cmp	r4, r5
    a334:	bcs	a3f0 <__assert_fail@plt+0x1694>
    a338:	ldr	r2, [r7, #16]
    a33c:	cmp	r2, #0
    a340:	bne	a3f0 <__assert_fail@plt+0x1694>
    a344:	movw	sl, #37052	; 0x90bc
    a348:	movt	sl, #1
    a34c:	mvn	r9, #0
    a350:	mov	r1, #1
    a354:	str	r1, [sp, #12]
    a358:	add	fp, r4, #1
    a35c:	ldrb	r0, [r4]
    a360:	cmp	fp, r5
    a364:	str	r9, [sp, #16]
    a368:	ldrbcc	r1, [r4, #1]
    a36c:	mvncs	r1, #0
    a370:	strcc	r1, [sp, #16]
    a374:	bl	965c <__assert_fail@plt+0x900>
    a378:	sub	r0, r0, #1
    a37c:	cmp	r0, #9
    a380:	ldrls	pc, [pc, r0, lsl #2]
    a384:	b	a63c <__assert_fail@plt+0x18e0>
    a388:	andeq	sl, r0, r4, lsl #11
    a38c:	andeq	sl, r0, r4, lsr r5
    a390:	andeq	sl, r0, r4, lsl #8
    a394:	andeq	sl, r0, ip, asr r5
    a398:	muleq	r0, ip, r4
    a39c:	muleq	r0, ip, r5
    a3a0:			; <UNDEFINED> instruction: 0x0000a3b0
    a3a4:			; <UNDEFINED> instruction: 0x0000a3bc
    a3a8:	strdeq	sl, [r0], -r8
    a3ac:	andeq	sl, r0, r0, ror #9
    a3b0:	mov	r0, fp
    a3b4:	bl	94fc <__assert_fail@plt+0x7a0>
    a3b8:	mov	fp, r0
    a3bc:	mov	r0, fp
    a3c0:	mov	r1, #10
    a3c4:	rsb	r2, fp, r5
    a3c8:	bl	8d20 <memchr@plt>
    a3cc:	cmp	r0, #0
    a3d0:	beq	a3f0 <__assert_fail@plt+0x1694>
    a3d4:	add	r4, r0, #1
    a3d8:	mov	r2, #0
    a3dc:	cmp	r4, r5
    a3e0:	bcs	a3f0 <__assert_fail@plt+0x1694>
    a3e4:	ldr	r3, [r7, #16]
    a3e8:	cmp	r3, #0
    a3ec:	beq	a358 <__assert_fail@plt+0x15fc>
    a3f0:	mov	fp, #0
    a3f4:	b	a2ec <__assert_fail@plt+0x1590>
    a3f8:	mov	r4, fp
    a3fc:	mov	r2, #1
    a400:	b	a3dc <__assert_fail@plt+0x1680>
    a404:	add	r3, sp, #20
    a408:	str	r3, [sp, #8]
    a40c:	cmp	fp, r5
    a410:	bcs	a45c <__assert_fail@plt+0x1700>
    a414:	mov	r0, fp
    a418:	mov	r4, r0
    a41c:	ldrb	r3, [r0], #1
    a420:	cmp	r3, #32
    a424:	cmpne	r3, #9
    a428:	beq	a61c <__assert_fail@plt+0x18c0>
    a42c:	cmp	r3, #10
    a430:	beq	a634 <__assert_fail@plt+0x18d8>
    a434:	cmp	r3, #35	; 0x23
    a438:	bne	a460 <__assert_fail@plt+0x1704>
    a43c:	mov	r1, #10
    a440:	rsb	r2, r0, r5
    a444:	bl	8d20 <memchr@plt>
    a448:	cmp	r0, #0
    a44c:	addne	fp, r0, #1
    a450:	moveq	fp, r5
    a454:	cmp	fp, r5
    a458:	bcc	a414 <__assert_fail@plt+0x16b8>
    a45c:	mov	r4, fp
    a460:	ldr	r0, [sp, #8]
    a464:	bl	aee4 <__assert_fail@plt+0x2188>
    a468:	subs	fp, r0, #0
    a46c:	bne	a554 <__assert_fail@plt+0x17f8>
    a470:	ldr	r3, [sp, #20]
    a474:	cmp	r3, #1
    a478:	beq	a70c <__assert_fail@plt+0x19b0>
    a47c:	cmp	r3, #2
    a480:	beq	a664 <__assert_fail@plt+0x1908>
    a484:	movw	r0, #63932	; 0xf9bc
    a488:	mvn	r1, #0
    a48c:	movt	r0, #0
    a490:	bl	9478 <__assert_fail@plt+0x71c>
    a494:	mov	r2, fp
    a498:	b	a3dc <__assert_fail@plt+0x1680>
    a49c:	add	fp, sp, #28
    a4a0:	add	r3, sp, #16
    a4a4:	ldr	r2, [sl, #8]
    a4a8:	movw	r1, #38456	; 0x9638
    a4ac:	mov	r0, fp
    a4b0:	movt	r1, #0
    a4b4:	str	r4, [r7]
    a4b8:	bl	be50 <__assert_fail@plt+0x30f4>
    a4bc:	ldm	fp, {r0, r1}
    a4c0:	bl	ac40 <__assert_fail@plt+0x1ee4>
    a4c4:	ldr	r3, [sp, #16]
    a4c8:	ldr	r4, [r7]
    a4cc:	cmn	r3, #1
    a4d0:	beq	a554 <__assert_fail@plt+0x17f8>
    a4d4:	sub	r4, r4, #1
    a4d8:	mov	r2, #0
    a4dc:	b	a3dc <__assert_fail@plt+0x1680>
    a4e0:	movw	r3, #37096	; 0x90e8
    a4e4:	movt	r3, #1
    a4e8:	ldr	r0, [r3]
    a4ec:	bl	8bac <ferror@plt>
    a4f0:	movw	r3, #38188	; 0x952c
    a4f4:	movt	r3, #1
    a4f8:	subs	fp, r0, #0
    a4fc:	movw	r0, #37088	; 0x90e0
    a500:	movt	r0, #1
    a504:	beq	a648 <__assert_fail@plt+0x18ec>
    a508:	mov	r1, #1
    a50c:	ldr	r3, [r3]
    a510:	movw	r2, #63128	; 0xf698
    a514:	ldr	r0, [r0]
    a518:	movt	r2, #0
    a51c:	mov	fp, #2
    a520:	bl	8d14 <__fprintf_chk@plt>
    a524:	movw	r0, #64296	; 0xfb28
    a528:	movt	r0, #0
    a52c:	bl	8bf4 <perror@plt>
    a530:	b	a2ec <__assert_fail@plt+0x1590>
    a534:	add	r3, sp, #20
    a538:	ldr	r0, [sp, #16]
    a53c:	str	r3, [sp, #8]
    a540:	add	r4, r4, #2
    a544:	mov	r1, r3
    a548:	bl	ad88 <__assert_fail@plt+0x202c>
    a54c:	cmp	r0, #0
    a550:	beq	a6ac <__assert_fail@plt+0x1950>
    a554:	mov	r2, #0
    a558:	b	a3dc <__assert_fail@plt+0x1680>
    a55c:	ldr	r2, [r7, #8]
    a560:	movw	r3, #37112	; 0x90f8
    a564:	ldr	r1, [sp, #12]
    a568:	movt	r3, #1
    a56c:	cmp	r2, r1
    a570:	blt	a3f0 <__assert_fail@plt+0x1694>
    a574:	rsb	r2, r1, r2
    a578:	mov	fp, #4
    a57c:	str	r2, [r3, #8]
    a580:	b	a2ec <__assert_fail@plt+0x1590>
    a584:	ldr	r2, [sp, #16]
    a588:	cmn	r2, #1
    a58c:	beq	a63c <__assert_fail@plt+0x18e0>
    a590:	add	r4, r4, #2
    a594:	mov	r2, #0
    a598:	b	a3dc <__assert_fail@plt+0x1680>
    a59c:	cmp	fp, r5
    a5a0:	movcs	r4, fp
    a5a4:	mvncs	r2, #0
    a5a8:	bcs	a5f4 <__assert_fail@plt+0x1898>
    a5ac:	mov	r2, fp
    a5b0:	mov	r0, #1
    a5b4:	ldrb	r1, [r2], #1
    a5b8:	cmp	r1, #93	; 0x5d
    a5bc:	subeq	r0, r0, #1
    a5c0:	beq	a5cc <__assert_fail@plt+0x1870>
    a5c4:	cmp	r1, #91	; 0x5b
    a5c8:	addeq	r0, r0, #1
    a5cc:	cmp	r0, #0
    a5d0:	mov	r4, r2
    a5d4:	movle	r1, #0
    a5d8:	movgt	r1, #1
    a5dc:	cmp	r2, r5
    a5e0:	movcs	r1, #0
    a5e4:	cmp	r1, #0
    a5e8:	bne	a5b4 <__assert_fail@plt+0x1858>
    a5ec:	rsb	r2, fp, r2
    a5f0:	sub	r2, r2, #1
    a5f4:	add	r3, sp, #36	; 0x24
    a5f8:	mov	r1, fp
    a5fc:	str	r3, [sp, #4]
    a600:	mov	r0, r3
    a604:	bl	c574 <__assert_fail@plt+0x3818>
    a608:	ldr	r3, [sp, #4]
    a60c:	ldm	r3, {r0, r1}
    a610:	bl	ac40 <__assert_fail@plt+0x1ee4>
    a614:	mov	r2, #0
    a618:	b	a3dc <__assert_fail@plt+0x1680>
    a61c:	cmp	r3, #35	; 0x23
    a620:	mov	r4, r0
    a624:	beq	a43c <__assert_fail@plt+0x16e0>
    a628:	cmp	r0, r5
    a62c:	bcc	a418 <__assert_fail@plt+0x16bc>
    a630:	b	a460 <__assert_fail@plt+0x1704>
    a634:	mov	r4, r0
    a638:	b	a628 <__assert_fail@plt+0x18cc>
    a63c:	mov	r4, fp
    a640:	mov	r2, #0
    a644:	b	a3dc <__assert_fail@plt+0x1680>
    a648:	movw	r2, #64316	; 0xfb3c
    a64c:	mov	r1, #1
    a650:	movt	r2, #0
    a654:	ldr	r3, [r3]
    a658:	ldr	r0, [r0]
    a65c:	bl	8d14 <__fprintf_chk@plt>
    a660:	b	a2ec <__assert_fail@plt+0x1590>
    a664:	cmp	r4, r5
    a668:	beq	a6cc <__assert_fail@plt+0x1970>
    a66c:	ldr	r0, [sp, #8]
    a670:	bl	a298 <__assert_fail@plt+0x153c>
    a674:	ldr	r3, [sp, #20]
    a678:	cmp	r3, #2
    a67c:	mov	fp, r0
    a680:	beq	a6c0 <__assert_fail@plt+0x1964>
    a684:	cmp	fp, #4
    a688:	bne	a554 <__assert_fail@plt+0x17f8>
    a68c:	ldr	r2, [r7, #8]
    a690:	movw	r3, #37112	; 0x90f8
    a694:	movt	r3, #1
    a698:	cmp	r2, #0
    a69c:	ble	a3f0 <__assert_fail@plt+0x1694>
    a6a0:	sub	r2, r2, #1
    a6a4:	str	r2, [r3, #8]
    a6a8:	b	a2ec <__assert_fail@plt+0x1590>
    a6ac:	ldr	r3, [sp, #8]
    a6b0:	mov	fp, r4
    a6b4:	ldm	r3, {r0, r1}
    a6b8:	bl	ac40 <__assert_fail@plt+0x1ee4>
    a6bc:	b	a40c <__assert_fail@plt+0x16b0>
    a6c0:	add	r0, sp, #24
    a6c4:	bl	c4e8 <__assert_fail@plt+0x378c>
    a6c8:	b	a684 <__assert_fail@plt+0x1928>
    a6cc:	ldr	r1, [sp, #12]
    a6d0:	add	r0, r8, #4
    a6d4:	add	r1, r1, #1
    a6d8:	str	r1, [sp, #12]
    a6dc:	bl	c4e8 <__assert_fail@plt+0x378c>
    a6e0:	ldr	r3, [sp, #8]
    a6e4:	ldm	r3, {r0, r1}
    a6e8:	stm	r8, {r0, r1}
    a6ec:	mov	r0, r1
    a6f0:	bl	c6d8 <__assert_fail@plt+0x397c>
    a6f4:	mov	r4, r0
    a6f8:	ldr	r0, [r8, #4]
    a6fc:	bl	c6e0 <__assert_fail@plt+0x3984>
    a700:	mov	r2, fp
    a704:	add	r5, r4, r0
    a708:	b	a3dc <__assert_fail@plt+0x1680>
    a70c:	ldr	r3, [sp, #8]
    a710:	ldm	r3, {r0, r1}
    a714:	bl	ac40 <__assert_fail@plt+0x1ee4>
    a718:	b	a2ec <__assert_fail@plt+0x1590>
    a71c:	bl	8bdc <__stack_chk_fail@plt>
    a720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a724:	movw	r7, #37096	; 0x90e8
    a728:	movt	r7, #1
    a72c:	movw	sl, #37072	; 0x90d0
    a730:	movt	sl, #1
    a734:	sub	sp, sp, #44	; 0x2c
    a738:	ldr	r3, [r7]
    a73c:	mov	r4, r0
    a740:	ldr	r2, [sl]
    a744:	cmp	r0, r3
    a748:	str	r2, [sp, #36]	; 0x24
    a74c:	beq	a760 <__assert_fail@plt+0x1a04>
    a750:	movw	r1, #41548	; 0xa24c
    a754:	mov	r0, #2
    a758:	movt	r1, #0
    a75c:	bl	8bc4 <signal@plt>
    a760:	movw	r8, #37052	; 0x90bc
    a764:	movt	r8, #1
    a768:	mov	r0, r4
    a76c:	mvn	r3, #0
    a770:	str	r3, [r8]
    a774:	bl	8bd0 <_IO_getc@plt>
    a778:	cmn	r0, #1
    a77c:	mov	r5, r0
    a780:	beq	a850 <__assert_fail@plt+0x1af4>
    a784:	movw	r9, #37112	; 0x90f8
    a788:	movw	fp, #37088	; 0x90e0
    a78c:	movt	r9, #1
    a790:	movt	fp, #1
    a794:	mov	r6, #0
    a798:	movw	ip, #38188	; 0x952c
    a79c:	movt	ip, #1
    a7a0:	str	ip, [sp, #4]
    a7a4:	mov	r0, r4
    a7a8:	bl	8bd0 <_IO_getc@plt>
    a7ac:	ldr	r3, [r7]
    a7b0:	mov	r2, r6
    a7b4:	cmp	r4, r3
    a7b8:	mov	r1, r0
    a7bc:	streq	r0, [r8]
    a7c0:	str	r0, [sp, #16]
    a7c4:	mov	r0, r5
    a7c8:	bl	965c <__assert_fail@plt+0x900>
    a7cc:	cmp	r0, #10
    a7d0:	ldrls	pc, [pc, r0, lsl #2]
    a7d4:	b	a9a8 <__assert_fail@plt+0x1c4c>
    a7d8:	andeq	sl, r0, r8, lsr #16
    a7dc:	muleq	r0, r8, r8
    a7e0:	andeq	sl, r0, r8, ror r9
    a7e4:			; <UNDEFINED> instruction: 0x0000a8b0
    a7e8:	andeq	sl, r0, r4, lsl #16
    a7ec:	andeq	sl, r0, r0, lsl #21
    a7f0:	andeq	sl, r0, r4, lsr #20
    a7f4:			; <UNDEFINED> instruction: 0x0000a9b4
    a7f8:	andeq	sl, r0, r8, ror #16
    a7fc:	andeq	sl, r0, ip, ror #18
    a800:	andeq	sl, r0, ip, lsl #18
    a804:	ldr	r1, [r9, #12]
    a808:	cmp	r1, #1
    a80c:	bne	a860 <__assert_fail@plt+0x1b04>
    a810:	ldr	ip, [sp, #4]
    a814:	movw	r2, #64336	; 0xfb50
    a818:	ldr	r0, [fp]
    a81c:	movt	r2, #0
    a820:	ldr	r3, [ip]
    a824:	bl	8d14 <__fprintf_chk@plt>
    a828:	ldr	r5, [sp, #16]
    a82c:	ldr	r3, [r8]
    a830:	cmp	r3, r5
    a834:	beq	aad4 <__assert_fail@plt+0x1d78>
    a838:	ldr	r3, [r7]
    a83c:	cmp	r4, r3
    a840:	movne	r6, #0
    a844:	beq	a898 <__assert_fail@plt+0x1b3c>
    a848:	cmn	r5, #1
    a84c:	bne	a7a4 <__assert_fail@plt+0x1a48>
    a850:	mov	r0, r4
    a854:	bl	8bac <ferror@plt>
    a858:	cmp	r0, #0
    a85c:	bne	a91c <__assert_fail@plt+0x1bc0>
    a860:	mov	r0, #0
    a864:	b	a954 <__assert_fail@plt+0x1bf8>
    a868:	ldr	r0, [sp, #16]
    a86c:	cmp	r0, #10
    a870:	cmnne	r0, #1
    a874:	beq	a890 <__assert_fail@plt+0x1b34>
    a878:	mov	r0, r4
    a87c:	bl	8bd0 <_IO_getc@plt>
    a880:	cmp	r0, #10
    a884:	cmnne	r0, #1
    a888:	str	r0, [sp, #16]
    a88c:	bne	a878 <__assert_fail@plt+0x1b1c>
    a890:	cmn	r0, #1
    a894:	beq	a9a8 <__assert_fail@plt+0x1c4c>
    a898:	mov	r0, r4
    a89c:	mov	r6, #0
    a8a0:	bl	8bd0 <_IO_getc@plt>
    a8a4:	mov	r5, r0
    a8a8:	str	r0, [sp, #16]
    a8ac:	b	a848 <__assert_fail@plt+0x1aec>
    a8b0:	add	r5, sp, #20
    a8b4:	ldr	r2, [r8]
    a8b8:	ldr	r3, [sp, #16]
    a8bc:	cmp	r2, r3
    a8c0:	beq	a8d0 <__assert_fail@plt+0x1b74>
    a8c4:	ldr	r3, [r7]
    a8c8:	cmp	r4, r3
    a8cc:	beq	ab7c <__assert_fail@plt+0x1e20>
    a8d0:	mov	r0, r5
    a8d4:	bl	aee4 <__assert_fail@plt+0x2188>
    a8d8:	subs	r6, r0, #0
    a8dc:	bne	a9a8 <__assert_fail@plt+0x1c4c>
    a8e0:	ldr	r3, [sp, #20]
    a8e4:	cmp	r3, #1
    a8e8:	beq	ab6c <__assert_fail@plt+0x1e10>
    a8ec:	cmp	r3, #2
    a8f0:	beq	ab1c <__assert_fail@plt+0x1dc0>
    a8f4:	movw	r0, #63932	; 0xf9bc
    a8f8:	mvn	r1, #0
    a8fc:	movt	r0, #0
    a900:	bl	9478 <__assert_fail@plt+0x71c>
    a904:	ldr	r5, [sp, #16]
    a908:	b	a848 <__assert_fail@plt+0x1aec>
    a90c:	mov	r0, r4
    a910:	bl	8bac <ferror@plt>
    a914:	cmp	r0, #0
    a918:	beq	aaec <__assert_fail@plt+0x1d90>
    a91c:	movw	r0, #37088	; 0x90e0
    a920:	movw	r3, #38188	; 0x952c
    a924:	movt	r0, #1
    a928:	movt	r3, #1
    a92c:	mov	r1, #1
    a930:	movw	r2, #63128	; 0xf698
    a934:	ldr	r3, [r3]
    a938:	movt	r2, #0
    a93c:	ldr	r0, [r0]
    a940:	bl	8d14 <__fprintf_chk@plt>
    a944:	movw	r0, #64392	; 0xfb88
    a948:	movt	r0, #0
    a94c:	bl	8bf4 <perror@plt>
    a950:	mov	r0, #2
    a954:	ldr	r2, [sp, #36]	; 0x24
    a958:	ldr	r3, [sl]
    a95c:	cmp	r2, r3
    a960:	bne	ab98 <__assert_fail@plt+0x1e3c>
    a964:	add	sp, sp, #44	; 0x2c
    a968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a96c:	ldr	r5, [sp, #16]
    a970:	mov	r6, #1
    a974:	b	a848 <__assert_fail@plt+0x1aec>
    a978:	mov	r0, r4
    a97c:	ldr	r6, [sp, #16]
    a980:	bl	8bd0 <_IO_getc@plt>
    a984:	add	r5, sp, #20
    a988:	mov	r1, r5
    a98c:	mov	r3, r0
    a990:	mov	r0, r6
    a994:	str	r3, [sp, #16]
    a998:	str	r3, [r8]
    a99c:	bl	ad88 <__assert_fail@plt+0x202c>
    a9a0:	cmp	r0, #0
    a9a4:	beq	aae0 <__assert_fail@plt+0x1d84>
    a9a8:	ldr	r5, [sp, #16]
    a9ac:	mov	r6, #0
    a9b0:	b	a848 <__assert_fail@plt+0x1aec>
    a9b4:	add	r5, sp, #8
    a9b8:	mov	r1, r4
    a9bc:	ldr	r0, [sp, #16]
    a9c0:	bl	8cb4 <ungetc@plt>
    a9c4:	mov	r2, #10
    a9c8:	mov	r0, r5
    a9cc:	ldr	r1, [r7]
    a9d0:	mov	r3, r2
    a9d4:	bl	c5d4 <__assert_fail@plt+0x3878>
    a9d8:	ldm	r5, {r0, r1}
    a9dc:	add	r5, sp, #20
    a9e0:	stm	r5, {r0, r1}
    a9e4:	ldr	r0, [r7]
    a9e8:	bl	8bac <ferror@plt>
    a9ec:	cmp	r0, #0
    a9f0:	bne	a91c <__assert_fail@plt+0x1bc0>
    a9f4:	add	r5, sp, #40	; 0x28
    a9f8:	mov	r6, r0
    a9fc:	ldr	r0, [r5, #-16]!
    aa00:	bl	c6d8 <__assert_fail@plt+0x397c>
    aa04:	bl	94fc <__assert_fail@plt+0x7a0>
    aa08:	mov	r0, r5
    aa0c:	bl	c4e8 <__assert_fail@plt+0x378c>
    aa10:	mov	r0, r4
    aa14:	bl	8bd0 <_IO_getc@plt>
    aa18:	mov	r5, r0
    aa1c:	str	r0, [sp, #16]
    aa20:	b	a848 <__assert_fail@plt+0x1aec>
    aa24:	add	r6, sp, #8
    aa28:	mov	r1, r4
    aa2c:	ldr	r0, [sp, #16]
    aa30:	add	r5, sp, #20
    aa34:	bl	8cb4 <ungetc@plt>
    aa38:	mov	r0, r6
    aa3c:	mov	r1, r4
    aa40:	mov	r2, #91	; 0x5b
    aa44:	mov	r3, #93	; 0x5d
    aa48:	bl	c5d4 <__assert_fail@plt+0x3878>
    aa4c:	ldm	r6, {r0, r1}
    aa50:	stm	r5, {r0, r1}
    aa54:	mov	r0, r4
    aa58:	bl	8bac <ferror@plt>
    aa5c:	subs	r6, r0, #0
    aa60:	bne	a91c <__assert_fail@plt+0x1bc0>
    aa64:	ldm	r5, {r0, r1}
    aa68:	bl	ac40 <__assert_fail@plt+0x1ee4>
    aa6c:	mov	r0, r4
    aa70:	bl	8bd0 <_IO_getc@plt>
    aa74:	mov	r5, r0
    aa78:	str	r0, [sp, #16]
    aa7c:	b	a848 <__assert_fail@plt+0x1aec>
    aa80:	add	r6, sp, #28
    aa84:	mov	r1, r4
    aa88:	ldr	r0, [sp, #16]
    aa8c:	str	r4, [r9, #24]
    aa90:	str	r5, [r9, #20]
    aa94:	bl	8cb4 <ungetc@plt>
    aa98:	ldr	r2, [r8, #8]
    aa9c:	add	r3, sp, #16
    aaa0:	mov	r0, r6
    aaa4:	movw	r1, #41584	; 0xa270
    aaa8:	movt	r1, #0
    aaac:	bl	be50 <__assert_fail@plt+0x30f4>
    aab0:	ldm	r6, {r0, r1}
    aab4:	bl	ac40 <__assert_fail@plt+0x1ee4>
    aab8:	mov	r0, r4
    aabc:	bl	8bac <ferror@plt>
    aac0:	cmp	r0, #0
    aac4:	bne	a91c <__assert_fail@plt+0x1bc0>
    aac8:	mov	r6, r0
    aacc:	ldr	r5, [sp, #16]
    aad0:	b	a848 <__assert_fail@plt+0x1aec>
    aad4:	mov	r5, r3
    aad8:	mov	r6, #0
    aadc:	b	a848 <__assert_fail@plt+0x1aec>
    aae0:	ldm	r5, {r0, r1}
    aae4:	bl	ac40 <__assert_fail@plt+0x1ee4>
    aae8:	b	a8b4 <__assert_fail@plt+0x1b58>
    aaec:	movw	r0, #37088	; 0x90e0
    aaf0:	movw	r3, #38188	; 0x952c
    aaf4:	movt	r0, #1
    aaf8:	movt	r3, #1
    aafc:	movw	r2, #64412	; 0xfb9c
    ab00:	mov	r1, #1
    ab04:	ldr	r0, [r0]
    ab08:	movt	r2, #0
    ab0c:	ldr	r3, [r3]
    ab10:	bl	8d14 <__fprintf_chk@plt>
    ab14:	mov	r0, #2
    ab18:	b	a954 <__assert_fail@plt+0x1bf8>
    ab1c:	mov	r0, r5
    ab20:	bl	a298 <__assert_fail@plt+0x153c>
    ab24:	ldr	r3, [sp, #20]
    ab28:	cmp	r3, #2
    ab2c:	mov	r5, r0
    ab30:	beq	ab8c <__assert_fail@plt+0x1e30>
    ab34:	cmp	r5, #4
    ab38:	bne	a9a8 <__assert_fail@plt+0x1c4c>
    ab3c:	ldr	r1, [r9, #12]
    ab40:	cmp	r1, #1
    ab44:	bne	a860 <__assert_fail@plt+0x1b04>
    ab48:	ldr	ip, [sp, #4]
    ab4c:	movw	r2, #64336	; 0xfb50
    ab50:	ldr	r0, [fp]
    ab54:	movt	r2, #0
    ab58:	mov	r6, #0
    ab5c:	ldr	r3, [ip]
    ab60:	bl	8d14 <__fprintf_chk@plt>
    ab64:	ldr	r5, [sp, #16]
    ab68:	b	a848 <__assert_fail@plt+0x1aec>
    ab6c:	ldm	r5, {r0, r1}
    ab70:	bl	ac40 <__assert_fail@plt+0x1ee4>
    ab74:	ldr	r5, [sp, #16]
    ab78:	b	a848 <__assert_fail@plt+0x1aec>
    ab7c:	mov	r0, r4
    ab80:	bl	8bd0 <_IO_getc@plt>
    ab84:	str	r0, [sp, #16]
    ab88:	b	a8d0 <__assert_fail@plt+0x1b74>
    ab8c:	add	r0, sp, #24
    ab90:	bl	c4e8 <__assert_fail@plt+0x378c>
    ab94:	b	ab34 <__assert_fail@plt+0x1dd8>
    ab98:	bl	8bdc <__stack_chk_fail@plt>
    ab9c:	ldr	r3, [pc, #20]	; abb8 <__assert_fail@plt+0x1e5c>
    aba0:	mov	r1, #0
    aba4:	add	r2, r3, #1024	; 0x400
    aba8:	str	r1, [r3, #4]!
    abac:	cmp	r3, r2
    abb0:	bne	aba8 <__assert_fail@plt+0x1e4c>
    abb4:	bx	lr
    abb8:	andeq	r9, r1, r0, lsl r1
    abbc:	push	{r4, r5, r6, lr}
    abc0:	movw	r6, #37140	; 0x9114
    abc4:	movt	r6, #1
    abc8:	ldr	r4, [r6, #1024]	; 0x400
    abcc:	cmp	r4, #0
    abd0:	bne	abf8 <__assert_fail@plt+0x1e9c>
    abd4:	b	ac34 <__assert_fail@plt+0x1ed8>
    abd8:	bl	9478 <__assert_fail@plt+0x71c>
    abdc:	ldr	r0, [r4, #8]
    abe0:	bl	b820 <__assert_fail@plt+0x2ac4>
    abe4:	mov	r0, r4
    abe8:	bl	8ba0 <free@plt>
    abec:	cmp	r5, #0
    abf0:	mov	r4, r5
    abf4:	beq	ac34 <__assert_fail@plt+0x1ed8>
    abf8:	ldr	r3, [r4]
    abfc:	movw	r0, #64432	; 0xfbb0
    ac00:	mvn	r1, #0
    ac04:	movt	r0, #0
    ac08:	cmp	r3, #1
    ac0c:	ldr	r5, [r4, #12]
    ac10:	beq	ac28 <__assert_fail@plt+0x1ecc>
    ac14:	cmp	r3, #2
    ac18:	bne	abd8 <__assert_fail@plt+0x1e7c>
    ac1c:	add	r0, r4, #4
    ac20:	bl	c4e8 <__assert_fail@plt+0x378c>
    ac24:	b	abdc <__assert_fail@plt+0x1e80>
    ac28:	add	r0, r4, #4
    ac2c:	bl	c390 <__assert_fail@plt+0x3634>
    ac30:	b	abdc <__assert_fail@plt+0x1e80>
    ac34:	mov	r3, #0
    ac38:	str	r3, [r6, #1024]	; 0x400
    ac3c:	pop	{r4, r5, r6, pc}
    ac40:	push	{r4, r5, lr}
    ac44:	sub	sp, sp, #12
    ac48:	stm	sp, {r0, r1}
    ac4c:	mov	r0, #16
    ac50:	bl	93ec <__assert_fail@plt+0x690>
    ac54:	ldr	r2, [sp]
    ac58:	mov	r3, #0
    ac5c:	mov	r5, sp
    ac60:	sub	r2, r2, #1
    ac64:	cmp	r2, #1
    ac68:	mov	r4, r0
    ac6c:	str	r3, [r0]
    ac70:	str	r3, [r0, #8]
    ac74:	str	r3, [r0, #12]
    ac78:	bls	ac8c <__assert_fail@plt+0x1f30>
    ac7c:	movw	r0, #64444	; 0xfbbc
    ac80:	mvn	r1, #0
    ac84:	movt	r0, #0
    ac88:	bl	9478 <__assert_fail@plt+0x71c>
    ac8c:	movw	r3, #37140	; 0x9114
    ac90:	movt	r3, #1
    ac94:	ldm	r5, {r0, r1}
    ac98:	ldr	r2, [r3, #1024]	; 0x400
    ac9c:	str	r4, [r3, #1024]	; 0x400
    aca0:	stm	r4, {r0, r1}
    aca4:	str	r2, [r4, #12]
    aca8:	add	sp, sp, #12
    acac:	pop	{r4, r5, pc}
    acb0:	push	{r4, r5, lr}
    acb4:	sub	sp, sp, #12
    acb8:	mov	r5, r0
    acbc:	mov	r0, #16
    acc0:	stm	sp, {r1, r2}
    acc4:	bl	93ec <__assert_fail@plt+0x690>
    acc8:	uxtb	ip, r5
    accc:	movw	r2, #37140	; 0x9114
    acd0:	movt	r2, #1
    acd4:	mov	r4, #0
    acd8:	mov	r3, r0
    acdc:	ldm	sp, {r0, r1}
    ace0:	str	r4, [r3, #12]
    ace4:	str	r4, [r3, #8]
    ace8:	ldr	r4, [r2, ip, lsl #2]
    acec:	stm	r3, {r0, r1}
    acf0:	str	r4, [r3, #12]
    acf4:	str	r3, [r2, ip, lsl #2]
    acf8:	add	sp, sp, #12
    acfc:	pop	{r4, r5, pc}
    ad00:	push	{r3, r4, r5, lr}
    ad04:	movw	r4, #37140	; 0x9114
    ad08:	movt	r4, #1
    ad0c:	mov	r5, r0
    ad10:	ldr	r3, [r4, #1024]	; 0x400
    ad14:	cmp	r3, #0
    ad18:	beq	ad54 <__assert_fail@plt+0x1ff8>
    ad1c:	ldr	r2, [r3]
    ad20:	sub	r2, r2, #1
    ad24:	cmp	r2, #1
    ad28:	bls	ad40 <__assert_fail@plt+0x1fe4>
    ad2c:	movw	r0, #63932	; 0xf9bc
    ad30:	mvn	r1, #0
    ad34:	movt	r0, #0
    ad38:	bl	9478 <__assert_fail@plt+0x71c>
    ad3c:	ldr	r3, [r4, #1024]	; 0x400
    ad40:	ldm	r3, {r0, r1}
    ad44:	mov	r3, #0
    ad48:	stm	r5, {r0, r1}
    ad4c:	mov	r0, r3
    ad50:	pop	{r3, r4, r5, pc}
    ad54:	movw	r0, #37088	; 0x90e0
    ad58:	movw	r3, #38188	; 0x952c
    ad5c:	movt	r0, #1
    ad60:	movt	r3, #1
    ad64:	mov	r1, #1
    ad68:	movw	r2, #64468	; 0xfbd4
    ad6c:	ldr	r3, [r3]
    ad70:	movt	r2, #0
    ad74:	ldr	r0, [r0]
    ad78:	bl	8d14 <__fprintf_chk@plt>
    ad7c:	mov	r3, #2
    ad80:	mov	r0, r3
    ad84:	pop	{r3, r4, r5, pc}
    ad88:	push	{r4, r5, lr}
    ad8c:	movw	r3, #37140	; 0x9114
    ad90:	uxtb	r5, r0
    ad94:	movt	r3, #1
    ad98:	sub	sp, sp, #12
    ad9c:	mov	r4, r1
    ada0:	ldr	r3, [r3, r5, lsl #2]
    ada4:	cmp	r3, #0
    ada8:	beq	adb8 <__assert_fail@plt+0x205c>
    adac:	ldr	r2, [r3]
    adb0:	cmp	r2, #0
    adb4:	bne	ae04 <__assert_fail@plt+0x20a8>
    adb8:	movw	r4, #37088	; 0x90e0
    adbc:	movw	r3, #38188	; 0x952c
    adc0:	movt	r4, #1
    adc4:	movt	r3, #1
    adc8:	mov	r1, #1
    adcc:	movw	r2, #64488	; 0xfbe8
    add0:	ldr	r3, [r3]
    add4:	movt	r2, #0
    add8:	ldr	r0, [r4]
    addc:	bl	8d14 <__fprintf_chk@plt>
    ade0:	ldr	r0, [r4]
    ade4:	mov	r1, r5
    ade8:	movw	r2, #64504	; 0xfbf8
    adec:	movt	r2, #0
    adf0:	bl	9400 <__assert_fail@plt+0x6a4>
    adf4:	mov	r3, #2
    adf8:	mov	r0, r3
    adfc:	add	sp, sp, #12
    ae00:	pop	{r4, r5, pc}
    ae04:	ldm	r3, {r1, r2}
    ae08:	mov	r0, sp
    ae0c:	bl	95d8 <__assert_fail@plt+0x87c>
    ae10:	ldm	sp, {r0, r1}
    ae14:	mov	r3, #0
    ae18:	stm	r4, {r0, r1}
    ae1c:	mov	r0, r3
    ae20:	add	sp, sp, #12
    ae24:	pop	{r4, r5, pc}
    ae28:	push	{r4, r5, r6, r7, lr}
    ae2c:	uxtb	r7, r0
    ae30:	movw	r5, #37140	; 0x9114
    ae34:	movt	r5, #1
    ae38:	sub	sp, sp, #12
    ae3c:	ldr	r6, [r5, r7, lsl #2]
    ae40:	mov	r4, sp
    ae44:	stm	sp, {r1, r2}
    ae48:	cmp	r6, #0
    ae4c:	beq	aec4 <__assert_fail@plt+0x2168>
    ae50:	ldr	r3, [r6]
    ae54:	cmp	r3, #1
    ae58:	beq	aea4 <__assert_fail@plt+0x2148>
    ae5c:	cmp	r3, #2
    ae60:	beq	aeb4 <__assert_fail@plt+0x2158>
    ae64:	cmp	r3, #0
    ae68:	moveq	r3, r6
    ae6c:	bne	ae80 <__assert_fail@plt+0x2124>
    ae70:	ldm	r4, {r0, r1}
    ae74:	stm	r3, {r0, r1}
    ae78:	add	sp, sp, #12
    ae7c:	pop	{r4, r5, r6, r7, pc}
    ae80:	mov	r1, r7
    ae84:	movw	r0, #63384	; 0xf798
    ae88:	movt	r0, #0
    ae8c:	bl	9478 <__assert_fail@plt+0x71c>
    ae90:	ldr	r3, [r5, r7, lsl #2]
    ae94:	ldm	r4, {r0, r1}
    ae98:	stm	r3, {r0, r1}
    ae9c:	add	sp, sp, #12
    aea0:	pop	{r4, r5, r6, r7, pc}
    aea4:	add	r0, r6, #4
    aea8:	bl	c390 <__assert_fail@plt+0x3634>
    aeac:	ldr	r3, [r5, r7, lsl #2]
    aeb0:	b	ae70 <__assert_fail@plt+0x2114>
    aeb4:	add	r0, r6, #4
    aeb8:	bl	c4e8 <__assert_fail@plt+0x378c>
    aebc:	ldr	r3, [r5, r7, lsl #2]
    aec0:	b	ae70 <__assert_fail@plt+0x2114>
    aec4:	mov	r0, #16
    aec8:	bl	93ec <__assert_fail@plt+0x690>
    aecc:	str	r6, [r0]
    aed0:	mov	r3, r0
    aed4:	str	r6, [r0, #8]
    aed8:	str	r6, [r0, #12]
    aedc:	str	r0, [r5, r7, lsl #2]
    aee0:	b	ae70 <__assert_fail@plt+0x2114>
    aee4:	push	{r4, r5, r6, lr}
    aee8:	movw	r5, #37140	; 0x9114
    aeec:	movt	r5, #1
    aef0:	mov	r6, r0
    aef4:	ldr	r4, [r5, #1024]	; 0x400
    aef8:	cmp	r4, #0
    aefc:	beq	af0c <__assert_fail@plt+0x21b0>
    af00:	ldr	r3, [r4]
    af04:	cmp	r3, #0
    af08:	bne	af3c <__assert_fail@plt+0x21e0>
    af0c:	movw	r0, #37088	; 0x90e0
    af10:	movw	r3, #38188	; 0x952c
    af14:	movt	r0, #1
    af18:	movt	r3, #1
    af1c:	mov	r1, #1
    af20:	movw	r2, #64468	; 0xfbd4
    af24:	ldr	r3, [r3]
    af28:	movt	r2, #0
    af2c:	ldr	r0, [r0]
    af30:	bl	8d14 <__fprintf_chk@plt>
    af34:	mov	r0, #2
    af38:	pop	{r4, r5, r6, pc}
    af3c:	sub	r3, r3, #1
    af40:	cmp	r3, #1
    af44:	bls	af58 <__assert_fail@plt+0x21fc>
    af48:	movw	r0, #63932	; 0xf9bc
    af4c:	mvn	r1, #0
    af50:	movt	r0, #0
    af54:	bl	9478 <__assert_fail@plt+0x71c>
    af58:	ldm	r4, {r0, r1}
    af5c:	ldr	r3, [r4, #12]
    af60:	stm	r6, {r0, r1}
    af64:	ldr	r0, [r4, #8]
    af68:	str	r3, [r5, #1024]	; 0x400
    af6c:	bl	b820 <__assert_fail@plt+0x2ac4>
    af70:	mov	r0, r4
    af74:	bl	8ba0 <free@plt>
    af78:	mov	r0, #0
    af7c:	pop	{r4, r5, r6, pc}
    af80:	movw	r3, #37140	; 0x9114
    af84:	movt	r3, #1
    af88:	push	{r4, r5, r6, r7, r8, r9, lr}
    af8c:	movw	r4, #37072	; 0x90d0
    af90:	movt	r4, #1
    af94:	ldr	r3, [r3, #1024]	; 0x400
    af98:	sub	sp, sp, #44	; 0x2c
    af9c:	mov	r5, r0
    afa0:	ldr	ip, [r4]
    afa4:	cmp	r3, #0
    afa8:	str	ip, [sp, #36]	; 0x24
    afac:	beq	b074 <__assert_fail@plt+0x2318>
    afb0:	ldr	ip, [r3, #12]
    afb4:	cmp	ip, #0
    afb8:	beq	b074 <__assert_fail@plt+0x2318>
    afbc:	ldr	r3, [r3]
    afc0:	cmp	r3, #1
    afc4:	beq	b008 <__assert_fail@plt+0x22ac>
    afc8:	movw	r0, #37088	; 0x90e0
    afcc:	movw	r3, #38188	; 0x952c
    afd0:	movt	r0, #1
    afd4:	movt	r3, #1
    afd8:	movw	r2, #64516	; 0xfc04
    afdc:	mov	r1, #1
    afe0:	ldr	r0, [r0]
    afe4:	movt	r2, #0
    afe8:	ldr	r3, [r3]
    afec:	bl	8d14 <__fprintf_chk@plt>
    aff0:	ldr	r2, [sp, #36]	; 0x24
    aff4:	ldr	r3, [r4]
    aff8:	cmp	r2, r3
    affc:	bne	b0b4 <__assert_fail@plt+0x2358>
    b000:	add	sp, sp, #44	; 0x2c
    b004:	pop	{r4, r5, r6, r7, r8, r9, pc}
    b008:	ldr	r6, [ip]
    b00c:	cmp	r6, #1
    b010:	bne	afc8 <__assert_fail@plt+0x226c>
    b014:	add	r7, sp, #20
    b018:	add	r8, sp, #12
    b01c:	str	r1, [sp, #4]
    b020:	add	r9, sp, #28
    b024:	mov	r0, r7
    b028:	bl	aee4 <__assert_fail@plt+0x2188>
    b02c:	mov	r0, r8
    b030:	bl	aee4 <__assert_fail@plt+0x2188>
    b034:	ldr	r1, [sp, #4]
    b038:	ldr	r0, [sp, #16]
    b03c:	add	r3, sp, #32
    b040:	mov	r2, r1
    b044:	ldr	r1, [sp, #24]
    b048:	blx	r5
    b04c:	cmp	r0, #0
    b050:	bne	b0a0 <__assert_fail@plt+0x2344>
    b054:	str	r6, [sp, #28]
    b058:	ldm	r9, {r0, r1}
    b05c:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b060:	add	r0, sp, #16
    b064:	bl	c390 <__assert_fail@plt+0x3634>
    b068:	add	r0, sp, #24
    b06c:	bl	c390 <__assert_fail@plt+0x3634>
    b070:	b	aff0 <__assert_fail@plt+0x2294>
    b074:	movw	r0, #37088	; 0x90e0
    b078:	movw	r3, #38188	; 0x952c
    b07c:	movt	r0, #1
    b080:	movt	r3, #1
    b084:	movw	r2, #64468	; 0xfbd4
    b088:	mov	r1, #1
    b08c:	movt	r2, #0
    b090:	ldr	r3, [r3]
    b094:	ldr	r0, [r0]
    b098:	bl	8d14 <__fprintf_chk@plt>
    b09c:	b	aff0 <__assert_fail@plt+0x2294>
    b0a0:	ldm	r8, {r0, r1}
    b0a4:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b0a8:	ldm	r7, {r0, r1}
    b0ac:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b0b0:	b	aff0 <__assert_fail@plt+0x2294>
    b0b4:	bl	8bdc <__stack_chk_fail@plt>
    b0b8:	movw	r3, #37140	; 0x9114
    b0bc:	movt	r3, #1
    b0c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b0c4:	movw	r4, #37072	; 0x90d0
    b0c8:	movt	r4, #1
    b0cc:	ldr	r3, [r3, #1024]	; 0x400
    b0d0:	sub	sp, sp, #56	; 0x38
    b0d4:	mov	r5, r0
    b0d8:	ldr	ip, [r4]
    b0dc:	cmp	r3, #0
    b0e0:	str	ip, [sp, #52]	; 0x34
    b0e4:	beq	b1c8 <__assert_fail@plt+0x246c>
    b0e8:	ldr	ip, [r3, #12]
    b0ec:	cmp	ip, #0
    b0f0:	beq	b1c8 <__assert_fail@plt+0x246c>
    b0f4:	ldr	r3, [r3]
    b0f8:	cmp	r3, #1
    b0fc:	beq	b140 <__assert_fail@plt+0x23e4>
    b100:	movw	r0, #37088	; 0x90e0
    b104:	movw	r3, #38188	; 0x952c
    b108:	movt	r0, #1
    b10c:	movt	r3, #1
    b110:	movw	r2, #64516	; 0xfc04
    b114:	mov	r1, #1
    b118:	ldr	r0, [r0]
    b11c:	movt	r2, #0
    b120:	ldr	r3, [r3]
    b124:	bl	8d14 <__fprintf_chk@plt>
    b128:	ldr	r2, [sp, #52]	; 0x34
    b12c:	ldr	r3, [r4]
    b130:	cmp	r2, r3
    b134:	bne	b208 <__assert_fail@plt+0x24ac>
    b138:	add	sp, sp, #56	; 0x38
    b13c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b140:	ldr	r6, [ip]
    b144:	cmp	r6, #1
    b148:	bne	b100 <__assert_fail@plt+0x23a4>
    b14c:	add	r7, sp, #28
    b150:	add	r8, sp, #20
    b154:	str	r1, [sp, #12]
    b158:	add	sl, sp, #36	; 0x24
    b15c:	mov	r0, r7
    b160:	add	r9, sp, #44	; 0x2c
    b164:	bl	aee4 <__assert_fail@plt+0x2188>
    b168:	mov	r0, r8
    b16c:	bl	aee4 <__assert_fail@plt+0x2188>
    b170:	ldr	r1, [sp, #12]
    b174:	ldr	ip, [sp, #32]
    b178:	add	r3, sp, #40	; 0x28
    b17c:	ldr	r0, [sp, #24]
    b180:	mov	r2, r1
    b184:	add	r1, sp, #48	; 0x30
    b188:	str	r1, [sp]
    b18c:	mov	r1, ip
    b190:	blx	r5
    b194:	cmp	r0, #0
    b198:	bne	b1f4 <__assert_fail@plt+0x2498>
    b19c:	str	r6, [sp, #36]	; 0x24
    b1a0:	ldm	sl, {r0, r1}
    b1a4:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b1a8:	str	r6, [sp, #44]	; 0x2c
    b1ac:	ldm	r9, {r0, r1}
    b1b0:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b1b4:	add	r0, sp, #24
    b1b8:	bl	c390 <__assert_fail@plt+0x3634>
    b1bc:	add	r0, sp, #32
    b1c0:	bl	c390 <__assert_fail@plt+0x3634>
    b1c4:	b	b128 <__assert_fail@plt+0x23cc>
    b1c8:	movw	r0, #37088	; 0x90e0
    b1cc:	movw	r3, #38188	; 0x952c
    b1d0:	movt	r0, #1
    b1d4:	movt	r3, #1
    b1d8:	movw	r2, #64468	; 0xfbd4
    b1dc:	mov	r1, #1
    b1e0:	movt	r2, #0
    b1e4:	ldr	r3, [r3]
    b1e8:	ldr	r0, [r0]
    b1ec:	bl	8d14 <__fprintf_chk@plt>
    b1f0:	b	b128 <__assert_fail@plt+0x23cc>
    b1f4:	ldm	r8, {r0, r1}
    b1f8:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b1fc:	ldm	r7, {r0, r1}
    b200:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b204:	b	b128 <__assert_fail@plt+0x23cc>
    b208:	bl	8bdc <__stack_chk_fail@plt>
    b20c:	movw	r3, #37140	; 0x9114
    b210:	movt	r3, #1
    b214:	push	{r4, r5, r6, lr}
    b218:	movw	r4, #37072	; 0x90d0
    b21c:	movt	r4, #1
    b220:	ldr	r3, [r3, #1024]	; 0x400
    b224:	sub	sp, sp, #24
    b228:	ldr	r2, [r4]
    b22c:	cmp	r3, #0
    b230:	str	r2, [sp, #20]
    b234:	beq	b2dc <__assert_fail@plt+0x2580>
    b238:	ldr	r2, [r3, #12]
    b23c:	cmp	r2, #0
    b240:	beq	b2dc <__assert_fail@plt+0x2580>
    b244:	ldr	r3, [r3]
    b248:	cmp	r3, #1
    b24c:	bne	b25c <__assert_fail@plt+0x2500>
    b250:	ldr	r3, [r2]
    b254:	cmp	r3, #1
    b258:	beq	b2a0 <__assert_fail@plt+0x2544>
    b25c:	movw	r0, #37088	; 0x90e0
    b260:	movw	r3, #38188	; 0x952c
    b264:	movt	r0, #1
    b268:	movt	r3, #1
    b26c:	movw	r2, #64516	; 0xfc04
    b270:	mov	r1, #1
    b274:	ldr	r0, [r0]
    b278:	movt	r2, #0
    b27c:	ldr	r3, [r3]
    b280:	bl	8d14 <__fprintf_chk@plt>
    b284:	mov	r0, #0
    b288:	ldr	r2, [sp, #20]
    b28c:	ldr	r3, [r4]
    b290:	cmp	r2, r3
    b294:	bne	b30c <__assert_fail@plt+0x25b0>
    b298:	add	sp, sp, #24
    b29c:	pop	{r4, r5, r6, pc}
    b2a0:	add	r5, sp, #24
    b2a4:	add	r0, sp, #12
    b2a8:	bl	aee4 <__assert_fail@plt+0x2188>
    b2ac:	add	r0, sp, #4
    b2b0:	bl	aee4 <__assert_fail@plt+0x2188>
    b2b4:	ldr	r1, [r5, #-16]!
    b2b8:	ldr	r0, [sp, #16]
    b2bc:	bl	bd6c <__assert_fail@plt+0x3010>
    b2c0:	mov	r6, r0
    b2c4:	mov	r0, r5
    b2c8:	bl	c390 <__assert_fail@plt+0x3634>
    b2cc:	add	r0, sp, #16
    b2d0:	bl	c390 <__assert_fail@plt+0x3634>
    b2d4:	mov	r0, r6
    b2d8:	b	b288 <__assert_fail@plt+0x252c>
    b2dc:	movw	r0, #37088	; 0x90e0
    b2e0:	movw	r3, #38188	; 0x952c
    b2e4:	movt	r0, #1
    b2e8:	movt	r3, #1
    b2ec:	movw	r2, #64468	; 0xfbd4
    b2f0:	mov	r1, #1
    b2f4:	ldr	r0, [r0]
    b2f8:	movt	r2, #0
    b2fc:	ldr	r3, [r3]
    b300:	bl	8d14 <__fprintf_chk@plt>
    b304:	mov	r0, #0
    b308:	b	b288 <__assert_fail@plt+0x252c>
    b30c:	bl	8bdc <__stack_chk_fail@plt>
    b310:	movw	r3, #37140	; 0x9114
    b314:	movt	r3, #1
    b318:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b31c:	movw	r4, #37072	; 0x90d0
    b320:	movt	r4, #1
    b324:	ldr	r2, [r3, #1024]	; 0x400
    b328:	sub	sp, sp, #56	; 0x38
    b32c:	mov	r5, r0
    b330:	ldr	ip, [r4]
    b334:	cmp	r2, #0
    b338:	str	ip, [sp, #52]	; 0x34
    b33c:	beq	b43c <__assert_fail@plt+0x26e0>
    b340:	ldr	ip, [r2, #12]
    b344:	cmp	ip, #0
    b348:	beq	b43c <__assert_fail@plt+0x26e0>
    b34c:	ldr	lr, [ip, #12]
    b350:	cmp	lr, #0
    b354:	beq	b43c <__assert_fail@plt+0x26e0>
    b358:	ldr	r2, [r2]
    b35c:	cmp	r2, #1
    b360:	beq	b3a4 <__assert_fail@plt+0x2648>
    b364:	movw	r0, #37088	; 0x90e0
    b368:	movw	r3, #38188	; 0x952c
    b36c:	movt	r0, #1
    b370:	movt	r3, #1
    b374:	movw	r2, #64516	; 0xfc04
    b378:	mov	r1, #1
    b37c:	ldr	r0, [r0]
    b380:	movt	r2, #0
    b384:	ldr	r3, [r3]
    b388:	bl	8d14 <__fprintf_chk@plt>
    b38c:	ldr	r2, [sp, #52]	; 0x34
    b390:	ldr	r3, [r4]
    b394:	cmp	r2, r3
    b398:	bne	b484 <__assert_fail@plt+0x2728>
    b39c:	add	sp, sp, #56	; 0x38
    b3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b3a4:	ldr	r3, [ip]
    b3a8:	cmp	r3, #1
    b3ac:	bne	b364 <__assert_fail@plt+0x2608>
    b3b0:	ldr	r6, [lr]
    b3b4:	cmp	r6, #1
    b3b8:	bne	b364 <__assert_fail@plt+0x2608>
    b3bc:	add	r7, sp, #36	; 0x24
    b3c0:	add	r8, sp, #28
    b3c4:	add	r9, sp, #20
    b3c8:	str	r1, [sp, #12]
    b3cc:	mov	r0, r7
    b3d0:	add	sl, sp, #44	; 0x2c
    b3d4:	bl	aee4 <__assert_fail@plt+0x2188>
    b3d8:	mov	r0, r8
    b3dc:	bl	aee4 <__assert_fail@plt+0x2188>
    b3e0:	mov	r0, r9
    b3e4:	bl	aee4 <__assert_fail@plt+0x2188>
    b3e8:	ldr	r1, [sp, #12]
    b3ec:	ldr	ip, [sp, #32]
    b3f0:	ldr	r0, [sp, #24]
    b3f4:	mov	r3, r1
    b3f8:	ldr	r2, [sp, #40]	; 0x28
    b3fc:	add	r1, sp, #48	; 0x30
    b400:	str	r1, [sp]
    b404:	mov	r1, ip
    b408:	blx	r5
    b40c:	cmp	r0, #0
    b410:	bne	b468 <__assert_fail@plt+0x270c>
    b414:	str	r6, [sp, #44]	; 0x2c
    b418:	ldm	sl, {r0, r1}
    b41c:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b420:	add	r0, sp, #24
    b424:	bl	c390 <__assert_fail@plt+0x3634>
    b428:	add	r0, sp, #32
    b42c:	bl	c390 <__assert_fail@plt+0x3634>
    b430:	add	r0, sp, #40	; 0x28
    b434:	bl	c390 <__assert_fail@plt+0x3634>
    b438:	b	b38c <__assert_fail@plt+0x2630>
    b43c:	movw	r0, #37088	; 0x90e0
    b440:	movw	r3, #38188	; 0x952c
    b444:	movt	r0, #1
    b448:	movt	r3, #1
    b44c:	movw	r2, #64468	; 0xfbd4
    b450:	mov	r1, #1
    b454:	movt	r2, #0
    b458:	ldr	r3, [r3]
    b45c:	ldr	r0, [r0]
    b460:	bl	8d14 <__fprintf_chk@plt>
    b464:	b	b38c <__assert_fail@plt+0x2630>
    b468:	ldm	r9, {r0, r1}
    b46c:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b470:	ldm	r8, {r0, r1}
    b474:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b478:	ldm	r7, {r0, r1}
    b47c:	bl	ac40 <__assert_fail@plt+0x1ee4>
    b480:	b	b38c <__assert_fail@plt+0x2630>
    b484:	bl	8bdc <__stack_chk_fail@plt>
    b488:	push	{r3, r4, r5, r6, r7, lr}
    b48c:	uxtb	r6, r0
    b490:	movw	r5, #37140	; 0x9114
    b494:	movt	r5, #1
    b498:	mov	r7, r1
    b49c:	ldr	r4, [r5, r6, lsl #2]
    b4a0:	cmp	r4, #0
    b4a4:	beq	b4f0 <__assert_fail@plt+0x2794>
    b4a8:	ldr	r3, [r4]
    b4ac:	sub	r3, r3, #1
    b4b0:	cmp	r3, #1
    b4b4:	bls	b4c8 <__assert_fail@plt+0x276c>
    b4b8:	movw	r0, #64560	; 0xfc30
    b4bc:	mov	r1, r6
    b4c0:	movt	r0, #0
    b4c4:	bl	9478 <__assert_fail@plt+0x71c>
    b4c8:	ldm	r4, {r0, r1}
    b4cc:	ldr	r3, [r4, #12]
    b4d0:	stm	r7, {r0, r1}
    b4d4:	str	r3, [r5, r6, lsl #2]
    b4d8:	ldr	r0, [r4, #8]
    b4dc:	bl	b820 <__assert_fail@plt+0x2ac4>
    b4e0:	mov	r0, r4
    b4e4:	bl	8ba0 <free@plt>
    b4e8:	mov	r0, #0
    b4ec:	pop	{r3, r4, r5, r6, r7, pc}
    b4f0:	movw	r4, #37088	; 0x90e0
    b4f4:	movw	r3, #38188	; 0x952c
    b4f8:	movt	r4, #1
    b4fc:	movt	r3, #1
    b500:	mov	r1, #1
    b504:	movw	r2, #64540	; 0xfc1c
    b508:	ldr	r3, [r3]
    b50c:	movt	r2, #0
    b510:	ldr	r0, [r4]
    b514:	bl	8d14 <__fprintf_chk@plt>
    b518:	ldr	r0, [r4]
    b51c:	mov	r1, r6
    b520:	movw	r2, #64504	; 0xfbf8
    b524:	movt	r2, #0
    b528:	bl	9400 <__assert_fail@plt+0x6a4>
    b52c:	mov	r0, #2
    b530:	pop	{r3, r4, r5, r6, r7, pc}
    b534:	movw	r3, #37140	; 0x9114
    b538:	movt	r3, #1
    b53c:	ldr	r3, [r3, #1024]	; 0x400
    b540:	cmp	r3, #0
    b544:	beq	b560 <__assert_fail@plt+0x2804>
    b548:	mov	r0, #0
    b54c:	ldr	r3, [r3, #12]
    b550:	add	r0, r0, #1
    b554:	cmp	r3, #0
    b558:	bne	b54c <__assert_fail@plt+0x27f0>
    b55c:	bx	lr
    b560:	mov	r0, r3
    b564:	bx	lr
    b568:	push	{r4, r5, lr}
    b56c:	sub	sp, sp, #12
    b570:	add	r3, sp, #8
    b574:	mov	r5, r2
    b578:	stmdb	r3, {r0, r1}
    b57c:	ldr	r3, [sp]
    b580:	cmp	r3, #1
    b584:	beq	b5d0 <__assert_fail@plt+0x2874>
    b588:	cmp	r3, #2
    b58c:	beq	b5b0 <__assert_fail@plt+0x2854>
    b590:	movw	r0, #64568	; 0xfc38
    b594:	mvn	r1, #0
    b598:	movt	r0, #0
    b59c:	mov	r4, #0
    b5a0:	bl	9478 <__assert_fail@plt+0x71c>
    b5a4:	mov	r0, r4
    b5a8:	add	sp, sp, #12
    b5ac:	pop	{r4, r5, pc}
    b5b0:	ldr	r0, [sp, #4]
    b5b4:	bl	c6e0 <__assert_fail@plt+0x3984>
    b5b8:	cmp	r5, #0
    b5bc:	mov	r4, r0
    b5c0:	bne	b5a4 <__assert_fail@plt+0x2848>
    b5c4:	add	r0, sp, #4
    b5c8:	bl	c4e8 <__assert_fail@plt+0x378c>
    b5cc:	b	b5a4 <__assert_fail@plt+0x2848>
    b5d0:	ldr	r0, [sp, #4]
    b5d4:	bl	c184 <__assert_fail@plt+0x3428>
    b5d8:	cmp	r5, #0
    b5dc:	mov	r4, r0
    b5e0:	bne	b5a4 <__assert_fail@plt+0x2848>
    b5e4:	add	r0, sp, #4
    b5e8:	bl	c390 <__assert_fail@plt+0x3634>
    b5ec:	b	b5a4 <__assert_fail@plt+0x2848>
    b5f0:	movw	r3, #37140	; 0x9114
    b5f4:	movt	r3, #1
    b5f8:	push	{r4, r5, r6, lr}
    b5fc:	mov	r5, r0
    b600:	ldr	r4, [r3, #1024]	; 0x400
    b604:	sub	sp, sp, #8
    b608:	cmp	r4, #0
    b60c:	beq	b634 <__assert_fail@plt+0x28d8>
    b610:	mov	r6, #1
    b614:	str	r6, [sp]
    b618:	mov	r2, r5
    b61c:	ldm	r4, {r0, r1}
    b620:	mov	r3, #1
    b624:	bl	9570 <__assert_fail@plt+0x814>
    b628:	ldr	r4, [r4, #12]
    b62c:	cmp	r4, #0
    b630:	bne	b614 <__assert_fail@plt+0x28b8>
    b634:	add	sp, sp, #8
    b638:	pop	{r4, r5, r6, pc}
    b63c:	uxtb	r0, r0
    b640:	movw	r3, #37140	; 0x9114
    b644:	movt	r3, #1
    b648:	ldr	r0, [r3, r0, lsl #2]
    b64c:	cmp	r0, #0
    b650:	ldrne	r0, [r0, #8]
    b654:	bx	lr
    b658:	push	{r4, r5, lr}
    b65c:	uxtb	r5, r0
    b660:	movw	r4, #37140	; 0x9114
    b664:	movt	r4, #1
    b668:	sub	sp, sp, #12
    b66c:	ldr	r0, [r4, r5, lsl #2]
    b670:	cmp	r0, #0
    b674:	beq	b684 <__assert_fail@plt+0x2928>
    b678:	str	r1, [r0, #8]
    b67c:	add	sp, sp, #12
    b680:	pop	{r4, r5, pc}
    b684:	mov	r0, #16
    b688:	str	r1, [sp, #4]
    b68c:	bl	93ec <__assert_fail@plt+0x690>
    b690:	ldr	r1, [sp, #4]
    b694:	mov	r3, #0
    b698:	str	r3, [r0, #8]
    b69c:	str	r3, [r0]
    b6a0:	str	r3, [r0, #12]
    b6a4:	str	r0, [r4, r5, lsl #2]
    b6a8:	str	r1, [r0, #8]
    b6ac:	add	sp, sp, #12
    b6b0:	pop	{r4, r5, pc}
    b6b4:	bx	lr
    b6b8:	push	{r4, r5, r6, r7, r8, lr}
    b6bc:	sub	sp, sp, #8
    b6c0:	mov	r6, r1
    b6c4:	mov	r8, r0
    b6c8:	stm	sp, {r2, r3}
    b6cc:	bl	b63c <__assert_fail@plt+0x28e0>
    b6d0:	mov	r7, sp
    b6d4:	subs	r5, r0, #0
    b6d8:	beq	b708 <__assert_fail@plt+0x29ac>
    b6dc:	ldr	r3, [r5]
    b6e0:	cmp	r6, r3
    b6e4:	bgt	b6fc <__assert_fail@plt+0x29a0>
    b6e8:	b	b740 <__assert_fail@plt+0x29e4>
    b6ec:	ldr	r3, [r4]
    b6f0:	cmp	r3, r6
    b6f4:	bge	b748 <__assert_fail@plt+0x29ec>
    b6f8:	mov	r5, r4
    b6fc:	ldr	r4, [r5, #12]
    b700:	cmp	r4, #0
    b704:	bne	b6ec <__assert_fail@plt+0x2990>
    b708:	mov	r4, #0
    b70c:	mov	r0, #16
    b710:	bl	93ec <__assert_fail@plt+0x690>
    b714:	cmp	r5, #0
    b718:	mov	r2, r0
    b71c:	ldm	r7, {r0, r1}
    b720:	mov	r3, r2
    b724:	str	r6, [r3], #4
    b728:	stm	r3, {r0, r1}
    b72c:	str	r4, [r2, #12]
    b730:	beq	b790 <__assert_fail@plt+0x2a34>
    b734:	str	r2, [r5, #12]
    b738:	add	sp, sp, #8
    b73c:	pop	{r4, r5, r6, r7, r8, pc}
    b740:	mov	r4, r5
    b744:	mov	r5, #0
    b748:	cmp	r6, r3
    b74c:	bne	b70c <__assert_fail@plt+0x29b0>
    b750:	ldr	r3, [r4, #4]
    b754:	cmp	r3, #1
    b758:	beq	b7a4 <__assert_fail@plt+0x2a48>
    b75c:	cmp	r3, #2
    b760:	beq	b784 <__assert_fail@plt+0x2a28>
    b764:	movw	r0, #64584	; 0xfc48
    b768:	mov	r1, r8
    b76c:	movt	r0, #0
    b770:	bl	9478 <__assert_fail@plt+0x71c>
    b774:	ldm	r7, {r0, r1}
    b778:	stmib	r4, {r0, r1}
    b77c:	add	sp, sp, #8
    b780:	pop	{r4, r5, r6, r7, r8, pc}
    b784:	add	r0, r4, #8
    b788:	bl	c4e8 <__assert_fail@plt+0x378c>
    b78c:	b	b774 <__assert_fail@plt+0x2a18>
    b790:	mov	r0, r8
    b794:	mov	r1, r2
    b798:	add	sp, sp, #8
    b79c:	pop	{r4, r5, r6, r7, r8, lr}
    b7a0:	b	b658 <__assert_fail@plt+0x28fc>
    b7a4:	add	r0, r4, #8
    b7a8:	bl	c390 <__assert_fail@plt+0x3634>
    b7ac:	b	b774 <__assert_fail@plt+0x2a18>
    b7b0:	push	{r3, r4, r5, lr}
    b7b4:	mov	r5, r0
    b7b8:	mov	r0, r1
    b7bc:	mov	r4, r2
    b7c0:	bl	b63c <__assert_fail@plt+0x28e0>
    b7c4:	subs	r3, r0, #0
    b7c8:	beq	b7f4 <__assert_fail@plt+0x2a98>
    b7cc:	ldr	r1, [r3]
    b7d0:	cmp	r4, r1
    b7d4:	bgt	b7e8 <__assert_fail@plt+0x2a8c>
    b7d8:	b	b808 <__assert_fail@plt+0x2aac>
    b7dc:	ldr	r1, [r3]
    b7e0:	cmp	r1, r4
    b7e4:	bge	b808 <__assert_fail@plt+0x2aac>
    b7e8:	ldr	r3, [r3, #12]
    b7ec:	cmp	r3, #0
    b7f0:	bne	b7dc <__assert_fail@plt+0x2a80>
    b7f4:	mov	r0, r5
    b7f8:	mov	r1, #0
    b7fc:	bl	bde8 <__assert_fail@plt+0x308c>
    b800:	mov	r0, r5
    b804:	pop	{r3, r4, r5, pc}
    b808:	cmp	r1, r4
    b80c:	bne	b7f4 <__assert_fail@plt+0x2a98>
    b810:	mov	r0, r5
    b814:	ldmib	r3, {r1, r2}
    b818:	bl	95d8 <__assert_fail@plt+0x87c>
    b81c:	b	b800 <__assert_fail@plt+0x2aa4>
    b820:	push	{r3, r4, r5, lr}
    b824:	subs	r4, r0, #0
    b828:	bne	b848 <__assert_fail@plt+0x2aec>
    b82c:	pop	{r3, r4, r5, pc}
    b830:	bl	9478 <__assert_fail@plt+0x71c>
    b834:	mov	r0, r4
    b838:	mov	r4, r5
    b83c:	bl	8ba0 <free@plt>
    b840:	cmp	r5, #0
    b844:	beq	b884 <__assert_fail@plt+0x2b28>
    b848:	ldr	r3, [r4, #4]
    b84c:	movw	r0, #64432	; 0xfbb0
    b850:	mvn	r1, #0
    b854:	movt	r0, #0
    b858:	cmp	r3, #1
    b85c:	ldr	r5, [r4, #12]
    b860:	beq	b878 <__assert_fail@plt+0x2b1c>
    b864:	cmp	r3, #2
    b868:	bne	b830 <__assert_fail@plt+0x2ad4>
    b86c:	add	r0, r4, #8
    b870:	bl	c4e8 <__assert_fail@plt+0x378c>
    b874:	b	b834 <__assert_fail@plt+0x2ad8>
    b878:	add	r0, r4, #8
    b87c:	bl	c390 <__assert_fail@plt+0x3634>
    b880:	b	b834 <__assert_fail@plt+0x2ad8>
    b884:	pop	{r3, r4, r5, pc}
    b888:	push	{r4, r5, r6, r7, r8, lr}
    b88c:	movw	r4, #37072	; 0x90d0
    b890:	movt	r4, #1
    b894:	sub	sp, sp, #8
    b898:	subs	r7, r0, #0
    b89c:	ldr	r3, [r4]
    b8a0:	str	r3, [sp, #4]
    b8a4:	beq	b93c <__assert_fail@plt+0x2be0>
    b8a8:	movw	r5, #37064	; 0x90c8
    b8ac:	movt	r5, #1
    b8b0:	ldr	r3, [r5]
    b8b4:	cmp	r3, #0
    b8b8:	movge	r0, r3
    b8bc:	blt	b94c <__assert_fail@plt+0x2bf0>
    b8c0:	movw	r5, #38168	; 0x9518
    b8c4:	movt	r5, #1
    b8c8:	ldr	r3, [r5]
    b8cc:	add	r3, r3, #1
    b8d0:	str	r3, [r5]
    b8d4:	cmp	r3, r0
    b8d8:	bge	b908 <__assert_fail@plt+0x2bac>
    b8dc:	movw	r6, #37100	; 0x90ec
    b8e0:	movt	r6, #1
    b8e4:	mov	r0, r7
    b8e8:	ldr	r1, [r6]
    b8ec:	bl	8c00 <_IO_putc@plt>
    b8f0:	ldr	r2, [sp, #4]
    b8f4:	ldr	r3, [r4]
    b8f8:	cmp	r2, r3
    b8fc:	bne	b9ec <__assert_fail@plt+0x2c90>
    b900:	add	sp, sp, #8
    b904:	pop	{r4, r5, r6, r7, r8, pc}
    b908:	cmp	r0, #0
    b90c:	beq	b8dc <__assert_fail@plt+0x2b80>
    b910:	movw	r6, #37100	; 0x90ec
    b914:	movt	r6, #1
    b918:	mov	r0, #92	; 0x5c
    b91c:	ldr	r1, [r6]
    b920:	bl	8c00 <_IO_putc@plt>
    b924:	ldr	r1, [r6]
    b928:	mov	r0, #10
    b92c:	bl	8c00 <_IO_putc@plt>
    b930:	mov	r3, #1
    b934:	str	r3, [r5]
    b938:	b	b8e4 <__assert_fail@plt+0x2b88>
    b93c:	movw	r3, #38168	; 0x9518
    b940:	movt	r3, #1
    b944:	str	r7, [r3]
    b948:	b	b8f0 <__assert_fail@plt+0x2b94>
    b94c:	movw	r0, #64596	; 0xfc54
    b950:	movt	r0, #0
    b954:	bl	8c18 <getenv@plt>
    b958:	mov	r3, #70	; 0x46
    b95c:	str	r3, [r5]
    b960:	mov	r6, r0
    b964:	bl	8cc0 <__errno_location@plt>
    b968:	cmp	r6, #0
    b96c:	mov	r2, #0
    b970:	mov	r8, r0
    b974:	str	r2, [r0]
    b978:	beq	b9f0 <__assert_fail@plt+0x2c94>
    b97c:	mov	r0, r6
    b980:	mov	r1, sp
    b984:	bl	8b7c <strtol@plt>
    b988:	mov	r6, r0
    b98c:	str	r0, [r5]
    b990:	bl	8c84 <__ctype_b_loc@plt>
    b994:	ldr	r3, [sp]
    b998:	ldr	ip, [r0]
    b99c:	b	b9a4 <__assert_fail@plt+0x2c48>
    b9a0:	str	r3, [sp]
    b9a4:	ldrb	r2, [r3], #1
    b9a8:	lsl	r1, r2, #1
    b9ac:	ldrh	r1, [ip, r1]
    b9b0:	tst	r1, #8192	; 0x2000
    b9b4:	bne	b9a0 <__assert_fail@plt+0x2c44>
    b9b8:	cmp	r2, #0
    b9bc:	bne	b9e0 <__assert_fail@plt+0x2c84>
    b9c0:	ldr	r3, [r8]
    b9c4:	cmp	r3, #0
    b9c8:	bne	b9e0 <__assert_fail@plt+0x2c84>
    b9cc:	cmp	r6, #0
    b9d0:	blt	b9e0 <__assert_fail@plt+0x2c84>
    b9d4:	cmp	r6, #1
    b9d8:	movne	r0, r6
    b9dc:	bne	b8c0 <__assert_fail@plt+0x2b64>
    b9e0:	mov	r0, #70	; 0x46
    b9e4:	str	r0, [r5]
    b9e8:	b	b8c0 <__assert_fail@plt+0x2b64>
    b9ec:	bl	8bdc <__stack_chk_fail@plt>
    b9f0:	movw	r5, #38168	; 0x9518
    b9f4:	movt	r5, #1
    b9f8:	ldr	r3, [r5]
    b9fc:	add	r3, r3, #1
    ba00:	str	r3, [r5]
    ba04:	cmp	r3, #69	; 0x45
    ba08:	bgt	b910 <__assert_fail@plt+0x2bb4>
    ba0c:	b	b8dc <__assert_fail@plt+0x2b80>
    ba10:	push	{r4, r5, r6, lr}
    ba14:	mov	r4, r3
    ba18:	mov	r5, r0
    ba1c:	mov	r6, r1
    ba20:	mov	r0, r3
    ba24:	bl	d0e0 <__assert_fail@plt+0x4384>
    ba28:	mov	r0, r5
    ba2c:	mov	r1, r6
    ba30:	mov	r2, r4
    ba34:	mov	r3, #0
    ba38:	bl	d940 <__assert_fail@plt+0x4be4>
    ba3c:	mov	r0, #0
    ba40:	pop	{r4, r5, r6, pc}
    ba44:	push	{r4, r5, r6, lr}
    ba48:	mov	r4, r3
    ba4c:	mov	r5, r0
    ba50:	mov	r6, r1
    ba54:	mov	r0, r3
    ba58:	bl	d0e0 <__assert_fail@plt+0x4384>
    ba5c:	mov	r0, r5
    ba60:	mov	r1, r6
    ba64:	mov	r2, r4
    ba68:	mov	r3, #0
    ba6c:	bl	d224 <__assert_fail@plt+0x44c8>
    ba70:	mov	r0, #0
    ba74:	pop	{r4, r5, r6, pc}
    ba78:	push	{r3, r4, r5, r6, r7, lr}
    ba7c:	mov	r4, r3
    ba80:	mov	r5, r2
    ba84:	mov	r6, r0
    ba88:	mov	r7, r1
    ba8c:	mov	r0, r3
    ba90:	bl	d0e0 <__assert_fail@plt+0x4384>
    ba94:	mov	r0, r6
    ba98:	mov	r1, r7
    ba9c:	mov	r2, r4
    baa0:	mov	r3, r5
    baa4:	bl	da28 <__assert_fail@plt+0x4ccc>
    baa8:	mov	r0, #0
    baac:	pop	{r3, r4, r5, r6, r7, pc}
    bab0:	push	{r3, r4, r5, r6, r7, lr}
    bab4:	mov	r4, r3
    bab8:	mov	r5, r2
    babc:	mov	r6, r0
    bac0:	mov	r7, r1
    bac4:	mov	r0, r3
    bac8:	bl	d0e0 <__assert_fail@plt+0x4384>
    bacc:	mov	r0, r6
    bad0:	mov	r1, r7
    bad4:	mov	r2, r4
    bad8:	mov	r3, r5
    badc:	bl	db54 <__assert_fail@plt+0x4df8>
    bae0:	cmp	r0, #0
    bae4:	popeq	{r3, r4, r5, r6, r7, pc}
    bae8:	movw	r0, #37088	; 0x90e0
    baec:	movw	r3, #38188	; 0x952c
    baf0:	movt	r0, #1
    baf4:	movt	r3, #1
    baf8:	mov	r1, #1
    bafc:	movw	r2, #64612	; 0xfc64
    bb00:	ldr	r3, [r3]
    bb04:	movt	r2, #0
    bb08:	ldr	r0, [r0]
    bb0c:	bl	8d14 <__fprintf_chk@plt>
    bb10:	mov	r0, #1
    bb14:	pop	{r3, r4, r5, r6, r7, pc}
    bb18:	push	{r4, r5, r6, r7, r8, lr}
    bb1c:	sub	sp, sp, #8
    bb20:	mov	r6, r0
    bb24:	mov	r0, r3
    bb28:	ldr	r4, [sp, #32]
    bb2c:	mov	r5, r3
    bb30:	mov	r8, r2
    bb34:	mov	r7, r1
    bb38:	bl	d0e0 <__assert_fail@plt+0x4384>
    bb3c:	mov	r0, r4
    bb40:	bl	d0e0 <__assert_fail@plt+0x4384>
    bb44:	str	r8, [sp]
    bb48:	mov	r0, r6
    bb4c:	mov	r1, r7
    bb50:	mov	r2, r5
    bb54:	mov	r3, r4
    bb58:	bl	e134 <__assert_fail@plt+0x53d8>
    bb5c:	cmp	r0, #0
    bb60:	beq	bb90 <__assert_fail@plt+0x2e34>
    bb64:	movw	r0, #37088	; 0x90e0
    bb68:	movw	r3, #38188	; 0x952c
    bb6c:	movt	r0, #1
    bb70:	movt	r3, #1
    bb74:	movw	r2, #64612	; 0xfc64
    bb78:	mov	r1, #1
    bb7c:	ldr	r0, [r0]
    bb80:	movt	r2, #0
    bb84:	ldr	r3, [r3]
    bb88:	bl	8d14 <__fprintf_chk@plt>
    bb8c:	mov	r0, #1
    bb90:	add	sp, sp, #8
    bb94:	pop	{r4, r5, r6, r7, r8, pc}
    bb98:	push	{r3, r4, r5, r6, r7, lr}
    bb9c:	mov	r4, r3
    bba0:	mov	r5, r2
    bba4:	mov	r6, r0
    bba8:	mov	r7, r1
    bbac:	mov	r0, r3
    bbb0:	bl	d0e0 <__assert_fail@plt+0x4384>
    bbb4:	mov	r0, r6
    bbb8:	mov	r1, r7
    bbbc:	mov	r2, r4
    bbc0:	mov	r3, r5
    bbc4:	bl	e274 <__assert_fail@plt+0x5518>
    bbc8:	cmp	r0, #0
    bbcc:	popeq	{r3, r4, r5, r6, r7, pc}
    bbd0:	movw	r0, #37088	; 0x90e0
    bbd4:	movw	r3, #38188	; 0x952c
    bbd8:	movt	r0, #1
    bbdc:	movt	r3, #1
    bbe0:	mov	r1, #1
    bbe4:	movw	r2, #64632	; 0xfc78
    bbe8:	ldr	r3, [r3]
    bbec:	movt	r2, #0
    bbf0:	ldr	r0, [r0]
    bbf4:	bl	8d14 <__fprintf_chk@plt>
    bbf8:	mov	r0, #1
    bbfc:	pop	{r3, r4, r5, r6, r7, pc}
    bc00:	push	{r4, r5, r6, r7, r8, lr}
    bc04:	sub	sp, sp, #8
    bc08:	mov	r6, r0
    bc0c:	mov	r7, r1
    bc10:	ldr	r4, [sp, #32]
    bc14:	mov	r5, r2
    bc18:	mov	r8, r3
    bc1c:	mov	r0, r4
    bc20:	bl	d0e0 <__assert_fail@plt+0x4384>
    bc24:	str	r8, [sp]
    bc28:	mov	r0, r6
    bc2c:	mov	r1, r7
    bc30:	mov	r3, r4
    bc34:	mov	r2, r5
    bc38:	bl	e298 <__assert_fail@plt+0x553c>
    bc3c:	cmp	r0, #0
    bc40:	bne	bc4c <__assert_fail@plt+0x2ef0>
    bc44:	add	sp, sp, #8
    bc48:	pop	{r4, r5, r6, r7, r8, pc}
    bc4c:	mov	r0, r5
    bc50:	bl	d13c <__assert_fail@plt+0x43e0>
    bc54:	cmp	r0, #0
    bc58:	moveq	r0, #1
    bc5c:	beq	bc44 <__assert_fail@plt+0x2ee8>
    bc60:	movw	r0, #37088	; 0x90e0
    bc64:	movw	r3, #38188	; 0x952c
    bc68:	movt	r0, #1
    bc6c:	movt	r3, #1
    bc70:	mov	r1, #1
    bc74:	movw	r2, #64632	; 0xfc78
    bc78:	ldr	r3, [r3]
    bc7c:	movt	r2, #0
    bc80:	ldr	r0, [r0]
    bc84:	bl	8d14 <__fprintf_chk@plt>
    bc88:	mov	r0, #1
    bc8c:	add	sp, sp, #8
    bc90:	pop	{r4, r5, r6, r7, r8, pc}
    bc94:	push	{r3, r4, r5, r6, r7, lr}
    bc98:	mov	r4, r3
    bc9c:	mov	r5, r2
    bca0:	mov	r6, r0
    bca4:	mov	r7, r1
    bca8:	mov	r0, r3
    bcac:	bl	d0e0 <__assert_fail@plt+0x4384>
    bcb0:	mov	r0, r6
    bcb4:	mov	r1, r7
    bcb8:	mov	r2, r4
    bcbc:	mov	r3, r5
    bcc0:	bl	e5e4 <__assert_fail@plt+0x5888>
    bcc4:	mov	r0, #0
    bcc8:	pop	{r3, r4, r5, r6, r7, pc}
    bccc:	push	{r4, r5, r6, r7, lr}
    bcd0:	movw	r4, #37072	; 0x90d0
    bcd4:	movt	r4, #1
    bcd8:	sub	sp, sp, #12
    bcdc:	mov	r6, r1
    bce0:	mov	r7, r2
    bce4:	ldr	r3, [r4]
    bce8:	add	r5, sp, #8
    bcec:	str	r3, [sp, #4]
    bcf0:	bl	d0d0 <__assert_fail@plt+0x4374>
    bcf4:	mov	r1, r6
    bcf8:	str	r0, [r5, #-8]!
    bcfc:	mov	r0, sp
    bd00:	bl	e8dc <__assert_fail@plt+0x5b80>
    bd04:	cmp	r0, #0
    bd08:	beq	bd30 <__assert_fail@plt+0x2fd4>
    bd0c:	ldr	r3, [sp]
    bd10:	mov	r0, #0
    bd14:	str	r3, [r7]
    bd18:	ldr	r2, [sp, #4]
    bd1c:	ldr	r3, [r4]
    bd20:	cmp	r2, r3
    bd24:	bne	bd68 <__assert_fail@plt+0x300c>
    bd28:	add	sp, sp, #12
    bd2c:	pop	{r4, r5, r6, r7, pc}
    bd30:	movw	r0, #37088	; 0x90e0
    bd34:	movw	r3, #38188	; 0x952c
    bd38:	movt	r0, #1
    bd3c:	movt	r3, #1
    bd40:	mov	r1, #1
    bd44:	movw	r2, #64656	; 0xfc90
    bd48:	ldr	r3, [r3]
    bd4c:	movt	r2, #0
    bd50:	ldr	r0, [r0]
    bd54:	bl	8d14 <__fprintf_chk@plt>
    bd58:	mov	r0, sp
    bd5c:	bl	d004 <__assert_fail@plt+0x42a8>
    bd60:	mov	r0, #1
    bd64:	b	bd18 <__assert_fail@plt+0x2fbc>
    bd68:	bl	8bdc <__stack_chk_fail@plt>
    bd6c:	b	d100 <__assert_fail@plt+0x43a4>
    bd70:	push	{r4, r5, lr}
    bd74:	sub	sp, sp, #12
    bd78:	mov	r5, r1
    bd7c:	str	r0, [sp, #4]
    bd80:	bl	e570 <__assert_fail@plt+0x5814>
    bd84:	subs	r4, r0, #0
    bd88:	beq	bda8 <__assert_fail@plt+0x304c>
    bd8c:	cmp	r5, #0
    bd90:	bne	bd9c <__assert_fail@plt+0x3040>
    bd94:	add	r0, sp, #4
    bd98:	bl	d004 <__assert_fail@plt+0x42a8>
    bd9c:	mov	r0, r4
    bda0:	add	sp, sp, #12
    bda4:	pop	{r4, r5, pc}
    bda8:	ldr	r0, [sp, #4]
    bdac:	bl	d13c <__assert_fail@plt+0x43e0>
    bdb0:	cmp	r0, #0
    bdb4:	bne	bd8c <__assert_fail@plt+0x3030>
    bdb8:	movw	r0, #37088	; 0x90e0
    bdbc:	movw	r3, #38188	; 0x952c
    bdc0:	movt	r0, #1
    bdc4:	movt	r3, #1
    bdc8:	movw	r2, #64692	; 0xfcb4
    bdcc:	mov	r1, #1
    bdd0:	movt	r2, #0
    bdd4:	ldr	r3, [r3]
    bdd8:	ldr	r0, [r0]
    bddc:	mvn	r4, #0
    bde0:	bl	8d14 <__fprintf_chk@plt>
    bde4:	b	bd8c <__assert_fail@plt+0x3030>
    bde8:	push	{r4, r5, r6, r7, lr}
    bdec:	movw	r4, #37072	; 0x90d0
    bdf0:	movt	r4, #1
    bdf4:	sub	sp, sp, #20
    bdf8:	mov	r5, r0
    bdfc:	mov	r7, r1
    be00:	ldr	r3, [r4]
    be04:	add	r0, sp, #8
    be08:	add	r6, sp, #4
    be0c:	str	r3, [sp, #12]
    be10:	bl	d0e0 <__assert_fail@plt+0x4384>
    be14:	add	r0, sp, #8
    be18:	mov	r1, r7
    be1c:	bl	e7dc <__assert_fail@plt+0x5a80>
    be20:	ldr	r2, [sp, #12]
    be24:	ldr	r3, [r4]
    be28:	mov	r1, #1
    be2c:	str	r1, [sp, #4]
    be30:	ldm	r6, {r0, r1}
    be34:	cmp	r2, r3
    be38:	stm	r5, {r0, r1}
    be3c:	mov	r0, r5
    be40:	bne	be4c <__assert_fail@plt+0x30f0>
    be44:	add	sp, sp, #20
    be48:	pop	{r4, r5, r6, r7, pc}
    be4c:	bl	8bdc <__stack_chk_fail@plt>
    be50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be54:	movw	sl, #37072	; 0x90d0
    be58:	movt	sl, #1
    be5c:	sub	sp, sp, #44	; 0x2c
    be60:	mov	r8, r2
    be64:	mov	r9, r1
    be68:	ldr	ip, [sl]
    be6c:	movw	fp, #38200	; 0x9538
    be70:	str	r0, [sp, #4]
    be74:	add	r0, sp, #28
    be78:	str	r3, [sp, #8]
    be7c:	movt	fp, #1
    be80:	str	ip, [sp, #36]	; 0x24
    be84:	bl	d0e0 <__assert_fail@plt+0x4384>
    be88:	add	r0, sp, #24
    be8c:	bl	d0e0 <__assert_fail@plt+0x4384>
    be90:	add	r0, sp, #16
    be94:	bl	d0e0 <__assert_fail@plt+0x4384>
    be98:	ldr	r0, [fp]
    be9c:	bl	d0d0 <__assert_fail@plt+0x4374>
    bea0:	mov	r1, r8
    bea4:	str	r0, [sp, #20]
    bea8:	add	r0, sp, #16
    beac:	bl	e7dc <__assert_fail@plt+0x5a80>
    beb0:	blx	r9
    beb4:	mov	r4, r0
    beb8:	bl	8c84 <__ctype_b_loc@plt>
    bebc:	mov	r6, r0
    bec0:	mov	r0, r4
    bec4:	b	becc <__assert_fail@plt+0x3170>
    bec8:	blx	r9
    becc:	ldr	r2, [r6]
    bed0:	lsl	r3, r0, #1
    bed4:	ldrh	r2, [r2, r3]
    bed8:	tst	r2, #8192	; 0x2000
    bedc:	bne	bec8 <__assert_fail@plt+0x316c>
    bee0:	cmp	r0, #95	; 0x5f
    bee4:	cmpne	r0, #45	; 0x2d
    bee8:	mov	r4, r0
    beec:	movne	r2, #0
    bef0:	moveq	r2, #1
    bef4:	beq	c068 <__assert_fail@plt+0x330c>
    bef8:	cmp	r0, #43	; 0x2b
    befc:	str	r2, [sp, #12]
    bf00:	beq	bfd0 <__assert_fail@plt+0x3274>
    bf04:	str	r3, [sp]
    bf08:	blx	r9
    bf0c:	ldr	r2, [r6]
    bf10:	ldr	r3, [sp]
    bf14:	lsl	r1, r0, #1
    bf18:	mov	r5, r0
    bf1c:	ldrh	r1, [r2, r1]
    bf20:	tst	r1, #2048	; 0x800
    bf24:	bne	bf34 <__assert_fail@plt+0x31d8>
    bf28:	sub	r1, r0, #65	; 0x41
    bf2c:	cmp	r1, #5
    bf30:	bhi	c058 <__assert_fail@plt+0x32fc>
    bf34:	mov	r7, #1
    bf38:	mov	r0, r4
    bf3c:	b	bf50 <__assert_fail@plt+0x31f4>
    bf40:	ldr	r2, [r6]
    bf44:	mov	r0, r5
    bf48:	lsl	r3, r5, #1
    bf4c:	mov	r5, #0
    bf50:	ldrh	r3, [r2, r3]
    bf54:	and	r3, r3, #2048	; 0x800
    bf58:	uxth	r3, r3
    bf5c:	cmp	r3, #0
    bf60:	subne	r1, r0, #48	; 0x30
    bf64:	bne	bf78 <__assert_fail@plt+0x321c>
    bf68:	sub	r2, r0, #65	; 0x41
    bf6c:	cmp	r2, #5
    bf70:	bhi	bff0 <__assert_fail@plt+0x3294>
    bf74:	sub	r1, r0, #55	; 0x37
    bf78:	cmp	r7, #0
    bf7c:	beq	bf88 <__assert_fail@plt+0x322c>
    bf80:	cmp	r1, r8
    bf84:	subge	r1, r8, #1
    bf88:	add	r0, sp, #28
    bf8c:	bl	e7dc <__assert_fail@plt+0x5a80>
    bf90:	ldr	r0, [sp, #20]
    bf94:	ldr	r1, [sp, #16]
    bf98:	add	r2, sp, #20
    bf9c:	mov	r3, #0
    bfa0:	bl	da28 <__assert_fail@plt+0x4ccc>
    bfa4:	ldr	r0, [sp, #20]
    bfa8:	ldr	r1, [sp, #28]
    bfac:	add	r2, sp, #20
    bfb0:	mov	r3, #0
    bfb4:	bl	d940 <__assert_fail@plt+0x4be4>
    bfb8:	cmp	r5, #0
    bfbc:	bne	bf40 <__assert_fail@plt+0x31e4>
    bfc0:	blx	r9
    bfc4:	ldr	r2, [r6]
    bfc8:	lsl	r3, r0, #1
    bfcc:	b	bf50 <__assert_fail@plt+0x31f4>
    bfd0:	blx	r9
    bfd4:	ldr	r2, [r6]
    bfd8:	lsl	r3, r0, #1
    bfdc:	ldrh	r2, [r2, r3]
    bfe0:	tst	r2, #8192	; 0x2000
    bfe4:	bne	bfd0 <__assert_fail@plt+0x3274>
    bfe8:	mov	r4, r0
    bfec:	b	bf04 <__assert_fail@plt+0x31a8>
    bff0:	cmp	r0, #46	; 0x2e
    bff4:	mov	r4, r0
    bff8:	beq	c08c <__assert_fail@plt+0x3330>
    bffc:	ldr	r1, [sp, #12]
    c000:	cmp	r1, #0
    c004:	bne	c074 <__assert_fail@plt+0x3318>
    c008:	add	r0, sp, #28
    c00c:	bl	d004 <__assert_fail@plt+0x42a8>
    c010:	add	r0, sp, #24
    c014:	bl	d004 <__assert_fail@plt+0x42a8>
    c018:	add	r0, sp, #16
    c01c:	bl	d004 <__assert_fail@plt+0x42a8>
    c020:	ldr	r2, [sp, #8]
    c024:	ldr	ip, [sp, #36]	; 0x24
    c028:	ldr	r1, [sl]
    c02c:	cmp	r2, #0
    c030:	ldr	r0, [sp, #4]
    c034:	ldr	r3, [sp, #20]
    c038:	strne	r4, [r2]
    c03c:	cmp	ip, r1
    c040:	mov	r2, #1
    c044:	str	r2, [r0]
    c048:	str	r3, [r0, #4]
    c04c:	bne	c180 <__assert_fail@plt+0x3424>
    c050:	add	sp, sp, #44	; 0x2c
    c054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c058:	subs	r1, r0, #46	; 0x2e
    c05c:	rsbs	r7, r1, #0
    c060:	adcs	r7, r7, r1
    c064:	b	bf38 <__assert_fail@plt+0x31dc>
    c068:	str	r0, [sp, #12]
    c06c:	blx	r9
    c070:	b	bfd4 <__assert_fail@plt+0x3278>
    c074:	add	r2, sp, #40	; 0x28
    c078:	ldr	r0, [fp]
    c07c:	mov	r3, #0
    c080:	ldr	r1, [r2, #-20]!	; 0xffffffec
    c084:	bl	d224 <__assert_fail@plt+0x44c8>
    c088:	b	c008 <__assert_fail@plt+0x32ac>
    c08c:	add	r0, sp, #24
    c090:	mov	r7, r3
    c094:	bl	d004 <__assert_fail@plt+0x42a8>
    c098:	add	r0, sp, #28
    c09c:	bl	d004 <__assert_fail@plt+0x42a8>
    c0a0:	movw	r3, #38192	; 0x9530
    c0a4:	movt	r3, #1
    c0a8:	ldr	r0, [r3]
    c0ac:	bl	d0d0 <__assert_fail@plt+0x4374>
    c0b0:	str	r0, [sp, #32]
    c0b4:	ldr	r0, [fp]
    c0b8:	bl	d0d0 <__assert_fail@plt+0x4374>
    c0bc:	subs	r4, r5, #0
    c0c0:	str	r0, [sp, #24]
    c0c4:	beq	c148 <__assert_fail@plt+0x33ec>
    c0c8:	ldr	r3, [r6]
    c0cc:	add	r3, r3, r4, lsl #1
    c0d0:	ldrh	r5, [r3]
    c0d4:	and	r5, r5, #2048	; 0x800
    c0d8:	uxth	r5, r5
    c0dc:	cmp	r5, #0
    c0e0:	subne	r1, r4, #48	; 0x30
    c0e4:	bne	c0f8 <__assert_fail@plt+0x339c>
    c0e8:	sub	r3, r4, #65	; 0x41
    c0ec:	cmp	r3, #5
    c0f0:	bhi	c154 <__assert_fail@plt+0x33f8>
    c0f4:	sub	r1, r4, #55	; 0x37
    c0f8:	cmp	r1, r8
    c0fc:	add	r0, sp, #28
    c100:	subge	r1, r8, #1
    c104:	add	r7, r7, #1
    c108:	bl	e7dc <__assert_fail@plt+0x5a80>
    c10c:	ldr	r0, [sp, #24]
    c110:	ldr	r1, [sp, #16]
    c114:	add	r2, sp, #24
    c118:	mov	r3, #0
    c11c:	bl	da28 <__assert_fail@plt+0x4ccc>
    c120:	ldr	r0, [sp, #24]
    c124:	ldr	r1, [sp, #28]
    c128:	add	r2, sp, #24
    c12c:	mov	r3, #0
    c130:	bl	d940 <__assert_fail@plt+0x4be4>
    c134:	ldr	r0, [sp, #32]
    c138:	ldr	r1, [sp, #16]
    c13c:	add	r2, sp, #32
    c140:	mov	r3, #0
    c144:	bl	da28 <__assert_fail@plt+0x4ccc>
    c148:	blx	r9
    c14c:	mov	r4, r0
    c150:	b	c0c8 <__assert_fail@plt+0x336c>
    c154:	mov	r3, r7
    c158:	ldr	r1, [sp, #32]
    c15c:	add	r2, sp, #24
    c160:	ldr	r0, [sp, #24]
    c164:	bl	db54 <__assert_fail@plt+0x4df8>
    c168:	mov	r3, r5
    c16c:	ldr	r0, [sp, #20]
    c170:	add	r2, sp, #20
    c174:	ldr	r1, [sp, #24]
    c178:	bl	d940 <__assert_fail@plt+0x4be4>
    c17c:	b	bffc <__assert_fail@plt+0x32a0>
    c180:	bl	8bdc <__stack_chk_fail@plt>
    c184:	ldmib	r0, {r1, r2}
    c188:	ldr	r3, [r0, #24]
    c18c:	add	r0, r1, r2
    c190:	cmp	r0, #1
    c194:	bxle	lr
    c198:	ldrb	r2, [r3]
    c19c:	cmp	r2, #0
    c1a0:	bxne	lr
    c1a4:	sub	r0, r0, #1
    c1a8:	cmp	r0, #1
    c1ac:	bxeq	lr
    c1b0:	ldrb	r2, [r3, #1]!
    c1b4:	cmp	r2, #0
    c1b8:	beq	c1a4 <__assert_fail@plt+0x3448>
    c1bc:	bx	lr
    c1c0:	push	{r4, lr}
    c1c4:	cmp	r1, #0
    c1c8:	sub	sp, sp, #8
    c1cc:	ldr	r4, [r0, #8]
    c1d0:	str	r0, [sp, #4]
    c1d4:	bne	c1e0 <__assert_fail@plt+0x3484>
    c1d8:	add	r0, sp, #4
    c1dc:	bl	d004 <__assert_fail@plt+0x42a8>
    c1e0:	mov	r0, r4
    c1e4:	add	sp, sp, #8
    c1e8:	pop	{r4, pc}
    c1ec:	b	d064 <__assert_fail@plt+0x4308>
    c1f0:	push	{r4, r5, lr}
    c1f4:	movw	ip, #38168	; 0x9518
    c1f8:	mov	lr, #0
    c1fc:	sub	sp, sp, #12
    c200:	movt	ip, #1
    c204:	mov	r5, r2
    c208:	mov	r4, r3
    c20c:	movw	r2, #47240	; 0xb888
    c210:	mov	r3, lr
    c214:	movt	r2, #0
    c218:	str	r0, [sp, #4]
    c21c:	str	lr, [ip]
    c220:	bl	ebac <__assert_fail@plt+0x5e50>
    c224:	cmp	r5, #1
    c228:	beq	c244 <__assert_fail@plt+0x34e8>
    c22c:	cmp	r4, #0
    c230:	bne	c23c <__assert_fail@plt+0x34e0>
    c234:	add	r0, sp, #4
    c238:	bl	d004 <__assert_fail@plt+0x42a8>
    c23c:	add	sp, sp, #12
    c240:	pop	{r4, r5, pc}
    c244:	movw	r3, #37100	; 0x90ec
    c248:	movt	r3, #1
    c24c:	mov	r0, #10
    c250:	ldr	r1, [r3]
    c254:	bl	8c00 <_IO_putc@plt>
    c258:	b	c22c <__assert_fail@plt+0x34d0>
    c25c:	push	{r4, r5, r6, r7, lr}
    c260:	movw	r7, #37072	; 0x90d0
    c264:	movt	r7, #1
    c268:	sub	sp, sp, #36	; 0x24
    c26c:	mov	r4, r1
    c270:	ldr	r3, [r7]
    c274:	str	r0, [sp, #12]
    c278:	add	r0, sp, #16
    c27c:	str	r3, [sp, #28]
    c280:	bl	d0e0 <__assert_fail@plt+0x4384>
    c284:	add	r0, sp, #20
    c288:	bl	d0e0 <__assert_fail@plt+0x4384>
    c28c:	add	r0, sp, #24
    c290:	bl	d0e0 <__assert_fail@plt+0x4384>
    c294:	movw	ip, #38192	; 0x9530
    c298:	movt	ip, #1
    c29c:	add	r2, sp, #16
    c2a0:	mov	r3, #0
    c2a4:	ldr	r0, [sp, #12]
    c2a8:	ldr	r1, [ip]
    c2ac:	bl	db54 <__assert_fail@plt+0x4df8>
    c2b0:	ldr	r3, [sp, #16]
    c2b4:	cmp	r4, #0
    c2b8:	mov	r2, #0
    c2bc:	str	r2, [r3]
    c2c0:	beq	c380 <__assert_fail@plt+0x3624>
    c2c4:	add	r0, sp, #20
    c2c8:	mov	r1, #256	; 0x100
    c2cc:	mov	r5, #0
    c2d0:	bl	e7dc <__assert_fail@plt+0x5a80>
    c2d4:	mov	r6, r5
    c2d8:	b	c2e0 <__assert_fail@plt+0x3584>
    c2dc:	mov	r5, r4
    c2e0:	add	r2, sp, #16
    c2e4:	ldr	r1, [sp, #20]
    c2e8:	add	r3, sp, #24
    c2ec:	ldr	r0, [sp, #16]
    c2f0:	str	r6, [sp]
    c2f4:	bl	e134 <__assert_fail@plt+0x53d8>
    c2f8:	mov	r0, #8
    c2fc:	bl	93ec <__assert_fail@plt+0x690>
    c300:	mov	r4, r0
    c304:	ldr	r0, [sp, #24]
    c308:	bl	e570 <__assert_fail@plt+0x5814>
    c30c:	stm	r4, {r0, r5}
    c310:	ldr	r0, [sp, #16]
    c314:	bl	d13c <__assert_fail@plt+0x43e0>
    c318:	cmp	r0, #0
    c31c:	beq	c2dc <__assert_fail@plt+0x3580>
    c320:	movw	r6, #37100	; 0x90ec
    c324:	movt	r6, #1
    c328:	b	c330 <__assert_fail@plt+0x35d4>
    c32c:	mov	r4, r5
    c330:	ldr	r1, [r6]
    c334:	ldr	r0, [r4]
    c338:	bl	8c00 <_IO_putc@plt>
    c33c:	ldr	r5, [r4, #4]
    c340:	mov	r0, r4
    c344:	bl	8ba0 <free@plt>
    c348:	cmp	r5, #0
    c34c:	bne	c32c <__assert_fail@plt+0x35d0>
    c350:	add	r0, sp, #24
    c354:	bl	d004 <__assert_fail@plt+0x42a8>
    c358:	add	r0, sp, #20
    c35c:	bl	d004 <__assert_fail@plt+0x42a8>
    c360:	add	r0, sp, #16
    c364:	bl	d004 <__assert_fail@plt+0x42a8>
    c368:	ldr	r2, [sp, #28]
    c36c:	ldr	r3, [r7]
    c370:	cmp	r2, r3
    c374:	bne	c38c <__assert_fail@plt+0x3630>
    c378:	add	sp, sp, #36	; 0x24
    c37c:	pop	{r4, r5, r6, r7, pc}
    c380:	add	r0, sp, #12
    c384:	bl	d004 <__assert_fail@plt+0x42a8>
    c388:	b	c2c4 <__assert_fail@plt+0x3568>
    c38c:	bl	8bdc <__stack_chk_fail@plt>
    c390:	b	d004 <__assert_fail@plt+0x42a8>
    c394:	ldr	r2, [r1, #12]
    c398:	mov	ip, #1
    c39c:	str	r1, [r0, #4]
    c3a0:	add	r2, r2, ip
    c3a4:	str	ip, [r0]
    c3a8:	str	r2, [r1, #12]
    c3ac:	bx	lr
    c3b0:	b	93b8 <__assert_fail@plt+0x65c>
    c3b4:	push	{r0, r1, r2, r3}
    c3b8:	mov	r1, #1
    c3bc:	push	{r4, r5, r6, lr}
    c3c0:	movw	r5, #37072	; 0x90d0
    c3c4:	movt	r5, #1
    c3c8:	sub	sp, sp, #8
    c3cc:	movw	r4, #37088	; 0x90e0
    c3d0:	movt	r4, #1
    c3d4:	ldr	ip, [r5]
    c3d8:	mov	r2, #15
    c3dc:	ldr	r3, [r4]
    c3e0:	movw	r0, #64740	; 0xfce4
    c3e4:	ldr	r6, [sp, #24]
    c3e8:	movt	r0, #0
    c3ec:	str	ip, [sp, #4]
    c3f0:	bl	8c0c <fwrite@plt>
    c3f4:	add	ip, sp, #28
    c3f8:	mov	r1, #1
    c3fc:	mov	r2, r6
    c400:	ldr	r0, [r4]
    c404:	mov	r3, ip
    c408:	str	ip, [sp]
    c40c:	bl	8c60 <__vfprintf_chk@plt>
    c410:	ldr	r1, [r4]
    c414:	mov	r0, #10
    c418:	bl	8d44 <fputc@plt>
    c41c:	ldr	r2, [sp, #4]
    c420:	ldr	r3, [r5]
    c424:	cmp	r2, r3
    c428:	bne	c43c <__assert_fail@plt+0x36e0>
    c42c:	add	sp, sp, #8
    c430:	pop	{r4, r5, r6, lr}
    c434:	add	sp, sp, #16
    c438:	bx	lr
    c43c:	bl	8bdc <__stack_chk_fail@plt>
    c440:	push	{r0, r1, r2, r3}
    c444:	mov	r1, #1
    c448:	push	{r4, r5, r6, lr}
    c44c:	movw	r5, #37072	; 0x90d0
    c450:	movt	r5, #1
    c454:	sub	sp, sp, #8
    c458:	movw	r4, #37088	; 0x90e0
    c45c:	movt	r4, #1
    c460:	ldr	ip, [r5]
    c464:	mov	r2, #17
    c468:	ldr	r3, [r4]
    c46c:	movw	r0, #64756	; 0xfcf4
    c470:	ldr	r6, [sp, #24]
    c474:	movt	r0, #0
    c478:	str	ip, [sp, #4]
    c47c:	bl	8c0c <fwrite@plt>
    c480:	add	ip, sp, #28
    c484:	mov	r1, #1
    c488:	mov	r2, r6
    c48c:	ldr	r0, [r4]
    c490:	mov	r3, ip
    c494:	str	ip, [sp]
    c498:	bl	8c60 <__vfprintf_chk@plt>
    c49c:	ldr	r1, [r4]
    c4a0:	mov	r0, #10
    c4a4:	bl	8d44 <fputc@plt>
    c4a8:	ldr	r2, [sp, #4]
    c4ac:	ldr	r3, [r5]
    c4b0:	cmp	r2, r3
    c4b4:	bne	c4c8 <__assert_fail@plt+0x376c>
    c4b8:	add	sp, sp, #8
    c4bc:	pop	{r4, r5, r6, lr}
    c4c0:	add	sp, sp, #16
    c4c4:	bx	lr
    c4c8:	bl	8bdc <__stack_chk_fail@plt>
    c4cc:	ldr	r2, [r1, #8]
    c4d0:	mov	ip, #2
    c4d4:	str	r1, [r0, #4]
    c4d8:	add	r2, r2, #1
    c4dc:	str	ip, [r0]
    c4e0:	str	r2, [r1, #8]
    c4e4:	bx	lr
    c4e8:	push	{r4, lr}
    c4ec:	ldr	r4, [r0]
    c4f0:	ldr	r3, [r4, #8]
    c4f4:	sub	r3, r3, #1
    c4f8:	str	r3, [r4, #8]
    c4fc:	cmp	r3, #0
    c500:	popgt	{r4, pc}
    c504:	ldr	r0, [r4]
    c508:	bl	8ba0 <free@plt>
    c50c:	mov	r0, r4
    c510:	pop	{r4, lr}
    c514:	b	8ba0 <free@plt>
    c518:	push	{r4, r5, r6, lr}
    c51c:	movw	r4, #37100	; 0x90ec
    c520:	sub	sp, sp, #8
    c524:	movt	r4, #1
    c528:	mov	r6, r1
    c52c:	mov	r5, r2
    c530:	str	r0, [sp, #4]
    c534:	mov	r2, #1
    c538:	ldr	r3, [r4]
    c53c:	ldm	r0, {r0, r1}
    c540:	bl	8c0c <fwrite@plt>
    c544:	cmp	r6, #1
    c548:	beq	c564 <__assert_fail@plt+0x3808>
    c54c:	cmp	r5, #0
    c550:	bne	c55c <__assert_fail@plt+0x3800>
    c554:	add	r0, sp, #4
    c558:	bl	c4e8 <__assert_fail@plt+0x378c>
    c55c:	add	sp, sp, #8
    c560:	pop	{r4, r5, r6, pc}
    c564:	ldr	r1, [r4]
    c568:	mov	r0, #10
    c56c:	bl	8c00 <_IO_putc@plt>
    c570:	b	c54c <__assert_fail@plt+0x37f0>
    c574:	push	{r3, r4, r5, r6, r7, lr}
    c578:	mov	r6, r0
    c57c:	mov	r0, #12
    c580:	mov	r5, r2
    c584:	mov	r7, r1
    c588:	bl	93ec <__assert_fail@plt+0x690>
    c58c:	mov	r4, r0
    c590:	add	r0, r5, #1
    c594:	bl	93ec <__assert_fail@plt+0x690>
    c598:	mov	r1, r7
    c59c:	mov	r2, r5
    c5a0:	str	r0, [r4]
    c5a4:	bl	8bb8 <memcpy@plt>
    c5a8:	ldr	r1, [r4]
    c5ac:	mov	r0, #0
    c5b0:	mov	r2, #1
    c5b4:	mov	r3, #2
    c5b8:	str	r4, [r6, #4]
    c5bc:	strb	r0, [r1, r5]
    c5c0:	mov	r0, r6
    c5c4:	str	r5, [r4, #4]
    c5c8:	str	r2, [r4, #8]
    c5cc:	str	r3, [r6]
    c5d0:	pop	{r3, r4, r5, r6, r7, pc}
    c5d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5d8:	movw	r4, #38176	; 0x9520
    c5dc:	movt	r4, #1
    c5e0:	sub	sp, sp, #20
    c5e4:	mov	r7, r1
    c5e8:	mov	r9, r2
    c5ec:	ldr	r6, [r4]
    c5f0:	mov	r8, r3
    c5f4:	str	r0, [sp, #12]
    c5f8:	cmp	r6, #0
    c5fc:	movne	fp, r6
    c600:	beq	c6c0 <__assert_fail@plt+0x3964>
    c604:	ldr	r6, [r4, #4]
    c608:	movw	r3, #38176	; 0x9520
    c60c:	mov	r5, #1
    c610:	movt	r3, #1
    c614:	add	r6, fp, r6
    c618:	str	r3, [sp, #8]
    c61c:	b	c628 <__assert_fail@plt+0x38cc>
    c620:	strb	sl, [fp]
    c624:	add	fp, fp, #1
    c628:	mov	r0, r7
    c62c:	bl	8bd0 <_IO_getc@plt>
    c630:	cmn	r0, #1
    c634:	mov	sl, r0
    c638:	beq	c694 <__assert_fail@plt+0x3938>
    c63c:	cmp	r0, r8
    c640:	beq	c68c <__assert_fail@plt+0x3930>
    c644:	cmp	sl, r9
    c648:	addeq	r5, r5, #1
    c64c:	cmp	fp, r6
    c650:	bcc	c620 <__assert_fail@plt+0x38c4>
    c654:	ldm	r4, {r0, ip}
    c658:	add	ip, ip, #2048	; 0x800
    c65c:	rsb	r6, r0, fp
    c660:	str	ip, [r4, #4]
    c664:	mov	r1, ip
    c668:	str	ip, [sp, #4]
    c66c:	bl	8be8 <realloc@plt>
    c670:	ldr	ip, [sp, #4]
    c674:	cmp	r0, #0
    c678:	str	r0, [r4]
    c67c:	beq	c6b0 <__assert_fail@plt+0x3954>
    c680:	add	fp, r0, r6
    c684:	add	r6, r0, ip
    c688:	b	c620 <__assert_fail@plt+0x38c4>
    c68c:	subs	r5, r5, #1
    c690:	bne	c644 <__assert_fail@plt+0x38e8>
    c694:	ldr	r1, [r4]
    c698:	ldr	r0, [sp, #12]
    c69c:	rsb	r2, r1, fp
    c6a0:	bl	c574 <__assert_fail@plt+0x3818>
    c6a4:	ldr	r0, [sp, #12]
    c6a8:	add	sp, sp, #20
    c6ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6b0:	bl	93b8 <__assert_fail@plt+0x65c>
    c6b4:	ldr	r3, [sp, #8]
    c6b8:	ldm	r3, {r0, ip}
    c6bc:	b	c680 <__assert_fail@plt+0x3924>
    c6c0:	mov	r0, #2016	; 0x7e0
    c6c4:	str	r0, [r4, #4]
    c6c8:	bl	93ec <__assert_fail@plt+0x690>
    c6cc:	mov	fp, r0
    c6d0:	str	r0, [r4]
    c6d4:	b	c604 <__assert_fail@plt+0x38a8>
    c6d8:	ldr	r0, [r0]
    c6dc:	bx	lr
    c6e0:	ldr	r0, [r0, #4]
    c6e4:	bx	lr
    c6e8:	bx	lr
    c6ec:	push	{r4, r5, r6, r7, r8}
    c6f0:	subs	r7, r2, #0
    c6f4:	mov	r4, r0
    c6f8:	mov	r2, r1
    c6fc:	beq	c76c <__assert_fail@plt+0x3a10>
    c700:	cmp	r7, #1
    c704:	beq	c77c <__assert_fail@plt+0x3a20>
    c708:	cmp	r1, #0
    c70c:	sub	ip, r1, #1
    c710:	add	r0, r0, ip
    c714:	add	r3, r3, ip
    c718:	ble	c764 <__assert_fail@plt+0x3a08>
    c71c:	movw	r1, #26215	; 0x6667
    c720:	rsb	r8, r2, r0
    c724:	movt	r1, #26214	; 0x6666
    c728:	mov	r5, r3
    c72c:	mov	r4, #0
    c730:	ldrb	ip, [r0], #-1
    c734:	cmp	r0, r8
    c738:	mla	ip, r7, ip, r4
    c73c:	smull	r4, r6, r1, ip
    c740:	asr	r4, ip, #31
    c744:	rsb	r4, r4, r6, asr #2
    c748:	add	r6, r4, r4, lsl #2
    c74c:	sub	ip, ip, r6, lsl #1
    c750:	strb	ip, [r5], #-1
    c754:	bne	c730 <__assert_fail@plt+0x39d4>
    c758:	rsb	r2, r2, r3
    c75c:	cmp	r4, #0
    c760:	strbne	r4, [r2]
    c764:	pop	{r4, r5, r6, r7, r8}
    c768:	bx	lr
    c76c:	mov	r1, r7
    c770:	mov	r0, r3
    c774:	pop	{r4, r5, r6, r7, r8}
    c778:	b	8ce4 <memset@plt>
    c77c:	mov	r1, r4
    c780:	mov	r0, r3
    c784:	pop	{r4, r5, r6, r7, r8}
    c788:	b	8bb8 <memcpy@plt>
    c78c:	push	{r3, r4, r5, r6, r7, lr}
    c790:	ldrb	ip, [r2]
    c794:	ldr	r7, [r0, #4]
    c798:	cmp	ip, #0
    c79c:	ldr	r5, [r0, #8]
    c7a0:	subeq	ip, r1, #1
    c7a4:	ldr	r4, [sp, #24]
    c7a8:	movne	ip, r1
    c7ac:	add	r5, r7, r5
    c7b0:	add	r6, r3, ip
    c7b4:	cmp	r5, r6
    c7b8:	blt	c8d4 <__assert_fail@plt+0x3b78>
    c7bc:	sub	r5, r5, #1
    c7c0:	ldr	r0, [r0, #24]
    c7c4:	cmp	r4, #0
    c7c8:	rsb	r3, r3, r5
    c7cc:	sub	r1, r1, #1
    c7d0:	add	r3, r0, r3
    c7d4:	add	r2, r2, r1
    c7d8:	rsbeq	ip, ip, r3
    c7dc:	beq	c864 <__assert_fail@plt+0x3b08>
    c7e0:	mov	r4, #0
    c7e4:	rsb	ip, ip, r3
    c7e8:	b	c81c <__assert_fail@plt+0x3ac0>
    c7ec:	ldrb	r0, [r3], #-1
    c7f0:	ldrb	r1, [r2], #-1
    c7f4:	rsb	r0, r4, r0
    c7f8:	rsb	r0, r1, r0
    c7fc:	uxtb	r0, r0
    c800:	uxtb	r1, r0
    c804:	tst	r1, #128	; 0x80
    c808:	strbeq	r1, [r3, #1]
    c80c:	addne	r0, r0, #10
    c810:	strbne	r0, [r3, #1]
    c814:	movne	r4, #1
    c818:	moveq	r4, #0
    c81c:	cmp	r3, ip
    c820:	bne	c7ec <__assert_fail@plt+0x3a90>
    c824:	cmp	r4, #0
    c828:	popeq	{r3, r4, r5, r6, r7, pc}
    c82c:	b	c8b0 <__assert_fail@plt+0x3b54>
    c830:	ldrb	r0, [r2], #-1
    c834:	ldrb	r1, [r3], #-1
    c838:	add	r0, r4, r0
    c83c:	add	r0, r0, r1
    c840:	uxtb	r0, r0
    c844:	uxtb	r1, r0
    c848:	sxtb	r4, r1
    c84c:	cmp	r4, #9
    c850:	strble	r1, [r3, #1]
    c854:	subgt	r0, r0, #10
    c858:	strbgt	r0, [r3, #1]
    c85c:	movgt	r4, #1
    c860:	movle	r4, #0
    c864:	cmp	r3, ip
    c868:	bne	c830 <__assert_fail@plt+0x3ad4>
    c86c:	cmp	r4, #0
    c870:	popeq	{r3, r4, r5, r6, r7, pc}
    c874:	b	c880 <__assert_fail@plt+0x3b24>
    c878:	sub	r2, r2, #9
    c87c:	strb	r2, [r3, #1]
    c880:	mov	r1, r3
    c884:	sub	r3, r3, #1
    c888:	ldrb	r2, [r1]
    c88c:	add	r0, r2, #1
    c890:	uxtb	r0, r0
    c894:	sxtb	ip, r0
    c898:	cmp	ip, #9
    c89c:	bgt	c878 <__assert_fail@plt+0x3b1c>
    c8a0:	strb	r0, [r1]
    c8a4:	pop	{r3, r4, r5, r6, r7, pc}
    c8a8:	add	r2, r2, #9
    c8ac:	strb	r2, [r3, #1]
    c8b0:	mov	r1, r3
    c8b4:	sub	r3, r3, #1
    c8b8:	ldrb	r2, [r1]
    c8bc:	sub	r0, r2, #1
    c8c0:	uxtb	r0, r0
    c8c4:	tst	r0, #128	; 0x80
    c8c8:	bne	c8a8 <__assert_fail@plt+0x3b4c>
    c8cc:	strb	r0, [r1]
    c8d0:	pop	{r3, r4, r5, r6, r7, pc}
    c8d4:	movw	r0, #64816	; 0xfd30
    c8d8:	movw	r1, #64860	; 0xfd5c
    c8dc:	movw	r3, #64776	; 0xfd08
    c8e0:	movt	r0, #0
    c8e4:	movt	r1, #0
    c8e8:	movw	r2, #706	; 0x2c2
    c8ec:	movt	r3, #0
    c8f0:	bl	8d5c <__assert_fail@plt>
    c8f4:	movw	r3, #38184	; 0x9528
    c8f8:	movt	r3, #1
    c8fc:	push	{r4, r5, lr}
    c900:	mov	r5, r0
    c904:	ldr	r4, [r3]
    c908:	sub	sp, sp, #12
    c90c:	cmp	r4, #0
    c910:	beq	c948 <__assert_fail@plt+0x3bec>
    c914:	ldr	r2, [r4, #16]
    c918:	str	r2, [r3]
    c91c:	mov	r3, #0
    c920:	mov	r2, #1
    c924:	mov	r0, r4
    c928:	str	r5, [r4, #4]
    c92c:	str	r1, [r4, #24]
    c930:	str	r3, [r4]
    c934:	str	r3, [r4, #8]
    c938:	str	r3, [r4, #20]
    c93c:	str	r2, [r4, #12]
    c940:	add	sp, sp, #12
    c944:	pop	{r4, r5, pc}
    c948:	mov	r0, #28
    c94c:	str	r1, [sp, #4]
    c950:	bl	8c30 <malloc@plt>
    c954:	ldr	r1, [sp, #4]
    c958:	subs	r4, r0, #0
    c95c:	bne	c91c <__assert_fail@plt+0x3bc0>
    c960:	bl	c3b0 <__assert_fail@plt+0x3654>
    c964:	ldr	r1, [sp, #4]
    c968:	b	c91c <__assert_fail@plt+0x3bc0>
    c96c:	ldr	r3, [r0, #4]
    c970:	ldr	ip, [r1, #4]
    c974:	push	{r4, r5, r6, r7, r8, r9}
    c978:	cmp	r3, ip
    c97c:	beq	c9d8 <__assert_fail@plt+0x3c7c>
    c980:	bgt	c9b8 <__assert_fail@plt+0x3c5c>
    c984:	cmp	r2, #0
    c988:	beq	cacc <__assert_fail@plt+0x3d70>
    c98c:	ldr	r3, [r0]
    c990:	cmp	r3, #0
    c994:	movne	r0, #1
    c998:	mvneq	r0, #0
    c99c:	pop	{r4, r5, r6, r7, r8, r9}
    c9a0:	bx	lr
    c9a4:	beq	ca38 <__assert_fail@plt+0x3cdc>
    c9a8:	ldrb	r4, [r7]
    c9ac:	ldrb	r5, [r6]
    c9b0:	cmp	r5, r4
    c9b4:	bcs	c984 <__assert_fail@plt+0x3c28>
    c9b8:	cmp	r2, #0
    c9bc:	beq	ca84 <__assert_fail@plt+0x3d28>
    c9c0:	ldr	r3, [r0]
    c9c4:	pop	{r4, r5, r6, r7, r8, r9}
    c9c8:	cmp	r3, #0
    c9cc:	mvnne	r0, #0
    c9d0:	moveq	r0, #1
    c9d4:	bx	lr
    c9d8:	ldr	r8, [r0, #8]
    c9dc:	ldr	r9, [r1, #8]
    c9e0:	ldr	r6, [r1, #24]
    c9e4:	cmp	r9, r8
    c9e8:	addle	r3, r3, r9
    c9ec:	addgt	r3, r3, r8
    c9f0:	ldr	r7, [r0, #24]
    c9f4:	cmp	r3, #0
    c9f8:	ble	c9a4 <__assert_fail@plt+0x3c48>
    c9fc:	ldrb	r4, [r7]
    ca00:	ldrb	r5, [r6]
    ca04:	cmp	r4, r5
    ca08:	bne	c9b0 <__assert_fail@plt+0x3c54>
    ca0c:	add	ip, r7, #1
    ca10:	add	r1, r6, #1
    ca14:	b	ca28 <__assert_fail@plt+0x3ccc>
    ca18:	ldrb	r4, [ip], #1
    ca1c:	ldrb	r5, [r1], #1
    ca20:	cmp	r4, r5
    ca24:	bne	c9b0 <__assert_fail@plt+0x3c54>
    ca28:	subs	r3, r3, #1
    ca2c:	mov	r7, ip
    ca30:	mov	r6, r1
    ca34:	bne	ca18 <__assert_fail@plt+0x3cbc>
    ca38:	cmp	r8, r9
    ca3c:	beq	ca7c <__assert_fail@plt+0x3d20>
    ca40:	ble	ca90 <__assert_fail@plt+0x3d34>
    ca44:	rsb	r8, r9, r8
    ca48:	cmp	r8, #0
    ca4c:	ble	ca7c <__assert_fail@plt+0x3d20>
    ca50:	ldrb	r3, [r7]
    ca54:	cmp	r3, #0
    ca58:	subeq	r1, r8, #1
    ca5c:	addeq	r1, r7, r1
    ca60:	beq	ca74 <__assert_fail@plt+0x3d18>
    ca64:	b	c9b8 <__assert_fail@plt+0x3c5c>
    ca68:	ldrb	r3, [r7, #1]!
    ca6c:	cmp	r3, #0
    ca70:	bne	c9b8 <__assert_fail@plt+0x3c5c>
    ca74:	cmp	r7, r1
    ca78:	bne	ca68 <__assert_fail@plt+0x3d0c>
    ca7c:	mov	r0, #0
    ca80:	b	c99c <__assert_fail@plt+0x3c40>
    ca84:	mov	r0, #1
    ca88:	pop	{r4, r5, r6, r7, r8, r9}
    ca8c:	bx	lr
    ca90:	rsb	r8, r8, r9
    ca94:	cmp	r8, #0
    ca98:	ble	ca7c <__assert_fail@plt+0x3d20>
    ca9c:	ldrb	r3, [r6]
    caa0:	cmp	r3, #0
    caa4:	subeq	r1, r8, #1
    caa8:	addeq	r1, r6, r1
    caac:	beq	cac0 <__assert_fail@plt+0x3d64>
    cab0:	b	c984 <__assert_fail@plt+0x3c28>
    cab4:	ldrb	r3, [r6, #1]!
    cab8:	cmp	r3, #0
    cabc:	bne	c984 <__assert_fail@plt+0x3c28>
    cac0:	cmp	r6, r1
    cac4:	bne	cab4 <__assert_fail@plt+0x3d58>
    cac8:	b	ca7c <__assert_fail@plt+0x3d20>
    cacc:	mvn	r0, #0
    cad0:	b	c99c <__assert_fail@plt+0x3c40>
    cad4:	movw	r3, #38184	; 0x9528
    cad8:	movt	r3, #1
    cadc:	push	{r4, r5, r6, lr}
    cae0:	mov	r5, r0
    cae4:	ldr	r4, [r3]
    cae8:	sub	sp, sp, #8
    caec:	cmp	r4, #0
    caf0:	beq	cb54 <__assert_fail@plt+0x3df8>
    caf4:	ldr	r2, [r4, #16]
    caf8:	str	r2, [r3]
    cafc:	add	r6, r5, r1
    cb00:	mov	r3, #0
    cb04:	str	r5, [r4, #4]
    cb08:	str	r3, [r4]
    cb0c:	mov	r0, r6
    cb10:	mov	r3, #1
    cb14:	str	r1, [r4, #8]
    cb18:	str	r3, [r4, #12]
    cb1c:	bl	8c30 <malloc@plt>
    cb20:	cmp	r0, #0
    cb24:	str	r0, [r4, #20]
    cb28:	beq	cb48 <__assert_fail@plt+0x3dec>
    cb2c:	str	r0, [r4, #24]
    cb30:	mov	r2, r6
    cb34:	mov	r1, #0
    cb38:	bl	8ce4 <memset@plt>
    cb3c:	mov	r0, r4
    cb40:	add	sp, sp, #8
    cb44:	pop	{r4, r5, r6, pc}
    cb48:	bl	c3b0 <__assert_fail@plt+0x3654>
    cb4c:	ldr	r0, [r4, #20]
    cb50:	b	cb2c <__assert_fail@plt+0x3dd0>
    cb54:	mov	r0, #28
    cb58:	str	r1, [sp, #4]
    cb5c:	bl	8c30 <malloc@plt>
    cb60:	ldr	r1, [sp, #4]
    cb64:	subs	r4, r0, #0
    cb68:	bne	cafc <__assert_fail@plt+0x3da0>
    cb6c:	bl	c3b0 <__assert_fail@plt+0x3654>
    cb70:	ldr	r1, [sp, #4]
    cb74:	b	cafc <__assert_fail@plt+0x3da0>
    cb78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cb7c:	mov	r5, r2
    cb80:	ldr	r3, [r0, #4]
    cb84:	mov	r9, r0
    cb88:	ldr	r6, [r1, #4]
    cb8c:	mov	r8, r1
    cb90:	ldr	r4, [r0, #8]
    cb94:	cmp	r6, r3
    cb98:	movlt	r6, r3
    cb9c:	ldr	r2, [r1, #8]
    cba0:	add	r6, r6, #1
    cba4:	cmp	r4, r2
    cba8:	movlt	r4, r2
    cbac:	cmp	r5, r4
    cbb0:	movge	r1, r5
    cbb4:	movlt	r1, r4
    cbb8:	mov	r0, r6
    cbbc:	bl	cad4 <__assert_fail@plt+0x3d78>
    cbc0:	cmp	r4, r5
    cbc4:	blt	cd4c <__assert_fail@plt+0x3ff0>
    cbc8:	ldr	r2, [r0, #24]
    cbcc:	add	r4, r6, r4
    cbd0:	ldr	ip, [r9, #8]
    cbd4:	sub	r4, r4, #1
    cbd8:	ldmib	r8, {r1, sl}
    cbdc:	add	r7, r2, r4
    cbe0:	ldr	r5, [r9, #4]
    cbe4:	ldr	r6, [r9, #24]
    cbe8:	add	r1, r1, sl
    cbec:	add	r5, r5, ip
    cbf0:	ldr	r4, [r8, #24]
    cbf4:	cmp	ip, sl
    cbf8:	sub	r2, r5, #1
    cbfc:	sub	r3, r1, #1
    cc00:	add	r6, r6, r2
    cc04:	add	r4, r4, r3
    cc08:	beq	cc40 <__assert_fail@plt+0x3ee4>
    cc0c:	ble	cd80 <__assert_fail@plt+0x4024>
    cc10:	rsb	ip, ip, sl
    cc14:	mov	r3, r7
    cc18:	add	r1, r6, ip
    cc1c:	ldrb	r2, [r6], #-1
    cc20:	cmp	r6, r1
    cc24:	strb	r2, [r3], #-1
    cc28:	bne	cc1c <__assert_fail@plt+0x3ec0>
    cc2c:	ldr	r5, [r9, #4]
    cc30:	add	r7, r7, ip
    cc34:	ldr	r1, [r8, #4]
    cc38:	add	r5, r5, sl
    cc3c:	add	r1, r1, sl
    cc40:	cmp	r1, #0
    cc44:	cmpgt	r5, #0
    cc48:	movle	r3, #0
    cc4c:	movgt	r3, #1
    cc50:	ble	cca4 <__assert_fail@plt+0x3f48>
    cc54:	sub	r2, r7, #1
    cc58:	mov	r3, #0
    cc5c:	ldrb	r7, [r6], #-1
    cc60:	sub	r5, r5, #1
    cc64:	ldrb	ip, [r4], #-1
    cc68:	sub	r1, r1, #1
    cc6c:	add	ip, r7, ip
    cc70:	add	ip, ip, r3
    cc74:	mov	r3, #0
    cc78:	uxtb	ip, ip
    cc7c:	cmp	ip, #9
    cc80:	sub	r7, ip, #10
    cc84:	strbls	ip, [r2, #1]
    cc88:	strbhi	r7, [r2, #1]
    cc8c:	movhi	r3, #1
    cc90:	cmp	r1, #0
    cc94:	cmpgt	r5, #0
    cc98:	mov	r7, r2
    cc9c:	sub	r2, r2, #1
    cca0:	bgt	cc5c <__assert_fail@plt+0x3f00>
    cca4:	cmp	r5, #0
    cca8:	movne	r1, r5
    ccac:	movne	r4, r6
    ccb0:	cmp	r1, #0
    ccb4:	ble	ccf4 <__assert_fail@plt+0x3f98>
    ccb8:	sub	ip, r7, #1
    ccbc:	rsb	r6, r1, r4
    ccc0:	ldrb	r2, [r4], #-1
    ccc4:	sub	ip, ip, #1
    ccc8:	add	r2, r2, r3
    cccc:	mov	r3, #0
    ccd0:	uxtb	r2, r2
    ccd4:	cmp	r2, #9
    ccd8:	sub	r5, r2, #10
    ccdc:	strbls	r2, [ip, #2]
    cce0:	strbhi	r5, [ip, #2]
    cce4:	movhi	r3, #1
    cce8:	cmp	r4, r6
    ccec:	bne	ccc0 <__assert_fail@plt+0x3f64>
    ccf0:	rsb	r7, r1, r7
    ccf4:	cmp	r3, #1
    ccf8:	ldrbeq	r3, [r7]
    ccfc:	addeq	r3, r3, #1
    cd00:	strbeq	r3, [r7]
    cd04:	ldr	r3, [r0, #24]
    cd08:	ldrb	r2, [r3]
    cd0c:	cmp	r2, #0
    cd10:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
    cd14:	ldr	r2, [r0, #4]
    cd18:	cmp	r2, #1
    cd1c:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
    cd20:	sub	r2, r2, #1
    cd24:	add	r3, r3, #1
    cd28:	str	r3, [r0, #24]
    cd2c:	add	r3, r3, #1
    cd30:	str	r2, [r0, #4]
    cd34:	ldrb	r1, [r3, #-1]
    cd38:	cmp	r1, #0
    cd3c:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
    cd40:	subs	r2, r2, #1
    cd44:	bne	cd28 <__assert_fail@plt+0x3fcc>
    cd48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    cd4c:	rsb	r1, r4, r5
    cd50:	ldr	r2, [r0, #24]
    cd54:	cmp	r1, #0
    cd58:	add	r4, r6, r4
    cd5c:	add	r3, r2, r4
    cd60:	ble	cbd0 <__assert_fail@plt+0x3e74>
    cd64:	add	r1, r3, r1
    cd68:	mov	r2, #0
    cd6c:	strb	r2, [r3], #1
    cd70:	cmp	r3, r1
    cd74:	bne	cd6c <__assert_fail@plt+0x4010>
    cd78:	ldr	r2, [r0, #24]
    cd7c:	b	cbd0 <__assert_fail@plt+0x3e74>
    cd80:	rsblt	sl, sl, ip
    cd84:	movlt	r3, r7
    cd88:	addlt	r1, r4, sl
    cd8c:	bge	cc40 <__assert_fail@plt+0x3ee4>
    cd90:	ldrb	r2, [r4], #-1
    cd94:	cmp	r4, r1
    cd98:	strb	r2, [r3], #-1
    cd9c:	bne	cd90 <__assert_fail@plt+0x4034>
    cda0:	ldr	r5, [r9, #4]
    cda4:	add	r7, r7, sl
    cda8:	ldr	r1, [r8, #4]
    cdac:	add	r5, r5, ip
    cdb0:	add	r1, r1, ip
    cdb4:	b	cc40 <__assert_fail@plt+0x3ee4>
    cdb8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdbc:	mov	r4, r2
    cdc0:	ldr	r3, [r1, #4]
    cdc4:	mov	r8, r0
    cdc8:	ldr	r6, [r0, #4]
    cdcc:	mov	sl, r1
    cdd0:	ldr	r2, [r1, #8]
    cdd4:	ldr	r9, [r0, #8]
    cdd8:	cmp	r6, r3
    cddc:	movge	r5, r6
    cde0:	movlt	r5, r3
    cde4:	cmp	r6, r3
    cde8:	movge	r6, r3
    cdec:	cmp	r9, r2
    cdf0:	movge	r7, r9
    cdf4:	movlt	r7, r2
    cdf8:	mov	r0, r5
    cdfc:	cmp	r4, r7
    ce00:	movge	r1, r4
    ce04:	movlt	r1, r7
    ce08:	cmp	r9, r2
    ce0c:	movge	r9, r2
    ce10:	bl	cad4 <__assert_fail@plt+0x3d78>
    ce14:	cmp	r7, r4
    ce18:	blt	cf6c <__assert_fail@plt+0x4210>
    ce1c:	ldr	r2, [r0, #24]
    ce20:	add	r7, r7, r5
    ce24:	sub	r4, r7, #1
    ce28:	ldr	r3, [r8, #8]
    ce2c:	ldr	r7, [r8, #4]
    ce30:	add	r4, r2, r4
    ce34:	ldr	fp, [sl, #8]
    ce38:	cmp	r9, r3
    ce3c:	ldr	r2, [sl, #4]
    ce40:	add	r7, r3, r7
    ce44:	ldr	r1, [r8, #24]
    ce48:	sub	r7, r7, #1
    ce4c:	add	r8, fp, r2
    ce50:	ldr	r2, [sl, #24]
    ce54:	sub	r8, r8, #1
    ce58:	add	r7, r1, r7
    ce5c:	add	r8, r2, r8
    ce60:	beq	cfa0 <__assert_fail@plt+0x4244>
    ce64:	rsb	sl, r9, r3
    ce68:	cmp	sl, #0
    ce6c:	ble	cff8 <__assert_fail@plt+0x429c>
    ce70:	rsb	r1, sl, #0
    ce74:	mov	r2, sl
    ce78:	add	ip, r7, r1
    ce7c:	add	r1, r4, r1
    ce80:	ldrb	r3, [ip, r2]
    ce84:	strb	r3, [r1, r2]
    ce88:	subs	r2, r2, #1
    ce8c:	bne	ce80 <__assert_fail@plt+0x4124>
    ce90:	rsb	r4, sl, r4
    ce94:	rsb	r7, sl, r7
    ce98:	add	r9, r6, r9
    ce9c:	cmp	r9, #0
    cea0:	rsbgt	r9, r9, #0
    cea4:	movgt	r3, #0
    cea8:	ble	cee0 <__assert_fail@plt+0x4184>
    ceac:	ldrb	ip, [r7, r3]
    ceb0:	ldrb	r1, [r8, r3]
    ceb4:	rsb	r1, r1, ip
    ceb8:	subs	r1, r1, r2
    cebc:	mov	r2, #0
    cec0:	addmi	r1, r1, #10
    cec4:	strb	r1, [r4, r3]
    cec8:	sub	r3, r3, #1
    cecc:	movmi	r2, #1
    ced0:	cmp	r3, r9
    ced4:	bne	ceac <__assert_fail@plt+0x4150>
    ced8:	add	r7, r7, r3
    cedc:	add	r4, r4, r3
    cee0:	cmp	r5, r6
    cee4:	beq	cf24 <__assert_fail@plt+0x41c8>
    cee8:	rsb	r3, r6, r5
    ceec:	cmp	r3, #0
    cef0:	ble	cf24 <__assert_fail@plt+0x41c8>
    cef4:	rsb	r1, r3, #0
    cef8:	add	r7, r7, r1
    cefc:	add	r4, r4, r1
    cf00:	ldrb	r1, [r7, r3]
    cf04:	rsb	r1, r2, r1
    cf08:	mov	r2, #0
    cf0c:	cmn	r1, #1
    cf10:	moveq	r1, #9
    cf14:	moveq	r2, #1
    cf18:	strb	r1, [r4, r3]
    cf1c:	subs	r3, r3, #1
    cf20:	bne	cf00 <__assert_fail@plt+0x41a4>
    cf24:	ldr	r3, [r0, #24]
    cf28:	ldrb	r2, [r3]
    cf2c:	cmp	r2, #0
    cf30:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf34:	ldr	r2, [r0, #4]
    cf38:	cmp	r2, #1
    cf3c:	subgt	r2, r2, #1
    cf40:	addgt	r3, r3, #1
    cf44:	ble	d000 <__assert_fail@plt+0x42a4>
    cf48:	str	r3, [r0, #24]
    cf4c:	add	r3, r3, #1
    cf50:	str	r2, [r0, #4]
    cf54:	ldrb	r1, [r3, #-1]
    cf58:	cmp	r1, #0
    cf5c:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf60:	subs	r2, r2, #1
    cf64:	bne	cf48 <__assert_fail@plt+0x41ec>
    cf68:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf6c:	rsb	r1, r7, r4
    cf70:	ldr	r2, [r0, #24]
    cf74:	cmp	r1, #0
    cf78:	add	r7, r7, r5
    cf7c:	add	r3, r2, r7
    cf80:	ble	ce24 <__assert_fail@plt+0x40c8>
    cf84:	add	r1, r3, r1
    cf88:	mov	r2, #0
    cf8c:	strb	r2, [r3], #1
    cf90:	cmp	r3, r1
    cf94:	bne	cf8c <__assert_fail@plt+0x4230>
    cf98:	ldr	r2, [r0, #24]
    cf9c:	b	ce24 <__assert_fail@plt+0x40c8>
    cfa0:	rsb	fp, r9, fp
    cfa4:	cmp	fp, #0
    cfa8:	ble	cff8 <__assert_fail@plt+0x429c>
    cfac:	rsb	ip, fp, #0
    cfb0:	mov	r3, fp
    cfb4:	add	sl, r8, ip
    cfb8:	add	ip, r4, ip
    cfbc:	mov	r2, #0
    cfc0:	ldrb	r1, [sl, r3]
    cfc4:	rsb	r1, r1, #0
    cfc8:	subs	r1, r1, r2
    cfcc:	mov	r2, r1
    cfd0:	addne	r1, r1, #10
    cfd4:	moveq	r1, r2
    cfd8:	movne	r2, #1
    cfdc:	uxtbne	r1, r1
    cfe0:	strb	r1, [ip, r3]
    cfe4:	subs	r3, r3, #1
    cfe8:	bne	cfc0 <__assert_fail@plt+0x4264>
    cfec:	rsb	r8, fp, r8
    cff0:	rsb	r4, fp, r4
    cff4:	b	ce98 <__assert_fail@plt+0x413c>
    cff8:	mov	r2, #0
    cffc:	b	ce98 <__assert_fail@plt+0x413c>
    d000:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d004:	ldr	r3, [r0]
    d008:	push	{r4, lr}
    d00c:	cmp	r3, #0
    d010:	mov	r4, r0
    d014:	popeq	{r4, pc}
    d018:	ldr	r2, [r3, #12]
    d01c:	sub	r2, r2, #1
    d020:	str	r2, [r3, #12]
    d024:	cmp	r2, #0
    d028:	bne	d058 <__assert_fail@plt+0x42fc>
    d02c:	ldr	r0, [r3, #20]
    d030:	cmp	r0, #0
    d034:	beq	d040 <__assert_fail@plt+0x42e4>
    d038:	bl	8ba0 <free@plt>
    d03c:	ldr	r3, [r4]
    d040:	movw	r2, #38184	; 0x9528
    d044:	movt	r2, #1
    d048:	ldr	r1, [r2]
    d04c:	str	r1, [r3, #16]
    d050:	ldr	r3, [r4]
    d054:	str	r3, [r2]
    d058:	mov	r3, #0
    d05c:	str	r3, [r4]
    d060:	pop	{r4, pc}
    d064:	push	{r3, lr}
    d068:	mov	r1, #0
    d06c:	mov	r0, #1
    d070:	bl	cad4 <__assert_fail@plt+0x3d78>
    d074:	movw	r3, #38200	; 0x9538
    d078:	movt	r3, #1
    d07c:	mov	r1, #0
    d080:	str	r0, [r3]
    d084:	mov	r0, #1
    d088:	bl	cad4 <__assert_fail@plt+0x3d78>
    d08c:	movw	r3, #38192	; 0x9530
    d090:	movt	r3, #1
    d094:	mov	r2, #1
    d098:	mov	r1, #0
    d09c:	ldr	lr, [r0, #24]
    d0a0:	mov	ip, r0
    d0a4:	mov	r0, r2
    d0a8:	str	ip, [r3]
    d0ac:	strb	r2, [lr]
    d0b0:	bl	cad4 <__assert_fail@plt+0x3d78>
    d0b4:	movw	r3, #38196	; 0x9534
    d0b8:	movt	r3, #1
    d0bc:	mov	r1, #2
    d0c0:	ldr	r2, [r0, #24]
    d0c4:	str	r0, [r3]
    d0c8:	strb	r1, [r2]
    d0cc:	pop	{r3, pc}
    d0d0:	ldr	r2, [r0, #12]
    d0d4:	add	r2, r2, #1
    d0d8:	str	r2, [r0, #12]
    d0dc:	bx	lr
    d0e0:	movw	r3, #38200	; 0x9538
    d0e4:	movt	r3, #1
    d0e8:	ldr	r3, [r3]
    d0ec:	ldr	r2, [r3, #12]
    d0f0:	add	r2, r2, #1
    d0f4:	str	r2, [r3, #12]
    d0f8:	str	r3, [r0]
    d0fc:	bx	lr
    d100:	ldr	r3, [r0]
    d104:	ldr	r2, [r1]
    d108:	cmp	r3, r2
    d10c:	beq	d120 <__assert_fail@plt+0x43c4>
    d110:	cmp	r3, #0
    d114:	mvnne	r0, #0
    d118:	moveq	r0, #1
    d11c:	bx	lr
    d120:	mov	r2, #1
    d124:	b	c96c <__assert_fail@plt+0x3c10>
    d128:	ldr	r0, [r0]
    d12c:	subs	r3, r0, #1
    d130:	rsbs	r0, r3, #0
    d134:	adcs	r0, r0, r3
    d138:	bx	lr
    d13c:	movw	r3, #38200	; 0x9538
    d140:	movt	r3, #1
    d144:	ldr	r3, [r3]
    d148:	cmp	r0, r3
    d14c:	beq	d198 <__assert_fail@plt+0x443c>
    d150:	ldmib	r0, {r1, r3}
    d154:	ldr	r2, [r0, #24]
    d158:	add	r3, r1, r3
    d15c:	cmp	r3, #0
    d160:	ble	d188 <__assert_fail@plt+0x442c>
    d164:	ldrb	r0, [r2]
    d168:	cmp	r0, #0
    d16c:	beq	d180 <__assert_fail@plt+0x4424>
    d170:	b	d1a0 <__assert_fail@plt+0x4444>
    d174:	ldrb	r1, [r2, #1]!
    d178:	cmp	r1, #0
    d17c:	bne	d194 <__assert_fail@plt+0x4438>
    d180:	subs	r3, r3, #1
    d184:	bne	d174 <__assert_fail@plt+0x4418>
    d188:	rsbs	r0, r3, #1
    d18c:	movcc	r0, #0
    d190:	bx	lr
    d194:	bx	lr
    d198:	mov	r0, #1
    d19c:	bx	lr
    d1a0:	mov	r0, #0
    d1a4:	bx	lr
    d1a8:	ldmib	r0, {r2, ip}
    d1ac:	ldr	r3, [r0, #24]
    d1b0:	cmp	r1, ip
    d1b4:	addle	r1, r2, r1
    d1b8:	addgt	r1, r2, ip
    d1bc:	cmp	r1, #0
    d1c0:	ble	d218 <__assert_fail@plt+0x44bc>
    d1c4:	ldrb	r2, [r3]
    d1c8:	add	r3, r3, #1
    d1cc:	cmp	r2, #0
    d1d0:	beq	d1e4 <__assert_fail@plt+0x4488>
    d1d4:	b	d1f4 <__assert_fail@plt+0x4498>
    d1d8:	ldrb	r2, [r3], #1
    d1dc:	cmp	r2, #0
    d1e0:	bne	d1f4 <__assert_fail@plt+0x4498>
    d1e4:	subs	r1, r1, #1
    d1e8:	bne	d1d8 <__assert_fail@plt+0x447c>
    d1ec:	mov	r0, #1
    d1f0:	bx	lr
    d1f4:	cmp	r1, #1
    d1f8:	beq	d204 <__assert_fail@plt+0x44a8>
    d1fc:	mov	r0, #0
    d200:	bx	lr
    d204:	ldrb	r0, [r3, #-1]
    d208:	subs	r3, r0, #1
    d20c:	rsbs	r0, r3, #0
    d210:	adcs	r0, r0, r3
    d214:	bx	lr
    d218:	movne	r0, #0
    d21c:	moveq	r0, #1
    d220:	bx	lr
    d224:	push	{r4, r5, r6, r7, r8, lr}
    d228:	mov	r5, r0
    d22c:	ldr	ip, [r0]
    d230:	mov	r7, r1
    d234:	ldr	lr, [r1]
    d238:	mov	r4, r2
    d23c:	mov	r6, r3
    d240:	cmp	ip, lr
    d244:	bne	d27c <__assert_fail@plt+0x4520>
    d248:	mov	r2, #0
    d24c:	bl	c96c <__assert_fail@plt+0x3c10>
    d250:	subs	r8, r0, #0
    d254:	beq	d294 <__assert_fail@plt+0x4538>
    d258:	cmp	r8, #1
    d25c:	beq	d2f8 <__assert_fail@plt+0x459c>
    d260:	cmn	r8, #1
    d264:	movne	r6, #0
    d268:	beq	d2d0 <__assert_fail@plt+0x4574>
    d26c:	mov	r0, r4
    d270:	bl	d004 <__assert_fail@plt+0x42a8>
    d274:	str	r6, [r4]
    d278:	pop	{r4, r5, r6, r7, r8, pc}
    d27c:	mov	r2, r3
    d280:	bl	cb78 <__assert_fail@plt+0x3e1c>
    d284:	ldr	r3, [r5]
    d288:	mov	r6, r0
    d28c:	str	r3, [r0]
    d290:	b	d26c <__assert_fail@plt+0x4510>
    d294:	ldr	r3, [r7, #8]
    d298:	mov	r0, #1
    d29c:	ldr	r5, [r5, #8]
    d2a0:	cmp	r5, r3
    d2a4:	movlt	r5, r3
    d2a8:	cmp	r5, r6
    d2ac:	movlt	r5, r6
    d2b0:	mov	r1, r5
    d2b4:	bl	cad4 <__assert_fail@plt+0x3d78>
    d2b8:	add	r2, r5, #1
    d2bc:	mov	r1, r8
    d2c0:	mov	r6, r0
    d2c4:	ldr	r0, [r0, #24]
    d2c8:	bl	8ce4 <memset@plt>
    d2cc:	b	d26c <__assert_fail@plt+0x4510>
    d2d0:	mov	r2, r6
    d2d4:	mov	r1, r5
    d2d8:	mov	r0, r7
    d2dc:	bl	cdb8 <__assert_fail@plt+0x405c>
    d2e0:	ldr	r3, [r7]
    d2e4:	rsbs	r3, r3, #1
    d2e8:	movcc	r3, #0
    d2ec:	mov	r6, r0
    d2f0:	str	r3, [r0]
    d2f4:	b	d26c <__assert_fail@plt+0x4510>
    d2f8:	mov	r2, r6
    d2fc:	mov	r1, r7
    d300:	mov	r0, r5
    d304:	bl	cdb8 <__assert_fail@plt+0x405c>
    d308:	ldr	r3, [r5]
    d30c:	mov	r6, r0
    d310:	str	r3, [r0]
    d314:	b	d26c <__assert_fail@plt+0x4510>
    d318:	movw	ip, #37068	; 0x90cc
    d31c:	movt	ip, #1
    d320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d324:	movw	lr, #37072	; 0x90d0
    d328:	movt	lr, #1
    d32c:	ldr	ip, [ip]
    d330:	mov	r8, r3
    d334:	add	r4, r1, r8
    d338:	ldr	r3, [lr]
    d33c:	sub	sp, sp, #76	; 0x4c
    d340:	cmp	r4, ip
    d344:	mov	sl, r1
    d348:	str	lr, [sp, #28]
    d34c:	mov	r9, r0
    d350:	mov	fp, r2
    d354:	str	r3, [sp, #68]	; 0x44
    d358:	ldr	r5, [sp, #112]	; 0x70
    d35c:	blt	d730 <__assert_fail@plt+0x49d4>
    d360:	add	r3, ip, #3
    d364:	cmp	ip, #0
    d368:	movlt	ip, r3
    d36c:	asr	r3, ip, #2
    d370:	cmp	r1, r3
    d374:	blt	d730 <__assert_fail@plt+0x49d4>
    d378:	cmp	r8, r3
    d37c:	blt	d730 <__assert_fail@plt+0x49d4>
    d380:	cmp	r1, r8
    d384:	movge	r6, r1
    d388:	movlt	r6, r8
    d38c:	add	r6, r6, #1
    d390:	add	r6, r6, r6, lsr #31
    d394:	asr	r6, r6, #1
    d398:	cmp	r1, r6
    d39c:	blt	d83c <__assert_fail@plt+0x4ae0>
    d3a0:	rsb	sl, r6, r1
    d3a4:	ldr	r1, [r0, #24]
    d3a8:	movw	r7, #38200	; 0x9538
    d3ac:	movt	r7, #1
    d3b0:	mov	r0, sl
    d3b4:	bl	c8f4 <__assert_fail@plt+0x3b98>
    d3b8:	ldr	r1, [r9, #24]
    d3bc:	add	r1, r1, sl
    d3c0:	str	r0, [sp, #36]	; 0x24
    d3c4:	mov	r0, r6
    d3c8:	bl	c8f4 <__assert_fail@plt+0x3b98>
    d3cc:	cmp	r8, r6
    d3d0:	str	r0, [sp, #32]
    d3d4:	bge	d870 <__assert_fail@plt+0x4b14>
    d3d8:	ldr	r3, [r7]
    d3dc:	mov	r0, r8
    d3e0:	ldr	r1, [fp, #24]
    d3e4:	ldr	r2, [r3, #12]
    d3e8:	str	r3, [sp, #44]	; 0x2c
    d3ec:	add	r2, r2, #1
    d3f0:	str	r2, [r3, #12]
    d3f4:	bl	c8f4 <__assert_fail@plt+0x3b98>
    d3f8:	mov	r1, r0
    d3fc:	str	r0, [sp, #40]	; 0x28
    d400:	ldr	r8, [sp, #36]	; 0x24
    d404:	ldr	r3, [r8, #24]
    d408:	ldrb	r2, [r3]
    d40c:	cmp	r2, #0
    d410:	bne	d44c <__assert_fail@plt+0x46f0>
    d414:	ldr	r2, [r8, #4]
    d418:	cmp	r2, #1
    d41c:	ble	d44c <__assert_fail@plt+0x46f0>
    d420:	sub	r2, r2, #1
    d424:	add	r3, r3, #1
    d428:	b	d434 <__assert_fail@plt+0x46d8>
    d42c:	subs	r2, r2, #1
    d430:	beq	d44c <__assert_fail@plt+0x46f0>
    d434:	str	r3, [r8, #24]
    d438:	add	r3, r3, #1
    d43c:	str	r2, [r8, #4]
    d440:	ldrb	r0, [r3, #-1]
    d444:	cmp	r0, #0
    d448:	beq	d42c <__assert_fail@plt+0x46d0>
    d44c:	ldr	sl, [sp, #32]
    d450:	ldr	r3, [sl, #24]
    d454:	ldrb	r2, [r3]
    d458:	cmp	r2, #0
    d45c:	bne	d498 <__assert_fail@plt+0x473c>
    d460:	ldr	r2, [sl, #4]
    d464:	cmp	r2, #1
    d468:	ble	d498 <__assert_fail@plt+0x473c>
    d46c:	sub	r2, r2, #1
    d470:	add	r3, r3, #1
    d474:	b	d480 <__assert_fail@plt+0x4724>
    d478:	subs	r2, r2, #1
    d47c:	beq	d498 <__assert_fail@plt+0x473c>
    d480:	str	r3, [sl, #24]
    d484:	add	r3, r3, #1
    d488:	str	r2, [sl, #4]
    d48c:	ldrb	r0, [r3, #-1]
    d490:	cmp	r0, #0
    d494:	beq	d478 <__assert_fail@plt+0x471c>
    d498:	ldr	r9, [sp, #44]	; 0x2c
    d49c:	ldr	r3, [r9, #24]
    d4a0:	ldrb	r2, [r3]
    d4a4:	cmp	r2, #0
    d4a8:	bne	d4e4 <__assert_fail@plt+0x4788>
    d4ac:	ldr	r2, [r9, #4]
    d4b0:	cmp	r2, #1
    d4b4:	ble	d4e4 <__assert_fail@plt+0x4788>
    d4b8:	sub	r2, r2, #1
    d4bc:	add	r3, r3, #1
    d4c0:	b	d4cc <__assert_fail@plt+0x4770>
    d4c4:	subs	r2, r2, #1
    d4c8:	beq	d4e4 <__assert_fail@plt+0x4788>
    d4cc:	str	r3, [r9, #24]
    d4d0:	add	r3, r3, #1
    d4d4:	str	r2, [r9, #4]
    d4d8:	ldrb	r0, [r3, #-1]
    d4dc:	cmp	r0, #0
    d4e0:	beq	d4c4 <__assert_fail@plt+0x4768>
    d4e4:	ldr	r3, [r1, #24]
    d4e8:	ldrb	r2, [r3]
    d4ec:	cmp	r2, #0
    d4f0:	bne	d52c <__assert_fail@plt+0x47d0>
    d4f4:	ldr	r2, [r1, #4]
    d4f8:	cmp	r2, #1
    d4fc:	ble	d52c <__assert_fail@plt+0x47d0>
    d500:	sub	r2, r2, #1
    d504:	add	r3, r3, #1
    d508:	b	d514 <__assert_fail@plt+0x47b8>
    d50c:	subs	r2, r2, #1
    d510:	beq	d52c <__assert_fail@plt+0x47d0>
    d514:	str	r3, [r1, #24]
    d518:	add	r3, r3, #1
    d51c:	str	r2, [r1, #4]
    d520:	ldrb	r0, [r3, #-1]
    d524:	cmp	r0, #0
    d528:	beq	d50c <__assert_fail@plt+0x47b0>
    d52c:	mov	r0, r8
    d530:	bl	d13c <__assert_fail@plt+0x43e0>
    d534:	cmp	r0, #0
    d538:	movne	r9, #1
    d53c:	bne	d550 <__assert_fail@plt+0x47f4>
    d540:	mov	r0, r9
    d544:	bl	d13c <__assert_fail@plt+0x43e0>
    d548:	adds	r9, r0, #0
    d54c:	movne	r9, #1
    d550:	ldr	ip, [r7]
    d554:	mov	r0, r8
    d558:	mov	r1, sl
    d55c:	add	r2, sp, #60	; 0x3c
    d560:	mov	r3, #0
    d564:	movw	r8, #38200	; 0x9538
    d568:	ldr	lr, [ip, #12]
    d56c:	movt	r8, #1
    d570:	str	ip, [sp, #60]	; 0x3c
    d574:	add	lr, lr, #2
    d578:	str	lr, [ip, #12]
    d57c:	str	ip, [sp, #64]	; 0x40
    d580:	bl	d224 <__assert_fail@plt+0x44c8>
    d584:	ldr	ip, [sp, #60]	; 0x3c
    d588:	mov	r3, #0
    d58c:	add	r2, sp, #64	; 0x40
    d590:	ldr	r0, [sp, #40]	; 0x28
    d594:	ldr	r1, [sp, #44]	; 0x2c
    d598:	ldr	fp, [ip, #4]
    d59c:	bl	d224 <__assert_fail@plt+0x44c8>
    d5a0:	ldr	r3, [sp, #64]	; 0x40
    d5a4:	cmp	r9, #0
    d5a8:	ldr	r3, [r3, #4]
    d5ac:	str	r3, [sp, #16]
    d5b0:	beq	d8a0 <__assert_fail@plt+0x4b44>
    d5b4:	ldr	r3, [r8]
    d5b8:	add	r8, sp, #72	; 0x48
    d5bc:	ldr	r2, [r3, #12]
    d5c0:	str	r3, [r8, #-24]!	; 0xffffffe8
    d5c4:	add	r2, r2, #1
    d5c8:	str	r2, [r3, #12]
    d5cc:	ldr	sl, [sp, #60]	; 0x3c
    d5d0:	mov	r0, sl
    d5d4:	bl	d13c <__assert_fail@plt+0x43e0>
    d5d8:	cmp	r0, #0
    d5dc:	bne	d5fc <__assert_fail@plt+0x48a0>
    d5e0:	ldr	r2, [sp, #64]	; 0x40
    d5e4:	mov	r0, r2
    d5e8:	str	r2, [sp, #12]
    d5ec:	bl	d13c <__assert_fail@plt+0x43e0>
    d5f0:	ldr	r2, [sp, #12]
    d5f4:	cmp	r0, #0
    d5f8:	beq	d904 <__assert_fail@plt+0x4ba8>
    d5fc:	ldr	r3, [r7]
    d600:	add	sl, sp, #72	; 0x48
    d604:	ldr	r2, [r3, #12]
    d608:	str	r3, [sl, #-20]!	; 0xffffffec
    d60c:	add	r2, r2, #1
    d610:	str	r2, [r3, #12]
    d614:	ldr	fp, [sp, #32]
    d618:	mov	r0, fp
    d61c:	bl	d13c <__assert_fail@plt+0x43e0>
    d620:	cmp	r0, #0
    d624:	bne	d644 <__assert_fail@plt+0x48e8>
    d628:	ldr	r2, [sp, #40]	; 0x28
    d62c:	mov	r0, r2
    d630:	str	r2, [sp, #12]
    d634:	bl	d13c <__assert_fail@plt+0x43e0>
    d638:	ldr	r2, [sp, #12]
    d63c:	cmp	r0, #0
    d640:	beq	d920 <__assert_fail@plt+0x4bc4>
    d644:	ldr	r3, [r7]
    d648:	add	r7, sp, #72	; 0x48
    d64c:	ldr	r2, [r3, #12]
    d650:	str	r3, [r7, #-16]!
    d654:	add	r2, r2, #1
    d658:	str	r2, [r3, #12]
    d65c:	add	r0, r4, #1
    d660:	mov	r1, #0
    d664:	bl	cad4 <__assert_fail@plt+0x3d78>
    d668:	cmp	r9, #0
    d66c:	str	r0, [r5]
    d670:	movne	r0, r0
    d674:	beq	d8c0 <__assert_fail@plt+0x4b64>
    d678:	ldr	r2, [sp, #56]	; 0x38
    d67c:	mov	r4, #0
    d680:	mov	r3, r6
    d684:	ldr	r1, [r2, #4]
    d688:	ldr	r2, [r2, #24]
    d68c:	str	r4, [sp]
    d690:	bl	c78c <__assert_fail@plt+0x3a30>
    d694:	ldr	r2, [sp, #56]	; 0x38
    d698:	ldr	r0, [r5]
    d69c:	mov	r3, r4
    d6a0:	ldr	r1, [r2, #4]
    d6a4:	ldr	r2, [r2, #24]
    d6a8:	str	r4, [sp]
    d6ac:	bl	c78c <__assert_fail@plt+0x3a30>
    d6b0:	ldr	lr, [sp, #60]	; 0x3c
    d6b4:	ldr	ip, [sp, #64]	; 0x40
    d6b8:	mov	r3, r6
    d6bc:	ldr	r2, [sp, #52]	; 0x34
    d6c0:	ldr	lr, [lr]
    d6c4:	ldr	ip, [ip]
    d6c8:	ldr	r1, [r2, #4]
    d6cc:	subs	ip, lr, ip
    d6d0:	ldr	r2, [r2, #24]
    d6d4:	ldr	r0, [r5]
    d6d8:	movne	ip, #1
    d6dc:	str	ip, [sp]
    d6e0:	bl	c78c <__assert_fail@plt+0x3a30>
    d6e4:	add	r0, sp, #36	; 0x24
    d6e8:	bl	d004 <__assert_fail@plt+0x42a8>
    d6ec:	add	r0, sp, #32
    d6f0:	bl	d004 <__assert_fail@plt+0x42a8>
    d6f4:	add	r0, sp, #44	; 0x2c
    d6f8:	bl	d004 <__assert_fail@plt+0x42a8>
    d6fc:	mov	r0, r8
    d700:	bl	d004 <__assert_fail@plt+0x42a8>
    d704:	add	r0, sp, #40	; 0x28
    d708:	bl	d004 <__assert_fail@plt+0x42a8>
    d70c:	mov	r0, sl
    d710:	bl	d004 <__assert_fail@plt+0x42a8>
    d714:	mov	r0, r7
    d718:	bl	d004 <__assert_fail@plt+0x42a8>
    d71c:	add	r0, sp, #60	; 0x3c
    d720:	bl	d004 <__assert_fail@plt+0x42a8>
    d724:	add	r0, sp, #64	; 0x40
    d728:	bl	d004 <__assert_fail@plt+0x42a8>
    d72c:	b	d820 <__assert_fail@plt+0x4ac4>
    d730:	mov	r1, #0
    d734:	add	r0, r4, #1
    d738:	bl	cad4 <__assert_fail@plt+0x3d78>
    d73c:	cmp	r4, #0
    d740:	sub	r1, r8, #1
    d744:	sub	sl, sl, #1
    d748:	str	r1, [sp, #24]
    d74c:	str	r0, [r5]
    d750:	ldr	r5, [fp, #24]
    d754:	ldr	r7, [r0, #24]
    d758:	ldr	r0, [r9, #24]
    d75c:	add	r5, r5, r1
    d760:	add	r7, r7, r4
    d764:	add	sl, r0, sl
    d768:	ble	d8fc <__assert_fail@plt+0x4ba0>
    d76c:	mov	r6, #0
    d770:	movw	fp, #26215	; 0x6667
    d774:	movt	fp, #26214	; 0x6666
    d778:	mov	ip, r6
    d77c:	rsb	r4, r4, #0
    d780:	rsb	r2, r1, #0
    d784:	str	r4, [sp, #16]
    d788:	str	r2, [sp, #20]
    d78c:	add	r3, r8, r6
    d790:	rsb	r2, r6, #0
    d794:	rsb	r3, r3, #0
    d798:	cmn	r3, #1
    d79c:	ldrge	r1, [sp, #24]
    d7a0:	movlt	r3, #0
    d7a4:	addge	r3, r1, r6
    d7a8:	cmp	r8, r2
    d7ac:	ldr	r2, [sp, #20]
    d7b0:	add	r3, sl, r3
    d7b4:	movgt	r2, r6
    d7b8:	cmp	r3, r0
    d7bc:	add	r2, r5, r2
    d7c0:	bcs	d7dc <__assert_fail@plt+0x4a80>
    d7c4:	b	d7e4 <__assert_fail@plt+0x4a88>
    d7c8:	ldrb	r4, [r3], #-1
    d7cc:	ldrb	r1, [r2], #1
    d7d0:	cmp	r3, r0
    d7d4:	mla	ip, r4, r1, ip
    d7d8:	bcc	d7e4 <__assert_fail@plt+0x4a88>
    d7dc:	cmp	r5, r2
    d7e0:	bcs	d7c8 <__assert_fail@plt+0x4a6c>
    d7e4:	smull	r3, r2, fp, ip
    d7e8:	asr	r3, ip, #31
    d7ec:	ldr	r1, [sp, #16]
    d7f0:	rsb	r3, r3, r2, asr #2
    d7f4:	add	r2, r3, r3, lsl #2
    d7f8:	sub	ip, ip, r2, lsl #1
    d7fc:	strb	ip, [r7, r6]
    d800:	sub	r6, r6, #1
    d804:	mov	ip, r3
    d808:	cmp	r6, r1
    d80c:	ldrne	r0, [r9, #24]
    d810:	bne	d78c <__assert_fail@plt+0x4a30>
    d814:	add	r7, r7, r6
    d818:	uxtb	ip, r3
    d81c:	strb	ip, [r7]
    d820:	ldr	r1, [sp, #28]
    d824:	ldr	r2, [sp, #68]	; 0x44
    d828:	ldr	r3, [r1]
    d82c:	cmp	r2, r3
    d830:	bne	d93c <__assert_fail@plt+0x4be0>
    d834:	add	sp, sp, #76	; 0x4c
    d838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d83c:	movw	r7, #38200	; 0x9538
    d840:	movt	r7, #1
    d844:	mov	r0, r1
    d848:	ldr	r1, [r9, #24]
    d84c:	ldr	r3, [r7]
    d850:	ldr	r2, [r3, #12]
    d854:	str	r3, [sp, #36]	; 0x24
    d858:	add	r2, r2, #1
    d85c:	str	r2, [r3, #12]
    d860:	bl	c8f4 <__assert_fail@plt+0x3b98>
    d864:	cmp	r8, r6
    d868:	str	r0, [sp, #32]
    d86c:	blt	d3d8 <__assert_fail@plt+0x467c>
    d870:	rsb	r8, r6, r8
    d874:	ldr	r1, [fp, #24]
    d878:	mov	r0, r8
    d87c:	bl	c8f4 <__assert_fail@plt+0x3b98>
    d880:	ldr	r1, [fp, #24]
    d884:	add	r1, r1, r8
    d888:	str	r0, [sp, #44]	; 0x2c
    d88c:	mov	r0, r6
    d890:	bl	c8f4 <__assert_fail@plt+0x3b98>
    d894:	mov	r1, r0
    d898:	str	r0, [sp, #40]	; 0x28
    d89c:	b	d400 <__assert_fail@plt+0x46a4>
    d8a0:	ldr	r0, [sp, #36]	; 0x24
    d8a4:	add	r8, sp, #48	; 0x30
    d8a8:	ldr	r2, [sp, #44]	; 0x2c
    d8ac:	ldr	r1, [r0, #4]
    d8b0:	ldr	r3, [r2, #4]
    d8b4:	str	r8, [sp]
    d8b8:	bl	d318 <__assert_fail@plt+0x45bc>
    d8bc:	b	d5cc <__assert_fail@plt+0x4870>
    d8c0:	ldr	r2, [sp, #48]	; 0x30
    d8c4:	lsl	r3, r6, #1
    d8c8:	ldr	r1, [r2, #4]
    d8cc:	ldr	r2, [r2, #24]
    d8d0:	str	r9, [sp]
    d8d4:	bl	c78c <__assert_fail@plt+0x3a30>
    d8d8:	ldr	r2, [sp, #48]	; 0x30
    d8dc:	ldr	r0, [r5]
    d8e0:	mov	r3, r6
    d8e4:	ldr	r1, [r2, #4]
    d8e8:	ldr	r2, [r2, #24]
    d8ec:	str	r9, [sp]
    d8f0:	bl	c78c <__assert_fail@plt+0x3a30>
    d8f4:	ldr	r0, [r5]
    d8f8:	b	d678 <__assert_fail@plt+0x491c>
    d8fc:	mov	ip, #0
    d900:	b	d81c <__assert_fail@plt+0x4ac0>
    d904:	mov	r0, sl
    d908:	mov	r1, fp
    d90c:	add	sl, sp, #52	; 0x34
    d910:	ldr	r3, [sp, #16]
    d914:	str	sl, [sp]
    d918:	bl	d318 <__assert_fail@plt+0x45bc>
    d91c:	b	d614 <__assert_fail@plt+0x48b8>
    d920:	ldr	r1, [fp, #4]
    d924:	add	r7, sp, #56	; 0x38
    d928:	ldr	r3, [r2, #4]
    d92c:	mov	r0, fp
    d930:	str	r7, [sp]
    d934:	bl	d318 <__assert_fail@plt+0x45bc>
    d938:	b	d65c <__assert_fail@plt+0x4900>
    d93c:	bl	8bdc <__stack_chk_fail@plt>
    d940:	push	{r4, r5, r6, r7, r8, lr}
    d944:	mov	r5, r0
    d948:	ldr	ip, [r0]
    d94c:	mov	r6, r1
    d950:	ldr	lr, [r1]
    d954:	mov	r4, r2
    d958:	mov	r7, r3
    d95c:	cmp	ip, lr
    d960:	beq	da10 <__assert_fail@plt+0x4cb4>
    d964:	mov	r2, #0
    d968:	bl	c96c <__assert_fail@plt+0x3c10>
    d96c:	subs	r8, r0, #0
    d970:	beq	d9d4 <__assert_fail@plt+0x4c78>
    d974:	cmp	r8, #1
    d978:	beq	d9b4 <__assert_fail@plt+0x4c58>
    d97c:	cmn	r8, #1
    d980:	movne	r7, #0
    d984:	bne	d9a4 <__assert_fail@plt+0x4c48>
    d988:	mov	r2, r7
    d98c:	mov	r1, r5
    d990:	mov	r0, r6
    d994:	bl	cdb8 <__assert_fail@plt+0x405c>
    d998:	ldr	r3, [r6]
    d99c:	mov	r7, r0
    d9a0:	str	r3, [r0]
    d9a4:	mov	r0, r4
    d9a8:	bl	d004 <__assert_fail@plt+0x42a8>
    d9ac:	str	r7, [r4]
    d9b0:	pop	{r4, r5, r6, r7, r8, pc}
    d9b4:	mov	r2, r7
    d9b8:	mov	r1, r6
    d9bc:	mov	r0, r5
    d9c0:	bl	cdb8 <__assert_fail@plt+0x405c>
    d9c4:	ldr	r3, [r5]
    d9c8:	mov	r7, r0
    d9cc:	str	r3, [r0]
    d9d0:	b	d9a4 <__assert_fail@plt+0x4c48>
    d9d4:	ldr	r3, [r6, #8]
    d9d8:	mov	r0, #1
    d9dc:	ldr	r5, [r5, #8]
    d9e0:	cmp	r5, r3
    d9e4:	movlt	r5, r3
    d9e8:	cmp	r5, r7
    d9ec:	movlt	r5, r7
    d9f0:	mov	r1, r5
    d9f4:	bl	cad4 <__assert_fail@plt+0x3d78>
    d9f8:	add	r2, r5, #1
    d9fc:	mov	r1, r8
    da00:	mov	r7, r0
    da04:	ldr	r0, [r0, #24]
    da08:	bl	8ce4 <memset@plt>
    da0c:	b	d9a4 <__assert_fail@plt+0x4c48>
    da10:	mov	r2, r3
    da14:	bl	cb78 <__assert_fail@plt+0x3e1c>
    da18:	ldr	r3, [r5]
    da1c:	mov	r7, r0
    da20:	str	r3, [r0]
    da24:	b	d9a4 <__assert_fail@plt+0x4c48>
    da28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da2c:	movw	r5, #37072	; 0x90d0
    da30:	ldr	ip, [r1, #8]
    da34:	movt	r5, #1
    da38:	ldr	r9, [r0, #8]
    da3c:	sub	sp, sp, #28
    da40:	ldr	sl, [r0, #4]
    da44:	mov	r7, r1
    da48:	ldr	fp, [r1, #4]
    da4c:	cmp	ip, r9
    da50:	movge	r4, ip
    da54:	movlt	r4, r9
    da58:	add	sl, r9, sl
    da5c:	ldr	lr, [r5]
    da60:	add	fp, ip, fp
    da64:	cmp	r4, r3
    da68:	movlt	r4, r3
    da6c:	add	r9, r9, ip
    da70:	mov	r1, sl
    da74:	mov	r3, fp
    da78:	add	ip, sp, #16
    da7c:	mov	r6, r2
    da80:	str	ip, [sp]
    da84:	mov	r2, r7
    da88:	cmp	r4, r9
    da8c:	movge	r4, r9
    da90:	mov	r8, r0
    da94:	str	r4, [sp, #12]
    da98:	str	lr, [sp, #20]
    da9c:	bl	d318 <__assert_fail@plt+0x45bc>
    daa0:	ldr	r4, [sp, #16]
    daa4:	add	sl, fp, sl
    daa8:	ldr	r0, [r8]
    daac:	add	r1, sl, #1
    dab0:	ldr	r2, [r7]
    dab4:	rsb	r9, r9, r1
    dab8:	ldr	r3, [r4, #20]
    dabc:	ldr	r1, [sp, #12]
    dac0:	subs	r2, r0, r2
    dac4:	str	r3, [r4, #24]
    dac8:	movne	r2, #1
    dacc:	str	r1, [r4, #8]
    dad0:	stm	r4, {r2, r9}
    dad4:	ldrb	r2, [r3]
    dad8:	cmp	r2, #0
    dadc:	bne	db14 <__assert_fail@plt+0x4db8>
    dae0:	cmp	r9, #1
    dae4:	ble	db14 <__assert_fail@plt+0x4db8>
    dae8:	sub	r1, r9, #1
    daec:	add	r3, r3, #1
    daf0:	b	dafc <__assert_fail@plt+0x4da0>
    daf4:	subs	r1, r1, #1
    daf8:	beq	db14 <__assert_fail@plt+0x4db8>
    dafc:	str	r3, [r4, #24]
    db00:	add	r3, r3, #1
    db04:	str	r1, [r4, #4]
    db08:	ldrb	ip, [r3, #-1]
    db0c:	cmp	ip, #0
    db10:	beq	daf4 <__assert_fail@plt+0x4d98>
    db14:	mov	r0, r4
    db18:	bl	d13c <__assert_fail@plt+0x43e0>
    db1c:	cmp	r0, #0
    db20:	mov	r0, r6
    db24:	movne	r3, #0
    db28:	strne	r3, [r4]
    db2c:	bl	d004 <__assert_fail@plt+0x42a8>
    db30:	ldr	r3, [sp, #16]
    db34:	ldr	r2, [sp, #20]
    db38:	str	r3, [r6]
    db3c:	ldr	r3, [r5]
    db40:	cmp	r2, r3
    db44:	bne	db50 <__assert_fail@plt+0x4df4>
    db48:	add	sp, sp, #28
    db4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db50:	bl	8bdc <__stack_chk_fail@plt>
    db54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db58:	sub	sp, sp, #60	; 0x3c
    db5c:	mov	r7, r3
    db60:	str	r0, [sp, #12]
    db64:	mov	r0, r1
    db68:	str	r1, [sp, #4]
    db6c:	str	r2, [sp, #32]
    db70:	bl	d13c <__assert_fail@plt+0x43e0>
    db74:	cmp	r0, #0
    db78:	bne	e12c <__assert_fail@plt+0x53d0>
    db7c:	ldr	r5, [sp, #4]
    db80:	ldr	r6, [r5, #8]
    db84:	cmp	r6, #0
    db88:	beq	e034 <__assert_fail@plt+0x52d8>
    db8c:	ldr	ip, [sp, #4]
    db90:	cmp	r6, #0
    db94:	ldr	r2, [ip, #4]
    db98:	ldr	r1, [ip, #24]
    db9c:	sub	r2, r2, #1
    dba0:	add	r2, r2, r6
    dba4:	add	r3, r1, r2
    dba8:	beq	dbd0 <__assert_fail@plt+0x4e74>
    dbac:	ldrb	r2, [r1, r2]
    dbb0:	cmp	r2, #0
    dbb4:	beq	dbc8 <__assert_fail@plt+0x4e6c>
    dbb8:	b	dbd0 <__assert_fail@plt+0x4e74>
    dbbc:	ldrb	r2, [r3, #-1]!
    dbc0:	cmp	r2, #0
    dbc4:	bne	dbd0 <__assert_fail@plt+0x4e74>
    dbc8:	subs	r6, r6, #1
    dbcc:	bne	dbbc <__assert_fail@plt+0x4e60>
    dbd0:	ldr	r5, [sp, #12]
    dbd4:	ldmib	r5, {r2, r3}
    dbd8:	rsb	r8, r6, r3
    dbdc:	add	r4, r2, r3
    dbe0:	cmp	r7, r8
    dbe4:	add	r4, r4, #2
    dbe8:	rsbgt	ip, r8, r7
    dbec:	add	r5, r6, r2
    dbf0:	movle	ip, #0
    dbf4:	str	ip, [sp]
    dbf8:	ldr	r3, [sp]
    dbfc:	add	r4, r4, r3
    dc00:	mov	r0, r4
    dc04:	bl	8c30 <malloc@plt>
    dc08:	cmp	r0, #0
    dc0c:	str	r0, [sp, #8]
    dc10:	beq	e10c <__assert_fail@plt+0x53b0>
    dc14:	mov	r2, r4
    dc18:	mov	r1, #0
    dc1c:	ldr	r0, [sp, #8]
    dc20:	bl	8ce4 <memset@plt>
    dc24:	ldr	ip, [sp, #12]
    dc28:	ldmib	ip, {r2, r3}
    dc2c:	ldr	ip, [sp, #8]
    dc30:	add	r2, r2, r3
    dc34:	add	r0, ip, #1
    dc38:	ldr	ip, [sp, #12]
    dc3c:	ldr	r1, [ip, #24]
    dc40:	bl	8bb8 <memcpy@plt>
    dc44:	ldr	ip, [sp, #4]
    dc48:	ldr	r3, [ip, #4]
    dc4c:	add	r6, r6, r3
    dc50:	add	ip, r6, #1
    dc54:	str	ip, [sp, #20]
    dc58:	mov	r0, ip
    dc5c:	bl	8c30 <malloc@plt>
    dc60:	cmp	r0, #0
    dc64:	str	r0, [sp, #16]
    dc68:	beq	e0fc <__assert_fail@plt+0x53a0>
    dc6c:	ldr	ip, [sp, #4]
    dc70:	mov	r2, r6
    dc74:	ldr	r0, [sp, #16]
    dc78:	ldr	r1, [ip, #24]
    dc7c:	bl	8bb8 <memcpy@plt>
    dc80:	ldr	ip, [sp, #16]
    dc84:	mov	r3, #0
    dc88:	strb	r3, [ip, r6]
    dc8c:	ldrb	r3, [ip]
    dc90:	cmp	r3, #0
    dc94:	bne	e0f4 <__assert_fail@plt+0x5398>
    dc98:	add	r3, ip, #1
    dc9c:	ldrb	r2, [r3]
    dca0:	mov	r4, r3
    dca4:	sub	r6, r6, #1
    dca8:	add	r3, r3, #1
    dcac:	cmp	r2, #0
    dcb0:	beq	dc9c <__assert_fail@plt+0x4f40>
    dcb4:	add	ip, r6, #1
    dcb8:	str	ip, [sp, #20]
    dcbc:	add	sl, r5, r7
    dcc0:	add	fp, r7, #1
    dcc4:	cmp	sl, r6
    dcc8:	movcc	r9, #1
    dccc:	bcs	e020 <__assert_fail@plt+0x52c4>
    dcd0:	mov	r1, r7
    dcd4:	rsb	r0, r7, fp
    dcd8:	bl	cad4 <__assert_fail@plt+0x3d78>
    dcdc:	mov	r2, fp
    dce0:	mov	r1, #0
    dce4:	mov	r7, r0
    dce8:	ldr	r0, [r0, #24]
    dcec:	bl	8ce4 <memset@plt>
    dcf0:	ldr	r0, [sp, #20]
    dcf4:	bl	8c30 <malloc@plt>
    dcf8:	cmp	r0, #0
    dcfc:	str	r0, [sp, #24]
    dd00:	beq	e104 <__assert_fail@plt+0x53a8>
    dd04:	cmp	r9, #0
    dd08:	bne	df74 <__assert_fail@plt+0x5218>
    dd0c:	ldrb	r9, [r4]
    dd10:	mov	r0, #10
    dd14:	add	r1, r9, #1
    dd18:	bl	f258 <__assert_fail@plt+0x64fc>
    dd1c:	cmp	r0, #1
    dd20:	mov	fp, r0
    dd24:	beq	dd60 <__assert_fail@plt+0x5004>
    dd28:	ldr	r0, [sp, #8]
    dd2c:	add	r1, r5, r8
    dd30:	ldr	r3, [sp]
    dd34:	add	r1, r1, #1
    dd38:	mov	r2, fp
    dd3c:	add	r1, r1, r3
    dd40:	mov	r3, r0
    dd44:	bl	c6ec <__assert_fail@plt+0x3990>
    dd48:	mov	r0, r4
    dd4c:	mov	r1, r6
    dd50:	mov	r2, fp
    dd54:	mov	r3, r4
    dd58:	bl	c6ec <__assert_fail@plt+0x3990>
    dd5c:	ldrb	r9, [r4]
    dd60:	cmp	r5, r6
    dd64:	ldr	ip, [sp, #8]
    dd68:	rsbcc	r5, r5, r6
    dd6c:	rsb	sl, r6, sl
    dd70:	ldrcs	r5, [r7, #24]
    dd74:	sub	r2, ip, #1
    dd78:	ldrcc	r3, [r7, #24]
    dd7c:	add	r2, r2, r6
    dd80:	str	sl, [sp]
    dd84:	mov	sl, #0
    dd88:	addcc	r3, r3, r5
    dd8c:	strcs	r5, [sp, #36]	; 0x24
    dd90:	ldr	r5, [sp, #20]
    dd94:	strcc	r3, [sp, #36]	; 0x24
    dd98:	sub	r3, r6, #1
    dd9c:	rsb	r2, r5, r2
    dda0:	ldr	r5, [sp, #8]
    dda4:	add	r3, r4, r3
    dda8:	str	r6, [sp, #28]
    ddac:	add	ip, r5, r6
    ddb0:	movw	r5, #26215	; 0x6667
    ddb4:	movt	r5, #26214	; 0x6666
    ddb8:	str	r5, [sp, #48]	; 0x30
    ddbc:	ldr	r5, [sp, #36]	; 0x24
    ddc0:	mov	r6, r4
    ddc4:	str	r2, [sp, #44]	; 0x2c
    ddc8:	mov	fp, ip
    ddcc:	str	r3, [sp, #40]	; 0x28
    ddd0:	ldr	r8, [sp, #8]
    ddd4:	mov	r4, r5
    ddd8:	str	r7, [sp, #52]	; 0x34
    dddc:	b	ddfc <__assert_fail@plt+0x50a0>
    dde0:	ldr	ip, [sp]
    dde4:	add	r8, r8, #1
    dde8:	strb	r5, [r4], #1
    ddec:	add	fp, fp, #1
    ddf0:	cmp	ip, sl
    ddf4:	bcc	df70 <__assert_fail@plt+0x5214>
    ddf8:	ldrb	r9, [r6]
    ddfc:	ldrb	r3, [r8]
    de00:	add	sl, sl, #1
    de04:	cmp	r3, r9
    de08:	beq	e048 <__assert_fail@plt+0x52ec>
    de0c:	ldrb	r2, [r8, #1]
    de10:	mov	r7, #10
    de14:	mov	r1, r9
    de18:	smlabb	r7, r7, r3, r2
    de1c:	mov	r0, r7
    de20:	bl	f258 <__assert_fail@plt+0x64fc>
    de24:	mov	r5, r0
    de28:	mul	lr, r9, r5
    de2c:	ldrb	r1, [r6, #1]
    de30:	ldrb	r2, [r8, #2]
    de34:	rsb	r3, lr, r7
    de38:	mul	r0, r1, r5
    de3c:	add	r3, r3, r3, lsl #2
    de40:	add	r3, r2, r3, lsl #1
    de44:	cmp	r0, r3
    de48:	bls	de70 <__assert_fail@plt+0x5114>
    de4c:	rsb	r9, r9, lr
    de50:	rsb	r1, r1, r0
    de54:	rsb	r7, r9, r7
    de58:	sub	r3, r5, #1
    de5c:	add	r7, r7, r7, lsl #2
    de60:	add	r2, r2, r7, lsl #1
    de64:	cmp	r1, r2
    de68:	subhi	r5, r5, #2
    de6c:	movls	r5, r3
    de70:	cmp	r5, #0
    de74:	beq	dde0 <__assert_fail@plt+0x5084>
    de78:	ldr	r3, [sp, #24]
    de7c:	mov	r7, #0
    de80:	ldr	r1, [sp, #28]
    de84:	mov	r2, r5
    de88:	mov	r0, r6
    de8c:	strb	r7, [r3], #1
    de90:	bl	c6ec <__assert_fail@plt+0x3990>
    de94:	ldr	ip, [sp, #20]
    de98:	ldr	r2, [sp, #28]
    de9c:	cmp	ip, r7
    dea0:	ldr	ip, [sp, #24]
    dea4:	add	r1, ip, r2
    dea8:	beq	dde0 <__assert_fail@plt+0x5084>
    deac:	ldr	ip, [sp, #44]	; 0x2c
    deb0:	mov	r2, r7
    deb4:	mov	r3, fp
    deb8:	add	lr, ip, sl
    debc:	ldrb	ip, [r3], #-1
    dec0:	ldrb	r0, [r1], #-1
    dec4:	rsb	r0, r0, ip
    dec8:	subs	r0, r0, r2
    decc:	mov	r2, #0
    ded0:	addmi	r0, r0, #10
    ded4:	strb	r0, [r3, #1]
    ded8:	movmi	r2, #1
    dedc:	cmp	r3, lr
    dee0:	bne	debc <__assert_fail@plt+0x5160>
    dee4:	cmp	r2, #1
    dee8:	bne	dde0 <__assert_fail@plt+0x5084>
    deec:	ldr	ip, [sp, #28]
    def0:	sub	r5, r5, #1
    def4:	ldr	r1, [sp, #40]	; 0x28
    def8:	cmp	ip, #0
    defc:	beq	dde0 <__assert_fail@plt+0x5084>
    df00:	ldr	r2, [sp, #36]	; 0x24
    df04:	mov	r3, fp
    df08:	ldr	ip, [sp, #8]
    df0c:	rsb	r7, r2, ip
    df10:	mov	r2, #0
    df14:	add	r7, r4, r7
    df18:	ldrb	ip, [r3], #-1
    df1c:	ldrb	r0, [r1], #-1
    df20:	add	r0, ip, r0
    df24:	add	r0, r2, r0
    df28:	mov	r2, #1
    df2c:	cmp	r0, #9
    df30:	subgt	r0, r0, #10
    df34:	strb	r0, [r3, #1]
    df38:	movle	r2, #0
    df3c:	cmp	r3, r7
    df40:	bne	df18 <__assert_fail@plt+0x51bc>
    df44:	cmp	r2, #1
    df48:	bne	dde0 <__assert_fail@plt+0x5084>
    df4c:	ldrb	r3, [r8]
    df50:	ldr	ip, [sp, #48]	; 0x30
    df54:	add	r3, r3, #1
    df58:	smull	ip, r2, ip, r3
    df5c:	lsr	r2, r2, #2
    df60:	add	r2, r2, r2, lsl #2
    df64:	sub	r3, r3, r2, lsl #1
    df68:	strb	r3, [r8]
    df6c:	b	dde0 <__assert_fail@plt+0x5084>
    df70:	ldr	r7, [sp, #52]	; 0x34
    df74:	ldr	ip, [sp, #4]
    df78:	mov	r0, r7
    df7c:	ldr	r5, [sp, #12]
    df80:	ldr	r3, [ip]
    df84:	ldr	r2, [r5]
    df88:	subs	r3, r2, r3
    df8c:	movne	r3, #1
    df90:	str	r3, [r7]
    df94:	bl	d13c <__assert_fail@plt+0x43e0>
    df98:	cmp	r0, #0
    df9c:	movne	r3, #0
    dfa0:	strne	r3, [r7]
    dfa4:	ldr	r3, [r7, #24]
    dfa8:	ldrb	r2, [r3]
    dfac:	cmp	r2, #0
    dfb0:	bne	dfec <__assert_fail@plt+0x5290>
    dfb4:	ldr	r2, [r7, #4]
    dfb8:	cmp	r2, #1
    dfbc:	ble	dfec <__assert_fail@plt+0x5290>
    dfc0:	sub	r2, r2, #1
    dfc4:	add	r3, r3, #1
    dfc8:	b	dfd4 <__assert_fail@plt+0x5278>
    dfcc:	subs	r2, r2, #1
    dfd0:	beq	dfec <__assert_fail@plt+0x5290>
    dfd4:	str	r3, [r7, #24]
    dfd8:	add	r3, r3, #1
    dfdc:	str	r2, [r7, #4]
    dfe0:	ldrb	r1, [r3, #-1]
    dfe4:	cmp	r1, #0
    dfe8:	beq	dfcc <__assert_fail@plt+0x5270>
    dfec:	ldr	r0, [sp, #32]
    dff0:	bl	d004 <__assert_fail@plt+0x42a8>
    dff4:	ldr	r5, [sp, #32]
    dff8:	ldr	r0, [sp, #24]
    dffc:	str	r7, [r5]
    e000:	bl	8ba0 <free@plt>
    e004:	ldr	r0, [sp, #8]
    e008:	bl	8ba0 <free@plt>
    e00c:	ldr	r0, [sp, #16]
    e010:	bl	8ba0 <free@plt>
    e014:	mov	r0, #0
    e018:	add	sp, sp, #60	; 0x3c
    e01c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e020:	cmp	r5, r6
    e024:	mov	r9, #0
    e028:	addcs	fp, fp, r5
    e02c:	rsbcs	fp, r6, fp
    e030:	b	dcd0 <__assert_fail@plt+0x4f74>
    e034:	ldr	r3, [r5, #4]
    e038:	cmp	r3, #1
    e03c:	beq	e05c <__assert_fail@plt+0x5300>
    e040:	mov	r6, #0
    e044:	b	dbd0 <__assert_fail@plt+0x4e74>
    e048:	ldrb	r3, [r8, #1]
    e04c:	mov	r7, #10
    e050:	mov	r5, #9
    e054:	smlabb	r7, r7, r9, r3
    e058:	b	de28 <__assert_fail@plt+0x50cc>
    e05c:	ldr	ip, [sp, #4]
    e060:	ldr	r3, [ip, #24]
    e064:	ldrb	r3, [r3]
    e068:	cmp	r3, #1
    e06c:	bne	e040 <__assert_fail@plt+0x52e4>
    e070:	ldr	r5, [sp, #12]
    e074:	mov	r1, r7
    e078:	ldr	r0, [r5, #4]
    e07c:	bl	cad4 <__assert_fail@plt+0x3d78>
    e080:	ldr	lr, [r5]
    e084:	ldr	r5, [sp, #4]
    e088:	mov	r1, r6
    e08c:	mov	r2, r7
    e090:	ldr	ip, [r5]
    e094:	ldr	r5, [sp, #12]
    e098:	subs	ip, lr, ip
    e09c:	ldr	r3, [r5, #4]
    e0a0:	movne	ip, #1
    e0a4:	mov	r4, r0
    e0a8:	ldr	r0, [r0, #24]
    e0ac:	str	ip, [r4]
    e0b0:	add	r0, r0, r3
    e0b4:	bl	8ce4 <memset@plt>
    e0b8:	ldr	r3, [r5, #4]
    e0bc:	ldr	r2, [r5, #8]
    e0c0:	ldr	r1, [r5, #24]
    e0c4:	cmp	r7, r2
    e0c8:	addle	r2, r3, r7
    e0cc:	addgt	r2, r3, r2
    e0d0:	ldr	r0, [r4, #24]
    e0d4:	bl	8bb8 <memcpy@plt>
    e0d8:	ldr	r0, [sp, #32]
    e0dc:	bl	d004 <__assert_fail@plt+0x42a8>
    e0e0:	ldr	ip, [sp, #4]
    e0e4:	ldr	r5, [sp, #32]
    e0e8:	ldr	r6, [ip, #8]
    e0ec:	str	r4, [r5]
    e0f0:	b	db8c <__assert_fail@plt+0x4e30>
    e0f4:	ldr	r4, [sp, #16]
    e0f8:	b	dcbc <__assert_fail@plt+0x4f60>
    e0fc:	bl	c3b0 <__assert_fail@plt+0x3654>
    e100:	b	dc6c <__assert_fail@plt+0x4f10>
    e104:	bl	c3b0 <__assert_fail@plt+0x3654>
    e108:	b	dd04 <__assert_fail@plt+0x4fa8>
    e10c:	bl	c3b0 <__assert_fail@plt+0x3654>
    e110:	ldr	ip, [sp, #12]
    e114:	ldmib	ip, {r3, r4}
    e118:	add	r4, r4, r3
    e11c:	ldr	r3, [sp]
    e120:	add	r4, r4, #2
    e124:	add	r4, r4, r3
    e128:	b	dc14 <__assert_fail@plt+0x4eb8>
    e12c:	mvn	r0, #0
    e130:	b	e018 <__assert_fail@plt+0x52bc>
    e134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e138:	movw	r5, #37072	; 0x90d0
    e13c:	movt	r5, #1
    e140:	mov	r6, r1
    e144:	sub	sp, sp, #20
    e148:	mov	r7, r0
    e14c:	ldr	r1, [r5]
    e150:	mov	r0, r6
    e154:	mov	r8, r2
    e158:	mov	sl, r3
    e15c:	ldr	r9, [sp, #56]	; 0x38
    e160:	str	r1, [sp, #12]
    e164:	bl	d13c <__assert_fail@plt+0x43e0>
    e168:	subs	fp, r0, #0
    e16c:	bne	e268 <__assert_fail@plt+0x550c>
    e170:	movw	r3, #38200	; 0x9538
    e174:	movt	r3, #1
    e178:	ldr	r1, [r6, #8]
    e17c:	add	r4, sp, #16
    e180:	ldr	ip, [r3]
    e184:	mov	r3, r9
    e188:	ldr	r2, [r7, #8]
    e18c:	add	r9, r9, r1
    e190:	mov	r0, r7
    e194:	mov	r1, r6
    e198:	ldr	lr, [ip, #12]
    e19c:	cmp	r9, r2
    e1a0:	movlt	r9, r2
    e1a4:	str	ip, [r4, #-8]!
    e1a8:	mov	r2, r4
    e1ac:	add	lr, lr, #1
    e1b0:	str	lr, [ip, #12]
    e1b4:	bl	db54 <__assert_fail@plt+0x4df8>
    e1b8:	cmp	r8, #0
    e1bc:	beq	e230 <__assert_fail@plt+0x54d4>
    e1c0:	ldr	ip, [sp, #8]
    e1c4:	mov	r1, r6
    e1c8:	mov	r2, r4
    e1cc:	mov	r3, r9
    e1d0:	ldr	lr, [ip, #12]
    e1d4:	mov	r0, ip
    e1d8:	add	lr, lr, #1
    e1dc:	str	lr, [ip, #12]
    e1e0:	str	ip, [sp, #4]
    e1e4:	bl	da28 <__assert_fail@plt+0x4ccc>
    e1e8:	mov	r2, sl
    e1ec:	mov	r3, r9
    e1f0:	ldr	r1, [sp, #8]
    e1f4:	mov	r0, r7
    e1f8:	bl	d224 <__assert_fail@plt+0x44c8>
    e1fc:	mov	r0, r4
    e200:	bl	d004 <__assert_fail@plt+0x42a8>
    e204:	mov	r0, r8
    e208:	bl	d004 <__assert_fail@plt+0x42a8>
    e20c:	ldr	ip, [sp, #4]
    e210:	mov	r0, fp
    e214:	str	ip, [r8]
    e218:	ldr	r2, [sp, #12]
    e21c:	ldr	r3, [r5]
    e220:	cmp	r2, r3
    e224:	bne	e270 <__assert_fail@plt+0x5514>
    e228:	add	sp, sp, #20
    e22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e230:	mov	r1, r6
    e234:	ldr	r0, [sp, #8]
    e238:	mov	r2, r4
    e23c:	mov	r3, r9
    e240:	bl	da28 <__assert_fail@plt+0x4ccc>
    e244:	mov	r0, r7
    e248:	mov	r2, sl
    e24c:	mov	r3, r9
    e250:	ldr	r1, [sp, #8]
    e254:	bl	d224 <__assert_fail@plt+0x44c8>
    e258:	mov	r0, r4
    e25c:	bl	d004 <__assert_fail@plt+0x42a8>
    e260:	mov	r0, r8
    e264:	b	e218 <__assert_fail@plt+0x54bc>
    e268:	mvn	r0, #0
    e26c:	b	e218 <__assert_fail@plt+0x54bc>
    e270:	bl	8bdc <__stack_chk_fail@plt>
    e274:	push	{lr}		; (str lr, [sp, #-4]!)
    e278:	sub	sp, sp, #12
    e27c:	mov	ip, r2
    e280:	mov	r2, #0
    e284:	str	r3, [sp]
    e288:	mov	r3, ip
    e28c:	bl	e134 <__assert_fail@plt+0x53d8>
    e290:	add	sp, sp, #12
    e294:	pop	{pc}		; (ldr pc, [sp], #4)
    e298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e29c:	movw	sl, #37072	; 0x90d0
    e2a0:	movt	sl, #1
    e2a4:	mov	r5, r2
    e2a8:	sub	sp, sp, #36	; 0x24
    e2ac:	mov	r4, r0
    e2b0:	ldr	r2, [sl]
    e2b4:	mov	r0, r5
    e2b8:	mov	r7, r1
    e2bc:	mov	fp, r3
    e2c0:	ldr	r6, [sp, #72]	; 0x48
    e2c4:	str	r2, [sp, #28]
    e2c8:	bl	d13c <__assert_fail@plt+0x43e0>
    e2cc:	cmp	r0, #0
    e2d0:	bne	e4ac <__assert_fail@plt+0x5750>
    e2d4:	ldr	r3, [r7]
    e2d8:	cmp	r3, #1
    e2dc:	beq	e4ac <__assert_fail@plt+0x5750>
    e2e0:	movw	r8, #38192	; 0x9530
    e2e4:	movt	r8, #1
    e2e8:	ldr	r1, [r4, #12]
    e2ec:	movw	r3, #38200	; 0x9538
    e2f0:	ldr	r2, [r8]
    e2f4:	movt	r3, #1
    e2f8:	add	r1, r1, #1
    e2fc:	str	r1, [r4, #12]
    e300:	ldr	r1, [r7, #12]
    e304:	ldr	r3, [r3]
    e308:	ldr	r0, [r4, #8]
    e30c:	add	r1, r1, #1
    e310:	str	r1, [r7, #12]
    e314:	ldr	r1, [r2, #12]
    e318:	cmp	r0, #0
    e31c:	str	r2, [sp, #24]
    e320:	add	r1, r1, #1
    e324:	str	r1, [r2, #12]
    e328:	ldr	r1, [r3, #12]
    e32c:	str	r4, [sp, #12]
    e330:	add	r2, r1, #1
    e334:	str	r7, [sp, #16]
    e338:	str	r3, [sp, #20]
    e33c:	str	r2, [r3, #12]
    e340:	bne	e44c <__assert_fail@plt+0x56f0>
    e344:	ldr	r3, [r7, #8]
    e348:	cmp	r3, #0
    e34c:	addeq	r9, sp, #16
    e350:	bne	e46c <__assert_fail@plt+0x5710>
    e354:	ldr	r3, [r5, #8]
    e358:	cmp	r3, #0
    e35c:	bne	e49c <__assert_fail@plt+0x5740>
    e360:	ldr	r7, [r4, #8]
    e364:	movw	r8, #38196	; 0x9534
    e368:	movt	r8, #1
    e36c:	cmp	r7, r6
    e370:	movlt	r7, r6
    e374:	b	e3a4 <__assert_fail@plt+0x5648>
    e378:	ldr	r0, [sp, #12]
    e37c:	add	r2, sp, #12
    e380:	mov	r3, r7
    e384:	mov	r1, r0
    e388:	bl	da28 <__assert_fail@plt+0x4ccc>
    e38c:	ldr	r0, [sp, #12]
    e390:	str	r6, [sp]
    e394:	mov	r1, r5
    e398:	mov	r2, #0
    e39c:	add	r3, sp, #12
    e3a0:	bl	e134 <__assert_fail@plt+0x53d8>
    e3a4:	ldr	r4, [sp, #16]
    e3a8:	mov	r0, r4
    e3ac:	bl	d13c <__assert_fail@plt+0x43e0>
    e3b0:	subs	r3, r0, #0
    e3b4:	bne	e410 <__assert_fail@plt+0x56b4>
    e3b8:	ldr	r1, [r8]
    e3bc:	mov	r0, r4
    e3c0:	str	r3, [sp]
    e3c4:	mov	r2, r9
    e3c8:	add	r3, sp, #20
    e3cc:	bl	e134 <__assert_fail@plt+0x53d8>
    e3d0:	ldr	r0, [sp, #20]
    e3d4:	bl	d13c <__assert_fail@plt+0x43e0>
    e3d8:	subs	r4, r0, #0
    e3dc:	bne	e378 <__assert_fail@plt+0x561c>
    e3e0:	ldr	r0, [sp, #24]
    e3e4:	add	r2, sp, #24
    e3e8:	ldr	r1, [sp, #12]
    e3ec:	mov	r3, r7
    e3f0:	bl	da28 <__assert_fail@plt+0x4ccc>
    e3f4:	ldr	r0, [sp, #24]
    e3f8:	str	r6, [sp]
    e3fc:	mov	r2, r4
    e400:	mov	r1, r5
    e404:	add	r3, sp, #24
    e408:	bl	e134 <__assert_fail@plt+0x53d8>
    e40c:	b	e378 <__assert_fail@plt+0x561c>
    e410:	add	r0, sp, #12
    e414:	bl	d004 <__assert_fail@plt+0x42a8>
    e418:	mov	r0, r9
    e41c:	bl	d004 <__assert_fail@plt+0x42a8>
    e420:	mov	r0, fp
    e424:	bl	d004 <__assert_fail@plt+0x42a8>
    e428:	ldr	r3, [sp, #24]
    e42c:	mov	r0, #0
    e430:	str	r3, [fp]
    e434:	ldr	r2, [sp, #28]
    e438:	ldr	r3, [sl]
    e43c:	cmp	r2, r3
    e440:	bne	e4b4 <__assert_fail@plt+0x5758>
    e444:	add	sp, sp, #36	; 0x24
    e448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e44c:	movw	r0, #64872	; 0xfd68
    e450:	movt	r0, #0
    e454:	bl	c440 <__assert_fail@plt+0x36e4>
    e458:	ldr	r7, [sp, #16]
    e45c:	ldr	r3, [r7, #8]
    e460:	cmp	r3, #0
    e464:	addeq	r9, sp, #16
    e468:	beq	e354 <__assert_fail@plt+0x55f8>
    e46c:	add	r9, sp, #32
    e470:	movw	r0, #64896	; 0xfd80
    e474:	movt	r0, #0
    e478:	bl	c440 <__assert_fail@plt+0x36e4>
    e47c:	ldr	r0, [r9, #-16]!
    e480:	mov	r3, #0
    e484:	ldr	r1, [r8]
    e488:	mov	r2, r9
    e48c:	bl	db54 <__assert_fail@plt+0x4df8>
    e490:	ldr	r3, [r5, #8]
    e494:	cmp	r3, #0
    e498:	beq	e360 <__assert_fail@plt+0x5604>
    e49c:	movw	r0, #64924	; 0xfd9c
    e4a0:	movt	r0, #0
    e4a4:	bl	c440 <__assert_fail@plt+0x36e4>
    e4a8:	b	e360 <__assert_fail@plt+0x5604>
    e4ac:	mvn	r0, #0
    e4b0:	b	e434 <__assert_fail@plt+0x56d8>
    e4b4:	bl	8bdc <__stack_chk_fail@plt>
    e4b8:	push	{r4, r5, r6, r7, lr}
    e4bc:	movw	r7, #37072	; 0x90d0
    e4c0:	movt	r7, #1
    e4c4:	cmp	r2, #0
    e4c8:	sub	sp, sp, #60	; 0x3c
    e4cc:	mov	r6, r0
    e4d0:	ldr	r2, [r7]
    e4d4:	mov	r4, r1
    e4d8:	mov	r5, r3
    e4dc:	str	r2, [sp, #52]	; 0x34
    e4e0:	bne	e560 <__assert_fail@plt+0x5804>
    e4e4:	str	r6, [sp]
    e4e8:	mov	r1, #1
    e4ec:	mov	r2, #40	; 0x28
    e4f0:	movw	r3, #64952	; 0xfdb8
    e4f4:	add	r0, sp, #12
    e4f8:	movt	r3, #0
    e4fc:	bl	8ccc <__sprintf_chk@plt>
    e500:	add	r0, sp, #12
    e504:	bl	8c9c <strlen@plt>
    e508:	cmp	r0, r4
    e50c:	mov	r6, r0
    e510:	bge	e528 <__assert_fail@plt+0x57cc>
    e514:	sub	r4, r4, #1
    e518:	mov	r0, #48	; 0x30
    e51c:	blx	r5
    e520:	cmp	r6, r4
    e524:	bne	e514 <__assert_fail@plt+0x57b8>
    e528:	cmp	r6, #0
    e52c:	addgt	r4, sp, #11
    e530:	addgt	r6, r4, r6
    e534:	ble	e548 <__assert_fail@plt+0x57ec>
    e538:	ldrb	r0, [r4, #1]!
    e53c:	blx	r5
    e540:	cmp	r4, r6
    e544:	bne	e538 <__assert_fail@plt+0x57dc>
    e548:	ldr	r2, [sp, #52]	; 0x34
    e54c:	ldr	r3, [r7]
    e550:	cmp	r2, r3
    e554:	bne	e56c <__assert_fail@plt+0x5810>
    e558:	add	sp, sp, #60	; 0x3c
    e55c:	pop	{r4, r5, r6, r7, pc}
    e560:	mov	r0, #32
    e564:	blx	r3
    e568:	b	e4e4 <__assert_fail@plt+0x5788>
    e56c:	bl	8bdc <__stack_chk_fail@plt>
    e570:	ldr	r2, [r0, #4]
    e574:	push	{r4}		; (str r4, [sp, #-4]!)
    e578:	cmp	r2, #0
    e57c:	ldr	r1, [r0, #24]
    e580:	ble	e5dc <__assert_fail@plt+0x5880>
    e584:	movw	r4, #52428	; 0xcccc
    e588:	movt	r4, #3276	; 0xccc
    e58c:	mov	r3, #0
    e590:	ldrb	ip, [r1], #1
    e594:	add	r3, r3, r3, lsl #2
    e598:	sub	r2, r2, #1
    e59c:	add	r3, ip, r3, lsl #1
    e5a0:	cmp	r3, r4
    e5a4:	movgt	ip, #0
    e5a8:	movle	ip, #1
    e5ac:	cmp	r2, #0
    e5b0:	movle	ip, #0
    e5b4:	cmp	ip, #0
    e5b8:	bne	e590 <__assert_fail@plt+0x5834>
    e5bc:	cmp	r2, #0
    e5c0:	movgt	r3, #0
    e5c4:	ldr	r2, [r0]
    e5c8:	pop	{r4}		; (ldr r4, [sp], #4)
    e5cc:	cmp	r2, #0
    e5d0:	rsbne	r0, r3, #0
    e5d4:	moveq	r0, r3
    e5d8:	bx	lr
    e5dc:	mov	r3, #0
    e5e0:	b	e5c4 <__assert_fail@plt+0x5868>
    e5e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5e8:	movw	r7, #37072	; 0x90d0
    e5ec:	movt	r7, #1
    e5f0:	mov	r5, r1
    e5f4:	ldr	r1, [r1, #8]
    e5f8:	mov	r8, r2
    e5fc:	ldr	r2, [r7]
    e600:	sub	sp, sp, #20
    e604:	cmp	r1, #0
    e608:	mov	fp, r0
    e60c:	mov	r9, r3
    e610:	str	r2, [sp, #12]
    e614:	bne	e7c8 <__assert_fail@plt+0x5a6c>
    e618:	mov	r0, r5
    e61c:	bl	e570 <__assert_fail@plt+0x5814>
    e620:	subs	r4, r0, #0
    e624:	bne	e668 <__assert_fail@plt+0x590c>
    e628:	ldr	r3, [r5, #4]
    e62c:	cmp	r3, #1
    e630:	ble	e7a4 <__assert_fail@plt+0x5a48>
    e634:	movw	r0, #64956	; 0xfdbc
    e638:	movt	r0, #0
    e63c:	bl	c3b4 <__assert_fail@plt+0x3658>
    e640:	mov	r0, r8
    e644:	bl	d004 <__assert_fail@plt+0x42a8>
    e648:	movw	r3, #38192	; 0x9530
    e64c:	movt	r3, #1
    e650:	ldr	r3, [r3]
    e654:	ldr	r2, [r3, #12]
    e658:	add	r2, r2, #1
    e65c:	str	r2, [r3, #12]
    e660:	str	r3, [r8]
    e664:	b	e760 <__assert_fail@plt+0x5a04>
    e668:	blt	e7b8 <__assert_fail@plt+0x5a5c>
    e66c:	ldr	r5, [fp, #8]
    e670:	mov	sl, #0
    e674:	cmp	r9, r5
    e678:	movlt	r9, r5
    e67c:	mul	r3, r5, r4
    e680:	cmp	r9, r3
    e684:	movge	r9, r3
    e688:	ldr	r3, [fp, #12]
    e68c:	tst	r4, #1
    e690:	add	r6, sp, #8
    e694:	mov	r0, fp
    e698:	add	r3, r3, #1
    e69c:	str	fp, [sp, #8]
    e6a0:	str	r3, [fp, #12]
    e6a4:	bne	e6d0 <__assert_fail@plt+0x5974>
    e6a8:	lsl	r5, r5, #1
    e6ac:	mov	r1, r0
    e6b0:	asr	r4, r4, #1
    e6b4:	mov	r2, r6
    e6b8:	mov	r3, r5
    e6bc:	bl	da28 <__assert_fail@plt+0x4ccc>
    e6c0:	tst	r4, #1
    e6c4:	ldr	r0, [sp, #8]
    e6c8:	beq	e6a8 <__assert_fail@plt+0x594c>
    e6cc:	ldr	r3, [r0, #12]
    e6d0:	asr	r4, r4, #1
    e6d4:	add	r3, r3, #1
    e6d8:	cmp	r4, #0
    e6dc:	str	r3, [r0, #12]
    e6e0:	str	r0, [sp, #4]
    e6e4:	movgt	fp, r5
    e6e8:	bgt	e6fc <__assert_fail@plt+0x59a0>
    e6ec:	b	e734 <__assert_fail@plt+0x59d8>
    e6f0:	asrs	r4, r4, #1
    e6f4:	beq	e734 <__assert_fail@plt+0x59d8>
    e6f8:	ldr	r0, [sp, #8]
    e6fc:	lsl	fp, fp, #1
    e700:	mov	r1, r0
    e704:	mov	r2, r6
    e708:	mov	r3, fp
    e70c:	bl	da28 <__assert_fail@plt+0x4ccc>
    e710:	tst	r4, #1
    e714:	beq	e6f0 <__assert_fail@plt+0x5994>
    e718:	add	r5, r5, fp
    e71c:	ldmib	sp, {r0, r1}
    e720:	add	r2, sp, #4
    e724:	mov	r3, r5
    e728:	bl	da28 <__assert_fail@plt+0x4ccc>
    e72c:	asrs	r4, r4, #1
    e730:	bne	e6f8 <__assert_fail@plt+0x599c>
    e734:	cmp	sl, #0
    e738:	bne	e778 <__assert_fail@plt+0x5a1c>
    e73c:	mov	r0, r8
    e740:	bl	d004 <__assert_fail@plt+0x42a8>
    e744:	ldr	r3, [sp, #4]
    e748:	ldr	r2, [r3, #8]
    e74c:	str	r3, [r8]
    e750:	cmp	r9, r2
    e754:	strlt	r9, [r3, #8]
    e758:	mov	r0, r6
    e75c:	bl	d004 <__assert_fail@plt+0x42a8>
    e760:	ldr	r2, [sp, #12]
    e764:	ldr	r3, [r7]
    e768:	cmp	r2, r3
    e76c:	bne	e7d8 <__assert_fail@plt+0x5a7c>
    e770:	add	sp, sp, #20
    e774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e778:	add	r4, sp, #16
    e77c:	movw	r1, #38192	; 0x9530
    e780:	movt	r1, #1
    e784:	mov	r2, r8
    e788:	mov	r3, r9
    e78c:	ldr	r0, [r1]
    e790:	ldr	r1, [r4, #-12]!
    e794:	bl	db54 <__assert_fail@plt+0x4df8>
    e798:	mov	r0, r4
    e79c:	bl	d004 <__assert_fail@plt+0x42a8>
    e7a0:	b	e758 <__assert_fail@plt+0x59fc>
    e7a4:	ldr	r3, [r5, #24]
    e7a8:	ldrb	r3, [r3]
    e7ac:	cmp	r3, #0
    e7b0:	beq	e640 <__assert_fail@plt+0x58e4>
    e7b4:	b	e634 <__assert_fail@plt+0x58d8>
    e7b8:	rsb	r4, r4, #0
    e7bc:	ldr	r5, [fp, #8]
    e7c0:	mov	sl, #1
    e7c4:	b	e688 <__assert_fail@plt+0x592c>
    e7c8:	movw	r0, #64896	; 0xfd80
    e7cc:	movt	r0, #0
    e7d0:	bl	c440 <__assert_fail@plt+0x36e4>
    e7d4:	b	e618 <__assert_fail@plt+0x58bc>
    e7d8:	bl	8bdc <__stack_chk_fail@plt>
    e7dc:	cmp	r1, #0
    e7e0:	push	{r4, r5, r6, r7, r8, r9, lr}
    e7e4:	rsblt	r1, r1, #0
    e7e8:	movw	lr, #26215	; 0x6667
    e7ec:	movt	lr, #26214	; 0x6666
    e7f0:	movw	r6, #37072	; 0x90d0
    e7f4:	movt	r6, #1
    e7f8:	smull	r2, ip, lr, r1
    e7fc:	ldr	r3, [r6]
    e800:	sub	sp, sp, #44	; 0x2c
    e804:	movlt	r7, #1
    e808:	movge	r7, #0
    e80c:	mov	r8, r0
    e810:	str	r3, [sp, #36]	; 0x24
    e814:	asr	r3, r1, #31
    e818:	rsb	ip, r3, ip, asr #2
    e81c:	subs	r2, ip, #0
    e820:	add	r3, ip, ip, lsl #2
    e824:	sub	r1, r1, r3, lsl #1
    e828:	strb	r1, [sp, #4]
    e82c:	beq	e8c8 <__assert_fail@plt+0x5b6c>
    e830:	add	r1, sp, #6
    e834:	mov	r5, #1
    e838:	smull	r3, r0, lr, r2
    e83c:	asr	r3, r2, #31
    e840:	mov	r4, r1
    e844:	add	r5, r5, #1
    e848:	add	r1, r1, #1
    e84c:	rsb	r3, r3, r0, asr #2
    e850:	add	ip, r3, r3, lsl #2
    e854:	sub	ip, r2, ip, lsl #1
    e858:	subs	r2, r3, #0
    e85c:	strb	ip, [r4, #-1]
    e860:	bne	e838 <__assert_fail@plt+0x5adc>
    e864:	sub	r9, r5, #1
    e868:	mov	r0, r8
    e86c:	bl	d004 <__assert_fail@plt+0x42a8>
    e870:	mov	r0, r5
    e874:	mov	r1, #0
    e878:	bl	cad4 <__assert_fail@plt+0x3d78>
    e87c:	cmp	r7, #0
    e880:	add	ip, r9, #1
    e884:	rsb	ip, r4, ip
    e888:	movne	r3, #1
    e88c:	str	r0, [r8]
    e890:	ldr	r2, [r0, #24]
    e894:	strne	r3, [r0]
    e898:	mov	r3, r4
    e89c:	ldrb	r1, [r3, #-1]!
    e8a0:	add	r0, ip, r3
    e8a4:	cmp	r0, #0
    e8a8:	strb	r1, [r2], #1
    e8ac:	bgt	e89c <__assert_fail@plt+0x5b40>
    e8b0:	ldr	r2, [sp, #36]	; 0x24
    e8b4:	ldr	r3, [r6]
    e8b8:	cmp	r2, r3
    e8bc:	bne	e8d8 <__assert_fail@plt+0x5b7c>
    e8c0:	add	sp, sp, #44	; 0x2c
    e8c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
    e8c8:	add	r4, sp, #5
    e8cc:	mov	r9, ip
    e8d0:	mov	r5, #1
    e8d4:	b	e868 <__assert_fail@plt+0x5b0c>
    e8d8:	bl	8bdc <__stack_chk_fail@plt>
    e8dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8e0:	movw	r5, #38200	; 0x9538
    e8e4:	movt	r5, #1
    e8e8:	ldr	r8, [r0]
    e8ec:	movw	r9, #37072	; 0x90d0
    e8f0:	movt	r9, #1
    e8f4:	ldr	r4, [r5]
    e8f8:	sub	sp, sp, #36	; 0x24
    e8fc:	ldr	r7, [r8]
    e900:	mov	r6, r0
    e904:	ldr	r2, [r9]
    e908:	mov	fp, r1
    e90c:	ldr	r3, [r4]
    e910:	cmp	r7, r3
    e914:	str	r2, [sp, #28]
    e918:	beq	eaec <__assert_fail@plt+0x5d90>
    e91c:	cmp	r7, #0
    e920:	bne	eb04 <__assert_fail@plt+0x5da8>
    e924:	movw	sl, #38192	; 0x9530
    e928:	movt	sl, #1
    e92c:	ldr	r1, [sl]
    e930:	ldr	r3, [r1]
    e934:	cmp	r7, r3
    e938:	beq	eb84 <__assert_fail@plt+0x5e28>
    e93c:	mov	r5, #1
    e940:	ldr	r2, [r4, #12]
    e944:	mov	r0, #1
    e948:	ldr	r3, [r8, #8]
    e94c:	mov	r1, r0
    e950:	add	r2, r2, #3
    e954:	str	r2, [r4, #12]
    e958:	cmp	fp, r3
    e95c:	movlt	fp, r3
    e960:	str	r4, [sp, #12]
    e964:	str	r4, [sp, #16]
    e968:	str	r4, [sp, #24]
    e96c:	bl	cad4 <__assert_fail@plt+0x3d78>
    e970:	cmp	r5, #0
    e974:	mov	r2, #5
    e978:	ldr	r3, [r0, #24]
    e97c:	str	r0, [sp, #20]
    e980:	strb	r2, [r3, #1]
    e984:	blt	eb5c <__assert_fail@plt+0x5e00>
    e988:	add	r5, sp, #12
    e98c:	mov	r1, #10
    e990:	add	r7, sp, #16
    e994:	mov	r4, #3
    e998:	mov	r0, r5
    e99c:	bl	e7dc <__assert_fail@plt+0x5a80>
    e9a0:	ldr	r3, [r6]
    e9a4:	mov	r0, r7
    e9a8:	ldr	r1, [r3, #4]
    e9ac:	bl	e7dc <__assert_fail@plt+0x5a80>
    e9b0:	mov	r2, r7
    e9b4:	ldr	r0, [sp, #16]
    e9b8:	mov	r3, #0
    e9bc:	ldr	r1, [sp, #20]
    e9c0:	bl	da28 <__assert_fail@plt+0x4ccc>
    e9c4:	ldr	r1, [sp, #16]
    e9c8:	mov	ip, #0
    e9cc:	ldr	r0, [sp, #12]
    e9d0:	mov	r2, r5
    e9d4:	mov	r3, ip
    e9d8:	str	ip, [r1, #8]
    e9dc:	bl	e5e4 <__assert_fail@plt+0x5888>
    e9e0:	mov	r0, r7
    e9e4:	bl	d004 <__assert_fail@plt+0x42a8>
    e9e8:	add	r8, r4, #1
    e9ec:	add	r3, fp, #1
    e9f0:	str	r3, [sp, #4]
    e9f4:	mov	r0, r7
    e9f8:	bl	d004 <__assert_fail@plt+0x42a8>
    e9fc:	ldr	ip, [sp, #12]
    ea00:	ldr	r0, [r6]
    ea04:	mov	r2, r5
    ea08:	mov	r3, r4
    ea0c:	ldr	lr, [ip, #12]
    ea10:	mov	r1, ip
    ea14:	str	ip, [sp, #16]
    ea18:	add	lr, lr, #1
    ea1c:	str	lr, [ip, #12]
    ea20:	bl	db54 <__assert_fail@plt+0x4df8>
    ea24:	ldr	r0, [sp, #12]
    ea28:	ldr	r1, [sp, #16]
    ea2c:	mov	r2, r5
    ea30:	mov	r3, #0
    ea34:	bl	d940 <__assert_fail@plt+0x4be4>
    ea38:	ldr	r0, [sp, #12]
    ea3c:	ldr	r1, [sp, #20]
    ea40:	mov	r2, r5
    ea44:	mov	r3, r4
    ea48:	bl	da28 <__assert_fail@plt+0x4ccc>
    ea4c:	ldr	r0, [sp, #12]
    ea50:	ldr	r1, [sp, #16]
    ea54:	add	r2, sp, #24
    ea58:	mov	r3, r8
    ea5c:	bl	d224 <__assert_fail@plt+0x44c8>
    ea60:	ldr	r0, [sp, #24]
    ea64:	mov	r1, r4
    ea68:	bl	d1a8 <__assert_fail@plt+0x444c>
    ea6c:	cmp	r0, #0
    ea70:	beq	e9f4 <__assert_fail@plt+0x5c98>
    ea74:	cmp	fp, r4
    ea78:	blt	ea94 <__assert_fail@plt+0x5d38>
    ea7c:	ldr	r3, [sp, #4]
    ea80:	add	r4, r4, r4, lsl #1
    ea84:	cmp	r4, r3
    ea88:	movge	r4, r3
    ea8c:	add	r8, r4, #1
    ea90:	b	e9f4 <__assert_fail@plt+0x5c98>
    ea94:	mov	r0, r6
    ea98:	bl	d004 <__assert_fail@plt+0x42a8>
    ea9c:	ldr	r1, [sl]
    eaa0:	mov	r2, r6
    eaa4:	mov	r3, fp
    eaa8:	ldr	r0, [sp, #12]
    eaac:	bl	db54 <__assert_fail@plt+0x4df8>
    eab0:	mov	r0, r5
    eab4:	bl	d004 <__assert_fail@plt+0x42a8>
    eab8:	mov	r0, r7
    eabc:	bl	d004 <__assert_fail@plt+0x42a8>
    eac0:	add	r0, sp, #20
    eac4:	bl	d004 <__assert_fail@plt+0x42a8>
    eac8:	add	r0, sp, #24
    eacc:	bl	d004 <__assert_fail@plt+0x42a8>
    ead0:	mov	r0, #1
    ead4:	ldr	r2, [sp, #28]
    ead8:	ldr	r3, [r9]
    eadc:	cmp	r2, r3
    eae0:	bne	eba8 <__assert_fail@plt+0x5e4c>
    eae4:	add	sp, sp, #36	; 0x24
    eae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eaec:	mov	r0, r8
    eaf0:	mov	r1, r4
    eaf4:	mov	r2, #1
    eaf8:	bl	c96c <__assert_fail@plt+0x3c10>
    eafc:	cmp	r0, #0
    eb00:	bge	eb0c <__assert_fail@plt+0x5db0>
    eb04:	mov	r0, #0
    eb08:	b	ead4 <__assert_fail@plt+0x5d78>
    eb0c:	bne	eb34 <__assert_fail@plt+0x5dd8>
    eb10:	mov	r0, r6
    eb14:	bl	d004 <__assert_fail@plt+0x42a8>
    eb18:	ldr	r3, [r5]
    eb1c:	ldr	r2, [r3, #12]
    eb20:	mov	r0, #1
    eb24:	add	r2, r2, r0
    eb28:	str	r2, [r3, #12]
    eb2c:	str	r3, [r6]
    eb30:	b	ead4 <__assert_fail@plt+0x5d78>
    eb34:	movw	sl, #38192	; 0x9530
    eb38:	movt	sl, #1
    eb3c:	ldr	r1, [sl]
    eb40:	ldr	r3, [r1]
    eb44:	cmp	r7, r3
    eb48:	beq	eb84 <__assert_fail@plt+0x5e28>
    eb4c:	cmp	r7, #0
    eb50:	mvnne	r5, #0
    eb54:	beq	e93c <__assert_fail@plt+0x5be0>
    eb58:	b	e940 <__assert_fail@plt+0x5be4>
    eb5c:	ldr	r2, [r6]
    eb60:	add	r5, sp, #32
    eb64:	ldr	r3, [sl]
    eb68:	add	r7, sp, #16
    eb6c:	ldr	r4, [r2, #8]
    eb70:	ldr	r2, [r3, #12]
    eb74:	str	r3, [r5, #-20]!	; 0xffffffec
    eb78:	add	r2, r2, #1
    eb7c:	str	r2, [r3, #12]
    eb80:	b	e9e8 <__assert_fail@plt+0x5c8c>
    eb84:	mov	r0, r8
    eb88:	mov	r2, #1
    eb8c:	bl	c96c <__assert_fail@plt+0x3c10>
    eb90:	subs	r5, r0, #0
    eb94:	bne	e940 <__assert_fail@plt+0x5be4>
    eb98:	mov	r0, r6
    eb9c:	bl	d004 <__assert_fail@plt+0x42a8>
    eba0:	ldr	r3, [sl]
    eba4:	b	eb1c <__assert_fail@plt+0x5dc0>
    eba8:	bl	8bdc <__stack_chk_fail@plt>
    ebac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebb0:	movw	sl, #37072	; 0x90d0
    ebb4:	movt	sl, #1
    ebb8:	mov	r9, r0
    ebbc:	ldr	r0, [r0]
    ebc0:	mov	r6, r2
    ebc4:	ldr	r2, [sl]
    ebc8:	sub	sp, sp, #52	; 0x34
    ebcc:	cmp	r0, #1
    ebd0:	mov	r8, r1
    ebd4:	mov	r5, r3
    ebd8:	str	r2, [sp, #44]	; 0x2c
    ebdc:	beq	ef60 <__assert_fail@plt+0x6204>
    ebe0:	mov	r0, r9
    ebe4:	bl	d13c <__assert_fail@plt+0x43e0>
    ebe8:	subs	r4, r0, #0
    ebec:	bne	ef38 <__assert_fail@plt+0x61dc>
    ebf0:	cmp	r8, #10
    ebf4:	beq	eeb4 <__assert_fail@plt+0x6158>
    ebf8:	movw	r5, #38200	; 0x9538
    ebfc:	movt	r5, #1
    ec00:	add	r7, sp, #48	; 0x30
    ec04:	movw	r0, #38192	; 0x9530
    ec08:	ldr	ip, [r5]
    ec0c:	movt	r0, #1
    ec10:	mov	r3, r4
    ec14:	str	r0, [sp, #8]
    ec18:	ldr	r1, [r0]
    ec1c:	mov	r0, r9
    ec20:	ldr	lr, [ip, #12]
    ec24:	str	ip, [r7, #-28]!	; 0xffffffe4
    ec28:	mov	r2, r7
    ec2c:	add	lr, lr, #1
    ec30:	str	lr, [ip, #12]
    ec34:	bl	db54 <__assert_fail@plt+0x4df8>
    ec38:	ldr	ip, [r5]
    ec3c:	add	r2, sp, #24
    ec40:	mov	r0, r9
    ec44:	ldr	r1, [sp, #20]
    ec48:	mov	r3, r4
    ec4c:	ldr	lr, [ip, #12]
    ec50:	str	ip, [sp, #24]
    ec54:	add	lr, lr, #3
    ec58:	str	lr, [ip, #12]
    ec5c:	str	ip, [sp, #32]
    ec60:	str	ip, [sp, #28]
    ec64:	bl	d224 <__assert_fail@plt+0x44c8>
    ec68:	ldr	r2, [sp, #20]
    ec6c:	mov	r1, r8
    ec70:	ldr	r3, [sp, #24]
    ec74:	add	r0, sp, #28
    ec78:	str	r4, [r2]
    ec7c:	add	r2, sp, #48	; 0x30
    ec80:	str	r4, [r3]
    ec84:	str	r2, [sp, #12]
    ec88:	bl	e7dc <__assert_fail@plt+0x5a80>
    ec8c:	ldr	r3, [r5]
    ec90:	sub	r1, r8, #1
    ec94:	ldr	r0, [sp, #12]
    ec98:	ldr	r2, [r3, #12]
    ec9c:	str	r3, [r0, #-8]!
    eca0:	add	r2, r2, #1
    eca4:	str	r2, [r3, #12]
    eca8:	str	r0, [sp, #12]
    ecac:	bl	e7dc <__assert_fail@plt+0x5a80>
    ecb0:	b	ed00 <__assert_fail@plt+0x5fa4>
    ecb4:	ldr	r1, [sp, #28]
    ecb8:	mov	r0, r5
    ecbc:	str	r2, [sp]
    ecc0:	add	r3, sp, #32
    ecc4:	bl	e134 <__assert_fail@plt+0x53d8>
    ecc8:	mov	r0, #8
    eccc:	bl	8c30 <malloc@plt>
    ecd0:	subs	r5, r0, #0
    ecd4:	beq	eeac <__assert_fail@plt+0x6150>
    ecd8:	ldr	r0, [sp, #32]
    ecdc:	bl	e570 <__assert_fail@plt+0x5814>
    ece0:	str	r4, [r5, #4]
    ece4:	ldr	r1, [sp, #28]
    ece8:	mov	r2, r7
    ecec:	mov	r3, #0
    ecf0:	mov	r4, r5
    ecf4:	str	r0, [r5]
    ecf8:	ldr	r0, [sp, #20]
    ecfc:	bl	db54 <__assert_fail@plt+0x4df8>
    ed00:	ldr	r5, [sp, #20]
    ed04:	mov	r0, r5
    ed08:	bl	d13c <__assert_fail@plt+0x43e0>
    ed0c:	subs	r2, r0, #0
    ed10:	beq	ecb4 <__assert_fail@plt+0x5f58>
    ed14:	cmp	r4, #0
    ed18:	movwne	fp, #64776	; 0xfd08
    ed1c:	movtne	fp, #0
    ed20:	bne	ee38 <__assert_fail@plt+0x60dc>
    ed24:	ldr	r3, [r9, #8]
    ed28:	cmp	r3, #0
    ed2c:	ble	ee6c <__assert_fail@plt+0x6110>
    ed30:	mov	r0, #46	; 0x2e
    ed34:	blx	r6
    ed38:	ldr	r3, [sp, #8]
    ed3c:	ldr	r2, [r3]
    ed40:	ldr	r3, [r9, #8]
    ed44:	ldr	r0, [r2, #4]
    ed48:	ldr	r1, [r2, #12]
    ed4c:	cmp	r0, r3
    ed50:	str	r2, [sp, #36]	; 0x24
    ed54:	add	r1, r1, #1
    ed58:	str	r1, [r2, #12]
    ed5c:	bgt	ef80 <__assert_fail@plt+0x6224>
    ed60:	movw	ip, #64776	; 0xfd08
    ed64:	movt	ip, #0
    ed68:	add	r4, sp, #36	; 0x24
    ed6c:	mov	r5, #0
    ed70:	str	sl, [sp, #8]
    ed74:	mov	fp, ip
    ed78:	b	edb0 <__assert_fail@plt+0x6054>
    ed7c:	add	ip, fp, sl
    ed80:	ldrb	r0, [ip, #20]
    ed84:	blx	r6
    ed88:	mov	r2, r4
    ed8c:	mov	r3, #0
    ed90:	ldr	r0, [sp, #36]	; 0x24
    ed94:	ldr	r1, [sp, #28]
    ed98:	bl	da28 <__assert_fail@plt+0x4ccc>
    ed9c:	ldr	r2, [sp, #36]	; 0x24
    eda0:	ldr	r3, [r9, #8]
    eda4:	ldr	r2, [r2, #4]
    eda8:	cmp	r2, r3
    edac:	bgt	ee60 <__assert_fail@plt+0x6104>
    edb0:	add	r2, sp, #24
    edb4:	ldr	r1, [sp, #28]
    edb8:	ldr	r0, [sp, #24]
    edbc:	bl	da28 <__assert_fail@plt+0x4ccc>
    edc0:	ldr	r0, [sp, #24]
    edc4:	bl	e570 <__assert_fail@plt+0x5814>
    edc8:	mov	sl, r0
    edcc:	mov	r0, r7
    edd0:	mov	r1, sl
    edd4:	bl	e7dc <__assert_fail@plt+0x5a80>
    edd8:	ldr	r0, [sp, #24]
    eddc:	ldr	r1, [sp, #20]
    ede0:	add	r2, sp, #24
    ede4:	mov	r3, #0
    ede8:	bl	d224 <__assert_fail@plt+0x44c8>
    edec:	cmp	r8, #16
    edf0:	ble	ed7c <__assert_fail@plt+0x6020>
    edf4:	ldr	r1, [sp, #40]	; 0x28
    edf8:	mov	r2, r5
    edfc:	mov	r0, sl
    ee00:	mov	r3, r6
    ee04:	mov	r5, #1
    ee08:	ldr	r1, [r1, #4]
    ee0c:	bl	e4b8 <__assert_fail@plt+0x575c>
    ee10:	b	ed88 <__assert_fail@plt+0x602c>
    ee14:	ldr	r3, [r4]
    ee18:	add	r3, fp, r3
    ee1c:	ldrb	r0, [r3, #20]
    ee20:	blx	r6
    ee24:	mov	r0, r4
    ee28:	bl	8ba0 <free@plt>
    ee2c:	cmp	r5, #0
    ee30:	beq	ed24 <__assert_fail@plt+0x5fc8>
    ee34:	mov	r4, r5
    ee38:	cmp	r8, #16
    ee3c:	ldr	r5, [r4, #4]
    ee40:	ble	ee14 <__assert_fail@plt+0x60b8>
    ee44:	ldr	r1, [sp, #40]	; 0x28
    ee48:	mov	r2, #1
    ee4c:	ldr	r0, [r4]
    ee50:	mov	r3, r6
    ee54:	ldr	r1, [r1, #4]
    ee58:	bl	e4b8 <__assert_fail@plt+0x575c>
    ee5c:	b	ee24 <__assert_fail@plt+0x60c8>
    ee60:	ldr	sl, [sp, #8]
    ee64:	mov	r0, r4
    ee68:	bl	d004 <__assert_fail@plt+0x42a8>
    ee6c:	mov	r0, r7
    ee70:	bl	d004 <__assert_fail@plt+0x42a8>
    ee74:	add	r0, sp, #24
    ee78:	bl	d004 <__assert_fail@plt+0x42a8>
    ee7c:	add	r0, sp, #28
    ee80:	bl	d004 <__assert_fail@plt+0x42a8>
    ee84:	add	r0, sp, #32
    ee88:	bl	d004 <__assert_fail@plt+0x42a8>
    ee8c:	ldr	r0, [sp, #12]
    ee90:	bl	d004 <__assert_fail@plt+0x42a8>
    ee94:	ldr	r2, [sp, #44]	; 0x2c
    ee98:	ldr	r3, [sl]
    ee9c:	cmp	r2, r3
    eea0:	bne	ef88 <__assert_fail@plt+0x622c>
    eea4:	add	sp, sp, #52	; 0x34
    eea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eeac:	bl	c3b0 <__assert_fail@plt+0x3654>
    eeb0:	b	ecd8 <__assert_fail@plt+0x5f7c>
    eeb4:	ldr	r7, [r9, #4]
    eeb8:	ldr	r4, [r9, #24]
    eebc:	cmp	r7, #1
    eec0:	ble	ef44 <__assert_fail@plt+0x61e8>
    eec4:	add	r7, r4, r7
    eec8:	ldrb	r0, [r4], #1
    eecc:	add	r0, r0, #48	; 0x30
    eed0:	blx	r6
    eed4:	cmp	r4, r7
    eed8:	bne	eec8 <__assert_fail@plt+0x616c>
    eedc:	cmp	r5, #0
    eee0:	beq	eef4 <__assert_fail@plt+0x6198>
    eee4:	mov	r0, r9
    eee8:	bl	d13c <__assert_fail@plt+0x43e0>
    eeec:	cmp	r0, #0
    eef0:	bne	ef74 <__assert_fail@plt+0x6218>
    eef4:	ldr	r3, [r9, #8]
    eef8:	cmp	r3, #0
    eefc:	ble	ee94 <__assert_fail@plt+0x6138>
    ef00:	mov	r0, #46	; 0x2e
    ef04:	blx	r6
    ef08:	ldr	r3, [r9, #8]
    ef0c:	cmp	r3, #0
    ef10:	ble	ee94 <__assert_fail@plt+0x6138>
    ef14:	mov	r4, #0
    ef18:	ldrb	r0, [r7, r4]
    ef1c:	add	r4, r4, #1
    ef20:	add	r0, r0, #48	; 0x30
    ef24:	blx	r6
    ef28:	ldr	r3, [r9, #8]
    ef2c:	cmp	r3, r4
    ef30:	bgt	ef18 <__assert_fail@plt+0x61bc>
    ef34:	b	ee94 <__assert_fail@plt+0x6138>
    ef38:	mov	r0, #48	; 0x30
    ef3c:	blx	r6
    ef40:	b	ee94 <__assert_fail@plt+0x6138>
    ef44:	ldrb	r3, [r4]
    ef48:	cmp	r3, #0
    ef4c:	beq	ef6c <__assert_fail@plt+0x6210>
    ef50:	cmp	r7, #0
    ef54:	movle	r7, r4
    ef58:	ble	eedc <__assert_fail@plt+0x6180>
    ef5c:	b	eec4 <__assert_fail@plt+0x6168>
    ef60:	mov	r0, #45	; 0x2d
    ef64:	blx	r6
    ef68:	b	ebe0 <__assert_fail@plt+0x5e84>
    ef6c:	add	r7, r4, #1
    ef70:	b	eedc <__assert_fail@plt+0x6180>
    ef74:	mov	r0, #48	; 0x30
    ef78:	blx	r6
    ef7c:	b	eef4 <__assert_fail@plt+0x6198>
    ef80:	add	r4, sp, #36	; 0x24
    ef84:	b	ee64 <__assert_fail@plt+0x6108>
    ef88:	bl	8bdc <__stack_chk_fail@plt>
    ef8c:	push	{r4, r5, r6, lr}
    ef90:	mov	r4, r0
    ef94:	ldr	r5, [r0]
    ef98:	sub	sp, sp, #8
    ef9c:	ldr	r3, [r0, #8]
    efa0:	adds	r5, r5, #0
    efa4:	ldr	r0, [r0, #4]
    efa8:	movne	r5, #1
    efac:	cmp	r3, #0
    efb0:	addgt	r3, r3, r0
    efb4:	addle	r0, r0, #1
    efb8:	addgt	r0, r3, #2
    efbc:	add	r0, r0, r5
    efc0:	bl	8c30 <malloc@plt>
    efc4:	cmp	r0, #0
    efc8:	beq	f070 <__assert_fail@plt+0x6314>
    efcc:	cmp	r5, #0
    efd0:	addne	r3, r0, #1
    efd4:	movne	r2, #45	; 0x2d
    efd8:	strbne	r2, [r0]
    efdc:	ldr	r6, [r4, #4]
    efe0:	moveq	r3, r0
    efe4:	ldr	r5, [r4, #24]
    efe8:	cmp	r6, #0
    efec:	ble	f068 <__assert_fail@plt+0x630c>
    eff0:	add	ip, r3, r6
    eff4:	mov	r2, r5
    eff8:	ldrb	r1, [r2], #1
    effc:	add	r1, r1, #48	; 0x30
    f000:	strb	r1, [r3], #1
    f004:	cmp	r3, ip
    f008:	bne	eff8 <__assert_fail@plt+0x629c>
    f00c:	add	r5, r5, r6
    f010:	ldr	r3, [r4, #8]
    f014:	cmp	r3, #0
    f018:	movle	r2, ip
    f01c:	ble	f058 <__assert_fail@plt+0x62fc>
    f020:	mov	r3, #46	; 0x2e
    f024:	strb	r3, [ip]
    f028:	ldr	r3, [r4, #8]
    f02c:	add	r2, ip, #1
    f030:	cmp	r3, #0
    f034:	ble	f058 <__assert_fail@plt+0x62fc>
    f038:	mov	r3, r5
    f03c:	ldrb	r1, [r3], #1
    f040:	add	r1, r1, #48	; 0x30
    f044:	strb	r1, [r2], #1
    f048:	ldr	r1, [r4, #8]
    f04c:	rsb	ip, r5, r3
    f050:	cmp	ip, r1
    f054:	blt	f03c <__assert_fail@plt+0x62e0>
    f058:	mov	r3, #0
    f05c:	strb	r3, [r2]
    f060:	add	sp, sp, #8
    f064:	pop	{r4, r5, r6, pc}
    f068:	mov	ip, r3
    f06c:	b	f010 <__assert_fail@plt+0x62b4>
    f070:	str	r0, [sp, #4]
    f074:	bl	c3b0 <__assert_fail@plt+0x3654>
    f078:	ldr	r0, [sp, #4]
    f07c:	b	efcc <__assert_fail@plt+0x6270>
    f080:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    f084:	mov	r6, r1
    f088:	mov	r8, r2
    f08c:	mov	r7, r0
    f090:	bl	d004 <__assert_fail@plt+0x42a8>
    f094:	ldrb	r4, [r6]
    f098:	cmp	r4, #43	; 0x2b
    f09c:	cmpne	r4, #45	; 0x2d
    f0a0:	addeq	r5, r6, #1
    f0a4:	ldrbeq	r4, [r6, #1]
    f0a8:	movne	r5, r6
    f0ac:	cmp	r4, #48	; 0x30
    f0b0:	bne	f0c8 <__assert_fail@plt+0x636c>
    f0b4:	add	r3, r5, #1
    f0b8:	mov	r5, r3
    f0bc:	ldrb	r4, [r3], #1
    f0c0:	cmp	r4, #48	; 0x30
    f0c4:	beq	f0b8 <__assert_fail@plt+0x635c>
    f0c8:	bl	8c84 <__ctype_b_loc@plt>
    f0cc:	mov	r3, r5
    f0d0:	ldr	r1, [r0]
    f0d4:	b	f0dc <__assert_fail@plt+0x6380>
    f0d8:	ldrb	r4, [r3, #1]!
    f0dc:	lsl	r2, r4, #1
    f0e0:	rsb	r9, r5, r3
    f0e4:	ldrh	r2, [r1, r2]
    f0e8:	and	r2, r2, #2048	; 0x800
    f0ec:	uxth	r2, r2
    f0f0:	cmp	r2, #0
    f0f4:	bne	f0d8 <__assert_fail@plt+0x637c>
    f0f8:	cmp	r4, #46	; 0x2e
    f0fc:	beq	f1dc <__assert_fail@plt+0x6480>
    f100:	cmp	r4, #0
    f104:	bne	f1bc <__assert_fail@plt+0x6460>
    f108:	add	r3, r9, r2
    f10c:	cmp	r3, #0
    f110:	beq	f1bc <__assert_fail@plt+0x6460>
    f114:	cmp	r8, r2
    f118:	movge	r8, r2
    f11c:	cmp	r9, #0
    f120:	moveq	r9, #1
    f124:	mov	r1, r8
    f128:	mov	r0, r9
    f12c:	moveq	r4, r9
    f130:	bl	cad4 <__assert_fail@plt+0x3d78>
    f134:	str	r0, [r7]
    f138:	ldrb	r3, [r6]
    f13c:	cmp	r3, #45	; 0x2d
    f140:	beq	f218 <__assert_fail@plt+0x64bc>
    f144:	mov	r3, #0
    f148:	str	r3, [r0]
    f14c:	ldrb	r3, [r6]
    f150:	cmp	r3, #43	; 0x2b
    f154:	beq	f220 <__assert_fail@plt+0x64c4>
    f158:	cmp	r3, #48	; 0x30
    f15c:	addeq	r3, r6, #1
    f160:	bne	f178 <__assert_fail@plt+0x641c>
    f164:	mov	r6, r3
    f168:	add	r3, r3, #1
    f16c:	ldrb	ip, [r6]
    f170:	cmp	ip, #48	; 0x30
    f174:	beq	f164 <__assert_fail@plt+0x6408>
    f178:	cmp	r4, #0
    f17c:	ldr	r2, [r0, #24]
    f180:	beq	f22c <__assert_fail@plt+0x64d0>
    f184:	cmp	r8, #0
    f188:	mov	r3, #0
    f18c:	mov	r1, r6
    f190:	add	r9, r2, #1
    f194:	strb	r3, [r2]
    f198:	pople	{r3, r4, r5, r6, r7, r8, r9, pc}
    f19c:	add	r8, r9, r8
    f1a0:	mov	r3, r1
    f1a4:	ldrb	r1, [r3, #1]!
    f1a8:	sub	r1, r1, #48	; 0x30
    f1ac:	strb	r1, [r9], #1
    f1b0:	cmp	r9, r8
    f1b4:	bne	f1a4 <__assert_fail@plt+0x6448>
    f1b8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    f1bc:	movw	r3, #38200	; 0x9538
    f1c0:	movt	r3, #1
    f1c4:	ldr	r3, [r3]
    f1c8:	ldr	r2, [r3, #12]
    f1cc:	add	r2, r2, #1
    f1d0:	str	r2, [r3, #12]
    f1d4:	str	r3, [r7]
    f1d8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    f1dc:	ldrb	r4, [r3, #1]
    f1e0:	add	ip, r3, #1
    f1e4:	lsl	r2, r4, #1
    f1e8:	ldrh	r2, [r1, r2]
    f1ec:	and	r2, r2, #2048	; 0x800
    f1f0:	uxth	r2, r2
    f1f4:	cmp	r2, #0
    f1f8:	beq	f100 <__assert_fail@plt+0x63a4>
    f1fc:	rsb	r2, r3, ip
    f200:	ldrb	r4, [ip, #1]!
    f204:	lsl	r0, r4, #1
    f208:	ldrh	r0, [r1, r0]
    f20c:	tst	r0, #2048	; 0x800
    f210:	bne	f1fc <__assert_fail@plt+0x64a0>
    f214:	b	f100 <__assert_fail@plt+0x63a4>
    f218:	mov	r3, #1
    f21c:	str	r3, [r0]
    f220:	ldrb	r3, [r6, #1]
    f224:	add	r6, r6, #1
    f228:	b	f158 <__assert_fail@plt+0x63fc>
    f22c:	add	r1, r6, r9
    f230:	mov	r3, r2
    f234:	ldrb	r0, [r6], #1
    f238:	cmp	r6, r1
    f23c:	sub	r0, r0, #48	; 0x30
    f240:	strb	r0, [r3], #1
    f244:	bne	f234 <__assert_fail@plt+0x64d8>
    f248:	cmp	r8, #0
    f24c:	add	r9, r2, r9
    f250:	bgt	f19c <__assert_fail@plt+0x6440>
    f254:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    f258:	cmp	r1, #0
    f25c:	beq	f468 <__assert_fail@plt+0x670c>
    f260:	eor	ip, r0, r1
    f264:	rsbmi	r1, r1, #0
    f268:	subs	r2, r1, #1
    f26c:	beq	f434 <__assert_fail@plt+0x66d8>
    f270:	movs	r3, r0
    f274:	rsbmi	r3, r0, #0
    f278:	cmp	r3, r1
    f27c:	bls	f440 <__assert_fail@plt+0x66e4>
    f280:	tst	r1, r2
    f284:	beq	f450 <__assert_fail@plt+0x66f4>
    f288:	clz	r2, r3
    f28c:	clz	r0, r1
    f290:	sub	r2, r0, r2
    f294:	rsbs	r2, r2, #31
    f298:	addne	r2, r2, r2, lsl #1
    f29c:	mov	r0, #0
    f2a0:	addne	pc, pc, r2, lsl #2
    f2a4:	nop	{0}
    f2a8:	cmp	r3, r1, lsl #31
    f2ac:	adc	r0, r0, r0
    f2b0:	subcs	r3, r3, r1, lsl #31
    f2b4:	cmp	r3, r1, lsl #30
    f2b8:	adc	r0, r0, r0
    f2bc:	subcs	r3, r3, r1, lsl #30
    f2c0:	cmp	r3, r1, lsl #29
    f2c4:	adc	r0, r0, r0
    f2c8:	subcs	r3, r3, r1, lsl #29
    f2cc:	cmp	r3, r1, lsl #28
    f2d0:	adc	r0, r0, r0
    f2d4:	subcs	r3, r3, r1, lsl #28
    f2d8:	cmp	r3, r1, lsl #27
    f2dc:	adc	r0, r0, r0
    f2e0:	subcs	r3, r3, r1, lsl #27
    f2e4:	cmp	r3, r1, lsl #26
    f2e8:	adc	r0, r0, r0
    f2ec:	subcs	r3, r3, r1, lsl #26
    f2f0:	cmp	r3, r1, lsl #25
    f2f4:	adc	r0, r0, r0
    f2f8:	subcs	r3, r3, r1, lsl #25
    f2fc:	cmp	r3, r1, lsl #24
    f300:	adc	r0, r0, r0
    f304:	subcs	r3, r3, r1, lsl #24
    f308:	cmp	r3, r1, lsl #23
    f30c:	adc	r0, r0, r0
    f310:	subcs	r3, r3, r1, lsl #23
    f314:	cmp	r3, r1, lsl #22
    f318:	adc	r0, r0, r0
    f31c:	subcs	r3, r3, r1, lsl #22
    f320:	cmp	r3, r1, lsl #21
    f324:	adc	r0, r0, r0
    f328:	subcs	r3, r3, r1, lsl #21
    f32c:	cmp	r3, r1, lsl #20
    f330:	adc	r0, r0, r0
    f334:	subcs	r3, r3, r1, lsl #20
    f338:	cmp	r3, r1, lsl #19
    f33c:	adc	r0, r0, r0
    f340:	subcs	r3, r3, r1, lsl #19
    f344:	cmp	r3, r1, lsl #18
    f348:	adc	r0, r0, r0
    f34c:	subcs	r3, r3, r1, lsl #18
    f350:	cmp	r3, r1, lsl #17
    f354:	adc	r0, r0, r0
    f358:	subcs	r3, r3, r1, lsl #17
    f35c:	cmp	r3, r1, lsl #16
    f360:	adc	r0, r0, r0
    f364:	subcs	r3, r3, r1, lsl #16
    f368:	cmp	r3, r1, lsl #15
    f36c:	adc	r0, r0, r0
    f370:	subcs	r3, r3, r1, lsl #15
    f374:	cmp	r3, r1, lsl #14
    f378:	adc	r0, r0, r0
    f37c:	subcs	r3, r3, r1, lsl #14
    f380:	cmp	r3, r1, lsl #13
    f384:	adc	r0, r0, r0
    f388:	subcs	r3, r3, r1, lsl #13
    f38c:	cmp	r3, r1, lsl #12
    f390:	adc	r0, r0, r0
    f394:	subcs	r3, r3, r1, lsl #12
    f398:	cmp	r3, r1, lsl #11
    f39c:	adc	r0, r0, r0
    f3a0:	subcs	r3, r3, r1, lsl #11
    f3a4:	cmp	r3, r1, lsl #10
    f3a8:	adc	r0, r0, r0
    f3ac:	subcs	r3, r3, r1, lsl #10
    f3b0:	cmp	r3, r1, lsl #9
    f3b4:	adc	r0, r0, r0
    f3b8:	subcs	r3, r3, r1, lsl #9
    f3bc:	cmp	r3, r1, lsl #8
    f3c0:	adc	r0, r0, r0
    f3c4:	subcs	r3, r3, r1, lsl #8
    f3c8:	cmp	r3, r1, lsl #7
    f3cc:	adc	r0, r0, r0
    f3d0:	subcs	r3, r3, r1, lsl #7
    f3d4:	cmp	r3, r1, lsl #6
    f3d8:	adc	r0, r0, r0
    f3dc:	subcs	r3, r3, r1, lsl #6
    f3e0:	cmp	r3, r1, lsl #5
    f3e4:	adc	r0, r0, r0
    f3e8:	subcs	r3, r3, r1, lsl #5
    f3ec:	cmp	r3, r1, lsl #4
    f3f0:	adc	r0, r0, r0
    f3f4:	subcs	r3, r3, r1, lsl #4
    f3f8:	cmp	r3, r1, lsl #3
    f3fc:	adc	r0, r0, r0
    f400:	subcs	r3, r3, r1, lsl #3
    f404:	cmp	r3, r1, lsl #2
    f408:	adc	r0, r0, r0
    f40c:	subcs	r3, r3, r1, lsl #2
    f410:	cmp	r3, r1, lsl #1
    f414:	adc	r0, r0, r0
    f418:	subcs	r3, r3, r1, lsl #1
    f41c:	cmp	r3, r1
    f420:	adc	r0, r0, r0
    f424:	subcs	r3, r3, r1
    f428:	cmp	ip, #0
    f42c:	rsbmi	r0, r0, #0
    f430:	bx	lr
    f434:	teq	ip, r0
    f438:	rsbmi	r0, r0, #0
    f43c:	bx	lr
    f440:	movcc	r0, #0
    f444:	asreq	r0, ip, #31
    f448:	orreq	r0, r0, #1
    f44c:	bx	lr
    f450:	clz	r2, r1
    f454:	rsb	r2, r2, #31
    f458:	cmp	ip, #0
    f45c:	lsr	r0, r3, r2
    f460:	rsbmi	r0, r0, #0
    f464:	bx	lr
    f468:	cmp	r0, #0
    f46c:	mvngt	r0, #-2147483648	; 0x80000000
    f470:	movlt	r0, #-2147483648	; 0x80000000
    f474:	b	f498 <__assert_fail@plt+0x673c>
    f478:	cmp	r1, #0
    f47c:	beq	f468 <__assert_fail@plt+0x670c>
    f480:	push	{r0, r1, lr}
    f484:	bl	f260 <__assert_fail@plt+0x6504>
    f488:	pop	{r1, r2, lr}
    f48c:	mul	r3, r2, r0
    f490:	sub	r1, r1, r3
    f494:	bx	lr
    f498:	push	{r1, lr}
    f49c:	mov	r0, #8
    f4a0:	bl	8b70 <raise@plt>
    f4a4:	pop	{r1, pc}
    f4a8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    f4ac:	mov	r7, r0
    f4b0:	ldr	r6, [pc, #76]	; f504 <__assert_fail@plt+0x67a8>
    f4b4:	mov	r8, r1
    f4b8:	ldr	r5, [pc, #72]	; f508 <__assert_fail@plt+0x67ac>
    f4bc:	mov	r9, r2
    f4c0:	add	r6, pc, r6
    f4c4:	bl	8b50 <raise@plt-0x20>
    f4c8:	add	r5, pc, r5
    f4cc:	rsb	r6, r5, r6
    f4d0:	asrs	r6, r6, #2
    f4d4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    f4d8:	sub	r5, r5, #4
    f4dc:	mov	r4, #0
    f4e0:	add	r4, r4, #1
    f4e4:	ldr	r3, [r5, #4]!
    f4e8:	mov	r0, r7
    f4ec:	mov	r1, r8
    f4f0:	mov	r2, r9
    f4f4:	blx	r3
    f4f8:	cmp	r4, r6
    f4fc:	bne	f4e0 <__assert_fail@plt+0x6784>
    f500:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    f504:	andeq	r9, r0, r8, lsr sl
    f508:	andeq	r9, r0, ip, lsr #20
    f50c:	bx	lr

Disassembly of section .fini:

0000f510 <.fini>:
    f510:	push	{r3, lr}
    f514:	pop	{r3, pc}
