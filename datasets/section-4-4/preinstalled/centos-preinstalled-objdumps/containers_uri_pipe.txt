
centos-preinstalled/containers_uri_pipe:     file format elf32-littlearm


Disassembly of section .init:

00010980 <_init@@Base>:
   10980:	push	{r3, lr}
   10984:	bl	10cbc <_start@@Base+0x3c>
   10988:	pop	{r3, pc}

Disassembly of section .plt:

0001098c <_IO_getc@plt-0x14>:
   1098c:	push	{lr}		; (str lr, [sp, #-4]!)
   10990:	ldr	lr, [pc, #4]	; 1099c <_init@@Base+0x1c>
   10994:	add	lr, pc, lr
   10998:	ldr	pc, [lr, #8]!
   1099c:	andeq	r1, r1, r4, ror #12

000109a0 <_IO_getc@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #69632	; 0x11000
   109a8:	ldr	pc, [ip, #1636]!	; 0x664

000109ac <select@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #69632	; 0x11000
   109b4:	ldr	pc, [ip, #1628]!	; 0x65c

000109b8 <__stack_chk_fail@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #69632	; 0x11000
   109c0:	ldr	pc, [ip, #1620]!	; 0x654

000109c4 <_IO_putc@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #69632	; 0x11000
   109cc:	ldr	pc, [ip, #1612]!	; 0x64c

000109d0 <tcsetattr@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #69632	; 0x11000
   109d8:	ldr	pc, [ip, #1604]!	; 0x644

000109dc <vc_container_io_open@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #69632	; 0x11000
   109e4:	ldr	pc, [ip, #1596]!	; 0x63c

000109e8 <__libc_start_main@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #69632	; 0x11000
   109f0:	ldr	pc, [ip, #1588]!	; 0x634

000109f4 <__gmon_start__@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #69632	; 0x11000
   109fc:	ldr	pc, [ip, #1580]!	; 0x62c

00010a00 <vc_container_io_close@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #69632	; 0x11000
   10a08:	ldr	pc, [ip, #1572]!	; 0x624

00010a0c <vc_container_io_write@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #69632	; 0x11000
   10a14:	ldr	pc, [ip, #1564]!	; 0x61c

00010a18 <vc_container_log@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #69632	; 0x11000
   10a20:	ldr	pc, [ip, #1556]!	; 0x614

00010a24 <vc_container_io_read@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #69632	; 0x11000
   10a2c:	ldr	pc, [ip, #1548]!	; 0x60c

00010a30 <abort@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #69632	; 0x11000
   10a38:	ldr	pc, [ip, #1540]!	; 0x604

00010a3c <tcgetattr@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #69632	; 0x11000
   10a44:	ldr	pc, [ip, #1532]!	; 0x5fc

Disassembly of section .text:

00010a48 <main@@Base>:
   10a48:	ldr	r3, [pc, #532]	; 10c64 <main@@Base+0x21c>
   10a4c:	cmp	r0, #2
   10a50:	ldr	r2, [pc, #528]	; 10c68 <main@@Base+0x220>
   10a54:	add	r3, pc, r3
   10a58:	push	{r4, r5, r6, r7, r8, r9, lr}
   10a5c:	sub	sp, sp, #2064	; 0x810
   10a60:	ldr	r9, [r3, r2]
   10a64:	sub	sp, sp, #4
   10a68:	mov	r4, r1
   10a6c:	ldr	r3, [r9]
   10a70:	str	r3, [sp, #2060]	; 0x80c
   10a74:	ble	10bb4 <main@@Base+0x16c>
   10a78:	add	r5, sp, #8
   10a7c:	ldr	r0, [r1, #4]
   10a80:	mov	r1, #0
   10a84:	mov	r2, r5
   10a88:	bl	109dc <vc_container_io_open@plt>
   10a8c:	subs	r8, r0, #0
   10a90:	beq	10bdc <main@@Base+0x194>
   10a94:	mov	r2, r5
   10a98:	ldr	r0, [r4, #8]
   10a9c:	mov	r1, #1
   10aa0:	bl	109dc <vc_container_io_open@plt>
   10aa4:	subs	r6, r0, #0
   10aa8:	beq	10c00 <main@@Base+0x1b8>
   10aac:	mov	r0, #1
   10ab0:	add	r7, sp, #12
   10ab4:	bl	10db4 <nb_set_nonblocking_input@@Base>
   10ab8:	mov	r0, r8
   10abc:	mov	r1, r7
   10ac0:	mov	r2, #2048	; 0x800
   10ac4:	bl	10a24 <vc_container_io_read@plt>
   10ac8:	subs	r5, r0, #0
   10acc:	beq	10bd4 <main@@Base+0x18c>
   10ad0:	mov	r4, #0
   10ad4:	rsb	r2, r4, r5
   10ad8:	add	r1, r7, r4
   10adc:	mov	r0, r6
   10ae0:	bl	10a0c <vc_container_io_write@plt>
   10ae4:	ldr	r3, [r6, #36]	; 0x24
   10ae8:	rsbs	r3, r3, #1
   10aec:	movcc	r3, #0
   10af0:	add	r4, r4, r0
   10af4:	cmp	r5, r4
   10af8:	movls	r2, #0
   10afc:	andhi	r2, r3, #1
   10b00:	cmp	r2, #0
   10b04:	bne	10ad4 <main@@Base+0x8c>
   10b08:	ldr	r2, [r8, #36]	; 0x24
   10b0c:	cmp	r2, #0
   10b10:	movne	r4, #0
   10b14:	andeq	r4, r3, #1
   10b18:	bl	10e34 <nb_char_available@@Base>
   10b1c:	cmp	r0, #0
   10b20:	bne	10b80 <main@@Base+0x138>
   10b24:	cmp	r4, #0
   10b28:	bne	10ab8 <main@@Base+0x70>
   10b2c:	ldr	r3, [r8, #36]	; 0x24
   10b30:	cmp	r3, #10
   10b34:	cmpne	r3, #0
   10b38:	bne	10c48 <main@@Base+0x200>
   10b3c:	ldr	r3, [r6, #36]	; 0x24
   10b40:	cmp	r3, #0
   10b44:	bne	10c30 <main@@Base+0x1e8>
   10b48:	mov	r0, r8
   10b4c:	bl	10a00 <vc_container_io_close@plt>
   10b50:	mov	r0, r6
   10b54:	bl	10a00 <vc_container_io_close@plt>
   10b58:	mov	r0, #0
   10b5c:	bl	10db4 <nb_set_nonblocking_input@@Base>
   10b60:	mov	r0, #0
   10b64:	ldr	r2, [sp, #2060]	; 0x80c
   10b68:	ldr	r3, [r9]
   10b6c:	cmp	r2, r3
   10b70:	bne	10c60 <main@@Base+0x218>
   10b74:	add	sp, sp, #2064	; 0x810
   10b78:	add	sp, sp, #4
   10b7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10b80:	bl	10ecc <nb_get_char@@Base>
   10b84:	cmp	r0, #27
   10b88:	bhi	10ba0 <main@@Base+0x158>
   10b8c:	cmp	r0, #26
   10b90:	bcs	10b2c <main@@Base+0xe4>
   10b94:	cmp	r0, #4
   10b98:	bne	10b24 <main@@Base+0xdc>
   10b9c:	b	10b2c <main@@Base+0xe4>
   10ba0:	cmp	r0, #81	; 0x51
   10ba4:	beq	10b2c <main@@Base+0xe4>
   10ba8:	cmp	r0, #113	; 0x71
   10bac:	bne	10b24 <main@@Base+0xdc>
   10bb0:	b	10b2c <main@@Base+0xe4>
   10bb4:	ldr	r2, [pc, #176]	; 10c6c <main@@Base+0x224>
   10bb8:	mov	r0, #0
   10bbc:	ldr	r3, [r1]
   10bc0:	mov	r1, #2
   10bc4:	add	r2, pc, r2
   10bc8:	bl	10a18 <vc_container_log@plt>
   10bcc:	mov	r0, #1
   10bd0:	b	10b64 <main@@Base+0x11c>
   10bd4:	mov	r3, #1
   10bd8:	b	10b08 <main@@Base+0xc0>
   10bdc:	ldr	r3, [sp, #8]
   10be0:	mov	r1, #2
   10be4:	ldr	r2, [pc, #132]	; 10c70 <main@@Base+0x228>
   10be8:	str	r3, [sp]
   10bec:	add	r2, pc, r2
   10bf0:	ldr	r3, [r4, #4]
   10bf4:	bl	10a18 <vc_container_log@plt>
   10bf8:	mov	r0, #2
   10bfc:	b	10b64 <main@@Base+0x11c>
   10c00:	mov	r0, r8
   10c04:	bl	10a00 <vc_container_io_close@plt>
   10c08:	ldr	r3, [sp, #8]
   10c0c:	ldr	r2, [pc, #96]	; 10c74 <main@@Base+0x22c>
   10c10:	mov	r0, r6
   10c14:	mov	r1, #2
   10c18:	str	r3, [sp]
   10c1c:	add	r2, pc, r2
   10c20:	ldr	r3, [r4, #8]
   10c24:	bl	10a18 <vc_container_log@plt>
   10c28:	mov	r0, #3
   10c2c:	b	10b64 <main@@Base+0x11c>
   10c30:	ldr	r2, [pc, #64]	; 10c78 <main@@Base+0x230>
   10c34:	mov	r0, #0
   10c38:	mov	r1, #2
   10c3c:	add	r2, pc, r2
   10c40:	bl	10a18 <vc_container_log@plt>
   10c44:	b	10b48 <main@@Base+0x100>
   10c48:	ldr	r2, [pc, #44]	; 10c7c <main@@Base+0x234>
   10c4c:	mov	r0, #0
   10c50:	mov	r1, #2
   10c54:	add	r2, pc, r2
   10c58:	bl	10a18 <vc_container_log@plt>
   10c5c:	b	10b3c <main@@Base+0xf4>
   10c60:	bl	109b8 <__stack_chk_fail@plt>
   10c64:	andeq	r1, r1, r4, lsr #11
   10c68:	andeq	r0, r0, r4, asr #32
   10c6c:	andeq	r0, r0, r4, asr #7
   10c70:	andeq	r0, r0, r0, asr #7
   10c74:			; <UNDEFINED> instruction: 0x000003b4
   10c78:	andeq	r0, r0, ip, asr #7
   10c7c:	andeq	r0, r0, r0, lsr #7

00010c80 <_start@@Base>:
   10c80:	mov	fp, #0
   10c84:	mov	lr, #0
   10c88:	pop	{r1}		; (ldr r1, [sp], #4)
   10c8c:	mov	r2, sp
   10c90:	push	{r2}		; (str r2, [sp, #-4]!)
   10c94:	push	{r0}		; (str r0, [sp, #-4]!)
   10c98:	ldr	ip, [pc, #16]	; 10cb0 <_start@@Base+0x30>
   10c9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10ca0:	ldr	r0, [pc, #12]	; 10cb4 <_start@@Base+0x34>
   10ca4:	ldr	r3, [pc, #12]	; 10cb8 <_start@@Base+0x38>
   10ca8:	bl	109e8 <__libc_start_main@plt>
   10cac:	bl	10a30 <abort@plt>
   10cb0:	andeq	r0, r1, ip, ror pc
   10cb4:	andeq	r0, r1, r8, asr #20
   10cb8:	andeq	r0, r1, r8, lsl pc
   10cbc:	ldr	r3, [pc, #20]	; 10cd8 <_start@@Base+0x58>
   10cc0:	ldr	r2, [pc, #20]	; 10cdc <_start@@Base+0x5c>
   10cc4:	add	r3, pc, r3
   10cc8:	ldr	r2, [r3, r2]
   10ccc:	cmp	r2, #0
   10cd0:	bxeq	lr
   10cd4:	b	109f4 <__gmon_start__@plt>
   10cd8:	andeq	r1, r1, r4, lsr r3
   10cdc:	andeq	r0, r0, r8, asr #32
   10ce0:	push	{r3, lr}
   10ce4:	movw	r0, #8280	; 0x2058
   10ce8:	ldr	r3, [pc, #36]	; 10d14 <_start@@Base+0x94>
   10cec:	movt	r0, #2
   10cf0:	rsb	r3, r0, r3
   10cf4:	cmp	r3, #6
   10cf8:	popls	{r3, pc}
   10cfc:	movw	r3, #0
   10d00:	movt	r3, #0
   10d04:	cmp	r3, #0
   10d08:	popeq	{r3, pc}
   10d0c:	blx	r3
   10d10:	pop	{r3, pc}
   10d14:	andeq	r2, r2, fp, asr r0
   10d18:	push	{r3, lr}
   10d1c:	movw	r0, #8280	; 0x2058
   10d20:	movw	r3, #8280	; 0x2058
   10d24:	movt	r0, #2
   10d28:	movt	r3, #2
   10d2c:	rsb	r3, r0, r3
   10d30:	asr	r3, r3, #2
   10d34:	add	r3, r3, r3, lsr #31
   10d38:	asrs	r1, r3, #1
   10d3c:	popeq	{r3, pc}
   10d40:	movw	r2, #0
   10d44:	movt	r2, #0
   10d48:	cmp	r2, #0
   10d4c:	popeq	{r3, pc}
   10d50:	blx	r2
   10d54:	pop	{r3, pc}
   10d58:	push	{r4, lr}
   10d5c:	movw	r4, #8280	; 0x2058
   10d60:	movt	r4, #2
   10d64:	ldrb	r3, [r4]
   10d68:	cmp	r3, #0
   10d6c:	popne	{r4, pc}
   10d70:	bl	10ce0 <_start@@Base+0x60>
   10d74:	mov	r3, #1
   10d78:	strb	r3, [r4]
   10d7c:	pop	{r4, pc}
   10d80:	movw	r0, #7892	; 0x1ed4
   10d84:	movt	r0, #2
   10d88:	push	{r3, lr}
   10d8c:	ldr	r3, [r0]
   10d90:	cmp	r3, #0
   10d94:	beq	10dac <_start@@Base+0x12c>
   10d98:	movw	r3, #0
   10d9c:	movt	r3, #0
   10da0:	cmp	r3, #0
   10da4:	beq	10dac <_start@@Base+0x12c>
   10da8:	blx	r3
   10dac:	pop	{r3, lr}
   10db0:	b	10d18 <_start@@Base+0x98>

00010db4 <nb_set_nonblocking_input@@Base>:
   10db4:	ldr	r3, [pc, #112]	; 10e2c <nb_set_nonblocking_input@@Base+0x78>
   10db8:	ldr	r2, [pc, #112]	; 10e30 <nb_set_nonblocking_input@@Base+0x7c>
   10dbc:	add	r3, pc, r3
   10dc0:	push	{r4, r5, r6, lr}
   10dc4:	sub	sp, sp, #64	; 0x40
   10dc8:	ldr	r4, [r3, r2]
   10dcc:	mov	r6, r0
   10dd0:	mov	r1, sp
   10dd4:	mov	r0, #0
   10dd8:	ldr	r3, [r4]
   10ddc:	str	r3, [sp, #60]	; 0x3c
   10de0:	bl	10a3c <tcgetattr@plt>
   10de4:	cmp	r6, #0
   10de8:	ldr	r3, [sp, #12]
   10dec:	mov	r0, #0
   10df0:	movne	r2, #1
   10df4:	mov	r1, r0
   10df8:	bicne	r3, r3, #2
   10dfc:	orreq	r3, r3, #2
   10e00:	str	r3, [sp, #12]
   10e04:	strbne	r2, [sp, #23]
   10e08:	mov	r2, sp
   10e0c:	bl	109d0 <tcsetattr@plt>
   10e10:	ldr	r2, [sp, #60]	; 0x3c
   10e14:	ldr	r3, [r4]
   10e18:	cmp	r2, r3
   10e1c:	bne	10e28 <nb_set_nonblocking_input@@Base+0x74>
   10e20:	add	sp, sp, #64	; 0x40
   10e24:	pop	{r4, r5, r6, pc}
   10e28:	bl	109b8 <__stack_chk_fail@plt>
   10e2c:	andeq	r1, r1, ip, lsr r2
   10e30:	andeq	r0, r0, r4, asr #32

00010e34 <nb_char_available@@Base>:
   10e34:	ldr	ip, [pc, #136]	; 10ec4 <nb_char_available@@Base+0x90>
   10e38:	mov	r0, #0
   10e3c:	push	{r4, lr}
   10e40:	add	ip, pc, ip
   10e44:	ldr	lr, [pc, #124]	; 10ec8 <nb_char_available@@Base+0x94>
   10e48:	sub	sp, sp, #152	; 0x98
   10e4c:	add	r3, sp, #152	; 0x98
   10e50:	mov	r2, r0
   10e54:	add	r1, sp, #144	; 0x90
   10e58:	ldr	r4, [ip, lr]
   10e5c:	str	r0, [sp, #12]
   10e60:	str	r0, [r3, #-136]!	; 0xffffff78
   10e64:	ldr	r0, [r4]
   10e68:	str	r0, [sp, #148]	; 0x94
   10e6c:	str	r2, [r3, #4]!
   10e70:	cmp	r3, r1
   10e74:	bne	10e6c <nb_char_available@@Base+0x38>
   10e78:	ldr	r0, [sp, #20]
   10e7c:	add	r1, sp, #152	; 0x98
   10e80:	mov	r2, #0
   10e84:	add	ip, sp, #12
   10e88:	mov	r3, r2
   10e8c:	orr	r0, r0, #1
   10e90:	str	r0, [r1, #-132]!	; 0xffffff7c
   10e94:	mov	r0, #1
   10e98:	str	ip, [sp]
   10e9c:	bl	109ac <select@plt>
   10ea0:	ldr	r2, [sp, #148]	; 0x94
   10ea4:	ldr	r3, [r4]
   10ea8:	ldr	r0, [sp, #20]
   10eac:	cmp	r2, r3
   10eb0:	and	r0, r0, #1
   10eb4:	bne	10ec0 <nb_char_available@@Base+0x8c>
   10eb8:	add	sp, sp, #152	; 0x98
   10ebc:	pop	{r4, pc}
   10ec0:	bl	109b8 <__stack_chk_fail@plt>
   10ec4:			; <UNDEFINED> instruction: 0x000111b8
   10ec8:	andeq	r0, r0, r4, asr #32

00010ecc <nb_get_char@@Base>:
   10ecc:	push	{r3, lr}
   10ed0:	ldr	r3, [pc, #24]	; 10ef0 <nb_get_char@@Base+0x24>
   10ed4:	ldr	r2, [pc, #24]	; 10ef4 <nb_get_char@@Base+0x28>
   10ed8:	add	r3, pc, r3
   10edc:	ldr	r3, [r3, r2]
   10ee0:	ldr	r0, [r3]
   10ee4:	bl	109a0 <_IO_getc@plt>
   10ee8:	uxtb	r0, r0
   10eec:	pop	{r3, pc}
   10ef0:	andeq	r1, r1, r0, lsr #2
   10ef4:	andeq	r0, r0, ip, asr #32

00010ef8 <nb_put_char@@Base>:
   10ef8:	ldr	r3, [pc, #16]	; 10f10 <nb_put_char@@Base+0x18>
   10efc:	ldr	r2, [pc, #16]	; 10f14 <nb_put_char@@Base+0x1c>
   10f00:	add	r3, pc, r3
   10f04:	ldr	r3, [r3, r2]
   10f08:	ldr	r1, [r3]
   10f0c:	b	109c4 <_IO_putc@plt>
   10f10:	strdeq	r1, [r1], -r8
   10f14:	andeq	r0, r0, r0, asr r0

00010f18 <__libc_csu_init@@Base>:
   10f18:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10f1c:	mov	r7, r0
   10f20:	ldr	r6, [pc, #76]	; 10f74 <__libc_csu_init@@Base+0x5c>
   10f24:	mov	r8, r1
   10f28:	ldr	r5, [pc, #72]	; 10f78 <__libc_csu_init@@Base+0x60>
   10f2c:	mov	r9, r2
   10f30:	add	r6, pc, r6
   10f34:	bl	10980 <_init@@Base>
   10f38:	add	r5, pc, r5
   10f3c:	rsb	r6, r5, r6
   10f40:	asrs	r6, r6, #2
   10f44:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10f48:	sub	r5, r5, #4
   10f4c:	mov	r4, #0
   10f50:	add	r4, r4, #1
   10f54:	ldr	r3, [r5, #4]!
   10f58:	mov	r0, r7
   10f5c:	mov	r1, r8
   10f60:	mov	r2, r9
   10f64:	blx	r3
   10f68:	cmp	r4, r6
   10f6c:	bne	10f50 <__libc_csu_init@@Base+0x38>
   10f70:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10f74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   10f78:	andeq	r0, r1, ip, lsl #31

00010f7c <__libc_csu_fini@@Base>:
   10f7c:	bx	lr

Disassembly of section .fini:

00010f80 <_fini@@Base>:
   10f80:	push	{r3, lr}
   10f84:	pop	{r3, pc}
