
centos-preinstalled/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011260 <.init>:
   11260:	push	{r3, lr}
   11264:	bl	12840 <__assert_fail@plt+0x1254>
   11268:	pop	{r3, pc}

Disassembly of section .plt:

0001126c <fdopen@plt-0x14>:
   1126c:	push	{lr}		; (str lr, [sp, #-4]!)
   11270:	ldr	lr, [pc, #4]	; 1127c <fdopen@plt-0x4>
   11274:	add	lr, pc, lr
   11278:	ldr	pc, [lr, #8]!
   1127c:	andeq	r8, r1, r4, lsl #27

00011280 <fdopen@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #24, 20	; 0x18000
   11288:	ldr	pc, [ip, #3460]!	; 0xd84

0001128c <calloc@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #24, 20	; 0x18000
   11294:	ldr	pc, [ip, #3452]!	; 0xd7c

00011298 <fputs_unlocked@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #24, 20	; 0x18000
   112a0:	ldr	pc, [ip, #3444]!	; 0xd74

000112a4 <raise@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #24, 20	; 0x18000
   112ac:	ldr	pc, [ip, #3436]!	; 0xd6c

000112b0 <strcmp@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #24, 20	; 0x18000
   112b8:	ldr	pc, [ip, #3428]!	; 0xd64

000112bc <read@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #24, 20	; 0x18000
   112c4:	ldr	pc, [ip, #3420]!	; 0xd5c

000112c8 <fflush@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #24, 20	; 0x18000
   112d0:	ldr	pc, [ip, #3412]!	; 0xd54

000112d4 <sigprocmask@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #24, 20	; 0x18000
   112dc:	ldr	pc, [ip, #3404]!	; 0xd4c

000112e0 <free@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #24, 20	; 0x18000
   112e8:	ldr	pc, [ip, #3396]!	; 0xd44

000112ec <_exit@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #24, 20	; 0x18000
   112f4:	ldr	pc, [ip, #3388]!	; 0xd3c

000112f8 <memcpy@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #24, 20	; 0x18000
   11300:	ldr	pc, [ip, #3380]!	; 0xd34

00011304 <__strtoull_internal@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #24, 20	; 0x18000
   1130c:	ldr	pc, [ip, #3372]!	; 0xd2c

00011310 <mbsinit@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #24, 20	; 0x18000
   11318:	ldr	pc, [ip, #3364]!	; 0xd24

0001131c <signal@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #24, 20	; 0x18000
   11324:	ldr	pc, [ip, #3356]!	; 0xd1c

00011328 <fwrite_unlocked@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #24, 20	; 0x18000
   11330:	ldr	pc, [ip, #3348]!	; 0xd14

00011334 <memcmp@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #24, 20	; 0x18000
   1133c:	ldr	pc, [ip, #3340]!	; 0xd0c

00011340 <dcgettext@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #24, 20	; 0x18000
   11348:	ldr	pc, [ip, #3332]!	; 0xd04

0001134c <__stack_chk_fail@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #24, 20	; 0x18000
   11354:	ldr	pc, [ip, #3324]!	; 0xcfc

00011358 <unlink@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #24, 20	; 0x18000
   11360:	ldr	pc, [ip, #3316]!	; 0xcf4

00011364 <dup2@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #24, 20	; 0x18000
   1136c:	ldr	pc, [ip, #3308]!	; 0xcec

00011370 <realloc@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #24, 20	; 0x18000
   11378:	ldr	pc, [ip, #3300]!	; 0xce4

0001137c <sigismember@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #24, 20	; 0x18000
   11384:	ldr	pc, [ip, #3292]!	; 0xcdc

00011388 <textdomain@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #24, 20	; 0x18000
   11390:	ldr	pc, [ip, #3284]!	; 0xcd4

00011394 <iswprint@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #24, 20	; 0x18000
   1139c:	ldr	pc, [ip, #3276]!	; 0xccc

000113a0 <sigaction@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #24, 20	; 0x18000
   113a8:	ldr	pc, [ip, #3268]!	; 0xcc4

000113ac <fwrite@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #24, 20	; 0x18000
   113b4:	ldr	pc, [ip, #3260]!	; 0xcbc

000113b8 <lseek64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #24, 20	; 0x18000
   113c0:	ldr	pc, [ip, #3252]!	; 0xcb4

000113c4 <__ctype_get_mb_cur_max@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #24, 20	; 0x18000
   113cc:	ldr	pc, [ip, #3244]!	; 0xcac

000113d0 <strcpy@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #24, 20	; 0x18000
   113d8:	ldr	pc, [ip, #3236]!	; 0xca4

000113dc <__fpending@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #24, 20	; 0x18000
   113e4:	ldr	pc, [ip, #3228]!	; 0xc9c

000113e8 <mbrtowc@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #24, 20	; 0x18000
   113f0:	ldr	pc, [ip, #3220]!	; 0xc94

000113f4 <error@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #24, 20	; 0x18000
   113fc:	ldr	pc, [ip, #3212]!	; 0xc8c

00011400 <open64@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #24, 20	; 0x18000
   11408:	ldr	pc, [ip, #3204]!	; 0xc84

0001140c <getenv@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #24, 20	; 0x18000
   11414:	ldr	pc, [ip, #3196]!	; 0xc7c

00011418 <malloc@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #24, 20	; 0x18000
   11420:	ldr	pc, [ip, #3188]!	; 0xc74

00011424 <sigaddset@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #24, 20	; 0x18000
   1142c:	ldr	pc, [ip, #3180]!	; 0xc6c

00011430 <__libc_start_main@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #24, 20	; 0x18000
   11438:	ldr	pc, [ip, #3172]!	; 0xc64

0001143c <__freading@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #24, 20	; 0x18000
   11444:	ldr	pc, [ip, #3164]!	; 0xc5c

00011448 <__gmon_start__@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #24, 20	; 0x18000
   11450:	ldr	pc, [ip, #3156]!	; 0xc54

00011454 <getopt_long@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #24, 20	; 0x18000
   1145c:	ldr	pc, [ip, #3148]!	; 0xc4c

00011460 <__ctype_b_loc@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #24, 20	; 0x18000
   11468:	ldr	pc, [ip, #3140]!	; 0xc44

0001146c <exit@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #24, 20	; 0x18000
   11474:	ldr	pc, [ip, #3132]!	; 0xc3c

00011478 <strtoul@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #24, 20	; 0x18000
   11480:	ldr	pc, [ip, #3124]!	; 0xc34

00011484 <strlen@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #24, 20	; 0x18000
   1148c:	ldr	pc, [ip, #3116]!	; 0xc2c

00011490 <strchr@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #24, 20	; 0x18000
   11498:	ldr	pc, [ip, #3108]!	; 0xc24

0001149c <re_search@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #24, 20	; 0x18000
   114a4:	ldr	pc, [ip, #3100]!	; 0xc1c

000114a8 <ungetc@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #24, 20	; 0x18000
   114b0:	ldr	pc, [ip, #3092]!	; 0xc14

000114b4 <fcntl@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #24, 20	; 0x18000
   114bc:	ldr	pc, [ip, #3084]!	; 0xc0c

000114c0 <__errno_location@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #24, 20	; 0x18000
   114c8:	ldr	pc, [ip, #3076]!	; 0xc04

000114cc <__sprintf_chk@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #24, 20	; 0x18000
   114d4:	ldr	pc, [ip, #3068]!	; 0xbfc

000114d8 <__cxa_atexit@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #24, 20	; 0x18000
   114e0:	ldr	pc, [ip, #3060]!	; 0xbf4

000114e4 <memset@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #24, 20	; 0x18000
   114ec:	ldr	pc, [ip, #3052]!	; 0xbec

000114f0 <fscanf@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #24, 20	; 0x18000
   114f8:	ldr	pc, [ip, #3044]!	; 0xbe4

000114fc <__printf_chk@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #24, 20	; 0x18000
   11504:	ldr	pc, [ip, #3036]!	; 0xbdc

00011508 <fileno@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #24, 20	; 0x18000
   11510:	ldr	pc, [ip, #3028]!	; 0xbd4

00011514 <__fprintf_chk@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #24, 20	; 0x18000
   1151c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011520 <memchr@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #24, 20	; 0x18000
   11528:	ldr	pc, [ip, #3012]!	; 0xbc4

0001152c <fclose@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #24, 20	; 0x18000
   11534:	ldr	pc, [ip, #3004]!	; 0xbbc

00011538 <fseeko64@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #24, 20	; 0x18000
   11540:	ldr	pc, [ip, #2996]!	; 0xbb4

00011544 <__uflow@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #24, 20	; 0x18000
   1154c:	ldr	pc, [ip, #2988]!	; 0xbac

00011550 <setlocale@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #24, 20	; 0x18000
   11558:	ldr	pc, [ip, #2980]!	; 0xba4

0001155c <sigemptyset@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #24, 20	; 0x18000
   11564:	ldr	pc, [ip, #2972]!	; 0xb9c

00011568 <strrchr@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #24, 20	; 0x18000
   11570:	ldr	pc, [ip, #2964]!	; 0xb94

00011574 <nl_langinfo@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #24, 20	; 0x18000
   1157c:	ldr	pc, [ip, #2956]!	; 0xb8c

00011580 <fputc@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #24, 20	; 0x18000
   11588:	ldr	pc, [ip, #2948]!	; 0xb84

0001158c <__strtoll_internal@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #24, 20	; 0x18000
   11594:	ldr	pc, [ip, #2940]!	; 0xb7c

00011598 <fopen64@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #24, 20	; 0x18000
   115a0:	ldr	pc, [ip, #2932]!	; 0xb74

000115a4 <bindtextdomain@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #24, 20	; 0x18000
   115ac:	ldr	pc, [ip, #2924]!	; 0xb6c

000115b0 <re_compile_pattern@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #24, 20	; 0x18000
   115b8:	ldr	pc, [ip, #2916]!	; 0xb64

000115bc <strncmp@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #24, 20	; 0x18000
   115c4:	ldr	pc, [ip, #2908]!	; 0xb5c

000115c8 <abort@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #24, 20	; 0x18000
   115d0:	ldr	pc, [ip, #2900]!	; 0xb54

000115d4 <close@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #24, 20	; 0x18000
   115dc:	ldr	pc, [ip, #2892]!	; 0xb4c

000115e0 <__snprintf_chk@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #24, 20	; 0x18000
   115e8:	ldr	pc, [ip, #2884]!	; 0xb44

000115ec <__assert_fail@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #24, 20	; 0x18000
   115f4:	ldr	pc, [ip, #2876]!	; 0xb3c

Disassembly of section .text:

000115f8 <close_stdout@@Base-0x2538>:
   115f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115fc:	sub	sp, sp, #260	; 0x104
   11600:	ldr	r6, [pc, #4024]	; 125c0 <__assert_fail@plt+0xfd4>
   11604:	mov	r7, r0
   11608:	ldr	r3, [pc, #4020]	; 125c4 <__assert_fail@plt+0xfd8>
   1160c:	mov	r9, r1
   11610:	add	r6, pc, r6
   11614:	ldr	r8, [pc, #4012]	; 125c8 <__assert_fail@plt+0xfdc>
   11618:	ldr	ip, [pc, #4012]	; 125cc <__assert_fail@plt+0xfe0>
   1161c:	ldr	r3, [r6, r3]
   11620:	add	r8, pc, r8
   11624:	ldr	r0, [r1]
   11628:	add	ip, pc, ip
   1162c:	str	r8, [sp, #16]
   11630:	ldr	r3, [r3]
   11634:	str	ip, [sp, #28]
   11638:	ldr	r4, [pc, #3984]	; 125d0 <__assert_fail@plt+0xfe4>
   1163c:	str	r3, [sp, #252]	; 0xfc
   11640:	bl	13e4c <close_stdout@@Base+0x31c>
   11644:	ldr	r1, [pc, #3976]	; 125d4 <__assert_fail@plt+0xfe8>
   11648:	mov	r0, #6
   1164c:	add	r4, pc, r4
   11650:	ldr	sl, [pc, #3968]	; 125d8 <__assert_fail@plt+0xfec>
   11654:	add	r1, pc, r1
   11658:	ldr	r8, [pc, #3964]	; 125dc <__assert_fail@plt+0xff0>
   1165c:	bl	11550 <setlocale@plt>
   11660:	ldr	r1, [pc, #3960]	; 125e0 <__assert_fail@plt+0xff4>
   11664:	mov	r0, r4
   11668:	ldr	r5, [pc, #3956]	; 125e4 <__assert_fail@plt+0xff8>
   1166c:	add	r1, pc, r1
   11670:	add	sl, pc, sl
   11674:	bl	115a4 <bindtextdomain@plt>
   11678:	mov	r0, r4
   1167c:	bl	11388 <textdomain@plt>
   11680:	ldr	r3, [pc, #3936]	; 125e8 <__assert_fail@plt+0xffc>
   11684:	ldr	r4, [pc, #3936]	; 125ec <__assert_fail@plt+0x1000>
   11688:	add	r8, pc, r8
   1168c:	add	r5, pc, r5
   11690:	ldr	r0, [r6, r3]
   11694:	add	r4, pc, r4
   11698:	bl	189a0 <close_stdout@@Base+0x4e70>
   1169c:	ldr	r3, [pc, #3916]	; 125f0 <__assert_fail@plt+0x1004>
   116a0:	ldr	r1, [pc, #3916]	; 125f4 <__assert_fail@plt+0x1008>
   116a4:	mov	r2, #0
   116a8:	add	r3, pc, r3
   116ac:	mov	r0, #1
   116b0:	add	r1, pc, r1
   116b4:	strb	r0, [r3, #156]	; 0x9c
   116b8:	str	r9, [r3, #216]	; 0xd8
   116bc:	str	r2, [r3, #176]	; 0xb0
   116c0:	str	r1, [r3, #4]
   116c4:	str	r2, [r3, #168]	; 0xa8
   116c8:	strb	r2, [r3, #165]	; 0xa5
   116cc:	strb	r2, [r3, #220]	; 0xdc
   116d0:	ldr	r2, [pc, #3872]	; 125f8 <__assert_fail@plt+0x100c>
   116d4:	mov	fp, #0
   116d8:	ldr	r3, [pc, #3868]	; 125fc <__assert_fail@plt+0x1010>
   116dc:	mov	r0, r7
   116e0:	str	fp, [sp]
   116e4:	mov	r1, r9
   116e8:	add	r2, pc, r2
   116ec:	add	r3, pc, r3
   116f0:	bl	11454 <getopt_long@plt>
   116f4:	cmn	r0, #1
   116f8:	beq	118b4 <__assert_fail@plt+0x2c8>
   116fc:	cmp	r0, #107	; 0x6b
   11700:	beq	1187c <__assert_fail@plt+0x290>
   11704:	bgt	11740 <__assert_fail@plt+0x154>
   11708:	cmn	r0, #2
   1170c:	beq	11874 <__assert_fail@plt+0x288>
   11710:	ble	11824 <__assert_fail@plt+0x238>
   11714:	cmp	r0, #98	; 0x62
   11718:	beq	117bc <__assert_fail@plt+0x1d0>
   1171c:	cmp	r0, #102	; 0x66
   11720:	bne	1181c <__assert_fail@plt+0x230>
   11724:	ldr	r2, [pc, #3796]	; 12600 <__assert_fail@plt+0x1014>
   11728:	ldr	r3, [pc, #3796]	; 12604 <__assert_fail@plt+0x1018>
   1172c:	ldr	r2, [r6, r2]
   11730:	add	r3, pc, r3
   11734:	ldr	r2, [r2]
   11738:	str	r2, [r3, #4]
   1173c:	b	116d0 <__assert_fail@plt+0xe4>
   11740:	cmp	r0, #115	; 0x73
   11744:	beq	117e0 <__assert_fail@plt+0x1f4>
   11748:	ble	1176c <__assert_fail@plt+0x180>
   1174c:	cmp	r0, #122	; 0x7a
   11750:	beq	117b0 <__assert_fail@plt+0x1c4>
   11754:	cmp	r0, #256	; 0x100
   11758:	bne	1181c <__assert_fail@plt+0x230>
   1175c:	ldr	ip, [sp, #28]
   11760:	mov	r3, #1
   11764:	strb	r3, [ip, #220]	; 0xdc
   11768:	b	116d0 <__assert_fail@plt+0xe4>
   1176c:	cmp	r0, #110	; 0x6e
   11770:	bne	117d8 <__assert_fail@plt+0x1ec>
   11774:	ldr	r0, [pc, #3716]	; 12600 <__assert_fail@plt+0x1014>
   11778:	mov	r1, fp
   1177c:	mov	r2, #10
   11780:	add	r3, sp, #68	; 0x44
   11784:	ldr	fp, [r6, r0]
   11788:	str	r5, [sp]
   1178c:	ldr	r0, [fp]
   11790:	bl	16918 <close_stdout@@Base+0x2de8>
   11794:	cmp	r0, #0
   11798:	bne	11884 <__assert_fail@plt+0x298>
   1179c:	ldr	r3, [sp, #68]	; 0x44
   117a0:	cmp	r3, #0
   117a4:	blt	11884 <__assert_fail@plt+0x298>
   117a8:	str	r3, [r4]
   117ac:	b	116d0 <__assert_fail@plt+0xe4>
   117b0:	mov	r3, #1
   117b4:	strb	r3, [r8, #164]	; 0xa4
   117b8:	b	116d0 <__assert_fail@plt+0xe4>
   117bc:	ldr	r2, [pc, #3644]	; 12600 <__assert_fail@plt+0x1014>
   117c0:	ldr	r3, [pc, #3648]	; 12608 <__assert_fail@plt+0x101c>
   117c4:	ldr	r2, [r6, r2]
   117c8:	add	r3, pc, r3
   117cc:	ldr	r2, [r2]
   117d0:	str	r2, [r3, #8]
   117d4:	b	116d0 <__assert_fail@plt+0xe4>
   117d8:	cmp	r0, #113	; 0x71
   117dc:	bne	1181c <__assert_fail@plt+0x230>
   117e0:	ldr	ip, [sp, #16]
   117e4:	mov	r3, #1
   117e8:	strb	r3, [ip, #165]	; 0xa5
   117ec:	b	116d0 <__assert_fail@plt+0xe4>
   117f0:	cmp	r7, r3
   117f4:	mov	r0, fp
   117f8:	bgt	1245c <__assert_fail@plt+0xe70>
   117fc:	ldr	r1, [pc, #3592]	; 1260c <__assert_fail@plt+0x1020>
   11800:	mov	r2, #5
   11804:	add	r1, pc, r1
   11808:	bl	11340 <dcgettext@plt>
   1180c:	mov	r1, fp
   11810:	mov	r2, r0
   11814:	mov	r0, fp
   11818:	bl	113f4 <error@plt>
   1181c:	mov	r0, #1
   11820:	bl	1386c <__assert_fail@plt+0x2280>
   11824:	cmn	r0, #3
   11828:	bne	1181c <__assert_fail@plt+0x230>
   1182c:	ldr	r2, [pc, #3548]	; 12610 <__assert_fail@plt+0x1024>
   11830:	ldr	r3, [pc, #3548]	; 12614 <__assert_fail@plt+0x1028>
   11834:	ldr	r1, [pc, #3548]	; 12618 <__assert_fail@plt+0x102c>
   11838:	ldr	r0, [r6, r2]
   1183c:	ldr	r3, [r6, r3]
   11840:	add	r1, pc, r1
   11844:	ldr	r2, [pc, #3536]	; 1261c <__assert_fail@plt+0x1030>
   11848:	ldr	r0, [r0]
   1184c:	add	r2, pc, r2
   11850:	ldr	r3, [r3]
   11854:	stm	sp, {r1, r2, fp}
   11858:	ldr	r1, [pc, #3520]	; 12620 <__assert_fail@plt+0x1034>
   1185c:	ldr	r2, [pc, #3520]	; 12624 <__assert_fail@plt+0x1038>
   11860:	add	r1, pc, r1
   11864:	add	r2, pc, r2
   11868:	bl	15ba4 <close_stdout@@Base+0x2074>
   1186c:	mov	r0, fp
   11870:	bl	1146c <exit@plt>
   11874:	mov	r0, fp
   11878:	bl	1386c <__assert_fail@plt+0x2280>
   1187c:	strb	fp, [sl, #156]	; 0x9c
   11880:	b	116d0 <__assert_fail@plt+0xe4>
   11884:	ldr	r1, [pc, #3484]	; 12628 <__assert_fail@plt+0x103c>
   11888:	mov	r2, #5
   1188c:	mov	r0, #0
   11890:	add	r1, pc, r1
   11894:	bl	11340 <dcgettext@plt>
   11898:	ldr	r3, [fp]
   1189c:	mov	r1, #0
   118a0:	mov	r2, r0
   118a4:	mov	r0, #1
   118a8:	bl	113f4 <error@plt>
   118ac:	ldr	r3, [sp, #68]	; 0x44
   118b0:	b	117a8 <__assert_fail@plt+0x1bc>
   118b4:	ldr	r3, [pc, #3440]	; 1262c <__assert_fail@plt+0x1040>
   118b8:	ldr	r3, [r6, r3]
   118bc:	str	r3, [sp, #16]
   118c0:	ldr	r3, [r3]
   118c4:	rsb	r2, r3, r7
   118c8:	cmp	r2, #1
   118cc:	ble	117f0 <__assert_fail@plt+0x204>
   118d0:	ldr	r4, [pc, #3416]	; 12630 <__assert_fail@plt+0x1044>
   118d4:	add	r4, pc, r4
   118d8:	ldr	r0, [r4, #4]
   118dc:	bl	11484 <strlen@plt>
   118e0:	ldr	r3, [r4, #8]
   118e4:	cmp	r3, #0
   118e8:	mov	r8, r0
   118ec:	beq	11994 <__assert_fail@plt+0x3a8>
   118f0:	ldr	ip, [pc, #3388]	; 12634 <__assert_fail@plt+0x1048>
   118f4:	ldr	r4, [r4, #8]
   118f8:	add	ip, pc, ip
   118fc:	str	ip, [sp, #32]
   11900:	ldr	ip, [pc, #3376]	; 12638 <__assert_fail@plt+0x104c>
   11904:	str	r4, [sp, #28]
   11908:	add	ip, pc, ip
   1190c:	str	ip, [sp, #52]	; 0x34
   11910:	ldr	ip, [pc, #3364]	; 1263c <__assert_fail@plt+0x1050>
   11914:	add	ip, pc, ip
   11918:	str	ip, [sp, #56]	; 0x38
   1191c:	ldr	ip, [pc, #3356]	; 12640 <__assert_fail@plt+0x1054>
   11920:	add	ip, pc, ip
   11924:	str	ip, [sp, #48]	; 0x30
   11928:	ldr	ip, [pc, #3348]	; 12644 <__assert_fail@plt+0x1058>
   1192c:	add	ip, pc, ip
   11930:	str	ip, [sp, #40]	; 0x28
   11934:	b	1193c <__assert_fail@plt+0x350>
   11938:	add	r4, r4, #1
   1193c:	ldrb	r3, [r4]
   11940:	cmp	r3, #0
   11944:	beq	11e3c <__assert_fail@plt+0x850>
   11948:	cmp	r3, #37	; 0x25
   1194c:	bne	11938 <__assert_fail@plt+0x34c>
   11950:	ldrb	r3, [r4, #1]
   11954:	add	r4, r4, #1
   11958:	cmp	r3, #37	; 0x25
   1195c:	beq	11938 <__assert_fail@plt+0x34c>
   11960:	cmp	fp, #0
   11964:	bne	122ac <__assert_fail@plt+0xcc0>
   11968:	mov	r2, r4
   1196c:	mov	r5, #0
   11970:	mov	r4, r2
   11974:	ldrb	r3, [r2], #1
   11978:	cmp	r3, #39	; 0x27
   1197c:	beq	11d30 <__assert_fail@plt+0x744>
   11980:	bhi	11c64 <__assert_fail@plt+0x678>
   11984:	cmp	r3, #35	; 0x23
   11988:	bne	11c74 <__assert_fail@plt+0x688>
   1198c:	orr	r5, r5, #2
   11990:	b	11970 <__assert_fail@plt+0x384>
   11994:	ldr	r3, [pc, #3244]	; 12648 <__assert_fail@plt+0x105c>
   11998:	add	r3, pc, r3
   1199c:	ldr	r2, [r3]
   119a0:	cmp	r2, #9
   119a4:	ldrhi	r2, [r3]
   119a8:	movls	r2, #10
   119ac:	movw	r3, #65534	; 0xfffe
   119b0:	movt	r3, #65535	; 0xffff
   119b4:	rsb	r3, r8, r3
   119b8:	cmp	r2, r3
   119bc:	bhi	11e74 <__assert_fail@plt+0x888>
   119c0:	add	r0, r8, #1
   119c4:	add	r0, r0, r2
   119c8:	bl	15cb4 <close_stdout@@Base+0x2184>
   119cc:	ldr	r8, [sp, #16]
   119d0:	ldr	r2, [pc, #3188]	; 1264c <__assert_fail@plt+0x1060>
   119d4:	ldr	r3, [r8]
   119d8:	add	r2, pc, r2
   119dc:	add	r1, r3, #1
   119e0:	str	r1, [r8]
   119e4:	ldr	r4, [r9, r3, lsl #2]
   119e8:	ldrb	r3, [r4]
   119ec:	cmp	r3, #45	; 0x2d
   119f0:	str	r0, [r2]
   119f4:	beq	1241c <__assert_fail@plt+0xe30>
   119f8:	mov	r0, #0
   119fc:	mov	r1, r4
   11a00:	mov	r2, r0
   11a04:	mov	r3, r0
   11a08:	bl	13cec <close_stdout@@Base+0x1bc>
   11a0c:	cmp	r0, #0
   11a10:	blt	126f4 <__assert_fail@plt+0x1108>
   11a14:	ldr	ip, [sp, #16]
   11a18:	ldr	r8, [pc, #3120]	; 12650 <__assert_fail@plt+0x1064>
   11a1c:	str	r6, [sp, #52]	; 0x34
   11a20:	ldr	fp, [ip]
   11a24:	add	r8, pc, r8
   11a28:	ldr	ip, [pc, #3108]	; 12654 <__assert_fail@plt+0x1068>
   11a2c:	str	r8, [sp, #32]
   11a30:	ldr	r8, [pc, #3104]	; 12658 <__assert_fail@plt+0x106c>
   11a34:	add	ip, pc, ip
   11a38:	str	ip, [sp, #28]
   11a3c:	ldr	ip, [pc, #3096]	; 1265c <__assert_fail@plt+0x1070>
   11a40:	add	r8, pc, r8
   11a44:	str	r8, [sp, #40]	; 0x28
   11a48:	ldr	r8, [pc, #3088]	; 12660 <__assert_fail@plt+0x1074>
   11a4c:	add	ip, pc, ip
   11a50:	str	ip, [sp, #48]	; 0x30
   11a54:	ldr	ip, [pc, #3080]	; 12664 <__assert_fail@plt+0x1078>
   11a58:	add	r8, pc, r8
   11a5c:	str	r8, [sp, #60]	; 0x3c
   11a60:	mov	r8, r9
   11a64:	mov	r9, r7
   11a68:	add	ip, pc, ip
   11a6c:	str	ip, [sp, #56]	; 0x38
   11a70:	cmp	r9, fp
   11a74:	ble	11edc <__assert_fail@plt+0x8f0>
   11a78:	ldr	r7, [r8, fp, lsl #2]
   11a7c:	lsl	r6, fp, #2
   11a80:	ldrb	r4, [r7]
   11a84:	subs	r3, r4, #37	; 0x25
   11a88:	rsbs	sl, r3, #0
   11a8c:	adcs	sl, sl, r3
   11a90:	cmp	r4, #47	; 0x2f
   11a94:	movne	r5, sl
   11a98:	orreq	r5, sl, #1
   11a9c:	cmp	r5, #0
   11aa0:	beq	11bf0 <__assert_fail@plt+0x604>
   11aa4:	add	r5, r7, #1
   11aa8:	mov	r1, r4
   11aac:	mov	r0, r5
   11ab0:	bl	11568 <strrchr@plt>
   11ab4:	subs	ip, r0, #0
   11ab8:	str	ip, [sp, #16]
   11abc:	beq	12494 <__assert_fail@plt+0xea8>
   11ac0:	bl	13070 <__assert_fail@plt+0x1a84>
   11ac4:	mov	lr, #1
   11ac8:	mov	r4, r0
   11acc:	strb	sl, [r0, #29]
   11ad0:	strb	lr, [r0, #30]
   11ad4:	mov	sl, #0
   11ad8:	str	fp, [r0, #24]
   11adc:	mov	r0, #256	; 0x100
   11ae0:	str	sl, [r4, #32]
   11ae4:	str	sl, [r4, #36]	; 0x24
   11ae8:	bl	15cb4 <close_stdout@@Base+0x2184>
   11aec:	ldr	lr, [sp, #52]	; 0x34
   11af0:	ldr	r3, [pc, #2928]	; 12668 <__assert_fail@plt+0x107c>
   11af4:	add	r2, r4, #32
   11af8:	ldr	ip, [sp, #16]
   11afc:	str	sl, [r4, #52]	; 0x34
   11b00:	rsb	r1, r7, ip
   11b04:	movw	ip, #710	; 0x2c6
   11b08:	sub	r1, r1, #1
   11b0c:	str	r0, [r4, #48]	; 0x30
   11b10:	mov	r0, r5
   11b14:	ldr	r3, [lr, r3]
   11b18:	str	ip, [r3]
   11b1c:	bl	115b0 <re_compile_pattern@plt>
   11b20:	subs	r5, r0, #0
   11b24:	bne	127a4 <__assert_fail@plt+0x11b8>
   11b28:	ldr	ip, [sp, #16]
   11b2c:	ldrb	r3, [ip, #1]
   11b30:	cmp	r3, #0
   11b34:	bne	11d38 <__assert_fail@plt+0x74c>
   11b38:	add	fp, fp, #1
   11b3c:	cmp	r9, fp
   11b40:	ble	11a70 <__assert_fail@plt+0x484>
   11b44:	add	r6, r6, #4
   11b48:	ldr	r5, [r8, r6]
   11b4c:	ldrb	r3, [r5]
   11b50:	cmp	r3, #123	; 0x7b
   11b54:	bne	11a70 <__assert_fail@plt+0x484>
   11b58:	mov	r0, r5
   11b5c:	bl	11484 <strlen@plt>
   11b60:	sub	r7, r0, #1
   11b64:	add	sl, r5, r7
   11b68:	ldrb	r3, [r5, r7]
   11b6c:	cmp	r3, #125	; 0x7d
   11b70:	beq	11b9c <__assert_fail@plt+0x5b0>
   11b74:	ldr	r1, [pc, #2800]	; 1266c <__assert_fail@plt+0x1080>
   11b78:	mov	r2, #5
   11b7c:	mov	r0, #0
   11b80:	add	r1, pc, r1
   11b84:	bl	11340 <dcgettext@plt>
   11b88:	mov	r1, #0
   11b8c:	mov	r3, r5
   11b90:	mov	r2, r0
   11b94:	mov	r0, #1
   11b98:	bl	113f4 <error@plt>
   11b9c:	sub	r3, sl, #1
   11ba0:	add	r0, r5, #1
   11ba4:	cmp	r0, r3
   11ba8:	mov	r3, #0
   11bac:	strb	r3, [r5, r7]
   11bb0:	beq	12504 <__assert_fail@plt+0xf18>
   11bb4:	ldr	ip, [pc, #2740]	; 12670 <__assert_fail@plt+0x1084>
   11bb8:	mov	r1, #0
   11bbc:	mov	r2, #10
   11bc0:	add	r3, sp, #80	; 0x50
   11bc4:	add	ip, pc, ip
   11bc8:	str	ip, [sp]
   11bcc:	bl	16e50 <close_stdout@@Base+0x3320>
   11bd0:	cmp	r0, #0
   11bd4:	bne	1251c <__assert_fail@plt+0xf30>
   11bd8:	ldrd	r2, [sp, #80]	; 0x50
   11bdc:	strd	r2, [r4, #16]
   11be0:	mov	r3, #125	; 0x7d
   11be4:	add	fp, fp, #1
   11be8:	strb	r3, [r5, r7]
   11bec:	b	11a70 <__assert_fail@plt+0x484>
   11bf0:	bl	13070 <__assert_fail@plt+0x1a84>
   11bf4:	ldr	ip, [sp, #32]
   11bf8:	mov	r1, r5
   11bfc:	mov	r2, #10
   11c00:	add	r3, sp, #72	; 0x48
   11c04:	str	fp, [r0, #24]
   11c08:	mov	r4, r0
   11c0c:	str	ip, [sp]
   11c10:	ldr	r0, [r8, fp, lsl #2]
   11c14:	bl	16e50 <close_stdout@@Base+0x3320>
   11c18:	cmp	r0, #0
   11c1c:	bne	11e10 <__assert_fail@plt+0x824>
   11c20:	ldrd	r0, [sp, #72]	; 0x48
   11c24:	orrs	lr, r0, r1
   11c28:	beq	11de0 <__assert_fail@plt+0x7f4>
   11c2c:	ldr	ip, [sp, #28]
   11c30:	ldrd	r2, [ip, #224]	; 0xe0
   11c34:	cmp	r1, r3
   11c38:	cmpeq	r0, r2
   11c3c:	bcc	11d90 <__assert_fail@plt+0x7a4>
   11c40:	ldr	ip, [sp, #40]	; 0x28
   11c44:	ldrd	r2, [ip, #224]	; 0xe0
   11c48:	cmp	r1, r3
   11c4c:	cmpeq	r0, r2
   11c50:	beq	123c4 <__assert_fail@plt+0xdd8>
   11c54:	ldr	ip, [sp, #48]	; 0x30
   11c58:	strd	r0, [r4, #8]
   11c5c:	strd	r0, [ip, #224]	; 0xe0
   11c60:	b	11b38 <__assert_fail@plt+0x54c>
   11c64:	cmp	r3, #45	; 0x2d
   11c68:	beq	11970 <__assert_fail@plt+0x384>
   11c6c:	cmp	r3, #48	; 0x30
   11c70:	beq	11970 <__assert_fail@plt+0x384>
   11c74:	sub	r2, r3, #48	; 0x30
   11c78:	cmp	r2, #9
   11c7c:	bhi	11c98 <__assert_fail@plt+0x6ac>
   11c80:	add	r2, r4, #1
   11c84:	mov	r4, r2
   11c88:	ldrb	r3, [r2], #1
   11c8c:	sub	r1, r3, #48	; 0x30
   11c90:	cmp	r1, #9
   11c94:	bls	11c84 <__assert_fail@plt+0x698>
   11c98:	cmp	r3, #46	; 0x2e
   11c9c:	beq	122e4 <__assert_fail@plt+0xcf8>
   11ca0:	ldrb	sl, [r4]
   11ca4:	cmp	sl, #105	; 0x69
   11ca8:	beq	12404 <__assert_fail@plt+0xe18>
   11cac:	bhi	11e78 <__assert_fail@plt+0x88c>
   11cb0:	cmp	sl, #88	; 0x58
   11cb4:	beq	123fc <__assert_fail@plt+0xe10>
   11cb8:	cmp	sl, #100	; 0x64
   11cbc:	beq	12404 <__assert_fail@plt+0xe18>
   11cc0:	cmp	sl, #0
   11cc4:	bne	11e90 <__assert_fail@plt+0x8a4>
   11cc8:	ldr	r1, [sp, #48]	; 0x30
   11ccc:	mov	r2, #5
   11cd0:	mov	r0, sl
   11cd4:	bl	11340 <dcgettext@plt>
   11cd8:	mov	r1, sl
   11cdc:	mov	r2, r0
   11ce0:	mov	r0, #1
   11ce4:	bl	113f4 <error@plt>
   11ce8:	mov	r3, #1
   11cec:	bics	r5, r5, r3
   11cf0:	moveq	fp, #1
   11cf4:	beq	11938 <__assert_fail@plt+0x34c>
   11cf8:	ldr	r1, [sp, #32]
   11cfc:	mov	r2, #5
   11d00:	mov	r0, #0
   11d04:	mov	fp, #1
   11d08:	bl	11340 <dcgettext@plt>
   11d0c:	tst	r5, #2
   11d10:	str	sl, [sp]
   11d14:	mov	r1, #0
   11d18:	moveq	r3, #39	; 0x27
   11d1c:	movne	r3, #35	; 0x23
   11d20:	mov	r2, r0
   11d24:	mov	r0, fp
   11d28:	bl	113f4 <error@plt>
   11d2c:	b	11938 <__assert_fail@plt+0x34c>
   11d30:	orr	r5, r5, #1
   11d34:	b	11970 <__assert_fail@plt+0x384>
   11d38:	ldr	lr, [sp, #16]
   11d3c:	mov	r1, r5
   11d40:	ldr	ip, [pc, #2348]	; 12674 <__assert_fail@plt+0x1088>
   11d44:	mov	r2, #10
   11d48:	add	r0, lr, #1
   11d4c:	mov	r3, r4
   11d50:	add	ip, pc, ip
   11d54:	str	ip, [sp]
   11d58:	bl	15ec8 <close_stdout@@Base+0x2398>
   11d5c:	cmp	r0, #0
   11d60:	beq	11b38 <__assert_fail@plt+0x54c>
   11d64:	ldr	r1, [pc, #2316]	; 12678 <__assert_fail@plt+0x108c>
   11d68:	mov	r0, r5
   11d6c:	mov	r2, #5
   11d70:	add	r1, pc, r1
   11d74:	bl	11340 <dcgettext@plt>
   11d78:	mov	r1, r5
   11d7c:	mov	r3, r7
   11d80:	mov	r2, r0
   11d84:	mov	r0, #1
   11d88:	bl	113f4 <error@plt>
   11d8c:	b	11b38 <__assert_fail@plt+0x54c>
   11d90:	ldr	r1, [sp, #56]	; 0x38
   11d94:	mov	r2, #5
   11d98:	mov	r0, #0
   11d9c:	bl	11340 <dcgettext@plt>
   11da0:	mov	r7, r0
   11da4:	ldr	r0, [r8, r6]
   11da8:	bl	1569c <close_stdout@@Base+0x1b6c>
   11dac:	ldr	ip, [sp, #28]
   11db0:	add	r2, sp, #228	; 0xe4
   11db4:	mov	r5, r0
   11db8:	ldrd	r0, [ip, #224]	; 0xe0
   11dbc:	bl	13de8 <close_stdout@@Base+0x2b8>
   11dc0:	mov	r1, #0
   11dc4:	mov	r2, r7
   11dc8:	mov	r3, r5
   11dcc:	str	r0, [sp]
   11dd0:	mov	r0, #1
   11dd4:	bl	113f4 <error@plt>
   11dd8:	ldrd	r0, [sp, #72]	; 0x48
   11ddc:	b	11c40 <__assert_fail@plt+0x654>
   11de0:	ldr	r1, [pc, #2196]	; 1267c <__assert_fail@plt+0x1090>
   11de4:	mov	r2, #5
   11de8:	mov	r0, #0
   11dec:	add	r1, pc, r1
   11df0:	bl	11340 <dcgettext@plt>
   11df4:	mov	r1, #0
   11df8:	ldr	r3, [r8, r6]
   11dfc:	mov	r2, r0
   11e00:	mov	r0, #1
   11e04:	bl	113f4 <error@plt>
   11e08:	ldrd	r0, [sp, #72]	; 0x48
   11e0c:	b	11c2c <__assert_fail@plt+0x640>
   11e10:	ldr	r1, [pc, #2152]	; 12680 <__assert_fail@plt+0x1094>
   11e14:	mov	r0, r5
   11e18:	mov	r2, #5
   11e1c:	add	r1, pc, r1
   11e20:	bl	11340 <dcgettext@plt>
   11e24:	mov	r1, r5
   11e28:	ldr	r3, [r8, r6]
   11e2c:	mov	r2, r0
   11e30:	mov	r0, #1
   11e34:	bl	113f4 <error@plt>
   11e38:	b	11c20 <__assert_fail@plt+0x634>
   11e3c:	cmp	fp, #0
   11e40:	beq	1242c <__assert_fail@plt+0xe40>
   11e44:	ldr	ip, [sp, #28]
   11e48:	mvn	r2, #0
   11e4c:	mov	r0, #0
   11e50:	mov	r3, r2
   11e54:	str	r2, [sp, #4]
   11e58:	mov	r1, r0
   11e5c:	mov	r2, #1
   11e60:	str	ip, [sp]
   11e64:	bl	115e0 <__snprintf_chk@plt>
   11e68:	cmp	r0, #0
   11e6c:	movge	r2, r0
   11e70:	bge	119ac <__assert_fail@plt+0x3c0>
   11e74:	bl	13034 <__assert_fail@plt+0x1a48>
   11e78:	cmp	sl, #117	; 0x75
   11e7c:	beq	11ed4 <__assert_fail@plt+0x8e8>
   11e80:	cmp	sl, #120	; 0x78
   11e84:	beq	123fc <__assert_fail@plt+0xe10>
   11e88:	cmp	sl, #111	; 0x6f
   11e8c:	beq	123fc <__assert_fail@plt+0xe10>
   11e90:	bl	11460 <__ctype_b_loc@plt>
   11e94:	lsl	r3, sl, #1
   11e98:	ldr	r2, [r0]
   11e9c:	ldrh	fp, [r2, r3]
   11ea0:	and	fp, fp, #16384	; 0x4000
   11ea4:	uxth	fp, fp
   11ea8:	cmp	fp, #0
   11eac:	beq	124c0 <__assert_fail@plt+0xed4>
   11eb0:	ldr	r1, [sp, #56]	; 0x38
   11eb4:	mov	r2, #5
   11eb8:	mov	r0, #0
   11ebc:	bl	11340 <dcgettext@plt>
   11ec0:	mov	r1, #0
   11ec4:	mov	r3, sl
   11ec8:	mov	r2, r0
   11ecc:	mov	r0, #1
   11ed0:	bl	113f4 <error@plt>
   11ed4:	mov	r3, #1
   11ed8:	b	11cec <__assert_fail@plt+0x700>
   11edc:	ldr	r0, [pc, #1952]	; 12684 <__assert_fail@plt+0x1098>
   11ee0:	add	r6, sp, #88	; 0x58
   11ee4:	ldr	r8, [pc, #1948]	; 12688 <__assert_fail@plt+0x109c>
   11ee8:	mov	r4, #0
   11eec:	add	r0, pc, r0
   11ef0:	ldr	r7, [pc, #1940]	; 1268c <__assert_fail@plt+0x10a0>
   11ef4:	add	r0, r0, #28
   11ef8:	add	r8, pc, r8
   11efc:	bl	1155c <sigemptyset@plt>
   11f00:	add	r7, pc, r7
   11f04:	add	r8, r8, #28
   11f08:	add	r3, r7, #12
   11f0c:	mov	r1, #0
   11f10:	mov	r2, r6
   11f14:	ldr	r5, [r4, r3]
   11f18:	mov	r0, r5
   11f1c:	bl	113a0 <sigaction@plt>
   11f20:	ldr	r3, [sp, #88]	; 0x58
   11f24:	cmp	r3, #1
   11f28:	beq	11f38 <__assert_fail@plt+0x94c>
   11f2c:	mov	r1, r5
   11f30:	mov	r0, r8
   11f34:	bl	11424 <sigaddset@plt>
   11f38:	add	r4, r4, #4
   11f3c:	cmp	r4, #44	; 0x2c
   11f40:	bne	11f08 <__assert_fail@plt+0x91c>
   11f44:	ldr	r7, [pc, #1860]	; 12690 <__assert_fail@plt+0x10a4>
   11f48:	add	r0, sp, #92	; 0x5c
   11f4c:	ldr	r3, [pc, #1856]	; 12694 <__assert_fail@plt+0x10a8>
   11f50:	mov	r2, #128	; 0x80
   11f54:	add	r7, pc, r7
   11f58:	ldr	r8, [pc, #1848]	; 12698 <__assert_fail@plt+0x10ac>
   11f5c:	add	r7, r7, #28
   11f60:	add	r3, pc, r3
   11f64:	str	r3, [sp, #88]	; 0x58
   11f68:	add	r8, pc, r8
   11f6c:	mov	r1, r7
   11f70:	bl	112f8 <memcpy@plt>
   11f74:	mov	r3, #0
   11f78:	mov	r4, r3
   11f7c:	str	r3, [sp, #220]	; 0xdc
   11f80:	b	11f90 <__assert_fail@plt+0x9a4>
   11f84:	add	r4, r4, #4
   11f88:	cmp	r4, #44	; 0x2c
   11f8c:	beq	11fc0 <__assert_fail@plt+0x9d4>
   11f90:	add	r3, r8, #12
   11f94:	mov	r0, r7
   11f98:	ldr	r5, [r4, r3]
   11f9c:	mov	r1, r5
   11fa0:	bl	1137c <sigismember@plt>
   11fa4:	cmp	r0, #0
   11fa8:	beq	11f84 <__assert_fail@plt+0x998>
   11fac:	mov	r0, r5
   11fb0:	mov	r1, r6
   11fb4:	mov	r2, #0
   11fb8:	bl	113a0 <sigaction@plt>
   11fbc:	b	11f84 <__assert_fail@plt+0x998>
   11fc0:	ldr	fp, [pc, #1748]	; 1269c <__assert_fail@plt+0x10b0>
   11fc4:	mov	r8, #0
   11fc8:	ldr	r9, [pc, #1744]	; 126a0 <__assert_fail@plt+0x10b4>
   11fcc:	add	fp, pc, fp
   11fd0:	str	r8, [sp, #52]	; 0x34
   11fd4:	add	r9, pc, r9
   11fd8:	str	r9, [sp, #56]	; 0x38
   11fdc:	ldr	r9, [pc, #1728]	; 126a4 <__assert_fail@plt+0x10b8>
   11fe0:	ldr	ip, [sp, #52]	; 0x34
   11fe4:	add	r9, pc, r9
   11fe8:	ldr	r3, [r9, #168]	; 0xa8
   11fec:	cmp	ip, r3
   11ff0:	bcs	1255c <__assert_fail@plt+0xf70>
   11ff4:	ldr	ip, [sp, #52]	; 0x34
   11ff8:	ldr	r3, [r9, #176]	; 0xb0
   11ffc:	lsl	ip, ip, #6
   12000:	str	ip, [sp, #28]
   12004:	add	r3, r3, ip
   12008:	ldrb	r3, [r3, #30]
   1200c:	cmp	r3, #0
   12010:	beq	12188 <__assert_fail@plt+0xb9c>
   12014:	ldr	r7, [sp, #56]	; 0x38
   12018:	mov	r0, #0
   1201c:	mov	r1, #0
   12020:	str	r9, [sp, #48]	; 0x30
   12024:	strd	r0, [sp, #32]
   12028:	ldr	r9, [sp, #48]	; 0x30
   1202c:	ldr	ip, [sp, #28]
   12030:	ldr	r9, [r9, #176]	; 0xb0
   12034:	add	r6, r9, ip
   12038:	str	r9, [sp, #16]
   1203c:	ldrb	r3, [r6, #28]
   12040:	cmp	r3, #0
   12044:	bne	1205c <__assert_fail@plt+0xa70>
   12048:	ldrd	r2, [r6, #16]
   1204c:	ldrd	r8, [sp, #32]
   12050:	cmp	r9, r3
   12054:	cmpeq	r8, r2
   12058:	bhi	122d4 <__assert_fail@plt+0xce8>
   1205c:	ldrb	sl, [r6, #29]
   12060:	cmp	sl, #0
   12064:	beq	12454 <__assert_fail@plt+0xe68>
   12068:	ldr	r3, [pc, #1592]	; 126a8 <__assert_fail@plt+0x10bc>
   1206c:	add	r3, pc, r3
   12070:	ldrb	r2, [r3, #220]	; 0xdc
   12074:	cmp	r2, #0
   12078:	beq	12088 <__assert_fail@plt+0xa9c>
   1207c:	ldrd	r2, [r3, #208]	; 0xd0
   12080:	orrs	r1, r2, r3
   12084:	bne	124fc <__assert_fail@plt+0xf10>
   12088:	ldr	r9, [sp, #16]
   1208c:	add	r5, r6, #32
   12090:	ldr	r8, [sp, #28]
   12094:	mov	r4, #0
   12098:	ldrd	r2, [r9, r8]
   1209c:	cmp	r2, #0
   120a0:	sbcs	ip, r3, #0
   120a4:	bge	120f4 <__assert_fail@plt+0xb08>
   120a8:	b	12168 <__assert_fail@plt+0xb7c>
   120ac:	ldr	ip, [r3]
   120b0:	mov	r0, r5
   120b4:	ldr	r1, [r3, #4]
   120b8:	mov	r3, #0
   120bc:	sub	r2, ip, #1
   120c0:	ldrb	lr, [r1, r2]
   120c4:	str	r4, [sp, #4]
   120c8:	cmp	lr, #10
   120cc:	movne	r2, ip
   120d0:	str	r2, [sp]
   120d4:	bl	1149c <re_search@plt>
   120d8:	cmn	r0, #2
   120dc:	beq	1276c <__assert_fail@plt+0x1180>
   120e0:	cmn	r0, #1
   120e4:	bne	12304 <__assert_fail@plt+0xd18>
   120e8:	bl	13464 <__assert_fail@plt+0x1e78>
   120ec:	cmp	sl, #0
   120f0:	beq	12414 <__assert_fail@plt+0xe28>
   120f4:	ldrd	r0, [fp, #208]	; 0xd0
   120f8:	adds	r0, r0, #1
   120fc:	adc	r1, r1, #0
   12100:	strd	r0, [fp, #208]	; 0xd0
   12104:	bl	136a0 <__assert_fail@plt+0x20b4>
   12108:	subs	r3, r0, #0
   1210c:	bne	120ac <__assert_fail@plt+0xac0>
   12110:	ldrb	r3, [r6, #28]
   12114:	cmp	r3, #0
   12118:	beq	124ec <__assert_fail@plt+0xf00>
   1211c:	cmp	sl, #0
   12120:	beq	125a8 <__assert_fail@plt+0xfbc>
   12124:	mov	r0, #0
   12128:	bl	1146c <exit@plt>
   1212c:	ldr	ip, [r3]
   12130:	mov	r0, r5
   12134:	ldr	r1, [r3, #4]
   12138:	mov	r3, #0
   1213c:	sub	r2, ip, #1
   12140:	ldrb	lr, [r1, r2]
   12144:	str	r4, [sp, #4]
   12148:	cmp	lr, #10
   1214c:	movne	r2, ip
   12150:	str	r2, [sp]
   12154:	bl	1149c <re_search@plt>
   12158:	cmn	r0, #2
   1215c:	beq	12794 <__assert_fail@plt+0x11a8>
   12160:	cmn	r0, #1
   12164:	bne	12304 <__assert_fail@plt+0xd18>
   12168:	ldrd	r0, [r7, #208]	; 0xd0
   1216c:	adds	r0, r0, #1
   12170:	adc	r1, r1, #0
   12174:	strd	r0, [r7, #208]	; 0xd0
   12178:	bl	136a0 <__assert_fail@plt+0x20b4>
   1217c:	subs	r3, r0, #0
   12180:	bne	1212c <__assert_fail@plt+0xb40>
   12184:	b	12110 <__assert_fail@plt+0xb24>
   12188:	mov	r3, #0
   1218c:	mov	r2, #0
   12190:	ldr	r8, [pc, #1300]	; 126ac <__assert_fail@plt+0x10c0>
   12194:	strd	r2, [sp, #16]
   12198:	ldr	ip, [pc, #1296]	; 126b0 <__assert_fail@plt+0x10c4>
   1219c:	add	r8, pc, r8
   121a0:	ldr	r3, [pc, #1292]	; 126b4 <__assert_fail@plt+0x10c8>
   121a4:	str	fp, [sp, #60]	; 0x3c
   121a8:	mov	fp, r9
   121ac:	add	r3, pc, r3
   121b0:	add	ip, pc, ip
   121b4:	str	r3, [sp, #40]	; 0x28
   121b8:	str	r8, [sp, #32]
   121bc:	str	ip, [sp, #48]	; 0x30
   121c0:	ldr	sl, [fp, #176]	; 0xb0
   121c4:	ldr	r8, [sp, #28]
   121c8:	add	sl, sl, r8
   121cc:	ldrb	r3, [sl, #28]
   121d0:	cmp	r3, #0
   121d4:	bne	121ec <__assert_fail@plt+0xc00>
   121d8:	ldrd	r2, [sl, #16]
   121dc:	ldrd	r8, [sp, #16]
   121e0:	cmp	r9, r3
   121e4:	cmpeq	r8, r2
   121e8:	bhi	122d0 <__assert_fail@plt+0xce4>
   121ec:	ldrd	r8, [sp, #16]
   121f0:	ldr	r3, [sl, #12]
   121f4:	adds	r8, r8, #1
   121f8:	ldr	r6, [sl, #8]
   121fc:	adc	r9, r9, #0
   12200:	mul	r3, r8, r3
   12204:	mla	r3, r6, r9, r3
   12208:	umull	r6, r7, r6, r8
   1220c:	add	r7, r3, r7
   12210:	bl	12d0c <__assert_fail@plt+0x1720>
   12214:	bl	137b4 <__assert_fail@plt+0x21c8>
   12218:	cmp	r0, #0
   1221c:	beq	12230 <__assert_fail@plt+0xc44>
   12220:	ldr	ip, [sp, #40]	; 0x28
   12224:	ldrb	r3, [ip, #220]	; 0xdc
   12228:	cmp	r3, #0
   1222c:	bne	125b4 <__assert_fail@plt+0xfc8>
   12230:	bl	137e0 <__assert_fail@plt+0x21f4>
   12234:	cmp	r7, r1
   12238:	cmpeq	r6, r0
   1223c:	movhi	r4, r0
   12240:	movhi	r5, r1
   12244:	bls	1226c <__assert_fail@plt+0xc80>
   12248:	bl	13464 <__assert_fail@plt+0x1e78>
   1224c:	cmp	r0, #0
   12250:	beq	125b4 <__assert_fail@plt+0xfc8>
   12254:	adds	r4, r4, #1
   12258:	adc	r5, r5, #0
   1225c:	bl	129dc <__assert_fail@plt+0x13f0>
   12260:	cmp	r7, r5
   12264:	cmpeq	r6, r4
   12268:	bhi	12248 <__assert_fail@plt+0xc5c>
   1226c:	bl	12b34 <__assert_fail@plt+0x1548>
   12270:	ldr	r2, [sp, #32]
   12274:	ldrb	r3, [r2, #220]	; 0xdc
   12278:	cmp	r3, #0
   1227c:	bne	122a4 <__assert_fail@plt+0xcb8>
   12280:	bl	137b4 <__assert_fail@plt+0x21c8>
   12284:	cmp	r0, #0
   12288:	beq	1229c <__assert_fail@plt+0xcb0>
   1228c:	ldr	ip, [sp, #48]	; 0x30
   12290:	ldrb	r3, [ip, #220]	; 0xdc
   12294:	cmp	r3, #0
   12298:	beq	125b4 <__assert_fail@plt+0xfc8>
   1229c:	strd	r8, [sp, #16]
   122a0:	b	121c0 <__assert_fail@plt+0xbd4>
   122a4:	bl	13464 <__assert_fail@plt+0x1e78>
   122a8:	b	12280 <__assert_fail@plt+0xc94>
   122ac:	ldr	r1, [sp, #40]	; 0x28
   122b0:	mov	r2, #5
   122b4:	mov	r0, #0
   122b8:	bl	11340 <dcgettext@plt>
   122bc:	mov	r1, #0
   122c0:	mov	r2, r0
   122c4:	mov	r0, #1
   122c8:	bl	113f4 <error@plt>
   122cc:	b	11968 <__assert_fail@plt+0x37c>
   122d0:	ldr	fp, [sp, #60]	; 0x3c
   122d4:	ldr	r9, [sp, #52]	; 0x34
   122d8:	add	r9, r9, #1
   122dc:	str	r9, [sp, #52]	; 0x34
   122e0:	b	11fdc <__assert_fail@plt+0x9f0>
   122e4:	add	r3, r4, #1
   122e8:	mov	r4, r3
   122ec:	add	r3, r3, #1
   122f0:	ldrb	r2, [r4]
   122f4:	sub	r2, r2, #48	; 0x30
   122f8:	cmp	r2, #9
   122fc:	bls	122e8 <__assert_fail@plt+0xcfc>
   12300:	b	11ca0 <__assert_fail@plt+0x6b4>
   12304:	ldr	r5, [pc, #940]	; 126b8 <__assert_fail@plt+0x10cc>
   12308:	ldr	r9, [sp, #16]
   1230c:	ldr	r8, [sp, #28]
   12310:	add	r5, pc, r5
   12314:	ldr	r6, [r6, #24]
   12318:	ldrd	r2, [r5, #208]	; 0xd0
   1231c:	ldrd	r0, [r9, r8]
   12320:	adds	r8, r0, r2
   12324:	adc	r9, r1, r3
   12328:	strd	r8, [sp, #40]	; 0x28
   1232c:	bl	137e0 <__assert_fail@plt+0x21f4>
   12330:	cmp	r9, r1
   12334:	cmpeq	r8, r0
   12338:	bcc	127d4 <__assert_fail@plt+0x11e8>
   1233c:	ldrd	r4, [sp, #40]	; 0x28
   12340:	mov	r8, #0
   12344:	mov	r9, #0
   12348:	subs	r4, r4, r0
   1234c:	sbc	r5, r5, r1
   12350:	b	1235c <__assert_fail@plt+0xd70>
   12354:	adds	r8, r8, #1
   12358:	adc	r9, r9, #0
   1235c:	cmp	r9, r5
   12360:	cmpeq	r8, r4
   12364:	beq	12384 <__assert_fail@plt+0xd98>
   12368:	bl	13464 <__assert_fail@plt+0x1e78>
   1236c:	subs	r1, r0, #0
   12370:	beq	12734 <__assert_fail@plt+0x1148>
   12374:	cmp	sl, #0
   12378:	bne	12354 <__assert_fail@plt+0xd68>
   1237c:	bl	129dc <__assert_fail@plt+0x13f0>
   12380:	b	12354 <__assert_fail@plt+0xd68>
   12384:	cmp	sl, #0
   12388:	beq	12554 <__assert_fail@plt+0xf68>
   1238c:	ldr	ip, [sp, #16]
   12390:	ldr	r9, [sp, #28]
   12394:	ldrd	r2, [ip, r9]
   12398:	cmp	r2, #1
   1239c:	sbcs	lr, r3, #0
   123a0:	ldrge	r3, [pc, #788]	; 126bc <__assert_fail@plt+0x10d0>
   123a4:	ldrdge	r8, [sp, #40]	; 0x28
   123a8:	addge	r3, pc, r3
   123ac:	strdge	r8, [r3, #208]	; 0xd0
   123b0:	ldrd	r8, [sp, #32]
   123b4:	adds	r8, r8, #1
   123b8:	adc	r9, r9, #0
   123bc:	strd	r8, [sp, #32]
   123c0:	b	12028 <__assert_fail@plt+0xa3c>
   123c4:	ldr	r1, [sp, #60]	; 0x3c
   123c8:	mov	r2, #5
   123cc:	mov	r0, #0
   123d0:	bl	11340 <dcgettext@plt>
   123d4:	mov	r5, r0
   123d8:	ldr	r0, [r8, r6]
   123dc:	bl	1569c <close_stdout@@Base+0x1b6c>
   123e0:	mov	r2, r5
   123e4:	mov	r3, r0
   123e8:	mov	r0, #0
   123ec:	mov	r1, r0
   123f0:	bl	113f4 <error@plt>
   123f4:	ldrd	r0, [sp, #72]	; 0x48
   123f8:	b	11c54 <__assert_fail@plt+0x668>
   123fc:	mov	r3, #2
   12400:	b	11cec <__assert_fail@plt+0x700>
   12404:	mov	r3, #117	; 0x75
   12408:	strb	r3, [r4]
   1240c:	mov	r3, #1
   12410:	b	11cec <__assert_fail@plt+0x700>
   12414:	bl	129dc <__assert_fail@plt+0x13f0>
   12418:	b	120f4 <__assert_fail@plt+0xb08>
   1241c:	ldrb	r3, [r4, #1]
   12420:	cmp	r3, #0
   12424:	beq	11a14 <__assert_fail@plt+0x428>
   12428:	b	119f8 <__assert_fail@plt+0x40c>
   1242c:	ldr	r1, [pc, #652]	; 126c0 <__assert_fail@plt+0x10d4>
   12430:	mov	r0, fp
   12434:	mov	r2, #5
   12438:	add	r1, pc, r1
   1243c:	bl	11340 <dcgettext@plt>
   12440:	mov	r1, fp
   12444:	mov	r2, r0
   12448:	mov	r0, #1
   1244c:	bl	113f4 <error@plt>
   12450:	b	11e44 <__assert_fail@plt+0x858>
   12454:	bl	12d0c <__assert_fail@plt+0x1720>
   12458:	b	12068 <__assert_fail@plt+0xa7c>
   1245c:	ldr	r1, [pc, #608]	; 126c4 <__assert_fail@plt+0x10d8>
   12460:	mov	r2, #5
   12464:	add	r1, pc, r1
   12468:	bl	11340 <dcgettext@plt>
   1246c:	sub	r3, r7, #-1073741823	; 0xc0000001
   12470:	mov	r4, r0
   12474:	ldr	r0, [r9, r3, lsl #2]
   12478:	bl	1569c <close_stdout@@Base+0x1b6c>
   1247c:	mov	r1, fp
   12480:	mov	r2, r4
   12484:	mov	r3, r0
   12488:	mov	r0, fp
   1248c:	bl	113f4 <error@plt>
   12490:	b	1181c <__assert_fail@plt+0x230>
   12494:	ldr	r1, [pc, #556]	; 126c8 <__assert_fail@plt+0x10dc>
   12498:	mov	r2, #5
   1249c:	add	r1, pc, r1
   124a0:	bl	11340 <dcgettext@plt>
   124a4:	str	r4, [sp]
   124a8:	ldr	r1, [sp, #16]
   124ac:	mov	r3, r7
   124b0:	mov	r2, r0
   124b4:	mov	r0, #1
   124b8:	bl	113f4 <error@plt>
   124bc:	b	11ac0 <__assert_fail@plt+0x4d4>
   124c0:	ldr	r1, [sp, #52]	; 0x34
   124c4:	mov	r2, #5
   124c8:	mov	r0, fp
   124cc:	bl	11340 <dcgettext@plt>
   124d0:	mov	r3, sl
   124d4:	mov	r1, fp
   124d8:	mov	r2, r0
   124dc:	mov	r0, #1
   124e0:	bl	113f4 <error@plt>
   124e4:	mov	r3, #1
   124e8:	b	11cec <__assert_fail@plt+0x700>
   124ec:	str	sl, [sp]
   124f0:	add	r0, r6, #24
   124f4:	ldrd	r2, [sp, #32]
   124f8:	bl	13584 <__assert_fail@plt+0x1f98>
   124fc:	bl	13464 <__assert_fail@plt+0x1e78>
   12500:	b	12088 <__assert_fail@plt+0xa9c>
   12504:	ldrb	r3, [r5, #1]
   12508:	cmp	r3, #42	; 0x2a
   1250c:	moveq	r3, #1
   12510:	strbeq	r3, [r4, #28]
   12514:	bne	11bb4 <__assert_fail@plt+0x5c8>
   12518:	b	11be0 <__assert_fail@plt+0x5f4>
   1251c:	ldr	r1, [pc, #424]	; 126cc <__assert_fail@plt+0x10e0>
   12520:	mov	r2, #5
   12524:	mov	r0, #0
   12528:	add	r1, pc, r1
   1252c:	bl	11340 <dcgettext@plt>
   12530:	ldr	r3, [pc, #408]	; 126d0 <__assert_fail@plt+0x10e4>
   12534:	mov	r1, #0
   12538:	add	r3, pc, r3
   1253c:	ldr	r3, [r3, #216]	; 0xd8
   12540:	ldr	r3, [r3, r6]
   12544:	mov	r2, r0
   12548:	mov	r0, #1
   1254c:	bl	113f4 <error@plt>
   12550:	b	11bd8 <__assert_fail@plt+0x5ec>
   12554:	bl	12b34 <__assert_fail@plt+0x1548>
   12558:	b	1238c <__assert_fail@plt+0xda0>
   1255c:	bl	12d0c <__assert_fail@plt+0x1720>
   12560:	bl	13568 <__assert_fail@plt+0x1f7c>
   12564:	bl	12b34 <__assert_fail@plt+0x1548>
   12568:	mov	r0, #0
   1256c:	bl	115d4 <close@plt>
   12570:	cmp	r0, #0
   12574:	beq	12124 <__assert_fail@plt+0xb38>
   12578:	bl	114c0 <__errno_location@plt>
   1257c:	ldr	r1, [pc, #336]	; 126d4 <__assert_fail@plt+0x10e8>
   12580:	mov	r2, #5
   12584:	add	r1, pc, r1
   12588:	ldr	r4, [r0]
   1258c:	mov	r0, #0
   12590:	bl	11340 <dcgettext@plt>
   12594:	mov	r1, r4
   12598:	mov	r2, r0
   1259c:	mov	r0, #0
   125a0:	bl	113f4 <error@plt>
   125a4:	bl	12abc <__assert_fail@plt+0x14d0>
   125a8:	bl	13568 <__assert_fail@plt+0x1f7c>
   125ac:	bl	12b34 <__assert_fail@plt+0x1548>
   125b0:	b	12124 <__assert_fail@plt+0xb38>
   125b4:	add	r0, sl, #8
   125b8:	ldrd	r2, [sp, #16]
   125bc:	bl	12e4c <__assert_fail@plt+0x1860>
   125c0:	andeq	r8, r1, r8, ror #19
   125c4:	andeq	r0, r0, r8, lsr r1
   125c8:	andeq	r8, r1, r8, lsr #23
   125cc:	andeq	r8, r1, r0, lsr #23
   125d0:	ldrdeq	r7, [r0], -r0
   125d4:	andeq	r7, r0, r8, lsl #21
   125d8:	andeq	r8, r1, r8, asr fp
   125dc:	andeq	r8, r1, r0, asr #22
   125e0:	andeq	r7, r0, r4, ror sl
   125e4:	andeq	r7, r0, r0, asr sl
   125e8:	andeq	r0, r0, ip, asr #2
   125ec:	ldrdeq	r8, [r1], -ip
   125f0:	andeq	r8, r1, r0, lsr #22
   125f4:	andeq	r7, r0, r4, asr #20
   125f8:	andeq	r7, r0, r8, asr #20
   125fc:	andeq	r8, r1, r0, asr #14
   12600:	andeq	r0, r0, r0, ror r1
   12604:	muleq	r1, r8, sl
   12608:	andeq	r8, r1, r0, lsl #20
   1260c:	andeq	r7, r0, r8, lsr r9
   12610:	andeq	r0, r0, r8, asr r1
   12614:	andeq	r0, r0, r0, asr #2
   12618:	ldrdeq	r7, [r0], -r4
   1261c:	ldrdeq	r7, [r0], -r4
   12620:	andeq	r7, r0, ip, lsr #17
   12624:			; <UNDEFINED> instruction: 0x000077b4
   12628:	andeq	r7, r0, r8, ror #16
   1262c:	andeq	r0, r0, ip, lsr r1
   12630:	strdeq	r8, [r1], -r4
   12634:	andeq	r7, r0, r4, lsr #18
   12638:	andeq	r7, r0, r4, ror #17
   1263c:	andeq	r7, r0, ip, lsr #17
   12640:	andeq	r7, r0, r8, ror r8
   12644:	andeq	r7, r0, ip, lsr r8
   12648:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1264c:	strdeq	r8, [r1], -r0
   12650:			; <UNDEFINED> instruction: 0x000076b8
   12654:	muleq	r1, r4, r7
   12658:	andeq	r8, r1, r8, lsl #15
   1265c:	andeq	r8, r1, ip, ror r7
   12660:	andeq	r7, r0, r0, lsr r9
   12664:	andeq	r7, r0, r4, ror #17
   12668:	andeq	r0, r0, r8, asr #2
   1266c:	andeq	r7, r0, r8, asr #16
   12670:	andeq	r7, r0, r8, lsl r5
   12674:	andeq	r7, r0, ip, lsl #7
   12678:	andeq	r7, r0, r4, ror r5
   1267c:	andeq	r7, r0, r4, lsr r5
   12680:	strdeq	r7, [r0], -r0
   12684:	ldrdeq	r8, [r1], -ip
   12688:	ldrdeq	r8, [r1], -r0
   1268c:	ldrdeq	r6, [r0], -r4
   12690:	andeq	r8, r1, r4, ror r2
   12694:	andeq	r0, r0, r4, lsr #29
   12698:	andeq	r6, r0, ip, ror #20
   1269c:	strdeq	r8, [r1], -ip
   126a0:	strdeq	r8, [r1], -r4
   126a4:	andeq	r8, r1, r4, ror #3
   126a8:	andeq	r8, r1, ip, asr r1
   126ac:	andeq	r8, r1, ip, lsr #32
   126b0:	andeq	r8, r1, r8, lsl r0
   126b4:	andeq	r8, r1, ip, lsl r0
   126b8:			; <UNDEFINED> instruction: 0x00017eb8
   126bc:	andeq	r7, r1, r0, lsr #28
   126c0:	andeq	r6, r0, r8, lsl lr
   126c4:	andeq	r6, r0, r8, ror #25
   126c8:	andeq	r6, r0, r0, lsl #28
   126cc:	andeq	r6, r0, r4, asr #29
   126d0:	muleq	r1, r0, ip
   126d4:	strdeq	r6, [r0], -r4
   126d8:	andeq	r6, r0, r0, lsl #23
   126dc:	strdeq	r6, [r0], -r0
   126e0:	andeq	r7, r1, r8, ror sl
   126e4:	andeq	r6, r0, r4, lsr #25
   126e8:	andeq	r6, r0, ip, ror ip
   126ec:	andeq	r6, r0, r0, lsl fp
   126f0:	andeq	r6, r0, r0, asr r2
   126f4:	bl	114c0 <__errno_location@plt>
   126f8:	ldr	r1, [pc, #-40]	; 126d8 <__assert_fail@plt+0x10ec>
   126fc:	mov	r2, #5
   12700:	add	r1, pc, r1
   12704:	ldr	r5, [r0]
   12708:	mov	r0, #0
   1270c:	bl	11340 <dcgettext@plt>
   12710:	mov	r8, r0
   12714:	mov	r0, r4
   12718:	bl	1569c <close_stdout@@Base+0x1b6c>
   1271c:	mov	r1, r5
   12720:	mov	r2, r8
   12724:	mov	r3, r0
   12728:	mov	r0, #1
   1272c:	bl	113f4 <error@plt>
   12730:	b	11a14 <__assert_fail@plt+0x428>
   12734:	mov	r9, r1
   12738:	ldr	r1, [pc, #-100]	; 126dc <__assert_fail@plt+0x10f0>
   1273c:	mov	r2, #5
   12740:	add	r1, pc, r1
   12744:	bl	11340 <dcgettext@plt>
   12748:	ldr	r3, [pc, #-112]	; 126e0 <__assert_fail@plt+0x10f4>
   1274c:	mov	r1, r9
   12750:	add	r3, pc, r3
   12754:	ldr	r3, [r3, #216]	; 0xd8
   12758:	ldr	r3, [r3, r6, lsl #2]
   1275c:	mov	r2, r0
   12760:	mov	r0, r9
   12764:	bl	113f4 <error@plt>
   12768:	bl	12abc <__assert_fail@plt+0x14d0>
   1276c:	ldr	r1, [pc, #-144]	; 126e4 <__assert_fail@plt+0x10f8>
   12770:	mov	r0, #0
   12774:	add	r1, pc, r1
   12778:	mov	r2, #5
   1277c:	bl	11340 <dcgettext@plt>
   12780:	mov	r2, r0
   12784:	mov	r0, #0
   12788:	mov	r1, r0
   1278c:	bl	113f4 <error@plt>
   12790:	bl	12abc <__assert_fail@plt+0x14d0>
   12794:	ldr	r1, [pc, #-180]	; 126e8 <__assert_fail@plt+0x10fc>
   12798:	mov	r0, #0
   1279c:	add	r1, pc, r1
   127a0:	b	12778 <__assert_fail@plt+0x118c>
   127a4:	ldr	r1, [pc, #-192]	; 126ec <__assert_fail@plt+0x1100>
   127a8:	mov	r2, #5
   127ac:	mov	r0, sl
   127b0:	add	r1, pc, r1
   127b4:	bl	11340 <dcgettext@plt>
   127b8:	mov	r3, r7
   127bc:	mov	r1, sl
   127c0:	str	r5, [sp]
   127c4:	mov	r2, r0
   127c8:	mov	r0, sl
   127cc:	bl	113f4 <error@plt>
   127d0:	bl	12abc <__assert_fail@plt+0x14d0>
   127d4:	ldr	r1, [pc, #-236]	; 126f0 <__assert_fail@plt+0x1104>
   127d8:	mov	r2, #5
   127dc:	mov	r0, #0
   127e0:	add	r1, pc, r1
   127e4:	bl	11340 <dcgettext@plt>
   127e8:	ldr	r3, [r5, #216]	; 0xd8
   127ec:	ldr	r3, [r3, r6, lsl #2]
   127f0:	mov	r2, r0
   127f4:	mov	r0, #0
   127f8:	mov	r1, r0
   127fc:	bl	113f4 <error@plt>
   12800:	bl	12abc <__assert_fail@plt+0x14d0>
   12804:	mov	fp, #0
   12808:	mov	lr, #0
   1280c:	pop	{r1}		; (ldr r1, [sp], #4)
   12810:	mov	r2, sp
   12814:	push	{r2}		; (str r2, [sp, #-4]!)
   12818:	push	{r0}		; (str r0, [sp, #-4]!)
   1281c:	ldr	ip, [pc, #16]	; 12834 <__assert_fail@plt+0x1248>
   12820:	push	{ip}		; (str ip, [sp, #-4]!)
   12824:	ldr	r0, [pc, #12]	; 12838 <__assert_fail@plt+0x124c>
   12828:	ldr	r3, [pc, #12]	; 1283c <__assert_fail@plt+0x1250>
   1282c:	bl	11430 <__libc_start_main@plt>
   12830:	bl	115c8 <abort@plt>
   12834:	muleq	r1, ip, r9
   12838:	strdeq	r1, [r1], -r8
   1283c:	andeq	r8, r1, r8, lsr r9
   12840:	ldr	r3, [pc, #20]	; 1285c <__assert_fail@plt+0x1270>
   12844:	ldr	r2, [pc, #20]	; 12860 <__assert_fail@plt+0x1274>
   12848:	add	r3, pc, r3
   1284c:	ldr	r2, [r3, r2]
   12850:	cmp	r2, #0
   12854:	bxeq	lr
   12858:	b	11448 <__gmon_start__@plt>
   1285c:			; <UNDEFINED> instruction: 0x000177b0
   12860:	andeq	r0, r0, r0, asr r1
   12864:	push	{r3, lr}
   12868:	movw	r0, #41412	; 0xa1c4
   1286c:	ldr	r3, [pc, #36]	; 12898 <__assert_fail@plt+0x12ac>
   12870:	movt	r0, #2
   12874:	rsb	r3, r0, r3
   12878:	cmp	r3, #6
   1287c:	popls	{r3, pc}
   12880:	movw	r3, #0
   12884:	movt	r3, #0
   12888:	cmp	r3, #0
   1288c:	popeq	{r3, pc}
   12890:	blx	r3
   12894:	pop	{r3, pc}
   12898:	andeq	sl, r2, r7, asr #3
   1289c:	push	{r3, lr}
   128a0:	movw	r0, #41412	; 0xa1c4
   128a4:	movw	r3, #41412	; 0xa1c4
   128a8:	movt	r0, #2
   128ac:	movt	r3, #2
   128b0:	rsb	r3, r0, r3
   128b4:	asr	r3, r3, #2
   128b8:	add	r3, r3, r3, lsr #31
   128bc:	asrs	r1, r3, #1
   128c0:	popeq	{r3, pc}
   128c4:	movw	r2, #0
   128c8:	movt	r2, #0
   128cc:	cmp	r2, #0
   128d0:	popeq	{r3, pc}
   128d4:	blx	r2
   128d8:	pop	{r3, pc}
   128dc:	push	{r4, lr}
   128e0:	movw	r4, #41416	; 0xa1c8
   128e4:	movt	r4, #2
   128e8:	ldrb	r3, [r4]
   128ec:	cmp	r3, #0
   128f0:	popne	{r4, pc}
   128f4:	bl	12864 <__assert_fail@plt+0x1278>
   128f8:	mov	r3, #1
   128fc:	strb	r3, [r4]
   12900:	pop	{r4, pc}
   12904:	movw	r0, #40496	; 0x9e30
   12908:	movt	r0, #2
   1290c:	push	{r3, lr}
   12910:	ldr	r3, [r0]
   12914:	cmp	r3, #0
   12918:	beq	12930 <__assert_fail@plt+0x1344>
   1291c:	movw	r3, #0
   12920:	movt	r3, #0
   12924:	cmp	r3, #0
   12928:	beq	12930 <__assert_fail@plt+0x1344>
   1292c:	blx	r3
   12930:	pop	{r3, lr}
   12934:	b	1289c <__assert_fail@plt+0x12b0>
   12938:	push	{r4, r5, r6, lr}
   1293c:	mov	r5, r0
   12940:	ldr	r4, [pc, #132]	; 129cc <__assert_fail@plt+0x13e0>
   12944:	sub	sp, sp, #8
   12948:	add	r4, pc, r4
   1294c:	ldr	r0, [r4]
   12950:	ldr	r1, [r4, #4]
   12954:	bl	113d0 <strcpy@plt>
   12958:	ldr	r3, [r4, #8]
   1295c:	ldr	r6, [r4]
   12960:	cmp	r3, #0
   12964:	ldr	r0, [r4, #4]
   12968:	beq	12998 <__assert_fail@plt+0x13ac>
   1296c:	bl	11484 <strlen@plt>
   12970:	ldr	r3, [r4, #8]
   12974:	mov	r1, #1
   12978:	str	r5, [sp]
   1297c:	mvn	r2, #0
   12980:	add	r0, r6, r0
   12984:	bl	114cc <__sprintf_chk@plt>
   12988:	ldr	r3, [pc, #64]	; 129d0 <__assert_fail@plt+0x13e4>
   1298c:	ldr	r0, [pc, r3]
   12990:	add	sp, sp, #8
   12994:	pop	{r4, r5, r6, pc}
   12998:	bl	11484 <strlen@plt>
   1299c:	ldr	ip, [pc, #48]	; 129d4 <__assert_fail@plt+0x13e8>
   129a0:	str	r5, [sp, #4]
   129a4:	mov	r1, #1
   129a8:	add	ip, pc, ip
   129ac:	ldr	r3, [pc, #36]	; 129d8 <__assert_fail@plt+0x13ec>
   129b0:	mvn	r2, #0
   129b4:	ldr	ip, [ip]
   129b8:	add	r3, pc, r3
   129bc:	str	ip, [sp]
   129c0:	add	r0, r6, r0
   129c4:	bl	114cc <__sprintf_chk@plt>
   129c8:	b	12988 <__assert_fail@plt+0x139c>
   129cc:	andeq	r7, r1, r0, lsl #17
   129d0:	andeq	r7, r1, ip, lsr r8
   129d4:	andeq	r7, r1, r8, asr #15
   129d8:	andeq	r6, r0, r4, asr r0
   129dc:	push	{r3, r4, r5, lr}
   129e0:	mov	r5, r0
   129e4:	ldr	r4, [pc, #44]	; 12a18 <__assert_fail@plt+0x142c>
   129e8:	mov	r1, #1
   129ec:	ldr	r2, [r5]
   129f0:	add	r4, pc, r4
   129f4:	ldr	r0, [r0, #4]
   129f8:	ldr	r3, [r4, #12]
   129fc:	bl	11328 <fwrite_unlocked@plt>
   12a00:	ldrd	r2, [r4, #16]
   12a04:	ldr	r1, [r5]
   12a08:	adds	r2, r2, r1
   12a0c:	adc	r3, r3, #0
   12a10:	strd	r2, [r4, #16]
   12a14:	pop	{r3, r4, r5, pc}
   12a18:	ldrdeq	r7, [r1], -r8
   12a1c:	push	{r4, r5, r6, r7, r8, lr}
   12a20:	mov	r7, r0
   12a24:	ldr	r6, [pc, #132]	; 12ab0 <__assert_fail@plt+0x14c4>
   12a28:	add	r6, pc, r6
   12a2c:	ldr	r3, [r6, #24]
   12a30:	cmp	r3, #0
   12a34:	beq	12a9c <__assert_fail@plt+0x14b0>
   12a38:	ldr	r8, [pc, #116]	; 12ab4 <__assert_fail@plt+0x14c8>
   12a3c:	mov	r4, #0
   12a40:	add	r8, pc, r8
   12a44:	b	12a54 <__assert_fail@plt+0x1468>
   12a48:	ldr	r3, [r6, #24]
   12a4c:	cmp	r4, r3
   12a50:	bcs	12a9c <__assert_fail@plt+0x14b0>
   12a54:	mov	r0, r4
   12a58:	add	r4, r4, #1
   12a5c:	bl	12938 <__assert_fail@plt+0x134c>
   12a60:	mov	r5, r0
   12a64:	bl	11358 <unlink@plt>
   12a68:	cmp	r0, #0
   12a6c:	beq	12a48 <__assert_fail@plt+0x145c>
   12a70:	cmp	r7, #0
   12a74:	bne	12a48 <__assert_fail@plt+0x145c>
   12a78:	bl	114c0 <__errno_location@plt>
   12a7c:	mov	r3, r5
   12a80:	mov	r2, r8
   12a84:	ldr	r1, [r0]
   12a88:	mov	r0, r7
   12a8c:	bl	113f4 <error@plt>
   12a90:	ldr	r3, [r6, #24]
   12a94:	cmp	r4, r3
   12a98:	bcc	12a54 <__assert_fail@plt+0x1468>
   12a9c:	ldr	r3, [pc, #20]	; 12ab8 <__assert_fail@plt+0x14cc>
   12aa0:	mov	r2, #0
   12aa4:	add	r3, pc, r3
   12aa8:	str	r2, [r3, #24]
   12aac:	pop	{r4, r5, r6, r7, r8, pc}
   12ab0:	andeq	r7, r1, r0, lsr #15
   12ab4:	andeq	r6, r0, r0, lsr #17
   12ab8:	andeq	r7, r1, r4, lsr #14
   12abc:	ldr	r3, [pc, #100]	; 12b28 <__assert_fail@plt+0x153c>
   12ac0:	ldr	r2, [pc, #100]	; 12b2c <__assert_fail@plt+0x1540>
   12ac4:	add	r3, pc, r3
   12ac8:	push	{r4, r5, lr}
   12acc:	sub	sp, sp, #140	; 0x8c
   12ad0:	ldr	r3, [r3, r2]
   12ad4:	add	r4, sp, #4
   12ad8:	ldr	r5, [pc, #80]	; 12b30 <__assert_fail@plt+0x1544>
   12adc:	ldr	r3, [r3]
   12ae0:	add	r5, pc, r5
   12ae4:	str	r3, [sp, #132]	; 0x84
   12ae8:	bl	12b34 <__assert_fail@plt+0x1548>
   12aec:	add	r1, r5, #28
   12af0:	mov	r2, r4
   12af4:	mov	r0, #0
   12af8:	bl	112d4 <sigprocmask@plt>
   12afc:	ldrb	r3, [r5, #156]	; 0x9c
   12b00:	cmp	r3, #0
   12b04:	beq	12b10 <__assert_fail@plt+0x1524>
   12b08:	mov	r0, #0
   12b0c:	bl	12a1c <__assert_fail@plt+0x1430>
   12b10:	mov	r1, r4
   12b14:	mov	r0, #2
   12b18:	mov	r2, #0
   12b1c:	bl	112d4 <sigprocmask@plt>
   12b20:	mov	r0, #1
   12b24:	bl	1146c <exit@plt>
   12b28:	andeq	r7, r1, r4, lsr r5
   12b2c:	andeq	r0, r0, r8, lsr r1
   12b30:	andeq	r7, r1, r8, ror #13
   12b34:	push	{r4, r5, r6, r7, r8, r9, lr}
   12b38:	sub	sp, sp, #164	; 0xa4
   12b3c:	ldr	r7, [pc, #416]	; 12ce4 <__assert_fail@plt+0x16f8>
   12b40:	ldr	r3, [pc, #416]	; 12ce8 <__assert_fail@plt+0x16fc>
   12b44:	add	r7, pc, r7
   12b48:	ldr	r6, [pc, #412]	; 12cec <__assert_fail@plt+0x1700>
   12b4c:	ldr	r8, [r7, r3]
   12b50:	add	r6, pc, r6
   12b54:	ldr	r0, [r6, #12]
   12b58:	ldr	r3, [r8]
   12b5c:	cmp	r0, #0
   12b60:	str	r3, [sp, #156]	; 0x9c
   12b64:	beq	12bb0 <__assert_fail@plt+0x15c4>
   12b68:	ldr	r3, [r0]
   12b6c:	ands	r4, r3, #32
   12b70:	bne	12ca4 <__assert_fail@plt+0x16b8>
   12b74:	bl	175a8 <close_stdout@@Base+0x3a78>
   12b78:	subs	r9, r0, #0
   12b7c:	bne	12c7c <__assert_fail@plt+0x1690>
   12b80:	ldrd	r4, [r6, #16]
   12b84:	orrs	r3, r4, r5
   12b88:	beq	12bc8 <__assert_fail@plt+0x15dc>
   12b8c:	ldr	r3, [pc, #348]	; 12cf0 <__assert_fail@plt+0x1704>
   12b90:	add	r3, pc, r3
   12b94:	ldrb	r3, [r3, #165]	; 0xa5
   12b98:	cmp	r3, #0
   12b9c:	beq	12c40 <__assert_fail@plt+0x1654>
   12ba0:	ldr	r3, [pc, #332]	; 12cf4 <__assert_fail@plt+0x1708>
   12ba4:	mov	r2, #0
   12ba8:	add	r3, pc, r3
   12bac:	str	r2, [r3, #12]
   12bb0:	ldr	r2, [sp, #156]	; 0x9c
   12bb4:	ldr	r3, [r8]
   12bb8:	cmp	r2, r3
   12bbc:	bne	12c78 <__assert_fail@plt+0x168c>
   12bc0:	add	sp, sp, #164	; 0xa4
   12bc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12bc8:	ldrb	r3, [r6, #164]	; 0xa4
   12bcc:	cmp	r3, #0
   12bd0:	beq	12b8c <__assert_fail@plt+0x15a0>
   12bd4:	add	r5, sp, #4
   12bd8:	add	r1, r6, #28
   12bdc:	mov	r2, r5
   12be0:	bl	112d4 <sigprocmask@plt>
   12be4:	ldr	r7, [r6, #160]	; 0xa0
   12be8:	mov	r0, r7
   12bec:	bl	11358 <unlink@plt>
   12bf0:	rsbs	r4, r0, #1
   12bf4:	movcc	r4, #0
   12bf8:	bl	114c0 <__errno_location@plt>
   12bfc:	ldr	r3, [r6, #24]
   12c00:	mov	r1, r5
   12c04:	mov	r2, r9
   12c08:	rsb	r3, r4, r3
   12c0c:	str	r3, [r6, #24]
   12c10:	ldr	r5, [r0]
   12c14:	mov	r0, #2
   12c18:	bl	112d4 <sigprocmask@plt>
   12c1c:	cmp	r4, #0
   12c20:	bne	12ba0 <__assert_fail@plt+0x15b4>
   12c24:	ldr	r2, [pc, #204]	; 12cf8 <__assert_fail@plt+0x170c>
   12c28:	mov	r0, r4
   12c2c:	mov	r1, r5
   12c30:	mov	r3, r7
   12c34:	add	r2, pc, r2
   12c38:	bl	113f4 <error@plt>
   12c3c:	b	12ba0 <__assert_fail@plt+0x15b4>
   12c40:	ldr	r3, [pc, #180]	; 12cfc <__assert_fail@plt+0x1710>
   12c44:	mov	r1, r5
   12c48:	add	r2, sp, #132	; 0x84
   12c4c:	mov	r0, r4
   12c50:	ldr	r3, [r7, r3]
   12c54:	ldr	r4, [r3]
   12c58:	bl	13de8 <close_stdout@@Base+0x2b8>
   12c5c:	ldr	r2, [pc, #156]	; 12d00 <__assert_fail@plt+0x1714>
   12c60:	mov	r1, #1
   12c64:	add	r2, pc, r2
   12c68:	mov	r3, r0
   12c6c:	mov	r0, r4
   12c70:	bl	11514 <__fprintf_chk@plt>
   12c74:	b	12ba0 <__assert_fail@plt+0x15b4>
   12c78:	bl	1134c <__stack_chk_fail@plt>
   12c7c:	bl	114c0 <__errno_location@plt>
   12c80:	ldr	r2, [pc, #124]	; 12d04 <__assert_fail@plt+0x1718>
   12c84:	add	r2, pc, r2
   12c88:	mov	r3, r0
   12c8c:	mov	r0, r4
   12c90:	ldr	r1, [r3]
   12c94:	ldr	r3, [r6, #160]	; 0xa0
   12c98:	bl	113f4 <error@plt>
   12c9c:	str	r4, [r6, #12]
   12ca0:	bl	12abc <__assert_fail@plt+0x14d0>
   12ca4:	ldr	r1, [pc, #92]	; 12d08 <__assert_fail@plt+0x171c>
   12ca8:	mov	r2, #5
   12cac:	mov	r0, #0
   12cb0:	add	r1, pc, r1
   12cb4:	bl	11340 <dcgettext@plt>
   12cb8:	mov	r4, r0
   12cbc:	ldr	r0, [r6, #160]	; 0xa0
   12cc0:	bl	1569c <close_stdout@@Base+0x1b6c>
   12cc4:	mov	r2, r4
   12cc8:	mov	r3, r0
   12ccc:	mov	r0, #0
   12cd0:	mov	r1, r0
   12cd4:	bl	113f4 <error@plt>
   12cd8:	mov	r3, #0
   12cdc:	str	r3, [r6, #12]
   12ce0:	bl	12abc <__assert_fail@plt+0x14d0>
   12ce4:			; <UNDEFINED> instruction: 0x000174b4
   12ce8:	andeq	r0, r0, r8, lsr r1
   12cec:	andeq	r7, r1, r8, ror r6
   12cf0:	andeq	r7, r1, r8, lsr r6
   12cf4:	andeq	r7, r1, r0, lsr #12
   12cf8:	andeq	r6, r0, ip, lsr #13
   12cfc:	andeq	r0, r0, r8, asr r1
   12d00:	andeq	r6, r0, ip, lsr #18
   12d04:	andeq	r6, r0, ip, asr r6
   12d08:	andeq	r5, r0, r4, ror #26
   12d0c:	ldr	r3, [pc, #228]	; 12df8 <__assert_fail@plt+0x180c>
   12d10:	ldr	r2, [pc, #228]	; 12dfc <__assert_fail@plt+0x1810>
   12d14:	add	r3, pc, r3
   12d18:	push	{r4, r5, r6, r7, lr}
   12d1c:	sub	sp, sp, #140	; 0x8c
   12d20:	ldr	r5, [r3, r2]
   12d24:	ldr	r4, [pc, #212]	; 12e00 <__assert_fail@plt+0x1814>
   12d28:	ldr	r3, [r5]
   12d2c:	add	r4, pc, r4
   12d30:	str	r3, [sp, #132]	; 0x84
   12d34:	ldr	r0, [r4, #24]
   12d38:	bl	12938 <__assert_fail@plt+0x134c>
   12d3c:	ldr	r3, [r4, #24]
   12d40:	cmn	r3, #1
   12d44:	mov	r6, r0
   12d48:	str	r0, [r4, #160]	; 0xa0
   12d4c:	beq	12dd4 <__assert_fail@plt+0x17e8>
   12d50:	add	r7, sp, #4
   12d54:	add	r1, r4, #28
   12d58:	mov	r0, #0
   12d5c:	mov	r2, r7
   12d60:	bl	112d4 <sigprocmask@plt>
   12d64:	ldr	r1, [pc, #152]	; 12e04 <__assert_fail@plt+0x1818>
   12d68:	mov	r0, r6
   12d6c:	add	r1, pc, r1
   12d70:	bl	13d4c <close_stdout@@Base+0x21c>
   12d74:	adds	r6, r0, #0
   12d78:	str	r0, [r4, #12]
   12d7c:	movne	r6, #1
   12d80:	bl	114c0 <__errno_location@plt>
   12d84:	ldr	r3, [r4, #24]
   12d88:	mov	r1, r7
   12d8c:	mov	r2, #0
   12d90:	add	r3, r6, r3
   12d94:	str	r3, [r4, #24]
   12d98:	ldr	r7, [r0]
   12d9c:	mov	r0, #2
   12da0:	bl	112d4 <sigprocmask@plt>
   12da4:	cmp	r6, #0
   12da8:	ldreq	r6, [r4, #160]	; 0xa0
   12dac:	beq	12dd8 <__assert_fail@plt+0x17ec>
   12db0:	ldr	r0, [sp, #132]	; 0x84
   12db4:	mov	r2, #0
   12db8:	ldr	r1, [r5]
   12dbc:	mov	r3, #0
   12dc0:	strd	r2, [r4, #16]
   12dc4:	cmp	r0, r1
   12dc8:	bne	12df4 <__assert_fail@plt+0x1808>
   12dcc:	add	sp, sp, #140	; 0x8c
   12dd0:	pop	{r4, r5, r6, r7, pc}
   12dd4:	mov	r7, #75	; 0x4b
   12dd8:	ldr	r2, [pc, #40]	; 12e08 <__assert_fail@plt+0x181c>
   12ddc:	mov	r1, r7
   12de0:	mov	r3, r6
   12de4:	mov	r0, #0
   12de8:	add	r2, pc, r2
   12dec:	bl	113f4 <error@plt>
   12df0:	bl	12abc <__assert_fail@plt+0x14d0>
   12df4:	bl	1134c <__stack_chk_fail@plt>
   12df8:	andeq	r7, r1, r4, ror #5
   12dfc:	andeq	r0, r0, r8, lsr r1
   12e00:	muleq	r1, ip, r4
   12e04:			; <UNDEFINED> instruction: 0x00005cbc
   12e08:	strdeq	r6, [r0], -r8
   12e0c:	ldr	r3, [pc, #52]	; 12e48 <__assert_fail@plt+0x185c>
   12e10:	push	{r4, lr}
   12e14:	add	r3, pc, r3
   12e18:	mov	r4, r0
   12e1c:	ldrb	r3, [r3, #156]	; 0x9c
   12e20:	cmp	r3, #0
   12e24:	beq	12e30 <__assert_fail@plt+0x1844>
   12e28:	mov	r0, #1
   12e2c:	bl	12a1c <__assert_fail@plt+0x1430>
   12e30:	mov	r0, r4
   12e34:	mov	r1, #0
   12e38:	bl	1131c <signal@plt>
   12e3c:	mov	r0, r4
   12e40:	pop	{r4, lr}
   12e44:	b	112a4 <raise@plt>
   12e48:			; <UNDEFINED> instruction: 0x000173b4
   12e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e50:	mov	r5, r3
   12e54:	ldr	r6, [pc, #212]	; 12f30 <__assert_fail@plt+0x1944>
   12e58:	sub	sp, sp, #44	; 0x2c
   12e5c:	ldr	ip, [pc, #208]	; 12f34 <__assert_fail@plt+0x1948>
   12e60:	mov	sl, r0
   12e64:	add	r6, pc, r6
   12e68:	ldr	r3, [pc, #200]	; 12f38 <__assert_fail@plt+0x194c>
   12e6c:	ldr	r1, [pc, #200]	; 12f3c <__assert_fail@plt+0x1950>
   12e70:	mov	r4, r2
   12e74:	ldr	ip, [r6, ip]
   12e78:	mov	r2, #5
   12e7c:	add	r1, pc, r1
   12e80:	mov	r0, #0
   12e84:	add	r8, sp, #12
   12e88:	ldr	ip, [ip]
   12e8c:	str	ip, [sp, #36]	; 0x24
   12e90:	ldr	r7, [r6, r3]
   12e94:	ldr	r9, [r7]
   12e98:	bl	11340 <dcgettext@plt>
   12e9c:	ldr	r3, [pc, #156]	; 12f40 <__assert_fail@plt+0x1954>
   12ea0:	mov	r2, r8
   12ea4:	ldr	r3, [r6, r3]
   12ea8:	ldr	r6, [r3]
   12eac:	mov	fp, r0
   12eb0:	ldrd	r0, [sl]
   12eb4:	bl	13de8 <close_stdout@@Base+0x2b8>
   12eb8:	bl	1569c <close_stdout@@Base+0x1b6c>
   12ebc:	mov	r3, r6
   12ec0:	mov	r2, fp
   12ec4:	mov	r1, #1
   12ec8:	str	r0, [sp]
   12ecc:	mov	r0, r9
   12ed0:	bl	11514 <__fprintf_chk@plt>
   12ed4:	orrs	r3, r4, r5
   12ed8:	beq	12f20 <__assert_fail@plt+0x1934>
   12edc:	ldr	r1, [pc, #96]	; 12f44 <__assert_fail@plt+0x1958>
   12ee0:	mov	r2, #5
   12ee4:	mov	r0, #0
   12ee8:	ldr	r7, [r7]
   12eec:	add	r1, pc, r1
   12ef0:	bl	11340 <dcgettext@plt>
   12ef4:	mov	r1, r5
   12ef8:	mov	r2, r8
   12efc:	mov	r6, r0
   12f00:	mov	r0, r4
   12f04:	bl	13de8 <close_stdout@@Base+0x2b8>
   12f08:	mov	r2, r6
   12f0c:	mov	r1, #1
   12f10:	mov	r3, r0
   12f14:	mov	r0, r7
   12f18:	bl	11514 <__fprintf_chk@plt>
   12f1c:	bl	12abc <__assert_fail@plt+0x14d0>
   12f20:	ldr	r1, [r7]
   12f24:	mov	r0, #10
   12f28:	bl	11580 <fputc@plt>
   12f2c:	b	12f1c <__assert_fail@plt+0x1930>
   12f30:	muleq	r1, r4, r1
   12f34:	andeq	r0, r0, r8, lsr r1
   12f38:	andeq	r0, r0, r4, asr #2
   12f3c:			; <UNDEFINED> instruction: 0x00005bb0
   12f40:	andeq	r0, r0, r4, ror #2
   12f44:	andeq	r5, r0, r4, ror #22
   12f48:	push	{r4, r5, r6, r7, r8, lr}
   12f4c:	mov	r6, r0
   12f50:	ldr	r4, [r0]
   12f54:	mov	r5, r1
   12f58:	mov	r7, r2
   12f5c:	mov	r8, r3
   12f60:	cmp	r4, #0
   12f64:	beq	12fcc <__assert_fail@plt+0x19e0>
   12f68:	ldr	r4, [r5]
   12f6c:	ldr	r0, [r4]
   12f70:	cmp	r0, #80	; 0x50
   12f74:	beq	12f98 <__assert_fail@plt+0x19ac>
   12f78:	ldr	r1, [r4, #4]
   12f7c:	add	r0, r0, #1
   12f80:	add	r3, r1, #1
   12f84:	add	r1, r4, r1, lsl #3
   12f88:	str	r7, [r1, #16]
   12f8c:	str	r8, [r1, #12]
   12f90:	stm	r4, {r0, r3}
   12f94:	pop	{r4, r5, r6, r7, r8, pc}
   12f98:	mov	r0, #656	; 0x290
   12f9c:	bl	15cb4 <close_stdout@@Base+0x2184>
   12fa0:	mov	r3, #0
   12fa4:	str	r3, [r0, #652]	; 0x28c
   12fa8:	str	r3, [r0]
   12fac:	str	r3, [r0, #4]
   12fb0:	str	r3, [r0, #8]
   12fb4:	str	r0, [r4, #652]	; 0x28c
   12fb8:	ldr	r3, [r5]
   12fbc:	ldr	r4, [r3, #652]	; 0x28c
   12fc0:	str	r4, [r5]
   12fc4:	ldr	r0, [r4]
   12fc8:	b	12f78 <__assert_fail@plt+0x198c>
   12fcc:	mov	r0, #656	; 0x290
   12fd0:	bl	15cb4 <close_stdout@@Base+0x2184>
   12fd4:	str	r4, [r0, #652]	; 0x28c
   12fd8:	str	r0, [r5]
   12fdc:	str	r4, [r0]
   12fe0:	str	r4, [r0, #4]
   12fe4:	str	r4, [r0, #8]
   12fe8:	str	r0, [r6]
   12fec:	b	12f68 <__assert_fail@plt+0x197c>
   12ff0:	push	{r4, r5, r6, lr}
   12ff4:	mov	r5, r0
   12ff8:	ldr	r0, [r1]
   12ffc:	mov	r6, r1
   13000:	cmp	r0, #0
   13004:	beq	1301c <__assert_fail@plt+0x1a30>
   13008:	ldr	r4, [r0, #652]	; 0x28c
   1300c:	bl	112e0 <free@plt>
   13010:	cmp	r4, #0
   13014:	mov	r0, r4
   13018:	bne	13008 <__assert_fail@plt+0x1a1c>
   1301c:	mov	r4, #0
   13020:	str	r4, [r6]
   13024:	ldr	r0, [r5]
   13028:	bl	112e0 <free@plt>
   1302c:	str	r4, [r5]
   13030:	pop	{r4, r5, r6, pc}
   13034:	ldr	r1, [pc, #44]	; 13068 <__assert_fail@plt+0x1a7c>
   13038:	mov	r2, #5
   1303c:	push	{r3, lr}
   13040:	add	r1, pc, r1
   13044:	mov	r0, #0
   13048:	bl	11340 <dcgettext@plt>
   1304c:	ldr	r2, [pc, #24]	; 1306c <__assert_fail@plt+0x1a80>
   13050:	add	r2, pc, r2
   13054:	mov	r3, r0
   13058:	mov	r0, #0
   1305c:	mov	r1, r0
   13060:	bl	113f4 <error@plt>
   13064:	bl	12abc <__assert_fail@plt+0x14d0>
   13068:	andeq	r5, r0, r4, lsr #20
   1306c:	muleq	r0, r0, r2
   13070:	ldr	r2, [pc, #184]	; 13130 <__assert_fail@plt+0x1b44>
   13074:	push	{r4, r5, r6, lr}
   13078:	add	r2, pc, r2
   1307c:	ldr	r3, [r2, #168]	; 0xa8
   13080:	ldr	r1, [r2, #172]	; 0xac
   13084:	cmp	r3, r1
   13088:	beq	130d0 <__assert_fail@plt+0x1ae4>
   1308c:	ldr	r4, [r2, #176]	; 0xb0
   13090:	ldr	r0, [pc, #156]	; 13134 <__assert_fail@plt+0x1b48>
   13094:	lsl	ip, r3, #6
   13098:	add	r1, r4, ip
   1309c:	mov	r2, #0
   130a0:	add	r0, pc, r0
   130a4:	add	r6, r3, #1
   130a8:	mov	r5, #0
   130ac:	mov	r3, #0
   130b0:	str	r6, [r0, #168]	; 0xa8
   130b4:	mov	r0, r1
   130b8:	strb	r5, [r1, #30]
   130bc:	strb	r5, [r1, #28]
   130c0:	strd	r2, [r1, #16]
   130c4:	strd	r2, [r1, #8]
   130c8:	strd	r2, [r4, ip]
   130cc:	pop	{r4, r5, r6, pc}
   130d0:	ldr	r0, [r2, #176]	; 0xb0
   130d4:	cmp	r0, #0
   130d8:	beq	13118 <__assert_fail@plt+0x1b2c>
   130dc:	movw	r2, #43689	; 0xaaa9
   130e0:	movt	r2, #682	; 0x2aa
   130e4:	cmp	r3, r2
   130e8:	addls	r2, r3, #1
   130ec:	addls	r3, r3, r2, lsr #1
   130f0:	bhi	1312c <__assert_fail@plt+0x1b40>
   130f4:	lsl	r1, r3, #6
   130f8:	ldr	r5, [pc, #56]	; 13138 <__assert_fail@plt+0x1b4c>
   130fc:	add	r5, pc, r5
   13100:	str	r3, [r5, #172]	; 0xac
   13104:	bl	15d0c <close_stdout@@Base+0x21dc>
   13108:	ldr	r3, [r5, #168]	; 0xa8
   1310c:	str	r0, [r5, #176]	; 0xb0
   13110:	mov	r4, r0
   13114:	b	13090 <__assert_fail@plt+0x1aa4>
   13118:	cmp	r3, #0
   1311c:	moveq	r1, #64	; 0x40
   13120:	moveq	r3, #1
   13124:	beq	130f8 <__assert_fail@plt+0x1b0c>
   13128:	b	130f4 <__assert_fail@plt+0x1b08>
   1312c:	bl	13034 <__assert_fail@plt+0x1a48>
   13130:	andeq	r7, r1, r0, asr r1
   13134:	andeq	r7, r1, r8, lsr #2
   13138:	andeq	r7, r1, ip, asr #1
   1313c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13140:	sub	sp, sp, #20
   13144:	ldr	r9, [pc, #768]	; 1344c <__assert_fail@plt+0x1e60>
   13148:	movw	r3, #8191	; 0x1fff
   1314c:	ldr	r2, [pc, #764]	; 13450 <__assert_fail@plt+0x1e64>
   13150:	add	r9, pc, r9
   13154:	add	r2, pc, r2
   13158:	str	r2, [sp, #12]
   1315c:	ldr	r2, [pc, #752]	; 13454 <__assert_fail@plt+0x1e68>
   13160:	ldr	r4, [r9, #180]	; 0xb4
   13164:	add	r2, pc, r2
   13168:	str	r2, [sp]
   1316c:	ldr	r2, [pc, #740]	; 13458 <__assert_fail@plt+0x1e6c>
   13170:	cmp	r4, r3
   13174:	movcc	r4, r3
   13178:	add	r2, pc, r2
   1317c:	str	r2, [sp, #8]
   13180:	ldr	r2, [pc, #724]	; 1345c <__assert_fail@plt+0x1e70>
   13184:	add	r2, pc, r2
   13188:	str	r2, [sp, #4]
   1318c:	cmp	r4, #8192	; 0x2000
   13190:	mov	r0, #48	; 0x30
   13194:	subcs	r4, r4, #6144	; 0x1800
   13198:	mov	r7, #0
   1319c:	biccs	r4, r4, #2032	; 0x7f0
   131a0:	movcc	r4, #8192	; 0x2000
   131a4:	biccs	r4, r4, #15
   131a8:	movwcc	r8, #8191	; 0x1fff
   131ac:	addcs	r8, r4, #8128	; 0x1fc0
   131b0:	addcs	r4, r4, #8192	; 0x2000
   131b4:	addcs	r8, r8, #63	; 0x3f
   131b8:	bl	15cb4 <close_stdout@@Base+0x2184>
   131bc:	mov	r6, r0
   131c0:	mov	r0, r4
   131c4:	bl	15cb4 <close_stdout@@Base+0x2184>
   131c8:	ldrd	r4, [r9, #184]	; 0xb8
   131cc:	ldr	sl, [r9, #180]	; 0xb4
   131d0:	adds	r4, r4, #1
   131d4:	str	r8, [r6]
   131d8:	adc	r5, r5, #0
   131dc:	cmp	sl, r7
   131e0:	strd	r4, [r6, #16]
   131e4:	strd	r4, [r6, #8]
   131e8:	str	r7, [r6, #36]	; 0x24
   131ec:	str	r7, [r6, #32]
   131f0:	str	r7, [r6, #24]
   131f4:	str	r7, [r6, #4]
   131f8:	str	r7, [r6, #40]	; 0x28
   131fc:	mov	fp, r0
   13200:	str	r0, [r6, #28]
   13204:	bne	13348 <__assert_fail@plt+0x1d5c>
   13208:	cmp	r8, #0
   1320c:	bne	1331c <__assert_fail@plt+0x1d30>
   13210:	add	sl, r8, sl
   13214:	str	sl, [r6, #4]
   13218:	cmp	sl, #0
   1321c:	beq	132d8 <__assert_fail@plt+0x1cec>
   13220:	ldr	r4, [r6, #28]
   13224:	add	r8, r6, #32
   13228:	add	r7, r6, #36	; 0x24
   1322c:	mov	r5, #0
   13230:	b	1325c <__assert_fail@plt+0x1c70>
   13234:	rsb	lr, r4, ip
   13238:	mov	r2, r4
   1323c:	add	lr, lr, #1
   13240:	mov	r0, r8
   13244:	mov	r1, r7
   13248:	add	r5, r5, #1
   1324c:	mov	r3, lr
   13250:	rsb	sl, lr, sl
   13254:	add	r4, ip, #1
   13258:	bl	12f48 <__assert_fail@plt+0x195c>
   1325c:	mov	r0, r4
   13260:	mov	r1, #10
   13264:	mov	r2, sl
   13268:	bl	11520 <memchr@plt>
   1326c:	subs	ip, r0, #0
   13270:	bne	13234 <__assert_fail@plt+0x1c48>
   13274:	cmp	sl, #0
   13278:	beq	132a4 <__assert_fail@plt+0x1cb8>
   1327c:	ldr	r2, [sp, #8]
   13280:	ldrb	r3, [r2, #196]	; 0xc4
   13284:	cmp	r3, #0
   13288:	beq	13378 <__assert_fail@plt+0x1d8c>
   1328c:	mov	r2, r4
   13290:	mov	r3, sl
   13294:	add	r0, r6, #32
   13298:	add	r1, r6, #36	; 0x24
   1329c:	add	r5, r5, #1
   132a0:	bl	12f48 <__assert_fail@plt+0x195c>
   132a4:	ldr	r3, [sp]
   132a8:	str	r5, [r6, #24]
   132ac:	ldrd	r0, [r3, #184]	; 0xb8
   132b0:	adds	r2, r0, #1
   132b4:	adc	r3, r1, #0
   132b8:	adds	r0, r0, r5
   132bc:	strd	r2, [r6, #8]
   132c0:	adc	r1, r1, #0
   132c4:	strd	r2, [r6, #16]
   132c8:	cmp	r5, #0
   132cc:	ldr	r2, [sp]
   132d0:	strd	r0, [r2, #184]	; 0xb8
   132d4:	bne	133a4 <__assert_fail@plt+0x1db8>
   132d8:	ldr	r2, [sp, #4]
   132dc:	ldrb	r3, [r2, #196]	; 0xc4
   132e0:	cmp	r3, #0
   132e4:	bne	133f8 <__assert_fail@plt+0x1e0c>
   132e8:	ldr	r4, [r6]
   132ec:	mvn	r0, #0
   132f0:	mov	r1, r4
   132f4:	bl	17d64 <close_stdout@@Base+0x4234>
   132f8:	cmp	r0, #1
   132fc:	bls	13418 <__assert_fail@plt+0x1e2c>
   13300:	add	r0, r6, #28
   13304:	add	r1, r6, #32
   13308:	bl	12ff0 <__assert_fail@plt+0x1a04>
   1330c:	mov	r0, r6
   13310:	lsl	r4, r4, #1
   13314:	bl	112e0 <free@plt>
   13318:	b	1318c <__assert_fail@plt+0x1ba0>
   1331c:	mov	r1, fp
   13320:	mov	r2, r8
   13324:	mov	r0, #0
   13328:	bl	156a8 <close_stdout@@Base+0x1b78>
   1332c:	cmp	r0, #0
   13330:	bne	13368 <__assert_fail@plt+0x1d7c>
   13334:	ldr	r2, [sp, #12]
   13338:	mov	r3, #1
   1333c:	mov	r8, r0
   13340:	strb	r3, [r2, #196]	; 0xc4
   13344:	b	13210 <__assert_fail@plt+0x1c24>
   13348:	ldr	r1, [r9, #192]	; 0xc0
   1334c:	mov	r2, sl
   13350:	add	fp, r0, sl
   13354:	rsb	r8, sl, r8
   13358:	bl	112f8 <memcpy@plt>
   1335c:	str	sl, [r6, #4]
   13360:	str	r7, [r9, #180]	; 0xb4
   13364:	b	13208 <__assert_fail@plt+0x1c1c>
   13368:	cmn	r0, #1
   1336c:	beq	1341c <__assert_fail@plt+0x1e30>
   13370:	mov	r8, r0
   13374:	b	13210 <__assert_fail@plt+0x1c24>
   13378:	mov	r0, r4
   1337c:	mov	r1, sl
   13380:	bl	15e88 <close_stdout@@Base+0x2358>
   13384:	ldr	r3, [sp, #8]
   13388:	mov	r4, r0
   1338c:	ldr	r0, [r3, #192]	; 0xc0
   13390:	bl	112e0 <free@plt>
   13394:	ldr	r2, [sp, #8]
   13398:	str	r4, [r2, #192]	; 0xc0
   1339c:	str	sl, [r2, #180]	; 0xb4
   133a0:	b	132a4 <__assert_fail@plt+0x1cb8>
   133a4:	ldr	r3, [sp]
   133a8:	mov	r1, #0
   133ac:	str	r1, [r6, #40]	; 0x28
   133b0:	ldr	r2, [r3, #200]	; 0xc8
   133b4:	ldr	r3, [r6, #32]
   133b8:	cmp	r2, r1
   133bc:	str	r3, [r6, #36]	; 0x24
   133c0:	bne	133dc <__assert_fail@plt+0x1df0>
   133c4:	ldr	r3, [sp]
   133c8:	mov	r0, #1
   133cc:	str	r6, [r3, #200]	; 0xc8
   133d0:	add	sp, sp, #20
   133d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133d8:	mov	r2, r3
   133dc:	ldr	r3, [r2, #40]	; 0x28
   133e0:	cmp	r3, #0
   133e4:	bne	133d8 <__assert_fail@plt+0x1dec>
   133e8:	mov	r0, #1
   133ec:	str	r6, [r2, #40]	; 0x28
   133f0:	add	sp, sp, #20
   133f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133f8:	add	r0, r6, #28
   133fc:	add	r1, r6, #32
   13400:	bl	12ff0 <__assert_fail@plt+0x1a04>
   13404:	mov	r0, r6
   13408:	bl	112e0 <free@plt>
   1340c:	mov	r0, #0
   13410:	add	sp, sp, #20
   13414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13418:	bl	13034 <__assert_fail@plt+0x1a48>
   1341c:	bl	114c0 <__errno_location@plt>
   13420:	ldr	r1, [pc, #56]	; 13460 <__assert_fail@plt+0x1e74>
   13424:	mov	r2, #5
   13428:	add	r1, pc, r1
   1342c:	ldr	r4, [r0]
   13430:	mov	r0, #0
   13434:	bl	11340 <dcgettext@plt>
   13438:	mov	r1, r4
   1343c:	mov	r2, r0
   13440:	mov	r0, #0
   13444:	bl	113f4 <error@plt>
   13448:	bl	12abc <__assert_fail@plt+0x14d0>
   1344c:	andeq	r7, r1, r8, ror r0
   13450:	andeq	r7, r1, r4, ror r0
   13454:	andeq	r7, r1, r4, rrx
   13458:	andeq	r7, r1, r0, asr r0
   1345c:	andeq	r7, r1, r4, asr #32
   13460:	andeq	r5, r0, r0, asr r6
   13464:	push	{r3, r4, r5, lr}
   13468:	ldr	r5, [pc, #232]	; 13558 <__assert_fail@plt+0x1f6c>
   1346c:	add	r5, pc, r5
   13470:	ldr	r4, [r5, #204]	; 0xcc
   13474:	cmp	r4, #0
   13478:	beq	13498 <__assert_fail@plt+0x1eac>
   1347c:	add	r0, r4, #28
   13480:	add	r1, r4, #32
   13484:	bl	12ff0 <__assert_fail@plt+0x1a04>
   13488:	mov	r0, r4
   1348c:	bl	112e0 <free@plt>
   13490:	mov	r3, #0
   13494:	str	r3, [r5, #204]	; 0xcc
   13498:	ldr	r4, [pc, #188]	; 1355c <__assert_fail@plt+0x1f70>
   1349c:	add	r4, pc, r4
   134a0:	ldr	ip, [r4, #200]	; 0xc8
   134a4:	cmp	ip, #0
   134a8:	beq	13530 <__assert_fail@plt+0x1f44>
   134ac:	ldr	r4, [pc, #172]	; 13560 <__assert_fail@plt+0x1f74>
   134b0:	ldrd	r2, [ip, #16]
   134b4:	add	r4, pc, r4
   134b8:	ldrd	r0, [r4, #208]	; 0xd0
   134bc:	cmp	r3, r1
   134c0:	cmpeq	r2, r0
   134c4:	ldr	r1, [ip, #36]	; 0x24
   134c8:	strdhi	r2, [r4, #208]	; 0xd0
   134cc:	adds	r2, r2, #1
   134d0:	adc	r3, r3, #0
   134d4:	strd	r2, [ip, #16]
   134d8:	ldr	r0, [r1, #8]
   134dc:	ldr	r3, [r1]
   134e0:	add	r0, r0, #1
   134e4:	str	r0, [r1, #8]
   134e8:	cmp	r0, r3
   134ec:	beq	134fc <__assert_fail@plt+0x1f10>
   134f0:	add	r0, r1, r0, lsl #3
   134f4:	add	r0, r0, #4
   134f8:	pop	{r3, r4, r5, pc}
   134fc:	ldr	r3, [r1, #652]	; 0x28c
   13500:	cmp	r3, #0
   13504:	str	r3, [ip, #36]	; 0x24
   13508:	beq	13518 <__assert_fail@plt+0x1f2c>
   1350c:	ldr	r3, [r3]
   13510:	cmp	r3, #0
   13514:	bne	134f0 <__assert_fail@plt+0x1f04>
   13518:	ldr	r3, [pc, #68]	; 13564 <__assert_fail@plt+0x1f78>
   1351c:	ldr	r2, [ip, #40]	; 0x28
   13520:	add	r3, pc, r3
   13524:	str	ip, [r3, #204]	; 0xcc
   13528:	str	r2, [r3, #200]	; 0xc8
   1352c:	b	134f0 <__assert_fail@plt+0x1f04>
   13530:	ldrb	r3, [r4, #196]	; 0xc4
   13534:	cmp	r3, #0
   13538:	beq	13544 <__assert_fail@plt+0x1f58>
   1353c:	mov	r0, #0
   13540:	pop	{r3, r4, r5, pc}
   13544:	bl	1313c <__assert_fail@plt+0x1b50>
   13548:	cmp	r0, #0
   1354c:	beq	1353c <__assert_fail@plt+0x1f50>
   13550:	ldr	ip, [r4, #200]	; 0xc8
   13554:	b	134ac <__assert_fail@plt+0x1ec0>
   13558:	andeq	r6, r1, ip, asr sp
   1355c:	andeq	r6, r1, ip, lsr #26
   13560:	andeq	r6, r1, r4, lsl sp
   13564:	andeq	r6, r1, r8, lsr #25
   13568:	push	{r3, lr}
   1356c:	b	13574 <__assert_fail@plt+0x1f88>
   13570:	bl	129dc <__assert_fail@plt+0x13f0>
   13574:	bl	13464 <__assert_fail@plt+0x1e78>
   13578:	cmp	r0, #0
   1357c:	bne	13570 <__assert_fail@plt+0x1f84>
   13580:	pop	{r3, pc}
   13584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13588:	mov	r5, r3
   1358c:	ldr	r6, [pc, #240]	; 13684 <__assert_fail@plt+0x2098>
   13590:	sub	sp, sp, #44	; 0x2c
   13594:	ldr	ip, [pc, #236]	; 13688 <__assert_fail@plt+0x209c>
   13598:	mov	sl, r0
   1359c:	add	r6, pc, r6
   135a0:	ldr	r3, [pc, #228]	; 1368c <__assert_fail@plt+0x20a0>
   135a4:	ldr	r1, [pc, #228]	; 13690 <__assert_fail@plt+0x20a4>
   135a8:	mov	r4, r2
   135ac:	ldr	ip, [r6, ip]
   135b0:	mov	r2, #5
   135b4:	add	r1, pc, r1
   135b8:	mov	r0, #0
   135bc:	ldrb	r8, [sp, #80]	; 0x50
   135c0:	ldr	ip, [ip]
   135c4:	str	ip, [sp, #36]	; 0x24
   135c8:	ldr	r7, [r6, r3]
   135cc:	ldr	r9, [r7]
   135d0:	bl	11340 <dcgettext@plt>
   135d4:	ldr	r2, [pc, #184]	; 13694 <__assert_fail@plt+0x20a8>
   135d8:	ldr	r3, [pc, #184]	; 13698 <__assert_fail@plt+0x20ac>
   135dc:	add	r2, pc, r2
   135e0:	ldr	r1, [sl]
   135e4:	ldr	r2, [r2, #216]	; 0xd8
   135e8:	ldr	r3, [r6, r3]
   135ec:	ldr	r6, [r3]
   135f0:	mov	fp, r0
   135f4:	ldr	r0, [r2, r1, lsl #2]
   135f8:	bl	1569c <close_stdout@@Base+0x1b6c>
   135fc:	mov	r3, r6
   13600:	mov	r2, fp
   13604:	mov	r1, #1
   13608:	str	r0, [sp]
   1360c:	mov	r0, r9
   13610:	bl	11514 <__fprintf_chk@plt>
   13614:	orrs	r3, r4, r5
   13618:	beq	13668 <__assert_fail@plt+0x207c>
   1361c:	ldr	r1, [pc, #120]	; 1369c <__assert_fail@plt+0x20b0>
   13620:	mov	r2, #5
   13624:	mov	r0, #0
   13628:	ldr	r7, [r7]
   1362c:	add	r1, pc, r1
   13630:	bl	11340 <dcgettext@plt>
   13634:	mov	r1, r5
   13638:	add	r2, sp, #12
   1363c:	mov	r6, r0
   13640:	mov	r0, r4
   13644:	bl	13de8 <close_stdout@@Base+0x2b8>
   13648:	mov	r2, r6
   1364c:	mov	r1, #1
   13650:	mov	r3, r0
   13654:	mov	r0, r7
   13658:	bl	11514 <__fprintf_chk@plt>
   1365c:	cmp	r8, #0
   13660:	beq	13678 <__assert_fail@plt+0x208c>
   13664:	bl	12abc <__assert_fail@plt+0x14d0>
   13668:	ldr	r1, [r7]
   1366c:	mov	r0, #10
   13670:	bl	11580 <fputc@plt>
   13674:	b	1365c <__assert_fail@plt+0x2070>
   13678:	bl	13568 <__assert_fail@plt+0x1f7c>
   1367c:	bl	12b34 <__assert_fail@plt+0x1548>
   13680:	b	13664 <__assert_fail@plt+0x2078>
   13684:	andeq	r6, r1, ip, asr sl
   13688:	andeq	r0, r0, r8, lsr r1
   1368c:	andeq	r0, r0, r4, asr #2
   13690:	ldrdeq	r5, [r0], -r0
   13694:	andeq	r6, r1, ip, ror #23
   13698:	andeq	r0, r0, r4, ror #2
   1369c:	andeq	r5, r0, r4, lsr #8
   136a0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   136a4:	mov	r6, r0
   136a8:	ldr	r4, [pc, #240]	; 137a0 <__assert_fail@plt+0x21b4>
   136ac:	mov	r7, r1
   136b0:	add	r4, pc, r4
   136b4:	ldr	r9, [r4, #200]	; 0xc8
   136b8:	cmp	r9, #0
   136bc:	beq	13778 <__assert_fail@plt+0x218c>
   136c0:	ldrd	r2, [r9, #8]
   136c4:	cmp	r3, r7
   136c8:	cmpeq	r2, r6
   136cc:	bhi	13784 <__assert_fail@plt+0x2198>
   136d0:	ldr	r8, [pc, #204]	; 137a4 <__assert_fail@plt+0x21b8>
   136d4:	add	r8, pc, r8
   136d8:	b	136e4 <__assert_fail@plt+0x20f8>
   136dc:	ldrd	r2, [r1, #8]
   136e0:	mov	r9, r1
   136e4:	ldr	r1, [r9, #24]
   136e8:	adds	r4, r2, r1
   136ec:	adc	r5, r3, #0
   136f0:	cmp	r7, r5
   136f4:	cmpeq	r6, r4
   136f8:	bcc	1374c <__assert_fail@plt+0x2160>
   136fc:	ldr	r1, [r9, #40]	; 0x28
   13700:	cmp	r1, #0
   13704:	bne	136dc <__assert_fail@plt+0x20f0>
   13708:	ldrb	r3, [r8, #196]	; 0xc4
   1370c:	cmp	r3, #0
   13710:	bne	13784 <__assert_fail@plt+0x2198>
   13714:	bl	1313c <__assert_fail@plt+0x1b50>
   13718:	cmp	r0, #0
   1371c:	beq	13784 <__assert_fail@plt+0x2198>
   13720:	ldr	r1, [r9, #40]	; 0x28
   13724:	cmp	r1, #0
   13728:	bne	136dc <__assert_fail@plt+0x20f0>
   1372c:	ldr	r0, [pc, #116]	; 137a8 <__assert_fail@plt+0x21bc>
   13730:	mov	r2, #616	; 0x268
   13734:	ldr	r1, [pc, #112]	; 137ac <__assert_fail@plt+0x21c0>
   13738:	ldr	r3, [pc, #112]	; 137b0 <__assert_fail@plt+0x21c4>
   1373c:	add	r0, pc, r0
   13740:	add	r1, pc, r1
   13744:	add	r3, pc, r3
   13748:	bl	115ec <__assert_fail@plt>
   1374c:	rsb	r2, r2, r6
   13750:	ldr	r3, [r9, #32]
   13754:	cmp	r2, #79	; 0x4f
   13758:	bls	1376c <__assert_fail@plt+0x2180>
   1375c:	sub	r2, r2, #80	; 0x50
   13760:	ldr	r3, [r3, #652]	; 0x28c
   13764:	cmp	r2, #79	; 0x4f
   13768:	bhi	1375c <__assert_fail@plt+0x2170>
   1376c:	add	r2, r3, r2, lsl #3
   13770:	add	r0, r2, #12
   13774:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13778:	ldrb	r3, [r4, #196]	; 0xc4
   1377c:	cmp	r3, #0
   13780:	beq	1378c <__assert_fail@plt+0x21a0>
   13784:	mov	r0, #0
   13788:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1378c:	bl	1313c <__assert_fail@plt+0x1b50>
   13790:	cmp	r0, #0
   13794:	beq	13784 <__assert_fail@plt+0x2198>
   13798:	ldr	r9, [r4, #200]	; 0xc8
   1379c:	b	136c0 <__assert_fail@plt+0x20d4>
   137a0:	andeq	r6, r1, r8, lsl fp
   137a4:	strdeq	r6, [r1], -r4
   137a8:	andeq	r5, r0, r0, ror #6
   137ac:	andeq	r5, r0, r0, ror #6
   137b0:	muleq	r0, r0, r2
   137b4:	push	{r3, lr}
   137b8:	ldr	r3, [pc, #28]	; 137dc <__assert_fail@plt+0x21f0>
   137bc:	add	r3, pc, r3
   137c0:	ldrd	r0, [r3, #208]	; 0xd0
   137c4:	adds	r0, r0, #1
   137c8:	adc	r1, r1, #0
   137cc:	bl	136a0 <__assert_fail@plt+0x20b4>
   137d0:	rsbs	r0, r0, #1
   137d4:	movcc	r0, #0
   137d8:	pop	{r3, pc}
   137dc:	andeq	r6, r1, ip, lsl #20
   137e0:	push	{r4, lr}
   137e4:	ldr	r4, [pc, #116]	; 13860 <__assert_fail@plt+0x2274>
   137e8:	add	r4, pc, r4
   137ec:	ldr	r3, [r4, #200]	; 0xc8
   137f0:	cmp	r3, #0
   137f4:	beq	13800 <__assert_fail@plt+0x2214>
   137f8:	ldrd	r0, [r3, #16]
   137fc:	pop	{r4, pc}
   13800:	ldrb	r3, [r4, #196]	; 0xc4
   13804:	cmp	r3, #0
   13808:	beq	1384c <__assert_fail@plt+0x2260>
   1380c:	bl	114c0 <__errno_location@plt>
   13810:	ldr	r1, [pc, #76]	; 13864 <__assert_fail@plt+0x2278>
   13814:	mov	r2, #5
   13818:	add	r1, pc, r1
   1381c:	ldr	r4, [r0]
   13820:	mov	r0, #0
   13824:	bl	11340 <dcgettext@plt>
   13828:	mov	r1, r4
   1382c:	mov	r2, r0
   13830:	mov	r0, #1
   13834:	bl	113f4 <error@plt>
   13838:	ldr	r3, [pc, #40]	; 13868 <__assert_fail@plt+0x227c>
   1383c:	add	r3, pc, r3
   13840:	ldr	r3, [r3, #200]	; 0xc8
   13844:	ldrd	r0, [r3, #16]
   13848:	pop	{r4, pc}
   1384c:	bl	1313c <__assert_fail@plt+0x1b50>
   13850:	cmp	r0, #0
   13854:	beq	1380c <__assert_fail@plt+0x2220>
   13858:	ldr	r3, [r4, #200]	; 0xc8
   1385c:	b	137f8 <__assert_fail@plt+0x220c>
   13860:	andeq	r6, r1, r0, ror #19
   13864:	muleq	r0, r8, r2
   13868:	andeq	r6, r1, ip, lsl #19
   1386c:	push	{r4, r5, r6, lr}
   13870:	subs	r4, r0, #0
   13874:	ldr	r5, [pc, #568]	; 13ab4 <__assert_fail@plt+0x24c8>
   13878:	add	r5, pc, r5
   1387c:	beq	138c4 <__assert_fail@plt+0x22d8>
   13880:	ldr	r3, [pc, #560]	; 13ab8 <__assert_fail@plt+0x24cc>
   13884:	mov	r2, #5
   13888:	ldr	r1, [pc, #556]	; 13abc <__assert_fail@plt+0x24d0>
   1388c:	mov	r0, #0
   13890:	ldr	r3, [r5, r3]
   13894:	add	r1, pc, r1
   13898:	ldr	r6, [r3]
   1389c:	bl	11340 <dcgettext@plt>
   138a0:	ldr	r3, [pc, #536]	; 13ac0 <__assert_fail@plt+0x24d4>
   138a4:	mov	r1, #1
   138a8:	ldr	r3, [r5, r3]
   138ac:	ldr	r3, [r3]
   138b0:	mov	r2, r0
   138b4:	mov	r0, r6
   138b8:	bl	11514 <__fprintf_chk@plt>
   138bc:	mov	r0, r4
   138c0:	bl	1146c <exit@plt>
   138c4:	ldr	r1, [pc, #504]	; 13ac4 <__assert_fail@plt+0x24d8>
   138c8:	mov	r2, #5
   138cc:	add	r1, pc, r1
   138d0:	bl	11340 <dcgettext@plt>
   138d4:	ldr	r3, [pc, #484]	; 13ac0 <__assert_fail@plt+0x24d4>
   138d8:	ldr	r6, [r5, r3]
   138dc:	ldr	r2, [r6]
   138e0:	mov	r1, r0
   138e4:	mov	r0, #1
   138e8:	bl	114fc <__printf_chk@plt>
   138ec:	ldr	r1, [pc, #468]	; 13ac8 <__assert_fail@plt+0x24dc>
   138f0:	mov	r2, #5
   138f4:	mov	r0, r4
   138f8:	add	r1, pc, r1
   138fc:	bl	11340 <dcgettext@plt>
   13900:	ldr	r3, [pc, #452]	; 13acc <__assert_fail@plt+0x24e0>
   13904:	ldr	r5, [r5, r3]
   13908:	ldr	r1, [r5]
   1390c:	bl	11298 <fputs_unlocked@plt>
   13910:	ldr	r1, [pc, #440]	; 13ad0 <__assert_fail@plt+0x24e4>
   13914:	mov	r2, #5
   13918:	mov	r0, r4
   1391c:	add	r1, pc, r1
   13920:	bl	11340 <dcgettext@plt>
   13924:	ldr	r1, [r5]
   13928:	bl	11298 <fputs_unlocked@plt>
   1392c:	ldr	r1, [pc, #416]	; 13ad4 <__assert_fail@plt+0x24e8>
   13930:	mov	r2, #5
   13934:	mov	r0, r4
   13938:	add	r1, pc, r1
   1393c:	bl	11340 <dcgettext@plt>
   13940:	ldr	r1, [r5]
   13944:	bl	11298 <fputs_unlocked@plt>
   13948:	ldr	r1, [pc, #392]	; 13ad8 <__assert_fail@plt+0x24ec>
   1394c:	mov	r2, #5
   13950:	mov	r0, r4
   13954:	add	r1, pc, r1
   13958:	bl	11340 <dcgettext@plt>
   1395c:	ldr	r1, [r5]
   13960:	bl	11298 <fputs_unlocked@plt>
   13964:	ldr	r1, [pc, #368]	; 13adc <__assert_fail@plt+0x24f0>
   13968:	mov	r2, #5
   1396c:	mov	r0, r4
   13970:	add	r1, pc, r1
   13974:	bl	11340 <dcgettext@plt>
   13978:	ldr	r1, [r5]
   1397c:	bl	11298 <fputs_unlocked@plt>
   13980:	ldr	r1, [pc, #344]	; 13ae0 <__assert_fail@plt+0x24f4>
   13984:	mov	r2, #5
   13988:	mov	r0, r4
   1398c:	add	r1, pc, r1
   13990:	bl	11340 <dcgettext@plt>
   13994:	ldr	r1, [r5]
   13998:	bl	11298 <fputs_unlocked@plt>
   1399c:	ldr	r1, [pc, #320]	; 13ae4 <__assert_fail@plt+0x24f8>
   139a0:	mov	r2, #5
   139a4:	mov	r0, r4
   139a8:	add	r1, pc, r1
   139ac:	bl	11340 <dcgettext@plt>
   139b0:	ldr	r1, [r5]
   139b4:	bl	11298 <fputs_unlocked@plt>
   139b8:	ldr	r1, [pc, #296]	; 13ae8 <__assert_fail@plt+0x24fc>
   139bc:	mov	r2, #5
   139c0:	mov	r0, r4
   139c4:	add	r1, pc, r1
   139c8:	bl	11340 <dcgettext@plt>
   139cc:	ldr	r1, [r5]
   139d0:	bl	11298 <fputs_unlocked@plt>
   139d4:	ldr	r1, [pc, #272]	; 13aec <__assert_fail@plt+0x2500>
   139d8:	mov	r2, #5
   139dc:	mov	r0, r4
   139e0:	add	r1, pc, r1
   139e4:	bl	11340 <dcgettext@plt>
   139e8:	ldr	r1, [r5]
   139ec:	bl	11298 <fputs_unlocked@plt>
   139f0:	ldr	r1, [pc, #248]	; 13af0 <__assert_fail@plt+0x2504>
   139f4:	mov	r2, #5
   139f8:	mov	r0, r4
   139fc:	add	r1, pc, r1
   13a00:	bl	11340 <dcgettext@plt>
   13a04:	ldr	r2, [pc, #232]	; 13af4 <__assert_fail@plt+0x2508>
   13a08:	ldr	r3, [pc, #232]	; 13af8 <__assert_fail@plt+0x250c>
   13a0c:	add	r2, pc, r2
   13a10:	add	r3, pc, r3
   13a14:	mov	r1, r0
   13a18:	mov	r0, #1
   13a1c:	bl	114fc <__printf_chk@plt>
   13a20:	mov	r0, #5
   13a24:	mov	r1, r4
   13a28:	bl	11550 <setlocale@plt>
   13a2c:	cmp	r0, #0
   13a30:	beq	13a4c <__assert_fail@plt+0x2460>
   13a34:	ldr	r1, [pc, #192]	; 13afc <__assert_fail@plt+0x2510>
   13a38:	mov	r2, #3
   13a3c:	add	r1, pc, r1
   13a40:	bl	115bc <strncmp@plt>
   13a44:	cmp	r0, #0
   13a48:	bne	13a80 <__assert_fail@plt+0x2494>
   13a4c:	ldr	r1, [pc, #172]	; 13b00 <__assert_fail@plt+0x2514>
   13a50:	mov	r2, #5
   13a54:	mov	r0, #0
   13a58:	add	r1, pc, r1
   13a5c:	bl	11340 <dcgettext@plt>
   13a60:	mov	r5, r0
   13a64:	ldr	r0, [r6]
   13a68:	bl	13c48 <close_stdout@@Base+0x118>
   13a6c:	mov	r1, r5
   13a70:	mov	r2, r0
   13a74:	mov	r0, #1
   13a78:	bl	114fc <__printf_chk@plt>
   13a7c:	b	138bc <__assert_fail@plt+0x22d0>
   13a80:	ldr	r1, [pc, #124]	; 13b04 <__assert_fail@plt+0x2518>
   13a84:	mov	r2, #5
   13a88:	mov	r0, r4
   13a8c:	add	r1, pc, r1
   13a90:	bl	11340 <dcgettext@plt>
   13a94:	mov	r5, r0
   13a98:	ldr	r0, [r6]
   13a9c:	bl	13c48 <close_stdout@@Base+0x118>
   13aa0:	mov	r1, r5
   13aa4:	mov	r2, r0
   13aa8:	mov	r0, #1
   13aac:	bl	114fc <__printf_chk@plt>
   13ab0:	b	13a4c <__assert_fail@plt+0x2460>
   13ab4:	andeq	r6, r1, r0, lsl #15
   13ab8:	andeq	r0, r0, r4, asr #2
   13abc:	andeq	r5, r0, r0, lsr r2
   13ac0:	andeq	r0, r0, r4, ror #2
   13ac4:	andeq	r5, r0, r0, lsr #4
   13ac8:	andeq	r5, r0, ip, lsl r2
   13acc:	andeq	r0, r0, r8, asr r1
   13ad0:	andeq	r5, r0, r0, lsl #5
   13ad4:			; <UNDEFINED> instruction: 0x000052b0
   13ad8:	andeq	r5, r0, r0, asr r3
   13adc:	andeq	r5, r0, r8, ror r3
   13ae0:	andeq	r5, r0, r4, lsr #8
   13ae4:	andeq	r5, r0, r8, lsr r4
   13ae8:	andeq	r5, r0, r4, asr r4
   13aec:	andeq	r5, r0, r4, ror r4
   13af0:	andeq	r5, r0, r4, lsl #12
   13af4:	andeq	r5, r0, ip, lsl #12
   13af8:	andeq	r5, r0, r8, lsl r6
   13afc:	andeq	r5, r0, r4, lsl r6
   13b00:	andeq	r5, r0, r4, asr #12
   13b04:	andeq	r5, r0, r8, asr #11
   13b08:	ldr	r3, [pc, #8]	; 13b18 <__assert_fail@plt+0x252c>
   13b0c:	add	r3, pc, r3
   13b10:	str	r0, [r3]
   13b14:	bx	lr
   13b18:	andeq	r6, r1, r4, lsr #15
   13b1c:	ldr	r3, [pc, #8]	; 13b2c <__assert_fail@plt+0x2540>
   13b20:	add	r3, pc, r3
   13b24:	strb	r0, [r3, #4]
   13b28:	bx	lr
   13b2c:	muleq	r1, r0, r7

00013b30 <close_stdout@@Base>:
   13b30:	push	{r4, r5, r6, r7, lr}
   13b34:	sub	sp, sp, #12
   13b38:	ldr	r4, [pc, #228]	; 13c24 <close_stdout@@Base+0xf4>
   13b3c:	ldr	r3, [pc, #228]	; 13c28 <close_stdout@@Base+0xf8>
   13b40:	add	r4, pc, r4
   13b44:	ldr	r3, [r4, r3]
   13b48:	ldr	r0, [r3]
   13b4c:	bl	178c4 <close_stdout@@Base+0x3d94>
   13b50:	cmp	r0, #0
   13b54:	beq	13b7c <close_stdout@@Base+0x4c>
   13b58:	ldr	r3, [pc, #204]	; 13c2c <close_stdout@@Base+0xfc>
   13b5c:	add	r3, pc, r3
   13b60:	ldrb	r3, [r3, #4]
   13b64:	cmp	r3, #0
   13b68:	beq	13b9c <close_stdout@@Base+0x6c>
   13b6c:	bl	114c0 <__errno_location@plt>
   13b70:	ldr	r3, [r0]
   13b74:	cmp	r3, #32
   13b78:	bne	13b9c <close_stdout@@Base+0x6c>
   13b7c:	ldr	r3, [pc, #172]	; 13c30 <close_stdout@@Base+0x100>
   13b80:	ldr	r3, [r4, r3]
   13b84:	ldr	r0, [r3]
   13b88:	bl	178c4 <close_stdout@@Base+0x3d94>
   13b8c:	cmp	r0, #0
   13b90:	bne	13bf0 <close_stdout@@Base+0xc0>
   13b94:	add	sp, sp, #12
   13b98:	pop	{r4, r5, r6, r7, pc}
   13b9c:	ldr	r1, [pc, #144]	; 13c34 <close_stdout@@Base+0x104>
   13ba0:	mov	r0, #0
   13ba4:	mov	r2, #5
   13ba8:	add	r1, pc, r1
   13bac:	bl	11340 <dcgettext@plt>
   13bb0:	ldr	r3, [pc, #128]	; 13c38 <close_stdout@@Base+0x108>
   13bb4:	ldr	r5, [pc, r3]
   13bb8:	cmp	r5, #0
   13bbc:	mov	r6, r0
   13bc0:	beq	13c00 <close_stdout@@Base+0xd0>
   13bc4:	bl	114c0 <__errno_location@plt>
   13bc8:	ldr	r7, [r0]
   13bcc:	mov	r0, r5
   13bd0:	bl	15548 <close_stdout@@Base+0x1a18>
   13bd4:	ldr	r2, [pc, #96]	; 13c3c <close_stdout@@Base+0x10c>
   13bd8:	str	r6, [sp]
   13bdc:	mov	r1, r7
   13be0:	add	r2, pc, r2
   13be4:	mov	r3, r0
   13be8:	mov	r0, #0
   13bec:	bl	113f4 <error@plt>
   13bf0:	ldr	r3, [pc, #72]	; 13c40 <close_stdout@@Base+0x110>
   13bf4:	ldr	r3, [r4, r3]
   13bf8:	ldr	r0, [r3]
   13bfc:	bl	112ec <_exit@plt>
   13c00:	bl	114c0 <__errno_location@plt>
   13c04:	ldr	r2, [pc, #56]	; 13c44 <close_stdout@@Base+0x114>
   13c08:	add	r2, pc, r2
   13c0c:	mov	r3, r0
   13c10:	mov	r0, r5
   13c14:	ldr	r1, [r3]
   13c18:	mov	r3, r6
   13c1c:	bl	113f4 <error@plt>
   13c20:	b	13bf0 <close_stdout@@Base+0xc0>
   13c24:			; <UNDEFINED> instruction: 0x000164b8
   13c28:	andeq	r0, r0, r8, asr r1
   13c2c:	andeq	r6, r1, r4, asr r7
   13c30:	andeq	r0, r0, r4, asr #2
   13c34:	andeq	r5, r0, r0, lsl r9
   13c38:	strdeq	r6, [r1], -ip
   13c3c:	andeq	r5, r0, r4, ror #17
   13c40:	andeq	r0, r0, ip, asr r1
   13c44:	ldrdeq	r5, [r0], -r8
   13c48:	ldrb	r3, [r0]
   13c4c:	cmp	r3, #47	; 0x2f
   13c50:	bne	13c6c <close_stdout@@Base+0x13c>
   13c54:	add	r2, r0, #1
   13c58:	mov	r0, r2
   13c5c:	add	r2, r2, #1
   13c60:	ldrb	r3, [r0]
   13c64:	cmp	r3, #47	; 0x2f
   13c68:	beq	13c58 <close_stdout@@Base+0x128>
   13c6c:	cmp	r3, #0
   13c70:	bxeq	lr
   13c74:	mov	r2, r0
   13c78:	mov	r1, #0
   13c7c:	cmp	r3, #47	; 0x2f
   13c80:	moveq	r1, #1
   13c84:	beq	13c94 <close_stdout@@Base+0x164>
   13c88:	cmp	r1, #0
   13c8c:	movne	r0, r2
   13c90:	movne	r1, #0
   13c94:	ldrb	r3, [r2, #1]!
   13c98:	cmp	r3, #0
   13c9c:	bne	13c7c <close_stdout@@Base+0x14c>
   13ca0:	bx	lr
   13ca4:	push	{r4, lr}
   13ca8:	mov	r4, r0
   13cac:	bl	11484 <strlen@plt>
   13cb0:	cmp	r0, #1
   13cb4:	popls	{r4, pc}
   13cb8:	sub	r3, r0, #1
   13cbc:	ldrb	r2, [r4, r3]
   13cc0:	cmp	r2, #47	; 0x2f
   13cc4:	popne	{r4, pc}
   13cc8:	mov	r0, r3
   13ccc:	cmp	r0, #1
   13cd0:	sub	r3, r3, #1
   13cd4:	beq	13ce8 <close_stdout@@Base+0x1b8>
   13cd8:	ldrb	r2, [r4, r3]
   13cdc:	cmp	r2, #47	; 0x2f
   13ce0:	popne	{r4, pc}
   13ce4:	b	13cc8 <close_stdout@@Base+0x198>
   13ce8:	pop	{r4, pc}
   13cec:	push	{r3, r4, r5, r6, r7, lr}
   13cf0:	mov	r5, r0
   13cf4:	mov	r0, r1
   13cf8:	mov	r1, r2
   13cfc:	mov	r2, r3
   13d00:	bl	11400 <open64@plt>
   13d04:	subs	r2, r5, r0
   13d08:	mov	r4, r0
   13d0c:	rsbs	r3, r2, #0
   13d10:	adcs	r3, r3, r2
   13d14:	orrs	r3, r3, r0, lsr #31
   13d18:	bne	13d44 <close_stdout@@Base+0x214>
   13d1c:	mov	r1, r5
   13d20:	bl	11364 <dup2@plt>
   13d24:	mov	r7, r0
   13d28:	bl	114c0 <__errno_location@plt>
   13d2c:	ldr	r6, [r0]
   13d30:	mov	r5, r0
   13d34:	mov	r0, r4
   13d38:	mov	r4, r7
   13d3c:	bl	115d4 <close@plt>
   13d40:	str	r6, [r5]
   13d44:	mov	r0, r4
   13d48:	pop	{r3, r4, r5, r6, r7, pc}
   13d4c:	push	{r4, r5, r6, lr}
   13d50:	mov	r5, r1
   13d54:	bl	11598 <fopen64@plt>
   13d58:	subs	r4, r0, #0
   13d5c:	beq	13d6c <close_stdout@@Base+0x23c>
   13d60:	bl	11508 <fileno@plt>
   13d64:	cmp	r0, #2
   13d68:	bls	13d74 <close_stdout@@Base+0x244>
   13d6c:	mov	r0, r4
   13d70:	pop	{r4, r5, r6, pc}
   13d74:	bl	15708 <close_stdout@@Base+0x1bd8>
   13d78:	subs	r6, r0, #0
   13d7c:	blt	13da8 <close_stdout@@Base+0x278>
   13d80:	mov	r0, r4
   13d84:	bl	175a8 <close_stdout@@Base+0x3a78>
   13d88:	cmp	r0, #0
   13d8c:	bne	13dc8 <close_stdout@@Base+0x298>
   13d90:	mov	r1, r5
   13d94:	mov	r0, r6
   13d98:	bl	11280 <fdopen@plt>
   13d9c:	cmp	r0, #0
   13da0:	beq	13dc8 <close_stdout@@Base+0x298>
   13da4:	pop	{r4, r5, r6, pc}
   13da8:	bl	114c0 <__errno_location@plt>
   13dac:	ldr	r6, [r0]
   13db0:	mov	r5, r0
   13db4:	mov	r0, r4
   13db8:	bl	175a8 <close_stdout@@Base+0x3a78>
   13dbc:	mov	r0, #0
   13dc0:	str	r6, [r5]
   13dc4:	pop	{r4, r5, r6, pc}
   13dc8:	bl	114c0 <__errno_location@plt>
   13dcc:	ldr	r5, [r0]
   13dd0:	mov	r4, r0
   13dd4:	mov	r0, r6
   13dd8:	bl	115d4 <close@plt>
   13ddc:	mov	r0, #0
   13de0:	str	r5, [r4]
   13de4:	pop	{r4, r5, r6, pc}
   13de8:	push	{r3, r4, r5, r6, r7, lr}
   13dec:	add	r6, r2, #19
   13df0:	mov	r4, r0
   13df4:	mov	r5, r1
   13df8:	mov	r3, #0
   13dfc:	strb	r3, [r2, #20]
   13e00:	mov	r0, r4
   13e04:	mov	r1, r5
   13e08:	mov	r2, #10
   13e0c:	mov	r3, #0
   13e10:	bl	17fb8 <close_stdout@@Base+0x4488>
   13e14:	mov	r7, r6
   13e18:	mov	r0, r4
   13e1c:	mov	r1, r5
   13e20:	mov	r3, #0
   13e24:	add	ip, r2, #48	; 0x30
   13e28:	mov	r2, #10
   13e2c:	strb	ip, [r6], #-1
   13e30:	bl	17fb8 <close_stdout@@Base+0x4488>
   13e34:	mov	r4, r0
   13e38:	mov	r5, r1
   13e3c:	orrs	r3, r4, r5
   13e40:	bne	13e00 <close_stdout@@Base+0x2d0>
   13e44:	mov	r0, r7
   13e48:	pop	{r3, r4, r5, r6, r7, pc}
   13e4c:	push	{r3, r4, r5, r6, r7, lr}
   13e50:	subs	r4, r0, #0
   13e54:	ldr	r5, [pc, #172]	; 13f08 <close_stdout@@Base+0x3d8>
   13e58:	add	r5, pc, r5
   13e5c:	beq	13ee4 <close_stdout@@Base+0x3b4>
   13e60:	mov	r1, #47	; 0x2f
   13e64:	bl	11568 <strrchr@plt>
   13e68:	subs	r6, r0, #0
   13e6c:	beq	13ec8 <close_stdout@@Base+0x398>
   13e70:	add	r7, r6, #1
   13e74:	rsb	r3, r4, r7
   13e78:	cmp	r3, #6
   13e7c:	ble	13ec8 <close_stdout@@Base+0x398>
   13e80:	ldr	r1, [pc, #132]	; 13f0c <close_stdout@@Base+0x3dc>
   13e84:	sub	r0, r6, #6
   13e88:	mov	r2, #7
   13e8c:	add	r1, pc, r1
   13e90:	bl	115bc <strncmp@plt>
   13e94:	cmp	r0, #0
   13e98:	bne	13ec8 <close_stdout@@Base+0x398>
   13e9c:	ldr	r1, [pc, #108]	; 13f10 <close_stdout@@Base+0x3e0>
   13ea0:	mov	r0, r7
   13ea4:	mov	r2, #3
   13ea8:	add	r1, pc, r1
   13eac:	bl	115bc <strncmp@plt>
   13eb0:	cmp	r0, #0
   13eb4:	movne	r4, r7
   13eb8:	ldreq	r3, [pc, #84]	; 13f14 <close_stdout@@Base+0x3e4>
   13ebc:	addeq	r4, r6, #4
   13ec0:	ldreq	r3, [r5, r3]
   13ec4:	streq	r4, [r3]
   13ec8:	ldr	r2, [pc, #72]	; 13f18 <close_stdout@@Base+0x3e8>
   13ecc:	ldr	r3, [pc, #72]	; 13f1c <close_stdout@@Base+0x3ec>
   13ed0:	ldr	r2, [r5, r2]
   13ed4:	str	r4, [r2]
   13ed8:	ldr	r3, [r5, r3]
   13edc:	str	r4, [r3]
   13ee0:	pop	{r3, r4, r5, r6, r7, pc}
   13ee4:	ldr	r3, [pc, #52]	; 13f20 <close_stdout@@Base+0x3f0>
   13ee8:	mov	r1, #1
   13eec:	ldr	r0, [pc, #48]	; 13f24 <close_stdout@@Base+0x3f4>
   13ef0:	mov	r2, #55	; 0x37
   13ef4:	ldr	r3, [r5, r3]
   13ef8:	add	r0, pc, r0
   13efc:	ldr	r3, [r3]
   13f00:	bl	113ac <fwrite@plt>
   13f04:	bl	115c8 <abort@plt>
   13f08:	andeq	r6, r1, r0, lsr #3
   13f0c:	andeq	r5, r0, r8, ror r6
   13f10:	andeq	r5, r0, r4, ror #12
   13f14:	andeq	r0, r0, ip, ror #2
   13f18:	andeq	r0, r0, r4, ror #2
   13f1c:	andeq	r0, r0, r0, ror #2
   13f20:	andeq	r0, r0, r4, asr #2
   13f24:	ldrdeq	r5, [r0], -r4
   13f28:	push	{r3, lr}
   13f2c:	mov	r3, r0
   13f30:	mov	r2, #0
   13f34:	cmp	r1, #8
   13f38:	str	r2, [r3], #4
   13f3c:	add	r3, r3, #4
   13f40:	str	r2, [r0, #4]
   13f44:	str	r2, [r3], #4
   13f48:	str	r2, [r3], #4
   13f4c:	str	r2, [r3], #4
   13f50:	str	r2, [r3], #4
   13f54:	str	r2, [r3], #4
   13f58:	str	r2, [r3], #4
   13f5c:	str	r2, [r3], #4
   13f60:	str	r2, [r3], #4
   13f64:	str	r2, [r3], #4
   13f68:	str	r2, [r3]
   13f6c:	beq	13f78 <close_stdout@@Base+0x448>
   13f70:	str	r1, [r0]
   13f74:	pop	{r3, pc}
   13f78:	bl	115c8 <abort@plt>
   13f7c:	push	{r4, r5, r6, lr}
   13f80:	mov	r4, r0
   13f84:	mov	r6, r1
   13f88:	mov	r0, #0
   13f8c:	mov	r1, r4
   13f90:	mov	r2, #5
   13f94:	bl	11340 <dcgettext@plt>
   13f98:	cmp	r0, r4
   13f9c:	mov	r5, r0
   13fa0:	beq	13fa8 <close_stdout@@Base+0x478>
   13fa4:	pop	{r4, r5, r6, pc}
   13fa8:	bl	17944 <close_stdout@@Base+0x3e14>
   13fac:	ldrb	r3, [r0]
   13fb0:	bic	r3, r3, #32
   13fb4:	cmp	r3, #85	; 0x55
   13fb8:	bne	1402c <close_stdout@@Base+0x4fc>
   13fbc:	ldrb	r3, [r0, #1]
   13fc0:	bic	r3, r3, #32
   13fc4:	cmp	r3, #84	; 0x54
   13fc8:	bne	14018 <close_stdout@@Base+0x4e8>
   13fcc:	ldrb	r3, [r0, #2]
   13fd0:	bic	r3, r3, #32
   13fd4:	cmp	r3, #70	; 0x46
   13fd8:	bne	14018 <close_stdout@@Base+0x4e8>
   13fdc:	ldrb	r3, [r0, #3]
   13fe0:	cmp	r3, #45	; 0x2d
   13fe4:	bne	14018 <close_stdout@@Base+0x4e8>
   13fe8:	ldrb	r3, [r0, #4]
   13fec:	cmp	r3, #56	; 0x38
   13ff0:	bne	14018 <close_stdout@@Base+0x4e8>
   13ff4:	ldrb	r3, [r0, #5]
   13ff8:	cmp	r3, #0
   13ffc:	bne	14018 <close_stdout@@Base+0x4e8>
   14000:	ldrb	r3, [r5]
   14004:	cmp	r3, #96	; 0x60
   14008:	beq	140a4 <close_stdout@@Base+0x574>
   1400c:	ldr	r0, [pc, #180]	; 140c8 <close_stdout@@Base+0x598>
   14010:	add	r0, pc, r0
   14014:	pop	{r4, r5, r6, pc}
   14018:	cmp	r6, #7
   1401c:	beq	140b0 <close_stdout@@Base+0x580>
   14020:	ldr	r0, [pc, #164]	; 140cc <close_stdout@@Base+0x59c>
   14024:	add	r0, pc, r0
   14028:	pop	{r4, r5, r6, pc}
   1402c:	cmp	r3, #71	; 0x47
   14030:	bne	14018 <close_stdout@@Base+0x4e8>
   14034:	ldrb	r3, [r0, #1]
   14038:	bic	r3, r3, #32
   1403c:	cmp	r3, #66	; 0x42
   14040:	bne	14018 <close_stdout@@Base+0x4e8>
   14044:	ldrb	r3, [r0, #2]
   14048:	cmp	r3, #49	; 0x31
   1404c:	bne	14018 <close_stdout@@Base+0x4e8>
   14050:	ldrb	r3, [r0, #3]
   14054:	cmp	r3, #56	; 0x38
   14058:	bne	14018 <close_stdout@@Base+0x4e8>
   1405c:	ldrb	r3, [r0, #4]
   14060:	cmp	r3, #48	; 0x30
   14064:	bne	14018 <close_stdout@@Base+0x4e8>
   14068:	ldrb	r3, [r0, #5]
   1406c:	cmp	r3, #51	; 0x33
   14070:	bne	14018 <close_stdout@@Base+0x4e8>
   14074:	ldrb	r3, [r0, #6]
   14078:	cmp	r3, #48	; 0x30
   1407c:	bne	14018 <close_stdout@@Base+0x4e8>
   14080:	ldrb	r3, [r0, #7]
   14084:	cmp	r3, #0
   14088:	bne	14018 <close_stdout@@Base+0x4e8>
   1408c:	ldrb	r3, [r5]
   14090:	cmp	r3, #96	; 0x60
   14094:	beq	140bc <close_stdout@@Base+0x58c>
   14098:	ldr	r0, [pc, #48]	; 140d0 <close_stdout@@Base+0x5a0>
   1409c:	add	r0, pc, r0
   140a0:	pop	{r4, r5, r6, pc}
   140a4:	ldr	r0, [pc, #40]	; 140d4 <close_stdout@@Base+0x5a4>
   140a8:	add	r0, pc, r0
   140ac:	pop	{r4, r5, r6, pc}
   140b0:	ldr	r0, [pc, #32]	; 140d8 <close_stdout@@Base+0x5a8>
   140b4:	add	r0, pc, r0
   140b8:	pop	{r4, r5, r6, pc}
   140bc:	ldr	r0, [pc, #24]	; 140dc <close_stdout@@Base+0x5ac>
   140c0:	add	r0, pc, r0
   140c4:	pop	{r4, r5, r6, pc}
   140c8:	andeq	r5, r0, r0, lsr #10
   140cc:	strdeq	r5, [r0], -r0
   140d0:	muleq	r0, r8, r4
   140d4:	muleq	r0, r8, r4
   140d8:	andeq	r5, r0, r4, lsl #9
   140dc:	andeq	r5, r0, ip, ror r4
   140e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140e4:	sub	sp, sp, #124	; 0x7c
   140e8:	ldr	ip, [pc, #3304]	; 14dd8 <close_stdout@@Base+0x12a8>
   140ec:	mov	sl, r1
   140f0:	str	r0, [sp, #40]	; 0x28
   140f4:	mov	r8, r3
   140f8:	ldr	r0, [pc, #3292]	; 14ddc <close_stdout@@Base+0x12ac>
   140fc:	add	ip, pc, ip
   14100:	str	r2, [sp, #32]
   14104:	ldr	r1, [sp, #164]	; 0xa4
   14108:	mov	r3, ip
   1410c:	ldr	r0, [ip, r0]
   14110:	ldr	r2, [sp, #172]	; 0xac
   14114:	ubfx	r1, r1, #1, #1
   14118:	str	r1, [sp, #36]	; 0x24
   1411c:	str	r0, [sp, #56]	; 0x38
   14120:	ldr	r0, [sp, #168]	; 0xa8
   14124:	ldr	r1, [sp, #176]	; 0xb0
   14128:	str	r2, [sp, #72]	; 0x48
   1412c:	str	r0, [sp, #48]	; 0x30
   14130:	ldr	r0, [sp, #56]	; 0x38
   14134:	str	r1, [sp, #68]	; 0x44
   14138:	ldr	r3, [r0]
   1413c:	str	r3, [sp, #116]	; 0x74
   14140:	bl	113c4 <__ctype_get_mb_cur_max@plt>
   14144:	ldr	r2, [sp, #160]	; 0xa0
   14148:	str	r0, [sp, #64]	; 0x40
   1414c:	cmp	r2, #8
   14150:	addls	pc, pc, r2, lsl #2
   14154:	b	14cb4 <close_stdout@@Base+0x1184>
   14158:	b	1417c <close_stdout@@Base+0x64c>
   1415c:	b	149cc <close_stdout@@Base+0xe9c>
   14160:	b	149fc <close_stdout@@Base+0xecc>
   14164:	b	148ac <close_stdout@@Base+0xd7c>
   14168:	b	148ec <close_stdout@@Base+0xdbc>
   1416c:	b	14918 <close_stdout@@Base+0xde8>
   14170:	b	14938 <close_stdout@@Base+0xe08>
   14174:	b	14938 <close_stdout@@Base+0xe08>
   14178:	b	14938 <close_stdout@@Base+0xe08>
   1417c:	mov	r2, #0
   14180:	str	r2, [sp, #36]	; 0x24
   14184:	mov	r9, r2
   14188:	str	r2, [sp, #24]
   1418c:	str	r2, [sp, #28]
   14190:	str	r2, [sp, #52]	; 0x34
   14194:	ldr	r0, [sp, #36]	; 0x24
   14198:	mov	fp, #0
   1419c:	ldr	r1, [sp, #24]
   141a0:	eor	r2, r0, #1
   141a4:	eor	r3, r1, #1
   141a8:	and	r3, r2, r3
   141ac:	and	r2, r1, r0
   141b0:	str	r3, [sp, #44]	; 0x2c
   141b4:	str	r2, [sp, #76]	; 0x4c
   141b8:	cmn	r8, #1
   141bc:	beq	1453c <close_stdout@@Base+0xa0c>
   141c0:	subs	r3, fp, r8
   141c4:	movne	r3, #1
   141c8:	cmp	r3, #0
   141cc:	beq	14554 <close_stdout@@Base+0xa24>
   141d0:	ldr	r3, [sp, #28]
   141d4:	ldr	r0, [sp, #24]
   141d8:	adds	r7, r3, #0
   141dc:	movne	r7, #1
   141e0:	ands	r6, r7, r0
   141e4:	bne	14a40 <close_stdout@@Base+0xf10>
   141e8:	ldr	r1, [sp, #32]
   141ec:	add	r5, r1, fp
   141f0:	ldrb	r4, [r5]
   141f4:	cmp	r4, #126	; 0x7e
   141f8:	addls	pc, pc, r4, lsl #2
   141fc:	b	147c0 <close_stdout@@Base+0xc90>
   14200:	b	146cc <close_stdout@@Base+0xb9c>
   14204:	b	147c0 <close_stdout@@Base+0xc90>
   14208:	b	147c0 <close_stdout@@Base+0xc90>
   1420c:	b	147c0 <close_stdout@@Base+0xc90>
   14210:	b	147c0 <close_stdout@@Base+0xc90>
   14214:	b	147c0 <close_stdout@@Base+0xc90>
   14218:	b	147c0 <close_stdout@@Base+0xc90>
   1421c:	b	146b4 <close_stdout@@Base+0xb84>
   14220:	b	1469c <close_stdout@@Base+0xb6c>
   14224:	b	146c4 <close_stdout@@Base+0xb94>
   14228:	b	146bc <close_stdout@@Base+0xb8c>
   1422c:	b	146ac <close_stdout@@Base+0xb7c>
   14230:	b	146a4 <close_stdout@@Base+0xb74>
   14234:	b	14668 <close_stdout@@Base+0xb38>
   14238:	b	147c0 <close_stdout@@Base+0xc90>
   1423c:	b	147c0 <close_stdout@@Base+0xc90>
   14240:	b	147c0 <close_stdout@@Base+0xc90>
   14244:	b	147c0 <close_stdout@@Base+0xc90>
   14248:	b	147c0 <close_stdout@@Base+0xc90>
   1424c:	b	147c0 <close_stdout@@Base+0xc90>
   14250:	b	147c0 <close_stdout@@Base+0xc90>
   14254:	b	147c0 <close_stdout@@Base+0xc90>
   14258:	b	147c0 <close_stdout@@Base+0xc90>
   1425c:	b	147c0 <close_stdout@@Base+0xc90>
   14260:	b	147c0 <close_stdout@@Base+0xc90>
   14264:	b	147c0 <close_stdout@@Base+0xc90>
   14268:	b	147c0 <close_stdout@@Base+0xc90>
   1426c:	b	147c0 <close_stdout@@Base+0xc90>
   14270:	b	147c0 <close_stdout@@Base+0xc90>
   14274:	b	147c0 <close_stdout@@Base+0xc90>
   14278:	b	147c0 <close_stdout@@Base+0xc90>
   1427c:	b	147c0 <close_stdout@@Base+0xc90>
   14280:	b	145f4 <close_stdout@@Base+0xac4>
   14284:	b	145f4 <close_stdout@@Base+0xac4>
   14288:	b	145f4 <close_stdout@@Base+0xac4>
   1428c:	b	145ec <close_stdout@@Base+0xabc>
   14290:	b	145f4 <close_stdout@@Base+0xac4>
   14294:	b	144c8 <close_stdout@@Base+0x998>
   14298:	b	145f4 <close_stdout@@Base+0xac4>
   1429c:	b	14768 <close_stdout@@Base+0xc38>
   142a0:	b	145f4 <close_stdout@@Base+0xac4>
   142a4:	b	145f4 <close_stdout@@Base+0xac4>
   142a8:	b	145f4 <close_stdout@@Base+0xac4>
   142ac:	b	144c8 <close_stdout@@Base+0x998>
   142b0:	b	144c8 <close_stdout@@Base+0x998>
   142b4:	b	144c8 <close_stdout@@Base+0x998>
   142b8:	b	144c8 <close_stdout@@Base+0x998>
   142bc:	b	144c8 <close_stdout@@Base+0x998>
   142c0:	b	144c8 <close_stdout@@Base+0x998>
   142c4:	b	144c8 <close_stdout@@Base+0x998>
   142c8:	b	144c8 <close_stdout@@Base+0x998>
   142cc:	b	144c8 <close_stdout@@Base+0x998>
   142d0:	b	144c8 <close_stdout@@Base+0x998>
   142d4:	b	144c8 <close_stdout@@Base+0x998>
   142d8:	b	144c8 <close_stdout@@Base+0x998>
   142dc:	b	144c8 <close_stdout@@Base+0x998>
   142e0:	b	144c8 <close_stdout@@Base+0x998>
   142e4:	b	144c8 <close_stdout@@Base+0x998>
   142e8:	b	144c8 <close_stdout@@Base+0x998>
   142ec:	b	145f4 <close_stdout@@Base+0xac4>
   142f0:	b	145f4 <close_stdout@@Base+0xac4>
   142f4:	b	145f4 <close_stdout@@Base+0xac4>
   142f8:	b	145f4 <close_stdout@@Base+0xac4>
   142fc:	b	143fc <close_stdout@@Base+0x8cc>
   14300:	b	147c0 <close_stdout@@Base+0xc90>
   14304:	b	144c8 <close_stdout@@Base+0x998>
   14308:	b	144c8 <close_stdout@@Base+0x998>
   1430c:	b	144c8 <close_stdout@@Base+0x998>
   14310:	b	144c8 <close_stdout@@Base+0x998>
   14314:	b	144c8 <close_stdout@@Base+0x998>
   14318:	b	144c8 <close_stdout@@Base+0x998>
   1431c:	b	144c8 <close_stdout@@Base+0x998>
   14320:	b	144c8 <close_stdout@@Base+0x998>
   14324:	b	144c8 <close_stdout@@Base+0x998>
   14328:	b	144c8 <close_stdout@@Base+0x998>
   1432c:	b	144c8 <close_stdout@@Base+0x998>
   14330:	b	144c8 <close_stdout@@Base+0x998>
   14334:	b	144c8 <close_stdout@@Base+0x998>
   14338:	b	144c8 <close_stdout@@Base+0x998>
   1433c:	b	144c8 <close_stdout@@Base+0x998>
   14340:	b	144c8 <close_stdout@@Base+0x998>
   14344:	b	144c8 <close_stdout@@Base+0x998>
   14348:	b	144c8 <close_stdout@@Base+0x998>
   1434c:	b	144c8 <close_stdout@@Base+0x998>
   14350:	b	144c8 <close_stdout@@Base+0x998>
   14354:	b	144c8 <close_stdout@@Base+0x998>
   14358:	b	144c8 <close_stdout@@Base+0x998>
   1435c:	b	144c8 <close_stdout@@Base+0x998>
   14360:	b	144c8 <close_stdout@@Base+0x998>
   14364:	b	144c8 <close_stdout@@Base+0x998>
   14368:	b	144c8 <close_stdout@@Base+0x998>
   1436c:	b	145f4 <close_stdout@@Base+0xac4>
   14370:	b	1474c <close_stdout@@Base+0xc1c>
   14374:	b	144c8 <close_stdout@@Base+0x998>
   14378:	b	145f4 <close_stdout@@Base+0xac4>
   1437c:	b	144c8 <close_stdout@@Base+0x998>
   14380:	b	145f4 <close_stdout@@Base+0xac4>
   14384:	b	144c8 <close_stdout@@Base+0x998>
   14388:	b	144c8 <close_stdout@@Base+0x998>
   1438c:	b	144c8 <close_stdout@@Base+0x998>
   14390:	b	144c8 <close_stdout@@Base+0x998>
   14394:	b	144c8 <close_stdout@@Base+0x998>
   14398:	b	144c8 <close_stdout@@Base+0x998>
   1439c:	b	144c8 <close_stdout@@Base+0x998>
   143a0:	b	144c8 <close_stdout@@Base+0x998>
   143a4:	b	144c8 <close_stdout@@Base+0x998>
   143a8:	b	144c8 <close_stdout@@Base+0x998>
   143ac:	b	144c8 <close_stdout@@Base+0x998>
   143b0:	b	144c8 <close_stdout@@Base+0x998>
   143b4:	b	144c8 <close_stdout@@Base+0x998>
   143b8:	b	144c8 <close_stdout@@Base+0x998>
   143bc:	b	144c8 <close_stdout@@Base+0x998>
   143c0:	b	144c8 <close_stdout@@Base+0x998>
   143c4:	b	144c8 <close_stdout@@Base+0x998>
   143c8:	b	144c8 <close_stdout@@Base+0x998>
   143cc:	b	144c8 <close_stdout@@Base+0x998>
   143d0:	b	144c8 <close_stdout@@Base+0x998>
   143d4:	b	144c8 <close_stdout@@Base+0x998>
   143d8:	b	144c8 <close_stdout@@Base+0x998>
   143dc:	b	144c8 <close_stdout@@Base+0x998>
   143e0:	b	144c8 <close_stdout@@Base+0x998>
   143e4:	b	144c8 <close_stdout@@Base+0x998>
   143e8:	b	144c8 <close_stdout@@Base+0x998>
   143ec:	b	145d4 <close_stdout@@Base+0xaa4>
   143f0:	b	145f4 <close_stdout@@Base+0xac4>
   143f4:	b	145d4 <close_stdout@@Base+0xaa4>
   143f8:	b	145ec <close_stdout@@Base+0xabc>
   143fc:	ldr	r3, [sp, #160]	; 0xa0
   14400:	cmp	r3, #2
   14404:	beq	14c90 <close_stdout@@Base+0x1160>
   14408:	cmp	r3, #3
   1440c:	bne	144c8 <close_stdout@@Base+0x998>
   14410:	ldr	r1, [sp, #164]	; 0xa4
   14414:	tst	r1, #4
   14418:	beq	144c8 <close_stdout@@Base+0x998>
   1441c:	add	r3, fp, #2
   14420:	cmp	r8, r3
   14424:	bls	144c8 <close_stdout@@Base+0x998>
   14428:	ldrb	r2, [r5, #1]
   1442c:	mov	r1, #1
   14430:	cmp	r2, #63	; 0x3f
   14434:	bne	144c8 <close_stdout@@Base+0x998>
   14438:	ldr	r0, [sp, #32]
   1443c:	ldrb	ip, [r0, r3]
   14440:	sub	r0, ip, #33	; 0x21
   14444:	uxtb	r0, r0
   14448:	cmp	r0, #29
   1444c:	bhi	144c8 <close_stdout@@Base+0x998>
   14450:	lsl	r1, r1, r0
   14454:	movw	r0, #20929	; 0x51c1
   14458:	movt	r0, #14336	; 0x3800
   1445c:	and	r0, r1, r0
   14460:	cmp	r0, #0
   14464:	beq	144c8 <close_stdout@@Base+0x998>
   14468:	ldr	r1, [sp, #36]	; 0x24
   1446c:	cmp	r1, #0
   14470:	bne	14610 <close_stdout@@Base+0xae0>
   14474:	cmp	r9, sl
   14478:	mov	r4, ip
   1447c:	mov	fp, r3
   14480:	ldrcc	r0, [sp, #40]	; 0x28
   14484:	strbcc	r2, [r0, r9]
   14488:	add	r2, r9, #1
   1448c:	cmp	sl, r2
   14490:	ldrhi	r0, [sp, #40]	; 0x28
   14494:	movhi	r1, #34	; 0x22
   14498:	strbhi	r1, [r0, r2]
   1449c:	add	r2, r9, #2
   144a0:	cmp	sl, r2
   144a4:	ldrhi	r0, [sp, #40]	; 0x28
   144a8:	movhi	r1, #34	; 0x22
   144ac:	strbhi	r1, [r0, r2]
   144b0:	add	r2, r9, #3
   144b4:	cmp	sl, r2
   144b8:	add	r9, r9, #4
   144bc:	ldrhi	r0, [sp, #40]	; 0x28
   144c0:	movhi	r1, #63	; 0x3f
   144c4:	strbhi	r1, [r0, r2]
   144c8:	ldr	r0, [sp, #44]	; 0x2c
   144cc:	cmp	r0, #0
   144d0:	bne	144f8 <close_stdout@@Base+0x9c8>
   144d4:	ldr	r1, [sp, #48]	; 0x30
   144d8:	cmp	r1, #0
   144dc:	beq	144f8 <close_stdout@@Base+0x9c8>
   144e0:	ubfx	r2, r4, #5, #8
   144e4:	and	r3, r4, #31
   144e8:	ldr	r2, [r1, r2, lsl #2]
   144ec:	lsr	r3, r2, r3
   144f0:	tst	r3, #1
   144f4:	bne	14500 <close_stdout@@Base+0x9d0>
   144f8:	cmp	r6, #0
   144fc:	beq	14520 <close_stdout@@Base+0x9f0>
   14500:	ldr	r2, [sp, #36]	; 0x24
   14504:	cmp	r2, #0
   14508:	bne	14610 <close_stdout@@Base+0xae0>
   1450c:	cmp	r9, sl
   14510:	ldrcc	r0, [sp, #40]	; 0x28
   14514:	movcc	r3, #92	; 0x5c
   14518:	strbcc	r3, [r0, r9]
   1451c:	add	r9, r9, #1
   14520:	add	fp, fp, #1
   14524:	cmp	r9, sl
   14528:	ldrcc	r1, [sp, #40]	; 0x28
   1452c:	strbcc	r4, [r1, r9]
   14530:	cmn	r8, #1
   14534:	add	r9, r9, #1
   14538:	bne	141c0 <close_stdout@@Base+0x690>
   1453c:	ldr	r2, [sp, #32]
   14540:	ldrb	r3, [r2, fp]
   14544:	adds	r3, r3, #0
   14548:	movne	r3, #1
   1454c:	cmp	r3, #0
   14550:	bne	141d0 <close_stdout@@Base+0x6a0>
   14554:	ldr	r3, [sp, #160]	; 0xa0
   14558:	cmp	r9, #0
   1455c:	cmpeq	r3, #2
   14560:	bne	14570 <close_stdout@@Base+0xa40>
   14564:	ldr	r0, [sp, #36]	; 0x24
   14568:	cmp	r0, #0
   1456c:	bne	14610 <close_stdout@@Base+0xae0>
   14570:	ldr	r1, [sp, #36]	; 0x24
   14574:	ldr	r2, [sp, #52]	; 0x34
   14578:	eor	r3, r1, #1
   1457c:	cmp	r2, #0
   14580:	moveq	r3, #0
   14584:	andne	r3, r3, #1
   14588:	cmp	r3, #0
   1458c:	beq	145b8 <close_stdout@@Base+0xa88>
   14590:	ldrb	r3, [r2]
   14594:	cmp	r3, #0
   14598:	beq	145b8 <close_stdout@@Base+0xa88>
   1459c:	ldr	r1, [sp, #40]	; 0x28
   145a0:	cmp	sl, r9
   145a4:	strbhi	r3, [r1, r9]
   145a8:	ldrb	r3, [r2, #1]!
   145ac:	add	r9, r9, #1
   145b0:	cmp	r3, #0
   145b4:	bne	145a0 <close_stdout@@Base+0xa70>
   145b8:	cmp	r9, sl
   145bc:	movcs	r0, r9
   145c0:	ldrcc	r1, [sp, #40]	; 0x28
   145c4:	movcc	r3, #0
   145c8:	movcc	r0, r9
   145cc:	strbcc	r3, [r1, r9]
   145d0:	b	1464c <close_stdout@@Base+0xb1c>
   145d4:	cmn	r8, #1
   145d8:	beq	14ca0 <close_stdout@@Base+0x1170>
   145dc:	subs	r3, r8, #1
   145e0:	movne	r3, #1
   145e4:	cmp	r3, #0
   145e8:	bne	144c8 <close_stdout@@Base+0x998>
   145ec:	cmp	fp, #0
   145f0:	bne	144c8 <close_stdout@@Base+0x998>
   145f4:	ldr	r3, [sp, #36]	; 0x24
   145f8:	ldr	r0, [sp, #160]	; 0xa0
   145fc:	cmp	r0, #2
   14600:	movne	r3, #0
   14604:	andeq	r3, r3, #1
   14608:	cmp	r3, #0
   1460c:	beq	144c8 <close_stdout@@Base+0x998>
   14610:	ldr	r2, [sp, #164]	; 0xa4
   14614:	mov	ip, #0
   14618:	ldr	r0, [sp, #160]	; 0xa0
   1461c:	bic	r3, r2, #2
   14620:	ldr	r1, [sp, #72]	; 0x48
   14624:	ldr	r2, [sp, #68]	; 0x44
   14628:	stm	sp, {r0, r3}
   1462c:	mov	r3, r8
   14630:	str	r1, [sp, #12]
   14634:	mov	r1, sl
   14638:	str	r2, [sp, #16]
   1463c:	ldr	r0, [sp, #40]	; 0x28
   14640:	ldr	r2, [sp, #32]
   14644:	str	ip, [sp, #8]
   14648:	bl	140e0 <close_stdout@@Base+0x5b0>
   1464c:	ldr	r1, [sp, #56]	; 0x38
   14650:	ldr	r2, [sp, #116]	; 0x74
   14654:	ldr	r3, [r1]
   14658:	cmp	r2, r3
   1465c:	bne	14d90 <close_stdout@@Base+0x1260>
   14660:	add	sp, sp, #124	; 0x7c
   14664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14668:	mov	r3, #114	; 0x72
   1466c:	ldr	r2, [sp, #36]	; 0x24
   14670:	ldr	r0, [sp, #160]	; 0xa0
   14674:	cmp	r0, #2
   14678:	movne	r2, #0
   1467c:	andeq	r2, r2, #1
   14680:	cmp	r2, #0
   14684:	bne	14610 <close_stdout@@Base+0xae0>
   14688:	ldr	r1, [sp, #24]
   1468c:	cmp	r1, #0
   14690:	beq	144c8 <close_stdout@@Base+0x998>
   14694:	mov	r4, r3
   14698:	b	14500 <close_stdout@@Base+0x9d0>
   1469c:	mov	r3, #98	; 0x62
   146a0:	b	14688 <close_stdout@@Base+0xb58>
   146a4:	mov	r3, #102	; 0x66
   146a8:	b	14688 <close_stdout@@Base+0xb58>
   146ac:	mov	r3, #118	; 0x76
   146b0:	b	14688 <close_stdout@@Base+0xb58>
   146b4:	mov	r3, #97	; 0x61
   146b8:	b	14688 <close_stdout@@Base+0xb58>
   146bc:	mov	r3, #110	; 0x6e
   146c0:	b	1466c <close_stdout@@Base+0xb3c>
   146c4:	mov	r3, #116	; 0x74
   146c8:	b	1466c <close_stdout@@Base+0xb3c>
   146cc:	ldr	r2, [sp, #24]
   146d0:	cmp	r2, #0
   146d4:	beq	14c7c <close_stdout@@Base+0x114c>
   146d8:	ldr	r3, [sp, #36]	; 0x24
   146dc:	cmp	r3, #0
   146e0:	bne	14610 <close_stdout@@Base+0xae0>
   146e4:	cmp	r9, sl
   146e8:	add	r2, r9, #1
   146ec:	ldrcc	r0, [sp, #40]	; 0x28
   146f0:	movcc	r3, #92	; 0x5c
   146f4:	strbcc	r3, [r0, r9]
   146f8:	add	r3, fp, #1
   146fc:	cmp	r8, r3
   14700:	bls	14740 <close_stdout@@Base+0xc10>
   14704:	ldr	r1, [sp, #32]
   14708:	ldrb	r3, [r1, r3]
   1470c:	sub	r3, r3, #48	; 0x30
   14710:	cmp	r3, #9
   14714:	bhi	14740 <close_stdout@@Base+0xc10>
   14718:	cmp	sl, r2
   1471c:	ldrhi	r0, [sp, #40]	; 0x28
   14720:	movhi	r3, #48	; 0x30
   14724:	strbhi	r3, [r0, r2]
   14728:	add	r3, r9, #2
   1472c:	cmp	sl, r3
   14730:	ldrhi	r1, [sp, #40]	; 0x28
   14734:	movhi	r2, #48	; 0x30
   14738:	strbhi	r2, [r1, r3]
   1473c:	add	r2, r9, #3
   14740:	mov	r9, r2
   14744:	mov	r4, #48	; 0x30
   14748:	b	144d4 <close_stdout@@Base+0x9a4>
   1474c:	ldr	r1, [sp, #76]	; 0x4c
   14750:	cmp	r1, #0
   14754:	beq	14760 <close_stdout@@Base+0xc30>
   14758:	cmp	r7, #0
   1475c:	bne	14520 <close_stdout@@Base+0x9f0>
   14760:	mov	r3, r4
   14764:	b	1466c <close_stdout@@Base+0xb3c>
   14768:	ldr	r1, [sp, #160]	; 0xa0
   1476c:	cmp	r1, #2
   14770:	bne	144c8 <close_stdout@@Base+0x998>
   14774:	ldr	r2, [sp, #36]	; 0x24
   14778:	cmp	r2, #0
   1477c:	bne	14610 <close_stdout@@Base+0xae0>
   14780:	cmp	r9, sl
   14784:	ldrcc	r0, [sp, #40]	; 0x28
   14788:	movcc	r3, #39	; 0x27
   1478c:	strbcc	r3, [r0, r9]
   14790:	add	r3, r9, #1
   14794:	cmp	sl, r3
   14798:	ldrhi	r1, [sp, #40]	; 0x28
   1479c:	movhi	r2, #92	; 0x5c
   147a0:	strbhi	r2, [r1, r3]
   147a4:	add	r3, r9, #2
   147a8:	cmp	sl, r3
   147ac:	add	r9, r9, #3
   147b0:	ldrhi	r0, [sp, #40]	; 0x28
   147b4:	movhi	r2, #39	; 0x27
   147b8:	strbhi	r2, [r0, r3]
   147bc:	b	144c8 <close_stdout@@Base+0x998>
   147c0:	ldr	r1, [sp, #64]	; 0x40
   147c4:	cmp	r1, #1
   147c8:	bne	14ac0 <close_stdout@@Base+0xf90>
   147cc:	bl	11460 <__ctype_b_loc@plt>
   147d0:	ldr	r2, [sp, #64]	; 0x40
   147d4:	sxth	r3, r4
   147d8:	str	r2, [sp, #60]	; 0x3c
   147dc:	lsl	r3, r3, #1
   147e0:	ldr	r2, [r0]
   147e4:	ldrh	r2, [r2, r3]
   147e8:	eor	r2, r2, #16384	; 0x4000
   147ec:	ubfx	r2, r2, #14, #1
   147f0:	ldr	r1, [sp, #24]
   147f4:	ands	r2, r2, r1
   147f8:	beq	144c8 <close_stdout@@Base+0x998>
   147fc:	ldr	r3, [sp, #60]	; 0x3c
   14800:	mov	r0, #92	; 0x5c
   14804:	ldr	r7, [sp, #36]	; 0x24
   14808:	add	r1, r3, fp
   1480c:	str	r8, [sp, #60]	; 0x3c
   14810:	ldr	r3, [sp, #40]	; 0x28
   14814:	b	14878 <close_stdout@@Base+0xd48>
   14818:	cmp	r7, #0
   1481c:	bne	14cb8 <close_stdout@@Base+0x1188>
   14820:	add	ip, r9, #1
   14824:	cmp	r9, sl
   14828:	strbcc	r0, [r3, r9]
   1482c:	cmp	sl, ip
   14830:	lsrhi	r8, r4, #6
   14834:	addhi	r8, r8, #48	; 0x30
   14838:	strbhi	r8, [r3, ip]
   1483c:	add	ip, r9, #2
   14840:	add	r9, r9, #3
   14844:	cmp	sl, ip
   14848:	ubfxhi	r8, r4, #3, #3
   1484c:	and	r4, r4, #7
   14850:	add	r4, r4, #48	; 0x30
   14854:	addhi	r8, r8, #48	; 0x30
   14858:	strbhi	r8, [r3, ip]
   1485c:	add	fp, fp, #1
   14860:	cmp	r1, fp
   14864:	bls	148a4 <close_stdout@@Base+0xd74>
   14868:	cmp	r9, sl
   1486c:	strbcc	r4, [r3, r9]
   14870:	ldrb	r4, [r5, #1]!
   14874:	add	r9, r9, #1
   14878:	cmp	r2, #0
   1487c:	bne	14818 <close_stdout@@Base+0xce8>
   14880:	cmp	r6, #0
   14884:	beq	1485c <close_stdout@@Base+0xd2c>
   14888:	add	fp, fp, #1
   1488c:	cmp	r9, sl
   14890:	strbcc	r0, [r3, r9]
   14894:	cmp	r1, fp
   14898:	add	r9, r9, #1
   1489c:	mov	r6, #0
   148a0:	bhi	14868 <close_stdout@@Base+0xd38>
   148a4:	ldr	r8, [sp, #60]	; 0x3c
   148a8:	b	14524 <close_stdout@@Base+0x9f4>
   148ac:	ldr	r3, [sp, #36]	; 0x24
   148b0:	cmp	r3, #0
   148b4:	bne	14db8 <close_stdout@@Base+0x1288>
   148b8:	cmp	sl, #0
   148bc:	beq	14cd0 <close_stdout@@Base+0x11a0>
   148c0:	ldr	r1, [sp, #40]	; 0x28
   148c4:	mov	r0, #1
   148c8:	ldr	r2, [pc, #1296]	; 14de0 <close_stdout@@Base+0x12b0>
   148cc:	mov	r3, #34	; 0x22
   148d0:	str	r0, [sp, #24]
   148d4:	mov	r9, r0
   148d8:	add	r2, pc, r2
   148dc:	str	r0, [sp, #28]
   148e0:	strb	r3, [r1]
   148e4:	str	r2, [sp, #52]	; 0x34
   148e8:	b	14194 <close_stdout@@Base+0x664>
   148ec:	ldr	r3, [pc, #1264]	; 14de4 <close_stdout@@Base+0x12b4>
   148f0:	mov	r2, #1
   148f4:	mov	r0, #3
   148f8:	str	r2, [sp, #36]	; 0x24
   148fc:	add	r3, pc, r3
   14900:	str	r2, [sp, #24]
   14904:	str	r3, [sp, #52]	; 0x34
   14908:	mov	r9, #0
   1490c:	str	r2, [sp, #28]
   14910:	str	r0, [sp, #160]	; 0xa0
   14914:	b	14194 <close_stdout@@Base+0x664>
   14918:	mov	r0, #0
   1491c:	mov	r1, #1
   14920:	str	r0, [sp, #36]	; 0x24
   14924:	mov	r9, r0
   14928:	str	r1, [sp, #24]
   1492c:	str	r0, [sp, #28]
   14930:	str	r0, [sp, #52]	; 0x34
   14934:	b	14194 <close_stdout@@Base+0x664>
   14938:	ldr	r3, [sp, #160]	; 0xa0
   1493c:	cmp	r3, #8
   14940:	beq	1496c <close_stdout@@Base+0xe3c>
   14944:	ldr	r0, [pc, #1180]	; 14de8 <close_stdout@@Base+0x12b8>
   14948:	mov	r1, r3
   1494c:	add	r0, pc, r0
   14950:	bl	13f7c <close_stdout@@Base+0x44c>
   14954:	ldr	r1, [sp, #160]	; 0xa0
   14958:	str	r0, [sp, #72]	; 0x48
   1495c:	ldr	r0, [pc, #1160]	; 14dec <close_stdout@@Base+0x12bc>
   14960:	add	r0, pc, r0
   14964:	bl	13f7c <close_stdout@@Base+0x44c>
   14968:	str	r0, [sp, #68]	; 0x44
   1496c:	ldr	r0, [sp, #36]	; 0x24
   14970:	cmp	r0, #0
   14974:	movne	r9, #0
   14978:	bne	149b0 <close_stdout@@Base+0xe80>
   1497c:	ldr	r1, [sp, #72]	; 0x48
   14980:	ldrb	r3, [r1]
   14984:	cmp	r3, #0
   14988:	beq	14d88 <close_stdout@@Base+0x1258>
   1498c:	mov	r2, r1
   14990:	ldr	r1, [sp, #40]	; 0x28
   14994:	mov	r9, r0
   14998:	cmp	r9, sl
   1499c:	strbcc	r3, [r1, r9]
   149a0:	ldrb	r3, [r2, #1]!
   149a4:	add	r9, r9, #1
   149a8:	cmp	r3, #0
   149ac:	bne	14998 <close_stdout@@Base+0xe68>
   149b0:	ldr	r0, [sp, #68]	; 0x44
   149b4:	str	r0, [sp, #52]	; 0x34
   149b8:	bl	11484 <strlen@plt>
   149bc:	mov	r2, #1
   149c0:	str	r2, [sp, #24]
   149c4:	str	r0, [sp, #28]
   149c8:	b	14194 <close_stdout@@Base+0x664>
   149cc:	ldr	r3, [pc, #1052]	; 14df0 <close_stdout@@Base+0x12c0>
   149d0:	mov	r2, #0
   149d4:	mov	r1, #1
   149d8:	mov	r0, #2
   149dc:	add	r3, pc, r3
   149e0:	str	r1, [sp, #36]	; 0x24
   149e4:	str	r2, [sp, #24]
   149e8:	mov	r9, r2
   149ec:	str	r1, [sp, #28]
   149f0:	str	r3, [sp, #52]	; 0x34
   149f4:	str	r0, [sp, #160]	; 0xa0
   149f8:	b	14194 <close_stdout@@Base+0x664>
   149fc:	ldr	r3, [sp, #36]	; 0x24
   14a00:	cmp	r3, #0
   14a04:	bne	14d94 <close_stdout@@Base+0x1264>
   14a08:	cmp	sl, #0
   14a0c:	beq	14cf0 <close_stdout@@Base+0x11c0>
   14a10:	ldr	r1, [sp, #40]	; 0x28
   14a14:	mov	r3, #39	; 0x27
   14a18:	ldr	r2, [sp, #36]	; 0x24
   14a1c:	mov	r0, #1
   14a20:	mov	r9, r0
   14a24:	str	r0, [sp, #28]
   14a28:	strb	r3, [r1]
   14a2c:	ldr	r3, [pc, #960]	; 14df4 <close_stdout@@Base+0x12c4>
   14a30:	str	r2, [sp, #24]
   14a34:	add	r3, pc, r3
   14a38:	str	r3, [sp, #52]	; 0x34
   14a3c:	b	14194 <close_stdout@@Base+0x664>
   14a40:	ldr	r2, [sp, #28]
   14a44:	cmp	r2, #1
   14a48:	add	r4, fp, r2
   14a4c:	movls	r3, #0
   14a50:	movhi	r3, #1
   14a54:	cmn	r8, #1
   14a58:	movne	r3, #0
   14a5c:	cmp	r3, #0
   14a60:	beq	14a70 <close_stdout@@Base+0xf40>
   14a64:	ldr	r0, [sp, #32]
   14a68:	bl	11484 <strlen@plt>
   14a6c:	mov	r8, r0
   14a70:	cmp	r8, r4
   14a74:	ldrcc	r3, [sp, #32]
   14a78:	movcc	r6, #0
   14a7c:	addcc	r5, r3, fp
   14a80:	bcc	141f0 <close_stdout@@Base+0x6c0>
   14a84:	ldr	r0, [sp, #32]
   14a88:	ldr	r1, [sp, #52]	; 0x34
   14a8c:	add	r5, r0, fp
   14a90:	ldr	r2, [sp, #28]
   14a94:	mov	r0, r5
   14a98:	bl	11334 <memcmp@plt>
   14a9c:	cmp	r0, #0
   14aa0:	bne	14ab8 <close_stdout@@Base+0xf88>
   14aa4:	ldr	r1, [sp, #36]	; 0x24
   14aa8:	cmp	r1, #0
   14aac:	bne	14610 <close_stdout@@Base+0xae0>
   14ab0:	mov	r6, #1
   14ab4:	b	141f0 <close_stdout@@Base+0x6c0>
   14ab8:	mov	r6, #0
   14abc:	b	141f0 <close_stdout@@Base+0x6c0>
   14ac0:	add	r7, sp, #108	; 0x6c
   14ac4:	cmn	r8, #1
   14ac8:	mov	r3, #0
   14acc:	str	r3, [sp, #108]	; 0x6c
   14ad0:	str	r3, [r7, #4]
   14ad4:	beq	14cc0 <close_stdout@@Base+0x1190>
   14ad8:	mov	r1, #0
   14adc:	ldr	r0, [sp, #32]
   14ae0:	mov	ip, #1
   14ae4:	str	r9, [sp, #88]	; 0x58
   14ae8:	str	r6, [sp, #96]	; 0x60
   14aec:	mov	r9, r1
   14af0:	str	r5, [sp, #100]	; 0x64
   14af4:	mov	r6, ip
   14af8:	mov	r5, r7
   14afc:	add	r3, sp, #104	; 0x68
   14b00:	sub	r0, r0, #1
   14b04:	str	r3, [sp, #80]	; 0x50
   14b08:	str	r0, [sp, #84]	; 0x54
   14b0c:	str	r1, [sp, #60]	; 0x3c
   14b10:	str	r4, [sp, #92]	; 0x5c
   14b14:	ldr	r2, [sp, #32]
   14b18:	add	r7, r9, fp
   14b1c:	add	r0, sp, #104	; 0x68
   14b20:	mov	r3, r5
   14b24:	add	r4, r2, r7
   14b28:	rsb	r2, r7, r8
   14b2c:	mov	r1, r4
   14b30:	bl	113e8 <mbrtowc@plt>
   14b34:	subs	r2, r0, #0
   14b38:	beq	14c44 <close_stdout@@Base+0x1114>
   14b3c:	cmn	r2, #1
   14b40:	beq	14d6c <close_stdout@@Base+0x123c>
   14b44:	cmn	r2, #2
   14b48:	beq	14d10 <close_stdout@@Base+0x11e0>
   14b4c:	ldr	r3, [sp, #36]	; 0x24
   14b50:	ldr	r0, [sp, #160]	; 0xa0
   14b54:	cmp	r0, #2
   14b58:	movne	r3, #0
   14b5c:	andeq	r3, r3, #1
   14b60:	cmp	r3, #0
   14b64:	beq	14c20 <close_stdout@@Base+0x10f0>
   14b68:	cmp	r2, #1
   14b6c:	beq	14c20 <close_stdout@@Base+0x10f0>
   14b70:	ldr	r1, [sp, #84]	; 0x54
   14b74:	add	r3, r1, r2
   14b78:	add	r7, r3, r7
   14b7c:	ldrb	r3, [r4, #1]!
   14b80:	sub	r3, r3, #91	; 0x5b
   14b84:	cmp	r3, #33	; 0x21
   14b88:	addls	pc, pc, r3, lsl #2
   14b8c:	b	14c18 <close_stdout@@Base+0x10e8>
   14b90:	b	14610 <close_stdout@@Base+0xae0>
   14b94:	b	14610 <close_stdout@@Base+0xae0>
   14b98:	b	14c18 <close_stdout@@Base+0x10e8>
   14b9c:	b	14610 <close_stdout@@Base+0xae0>
   14ba0:	b	14c18 <close_stdout@@Base+0x10e8>
   14ba4:	b	14610 <close_stdout@@Base+0xae0>
   14ba8:	b	14c18 <close_stdout@@Base+0x10e8>
   14bac:	b	14c18 <close_stdout@@Base+0x10e8>
   14bb0:	b	14c18 <close_stdout@@Base+0x10e8>
   14bb4:	b	14c18 <close_stdout@@Base+0x10e8>
   14bb8:	b	14c18 <close_stdout@@Base+0x10e8>
   14bbc:	b	14c18 <close_stdout@@Base+0x10e8>
   14bc0:	b	14c18 <close_stdout@@Base+0x10e8>
   14bc4:	b	14c18 <close_stdout@@Base+0x10e8>
   14bc8:	b	14c18 <close_stdout@@Base+0x10e8>
   14bcc:	b	14c18 <close_stdout@@Base+0x10e8>
   14bd0:	b	14c18 <close_stdout@@Base+0x10e8>
   14bd4:	b	14c18 <close_stdout@@Base+0x10e8>
   14bd8:	b	14c18 <close_stdout@@Base+0x10e8>
   14bdc:	b	14c18 <close_stdout@@Base+0x10e8>
   14be0:	b	14c18 <close_stdout@@Base+0x10e8>
   14be4:	b	14c18 <close_stdout@@Base+0x10e8>
   14be8:	b	14c18 <close_stdout@@Base+0x10e8>
   14bec:	b	14c18 <close_stdout@@Base+0x10e8>
   14bf0:	b	14c18 <close_stdout@@Base+0x10e8>
   14bf4:	b	14c18 <close_stdout@@Base+0x10e8>
   14bf8:	b	14c18 <close_stdout@@Base+0x10e8>
   14bfc:	b	14c18 <close_stdout@@Base+0x10e8>
   14c00:	b	14c18 <close_stdout@@Base+0x10e8>
   14c04:	b	14c18 <close_stdout@@Base+0x10e8>
   14c08:	b	14c18 <close_stdout@@Base+0x10e8>
   14c0c:	b	14c18 <close_stdout@@Base+0x10e8>
   14c10:	b	14c18 <close_stdout@@Base+0x10e8>
   14c14:	b	14610 <close_stdout@@Base+0xae0>
   14c18:	cmp	r4, r7
   14c1c:	bne	14b7c <close_stdout@@Base+0x104c>
   14c20:	ldr	r0, [sp, #104]	; 0x68
   14c24:	add	r9, r9, r2
   14c28:	bl	11394 <iswprint@plt>
   14c2c:	cmp	r0, #0
   14c30:	mov	r0, r5
   14c34:	moveq	r6, #0
   14c38:	bl	11310 <mbsinit@plt>
   14c3c:	cmp	r0, #0
   14c40:	beq	14b14 <close_stdout@@Base+0xfe4>
   14c44:	mov	ip, r6
   14c48:	eor	r2, ip, #1
   14c4c:	str	r9, [sp, #60]	; 0x3c
   14c50:	ldr	r4, [sp, #92]	; 0x5c
   14c54:	uxtb	r2, r2
   14c58:	ldr	r9, [sp, #88]	; 0x58
   14c5c:	ldr	r6, [sp, #96]	; 0x60
   14c60:	ldr	r5, [sp, #100]	; 0x64
   14c64:	ldr	r3, [sp, #60]	; 0x3c
   14c68:	cmp	r3, #1
   14c6c:	bls	147f0 <close_stdout@@Base+0xcc0>
   14c70:	ldr	r0, [sp, #24]
   14c74:	and	r2, r2, r0
   14c78:	b	147fc <close_stdout@@Base+0xccc>
   14c7c:	ldr	r2, [sp, #164]	; 0xa4
   14c80:	tst	r2, #1
   14c84:	addne	fp, fp, #1
   14c88:	bne	141b8 <close_stdout@@Base+0x688>
   14c8c:	b	144c8 <close_stdout@@Base+0x998>
   14c90:	ldr	r0, [sp, #36]	; 0x24
   14c94:	cmp	r0, #0
   14c98:	beq	144c8 <close_stdout@@Base+0x998>
   14c9c:	b	14610 <close_stdout@@Base+0xae0>
   14ca0:	ldr	r2, [sp, #32]
   14ca4:	ldrb	r3, [r2, #1]
   14ca8:	adds	r3, r3, #0
   14cac:	movne	r3, #1
   14cb0:	b	145e4 <close_stdout@@Base+0xab4>
   14cb4:	bl	115c8 <abort@plt>
   14cb8:	ldr	r8, [sp, #60]	; 0x3c
   14cbc:	b	14610 <close_stdout@@Base+0xae0>
   14cc0:	ldr	r0, [sp, #32]
   14cc4:	bl	11484 <strlen@plt>
   14cc8:	mov	r8, r0
   14ccc:	b	14ad8 <close_stdout@@Base+0xfa8>
   14cd0:	ldr	r2, [pc, #288]	; 14df8 <close_stdout@@Base+0x12c8>
   14cd4:	mov	r1, #1
   14cd8:	mov	r9, r1
   14cdc:	str	r1, [sp, #24]
   14ce0:	add	r2, pc, r2
   14ce4:	str	r1, [sp, #28]
   14ce8:	str	r2, [sp, #52]	; 0x34
   14cec:	b	14194 <close_stdout@@Base+0x664>
   14cf0:	ldr	r2, [pc, #260]	; 14dfc <close_stdout@@Base+0x12cc>
   14cf4:	mov	r3, #1
   14cf8:	mov	r9, r3
   14cfc:	str	r3, [sp, #28]
   14d00:	add	r2, pc, r2
   14d04:	str	sl, [sp, #24]
   14d08:	str	r2, [sp, #52]	; 0x34
   14d0c:	b	14194 <close_stdout@@Base+0x664>
   14d10:	cmp	r8, r7
   14d14:	str	r9, [sp, #60]	; 0x3c
   14d18:	mov	ip, r4
   14d1c:	ldr	r6, [sp, #96]	; 0x60
   14d20:	ldr	r9, [sp, #88]	; 0x58
   14d24:	ldr	r4, [sp, #92]	; 0x5c
   14d28:	ldr	r5, [sp, #100]	; 0x64
   14d2c:	bls	14d64 <close_stdout@@Base+0x1234>
   14d30:	ldrb	r3, [ip]
   14d34:	cmp	r3, #0
   14d38:	beq	14d64 <close_stdout@@Base+0x1234>
   14d3c:	ldr	r3, [sp, #60]	; 0x3c
   14d40:	b	14d50 <close_stdout@@Base+0x1220>
   14d44:	ldrb	r2, [r5, r3]
   14d48:	cmp	r2, #0
   14d4c:	beq	14d60 <close_stdout@@Base+0x1230>
   14d50:	add	r3, r3, #1
   14d54:	add	r2, fp, r3
   14d58:	cmp	r8, r2
   14d5c:	bhi	14d44 <close_stdout@@Base+0x1214>
   14d60:	str	r3, [sp, #60]	; 0x3c
   14d64:	mov	r2, #1
   14d68:	b	14c64 <close_stdout@@Base+0x1134>
   14d6c:	str	r9, [sp, #60]	; 0x3c
   14d70:	mov	r2, #1
   14d74:	ldr	r4, [sp, #92]	; 0x5c
   14d78:	ldr	r6, [sp, #96]	; 0x60
   14d7c:	ldr	r9, [sp, #88]	; 0x58
   14d80:	ldr	r5, [sp, #100]	; 0x64
   14d84:	b	14c64 <close_stdout@@Base+0x1134>
   14d88:	ldr	r9, [sp, #36]	; 0x24
   14d8c:	b	149b0 <close_stdout@@Base+0xe80>
   14d90:	bl	1134c <__stack_chk_fail@plt>
   14d94:	ldr	r1, [pc, #100]	; 14e00 <close_stdout@@Base+0x12d0>
   14d98:	mov	r3, #0
   14d9c:	mov	r0, #1
   14da0:	str	r3, [sp, #24]
   14da4:	add	r1, pc, r1
   14da8:	str	r0, [sp, #28]
   14dac:	mov	r9, r3
   14db0:	str	r1, [sp, #52]	; 0x34
   14db4:	b	14194 <close_stdout@@Base+0x664>
   14db8:	ldr	r0, [pc, #68]	; 14e04 <close_stdout@@Base+0x12d4>
   14dbc:	mov	r3, #1
   14dc0:	mov	r9, #0
   14dc4:	str	r3, [sp, #24]
   14dc8:	add	r0, pc, r0
   14dcc:	str	r3, [sp, #28]
   14dd0:	str	r0, [sp, #52]	; 0x34
   14dd4:	b	14194 <close_stdout@@Base+0x664>
   14dd8:	strdeq	r5, [r1], -ip
   14ddc:	andeq	r0, r0, r8, lsr r1
   14de0:	andeq	r4, r0, r0, ror #24
   14de4:	andeq	r4, r0, ip, lsr ip
   14de8:	strdeq	r4, [r0], -r8
   14dec:			; <UNDEFINED> instruction: 0x00004ab4
   14df0:	andeq	r4, r0, r8, lsr sl
   14df4:	andeq	r4, r0, r0, ror #19
   14df8:	andeq	r4, r0, r8, asr r8
   14dfc:	andeq	r4, r0, r4, lsl r7
   14e00:	andeq	r4, r0, r0, ror r6
   14e04:	andeq	r4, r0, r0, ror r7
   14e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e0c:	sub	sp, sp, #44	; 0x2c
   14e10:	mov	r6, r0
   14e14:	mov	r9, r1
   14e18:	mov	sl, r2
   14e1c:	mov	r4, r3
   14e20:	bl	114c0 <__errno_location@plt>
   14e24:	ldr	fp, [pc, #412]	; 14fc8 <close_stdout@@Base+0x1498>
   14e28:	cmp	r6, #0
   14e2c:	add	fp, pc, fp
   14e30:	ldr	r5, [fp]
   14e34:	ldr	r1, [r0]
   14e38:	mov	r8, r0
   14e3c:	str	r1, [sp, #36]	; 0x24
   14e40:	blt	14fc0 <close_stdout@@Base+0x1490>
   14e44:	ldr	r3, [pc, #384]	; 14fcc <close_stdout@@Base+0x149c>
   14e48:	add	r3, pc, r3
   14e4c:	ldr	r3, [r3]
   14e50:	cmp	r6, r3
   14e54:	bcc	14ea8 <close_stdout@@Base+0x1378>
   14e58:	add	r7, r6, #1
   14e5c:	cmn	r7, #-536870911	; 0xe0000001
   14e60:	bhi	14fc4 <close_stdout@@Base+0x1494>
   14e64:	add	r3, fp, #4
   14e68:	cmp	r5, r3
   14e6c:	beq	14f98 <close_stdout@@Base+0x1468>
   14e70:	mov	r0, r5
   14e74:	lsl	r1, r7, #3
   14e78:	bl	15d0c <close_stdout@@Base+0x21dc>
   14e7c:	mov	r5, r0
   14e80:	str	r0, [fp]
   14e84:	ldr	fp, [pc, #324]	; 14fd0 <close_stdout@@Base+0x14a0>
   14e88:	mov	r1, #0
   14e8c:	add	fp, pc, fp
   14e90:	ldr	r0, [fp]
   14e94:	rsb	r2, r0, r7
   14e98:	add	r0, r5, r0, lsl #3
   14e9c:	lsl	r2, r2, #3
   14ea0:	bl	114e4 <memset@plt>
   14ea4:	str	r7, [fp]
   14ea8:	add	r2, r4, #8
   14eac:	str	r2, [sp, #32]
   14eb0:	ldr	r1, [r4]
   14eb4:	add	fp, r5, r6, lsl #3
   14eb8:	ldr	lr, [sp, #32]
   14ebc:	mov	r2, r9
   14ec0:	ldr	r3, [r4, #4]
   14ec4:	ldr	ip, [r5, r6, lsl #3]
   14ec8:	ldr	r7, [fp, #4]
   14ecc:	orr	r3, r3, #1
   14ed0:	str	r1, [sp]
   14ed4:	str	r3, [sp, #4]
   14ed8:	mov	r1, ip
   14edc:	str	lr, [sp, #8]
   14ee0:	mov	r0, r7
   14ee4:	ldr	lr, [r4, #40]	; 0x28
   14ee8:	str	r3, [sp, #28]
   14eec:	mov	r3, sl
   14ef0:	str	lr, [sp, #12]
   14ef4:	ldr	lr, [r4, #44]	; 0x2c
   14ef8:	str	ip, [sp, #24]
   14efc:	str	lr, [sp, #16]
   14f00:	bl	140e0 <close_stdout@@Base+0x5b0>
   14f04:	ldr	ip, [sp, #24]
   14f08:	cmp	ip, r0
   14f0c:	bhi	14f84 <close_stdout@@Base+0x1454>
   14f10:	ldr	r3, [pc, #188]	; 14fd4 <close_stdout@@Base+0x14a4>
   14f14:	add	r1, r0, #1
   14f18:	str	r1, [r5, r6, lsl #3]
   14f1c:	add	r3, pc, r3
   14f20:	cmp	r7, r3
   14f24:	beq	14f38 <close_stdout@@Base+0x1408>
   14f28:	mov	r0, r7
   14f2c:	str	r1, [sp, #24]
   14f30:	bl	112e0 <free@plt>
   14f34:	ldr	r1, [sp, #24]
   14f38:	mov	r0, r1
   14f3c:	str	r1, [sp, #24]
   14f40:	bl	15cb4 <close_stdout@@Base+0x2184>
   14f44:	ldr	r3, [sp, #28]
   14f48:	ldr	lr, [sp, #32]
   14f4c:	mov	r2, r9
   14f50:	str	r0, [fp, #4]
   14f54:	mov	r7, r0
   14f58:	ldr	ip, [r4]
   14f5c:	str	r3, [sp, #4]
   14f60:	mov	r3, sl
   14f64:	str	lr, [sp, #8]
   14f68:	str	ip, [sp]
   14f6c:	ldr	ip, [r4, #40]	; 0x28
   14f70:	ldr	r1, [sp, #24]
   14f74:	str	ip, [sp, #12]
   14f78:	ldr	ip, [r4, #44]	; 0x2c
   14f7c:	str	ip, [sp, #16]
   14f80:	bl	140e0 <close_stdout@@Base+0x5b0>
   14f84:	ldr	r1, [sp, #36]	; 0x24
   14f88:	mov	r0, r7
   14f8c:	str	r1, [r8]
   14f90:	add	sp, sp, #44	; 0x2c
   14f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f98:	lsl	r1, r7, #3
   14f9c:	mov	r0, #0
   14fa0:	str	r3, [sp, #24]
   14fa4:	bl	15d0c <close_stdout@@Base+0x21dc>
   14fa8:	ldr	r3, [sp, #24]
   14fac:	mov	r5, r0
   14fb0:	ldm	r3, {r0, r1}
   14fb4:	str	r5, [fp]
   14fb8:	stm	r5, {r0, r1}
   14fbc:	b	14e84 <close_stdout@@Base+0x1354>
   14fc0:	bl	115c8 <abort@plt>
   14fc4:	bl	13034 <__assert_fail@plt+0x1a48>
   14fc8:	andeq	r5, r1, r4, lsl #7
   14fcc:	andeq	r5, r1, r4, lsr r3
   14fd0:	strdeq	r5, [r1], -r0
   14fd4:	andeq	r5, r1, r0, lsr #7
   14fd8:	push	{r4, r5, r6, lr}
   14fdc:	mov	r5, r0
   14fe0:	bl	114c0 <__errno_location@plt>
   14fe4:	cmp	r5, #0
   14fe8:	mov	r1, #48	; 0x30
   14fec:	mov	r4, r0
   14ff0:	ldr	r0, [pc, #24]	; 15010 <close_stdout@@Base+0x14e0>
   14ff4:	ldr	r6, [r4]
   14ff8:	add	r0, pc, r0
   14ffc:	add	r0, r0, #256	; 0x100
   15000:	movne	r0, r5
   15004:	bl	15e88 <close_stdout@@Base+0x2358>
   15008:	str	r6, [r4]
   1500c:	pop	{r4, r5, r6, pc}
   15010:	andeq	r5, r1, r4, asr #5
   15014:	cmp	r0, #0
   15018:	beq	15024 <close_stdout@@Base+0x14f4>
   1501c:	ldr	r0, [r0]
   15020:	bx	lr
   15024:	ldr	r0, [pc, #12]	; 15038 <close_stdout@@Base+0x1508>
   15028:	add	r0, pc, r0
   1502c:	add	r0, r0, #256	; 0x100
   15030:	ldr	r0, [r0]
   15034:	bx	lr
   15038:	muleq	r1, r4, r2
   1503c:	cmp	r0, #0
   15040:	beq	1504c <close_stdout@@Base+0x151c>
   15044:	str	r1, [r0]
   15048:	bx	lr
   1504c:	ldr	r0, [pc, #12]	; 15060 <close_stdout@@Base+0x1530>
   15050:	add	r0, pc, r0
   15054:	add	r0, r0, #256	; 0x100
   15058:	str	r1, [r0]
   1505c:	bx	lr
   15060:	andeq	r5, r1, ip, ror #4
   15064:	cmp	r0, #0
   15068:	movne	r3, r0
   1506c:	beq	1509c <close_stdout@@Base+0x156c>
   15070:	lsr	ip, r1, #5
   15074:	and	r1, r1, #31
   15078:	add	r3, r3, ip, lsl #2
   1507c:	ldr	ip, [r3, #8]
   15080:	lsr	r0, ip, r1
   15084:	eor	r2, r0, r2
   15088:	and	r0, r0, #1
   1508c:	and	r2, r2, #1
   15090:	eor	ip, ip, r2, lsl r1
   15094:	str	ip, [r3, #8]
   15098:	bx	lr
   1509c:	ldr	r3, [pc, #8]	; 150ac <close_stdout@@Base+0x157c>
   150a0:	add	r3, pc, r3
   150a4:	add	r3, r3, #256	; 0x100
   150a8:	b	15070 <close_stdout@@Base+0x1540>
   150ac:	andeq	r5, r1, ip, lsl r2
   150b0:	subs	r3, r0, #0
   150b4:	beq	150c4 <close_stdout@@Base+0x1594>
   150b8:	ldr	r0, [r3, #4]
   150bc:	str	r1, [r3, #4]
   150c0:	bx	lr
   150c4:	ldr	r3, [pc, #8]	; 150d4 <close_stdout@@Base+0x15a4>
   150c8:	add	r3, pc, r3
   150cc:	add	r3, r3, #256	; 0x100
   150d0:	b	150b8 <close_stdout@@Base+0x1588>
   150d4:	strdeq	r5, [r1], -r4
   150d8:	cmp	r0, #0
   150dc:	push	{r3, lr}
   150e0:	beq	15104 <close_stdout@@Base+0x15d4>
   150e4:	cmp	r2, #0
   150e8:	cmpne	r1, #0
   150ec:	mov	r3, #8
   150f0:	strne	r1, [r0, #40]	; 0x28
   150f4:	str	r3, [r0]
   150f8:	strne	r2, [r0, #44]	; 0x2c
   150fc:	popne	{r3, pc}
   15100:	bl	115c8 <abort@plt>
   15104:	ldr	r0, [pc, #8]	; 15114 <close_stdout@@Base+0x15e4>
   15108:	add	r0, pc, r0
   1510c:	add	r0, r0, #256	; 0x100
   15110:	b	150e4 <close_stdout@@Base+0x15b4>
   15114:			; <UNDEFINED> instruction: 0x000151b4
   15118:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1511c:	sub	sp, sp, #24
   15120:	mov	r7, r0
   15124:	mov	sl, r1
   15128:	ldr	r4, [sp, #56]	; 0x38
   1512c:	mov	r9, r2
   15130:	mov	r8, r3
   15134:	cmp	r4, #0
   15138:	beq	1518c <close_stdout@@Base+0x165c>
   1513c:	bl	114c0 <__errno_location@plt>
   15140:	ldr	r3, [r4]
   15144:	add	lr, r4, #8
   15148:	mov	r1, sl
   1514c:	mov	r2, r9
   15150:	ldr	r6, [r0]
   15154:	mov	r5, r0
   15158:	str	r3, [sp]
   1515c:	mov	r0, r7
   15160:	ldr	ip, [r4, #4]
   15164:	mov	r3, r8
   15168:	stmib	sp, {ip, lr}
   1516c:	ldr	ip, [r4, #40]	; 0x28
   15170:	str	ip, [sp, #12]
   15174:	ldr	ip, [r4, #44]	; 0x2c
   15178:	str	ip, [sp, #16]
   1517c:	bl	140e0 <close_stdout@@Base+0x5b0>
   15180:	str	r6, [r5]
   15184:	add	sp, sp, #24
   15188:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1518c:	ldr	r4, [pc, #8]	; 1519c <close_stdout@@Base+0x166c>
   15190:	add	r4, pc, r4
   15194:	add	r4, r4, #256	; 0x100
   15198:	b	1513c <close_stdout@@Base+0x160c>
   1519c:	andeq	r5, r1, ip, lsr #2
   151a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151a4:	subs	r4, r3, #0
   151a8:	sub	sp, sp, #36	; 0x24
   151ac:	mov	r7, r0
   151b0:	mov	r6, r1
   151b4:	mov	r5, r2
   151b8:	beq	15274 <close_stdout@@Base+0x1744>
   151bc:	bl	114c0 <__errno_location@plt>
   151c0:	ldr	r3, [r4]
   151c4:	ldr	sl, [r4, #4]
   151c8:	add	r9, r4, #8
   151cc:	mov	r8, r0
   151d0:	mov	r0, #0
   151d4:	ldr	r2, [r8]
   151d8:	cmp	r5, r0
   151dc:	orreq	sl, sl, #1
   151e0:	str	r9, [sp, #8]
   151e4:	mov	r1, r0
   151e8:	stm	sp, {r3, sl}
   151ec:	mov	r3, r6
   151f0:	ldr	ip, [r4, #40]	; 0x28
   151f4:	str	r2, [sp, #28]
   151f8:	mov	r2, r7
   151fc:	str	ip, [sp, #12]
   15200:	ldr	ip, [r4, #44]	; 0x2c
   15204:	str	ip, [sp, #16]
   15208:	bl	140e0 <close_stdout@@Base+0x5b0>
   1520c:	add	r1, r0, #1
   15210:	mov	fp, r0
   15214:	str	r1, [sp, #24]
   15218:	mov	r0, r1
   1521c:	bl	15cb4 <close_stdout@@Base+0x2184>
   15220:	ldr	lr, [r4]
   15224:	str	sl, [sp, #4]
   15228:	mov	r3, r6
   1522c:	str	r9, [sp, #8]
   15230:	mov	r2, r7
   15234:	str	lr, [sp]
   15238:	ldr	lr, [r4, #40]	; 0x28
   1523c:	ldr	r1, [sp, #24]
   15240:	str	lr, [sp, #12]
   15244:	ldr	lr, [r4, #44]	; 0x2c
   15248:	str	lr, [sp, #16]
   1524c:	str	r0, [sp, #24]
   15250:	bl	140e0 <close_stdout@@Base+0x5b0>
   15254:	ldr	r3, [sp, #28]
   15258:	cmp	r5, #0
   1525c:	str	r3, [r8]
   15260:	ldr	ip, [sp, #24]
   15264:	strne	fp, [r5]
   15268:	mov	r0, ip
   1526c:	add	sp, sp, #36	; 0x24
   15270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15274:	ldr	r4, [pc, #8]	; 15284 <close_stdout@@Base+0x1754>
   15278:	add	r4, pc, r4
   1527c:	add	r4, r4, #256	; 0x100
   15280:	b	151bc <close_stdout@@Base+0x168c>
   15284:	andeq	r5, r1, r4, asr #32
   15288:	mov	r3, r2
   1528c:	mov	r2, #0
   15290:	b	151a0 <close_stdout@@Base+0x1670>
   15294:	ldr	r2, [pc, #152]	; 15334 <close_stdout@@Base+0x1804>
   15298:	push	{r3, r4, r5, r6, r7, lr}
   1529c:	add	r2, pc, r2
   152a0:	ldr	r3, [pc, #144]	; 15338 <close_stdout@@Base+0x1808>
   152a4:	ldr	r6, [r2]
   152a8:	add	r3, pc, r3
   152ac:	cmp	r6, #1
   152b0:	ldr	r7, [r3]
   152b4:	movhi	r4, #1
   152b8:	movhi	r5, r7
   152bc:	bls	152d8 <close_stdout@@Base+0x17a8>
   152c0:	ldr	r0, [r5, #12]
   152c4:	add	r4, r4, #1
   152c8:	bl	112e0 <free@plt>
   152cc:	cmp	r4, r6
   152d0:	add	r5, r5, #8
   152d4:	bne	152c0 <close_stdout@@Base+0x1790>
   152d8:	ldr	r4, [pc, #92]	; 1533c <close_stdout@@Base+0x180c>
   152dc:	ldr	r0, [r7, #4]
   152e0:	add	r4, pc, r4
   152e4:	cmp	r0, r4
   152e8:	beq	15300 <close_stdout@@Base+0x17d0>
   152ec:	bl	112e0 <free@plt>
   152f0:	ldr	r3, [pc, #72]	; 15340 <close_stdout@@Base+0x1810>
   152f4:	mov	r2, #256	; 0x100
   152f8:	add	r3, pc, r3
   152fc:	stmib	r3, {r2, r4}
   15300:	ldr	r4, [pc, #60]	; 15344 <close_stdout@@Base+0x1814>
   15304:	add	r4, pc, r4
   15308:	add	r5, r4, #4
   1530c:	cmp	r7, r5
   15310:	beq	15320 <close_stdout@@Base+0x17f0>
   15314:	mov	r0, r7
   15318:	bl	112e0 <free@plt>
   1531c:	str	r5, [r4]
   15320:	ldr	r3, [pc, #32]	; 15348 <close_stdout@@Base+0x1818>
   15324:	mov	r2, #1
   15328:	add	r3, pc, r3
   1532c:	str	r2, [r3]
   15330:	pop	{r3, r4, r5, r6, r7, pc}
   15334:	andeq	r4, r1, r0, ror #29
   15338:	andeq	r4, r1, r8, lsl #30
   1533c:	ldrdeq	r4, [r1], -ip
   15340:			; <UNDEFINED> instruction: 0x00014eb8
   15344:	andeq	r4, r1, ip, lsr #29
   15348:	andeq	r4, r1, r4, asr lr
   1534c:	ldr	r3, [pc, #12]	; 15360 <close_stdout@@Base+0x1830>
   15350:	mvn	r2, #0
   15354:	add	r3, pc, r3
   15358:	add	r3, r3, #256	; 0x100
   1535c:	b	14e08 <close_stdout@@Base+0x12d8>
   15360:	andeq	r4, r1, r8, ror #30
   15364:	ldr	r3, [pc, #8]	; 15374 <close_stdout@@Base+0x1844>
   15368:	add	r3, pc, r3
   1536c:	add	r3, r3, #256	; 0x100
   15370:	b	14e08 <close_stdout@@Base+0x12d8>
   15374:	andeq	r4, r1, r4, asr pc
   15378:	mov	r1, r0
   1537c:	mov	r0, #0
   15380:	b	1534c <close_stdout@@Base+0x181c>
   15384:	mov	r2, r1
   15388:	mov	r1, r0
   1538c:	mov	r0, #0
   15390:	b	15364 <close_stdout@@Base+0x1834>
   15394:	ldr	r3, [pc, #92]	; 153f8 <close_stdout@@Base+0x18c8>
   15398:	ldr	ip, [pc, #92]	; 153fc <close_stdout@@Base+0x18cc>
   1539c:	add	r3, pc, r3
   153a0:	push	{r4, r5, r6, r7, lr}
   153a4:	sub	sp, sp, #60	; 0x3c
   153a8:	ldr	r4, [r3, ip]
   153ac:	add	r5, sp, #4
   153b0:	mov	r7, r2
   153b4:	mov	r6, r0
   153b8:	mov	r0, r5
   153bc:	ldr	r3, [r4]
   153c0:	str	r3, [sp, #52]	; 0x34
   153c4:	bl	13f28 <close_stdout@@Base+0x3f8>
   153c8:	mov	r3, r5
   153cc:	mvn	r2, #0
   153d0:	mov	r0, r6
   153d4:	mov	r1, r7
   153d8:	bl	14e08 <close_stdout@@Base+0x12d8>
   153dc:	ldr	r2, [sp, #52]	; 0x34
   153e0:	ldr	r3, [r4]
   153e4:	cmp	r2, r3
   153e8:	bne	153f4 <close_stdout@@Base+0x18c4>
   153ec:	add	sp, sp, #60	; 0x3c
   153f0:	pop	{r4, r5, r6, r7, pc}
   153f4:	bl	1134c <__stack_chk_fail@plt>
   153f8:	andeq	r4, r1, ip, asr ip
   153fc:	andeq	r0, r0, r8, lsr r1
   15400:	ldr	ip, [pc, #96]	; 15468 <close_stdout@@Base+0x1938>
   15404:	push	{r4, r5, r6, r7, r8, lr}
   15408:	add	ip, pc, ip
   1540c:	ldr	lr, [pc, #88]	; 1546c <close_stdout@@Base+0x193c>
   15410:	sub	sp, sp, #56	; 0x38
   15414:	mov	r8, r3
   15418:	add	r5, sp, #4
   1541c:	mov	r7, r2
   15420:	mov	r6, r0
   15424:	ldr	r4, [ip, lr]
   15428:	mov	r0, r5
   1542c:	ldr	r3, [r4]
   15430:	str	r3, [sp, #52]	; 0x34
   15434:	bl	13f28 <close_stdout@@Base+0x3f8>
   15438:	mov	r2, r8
   1543c:	mov	r3, r5
   15440:	mov	r0, r6
   15444:	mov	r1, r7
   15448:	bl	14e08 <close_stdout@@Base+0x12d8>
   1544c:	ldr	r2, [sp, #52]	; 0x34
   15450:	ldr	r3, [r4]
   15454:	cmp	r2, r3
   15458:	bne	15464 <close_stdout@@Base+0x1934>
   1545c:	add	sp, sp, #56	; 0x38
   15460:	pop	{r4, r5, r6, r7, r8, pc}
   15464:	bl	1134c <__stack_chk_fail@plt>
   15468:	strdeq	r4, [r1], -r0
   1546c:	andeq	r0, r0, r8, lsr r1
   15470:	mov	r2, r1
   15474:	mov	r1, r0
   15478:	mov	r0, #0
   1547c:	b	15394 <close_stdout@@Base+0x1864>
   15480:	mov	ip, r1
   15484:	mov	r3, r2
   15488:	mov	r1, r0
   1548c:	mov	r2, ip
   15490:	mov	r0, #0
   15494:	b	15400 <close_stdout@@Base+0x18d0>
   15498:	push	{r4, r5, r6, r7, r8, lr}
   1549c:	mov	r5, r2
   154a0:	ldr	lr, [pc, #136]	; 15530 <close_stdout@@Base+0x1a00>
   154a4:	mov	r7, r0
   154a8:	mov	r6, r1
   154ac:	ldr	r4, [pc, #128]	; 15534 <close_stdout@@Base+0x1a04>
   154b0:	add	lr, pc, lr
   154b4:	sub	sp, sp, #56	; 0x38
   154b8:	add	lr, lr, #256	; 0x100
   154bc:	ldr	r8, [pc, #116]	; 15538 <close_stdout@@Base+0x1a08>
   154c0:	add	r4, pc, r4
   154c4:	add	ip, sp, #4
   154c8:	ldm	lr!, {r0, r1, r2, r3}
   154cc:	ldr	r4, [r4, r8]
   154d0:	stmia	ip!, {r0, r1, r2, r3}
   154d4:	ldm	lr!, {r0, r1, r2, r3}
   154d8:	ldr	r8, [r4]
   154dc:	stmia	ip!, {r0, r1, r2, r3}
   154e0:	ldm	lr, {r0, r1, r2, r3}
   154e4:	str	r8, [sp, #52]	; 0x34
   154e8:	stm	ip, {r0, r1, r2, r3}
   154ec:	mov	r1, r5
   154f0:	add	r5, sp, #4
   154f4:	mov	r2, #1
   154f8:	mov	r0, r5
   154fc:	bl	15064 <close_stdout@@Base+0x1534>
   15500:	mov	r2, r6
   15504:	mov	r3, r5
   15508:	mov	r1, r7
   1550c:	mov	r0, #0
   15510:	bl	14e08 <close_stdout@@Base+0x12d8>
   15514:	ldr	r2, [sp, #52]	; 0x34
   15518:	ldr	r3, [r4]
   1551c:	cmp	r2, r3
   15520:	bne	1552c <close_stdout@@Base+0x19fc>
   15524:	add	sp, sp, #56	; 0x38
   15528:	pop	{r4, r5, r6, r7, r8, pc}
   1552c:	bl	1134c <__stack_chk_fail@plt>
   15530:	andeq	r4, r1, ip, lsl #28
   15534:	andeq	r4, r1, r8, lsr fp
   15538:	andeq	r0, r0, r8, lsr r1
   1553c:	mov	r2, r1
   15540:	mvn	r1, #0
   15544:	b	15498 <close_stdout@@Base+0x1968>
   15548:	mov	r1, #58	; 0x3a
   1554c:	b	1553c <close_stdout@@Base+0x1a0c>
   15550:	mov	r2, #58	; 0x3a
   15554:	b	15498 <close_stdout@@Base+0x1968>
   15558:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1555c:	mov	r5, r2
   15560:	ldr	lr, [pc, #144]	; 155f8 <close_stdout@@Base+0x1ac8>
   15564:	mov	r8, r0
   15568:	mov	r9, r1
   1556c:	mov	r7, r3
   15570:	add	lr, pc, lr
   15574:	ldr	r4, [pc, #128]	; 155fc <close_stdout@@Base+0x1acc>
   15578:	add	lr, lr, #256	; 0x100
   1557c:	sub	sp, sp, #56	; 0x38
   15580:	ldr	sl, [pc, #120]	; 15600 <close_stdout@@Base+0x1ad0>
   15584:	add	r4, pc, r4
   15588:	ldm	lr!, {r0, r1, r2, r3}
   1558c:	add	ip, sp, #4
   15590:	ldr	r4, [r4, sl]
   15594:	ldr	r6, [sp, #88]	; 0x58
   15598:	stmia	ip!, {r0, r1, r2, r3}
   1559c:	ldm	lr!, {r0, r1, r2, r3}
   155a0:	ldr	sl, [r4]
   155a4:	stmia	ip!, {r0, r1, r2, r3}
   155a8:	ldm	lr, {r0, r1, r2, r3}
   155ac:	str	sl, [sp, #52]	; 0x34
   155b0:	stm	ip, {r0, r1, r2, r3}
   155b4:	mov	r2, r5
   155b8:	add	r5, sp, #4
   155bc:	mov	r1, r9
   155c0:	mov	r0, r5
   155c4:	bl	150d8 <close_stdout@@Base+0x15a8>
   155c8:	mov	r2, r6
   155cc:	mov	r3, r5
   155d0:	mov	r0, r8
   155d4:	mov	r1, r7
   155d8:	bl	14e08 <close_stdout@@Base+0x12d8>
   155dc:	ldr	r2, [sp, #52]	; 0x34
   155e0:	ldr	r3, [r4]
   155e4:	cmp	r2, r3
   155e8:	bne	155f4 <close_stdout@@Base+0x1ac4>
   155ec:	add	sp, sp, #56	; 0x38
   155f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155f4:	bl	1134c <__stack_chk_fail@plt>
   155f8:	andeq	r4, r1, ip, asr #26
   155fc:	andeq	r4, r1, r4, ror sl
   15600:	andeq	r0, r0, r8, lsr r1
   15604:	push	{lr}		; (str lr, [sp, #-4]!)
   15608:	sub	sp, sp, #12
   1560c:	mvn	ip, #0
   15610:	str	ip, [sp]
   15614:	bl	15558 <close_stdout@@Base+0x1a28>
   15618:	add	sp, sp, #12
   1561c:	pop	{pc}		; (ldr pc, [sp], #4)
   15620:	mov	ip, r1
   15624:	mov	r3, r2
   15628:	mov	r1, r0
   1562c:	mov	r2, ip
   15630:	mov	r0, #0
   15634:	b	15604 <close_stdout@@Base+0x1ad4>
   15638:	push	{lr}		; (str lr, [sp, #-4]!)
   1563c:	sub	sp, sp, #12
   15640:	mov	lr, r1
   15644:	mov	ip, r2
   15648:	mov	r1, r0
   1564c:	str	r3, [sp]
   15650:	mov	r2, lr
   15654:	mov	r3, ip
   15658:	mov	r0, #0
   1565c:	bl	15558 <close_stdout@@Base+0x1a28>
   15660:	add	sp, sp, #12
   15664:	pop	{pc}		; (ldr pc, [sp], #4)
   15668:	ldr	r3, [pc, #12]	; 1567c <close_stdout@@Base+0x1b4c>
   1566c:	ldr	ip, [pc, #12]	; 15680 <close_stdout@@Base+0x1b50>
   15670:	add	r3, pc, r3
   15674:	ldr	r3, [r3, ip]
   15678:	b	14e08 <close_stdout@@Base+0x12d8>
   1567c:	andeq	r4, r1, r8, lsl #19
   15680:	andeq	r0, r0, r4, lsr r1
   15684:	mov	r2, r1
   15688:	mov	r1, r0
   1568c:	mov	r0, #0
   15690:	b	15668 <close_stdout@@Base+0x1b38>
   15694:	mvn	r2, #0
   15698:	b	15668 <close_stdout@@Base+0x1b38>
   1569c:	mov	r1, r0
   156a0:	mov	r0, #0
   156a4:	b	15694 <close_stdout@@Base+0x1b64>
   156a8:	push	{r4, r5, r6, r7, r8, lr}
   156ac:	mov	r8, #57344	; 0xe000
   156b0:	movt	r8, #32767	; 0x7fff
   156b4:	mov	r7, r0
   156b8:	mov	r6, r1
   156bc:	mov	r4, r2
   156c0:	mov	r0, r7
   156c4:	mov	r1, r6
   156c8:	mov	r2, r4
   156cc:	bl	112bc <read@plt>
   156d0:	subs	r5, r0, #0
   156d4:	bge	15700 <close_stdout@@Base+0x1bd0>
   156d8:	bl	114c0 <__errno_location@plt>
   156dc:	ldr	r3, [r0]
   156e0:	cmp	r3, #4
   156e4:	beq	156c0 <close_stdout@@Base+0x1b90>
   156e8:	cmp	r3, #22
   156ec:	bne	15700 <close_stdout@@Base+0x1bd0>
   156f0:	cmp	r4, r8
   156f4:	mov	r4, #57344	; 0xe000
   156f8:	movt	r4, #32767	; 0x7fff
   156fc:	bhi	156c0 <close_stdout@@Base+0x1b90>
   15700:	mov	r0, r5
   15704:	pop	{r4, r5, r6, r7, r8, pc}
   15708:	mov	r1, #0
   1570c:	mov	r2, #3
   15710:	b	17648 <close_stdout@@Base+0x3b18>
   15714:	push	{r4, r5, r6, r7, lr}
   15718:	cmp	r1, #0
   1571c:	sub	sp, sp, #36	; 0x24
   15720:	ldr	r7, [pc, #896]	; 15aa8 <close_stdout@@Base+0x1f78>
   15724:	mov	ip, r3
   15728:	mov	r5, r0
   1572c:	add	r7, pc, r7
   15730:	ldr	r4, [sp, #56]	; 0x38
   15734:	ldr	r6, [sp, #60]	; 0x3c
   15738:	beq	15a7c <close_stdout@@Base+0x1f4c>
   1573c:	str	r2, [sp]
   15740:	mov	r3, r1
   15744:	ldr	r2, [pc, #864]	; 15aac <close_stdout@@Base+0x1f7c>
   15748:	mov	r1, #1
   1574c:	str	ip, [sp, #4]
   15750:	add	r2, pc, r2
   15754:	bl	11514 <__fprintf_chk@plt>
   15758:	ldr	r1, [pc, #848]	; 15ab0 <close_stdout@@Base+0x1f80>
   1575c:	mov	r2, #5
   15760:	mov	r0, #0
   15764:	add	r1, pc, r1
   15768:	bl	11340 <dcgettext@plt>
   1576c:	ldr	r2, [pc, #832]	; 15ab4 <close_stdout@@Base+0x1f84>
   15770:	movw	ip, #2013	; 0x7dd
   15774:	mov	r1, #1
   15778:	ldr	r2, [r7, r2]
   1577c:	str	ip, [sp]
   15780:	mov	r3, r0
   15784:	mov	r0, r5
   15788:	bl	11514 <__fprintf_chk@plt>
   1578c:	ldr	r1, [pc, #804]	; 15ab8 <close_stdout@@Base+0x1f88>
   15790:	mov	r0, #0
   15794:	mov	r2, #5
   15798:	add	r1, pc, r1
   1579c:	bl	11340 <dcgettext@plt>
   157a0:	mov	r1, r5
   157a4:	bl	11298 <fputs_unlocked@plt>
   157a8:	cmp	r6, #9
   157ac:	addls	pc, pc, r6, lsl #2
   157b0:	b	15a98 <close_stdout@@Base+0x1f68>
   157b4:	b	15848 <close_stdout@@Base+0x1d18>
   157b8:	b	1584c <close_stdout@@Base+0x1d1c>
   157bc:	b	1587c <close_stdout@@Base+0x1d4c>
   157c0:	b	158b0 <close_stdout@@Base+0x1d80>
   157c4:	b	158ec <close_stdout@@Base+0x1dbc>
   157c8:	b	1592c <close_stdout@@Base+0x1dfc>
   157cc:	b	15974 <close_stdout@@Base+0x1e44>
   157d0:	b	159c4 <close_stdout@@Base+0x1e94>
   157d4:	b	15a1c <close_stdout@@Base+0x1eec>
   157d8:	b	157dc <close_stdout@@Base+0x1cac>
   157dc:	ldr	r1, [pc, #728]	; 15abc <close_stdout@@Base+0x1f8c>
   157e0:	mov	r0, #0
   157e4:	add	r1, pc, r1
   157e8:	mov	r2, #5
   157ec:	bl	11340 <dcgettext@plt>
   157f0:	ldm	r4, {r3, ip}
   157f4:	mov	r1, #1
   157f8:	str	ip, [sp]
   157fc:	ldr	ip, [r4, #8]
   15800:	str	ip, [sp, #4]
   15804:	ldr	ip, [r4, #12]
   15808:	str	ip, [sp, #8]
   1580c:	ldr	ip, [r4, #16]
   15810:	str	ip, [sp, #12]
   15814:	ldr	ip, [r4, #20]
   15818:	str	ip, [sp, #16]
   1581c:	ldr	ip, [r4, #24]
   15820:	str	ip, [sp, #20]
   15824:	ldr	ip, [r4, #28]
   15828:	str	ip, [sp, #24]
   1582c:	ldr	ip, [r4, #32]
   15830:	str	ip, [sp, #28]
   15834:	mov	r2, r0
   15838:	mov	r0, r5
   1583c:	bl	11514 <__fprintf_chk@plt>
   15840:	add	sp, sp, #36	; 0x24
   15844:	pop	{r4, r5, r6, r7, pc}
   15848:	bl	115c8 <abort@plt>
   1584c:	ldr	r1, [pc, #620]	; 15ac0 <close_stdout@@Base+0x1f90>
   15850:	mov	r2, #5
   15854:	mov	r0, #0
   15858:	add	r1, pc, r1
   1585c:	bl	11340 <dcgettext@plt>
   15860:	ldr	r3, [r4]
   15864:	mov	r1, #1
   15868:	mov	r2, r0
   1586c:	mov	r0, r5
   15870:	add	sp, sp, #36	; 0x24
   15874:	pop	{r4, r5, r6, r7, lr}
   15878:	b	11514 <__fprintf_chk@plt>
   1587c:	ldr	r1, [pc, #576]	; 15ac4 <close_stdout@@Base+0x1f94>
   15880:	mov	r2, #5
   15884:	mov	r0, #0
   15888:	add	r1, pc, r1
   1588c:	bl	11340 <dcgettext@plt>
   15890:	ldm	r4, {r3, ip}
   15894:	mov	r1, #1
   15898:	str	ip, [sp, #56]	; 0x38
   1589c:	mov	r2, r0
   158a0:	mov	r0, r5
   158a4:	add	sp, sp, #36	; 0x24
   158a8:	pop	{r4, r5, r6, r7, lr}
   158ac:	b	11514 <__fprintf_chk@plt>
   158b0:	ldr	r1, [pc, #528]	; 15ac8 <close_stdout@@Base+0x1f98>
   158b4:	mov	r2, #5
   158b8:	mov	r0, #0
   158bc:	add	r1, pc, r1
   158c0:	bl	11340 <dcgettext@plt>
   158c4:	ldm	r4, {r3, ip}
   158c8:	mov	r1, #1
   158cc:	str	ip, [sp, #56]	; 0x38
   158d0:	ldr	ip, [r4, #8]
   158d4:	str	ip, [sp, #60]	; 0x3c
   158d8:	mov	r2, r0
   158dc:	mov	r0, r5
   158e0:	add	sp, sp, #36	; 0x24
   158e4:	pop	{r4, r5, r6, r7, lr}
   158e8:	b	11514 <__fprintf_chk@plt>
   158ec:	ldr	r1, [pc, #472]	; 15acc <close_stdout@@Base+0x1f9c>
   158f0:	mov	r2, #5
   158f4:	mov	r0, #0
   158f8:	add	r1, pc, r1
   158fc:	bl	11340 <dcgettext@plt>
   15900:	ldm	r4, {r3, ip}
   15904:	mov	r1, #1
   15908:	str	ip, [sp]
   1590c:	ldr	ip, [r4, #8]
   15910:	str	ip, [sp, #4]
   15914:	ldr	ip, [r4, #12]
   15918:	str	ip, [sp, #8]
   1591c:	mov	r2, r0
   15920:	mov	r0, r5
   15924:	bl	11514 <__fprintf_chk@plt>
   15928:	b	15840 <close_stdout@@Base+0x1d10>
   1592c:	ldr	r1, [pc, #412]	; 15ad0 <close_stdout@@Base+0x1fa0>
   15930:	mov	r2, #5
   15934:	mov	r0, #0
   15938:	add	r1, pc, r1
   1593c:	bl	11340 <dcgettext@plt>
   15940:	ldm	r4, {r3, ip}
   15944:	mov	r1, #1
   15948:	str	ip, [sp]
   1594c:	ldr	ip, [r4, #8]
   15950:	str	ip, [sp, #4]
   15954:	ldr	ip, [r4, #12]
   15958:	str	ip, [sp, #8]
   1595c:	ldr	ip, [r4, #16]
   15960:	str	ip, [sp, #12]
   15964:	mov	r2, r0
   15968:	mov	r0, r5
   1596c:	bl	11514 <__fprintf_chk@plt>
   15970:	b	15840 <close_stdout@@Base+0x1d10>
   15974:	ldr	r1, [pc, #344]	; 15ad4 <close_stdout@@Base+0x1fa4>
   15978:	mov	r2, #5
   1597c:	mov	r0, #0
   15980:	add	r1, pc, r1
   15984:	bl	11340 <dcgettext@plt>
   15988:	ldm	r4, {r3, ip}
   1598c:	mov	r1, #1
   15990:	str	ip, [sp]
   15994:	ldr	ip, [r4, #8]
   15998:	str	ip, [sp, #4]
   1599c:	ldr	ip, [r4, #12]
   159a0:	str	ip, [sp, #8]
   159a4:	ldr	ip, [r4, #16]
   159a8:	str	ip, [sp, #12]
   159ac:	ldr	ip, [r4, #20]
   159b0:	str	ip, [sp, #16]
   159b4:	mov	r2, r0
   159b8:	mov	r0, r5
   159bc:	bl	11514 <__fprintf_chk@plt>
   159c0:	b	15840 <close_stdout@@Base+0x1d10>
   159c4:	ldr	r1, [pc, #268]	; 15ad8 <close_stdout@@Base+0x1fa8>
   159c8:	mov	r2, #5
   159cc:	mov	r0, #0
   159d0:	add	r1, pc, r1
   159d4:	bl	11340 <dcgettext@plt>
   159d8:	ldm	r4, {r3, ip}
   159dc:	mov	r1, #1
   159e0:	str	ip, [sp]
   159e4:	ldr	ip, [r4, #8]
   159e8:	str	ip, [sp, #4]
   159ec:	ldr	ip, [r4, #12]
   159f0:	str	ip, [sp, #8]
   159f4:	ldr	ip, [r4, #16]
   159f8:	str	ip, [sp, #12]
   159fc:	ldr	ip, [r4, #20]
   15a00:	str	ip, [sp, #16]
   15a04:	ldr	ip, [r4, #24]
   15a08:	str	ip, [sp, #20]
   15a0c:	mov	r2, r0
   15a10:	mov	r0, r5
   15a14:	bl	11514 <__fprintf_chk@plt>
   15a18:	b	15840 <close_stdout@@Base+0x1d10>
   15a1c:	ldr	r1, [pc, #184]	; 15adc <close_stdout@@Base+0x1fac>
   15a20:	mov	r2, #5
   15a24:	mov	r0, #0
   15a28:	add	r1, pc, r1
   15a2c:	bl	11340 <dcgettext@plt>
   15a30:	ldm	r4, {r3, ip}
   15a34:	mov	r1, #1
   15a38:	str	ip, [sp]
   15a3c:	ldr	ip, [r4, #8]
   15a40:	str	ip, [sp, #4]
   15a44:	ldr	ip, [r4, #12]
   15a48:	str	ip, [sp, #8]
   15a4c:	ldr	ip, [r4, #16]
   15a50:	str	ip, [sp, #12]
   15a54:	ldr	ip, [r4, #20]
   15a58:	str	ip, [sp, #16]
   15a5c:	ldr	ip, [r4, #24]
   15a60:	str	ip, [sp, #20]
   15a64:	ldr	ip, [r4, #28]
   15a68:	str	ip, [sp, #24]
   15a6c:	mov	r2, r0
   15a70:	mov	r0, r5
   15a74:	bl	11514 <__fprintf_chk@plt>
   15a78:	b	15840 <close_stdout@@Base+0x1d10>
   15a7c:	str	r3, [sp]
   15a80:	mov	r3, r2
   15a84:	ldr	r2, [pc, #84]	; 15ae0 <close_stdout@@Base+0x1fb0>
   15a88:	mov	r1, #1
   15a8c:	add	r2, pc, r2
   15a90:	bl	11514 <__fprintf_chk@plt>
   15a94:	b	15758 <close_stdout@@Base+0x1c28>
   15a98:	ldr	r1, [pc, #68]	; 15ae4 <close_stdout@@Base+0x1fb4>
   15a9c:	mov	r0, #0
   15aa0:	add	r1, pc, r1
   15aa4:	b	157e8 <close_stdout@@Base+0x1cb8>
   15aa8:	andeq	r4, r1, ip, asr #17
   15aac:	andeq	r3, r0, r8, lsr lr
   15ab0:	andeq	r3, r0, r8, lsr lr
   15ab4:	andeq	r0, r0, r8, ror #2
   15ab8:	andeq	r3, r0, r8, lsl #28
   15abc:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   15ac0:	andeq	r3, r0, r4, lsl lr
   15ac4:	strdeq	r3, [r0], -r4
   15ac8:	ldrdeq	r3, [r0], -r8
   15acc:			; <UNDEFINED> instruction: 0x00003db8
   15ad0:	muleq	r0, r8, sp
   15ad4:	andeq	r3, r0, r4, ror sp
   15ad8:	andeq	r3, r0, ip, asr #26
   15adc:	andeq	r3, r0, r0, lsr #26
   15ae0:	andeq	r3, r0, r8, lsl #22
   15ae4:	andeq	r3, r0, ip, lsl #26
   15ae8:	push	{r4, r5, lr}
   15aec:	sub	sp, sp, #12
   15af0:	ldr	r5, [sp, #24]
   15af4:	ldr	ip, [r5]
   15af8:	cmp	ip, #0
   15afc:	beq	15b18 <close_stdout@@Base+0x1fe8>
   15b00:	mov	lr, r5
   15b04:	mov	ip, #0
   15b08:	ldr	r4, [lr, #4]!
   15b0c:	add	ip, ip, #1
   15b10:	cmp	r4, #0
   15b14:	bne	15b08 <close_stdout@@Base+0x1fd8>
   15b18:	stm	sp, {r5, ip}
   15b1c:	bl	15714 <close_stdout@@Base+0x1be4>
   15b20:	add	sp, sp, #12
   15b24:	pop	{r4, r5, pc}
   15b28:	push	{r4, r5, r6, r7, lr}
   15b2c:	sub	sp, sp, #60	; 0x3c
   15b30:	ldr	r4, [pc, #100]	; 15b9c <close_stdout@@Base+0x206c>
   15b34:	mov	ip, #0
   15b38:	ldr	r5, [pc, #96]	; 15ba0 <close_stdout@@Base+0x2070>
   15b3c:	mov	lr, ip
   15b40:	add	r4, pc, r4
   15b44:	ldr	r6, [sp, #80]	; 0x50
   15b48:	ldr	r7, [r4, r5]
   15b4c:	add	r5, sp, #12
   15b50:	ldr	r4, [r7]
   15b54:	str	r4, [sp, #52]	; 0x34
   15b58:	ldr	r4, [r6, ip]
   15b5c:	cmp	r4, #0
   15b60:	str	r4, [r5, ip]
   15b64:	beq	15b78 <close_stdout@@Base+0x2048>
   15b68:	add	lr, lr, #1
   15b6c:	add	ip, ip, #4
   15b70:	cmp	lr, #10
   15b74:	bne	15b58 <close_stdout@@Base+0x2028>
   15b78:	stm	sp, {r5, lr}
   15b7c:	bl	15714 <close_stdout@@Base+0x1be4>
   15b80:	ldr	r2, [sp, #52]	; 0x34
   15b84:	ldr	r3, [r7]
   15b88:	cmp	r2, r3
   15b8c:	bne	15b98 <close_stdout@@Base+0x2068>
   15b90:	add	sp, sp, #60	; 0x3c
   15b94:	pop	{r4, r5, r6, r7, pc}
   15b98:	bl	1134c <__stack_chk_fail@plt>
   15b9c:			; <UNDEFINED> instruction: 0x000144b8
   15ba0:	andeq	r0, r0, r8, lsr r1
   15ba4:	push	{r3}		; (str r3, [sp, #-4]!)
   15ba8:	push	{r4, lr}
   15bac:	sub	sp, sp, #20
   15bb0:	ldr	lr, [pc, #72]	; 15c00 <close_stdout@@Base+0x20d0>
   15bb4:	add	ip, sp, #32
   15bb8:	ldr	r4, [pc, #68]	; 15c04 <close_stdout@@Base+0x20d4>
   15bbc:	add	lr, pc, lr
   15bc0:	ldr	r3, [sp, #28]
   15bc4:	ldr	r4, [lr, r4]
   15bc8:	str	ip, [sp]
   15bcc:	str	ip, [sp, #8]
   15bd0:	ldr	ip, [r4]
   15bd4:	str	ip, [sp, #12]
   15bd8:	bl	15b28 <close_stdout@@Base+0x1ff8>
   15bdc:	ldr	r2, [sp, #12]
   15be0:	ldr	r3, [r4]
   15be4:	cmp	r2, r3
   15be8:	bne	15bfc <close_stdout@@Base+0x20cc>
   15bec:	add	sp, sp, #20
   15bf0:	pop	{r4, lr}
   15bf4:	add	sp, sp, #4
   15bf8:	bx	lr
   15bfc:	bl	1134c <__stack_chk_fail@plt>
   15c00:	andeq	r4, r1, ip, lsr r4
   15c04:	andeq	r0, r0, r8, lsr r1
   15c08:	ldr	r1, [pc, #132]	; 15c94 <close_stdout@@Base+0x2164>
   15c0c:	mov	r2, #5
   15c10:	push	{r4, lr}
   15c14:	add	r1, pc, r1
   15c18:	mov	r0, #0
   15c1c:	ldr	r4, [pc, #116]	; 15c98 <close_stdout@@Base+0x2168>
   15c20:	bl	11340 <dcgettext@plt>
   15c24:	ldr	r2, [pc, #112]	; 15c9c <close_stdout@@Base+0x216c>
   15c28:	add	r4, pc, r4
   15c2c:	add	r2, pc, r2
   15c30:	mov	r1, r0
   15c34:	mov	r0, #1
   15c38:	bl	114fc <__printf_chk@plt>
   15c3c:	ldr	r1, [pc, #92]	; 15ca0 <close_stdout@@Base+0x2170>
   15c40:	mov	r2, #5
   15c44:	mov	r0, #0
   15c48:	add	r1, pc, r1
   15c4c:	bl	11340 <dcgettext@plt>
   15c50:	ldr	r2, [pc, #76]	; 15ca4 <close_stdout@@Base+0x2174>
   15c54:	ldr	r3, [pc, #76]	; 15ca8 <close_stdout@@Base+0x2178>
   15c58:	add	r2, pc, r2
   15c5c:	add	r3, pc, r3
   15c60:	mov	r1, r0
   15c64:	mov	r0, #1
   15c68:	bl	114fc <__printf_chk@plt>
   15c6c:	ldr	r1, [pc, #56]	; 15cac <close_stdout@@Base+0x217c>
   15c70:	mov	r0, #0
   15c74:	mov	r2, #5
   15c78:	add	r1, pc, r1
   15c7c:	bl	11340 <dcgettext@plt>
   15c80:	ldr	r3, [pc, #40]	; 15cb0 <close_stdout@@Base+0x2180>
   15c84:	ldr	r3, [r4, r3]
   15c88:	pop	{r4, lr}
   15c8c:	ldr	r1, [r3]
   15c90:	b	11298 <fputs_unlocked@plt>
   15c94:	ldrdeq	r3, [r0], -r4
   15c98:	ldrdeq	r4, [r1], -r0
   15c9c:	ldrdeq	r3, [r0], -r4
   15ca0:	ldrdeq	r3, [r0], -r0
   15ca4:	andeq	r3, r0, r0, asr #7
   15ca8:	andeq	r3, r0, ip, asr #7
   15cac:			; <UNDEFINED> instruction: 0x00003bb4
   15cb0:	andeq	r0, r0, r8, asr r1
   15cb4:	push	{r4, lr}
   15cb8:	mov	r4, r0
   15cbc:	bl	11418 <malloc@plt>
   15cc0:	rsbs	r3, r0, #1
   15cc4:	movcc	r3, #0
   15cc8:	cmp	r4, #0
   15ccc:	moveq	r3, #0
   15cd0:	cmp	r3, #0
   15cd4:	popeq	{r4, pc}
   15cd8:	bl	13034 <__assert_fail@plt+0x1a48>
   15cdc:	push	{r3, r4, r5, lr}
   15ce0:	mov	r4, r0
   15ce4:	mvn	r0, #0
   15ce8:	mov	r5, r1
   15cec:	bl	17d64 <close_stdout@@Base+0x4234>
   15cf0:	cmp	r0, r4
   15cf4:	bcc	15d04 <close_stdout@@Base+0x21d4>
   15cf8:	mul	r0, r4, r5
   15cfc:	pop	{r3, r4, r5, lr}
   15d00:	b	15cb4 <close_stdout@@Base+0x2184>
   15d04:	bl	13034 <__assert_fail@plt+0x1a48>
   15d08:	b	15cb4 <close_stdout@@Base+0x2184>
   15d0c:	rsbs	r3, r1, #1
   15d10:	push	{r4, lr}
   15d14:	movcc	r3, #0
   15d18:	cmp	r0, #0
   15d1c:	mov	r4, r1
   15d20:	moveq	r3, #0
   15d24:	cmp	r3, #0
   15d28:	bne	15d4c <close_stdout@@Base+0x221c>
   15d2c:	bl	11370 <realloc@plt>
   15d30:	rsbs	r3, r0, #1
   15d34:	movcc	r3, #0
   15d38:	cmp	r4, #0
   15d3c:	moveq	r3, #0
   15d40:	cmp	r3, #0
   15d44:	popeq	{r4, pc}
   15d48:	bl	13034 <__assert_fail@plt+0x1a48>
   15d4c:	bl	112e0 <free@plt>
   15d50:	mov	r0, #0
   15d54:	pop	{r4, pc}
   15d58:	push	{r4, r5, r6, lr}
   15d5c:	mov	r5, r1
   15d60:	mov	r6, r0
   15d64:	mov	r1, r2
   15d68:	mvn	r0, #0
   15d6c:	mov	r4, r2
   15d70:	bl	17d64 <close_stdout@@Base+0x4234>
   15d74:	cmp	r0, r5
   15d78:	bcc	15d8c <close_stdout@@Base+0x225c>
   15d7c:	mov	r0, r6
   15d80:	mul	r1, r5, r4
   15d84:	pop	{r4, r5, r6, lr}
   15d88:	b	15d0c <close_stdout@@Base+0x21dc>
   15d8c:	bl	13034 <__assert_fail@plt+0x1a48>
   15d90:	push	{r3, r4, r5, r6, r7, lr}
   15d94:	subs	r7, r0, #0
   15d98:	mov	r5, r1
   15d9c:	mov	r6, r2
   15da0:	ldr	r4, [r1]
   15da4:	beq	15ddc <close_stdout@@Base+0x22ac>
   15da8:	movw	r0, #43690	; 0xaaaa
   15dac:	mov	r1, r2
   15db0:	bfi	r0, r0, #16, #16
   15db4:	bl	17d64 <close_stdout@@Base+0x4234>
   15db8:	cmp	r4, r0
   15dbc:	addcc	r3, r4, #1
   15dc0:	addcc	r4, r4, r3, lsr #1
   15dc4:	bcs	15e00 <close_stdout@@Base+0x22d0>
   15dc8:	str	r4, [r5]
   15dcc:	mov	r0, r7
   15dd0:	mul	r1, r6, r4
   15dd4:	pop	{r3, r4, r5, r6, r7, lr}
   15dd8:	b	15d0c <close_stdout@@Base+0x21dc>
   15ddc:	cmp	r4, #0
   15de0:	bne	15dc8 <close_stdout@@Base+0x2298>
   15de4:	mov	r0, #64	; 0x40
   15de8:	mov	r1, r2
   15dec:	bl	17d64 <close_stdout@@Base+0x4234>
   15df0:	cmp	r0, #0
   15df4:	movne	r4, r0
   15df8:	addeq	r4, r0, #1
   15dfc:	b	15dc8 <close_stdout@@Base+0x2298>
   15e00:	bl	13034 <__assert_fail@plt+0x1a48>
   15e04:	cmp	r0, #0
   15e08:	push	{r3, lr}
   15e0c:	ldr	r3, [r1]
   15e10:	beq	15e3c <close_stdout@@Base+0x230c>
   15e14:	movw	r2, #43689	; 0xaaa9
   15e18:	movt	r2, #43690	; 0xaaaa
   15e1c:	cmp	r3, r2
   15e20:	addls	r2, r3, #1
   15e24:	addls	r3, r3, r2, lsr #1
   15e28:	bhi	15e54 <close_stdout@@Base+0x2324>
   15e2c:	str	r3, [r1]
   15e30:	mov	r1, r3
   15e34:	pop	{r3, lr}
   15e38:	b	15d0c <close_stdout@@Base+0x21dc>
   15e3c:	cmp	r3, #0
   15e40:	moveq	r3, #64	; 0x40
   15e44:	str	r3, [r1]
   15e48:	mov	r1, r3
   15e4c:	pop	{r3, lr}
   15e50:	b	15d0c <close_stdout@@Base+0x21dc>
   15e54:	bl	13034 <__assert_fail@plt+0x1a48>
   15e58:	push	{r4, lr}
   15e5c:	mov	r4, r0
   15e60:	bl	15cb4 <close_stdout@@Base+0x2184>
   15e64:	mov	r2, r4
   15e68:	mov	r1, #0
   15e6c:	pop	{r4, lr}
   15e70:	b	114e4 <memset@plt>
   15e74:	push	{r3, lr}
   15e78:	bl	1128c <calloc@plt>
   15e7c:	cmp	r0, #0
   15e80:	popne	{r3, pc}
   15e84:	bl	13034 <__assert_fail@plt+0x1a48>
   15e88:	push	{r3, r4, r5, lr}
   15e8c:	mov	r4, r1
   15e90:	mov	r5, r0
   15e94:	mov	r0, r1
   15e98:	bl	15cb4 <close_stdout@@Base+0x2184>
   15e9c:	mov	r1, r5
   15ea0:	mov	r2, r4
   15ea4:	pop	{r3, r4, r5, lr}
   15ea8:	b	112f8 <memcpy@plt>
   15eac:	push	{r4, lr}
   15eb0:	mov	r4, r0
   15eb4:	bl	11484 <strlen@plt>
   15eb8:	add	r1, r0, #1
   15ebc:	mov	r0, r4
   15ec0:	pop	{r4, lr}
   15ec4:	b	15e88 <close_stdout@@Base+0x2358>
   15ec8:	ldr	ip, [pc, #2612]	; 16904 <close_stdout@@Base+0x2dd4>
   15ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ed0:	mov	r8, r2
   15ed4:	ldr	r2, [pc, #2604]	; 16908 <close_stdout@@Base+0x2dd8>
   15ed8:	add	ip, pc, ip
   15edc:	mov	r9, r3
   15ee0:	sub	sp, sp, #60	; 0x3c
   15ee4:	mov	r3, ip
   15ee8:	cmp	r8, #36	; 0x24
   15eec:	ldr	r7, [ip, r2]
   15ef0:	mov	r4, r0
   15ef4:	mov	r6, r1
   15ef8:	ldr	fp, [sp, #96]	; 0x60
   15efc:	ldr	r3, [r7]
   15f00:	str	r3, [sp, #52]	; 0x34
   15f04:	bhi	168d0 <close_stdout@@Base+0x2da0>
   15f08:	cmp	r1, #0
   15f0c:	mov	r5, #0
   15f10:	addeq	r6, sp, #48	; 0x30
   15f14:	bl	114c0 <__errno_location@plt>
   15f18:	mov	r2, r8
   15f1c:	mov	r3, r5
   15f20:	mov	r1, r6
   15f24:	str	r5, [r0]
   15f28:	mov	sl, r0
   15f2c:	mov	r0, r4
   15f30:	bl	1158c <__strtoll_internal@plt>
   15f34:	ldr	r8, [r6]
   15f38:	cmp	r8, r4
   15f3c:	strd	r0, [sp]
   15f40:	beq	160dc <close_stdout@@Base+0x25ac>
   15f44:	ldr	sl, [sl]
   15f48:	cmp	sl, #0
   15f4c:	bne	15f88 <close_stdout@@Base+0x2458>
   15f50:	cmp	fp, #0
   15f54:	beq	16120 <close_stdout@@Base+0x25f0>
   15f58:	ldrb	r4, [r8]
   15f5c:	cmp	r4, #0
   15f60:	bne	15f98 <close_stdout@@Base+0x2468>
   15f64:	ldrd	r2, [sp]
   15f68:	mov	r0, sl
   15f6c:	strd	r2, [r9]
   15f70:	ldr	r2, [sp, #52]	; 0x34
   15f74:	ldr	r3, [r7]
   15f78:	cmp	r2, r3
   15f7c:	bne	168cc <close_stdout@@Base+0x2d9c>
   15f80:	add	sp, sp, #60	; 0x3c
   15f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f88:	cmp	sl, #34	; 0x22
   15f8c:	beq	16118 <close_stdout@@Base+0x25e8>
   15f90:	mov	r0, #4
   15f94:	b	15f70 <close_stdout@@Base+0x2440>
   15f98:	mov	r0, fp
   15f9c:	mov	r1, r4
   15fa0:	bl	11490 <strchr@plt>
   15fa4:	cmp	r0, #0
   15fa8:	beq	160cc <close_stdout@@Base+0x259c>
   15fac:	mov	r0, fp
   15fb0:	mov	r1, #48	; 0x30
   15fb4:	bl	11490 <strchr@plt>
   15fb8:	cmp	r0, #0
   15fbc:	beq	15fdc <close_stdout@@Base+0x24ac>
   15fc0:	ldrb	r3, [r8, #1]
   15fc4:	cmp	r3, #68	; 0x44
   15fc8:	beq	16130 <close_stdout@@Base+0x2600>
   15fcc:	cmp	r3, #105	; 0x69
   15fd0:	beq	1678c <close_stdout@@Base+0x2c5c>
   15fd4:	cmp	r3, #66	; 0x42
   15fd8:	beq	16130 <close_stdout@@Base+0x2600>
   15fdc:	mov	fp, #1
   15fe0:	mov	r3, #1024	; 0x400
   15fe4:	sub	r4, r4, #66	; 0x42
   15fe8:	cmp	r4, #53	; 0x35
   15fec:	addls	pc, pc, r4, lsl #2
   15ff0:	b	1677c <close_stdout@@Base+0x2c4c>
   15ff4:	b	1648c <close_stdout@@Base+0x295c>
   15ff8:	b	1677c <close_stdout@@Base+0x2c4c>
   15ffc:	b	1677c <close_stdout@@Base+0x2c4c>
   16000:	b	163dc <close_stdout@@Base+0x28ac>
   16004:	b	1677c <close_stdout@@Base+0x2c4c>
   16008:	b	16344 <close_stdout@@Base+0x2814>
   1600c:	b	1677c <close_stdout@@Base+0x2c4c>
   16010:	b	1677c <close_stdout@@Base+0x2c4c>
   16014:	b	1677c <close_stdout@@Base+0x2c4c>
   16018:	b	16704 <close_stdout@@Base+0x2bd4>
   1601c:	b	1677c <close_stdout@@Base+0x2c4c>
   16020:	b	16634 <close_stdout@@Base+0x2b04>
   16024:	b	1677c <close_stdout@@Base+0x2c4c>
   16028:	b	1677c <close_stdout@@Base+0x2c4c>
   1602c:	b	16584 <close_stdout@@Base+0x2a54>
   16030:	b	1677c <close_stdout@@Base+0x2c4c>
   16034:	b	1677c <close_stdout@@Base+0x2c4c>
   16038:	b	1677c <close_stdout@@Base+0x2c4c>
   1603c:	b	164dc <close_stdout@@Base+0x29ac>
   16040:	b	1677c <close_stdout@@Base+0x2c4c>
   16044:	b	1677c <close_stdout@@Base+0x2c4c>
   16048:	b	1677c <close_stdout@@Base+0x2c4c>
   1604c:	b	1677c <close_stdout@@Base+0x2c4c>
   16050:	b	1625c <close_stdout@@Base+0x272c>
   16054:	b	161ac <close_stdout@@Base+0x267c>
   16058:	b	1677c <close_stdout@@Base+0x2c4c>
   1605c:	b	1677c <close_stdout@@Base+0x2c4c>
   16060:	b	1677c <close_stdout@@Base+0x2c4c>
   16064:	b	1677c <close_stdout@@Base+0x2c4c>
   16068:	b	1677c <close_stdout@@Base+0x2c4c>
   1606c:	b	1677c <close_stdout@@Base+0x2c4c>
   16070:	b	1677c <close_stdout@@Base+0x2c4c>
   16074:	b	1615c <close_stdout@@Base+0x262c>
   16078:	b	1613c <close_stdout@@Base+0x260c>
   1607c:	b	1677c <close_stdout@@Base+0x2c4c>
   16080:	b	1677c <close_stdout@@Base+0x2c4c>
   16084:	b	1677c <close_stdout@@Base+0x2c4c>
   16088:	b	16344 <close_stdout@@Base+0x2814>
   1608c:	b	1677c <close_stdout@@Base+0x2c4c>
   16090:	b	1677c <close_stdout@@Base+0x2c4c>
   16094:	b	1677c <close_stdout@@Base+0x2c4c>
   16098:	b	16704 <close_stdout@@Base+0x2bd4>
   1609c:	b	1677c <close_stdout@@Base+0x2c4c>
   160a0:	b	16634 <close_stdout@@Base+0x2b04>
   160a4:	b	1677c <close_stdout@@Base+0x2c4c>
   160a8:	b	1677c <close_stdout@@Base+0x2c4c>
   160ac:	b	1677c <close_stdout@@Base+0x2c4c>
   160b0:	b	1677c <close_stdout@@Base+0x2c4c>
   160b4:	b	1677c <close_stdout@@Base+0x2c4c>
   160b8:	b	1677c <close_stdout@@Base+0x2c4c>
   160bc:	b	164dc <close_stdout@@Base+0x29ac>
   160c0:	b	1677c <close_stdout@@Base+0x2c4c>
   160c4:	b	1677c <close_stdout@@Base+0x2c4c>
   160c8:	b	1630c <close_stdout@@Base+0x27dc>
   160cc:	ldrd	r2, [sp]
   160d0:	orr	r0, sl, #2
   160d4:	strd	r2, [r9]
   160d8:	b	15f70 <close_stdout@@Base+0x2440>
   160dc:	cmp	fp, r5
   160e0:	beq	15f90 <close_stdout@@Base+0x2460>
   160e4:	ldrb	r4, [r4]
   160e8:	cmp	r4, r5
   160ec:	beq	15f90 <close_stdout@@Base+0x2460>
   160f0:	mov	r0, fp
   160f4:	mov	r1, r4
   160f8:	bl	11490 <strchr@plt>
   160fc:	cmp	r0, r5
   16100:	beq	15f90 <close_stdout@@Base+0x2460>
   16104:	mov	r0, #1
   16108:	mov	r1, #0
   1610c:	mov	sl, r5
   16110:	strd	r0, [sp]
   16114:	b	15fac <close_stdout@@Base+0x247c>
   16118:	mov	sl, #1
   1611c:	b	15f50 <close_stdout@@Base+0x2420>
   16120:	ldrd	r0, [sp]
   16124:	strd	r0, [r9]
   16128:	mov	r0, sl
   1612c:	b	15f70 <close_stdout@@Base+0x2440>
   16130:	mov	fp, #2
   16134:	mov	r3, #1000	; 0x3e8
   16138:	b	15fe4 <close_stdout@@Base+0x24b4>
   1613c:	mov	r5, #0
   16140:	add	r3, r8, fp
   16144:	str	r3, [r6]
   16148:	ldrb	r3, [r8, fp]
   1614c:	orr	sl, sl, r5
   16150:	cmp	r3, #0
   16154:	orrne	sl, sl, #2
   16158:	b	15f64 <close_stdout@@Base+0x2434>
   1615c:	ldrd	r0, [sp]
   16160:	mov	r3, #0
   16164:	movt	r3, #65472	; 0xffc0
   16168:	mov	r2, #0
   1616c:	cmp	r0, r2
   16170:	sbcs	r1, r1, r3
   16174:	blt	167c4 <close_stdout@@Base+0x2c94>
   16178:	ldrd	r2, [sp]
   1617c:	cmp	r2, #0
   16180:	sbcs	r3, r3, #4194304	; 0x400000
   16184:	bge	16838 <close_stdout@@Base+0x2d08>
   16188:	ldr	r0, [sp, #4]
   1618c:	mov	r5, #0
   16190:	ldr	r1, [sp]
   16194:	lsl	r3, r0, #9
   16198:	lsl	r2, r1, #9
   1619c:	orr	r3, r3, r1, lsr #23
   161a0:	str	r2, [sp]
   161a4:	str	r3, [sp, #4]
   161a8:	b	16140 <close_stdout@@Base+0x2610>
   161ac:	mov	r0, r3
   161b0:	asr	r1, r3, #31
   161b4:	strd	r0, [sp, #8]
   161b8:	mov	r0, #0
   161bc:	mov	r1, #-2147483648	; 0x80000000
   161c0:	ldrd	r2, [sp, #8]
   161c4:	bl	17f70 <close_stdout@@Base+0x4440>
   161c8:	mov	r4, #7
   161cc:	str	sl, [sp, #28]
   161d0:	mov	r5, #0
   161d4:	str	fp, [sp, #32]
   161d8:	str	r8, [sp, #36]	; 0x24
   161dc:	str	r6, [sp, #40]	; 0x28
   161e0:	str	r9, [sp, #44]	; 0x2c
   161e4:	ldrd	sl, [sp]
   161e8:	strd	r0, [sp, #16]
   161ec:	mov	r8, r0
   161f0:	str	r7, [sp, #16]
   161f4:	mov	r9, r1
   161f8:	ldrd	r6, [sp, #8]
   161fc:	b	16240 <close_stdout@@Base+0x2710>
   16200:	mov	r2, r6
   16204:	mvn	r0, #0
   16208:	mvn	r1, #-2147483648	; 0x80000000
   1620c:	mov	r3, r7
   16210:	bl	17f70 <close_stdout@@Base+0x4440>
   16214:	cmp	r0, sl
   16218:	sbcs	r2, r1, fp
   1621c:	blt	167f8 <close_stdout@@Base+0x2cc8>
   16220:	mul	r2, sl, r7
   16224:	mov	r3, #0
   16228:	mla	r2, r6, fp, r2
   1622c:	umull	sl, fp, sl, r6
   16230:	add	fp, r2, fp
   16234:	subs	r4, r4, #1
   16238:	orr	r5, r5, r3
   1623c:	beq	167a4 <close_stdout@@Base+0x2c74>
   16240:	cmp	sl, r8
   16244:	sbcs	r1, fp, r9
   16248:	bge	16200 <close_stdout@@Base+0x26d0>
   1624c:	mov	sl, #0
   16250:	mov	fp, #-2147483648	; 0x80000000
   16254:	mov	r3, #1
   16258:	b	16234 <close_stdout@@Base+0x2704>
   1625c:	mov	r0, r3
   16260:	asr	r1, r3, #31
   16264:	strd	r0, [sp, #8]
   16268:	mov	r0, #0
   1626c:	mov	r1, #-2147483648	; 0x80000000
   16270:	ldrd	r2, [sp, #8]
   16274:	bl	17f70 <close_stdout@@Base+0x4440>
   16278:	mov	r4, #8
   1627c:	str	sl, [sp, #28]
   16280:	mov	r5, #0
   16284:	str	fp, [sp, #32]
   16288:	str	r8, [sp, #36]	; 0x24
   1628c:	str	r6, [sp, #40]	; 0x28
   16290:	str	r9, [sp, #44]	; 0x2c
   16294:	ldrd	sl, [sp]
   16298:	strd	r0, [sp, #16]
   1629c:	mov	r8, r0
   162a0:	str	r7, [sp, #16]
   162a4:	mov	r9, r1
   162a8:	ldrd	r6, [sp, #8]
   162ac:	b	162f0 <close_stdout@@Base+0x27c0>
   162b0:	mov	r2, r6
   162b4:	mvn	r0, #0
   162b8:	mvn	r1, #-2147483648	; 0x80000000
   162bc:	mov	r3, r7
   162c0:	bl	17f70 <close_stdout@@Base+0x4440>
   162c4:	cmp	r0, sl
   162c8:	sbcs	r2, r1, fp
   162cc:	blt	167e8 <close_stdout@@Base+0x2cb8>
   162d0:	mul	r2, sl, r7
   162d4:	mov	r3, #0
   162d8:	mla	r2, r6, fp, r2
   162dc:	umull	sl, fp, sl, r6
   162e0:	add	fp, r2, fp
   162e4:	subs	r4, r4, #1
   162e8:	orr	r5, r5, r3
   162ec:	beq	167a4 <close_stdout@@Base+0x2c74>
   162f0:	cmp	sl, r8
   162f4:	sbcs	r1, fp, r9
   162f8:	bge	162b0 <close_stdout@@Base+0x2780>
   162fc:	mov	sl, #0
   16300:	mov	fp, #-2147483648	; 0x80000000
   16304:	mov	r3, #1
   16308:	b	162e4 <close_stdout@@Base+0x27b4>
   1630c:	ldrd	r0, [sp]
   16310:	cmp	r0, #0
   16314:	sbcs	r1, r1, #-1073741824	; 0xc0000000
   16318:	blt	167c4 <close_stdout@@Base+0x2c94>
   1631c:	ldrd	r2, [sp]
   16320:	cmp	r2, #0
   16324:	sbcs	r3, r3, #1073741824	; 0x40000000
   16328:	bge	16838 <close_stdout@@Base+0x2d08>
   1632c:	ldrd	r0, [sp]
   16330:	mov	r5, #0
   16334:	adds	r0, r0, r0
   16338:	adc	r1, r1, r1
   1633c:	strd	r0, [sp]
   16340:	b	16140 <close_stdout@@Base+0x2610>
   16344:	mov	r0, r3
   16348:	asr	r1, r3, #31
   1634c:	strd	r0, [sp, #8]
   16350:	mov	r0, #0
   16354:	mov	r1, #-2147483648	; 0x80000000
   16358:	ldrd	r2, [sp, #8]
   1635c:	bl	17f70 <close_stdout@@Base+0x4440>
   16360:	str	r6, [sp, #28]
   16364:	str	r7, [sp, #32]
   16368:	mov	r4, #3
   1636c:	ldrd	r6, [sp]
   16370:	mov	r5, #0
   16374:	strd	r0, [sp, #16]
   16378:	ldrd	r2, [sp, #16]
   1637c:	cmp	r6, r2
   16380:	sbcs	r3, r7, r3
   16384:	blt	16808 <close_stdout@@Base+0x2cd8>
   16388:	ldrd	r2, [sp, #8]
   1638c:	mvn	r0, #0
   16390:	mvn	r1, #-2147483648	; 0x80000000
   16394:	bl	17f70 <close_stdout@@Base+0x4440>
   16398:	cmp	r0, r6
   1639c:	sbcs	r2, r1, r7
   163a0:	blt	1687c <close_stdout@@Base+0x2d4c>
   163a4:	ldr	r3, [sp, #12]
   163a8:	ldr	r0, [sp, #8]
   163ac:	mul	r2, r6, r3
   163b0:	mov	r3, #0
   163b4:	mla	r2, r0, r7, r2
   163b8:	umull	r6, r7, r6, r0
   163bc:	add	r7, r2, r7
   163c0:	subs	r4, r4, #1
   163c4:	orr	r5, r5, r3
   163c8:	bne	16378 <close_stdout@@Base+0x2848>
   163cc:	strd	r6, [sp]
   163d0:	ldr	r6, [sp, #28]
   163d4:	ldr	r7, [sp, #32]
   163d8:	b	16140 <close_stdout@@Base+0x2610>
   163dc:	mov	r0, r3
   163e0:	asr	r1, r3, #31
   163e4:	strd	r0, [sp, #8]
   163e8:	mov	r0, #0
   163ec:	mov	r1, #-2147483648	; 0x80000000
   163f0:	ldrd	r2, [sp, #8]
   163f4:	bl	17f70 <close_stdout@@Base+0x4440>
   163f8:	mov	r4, #6
   163fc:	str	sl, [sp, #28]
   16400:	mov	r5, #0
   16404:	str	fp, [sp, #32]
   16408:	str	r8, [sp, #36]	; 0x24
   1640c:	str	r6, [sp, #40]	; 0x28
   16410:	str	r9, [sp, #44]	; 0x2c
   16414:	ldrd	sl, [sp]
   16418:	strd	r0, [sp, #16]
   1641c:	mov	r8, r0
   16420:	str	r7, [sp, #16]
   16424:	mov	r9, r1
   16428:	ldrd	r6, [sp, #8]
   1642c:	b	16470 <close_stdout@@Base+0x2940>
   16430:	mov	r2, r6
   16434:	mvn	r0, #0
   16438:	mvn	r1, #-2147483648	; 0x80000000
   1643c:	mov	r3, r7
   16440:	bl	17f70 <close_stdout@@Base+0x4440>
   16444:	cmp	r0, sl
   16448:	sbcs	r2, r1, fp
   1644c:	blt	16818 <close_stdout@@Base+0x2ce8>
   16450:	mul	r2, sl, r7
   16454:	mov	r3, #0
   16458:	mla	r2, r6, fp, r2
   1645c:	umull	sl, fp, sl, r6
   16460:	add	fp, r2, fp
   16464:	subs	r4, r4, #1
   16468:	orr	r5, r5, r3
   1646c:	beq	167a4 <close_stdout@@Base+0x2c74>
   16470:	cmp	sl, r8
   16474:	sbcs	r1, fp, r9
   16478:	bge	16430 <close_stdout@@Base+0x2900>
   1647c:	mov	sl, #0
   16480:	mov	fp, #-2147483648	; 0x80000000
   16484:	mov	r3, #1
   16488:	b	16464 <close_stdout@@Base+0x2934>
   1648c:	ldrd	r0, [sp]
   16490:	mov	r3, #0
   16494:	movt	r3, #65504	; 0xffe0
   16498:	mov	r2, #0
   1649c:	cmp	r0, r2
   164a0:	sbcs	r1, r1, r3
   164a4:	blt	167c4 <close_stdout@@Base+0x2c94>
   164a8:	ldrd	r2, [sp]
   164ac:	cmp	r2, #0
   164b0:	sbcs	r3, r3, #2097152	; 0x200000
   164b4:	bge	16838 <close_stdout@@Base+0x2d08>
   164b8:	ldr	r0, [sp, #4]
   164bc:	mov	r5, #0
   164c0:	ldr	r1, [sp]
   164c4:	lsl	r3, r0, #10
   164c8:	lsl	r2, r1, #10
   164cc:	orr	r3, r3, r1, lsr #22
   164d0:	str	r2, [sp]
   164d4:	str	r3, [sp, #4]
   164d8:	b	16140 <close_stdout@@Base+0x2610>
   164dc:	mov	r0, r3
   164e0:	asr	r1, r3, #31
   164e4:	strd	r0, [sp, #16]
   164e8:	mov	r0, #0
   164ec:	ldrd	r2, [sp, #16]
   164f0:	mov	r1, #-2147483648	; 0x80000000
   164f4:	bl	17f70 <close_stdout@@Base+0x4440>
   164f8:	str	r8, [sp, #28]
   164fc:	str	r6, [sp, #32]
   16500:	mov	r4, #4
   16504:	str	r9, [sp, #36]	; 0x24
   16508:	mov	r5, #0
   1650c:	ldrd	r8, [sp, #16]
   16510:	str	r7, [sp, #16]
   16514:	ldrd	r6, [sp]
   16518:	strd	r0, [sp, #8]
   1651c:	ldrd	r2, [sp, #8]
   16520:	cmp	r6, r2
   16524:	sbcs	r3, r7, r3
   16528:	blt	167d8 <close_stdout@@Base+0x2ca8>
   1652c:	mov	r2, r8
   16530:	mvn	r0, #0
   16534:	mvn	r1, #-2147483648	; 0x80000000
   16538:	mov	r3, r9
   1653c:	bl	17f70 <close_stdout@@Base+0x4440>
   16540:	cmp	r0, r6
   16544:	sbcs	r2, r1, r7
   16548:	blt	1684c <close_stdout@@Base+0x2d1c>
   1654c:	mul	r2, r6, r9
   16550:	mov	r3, #0
   16554:	mla	r2, r8, r7, r2
   16558:	umull	r6, r7, r6, r8
   1655c:	add	r7, r2, r7
   16560:	subs	r4, r4, #1
   16564:	orr	r5, r5, r3
   16568:	bne	1651c <close_stdout@@Base+0x29ec>
   1656c:	strd	r6, [sp]
   16570:	ldr	r8, [sp, #28]
   16574:	ldr	r6, [sp, #32]
   16578:	ldr	r9, [sp, #36]	; 0x24
   1657c:	ldr	r7, [sp, #16]
   16580:	b	16140 <close_stdout@@Base+0x2610>
   16584:	mov	r0, r3
   16588:	asr	r1, r3, #31
   1658c:	strd	r0, [sp, #8]
   16590:	mov	r0, #0
   16594:	ldrd	r2, [sp, #8]
   16598:	mov	r1, #-2147483648	; 0x80000000
   1659c:	bl	17f70 <close_stdout@@Base+0x4440>
   165a0:	mov	r4, #5
   165a4:	str	sl, [sp, #28]
   165a8:	mov	r5, #0
   165ac:	str	fp, [sp, #32]
   165b0:	str	r8, [sp, #36]	; 0x24
   165b4:	str	r9, [sp, #40]	; 0x28
   165b8:	ldrd	r8, [sp, #8]
   165bc:	str	r7, [sp, #8]
   165c0:	strd	r0, [sp, #16]
   165c4:	mov	sl, r0
   165c8:	str	r6, [sp, #16]
   165cc:	mov	fp, r1
   165d0:	ldrd	r6, [sp]
   165d4:	b	16618 <close_stdout@@Base+0x2ae8>
   165d8:	mov	r2, r8
   165dc:	mvn	r0, #0
   165e0:	mvn	r1, #-2147483648	; 0x80000000
   165e4:	mov	r3, r9
   165e8:	bl	17f70 <close_stdout@@Base+0x4440>
   165ec:	cmp	r0, r6
   165f0:	sbcs	r2, r1, r7
   165f4:	blt	16828 <close_stdout@@Base+0x2cf8>
   165f8:	mul	r2, r6, r9
   165fc:	mov	r3, #0
   16600:	mla	r2, r8, r7, r2
   16604:	umull	r6, r7, r6, r8
   16608:	add	r7, r2, r7
   1660c:	subs	r4, r4, #1
   16610:	orr	r5, r5, r3
   16614:	beq	1685c <close_stdout@@Base+0x2d2c>
   16618:	cmp	r6, sl
   1661c:	sbcs	r1, r7, fp
   16620:	bge	165d8 <close_stdout@@Base+0x2aa8>
   16624:	mov	r6, #0
   16628:	mov	r7, #-2147483648	; 0x80000000
   1662c:	mov	r3, #1
   16630:	b	1660c <close_stdout@@Base+0x2adc>
   16634:	asr	r5, r3, #31
   16638:	mov	r2, r3
   1663c:	mov	r4, r3
   16640:	mov	r0, #0
   16644:	mov	r3, r5
   16648:	mov	r1, #-2147483648	; 0x80000000
   1664c:	bl	17f70 <close_stdout@@Base+0x4440>
   16650:	ldrd	r2, [sp]
   16654:	cmp	r2, r0
   16658:	sbcs	r3, r3, r1
   1665c:	strd	r0, [sp, #8]
   16660:	blt	1688c <close_stdout@@Base+0x2d5c>
   16664:	mov	r2, r4
   16668:	mov	r3, r5
   1666c:	mvn	r0, #0
   16670:	mvn	r1, #-2147483648	; 0x80000000
   16674:	bl	17f70 <close_stdout@@Base+0x4440>
   16678:	ldrd	r2, [sp]
   1667c:	cmp	r0, r2
   16680:	sbcs	r3, r1, r3
   16684:	strd	r0, [sp, #16]
   16688:	blt	168a4 <close_stdout@@Base+0x2d74>
   1668c:	ldr	r0, [sp]
   16690:	mov	ip, #0
   16694:	ldr	r2, [sp, #4]
   16698:	mul	r1, r0, r5
   1669c:	mla	r1, r4, r2, r1
   166a0:	umull	r2, r3, r0, r4
   166a4:	add	r1, r1, r3
   166a8:	strd	r2, [sp]
   166ac:	str	r1, [sp, #4]
   166b0:	ldrd	r0, [sp]
   166b4:	ldrd	r2, [sp, #8]
   166b8:	cmp	r0, r2
   166bc:	sbcs	r3, r1, r3
   166c0:	blt	168f0 <close_stdout@@Base+0x2dc0>
   166c4:	ldrd	r2, [sp, #16]
   166c8:	ldrd	r0, [sp]
   166cc:	cmp	r2, r0
   166d0:	sbcs	r1, r3, r1
   166d4:	blt	168b8 <close_stdout@@Base+0x2d88>
   166d8:	ldr	r2, [sp]
   166dc:	ldr	r3, [sp, #4]
   166e0:	mul	r0, r2, r5
   166e4:	mov	r5, #0
   166e8:	mla	r0, r4, r3, r0
   166ec:	umull	r2, r3, r2, r4
   166f0:	add	r0, r0, r3
   166f4:	strd	r2, [sp]
   166f8:	str	r0, [sp, #4]
   166fc:	orr	r5, r5, ip
   16700:	b	16140 <close_stdout@@Base+0x2610>
   16704:	asr	r5, r3, #31
   16708:	mov	r2, r3
   1670c:	mov	r4, r3
   16710:	mov	r0, #0
   16714:	mov	r3, r5
   16718:	mov	r1, #-2147483648	; 0x80000000
   1671c:	bl	17f70 <close_stdout@@Base+0x4440>
   16720:	ldrd	r2, [sp]
   16724:	cmp	r2, r0
   16728:	sbcs	r3, r3, r1
   1672c:	blt	167c4 <close_stdout@@Base+0x2c94>
   16730:	mov	r2, r4
   16734:	mov	r3, r5
   16738:	mvn	r0, #0
   1673c:	mvn	r1, #-2147483648	; 0x80000000
   16740:	bl	17f70 <close_stdout@@Base+0x4440>
   16744:	ldrd	r2, [sp]
   16748:	cmp	r0, r2
   1674c:	sbcs	r3, r1, r3
   16750:	blt	16838 <close_stdout@@Base+0x2d08>
   16754:	ldr	r0, [sp]
   16758:	ldr	r1, [sp, #4]
   1675c:	mul	r3, r0, r5
   16760:	mov	r5, #0
   16764:	mla	r3, r4, r1, r3
   16768:	umull	r0, r1, r0, r4
   1676c:	add	r3, r3, r1
   16770:	strd	r0, [sp]
   16774:	str	r3, [sp, #4]
   16778:	b	16140 <close_stdout@@Base+0x2610>
   1677c:	ldrd	r0, [sp]
   16780:	strd	r0, [r9]
   16784:	orr	r0, sl, #2
   16788:	b	15f70 <close_stdout@@Base+0x2440>
   1678c:	ldrb	fp, [r8, #2]
   16790:	mov	r3, #1024	; 0x400
   16794:	cmp	fp, #66	; 0x42
   16798:	moveq	fp, #3
   1679c:	movne	fp, #1
   167a0:	b	15fe4 <close_stdout@@Base+0x24b4>
   167a4:	strd	sl, [sp]
   167a8:	ldr	r8, [sp, #36]	; 0x24
   167ac:	ldr	sl, [sp, #28]
   167b0:	ldr	fp, [sp, #32]
   167b4:	ldr	r6, [sp, #40]	; 0x28
   167b8:	ldr	r9, [sp, #44]	; 0x2c
   167bc:	ldr	r7, [sp, #16]
   167c0:	b	16140 <close_stdout@@Base+0x2610>
   167c4:	mov	r2, #0
   167c8:	mov	r3, #-2147483648	; 0x80000000
   167cc:	mov	r5, #1
   167d0:	strd	r2, [sp]
   167d4:	b	16140 <close_stdout@@Base+0x2610>
   167d8:	mov	r6, #0
   167dc:	mov	r7, #-2147483648	; 0x80000000
   167e0:	mov	r3, #1
   167e4:	b	16560 <close_stdout@@Base+0x2a30>
   167e8:	mvn	sl, #0
   167ec:	mvn	fp, #-2147483648	; 0x80000000
   167f0:	mov	r3, #1
   167f4:	b	162e4 <close_stdout@@Base+0x27b4>
   167f8:	mvn	sl, #0
   167fc:	mvn	fp, #-2147483648	; 0x80000000
   16800:	mov	r3, #1
   16804:	b	16234 <close_stdout@@Base+0x2704>
   16808:	mov	r6, #0
   1680c:	mov	r7, #-2147483648	; 0x80000000
   16810:	mov	r3, #1
   16814:	b	163c0 <close_stdout@@Base+0x2890>
   16818:	mvn	sl, #0
   1681c:	mvn	fp, #-2147483648	; 0x80000000
   16820:	mov	r3, #1
   16824:	b	16464 <close_stdout@@Base+0x2934>
   16828:	mvn	r6, #0
   1682c:	mvn	r7, #-2147483648	; 0x80000000
   16830:	mov	r3, #1
   16834:	b	1660c <close_stdout@@Base+0x2adc>
   16838:	mvn	r0, #0
   1683c:	mvn	r1, #-2147483648	; 0x80000000
   16840:	mov	r5, #1
   16844:	strd	r0, [sp]
   16848:	b	16140 <close_stdout@@Base+0x2610>
   1684c:	mvn	r6, #0
   16850:	mvn	r7, #-2147483648	; 0x80000000
   16854:	mov	r3, #1
   16858:	b	16560 <close_stdout@@Base+0x2a30>
   1685c:	strd	r6, [sp]
   16860:	ldr	sl, [sp, #28]
   16864:	ldr	fp, [sp, #32]
   16868:	ldr	r8, [sp, #36]	; 0x24
   1686c:	ldr	r6, [sp, #16]
   16870:	ldr	r9, [sp, #40]	; 0x28
   16874:	ldr	r7, [sp, #8]
   16878:	b	16140 <close_stdout@@Base+0x2610>
   1687c:	mvn	r6, #0
   16880:	mvn	r7, #-2147483648	; 0x80000000
   16884:	mov	r3, #1
   16888:	b	163c0 <close_stdout@@Base+0x2890>
   1688c:	mov	ip, #1
   16890:	mov	r0, #0
   16894:	mov	r1, #-2147483648	; 0x80000000
   16898:	mov	r5, ip
   1689c:	strd	r0, [sp]
   168a0:	b	166fc <close_stdout@@Base+0x2bcc>
   168a4:	mvn	r0, #0
   168a8:	mvn	r1, #-2147483648	; 0x80000000
   168ac:	mov	ip, #1
   168b0:	strd	r0, [sp]
   168b4:	b	166c4 <close_stdout@@Base+0x2b94>
   168b8:	mvn	r0, #0
   168bc:	mvn	r1, #-2147483648	; 0x80000000
   168c0:	mov	r5, #1
   168c4:	strd	r0, [sp]
   168c8:	b	166fc <close_stdout@@Base+0x2bcc>
   168cc:	bl	1134c <__stack_chk_fail@plt>
   168d0:	ldr	r0, [pc, #52]	; 1690c <close_stdout@@Base+0x2ddc>
   168d4:	mov	r2, #96	; 0x60
   168d8:	ldr	r1, [pc, #48]	; 16910 <close_stdout@@Base+0x2de0>
   168dc:	ldr	r3, [pc, #48]	; 16914 <close_stdout@@Base+0x2de4>
   168e0:	add	r0, pc, r0
   168e4:	add	r1, pc, r1
   168e8:	add	r3, pc, r3
   168ec:	bl	115ec <__assert_fail@plt>
   168f0:	mov	r2, #0
   168f4:	mov	r3, #-2147483648	; 0x80000000
   168f8:	mov	r5, #1
   168fc:	strd	r2, [sp]
   16900:	b	166fc <close_stdout@@Base+0x2bcc>
   16904:	andeq	r4, r1, r0, lsr #2
   16908:	andeq	r0, r0, r8, lsr r1
   1690c:	andeq	r2, r0, r8, asr #31
   16910:	andeq	r2, r0, ip, ror #31
   16914:			; <UNDEFINED> instruction: 0x00002fb4
   16918:	ldr	ip, [pc, #1308]	; 16e3c <close_stdout@@Base+0x330c>
   1691c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16920:	mov	sl, r2
   16924:	ldr	r2, [pc, #1300]	; 16e40 <close_stdout@@Base+0x3310>
   16928:	add	ip, pc, ip
   1692c:	mov	r9, r3
   16930:	sub	sp, sp, #20
   16934:	mov	r3, ip
   16938:	cmp	sl, #36	; 0x24
   1693c:	ldr	r6, [ip, r2]
   16940:	mov	r5, r0
   16944:	mov	r7, r1
   16948:	ldr	r8, [sp, #56]	; 0x38
   1694c:	ldr	r3, [r6]
   16950:	str	r3, [sp, #12]
   16954:	bhi	16e1c <close_stdout@@Base+0x32ec>
   16958:	cmp	r1, #0
   1695c:	addeq	r7, sp, #8
   16960:	bl	11460 <__ctype_b_loc@plt>
   16964:	ldrb	ip, [r5]
   16968:	mov	r2, r5
   1696c:	ldr	r1, [r0]
   16970:	b	16978 <close_stdout@@Base+0x2e48>
   16974:	ldrb	ip, [r2, #1]!
   16978:	lsl	r3, ip, #1
   1697c:	ldrh	r4, [r1, r3]
   16980:	and	r4, r4, #8192	; 0x2000
   16984:	uxth	r4, r4
   16988:	cmp	r4, #0
   1698c:	bne	16974 <close_stdout@@Base+0x2e44>
   16990:	cmp	ip, #45	; 0x2d
   16994:	bne	169b4 <close_stdout@@Base+0x2e84>
   16998:	mov	r0, #4
   1699c:	ldr	r2, [sp, #12]
   169a0:	ldr	r3, [r6]
   169a4:	cmp	r2, r3
   169a8:	bne	16e18 <close_stdout@@Base+0x32e8>
   169ac:	add	sp, sp, #20
   169b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b4:	bl	114c0 <__errno_location@plt>
   169b8:	mov	r2, sl
   169bc:	mov	r1, r7
   169c0:	str	r4, [r0]
   169c4:	mov	fp, r0
   169c8:	mov	r0, r5
   169cc:	bl	11478 <strtoul@plt>
   169d0:	ldr	r3, [r7]
   169d4:	cmp	r3, r5
   169d8:	mov	sl, r0
   169dc:	beq	16b6c <close_stdout@@Base+0x303c>
   169e0:	ldr	r0, [fp]
   169e4:	cmp	r0, #0
   169e8:	bne	16a18 <close_stdout@@Base+0x2ee8>
   169ec:	mov	r4, r0
   169f0:	cmp	r8, #0
   169f4:	streq	sl, [r9]
   169f8:	moveq	r0, r4
   169fc:	beq	1699c <close_stdout@@Base+0x2e6c>
   16a00:	ldrb	r5, [r3]
   16a04:	cmp	r5, #0
   16a08:	bne	16a28 <close_stdout@@Base+0x2ef8>
   16a0c:	mov	r0, r4
   16a10:	str	sl, [r9]
   16a14:	b	1699c <close_stdout@@Base+0x2e6c>
   16a18:	cmp	r0, #34	; 0x22
   16a1c:	moveq	r4, #1
   16a20:	bne	16998 <close_stdout@@Base+0x2e68>
   16a24:	b	169f0 <close_stdout@@Base+0x2ec0>
   16a28:	mov	r0, r8
   16a2c:	mov	r1, r5
   16a30:	str	r3, [sp, #4]
   16a34:	bl	11490 <strchr@plt>
   16a38:	ldr	r3, [sp, #4]
   16a3c:	cmp	r0, #0
   16a40:	beq	16ba4 <close_stdout@@Base+0x3074>
   16a44:	mov	r0, r8
   16a48:	mov	r1, #48	; 0x30
   16a4c:	str	r3, [sp, #4]
   16a50:	bl	11490 <strchr@plt>
   16a54:	ldr	r3, [sp, #4]
   16a58:	cmp	r0, #0
   16a5c:	beq	16a7c <close_stdout@@Base+0x2f4c>
   16a60:	ldrb	r2, [r3, #1]
   16a64:	cmp	r2, #68	; 0x44
   16a68:	beq	16e00 <close_stdout@@Base+0x32d0>
   16a6c:	cmp	r2, #105	; 0x69
   16a70:	beq	16de8 <close_stdout@@Base+0x32b8>
   16a74:	cmp	r2, #66	; 0x42
   16a78:	beq	16e00 <close_stdout@@Base+0x32d0>
   16a7c:	mov	r8, #1
   16a80:	mov	fp, #1024	; 0x400
   16a84:	sub	r5, r5, #66	; 0x42
   16a88:	cmp	r5, #53	; 0x35
   16a8c:	addls	pc, pc, r5, lsl #2
   16a90:	b	16ba4 <close_stdout@@Base+0x3074>
   16a94:	b	16d94 <close_stdout@@Base+0x3264>
   16a98:	b	16ba4 <close_stdout@@Base+0x3074>
   16a9c:	b	16ba4 <close_stdout@@Base+0x3074>
   16aa0:	b	16d54 <close_stdout@@Base+0x3224>
   16aa4:	b	16ba4 <close_stdout@@Base+0x3074>
   16aa8:	b	16da8 <close_stdout@@Base+0x3278>
   16aac:	b	16ba4 <close_stdout@@Base+0x3074>
   16ab0:	b	16ba4 <close_stdout@@Base+0x3074>
   16ab4:	b	16ba4 <close_stdout@@Base+0x3074>
   16ab8:	b	16d34 <close_stdout@@Base+0x3204>
   16abc:	b	16ba4 <close_stdout@@Base+0x3074>
   16ac0:	b	16d00 <close_stdout@@Base+0x31d0>
   16ac4:	b	16ba4 <close_stdout@@Base+0x3074>
   16ac8:	b	16ba4 <close_stdout@@Base+0x3074>
   16acc:	b	16cc0 <close_stdout@@Base+0x3190>
   16ad0:	b	16ba4 <close_stdout@@Base+0x3074>
   16ad4:	b	16ba4 <close_stdout@@Base+0x3074>
   16ad8:	b	16ba4 <close_stdout@@Base+0x3074>
   16adc:	b	16c80 <close_stdout@@Base+0x3150>
   16ae0:	b	16ba4 <close_stdout@@Base+0x3074>
   16ae4:	b	16ba4 <close_stdout@@Base+0x3074>
   16ae8:	b	16ba4 <close_stdout@@Base+0x3074>
   16aec:	b	16ba4 <close_stdout@@Base+0x3074>
   16af0:	b	16c40 <close_stdout@@Base+0x3110>
   16af4:	b	16c00 <close_stdout@@Base+0x30d0>
   16af8:	b	16ba4 <close_stdout@@Base+0x3074>
   16afc:	b	16ba4 <close_stdout@@Base+0x3074>
   16b00:	b	16ba4 <close_stdout@@Base+0x3074>
   16b04:	b	16ba4 <close_stdout@@Base+0x3074>
   16b08:	b	16ba4 <close_stdout@@Base+0x3074>
   16b0c:	b	16ba4 <close_stdout@@Base+0x3074>
   16b10:	b	16ba4 <close_stdout@@Base+0x3074>
   16b14:	b	16bec <close_stdout@@Base+0x30bc>
   16b18:	b	16bb0 <close_stdout@@Base+0x3080>
   16b1c:	b	16ba4 <close_stdout@@Base+0x3074>
   16b20:	b	16ba4 <close_stdout@@Base+0x3074>
   16b24:	b	16ba4 <close_stdout@@Base+0x3074>
   16b28:	b	16da8 <close_stdout@@Base+0x3278>
   16b2c:	b	16ba4 <close_stdout@@Base+0x3074>
   16b30:	b	16ba4 <close_stdout@@Base+0x3074>
   16b34:	b	16ba4 <close_stdout@@Base+0x3074>
   16b38:	b	16d34 <close_stdout@@Base+0x3204>
   16b3c:	b	16ba4 <close_stdout@@Base+0x3074>
   16b40:	b	16d00 <close_stdout@@Base+0x31d0>
   16b44:	b	16ba4 <close_stdout@@Base+0x3074>
   16b48:	b	16ba4 <close_stdout@@Base+0x3074>
   16b4c:	b	16ba4 <close_stdout@@Base+0x3074>
   16b50:	b	16ba4 <close_stdout@@Base+0x3074>
   16b54:	b	16ba4 <close_stdout@@Base+0x3074>
   16b58:	b	16ba4 <close_stdout@@Base+0x3074>
   16b5c:	b	16c80 <close_stdout@@Base+0x3150>
   16b60:	b	16ba4 <close_stdout@@Base+0x3074>
   16b64:	b	16ba4 <close_stdout@@Base+0x3074>
   16b68:	b	16bd0 <close_stdout@@Base+0x30a0>
   16b6c:	cmp	r8, #0
   16b70:	beq	16998 <close_stdout@@Base+0x2e68>
   16b74:	ldrb	r5, [r5]
   16b78:	cmp	r5, #0
   16b7c:	beq	16998 <close_stdout@@Base+0x2e68>
   16b80:	mov	r0, r8
   16b84:	mov	r1, r5
   16b88:	str	r3, [sp, #4]
   16b8c:	bl	11490 <strchr@plt>
   16b90:	ldr	r3, [sp, #4]
   16b94:	cmp	r0, #0
   16b98:	movne	sl, #1
   16b9c:	bne	16a44 <close_stdout@@Base+0x2f14>
   16ba0:	b	16998 <close_stdout@@Base+0x2e68>
   16ba4:	str	sl, [r9]
   16ba8:	orr	r0, r4, #2
   16bac:	b	1699c <close_stdout@@Base+0x2e6c>
   16bb0:	mov	r2, #0
   16bb4:	add	r1, r3, r8
   16bb8:	str	r1, [r7]
   16bbc:	ldrb	r3, [r3, r8]
   16bc0:	orr	r4, r4, r2
   16bc4:	cmp	r3, #0
   16bc8:	orrne	r4, r4, #2
   16bcc:	b	16a0c <close_stdout@@Base+0x2edc>
   16bd0:	cmn	sl, #-2147483647	; 0x80000001
   16bd4:	lslls	sl, sl, #1
   16bd8:	movls	r2, #0
   16bdc:	bls	16bb4 <close_stdout@@Base+0x3084>
   16be0:	mvn	sl, #0
   16be4:	mov	r2, #1
   16be8:	b	16bb4 <close_stdout@@Base+0x3084>
   16bec:	cmp	sl, #8388608	; 0x800000
   16bf0:	lslcc	sl, sl, #9
   16bf4:	movcc	r2, #0
   16bf8:	bcc	16bb4 <close_stdout@@Base+0x3084>
   16bfc:	b	16be0 <close_stdout@@Base+0x30b0>
   16c00:	mov	r1, fp
   16c04:	mvn	r0, #0
   16c08:	str	r3, [sp, #4]
   16c0c:	bl	17d64 <close_stdout@@Base+0x4234>
   16c10:	ldr	r3, [sp, #4]
   16c14:	mov	r1, #7
   16c18:	mov	r2, #0
   16c1c:	cmp	r0, sl
   16c20:	movcs	ip, #0
   16c24:	movcc	ip, #1
   16c28:	mulcs	sl, fp, sl
   16c2c:	mvncc	sl, #0
   16c30:	subs	r1, r1, #1
   16c34:	orr	r2, r2, ip
   16c38:	bne	16c1c <close_stdout@@Base+0x30ec>
   16c3c:	b	16bb4 <close_stdout@@Base+0x3084>
   16c40:	mov	r1, fp
   16c44:	mvn	r0, #0
   16c48:	str	r3, [sp, #4]
   16c4c:	bl	17d64 <close_stdout@@Base+0x4234>
   16c50:	ldr	r3, [sp, #4]
   16c54:	mov	r1, #8
   16c58:	mov	r2, #0
   16c5c:	cmp	r0, sl
   16c60:	movcs	ip, #0
   16c64:	movcc	ip, #1
   16c68:	mulcs	sl, fp, sl
   16c6c:	mvncc	sl, #0
   16c70:	subs	r1, r1, #1
   16c74:	orr	r2, r2, ip
   16c78:	bne	16c5c <close_stdout@@Base+0x312c>
   16c7c:	b	16bb4 <close_stdout@@Base+0x3084>
   16c80:	mov	r1, fp
   16c84:	mvn	r0, #0
   16c88:	str	r3, [sp, #4]
   16c8c:	bl	17d64 <close_stdout@@Base+0x4234>
   16c90:	ldr	r3, [sp, #4]
   16c94:	mov	r1, #4
   16c98:	mov	r2, #0
   16c9c:	cmp	r0, sl
   16ca0:	movcs	ip, #0
   16ca4:	movcc	ip, #1
   16ca8:	mulcs	sl, fp, sl
   16cac:	mvncc	sl, #0
   16cb0:	subs	r1, r1, #1
   16cb4:	orr	r2, r2, ip
   16cb8:	bne	16c9c <close_stdout@@Base+0x316c>
   16cbc:	b	16bb4 <close_stdout@@Base+0x3084>
   16cc0:	mov	r1, fp
   16cc4:	mvn	r0, #0
   16cc8:	str	r3, [sp, #4]
   16ccc:	bl	17d64 <close_stdout@@Base+0x4234>
   16cd0:	ldr	r3, [sp, #4]
   16cd4:	mov	r1, #5
   16cd8:	mov	r2, #0
   16cdc:	cmp	r0, sl
   16ce0:	movcs	ip, #0
   16ce4:	movcc	ip, #1
   16ce8:	mulcs	sl, fp, sl
   16cec:	mvncc	sl, #0
   16cf0:	subs	r1, r1, #1
   16cf4:	orr	r2, r2, ip
   16cf8:	bne	16cdc <close_stdout@@Base+0x31ac>
   16cfc:	b	16bb4 <close_stdout@@Base+0x3084>
   16d00:	mvn	r0, #0
   16d04:	mov	r1, fp
   16d08:	str	r3, [sp, #4]
   16d0c:	bl	17d64 <close_stdout@@Base+0x4234>
   16d10:	ldr	r3, [sp, #4]
   16d14:	cmp	sl, r0
   16d18:	bhi	16e0c <close_stdout@@Base+0x32dc>
   16d1c:	mul	sl, sl, fp
   16d20:	cmp	r0, sl
   16d24:	bcc	16e0c <close_stdout@@Base+0x32dc>
   16d28:	mul	sl, fp, sl
   16d2c:	mov	r2, #0
   16d30:	b	16bb4 <close_stdout@@Base+0x3084>
   16d34:	mvn	r0, #0
   16d38:	mov	r1, fp
   16d3c:	str	r3, [sp, #4]
   16d40:	bl	17d64 <close_stdout@@Base+0x4234>
   16d44:	ldr	r3, [sp, #4]
   16d48:	cmp	sl, r0
   16d4c:	bhi	16be0 <close_stdout@@Base+0x30b0>
   16d50:	b	16d28 <close_stdout@@Base+0x31f8>
   16d54:	mov	r1, fp
   16d58:	mvn	r0, #0
   16d5c:	str	r3, [sp, #4]
   16d60:	bl	17d64 <close_stdout@@Base+0x4234>
   16d64:	ldr	r3, [sp, #4]
   16d68:	mov	r1, #6
   16d6c:	mov	r2, #0
   16d70:	cmp	r0, sl
   16d74:	movcs	ip, #0
   16d78:	movcc	ip, #1
   16d7c:	mulcs	sl, fp, sl
   16d80:	mvncc	sl, #0
   16d84:	subs	r1, r1, #1
   16d88:	orr	r2, r2, ip
   16d8c:	bne	16d70 <close_stdout@@Base+0x3240>
   16d90:	b	16bb4 <close_stdout@@Base+0x3084>
   16d94:	cmp	sl, #4194304	; 0x400000
   16d98:	lslcc	sl, sl, #10
   16d9c:	movcc	r2, #0
   16da0:	bcc	16bb4 <close_stdout@@Base+0x3084>
   16da4:	b	16be0 <close_stdout@@Base+0x30b0>
   16da8:	mov	r1, fp
   16dac:	mvn	r0, #0
   16db0:	str	r3, [sp, #4]
   16db4:	bl	17d64 <close_stdout@@Base+0x4234>
   16db8:	ldr	r3, [sp, #4]
   16dbc:	mov	r1, #3
   16dc0:	mov	r2, #0
   16dc4:	cmp	r0, sl
   16dc8:	movcs	ip, #0
   16dcc:	movcc	ip, #1
   16dd0:	mulcs	sl, fp, sl
   16dd4:	mvncc	sl, #0
   16dd8:	subs	r1, r1, #1
   16ddc:	orr	r2, r2, ip
   16de0:	bne	16dc4 <close_stdout@@Base+0x3294>
   16de4:	b	16bb4 <close_stdout@@Base+0x3084>
   16de8:	ldrb	r8, [r3, #2]
   16dec:	mov	fp, #1024	; 0x400
   16df0:	cmp	r8, #66	; 0x42
   16df4:	moveq	r8, #3
   16df8:	movne	r8, #1
   16dfc:	b	16a84 <close_stdout@@Base+0x2f54>
   16e00:	mov	r8, #2
   16e04:	mov	fp, #1000	; 0x3e8
   16e08:	b	16a84 <close_stdout@@Base+0x2f54>
   16e0c:	mov	r2, #1
   16e10:	mvn	sl, #0
   16e14:	b	16bb4 <close_stdout@@Base+0x3084>
   16e18:	bl	1134c <__stack_chk_fail@plt>
   16e1c:	ldr	r0, [pc, #32]	; 16e44 <close_stdout@@Base+0x3314>
   16e20:	mov	r2, #96	; 0x60
   16e24:	ldr	r1, [pc, #28]	; 16e48 <close_stdout@@Base+0x3318>
   16e28:	ldr	r3, [pc, #28]	; 16e4c <close_stdout@@Base+0x331c>
   16e2c:	add	r0, pc, r0
   16e30:	add	r1, pc, r1
   16e34:	add	r3, pc, r3
   16e38:	bl	115ec <__assert_fail@plt>
   16e3c:	ldrdeq	r3, [r1], -r0
   16e40:	andeq	r0, r0, r8, lsr r1
   16e44:	andeq	r2, r0, ip, ror sl
   16e48:	andeq	r2, r0, r0, lsr #21
   16e4c:	andeq	r2, r0, ip, lsr #21
   16e50:	ldr	ip, [pc, #1852]	; 17594 <close_stdout@@Base+0x3a64>
   16e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e58:	mov	fp, r2
   16e5c:	ldr	r2, [pc, #1844]	; 17598 <close_stdout@@Base+0x3a68>
   16e60:	add	ip, pc, ip
   16e64:	mov	r9, r3
   16e68:	sub	sp, sp, #36	; 0x24
   16e6c:	mov	r3, ip
   16e70:	cmp	fp, #36	; 0x24
   16e74:	ldr	sl, [ip, r2]
   16e78:	mov	r5, r0
   16e7c:	mov	r8, r1
   16e80:	ldr	r6, [sp, #72]	; 0x48
   16e84:	ldr	r3, [sl]
   16e88:	str	r3, [sp, #28]
   16e8c:	bhi	17574 <close_stdout@@Base+0x3a44>
   16e90:	cmp	r1, #0
   16e94:	addeq	r8, sp, #24
   16e98:	bl	11460 <__ctype_b_loc@plt>
   16e9c:	ldrb	r3, [r5]
   16ea0:	mov	r1, r5
   16ea4:	ldr	r0, [r0]
   16ea8:	b	16eb0 <close_stdout@@Base+0x3380>
   16eac:	ldrb	r3, [r1, #1]!
   16eb0:	lsl	r2, r3, #1
   16eb4:	ldrh	r4, [r0, r2]
   16eb8:	and	r4, r4, #8192	; 0x2000
   16ebc:	uxth	r4, r4
   16ec0:	cmp	r4, #0
   16ec4:	bne	16eac <close_stdout@@Base+0x337c>
   16ec8:	cmp	r3, #45	; 0x2d
   16ecc:	bne	16eec <close_stdout@@Base+0x33bc>
   16ed0:	mov	r0, #4
   16ed4:	ldr	r2, [sp, #28]
   16ed8:	ldr	r3, [sl]
   16edc:	cmp	r2, r3
   16ee0:	bne	17570 <close_stdout@@Base+0x3a40>
   16ee4:	add	sp, sp, #36	; 0x24
   16ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eec:	bl	114c0 <__errno_location@plt>
   16ef0:	mov	r2, fp
   16ef4:	mov	r1, r8
   16ef8:	mov	r3, r4
   16efc:	str	r4, [r0]
   16f00:	mov	r7, r0
   16f04:	mov	r0, r5
   16f08:	bl	11304 <__strtoull_internal@plt>
   16f0c:	ldr	fp, [r8]
   16f10:	cmp	fp, r5
   16f14:	strd	r0, [sp]
   16f18:	beq	17094 <close_stdout@@Base+0x3564>
   16f1c:	ldr	ip, [r7]
   16f20:	cmp	ip, #0
   16f24:	bne	16f50 <close_stdout@@Base+0x3420>
   16f28:	mov	r7, ip
   16f2c:	cmp	r6, #0
   16f30:	beq	17500 <close_stdout@@Base+0x39d0>
   16f34:	ldrb	r5, [fp]
   16f38:	cmp	r5, #0
   16f3c:	bne	16f60 <close_stdout@@Base+0x3430>
   16f40:	ldrd	r2, [sp]
   16f44:	mov	r0, r7
   16f48:	strd	r2, [r9]
   16f4c:	b	16ed4 <close_stdout@@Base+0x33a4>
   16f50:	cmp	ip, #34	; 0x22
   16f54:	moveq	r7, #1
   16f58:	bne	16ed0 <close_stdout@@Base+0x33a0>
   16f5c:	b	16f2c <close_stdout@@Base+0x33fc>
   16f60:	mov	r0, r6
   16f64:	mov	r1, r5
   16f68:	bl	11490 <strchr@plt>
   16f6c:	cmp	r0, #0
   16f70:	beq	170d0 <close_stdout@@Base+0x35a0>
   16f74:	mov	r0, r6
   16f78:	mov	r1, #48	; 0x30
   16f7c:	bl	11490 <strchr@plt>
   16f80:	cmp	r0, #0
   16f84:	beq	16fa4 <close_stdout@@Base+0x3474>
   16f88:	ldrb	r3, [fp, #1]
   16f8c:	cmp	r3, #68	; 0x44
   16f90:	beq	17528 <close_stdout@@Base+0x39f8>
   16f94:	cmp	r3, #105	; 0x69
   16f98:	beq	17510 <close_stdout@@Base+0x39e0>
   16f9c:	cmp	r3, #66	; 0x42
   16fa0:	beq	17528 <close_stdout@@Base+0x39f8>
   16fa4:	mov	r6, #1
   16fa8:	mov	r4, #1024	; 0x400
   16fac:	sub	r5, r5, #66	; 0x42
   16fb0:	cmp	r5, #53	; 0x35
   16fb4:	addls	pc, pc, r5, lsl #2
   16fb8:	b	170d0 <close_stdout@@Base+0x35a0>
   16fbc:	b	17378 <close_stdout@@Base+0x3848>
   16fc0:	b	170d0 <close_stdout@@Base+0x35a0>
   16fc4:	b	170d0 <close_stdout@@Base+0x35a0>
   16fc8:	b	1730c <close_stdout@@Base+0x37dc>
   16fcc:	b	170d0 <close_stdout@@Base+0x35a0>
   16fd0:	b	172a0 <close_stdout@@Base+0x3770>
   16fd4:	b	170d0 <close_stdout@@Base+0x35a0>
   16fd8:	b	170d0 <close_stdout@@Base+0x35a0>
   16fdc:	b	170d0 <close_stdout@@Base+0x35a0>
   16fe0:	b	17248 <close_stdout@@Base+0x3718>
   16fe4:	b	170d0 <close_stdout@@Base+0x35a0>
   16fe8:	b	17420 <close_stdout@@Base+0x38f0>
   16fec:	b	170d0 <close_stdout@@Base+0x35a0>
   16ff0:	b	170d0 <close_stdout@@Base+0x35a0>
   16ff4:	b	173b4 <close_stdout@@Base+0x3884>
   16ff8:	b	170d0 <close_stdout@@Base+0x35a0>
   16ffc:	b	170d0 <close_stdout@@Base+0x35a0>
   17000:	b	170d0 <close_stdout@@Base+0x35a0>
   17004:	b	17494 <close_stdout@@Base+0x3964>
   17008:	b	170d0 <close_stdout@@Base+0x35a0>
   1700c:	b	170d0 <close_stdout@@Base+0x35a0>
   17010:	b	170d0 <close_stdout@@Base+0x35a0>
   17014:	b	170d0 <close_stdout@@Base+0x35a0>
   17018:	b	171dc <close_stdout@@Base+0x36ac>
   1701c:	b	17164 <close_stdout@@Base+0x3634>
   17020:	b	170d0 <close_stdout@@Base+0x35a0>
   17024:	b	170d0 <close_stdout@@Base+0x35a0>
   17028:	b	170d0 <close_stdout@@Base+0x35a0>
   1702c:	b	170d0 <close_stdout@@Base+0x35a0>
   17030:	b	170d0 <close_stdout@@Base+0x35a0>
   17034:	b	170d0 <close_stdout@@Base+0x35a0>
   17038:	b	170d0 <close_stdout@@Base+0x35a0>
   1703c:	b	17128 <close_stdout@@Base+0x35f8>
   17040:	b	170e0 <close_stdout@@Base+0x35b0>
   17044:	b	170d0 <close_stdout@@Base+0x35a0>
   17048:	b	170d0 <close_stdout@@Base+0x35a0>
   1704c:	b	170d0 <close_stdout@@Base+0x35a0>
   17050:	b	172a0 <close_stdout@@Base+0x3770>
   17054:	b	170d0 <close_stdout@@Base+0x35a0>
   17058:	b	170d0 <close_stdout@@Base+0x35a0>
   1705c:	b	170d0 <close_stdout@@Base+0x35a0>
   17060:	b	17248 <close_stdout@@Base+0x3718>
   17064:	b	170d0 <close_stdout@@Base+0x35a0>
   17068:	b	17420 <close_stdout@@Base+0x38f0>
   1706c:	b	170d0 <close_stdout@@Base+0x35a0>
   17070:	b	170d0 <close_stdout@@Base+0x35a0>
   17074:	b	170d0 <close_stdout@@Base+0x35a0>
   17078:	b	170d0 <close_stdout@@Base+0x35a0>
   1707c:	b	170d0 <close_stdout@@Base+0x35a0>
   17080:	b	170d0 <close_stdout@@Base+0x35a0>
   17084:	b	17494 <close_stdout@@Base+0x3964>
   17088:	b	170d0 <close_stdout@@Base+0x35a0>
   1708c:	b	170d0 <close_stdout@@Base+0x35a0>
   17090:	b	17100 <close_stdout@@Base+0x35d0>
   17094:	cmp	r6, #0
   17098:	beq	16ed0 <close_stdout@@Base+0x33a0>
   1709c:	ldrb	r5, [r5]
   170a0:	cmp	r5, #0
   170a4:	beq	16ed0 <close_stdout@@Base+0x33a0>
   170a8:	mov	r0, r6
   170ac:	mov	r1, r5
   170b0:	bl	11490 <strchr@plt>
   170b4:	cmp	r0, #0
   170b8:	beq	16ed0 <close_stdout@@Base+0x33a0>
   170bc:	mov	r0, #1
   170c0:	mov	r1, #0
   170c4:	mov	r7, r4
   170c8:	strd	r0, [sp]
   170cc:	b	16f74 <close_stdout@@Base+0x3444>
   170d0:	ldrd	r2, [sp]
   170d4:	orr	r0, r7, #2
   170d8:	strd	r2, [r9]
   170dc:	b	16ed4 <close_stdout@@Base+0x33a4>
   170e0:	mov	r3, #0
   170e4:	add	r2, fp, r6
   170e8:	str	r2, [r8]
   170ec:	ldrb	r2, [fp, r6]
   170f0:	orr	r7, r7, r3
   170f4:	cmp	r2, #0
   170f8:	orrne	r7, r7, #2
   170fc:	b	16f40 <close_stdout@@Base+0x3410>
   17100:	ldrd	r2, [sp]
   17104:	cmp	r2, #0
   17108:	sbcs	r3, r3, #0
   1710c:	blt	17548 <close_stdout@@Base+0x3a18>
   17110:	ldrd	r0, [sp]
   17114:	mov	r3, #0
   17118:	adds	r0, r0, r0
   1711c:	adc	r1, r1, r1
   17120:	strd	r0, [sp]
   17124:	b	170e4 <close_stdout@@Base+0x35b4>
   17128:	ldrd	r0, [sp]
   1712c:	movw	r3, #65535	; 0xffff
   17130:	movt	r3, #127	; 0x7f
   17134:	mvn	r2, #0
   17138:	cmp	r1, r3
   1713c:	cmpeq	r0, r2
   17140:	bhi	17548 <close_stdout@@Base+0x3a18>
   17144:	lsl	r2, r1, #9
   17148:	ldr	r1, [sp]
   1714c:	lsl	r3, r0, #9
   17150:	str	r3, [sp]
   17154:	mov	r3, #0
   17158:	orr	r2, r2, r1, lsr #23
   1715c:	str	r2, [sp, #4]
   17160:	b	170e4 <close_stdout@@Base+0x35b4>
   17164:	asr	r5, r4, #31
   17168:	mov	r2, r4
   1716c:	mvn	r0, #0
   17170:	mvn	r1, #0
   17174:	mov	r3, r5
   17178:	bl	17fb8 <close_stdout@@Base+0x4488>
   1717c:	mov	ip, r7
   17180:	str	r6, [sp, #20]
   17184:	mov	r2, #7
   17188:	ldrd	r6, [sp]
   1718c:	mov	r3, #0
   17190:	strd	r0, [sp, #8]
   17194:	ldrd	r0, [sp, #8]
   17198:	cmp	r1, r7
   1719c:	cmpeq	r0, r6
   171a0:	mulcs	r0, r6, r5
   171a4:	movcs	r1, #0
   171a8:	mlacs	r0, r4, r7, r0
   171ac:	movcc	r1, #1
   171b0:	umullcs	r6, r7, r6, r4
   171b4:	mvncc	r6, #0
   171b8:	mvncc	r7, #0
   171bc:	orr	r3, r3, r1
   171c0:	addcs	r7, r0, r7
   171c4:	subs	r2, r2, #1
   171c8:	bne	17194 <close_stdout@@Base+0x3664>
   171cc:	strd	r6, [sp]
   171d0:	mov	r7, ip
   171d4:	ldr	r6, [sp, #20]
   171d8:	b	170e4 <close_stdout@@Base+0x35b4>
   171dc:	asr	r5, r4, #31
   171e0:	mov	r2, r4
   171e4:	mvn	r0, #0
   171e8:	mvn	r1, #0
   171ec:	mov	r3, r5
   171f0:	bl	17fb8 <close_stdout@@Base+0x4488>
   171f4:	mov	ip, r7
   171f8:	str	r6, [sp, #20]
   171fc:	mov	r2, #8
   17200:	ldrd	r6, [sp]
   17204:	mov	r3, #0
   17208:	strd	r0, [sp, #8]
   1720c:	ldrd	r0, [sp, #8]
   17210:	cmp	r1, r7
   17214:	cmpeq	r0, r6
   17218:	mulcs	r0, r6, r5
   1721c:	movcs	r1, #0
   17220:	mlacs	r0, r4, r7, r0
   17224:	movcc	r1, #1
   17228:	umullcs	r6, r7, r6, r4
   1722c:	mvncc	r6, #0
   17230:	mvncc	r7, #0
   17234:	orr	r3, r3, r1
   17238:	addcs	r7, r0, r7
   1723c:	subs	r2, r2, #1
   17240:	bne	1720c <close_stdout@@Base+0x36dc>
   17244:	b	171cc <close_stdout@@Base+0x369c>
   17248:	mov	r2, r4
   1724c:	asr	r3, r4, #31
   17250:	mvn	r0, #0
   17254:	mvn	r1, #0
   17258:	strd	r2, [sp, #8]
   1725c:	bl	17fb8 <close_stdout@@Base+0x4488>
   17260:	ldrd	r2, [sp]
   17264:	cmp	r3, r1
   17268:	cmpeq	r2, r0
   1726c:	bhi	17534 <close_stdout@@Base+0x3a04>
   17270:	ldr	r3, [sp]
   17274:	ldr	ip, [sp, #12]
   17278:	ldr	r0, [sp, #4]
   1727c:	ldr	r1, [sp]
   17280:	mul	r2, r3, ip
   17284:	mov	r3, #0
   17288:	mla	r2, r4, r0, r2
   1728c:	umull	r0, r1, r1, r4
   17290:	add	r2, r2, r1
   17294:	strd	r0, [sp]
   17298:	str	r2, [sp, #4]
   1729c:	b	170e4 <close_stdout@@Base+0x35b4>
   172a0:	asr	r5, r4, #31
   172a4:	mov	r2, r4
   172a8:	mvn	r0, #0
   172ac:	mvn	r1, #0
   172b0:	mov	r3, r5
   172b4:	bl	17fb8 <close_stdout@@Base+0x4488>
   172b8:	mov	ip, r7
   172bc:	str	r6, [sp, #20]
   172c0:	mov	r2, #3
   172c4:	ldrd	r6, [sp]
   172c8:	mov	r3, #0
   172cc:	strd	r0, [sp, #8]
   172d0:	ldrd	r0, [sp, #8]
   172d4:	cmp	r1, r7
   172d8:	cmpeq	r0, r6
   172dc:	mulcs	r0, r6, r5
   172e0:	movcs	r1, #0
   172e4:	mlacs	r0, r4, r7, r0
   172e8:	movcc	r1, #1
   172ec:	umullcs	r6, r7, r6, r4
   172f0:	mvncc	r6, #0
   172f4:	mvncc	r7, #0
   172f8:	orr	r3, r3, r1
   172fc:	addcs	r7, r0, r7
   17300:	subs	r2, r2, #1
   17304:	bne	172d0 <close_stdout@@Base+0x37a0>
   17308:	b	171cc <close_stdout@@Base+0x369c>
   1730c:	asr	r5, r4, #31
   17310:	mov	r2, r4
   17314:	mvn	r0, #0
   17318:	mvn	r1, #0
   1731c:	mov	r3, r5
   17320:	bl	17fb8 <close_stdout@@Base+0x4488>
   17324:	mov	ip, r7
   17328:	str	r6, [sp, #20]
   1732c:	mov	r2, #6
   17330:	ldrd	r6, [sp]
   17334:	mov	r3, #0
   17338:	strd	r0, [sp, #8]
   1733c:	ldrd	r0, [sp, #8]
   17340:	cmp	r1, r7
   17344:	cmpeq	r0, r6
   17348:	mulcs	r0, r6, r5
   1734c:	movcs	r1, #0
   17350:	mlacs	r0, r4, r7, r0
   17354:	movcc	r1, #1
   17358:	umullcs	r6, r7, r6, r4
   1735c:	mvncc	r6, #0
   17360:	mvncc	r7, #0
   17364:	orr	r3, r3, r1
   17368:	addcs	r7, r0, r7
   1736c:	subs	r2, r2, #1
   17370:	bne	1733c <close_stdout@@Base+0x380c>
   17374:	b	171cc <close_stdout@@Base+0x369c>
   17378:	ldrd	r0, [sp]
   1737c:	movw	r3, #65535	; 0xffff
   17380:	movt	r3, #63	; 0x3f
   17384:	mvn	r2, #0
   17388:	cmp	r1, r3
   1738c:	cmpeq	r0, r2
   17390:	bhi	17534 <close_stdout@@Base+0x3a04>
   17394:	lsl	r2, r1, #10
   17398:	ldr	r1, [sp]
   1739c:	lsl	r3, r0, #10
   173a0:	str	r3, [sp]
   173a4:	mov	r3, #0
   173a8:	orr	r2, r2, r1, lsr #22
   173ac:	str	r2, [sp, #4]
   173b0:	b	170e4 <close_stdout@@Base+0x35b4>
   173b4:	asr	r5, r4, #31
   173b8:	mov	r2, r4
   173bc:	mvn	r0, #0
   173c0:	mvn	r1, #0
   173c4:	mov	r3, r5
   173c8:	bl	17fb8 <close_stdout@@Base+0x4488>
   173cc:	mov	ip, r7
   173d0:	str	r6, [sp, #20]
   173d4:	mov	r2, #5
   173d8:	ldrd	r6, [sp]
   173dc:	mov	r3, #0
   173e0:	strd	r0, [sp, #8]
   173e4:	ldrd	r0, [sp, #8]
   173e8:	cmp	r1, r7
   173ec:	cmpeq	r0, r6
   173f0:	mulcs	r0, r6, r5
   173f4:	movcs	r1, #0
   173f8:	mlacs	r0, r4, r7, r0
   173fc:	movcc	r1, #1
   17400:	umullcs	r6, r7, r6, r4
   17404:	mvncc	r6, #0
   17408:	mvncc	r7, #0
   1740c:	orr	r3, r3, r1
   17410:	addcs	r7, r0, r7
   17414:	subs	r2, r2, #1
   17418:	bne	173e4 <close_stdout@@Base+0x38b4>
   1741c:	b	171cc <close_stdout@@Base+0x369c>
   17420:	mov	r2, r4
   17424:	asr	r3, r4, #31
   17428:	mvn	r0, #0
   1742c:	mvn	r1, #0
   17430:	strd	r2, [sp, #8]
   17434:	bl	17fb8 <close_stdout@@Base+0x4488>
   17438:	ldrd	r2, [sp]
   1743c:	cmp	r3, r1
   17440:	cmpeq	r2, r0
   17444:	bhi	1755c <close_stdout@@Base+0x3a2c>
   17448:	ldr	ip, [sp, #4]
   1744c:	mul	r3, r4, ip
   17450:	ldr	ip, [sp, #12]
   17454:	mla	r3, r2, ip, r3
   17458:	ldr	r2, [sp]
   1745c:	umull	r4, r5, r4, r2
   17460:	add	r5, r3, r5
   17464:	cmp	r1, r5
   17468:	cmpeq	r0, r4
   1746c:	bcc	1755c <close_stdout@@Base+0x3a2c>
   17470:	mul	r2, r4, ip
   17474:	ldr	ip, [sp, #8]
   17478:	mov	r3, #0
   1747c:	umull	r0, r1, r4, ip
   17480:	mla	r2, ip, r5, r2
   17484:	strd	r0, [sp]
   17488:	add	r2, r2, r1
   1748c:	str	r2, [sp, #4]
   17490:	b	170e4 <close_stdout@@Base+0x35b4>
   17494:	asr	r5, r4, #31
   17498:	mov	r2, r4
   1749c:	mvn	r0, #0
   174a0:	mvn	r1, #0
   174a4:	mov	r3, r5
   174a8:	bl	17fb8 <close_stdout@@Base+0x4488>
   174ac:	mov	ip, r7
   174b0:	str	r6, [sp, #20]
   174b4:	mov	r2, #4
   174b8:	ldrd	r6, [sp]
   174bc:	mov	r3, #0
   174c0:	strd	r0, [sp, #8]
   174c4:	ldrd	r0, [sp, #8]
   174c8:	cmp	r1, r7
   174cc:	cmpeq	r0, r6
   174d0:	mulcs	r0, r6, r5
   174d4:	movcs	r1, #0
   174d8:	mlacs	r0, r4, r7, r0
   174dc:	movcc	r1, #1
   174e0:	umullcs	r6, r7, r6, r4
   174e4:	mvncc	r6, #0
   174e8:	mvncc	r7, #0
   174ec:	orr	r3, r3, r1
   174f0:	addcs	r7, r0, r7
   174f4:	subs	r2, r2, #1
   174f8:	bne	174c4 <close_stdout@@Base+0x3994>
   174fc:	b	171cc <close_stdout@@Base+0x369c>
   17500:	ldrd	r0, [sp]
   17504:	strd	r0, [r9]
   17508:	mov	r0, r7
   1750c:	b	16ed4 <close_stdout@@Base+0x33a4>
   17510:	ldrb	r3, [fp, #2]
   17514:	mov	r4, #1024	; 0x400
   17518:	cmp	r3, #66	; 0x42
   1751c:	moveq	r6, #3
   17520:	movne	r6, #1
   17524:	b	16fac <close_stdout@@Base+0x347c>
   17528:	mov	r6, #2
   1752c:	mov	r4, #1000	; 0x3e8
   17530:	b	16fac <close_stdout@@Base+0x347c>
   17534:	mvn	r3, #0
   17538:	mvn	r2, #0
   1753c:	strd	r2, [sp]
   17540:	mov	r3, #1
   17544:	b	170e4 <close_stdout@@Base+0x35b4>
   17548:	mvn	r0, #0
   1754c:	mvn	r1, #0
   17550:	mov	r3, #1
   17554:	strd	r0, [sp]
   17558:	b	170e4 <close_stdout@@Base+0x35b4>
   1755c:	mvn	r0, #0
   17560:	mvn	r1, #0
   17564:	mov	r3, #1
   17568:	strd	r0, [sp]
   1756c:	b	170e4 <close_stdout@@Base+0x35b4>
   17570:	bl	1134c <__stack_chk_fail@plt>
   17574:	ldr	r0, [pc, #32]	; 1759c <close_stdout@@Base+0x3a6c>
   17578:	mov	r2, #96	; 0x60
   1757c:	ldr	r1, [pc, #28]	; 175a0 <close_stdout@@Base+0x3a70>
   17580:	ldr	r3, [pc, #28]	; 175a4 <close_stdout@@Base+0x3a74>
   17584:	add	r0, pc, r0
   17588:	add	r1, pc, r1
   1758c:	add	r3, pc, r3
   17590:	bl	115ec <__assert_fail@plt>
   17594:	muleq	r1, r8, r1
   17598:	andeq	r0, r0, r8, lsr r1
   1759c:	andeq	r2, r0, r4, lsr #6
   175a0:	andeq	r2, r0, r8, asr #6
   175a4:	andeq	r2, r0, r0, ror #6
   175a8:	push	{r4, r5, r6, lr}
   175ac:	sub	sp, sp, #8
   175b0:	mov	r4, r0
   175b4:	bl	11508 <fileno@plt>
   175b8:	cmp	r0, #0
   175bc:	mov	r0, r4
   175c0:	blt	1763c <close_stdout@@Base+0x3b0c>
   175c4:	bl	1143c <__freading@plt>
   175c8:	cmp	r0, #0
   175cc:	bne	17608 <close_stdout@@Base+0x3ad8>
   175d0:	mov	r0, r4
   175d4:	bl	177bc <close_stdout@@Base+0x3c8c>
   175d8:	cmp	r0, #0
   175dc:	beq	17638 <close_stdout@@Base+0x3b08>
   175e0:	bl	114c0 <__errno_location@plt>
   175e4:	ldr	r6, [r0]
   175e8:	mov	r5, r0
   175ec:	mov	r0, r4
   175f0:	bl	1152c <fclose@plt>
   175f4:	cmp	r6, #0
   175f8:	mvnne	r0, #0
   175fc:	strne	r6, [r5]
   17600:	add	sp, sp, #8
   17604:	pop	{r4, r5, r6, pc}
   17608:	mov	r0, r4
   1760c:	bl	11508 <fileno@plt>
   17610:	mov	r1, #1
   17614:	mov	r2, #0
   17618:	mov	r3, #0
   1761c:	str	r1, [sp]
   17620:	bl	113b8 <lseek64@plt>
   17624:	mvn	r2, #0
   17628:	mvn	r3, #0
   1762c:	cmp	r1, r3
   17630:	cmpeq	r0, r2
   17634:	bne	175d0 <close_stdout@@Base+0x3aa0>
   17638:	mov	r0, r4
   1763c:	add	sp, sp, #8
   17640:	pop	{r4, r5, r6, lr}
   17644:	b	1152c <fclose@plt>
   17648:	push	{r1, r2, r3}
   1764c:	movw	ip, #1030	; 0x406
   17650:	ldr	r3, [pc, #336]	; 177a8 <close_stdout@@Base+0x3c78>
   17654:	push	{r4, r5, r6, r7, r8, lr}
   17658:	add	r3, pc, r3
   1765c:	ldr	lr, [pc, #328]	; 177ac <close_stdout@@Base+0x3c7c>
   17660:	sub	sp, sp, #12
   17664:	add	r2, sp, #40	; 0x28
   17668:	mov	r6, r0
   1766c:	ldr	r1, [sp, #36]	; 0x24
   17670:	ldr	r4, [r3, lr]
   17674:	cmp	r1, ip
   17678:	str	r2, [sp]
   1767c:	ldr	r3, [r4]
   17680:	str	r3, [sp, #4]
   17684:	bne	17708 <close_stdout@@Base+0x3bd8>
   17688:	ldr	r8, [pc, #288]	; 177b0 <close_stdout@@Base+0x3c80>
   1768c:	add	r3, sp, #44	; 0x2c
   17690:	str	r3, [sp]
   17694:	add	r8, pc, r8
   17698:	ldr	r7, [sp, #40]	; 0x28
   1769c:	ldr	r3, [r8]
   176a0:	mov	r2, r7
   176a4:	cmp	r3, #0
   176a8:	blt	17794 <close_stdout@@Base+0x3c64>
   176ac:	bl	114b4 <fcntl@plt>
   176b0:	subs	r5, r0, #0
   176b4:	blt	17718 <close_stdout@@Base+0x3be8>
   176b8:	ldr	r3, [pc, #244]	; 177b4 <close_stdout@@Base+0x3c84>
   176bc:	mov	r2, #1
   176c0:	add	r3, pc, r3
   176c4:	str	r2, [r3]
   176c8:	cmp	r5, #0
   176cc:	blt	176e4 <close_stdout@@Base+0x3bb4>
   176d0:	ldr	r3, [pc, #224]	; 177b8 <close_stdout@@Base+0x3c88>
   176d4:	add	r3, pc, r3
   176d8:	ldr	r3, [r3]
   176dc:	cmn	r3, #1
   176e0:	beq	17748 <close_stdout@@Base+0x3c18>
   176e4:	ldr	r2, [sp, #4]
   176e8:	mov	r0, r5
   176ec:	ldr	r3, [r4]
   176f0:	cmp	r2, r3
   176f4:	bne	177a4 <close_stdout@@Base+0x3c74>
   176f8:	add	sp, sp, #12
   176fc:	pop	{r4, r5, r6, r7, r8, lr}
   17700:	add	sp, sp, #12
   17704:	bx	lr
   17708:	ldr	r2, [sp, #40]	; 0x28
   1770c:	bl	114b4 <fcntl@plt>
   17710:	mov	r5, r0
   17714:	b	176e4 <close_stdout@@Base+0x3bb4>
   17718:	bl	114c0 <__errno_location@plt>
   1771c:	ldr	r3, [r0]
   17720:	cmp	r3, #22
   17724:	bne	176b8 <close_stdout@@Base+0x3b88>
   17728:	mov	r0, r6
   1772c:	mov	r2, r7
   17730:	mov	r1, #0
   17734:	bl	17648 <close_stdout@@Base+0x3b18>
   17738:	subs	r5, r0, #0
   1773c:	blt	176e4 <close_stdout@@Base+0x3bb4>
   17740:	mvn	r3, #0
   17744:	str	r3, [r8]
   17748:	mov	r0, r5
   1774c:	mov	r1, #1
   17750:	bl	114b4 <fcntl@plt>
   17754:	subs	r2, r0, #0
   17758:	blt	17774 <close_stdout@@Base+0x3c44>
   1775c:	orr	r2, r2, #1
   17760:	mov	r0, r5
   17764:	mov	r1, #2
   17768:	bl	114b4 <fcntl@plt>
   1776c:	cmn	r0, #1
   17770:	bne	176e4 <close_stdout@@Base+0x3bb4>
   17774:	bl	114c0 <__errno_location@plt>
   17778:	ldr	r7, [r0]
   1777c:	mov	r6, r0
   17780:	mov	r0, r5
   17784:	mvn	r5, #0
   17788:	bl	115d4 <close@plt>
   1778c:	str	r7, [r6]
   17790:	b	176e4 <close_stdout@@Base+0x3bb4>
   17794:	mov	r1, #0
   17798:	bl	17648 <close_stdout@@Base+0x3b18>
   1779c:	mov	r5, r0
   177a0:	b	176c8 <close_stdout@@Base+0x3b98>
   177a4:	bl	1134c <__stack_chk_fail@plt>
   177a8:	andeq	r2, r1, r0, lsr #19
   177ac:	andeq	r0, r0, r8, lsr r1
   177b0:	andeq	r2, r1, r8, asr sp
   177b4:	andeq	r2, r1, ip, lsr #26
   177b8:	andeq	r2, r1, r8, lsl sp
   177bc:	push	{r4, lr}
   177c0:	subs	r4, r0, #0
   177c4:	sub	sp, sp, #8
   177c8:	beq	177d8 <close_stdout@@Base+0x3ca8>
   177cc:	bl	1143c <__freading@plt>
   177d0:	cmp	r0, #0
   177d4:	bne	177e8 <close_stdout@@Base+0x3cb8>
   177d8:	mov	r0, r4
   177dc:	add	sp, sp, #8
   177e0:	pop	{r4, lr}
   177e4:	b	112c8 <fflush@plt>
   177e8:	ldr	r3, [r4]
   177ec:	tst	r3, #256	; 0x100
   177f0:	beq	177d8 <close_stdout@@Base+0x3ca8>
   177f4:	mov	r3, #1
   177f8:	mov	r0, r4
   177fc:	str	r3, [sp]
   17800:	mov	r2, #0
   17804:	mov	r3, #0
   17808:	bl	1781c <close_stdout@@Base+0x3cec>
   1780c:	mov	r0, r4
   17810:	add	sp, sp, #8
   17814:	pop	{r4, lr}
   17818:	b	112c8 <fflush@plt>
   1781c:	push	{r4, r5, r6, r7, lr}
   17820:	sub	sp, sp, #20
   17824:	ldmib	r0, {r1, ip}
   17828:	mov	r6, r0
   1782c:	ldr	r4, [sp, #40]	; 0x28
   17830:	cmp	ip, r1
   17834:	beq	1784c <close_stdout@@Base+0x3d1c>
   17838:	str	r4, [sp, #40]	; 0x28
   1783c:	mov	r0, r6
   17840:	add	sp, sp, #20
   17844:	pop	{r4, r5, r6, r7, lr}
   17848:	b	11538 <fseeko64@plt>
   1784c:	ldr	ip, [r0, #20]
   17850:	ldr	r1, [r0, #16]
   17854:	cmp	ip, r1
   17858:	bne	17838 <close_stdout@@Base+0x3d08>
   1785c:	ldr	r7, [r0, #36]	; 0x24
   17860:	cmp	r7, #0
   17864:	bne	17838 <close_stdout@@Base+0x3d08>
   17868:	str	r2, [sp, #12]
   1786c:	mvn	r5, #0
   17870:	str	r3, [sp, #8]
   17874:	bl	11508 <fileno@plt>
   17878:	str	r4, [sp]
   1787c:	mvn	r4, #0
   17880:	ldr	r2, [sp, #12]
   17884:	ldr	r3, [sp, #8]
   17888:	bl	113b8 <lseek64@plt>
   1788c:	mov	r2, r0
   17890:	mov	r3, r1
   17894:	cmp	r3, r5
   17898:	cmpeq	r2, r4
   1789c:	beq	178bc <close_stdout@@Base+0x3d8c>
   178a0:	ldr	r1, [r6]
   178a4:	mov	r0, r7
   178a8:	strd	r2, [r6, #80]	; 0x50
   178ac:	bic	r3, r1, #16
   178b0:	str	r3, [r6]
   178b4:	add	sp, sp, #20
   178b8:	pop	{r4, r5, r6, r7, pc}
   178bc:	mvn	r0, #0
   178c0:	b	178b4 <close_stdout@@Base+0x3d84>
   178c4:	push	{r4, r5, r6, lr}
   178c8:	mov	r4, r0
   178cc:	bl	113dc <__fpending@plt>
   178d0:	mov	r6, r0
   178d4:	mov	r0, r4
   178d8:	ldr	r4, [r4]
   178dc:	bl	175a8 <close_stdout@@Base+0x3a78>
   178e0:	and	r4, r4, #32
   178e4:	adds	r5, r0, #0
   178e8:	movne	r5, #1
   178ec:	cmp	r4, #0
   178f0:	bne	17910 <close_stdout@@Base+0x3de0>
   178f4:	cmp	r5, #0
   178f8:	beq	17908 <close_stdout@@Base+0x3dd8>
   178fc:	cmp	r6, #0
   17900:	beq	1792c <close_stdout@@Base+0x3dfc>
   17904:	mvn	r4, #0
   17908:	mov	r0, r4
   1790c:	pop	{r4, r5, r6, pc}
   17910:	cmp	r5, #0
   17914:	bne	17904 <close_stdout@@Base+0x3dd4>
   17918:	bl	114c0 <__errno_location@plt>
   1791c:	mvn	r4, #0
   17920:	str	r5, [r0]
   17924:	mov	r0, r4
   17928:	pop	{r4, r5, r6, pc}
   1792c:	bl	114c0 <__errno_location@plt>
   17930:	ldr	r4, [r0]
   17934:	subs	r4, r4, #9
   17938:	mvnne	r4, #0
   1793c:	mov	r0, r4
   17940:	pop	{r4, r5, r6, pc}
   17944:	ldr	r3, [pc, #984]	; 17d24 <close_stdout@@Base+0x41f4>
   17948:	mov	r0, #14
   1794c:	ldr	r2, [pc, #980]	; 17d28 <close_stdout@@Base+0x41f8>
   17950:	add	r3, pc, r3
   17954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17958:	sub	sp, sp, #132	; 0x84
   1795c:	ldr	r6, [r3, r2]
   17960:	ldr	r3, [r6]
   17964:	str	r3, [sp, #124]	; 0x7c
   17968:	bl	11574 <nl_langinfo@plt>
   1796c:	subs	r5, r0, #0
   17970:	beq	17a24 <close_stdout@@Base+0x3ef4>
   17974:	ldr	r3, [pc, #944]	; 17d2c <close_stdout@@Base+0x41fc>
   17978:	ldr	r4, [pc, r3]
   1797c:	cmp	r4, #0
   17980:	beq	17a30 <close_stdout@@Base+0x3f00>
   17984:	ldrb	r7, [r4]
   17988:	cmp	r7, #0
   1798c:	bne	179c0 <close_stdout@@Base+0x3e90>
   17990:	b	179f8 <close_stdout@@Base+0x3ec8>
   17994:	mov	r0, r4
   17998:	bl	11484 <strlen@plt>
   1799c:	add	r0, r0, #1
   179a0:	add	r7, r4, r0
   179a4:	mov	r0, r7
   179a8:	bl	11484 <strlen@plt>
   179ac:	add	r0, r0, #1
   179b0:	add	r4, r7, r0
   179b4:	ldrb	r7, [r7, r0]
   179b8:	cmp	r7, #0
   179bc:	beq	179f8 <close_stdout@@Base+0x3ec8>
   179c0:	mov	r0, r5
   179c4:	mov	r1, r4
   179c8:	bl	112b0 <strcmp@plt>
   179cc:	cmp	r0, #0
   179d0:	beq	179e8 <close_stdout@@Base+0x3eb8>
   179d4:	cmp	r7, #42	; 0x2a
   179d8:	bne	17994 <close_stdout@@Base+0x3e64>
   179dc:	ldrb	r3, [r4, #1]
   179e0:	cmp	r3, #0
   179e4:	bne	17994 <close_stdout@@Base+0x3e64>
   179e8:	mov	r0, r4
   179ec:	bl	11484 <strlen@plt>
   179f0:	add	r0, r0, #1
   179f4:	add	r5, r4, r0
   179f8:	ldrb	r3, [r5]
   179fc:	cmp	r3, #0
   17a00:	ldreq	r5, [pc, #808]	; 17d30 <close_stdout@@Base+0x4200>
   17a04:	addeq	r5, pc, r5
   17a08:	ldr	r2, [sp, #124]	; 0x7c
   17a0c:	mov	r0, r5
   17a10:	ldr	r3, [r6]
   17a14:	cmp	r2, r3
   17a18:	bne	17cf8 <close_stdout@@Base+0x41c8>
   17a1c:	add	sp, sp, #132	; 0x84
   17a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a24:	ldr	r5, [pc, #776]	; 17d34 <close_stdout@@Base+0x4204>
   17a28:	add	r5, pc, r5
   17a2c:	b	17974 <close_stdout@@Base+0x3e44>
   17a30:	ldr	r0, [pc, #768]	; 17d38 <close_stdout@@Base+0x4208>
   17a34:	add	r0, pc, r0
   17a38:	bl	1140c <getenv@plt>
   17a3c:	subs	r8, r0, #0
   17a40:	beq	17cd0 <close_stdout@@Base+0x41a0>
   17a44:	ldrb	r3, [r8]
   17a48:	cmp	r3, #0
   17a4c:	beq	17c64 <close_stdout@@Base+0x4134>
   17a50:	bl	11484 <strlen@plt>
   17a54:	subs	sl, r0, #0
   17a58:	subne	r3, sl, #1
   17a5c:	bne	17c74 <close_stdout@@Base+0x4144>
   17a60:	mov	r9, #0
   17a64:	mov	fp, r9
   17a68:	add	r9, sl, r9
   17a6c:	add	r0, r9, #14
   17a70:	bl	11418 <malloc@plt>
   17a74:	subs	r7, r0, #0
   17a78:	beq	17cc4 <close_stdout@@Base+0x4194>
   17a7c:	mov	r1, r8
   17a80:	mov	r2, sl
   17a84:	bl	112f8 <memcpy@plt>
   17a88:	cmp	fp, #0
   17a8c:	add	ip, r7, r9
   17a90:	movne	r3, #47	; 0x2f
   17a94:	strbne	r3, [r7, sl]
   17a98:	ldr	r3, [pc, #668]	; 17d3c <close_stdout@@Base+0x420c>
   17a9c:	add	r3, pc, r3
   17aa0:	ldm	r3!, {r0, r1, r2}
   17aa4:	ldrh	r3, [r3]
   17aa8:	str	r0, [r7, r9]
   17aac:	mov	r0, r7
   17ab0:	str	r1, [ip, #4]
   17ab4:	mov	r1, #32768	; 0x8000
   17ab8:	strh	r3, [ip, #12]
   17abc:	str	r2, [ip, #8]
   17ac0:	bl	11400 <open64@plt>
   17ac4:	subs	r8, r0, #0
   17ac8:	blt	17c8c <close_stdout@@Base+0x415c>
   17acc:	ldr	r1, [pc, #620]	; 17d40 <close_stdout@@Base+0x4210>
   17ad0:	add	r1, pc, r1
   17ad4:	bl	11280 <fdopen@plt>
   17ad8:	subs	fp, r0, #0
   17adc:	beq	17ce4 <close_stdout@@Base+0x41b4>
   17ae0:	ldr	r0, [pc, #604]	; 17d44 <close_stdout@@Base+0x4214>
   17ae4:	add	sl, sp, #20
   17ae8:	add	r9, sp, #72	; 0x48
   17aec:	mov	r8, #0
   17af0:	add	r0, pc, r0
   17af4:	str	r0, [sp, #12]
   17af8:	ldr	r3, [fp, #4]
   17afc:	ldr	r2, [fp, #8]
   17b00:	cmp	r3, r2
   17b04:	bcs	17bf0 <close_stdout@@Base+0x40c0>
   17b08:	add	r2, r3, #1
   17b0c:	str	r2, [fp, #4]
   17b10:	ldrb	r0, [r3]
   17b14:	cmp	r0, #32
   17b18:	beq	17af8 <close_stdout@@Base+0x3fc8>
   17b1c:	sub	r3, r0, #9
   17b20:	cmp	r3, #1
   17b24:	bls	17af8 <close_stdout@@Base+0x3fc8>
   17b28:	cmp	r0, #35	; 0x23
   17b2c:	beq	17c04 <close_stdout@@Base+0x40d4>
   17b30:	mov	r1, fp
   17b34:	bl	114a8 <ungetc@plt>
   17b38:	mov	r0, fp
   17b3c:	ldr	r1, [sp, #12]
   17b40:	mov	r2, sl
   17b44:	mov	r3, r9
   17b48:	bl	114f0 <fscanf@plt>
   17b4c:	cmp	r0, #1
   17b50:	ble	17c34 <close_stdout@@Base+0x4104>
   17b54:	mov	r0, sl
   17b58:	bl	11484 <strlen@plt>
   17b5c:	str	r0, [sp, #8]
   17b60:	mov	r0, r9
   17b64:	bl	11484 <strlen@plt>
   17b68:	cmp	r8, #0
   17b6c:	mov	r2, r0
   17b70:	bne	17c98 <close_stdout@@Base+0x4168>
   17b74:	ldr	r3, [sp, #8]
   17b78:	str	r2, [sp]
   17b7c:	add	r8, r0, r3
   17b80:	add	r0, r8, #3
   17b84:	add	r8, r8, #2
   17b88:	bl	11418 <malloc@plt>
   17b8c:	ldr	r2, [sp]
   17b90:	mov	r3, r0
   17b94:	cmp	r3, #0
   17b98:	beq	17cfc <close_stdout@@Base+0x41cc>
   17b9c:	ldr	r0, [sp, #8]
   17ba0:	movw	r1, #65534	; 0xfffe
   17ba4:	movt	r1, #65535	; 0xffff
   17ba8:	rsb	r2, r2, r8
   17bac:	rsb	r1, r0, r1
   17bb0:	stm	sp, {r2, r3}
   17bb4:	add	r0, r1, r2
   17bb8:	mov	r1, sl
   17bbc:	add	r0, r3, r0
   17bc0:	mov	r4, r3
   17bc4:	bl	113d0 <strcpy@plt>
   17bc8:	ldr	r2, [sp]
   17bcc:	ldr	r3, [sp, #4]
   17bd0:	mov	r1, r9
   17bd4:	sub	r0, r2, #1
   17bd8:	add	r0, r3, r0
   17bdc:	bl	113d0 <strcpy@plt>
   17be0:	ldr	r3, [fp, #4]
   17be4:	ldr	r2, [fp, #8]
   17be8:	cmp	r3, r2
   17bec:	bcc	17b08 <close_stdout@@Base+0x3fd8>
   17bf0:	mov	r0, fp
   17bf4:	bl	11544 <__uflow@plt>
   17bf8:	cmn	r0, #1
   17bfc:	beq	17c34 <close_stdout@@Base+0x4104>
   17c00:	b	17b14 <close_stdout@@Base+0x3fe4>
   17c04:	ldr	r3, [fp, #4]
   17c08:	ldr	r2, [fp, #8]
   17c0c:	cmp	r3, r2
   17c10:	bcs	17d18 <close_stdout@@Base+0x41e8>
   17c14:	add	r2, r3, #1
   17c18:	str	r2, [fp, #4]
   17c1c:	ldrb	r0, [r3]
   17c20:	cmp	r0, #10
   17c24:	cmnne	r0, #1
   17c28:	bne	17c04 <close_stdout@@Base+0x40d4>
   17c2c:	cmn	r0, #1
   17c30:	bne	17af8 <close_stdout@@Base+0x3fc8>
   17c34:	mov	r0, fp
   17c38:	bl	175a8 <close_stdout@@Base+0x3a78>
   17c3c:	cmp	r8, #0
   17c40:	beq	17c8c <close_stdout@@Base+0x415c>
   17c44:	mov	r3, #0
   17c48:	strb	r3, [r4, r8]
   17c4c:	mov	r0, r7
   17c50:	bl	112e0 <free@plt>
   17c54:	ldr	r3, [pc, #236]	; 17d48 <close_stdout@@Base+0x4218>
   17c58:	add	r3, pc, r3
   17c5c:	str	r4, [r3]
   17c60:	b	17984 <close_stdout@@Base+0x3e54>
   17c64:	ldr	r8, [pc, #224]	; 17d4c <close_stdout@@Base+0x421c>
   17c68:	mov	r3, #7
   17c6c:	mov	sl, #8
   17c70:	add	r8, pc, r8
   17c74:	ldrb	r3, [r8, r3]
   17c78:	cmp	r3, #47	; 0x2f
   17c7c:	movne	r9, #1
   17c80:	movne	fp, r9
   17c84:	bne	17a68 <close_stdout@@Base+0x3f38>
   17c88:	b	17a60 <close_stdout@@Base+0x3f30>
   17c8c:	ldr	r4, [pc, #188]	; 17d50 <close_stdout@@Base+0x4220>
   17c90:	add	r4, pc, r4
   17c94:	b	17c4c <close_stdout@@Base+0x411c>
   17c98:	ldr	r0, [sp, #8]
   17c9c:	str	r2, [sp]
   17ca0:	add	r3, r0, r2
   17ca4:	mov	r0, r4
   17ca8:	add	r8, r3, r8
   17cac:	add	r1, r8, #3
   17cb0:	add	r8, r8, #2
   17cb4:	bl	11370 <realloc@plt>
   17cb8:	ldr	r2, [sp]
   17cbc:	mov	r3, r0
   17cc0:	b	17b94 <close_stdout@@Base+0x4064>
   17cc4:	ldr	r4, [pc, #136]	; 17d54 <close_stdout@@Base+0x4224>
   17cc8:	add	r4, pc, r4
   17ccc:	b	17c54 <close_stdout@@Base+0x4124>
   17cd0:	ldr	r8, [pc, #128]	; 17d58 <close_stdout@@Base+0x4228>
   17cd4:	mov	r3, #7
   17cd8:	mov	sl, #8
   17cdc:	add	r8, pc, r8
   17ce0:	b	17c74 <close_stdout@@Base+0x4144>
   17ce4:	ldr	r4, [pc, #112]	; 17d5c <close_stdout@@Base+0x422c>
   17ce8:	mov	r0, r8
   17cec:	add	r4, pc, r4
   17cf0:	bl	115d4 <close@plt>
   17cf4:	b	17c4c <close_stdout@@Base+0x411c>
   17cf8:	bl	1134c <__stack_chk_fail@plt>
   17cfc:	mov	r0, r4
   17d00:	ldr	r4, [pc, #88]	; 17d60 <close_stdout@@Base+0x4230>
   17d04:	bl	112e0 <free@plt>
   17d08:	mov	r0, fp
   17d0c:	add	r4, pc, r4
   17d10:	bl	175a8 <close_stdout@@Base+0x3a78>
   17d14:	b	17c4c <close_stdout@@Base+0x411c>
   17d18:	mov	r0, fp
   17d1c:	bl	11544 <__uflow@plt>
   17d20:	b	17c20 <close_stdout@@Base+0x40f0>
   17d24:	andeq	r2, r1, r8, lsr #13
   17d28:	andeq	r0, r0, r8, lsr r1
   17d2c:	andeq	r2, r1, r8, ror sl
   17d30:	andeq	r1, r0, r0, lsl #30
   17d34:			; <UNDEFINED> instruction: 0x000016b4
   17d38:	ldrdeq	r1, [r0], -r8
   17d3c:	andeq	r1, r0, r0, lsl #29
   17d40:	andeq	r1, r0, ip, asr lr
   17d44:	andeq	r1, r0, r0, asr #28
   17d48:	muleq	r1, r8, r7
   17d4c:	andeq	r1, r0, r8, lsl #25
   17d50:	andeq	r1, r0, ip, asr #8
   17d54:	andeq	r1, r0, r4, lsl r4
   17d58:	andeq	r1, r0, ip, lsl ip
   17d5c:	strdeq	r1, [r0], -r0
   17d60:	ldrdeq	r1, [r0], -r0
   17d64:	subs	r2, r1, #1
   17d68:	bxeq	lr
   17d6c:	bcc	17f44 <close_stdout@@Base+0x4414>
   17d70:	cmp	r0, r1
   17d74:	bls	17f28 <close_stdout@@Base+0x43f8>
   17d78:	tst	r1, r2
   17d7c:	beq	17f34 <close_stdout@@Base+0x4404>
   17d80:	clz	r3, r0
   17d84:	clz	r2, r1
   17d88:	sub	r3, r2, r3
   17d8c:	rsbs	r3, r3, #31
   17d90:	addne	r3, r3, r3, lsl #1
   17d94:	mov	r2, #0
   17d98:	addne	pc, pc, r3, lsl #2
   17d9c:	nop	{0}
   17da0:	cmp	r0, r1, lsl #31
   17da4:	adc	r2, r2, r2
   17da8:	subcs	r0, r0, r1, lsl #31
   17dac:	cmp	r0, r1, lsl #30
   17db0:	adc	r2, r2, r2
   17db4:	subcs	r0, r0, r1, lsl #30
   17db8:	cmp	r0, r1, lsl #29
   17dbc:	adc	r2, r2, r2
   17dc0:	subcs	r0, r0, r1, lsl #29
   17dc4:	cmp	r0, r1, lsl #28
   17dc8:	adc	r2, r2, r2
   17dcc:	subcs	r0, r0, r1, lsl #28
   17dd0:	cmp	r0, r1, lsl #27
   17dd4:	adc	r2, r2, r2
   17dd8:	subcs	r0, r0, r1, lsl #27
   17ddc:	cmp	r0, r1, lsl #26
   17de0:	adc	r2, r2, r2
   17de4:	subcs	r0, r0, r1, lsl #26
   17de8:	cmp	r0, r1, lsl #25
   17dec:	adc	r2, r2, r2
   17df0:	subcs	r0, r0, r1, lsl #25
   17df4:	cmp	r0, r1, lsl #24
   17df8:	adc	r2, r2, r2
   17dfc:	subcs	r0, r0, r1, lsl #24
   17e00:	cmp	r0, r1, lsl #23
   17e04:	adc	r2, r2, r2
   17e08:	subcs	r0, r0, r1, lsl #23
   17e0c:	cmp	r0, r1, lsl #22
   17e10:	adc	r2, r2, r2
   17e14:	subcs	r0, r0, r1, lsl #22
   17e18:	cmp	r0, r1, lsl #21
   17e1c:	adc	r2, r2, r2
   17e20:	subcs	r0, r0, r1, lsl #21
   17e24:	cmp	r0, r1, lsl #20
   17e28:	adc	r2, r2, r2
   17e2c:	subcs	r0, r0, r1, lsl #20
   17e30:	cmp	r0, r1, lsl #19
   17e34:	adc	r2, r2, r2
   17e38:	subcs	r0, r0, r1, lsl #19
   17e3c:	cmp	r0, r1, lsl #18
   17e40:	adc	r2, r2, r2
   17e44:	subcs	r0, r0, r1, lsl #18
   17e48:	cmp	r0, r1, lsl #17
   17e4c:	adc	r2, r2, r2
   17e50:	subcs	r0, r0, r1, lsl #17
   17e54:	cmp	r0, r1, lsl #16
   17e58:	adc	r2, r2, r2
   17e5c:	subcs	r0, r0, r1, lsl #16
   17e60:	cmp	r0, r1, lsl #15
   17e64:	adc	r2, r2, r2
   17e68:	subcs	r0, r0, r1, lsl #15
   17e6c:	cmp	r0, r1, lsl #14
   17e70:	adc	r2, r2, r2
   17e74:	subcs	r0, r0, r1, lsl #14
   17e78:	cmp	r0, r1, lsl #13
   17e7c:	adc	r2, r2, r2
   17e80:	subcs	r0, r0, r1, lsl #13
   17e84:	cmp	r0, r1, lsl #12
   17e88:	adc	r2, r2, r2
   17e8c:	subcs	r0, r0, r1, lsl #12
   17e90:	cmp	r0, r1, lsl #11
   17e94:	adc	r2, r2, r2
   17e98:	subcs	r0, r0, r1, lsl #11
   17e9c:	cmp	r0, r1, lsl #10
   17ea0:	adc	r2, r2, r2
   17ea4:	subcs	r0, r0, r1, lsl #10
   17ea8:	cmp	r0, r1, lsl #9
   17eac:	adc	r2, r2, r2
   17eb0:	subcs	r0, r0, r1, lsl #9
   17eb4:	cmp	r0, r1, lsl #8
   17eb8:	adc	r2, r2, r2
   17ebc:	subcs	r0, r0, r1, lsl #8
   17ec0:	cmp	r0, r1, lsl #7
   17ec4:	adc	r2, r2, r2
   17ec8:	subcs	r0, r0, r1, lsl #7
   17ecc:	cmp	r0, r1, lsl #6
   17ed0:	adc	r2, r2, r2
   17ed4:	subcs	r0, r0, r1, lsl #6
   17ed8:	cmp	r0, r1, lsl #5
   17edc:	adc	r2, r2, r2
   17ee0:	subcs	r0, r0, r1, lsl #5
   17ee4:	cmp	r0, r1, lsl #4
   17ee8:	adc	r2, r2, r2
   17eec:	subcs	r0, r0, r1, lsl #4
   17ef0:	cmp	r0, r1, lsl #3
   17ef4:	adc	r2, r2, r2
   17ef8:	subcs	r0, r0, r1, lsl #3
   17efc:	cmp	r0, r1, lsl #2
   17f00:	adc	r2, r2, r2
   17f04:	subcs	r0, r0, r1, lsl #2
   17f08:	cmp	r0, r1, lsl #1
   17f0c:	adc	r2, r2, r2
   17f10:	subcs	r0, r0, r1, lsl #1
   17f14:	cmp	r0, r1
   17f18:	adc	r2, r2, r2
   17f1c:	subcs	r0, r0, r1
   17f20:	mov	r0, r2
   17f24:	bx	lr
   17f28:	moveq	r0, #1
   17f2c:	movne	r0, #0
   17f30:	bx	lr
   17f34:	clz	r2, r1
   17f38:	rsb	r2, r2, #31
   17f3c:	lsr	r0, r0, r2
   17f40:	bx	lr
   17f44:	cmp	r0, #0
   17f48:	mvnne	r0, #0
   17f4c:	b	17ff4 <close_stdout@@Base+0x44c4>
   17f50:	cmp	r1, #0
   17f54:	beq	17f44 <close_stdout@@Base+0x4414>
   17f58:	push	{r0, r1, lr}
   17f5c:	bl	17d64 <close_stdout@@Base+0x4234>
   17f60:	pop	{r1, r2, lr}
   17f64:	mul	r3, r2, r0
   17f68:	sub	r1, r1, r3
   17f6c:	bx	lr
   17f70:	cmp	r3, #0
   17f74:	cmpeq	r2, #0
   17f78:	bne	17f9c <close_stdout@@Base+0x446c>
   17f7c:	cmp	r1, #0
   17f80:	movlt	r1, #-2147483648	; 0x80000000
   17f84:	movlt	r0, #0
   17f88:	blt	17f98 <close_stdout@@Base+0x4468>
   17f8c:	cmpeq	r0, #0
   17f90:	mvnne	r1, #-2147483648	; 0x80000000
   17f94:	mvnne	r0, #0
   17f98:	b	17ff4 <close_stdout@@Base+0x44c4>
   17f9c:	sub	sp, sp, #8
   17fa0:	push	{sp, lr}
   17fa4:	bl	18004 <close_stdout@@Base+0x44d4>
   17fa8:	ldr	lr, [sp, #4]
   17fac:	add	sp, sp, #8
   17fb0:	pop	{r2, r3}
   17fb4:	bx	lr
   17fb8:	cmp	r3, #0
   17fbc:	cmpeq	r2, #0
   17fc0:	bne	17fd8 <close_stdout@@Base+0x44a8>
   17fc4:	cmp	r1, #0
   17fc8:	cmpeq	r0, #0
   17fcc:	mvnne	r1, #0
   17fd0:	mvnne	r0, #0
   17fd4:	b	17ff4 <close_stdout@@Base+0x44c4>
   17fd8:	sub	sp, sp, #8
   17fdc:	push	{sp, lr}
   17fe0:	bl	18040 <close_stdout@@Base+0x4510>
   17fe4:	ldr	lr, [sp, #4]
   17fe8:	add	sp, sp, #8
   17fec:	pop	{r2, r3}
   17ff0:	bx	lr
   17ff4:	push	{r1, lr}
   17ff8:	mov	r0, #8
   17ffc:	bl	112a4 <raise@plt>
   18000:	pop	{r1, pc}
   18004:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18008:	mov	r8, r2
   1800c:	mov	r6, r0
   18010:	mov	r7, r1
   18014:	mov	sl, r3
   18018:	ldr	r9, [sp, #32]
   1801c:	bl	1807c <close_stdout@@Base+0x454c>
   18020:	umull	r4, r5, r8, r0
   18024:	mul	r8, r8, r1
   18028:	mla	r2, r0, sl, r8
   1802c:	add	r5, r2, r5
   18030:	subs	r4, r6, r4
   18034:	sbc	r5, r7, r5
   18038:	strd	r4, [r9]
   1803c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18040:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   18044:	mov	r8, r2
   18048:	mov	r6, r0
   1804c:	mov	r7, r1
   18050:	mov	r5, r3
   18054:	ldr	r9, [sp, #32]
   18058:	bl	18508 <close_stdout@@Base+0x49d8>
   1805c:	mul	r3, r0, r5
   18060:	umull	r4, r5, r0, r8
   18064:	mla	r8, r8, r1, r3
   18068:	add	r5, r8, r5
   1806c:	subs	r4, r6, r4
   18070:	sbc	r5, r7, r5
   18074:	strd	r4, [r9]
   18078:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1807c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18080:	rsbs	r4, r0, #0
   18084:	rsc	r5, r1, #0
   18088:	cmp	r1, #0
   1808c:	mvn	r6, #0
   18090:	sub	sp, sp, #12
   18094:	movge	r4, r0
   18098:	movge	r5, r1
   1809c:	movge	r6, #0
   180a0:	cmp	r3, #0
   180a4:	blt	182dc <close_stdout@@Base+0x47ac>
   180a8:	cmp	r3, #0
   180ac:	mov	sl, r4
   180b0:	mov	ip, r5
   180b4:	mov	r0, r2
   180b8:	mov	r1, r3
   180bc:	mov	r8, r2
   180c0:	mov	r7, r4
   180c4:	mov	r9, r5
   180c8:	bne	181c0 <close_stdout@@Base+0x4690>
   180cc:	cmp	r2, r5
   180d0:	bls	181fc <close_stdout@@Base+0x46cc>
   180d4:	clz	r3, r2
   180d8:	cmp	r3, #0
   180dc:	rsbne	r2, r3, #32
   180e0:	lslne	r8, r0, r3
   180e4:	lsrne	r2, r4, r2
   180e8:	lslne	r7, r4, r3
   180ec:	orrne	r9, r2, r5, lsl r3
   180f0:	lsr	r4, r8, #16
   180f4:	uxth	sl, r8
   180f8:	mov	r1, r4
   180fc:	mov	r0, r9
   18100:	bl	17d64 <close_stdout@@Base+0x4234>
   18104:	mov	r1, r4
   18108:	mov	fp, r0
   1810c:	mov	r0, r9
   18110:	bl	17f50 <close_stdout@@Base+0x4420>
   18114:	mul	r0, sl, fp
   18118:	lsr	r2, r7, #16
   1811c:	orr	r1, r2, r1, lsl #16
   18120:	cmp	r0, r1
   18124:	bls	18148 <close_stdout@@Base+0x4618>
   18128:	adds	r1, r1, r8
   1812c:	sub	r3, fp, #1
   18130:	bcs	18144 <close_stdout@@Base+0x4614>
   18134:	cmp	r0, r1
   18138:	subhi	fp, fp, #2
   1813c:	addhi	r1, r1, r8
   18140:	bhi	18148 <close_stdout@@Base+0x4618>
   18144:	mov	fp, r3
   18148:	rsb	r9, r0, r1
   1814c:	mov	r1, r4
   18150:	uxth	r7, r7
   18154:	mov	r0, r9
   18158:	bl	17d64 <close_stdout@@Base+0x4234>
   1815c:	mov	r1, r4
   18160:	mov	r5, r0
   18164:	mov	r0, r9
   18168:	bl	17f50 <close_stdout@@Base+0x4420>
   1816c:	mul	sl, sl, r5
   18170:	orr	r1, r7, r1, lsl #16
   18174:	cmp	sl, r1
   18178:	bls	18198 <close_stdout@@Base+0x4668>
   1817c:	adds	r8, r1, r8
   18180:	sub	r3, r5, #1
   18184:	bcs	18194 <close_stdout@@Base+0x4664>
   18188:	cmp	sl, r8
   1818c:	subhi	r5, r5, #2
   18190:	bhi	18198 <close_stdout@@Base+0x4668>
   18194:	mov	r5, r3
   18198:	orr	r3, r5, fp, lsl #16
   1819c:	mov	r4, #0
   181a0:	cmp	r6, #0
   181a4:	mov	r0, r3
   181a8:	mov	r1, r4
   181ac:	beq	181b8 <close_stdout@@Base+0x4688>
   181b0:	rsbs	r0, r0, #0
   181b4:	rsc	r1, r1, #0
   181b8:	add	sp, sp, #12
   181bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181c0:	cmp	r3, r5
   181c4:	movhi	r4, #0
   181c8:	movhi	r3, r4
   181cc:	bhi	181a0 <close_stdout@@Base+0x4670>
   181d0:	clz	r5, r1
   181d4:	cmp	r5, #0
   181d8:	bne	183c8 <close_stdout@@Base+0x4898>
   181dc:	cmp	r1, ip
   181e0:	cmpcs	r2, sl
   181e4:	movhi	r4, #0
   181e8:	movls	r4, #1
   181ec:	movls	r3, #1
   181f0:	movls	r4, r5
   181f4:	movhi	r3, r4
   181f8:	b	181a0 <close_stdout@@Base+0x4670>
   181fc:	cmp	r2, #0
   18200:	bne	18214 <close_stdout@@Base+0x46e4>
   18204:	mov	r1, r2
   18208:	mov	r0, #1
   1820c:	bl	17d64 <close_stdout@@Base+0x4234>
   18210:	mov	r8, r0
   18214:	clz	r3, r8
   18218:	cmp	r3, #0
   1821c:	bne	182ec <close_stdout@@Base+0x47bc>
   18220:	rsb	r9, r8, r9
   18224:	lsr	r5, r8, #16
   18228:	uxth	sl, r8
   1822c:	mov	r4, #1
   18230:	mov	r1, r5
   18234:	mov	r0, r9
   18238:	bl	17d64 <close_stdout@@Base+0x4234>
   1823c:	mov	r1, r5
   18240:	mov	fp, r0
   18244:	mov	r0, r9
   18248:	bl	17f50 <close_stdout@@Base+0x4420>
   1824c:	mul	r0, sl, fp
   18250:	lsr	r2, r7, #16
   18254:	orr	r1, r2, r1, lsl #16
   18258:	cmp	r0, r1
   1825c:	bls	1827c <close_stdout@@Base+0x474c>
   18260:	adds	r1, r1, r8
   18264:	sub	r3, fp, #1
   18268:	bcs	184e8 <close_stdout@@Base+0x49b8>
   1826c:	cmp	r0, r1
   18270:	subhi	fp, fp, #2
   18274:	addhi	r1, r1, r8
   18278:	bls	184e8 <close_stdout@@Base+0x49b8>
   1827c:	rsb	r2, r0, r1
   18280:	mov	r1, r5
   18284:	str	r2, [sp]
   18288:	uxth	r7, r7
   1828c:	mov	r0, r2
   18290:	bl	17d64 <close_stdout@@Base+0x4234>
   18294:	ldr	r2, [sp]
   18298:	mov	r1, r5
   1829c:	mov	r9, r0
   182a0:	mov	r0, r2
   182a4:	bl	17f50 <close_stdout@@Base+0x4420>
   182a8:	mul	sl, sl, r9
   182ac:	orr	r1, r7, r1, lsl #16
   182b0:	cmp	sl, r1
   182b4:	bls	182d4 <close_stdout@@Base+0x47a4>
   182b8:	adds	r8, r1, r8
   182bc:	sub	r3, r9, #1
   182c0:	bcs	182d0 <close_stdout@@Base+0x47a0>
   182c4:	cmp	sl, r8
   182c8:	subhi	r9, r9, #2
   182cc:	bhi	182d4 <close_stdout@@Base+0x47a4>
   182d0:	mov	r9, r3
   182d4:	orr	r3, r9, fp, lsl #16
   182d8:	b	181a0 <close_stdout@@Base+0x4670>
   182dc:	mvn	r6, r6
   182e0:	rsbs	r2, r2, #0
   182e4:	rsc	r3, r3, #0
   182e8:	b	180a8 <close_stdout@@Base+0x4578>
   182ec:	lsl	r8, r8, r3
   182f0:	rsb	fp, r3, #32
   182f4:	lsr	r4, r9, fp
   182f8:	lsr	fp, r7, fp
   182fc:	lsr	r5, r8, #16
   18300:	orr	fp, fp, r9, lsl r3
   18304:	mov	r0, r4
   18308:	lsl	r7, r7, r3
   1830c:	mov	r1, r5
   18310:	uxth	sl, r8
   18314:	bl	17d64 <close_stdout@@Base+0x4234>
   18318:	mov	r1, r5
   1831c:	mov	r3, r0
   18320:	mov	r0, r4
   18324:	str	r3, [sp]
   18328:	bl	17f50 <close_stdout@@Base+0x4420>
   1832c:	ldr	r3, [sp]
   18330:	lsr	r2, fp, #16
   18334:	mul	r0, sl, r3
   18338:	orr	r1, r2, r1, lsl #16
   1833c:	cmp	r0, r1
   18340:	bls	18360 <close_stdout@@Base+0x4830>
   18344:	adds	r1, r1, r8
   18348:	sub	r2, r3, #1
   1834c:	bcs	18500 <close_stdout@@Base+0x49d0>
   18350:	cmp	r0, r1
   18354:	subhi	r3, r3, #2
   18358:	addhi	r1, r1, r8
   1835c:	bls	18500 <close_stdout@@Base+0x49d0>
   18360:	rsb	r9, r0, r1
   18364:	mov	r1, r5
   18368:	str	r3, [sp]
   1836c:	uxth	fp, fp
   18370:	mov	r0, r9
   18374:	bl	17d64 <close_stdout@@Base+0x4234>
   18378:	mov	r1, r5
   1837c:	mov	r4, r0
   18380:	mov	r0, r9
   18384:	bl	17f50 <close_stdout@@Base+0x4420>
   18388:	mul	r9, sl, r4
   1838c:	ldr	r3, [sp]
   18390:	orr	r1, fp, r1, lsl #16
   18394:	cmp	r9, r1
   18398:	bls	183bc <close_stdout@@Base+0x488c>
   1839c:	adds	r1, r1, r8
   183a0:	sub	r2, r4, #1
   183a4:	bcs	183b8 <close_stdout@@Base+0x4888>
   183a8:	cmp	r9, r1
   183ac:	subhi	r4, r4, #2
   183b0:	addhi	r1, r1, r8
   183b4:	bhi	183bc <close_stdout@@Base+0x488c>
   183b8:	mov	r4, r2
   183bc:	rsb	r9, r9, r1
   183c0:	orr	r4, r4, r3, lsl #16
   183c4:	b	18230 <close_stdout@@Base+0x4700>
   183c8:	rsb	sl, r5, #32
   183cc:	lsl	r3, r2, r5
   183d0:	lsr	r0, r2, sl
   183d4:	lsr	r2, ip, sl
   183d8:	orr	r4, r0, r1, lsl r5
   183dc:	lsr	sl, r7, sl
   183e0:	mov	r0, r2
   183e4:	orr	sl, sl, ip, lsl r5
   183e8:	lsr	r9, r4, #16
   183ec:	str	r3, [sp, #4]
   183f0:	str	r2, [sp]
   183f4:	uxth	fp, r4
   183f8:	mov	r1, r9
   183fc:	bl	17d64 <close_stdout@@Base+0x4234>
   18400:	ldr	r2, [sp]
   18404:	mov	r1, r9
   18408:	mov	r8, r0
   1840c:	mov	r0, r2
   18410:	bl	17f50 <close_stdout@@Base+0x4420>
   18414:	mul	r0, fp, r8
   18418:	lsr	r2, sl, #16
   1841c:	orr	r1, r2, r1, lsl #16
   18420:	cmp	r0, r1
   18424:	bls	18444 <close_stdout@@Base+0x4914>
   18428:	adds	r1, r1, r4
   1842c:	sub	r2, r8, #1
   18430:	bcs	184f8 <close_stdout@@Base+0x49c8>
   18434:	cmp	r0, r1
   18438:	subhi	r8, r8, #2
   1843c:	addhi	r1, r1, r4
   18440:	bls	184f8 <close_stdout@@Base+0x49c8>
   18444:	rsb	ip, r0, r1
   18448:	mov	r1, r9
   1844c:	str	ip, [sp]
   18450:	mov	r0, ip
   18454:	bl	17d64 <close_stdout@@Base+0x4234>
   18458:	ldr	ip, [sp]
   1845c:	mov	r1, r9
   18460:	mov	r2, r0
   18464:	mov	r0, ip
   18468:	str	r2, [sp]
   1846c:	bl	17f50 <close_stdout@@Base+0x4420>
   18470:	ldr	r2, [sp]
   18474:	uxth	ip, sl
   18478:	mul	fp, fp, r2
   1847c:	orr	ip, ip, r1, lsl #16
   18480:	cmp	fp, ip
   18484:	bls	184a4 <close_stdout@@Base+0x4974>
   18488:	adds	ip, ip, r4
   1848c:	sub	r1, r2, #1
   18490:	bcs	184f0 <close_stdout@@Base+0x49c0>
   18494:	cmp	fp, ip
   18498:	subhi	r2, r2, #2
   1849c:	addhi	ip, ip, r4
   184a0:	bls	184f0 <close_stdout@@Base+0x49c0>
   184a4:	ldr	r0, [sp, #4]
   184a8:	orr	r1, r2, r8, lsl #16
   184ac:	rsb	fp, fp, ip
   184b0:	umull	r2, r3, r1, r0
   184b4:	cmp	fp, r3
   184b8:	bcc	184dc <close_stdout@@Base+0x49ac>
   184bc:	movne	r4, #0
   184c0:	moveq	r4, #1
   184c4:	cmp	r2, r7, lsl r5
   184c8:	movls	r4, #0
   184cc:	andhi	r4, r4, #1
   184d0:	cmp	r4, #0
   184d4:	moveq	r3, r1
   184d8:	beq	181a0 <close_stdout@@Base+0x4670>
   184dc:	sub	r3, r1, #1
   184e0:	mov	r4, #0
   184e4:	b	181a0 <close_stdout@@Base+0x4670>
   184e8:	mov	fp, r3
   184ec:	b	1827c <close_stdout@@Base+0x474c>
   184f0:	mov	r2, r1
   184f4:	b	184a4 <close_stdout@@Base+0x4974>
   184f8:	mov	r8, r2
   184fc:	b	18444 <close_stdout@@Base+0x4914>
   18500:	mov	r3, r2
   18504:	b	18360 <close_stdout@@Base+0x4830>
   18508:	cmp	r3, #0
   1850c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18510:	mov	r6, r0
   18514:	sub	sp, sp, #12
   18518:	mov	r5, r1
   1851c:	mov	r7, r0
   18520:	mov	r4, r2
   18524:	mov	r8, r1
   18528:	bne	18608 <close_stdout@@Base+0x4ad8>
   1852c:	cmp	r2, r1
   18530:	bls	18644 <close_stdout@@Base+0x4b14>
   18534:	clz	r3, r2
   18538:	cmp	r3, #0
   1853c:	rsbne	r8, r3, #32
   18540:	lslne	r4, r2, r3
   18544:	lsrne	r8, r0, r8
   18548:	lslne	r7, r0, r3
   1854c:	orrne	r8, r8, r1, lsl r3
   18550:	lsr	r5, r4, #16
   18554:	uxth	sl, r4
   18558:	mov	r1, r5
   1855c:	mov	r0, r8
   18560:	bl	17d64 <close_stdout@@Base+0x4234>
   18564:	mov	r1, r5
   18568:	mov	r9, r0
   1856c:	mov	r0, r8
   18570:	bl	17f50 <close_stdout@@Base+0x4420>
   18574:	mul	r0, sl, r9
   18578:	lsr	r3, r7, #16
   1857c:	orr	r1, r3, r1, lsl #16
   18580:	cmp	r0, r1
   18584:	bls	185a8 <close_stdout@@Base+0x4a78>
   18588:	adds	r1, r1, r4
   1858c:	sub	r2, r9, #1
   18590:	bcs	185a4 <close_stdout@@Base+0x4a74>
   18594:	cmp	r0, r1
   18598:	subhi	r9, r9, #2
   1859c:	addhi	r1, r1, r4
   185a0:	bhi	185a8 <close_stdout@@Base+0x4a78>
   185a4:	mov	r9, r2
   185a8:	rsb	r8, r0, r1
   185ac:	mov	r1, r5
   185b0:	uxth	r7, r7
   185b4:	mov	r0, r8
   185b8:	bl	17d64 <close_stdout@@Base+0x4234>
   185bc:	mov	r1, r5
   185c0:	mov	r6, r0
   185c4:	mov	r0, r8
   185c8:	bl	17f50 <close_stdout@@Base+0x4420>
   185cc:	mul	sl, sl, r6
   185d0:	orr	r1, r7, r1, lsl #16
   185d4:	cmp	sl, r1
   185d8:	bls	185f4 <close_stdout@@Base+0x4ac4>
   185dc:	adds	r4, r1, r4
   185e0:	sub	r3, r6, #1
   185e4:	bcs	188f0 <close_stdout@@Base+0x4dc0>
   185e8:	cmp	sl, r4
   185ec:	subhi	r6, r6, #2
   185f0:	bls	188f0 <close_stdout@@Base+0x4dc0>
   185f4:	orr	r0, r6, r9, lsl #16
   185f8:	mov	r6, #0
   185fc:	mov	r1, r6
   18600:	add	sp, sp, #12
   18604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18608:	cmp	r3, r1
   1860c:	movhi	r6, #0
   18610:	movhi	r0, r6
   18614:	bhi	185fc <close_stdout@@Base+0x4acc>
   18618:	clz	r7, r3
   1861c:	cmp	r7, #0
   18620:	bne	18720 <close_stdout@@Base+0x4bf0>
   18624:	cmp	r3, r1
   18628:	cmpcs	r2, r6
   1862c:	movhi	r6, #0
   18630:	movls	r6, #1
   18634:	movls	r0, #1
   18638:	movls	r6, r7
   1863c:	movhi	r0, r6
   18640:	b	185fc <close_stdout@@Base+0x4acc>
   18644:	cmp	r2, #0
   18648:	bne	1865c <close_stdout@@Base+0x4b2c>
   1864c:	mov	r1, r2
   18650:	mov	r0, #1
   18654:	bl	17d64 <close_stdout@@Base+0x4234>
   18658:	mov	r4, r0
   1865c:	clz	r3, r4
   18660:	cmp	r3, #0
   18664:	bne	1881c <close_stdout@@Base+0x4cec>
   18668:	rsb	r5, r4, r5
   1866c:	lsr	r8, r4, #16
   18670:	uxth	sl, r4
   18674:	mov	r6, #1
   18678:	mov	r1, r8
   1867c:	mov	r0, r5
   18680:	bl	17d64 <close_stdout@@Base+0x4234>
   18684:	mov	r1, r8
   18688:	mov	r9, r0
   1868c:	mov	r0, r5
   18690:	bl	17f50 <close_stdout@@Base+0x4420>
   18694:	mul	r0, sl, r9
   18698:	lsr	r3, r7, #16
   1869c:	orr	r1, r3, r1, lsl #16
   186a0:	cmp	r0, r1
   186a4:	bls	186c4 <close_stdout@@Base+0x4b94>
   186a8:	adds	r1, r1, r4
   186ac:	sub	r2, r9, #1
   186b0:	bcs	188f8 <close_stdout@@Base+0x4dc8>
   186b4:	cmp	r0, r1
   186b8:	subhi	r9, r9, #2
   186bc:	addhi	r1, r1, r4
   186c0:	bls	188f8 <close_stdout@@Base+0x4dc8>
   186c4:	rsb	fp, r0, r1
   186c8:	mov	r1, r8
   186cc:	uxth	r7, r7
   186d0:	mov	r0, fp
   186d4:	bl	17d64 <close_stdout@@Base+0x4234>
   186d8:	mov	r1, r8
   186dc:	mov	r5, r0
   186e0:	mov	r0, fp
   186e4:	bl	17f50 <close_stdout@@Base+0x4420>
   186e8:	mul	sl, sl, r5
   186ec:	orr	r1, r7, r1, lsl #16
   186f0:	cmp	sl, r1
   186f4:	bls	18710 <close_stdout@@Base+0x4be0>
   186f8:	adds	r4, r1, r4
   186fc:	sub	r3, r5, #1
   18700:	bcs	18900 <close_stdout@@Base+0x4dd0>
   18704:	cmp	sl, r4
   18708:	subhi	r5, r5, #2
   1870c:	bls	18900 <close_stdout@@Base+0x4dd0>
   18710:	orr	r0, r5, r9, lsl #16
   18714:	mov	r1, r6
   18718:	add	sp, sp, #12
   1871c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18720:	rsb	r1, r7, #32
   18724:	lsl	r0, r2, r7
   18728:	lsr	r2, r2, r1
   1872c:	lsr	fp, r5, r1
   18730:	orr	r8, r2, r3, lsl r7
   18734:	lsr	r1, r6, r1
   18738:	str	r0, [sp, #4]
   1873c:	orr	r5, r1, r5, lsl r7
   18740:	lsr	r9, r8, #16
   18744:	mov	r0, fp
   18748:	uxth	sl, r8
   1874c:	mov	r1, r9
   18750:	bl	17d64 <close_stdout@@Base+0x4234>
   18754:	mov	r1, r9
   18758:	mov	r4, r0
   1875c:	mov	r0, fp
   18760:	bl	17f50 <close_stdout@@Base+0x4420>
   18764:	mul	r0, sl, r4
   18768:	lsr	ip, r5, #16
   1876c:	orr	r1, ip, r1, lsl #16
   18770:	cmp	r0, r1
   18774:	bls	18788 <close_stdout@@Base+0x4c58>
   18778:	adds	r1, r1, r8
   1877c:	sub	r2, r4, #1
   18780:	bcc	1891c <close_stdout@@Base+0x4dec>
   18784:	mov	r4, r2
   18788:	rsb	ip, r0, r1
   1878c:	mov	r1, r9
   18790:	str	ip, [sp]
   18794:	uxth	r5, r5
   18798:	mov	r0, ip
   1879c:	bl	17d64 <close_stdout@@Base+0x4234>
   187a0:	ldr	ip, [sp]
   187a4:	mov	r1, r9
   187a8:	mov	fp, r0
   187ac:	mov	r0, ip
   187b0:	bl	17f50 <close_stdout@@Base+0x4420>
   187b4:	mul	sl, sl, fp
   187b8:	orr	r1, r5, r1, lsl #16
   187bc:	cmp	sl, r1
   187c0:	bls	187d4 <close_stdout@@Base+0x4ca4>
   187c4:	adds	r1, r1, r8
   187c8:	sub	r2, fp, #1
   187cc:	bcc	18908 <close_stdout@@Base+0x4dd8>
   187d0:	mov	fp, r2
   187d4:	ldr	r3, [sp, #4]
   187d8:	orr	r0, fp, r4, lsl #16
   187dc:	rsb	sl, sl, r1
   187e0:	umull	r4, r5, r0, r3
   187e4:	cmp	sl, r5
   187e8:	bcc	18808 <close_stdout@@Base+0x4cd8>
   187ec:	movne	r3, #0
   187f0:	moveq	r3, #1
   187f4:	cmp	r4, r6, lsl r7
   187f8:	movls	r6, #0
   187fc:	andhi	r6, r3, #1
   18800:	cmp	r6, #0
   18804:	beq	185fc <close_stdout@@Base+0x4acc>
   18808:	mov	r6, #0
   1880c:	sub	r0, r0, #1
   18810:	mov	r1, r6
   18814:	add	sp, sp, #12
   18818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1881c:	lsl	r4, r4, r3
   18820:	rsb	r9, r3, #32
   18824:	lsr	r2, r5, r9
   18828:	lsr	r9, r6, r9
   1882c:	lsr	r8, r4, #16
   18830:	orr	r9, r9, r5, lsl r3
   18834:	mov	r0, r2
   18838:	lsl	r7, r6, r3
   1883c:	mov	r1, r8
   18840:	str	r2, [sp]
   18844:	bl	17d64 <close_stdout@@Base+0x4234>
   18848:	ldr	r2, [sp]
   1884c:	mov	r1, r8
   18850:	uxth	sl, r4
   18854:	mov	fp, r0
   18858:	mov	r0, r2
   1885c:	bl	17f50 <close_stdout@@Base+0x4420>
   18860:	mul	r0, sl, fp
   18864:	lsr	r3, r9, #16
   18868:	orr	r1, r3, r1, lsl #16
   1886c:	cmp	r0, r1
   18870:	bls	18890 <close_stdout@@Base+0x4d60>
   18874:	adds	r1, r1, r4
   18878:	sub	r3, fp, #1
   1887c:	bcs	18930 <close_stdout@@Base+0x4e00>
   18880:	cmp	r0, r1
   18884:	subhi	fp, fp, #2
   18888:	addhi	r1, r1, r4
   1888c:	bls	18930 <close_stdout@@Base+0x4e00>
   18890:	rsb	r5, r0, r1
   18894:	mov	r1, r8
   18898:	uxth	r9, r9
   1889c:	mov	r0, r5
   188a0:	bl	17d64 <close_stdout@@Base+0x4234>
   188a4:	mov	r1, r8
   188a8:	mov	r6, r0
   188ac:	mov	r0, r5
   188b0:	bl	17f50 <close_stdout@@Base+0x4420>
   188b4:	mul	r5, sl, r6
   188b8:	orr	r1, r9, r1, lsl #16
   188bc:	cmp	r5, r1
   188c0:	bls	188e4 <close_stdout@@Base+0x4db4>
   188c4:	adds	r1, r1, r4
   188c8:	sub	r3, r6, #1
   188cc:	bcs	188e0 <close_stdout@@Base+0x4db0>
   188d0:	cmp	r5, r1
   188d4:	subhi	r6, r6, #2
   188d8:	addhi	r1, r1, r4
   188dc:	bhi	188e4 <close_stdout@@Base+0x4db4>
   188e0:	mov	r6, r3
   188e4:	rsb	r5, r5, r1
   188e8:	orr	r6, r6, fp, lsl #16
   188ec:	b	18678 <close_stdout@@Base+0x4b48>
   188f0:	mov	r6, r3
   188f4:	b	185f4 <close_stdout@@Base+0x4ac4>
   188f8:	mov	r9, r2
   188fc:	b	186c4 <close_stdout@@Base+0x4b94>
   18900:	mov	r5, r3
   18904:	b	18710 <close_stdout@@Base+0x4be0>
   18908:	cmp	sl, r1
   1890c:	subhi	fp, fp, #2
   18910:	addhi	r1, r1, r8
   18914:	bhi	187d4 <close_stdout@@Base+0x4ca4>
   18918:	b	187d0 <close_stdout@@Base+0x4ca0>
   1891c:	cmp	r0, r1
   18920:	subhi	r4, r4, #2
   18924:	addhi	r1, r1, r8
   18928:	bhi	18788 <close_stdout@@Base+0x4c58>
   1892c:	b	18784 <close_stdout@@Base+0x4c54>
   18930:	mov	fp, r3
   18934:	b	18890 <close_stdout@@Base+0x4d60>
   18938:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1893c:	mov	r7, r0
   18940:	ldr	r6, [pc, #76]	; 18994 <close_stdout@@Base+0x4e64>
   18944:	mov	r8, r1
   18948:	ldr	r5, [pc, #72]	; 18998 <close_stdout@@Base+0x4e68>
   1894c:	mov	r9, r2
   18950:	add	r6, pc, r6
   18954:	bl	11260 <fdopen@plt-0x20>
   18958:	add	r5, pc, r5
   1895c:	rsb	r6, r5, r6
   18960:	asrs	r6, r6, #2
   18964:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   18968:	sub	r5, r5, #4
   1896c:	mov	r4, #0
   18970:	add	r4, r4, #1
   18974:	ldr	r3, [r5, #4]!
   18978:	mov	r0, r7
   1897c:	mov	r1, r8
   18980:	mov	r2, r9
   18984:	blx	r3
   18988:	cmp	r4, r6
   1898c:	bne	18970 <close_stdout@@Base+0x4e40>
   18990:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   18994:	ldrdeq	r1, [r1], -r4
   18998:	andeq	r1, r1, r8, asr #9
   1899c:	bx	lr
   189a0:	ldr	r3, [pc, #28]	; 189c4 <close_stdout@@Base+0x4e94>
   189a4:	mov	r1, #0
   189a8:	ldr	r2, [pc, #24]	; 189c8 <close_stdout@@Base+0x4e98>
   189ac:	add	r3, pc, r3
   189b0:	ldr	r3, [r3, r2]
   189b4:	cmp	r3, #0
   189b8:	ldrne	r2, [r3]
   189bc:	moveq	r2, r3
   189c0:	b	114d8 <__cxa_atexit@plt>
   189c4:	andeq	r1, r1, ip, asr #12
   189c8:	andeq	r0, r0, r4, asr r1

Disassembly of section .fini:

000189cc <.fini>:
   189cc:	push	{r3, lr}
   189d0:	pop	{r3, pc}
