
centos-preinstalled/bc:     file format elf32-littlearm


Disassembly of section .init:

00008d94 <_init@@Base>:
    8d94:	push	{r3, lr}
    8d98:	bl	934c <__assert_fail@plt+0x37c>
    8d9c:	pop	{r3, pc}

Disassembly of section .plt:

00008da0 <raise@plt-0x14>:
    8da0:	push	{lr}		; (str lr, [sp, #-4]!)
    8da4:	ldr	lr, [pc, #4]	; 8db0 <_init@@Base+0x1c>
    8da8:	add	lr, pc, lr
    8dac:	ldr	pc, [lr, #8]!
    8db0:	andeq	r8, r1, r0, asr r2

00008db4 <raise@plt>:
    8db4:	add	ip, pc, #0, 12
    8db8:	add	ip, ip, #24, 20	; 0x18000
    8dbc:	ldr	pc, [ip, #592]!	; 0x250

00008dc0 <stifle_history@plt>:
    8dc0:	add	ip, pc, #0, 12
    8dc4:	add	ip, ip, #24, 20	; 0x18000
    8dc8:	ldr	pc, [ip, #584]!	; 0x248

00008dcc <strcmp@plt>:
    8dcc:	add	ip, pc, #0, 12
    8dd0:	add	ip, ip, #24, 20	; 0x18000
    8dd4:	ldr	pc, [ip, #576]!	; 0x240

00008dd8 <strtol@plt>:
    8dd8:	add	ip, pc, #0, 12
    8ddc:	add	ip, ip, #24, 20	; 0x18000
    8de0:	ldr	pc, [ip, #568]!	; 0x238

00008de4 <fopen@plt>:
    8de4:	add	ip, pc, #0, 12
    8de8:	add	ip, ip, #24, 20	; 0x18000
    8dec:	ldr	pc, [ip, #560]!	; 0x230

00008df0 <read@plt>:
    8df0:	add	ip, pc, #0, 12
    8df4:	add	ip, ip, #24, 20	; 0x18000
    8df8:	ldr	pc, [ip, #552]!	; 0x228

00008dfc <fflush@plt>:
    8dfc:	add	ip, pc, #0, 12
    8e00:	add	ip, ip, #24, 20	; 0x18000
    8e04:	ldr	pc, [ip, #544]!	; 0x220

00008e08 <free@plt>:
    8e08:	add	ip, pc, #0, 12
    8e0c:	add	ip, ip, #24, 20	; 0x18000
    8e10:	ldr	pc, [ip, #536]!	; 0x218

00008e14 <add_history@plt>:
    8e14:	add	ip, pc, #0, 12
    8e18:	add	ip, ip, #24, 20	; 0x18000
    8e1c:	ldr	pc, [ip, #528]!	; 0x210

00008e20 <memcpy@plt>:
    8e20:	add	ip, pc, #0, 12
    8e24:	add	ip, ip, #24, 20	; 0x18000
    8e28:	ldr	pc, [ip, #520]!	; 0x208

00008e2c <signal@plt>:
    8e2c:	add	ip, pc, #0, 12
    8e30:	add	ip, ip, #24, 20	; 0x18000
    8e34:	ldr	pc, [ip, #512]!	; 0x200

00008e38 <_IO_getc@plt>:
    8e38:	add	ip, pc, #0, 12
    8e3c:	add	ip, ip, #24, 20	; 0x18000
    8e40:	ldr	pc, [ip, #504]!	; 0x1f8

00008e44 <__stack_chk_fail@plt>:
    8e44:	add	ip, pc, #0, 12
    8e48:	add	ip, ip, #24, 20	; 0x18000
    8e4c:	ldr	pc, [ip, #496]!	; 0x1f0

00008e50 <realloc@plt>:
    8e50:	add	ip, pc, #0, 12
    8e54:	add	ip, ip, #24, 20	; 0x18000
    8e58:	ldr	pc, [ip, #488]!	; 0x1e8

00008e5c <_IO_putc@plt>:
    8e5c:	add	ip, pc, #0, 12
    8e60:	add	ip, ip, #24, 20	; 0x18000
    8e64:	ldr	pc, [ip, #480]!	; 0x1e0

00008e68 <fwrite@plt>:
    8e68:	add	ip, pc, #0, 12
    8e6c:	add	ip, ip, #24, 20	; 0x18000
    8e70:	ldr	pc, [ip, #472]!	; 0x1d8

00008e74 <readline@plt>:
    8e74:	add	ip, pc, #0, 12
    8e78:	add	ip, ip, #24, 20	; 0x18000
    8e7c:	ldr	pc, [ip, #464]!	; 0x1d0

00008e80 <strcat@plt>:
    8e80:	add	ip, pc, #0, 12
    8e84:	add	ip, ip, #24, 20	; 0x18000
    8e88:	ldr	pc, [ip, #456]!	; 0x1c8

00008e8c <getenv@plt>:
    8e8c:	add	ip, pc, #0, 12
    8e90:	add	ip, ip, #24, 20	; 0x18000
    8e94:	ldr	pc, [ip, #448]!	; 0x1c0

00008e98 <puts@plt>:
    8e98:	add	ip, pc, #0, 12
    8e9c:	add	ip, ip, #24, 20	; 0x18000
    8ea0:	ldr	pc, [ip, #440]!	; 0x1b8

00008ea4 <malloc@plt>:
    8ea4:	add	ip, pc, #0, 12
    8ea8:	add	ip, ip, #24, 20	; 0x18000
    8eac:	ldr	pc, [ip, #432]!	; 0x1b0

00008eb0 <__libc_start_main@plt>:
    8eb0:	add	ip, pc, #0, 12
    8eb4:	add	ip, ip, #24, 20	; 0x18000
    8eb8:	ldr	pc, [ip, #424]!	; 0x1a8

00008ebc <__vfprintf_chk@plt>:
    8ebc:	add	ip, pc, #0, 12
    8ec0:	add	ip, ip, #24, 20	; 0x18000
    8ec4:	ldr	pc, [ip, #416]!	; 0x1a0

00008ec8 <__gmon_start__@plt>:
    8ec8:	add	ip, pc, #0, 12
    8ecc:	add	ip, ip, #24, 20	; 0x18000
    8ed0:	ldr	pc, [ip, #408]!	; 0x198

00008ed4 <getopt_long@plt>:
    8ed4:	add	ip, pc, #0, 12
    8ed8:	add	ip, ip, #24, 20	; 0x18000
    8edc:	ldr	pc, [ip, #400]!	; 0x190

00008ee0 <__ctype_b_loc@plt>:
    8ee0:	add	ip, pc, #0, 12
    8ee4:	add	ip, ip, #24, 20	; 0x18000
    8ee8:	ldr	pc, [ip, #392]!	; 0x188

00008eec <exit@plt>:
    8eec:	add	ip, pc, #0, 12
    8ef0:	add	ip, ip, #24, 20	; 0x18000
    8ef4:	ldr	pc, [ip, #384]!	; 0x180

00008ef8 <strlen@plt>:
    8ef8:	add	ip, pc, #0, 12
    8efc:	add	ip, ip, #24, 20	; 0x18000
    8f00:	ldr	pc, [ip, #376]!	; 0x178

00008f04 <using_history@plt>:
    8f04:	add	ip, pc, #0, 12
    8f08:	add	ip, ip, #24, 20	; 0x18000
    8f0c:	ldr	pc, [ip, #368]!	; 0x170

00008f10 <__errno_location@plt>:
    8f10:	add	ip, pc, #0, 12
    8f14:	add	ip, ip, #24, 20	; 0x18000
    8f18:	ldr	pc, [ip, #360]!	; 0x168

00008f1c <__sprintf_chk@plt>:
    8f1c:	add	ip, pc, #0, 12
    8f20:	add	ip, ip, #24, 20	; 0x18000
    8f24:	ldr	pc, [ip, #352]!	; 0x160

00008f28 <setvbuf@plt>:
    8f28:	add	ip, pc, #0, 12
    8f2c:	add	ip, ip, #24, 20	; 0x18000
    8f30:	ldr	pc, [ip, #344]!	; 0x158

00008f34 <memset@plt>:
    8f34:	add	ip, pc, #0, 12
    8f38:	add	ip, ip, #24, 20	; 0x18000
    8f3c:	ldr	pc, [ip, #336]!	; 0x150

00008f40 <putchar@plt>:
    8f40:	add	ip, pc, #0, 12
    8f44:	add	ip, ip, #24, 20	; 0x18000
    8f48:	ldr	pc, [ip, #328]!	; 0x148

00008f4c <strncpy@plt>:
    8f4c:	add	ip, pc, #0, 12
    8f50:	add	ip, ip, #24, 20	; 0x18000
    8f54:	ldr	pc, [ip, #320]!	; 0x140

00008f58 <__printf_chk@plt>:
    8f58:	add	ip, pc, #0, 12
    8f5c:	add	ip, ip, #24, 20	; 0x18000
    8f60:	ldr	pc, [ip, #312]!	; 0x138

00008f64 <write@plt>:
    8f64:	add	ip, pc, #0, 12
    8f68:	add	ip, ip, #24, 20	; 0x18000
    8f6c:	ldr	pc, [ip, #304]!	; 0x130

00008f70 <fileno@plt>:
    8f70:	add	ip, pc, #0, 12
    8f74:	add	ip, ip, #24, 20	; 0x18000
    8f78:	ldr	pc, [ip, #296]!	; 0x128

00008f7c <__fprintf_chk@plt>:
    8f7c:	add	ip, pc, #0, 12
    8f80:	add	ip, ip, #24, 20	; 0x18000
    8f84:	ldr	pc, [ip, #288]!	; 0x120

00008f88 <fclose@plt>:
    8f88:	add	ip, pc, #0, 12
    8f8c:	add	ip, ip, #24, 20	; 0x18000
    8f90:	ldr	pc, [ip, #280]!	; 0x118

00008f94 <fputc@plt>:
    8f94:	add	ip, pc, #0, 12
    8f98:	add	ip, ip, #24, 20	; 0x18000
    8f9c:	ldr	pc, [ip, #272]!	; 0x110

00008fa0 <unstifle_history@plt>:
    8fa0:	add	ip, pc, #0, 12
    8fa4:	add	ip, ip, #24, 20	; 0x18000
    8fa8:	ldr	pc, [ip, #264]!	; 0x108

00008fac <random@plt>:
    8fac:	add	ip, pc, #0, 12
    8fb0:	add	ip, ip, #24, 20	; 0x18000
    8fb4:	ldr	pc, [ip, #256]!	; 0x100

00008fb8 <isatty@plt>:
    8fb8:	add	ip, pc, #0, 12
    8fbc:	add	ip, ip, #24, 20	; 0x18000
    8fc0:	ldr	pc, [ip, #248]!	; 0xf8

00008fc4 <abort@plt>:
    8fc4:	add	ip, pc, #0, 12
    8fc8:	add	ip, ip, #24, 20	; 0x18000
    8fcc:	ldr	pc, [ip, #240]!	; 0xf0

00008fd0 <__assert_fail@plt>:
    8fd0:	add	ip, pc, #0, 12
    8fd4:	add	ip, ip, #24, 20	; 0x18000
    8fd8:	ldr	pc, [ip, #232]!	; 0xe8

Disassembly of section .text:

00008fdc <warn@@Base-0x74b0>:
    8fdc:	movw	r3, #4696	; 0x1258
    8fe0:	movw	r2, #4832	; 0x12e0
    8fe4:	movt	r3, #2
    8fe8:	movt	r2, #2
    8fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
    8ff0:	movw	r1, #21328	; 0x5350
    8ff4:	ldm	r3, {r0, fp}
    8ff8:	movw	sl, #29512	; 0x7348
    8ffc:	ldr	r9, [r3, #8]
    9000:	movt	r1, #1
    9004:	ldr	r8, [r3, #12]
    9008:	movt	sl, #1
    900c:	ldr	r7, [r2]
    9010:	movw	r6, #315	; 0x13b
    9014:	cmp	r7, fp
    9018:	mov	r2, r7
    901c:	bcs	90a0 <__assert_fail@plt+0xd0>
    9020:	ldrb	r3, [r7], #1
    9024:	cmp	r3, #0
    9028:	ldrbne	ip, [r1, r3, lsl #2]
    902c:	add	r3, r1, r0, lsl #1
    9030:	add	r3, r3, #1024	; 0x400
    9034:	moveq	ip, #1
    9038:	ldrsh	r3, [r3]
    903c:	cmp	r3, #0
    9040:	movne	r8, r2
    9044:	movne	r9, r0
    9048:	add	r2, r1, r0, lsl #1
    904c:	add	r4, r1, ip, lsl #2
    9050:	add	r3, r2, #2512	; 0x9d0
    9054:	add	r2, r2, #1648	; 0x670
    9058:	add	r2, r2, #8
    905c:	ldrsh	r5, [r3, #4]
    9060:	add	r5, r5, ip
    9064:	lsl	r5, r5, #1
    9068:	add	r3, r1, r5
    906c:	add	r3, r3, #3152	; 0xc50
    9070:	add	r3, r3, #4
    9074:	ldrsh	r3, [r3]
    9078:	cmp	r3, r0
    907c:	beq	9090 <__assert_fail@plt+0xc0>
    9080:	ldrsh	r0, [r2]
    9084:	cmp	r0, r6
    9088:	ldrbgt	ip, [r4, #2296]	; 0x8f8
    908c:	b	9048 <__assert_fail@plt+0x78>
    9090:	add	r5, sl, r5
    9094:	sub	r5, r5, #3808	; 0xee0
    9098:	ldrsh	r0, [r5]
    909c:	b	9014 <__assert_fail@plt+0x44>
    90a0:	movw	r3, #4696	; 0x1258
    90a4:	movt	r3, #2
    90a8:	str	r9, [r3, #8]
    90ac:	str	r8, [r3, #12]
    90b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
    90b4:	bx	lr
    90b8:	movw	r3, #4648	; 0x1228
    90bc:	movt	r3, #2
    90c0:	push	{r4, r5, r6, r7, lr}
    90c4:	sub	sp, sp, #132	; 0x84
    90c8:	ldr	r3, [r3]
    90cc:	mov	r6, r0
    90d0:	mov	r0, #0
    90d4:	mov	r5, r1
    90d8:	str	r3, [sp, #124]	; 0x7c
    90dc:	bl	8fb8 <isatty@plt>
    90e0:	cmp	r0, #0
    90e4:	bne	9294 <__assert_fail@plt+0x2c4>
    90e8:	movw	r4, #4804	; 0x12c4
    90ec:	movt	r4, #2
    90f0:	movw	r3, #4680	; 0x1248
    90f4:	movt	r3, #2
    90f8:	mov	r1, #0
    90fc:	movw	r7, #15396	; 0x3c24
    9100:	movt	r7, #1
    9104:	ldr	r0, [r3]
    9108:	mov	r2, #1
    910c:	mov	r3, r1
    9110:	bl	8f28 <setvbuf@plt>
    9114:	mov	r0, r7
    9118:	bl	8e8c <getenv@plt>
    911c:	subs	ip, r0, #0
    9120:	beq	919c <__assert_fail@plt+0x1cc>
    9124:	mov	r2, #1
    9128:	mov	r0, #0
    912c:	str	r7, [sp, #4]
    9130:	ldrb	r3, [ip]
    9134:	cmp	r3, #0
    9138:	beq	9190 <__assert_fail@plt+0x1c0>
    913c:	cmp	r3, #32
    9140:	addeq	ip, ip, #1
    9144:	beq	9130 <__assert_fail@plt+0x160>
    9148:	add	r1, sp, #128	; 0x80
    914c:	add	r3, r1, r2, lsl #2
    9150:	add	r1, r2, #1
    9154:	str	ip, [r3, #-124]	; 0xffffff84
    9158:	ldrb	r2, [ip]
    915c:	tst	r2, #223	; 0xdf
    9160:	beq	9178 <__assert_fail@plt+0x1a8>
    9164:	add	r3, ip, #1
    9168:	mov	ip, r3
    916c:	ldrb	r2, [r3], #1
    9170:	tst	r2, #223	; 0xdf
    9174:	bne	9168 <__assert_fail@plt+0x198>
    9178:	cmp	r2, #0
    917c:	strbne	r0, [ip], #1
    9180:	ldrb	r3, [ip]
    9184:	mov	r2, r1
    9188:	cmp	r3, #0
    918c:	bne	913c <__assert_fail@plt+0x16c>
    9190:	mov	r0, r2
    9194:	add	r1, sp, #4
    9198:	bl	94b8 <__assert_fail@plt+0x4e8>
    919c:	mov	r1, r5
    91a0:	mov	r0, r6
    91a4:	bl	94b8 <__assert_fail@plt+0x4e8>
    91a8:	movw	r0, #15408	; 0x3c30
    91ac:	movt	r0, #1
    91b0:	bl	8e8c <getenv@plt>
    91b4:	cmp	r0, #0
    91b8:	movw	r0, #15424	; 0x3c40
    91bc:	movt	r0, #1
    91c0:	movwne	r3, #4788	; 0x12b4
    91c4:	movtne	r3, #2
    91c8:	movne	r2, #1
    91cc:	strne	r2, [r3]
    91d0:	bl	8e8c <getenv@plt>
    91d4:	cmp	r0, #0
    91d8:	movweq	r3, #4940	; 0x134c
    91dc:	movteq	r3, #2
    91e0:	beq	9288 <__assert_fail@plt+0x2b8>
    91e4:	mov	r2, #10
    91e8:	mov	r1, #0
    91ec:	bl	8dd8 <strtol@plt>
    91f0:	movw	r3, #4940	; 0x134c
    91f4:	movt	r3, #2
    91f8:	adds	r2, r0, #0
    91fc:	str	r0, [r3]
    9200:	movne	r2, #1
    9204:	cmp	r0, #2
    9208:	movgt	r2, #0
    920c:	cmp	r2, #0
    9210:	bne	9288 <__assert_fail@plt+0x2b8>
    9214:	bl	e96c <__assert_fail@plt+0x599c>
    9218:	bl	ddf0 <__assert_fail@plt+0x4e20>
    921c:	ldrb	r3, [r4]
    9220:	cmp	r3, #0
    9224:	bne	92bc <__assert_fail@plt+0x2ec>
    9228:	bl	ff00 <__assert_fail@plt+0x6f30>
    922c:	mov	r5, #1
    9230:	bl	102a4 <__assert_fail@plt+0x72d4>
    9234:	movw	r2, #4904	; 0x1328
    9238:	movw	r3, #4688	; 0x1250
    923c:	movt	r2, #2
    9240:	movt	r3, #2
    9244:	mov	r1, #0
    9248:	strb	r1, [r2]
    924c:	strb	r5, [r3, #4]
    9250:	bl	96e4 <__assert_fail@plt+0x714>
    9254:	cmp	r0, #0
    9258:	beq	92b4 <__assert_fail@plt+0x2e4>
    925c:	ldrb	r3, [r4]
    9260:	cmp	r3, #0
    9264:	bne	92dc <__assert_fail@plt+0x30c>
    9268:	bl	986c <__assert_fail@plt+0x89c>
    926c:	movw	r3, #4800	; 0x12c0
    9270:	movt	r3, #2
    9274:	ldr	r3, [r3]
    9278:	cmp	r3, #0
    927c:	bne	92d0 <__assert_fail@plt+0x300>
    9280:	mov	r0, #0
    9284:	bl	8eec <exit@plt>
    9288:	mov	r2, #70	; 0x46
    928c:	str	r2, [r3]
    9290:	b	9214 <__assert_fail@plt+0x244>
    9294:	mov	r0, #1
    9298:	movw	r4, #4804	; 0x12c4
    929c:	bl	8fb8 <isatty@plt>
    92a0:	movt	r4, #2
    92a4:	cmp	r0, #0
    92a8:	movne	r3, #1
    92ac:	strbne	r3, [r4]
    92b0:	b	90f0 <__assert_fail@plt+0x120>
    92b4:	mov	r0, r5
    92b8:	bl	8eec <exit@plt>
    92bc:	movw	r1, #38536	; 0x9688
    92c0:	mov	r0, #2
    92c4:	movt	r1, #0
    92c8:	bl	8e2c <signal@plt>
    92cc:	b	9228 <__assert_fail@plt+0x258>
    92d0:	mov	r0, #10
    92d4:	bl	8f40 <putchar@plt>
    92d8:	b	9280 <__assert_fail@plt+0x2b0>
    92dc:	movw	r2, #4672	; 0x1240
    92e0:	movt	r2, #2
    92e4:	movw	r1, #4668	; 0x123c
    92e8:	movw	r3, #4676	; 0x1244
    92ec:	ldr	r0, [r2]
    92f0:	movt	r1, #2
    92f4:	movt	r3, #2
    92f8:	movw	r2, #15440	; 0x3c50
    92fc:	movt	r2, #1
    9300:	str	r0, [r1]
    9304:	str	r2, [r3]
    9308:	bl	8f04 <using_history@plt>
    930c:	b	9268 <__assert_fail@plt+0x298>
    9310:	mov	fp, #0
    9314:	mov	lr, #0
    9318:	pop	{r1}		; (ldr r1, [sp], #4)
    931c:	mov	r2, sp
    9320:	push	{r2}		; (str r2, [sp, #-4]!)
    9324:	push	{r0}		; (str r0, [sp, #-4]!)
    9328:	ldr	ip, [pc, #16]	; 9340 <__assert_fail@plt+0x370>
    932c:	push	{ip}		; (str ip, [sp, #-4]!)
    9330:	ldr	r0, [pc, #12]	; 9344 <__assert_fail@plt+0x374>
    9334:	ldr	r3, [pc, #12]	; 9348 <__assert_fail@plt+0x378>
    9338:	bl	8eb0 <__libc_start_main@plt>
    933c:	bl	8fc4 <abort@plt>
    9340:	andeq	r3, r1, ip, lsl #20
    9344:	strheq	r9, [r0], -r8
    9348:	andeq	r3, r1, r8, lsr #19
    934c:	ldr	r3, [pc, #20]	; 9368 <__assert_fail@plt+0x398>
    9350:	ldr	r2, [pc, #20]	; 936c <__assert_fail@plt+0x39c>
    9354:	add	r3, pc, r3
    9358:	ldr	r2, [r3, r2]
    935c:	cmp	r2, #0
    9360:	bxeq	lr
    9364:	b	8ec8 <__gmon_start__@plt>
    9368:	andeq	r7, r1, r4, lsr #25
    936c:	andeq	r0, r0, r4, asr #1
    9370:	push	{r3, lr}
    9374:	movw	r0, #4644	; 0x1224
    9378:	ldr	r3, [pc, #36]	; 93a4 <__assert_fail@plt+0x3d4>
    937c:	movt	r0, #2
    9380:	rsb	r3, r0, r3
    9384:	cmp	r3, #6
    9388:	popls	{r3, pc}
    938c:	movw	r3, #0
    9390:	movt	r3, #0
    9394:	cmp	r3, #0
    9398:	popeq	{r3, pc}
    939c:	blx	r3
    93a0:	pop	{r3, pc}
    93a4:	andeq	r1, r2, r7, lsr #4
    93a8:	push	{r3, lr}
    93ac:	movw	r0, #4644	; 0x1224
    93b0:	movw	r3, #4644	; 0x1224
    93b4:	movt	r0, #2
    93b8:	movt	r3, #2
    93bc:	rsb	r3, r0, r3
    93c0:	asr	r3, r3, #2
    93c4:	add	r3, r3, r3, lsr #31
    93c8:	asrs	r1, r3, #1
    93cc:	popeq	{r3, pc}
    93d0:	movw	r2, #0
    93d4:	movt	r2, #0
    93d8:	cmp	r2, #0
    93dc:	popeq	{r3, pc}
    93e0:	blx	r2
    93e4:	pop	{r3, pc}
    93e8:	push	{r4, lr}
    93ec:	movw	r4, #4684	; 0x124c
    93f0:	movt	r4, #2
    93f4:	ldrb	r3, [r4]
    93f8:	cmp	r3, #0
    93fc:	popne	{r4, pc}
    9400:	bl	9370 <__assert_fail@plt+0x3a0>
    9404:	mov	r3, #1
    9408:	strb	r3, [r4]
    940c:	pop	{r4, pc}
    9410:	movw	r0, #3820	; 0xeec
    9414:	movt	r0, #2
    9418:	push	{r3, lr}
    941c:	ldr	r3, [r0]
    9420:	cmp	r3, #0
    9424:	beq	943c <__assert_fail@plt+0x46c>
    9428:	movw	r3, #0
    942c:	movt	r3, #0
    9430:	cmp	r3, #0
    9434:	beq	943c <__assert_fail@plt+0x46c>
    9438:	blx	r3
    943c:	pop	{r3, lr}
    9440:	b	93a8 <__assert_fail@plt+0x3d8>
    9444:	push	{lr}		; (str lr, [sp, #-4]!)
    9448:	sub	sp, sp, #28
    944c:	mov	r2, r0
    9450:	movw	r1, #14976	; 0x3a80
    9454:	movw	r3, #15024	; 0x3ab0
    9458:	movt	r1, #1
    945c:	movt	r3, #1
    9460:	str	r1, [sp]
    9464:	str	r3, [sp, #4]
    9468:	movw	r1, #15080	; 0x3ae8
    946c:	movw	r3, #15132	; 0x3b1c
    9470:	movt	r1, #1
    9474:	movt	r3, #1
    9478:	str	r1, [sp, #8]
    947c:	str	r3, [sp, #12]
    9480:	movw	r1, #15192	; 0x3b58
    9484:	movw	r3, #15252	; 0x3b94
    9488:	movt	r1, #1
    948c:	movt	r3, #1
    9490:	str	r1, [sp, #16]
    9494:	str	r3, [sp, #20]
    9498:	movw	r1, #14880	; 0x3a20
    949c:	movw	r3, #14928	; 0x3a50
    94a0:	movt	r1, #1
    94a4:	movt	r3, #1
    94a8:	mov	r0, #1
    94ac:	bl	8f58 <__printf_chk@plt>
    94b0:	add	sp, sp, #28
    94b4:	pop	{pc}		; (ldr pc, [sp], #4)
    94b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94bc:	movw	r8, #4648	; 0x1228
    94c0:	movt	r8, #2
    94c4:	sub	sp, sp, #28
    94c8:	movw	r5, #4656	; 0x1230
    94cc:	movw	fp, #4796	; 0x12bc
    94d0:	ldr	r3, [r8]
    94d4:	movt	r5, #2
    94d8:	movw	sl, #4788	; 0x12b4
    94dc:	movw	r9, #4792	; 0x12b8
    94e0:	movt	fp, #2
    94e4:	movt	sl, #2
    94e8:	movt	r9, #2
    94ec:	add	r7, sp, #16
    94f0:	mov	r6, r0
    94f4:	mov	r4, r1
    94f8:	movw	r2, #4784	; 0x12b0
    94fc:	str	r3, [sp, #20]
    9500:	movt	r2, #2
    9504:	mov	r3, #0
    9508:	str	r2, [sp, #12]
    950c:	str	r3, [r5]
    9510:	str	r7, [sp]
    9514:	movw	r2, #15312	; 0x3bd0
    9518:	movw	r3, #4300	; 0x10cc
    951c:	movt	r2, #1
    9520:	movt	r3, #2
    9524:	mov	r0, r6
    9528:	mov	r1, r4
    952c:	bl	8ed4 <getopt_long@plt>
    9530:	cmn	r0, #1
    9534:	beq	9614 <__assert_fail@plt+0x644>
    9538:	cmp	r0, #108	; 0x6c
    953c:	beq	9608 <__assert_fail@plt+0x638>
    9540:	bgt	9574 <__assert_fail@plt+0x5a4>
    9544:	cmp	r0, #99	; 0x63
    9548:	beq	95e8 <__assert_fail@plt+0x618>
    954c:	ble	95d0 <__assert_fail@plt+0x600>
    9550:	cmp	r0, #104	; 0x68
    9554:	beq	95a8 <__assert_fail@plt+0x5d8>
    9558:	cmp	r0, #105	; 0x69
    955c:	bne	95d8 <__assert_fail@plt+0x608>
    9560:	movw	r3, #4804	; 0x12c4
    9564:	movt	r3, #2
    9568:	mov	r2, #1
    956c:	strb	r2, [r3]
    9570:	b	9510 <__assert_fail@plt+0x540>
    9574:	cmp	r0, #115	; 0x73
    9578:	beq	95fc <__assert_fail@plt+0x62c>
    957c:	ble	95b8 <__assert_fail@plt+0x5e8>
    9580:	cmp	r0, #118	; 0x76
    9584:	beq	959c <__assert_fail@plt+0x5cc>
    9588:	cmp	r0, #119	; 0x77
    958c:	bne	95d8 <__assert_fail@plt+0x608>
    9590:	mov	r3, #1
    9594:	str	r3, [r9]
    9598:	b	9510 <__assert_fail@plt+0x540>
    959c:	bl	10b54 <warn@@Base+0x6c8>
    95a0:	mov	r0, #0
    95a4:	bl	8eec <exit@plt>
    95a8:	ldr	r0, [r4]
    95ac:	bl	9444 <__assert_fail@plt+0x474>
    95b0:	mov	r0, #0
    95b4:	bl	8eec <exit@plt>
    95b8:	cmp	r0, #113	; 0x71
    95bc:	bne	95d8 <__assert_fail@plt+0x608>
    95c0:	ldr	r2, [sp, #12]
    95c4:	mov	r3, #1
    95c8:	str	r3, [r2]
    95cc:	b	9510 <__assert_fail@plt+0x540>
    95d0:	cmp	r0, #0
    95d4:	beq	9510 <__assert_fail@plt+0x540>
    95d8:	ldr	r0, [r4]
    95dc:	bl	9444 <__assert_fail@plt+0x474>
    95e0:	mov	r0, #1
    95e4:	bl	8eec <exit@plt>
    95e8:	movw	r3, #4800	; 0x12c0
    95ec:	movt	r3, #2
    95f0:	mov	r2, #1
    95f4:	str	r2, [r3]
    95f8:	b	9510 <__assert_fail@plt+0x540>
    95fc:	mov	r3, #1
    9600:	str	r3, [sl]
    9604:	b	9510 <__assert_fail@plt+0x540>
    9608:	mov	r3, #1
    960c:	str	r3, [fp]
    9610:	b	9510 <__assert_fail@plt+0x540>
    9614:	ldr	r3, [r5]
    9618:	cmp	r6, r3
    961c:	ble	966c <__assert_fail@plt+0x69c>
    9620:	movw	sl, #4688	; 0x1250
    9624:	movw	r9, #4780	; 0x12ac
    9628:	movt	sl, #2
    962c:	movt	r9, #2
    9630:	mov	r7, #0
    9634:	mov	r0, #8
    9638:	bl	fff4 <__assert_fail@plt+0x7024>
    963c:	ldr	r3, [r5]
    9640:	ldr	r2, [sl]
    9644:	ldr	r1, [r4, r3, lsl #2]
    9648:	add	r3, r3, #1
    964c:	cmp	r2, #0
    9650:	stm	r0, {r1, r7}
    9654:	streq	r0, [r9]
    9658:	strne	r0, [r2, #4]
    965c:	cmp	r6, r3
    9660:	str	r0, [sl]
    9664:	str	r3, [r5]
    9668:	bgt	9634 <__assert_fail@plt+0x664>
    966c:	ldr	r2, [sp, #20]
    9670:	ldr	r3, [r8]
    9674:	cmp	r2, r3
    9678:	bne	9684 <__assert_fail@plt+0x6b4>
    967c:	add	sp, sp, #28
    9680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9684:	bl	8e44 <__stack_chk_fail@plt>
    9688:	push	{r3, lr}
    968c:	movw	r1, #15324	; 0x3bdc
    9690:	mov	r0, #1
    9694:	movt	r1, #1
    9698:	mov	r2, #26
    969c:	bl	8f64 <write@plt>
    96a0:	mov	r0, #0
    96a4:	bl	8eec <exit@plt>
    96a8:	push	{r4, r5, r6, lr}
    96ac:	movw	r4, #4688	; 0x1250
    96b0:	movt	r4, #2
    96b4:	movw	r5, #4724	; 0x1274
    96b8:	mov	r6, r0
    96bc:	movt	r5, #2
    96c0:	ldrb	r3, [r4, #4]
    96c4:	cmp	r3, #0
    96c8:	bne	96d4 <__assert_fail@plt+0x704>
    96cc:	ldr	r0, [r5]
    96d0:	bl	8f88 <fclose@plt>
    96d4:	mov	r3, #0
    96d8:	str	r6, [r5]
    96dc:	strb	r3, [r4, #4]
    96e0:	pop	{r4, r5, r6, pc}
    96e4:	push	{r3, r4, r5, lr}
    96e8:	movw	r4, #4904	; 0x1328
    96ec:	movt	r4, #2
    96f0:	movw	r3, #4968	; 0x1368
    96f4:	movt	r3, #2
    96f8:	mov	r1, #1
    96fc:	ldrb	r2, [r4]
    9700:	str	r1, [r3]
    9704:	cmp	r2, #0
    9708:	bne	9818 <__assert_fail@plt+0x848>
    970c:	movw	r3, #4796	; 0x12bc
    9710:	movt	r3, #2
    9714:	ldr	r3, [r3]
    9718:	cmp	r3, #0
    971c:	bne	977c <__assert_fail@plt+0x7ac>
    9720:	movw	r5, #4780	; 0x12ac
    9724:	movt	r5, #2
    9728:	ldr	r3, [r5]
    972c:	cmp	r3, #0
    9730:	beq	9820 <__assert_fail@plt+0x850>
    9734:	ldr	r0, [r3]
    9738:	movw	r1, #31688	; 0x7bc8
    973c:	movt	r1, #1
    9740:	bl	8de4 <fopen@plt>
    9744:	cmp	r0, #0
    9748:	beq	9840 <__assert_fail@plt+0x870>
    974c:	bl	96a8 <__assert_fail@plt+0x6d8>
    9750:	ldr	r2, [r5]
    9754:	movw	r3, #4876	; 0x130c
    9758:	movt	r3, #2
    975c:	ldr	r1, [r2]
    9760:	mov	r0, r2
    9764:	ldr	r2, [r2, #4]
    9768:	str	r1, [r3]
    976c:	str	r2, [r5]
    9770:	bl	8e08 <free@plt>
    9774:	mov	r0, #1
    9778:	pop	{r3, r4, r5, pc}
    977c:	movw	r3, #4688	; 0x1250
    9780:	movt	r3, #2
    9784:	ldrb	r3, [r3, #4]
    9788:	cmp	r3, #0
    978c:	beq	9720 <__assert_fail@plt+0x750>
    9790:	mov	r1, #2
    9794:	movw	r0, #21240	; 0x52f8
    9798:	movt	r0, #1
    979c:	movw	r5, #4452	; 0x1164
    97a0:	bl	10740 <warn@@Base+0x2b4>
    97a4:	mov	r1, #2
    97a8:	movw	r0, #15352	; 0x3bf8
    97ac:	movt	r0, #1
    97b0:	bl	10740 <warn@@Base+0x2b4>
    97b4:	mov	r1, #2
    97b8:	movw	r0, #28780	; 0x706c
    97bc:	movt	r0, #1
    97c0:	bl	10740 <warn@@Base+0x2b4>
    97c4:	mov	r1, #2
    97c8:	movw	r0, #15356	; 0x3bfc
    97cc:	movt	r0, #1
    97d0:	bl	10740 <warn@@Base+0x2b4>
    97d4:	movt	r5, #2
    97d8:	mov	r1, #2
    97dc:	movw	r0, #15360	; 0x3c00
    97e0:	movt	r0, #1
    97e4:	bl	10740 <warn@@Base+0x2b4>
    97e8:	movw	r0, #15364	; 0x3c04
    97ec:	mov	r1, #2
    97f0:	movt	r0, #1
    97f4:	bl	10740 <warn@@Base+0x2b4>
    97f8:	ldr	r0, [r5]
    97fc:	cmp	r0, #0
    9800:	beq	9720 <__assert_fail@plt+0x750>
    9804:	bl	df78 <__assert_fail@plt+0x4fa8>
    9808:	ldr	r0, [r5, #4]!
    980c:	cmp	r0, #0
    9810:	bne	9804 <__assert_fail@plt+0x834>
    9814:	b	9720 <__assert_fail@plt+0x750>
    9818:	mov	r0, #0
    981c:	pop	{r3, r4, r5, pc}
    9820:	movw	r3, #4672	; 0x1240
    9824:	movt	r3, #2
    9828:	ldr	r0, [r3]
    982c:	bl	96a8 <__assert_fail@plt+0x6d8>
    9830:	mov	r3, #1
    9834:	mov	r0, r3
    9838:	strb	r3, [r4]
    983c:	pop	{r3, r4, r5, pc}
    9840:	ldr	r3, [r5]
    9844:	movw	r0, #4664	; 0x1238
    9848:	movt	r0, #2
    984c:	movw	r2, #15368	; 0x3c08
    9850:	mov	r1, #1
    9854:	movt	r2, #1
    9858:	ldr	r3, [r3]
    985c:	ldr	r0, [r0]
    9860:	bl	8f7c <__fprintf_chk@plt>
    9864:	mov	r0, #1
    9868:	bl	8eec <exit@plt>
    986c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9870:	movw	r0, #4648	; 0x1228
    9874:	sub	sp, sp, #1280	; 0x500
    9878:	movt	r0, #2
    987c:	sub	sp, sp, #4
    9880:	movw	r1, #4820	; 0x12d4
    9884:	ldr	r2, [r0]
    9888:	add	r4, sp, #76	; 0x4c
    988c:	movt	r1, #2
    9890:	str	r0, [sp, #44]	; 0x2c
    9894:	movw	fp, #15516	; 0x3c9c
    9898:	movw	r0, #4824	; 0x12d8
    989c:	movt	fp, #1
    98a0:	movt	r0, #2
    98a4:	add	r3, sp, #76	; 0x4c
    98a8:	mov	sl, r4
    98ac:	str	r3, [sp, #32]
    98b0:	mov	r8, #200	; 0xc8
    98b4:	mov	r3, #0
    98b8:	add	r5, sp, #476	; 0x1dc
    98bc:	str	r3, [sp, #52]	; 0x34
    98c0:	mov	r6, r3
    98c4:	str	r3, [r1]
    98c8:	mvn	r3, #1
    98cc:	str	r1, [sp, #48]	; 0x30
    98d0:	str	r0, [sp, #36]	; 0x24
    98d4:	str	r2, [sp, #1276]	; 0x4fc
    98d8:	str	r5, [sp, #56]	; 0x38
    98dc:	str	r3, [r0]
    98e0:	sub	r3, r8, #-2147483647	; 0x80000001
    98e4:	strh	r6, [r4]
    98e8:	lsl	r3, r3, #1
    98ec:	add	r2, sl, r3
    98f0:	cmp	r4, r2
    98f4:	bcc	99b4 <__assert_fail@plt+0x9e4>
    98f8:	rsb	r9, sl, r4
    98fc:	movw	r2, #9999	; 0x270f
    9900:	cmp	r8, r2
    9904:	asr	r9, r9, #1
    9908:	add	r9, r9, #1
    990c:	bhi	b0d4 <__assert_fail@plt+0x2104>
    9910:	add	r3, r3, #2
    9914:	add	r2, r2, #1
    9918:	cmp	r3, r2
    991c:	movcc	r8, r3
    9920:	movcs	r8, r2
    9924:	lsl	r5, r8, #1
    9928:	add	r0, r5, r8
    992c:	lsl	r0, r0, #1
    9930:	add	r0, r0, #3
    9934:	bl	8ea4 <malloc@plt>
    9938:	subs	r7, r0, #0
    993c:	beq	b0d4 <__assert_fail@plt+0x2104>
    9940:	lsl	r4, r9, #1
    9944:	mov	r1, sl
    9948:	lsl	r9, r9, #2
    994c:	str	r9, [sp, #40]	; 0x28
    9950:	mov	r2, r4
    9954:	bl	8e20 <memcpy@plt>
    9958:	add	r3, r5, #3
    995c:	bic	r3, r3, #3
    9960:	ldr	r1, [sp, #56]	; 0x38
    9964:	add	r9, r7, r3
    9968:	ldr	r2, [sp, #40]	; 0x28
    996c:	mov	r0, r9
    9970:	bl	8e20 <memcpy@plt>
    9974:	ldr	r1, [sp, #32]
    9978:	cmp	sl, r1
    997c:	beq	9988 <__assert_fail@plt+0x9b8>
    9980:	mov	r0, sl
    9984:	bl	8e08 <free@plt>
    9988:	sub	r4, r4, #2
    998c:	sub	r5, r5, #2
    9990:	add	r5, r7, r5
    9994:	add	r4, r7, r4
    9998:	ldr	r3, [sp, #40]	; 0x28
    999c:	cmp	r4, r5
    99a0:	sub	r5, r3, #4
    99a4:	add	r5, r9, r5
    99a8:	bcs	b0f0 <__assert_fail@plt+0x2120>
    99ac:	mov	sl, r7
    99b0:	str	r9, [sp, #56]	; 0x38
    99b4:	cmp	r6, #2
    99b8:	beq	b0e8 <__assert_fail@plt+0x2118>
    99bc:	lsl	r3, r6, #1
    99c0:	ldrh	r7, [fp, r3]
    99c4:	sxth	r9, r7
    99c8:	cmn	r9, #144	; 0x90
    99cc:	beq	9a20 <__assert_fail@plt+0xa50>
    99d0:	ldr	r1, [sp, #36]	; 0x24
    99d4:	movw	r3, #4824	; 0x12d8
    99d8:	movt	r3, #2
    99dc:	ldr	r0, [r1]
    99e0:	cmn	r0, #2
    99e4:	beq	9e84 <__assert_fail@plt+0xeb4>
    99e8:	cmp	r0, #0
    99ec:	ble	9e0c <__assert_fail@plt+0xe3c>
    99f0:	cmp	r0, #292	; 0x124
    99f4:	addls	r0, fp, r0
    99f8:	movhi	r3, #2
    99fc:	ldrbls	r3, [r0, #396]	; 0x18c
    9a00:	add	r9, r9, r3
    9a04:	cmp	r9, #720	; 0x2d0
    9a08:	bcs	9a20 <__assert_fail@plt+0xa50>
    9a0c:	add	r9, fp, r9, lsl #1
    9a10:	add	r2, r9, #692	; 0x2b4
    9a14:	ldrsh	r2, [r2]
    9a18:	cmp	r2, r3
    9a1c:	beq	9e3c <__assert_fail@plt+0xe6c>
    9a20:	add	r6, fp, r6
    9a24:	ldrb	r6, [r6, #3572]	; 0xdf4
    9a28:	cmp	r6, #0
    9a2c:	beq	9d08 <__assert_fail@plt+0xd38>
    9a30:	add	r2, fp, r6
    9a34:	sub	r3, r6, #2
    9a38:	ldrb	r2, [r2, #3772]	; 0xebc
    9a3c:	str	r2, [sp, #40]	; 0x28
    9a40:	rsb	r2, r2, #1
    9a44:	ldr	r9, [r5, r2, lsl #2]
    9a48:	cmp	r3, #110	; 0x6e
    9a4c:	ldrls	pc, [pc, r3, lsl #2]
    9a50:	b	9c98 <__assert_fail@plt+0xcc8>
    9a54:			; <UNDEFINED> instruction: 0x0000abb8
    9a58:	muleq	r0, r8, ip
    9a5c:			; <UNDEFINED> instruction: 0x00009eb4
    9a60:			; <UNDEFINED> instruction: 0x00009eb4
    9a64:	andeq	sl, r0, r4, ror #22
    9a68:	muleq	r0, r8, ip
    9a6c:	andeq	sl, r0, ip, ror #23
    9a70:	andeq	r9, r0, r4, lsr #29
    9a74:	muleq	r0, r8, ip
    9a78:	muleq	r0, r8, ip
    9a7c:	muleq	r0, r8, ip
    9a80:	andeq	r9, r0, r4, lsr #29
    9a84:	muleq	r0, r8, ip
    9a88:	muleq	r0, r8, ip
    9a8c:	muleq	r0, r8, ip
    9a90:	muleq	r0, r8, ip
    9a94:	muleq	r0, r8, ip
    9a98:	muleq	r0, r8, ip
    9a9c:	strdeq	sl, [r0], -ip
    9aa0:	andeq	r9, r0, r8, lsl #30
    9aa4:			; <UNDEFINED> instruction: 0x00009fb4
    9aa8:	andeq	r9, r0, ip, ror pc
    9aac:	andeq	sl, r0, r4, asr r0
    9ab0:	andeq	sl, r0, r4, lsl r0
    9ab4:	andeq	r9, r0, r4, ror #31
    9ab8:	ldrdeq	r9, [r0], -ip
    9abc:	andeq	r9, r0, ip, asr #31
    9ac0:			; <UNDEFINED> instruction: 0x00009fbc
    9ac4:	muleq	r0, r8, r7
    9ac8:	andeq	sl, r0, r0, lsr #14
    9acc:	andeq	sl, r0, r8, asr r6
    9ad0:	andeq	sl, r0, r0, ror #11
    9ad4:	andeq	sl, r0, r4, ror r5
    9ad8:	andeq	sl, r0, r8, lsl #10
    9adc:			; <UNDEFINED> instruction: 0x0000a4bc
    9ae0:	andeq	sl, r0, r8, ror r3
    9ae4:	strdeq	sl, [r0], -r0
    9ae8:	muleq	r0, ip, r2
    9aec:	andeq	r9, r0, r4, lsr #29
    9af0:	andeq	sl, r0, ip, ror r2
    9af4:	muleq	r0, r8, ip
    9af8:	muleq	r0, r8, ip
    9afc:	muleq	r0, r8, ip
    9b00:	andeq	sl, r0, ip, asr r2
    9b04:	andeq	sl, r0, r4, lsr r2
    9b08:	muleq	r0, r8, ip
    9b0c:	andeq	sl, r0, r0, asr #3
    9b10:	muleq	r0, r8, ip
    9b14:	strheq	sl, [r0], -ip
    9b18:	andeq	sl, r0, ip, lsl #1
    9b1c:	andeq	r9, r0, r4, lsr #29
    9b20:	andeq	sl, r0, r4, ror #8
    9b24:	andeq	r9, r0, r4, lsr #29
    9b28:	muleq	r0, r8, ip
    9b2c:	andeq	r9, r0, r4, lsr #29
    9b30:	andeq	r9, r0, ip, lsr #29
    9b34:	andeq	r9, r0, ip, lsr #29
    9b38:	muleq	r0, r0, r9
    9b3c:	andeq	sl, r0, r0, lsl #8
    9b40:	strdeq	r9, [r0], -r0
    9b44:	strdeq	r9, [r0], -r0
    9b48:	andeq	sl, r0, r4, asr #19
    9b4c:	muleq	r0, ip, r9
    9b50:			; <UNDEFINED> instruction: 0x00009ebc
    9b54:			; <UNDEFINED> instruction: 0x00009ebc
    9b58:	andeq	r9, r0, r4, lsr #29
    9b5c:	muleq	r0, r8, ip
    9b60:	andeq	sl, r0, r4, lsl fp
    9b64:			; <UNDEFINED> instruction: 0x0000aabc
    9b68:	andeq	sl, r0, r0, ror #20
    9b6c:	andeq	sl, r0, r8, lsl #20
    9b70:	andeq	sl, r0, r8, lsr #21
    9b74:	muleq	r0, r8, ip
    9b78:	ldrdeq	sl, [r0], -r4
    9b7c:	andeq	r9, r0, r0, lsl ip
    9b80:	andeq	sl, r0, r4, lsr #8
    9b84:	andeq	sl, r0, r8, asr pc
    9b88:	andeq	sl, r0, ip, lsr #30
    9b8c:	andeq	sl, r0, r0, asr #29
    9b90:	muleq	r0, r4, lr
    9b94:	andeq	sl, r0, ip, ror #31
    9b98:	andeq	sl, r0, r8, asr lr
    9b9c:	andeq	sl, r0, r4, lsr #27
    9ba0:	andeq	sl, r0, r4, ror sp
    9ba4:	andeq	sl, r0, r4, asr #26
    9ba8:	andeq	sl, r0, r4, lsl sp
    9bac:	andeq	sl, r0, r4, ror #25
    9bb0:			; <UNDEFINED> instruction: 0x0000acb4
    9bb4:	andeq	sl, r0, r0, ror ip
    9bb8:	andeq	sl, r0, r0, asr #24
    9bbc:	andeq	r9, r0, ip, lsr #30
    9bc0:	andeq	sl, r0, r8, ror r4
    9bc4:	andeq	sl, r0, r0, asr #18
    9bc8:	andeq	sl, r0, ip, lsr #17
    9bcc:	andeq	sl, r0, r4, lsr r8
    9bd0:	andeq	sl, r0, r4, asr #15
    9bd4:	andeq	sl, r0, r4, ror #18
    9bd8:	andeq	sl, r0, r0, lsl #17
    9bdc:	andeq	sl, r0, r4, lsl ip
    9be0:	andeq	sl, r0, r0, asr #7
    9be4:	andeq	sl, r0, r0, ror #7
    9be8:	andeq	sl, r0, r8, lsr r0
    9bec:	andeq	sl, r0, r4, ror fp
    9bf0:	andeq	r9, r0, r4, lsr #29
    9bf4:	andeq	sl, r0, ip, asr fp
    9bf8:	andeq	sl, r0, ip, asr #32
    9bfc:	andeq	r9, r0, r8, lsl pc
    9c00:	andeq	sl, r0, r8, ror r0
    9c04:	andeq	sl, r0, ip, lsl #5
    9c08:	muleq	r0, r8, ip
    9c0c:	andeq	sl, r0, r4, lsl #24
    9c10:	ldr	r3, [r5]
    9c14:	tst	r3, #2
    9c18:	beq	9c2c <__assert_fail@plt+0xc5c>
    9c1c:	movw	r0, #20264	; 0x4f28
    9c20:	movt	r0, #1
    9c24:	bl	1048c <warn@@Base>
    9c28:	ldr	r3, [r5]
    9c2c:	tst	r3, #4
    9c30:	bne	9c44 <__assert_fail@plt+0xc74>
    9c34:	movw	r0, #20296	; 0x4f48
    9c38:	movt	r0, #1
    9c3c:	bl	1048c <warn@@Base>
    9c40:	ldr	r3, [r5]
    9c44:	tst	r3, #8
    9c48:	beq	9c58 <__assert_fail@plt+0xc88>
    9c4c:	movw	r0, #20336	; 0x4f70
    9c50:	movt	r0, #1
    9c54:	bl	103c0 <__assert_fail@plt+0x73f0>
    9c58:	movw	r3, #4444	; 0x115c
    9c5c:	movt	r3, #2
    9c60:	ldr	r2, [r3]
    9c64:	cmn	r2, #1
    9c68:	beq	b220 <__assert_fail@plt+0x2250>
    9c6c:	movw	r3, #4928	; 0x1340
    9c70:	movt	r3, #2
    9c74:	rsb	r2, r2, r2, lsl #3
    9c78:	ldr	r3, [r3]
    9c7c:	add	r3, r3, r2, lsl #2
    9c80:	ldrb	r3, [r3, #1]
    9c84:	cmp	r3, #0
    9c88:	beq	9c98 <__assert_fail@plt+0xcc8>
    9c8c:	movw	r0, #20372	; 0x4f94
    9c90:	movt	r0, #1
    9c94:	bl	103c0 <__assert_fail@plt+0x73f0>
    9c98:	ldr	r1, [sp, #40]	; 0x28
    9c9c:	add	r6, fp, r6
    9ca0:	sxth	r2, r1
    9ca4:	ldrb	r1, [r6, #3888]	; 0xf30
    9ca8:	sub	r3, r5, r2, lsl #2
    9cac:	sub	r4, r4, r2, lsl #1
    9cb0:	sub	r2, r1, #53	; 0x35
    9cb4:	add	r5, r3, #4
    9cb8:	str	r9, [r3, #4]
    9cbc:	lsl	r2, r2, #1
    9cc0:	ldrsh	r1, [r4]
    9cc4:	add	r3, fp, r2
    9cc8:	add	r3, r3, #4000	; 0xfa0
    9ccc:	add	r3, r3, #4
    9cd0:	ldrsh	r3, [r3]
    9cd4:	add	r3, r3, r1
    9cd8:	cmp	r3, #720	; 0x2d0
    9cdc:	bcs	9cf4 <__assert_fail@plt+0xd24>
    9ce0:	add	r3, fp, r3, lsl #1
    9ce4:	add	r0, r3, #692	; 0x2b4
    9ce8:	ldrsh	r0, [r0]
    9cec:	cmp	r0, r1
    9cf0:	beq	9e98 <__assert_fail@plt+0xec8>
    9cf4:	add	r3, fp, r2
    9cf8:	add	r3, r3, #4064	; 0xfe0
    9cfc:	ldrsh	r6, [r3, #12]
    9d00:	add	r4, r4, #2
    9d04:	b	98e0 <__assert_fail@plt+0x910>
    9d08:	ldr	r2, [sp, #52]	; 0x34
    9d0c:	cmp	r2, #0
    9d10:	beq	9e1c <__assert_fail@plt+0xe4c>
    9d14:	ldr	r0, [sp, #52]	; 0x34
    9d18:	cmp	r0, #3
    9d1c:	beq	9dac <__assert_fail@plt+0xddc>
    9d20:	mov	r3, r4
    9d24:	mov	r2, r7
    9d28:	b	9d48 <__assert_fail@plt+0xd78>
    9d2c:	cmp	sl, r3
    9d30:	beq	9dd0 <__assert_fail@plt+0xe00>
    9d34:	ldrsh	r2, [r4, #-2]
    9d38:	sub	r5, r5, #4
    9d3c:	sub	r3, r3, #2
    9d40:	lsl	r2, r2, #1
    9d44:	ldrh	r2, [fp, r2]
    9d48:	sxth	r2, r2
    9d4c:	mov	r4, r3
    9d50:	cmn	r2, #144	; 0x90
    9d54:	beq	9d2c <__assert_fail@plt+0xd5c>
    9d58:	add	r2, r2, #1
    9d5c:	cmp	r2, #720	; 0x2d0
    9d60:	bcs	9d2c <__assert_fail@plt+0xd5c>
    9d64:	add	r2, fp, r2, lsl #1
    9d68:	add	r1, r2, #692	; 0x2b4
    9d6c:	ldrsh	r1, [r1]
    9d70:	cmp	r1, #1
    9d74:	bne	9d2c <__assert_fail@plt+0xd5c>
    9d78:	add	r2, r2, #2128	; 0x850
    9d7c:	ldrsh	r6, [r2, #4]
    9d80:	cmp	r6, #0
    9d84:	ble	9d2c <__assert_fail@plt+0xd5c>
    9d88:	movw	r3, #4828	; 0x12dc
    9d8c:	movt	r3, #2
    9d90:	mov	r2, r5
    9d94:	mov	r0, #3
    9d98:	ldr	r3, [r3]
    9d9c:	add	r5, r5, #4
    9da0:	str	r0, [sp, #52]	; 0x34
    9da4:	str	r3, [r2, #4]
    9da8:	b	9d00 <__assert_fail@plt+0xd30>
    9dac:	ldr	r1, [sp, #36]	; 0x24
    9db0:	movw	r3, #4824	; 0x12d8
    9db4:	movt	r3, #2
    9db8:	ldr	r2, [r1]
    9dbc:	cmp	r2, #0
    9dc0:	mvngt	r2, #1
    9dc4:	strgt	r2, [r3]
    9dc8:	bgt	9d20 <__assert_fail@plt+0xd50>
    9dcc:	bne	9d20 <__assert_fail@plt+0xd50>
    9dd0:	mov	r4, #1
    9dd4:	ldr	r1, [sp, #32]
    9dd8:	cmp	sl, r1
    9ddc:	beq	9de8 <__assert_fail@plt+0xe18>
    9de0:	mov	r0, sl
    9de4:	bl	8e08 <free@plt>
    9de8:	ldr	r1, [sp, #44]	; 0x2c
    9dec:	mov	r0, r4
    9df0:	ldr	r2, [sp, #1276]	; 0x4fc
    9df4:	ldr	r3, [r1]
    9df8:	cmp	r2, r3
    9dfc:	bne	b240 <__assert_fail@plt+0x2270>
    9e00:	add	sp, sp, #1280	; 0x500
    9e04:	add	sp, sp, #4
    9e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e0c:	ldr	r2, [sp, #36]	; 0x24
    9e10:	mov	r3, #0
    9e14:	str	r3, [r2]
    9e18:	b	9a00 <__assert_fail@plt+0xa30>
    9e1c:	ldr	lr, [sp, #48]	; 0x30
    9e20:	movw	r0, #21292	; 0x532c
    9e24:	movt	r0, #1
    9e28:	ldr	r3, [lr]
    9e2c:	add	r3, r3, #1
    9e30:	str	r3, [lr]
    9e34:	bl	103c0 <__assert_fail@plt+0x73f0>
    9e38:	b	9d20 <__assert_fail@plt+0xd50>
    9e3c:	add	r9, r9, #2128	; 0x850
    9e40:	ldrsh	r6, [r9, #4]
    9e44:	cmp	r6, #0
    9e48:	rsble	r6, r6, #0
    9e4c:	ble	9a30 <__assert_fail@plt+0xa60>
    9e50:	ldr	r3, [sp, #52]	; 0x34
    9e54:	mvn	r2, #1
    9e58:	ldr	r0, [sp, #36]	; 0x24
    9e5c:	add	r5, r5, #4
    9e60:	cmp	r3, #0
    9e64:	subne	r3, r3, #1
    9e68:	strne	r3, [sp, #52]	; 0x34
    9e6c:	movw	r3, #4828	; 0x12dc
    9e70:	movt	r3, #2
    9e74:	str	r2, [r0]
    9e78:	ldr	r3, [r3]
    9e7c:	str	r3, [r5]
    9e80:	b	9d00 <__assert_fail@plt+0xd30>
    9e84:	str	r3, [sp, #24]
    9e88:	bl	ba68 <__assert_fail@plt+0x2a98>
    9e8c:	ldr	r3, [sp, #24]
    9e90:	str	r0, [r3]
    9e94:	b	99e8 <__assert_fail@plt+0xa18>
    9e98:	add	r3, r3, #2128	; 0x850
    9e9c:	ldrsh	r6, [r3, #4]
    9ea0:	b	9d00 <__assert_fail@plt+0xd30>
    9ea4:	mov	r9, #0
    9ea8:	b	9c98 <__assert_fail@plt+0xcc8>
    9eac:	ldr	r9, [r5, #-4]
    9eb0:	b	9c98 <__assert_fail@plt+0xcc8>
    9eb4:	bl	10334 <__assert_fail@plt+0x7364>
    9eb8:	b	9c98 <__assert_fail@plt+0xcc8>
    9ebc:	mov	r1, #1
    9ec0:	ldr	r0, [r5, #-8]
    9ec4:	ldr	r7, [r5, #-20]	; 0xffffffec
    9ec8:	bl	10740 <warn@@Base+0x2b4>
    9ecc:	mov	r1, r0
    9ed0:	mov	r0, r7
    9ed4:	mov	r2, #1
    9ed8:	bl	1003c <__assert_fail@plt+0x706c>
    9edc:	mov	r9, r0
    9ee0:	movw	r0, #20124	; 0x4e9c
    9ee4:	movt	r0, #1
    9ee8:	bl	1048c <warn@@Base>
    9eec:	b	9c98 <__assert_fail@plt+0xcc8>
    9ef0:	mov	r1, #1
    9ef4:	ldr	r0, [r5, #-8]
    9ef8:	bl	10740 <warn@@Base+0x2b4>
    9efc:	mov	r1, r0
    9f00:	mov	r0, #0
    9f04:	b	9ed4 <__assert_fail@plt+0xf04>
    9f08:	movw	r0, #15392	; 0x3c20
    9f0c:	movt	r0, #1
    9f10:	bl	10b90 <warn@@Base+0x704>
    9f14:	b	9c98 <__assert_fail@plt+0xcc8>
    9f18:	movw	r0, #21208	; 0x52d8
    9f1c:	movt	r0, #1
    9f20:	bl	1048c <warn@@Base>
    9f24:	mov	r9, #3
    9f28:	b	9c98 <__assert_fail@plt+0xcc8>
    9f2c:	ldr	r3, [r5]
    9f30:	movw	r7, #4812	; 0x12cc
    9f34:	movt	r7, #2
    9f38:	mov	r1, #1
    9f3c:	cmp	r3, #0
    9f40:	rsblt	r2, r3, #0
    9f44:	strge	r3, [sp]
    9f48:	movwlt	r3, #20868	; 0x5184
    9f4c:	ldrlt	r0, [r7]
    9f50:	movwge	r3, #20968	; 0x51e8
    9f54:	strlt	r2, [sp]
    9f58:	movtlt	r3, #1
    9f5c:	ldrge	r0, [r7]
    9f60:	movtge	r3, #1
    9f64:	mvn	r2, #0
    9f68:	bl	8f1c <__sprintf_chk@plt>
    9f6c:	ldr	r0, [r7]
    9f70:	mov	r9, #1
    9f74:	bl	faa4 <__assert_fail@plt+0x6ad4>
    9f78:	b	9c98 <__assert_fail@plt+0xcc8>
    9f7c:	ldr	r3, [r5]
    9f80:	tst	r3, #2
    9f84:	beq	9f98 <__assert_fail@plt+0xfc8>
    9f88:	movw	r0, #19684	; 0x4ce4
    9f8c:	movt	r0, #1
    9f90:	bl	1048c <warn@@Base>
    9f94:	ldr	r3, [r5]
    9f98:	tst	r3, #1
    9f9c:	movwne	r0, #19712	; 0x4d00
    9fa0:	movweq	r0, #30204	; 0x75fc
    9fa4:	movtne	r0, #1
    9fa8:	movteq	r0, #1
    9fac:	bl	faa4 <__assert_fail@plt+0x6ad4>
    9fb0:	b	9c98 <__assert_fail@plt+0xcc8>
    9fb4:	bl	ff48 <__assert_fail@plt+0x6f78>
    9fb8:	b	9c98 <__assert_fail@plt+0xcc8>
    9fbc:	movw	r0, #29384	; 0x72c8
    9fc0:	movt	r0, #1
    9fc4:	bl	faa4 <__assert_fail@plt+0x6ad4>
    9fc8:	b	9c98 <__assert_fail@plt+0xcc8>
    9fcc:	movw	r0, #28332	; 0x6eac
    9fd0:	movt	r0, #1
    9fd4:	bl	faa4 <__assert_fail@plt+0x6ad4>
    9fd8:	b	9c98 <__assert_fail@plt+0xcc8>
    9fdc:	mov	r0, #0
    9fe0:	bl	8eec <exit@plt>
    9fe4:	movw	r0, #19756	; 0x4d2c
    9fe8:	movt	r0, #1
    9fec:	bl	1048c <warn@@Base>
    9ff0:	movw	r3, #4868	; 0x1304
    9ff4:	movt	r3, #2
    9ff8:	ldr	r3, [r3]
    9ffc:	cmp	r3, #0
    a000:	bne	b0fc <__assert_fail@plt+0x212c>
    a004:	movw	r0, #19776	; 0x4d40
    a008:	movt	r0, #1
    a00c:	bl	103c0 <__assert_fail@plt+0x73f0>
    a010:	b	9c98 <__assert_fail@plt+0xcc8>
    a014:	movw	r3, #4872	; 0x1308
    a018:	movt	r3, #2
    a01c:	ldr	r3, [r3]
    a020:	cmp	r3, #0
    a024:	bne	b0fc <__assert_fail@plt+0x212c>
    a028:	movw	r0, #19720	; 0x4d08
    a02c:	movt	r0, #1
    a030:	bl	103c0 <__assert_fail@plt+0x73f0>
    a034:	b	9c98 <__assert_fail@plt+0xcc8>
    a038:	ldr	r0, [r5]
    a03c:	mov	r1, #0
    a040:	bl	10740 <warn@@Base+0x2b4>
    a044:	mov	r9, r0
    a048:	b	9c98 <__assert_fail@plt+0xcc8>
    a04c:	mov	r9, #2
    a050:	b	9c98 <__assert_fail@plt+0xcc8>
    a054:	movw	r0, #19716	; 0x4d04
    a058:	movt	r0, #1
    a05c:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a060:	ldr	r0, [r5]
    a064:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a068:	ldr	r0, [r5]
    a06c:	bl	8e08 <free@plt>
    a070:	mov	r9, #0
    a074:	b	9c98 <__assert_fail@plt+0xcc8>
    a078:	movw	r0, #21228	; 0x52ec
    a07c:	movt	r0, #1
    a080:	bl	1048c <warn@@Base>
    a084:	mov	r9, #4
    a088:	b	9c98 <__assert_fail@plt+0xcc8>
    a08c:	movw	r0, #20104	; 0x4e88
    a090:	movt	r0, #1
    a094:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a098:	ldr	r1, [r5, #-48]	; 0xffffffd0
    a09c:	movw	r2, #4880	; 0x1310
    a0a0:	movw	r3, #4444	; 0x115c
    a0a4:	movt	r2, #2
    a0a8:	movt	r3, #2
    a0ac:	str	r1, [r2]
    a0b0:	mvn	r2, #0
    a0b4:	str	r2, [r3]
    a0b8:	b	9c98 <__assert_fail@plt+0xcc8>
    a0bc:	ldr	r1, [r5]
    a0c0:	movw	r7, #4812	; 0x12cc
    a0c4:	ldr	r0, [r5, #-20]	; 0xffffffec
    a0c8:	movt	r7, #2
    a0cc:	bl	105f4 <warn@@Base+0x168>
    a0d0:	ldr	r0, [r5, #-20]	; 0xffffffec
    a0d4:	bl	10164 <__assert_fail@plt+0x7194>
    a0d8:	movw	r1, #4444	; 0x115c
    a0dc:	str	r1, [sp, #60]	; 0x3c
    a0e0:	str	r0, [sp, #64]	; 0x40
    a0e4:	ldr	r0, [r5]
    a0e8:	bl	10164 <__assert_fail@plt+0x7194>
    a0ec:	str	r0, [sp, #68]	; 0x44
    a0f0:	ldr	r0, [sp, #64]	; 0x40
    a0f4:	bl	8ef8 <strlen@plt>
    a0f8:	mov	r3, r0
    a0fc:	ldr	r0, [sp, #68]	; 0x44
    a100:	str	r3, [sp, #24]
    a104:	bl	8ef8 <strlen@plt>
    a108:	ldr	r3, [sp, #24]
    a10c:	ldr	r2, [sp, #60]	; 0x3c
    a110:	movt	r2, #2
    a114:	str	r2, [sp, #60]	; 0x3c
    a118:	add	r0, r3, r0
    a11c:	add	r0, r0, #30
    a120:	bl	10254 <__assert_fail@plt+0x7284>
    a124:	mov	r1, #3
    a128:	ldr	r0, [r5, #-28]	; 0xffffffe4
    a12c:	bl	10740 <warn@@Base+0x2b4>
    a130:	ldr	r2, [sp, #64]	; 0x40
    a134:	ldr	lr, [sp, #60]	; 0x3c
    a138:	mov	r1, #1
    a13c:	movw	r3, #20092	; 0x4e7c
    a140:	movt	r3, #1
    a144:	mov	ip, r0
    a148:	ldr	r0, [r7]
    a14c:	str	r2, [sp, #4]
    a150:	ldr	r2, [sp, #68]	; 0x44
    a154:	str	ip, [sp]
    a158:	str	r2, [sp, #8]
    a15c:	mvn	r2, #0
    a160:	str	ip, [lr]
    a164:	bl	8f1c <__sprintf_chk@plt>
    a168:	ldr	r0, [r7]
    a16c:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a170:	ldr	r0, [sp, #60]	; 0x3c
    a174:	movw	r3, #4928	; 0x1340
    a178:	movt	r3, #2
    a17c:	ldr	r1, [r5, #-32]	; 0xffffffe0
    a180:	ldr	r2, [r0]
    a184:	ldr	r3, [r3]
    a188:	rsb	r2, r2, r2, lsl #3
    a18c:	add	r3, r3, r2, lsl #2
    a190:	strb	r1, [r3, #1]
    a194:	ldr	r0, [r5, #-20]	; 0xffffffec
    a198:	bl	fa80 <__assert_fail@plt+0x6ab0>
    a19c:	ldr	r0, [r5]
    a1a0:	bl	fa80 <__assert_fail@plt+0x6ab0>
    a1a4:	movw	r3, #4880	; 0x1310
    a1a8:	movt	r3, #2
    a1ac:	mov	r2, #1
    a1b0:	ldr	r1, [r3]
    a1b4:	str	r1, [r5, #-36]	; 0xffffffdc
    a1b8:	str	r2, [r3]
    a1bc:	b	9c98 <__assert_fail@plt+0xcc8>
    a1c0:	movw	r0, #20052	; 0x4e54
    a1c4:	movt	r0, #1
    a1c8:	bl	1048c <warn@@Base>
    a1cc:	movw	r2, #4880	; 0x1310
    a1d0:	movt	r2, #2
    a1d4:	movw	ip, #4912	; 0x1330
    a1d8:	movt	ip, #2
    a1dc:	movw	r7, #4812	; 0x12cc
    a1e0:	ldr	lr, [r2]
    a1e4:	movt	r7, #2
    a1e8:	movw	r3, #20080	; 0x4e70
    a1ec:	movt	r3, #1
    a1f0:	add	r1, lr, #1
    a1f4:	str	r1, [r2]
    a1f8:	str	lr, [r5]
    a1fc:	mov	r1, #1
    a200:	str	lr, [sp]
    a204:	mvn	r2, #0
    a208:	ldr	lr, [ip]
    a20c:	ldr	r0, [r7]
    a210:	str	ip, [sp, #28]
    a214:	str	lr, [sp, #4]
    a218:	bl	8f1c <__sprintf_chk@plt>
    a21c:	ldr	r0, [r7]
    a220:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a224:	ldr	r3, [r5]
    a228:	ldr	ip, [sp, #28]
    a22c:	str	r3, [ip]
    a230:	b	9c98 <__assert_fail@plt+0xcc8>
    a234:	ldr	r3, [r5]
    a238:	tst	r3, #8
    a23c:	beq	a24c <__assert_fail@plt+0x127c>
    a240:	movw	r0, #20020	; 0x4e34
    a244:	movt	r0, #1
    a248:	bl	103c0 <__assert_fail@plt+0x73f0>
    a24c:	movw	r0, #20048	; 0x4e50
    a250:	movt	r0, #1
    a254:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a258:	b	9c98 <__assert_fail@plt+0xcc8>
    a25c:	movw	r0, #20016	; 0x4e30
    a260:	movt	r0, #1
    a264:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a268:	ldr	r0, [r5]
    a26c:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a270:	ldr	r0, [r5]
    a274:	bl	8e08 <free@plt>
    a278:	b	9c98 <__assert_fail@plt+0xcc8>
    a27c:	movw	r0, #20000	; 0x4e20
    a280:	movt	r0, #1
    a284:	bl	1048c <warn@@Base>
    a288:	b	9c98 <__assert_fail@plt+0xcc8>
    a28c:	movw	r0, #21244	; 0x52fc
    a290:	movt	r0, #1
    a294:	bl	1048c <warn@@Base>
    a298:	b	9c98 <__assert_fail@plt+0xcc8>
    a29c:	movw	ip, #4872	; 0x1308
    a2a0:	movt	ip, #2
    a2a4:	ldr	r2, [r5, #-28]	; 0xffffffe4
    a2a8:	movw	r7, #4812	; 0x12cc
    a2ac:	ldr	lr, [ip]
    a2b0:	movt	r7, #2
    a2b4:	mov	r1, #1
    a2b8:	movw	r3, #19968	; 0x4e00
    a2bc:	ldr	r0, [r7]
    a2c0:	movt	r3, #1
    a2c4:	str	r2, [sp]
    a2c8:	mvn	r2, #0
    a2cc:	str	lr, [sp, #4]
    a2d0:	str	ip, [sp, #28]
    a2d4:	bl	8f1c <__sprintf_chk@plt>
    a2d8:	ldr	r0, [r7]
    a2dc:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a2e0:	ldr	r3, [r5, #-16]
    a2e4:	ldr	ip, [sp, #28]
    a2e8:	str	r3, [ip]
    a2ec:	b	9c98 <__assert_fail@plt+0xcc8>
    a2f0:	ldr	r3, [r5]
    a2f4:	tst	r3, #8
    a2f8:	beq	a308 <__assert_fail@plt+0x1338>
    a2fc:	movw	r0, #20436	; 0x4fd4
    a300:	movt	r0, #1
    a304:	bl	103c0 <__assert_fail@plt+0x73f0>
    a308:	movw	ip, #4872	; 0x1308
    a30c:	movt	ip, #2
    a310:	movw	lr, #4880	; 0x1310
    a314:	movt	lr, #2
    a318:	ldr	r2, [ip]
    a31c:	movw	r7, #4812	; 0x12cc
    a320:	str	lr, [sp, #60]	; 0x3c
    a324:	movt	r7, #2
    a328:	movw	r3, #19992	; 0x4e18
    a32c:	movt	r3, #1
    a330:	str	r2, [r5]
    a334:	mov	r1, #1
    a338:	ldr	lr, [lr]
    a33c:	mvn	r2, #0
    a340:	str	lr, [sp, #16]
    a344:	ldr	r0, [sp, #16]
    a348:	ldr	lr, [r7]
    a34c:	str	r0, [sp]
    a350:	mov	r0, lr
    a354:	ldr	lr, [sp, #16]
    a358:	str	lr, [ip]
    a35c:	add	ip, lr, r1
    a360:	ldr	lr, [sp, #60]	; 0x3c
    a364:	str	ip, [lr]
    a368:	bl	8f1c <__sprintf_chk@plt>
    a36c:	ldr	r0, [r7]
    a370:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a374:	b	9c98 <__assert_fail@plt+0xcc8>
    a378:	movw	r2, #4880	; 0x1310
    a37c:	movt	r2, #2
    a380:	movw	r7, #4812	; 0x12cc
    a384:	movw	r3, #20084	; 0x4e74
    a388:	ldr	ip, [r2]
    a38c:	movt	r7, #2
    a390:	movt	r3, #1
    a394:	mov	r1, #1
    a398:	add	r0, ip, r1
    a39c:	str	r0, [r2]
    a3a0:	str	ip, [r5]
    a3a4:	ldr	r0, [r7]
    a3a8:	mvn	r2, #0
    a3ac:	str	ip, [sp]
    a3b0:	bl	8f1c <__sprintf_chk@plt>
    a3b4:	ldr	r0, [r7]
    a3b8:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a3bc:	b	9c98 <__assert_fail@plt+0xcc8>
    a3c0:	movw	r0, #21112	; 0x5278
    a3c4:	movt	r0, #1
    a3c8:	bl	1048c <warn@@Base>
    a3cc:	movw	r0, #21128	; 0x5288
    a3d0:	movt	r0, #1
    a3d4:	mov	r9, #1
    a3d8:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a3dc:	b	9c98 <__assert_fail@plt+0xcc8>
    a3e0:	movw	r0, #21132	; 0x528c
    a3e4:	movt	r0, #1
    a3e8:	bl	1048c <warn@@Base>
    a3ec:	movw	r0, #21148	; 0x529c
    a3f0:	movt	r0, #1
    a3f4:	mov	r9, #1
    a3f8:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a3fc:	b	9c98 <__assert_fail@plt+0xcc8>
    a400:	ldr	r0, [r5, #-8]
    a404:	mov	r1, #1
    a408:	bl	10740 <warn@@Base+0x2b4>
    a40c:	mov	r1, r0
    a410:	mov	r0, #0
    a414:	mov	r2, r0
    a418:	bl	1003c <__assert_fail@plt+0x706c>
    a41c:	mov	r9, r0
    a420:	b	9c98 <__assert_fail@plt+0xcc8>
    a424:	ldrb	r3, [r5]
    a428:	cmp	r3, #61	; 0x3d
    a42c:	beq	9c98 <__assert_fail@plt+0xcc8>
    a430:	ldr	r3, [r5, #-4]
    a434:	movw	r7, #4812	; 0x12cc
    a438:	movt	r7, #2
    a43c:	cmp	r3, #0
    a440:	blt	b1d8 <__assert_fail@plt+0x2208>
    a444:	str	r3, [sp]
    a448:	movw	r3, #20968	; 0x51e8
    a44c:	ldr	r0, [r7]
    a450:	movt	r3, #1
    a454:	mov	r1, #1
    a458:	mvn	r2, #0
    a45c:	bl	8f1c <__sprintf_chk@plt>
    a460:	b	a36c <__assert_fail@plt+0x139c>
    a464:	movw	r0, #20108	; 0x4e8c
    a468:	movt	r0, #1
    a46c:	bl	1048c <warn@@Base>
    a470:	mov	r9, #1
    a474:	b	9c98 <__assert_fail@plt+0xcc8>
    a478:	ldr	r7, [r5]
    a47c:	mov	r0, r7
    a480:	bl	8ef8 <strlen@plt>
    a484:	cmp	r0, #1
    a488:	beq	b150 <__assert_fail@plt+0x2180>
    a48c:	movw	r0, #20876	; 0x518c
    a490:	movt	r0, #1
    a494:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a498:	ldr	r0, [r5]
    a49c:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a4a0:	movw	r0, #29064	; 0x7188
    a4a4:	movt	r0, #1
    a4a8:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a4ac:	ldr	r0, [r5]
    a4b0:	mov	r9, #1
    a4b4:	bl	8e08 <free@plt>
    a4b8:	b	9c98 <__assert_fail@plt+0xcc8>
    a4bc:	movw	ip, #4912	; 0x1330
    a4c0:	movt	ip, #2
    a4c4:	movw	r7, #4812	; 0x12cc
    a4c8:	movt	r7, #2
    a4cc:	ldr	lr, [ip]
    a4d0:	mov	r1, #1
    a4d4:	ldr	r0, [r7]
    a4d8:	mvn	r2, #0
    a4dc:	movw	r3, #20084	; 0x4e74
    a4e0:	movt	r3, #1
    a4e4:	str	lr, [sp]
    a4e8:	str	ip, [sp, #28]
    a4ec:	bl	8f1c <__sprintf_chk@plt>
    a4f0:	ldr	r0, [r7]
    a4f4:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a4f8:	ldr	r3, [r5, #-20]	; 0xffffffec
    a4fc:	ldr	ip, [sp, #28]
    a500:	str	r3, [ip]
    a504:	b	9c98 <__assert_fail@plt+0xcc8>
    a508:	ldr	r3, [r5, #-4]
    a50c:	tst	r3, #8
    a510:	beq	a520 <__assert_fail@plt+0x1550>
    a514:	movw	r0, #20436	; 0x4fd4
    a518:	movt	r0, #1
    a51c:	bl	103c0 <__assert_fail@plt+0x73f0>
    a520:	movw	ip, #4912	; 0x1330
    a524:	movt	ip, #2
    a528:	movw	lr, #4880	; 0x1310
    a52c:	movt	lr, #2
    a530:	ldr	r2, [ip]
    a534:	movw	r7, #4812	; 0x12cc
    a538:	str	lr, [sp, #60]	; 0x3c
    a53c:	movt	r7, #2
    a540:	movw	r3, #19992	; 0x4e18
    a544:	mov	r1, #1
    a548:	str	r2, [r5, #-4]
    a54c:	movt	r3, #1
    a550:	ldr	lr, [lr]
    a554:	mvn	r2, #0
    a558:	str	lr, [sp, #20]
    a55c:	ldr	r0, [sp, #20]
    a560:	ldr	lr, [r7]
    a564:	str	r0, [sp]
    a568:	mov	r0, lr
    a56c:	ldr	lr, [sp, #20]
    a570:	b	a358 <__assert_fail@plt+0x1388>
    a574:	movw	r2, #4868	; 0x1304
    a578:	movw	ip, #4872	; 0x1308
    a57c:	movt	r2, #2
    a580:	movt	ip, #2
    a584:	str	r2, [sp, #60]	; 0x3c
    a588:	movw	r7, #4812	; 0x12cc
    a58c:	ldr	lr, [ip]
    a590:	movt	r7, #2
    a594:	ldr	r2, [r2]
    a598:	mov	r1, #1
    a59c:	ldr	r0, [r7]
    a5a0:	movw	r3, #19968	; 0x4e00
    a5a4:	str	lr, [sp, #4]
    a5a8:	movt	r3, #1
    a5ac:	str	r2, [sp]
    a5b0:	mvn	r2, #0
    a5b4:	str	ip, [sp, #28]
    a5b8:	bl	8f1c <__sprintf_chk@plt>
    a5bc:	ldr	r0, [r7]
    a5c0:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a5c4:	ldr	r3, [r5, #-52]	; 0xffffffcc
    a5c8:	ldr	ip, [sp, #28]
    a5cc:	ldr	r0, [sp, #60]	; 0x3c
    a5d0:	str	r3, [ip]
    a5d4:	ldr	r3, [r5, #-20]	; 0xffffffec
    a5d8:	str	r3, [r0]
    a5dc:	b	9c98 <__assert_fail@plt+0xcc8>
    a5e0:	ldr	r3, [r5, #-4]
    a5e4:	tst	r3, #2
    a5e8:	beq	a5fc <__assert_fail@plt+0x162c>
    a5ec:	movw	r0, #19904	; 0x4dc0
    a5f0:	movt	r0, #1
    a5f4:	bl	1048c <warn@@Base>
    a5f8:	ldr	r3, [r5, #-4]
    a5fc:	tst	r3, #8
    a600:	beq	a614 <__assert_fail@plt+0x1644>
    a604:	movw	r0, #19940	; 0x4de4
    a608:	movt	r0, #1
    a60c:	bl	103c0 <__assert_fail@plt+0x73f0>
    a610:	ldr	r3, [r5, #-4]
    a614:	ldr	r2, [r5, #-28]	; 0xffffffe4
    a618:	tst	r3, #16
    a61c:	movw	r7, #4812	; 0x12cc
    a620:	movt	r7, #2
    a624:	movwne	r3, #19968	; 0x4e00
    a628:	movweq	r3, #19980	; 0x4e0c
    a62c:	str	r2, [sp]
    a630:	movne	r1, #1
    a634:	ldr	ip, [r5, #-16]
    a638:	movtne	r3, #1
    a63c:	ldr	r0, [r7]
    a640:	moveq	r1, #1
    a644:	movteq	r3, #1
    a648:	mvn	r2, #0
    a64c:	str	ip, [sp, #4]
    a650:	bl	8f1c <__sprintf_chk@plt>
    a654:	b	a36c <__assert_fail@plt+0x139c>
    a658:	ldr	r3, [r5, #-4]
    a65c:	tst	r3, #8
    a660:	beq	a674 <__assert_fail@plt+0x16a4>
    a664:	movw	r0, #19864	; 0x4d98
    a668:	movt	r0, #1
    a66c:	bl	103c0 <__assert_fail@plt+0x73f0>
    a670:	ldr	r3, [r5, #-4]
    a674:	tst	r3, #16
    a678:	beq	a688 <__assert_fail@plt+0x16b8>
    a67c:	movw	r0, #30484	; 0x7714
    a680:	movt	r0, #1
    a684:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a688:	movw	r9, #4880	; 0x1310
    a68c:	movt	r9, #2
    a690:	movw	ip, #4872	; 0x1308
    a694:	movt	ip, #2
    a698:	ldr	r2, [r9]
    a69c:	movw	r7, #4812	; 0x12cc
    a6a0:	movt	r7, #2
    a6a4:	movw	r3, #19892	; 0x4db4
    a6a8:	add	r1, r2, #1
    a6ac:	str	r1, [r9]
    a6b0:	str	r2, [r5, #-4]
    a6b4:	movt	r3, #1
    a6b8:	ldr	ip, [ip]
    a6bc:	mov	r1, #1
    a6c0:	ldr	r0, [r7]
    a6c4:	str	r2, [sp]
    a6c8:	mvn	r2, #0
    a6cc:	str	ip, [sp, #4]
    a6d0:	bl	8f1c <__sprintf_chk@plt>
    a6d4:	ldr	r0, [r7]
    a6d8:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a6dc:	ldr	lr, [r9]
    a6e0:	movw	ip, #4868	; 0x1304
    a6e4:	movt	ip, #2
    a6e8:	add	r2, lr, #1
    a6ec:	ldr	r0, [r7]
    a6f0:	mov	r1, #1
    a6f4:	str	lr, [sp]
    a6f8:	movw	r3, #20084	; 0x4e74
    a6fc:	str	r2, [r9]
    a700:	movt	r3, #1
    a704:	ldr	r9, [ip]
    a708:	mvn	r2, #0
    a70c:	str	lr, [ip]
    a710:	bl	8f1c <__sprintf_chk@plt>
    a714:	ldr	r0, [r7]
    a718:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a71c:	b	9c98 <__assert_fail@plt+0xcc8>
    a720:	ldr	r3, [r5, #-4]
    a724:	tst	r3, #2
    a728:	beq	a73c <__assert_fail@plt+0x176c>
    a72c:	movw	r0, #19800	; 0x4d58
    a730:	movt	r0, #1
    a734:	bl	1048c <warn@@Base>
    a738:	ldr	r3, [r5, #-4]
    a73c:	tst	r3, #8
    a740:	beq	a754 <__assert_fail@plt+0x1784>
    a744:	movw	r0, #19836	; 0x4d7c
    a748:	movt	r0, #1
    a74c:	bl	103c0 <__assert_fail@plt+0x73f0>
    a750:	ldr	r3, [r5, #-4]
    a754:	tst	r3, #16
    a758:	bne	a768 <__assert_fail@plt+0x1798>
    a75c:	movw	r0, #30204	; 0x75fc
    a760:	movt	r0, #1
    a764:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a768:	movw	r2, #4880	; 0x1310
    a76c:	movt	r2, #2
    a770:	movw	r7, #4812	; 0x12cc
    a774:	movw	r3, #20084	; 0x4e74
    a778:	ldr	ip, [r2]
    a77c:	mov	r1, #1
    a780:	movt	r7, #2
    a784:	movt	r3, #1
    a788:	add	r0, ip, r1
    a78c:	str	r0, [r2]
    a790:	str	ip, [r5, #-4]
    a794:	b	a3a4 <__assert_fail@plt+0x13d4>
    a798:	movw	r3, #4872	; 0x1308
    a79c:	movt	r3, #2
    a7a0:	movw	r2, #4880	; 0x1310
    a7a4:	movt	r2, #2
    a7a8:	ldr	r1, [r3]
    a7ac:	str	r1, [r5]
    a7b0:	ldr	r1, [r2]
    a7b4:	add	r0, r1, #1
    a7b8:	str	r0, [r2]
    a7bc:	str	r1, [r3]
    a7c0:	b	9c98 <__assert_fail@plt+0xcc8>
    a7c4:	ldr	r3, [r5, #-4]
    a7c8:	movw	r7, #4812	; 0x12cc
    a7cc:	movt	r7, #2
    a7d0:	cmp	r3, #0
    a7d4:	blt	b174 <__assert_fail@plt+0x21a4>
    a7d8:	str	r3, [sp]
    a7dc:	mov	r1, #1
    a7e0:	mvn	r2, #0
    a7e4:	ldr	r0, [r7]
    a7e8:	movw	r3, #20968	; 0x51e8
    a7ec:	movt	r3, #1
    a7f0:	bl	8f1c <__sprintf_chk@plt>
    a7f4:	ldr	r0, [r7]
    a7f8:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a7fc:	ldrb	r3, [r5]
    a800:	ldr	r0, [r7]
    a804:	mov	r1, #1
    a808:	cmp	r3, #43	; 0x2b
    a80c:	mvn	r2, #0
    a810:	ldreq	ip, [r5, #-4]
    a814:	movweq	r3, #21000	; 0x5208
    a818:	ldrne	ip, [r5, #-4]
    a81c:	movwne	r3, #21008	; 0x5210
    a820:	movteq	r3, #1
    a824:	movtne	r3, #1
    a828:	str	ip, [sp]
    a82c:	bl	8f1c <__sprintf_chk@plt>
    a830:	b	9f6c <__assert_fail@plt+0xf9c>
    a834:	ldr	r2, [r5]
    a838:	movw	r7, #4812	; 0x12cc
    a83c:	ldrb	r3, [r5, #-4]
    a840:	movt	r7, #2
    a844:	cmp	r2, #0
    a848:	blt	b118 <__assert_fail@plt+0x2148>
    a84c:	cmp	r3, #43	; 0x2b
    a850:	str	r2, [sp]
    a854:	mov	r1, #1
    a858:	movweq	r3, #20952	; 0x51d8
    a85c:	ldreq	r0, [r7]
    a860:	movwne	r3, #20964	; 0x51e4
    a864:	ldrne	r0, [r7]
    a868:	movteq	r3, #1
    a86c:	str	r2, [sp, #4]
    a870:	movtne	r3, #1
    a874:	mvn	r2, #0
    a878:	bl	8f1c <__sprintf_chk@plt>
    a87c:	b	9f6c <__assert_fail@plt+0xf9c>
    a880:	ldr	r3, [r5, #-4]
    a884:	tst	r3, #8
    a888:	beq	a898 <__assert_fail@plt+0x18c8>
    a88c:	movw	r0, #21048	; 0x5238
    a890:	movt	r0, #1
    a894:	bl	103c0 <__assert_fail@plt+0x73f0>
    a898:	movw	r0, #21076	; 0x5254
    a89c:	movt	r0, #1
    a8a0:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a8a4:	mov	r9, #1
    a8a8:	b	9c98 <__assert_fail@plt+0xcc8>
    a8ac:	mov	r1, #2
    a8b0:	ldr	r0, [r5, #-12]
    a8b4:	bl	10740 <warn@@Base+0x2b4>
    a8b8:	movw	r3, #4928	; 0x1340
    a8bc:	movt	r3, #2
    a8c0:	movw	r7, #4812	; 0x12cc
    a8c4:	ldr	r3, [r3]
    a8c8:	rsb	r1, r0, r0, lsl #3
    a8cc:	mov	r2, r0
    a8d0:	ldr	r0, [r5, #-4]
    a8d4:	add	r3, r3, r1, lsl #2
    a8d8:	ldrb	r9, [r3, #1]
    a8dc:	cmp	r9, #0
    a8e0:	moveq	r9, #1
    a8e4:	movne	r9, #8
    a8e8:	cmp	r0, #0
    a8ec:	beq	b1fc <__assert_fail@plt+0x222c>
    a8f0:	str	r2, [sp, #28]
    a8f4:	bl	101a0 <__assert_fail@plt+0x71d0>
    a8f8:	movt	r7, #2
    a8fc:	str	r0, [sp, #24]
    a900:	bl	8ef8 <strlen@plt>
    a904:	add	r0, r0, #20
    a908:	bl	10254 <__assert_fail@plt+0x7284>
    a90c:	ldr	r3, [sp, #24]
    a910:	ldr	r2, [sp, #28]
    a914:	mov	r1, #1
    a918:	ldr	r0, [r7]
    a91c:	str	r3, [sp, #4]
    a920:	movw	r3, #20912	; 0x51b0
    a924:	str	r2, [sp]
    a928:	movt	r3, #1
    a92c:	mvn	r2, #0
    a930:	bl	8f1c <__sprintf_chk@plt>
    a934:	ldr	r0, [r5, #-4]
    a938:	bl	fa80 <__assert_fail@plt+0x6ab0>
    a93c:	b	a36c <__assert_fail@plt+0x139c>
    a940:	ldr	r9, [r5, #-4]
    a944:	tst	r9, #8
    a948:	beq	a95c <__assert_fail@plt+0x198c>
    a94c:	movw	r0, #20880	; 0x5190
    a950:	movt	r0, #1
    a954:	bl	103c0 <__assert_fail@plt+0x73f0>
    a958:	ldr	r9, [r5, #-4]
    a95c:	orr	r9, r9, #5
    a960:	b	9c98 <__assert_fail@plt+0xcc8>
    a964:	ldr	r3, [r5, #-4]
    a968:	tst	r3, #8
    a96c:	beq	a97c <__assert_fail@plt+0x19ac>
    a970:	movw	r0, #21016	; 0x5218
    a974:	movt	r0, #1
    a978:	bl	103c0 <__assert_fail@plt+0x73f0>
    a97c:	movw	r0, #21044	; 0x5234
    a980:	movt	r0, #1
    a984:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a988:	mov	r9, #1
    a98c:	b	9c98 <__assert_fail@plt+0xcc8>
    a990:	ldr	r0, [r5]
    a994:	mov	r1, #0
    a998:	b	a408 <__assert_fail@plt+0x1438>
    a99c:	ldr	r7, [r5, #-16]
    a9a0:	mov	r1, #1
    a9a4:	ldr	r0, [r5, #-8]
    a9a8:	bl	10740 <warn@@Base+0x2b4>
    a9ac:	mov	r2, #0
    a9b0:	mov	r1, r0
    a9b4:	mov	r0, r7
    a9b8:	bl	1003c <__assert_fail@plt+0x706c>
    a9bc:	mov	r9, r0
    a9c0:	b	9c98 <__assert_fail@plt+0xcc8>
    a9c4:	ldr	r7, [r5, #-8]
    a9c8:	mov	r1, #0
    a9cc:	ldr	r0, [r5]
    a9d0:	b	a9a8 <__assert_fail@plt+0x19d8>
    a9d4:	movw	r0, #29948	; 0x74fc
    a9d8:	movt	r0, #1
    a9dc:	bl	faa4 <__assert_fail@plt+0x6ad4>
    a9e0:	movw	r3, #4444	; 0x115c
    a9e4:	movt	r3, #2
    a9e8:	ldr	r3, [r3]
    a9ec:	cmn	r3, #1
    a9f0:	bne	9ea4 <__assert_fail@plt+0xed4>
    a9f4:	movw	r0, #20232	; 0x4f08
    a9f8:	movt	r0, #1
    a9fc:	bl	103c0 <__assert_fail@plt+0x73f0>
    aa00:	mov	r9, #0
    aa04:	b	9c98 <__assert_fail@plt+0xcc8>
    aa08:	movw	r7, #4812	; 0x12cc
    aa0c:	movt	r7, #2
    aa10:	mov	r1, #1
    aa14:	ldr	r0, [r5, #-8]
    aa18:	ldr	r9, [r7]
    aa1c:	bl	10740 <warn@@Base+0x2b4>
    aa20:	mov	r1, #1
    aa24:	mvn	r2, #0
    aa28:	movw	r3, #20188	; 0x4edc
    aa2c:	movt	r3, #1
    aa30:	rsb	ip, r0, #0
    aa34:	mov	r0, r9
    aa38:	str	ip, [sp]
    aa3c:	bl	8f1c <__sprintf_chk@plt>
    aa40:	ldr	r0, [r7]
    aa44:	bl	faa4 <__assert_fail@plt+0x6ad4>
    aa48:	ldr	r0, [r5, #-16]
    aa4c:	mov	r1, #1
    aa50:	mov	r2, #0
    aa54:	bl	1003c <__assert_fail@plt+0x706c>
    aa58:	mov	r9, r0
    aa5c:	b	9c98 <__assert_fail@plt+0xcc8>
    aa60:	ldr	r3, [r5]
    aa64:	tst	r3, #2
    aa68:	beq	aa7c <__assert_fail@plt+0x1aac>
    aa6c:	movw	r0, #20148	; 0x4eb4
    aa70:	movt	r0, #1
    aa74:	bl	1048c <warn@@Base>
    aa78:	ldr	r3, [r5]
    aa7c:	tst	r3, #8
    aa80:	beq	aa90 <__assert_fail@plt+0x1ac0>
    aa84:	movw	r0, #20172	; 0x4ecc
    aa88:	movt	r0, #1
    aa8c:	bl	103c0 <__assert_fail@plt+0x73f0>
    aa90:	mov	r1, #0
    aa94:	ldr	r0, [r5, #-8]
    aa98:	mov	r2, r1
    aa9c:	bl	1003c <__assert_fail@plt+0x706c>
    aaa0:	mov	r9, r0
    aaa4:	b	9c98 <__assert_fail@plt+0xcc8>
    aaa8:	movw	r0, #20196	; 0x4ee4
    aaac:	movt	r0, #1
    aab0:	bl	1048c <warn@@Base>
    aab4:	mov	r9, #16
    aab8:	b	9c98 <__assert_fail@plt+0xcc8>
    aabc:	movw	r7, #4812	; 0x12cc
    aac0:	movt	r7, #2
    aac4:	mov	r1, #1
    aac8:	ldr	r0, [r5, #-8]
    aacc:	ldr	r9, [r7]
    aad0:	bl	10740 <warn@@Base+0x2b4>
    aad4:	mov	r1, #1
    aad8:	mvn	r2, #0
    aadc:	movw	r3, #20188	; 0x4edc
    aae0:	movt	r3, #1
    aae4:	rsb	ip, r0, #0
    aae8:	mov	r0, r9
    aaec:	str	ip, [sp]
    aaf0:	bl	8f1c <__sprintf_chk@plt>
    aaf4:	ldr	r0, [r7]
    aaf8:	bl	faa4 <__assert_fail@plt+0x6ad4>
    aafc:	mov	r0, #0
    ab00:	mov	r2, r0
    ab04:	mov	r1, #1
    ab08:	bl	1003c <__assert_fail@plt+0x706c>
    ab0c:	mov	r9, r0
    ab10:	b	9c98 <__assert_fail@plt+0xcc8>
    ab14:	ldr	r3, [r5]
    ab18:	tst	r3, #2
    ab1c:	beq	ab30 <__assert_fail@plt+0x1b60>
    ab20:	movw	r0, #20148	; 0x4eb4
    ab24:	movt	r0, #1
    ab28:	bl	1048c <warn@@Base>
    ab2c:	ldr	r3, [r5]
    ab30:	tst	r3, #8
    ab34:	beq	ab44 <__assert_fail@plt+0x1b74>
    ab38:	movw	r0, #20172	; 0x4ecc
    ab3c:	movt	r0, #1
    ab40:	bl	103c0 <__assert_fail@plt+0x73f0>
    ab44:	mov	r0, #0
    ab48:	mov	r1, r0
    ab4c:	mov	r2, r0
    ab50:	bl	1003c <__assert_fail@plt+0x706c>
    ab54:	mov	r9, r0
    ab58:	b	9c98 <__assert_fail@plt+0xcc8>
    ab5c:	mov	r9, #1
    ab60:	b	9c98 <__assert_fail@plt+0xcc8>
    ab64:	bl	102a4 <__assert_fail@plt+0x72d4>
    ab68:	mov	r1, #0
    ab6c:	str	r1, [sp, #52]	; 0x34
    ab70:	b	9c98 <__assert_fail@plt+0xcc8>
    ab74:	ldr	r3, [r5, #-4]
    ab78:	tst	r3, #8
    ab7c:	beq	ab90 <__assert_fail@plt+0x1bc0>
    ab80:	movw	r0, #21152	; 0x52a0
    ab84:	movt	r0, #1
    ab88:	bl	103c0 <__assert_fail@plt+0x73f0>
    ab8c:	ldr	r3, [r5, #-4]
    ab90:	tst	r3, #2
    ab94:	beq	aba4 <__assert_fail@plt+0x1bd4>
    ab98:	movw	r0, #21184	; 0x52c0
    ab9c:	movt	r0, #1
    aba0:	bl	1048c <warn@@Base>
    aba4:	ldr	r0, [r5, #-12]
    aba8:	mov	r1, #1
    abac:	bl	10740 <warn@@Base+0x2b4>
    abb0:	mov	r9, r0
    abb4:	b	9c98 <__assert_fail@plt+0xcc8>
    abb8:	movw	r3, #4804	; 0x12c4
    abbc:	movt	r3, #2
    abc0:	ldrb	r9, [r3]
    abc4:	cmp	r9, #0
    abc8:	beq	9c98 <__assert_fail@plt+0xcc8>
    abcc:	movw	r3, #4784	; 0x12b0
    abd0:	movt	r3, #2
    abd4:	ldr	r9, [r3]
    abd8:	cmp	r9, #0
    abdc:	bne	9ea4 <__assert_fail@plt+0xed4>
    abe0:	bl	10b54 <warn@@Base+0x6c8>
    abe4:	bl	10b34 <warn@@Base+0x6a8>
    abe8:	b	9c98 <__assert_fail@plt+0xcc8>
    abec:	movw	r0, #19664	; 0x4cd0
    abf0:	movt	r0, #1
    abf4:	bl	1048c <warn@@Base>
    abf8:	b	9c98 <__assert_fail@plt+0xcc8>
    abfc:	ldr	r9, [r5]
    ac00:	b	9c98 <__assert_fail@plt+0xcc8>
    ac04:	movw	r0, #21268	; 0x5314
    ac08:	movt	r0, #1
    ac0c:	bl	1048c <warn@@Base>
    ac10:	b	9c98 <__assert_fail@plt+0xcc8>
    ac14:	ldr	r3, [r5, #-4]
    ac18:	tst	r3, #8
    ac1c:	beq	ac2c <__assert_fail@plt+0x1c5c>
    ac20:	movw	r0, #21080	; 0x5258
    ac24:	movt	r0, #1
    ac28:	bl	103c0 <__assert_fail@plt+0x73f0>
    ac2c:	movw	r0, #21108	; 0x5274
    ac30:	movt	r0, #1
    ac34:	bl	faa4 <__assert_fail@plt+0x6ad4>
    ac38:	mov	r9, #1
    ac3c:	b	9c98 <__assert_fail@plt+0xcc8>
    ac40:	ldr	r3, [r5]
    ac44:	tst	r3, #8
    ac48:	beq	ac58 <__assert_fail@plt+0x1c88>
    ac4c:	movw	r0, #20836	; 0x5164
    ac50:	movt	r0, #1
    ac54:	bl	103c0 <__assert_fail@plt+0x73f0>
    ac58:	movw	r0, #21124	; 0x5284
    ac5c:	movt	r0, #1
    ac60:	bl	faa4 <__assert_fail@plt+0x6ad4>
    ac64:	ldr	r9, [r5]
    ac68:	bic	r9, r9, #4
    ac6c:	b	9c98 <__assert_fail@plt+0xcc8>
    ac70:	ldr	r3, [r5, #-8]
    ac74:	tst	r3, #8
    ac78:	bne	ac88 <__assert_fail@plt+0x1cb8>
    ac7c:	ldr	r3, [r5]
    ac80:	tst	r3, #8
    ac84:	beq	ac94 <__assert_fail@plt+0x1cc4>
    ac88:	movw	r0, #20808	; 0x5148
    ac8c:	movt	r0, #1
    ac90:	bl	103c0 <__assert_fail@plt+0x73f0>
    ac94:	movw	r0, #20832	; 0x5160
    ac98:	movt	r0, #1
    ac9c:	bl	faa4 <__assert_fail@plt+0x6ad4>
    aca0:	ldr	r9, [r5]
    aca4:	ldr	r3, [r5, #-8]
    aca8:	orr	r9, r9, r3
    acac:	bic	r9, r9, #4
    acb0:	b	9c98 <__assert_fail@plt+0xcc8>
    acb4:	ldr	r3, [r5, #-8]
    acb8:	tst	r3, #8
    acbc:	bne	accc <__assert_fail@plt+0x1cfc>
    acc0:	ldr	r3, [r5]
    acc4:	tst	r3, #8
    acc8:	beq	acd8 <__assert_fail@plt+0x1d08>
    accc:	movw	r0, #20780	; 0x512c
    acd0:	movt	r0, #1
    acd4:	bl	103c0 <__assert_fail@plt+0x73f0>
    acd8:	movw	r0, #20804	; 0x5144
    acdc:	movt	r0, #1
    ace0:	b	ac9c <__assert_fail@plt+0x1ccc>
    ace4:	ldr	r3, [r5, #-8]
    ace8:	tst	r3, #8
    acec:	bne	acfc <__assert_fail@plt+0x1d2c>
    acf0:	ldr	r3, [r5]
    acf4:	tst	r3, #8
    acf8:	beq	ad08 <__assert_fail@plt+0x1d38>
    acfc:	movw	r0, #20752	; 0x5110
    ad00:	movt	r0, #1
    ad04:	bl	103c0 <__assert_fail@plt+0x73f0>
    ad08:	movw	r0, #20776	; 0x5128
    ad0c:	movt	r0, #1
    ad10:	b	ac9c <__assert_fail@plt+0x1ccc>
    ad14:	ldr	r3, [r5, #-8]
    ad18:	tst	r3, #8
    ad1c:	bne	ad2c <__assert_fail@plt+0x1d5c>
    ad20:	ldr	r3, [r5]
    ad24:	tst	r3, #8
    ad28:	beq	ad38 <__assert_fail@plt+0x1d68>
    ad2c:	movw	r0, #20728	; 0x50f8
    ad30:	movt	r0, #1
    ad34:	bl	103c0 <__assert_fail@plt+0x73f0>
    ad38:	movw	r0, #30140	; 0x75bc
    ad3c:	movt	r0, #1
    ad40:	b	ac9c <__assert_fail@plt+0x1ccc>
    ad44:	ldr	r3, [r5, #-8]
    ad48:	tst	r3, #8
    ad4c:	bne	ad5c <__assert_fail@plt+0x1d8c>
    ad50:	ldr	r3, [r5]
    ad54:	tst	r3, #8
    ad58:	beq	ad68 <__assert_fail@plt+0x1d98>
    ad5c:	movw	r0, #20704	; 0x50e0
    ad60:	movt	r0, #1
    ad64:	bl	103c0 <__assert_fail@plt+0x73f0>
    ad68:	movw	r0, #28036	; 0x6d84
    ad6c:	movt	r0, #1
    ad70:	b	ac9c <__assert_fail@plt+0x1ccc>
    ad74:	ldr	r3, [r5, #-8]
    ad78:	tst	r3, #8
    ad7c:	bne	ad8c <__assert_fail@plt+0x1dbc>
    ad80:	ldr	r3, [r5]
    ad84:	tst	r3, #8
    ad88:	beq	ad98 <__assert_fail@plt+0x1dc8>
    ad8c:	movw	r0, #20680	; 0x50c8
    ad90:	movt	r0, #1
    ad94:	bl	103c0 <__assert_fail@plt+0x73f0>
    ad98:	movw	r0, #29128	; 0x71c8
    ad9c:	movt	r0, #1
    ada0:	b	ac9c <__assert_fail@plt+0x1ccc>
    ada4:	ldr	r3, [r5, #-8]
    ada8:	tst	r3, #8
    adac:	bne	adbc <__assert_fail@plt+0x1dec>
    adb0:	ldr	r3, [r5]
    adb4:	tst	r3, #8
    adb8:	beq	adc8 <__assert_fail@plt+0x1df8>
    adbc:	movw	r0, #20628	; 0x5094
    adc0:	movt	r0, #1
    adc4:	bl	103c0 <__assert_fail@plt+0x73f0>
    adc8:	ldr	r0, [r5, #-4]
    adcc:	ldrb	r3, [r0]
    add0:	sub	r3, r3, #33	; 0x21
    add4:	cmp	r3, #29
    add8:	ldrls	pc, [pc, r3, lsl #2]
    addc:	b	b07c <__assert_fail@plt+0x20ac>
    ade0:	andeq	fp, r0, r8, lsl #1
    ade4:	andeq	fp, r0, ip, ror r0
    ade8:	andeq	fp, r0, ip, ror r0
    adec:	andeq	fp, r0, ip, ror r0
    adf0:	andeq	fp, r0, ip, ror r0
    adf4:	andeq	fp, r0, ip, ror r0
    adf8:	andeq	fp, r0, ip, ror r0
    adfc:	andeq	fp, r0, ip, ror r0
    ae00:	andeq	fp, r0, ip, ror r0
    ae04:	andeq	fp, r0, ip, ror r0
    ae08:	andeq	fp, r0, ip, ror r0
    ae0c:	andeq	fp, r0, ip, ror r0
    ae10:	andeq	fp, r0, ip, ror r0
    ae14:	andeq	fp, r0, ip, ror r0
    ae18:	andeq	fp, r0, ip, ror r0
    ae1c:	andeq	fp, r0, ip, ror r0
    ae20:	andeq	fp, r0, ip, ror r0
    ae24:	andeq	fp, r0, ip, ror r0
    ae28:	andeq	fp, r0, ip, ror r0
    ae2c:	andeq	fp, r0, ip, ror r0
    ae30:	andeq	fp, r0, ip, ror r0
    ae34:	andeq	fp, r0, ip, ror r0
    ae38:	andeq	fp, r0, ip, ror r0
    ae3c:	andeq	fp, r0, ip, ror r0
    ae40:	andeq	fp, r0, ip, ror r0
    ae44:	andeq	fp, r0, ip, ror r0
    ae48:	andeq	fp, r0, ip, ror r0
    ae4c:	andeq	fp, r0, ip, asr r0
    ae50:	muleq	r0, ip, r0
    ae54:	strheq	fp, [r0], -r0
    ae58:	ldr	r3, [r5]
    ae5c:	tst	r3, #8
    ae60:	beq	ae74 <__assert_fail@plt+0x1ea4>
    ae64:	movw	r0, #20588	; 0x506c
    ae68:	movt	r0, #1
    ae6c:	bl	103c0 <__assert_fail@plt+0x73f0>
    ae70:	ldr	r3, [r5]
    ae74:	movw	r0, #20612	; 0x5084
    ae78:	movt	r0, #1
    ae7c:	bic	r9, r3, #4
    ae80:	bl	1048c <warn@@Base>
    ae84:	movw	r0, #20624	; 0x5090
    ae88:	movt	r0, #1
    ae8c:	bl	faa4 <__assert_fail@plt+0x6ad4>
    ae90:	b	9c98 <__assert_fail@plt+0xcc8>
    ae94:	movw	r0, #20524	; 0x502c
    ae98:	movt	r0, #1
    ae9c:	bl	1048c <warn@@Base>
    aea0:	movw	r2, #4880	; 0x1310
    aea4:	movt	r2, #2
    aea8:	movw	r7, #4812	; 0x12cc
    aeac:	movw	r3, #20536	; 0x5038
    aeb0:	movt	r7, #2
    aeb4:	ldr	ip, [r2]
    aeb8:	movt	r3, #1
    aebc:	b	a394 <__assert_fail@plt+0x13c4>
    aec0:	ldr	r3, [r5, #-12]
    aec4:	tst	r3, #8
    aec8:	bne	aed8 <__assert_fail@plt+0x1f08>
    aecc:	ldr	r3, [r5]
    aed0:	tst	r3, #8
    aed4:	beq	aee4 <__assert_fail@plt+0x1f14>
    aed8:	movw	r0, #20488	; 0x5008
    aedc:	movt	r0, #1
    aee0:	bl	103c0 <__assert_fail@plt+0x73f0>
    aee4:	ldr	ip, [r5, #-8]
    aee8:	movw	r7, #4812	; 0x12cc
    aeec:	movt	r7, #2
    aef0:	movw	r3, #20512	; 0x5020
    aef4:	mov	r1, #1
    aef8:	movt	r3, #1
    aefc:	ldr	r0, [r7]
    af00:	mvn	r2, #0
    af04:	str	ip, [sp]
    af08:	str	ip, [sp, #4]
    af0c:	bl	8f1c <__sprintf_chk@plt>
    af10:	ldr	r0, [r7]
    af14:	bl	faa4 <__assert_fail@plt+0x6ad4>
    af18:	ldr	r9, [r5]
    af1c:	ldr	r3, [r5, #-12]
    af20:	orr	r9, r9, r3
    af24:	bic	r9, r9, #4
    af28:	b	9c98 <__assert_fail@plt+0xcc8>
    af2c:	movw	r0, #20468	; 0x4ff4
    af30:	movt	r0, #1
    af34:	bl	1048c <warn@@Base>
    af38:	movw	r2, #4880	; 0x1310
    af3c:	movt	r2, #2
    af40:	movw	r7, #4812	; 0x12cc
    af44:	movw	r3, #20480	; 0x5000
    af48:	movt	r7, #2
    af4c:	ldr	ip, [r2]
    af50:	movt	r3, #1
    af54:	b	a394 <__assert_fail@plt+0x13c4>
    af58:	ldr	r3, [r5]
    af5c:	tst	r3, #8
    af60:	beq	af70 <__assert_fail@plt+0x1fa0>
    af64:	movw	r0, #20420	; 0x4fc4
    af68:	movt	r0, #1
    af6c:	bl	103c0 <__assert_fail@plt+0x73f0>
    af70:	ldrb	r3, [r5, #-8]
    af74:	movw	r7, #4812	; 0x12cc
    af78:	movt	r7, #2
    af7c:	cmp	r3, #61	; 0x3d
    af80:	beq	afa8 <__assert_fail@plt+0x1fd8>
    af84:	str	r3, [sp]
    af88:	mov	r1, #1
    af8c:	movw	r3, #27208	; 0x6a48
    af90:	ldr	r0, [r7]
    af94:	movt	r3, #1
    af98:	mvn	r2, #0
    af9c:	bl	8f1c <__sprintf_chk@plt>
    afa0:	ldr	r0, [r7]
    afa4:	bl	faa4 <__assert_fail@plt+0x6ad4>
    afa8:	ldr	r2, [r5, #-12]
    afac:	mov	r1, #1
    afb0:	ldr	r0, [r7]
    afb4:	mov	r9, #0
    afb8:	cmp	r2, #0
    afbc:	rsblt	r2, r2, #0
    afc0:	strge	r2, [sp]
    afc4:	movwlt	r3, #20452	; 0x4fe4
    afc8:	strlt	r2, [sp]
    afcc:	movwge	r3, #20460	; 0x4fec
    afd0:	movtlt	r3, #1
    afd4:	movtge	r3, #1
    afd8:	mvn	r2, #0
    afdc:	bl	8f1c <__sprintf_chk@plt>
    afe0:	ldr	r0, [r7]
    afe4:	bl	faa4 <__assert_fail@plt+0x6ad4>
    afe8:	b	9c98 <__assert_fail@plt+0xcc8>
    afec:	ldr	r3, [r5, #-12]
    aff0:	tst	r3, #8
    aff4:	bne	b004 <__assert_fail@plt+0x2034>
    aff8:	ldr	r3, [r5]
    affc:	tst	r3, #8
    b000:	beq	b010 <__assert_fail@plt+0x2040>
    b004:	movw	r0, #20544	; 0x5040
    b008:	movt	r0, #1
    b00c:	bl	103c0 <__assert_fail@plt+0x73f0>
    b010:	movw	r1, #4880	; 0x1310
    b014:	movt	r1, #2
    b018:	movw	r7, #4812	; 0x12cc
    b01c:	movt	r7, #2
    b020:	ldr	r2, [r1]
    b024:	movw	r3, #20568	; 0x5058
    b028:	ldr	r0, [r7]
    b02c:	movt	r3, #1
    b030:	add	ip, r2, #1
    b034:	str	ip, [r1]
    b038:	ldr	ip, [r5, #-8]
    b03c:	mov	r1, #1
    b040:	str	r2, [sp, #4]
    b044:	str	r2, [sp, #12]
    b048:	mvn	r2, #0
    b04c:	str	ip, [sp]
    b050:	str	ip, [sp, #8]
    b054:	bl	8f1c <__sprintf_chk@plt>
    b058:	b	af10 <__assert_fail@plt+0x1f40>
    b05c:	ldrb	r3, [r0, #1]
    b060:	cmp	r3, #61	; 0x3d
    b064:	movweq	r0, #31388	; 0x7a9c
    b068:	movwne	r0, #20668	; 0x50bc
    b06c:	movteq	r0, #1
    b070:	movtne	r0, #1
    b074:	bl	faa4 <__assert_fail@plt+0x6ad4>
    b078:	ldr	r0, [r5, #-4]
    b07c:	mov	r9, #3
    b080:	bl	8e08 <free@plt>
    b084:	b	9c98 <__assert_fail@plt+0xcc8>
    b088:	movw	r0, #20664	; 0x50b8
    b08c:	movt	r0, #1
    b090:	bl	faa4 <__assert_fail@plt+0x6ad4>
    b094:	ldr	r0, [r5, #-4]
    b098:	b	b07c <__assert_fail@plt+0x20ac>
    b09c:	movw	r0, #20660	; 0x50b4
    b0a0:	movt	r0, #1
    b0a4:	bl	faa4 <__assert_fail@plt+0x6ad4>
    b0a8:	ldr	r0, [r5, #-4]
    b0ac:	b	b07c <__assert_fail@plt+0x20ac>
    b0b0:	ldrb	r3, [r0, #1]
    b0b4:	cmp	r3, #61	; 0x3d
    b0b8:	movweq	r0, #20672	; 0x50c0
    b0bc:	movwne	r0, #20676	; 0x50c4
    b0c0:	movteq	r0, #1
    b0c4:	movtne	r0, #1
    b0c8:	bl	faa4 <__assert_fail@plt+0x6ad4>
    b0cc:	ldr	r0, [r5, #-4]
    b0d0:	b	b07c <__assert_fail@plt+0x20ac>
    b0d4:	movw	r0, #21308	; 0x533c
    b0d8:	movt	r0, #1
    b0dc:	bl	103c0 <__assert_fail@plt+0x73f0>
    b0e0:	mov	r4, #2
    b0e4:	b	9dd4 <__assert_fail@plt+0xe04>
    b0e8:	mov	r4, #0
    b0ec:	b	9dd4 <__assert_fail@plt+0xe04>
    b0f0:	mov	sl, r7
    b0f4:	mov	r4, #1
    b0f8:	b	9dd4 <__assert_fail@plt+0xe04>
    b0fc:	movw	r7, #4812	; 0x12cc
    b100:	movt	r7, #2
    b104:	str	r3, [sp]
    b108:	movw	r3, #19748	; 0x4d24
    b10c:	ldr	r0, [r7]
    b110:	movt	r3, #1
    b114:	b	a454 <__assert_fail@plt+0x1484>
    b118:	cmp	r3, #43	; 0x2b
    b11c:	rsb	r2, r2, #0
    b120:	mov	r1, #1
    b124:	ldreq	r0, [r7]
    b128:	movweq	r3, #20928	; 0x51c0
    b12c:	ldrne	r0, [r7]
    b130:	movwne	r3, #20940	; 0x51cc
    b134:	str	r2, [sp]
    b138:	movteq	r3, #1
    b13c:	str	r2, [sp, #4]
    b140:	movtne	r3, #1
    b144:	mvn	r2, #0
    b148:	bl	8f1c <__sprintf_chk@plt>
    b14c:	b	9f6c <__assert_fail@plt+0xf9c>
    b150:	ldrb	r3, [r7]
    b154:	cmp	r3, #48	; 0x30
    b158:	beq	b230 <__assert_fail@plt+0x2260>
    b15c:	cmp	r3, #49	; 0x31
    b160:	bne	a48c <__assert_fail@plt+0x14bc>
    b164:	movw	r0, #30484	; 0x7714
    b168:	movt	r0, #1
    b16c:	bl	faa4 <__assert_fail@plt+0x6ad4>
    b170:	b	a4ac <__assert_fail@plt+0x14dc>
    b174:	rsb	r2, r3, #0
    b178:	ldr	r0, [r7]
    b17c:	mov	r1, #1
    b180:	str	r2, [sp]
    b184:	movw	r3, #20976	; 0x51f0
    b188:	mvn	r2, #0
    b18c:	movt	r3, #1
    b190:	bl	8f1c <__sprintf_chk@plt>
    b194:	ldr	r0, [r7]
    b198:	bl	faa4 <__assert_fail@plt+0x6ad4>
    b19c:	ldrb	r3, [r5]
    b1a0:	ldr	r0, [r7]
    b1a4:	mov	r1, #1
    b1a8:	cmp	r3, #43	; 0x2b
    b1ac:	mvn	r2, #0
    b1b0:	ldreq	ip, [r5, #-4]
    b1b4:	movweq	r3, #20984	; 0x51f8
    b1b8:	ldrne	ip, [r5, #-4]
    b1bc:	movwne	r3, #20992	; 0x5200
    b1c0:	movteq	r3, #1
    b1c4:	movtne	r3, #1
    b1c8:	rsb	ip, ip, #0
    b1cc:	str	ip, [sp]
    b1d0:	bl	8f1c <__sprintf_chk@plt>
    b1d4:	b	9f6c <__assert_fail@plt+0xf9c>
    b1d8:	rsb	r2, r3, #0
    b1dc:	ldr	r0, [r7]
    b1e0:	movw	r3, #20412	; 0x4fbc
    b1e4:	str	r2, [sp]
    b1e8:	movt	r3, #1
    b1ec:	mov	r1, #1
    b1f0:	mvn	r2, #0
    b1f4:	bl	8f1c <__sprintf_chk@plt>
    b1f8:	b	a36c <__assert_fail@plt+0x139c>
    b1fc:	movt	r7, #2
    b200:	str	r2, [sp]
    b204:	movw	r3, #20920	; 0x51b8
    b208:	mov	r1, #1
    b20c:	ldr	r0, [r7]
    b210:	movt	r3, #1
    b214:	mvn	r2, #0
    b218:	bl	8f1c <__sprintf_chk@plt>
    b21c:	b	a36c <__assert_fail@plt+0x139c>
    b220:	movw	r0, #20232	; 0x4f08
    b224:	movt	r0, #1
    b228:	bl	103c0 <__assert_fail@plt+0x73f0>
    b22c:	b	9c98 <__assert_fail@plt+0xcc8>
    b230:	movw	r0, #29948	; 0x74fc
    b234:	movt	r0, #1
    b238:	bl	faa4 <__assert_fail@plt+0x6ad4>
    b23c:	b	a4ac <__assert_fail@plt+0x14dc>
    b240:	bl	8e44 <__stack_chk_fail@plt>
    b244:	movw	r3, #4696	; 0x1258
    b248:	movt	r3, #2
    b24c:	push	{r4}		; (str r4, [sp, #-4]!)
    b250:	movw	r1, #4832	; 0x12e0
    b254:	ldr	ip, [r3, #20]
    b258:	movt	r1, #2
    b25c:	ldr	r0, [r3, #16]
    b260:	ldr	r4, [r0, ip, lsl #2]
    b264:	ldr	r2, [r4, #8]
    b268:	ldr	r4, [r4, #16]
    b26c:	str	r2, [r1]
    b270:	ldr	r1, [r0, ip, lsl #2]
    b274:	str	r2, [r3, #4]
    b278:	str	r4, [r3, #24]
    b27c:	ldr	r1, [r1]
    b280:	str	r1, [r3, #28]
    b284:	ldrb	r2, [r2]
    b288:	strb	r2, [r3, #32]
    b28c:	pop	{r4}		; (ldr r4, [sp], #4)
    b290:	bx	lr
    b294:	movw	r1, #4664	; 0x1238
    b298:	movt	r1, #2
    b29c:	push	{r3, lr}
    b2a0:	movw	r2, #26924	; 0x692c
    b2a4:	mov	r3, r0
    b2a8:	movt	r2, #1
    b2ac:	ldr	r0, [r1]
    b2b0:	mov	r1, #1
    b2b4:	bl	8f7c <__fprintf_chk@plt>
    b2b8:	mov	r0, #2
    b2bc:	bl	8eec <exit@plt>
    b2c0:	push	{r4, r5, r6, lr}
    b2c4:	movw	r4, #4696	; 0x1258
    b2c8:	movt	r4, #2
    b2cc:	ldr	r5, [r4, #16]
    b2d0:	cmp	r5, #0
    b2d4:	beq	b33c <__assert_fail@plt+0x236c>
    b2d8:	ldr	r3, [r4, #36]	; 0x24
    b2dc:	ldr	r2, [r4, #20]
    b2e0:	sub	r1, r3, #1
    b2e4:	cmp	r1, r2
    b2e8:	pophi	{r4, r5, r6, pc}
    b2ec:	add	r6, r3, #8
    b2f0:	mov	r0, r5
    b2f4:	lsl	r5, r6, #2
    b2f8:	mov	r1, r5
    b2fc:	sub	r5, r5, #32
    b300:	bl	8e50 <realloc@plt>
    b304:	mov	r2, #0
    b308:	str	r6, [r4, #36]	; 0x24
    b30c:	add	r1, r0, r5
    b310:	str	r2, [r0, r5]
    b314:	add	r3, r1, #8
    b318:	str	r0, [r4, #16]
    b31c:	str	r2, [r1, #4]
    b320:	str	r2, [r3], #4
    b324:	str	r2, [r3], #4
    b328:	str	r2, [r3], #4
    b32c:	str	r2, [r3], #4
    b330:	str	r2, [r3], #4
    b334:	str	r2, [r3]
    b338:	pop	{r4, r5, r6, pc}
    b33c:	mov	r0, #4
    b340:	bl	8ea4 <malloc@plt>
    b344:	mov	r3, #1
    b348:	str	r5, [r4, #20]
    b34c:	str	r3, [r4, #36]	; 0x24
    b350:	str	r5, [r0]
    b354:	str	r0, [r4, #16]
    b358:	pop	{r4, r5, r6, pc}
    b35c:	push	{r3, r4, r5, lr}
    b360:	movw	r4, #4696	; 0x1258
    b364:	movt	r4, #2
    b368:	mov	r5, r0
    b36c:	bl	b2c0 <__assert_fail@plt+0x22f0>
    b370:	ldr	r3, [r4, #16]
    b374:	cmp	r3, #0
    b378:	beq	b3cc <__assert_fail@plt+0x23fc>
    b37c:	ldr	r2, [r4, #20]
    b380:	ldr	r1, [r3, r2, lsl #2]
    b384:	add	r0, r3, r2, lsl #2
    b388:	cmp	r1, r5
    b38c:	popeq	{r3, r4, r5, pc}
    b390:	cmp	r1, #0
    b394:	beq	b3b8 <__assert_fail@plt+0x23e8>
    b398:	ldr	r1, [r4, #4]
    b39c:	ldrb	ip, [r4, #32]
    b3a0:	strb	ip, [r1]
    b3a4:	ldr	lr, [r3, r2, lsl #2]
    b3a8:	ldr	ip, [r4, #24]
    b3ac:	str	r1, [lr, #8]
    b3b0:	ldr	r3, [r3, r2, lsl #2]
    b3b4:	str	ip, [r3, #16]
    b3b8:	str	r5, [r0]
    b3bc:	bl	b244 <__assert_fail@plt+0x2274>
    b3c0:	mov	r3, #1
    b3c4:	str	r3, [r4, #40]	; 0x28
    b3c8:	pop	{r3, r4, r5, pc}
    b3cc:	cmp	r5, #0
    b3d0:	popeq	{r3, r4, r5, pc}
    b3d4:	ldr	r0, [r4, #20]
    b3d8:	lsl	r0, r0, #2
    b3dc:	b	b3b8 <__assert_fail@plt+0x23e8>
    b3e0:	push	{r4, lr}
    b3e4:	subs	r4, r0, #0
    b3e8:	popeq	{r4, pc}
    b3ec:	movw	r3, #4696	; 0x1258
    b3f0:	movt	r3, #2
    b3f4:	ldr	r2, [r3, #16]
    b3f8:	cmp	r2, #0
    b3fc:	beq	b414 <__assert_fail@plt+0x2444>
    b400:	ldr	r3, [r3, #20]
    b404:	ldr	r1, [r2, r3, lsl #2]
    b408:	cmp	r4, r1
    b40c:	moveq	r1, #0
    b410:	streq	r1, [r2, r3, lsl #2]
    b414:	ldr	r3, [r4, #20]
    b418:	cmp	r3, #0
    b41c:	bne	b42c <__assert_fail@plt+0x245c>
    b420:	mov	r0, r4
    b424:	pop	{r4, lr}
    b428:	b	8e08 <free@plt>
    b42c:	ldr	r0, [r4, #4]
    b430:	bl	8e08 <free@plt>
    b434:	mov	r0, r4
    b438:	pop	{r4, lr}
    b43c:	b	8e08 <free@plt>
    b440:	cmp	r0, #0
    b444:	push	{r4}		; (str r4, [sp, #-4]!)
    b448:	beq	b49c <__assert_fail@plt+0x24cc>
    b44c:	ldr	r1, [r0, #4]
    b450:	mov	r3, #0
    b454:	movw	r2, #4696	; 0x1258
    b458:	str	r3, [r0, #16]
    b45c:	movt	r2, #2
    b460:	mov	r4, #1
    b464:	strb	r3, [r1]
    b468:	ldr	ip, [r0, #4]
    b46c:	ldr	r1, [r2, #16]
    b470:	strb	r3, [ip, #1]
    b474:	cmp	r1, r3
    b478:	ldr	ip, [r0, #4]
    b47c:	str	r3, [r0, #44]	; 0x2c
    b480:	str	r4, [r0, #28]
    b484:	str	ip, [r0, #8]
    b488:	beq	b49c <__assert_fail@plt+0x24cc>
    b48c:	ldr	r3, [r2, #20]
    b490:	ldr	r3, [r1, r3, lsl #2]
    b494:	cmp	r0, r3
    b498:	beq	b4a4 <__assert_fail@plt+0x24d4>
    b49c:	pop	{r4}		; (ldr r4, [sp], #4)
    b4a0:	bx	lr
    b4a4:	pop	{r4}		; (ldr r4, [sp], #4)
    b4a8:	b	b244 <__assert_fail@plt+0x2274>
    b4ac:	push	{r3, r4, r5, r6, r7, lr}
    b4b0:	mov	r4, r0
    b4b4:	mov	r5, r1
    b4b8:	bl	8f10 <__errno_location@plt>
    b4bc:	mov	r6, r0
    b4c0:	mov	r0, r4
    b4c4:	ldr	r7, [r6]
    b4c8:	bl	b440 <__assert_fail@plt+0x2470>
    b4cc:	movw	r3, #4696	; 0x1258
    b4d0:	movt	r3, #2
    b4d4:	mov	r2, #1
    b4d8:	str	r2, [r4, #40]	; 0x28
    b4dc:	ldr	r2, [r3, #16]
    b4e0:	str	r5, [r4]
    b4e4:	cmp	r2, #0
    b4e8:	beq	b4fc <__assert_fail@plt+0x252c>
    b4ec:	ldr	r3, [r3, #20]
    b4f0:	ldr	r3, [r2, r3, lsl #2]
    b4f4:	cmp	r4, r3
    b4f8:	beq	b50c <__assert_fail@plt+0x253c>
    b4fc:	mov	r2, #1
    b500:	mov	r3, #0
    b504:	str	r2, [r4, #32]
    b508:	str	r3, [r4, #36]	; 0x24
    b50c:	subs	r0, r5, #0
    b510:	beq	b528 <__assert_fail@plt+0x2558>
    b514:	bl	8f70 <fileno@plt>
    b518:	bl	8fb8 <isatty@plt>
    b51c:	cmp	r0, #0
    b520:	movle	r0, #0
    b524:	movgt	r0, #1
    b528:	str	r0, [r4, #24]
    b52c:	str	r7, [r6]
    b530:	pop	{r3, r4, r5, r6, r7, pc}
    b534:	push	{r4, r5, r6, lr}
    b538:	mov	r6, r0
    b53c:	mov	r0, #48	; 0x30
    b540:	mov	r5, r1
    b544:	bl	8ea4 <malloc@plt>
    b548:	subs	r4, r0, #0
    b54c:	beq	b584 <__assert_fail@plt+0x25b4>
    b550:	str	r5, [r4, #12]
    b554:	add	r0, r5, #2
    b558:	bl	8ea4 <malloc@plt>
    b55c:	cmp	r0, #0
    b560:	str	r0, [r4, #4]
    b564:	beq	b584 <__assert_fail@plt+0x25b4>
    b568:	mov	r3, #1
    b56c:	mov	r0, r4
    b570:	mov	r1, r6
    b574:	str	r3, [r4, #20]
    b578:	bl	b4ac <__assert_fail@plt+0x24dc>
    b57c:	mov	r0, r4
    b580:	pop	{r4, r5, r6, pc}
    b584:	movw	r0, #26928	; 0x6930
    b588:	movt	r0, #1
    b58c:	bl	b294 <__assert_fail@plt+0x22c4>
    b590:	push	{r3, r4, r5, r6, r7, lr}
    b594:	movw	r4, #4696	; 0x1258
    b598:	movt	r4, #2
    b59c:	mov	r5, r0
    b5a0:	ldr	r3, [r4, #16]
    b5a4:	cmp	r3, #0
    b5a8:	beq	b5d0 <__assert_fail@plt+0x2600>
    b5ac:	ldr	r2, [r4, #20]
    b5b0:	ldr	r3, [r3, r2, lsl #2]
    b5b4:	cmp	r3, #0
    b5b8:	beq	b5d0 <__assert_fail@plt+0x2600>
    b5bc:	mov	r0, r3
    b5c0:	mov	r1, r5
    b5c4:	bl	b4ac <__assert_fail@plt+0x24dc>
    b5c8:	pop	{r3, r4, r5, r6, r7, lr}
    b5cc:	b	b244 <__assert_fail@plt+0x2274>
    b5d0:	bl	b2c0 <__assert_fail@plt+0x22f0>
    b5d4:	ldr	r0, [r4, #28]
    b5d8:	mov	r1, #16384	; 0x4000
    b5dc:	ldr	r7, [r4, #20]
    b5e0:	ldr	r6, [r4, #16]
    b5e4:	bl	b534 <__assert_fail@plt+0x2564>
    b5e8:	ldr	r3, [r4, #16]
    b5ec:	movw	r2, #4696	; 0x1258
    b5f0:	movt	r2, #2
    b5f4:	cmp	r3, #0
    b5f8:	str	r0, [r6, r7, lsl #2]
    b5fc:	beq	b5bc <__assert_fail@plt+0x25ec>
    b600:	ldr	r2, [r2, #20]
    b604:	mov	r1, r5
    b608:	ldr	r0, [r3, r2, lsl #2]
    b60c:	bl	b4ac <__assert_fail@plt+0x24dc>
    b610:	pop	{r3, r4, r5, r6, r7, lr}
    b614:	b	b244 <__assert_fail@plt+0x2274>
    b618:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b61c:	movw	r5, #4696	; 0x1258
    b620:	movt	r5, #2
    b624:	movw	r7, #4832	; 0x12e0
    b628:	movt	r7, #2
    b62c:	ldr	r9, [r5, #16]
    b630:	ldr	r4, [r5, #20]
    b634:	ldr	r2, [r5, #24]
    b638:	ldr	r0, [r5, #4]
    b63c:	ldr	r3, [r9, r4, lsl #2]
    b640:	add	r2, r2, #1
    b644:	add	r8, r9, r4, lsl #2
    b648:	ldr	ip, [r7]
    b64c:	ldr	r1, [r3, #4]
    b650:	add	r2, r1, r2
    b654:	cmp	r0, r2
    b658:	bhi	b964 <__assert_fail@plt+0x2994>
    b65c:	ldr	r2, [r3, #40]	; 0x28
    b660:	cmp	r2, #0
    b664:	bne	b678 <__assert_fail@plt+0x26a8>
    b668:	rsb	r0, ip, r0
    b66c:	cmp	r0, #1
    b670:	movne	r0, #2
    b674:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b678:	rsb	r6, ip, r0
    b67c:	sub	r6, r6, #1
    b680:	cmp	r6, #0
    b684:	ble	b6a4 <__assert_fail@plt+0x26d4>
    b688:	mov	r3, #0
    b68c:	ldrb	r2, [ip, r3]
    b690:	strb	r2, [r1, r3]
    b694:	add	r3, r3, #1
    b698:	cmp	r3, r6
    b69c:	bne	b68c <__assert_fail@plt+0x26bc>
    b6a0:	ldr	r3, [r9, r4, lsl #2]
    b6a4:	ldr	r2, [r3, #44]	; 0x2c
    b6a8:	cmp	r2, #2
    b6ac:	moveq	r2, #0
    b6b0:	streq	r2, [r5, #24]
    b6b4:	streq	r2, [r3, #16]
    b6b8:	bne	b72c <__assert_fail@plt+0x275c>
    b6bc:	cmp	r6, #0
    b6c0:	beq	b838 <__assert_fail@plt+0x2868>
    b6c4:	ldr	r2, [r5, #16]
    b6c8:	mov	ip, #2
    b6cc:	ldr	r1, [r5, #20]
    b6d0:	mov	r0, ip
    b6d4:	mov	r9, #0
    b6d8:	add	r3, r2, r1, lsl #2
    b6dc:	ldr	r1, [r2, r1, lsl #2]
    b6e0:	mov	r2, r1
    b6e4:	str	ip, [r1, #44]	; 0x2c
    b6e8:	b	b800 <__assert_fail@plt+0x2830>
    b6ec:	ldr	r1, [r4, #12]
    b6f0:	mov	r0, r2
    b6f4:	lsl	r3, r1, #1
    b6f8:	cmp	r3, #0
    b6fc:	strgt	r3, [r4, #12]
    b700:	addle	r1, r1, r1, lsr #3
    b704:	strle	r1, [r4, #12]
    b708:	movgt	r1, r3
    b70c:	add	r1, r1, #2
    b710:	bl	8e50 <realloc@plt>
    b714:	cmp	r0, #0
    b718:	str	r0, [r4, #4]
    b71c:	beq	b764 <__assert_fail@plt+0x2794>
    b720:	ldr	r3, [r8]
    b724:	add	r0, r0, sl
    b728:	str	r0, [r5, #4]
    b72c:	ldr	r2, [r3, #12]
    b730:	sub	r2, r2, #1
    b734:	rsb	r2, r6, r2
    b738:	cmp	r2, #0
    b73c:	bgt	b770 <__assert_fail@plt+0x27a0>
    b740:	cmp	r9, #0
    b744:	ldrne	r4, [r8]
    b748:	moveq	r4, r9
    b74c:	ldr	r3, [r4, #20]
    b750:	ldr	r2, [r4, #4]
    b754:	cmp	r3, #0
    b758:	rsb	sl, r2, r0
    b75c:	bne	b6ec <__assert_fail@plt+0x271c>
    b760:	str	r3, [r4, #4]
    b764:	movw	r0, #27028	; 0x6994
    b768:	movt	r0, #1
    b76c:	bl	b294 <__assert_fail@plt+0x22c4>
    b770:	movw	r1, #4668	; 0x123c
    b774:	movt	r1, #2
    b778:	cmp	r2, #8192	; 0x2000
    b77c:	movlt	r4, r2
    b780:	movge	r4, #8192	; 0x2000
    b784:	ldr	r0, [r5, #28]
    b788:	ldr	r2, [r1]
    b78c:	movw	r9, #4696	; 0x1258
    b790:	ldr	r8, [r3, #4]
    b794:	movt	r9, #2
    b798:	cmp	r0, r2
    b79c:	add	r8, r8, r6
    b7a0:	bne	b7bc <__assert_fail@plt+0x27ec>
    b7a4:	b	b85c <__assert_fail@plt+0x288c>
    b7a8:	bl	8f10 <__errno_location@plt>
    b7ac:	ldr	r3, [r0]
    b7b0:	cmp	r3, #4
    b7b4:	bne	b950 <__assert_fail@plt+0x2980>
    b7b8:	ldr	r0, [r9, #28]
    b7bc:	bl	8f70 <fileno@plt>
    b7c0:	mov	r1, r8
    b7c4:	mov	r2, r4
    b7c8:	bl	8df0 <read@plt>
    b7cc:	cmp	r0, #0
    b7d0:	str	r0, [r5, #24]
    b7d4:	blt	b7a8 <__assert_fail@plt+0x27d8>
    b7d8:	mov	r9, r0
    b7dc:	ldr	r1, [r5, #20]
    b7e0:	cmp	r9, #0
    b7e4:	ldr	r2, [r5, #16]
    b7e8:	ldr	r3, [r2, r1, lsl #2]
    b7ec:	str	r9, [r3, #16]
    b7f0:	beq	b6bc <__assert_fail@plt+0x26ec>
    b7f4:	add	r3, r2, r1, lsl #2
    b7f8:	ldr	r2, [r2, r1, lsl #2]
    b7fc:	mov	r0, #0
    b800:	ldr	r1, [r2, #4]
    b804:	add	r6, r6, r9
    b808:	mov	r2, #0
    b80c:	str	r6, [r5, #24]
    b810:	strb	r2, [r1, r6]
    b814:	ldr	ip, [r3]
    b818:	ldr	r1, [r5, #24]
    b81c:	ldr	ip, [ip, #4]
    b820:	add	r1, ip, r1
    b824:	strb	r2, [r1, #1]
    b828:	ldr	r3, [r3]
    b82c:	ldr	r3, [r3, #4]
    b830:	str	r3, [r7]
    b834:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b838:	ldr	r0, [r5, #28]
    b83c:	bl	b590 <__assert_fail@plt+0x25c0>
    b840:	ldr	r1, [r5, #20]
    b844:	ldr	r2, [r5, #16]
    b848:	mov	r0, #1
    b84c:	ldr	r9, [r5, #24]
    b850:	add	r3, r2, r1, lsl #2
    b854:	ldr	r2, [r2, r1, lsl #2]
    b858:	b	b800 <__assert_fail@plt+0x2830>
    b85c:	ldr	r0, [r9, #44]	; 0x2c
    b860:	cmp	r0, #0
    b864:	bne	b8f4 <__assert_fail@plt+0x2924>
    b868:	ldr	r0, [r9, #48]	; 0x30
    b86c:	cmp	r0, #0
    b870:	beq	b878 <__assert_fail@plt+0x28a8>
    b874:	bl	8e08 <free@plt>
    b878:	movw	r0, #15392	; 0x3c20
    b87c:	movt	r0, #1
    b880:	bl	8e74 <readline@plt>
    b884:	movw	fp, #4696	; 0x1258
    b888:	movt	fp, #2
    b88c:	cmp	r0, #0
    b890:	mov	sl, r0
    b894:	str	r0, [r5, #48]	; 0x30
    b898:	streq	r0, [fp, #24]
    b89c:	moveq	r9, r0
    b8a0:	streq	r0, [fp, #44]	; 0x2c
    b8a4:	beq	b7dc <__assert_fail@plt+0x280c>
    b8a8:	str	r0, [fp, #52]	; 0x34
    b8ac:	bl	8ef8 <strlen@plt>
    b8b0:	add	r0, r0, #1
    b8b4:	str	r0, [fp, #44]	; 0x2c
    b8b8:	cmp	r0, #1
    b8bc:	beq	b8d0 <__assert_fail@plt+0x2900>
    b8c0:	mov	r0, sl
    b8c4:	bl	8e14 <add_history@plt>
    b8c8:	ldr	sl, [fp, #52]	; 0x34
    b8cc:	ldr	r0, [fp, #44]	; 0x2c
    b8d0:	add	sl, sl, r0
    b8d4:	movw	r3, #4680	; 0x1248
    b8d8:	movt	r3, #2
    b8dc:	mov	r2, #10
    b8e0:	strb	r2, [sl, #-1]
    b8e4:	ldr	r0, [r3]
    b8e8:	bl	8dfc <fflush@plt>
    b8ec:	ldr	r9, [r5, #44]	; 0x2c
    b8f0:	b	b8f8 <__assert_fail@plt+0x2928>
    b8f4:	mov	r9, r0
    b8f8:	cmp	r4, r9
    b8fc:	bge	b930 <__assert_fail@plt+0x2960>
    b900:	ldr	sl, [r5, #52]	; 0x34
    b904:	mov	r0, r8
    b908:	mov	r2, r4
    b90c:	mov	r1, sl
    b910:	add	sl, sl, r4
    b914:	bl	8f4c <strncpy@plt>
    b918:	rsb	r3, r4, r9
    b91c:	str	sl, [r5, #52]	; 0x34
    b920:	mov	r9, r4
    b924:	str	r3, [r5, #44]	; 0x2c
    b928:	str	r4, [r5, #24]
    b92c:	b	b7dc <__assert_fail@plt+0x280c>
    b930:	mov	r0, r8
    b934:	ldr	r1, [r5, #52]	; 0x34
    b938:	mov	r2, r9
    b93c:	bl	8f4c <strncpy@plt>
    b940:	mov	r3, #0
    b944:	str	r9, [r5, #24]
    b948:	str	r3, [r5, #44]	; 0x2c
    b94c:	b	b7dc <__assert_fail@plt+0x280c>
    b950:	movw	r0, #27072	; 0x69c0
    b954:	movt	r0, #1
    b958:	bl	103c0 <__assert_fail@plt+0x73f0>
    b95c:	mov	r0, #1
    b960:	bl	8eec <exit@plt>
    b964:	movw	r0, #26972	; 0x695c
    b968:	movt	r0, #1
    b96c:	bl	b294 <__assert_fail@plt+0x22c4>
    b970:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b974:	movw	r4, #4696	; 0x1258
    b978:	movt	r4, #2
    b97c:	movw	r9, #4832	; 0x12e0
    b980:	movt	r9, #2
    b984:	mov	r5, r4
    b988:	ldrb	r0, [r4, #32]
    b98c:	movw	r7, #4696	; 0x1258
    b990:	ldr	r6, [r4, #4]
    b994:	movt	r7, #2
    b998:	cmp	r0, #0
    b99c:	movw	r8, #4832	; 0x12e0
    b9a0:	add	r3, r6, #1
    b9a4:	strb	r0, [r6]
    b9a8:	bne	b9fc <__assert_fail@plt+0x2a2c>
    b9ac:	ldr	sl, [r5, #20]
    b9b0:	movt	r8, #2
    b9b4:	ldr	r1, [r5, #16]
    b9b8:	ldr	r2, [r5, #24]
    b9bc:	ldr	r1, [r1, sl, lsl #2]
    b9c0:	ldr	r1, [r1, #4]
    b9c4:	add	r2, r1, r2
    b9c8:	cmp	r6, r2
    b9cc:	bcc	b9fc <__assert_fail@plt+0x2a2c>
    b9d0:	str	r3, [r5, #4]
    b9d4:	ldr	sl, [r9]
    b9d8:	bl	b618 <__assert_fail@plt+0x2648>
    b9dc:	cmp	r0, #1
    b9e0:	beq	ba20 <__assert_fail@plt+0x2a50>
    b9e4:	cmp	r0, #2
    b9e8:	beq	ba18 <__assert_fail@plt+0x2a48>
    b9ec:	cmp	r0, #0
    b9f0:	beq	ba4c <__assert_fail@plt+0x2a7c>
    b9f4:	ldr	r6, [r7, #4]
    b9f8:	ldrb	r0, [r6]
    b9fc:	mov	r3, r6
    ba00:	mov	r2, #0
    ba04:	strb	r2, [r3], #1
    ba08:	ldrb	r2, [r6, #1]
    ba0c:	str	r3, [r4, #4]
    ba10:	strb	r2, [r4, #32]
    ba14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ba18:	ldr	r0, [r5, #28]
    ba1c:	bl	b590 <__assert_fail@plt+0x25c0>
    ba20:	bl	96e4 <__assert_fail@plt+0x714>
    ba24:	movw	r3, #4696	; 0x1258
    ba28:	movt	r3, #2
    ba2c:	cmp	r0, #0
    ba30:	beq	ba60 <__assert_fail@plt+0x2a90>
    ba34:	ldr	r2, [r4, #40]	; 0x28
    ba38:	cmp	r2, #0
    ba3c:	bne	b988 <__assert_fail@plt+0x29b8>
    ba40:	ldr	r0, [r3, #28]
    ba44:	bl	b590 <__assert_fail@plt+0x25c0>
    ba48:	b	b988 <__assert_fail@plt+0x29b8>
    ba4c:	ldr	r3, [r8]
    ba50:	rsb	sl, sl, r6
    ba54:	add	r6, r3, sl
    ba58:	ldrb	r0, [r3, sl]
    ba5c:	b	b9fc <__assert_fail@plt+0x2a2c>
    ba60:	mvn	r0, #0
    ba64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ba68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba6c:	movw	r5, #4696	; 0x1258
    ba70:	movt	r5, #2
    ba74:	sub	sp, sp, #36	; 0x24
    ba78:	ldr	r3, [r5, #56]	; 0x38
    ba7c:	cmp	r3, #0
    ba80:	bne	bb00 <__assert_fail@plt+0x2b30>
    ba84:	ldr	r2, [r5]
    ba88:	mov	r3, #1
    ba8c:	str	r3, [r5, #56]	; 0x38
    ba90:	cmp	r2, #0
    ba94:	ldr	r2, [r5, #28]
    ba98:	streq	r3, [r5]
    ba9c:	movw	r3, #4696	; 0x1258
    baa0:	cmp	r2, #0
    baa4:	movt	r3, #2
    baa8:	movweq	r2, #4672	; 0x1240
    baac:	movteq	r2, #2
    bab0:	ldreq	r2, [r2]
    bab4:	streq	r2, [r3, #28]
    bab8:	movw	r3, #4696	; 0x1258
    babc:	ldr	r2, [r5, #60]	; 0x3c
    bac0:	movt	r3, #2
    bac4:	cmp	r2, #0
    bac8:	movweq	r2, #4680	; 0x1248
    bacc:	movteq	r2, #2
    bad0:	ldreq	r2, [r2]
    bad4:	streq	r2, [r3, #60]	; 0x3c
    bad8:	movw	r3, #4696	; 0x1258
    badc:	ldr	r2, [r5, #16]
    bae0:	movt	r3, #2
    bae4:	cmp	r2, #0
    bae8:	beq	bd60 <__assert_fail@plt+0x2d90>
    baec:	ldr	r3, [r3, #20]
    baf0:	ldr	r3, [r2, r3, lsl #2]
    baf4:	cmp	r3, #0
    baf8:	beq	bd60 <__assert_fail@plt+0x2d90>
    bafc:	bl	b244 <__assert_fail@plt+0x2274>
    bb00:	movw	r9, #21328	; 0x5350
    bb04:	ldr	r0, [r5]
    bb08:	movt	r9, #1
    bb0c:	movw	sl, #29512	; 0x7348
    bb10:	movt	sl, #1
    bb14:	movw	r4, #4832	; 0x12e0
    bb18:	mov	r6, r9
    bb1c:	movt	r4, #2
    bb20:	movw	r8, #4836	; 0x12e4
    bb24:	str	r4, [sp, #12]
    bb28:	movw	ip, #4696	; 0x1258
    bb2c:	movt	r8, #2
    bb30:	movt	ip, #2
    bb34:	movw	r4, #4968	; 0x1368
    bb38:	str	r8, [sp, #16]
    bb3c:	movt	r4, #2
    bb40:	str	ip, [sp, #24]
    bb44:	str	r4, [sp, #28]
    bb48:	ldr	r7, [r5, #4]
    bb4c:	ldrb	r3, [r5, #32]
    bb50:	str	r7, [sp, #20]
    bb54:	strb	r3, [r7]
    bb58:	lsl	r1, r0, #1
    bb5c:	ldr	fp, [r5, #8]
    bb60:	add	r2, r9, r1
    bb64:	ldr	r8, [r5, #12]
    bb68:	add	r2, r2, #2512	; 0x9d0
    bb6c:	ldrh	ip, [r2, #4]
    bb70:	mov	r2, r3
    bb74:	add	r3, r9, r1
    bb78:	ldrb	r4, [r9, r2, lsl #2]
    bb7c:	add	r3, r3, #1024	; 0x400
    bb80:	ldrsh	r3, [r3]
    bb84:	cmp	r3, #0
    bb88:	movne	r8, r7
    bb8c:	movne	fp, r0
    bb90:	b	bbbc <__assert_fail@plt+0x2bec>
    bb94:	add	r3, r6, r1
    bb98:	add	r3, r3, #1648	; 0x670
    bb9c:	ldrsh	r0, [r3, #8]
    bba0:	cmp	r0, #316	; 0x13c
    bba4:	lsl	r1, r0, #1
    bba8:	addge	r4, r6, r4, lsl #2
    bbac:	add	r3, r9, r1
    bbb0:	add	r3, r3, #2512	; 0x9d0
    bbb4:	ldrbge	r4, [r4, #2296]	; 0x8f8
    bbb8:	ldrh	ip, [r3, #4]
    bbbc:	sxtah	ip, r4, ip
    bbc0:	movw	r2, #21328	; 0x5350
    bbc4:	movt	r2, #1
    bbc8:	lsl	ip, ip, #1
    bbcc:	add	r3, r9, ip
    bbd0:	add	r3, r3, #3152	; 0xc50
    bbd4:	add	r3, r3, #4
    bbd8:	ldrsh	r3, [r3]
    bbdc:	cmp	r3, r0
    bbe0:	bne	bb94 <__assert_fail@plt+0x2bc4>
    bbe4:	add	ip, sl, ip
    bbe8:	add	r0, r7, #1
    bbec:	sub	ip, ip, #3808	; 0xee0
    bbf0:	str	r0, [sp, #4]
    bbf4:	movw	r4, #554	; 0x22a
    bbf8:	ldrsh	r0, [ip]
    bbfc:	lsl	r1, r0, #1
    bc00:	add	r2, r2, r1
    bc04:	add	r3, r2, #2512	; 0x9d0
    bc08:	ldrh	ip, [r3, #4]
    bc0c:	sxth	r3, ip
    bc10:	cmp	r3, r4
    bc14:	ldrbne	r2, [r7, #1]
    bc18:	ldrne	r7, [sp, #4]
    bc1c:	bne	bb74 <__assert_fail@plt+0x2ba4>
    bc20:	add	r2, r2, #1024	; 0x400
    bc24:	str	fp, [r5, #8]
    bc28:	ldr	r4, [sp, #4]
    bc2c:	ldrh	r3, [r2]
    bc30:	ldr	fp, [sp, #20]
    bc34:	ldr	r7, [sp, #12]
    bc38:	str	r8, [r5, #12]
    bc3c:	sxth	r3, r3
    bc40:	ldr	r8, [sp, #16]
    bc44:	cmp	r3, #0
    bc48:	str	fp, [r7]
    bc4c:	mov	ip, #0
    bc50:	ldreq	r3, [r5, #8]
    bc54:	ldreq	r4, [r5, #12]
    bc58:	addeq	r3, r9, r3, lsl #1
    bc5c:	rsb	r2, fp, r4
    bc60:	addeq	r3, r3, #1024	; 0x400
    bc64:	str	r2, [r8]
    bc68:	ldrb	r2, [r4]
    bc6c:	ldrsheq	r3, [r3]
    bc70:	str	r4, [r5, #4]
    bc74:	strb	ip, [r4]
    bc78:	strb	r2, [r5, #32]
    bc7c:	cmp	r3, #49	; 0x31
    bc80:	ldrls	pc, [pc, r3, lsl #2]
    bc84:	b	c29c <__assert_fail@plt+0x32cc>
    bc88:	andeq	fp, r0, r0, lsl #27
    bc8c:	andeq	ip, r0, ip, ror r2
    bc90:	andeq	ip, r0, r0, ror r2
    bc94:	andeq	ip, r0, ip, asr #4
    bc98:	andeq	ip, r0, r4, asr #4
    bc9c:	andeq	ip, r0, ip, lsr r2
    bca0:	andeq	ip, r0, r4, lsr r2
    bca4:	andeq	ip, r0, ip, lsr #4
    bca8:	andeq	ip, r0, r4, lsr #4
    bcac:	andeq	ip, r0, ip, lsl r2
    bcb0:	andeq	ip, r0, r4, lsl r2
    bcb4:	andeq	ip, r0, ip, lsl #4
    bcb8:	andeq	ip, r0, r4, lsl #4
    bcbc:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
    bcc0:	strdeq	ip, [r0], -r4
    bcc4:	andeq	ip, r0, ip, ror #3
    bcc8:	andeq	fp, r0, r4, lsr #29
    bccc:	muleq	r0, ip, lr
    bcd0:	muleq	r0, r4, lr
    bcd4:	andeq	fp, r0, ip, lsl #29
    bcd8:	andeq	fp, r0, r4, lsl #29
    bcdc:	andeq	fp, r0, r0, asr sp
    bce0:	andeq	fp, r0, r4, ror lr
    bce4:	andeq	fp, r0, ip, ror #28
    bce8:	andeq	fp, r0, r4, ror #28
    bcec:	andeq	fp, r0, ip, asr lr
    bcf0:	andeq	fp, r0, r4, asr lr
    bcf4:	andeq	fp, r0, r8, lsr #27
    bcf8:	andeq	fp, r0, r0, asr sp
    bcfc:	andeq	fp, r0, r4, lsr lr
    bd00:	andeq	fp, r0, ip, lsr #28
    bd04:	andeq	fp, r0, r0, lsr #27
    bd08:	muleq	r0, ip, pc	; <UNPREDICTABLE>
    bd0c:	muleq	r0, r0, pc	; <UNPREDICTABLE>
    bd10:	andeq	fp, r0, r0, ror pc
    bd14:	andeq	fp, r0, r0, lsr #30
    bd18:	andeq	fp, r0, r0, lsl #30
    bd1c:	andeq	fp, r0, r0, ror #29
    bd20:	andeq	fp, r0, r4, asr #29
    bd24:	andeq	fp, r0, ip, lsr #29
    bd28:	ldrdeq	ip, [r0], -r0
    bd2c:	andeq	ip, r0, r4, asr #32
    bd30:	andeq	ip, r0, r4, lsr #32
    bd34:	andeq	fp, r0, r4, lsr #31
    bd38:	andeq	ip, r0, r0, lsl r1
    bd3c:	ldrdeq	ip, [r0], -r8
    bd40:	andeq	ip, r0, r8, asr #3
    bd44:			; <UNDEFINED> instruction: 0x0000bdb0
    bd48:	andeq	fp, r0, ip, ror lr
    bd4c:	andeq	fp, r0, ip, ror lr
    bd50:	movw	r3, #286	; 0x11e
    bd54:	mov	r0, r3
    bd58:	add	sp, sp, #36	; 0x24
    bd5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd60:	bl	b2c0 <__assert_fail@plt+0x22f0>
    bd64:	ldr	r0, [r5, #28]
    bd68:	mov	r1, #16384	; 0x4000
    bd6c:	ldr	r6, [r5, #20]
    bd70:	ldr	r4, [r5, #16]
    bd74:	bl	b534 <__assert_fail@plt+0x2564>
    bd78:	str	r0, [r4, r6, lsl #2]
    bd7c:	b	bafc <__assert_fail@plt+0x2b2c>
    bd80:	ldr	r3, [r5, #8]
    bd84:	ldrb	r2, [r5, #32]
    bd88:	add	r3, r9, r3, lsl #1
    bd8c:	add	r3, r3, #1024	; 0x400
    bd90:	strb	r2, [r4]
    bd94:	ldr	r4, [r5, #12]
    bd98:	ldrh	r3, [r3]
    bd9c:	b	bc3c <__assert_fail@plt+0x2c6c>
    bda0:	mov	r3, #260	; 0x104
    bda4:	b	bd54 <__assert_fail@plt+0x2d84>
    bda8:	movw	r3, #289	; 0x121
    bdac:	b	bd54 <__assert_fail@plt+0x2d84>
    bdb0:	ldrb	r3, [r5, #32]
    bdb4:	ldr	ip, [r5, #20]
    bdb8:	ldr	r0, [r5, #16]
    bdbc:	ldr	r1, [r7]
    bdc0:	strb	r3, [r4]
    bdc4:	ldr	r3, [r0, ip, lsl #2]
    bdc8:	rsb	r1, r1, r4
    bdcc:	sub	r1, r1, #1
    bdd0:	ldr	r2, [r3, #44]	; 0x2c
    bdd4:	cmp	r2, #0
    bdd8:	beq	c2a8 <__assert_fail@plt+0x32d8>
    bddc:	ldr	r8, [sp, #24]
    bde0:	ldr	r2, [r8, #24]
    bde4:	ldr	r0, [r3, #4]
    bde8:	movw	r8, #4696	; 0x1258
    bdec:	ldr	r3, [r5, #4]
    bdf0:	movt	r8, #2
    bdf4:	add	r2, r0, r2
    bdf8:	cmp	r3, r2
    bdfc:	bls	c2d8 <__assert_fail@plt+0x3308>
    be00:	str	r1, [sp, #8]
    be04:	bl	b618 <__assert_fail@plt+0x2648>
    be08:	ldr	r1, [sp, #8]
    be0c:	cmp	r0, #1
    be10:	beq	c3d4 <__assert_fail@plt+0x3404>
    be14:	cmp	r0, #2
    be18:	beq	c3a0 <__assert_fail@plt+0x33d0>
    be1c:	cmp	r0, #0
    be20:	beq	c44c <__assert_fail@plt+0x347c>
    be24:	ldr	r0, [r8]
    be28:	b	bb48 <__assert_fail@plt+0x2b78>
    be2c:	movw	r3, #259	; 0x103
    be30:	b	bd54 <__assert_fail@plt+0x2d84>
    be34:	ldr	r4, [sp, #12]
    be38:	ldr	r2, [r4]
    be3c:	ldrb	r1, [r2]
    be40:	movw	r3, #4828	; 0x12dc
    be44:	movt	r3, #2
    be48:	strb	r1, [r3]
    be4c:	ldrb	r3, [r2]
    be50:	b	bd54 <__assert_fail@plt+0x2d84>
    be54:	mov	r3, #288	; 0x120
    be58:	b	bd54 <__assert_fail@plt+0x2d84>
    be5c:	movw	r3, #287	; 0x11f
    be60:	b	bd54 <__assert_fail@plt+0x2d84>
    be64:	mov	r3, #284	; 0x11c
    be68:	b	bd54 <__assert_fail@plt+0x2d84>
    be6c:	movw	r3, #291	; 0x123
    be70:	b	bd54 <__assert_fail@plt+0x2d84>
    be74:	mov	r3, #292	; 0x124
    be78:	b	bd54 <__assert_fail@plt+0x2d84>
    be7c:	mov	r3, #0
    be80:	b	bd54 <__assert_fail@plt+0x2d84>
    be84:	movw	r3, #285	; 0x11d
    be88:	b	bd54 <__assert_fail@plt+0x2d84>
    be8c:	movw	r3, #283	; 0x11b
    be90:	b	bd54 <__assert_fail@plt+0x2d84>
    be94:	movw	r3, #282	; 0x11a
    be98:	b	bd54 <__assert_fail@plt+0x2d84>
    be9c:	movw	r3, #277	; 0x115
    bea0:	b	bd54 <__assert_fail@plt+0x2d84>
    bea4:	movw	r3, #281	; 0x119
    bea8:	b	bd54 <__assert_fail@plt+0x2d84>
    beac:	ldr	r4, [sp, #28]
    beb0:	ldr	r0, [r5]
    beb4:	ldr	r3, [r4]
    beb8:	add	r3, r3, #1
    bebc:	str	r3, [r4]
    bec0:	b	bb48 <__assert_fail@plt+0x2b78>
    bec4:	movw	r2, #4968	; 0x1368
    bec8:	movt	r2, #2
    becc:	movw	r3, #258	; 0x102
    bed0:	ldr	r1, [r2]
    bed4:	add	r1, r1, #1
    bed8:	str	r1, [r2]
    bedc:	b	bd54 <__assert_fail@plt+0x2d84>
    bee0:	ldr	ip, [sp, #12]
    bee4:	movw	r2, #4828	; 0x12dc
    bee8:	movt	r2, #2
    beec:	movw	r3, #267	; 0x10b
    bef0:	ldr	r1, [ip]
    bef4:	ldrb	r1, [r1]
    bef8:	strb	r1, [r2]
    befc:	b	bd54 <__assert_fail@plt+0x2d84>
    bf00:	ldr	r8, [sp, #12]
    bf04:	ldr	r0, [r8]
    bf08:	bl	10008 <__assert_fail@plt+0x7038>
    bf0c:	movw	r2, #4828	; 0x12dc
    bf10:	movt	r2, #2
    bf14:	movw	r3, #266	; 0x10a
    bf18:	str	r0, [r2]
    bf1c:	b	bd54 <__assert_fail@plt+0x2d84>
    bf20:	ldrb	ip, [r5, #32]
    bf24:	movw	r3, #4828	; 0x12dc
    bf28:	movt	r3, #2
    bf2c:	mov	r0, #61	; 0x3d
    bf30:	ldr	r6, [sp, #16]
    bf34:	add	r2, fp, #1
    bf38:	strb	r0, [r3]
    bf3c:	rsb	r1, fp, r2
    bf40:	strb	ip, [r4]
    bf44:	mov	r0, #0
    bf48:	ldr	r4, [sp, #12]
    bf4c:	movw	r3, #265	; 0x109
    bf50:	str	r1, [r6]
    bf54:	str	fp, [sp, #20]
    bf58:	str	fp, [r4]
    bf5c:	ldrb	r1, [fp, #1]
    bf60:	str	r2, [r5, #4]
    bf64:	strb	r0, [fp, #1]
    bf68:	strb	r1, [r5, #32]
    bf6c:	b	bd54 <__assert_fail@plt+0x2d84>
    bf70:	ldr	r8, [sp, #12]
    bf74:	movw	r2, #4828	; 0x12dc
    bf78:	movt	r2, #2
    bf7c:	movw	r3, #265	; 0x109
    bf80:	ldr	r1, [r8]
    bf84:	ldrb	r1, [r1]
    bf88:	strb	r1, [r2]
    bf8c:	b	bd54 <__assert_fail@plt+0x2d84>
    bf90:	ldr	r6, [sp, #12]
    bf94:	ldr	r2, [r6]
    bf98:	b	be3c <__assert_fail@plt+0x2e6c>
    bf9c:	movw	r3, #261	; 0x105
    bfa0:	b	bd54 <__assert_fail@plt+0x2d84>
    bfa4:	ldr	r8, [sp, #12]
    bfa8:	ldr	r0, [r8]
    bfac:	bl	10008 <__assert_fail@plt+0x7038>
    bfb0:	ldr	r1, [r8]
    bfb4:	movw	r3, #4828	; 0x12dc
    bfb8:	movt	r3, #2
    bfbc:	str	r0, [r3]
    bfc0:	ldrb	r2, [r1]
    bfc4:	cmp	r2, #0
    bfc8:	addne	r0, r1, #1
    bfcc:	movwne	r3, #4968	; 0x1368
    bfd0:	movne	r1, #0
    bfd4:	movtne	r3, #2
    bfd8:	beq	c010 <__assert_fail@plt+0x3040>
    bfdc:	cmp	r2, #10
    bfe0:	ldreq	r2, [r3]
    bfe4:	addeq	r2, r2, #1
    bfe8:	streq	r2, [r3]
    bfec:	ldrb	r2, [r0, #-1]
    bff0:	cmp	r2, #34	; 0x22
    bff4:	ldrb	r2, [r0], #1
    bff8:	addeq	r1, r1, #1
    bffc:	cmp	r2, #0
    c000:	bne	bfdc <__assert_fail@plt+0x300c>
    c004:	cmp	r1, #2
    c008:	movweq	r3, #262	; 0x106
    c00c:	beq	bd54 <__assert_fail@plt+0x2d84>
    c010:	movw	r0, #27160	; 0x6a18
    c014:	movt	r0, #1
    c018:	bl	103c0 <__assert_fail@plt+0x73f0>
    c01c:	movw	r3, #262	; 0x106
    c020:	b	bd54 <__assert_fail@plt+0x2d84>
    c024:	ldr	r6, [sp, #12]
    c028:	ldr	r0, [r6]
    c02c:	bl	10008 <__assert_fail@plt+0x7038>
    c030:	movw	r2, #4828	; 0x12dc
    c034:	movt	r2, #2
    c038:	movw	r3, #263	; 0x107
    c03c:	str	r0, [r2]
    c040:	b	bd54 <__assert_fail@plt+0x2d84>
    c044:	ldr	r4, [sp, #28]
    c048:	bl	b970 <__assert_fail@plt+0x29a0>
    c04c:	cmp	r0, #42	; 0x2a
    c050:	beq	c07c <__assert_fail@plt+0x30ac>
    c054:	cmn	r0, #1
    c058:	beq	c0a0 <__assert_fail@plt+0x30d0>
    c05c:	cmp	r0, #10
    c060:	bne	c048 <__assert_fail@plt+0x3078>
    c064:	ldr	r3, [r4]
    c068:	add	r3, r3, #1
    c06c:	str	r3, [r4]
    c070:	bl	b970 <__assert_fail@plt+0x29a0>
    c074:	cmp	r0, #42	; 0x2a
    c078:	bne	c054 <__assert_fail@plt+0x3084>
    c07c:	bl	b970 <__assert_fail@plt+0x29a0>
    c080:	cmp	r0, #42	; 0x2a
    c084:	beq	c07c <__assert_fail@plt+0x30ac>
    c088:	cmp	r0, #47	; 0x2f
    c08c:	beq	c0cc <__assert_fail@plt+0x30fc>
    c090:	cmp	r0, #10
    c094:	beq	c064 <__assert_fail@plt+0x3094>
    c098:	cmn	r0, #1
    c09c:	bne	c048 <__assert_fail@plt+0x3078>
    c0a0:	movw	r3, #4664	; 0x1238
    c0a4:	movt	r3, #2
    c0a8:	movw	r0, #27128	; 0x69f8
    c0ac:	mov	r1, #1
    c0b0:	ldr	r3, [r3]
    c0b4:	movt	r0, #1
    c0b8:	mov	r2, #30
    c0bc:	str	r4, [sp, #28]
    c0c0:	bl	8e68 <fwrite@plt>
    c0c4:	ldr	r0, [r5]
    c0c8:	b	bb48 <__assert_fail@plt+0x2b78>
    c0cc:	str	r4, [sp, #28]
    c0d0:	ldr	r0, [r5]
    c0d4:	b	bb48 <__assert_fail@plt+0x2b78>
    c0d8:	ldr	r8, [sp, #12]
    c0dc:	ldr	r3, [r8]
    c0e0:	ldrb	r1, [r3]
    c0e4:	cmp	r1, #31
    c0e8:	bls	c434 <__assert_fail@plt+0x3464>
    c0ec:	cmp	r1, #126	; 0x7e
    c0f0:	movwhi	r0, #27212	; 0x6a4c
    c0f4:	movwls	r0, #27240	; 0x6a68
    c0f8:	movthi	r0, #1
    c0fc:	movtls	r0, #1
    c100:	movls	r1, r3
    c104:	bl	103c0 <__assert_fail@plt+0x73f0>
    c108:	ldr	r0, [r5]
    c10c:	b	bb48 <__assert_fail@plt+0x2b78>
    c110:	ldr	ip, [sp, #12]
    c114:	movw	r5, #4832	; 0x12e0
    c118:	movt	r5, #2
    c11c:	ldr	r4, [ip]
    c120:	mov	r0, r4
    c124:	bl	8ef8 <strlen@plt>
    c128:	sub	r0, r0, #1
    c12c:	ldrb	r3, [r4, r0]
    c130:	cmp	r3, #46	; 0x2e
    c134:	moveq	r3, #0
    c138:	strbeq	r3, [r4, r0]
    c13c:	ldreq	r3, [r5]
    c140:	movne	r3, r4
    c144:	ldrb	r1, [r3]
    c148:	cmp	r1, #48	; 0x30
    c14c:	bne	c2d0 <__assert_fail@plt+0x3300>
    c150:	add	r0, r3, #1
    c154:	mov	r2, r0
    c158:	ldrb	r1, [r0], #1
    c15c:	cmp	r1, #48	; 0x30
    c160:	beq	c154 <__assert_fail@plt+0x3184>
    c164:	cmp	r1, #0
    c168:	movw	r0, #4968	; 0x1368
    c16c:	subeq	r2, r2, #1
    c170:	movt	r0, #2
    c174:	b	c198 <__assert_fail@plt+0x31c8>
    c178:	cmp	r1, #92	; 0x5c
    c17c:	strbne	r1, [r3]
    c180:	addeq	r2, r2, #2
    c184:	addne	r2, r2, #1
    c188:	ldreq	r1, [r0]
    c18c:	addne	r3, r3, #1
    c190:	addeq	r1, r1, #1
    c194:	streq	r1, [r0]
    c198:	ldrb	r1, [r2]
    c19c:	cmp	r1, #0
    c1a0:	bne	c178 <__assert_fail@plt+0x31a8>
    c1a4:	ldr	r4, [sp, #12]
    c1a8:	strb	r1, [r3]
    c1ac:	ldr	r0, [r4]
    c1b0:	bl	10008 <__assert_fail@plt+0x7038>
    c1b4:	movw	r2, #4828	; 0x12dc
    c1b8:	movt	r2, #2
    c1bc:	mov	r3, #264	; 0x108
    c1c0:	str	r0, [r2]
    c1c4:	b	bd54 <__assert_fail@plt+0x2d84>
    c1c8:	ldr	ip, [sp, #12]
    c1cc:	mov	r2, #1
    c1d0:	ldr	r4, [sp, #16]
    c1d4:	ldr	r3, [r5, #60]	; 0x3c
    c1d8:	ldr	r0, [ip]
    c1dc:	ldr	r1, [r4]
    c1e0:	bl	8e68 <fwrite@plt>
    c1e4:	ldr	r0, [r5]
    c1e8:	b	bb48 <__assert_fail@plt+0x2b78>
    c1ec:	mov	r3, #280	; 0x118
    c1f0:	b	bd54 <__assert_fail@plt+0x2d84>
    c1f4:	movw	r3, #279	; 0x117
    c1f8:	b	bd54 <__assert_fail@plt+0x2d84>
    c1fc:	movw	r3, #278	; 0x116
    c200:	b	bd54 <__assert_fail@plt+0x2d84>
    c204:	mov	r3, #276	; 0x114
    c208:	b	bd54 <__assert_fail@plt+0x2d84>
    c20c:	movw	r3, #275	; 0x113
    c210:	b	bd54 <__assert_fail@plt+0x2d84>
    c214:	movw	r3, #274	; 0x112
    c218:	b	bd54 <__assert_fail@plt+0x2d84>
    c21c:	movw	r3, #273	; 0x111
    c220:	b	bd54 <__assert_fail@plt+0x2d84>
    c224:	mov	r3, #272	; 0x110
    c228:	b	bd54 <__assert_fail@plt+0x2d84>
    c22c:	movw	r3, #271	; 0x10f
    c230:	b	bd54 <__assert_fail@plt+0x2d84>
    c234:	movw	r3, #270	; 0x10e
    c238:	b	bd54 <__assert_fail@plt+0x2d84>
    c23c:	movw	r3, #269	; 0x10d
    c240:	b	bd54 <__assert_fail@plt+0x2d84>
    c244:	mov	r3, #268	; 0x10c
    c248:	b	bd54 <__assert_fail@plt+0x2d84>
    c24c:	movw	r2, #4968	; 0x1368
    c250:	movt	r2, #2
    c254:	mov	r0, #1
    c258:	movw	r3, #258	; 0x102
    c25c:	ldr	r1, [r2]
    c260:	str	r0, [r5]
    c264:	add	r1, r1, r0
    c268:	str	r1, [r2]
    c26c:	b	bd54 <__assert_fail@plt+0x2d84>
    c270:	mov	r0, #1
    c274:	str	r0, [r5]
    c278:	b	bb48 <__assert_fail@plt+0x2b78>
    c27c:	movw	r3, #4788	; 0x12b4
    c280:	movt	r3, #2
    c284:	ldr	r3, [r3]
    c288:	cmp	r3, #0
    c28c:	bne	c46c <__assert_fail@plt+0x349c>
    c290:	mov	r0, #3
    c294:	str	r0, [r5]
    c298:	b	bb48 <__assert_fail@plt+0x2b78>
    c29c:	movw	r0, #27264	; 0x6a80
    c2a0:	movt	r0, #1
    c2a4:	bl	b294 <__assert_fail@plt+0x22c4>
    c2a8:	ldr	r8, [sp, #24]
    c2ac:	ldr	r2, [r3, #16]
    c2b0:	ldr	lr, [r8, #28]
    c2b4:	str	r2, [r8, #24]
    c2b8:	str	lr, [r3]
    c2bc:	ldr	r0, [r0, ip, lsl #2]
    c2c0:	mov	ip, #1
    c2c4:	mov	r3, r0
    c2c8:	str	ip, [r0, #44]	; 0x2c
    c2cc:	b	bde4 <__assert_fail@plt+0x2e14>
    c2d0:	mov	r2, r3
    c2d4:	b	c164 <__assert_fail@plt+0x3194>
    c2d8:	ldr	r4, [r7]
    c2dc:	add	r4, r4, r1
    c2e0:	str	r4, [r8, #4]
    c2e4:	bl	8fdc <__assert_fail@plt+0xc>
    c2e8:	lsl	r2, r0, #1
    c2ec:	add	r1, r9, r2
    c2f0:	add	r3, r9, r2
    c2f4:	add	r1, r1, #2512	; 0x9d0
    c2f8:	add	r3, r3, #1024	; 0x400
    c2fc:	add	r1, r1, #4
    c300:	ldrh	r3, [r3]
    c304:	ldrsh	r1, [r1]
    c308:	cmp	r3, #0
    c30c:	strne	r0, [r8, #8]
    c310:	strne	r4, [r8, #12]
    c314:	add	ip, r9, r1, lsl #1
    c318:	add	ip, ip, #3152	; 0xc50
    c31c:	add	ip, ip, #6
    c320:	ldrsh	ip, [ip]
    c324:	cmp	r0, ip
    c328:	beq	c364 <__assert_fail@plt+0x3394>
    c32c:	add	r2, r9, r2
    c330:	add	r2, r2, #1648	; 0x670
    c334:	ldrsh	ip, [r2, #8]
    c338:	lsl	r2, ip, #1
    c33c:	add	r1, r9, r2
    c340:	add	r1, r1, #2512	; 0x9d0
    c344:	add	r1, r1, #4
    c348:	ldrsh	r1, [r1]
    c34c:	add	r0, r9, r1, lsl #1
    c350:	add	r0, r0, #3152	; 0xc50
    c354:	add	r0, r0, #6
    c358:	ldrsh	r0, [r0]
    c35c:	cmp	ip, r0
    c360:	bne	c32c <__assert_fail@plt+0x335c>
    c364:	add	r2, r1, #1
    c368:	movw	r1, #315	; 0x13b
    c36c:	add	r2, sl, r2, lsl #1
    c370:	sub	r2, r2, #3808	; 0xee0
    c374:	ldrsh	r0, [r2]
    c378:	cmp	r0, r1
    c37c:	beq	c42c <__assert_fail@plt+0x345c>
    c380:	cmp	r0, #0
    c384:	ldr	fp, [r7]
    c388:	beq	bc3c <__assert_fail@plt+0x2c6c>
    c38c:	add	r7, r4, #1
    c390:	str	fp, [sp, #20]
    c394:	str	r7, [r5, #4]
    c398:	ldrb	r3, [r7]
    c39c:	b	bb58 <__assert_fail@plt+0x2b88>
    c3a0:	ldr	r1, [r8, #20]
    c3a4:	ldr	r2, [r8, #16]
    c3a8:	ldr	r3, [r8, #24]
    c3ac:	ldr	r2, [r2, r1, lsl #2]
    c3b0:	ldr	r4, [r2, #4]
    c3b4:	add	r4, r4, r3
    c3b8:	str	r4, [r8, #4]
    c3bc:	bl	8fdc <__assert_fail@plt+0xc>
    c3c0:	ldr	fp, [r7]
    c3c4:	add	r0, r9, r0, lsl #1
    c3c8:	add	r3, r0, #1024	; 0x400
    c3cc:	ldrh	r3, [r3]
    c3d0:	b	bc3c <__assert_fail@plt+0x2c6c>
    c3d4:	ldr	ip, [sp, #24]
    c3d8:	mov	r0, #0
    c3dc:	str	r0, [ip, #40]	; 0x28
    c3e0:	bl	96e4 <__assert_fail@plt+0x714>
    c3e4:	cmp	r0, #0
    c3e8:	bne	c410 <__assert_fail@plt+0x3440>
    c3ec:	ldr	ip, [sp, #24]
    c3f0:	ldr	r2, [r7]
    c3f4:	ldr	r3, [ip]
    c3f8:	str	r2, [ip, #4]
    c3fc:	sub	r3, r3, #1
    c400:	add	r3, r3, r3, lsr #31
    c404:	asr	r3, r3, #1
    c408:	add	r3, r3, #48	; 0x30
    c40c:	b	bc7c <__assert_fail@plt+0x2cac>
    c410:	ldr	r3, [r8, #40]	; 0x28
    c414:	cmp	r3, #0
    c418:	bne	be24 <__assert_fail@plt+0x2e54>
    c41c:	ldr	r0, [r8, #28]
    c420:	bl	b590 <__assert_fail@plt+0x25c0>
    c424:	ldr	r0, [r8]
    c428:	b	bb48 <__assert_fail@plt+0x2b78>
    c42c:	ldr	fp, [r7]
    c430:	b	bc3c <__assert_fail@plt+0x2c6c>
    c434:	add	r1, r1, #64	; 0x40
    c438:	movw	r0, #27188	; 0x6a34
    c43c:	movt	r0, #1
    c440:	bl	103c0 <__assert_fail@plt+0x73f0>
    c444:	ldr	r0, [r5]
    c448:	b	bb48 <__assert_fail@plt+0x2b78>
    c44c:	ldr	r4, [sp, #12]
    c450:	ldr	r3, [r4]
    c454:	add	r7, r3, r1
    c458:	str	r7, [r8, #4]
    c45c:	bl	8fdc <__assert_fail@plt+0xc>
    c460:	ldr	r8, [r4]
    c464:	str	r8, [sp, #20]
    c468:	b	c398 <__assert_fail@plt+0x33c8>
    c46c:	movw	r0, #27104	; 0x69e0
    c470:	movt	r0, #1
    c474:	bl	103c0 <__assert_fail@plt+0x73f0>
    c478:	ldr	r0, [r5]
    c47c:	b	bb48 <__assert_fail@plt+0x2b78>
    c480:	push	{r3, r4, r5, lr}
    c484:	subs	r5, r0, #0
    c488:	popeq	{r3, r4, r5, pc}
    c48c:	movw	r4, #4696	; 0x1258
    c490:	movt	r4, #2
    c494:	bl	b2c0 <__assert_fail@plt+0x22f0>
    c498:	ldr	r3, [r4, #16]
    c49c:	cmp	r3, #0
    c4a0:	beq	c500 <__assert_fail@plt+0x3530>
    c4a4:	ldr	r2, [r4, #20]
    c4a8:	ldr	r0, [r3, r2, lsl #2]
    c4ac:	lsl	ip, r2, #2
    c4b0:	add	r1, r3, ip
    c4b4:	cmp	r0, #0
    c4b8:	beq	c4ec <__assert_fail@plt+0x351c>
    c4bc:	ldr	r0, [r4, #4]
    c4c0:	add	r1, ip, #4
    c4c4:	ldrb	lr, [r4, #32]
    c4c8:	add	ip, r2, #1
    c4cc:	add	r1, r3, r1
    c4d0:	str	ip, [r4, #20]
    c4d4:	strb	lr, [r0]
    c4d8:	ldr	lr, [r3, r2, lsl #2]
    c4dc:	ldr	ip, [r4, #24]
    c4e0:	str	r0, [lr, #8]
    c4e4:	ldr	r3, [r3, r2, lsl #2]
    c4e8:	str	ip, [r3, #16]
    c4ec:	str	r5, [r1]
    c4f0:	bl	b244 <__assert_fail@plt+0x2274>
    c4f4:	mov	r3, #1
    c4f8:	str	r3, [r4, #40]	; 0x28
    c4fc:	pop	{r3, r4, r5, pc}
    c500:	ldr	r1, [r4, #20]
    c504:	lsl	r1, r1, #2
    c508:	b	c4ec <__assert_fail@plt+0x351c>
    c50c:	push	{r3, r4, r5, r6, r7, lr}
    c510:	movw	r4, #4696	; 0x1258
    c514:	movt	r4, #2
    c518:	ldr	r6, [r4, #16]
    c51c:	cmp	r6, #0
    c520:	popeq	{r3, r4, r5, r6, r7, pc}
    c524:	ldr	r5, [r4, #20]
    c528:	ldr	r0, [r6, r5, lsl #2]
    c52c:	add	r7, r6, r5, lsl #2
    c530:	cmp	r0, #0
    c534:	popeq	{r3, r4, r5, r6, r7, pc}
    c538:	bl	b3e0 <__assert_fail@plt+0x2410>
    c53c:	cmp	r5, #0
    c540:	mov	r3, #0
    c544:	str	r3, [r6, r5, lsl #2]
    c548:	popeq	{r3, r4, r5, r6, r7, pc}
    c54c:	ldr	r3, [r7, #-4]
    c550:	sub	r5, r5, #1
    c554:	str	r5, [r4, #20]
    c558:	cmp	r3, #0
    c55c:	popeq	{r3, r4, r5, r6, r7, pc}
    c560:	bl	b244 <__assert_fail@plt+0x2274>
    c564:	mov	r3, #1
    c568:	str	r3, [r4, #40]	; 0x28
    c56c:	pop	{r3, r4, r5, r6, r7, pc}
    c570:	cmp	r1, #1
    c574:	push	{r3, r4, r5, r6, r7, lr}
    c578:	mov	r6, r0
    c57c:	bls	c5f0 <__assert_fail@plt+0x3620>
    c580:	sub	r7, r1, #2
    c584:	ldrb	r4, [r0, r7]
    c588:	cmp	r4, #0
    c58c:	bne	c5f0 <__assert_fail@plt+0x3620>
    c590:	add	r1, r0, r1
    c594:	ldrb	r5, [r1, #-1]
    c598:	cmp	r5, #0
    c59c:	bne	c5e8 <__assert_fail@plt+0x3618>
    c5a0:	mov	r0, #48	; 0x30
    c5a4:	bl	8ea4 <malloc@plt>
    c5a8:	subs	r4, r0, #0
    c5ac:	beq	c5f8 <__assert_fail@plt+0x3628>
    c5b0:	mov	r3, #1
    c5b4:	str	r7, [r4, #12]
    c5b8:	str	r6, [r4, #4]
    c5bc:	str	r6, [r4, #8]
    c5c0:	str	r5, [r4, #20]
    c5c4:	str	r5, [r4]
    c5c8:	str	r7, [r4, #16]
    c5cc:	str	r5, [r4, #24]
    c5d0:	str	r5, [r4, #40]	; 0x28
    c5d4:	str	r5, [r4, #44]	; 0x2c
    c5d8:	str	r3, [r4, #28]
    c5dc:	bl	b35c <__assert_fail@plt+0x238c>
    c5e0:	mov	r0, r4
    c5e4:	pop	{r3, r4, r5, r6, r7, pc}
    c5e8:	mov	r0, r4
    c5ec:	pop	{r3, r4, r5, r6, r7, pc}
    c5f0:	mov	r0, #0
    c5f4:	pop	{r3, r4, r5, r6, r7, pc}
    c5f8:	movw	r0, #27316	; 0x6ab4
    c5fc:	movt	r0, #1
    c600:	bl	b294 <__assert_fail@plt+0x22c4>
    c604:	push	{r4, r5, r6, lr}
    c608:	add	r6, r1, #2
    c60c:	mov	r5, r0
    c610:	mov	r4, r1
    c614:	mov	r0, r6
    c618:	bl	8ea4 <malloc@plt>
    c61c:	subs	ip, r0, #0
    c620:	beq	c674 <__assert_fail@plt+0x36a4>
    c624:	cmp	r4, #0
    c628:	movgt	r3, #0
    c62c:	ble	c644 <__assert_fail@plt+0x3674>
    c630:	ldrb	r2, [r5, r3]
    c634:	strb	r2, [ip, r3]
    c638:	add	r3, r3, #1
    c63c:	cmp	r3, r4
    c640:	bne	c630 <__assert_fail@plt+0x3660>
    c644:	add	r2, ip, r4
    c648:	mov	r3, #0
    c64c:	mov	r1, r6
    c650:	mov	r0, ip
    c654:	strb	r3, [r2, #1]
    c658:	mov	r5, #1
    c65c:	strb	r3, [ip, r4]
    c660:	bl	c570 <__assert_fail@plt+0x35a0>
    c664:	subs	r3, r0, #0
    c668:	beq	c680 <__assert_fail@plt+0x36b0>
    c66c:	str	r5, [r3, #20]
    c670:	pop	{r4, r5, r6, pc}
    c674:	movw	r0, #27360	; 0x6ae0
    c678:	movt	r0, #1
    c67c:	bl	b294 <__assert_fail@plt+0x22c4>
    c680:	movw	r0, #27404	; 0x6b0c
    c684:	movt	r0, #1
    c688:	bl	b294 <__assert_fail@plt+0x22c4>
    c68c:	push	{r4, lr}
    c690:	mov	r4, r0
    c694:	bl	8ef8 <strlen@plt>
    c698:	mov	r1, r0
    c69c:	mov	r0, r4
    c6a0:	pop	{r4, lr}
    c6a4:	b	c604 <__assert_fail@plt+0x3634>
    c6a8:	movw	r3, #4448	; 0x1160
    c6ac:	movt	r3, #2
    c6b0:	ldr	r0, [r3]
    c6b4:	bx	lr
    c6b8:	movw	r3, #4696	; 0x1258
    c6bc:	movt	r3, #2
    c6c0:	ldr	r0, [r3, #28]
    c6c4:	bx	lr
    c6c8:	movw	r3, #4696	; 0x1258
    c6cc:	movt	r3, #2
    c6d0:	ldr	r0, [r3, #60]	; 0x3c
    c6d4:	bx	lr
    c6d8:	movw	r3, #4836	; 0x12e4
    c6dc:	movt	r3, #2
    c6e0:	ldr	r0, [r3]
    c6e4:	bx	lr
    c6e8:	movw	r3, #4832	; 0x12e0
    c6ec:	movt	r3, #2
    c6f0:	ldr	r0, [r3]
    c6f4:	bx	lr
    c6f8:	movw	r3, #4448	; 0x1160
    c6fc:	movt	r3, #2
    c700:	str	r0, [r3]
    c704:	bx	lr
    c708:	movw	r3, #4696	; 0x1258
    c70c:	movt	r3, #2
    c710:	str	r0, [r3, #28]
    c714:	bx	lr
    c718:	movw	r3, #4696	; 0x1258
    c71c:	movt	r3, #2
    c720:	str	r0, [r3, #60]	; 0x3c
    c724:	bx	lr
    c728:	movw	r3, #4696	; 0x1258
    c72c:	movt	r3, #2
    c730:	ldr	r0, [r3, #64]	; 0x40
    c734:	bx	lr
    c738:	movw	r3, #4696	; 0x1258
    c73c:	movt	r3, #2
    c740:	str	r0, [r3, #64]	; 0x40
    c744:	bx	lr
    c748:	push	{r3, r4, r5, r6, r7, lr}
    c74c:	movw	r5, #4696	; 0x1258
    c750:	movt	r5, #2
    c754:	ldr	r4, [r5, #16]
    c758:	cmp	r4, #0
    c75c:	beq	c798 <__assert_fail@plt+0x37c8>
    c760:	ldr	r6, [r5, #20]
    c764:	ldr	r0, [r4, r6, lsl #2]
    c768:	add	r6, r4, r6, lsl #2
    c76c:	cmp	r0, #0
    c770:	beq	c798 <__assert_fail@plt+0x37c8>
    c774:	mov	r7, #0
    c778:	bl	b3e0 <__assert_fail@plt+0x2410>
    c77c:	str	r7, [r6]
    c780:	bl	c50c <__assert_fail@plt+0x353c>
    c784:	ldr	r3, [r5, #20]
    c788:	ldr	r0, [r4, r3, lsl #2]
    c78c:	add	r6, r4, r3, lsl #2
    c790:	cmp	r0, #0
    c794:	bne	c778 <__assert_fail@plt+0x37a8>
    c798:	mov	r0, r4
    c79c:	bl	8e08 <free@plt>
    c7a0:	mov	r3, #0
    c7a4:	mov	r0, r3
    c7a8:	str	r3, [r5, #16]
    c7ac:	str	r3, [r5, #20]
    c7b0:	str	r3, [r5, #36]	; 0x24
    c7b4:	str	r3, [r5, #4]
    c7b8:	str	r3, [r5, #56]	; 0x38
    c7bc:	str	r3, [r5]
    c7c0:	str	r3, [r5, #28]
    c7c4:	str	r3, [r5, #60]	; 0x3c
    c7c8:	pop	{r3, r4, r5, r6, r7, pc}
    c7cc:	b	8ea4 <malloc@plt>
    c7d0:	b	8e50 <realloc@plt>
    c7d4:	b	8e08 <free@plt>
    c7d8:	push	{r3, lr}
    c7dc:	bl	96e4 <__assert_fail@plt+0x714>
    c7e0:	rsbs	r0, r0, #1
    c7e4:	movcc	r0, #0
    c7e8:	pop	{r3, pc}
    c7ec:	movw	r3, #4840	; 0x12e8
    c7f0:	movt	r3, #2
    c7f4:	mov	r2, #1
    c7f8:	str	r2, [r3]
    c7fc:	bx	lr
    c800:	movw	r3, #4980	; 0x1374
    c804:	movt	r3, #2
    c808:	movw	r2, #4928	; 0x1340
    c80c:	movt	r2, #2
    c810:	ldr	r1, [r3]
    c814:	ldr	ip, [r2]
    c818:	ldr	r2, [r3, #4]
    c81c:	rsb	r1, r1, r1, lsl #3
    c820:	add	r0, r2, #1
    c824:	add	r1, ip, r1, lsl #2
    c828:	ldr	r1, [r1, #4]
    c82c:	str	r0, [r3, #4]
    c830:	ldrb	r0, [r1, r2]
    c834:	bx	lr
    c838:	push	{r3, r4, r5, lr}
    c83c:	movw	r5, #4672	; 0x1240
    c840:	movt	r5, #2
    c844:	ldr	r0, [r5]
    c848:	bl	8e38 <_IO_getc@plt>
    c84c:	cmp	r0, #92	; 0x5c
    c850:	mov	r4, r0
    c854:	beq	c8cc <__assert_fail@plt+0x38fc>
    c858:	bl	8ee0 <__ctype_b_loc@plt>
    c85c:	lsl	r3, r4, #1
    c860:	ldr	r2, [r0]
    c864:	ldrh	r3, [r2, r3]
    c868:	tst	r3, #2048	; 0x800
    c86c:	bne	c8b4 <__assert_fail@plt+0x38e4>
    c870:	sub	r3, r4, #65	; 0x41
    c874:	cmp	r3, #5
    c878:	bls	c8ac <__assert_fail@plt+0x38dc>
    c87c:	sub	r3, r4, #97	; 0x61
    c880:	cmp	r3, #5
    c884:	bls	c8c4 <__assert_fail@plt+0x38f4>
    c888:	cmp	r4, #46	; 0x2e
    c88c:	cmpne	r4, #43	; 0x2b
    c890:	beq	c8bc <__assert_fail@plt+0x38ec>
    c894:	cmp	r4, #45	; 0x2d
    c898:	beq	c8bc <__assert_fail@plt+0x38ec>
    c89c:	cmp	r4, #32
    c8a0:	movgt	r0, #58	; 0x3a
    c8a4:	movle	r0, #32
    c8a8:	pop	{r3, r4, r5, pc}
    c8ac:	sub	r0, r4, #55	; 0x37
    c8b0:	pop	{r3, r4, r5, pc}
    c8b4:	sub	r0, r4, #48	; 0x30
    c8b8:	pop	{r3, r4, r5, pc}
    c8bc:	mov	r0, r4
    c8c0:	pop	{r3, r4, r5, pc}
    c8c4:	sub	r0, r4, #87	; 0x57
    c8c8:	pop	{r3, r4, r5, pc}
    c8cc:	ldr	r0, [r5]
    c8d0:	bl	8e38 <_IO_getc@plt>
    c8d4:	cmp	r0, #10
    c8d8:	mov	r4, r0
    c8dc:	bne	c858 <__assert_fail@plt+0x3888>
    c8e0:	ldr	r0, [r5]
    c8e4:	bl	8e38 <_IO_getc@plt>
    c8e8:	movw	r3, #4976	; 0x1370
    c8ec:	movt	r3, #2
    c8f0:	mov	r2, #0
    c8f4:	str	r2, [r3]
    c8f8:	mov	r4, r0
    c8fc:	b	c858 <__assert_fail@plt+0x3888>
    c900:	ldr	r1, [r0]
    c904:	movw	r3, #4928	; 0x1340
    c908:	movt	r3, #2
    c90c:	ldr	r2, [r0, #4]
    c910:	ldr	r3, [r3]
    c914:	rsb	r1, r1, r1, lsl #3
    c918:	add	ip, r2, #1
    c91c:	add	r1, r3, r1, lsl #2
    c920:	ldr	r3, [r1, #4]
    c924:	str	ip, [r0, #4]
    c928:	ldrb	r0, [r3, r2]
    c92c:	bx	lr
    c930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c934:	movw	r8, #4648	; 0x1228
    c938:	movt	r8, #2
    c93c:	sub	sp, sp, #36	; 0x24
    c940:	mov	r5, r0
    c944:	add	r0, sp, #12
    c948:	ldr	r3, [r8]
    c94c:	mov	r6, r1
    c950:	movw	r9, #5008	; 0x1390
    c954:	movt	r9, #2
    c958:	str	r3, [sp, #28]
    c95c:	bl	115e0 <warn@@Base+0x1154>
    c960:	add	r0, sp, #16
    c964:	bl	115e0 <warn@@Base+0x1154>
    c968:	add	r0, sp, #20
    c96c:	bl	115e0 <warn@@Base+0x1154>
    c970:	ldr	r0, [r9]
    c974:	bl	115d0 <warn@@Base+0x1144>
    c978:	mov	r1, r6
    c97c:	str	r0, [sp, #8]
    c980:	add	r0, sp, #20
    c984:	bl	12cdc <warn@@Base+0x2850>
    c988:	blx	r5
    c98c:	cmp	r0, #32
    c990:	mov	r4, r0
    c994:	beq	c988 <__assert_fail@plt+0x39b8>
    c998:	cmp	r0, #43	; 0x2b
    c99c:	beq	cba0 <__assert_fail@plt+0x3bd0>
    c9a0:	cmp	r0, #45	; 0x2d
    c9a4:	movne	sl, #0
    c9a8:	beq	cbb0 <__assert_fail@plt+0x3be0>
    c9ac:	cmp	r4, #15
    c9b0:	ble	ca10 <__assert_fail@plt+0x3a40>
    c9b4:	cmp	r4, #46	; 0x2e
    c9b8:	beq	cab4 <__assert_fail@plt+0x3ae4>
    c9bc:	cmp	sl, #0
    c9c0:	beq	c9d8 <__assert_fail@plt+0x3a08>
    c9c4:	add	r2, sp, #32
    c9c8:	ldr	r0, [r9]
    c9cc:	mov	r3, #0
    c9d0:	ldr	r1, [r2, #-24]!	; 0xffffffe8
    c9d4:	bl	11724 <warn@@Base+0x1298>
    c9d8:	ldr	r0, [sp, #8]
    c9dc:	bl	eb78 <__assert_fail@plt+0x5ba8>
    c9e0:	add	r0, sp, #12
    c9e4:	bl	11504 <warn@@Base+0x1078>
    c9e8:	add	r0, sp, #16
    c9ec:	bl	11504 <warn@@Base+0x1078>
    c9f0:	add	r0, sp, #20
    c9f4:	bl	11504 <warn@@Base+0x1078>
    c9f8:	ldr	r2, [sp, #28]
    c9fc:	ldr	r3, [r8]
    ca00:	cmp	r2, r3
    ca04:	bne	cbc0 <__assert_fail@plt+0x3bf0>
    ca08:	add	sp, sp, #36	; 0x24
    ca0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca10:	blx	r5
    ca14:	add	r7, sp, #8
    ca18:	cmp	r0, #15
    ca1c:	mov	fp, r0
    ca20:	movgt	r3, #0
    ca24:	movle	r3, #1
    ca28:	cmp	r4, r6
    ca2c:	movlt	r2, #0
    ca30:	andge	r2, r3, #1
    ca34:	cmp	r2, #0
    ca38:	bne	cb90 <__assert_fail@plt+0x3bc0>
    ca3c:	mov	r1, r4
    ca40:	mov	r0, r7
    ca44:	str	r3, [sp, #4]
    ca48:	bl	12cdc <warn@@Base+0x2850>
    ca4c:	ldr	r3, [sp, #4]
    ca50:	cmp	r3, #0
    ca54:	moveq	r4, fp
    ca58:	beq	c9b4 <__assert_fail@plt+0x39e4>
    ca5c:	mov	r4, fp
    ca60:	cmp	r6, r4
    ca64:	add	r2, sp, #16
    ca68:	suble	r4, r6, #1
    ca6c:	mov	r3, #0
    ca70:	ldr	r0, [sp, #8]
    ca74:	ldr	r1, [sp, #20]
    ca78:	bl	11f28 <warn@@Base+0x1a9c>
    ca7c:	mov	r1, r4
    ca80:	add	r0, sp, #12
    ca84:	bl	12cdc <warn@@Base+0x2850>
    ca88:	ldr	r0, [sp, #16]
    ca8c:	ldr	r1, [sp, #12]
    ca90:	mov	r2, r7
    ca94:	mov	r3, #0
    ca98:	bl	11e40 <warn@@Base+0x19b4>
    ca9c:	blx	r5
    caa0:	cmp	r0, #15
    caa4:	mov	r4, r0
    caa8:	ble	ca60 <__assert_fail@plt+0x3a90>
    caac:	cmp	r4, #46	; 0x2e
    cab0:	bne	c9bc <__assert_fail@plt+0x39ec>
    cab4:	blx	r5
    cab8:	mov	r7, #0
    cabc:	cmp	r6, r0
    cac0:	mov	r4, r0
    cac4:	add	r0, sp, #16
    cac8:	suble	r4, r6, #1
    cacc:	bl	11504 <warn@@Base+0x1078>
    cad0:	add	r0, sp, #12
    cad4:	bl	11504 <warn@@Base+0x1078>
    cad8:	movw	r3, #5000	; 0x1388
    cadc:	movt	r3, #2
    cae0:	ldr	r0, [r3]
    cae4:	bl	115d0 <warn@@Base+0x1144>
    cae8:	str	r0, [sp, #24]
    caec:	ldr	r0, [r9]
    caf0:	bl	115d0 <warn@@Base+0x1144>
    caf4:	cmp	r4, #15
    caf8:	str	r0, [sp, #16]
    cafc:	bgt	cb68 <__assert_fail@plt+0x3b98>
    cb00:	add	r2, sp, #16
    cb04:	mov	r3, #0
    cb08:	ldr	r1, [sp, #20]
    cb0c:	add	r7, r7, #1
    cb10:	bl	11f28 <warn@@Base+0x1a9c>
    cb14:	mov	r1, r4
    cb18:	add	r0, sp, #12
    cb1c:	bl	12cdc <warn@@Base+0x2850>
    cb20:	ldr	r0, [sp, #16]
    cb24:	ldr	r1, [sp, #12]
    cb28:	add	r2, sp, #16
    cb2c:	mov	r3, #0
    cb30:	bl	11e40 <warn@@Base+0x19b4>
    cb34:	ldr	r0, [sp, #24]
    cb38:	ldr	r1, [sp, #20]
    cb3c:	add	r2, sp, #24
    cb40:	mov	r3, #0
    cb44:	bl	11f28 <warn@@Base+0x1a9c>
    cb48:	blx	r5
    cb4c:	cmp	r6, r0
    cb50:	cmple	r0, #15
    cb54:	mov	r4, r0
    cb58:	suble	r4, r6, #1
    cb5c:	ldr	r0, [sp, #16]
    cb60:	cmp	r4, #15
    cb64:	ble	cb00 <__assert_fail@plt+0x3b30>
    cb68:	mov	r3, r7
    cb6c:	ldr	r1, [sp, #24]
    cb70:	add	r2, sp, #16
    cb74:	bl	12054 <warn@@Base+0x1bc8>
    cb78:	ldr	r0, [sp, #8]
    cb7c:	ldr	r1, [sp, #16]
    cb80:	add	r2, sp, #8
    cb84:	mov	r3, #0
    cb88:	bl	11e40 <warn@@Base+0x19b4>
    cb8c:	b	c9bc <__assert_fail@plt+0x39ec>
    cb90:	sub	r1, r6, #1
    cb94:	mov	r0, r7
    cb98:	bl	12cdc <warn@@Base+0x2850>
    cb9c:	b	ca5c <__assert_fail@plt+0x3a8c>
    cba0:	blx	r5
    cba4:	mov	sl, #0
    cba8:	mov	r4, r0
    cbac:	b	c9ac <__assert_fail@plt+0x39dc>
    cbb0:	blx	r5
    cbb4:	mov	sl, #1
    cbb8:	mov	r4, r0
    cbbc:	b	c9ac <__assert_fail@plt+0x39dc>
    cbc0:	bl	8e44 <__stack_chk_fail@plt>
    cbc4:	ldr	r3, [r0]
    cbc8:	push	{r4, r5, r6, r7, r8, lr}
    cbcc:	movw	r7, #4928	; 0x1340
    cbd0:	movt	r7, #2
    cbd4:	rsb	r3, r3, r3, lsl #3
    cbd8:	mov	r5, r0
    cbdc:	ldr	r0, [r0, #4]
    cbe0:	ldr	r1, [r7]
    cbe4:	movw	r8, #4648	; 0x1228
    cbe8:	movt	r8, #2
    cbec:	sub	sp, sp, #8
    cbf0:	add	r3, r1, r3, lsl #2
    cbf4:	add	r4, r0, #1
    cbf8:	ldr	r2, [r8]
    cbfc:	ldr	lr, [r3, #4]
    cc00:	str	r2, [sp, #4]
    cc04:	add	r1, lr, r0
    cc08:	ldrb	r3, [lr, r0]
    cc0c:	cmp	r3, #58	; 0x3a
    cc10:	cmpne	r3, #46	; 0x2e
    cc14:	moveq	r2, #0
    cc18:	movne	r2, #1
    cc1c:	beq	cd80 <__assert_fail@plt+0x3db0>
    cc20:	mov	r2, #1
    cc24:	ldrb	r3, [r1, #1]!
    cc28:	mov	r6, r2
    cc2c:	add	r2, r2, #1
    cc30:	cmp	r3, #58	; 0x3a
    cc34:	cmpne	r3, #46	; 0x2e
    cc38:	add	ip, r0, r2
    cc3c:	bne	cc24 <__assert_fail@plt+0x3c54>
    cc40:	subs	r1, r6, #1
    cc44:	rsbs	r2, r1, #0
    cc48:	adcs	r2, r2, r1
    cc4c:	cmp	r3, #46	; 0x2e
    cc50:	beq	cd08 <__assert_fail@plt+0x3d38>
    cc54:	cmp	r2, #0
    cc58:	str	r4, [r5, #4]
    cc5c:	ldrb	r4, [lr, r0]
    cc60:	beq	cd58 <__assert_fail@plt+0x3d88>
    cc64:	cmp	r4, #0
    cc68:	movweq	r3, #5008	; 0x1390
    cc6c:	movteq	r3, #2
    cc70:	beq	cd68 <__assert_fail@plt+0x3d98>
    cc74:	cmp	r4, #1
    cc78:	beq	cd60 <__assert_fail@plt+0x3d90>
    cc7c:	cmp	r4, #9
    cc80:	movls	r1, #0
    cc84:	bhi	cd8c <__assert_fail@plt+0x3dbc>
    cc88:	mov	r0, r6
    cc8c:	bl	10fd4 <warn@@Base+0xb48>
    cc90:	ldr	r1, [r0, #24]
    cc94:	str	r0, [sp]
    cc98:	cmp	r4, #58	; 0x3a
    cc9c:	movne	lr, #9
    cca0:	beq	cce8 <__assert_fail@plt+0x3d18>
    cca4:	cmp	r4, #46	; 0x2e
    cca8:	beq	ccbc <__assert_fail@plt+0x3cec>
    ccac:	cmp	r4, #9
    ccb0:	add	r1, r1, #1
    ccb4:	strbhi	lr, [r1, #-1]
    ccb8:	strbls	r4, [r1, #-1]
    ccbc:	ldr	r2, [r5]
    ccc0:	ldr	ip, [r7]
    ccc4:	ldr	r3, [r5, #4]
    ccc8:	rsb	r2, r2, r2, lsl #3
    cccc:	add	r0, r3, #1
    ccd0:	add	r2, ip, r2, lsl #2
    ccd4:	ldr	r2, [r2, #4]
    ccd8:	str	r0, [r5, #4]
    ccdc:	ldrb	r4, [r2, r3]
    cce0:	cmp	r4, #58	; 0x3a
    cce4:	bne	cca4 <__assert_fail@plt+0x3cd4>
    cce8:	ldr	r0, [sp]
    ccec:	bl	eb78 <__assert_fail@plt+0x5ba8>
    ccf0:	ldr	r2, [sp, #4]
    ccf4:	ldr	r3, [r8]
    ccf8:	cmp	r2, r3
    ccfc:	bne	cdb8 <__assert_fail@plt+0x3de8>
    cd00:	add	sp, sp, #8
    cd04:	pop	{r4, r5, r6, r7, r8, pc}
    cd08:	ldrb	r3, [lr, ip]
    cd0c:	add	ip, lr, ip
    cd10:	cmp	r3, #58	; 0x3a
    cd14:	beq	cc54 <__assert_fail@plt+0x3c84>
    cd18:	mov	r1, #0
    cd1c:	ldrb	r3, [ip, #1]!
    cd20:	add	r1, r1, #1
    cd24:	cmp	r3, #58	; 0x3a
    cd28:	bne	cd1c <__assert_fail@plt+0x3d4c>
    cd2c:	str	r4, [r5, #4]
    cd30:	ldrb	r4, [lr, r0]
    cd34:	cmp	r6, #0
    cd38:	bne	cc88 <__assert_fail@plt+0x3cb8>
    cd3c:	mov	r0, #1
    cd40:	bl	10fd4 <warn@@Base+0xb48>
    cd44:	ldr	r3, [r0, #24]
    cd48:	str	r0, [sp]
    cd4c:	add	r1, r3, #1
    cd50:	strb	r6, [r3]
    cd54:	b	cc98 <__assert_fail@plt+0x3cc8>
    cd58:	mov	r1, r2
    cd5c:	b	cd34 <__assert_fail@plt+0x3d64>
    cd60:	movw	r3, #5000	; 0x1388
    cd64:	movt	r3, #2
    cd68:	ldr	r0, [r3]
    cd6c:	bl	eb44 <__assert_fail@plt+0x5b74>
    cd70:	ldr	r3, [r5, #4]
    cd74:	add	r3, r3, #1
    cd78:	str	r3, [r5, #4]
    cd7c:	b	ccf0 <__assert_fail@plt+0x3d20>
    cd80:	mov	ip, r4
    cd84:	mov	r6, r2
    cd88:	b	cc4c <__assert_fail@plt+0x3c7c>
    cd8c:	mov	r0, sp
    cd90:	bl	115e0 <warn@@Base+0x1154>
    cd94:	mov	r0, sp
    cd98:	mov	r1, r4
    cd9c:	bl	12cdc <warn@@Base+0x2850>
    cda0:	ldr	r0, [sp]
    cda4:	bl	eb78 <__assert_fail@plt+0x5ba8>
    cda8:	ldr	r3, [r5, #4]
    cdac:	add	r3, r3, #1
    cdb0:	str	r3, [r5, #4]
    cdb4:	b	ccf0 <__assert_fail@plt+0x3d20>
    cdb8:	bl	8e44 <__stack_chk_fail@plt>
    cdbc:	push	{r3, r4, r5, lr}
    cdc0:	movw	r4, #4996	; 0x1384
    cdc4:	movt	r4, #2
    cdc8:	uxtb	r5, r0
    cdcc:	ldr	r0, [r4]
    cdd0:	bl	11504 <warn@@Base+0x1078>
    cdd4:	cmp	r5, #0
    cdd8:	ldr	r4, [r4]
    cddc:	movwne	r3, #5000	; 0x1388
    cde0:	movweq	r3, #5008	; 0x1390
    cde4:	movtne	r3, #2
    cde8:	movteq	r3, #2
    cdec:	ldr	r0, [r3]
    cdf0:	bl	115d0 <warn@@Base+0x1144>
    cdf4:	str	r0, [r4]
    cdf8:	pop	{r3, r4, r5, pc}
    cdfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce00:	movw	r8, #4648	; 0x1228
    ce04:	movt	r8, #2
    ce08:	sub	sp, sp, #36	; 0x24
    ce0c:	movw	r4, #4980	; 0x1374
    ce10:	movw	sl, #4948	; 0x1354
    ce14:	ldr	r3, [r8]
    ce18:	movt	r4, #2
    ce1c:	str	r8, [sp, #16]
    ce20:	movt	sl, #2
    ce24:	movw	r8, #4804	; 0x12c4
    ce28:	movt	r8, #2
    ce2c:	add	r0, sp, #24
    ce30:	str	r3, [sp, #28]
    ce34:	str	sl, [sp]
    ce38:	mov	r3, #0
    ce3c:	str	r8, [sp, #12]
    ce40:	str	r3, [r4]
    ce44:	str	r3, [r4, #4]
    ce48:	strb	r3, [sl]
    ce4c:	bl	115e0 <warn@@Base+0x1154>
    ce50:	ldrb	r3, [r8]
    ce54:	cmp	r3, #0
    ce58:	bne	db7c <__assert_fail@plt+0x4bac>
    ce5c:	ldr	r0, [r4]
    ce60:	movw	r6, #4928	; 0x1340
    ce64:	movt	r6, #2
    ce68:	movw	r7, #4840	; 0x12e8
    ce6c:	movt	r7, #2
    ce70:	mov	r1, #0
    ce74:	lsl	ip, r0, #3
    ce78:	ldr	r2, [r6]
    ce7c:	rsb	r3, r0, ip
    ce80:	movw	sl, #4996	; 0x1384
    ce84:	movw	r8, #4956	; 0x135c
    ce88:	movt	sl, #2
    ce8c:	add	r3, r2, r3, lsl #2
    ce90:	str	sl, [sp, #4]
    ce94:	movt	r8, #2
    ce98:	movw	sl, #4960	; 0x1360
    ce9c:	ldr	fp, [r3, #12]
    cea0:	movt	sl, #2
    cea4:	ldr	r3, [r4, #4]
    cea8:	str	r1, [r7]
    ceac:	str	r8, [sp, #8]
    ceb0:	str	sl, [sp, #20]
    ceb4:	rsb	r1, r0, ip
    ceb8:	cmp	r3, fp
    cebc:	add	r1, r2, r1, lsl #2
    cec0:	bge	d13c <__assert_fail@plt+0x416c>
    cec4:	ldr	sl, [sp]
    cec8:	ldrb	r5, [sl]
    cecc:	cmp	r5, #0
    ced0:	bne	d13c <__assert_fail@plt+0x416c>
    ced4:	ldr	r5, [r7]
    ced8:	cmp	r5, #0
    cedc:	bne	d13c <__assert_fail@plt+0x416c>
    cee0:	ldr	r8, [r1, #4]
    cee4:	add	r5, r3, #1
    cee8:	str	r5, [r4, #4]
    ceec:	ldrb	sl, [r8, r3]
    cef0:	sub	r9, sl, #33	; 0x21
    cef4:	cmp	r9, #92	; 0x5c
    cef8:	ldrls	pc, [pc, r9, lsl #2]
    cefc:	b	dae0 <__assert_fail@plt+0x4b10>
    cf00:	andeq	sp, r0, r0, lsr r5
    cf04:	andeq	sp, r0, r0, ror #21
    cf08:	andeq	sp, r0, r0, lsl #10
    cf0c:	andeq	sp, r0, r0, ror #21
    cf10:	andeq	sp, r0, r8, asr #9
    cf14:	andeq	sp, r0, r0, lsl #9
    cf18:	andeq	sp, r0, r0, ror #21
    cf1c:	andeq	sp, r0, r0, ror #21
    cf20:	andeq	sp, r0, r0, ror #21
    cf24:	muleq	r0, r0, r6
    cf28:	andeq	sp, r0, ip, asr r6
    cf2c:	andeq	sp, r0, r0, ror #21
    cf30:	andeq	sp, r0, r8, lsr #12
    cf34:	andeq	sp, r0, r0, ror #21
    cf38:	ldrdeq	sp, [r0], -ip
    cf3c:	andeq	sp, r0, r8, asr #11
    cf40:			; <UNDEFINED> instruction: 0x0000d5b4
    cf44:	andeq	sp, r0, r0, ror #21
    cf48:	andeq	sp, r0, r0, ror #21
    cf4c:	andeq	sp, r0, r0, ror #21
    cf50:	andeq	sp, r0, r0, ror #21
    cf54:	andeq	sp, r0, r0, ror #21
    cf58:	andeq	sp, r0, r0, ror #21
    cf5c:	andeq	sp, r0, r0, ror #21
    cf60:	andeq	sp, r0, r0, ror #21
    cf64:	andeq	sp, r0, r0, ror #21
    cf68:	andeq	sp, r0, r0, ror #21
    cf6c:	andeq	sp, r0, r0, lsl #11
    cf70:	andeq	sp, r0, r0, asr r5
    cf74:	andeq	sp, r0, r0, lsr sl
    cf78:	andeq	sp, r0, r0, ror #21
    cf7c:	andeq	sp, r0, r0, ror #21
    cf80:	strdeq	sp, [r0], -ip
    cf84:	andeq	sp, r0, r4, ror r0
    cf88:	andeq	sp, r0, ip, lsr r9
    cf8c:	muleq	r0, r8, sl
    cf90:	andeq	sp, r0, r0, ror #21
    cf94:	andeq	sp, r0, r0, ror #21
    cf98:	andeq	sp, r0, r0, ror #21
    cf9c:	andeq	sp, r0, r0, ror #21
    cfa0:	andeq	sp, r0, r0, ror #21
    cfa4:	strheq	sp, [r0], -r8
    cfa8:	andeq	sp, r0, r4, ror #20
    cfac:	andeq	sp, r0, ip, lsr #21
    cfb0:	andeq	sp, r0, r8, lsl #18
    cfb4:	andeq	sp, r0, r0, ror #21
    cfb8:	andeq	sp, r0, r4, asr #17
    cfbc:	andeq	sp, r0, ip, ror #16
    cfc0:	andeq	sp, r0, r0, ror #21
    cfc4:	andeq	sp, r0, r4, lsl r8
    cfc8:	andeq	sp, r0, r0, ror #15
    cfcc:	andeq	sp, r0, r0, asr #15
    cfd0:	andeq	sp, r0, r0, ror #21
    cfd4:	andeq	sp, r0, r0, ror #21
    cfd8:	andeq	sp, r0, ip, ror #16
    cfdc:	andeq	sp, r0, r0, ror #21
    cfe0:	andeq	sp, r0, r0, ror #21
    cfe4:	andeq	sp, r0, r4, ror r0
    cfe8:	andeq	sp, r0, r0, ror #21
    cfec:	andeq	sp, r0, r0, ror #21
    cff0:	andeq	sp, r0, r0, ror #21
    cff4:	andeq	sp, r0, r8, asr r7
    cff8:	andeq	sp, r0, r0, ror #21
    cffc:	andeq	sp, r0, r0, ror #21
    d000:	andeq	sp, r0, r0, ror #21
    d004:	andeq	sp, r0, r0, ror #21
    d008:	strdeq	sp, [r0], -ip
    d00c:	andeq	sp, r0, r8, asr #13
    d010:	andeq	sp, r0, r0, ror #21
    d014:	andeq	sp, r0, r0, ror #21
    d018:	andeq	sp, r0, r0, ror #21
    d01c:	andeq	sp, r0, r4, lsl #7
    d020:	andeq	sp, r0, r0, asr r3
    d024:	andeq	sp, r0, r0, ror #21
    d028:	andeq	sp, r0, r0, ror #21
    d02c:	andeq	sp, r0, ip, lsl #7
    d030:	andeq	sp, r0, r0, ror #21
    d034:	ldrdeq	sp, [r0], -r0
    d038:	andeq	sp, r0, r0, ror #21
    d03c:	andeq	sp, r0, r8, asr #6
    d040:	andeq	sp, r0, r0, ror #21
    d044:	andeq	sp, r0, r0, ror #21
    d048:	andeq	sp, r0, r4, lsl r3
    d04c:	andeq	sp, r0, r0, ror #21
    d050:	andeq	sp, r0, r0, ror #21
    d054:	andeq	sp, r0, r0, ror #21
    d058:	andeq	sp, r0, r4, ror #4
    d05c:	andeq	sp, r0, r8, lsl r2
    d060:	andeq	sp, r0, r0, ror #21
    d064:	andeq	sp, r0, r0, ror #21
    d068:	andeq	sp, r0, ip, asr #8
    d06c:	andeq	sp, r0, r4, lsl #8
    d070:	andeq	sp, r0, r0, asr #7
    d074:	ldr	r8, [sp, #4]
    d078:	ldr	r3, [r8]
    d07c:	ldr	r0, [r3]
    d080:	bl	1163c <warn@@Base+0x11b0>
    d084:	ldr	r8, [sp, #8]
    d088:	rsbs	r0, r0, #1
    d08c:	movcc	r0, #0
    d090:	strb	r0, [r8]
    d094:	bl	eb10 <__assert_fail@plt+0x5b40>
    d098:	ldr	r0, [r4]
    d09c:	ldr	r2, [r6]
    d0a0:	ldr	r5, [r4, #4]
    d0a4:	lsl	ip, r0, #3
    d0a8:	rsb	r1, r0, ip
    d0ac:	add	r1, r2, r1, lsl #2
    d0b0:	ldr	r8, [r1, #4]
    d0b4:	ldr	fp, [r1, #12]
    d0b8:	add	r9, r5, #1
    d0bc:	cmp	sl, #74	; 0x4a
    d0c0:	str	r9, [r4, #4]
    d0c4:	add	r3, r5, #2
    d0c8:	ldrb	r5, [r8, r5]
    d0cc:	str	r3, [r4, #4]
    d0d0:	ldrb	r8, [r8, r9]
    d0d4:	beq	d0f8 <__assert_fail@plt+0x4128>
    d0d8:	cmp	sl, #66	; 0x42
    d0dc:	beq	dc28 <__assert_fail@plt+0x4c58>
    d0e0:	cmp	sl, #90	; 0x5a
    d0e4:	bne	ceb4 <__assert_fail@plt+0x3ee4>
    d0e8:	ldr	sl, [sp, #8]
    d0ec:	ldrb	r9, [sl]
    d0f0:	cmp	r9, #0
    d0f4:	bne	ceb4 <__assert_fail@plt+0x3ee4>
    d0f8:	add	r3, r5, r8, lsl #8
    d0fc:	ldr	r1, [r1, #16]
    d100:	and	r5, r3, #63	; 0x3f
    d104:	asr	r3, r3, #6
    d108:	cmp	r3, #0
    d10c:	sub	r3, r3, #1
    d110:	beq	d124 <__assert_fail@plt+0x4154>
    d114:	sub	r3, r3, #1
    d118:	ldr	r1, [r1, #256]	; 0x100
    d11c:	cmn	r3, #1
    d120:	bne	d114 <__assert_fail@plt+0x4144>
    d124:	ldr	r3, [r1, r5, lsl #2]
    d128:	rsb	r1, r0, ip
    d12c:	cmp	r3, fp
    d130:	add	r1, r2, r1, lsl #2
    d134:	str	r3, [r4, #4]
    d138:	blt	cec4 <__assert_fail@plt+0x3ef4>
    d13c:	cmp	r0, #0
    d140:	movwne	r5, #4928	; 0x1340
    d144:	movtne	r5, #2
    d148:	bne	d158 <__assert_fail@plt+0x4188>
    d14c:	b	d19c <__assert_fail@plt+0x41cc>
    d150:	ldr	r2, [r5]
    d154:	lsl	ip, r0, #3
    d158:	rsb	r0, r0, ip
    d15c:	add	r0, r2, r0, lsl #2
    d160:	ldr	r0, [r0, #24]
    d164:	bl	f750 <__assert_fail@plt+0x6780>
    d168:	ldr	r3, [r4]
    d16c:	ldr	r2, [r6]
    d170:	rsb	r3, r3, r3, lsl #3
    d174:	add	r3, r2, r3, lsl #2
    d178:	ldr	r0, [r3, #20]
    d17c:	bl	f750 <__assert_fail@plt+0x6780>
    d180:	bl	ea9c <__assert_fail@plt+0x5acc>
    d184:	bl	ea9c <__assert_fail@plt+0x5acc>
    d188:	str	r0, [r4, #4]
    d18c:	bl	ea9c <__assert_fail@plt+0x5acc>
    d190:	cmp	r0, #0
    d194:	str	r0, [r4]
    d198:	bne	d150 <__assert_fail@plt+0x4180>
    d19c:	movw	r4, #4996	; 0x1384
    d1a0:	movt	r4, #2
    d1a4:	ldr	r3, [r4]
    d1a8:	cmp	r3, #0
    d1ac:	beq	d1c0 <__assert_fail@plt+0x41f0>
    d1b0:	bl	eb10 <__assert_fail@plt+0x5b40>
    d1b4:	ldr	r3, [r4]
    d1b8:	cmp	r3, #0
    d1bc:	bne	d1b0 <__assert_fail@plt+0x41e0>
    d1c0:	ldr	r8, [sp, #12]
    d1c4:	ldrb	r3, [r8]
    d1c8:	cmp	r3, #0
    d1cc:	bne	d1ec <__assert_fail@plt+0x421c>
    d1d0:	ldr	sl, [sp, #16]
    d1d4:	ldr	r2, [sp, #28]
    d1d8:	ldr	r3, [sl]
    d1dc:	cmp	r2, r3
    d1e0:	bne	dd60 <__assert_fail@plt+0x4d90>
    d1e4:	add	sp, sp, #36	; 0x24
    d1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1ec:	movw	r1, #38536	; 0x9688
    d1f0:	mov	r0, #2
    d1f4:	movt	r1, #0
    d1f8:	bl	8e2c <signal@plt>
    d1fc:	ldr	r3, [r7]
    d200:	cmp	r3, #0
    d204:	beq	d1d0 <__assert_fail@plt+0x4200>
    d208:	movw	r0, #27604	; 0x6bd4
    d20c:	movt	r0, #1
    d210:	bl	8e98 <puts@plt>
    d214:	b	d1d0 <__assert_fail@plt+0x4200>
    d218:	mov	r0, #2
    d21c:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d220:	cmp	r0, #0
    d224:	beq	d2f4 <__assert_fail@plt+0x4324>
    d228:	ldr	sl, [sp, #4]
    d22c:	ldr	r0, [r4]
    d230:	ldr	r2, [r6]
    d234:	ldr	r3, [sl]
    d238:	lsl	ip, r0, #3
    d23c:	rsb	r8, r0, ip
    d240:	ldr	r1, [r3, #4]
    d244:	ldr	r5, [r3]
    d248:	add	r8, r2, r8, lsl #2
    d24c:	ldr	r9, [r1]
    d250:	ldr	fp, [r8, #12]
    d254:	str	r9, [r3]
    d258:	str	r5, [r1]
    d25c:	ldr	r3, [r4, #4]
    d260:	b	ceb4 <__assert_fail@plt+0x3ee4>
    d264:	ldr	r2, [r4]
    d268:	add	r3, r3, #2
    d26c:	ldr	r1, [r6]
    d270:	rsb	r2, r2, r2, lsl #3
    d274:	add	r2, r1, r2, lsl #2
    d278:	ldr	r2, [r2, #4]
    d27c:	str	r3, [r4, #4]
    d280:	ldrb	r0, [r2, r5]
    d284:	cmp	r0, #34	; 0x22
    d288:	beq	d2bc <__assert_fail@plt+0x42ec>
    d28c:	bl	fbc8 <__assert_fail@plt+0x6bf8>
    d290:	ldr	r2, [r4]
    d294:	ldr	r0, [r6]
    d298:	ldr	r3, [r4, #4]
    d29c:	rsb	r2, r2, r2, lsl #3
    d2a0:	add	r1, r3, #1
    d2a4:	add	r2, r0, r2, lsl #2
    d2a8:	ldr	r2, [r2, #4]
    d2ac:	str	r1, [r4, #4]
    d2b0:	ldrb	r0, [r2, r3]
    d2b4:	cmp	r0, #34	; 0x22
    d2b8:	bne	d28c <__assert_fail@plt+0x42bc>
    d2bc:	movw	r3, #4680	; 0x1248
    d2c0:	movt	r3, #2
    d2c4:	ldr	r0, [r3]
    d2c8:	bl	8dfc <fflush@plt>
    d2cc:	b	d2f4 <__assert_fail@plt+0x4324>
    d2d0:	ldr	r8, [sp, #4]
    d2d4:	movw	r1, #5008	; 0x1390
    d2d8:	movt	r1, #2
    d2dc:	mov	r3, #0
    d2e0:	ldr	ip, [r8]
    d2e4:	ldr	r0, [r1]
    d2e8:	mov	r2, ip
    d2ec:	ldr	r1, [ip]
    d2f0:	bl	11724 <warn@@Base+0x1298>
    d2f4:	ldr	r0, [r4]
    d2f8:	ldr	r2, [r6]
    d2fc:	ldr	r3, [r4, #4]
    d300:	lsl	ip, r0, #3
    d304:	rsb	r1, r0, ip
    d308:	add	r1, r2, r1, lsl #2
    d30c:	ldr	fp, [r1, #12]
    d310:	b	ceb4 <__assert_fail@plt+0x3ee4>
    d314:	add	r1, r3, #2
    d318:	str	r1, [r4, #4]
    d31c:	ldrb	r0, [r8, r5]
    d320:	movw	r2, #4980	; 0x1374
    d324:	movt	r2, #2
    d328:	tst	r0, #128	; 0x80
    d32c:	addne	r3, r3, #3
    d330:	andne	r0, r0, #127	; 0x7f
    d334:	strne	r3, [r2, #4]
    d338:	ldrbne	r3, [r8, r1]
    d33c:	addne	r0, r3, r0, lsl #8
    d340:	bl	ee34 <__assert_fail@plt+0x5e64>
    d344:	b	d2f4 <__assert_fail@plt+0x4324>
    d348:	bl	eb10 <__assert_fail@plt+0x5b40>
    d34c:	b	d2f4 <__assert_fail@plt+0x4324>
    d350:	add	r1, r3, #2
    d354:	str	r1, [r4, #4]
    d358:	ldrb	r0, [r8, r5]
    d35c:	movw	r2, #4980	; 0x1374
    d360:	movt	r2, #2
    d364:	tst	r0, #128	; 0x80
    d368:	addne	r3, r3, #3
    d36c:	andne	r0, r0, #127	; 0x7f
    d370:	strne	r3, [r2, #4]
    d374:	ldrbne	r3, [r8, r1]
    d378:	addne	r0, r3, r0, lsl #8
    d37c:	bl	f4cc <__assert_fail@plt+0x64fc>
    d380:	b	d2f4 <__assert_fail@plt+0x4324>
    d384:	mov	r0, #0
    d388:	bl	8eec <exit@plt>
    d38c:	add	r1, r3, #2
    d390:	str	r1, [r4, #4]
    d394:	ldrb	r0, [r8, r5]
    d398:	movw	r2, #4980	; 0x1374
    d39c:	movt	r2, #2
    d3a0:	tst	r0, #128	; 0x80
    d3a4:	addne	r3, r3, #3
    d3a8:	andne	r0, r0, #127	; 0x7f
    d3ac:	strne	r3, [r2, #4]
    d3b0:	ldrbne	r3, [r8, r1]
    d3b4:	addne	r0, r3, r0, lsl #8
    d3b8:	bl	f17c <__assert_fail@plt+0x61ac>
    d3bc:	b	d2f4 <__assert_fail@plt+0x4324>
    d3c0:	mov	r0, #2
    d3c4:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d3c8:	cmp	r0, #0
    d3cc:	beq	d2f4 <__assert_fail@plt+0x4324>
    d3d0:	ldr	sl, [sp, #4]
    d3d4:	ldr	r3, [sl]
    d3d8:	ldm	r3, {r1, r2}
    d3dc:	ldr	r0, [r2]
    d3e0:	bl	11600 <warn@@Base+0x1174>
    d3e4:	mvn	r0, r0
    d3e8:	lsr	r0, r0, #31
    d3ec:	ldr	r8, [sp, #8]
    d3f0:	strb	r0, [r8]
    d3f4:	bl	eb10 <__assert_fail@plt+0x5b40>
    d3f8:	ldrb	r0, [r8]
    d3fc:	bl	cdbc <__assert_fail@plt+0x3dec>
    d400:	b	d2f4 <__assert_fail@plt+0x4324>
    d404:	mov	r0, #2
    d408:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d40c:	cmp	r0, #0
    d410:	beq	d2f4 <__assert_fail@plt+0x4324>
    d414:	ldr	r8, [sp, #4]
    d418:	ldr	r3, [r8]
    d41c:	ldr	r3, [r3, #4]
    d420:	ldr	r0, [r3]
    d424:	bl	1163c <warn@@Base+0x11b0>
    d428:	cmp	r0, #0
    d42c:	moveq	r0, #1
    d430:	bne	d4b0 <__assert_fail@plt+0x44e0>
    d434:	ldr	sl, [sp, #8]
    d438:	strb	r0, [sl]
    d43c:	bl	eb10 <__assert_fail@plt+0x5b40>
    d440:	ldrb	r0, [sl]
    d444:	bl	cdbc <__assert_fail@plt+0x3dec>
    d448:	b	d2f4 <__assert_fail@plt+0x4324>
    d44c:	mov	r0, #2
    d450:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d454:	cmp	r0, #0
    d458:	beq	d2f4 <__assert_fail@plt+0x4324>
    d45c:	ldr	sl, [sp, #4]
    d460:	ldr	r3, [sl]
    d464:	ldm	r3, {r1, r2}
    d468:	ldr	r0, [r2]
    d46c:	bl	11600 <warn@@Base+0x1174>
    d470:	cmp	r0, #0
    d474:	movgt	r0, #0
    d478:	movle	r0, #1
    d47c:	b	d3ec <__assert_fail@plt+0x441c>
    d480:	mov	r0, #2
    d484:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d488:	cmp	r0, #0
    d48c:	beq	d2f4 <__assert_fail@plt+0x4324>
    d490:	ldr	r8, [sp, #4]
    d494:	ldr	r3, [r8]
    d498:	ldr	r3, [r3, #4]
    d49c:	ldr	r0, [r3]
    d4a0:	bl	1163c <warn@@Base+0x11b0>
    d4a4:	cmp	r0, #0
    d4a8:	movne	r0, #0
    d4ac:	bne	d434 <__assert_fail@plt+0x4464>
    d4b0:	ldr	r3, [r8]
    d4b4:	ldr	r0, [r3]
    d4b8:	bl	1163c <warn@@Base+0x11b0>
    d4bc:	rsbs	r0, r0, #1
    d4c0:	movcc	r0, #0
    d4c4:	b	d434 <__assert_fail@plt+0x4464>
    d4c8:	mov	r0, #2
    d4cc:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d4d0:	cmp	r0, #0
    d4d4:	beq	d2f4 <__assert_fail@plt+0x4324>
    d4d8:	ldr	r8, [sp, #4]
    d4dc:	ldr	r3, [r8]
    d4e0:	ldr	r0, [r3]
    d4e4:	bl	1163c <warn@@Base+0x11b0>
    d4e8:	cmp	r0, #0
    d4ec:	beq	dd08 <__assert_fail@plt+0x4d38>
    d4f0:	movw	r0, #27544	; 0x6b98
    d4f4:	movt	r0, #1
    d4f8:	bl	109cc <warn@@Base+0x540>
    d4fc:	b	d2f4 <__assert_fail@plt+0x4324>
    d500:	mov	r0, #2
    d504:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d508:	cmp	r0, #0
    d50c:	beq	d2f4 <__assert_fail@plt+0x4324>
    d510:	ldr	sl, [sp, #4]
    d514:	ldr	r3, [sl]
    d518:	ldm	r3, {r1, r2}
    d51c:	ldr	r0, [r2]
    d520:	bl	11600 <warn@@Base+0x1174>
    d524:	adds	r0, r0, #0
    d528:	movne	r0, #1
    d52c:	b	d3ec <__assert_fail@plt+0x441c>
    d530:	ldr	r8, [sp, #4]
    d534:	ldr	r3, [r8]
    d538:	ldr	r0, [r3]
    d53c:	bl	1163c <warn@@Base+0x11b0>
    d540:	ldr	sl, [sp, #8]
    d544:	strb	r0, [sl]
    d548:	bl	cdbc <__assert_fail@plt+0x3dec>
    d54c:	b	d2f4 <__assert_fail@plt+0x4324>
    d550:	mov	r0, #2
    d554:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d558:	cmp	r0, #0
    d55c:	beq	d2f4 <__assert_fail@plt+0x4324>
    d560:	ldr	sl, [sp, #4]
    d564:	ldr	r3, [sl]
    d568:	ldm	r3, {r1, r2}
    d56c:	ldr	r0, [r2]
    d570:	bl	11600 <warn@@Base+0x1174>
    d574:	rsbs	r0, r0, #1
    d578:	movcc	r0, #0
    d57c:	b	d3ec <__assert_fail@plt+0x441c>
    d580:	mov	r0, #2
    d584:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d588:	cmp	r0, #0
    d58c:	beq	d2f4 <__assert_fail@plt+0x4324>
    d590:	ldr	sl, [sp, #4]
    d594:	ldr	r3, [sl]
    d598:	ldm	r3, {r1, r2}
    d59c:	ldr	r0, [r2]
    d5a0:	bl	11600 <warn@@Base+0x1174>
    d5a4:	cmn	r0, #1
    d5a8:	movne	r0, #0
    d5ac:	moveq	r0, #1
    d5b0:	b	d3ec <__assert_fail@plt+0x441c>
    d5b4:	movw	r3, #5000	; 0x1388
    d5b8:	movt	r3, #2
    d5bc:	ldr	r0, [r3]
    d5c0:	bl	eb44 <__assert_fail@plt+0x5b74>
    d5c4:	b	d2f4 <__assert_fail@plt+0x4324>
    d5c8:	movw	r3, #5008	; 0x1390
    d5cc:	movt	r3, #2
    d5d0:	ldr	r0, [r3]
    d5d4:	bl	eb44 <__assert_fail@plt+0x5b74>
    d5d8:	b	d2f4 <__assert_fail@plt+0x4324>
    d5dc:	mov	r0, #2
    d5e0:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d5e4:	cmp	r0, #0
    d5e8:	beq	d2f4 <__assert_fail@plt+0x4324>
    d5ec:	ldr	r8, [sp, #4]
    d5f0:	add	r2, sp, #24
    d5f4:	ldr	sl, [sp, #20]
    d5f8:	ldr	r1, [r8]
    d5fc:	ldr	r3, [sl]
    d600:	ldr	r0, [r1, #4]
    d604:	ldr	r1, [r1]
    d608:	ldr	r0, [r0]
    d60c:	bl	12054 <warn@@Base+0x1bc8>
    d610:	cmp	r0, #0
    d614:	beq	d7a4 <__assert_fail@plt+0x47d4>
    d618:	movw	r0, #27528	; 0x6b88
    d61c:	movt	r0, #1
    d620:	bl	109cc <warn@@Base+0x540>
    d624:	b	d2f4 <__assert_fail@plt+0x4324>
    d628:	mov	r0, #2
    d62c:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d630:	cmp	r0, #0
    d634:	beq	d2f4 <__assert_fail@plt+0x4324>
    d638:	ldr	sl, [sp, #4]
    d63c:	add	r2, sp, #24
    d640:	mov	r3, #0
    d644:	ldr	r1, [sl]
    d648:	ldr	r0, [r1, #4]
    d64c:	ldr	r1, [r1]
    d650:	ldr	r0, [r0]
    d654:	bl	11724 <warn@@Base+0x1298>
    d658:	b	d7a4 <__assert_fail@plt+0x47d4>
    d65c:	mov	r0, #2
    d660:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d664:	cmp	r0, #0
    d668:	beq	d2f4 <__assert_fail@plt+0x4324>
    d66c:	ldr	r8, [sp, #4]
    d670:	add	r2, sp, #24
    d674:	mov	r3, #0
    d678:	ldr	r1, [r8]
    d67c:	ldr	r0, [r1, #4]
    d680:	ldr	r1, [r1]
    d684:	ldr	r0, [r0]
    d688:	bl	11e40 <warn@@Base+0x19b4>
    d68c:	b	d7a4 <__assert_fail@plt+0x47d4>
    d690:	mov	r0, #2
    d694:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d698:	cmp	r0, #0
    d69c:	beq	d2f4 <__assert_fail@plt+0x4324>
    d6a0:	ldr	r8, [sp, #4]
    d6a4:	add	r2, sp, #24
    d6a8:	ldr	sl, [sp, #20]
    d6ac:	ldr	r1, [r8]
    d6b0:	ldr	r3, [sl]
    d6b4:	ldr	r0, [r1, #4]
    d6b8:	ldr	r1, [r1]
    d6bc:	ldr	r0, [r0]
    d6c0:	bl	11f28 <warn@@Base+0x1a9c>
    d6c4:	b	d7a4 <__assert_fail@plt+0x47d4>
    d6c8:	add	r1, r3, #2
    d6cc:	str	r1, [r4, #4]
    d6d0:	ldrb	r0, [r8, r5]
    d6d4:	movw	r2, #4980	; 0x1374
    d6d8:	movt	r2, #2
    d6dc:	tst	r0, #128	; 0x80
    d6e0:	addne	r3, r3, #3
    d6e4:	andne	r0, r0, #127	; 0x7f
    d6e8:	strne	r3, [r2, #4]
    d6ec:	ldrbne	r3, [r8, r1]
    d6f0:	addne	r0, r3, r0, lsl #8
    d6f4:	bl	f31c <__assert_fail@plt+0x634c>
    d6f8:	b	d2f4 <__assert_fail@plt+0x4324>
    d6fc:	add	r3, r3, #2
    d700:	str	r3, [r4, #4]
    d704:	ldrb	r1, [r8, r5]
    d708:	sub	r1, r1, #73	; 0x49
    d70c:	cmp	r1, #15
    d710:	ldrls	pc, [pc, r1, lsl #2]
    d714:	b	ceb4 <__assert_fail@plt+0x3ee4>
    d718:	andeq	sp, r0, ip, lsr ip
    d71c:			; <UNDEFINED> instruction: 0x0000ceb4
    d720:			; <UNDEFINED> instruction: 0x0000ceb4
    d724:	andeq	sp, r0, r8, asr ip
    d728:			; <UNDEFINED> instruction: 0x0000ceb4
    d72c:			; <UNDEFINED> instruction: 0x0000ceb4
    d730:			; <UNDEFINED> instruction: 0x0000ceb4
    d734:			; <UNDEFINED> instruction: 0x0000ceb4
    d738:			; <UNDEFINED> instruction: 0x0000ceb4
    d73c:	muleq	r0, r8, ip
    d740:	andeq	sp, r0, r4, asr #25
    d744:			; <UNDEFINED> instruction: 0x0000ceb4
    d748:			; <UNDEFINED> instruction: 0x0000ceb4
    d74c:			; <UNDEFINED> instruction: 0x0000ceb4
    d750:			; <UNDEFINED> instruction: 0x0000ceb4
    d754:	ldrdeq	sp, [r0], -ip
    d758:	mov	r0, #2
    d75c:	bl	eba4 <__assert_fail@plt+0x5bd4>
    d760:	cmp	r0, #0
    d764:	beq	d2f4 <__assert_fail@plt+0x4324>
    d768:	ldr	sl, [sp, #4]
    d76c:	add	r2, sp, #24
    d770:	ldr	r8, [sp, #20]
    d774:	ldr	r1, [sl]
    d778:	ldr	r3, [r8]
    d77c:	ldr	r0, [r1, #4]
    d780:	ldr	r1, [r1]
    d784:	ldr	r0, [r0]
    d788:	bl	12ae4 <warn@@Base+0x2658>
    d78c:	ldr	r3, [sl]
    d790:	ldr	r3, [r3, #4]
    d794:	ldr	r0, [r3]
    d798:	bl	1163c <warn@@Base+0x11b0>
    d79c:	cmp	r0, #0
    d7a0:	bne	dd3c <__assert_fail@plt+0x4d6c>
    d7a4:	bl	eb10 <__assert_fail@plt+0x5b40>
    d7a8:	bl	eb10 <__assert_fail@plt+0x5b40>
    d7ac:	ldr	r0, [sp, #24]
    d7b0:	bl	eb78 <__assert_fail@plt+0x5ba8>
    d7b4:	add	r0, sp, #24
    d7b8:	bl	115e0 <warn@@Base+0x1154>
    d7bc:	b	d2f4 <__assert_fail@plt+0x4324>
    d7c0:	ldr	sl, [sp, #4]
    d7c4:	ldr	r3, [sl]
    d7c8:	ldr	r0, [r3]
    d7cc:	bl	1163c <warn@@Base+0x11b0>
    d7d0:	ldr	r8, [sp, #8]
    d7d4:	strb	r0, [r8]
    d7d8:	bl	cdbc <__assert_fail@plt+0x3dec>
    d7dc:	b	d2f4 <__assert_fail@plt+0x4324>
    d7e0:	add	r1, r3, #2
    d7e4:	str	r1, [r4, #4]
    d7e8:	ldrb	r0, [r8, r5]
    d7ec:	movw	r2, #4980	; 0x1374
    d7f0:	movt	r2, #2
    d7f4:	tst	r0, #128	; 0x80
    d7f8:	addne	r3, r3, #3
    d7fc:	andne	r0, r0, #127	; 0x7f
    d800:	strne	r3, [r2, #4]
    d804:	ldrbne	r3, [r8, r1]
    d808:	addne	r0, r3, r0, lsl #8
    d80c:	bl	f0ac <__assert_fail@plt+0x60dc>
    d810:	b	d2f4 <__assert_fail@plt+0x4324>
    d814:	cmp	r0, #0
    d818:	beq	dc08 <__assert_fail@plt+0x4c38>
    d81c:	ldr	r0, [r1, #24]
    d820:	bl	f750 <__assert_fail@plt+0x6780>
    d824:	ldr	r3, [r4]
    d828:	ldr	r2, [r6]
    d82c:	rsb	r3, r3, r3, lsl #3
    d830:	add	r3, r2, r3, lsl #2
    d834:	ldr	r0, [r3, #20]
    d838:	bl	f750 <__assert_fail@plt+0x6780>
    d83c:	bl	ea9c <__assert_fail@plt+0x5acc>
    d840:	bl	ea9c <__assert_fail@plt+0x5acc>
    d844:	str	r0, [r4, #4]
    d848:	bl	ea9c <__assert_fail@plt+0x5acc>
    d84c:	ldr	r2, [r6]
    d850:	ldr	r3, [r4, #4]
    d854:	lsl	ip, r0, #3
    d858:	str	r0, [r4]
    d85c:	rsb	r1, r0, ip
    d860:	add	r1, r2, r1, lsl #2
    d864:	ldr	fp, [r1, #12]
    d868:	b	ceb4 <__assert_fail@plt+0x3ee4>
    d86c:	ldr	r8, [sp, #4]
    d870:	movw	r1, #4936	; 0x1348
    d874:	movw	r3, #4788	; 0x12b4
    d878:	movt	r1, #2
    d87c:	movt	r3, #2
    d880:	movw	r2, #64292	; 0xfb24
    d884:	ldr	r0, [r8]
    d888:	movt	r2, #0
    d88c:	ldr	r1, [r1]
    d890:	ldr	r3, [r3]
    d894:	ldr	r0, [r0]
    d898:	bl	130ac <warn@@Base+0x2c20>
    d89c:	cmp	sl, #87	; 0x57
    d8a0:	beq	dd30 <__assert_fail@plt+0x4d60>
    d8a4:	mov	r0, #4
    d8a8:	bl	ee34 <__assert_fail@plt+0x5e64>
    d8ac:	movw	r3, #4680	; 0x1248
    d8b0:	movt	r3, #2
    d8b4:	ldr	r0, [r3]
    d8b8:	bl	8dfc <fflush@plt>
    d8bc:	bl	eb10 <__assert_fail@plt+0x5b40>
    d8c0:	b	d2f4 <__assert_fail@plt+0x4324>
    d8c4:	movw	r9, #4980	; 0x1374
    d8c8:	movt	r9, #2
    d8cc:	add	r3, r5, #1
    d8d0:	str	r3, [r4, #4]
    d8d4:	ldrb	r0, [r8, r5]
    d8d8:	cmp	r0, #34	; 0x22
    d8dc:	beq	d2bc <__assert_fail@plt+0x42ec>
    d8e0:	cmp	r0, #92	; 0x5c
    d8e4:	beq	daf4 <__assert_fail@plt+0x4b24>
    d8e8:	bl	fbc8 <__assert_fail@plt+0x6bf8>
    d8ec:	ldr	r3, [r9]
    d8f0:	ldr	r2, [r6]
    d8f4:	ldr	r5, [r9, #4]
    d8f8:	rsb	r3, r3, r3, lsl #3
    d8fc:	add	r3, r2, r3, lsl #2
    d900:	ldr	r8, [r3, #4]
    d904:	b	d8cc <__assert_fail@plt+0x48fc>
    d908:	add	r1, r3, #2
    d90c:	str	r1, [r4, #4]
    d910:	ldrb	r0, [r8, r5]
    d914:	movw	r2, #4980	; 0x1374
    d918:	movt	r2, #2
    d91c:	tst	r0, #128	; 0x80
    d920:	addne	r3, r3, #3
    d924:	andne	r0, r0, #127	; 0x7f
    d928:	strne	r3, [r2, #4]
    d92c:	ldrbne	r3, [r8, r1]
    d930:	addne	r0, r3, r0, lsl #8
    d934:	bl	f420 <__assert_fail@plt+0x6450>
    d938:	b	d2f4 <__assert_fail@plt+0x4324>
    d93c:	add	ip, r3, #2
    d940:	str	ip, [r4, #4]
    d944:	ldrb	r0, [r8, r5]
    d948:	movw	r1, #4980	; 0x1374
    d94c:	movt	r1, #2
    d950:	tst	r0, #128	; 0x80
    d954:	addne	r3, r3, #3
    d958:	andne	r0, r0, #127	; 0x7f
    d95c:	strne	r3, [r1, #4]
    d960:	moveq	r8, r0
    d964:	ldrbne	r3, [r8, ip]
    d968:	addne	r8, r3, r0, lsl #8
    d96c:	rsb	r3, r8, r8, lsl #3
    d970:	ldrb	r2, [r2, r3, lsl #2]
    d974:	lsl	r9, r3, #2
    d978:	cmp	r2, #0
    d97c:	beq	dbec <__assert_fail@plt+0x4c1c>
    d980:	movw	r0, #4980	; 0x1374
    d984:	mov	r1, r8
    d988:	movt	r0, #2
    d98c:	bl	f8d4 <__assert_fail@plt+0x6904>
    d990:	ldr	r3, [r6]
    d994:	add	r3, r3, r9
    d998:	ldr	r5, [r3, #24]
    d99c:	cmp	r5, #0
    d9a0:	beq	d9b8 <__assert_fail@plt+0x49e8>
    d9a4:	ldr	r0, [r5]
    d9a8:	bl	f67c <__assert_fail@plt+0x66ac>
    d9ac:	ldr	r5, [r5, #8]
    d9b0:	cmp	r5, #0
    d9b4:	bne	d9a4 <__assert_fail@plt+0x49d4>
    d9b8:	ldr	r0, [r4]
    d9bc:	bl	eae4 <__assert_fail@plt+0x5b14>
    d9c0:	ldr	r0, [r4, #4]
    d9c4:	bl	eae4 <__assert_fail@plt+0x5b14>
    d9c8:	movw	r3, #4972	; 0x136c
    d9cc:	movt	r3, #2
    d9d0:	ldr	r0, [r3]
    d9d4:	bl	eae4 <__assert_fail@plt+0x5b14>
    d9d8:	ldr	r2, [r6]
    d9dc:	mov	r3, #0
    d9e0:	mov	r0, r8
    d9e4:	add	r9, r2, r9
    d9e8:	str	r8, [r4]
    d9ec:	lsl	ip, r8, #3
    d9f0:	str	r3, [r4, #4]
    d9f4:	ldr	fp, [r9, #12]
    d9f8:	b	ceb4 <__assert_fail@plt+0x3ee4>
    d9fc:	add	r1, r3, #2
    da00:	str	r1, [r4, #4]
    da04:	ldrb	r0, [r8, r5]
    da08:	movw	r2, #4980	; 0x1374
    da0c:	movt	r2, #2
    da10:	tst	r0, #128	; 0x80
    da14:	addne	r3, r3, #3
    da18:	andne	r0, r0, #127	; 0x7f
    da1c:	strne	r3, [r2, #4]
    da20:	ldrbne	r3, [r8, r1]
    da24:	addne	r0, r3, r0, lsl #8
    da28:	bl	f5d0 <__assert_fail@plt+0x6600>
    da2c:	b	d2f4 <__assert_fail@plt+0x4324>
    da30:	mov	r0, #2
    da34:	bl	eba4 <__assert_fail@plt+0x5bd4>
    da38:	cmp	r0, #0
    da3c:	beq	d2f4 <__assert_fail@plt+0x4324>
    da40:	ldr	sl, [sp, #4]
    da44:	ldr	r3, [sl]
    da48:	ldm	r3, {r1, r2}
    da4c:	ldr	r0, [r2]
    da50:	bl	11600 <warn@@Base+0x1174>
    da54:	subs	r3, r0, #1
    da58:	rsbs	r0, r3, #0
    da5c:	adcs	r0, r0, r3
    da60:	b	d3ec <__assert_fail@plt+0x441c>
    da64:	cmp	r0, #0
    da68:	movwne	r3, #4888	; 0x1318
    da6c:	movtne	r3, #2
    da70:	movweq	r3, #4972	; 0x136c
    da74:	movteq	r3, #2
    da78:	ldrne	r3, [r3]
    da7c:	ldr	r1, [r3]
    da80:	cmp	r1, #10
    da84:	beq	dc18 <__assert_fail@plt+0x4c48>
    da88:	movw	r0, #51200	; 0xc800
    da8c:	movt	r0, #0
    da90:	bl	c930 <__assert_fail@plt+0x3960>
    da94:	b	d2f4 <__assert_fail@plt+0x4324>
    da98:	ldr	r8, [sp, #4]
    da9c:	ldr	r3, [r8]
    daa0:	ldr	r0, [r3]
    daa4:	bl	eb44 <__assert_fail@plt+0x5b74>
    daa8:	b	d2f4 <__assert_fail@plt+0x4324>
    daac:	add	r1, r3, #2
    dab0:	str	r1, [r4, #4]
    dab4:	ldrb	r0, [r8, r5]
    dab8:	movw	r2, #4980	; 0x1374
    dabc:	movt	r2, #2
    dac0:	tst	r0, #128	; 0x80
    dac4:	addne	r3, r3, #3
    dac8:	andne	r0, r0, #127	; 0x7f
    dacc:	strne	r3, [r2, #4]
    dad0:	ldrbne	r3, [r8, r1]
    dad4:	addne	r0, r3, r0, lsl #8
    dad8:	bl	f284 <__assert_fail@plt+0x62b4>
    dadc:	b	d2f4 <__assert_fail@plt+0x4324>
    dae0:	movw	r0, #27576	; 0x6bb8
    dae4:	movt	r0, #1
    dae8:	mov	r1, sl
    daec:	bl	109cc <warn@@Base+0x540>
    daf0:	b	d2f4 <__assert_fail@plt+0x4324>
    daf4:	add	r5, r5, #2
    daf8:	str	r5, [r9, #4]
    dafc:	ldrb	r3, [r8, r3]
    db00:	cmp	r3, #34	; 0x22
    db04:	beq	d2bc <__assert_fail@plt+0x42ec>
    db08:	sub	r3, r3, #92	; 0x5c
    db0c:	cmp	r3, #24
    db10:	ldrls	pc, [pc, r3, lsl #2]
    db14:	b	d8cc <__assert_fail@plt+0x48fc>
    db18:	andeq	sp, r0, r4, ror #23
    db1c:	andeq	sp, r0, ip, asr #17
    db20:	andeq	sp, r0, ip, asr #17
    db24:	andeq	sp, r0, ip, asr #17
    db28:	andeq	sp, r0, ip, asr #17
    db2c:	ldrdeq	sp, [r0], -ip
    db30:	ldrdeq	sp, [r0], -r4
    db34:	andeq	sp, r0, ip, asr #17
    db38:	andeq	sp, r0, ip, asr #17
    db3c:	andeq	sp, r0, ip, asr #17
    db40:	andeq	sp, r0, ip, asr #23
    db44:	andeq	sp, r0, ip, asr #17
    db48:	andeq	sp, r0, ip, asr #17
    db4c:	andeq	sp, r0, ip, asr #17
    db50:	andeq	sp, r0, ip, asr #17
    db54:	andeq	sp, r0, ip, asr #17
    db58:	andeq	sp, r0, ip, asr #17
    db5c:	andeq	sp, r0, ip, asr #17
    db60:	andeq	sp, r0, r4, asr #23
    db64:	andeq	sp, r0, ip, asr #17
    db68:	andeq	sp, r0, ip, asr #17
    db6c:			; <UNDEFINED> instruction: 0x0000dbbc
    db70:			; <UNDEFINED> instruction: 0x0000dbb4
    db74:	andeq	sp, r0, ip, asr #17
    db78:	muleq	r0, r0, fp
    db7c:	movw	r1, #51180	; 0xc7ec
    db80:	mov	r0, #2
    db84:	movt	r1, #0
    db88:	bl	8e2c <signal@plt>
    db8c:	b	ce5c <__assert_fail@plt+0x3e8c>
    db90:	mov	r0, #9
    db94:	bl	fbc8 <__assert_fail@plt+0x6bf8>
    db98:	ldr	r3, [r4]
    db9c:	ldr	r2, [r6]
    dba0:	ldr	r5, [r4, #4]
    dba4:	rsb	r3, r3, r3, lsl #3
    dba8:	add	r3, r2, r3, lsl #2
    dbac:	ldr	r8, [r3, #4]
    dbb0:	b	d8cc <__assert_fail@plt+0x48fc>
    dbb4:	mov	r0, #13
    dbb8:	b	db94 <__assert_fail@plt+0x4bc4>
    dbbc:	mov	r0, #34	; 0x22
    dbc0:	b	db94 <__assert_fail@plt+0x4bc4>
    dbc4:	mov	r0, #10
    dbc8:	b	db94 <__assert_fail@plt+0x4bc4>
    dbcc:	mov	r0, #12
    dbd0:	b	db94 <__assert_fail@plt+0x4bc4>
    dbd4:	mov	r0, #8
    dbd8:	b	db94 <__assert_fail@plt+0x4bc4>
    dbdc:	mov	r0, #7
    dbe0:	b	db94 <__assert_fail@plt+0x4bc4>
    dbe4:	mov	r0, #92	; 0x5c
    dbe8:	b	db94 <__assert_fail@plt+0x4bc4>
    dbec:	movw	r3, #4944	; 0x1350
    dbf0:	movt	r3, #2
    dbf4:	movw	r0, #27436	; 0x6b2c
    dbf8:	movt	r0, #1
    dbfc:	ldr	r3, [r3]
    dc00:	ldr	r1, [r3, r8, lsl #2]
    dc04:	b	daec <__assert_fail@plt+0x4b1c>
    dc08:	movw	r0, #27464	; 0x6b48
    dc0c:	movt	r0, #1
    dc10:	bl	109cc <warn@@Base+0x540>
    dc14:	b	d2f4 <__assert_fail@plt+0x4324>
    dc18:	movw	r0, #4980	; 0x1374
    dc1c:	movt	r0, #2
    dc20:	bl	cbc4 <__assert_fail@plt+0x3bf4>
    dc24:	b	d2f4 <__assert_fail@plt+0x4324>
    dc28:	ldr	sl, [sp, #8]
    dc2c:	ldrb	r9, [sl]
    dc30:	cmp	r9, #0
    dc34:	bne	d0f8 <__assert_fail@plt+0x4128>
    dc38:	b	ceb4 <__assert_fail@plt+0x3ee4>
    dc3c:	movw	r3, #4972	; 0x136c
    dc40:	movt	r3, #2
    dc44:	movw	r0, #51256	; 0xc838
    dc48:	movt	r0, #0
    dc4c:	ldr	r1, [r3]
    dc50:	bl	c930 <__assert_fail@plt+0x3960>
    dc54:	b	d2f4 <__assert_fail@plt+0x4324>
    dc58:	ldr	sl, [sp, #4]
    dc5c:	ldr	r0, [sl]
    dc60:	ldr	r2, [r0]
    dc64:	ldr	r3, [r2, #4]
    dc68:	ldr	r1, [r2, #8]
    dc6c:	cmp	r3, #1
    dc70:	bne	dc8c <__assert_fail@plt+0x4cbc>
    dc74:	cmp	r1, #0
    dc78:	beq	dc8c <__assert_fail@plt+0x4cbc>
    dc7c:	ldr	r2, [r2, #24]
    dc80:	ldrb	r2, [r2]
    dc84:	cmp	r2, #0
    dc88:	beq	dd00 <__assert_fail@plt+0x4d30>
    dc8c:	add	r1, r3, r1
    dc90:	bl	12cdc <warn@@Base+0x2850>
    dc94:	b	d2f4 <__assert_fail@plt+0x4324>
    dc98:	ldr	sl, [sp, #4]
    dc9c:	ldr	r8, [sp, #20]
    dca0:	ldr	r0, [sl]
    dca4:	ldr	r1, [r8]
    dca8:	bl	12ddc <warn@@Base+0x2950>
    dcac:	cmp	r0, #0
    dcb0:	bne	d2f4 <__assert_fail@plt+0x4324>
    dcb4:	movw	r0, #27492	; 0x6b64
    dcb8:	movt	r0, #1
    dcbc:	bl	109cc <warn@@Base+0x540>
    dcc0:	b	d2f4 <__assert_fail@plt+0x4324>
    dcc4:	ldr	r8, [sp, #4]
    dcc8:	ldr	r0, [r8]
    dccc:	ldr	r3, [r0]
    dcd0:	ldr	r1, [r3, #8]
    dcd4:	bl	12cdc <warn@@Base+0x2850>
    dcd8:	b	d2f4 <__assert_fail@plt+0x4324>
    dcdc:	movw	r3, #5008	; 0x1390
    dce0:	movt	r3, #2
    dce4:	ldr	r0, [r3]
    dce8:	bl	eb44 <__assert_fail@plt+0x5b74>
    dcec:	ldr	sl, [sp, #4]
    dcf0:	ldr	r5, [sl]
    dcf4:	bl	8fac <random@plt>
    dcf8:	mov	r1, r0
    dcfc:	mov	r0, r5
    dd00:	bl	12cdc <warn@@Base+0x2850>
    dd04:	b	d2f4 <__assert_fail@plt+0x4324>
    dd08:	ldr	sl, [sp, #4]
    dd0c:	add	r2, sp, #24
    dd10:	ldr	r8, [sp, #20]
    dd14:	ldr	r1, [sl]
    dd18:	ldr	r3, [r8]
    dd1c:	ldr	r0, [r1, #4]
    dd20:	ldr	r1, [r1]
    dd24:	ldr	r0, [r0]
    dd28:	bl	12774 <warn@@Base+0x22e8>
    dd2c:	b	d7a4 <__assert_fail@plt+0x47d4>
    dd30:	mov	r0, #10
    dd34:	bl	fb24 <__assert_fail@plt+0x6b54>
    dd38:	b	d8a4 <__assert_fail@plt+0x48d4>
    dd3c:	ldr	r3, [sl]
    dd40:	ldr	r0, [r3]
    dd44:	bl	11628 <warn@@Base+0x119c>
    dd48:	cmp	r0, #0
    dd4c:	beq	d7a4 <__assert_fail@plt+0x47d4>
    dd50:	movw	r0, #27560	; 0x6ba8
    dd54:	movt	r0, #1
    dd58:	bl	109cc <warn@@Base+0x540>
    dd5c:	b	d7a4 <__assert_fail@plt+0x47d4>
    dd60:	bl	8e44 <__stack_chk_fail@plt>
    dd64:	push	{r3, r4, r5, r6, r7, lr}
    dd68:	movw	r3, #4848	; 0x12f0
    dd6c:	movt	r3, #2
    dd70:	movw	r2, #4928	; 0x1340
    dd74:	movt	r2, #2
    dd78:	mov	r6, r0
    dd7c:	ldr	r1, [r3]
    dd80:	ldr	r2, [r2]
    dd84:	ldr	r5, [r3, #4]
    dd88:	rsb	r1, r1, r1, lsl #3
    dd8c:	add	r0, r5, #1
    dd90:	str	r0, [r3, #4]
    dd94:	add	r4, r2, r1, lsl #2
    dd98:	ldr	r3, [r4, #8]
    dd9c:	cmp	r5, r3
    dda0:	bge	ddbc <__assert_fail@plt+0x4dec>
    dda4:	ldr	r3, [r4, #4]
    dda8:	strb	r6, [r3, r5]
    ddac:	ldr	r3, [r4, #12]
    ddb0:	add	r3, r3, #1
    ddb4:	str	r3, [r4, #12]
    ddb8:	pop	{r3, r4, r5, r6, r7, pc}
    ddbc:	lsl	r0, r3, #1
    ddc0:	str	r0, [r4, #8]
    ddc4:	bl	fff4 <__assert_fail@plt+0x7024>
    ddc8:	ldmib	r4, {r1, r2}
    ddcc:	add	r2, r2, r2, lsr #31
    ddd0:	asr	r2, r2, #1
    ddd4:	mov	r7, r0
    ddd8:	bl	8e20 <memcpy@plt>
    dddc:	ldr	r0, [r4, #4]
    dde0:	bl	8e08 <free@plt>
    dde4:	mov	r3, r7
    dde8:	str	r7, [r4, #4]
    ddec:	b	dda8 <__assert_fail@plt+0x4dd8>
    ddf0:	push	{r3, lr}
    ddf4:	mov	r0, #0
    ddf8:	bl	ea20 <__assert_fail@plt+0x5a50>
    ddfc:	movw	r2, #4848	; 0x12f0
    de00:	movw	r0, #4844	; 0x12ec
    de04:	movt	r2, #2
    de08:	movt	r0, #2
    de0c:	movw	r1, #4856	; 0x12f8
    de10:	movt	r1, #2
    de14:	mov	r3, #0
    de18:	str	r3, [r2]
    de1c:	str	r3, [r2, #4]
    de20:	strb	r3, [r0]
    de24:	strb	r3, [r1]
    de28:	pop	{r3, pc}
    de2c:	movw	r3, #4864	; 0x1300
    de30:	movt	r3, #2
    de34:	ldr	r3, [r3]
    de38:	cmp	r3, #0
    de3c:	bxne	lr
    de40:	b	dd64 <__assert_fail@plt+0x4d94>
    de44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    de48:	movw	r7, #4848	; 0x12f0
    de4c:	movt	r7, #2
    de50:	movw	r5, #4928	; 0x1340
    de54:	movt	r5, #2
    de58:	asr	r2, r0, #31
    de5c:	ldr	r3, [r7]
    de60:	asr	r4, r0, #6
    de64:	ldr	r6, [r5]
    de68:	lsr	r2, r2, #26
    de6c:	add	sl, r0, r2
    de70:	rsb	r3, r3, r3, lsl #3
    de74:	and	sl, sl, #63	; 0x3f
    de78:	rsb	sl, r2, sl
    de7c:	lsl	r9, r3, #2
    de80:	add	r6, r6, r9
    de84:	ldr	r8, [r6, #16]
    de88:	cmp	r8, #0
    de8c:	movne	r6, r8
    de90:	beq	ded8 <__assert_fail@plt+0x4f08>
    de94:	cmp	r4, #0
    de98:	ble	deb4 <__assert_fail@plt+0x4ee4>
    de9c:	ldr	r5, [r6, #256]	; 0x100
    dea0:	cmp	r5, #0
    dea4:	movne	r6, r5
    dea8:	beq	dec0 <__assert_fail@plt+0x4ef0>
    deac:	subs	r4, r4, #1
    deb0:	bne	de9c <__assert_fail@plt+0x4ecc>
    deb4:	ldr	r3, [r7, #4]
    deb8:	str	r3, [r6, sl, lsl #2]
    debc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dec0:	mov	r0, #260	; 0x104
    dec4:	bl	fff4 <__assert_fail@plt+0x7024>
    dec8:	str	r0, [r6, #256]	; 0x100
    decc:	str	r5, [r0, #256]	; 0x100
    ded0:	ldr	r6, [r6, #256]	; 0x100
    ded4:	b	deac <__assert_fail@plt+0x4edc>
    ded8:	mov	r0, #260	; 0x104
    dedc:	bl	fff4 <__assert_fail@plt+0x7024>
    dee0:	ldr	r3, [r5]
    dee4:	add	r9, r3, r9
    dee8:	str	r0, [r6, #16]
    deec:	ldr	r3, [r9, #16]
    def0:	mov	r6, r3
    def4:	str	r8, [r3, #256]	; 0x100
    def8:	b	de94 <__assert_fail@plt+0x4ec4>
    defc:	push	{r3, r4, r5, r6, r7, lr}
    df00:	mov	r7, r0
    df04:	ldr	r6, [r0]
    df08:	ldrb	r4, [r6]
    df0c:	cmp	r4, #45	; 0x2d
    df10:	addeq	r3, r6, #1
    df14:	streq	r3, [r0]
    df18:	moveq	r5, #1
    df1c:	ldrbeq	r4, [r6, #1]
    df20:	movne	r5, #0
    df24:	moveq	r6, r3
    df28:	bl	8ee0 <__ctype_b_loc@plt>
    df2c:	sub	r3, r6, #1
    df30:	mov	r2, #0
    df34:	b	df4c <__assert_fail@plt+0x4f7c>
    df38:	str	r6, [r7]
    df3c:	ldrb	r2, [r3, #1]!
    df40:	add	r2, r2, r4, lsl #1
    df44:	ldrb	r4, [r3, #1]
    df48:	sub	r2, r2, #48	; 0x30
    df4c:	ldr	ip, [r0]
    df50:	lsl	r1, r4, #1
    df54:	add	r6, r3, #2
    df58:	add	r4, r2, r2, lsl #2
    df5c:	ldrh	r1, [ip, r1]
    df60:	tst	r1, #2048	; 0x800
    df64:	bne	df38 <__assert_fail@plt+0x4f68>
    df68:	cmp	r5, #0
    df6c:	rsbne	r0, r2, #0
    df70:	moveq	r0, r2
    df74:	pop	{r3, r4, r5, r6, r7, pc}
    df78:	movw	r3, #4648	; 0x1228
    df7c:	movt	r3, #2
    df80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df84:	sub	sp, sp, #28
    df88:	ldr	r2, [r3]
    df8c:	movw	r4, #4864	; 0x1300
    df90:	movw	r5, #4844	; 0x12ec
    df94:	movw	r6, #4856	; 0x12f8
    df98:	movw	sl, #4848	; 0x12f0
    df9c:	movw	r7, #4928	; 0x1340
    dfa0:	movt	r4, #2
    dfa4:	movt	r5, #2
    dfa8:	movt	r6, #2
    dfac:	movt	sl, #2
    dfb0:	movt	r7, #2
    dfb4:	str	r3, [sp, #4]
    dfb8:	mov	r3, r0
    dfbc:	movw	r9, #4764	; 0x129c
    dfc0:	str	r0, [sp, #16]
    dfc4:	movt	r9, #2
    dfc8:	str	r2, [sp, #20]
    dfcc:	str	r9, [sp, #8]
    dfd0:	ldrb	r0, [r3]
    dfd4:	cmp	r0, #0
    dfd8:	beq	e024 <__assert_fail@plt+0x5054>
    dfdc:	ldr	r1, [r4]
    dfe0:	cmp	r1, #0
    dfe4:	bne	e024 <__assert_fail@plt+0x5054>
    dfe8:	ldrb	ip, [r5]
    dfec:	movw	r2, #4844	; 0x12ec
    dff0:	movt	r2, #2
    dff4:	cmp	ip, #0
    dff8:	beq	e040 <__assert_fail@plt+0x5070>
    dffc:	cmp	r0, #34	; 0x22
    e000:	strbeq	r1, [r2]
    e004:	add	r2, r3, #1
    e008:	str	r2, [sp, #16]
    e00c:	ldrb	r0, [r3]
    e010:	bl	dd64 <__assert_fail@plt+0x4d94>
    e014:	ldr	r3, [sp, #16]
    e018:	ldrb	r0, [r3]
    e01c:	cmp	r0, #0
    e020:	bne	dfdc <__assert_fail@plt+0x500c>
    e024:	ldr	ip, [sp, #4]
    e028:	ldr	r2, [sp, #20]
    e02c:	ldr	r3, [ip]
    e030:	cmp	r2, r3
    e034:	bne	e62c <__assert_fail@plt+0x565c>
    e038:	add	sp, sp, #28
    e03c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e040:	ldrb	r1, [r6]
    e044:	movw	r2, #4856	; 0x12f8
    e048:	movt	r2, #2
    e04c:	cmp	r1, #0
    e050:	beq	e0f4 <__assert_fail@plt+0x5124>
    e054:	cmp	r0, #10
    e058:	beq	e0e8 <__assert_fail@plt+0x5118>
    e05c:	cmp	r0, #58	; 0x3a
    e060:	beq	e2ac <__assert_fail@plt+0x52dc>
    e064:	cmp	r0, #46	; 0x2e
    e068:	beq	e004 <__assert_fail@plt+0x5034>
    e06c:	cmp	r0, #64	; 0x40
    e070:	add	r2, r3, #1
    e074:	str	r2, [sp, #16]
    e078:	ldrb	r0, [r3]
    e07c:	subhi	r0, r0, #55	; 0x37
    e080:	subls	r0, r0, #48	; 0x30
    e084:	bl	dd64 <__assert_fail@plt+0x4d94>
    e088:	ldr	r3, [sp, #16]
    e08c:	b	dfd0 <__assert_fail@plt+0x5000>
    e090:	add	r8, sp, #24
    e094:	add	r2, r3, #1
    e098:	str	r2, [r8, #-8]!
    e09c:	ldrb	r0, [r3]
    e0a0:	bl	dd64 <__assert_fail@plt+0x4d94>
    e0a4:	mov	r0, r8
    e0a8:	bl	defc <__assert_fail@plt+0x4f2c>
    e0ac:	ldr	r3, [r4]
    e0b0:	cmp	r0, #127	; 0x7f
    e0b4:	mov	r8, r0
    e0b8:	ble	e57c <__assert_fail@plt+0x55ac>
    e0bc:	cmp	r3, #0
    e0c0:	bne	e0e4 <__assert_fail@plt+0x5114>
    e0c4:	ubfx	r0, r0, #8, #8
    e0c8:	orr	r0, r0, #128	; 0x80
    e0cc:	bl	dd64 <__assert_fail@plt+0x4d94>
    e0d0:	ldr	r3, [r4]
    e0d4:	uxtb	r0, r8
    e0d8:	cmp	r3, #0
    e0dc:	bne	e0e4 <__assert_fail@plt+0x5114>
    e0e0:	bl	dd64 <__assert_fail@plt+0x4d94>
    e0e4:	ldr	r3, [sp, #16]
    e0e8:	add	r3, r3, #1
    e0ec:	str	r3, [sp, #16]
    e0f0:	b	dfd0 <__assert_fail@plt+0x5000>
    e0f4:	sub	r2, r0, #10
    e0f8:	cmp	r2, #105	; 0x69
    e0fc:	ldrls	pc, [pc, r2, lsl #2]
    e100:	b	e0e0 <__assert_fail@plt+0x5110>
    e104:	andeq	lr, r0, r8, ror #1
    e108:	andeq	lr, r0, r0, ror #1
    e10c:	andeq	lr, r0, r0, ror #1
    e110:	andeq	lr, r0, r0, ror #1
    e114:	andeq	lr, r0, r0, ror #1
    e118:	andeq	lr, r0, r0, ror #1
    e11c:	andeq	lr, r0, r0, ror #1
    e120:	andeq	lr, r0, r0, ror #1
    e124:	andeq	lr, r0, r0, ror #1
    e128:	andeq	lr, r0, r0, ror #1
    e12c:	andeq	lr, r0, r0, ror #1
    e130:	andeq	lr, r0, r0, ror #1
    e134:	andeq	lr, r0, r0, ror #1
    e138:	andeq	lr, r0, r0, ror #1
    e13c:	andeq	lr, r0, r0, ror #1
    e140:	andeq	lr, r0, r0, ror #1
    e144:	andeq	lr, r0, r0, ror #1
    e148:	andeq	lr, r0, r0, ror #1
    e14c:	andeq	lr, r0, r0, ror #1
    e150:	andeq	lr, r0, r0, ror #1
    e154:	andeq	lr, r0, r0, ror #1
    e158:	andeq	lr, r0, r0, ror #1
    e15c:	andeq	lr, r0, r0, ror #1
    e160:	andeq	lr, r0, r0, ror #1
    e164:	andeq	lr, r0, ip, lsr r5
    e168:	andeq	lr, r0, r0, ror #1
    e16c:	andeq	lr, r0, r0, ror #1
    e170:	andeq	lr, r0, r0, ror #1
    e174:	andeq	lr, r0, r0, ror #1
    e178:	andeq	lr, r0, r0, ror #1
    e17c:	andeq	lr, r0, r0, ror #1
    e180:	andeq	lr, r0, r0, ror #1
    e184:	andeq	lr, r0, r0, ror #1
    e188:	andeq	lr, r0, r0, ror #1
    e18c:	andeq	lr, r0, r0, ror #1
    e190:	andeq	lr, r0, r0, ror #1
    e194:	andeq	lr, r0, r0, ror #1
    e198:	andeq	lr, r0, r0, ror #1
    e19c:	andeq	lr, r0, r0, ror #1
    e1a0:	andeq	lr, r0, r0, ror #1
    e1a4:	andeq	lr, r0, r0, ror #1
    e1a8:	andeq	lr, r0, r0, ror #1
    e1ac:	andeq	lr, r0, r0, ror #1
    e1b0:	andeq	lr, r0, r0, ror #1
    e1b4:	andeq	lr, r0, r0, ror #1
    e1b8:	andeq	lr, r0, r0, ror #1
    e1bc:	andeq	lr, r0, r0, ror #1
    e1c0:	andeq	lr, r0, r0, ror #1
    e1c4:	andeq	lr, r0, r0, ror #1
    e1c8:	andeq	lr, r0, r0, ror #1
    e1cc:	andeq	lr, r0, r0, ror #1
    e1d0:	andeq	lr, r0, r0, ror #1
    e1d4:	andeq	lr, r0, r0, ror #1
    e1d8:	andeq	lr, r0, r0, ror #1
    e1dc:	andeq	lr, r0, ip, lsl #10
    e1e0:	muleq	r0, r0, r0
    e1e4:			; <UNDEFINED> instruction: 0x0000e4bc
    e1e8:	andeq	lr, r0, r8, lsr r4
    e1ec:	andeq	lr, r0, r0, ror #1
    e1f0:	andeq	lr, r0, r0, ror #1
    e1f4:	andeq	lr, r0, r4, asr r3
    e1f8:	andeq	lr, r0, r0, ror #1
    e1fc:	andeq	lr, r0, r0, ror #1
    e200:	andeq	lr, r0, r0, ror #1
    e204:			; <UNDEFINED> instruction: 0x0000e4bc
    e208:	andeq	lr, r0, r4, lsr r3
    e20c:	muleq	r0, r0, r0
    e210:	muleq	r0, r0, r0
    e214:	andeq	lr, r0, r0, lsl r3
    e218:	andeq	lr, r0, r0, ror #1
    e21c:	andeq	lr, r0, r0, ror #1
    e220:	andeq	lr, r0, r0, ror #1
    e224:	andeq	lr, r0, r0, ror #1
    e228:	muleq	r0, r0, r0
    e22c:	andeq	lr, r0, r0, ror #1
    e230:	andeq	lr, r0, r0, ror #1
    e234:	andeq	lr, r0, r0, ror #1
    e238:	andeq	lr, r0, r0, ror #1
    e23c:	andeq	lr, r0, r0, ror #1
    e240:	andeq	lr, r0, r0, ror #1
    e244:			; <UNDEFINED> instruction: 0x0000e4bc
    e248:	andeq	lr, r0, r0, ror #1
    e24c:	andeq	lr, r0, r0, ror #1
    e250:	andeq	lr, r0, r4, ror #5
    e254:	andeq	lr, r0, r0, ror #1
    e258:	andeq	lr, r0, r0, ror #1
    e25c:	andeq	lr, r0, r0, ror #1
    e260:	andeq	lr, r0, r0, ror #1
    e264:	andeq	lr, r0, r0, ror #1
    e268:			; <UNDEFINED> instruction: 0x0000e2b4
    e26c:	muleq	r0, r0, r0
    e270:	andeq	lr, r0, r0, ror #1
    e274:	andeq	lr, r0, r0, ror #1
    e278:	andeq	lr, r0, r0, ror #1
    e27c:	andeq	lr, r0, r0, ror #1
    e280:	muleq	r0, r0, r0
    e284:	andeq	lr, r0, r0, ror #1
    e288:	andeq	lr, r0, r0, ror #1
    e28c:	muleq	r0, r0, r0
    e290:	andeq	lr, r0, r0, ror #1
    e294:	andeq	lr, r0, r0, ror #1
    e298:	andeq	lr, r0, r0, ror #1
    e29c:	andeq	lr, r0, r0, ror #1
    e2a0:	andeq	lr, r0, r0, ror #1
    e2a4:	andeq	lr, r0, r0, ror #1
    e2a8:	muleq	r0, r0, r0
    e2ac:	strb	ip, [r2]
    e2b0:	b	e004 <__assert_fail@plt+0x5034>
    e2b4:	add	r2, r3, #1
    e2b8:	str	r2, [sp, #16]
    e2bc:	ldrb	r0, [r3]
    e2c0:	bl	dd64 <__assert_fail@plt+0x4d94>
    e2c4:	ldr	r2, [r4]
    e2c8:	ldr	r3, [sp, #16]
    e2cc:	cmp	r2, #0
    e2d0:	ldrb	r0, [r3]
    e2d4:	beq	e0e0 <__assert_fail@plt+0x5110>
    e2d8:	add	r3, r3, #1
    e2dc:	str	r3, [sp, #16]
    e2e0:	b	dfd0 <__assert_fail@plt+0x5000>
    e2e4:	ldr	r9, [sp, #8]
    e2e8:	mov	r8, #1
    e2ec:	ldr	r2, [sl]
    e2f0:	add	r3, r3, #1
    e2f4:	ldr	ip, [r7]
    e2f8:	ldm	r9, {r0, r1}
    e2fc:	rsb	r2, r2, r2, lsl #3
    e300:	strb	r8, [ip, r2, lsl #2]
    e304:	stm	sl, {r0, r1}
    e308:	str	r3, [sp, #16]
    e30c:	b	dfd0 <__assert_fail@plt+0x5000>
    e310:	add	r0, sp, #24
    e314:	add	r3, r3, #1
    e318:	str	r3, [r0, #-8]!
    e31c:	bl	defc <__assert_fail@plt+0x4f2c>
    e320:	bl	de44 <__assert_fail@plt+0x4e74>
    e324:	ldr	r3, [sp, #16]
    e328:	add	r3, r3, #1
    e32c:	str	r3, [sp, #16]
    e330:	b	dfd0 <__assert_fail@plt+0x5000>
    e334:	mov	r0, #75	; 0x4b
    e338:	bl	dd64 <__assert_fail@plt+0x4d94>
    e33c:	ldr	r3, [sp, #16]
    e340:	mov	r2, #1
    e344:	strb	r2, [r6]
    e348:	add	r3, r3, #1
    e34c:	str	r3, [sp, #16]
    e350:	b	dfd0 <__assert_fail@plt+0x5000>
    e354:	add	r8, sp, #24
    e358:	add	r3, r3, #1
    e35c:	str	r3, [r8, #-8]!
    e360:	mov	r0, r8
    e364:	bl	defc <__assert_fail@plt+0x4f2c>
    e368:	str	r0, [sp, #12]
    e36c:	bl	ea20 <__assert_fail@plt+0x5a50>
    e370:	ldr	ip, [sp, #12]
    e374:	rsb	r9, ip, ip, lsl #3
    e378:	lsl	r9, r9, #2
    e37c:	ldr	r2, [sp, #16]
    e380:	add	r3, r2, #1
    e384:	str	r3, [sp, #16]
    e388:	ldrb	r1, [r2]
    e38c:	cmp	r1, #46	; 0x2e
    e390:	beq	e404 <__assert_fail@plt+0x5434>
    e394:	ldrb	r3, [r2, #1]
    e398:	cmp	r3, #46	; 0x2e
    e39c:	beq	e5bc <__assert_fail@plt+0x55ec>
    e3a0:	cmp	r3, #42	; 0x2a
    e3a4:	mov	r0, r8
    e3a8:	beq	e550 <__assert_fail@plt+0x5580>
    e3ac:	bl	defc <__assert_fail@plt+0x4f2c>
    e3b0:	ldr	fp, [r7]
    e3b4:	mov	r2, #0
    e3b8:	add	fp, fp, r9
    e3bc:	mov	r1, r0
    e3c0:	ldr	r0, [fp, #20]
    e3c4:	bl	1003c <__assert_fail@plt+0x706c>
    e3c8:	str	r0, [fp, #20]
    e3cc:	b	e37c <__assert_fail@plt+0x53ac>
    e3d0:	cmp	r2, #44	; 0x2c
    e3d4:	mov	r0, r8
    e3d8:	addeq	r3, r3, #1
    e3dc:	streq	r3, [sp, #16]
    e3e0:	bl	defc <__assert_fail@plt+0x4f2c>
    e3e4:	ldr	fp, [r7]
    e3e8:	mov	r2, #0
    e3ec:	add	fp, fp, r9
    e3f0:	mov	r1, r0
    e3f4:	ldr	r0, [fp, #24]
    e3f8:	bl	1003c <__assert_fail@plt+0x706c>
    e3fc:	ldr	r3, [sp, #16]
    e400:	str	r0, [fp, #24]
    e404:	ldrb	r2, [r3]
    e408:	cmp	r2, #91	; 0x5b
    e40c:	bne	e3d0 <__assert_fail@plt+0x5400>
    e410:	ldm	sl, {r0, r1}
    e414:	mov	r2, #0
    e418:	ldr	r9, [sp, #12]
    e41c:	add	r3, r3, #1
    e420:	ldr	ip, [sp, #8]
    e424:	str	r2, [sl, #4]
    e428:	str	r9, [sl]
    e42c:	stm	ip, {r0, r1}
    e430:	str	r3, [sp, #16]
    e434:	b	dfd0 <__assert_fail@plt+0x5000>
    e438:	add	r8, sp, #24
    e43c:	add	r2, r3, #1
    e440:	str	r2, [r8, #-8]!
    e444:	ldrb	r0, [r3]
    e448:	bl	dd64 <__assert_fail@plt+0x4d94>
    e44c:	mov	r0, r8
    e450:	bl	defc <__assert_fail@plt+0x4f2c>
    e454:	ldr	r3, [r4]
    e458:	cmp	r0, #127	; 0x7f
    e45c:	mov	r8, r0
    e460:	ble	e588 <__assert_fail@plt+0x55b8>
    e464:	cmp	r3, #0
    e468:	beq	e608 <__assert_fail@plt+0x5638>
    e46c:	ldr	r3, [sp, #16]
    e470:	ldrb	r0, [r3]
    e474:	cmp	r0, #44	; 0x2c
    e478:	beq	e5f4 <__assert_fail@plt+0x5624>
    e47c:	ldr	r1, [r4]
    e480:	sub	r2, r3, #1
    e484:	b	e4a0 <__assert_fail@plt+0x54d0>
    e488:	cmp	r1, #0
    e48c:	add	r3, r3, #1
    e490:	str	r3, [sp, #16]
    e494:	ldrb	r0, [r2, #1]!
    e498:	beq	e5ac <__assert_fail@plt+0x55dc>
    e49c:	ldrb	r0, [r2, #1]
    e4a0:	cmp	r0, #58	; 0x3a
    e4a4:	bne	e488 <__assert_fail@plt+0x54b8>
    e4a8:	cmp	r1, #0
    e4ac:	beq	e0e0 <__assert_fail@plt+0x5110>
    e4b0:	add	r3, r3, #1
    e4b4:	str	r3, [sp, #16]
    e4b8:	b	dfd0 <__assert_fail@plt+0x5000>
    e4bc:	add	r8, sp, #24
    e4c0:	add	r2, r3, #1
    e4c4:	str	r2, [r8, #-8]!
    e4c8:	ldrb	r0, [r3]
    e4cc:	bl	dd64 <__assert_fail@plt+0x4d94>
    e4d0:	mov	r0, r8
    e4d4:	bl	defc <__assert_fail@plt+0x4f2c>
    e4d8:	cmp	r0, #65536	; 0x10000
    e4dc:	mov	r8, r0
    e4e0:	bge	e630 <__assert_fail@plt+0x5660>
    e4e4:	ldr	r3, [r4]
    e4e8:	cmp	r3, #0
    e4ec:	bne	e0e4 <__assert_fail@plt+0x5114>
    e4f0:	uxtb	r0, r0
    e4f4:	bl	dd64 <__assert_fail@plt+0x4d94>
    e4f8:	ldr	r3, [r4]
    e4fc:	ubfx	r0, r8, #8, #8
    e500:	cmp	r3, #0
    e504:	beq	e0e0 <__assert_fail@plt+0x5110>
    e508:	b	e0e4 <__assert_fail@plt+0x5114>
    e50c:	add	r2, r3, #1
    e510:	str	r2, [sp, #16]
    e514:	ldrb	r3, [r3, #1]
    e518:	cmp	r3, #105	; 0x69
    e51c:	beq	e5c8 <__assert_fail@plt+0x55f8>
    e520:	cmp	r3, #114	; 0x72
    e524:	bne	e59c <__assert_fail@plt+0x55cc>
    e528:	bl	cdfc <__assert_fail@plt+0x3e2c>
    e52c:	ldr	r3, [sp, #16]
    e530:	add	r3, r3, #1
    e534:	str	r3, [sp, #16]
    e538:	b	dfd0 <__assert_fail@plt+0x5000>
    e53c:	mov	r2, #1
    e540:	add	r3, r3, #1
    e544:	strb	r2, [r5]
    e548:	str	r3, [sp, #16]
    e54c:	b	dfd0 <__assert_fail@plt+0x5000>
    e550:	add	r2, r2, #2
    e554:	str	r2, [sp, #16]
    e558:	bl	defc <__assert_fail@plt+0x4f2c>
    e55c:	ldr	fp, [r7]
    e560:	mov	r2, #1
    e564:	add	fp, fp, r9
    e568:	mov	r1, r0
    e56c:	ldr	r0, [fp, #20]
    e570:	bl	1003c <__assert_fail@plt+0x706c>
    e574:	str	r0, [fp, #20]
    e578:	b	e37c <__assert_fail@plt+0x53ac>
    e57c:	cmp	r3, #0
    e580:	bne	e0e4 <__assert_fail@plt+0x5114>
    e584:	b	e0e0 <__assert_fail@plt+0x5110>
    e588:	cmp	r3, #0
    e58c:	bne	e46c <__assert_fail@plt+0x549c>
    e590:	uxtb	r0, r0
    e594:	bl	dd64 <__assert_fail@plt+0x4d94>
    e598:	b	e46c <__assert_fail@plt+0x549c>
    e59c:	mov	r3, r2
    e5a0:	add	r3, r3, #1
    e5a4:	str	r3, [sp, #16]
    e5a8:	b	dfd0 <__assert_fail@plt+0x5000>
    e5ac:	bl	dd64 <__assert_fail@plt+0x4d94>
    e5b0:	ldr	r3, [sp, #16]
    e5b4:	ldrb	r0, [r3]
    e5b8:	b	e47c <__assert_fail@plt+0x54ac>
    e5bc:	add	r3, r2, #2
    e5c0:	str	r3, [sp, #16]
    e5c4:	b	e404 <__assert_fail@plt+0x5434>
    e5c8:	mov	r0, #0
    e5cc:	bl	ea20 <__assert_fail@plt+0x5a50>
    e5d0:	ldr	r3, [sp, #16]
    e5d4:	mov	r2, #0
    e5d8:	str	r2, [sl]
    e5dc:	add	r3, r3, #1
    e5e0:	str	r2, [sl, #4]
    e5e4:	strb	r2, [r5]
    e5e8:	strb	r2, [r6]
    e5ec:	str	r3, [sp, #16]
    e5f0:	b	dfd0 <__assert_fail@plt+0x5000>
    e5f4:	add	r2, r3, #1
    e5f8:	str	r2, [sp, #16]
    e5fc:	ldrb	r0, [r3, #1]
    e600:	mov	r3, r2
    e604:	b	e47c <__assert_fail@plt+0x54ac>
    e608:	ubfx	r0, r0, #8, #8
    e60c:	orr	r0, r0, #128	; 0x80
    e610:	bl	dd64 <__assert_fail@plt+0x4d94>
    e614:	ldr	r3, [r4]
    e618:	uxtb	r0, r8
    e61c:	cmp	r3, #0
    e620:	bne	e46c <__assert_fail@plt+0x549c>
    e624:	bl	dd64 <__assert_fail@plt+0x4d94>
    e628:	b	e46c <__assert_fail@plt+0x549c>
    e62c:	bl	8e44 <__stack_chk_fail@plt>
    e630:	movw	r3, #4664	; 0x1238
    e634:	movt	r3, #2
    e638:	movw	r0, #27628	; 0x6bec
    e63c:	mov	r1, #1
    e640:	ldr	r3, [r3]
    e644:	movt	r0, #1
    e648:	mov	r2, #17
    e64c:	bl	8e68 <fwrite@plt>
    e650:	mov	r0, #1
    e654:	bl	8eec <exit@plt>
    e658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e65c:	movw	r9, #4884	; 0x1314
    e660:	movt	r9, #2
    e664:	sub	sp, sp, #20
    e668:	movw	r7, #4928	; 0x1340
    e66c:	movt	r7, #2
    e670:	ldr	r2, [r9]
    e674:	movw	fp, #4944	; 0x1350
    e678:	movt	fp, #2
    e67c:	add	r3, r2, #32
    e680:	str	r3, [r9]
    e684:	str	r2, [sp, #8]
    e688:	rsb	r0, r3, r3, lsl #3
    e68c:	ldr	r2, [r7]
    e690:	ldr	sl, [fp]
    e694:	lsl	r0, r0, #2
    e698:	str	r2, [sp, #4]
    e69c:	bl	fff4 <__assert_fail@plt+0x7024>
    e6a0:	ldr	r3, [r9]
    e6a4:	str	r0, [r7]
    e6a8:	lsl	r0, r3, #2
    e6ac:	bl	fff4 <__assert_fail@plt+0x7024>
    e6b0:	ldr	r3, [sp, #8]
    e6b4:	cmp	r3, #0
    e6b8:	str	r0, [fp]
    e6bc:	ble	e7ac <__assert_fail@plt+0x57dc>
    e6c0:	lsl	r3, r3, #2
    e6c4:	mov	r5, #0
    e6c8:	str	r9, [sp, #12]
    e6cc:	mov	r8, r0
    e6d0:	mov	r6, r5
    e6d4:	mov	r9, r3
    e6d8:	b	e6e0 <__assert_fail@plt+0x5710>
    e6dc:	ldr	r8, [fp]
    e6e0:	ldr	r3, [sp, #4]
    e6e4:	ldr	ip, [r7]
    e6e8:	add	r4, r3, r6
    e6ec:	add	ip, ip, r6
    e6f0:	add	r6, r6, #28
    e6f4:	ldm	r4!, {r0, r1, r2, r3}
    e6f8:	stmia	ip!, {r0, r1, r2, r3}
    e6fc:	ldm	r4, {r0, r1, r2}
    e700:	stm	ip, {r0, r1, r2}
    e704:	ldr	r3, [sl, r5]
    e708:	str	r3, [r8, r5]
    e70c:	add	r5, r5, #4
    e710:	cmp	r5, r9
    e714:	bne	e6dc <__assert_fail@plt+0x570c>
    e718:	ldr	r9, [sp, #12]
    e71c:	ldr	fp, [sp, #8]
    e720:	ldr	r3, [r9]
    e724:	cmp	fp, r3
    e728:	rsblt	r8, fp, fp, lsl #3
    e72c:	movlt	r5, #0
    e730:	movlt	r6, #1024	; 0x400
    e734:	lsllt	r8, r8, #2
    e738:	bge	e780 <__assert_fail@plt+0x57b0>
    e73c:	ldr	r3, [r7]
    e740:	mov	r0, #1024	; 0x400
    e744:	add	fp, fp, #1
    e748:	add	r4, r3, r8
    e74c:	strb	r5, [r3, r8]
    e750:	add	r8, r8, #28
    e754:	strb	r5, [r4, #1]
    e758:	bl	fff4 <__assert_fail@plt+0x7024>
    e75c:	ldr	r3, [r9]
    e760:	str	r6, [r4, #8]
    e764:	cmp	r3, fp
    e768:	str	r5, [r4, #12]
    e76c:	str	r5, [r4, #16]
    e770:	str	r5, [r4, #24]
    e774:	str	r5, [r4, #20]
    e778:	str	r0, [r4, #4]
    e77c:	bgt	e73c <__assert_fail@plt+0x576c>
    e780:	ldr	r2, [sp, #8]
    e784:	cmp	r2, #0
    e788:	bne	e794 <__assert_fail@plt+0x57c4>
    e78c:	add	sp, sp, #20
    e790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e794:	ldr	r0, [sp, #4]
    e798:	bl	8e08 <free@plt>
    e79c:	mov	r0, sl
    e7a0:	add	sp, sp, #20
    e7a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7a8:	b	8e08 <free@plt>
    e7ac:	mov	fp, #0
    e7b0:	b	e720 <__assert_fail@plt+0x5750>
    e7b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e7b8:	movw	r9, #4916	; 0x1334
    e7bc:	movt	r9, #2
    e7c0:	movw	r4, #4988	; 0x137c
    e7c4:	movw	r8, #4964	; 0x1364
    e7c8:	movt	r4, #2
    e7cc:	ldr	r7, [r9]
    e7d0:	movt	r8, #2
    e7d4:	ldr	r6, [r4]
    e7d8:	add	r0, r7, #32
    e7dc:	str	r0, [r9]
    e7e0:	ldr	r5, [r8]
    e7e4:	lsl	sl, r0, #2
    e7e8:	mov	r0, sl
    e7ec:	bl	fff4 <__assert_fail@plt+0x7024>
    e7f0:	ldr	r3, [r9]
    e7f4:	str	r0, [r4]
    e7f8:	lsl	r0, r3, #2
    e7fc:	bl	fff4 <__assert_fail@plt+0x7024>
    e800:	cmp	r7, #3
    e804:	str	r0, [r8]
    e808:	ble	e884 <__assert_fail@plt+0x58b4>
    e80c:	sub	r0, sl, #128	; 0x80
    e810:	mov	r3, #12
    e814:	ldr	r1, [r6, r3]
    e818:	ldr	r2, [r4]
    e81c:	str	r1, [r2, r3]
    e820:	ldr	r1, [r5, r3]
    e824:	ldr	r2, [r8]
    e828:	str	r1, [r2, r3]
    e82c:	add	r3, r3, #4
    e830:	cmp	r3, r0
    e834:	bne	e814 <__assert_fail@plt+0x5844>
    e838:	mov	r3, r7
    e83c:	ldr	r0, [r9]
    e840:	cmp	r3, r0
    e844:	lsllt	r2, r3, #2
    e848:	movlt	ip, #0
    e84c:	bge	e868 <__assert_fail@plt+0x5898>
    e850:	add	r3, r3, #1
    e854:	ldr	r1, [r4]
    e858:	cmp	r3, r0
    e85c:	str	ip, [r1, r2]
    e860:	add	r2, r2, #4
    e864:	bne	e850 <__assert_fail@plt+0x5880>
    e868:	cmp	r7, #0
    e86c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    e870:	mov	r0, r6
    e874:	bl	8e08 <free@plt>
    e878:	mov	r0, r5
    e87c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    e880:	b	8e08 <free@plt>
    e884:	mov	r3, #3
    e888:	b	e83c <__assert_fail@plt+0x586c>
    e88c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e890:	movw	r9, #4900	; 0x1324
    e894:	movt	r9, #2
    e898:	movw	r4, #4892	; 0x131c
    e89c:	movw	sl, #4896	; 0x1320
    e8a0:	movt	r4, #2
    e8a4:	ldr	r7, [r9]
    e8a8:	movt	sl, #2
    e8ac:	ldr	r8, [r4]
    e8b0:	add	r0, r7, #32
    e8b4:	str	r0, [r9]
    e8b8:	ldr	r5, [sl]
    e8bc:	lsl	r6, r0, #2
    e8c0:	mov	r0, r6
    e8c4:	bl	fff4 <__assert_fail@plt+0x7024>
    e8c8:	ldr	r3, [r9]
    e8cc:	str	r0, [r4]
    e8d0:	lsl	r0, r3, #2
    e8d4:	bl	fff4 <__assert_fail@plt+0x7024>
    e8d8:	cmp	r7, #1
    e8dc:	str	r0, [sl]
    e8e0:	ble	e964 <__assert_fail@plt+0x5994>
    e8e4:	sub	r0, r6, #128	; 0x80
    e8e8:	mov	r1, r8
    e8ec:	mov	r2, r5
    e8f0:	mov	r3, #4
    e8f4:	ldr	r6, [r1, #4]!
    e8f8:	ldr	ip, [r4]
    e8fc:	str	r6, [ip, r3]
    e900:	ldr	r6, [r2, #4]!
    e904:	ldr	ip, [sl]
    e908:	str	r6, [ip, r3]
    e90c:	add	r3, r3, #4
    e910:	cmp	r3, r0
    e914:	bne	e8f4 <__assert_fail@plt+0x5924>
    e918:	mov	r3, r7
    e91c:	ldr	r0, [r9]
    e920:	cmp	r3, r0
    e924:	lsllt	r2, r3, #2
    e928:	movlt	ip, #0
    e92c:	bge	e948 <__assert_fail@plt+0x5978>
    e930:	add	r3, r3, #1
    e934:	ldr	r1, [r4]
    e938:	cmp	r3, r0
    e93c:	str	ip, [r1, r2]
    e940:	add	r2, r2, #4
    e944:	bne	e930 <__assert_fail@plt+0x5960>
    e948:	cmp	r7, #0
    e94c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    e950:	mov	r0, r8
    e954:	bl	8e08 <free@plt>
    e958:	mov	r0, r5
    e95c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    e960:	b	8e08 <free@plt>
    e964:	mov	r3, #1
    e968:	b	e91c <__assert_fail@plt+0x594c>
    e96c:	movw	r3, #4884	; 0x1314
    e970:	movt	r3, #2
    e974:	push	{r4, r5, r6, r7, r8, lr}
    e978:	mov	r4, #0
    e97c:	str	r4, [r3]
    e980:	bl	e658 <__assert_fail@plt+0x5688>
    e984:	movw	r2, #4944	; 0x1350
    e988:	movt	r2, #2
    e98c:	movw	r3, #4916	; 0x1334
    e990:	movt	r3, #2
    e994:	ldr	r1, [r2]
    e998:	movw	r2, #27648	; 0x6c00
    e99c:	movt	r2, #1
    e9a0:	movw	r6, #4996	; 0x1384
    e9a4:	movw	r5, #4888	; 0x1318
    e9a8:	movt	r6, #2
    e9ac:	str	r2, [r1]
    e9b0:	movt	r5, #2
    e9b4:	str	r4, [r3]
    e9b8:	bl	e7b4 <__assert_fail@plt+0x57e4>
    e9bc:	movw	r3, #4900	; 0x1324
    e9c0:	movt	r3, #2
    e9c4:	mov	r7, #10
    e9c8:	mvn	r8, #0
    e9cc:	str	r4, [r3]
    e9d0:	bl	e88c <__assert_fail@plt+0x58bc>
    e9d4:	movw	ip, #4960	; 0x1360
    e9d8:	movw	r0, #4956	; 0x135c
    e9dc:	movt	ip, #2
    e9e0:	movt	r0, #2
    e9e4:	movw	r1, #4972	; 0x136c
    e9e8:	movw	r2, #4936	; 0x1348
    e9ec:	movt	r1, #2
    e9f0:	movt	r2, #2
    e9f4:	movw	r3, #4908	; 0x132c
    e9f8:	movt	r3, #2
    e9fc:	str	r4, [r6]
    ea00:	str	r4, [r5]
    ea04:	str	r4, [ip]
    ea08:	strb	r4, [r0]
    ea0c:	str	r7, [r1]
    ea10:	str	r7, [r2]
    ea14:	str	r8, [r3]
    ea18:	pop	{r4, r5, r6, r7, r8, lr}
    ea1c:	b	11564 <warn@@Base+0x10d8>
    ea20:	push	{r3, r4, r5, lr}
    ea24:	movw	r3, #4928	; 0x1340
    ea28:	movt	r3, #2
    ea2c:	rsb	r0, r0, r0, lsl #3
    ea30:	mov	r4, #0
    ea34:	ldr	r2, [r3]
    ea38:	lsl	r3, r0, #2
    ea3c:	add	r5, r2, r3
    ea40:	strb	r4, [r2, r3]
    ea44:	ldr	r0, [r5, #24]
    ea48:	str	r4, [r5, #12]
    ea4c:	cmp	r0, r4
    ea50:	beq	ea5c <__assert_fail@plt+0x5a8c>
    ea54:	bl	fa80 <__assert_fail@plt+0x6ab0>
    ea58:	str	r4, [r5, #24]
    ea5c:	ldr	r0, [r5, #20]
    ea60:	cmp	r0, #0
    ea64:	beq	ea74 <__assert_fail@plt+0x5aa4>
    ea68:	bl	fa80 <__assert_fail@plt+0x6ab0>
    ea6c:	mov	r3, #0
    ea70:	str	r3, [r5, #20]
    ea74:	ldr	r0, [r5, #16]
    ea78:	cmp	r0, #0
    ea7c:	popeq	{r3, r4, r5, pc}
    ea80:	ldr	r4, [r0, #256]	; 0x100
    ea84:	bl	8e08 <free@plt>
    ea88:	cmp	r4, #0
    ea8c:	mov	r0, r4
    ea90:	str	r4, [r5, #16]
    ea94:	bne	ea80 <__assert_fail@plt+0x5ab0>
    ea98:	pop	{r3, r4, r5, pc}
    ea9c:	movw	r3, #4888	; 0x1318
    eaa0:	movt	r3, #2
    eaa4:	push	{r4, lr}
    eaa8:	ldr	r4, [r3]
    eaac:	cmp	r4, #0
    eab0:	beq	ead0 <__assert_fail@plt+0x5b00>
    eab4:	ldr	r2, [r4, #4]
    eab8:	mov	r0, r4
    eabc:	ldr	r4, [r4]
    eac0:	str	r2, [r3]
    eac4:	bl	8e08 <free@plt>
    eac8:	mov	r0, r4
    eacc:	pop	{r4, pc}
    ead0:	movw	r0, #27656	; 0x6c08
    ead4:	movt	r0, #1
    ead8:	bl	109cc <warn@@Base+0x540>
    eadc:	mov	r0, r4
    eae0:	pop	{r4, pc}
    eae4:	push	{r4, lr}
    eae8:	mov	r4, r0
    eaec:	mov	r0, #8
    eaf0:	bl	fff4 <__assert_fail@plt+0x7024>
    eaf4:	movw	r3, #4888	; 0x1318
    eaf8:	movt	r3, #2
    eafc:	ldr	r1, [r3]
    eb00:	str	r4, [r0]
    eb04:	str	r1, [r0, #4]
    eb08:	str	r0, [r3]
    eb0c:	pop	{r4, pc}
    eb10:	movw	r3, #4996	; 0x1384
    eb14:	movt	r3, #2
    eb18:	push	{r4, lr}
    eb1c:	ldr	r4, [r3]
    eb20:	cmp	r4, #0
    eb24:	popeq	{r4, pc}
    eb28:	ldr	r2, [r4, #4]
    eb2c:	mov	r0, r4
    eb30:	str	r2, [r3]
    eb34:	bl	11504 <warn@@Base+0x1078>
    eb38:	mov	r0, r4
    eb3c:	pop	{r4, lr}
    eb40:	b	8e08 <free@plt>
    eb44:	push	{r3, r4, r5, lr}
    eb48:	mov	r5, r0
    eb4c:	mov	r0, #8
    eb50:	bl	fff4 <__assert_fail@plt+0x7024>
    eb54:	mov	r4, r0
    eb58:	mov	r0, r5
    eb5c:	bl	115d0 <warn@@Base+0x1144>
    eb60:	movw	r3, #4996	; 0x1384
    eb64:	movt	r3, #2
    eb68:	ldr	r2, [r3]
    eb6c:	stm	r4, {r0, r2}
    eb70:	str	r4, [r3]
    eb74:	pop	{r3, r4, r5, pc}
    eb78:	push	{r4, lr}
    eb7c:	mov	r4, r0
    eb80:	mov	r0, #8
    eb84:	bl	fff4 <__assert_fail@plt+0x7024>
    eb88:	movw	r3, #4996	; 0x1384
    eb8c:	movt	r3, #2
    eb90:	ldr	r1, [r3]
    eb94:	str	r4, [r0]
    eb98:	str	r1, [r0, #4]
    eb9c:	str	r0, [r3]
    eba0:	pop	{r4, pc}
    eba4:	push	{r3, lr}
    eba8:	movw	r3, #4996	; 0x1384
    ebac:	movt	r3, #2
    ebb0:	ldr	r3, [r3]
    ebb4:	cmp	r3, #0
    ebb8:	cmpne	r0, #0
    ebbc:	ble	ebd4 <__assert_fail@plt+0x5c04>
    ebc0:	ldr	r3, [r3, #4]
    ebc4:	sub	r0, r0, #1
    ebc8:	cmp	r3, #0
    ebcc:	cmpne	r0, #0
    ebd0:	bgt	ebc0 <__assert_fail@plt+0x5bf0>
    ebd4:	cmp	r0, #0
    ebd8:	ble	ebf0 <__assert_fail@plt+0x5c20>
    ebdc:	movw	r0, #27704	; 0x6c38
    ebe0:	movt	r0, #1
    ebe4:	bl	109cc <warn@@Base+0x540>
    ebe8:	mov	r0, #0
    ebec:	pop	{r3, pc}
    ebf0:	mov	r0, #1
    ebf4:	pop	{r3, pc}
    ebf8:	movw	r3, #4988	; 0x137c
    ebfc:	movt	r3, #2
    ec00:	push	{r4, r5, r6, lr}
    ec04:	mov	r6, r0
    ec08:	ldr	r5, [r3]
    ec0c:	ldr	r4, [r5, r0, lsl #2]
    ec10:	cmp	r4, #0
    ec14:	beq	ec20 <__assert_fail@plt+0x5c50>
    ec18:	mov	r0, r4
    ec1c:	pop	{r4, r5, r6, pc}
    ec20:	mov	r0, #8
    ec24:	bl	fff4 <__assert_fail@plt+0x7024>
    ec28:	mov	r4, r0
    ec2c:	str	r0, [r5, r6, lsl #2]
    ec30:	bl	115e0 <warn@@Base+0x1154>
    ec34:	mov	r0, r4
    ec38:	pop	{r4, r5, r6, pc}
    ec3c:	movw	r3, #4892	; 0x131c
    ec40:	movt	r3, #2
    ec44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec48:	movw	sl, #4648	; 0x1228
    ec4c:	ldr	r6, [r3]
    ec50:	movt	sl, #2
    ec54:	sub	sp, sp, #28
    ec58:	mov	r7, r0
    ec5c:	ldr	r3, [sl]
    ec60:	mov	r5, r1
    ec64:	ldr	r4, [r6, r0, lsl #2]
    ec68:	cmp	r4, #0
    ec6c:	str	r3, [sp, #20]
    ec70:	beq	edcc <__assert_fail@plt+0x5dfc>
    ec74:	ldr	r9, [r4]
    ec78:	cmp	r9, #0
    ec7c:	ldrshne	r0, [r9, #4]
    ec80:	beq	edec <__assert_fail@plt+0x5e1c>
    ec84:	add	fp, sp, #24
    ec88:	and	r2, r5, #63	; 0x3f
    ec8c:	asr	r3, r5, #6
    ec90:	mov	r8, #1
    ec94:	str	r2, [fp, #-20]!	; 0xffffffec
    ec98:	mov	r2, fp
    ec9c:	b	ecb0 <__assert_fail@plt+0x5ce0>
    eca0:	and	r1, r3, #63	; 0x3f
    eca4:	add	r8, r8, #1
    eca8:	asr	r3, r3, #6
    ecac:	str	r1, [r2, #4]!
    ecb0:	cmp	r3, #0
    ecb4:	bgt	eca0 <__assert_fail@plt+0x5cd0>
    ecb8:	cmp	r8, r0
    ecbc:	blt	eca0 <__assert_fail@plt+0x5cd0>
    ecc0:	cmp	r0, r8
    ecc4:	ldrge	r5, [r9]
    ecc8:	bge	ed2c <__assert_fail@plt+0x5d5c>
    eccc:	movw	r6, #5008	; 0x1390
    ecd0:	movt	r6, #2
    ecd4:	mov	r7, #0
    ecd8:	mov	r0, #256	; 0x100
    ecdc:	bl	fff4 <__assert_fail@plt+0x7024>
    ece0:	ldrh	r4, [r9, #4]
    ece4:	cmp	r4, #0
    ece8:	mov	r5, r0
    ecec:	beq	edac <__assert_fail@plt+0x5ddc>
    ecf0:	ldr	r1, [r9]
    ecf4:	mov	r2, r0
    ecf8:	mov	r3, #1
    ecfc:	str	r1, [r0]
    ed00:	add	r3, r3, #1
    ed04:	str	r7, [r2, #4]!
    ed08:	cmp	r3, #64	; 0x40
    ed0c:	bne	ed00 <__assert_fail@plt+0x5d30>
    ed10:	add	r4, r4, #1
    ed14:	str	r5, [r9]
    ed18:	uxth	r4, r4
    ed1c:	strh	r4, [r9, #4]
    ed20:	sxth	r4, r4
    ed24:	cmp	r4, r8
    ed28:	blt	ecd8 <__assert_fail@plt+0x5d08>
    ed2c:	movw	r7, #5008	; 0x1390
    ed30:	add	fp, fp, r8, lsl #2
    ed34:	movt	r7, #2
    ed38:	mov	r4, #0
    ed3c:	subs	r8, r8, #1
    ed40:	ble	ed8c <__assert_fail@plt+0x5dbc>
    ed44:	ldr	r3, [fp, #-4]!
    ed48:	add	r6, r5, r3, lsl #2
    ed4c:	ldr	r5, [r5, r3, lsl #2]
    ed50:	cmp	r5, #0
    ed54:	bne	ed3c <__assert_fail@plt+0x5d6c>
    ed58:	mov	r0, #256	; 0x100
    ed5c:	bl	fff4 <__assert_fail@plt+0x7024>
    ed60:	cmp	r8, #1
    ed64:	mov	r5, r0
    ed68:	str	r0, [r6]
    ed6c:	ble	ee10 <__assert_fail@plt+0x5e40>
    ed70:	mov	r3, #0
    ed74:	str	r4, [r5, r3]
    ed78:	add	r3, r3, #4
    ed7c:	cmp	r3, #256	; 0x100
    ed80:	bne	ed74 <__assert_fail@plt+0x5da4>
    ed84:	subs	r8, r8, #1
    ed88:	bgt	ed44 <__assert_fail@plt+0x5d74>
    ed8c:	ldr	r2, [sp, #20]
    ed90:	ldr	r3, [sl]
    ed94:	ldr	r0, [sp, #4]
    ed98:	cmp	r2, r3
    ed9c:	add	r0, r5, r0, lsl #2
    eda0:	bne	ee30 <__assert_fail@plt+0x5e60>
    eda4:	add	sp, sp, #28
    eda8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edac:	ldr	r0, [r6]
    edb0:	bl	115d0 <warn@@Base+0x1144>
    edb4:	str	r0, [r5, r4]
    edb8:	add	r4, r4, #4
    edbc:	cmp	r4, #256	; 0x100
    edc0:	bne	edac <__assert_fail@plt+0x5ddc>
    edc4:	ldrh	r4, [r9, #4]
    edc8:	b	ed10 <__assert_fail@plt+0x5d40>
    edcc:	mov	r0, #12
    edd0:	bl	fff4 <__assert_fail@plt+0x7024>
    edd4:	mov	r3, #0
    edd8:	mov	r4, r0
    eddc:	str	r0, [r6, r7, lsl #2]
    ede0:	str	r3, [r0]
    ede4:	str	r3, [r0, #8]
    ede8:	strb	r3, [r0, #4]
    edec:	mov	r0, #8
    edf0:	bl	fff4 <__assert_fail@plt+0x7024>
    edf4:	mov	r3, #0
    edf8:	mov	r9, r0
    edfc:	str	r0, [r4]
    ee00:	mov	r0, r3
    ee04:	str	r3, [r9]
    ee08:	strh	r3, [r9, #4]
    ee0c:	b	ec84 <__assert_fail@plt+0x5cb4>
    ee10:	mov	r6, #0
    ee14:	ldr	r0, [r7]
    ee18:	bl	115d0 <warn@@Base+0x1144>
    ee1c:	str	r0, [r5, r6]
    ee20:	add	r6, r6, #4
    ee24:	cmp	r6, #256	; 0x100
    ee28:	bne	ee14 <__assert_fail@plt+0x5e44>
    ee2c:	b	ed3c <__assert_fail@plt+0x5d6c>
    ee30:	bl	8e44 <__stack_chk_fail@plt>
    ee34:	cmp	r0, #3
    ee38:	push	{r3, r4, r5, r6, r7, lr}
    ee3c:	mov	r4, r0
    ee40:	ble	ee70 <__assert_fail@plt+0x5ea0>
    ee44:	bl	ebf8 <__assert_fail@plt+0x5c28>
    ee48:	subs	r4, r0, #0
    ee4c:	popeq	{r3, r4, r5, r6, r7, pc}
    ee50:	bl	11504 <warn@@Base+0x1078>
    ee54:	movw	r3, #4996	; 0x1384
    ee58:	movt	r3, #2
    ee5c:	ldr	r3, [r3]
    ee60:	ldr	r0, [r3]
    ee64:	bl	115d0 <warn@@Base+0x1144>
    ee68:	str	r0, [r4]
    ee6c:	pop	{r3, r4, r5, r6, r7, pc}
    ee70:	movw	r5, #4996	; 0x1384
    ee74:	movt	r5, #2
    ee78:	ldr	r3, [r5]
    ee7c:	ldr	r0, [r3]
    ee80:	bl	11628 <warn@@Base+0x119c>
    ee84:	subs	r7, r0, #0
    ee88:	beq	eea8 <__assert_fail@plt+0x5ed8>
    ee8c:	cmp	r4, #3
    ee90:	ldrls	pc, [pc, r4, lsl #2]
    ee94:	b	f0a0 <__assert_fail@plt+0x60d0>
    ee98:	andeq	lr, r0, r8, asr #30
    ee9c:	andeq	lr, r0, r8, lsr #30
    eea0:	andeq	lr, r0, r8, lsl #30
    eea4:	strdeq	lr, [r0], -r0
    eea8:	ldr	r3, [r5]
    eeac:	ldr	r0, [r3]
    eeb0:	bl	12a70 <warn@@Base+0x25e4>
    eeb4:	ldr	r3, [r5]
    eeb8:	mov	r6, r0
    eebc:	ldr	r0, [r3]
    eec0:	bl	1163c <warn@@Base+0x11b0>
    eec4:	cmp	r0, #0
    eec8:	bne	eed4 <__assert_fail@plt+0x5f04>
    eecc:	rsbs	r7, r6, #1
    eed0:	movcc	r7, #0
    eed4:	cmp	r4, #3
    eed8:	ldrls	pc, [pc, r4, lsl #2]
    eedc:	b	ef68 <__assert_fail@plt+0x5f98>
    eee0:			; <UNDEFINED> instruction: 0x0000efb4
    eee4:	andeq	lr, r0, ip, ror #31
    eee8:	andeq	lr, r0, r8, lsl #31
    eeec:	andeq	lr, r0, ip, ror #30
    eef0:	movw	r3, #4908	; 0x132c
    eef4:	movt	r3, #2
    eef8:	mvn	r2, #0
    eefc:	str	r2, [r3]
    ef00:	pop	{r3, r4, r5, r6, r7, lr}
    ef04:	b	8fa0 <unstifle_history@plt>
    ef08:	movw	r0, #27776	; 0x6c80
    ef0c:	movt	r0, #1
    ef10:	bl	10a88 <warn@@Base+0x5fc>
    ef14:	mov	r6, #0
    ef18:	movw	r3, #4960	; 0x1360
    ef1c:	movt	r3, #2
    ef20:	str	r6, [r3]
    ef24:	pop	{r3, r4, r5, r6, r7, pc}
    ef28:	movw	r0, #27748	; 0x6c64
    ef2c:	movt	r0, #1
    ef30:	bl	10a88 <warn@@Base+0x5fc>
    ef34:	mov	r6, #2
    ef38:	movw	r3, #4936	; 0x1348
    ef3c:	movt	r3, #2
    ef40:	str	r6, [r3]
    ef44:	pop	{r3, r4, r5, r6, r7, pc}
    ef48:	movw	r0, #27720	; 0x6c48
    ef4c:	movt	r0, #1
    ef50:	bl	10a88 <warn@@Base+0x5fc>
    ef54:	mov	r6, #2
    ef58:	movw	r3, #4972	; 0x136c
    ef5c:	movt	r3, #2
    ef60:	str	r6, [r3]
    ef64:	pop	{r3, r4, r5, r6, r7, pc}
    ef68:	pop	{r3, r4, r5, r6, r7, pc}
    ef6c:	cmp	r7, #0
    ef70:	beq	f050 <__assert_fail@plt+0x6080>
    ef74:	movw	r0, #27944	; 0x6d28
    ef78:	movt	r0, #1
    ef7c:	bl	10a88 <warn@@Base+0x5fc>
    ef80:	pop	{r3, r4, r5, r6, r7, lr}
    ef84:	b	8fa0 <unstifle_history@plt>
    ef88:	cmp	r7, #0
    ef8c:	beq	ef18 <__assert_fail@plt+0x5f48>
    ef90:	movw	r3, #4960	; 0x1360
    ef94:	movt	r3, #2
    ef98:	mvn	r2, #-2147483648	; 0x80000000
    ef9c:	movw	r0, #27916	; 0x6d0c
    efa0:	str	r2, [r3]
    efa4:	mov	r1, r2
    efa8:	movt	r0, #1
    efac:	pop	{r3, r4, r5, r6, r7, lr}
    efb0:	b	10a88 <warn@@Base+0x5fc>
    efb4:	eor	r3, r7, #1
    efb8:	cmp	r6, #1
    efbc:	movgt	r3, #0
    efc0:	andle	r3, r3, #1
    efc4:	cmp	r3, #0
    efc8:	beq	f070 <__assert_fail@plt+0x60a0>
    efcc:	movw	r3, #4972	; 0x136c
    efd0:	movt	r3, #2
    efd4:	mov	r2, #2
    efd8:	movw	r0, #27804	; 0x6c9c
    efdc:	str	r2, [r3]
    efe0:	movt	r0, #1
    efe4:	pop	{r3, r4, r5, r6, r7, lr}
    efe8:	b	10a88 <warn@@Base+0x5fc>
    efec:	eor	r3, r7, #1
    eff0:	cmp	r6, #1
    eff4:	movgt	r3, #0
    eff8:	andle	r3, r3, #1
    effc:	cmp	r3, #0
    f000:	bne	f030 <__assert_fail@plt+0x6060>
    f004:	cmp	r7, #0
    f008:	beq	ef38 <__assert_fail@plt+0x5f68>
    f00c:	movw	r3, #4936	; 0x1348
    f010:	movt	r3, #2
    f014:	mvn	r2, #-2147483648	; 0x80000000
    f018:	movw	r0, #27888	; 0x6cf0
    f01c:	str	r2, [r3]
    f020:	mov	r1, r2
    f024:	movt	r0, #1
    f028:	pop	{r3, r4, r5, r6, r7, lr}
    f02c:	b	10a88 <warn@@Base+0x5fc>
    f030:	movw	r3, #4936	; 0x1348
    f034:	movt	r3, #2
    f038:	mov	r2, #2
    f03c:	movw	r0, #27860	; 0x6cd4
    f040:	str	r2, [r3]
    f044:	movt	r0, #1
    f048:	pop	{r3, r4, r5, r6, r7, lr}
    f04c:	b	10a88 <warn@@Base+0x5fc>
    f050:	movw	r3, #4908	; 0x132c
    f054:	cmp	r6, #0
    f058:	movt	r3, #2
    f05c:	str	r6, [r3]
    f060:	blt	ef00 <__assert_fail@plt+0x5f30>
    f064:	mov	r0, r6
    f068:	pop	{r3, r4, r5, r6, r7, lr}
    f06c:	b	8dc0 <stifle_history@plt>
    f070:	cmp	r6, #16
    f074:	orrgt	r7, r7, #1
    f078:	tst	r7, #1
    f07c:	beq	ef58 <__assert_fail@plt+0x5f88>
    f080:	movw	r3, #4972	; 0x136c
    f084:	movt	r3, #2
    f088:	mov	r2, #16
    f08c:	movw	r0, #27832	; 0x6cb8
    f090:	str	r2, [r3]
    f094:	movt	r0, #1
    f098:	pop	{r3, r4, r5, r6, r7, lr}
    f09c:	b	10a88 <warn@@Base+0x5fc>
    f0a0:	mov	r7, #0
    f0a4:	mov	r6, r7
    f0a8:	b	eed4 <__assert_fail@plt+0x5f04>
    f0ac:	push	{r4, r5, r6, lr}
    f0b0:	mov	r5, r0
    f0b4:	mov	r0, #2
    f0b8:	bl	eba4 <__assert_fail@plt+0x5bd4>
    f0bc:	cmp	r0, #0
    f0c0:	popeq	{r4, r5, r6, pc}
    f0c4:	movw	r4, #4996	; 0x1384
    f0c8:	movt	r4, #2
    f0cc:	ldr	r3, [r4]
    f0d0:	ldr	r3, [r3, #4]
    f0d4:	ldr	r0, [r3]
    f0d8:	bl	12a70 <warn@@Base+0x25e4>
    f0dc:	cmp	r0, #16777216	; 0x1000000
    f0e0:	mov	r6, r0
    f0e4:	bcs	f108 <__assert_fail@plt+0x6138>
    f0e8:	cmp	r0, #0
    f0ec:	bne	f128 <__assert_fail@plt+0x6158>
    f0f0:	ldr	r3, [r4]
    f0f4:	ldr	r3, [r3, #4]
    f0f8:	ldr	r0, [r3]
    f0fc:	bl	1163c <warn@@Base+0x11b0>
    f100:	cmp	r0, #0
    f104:	bne	f128 <__assert_fail@plt+0x6158>
    f108:	movw	r3, #4896	; 0x1320
    f10c:	movt	r3, #2
    f110:	movw	r0, #27980	; 0x6d4c
    f114:	movt	r0, #1
    f118:	ldr	r3, [r3]
    f11c:	ldr	r1, [r3, r5, lsl #2]
    f120:	pop	{r4, r5, r6, lr}
    f124:	b	109cc <warn@@Base+0x540>
    f128:	mov	r0, r5
    f12c:	mov	r1, r6
    f130:	bl	ec3c <__assert_fail@plt+0x5c6c>
    f134:	subs	r5, r0, #0
    f138:	popeq	{r4, r5, r6, pc}
    f13c:	bl	11504 <warn@@Base+0x1078>
    f140:	ldr	r3, [r4]
    f144:	ldr	r0, [r3]
    f148:	bl	115d0 <warn@@Base+0x1144>
    f14c:	str	r0, [r5]
    f150:	ldr	r3, [r4]
    f154:	ldr	r0, [r3, #4]
    f158:	bl	11504 <warn@@Base+0x1078>
    f15c:	ldr	r3, [r4]
    f160:	ldr	r2, [r3]
    f164:	mov	r0, r3
    f168:	ldr	r3, [r3, #4]
    f16c:	str	r2, [r3]
    f170:	bl	115e0 <warn@@Base+0x1154>
    f174:	pop	{r4, r5, r6, lr}
    f178:	b	eb10 <__assert_fail@plt+0x5b40>
    f17c:	push	{r3, lr}
    f180:	cmp	r0, #3
    f184:	ldrls	pc, [pc, r0, lsl #2]
    f188:	b	f25c <__assert_fail@plt+0x628c>
    f18c:	andeq	pc, r0, ip, lsr #4
    f190:	strdeq	pc, [r0], -ip
    f194:	andeq	pc, r0, ip, asr #3
    f198:	muleq	r0, ip, r1
    f19c:	movw	r3, #5008	; 0x1390
    f1a0:	movt	r3, #2
    f1a4:	ldr	r0, [r3]
    f1a8:	bl	eb44 <__assert_fail@plt+0x5b74>
    f1ac:	movw	r2, #4996	; 0x1384
    f1b0:	movw	r3, #4908	; 0x132c
    f1b4:	movt	r2, #2
    f1b8:	movt	r3, #2
    f1bc:	ldr	r0, [r2]
    f1c0:	ldr	r1, [r3]
    f1c4:	pop	{r3, lr}
    f1c8:	b	12cdc <warn@@Base+0x2850>
    f1cc:	movw	r3, #5008	; 0x1390
    f1d0:	movt	r3, #2
    f1d4:	ldr	r0, [r3]
    f1d8:	bl	eb44 <__assert_fail@plt+0x5b74>
    f1dc:	movw	r2, #4996	; 0x1384
    f1e0:	movw	r3, #4960	; 0x1360
    f1e4:	movt	r2, #2
    f1e8:	movt	r3, #2
    f1ec:	ldr	r0, [r2]
    f1f0:	ldr	r1, [r3]
    f1f4:	pop	{r3, lr}
    f1f8:	b	12cdc <warn@@Base+0x2850>
    f1fc:	movw	r3, #5008	; 0x1390
    f200:	movt	r3, #2
    f204:	ldr	r0, [r3]
    f208:	bl	eb44 <__assert_fail@plt+0x5b74>
    f20c:	movw	r2, #4996	; 0x1384
    f210:	movw	r3, #4936	; 0x1348
    f214:	movt	r2, #2
    f218:	movt	r3, #2
    f21c:	ldr	r0, [r2]
    f220:	ldr	r1, [r3]
    f224:	pop	{r3, lr}
    f228:	b	12cdc <warn@@Base+0x2850>
    f22c:	movw	r3, #5008	; 0x1390
    f230:	movt	r3, #2
    f234:	ldr	r0, [r3]
    f238:	bl	eb44 <__assert_fail@plt+0x5b74>
    f23c:	movw	r2, #4996	; 0x1384
    f240:	movw	r3, #4972	; 0x136c
    f244:	movt	r2, #2
    f248:	movt	r3, #2
    f24c:	ldr	r0, [r2]
    f250:	ldr	r1, [r3]
    f254:	pop	{r3, lr}
    f258:	b	12cdc <warn@@Base+0x2850>
    f25c:	movw	r3, #4988	; 0x137c
    f260:	movt	r3, #2
    f264:	ldr	r3, [r3]
    f268:	ldr	r3, [r3, r0, lsl #2]
    f26c:	cmp	r3, #0
    f270:	movweq	r3, #5008	; 0x1390
    f274:	movteq	r3, #2
    f278:	ldr	r0, [r3]
    f27c:	pop	{r3, lr}
    f280:	b	eb44 <__assert_fail@plt+0x5b74>
    f284:	push	{r4, r5, r6, lr}
    f288:	mov	r5, r0
    f28c:	mov	r0, #1
    f290:	bl	eba4 <__assert_fail@plt+0x5bd4>
    f294:	cmp	r0, #0
    f298:	popeq	{r4, r5, r6, pc}
    f29c:	movw	r4, #4996	; 0x1384
    f2a0:	movt	r4, #2
    f2a4:	ldr	r3, [r4]
    f2a8:	ldr	r0, [r3]
    f2ac:	bl	12a70 <warn@@Base+0x25e4>
    f2b0:	cmp	r0, #16777216	; 0x1000000
    f2b4:	mov	r6, r0
    f2b8:	bcs	f2d8 <__assert_fail@plt+0x6308>
    f2bc:	cmp	r0, #0
    f2c0:	bne	f2f8 <__assert_fail@plt+0x6328>
    f2c4:	ldr	r3, [r4]
    f2c8:	ldr	r0, [r3]
    f2cc:	bl	1163c <warn@@Base+0x11b0>
    f2d0:	cmp	r0, #0
    f2d4:	bne	f2f8 <__assert_fail@plt+0x6328>
    f2d8:	movw	r3, #4896	; 0x1320
    f2dc:	movt	r3, #2
    f2e0:	movw	r0, #27980	; 0x6d4c
    f2e4:	movt	r0, #1
    f2e8:	ldr	r3, [r3]
    f2ec:	ldr	r1, [r3, r5, lsl #2]
    f2f0:	pop	{r4, r5, r6, lr}
    f2f4:	b	109cc <warn@@Base+0x540>
    f2f8:	mov	r0, r5
    f2fc:	mov	r1, r6
    f300:	bl	ec3c <__assert_fail@plt+0x5c6c>
    f304:	subs	r4, r0, #0
    f308:	popeq	{r4, r5, r6, pc}
    f30c:	bl	eb10 <__assert_fail@plt+0x5b40>
    f310:	ldr	r0, [r4]
    f314:	pop	{r4, r5, r6, lr}
    f318:	b	eb44 <__assert_fail@plt+0x5b74>
    f31c:	push	{r4, lr}
    f320:	mov	r4, r0
    f324:	cmp	r0, #3
    f328:	ldrls	pc, [pc, r0, lsl #2]
    f32c:	b	f360 <__assert_fail@plt+0x6390>
    f330:	ldrdeq	pc, [r0], -r0
    f334:	andeq	pc, r0, ip, lsr #7
    f338:	andeq	pc, r0, ip, lsl #7
    f33c:	andeq	pc, r0, r0, asr #6
    f340:	movw	r3, #4908	; 0x132c
    f344:	movt	r3, #2
    f348:	ldr	r0, [r3]
    f34c:	sub	r0, r0, #1
    f350:	str	r0, [r3]
    f354:	cmp	r0, #0
    f358:	blt	f3f4 <__assert_fail@plt+0x6424>
    f35c:	bl	8dc0 <stifle_history@plt>
    f360:	mov	r0, r4
    f364:	bl	ebf8 <__assert_fail@plt+0x5c28>
    f368:	subs	r2, r0, #0
    f36c:	popeq	{r4, pc}
    f370:	movw	r3, #5000	; 0x1388
    f374:	movt	r3, #2
    f378:	ldr	r0, [r2]
    f37c:	ldr	r1, [r3]
    f380:	mov	r3, #0
    f384:	pop	{r4, lr}
    f388:	b	11724 <warn@@Base+0x1298>
    f38c:	movw	r3, #4960	; 0x1360
    f390:	movt	r3, #2
    f394:	ldr	r2, [r3]
    f398:	cmp	r2, #0
    f39c:	ble	f410 <__assert_fail@plt+0x6440>
    f3a0:	sub	r2, r2, #1
    f3a4:	str	r2, [r3]
    f3a8:	pop	{r4, pc}
    f3ac:	movw	r3, #4936	; 0x1348
    f3b0:	movt	r3, #2
    f3b4:	ldr	r2, [r3]
    f3b8:	cmp	r2, #2
    f3bc:	bgt	f3a0 <__assert_fail@plt+0x63d0>
    f3c0:	movw	r0, #28040	; 0x6d88
    f3c4:	movt	r0, #1
    f3c8:	pop	{r4, lr}
    f3cc:	b	10a88 <warn@@Base+0x5fc>
    f3d0:	movw	r3, #4972	; 0x136c
    f3d4:	movt	r3, #2
    f3d8:	ldr	r2, [r3]
    f3dc:	cmp	r2, #2
    f3e0:	bgt	f3a0 <__assert_fail@plt+0x63d0>
    f3e4:	movw	r0, #28016	; 0x6d70
    f3e8:	movt	r0, #1
    f3ec:	pop	{r4, lr}
    f3f0:	b	10a88 <warn@@Base+0x5fc>
    f3f4:	movw	r0, #28100	; 0x6dc4
    f3f8:	movt	r0, #1
    f3fc:	mvn	r2, #0
    f400:	str	r2, [r3]
    f404:	bl	10a88 <warn@@Base+0x5fc>
    f408:	bl	8fa0 <unstifle_history@plt>
    f40c:	b	f360 <__assert_fail@plt+0x6390>
    f410:	movw	r0, #28064	; 0x6da0
    f414:	movt	r0, #1
    f418:	pop	{r4, lr}
    f41c:	b	10a88 <warn@@Base+0x5fc>
    f420:	push	{r4, r5, r6, lr}
    f424:	mov	r5, r0
    f428:	mov	r0, #1
    f42c:	bl	eba4 <__assert_fail@plt+0x5bd4>
    f430:	cmp	r0, #0
    f434:	popeq	{r4, r5, r6, pc}
    f438:	movw	r4, #4996	; 0x1384
    f43c:	movt	r4, #2
    f440:	ldr	r3, [r4]
    f444:	ldr	r0, [r3]
    f448:	bl	12a70 <warn@@Base+0x25e4>
    f44c:	cmp	r0, #16777216	; 0x1000000
    f450:	mov	r6, r0
    f454:	bcs	f474 <__assert_fail@plt+0x64a4>
    f458:	cmp	r0, #0
    f45c:	bne	f494 <__assert_fail@plt+0x64c4>
    f460:	ldr	r3, [r4]
    f464:	ldr	r0, [r3]
    f468:	bl	1163c <warn@@Base+0x11b0>
    f46c:	cmp	r0, #0
    f470:	bne	f494 <__assert_fail@plt+0x64c4>
    f474:	movw	r3, #4896	; 0x1320
    f478:	movt	r3, #2
    f47c:	movw	r0, #27980	; 0x6d4c
    f480:	movt	r0, #1
    f484:	ldr	r3, [r3]
    f488:	ldr	r1, [r3, r5, lsl #2]
    f48c:	pop	{r4, r5, r6, lr}
    f490:	b	109cc <warn@@Base+0x540>
    f494:	mov	r0, r5
    f498:	mov	r1, r6
    f49c:	bl	ec3c <__assert_fail@plt+0x5c6c>
    f4a0:	subs	r4, r0, #0
    f4a4:	popeq	{r4, r5, r6, pc}
    f4a8:	bl	eb10 <__assert_fail@plt+0x5b40>
    f4ac:	movw	r1, #5000	; 0x1388
    f4b0:	movt	r1, #2
    f4b4:	ldr	r0, [r4]
    f4b8:	mov	r2, r4
    f4bc:	mov	r3, #0
    f4c0:	ldr	r1, [r1]
    f4c4:	pop	{r4, r5, r6, lr}
    f4c8:	b	11724 <warn@@Base+0x1298>
    f4cc:	push	{r4, lr}
    f4d0:	mov	r4, r0
    f4d4:	cmp	r0, #3
    f4d8:	ldrls	pc, [pc, r0, lsl #2]
    f4dc:	b	f510 <__assert_fail@plt+0x6540>
    f4e0:	andeq	pc, r0, r0, lsl #11
    f4e4:	andeq	pc, r0, ip, asr r5	; <UNPREDICTABLE>
    f4e8:	andeq	pc, r0, ip, lsr r5	; <UNPREDICTABLE>
    f4ec:	strdeq	pc, [r0], -r0
    f4f0:	movw	r3, #4908	; 0x132c
    f4f4:	movt	r3, #2
    f4f8:	ldr	r0, [r3]
    f4fc:	add	r0, r0, #1
    f500:	str	r0, [r3]
    f504:	cmp	r0, #0
    f508:	ble	f5a4 <__assert_fail@plt+0x65d4>
    f50c:	bl	8dc0 <stifle_history@plt>
    f510:	mov	r0, r4
    f514:	bl	ebf8 <__assert_fail@plt+0x5c28>
    f518:	subs	r2, r0, #0
    f51c:	popeq	{r4, pc}
    f520:	movw	r3, #5000	; 0x1388
    f524:	movt	r3, #2
    f528:	ldr	r0, [r2]
    f52c:	ldr	r1, [r3]
    f530:	mov	r3, #0
    f534:	pop	{r4, lr}
    f538:	b	11e40 <warn@@Base+0x19b4>
    f53c:	movw	r3, #4960	; 0x1360
    f540:	movt	r3, #2
    f544:	ldr	r2, [r3]
    f548:	cmn	r2, #-2147483647	; 0x80000001
    f54c:	beq	f5c0 <__assert_fail@plt+0x65f0>
    f550:	add	r2, r2, #1
    f554:	str	r2, [r3]
    f558:	pop	{r4, pc}
    f55c:	movw	r3, #4936	; 0x1348
    f560:	movt	r3, #2
    f564:	ldr	r2, [r3]
    f568:	cmn	r2, #-2147483647	; 0x80000001
    f56c:	bne	f550 <__assert_fail@plt+0x6580>
    f570:	movw	r0, #28160	; 0x6e00
    f574:	movt	r0, #1
    f578:	pop	{r4, lr}
    f57c:	b	10a88 <warn@@Base+0x5fc>
    f580:	movw	r3, #4972	; 0x136c
    f584:	movt	r3, #2
    f588:	ldr	r2, [r3]
    f58c:	cmp	r2, #15
    f590:	ble	f550 <__assert_fail@plt+0x6580>
    f594:	movw	r0, #28140	; 0x6dec
    f598:	movt	r0, #1
    f59c:	pop	{r4, lr}
    f5a0:	b	10a88 <warn@@Base+0x5fc>
    f5a4:	movw	r0, #28200	; 0x6e28
    f5a8:	movt	r0, #1
    f5ac:	mvn	r2, #0
    f5b0:	str	r2, [r3]
    f5b4:	bl	10a88 <warn@@Base+0x5fc>
    f5b8:	bl	8fa0 <unstifle_history@plt>
    f5bc:	b	f510 <__assert_fail@plt+0x6540>
    f5c0:	movw	r0, #28180	; 0x6e14
    f5c4:	movt	r0, #1
    f5c8:	pop	{r4, lr}
    f5cc:	b	10a88 <warn@@Base+0x5fc>
    f5d0:	push	{r4, r5, r6, lr}
    f5d4:	mov	r5, r0
    f5d8:	mov	r0, #1
    f5dc:	bl	eba4 <__assert_fail@plt+0x5bd4>
    f5e0:	cmp	r0, #0
    f5e4:	popeq	{r4, r5, r6, pc}
    f5e8:	movw	r4, #4996	; 0x1384
    f5ec:	movt	r4, #2
    f5f0:	ldr	r3, [r4]
    f5f4:	ldr	r0, [r3]
    f5f8:	bl	12a70 <warn@@Base+0x25e4>
    f5fc:	cmp	r0, #16777216	; 0x1000000
    f600:	mov	r6, r0
    f604:	bcs	f624 <__assert_fail@plt+0x6654>
    f608:	cmp	r0, #0
    f60c:	bne	f644 <__assert_fail@plt+0x6674>
    f610:	ldr	r3, [r4]
    f614:	ldr	r0, [r3]
    f618:	bl	1163c <warn@@Base+0x11b0>
    f61c:	cmp	r0, #0
    f620:	bne	f644 <__assert_fail@plt+0x6674>
    f624:	movw	r3, #4896	; 0x1320
    f628:	movt	r3, #2
    f62c:	movw	r0, #27980	; 0x6d4c
    f630:	movt	r0, #1
    f634:	ldr	r3, [r3]
    f638:	ldr	r1, [r3, r5, lsl #2]
    f63c:	pop	{r4, r5, r6, lr}
    f640:	b	109cc <warn@@Base+0x540>
    f644:	mov	r0, r5
    f648:	mov	r1, r6
    f64c:	bl	ec3c <__assert_fail@plt+0x5c6c>
    f650:	subs	r4, r0, #0
    f654:	popeq	{r4, r5, r6, pc}
    f658:	bl	eb10 <__assert_fail@plt+0x5b40>
    f65c:	movw	r1, #5000	; 0x1388
    f660:	movt	r1, #2
    f664:	ldr	r0, [r4]
    f668:	mov	r2, r4
    f66c:	mov	r3, #0
    f670:	ldr	r1, [r1]
    f674:	pop	{r4, r5, r6, lr}
    f678:	b	11e40 <warn@@Base+0x19b4>
    f67c:	push	{r4, r5, r6, lr}
    f680:	subs	r5, r0, #0
    f684:	ble	f6b8 <__assert_fail@plt+0x66e8>
    f688:	mov	r0, #8
    f68c:	movw	r4, #4988	; 0x137c
    f690:	bl	fff4 <__assert_fail@plt+0x7024>
    f694:	movt	r4, #2
    f698:	ldr	r3, [r4]
    f69c:	ldr	r3, [r3, r5, lsl #2]
    f6a0:	str	r3, [r0, #4]
    f6a4:	mov	r6, r0
    f6a8:	bl	115e0 <warn@@Base+0x1154>
    f6ac:	ldr	r3, [r4]
    f6b0:	str	r6, [r3, r5, lsl #2]
    f6b4:	pop	{r4, r5, r6, pc}
    f6b8:	mov	r0, #12
    f6bc:	rsb	r5, r5, #0
    f6c0:	bl	fff4 <__assert_fail@plt+0x7024>
    f6c4:	movw	r3, #4892	; 0x131c
    f6c8:	movt	r3, #2
    f6cc:	mov	r2, #0
    f6d0:	ldr	r3, [r3]
    f6d4:	ldr	r1, [r3, r5, lsl #2]
    f6d8:	str	r2, [r0]
    f6dc:	strb	r2, [r0, #4]
    f6e0:	str	r1, [r0, #8]
    f6e4:	str	r0, [r3, r5, lsl #2]
    f6e8:	pop	{r4, r5, r6, pc}
    f6ec:	push	{r4, r5, r6, lr}
    f6f0:	subs	r5, r0, #0
    f6f4:	popeq	{r4, r5, r6, pc}
    f6f8:	cmp	r1, #1
    f6fc:	ble	f72c <__assert_fail@plt+0x675c>
    f700:	sub	r6, r1, #1
    f704:	mov	r4, #0
    f708:	ldr	r0, [r5, r4]
    f70c:	mov	r1, r6
    f710:	add	r4, r4, #4
    f714:	bl	f6ec <__assert_fail@plt+0x671c>
    f718:	cmp	r4, #256	; 0x100
    f71c:	bne	f708 <__assert_fail@plt+0x6738>
    f720:	mov	r0, r5
    f724:	pop	{r4, r5, r6, lr}
    f728:	b	8e08 <free@plt>
    f72c:	mov	r4, #0
    f730:	add	r0, r5, r4
    f734:	add	r4, r4, #4
    f738:	bl	11504 <warn@@Base+0x1078>
    f73c:	cmp	r4, #256	; 0x100
    f740:	bne	f730 <__assert_fail@plt+0x6760>
    f744:	mov	r0, r5
    f748:	pop	{r4, r5, r6, lr}
    f74c:	b	8e08 <free@plt>
    f750:	push	{r3, r4, r5, r6, r7, lr}
    f754:	subs	r4, r0, #0
    f758:	popeq	{r3, r4, r5, r6, r7, pc}
    f75c:	movw	r7, #4892	; 0x131c
    f760:	movw	r6, #4988	; 0x137c
    f764:	movt	r7, #2
    f768:	movt	r6, #2
    f76c:	b	f7a4 <__assert_fail@plt+0x67d4>
    f770:	ldr	r2, [r6]
    f774:	ldr	r5, [r2, r3, lsl #2]
    f778:	cmp	r5, #0
    f77c:	mov	r0, r5
    f780:	beq	f798 <__assert_fail@plt+0x67c8>
    f784:	ldr	r1, [r5, #4]
    f788:	str	r1, [r2, r3, lsl #2]
    f78c:	bl	11504 <warn@@Base+0x1078>
    f790:	mov	r0, r5
    f794:	bl	8e08 <free@plt>
    f798:	ldr	r4, [r4, #8]
    f79c:	cmp	r4, #0
    f7a0:	beq	f80c <__assert_fail@plt+0x683c>
    f7a4:	ldr	r3, [r4]
    f7a8:	cmp	r3, #0
    f7ac:	bgt	f770 <__assert_fail@plt+0x67a0>
    f7b0:	ldr	r2, [r7]
    f7b4:	rsb	r3, r3, #0
    f7b8:	ldr	r5, [r2, r3, lsl #2]
    f7bc:	cmp	r5, #0
    f7c0:	beq	f798 <__assert_fail@plt+0x67c8>
    f7c4:	ldr	r1, [r5, #8]
    f7c8:	str	r1, [r2, r3, lsl #2]
    f7cc:	ldrb	r3, [r5, #4]
    f7d0:	cmp	r3, #0
    f7d4:	bne	f7f8 <__assert_fail@plt+0x6828>
    f7d8:	ldr	r3, [r5]
    f7dc:	cmp	r3, #0
    f7e0:	beq	f7f8 <__assert_fail@plt+0x6828>
    f7e4:	ldr	r0, [r3]
    f7e8:	ldrsh	r1, [r3, #4]
    f7ec:	bl	f6ec <__assert_fail@plt+0x671c>
    f7f0:	ldr	r0, [r5]
    f7f4:	bl	8e08 <free@plt>
    f7f8:	mov	r0, r5
    f7fc:	bl	8e08 <free@plt>
    f800:	ldr	r4, [r4, #8]
    f804:	cmp	r4, #0
    f808:	bne	f7a4 <__assert_fail@plt+0x67d4>
    f80c:	pop	{r3, r4, r5, r6, r7, pc}
    f810:	push	{r3, r4, r5, r6, r7, lr}
    f814:	mov	r6, r0
    f818:	mov	r0, #256	; 0x100
    f81c:	mov	r7, r1
    f820:	bl	fff4 <__assert_fail@plt+0x7024>
    f824:	cmp	r7, #1
    f828:	mov	r5, r0
    f82c:	ble	f86c <__assert_fail@plt+0x689c>
    f830:	sub	r7, r7, #1
    f834:	mov	r4, #0
    f838:	ldr	r3, [r6, r4]
    f83c:	mov	r1, r7
    f840:	cmp	r3, #0
    f844:	mov	r0, r3
    f848:	streq	r3, [r5, r4]
    f84c:	beq	f858 <__assert_fail@plt+0x6888>
    f850:	bl	f810 <__assert_fail@plt+0x6840>
    f854:	str	r0, [r5, r4]
    f858:	add	r4, r4, #4
    f85c:	cmp	r4, #256	; 0x100
    f860:	bne	f838 <__assert_fail@plt+0x6868>
    f864:	mov	r0, r5
    f868:	pop	{r3, r4, r5, r6, r7, pc}
    f86c:	mov	r4, #0
    f870:	ldr	r3, [r6, r4]
    f874:	cmp	r3, #0
    f878:	mov	r0, r3
    f87c:	streq	r3, [r5, r4]
    f880:	beq	f88c <__assert_fail@plt+0x68bc>
    f884:	bl	115d0 <warn@@Base+0x1144>
    f888:	str	r0, [r5, r4]
    f88c:	add	r4, r4, #4
    f890:	cmp	r4, #256	; 0x100
    f894:	bne	f870 <__assert_fail@plt+0x68a0>
    f898:	mov	r0, r5
    f89c:	pop	{r3, r4, r5, r6, r7, pc}
    f8a0:	push	{r3, r4, r5, lr}
    f8a4:	mov	r5, r0
    f8a8:	mov	r0, #8
    f8ac:	bl	fff4 <__assert_fail@plt+0x7024>
    f8b0:	ldrh	r3, [r5, #4]
    f8b4:	mov	r4, r0
    f8b8:	ldr	r0, [r5]
    f8bc:	strh	r3, [r4, #4]
    f8c0:	ldrsh	r1, [r5, #4]
    f8c4:	bl	f810 <__assert_fail@plt+0x6840>
    f8c8:	str	r0, [r4]
    f8cc:	mov	r0, r4
    f8d0:	pop	{r3, r4, r5, pc}
    f8d4:	movw	r3, #4928	; 0x1340
    f8d8:	movt	r3, #2
    f8dc:	rsb	r1, r1, r1, lsl #3
    f8e0:	ldr	r3, [r3]
    f8e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8e8:	add	r1, r3, r1, lsl #2
    f8ec:	movw	r7, #4964	; 0x1364
    f8f0:	movw	r8, #4896	; 0x1320
    f8f4:	movw	r9, #4996	; 0x1384
    f8f8:	movw	sl, #4892	; 0x131c
    f8fc:	sub	sp, sp, #12
    f900:	mov	r6, r0
    f904:	movt	r7, #2
    f908:	movt	r8, #2
    f90c:	ldr	r4, [r1, #20]
    f910:	movt	r9, #2
    f914:	movt	sl, #2
    f918:	b	f94c <__assert_fail@plt+0x697c>
    f91c:	cmp	r0, #49	; 0x31
    f920:	beq	f9bc <__assert_fail@plt+0x69ec>
    f924:	cmp	r5, #0
    f928:	blt	fa2c <__assert_fail@plt+0x6a5c>
    f92c:	ldr	r3, [r7]
    f930:	movw	r0, #28268	; 0x6e6c
    f934:	movt	r0, #1
    f938:	ldr	r1, [r3, r5, lsl #2]
    f93c:	bl	109cc <warn@@Base+0x540>
    f940:	add	r4, r4, #12
    f944:	bl	eb10 <__assert_fail@plt+0x5b40>
    f948:	ldr	r4, [r4, #8]
    f94c:	mov	r0, r6
    f950:	bl	c900 <__assert_fail@plt+0x3930>
    f954:	cmp	r0, #58	; 0x3a
    f958:	beq	fa48 <__assert_fail@plt+0x6a78>
    f95c:	cmp	r4, #0
    f960:	beq	fa50 <__assert_fail@plt+0x6a80>
    f964:	cmp	r0, #48	; 0x30
    f968:	ldr	r5, [r4]
    f96c:	bne	f91c <__assert_fail@plt+0x694c>
    f970:	cmp	r5, #0
    f974:	ble	f924 <__assert_fail@plt+0x6954>
    f978:	mov	r0, #8
    f97c:	movw	fp, #4988	; 0x137c
    f980:	bl	fff4 <__assert_fail@plt+0x7024>
    f984:	movt	fp, #2
    f988:	ldr	r2, [fp]
    f98c:	ldr	r1, [r2, r5, lsl #2]
    f990:	mov	r3, r0
    f994:	ldr	r0, [r9]
    f998:	ldr	r2, [r0]
    f99c:	str	r1, [r3, #4]
    f9a0:	str	r2, [r3]
    f9a4:	str	r3, [sp, #4]
    f9a8:	bl	115e0 <warn@@Base+0x1154>
    f9ac:	ldr	r2, [fp]
    f9b0:	ldr	r3, [sp, #4]
    f9b4:	str	r3, [r2, r5, lsl #2]
    f9b8:	b	f944 <__assert_fail@plt+0x6974>
    f9bc:	cmp	r5, #0
    f9c0:	bge	f92c <__assert_fail@plt+0x695c>
    f9c4:	ldr	r3, [r9]
    f9c8:	ldr	r0, [r3]
    f9cc:	bl	12a70 <warn@@Base+0x25e4>
    f9d0:	mov	r1, #0
    f9d4:	mov	r5, r0
    f9d8:	bl	ec3c <__assert_fail@plt+0x5c6c>
    f9dc:	ldr	r0, [r4]
    f9e0:	bl	f67c <__assert_fail@plt+0x66ac>
    f9e4:	ldr	r3, [r4]
    f9e8:	rsb	r3, r3, #0
    f9ec:	cmp	r5, r3
    f9f0:	ldreq	r0, [sl]
    f9f4:	ldrne	r2, [sl]
    f9f8:	ldreq	r2, [r0, r3, lsl #2]
    f9fc:	movne	r0, r2
    fa00:	ldrne	r1, [r2, r5, lsl #2]
    fa04:	ldr	r5, [r0, r3, lsl #2]
    fa08:	ldreq	r1, [r2, #8]
    fa0c:	ldr	r2, [r4, #4]
    fa10:	cmp	r2, #0
    fa14:	beq	fa6c <__assert_fail@plt+0x6a9c>
    fa18:	ldr	r3, [r1]
    fa1c:	mov	r2, #1
    fa20:	strb	r2, [r5, #4]
    fa24:	str	r3, [r5]
    fa28:	b	f944 <__assert_fail@plt+0x6974>
    fa2c:	ldr	r3, [r8]
    fa30:	rsb	r5, r5, r5, lsl #30
    fa34:	movw	r0, #28228	; 0x6e44
    fa38:	movt	r0, #1
    fa3c:	ldr	r1, [r3, r5, lsl #2]
    fa40:	bl	109cc <warn@@Base+0x540>
    fa44:	b	f940 <__assert_fail@plt+0x6970>
    fa48:	cmp	r4, #0
    fa4c:	beq	fa64 <__assert_fail@plt+0x6a94>
    fa50:	movw	r0, #28308	; 0x6e94
    fa54:	movt	r0, #1
    fa58:	add	sp, sp, #12
    fa5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa60:	b	109cc <warn@@Base+0x540>
    fa64:	add	sp, sp, #12
    fa68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa6c:	strb	r2, [r5, #4]
    fa70:	ldr	r0, [r1]
    fa74:	bl	f8a0 <__assert_fail@plt+0x68d0>
    fa78:	str	r0, [r5]
    fa7c:	b	f944 <__assert_fail@plt+0x6974>
    fa80:	cmp	r0, #0
    fa84:	push	{r4, lr}
    fa88:	popeq	{r4, pc}
    fa8c:	ldr	r4, [r0, #8]
    fa90:	bl	8e08 <free@plt>
    fa94:	cmp	r4, #0
    fa98:	mov	r0, r4
    fa9c:	bne	fa8c <__assert_fail@plt+0x6abc>
    faa0:	pop	{r4, pc}
    faa4:	movw	r2, #4800	; 0x12c0
    faa8:	movt	r2, #2
    faac:	movw	r3, #4920	; 0x1338
    fab0:	movt	r3, #2
    fab4:	ldr	r2, [r2]
    fab8:	mov	r1, #1
    fabc:	push	{r4, lr}
    fac0:	cmp	r2, #0
    fac4:	mov	r4, r0
    fac8:	strb	r1, [r3]
    facc:	beq	fb1c <__assert_fail@plt+0x6b4c>
    fad0:	mov	r2, r4
    fad4:	mov	r0, r1
    fad8:	movw	r1, #28336	; 0x6eb0
    fadc:	movt	r1, #1
    fae0:	bl	8f58 <__printf_chk@plt>
    fae4:	mov	r0, r4
    fae8:	bl	8ef8 <strlen@plt>
    faec:	movw	r4, #4924	; 0x133c
    faf0:	movt	r4, #2
    faf4:	ldr	r3, [r4]
    faf8:	add	r0, r0, r3
    fafc:	str	r0, [r4]
    fb00:	cmp	r0, #60	; 0x3c
    fb04:	pople	{r4, pc}
    fb08:	mov	r0, #10
    fb0c:	bl	8f40 <putchar@plt>
    fb10:	mov	r3, #0
    fb14:	str	r3, [r4]
    fb18:	pop	{r4, pc}
    fb1c:	pop	{r4, lr}
    fb20:	b	df78 <__assert_fail@plt+0x4fa8>
    fb24:	cmp	r0, #10
    fb28:	push	{r4, r5, r6, lr}
    fb2c:	mov	r6, r0
    fb30:	beq	fba4 <__assert_fail@plt+0x6bd4>
    fb34:	movw	r4, #4976	; 0x1370
    fb38:	movw	r3, #4940	; 0x134c
    fb3c:	movt	r4, #2
    fb40:	movt	r3, #2
    fb44:	movw	r5, #4680	; 0x1248
    fb48:	movt	r5, #2
    fb4c:	ldr	r1, [r4]
    fb50:	ldr	r2, [r3]
    fb54:	add	r3, r1, #1
    fb58:	str	r3, [r4]
    fb5c:	sub	r1, r2, #1
    fb60:	cmp	r3, r1
    fb64:	beq	fb78 <__assert_fail@plt+0x6ba8>
    fb68:	mov	r0, r6
    fb6c:	ldr	r1, [r5]
    fb70:	pop	{r4, r5, r6, lr}
    fb74:	b	8e5c <_IO_putc@plt>
    fb78:	cmp	r2, #0
    fb7c:	beq	fb68 <__assert_fail@plt+0x6b98>
    fb80:	ldr	r1, [r5]
    fb84:	mov	r0, #92	; 0x5c
    fb88:	bl	8e5c <_IO_putc@plt>
    fb8c:	ldr	r1, [r5]
    fb90:	mov	r0, #10
    fb94:	bl	8e5c <_IO_putc@plt>
    fb98:	mov	r3, #1
    fb9c:	str	r3, [r4]
    fba0:	b	fb68 <__assert_fail@plt+0x6b98>
    fba4:	movw	r2, #4680	; 0x1248
    fba8:	movt	r2, #2
    fbac:	movw	r3, #4976	; 0x1370
    fbb0:	movt	r3, #2
    fbb4:	ldr	r1, [r2]
    fbb8:	mov	r2, #0
    fbbc:	pop	{r4, r5, r6, lr}
    fbc0:	str	r2, [r3]
    fbc4:	b	8e5c <_IO_putc@plt>
    fbc8:	cmp	r0, #10
    fbcc:	push	{r4, r5, r6, lr}
    fbd0:	mov	r5, r0
    fbd4:	beq	fc64 <__assert_fail@plt+0x6c94>
    fbd8:	movw	r3, #4788	; 0x12b4
    fbdc:	movt	r3, #2
    fbe0:	ldr	r3, [r3]
    fbe4:	cmp	r3, #0
    fbe8:	beq	fc04 <__assert_fail@plt+0x6c34>
    fbec:	movw	r4, #4680	; 0x1248
    fbf0:	movt	r4, #2
    fbf4:	mov	r0, r5
    fbf8:	ldr	r1, [r4]
    fbfc:	pop	{r4, r5, r6, lr}
    fc00:	b	8e5c <_IO_putc@plt>
    fc04:	movw	r6, #4976	; 0x1370
    fc08:	movw	r3, #4940	; 0x134c
    fc0c:	movt	r6, #2
    fc10:	movt	r3, #2
    fc14:	ldr	r1, [r6]
    fc18:	ldr	r2, [r3]
    fc1c:	add	r3, r1, #1
    fc20:	str	r3, [r6]
    fc24:	sub	r1, r2, #1
    fc28:	cmp	r3, r1
    fc2c:	bne	fbec <__assert_fail@plt+0x6c1c>
    fc30:	cmp	r2, #0
    fc34:	movw	r4, #4680	; 0x1248
    fc38:	movt	r4, #2
    fc3c:	beq	fbf4 <__assert_fail@plt+0x6c24>
    fc40:	ldr	r1, [r4]
    fc44:	mov	r0, #92	; 0x5c
    fc48:	bl	8e5c <_IO_putc@plt>
    fc4c:	ldr	r1, [r4]
    fc50:	mov	r0, #10
    fc54:	bl	8e5c <_IO_putc@plt>
    fc58:	mov	r3, #1
    fc5c:	str	r3, [r6]
    fc60:	b	fbf4 <__assert_fail@plt+0x6c24>
    fc64:	movw	r2, #4680	; 0x1248
    fc68:	movt	r2, #2
    fc6c:	movw	r3, #4976	; 0x1370
    fc70:	movt	r3, #2
    fc74:	ldr	r1, [r2]
    fc78:	mov	r2, #0
    fc7c:	pop	{r4, r5, r6, lr}
    fc80:	str	r2, [r3]
    fc84:	b	8e5c <_IO_putc@plt>
    fc88:	push	{r3, r4, r5, lr}
    fc8c:	subs	r4, r0, #0
    fc90:	mov	r5, r1
    fc94:	bne	fca4 <__assert_fail@plt+0x6cd4>
    fc98:	b	fcd0 <__assert_fail@plt+0x6d00>
    fc9c:	cmp	r4, #0
    fca0:	beq	fcd0 <__assert_fail@plt+0x6d00>
    fca4:	mov	r0, r5
    fca8:	ldr	r1, [r4]
    fcac:	bl	8dcc <strcmp@plt>
    fcb0:	cmp	r0, #0
    fcb4:	beq	fcd0 <__assert_fail@plt+0x6d00>
    fcb8:	ldr	r3, [r4, #20]
    fcbc:	ldr	r4, [r4, #24]
    fcc0:	bge	fc9c <__assert_fail@plt+0x6ccc>
    fcc4:	mov	r4, r3
    fcc8:	cmp	r4, #0
    fccc:	bne	fca4 <__assert_fail@plt+0x6cd4>
    fcd0:	mov	r0, r4
    fcd4:	pop	{r3, r4, r5, pc}
    fcd8:	push	{r4, r5, r6, lr}
    fcdc:	mov	r6, r0
    fce0:	ldr	r4, [r0]
    fce4:	mov	r5, r1
    fce8:	cmp	r4, #0
    fcec:	beq	fdc0 <__assert_fail@plt+0x6df0>
    fcf0:	ldr	r0, [r1]
    fcf4:	ldr	r1, [r4]
    fcf8:	bl	8dcc <strcmp@plt>
    fcfc:	cmp	r0, #0
    fd00:	blt	fd74 <__assert_fail@plt+0x6da4>
    fd04:	add	r0, r4, #24
    fd08:	mov	r1, r5
    fd0c:	bl	fcd8 <__assert_fail@plt+0x6d08>
    fd10:	cmp	r0, #0
    fd14:	beq	fd88 <__assert_fail@plt+0x6db8>
    fd18:	ldr	r3, [r6]
    fd1c:	ldrh	r0, [r3, #16]
    fd20:	add	r0, r0, #1
    fd24:	uxth	r0, r0
    fd28:	strh	r0, [r3, #16]
    fd2c:	sxth	r0, r0
    fd30:	cmp	r0, #1
    fd34:	popeq	{r4, r5, r6, pc}
    fd38:	cmp	r0, #2
    fd3c:	bne	fd88 <__assert_fail@plt+0x6db8>
    fd40:	ldr	r2, [r3, #24]
    fd44:	ldrsh	r1, [r2, #16]
    fd48:	cmp	r1, #0
    fd4c:	blt	fe4c <__assert_fail@plt+0x6e7c>
    fd50:	ldr	ip, [r2, #20]
    fd54:	mov	r1, #0
    fd58:	mov	r0, r1
    fd5c:	str	ip, [r3, #24]
    fd60:	str	r3, [r2, #20]
    fd64:	str	r2, [r6]
    fd68:	strh	r1, [r3, #16]
    fd6c:	strh	r1, [r2, #16]
    fd70:	pop	{r4, r5, r6, pc}
    fd74:	add	r0, r4, #20
    fd78:	mov	r1, r5
    fd7c:	bl	fcd8 <__assert_fail@plt+0x6d08>
    fd80:	cmp	r0, #0
    fd84:	bne	fd90 <__assert_fail@plt+0x6dc0>
    fd88:	mov	r0, #0
    fd8c:	pop	{r4, r5, r6, pc}
    fd90:	ldr	r3, [r6]
    fd94:	ldrh	r0, [r3, #16]
    fd98:	sub	r0, r0, #1
    fd9c:	uxth	r0, r0
    fda0:	strh	r0, [r3, #16]
    fda4:	sxth	r0, r0
    fda8:	cmn	r0, #2
    fdac:	beq	fdd8 <__assert_fail@plt+0x6e08>
    fdb0:	cmn	r0, #1
    fdb4:	movne	r0, #0
    fdb8:	moveq	r0, #1
    fdbc:	pop	{r4, r5, r6, pc}
    fdc0:	str	r1, [r6]
    fdc4:	mov	r0, #1
    fdc8:	str	r4, [r1, #20]
    fdcc:	str	r4, [r1, #24]
    fdd0:	strh	r4, [r1, #16]
    fdd4:	pop	{r4, r5, r6, pc}
    fdd8:	ldr	r2, [r3, #20]
    fddc:	ldrsh	r1, [r2, #16]
    fde0:	cmp	r1, #0
    fde4:	ble	fedc <__assert_fail@plt+0x6f0c>
    fde8:	ldr	r1, [r2, #24]
    fdec:	str	r1, [r6]
    fdf0:	ldr	r1, [r1, #20]
    fdf4:	str	r1, [r2, #24]
    fdf8:	ldr	r1, [r6]
    fdfc:	ldr	r1, [r1, #24]
    fe00:	str	r1, [r3, #20]
    fe04:	ldr	r1, [r6]
    fe08:	str	r2, [r1, #20]
    fe0c:	ldr	r1, [r6]
    fe10:	str	r3, [r1, #24]
    fe14:	ldr	ip, [r6]
    fe18:	ldrsh	r1, [ip, #16]
    fe1c:	cmp	r1, #0
    fe20:	beq	fea8 <__assert_fail@plt+0x6ed8>
    fe24:	cmp	r1, #1
    fe28:	beq	fec8 <__assert_fail@plt+0x6ef8>
    fe2c:	cmn	r1, #1
    fe30:	moveq	r0, #1
    fe34:	moveq	r1, #0
    fe38:	strheq	r0, [r3, #16]
    fe3c:	strheq	r1, [r2, #16]
    fe40:	mov	r0, #0
    fe44:	strh	r0, [ip, #16]
    fe48:	pop	{r4, r5, r6, pc}
    fe4c:	ldr	r1, [r2, #20]
    fe50:	str	r1, [r6]
    fe54:	ldr	r1, [r1, #24]
    fe58:	str	r1, [r2, #20]
    fe5c:	ldr	r1, [r6]
    fe60:	ldr	r1, [r1, #20]
    fe64:	str	r1, [r3, #24]
    fe68:	ldr	r1, [r6]
    fe6c:	str	r3, [r1, #20]
    fe70:	ldr	r1, [r6]
    fe74:	str	r2, [r1, #24]
    fe78:	ldr	ip, [r6]
    fe7c:	ldrsh	r1, [ip, #16]
    fe80:	cmp	r1, #0
    fe84:	beq	fea8 <__assert_fail@plt+0x6ed8>
    fe88:	cmp	r1, #1
    fe8c:	beq	feb4 <__assert_fail@plt+0x6ee4>
    fe90:	cmn	r1, #1
    fe94:	moveq	r0, #0
    fe98:	moveq	r1, #1
    fe9c:	strheq	r0, [r3, #16]
    fea0:	strheq	r1, [r2, #16]
    fea4:	b	fe40 <__assert_fail@plt+0x6e70>
    fea8:	strh	r1, [r3, #16]
    feac:	strh	r1, [r2, #16]
    feb0:	b	fe40 <__assert_fail@plt+0x6e70>
    feb4:	mvn	r0, #0
    feb8:	mov	r1, #0
    febc:	strh	r0, [r3, #16]
    fec0:	strh	r1, [r2, #16]
    fec4:	b	fe40 <__assert_fail@plt+0x6e70>
    fec8:	mov	r0, #0
    fecc:	mvn	r1, #0
    fed0:	strh	r0, [r3, #16]
    fed4:	strh	r1, [r2, #16]
    fed8:	b	fe40 <__assert_fail@plt+0x6e70>
    fedc:	ldr	ip, [r2, #24]
    fee0:	mov	r1, #0
    fee4:	mov	r0, r1
    fee8:	str	ip, [r3, #20]
    feec:	str	r3, [r2, #24]
    fef0:	str	r2, [r6]
    fef4:	strh	r1, [r3, #16]
    fef8:	strh	r1, [r2, #16]
    fefc:	pop	{r4, r5, r6, pc}
    ff00:	movw	r0, #4932	; 0x1344
    ff04:	movw	r1, #4952	; 0x1358
    ff08:	movt	r0, #2
    ff0c:	movt	r1, #2
    ff10:	movw	r2, #4860	; 0x12fc
    ff14:	movw	r3, #4992	; 0x1380
    ff18:	movt	r2, #2
    ff1c:	movt	r3, #2
    ff20:	push	{r4}		; (str r4, [sp, #-4]!)
    ff24:	mov	ip, #1
    ff28:	mov	r4, #0
    ff2c:	str	ip, [r1]
    ff30:	str	r4, [r0]
    ff34:	mov	r0, #5
    ff38:	str	ip, [r2]
    ff3c:	str	r0, [r3]
    ff40:	pop	{r4}		; (ldr r4, [sp], #4)
    ff44:	bx	lr
    ff48:	push	{r3, lr}
    ff4c:	mvn	r2, #-2147483648	; 0x80000000
    ff50:	movw	r1, #28340	; 0x6eb4
    ff54:	mov	r0, #1
    ff58:	movt	r1, #1
    ff5c:	bl	8f58 <__printf_chk@plt>
    ff60:	mvn	r2, #-16777216	; 0xff000000
    ff64:	movw	r1, #28364	; 0x6ecc
    ff68:	mov	r0, #1
    ff6c:	movt	r1, #1
    ff70:	bl	8f58 <__printf_chk@plt>
    ff74:	mvn	r2, #-2147483648	; 0x80000000
    ff78:	movw	r1, #28388	; 0x6ee4
    ff7c:	mov	r0, #1
    ff80:	movt	r1, #1
    ff84:	bl	8f58 <__printf_chk@plt>
    ff88:	mvn	r2, #-2147483648	; 0x80000000
    ff8c:	movw	r1, #28412	; 0x6efc
    ff90:	mov	r0, #1
    ff94:	movt	r1, #1
    ff98:	bl	8f58 <__printf_chk@plt>
    ff9c:	mvn	r2, #-2147483648	; 0x80000000
    ffa0:	movw	r1, #28436	; 0x6f14
    ffa4:	mov	r0, #1
    ffa8:	movt	r1, #1
    ffac:	bl	8f58 <__printf_chk@plt>
    ffb0:	movw	r1, #28460	; 0x6f2c
    ffb4:	mov	r0, #1
    ffb8:	movt	r1, #1
    ffbc:	movw	r2, #32767	; 0x7fff
    ffc0:	pop	{r3, lr}
    ffc4:	b	8f58 <__printf_chk@plt>
    ffc8:	push	{r3, lr}
    ffcc:	movw	r3, #4664	; 0x1238
    ffd0:	movt	r3, #2
    ffd4:	movw	r0, #28484	; 0x6f44
    ffd8:	mov	r1, #1
    ffdc:	movt	r0, #1
    ffe0:	ldr	r3, [r3]
    ffe4:	mov	r2, #39	; 0x27
    ffe8:	bl	8e68 <fwrite@plt>
    ffec:	mov	r0, #1
    fff0:	bl	8eec <exit@plt>
    fff4:	push	{r3, lr}
    fff8:	bl	8ea4 <malloc@plt>
    fffc:	cmp	r0, #0
   10000:	popne	{r3, pc}
   10004:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   10008:	push	{r3, r4, r5, lr}
   1000c:	mov	r5, r0
   10010:	bl	8ef8 <strlen@plt>
   10014:	add	r4, r0, #1
   10018:	mov	r0, r4
   1001c:	bl	8ea4 <malloc@plt>
   10020:	cmp	r0, #0
   10024:	beq	10038 <__assert_fail@plt+0x7068>
   10028:	mov	r1, r5
   1002c:	mov	r2, r4
   10030:	pop	{r3, r4, r5, lr}
   10034:	b	8e20 <memcpy@plt>
   10038:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   1003c:	push	{r4, r5, r6, lr}
   10040:	mov	r4, r0
   10044:	mov	r0, #12
   10048:	mov	r6, r1
   1004c:	mov	r5, r2
   10050:	bl	8ea4 <malloc@plt>
   10054:	subs	r3, r0, #0
   10058:	beq	1006c <__assert_fail@plt+0x709c>
   1005c:	str	r6, [r3]
   10060:	str	r5, [r3, #4]
   10064:	str	r4, [r3, #8]
   10068:	pop	{r4, r5, r6, pc}
   1006c:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   10070:	push	{r4, r5, r6, r7, lr}
   10074:	movw	r4, #4648	; 0x1228
   10078:	movt	r4, #2
   1007c:	sub	sp, sp, #36	; 0x24
   10080:	subs	r5, r0, #0
   10084:	mov	r6, r1
   10088:	ldr	r3, [r4]
   1008c:	str	r3, [sp, #28]
   10090:	beq	10148 <__assert_fail@plt+0x7178>
   10094:	ldr	r0, [r5, #8]
   10098:	add	r1, r1, #12
   1009c:	bl	10070 <__assert_fail@plt+0x70a0>
   100a0:	ldr	r3, [r5, #4]
   100a4:	cmp	r3, #0
   100a8:	mov	r7, r0
   100ac:	bne	1010c <__assert_fail@plt+0x713c>
   100b0:	ldr	r2, [r5]
   100b4:	cmp	r6, #1
   100b8:	add	r5, sp, #8
   100bc:	movwne	r3, #28536	; 0x6f78
   100c0:	movweq	r3, #27940	; 0x6d24
   100c4:	str	r2, [sp]
   100c8:	movne	r1, #1
   100cc:	movne	r0, r5
   100d0:	movtne	r3, #1
   100d4:	moveq	r1, r6
   100d8:	moveq	r0, r5
   100dc:	movteq	r3, #1
   100e0:	mov	r2, #20
   100e4:	bl	8f1c <__sprintf_chk@plt>
   100e8:	mov	r0, r7
   100ec:	mov	r1, r5
   100f0:	bl	8e80 <strcat@plt>
   100f4:	ldr	r2, [sp, #28]
   100f8:	ldr	r3, [r4]
   100fc:	cmp	r2, r3
   10100:	bne	10160 <__assert_fail@plt+0x7190>
   10104:	add	sp, sp, #36	; 0x24
   10108:	pop	{r4, r5, r6, r7, pc}
   1010c:	ldr	r2, [r5]
   10110:	cmp	r6, #1
   10114:	add	r5, sp, #8
   10118:	movwne	r3, #28524	; 0x6f6c
   1011c:	movweq	r3, #28532	; 0x6f74
   10120:	str	r2, [sp]
   10124:	movne	r1, #1
   10128:	movne	r0, r5
   1012c:	movtne	r3, #1
   10130:	moveq	r1, r6
   10134:	moveq	r0, r5
   10138:	movteq	r3, #1
   1013c:	mov	r2, #20
   10140:	bl	8f1c <__sprintf_chk@plt>
   10144:	b	100e8 <__assert_fail@plt+0x7118>
   10148:	mov	r0, r1
   1014c:	bl	8ea4 <malloc@plt>
   10150:	cmp	r0, #0
   10154:	strbne	r5, [r0]
   10158:	bne	100f4 <__assert_fail@plt+0x7124>
   1015c:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   10160:	bl	8e44 <__stack_chk_fail@plt>
   10164:	push	{r3, r4, r5, lr}
   10168:	movw	r4, #4772	; 0x12a4
   1016c:	movt	r4, #2
   10170:	mov	r5, r0
   10174:	ldr	r0, [r4]
   10178:	cmp	r0, #0
   1017c:	beq	10184 <__assert_fail@plt+0x71b4>
   10180:	bl	8e08 <free@plt>
   10184:	ldr	r3, [r4, #4]
   10188:	mov	r0, r5
   1018c:	mov	r1, #1
   10190:	str	r3, [r4]
   10194:	bl	10070 <__assert_fail@plt+0x70a0>
   10198:	str	r0, [r4, #4]
   1019c:	pop	{r3, r4, r5, pc}
   101a0:	push	{r3, r4, r5, lr}
   101a4:	movw	r5, #4772	; 0x12a4
   101a8:	movt	r5, #2
   101ac:	mov	r4, r0
   101b0:	ldr	r0, [r5]
   101b4:	cmp	r0, #0
   101b8:	beq	101c0 <__assert_fail@plt+0x71f0>
   101bc:	bl	8e08 <free@plt>
   101c0:	ldr	r3, [r5, #4]
   101c4:	cmp	r4, #0
   101c8:	str	r3, [r5]
   101cc:	beq	10240 <__assert_fail@plt+0x7270>
   101d0:	mov	r3, r4
   101d4:	mov	r0, #0
   101d8:	ldr	r3, [r3, #8]
   101dc:	add	r0, r0, #1
   101e0:	cmp	r3, #0
   101e4:	bne	101d8 <__assert_fail@plt+0x7208>
   101e8:	add	r0, r0, #1
   101ec:	bl	8ea4 <malloc@plt>
   101f0:	subs	ip, r0, #0
   101f4:	beq	10250 <__assert_fail@plt+0x7280>
   101f8:	cmp	r4, #0
   101fc:	str	ip, [r5, #4]
   10200:	beq	10248 <__assert_fail@plt+0x7278>
   10204:	sub	r2, ip, #1
   10208:	mov	r3, #0
   1020c:	ldr	r1, [r4]
   10210:	add	r3, r3, #1
   10214:	cmp	r1, #0
   10218:	moveq	r1, #48	; 0x30
   1021c:	movne	r1, #49	; 0x31
   10220:	strb	r1, [r2, #1]!
   10224:	ldr	r4, [r4, #8]
   10228:	cmp	r4, #0
   1022c:	bne	1020c <__assert_fail@plt+0x723c>
   10230:	mov	r2, #0
   10234:	mov	r0, ip
   10238:	strb	r2, [ip, r3]
   1023c:	pop	{r3, r4, r5, pc}
   10240:	mov	r0, #1
   10244:	b	101ec <__assert_fail@plt+0x721c>
   10248:	mov	r3, r4
   1024c:	b	10230 <__assert_fail@plt+0x7260>
   10250:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   10254:	push	{r4, r5, r6, lr}
   10258:	movw	r4, #4808	; 0x12c8
   1025c:	movt	r4, #2
   10260:	mov	r5, r0
   10264:	ldr	r3, [r4]
   10268:	cmp	r3, r0
   1026c:	popge	{r4, r5, r6, pc}
   10270:	movw	r6, #4812	; 0x12cc
   10274:	movt	r6, #2
   10278:	ldr	r0, [r6]
   1027c:	cmp	r0, #0
   10280:	beq	10288 <__assert_fail@plt+0x72b8>
   10284:	bl	8e08 <free@plt>
   10288:	mov	r0, r5
   1028c:	bl	8ea4 <malloc@plt>
   10290:	cmp	r0, #0
   10294:	strne	r0, [r6]
   10298:	strne	r5, [r4]
   1029c:	popne	{r4, r5, r6, pc}
   102a0:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   102a4:	push	{r3, lr}
   102a8:	movw	r3, #4800	; 0x12c0
   102ac:	movt	r3, #2
   102b0:	movw	ip, #4872	; 0x1308
   102b4:	movw	r1, #4868	; 0x1304
   102b8:	movt	ip, #2
   102bc:	ldr	r3, [r3]
   102c0:	movt	r1, #2
   102c4:	movw	r2, #4880	; 0x1310
   102c8:	movt	r2, #2
   102cc:	cmp	r3, #0
   102d0:	movw	r3, #4924	; 0x133c
   102d4:	movt	r3, #2
   102d8:	mov	lr, #0
   102dc:	mov	r0, #1
   102e0:	str	lr, [ip]
   102e4:	str	lr, [r1]
   102e8:	mov	ip, #2
   102ec:	str	r0, [r2]
   102f0:	str	ip, [r3]
   102f4:	bne	10324 <__assert_fail@plt+0x7354>
   102f8:	bl	ddf0 <__assert_fail@plt+0x4e20>
   102fc:	movw	r3, #4920	; 0x1338
   10300:	movt	r3, #2
   10304:	movw	r2, #4864	; 0x1300
   10308:	movt	r2, #2
   1030c:	mov	r1, #0
   10310:	mov	r0, #64	; 0x40
   10314:	strb	r1, [r3]
   10318:	pop	{r3, lr}
   1031c:	str	r1, [r2]
   10320:	b	10254 <__assert_fail@plt+0x7284>
   10324:	movw	r1, #28540	; 0x6f7c
   10328:	movt	r1, #1
   1032c:	bl	8f58 <__printf_chk@plt>
   10330:	b	102fc <__assert_fail@plt+0x732c>
   10334:	push	{r4, r5, r6, lr}
   10338:	movw	r4, #4864	; 0x1300
   1033c:	movt	r4, #2
   10340:	movw	r5, #4920	; 0x1338
   10344:	movt	r5, #2
   10348:	ldr	r6, [r4]
   1034c:	cmp	r6, #0
   10350:	bne	1038c <__assert_fail@plt+0x73bc>
   10354:	ldrb	r3, [r5]
   10358:	cmp	r3, #0
   1035c:	beq	10398 <__assert_fail@plt+0x73c8>
   10360:	movw	r3, #4800	; 0x12c0
   10364:	movt	r3, #2
   10368:	ldr	r3, [r3]
   1036c:	cmp	r3, #0
   10370:	beq	103ac <__assert_fail@plt+0x73dc>
   10374:	movw	r0, #31192	; 0x79d8
   10378:	movt	r0, #1
   1037c:	bl	8e98 <puts@plt>
   10380:	movw	r3, #4924	; 0x133c
   10384:	movt	r3, #2
   10388:	str	r6, [r3]
   1038c:	ldrb	r3, [r5]
   10390:	cmp	r3, #0
   10394:	bne	103a4 <__assert_fail@plt+0x73d4>
   10398:	mov	r3, #0
   1039c:	str	r3, [r4]
   103a0:	pop	{r4, r5, r6, pc}
   103a4:	pop	{r4, r5, r6, lr}
   103a8:	b	102a4 <__assert_fail@plt+0x72d4>
   103ac:	bl	cdfc <__assert_fail@plt+0x3e2c>
   103b0:	ldrb	r3, [r5]
   103b4:	cmp	r3, #0
   103b8:	beq	10398 <__assert_fail@plt+0x73c8>
   103bc:	b	103a4 <__assert_fail@plt+0x73d4>
   103c0:	push	{r0, r1, r2, r3}
   103c4:	movw	r3, #4904	; 0x1328
   103c8:	movt	r3, #2
   103cc:	push	{r4, r5, r6, lr}
   103d0:	movw	r5, #4648	; 0x1228
   103d4:	ldrb	r1, [r3]
   103d8:	movt	r5, #2
   103dc:	sub	sp, sp, #16
   103e0:	movw	r4, #4664	; 0x1238
   103e4:	cmp	r1, #0
   103e8:	ldr	r3, [r5]
   103ec:	movw	r1, #4968	; 0x1368
   103f0:	movt	r1, #2
   103f4:	movt	r4, #2
   103f8:	ldr	r6, [sp, #32]
   103fc:	ldr	ip, [r1]
   10400:	add	r2, sp, #36	; 0x24
   10404:	str	r3, [sp, #12]
   10408:	movweq	r3, #4876	; 0x130c
   1040c:	movteq	r3, #2
   10410:	movwne	r3, #28544	; 0x6f80
   10414:	str	r2, [sp, #8]
   10418:	movtne	r3, #1
   1041c:	ldreq	r3, [r3]
   10420:	mov	r1, #1
   10424:	str	ip, [sp]
   10428:	movw	r2, #28560	; 0x6f90
   1042c:	ldr	r0, [r4]
   10430:	movt	r2, #1
   10434:	bl	8f7c <__fprintf_chk@plt>
   10438:	mov	r2, r6
   1043c:	ldr	r3, [sp, #8]
   10440:	mov	r1, #1
   10444:	ldr	r0, [r4]
   10448:	bl	8ebc <__vfprintf_chk@plt>
   1044c:	ldr	r1, [r4]
   10450:	mov	r0, #10
   10454:	bl	8f94 <fputc@plt>
   10458:	ldr	r0, [sp, #12]
   1045c:	ldr	r1, [r5]
   10460:	movw	r3, #4864	; 0x1300
   10464:	movt	r3, #2
   10468:	mov	r2, #1
   1046c:	cmp	r0, r1
   10470:	str	r2, [r3]
   10474:	bne	10488 <__assert_fail@plt+0x74b8>
   10478:	add	sp, sp, #16
   1047c:	pop	{r4, r5, r6, lr}
   10480:	add	sp, sp, #16
   10484:	bx	lr
   10488:	bl	8e44 <__stack_chk_fail@plt>

0001048c <warn@@Base>:
   1048c:	push	{r0, r1, r2, r3}
   10490:	movw	r3, #4788	; 0x12b4
   10494:	movt	r3, #2
   10498:	push	{r4, r5, r6, lr}
   1049c:	movw	r4, #4648	; 0x1228
   104a0:	movt	r4, #2
   104a4:	ldr	r1, [r3]
   104a8:	sub	sp, sp, #16
   104ac:	ldr	r3, [r4]
   104b0:	cmp	r1, #0
   104b4:	add	r2, sp, #36	; 0x24
   104b8:	ldr	r6, [sp, #32]
   104bc:	str	r2, [sp, #8]
   104c0:	str	r3, [sp, #12]
   104c4:	beq	10568 <warn@@Base+0xdc>
   104c8:	movw	r3, #4904	; 0x1328
   104cc:	movt	r3, #2
   104d0:	movw	r1, #4968	; 0x1368
   104d4:	movt	r1, #2
   104d8:	ldrb	r3, [r3]
   104dc:	movw	r5, #4664	; 0x1238
   104e0:	ldr	ip, [r1]
   104e4:	movt	r5, #2
   104e8:	cmp	r3, #0
   104ec:	mov	r1, #1
   104f0:	movw	r2, #28568	; 0x6f98
   104f4:	ldr	r0, [r5]
   104f8:	movweq	r3, #4876	; 0x130c
   104fc:	movteq	r3, #2
   10500:	movwne	r3, #28544	; 0x6f80
   10504:	movt	r2, #1
   10508:	ldreq	r3, [r3]
   1050c:	movtne	r3, #1
   10510:	str	ip, [sp]
   10514:	bl	8f7c <__fprintf_chk@plt>
   10518:	mov	r2, r6
   1051c:	ldr	r3, [sp, #8]
   10520:	mov	r1, #1
   10524:	ldr	r0, [r5]
   10528:	bl	8ebc <__vfprintf_chk@plt>
   1052c:	ldr	r1, [r5]
   10530:	mov	r0, #10
   10534:	bl	8f94 <fputc@plt>
   10538:	movw	r3, #4864	; 0x1300
   1053c:	movt	r3, #2
   10540:	mov	r2, #1
   10544:	str	r2, [r3]
   10548:	ldr	r2, [sp, #12]
   1054c:	ldr	r3, [r4]
   10550:	cmp	r2, r3
   10554:	bne	105f0 <warn@@Base+0x164>
   10558:	add	sp, sp, #16
   1055c:	pop	{r4, r5, r6, lr}
   10560:	add	sp, sp, #16
   10564:	bx	lr
   10568:	movw	r3, #4792	; 0x12b8
   1056c:	movt	r3, #2
   10570:	ldr	r3, [r3]
   10574:	cmp	r3, #0
   10578:	beq	10548 <warn@@Base+0xbc>
   1057c:	movw	r3, #4904	; 0x1328
   10580:	movt	r3, #2
   10584:	movw	r1, #4968	; 0x1368
   10588:	movt	r1, #2
   1058c:	ldrb	r3, [r3]
   10590:	movw	r5, #4664	; 0x1238
   10594:	ldr	ip, [r1]
   10598:	movt	r5, #2
   1059c:	cmp	r3, #0
   105a0:	mov	r1, #1
   105a4:	ldr	r0, [r5]
   105a8:	movw	r2, #28584	; 0x6fa8
   105ac:	movweq	r3, #4876	; 0x130c
   105b0:	movteq	r3, #2
   105b4:	movwne	r3, #28544	; 0x6f80
   105b8:	movt	r2, #1
   105bc:	ldreq	r3, [r3]
   105c0:	movtne	r3, #1
   105c4:	str	ip, [sp]
   105c8:	bl	8f7c <__fprintf_chk@plt>
   105cc:	mov	r2, r6
   105d0:	ldr	r0, [r5]
   105d4:	mov	r1, #1
   105d8:	ldr	r3, [sp, #8]
   105dc:	bl	8ebc <__vfprintf_chk@plt>
   105e0:	ldr	r1, [r5]
   105e4:	mov	r0, #10
   105e8:	bl	8f94 <fputc@plt>
   105ec:	b	10548 <warn@@Base+0xbc>
   105f0:	bl	8e44 <__stack_chk_fail@plt>
   105f4:	push	{r3, r4, r5, r6, r7, lr}
   105f8:	subs	r7, r0, #0
   105fc:	mov	r5, r1
   10600:	movne	r6, r7
   10604:	beq	10664 <warn@@Base+0x1d8>
   10608:	ldr	r4, [r6, #8]
   1060c:	cmp	r4, #0
   10610:	bne	10624 <warn@@Base+0x198>
   10614:	b	1064c <warn@@Base+0x1c0>
   10618:	ldr	r4, [r4, #8]
   1061c:	cmp	r4, #0
   10620:	beq	1064c <warn@@Base+0x1c0>
   10624:	ldr	r2, [r4]
   10628:	ldr	r3, [r6]
   1062c:	cmp	r2, r3
   10630:	bne	10618 <warn@@Base+0x18c>
   10634:	movw	r0, #28604	; 0x6fbc
   10638:	movt	r0, #1
   1063c:	bl	103c0 <__assert_fail@plt+0x73f0>
   10640:	ldr	r4, [r4, #8]
   10644:	cmp	r4, #0
   10648:	bne	10624 <warn@@Base+0x198>
   1064c:	ldr	r3, [r6, #4]
   10650:	cmp	r3, #0
   10654:	bne	10730 <warn@@Base+0x2a4>
   10658:	ldr	r6, [r6, #8]
   1065c:	cmp	r6, #0
   10660:	bne	10608 <warn@@Base+0x17c>
   10664:	cmp	r5, #0
   10668:	popeq	{r3, r4, r5, r6, r7, pc}
   1066c:	mov	r6, r5
   10670:	ldr	r4, [r6, #8]
   10674:	cmp	r4, #0
   10678:	bne	1068c <warn@@Base+0x200>
   1067c:	b	106b4 <warn@@Base+0x228>
   10680:	ldr	r4, [r4, #8]
   10684:	cmp	r4, #0
   10688:	beq	106b4 <warn@@Base+0x228>
   1068c:	ldr	r2, [r4]
   10690:	ldr	r3, [r6]
   10694:	cmp	r2, r3
   10698:	bne	10680 <warn@@Base+0x1f4>
   1069c:	movw	r0, #28660	; 0x6ff4
   106a0:	movt	r0, #1
   106a4:	bl	103c0 <__assert_fail@plt+0x73f0>
   106a8:	ldr	r4, [r4, #8]
   106ac:	cmp	r4, #0
   106b0:	bne	1068c <warn@@Base+0x200>
   106b4:	ldr	r3, [r6, #4]
   106b8:	cmp	r3, #0
   106bc:	bne	10720 <warn@@Base+0x294>
   106c0:	ldr	r6, [r6, #8]
   106c4:	cmp	r6, #0
   106c8:	bne	10670 <warn@@Base+0x1e4>
   106cc:	cmp	r7, #0
   106d0:	popeq	{r3, r4, r5, r6, r7, pc}
   106d4:	mov	r4, r5
   106d8:	b	106e8 <warn@@Base+0x25c>
   106dc:	ldr	r4, [r4, #8]
   106e0:	cmp	r4, #0
   106e4:	beq	10710 <warn@@Base+0x284>
   106e8:	ldr	r2, [r4]
   106ec:	ldr	r3, [r7]
   106f0:	cmp	r2, r3
   106f4:	bne	106dc <warn@@Base+0x250>
   106f8:	movw	r0, #28712	; 0x7028
   106fc:	movt	r0, #1
   10700:	bl	103c0 <__assert_fail@plt+0x73f0>
   10704:	ldr	r4, [r4, #8]
   10708:	cmp	r4, #0
   1070c:	bne	106e8 <warn@@Base+0x25c>
   10710:	ldr	r7, [r7, #8]
   10714:	cmp	r7, #0
   10718:	bne	106d4 <warn@@Base+0x248>
   1071c:	pop	{r3, r4, r5, r6, r7, pc}
   10720:	movw	r0, #28692	; 0x7014
   10724:	movt	r0, #1
   10728:	bl	103c0 <__assert_fail@plt+0x73f0>
   1072c:	b	106c0 <warn@@Base+0x234>
   10730:	movw	r0, #28632	; 0x6fd8
   10734:	movt	r0, #1
   10738:	bl	1048c <warn@@Base>
   1073c:	b	10658 <warn@@Base+0x1cc>
   10740:	push	{r3, r4, r5, r6, r7, lr}
   10744:	mov	r7, r1
   10748:	mov	r5, r0
   1074c:	bl	8ef8 <strlen@plt>
   10750:	cmp	r0, #1
   10754:	beq	10768 <warn@@Base+0x2dc>
   10758:	movw	r0, #28756	; 0x7054
   1075c:	mov	r1, r5
   10760:	movt	r0, #1
   10764:	bl	1048c <warn@@Base>
   10768:	movw	r4, #4932	; 0x1344
   1076c:	movt	r4, #2
   10770:	mov	r1, r5
   10774:	ldr	r0, [r4]
   10778:	bl	fc88 <__assert_fail@plt+0x6cb8>
   1077c:	subs	r6, r0, #0
   10780:	beq	10928 <warn@@Base+0x49c>
   10784:	cmp	r7, #3
   10788:	ldrls	pc, [pc, r7, lsl #2]
   1078c:	b	108c4 <warn@@Base+0x438>
   10790:	andeq	r0, r1, r4, ror #16
   10794:	andeq	r0, r1, r0, lsl #16
   10798:	andeq	r0, r1, r0, lsr #15
   1079c:	andeq	r0, r1, r0, lsr #15
   107a0:	ldr	r3, [r6, #8]
   107a4:	cmp	r3, #0
   107a8:	bne	108d8 <warn@@Base+0x44c>
   107ac:	movw	r3, #4860	; 0x12fc
   107b0:	movt	r3, #2
   107b4:	movw	r2, #32766	; 0x7ffe
   107b8:	ldr	r0, [r3]
   107bc:	cmp	r0, r2
   107c0:	add	r2, r0, #1
   107c4:	str	r0, [r6, #8]
   107c8:	str	r2, [r3]
   107cc:	bgt	1098c <warn@@Base+0x500>
   107d0:	movw	r3, #4884	; 0x1314
   107d4:	movt	r3, #2
   107d8:	ldr	r3, [r3]
   107dc:	cmp	r0, r3
   107e0:	blt	107ec <warn@@Base+0x360>
   107e4:	bl	e658 <__assert_fail@plt+0x5688>
   107e8:	ldr	r0, [r6, #8]
   107ec:	movw	r3, #4944	; 0x1350
   107f0:	movt	r3, #2
   107f4:	ldr	r3, [r3]
   107f8:	str	r5, [r3, r0, lsl #2]
   107fc:	pop	{r3, r4, r5, r6, r7, pc}
   10800:	ldr	r3, [r6, #4]
   10804:	cmp	r3, #0
   10808:	bne	10914 <warn@@Base+0x488>
   1080c:	movw	r2, #4952	; 0x1358
   10810:	movt	r2, #2
   10814:	movw	r1, #32766	; 0x7ffe
   10818:	ldr	r3, [r2]
   1081c:	cmp	r3, r1
   10820:	add	r1, r3, #1
   10824:	str	r3, [r6, #4]
   10828:	str	r1, [r2]
   1082c:	bgt	109a0 <warn@@Base+0x514>
   10830:	movw	r2, #4900	; 0x1324
   10834:	movt	r2, #2
   10838:	ldr	r2, [r2]
   1083c:	cmp	r3, r2
   10840:	blt	1084c <warn@@Base+0x3c0>
   10844:	bl	e88c <__assert_fail@plt+0x58bc>
   10848:	ldr	r3, [r6, #4]
   1084c:	movw	r2, #4896	; 0x1320
   10850:	movt	r2, #2
   10854:	rsb	r0, r3, #0
   10858:	ldr	r2, [r2]
   1085c:	str	r5, [r2, r3, lsl #2]
   10860:	pop	{r3, r4, r5, r6, r7, pc}
   10864:	ldr	r3, [r6, #12]
   10868:	cmp	r3, #0
   1086c:	bne	10904 <warn@@Base+0x478>
   10870:	movw	r3, #4992	; 0x1380
   10874:	movt	r3, #2
   10878:	ldr	r0, [r3]
   1087c:	cmp	r0, #32768	; 0x8000
   10880:	add	r2, r0, #1
   10884:	str	r0, [r6, #12]
   10888:	str	r2, [r3]
   1088c:	bge	109b4 <warn@@Base+0x528>
   10890:	movw	r3, #4916	; 0x1334
   10894:	movt	r3, #2
   10898:	ldr	r3, [r3]
   1089c:	cmp	r0, r3
   108a0:	blt	108ac <warn@@Base+0x420>
   108a4:	bl	e7b4 <__assert_fail@plt+0x57e4>
   108a8:	ldr	r0, [r6, #12]
   108ac:	movw	r3, #4964	; 0x1364
   108b0:	movt	r3, #2
   108b4:	sub	r2, r0, #-1073741823	; 0xc0000001
   108b8:	ldr	r3, [r3]
   108bc:	str	r5, [r3, r2, lsl #2]
   108c0:	pop	{r3, r4, r5, r6, r7, pc}
   108c4:	movw	r0, #28852	; 0x70b4
   108c8:	movt	r0, #1
   108cc:	bl	103c0 <__assert_fail@plt+0x73f0>
   108d0:	mov	r0, #1
   108d4:	bl	8eec <exit@plt>
   108d8:	mov	r0, r5
   108dc:	bl	8e08 <free@plt>
   108e0:	movw	r3, #4796	; 0x12bc
   108e4:	movt	r3, #2
   108e8:	ldr	r0, [r6, #8]
   108ec:	ldr	r3, [r3]
   108f0:	cmp	r3, #0
   108f4:	beq	10964 <warn@@Base+0x4d8>
   108f8:	cmp	r7, #3
   108fc:	beq	10968 <warn@@Base+0x4dc>
   10900:	pop	{r3, r4, r5, r6, r7, pc}
   10904:	mov	r0, r5
   10908:	bl	8e08 <free@plt>
   1090c:	ldr	r0, [r6, #12]
   10910:	pop	{r3, r4, r5, r6, r7, pc}
   10914:	mov	r0, r5
   10918:	bl	8e08 <free@plt>
   1091c:	ldr	r0, [r6, #4]
   10920:	rsb	r0, r0, #0
   10924:	pop	{r3, r4, r5, r6, r7, pc}
   10928:	mov	r0, #28
   1092c:	bl	8ea4 <malloc@plt>
   10930:	subs	r6, r0, #0
   10934:	beq	109c8 <warn@@Base+0x53c>
   10938:	mov	r0, r5
   1093c:	bl	10008 <__assert_fail@plt+0x7038>
   10940:	mov	r3, #0
   10944:	mov	r1, r6
   10948:	str	r3, [r6, #4]
   1094c:	str	r3, [r6, #8]
   10950:	str	r3, [r6, #12]
   10954:	str	r0, [r6]
   10958:	mov	r0, r4
   1095c:	bl	fcd8 <__assert_fail@plt+0x6d08>
   10960:	b	10784 <warn@@Base+0x2f8>
   10964:	pop	{r3, r4, r5, r6, r7, pc}
   10968:	cmp	r0, #6
   1096c:	popgt	{r3, r4, r5, r6, r7, pc}
   10970:	movw	r3, #4860	; 0x12fc
   10974:	movt	r3, #2
   10978:	ldr	r0, [r3]
   1097c:	add	r2, r0, #1
   10980:	str	r2, [r3]
   10984:	str	r0, [r6, #8]
   10988:	pop	{r3, r4, r5, r6, r7, pc}
   1098c:	movw	r0, #28812	; 0x708c
   10990:	movt	r0, #1
   10994:	bl	103c0 <__assert_fail@plt+0x73f0>
   10998:	mov	r0, #1
   1099c:	bl	8eec <exit@plt>
   109a0:	movw	r0, #28784	; 0x7070
   109a4:	movt	r0, #1
   109a8:	bl	103c0 <__assert_fail@plt+0x73f0>
   109ac:	mov	r0, #1
   109b0:	bl	8eec <exit@plt>
   109b4:	movw	r0, #28832	; 0x70a0
   109b8:	movt	r0, #1
   109bc:	bl	103c0 <__assert_fail@plt+0x73f0>
   109c0:	mov	r0, #1
   109c4:	bl	8eec <exit@plt>
   109c8:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   109cc:	push	{r0, r1, r2, r3}
   109d0:	movw	r3, #4980	; 0x1374
   109d4:	movw	r2, #4944	; 0x1350
   109d8:	movt	r3, #2
   109dc:	movt	r2, #2
   109e0:	ldr	ip, [r3]
   109e4:	ldr	r1, [r2]
   109e8:	movw	r2, #28912	; 0x70f0
   109ec:	push	{r4, r5, r6, lr}
   109f0:	movw	r5, #4648	; 0x1228
   109f4:	movt	r5, #2
   109f8:	ldr	lr, [r3, #4]
   109fc:	sub	sp, sp, #16
   10a00:	ldr	r3, [r1, ip, lsl #2]
   10a04:	movw	r4, #4664	; 0x1238
   10a08:	ldr	ip, [r5]
   10a0c:	movt	r4, #2
   10a10:	str	lr, [sp]
   10a14:	movt	r2, #1
   10a18:	mov	r1, #1
   10a1c:	ldr	r6, [sp, #32]
   10a20:	ldr	r0, [r4]
   10a24:	str	ip, [sp, #12]
   10a28:	bl	8f7c <__fprintf_chk@plt>
   10a2c:	add	ip, sp, #36	; 0x24
   10a30:	mov	r2, r6
   10a34:	mov	r1, #1
   10a38:	ldr	r0, [r4]
   10a3c:	mov	r3, ip
   10a40:	str	ip, [sp, #8]
   10a44:	bl	8ebc <__vfprintf_chk@plt>
   10a48:	ldr	r1, [r4]
   10a4c:	mov	r0, #10
   10a50:	bl	8f94 <fputc@plt>
   10a54:	ldr	r0, [sp, #12]
   10a58:	ldr	r1, [r5]
   10a5c:	movw	r3, #4948	; 0x1354
   10a60:	movt	r3, #2
   10a64:	mov	r2, #1
   10a68:	cmp	r0, r1
   10a6c:	strb	r2, [r3]
   10a70:	bne	10a84 <warn@@Base+0x5f8>
   10a74:	add	sp, sp, #16
   10a78:	pop	{r4, r5, r6, lr}
   10a7c:	add	sp, sp, #16
   10a80:	bx	lr
   10a84:	bl	8e44 <__stack_chk_fail@plt>
   10a88:	push	{r0, r1, r2, r3}
   10a8c:	movw	r3, #4980	; 0x1374
   10a90:	movw	r2, #4944	; 0x1350
   10a94:	movt	r3, #2
   10a98:	movt	r2, #2
   10a9c:	ldr	ip, [r3]
   10aa0:	ldr	r1, [r2]
   10aa4:	movw	r2, #28948	; 0x7114
   10aa8:	push	{r4, r5, r6, lr}
   10aac:	movw	r5, #4648	; 0x1228
   10ab0:	movt	r5, #2
   10ab4:	ldr	lr, [r3, #4]
   10ab8:	sub	sp, sp, #16
   10abc:	ldr	r3, [r1, ip, lsl #2]
   10ac0:	movw	r4, #4664	; 0x1238
   10ac4:	ldr	ip, [r5]
   10ac8:	movt	r4, #2
   10acc:	str	lr, [sp]
   10ad0:	movt	r2, #1
   10ad4:	mov	r1, #1
   10ad8:	ldr	r6, [sp, #32]
   10adc:	ldr	r0, [r4]
   10ae0:	str	ip, [sp, #12]
   10ae4:	bl	8f7c <__fprintf_chk@plt>
   10ae8:	add	ip, sp, #36	; 0x24
   10aec:	mov	r2, r6
   10af0:	mov	r1, #1
   10af4:	ldr	r0, [r4]
   10af8:	mov	r3, ip
   10afc:	str	ip, [sp, #8]
   10b00:	bl	8ebc <__vfprintf_chk@plt>
   10b04:	ldr	r1, [r4]
   10b08:	mov	r0, #10
   10b0c:	bl	8f94 <fputc@plt>
   10b10:	ldr	r2, [sp, #12]
   10b14:	ldr	r3, [r5]
   10b18:	cmp	r2, r3
   10b1c:	bne	10b30 <warn@@Base+0x6a4>
   10b20:	add	sp, sp, #16
   10b24:	pop	{r4, r5, r6, lr}
   10b28:	add	sp, sp, #16
   10b2c:	bx	lr
   10b30:	bl	8e44 <__stack_chk_fail@plt>
   10b34:	push	{r3, lr}
   10b38:	movw	r0, #31692	; 0x7bcc
   10b3c:	movt	r0, #1
   10b40:	bl	8e98 <puts@plt>
   10b44:	movw	r0, #31744	; 0x7c00
   10b48:	pop	{r3, lr}
   10b4c:	movt	r0, #1
   10b50:	b	8e98 <puts@plt>
   10b54:	push	{lr}		; (str lr, [sp, #-4]!)
   10b58:	sub	sp, sp, #12
   10b5c:	movw	r3, #31796	; 0x7c34
   10b60:	movw	r1, #31776	; 0x7c20
   10b64:	movt	r3, #1
   10b68:	movt	r1, #1
   10b6c:	str	r3, [sp]
   10b70:	movw	r2, #15440	; 0x3c50
   10b74:	movw	r3, #31788	; 0x7c2c
   10b78:	movt	r2, #1
   10b7c:	movt	r3, #1
   10b80:	mov	r0, #1
   10b84:	bl	8f58 <__printf_chk@plt>
   10b88:	add	sp, sp, #12
   10b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   10b90:	push	{lr}		; (str lr, [sp, #-4]!)
   10b94:	sub	sp, sp, #12
   10b98:	mov	r2, r0
   10b9c:	movw	r1, #31880	; 0x7c88
   10ba0:	mov	r0, #1
   10ba4:	movt	r1, #1
   10ba8:	bl	8f58 <__printf_chk@plt>
   10bac:	movw	r3, #31796	; 0x7c34
   10bb0:	movw	r1, #31776	; 0x7c20
   10bb4:	movt	r3, #1
   10bb8:	movt	r1, #1
   10bbc:	str	r3, [sp]
   10bc0:	movw	r2, #15440	; 0x3c50
   10bc4:	movw	r3, #31788	; 0x7c2c
   10bc8:	movt	r2, #1
   10bcc:	movt	r3, #1
   10bd0:	mov	r0, #1
   10bd4:	bl	8f58 <__printf_chk@plt>
   10bd8:	movw	r0, #31884	; 0x7c8c
   10bdc:	movt	r0, #1
   10be0:	add	sp, sp, #12
   10be4:	pop	{lr}		; (ldr lr, [sp], #4)
   10be8:	b	8e98 <puts@plt>
   10bec:	push	{r4, r5, r6, r7, r8}
   10bf0:	subs	r7, r2, #0
   10bf4:	mov	r4, r0
   10bf8:	mov	r2, r1
   10bfc:	beq	10c6c <warn@@Base+0x7e0>
   10c00:	cmp	r7, #1
   10c04:	beq	10c7c <warn@@Base+0x7f0>
   10c08:	cmp	r1, #0
   10c0c:	sub	ip, r1, #1
   10c10:	add	r0, r0, ip
   10c14:	add	r3, r3, ip
   10c18:	ble	10c64 <warn@@Base+0x7d8>
   10c1c:	movw	r1, #26215	; 0x6667
   10c20:	rsb	r8, r2, r0
   10c24:	movt	r1, #26214	; 0x6666
   10c28:	mov	r5, r3
   10c2c:	mov	r4, #0
   10c30:	ldrb	ip, [r0], #-1
   10c34:	cmp	r0, r8
   10c38:	mla	ip, r7, ip, r4
   10c3c:	smull	r4, r6, r1, ip
   10c40:	asr	r4, ip, #31
   10c44:	rsb	r4, r4, r6, asr #2
   10c48:	add	r6, r4, r4, lsl #2
   10c4c:	sub	ip, ip, r6, lsl #1
   10c50:	strb	ip, [r5], #-1
   10c54:	bne	10c30 <warn@@Base+0x7a4>
   10c58:	rsb	r2, r2, r3
   10c5c:	cmp	r4, #0
   10c60:	strbne	r4, [r2]
   10c64:	pop	{r4, r5, r6, r7, r8}
   10c68:	bx	lr
   10c6c:	mov	r1, r7
   10c70:	mov	r0, r3
   10c74:	pop	{r4, r5, r6, r7, r8}
   10c78:	b	8f34 <memset@plt>
   10c7c:	mov	r1, r4
   10c80:	mov	r0, r3
   10c84:	pop	{r4, r5, r6, r7, r8}
   10c88:	b	8e20 <memcpy@plt>
   10c8c:	push	{r3, r4, r5, r6, r7, lr}
   10c90:	ldrb	ip, [r2]
   10c94:	ldr	r7, [r0, #4]
   10c98:	cmp	ip, #0
   10c9c:	ldr	r5, [r0, #8]
   10ca0:	subeq	ip, r1, #1
   10ca4:	ldr	r4, [sp, #24]
   10ca8:	movne	ip, r1
   10cac:	add	r5, r7, r5
   10cb0:	add	r6, r3, ip
   10cb4:	cmp	r5, r6
   10cb8:	blt	10dd4 <warn@@Base+0x948>
   10cbc:	sub	r5, r5, #1
   10cc0:	ldr	r0, [r0, #24]
   10cc4:	cmp	r4, #0
   10cc8:	rsb	r3, r3, r5
   10ccc:	sub	r1, r1, #1
   10cd0:	add	r3, r0, r3
   10cd4:	add	r2, r2, r1
   10cd8:	rsbeq	ip, ip, r3
   10cdc:	beq	10d64 <warn@@Base+0x8d8>
   10ce0:	mov	r4, #0
   10ce4:	rsb	ip, ip, r3
   10ce8:	b	10d1c <warn@@Base+0x890>
   10cec:	ldrb	r0, [r3], #-1
   10cf0:	ldrb	r1, [r2], #-1
   10cf4:	rsb	r0, r4, r0
   10cf8:	rsb	r0, r1, r0
   10cfc:	uxtb	r0, r0
   10d00:	uxtb	r1, r0
   10d04:	tst	r1, #128	; 0x80
   10d08:	strbeq	r1, [r3, #1]
   10d0c:	addne	r0, r0, #10
   10d10:	strbne	r0, [r3, #1]
   10d14:	movne	r4, #1
   10d18:	moveq	r4, #0
   10d1c:	cmp	r3, ip
   10d20:	bne	10cec <warn@@Base+0x860>
   10d24:	cmp	r4, #0
   10d28:	popeq	{r3, r4, r5, r6, r7, pc}
   10d2c:	b	10db0 <warn@@Base+0x924>
   10d30:	ldrb	r0, [r2], #-1
   10d34:	ldrb	r1, [r3], #-1
   10d38:	add	r0, r4, r0
   10d3c:	add	r0, r0, r1
   10d40:	uxtb	r0, r0
   10d44:	uxtb	r1, r0
   10d48:	sxtb	r4, r1
   10d4c:	cmp	r4, #9
   10d50:	strble	r1, [r3, #1]
   10d54:	subgt	r0, r0, #10
   10d58:	strbgt	r0, [r3, #1]
   10d5c:	movgt	r4, #1
   10d60:	movle	r4, #0
   10d64:	cmp	r3, ip
   10d68:	bne	10d30 <warn@@Base+0x8a4>
   10d6c:	cmp	r4, #0
   10d70:	popeq	{r3, r4, r5, r6, r7, pc}
   10d74:	b	10d80 <warn@@Base+0x8f4>
   10d78:	sub	r2, r2, #9
   10d7c:	strb	r2, [r3, #1]
   10d80:	mov	r1, r3
   10d84:	sub	r3, r3, #1
   10d88:	ldrb	r2, [r1]
   10d8c:	add	r0, r2, #1
   10d90:	uxtb	r0, r0
   10d94:	sxtb	ip, r0
   10d98:	cmp	ip, #9
   10d9c:	bgt	10d78 <warn@@Base+0x8ec>
   10da0:	strb	r0, [r1]
   10da4:	pop	{r3, r4, r5, r6, r7, pc}
   10da8:	add	r2, r2, #9
   10dac:	strb	r2, [r3, #1]
   10db0:	mov	r1, r3
   10db4:	sub	r3, r3, #1
   10db8:	ldrb	r2, [r1]
   10dbc:	sub	r0, r2, #1
   10dc0:	uxtb	r0, r0
   10dc4:	tst	r0, #128	; 0x80
   10dc8:	bne	10da8 <warn@@Base+0x91c>
   10dcc:	strb	r0, [r1]
   10dd0:	pop	{r3, r4, r5, r6, r7, pc}
   10dd4:	movw	r0, #32668	; 0x7f9c
   10dd8:	movw	r1, #32712	; 0x7fc8
   10ddc:	movw	r3, #32628	; 0x7f74
   10de0:	movt	r0, #1
   10de4:	movt	r1, #1
   10de8:	movw	r2, #706	; 0x2c2
   10dec:	movt	r3, #1
   10df0:	bl	8fd0 <__assert_fail@plt>
   10df4:	movw	r3, #4816	; 0x12d0
   10df8:	movt	r3, #2
   10dfc:	push	{r4, r5, lr}
   10e00:	mov	r5, r0
   10e04:	ldr	r4, [r3]
   10e08:	sub	sp, sp, #12
   10e0c:	cmp	r4, #0
   10e10:	beq	10e48 <warn@@Base+0x9bc>
   10e14:	ldr	r2, [r4, #16]
   10e18:	str	r2, [r3]
   10e1c:	mov	r3, #0
   10e20:	mov	r2, #1
   10e24:	mov	r0, r4
   10e28:	str	r5, [r4, #4]
   10e2c:	str	r1, [r4, #24]
   10e30:	str	r3, [r4]
   10e34:	str	r3, [r4, #8]
   10e38:	str	r3, [r4, #20]
   10e3c:	str	r2, [r4, #12]
   10e40:	add	sp, sp, #12
   10e44:	pop	{r4, r5, pc}
   10e48:	mov	r0, #28
   10e4c:	str	r1, [sp, #4]
   10e50:	bl	8ea4 <malloc@plt>
   10e54:	ldr	r1, [sp, #4]
   10e58:	subs	r4, r0, #0
   10e5c:	bne	10e1c <warn@@Base+0x990>
   10e60:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   10e64:	ldr	r1, [sp, #4]
   10e68:	b	10e1c <warn@@Base+0x990>
   10e6c:	ldr	r3, [r0, #4]
   10e70:	ldr	ip, [r1, #4]
   10e74:	push	{r4, r5, r6, r7, r8, r9}
   10e78:	cmp	r3, ip
   10e7c:	beq	10ed8 <warn@@Base+0xa4c>
   10e80:	bgt	10eb8 <warn@@Base+0xa2c>
   10e84:	cmp	r2, #0
   10e88:	beq	10fcc <warn@@Base+0xb40>
   10e8c:	ldr	r3, [r0]
   10e90:	cmp	r3, #0
   10e94:	movne	r0, #1
   10e98:	mvneq	r0, #0
   10e9c:	pop	{r4, r5, r6, r7, r8, r9}
   10ea0:	bx	lr
   10ea4:	beq	10f38 <warn@@Base+0xaac>
   10ea8:	ldrb	r4, [r7]
   10eac:	ldrb	r5, [r6]
   10eb0:	cmp	r5, r4
   10eb4:	bcs	10e84 <warn@@Base+0x9f8>
   10eb8:	cmp	r2, #0
   10ebc:	beq	10f84 <warn@@Base+0xaf8>
   10ec0:	ldr	r3, [r0]
   10ec4:	pop	{r4, r5, r6, r7, r8, r9}
   10ec8:	cmp	r3, #0
   10ecc:	mvnne	r0, #0
   10ed0:	moveq	r0, #1
   10ed4:	bx	lr
   10ed8:	ldr	r8, [r0, #8]
   10edc:	ldr	r9, [r1, #8]
   10ee0:	ldr	r6, [r1, #24]
   10ee4:	cmp	r9, r8
   10ee8:	addle	r3, r3, r9
   10eec:	addgt	r3, r3, r8
   10ef0:	ldr	r7, [r0, #24]
   10ef4:	cmp	r3, #0
   10ef8:	ble	10ea4 <warn@@Base+0xa18>
   10efc:	ldrb	r4, [r7]
   10f00:	ldrb	r5, [r6]
   10f04:	cmp	r4, r5
   10f08:	bne	10eb0 <warn@@Base+0xa24>
   10f0c:	add	ip, r7, #1
   10f10:	add	r1, r6, #1
   10f14:	b	10f28 <warn@@Base+0xa9c>
   10f18:	ldrb	r4, [ip], #1
   10f1c:	ldrb	r5, [r1], #1
   10f20:	cmp	r4, r5
   10f24:	bne	10eb0 <warn@@Base+0xa24>
   10f28:	subs	r3, r3, #1
   10f2c:	mov	r7, ip
   10f30:	mov	r6, r1
   10f34:	bne	10f18 <warn@@Base+0xa8c>
   10f38:	cmp	r8, r9
   10f3c:	beq	10f7c <warn@@Base+0xaf0>
   10f40:	ble	10f90 <warn@@Base+0xb04>
   10f44:	rsb	r8, r9, r8
   10f48:	cmp	r8, #0
   10f4c:	ble	10f7c <warn@@Base+0xaf0>
   10f50:	ldrb	r3, [r7]
   10f54:	cmp	r3, #0
   10f58:	subeq	r1, r8, #1
   10f5c:	addeq	r1, r7, r1
   10f60:	beq	10f74 <warn@@Base+0xae8>
   10f64:	b	10eb8 <warn@@Base+0xa2c>
   10f68:	ldrb	r3, [r7, #1]!
   10f6c:	cmp	r3, #0
   10f70:	bne	10eb8 <warn@@Base+0xa2c>
   10f74:	cmp	r7, r1
   10f78:	bne	10f68 <warn@@Base+0xadc>
   10f7c:	mov	r0, #0
   10f80:	b	10e9c <warn@@Base+0xa10>
   10f84:	mov	r0, #1
   10f88:	pop	{r4, r5, r6, r7, r8, r9}
   10f8c:	bx	lr
   10f90:	rsb	r8, r8, r9
   10f94:	cmp	r8, #0
   10f98:	ble	10f7c <warn@@Base+0xaf0>
   10f9c:	ldrb	r3, [r6]
   10fa0:	cmp	r3, #0
   10fa4:	subeq	r1, r8, #1
   10fa8:	addeq	r1, r6, r1
   10fac:	beq	10fc0 <warn@@Base+0xb34>
   10fb0:	b	10e84 <warn@@Base+0x9f8>
   10fb4:	ldrb	r3, [r6, #1]!
   10fb8:	cmp	r3, #0
   10fbc:	bne	10e84 <warn@@Base+0x9f8>
   10fc0:	cmp	r6, r1
   10fc4:	bne	10fb4 <warn@@Base+0xb28>
   10fc8:	b	10f7c <warn@@Base+0xaf0>
   10fcc:	mvn	r0, #0
   10fd0:	b	10e9c <warn@@Base+0xa10>
   10fd4:	movw	r3, #4816	; 0x12d0
   10fd8:	movt	r3, #2
   10fdc:	push	{r4, r5, r6, lr}
   10fe0:	mov	r5, r0
   10fe4:	ldr	r4, [r3]
   10fe8:	sub	sp, sp, #8
   10fec:	cmp	r4, #0
   10ff0:	beq	11054 <warn@@Base+0xbc8>
   10ff4:	ldr	r2, [r4, #16]
   10ff8:	str	r2, [r3]
   10ffc:	add	r6, r5, r1
   11000:	mov	r3, #0
   11004:	str	r5, [r4, #4]
   11008:	str	r3, [r4]
   1100c:	mov	r0, r6
   11010:	mov	r3, #1
   11014:	str	r1, [r4, #8]
   11018:	str	r3, [r4, #12]
   1101c:	bl	8ea4 <malloc@plt>
   11020:	cmp	r0, #0
   11024:	str	r0, [r4, #20]
   11028:	beq	11048 <warn@@Base+0xbbc>
   1102c:	str	r0, [r4, #24]
   11030:	mov	r2, r6
   11034:	mov	r1, #0
   11038:	bl	8f34 <memset@plt>
   1103c:	mov	r0, r4
   11040:	add	sp, sp, #8
   11044:	pop	{r4, r5, r6, pc}
   11048:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   1104c:	ldr	r0, [r4, #20]
   11050:	b	1102c <warn@@Base+0xba0>
   11054:	mov	r0, #28
   11058:	str	r1, [sp, #4]
   1105c:	bl	8ea4 <malloc@plt>
   11060:	ldr	r1, [sp, #4]
   11064:	subs	r4, r0, #0
   11068:	bne	10ffc <warn@@Base+0xb70>
   1106c:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   11070:	ldr	r1, [sp, #4]
   11074:	b	10ffc <warn@@Base+0xb70>
   11078:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1107c:	mov	r5, r2
   11080:	ldr	r3, [r0, #4]
   11084:	mov	r9, r0
   11088:	ldr	r6, [r1, #4]
   1108c:	mov	r8, r1
   11090:	ldr	r4, [r0, #8]
   11094:	cmp	r6, r3
   11098:	movlt	r6, r3
   1109c:	ldr	r2, [r1, #8]
   110a0:	add	r6, r6, #1
   110a4:	cmp	r4, r2
   110a8:	movlt	r4, r2
   110ac:	cmp	r5, r4
   110b0:	movge	r1, r5
   110b4:	movlt	r1, r4
   110b8:	mov	r0, r6
   110bc:	bl	10fd4 <warn@@Base+0xb48>
   110c0:	cmp	r4, r5
   110c4:	blt	1124c <warn@@Base+0xdc0>
   110c8:	ldr	r2, [r0, #24]
   110cc:	add	r4, r6, r4
   110d0:	ldr	ip, [r9, #8]
   110d4:	sub	r4, r4, #1
   110d8:	ldmib	r8, {r1, sl}
   110dc:	add	r7, r2, r4
   110e0:	ldr	r5, [r9, #4]
   110e4:	ldr	r6, [r9, #24]
   110e8:	add	r1, r1, sl
   110ec:	add	r5, r5, ip
   110f0:	ldr	r4, [r8, #24]
   110f4:	cmp	ip, sl
   110f8:	sub	r2, r5, #1
   110fc:	sub	r3, r1, #1
   11100:	add	r6, r6, r2
   11104:	add	r4, r4, r3
   11108:	beq	11140 <warn@@Base+0xcb4>
   1110c:	ble	11280 <warn@@Base+0xdf4>
   11110:	rsb	ip, ip, sl
   11114:	mov	r3, r7
   11118:	add	r1, r6, ip
   1111c:	ldrb	r2, [r6], #-1
   11120:	cmp	r6, r1
   11124:	strb	r2, [r3], #-1
   11128:	bne	1111c <warn@@Base+0xc90>
   1112c:	ldr	r5, [r9, #4]
   11130:	add	r7, r7, ip
   11134:	ldr	r1, [r8, #4]
   11138:	add	r5, r5, sl
   1113c:	add	r1, r1, sl
   11140:	cmp	r1, #0
   11144:	cmpgt	r5, #0
   11148:	movle	r3, #0
   1114c:	movgt	r3, #1
   11150:	ble	111a4 <warn@@Base+0xd18>
   11154:	sub	r2, r7, #1
   11158:	mov	r3, #0
   1115c:	ldrb	r7, [r6], #-1
   11160:	sub	r5, r5, #1
   11164:	ldrb	ip, [r4], #-1
   11168:	sub	r1, r1, #1
   1116c:	add	ip, r7, ip
   11170:	add	ip, ip, r3
   11174:	mov	r3, #0
   11178:	uxtb	ip, ip
   1117c:	cmp	ip, #9
   11180:	sub	r7, ip, #10
   11184:	strbls	ip, [r2, #1]
   11188:	strbhi	r7, [r2, #1]
   1118c:	movhi	r3, #1
   11190:	cmp	r1, #0
   11194:	cmpgt	r5, #0
   11198:	mov	r7, r2
   1119c:	sub	r2, r2, #1
   111a0:	bgt	1115c <warn@@Base+0xcd0>
   111a4:	cmp	r5, #0
   111a8:	movne	r1, r5
   111ac:	movne	r4, r6
   111b0:	cmp	r1, #0
   111b4:	ble	111f4 <warn@@Base+0xd68>
   111b8:	sub	ip, r7, #1
   111bc:	rsb	r6, r1, r4
   111c0:	ldrb	r2, [r4], #-1
   111c4:	sub	ip, ip, #1
   111c8:	add	r2, r2, r3
   111cc:	mov	r3, #0
   111d0:	uxtb	r2, r2
   111d4:	cmp	r2, #9
   111d8:	sub	r5, r2, #10
   111dc:	strbls	r2, [ip, #2]
   111e0:	strbhi	r5, [ip, #2]
   111e4:	movhi	r3, #1
   111e8:	cmp	r4, r6
   111ec:	bne	111c0 <warn@@Base+0xd34>
   111f0:	rsb	r7, r1, r7
   111f4:	cmp	r3, #1
   111f8:	ldrbeq	r3, [r7]
   111fc:	addeq	r3, r3, #1
   11200:	strbeq	r3, [r7]
   11204:	ldr	r3, [r0, #24]
   11208:	ldrb	r2, [r3]
   1120c:	cmp	r2, #0
   11210:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   11214:	ldr	r2, [r0, #4]
   11218:	cmp	r2, #1
   1121c:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   11220:	sub	r2, r2, #1
   11224:	add	r3, r3, #1
   11228:	str	r3, [r0, #24]
   1122c:	add	r3, r3, #1
   11230:	str	r2, [r0, #4]
   11234:	ldrb	r1, [r3, #-1]
   11238:	cmp	r1, #0
   1123c:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   11240:	subs	r2, r2, #1
   11244:	bne	11228 <warn@@Base+0xd9c>
   11248:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1124c:	rsb	r1, r4, r5
   11250:	ldr	r2, [r0, #24]
   11254:	cmp	r1, #0
   11258:	add	r4, r6, r4
   1125c:	add	r3, r2, r4
   11260:	ble	110d0 <warn@@Base+0xc44>
   11264:	add	r1, r3, r1
   11268:	mov	r2, #0
   1126c:	strb	r2, [r3], #1
   11270:	cmp	r3, r1
   11274:	bne	1126c <warn@@Base+0xde0>
   11278:	ldr	r2, [r0, #24]
   1127c:	b	110d0 <warn@@Base+0xc44>
   11280:	rsblt	sl, sl, ip
   11284:	movlt	r3, r7
   11288:	addlt	r1, r4, sl
   1128c:	bge	11140 <warn@@Base+0xcb4>
   11290:	ldrb	r2, [r4], #-1
   11294:	cmp	r4, r1
   11298:	strb	r2, [r3], #-1
   1129c:	bne	11290 <warn@@Base+0xe04>
   112a0:	ldr	r5, [r9, #4]
   112a4:	add	r7, r7, sl
   112a8:	ldr	r1, [r8, #4]
   112ac:	add	r5, r5, ip
   112b0:	add	r1, r1, ip
   112b4:	b	11140 <warn@@Base+0xcb4>
   112b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112bc:	mov	r4, r2
   112c0:	ldr	r3, [r1, #4]
   112c4:	mov	r8, r0
   112c8:	ldr	r6, [r0, #4]
   112cc:	mov	sl, r1
   112d0:	ldr	r2, [r1, #8]
   112d4:	ldr	r9, [r0, #8]
   112d8:	cmp	r6, r3
   112dc:	movge	r5, r6
   112e0:	movlt	r5, r3
   112e4:	cmp	r6, r3
   112e8:	movge	r6, r3
   112ec:	cmp	r9, r2
   112f0:	movge	r7, r9
   112f4:	movlt	r7, r2
   112f8:	mov	r0, r5
   112fc:	cmp	r4, r7
   11300:	movge	r1, r4
   11304:	movlt	r1, r7
   11308:	cmp	r9, r2
   1130c:	movge	r9, r2
   11310:	bl	10fd4 <warn@@Base+0xb48>
   11314:	cmp	r7, r4
   11318:	blt	1146c <warn@@Base+0xfe0>
   1131c:	ldr	r2, [r0, #24]
   11320:	add	r7, r7, r5
   11324:	sub	r4, r7, #1
   11328:	ldr	r3, [r8, #8]
   1132c:	ldr	r7, [r8, #4]
   11330:	add	r4, r2, r4
   11334:	ldr	fp, [sl, #8]
   11338:	cmp	r9, r3
   1133c:	ldr	r2, [sl, #4]
   11340:	add	r7, r3, r7
   11344:	ldr	r1, [r8, #24]
   11348:	sub	r7, r7, #1
   1134c:	add	r8, fp, r2
   11350:	ldr	r2, [sl, #24]
   11354:	sub	r8, r8, #1
   11358:	add	r7, r1, r7
   1135c:	add	r8, r2, r8
   11360:	beq	114a0 <warn@@Base+0x1014>
   11364:	rsb	sl, r9, r3
   11368:	cmp	sl, #0
   1136c:	ble	114f8 <warn@@Base+0x106c>
   11370:	rsb	r1, sl, #0
   11374:	mov	r2, sl
   11378:	add	ip, r7, r1
   1137c:	add	r1, r4, r1
   11380:	ldrb	r3, [ip, r2]
   11384:	strb	r3, [r1, r2]
   11388:	subs	r2, r2, #1
   1138c:	bne	11380 <warn@@Base+0xef4>
   11390:	rsb	r4, sl, r4
   11394:	rsb	r7, sl, r7
   11398:	add	r9, r6, r9
   1139c:	cmp	r9, #0
   113a0:	rsbgt	r9, r9, #0
   113a4:	movgt	r3, #0
   113a8:	ble	113e0 <warn@@Base+0xf54>
   113ac:	ldrb	ip, [r7, r3]
   113b0:	ldrb	r1, [r8, r3]
   113b4:	rsb	r1, r1, ip
   113b8:	subs	r1, r1, r2
   113bc:	mov	r2, #0
   113c0:	addmi	r1, r1, #10
   113c4:	strb	r1, [r4, r3]
   113c8:	sub	r3, r3, #1
   113cc:	movmi	r2, #1
   113d0:	cmp	r3, r9
   113d4:	bne	113ac <warn@@Base+0xf20>
   113d8:	add	r7, r7, r3
   113dc:	add	r4, r4, r3
   113e0:	cmp	r5, r6
   113e4:	beq	11424 <warn@@Base+0xf98>
   113e8:	rsb	r3, r6, r5
   113ec:	cmp	r3, #0
   113f0:	ble	11424 <warn@@Base+0xf98>
   113f4:	rsb	r1, r3, #0
   113f8:	add	r7, r7, r1
   113fc:	add	r4, r4, r1
   11400:	ldrb	r1, [r7, r3]
   11404:	rsb	r1, r2, r1
   11408:	mov	r2, #0
   1140c:	cmn	r1, #1
   11410:	moveq	r1, #9
   11414:	moveq	r2, #1
   11418:	strb	r1, [r4, r3]
   1141c:	subs	r3, r3, #1
   11420:	bne	11400 <warn@@Base+0xf74>
   11424:	ldr	r3, [r0, #24]
   11428:	ldrb	r2, [r3]
   1142c:	cmp	r2, #0
   11430:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11434:	ldr	r2, [r0, #4]
   11438:	cmp	r2, #1
   1143c:	subgt	r2, r2, #1
   11440:	addgt	r3, r3, #1
   11444:	ble	11500 <warn@@Base+0x1074>
   11448:	str	r3, [r0, #24]
   1144c:	add	r3, r3, #1
   11450:	str	r2, [r0, #4]
   11454:	ldrb	r1, [r3, #-1]
   11458:	cmp	r1, #0
   1145c:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11460:	subs	r2, r2, #1
   11464:	bne	11448 <warn@@Base+0xfbc>
   11468:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1146c:	rsb	r1, r7, r4
   11470:	ldr	r2, [r0, #24]
   11474:	cmp	r1, #0
   11478:	add	r7, r7, r5
   1147c:	add	r3, r2, r7
   11480:	ble	11324 <warn@@Base+0xe98>
   11484:	add	r1, r3, r1
   11488:	mov	r2, #0
   1148c:	strb	r2, [r3], #1
   11490:	cmp	r3, r1
   11494:	bne	1148c <warn@@Base+0x1000>
   11498:	ldr	r2, [r0, #24]
   1149c:	b	11324 <warn@@Base+0xe98>
   114a0:	rsb	fp, r9, fp
   114a4:	cmp	fp, #0
   114a8:	ble	114f8 <warn@@Base+0x106c>
   114ac:	rsb	ip, fp, #0
   114b0:	mov	r3, fp
   114b4:	add	sl, r8, ip
   114b8:	add	ip, r4, ip
   114bc:	mov	r2, #0
   114c0:	ldrb	r1, [sl, r3]
   114c4:	rsb	r1, r1, #0
   114c8:	subs	r1, r1, r2
   114cc:	mov	r2, r1
   114d0:	addne	r1, r1, #10
   114d4:	moveq	r1, r2
   114d8:	movne	r2, #1
   114dc:	uxtbne	r1, r1
   114e0:	strb	r1, [ip, r3]
   114e4:	subs	r3, r3, #1
   114e8:	bne	114c0 <warn@@Base+0x1034>
   114ec:	rsb	r8, fp, r8
   114f0:	rsb	r4, fp, r4
   114f4:	b	11398 <warn@@Base+0xf0c>
   114f8:	mov	r2, #0
   114fc:	b	11398 <warn@@Base+0xf0c>
   11500:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11504:	ldr	r3, [r0]
   11508:	push	{r4, lr}
   1150c:	cmp	r3, #0
   11510:	mov	r4, r0
   11514:	popeq	{r4, pc}
   11518:	ldr	r2, [r3, #12]
   1151c:	sub	r2, r2, #1
   11520:	str	r2, [r3, #12]
   11524:	cmp	r2, #0
   11528:	bne	11558 <warn@@Base+0x10cc>
   1152c:	ldr	r0, [r3, #20]
   11530:	cmp	r0, #0
   11534:	beq	11540 <warn@@Base+0x10b4>
   11538:	bl	8e08 <free@plt>
   1153c:	ldr	r3, [r4]
   11540:	movw	r2, #4816	; 0x12d0
   11544:	movt	r2, #2
   11548:	ldr	r1, [r2]
   1154c:	str	r1, [r3, #16]
   11550:	ldr	r3, [r4]
   11554:	str	r3, [r2]
   11558:	mov	r3, #0
   1155c:	str	r3, [r4]
   11560:	pop	{r4, pc}
   11564:	push	{r3, lr}
   11568:	mov	r1, #0
   1156c:	mov	r0, #1
   11570:	bl	10fd4 <warn@@Base+0xb48>
   11574:	movw	r3, #5008	; 0x1390
   11578:	movt	r3, #2
   1157c:	mov	r1, #0
   11580:	str	r0, [r3]
   11584:	mov	r0, #1
   11588:	bl	10fd4 <warn@@Base+0xb48>
   1158c:	movw	r3, #5000	; 0x1388
   11590:	movt	r3, #2
   11594:	mov	r2, #1
   11598:	mov	r1, #0
   1159c:	ldr	lr, [r0, #24]
   115a0:	mov	ip, r0
   115a4:	mov	r0, r2
   115a8:	str	ip, [r3]
   115ac:	strb	r2, [lr]
   115b0:	bl	10fd4 <warn@@Base+0xb48>
   115b4:	movw	r3, #5004	; 0x138c
   115b8:	movt	r3, #2
   115bc:	mov	r1, #2
   115c0:	ldr	r2, [r0, #24]
   115c4:	str	r0, [r3]
   115c8:	strb	r1, [r2]
   115cc:	pop	{r3, pc}
   115d0:	ldr	r2, [r0, #12]
   115d4:	add	r2, r2, #1
   115d8:	str	r2, [r0, #12]
   115dc:	bx	lr
   115e0:	movw	r3, #5008	; 0x1390
   115e4:	movt	r3, #2
   115e8:	ldr	r3, [r3]
   115ec:	ldr	r2, [r3, #12]
   115f0:	add	r2, r2, #1
   115f4:	str	r2, [r3, #12]
   115f8:	str	r3, [r0]
   115fc:	bx	lr
   11600:	ldr	r3, [r0]
   11604:	ldr	r2, [r1]
   11608:	cmp	r3, r2
   1160c:	beq	11620 <warn@@Base+0x1194>
   11610:	cmp	r3, #0
   11614:	mvnne	r0, #0
   11618:	moveq	r0, #1
   1161c:	bx	lr
   11620:	mov	r2, #1
   11624:	b	10e6c <warn@@Base+0x9e0>
   11628:	ldr	r0, [r0]
   1162c:	subs	r3, r0, #1
   11630:	rsbs	r0, r3, #0
   11634:	adcs	r0, r0, r3
   11638:	bx	lr
   1163c:	movw	r3, #5008	; 0x1390
   11640:	movt	r3, #2
   11644:	ldr	r3, [r3]
   11648:	cmp	r0, r3
   1164c:	beq	11698 <warn@@Base+0x120c>
   11650:	ldmib	r0, {r1, r3}
   11654:	ldr	r2, [r0, #24]
   11658:	add	r3, r1, r3
   1165c:	cmp	r3, #0
   11660:	ble	11688 <warn@@Base+0x11fc>
   11664:	ldrb	r0, [r2]
   11668:	cmp	r0, #0
   1166c:	beq	11680 <warn@@Base+0x11f4>
   11670:	b	116a0 <warn@@Base+0x1214>
   11674:	ldrb	r1, [r2, #1]!
   11678:	cmp	r1, #0
   1167c:	bne	11694 <warn@@Base+0x1208>
   11680:	subs	r3, r3, #1
   11684:	bne	11674 <warn@@Base+0x11e8>
   11688:	rsbs	r0, r3, #1
   1168c:	movcc	r0, #0
   11690:	bx	lr
   11694:	bx	lr
   11698:	mov	r0, #1
   1169c:	bx	lr
   116a0:	mov	r0, #0
   116a4:	bx	lr
   116a8:	ldmib	r0, {r2, ip}
   116ac:	ldr	r3, [r0, #24]
   116b0:	cmp	r1, ip
   116b4:	addle	r1, r2, r1
   116b8:	addgt	r1, r2, ip
   116bc:	cmp	r1, #0
   116c0:	ble	11718 <warn@@Base+0x128c>
   116c4:	ldrb	r2, [r3]
   116c8:	add	r3, r3, #1
   116cc:	cmp	r2, #0
   116d0:	beq	116e4 <warn@@Base+0x1258>
   116d4:	b	116f4 <warn@@Base+0x1268>
   116d8:	ldrb	r2, [r3], #1
   116dc:	cmp	r2, #0
   116e0:	bne	116f4 <warn@@Base+0x1268>
   116e4:	subs	r1, r1, #1
   116e8:	bne	116d8 <warn@@Base+0x124c>
   116ec:	mov	r0, #1
   116f0:	bx	lr
   116f4:	cmp	r1, #1
   116f8:	beq	11704 <warn@@Base+0x1278>
   116fc:	mov	r0, #0
   11700:	bx	lr
   11704:	ldrb	r0, [r3, #-1]
   11708:	subs	r3, r0, #1
   1170c:	rsbs	r0, r3, #0
   11710:	adcs	r0, r0, r3
   11714:	bx	lr
   11718:	movne	r0, #0
   1171c:	moveq	r0, #1
   11720:	bx	lr
   11724:	push	{r4, r5, r6, r7, r8, lr}
   11728:	mov	r5, r0
   1172c:	ldr	ip, [r0]
   11730:	mov	r7, r1
   11734:	ldr	lr, [r1]
   11738:	mov	r4, r2
   1173c:	mov	r6, r3
   11740:	cmp	ip, lr
   11744:	bne	1177c <warn@@Base+0x12f0>
   11748:	mov	r2, #0
   1174c:	bl	10e6c <warn@@Base+0x9e0>
   11750:	subs	r8, r0, #0
   11754:	beq	11794 <warn@@Base+0x1308>
   11758:	cmp	r8, #1
   1175c:	beq	117f8 <warn@@Base+0x136c>
   11760:	cmn	r8, #1
   11764:	movne	r6, #0
   11768:	beq	117d0 <warn@@Base+0x1344>
   1176c:	mov	r0, r4
   11770:	bl	11504 <warn@@Base+0x1078>
   11774:	str	r6, [r4]
   11778:	pop	{r4, r5, r6, r7, r8, pc}
   1177c:	mov	r2, r3
   11780:	bl	11078 <warn@@Base+0xbec>
   11784:	ldr	r3, [r5]
   11788:	mov	r6, r0
   1178c:	str	r3, [r0]
   11790:	b	1176c <warn@@Base+0x12e0>
   11794:	ldr	r3, [r7, #8]
   11798:	mov	r0, #1
   1179c:	ldr	r5, [r5, #8]
   117a0:	cmp	r5, r3
   117a4:	movlt	r5, r3
   117a8:	cmp	r5, r6
   117ac:	movlt	r5, r6
   117b0:	mov	r1, r5
   117b4:	bl	10fd4 <warn@@Base+0xb48>
   117b8:	add	r2, r5, #1
   117bc:	mov	r1, r8
   117c0:	mov	r6, r0
   117c4:	ldr	r0, [r0, #24]
   117c8:	bl	8f34 <memset@plt>
   117cc:	b	1176c <warn@@Base+0x12e0>
   117d0:	mov	r2, r6
   117d4:	mov	r1, r5
   117d8:	mov	r0, r7
   117dc:	bl	112b8 <warn@@Base+0xe2c>
   117e0:	ldr	r3, [r7]
   117e4:	rsbs	r3, r3, #1
   117e8:	movcc	r3, #0
   117ec:	mov	r6, r0
   117f0:	str	r3, [r0]
   117f4:	b	1176c <warn@@Base+0x12e0>
   117f8:	mov	r2, r6
   117fc:	mov	r1, r7
   11800:	mov	r0, r5
   11804:	bl	112b8 <warn@@Base+0xe2c>
   11808:	ldr	r3, [r5]
   1180c:	mov	r6, r0
   11810:	str	r3, [r0]
   11814:	b	1176c <warn@@Base+0x12e0>
   11818:	movw	ip, #4640	; 0x1220
   1181c:	movt	ip, #2
   11820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11824:	movw	lr, #4648	; 0x1228
   11828:	movt	lr, #2
   1182c:	ldr	ip, [ip]
   11830:	mov	r8, r3
   11834:	add	r4, r1, r8
   11838:	ldr	r3, [lr]
   1183c:	sub	sp, sp, #76	; 0x4c
   11840:	cmp	r4, ip
   11844:	mov	sl, r1
   11848:	str	lr, [sp, #28]
   1184c:	mov	r9, r0
   11850:	mov	fp, r2
   11854:	str	r3, [sp, #68]	; 0x44
   11858:	ldr	r5, [sp, #112]	; 0x70
   1185c:	blt	11c30 <warn@@Base+0x17a4>
   11860:	add	r3, ip, #3
   11864:	cmp	ip, #0
   11868:	movlt	ip, r3
   1186c:	asr	r3, ip, #2
   11870:	cmp	r1, r3
   11874:	blt	11c30 <warn@@Base+0x17a4>
   11878:	cmp	r8, r3
   1187c:	blt	11c30 <warn@@Base+0x17a4>
   11880:	cmp	r1, r8
   11884:	movge	r6, r1
   11888:	movlt	r6, r8
   1188c:	add	r6, r6, #1
   11890:	add	r6, r6, r6, lsr #31
   11894:	asr	r6, r6, #1
   11898:	cmp	r1, r6
   1189c:	blt	11d3c <warn@@Base+0x18b0>
   118a0:	rsb	sl, r6, r1
   118a4:	ldr	r1, [r0, #24]
   118a8:	movw	r7, #5008	; 0x1390
   118ac:	movt	r7, #2
   118b0:	mov	r0, sl
   118b4:	bl	10df4 <warn@@Base+0x968>
   118b8:	ldr	r1, [r9, #24]
   118bc:	add	r1, r1, sl
   118c0:	str	r0, [sp, #36]	; 0x24
   118c4:	mov	r0, r6
   118c8:	bl	10df4 <warn@@Base+0x968>
   118cc:	cmp	r8, r6
   118d0:	str	r0, [sp, #32]
   118d4:	bge	11d70 <warn@@Base+0x18e4>
   118d8:	ldr	r3, [r7]
   118dc:	mov	r0, r8
   118e0:	ldr	r1, [fp, #24]
   118e4:	ldr	r2, [r3, #12]
   118e8:	str	r3, [sp, #44]	; 0x2c
   118ec:	add	r2, r2, #1
   118f0:	str	r2, [r3, #12]
   118f4:	bl	10df4 <warn@@Base+0x968>
   118f8:	mov	r1, r0
   118fc:	str	r0, [sp, #40]	; 0x28
   11900:	ldr	r8, [sp, #36]	; 0x24
   11904:	ldr	r3, [r8, #24]
   11908:	ldrb	r2, [r3]
   1190c:	cmp	r2, #0
   11910:	bne	1194c <warn@@Base+0x14c0>
   11914:	ldr	r2, [r8, #4]
   11918:	cmp	r2, #1
   1191c:	ble	1194c <warn@@Base+0x14c0>
   11920:	sub	r2, r2, #1
   11924:	add	r3, r3, #1
   11928:	b	11934 <warn@@Base+0x14a8>
   1192c:	subs	r2, r2, #1
   11930:	beq	1194c <warn@@Base+0x14c0>
   11934:	str	r3, [r8, #24]
   11938:	add	r3, r3, #1
   1193c:	str	r2, [r8, #4]
   11940:	ldrb	r0, [r3, #-1]
   11944:	cmp	r0, #0
   11948:	beq	1192c <warn@@Base+0x14a0>
   1194c:	ldr	sl, [sp, #32]
   11950:	ldr	r3, [sl, #24]
   11954:	ldrb	r2, [r3]
   11958:	cmp	r2, #0
   1195c:	bne	11998 <warn@@Base+0x150c>
   11960:	ldr	r2, [sl, #4]
   11964:	cmp	r2, #1
   11968:	ble	11998 <warn@@Base+0x150c>
   1196c:	sub	r2, r2, #1
   11970:	add	r3, r3, #1
   11974:	b	11980 <warn@@Base+0x14f4>
   11978:	subs	r2, r2, #1
   1197c:	beq	11998 <warn@@Base+0x150c>
   11980:	str	r3, [sl, #24]
   11984:	add	r3, r3, #1
   11988:	str	r2, [sl, #4]
   1198c:	ldrb	r0, [r3, #-1]
   11990:	cmp	r0, #0
   11994:	beq	11978 <warn@@Base+0x14ec>
   11998:	ldr	r9, [sp, #44]	; 0x2c
   1199c:	ldr	r3, [r9, #24]
   119a0:	ldrb	r2, [r3]
   119a4:	cmp	r2, #0
   119a8:	bne	119e4 <warn@@Base+0x1558>
   119ac:	ldr	r2, [r9, #4]
   119b0:	cmp	r2, #1
   119b4:	ble	119e4 <warn@@Base+0x1558>
   119b8:	sub	r2, r2, #1
   119bc:	add	r3, r3, #1
   119c0:	b	119cc <warn@@Base+0x1540>
   119c4:	subs	r2, r2, #1
   119c8:	beq	119e4 <warn@@Base+0x1558>
   119cc:	str	r3, [r9, #24]
   119d0:	add	r3, r3, #1
   119d4:	str	r2, [r9, #4]
   119d8:	ldrb	r0, [r3, #-1]
   119dc:	cmp	r0, #0
   119e0:	beq	119c4 <warn@@Base+0x1538>
   119e4:	ldr	r3, [r1, #24]
   119e8:	ldrb	r2, [r3]
   119ec:	cmp	r2, #0
   119f0:	bne	11a2c <warn@@Base+0x15a0>
   119f4:	ldr	r2, [r1, #4]
   119f8:	cmp	r2, #1
   119fc:	ble	11a2c <warn@@Base+0x15a0>
   11a00:	sub	r2, r2, #1
   11a04:	add	r3, r3, #1
   11a08:	b	11a14 <warn@@Base+0x1588>
   11a0c:	subs	r2, r2, #1
   11a10:	beq	11a2c <warn@@Base+0x15a0>
   11a14:	str	r3, [r1, #24]
   11a18:	add	r3, r3, #1
   11a1c:	str	r2, [r1, #4]
   11a20:	ldrb	r0, [r3, #-1]
   11a24:	cmp	r0, #0
   11a28:	beq	11a0c <warn@@Base+0x1580>
   11a2c:	mov	r0, r8
   11a30:	bl	1163c <warn@@Base+0x11b0>
   11a34:	cmp	r0, #0
   11a38:	movne	r9, #1
   11a3c:	bne	11a50 <warn@@Base+0x15c4>
   11a40:	mov	r0, r9
   11a44:	bl	1163c <warn@@Base+0x11b0>
   11a48:	adds	r9, r0, #0
   11a4c:	movne	r9, #1
   11a50:	ldr	ip, [r7]
   11a54:	mov	r0, r8
   11a58:	mov	r1, sl
   11a5c:	add	r2, sp, #60	; 0x3c
   11a60:	mov	r3, #0
   11a64:	movw	r8, #5008	; 0x1390
   11a68:	ldr	lr, [ip, #12]
   11a6c:	movt	r8, #2
   11a70:	str	ip, [sp, #60]	; 0x3c
   11a74:	add	lr, lr, #2
   11a78:	str	lr, [ip, #12]
   11a7c:	str	ip, [sp, #64]	; 0x40
   11a80:	bl	11724 <warn@@Base+0x1298>
   11a84:	ldr	ip, [sp, #60]	; 0x3c
   11a88:	mov	r3, #0
   11a8c:	add	r2, sp, #64	; 0x40
   11a90:	ldr	r0, [sp, #40]	; 0x28
   11a94:	ldr	r1, [sp, #44]	; 0x2c
   11a98:	ldr	fp, [ip, #4]
   11a9c:	bl	11724 <warn@@Base+0x1298>
   11aa0:	ldr	r3, [sp, #64]	; 0x40
   11aa4:	cmp	r9, #0
   11aa8:	ldr	r3, [r3, #4]
   11aac:	str	r3, [sp, #16]
   11ab0:	beq	11da0 <warn@@Base+0x1914>
   11ab4:	ldr	r3, [r8]
   11ab8:	add	r8, sp, #72	; 0x48
   11abc:	ldr	r2, [r3, #12]
   11ac0:	str	r3, [r8, #-24]!	; 0xffffffe8
   11ac4:	add	r2, r2, #1
   11ac8:	str	r2, [r3, #12]
   11acc:	ldr	sl, [sp, #60]	; 0x3c
   11ad0:	mov	r0, sl
   11ad4:	bl	1163c <warn@@Base+0x11b0>
   11ad8:	cmp	r0, #0
   11adc:	bne	11afc <warn@@Base+0x1670>
   11ae0:	ldr	r2, [sp, #64]	; 0x40
   11ae4:	mov	r0, r2
   11ae8:	str	r2, [sp, #12]
   11aec:	bl	1163c <warn@@Base+0x11b0>
   11af0:	ldr	r2, [sp, #12]
   11af4:	cmp	r0, #0
   11af8:	beq	11e04 <warn@@Base+0x1978>
   11afc:	ldr	r3, [r7]
   11b00:	add	sl, sp, #72	; 0x48
   11b04:	ldr	r2, [r3, #12]
   11b08:	str	r3, [sl, #-20]!	; 0xffffffec
   11b0c:	add	r2, r2, #1
   11b10:	str	r2, [r3, #12]
   11b14:	ldr	fp, [sp, #32]
   11b18:	mov	r0, fp
   11b1c:	bl	1163c <warn@@Base+0x11b0>
   11b20:	cmp	r0, #0
   11b24:	bne	11b44 <warn@@Base+0x16b8>
   11b28:	ldr	r2, [sp, #40]	; 0x28
   11b2c:	mov	r0, r2
   11b30:	str	r2, [sp, #12]
   11b34:	bl	1163c <warn@@Base+0x11b0>
   11b38:	ldr	r2, [sp, #12]
   11b3c:	cmp	r0, #0
   11b40:	beq	11e20 <warn@@Base+0x1994>
   11b44:	ldr	r3, [r7]
   11b48:	add	r7, sp, #72	; 0x48
   11b4c:	ldr	r2, [r3, #12]
   11b50:	str	r3, [r7, #-16]!
   11b54:	add	r2, r2, #1
   11b58:	str	r2, [r3, #12]
   11b5c:	add	r0, r4, #1
   11b60:	mov	r1, #0
   11b64:	bl	10fd4 <warn@@Base+0xb48>
   11b68:	cmp	r9, #0
   11b6c:	str	r0, [r5]
   11b70:	movne	r0, r0
   11b74:	beq	11dc0 <warn@@Base+0x1934>
   11b78:	ldr	r2, [sp, #56]	; 0x38
   11b7c:	mov	r4, #0
   11b80:	mov	r3, r6
   11b84:	ldr	r1, [r2, #4]
   11b88:	ldr	r2, [r2, #24]
   11b8c:	str	r4, [sp]
   11b90:	bl	10c8c <warn@@Base+0x800>
   11b94:	ldr	r2, [sp, #56]	; 0x38
   11b98:	ldr	r0, [r5]
   11b9c:	mov	r3, r4
   11ba0:	ldr	r1, [r2, #4]
   11ba4:	ldr	r2, [r2, #24]
   11ba8:	str	r4, [sp]
   11bac:	bl	10c8c <warn@@Base+0x800>
   11bb0:	ldr	lr, [sp, #60]	; 0x3c
   11bb4:	ldr	ip, [sp, #64]	; 0x40
   11bb8:	mov	r3, r6
   11bbc:	ldr	r2, [sp, #52]	; 0x34
   11bc0:	ldr	lr, [lr]
   11bc4:	ldr	ip, [ip]
   11bc8:	ldr	r1, [r2, #4]
   11bcc:	subs	ip, lr, ip
   11bd0:	ldr	r2, [r2, #24]
   11bd4:	ldr	r0, [r5]
   11bd8:	movne	ip, #1
   11bdc:	str	ip, [sp]
   11be0:	bl	10c8c <warn@@Base+0x800>
   11be4:	add	r0, sp, #36	; 0x24
   11be8:	bl	11504 <warn@@Base+0x1078>
   11bec:	add	r0, sp, #32
   11bf0:	bl	11504 <warn@@Base+0x1078>
   11bf4:	add	r0, sp, #44	; 0x2c
   11bf8:	bl	11504 <warn@@Base+0x1078>
   11bfc:	mov	r0, r8
   11c00:	bl	11504 <warn@@Base+0x1078>
   11c04:	add	r0, sp, #40	; 0x28
   11c08:	bl	11504 <warn@@Base+0x1078>
   11c0c:	mov	r0, sl
   11c10:	bl	11504 <warn@@Base+0x1078>
   11c14:	mov	r0, r7
   11c18:	bl	11504 <warn@@Base+0x1078>
   11c1c:	add	r0, sp, #60	; 0x3c
   11c20:	bl	11504 <warn@@Base+0x1078>
   11c24:	add	r0, sp, #64	; 0x40
   11c28:	bl	11504 <warn@@Base+0x1078>
   11c2c:	b	11d20 <warn@@Base+0x1894>
   11c30:	mov	r1, #0
   11c34:	add	r0, r4, #1
   11c38:	bl	10fd4 <warn@@Base+0xb48>
   11c3c:	cmp	r4, #0
   11c40:	sub	r1, r8, #1
   11c44:	sub	sl, sl, #1
   11c48:	str	r1, [sp, #24]
   11c4c:	str	r0, [r5]
   11c50:	ldr	r5, [fp, #24]
   11c54:	ldr	r7, [r0, #24]
   11c58:	ldr	r0, [r9, #24]
   11c5c:	add	r5, r5, r1
   11c60:	add	r7, r7, r4
   11c64:	add	sl, r0, sl
   11c68:	ble	11dfc <warn@@Base+0x1970>
   11c6c:	mov	r6, #0
   11c70:	movw	fp, #26215	; 0x6667
   11c74:	movt	fp, #26214	; 0x6666
   11c78:	mov	ip, r6
   11c7c:	rsb	r4, r4, #0
   11c80:	rsb	r2, r1, #0
   11c84:	str	r4, [sp, #16]
   11c88:	str	r2, [sp, #20]
   11c8c:	add	r3, r8, r6
   11c90:	rsb	r2, r6, #0
   11c94:	rsb	r3, r3, #0
   11c98:	cmn	r3, #1
   11c9c:	ldrge	r1, [sp, #24]
   11ca0:	movlt	r3, #0
   11ca4:	addge	r3, r1, r6
   11ca8:	cmp	r8, r2
   11cac:	ldr	r2, [sp, #20]
   11cb0:	add	r3, sl, r3
   11cb4:	movgt	r2, r6
   11cb8:	cmp	r3, r0
   11cbc:	add	r2, r5, r2
   11cc0:	bcs	11cdc <warn@@Base+0x1850>
   11cc4:	b	11ce4 <warn@@Base+0x1858>
   11cc8:	ldrb	r4, [r3], #-1
   11ccc:	ldrb	r1, [r2], #1
   11cd0:	cmp	r3, r0
   11cd4:	mla	ip, r4, r1, ip
   11cd8:	bcc	11ce4 <warn@@Base+0x1858>
   11cdc:	cmp	r5, r2
   11ce0:	bcs	11cc8 <warn@@Base+0x183c>
   11ce4:	smull	r3, r2, fp, ip
   11ce8:	asr	r3, ip, #31
   11cec:	ldr	r1, [sp, #16]
   11cf0:	rsb	r3, r3, r2, asr #2
   11cf4:	add	r2, r3, r3, lsl #2
   11cf8:	sub	ip, ip, r2, lsl #1
   11cfc:	strb	ip, [r7, r6]
   11d00:	sub	r6, r6, #1
   11d04:	mov	ip, r3
   11d08:	cmp	r6, r1
   11d0c:	ldrne	r0, [r9, #24]
   11d10:	bne	11c8c <warn@@Base+0x1800>
   11d14:	add	r7, r7, r6
   11d18:	uxtb	ip, r3
   11d1c:	strb	ip, [r7]
   11d20:	ldr	r1, [sp, #28]
   11d24:	ldr	r2, [sp, #68]	; 0x44
   11d28:	ldr	r3, [r1]
   11d2c:	cmp	r2, r3
   11d30:	bne	11e3c <warn@@Base+0x19b0>
   11d34:	add	sp, sp, #76	; 0x4c
   11d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d3c:	movw	r7, #5008	; 0x1390
   11d40:	movt	r7, #2
   11d44:	mov	r0, r1
   11d48:	ldr	r1, [r9, #24]
   11d4c:	ldr	r3, [r7]
   11d50:	ldr	r2, [r3, #12]
   11d54:	str	r3, [sp, #36]	; 0x24
   11d58:	add	r2, r2, #1
   11d5c:	str	r2, [r3, #12]
   11d60:	bl	10df4 <warn@@Base+0x968>
   11d64:	cmp	r8, r6
   11d68:	str	r0, [sp, #32]
   11d6c:	blt	118d8 <warn@@Base+0x144c>
   11d70:	rsb	r8, r6, r8
   11d74:	ldr	r1, [fp, #24]
   11d78:	mov	r0, r8
   11d7c:	bl	10df4 <warn@@Base+0x968>
   11d80:	ldr	r1, [fp, #24]
   11d84:	add	r1, r1, r8
   11d88:	str	r0, [sp, #44]	; 0x2c
   11d8c:	mov	r0, r6
   11d90:	bl	10df4 <warn@@Base+0x968>
   11d94:	mov	r1, r0
   11d98:	str	r0, [sp, #40]	; 0x28
   11d9c:	b	11900 <warn@@Base+0x1474>
   11da0:	ldr	r0, [sp, #36]	; 0x24
   11da4:	add	r8, sp, #48	; 0x30
   11da8:	ldr	r2, [sp, #44]	; 0x2c
   11dac:	ldr	r1, [r0, #4]
   11db0:	ldr	r3, [r2, #4]
   11db4:	str	r8, [sp]
   11db8:	bl	11818 <warn@@Base+0x138c>
   11dbc:	b	11acc <warn@@Base+0x1640>
   11dc0:	ldr	r2, [sp, #48]	; 0x30
   11dc4:	lsl	r3, r6, #1
   11dc8:	ldr	r1, [r2, #4]
   11dcc:	ldr	r2, [r2, #24]
   11dd0:	str	r9, [sp]
   11dd4:	bl	10c8c <warn@@Base+0x800>
   11dd8:	ldr	r2, [sp, #48]	; 0x30
   11ddc:	ldr	r0, [r5]
   11de0:	mov	r3, r6
   11de4:	ldr	r1, [r2, #4]
   11de8:	ldr	r2, [r2, #24]
   11dec:	str	r9, [sp]
   11df0:	bl	10c8c <warn@@Base+0x800>
   11df4:	ldr	r0, [r5]
   11df8:	b	11b78 <warn@@Base+0x16ec>
   11dfc:	mov	ip, #0
   11e00:	b	11d1c <warn@@Base+0x1890>
   11e04:	mov	r0, sl
   11e08:	mov	r1, fp
   11e0c:	add	sl, sp, #52	; 0x34
   11e10:	ldr	r3, [sp, #16]
   11e14:	str	sl, [sp]
   11e18:	bl	11818 <warn@@Base+0x138c>
   11e1c:	b	11b14 <warn@@Base+0x1688>
   11e20:	ldr	r1, [fp, #4]
   11e24:	add	r7, sp, #56	; 0x38
   11e28:	ldr	r3, [r2, #4]
   11e2c:	mov	r0, fp
   11e30:	str	r7, [sp]
   11e34:	bl	11818 <warn@@Base+0x138c>
   11e38:	b	11b5c <warn@@Base+0x16d0>
   11e3c:	bl	8e44 <__stack_chk_fail@plt>
   11e40:	push	{r4, r5, r6, r7, r8, lr}
   11e44:	mov	r5, r0
   11e48:	ldr	ip, [r0]
   11e4c:	mov	r6, r1
   11e50:	ldr	lr, [r1]
   11e54:	mov	r4, r2
   11e58:	mov	r7, r3
   11e5c:	cmp	ip, lr
   11e60:	beq	11f10 <warn@@Base+0x1a84>
   11e64:	mov	r2, #0
   11e68:	bl	10e6c <warn@@Base+0x9e0>
   11e6c:	subs	r8, r0, #0
   11e70:	beq	11ed4 <warn@@Base+0x1a48>
   11e74:	cmp	r8, #1
   11e78:	beq	11eb4 <warn@@Base+0x1a28>
   11e7c:	cmn	r8, #1
   11e80:	movne	r7, #0
   11e84:	bne	11ea4 <warn@@Base+0x1a18>
   11e88:	mov	r2, r7
   11e8c:	mov	r1, r5
   11e90:	mov	r0, r6
   11e94:	bl	112b8 <warn@@Base+0xe2c>
   11e98:	ldr	r3, [r6]
   11e9c:	mov	r7, r0
   11ea0:	str	r3, [r0]
   11ea4:	mov	r0, r4
   11ea8:	bl	11504 <warn@@Base+0x1078>
   11eac:	str	r7, [r4]
   11eb0:	pop	{r4, r5, r6, r7, r8, pc}
   11eb4:	mov	r2, r7
   11eb8:	mov	r1, r6
   11ebc:	mov	r0, r5
   11ec0:	bl	112b8 <warn@@Base+0xe2c>
   11ec4:	ldr	r3, [r5]
   11ec8:	mov	r7, r0
   11ecc:	str	r3, [r0]
   11ed0:	b	11ea4 <warn@@Base+0x1a18>
   11ed4:	ldr	r3, [r6, #8]
   11ed8:	mov	r0, #1
   11edc:	ldr	r5, [r5, #8]
   11ee0:	cmp	r5, r3
   11ee4:	movlt	r5, r3
   11ee8:	cmp	r5, r7
   11eec:	movlt	r5, r7
   11ef0:	mov	r1, r5
   11ef4:	bl	10fd4 <warn@@Base+0xb48>
   11ef8:	add	r2, r5, #1
   11efc:	mov	r1, r8
   11f00:	mov	r7, r0
   11f04:	ldr	r0, [r0, #24]
   11f08:	bl	8f34 <memset@plt>
   11f0c:	b	11ea4 <warn@@Base+0x1a18>
   11f10:	mov	r2, r3
   11f14:	bl	11078 <warn@@Base+0xbec>
   11f18:	ldr	r3, [r5]
   11f1c:	mov	r7, r0
   11f20:	str	r3, [r0]
   11f24:	b	11ea4 <warn@@Base+0x1a18>
   11f28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f2c:	movw	r5, #4648	; 0x1228
   11f30:	ldr	ip, [r1, #8]
   11f34:	movt	r5, #2
   11f38:	ldr	r9, [r0, #8]
   11f3c:	sub	sp, sp, #28
   11f40:	ldr	sl, [r0, #4]
   11f44:	mov	r7, r1
   11f48:	ldr	fp, [r1, #4]
   11f4c:	cmp	ip, r9
   11f50:	movge	r4, ip
   11f54:	movlt	r4, r9
   11f58:	add	sl, r9, sl
   11f5c:	ldr	lr, [r5]
   11f60:	add	fp, ip, fp
   11f64:	cmp	r4, r3
   11f68:	movlt	r4, r3
   11f6c:	add	r9, r9, ip
   11f70:	mov	r1, sl
   11f74:	mov	r3, fp
   11f78:	add	ip, sp, #16
   11f7c:	mov	r6, r2
   11f80:	str	ip, [sp]
   11f84:	mov	r2, r7
   11f88:	cmp	r4, r9
   11f8c:	movge	r4, r9
   11f90:	mov	r8, r0
   11f94:	str	r4, [sp, #12]
   11f98:	str	lr, [sp, #20]
   11f9c:	bl	11818 <warn@@Base+0x138c>
   11fa0:	ldr	r4, [sp, #16]
   11fa4:	add	sl, fp, sl
   11fa8:	ldr	r0, [r8]
   11fac:	add	r1, sl, #1
   11fb0:	ldr	r2, [r7]
   11fb4:	rsb	r9, r9, r1
   11fb8:	ldr	r3, [r4, #20]
   11fbc:	ldr	r1, [sp, #12]
   11fc0:	subs	r2, r0, r2
   11fc4:	str	r3, [r4, #24]
   11fc8:	movne	r2, #1
   11fcc:	str	r1, [r4, #8]
   11fd0:	stm	r4, {r2, r9}
   11fd4:	ldrb	r2, [r3]
   11fd8:	cmp	r2, #0
   11fdc:	bne	12014 <warn@@Base+0x1b88>
   11fe0:	cmp	r9, #1
   11fe4:	ble	12014 <warn@@Base+0x1b88>
   11fe8:	sub	r1, r9, #1
   11fec:	add	r3, r3, #1
   11ff0:	b	11ffc <warn@@Base+0x1b70>
   11ff4:	subs	r1, r1, #1
   11ff8:	beq	12014 <warn@@Base+0x1b88>
   11ffc:	str	r3, [r4, #24]
   12000:	add	r3, r3, #1
   12004:	str	r1, [r4, #4]
   12008:	ldrb	ip, [r3, #-1]
   1200c:	cmp	ip, #0
   12010:	beq	11ff4 <warn@@Base+0x1b68>
   12014:	mov	r0, r4
   12018:	bl	1163c <warn@@Base+0x11b0>
   1201c:	cmp	r0, #0
   12020:	mov	r0, r6
   12024:	movne	r3, #0
   12028:	strne	r3, [r4]
   1202c:	bl	11504 <warn@@Base+0x1078>
   12030:	ldr	r3, [sp, #16]
   12034:	ldr	r2, [sp, #20]
   12038:	str	r3, [r6]
   1203c:	ldr	r3, [r5]
   12040:	cmp	r2, r3
   12044:	bne	12050 <warn@@Base+0x1bc4>
   12048:	add	sp, sp, #28
   1204c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12050:	bl	8e44 <__stack_chk_fail@plt>
   12054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12058:	sub	sp, sp, #60	; 0x3c
   1205c:	mov	r7, r3
   12060:	str	r0, [sp, #12]
   12064:	mov	r0, r1
   12068:	str	r1, [sp, #4]
   1206c:	str	r2, [sp, #32]
   12070:	bl	1163c <warn@@Base+0x11b0>
   12074:	cmp	r0, #0
   12078:	bne	1262c <warn@@Base+0x21a0>
   1207c:	ldr	r5, [sp, #4]
   12080:	ldr	r6, [r5, #8]
   12084:	cmp	r6, #0
   12088:	beq	12534 <warn@@Base+0x20a8>
   1208c:	ldr	ip, [sp, #4]
   12090:	cmp	r6, #0
   12094:	ldr	r2, [ip, #4]
   12098:	ldr	r1, [ip, #24]
   1209c:	sub	r2, r2, #1
   120a0:	add	r2, r2, r6
   120a4:	add	r3, r1, r2
   120a8:	beq	120d0 <warn@@Base+0x1c44>
   120ac:	ldrb	r2, [r1, r2]
   120b0:	cmp	r2, #0
   120b4:	beq	120c8 <warn@@Base+0x1c3c>
   120b8:	b	120d0 <warn@@Base+0x1c44>
   120bc:	ldrb	r2, [r3, #-1]!
   120c0:	cmp	r2, #0
   120c4:	bne	120d0 <warn@@Base+0x1c44>
   120c8:	subs	r6, r6, #1
   120cc:	bne	120bc <warn@@Base+0x1c30>
   120d0:	ldr	r5, [sp, #12]
   120d4:	ldmib	r5, {r2, r3}
   120d8:	rsb	r8, r6, r3
   120dc:	add	r4, r2, r3
   120e0:	cmp	r7, r8
   120e4:	add	r4, r4, #2
   120e8:	rsbgt	ip, r8, r7
   120ec:	add	r5, r6, r2
   120f0:	movle	ip, #0
   120f4:	str	ip, [sp]
   120f8:	ldr	r3, [sp]
   120fc:	add	r4, r4, r3
   12100:	mov	r0, r4
   12104:	bl	8ea4 <malloc@plt>
   12108:	cmp	r0, #0
   1210c:	str	r0, [sp, #8]
   12110:	beq	1260c <warn@@Base+0x2180>
   12114:	mov	r2, r4
   12118:	mov	r1, #0
   1211c:	ldr	r0, [sp, #8]
   12120:	bl	8f34 <memset@plt>
   12124:	ldr	ip, [sp, #12]
   12128:	ldmib	ip, {r2, r3}
   1212c:	ldr	ip, [sp, #8]
   12130:	add	r2, r2, r3
   12134:	add	r0, ip, #1
   12138:	ldr	ip, [sp, #12]
   1213c:	ldr	r1, [ip, #24]
   12140:	bl	8e20 <memcpy@plt>
   12144:	ldr	ip, [sp, #4]
   12148:	ldr	r3, [ip, #4]
   1214c:	add	r6, r6, r3
   12150:	add	ip, r6, #1
   12154:	str	ip, [sp, #20]
   12158:	mov	r0, ip
   1215c:	bl	8ea4 <malloc@plt>
   12160:	cmp	r0, #0
   12164:	str	r0, [sp, #16]
   12168:	beq	125fc <warn@@Base+0x2170>
   1216c:	ldr	ip, [sp, #4]
   12170:	mov	r2, r6
   12174:	ldr	r0, [sp, #16]
   12178:	ldr	r1, [ip, #24]
   1217c:	bl	8e20 <memcpy@plt>
   12180:	ldr	ip, [sp, #16]
   12184:	mov	r3, #0
   12188:	strb	r3, [ip, r6]
   1218c:	ldrb	r3, [ip]
   12190:	cmp	r3, #0
   12194:	bne	125f4 <warn@@Base+0x2168>
   12198:	add	r3, ip, #1
   1219c:	ldrb	r2, [r3]
   121a0:	mov	r4, r3
   121a4:	sub	r6, r6, #1
   121a8:	add	r3, r3, #1
   121ac:	cmp	r2, #0
   121b0:	beq	1219c <warn@@Base+0x1d10>
   121b4:	add	ip, r6, #1
   121b8:	str	ip, [sp, #20]
   121bc:	add	sl, r5, r7
   121c0:	add	fp, r7, #1
   121c4:	cmp	sl, r6
   121c8:	movcc	r9, #1
   121cc:	bcs	12520 <warn@@Base+0x2094>
   121d0:	mov	r1, r7
   121d4:	rsb	r0, r7, fp
   121d8:	bl	10fd4 <warn@@Base+0xb48>
   121dc:	mov	r2, fp
   121e0:	mov	r1, #0
   121e4:	mov	r7, r0
   121e8:	ldr	r0, [r0, #24]
   121ec:	bl	8f34 <memset@plt>
   121f0:	ldr	r0, [sp, #20]
   121f4:	bl	8ea4 <malloc@plt>
   121f8:	cmp	r0, #0
   121fc:	str	r0, [sp, #24]
   12200:	beq	12604 <warn@@Base+0x2178>
   12204:	cmp	r9, #0
   12208:	bne	12474 <warn@@Base+0x1fe8>
   1220c:	ldrb	r9, [r4]
   12210:	mov	r0, #10
   12214:	add	r1, r9, #1
   12218:	bl	13758 <warn@@Base+0x32cc>
   1221c:	cmp	r0, #1
   12220:	mov	fp, r0
   12224:	beq	12260 <warn@@Base+0x1dd4>
   12228:	ldr	r0, [sp, #8]
   1222c:	add	r1, r5, r8
   12230:	ldr	r3, [sp]
   12234:	add	r1, r1, #1
   12238:	mov	r2, fp
   1223c:	add	r1, r1, r3
   12240:	mov	r3, r0
   12244:	bl	10bec <warn@@Base+0x760>
   12248:	mov	r0, r4
   1224c:	mov	r1, r6
   12250:	mov	r2, fp
   12254:	mov	r3, r4
   12258:	bl	10bec <warn@@Base+0x760>
   1225c:	ldrb	r9, [r4]
   12260:	cmp	r5, r6
   12264:	ldr	ip, [sp, #8]
   12268:	rsbcc	r5, r5, r6
   1226c:	rsb	sl, r6, sl
   12270:	ldrcs	r5, [r7, #24]
   12274:	sub	r2, ip, #1
   12278:	ldrcc	r3, [r7, #24]
   1227c:	add	r2, r2, r6
   12280:	str	sl, [sp]
   12284:	mov	sl, #0
   12288:	addcc	r3, r3, r5
   1228c:	strcs	r5, [sp, #36]	; 0x24
   12290:	ldr	r5, [sp, #20]
   12294:	strcc	r3, [sp, #36]	; 0x24
   12298:	sub	r3, r6, #1
   1229c:	rsb	r2, r5, r2
   122a0:	ldr	r5, [sp, #8]
   122a4:	add	r3, r4, r3
   122a8:	str	r6, [sp, #28]
   122ac:	add	ip, r5, r6
   122b0:	movw	r5, #26215	; 0x6667
   122b4:	movt	r5, #26214	; 0x6666
   122b8:	str	r5, [sp, #48]	; 0x30
   122bc:	ldr	r5, [sp, #36]	; 0x24
   122c0:	mov	r6, r4
   122c4:	str	r2, [sp, #44]	; 0x2c
   122c8:	mov	fp, ip
   122cc:	str	r3, [sp, #40]	; 0x28
   122d0:	ldr	r8, [sp, #8]
   122d4:	mov	r4, r5
   122d8:	str	r7, [sp, #52]	; 0x34
   122dc:	b	122fc <warn@@Base+0x1e70>
   122e0:	ldr	ip, [sp]
   122e4:	add	r8, r8, #1
   122e8:	strb	r5, [r4], #1
   122ec:	add	fp, fp, #1
   122f0:	cmp	ip, sl
   122f4:	bcc	12470 <warn@@Base+0x1fe4>
   122f8:	ldrb	r9, [r6]
   122fc:	ldrb	r3, [r8]
   12300:	add	sl, sl, #1
   12304:	cmp	r3, r9
   12308:	beq	12548 <warn@@Base+0x20bc>
   1230c:	ldrb	r2, [r8, #1]
   12310:	mov	r7, #10
   12314:	mov	r1, r9
   12318:	smlabb	r7, r7, r3, r2
   1231c:	mov	r0, r7
   12320:	bl	13758 <warn@@Base+0x32cc>
   12324:	mov	r5, r0
   12328:	mul	lr, r9, r5
   1232c:	ldrb	r1, [r6, #1]
   12330:	ldrb	r2, [r8, #2]
   12334:	rsb	r3, lr, r7
   12338:	mul	r0, r1, r5
   1233c:	add	r3, r3, r3, lsl #2
   12340:	add	r3, r2, r3, lsl #1
   12344:	cmp	r0, r3
   12348:	bls	12370 <warn@@Base+0x1ee4>
   1234c:	rsb	r9, r9, lr
   12350:	rsb	r1, r1, r0
   12354:	rsb	r7, r9, r7
   12358:	sub	r3, r5, #1
   1235c:	add	r7, r7, r7, lsl #2
   12360:	add	r2, r2, r7, lsl #1
   12364:	cmp	r1, r2
   12368:	subhi	r5, r5, #2
   1236c:	movls	r5, r3
   12370:	cmp	r5, #0
   12374:	beq	122e0 <warn@@Base+0x1e54>
   12378:	ldr	r3, [sp, #24]
   1237c:	mov	r7, #0
   12380:	ldr	r1, [sp, #28]
   12384:	mov	r2, r5
   12388:	mov	r0, r6
   1238c:	strb	r7, [r3], #1
   12390:	bl	10bec <warn@@Base+0x760>
   12394:	ldr	ip, [sp, #20]
   12398:	ldr	r2, [sp, #28]
   1239c:	cmp	ip, r7
   123a0:	ldr	ip, [sp, #24]
   123a4:	add	r1, ip, r2
   123a8:	beq	122e0 <warn@@Base+0x1e54>
   123ac:	ldr	ip, [sp, #44]	; 0x2c
   123b0:	mov	r2, r7
   123b4:	mov	r3, fp
   123b8:	add	lr, ip, sl
   123bc:	ldrb	ip, [r3], #-1
   123c0:	ldrb	r0, [r1], #-1
   123c4:	rsb	r0, r0, ip
   123c8:	subs	r0, r0, r2
   123cc:	mov	r2, #0
   123d0:	addmi	r0, r0, #10
   123d4:	strb	r0, [r3, #1]
   123d8:	movmi	r2, #1
   123dc:	cmp	r3, lr
   123e0:	bne	123bc <warn@@Base+0x1f30>
   123e4:	cmp	r2, #1
   123e8:	bne	122e0 <warn@@Base+0x1e54>
   123ec:	ldr	ip, [sp, #28]
   123f0:	sub	r5, r5, #1
   123f4:	ldr	r1, [sp, #40]	; 0x28
   123f8:	cmp	ip, #0
   123fc:	beq	122e0 <warn@@Base+0x1e54>
   12400:	ldr	r2, [sp, #36]	; 0x24
   12404:	mov	r3, fp
   12408:	ldr	ip, [sp, #8]
   1240c:	rsb	r7, r2, ip
   12410:	mov	r2, #0
   12414:	add	r7, r4, r7
   12418:	ldrb	ip, [r3], #-1
   1241c:	ldrb	r0, [r1], #-1
   12420:	add	r0, ip, r0
   12424:	add	r0, r2, r0
   12428:	mov	r2, #1
   1242c:	cmp	r0, #9
   12430:	subgt	r0, r0, #10
   12434:	strb	r0, [r3, #1]
   12438:	movle	r2, #0
   1243c:	cmp	r3, r7
   12440:	bne	12418 <warn@@Base+0x1f8c>
   12444:	cmp	r2, #1
   12448:	bne	122e0 <warn@@Base+0x1e54>
   1244c:	ldrb	r3, [r8]
   12450:	ldr	ip, [sp, #48]	; 0x30
   12454:	add	r3, r3, #1
   12458:	smull	ip, r2, ip, r3
   1245c:	lsr	r2, r2, #2
   12460:	add	r2, r2, r2, lsl #2
   12464:	sub	r3, r3, r2, lsl #1
   12468:	strb	r3, [r8]
   1246c:	b	122e0 <warn@@Base+0x1e54>
   12470:	ldr	r7, [sp, #52]	; 0x34
   12474:	ldr	ip, [sp, #4]
   12478:	mov	r0, r7
   1247c:	ldr	r5, [sp, #12]
   12480:	ldr	r3, [ip]
   12484:	ldr	r2, [r5]
   12488:	subs	r3, r2, r3
   1248c:	movne	r3, #1
   12490:	str	r3, [r7]
   12494:	bl	1163c <warn@@Base+0x11b0>
   12498:	cmp	r0, #0
   1249c:	movne	r3, #0
   124a0:	strne	r3, [r7]
   124a4:	ldr	r3, [r7, #24]
   124a8:	ldrb	r2, [r3]
   124ac:	cmp	r2, #0
   124b0:	bne	124ec <warn@@Base+0x2060>
   124b4:	ldr	r2, [r7, #4]
   124b8:	cmp	r2, #1
   124bc:	ble	124ec <warn@@Base+0x2060>
   124c0:	sub	r2, r2, #1
   124c4:	add	r3, r3, #1
   124c8:	b	124d4 <warn@@Base+0x2048>
   124cc:	subs	r2, r2, #1
   124d0:	beq	124ec <warn@@Base+0x2060>
   124d4:	str	r3, [r7, #24]
   124d8:	add	r3, r3, #1
   124dc:	str	r2, [r7, #4]
   124e0:	ldrb	r1, [r3, #-1]
   124e4:	cmp	r1, #0
   124e8:	beq	124cc <warn@@Base+0x2040>
   124ec:	ldr	r0, [sp, #32]
   124f0:	bl	11504 <warn@@Base+0x1078>
   124f4:	ldr	r5, [sp, #32]
   124f8:	ldr	r0, [sp, #24]
   124fc:	str	r7, [r5]
   12500:	bl	8e08 <free@plt>
   12504:	ldr	r0, [sp, #8]
   12508:	bl	8e08 <free@plt>
   1250c:	ldr	r0, [sp, #16]
   12510:	bl	8e08 <free@plt>
   12514:	mov	r0, #0
   12518:	add	sp, sp, #60	; 0x3c
   1251c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12520:	cmp	r5, r6
   12524:	mov	r9, #0
   12528:	addcs	fp, fp, r5
   1252c:	rsbcs	fp, r6, fp
   12530:	b	121d0 <warn@@Base+0x1d44>
   12534:	ldr	r3, [r5, #4]
   12538:	cmp	r3, #1
   1253c:	beq	1255c <warn@@Base+0x20d0>
   12540:	mov	r6, #0
   12544:	b	120d0 <warn@@Base+0x1c44>
   12548:	ldrb	r3, [r8, #1]
   1254c:	mov	r7, #10
   12550:	mov	r5, #9
   12554:	smlabb	r7, r7, r9, r3
   12558:	b	12328 <warn@@Base+0x1e9c>
   1255c:	ldr	ip, [sp, #4]
   12560:	ldr	r3, [ip, #24]
   12564:	ldrb	r3, [r3]
   12568:	cmp	r3, #1
   1256c:	bne	12540 <warn@@Base+0x20b4>
   12570:	ldr	r5, [sp, #12]
   12574:	mov	r1, r7
   12578:	ldr	r0, [r5, #4]
   1257c:	bl	10fd4 <warn@@Base+0xb48>
   12580:	ldr	lr, [r5]
   12584:	ldr	r5, [sp, #4]
   12588:	mov	r1, r6
   1258c:	mov	r2, r7
   12590:	ldr	ip, [r5]
   12594:	ldr	r5, [sp, #12]
   12598:	subs	ip, lr, ip
   1259c:	ldr	r3, [r5, #4]
   125a0:	movne	ip, #1
   125a4:	mov	r4, r0
   125a8:	ldr	r0, [r0, #24]
   125ac:	str	ip, [r4]
   125b0:	add	r0, r0, r3
   125b4:	bl	8f34 <memset@plt>
   125b8:	ldr	r3, [r5, #4]
   125bc:	ldr	r2, [r5, #8]
   125c0:	ldr	r1, [r5, #24]
   125c4:	cmp	r7, r2
   125c8:	addle	r2, r3, r7
   125cc:	addgt	r2, r3, r2
   125d0:	ldr	r0, [r4, #24]
   125d4:	bl	8e20 <memcpy@plt>
   125d8:	ldr	r0, [sp, #32]
   125dc:	bl	11504 <warn@@Base+0x1078>
   125e0:	ldr	ip, [sp, #4]
   125e4:	ldr	r5, [sp, #32]
   125e8:	ldr	r6, [ip, #8]
   125ec:	str	r4, [r5]
   125f0:	b	1208c <warn@@Base+0x1c00>
   125f4:	ldr	r4, [sp, #16]
   125f8:	b	121bc <warn@@Base+0x1d30>
   125fc:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   12600:	b	1216c <warn@@Base+0x1ce0>
   12604:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   12608:	b	12204 <warn@@Base+0x1d78>
   1260c:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   12610:	ldr	ip, [sp, #12]
   12614:	ldmib	ip, {r3, r4}
   12618:	add	r4, r4, r3
   1261c:	ldr	r3, [sp]
   12620:	add	r4, r4, #2
   12624:	add	r4, r4, r3
   12628:	b	12114 <warn@@Base+0x1c88>
   1262c:	mvn	r0, #0
   12630:	b	12518 <warn@@Base+0x208c>
   12634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12638:	movw	r5, #4648	; 0x1228
   1263c:	movt	r5, #2
   12640:	mov	r6, r1
   12644:	sub	sp, sp, #20
   12648:	mov	r7, r0
   1264c:	ldr	r1, [r5]
   12650:	mov	r0, r6
   12654:	mov	r8, r2
   12658:	mov	sl, r3
   1265c:	ldr	r9, [sp, #56]	; 0x38
   12660:	str	r1, [sp, #12]
   12664:	bl	1163c <warn@@Base+0x11b0>
   12668:	subs	fp, r0, #0
   1266c:	bne	12768 <warn@@Base+0x22dc>
   12670:	movw	r3, #5008	; 0x1390
   12674:	movt	r3, #2
   12678:	ldr	r1, [r6, #8]
   1267c:	add	r4, sp, #16
   12680:	ldr	ip, [r3]
   12684:	mov	r3, r9
   12688:	ldr	r2, [r7, #8]
   1268c:	add	r9, r9, r1
   12690:	mov	r0, r7
   12694:	mov	r1, r6
   12698:	ldr	lr, [ip, #12]
   1269c:	cmp	r9, r2
   126a0:	movlt	r9, r2
   126a4:	str	ip, [r4, #-8]!
   126a8:	mov	r2, r4
   126ac:	add	lr, lr, #1
   126b0:	str	lr, [ip, #12]
   126b4:	bl	12054 <warn@@Base+0x1bc8>
   126b8:	cmp	r8, #0
   126bc:	beq	12730 <warn@@Base+0x22a4>
   126c0:	ldr	ip, [sp, #8]
   126c4:	mov	r1, r6
   126c8:	mov	r2, r4
   126cc:	mov	r3, r9
   126d0:	ldr	lr, [ip, #12]
   126d4:	mov	r0, ip
   126d8:	add	lr, lr, #1
   126dc:	str	lr, [ip, #12]
   126e0:	str	ip, [sp, #4]
   126e4:	bl	11f28 <warn@@Base+0x1a9c>
   126e8:	mov	r2, sl
   126ec:	mov	r3, r9
   126f0:	ldr	r1, [sp, #8]
   126f4:	mov	r0, r7
   126f8:	bl	11724 <warn@@Base+0x1298>
   126fc:	mov	r0, r4
   12700:	bl	11504 <warn@@Base+0x1078>
   12704:	mov	r0, r8
   12708:	bl	11504 <warn@@Base+0x1078>
   1270c:	ldr	ip, [sp, #4]
   12710:	mov	r0, fp
   12714:	str	ip, [r8]
   12718:	ldr	r2, [sp, #12]
   1271c:	ldr	r3, [r5]
   12720:	cmp	r2, r3
   12724:	bne	12770 <warn@@Base+0x22e4>
   12728:	add	sp, sp, #20
   1272c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12730:	mov	r1, r6
   12734:	ldr	r0, [sp, #8]
   12738:	mov	r2, r4
   1273c:	mov	r3, r9
   12740:	bl	11f28 <warn@@Base+0x1a9c>
   12744:	mov	r0, r7
   12748:	mov	r2, sl
   1274c:	mov	r3, r9
   12750:	ldr	r1, [sp, #8]
   12754:	bl	11724 <warn@@Base+0x1298>
   12758:	mov	r0, r4
   1275c:	bl	11504 <warn@@Base+0x1078>
   12760:	mov	r0, r8
   12764:	b	12718 <warn@@Base+0x228c>
   12768:	mvn	r0, #0
   1276c:	b	12718 <warn@@Base+0x228c>
   12770:	bl	8e44 <__stack_chk_fail@plt>
   12774:	push	{lr}		; (str lr, [sp, #-4]!)
   12778:	sub	sp, sp, #12
   1277c:	mov	ip, r2
   12780:	mov	r2, #0
   12784:	str	r3, [sp]
   12788:	mov	r3, ip
   1278c:	bl	12634 <warn@@Base+0x21a8>
   12790:	add	sp, sp, #12
   12794:	pop	{pc}		; (ldr pc, [sp], #4)
   12798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1279c:	movw	sl, #4648	; 0x1228
   127a0:	movt	sl, #2
   127a4:	mov	r5, r2
   127a8:	sub	sp, sp, #36	; 0x24
   127ac:	mov	r4, r0
   127b0:	ldr	r2, [sl]
   127b4:	mov	r0, r5
   127b8:	mov	r7, r1
   127bc:	mov	fp, r3
   127c0:	ldr	r6, [sp, #72]	; 0x48
   127c4:	str	r2, [sp, #28]
   127c8:	bl	1163c <warn@@Base+0x11b0>
   127cc:	cmp	r0, #0
   127d0:	bne	129ac <warn@@Base+0x2520>
   127d4:	ldr	r3, [r7]
   127d8:	cmp	r3, #1
   127dc:	beq	129ac <warn@@Base+0x2520>
   127e0:	movw	r8, #5000	; 0x1388
   127e4:	movt	r8, #2
   127e8:	ldr	r1, [r4, #12]
   127ec:	movw	r3, #5008	; 0x1390
   127f0:	ldr	r2, [r8]
   127f4:	movt	r3, #2
   127f8:	add	r1, r1, #1
   127fc:	str	r1, [r4, #12]
   12800:	ldr	r1, [r7, #12]
   12804:	ldr	r3, [r3]
   12808:	ldr	r0, [r4, #8]
   1280c:	add	r1, r1, #1
   12810:	str	r1, [r7, #12]
   12814:	ldr	r1, [r2, #12]
   12818:	cmp	r0, #0
   1281c:	str	r2, [sp, #24]
   12820:	add	r1, r1, #1
   12824:	str	r1, [r2, #12]
   12828:	ldr	r1, [r3, #12]
   1282c:	str	r4, [sp, #12]
   12830:	add	r2, r1, #1
   12834:	str	r7, [sp, #16]
   12838:	str	r3, [sp, #20]
   1283c:	str	r2, [r3, #12]
   12840:	bne	1294c <warn@@Base+0x24c0>
   12844:	ldr	r3, [r7, #8]
   12848:	cmp	r3, #0
   1284c:	addeq	r9, sp, #16
   12850:	bne	1296c <warn@@Base+0x24e0>
   12854:	ldr	r3, [r5, #8]
   12858:	cmp	r3, #0
   1285c:	bne	1299c <warn@@Base+0x2510>
   12860:	ldr	r7, [r4, #8]
   12864:	movw	r8, #5004	; 0x138c
   12868:	movt	r8, #2
   1286c:	cmp	r7, r6
   12870:	movlt	r7, r6
   12874:	b	128a4 <warn@@Base+0x2418>
   12878:	ldr	r0, [sp, #12]
   1287c:	add	r2, sp, #12
   12880:	mov	r3, r7
   12884:	mov	r1, r0
   12888:	bl	11f28 <warn@@Base+0x1a9c>
   1288c:	ldr	r0, [sp, #12]
   12890:	str	r6, [sp]
   12894:	mov	r1, r5
   12898:	mov	r2, #0
   1289c:	add	r3, sp, #12
   128a0:	bl	12634 <warn@@Base+0x21a8>
   128a4:	ldr	r4, [sp, #16]
   128a8:	mov	r0, r4
   128ac:	bl	1163c <warn@@Base+0x11b0>
   128b0:	subs	r3, r0, #0
   128b4:	bne	12910 <warn@@Base+0x2484>
   128b8:	ldr	r1, [r8]
   128bc:	mov	r0, r4
   128c0:	str	r3, [sp]
   128c4:	mov	r2, r9
   128c8:	add	r3, sp, #20
   128cc:	bl	12634 <warn@@Base+0x21a8>
   128d0:	ldr	r0, [sp, #20]
   128d4:	bl	1163c <warn@@Base+0x11b0>
   128d8:	subs	r4, r0, #0
   128dc:	bne	12878 <warn@@Base+0x23ec>
   128e0:	ldr	r0, [sp, #24]
   128e4:	add	r2, sp, #24
   128e8:	ldr	r1, [sp, #12]
   128ec:	mov	r3, r7
   128f0:	bl	11f28 <warn@@Base+0x1a9c>
   128f4:	ldr	r0, [sp, #24]
   128f8:	str	r6, [sp]
   128fc:	mov	r2, r4
   12900:	mov	r1, r5
   12904:	add	r3, sp, #24
   12908:	bl	12634 <warn@@Base+0x21a8>
   1290c:	b	12878 <warn@@Base+0x23ec>
   12910:	add	r0, sp, #12
   12914:	bl	11504 <warn@@Base+0x1078>
   12918:	mov	r0, r9
   1291c:	bl	11504 <warn@@Base+0x1078>
   12920:	mov	r0, fp
   12924:	bl	11504 <warn@@Base+0x1078>
   12928:	ldr	r3, [sp, #24]
   1292c:	mov	r0, #0
   12930:	str	r3, [fp]
   12934:	ldr	r2, [sp, #28]
   12938:	ldr	r3, [sl]
   1293c:	cmp	r2, r3
   12940:	bne	129b4 <warn@@Base+0x2528>
   12944:	add	sp, sp, #36	; 0x24
   12948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1294c:	movw	r0, #32724	; 0x7fd4
   12950:	movt	r0, #1
   12954:	bl	10a88 <warn@@Base+0x5fc>
   12958:	ldr	r7, [sp, #16]
   1295c:	ldr	r3, [r7, #8]
   12960:	cmp	r3, #0
   12964:	addeq	r9, sp, #16
   12968:	beq	12854 <warn@@Base+0x23c8>
   1296c:	add	r9, sp, #32
   12970:	movw	r0, #32748	; 0x7fec
   12974:	movt	r0, #1
   12978:	bl	10a88 <warn@@Base+0x5fc>
   1297c:	ldr	r0, [r9, #-16]!
   12980:	mov	r3, #0
   12984:	ldr	r1, [r8]
   12988:	mov	r2, r9
   1298c:	bl	12054 <warn@@Base+0x1bc8>
   12990:	ldr	r3, [r5, #8]
   12994:	cmp	r3, #0
   12998:	beq	12860 <warn@@Base+0x23d4>
   1299c:	movw	r0, #32776	; 0x8008
   129a0:	movt	r0, #1
   129a4:	bl	10a88 <warn@@Base+0x5fc>
   129a8:	b	12860 <warn@@Base+0x23d4>
   129ac:	mvn	r0, #0
   129b0:	b	12934 <warn@@Base+0x24a8>
   129b4:	bl	8e44 <__stack_chk_fail@plt>
   129b8:	push	{r4, r5, r6, r7, lr}
   129bc:	movw	r7, #4648	; 0x1228
   129c0:	movt	r7, #2
   129c4:	cmp	r2, #0
   129c8:	sub	sp, sp, #60	; 0x3c
   129cc:	mov	r6, r0
   129d0:	ldr	r2, [r7]
   129d4:	mov	r4, r1
   129d8:	mov	r5, r3
   129dc:	str	r2, [sp, #52]	; 0x34
   129e0:	bne	12a60 <warn@@Base+0x25d4>
   129e4:	str	r6, [sp]
   129e8:	mov	r1, #1
   129ec:	mov	r2, #40	; 0x28
   129f0:	movw	r3, #32804	; 0x8024
   129f4:	add	r0, sp, #12
   129f8:	movt	r3, #1
   129fc:	bl	8f1c <__sprintf_chk@plt>
   12a00:	add	r0, sp, #12
   12a04:	bl	8ef8 <strlen@plt>
   12a08:	cmp	r0, r4
   12a0c:	mov	r6, r0
   12a10:	bge	12a28 <warn@@Base+0x259c>
   12a14:	sub	r4, r4, #1
   12a18:	mov	r0, #48	; 0x30
   12a1c:	blx	r5
   12a20:	cmp	r6, r4
   12a24:	bne	12a14 <warn@@Base+0x2588>
   12a28:	cmp	r6, #0
   12a2c:	addgt	r4, sp, #11
   12a30:	addgt	r6, r4, r6
   12a34:	ble	12a48 <warn@@Base+0x25bc>
   12a38:	ldrb	r0, [r4, #1]!
   12a3c:	blx	r5
   12a40:	cmp	r4, r6
   12a44:	bne	12a38 <warn@@Base+0x25ac>
   12a48:	ldr	r2, [sp, #52]	; 0x34
   12a4c:	ldr	r3, [r7]
   12a50:	cmp	r2, r3
   12a54:	bne	12a6c <warn@@Base+0x25e0>
   12a58:	add	sp, sp, #60	; 0x3c
   12a5c:	pop	{r4, r5, r6, r7, pc}
   12a60:	mov	r0, #32
   12a64:	blx	r3
   12a68:	b	129e4 <warn@@Base+0x2558>
   12a6c:	bl	8e44 <__stack_chk_fail@plt>
   12a70:	ldr	r2, [r0, #4]
   12a74:	push	{r4}		; (str r4, [sp, #-4]!)
   12a78:	cmp	r2, #0
   12a7c:	ldr	r1, [r0, #24]
   12a80:	ble	12adc <warn@@Base+0x2650>
   12a84:	movw	r4, #52428	; 0xcccc
   12a88:	movt	r4, #3276	; 0xccc
   12a8c:	mov	r3, #0
   12a90:	ldrb	ip, [r1], #1
   12a94:	add	r3, r3, r3, lsl #2
   12a98:	sub	r2, r2, #1
   12a9c:	add	r3, ip, r3, lsl #1
   12aa0:	cmp	r3, r4
   12aa4:	movgt	ip, #0
   12aa8:	movle	ip, #1
   12aac:	cmp	r2, #0
   12ab0:	movle	ip, #0
   12ab4:	cmp	ip, #0
   12ab8:	bne	12a90 <warn@@Base+0x2604>
   12abc:	cmp	r2, #0
   12ac0:	movgt	r3, #0
   12ac4:	ldr	r2, [r0]
   12ac8:	pop	{r4}		; (ldr r4, [sp], #4)
   12acc:	cmp	r2, #0
   12ad0:	rsbne	r0, r3, #0
   12ad4:	moveq	r0, r3
   12ad8:	bx	lr
   12adc:	mov	r3, #0
   12ae0:	b	12ac4 <warn@@Base+0x2638>
   12ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae8:	movw	r7, #4648	; 0x1228
   12aec:	movt	r7, #2
   12af0:	mov	r5, r1
   12af4:	ldr	r1, [r1, #8]
   12af8:	mov	r8, r2
   12afc:	ldr	r2, [r7]
   12b00:	sub	sp, sp, #20
   12b04:	cmp	r1, #0
   12b08:	mov	fp, r0
   12b0c:	mov	r9, r3
   12b10:	str	r2, [sp, #12]
   12b14:	bne	12cc8 <warn@@Base+0x283c>
   12b18:	mov	r0, r5
   12b1c:	bl	12a70 <warn@@Base+0x25e4>
   12b20:	subs	r4, r0, #0
   12b24:	bne	12b68 <warn@@Base+0x26dc>
   12b28:	ldr	r3, [r5, #4]
   12b2c:	cmp	r3, #1
   12b30:	ble	12ca4 <warn@@Base+0x2818>
   12b34:	movw	r0, #32808	; 0x8028
   12b38:	movt	r0, #1
   12b3c:	bl	109cc <warn@@Base+0x540>
   12b40:	mov	r0, r8
   12b44:	bl	11504 <warn@@Base+0x1078>
   12b48:	movw	r3, #5000	; 0x1388
   12b4c:	movt	r3, #2
   12b50:	ldr	r3, [r3]
   12b54:	ldr	r2, [r3, #12]
   12b58:	add	r2, r2, #1
   12b5c:	str	r2, [r3, #12]
   12b60:	str	r3, [r8]
   12b64:	b	12c60 <warn@@Base+0x27d4>
   12b68:	blt	12cb8 <warn@@Base+0x282c>
   12b6c:	ldr	r5, [fp, #8]
   12b70:	mov	sl, #0
   12b74:	cmp	r9, r5
   12b78:	movlt	r9, r5
   12b7c:	mul	r3, r5, r4
   12b80:	cmp	r9, r3
   12b84:	movge	r9, r3
   12b88:	ldr	r3, [fp, #12]
   12b8c:	tst	r4, #1
   12b90:	add	r6, sp, #8
   12b94:	mov	r0, fp
   12b98:	add	r3, r3, #1
   12b9c:	str	fp, [sp, #8]
   12ba0:	str	r3, [fp, #12]
   12ba4:	bne	12bd0 <warn@@Base+0x2744>
   12ba8:	lsl	r5, r5, #1
   12bac:	mov	r1, r0
   12bb0:	asr	r4, r4, #1
   12bb4:	mov	r2, r6
   12bb8:	mov	r3, r5
   12bbc:	bl	11f28 <warn@@Base+0x1a9c>
   12bc0:	tst	r4, #1
   12bc4:	ldr	r0, [sp, #8]
   12bc8:	beq	12ba8 <warn@@Base+0x271c>
   12bcc:	ldr	r3, [r0, #12]
   12bd0:	asr	r4, r4, #1
   12bd4:	add	r3, r3, #1
   12bd8:	cmp	r4, #0
   12bdc:	str	r3, [r0, #12]
   12be0:	str	r0, [sp, #4]
   12be4:	movgt	fp, r5
   12be8:	bgt	12bfc <warn@@Base+0x2770>
   12bec:	b	12c34 <warn@@Base+0x27a8>
   12bf0:	asrs	r4, r4, #1
   12bf4:	beq	12c34 <warn@@Base+0x27a8>
   12bf8:	ldr	r0, [sp, #8]
   12bfc:	lsl	fp, fp, #1
   12c00:	mov	r1, r0
   12c04:	mov	r2, r6
   12c08:	mov	r3, fp
   12c0c:	bl	11f28 <warn@@Base+0x1a9c>
   12c10:	tst	r4, #1
   12c14:	beq	12bf0 <warn@@Base+0x2764>
   12c18:	add	r5, r5, fp
   12c1c:	ldmib	sp, {r0, r1}
   12c20:	add	r2, sp, #4
   12c24:	mov	r3, r5
   12c28:	bl	11f28 <warn@@Base+0x1a9c>
   12c2c:	asrs	r4, r4, #1
   12c30:	bne	12bf8 <warn@@Base+0x276c>
   12c34:	cmp	sl, #0
   12c38:	bne	12c78 <warn@@Base+0x27ec>
   12c3c:	mov	r0, r8
   12c40:	bl	11504 <warn@@Base+0x1078>
   12c44:	ldr	r3, [sp, #4]
   12c48:	ldr	r2, [r3, #8]
   12c4c:	str	r3, [r8]
   12c50:	cmp	r9, r2
   12c54:	strlt	r9, [r3, #8]
   12c58:	mov	r0, r6
   12c5c:	bl	11504 <warn@@Base+0x1078>
   12c60:	ldr	r2, [sp, #12]
   12c64:	ldr	r3, [r7]
   12c68:	cmp	r2, r3
   12c6c:	bne	12cd8 <warn@@Base+0x284c>
   12c70:	add	sp, sp, #20
   12c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c78:	add	r4, sp, #16
   12c7c:	movw	r1, #5000	; 0x1388
   12c80:	movt	r1, #2
   12c84:	mov	r2, r8
   12c88:	mov	r3, r9
   12c8c:	ldr	r0, [r1]
   12c90:	ldr	r1, [r4, #-12]!
   12c94:	bl	12054 <warn@@Base+0x1bc8>
   12c98:	mov	r0, r4
   12c9c:	bl	11504 <warn@@Base+0x1078>
   12ca0:	b	12c58 <warn@@Base+0x27cc>
   12ca4:	ldr	r3, [r5, #24]
   12ca8:	ldrb	r3, [r3]
   12cac:	cmp	r3, #0
   12cb0:	beq	12b40 <warn@@Base+0x26b4>
   12cb4:	b	12b34 <warn@@Base+0x26a8>
   12cb8:	rsb	r4, r4, #0
   12cbc:	ldr	r5, [fp, #8]
   12cc0:	mov	sl, #1
   12cc4:	b	12b88 <warn@@Base+0x26fc>
   12cc8:	movw	r0, #32748	; 0x7fec
   12ccc:	movt	r0, #1
   12cd0:	bl	10a88 <warn@@Base+0x5fc>
   12cd4:	b	12b18 <warn@@Base+0x268c>
   12cd8:	bl	8e44 <__stack_chk_fail@plt>
   12cdc:	cmp	r1, #0
   12ce0:	push	{r4, r5, r6, r7, r8, r9, lr}
   12ce4:	rsblt	r1, r1, #0
   12ce8:	movw	lr, #26215	; 0x6667
   12cec:	movt	lr, #26214	; 0x6666
   12cf0:	movw	r6, #4648	; 0x1228
   12cf4:	movt	r6, #2
   12cf8:	smull	r2, ip, lr, r1
   12cfc:	ldr	r3, [r6]
   12d00:	sub	sp, sp, #44	; 0x2c
   12d04:	movlt	r7, #1
   12d08:	movge	r7, #0
   12d0c:	mov	r8, r0
   12d10:	str	r3, [sp, #36]	; 0x24
   12d14:	asr	r3, r1, #31
   12d18:	rsb	ip, r3, ip, asr #2
   12d1c:	subs	r2, ip, #0
   12d20:	add	r3, ip, ip, lsl #2
   12d24:	sub	r1, r1, r3, lsl #1
   12d28:	strb	r1, [sp, #4]
   12d2c:	beq	12dc8 <warn@@Base+0x293c>
   12d30:	add	r1, sp, #6
   12d34:	mov	r5, #1
   12d38:	smull	r3, r0, lr, r2
   12d3c:	asr	r3, r2, #31
   12d40:	mov	r4, r1
   12d44:	add	r5, r5, #1
   12d48:	add	r1, r1, #1
   12d4c:	rsb	r3, r3, r0, asr #2
   12d50:	add	ip, r3, r3, lsl #2
   12d54:	sub	ip, r2, ip, lsl #1
   12d58:	subs	r2, r3, #0
   12d5c:	strb	ip, [r4, #-1]
   12d60:	bne	12d38 <warn@@Base+0x28ac>
   12d64:	sub	r9, r5, #1
   12d68:	mov	r0, r8
   12d6c:	bl	11504 <warn@@Base+0x1078>
   12d70:	mov	r0, r5
   12d74:	mov	r1, #0
   12d78:	bl	10fd4 <warn@@Base+0xb48>
   12d7c:	cmp	r7, #0
   12d80:	add	ip, r9, #1
   12d84:	rsb	ip, r4, ip
   12d88:	movne	r3, #1
   12d8c:	str	r0, [r8]
   12d90:	ldr	r2, [r0, #24]
   12d94:	strne	r3, [r0]
   12d98:	mov	r3, r4
   12d9c:	ldrb	r1, [r3, #-1]!
   12da0:	add	r0, ip, r3
   12da4:	cmp	r0, #0
   12da8:	strb	r1, [r2], #1
   12dac:	bgt	12d9c <warn@@Base+0x2910>
   12db0:	ldr	r2, [sp, #36]	; 0x24
   12db4:	ldr	r3, [r6]
   12db8:	cmp	r2, r3
   12dbc:	bne	12dd8 <warn@@Base+0x294c>
   12dc0:	add	sp, sp, #44	; 0x2c
   12dc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12dc8:	add	r4, sp, #5
   12dcc:	mov	r9, ip
   12dd0:	mov	r5, #1
   12dd4:	b	12d68 <warn@@Base+0x28dc>
   12dd8:	bl	8e44 <__stack_chk_fail@plt>
   12ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12de0:	movw	r5, #5008	; 0x1390
   12de4:	movt	r5, #2
   12de8:	ldr	r8, [r0]
   12dec:	movw	r9, #4648	; 0x1228
   12df0:	movt	r9, #2
   12df4:	ldr	r4, [r5]
   12df8:	sub	sp, sp, #36	; 0x24
   12dfc:	ldr	r7, [r8]
   12e00:	mov	r6, r0
   12e04:	ldr	r2, [r9]
   12e08:	mov	fp, r1
   12e0c:	ldr	r3, [r4]
   12e10:	cmp	r7, r3
   12e14:	str	r2, [sp, #28]
   12e18:	beq	12fec <warn@@Base+0x2b60>
   12e1c:	cmp	r7, #0
   12e20:	bne	13004 <warn@@Base+0x2b78>
   12e24:	movw	sl, #5000	; 0x1388
   12e28:	movt	sl, #2
   12e2c:	ldr	r1, [sl]
   12e30:	ldr	r3, [r1]
   12e34:	cmp	r7, r3
   12e38:	beq	13084 <warn@@Base+0x2bf8>
   12e3c:	mov	r5, #1
   12e40:	ldr	r2, [r4, #12]
   12e44:	mov	r0, #1
   12e48:	ldr	r3, [r8, #8]
   12e4c:	mov	r1, r0
   12e50:	add	r2, r2, #3
   12e54:	str	r2, [r4, #12]
   12e58:	cmp	fp, r3
   12e5c:	movlt	fp, r3
   12e60:	str	r4, [sp, #12]
   12e64:	str	r4, [sp, #16]
   12e68:	str	r4, [sp, #24]
   12e6c:	bl	10fd4 <warn@@Base+0xb48>
   12e70:	cmp	r5, #0
   12e74:	mov	r2, #5
   12e78:	ldr	r3, [r0, #24]
   12e7c:	str	r0, [sp, #20]
   12e80:	strb	r2, [r3, #1]
   12e84:	blt	1305c <warn@@Base+0x2bd0>
   12e88:	add	r5, sp, #12
   12e8c:	mov	r1, #10
   12e90:	add	r7, sp, #16
   12e94:	mov	r4, #3
   12e98:	mov	r0, r5
   12e9c:	bl	12cdc <warn@@Base+0x2850>
   12ea0:	ldr	r3, [r6]
   12ea4:	mov	r0, r7
   12ea8:	ldr	r1, [r3, #4]
   12eac:	bl	12cdc <warn@@Base+0x2850>
   12eb0:	mov	r2, r7
   12eb4:	ldr	r0, [sp, #16]
   12eb8:	mov	r3, #0
   12ebc:	ldr	r1, [sp, #20]
   12ec0:	bl	11f28 <warn@@Base+0x1a9c>
   12ec4:	ldr	r1, [sp, #16]
   12ec8:	mov	ip, #0
   12ecc:	ldr	r0, [sp, #12]
   12ed0:	mov	r2, r5
   12ed4:	mov	r3, ip
   12ed8:	str	ip, [r1, #8]
   12edc:	bl	12ae4 <warn@@Base+0x2658>
   12ee0:	mov	r0, r7
   12ee4:	bl	11504 <warn@@Base+0x1078>
   12ee8:	add	r8, r4, #1
   12eec:	add	r3, fp, #1
   12ef0:	str	r3, [sp, #4]
   12ef4:	mov	r0, r7
   12ef8:	bl	11504 <warn@@Base+0x1078>
   12efc:	ldr	ip, [sp, #12]
   12f00:	ldr	r0, [r6]
   12f04:	mov	r2, r5
   12f08:	mov	r3, r4
   12f0c:	ldr	lr, [ip, #12]
   12f10:	mov	r1, ip
   12f14:	str	ip, [sp, #16]
   12f18:	add	lr, lr, #1
   12f1c:	str	lr, [ip, #12]
   12f20:	bl	12054 <warn@@Base+0x1bc8>
   12f24:	ldr	r0, [sp, #12]
   12f28:	ldr	r1, [sp, #16]
   12f2c:	mov	r2, r5
   12f30:	mov	r3, #0
   12f34:	bl	11e40 <warn@@Base+0x19b4>
   12f38:	ldr	r0, [sp, #12]
   12f3c:	ldr	r1, [sp, #20]
   12f40:	mov	r2, r5
   12f44:	mov	r3, r4
   12f48:	bl	11f28 <warn@@Base+0x1a9c>
   12f4c:	ldr	r0, [sp, #12]
   12f50:	ldr	r1, [sp, #16]
   12f54:	add	r2, sp, #24
   12f58:	mov	r3, r8
   12f5c:	bl	11724 <warn@@Base+0x1298>
   12f60:	ldr	r0, [sp, #24]
   12f64:	mov	r1, r4
   12f68:	bl	116a8 <warn@@Base+0x121c>
   12f6c:	cmp	r0, #0
   12f70:	beq	12ef4 <warn@@Base+0x2a68>
   12f74:	cmp	fp, r4
   12f78:	blt	12f94 <warn@@Base+0x2b08>
   12f7c:	ldr	r3, [sp, #4]
   12f80:	add	r4, r4, r4, lsl #1
   12f84:	cmp	r4, r3
   12f88:	movge	r4, r3
   12f8c:	add	r8, r4, #1
   12f90:	b	12ef4 <warn@@Base+0x2a68>
   12f94:	mov	r0, r6
   12f98:	bl	11504 <warn@@Base+0x1078>
   12f9c:	ldr	r1, [sl]
   12fa0:	mov	r2, r6
   12fa4:	mov	r3, fp
   12fa8:	ldr	r0, [sp, #12]
   12fac:	bl	12054 <warn@@Base+0x1bc8>
   12fb0:	mov	r0, r5
   12fb4:	bl	11504 <warn@@Base+0x1078>
   12fb8:	mov	r0, r7
   12fbc:	bl	11504 <warn@@Base+0x1078>
   12fc0:	add	r0, sp, #20
   12fc4:	bl	11504 <warn@@Base+0x1078>
   12fc8:	add	r0, sp, #24
   12fcc:	bl	11504 <warn@@Base+0x1078>
   12fd0:	mov	r0, #1
   12fd4:	ldr	r2, [sp, #28]
   12fd8:	ldr	r3, [r9]
   12fdc:	cmp	r2, r3
   12fe0:	bne	130a8 <warn@@Base+0x2c1c>
   12fe4:	add	sp, sp, #36	; 0x24
   12fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fec:	mov	r0, r8
   12ff0:	mov	r1, r4
   12ff4:	mov	r2, #1
   12ff8:	bl	10e6c <warn@@Base+0x9e0>
   12ffc:	cmp	r0, #0
   13000:	bge	1300c <warn@@Base+0x2b80>
   13004:	mov	r0, #0
   13008:	b	12fd4 <warn@@Base+0x2b48>
   1300c:	bne	13034 <warn@@Base+0x2ba8>
   13010:	mov	r0, r6
   13014:	bl	11504 <warn@@Base+0x1078>
   13018:	ldr	r3, [r5]
   1301c:	ldr	r2, [r3, #12]
   13020:	mov	r0, #1
   13024:	add	r2, r2, r0
   13028:	str	r2, [r3, #12]
   1302c:	str	r3, [r6]
   13030:	b	12fd4 <warn@@Base+0x2b48>
   13034:	movw	sl, #5000	; 0x1388
   13038:	movt	sl, #2
   1303c:	ldr	r1, [sl]
   13040:	ldr	r3, [r1]
   13044:	cmp	r7, r3
   13048:	beq	13084 <warn@@Base+0x2bf8>
   1304c:	cmp	r7, #0
   13050:	mvnne	r5, #0
   13054:	beq	12e3c <warn@@Base+0x29b0>
   13058:	b	12e40 <warn@@Base+0x29b4>
   1305c:	ldr	r2, [r6]
   13060:	add	r5, sp, #32
   13064:	ldr	r3, [sl]
   13068:	add	r7, sp, #16
   1306c:	ldr	r4, [r2, #8]
   13070:	ldr	r2, [r3, #12]
   13074:	str	r3, [r5, #-20]!	; 0xffffffec
   13078:	add	r2, r2, #1
   1307c:	str	r2, [r3, #12]
   13080:	b	12ee8 <warn@@Base+0x2a5c>
   13084:	mov	r0, r8
   13088:	mov	r2, #1
   1308c:	bl	10e6c <warn@@Base+0x9e0>
   13090:	subs	r5, r0, #0
   13094:	bne	12e40 <warn@@Base+0x29b4>
   13098:	mov	r0, r6
   1309c:	bl	11504 <warn@@Base+0x1078>
   130a0:	ldr	r3, [sl]
   130a4:	b	1301c <warn@@Base+0x2b90>
   130a8:	bl	8e44 <__stack_chk_fail@plt>
   130ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130b0:	movw	sl, #4648	; 0x1228
   130b4:	movt	sl, #2
   130b8:	mov	r9, r0
   130bc:	ldr	r0, [r0]
   130c0:	mov	r6, r2
   130c4:	ldr	r2, [sl]
   130c8:	sub	sp, sp, #52	; 0x34
   130cc:	cmp	r0, #1
   130d0:	mov	r8, r1
   130d4:	mov	r5, r3
   130d8:	str	r2, [sp, #44]	; 0x2c
   130dc:	beq	13460 <warn@@Base+0x2fd4>
   130e0:	mov	r0, r9
   130e4:	bl	1163c <warn@@Base+0x11b0>
   130e8:	subs	r4, r0, #0
   130ec:	bne	13438 <warn@@Base+0x2fac>
   130f0:	cmp	r8, #10
   130f4:	beq	133b4 <warn@@Base+0x2f28>
   130f8:	movw	r5, #5008	; 0x1390
   130fc:	movt	r5, #2
   13100:	add	r7, sp, #48	; 0x30
   13104:	movw	r0, #5000	; 0x1388
   13108:	ldr	ip, [r5]
   1310c:	movt	r0, #2
   13110:	mov	r3, r4
   13114:	str	r0, [sp, #8]
   13118:	ldr	r1, [r0]
   1311c:	mov	r0, r9
   13120:	ldr	lr, [ip, #12]
   13124:	str	ip, [r7, #-28]!	; 0xffffffe4
   13128:	mov	r2, r7
   1312c:	add	lr, lr, #1
   13130:	str	lr, [ip, #12]
   13134:	bl	12054 <warn@@Base+0x1bc8>
   13138:	ldr	ip, [r5]
   1313c:	add	r2, sp, #24
   13140:	mov	r0, r9
   13144:	ldr	r1, [sp, #20]
   13148:	mov	r3, r4
   1314c:	ldr	lr, [ip, #12]
   13150:	str	ip, [sp, #24]
   13154:	add	lr, lr, #3
   13158:	str	lr, [ip, #12]
   1315c:	str	ip, [sp, #32]
   13160:	str	ip, [sp, #28]
   13164:	bl	11724 <warn@@Base+0x1298>
   13168:	ldr	r2, [sp, #20]
   1316c:	mov	r1, r8
   13170:	ldr	r3, [sp, #24]
   13174:	add	r0, sp, #28
   13178:	str	r4, [r2]
   1317c:	add	r2, sp, #48	; 0x30
   13180:	str	r4, [r3]
   13184:	str	r2, [sp, #12]
   13188:	bl	12cdc <warn@@Base+0x2850>
   1318c:	ldr	r3, [r5]
   13190:	sub	r1, r8, #1
   13194:	ldr	r0, [sp, #12]
   13198:	ldr	r2, [r3, #12]
   1319c:	str	r3, [r0, #-8]!
   131a0:	add	r2, r2, #1
   131a4:	str	r2, [r3, #12]
   131a8:	str	r0, [sp, #12]
   131ac:	bl	12cdc <warn@@Base+0x2850>
   131b0:	b	13200 <warn@@Base+0x2d74>
   131b4:	ldr	r1, [sp, #28]
   131b8:	mov	r0, r5
   131bc:	str	r2, [sp]
   131c0:	add	r3, sp, #32
   131c4:	bl	12634 <warn@@Base+0x21a8>
   131c8:	mov	r0, #8
   131cc:	bl	8ea4 <malloc@plt>
   131d0:	subs	r5, r0, #0
   131d4:	beq	133ac <warn@@Base+0x2f20>
   131d8:	ldr	r0, [sp, #32]
   131dc:	bl	12a70 <warn@@Base+0x25e4>
   131e0:	str	r4, [r5, #4]
   131e4:	ldr	r1, [sp, #28]
   131e8:	mov	r2, r7
   131ec:	mov	r3, #0
   131f0:	mov	r4, r5
   131f4:	str	r0, [r5]
   131f8:	ldr	r0, [sp, #20]
   131fc:	bl	12054 <warn@@Base+0x1bc8>
   13200:	ldr	r5, [sp, #20]
   13204:	mov	r0, r5
   13208:	bl	1163c <warn@@Base+0x11b0>
   1320c:	subs	r2, r0, #0
   13210:	beq	131b4 <warn@@Base+0x2d28>
   13214:	cmp	r4, #0
   13218:	movwne	fp, #32628	; 0x7f74
   1321c:	movtne	fp, #1
   13220:	bne	13338 <warn@@Base+0x2eac>
   13224:	ldr	r3, [r9, #8]
   13228:	cmp	r3, #0
   1322c:	ble	1336c <warn@@Base+0x2ee0>
   13230:	mov	r0, #46	; 0x2e
   13234:	blx	r6
   13238:	ldr	r3, [sp, #8]
   1323c:	ldr	r2, [r3]
   13240:	ldr	r3, [r9, #8]
   13244:	ldr	r0, [r2, #4]
   13248:	ldr	r1, [r2, #12]
   1324c:	cmp	r0, r3
   13250:	str	r2, [sp, #36]	; 0x24
   13254:	add	r1, r1, #1
   13258:	str	r1, [r2, #12]
   1325c:	bgt	13480 <warn@@Base+0x2ff4>
   13260:	movw	ip, #32628	; 0x7f74
   13264:	movt	ip, #1
   13268:	add	r4, sp, #36	; 0x24
   1326c:	mov	r5, #0
   13270:	str	sl, [sp, #8]
   13274:	mov	fp, ip
   13278:	b	132b0 <warn@@Base+0x2e24>
   1327c:	add	ip, fp, sl
   13280:	ldrb	r0, [ip, #20]
   13284:	blx	r6
   13288:	mov	r2, r4
   1328c:	mov	r3, #0
   13290:	ldr	r0, [sp, #36]	; 0x24
   13294:	ldr	r1, [sp, #28]
   13298:	bl	11f28 <warn@@Base+0x1a9c>
   1329c:	ldr	r2, [sp, #36]	; 0x24
   132a0:	ldr	r3, [r9, #8]
   132a4:	ldr	r2, [r2, #4]
   132a8:	cmp	r2, r3
   132ac:	bgt	13360 <warn@@Base+0x2ed4>
   132b0:	add	r2, sp, #24
   132b4:	ldr	r1, [sp, #28]
   132b8:	ldr	r0, [sp, #24]
   132bc:	bl	11f28 <warn@@Base+0x1a9c>
   132c0:	ldr	r0, [sp, #24]
   132c4:	bl	12a70 <warn@@Base+0x25e4>
   132c8:	mov	sl, r0
   132cc:	mov	r0, r7
   132d0:	mov	r1, sl
   132d4:	bl	12cdc <warn@@Base+0x2850>
   132d8:	ldr	r0, [sp, #24]
   132dc:	ldr	r1, [sp, #20]
   132e0:	add	r2, sp, #24
   132e4:	mov	r3, #0
   132e8:	bl	11724 <warn@@Base+0x1298>
   132ec:	cmp	r8, #16
   132f0:	ble	1327c <warn@@Base+0x2df0>
   132f4:	ldr	r1, [sp, #40]	; 0x28
   132f8:	mov	r2, r5
   132fc:	mov	r0, sl
   13300:	mov	r3, r6
   13304:	mov	r5, #1
   13308:	ldr	r1, [r1, #4]
   1330c:	bl	129b8 <warn@@Base+0x252c>
   13310:	b	13288 <warn@@Base+0x2dfc>
   13314:	ldr	r3, [r4]
   13318:	add	r3, fp, r3
   1331c:	ldrb	r0, [r3, #20]
   13320:	blx	r6
   13324:	mov	r0, r4
   13328:	bl	8e08 <free@plt>
   1332c:	cmp	r5, #0
   13330:	beq	13224 <warn@@Base+0x2d98>
   13334:	mov	r4, r5
   13338:	cmp	r8, #16
   1333c:	ldr	r5, [r4, #4]
   13340:	ble	13314 <warn@@Base+0x2e88>
   13344:	ldr	r1, [sp, #40]	; 0x28
   13348:	mov	r2, #1
   1334c:	ldr	r0, [r4]
   13350:	mov	r3, r6
   13354:	ldr	r1, [r1, #4]
   13358:	bl	129b8 <warn@@Base+0x252c>
   1335c:	b	13324 <warn@@Base+0x2e98>
   13360:	ldr	sl, [sp, #8]
   13364:	mov	r0, r4
   13368:	bl	11504 <warn@@Base+0x1078>
   1336c:	mov	r0, r7
   13370:	bl	11504 <warn@@Base+0x1078>
   13374:	add	r0, sp, #24
   13378:	bl	11504 <warn@@Base+0x1078>
   1337c:	add	r0, sp, #28
   13380:	bl	11504 <warn@@Base+0x1078>
   13384:	add	r0, sp, #32
   13388:	bl	11504 <warn@@Base+0x1078>
   1338c:	ldr	r0, [sp, #12]
   13390:	bl	11504 <warn@@Base+0x1078>
   13394:	ldr	r2, [sp, #44]	; 0x2c
   13398:	ldr	r3, [sl]
   1339c:	cmp	r2, r3
   133a0:	bne	13488 <warn@@Base+0x2ffc>
   133a4:	add	sp, sp, #52	; 0x34
   133a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133ac:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   133b0:	b	131d8 <warn@@Base+0x2d4c>
   133b4:	ldr	r7, [r9, #4]
   133b8:	ldr	r4, [r9, #24]
   133bc:	cmp	r7, #1
   133c0:	ble	13444 <warn@@Base+0x2fb8>
   133c4:	add	r7, r4, r7
   133c8:	ldrb	r0, [r4], #1
   133cc:	add	r0, r0, #48	; 0x30
   133d0:	blx	r6
   133d4:	cmp	r4, r7
   133d8:	bne	133c8 <warn@@Base+0x2f3c>
   133dc:	cmp	r5, #0
   133e0:	beq	133f4 <warn@@Base+0x2f68>
   133e4:	mov	r0, r9
   133e8:	bl	1163c <warn@@Base+0x11b0>
   133ec:	cmp	r0, #0
   133f0:	bne	13474 <warn@@Base+0x2fe8>
   133f4:	ldr	r3, [r9, #8]
   133f8:	cmp	r3, #0
   133fc:	ble	13394 <warn@@Base+0x2f08>
   13400:	mov	r0, #46	; 0x2e
   13404:	blx	r6
   13408:	ldr	r3, [r9, #8]
   1340c:	cmp	r3, #0
   13410:	ble	13394 <warn@@Base+0x2f08>
   13414:	mov	r4, #0
   13418:	ldrb	r0, [r7, r4]
   1341c:	add	r4, r4, #1
   13420:	add	r0, r0, #48	; 0x30
   13424:	blx	r6
   13428:	ldr	r3, [r9, #8]
   1342c:	cmp	r3, r4
   13430:	bgt	13418 <warn@@Base+0x2f8c>
   13434:	b	13394 <warn@@Base+0x2f08>
   13438:	mov	r0, #48	; 0x30
   1343c:	blx	r6
   13440:	b	13394 <warn@@Base+0x2f08>
   13444:	ldrb	r3, [r4]
   13448:	cmp	r3, #0
   1344c:	beq	1346c <warn@@Base+0x2fe0>
   13450:	cmp	r7, #0
   13454:	movle	r7, r4
   13458:	ble	133dc <warn@@Base+0x2f50>
   1345c:	b	133c4 <warn@@Base+0x2f38>
   13460:	mov	r0, #45	; 0x2d
   13464:	blx	r6
   13468:	b	130e0 <warn@@Base+0x2c54>
   1346c:	add	r7, r4, #1
   13470:	b	133dc <warn@@Base+0x2f50>
   13474:	mov	r0, #48	; 0x30
   13478:	blx	r6
   1347c:	b	133f4 <warn@@Base+0x2f68>
   13480:	add	r4, sp, #36	; 0x24
   13484:	b	13364 <warn@@Base+0x2ed8>
   13488:	bl	8e44 <__stack_chk_fail@plt>
   1348c:	push	{r4, r5, r6, lr}
   13490:	mov	r4, r0
   13494:	ldr	r5, [r0]
   13498:	sub	sp, sp, #8
   1349c:	ldr	r3, [r0, #8]
   134a0:	adds	r5, r5, #0
   134a4:	ldr	r0, [r0, #4]
   134a8:	movne	r5, #1
   134ac:	cmp	r3, #0
   134b0:	addgt	r3, r3, r0
   134b4:	addle	r0, r0, #1
   134b8:	addgt	r0, r3, #2
   134bc:	add	r0, r0, r5
   134c0:	bl	8ea4 <malloc@plt>
   134c4:	cmp	r0, #0
   134c8:	beq	13570 <warn@@Base+0x30e4>
   134cc:	cmp	r5, #0
   134d0:	addne	r3, r0, #1
   134d4:	movne	r2, #45	; 0x2d
   134d8:	strbne	r2, [r0]
   134dc:	ldr	r6, [r4, #4]
   134e0:	moveq	r3, r0
   134e4:	ldr	r5, [r4, #24]
   134e8:	cmp	r6, #0
   134ec:	ble	13568 <warn@@Base+0x30dc>
   134f0:	add	ip, r3, r6
   134f4:	mov	r2, r5
   134f8:	ldrb	r1, [r2], #1
   134fc:	add	r1, r1, #48	; 0x30
   13500:	strb	r1, [r3], #1
   13504:	cmp	r3, ip
   13508:	bne	134f8 <warn@@Base+0x306c>
   1350c:	add	r5, r5, r6
   13510:	ldr	r3, [r4, #8]
   13514:	cmp	r3, #0
   13518:	movle	r2, ip
   1351c:	ble	13558 <warn@@Base+0x30cc>
   13520:	mov	r3, #46	; 0x2e
   13524:	strb	r3, [ip]
   13528:	ldr	r3, [r4, #8]
   1352c:	add	r2, ip, #1
   13530:	cmp	r3, #0
   13534:	ble	13558 <warn@@Base+0x30cc>
   13538:	mov	r3, r5
   1353c:	ldrb	r1, [r3], #1
   13540:	add	r1, r1, #48	; 0x30
   13544:	strb	r1, [r2], #1
   13548:	ldr	r1, [r4, #8]
   1354c:	rsb	ip, r5, r3
   13550:	cmp	ip, r1
   13554:	blt	1353c <warn@@Base+0x30b0>
   13558:	mov	r3, #0
   1355c:	strb	r3, [r2]
   13560:	add	sp, sp, #8
   13564:	pop	{r4, r5, r6, pc}
   13568:	mov	ip, r3
   1356c:	b	13510 <warn@@Base+0x3084>
   13570:	str	r0, [sp, #4]
   13574:	bl	ffc8 <__assert_fail@plt+0x6ff8>
   13578:	ldr	r0, [sp, #4]
   1357c:	b	134cc <warn@@Base+0x3040>
   13580:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13584:	mov	r6, r1
   13588:	mov	r8, r2
   1358c:	mov	r7, r0
   13590:	bl	11504 <warn@@Base+0x1078>
   13594:	ldrb	r4, [r6]
   13598:	cmp	r4, #43	; 0x2b
   1359c:	cmpne	r4, #45	; 0x2d
   135a0:	addeq	r5, r6, #1
   135a4:	ldrbeq	r4, [r6, #1]
   135a8:	movne	r5, r6
   135ac:	cmp	r4, #48	; 0x30
   135b0:	bne	135c8 <warn@@Base+0x313c>
   135b4:	add	r3, r5, #1
   135b8:	mov	r5, r3
   135bc:	ldrb	r4, [r3], #1
   135c0:	cmp	r4, #48	; 0x30
   135c4:	beq	135b8 <warn@@Base+0x312c>
   135c8:	bl	8ee0 <__ctype_b_loc@plt>
   135cc:	mov	r3, r5
   135d0:	ldr	r1, [r0]
   135d4:	b	135dc <warn@@Base+0x3150>
   135d8:	ldrb	r4, [r3, #1]!
   135dc:	lsl	r2, r4, #1
   135e0:	rsb	r9, r5, r3
   135e4:	ldrh	r2, [r1, r2]
   135e8:	and	r2, r2, #2048	; 0x800
   135ec:	uxth	r2, r2
   135f0:	cmp	r2, #0
   135f4:	bne	135d8 <warn@@Base+0x314c>
   135f8:	cmp	r4, #46	; 0x2e
   135fc:	beq	136dc <warn@@Base+0x3250>
   13600:	cmp	r4, #0
   13604:	bne	136bc <warn@@Base+0x3230>
   13608:	add	r3, r9, r2
   1360c:	cmp	r3, #0
   13610:	beq	136bc <warn@@Base+0x3230>
   13614:	cmp	r8, r2
   13618:	movge	r8, r2
   1361c:	cmp	r9, #0
   13620:	moveq	r9, #1
   13624:	mov	r1, r8
   13628:	mov	r0, r9
   1362c:	moveq	r4, r9
   13630:	bl	10fd4 <warn@@Base+0xb48>
   13634:	str	r0, [r7]
   13638:	ldrb	r3, [r6]
   1363c:	cmp	r3, #45	; 0x2d
   13640:	beq	13718 <warn@@Base+0x328c>
   13644:	mov	r3, #0
   13648:	str	r3, [r0]
   1364c:	ldrb	r3, [r6]
   13650:	cmp	r3, #43	; 0x2b
   13654:	beq	13720 <warn@@Base+0x3294>
   13658:	cmp	r3, #48	; 0x30
   1365c:	addeq	r3, r6, #1
   13660:	bne	13678 <warn@@Base+0x31ec>
   13664:	mov	r6, r3
   13668:	add	r3, r3, #1
   1366c:	ldrb	ip, [r6]
   13670:	cmp	ip, #48	; 0x30
   13674:	beq	13664 <warn@@Base+0x31d8>
   13678:	cmp	r4, #0
   1367c:	ldr	r2, [r0, #24]
   13680:	beq	1372c <warn@@Base+0x32a0>
   13684:	cmp	r8, #0
   13688:	mov	r3, #0
   1368c:	mov	r1, r6
   13690:	add	r9, r2, #1
   13694:	strb	r3, [r2]
   13698:	pople	{r3, r4, r5, r6, r7, r8, r9, pc}
   1369c:	add	r8, r9, r8
   136a0:	mov	r3, r1
   136a4:	ldrb	r1, [r3, #1]!
   136a8:	sub	r1, r1, #48	; 0x30
   136ac:	strb	r1, [r9], #1
   136b0:	cmp	r9, r8
   136b4:	bne	136a4 <warn@@Base+0x3218>
   136b8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   136bc:	movw	r3, #5008	; 0x1390
   136c0:	movt	r3, #2
   136c4:	ldr	r3, [r3]
   136c8:	ldr	r2, [r3, #12]
   136cc:	add	r2, r2, #1
   136d0:	str	r2, [r3, #12]
   136d4:	str	r3, [r7]
   136d8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   136dc:	ldrb	r4, [r3, #1]
   136e0:	add	ip, r3, #1
   136e4:	lsl	r2, r4, #1
   136e8:	ldrh	r2, [r1, r2]
   136ec:	and	r2, r2, #2048	; 0x800
   136f0:	uxth	r2, r2
   136f4:	cmp	r2, #0
   136f8:	beq	13600 <warn@@Base+0x3174>
   136fc:	rsb	r2, r3, ip
   13700:	ldrb	r4, [ip, #1]!
   13704:	lsl	r0, r4, #1
   13708:	ldrh	r0, [r1, r0]
   1370c:	tst	r0, #2048	; 0x800
   13710:	bne	136fc <warn@@Base+0x3270>
   13714:	b	13600 <warn@@Base+0x3174>
   13718:	mov	r3, #1
   1371c:	str	r3, [r0]
   13720:	ldrb	r3, [r6, #1]
   13724:	add	r6, r6, #1
   13728:	b	13658 <warn@@Base+0x31cc>
   1372c:	add	r1, r6, r9
   13730:	mov	r3, r2
   13734:	ldrb	r0, [r6], #1
   13738:	cmp	r6, r1
   1373c:	sub	r0, r0, #48	; 0x30
   13740:	strb	r0, [r3], #1
   13744:	bne	13734 <warn@@Base+0x32a8>
   13748:	cmp	r8, #0
   1374c:	add	r9, r2, r9
   13750:	bgt	1369c <warn@@Base+0x3210>
   13754:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13758:	cmp	r1, #0
   1375c:	beq	13968 <warn@@Base+0x34dc>
   13760:	eor	ip, r0, r1
   13764:	rsbmi	r1, r1, #0
   13768:	subs	r2, r1, #1
   1376c:	beq	13934 <warn@@Base+0x34a8>
   13770:	movs	r3, r0
   13774:	rsbmi	r3, r0, #0
   13778:	cmp	r3, r1
   1377c:	bls	13940 <warn@@Base+0x34b4>
   13780:	tst	r1, r2
   13784:	beq	13950 <warn@@Base+0x34c4>
   13788:	clz	r2, r3
   1378c:	clz	r0, r1
   13790:	sub	r2, r0, r2
   13794:	rsbs	r2, r2, #31
   13798:	addne	r2, r2, r2, lsl #1
   1379c:	mov	r0, #0
   137a0:	addne	pc, pc, r2, lsl #2
   137a4:	nop	{0}
   137a8:	cmp	r3, r1, lsl #31
   137ac:	adc	r0, r0, r0
   137b0:	subcs	r3, r3, r1, lsl #31
   137b4:	cmp	r3, r1, lsl #30
   137b8:	adc	r0, r0, r0
   137bc:	subcs	r3, r3, r1, lsl #30
   137c0:	cmp	r3, r1, lsl #29
   137c4:	adc	r0, r0, r0
   137c8:	subcs	r3, r3, r1, lsl #29
   137cc:	cmp	r3, r1, lsl #28
   137d0:	adc	r0, r0, r0
   137d4:	subcs	r3, r3, r1, lsl #28
   137d8:	cmp	r3, r1, lsl #27
   137dc:	adc	r0, r0, r0
   137e0:	subcs	r3, r3, r1, lsl #27
   137e4:	cmp	r3, r1, lsl #26
   137e8:	adc	r0, r0, r0
   137ec:	subcs	r3, r3, r1, lsl #26
   137f0:	cmp	r3, r1, lsl #25
   137f4:	adc	r0, r0, r0
   137f8:	subcs	r3, r3, r1, lsl #25
   137fc:	cmp	r3, r1, lsl #24
   13800:	adc	r0, r0, r0
   13804:	subcs	r3, r3, r1, lsl #24
   13808:	cmp	r3, r1, lsl #23
   1380c:	adc	r0, r0, r0
   13810:	subcs	r3, r3, r1, lsl #23
   13814:	cmp	r3, r1, lsl #22
   13818:	adc	r0, r0, r0
   1381c:	subcs	r3, r3, r1, lsl #22
   13820:	cmp	r3, r1, lsl #21
   13824:	adc	r0, r0, r0
   13828:	subcs	r3, r3, r1, lsl #21
   1382c:	cmp	r3, r1, lsl #20
   13830:	adc	r0, r0, r0
   13834:	subcs	r3, r3, r1, lsl #20
   13838:	cmp	r3, r1, lsl #19
   1383c:	adc	r0, r0, r0
   13840:	subcs	r3, r3, r1, lsl #19
   13844:	cmp	r3, r1, lsl #18
   13848:	adc	r0, r0, r0
   1384c:	subcs	r3, r3, r1, lsl #18
   13850:	cmp	r3, r1, lsl #17
   13854:	adc	r0, r0, r0
   13858:	subcs	r3, r3, r1, lsl #17
   1385c:	cmp	r3, r1, lsl #16
   13860:	adc	r0, r0, r0
   13864:	subcs	r3, r3, r1, lsl #16
   13868:	cmp	r3, r1, lsl #15
   1386c:	adc	r0, r0, r0
   13870:	subcs	r3, r3, r1, lsl #15
   13874:	cmp	r3, r1, lsl #14
   13878:	adc	r0, r0, r0
   1387c:	subcs	r3, r3, r1, lsl #14
   13880:	cmp	r3, r1, lsl #13
   13884:	adc	r0, r0, r0
   13888:	subcs	r3, r3, r1, lsl #13
   1388c:	cmp	r3, r1, lsl #12
   13890:	adc	r0, r0, r0
   13894:	subcs	r3, r3, r1, lsl #12
   13898:	cmp	r3, r1, lsl #11
   1389c:	adc	r0, r0, r0
   138a0:	subcs	r3, r3, r1, lsl #11
   138a4:	cmp	r3, r1, lsl #10
   138a8:	adc	r0, r0, r0
   138ac:	subcs	r3, r3, r1, lsl #10
   138b0:	cmp	r3, r1, lsl #9
   138b4:	adc	r0, r0, r0
   138b8:	subcs	r3, r3, r1, lsl #9
   138bc:	cmp	r3, r1, lsl #8
   138c0:	adc	r0, r0, r0
   138c4:	subcs	r3, r3, r1, lsl #8
   138c8:	cmp	r3, r1, lsl #7
   138cc:	adc	r0, r0, r0
   138d0:	subcs	r3, r3, r1, lsl #7
   138d4:	cmp	r3, r1, lsl #6
   138d8:	adc	r0, r0, r0
   138dc:	subcs	r3, r3, r1, lsl #6
   138e0:	cmp	r3, r1, lsl #5
   138e4:	adc	r0, r0, r0
   138e8:	subcs	r3, r3, r1, lsl #5
   138ec:	cmp	r3, r1, lsl #4
   138f0:	adc	r0, r0, r0
   138f4:	subcs	r3, r3, r1, lsl #4
   138f8:	cmp	r3, r1, lsl #3
   138fc:	adc	r0, r0, r0
   13900:	subcs	r3, r3, r1, lsl #3
   13904:	cmp	r3, r1, lsl #2
   13908:	adc	r0, r0, r0
   1390c:	subcs	r3, r3, r1, lsl #2
   13910:	cmp	r3, r1, lsl #1
   13914:	adc	r0, r0, r0
   13918:	subcs	r3, r3, r1, lsl #1
   1391c:	cmp	r3, r1
   13920:	adc	r0, r0, r0
   13924:	subcs	r3, r3, r1
   13928:	cmp	ip, #0
   1392c:	rsbmi	r0, r0, #0
   13930:	bx	lr
   13934:	teq	ip, r0
   13938:	rsbmi	r0, r0, #0
   1393c:	bx	lr
   13940:	movcc	r0, #0
   13944:	asreq	r0, ip, #31
   13948:	orreq	r0, r0, #1
   1394c:	bx	lr
   13950:	clz	r2, r1
   13954:	rsb	r2, r2, #31
   13958:	cmp	ip, #0
   1395c:	lsr	r0, r3, r2
   13960:	rsbmi	r0, r0, #0
   13964:	bx	lr
   13968:	cmp	r0, #0
   1396c:	mvngt	r0, #-2147483648	; 0x80000000
   13970:	movlt	r0, #-2147483648	; 0x80000000
   13974:	b	13998 <warn@@Base+0x350c>
   13978:	cmp	r1, #0
   1397c:	beq	13968 <warn@@Base+0x34dc>
   13980:	push	{r0, r1, lr}
   13984:	bl	13760 <warn@@Base+0x32d4>
   13988:	pop	{r1, r2, lr}
   1398c:	mul	r3, r2, r0
   13990:	sub	r1, r1, r3
   13994:	bx	lr
   13998:	push	{r1, lr}
   1399c:	mov	r0, #8
   139a0:	bl	8db4 <raise@plt>
   139a4:	pop	{r1, pc}
   139a8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   139ac:	mov	r7, r0
   139b0:	ldr	r6, [pc, #76]	; 13a04 <warn@@Base+0x3578>
   139b4:	mov	r8, r1
   139b8:	ldr	r5, [pc, #72]	; 13a08 <warn@@Base+0x357c>
   139bc:	mov	r9, r2
   139c0:	add	r6, pc, r6
   139c4:	bl	8d94 <_init@@Base>
   139c8:	add	r5, pc, r5
   139cc:	rsb	r6, r5, r6
   139d0:	asrs	r6, r6, #2
   139d4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   139d8:	sub	r5, r5, #4
   139dc:	mov	r4, #0
   139e0:	add	r4, r4, #1
   139e4:	ldr	r3, [r5, #4]!
   139e8:	mov	r0, r7
   139ec:	mov	r1, r8
   139f0:	mov	r2, r9
   139f4:	blx	r3
   139f8:	cmp	r4, r6
   139fc:	bne	139e0 <warn@@Base+0x3554>
   13a00:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13a04:	andeq	sp, r0, r0, lsr #10
   13a08:	andeq	sp, r0, r4, lsl r5
   13a0c:	bx	lr

Disassembly of section .fini:

00013a10 <_fini@@Base>:
   13a10:	push	{r3, lr}
   13a14:	pop	{r3, pc}
