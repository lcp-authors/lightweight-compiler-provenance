
centos-preinstalled/usleep:     file format elf32-littlearm


Disassembly of section .init:

00000754 <_init@@Base>:
 754:	push	{r3, lr}
 758:	bl	ac0 <main@@Base+0x28c>
 75c:	pop	{r3, pc}

Disassembly of section .plt:

00000760 <poptSetOtherOptionHelp@plt-0x14>:
 760:	push	{lr}		; (str lr, [sp, #-4]!)
 764:	ldr	lr, [pc, #4]	; 770 <_init@@Base+0x1c>
 768:	add	lr, pc, lr
 76c:	ldr	pc, [lr, #8]!
 770:	andeq	r0, r1, r8, lsl r8

00000774 <poptSetOtherOptionHelp@plt>:
 774:	add	ip, pc, #0, 12
 778:	add	ip, ip, #16, 20	; 0x10000
 77c:	ldr	pc, [ip, #2072]!	; 0x818

00000780 <__cxa_finalize@plt>:
 780:	add	ip, pc, #0, 12
 784:	add	ip, ip, #16, 20	; 0x10000
 788:	ldr	pc, [ip, #2064]!	; 0x810

0000078c <poptGetContext@plt>:
 78c:	add	ip, pc, #0, 12
 790:	add	ip, ip, #16, 20	; 0x10000
 794:	ldr	pc, [ip, #2056]!	; 0x808

00000798 <poptStrerror@plt>:
 798:	add	ip, pc, #0, 12
 79c:	add	ip, ip, #16, 20	; 0x10000
 7a0:	ldr	pc, [ip, #2048]!	; 0x800

000007a4 <__stack_chk_fail@plt>:
 7a4:	add	ip, pc, #0, 12
 7a8:	add	ip, ip, #16, 20	; 0x10000
 7ac:	ldr	pc, [ip, #2040]!	; 0x7f8

000007b0 <poptBadOption@plt>:
 7b0:	add	ip, pc, #0, 12
 7b4:	add	ip, ip, #16, 20	; 0x10000
 7b8:	ldr	pc, [ip, #2032]!	; 0x7f0

000007bc <usleep@plt>:
 7bc:	add	ip, pc, #0, 12
 7c0:	add	ip, ip, #16, 20	; 0x10000
 7c4:	ldr	pc, [ip, #2024]!	; 0x7e8

000007c8 <puts@plt>:
 7c8:	add	ip, pc, #0, 12
 7cc:	add	ip, ip, #16, 20	; 0x10000
 7d0:	ldr	pc, [ip, #2016]!	; 0x7e0

000007d4 <__libc_start_main@plt>:
 7d4:	add	ip, pc, #0, 12
 7d8:	add	ip, ip, #16, 20	; 0x10000
 7dc:	ldr	pc, [ip, #2008]!	; 0x7d8

000007e0 <__gmon_start__@plt>:
 7e0:	add	ip, pc, #0, 12
 7e4:	add	ip, ip, #16, 20	; 0x10000
 7e8:	ldr	pc, [ip, #2000]!	; 0x7d0

000007ec <strtoul@plt>:
 7ec:	add	ip, pc, #0, 12
 7f0:	add	ip, ip, #16, 20	; 0x10000
 7f4:	ldr	pc, [ip, #1992]!	; 0x7c8

000007f8 <memset@plt>:
 7f8:	add	ip, pc, #0, 12
 7fc:	add	ip, ip, #16, 20	; 0x10000
 800:	ldr	pc, [ip, #1984]!	; 0x7c0

00000804 <__fprintf_chk@plt>:
 804:	add	ip, pc, #0, 12
 808:	add	ip, ip, #16, 20	; 0x10000
 80c:	ldr	pc, [ip, #1976]!	; 0x7b8

00000810 <poptGetArg@plt>:
 810:	add	ip, pc, #0, 12
 814:	add	ip, ip, #16, 20	; 0x10000
 818:	ldr	pc, [ip, #1968]!	; 0x7b0

0000081c <poptGetNextOpt@plt>:
 81c:	add	ip, pc, #0, 12
 820:	add	ip, ip, #16, 20	; 0x10000
 824:	ldr	pc, [ip, #1960]!	; 0x7a8

00000828 <abort@plt>:
 828:	add	ip, pc, #0, 12
 82c:	add	ip, ip, #16, 20	; 0x10000
 830:	ldr	pc, [ip, #1952]!	; 0x7a0

Disassembly of section .text:

00000834 <main@@Base>:
 834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 838:	sub	sp, sp, #140	; 0x8c
 83c:	ldr	r5, [pc, #492]	; a30 <main@@Base+0x1fc>
 840:	add	r7, sp, #20
 844:	ldr	r3, [pc, #488]	; a34 <main@@Base+0x200>
 848:	mov	r4, #0
 84c:	add	r5, pc, r5
 850:	mov	sl, r0
 854:	mov	r8, r1
 858:	mov	r0, r7
 85c:	ldr	r6, [r5, r3]
 860:	mov	r1, r4
 864:	mov	r2, #112	; 0x70
 868:	str	r4, [sp, #12]
 86c:	str	r4, [sp, #16]
 870:	mov	fp, #118	; 0x76
 874:	ldr	r3, [r6]
 878:	ldr	r9, [pc, #440]	; a38 <main@@Base+0x204>
 87c:	str	r3, [sp, #132]	; 0x84
 880:	bl	7f8 <memset@plt>
 884:	ldr	r0, [pc, #432]	; a3c <main@@Base+0x208>
 888:	mov	lr, #111	; 0x6f
 88c:	ldr	ip, [pc, #428]	; a40 <main@@Base+0x20c>
 890:	add	r9, pc, r9
 894:	ldr	r2, [pc, #424]	; a44 <main@@Base+0x210>
 898:	mov	r1, sl
 89c:	ldr	r3, [pc, #420]	; a48 <main@@Base+0x214>
 8a0:	add	ip, pc, ip
 8a4:	strb	lr, [sp, #52]	; 0x34
 8a8:	add	r2, pc, r2
 8ac:	str	ip, [sp, #20]
 8b0:	add	r3, pc, r3
 8b4:	str	r2, [sp, #40]	; 0x28
 8b8:	mov	ip, #4
 8bc:	str	r3, [sp, #48]	; 0x30
 8c0:	add	lr, sp, #16
 8c4:	mov	r3, r7
 8c8:	str	ip, [sp, #84]	; 0x54
 8cc:	str	r9, [sp, #68]	; 0x44
 8d0:	add	r7, sp, #12
 8d4:	strb	fp, [sp, #24]
 8d8:	mov	r2, r8
 8dc:	str	r7, [sp, #32]
 8e0:	str	lr, [sp, #60]	; 0x3c
 8e4:	ldr	lr, [r5, r0]
 8e8:	ldr	r0, [pc, #348]	; a4c <main@@Base+0x218>
 8ec:	ldr	ip, [pc, #348]	; a50 <main@@Base+0x21c>
 8f0:	add	r0, pc, r0
 8f4:	str	r4, [sp]
 8f8:	add	ip, pc, ip
 8fc:	str	lr, [sp, #88]	; 0x58
 900:	str	ip, [sp, #96]	; 0x60
 904:	bl	78c <poptGetContext@plt>
 908:	ldr	r1, [pc, #324]	; a54 <main@@Base+0x220>
 90c:	add	r1, pc, r1
 910:	mov	r7, r0
 914:	bl	774 <poptSetOtherOptionHelp@plt>
 918:	mov	r0, r7
 91c:	bl	81c <poptGetNextOpt@plt>
 920:	cmn	r0, #1
 924:	mov	sl, r0
 928:	blt	9b0 <main@@Base+0x17c>
 92c:	ldr	sl, [sp, #12]
 930:	cmp	sl, #0
 934:	bne	9f8 <main@@Base+0x1c4>
 938:	ldr	r3, [sp, #16]
 93c:	cmp	r3, #0
 940:	bne	9a0 <main@@Base+0x16c>
 944:	mov	r0, r7
 948:	bl	810 <poptGetArg@plt>
 94c:	subs	r4, r0, #0
 950:	beq	a24 <main@@Base+0x1f0>
 954:	mov	r0, r7
 958:	bl	810 <poptGetArg@plt>
 95c:	subs	r1, r0, #0
 960:	beq	a0c <main@@Base+0x1d8>
 964:	ldr	r0, [pc, #236]	; a58 <main@@Base+0x224>
 968:	mov	r1, #1
 96c:	ldr	r2, [pc, #232]	; a5c <main@@Base+0x228>
 970:	ldr	r3, [r8]
 974:	ldr	r0, [r5, r0]
 978:	add	r2, pc, r2
 97c:	ldr	r0, [r0]
 980:	bl	804 <__fprintf_chk@plt>
 984:	mov	r0, #2
 988:	ldr	r2, [sp, #132]	; 0x84
 98c:	ldr	r3, [r6]
 990:	cmp	r2, r3
 994:	bne	a2c <main@@Base+0x1f8>
 998:	add	sp, sp, #140	; 0x8c
 99c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 9a0:	mov	r0, r9
 9a4:	bl	7c8 <puts@plt>
 9a8:	mov	r0, sl
 9ac:	b	988 <main@@Base+0x154>
 9b0:	ldr	r3, [pc, #160]	; a58 <main@@Base+0x224>
 9b4:	mov	r1, #1
 9b8:	mov	r0, r7
 9bc:	ldr	r3, [r5, r3]
 9c0:	ldr	r4, [r3]
 9c4:	bl	7b0 <poptBadOption@plt>
 9c8:	mov	r5, r0
 9cc:	mov	r0, sl
 9d0:	bl	798 <poptStrerror@plt>
 9d4:	ldr	r2, [pc, #132]	; a60 <main@@Base+0x22c>
 9d8:	mov	r3, r5
 9dc:	mov	r1, #1
 9e0:	add	r2, pc, r2
 9e4:	str	r0, [sp]
 9e8:	mov	r0, r4
 9ec:	bl	804 <__fprintf_chk@plt>
 9f0:	mov	r0, #2
 9f4:	b	988 <main@@Base+0x154>
 9f8:	ldr	r0, [pc, #100]	; a64 <main@@Base+0x230>
 9fc:	add	r0, pc, r0
 a00:	bl	7c8 <puts@plt>
 a04:	mov	r0, r4
 a08:	b	988 <main@@Base+0x154>
 a0c:	mov	r0, r4
 a10:	mov	r2, r1
 a14:	bl	7ec <strtoul@plt>
 a18:	bl	7bc <usleep@plt>
 a1c:	mov	r0, #0
 a20:	b	988 <main@@Base+0x154>
 a24:	mov	r0, #1
 a28:	b	a18 <main@@Base+0x1e4>
 a2c:	bl	7a4 <__stack_chk_fail@plt>
 a30:	andeq	r0, r1, r4, lsr r7
 a34:	andeq	r0, r0, r8, asr r0
 a38:	andeq	r0, r0, ip, asr r4
 a3c:	andeq	r0, r0, r8, rrx
 a40:	andeq	r0, r0, r0, lsl r4
 a44:	andeq	r0, r0, r0, lsl r4
 a48:	andeq	r0, r0, r8, lsr r4
 a4c:	andeq	r0, r0, ip, lsl r4
 a50:	andeq	r0, r0, r4, lsl #8
 a54:	andeq	r0, r0, r8, lsl #8
 a58:	andeq	r0, r0, ip, asr r0
 a5c:	strdeq	r0, [r0], -ip
 a60:	andeq	r0, r0, r4, asr #6
 a64:	andeq	r0, r0, r8, asr #6
 a68:	mov	fp, #0
 a6c:	mov	lr, #0
 a70:	pop	{r1}		; (ldr r1, [sp], #4)
 a74:	mov	r2, sp
 a78:	push	{r2}		; (str r2, [sp, #-4]!)
 a7c:	push	{r0}		; (str r0, [sp, #-4]!)
 a80:	ldr	sl, [pc, #40]	; ab0 <main@@Base+0x27c>
 a84:	add	r3, pc, #36	; 0x24
 a88:	add	sl, sl, r3
 a8c:	ldr	ip, [pc, #32]	; ab4 <main@@Base+0x280>
 a90:	ldr	ip, [sl, ip]
 a94:	push	{ip}		; (str ip, [sp, #-4]!)
 a98:	ldr	r3, [pc, #24]	; ab8 <main@@Base+0x284>
 a9c:	ldr	r3, [sl, r3]
 aa0:	ldr	r0, [pc, #20]	; abc <main@@Base+0x288>
 aa4:	ldr	r0, [sl, r0]
 aa8:	bl	7d4 <__libc_start_main@plt>
 aac:	bl	828 <abort@plt>
 ab0:	ldrdeq	r0, [r1], -r8
 ab4:	andeq	r0, r0, ip, asr #32
 ab8:	andeq	r0, r0, r4, rrx
 abc:	andeq	r0, r0, ip, rrx
 ac0:	ldr	r3, [pc, #20]	; adc <main@@Base+0x2a8>
 ac4:	ldr	r2, [pc, #20]	; ae0 <main@@Base+0x2ac>
 ac8:	add	r3, pc, r3
 acc:	ldr	r2, [r3, r2]
 ad0:	cmp	r2, #0
 ad4:	bxeq	lr
 ad8:	b	7e0 <__gmon_start__@plt>
 adc:			; <UNDEFINED> instruction: 0x000104b8
 ae0:	andeq	r0, r0, r0, rrx
 ae4:	ldr	r2, [pc, #60]	; b28 <main@@Base+0x2f4>
 ae8:	ldr	r0, [pc, #60]	; b2c <main@@Base+0x2f8>
 aec:	add	r2, pc, r2
 af0:	add	r0, pc, r0
 af4:	add	r2, r2, #3
 af8:	rsb	r2, r0, r2
 afc:	push	{r3, lr}
 b00:	cmp	r2, #6
 b04:	ldr	r3, [pc, #36]	; b30 <main@@Base+0x2fc>
 b08:	add	r3, pc, r3
 b0c:	popls	{r3, pc}
 b10:	ldr	r2, [pc, #28]	; b34 <main@@Base+0x300>
 b14:	ldr	r3, [r3, r2]
 b18:	cmp	r3, #0
 b1c:	popeq	{r3, pc}
 b20:	blx	r3
 b24:	pop	{r3, pc}
 b28:	andeq	r0, r1, r0, lsl r5
 b2c:	andeq	r0, r1, ip, lsl #10
 b30:	andeq	r0, r1, r8, ror r4
 b34:	andeq	r0, r0, r4, asr r0
 b38:	push	{r3, lr}
 b3c:	ldr	r0, [pc, #64]	; b84 <main@@Base+0x350>
 b40:	ldr	r3, [pc, #64]	; b88 <main@@Base+0x354>
 b44:	add	r0, pc, r0
 b48:	ldr	r2, [pc, #60]	; b8c <main@@Base+0x358>
 b4c:	add	r3, pc, r3
 b50:	rsb	r3, r0, r3
 b54:	add	r2, pc, r2
 b58:	asr	r3, r3, #2
 b5c:	add	r3, r3, r3, lsr #31
 b60:	asrs	r3, r3, #1
 b64:	popeq	{r3, pc}
 b68:	ldr	r1, [pc, #32]	; b90 <main@@Base+0x35c>
 b6c:	ldr	r2, [r2, r1]
 b70:	cmp	r2, #0
 b74:	popeq	{r3, pc}
 b78:	mov	r1, r3
 b7c:	blx	r2
 b80:	pop	{r3, pc}
 b84:			; <UNDEFINED> instruction: 0x000104b8
 b88:			; <UNDEFINED> instruction: 0x000104b0
 b8c:	andeq	r0, r1, ip, lsr #8
 b90:	andeq	r0, r0, r4, ror r0
 b94:	ldr	r2, [pc, #76]	; be8 <main@@Base+0x3b4>
 b98:	push	{r3, lr}
 b9c:	add	r2, pc, r2
 ba0:	ldr	r3, [pc, #68]	; bec <main@@Base+0x3b8>
 ba4:	ldrb	r2, [r2]
 ba8:	add	r3, pc, r3
 bac:	cmp	r2, #0
 bb0:	popne	{r3, pc}
 bb4:	ldr	r2, [pc, #52]	; bf0 <main@@Base+0x3bc>
 bb8:	ldr	r3, [r3, r2]
 bbc:	cmp	r3, #0
 bc0:	beq	bd0 <main@@Base+0x39c>
 bc4:	ldr	r0, [pc, #40]	; bf4 <main@@Base+0x3c0>
 bc8:	add	r0, pc, r0
 bcc:	bl	780 <__cxa_finalize@plt>
 bd0:	bl	ae4 <main@@Base+0x2b0>
 bd4:	ldr	r3, [pc, #28]	; bf8 <main@@Base+0x3c4>
 bd8:	mov	r2, #1
 bdc:	add	r3, pc, r3
 be0:	strb	r2, [r3]
 be4:	pop	{r3, pc}
 be8:	andeq	r0, r1, r0, ror #8
 bec:	ldrdeq	r0, [r1], -r8
 bf0:	andeq	r0, r0, r0, asr r0
 bf4:	andeq	r0, r1, r4, lsr #5
 bf8:	andeq	r0, r1, r0, lsr #8
 bfc:	ldr	r0, [pc, #52]	; c38 <main@@Base+0x404>
 c00:	push	{r3, lr}
 c04:	add	r0, pc, r0
 c08:	ldr	r3, [pc, #44]	; c3c <main@@Base+0x408>
 c0c:	ldr	r2, [r0]
 c10:	add	r3, pc, r3
 c14:	cmp	r2, #0
 c18:	beq	c30 <main@@Base+0x3fc>
 c1c:	ldr	r2, [pc, #28]	; c40 <main@@Base+0x40c>
 c20:	ldr	r3, [r3, r2]
 c24:	cmp	r3, #0
 c28:	beq	c30 <main@@Base+0x3fc>
 c2c:	blx	r3
 c30:	pop	{r3, lr}
 c34:	b	b38 <main@@Base+0x304>
 c38:	andeq	r0, r1, r4, ror #4
 c3c:	andeq	r0, r1, r0, ror r3
 c40:	andeq	r0, r0, r0, ror r0

00000c44 <__libc_csu_init@@Base>:
 c44:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 c48:	mov	r7, r0
 c4c:	ldr	r6, [pc, #76]	; ca0 <__libc_csu_init@@Base+0x5c>
 c50:	mov	r8, r1
 c54:	ldr	r5, [pc, #72]	; ca4 <__libc_csu_init@@Base+0x60>
 c58:	mov	r9, r2
 c5c:	add	r6, pc, r6
 c60:	bl	754 <_init@@Base>
 c64:	add	r5, pc, r5
 c68:	rsb	r6, r5, r6
 c6c:	asrs	r6, r6, #2
 c70:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
 c74:	sub	r5, r5, #4
 c78:	mov	r4, #0
 c7c:	add	r4, r4, #1
 c80:	ldr	r3, [r5, #4]!
 c84:	mov	r0, r7
 c88:	mov	r1, r8
 c8c:	mov	r2, r9
 c90:	blx	r3
 c94:	cmp	r4, r6
 c98:	bne	c7c <__libc_csu_init@@Base+0x38>
 c9c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 ca0:	andeq	r0, r1, r8, lsl #4
 ca4:	strdeq	r0, [r1], -ip

00000ca8 <__libc_csu_fini@@Base>:
 ca8:	bx	lr

Disassembly of section .fini:

00000cac <_fini@@Base>:
 cac:	push	{r3, lr}
 cb0:	pop	{r3, pc}
