
centos-preinstalled/fdtget:     file format elf32-littlearm


Disassembly of section .init:

00010900 <.init>:
   10900:	push	{r3, lr}
   10904:	bl	111ec <__assert_fail@plt+0x734>
   10908:	pop	{r3, pc}

Disassembly of section .plt:

0001090c <raise@plt-0x14>:
   1090c:	push	{lr}		; (str lr, [sp, #-4]!)
   10910:	ldr	lr, [pc, #4]	; 1091c <raise@plt-0x4>
   10914:	add	lr, pc, lr
   10918:	ldr	pc, [lr, #8]!
   1091c:	andeq	r3, r1, r4, ror #13

00010920 <raise@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #77824	; 0x13000
   10928:	ldr	pc, [ip, #1764]!	; 0x6e4

0001092c <strcmp@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #77824	; 0x13000
   10934:	ldr	pc, [ip, #1756]!	; 0x6dc

00010938 <strtol@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #77824	; 0x13000
   10940:	ldr	pc, [ip, #1748]!	; 0x6d4

00010944 <printf@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #77824	; 0x13000
   1094c:	ldr	pc, [ip, #1740]!	; 0x6cc

00010950 <read@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #77824	; 0x13000
   10958:	ldr	pc, [ip, #1732]!	; 0x6c4

0001095c <memmove@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #77824	; 0x13000
   10964:	ldr	pc, [ip, #1724]!	; 0x6bc

00010968 <free@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #77824	; 0x13000
   10970:	ldr	pc, [ip, #1716]!	; 0x6b4

00010974 <memcpy@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #77824	; 0x13000
   1097c:	ldr	pc, [ip, #1708]!	; 0x6ac

00010980 <memcmp@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #77824	; 0x13000
   10988:	ldr	pc, [ip, #1700]!	; 0x6a4

0001098c <realloc@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #77824	; 0x13000
   10994:	ldr	pc, [ip, #1692]!	; 0x69c

00010998 <puts@plt>:
   10998:	add	ip, pc, #0, 12
   1099c:	add	ip, ip, #77824	; 0x13000
   109a0:	ldr	pc, [ip, #1684]!	; 0x694

000109a4 <malloc@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #77824	; 0x13000
   109ac:	ldr	pc, [ip, #1676]!	; 0x68c

000109b0 <__libc_start_main@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #77824	; 0x13000
   109b8:	ldr	pc, [ip, #1668]!	; 0x684

000109bc <strerror@plt>:
   109bc:	add	ip, pc, #0, 12
   109c0:	add	ip, ip, #77824	; 0x13000
   109c4:	ldr	pc, [ip, #1660]!	; 0x67c

000109c8 <__gmon_start__@plt>:
   109c8:	add	ip, pc, #0, 12
   109cc:	add	ip, ip, #77824	; 0x13000
   109d0:	ldr	pc, [ip, #1652]!	; 0x674

000109d4 <open@plt>:
   109d4:	add	ip, pc, #0, 12
   109d8:	add	ip, ip, #77824	; 0x13000
   109dc:	ldr	pc, [ip, #1644]!	; 0x66c

000109e0 <getopt_long@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #77824	; 0x13000
   109e8:	ldr	pc, [ip, #1636]!	; 0x664

000109ec <__ctype_b_loc@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #77824	; 0x13000
   109f4:	ldr	pc, [ip, #1628]!	; 0x65c

000109f8 <exit@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #77824	; 0x13000
   10a00:	ldr	pc, [ip, #1620]!	; 0x654

00010a04 <strlen@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #77824	; 0x13000
   10a0c:	ldr	pc, [ip, #1612]!	; 0x64c

00010a10 <strchr@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #77824	; 0x13000
   10a18:	ldr	pc, [ip, #1604]!	; 0x644

00010a1c <fprintf@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #77824	; 0x13000
   10a24:	ldr	pc, [ip, #1596]!	; 0x63c

00010a28 <__errno_location@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #77824	; 0x13000
   10a30:	ldr	pc, [ip, #1588]!	; 0x634

00010a34 <memset@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #77824	; 0x13000
   10a3c:	ldr	pc, [ip, #1580]!	; 0x62c

00010a40 <putchar@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #77824	; 0x13000
   10a48:	ldr	pc, [ip, #1572]!	; 0x624

00010a4c <strncpy@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #77824	; 0x13000
   10a54:	ldr	pc, [ip, #1564]!	; 0x61c

00010a58 <write@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #77824	; 0x13000
   10a60:	ldr	pc, [ip, #1556]!	; 0x614

00010a64 <memchr@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #77824	; 0x13000
   10a6c:	ldr	pc, [ip, #1548]!	; 0x60c

00010a70 <strnlen@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #77824	; 0x13000
   10a78:	ldr	pc, [ip, #1540]!	; 0x604

00010a7c <vfprintf@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #77824	; 0x13000
   10a84:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a88 <vsnprintf@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #77824	; 0x13000
   10a90:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a94 <fputs@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #77824	; 0x13000
   10a9c:	ldr	pc, [ip, #1516]!	; 0x5ec

00010aa0 <abort@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #77824	; 0x13000
   10aa8:	ldr	pc, [ip, #1508]!	; 0x5e4

00010aac <close@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #77824	; 0x13000
   10ab4:	ldr	pc, [ip, #1500]!	; 0x5dc

00010ab8 <__assert_fail@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #77824	; 0x13000
   10ac0:	ldr	pc, [ip, #1492]!	; 0x5d4

Disassembly of section .text:

00010ac4 <.text>:
   10ac4:	push	{r0, r1, r2, r3}
   10ac8:	ldr	r3, [pc, #60]	; 10b0c <__assert_fail@plt+0x54>
   10acc:	push	{r0, r1, r2, lr}
   10ad0:	add	r2, sp, #20
   10ad4:	str	r2, [sp, #4]
   10ad8:	add	r3, pc, r3
   10adc:	ldr	r2, [pc, #44]	; 10b10 <__assert_fail@plt+0x58>
   10ae0:	ldr	r0, [pc, #44]	; 10b14 <__assert_fail@plt+0x5c>
   10ae4:	ldr	r4, [r3, r2]
   10ae8:	add	r0, pc, r0
   10aec:	ldr	r1, [r4]
   10af0:	bl	10a94 <fputs@plt>
   10af4:	ldr	r0, [r4]
   10af8:	ldr	r1, [sp, #16]
   10afc:	ldr	r2, [sp, #4]
   10b00:	bl	10a7c <vfprintf@plt>
   10b04:	mov	r0, #1
   10b08:	bl	109f8 <exit@plt>
   10b0c:	andeq	r3, r1, r0, lsr #10
   10b10:	muleq	r0, ip, r0
   10b14:	andeq	r2, r0, r1, ror #23
   10b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b1c:	sub	sp, sp, #68	; 0x44
   10b20:	ldr	fp, [pc, #1576]	; 11150 <__assert_fail@plt+0x698>
   10b24:	add	r9, sp, #48	; 0x30
   10b28:	ldr	r6, [pc, #1572]	; 11154 <__assert_fail@plt+0x69c>
   10b2c:	mov	sl, r0
   10b30:	add	fp, pc, fp
   10b34:	mov	r8, r1
   10b38:	add	r5, fp, #276	; 0x114
   10b3c:	mov	r0, r9
   10b40:	mov	r1, #0
   10b44:	mov	r2, #16
   10b48:	mov	r7, #2
   10b4c:	bl	10a34 <memset@plt>
   10b50:	add	r6, pc, r6
   10b54:	mvn	r3, #0
   10b58:	str	r3, [sp, #52]	; 0x34
   10b5c:	ldr	r4, [pc, #1524]	; 11158 <__assert_fail@plt+0x6a0>
   10b60:	mov	ip, #0
   10b64:	add	r4, pc, r4
   10b68:	str	ip, [sp]
   10b6c:	mov	r0, sl
   10b70:	mov	r1, r8
   10b74:	mov	r2, r5
   10b78:	mov	r3, r4
   10b7c:	str	ip, [sp, #8]
   10b80:	bl	109e0 <getopt_long@plt>
   10b84:	ldr	ip, [sp, #8]
   10b88:	cmn	r0, #1
   10b8c:	beq	10c64 <__assert_fail@plt+0x1ac>
   10b90:	cmp	r0, #104	; 0x68
   10b94:	beq	10bf0 <__assert_fail@plt+0x138>
   10b98:	bgt	10bc8 <__assert_fail@plt+0x110>
   10b9c:	cmp	r0, #86	; 0x56
   10ba0:	beq	10c00 <__assert_fail@plt+0x148>
   10ba4:	cmp	r0, #100	; 0x64
   10ba8:	beq	10c50 <__assert_fail@plt+0x198>
   10bac:	cmp	r0, #63	; 0x3f
   10bb0:	bne	10b68 <__assert_fail@plt+0xb0>
   10bb4:	ldr	r0, [pc, #1440]	; 1115c <__assert_fail@plt+0x6a4>
   10bb8:	add	r3, r4, #112	; 0x70
   10bbc:	str	r3, [sp]
   10bc0:	add	r0, pc, r0
   10bc4:	b	10c34 <__assert_fail@plt+0x17c>
   10bc8:	cmp	r0, #112	; 0x70
   10bcc:	beq	10c44 <__assert_fail@plt+0x18c>
   10bd0:	cmp	r0, #116	; 0x74
   10bd4:	beq	10c04 <__assert_fail@plt+0x14c>
   10bd8:	cmp	r0, #108	; 0x6c
   10bdc:	bne	10b68 <__assert_fail@plt+0xb0>
   10be0:	mov	r3, #2
   10be4:	mov	r7, #1
   10be8:	str	r3, [sp, #56]	; 0x38
   10bec:	b	10b5c <__assert_fail@plt+0xa4>
   10bf0:	add	r3, r4, #112	; 0x70
   10bf4:	mov	r0, #0
   10bf8:	str	r3, [sp]
   10bfc:	b	10c34 <__assert_fail@plt+0x17c>
   10c00:	bl	11b70 <__assert_fail@plt+0x10b8>
   10c04:	ldr	r3, [pc, #1364]	; 11160 <__assert_fail@plt+0x6a8>
   10c08:	mov	r1, r9
   10c0c:	add	r2, r9, #4
   10c10:	ldr	r3, [r6, r3]
   10c14:	ldr	r0, [r3]
   10c18:	bl	11900 <__assert_fail@plt+0xe48>
   10c1c:	cmp	r0, #0
   10c20:	beq	10b5c <__assert_fail@plt+0xa4>
   10c24:	ldr	r0, [pc, #1336]	; 11164 <__assert_fail@plt+0x6ac>
   10c28:	add	r3, r4, #112	; 0x70
   10c2c:	str	r3, [sp]
   10c30:	add	r0, pc, r0
   10c34:	mov	r1, fp
   10c38:	mov	r2, r5
   10c3c:	mov	r3, r4
   10c40:	bl	11b98 <__assert_fail@plt+0x10e0>
   10c44:	mov	r7, #1
   10c48:	str	r7, [sp, #56]	; 0x38
   10c4c:	b	10b5c <__assert_fail@plt+0xa4>
   10c50:	ldr	r3, [pc, #1288]	; 11160 <__assert_fail@plt+0x6a8>
   10c54:	ldr	r3, [r6, r3]
   10c58:	ldr	r3, [r3]
   10c5c:	str	r3, [sp, #60]	; 0x3c
   10c60:	b	10b5c <__assert_fail@plt+0xa4>
   10c64:	ldr	r3, [pc, #1276]	; 11168 <__assert_fail@plt+0x6b0>
   10c68:	ldr	r1, [r6, r3]
   10c6c:	ldr	r3, [r1]
   10c70:	cmp	r3, sl
   10c74:	blt	10ca0 <__assert_fail@plt+0x1e8>
   10c78:	ldr	r3, [pc, #1260]	; 1116c <__assert_fail@plt+0x6b4>
   10c7c:	ldr	r1, [pc, #1260]	; 11170 <__assert_fail@plt+0x6b8>
   10c80:	ldr	r0, [pc, #1260]	; 11174 <__assert_fail@plt+0x6bc>
   10c84:	add	r3, pc, r3
   10c88:	add	r1, pc, r1
   10c8c:	add	r2, r3, #112	; 0x70
   10c90:	add	r0, pc, r0
   10c94:	str	r2, [sp]
   10c98:	add	r2, r1, #276	; 0x114
   10c9c:	b	10c40 <__assert_fail@plt+0x188>
   10ca0:	ldr	r0, [r8, r3, lsl #2]
   10ca4:	add	r2, r3, #1
   10ca8:	lsl	r9, r3, #2
   10cac:	str	r2, [r1]
   10cb0:	cmp	r0, #0
   10cb4:	beq	10c78 <__assert_fail@plt+0x1c0>
   10cb8:	subs	sl, sl, r2
   10cbc:	str	sl, [sp, #12]
   10cc0:	beq	11024 <__assert_fail@plt+0x56c>
   10cc4:	cmp	r7, #2
   10cc8:	bne	10ce4 <__assert_fail@plt+0x22c>
   10ccc:	tst	sl, #1
   10cd0:	ldrne	r0, [pc, #1184]	; 11178 <__assert_fail@plt+0x6c0>
   10cd4:	addne	r3, r4, #112	; 0x70
   10cd8:	strne	r3, [sp]
   10cdc:	addne	r0, pc, r0
   10ce0:	bne	10c34 <__assert_fail@plt+0x17c>
   10ce4:	bl	117bc <__assert_fail@plt+0xd04>
   10ce8:	subs	r4, r0, #0
   10cec:	beq	11144 <__assert_fail@plt+0x68c>
   10cf0:	lsl	r3, r7, #2
   10cf4:	str	r3, [sp, #20]
   10cf8:	ldr	r3, [pc, #1148]	; 1117c <__assert_fail@plt+0x6c4>
   10cfc:	add	r9, r9, #4
   10d00:	add	r9, r8, r9
   10d04:	mov	fp, r7
   10d08:	add	r3, pc, r3
   10d0c:	str	r3, [sp, #24]
   10d10:	ldr	r3, [pc, #1128]	; 11180 <__assert_fail@plt+0x6c8>
   10d14:	add	r3, pc, r3
   10d18:	str	r3, [sp, #28]
   10d1c:	ldr	r3, [sp, #12]
   10d20:	mov	r0, r4
   10d24:	cmp	fp, r3
   10d28:	bgt	11020 <__assert_fail@plt+0x568>
   10d2c:	ldr	r1, [r9]
   10d30:	bl	129b0 <__assert_fail@plt+0x1ef8>
   10d34:	subs	sl, r0, #0
   10d38:	bge	10d78 <__assert_fail@plt+0x2c0>
   10d3c:	ldr	r3, [sp, #60]	; 0x3c
   10d40:	cmp	r3, #0
   10d44:	movne	r0, r3
   10d48:	bne	10f84 <__assert_fail@plt+0x4cc>
   10d4c:	ldr	r3, [pc, #1072]	; 11184 <__assert_fail@plt+0x6cc>
   10d50:	ldr	r5, [r9]
   10d54:	ldr	r3, [r6, r3]
   10d58:	ldr	r6, [r3]
   10d5c:	bl	13064 <__assert_fail@plt+0x25ac>
   10d60:	ldr	r1, [pc, #1056]	; 11188 <__assert_fail@plt+0x6d0>
   10d64:	mov	r2, r5
   10d68:	add	r1, pc, r1
   10d6c:	mov	r3, r0
   10d70:	mov	r0, r6
   10d74:	b	10fb4 <__assert_fail@plt+0x4fc>
   10d78:	cmp	r7, #1
   10d7c:	ldr	r2, [sp, #56]	; 0x38
   10d80:	ldrne	r8, [r9, #4]
   10d84:	moveq	r8, #0
   10d88:	cmp	r2, #1
   10d8c:	beq	10db0 <__assert_fail@plt+0x2f8>
   10d90:	cmp	r2, #2
   10d94:	add	r5, sp, #40	; 0x28
   10d98:	bne	10ef8 <__assert_fail@plt+0x440>
   10d9c:	ldr	r3, [pc, #1000]	; 1118c <__assert_fail@plt+0x6d4>
   10da0:	mov	r8, #0
   10da4:	add	r3, pc, r3
   10da8:	str	r3, [sp, #16]
   10dac:	b	10e3c <__assert_fail@plt+0x384>
   10db0:	mov	r0, r4
   10db4:	mov	r1, sl
   10db8:	bl	12568 <__assert_fail@plt+0x1ab0>
   10dbc:	cmp	r0, #0
   10dc0:	mov	r5, r0
   10dc4:	bge	10dd4 <__assert_fail@plt+0x31c>
   10dc8:	cmn	r0, #1
   10dcc:	bne	10fbc <__assert_fail@plt+0x504>
   10dd0:	b	11010 <__assert_fail@plt+0x558>
   10dd4:	mov	r1, r5
   10dd8:	mov	r2, #0
   10ddc:	mov	r0, r4
   10de0:	bl	125a8 <__assert_fail@plt+0x1af0>
   10de4:	ldr	r3, [r0, #8]
   10de8:	mov	r0, r4
   10dec:	ubfx	r2, r3, #8, #8
   10df0:	str	r3, [sp, #36]	; 0x24
   10df4:	lsl	r2, r2, #16
   10df8:	orr	r2, r2, r3, lsl #24
   10dfc:	orr	r1, r2, r3, lsr #24
   10e00:	ubfx	r3, r3, #16, #8
   10e04:	orr	r1, r1, r3, lsl #8
   10e08:	bl	12330 <__assert_fail@plt+0x1878>
   10e0c:	cmp	r0, #0
   10e10:	beq	10e18 <__assert_fail@plt+0x360>
   10e14:	bl	10998 <puts@plt>
   10e18:	mov	r0, r4
   10e1c:	mov	r1, r5
   10e20:	bl	12588 <__assert_fail@plt+0x1ad0>
   10e24:	b	10dbc <__assert_fail@plt+0x304>
   10e28:	subs	r8, r8, #1
   10e2c:	mvneq	r8, #0
   10e30:	cmn	r8, #1
   10e34:	ldr	sl, [sp, #40]	; 0x28
   10e38:	beq	11010 <__assert_fail@plt+0x558>
   10e3c:	mov	r1, sl
   10e40:	mov	r2, r5
   10e44:	mov	r0, r4
   10e48:	bl	11eac <__assert_fail@plt+0x13f4>
   10e4c:	sub	r2, r0, #1
   10e50:	mov	r1, r0
   10e54:	cmp	r2, #8
   10e58:	addls	pc, pc, r2, lsl #2
   10e5c:	b	10ee0 <__assert_fail@plt+0x428>
   10e60:	b	10e84 <__assert_fail@plt+0x3cc>
   10e64:	b	10e28 <__assert_fail@plt+0x370>
   10e68:	b	10e30 <__assert_fail@plt+0x378>
   10e6c:	b	10ee0 <__assert_fail@plt+0x428>
   10e70:	b	10ee0 <__assert_fail@plt+0x428>
   10e74:	b	10ee0 <__assert_fail@plt+0x428>
   10e78:	b	10ee0 <__assert_fail@plt+0x428>
   10e7c:	b	10ee0 <__assert_fail@plt+0x428>
   10e80:	b	10fc4 <__assert_fail@plt+0x50c>
   10e84:	mov	r0, r4
   10e88:	mov	r1, sl
   10e8c:	mov	r2, #0
   10e90:	bl	124ec <__assert_fail@plt+0x1a34>
   10e94:	cmp	r8, #1
   10e98:	bgt	10ec4 <__assert_fail@plt+0x40c>
   10e9c:	ldr	r3, [sp, #16]
   10ea0:	cmp	r0, #0
   10ea4:	moveq	r0, r3
   10ea8:	ldrb	r3, [r0]
   10eac:	cmp	r3, #0
   10eb0:	ldr	r3, [sp, #28]
   10eb4:	moveq	r0, r3
   10eb8:	cmp	r8, #1
   10ebc:	bne	10ec4 <__assert_fail@plt+0x40c>
   10ec0:	bl	10998 <puts@plt>
   10ec4:	add	r8, r8, #1
   10ec8:	cmp	r8, #31
   10ecc:	ble	10e30 <__assert_fail@plt+0x378>
   10ed0:	ldr	r0, [pc, #696]	; 11190 <__assert_fail@plt+0x6d8>
   10ed4:	add	r0, pc, r0
   10ed8:	bl	10998 <puts@plt>
   10edc:	b	10fc4 <__assert_fail@plt+0x50c>
   10ee0:	cmp	r8, #1
   10ee4:	bgt	10fc4 <__assert_fail@plt+0x50c>
   10ee8:	ldr	r0, [pc, #676]	; 11194 <__assert_fail@plt+0x6dc>
   10eec:	add	r0, pc, r0
   10ef0:	bl	10944 <printf@plt>
   10ef4:	b	10fc4 <__assert_fail@plt+0x50c>
   10ef8:	cmp	r8, #0
   10efc:	bne	10f28 <__assert_fail@plt+0x470>
   10f00:	ldr	r3, [pc, #656]	; 11198 <__assert_fail@plt+0x6e0>
   10f04:	mov	r2, #241	; 0xf1
   10f08:	ldr	r0, [pc, #652]	; 1119c <__assert_fail@plt+0x6e4>
   10f0c:	ldr	r1, [pc, #652]	; 111a0 <__assert_fail@plt+0x6e8>
   10f10:	add	r3, pc, r3
   10f14:	add	r3, r3, #284	; 0x11c
   10f18:	add	r0, pc, r0
   10f1c:	add	r1, pc, r1
   10f20:	add	r3, r3, #1
   10f24:	bl	10ab8 <__assert_fail@plt>
   10f28:	mov	r3, r5
   10f2c:	mov	r0, r4
   10f30:	mov	r1, sl
   10f34:	mov	r2, r8
   10f38:	bl	1274c <__assert_fail@plt+0x1c94>
   10f3c:	subs	r5, r0, #0
   10f40:	beq	10f78 <__assert_fail@plt+0x4c0>
   10f44:	ldr	r8, [sp, #40]	; 0x28
   10f48:	cmp	r8, #0
   10f4c:	beq	11008 <__assert_fail@plt+0x550>
   10f50:	ldr	r3, [sp, #48]	; 0x30
   10f54:	cmp	r3, #115	; 0x73
   10f58:	beq	1111c <__assert_fail@plt+0x664>
   10f5c:	cmp	r3, #0
   10f60:	bne	1102c <__assert_fail@plt+0x574>
   10f64:	mov	r1, r8
   10f68:	bl	11458 <__assert_fail@plt+0x9a0>
   10f6c:	cmp	r0, #0
   10f70:	bne	1111c <__assert_fail@plt+0x664>
   10f74:	b	1102c <__assert_fail@plt+0x574>
   10f78:	ldr	r0, [sp, #60]	; 0x3c
   10f7c:	cmp	r0, #0
   10f80:	beq	10f8c <__assert_fail@plt+0x4d4>
   10f84:	bl	10998 <puts@plt>
   10f88:	b	11010 <__assert_fail@plt+0x558>
   10f8c:	ldr	r3, [pc, #496]	; 11184 <__assert_fail@plt+0x6cc>
   10f90:	ldr	r0, [sp, #40]	; 0x28
   10f94:	ldr	r3, [r6, r3]
   10f98:	ldr	r5, [r3]
   10f9c:	bl	13064 <__assert_fail@plt+0x25ac>
   10fa0:	ldr	r1, [pc, #508]	; 111a4 <__assert_fail@plt+0x6ec>
   10fa4:	mov	r2, r8
   10fa8:	add	r1, pc, r1
   10fac:	mov	r3, r0
   10fb0:	mov	r0, r5
   10fb4:	bl	10a1c <fprintf@plt>
   10fb8:	b	10fc4 <__assert_fail@plt+0x50c>
   10fbc:	cmp	r0, #0
   10fc0:	beq	11010 <__assert_fail@plt+0x558>
   10fc4:	mov	r0, r4
   10fc8:	bl	10968 <free@plt>
   10fcc:	b	11144 <__assert_fail@plt+0x68c>
   10fd0:	cmp	sl, r5
   10fd4:	beq	10fe0 <__assert_fail@plt+0x528>
   10fd8:	mov	r0, #32
   10fdc:	bl	10a40 <putchar@plt>
   10fe0:	mov	r1, sl
   10fe4:	ldr	r0, [sp, #24]
   10fe8:	bl	10944 <printf@plt>
   10fec:	mov	r0, sl
   10ff0:	bl	10a04 <strlen@plt>
   10ff4:	add	r0, r0, #1
   10ff8:	add	sl, sl, r0
   10ffc:	rsb	r2, r5, sl
   11000:	cmp	r2, r8
   11004:	blt	10fd0 <__assert_fail@plt+0x518>
   11008:	mov	r0, #10
   1100c:	bl	10a40 <putchar@plt>
   11010:	ldr	r3, [sp, #20]
   11014:	add	fp, fp, r7
   11018:	add	r9, r9, r3
   1101c:	b	10d1c <__assert_fail@plt+0x264>
   11020:	bl	10968 <free@plt>
   11024:	mov	r0, #0
   11028:	b	11148 <__assert_fail@plt+0x690>
   1102c:	ldr	sl, [sp, #52]	; 0x34
   11030:	cmn	sl, #1
   11034:	bne	11048 <__assert_fail@plt+0x590>
   11038:	tst	r8, #3
   1103c:	moveq	sl, #4
   11040:	movne	sl, #1
   11044:	b	11078 <__assert_fail@plt+0x5c0>
   11048:	mov	r0, r8
   1104c:	mov	r1, sl
   11050:	bl	132f4 <__assert_fail@plt+0x283c>
   11054:	cmp	r1, #0
   11058:	beq	11078 <__assert_fail@plt+0x5c0>
   1105c:	ldr	r3, [pc, #288]	; 11184 <__assert_fail@plt+0x6cc>
   11060:	ldr	r0, [pc, #320]	; 111a8 <__assert_fail@plt+0x6f0>
   11064:	ldr	r3, [r6, r3]
   11068:	add	r0, pc, r0
   1106c:	ldr	r1, [r3]
   11070:	bl	10a94 <fputs@plt>
   11074:	b	10fc4 <__assert_fail@plt+0x50c>
   11078:	ldr	r2, [sp, #48]	; 0x30
   1107c:	mov	r1, #37	; 0x25
   11080:	mov	ip, #0
   11084:	add	r3, sp, #32
   11088:	cmp	r2, #0
   1108c:	strb	r1, [sp, #32]
   11090:	uxtbne	r2, r2
   11094:	strb	ip, [sp, #34]	; 0x22
   11098:	moveq	r2, #100	; 0x64
   1109c:	str	r3, [sp, #16]
   110a0:	strb	r2, [sp, #33]	; 0x21
   110a4:	cmp	ip, r8
   110a8:	bge	11008 <__assert_fail@plt+0x550>
   110ac:	cmp	ip, #0
   110b0:	beq	110c4 <__assert_fail@plt+0x60c>
   110b4:	mov	r0, #32
   110b8:	str	ip, [sp, #8]
   110bc:	bl	10a40 <putchar@plt>
   110c0:	ldr	ip, [sp, #8]
   110c4:	cmp	sl, #4
   110c8:	bne	110f0 <__assert_fail@plt+0x638>
   110cc:	ldr	r2, [r5]
   110d0:	ubfx	r1, r2, #8, #8
   110d4:	str	r2, [sp, #44]	; 0x2c
   110d8:	lsl	r1, r1, #16
   110dc:	orr	r1, r1, r2, lsl #24
   110e0:	orr	r1, r1, r2, lsr #24
   110e4:	ubfx	r2, r2, #16, #8
   110e8:	orr	r1, r1, r2, lsl #8
   110ec:	b	11100 <__assert_fail@plt+0x648>
   110f0:	cmp	sl, #2
   110f4:	ldrb	r1, [r5]
   110f8:	ldrbeq	r2, [r5, #1]
   110fc:	orreq	r1, r2, r1, lsl #8
   11100:	add	r0, sp, #32
   11104:	str	ip, [sp, #8]
   11108:	bl	10944 <printf@plt>
   1110c:	ldr	ip, [sp, #8]
   11110:	add	r5, r5, sl
   11114:	add	ip, ip, sl
   11118:	b	110a4 <__assert_fail@plt+0x5ec>
   1111c:	add	r3, r5, r8
   11120:	ldrb	r3, [r3, #-1]
   11124:	cmp	r3, #0
   11128:	ldrne	r3, [pc, #84]	; 11184 <__assert_fail@plt+0x6cc>
   1112c:	ldrne	r0, [pc, #120]	; 111ac <__assert_fail@plt+0x6f4>
   11130:	ldrne	r3, [r6, r3]
   11134:	addne	r0, pc, r0
   11138:	bne	1106c <__assert_fail@plt+0x5b4>
   1113c:	mov	sl, r5
   11140:	b	10ffc <__assert_fail@plt+0x544>
   11144:	mov	r0, #1
   11148:	add	sp, sp, #68	; 0x44
   1114c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11150:	andeq	r2, r0, r4, ror #16
   11154:	andeq	r3, r1, r8, lsr #9
   11158:	ldrdeq	r3, [r1], -r0
   1115c:	andeq	r2, r0, sp, lsl r9
   11160:	andeq	r0, r0, r8, lsr #1
   11164:			; <UNDEFINED> instruction: 0x000028bc
   11168:	muleq	r0, r8, r0
   1116c:			; <UNDEFINED> instruction: 0x000131b0
   11170:	andeq	r2, r0, ip, lsl #14
   11174:	andeq	r2, r0, r0, ror r8
   11178:	andeq	r2, r0, r5, lsr r8
   1117c:	andeq	r2, r0, r1, lsr #21
   11180:	andeq	r2, r0, r7, asr #15
   11184:	muleq	r0, ip, r0
   11188:	andeq	r2, r0, pc, asr #15
   1118c:	andeq	r2, r0, r0, lsr #14
   11190:	andeq	r2, r0, r6, ror r6
   11194:	andeq	r2, r0, r9, ror r6
   11198:	andeq	r2, r0, r4, lsl #9
   1119c:	andeq	r2, r0, r1, ror #12
   111a0:	andeq	r2, r0, r6, ror #12
   111a4:	andeq	r2, r0, pc, lsl #11
   111a8:	andeq	r2, r0, r8, lsr r5
   111ac:	andeq	r2, r0, r7, asr r4
   111b0:	mov	fp, #0
   111b4:	mov	lr, #0
   111b8:	pop	{r1}		; (ldr r1, [sp], #4)
   111bc:	mov	r2, sp
   111c0:	push	{r2}		; (str r2, [sp, #-4]!)
   111c4:	push	{r0}		; (str r0, [sp, #-4]!)
   111c8:	ldr	ip, [pc, #16]	; 111e0 <__assert_fail@plt+0x728>
   111cc:	push	{ip}		; (str ip, [sp, #-4]!)
   111d0:	ldr	r0, [pc, #12]	; 111e4 <__assert_fail@plt+0x72c>
   111d4:	ldr	r3, [pc, #12]	; 111e8 <__assert_fail@plt+0x730>
   111d8:	bl	109b0 <__libc_start_main@plt>
   111dc:	bl	10aa0 <abort@plt>
   111e0:	andeq	r3, r1, r8, lsl #7
   111e4:	andeq	r0, r1, r8, lsl fp
   111e8:	andeq	r3, r1, r4, lsr #6
   111ec:	ldr	r3, [pc, #20]	; 11208 <__assert_fail@plt+0x750>
   111f0:	ldr	r2, [pc, #20]	; 1120c <__assert_fail@plt+0x754>
   111f4:	add	r3, pc, r3
   111f8:	ldr	r2, [r3, r2]
   111fc:	cmp	r2, #0
   11200:	bxeq	lr
   11204:	b	109c8 <__gmon_start__@plt>
   11208:	andeq	r2, r1, r4, lsl #28
   1120c:	andeq	r0, r0, r0, lsr #1
   11210:	push	{r3, lr}
   11214:	movw	r0, #16560	; 0x40b0
   11218:	ldr	r3, [pc, #36]	; 11244 <__assert_fail@plt+0x78c>
   1121c:	movt	r0, #2
   11220:	rsb	r3, r0, r3
   11224:	cmp	r3, #6
   11228:	popls	{r3, pc}
   1122c:	movw	r3, #0
   11230:	movt	r3, #0
   11234:	cmp	r3, #0
   11238:	popeq	{r3, pc}
   1123c:	blx	r3
   11240:	pop	{r3, pc}
   11244:	strheq	r4, [r2], -r3
   11248:	push	{r3, lr}
   1124c:	movw	r0, #16560	; 0x40b0
   11250:	movw	r3, #16560	; 0x40b0
   11254:	movt	r0, #2
   11258:	movt	r3, #2
   1125c:	rsb	r3, r0, r3
   11260:	asr	r3, r3, #2
   11264:	add	r3, r3, r3, lsr #31
   11268:	asrs	r1, r3, #1
   1126c:	popeq	{r3, pc}
   11270:	movw	r2, #0
   11274:	movt	r2, #0
   11278:	cmp	r2, #0
   1127c:	popeq	{r3, pc}
   11280:	blx	r2
   11284:	pop	{r3, pc}
   11288:	push	{r4, lr}
   1128c:	movw	r4, #16560	; 0x40b0
   11290:	movt	r4, #2
   11294:	ldrb	r3, [r4]
   11298:	cmp	r3, #0
   1129c:	popne	{r4, pc}
   112a0:	bl	11210 <__assert_fail@plt+0x758>
   112a4:	mov	r3, #1
   112a8:	strb	r3, [r4]
   112ac:	pop	{r4, pc}
   112b0:	movw	r0, #15928	; 0x3e38
   112b4:	movt	r0, #2
   112b8:	push	{r3, lr}
   112bc:	ldr	r3, [r0]
   112c0:	cmp	r3, #0
   112c4:	beq	112dc <__assert_fail@plt+0x824>
   112c8:	movw	r3, #0
   112cc:	movt	r3, #0
   112d0:	cmp	r3, #0
   112d4:	beq	112dc <__assert_fail@plt+0x824>
   112d8:	blx	r3
   112dc:	pop	{r3, lr}
   112e0:	b	11248 <__assert_fail@plt+0x790>
   112e4:	push	{r3, lr}
   112e8:	bl	109a4 <malloc@plt>
   112ec:	cmp	r0, #0
   112f0:	popne	{r3, pc}
   112f4:	ldr	r0, [pc, #4]	; 11300 <__assert_fail@plt+0x848>
   112f8:	add	r0, pc, r0
   112fc:	bl	10ac4 <__assert_fail@plt+0xc>
   11300:	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   11304:	push	{r3, r4, r5, lr}
   11308:	mov	r5, r0
   1130c:	bl	10a04 <strlen@plt>
   11310:	add	r4, r0, #1
   11314:	mov	r0, r4
   11318:	bl	112e4 <__assert_fail@plt+0x82c>
   1131c:	mov	r1, r5
   11320:	mov	r2, r4
   11324:	bl	10974 <memcpy@plt>
   11328:	pop	{r3, r4, r5, pc}
   1132c:	push	{r1, r2, r3}
   11330:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   11334:	add	r6, sp, #40	; 0x28
   11338:	ldr	r8, [sp, #36]	; 0x24
   1133c:	mov	r7, r0
   11340:	mov	r5, #0
   11344:	mov	r4, #128	; 0x80
   11348:	mov	r0, r5
   1134c:	mov	r1, r4
   11350:	bl	1098c <realloc@plt>
   11354:	subs	r5, r0, #0
   11358:	bne	1136c <__assert_fail@plt+0x8b4>
   1135c:	ldr	r0, [pc, #100]	; 113c8 <__assert_fail@plt+0x910>
   11360:	mov	r1, r4
   11364:	add	r0, pc, r0
   11368:	bl	10ac4 <__assert_fail@plt+0xc>
   1136c:	mov	r2, r8
   11370:	mov	r3, r6
   11374:	mov	r1, r4
   11378:	str	r6, [sp, #4]
   1137c:	bl	10a88 <vsnprintf@plt>
   11380:	mvn	r3, r0
   11384:	lsr	r3, r3, #31
   11388:	cmp	r0, r4
   1138c:	movge	r2, #0
   11390:	andlt	r2, r3, #1
   11394:	cmp	r2, #0
   11398:	bne	113ac <__assert_fail@plt+0x8f4>
   1139c:	cmp	r3, #0
   113a0:	addne	r4, r0, #1
   113a4:	lsleq	r4, r4, #1
   113a8:	b	11348 <__assert_fail@plt+0x890>
   113ac:	str	r5, [r7]
   113b0:	mov	r0, r5
   113b4:	bl	10a04 <strlen@plt>
   113b8:	add	sp, sp, #12
   113bc:	pop	{r4, r5, r6, r7, r8, lr}
   113c0:	add	sp, sp, #12
   113c4:	bx	lr
   113c8:	andeq	r2, r0, r4, lsl #7
   113cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   113d0:	mov	r7, r1
   113d4:	mov	r9, r0
   113d8:	bl	10a04 <strlen@plt>
   113dc:	mov	r4, r0
   113e0:	mov	r8, r0
   113e4:	mov	r0, r7
   113e8:	bl	10a04 <strlen@plt>
   113ec:	cmp	r4, #0
   113f0:	add	r3, r4, r0
   113f4:	mov	sl, r0
   113f8:	add	r0, r3, #2
   113fc:	ble	11418 <__assert_fail@plt+0x960>
   11400:	add	r2, r9, r4
   11404:	ldrb	r2, [r2, #-1]
   11408:	cmp	r2, #47	; 0x2f
   1140c:	addeq	r0, r3, #1
   11410:	moveq	r6, #0
   11414:	beq	1141c <__assert_fail@plt+0x964>
   11418:	mov	r6, #1
   1141c:	bl	112e4 <__assert_fail@plt+0x82c>
   11420:	mov	r1, r9
   11424:	mov	r2, r4
   11428:	mov	r5, r0
   1142c:	bl	10974 <memcpy@plt>
   11430:	cmp	r6, #0
   11434:	mov	r1, r7
   11438:	addne	r8, r4, #1
   1143c:	add	r2, sl, #1
   11440:	movne	r3, #47	; 0x2f
   11444:	add	r0, r5, r8
   11448:	strbne	r3, [r5, r4]
   1144c:	bl	10974 <memcpy@plt>
   11450:	mov	r0, r5
   11454:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11458:	cmp	r1, #0
   1145c:	push	{r4, r5, r6, r7, r8, lr}
   11460:	mov	r4, r0
   11464:	beq	114d4 <__assert_fail@plt+0xa1c>
   11468:	add	r7, r0, r1
   1146c:	ldrb	r3, [r7, #-1]
   11470:	cmp	r3, #0
   11474:	bne	114d4 <__assert_fail@plt+0xa1c>
   11478:	cmp	r4, r7
   1147c:	bcs	114dc <__assert_fail@plt+0xa24>
   11480:	mov	r5, r4
   11484:	mov	r6, r5
   11488:	ldrb	r8, [r5], #1
   1148c:	cmp	r8, #0
   11490:	beq	114b8 <__assert_fail@plt+0xa00>
   11494:	bl	109ec <__ctype_b_loc@plt>
   11498:	lsl	r8, r8, #1
   1149c:	ldr	r3, [r0]
   114a0:	ldrh	r3, [r3, r8]
   114a4:	tst	r3, #16384	; 0x4000
   114a8:	beq	114b8 <__assert_fail@plt+0xa00>
   114ac:	cmp	r5, r7
   114b0:	mov	r6, r5
   114b4:	bne	11484 <__assert_fail@plt+0x9cc>
   114b8:	ldrb	r0, [r6]
   114bc:	cmp	r0, #0
   114c0:	bne	114d4 <__assert_fail@plt+0xa1c>
   114c4:	cmp	r6, r4
   114c8:	popeq	{r4, r5, r6, r7, r8, pc}
   114cc:	add	r4, r6, #1
   114d0:	b	11478 <__assert_fail@plt+0x9c0>
   114d4:	mov	r0, #0
   114d8:	pop	{r4, r5, r6, r7, r8, pc}
   114dc:	mov	r0, #1
   114e0:	pop	{r4, r5, r6, r7, r8, pc}
   114e4:	push	{r0, r1, r4, r5, r6, lr}
   114e8:	mov	r3, r0
   114ec:	ldr	r5, [r1]
   114f0:	mov	r6, r1
   114f4:	add	r1, r0, r5
   114f8:	add	r4, r5, #1
   114fc:	ldrb	r0, [r0, r5]
   11500:	cmp	r0, #102	; 0x66
   11504:	beq	11584 <__assert_fail@plt+0xacc>
   11508:	bhi	11534 <__assert_fail@plt+0xa7c>
   1150c:	cmp	r0, #97	; 0x61
   11510:	beq	1156c <__assert_fail@plt+0xab4>
   11514:	bhi	11528 <__assert_fail@plt+0xa70>
   11518:	sub	r3, r0, #48	; 0x30
   1151c:	cmp	r3, #7
   11520:	bls	1158c <__assert_fail@plt+0xad4>
   11524:	b	11634 <__assert_fail@plt+0xb7c>
   11528:	cmp	r0, #98	; 0x62
   1152c:	moveq	r0, #8
   11530:	b	11634 <__assert_fail@plt+0xb7c>
   11534:	cmp	r0, #116	; 0x74
   11538:	beq	11574 <__assert_fail@plt+0xabc>
   1153c:	bhi	11558 <__assert_fail@plt+0xaa0>
   11540:	cmp	r0, #110	; 0x6e
   11544:	moveq	r0, #10
   11548:	beq	11634 <__assert_fail@plt+0xb7c>
   1154c:	cmp	r0, #114	; 0x72
   11550:	moveq	r0, #13
   11554:	b	11634 <__assert_fail@plt+0xb7c>
   11558:	cmp	r0, #118	; 0x76
   1155c:	beq	1157c <__assert_fail@plt+0xac4>
   11560:	cmp	r0, #120	; 0x78
   11564:	beq	115e4 <__assert_fail@plt+0xb2c>
   11568:	b	11634 <__assert_fail@plt+0xb7c>
   1156c:	mov	r0, #7
   11570:	b	11634 <__assert_fail@plt+0xb7c>
   11574:	mov	r0, #9
   11578:	b	11634 <__assert_fail@plt+0xb7c>
   1157c:	mov	r0, #11
   11580:	b	11634 <__assert_fail@plt+0xb7c>
   11584:	mov	r0, #12
   11588:	b	11634 <__assert_fail@plt+0xb7c>
   1158c:	mov	r2, #3
   11590:	mov	r0, sp
   11594:	mov	r3, #0
   11598:	strb	r3, [sp, #3]
   1159c:	bl	10a4c <strncpy@plt>
   115a0:	mov	r0, sp
   115a4:	add	r1, sp, #4
   115a8:	mov	r2, #8
   115ac:	bl	10938 <strtol@plt>
   115b0:	ldr	r3, [sp, #4]
   115b4:	mov	r4, sp
   115b8:	cmp	r3, r4
   115bc:	rsbhi	r4, r4, r3
   115c0:	bhi	1162c <__assert_fail@plt+0xb74>
   115c4:	ldr	r0, [pc, #116]	; 11640 <__assert_fail@plt+0xb88>
   115c8:	mov	r2, #150	; 0x96
   115cc:	ldr	r1, [pc, #112]	; 11644 <__assert_fail@plt+0xb8c>
   115d0:	ldr	r3, [pc, #112]	; 11648 <__assert_fail@plt+0xb90>
   115d4:	add	r0, pc, r0
   115d8:	add	r1, pc, r1
   115dc:	add	r3, pc, r3
   115e0:	bl	10ab8 <__assert_fail@plt>
   115e4:	add	r1, r3, r4
   115e8:	mov	r2, #0
   115ec:	mov	r0, sp
   115f0:	strb	r2, [sp, #2]
   115f4:	mov	r2, #2
   115f8:	mov	r5, sp
   115fc:	bl	10a4c <strncpy@plt>
   11600:	mov	r0, sp
   11604:	add	r1, sp, #4
   11608:	mov	r2, #16
   1160c:	bl	10938 <strtol@plt>
   11610:	ldr	r3, [sp, #4]
   11614:	cmp	r3, r5
   11618:	rsbhi	r5, r5, r3
   1161c:	bhi	1162c <__assert_fail@plt+0xb74>
   11620:	ldr	r0, [pc, #36]	; 1164c <__assert_fail@plt+0xb94>
   11624:	add	r0, pc, r0
   11628:	bl	10ac4 <__assert_fail@plt+0xc>
   1162c:	add	r4, r4, r5
   11630:	uxtb	r0, r0
   11634:	str	r4, [r6]
   11638:	add	sp, sp, #8
   1163c:	pop	{r4, r5, r6, pc}
   11640:	andeq	r2, r0, r0, lsr r1
   11644:	andeq	r2, r0, r5, lsr r1
   11648:	ldrdeq	r2, [r0], -r5
   1164c:	strdeq	r2, [r0], -r0
   11650:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11654:	mov	r9, r1
   11658:	mov	r4, #0
   1165c:	str	r4, [r1]
   11660:	ldr	r1, [pc, #208]	; 11738 <__assert_fail@plt+0xc80>
   11664:	mov	r5, r0
   11668:	mov	sl, r2
   1166c:	add	r1, pc, r1
   11670:	bl	1092c <strcmp@plt>
   11674:	cmp	r0, #0
   11678:	beq	1169c <__assert_fail@plt+0xbe4>
   1167c:	mov	r0, r5
   11680:	mov	r1, r4
   11684:	bl	109d4 <open@plt>
   11688:	subs	r8, r0, #0
   1168c:	bge	116a0 <__assert_fail@plt+0xbe8>
   11690:	bl	10a28 <__errno_location@plt>
   11694:	ldr	r0, [r0]
   11698:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1169c:	mov	r8, r0
   116a0:	mov	r0, #1024	; 0x400
   116a4:	mov	r5, #0
   116a8:	bl	112e4 <__assert_fail@plt+0x82c>
   116ac:	mov	r4, #1024	; 0x400
   116b0:	mov	r6, r0
   116b4:	mov	r0, r8
   116b8:	add	r1, r6, r5
   116bc:	rsb	r2, r5, r4
   116c0:	bl	10950 <read@plt>
   116c4:	subs	r7, r0, #0
   116c8:	bge	116d8 <__assert_fail@plt+0xc20>
   116cc:	bl	10a28 <__errno_location@plt>
   116d0:	ldr	r7, [r0]
   116d4:	b	11710 <__assert_fail@plt+0xc58>
   116d8:	add	r5, r5, r7
   116dc:	beq	11710 <__assert_fail@plt+0xc58>
   116e0:	cmp	r5, r4
   116e4:	bne	116b4 <__assert_fail@plt+0xbfc>
   116e8:	lsl	r4, r5, #1
   116ec:	mov	r0, r6
   116f0:	mov	r1, r4
   116f4:	bl	1098c <realloc@plt>
   116f8:	subs	r6, r0, #0
   116fc:	bne	116b4 <__assert_fail@plt+0xbfc>
   11700:	ldr	r0, [pc, #52]	; 1173c <__assert_fail@plt+0xc84>
   11704:	mov	r1, r4
   11708:	add	r0, pc, r0
   1170c:	bl	10ac4 <__assert_fail@plt+0xc>
   11710:	mov	r0, r8
   11714:	bl	10aac <close@plt>
   11718:	cmp	r7, #0
   1171c:	streq	r6, [r9]
   11720:	beq	1172c <__assert_fail@plt+0xc74>
   11724:	mov	r0, r6
   11728:	bl	10968 <free@plt>
   1172c:	str	r4, [sl]
   11730:	mov	r0, r7
   11734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11738:	andeq	r2, r0, lr, asr #1
   1173c:	andeq	r1, r0, r0, ror #31
   11740:	push	{r0, r1, r2, lr}
   11744:	add	r2, sp, #4
   11748:	bl	11650 <__assert_fail@plt+0xb98>
   1174c:	add	sp, sp, #12
   11750:	pop	{pc}		; (ldr pc, [sp], #4)
   11754:	push	{r0, r1, r2, r4, r5, lr}
   11758:	mov	r2, r1
   1175c:	add	r1, sp, #4
   11760:	mov	r5, r0
   11764:	bl	11650 <__assert_fail@plt+0xb98>
   11768:	ldr	r4, [pc, #64]	; 117b0 <__assert_fail@plt+0xcf8>
   1176c:	add	r4, pc, r4
   11770:	cmp	r0, #0
   11774:	ldreq	r0, [sp, #4]
   11778:	beq	117a8 <__assert_fail@plt+0xcf0>
   1177c:	ldr	r3, [pc, #48]	; 117b4 <__assert_fail@plt+0xcfc>
   11780:	ldr	r3, [r4, r3]
   11784:	ldr	r4, [r3]
   11788:	bl	109bc <strerror@plt>
   1178c:	ldr	r1, [pc, #36]	; 117b8 <__assert_fail@plt+0xd00>
   11790:	mov	r2, r5
   11794:	add	r1, pc, r1
   11798:	mov	r3, r0
   1179c:	mov	r0, r4
   117a0:	bl	10a1c <fprintf@plt>
   117a4:	mov	r0, #0
   117a8:	add	sp, sp, #12
   117ac:	pop	{r4, r5, pc}
   117b0:	andeq	r2, r1, ip, lsl #17
   117b4:	muleq	r0, ip, r0
   117b8:	andeq	r1, r0, r8, lsr #31
   117bc:	push	{r0, r1, r2, lr}
   117c0:	add	r1, sp, #4
   117c4:	bl	11754 <__assert_fail@plt+0xc9c>
   117c8:	add	sp, sp, #12
   117cc:	pop	{pc}		; (ldr pc, [sp], #4)
   117d0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   117d4:	mov	r7, r1
   117d8:	ldr	r1, [pc, #188]	; 1189c <__assert_fail@plt+0xde4>
   117dc:	mov	r4, r0
   117e0:	add	r1, pc, r1
   117e4:	bl	1092c <strcmp@plt>
   117e8:	cmp	r0, #0
   117ec:	moveq	r6, #1
   117f0:	beq	11818 <__assert_fail@plt+0xd60>
   117f4:	mov	r0, r4
   117f8:	movw	r1, #577	; 0x241
   117fc:	movw	r2, #438	; 0x1b6
   11800:	bl	109d4 <open@plt>
   11804:	subs	r6, r0, #0
   11808:	bge	11818 <__assert_fail@plt+0xd60>
   1180c:	bl	10a28 <__errno_location@plt>
   11810:	ldr	r0, [r0]
   11814:	b	11894 <__assert_fail@plt+0xddc>
   11818:	ldr	r3, [r7, #4]
   1181c:	mov	r4, #0
   11820:	mov	r5, r4
   11824:	ubfx	r8, r3, #8, #8
   11828:	str	r3, [sp, #4]
   1182c:	lsl	r8, r8, #16
   11830:	orr	r8, r8, r3, lsl #24
   11834:	orr	r8, r8, r3, lsr #24
   11838:	ubfx	r3, r3, #16, #8
   1183c:	orr	r8, r8, r3, lsl #8
   11840:	cmp	r5, r8
   11844:	bge	11878 <__assert_fail@plt+0xdc0>
   11848:	mov	r0, r6
   1184c:	add	r1, r7, r5
   11850:	rsb	r2, r5, r8
   11854:	bl	10a58 <write@plt>
   11858:	subs	r4, r0, #0
   1185c:	bge	11870 <__assert_fail@plt+0xdb8>
   11860:	bl	10a28 <__errno_location@plt>
   11864:	ldr	r4, [r0]
   11868:	rsb	r4, r4, #0
   1186c:	b	11878 <__assert_fail@plt+0xdc0>
   11870:	add	r5, r5, r4
   11874:	b	11840 <__assert_fail@plt+0xd88>
   11878:	cmp	r6, #1
   1187c:	beq	11888 <__assert_fail@plt+0xdd0>
   11880:	mov	r0, r6
   11884:	bl	10aac <close@plt>
   11888:	cmp	r4, #0
   1188c:	rsblt	r0, r4, #0
   11890:	movge	r0, #0
   11894:	add	sp, sp, #8
   11898:	pop	{r4, r5, r6, r7, r8, pc}
   1189c:	andeq	r1, r0, sl, asr pc
   118a0:	push	{r3, r4, r5, lr}
   118a4:	mov	r5, r0
   118a8:	bl	117d0 <__assert_fail@plt+0xd18>
   118ac:	ldr	r4, [pc, #64]	; 118f4 <__assert_fail@plt+0xe3c>
   118b0:	add	r4, pc, r4
   118b4:	subs	r3, r0, #0
   118b8:	beq	118ec <__assert_fail@plt+0xe34>
   118bc:	ldr	r3, [pc, #52]	; 118f8 <__assert_fail@plt+0xe40>
   118c0:	ldr	r3, [r4, r3]
   118c4:	ldr	r4, [r3]
   118c8:	bl	109bc <strerror@plt>
   118cc:	ldr	r1, [pc, #40]	; 118fc <__assert_fail@plt+0xe44>
   118d0:	mov	r2, r5
   118d4:	add	r1, pc, r1
   118d8:	mov	r3, r0
   118dc:	mov	r0, r4
   118e0:	bl	10a1c <fprintf@plt>
   118e4:	mvn	r0, #0
   118e8:	pop	{r3, r4, r5, pc}
   118ec:	mov	r0, r3
   118f0:	pop	{r3, r4, r5, pc}
   118f4:	andeq	r2, r1, r8, asr #14
   118f8:	muleq	r0, ip, r0
   118fc:	andeq	r1, r0, sl, lsl #29
   11900:	push	{r4, r5, r6, r7, r8, lr}
   11904:	mov	r4, r0
   11908:	ldrb	r3, [r0]
   1190c:	mov	r8, r1
   11910:	mov	r7, r2
   11914:	cmp	r3, #0
   11918:	bne	11924 <__assert_fail@plt+0xe6c>
   1191c:	mvn	r0, #0
   11920:	pop	{r4, r5, r6, r7, r8, pc}
   11924:	mvn	r3, #0
   11928:	str	r3, [r2]
   1192c:	ldrb	r5, [r0]
   11930:	ldr	r0, [pc, #156]	; 119d4 <__assert_fail@plt+0xf1c>
   11934:	mov	r1, r5
   11938:	add	r0, pc, r0
   1193c:	bl	10a10 <strchr@plt>
   11940:	cmp	r0, #0
   11944:	moveq	r5, r0
   11948:	beq	11968 <__assert_fail@plt+0xeb0>
   1194c:	ldrb	r3, [r4, #1]
   11950:	cmp	r5, r3
   11954:	addne	r4, r4, #1
   11958:	bne	11968 <__assert_fail@plt+0xeb0>
   1195c:	cmp	r5, #104	; 0x68
   11960:	add	r4, r4, #2
   11964:	moveq	r5, #98	; 0x62
   11968:	ldrb	r6, [r4]
   1196c:	cmp	r6, #0
   11970:	beq	1191c <__assert_fail@plt+0xe64>
   11974:	ldr	r0, [pc, #92]	; 119d8 <__assert_fail@plt+0xf20>
   11978:	mov	r1, r6
   1197c:	add	r0, pc, r0
   11980:	bl	10a10 <strchr@plt>
   11984:	cmp	r0, #0
   11988:	beq	1191c <__assert_fail@plt+0xe64>
   1198c:	cmp	r6, #115	; 0x73
   11990:	beq	119bc <__assert_fail@plt+0xf04>
   11994:	cmp	r5, #98	; 0x62
   11998:	moveq	r3, #1
   1199c:	beq	119b8 <__assert_fail@plt+0xf00>
   119a0:	cmp	r5, #104	; 0x68
   119a4:	moveq	r3, #2
   119a8:	beq	119b8 <__assert_fail@plt+0xf00>
   119ac:	cmp	r5, #108	; 0x6c
   119b0:	mvnne	r3, #0
   119b4:	moveq	r3, #4
   119b8:	str	r3, [r7]
   119bc:	ldrb	r3, [r4]
   119c0:	str	r3, [r8]
   119c4:	ldrb	r0, [r4, #1]
   119c8:	subs	r0, r0, #0
   119cc:	mvnne	r0, #0
   119d0:	pop	{r4, r5, r6, r7, r8, pc}
   119d4:	andeq	r1, r0, r7, asr #28
   119d8:	andeq	r1, r0, r8, lsl #28
   119dc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   119e0:	subs	r4, r1, #0
   119e4:	mov	r6, r0
   119e8:	beq	11b3c <__assert_fail@plt+0x1084>
   119ec:	bl	11458 <__assert_fail@plt+0x9a0>
   119f0:	subs	r5, r0, #0
   119f4:	beq	11a4c <__assert_fail@plt+0xf94>
   119f8:	ldr	r0, [pc, #324]	; 11b44 <__assert_fail@plt+0x108c>
   119fc:	mov	r5, r6
   11a00:	ldr	r7, [pc, #320]	; 11b48 <__assert_fail@plt+0x1090>
   11a04:	add	r4, r6, r4
   11a08:	add	r0, pc, r0
   11a0c:	ldr	r6, [pc, #312]	; 11b4c <__assert_fail@plt+0x1094>
   11a10:	bl	10944 <printf@plt>
   11a14:	add	r7, pc, r7
   11a18:	add	r6, pc, r6
   11a1c:	mov	r1, r5
   11a20:	mov	r0, r7
   11a24:	bl	10944 <printf@plt>
   11a28:	mov	r0, r5
   11a2c:	bl	10a04 <strlen@plt>
   11a30:	add	r0, r0, #1
   11a34:	add	r5, r5, r0
   11a38:	cmp	r5, r4
   11a3c:	bcs	11b3c <__assert_fail@plt+0x1084>
   11a40:	mov	r0, r6
   11a44:	bl	10944 <printf@plt>
   11a48:	b	11a1c <__assert_fail@plt+0xf64>
   11a4c:	ands	r7, r4, #3
   11a50:	bne	11adc <__assert_fail@plt+0x1024>
   11a54:	ldr	r0, [pc, #244]	; 11b50 <__assert_fail@plt+0x1098>
   11a58:	mov	r5, r7
   11a5c:	ldr	r8, [pc, #240]	; 11b54 <__assert_fail@plt+0x109c>
   11a60:	add	r0, pc, r0
   11a64:	ldr	r7, [pc, #236]	; 11b58 <__assert_fail@plt+0x10a0>
   11a68:	bl	10944 <printf@plt>
   11a6c:	add	r3, r4, #3
   11a70:	cmp	r4, #0
   11a74:	ldr	r9, [pc, #224]	; 11b5c <__assert_fail@plt+0x10a4>
   11a78:	add	r7, pc, r7
   11a7c:	add	r8, pc, r8
   11a80:	movlt	r4, r3
   11a84:	add	r9, pc, r9
   11a88:	asr	r4, r4, #2
   11a8c:	cmp	r5, r4
   11a90:	bge	11ad4 <__assert_fail@plt+0x101c>
   11a94:	ldr	r3, [r6, r5, lsl #2]
   11a98:	sub	r2, r4, #1
   11a9c:	cmp	r5, r2
   11aa0:	mov	r0, r9
   11aa4:	ubfx	r1, r3, #8, #8
   11aa8:	add	r5, r5, #1
   11aac:	str	r3, [sp, #4]
   11ab0:	movge	r2, r7
   11ab4:	movlt	r2, r8
   11ab8:	lsl	r1, r1, #16
   11abc:	orr	r1, r1, r3, lsl #24
   11ac0:	orr	r1, r1, r3, lsr #24
   11ac4:	ubfx	r3, r3, #16, #8
   11ac8:	orr	r1, r1, r3, lsl #8
   11acc:	bl	10944 <printf@plt>
   11ad0:	b	11a8c <__assert_fail@plt+0xfd4>
   11ad4:	mov	r0, #62	; 0x3e
   11ad8:	b	11b30 <__assert_fail@plt+0x1078>
   11adc:	ldr	r0, [pc, #124]	; 11b60 <__assert_fail@plt+0x10a8>
   11ae0:	ldr	r7, [pc, #124]	; 11b64 <__assert_fail@plt+0x10ac>
   11ae4:	add	r0, pc, r0
   11ae8:	ldr	r8, [pc, #120]	; 11b68 <__assert_fail@plt+0x10b0>
   11aec:	bl	10944 <printf@plt>
   11af0:	ldr	r9, [pc, #116]	; 11b6c <__assert_fail@plt+0x10b4>
   11af4:	add	r7, pc, r7
   11af8:	add	r8, pc, r8
   11afc:	add	r9, pc, r9
   11b00:	cmp	r5, r4
   11b04:	bge	11b2c <__assert_fail@plt+0x1074>
   11b08:	sub	r3, r4, #1
   11b0c:	ldrb	r1, [r6, r5]
   11b10:	cmp	r5, r3
   11b14:	mov	r0, r9
   11b18:	add	r5, r5, #1
   11b1c:	movge	r2, r7
   11b20:	movlt	r2, r8
   11b24:	bl	10944 <printf@plt>
   11b28:	b	11b00 <__assert_fail@plt+0x1048>
   11b2c:	mov	r0, #93	; 0x5d
   11b30:	add	sp, sp, #12
   11b34:	pop	{r4, r5, r6, r7, r8, r9, lr}
   11b38:	b	10a40 <putchar@plt>
   11b3c:	add	sp, sp, #12
   11b40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11b44:	andeq	r1, r0, r1, lsl #27
   11b48:	andeq	r1, r0, r9, ror sp
   11b4c:	andeq	r1, r0, lr, ror #27
   11b50:	andeq	r1, r0, r2, lsr sp
   11b54:	andeq	r1, r0, r3, lsl #27
   11b58:	andeq	r1, r0, fp, lsl #25
   11b5c:	andeq	r1, r0, r3, lsl sp
   11b60:			; <UNDEFINED> instruction: 0x00001cbc
   11b64:	andeq	r1, r0, pc, lsl #24
   11b68:	andeq	r1, r0, r7, lsl #26
   11b6c:	andeq	r1, r0, r9, lsr #25
   11b70:	ldr	r0, [pc, #24]	; 11b90 <__assert_fail@plt+0x10d8>
   11b74:	ldr	r1, [pc, #24]	; 11b94 <__assert_fail@plt+0x10dc>
   11b78:	push	{r3, lr}
   11b7c:	add	r0, pc, r0
   11b80:	add	r1, pc, r1
   11b84:	bl	10944 <printf@plt>
   11b88:	mov	r0, #0
   11b8c:	bl	109f8 <exit@plt>
   11b90:	andeq	r1, r0, r0, lsr ip
   11b94:	andeq	r1, r0, r9, lsr ip
   11b98:	ldr	ip, [pc, #444]	; 11d5c <__assert_fail@plt+0x12a4>
   11b9c:	subs	r8, r0, #0
   11ba0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, fp, lr}
   11ba4:	add	ip, pc, ip
   11ba8:	mov	r6, r1
   11bac:	mov	lr, r2
   11bb0:	mov	r5, r3
   11bb4:	ldrne	r3, [pc, #420]	; 11d60 <__assert_fail@plt+0x12a8>
   11bb8:	ldreq	r3, [pc, #420]	; 11d64 <__assert_fail@plt+0x12ac>
   11bbc:	ldr	r3, [ip, r3]
   11bc0:	mov	r2, r6
   11bc4:	ldr	ip, [pc, #412]	; 11d68 <__assert_fail@plt+0x12b0>
   11bc8:	mov	r6, #0
   11bcc:	ldr	r1, [pc, #408]	; 11d6c <__assert_fail@plt+0x12b4>
   11bd0:	mov	r7, r6
   11bd4:	add	ip, pc, ip
   11bd8:	ldr	r4, [r3]
   11bdc:	add	r1, pc, r1
   11be0:	ldr	r0, [ip]
   11be4:	ldrh	r3, [ip, #4]
   11be8:	str	r0, [sp, #16]
   11bec:	mov	r0, r4
   11bf0:	strh	r3, [sp, #20]
   11bf4:	mov	r3, lr
   11bf8:	bl	10a1c <fprintf@plt>
   11bfc:	ldr	r0, [r5, r6]
   11c00:	cmp	r0, #0
   11c04:	beq	11c30 <__assert_fail@plt+0x1178>
   11c08:	bl	10a04 <strlen@plt>
   11c0c:	add	r3, r5, r6
   11c10:	add	r6, r6, #16
   11c14:	ldr	r3, [r3, #4]
   11c18:	cmp	r3, #1
   11c1c:	addne	r0, r0, #1
   11c20:	addeq	r0, r0, #7
   11c24:	cmp	r7, r0
   11c28:	movlt	r7, r0
   11c2c:	b	11bfc <__assert_fail@plt+0x1144>
   11c30:	ldr	r6, [sp, #40]	; 0x28
   11c34:	ldr	r9, [pc, #308]	; 11d70 <__assert_fail@plt+0x12b8>
   11c38:	ldr	sl, [pc, #308]	; 11d74 <__assert_fail@plt+0x12bc>
   11c3c:	sub	r6, r6, #4
   11c40:	ldr	fp, [pc, #304]	; 11d78 <__assert_fail@plt+0x12c0>
   11c44:	add	r9, pc, r9
   11c48:	add	sl, pc, sl
   11c4c:	add	fp, pc, fp
   11c50:	ldr	r3, [r5]
   11c54:	cmp	r3, #0
   11c58:	beq	11d34 <__assert_fail@plt+0x127c>
   11c5c:	ldr	r3, [r6, #4]
   11c60:	cmp	r3, #0
   11c64:	bne	11c8c <__assert_fail@plt+0x11d4>
   11c68:	ldr	r3, [pc, #268]	; 11d7c <__assert_fail@plt+0x12c4>
   11c6c:	movw	r2, #450	; 0x1c2
   11c70:	ldr	r0, [pc, #264]	; 11d80 <__assert_fail@plt+0x12c8>
   11c74:	ldr	r1, [pc, #264]	; 11d84 <__assert_fail@plt+0x12cc>
   11c78:	add	r3, pc, r3
   11c7c:	add	r0, pc, r0
   11c80:	add	r3, r3, #13
   11c84:	add	r1, pc, r1
   11c88:	bl	10ab8 <__assert_fail@plt>
   11c8c:	ldr	r2, [r5, #12]
   11c90:	cmp	r2, #126	; 0x7e
   11c94:	ble	11ca8 <__assert_fail@plt+0x11f0>
   11c98:	mov	r0, sl
   11c9c:	mov	r1, r4
   11ca0:	bl	10a94 <fputs@plt>
   11ca4:	b	11cb4 <__assert_fail@plt+0x11fc>
   11ca8:	mov	r0, r4
   11cac:	mov	r1, r9
   11cb0:	bl	10a1c <fprintf@plt>
   11cb4:	ldr	r3, [r5, #4]
   11cb8:	cmp	r3, #0
   11cbc:	bne	11cdc <__assert_fail@plt+0x1224>
   11cc0:	ldr	r1, [pc, #192]	; 11d88 <__assert_fail@plt+0x12d0>
   11cc4:	mov	r0, r4
   11cc8:	mov	r2, r7
   11ccc:	ldr	r3, [r5]
   11cd0:	add	r1, pc, r1
   11cd4:	bl	10a1c <fprintf@plt>
   11cd8:	b	11d18 <__assert_fail@plt+0x1260>
   11cdc:	ldr	r2, [r5]
   11ce0:	mov	r0, r2
   11ce4:	str	r2, [sp, #12]
   11ce8:	bl	10a04 <strlen@plt>
   11cec:	sub	r3, r7, #6
   11cf0:	mov	r1, fp
   11cf4:	ldr	r2, [sp, #12]
   11cf8:	rsb	r0, r0, r3
   11cfc:	ldr	r3, [pc, #136]	; 11d8c <__assert_fail@plt+0x12d4>
   11d00:	str	r0, [sp]
   11d04:	mov	r0, r4
   11d08:	add	r3, pc, r3
   11d0c:	str	r3, [sp, #4]
   11d10:	add	r3, sp, #16
   11d14:	bl	10a1c <fprintf@plt>
   11d18:	ldr	r1, [pc, #112]	; 11d90 <__assert_fail@plt+0x12d8>
   11d1c:	mov	r0, r4
   11d20:	ldr	r2, [r6, #4]!
   11d24:	add	r5, r5, #16
   11d28:	add	r1, pc, r1
   11d2c:	bl	10a1c <fprintf@plt>
   11d30:	b	11c50 <__assert_fail@plt+0x1198>
   11d34:	cmp	r8, #0
   11d38:	moveq	r0, r8
   11d3c:	beq	11d58 <__assert_fail@plt+0x12a0>
   11d40:	ldr	r1, [pc, #76]	; 11d94 <__assert_fail@plt+0x12dc>
   11d44:	mov	r0, r4
   11d48:	mov	r2, r8
   11d4c:	add	r1, pc, r1
   11d50:	bl	10a1c <fprintf@plt>
   11d54:	mov	r0, #1
   11d58:	bl	109f8 <exit@plt>
   11d5c:	andeq	r2, r1, r4, asr r4
   11d60:	muleq	r0, ip, r0
   11d64:	andeq	r0, r0, r4, lsr #1
   11d68:	andeq	r1, r0, r3, asr ip
   11d6c:	andeq	r1, r0, r7, ror #23
   11d70:			; <UNDEFINED> instruction: 0x00001bbd
   11d74:			; <UNDEFINED> instruction: 0x00001bb2
   11d78:	andeq	r1, r0, r4, asr #23
   11d7c:	andeq	r1, r0, r9, lsr sl
   11d80:	andeq	r1, r0, r2, ror #22
   11d84:	andeq	r1, r0, r9, lsl #21
   11d88:	andeq	r1, r0, r9, lsr fp
   11d8c:	strdeq	r1, [r0], -fp
   11d90:	andeq	r1, r0, r2, lsr sl
   11d94:	andeq	r1, r0, pc, asr #21
   11d98:	ubfx	r3, r0, #8, #8
   11d9c:	sub	sp, sp, #8
   11da0:	lsl	r3, r3, #16
   11da4:	orr	r3, r3, r0, lsl #24
   11da8:	orr	r3, r3, r0, lsr #24
   11dac:	ubfx	r0, r0, #16, #8
   11db0:	orr	r0, r3, r0, lsl #8
   11db4:	add	sp, sp, #8
   11db8:	bx	lr
   11dbc:	push	{r4, lr}
   11dc0:	mov	r4, r0
   11dc4:	ldr	r0, [r0]
   11dc8:	bl	11d98 <__assert_fail@plt+0x12e0>
   11dcc:	ldr	r3, [pc, #96]	; 11e34 <__assert_fail@plt+0x137c>
   11dd0:	cmp	r0, r3
   11dd4:	bne	11e00 <__assert_fail@plt+0x1348>
   11dd8:	ldr	r0, [r4, #20]
   11ddc:	bl	11d98 <__assert_fail@plt+0x12e0>
   11de0:	cmp	r0, #15
   11de4:	bls	11e24 <__assert_fail@plt+0x136c>
   11de8:	ldr	r0, [r4, #24]
   11dec:	bl	11d98 <__assert_fail@plt+0x12e0>
   11df0:	cmp	r0, #17
   11df4:	mvnhi	r0, #9
   11df8:	movls	r0, #0
   11dfc:	pop	{r4, pc}
   11e00:	ldr	r3, [pc, #48]	; 11e38 <__assert_fail@plt+0x1380>
   11e04:	cmp	r0, r3
   11e08:	bne	11e2c <__assert_fail@plt+0x1374>
   11e0c:	ldr	r0, [r4, #36]	; 0x24
   11e10:	bl	11d98 <__assert_fail@plt+0x12e0>
   11e14:	cmp	r0, #0
   11e18:	mvneq	r0, #6
   11e1c:	movne	r0, #0
   11e20:	pop	{r4, pc}
   11e24:	mvn	r0, #9
   11e28:	pop	{r4, pc}
   11e2c:	mvn	r0, #8
   11e30:	pop	{r4, pc}
   11e34:	andle	pc, sp, sp, ror #29
   11e38:	svccs	0x00f20112
   11e3c:	push	{r4, r5, r6, r7, r8, lr}
   11e40:	mov	r4, r0
   11e44:	ldr	r0, [r0, #8]
   11e48:	mov	r5, r1
   11e4c:	mov	r7, r2
   11e50:	bl	11d98 <__assert_fail@plt+0x12e0>
   11e54:	adds	r6, r0, r5
   11e58:	bcs	11ea4 <__assert_fail@plt+0x13ec>
   11e5c:	adds	r8, r6, r7
   11e60:	bcs	11ea4 <__assert_fail@plt+0x13ec>
   11e64:	ldr	r0, [r4, #4]
   11e68:	bl	11d98 <__assert_fail@plt+0x12e0>
   11e6c:	cmp	r8, r0
   11e70:	bhi	11ea4 <__assert_fail@plt+0x13ec>
   11e74:	ldr	r0, [r4, #20]
   11e78:	bl	11d98 <__assert_fail@plt+0x12e0>
   11e7c:	cmp	r0, #16
   11e80:	bls	11e9c <__assert_fail@plt+0x13e4>
   11e84:	adds	r5, r5, r7
   11e88:	bcs	11ea4 <__assert_fail@plt+0x13ec>
   11e8c:	ldr	r0, [r4, #36]	; 0x24
   11e90:	bl	11d98 <__assert_fail@plt+0x12e0>
   11e94:	cmp	r5, r0
   11e98:	bhi	11ea4 <__assert_fail@plt+0x13ec>
   11e9c:	add	r0, r4, r6
   11ea0:	pop	{r4, r5, r6, r7, r8, pc}
   11ea4:	mov	r0, #0
   11ea8:	pop	{r4, r5, r6, r7, r8, pc}
   11eac:	push	{r4, r5, r6, r7, r8, lr}
   11eb0:	mvn	r3, #7
   11eb4:	mov	r5, r2
   11eb8:	str	r3, [r2]
   11ebc:	mov	r2, #4
   11ec0:	mov	r7, r0
   11ec4:	mov	r6, r1
   11ec8:	bl	11e3c <__assert_fail@plt+0x1384>
   11ecc:	cmp	r0, #0
   11ed0:	beq	11fa0 <__assert_fail@plt+0x14e8>
   11ed4:	ldr	r0, [r0]
   11ed8:	add	r4, r6, #4
   11edc:	bl	11d98 <__assert_fail@plt+0x12e0>
   11ee0:	mvn	r3, #10
   11ee4:	str	r3, [r5]
   11ee8:	sub	r3, r0, #1
   11eec:	mov	r8, r0
   11ef0:	cmp	r3, #8
   11ef4:	addls	pc, pc, r3, lsl #2
   11ef8:	b	11fa0 <__assert_fail@plt+0x14e8>
   11efc:	b	11f2c <__assert_fail@plt+0x1474>
   11f00:	b	11f74 <__assert_fail@plt+0x14bc>
   11f04:	b	11f4c <__assert_fail@plt+0x1494>
   11f08:	b	11f74 <__assert_fail@plt+0x14bc>
   11f0c:	b	11fa0 <__assert_fail@plt+0x14e8>
   11f10:	b	11fa0 <__assert_fail@plt+0x14e8>
   11f14:	b	11fa0 <__assert_fail@plt+0x14e8>
   11f18:	b	11fa0 <__assert_fail@plt+0x14e8>
   11f1c:	b	11f74 <__assert_fail@plt+0x14bc>
   11f20:	ldrb	r3, [r0]
   11f24:	cmp	r3, #0
   11f28:	beq	11f74 <__assert_fail@plt+0x14bc>
   11f2c:	mov	r1, r4
   11f30:	mov	r0, r7
   11f34:	mov	r2, #1
   11f38:	add	r4, r4, #1
   11f3c:	bl	11e3c <__assert_fail@plt+0x1384>
   11f40:	cmp	r0, #0
   11f44:	bne	11f20 <__assert_fail@plt+0x1468>
   11f48:	b	11fa0 <__assert_fail@plt+0x14e8>
   11f4c:	mov	r0, r7
   11f50:	mov	r1, r4
   11f54:	mov	r2, #4
   11f58:	bl	11e3c <__assert_fail@plt+0x1384>
   11f5c:	cmp	r0, #0
   11f60:	beq	11fa0 <__assert_fail@plt+0x14e8>
   11f64:	ldr	r0, [r0]
   11f68:	add	r4, r6, #12
   11f6c:	bl	11d98 <__assert_fail@plt+0x12e0>
   11f70:	add	r4, r4, r0
   11f74:	mov	r0, r7
   11f78:	mov	r1, r6
   11f7c:	rsb	r2, r6, r4
   11f80:	bl	11e3c <__assert_fail@plt+0x1384>
   11f84:	cmp	r0, #0
   11f88:	beq	11fa0 <__assert_fail@plt+0x14e8>
   11f8c:	add	r4, r4, #3
   11f90:	mov	r0, r8
   11f94:	bic	r4, r4, #3
   11f98:	str	r4, [r5]
   11f9c:	pop	{r4, r5, r6, r7, r8, pc}
   11fa0:	mov	r0, #9
   11fa4:	pop	{r4, r5, r6, r7, r8, pc}
   11fa8:	subs	r3, r1, #0
   11fac:	push	{r0, r1, r2, lr}
   11fb0:	str	r1, [sp, #4]
   11fb4:	bge	11fc0 <__assert_fail@plt+0x1508>
   11fb8:	mvn	r0, #3
   11fbc:	b	11fdc <__assert_fail@plt+0x1524>
   11fc0:	tst	r3, #3
   11fc4:	bne	11fb8 <__assert_fail@plt+0x1500>
   11fc8:	add	r2, sp, #4
   11fcc:	bl	11eac <__assert_fail@plt+0x13f4>
   11fd0:	cmp	r0, #1
   11fd4:	bne	11fb8 <__assert_fail@plt+0x1500>
   11fd8:	ldr	r0, [sp, #4]
   11fdc:	add	sp, sp, #12
   11fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   11fe4:	subs	r3, r1, #0
   11fe8:	push	{r0, r1, r2, lr}
   11fec:	str	r1, [sp, #4]
   11ff0:	bge	11ffc <__assert_fail@plt+0x1544>
   11ff4:	mvn	r0, #3
   11ff8:	b	12018 <__assert_fail@plt+0x1560>
   11ffc:	tst	r3, #3
   12000:	bne	11ff4 <__assert_fail@plt+0x153c>
   12004:	add	r2, sp, #4
   12008:	bl	11eac <__assert_fail@plt+0x13f4>
   1200c:	cmp	r0, #3
   12010:	bne	11ff4 <__assert_fail@plt+0x153c>
   12014:	ldr	r0, [sp, #4]
   12018:	add	sp, sp, #12
   1201c:	pop	{pc}		; (ldr pc, [sp], #4)
   12020:	mov	r3, #0
   12024:	cmp	r1, r3
   12028:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1202c:	mov	r6, r0
   12030:	mov	r4, r2
   12034:	str	r3, [sp, #4]
   12038:	bge	12044 <__assert_fail@plt+0x158c>
   1203c:	add	r7, sp, #4
   12040:	b	12068 <__assert_fail@plt+0x15b0>
   12044:	bl	11fa8 <__assert_fail@plt+0x14f0>
   12048:	cmp	r0, #0
   1204c:	str	r0, [sp, #4]
   12050:	bge	1203c <__assert_fail@plt+0x1584>
   12054:	b	120f0 <__assert_fail@plt+0x1638>
   12058:	cmp	r0, #9
   1205c:	beq	120c0 <__assert_fail@plt+0x1608>
   12060:	cmp	r0, #1
   12064:	beq	12088 <__assert_fail@plt+0x15d0>
   12068:	ldr	r5, [sp, #4]
   1206c:	mov	r0, r6
   12070:	mov	r2, r7
   12074:	mov	r1, r5
   12078:	bl	11eac <__assert_fail@plt+0x13f4>
   1207c:	cmp	r0, #2
   12080:	bne	12058 <__assert_fail@plt+0x15a0>
   12084:	b	1209c <__assert_fail@plt+0x15e4>
   12088:	cmp	r4, #0
   1208c:	ldrne	r3, [r4]
   12090:	addne	r3, r3, #1
   12094:	strne	r3, [r4]
   12098:	b	120ec <__assert_fail@plt+0x1634>
   1209c:	cmp	r4, #0
   120a0:	beq	12068 <__assert_fail@plt+0x15b0>
   120a4:	ldr	r3, [r4]
   120a8:	sub	r3, r3, #1
   120ac:	str	r3, [r4]
   120b0:	cmp	r3, #0
   120b4:	bge	12068 <__assert_fail@plt+0x15b0>
   120b8:	ldr	r0, [sp, #4]
   120bc:	b	120f0 <__assert_fail@plt+0x1638>
   120c0:	ldr	r0, [sp, #4]
   120c4:	cmp	r0, #0
   120c8:	bge	120e4 <__assert_fail@plt+0x162c>
   120cc:	cmn	r0, #8
   120d0:	bne	120f0 <__assert_fail@plt+0x1638>
   120d4:	cmp	r4, #0
   120d8:	mvneq	r0, #0
   120dc:	mvnne	r0, #7
   120e0:	b	120f0 <__assert_fail@plt+0x1638>
   120e4:	mvn	r0, #0
   120e8:	b	120f0 <__assert_fail@plt+0x1638>
   120ec:	mov	r0, r5
   120f0:	add	sp, sp, #12
   120f4:	pop	{r4, r5, r6, r7, pc}
   120f8:	push	{r0, r1, r2, lr}
   120fc:	add	r2, sp, #8
   12100:	mov	r3, #0
   12104:	str	r3, [r2, #-4]!
   12108:	bl	12020 <__assert_fail@plt+0x1568>
   1210c:	cmp	r0, #0
   12110:	blt	12124 <__assert_fail@plt+0x166c>
   12114:	ldr	r3, [sp, #4]
   12118:	cmp	r3, #1
   1211c:	mvnne	r0, #0
   12120:	b	12128 <__assert_fail@plt+0x1670>
   12124:	mvn	r0, #0
   12128:	add	sp, sp, #12
   1212c:	pop	{pc}		; (ldr pc, [sp], #4)
   12130:	push	{r0, r1, r2, r4, r5, lr}
   12134:	add	r4, sp, #8
   12138:	mov	r5, r0
   1213c:	mov	r3, #1
   12140:	str	r3, [r4, #-4]!
   12144:	mov	r0, r5
   12148:	mov	r2, r4
   1214c:	bl	12020 <__assert_fail@plt+0x1568>
   12150:	subs	r1, r0, #0
   12154:	blt	12174 <__assert_fail@plt+0x16bc>
   12158:	ldr	r3, [sp, #4]
   1215c:	cmp	r3, #0
   12160:	ble	12174 <__assert_fail@plt+0x16bc>
   12164:	cmp	r3, #1
   12168:	bne	12144 <__assert_fail@plt+0x168c>
   1216c:	mov	r0, r1
   12170:	b	12178 <__assert_fail@plt+0x16c0>
   12174:	mvn	r0, #0
   12178:	add	sp, sp, #12
   1217c:	pop	{r4, r5, pc}
   12180:	push	{r3, r4, r5, r6, r7, lr}
   12184:	mov	r4, r0
   12188:	mov	r0, r2
   1218c:	mov	r7, r1
   12190:	mov	r5, r2
   12194:	bl	10a04 <strlen@plt>
   12198:	add	r6, r0, #1
   1219c:	rsb	r7, r6, r7
   121a0:	add	r7, r4, r7
   121a4:	cmp	r4, r7
   121a8:	bhi	121cc <__assert_fail@plt+0x1714>
   121ac:	mov	r0, r4
   121b0:	mov	r1, r5
   121b4:	mov	r2, r6
   121b8:	bl	10980 <memcmp@plt>
   121bc:	cmp	r0, #0
   121c0:	beq	121d4 <__assert_fail@plt+0x171c>
   121c4:	add	r4, r4, #1
   121c8:	b	121a4 <__assert_fail@plt+0x16ec>
   121cc:	mov	r0, #0
   121d0:	pop	{r3, r4, r5, r6, r7, pc}
   121d4:	mov	r0, r4
   121d8:	pop	{r3, r4, r5, r6, r7, pc}
   121dc:	push	{r3, r4, r5, r6, r7, lr}
   121e0:	mov	r5, r0
   121e4:	mov	r6, r1
   121e8:	mov	r7, r2
   121ec:	bl	11dbc <__assert_fail@plt+0x1304>
   121f0:	subs	r4, r0, #0
   121f4:	bne	12218 <__assert_fail@plt+0x1760>
   121f8:	ldr	r0, [r5, #4]
   121fc:	bl	11d98 <__assert_fail@plt+0x12e0>
   12200:	cmp	r0, r7
   12204:	mov	r2, r0
   12208:	bhi	12220 <__assert_fail@plt+0x1768>
   1220c:	mov	r0, r6
   12210:	mov	r1, r5
   12214:	bl	1095c <memmove@plt>
   12218:	mov	r0, r4
   1221c:	pop	{r3, r4, r5, r6, r7, pc}
   12220:	mvn	r0, #2
   12224:	pop	{r3, r4, r5, r6, r7, pc}
   12228:	ubfx	r3, r0, #8, #8
   1222c:	sub	sp, sp, #8
   12230:	lsl	r3, r3, #16
   12234:	orr	r3, r3, r0, lsl #24
   12238:	orr	r3, r3, r0, lsr #24
   1223c:	ubfx	r0, r0, #16, #8
   12240:	orr	r0, r3, r0, lsl #8
   12244:	add	sp, sp, #8
   12248:	bx	lr
   1224c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12250:	lsl	r3, r0, #24
   12254:	strd	r0, [sp]
   12258:	lsl	r0, r0, #8
   1225c:	ldrb	r6, [sp, #2]
   12260:	and	r5, r0, #16711680	; 0xff0000
   12264:	orr	r5, r5, r3
   12268:	mov	r1, #0
   1226c:	orr	r5, r5, r1
   12270:	ldrb	r0, [sp, #7]
   12274:	lsl	r1, r6, #8
   12278:	ldrb	r6, [sp, #4]
   1227c:	mov	r2, #0
   12280:	orr	r4, r2, r2
   12284:	orr	r4, r4, r0
   12288:	orr	r5, r5, r1
   1228c:	lsl	r0, r6, #24
   12290:	ldrb	r6, [sp, #5]
   12294:	orr	r4, r4, r2
   12298:	ldrb	r1, [sp, #3]
   1229c:	orr	r4, r4, r2
   122a0:	orr	r4, r4, r0
   122a4:	lsl	r0, r6, #16
   122a8:	ldrb	r6, [sp, #6]
   122ac:	orr	r5, r5, r1
   122b0:	orr	r5, r5, r2
   122b4:	orr	r4, r4, r0
   122b8:	orr	r5, r5, r2
   122bc:	lsl	r0, r6, #8
   122c0:	orr	r1, r2, r5
   122c4:	orr	r0, r0, r4
   122c8:	add	sp, sp, #12
   122cc:	pop	{r4, r5, r6, r7, pc}
   122d0:	push	{r0, r1, r4, r5, r6, lr}
   122d4:	add	r6, sp, #4
   122d8:	mov	r5, r0
   122dc:	mov	r4, r1
   122e0:	mov	r0, r5
   122e4:	mov	r1, r4
   122e8:	mov	r2, r6
   122ec:	bl	11eac <__assert_fail@plt+0x13f4>
   122f0:	cmp	r0, #3
   122f4:	beq	12324 <__assert_fail@plt+0x186c>
   122f8:	cmp	r0, #9
   122fc:	ldr	r4, [sp, #4]
   12300:	bne	12314 <__assert_fail@plt+0x185c>
   12304:	cmp	r4, #0
   12308:	movlt	r0, r4
   1230c:	mvnge	r0, #10
   12310:	b	12328 <__assert_fail@plt+0x1870>
   12314:	cmp	r0, #4
   12318:	beq	122e0 <__assert_fail@plt+0x1828>
   1231c:	mvn	r0, #0
   12320:	b	12328 <__assert_fail@plt+0x1870>
   12324:	mov	r0, r4
   12328:	add	sp, sp, #8
   1232c:	pop	{r4, r5, r6, pc}
   12330:	push	{r3, r4, r5, lr}
   12334:	mov	r4, r0
   12338:	ldr	r0, [r0, #12]
   1233c:	mov	r5, r1
   12340:	bl	12228 <__assert_fail@plt+0x1770>
   12344:	add	r0, r0, r5
   12348:	add	r0, r4, r0
   1234c:	pop	{r3, r4, r5, pc}
   12350:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12354:	mov	r4, r0
   12358:	mov	r5, r1
   1235c:	mov	r8, r2
   12360:	mov	r7, r3
   12364:	bl	11dbc <__assert_fail@plt+0x1304>
   12368:	subs	r9, r0, #0
   1236c:	bne	123ac <__assert_fail@plt+0x18f4>
   12370:	ldr	r6, [r4, #16]
   12374:	lsl	r5, r5, #4
   12378:	mov	r0, r6
   1237c:	bl	12228 <__assert_fail@plt+0x1770>
   12380:	add	r0, r4, r0
   12384:	ldrd	r0, [r0, r5]
   12388:	bl	1224c <__assert_fail@plt+0x1794>
   1238c:	strd	r0, [r8]
   12390:	mov	r0, r6
   12394:	bl	12228 <__assert_fail@plt+0x1770>
   12398:	add	r0, r4, r0
   1239c:	add	r5, r0, r5
   123a0:	ldrd	r0, [r5, #8]
   123a4:	bl	1224c <__assert_fail@plt+0x1794>
   123a8:	strd	r0, [r7]
   123ac:	mov	r0, r9
   123b0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   123b4:	push	{r3, r4, r5, lr}
   123b8:	mov	r5, r0
   123bc:	ldr	r0, [r0, #16]
   123c0:	mov	r4, #0
   123c4:	bl	12228 <__assert_fail@plt+0x1770>
   123c8:	add	r5, r5, r0
   123cc:	ldrd	r0, [r5, #8]
   123d0:	add	r5, r5, #16
   123d4:	bl	1224c <__assert_fail@plt+0x1794>
   123d8:	orrs	r3, r0, r1
   123dc:	addne	r4, r4, #1
   123e0:	bne	123cc <__assert_fail@plt+0x1914>
   123e4:	mov	r0, r4
   123e8:	pop	{r3, r4, r5, pc}
   123ec:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   123f0:	mov	r7, r0
   123f4:	mov	r4, r1
   123f8:	mov	r8, r2
   123fc:	mov	r5, r3
   12400:	bl	11dbc <__assert_fail@plt+0x1304>
   12404:	cmp	r0, #0
   12408:	bne	124b4 <__assert_fail@plt+0x19fc>
   1240c:	add	r6, sp, #8
   12410:	add	sl, r5, #1
   12414:	str	r0, [r6, #-4]!
   12418:	ldr	r3, [sp, #4]
   1241c:	cmp	r4, #0
   12420:	cmpge	r3, #0
   12424:	blt	124a0 <__assert_fail@plt+0x19e8>
   12428:	cmp	r3, #1
   1242c:	bne	12488 <__assert_fail@plt+0x19d0>
   12430:	mov	r0, r7
   12434:	add	r1, r4, #4
   12438:	mov	r2, sl
   1243c:	bl	11e3c <__assert_fail@plt+0x1384>
   12440:	subs	r9, r0, #0
   12444:	beq	12488 <__assert_fail@plt+0x19d0>
   12448:	mov	r1, r8
   1244c:	mov	r2, r5
   12450:	bl	10980 <memcmp@plt>
   12454:	cmp	r0, #0
   12458:	bne	12488 <__assert_fail@plt+0x19d0>
   1245c:	ldrb	r9, [r9, r5]
   12460:	cmp	r9, #0
   12464:	beq	124b0 <__assert_fail@plt+0x19f8>
   12468:	mov	r0, r8
   1246c:	mov	r1, #64	; 0x40
   12470:	mov	r2, r5
   12474:	bl	10a64 <memchr@plt>
   12478:	cmp	r0, #0
   1247c:	bne	12488 <__assert_fail@plt+0x19d0>
   12480:	cmp	r9, #64	; 0x40
   12484:	beq	124b0 <__assert_fail@plt+0x19f8>
   12488:	mov	r1, r4
   1248c:	mov	r0, r7
   12490:	mov	r2, r6
   12494:	bl	12020 <__assert_fail@plt+0x1568>
   12498:	mov	r4, r0
   1249c:	b	12418 <__assert_fail@plt+0x1960>
   124a0:	cmp	r3, #0
   124a4:	movge	r0, r4
   124a8:	mvnlt	r0, #0
   124ac:	b	124b4 <__assert_fail@plt+0x19fc>
   124b0:	mov	r0, r4
   124b4:	add	sp, sp, #8
   124b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124bc:	push	{r4, r5, r6, lr}
   124c0:	mov	r5, r0
   124c4:	mov	r0, r2
   124c8:	mov	r6, r1
   124cc:	mov	r4, r2
   124d0:	bl	10a04 <strlen@plt>
   124d4:	mov	r1, r6
   124d8:	mov	r2, r4
   124dc:	mov	r3, r0
   124e0:	mov	r0, r5
   124e4:	pop	{r4, r5, r6, lr}
   124e8:	b	123ec <__assert_fail@plt+0x1934>
   124ec:	push	{r3, r4, r5, r6, r7, lr}
   124f0:	mov	r5, r0
   124f4:	ldr	r0, [r0, #8]
   124f8:	mov	r6, r1
   124fc:	mov	r4, r2
   12500:	bl	12228 <__assert_fail@plt+0x1770>
   12504:	mov	r7, r0
   12508:	mov	r0, r5
   1250c:	bl	11dbc <__assert_fail@plt+0x1304>
   12510:	cmp	r0, #0
   12514:	bne	12554 <__assert_fail@plt+0x1a9c>
   12518:	mov	r0, r5
   1251c:	mov	r1, r6
   12520:	bl	11fa8 <__assert_fail@plt+0x14f0>
   12524:	cmp	r0, #0
   12528:	blt	12554 <__assert_fail@plt+0x1a9c>
   1252c:	add	r6, r7, r6
   12530:	cmp	r4, #0
   12534:	add	r5, r5, r6
   12538:	add	r5, r5, #4
   1253c:	beq	1254c <__assert_fail@plt+0x1a94>
   12540:	mov	r0, r5
   12544:	bl	10a04 <strlen@plt>
   12548:	str	r0, [r4]
   1254c:	mov	r0, r5
   12550:	pop	{r3, r4, r5, r6, r7, pc}
   12554:	cmp	r4, #0
   12558:	strne	r0, [r4]
   1255c:	movne	r0, #0
   12560:	moveq	r0, r4
   12564:	pop	{r3, r4, r5, r6, r7, pc}
   12568:	push	{r4, lr}
   1256c:	mov	r4, r0
   12570:	bl	11fa8 <__assert_fail@plt+0x14f0>
   12574:	subs	r1, r0, #0
   12578:	poplt	{r4, pc}
   1257c:	mov	r0, r4
   12580:	pop	{r4, lr}
   12584:	b	122d0 <__assert_fail@plt+0x1818>
   12588:	push	{r4, lr}
   1258c:	mov	r4, r0
   12590:	bl	11fe4 <__assert_fail@plt+0x152c>
   12594:	subs	r1, r0, #0
   12598:	poplt	{r4, pc}
   1259c:	mov	r0, r4
   125a0:	pop	{r4, lr}
   125a4:	b	122d0 <__assert_fail@plt+0x1818>
   125a8:	push	{r4, r5, r6, lr}
   125ac:	mov	r6, r0
   125b0:	mov	r5, r1
   125b4:	mov	r4, r2
   125b8:	bl	11fe4 <__assert_fail@plt+0x152c>
   125bc:	cmp	r0, #0
   125c0:	bge	125d4 <__assert_fail@plt+0x1b1c>
   125c4:	cmp	r4, #0
   125c8:	strne	r0, [r4]
   125cc:	mov	r0, #0
   125d0:	pop	{r4, r5, r6, pc}
   125d4:	ldr	r0, [r6, #8]
   125d8:	bl	12228 <__assert_fail@plt+0x1770>
   125dc:	cmp	r4, #0
   125e0:	add	r0, r0, r5
   125e4:	add	r5, r6, r0
   125e8:	beq	125f8 <__assert_fail@plt+0x1b40>
   125ec:	ldr	r0, [r5, #4]
   125f0:	bl	12228 <__assert_fail@plt+0x1770>
   125f4:	str	r0, [r4]
   125f8:	mov	r0, r5
   125fc:	pop	{r4, r5, r6, pc}
   12600:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12604:	mov	r6, r0
   12608:	mov	r9, r2
   1260c:	mov	r7, r3
   12610:	ldr	r5, [sp, #32]
   12614:	bl	12568 <__assert_fail@plt+0x1ab0>
   12618:	mov	r4, r0
   1261c:	cmp	r4, #0
   12620:	blt	12684 <__assert_fail@plt+0x1bcc>
   12624:	mov	r0, r6
   12628:	mov	r1, r4
   1262c:	mov	r2, r5
   12630:	bl	125a8 <__assert_fail@plt+0x1af0>
   12634:	subs	r8, r0, #0
   12638:	beq	12680 <__assert_fail@plt+0x1bc8>
   1263c:	ldr	r0, [r8, #8]
   12640:	bl	12228 <__assert_fail@plt+0x1770>
   12644:	mov	r1, r0
   12648:	mov	r0, r6
   1264c:	bl	12330 <__assert_fail@plt+0x1878>
   12650:	mov	sl, r0
   12654:	bl	10a04 <strlen@plt>
   12658:	cmp	r0, r7
   1265c:	bne	12694 <__assert_fail@plt+0x1bdc>
   12660:	mov	r0, sl
   12664:	mov	r1, r9
   12668:	mov	r2, r7
   1266c:	bl	10980 <memcmp@plt>
   12670:	cmp	r0, #0
   12674:	bne	12694 <__assert_fail@plt+0x1bdc>
   12678:	mov	r0, r8
   1267c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12680:	mvn	r4, #12
   12684:	cmp	r5, #0
   12688:	mov	r0, #0
   1268c:	strne	r4, [r5]
   12690:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12694:	mov	r0, r6
   12698:	mov	r1, r4
   1269c:	bl	12588 <__assert_fail@plt+0x1ad0>
   126a0:	b	12618 <__assert_fail@plt+0x1b60>
   126a4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   126a8:	mov	r5, r0
   126ac:	mov	r0, r2
   126b0:	mov	r7, r3
   126b4:	mov	r6, r1
   126b8:	mov	r4, r2
   126bc:	bl	10a04 <strlen@plt>
   126c0:	str	r7, [sp]
   126c4:	mov	r1, r6
   126c8:	mov	r2, r4
   126cc:	mov	r3, r0
   126d0:	mov	r0, r5
   126d4:	bl	12600 <__assert_fail@plt+0x1b48>
   126d8:	add	sp, sp, #12
   126dc:	pop	{r4, r5, r6, r7, pc}
   126e0:	push	{r0, r1, r2, lr}
   126e4:	ldr	ip, [sp, #16]
   126e8:	str	ip, [sp]
   126ec:	bl	12600 <__assert_fail@plt+0x1b48>
   126f0:	cmp	r0, #0
   126f4:	addne	r0, r0, #12
   126f8:	add	sp, sp, #12
   126fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12700:	push	{r4, r5, r6, lr}
   12704:	mov	r5, r2
   12708:	mov	r2, r3
   1270c:	mov	r6, r0
   12710:	bl	125a8 <__assert_fail@plt+0x1af0>
   12714:	subs	r4, r0, #0
   12718:	beq	12744 <__assert_fail@plt+0x1c8c>
   1271c:	cmp	r5, #0
   12720:	beq	1273c <__assert_fail@plt+0x1c84>
   12724:	ldr	r0, [r4, #8]
   12728:	bl	12228 <__assert_fail@plt+0x1770>
   1272c:	mov	r1, r0
   12730:	mov	r0, r6
   12734:	bl	12330 <__assert_fail@plt+0x1878>
   12738:	str	r0, [r5]
   1273c:	add	r0, r4, #12
   12740:	pop	{r4, r5, r6, pc}
   12744:	mov	r0, r4
   12748:	pop	{r4, r5, r6, pc}
   1274c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12750:	mov	r5, r0
   12754:	mov	r0, r2
   12758:	mov	r7, r3
   1275c:	mov	r6, r1
   12760:	mov	r4, r2
   12764:	bl	10a04 <strlen@plt>
   12768:	str	r7, [sp]
   1276c:	mov	r1, r6
   12770:	mov	r2, r4
   12774:	mov	r3, r0
   12778:	mov	r0, r5
   1277c:	bl	126e0 <__assert_fail@plt+0x1c28>
   12780:	add	sp, sp, #12
   12784:	pop	{r4, r5, r6, r7, pc}
   12788:	push	{r0, r1, r4, r5, r6, lr}
   1278c:	add	r4, sp, #4
   12790:	ldr	r2, [pc, #100]	; 127fc <__assert_fail@plt+0x1d44>
   12794:	mov	r6, r0
   12798:	mov	r3, r4
   1279c:	mov	r5, r1
   127a0:	add	r2, pc, r2
   127a4:	bl	1274c <__assert_fail@plt+0x1c94>
   127a8:	cmp	r0, #0
   127ac:	beq	127bc <__assert_fail@plt+0x1d04>
   127b0:	ldr	r3, [sp, #4]
   127b4:	cmp	r3, #4
   127b8:	beq	127ec <__assert_fail@plt+0x1d34>
   127bc:	ldr	r2, [pc, #60]	; 12800 <__assert_fail@plt+0x1d48>
   127c0:	mov	r0, r6
   127c4:	mov	r1, r5
   127c8:	mov	r3, r4
   127cc:	add	r2, pc, r2
   127d0:	bl	1274c <__assert_fail@plt+0x1c94>
   127d4:	cmp	r0, #0
   127d8:	beq	127f4 <__assert_fail@plt+0x1d3c>
   127dc:	ldr	r3, [sp, #4]
   127e0:	cmp	r3, #4
   127e4:	movne	r0, #0
   127e8:	bne	127f4 <__assert_fail@plt+0x1d3c>
   127ec:	ldr	r0, [r0]
   127f0:	bl	12228 <__assert_fail@plt+0x1770>
   127f4:	add	sp, sp, #8
   127f8:	pop	{r4, r5, r6, pc}
   127fc:	muleq	r0, r3, r0
   12800:	andeq	r1, r0, r1, rrx
   12804:	push	{r4, r5, r6, lr}
   12808:	mvn	r1, #0
   1280c:	mov	r2, #0
   12810:	mov	r6, r0
   12814:	bl	12020 <__assert_fail@plt+0x1568>
   12818:	mov	r5, #0
   1281c:	mov	r4, r0
   12820:	cmn	r4, #1
   12824:	beq	12864 <__assert_fail@plt+0x1dac>
   12828:	cmp	r4, #0
   1282c:	blt	1286c <__assert_fail@plt+0x1db4>
   12830:	mov	r0, r6
   12834:	mov	r1, r4
   12838:	bl	12788 <__assert_fail@plt+0x1cd0>
   1283c:	cmn	r0, #1
   12840:	beq	1284c <__assert_fail@plt+0x1d94>
   12844:	cmp	r5, r0
   12848:	movcc	r5, r0
   1284c:	mov	r1, r4
   12850:	mov	r0, r6
   12854:	mov	r2, #0
   12858:	bl	12020 <__assert_fail@plt+0x1568>
   1285c:	mov	r4, r0
   12860:	b	12820 <__assert_fail@plt+0x1d68>
   12864:	mov	r0, r5
   12868:	pop	{r4, r5, r6, pc}
   1286c:	mvn	r0, #0
   12870:	pop	{r4, r5, r6, pc}
   12874:	push	{r0, r1, r4, r5, r6, lr}
   12878:	mov	r5, r1
   1287c:	ldr	r1, [pc, #60]	; 128c0 <__assert_fail@plt+0x1e08>
   12880:	mov	r6, r0
   12884:	mov	r4, r2
   12888:	add	r1, pc, r1
   1288c:	bl	129b0 <__assert_fail@plt+0x1ef8>
   12890:	mov	ip, #0
   12894:	subs	r1, r0, #0
   12898:	blt	128b4 <__assert_fail@plt+0x1dfc>
   1289c:	str	ip, [sp]
   128a0:	mov	r0, r6
   128a4:	mov	r2, r5
   128a8:	mov	r3, r4
   128ac:	bl	126e0 <__assert_fail@plt+0x1c28>
   128b0:	b	128b8 <__assert_fail@plt+0x1e00>
   128b4:	mov	r0, ip
   128b8:	add	sp, sp, #8
   128bc:	pop	{r4, r5, r6, pc}
   128c0:			; <UNDEFINED> instruction: 0x00000fb3
   128c4:	push	{r4, r5, r6, r7, r8, lr}
   128c8:	mov	r8, r0
   128cc:	mov	r4, r1
   128d0:	mov	r5, r2
   128d4:	bl	11dbc <__assert_fail@plt+0x1304>
   128d8:	cmp	r0, #0
   128dc:	popne	{r4, r5, r6, r7, r8, pc}
   128e0:	ldrb	r3, [r4]
   128e4:	add	r5, r4, r5
   128e8:	cmp	r3, #47	; 0x2f
   128ec:	beq	12938 <__assert_fail@plt+0x1e80>
   128f0:	mov	r1, #47	; 0x2f
   128f4:	rsb	r2, r4, r5
   128f8:	mov	r0, r4
   128fc:	bl	10a64 <memchr@plt>
   12900:	mov	r1, r4
   12904:	cmp	r0, #0
   12908:	movne	r7, r0
   1290c:	moveq	r7, r5
   12910:	mov	r0, r8
   12914:	rsb	r2, r4, r7
   12918:	bl	12874 <__assert_fail@plt+0x1dbc>
   1291c:	subs	r1, r0, #0
   12920:	beq	129a0 <__assert_fail@plt+0x1ee8>
   12924:	mov	r0, r8
   12928:	mov	r4, r7
   1292c:	bl	129b0 <__assert_fail@plt+0x1ef8>
   12930:	mov	r6, r0
   12934:	b	1293c <__assert_fail@plt+0x1e84>
   12938:	mov	r6, r0
   1293c:	cmp	r4, r5
   12940:	bcs	129a8 <__assert_fail@plt+0x1ef0>
   12944:	mov	r7, r4
   12948:	add	r4, r4, #1
   1294c:	ldrb	r3, [r7]
   12950:	cmp	r3, #47	; 0x2f
   12954:	bne	12964 <__assert_fail@plt+0x1eac>
   12958:	cmp	r4, r5
   1295c:	bne	12944 <__assert_fail@plt+0x1e8c>
   12960:	b	129a8 <__assert_fail@plt+0x1ef0>
   12964:	mov	r1, #47	; 0x2f
   12968:	rsb	r2, r7, r5
   1296c:	mov	r0, r7
   12970:	bl	10a64 <memchr@plt>
   12974:	mov	r1, r6
   12978:	mov	r2, r7
   1297c:	cmp	r0, #0
   12980:	movne	r4, r0
   12984:	moveq	r4, r5
   12988:	mov	r0, r8
   1298c:	rsb	r3, r7, r4
   12990:	bl	123ec <__assert_fail@plt+0x1934>
   12994:	subs	r6, r0, #0
   12998:	bge	1293c <__assert_fail@plt+0x1e84>
   1299c:	b	129a8 <__assert_fail@plt+0x1ef0>
   129a0:	mvn	r0, #4
   129a4:	pop	{r4, r5, r6, r7, r8, pc}
   129a8:	mov	r0, r6
   129ac:	pop	{r4, r5, r6, r7, r8, pc}
   129b0:	push	{r3, r4, r5, lr}
   129b4:	mov	r5, r0
   129b8:	mov	r0, r1
   129bc:	mov	r4, r1
   129c0:	bl	10a04 <strlen@plt>
   129c4:	mov	r1, r4
   129c8:	mov	r2, r0
   129cc:	mov	r0, r5
   129d0:	pop	{r3, r4, r5, lr}
   129d4:	b	128c4 <__assert_fail@plt+0x1e0c>
   129d8:	push	{r3, r4, r5, lr}
   129dc:	mov	r5, r0
   129e0:	mov	r0, r1
   129e4:	mov	r4, r1
   129e8:	bl	10a04 <strlen@plt>
   129ec:	mov	r1, r4
   129f0:	mov	r2, r0
   129f4:	mov	r0, r5
   129f8:	pop	{r3, r4, r5, lr}
   129fc:	b	12874 <__assert_fail@plt+0x1dbc>
   12a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a04:	sub	sp, sp, #20
   12a08:	mov	r7, r0
   12a0c:	mov	r8, r1
   12a10:	mov	r6, r2
   12a14:	mov	r9, r3
   12a18:	bl	11dbc <__assert_fail@plt+0x1304>
   12a1c:	cmp	r0, #0
   12a20:	bne	12b44 <__assert_fail@plt+0x208c>
   12a24:	cmp	r9, #1
   12a28:	bgt	12a34 <__assert_fail@plt+0x1f7c>
   12a2c:	mvn	r0, #2
   12a30:	b	12b44 <__assert_fail@plt+0x208c>
   12a34:	add	fp, sp, #8
   12a38:	mov	r4, r0
   12a3c:	mov	r5, r0
   12a40:	mov	sl, r0
   12a44:	add	r3, sp, #12
   12a48:	str	r0, [sp, #8]
   12a4c:	str	r3, [sp, #4]
   12a50:	cmp	r4, r8
   12a54:	movgt	r2, #0
   12a58:	movle	r2, #1
   12a5c:	cmp	r4, #0
   12a60:	movlt	r2, #0
   12a64:	cmp	r2, #0
   12a68:	beq	12b28 <__assert_fail@plt+0x2070>
   12a6c:	ldr	r1, [sp, #8]
   12a70:	cmp	sl, r1
   12a74:	ble	12a98 <__assert_fail@plt+0x1fe0>
   12a78:	sub	r5, r5, #1
   12a7c:	add	r2, r6, r5
   12a80:	rsb	r5, r6, r2
   12a84:	ldrb	r0, [r2, #-1]!
   12a88:	cmp	r0, #47	; 0x2f
   12a8c:	bne	12a80 <__assert_fail@plt+0x1fc8>
   12a90:	sub	sl, sl, #1
   12a94:	b	12a70 <__assert_fail@plt+0x1fb8>
   12a98:	blt	12ae8 <__assert_fail@plt+0x2030>
   12a9c:	mov	r1, r4
   12aa0:	add	r2, sp, #12
   12aa4:	mov	r0, r7
   12aa8:	bl	124ec <__assert_fail@plt+0x1a34>
   12aac:	ldr	r2, [sp, #12]
   12ab0:	subs	r1, r0, #0
   12ab4:	moveq	r0, r2
   12ab8:	beq	12b44 <__assert_fail@plt+0x208c>
   12abc:	add	ip, r5, r2
   12ac0:	cmp	ip, r9
   12ac4:	bge	12ae8 <__assert_fail@plt+0x2030>
   12ac8:	add	r0, r6, r5
   12acc:	str	ip, [sp]
   12ad0:	bl	10974 <memcpy@plt>
   12ad4:	ldr	ip, [sp]
   12ad8:	add	sl, sl, #1
   12adc:	mov	r3, #47	; 0x2f
   12ae0:	add	r5, ip, #1
   12ae4:	strb	r3, [r6, ip]
   12ae8:	cmp	r4, r8
   12aec:	bne	12b10 <__assert_fail@plt+0x2058>
   12af0:	ldr	r2, [sp, #8]
   12af4:	cmp	r2, sl
   12af8:	bge	12a2c <__assert_fail@plt+0x1f74>
   12afc:	cmp	r5, #1
   12b00:	mov	r0, #0
   12b04:	subgt	r5, r5, #1
   12b08:	strb	r0, [r6, r5]
   12b0c:	b	12b44 <__assert_fail@plt+0x208c>
   12b10:	mov	r1, r4
   12b14:	mov	r0, r7
   12b18:	mov	r2, fp
   12b1c:	bl	12020 <__assert_fail@plt+0x1568>
   12b20:	mov	r4, r0
   12b24:	b	12a50 <__assert_fail@plt+0x1f98>
   12b28:	cmn	r4, #1
   12b2c:	bge	12b40 <__assert_fail@plt+0x2088>
   12b30:	cmn	r4, #4
   12b34:	movne	r0, r4
   12b38:	mvneq	r0, #10
   12b3c:	b	12b44 <__assert_fail@plt+0x208c>
   12b40:	mvn	r0, #3
   12b44:	add	sp, sp, #20
   12b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b4c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12b50:	mov	r9, r0
   12b54:	mov	r7, r1
   12b58:	mov	r4, r2
   12b5c:	mov	r8, r3
   12b60:	bl	11dbc <__assert_fail@plt+0x1304>
   12b64:	cmp	r0, #0
   12b68:	bne	12bfc <__assert_fail@plt+0x2144>
   12b6c:	cmp	r4, #0
   12b70:	blt	12bf8 <__assert_fail@plt+0x2140>
   12b74:	add	r6, sp, #8
   12b78:	mvn	r5, #12
   12b7c:	str	r0, [r6, #-4]!
   12b80:	cmp	r0, r7
   12b84:	mov	r1, r0
   12b88:	movgt	r3, #0
   12b8c:	movle	r3, #1
   12b90:	cmp	r0, #0
   12b94:	movlt	r3, #0
   12b98:	cmp	r3, #0
   12b9c:	beq	12bdc <__assert_fail@plt+0x2124>
   12ba0:	ldr	r3, [sp, #4]
   12ba4:	cmp	r3, r4
   12ba8:	moveq	r5, r1
   12bac:	cmp	r1, r7
   12bb0:	bne	12bcc <__assert_fail@plt+0x2114>
   12bb4:	cmp	r8, #0
   12bb8:	strne	r3, [r8]
   12bbc:	cmp	r4, r3
   12bc0:	movle	r0, r5
   12bc4:	mvngt	r0, #0
   12bc8:	b	12bfc <__assert_fail@plt+0x2144>
   12bcc:	mov	r0, r9
   12bd0:	mov	r2, r6
   12bd4:	bl	12020 <__assert_fail@plt+0x1568>
   12bd8:	b	12b80 <__assert_fail@plt+0x20c8>
   12bdc:	cmn	r0, #1
   12be0:	bge	12bf0 <__assert_fail@plt+0x2138>
   12be4:	cmn	r0, #4
   12be8:	mvneq	r0, #10
   12bec:	b	12bfc <__assert_fail@plt+0x2144>
   12bf0:	mvn	r0, #3
   12bf4:	b	12bfc <__assert_fail@plt+0x2144>
   12bf8:	mvn	r0, #0
   12bfc:	add	sp, sp, #12
   12c00:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12c04:	push	{r0, r1, r2, lr}
   12c08:	mov	r2, #0
   12c0c:	add	r3, sp, #4
   12c10:	bl	12b4c <__assert_fail@plt+0x2094>
   12c14:	cmp	r0, #0
   12c18:	ldreq	r0, [sp, #4]
   12c1c:	beq	12c24 <__assert_fail@plt+0x216c>
   12c20:	mvnge	r0, #12
   12c24:	add	sp, sp, #12
   12c28:	pop	{pc}		; (ldr pc, [sp], #4)
   12c2c:	push	{r4, r5, r6, lr}
   12c30:	mov	r5, r0
   12c34:	mov	r4, r1
   12c38:	bl	12c04 <__assert_fail@plt+0x214c>
   12c3c:	subs	r2, r0, #0
   12c40:	poplt	{r4, r5, r6, pc}
   12c44:	mov	r0, r5
   12c48:	mov	r1, r4
   12c4c:	sub	r2, r2, #1
   12c50:	mov	r3, #0
   12c54:	pop	{r4, r5, r6, lr}
   12c58:	b	12b4c <__assert_fail@plt+0x2094>
   12c5c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12c60:	mov	r7, r2
   12c64:	mov	r5, r0
   12c68:	mov	r9, r1
   12c6c:	mov	r8, r3
   12c70:	ldr	r6, [sp, #40]	; 0x28
   12c74:	bl	11dbc <__assert_fail@plt+0x1304>
   12c78:	subs	r2, r0, #0
   12c7c:	movne	r0, r2
   12c80:	bne	12cf8 <__assert_fail@plt+0x2240>
   12c84:	mov	r1, r9
   12c88:	mov	r0, r5
   12c8c:	bl	12020 <__assert_fail@plt+0x1568>
   12c90:	add	r9, sp, #4
   12c94:	mov	r4, r0
   12c98:	cmp	r4, #0
   12c9c:	blt	12cf4 <__assert_fail@plt+0x223c>
   12ca0:	mov	r0, r5
   12ca4:	mov	r1, r4
   12ca8:	mov	r2, r7
   12cac:	mov	r3, r9
   12cb0:	bl	1274c <__assert_fail@plt+0x1c94>
   12cb4:	cmp	r0, #0
   12cb8:	beq	12cdc <__assert_fail@plt+0x2224>
   12cbc:	ldr	r3, [sp, #4]
   12cc0:	cmp	r3, r6
   12cc4:	bne	12cdc <__assert_fail@plt+0x2224>
   12cc8:	mov	r1, r8
   12ccc:	mov	r2, r6
   12cd0:	bl	10980 <memcmp@plt>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12cf4 <__assert_fail@plt+0x223c>
   12cdc:	mov	r1, r4
   12ce0:	mov	r0, r5
   12ce4:	mov	r2, #0
   12ce8:	bl	12020 <__assert_fail@plt+0x1568>
   12cec:	mov	r4, r0
   12cf0:	b	12c98 <__assert_fail@plt+0x21e0>
   12cf4:	mov	r0, r4
   12cf8:	add	sp, sp, #12
   12cfc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12d00:	sub	r3, r1, #1
   12d04:	cmn	r3, #3
   12d08:	push	{r4, r5, r6, lr}
   12d0c:	mov	r5, r0
   12d10:	mov	r6, r1
   12d14:	bhi	12d60 <__assert_fail@plt+0x22a8>
   12d18:	bl	11dbc <__assert_fail@plt+0x1304>
   12d1c:	subs	r2, r0, #0
   12d20:	moveq	r0, r5
   12d24:	mvneq	r1, #0
   12d28:	bne	12d68 <__assert_fail@plt+0x22b0>
   12d2c:	bl	12020 <__assert_fail@plt+0x1568>
   12d30:	cmp	r0, #0
   12d34:	mov	r4, r0
   12d38:	blt	12d70 <__assert_fail@plt+0x22b8>
   12d3c:	mov	r0, r5
   12d40:	mov	r1, r4
   12d44:	bl	12788 <__assert_fail@plt+0x1cd0>
   12d48:	cmp	r0, r6
   12d4c:	beq	12d70 <__assert_fail@plt+0x22b8>
   12d50:	mov	r0, r5
   12d54:	mov	r1, r4
   12d58:	mov	r2, #0
   12d5c:	b	12d2c <__assert_fail@plt+0x2274>
   12d60:	mvn	r0, #5
   12d64:	pop	{r4, r5, r6, pc}
   12d68:	mov	r0, r2
   12d6c:	pop	{r4, r5, r6, pc}
   12d70:	mov	r0, r4
   12d74:	pop	{r4, r5, r6, pc}
   12d78:	push	{r4, r5, r6, r7, r8, lr}
   12d7c:	mov	r5, r0
   12d80:	mov	r0, r2
   12d84:	mov	r4, r1
   12d88:	mov	r7, r2
   12d8c:	bl	10a04 <strlen@plt>
   12d90:	add	r8, r0, #1
   12d94:	mov	r6, r0
   12d98:	cmp	r4, r6
   12d9c:	blt	12de4 <__assert_fail@plt+0x232c>
   12da0:	mov	r0, r7
   12da4:	mov	r1, r5
   12da8:	mov	r2, r8
   12dac:	bl	10980 <memcmp@plt>
   12db0:	cmp	r0, #0
   12db4:	beq	12dec <__assert_fail@plt+0x2334>
   12db8:	mov	r0, r5
   12dbc:	mov	r1, #0
   12dc0:	mov	r2, r4
   12dc4:	bl	10a64 <memchr@plt>
   12dc8:	cmp	r0, #0
   12dcc:	popeq	{r4, r5, r6, r7, r8, pc}
   12dd0:	rsb	r5, r5, r0
   12dd4:	mvn	r5, r5
   12dd8:	add	r4, r4, r5
   12ddc:	add	r5, r0, #1
   12de0:	b	12d98 <__assert_fail@plt+0x22e0>
   12de4:	mov	r0, #0
   12de8:	pop	{r4, r5, r6, r7, r8, pc}
   12dec:	mov	r0, #1
   12df0:	pop	{r4, r5, r6, r7, r8, pc}
   12df4:	push	{r0, r1, r4, r5, r6, lr}
   12df8:	add	r3, sp, #4
   12dfc:	bl	1274c <__assert_fail@plt+0x1c94>
   12e00:	subs	r4, r0, #0
   12e04:	ldr	r0, [sp, #4]
   12e08:	beq	12e50 <__assert_fail@plt+0x2398>
   12e0c:	add	r6, r4, r0
   12e10:	mov	r5, #0
   12e14:	cmp	r4, r6
   12e18:	bcs	12e44 <__assert_fail@plt+0x238c>
   12e1c:	mov	r0, r4
   12e20:	rsb	r1, r4, r6
   12e24:	bl	10a70 <strnlen@plt>
   12e28:	add	r0, r0, #1
   12e2c:	str	r0, [sp, #4]
   12e30:	add	r4, r4, r0
   12e34:	cmp	r4, r6
   12e38:	bhi	12e4c <__assert_fail@plt+0x2394>
   12e3c:	add	r5, r5, #1
   12e40:	b	12e14 <__assert_fail@plt+0x235c>
   12e44:	mov	r0, r5
   12e48:	b	12e50 <__assert_fail@plt+0x2398>
   12e4c:	mvn	r0, #14
   12e50:	add	sp, sp, #8
   12e54:	pop	{r4, r5, r6, pc}
   12e58:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12e5c:	mov	r8, r3
   12e60:	add	r3, sp, #4
   12e64:	bl	1274c <__assert_fail@plt+0x1c94>
   12e68:	ldr	r6, [sp, #4]
   12e6c:	subs	r4, r0, #0
   12e70:	moveq	r0, r6
   12e74:	beq	12ef4 <__assert_fail@plt+0x243c>
   12e78:	mov	r0, r8
   12e7c:	add	r6, r4, r6
   12e80:	bl	10a04 <strlen@plt>
   12e84:	mov	r5, #0
   12e88:	add	r7, r0, #1
   12e8c:	cmp	r4, r6
   12e90:	bcs	12ee0 <__assert_fail@plt+0x2428>
   12e94:	mov	r0, r4
   12e98:	rsb	r1, r4, r6
   12e9c:	bl	10a70 <strnlen@plt>
   12ea0:	add	r0, r0, #1
   12ea4:	str	r0, [sp, #4]
   12ea8:	add	r9, r4, r0
   12eac:	cmp	r9, r6
   12eb0:	bhi	12ee8 <__assert_fail@plt+0x2430>
   12eb4:	cmp	r0, r7
   12eb8:	bne	12ed4 <__assert_fail@plt+0x241c>
   12ebc:	mov	r0, r4
   12ec0:	mov	r1, r8
   12ec4:	mov	r2, r7
   12ec8:	bl	10980 <memcmp@plt>
   12ecc:	cmp	r0, #0
   12ed0:	beq	12ef0 <__assert_fail@plt+0x2438>
   12ed4:	add	r5, r5, #1
   12ed8:	mov	r4, r9
   12edc:	b	12e8c <__assert_fail@plt+0x23d4>
   12ee0:	mvn	r0, #0
   12ee4:	b	12ef4 <__assert_fail@plt+0x243c>
   12ee8:	mvn	r0, #14
   12eec:	b	12ef4 <__assert_fail@plt+0x243c>
   12ef0:	mov	r0, r5
   12ef4:	add	sp, sp, #12
   12ef8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12efc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12f00:	mov	r6, r3
   12f04:	add	r3, sp, #4
   12f08:	ldr	r5, [sp, #32]
   12f0c:	bl	1274c <__assert_fail@plt+0x1c94>
   12f10:	subs	r4, r0, #0
   12f14:	ldrne	r7, [sp, #4]
   12f18:	addne	r7, r4, r7
   12f1c:	bne	12f60 <__assert_fail@plt+0x24a8>
   12f20:	cmp	r5, #0
   12f24:	ldrne	r3, [sp, #4]
   12f28:	bne	12f94 <__assert_fail@plt+0x24dc>
   12f2c:	b	12f98 <__assert_fail@plt+0x24e0>
   12f30:	mov	r0, r4
   12f34:	rsb	r1, r4, r7
   12f38:	bl	10a70 <strnlen@plt>
   12f3c:	add	r3, r0, #1
   12f40:	str	r3, [sp, #4]
   12f44:	add	r3, r4, r3
   12f48:	cmp	r3, r7
   12f4c:	bhi	12f6c <__assert_fail@plt+0x24b4>
   12f50:	cmp	r6, #0
   12f54:	beq	12f7c <__assert_fail@plt+0x24c4>
   12f58:	sub	r6, r6, #1
   12f5c:	mov	r4, r3
   12f60:	cmp	r4, r7
   12f64:	bcc	12f30 <__assert_fail@plt+0x2478>
   12f68:	b	12f88 <__assert_fail@plt+0x24d0>
   12f6c:	cmp	r5, #0
   12f70:	mvnne	r3, #14
   12f74:	bne	12f94 <__assert_fail@plt+0x24dc>
   12f78:	b	12f98 <__assert_fail@plt+0x24e0>
   12f7c:	cmp	r5, #0
   12f80:	strne	r0, [r5]
   12f84:	b	12fa0 <__assert_fail@plt+0x24e8>
   12f88:	cmp	r5, #0
   12f8c:	beq	12f98 <__assert_fail@plt+0x24e0>
   12f90:	mvn	r3, #0
   12f94:	str	r3, [r5]
   12f98:	mov	r0, #0
   12f9c:	b	12fa4 <__assert_fail@plt+0x24ec>
   12fa0:	mov	r0, r4
   12fa4:	add	sp, sp, #12
   12fa8:	pop	{r4, r5, r6, r7, pc}
   12fac:	push	{r0, r1, r4, lr}
   12fb0:	mov	r4, r2
   12fb4:	ldr	r2, [pc, #48]	; 12fec <__assert_fail@plt+0x2534>
   12fb8:	add	r3, sp, #4
   12fbc:	add	r2, pc, r2
   12fc0:	bl	1274c <__assert_fail@plt+0x1c94>
   12fc4:	cmp	r0, #0
   12fc8:	ldreq	r0, [sp, #4]
   12fcc:	beq	12fe4 <__assert_fail@plt+0x252c>
   12fd0:	ldr	r1, [sp, #4]
   12fd4:	mov	r2, r4
   12fd8:	bl	12d78 <__assert_fail@plt+0x22c0>
   12fdc:	rsbs	r0, r0, #1
   12fe0:	movcc	r0, #0
   12fe4:	add	sp, sp, #8
   12fe8:	pop	{r4, pc}
   12fec:	andeq	r0, r0, r8, lsl #17
   12ff0:	push	{r3, r4, r5, r6, r7, lr}
   12ff4:	mov	r5, r0
   12ff8:	mov	r7, r1
   12ffc:	mov	r6, r2
   13000:	bl	11dbc <__assert_fail@plt+0x1304>
   13004:	subs	r2, r0, #0
   13008:	moveq	r0, r5
   1300c:	moveq	r1, r7
   13010:	bne	13054 <__assert_fail@plt+0x259c>
   13014:	bl	12020 <__assert_fail@plt+0x1568>
   13018:	cmp	r0, #0
   1301c:	mov	r4, r0
   13020:	blt	1305c <__assert_fail@plt+0x25a4>
   13024:	mov	r0, r5
   13028:	mov	r1, r4
   1302c:	mov	r2, r6
   13030:	bl	12fac <__assert_fail@plt+0x24f4>
   13034:	cmn	r0, #1
   13038:	poplt	{r3, r4, r5, r6, r7, pc}
   1303c:	cmp	r0, #0
   13040:	beq	1305c <__assert_fail@plt+0x25a4>
   13044:	mov	r0, r5
   13048:	mov	r1, r4
   1304c:	mov	r2, #0
   13050:	b	13014 <__assert_fail@plt+0x255c>
   13054:	mov	r0, r2
   13058:	pop	{r3, r4, r5, r6, r7, pc}
   1305c:	mov	r0, r4
   13060:	pop	{r3, r4, r5, r6, r7, pc}
   13064:	cmp	r0, #0
   13068:	bgt	1309c <__assert_fail@plt+0x25e4>
   1306c:	beq	130a8 <__assert_fail@plt+0x25f0>
   13070:	cmn	r0, #18
   13074:	bls	130b4 <__assert_fail@plt+0x25fc>
   13078:	ldr	r3, [pc, #64]	; 130c0 <__assert_fail@plt+0x2608>
   1307c:	rsb	r0, r0, #0
   13080:	add	r3, pc, r3
   13084:	ldr	r0, [r3, r0, lsl #2]
   13088:	cmp	r0, #0
   1308c:	bxne	lr
   13090:	ldr	r0, [pc, #44]	; 130c4 <__assert_fail@plt+0x260c>
   13094:	add	r0, pc, r0
   13098:	bx	lr
   1309c:	ldr	r0, [pc, #36]	; 130c8 <__assert_fail@plt+0x2610>
   130a0:	add	r0, pc, r0
   130a4:	bx	lr
   130a8:	ldr	r0, [pc, #28]	; 130cc <__assert_fail@plt+0x2614>
   130ac:	add	r0, pc, r0
   130b0:	bx	lr
   130b4:	ldr	r0, [pc, #20]	; 130d0 <__assert_fail@plt+0x2618>
   130b8:	add	r0, pc, r0
   130bc:	bx	lr
   130c0:	andeq	r0, r1, r0, asr #28
   130c4:	ldrdeq	r0, [r0], -ip
   130c8:	andeq	r0, r0, pc, lsr #15
   130cc:			; <UNDEFINED> instruction: 0x000007b9
   130d0:			; <UNDEFINED> instruction: 0x000007b8
   130d4:	cmp	r1, #0
   130d8:	beq	132e4 <__assert_fail@plt+0x282c>
   130dc:	eor	ip, r0, r1
   130e0:	rsbmi	r1, r1, #0
   130e4:	subs	r2, r1, #1
   130e8:	beq	132b0 <__assert_fail@plt+0x27f8>
   130ec:	movs	r3, r0
   130f0:	rsbmi	r3, r0, #0
   130f4:	cmp	r3, r1
   130f8:	bls	132bc <__assert_fail@plt+0x2804>
   130fc:	tst	r1, r2
   13100:	beq	132cc <__assert_fail@plt+0x2814>
   13104:	clz	r2, r3
   13108:	clz	r0, r1
   1310c:	sub	r2, r0, r2
   13110:	rsbs	r2, r2, #31
   13114:	addne	r2, r2, r2, lsl #1
   13118:	mov	r0, #0
   1311c:	addne	pc, pc, r2, lsl #2
   13120:	nop	{0}
   13124:	cmp	r3, r1, lsl #31
   13128:	adc	r0, r0, r0
   1312c:	subcs	r3, r3, r1, lsl #31
   13130:	cmp	r3, r1, lsl #30
   13134:	adc	r0, r0, r0
   13138:	subcs	r3, r3, r1, lsl #30
   1313c:	cmp	r3, r1, lsl #29
   13140:	adc	r0, r0, r0
   13144:	subcs	r3, r3, r1, lsl #29
   13148:	cmp	r3, r1, lsl #28
   1314c:	adc	r0, r0, r0
   13150:	subcs	r3, r3, r1, lsl #28
   13154:	cmp	r3, r1, lsl #27
   13158:	adc	r0, r0, r0
   1315c:	subcs	r3, r3, r1, lsl #27
   13160:	cmp	r3, r1, lsl #26
   13164:	adc	r0, r0, r0
   13168:	subcs	r3, r3, r1, lsl #26
   1316c:	cmp	r3, r1, lsl #25
   13170:	adc	r0, r0, r0
   13174:	subcs	r3, r3, r1, lsl #25
   13178:	cmp	r3, r1, lsl #24
   1317c:	adc	r0, r0, r0
   13180:	subcs	r3, r3, r1, lsl #24
   13184:	cmp	r3, r1, lsl #23
   13188:	adc	r0, r0, r0
   1318c:	subcs	r3, r3, r1, lsl #23
   13190:	cmp	r3, r1, lsl #22
   13194:	adc	r0, r0, r0
   13198:	subcs	r3, r3, r1, lsl #22
   1319c:	cmp	r3, r1, lsl #21
   131a0:	adc	r0, r0, r0
   131a4:	subcs	r3, r3, r1, lsl #21
   131a8:	cmp	r3, r1, lsl #20
   131ac:	adc	r0, r0, r0
   131b0:	subcs	r3, r3, r1, lsl #20
   131b4:	cmp	r3, r1, lsl #19
   131b8:	adc	r0, r0, r0
   131bc:	subcs	r3, r3, r1, lsl #19
   131c0:	cmp	r3, r1, lsl #18
   131c4:	adc	r0, r0, r0
   131c8:	subcs	r3, r3, r1, lsl #18
   131cc:	cmp	r3, r1, lsl #17
   131d0:	adc	r0, r0, r0
   131d4:	subcs	r3, r3, r1, lsl #17
   131d8:	cmp	r3, r1, lsl #16
   131dc:	adc	r0, r0, r0
   131e0:	subcs	r3, r3, r1, lsl #16
   131e4:	cmp	r3, r1, lsl #15
   131e8:	adc	r0, r0, r0
   131ec:	subcs	r3, r3, r1, lsl #15
   131f0:	cmp	r3, r1, lsl #14
   131f4:	adc	r0, r0, r0
   131f8:	subcs	r3, r3, r1, lsl #14
   131fc:	cmp	r3, r1, lsl #13
   13200:	adc	r0, r0, r0
   13204:	subcs	r3, r3, r1, lsl #13
   13208:	cmp	r3, r1, lsl #12
   1320c:	adc	r0, r0, r0
   13210:	subcs	r3, r3, r1, lsl #12
   13214:	cmp	r3, r1, lsl #11
   13218:	adc	r0, r0, r0
   1321c:	subcs	r3, r3, r1, lsl #11
   13220:	cmp	r3, r1, lsl #10
   13224:	adc	r0, r0, r0
   13228:	subcs	r3, r3, r1, lsl #10
   1322c:	cmp	r3, r1, lsl #9
   13230:	adc	r0, r0, r0
   13234:	subcs	r3, r3, r1, lsl #9
   13238:	cmp	r3, r1, lsl #8
   1323c:	adc	r0, r0, r0
   13240:	subcs	r3, r3, r1, lsl #8
   13244:	cmp	r3, r1, lsl #7
   13248:	adc	r0, r0, r0
   1324c:	subcs	r3, r3, r1, lsl #7
   13250:	cmp	r3, r1, lsl #6
   13254:	adc	r0, r0, r0
   13258:	subcs	r3, r3, r1, lsl #6
   1325c:	cmp	r3, r1, lsl #5
   13260:	adc	r0, r0, r0
   13264:	subcs	r3, r3, r1, lsl #5
   13268:	cmp	r3, r1, lsl #4
   1326c:	adc	r0, r0, r0
   13270:	subcs	r3, r3, r1, lsl #4
   13274:	cmp	r3, r1, lsl #3
   13278:	adc	r0, r0, r0
   1327c:	subcs	r3, r3, r1, lsl #3
   13280:	cmp	r3, r1, lsl #2
   13284:	adc	r0, r0, r0
   13288:	subcs	r3, r3, r1, lsl #2
   1328c:	cmp	r3, r1, lsl #1
   13290:	adc	r0, r0, r0
   13294:	subcs	r3, r3, r1, lsl #1
   13298:	cmp	r3, r1
   1329c:	adc	r0, r0, r0
   132a0:	subcs	r3, r3, r1
   132a4:	cmp	ip, #0
   132a8:	rsbmi	r0, r0, #0
   132ac:	bx	lr
   132b0:	teq	ip, r0
   132b4:	rsbmi	r0, r0, #0
   132b8:	bx	lr
   132bc:	movcc	r0, #0
   132c0:	asreq	r0, ip, #31
   132c4:	orreq	r0, r0, #1
   132c8:	bx	lr
   132cc:	clz	r2, r1
   132d0:	rsb	r2, r2, #31
   132d4:	cmp	ip, #0
   132d8:	lsr	r0, r3, r2
   132dc:	rsbmi	r0, r0, #0
   132e0:	bx	lr
   132e4:	cmp	r0, #0
   132e8:	mvngt	r0, #-2147483648	; 0x80000000
   132ec:	movlt	r0, #-2147483648	; 0x80000000
   132f0:	b	13314 <__assert_fail@plt+0x285c>
   132f4:	cmp	r1, #0
   132f8:	beq	132e4 <__assert_fail@plt+0x282c>
   132fc:	push	{r0, r1, lr}
   13300:	bl	130dc <__assert_fail@plt+0x2624>
   13304:	pop	{r1, r2, lr}
   13308:	mul	r3, r2, r0
   1330c:	sub	r1, r1, r3
   13310:	bx	lr
   13314:	push	{r1, lr}
   13318:	mov	r0, #8
   1331c:	bl	10920 <raise@plt>
   13320:	pop	{r1, pc}
   13324:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13328:	mov	r7, r0
   1332c:	ldr	r6, [pc, #76]	; 13380 <__assert_fail@plt+0x28c8>
   13330:	mov	r8, r1
   13334:	ldr	r5, [pc, #72]	; 13384 <__assert_fail@plt+0x28cc>
   13338:	mov	r9, r2
   1333c:	add	r6, pc, r6
   13340:	bl	10900 <raise@plt-0x20>
   13344:	add	r5, pc, r5
   13348:	rsb	r6, r5, r6
   1334c:	asrs	r6, r6, #2
   13350:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   13354:	sub	r5, r5, #4
   13358:	mov	r4, #0
   1335c:	add	r4, r4, #1
   13360:	ldr	r3, [r5, #4]!
   13364:	mov	r0, r7
   13368:	mov	r1, r8
   1336c:	mov	r2, r9
   13370:	blx	r3
   13374:	cmp	r4, r6
   13378:	bne	1335c <__assert_fail@plt+0x28a4>
   1337c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13380:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   13384:	andeq	r0, r1, r4, ror #21
   13388:	bx	lr

Disassembly of section .fini:

0001338c <.fini>:
   1338c:	push	{r3, lr}
   13390:	pop	{r3, pc}
