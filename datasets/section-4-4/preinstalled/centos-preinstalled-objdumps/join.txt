
centos-preinstalled/join:     file format elf32-littlearm


Disassembly of section .init:

00011108 <.init>:
   11108:	push	{r3, lr}
   1110c:	bl	125c0 <__assert_fail@plt+0x118c>
   11110:	pop	{r3, pc}

Disassembly of section .plt:

00011114 <fdopen@plt-0x14>:
   11114:	push	{lr}		; (str lr, [sp, #-4]!)
   11118:	ldr	lr, [pc, #4]	; 11124 <fdopen@plt-0x4>
   1111c:	add	lr, pc, lr
   11120:	ldr	pc, [lr, #8]!
   11124:	ldrdeq	r7, [r1], -ip

00011128 <fdopen@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #94208	; 0x17000
   11130:	ldr	pc, [ip, #3804]!	; 0xedc

00011134 <calloc@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #94208	; 0x17000
   1113c:	ldr	pc, [ip, #3796]!	; 0xed4

00011140 <fputs_unlocked@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #94208	; 0x17000
   11148:	ldr	pc, [ip, #3788]!	; 0xecc

0001114c <raise@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #94208	; 0x17000
   11154:	ldr	pc, [ip, #3780]!	; 0xec4

00011158 <wcrtomb@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #94208	; 0x17000
   11160:	ldr	pc, [ip, #3772]!	; 0xebc

00011164 <strcmp@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #94208	; 0x17000
   1116c:	ldr	pc, [ip, #3764]!	; 0xeb4

00011170 <posix_fadvise64@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #94208	; 0x17000
   11178:	ldr	pc, [ip, #3756]!	; 0xeac

0001117c <fflush@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #94208	; 0x17000
   11184:	ldr	pc, [ip, #3748]!	; 0xea4

00011188 <free@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #94208	; 0x17000
   11190:	ldr	pc, [ip, #3740]!	; 0xe9c

00011194 <_exit@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #94208	; 0x17000
   1119c:	ldr	pc, [ip, #3732]!	; 0xe94

000111a0 <memcpy@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #94208	; 0x17000
   111a8:	ldr	pc, [ip, #3724]!	; 0xe8c

000111ac <iswblank@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #94208	; 0x17000
   111b4:	ldr	pc, [ip, #3716]!	; 0xe84

000111b8 <mbsinit@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #94208	; 0x17000
   111c0:	ldr	pc, [ip, #3708]!	; 0xe7c

000111c4 <fwrite_unlocked@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #94208	; 0x17000
   111cc:	ldr	pc, [ip, #3700]!	; 0xe74

000111d0 <memcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #94208	; 0x17000
   111d8:	ldr	pc, [ip, #3692]!	; 0xe6c

000111dc <dcgettext@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #94208	; 0x17000
   111e4:	ldr	pc, [ip, #3684]!	; 0xe64

000111e8 <__stack_chk_fail@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #94208	; 0x17000
   111f0:	ldr	pc, [ip, #3676]!	; 0xe5c

000111f4 <realloc@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #94208	; 0x17000
   111fc:	ldr	pc, [ip, #3668]!	; 0xe54

00011200 <textdomain@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #94208	; 0x17000
   11208:	ldr	pc, [ip, #3660]!	; 0xe4c

0001120c <iswprint@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #94208	; 0x17000
   11214:	ldr	pc, [ip, #3652]!	; 0xe44

00011218 <fwrite@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #94208	; 0x17000
   11220:	ldr	pc, [ip, #3644]!	; 0xe3c

00011224 <lseek64@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #94208	; 0x17000
   1122c:	ldr	pc, [ip, #3636]!	; 0xe34

00011230 <__ctype_get_mb_cur_max@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #94208	; 0x17000
   11238:	ldr	pc, [ip, #3628]!	; 0xe2c

0001123c <strcpy@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #94208	; 0x17000
   11244:	ldr	pc, [ip, #3620]!	; 0xe24

00011248 <__fpending@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #94208	; 0x17000
   11250:	ldr	pc, [ip, #3612]!	; 0xe1c

00011254 <mbrtowc@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #94208	; 0x17000
   1125c:	ldr	pc, [ip, #3604]!	; 0xe14

00011260 <error@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #94208	; 0x17000
   11268:	ldr	pc, [ip, #3596]!	; 0xe0c

0001126c <open64@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #94208	; 0x17000
   11274:	ldr	pc, [ip, #3588]!	; 0xe04

00011278 <strcoll@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #94208	; 0x17000
   11280:	ldr	pc, [ip, #3580]!	; 0xdfc

00011284 <getenv@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #94208	; 0x17000
   1128c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011290 <malloc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #94208	; 0x17000
   11298:	ldr	pc, [ip, #3564]!	; 0xdec

0001129c <__libc_start_main@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #94208	; 0x17000
   112a4:	ldr	pc, [ip, #3556]!	; 0xde4

000112a8 <__freading@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #94208	; 0x17000
   112b0:	ldr	pc, [ip, #3548]!	; 0xddc

000112b4 <__ctype_toupper_loc@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #94208	; 0x17000
   112bc:	ldr	pc, [ip, #3540]!	; 0xdd4

000112c0 <__gmon_start__@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #94208	; 0x17000
   112c8:	ldr	pc, [ip, #3532]!	; 0xdcc

000112cc <getopt_long@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #94208	; 0x17000
   112d4:	ldr	pc, [ip, #3524]!	; 0xdc4

000112d8 <__ctype_b_loc@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #94208	; 0x17000
   112e0:	ldr	pc, [ip, #3516]!	; 0xdbc

000112e4 <exit@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #94208	; 0x17000
   112ec:	ldr	pc, [ip, #3508]!	; 0xdb4

000112f0 <strtoul@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #94208	; 0x17000
   112f8:	ldr	pc, [ip, #3500]!	; 0xdac

000112fc <strlen@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #94208	; 0x17000
   11304:	ldr	pc, [ip, #3492]!	; 0xda4

00011308 <strchr@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #94208	; 0x17000
   11310:	ldr	pc, [ip, #3484]!	; 0xd9c

00011314 <ungetc@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #94208	; 0x17000
   1131c:	ldr	pc, [ip, #3476]!	; 0xd94

00011320 <fcntl@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #94208	; 0x17000
   11328:	ldr	pc, [ip, #3468]!	; 0xd8c

0001132c <__errno_location@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #94208	; 0x17000
   11334:	ldr	pc, [ip, #3460]!	; 0xd84

00011338 <__cxa_atexit@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #94208	; 0x17000
   11340:	ldr	pc, [ip, #3452]!	; 0xd7c

00011344 <memset@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #94208	; 0x17000
   1134c:	ldr	pc, [ip, #3444]!	; 0xd74

00011350 <fscanf@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #94208	; 0x17000
   11358:	ldr	pc, [ip, #3436]!	; 0xd6c

0001135c <__printf_chk@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #94208	; 0x17000
   11364:	ldr	pc, [ip, #3428]!	; 0xd64

00011368 <fileno@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #94208	; 0x17000
   11370:	ldr	pc, [ip, #3420]!	; 0xd5c

00011374 <__fprintf_chk@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #94208	; 0x17000
   1137c:	ldr	pc, [ip, #3412]!	; 0xd54

00011380 <memchr@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #94208	; 0x17000
   11388:	ldr	pc, [ip, #3404]!	; 0xd4c

0001138c <fclose@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #94208	; 0x17000
   11394:	ldr	pc, [ip, #3396]!	; 0xd44

00011398 <strnlen@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #94208	; 0x17000
   113a0:	ldr	pc, [ip, #3388]!	; 0xd3c

000113a4 <fseeko64@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #94208	; 0x17000
   113ac:	ldr	pc, [ip, #3380]!	; 0xd34

000113b0 <__uflow@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #94208	; 0x17000
   113b8:	ldr	pc, [ip, #3372]!	; 0xd2c

000113bc <__overflow@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #94208	; 0x17000
   113c4:	ldr	pc, [ip, #3364]!	; 0xd24

000113c8 <setlocale@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #94208	; 0x17000
   113d0:	ldr	pc, [ip, #3356]!	; 0xd1c

000113d4 <strrchr@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #94208	; 0x17000
   113dc:	ldr	pc, [ip, #3348]!	; 0xd14

000113e0 <nl_langinfo@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #94208	; 0x17000
   113e8:	ldr	pc, [ip, #3340]!	; 0xd0c

000113ec <fopen64@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #94208	; 0x17000
   113f4:	ldr	pc, [ip, #3332]!	; 0xd04

000113f8 <bindtextdomain@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #94208	; 0x17000
   11400:	ldr	pc, [ip, #3324]!	; 0xcfc

00011404 <towupper@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #94208	; 0x17000
   1140c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011410 <strncmp@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #94208	; 0x17000
   11418:	ldr	pc, [ip, #3308]!	; 0xcec

0001141c <abort@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #94208	; 0x17000
   11424:	ldr	pc, [ip, #3300]!	; 0xce4

00011428 <close@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #94208	; 0x17000
   11430:	ldr	pc, [ip, #3292]!	; 0xcdc

00011434 <__assert_fail@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #94208	; 0x17000
   1143c:	ldr	pc, [ip, #3284]!	; 0xcd4

Disassembly of section .text:

00011440 <close_stdout@@Base-0x2bfc>:
   11440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11444:	sub	sp, sp, #116	; 0x74
   11448:	ldr	r7, [pc, #4064]	; 12430 <__assert_fail@plt+0xffc>
   1144c:	mov	r6, r0
   11450:	ldr	r3, [pc, #4060]	; 12434 <__assert_fail@plt+0x1000>
   11454:	mov	r4, #0
   11458:	add	r7, pc, r7
   1145c:	ldr	r0, [r1]
   11460:	mov	r5, r1
   11464:	ldr	r8, [pc, #4044]	; 12438 <__assert_fail@plt+0x1004>
   11468:	ldr	r3, [r7, r3]
   1146c:	str	r4, [sp, #48]	; 0x30
   11470:	add	r8, pc, r8
   11474:	str	r4, [sp, #68]	; 0x44
   11478:	ldr	r3, [r3]
   1147c:	str	r4, [sp, #72]	; 0x48
   11480:	str	r4, [sp, #52]	; 0x34
   11484:	str	r3, [sp, #108]	; 0x6c
   11488:	bl	14430 <close_stdout@@Base+0x3f4>
   1148c:	ldr	r1, [pc, #4008]	; 1243c <__assert_fail@plt+0x1008>
   11490:	mov	r0, #6
   11494:	ldr	r9, [pc, #4004]	; 12440 <__assert_fail@plt+0x100c>
   11498:	add	r1, pc, r1
   1149c:	ldr	fp, [pc, #4000]	; 12444 <__assert_fail@plt+0x1010>
   114a0:	bl	113c8 <setlocale@plt>
   114a4:	ldr	r1, [pc, #3996]	; 12448 <__assert_fail@plt+0x1014>
   114a8:	mov	r0, r8
   114ac:	add	r9, pc, r9
   114b0:	add	r1, pc, r1
   114b4:	add	fp, pc, fp
   114b8:	bl	113f8 <bindtextdomain@plt>
   114bc:	mov	r0, r8
   114c0:	bl	11200 <textdomain@plt>
   114c4:	mov	r0, #3
   114c8:	bl	142d4 <close_stdout@@Base+0x298>
   114cc:	ldr	r8, [pc, #3960]	; 1244c <__assert_fail@plt+0x1018>
   114d0:	ldr	r3, [pc, #3960]	; 12450 <__assert_fail@plt+0x101c>
   114d4:	add	fp, fp, #4
   114d8:	add	r8, pc, r8
   114dc:	ldr	sl, [pc, #3952]	; 12454 <__assert_fail@plt+0x1020>
   114e0:	add	r2, r8, #4
   114e4:	str	r2, [sp, #16]
   114e8:	add	sl, pc, sl
   114ec:	add	sl, sl, #8
   114f0:	strb	r0, [r9, #9]
   114f4:	ldr	r0, [r7, r3]
   114f8:	bl	17708 <close_stdout@@Base+0x36cc>
   114fc:	ldr	r0, [pc, #3924]	; 12458 <__assert_fail@plt+0x1024>
   11500:	add	r0, pc, r0
   11504:	bl	17708 <close_stdout@@Base+0x36cc>
   11508:	mov	r3, #1
   1150c:	strb	r4, [r9, #52]	; 0x34
   11510:	strb	r4, [r9, #57]	; 0x39
   11514:	str	sl, [sp, #12]
   11518:	strb	r4, [r9, #56]	; 0x38
   1151c:	str	r4, [r9, #48]	; 0x30
   11520:	strb	r3, [r9, #128]	; 0x80
   11524:	ldr	r2, [pc, #3888]	; 1245c <__assert_fail@plt+0x1028>
   11528:	mov	r4, #0
   1152c:	ldr	r3, [pc, #3884]	; 12460 <__assert_fail@plt+0x102c>
   11530:	mov	r0, r6
   11534:	str	r4, [sp]
   11538:	mov	r1, r5
   1153c:	add	r2, pc, r2
   11540:	add	r3, pc, r3
   11544:	bl	112cc <getopt_long@plt>
   11548:	cmn	r0, #1
   1154c:	beq	11a0c <__assert_fail@plt+0x5d8>
   11550:	cmp	r0, #105	; 0x69
   11554:	str	r4, [sp, #44]	; 0x2c
   11558:	beq	11900 <__assert_fail@plt+0x4cc>
   1155c:	ble	115a4 <__assert_fail@plt+0x170>
   11560:	cmp	r0, #118	; 0x76
   11564:	beq	1167c <__assert_fail@plt+0x248>
   11568:	ble	11608 <__assert_fail@plt+0x1d4>
   1156c:	cmp	r0, #256	; 0x100
   11570:	beq	118ec <__assert_fail@plt+0x4b8>
   11574:	ble	11854 <__assert_fail@plt+0x420>
   11578:	movw	r3, #257	; 0x101
   1157c:	cmp	r0, r3
   11580:	beq	11840 <__assert_fail@plt+0x40c>
   11584:	add	r3, r3, #1
   11588:	cmp	r0, r3
   1158c:	bne	11674 <__assert_fail@plt+0x240>
   11590:	ldr	r3, [pc, #3788]	; 12464 <__assert_fail@plt+0x1030>
   11594:	mov	r2, #1
   11598:	add	r3, pc, r3
   1159c:	strb	r2, [r3, #131]	; 0x83
   115a0:	b	11718 <__assert_fail@plt+0x2e4>
   115a4:	cmp	r0, #49	; 0x31
   115a8:	beq	118cc <__assert_fail@plt+0x498>
   115ac:	bgt	1165c <__assert_fail@plt+0x228>
   115b0:	cmn	r0, #2
   115b4:	beq	1186c <__assert_fail@plt+0x438>
   115b8:	cmp	r0, #1
   115bc:	beq	11810 <__assert_fail@plt+0x3dc>
   115c0:	cmn	r0, #3
   115c4:	bne	11674 <__assert_fail@plt+0x240>
   115c8:	ldr	r1, [pc, #3736]	; 12468 <__assert_fail@plt+0x1034>
   115cc:	ldr	r3, [pc, #3736]	; 1246c <__assert_fail@plt+0x1038>
   115d0:	ldr	r2, [pc, #3736]	; 12470 <__assert_fail@plt+0x103c>
   115d4:	ldr	r0, [r7, r1]
   115d8:	ldr	r3, [r7, r3]
   115dc:	add	r2, pc, r2
   115e0:	ldr	r1, [pc, #3724]	; 12474 <__assert_fail@plt+0x1040>
   115e4:	ldr	r0, [r0]
   115e8:	ldr	r3, [r3]
   115ec:	add	r1, pc, r1
   115f0:	stm	sp, {r2, r4}
   115f4:	ldr	r2, [pc, #3708]	; 12478 <__assert_fail@plt+0x1044>
   115f8:	add	r2, pc, r2
   115fc:	bl	16128 <close_stdout@@Base+0x20ec>
   11600:	mov	r0, r4
   11604:	bl	112e4 <exit@plt>
   11608:	cmp	r0, #111	; 0x6f
   1160c:	beq	11894 <__assert_fail@plt+0x460>
   11610:	cmp	r0, #116	; 0x74
   11614:	beq	11764 <__assert_fail@plt+0x330>
   11618:	cmp	r0, #106	; 0x6a
   1161c:	bne	11674 <__assert_fail@plt+0x240>
   11620:	ldr	r3, [pc, #3668]	; 1247c <__assert_fail@plt+0x1048>
   11624:	ldr	r9, [r7, r3]
   11628:	ldr	r0, [r9]
   1162c:	ldrb	r3, [r0]
   11630:	sub	r2, r3, #49	; 0x31
   11634:	cmp	r2, #1
   11638:	bls	11914 <__assert_fail@plt+0x4e0>
   1163c:	bl	126b8 <__assert_fail@plt+0x1284>
   11640:	mov	r1, r0
   11644:	ldr	r0, [sp, #16]
   11648:	bl	12780 <__assert_fail@plt+0x134c>
   1164c:	add	r0, r8, #8
   11650:	ldr	r1, [r8, #4]
   11654:	bl	12780 <__assert_fail@plt+0x134c>
   11658:	b	11718 <__assert_fail@plt+0x2e4>
   1165c:	cmp	r0, #97	; 0x61
   11660:	beq	11688 <__assert_fail@plt+0x254>
   11664:	cmp	r0, #101	; 0x65
   11668:	beq	11724 <__assert_fail@plt+0x2f0>
   1166c:	cmp	r0, #50	; 0x32
   11670:	beq	11874 <__assert_fail@plt+0x440>
   11674:	mov	r0, #1
   11678:	bl	13c2c <__assert_fail@plt+0x27f8>
   1167c:	ldr	r3, [pc, #3580]	; 12480 <__assert_fail@plt+0x104c>
   11680:	add	r3, pc, r3
   11684:	strb	r4, [r3, #128]	; 0x80
   11688:	ldr	ip, [pc, #3564]	; 1247c <__assert_fail@plt+0x1048>
   1168c:	mov	r1, #0
   11690:	ldr	r0, [pc, #3564]	; 12484 <__assert_fail@plt+0x1050>
   11694:	mov	r2, #10
   11698:	add	r3, sp, #96	; 0x60
   1169c:	ldr	r9, [r7, ip]
   116a0:	add	r0, pc, r0
   116a4:	str	r0, [sp]
   116a8:	ldr	r0, [r9]
   116ac:	bl	16630 <close_stdout@@Base+0x25f4>
   116b0:	cmp	r0, #0
   116b4:	bne	116c8 <__assert_fail@plt+0x294>
   116b8:	ldr	r3, [sp, #96]	; 0x60
   116bc:	sub	r2, r3, #1
   116c0:	cmp	r2, #1
   116c4:	bls	11700 <__assert_fail@plt+0x2cc>
   116c8:	ldr	r1, [pc, #3512]	; 12488 <__assert_fail@plt+0x1054>
   116cc:	mov	r2, #5
   116d0:	mov	r0, #0
   116d4:	add	r1, pc, r1
   116d8:	bl	111dc <dcgettext@plt>
   116dc:	mov	r4, r0
   116e0:	ldr	r0, [r9]
   116e4:	bl	15c80 <close_stdout@@Base+0x1c44>
   116e8:	mov	r2, r4
   116ec:	mov	r1, #0
   116f0:	mov	r3, r0
   116f4:	mov	r0, #1
   116f8:	bl	11260 <error@plt>
   116fc:	ldr	r3, [sp, #96]	; 0x60
   11700:	cmp	r3, #1
   11704:	beq	119fc <__assert_fail@plt+0x5c8>
   11708:	ldr	r3, [pc, #3452]	; 1248c <__assert_fail@plt+0x1058>
   1170c:	mov	r2, #1
   11710:	add	r3, pc, r3
   11714:	strb	r2, [r3, #130]	; 0x82
   11718:	ldr	r3, [sp, #44]	; 0x2c
   1171c:	str	r3, [sp, #48]	; 0x30
   11720:	b	11524 <__assert_fail@plt+0xf0>
   11724:	ldr	r3, [pc, #3428]	; 12490 <__assert_fail@plt+0x105c>
   11728:	add	r3, pc, r3
   1172c:	ldr	r0, [r3, #68]	; 0x44
   11730:	ldr	r3, [pc, #3396]	; 1247c <__assert_fail@plt+0x1048>
   11734:	cmp	r0, #0
   11738:	ldr	r9, [r7, r3]
   1173c:	beq	11750 <__assert_fail@plt+0x31c>
   11740:	ldr	r1, [r9]
   11744:	bl	11164 <strcmp@plt>
   11748:	cmp	r0, #0
   1174c:	bne	119d4 <__assert_fail@plt+0x5a0>
   11750:	ldr	r3, [pc, #3388]	; 12494 <__assert_fail@plt+0x1060>
   11754:	ldr	r2, [r9]
   11758:	add	r3, pc, r3
   1175c:	str	r2, [r3, #68]	; 0x44
   11760:	b	11718 <__assert_fail@plt+0x2e4>
   11764:	ldr	r3, [pc, #3344]	; 1247c <__assert_fail@plt+0x1048>
   11768:	ldr	r9, [r7, r3]
   1176c:	ldr	r0, [r9]
   11770:	bl	16430 <close_stdout@@Base+0x23f4>
   11774:	mov	sl, r0
   11778:	bl	11230 <__ctype_get_mb_cur_max@plt>
   1177c:	cmp	r0, #1
   11780:	movls	r4, #1
   11784:	bls	117c0 <__assert_fail@plt+0x38c>
   11788:	mov	r1, #16
   1178c:	mov	r0, sl
   11790:	str	r4, [sp, #76]	; 0x4c
   11794:	str	r4, [sp, #80]	; 0x50
   11798:	bl	11398 <strnlen@plt>
   1179c:	mov	r1, sl
   117a0:	add	r3, sp, #76	; 0x4c
   117a4:	mov	r2, r0
   117a8:	mov	r0, r4
   117ac:	bl	11254 <mbrtowc@plt>
   117b0:	sub	r4, r0, #1
   117b4:	cmn	r4, #4
   117b8:	movls	r4, r0
   117bc:	movhi	r4, #1
   117c0:	cmp	sl, #0
   117c4:	beq	11b04 <__assert_fail@plt+0x6d0>
   117c8:	ldr	r3, [r9]
   117cc:	ldrb	r3, [r3, #1]
   117d0:	cmp	r3, #0
   117d4:	bne	1196c <__assert_fail@plt+0x538>
   117d8:	ldr	r3, [pc, #3256]	; 12498 <__assert_fail@plt+0x1064>
   117dc:	add	r3, pc, r3
   117e0:	ldr	r0, [r3, #40]	; 0x28
   117e4:	cmp	r0, #0
   117e8:	beq	117fc <__assert_fail@plt+0x3c8>
   117ec:	mov	r1, sl
   117f0:	bl	11164 <strcmp@plt>
   117f4:	cmp	r0, #0
   117f8:	bne	119a4 <__assert_fail@plt+0x570>
   117fc:	ldr	r3, [pc, #3224]	; 1249c <__assert_fail@plt+0x1068>
   11800:	add	r3, pc, r3
   11804:	str	sl, [r3, #40]	; 0x28
   11808:	str	r4, [r3, #44]	; 0x2c
   1180c:	b	11718 <__assert_fail@plt+0x2e4>
   11810:	ldr	lr, [pc, #3172]	; 1247c <__assert_fail@plt+0x1048>
   11814:	add	r0, sp, #44	; 0x2c
   11818:	add	ip, sp, #48	; 0x30
   1181c:	add	r1, sp, #60	; 0x3c
   11820:	add	r2, sp, #68	; 0x44
   11824:	add	r3, sp, #52	; 0x34
   11828:	ldr	r9, [r7, lr]
   1182c:	str	ip, [sp]
   11830:	str	r0, [sp, #4]
   11834:	ldr	r0, [r9]
   11838:	bl	13e88 <__assert_fail@plt+0x2a54>
   1183c:	b	11718 <__assert_fail@plt+0x2e4>
   11840:	ldr	r3, [pc, #3160]	; 124a0 <__assert_fail@plt+0x106c>
   11844:	mov	r2, #2
   11848:	add	r3, pc, r3
   1184c:	str	r2, [r3, #48]	; 0x30
   11850:	b	11718 <__assert_fail@plt+0x2e4>
   11854:	cmp	r0, #122	; 0x7a
   11858:	bne	11674 <__assert_fail@plt+0x240>
   1185c:	ldr	r3, [pc, #3136]	; 124a4 <__assert_fail@plt+0x1070>
   11860:	add	r3, pc, r3
   11864:	strb	r4, [r3]
   11868:	b	11718 <__assert_fail@plt+0x2e4>
   1186c:	mov	r0, r4
   11870:	bl	13c2c <__assert_fail@plt+0x27f8>
   11874:	ldr	r3, [pc, #3072]	; 1247c <__assert_fail@plt+0x1048>
   11878:	ldr	r9, [r7, r3]
   1187c:	ldr	r0, [r9]
   11880:	bl	126b8 <__assert_fail@plt+0x1284>
   11884:	mov	r1, r0
   11888:	ldr	r0, [sp, #12]
   1188c:	bl	12780 <__assert_fail@plt+0x134c>
   11890:	b	11718 <__assert_fail@plt+0x2e4>
   11894:	ldr	r3, [pc, #3040]	; 1247c <__assert_fail@plt+0x1048>
   11898:	ldr	r1, [pc, #3080]	; 124a8 <__assert_fail@plt+0x1074>
   1189c:	ldr	r9, [r7, r3]
   118a0:	add	r1, pc, r1
   118a4:	ldr	r4, [r9]
   118a8:	mov	r0, r4
   118ac:	bl	11164 <strcmp@plt>
   118b0:	cmp	r0, #0
   118b4:	bne	11ab4 <__assert_fail@plt+0x680>
   118b8:	ldr	r3, [pc, #3052]	; 124ac <__assert_fail@plt+0x1078>
   118bc:	mov	r2, #1
   118c0:	add	r3, pc, r3
   118c4:	strb	r2, [r3, #72]	; 0x48
   118c8:	b	11718 <__assert_fail@plt+0x2e4>
   118cc:	ldr	r3, [pc, #2984]	; 1247c <__assert_fail@plt+0x1048>
   118d0:	ldr	r9, [r7, r3]
   118d4:	ldr	r0, [r9]
   118d8:	bl	126b8 <__assert_fail@plt+0x1284>
   118dc:	mov	r1, r0
   118e0:	mov	r0, fp
   118e4:	bl	12780 <__assert_fail@plt+0x134c>
   118e8:	b	11718 <__assert_fail@plt+0x2e4>
   118ec:	ldr	r3, [pc, #3004]	; 124b0 <__assert_fail@plt+0x107c>
   118f0:	mov	r2, #1
   118f4:	add	r3, pc, r3
   118f8:	str	r2, [r3, #48]	; 0x30
   118fc:	b	11718 <__assert_fail@plt+0x2e4>
   11900:	ldr	r3, [pc, #2988]	; 124b4 <__assert_fail@plt+0x1080>
   11904:	mov	r2, #1
   11908:	add	r3, pc, r3
   1190c:	strb	r2, [r3, #8]
   11910:	b	11718 <__assert_fail@plt+0x2e4>
   11914:	ldrb	r2, [r0, #1]
   11918:	cmp	r2, #0
   1191c:	bne	1163c <__assert_fail@plt+0x208>
   11920:	ldr	r2, [pc, #2960]	; 124b8 <__assert_fail@plt+0x1084>
   11924:	ldr	r2, [r7, r2]
   11928:	ldr	r2, [r2]
   1192c:	sub	r2, r2, #-1073741823	; 0xc0000001
   11930:	ldr	r2, [r5, r2, lsl #2]
   11934:	add	r2, r2, #2
   11938:	cmp	r0, r2
   1193c:	bne	1163c <__assert_fail@plt+0x208>
   11940:	subs	r2, r3, #50	; 0x32
   11944:	rsbs	r3, r2, #0
   11948:	adcs	r3, r3, r2
   1194c:	add	r2, r3, #1
   11950:	str	r2, [sp, #44]	; 0x2c
   11954:	add	r2, sp, #112	; 0x70
   11958:	add	r3, r2, r3, lsl #2
   1195c:	ldr	r2, [r3, #-44]	; 0xffffffd4
   11960:	add	r2, r2, #1
   11964:	str	r2, [r3, #-44]	; 0xffffffd4
   11968:	b	11718 <__assert_fail@plt+0x2e4>
   1196c:	cmp	r4, #1
   11970:	bne	117d8 <__assert_fail@plt+0x3a4>
   11974:	ldrb	r3, [sl, #1]
   11978:	cmp	r3, #0
   1197c:	beq	117d8 <__assert_fail@plt+0x3a4>
   11980:	ldrb	r2, [sl]
   11984:	cmp	r2, #92	; 0x5c
   11988:	bne	117d8 <__assert_fail@plt+0x3a4>
   1198c:	cmp	r3, #48	; 0x30
   11990:	bne	117d8 <__assert_fail@plt+0x3a4>
   11994:	ldrb	r3, [sl, #2]
   11998:	cmp	r3, #0
   1199c:	strbeq	r3, [sl]
   119a0:	b	117d8 <__assert_fail@plt+0x3a4>
   119a4:	mov	r0, sl
   119a8:	bl	11188 <free@plt>
   119ac:	ldr	r1, [pc, #2824]	; 124bc <__assert_fail@plt+0x1088>
   119b0:	mov	r2, #5
   119b4:	mov	r0, #0
   119b8:	add	r1, pc, r1
   119bc:	bl	111dc <dcgettext@plt>
   119c0:	mov	r1, #0
   119c4:	mov	r2, r0
   119c8:	mov	r0, #1
   119cc:	bl	11260 <error@plt>
   119d0:	b	117fc <__assert_fail@plt+0x3c8>
   119d4:	ldr	r1, [pc, #2788]	; 124c0 <__assert_fail@plt+0x108c>
   119d8:	mov	r0, r4
   119dc:	mov	r2, #5
   119e0:	add	r1, pc, r1
   119e4:	bl	111dc <dcgettext@plt>
   119e8:	mov	r1, r4
   119ec:	mov	r2, r0
   119f0:	mov	r0, #1
   119f4:	bl	11260 <error@plt>
   119f8:	b	11750 <__assert_fail@plt+0x31c>
   119fc:	ldr	r2, [pc, #2752]	; 124c4 <__assert_fail@plt+0x1090>
   11a00:	add	r2, pc, r2
   11a04:	strb	r3, [r2, #129]	; 0x81
   11a08:	b	11718 <__assert_fail@plt+0x2e4>
   11a0c:	ldr	r3, [pc, #2724]	; 124b8 <__assert_fail@plt+0x1084>
   11a10:	str	r4, [sp, #48]	; 0x30
   11a14:	ldr	r4, [r7, r3]
   11a18:	ldr	r3, [r4]
   11a1c:	cmp	r6, r3
   11a20:	ble	11a78 <__assert_fail@plt+0x644>
   11a24:	add	ip, sp, #44	; 0x2c
   11a28:	add	fp, sp, #60	; 0x3c
   11a2c:	add	sl, sp, #68	; 0x44
   11a30:	add	r9, sp, #52	; 0x34
   11a34:	add	r8, sp, #48	; 0x30
   11a38:	str	r7, [sp, #12]
   11a3c:	mov	r7, r4
   11a40:	mov	r4, ip
   11a44:	add	r2, r3, #1
   11a48:	mov	r1, fp
   11a4c:	str	r2, [r7]
   11a50:	mov	r2, sl
   11a54:	ldr	r0, [r5, r3, lsl #2]
   11a58:	mov	r3, r9
   11a5c:	str	r8, [sp]
   11a60:	str	r4, [sp, #4]
   11a64:	bl	13e88 <__assert_fail@plt+0x2a54>
   11a68:	ldr	r3, [r7]
   11a6c:	cmp	r6, r3
   11a70:	bgt	11a44 <__assert_fail@plt+0x610>
   11a74:	ldr	r7, [sp, #12]
   11a78:	ldr	r4, [sp, #52]	; 0x34
   11a7c:	cmp	r4, #2
   11a80:	beq	11b10 <__assert_fail@plt+0x6dc>
   11a84:	cmp	r4, #0
   11a88:	bne	11ac8 <__assert_fail@plt+0x694>
   11a8c:	ldr	r1, [pc, #2612]	; 124c8 <__assert_fail@plt+0x1094>
   11a90:	mov	r0, r4
   11a94:	mov	r2, #5
   11a98:	add	r1, pc, r1
   11a9c:	bl	111dc <dcgettext@plt>
   11aa0:	mov	r1, r4
   11aa4:	mov	r2, r0
   11aa8:	mov	r0, r4
   11aac:	bl	11260 <error@plt>
   11ab0:	b	11674 <__assert_fail@plt+0x240>
   11ab4:	mov	r0, r4
   11ab8:	bl	12864 <__assert_fail@plt+0x1430>
   11abc:	mov	r3, #3
   11ac0:	str	r3, [sp, #44]	; 0x2c
   11ac4:	b	11718 <__assert_fail@plt+0x2e4>
   11ac8:	ldr	r1, [pc, #2556]	; 124cc <__assert_fail@plt+0x1098>
   11acc:	mov	r2, #5
   11ad0:	mov	r0, #0
   11ad4:	sub	r6, r6, #-1073741823	; 0xc0000001
   11ad8:	add	r1, pc, r1
   11adc:	bl	111dc <dcgettext@plt>
   11ae0:	mov	r4, r0
   11ae4:	ldr	r0, [r5, r6, lsl #2]
   11ae8:	bl	15c80 <close_stdout@@Base+0x1c44>
   11aec:	mov	r2, r4
   11af0:	mov	r3, r0
   11af4:	mov	r0, #0
   11af8:	mov	r1, r0
   11afc:	bl	11260 <error@plt>
   11b00:	b	11674 <__assert_fail@plt+0x240>
   11b04:	ldr	sl, [pc, #2500]	; 124d0 <__assert_fail@plt+0x109c>
   11b08:	add	sl, pc, sl
   11b0c:	b	117d8 <__assert_fail@plt+0x3a4>
   11b10:	ldr	r3, [sp, #68]	; 0x44
   11b14:	cmp	r3, #0
   11b18:	bne	122e8 <__assert_fail@plt+0xeb4>
   11b1c:	ldr	r3, [sp, #72]	; 0x48
   11b20:	cmp	r3, #0
   11b24:	bne	122c4 <__assert_fail@plt+0xe90>
   11b28:	ldr	r3, [pc, #2468]	; 124d4 <__assert_fail@plt+0x10a0>
   11b2c:	add	r3, pc, r3
   11b30:	ldr	r2, [r3, #4]
   11b34:	cmn	r2, #1
   11b38:	moveq	r2, #0
   11b3c:	streq	r2, [r3, #4]
   11b40:	ldr	r3, [pc, #2448]	; 124d8 <__assert_fail@plt+0x10a4>
   11b44:	add	r3, pc, r3
   11b48:	ldr	r2, [r3, #8]
   11b4c:	cmn	r2, #1
   11b50:	moveq	r2, #0
   11b54:	streq	r2, [r3, #8]
   11b58:	ldr	r3, [pc, #2428]	; 124dc <__assert_fail@plt+0x10a8>
   11b5c:	add	r3, pc, r3
   11b60:	ldr	r0, [r3, #60]	; 0x3c
   11b64:	ldrb	r3, [r0]
   11b68:	cmp	r3, #45	; 0x2d
   11b6c:	beq	121bc <__assert_fail@plt+0xd88>
   11b70:	ldr	r1, [pc, #2408]	; 124e0 <__assert_fail@plt+0x10ac>
   11b74:	add	r1, pc, r1
   11b78:	bl	14238 <close_stdout@@Base+0x1fc>
   11b7c:	mov	r8, r0
   11b80:	cmp	r8, #0
   11b84:	beq	123a8 <__assert_fail@plt+0xf74>
   11b88:	ldr	r3, [pc, #2388]	; 124e4 <__assert_fail@plt+0x10b0>
   11b8c:	add	r3, pc, r3
   11b90:	ldr	r0, [r3, #64]	; 0x40
   11b94:	ldrb	r3, [r0]
   11b98:	cmp	r3, #45	; 0x2d
   11b9c:	beq	121a0 <__assert_fail@plt+0xd6c>
   11ba0:	ldr	r1, [pc, #2368]	; 124e8 <__assert_fail@plt+0x10b4>
   11ba4:	add	r1, pc, r1
   11ba8:	bl	14238 <close_stdout@@Base+0x1fc>
   11bac:	mov	r7, r0
   11bb0:	cmp	r7, #0
   11bb4:	beq	12404 <__assert_fail@plt+0xfd0>
   11bb8:	cmp	r8, r7
   11bbc:	beq	123d4 <__assert_fail@plt+0xfa0>
   11bc0:	mov	r0, r8
   11bc4:	mov	r1, #2
   11bc8:	add	r3, sp, #84	; 0x54
   11bcc:	add	sl, sp, #96	; 0x60
   11bd0:	str	r3, [sp, #12]
   11bd4:	bl	141fc <close_stdout@@Base+0x1c0>
   11bd8:	mov	r0, r7
   11bdc:	mov	r1, #2
   11be0:	bl	141fc <close_stdout@@Base+0x1c0>
   11be4:	add	r1, sp, #84	; 0x54
   11be8:	mov	r2, #1
   11bec:	mov	r0, r8
   11bf0:	mov	r4, #0
   11bf4:	str	r4, [sp, #84]	; 0x54
   11bf8:	str	r4, [sp, #88]	; 0x58
   11bfc:	str	r4, [sp, #92]	; 0x5c
   11c00:	bl	13750 <__assert_fail@plt+0x231c>
   11c04:	mov	r1, sl
   11c08:	mov	r0, r7
   11c0c:	mov	r2, #2
   11c10:	str	r4, [sp, #96]	; 0x60
   11c14:	str	r4, [sp, #100]	; 0x64
   11c18:	str	r4, [sp, #104]	; 0x68
   11c1c:	bl	13750 <__assert_fail@plt+0x231c>
   11c20:	ldr	r3, [pc, #2244]	; 124ec <__assert_fail@plt+0x10b8>
   11c24:	add	r3, pc, r3
   11c28:	ldrb	r3, [r3, #72]	; 0x48
   11c2c:	cmp	r3, r4
   11c30:	ldr	r3, [sp, #84]	; 0x54
   11c34:	beq	11c78 <__assert_fail@plt+0x844>
   11c38:	cmp	r3, #0
   11c3c:	ldr	r1, [pc, #2220]	; 124f0 <__assert_fail@plt+0x10bc>
   11c40:	ldrne	r2, [sp, #92]	; 0x5c
   11c44:	moveq	r0, r3
   11c48:	add	r1, pc, r1
   11c4c:	ldrne	r2, [r2]
   11c50:	ldrne	r0, [r2, #20]
   11c54:	ldr	r2, [sp, #96]	; 0x60
   11c58:	cmp	r2, #0
   11c5c:	str	r0, [r1, #120]	; 0x78
   11c60:	ldr	r1, [pc, #2188]	; 124f4 <__assert_fail@plt+0x10c0>
   11c64:	ldrne	r2, [sp, #104]	; 0x68
   11c68:	add	r1, pc, r1
   11c6c:	ldrne	r2, [r2]
   11c70:	ldrne	r2, [r2, #20]
   11c74:	str	r2, [r1, #124]	; 0x7c
   11c78:	ldr	r2, [pc, #2168]	; 124f8 <__assert_fail@plt+0x10c4>
   11c7c:	add	r2, pc, r2
   11c80:	ldrb	r1, [r2, #131]	; 0x83
   11c84:	cmp	r1, #0
   11c88:	beq	11ce0 <__assert_fail@plt+0x8ac>
   11c8c:	cmp	r3, #0
   11c90:	ldr	r1, [sp, #96]	; 0x60
   11c94:	beq	12338 <__assert_fail@plt+0xf04>
   11c98:	ldr	r3, [sp, #92]	; 0x5c
   11c9c:	cmp	r1, #0
   11ca0:	addeq	r1, r2, #88	; 0x58
   11ca4:	ldr	r0, [r3]
   11ca8:	bne	12344 <__assert_fail@plt+0xf10>
   11cac:	bl	13a2c <__assert_fail@plt+0x25f8>
   11cb0:	ldr	r3, [sp, #84]	; 0x54
   11cb4:	ldr	r2, [pc, #2112]	; 124fc <__assert_fail@plt+0x10c8>
   11cb8:	mov	ip, #0
   11cbc:	cmp	r3, ip
   11cc0:	add	r2, pc, r2
   11cc4:	str	ip, [r2, #12]
   11cc8:	str	ip, [r2, #16]
   11ccc:	bne	12370 <__assert_fail@plt+0xf3c>
   11cd0:	ldr	r3, [sp, #96]	; 0x60
   11cd4:	cmp	r3, #0
   11cd8:	bne	12354 <__assert_fail@plt+0xf20>
   11cdc:	ldr	r3, [sp, #84]	; 0x54
   11ce0:	ldr	r2, [pc, #2072]	; 12500 <__assert_fail@plt+0x10cc>
   11ce4:	ldr	r9, [pc, #2072]	; 12504 <__assert_fail@plt+0x10d0>
   11ce8:	add	r2, pc, r2
   11cec:	str	r2, [sp, #16]
   11cf0:	ldr	r2, [pc, #2064]	; 12508 <__assert_fail@plt+0x10d4>
   11cf4:	add	r9, pc, r9
   11cf8:	ldr	r5, [pc, #2060]	; 1250c <__assert_fail@plt+0x10d8>
   11cfc:	add	r2, pc, r2
   11d00:	str	r2, [sp, #20]
   11d04:	ldr	r2, [sp, #16]
   11d08:	add	r5, pc, r5
   11d0c:	add	r2, r2, #88	; 0x58
   11d10:	str	r2, [sp, #32]
   11d14:	ldr	r2, [sp, #20]
   11d18:	add	r2, r2, #88	; 0x58
   11d1c:	str	r2, [sp, #36]	; 0x24
   11d20:	b	11d64 <__assert_fail@plt+0x930>
   11d24:	beq	11df0 <__assert_fail@plt+0x9bc>
   11d28:	ldr	r2, [sp, #16]
   11d2c:	ldrb	r3, [r2, #130]	; 0x82
   11d30:	cmp	r3, #0
   11d34:	bne	11fe0 <__assert_fail@plt+0xbac>
   11d38:	mov	r2, #2
   11d3c:	mov	r0, r7
   11d40:	mov	r1, sl
   11d44:	mov	r3, #0
   11d48:	str	r3, [sp, #96]	; 0x60
   11d4c:	bl	13750 <__assert_fail@plt+0x231c>
   11d50:	ldr	r3, [pc, #1976]	; 12510 <__assert_fail@plt+0x10dc>
   11d54:	mov	r2, #1
   11d58:	add	r3, pc, r3
   11d5c:	strb	r2, [r3, #52]	; 0x34
   11d60:	ldr	r3, [sp, #84]	; 0x54
   11d64:	cmp	r3, #0
   11d68:	beq	11ff4 <__assert_fail@plt+0xbc0>
   11d6c:	ldr	r2, [sp, #96]	; 0x60
   11d70:	cmp	r2, #0
   11d74:	beq	11ff4 <__assert_fail@plt+0xbc0>
   11d78:	ldr	r3, [r9, #4]
   11d7c:	ldr	r1, [sp, #92]	; 0x5c
   11d80:	ldr	r2, [sp, #104]	; 0x68
   11d84:	ldr	r0, [r1]
   11d88:	ldr	r2, [r2]
   11d8c:	str	r3, [sp]
   11d90:	add	r1, r0, #28
   11d94:	ldr	ip, [r9, #8]
   11d98:	add	r3, r2, #28
   11d9c:	str	ip, [sp, #4]
   11da0:	ldr	r0, [r0, #20]
   11da4:	ldr	r2, [r2, #20]
   11da8:	bl	12b84 <__assert_fail@plt+0x1750>
   11dac:	cmp	r0, #0
   11db0:	bge	11d24 <__assert_fail@plt+0x8f0>
   11db4:	ldr	r2, [sp, #20]
   11db8:	ldrb	r3, [r2, #129]	; 0x81
   11dbc:	cmp	r3, #0
   11dc0:	bne	1218c <__assert_fail@plt+0xd58>
   11dc4:	mov	r2, #1
   11dc8:	mov	r0, r8
   11dcc:	add	r1, sp, #84	; 0x54
   11dd0:	mov	r3, #0
   11dd4:	str	r3, [sp, #84]	; 0x54
   11dd8:	bl	13750 <__assert_fail@plt+0x231c>
   11ddc:	ldr	r3, [pc, #1840]	; 12514 <__assert_fail@plt+0x10e0>
   11de0:	mov	r2, #1
   11de4:	add	r3, pc, r3
   11de8:	strb	r2, [r3, #52]	; 0x34
   11dec:	b	11d60 <__assert_fail@plt+0x92c>
   11df0:	add	r4, sp, #84	; 0x54
   11df4:	b	11e3c <__assert_fail@plt+0xa08>
   11df8:	ldr	r1, [sp, #84]	; 0x54
   11dfc:	ldr	r3, [sp, #92]	; 0x5c
   11e00:	ldr	r2, [sp, #104]	; 0x68
   11e04:	sub	r1, r1, #-1073741823	; 0xc0000001
   11e08:	ldr	ip, [r5, #4]
   11e0c:	ldr	r3, [r3, r1, lsl #2]
   11e10:	ldr	r2, [r2]
   11e14:	add	r1, r3, #28
   11e18:	ldr	r0, [r3, #20]
   11e1c:	add	r3, r2, #28
   11e20:	ldr	r2, [r2, #20]
   11e24:	str	ip, [sp]
   11e28:	ldr	ip, [r5, #8]
   11e2c:	str	ip, [sp, #4]
   11e30:	bl	12b84 <__assert_fail@plt+0x1750>
   11e34:	cmp	r0, #0
   11e38:	bne	12174 <__assert_fail@plt+0xd40>
   11e3c:	mov	r0, r8
   11e40:	mov	r1, r4
   11e44:	mov	r2, #1
   11e48:	bl	13750 <__assert_fail@plt+0x231c>
   11e4c:	cmp	r0, #0
   11e50:	bne	11df8 <__assert_fail@plt+0x9c4>
   11e54:	ldr	r3, [sp, #84]	; 0x54
   11e58:	mov	r2, #1
   11e5c:	str	r2, [sp, #24]
   11e60:	add	r3, r3, r2
   11e64:	str	r3, [sp, #84]	; 0x54
   11e68:	ldr	r4, [pc, #1704]	; 12518 <__assert_fail@plt+0x10e4>
   11e6c:	add	r4, pc, r4
   11e70:	b	11eb8 <__assert_fail@plt+0xa84>
   11e74:	ldr	r1, [sp, #96]	; 0x60
   11e78:	ldr	r3, [sp, #92]	; 0x5c
   11e7c:	ldr	r2, [sp, #104]	; 0x68
   11e80:	sub	r1, r1, #-1073741823	; 0xc0000001
   11e84:	ldr	lr, [r4, #4]
   11e88:	ldr	ip, [r3]
   11e8c:	ldr	r2, [r2, r1, lsl #2]
   11e90:	add	r1, ip, #28
   11e94:	ldr	r0, [ip, #20]
   11e98:	add	r3, r2, #28
   11e9c:	ldr	r2, [r2, #20]
   11ea0:	str	lr, [sp]
   11ea4:	ldr	ip, [r4, #8]
   11ea8:	str	ip, [sp, #4]
   11eac:	bl	12b84 <__assert_fail@plt+0x1750>
   11eb0:	cmp	r0, #0
   11eb4:	bne	12180 <__assert_fail@plt+0xd4c>
   11eb8:	mov	r0, r7
   11ebc:	mov	r1, sl
   11ec0:	mov	r2, #2
   11ec4:	bl	13750 <__assert_fail@plt+0x231c>
   11ec8:	cmp	r0, #0
   11ecc:	bne	11e74 <__assert_fail@plt+0xa40>
   11ed0:	ldr	r3, [sp, #96]	; 0x60
   11ed4:	mov	r2, #1
   11ed8:	str	r2, [sp, #28]
   11edc:	add	r3, r3, r2
   11ee0:	str	r3, [sp, #96]	; 0x60
   11ee4:	ldr	r3, [pc, #1584]	; 1251c <__assert_fail@plt+0x10e8>
   11ee8:	add	r3, pc, r3
   11eec:	ldrb	r3, [r3, #128]	; 0x80
   11ef0:	cmp	r3, #0
   11ef4:	movne	r6, #0
   11ef8:	ldrne	r3, [sp, #84]	; 0x54
   11efc:	bne	11f94 <__assert_fail@plt+0xb60>
   11f00:	ldr	r2, [sp, #24]
   11f04:	cmp	r2, #0
   11f08:	movne	r3, #0
   11f0c:	strne	r3, [sp, #84]	; 0x54
   11f10:	bne	11f44 <__assert_fail@plt+0xb10>
   11f14:	ldr	r1, [sp, #84]	; 0x54
   11f18:	mov	r2, #1
   11f1c:	ldr	r3, [sp, #92]	; 0x5c
   11f20:	sub	r1, r1, #-1073741823	; 0xc0000001
   11f24:	ldr	r1, [r3, r1, lsl #2]
   11f28:	ldr	r0, [r3]
   11f2c:	str	r1, [r3]
   11f30:	ldr	r1, [sp, #84]	; 0x54
   11f34:	ldr	r3, [sp, #92]	; 0x5c
   11f38:	sub	r1, r1, #-1073741823	; 0xc0000001
   11f3c:	str	r0, [r3, r1, lsl #2]
   11f40:	str	r2, [sp, #84]	; 0x54
   11f44:	ldr	r3, [sp, #28]
   11f48:	cmp	r3, #0
   11f4c:	movne	r3, #0
   11f50:	strne	r3, [sp, #96]	; 0x60
   11f54:	bne	11d60 <__assert_fail@plt+0x92c>
   11f58:	ldr	r1, [sp, #96]	; 0x60
   11f5c:	mov	r2, #1
   11f60:	ldr	r3, [sp, #104]	; 0x68
   11f64:	sub	r1, r1, #-1073741823	; 0xc0000001
   11f68:	ldr	r1, [r3, r1, lsl #2]
   11f6c:	ldr	r0, [r3]
   11f70:	str	r1, [r3]
   11f74:	ldr	r1, [sp, #96]	; 0x60
   11f78:	ldr	r3, [sp, #104]	; 0x68
   11f7c:	sub	r1, r1, #-1073741823	; 0xc0000001
   11f80:	str	r0, [r3, r1, lsl #2]
   11f84:	str	r2, [sp, #96]	; 0x60
   11f88:	b	11d60 <__assert_fail@plt+0x92c>
   11f8c:	ldr	r3, [sp, #84]	; 0x54
   11f90:	add	r6, r6, #1
   11f94:	sub	r2, r3, #1
   11f98:	cmp	r6, r2
   11f9c:	bcs	11f00 <__assert_fail@plt+0xacc>
   11fa0:	ldr	r2, [sp, #96]	; 0x60
   11fa4:	cmp	r2, #1
   11fa8:	beq	11f90 <__assert_fail@plt+0xb5c>
   11fac:	lsl	fp, r6, #2
   11fb0:	mov	r4, #0
   11fb4:	ldr	r3, [sp, #104]	; 0x68
   11fb8:	ldr	r2, [sp, #92]	; 0x5c
   11fbc:	ldr	r1, [r3, r4, lsl #2]
   11fc0:	add	r4, r4, #1
   11fc4:	ldr	r0, [r2, fp]
   11fc8:	bl	13a2c <__assert_fail@plt+0x25f8>
   11fcc:	ldr	r3, [sp, #96]	; 0x60
   11fd0:	sub	r3, r3, #1
   11fd4:	cmp	r4, r3
   11fd8:	bcc	11fb4 <__assert_fail@plt+0xb80>
   11fdc:	b	11f8c <__assert_fail@plt+0xb58>
   11fe0:	ldr	r3, [sp, #104]	; 0x68
   11fe4:	ldr	r0, [sp, #32]
   11fe8:	ldr	r1, [r3]
   11fec:	bl	13a2c <__assert_fail@plt+0x25f8>
   11ff0:	b	11d38 <__assert_fail@plt+0x904>
   11ff4:	ldr	r2, [pc, #1316]	; 12520 <__assert_fail@plt+0x10ec>
   11ff8:	mov	r1, #0
   11ffc:	str	r1, [sp, #56]	; 0x38
   12000:	add	r2, pc, r2
   12004:	ldr	r1, [r2, #48]	; 0x30
   12008:	cmp	r1, #2
   1200c:	beq	12298 <__assert_fail@plt+0xe64>
   12010:	ldrb	r1, [r2, #56]	; 0x38
   12014:	cmp	r1, #0
   12018:	bne	1228c <__assert_fail@plt+0xe58>
   1201c:	ldr	r2, [pc, #1280]	; 12524 <__assert_fail@plt+0x10f0>
   12020:	cmp	r3, #0
   12024:	add	r2, pc, r2
   12028:	ldrb	r3, [r2, #129]	; 0x81
   1202c:	bne	121d8 <__assert_fail@plt+0xda4>
   12030:	ldrb	r3, [r2, #130]	; 0x82
   12034:	cmp	r3, #0
   12038:	beq	1226c <__assert_fail@plt+0xe38>
   1203c:	ldr	r3, [sp, #96]	; 0x60
   12040:	cmp	r3, #0
   12044:	beq	120cc <__assert_fail@plt+0xc98>
   12048:	ldr	r3, [sp, #104]	; 0x68
   1204c:	ldr	r0, [pc, #1236]	; 12528 <__assert_fail@plt+0x10f4>
   12050:	add	r0, pc, r0
   12054:	ldr	r1, [r3]
   12058:	add	r0, r0, #88	; 0x58
   1205c:	bl	13a2c <__assert_fail@plt+0x25f8>
   12060:	ldr	r3, [sp, #84]	; 0x54
   12064:	cmp	r3, #0
   12068:	ldrne	r3, [pc, #1212]	; 1252c <__assert_fail@plt+0x10f8>
   1206c:	movne	r2, #1
   12070:	addne	r3, pc, r3
   12074:	strbne	r2, [r3, #52]	; 0x34
   12078:	ldr	r6, [pc, #1200]	; 12530 <__assert_fail@plt+0x10fc>
   1207c:	add	r4, sp, #56	; 0x38
   12080:	ldr	r5, [pc, #1196]	; 12534 <__assert_fail@plt+0x1100>
   12084:	add	r6, pc, r6
   12088:	add	r5, pc, r5
   1208c:	add	r9, r6, #88	; 0x58
   12090:	mov	r0, r7
   12094:	mov	r1, r4
   12098:	mov	r2, #2
   1209c:	bl	12f6c <__assert_fail@plt+0x1b38>
   120a0:	cmp	r0, #0
   120a4:	beq	120cc <__assert_fail@plt+0xc98>
   120a8:	ldrb	r3, [r6, #130]	; 0x82
   120ac:	cmp	r3, #0
   120b0:	bne	12164 <__assert_fail@plt+0xd30>
   120b4:	ldrb	r3, [r5, #57]	; 0x39
   120b8:	cmp	r3, #0
   120bc:	beq	12090 <__assert_fail@plt+0xc5c>
   120c0:	ldrb	r3, [r5, #130]	; 0x82
   120c4:	cmp	r3, #0
   120c8:	bne	12090 <__assert_fail@plt+0xc5c>
   120cc:	ldr	r0, [sp, #56]	; 0x38
   120d0:	bl	127e4 <__assert_fail@plt+0x13b0>
   120d4:	ldr	r0, [sp, #56]	; 0x38
   120d8:	bl	11188 <free@plt>
   120dc:	add	r0, sp, #88	; 0x58
   120e0:	add	r1, sp, #92	; 0x5c
   120e4:	bl	12b34 <__assert_fail@plt+0x1700>
   120e8:	add	r0, sl, #4
   120ec:	add	r1, sl, #8
   120f0:	bl	12b34 <__assert_fail@plt+0x1700>
   120f4:	mov	r0, r8
   120f8:	bl	16b68 <close_stdout@@Base+0x2b2c>
   120fc:	cmp	r0, #0
   12100:	beq	1212c <__assert_fail@plt+0xcf8>
   12104:	bl	1132c <__errno_location@plt>
   12108:	ldr	r3, [pc, #1064]	; 12538 <__assert_fail@plt+0x1104>
   1210c:	add	r3, pc, r3
   12110:	ldr	r3, [r3, #60]	; 0x3c
   12114:	mov	r2, r0
   12118:	mov	r0, #1
   1211c:	ldr	r1, [r2]
   12120:	ldr	r2, [pc, #1044]	; 1253c <__assert_fail@plt+0x1108>
   12124:	add	r2, pc, r2
   12128:	bl	11260 <error@plt>
   1212c:	mov	r0, r7
   12130:	bl	16b68 <close_stdout@@Base+0x2b2c>
   12134:	cmp	r0, #0
   12138:	bne	1230c <__assert_fail@plt+0xed8>
   1213c:	ldr	r3, [pc, #1020]	; 12540 <__assert_fail@plt+0x110c>
   12140:	add	r3, pc, r3
   12144:	ldrb	r2, [r3, #56]	; 0x38
   12148:	cmp	r2, #0
   1214c:	bne	1215c <__assert_fail@plt+0xd28>
   12150:	ldrb	r0, [r3, #57]	; 0x39
   12154:	cmp	r0, #0
   12158:	beq	12350 <__assert_fail@plt+0xf1c>
   1215c:	mov	r0, #1
   12160:	bl	112e4 <exit@plt>
   12164:	mov	r0, r9
   12168:	ldr	r1, [sp, #56]	; 0x38
   1216c:	bl	13a2c <__assert_fail@plt+0x25f8>
   12170:	b	120b4 <__assert_fail@plt+0xc80>
   12174:	mov	r3, #0
   12178:	str	r3, [sp, #24]
   1217c:	b	11e68 <__assert_fail@plt+0xa34>
   12180:	mov	r3, #0
   12184:	str	r3, [sp, #28]
   12188:	b	11ee4 <__assert_fail@plt+0xab0>
   1218c:	ldr	r3, [sp, #92]	; 0x5c
   12190:	ldr	r1, [sp, #36]	; 0x24
   12194:	ldr	r0, [r3]
   12198:	bl	13a2c <__assert_fail@plt+0x25f8>
   1219c:	b	11dc4 <__assert_fail@plt+0x990>
   121a0:	ldrb	r3, [r0, #1]
   121a4:	cmp	r3, #0
   121a8:	bne	11ba0 <__assert_fail@plt+0x76c>
   121ac:	ldr	r3, [pc, #912]	; 12544 <__assert_fail@plt+0x1110>
   121b0:	ldr	r3, [r7, r3]
   121b4:	ldr	r7, [r3]
   121b8:	b	11bb0 <__assert_fail@plt+0x77c>
   121bc:	ldrb	r3, [r0, #1]
   121c0:	cmp	r3, #0
   121c4:	bne	11b70 <__assert_fail@plt+0x73c>
   121c8:	ldr	r3, [pc, #884]	; 12544 <__assert_fail@plt+0x1110>
   121cc:	ldr	r3, [r7, r3]
   121d0:	ldr	r8, [r3]
   121d4:	b	11b80 <__assert_fail@plt+0x74c>
   121d8:	cmp	r3, #0
   121dc:	mov	fp, #1
   121e0:	bne	1238c <__assert_fail@plt+0xf58>
   121e4:	ldr	r3, [sp, #96]	; 0x60
   121e8:	cmp	r3, #0
   121ec:	ldrne	r3, [pc, #852]	; 12548 <__assert_fail@plt+0x1114>
   121f0:	movne	r2, #1
   121f4:	addne	r3, pc, r3
   121f8:	strbne	r2, [r3, #52]	; 0x34
   121fc:	ldr	r6, [pc, #840]	; 1254c <__assert_fail@plt+0x1118>
   12200:	add	r4, sp, #56	; 0x38
   12204:	ldr	r5, [pc, #836]	; 12550 <__assert_fail@plt+0x111c>
   12208:	add	r6, pc, r6
   1220c:	add	r5, pc, r5
   12210:	add	r9, r6, #88	; 0x58
   12214:	mov	r0, r8
   12218:	mov	r1, r4
   1221c:	mov	r2, #1
   12220:	bl	12f6c <__assert_fail@plt+0x1b38>
   12224:	cmp	r0, #0
   12228:	beq	12250 <__assert_fail@plt+0xe1c>
   1222c:	ldrb	r3, [r6, #129]	; 0x81
   12230:	cmp	r3, #0
   12234:	bne	1227c <__assert_fail@plt+0xe48>
   12238:	ldrb	r3, [r5, #56]	; 0x38
   1223c:	cmp	r3, #0
   12240:	beq	12214 <__assert_fail@plt+0xde0>
   12244:	ldrb	r3, [r5, #129]	; 0x81
   12248:	cmp	r3, #0
   1224c:	bne	12214 <__assert_fail@plt+0xde0>
   12250:	ldr	r3, [pc, #764]	; 12554 <__assert_fail@plt+0x1120>
   12254:	add	r3, pc, r3
   12258:	ldrb	r3, [r3, #130]	; 0x82
   1225c:	cmp	r3, #0
   12260:	bne	1203c <__assert_fail@plt+0xc08>
   12264:	cmp	fp, #0
   12268:	beq	120cc <__assert_fail@plt+0xc98>
   1226c:	ldr	r3, [sp, #96]	; 0x60
   12270:	cmp	r3, #0
   12274:	bne	12060 <__assert_fail@plt+0xc2c>
   12278:	b	120cc <__assert_fail@plt+0xc98>
   1227c:	ldr	r0, [sp, #56]	; 0x38
   12280:	mov	r1, r9
   12284:	bl	13a2c <__assert_fail@plt+0x25f8>
   12288:	b	12238 <__assert_fail@plt+0xe04>
   1228c:	ldrb	r2, [r2, #57]	; 0x39
   12290:	cmp	r2, #0
   12294:	beq	1201c <__assert_fail@plt+0xbe8>
   12298:	ldr	r2, [pc, #696]	; 12558 <__assert_fail@plt+0x1124>
   1229c:	add	r2, pc, r2
   122a0:	ldrb	r1, [r2, #129]	; 0x81
   122a4:	cmp	r1, #0
   122a8:	beq	122b4 <__assert_fail@plt+0xe80>
   122ac:	cmp	r3, #0
   122b0:	bne	12388 <__assert_fail@plt+0xf54>
   122b4:	ldrb	r3, [r2, #130]	; 0x82
   122b8:	cmp	r3, #0
   122bc:	bne	1203c <__assert_fail@plt+0xc08>
   122c0:	b	120cc <__assert_fail@plt+0xc98>
   122c4:	ldr	r4, [pc, #656]	; 1255c <__assert_fail@plt+0x1128>
   122c8:	mov	r1, #1
   122cc:	add	r4, pc, r4
   122d0:	add	r0, r4, #4
   122d4:	bl	12780 <__assert_fail@plt+0x134c>
   122d8:	add	r0, r4, #8
   122dc:	mov	r1, #1
   122e0:	bl	12780 <__assert_fail@plt+0x134c>
   122e4:	b	11b28 <__assert_fail@plt+0x6f4>
   122e8:	ldr	r4, [pc, #624]	; 12560 <__assert_fail@plt+0x112c>
   122ec:	mov	r1, #0
   122f0:	add	r4, pc, r4
   122f4:	add	r0, r4, #4
   122f8:	bl	12780 <__assert_fail@plt+0x134c>
   122fc:	add	r0, r4, #8
   12300:	mov	r1, #0
   12304:	bl	12780 <__assert_fail@plt+0x134c>
   12308:	b	11b1c <__assert_fail@plt+0x6e8>
   1230c:	bl	1132c <__errno_location@plt>
   12310:	ldr	r3, [pc, #588]	; 12564 <__assert_fail@plt+0x1130>
   12314:	add	r3, pc, r3
   12318:	ldr	r3, [r3, #64]	; 0x40
   1231c:	mov	r2, r0
   12320:	mov	r0, #1
   12324:	ldr	r1, [r2]
   12328:	ldr	r2, [pc, #568]	; 12568 <__assert_fail@plt+0x1134>
   1232c:	add	r2, pc, r2
   12330:	bl	11260 <error@plt>
   12334:	b	1213c <__assert_fail@plt+0xd08>
   12338:	cmp	r1, #0
   1233c:	beq	11ce0 <__assert_fail@plt+0x8ac>
   12340:	add	r0, r2, #88	; 0x58
   12344:	ldr	r3, [sp, #104]	; 0x68
   12348:	ldr	r1, [r3]
   1234c:	b	11cac <__assert_fail@plt+0x878>
   12350:	bl	112e4 <exit@plt>
   12354:	mov	r0, r7
   12358:	mov	r1, sl
   1235c:	mov	r2, #2
   12360:	mov	r3, #0
   12364:	str	r3, [sp, #96]	; 0x60
   12368:	bl	13750 <__assert_fail@plt+0x231c>
   1236c:	b	11cdc <__assert_fail@plt+0x8a8>
   12370:	mov	r0, r8
   12374:	add	r1, sp, #84	; 0x54
   12378:	mov	r2, #1
   1237c:	str	ip, [sp, #84]	; 0x54
   12380:	bl	13750 <__assert_fail@plt+0x231c>
   12384:	b	11cd0 <__assert_fail@plt+0x89c>
   12388:	mov	fp, #0
   1238c:	ldr	r3, [sp, #92]	; 0x5c
   12390:	ldr	r1, [pc, #468]	; 1256c <__assert_fail@plt+0x1138>
   12394:	add	r1, pc, r1
   12398:	ldr	r0, [r3]
   1239c:	add	r1, r1, #88	; 0x58
   123a0:	bl	13a2c <__assert_fail@plt+0x25f8>
   123a4:	b	121e4 <__assert_fail@plt+0xdb0>
   123a8:	bl	1132c <__errno_location@plt>
   123ac:	ldr	r3, [pc, #444]	; 12570 <__assert_fail@plt+0x113c>
   123b0:	add	r3, pc, r3
   123b4:	ldr	r3, [r3, #60]	; 0x3c
   123b8:	mov	r2, r0
   123bc:	mov	r0, #1
   123c0:	ldr	r1, [r2]
   123c4:	ldr	r2, [pc, #424]	; 12574 <__assert_fail@plt+0x1140>
   123c8:	add	r2, pc, r2
   123cc:	bl	11260 <error@plt>
   123d0:	b	11b88 <__assert_fail@plt+0x754>
   123d4:	bl	1132c <__errno_location@plt>
   123d8:	ldr	r1, [pc, #408]	; 12578 <__assert_fail@plt+0x1144>
   123dc:	mov	r2, #5
   123e0:	add	r1, pc, r1
   123e4:	ldr	r4, [r0]
   123e8:	mov	r0, #0
   123ec:	bl	111dc <dcgettext@plt>
   123f0:	mov	r1, r4
   123f4:	mov	r2, r0
   123f8:	mov	r0, #1
   123fc:	bl	11260 <error@plt>
   12400:	b	11bc0 <__assert_fail@plt+0x78c>
   12404:	bl	1132c <__errno_location@plt>
   12408:	ldr	r3, [pc, #364]	; 1257c <__assert_fail@plt+0x1148>
   1240c:	add	r3, pc, r3
   12410:	ldr	r3, [r3, #64]	; 0x40
   12414:	mov	r2, r0
   12418:	mov	r0, #1
   1241c:	ldr	r1, [r2]
   12420:	ldr	r2, [pc, #344]	; 12580 <__assert_fail@plt+0x114c>
   12424:	add	r2, pc, r2
   12428:	bl	11260 <error@plt>
   1242c:	b	11bb8 <__assert_fail@plt+0x784>
   12430:	andeq	r7, r1, r0, lsr #23
   12434:	andeq	r0, r0, r8, lsl r1
   12438:	andeq	r6, r0, r0, asr #25
   1243c:	andeq	r6, r0, r8, asr sp
   12440:	andeq	r7, r1, r4, lsl #26
   12444:	muleq	r1, ip, ip
   12448:	andeq	r6, r0, r8, asr sp
   1244c:	andeq	r7, r1, r8, ror ip
   12450:	andeq	r0, r0, r8, lsr #2
   12454:	andeq	r7, r1, r8, ror #24
   12458:	andeq	r1, r0, r8, lsl #6
   1245c:	andeq	r6, r0, r0, asr #26
   12460:	andeq	r7, r1, ip, lsl r9
   12464:	andeq	r7, r1, r8, lsl ip
   12468:	andeq	r0, r0, r8, lsr r1
   1246c:	andeq	r0, r0, r0, lsr #2
   12470:	muleq	r0, r0, ip
   12474:	andeq	r6, r0, r8, ror ip
   12478:	andeq	r6, r0, r4, lsr fp
   1247c:	andeq	r0, r0, r0, asr r1
   12480:	andeq	r7, r1, r0, lsr fp
   12484:	andeq	r6, r0, r0, asr fp
   12488:	andeq	r6, r0, ip, ror r0
   1248c:	andeq	r7, r1, r0, lsr #21
   12490:	andeq	r7, r1, r8, lsl #21
   12494:	andeq	r7, r1, r8, asr sl
   12498:	ldrdeq	r7, [r1], -r4
   1249c:			; <UNDEFINED> instruction: 0x000179b0
   124a0:	andeq	r7, r1, r8, ror #18
   124a4:	strdeq	r7, [r1], -r0
   124a8:	andeq	r6, r0, r8, lsr #19
   124ac:	strdeq	r7, [r1], -r0
   124b0:			; <UNDEFINED> instruction: 0x000178bc
   124b4:	andeq	r7, r1, r8, lsr #17
   124b8:	andeq	r0, r0, ip, lsl r1
   124bc:	muleq	r0, r8, r8
   124c0:	andeq	r6, r0, ip, lsr r8
   124c4:			; <UNDEFINED> instruction: 0x000177b0
   124c8:	strdeq	r6, [r0], -r8
   124cc:	andeq	r6, r0, r8, asr #15
   124d0:	andeq	r6, r0, r8, lsl #12
   124d4:	andeq	r7, r1, r4, lsr #12
   124d8:	andeq	r7, r1, ip, lsl #12
   124dc:	andeq	r7, r1, r4, asr r6
   124e0:	muleq	r0, r0, r7
   124e4:	andeq	r7, r1, r4, lsr #12
   124e8:	andeq	r6, r0, r0, ror #14
   124ec:	andeq	r7, r1, ip, lsl #11
   124f0:	andeq	r7, r1, r8, ror #10
   124f4:	andeq	r7, r1, r8, asr #10
   124f8:	andeq	r7, r1, r4, lsr r5
   124fc:	strdeq	r7, [r1], -r0
   12500:	andeq	r7, r1, r8, asr #9
   12504:	andeq	r7, r1, ip, asr r4
   12508:			; <UNDEFINED> instruction: 0x000174b4
   1250c:	andeq	r7, r1, r8, asr #8
   12510:	andeq	r7, r1, r8, asr r4
   12514:	andeq	r7, r1, ip, asr #7
   12518:	andeq	r7, r1, r4, ror #5
   1251c:	andeq	r7, r1, r8, asr #5
   12520:			; <UNDEFINED> instruction: 0x000171b0
   12524:	andeq	r7, r1, ip, lsl #3
   12528:	andeq	r7, r1, r0, ror #2
   1252c:	andeq	r7, r1, r0, asr #2
   12530:	andeq	r7, r1, ip, lsr #2
   12534:	andeq	r7, r1, r8, lsr #2
   12538:	andeq	r7, r1, r4, lsr #1
   1253c:	andeq	r6, r0, r4, lsr #4
   12540:	andeq	r7, r1, r0, ror r0
   12544:	andeq	r0, r0, r4, lsr r1
   12548:			; <UNDEFINED> instruction: 0x00016fbc
   1254c:	andeq	r6, r1, r8, lsr #31
   12550:	andeq	r6, r1, r4, lsr #31
   12554:	andeq	r6, r1, ip, asr pc
   12558:	andeq	r6, r1, r4, lsl pc
   1255c:	andeq	r6, r1, r4, lsl #29
   12560:	andeq	r6, r1, r0, ror #28
   12564:	muleq	r1, ip, lr
   12568:	andeq	r6, r0, ip, lsl r0
   1256c:	andeq	r6, r1, ip, lsl lr
   12570:	andeq	r6, r1, r0, lsl #28
   12574:	andeq	r5, r0, r0, lsl #31
   12578:	ldrdeq	r5, [r0], -ip
   1257c:	andeq	r6, r1, r4, lsr #27
   12580:	andeq	r5, r0, r4, lsr #30
   12584:	mov	fp, #0
   12588:	mov	lr, #0
   1258c:	pop	{r1}		; (ldr r1, [sp], #4)
   12590:	mov	r2, sp
   12594:	push	{r2}		; (str r2, [sp, #-4]!)
   12598:	push	{r0}		; (str r0, [sp, #-4]!)
   1259c:	ldr	ip, [pc, #16]	; 125b4 <__assert_fail@plt+0x1180>
   125a0:	push	{ip}		; (str ip, [sp, #-4]!)
   125a4:	ldr	r0, [pc, #12]	; 125b8 <__assert_fail@plt+0x1184>
   125a8:	ldr	r3, [pc, #12]	; 125bc <__assert_fail@plt+0x1188>
   125ac:	bl	1129c <__libc_start_main@plt>
   125b0:	bl	1141c <abort@plt>
   125b4:	andeq	r7, r1, r4, lsl #14
   125b8:	andeq	r1, r1, r0, asr #8
   125bc:	andeq	r7, r1, r0, lsr #13
   125c0:	ldr	r3, [pc, #20]	; 125dc <__assert_fail@plt+0x11a8>
   125c4:	ldr	r2, [pc, #20]	; 125e0 <__assert_fail@plt+0x11ac>
   125c8:	add	r3, pc, r3
   125cc:	ldr	r2, [r3, r2]
   125d0:	cmp	r2, #0
   125d4:	bxeq	lr
   125d8:	b	112c0 <__gmon_start__@plt>
   125dc:	andeq	r6, r1, r0, lsr sl
   125e0:	andeq	r0, r0, ip, lsr #2
   125e4:	push	{r3, lr}
   125e8:	movw	r0, #37296	; 0x91b0
   125ec:	ldr	r3, [pc, #36]	; 12618 <__assert_fail@plt+0x11e4>
   125f0:	movt	r0, #2
   125f4:	rsb	r3, r0, r3
   125f8:	cmp	r3, #6
   125fc:	popls	{r3, pc}
   12600:	movw	r3, #0
   12604:	movt	r3, #0
   12608:	cmp	r3, #0
   1260c:	popeq	{r3, pc}
   12610:	blx	r3
   12614:	pop	{r3, pc}
   12618:			; <UNDEFINED> instruction: 0x000291b3
   1261c:	push	{r3, lr}
   12620:	movw	r0, #37296	; 0x91b0
   12624:	movw	r3, #37296	; 0x91b0
   12628:	movt	r0, #2
   1262c:	movt	r3, #2
   12630:	rsb	r3, r0, r3
   12634:	asr	r3, r3, #2
   12638:	add	r3, r3, r3, lsr #31
   1263c:	asrs	r1, r3, #1
   12640:	popeq	{r3, pc}
   12644:	movw	r2, #0
   12648:	movt	r2, #0
   1264c:	cmp	r2, #0
   12650:	popeq	{r3, pc}
   12654:	blx	r2
   12658:	pop	{r3, pc}
   1265c:	push	{r4, lr}
   12660:	movw	r4, #37296	; 0x91b0
   12664:	movt	r4, #2
   12668:	ldrb	r3, [r4]
   1266c:	cmp	r3, #0
   12670:	popne	{r4, pc}
   12674:	bl	125e4 <__assert_fail@plt+0x11b0>
   12678:	mov	r3, #1
   1267c:	strb	r3, [r4]
   12680:	pop	{r4, pc}
   12684:	movw	r0, #36448	; 0x8e60
   12688:	movt	r0, #2
   1268c:	push	{r3, lr}
   12690:	ldr	r3, [r0]
   12694:	cmp	r3, #0
   12698:	beq	126b0 <__assert_fail@plt+0x127c>
   1269c:	movw	r3, #0
   126a0:	movt	r3, #0
   126a4:	cmp	r3, #0
   126a8:	beq	126b0 <__assert_fail@plt+0x127c>
   126ac:	blx	r3
   126b0:	pop	{r3, lr}
   126b4:	b	1261c <__assert_fail@plt+0x11e8>
   126b8:	ldr	ip, [pc, #176]	; 12770 <__assert_fail@plt+0x133c>
   126bc:	mov	r1, #0
   126c0:	push	{r4, r5, r6, lr}
   126c4:	add	ip, pc, ip
   126c8:	ldr	r4, [pc, #164]	; 12774 <__assert_fail@plt+0x1340>
   126cc:	sub	sp, sp, #16
   126d0:	ldr	lr, [pc, #160]	; 12778 <__assert_fail@plt+0x1344>
   126d4:	mov	r2, #10
   126d8:	add	r3, sp, #8
   126dc:	mov	r5, r0
   126e0:	ldr	r4, [ip, r4]
   126e4:	add	lr, pc, lr
   126e8:	str	lr, [sp]
   126ec:	ldr	ip, [r4]
   126f0:	str	ip, [sp, #12]
   126f4:	bl	16630 <close_stdout@@Base+0x25f4>
   126f8:	cmp	r0, #1
   126fc:	mvneq	r0, #1
   12700:	beq	12754 <__assert_fail@plt+0x1320>
   12704:	cmp	r0, #0
   12708:	bne	12718 <__assert_fail@plt+0x12e4>
   1270c:	ldr	r0, [sp, #8]
   12710:	cmp	r0, #0
   12714:	bne	12750 <__assert_fail@plt+0x131c>
   12718:	ldr	r1, [pc, #92]	; 1277c <__assert_fail@plt+0x1348>
   1271c:	mov	r2, #5
   12720:	mov	r0, #0
   12724:	add	r1, pc, r1
   12728:	bl	111dc <dcgettext@plt>
   1272c:	mov	r6, r0
   12730:	mov	r0, r5
   12734:	bl	15c80 <close_stdout@@Base+0x1c44>
   12738:	mov	r2, r6
   1273c:	mov	r1, #0
   12740:	mov	r3, r0
   12744:	mov	r0, #1
   12748:	bl	11260 <error@plt>
   1274c:	ldr	r0, [sp, #8]
   12750:	sub	r0, r0, #1
   12754:	ldr	r2, [sp, #12]
   12758:	ldr	r3, [r4]
   1275c:	cmp	r2, r3
   12760:	bne	1276c <__assert_fail@plt+0x1338>
   12764:	add	sp, sp, #16
   12768:	pop	{r4, r5, r6, pc}
   1276c:	bl	111e8 <__stack_chk_fail@plt>
   12770:	andeq	r6, r1, r4, lsr r9
   12774:	andeq	r0, r0, r8, lsl r1
   12778:	andeq	r5, r0, ip, lsl #22
   1277c:	andeq	r5, r0, ip, lsr #32
   12780:	push	{r4, r5, r6, lr}
   12784:	mov	r6, r0
   12788:	ldr	r5, [r0]
   1278c:	sub	sp, sp, #8
   12790:	mov	r4, r1
   12794:	cmn	r5, #1
   12798:	beq	127d4 <__assert_fail@plt+0x13a0>
   1279c:	cmp	r5, r1
   127a0:	beq	127d4 <__assert_fail@plt+0x13a0>
   127a4:	ldr	r1, [pc, #52]	; 127e0 <__assert_fail@plt+0x13ac>
   127a8:	mov	r2, #5
   127ac:	mov	r0, #0
   127b0:	add	r1, pc, r1
   127b4:	bl	111dc <dcgettext@plt>
   127b8:	add	r1, r4, #1
   127bc:	add	r3, r5, #1
   127c0:	str	r1, [sp]
   127c4:	mov	r1, #0
   127c8:	mov	r2, r0
   127cc:	mov	r0, #1
   127d0:	bl	11260 <error@plt>
   127d4:	str	r4, [r6]
   127d8:	add	sp, sp, #8
   127dc:	pop	{r4, r5, r6, pc}
   127e0:			; <UNDEFINED> instruction: 0x00004fbc
   127e4:	push	{r3, r4, r5, lr}
   127e8:	subs	r4, r0, #0
   127ec:	popeq	{r3, r4, r5, pc}
   127f0:	ldr	r0, [r4, #28]
   127f4:	mov	r5, #0
   127f8:	bl	11188 <free@plt>
   127fc:	str	r5, [r4, #28]
   12800:	ldr	r0, [r4, #8]
   12804:	bl	11188 <free@plt>
   12808:	str	r5, [r4, #8]
   1280c:	pop	{r3, r4, r5, pc}
   12810:	ldr	r3, [pc, #68]	; 1285c <__assert_fail@plt+0x1428>
   12814:	push	{r4, lr}
   12818:	ldr	r4, [pc, r3]
   1281c:	cmp	r4, #0
   12820:	beq	12834 <__assert_fail@plt+0x1400>
   12824:	mov	r0, r4
   12828:	bl	127e4 <__assert_fail@plt+0x13b0>
   1282c:	mov	r0, r4
   12830:	bl	11188 <free@plt>
   12834:	ldr	r3, [pc, #36]	; 12860 <__assert_fail@plt+0x142c>
   12838:	add	r3, pc, r3
   1283c:	ldr	r4, [r3, #4]
   12840:	cmp	r4, #0
   12844:	popeq	{r4, pc}
   12848:	mov	r0, r4
   1284c:	bl	127e4 <__assert_fail@plt+0x13b0>
   12850:	mov	r0, r4
   12854:	pop	{r4, lr}
   12858:	b	11188 <free@plt>
   1285c:	muleq	r1, r8, r9
   12860:	andeq	r6, r1, r8, ror r9
   12864:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12868:	mov	r4, r0
   1286c:	ldr	r8, [pc, #500]	; 12a68 <__assert_fail@plt+0x1634>
   12870:	mov	r5, #0
   12874:	ldr	r7, [pc, #496]	; 12a6c <__assert_fail@plt+0x1638>
   12878:	ldr	r6, [pc, #496]	; 12a70 <__assert_fail@plt+0x163c>
   1287c:	add	r8, pc, r8
   12880:	add	r7, pc, r7
   12884:	add	r6, pc, r6
   12888:	ldrb	r1, [r4]
   1288c:	cmp	r1, #0
   12890:	beq	129f0 <__assert_fail@plt+0x15bc>
   12894:	cmp	r1, #44	; 0x2c
   12898:	beq	12990 <__assert_fail@plt+0x155c>
   1289c:	cmp	r1, #32
   128a0:	beq	12990 <__assert_fail@plt+0x155c>
   128a4:	cmp	r1, #9
   128a8:	beq	12990 <__assert_fail@plt+0x155c>
   128ac:	add	r2, r4, #1
   128b0:	b	128cc <__assert_fail@plt+0x1498>
   128b4:	cmp	r3, #44	; 0x2c
   128b8:	beq	12994 <__assert_fail@plt+0x1560>
   128bc:	cmp	r3, #32
   128c0:	beq	12994 <__assert_fail@plt+0x1560>
   128c4:	cmp	r3, #9
   128c8:	beq	12994 <__assert_fail@plt+0x1560>
   128cc:	mov	ip, r2
   128d0:	ldrb	r3, [r2], #1
   128d4:	cmp	r3, #0
   128d8:	bne	128b4 <__assert_fail@plt+0x1480>
   128dc:	cmp	r1, #48	; 0x30
   128e0:	mov	r9, r3
   128e4:	beq	129a8 <__assert_fail@plt+0x1574>
   128e8:	bcc	129f0 <__assert_fail@plt+0x15bc>
   128ec:	cmp	r1, #50	; 0x32
   128f0:	bhi	129f0 <__assert_fail@plt+0x15bc>
   128f4:	ldrb	r3, [r4, #1]
   128f8:	cmp	r3, #46	; 0x2e
   128fc:	beq	12934 <__assert_fail@plt+0x1500>
   12900:	mov	r1, r7
   12904:	mov	r2, #5
   12908:	mov	r0, #0
   1290c:	bl	111dc <dcgettext@plt>
   12910:	mov	sl, r0
   12914:	mov	r0, r4
   12918:	bl	15c80 <close_stdout@@Base+0x1c44>
   1291c:	mov	r1, #0
   12920:	mov	r2, sl
   12924:	mov	r3, r0
   12928:	mov	r0, #1
   1292c:	bl	11260 <error@plt>
   12930:	ldrb	r1, [r4]
   12934:	add	r0, r4, #2
   12938:	sub	sl, r1, #48	; 0x30
   1293c:	bl	126b8 <__assert_fail@plt+0x1284>
   12940:	cmp	sl, #2
   12944:	mov	r4, r0
   12948:	bhi	12a28 <__assert_fail@plt+0x15f4>
   1294c:	rsbs	r3, sl, #1
   12950:	movcc	r3, #0
   12954:	cmp	r0, #0
   12958:	moveq	r3, #0
   1295c:	cmp	r3, #0
   12960:	bne	12a48 <__assert_fail@plt+0x1614>
   12964:	mov	r0, #12
   12968:	bl	16238 <close_stdout@@Base+0x21fc>
   1296c:	ldr	r3, [r6]
   12970:	cmp	r9, #0
   12974:	str	sl, [r0]
   12978:	stmib	r0, {r4, r5}
   1297c:	str	r0, [r6]
   12980:	str	r0, [r3, #8]
   12984:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12988:	mov	r4, r9
   1298c:	b	12888 <__assert_fail@plt+0x1454>
   12990:	mov	ip, r4
   12994:	strb	r5, [ip]
   12998:	add	r9, ip, #1
   1299c:	ldrb	r1, [r4]
   129a0:	cmp	r1, #48	; 0x30
   129a4:	bne	128e8 <__assert_fail@plt+0x14b4>
   129a8:	ldrb	r3, [r4, #1]
   129ac:	cmp	r3, #0
   129b0:	beq	129e4 <__assert_fail@plt+0x15b0>
   129b4:	mov	r1, r8
   129b8:	mov	r2, #5
   129bc:	mov	r0, #0
   129c0:	bl	111dc <dcgettext@plt>
   129c4:	mov	sl, r0
   129c8:	mov	r0, r4
   129cc:	bl	15c80 <close_stdout@@Base+0x1c44>
   129d0:	mov	r2, sl
   129d4:	mov	r1, #0
   129d8:	mov	r3, r0
   129dc:	mov	r0, #1
   129e0:	bl	11260 <error@plt>
   129e4:	mov	sl, #0
   129e8:	mov	r4, sl
   129ec:	b	12964 <__assert_fail@plt+0x1530>
   129f0:	ldr	r1, [pc, #124]	; 12a74 <__assert_fail@plt+0x1640>
   129f4:	mov	r2, #5
   129f8:	mov	r0, #0
   129fc:	add	r1, pc, r1
   12a00:	bl	111dc <dcgettext@plt>
   12a04:	mov	r5, r0
   12a08:	mov	r0, r4
   12a0c:	bl	15c80 <close_stdout@@Base+0x1c44>
   12a10:	mov	r2, r5
   12a14:	mov	r1, #0
   12a18:	mov	r3, r0
   12a1c:	mov	r0, #1
   12a20:	bl	11260 <error@plt>
   12a24:	bl	1141c <abort@plt>
   12a28:	ldr	r0, [pc, #72]	; 12a78 <__assert_fail@plt+0x1644>
   12a2c:	movw	r2, #1063	; 0x427
   12a30:	ldr	r1, [pc, #68]	; 12a7c <__assert_fail@plt+0x1648>
   12a34:	ldr	r3, [pc, #68]	; 12a80 <__assert_fail@plt+0x164c>
   12a38:	add	r0, pc, r0
   12a3c:	add	r1, pc, r1
   12a40:	add	r3, pc, r3
   12a44:	bl	11434 <__assert_fail@plt>
   12a48:	ldr	r0, [pc, #52]	; 12a84 <__assert_fail@plt+0x1650>
   12a4c:	movw	r2, #1064	; 0x428
   12a50:	ldr	r1, [pc, #48]	; 12a88 <__assert_fail@plt+0x1654>
   12a54:	ldr	r3, [pc, #48]	; 12a8c <__assert_fail@plt+0x1658>
   12a58:	add	r0, pc, r0
   12a5c:	add	r1, pc, r1
   12a60:	add	r3, pc, r3
   12a64:	bl	11434 <__assert_fail@plt>
   12a68:	andeq	r4, r0, r4, lsl pc
   12a6c:	andeq	r4, r0, r0, lsl pc
   12a70:	ldrdeq	r6, [r1], -r8
   12a74:			; <UNDEFINED> instruction: 0x00004db0
   12a78:	muleq	r0, ip, sp
   12a7c:			; <UNDEFINED> instruction: 0x00004dbc
   12a80:	strdeq	r4, [r0], -ip
   12a84:	andeq	r4, r0, ip, lsr #27
   12a88:	muleq	r0, ip, sp
   12a8c:	ldrdeq	r4, [r0], -ip
   12a90:	push	{r4, r5, r6, lr}
   12a94:	mov	r4, r0
   12a98:	ldr	r3, [r4, #24]
   12a9c:	mov	r5, r1
   12aa0:	ldr	r0, [r0, #20]
   12aa4:	mov	r6, r2
   12aa8:	cmp	r0, r3
   12aac:	bcc	12b10 <__assert_fail@plt+0x16dc>
   12ab0:	ldr	r0, [r4, #28]
   12ab4:	cmp	r0, #0
   12ab8:	beq	12b1c <__assert_fail@plt+0x16e8>
   12abc:	movw	r2, #21844	; 0x5554
   12ac0:	movt	r2, #5461	; 0x1555
   12ac4:	cmp	r3, r2
   12ac8:	addls	r2, r3, #1
   12acc:	addls	r3, r3, r2, lsr #1
   12ad0:	bhi	12b30 <__assert_fail@plt+0x16fc>
   12ad4:	lsl	r1, r3, #3
   12ad8:	str	r3, [r4, #24]
   12adc:	bl	16290 <close_stdout@@Base+0x2254>
   12ae0:	ldr	r2, [r4, #20]
   12ae4:	mov	r3, r0
   12ae8:	str	r0, [r4, #28]
   12aec:	str	r5, [r3, r2, lsl #3]
   12af0:	ldr	r2, [r4, #20]
   12af4:	ldr	r3, [r4, #28]
   12af8:	add	r3, r3, r2, lsl #3
   12afc:	str	r6, [r3, #4]
   12b00:	ldr	r3, [r4, #20]
   12b04:	add	r3, r3, #1
   12b08:	str	r3, [r4, #20]
   12b0c:	pop	{r4, r5, r6, pc}
   12b10:	mov	r2, r0
   12b14:	ldr	r3, [r4, #28]
   12b18:	b	12aec <__assert_fail@plt+0x16b8>
   12b1c:	cmp	r3, #0
   12b20:	moveq	r1, #64	; 0x40
   12b24:	moveq	r3, #8
   12b28:	beq	12ad8 <__assert_fail@plt+0x16a4>
   12b2c:	b	12ad4 <__assert_fail@plt+0x16a0>
   12b30:	bl	1644c <close_stdout@@Base+0x2410>
   12b34:	push	{r4, r5, r6, lr}
   12b38:	mov	r6, r0
   12b3c:	ldr	r3, [r0]
   12b40:	mov	r5, r1
   12b44:	cmp	r3, #0
   12b48:	movne	r4, #0
   12b4c:	beq	12b78 <__assert_fail@plt+0x1744>
   12b50:	ldr	r3, [r5]
   12b54:	ldr	r0, [r3, r4, lsl #2]
   12b58:	bl	127e4 <__assert_fail@plt+0x13b0>
   12b5c:	ldr	r3, [r5]
   12b60:	ldr	r0, [r3, r4, lsl #2]
   12b64:	add	r4, r4, #1
   12b68:	bl	11188 <free@plt>
   12b6c:	ldr	r3, [r6]
   12b70:	cmp	r4, r3
   12b74:	bcc	12b50 <__assert_fail@plt+0x171c>
   12b78:	ldr	r0, [r5]
   12b7c:	pop	{r4, r5, r6, lr}
   12b80:	b	11188 <free@plt>
   12b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b88:	sub	sp, sp, #100	; 0x64
   12b8c:	ldr	r5, [pc, #956]	; 12f50 <__assert_fail@plt+0x1b1c>
   12b90:	ldr	r6, [pc, #956]	; 12f54 <__assert_fail@plt+0x1b20>
   12b94:	add	r5, pc, r5
   12b98:	ldr	ip, [sp, #136]	; 0x88
   12b9c:	ldr	r4, [sp, #140]	; 0x8c
   12ba0:	ldr	r6, [r5, r6]
   12ba4:	cmp	ip, r0
   12ba8:	ldrcc	r1, [r1]
   12bac:	movcs	r1, #0
   12bb0:	ldr	r0, [r6]
   12bb4:	addcc	r5, r1, ip, lsl #3
   12bb8:	strcs	r1, [sp, #44]	; 0x2c
   12bbc:	str	r6, [sp, #4]
   12bc0:	str	r0, [sp, #92]	; 0x5c
   12bc4:	ldrcc	r0, [r1, ip, lsl #3]
   12bc8:	ldrcc	r1, [r5, #4]
   12bcc:	strcc	r0, [sp, #44]	; 0x2c
   12bd0:	cmp	r4, r2
   12bd4:	str	r1, [sp, #60]	; 0x3c
   12bd8:	bcs	12cac <__assert_fail@plt+0x1878>
   12bdc:	ldr	r3, [r3]
   12be0:	ldr	r5, [sp, #60]	; 0x3c
   12be4:	add	r2, r3, r4, lsl #3
   12be8:	ldr	r1, [r3, r4, lsl #3]
   12bec:	cmp	r5, #0
   12bf0:	ldr	r7, [r2, #4]
   12bf4:	str	r5, [sp, #12]
   12bf8:	str	r1, [sp, #48]	; 0x30
   12bfc:	str	r7, [sp, #64]	; 0x40
   12c00:	bne	12c28 <__assert_fail@plt+0x17f4>
   12c04:	subs	r0, r7, #0
   12c08:	mvnne	r0, #0
   12c0c:	ldr	ip, [sp, #4]
   12c10:	ldr	r2, [sp, #92]	; 0x5c
   12c14:	ldr	r3, [ip]
   12c18:	cmp	r2, r3
   12c1c:	bne	12f4c <__assert_fail@plt+0x1b18>
   12c20:	add	sp, sp, #100	; 0x64
   12c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c28:	cmp	r7, #0
   12c2c:	beq	12cc4 <__assert_fail@plt+0x1890>
   12c30:	ldr	r3, [pc, #800]	; 12f58 <__assert_fail@plt+0x1b24>
   12c34:	add	r3, pc, r3
   12c38:	ldrb	r3, [r3, #8]
   12c3c:	cmp	r3, #0
   12c40:	bne	12ccc <__assert_fail@plt+0x1898>
   12c44:	ldr	r5, [sp, #44]	; 0x2c
   12c48:	mov	r4, r1
   12c4c:	mov	r6, r3
   12c50:	ldr	r2, [pc, #772]	; 12f5c <__assert_fail@plt+0x1b28>
   12c54:	add	r2, pc, r2
   12c58:	ldrb	r2, [r2, #9]
   12c5c:	cmp	r2, #0
   12c60:	bne	12e18 <__assert_fail@plt+0x19e4>
   12c64:	ldr	r2, [sp, #12]
   12c68:	mov	r0, r5
   12c6c:	mov	r1, r4
   12c70:	cmp	r7, r2
   12c74:	movcc	r2, r7
   12c78:	bl	111d0 <memcmp@plt>
   12c7c:	cmp	r6, #0
   12c80:	mov	r8, r0
   12c84:	beq	12c98 <__assert_fail@plt+0x1864>
   12c88:	mov	r0, r5
   12c8c:	bl	11188 <free@plt>
   12c90:	mov	r0, r4
   12c94:	bl	11188 <free@plt>
   12c98:	cmp	r8, #0
   12c9c:	movne	r0, r8
   12ca0:	ldreq	r5, [sp, #12]
   12ca4:	rsbeq	r0, r7, r5
   12ca8:	b	12c0c <__assert_fail@plt+0x17d8>
   12cac:	ldr	r7, [sp, #60]	; 0x3c
   12cb0:	mov	r3, #0
   12cb4:	str	r3, [sp, #48]	; 0x30
   12cb8:	cmp	r7, r3
   12cbc:	str	r3, [sp, #64]	; 0x40
   12cc0:	beq	12c04 <__assert_fail@plt+0x17d0>
   12cc4:	mov	r0, #1
   12cc8:	b	12c0c <__assert_fail@plt+0x17d8>
   12ccc:	bl	11230 <__ctype_get_mb_cur_max@plt>
   12cd0:	cmp	r0, #1
   12cd4:	bls	12e54 <__assert_fail@plt+0x1a20>
   12cd8:	ldr	r8, [sp, #12]
   12cdc:	add	r5, sp, #52	; 0x34
   12ce0:	add	r4, sp, #68	; 0x44
   12ce4:	ldr	ip, [sp, #12]
   12ce8:	str	r5, [sp, #32]
   12cec:	add	r9, sp, #40	; 0x28
   12cf0:	add	r5, sp, #76	; 0x4c
   12cf4:	mov	r3, #0
   12cf8:	cmp	r7, ip
   12cfc:	movcc	ip, r7
   12d00:	str	r3, [sp, #68]	; 0x44
   12d04:	str	ip, [sp, #8]
   12d08:	add	ip, sp, #44	; 0x2c
   12d0c:	str	r3, [sp, #24]
   12d10:	str	ip, [sp, #28]
   12d14:	add	ip, sp, #84	; 0x54
   12d18:	str	r3, [r4, #4]
   12d1c:	str	ip, [sp, #16]
   12d20:	str	r7, [sp, #36]	; 0x24
   12d24:	add	r6, r8, #1
   12d28:	mov	fp, #0
   12d2c:	mov	r0, r6
   12d30:	bl	16238 <close_stdout@@Base+0x21fc>
   12d34:	ldr	lr, [sp, #32]
   12d38:	ldr	ip, [sp, #24]
   12d3c:	mov	r2, r6
   12d40:	mov	r1, fp
   12d44:	str	r0, [lr, ip]
   12d48:	str	r0, [sp, #20]
   12d4c:	bl	11344 <memset@plt>
   12d50:	ldr	lr, [sp, #28]
   12d54:	ldr	ip, [sp, #24]
   12d58:	ldr	r7, [lr, ip]
   12d5c:	b	12d80 <__assert_fail@plt+0x194c>
   12d60:	ldm	r5, {r0, r1}
   12d64:	mov	sl, #1
   12d68:	stm	r4, {r0, r1}
   12d6c:	ldr	lr, [sp, #8]
   12d70:	add	ip, sl, fp
   12d74:	cmp	ip, lr
   12d78:	bcs	12f04 <__assert_fail@plt+0x1ad0>
   12d7c:	mov	fp, ip
   12d80:	ldm	r4, {r0, r1}
   12d84:	add	r6, r7, fp
   12d88:	rsb	r2, fp, r8
   12d8c:	mov	r3, r4
   12d90:	stm	r5, {r0, r1}
   12d94:	mov	r1, r6
   12d98:	mov	r0, r9
   12d9c:	bl	11254 <mbrtowc@plt>
   12da0:	subs	sl, r0, #0
   12da4:	beq	12ee4 <__assert_fail@plt+0x1ab0>
   12da8:	cmn	sl, #2
   12dac:	bcs	12d60 <__assert_fail@plt+0x192c>
   12db0:	ldr	r2, [sp, #40]	; 0x28
   12db4:	mov	r0, r2
   12db8:	str	r2, [sp]
   12dbc:	bl	11404 <towupper@plt>
   12dc0:	ldr	r2, [sp]
   12dc4:	cmp	r2, r0
   12dc8:	beq	12eec <__assert_fail@plt+0x1ab8>
   12dcc:	ldr	ip, [sp, #20]
   12dd0:	mov	r1, r0
   12dd4:	add	r2, sp, #84	; 0x54
   12dd8:	mov	lr, #0
   12ddc:	add	r0, ip, fp
   12de0:	str	lr, [sp, #84]	; 0x54
   12de4:	str	lr, [sp, #88]	; 0x58
   12de8:	bl	11158 <wcrtomb@plt>
   12dec:	cmn	r0, #1
   12df0:	bne	12d6c <__assert_fail@plt+0x1938>
   12df4:	ldr	r3, [pc, #356]	; 12f60 <__assert_fail@plt+0x1b2c>
   12df8:	movw	r2, #557	; 0x22d
   12dfc:	ldr	r0, [pc, #352]	; 12f64 <__assert_fail@plt+0x1b30>
   12e00:	ldr	r1, [pc, #352]	; 12f68 <__assert_fail@plt+0x1b34>
   12e04:	add	r3, pc, r3
   12e08:	add	r0, pc, r0
   12e0c:	add	r3, r3, #12
   12e10:	add	r1, pc, r1
   12e14:	bl	11434 <__assert_fail@plt>
   12e18:	mov	r3, r7
   12e1c:	ldr	r1, [sp, #12]
   12e20:	mov	r0, r5
   12e24:	mov	r2, r4
   12e28:	bl	1658c <close_stdout@@Base+0x2550>
   12e2c:	cmp	r6, #0
   12e30:	mov	r7, r0
   12e34:	moveq	r0, r0
   12e38:	beq	12c0c <__assert_fail@plt+0x17d8>
   12e3c:	mov	r0, r5
   12e40:	bl	11188 <free@plt>
   12e44:	mov	r0, r4
   12e48:	bl	11188 <free@plt>
   12e4c:	mov	r0, r7
   12e50:	b	12c0c <__assert_fail@plt+0x17d8>
   12e54:	add	r5, sp, #52	; 0x34
   12e58:	ldr	r6, [sp, #12]
   12e5c:	str	r5, [sp, #32]
   12e60:	add	ip, sp, #44	; 0x2c
   12e64:	ldr	r0, [sp, #12]
   12e68:	mov	r8, #0
   12e6c:	ldr	r9, [sp, #32]
   12e70:	cmp	r7, r6
   12e74:	movcc	r6, r7
   12e78:	mov	r4, r8
   12e7c:	mov	r5, ip
   12e80:	str	ip, [sp, #28]
   12e84:	add	r0, r0, #1
   12e88:	bl	16238 <close_stdout@@Base+0x21fc>
   12e8c:	str	r0, [r9, r8]
   12e90:	mov	sl, r0
   12e94:	bl	112b4 <__ctype_toupper_loc@plt>
   12e98:	ldr	lr, [r5, r8]
   12e9c:	mov	r3, #0
   12ea0:	mov	r2, r3
   12ea4:	ldrb	ip, [lr, r2]
   12ea8:	add	r3, r3, #1
   12eac:	ldr	r1, [r0]
   12eb0:	cmp	r3, r6
   12eb4:	ldr	r1, [r1, ip, lsl #2]
   12eb8:	strb	r1, [sl, r2]
   12ebc:	mov	r2, r3
   12ec0:	bne	12ea4 <__assert_fail@plt+0x1a70>
   12ec4:	add	r8, r8, #4
   12ec8:	strb	r4, [sl, r3]
   12ecc:	cmp	r8, #8
   12ed0:	bne	12f40 <__assert_fail@plt+0x1b0c>
   12ed4:	ldr	r5, [sp, #52]	; 0x34
   12ed8:	mov	r6, #1
   12edc:	ldr	r4, [sp, #56]	; 0x38
   12ee0:	b	12c50 <__assert_fail@plt+0x181c>
   12ee4:	mov	sl, #1
   12ee8:	b	12d6c <__assert_fail@plt+0x1938>
   12eec:	ldr	ip, [sp, #20]
   12ef0:	mov	r1, r6
   12ef4:	mov	r2, sl
   12ef8:	add	r0, ip, fp
   12efc:	bl	111a0 <memcpy@plt>
   12f00:	b	12d6c <__assert_fail@plt+0x1938>
   12f04:	ldr	r1, [sp, #24]
   12f08:	mov	r2, #0
   12f0c:	ldr	r3, [sp, #20]
   12f10:	add	r1, r1, #4
   12f14:	str	r1, [sp, #24]
   12f18:	cmp	r1, #8
   12f1c:	strb	r2, [r3, ip]
   12f20:	addne	r3, sp, #60	; 0x3c
   12f24:	ldrne	r8, [r1, r3]
   12f28:	bne	12d24 <__assert_fail@plt+0x18f0>
   12f2c:	ldr	r7, [sp, #36]	; 0x24
   12f30:	mov	r6, #1
   12f34:	ldr	r5, [sp, #52]	; 0x34
   12f38:	ldr	r4, [sp, #56]	; 0x38
   12f3c:	b	12c50 <__assert_fail@plt+0x181c>
   12f40:	add	r3, sp, #60	; 0x3c
   12f44:	ldr	r0, [r8, r3]
   12f48:	b	12e84 <__assert_fail@plt+0x1a50>
   12f4c:	bl	111e8 <__stack_chk_fail@plt>
   12f50:	andeq	r6, r1, r4, ror #8
   12f54:	andeq	r0, r0, r8, lsl r1
   12f58:	andeq	r6, r1, ip, ror r5
   12f5c:	andeq	r6, r1, ip, asr r5
   12f60:	andeq	r4, r0, r8, lsr r9
   12f64:	andeq	r4, r0, r4, lsl sl
   12f68:	andeq	r4, r0, r8, ror #19
   12f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	sub	sp, sp, #76	; 0x4c
   12f74:	sub	ip, r2, #1
   12f78:	ldr	r3, [pc, #1944]	; 13718 <__assert_fail@plt+0x22e4>
   12f7c:	str	ip, [sp, #32]
   12f80:	mov	r5, r1
   12f84:	ldr	lr, [sp, #32]
   12f88:	add	r3, pc, r3
   12f8c:	str	r2, [sp, #40]	; 0x28
   12f90:	mov	r4, r0
   12f94:	ldr	r2, [pc, #1920]	; 1371c <__assert_fail@plt+0x22e8>
   12f98:	lsl	lr, lr, #2
   12f9c:	ldr	ip, [pc, #1916]	; 13720 <__assert_fail@plt+0x22ec>
   12fa0:	add	r2, pc, r2
   12fa4:	ldr	sl, [r1]
   12fa8:	add	r1, r2, lr
   12fac:	str	lr, [sp, #28]
   12fb0:	ldr	ip, [r3, ip]
   12fb4:	ldr	r3, [r1, #12]
   12fb8:	cmp	r3, sl
   12fbc:	ldr	r1, [ip]
   12fc0:	str	ip, [sp, #36]	; 0x24
   12fc4:	ldreq	ip, [sp, #32]
   12fc8:	str	r1, [sp, #68]	; 0x44
   12fcc:	ldreq	sl, [r2, ip, lsl #2]
   12fd0:	streq	r3, [r2, ip, lsl #2]
   12fd4:	streq	sl, [r5]
   12fd8:	cmp	sl, #0
   12fdc:	beq	133c4 <__assert_fail@plt+0x1f90>
   12fe0:	mov	r3, #0
   12fe4:	str	r3, [sl, #20]
   12fe8:	ldr	r3, [pc, #1844]	; 13724 <__assert_fail@plt+0x22f0>
   12fec:	mov	r0, sl
   12ff0:	mov	r1, r4
   12ff4:	add	r3, pc, r3
   12ff8:	ldrb	r2, [r3]
   12ffc:	bl	14338 <close_stdout@@Base+0x2fc>
   13000:	subs	r5, r0, #0
   13004:	beq	132e8 <__assert_fail@plt+0x1eb4>
   13008:	ldr	ip, [sp, #32]
   1300c:	ldr	r5, [pc, #1812]	; 13728 <__assert_fail@plt+0x22f4>
   13010:	lsl	ip, ip, #3
   13014:	add	r5, pc, r5
   13018:	add	r1, r5, ip
   1301c:	str	ip, [sp, #44]	; 0x2c
   13020:	ldrd	r2, [r1, #24]
   13024:	adds	r2, r2, #1
   13028:	adc	r3, r3, #0
   1302c:	strd	r2, [r1, #24]
   13030:	bl	11230 <__ctype_get_mb_cur_max@plt>
   13034:	cmp	r0, #1
   13038:	bls	13340 <__assert_fail@plt+0x1f0c>
   1303c:	ldr	r6, [sl, #4]
   13040:	add	r4, sp, #52	; 0x34
   13044:	ldr	r7, [sl, #8]
   13048:	mov	r3, #0
   1304c:	sub	r6, r6, #1
   13050:	str	r3, [r4, #4]
   13054:	add	r6, r7, r6
   13058:	str	r3, [sp, #48]	; 0x30
   1305c:	cmp	r7, r6
   13060:	str	r3, [sp, #52]	; 0x34
   13064:	bcs	1316c <__assert_fail@plt+0x1d38>
   13068:	ldr	r3, [r5, #40]	; 0x28
   1306c:	cmp	r3, #0
   13070:	beq	133ec <__assert_fail@plt+0x1fb8>
   13074:	add	r8, sp, #48	; 0x30
   13078:	ldr	r9, [r5, #44]	; 0x2c
   1307c:	ldr	ip, [pc, #1704]	; 1372c <__assert_fail@plt+0x22f8>
   13080:	add	r5, sp, #60	; 0x3c
   13084:	mov	fp, r7
   13088:	str	sl, [sp, #24]
   1308c:	add	ip, pc, ip
   13090:	mov	sl, r6
   13094:	str	ip, [sp, #20]
   13098:	mov	r6, r7
   1309c:	mov	r7, r8
   130a0:	mov	r8, r5
   130a4:	mov	r5, r4
   130a8:	b	130b8 <__assert_fail@plt+0x1c84>
   130ac:	add	fp, fp, r4
   130b0:	cmp	sl, fp
   130b4:	bls	13148 <__assert_fail@plt+0x1d14>
   130b8:	ldm	r5, {r0, r1}
   130bc:	rsb	r2, fp, sl
   130c0:	mov	r3, r5
   130c4:	add	r2, r2, #1
   130c8:	stm	r8, {r0, r1}
   130cc:	mov	r0, r7
   130d0:	mov	r1, fp
   130d4:	bl	11254 <mbrtowc@plt>
   130d8:	add	r3, r0, #2
   130dc:	mov	r4, r0
   130e0:	cmp	r3, #1
   130e4:	bls	132d8 <__assert_fail@plt+0x1ea4>
   130e8:	cmp	r0, #0
   130ec:	moveq	r4, #1
   130f0:	cmp	r4, r9
   130f4:	bne	130ac <__assert_fail@plt+0x1c78>
   130f8:	ldr	ip, [sp, #20]
   130fc:	mov	r0, fp
   13100:	mov	r2, r4
   13104:	ldr	r1, [ip, #40]	; 0x28
   13108:	bl	111d0 <memcmp@plt>
   1310c:	cmp	r0, #0
   13110:	bne	130ac <__assert_fail@plt+0x1c78>
   13114:	cmp	sl, fp
   13118:	bls	13148 <__assert_fail@plt+0x1d14>
   1311c:	rsb	r2, r6, fp
   13120:	mov	r1, r6
   13124:	add	fp, fp, r4
   13128:	ldr	r0, [sp, #24]
   1312c:	bl	12a90 <__assert_fail@plt+0x165c>
   13130:	cmp	sl, fp
   13134:	bls	133ac <__assert_fail@plt+0x1f78>
   13138:	ldr	ip, [sp, #20]
   1313c:	mov	r6, fp
   13140:	ldr	r9, [ip, #44]	; 0x2c
   13144:	b	130b8 <__assert_fail@plt+0x1c84>
   13148:	mov	r7, r6
   1314c:	mov	r6, sl
   13150:	ldr	sl, [sp, #24]
   13154:	rsb	r6, r7, r6
   13158:	str	r6, [sp, #20]
   1315c:	mov	r1, r7
   13160:	ldr	r2, [sp, #20]
   13164:	mov	r0, sl
   13168:	bl	12a90 <__assert_fail@plt+0x165c>
   1316c:	ldr	r3, [pc, #1468]	; 13730 <__assert_fail@plt+0x22fc>
   13170:	ldr	ip, [sp, #28]
   13174:	add	r3, pc, r3
   13178:	add	r2, r3, ip
   1317c:	ldr	r1, [r2, #12]
   13180:	cmp	r1, #0
   13184:	beq	132a4 <__assert_fail@plt+0x1e70>
   13188:	ldr	r2, [r3, #48]	; 0x30
   1318c:	cmp	r2, #2
   13190:	beq	132a4 <__assert_fail@plt+0x1e70>
   13194:	cmp	r2, #1
   13198:	beq	131a8 <__assert_fail@plt+0x1d74>
   1319c:	ldrb	r3, [r3, #52]	; 0x34
   131a0:	cmp	r3, #0
   131a4:	beq	132a4 <__assert_fail@plt+0x1e70>
   131a8:	ldr	r3, [pc, #1412]	; 13734 <__assert_fail@plt+0x2300>
   131ac:	ldr	ip, [sp, #32]
   131b0:	add	r3, pc, r3
   131b4:	add	r3, r3, ip
   131b8:	ldrb	r3, [r3, #56]	; 0x38
   131bc:	cmp	r3, #0
   131c0:	bne	132a4 <__assert_fail@plt+0x1e70>
   131c4:	ldr	ip, [sp, #40]	; 0x28
   131c8:	cmp	ip, #1
   131cc:	beq	133dc <__assert_fail@plt+0x1fa8>
   131d0:	ldr	r3, [pc, #1376]	; 13738 <__assert_fail@plt+0x2304>
   131d4:	add	r3, pc, r3
   131d8:	ldr	ip, [r3, #8]
   131dc:	ldr	r0, [r1, #20]
   131e0:	add	r3, sl, #28
   131e4:	ldr	r2, [sl, #20]
   131e8:	add	r1, r1, #28
   131ec:	str	ip, [sp]
   131f0:	str	ip, [sp, #4]
   131f4:	bl	12b84 <__assert_fail@plt+0x1750>
   131f8:	cmp	r0, #0
   131fc:	ble	132a4 <__assert_fail@plt+0x1e70>
   13200:	ldr	r3, [sl, #4]
   13204:	cmp	r3, #0
   13208:	moveq	r7, r3
   1320c:	beq	13230 <__assert_fail@plt+0x1dfc>
   13210:	ldr	r1, [sl, #8]
   13214:	sub	r2, r3, #1
   13218:	ldrb	r1, [r1, r2]
   1321c:	cmp	r1, #10
   13220:	moveq	r3, r2
   13224:	cmp	r3, #0
   13228:	movge	r7, r3
   1322c:	mvnlt	r7, #-2147483648	; 0x80000000
   13230:	ldr	r6, [pc, #1284]	; 1373c <__assert_fail@plt+0x2308>
   13234:	mov	r2, #5
   13238:	ldr	r1, [pc, #1280]	; 13740 <__assert_fail@plt+0x230c>
   1323c:	mov	r0, #0
   13240:	add	r6, pc, r6
   13244:	add	r1, pc, r1
   13248:	ldr	r4, [r6, #48]	; 0x30
   1324c:	subs	r3, r4, #1
   13250:	rsbs	r4, r3, #0
   13254:	adcs	r4, r4, r3
   13258:	bl	111dc <dcgettext@plt>
   1325c:	ldr	ip, [sp, #44]	; 0x2c
   13260:	add	r1, r6, ip
   13264:	ldr	ip, [sp, #28]
   13268:	add	r3, r6, ip
   1326c:	ldr	r3, [r3, #60]	; 0x3c
   13270:	mov	r2, r0
   13274:	mov	r0, r4
   13278:	ldrd	r4, [r1, #24]
   1327c:	mov	r1, #0
   13280:	str	r7, [sp, #8]
   13284:	strd	r4, [sp]
   13288:	ldr	ip, [sl, #8]
   1328c:	str	ip, [sp, #12]
   13290:	bl	11260 <error@plt>
   13294:	ldr	ip, [sp, #32]
   13298:	mov	r3, #1
   1329c:	add	r6, r6, ip
   132a0:	strb	r3, [r6, #56]	; 0x38
   132a4:	ldr	r3, [pc, #1176]	; 13744 <__assert_fail@plt+0x2310>
   132a8:	mov	r0, #1
   132ac:	ldr	ip, [sp, #28]
   132b0:	add	r3, pc, r3
   132b4:	add	r3, r3, ip
   132b8:	str	sl, [r3, #12]
   132bc:	ldr	ip, [sp, #36]	; 0x24
   132c0:	ldr	r2, [sp, #68]	; 0x44
   132c4:	ldr	r3, [ip]
   132c8:	cmp	r2, r3
   132cc:	bne	1370c <__assert_fail@plt+0x22d8>
   132d0:	add	sp, sp, #76	; 0x4c
   132d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d8:	ldm	r8, {r0, r1}
   132dc:	mov	r4, #1
   132e0:	stm	r5, {r0, r1}
   132e4:	b	130f0 <__assert_fail@plt+0x1cbc>
   132e8:	ldr	r3, [r4]
   132ec:	tst	r3, #32
   132f0:	bne	13304 <__assert_fail@plt+0x1ed0>
   132f4:	mov	r0, sl
   132f8:	bl	127e4 <__assert_fail@plt+0x13b0>
   132fc:	mov	r0, #0
   13300:	b	132bc <__assert_fail@plt+0x1e88>
   13304:	bl	1132c <__errno_location@plt>
   13308:	ldr	r1, [pc, #1080]	; 13748 <__assert_fail@plt+0x2314>
   1330c:	mov	r2, #5
   13310:	add	r1, pc, r1
   13314:	ldr	r4, [r0]
   13318:	mov	r0, r5
   1331c:	bl	111dc <dcgettext@plt>
   13320:	mov	r1, r4
   13324:	mov	r2, r0
   13328:	mov	r0, #1
   1332c:	bl	11260 <error@plt>
   13330:	mov	r0, sl
   13334:	bl	127e4 <__assert_fail@plt+0x13b0>
   13338:	mov	r0, #0
   1333c:	b	132bc <__assert_fail@plt+0x1e88>
   13340:	ldmib	sl, {r4, r6}
   13344:	sub	r4, r4, #1
   13348:	add	r4, r6, r4
   1334c:	cmp	r6, r4
   13350:	beq	1316c <__assert_fail@plt+0x1d38>
   13354:	ldr	r3, [r5, #40]	; 0x28
   13358:	cmp	r3, #0
   1335c:	ldrbne	r5, [r3]
   13360:	bne	1337c <__assert_fail@plt+0x1f48>
   13364:	b	135f8 <__assert_fail@plt+0x21c4>
   13368:	mov	r1, r6
   1336c:	rsb	r2, r6, r3
   13370:	mov	r0, sl
   13374:	add	r6, r3, #1
   13378:	bl	12a90 <__assert_fail@plt+0x165c>
   1337c:	rsb	r7, r6, r4
   13380:	mov	r0, r6
   13384:	mov	r1, r5
   13388:	mov	r2, r7
   1338c:	bl	11380 <memchr@plt>
   13390:	subs	r3, r0, #0
   13394:	bne	13368 <__assert_fail@plt+0x1f34>
   13398:	mov	r1, r6
   1339c:	mov	r2, r7
   133a0:	mov	r0, sl
   133a4:	bl	12a90 <__assert_fail@plt+0x165c>
   133a8:	b	1316c <__assert_fail@plt+0x1d38>
   133ac:	mov	r6, sl
   133b0:	mov	r7, fp
   133b4:	rsb	r6, fp, r6
   133b8:	ldr	sl, [sp, #24]
   133bc:	str	r6, [sp, #20]
   133c0:	b	1315c <__assert_fail@plt+0x1d28>
   133c4:	mov	r0, #1
   133c8:	mov	r1, #32
   133cc:	bl	163f8 <close_stdout@@Base+0x23bc>
   133d0:	mov	sl, r0
   133d4:	str	r0, [r5]
   133d8:	b	12fe8 <__assert_fail@plt+0x1bb4>
   133dc:	ldr	r3, [pc, #872]	; 1374c <__assert_fail@plt+0x2318>
   133e0:	add	r3, pc, r3
   133e4:	ldr	ip, [r3, #4]
   133e8:	b	131dc <__assert_fail@plt+0x1da8>
   133ec:	add	r5, sp, #60	; 0x3c
   133f0:	add	r8, sp, #48	; 0x30
   133f4:	b	1341c <__assert_fail@plt+0x1fe8>
   133f8:	cmp	fp, #0
   133fc:	ldr	r0, [sp, #48]	; 0x30
   13400:	moveq	fp, #1
   13404:	bl	111ac <iswblank@plt>
   13408:	cmp	r0, #0
   1340c:	beq	136fc <__assert_fail@plt+0x22c8>
   13410:	add	r7, r7, fp
   13414:	cmp	r6, r7
   13418:	bls	136f0 <__assert_fail@plt+0x22bc>
   1341c:	ldm	r4, {r0, r1}
   13420:	rsb	r9, r7, r6
   13424:	mov	r3, r4
   13428:	add	r2, r9, #1
   1342c:	stm	r5, {r0, r1}
   13430:	mov	r0, r8
   13434:	mov	r1, r7
   13438:	bl	11254 <mbrtowc@plt>
   1343c:	add	r3, r0, #2
   13440:	mov	fp, r0
   13444:	cmp	r3, #1
   13448:	bhi	133f8 <__assert_fail@plt+0x1fc4>
   1344c:	ldm	r5, {r0, r1}
   13450:	str	sl, [sp, #24]
   13454:	stm	r4, {r0, r1}
   13458:	ldm	r4, {r0, r1}
   1345c:	mov	r3, r4
   13460:	add	r2, r9, #1
   13464:	str	r9, [sp, #20]
   13468:	stm	r5, {r0, r1}
   1346c:	mov	r0, r8
   13470:	mov	r1, r7
   13474:	bl	11254 <mbrtowc@plt>
   13478:	add	r3, r0, #2
   1347c:	cmp	r3, #1
   13480:	bls	136cc <__assert_fail@plt+0x2298>
   13484:	cmp	r0, #0
   13488:	moveq	r0, #1
   1348c:	add	sl, r7, r0
   13490:	cmp	r6, sl
   13494:	bhi	134c0 <__assert_fail@plt+0x208c>
   13498:	b	135c4 <__assert_fail@plt+0x2190>
   1349c:	cmp	fp, #0
   134a0:	ldr	r0, [sp, #48]	; 0x30
   134a4:	moveq	fp, #1
   134a8:	bl	111ac <iswblank@plt>
   134ac:	cmp	r0, #0
   134b0:	bne	134fc <__assert_fail@plt+0x20c8>
   134b4:	add	sl, sl, fp
   134b8:	cmp	r6, sl
   134bc:	bls	135c4 <__assert_fail@plt+0x2190>
   134c0:	ldm	r4, {r0, r1}
   134c4:	rsb	r9, sl, r6
   134c8:	add	r9, r9, #1
   134cc:	mov	r3, r4
   134d0:	stm	r5, {r0, r1}
   134d4:	mov	r2, r9
   134d8:	mov	r0, r8
   134dc:	mov	r1, sl
   134e0:	bl	11254 <mbrtowc@plt>
   134e4:	add	r3, r0, #2
   134e8:	mov	fp, r0
   134ec:	cmp	r3, #1
   134f0:	bhi	1349c <__assert_fail@plt+0x2068>
   134f4:	ldm	r5, {r0, r1}
   134f8:	stm	r4, {r0, r1}
   134fc:	ldr	r0, [sp, #24]
   13500:	mov	r1, r7
   13504:	rsb	r2, r7, sl
   13508:	bl	12a90 <__assert_fail@plt+0x165c>
   1350c:	cmp	r6, sl
   13510:	bls	13710 <__assert_fail@plt+0x22dc>
   13514:	ldm	r4, {r0, r1}
   13518:	mov	r3, r4
   1351c:	mov	r2, r9
   13520:	stm	r5, {r0, r1}
   13524:	mov	r0, r8
   13528:	mov	r1, sl
   1352c:	bl	11254 <mbrtowc@plt>
   13530:	add	r3, r0, #2
   13534:	cmp	r3, #1
   13538:	bls	136cc <__assert_fail@plt+0x2298>
   1353c:	cmp	r0, #0
   13540:	moveq	r0, #1
   13544:	add	r7, sl, r0
   13548:	cmp	r6, r7
   1354c:	bhi	13578 <__assert_fail@plt+0x2144>
   13550:	b	135e0 <__assert_fail@plt+0x21ac>
   13554:	cmp	sl, #0
   13558:	ldr	r0, [sp, #48]	; 0x30
   1355c:	moveq	sl, #1
   13560:	bl	111ac <iswblank@plt>
   13564:	cmp	r0, #0
   13568:	beq	135f0 <__assert_fail@plt+0x21bc>
   1356c:	add	r7, r7, sl
   13570:	cmp	r6, r7
   13574:	bls	135e0 <__assert_fail@plt+0x21ac>
   13578:	ldm	r4, {r0, r1}
   1357c:	rsb	r9, r7, r6
   13580:	mov	r3, r4
   13584:	add	r2, r9, #1
   13588:	stm	r5, {r0, r1}
   1358c:	mov	r0, r8
   13590:	mov	r1, r7
   13594:	bl	11254 <mbrtowc@plt>
   13598:	add	r3, r0, #2
   1359c:	mov	sl, r0
   135a0:	cmp	r3, #1
   135a4:	bhi	13554 <__assert_fail@plt+0x2120>
   135a8:	ldm	r5, {r0, r1}
   135ac:	str	r9, [sp, #20]
   135b0:	stm	r4, {r0, r1}
   135b4:	cmp	r6, r7
   135b8:	bhi	13458 <__assert_fail@plt+0x2024>
   135bc:	ldr	sl, [sp, #24]
   135c0:	b	1315c <__assert_fail@plt+0x1d28>
   135c4:	mov	fp, sl
   135c8:	ldr	sl, [sp, #24]
   135cc:	mov	r1, r7
   135d0:	rsb	r2, r7, fp
   135d4:	mov	r0, sl
   135d8:	bl	12a90 <__assert_fail@plt+0x165c>
   135dc:	b	1316c <__assert_fail@plt+0x1d38>
   135e0:	rsb	r6, r7, r6
   135e4:	ldr	sl, [sp, #24]
   135e8:	str	r6, [sp, #20]
   135ec:	b	1315c <__assert_fail@plt+0x1d28>
   135f0:	str	r9, [sp, #20]
   135f4:	b	135b4 <__assert_fail@plt+0x2180>
   135f8:	bl	112d8 <__ctype_b_loc@plt>
   135fc:	mov	r3, r6
   13600:	mov	r5, r0
   13604:	ldr	r2, [r0]
   13608:	b	13614 <__assert_fail@plt+0x21e0>
   1360c:	cmp	r4, r3
   13610:	beq	1316c <__assert_fail@plt+0x1d38>
   13614:	mov	r6, r3
   13618:	ldrb	r1, [r3], #1
   1361c:	lsl	r1, r1, #1
   13620:	ldrh	r1, [r2, r1]
   13624:	tst	r1, #1
   13628:	bne	1360c <__assert_fail@plt+0x21d8>
   1362c:	add	r7, r6, #1
   13630:	cmp	r4, r7
   13634:	beq	136dc <__assert_fail@plt+0x22a8>
   13638:	ldrb	r3, [r6, #1]
   1363c:	lsl	r3, r3, #1
   13640:	ldrh	r3, [r2, r3]
   13644:	tst	r3, #1
   13648:	bne	13670 <__assert_fail@plt+0x223c>
   1364c:	add	r3, r6, #2
   13650:	cmp	r3, r4
   13654:	mov	r7, r3
   13658:	beq	136dc <__assert_fail@plt+0x22a8>
   1365c:	ldrb	r1, [r3], #1
   13660:	lsl	r1, r1, #1
   13664:	ldrh	r1, [r2, r1]
   13668:	tst	r1, #1
   1366c:	beq	13650 <__assert_fail@plt+0x221c>
   13670:	mov	r1, r6
   13674:	rsb	r2, r6, r7
   13678:	mov	r0, sl
   1367c:	add	r6, r7, #1
   13680:	bl	12a90 <__assert_fail@plt+0x165c>
   13684:	cmp	r4, r6
   13688:	beq	13704 <__assert_fail@plt+0x22d0>
   1368c:	ldrb	r3, [r7, #1]
   13690:	ldr	r2, [r5]
   13694:	lsl	r3, r3, #1
   13698:	ldrh	r3, [r2, r3]
   1369c:	tst	r3, #1
   136a0:	addne	r7, r7, #2
   136a4:	beq	1362c <__assert_fail@plt+0x21f8>
   136a8:	cmp	r7, r4
   136ac:	mov	r6, r7
   136b0:	beq	13704 <__assert_fail@plt+0x22d0>
   136b4:	ldrb	r3, [r7], #1
   136b8:	lsl	r3, r3, #1
   136bc:	ldrh	r3, [r2, r3]
   136c0:	tst	r3, #1
   136c4:	bne	136a8 <__assert_fail@plt+0x2274>
   136c8:	b	1362c <__assert_fail@plt+0x21f8>
   136cc:	ldm	r5, {r0, r1}
   136d0:	ldr	sl, [sp, #24]
   136d4:	stm	r4, {r0, r1}
   136d8:	b	1315c <__assert_fail@plt+0x1d28>
   136dc:	mov	r1, r6
   136e0:	mov	r0, sl
   136e4:	rsb	r2, r6, r7
   136e8:	bl	12a90 <__assert_fail@plt+0x165c>
   136ec:	b	1316c <__assert_fail@plt+0x1d38>
   136f0:	rsb	r9, r7, r6
   136f4:	str	sl, [sp, #24]
   136f8:	b	13458 <__assert_fail@plt+0x2024>
   136fc:	str	sl, [sp, #24]
   13700:	b	13458 <__assert_fail@plt+0x2024>
   13704:	rsb	r7, r6, r4
   13708:	b	13398 <__assert_fail@plt+0x1f64>
   1370c:	bl	111e8 <__stack_chk_fail@plt>
   13710:	ldr	sl, [sp, #24]
   13714:	b	1316c <__assert_fail@plt+0x1d38>
   13718:	andeq	r6, r1, r0, ror r0
   1371c:	andeq	r6, r1, r0, lsl r2
   13720:	andeq	r0, r0, r8, lsl r1
   13724:	andeq	r6, r1, ip, asr r1
   13728:	muleq	r1, ip, r1
   1372c:	andeq	r6, r1, r4, lsr #2
   13730:	andeq	r6, r1, ip, lsr r0
   13734:	andeq	r6, r1, r0
   13738:	andeq	r5, r1, ip, ror pc
   1373c:	andeq	r5, r1, r0, ror pc
   13740:	strdeq	r4, [r0], -r8
   13744:	andeq	r5, r1, r0, lsl #30
   13748:	andeq	r4, r0, r0, lsr #10
   1374c:	andeq	r5, r1, r0, ror sp
   13750:	push	{r4, r5, r6, lr}
   13754:	mov	r6, r2
   13758:	ldr	r3, [r1]
   1375c:	mov	r4, r1
   13760:	ldr	r2, [r1, #4]
   13764:	mov	r5, r0
   13768:	cmp	r3, r2
   1376c:	beq	13798 <__assert_fail@plt+0x2364>
   13770:	ldr	r1, [r1, #8]
   13774:	add	r1, r1, r3, lsl #2
   13778:	mov	r0, r5
   1377c:	mov	r2, r6
   13780:	bl	12f6c <__assert_fail@plt+0x1b38>
   13784:	cmp	r0, #0
   13788:	ldrne	r3, [r4]
   1378c:	addne	r3, r3, #1
   13790:	strne	r3, [r4]
   13794:	pop	{r4, r5, r6, pc}
   13798:	ldr	r0, [r1, #8]
   1379c:	cmp	r0, #0
   137a0:	beq	13814 <__assert_fail@plt+0x23e0>
   137a4:	movw	r2, #43689	; 0xaaa9
   137a8:	movt	r2, #10922	; 0x2aaa
   137ac:	cmp	r3, r2
   137b0:	addls	r2, r3, #1
   137b4:	addls	r3, r3, r2, lsr #1
   137b8:	bhi	13830 <__assert_fail@plt+0x23fc>
   137bc:	lsl	r1, r3, #2
   137c0:	str	r3, [r4, #4]
   137c4:	bl	16290 <close_stdout@@Base+0x2254>
   137c8:	ldr	r3, [r4]
   137cc:	ldr	r2, [r4, #4]
   137d0:	cmp	r3, r2
   137d4:	str	r0, [r4, #8]
   137d8:	bcs	13828 <__assert_fail@plt+0x23f4>
   137dc:	lsl	r1, r3, #2
   137e0:	mov	ip, r0
   137e4:	mov	lr, #0
   137e8:	b	137f0 <__assert_fail@plt+0x23bc>
   137ec:	ldr	ip, [r4, #8]
   137f0:	str	lr, [ip, r1]
   137f4:	add	r3, r3, #1
   137f8:	ldr	ip, [r4, #4]
   137fc:	add	r1, r1, #4
   13800:	cmp	ip, r3
   13804:	bhi	137ec <__assert_fail@plt+0x23b8>
   13808:	ldr	r1, [r4, #8]
   1380c:	ldr	r3, [r4]
   13810:	b	13774 <__assert_fail@plt+0x2340>
   13814:	cmp	r3, #0
   13818:	moveq	r1, #64	; 0x40
   1381c:	moveq	r3, #16
   13820:	beq	137c0 <__assert_fail@plt+0x238c>
   13824:	b	137bc <__assert_fail@plt+0x2388>
   13828:	mov	r1, r0
   1382c:	b	13774 <__assert_fail@plt+0x2340>
   13830:	bl	1644c <close_stdout@@Base+0x2410>
   13834:	cmp	r0, r1
   13838:	ldr	r3, [pc, #120]	; 138b8 <__assert_fail@plt+0x2484>
   1383c:	add	r3, pc, r3
   13840:	bcs	13870 <__assert_fail@plt+0x243c>
   13844:	ldr	r1, [r2]
   13848:	add	r2, r1, r0, lsl #3
   1384c:	ldr	r2, [r2, #4]
   13850:	cmp	r2, #0
   13854:	beq	13894 <__assert_fail@plt+0x2460>
   13858:	ldr	ip, [pc, #92]	; 138bc <__assert_fail@plt+0x2488>
   1385c:	ldr	r0, [r1, r0, lsl #3]
   13860:	mov	r1, #1
   13864:	ldr	r3, [r3, ip]
   13868:	ldr	r3, [r3]
   1386c:	b	111c4 <fwrite_unlocked@plt>
   13870:	ldr	r2, [pc, #72]	; 138c0 <__assert_fail@plt+0x248c>
   13874:	add	r2, pc, r2
   13878:	ldr	r0, [r2, #68]	; 0x44
   1387c:	cmp	r0, #0
   13880:	bxeq	lr
   13884:	ldr	r2, [pc, #48]	; 138bc <__assert_fail@plt+0x2488>
   13888:	ldr	r3, [r3, r2]
   1388c:	ldr	r1, [r3]
   13890:	b	11140 <fputs_unlocked@plt>
   13894:	ldr	r2, [pc, #40]	; 138c4 <__assert_fail@plt+0x2490>
   13898:	add	r2, pc, r2
   1389c:	ldr	r0, [r2, #68]	; 0x44
   138a0:	cmp	r0, #0
   138a4:	bxeq	lr
   138a8:	ldr	r2, [pc, #12]	; 138bc <__assert_fail@plt+0x2488>
   138ac:	ldr	r3, [r3, r2]
   138b0:	ldr	r1, [r3]
   138b4:	b	11140 <fputs_unlocked@plt>
   138b8:			; <UNDEFINED> instruction: 0x000157bc
   138bc:	andeq	r0, r0, r8, lsr r1
   138c0:	andeq	r5, r1, ip, lsr r9
   138c4:	andeq	r5, r1, r8, lsl r9
   138c8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138cc:	mov	r4, r2
   138d0:	ldr	r3, [pc, #320]	; 13a18 <__assert_fail@plt+0x25e4>
   138d4:	mov	r5, r0
   138d8:	ldr	sl, [pc, #316]	; 13a1c <__assert_fail@plt+0x25e8>
   138dc:	mov	r8, r1
   138e0:	add	r3, pc, r3
   138e4:	add	sl, pc, sl
   138e8:	ldrb	r3, [r3, #72]	; 0x48
   138ec:	cmp	r3, #0
   138f0:	ldreq	r4, [r0, #20]
   138f4:	cmp	r4, #0
   138f8:	cmpne	r1, #0
   138fc:	beq	13988 <__assert_fail@plt+0x2554>
   13900:	ldr	r3, [pc, #280]	; 13a20 <__assert_fail@plt+0x25ec>
   13904:	add	r9, r0, #28
   13908:	ldr	r7, [pc, #276]	; 13a24 <__assert_fail@plt+0x25f0>
   1390c:	mov	fp, #0
   13910:	add	r7, pc, r7
   13914:	ldr	r6, [sl, r3]
   13918:	b	13948 <__assert_fail@plt+0x2514>
   1391c:	ldr	r2, [r7, #44]	; 0x2c
   13920:	ldr	r3, [r6]
   13924:	bl	111c4 <fwrite_unlocked@plt>
   13928:	mov	r0, fp
   1392c:	ldr	r1, [r5, #20]
   13930:	add	fp, fp, #1
   13934:	mov	r2, r9
   13938:	bl	13834 <__assert_fail@plt+0x2400>
   1393c:	cmp	r4, fp
   13940:	cmphi	r8, fp
   13944:	bls	13988 <__assert_fail@plt+0x2554>
   13948:	ldr	r0, [r7, #40]	; 0x28
   1394c:	mov	r1, #1
   13950:	cmp	r0, #0
   13954:	bne	1391c <__assert_fail@plt+0x24e8>
   13958:	ldr	r0, [r6]
   1395c:	ldr	r3, [r0, #20]
   13960:	ldr	r1, [r0, #24]
   13964:	add	r2, r3, #1
   13968:	cmp	r3, r1
   1396c:	strcc	r2, [r0, #20]
   13970:	movcc	r2, #32
   13974:	strbcc	r2, [r3]
   13978:	bcc	13928 <__assert_fail@plt+0x24f4>
   1397c:	mov	r1, #32
   13980:	bl	113bc <__overflow@plt>
   13984:	b	13928 <__assert_fail@plt+0x24f4>
   13988:	add	r8, r8, #1
   1398c:	cmp	r4, r8
   13990:	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13994:	ldr	r3, [pc, #132]	; 13a20 <__assert_fail@plt+0x25ec>
   13998:	add	r9, r5, #28
   1399c:	ldr	r7, [pc, #132]	; 13a28 <__assert_fail@plt+0x25f4>
   139a0:	mov	fp, #32
   139a4:	add	r7, pc, r7
   139a8:	ldr	r6, [sl, r3]
   139ac:	b	139d8 <__assert_fail@plt+0x25a4>
   139b0:	ldr	r2, [r7, #44]	; 0x2c
   139b4:	ldr	r3, [r6]
   139b8:	bl	111c4 <fwrite_unlocked@plt>
   139bc:	mov	r0, r8
   139c0:	ldr	r1, [r5, #20]
   139c4:	add	r8, r8, #1
   139c8:	mov	r2, r9
   139cc:	bl	13834 <__assert_fail@plt+0x2400>
   139d0:	cmp	r4, r8
   139d4:	bls	13a14 <__assert_fail@plt+0x25e0>
   139d8:	ldr	r0, [r7, #40]	; 0x28
   139dc:	mov	r1, #1
   139e0:	cmp	r0, #0
   139e4:	bne	139b0 <__assert_fail@plt+0x257c>
   139e8:	ldr	r0, [r6]
   139ec:	ldr	r3, [r0, #20]
   139f0:	ldr	r1, [r0, #24]
   139f4:	add	r2, r3, #1
   139f8:	cmp	r3, r1
   139fc:	strcc	r2, [r0, #20]
   13a00:	strbcc	fp, [r3]
   13a04:	bcc	139bc <__assert_fail@plt+0x2588>
   13a08:	mov	r1, #32
   13a0c:	bl	113bc <__overflow@plt>
   13a10:	b	139bc <__assert_fail@plt+0x2588>
   13a14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a18:	ldrdeq	r5, [r1], -r0
   13a1c:	andeq	r5, r1, r4, lsl r7
   13a20:	andeq	r0, r0, r8, lsr r1
   13a24:	andeq	r5, r1, r0, lsr #17
   13a28:	andeq	r5, r1, ip, lsl #16
   13a2c:	ldr	r3, [pc, #456]	; 13bfc <__assert_fail@plt+0x27c8>
   13a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a34:	add	r3, pc, r3
   13a38:	ldr	r4, [pc, #448]	; 13c00 <__assert_fail@plt+0x27cc>
   13a3c:	sub	sp, sp, #12
   13a40:	ldr	fp, [r3, #84]	; 0x54
   13a44:	mov	r5, r0
   13a48:	add	r4, pc, r4
   13a4c:	mov	r7, r1
   13a50:	cmp	fp, #0
   13a54:	beq	13b64 <__assert_fail@plt+0x2730>
   13a58:	ldr	r3, [pc, #420]	; 13c04 <__assert_fail@plt+0x27d0>
   13a5c:	mov	sl, #32
   13a60:	ldr	r8, [pc, #416]	; 13c08 <__assert_fail@plt+0x27d4>
   13a64:	ldr	r9, [pc, #416]	; 13c0c <__assert_fail@plt+0x27d8>
   13a68:	ldr	r6, [r4, r3]
   13a6c:	add	r8, pc, r8
   13a70:	ldr	r4, [pc, #408]	; 13c10 <__assert_fail@plt+0x27dc>
   13a74:	add	r9, pc, r9
   13a78:	ldr	r3, [pc, #404]	; 13c14 <__assert_fail@plt+0x27e0>
   13a7c:	add	r8, r8, #88	; 0x58
   13a80:	add	r4, pc, r4
   13a84:	add	r3, pc, r3
   13a88:	str	r3, [sp, #4]
   13a8c:	ldr	r2, [fp]
   13a90:	cmp	r2, #0
   13a94:	bne	13af0 <__assert_fail@plt+0x26bc>
   13a98:	cmp	r5, r8
   13a9c:	ldreq	r3, [sp, #4]
   13aa0:	moveq	r2, r7
   13aa4:	ldrne	r0, [r9, #4]
   13aa8:	movne	r2, r5
   13aac:	ldreq	r0, [r3, #8]
   13ab0:	ldr	r1, [r2, #20]
   13ab4:	add	r2, r2, #28
   13ab8:	bl	13834 <__assert_fail@plt+0x2400>
   13abc:	ldr	fp, [fp, #8]
   13ac0:	cmp	fp, #0
   13ac4:	beq	13b30 <__assert_fail@plt+0x26fc>
   13ac8:	ldr	r0, [r4, #40]	; 0x28
   13acc:	cmp	r0, #0
   13ad0:	beq	13b04 <__assert_fail@plt+0x26d0>
   13ad4:	ldr	r2, [r4, #44]	; 0x2c
   13ad8:	mov	r1, #1
   13adc:	ldr	r3, [r6]
   13ae0:	bl	111c4 <fwrite_unlocked@plt>
   13ae4:	ldr	r2, [fp]
   13ae8:	cmp	r2, #0
   13aec:	beq	13a98 <__assert_fail@plt+0x2664>
   13af0:	cmp	r2, #1
   13af4:	ldr	r0, [fp, #4]
   13af8:	movne	r2, r7
   13afc:	moveq	r2, r5
   13b00:	b	13ab0 <__assert_fail@plt+0x267c>
   13b04:	ldr	r0, [r6]
   13b08:	ldr	r3, [r0, #20]
   13b0c:	ldr	r2, [r0, #24]
   13b10:	cmp	r3, r2
   13b14:	addcc	r2, r3, #1
   13b18:	strcc	r2, [r0, #20]
   13b1c:	strbcc	sl, [r3]
   13b20:	bcc	13a8c <__assert_fail@plt+0x2658>
   13b24:	mov	r1, #32
   13b28:	bl	113bc <__overflow@plt>
   13b2c:	b	13a8c <__assert_fail@plt+0x2658>
   13b30:	ldr	r0, [r6]
   13b34:	ldr	r1, [pc, #220]	; 13c18 <__assert_fail@plt+0x27e4>
   13b38:	ldr	r3, [r0, #20]
   13b3c:	add	r1, pc, r1
   13b40:	ldr	r2, [r0, #24]
   13b44:	ldrb	r1, [r1]
   13b48:	cmp	r3, r2
   13b4c:	bcs	13bdc <__assert_fail@plt+0x27a8>
   13b50:	add	r2, r3, #1
   13b54:	str	r2, [r0, #20]
   13b58:	strb	r1, [r3]
   13b5c:	add	sp, sp, #12
   13b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b64:	add	r3, r3, #88	; 0x58
   13b68:	cmp	r0, r3
   13b6c:	beq	13be8 <__assert_fail@plt+0x27b4>
   13b70:	ldr	r2, [pc, #164]	; 13c1c <__assert_fail@plt+0x27e8>
   13b74:	mov	r3, r0
   13b78:	add	r2, pc, r2
   13b7c:	ldr	r0, [r2, #4]
   13b80:	ldr	r8, [pc, #152]	; 13c20 <__assert_fail@plt+0x27ec>
   13b84:	add	r2, r3, #28
   13b88:	ldr	r6, [pc, #148]	; 13c24 <__assert_fail@plt+0x27f0>
   13b8c:	add	r8, pc, r8
   13b90:	ldr	r1, [r3, #20]
   13b94:	add	r6, pc, r6
   13b98:	bl	13834 <__assert_fail@plt+0x2400>
   13b9c:	mov	r0, r5
   13ba0:	ldr	r1, [r8, #4]
   13ba4:	ldr	r2, [r6, #120]	; 0x78
   13ba8:	bl	138c8 <__assert_fail@plt+0x2494>
   13bac:	mov	r0, r7
   13bb0:	ldr	r2, [r6, #124]	; 0x7c
   13bb4:	ldr	r1, [r8, #8]
   13bb8:	bl	138c8 <__assert_fail@plt+0x2494>
   13bbc:	ldr	r3, [pc, #64]	; 13c04 <__assert_fail@plt+0x27d0>
   13bc0:	ldrb	r1, [r8]
   13bc4:	ldr	r3, [r4, r3]
   13bc8:	ldr	r0, [r3]
   13bcc:	ldr	r3, [r0, #20]
   13bd0:	ldr	r2, [r0, #24]
   13bd4:	cmp	r3, r2
   13bd8:	bcc	13b50 <__assert_fail@plt+0x271c>
   13bdc:	add	sp, sp, #12
   13be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13be4:	b	113bc <__overflow@plt>
   13be8:	ldr	r2, [pc, #56]	; 13c28 <__assert_fail@plt+0x27f4>
   13bec:	mov	r3, r1
   13bf0:	add	r2, pc, r2
   13bf4:	ldr	r0, [r2, #8]
   13bf8:	b	13b80 <__assert_fail@plt+0x274c>
   13bfc:	andeq	r5, r1, ip, ror r7
   13c00:			; <UNDEFINED> instruction: 0x000155b0
   13c04:	andeq	r0, r0, r8, lsr r1
   13c08:	andeq	r5, r1, r4, asr #14
   13c0c:	ldrdeq	r5, [r1], -ip
   13c10:	andeq	r5, r1, r0, lsr r7
   13c14:	andeq	r5, r1, ip, asr #13
   13c18:	andeq	r5, r1, r4, lsl r6
   13c1c:	ldrdeq	r5, [r1], -r8
   13c20:	andeq	r5, r1, r4, asr #11
   13c24:	andeq	r5, r1, ip, lsl r6
   13c28:	andeq	r5, r1, r0, ror #10
   13c2c:	push	{r4, r5, r6, lr}
   13c30:	subs	r4, r0, #0
   13c34:	ldr	r5, [pc, #512]	; 13e3c <__assert_fail@plt+0x2a08>
   13c38:	add	r5, pc, r5
   13c3c:	beq	13c84 <__assert_fail@plt+0x2850>
   13c40:	ldr	r3, [pc, #504]	; 13e40 <__assert_fail@plt+0x2a0c>
   13c44:	mov	r2, #5
   13c48:	ldr	r1, [pc, #500]	; 13e44 <__assert_fail@plt+0x2a10>
   13c4c:	mov	r0, #0
   13c50:	ldr	r3, [r5, r3]
   13c54:	add	r1, pc, r1
   13c58:	ldr	r6, [r3]
   13c5c:	bl	111dc <dcgettext@plt>
   13c60:	ldr	r3, [pc, #480]	; 13e48 <__assert_fail@plt+0x2a14>
   13c64:	mov	r1, #1
   13c68:	ldr	r3, [r5, r3]
   13c6c:	ldr	r3, [r3]
   13c70:	mov	r2, r0
   13c74:	mov	r0, r6
   13c78:	bl	11374 <__fprintf_chk@plt>
   13c7c:	mov	r0, r4
   13c80:	bl	112e4 <exit@plt>
   13c84:	ldr	r1, [pc, #448]	; 13e4c <__assert_fail@plt+0x2a18>
   13c88:	mov	r2, #5
   13c8c:	add	r1, pc, r1
   13c90:	bl	111dc <dcgettext@plt>
   13c94:	ldr	r3, [pc, #428]	; 13e48 <__assert_fail@plt+0x2a14>
   13c98:	ldr	r6, [r5, r3]
   13c9c:	ldr	r2, [r6]
   13ca0:	mov	r1, r0
   13ca4:	mov	r0, #1
   13ca8:	bl	1135c <__printf_chk@plt>
   13cac:	ldr	r1, [pc, #412]	; 13e50 <__assert_fail@plt+0x2a1c>
   13cb0:	mov	r2, #5
   13cb4:	mov	r0, r4
   13cb8:	add	r1, pc, r1
   13cbc:	bl	111dc <dcgettext@plt>
   13cc0:	ldr	r3, [pc, #396]	; 13e54 <__assert_fail@plt+0x2a20>
   13cc4:	ldr	r5, [r5, r3]
   13cc8:	ldr	r1, [r5]
   13ccc:	bl	11140 <fputs_unlocked@plt>
   13cd0:	ldr	r1, [pc, #384]	; 13e58 <__assert_fail@plt+0x2a24>
   13cd4:	mov	r2, #5
   13cd8:	mov	r0, r4
   13cdc:	add	r1, pc, r1
   13ce0:	bl	111dc <dcgettext@plt>
   13ce4:	ldr	r1, [r5]
   13ce8:	bl	11140 <fputs_unlocked@plt>
   13cec:	ldr	r1, [pc, #360]	; 13e5c <__assert_fail@plt+0x2a28>
   13cf0:	mov	r2, #5
   13cf4:	mov	r0, r4
   13cf8:	add	r1, pc, r1
   13cfc:	bl	111dc <dcgettext@plt>
   13d00:	ldr	r1, [r5]
   13d04:	bl	11140 <fputs_unlocked@plt>
   13d08:	ldr	r1, [pc, #336]	; 13e60 <__assert_fail@plt+0x2a2c>
   13d0c:	mov	r2, #5
   13d10:	mov	r0, r4
   13d14:	add	r1, pc, r1
   13d18:	bl	111dc <dcgettext@plt>
   13d1c:	ldr	r1, [r5]
   13d20:	bl	11140 <fputs_unlocked@plt>
   13d24:	ldr	r1, [pc, #312]	; 13e64 <__assert_fail@plt+0x2a30>
   13d28:	mov	r2, #5
   13d2c:	mov	r0, r4
   13d30:	add	r1, pc, r1
   13d34:	bl	111dc <dcgettext@plt>
   13d38:	ldr	r1, [r5]
   13d3c:	bl	11140 <fputs_unlocked@plt>
   13d40:	ldr	r1, [pc, #288]	; 13e68 <__assert_fail@plt+0x2a34>
   13d44:	mov	r2, #5
   13d48:	mov	r0, r4
   13d4c:	add	r1, pc, r1
   13d50:	bl	111dc <dcgettext@plt>
   13d54:	ldr	r1, [r5]
   13d58:	bl	11140 <fputs_unlocked@plt>
   13d5c:	ldr	r1, [pc, #264]	; 13e6c <__assert_fail@plt+0x2a38>
   13d60:	mov	r2, #5
   13d64:	mov	r0, r4
   13d68:	add	r1, pc, r1
   13d6c:	bl	111dc <dcgettext@plt>
   13d70:	ldr	r1, [r5]
   13d74:	bl	11140 <fputs_unlocked@plt>
   13d78:	ldr	r1, [pc, #240]	; 13e70 <__assert_fail@plt+0x2a3c>
   13d7c:	mov	r2, #5
   13d80:	mov	r0, r4
   13d84:	add	r1, pc, r1
   13d88:	bl	111dc <dcgettext@plt>
   13d8c:	ldr	r2, [pc, #224]	; 13e74 <__assert_fail@plt+0x2a40>
   13d90:	ldr	r3, [pc, #224]	; 13e78 <__assert_fail@plt+0x2a44>
   13d94:	add	r2, pc, r2
   13d98:	add	r3, pc, r3
   13d9c:	mov	r1, r0
   13da0:	mov	r0, #1
   13da4:	bl	1135c <__printf_chk@plt>
   13da8:	mov	r0, #5
   13dac:	mov	r1, r4
   13db0:	bl	113c8 <setlocale@plt>
   13db4:	cmp	r0, #0
   13db8:	beq	13dd4 <__assert_fail@plt+0x29a0>
   13dbc:	ldr	r1, [pc, #184]	; 13e7c <__assert_fail@plt+0x2a48>
   13dc0:	mov	r2, #3
   13dc4:	add	r1, pc, r1
   13dc8:	bl	11410 <strncmp@plt>
   13dcc:	cmp	r0, #0
   13dd0:	bne	13e08 <__assert_fail@plt+0x29d4>
   13dd4:	ldr	r1, [pc, #164]	; 13e80 <__assert_fail@plt+0x2a4c>
   13dd8:	mov	r2, #5
   13ddc:	mov	r0, #0
   13de0:	add	r1, pc, r1
   13de4:	bl	111dc <dcgettext@plt>
   13de8:	mov	r5, r0
   13dec:	ldr	r0, [r6]
   13df0:	bl	14154 <close_stdout@@Base+0x118>
   13df4:	mov	r1, r5
   13df8:	mov	r2, r0
   13dfc:	mov	r0, #1
   13e00:	bl	1135c <__printf_chk@plt>
   13e04:	b	13c7c <__assert_fail@plt+0x2848>
   13e08:	ldr	r1, [pc, #116]	; 13e84 <__assert_fail@plt+0x2a50>
   13e0c:	mov	r2, #5
   13e10:	mov	r0, r4
   13e14:	add	r1, pc, r1
   13e18:	bl	111dc <dcgettext@plt>
   13e1c:	mov	r5, r0
   13e20:	ldr	r0, [r6]
   13e24:	bl	14154 <close_stdout@@Base+0x118>
   13e28:	mov	r1, r5
   13e2c:	mov	r2, r0
   13e30:	mov	r0, #1
   13e34:	bl	1135c <__printf_chk@plt>
   13e38:	b	13dd4 <__assert_fail@plt+0x29a0>
   13e3c:	andeq	r5, r1, r0, asr #7
   13e40:	andeq	r0, r0, r4, lsr #2
   13e44:	andeq	r3, r0, r8, lsl #24
   13e48:	andeq	r0, r0, r4, asr #2
   13e4c:	strdeq	r3, [r0], -r8
   13e50:	strdeq	r3, [r0], -r0
   13e54:	andeq	r0, r0, r8, lsr r1
   13e58:	andeq	r3, r0, r0, ror sp
   13e5c:	andeq	r3, r0, r4, asr lr
   13e60:	andeq	r4, r0, r4, lsr #32
   13e64:	andeq	r4, r0, r8, asr #32
   13e68:	andeq	r4, r0, ip, asr r0
   13e6c:	andeq	r4, r0, r8, ror r0
   13e70:	muleq	r0, r0, r3
   13e74:	muleq	r0, r8, r3
   13e78:	andeq	r4, r0, r4, lsr #7
   13e7c:	andeq	r4, r0, r0, lsr #7
   13e80:	ldrdeq	r4, [r0], -r0
   13e84:	andeq	r4, r0, r4, asr r3
   13e88:	push	{r4, r5, r6, r7, lr}
   13e8c:	sub	sp, sp, #12
   13e90:	ldr	ip, [r3]
   13e94:	mov	r6, r0
   13e98:	mov	r5, r1
   13e9c:	ldr	r4, [sp, #32]
   13ea0:	cmp	ip, #2
   13ea4:	beq	13ee4 <__assert_fail@plt+0x2ab0>
   13ea8:	lsl	r2, ip, #2
   13eac:	add	ip, ip, #1
   13eb0:	ldr	r1, [pc, #324]	; 13ffc <__assert_fail@plt+0x2bc8>
   13eb4:	ldr	r0, [r4]
   13eb8:	add	r1, pc, r1
   13ebc:	add	r1, r1, r2
   13ec0:	str	r0, [r5, r2]
   13ec4:	str	r6, [r1, #60]	; 0x3c
   13ec8:	str	ip, [r3]
   13ecc:	ldr	r3, [r4]
   13ed0:	cmp	r3, #3
   13ed4:	ldreq	r1, [sp, #36]	; 0x24
   13ed8:	streq	r3, [r1]
   13edc:	add	sp, sp, #12
   13ee0:	pop	{r4, r5, r6, r7, pc}
   13ee4:	ldr	r7, [r1]
   13ee8:	ldr	r0, [pc, #272]	; 14000 <__assert_fail@plt+0x2bcc>
   13eec:	rsbs	r7, r7, #1
   13ef0:	add	r0, pc, r0
   13ef4:	movcc	r7, #0
   13ef8:	add	r0, r0, r7, lsl #2
   13efc:	ldr	r1, [r1, r7, lsl #2]
   13f00:	ldr	r0, [r0, #60]	; 0x3c
   13f04:	cmp	r1, #3
   13f08:	addls	pc, pc, r1, lsl #2
   13f0c:	b	13f2c <__assert_fail@plt+0x2af8>
   13f10:	b	13fc0 <__assert_fail@plt+0x2b8c>
   13f14:	b	13f90 <__assert_fail@plt+0x2b5c>
   13f18:	b	13f60 <__assert_fail@plt+0x2b2c>
   13f1c:	b	13f20 <__assert_fail@plt+0x2aec>
   13f20:	str	r3, [sp, #4]
   13f24:	bl	12864 <__assert_fail@plt+0x1430>
   13f28:	ldr	r3, [sp, #4]
   13f2c:	cmp	r7, #0
   13f30:	movne	ip, #2
   13f34:	movne	r2, #4
   13f38:	bne	13eb0 <__assert_fail@plt+0x2a7c>
   13f3c:	ldr	r1, [pc, #192]	; 14004 <__assert_fail@plt+0x2bd0>
   13f40:	mov	ip, #2
   13f44:	ldr	r0, [r5, #4]
   13f48:	mov	r2, #4
   13f4c:	add	r1, pc, r1
   13f50:	str	r0, [r5]
   13f54:	ldr	r0, [r1, #64]	; 0x40
   13f58:	str	r0, [r1, #60]	; 0x3c
   13f5c:	b	13eb0 <__assert_fail@plt+0x2a7c>
   13f60:	ldr	r1, [r2, #4]
   13f64:	sub	r1, r1, #1
   13f68:	str	r1, [r2, #4]
   13f6c:	str	r3, [sp, #4]
   13f70:	bl	126b8 <__assert_fail@plt+0x1284>
   13f74:	ldr	r2, [pc, #140]	; 14008 <__assert_fail@plt+0x2bd4>
   13f78:	add	r2, pc, r2
   13f7c:	mov	r1, r0
   13f80:	add	r0, r2, #8
   13f84:	bl	12780 <__assert_fail@plt+0x134c>
   13f88:	ldr	r3, [sp, #4]
   13f8c:	b	13f2c <__assert_fail@plt+0x2af8>
   13f90:	ldr	r1, [r2]
   13f94:	sub	r1, r1, #1
   13f98:	str	r1, [r2]
   13f9c:	str	r3, [sp, #4]
   13fa0:	bl	126b8 <__assert_fail@plt+0x1284>
   13fa4:	ldr	r2, [pc, #96]	; 1400c <__assert_fail@plt+0x2bd8>
   13fa8:	add	r2, pc, r2
   13fac:	mov	r1, r0
   13fb0:	add	r0, r2, #4
   13fb4:	bl	12780 <__assert_fail@plt+0x134c>
   13fb8:	ldr	r3, [sp, #4]
   13fbc:	b	13f2c <__assert_fail@plt+0x2af8>
   13fc0:	ldr	r1, [pc, #72]	; 14010 <__assert_fail@plt+0x2bdc>
   13fc4:	mov	r2, #5
   13fc8:	mov	r0, #0
   13fcc:	add	r1, pc, r1
   13fd0:	bl	111dc <dcgettext@plt>
   13fd4:	mov	r4, r0
   13fd8:	mov	r0, r6
   13fdc:	bl	15c80 <close_stdout@@Base+0x1c44>
   13fe0:	mov	r2, r4
   13fe4:	mov	r3, r0
   13fe8:	mov	r0, #0
   13fec:	mov	r1, r0
   13ff0:	bl	11260 <error@plt>
   13ff4:	mov	r0, #1
   13ff8:	bl	13c2c <__assert_fail@plt+0x27f8>
   13ffc:	strdeq	r5, [r1], -r8
   14000:	andeq	r5, r1, r0, asr #5
   14004:	andeq	r5, r1, r4, ror #4
   14008:	ldrdeq	r5, [r1], -r8
   1400c:	andeq	r5, r1, r8, lsr #3
   14010:	andeq	r4, r0, r8, lsr #4
   14014:	ldr	r3, [pc, #8]	; 14024 <__assert_fail@plt+0x2bf0>
   14018:	add	r3, pc, r3
   1401c:	str	r0, [r3]
   14020:	bx	lr
   14024:	andeq	r5, r1, ip, lsl r2
   14028:	ldr	r3, [pc, #8]	; 14038 <__assert_fail@plt+0x2c04>
   1402c:	add	r3, pc, r3
   14030:	strb	r0, [r3, #4]
   14034:	bx	lr
   14038:	andeq	r5, r1, r8, lsl #4

0001403c <close_stdout@@Base>:
   1403c:	push	{r4, r5, r6, r7, lr}
   14040:	sub	sp, sp, #12
   14044:	ldr	r4, [pc, #228]	; 14130 <close_stdout@@Base+0xf4>
   14048:	ldr	r3, [pc, #228]	; 14134 <close_stdout@@Base+0xf8>
   1404c:	add	r4, pc, r4
   14050:	ldr	r3, [r4, r3]
   14054:	ldr	r0, [r3]
   14058:	bl	16e84 <close_stdout@@Base+0x2e48>
   1405c:	cmp	r0, #0
   14060:	beq	14088 <close_stdout@@Base+0x4c>
   14064:	ldr	r3, [pc, #204]	; 14138 <close_stdout@@Base+0xfc>
   14068:	add	r3, pc, r3
   1406c:	ldrb	r3, [r3, #4]
   14070:	cmp	r3, #0
   14074:	beq	140a8 <close_stdout@@Base+0x6c>
   14078:	bl	1132c <__errno_location@plt>
   1407c:	ldr	r3, [r0]
   14080:	cmp	r3, #32
   14084:	bne	140a8 <close_stdout@@Base+0x6c>
   14088:	ldr	r3, [pc, #172]	; 1413c <close_stdout@@Base+0x100>
   1408c:	ldr	r3, [r4, r3]
   14090:	ldr	r0, [r3]
   14094:	bl	16e84 <close_stdout@@Base+0x2e48>
   14098:	cmp	r0, #0
   1409c:	bne	140fc <close_stdout@@Base+0xc0>
   140a0:	add	sp, sp, #12
   140a4:	pop	{r4, r5, r6, r7, pc}
   140a8:	ldr	r1, [pc, #144]	; 14140 <close_stdout@@Base+0x104>
   140ac:	mov	r0, #0
   140b0:	mov	r2, #5
   140b4:	add	r1, pc, r1
   140b8:	bl	111dc <dcgettext@plt>
   140bc:	ldr	r3, [pc, #128]	; 14144 <close_stdout@@Base+0x108>
   140c0:	ldr	r5, [pc, r3]
   140c4:	cmp	r5, #0
   140c8:	mov	r6, r0
   140cc:	beq	1410c <close_stdout@@Base+0xd0>
   140d0:	bl	1132c <__errno_location@plt>
   140d4:	ldr	r7, [r0]
   140d8:	mov	r0, r5
   140dc:	bl	15b2c <close_stdout@@Base+0x1af0>
   140e0:	ldr	r2, [pc, #96]	; 14148 <close_stdout@@Base+0x10c>
   140e4:	str	r6, [sp]
   140e8:	mov	r1, r7
   140ec:	add	r2, pc, r2
   140f0:	mov	r3, r0
   140f4:	mov	r0, #0
   140f8:	bl	11260 <error@plt>
   140fc:	ldr	r3, [pc, #72]	; 1414c <close_stdout@@Base+0x110>
   14100:	ldr	r3, [r4, r3]
   14104:	ldr	r0, [r3]
   14108:	bl	11194 <_exit@plt>
   1410c:	bl	1132c <__errno_location@plt>
   14110:	ldr	r2, [pc, #56]	; 14150 <close_stdout@@Base+0x114>
   14114:	add	r2, pc, r2
   14118:	mov	r3, r0
   1411c:	mov	r0, r5
   14120:	ldr	r1, [r3]
   14124:	mov	r3, r6
   14128:	bl	11260 <error@plt>
   1412c:	b	140fc <close_stdout@@Base+0xc0>
   14130:	andeq	r4, r1, ip, lsr #31
   14134:	andeq	r0, r0, r8, lsr r1
   14138:	andeq	r5, r1, ip, asr #3
   1413c:	andeq	r0, r0, r4, lsr #2
   14140:	andeq	r4, r0, r4, lsl #5
   14144:	andeq	r5, r1, r4, ror r1
   14148:	andeq	r4, r0, r8, asr r2
   1414c:	andeq	r0, r0, ip, lsr r1
   14150:	andeq	r4, r0, r4, lsr r2
   14154:	ldrb	r3, [r0]
   14158:	cmp	r3, #47	; 0x2f
   1415c:	bne	14178 <close_stdout@@Base+0x13c>
   14160:	add	r2, r0, #1
   14164:	mov	r0, r2
   14168:	add	r2, r2, #1
   1416c:	ldrb	r3, [r0]
   14170:	cmp	r3, #47	; 0x2f
   14174:	beq	14164 <close_stdout@@Base+0x128>
   14178:	cmp	r3, #0
   1417c:	bxeq	lr
   14180:	mov	r2, r0
   14184:	mov	r1, #0
   14188:	cmp	r3, #47	; 0x2f
   1418c:	moveq	r1, #1
   14190:	beq	141a0 <close_stdout@@Base+0x164>
   14194:	cmp	r1, #0
   14198:	movne	r0, r2
   1419c:	movne	r1, #0
   141a0:	ldrb	r3, [r2, #1]!
   141a4:	cmp	r3, #0
   141a8:	bne	14188 <close_stdout@@Base+0x14c>
   141ac:	bx	lr
   141b0:	push	{r4, lr}
   141b4:	mov	r4, r0
   141b8:	bl	112fc <strlen@plt>
   141bc:	cmp	r0, #1
   141c0:	popls	{r4, pc}
   141c4:	sub	r3, r0, #1
   141c8:	ldrb	r2, [r4, r3]
   141cc:	cmp	r2, #47	; 0x2f
   141d0:	popne	{r4, pc}
   141d4:	mov	r0, r3
   141d8:	cmp	r0, #1
   141dc:	sub	r3, r3, #1
   141e0:	beq	141f4 <close_stdout@@Base+0x1b8>
   141e4:	ldrb	r2, [r4, r3]
   141e8:	cmp	r2, #47	; 0x2f
   141ec:	popne	{r4, pc}
   141f0:	b	141d4 <close_stdout@@Base+0x198>
   141f4:	pop	{r4, pc}
   141f8:	b	11170 <posix_fadvise64@plt>
   141fc:	cmp	r0, #0
   14200:	push	{r4, r5, r6, lr}
   14204:	mov	r6, r1
   14208:	sub	sp, sp, #16
   1420c:	beq	14230 <close_stdout@@Base+0x1f4>
   14210:	mov	r4, #0
   14214:	mov	r5, #0
   14218:	bl	11368 <fileno@plt>
   1421c:	str	r6, [sp, #8]
   14220:	mov	r2, r4
   14224:	mov	r3, r5
   14228:	strd	r4, [sp]
   1422c:	bl	141f8 <close_stdout@@Base+0x1bc>
   14230:	add	sp, sp, #16
   14234:	pop	{r4, r5, r6, pc}
   14238:	push	{r4, r5, r6, lr}
   1423c:	mov	r5, r1
   14240:	bl	113ec <fopen64@plt>
   14244:	subs	r4, r0, #0
   14248:	beq	14258 <close_stdout@@Base+0x21c>
   1424c:	bl	11368 <fileno@plt>
   14250:	cmp	r0, #2
   14254:	bls	14260 <close_stdout@@Base+0x224>
   14258:	mov	r0, r4
   1425c:	pop	{r4, r5, r6, pc}
   14260:	bl	15c8c <close_stdout@@Base+0x1c50>
   14264:	subs	r6, r0, #0
   14268:	blt	14294 <close_stdout@@Base+0x258>
   1426c:	mov	r0, r4
   14270:	bl	16b68 <close_stdout@@Base+0x2b2c>
   14274:	cmp	r0, #0
   14278:	bne	142b4 <close_stdout@@Base+0x278>
   1427c:	mov	r1, r5
   14280:	mov	r0, r6
   14284:	bl	11128 <fdopen@plt>
   14288:	cmp	r0, #0
   1428c:	beq	142b4 <close_stdout@@Base+0x278>
   14290:	pop	{r4, r5, r6, pc}
   14294:	bl	1132c <__errno_location@plt>
   14298:	ldr	r6, [r0]
   1429c:	mov	r5, r0
   142a0:	mov	r0, r4
   142a4:	bl	16b68 <close_stdout@@Base+0x2b2c>
   142a8:	mov	r0, #0
   142ac:	str	r6, [r5]
   142b0:	pop	{r4, r5, r6, pc}
   142b4:	bl	1132c <__errno_location@plt>
   142b8:	ldr	r5, [r0]
   142bc:	mov	r4, r0
   142c0:	mov	r0, r6
   142c4:	bl	11428 <close@plt>
   142c8:	mov	r0, #0
   142cc:	str	r5, [r4]
   142d0:	pop	{r4, r5, r6, pc}
   142d4:	push	{r3, lr}
   142d8:	mov	r1, #0
   142dc:	bl	113c8 <setlocale@plt>
   142e0:	cmp	r0, #0
   142e4:	beq	14320 <close_stdout@@Base+0x2e4>
   142e8:	ldrb	r3, [r0]
   142ec:	cmp	r3, #67	; 0x43
   142f0:	bne	14308 <close_stdout@@Base+0x2cc>
   142f4:	ldrb	r3, [r0, #1]
   142f8:	cmp	r3, #0
   142fc:	bne	14308 <close_stdout@@Base+0x2cc>
   14300:	mov	r0, r3
   14304:	pop	{r3, pc}
   14308:	ldr	r1, [pc, #24]	; 14328 <close_stdout@@Base+0x2ec>
   1430c:	add	r1, pc, r1
   14310:	bl	11164 <strcmp@plt>
   14314:	adds	r0, r0, #0
   14318:	movne	r0, #1
   1431c:	pop	{r3, pc}
   14320:	mov	r0, #1
   14324:	pop	{r3, pc}
   14328:	andeq	r4, r0, r0, asr #32
   1432c:	mov	r1, #0
   14330:	mov	r2, #20
   14334:	b	11344 <memset@plt>
   14338:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1433c:	mov	r5, r1
   14340:	ldr	r3, [r1]
   14344:	mov	r9, r0
   14348:	ldr	sl, [r0, #8]
   1434c:	mov	r7, r2
   14350:	tst	r3, #16
   14354:	ldr	r8, [r0]
   14358:	moveq	r4, sl
   1435c:	add	r8, sl, r8
   14360:	beq	14378 <close_stdout@@Base+0x33c>
   14364:	b	143dc <close_stdout@@Base+0x3a0>
   14368:	cmp	r6, r7
   1436c:	strb	r6, [r4]
   14370:	add	r4, r4, #1
   14374:	beq	143cc <close_stdout@@Base+0x390>
   14378:	ldmib	r5, {r3, ip}
   1437c:	cmp	r3, ip
   14380:	bcs	143e4 <close_stdout@@Base+0x3a8>
   14384:	add	ip, r3, #1
   14388:	str	ip, [r5, #4]
   1438c:	ldrb	r6, [r3]
   14390:	cmp	r4, r8
   14394:	bne	14368 <close_stdout@@Base+0x32c>
   14398:	mov	r0, sl
   1439c:	mov	r1, r9
   143a0:	ldr	r4, [r9]
   143a4:	bl	16388 <close_stdout@@Base+0x234c>
   143a8:	ldr	r8, [r9]
   143ac:	cmp	r6, r7
   143b0:	add	r4, r0, r4
   143b4:	str	r0, [r9, #8]
   143b8:	mov	sl, r0
   143bc:	add	r8, r0, r8
   143c0:	strb	r6, [r4]
   143c4:	add	r4, r4, #1
   143c8:	bne	14378 <close_stdout@@Base+0x33c>
   143cc:	rsb	r4, sl, r4
   143d0:	mov	r0, r9
   143d4:	str	r4, [r9, #4]
   143d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143dc:	mov	r0, #0
   143e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143e4:	mov	r0, r5
   143e8:	bl	113b0 <__uflow@plt>
   143ec:	cmn	r0, #1
   143f0:	mov	r6, r0
   143f4:	bne	14390 <close_stdout@@Base+0x354>
   143f8:	cmp	r4, sl
   143fc:	beq	143dc <close_stdout@@Base+0x3a0>
   14400:	ldr	r3, [r5]
   14404:	tst	r3, #32
   14408:	bne	143dc <close_stdout@@Base+0x3a0>
   1440c:	ldrb	r3, [r4, #-1]
   14410:	cmp	r3, r7
   14414:	beq	143cc <close_stdout@@Base+0x390>
   14418:	mov	r6, r7
   1441c:	b	14390 <close_stdout@@Base+0x354>
   14420:	mov	r2, #10
   14424:	b	14338 <close_stdout@@Base+0x2fc>
   14428:	ldr	r0, [r0, #8]
   1442c:	b	11188 <free@plt>
   14430:	push	{r3, r4, r5, r6, r7, lr}
   14434:	subs	r4, r0, #0
   14438:	ldr	r5, [pc, #172]	; 144ec <close_stdout@@Base+0x4b0>
   1443c:	add	r5, pc, r5
   14440:	beq	144c8 <close_stdout@@Base+0x48c>
   14444:	mov	r1, #47	; 0x2f
   14448:	bl	113d4 <strrchr@plt>
   1444c:	subs	r6, r0, #0
   14450:	beq	144ac <close_stdout@@Base+0x470>
   14454:	add	r7, r6, #1
   14458:	rsb	r3, r4, r7
   1445c:	cmp	r3, #6
   14460:	ble	144ac <close_stdout@@Base+0x470>
   14464:	ldr	r1, [pc, #132]	; 144f0 <close_stdout@@Base+0x4b4>
   14468:	sub	r0, r6, #6
   1446c:	mov	r2, #7
   14470:	add	r1, pc, r1
   14474:	bl	11410 <strncmp@plt>
   14478:	cmp	r0, #0
   1447c:	bne	144ac <close_stdout@@Base+0x470>
   14480:	ldr	r1, [pc, #108]	; 144f4 <close_stdout@@Base+0x4b8>
   14484:	mov	r0, r7
   14488:	mov	r2, #3
   1448c:	add	r1, pc, r1
   14490:	bl	11410 <strncmp@plt>
   14494:	cmp	r0, #0
   14498:	movne	r4, r7
   1449c:	ldreq	r3, [pc, #84]	; 144f8 <close_stdout@@Base+0x4bc>
   144a0:	addeq	r4, r6, #4
   144a4:	ldreq	r3, [r5, r3]
   144a8:	streq	r4, [r3]
   144ac:	ldr	r2, [pc, #72]	; 144fc <close_stdout@@Base+0x4c0>
   144b0:	ldr	r3, [pc, #72]	; 14500 <close_stdout@@Base+0x4c4>
   144b4:	ldr	r2, [r5, r2]
   144b8:	str	r4, [r2]
   144bc:	ldr	r3, [r5, r3]
   144c0:	str	r4, [r3]
   144c4:	pop	{r3, r4, r5, r6, r7, pc}
   144c8:	ldr	r3, [pc, #52]	; 14504 <close_stdout@@Base+0x4c8>
   144cc:	mov	r1, #1
   144d0:	ldr	r0, [pc, #48]	; 14508 <close_stdout@@Base+0x4cc>
   144d4:	mov	r2, #55	; 0x37
   144d8:	ldr	r3, [r5, r3]
   144dc:	add	r0, pc, r0
   144e0:	ldr	r3, [r3]
   144e4:	bl	11218 <fwrite@plt>
   144e8:	bl	1141c <abort@plt>
   144ec:			; <UNDEFINED> instruction: 0x00014bbc
   144f0:	andeq	r3, r0, ip, lsl pc
   144f4:	andeq	r3, r0, r8, lsl #30
   144f8:	andeq	r0, r0, ip, asr #2
   144fc:	andeq	r0, r0, r4, asr #2
   14500:	andeq	r0, r0, r0, asr #2
   14504:	andeq	r0, r0, r4, lsr #2
   14508:	andeq	r3, r0, r8, ror lr
   1450c:	push	{r3, lr}
   14510:	mov	r3, r0
   14514:	mov	r2, #0
   14518:	cmp	r1, #8
   1451c:	str	r2, [r3], #4
   14520:	add	r3, r3, #4
   14524:	str	r2, [r0, #4]
   14528:	str	r2, [r3], #4
   1452c:	str	r2, [r3], #4
   14530:	str	r2, [r3], #4
   14534:	str	r2, [r3], #4
   14538:	str	r2, [r3], #4
   1453c:	str	r2, [r3], #4
   14540:	str	r2, [r3], #4
   14544:	str	r2, [r3], #4
   14548:	str	r2, [r3], #4
   1454c:	str	r2, [r3]
   14550:	beq	1455c <close_stdout@@Base+0x520>
   14554:	str	r1, [r0]
   14558:	pop	{r3, pc}
   1455c:	bl	1141c <abort@plt>
   14560:	push	{r4, r5, r6, lr}
   14564:	mov	r4, r0
   14568:	mov	r6, r1
   1456c:	mov	r0, #0
   14570:	mov	r1, r4
   14574:	mov	r2, #5
   14578:	bl	111dc <dcgettext@plt>
   1457c:	cmp	r0, r4
   14580:	mov	r5, r0
   14584:	beq	1458c <close_stdout@@Base+0x550>
   14588:	pop	{r4, r5, r6, pc}
   1458c:	bl	16f04 <close_stdout@@Base+0x2ec8>
   14590:	ldrb	r3, [r0]
   14594:	bic	r3, r3, #32
   14598:	cmp	r3, #85	; 0x55
   1459c:	bne	14610 <close_stdout@@Base+0x5d4>
   145a0:	ldrb	r3, [r0, #1]
   145a4:	bic	r3, r3, #32
   145a8:	cmp	r3, #84	; 0x54
   145ac:	bne	145fc <close_stdout@@Base+0x5c0>
   145b0:	ldrb	r3, [r0, #2]
   145b4:	bic	r3, r3, #32
   145b8:	cmp	r3, #70	; 0x46
   145bc:	bne	145fc <close_stdout@@Base+0x5c0>
   145c0:	ldrb	r3, [r0, #3]
   145c4:	cmp	r3, #45	; 0x2d
   145c8:	bne	145fc <close_stdout@@Base+0x5c0>
   145cc:	ldrb	r3, [r0, #4]
   145d0:	cmp	r3, #56	; 0x38
   145d4:	bne	145fc <close_stdout@@Base+0x5c0>
   145d8:	ldrb	r3, [r0, #5]
   145dc:	cmp	r3, #0
   145e0:	bne	145fc <close_stdout@@Base+0x5c0>
   145e4:	ldrb	r3, [r5]
   145e8:	cmp	r3, #96	; 0x60
   145ec:	beq	14688 <close_stdout@@Base+0x64c>
   145f0:	ldr	r0, [pc, #180]	; 146ac <close_stdout@@Base+0x670>
   145f4:	add	r0, pc, r0
   145f8:	pop	{r4, r5, r6, pc}
   145fc:	cmp	r6, #7
   14600:	beq	14694 <close_stdout@@Base+0x658>
   14604:	ldr	r0, [pc, #164]	; 146b0 <close_stdout@@Base+0x674>
   14608:	add	r0, pc, r0
   1460c:	pop	{r4, r5, r6, pc}
   14610:	cmp	r3, #71	; 0x47
   14614:	bne	145fc <close_stdout@@Base+0x5c0>
   14618:	ldrb	r3, [r0, #1]
   1461c:	bic	r3, r3, #32
   14620:	cmp	r3, #66	; 0x42
   14624:	bne	145fc <close_stdout@@Base+0x5c0>
   14628:	ldrb	r3, [r0, #2]
   1462c:	cmp	r3, #49	; 0x31
   14630:	bne	145fc <close_stdout@@Base+0x5c0>
   14634:	ldrb	r3, [r0, #3]
   14638:	cmp	r3, #56	; 0x38
   1463c:	bne	145fc <close_stdout@@Base+0x5c0>
   14640:	ldrb	r3, [r0, #4]
   14644:	cmp	r3, #48	; 0x30
   14648:	bne	145fc <close_stdout@@Base+0x5c0>
   1464c:	ldrb	r3, [r0, #5]
   14650:	cmp	r3, #51	; 0x33
   14654:	bne	145fc <close_stdout@@Base+0x5c0>
   14658:	ldrb	r3, [r0, #6]
   1465c:	cmp	r3, #48	; 0x30
   14660:	bne	145fc <close_stdout@@Base+0x5c0>
   14664:	ldrb	r3, [r0, #7]
   14668:	cmp	r3, #0
   1466c:	bne	145fc <close_stdout@@Base+0x5c0>
   14670:	ldrb	r3, [r5]
   14674:	cmp	r3, #96	; 0x60
   14678:	beq	146a0 <close_stdout@@Base+0x664>
   1467c:	ldr	r0, [pc, #48]	; 146b4 <close_stdout@@Base+0x678>
   14680:	add	r0, pc, r0
   14684:	pop	{r4, r5, r6, pc}
   14688:	ldr	r0, [pc, #40]	; 146b8 <close_stdout@@Base+0x67c>
   1468c:	add	r0, pc, r0
   14690:	pop	{r4, r5, r6, pc}
   14694:	ldr	r0, [pc, #32]	; 146bc <close_stdout@@Base+0x680>
   14698:	add	r0, pc, r0
   1469c:	pop	{r4, r5, r6, pc}
   146a0:	ldr	r0, [pc, #24]	; 146c0 <close_stdout@@Base+0x684>
   146a4:	add	r0, pc, r0
   146a8:	pop	{r4, r5, r6, pc}
   146ac:	andeq	r3, r0, r4, asr #27
   146b0:			; <UNDEFINED> instruction: 0x00003db8
   146b4:	andeq	r3, r0, ip, lsr sp
   146b8:	andeq	r3, r0, r0, asr #26
   146bc:	andeq	r3, r0, ip, lsr #26
   146c0:	andeq	r3, r0, r4, lsr #26
   146c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c8:	sub	sp, sp, #124	; 0x7c
   146cc:	ldr	ip, [pc, #3304]	; 153bc <close_stdout@@Base+0x1380>
   146d0:	mov	sl, r1
   146d4:	str	r0, [sp, #40]	; 0x28
   146d8:	mov	r8, r3
   146dc:	ldr	r0, [pc, #3292]	; 153c0 <close_stdout@@Base+0x1384>
   146e0:	add	ip, pc, ip
   146e4:	str	r2, [sp, #32]
   146e8:	ldr	r1, [sp, #164]	; 0xa4
   146ec:	mov	r3, ip
   146f0:	ldr	r0, [ip, r0]
   146f4:	ldr	r2, [sp, #172]	; 0xac
   146f8:	ubfx	r1, r1, #1, #1
   146fc:	str	r1, [sp, #36]	; 0x24
   14700:	str	r0, [sp, #56]	; 0x38
   14704:	ldr	r0, [sp, #168]	; 0xa8
   14708:	ldr	r1, [sp, #176]	; 0xb0
   1470c:	str	r2, [sp, #72]	; 0x48
   14710:	str	r0, [sp, #48]	; 0x30
   14714:	ldr	r0, [sp, #56]	; 0x38
   14718:	str	r1, [sp, #68]	; 0x44
   1471c:	ldr	r3, [r0]
   14720:	str	r3, [sp, #116]	; 0x74
   14724:	bl	11230 <__ctype_get_mb_cur_max@plt>
   14728:	ldr	r2, [sp, #160]	; 0xa0
   1472c:	str	r0, [sp, #64]	; 0x40
   14730:	cmp	r2, #8
   14734:	addls	pc, pc, r2, lsl #2
   14738:	b	15298 <close_stdout@@Base+0x125c>
   1473c:	b	14760 <close_stdout@@Base+0x724>
   14740:	b	14fb0 <close_stdout@@Base+0xf74>
   14744:	b	14fe0 <close_stdout@@Base+0xfa4>
   14748:	b	14e90 <close_stdout@@Base+0xe54>
   1474c:	b	14ed0 <close_stdout@@Base+0xe94>
   14750:	b	14efc <close_stdout@@Base+0xec0>
   14754:	b	14f1c <close_stdout@@Base+0xee0>
   14758:	b	14f1c <close_stdout@@Base+0xee0>
   1475c:	b	14f1c <close_stdout@@Base+0xee0>
   14760:	mov	r2, #0
   14764:	str	r2, [sp, #36]	; 0x24
   14768:	mov	r9, r2
   1476c:	str	r2, [sp, #24]
   14770:	str	r2, [sp, #28]
   14774:	str	r2, [sp, #52]	; 0x34
   14778:	ldr	r0, [sp, #36]	; 0x24
   1477c:	mov	fp, #0
   14780:	ldr	r1, [sp, #24]
   14784:	eor	r2, r0, #1
   14788:	eor	r3, r1, #1
   1478c:	and	r3, r2, r3
   14790:	and	r2, r1, r0
   14794:	str	r3, [sp, #44]	; 0x2c
   14798:	str	r2, [sp, #76]	; 0x4c
   1479c:	cmn	r8, #1
   147a0:	beq	14b20 <close_stdout@@Base+0xae4>
   147a4:	subs	r3, fp, r8
   147a8:	movne	r3, #1
   147ac:	cmp	r3, #0
   147b0:	beq	14b38 <close_stdout@@Base+0xafc>
   147b4:	ldr	r3, [sp, #28]
   147b8:	ldr	r0, [sp, #24]
   147bc:	adds	r7, r3, #0
   147c0:	movne	r7, #1
   147c4:	ands	r6, r7, r0
   147c8:	bne	15024 <close_stdout@@Base+0xfe8>
   147cc:	ldr	r1, [sp, #32]
   147d0:	add	r5, r1, fp
   147d4:	ldrb	r4, [r5]
   147d8:	cmp	r4, #126	; 0x7e
   147dc:	addls	pc, pc, r4, lsl #2
   147e0:	b	14da4 <close_stdout@@Base+0xd68>
   147e4:	b	14cb0 <close_stdout@@Base+0xc74>
   147e8:	b	14da4 <close_stdout@@Base+0xd68>
   147ec:	b	14da4 <close_stdout@@Base+0xd68>
   147f0:	b	14da4 <close_stdout@@Base+0xd68>
   147f4:	b	14da4 <close_stdout@@Base+0xd68>
   147f8:	b	14da4 <close_stdout@@Base+0xd68>
   147fc:	b	14da4 <close_stdout@@Base+0xd68>
   14800:	b	14c98 <close_stdout@@Base+0xc5c>
   14804:	b	14c80 <close_stdout@@Base+0xc44>
   14808:	b	14ca8 <close_stdout@@Base+0xc6c>
   1480c:	b	14ca0 <close_stdout@@Base+0xc64>
   14810:	b	14c90 <close_stdout@@Base+0xc54>
   14814:	b	14c88 <close_stdout@@Base+0xc4c>
   14818:	b	14c4c <close_stdout@@Base+0xc10>
   1481c:	b	14da4 <close_stdout@@Base+0xd68>
   14820:	b	14da4 <close_stdout@@Base+0xd68>
   14824:	b	14da4 <close_stdout@@Base+0xd68>
   14828:	b	14da4 <close_stdout@@Base+0xd68>
   1482c:	b	14da4 <close_stdout@@Base+0xd68>
   14830:	b	14da4 <close_stdout@@Base+0xd68>
   14834:	b	14da4 <close_stdout@@Base+0xd68>
   14838:	b	14da4 <close_stdout@@Base+0xd68>
   1483c:	b	14da4 <close_stdout@@Base+0xd68>
   14840:	b	14da4 <close_stdout@@Base+0xd68>
   14844:	b	14da4 <close_stdout@@Base+0xd68>
   14848:	b	14da4 <close_stdout@@Base+0xd68>
   1484c:	b	14da4 <close_stdout@@Base+0xd68>
   14850:	b	14da4 <close_stdout@@Base+0xd68>
   14854:	b	14da4 <close_stdout@@Base+0xd68>
   14858:	b	14da4 <close_stdout@@Base+0xd68>
   1485c:	b	14da4 <close_stdout@@Base+0xd68>
   14860:	b	14da4 <close_stdout@@Base+0xd68>
   14864:	b	14bd8 <close_stdout@@Base+0xb9c>
   14868:	b	14bd8 <close_stdout@@Base+0xb9c>
   1486c:	b	14bd8 <close_stdout@@Base+0xb9c>
   14870:	b	14bd0 <close_stdout@@Base+0xb94>
   14874:	b	14bd8 <close_stdout@@Base+0xb9c>
   14878:	b	14aac <close_stdout@@Base+0xa70>
   1487c:	b	14bd8 <close_stdout@@Base+0xb9c>
   14880:	b	14d4c <close_stdout@@Base+0xd10>
   14884:	b	14bd8 <close_stdout@@Base+0xb9c>
   14888:	b	14bd8 <close_stdout@@Base+0xb9c>
   1488c:	b	14bd8 <close_stdout@@Base+0xb9c>
   14890:	b	14aac <close_stdout@@Base+0xa70>
   14894:	b	14aac <close_stdout@@Base+0xa70>
   14898:	b	14aac <close_stdout@@Base+0xa70>
   1489c:	b	14aac <close_stdout@@Base+0xa70>
   148a0:	b	14aac <close_stdout@@Base+0xa70>
   148a4:	b	14aac <close_stdout@@Base+0xa70>
   148a8:	b	14aac <close_stdout@@Base+0xa70>
   148ac:	b	14aac <close_stdout@@Base+0xa70>
   148b0:	b	14aac <close_stdout@@Base+0xa70>
   148b4:	b	14aac <close_stdout@@Base+0xa70>
   148b8:	b	14aac <close_stdout@@Base+0xa70>
   148bc:	b	14aac <close_stdout@@Base+0xa70>
   148c0:	b	14aac <close_stdout@@Base+0xa70>
   148c4:	b	14aac <close_stdout@@Base+0xa70>
   148c8:	b	14aac <close_stdout@@Base+0xa70>
   148cc:	b	14aac <close_stdout@@Base+0xa70>
   148d0:	b	14bd8 <close_stdout@@Base+0xb9c>
   148d4:	b	14bd8 <close_stdout@@Base+0xb9c>
   148d8:	b	14bd8 <close_stdout@@Base+0xb9c>
   148dc:	b	14bd8 <close_stdout@@Base+0xb9c>
   148e0:	b	149e0 <close_stdout@@Base+0x9a4>
   148e4:	b	14da4 <close_stdout@@Base+0xd68>
   148e8:	b	14aac <close_stdout@@Base+0xa70>
   148ec:	b	14aac <close_stdout@@Base+0xa70>
   148f0:	b	14aac <close_stdout@@Base+0xa70>
   148f4:	b	14aac <close_stdout@@Base+0xa70>
   148f8:	b	14aac <close_stdout@@Base+0xa70>
   148fc:	b	14aac <close_stdout@@Base+0xa70>
   14900:	b	14aac <close_stdout@@Base+0xa70>
   14904:	b	14aac <close_stdout@@Base+0xa70>
   14908:	b	14aac <close_stdout@@Base+0xa70>
   1490c:	b	14aac <close_stdout@@Base+0xa70>
   14910:	b	14aac <close_stdout@@Base+0xa70>
   14914:	b	14aac <close_stdout@@Base+0xa70>
   14918:	b	14aac <close_stdout@@Base+0xa70>
   1491c:	b	14aac <close_stdout@@Base+0xa70>
   14920:	b	14aac <close_stdout@@Base+0xa70>
   14924:	b	14aac <close_stdout@@Base+0xa70>
   14928:	b	14aac <close_stdout@@Base+0xa70>
   1492c:	b	14aac <close_stdout@@Base+0xa70>
   14930:	b	14aac <close_stdout@@Base+0xa70>
   14934:	b	14aac <close_stdout@@Base+0xa70>
   14938:	b	14aac <close_stdout@@Base+0xa70>
   1493c:	b	14aac <close_stdout@@Base+0xa70>
   14940:	b	14aac <close_stdout@@Base+0xa70>
   14944:	b	14aac <close_stdout@@Base+0xa70>
   14948:	b	14aac <close_stdout@@Base+0xa70>
   1494c:	b	14aac <close_stdout@@Base+0xa70>
   14950:	b	14bd8 <close_stdout@@Base+0xb9c>
   14954:	b	14d30 <close_stdout@@Base+0xcf4>
   14958:	b	14aac <close_stdout@@Base+0xa70>
   1495c:	b	14bd8 <close_stdout@@Base+0xb9c>
   14960:	b	14aac <close_stdout@@Base+0xa70>
   14964:	b	14bd8 <close_stdout@@Base+0xb9c>
   14968:	b	14aac <close_stdout@@Base+0xa70>
   1496c:	b	14aac <close_stdout@@Base+0xa70>
   14970:	b	14aac <close_stdout@@Base+0xa70>
   14974:	b	14aac <close_stdout@@Base+0xa70>
   14978:	b	14aac <close_stdout@@Base+0xa70>
   1497c:	b	14aac <close_stdout@@Base+0xa70>
   14980:	b	14aac <close_stdout@@Base+0xa70>
   14984:	b	14aac <close_stdout@@Base+0xa70>
   14988:	b	14aac <close_stdout@@Base+0xa70>
   1498c:	b	14aac <close_stdout@@Base+0xa70>
   14990:	b	14aac <close_stdout@@Base+0xa70>
   14994:	b	14aac <close_stdout@@Base+0xa70>
   14998:	b	14aac <close_stdout@@Base+0xa70>
   1499c:	b	14aac <close_stdout@@Base+0xa70>
   149a0:	b	14aac <close_stdout@@Base+0xa70>
   149a4:	b	14aac <close_stdout@@Base+0xa70>
   149a8:	b	14aac <close_stdout@@Base+0xa70>
   149ac:	b	14aac <close_stdout@@Base+0xa70>
   149b0:	b	14aac <close_stdout@@Base+0xa70>
   149b4:	b	14aac <close_stdout@@Base+0xa70>
   149b8:	b	14aac <close_stdout@@Base+0xa70>
   149bc:	b	14aac <close_stdout@@Base+0xa70>
   149c0:	b	14aac <close_stdout@@Base+0xa70>
   149c4:	b	14aac <close_stdout@@Base+0xa70>
   149c8:	b	14aac <close_stdout@@Base+0xa70>
   149cc:	b	14aac <close_stdout@@Base+0xa70>
   149d0:	b	14bb8 <close_stdout@@Base+0xb7c>
   149d4:	b	14bd8 <close_stdout@@Base+0xb9c>
   149d8:	b	14bb8 <close_stdout@@Base+0xb7c>
   149dc:	b	14bd0 <close_stdout@@Base+0xb94>
   149e0:	ldr	r3, [sp, #160]	; 0xa0
   149e4:	cmp	r3, #2
   149e8:	beq	15274 <close_stdout@@Base+0x1238>
   149ec:	cmp	r3, #3
   149f0:	bne	14aac <close_stdout@@Base+0xa70>
   149f4:	ldr	r1, [sp, #164]	; 0xa4
   149f8:	tst	r1, #4
   149fc:	beq	14aac <close_stdout@@Base+0xa70>
   14a00:	add	r3, fp, #2
   14a04:	cmp	r8, r3
   14a08:	bls	14aac <close_stdout@@Base+0xa70>
   14a0c:	ldrb	r2, [r5, #1]
   14a10:	mov	r1, #1
   14a14:	cmp	r2, #63	; 0x3f
   14a18:	bne	14aac <close_stdout@@Base+0xa70>
   14a1c:	ldr	r0, [sp, #32]
   14a20:	ldrb	ip, [r0, r3]
   14a24:	sub	r0, ip, #33	; 0x21
   14a28:	uxtb	r0, r0
   14a2c:	cmp	r0, #29
   14a30:	bhi	14aac <close_stdout@@Base+0xa70>
   14a34:	lsl	r1, r1, r0
   14a38:	movw	r0, #20929	; 0x51c1
   14a3c:	movt	r0, #14336	; 0x3800
   14a40:	and	r0, r1, r0
   14a44:	cmp	r0, #0
   14a48:	beq	14aac <close_stdout@@Base+0xa70>
   14a4c:	ldr	r1, [sp, #36]	; 0x24
   14a50:	cmp	r1, #0
   14a54:	bne	14bf4 <close_stdout@@Base+0xbb8>
   14a58:	cmp	r9, sl
   14a5c:	mov	r4, ip
   14a60:	mov	fp, r3
   14a64:	ldrcc	r0, [sp, #40]	; 0x28
   14a68:	strbcc	r2, [r0, r9]
   14a6c:	add	r2, r9, #1
   14a70:	cmp	sl, r2
   14a74:	ldrhi	r0, [sp, #40]	; 0x28
   14a78:	movhi	r1, #34	; 0x22
   14a7c:	strbhi	r1, [r0, r2]
   14a80:	add	r2, r9, #2
   14a84:	cmp	sl, r2
   14a88:	ldrhi	r0, [sp, #40]	; 0x28
   14a8c:	movhi	r1, #34	; 0x22
   14a90:	strbhi	r1, [r0, r2]
   14a94:	add	r2, r9, #3
   14a98:	cmp	sl, r2
   14a9c:	add	r9, r9, #4
   14aa0:	ldrhi	r0, [sp, #40]	; 0x28
   14aa4:	movhi	r1, #63	; 0x3f
   14aa8:	strbhi	r1, [r0, r2]
   14aac:	ldr	r0, [sp, #44]	; 0x2c
   14ab0:	cmp	r0, #0
   14ab4:	bne	14adc <close_stdout@@Base+0xaa0>
   14ab8:	ldr	r1, [sp, #48]	; 0x30
   14abc:	cmp	r1, #0
   14ac0:	beq	14adc <close_stdout@@Base+0xaa0>
   14ac4:	ubfx	r2, r4, #5, #8
   14ac8:	and	r3, r4, #31
   14acc:	ldr	r2, [r1, r2, lsl #2]
   14ad0:	lsr	r3, r2, r3
   14ad4:	tst	r3, #1
   14ad8:	bne	14ae4 <close_stdout@@Base+0xaa8>
   14adc:	cmp	r6, #0
   14ae0:	beq	14b04 <close_stdout@@Base+0xac8>
   14ae4:	ldr	r2, [sp, #36]	; 0x24
   14ae8:	cmp	r2, #0
   14aec:	bne	14bf4 <close_stdout@@Base+0xbb8>
   14af0:	cmp	r9, sl
   14af4:	ldrcc	r0, [sp, #40]	; 0x28
   14af8:	movcc	r3, #92	; 0x5c
   14afc:	strbcc	r3, [r0, r9]
   14b00:	add	r9, r9, #1
   14b04:	add	fp, fp, #1
   14b08:	cmp	r9, sl
   14b0c:	ldrcc	r1, [sp, #40]	; 0x28
   14b10:	strbcc	r4, [r1, r9]
   14b14:	cmn	r8, #1
   14b18:	add	r9, r9, #1
   14b1c:	bne	147a4 <close_stdout@@Base+0x768>
   14b20:	ldr	r2, [sp, #32]
   14b24:	ldrb	r3, [r2, fp]
   14b28:	adds	r3, r3, #0
   14b2c:	movne	r3, #1
   14b30:	cmp	r3, #0
   14b34:	bne	147b4 <close_stdout@@Base+0x778>
   14b38:	ldr	r3, [sp, #160]	; 0xa0
   14b3c:	cmp	r9, #0
   14b40:	cmpeq	r3, #2
   14b44:	bne	14b54 <close_stdout@@Base+0xb18>
   14b48:	ldr	r0, [sp, #36]	; 0x24
   14b4c:	cmp	r0, #0
   14b50:	bne	14bf4 <close_stdout@@Base+0xbb8>
   14b54:	ldr	r1, [sp, #36]	; 0x24
   14b58:	ldr	r2, [sp, #52]	; 0x34
   14b5c:	eor	r3, r1, #1
   14b60:	cmp	r2, #0
   14b64:	moveq	r3, #0
   14b68:	andne	r3, r3, #1
   14b6c:	cmp	r3, #0
   14b70:	beq	14b9c <close_stdout@@Base+0xb60>
   14b74:	ldrb	r3, [r2]
   14b78:	cmp	r3, #0
   14b7c:	beq	14b9c <close_stdout@@Base+0xb60>
   14b80:	ldr	r1, [sp, #40]	; 0x28
   14b84:	cmp	sl, r9
   14b88:	strbhi	r3, [r1, r9]
   14b8c:	ldrb	r3, [r2, #1]!
   14b90:	add	r9, r9, #1
   14b94:	cmp	r3, #0
   14b98:	bne	14b84 <close_stdout@@Base+0xb48>
   14b9c:	cmp	r9, sl
   14ba0:	movcs	r0, r9
   14ba4:	ldrcc	r1, [sp, #40]	; 0x28
   14ba8:	movcc	r3, #0
   14bac:	movcc	r0, r9
   14bb0:	strbcc	r3, [r1, r9]
   14bb4:	b	14c30 <close_stdout@@Base+0xbf4>
   14bb8:	cmn	r8, #1
   14bbc:	beq	15284 <close_stdout@@Base+0x1248>
   14bc0:	subs	r3, r8, #1
   14bc4:	movne	r3, #1
   14bc8:	cmp	r3, #0
   14bcc:	bne	14aac <close_stdout@@Base+0xa70>
   14bd0:	cmp	fp, #0
   14bd4:	bne	14aac <close_stdout@@Base+0xa70>
   14bd8:	ldr	r3, [sp, #36]	; 0x24
   14bdc:	ldr	r0, [sp, #160]	; 0xa0
   14be0:	cmp	r0, #2
   14be4:	movne	r3, #0
   14be8:	andeq	r3, r3, #1
   14bec:	cmp	r3, #0
   14bf0:	beq	14aac <close_stdout@@Base+0xa70>
   14bf4:	ldr	r2, [sp, #164]	; 0xa4
   14bf8:	mov	ip, #0
   14bfc:	ldr	r0, [sp, #160]	; 0xa0
   14c00:	bic	r3, r2, #2
   14c04:	ldr	r1, [sp, #72]	; 0x48
   14c08:	ldr	r2, [sp, #68]	; 0x44
   14c0c:	stm	sp, {r0, r3}
   14c10:	mov	r3, r8
   14c14:	str	r1, [sp, #12]
   14c18:	mov	r1, sl
   14c1c:	str	r2, [sp, #16]
   14c20:	ldr	r0, [sp, #40]	; 0x28
   14c24:	ldr	r2, [sp, #32]
   14c28:	str	ip, [sp, #8]
   14c2c:	bl	146c4 <close_stdout@@Base+0x688>
   14c30:	ldr	r1, [sp, #56]	; 0x38
   14c34:	ldr	r2, [sp, #116]	; 0x74
   14c38:	ldr	r3, [r1]
   14c3c:	cmp	r2, r3
   14c40:	bne	15374 <close_stdout@@Base+0x1338>
   14c44:	add	sp, sp, #124	; 0x7c
   14c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c4c:	mov	r3, #114	; 0x72
   14c50:	ldr	r2, [sp, #36]	; 0x24
   14c54:	ldr	r0, [sp, #160]	; 0xa0
   14c58:	cmp	r0, #2
   14c5c:	movne	r2, #0
   14c60:	andeq	r2, r2, #1
   14c64:	cmp	r2, #0
   14c68:	bne	14bf4 <close_stdout@@Base+0xbb8>
   14c6c:	ldr	r1, [sp, #24]
   14c70:	cmp	r1, #0
   14c74:	beq	14aac <close_stdout@@Base+0xa70>
   14c78:	mov	r4, r3
   14c7c:	b	14ae4 <close_stdout@@Base+0xaa8>
   14c80:	mov	r3, #98	; 0x62
   14c84:	b	14c6c <close_stdout@@Base+0xc30>
   14c88:	mov	r3, #102	; 0x66
   14c8c:	b	14c6c <close_stdout@@Base+0xc30>
   14c90:	mov	r3, #118	; 0x76
   14c94:	b	14c6c <close_stdout@@Base+0xc30>
   14c98:	mov	r3, #97	; 0x61
   14c9c:	b	14c6c <close_stdout@@Base+0xc30>
   14ca0:	mov	r3, #110	; 0x6e
   14ca4:	b	14c50 <close_stdout@@Base+0xc14>
   14ca8:	mov	r3, #116	; 0x74
   14cac:	b	14c50 <close_stdout@@Base+0xc14>
   14cb0:	ldr	r2, [sp, #24]
   14cb4:	cmp	r2, #0
   14cb8:	beq	15260 <close_stdout@@Base+0x1224>
   14cbc:	ldr	r3, [sp, #36]	; 0x24
   14cc0:	cmp	r3, #0
   14cc4:	bne	14bf4 <close_stdout@@Base+0xbb8>
   14cc8:	cmp	r9, sl
   14ccc:	add	r2, r9, #1
   14cd0:	ldrcc	r0, [sp, #40]	; 0x28
   14cd4:	movcc	r3, #92	; 0x5c
   14cd8:	strbcc	r3, [r0, r9]
   14cdc:	add	r3, fp, #1
   14ce0:	cmp	r8, r3
   14ce4:	bls	14d24 <close_stdout@@Base+0xce8>
   14ce8:	ldr	r1, [sp, #32]
   14cec:	ldrb	r3, [r1, r3]
   14cf0:	sub	r3, r3, #48	; 0x30
   14cf4:	cmp	r3, #9
   14cf8:	bhi	14d24 <close_stdout@@Base+0xce8>
   14cfc:	cmp	sl, r2
   14d00:	ldrhi	r0, [sp, #40]	; 0x28
   14d04:	movhi	r3, #48	; 0x30
   14d08:	strbhi	r3, [r0, r2]
   14d0c:	add	r3, r9, #2
   14d10:	cmp	sl, r3
   14d14:	ldrhi	r1, [sp, #40]	; 0x28
   14d18:	movhi	r2, #48	; 0x30
   14d1c:	strbhi	r2, [r1, r3]
   14d20:	add	r2, r9, #3
   14d24:	mov	r9, r2
   14d28:	mov	r4, #48	; 0x30
   14d2c:	b	14ab8 <close_stdout@@Base+0xa7c>
   14d30:	ldr	r1, [sp, #76]	; 0x4c
   14d34:	cmp	r1, #0
   14d38:	beq	14d44 <close_stdout@@Base+0xd08>
   14d3c:	cmp	r7, #0
   14d40:	bne	14b04 <close_stdout@@Base+0xac8>
   14d44:	mov	r3, r4
   14d48:	b	14c50 <close_stdout@@Base+0xc14>
   14d4c:	ldr	r1, [sp, #160]	; 0xa0
   14d50:	cmp	r1, #2
   14d54:	bne	14aac <close_stdout@@Base+0xa70>
   14d58:	ldr	r2, [sp, #36]	; 0x24
   14d5c:	cmp	r2, #0
   14d60:	bne	14bf4 <close_stdout@@Base+0xbb8>
   14d64:	cmp	r9, sl
   14d68:	ldrcc	r0, [sp, #40]	; 0x28
   14d6c:	movcc	r3, #39	; 0x27
   14d70:	strbcc	r3, [r0, r9]
   14d74:	add	r3, r9, #1
   14d78:	cmp	sl, r3
   14d7c:	ldrhi	r1, [sp, #40]	; 0x28
   14d80:	movhi	r2, #92	; 0x5c
   14d84:	strbhi	r2, [r1, r3]
   14d88:	add	r3, r9, #2
   14d8c:	cmp	sl, r3
   14d90:	add	r9, r9, #3
   14d94:	ldrhi	r0, [sp, #40]	; 0x28
   14d98:	movhi	r2, #39	; 0x27
   14d9c:	strbhi	r2, [r0, r3]
   14da0:	b	14aac <close_stdout@@Base+0xa70>
   14da4:	ldr	r1, [sp, #64]	; 0x40
   14da8:	cmp	r1, #1
   14dac:	bne	150a4 <close_stdout@@Base+0x1068>
   14db0:	bl	112d8 <__ctype_b_loc@plt>
   14db4:	ldr	r2, [sp, #64]	; 0x40
   14db8:	sxth	r3, r4
   14dbc:	str	r2, [sp, #60]	; 0x3c
   14dc0:	lsl	r3, r3, #1
   14dc4:	ldr	r2, [r0]
   14dc8:	ldrh	r2, [r2, r3]
   14dcc:	eor	r2, r2, #16384	; 0x4000
   14dd0:	ubfx	r2, r2, #14, #1
   14dd4:	ldr	r1, [sp, #24]
   14dd8:	ands	r2, r2, r1
   14ddc:	beq	14aac <close_stdout@@Base+0xa70>
   14de0:	ldr	r3, [sp, #60]	; 0x3c
   14de4:	mov	r0, #92	; 0x5c
   14de8:	ldr	r7, [sp, #36]	; 0x24
   14dec:	add	r1, r3, fp
   14df0:	str	r8, [sp, #60]	; 0x3c
   14df4:	ldr	r3, [sp, #40]	; 0x28
   14df8:	b	14e5c <close_stdout@@Base+0xe20>
   14dfc:	cmp	r7, #0
   14e00:	bne	1529c <close_stdout@@Base+0x1260>
   14e04:	add	ip, r9, #1
   14e08:	cmp	r9, sl
   14e0c:	strbcc	r0, [r3, r9]
   14e10:	cmp	sl, ip
   14e14:	lsrhi	r8, r4, #6
   14e18:	addhi	r8, r8, #48	; 0x30
   14e1c:	strbhi	r8, [r3, ip]
   14e20:	add	ip, r9, #2
   14e24:	add	r9, r9, #3
   14e28:	cmp	sl, ip
   14e2c:	ubfxhi	r8, r4, #3, #3
   14e30:	and	r4, r4, #7
   14e34:	add	r4, r4, #48	; 0x30
   14e38:	addhi	r8, r8, #48	; 0x30
   14e3c:	strbhi	r8, [r3, ip]
   14e40:	add	fp, fp, #1
   14e44:	cmp	r1, fp
   14e48:	bls	14e88 <close_stdout@@Base+0xe4c>
   14e4c:	cmp	r9, sl
   14e50:	strbcc	r4, [r3, r9]
   14e54:	ldrb	r4, [r5, #1]!
   14e58:	add	r9, r9, #1
   14e5c:	cmp	r2, #0
   14e60:	bne	14dfc <close_stdout@@Base+0xdc0>
   14e64:	cmp	r6, #0
   14e68:	beq	14e40 <close_stdout@@Base+0xe04>
   14e6c:	add	fp, fp, #1
   14e70:	cmp	r9, sl
   14e74:	strbcc	r0, [r3, r9]
   14e78:	cmp	r1, fp
   14e7c:	add	r9, r9, #1
   14e80:	mov	r6, #0
   14e84:	bhi	14e4c <close_stdout@@Base+0xe10>
   14e88:	ldr	r8, [sp, #60]	; 0x3c
   14e8c:	b	14b08 <close_stdout@@Base+0xacc>
   14e90:	ldr	r3, [sp, #36]	; 0x24
   14e94:	cmp	r3, #0
   14e98:	bne	1539c <close_stdout@@Base+0x1360>
   14e9c:	cmp	sl, #0
   14ea0:	beq	152b4 <close_stdout@@Base+0x1278>
   14ea4:	ldr	r1, [sp, #40]	; 0x28
   14ea8:	mov	r0, #1
   14eac:	ldr	r2, [pc, #1296]	; 153c4 <close_stdout@@Base+0x1388>
   14eb0:	mov	r3, #34	; 0x22
   14eb4:	str	r0, [sp, #24]
   14eb8:	mov	r9, r0
   14ebc:	add	r2, pc, r2
   14ec0:	str	r0, [sp, #28]
   14ec4:	strb	r3, [r1]
   14ec8:	str	r2, [sp, #52]	; 0x34
   14ecc:	b	14778 <close_stdout@@Base+0x73c>
   14ed0:	ldr	r3, [pc, #1264]	; 153c8 <close_stdout@@Base+0x138c>
   14ed4:	mov	r2, #1
   14ed8:	mov	r0, #3
   14edc:	str	r2, [sp, #36]	; 0x24
   14ee0:	add	r3, pc, r3
   14ee4:	str	r2, [sp, #24]
   14ee8:	str	r3, [sp, #52]	; 0x34
   14eec:	mov	r9, #0
   14ef0:	str	r2, [sp, #28]
   14ef4:	str	r0, [sp, #160]	; 0xa0
   14ef8:	b	14778 <close_stdout@@Base+0x73c>
   14efc:	mov	r0, #0
   14f00:	mov	r1, #1
   14f04:	str	r0, [sp, #36]	; 0x24
   14f08:	mov	r9, r0
   14f0c:	str	r1, [sp, #24]
   14f10:	str	r0, [sp, #28]
   14f14:	str	r0, [sp, #52]	; 0x34
   14f18:	b	14778 <close_stdout@@Base+0x73c>
   14f1c:	ldr	r3, [sp, #160]	; 0xa0
   14f20:	cmp	r3, #8
   14f24:	beq	14f50 <close_stdout@@Base+0xf14>
   14f28:	ldr	r0, [pc, #1180]	; 153cc <close_stdout@@Base+0x1390>
   14f2c:	mov	r1, r3
   14f30:	add	r0, pc, r0
   14f34:	bl	14560 <close_stdout@@Base+0x524>
   14f38:	ldr	r1, [sp, #160]	; 0xa0
   14f3c:	str	r0, [sp, #72]	; 0x48
   14f40:	ldr	r0, [pc, #1160]	; 153d0 <close_stdout@@Base+0x1394>
   14f44:	add	r0, pc, r0
   14f48:	bl	14560 <close_stdout@@Base+0x524>
   14f4c:	str	r0, [sp, #68]	; 0x44
   14f50:	ldr	r0, [sp, #36]	; 0x24
   14f54:	cmp	r0, #0
   14f58:	movne	r9, #0
   14f5c:	bne	14f94 <close_stdout@@Base+0xf58>
   14f60:	ldr	r1, [sp, #72]	; 0x48
   14f64:	ldrb	r3, [r1]
   14f68:	cmp	r3, #0
   14f6c:	beq	1536c <close_stdout@@Base+0x1330>
   14f70:	mov	r2, r1
   14f74:	ldr	r1, [sp, #40]	; 0x28
   14f78:	mov	r9, r0
   14f7c:	cmp	r9, sl
   14f80:	strbcc	r3, [r1, r9]
   14f84:	ldrb	r3, [r2, #1]!
   14f88:	add	r9, r9, #1
   14f8c:	cmp	r3, #0
   14f90:	bne	14f7c <close_stdout@@Base+0xf40>
   14f94:	ldr	r0, [sp, #68]	; 0x44
   14f98:	str	r0, [sp, #52]	; 0x34
   14f9c:	bl	112fc <strlen@plt>
   14fa0:	mov	r2, #1
   14fa4:	str	r2, [sp, #24]
   14fa8:	str	r0, [sp, #28]
   14fac:	b	14778 <close_stdout@@Base+0x73c>
   14fb0:	ldr	r3, [pc, #1052]	; 153d4 <close_stdout@@Base+0x1398>
   14fb4:	mov	r2, #0
   14fb8:	mov	r1, #1
   14fbc:	mov	r0, #2
   14fc0:	add	r3, pc, r3
   14fc4:	str	r1, [sp, #36]	; 0x24
   14fc8:	str	r2, [sp, #24]
   14fcc:	mov	r9, r2
   14fd0:	str	r1, [sp, #28]
   14fd4:	str	r3, [sp, #52]	; 0x34
   14fd8:	str	r0, [sp, #160]	; 0xa0
   14fdc:	b	14778 <close_stdout@@Base+0x73c>
   14fe0:	ldr	r3, [sp, #36]	; 0x24
   14fe4:	cmp	r3, #0
   14fe8:	bne	15378 <close_stdout@@Base+0x133c>
   14fec:	cmp	sl, #0
   14ff0:	beq	152d4 <close_stdout@@Base+0x1298>
   14ff4:	ldr	r1, [sp, #40]	; 0x28
   14ff8:	mov	r3, #39	; 0x27
   14ffc:	ldr	r2, [sp, #36]	; 0x24
   15000:	mov	r0, #1
   15004:	mov	r9, r0
   15008:	str	r0, [sp, #28]
   1500c:	strb	r3, [r1]
   15010:	ldr	r3, [pc, #960]	; 153d8 <close_stdout@@Base+0x139c>
   15014:	str	r2, [sp, #24]
   15018:	add	r3, pc, r3
   1501c:	str	r3, [sp, #52]	; 0x34
   15020:	b	14778 <close_stdout@@Base+0x73c>
   15024:	ldr	r2, [sp, #28]
   15028:	cmp	r2, #1
   1502c:	add	r4, fp, r2
   15030:	movls	r3, #0
   15034:	movhi	r3, #1
   15038:	cmn	r8, #1
   1503c:	movne	r3, #0
   15040:	cmp	r3, #0
   15044:	beq	15054 <close_stdout@@Base+0x1018>
   15048:	ldr	r0, [sp, #32]
   1504c:	bl	112fc <strlen@plt>
   15050:	mov	r8, r0
   15054:	cmp	r8, r4
   15058:	ldrcc	r3, [sp, #32]
   1505c:	movcc	r6, #0
   15060:	addcc	r5, r3, fp
   15064:	bcc	147d4 <close_stdout@@Base+0x798>
   15068:	ldr	r0, [sp, #32]
   1506c:	ldr	r1, [sp, #52]	; 0x34
   15070:	add	r5, r0, fp
   15074:	ldr	r2, [sp, #28]
   15078:	mov	r0, r5
   1507c:	bl	111d0 <memcmp@plt>
   15080:	cmp	r0, #0
   15084:	bne	1509c <close_stdout@@Base+0x1060>
   15088:	ldr	r1, [sp, #36]	; 0x24
   1508c:	cmp	r1, #0
   15090:	bne	14bf4 <close_stdout@@Base+0xbb8>
   15094:	mov	r6, #1
   15098:	b	147d4 <close_stdout@@Base+0x798>
   1509c:	mov	r6, #0
   150a0:	b	147d4 <close_stdout@@Base+0x798>
   150a4:	add	r7, sp, #108	; 0x6c
   150a8:	cmn	r8, #1
   150ac:	mov	r3, #0
   150b0:	str	r3, [sp, #108]	; 0x6c
   150b4:	str	r3, [r7, #4]
   150b8:	beq	152a4 <close_stdout@@Base+0x1268>
   150bc:	mov	r1, #0
   150c0:	ldr	r0, [sp, #32]
   150c4:	mov	ip, #1
   150c8:	str	r9, [sp, #88]	; 0x58
   150cc:	str	r6, [sp, #96]	; 0x60
   150d0:	mov	r9, r1
   150d4:	str	r5, [sp, #100]	; 0x64
   150d8:	mov	r6, ip
   150dc:	mov	r5, r7
   150e0:	add	r3, sp, #104	; 0x68
   150e4:	sub	r0, r0, #1
   150e8:	str	r3, [sp, #80]	; 0x50
   150ec:	str	r0, [sp, #84]	; 0x54
   150f0:	str	r1, [sp, #60]	; 0x3c
   150f4:	str	r4, [sp, #92]	; 0x5c
   150f8:	ldr	r2, [sp, #32]
   150fc:	add	r7, r9, fp
   15100:	add	r0, sp, #104	; 0x68
   15104:	mov	r3, r5
   15108:	add	r4, r2, r7
   1510c:	rsb	r2, r7, r8
   15110:	mov	r1, r4
   15114:	bl	11254 <mbrtowc@plt>
   15118:	subs	r2, r0, #0
   1511c:	beq	15228 <close_stdout@@Base+0x11ec>
   15120:	cmn	r2, #1
   15124:	beq	15350 <close_stdout@@Base+0x1314>
   15128:	cmn	r2, #2
   1512c:	beq	152f4 <close_stdout@@Base+0x12b8>
   15130:	ldr	r3, [sp, #36]	; 0x24
   15134:	ldr	r0, [sp, #160]	; 0xa0
   15138:	cmp	r0, #2
   1513c:	movne	r3, #0
   15140:	andeq	r3, r3, #1
   15144:	cmp	r3, #0
   15148:	beq	15204 <close_stdout@@Base+0x11c8>
   1514c:	cmp	r2, #1
   15150:	beq	15204 <close_stdout@@Base+0x11c8>
   15154:	ldr	r1, [sp, #84]	; 0x54
   15158:	add	r3, r1, r2
   1515c:	add	r7, r3, r7
   15160:	ldrb	r3, [r4, #1]!
   15164:	sub	r3, r3, #91	; 0x5b
   15168:	cmp	r3, #33	; 0x21
   1516c:	addls	pc, pc, r3, lsl #2
   15170:	b	151fc <close_stdout@@Base+0x11c0>
   15174:	b	14bf4 <close_stdout@@Base+0xbb8>
   15178:	b	14bf4 <close_stdout@@Base+0xbb8>
   1517c:	b	151fc <close_stdout@@Base+0x11c0>
   15180:	b	14bf4 <close_stdout@@Base+0xbb8>
   15184:	b	151fc <close_stdout@@Base+0x11c0>
   15188:	b	14bf4 <close_stdout@@Base+0xbb8>
   1518c:	b	151fc <close_stdout@@Base+0x11c0>
   15190:	b	151fc <close_stdout@@Base+0x11c0>
   15194:	b	151fc <close_stdout@@Base+0x11c0>
   15198:	b	151fc <close_stdout@@Base+0x11c0>
   1519c:	b	151fc <close_stdout@@Base+0x11c0>
   151a0:	b	151fc <close_stdout@@Base+0x11c0>
   151a4:	b	151fc <close_stdout@@Base+0x11c0>
   151a8:	b	151fc <close_stdout@@Base+0x11c0>
   151ac:	b	151fc <close_stdout@@Base+0x11c0>
   151b0:	b	151fc <close_stdout@@Base+0x11c0>
   151b4:	b	151fc <close_stdout@@Base+0x11c0>
   151b8:	b	151fc <close_stdout@@Base+0x11c0>
   151bc:	b	151fc <close_stdout@@Base+0x11c0>
   151c0:	b	151fc <close_stdout@@Base+0x11c0>
   151c4:	b	151fc <close_stdout@@Base+0x11c0>
   151c8:	b	151fc <close_stdout@@Base+0x11c0>
   151cc:	b	151fc <close_stdout@@Base+0x11c0>
   151d0:	b	151fc <close_stdout@@Base+0x11c0>
   151d4:	b	151fc <close_stdout@@Base+0x11c0>
   151d8:	b	151fc <close_stdout@@Base+0x11c0>
   151dc:	b	151fc <close_stdout@@Base+0x11c0>
   151e0:	b	151fc <close_stdout@@Base+0x11c0>
   151e4:	b	151fc <close_stdout@@Base+0x11c0>
   151e8:	b	151fc <close_stdout@@Base+0x11c0>
   151ec:	b	151fc <close_stdout@@Base+0x11c0>
   151f0:	b	151fc <close_stdout@@Base+0x11c0>
   151f4:	b	151fc <close_stdout@@Base+0x11c0>
   151f8:	b	14bf4 <close_stdout@@Base+0xbb8>
   151fc:	cmp	r4, r7
   15200:	bne	15160 <close_stdout@@Base+0x1124>
   15204:	ldr	r0, [sp, #104]	; 0x68
   15208:	add	r9, r9, r2
   1520c:	bl	1120c <iswprint@plt>
   15210:	cmp	r0, #0
   15214:	mov	r0, r5
   15218:	moveq	r6, #0
   1521c:	bl	111b8 <mbsinit@plt>
   15220:	cmp	r0, #0
   15224:	beq	150f8 <close_stdout@@Base+0x10bc>
   15228:	mov	ip, r6
   1522c:	eor	r2, ip, #1
   15230:	str	r9, [sp, #60]	; 0x3c
   15234:	ldr	r4, [sp, #92]	; 0x5c
   15238:	uxtb	r2, r2
   1523c:	ldr	r9, [sp, #88]	; 0x58
   15240:	ldr	r6, [sp, #96]	; 0x60
   15244:	ldr	r5, [sp, #100]	; 0x64
   15248:	ldr	r3, [sp, #60]	; 0x3c
   1524c:	cmp	r3, #1
   15250:	bls	14dd4 <close_stdout@@Base+0xd98>
   15254:	ldr	r0, [sp, #24]
   15258:	and	r2, r2, r0
   1525c:	b	14de0 <close_stdout@@Base+0xda4>
   15260:	ldr	r2, [sp, #164]	; 0xa4
   15264:	tst	r2, #1
   15268:	addne	fp, fp, #1
   1526c:	bne	1479c <close_stdout@@Base+0x760>
   15270:	b	14aac <close_stdout@@Base+0xa70>
   15274:	ldr	r0, [sp, #36]	; 0x24
   15278:	cmp	r0, #0
   1527c:	beq	14aac <close_stdout@@Base+0xa70>
   15280:	b	14bf4 <close_stdout@@Base+0xbb8>
   15284:	ldr	r2, [sp, #32]
   15288:	ldrb	r3, [r2, #1]
   1528c:	adds	r3, r3, #0
   15290:	movne	r3, #1
   15294:	b	14bc8 <close_stdout@@Base+0xb8c>
   15298:	bl	1141c <abort@plt>
   1529c:	ldr	r8, [sp, #60]	; 0x3c
   152a0:	b	14bf4 <close_stdout@@Base+0xbb8>
   152a4:	ldr	r0, [sp, #32]
   152a8:	bl	112fc <strlen@plt>
   152ac:	mov	r8, r0
   152b0:	b	150bc <close_stdout@@Base+0x1080>
   152b4:	ldr	r2, [pc, #288]	; 153dc <close_stdout@@Base+0x13a0>
   152b8:	mov	r1, #1
   152bc:	mov	r9, r1
   152c0:	str	r1, [sp, #24]
   152c4:	add	r2, pc, r2
   152c8:	str	r1, [sp, #28]
   152cc:	str	r2, [sp, #52]	; 0x34
   152d0:	b	14778 <close_stdout@@Base+0x73c>
   152d4:	ldr	r2, [pc, #260]	; 153e0 <close_stdout@@Base+0x13a4>
   152d8:	mov	r3, #1
   152dc:	mov	r9, r3
   152e0:	str	r3, [sp, #28]
   152e4:	add	r2, pc, r2
   152e8:	str	sl, [sp, #24]
   152ec:	str	r2, [sp, #52]	; 0x34
   152f0:	b	14778 <close_stdout@@Base+0x73c>
   152f4:	cmp	r8, r7
   152f8:	str	r9, [sp, #60]	; 0x3c
   152fc:	mov	ip, r4
   15300:	ldr	r6, [sp, #96]	; 0x60
   15304:	ldr	r9, [sp, #88]	; 0x58
   15308:	ldr	r4, [sp, #92]	; 0x5c
   1530c:	ldr	r5, [sp, #100]	; 0x64
   15310:	bls	15348 <close_stdout@@Base+0x130c>
   15314:	ldrb	r3, [ip]
   15318:	cmp	r3, #0
   1531c:	beq	15348 <close_stdout@@Base+0x130c>
   15320:	ldr	r3, [sp, #60]	; 0x3c
   15324:	b	15334 <close_stdout@@Base+0x12f8>
   15328:	ldrb	r2, [r5, r3]
   1532c:	cmp	r2, #0
   15330:	beq	15344 <close_stdout@@Base+0x1308>
   15334:	add	r3, r3, #1
   15338:	add	r2, fp, r3
   1533c:	cmp	r8, r2
   15340:	bhi	15328 <close_stdout@@Base+0x12ec>
   15344:	str	r3, [sp, #60]	; 0x3c
   15348:	mov	r2, #1
   1534c:	b	15248 <close_stdout@@Base+0x120c>
   15350:	str	r9, [sp, #60]	; 0x3c
   15354:	mov	r2, #1
   15358:	ldr	r4, [sp, #92]	; 0x5c
   1535c:	ldr	r6, [sp, #96]	; 0x60
   15360:	ldr	r9, [sp, #88]	; 0x58
   15364:	ldr	r5, [sp, #100]	; 0x64
   15368:	b	15248 <close_stdout@@Base+0x120c>
   1536c:	ldr	r9, [sp, #36]	; 0x24
   15370:	b	14f94 <close_stdout@@Base+0xf58>
   15374:	bl	111e8 <__stack_chk_fail@plt>
   15378:	ldr	r1, [pc, #100]	; 153e4 <close_stdout@@Base+0x13a8>
   1537c:	mov	r3, #0
   15380:	mov	r0, #1
   15384:	str	r3, [sp, #24]
   15388:	add	r1, pc, r1
   1538c:	str	r0, [sp, #28]
   15390:	mov	r9, r3
   15394:	str	r1, [sp, #52]	; 0x34
   15398:	b	14778 <close_stdout@@Base+0x73c>
   1539c:	ldr	r0, [pc, #68]	; 153e8 <close_stdout@@Base+0x13ac>
   153a0:	mov	r3, #1
   153a4:	mov	r9, #0
   153a8:	str	r3, [sp, #24]
   153ac:	add	r0, pc, r0
   153b0:	str	r3, [sp, #28]
   153b4:	str	r0, [sp, #52]	; 0x34
   153b8:	b	14778 <close_stdout@@Base+0x73c>
   153bc:	andeq	r4, r1, r8, lsl r9
   153c0:	andeq	r0, r0, r8, lsl r1
   153c4:	andeq	r3, r0, r8, lsl #10
   153c8:	andeq	r3, r0, r4, ror #9
   153cc:	andeq	r3, r0, r0, lsr #9
   153d0:	andeq	r3, r0, ip, ror r4
   153d4:	andeq	r3, r0, r0, lsl #8
   153d8:	andeq	r3, r0, r8, lsr #7
   153dc:	andeq	r3, r0, r0, lsl #2
   153e0:	ldrdeq	r3, [r0], -ip
   153e4:	andeq	r3, r0, r8, lsr r0
   153e8:	andeq	r3, r0, r8, lsl r0
   153ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153f0:	sub	sp, sp, #44	; 0x2c
   153f4:	mov	r6, r0
   153f8:	mov	r9, r1
   153fc:	mov	sl, r2
   15400:	mov	r4, r3
   15404:	bl	1132c <__errno_location@plt>
   15408:	ldr	fp, [pc, #412]	; 155ac <close_stdout@@Base+0x1570>
   1540c:	cmp	r6, #0
   15410:	add	fp, pc, fp
   15414:	ldr	r5, [fp]
   15418:	ldr	r1, [r0]
   1541c:	mov	r8, r0
   15420:	str	r1, [sp, #36]	; 0x24
   15424:	blt	155a4 <close_stdout@@Base+0x1568>
   15428:	ldr	r3, [pc, #384]	; 155b0 <close_stdout@@Base+0x1574>
   1542c:	add	r3, pc, r3
   15430:	ldr	r3, [r3]
   15434:	cmp	r6, r3
   15438:	bcc	1548c <close_stdout@@Base+0x1450>
   1543c:	add	r7, r6, #1
   15440:	cmn	r7, #-536870911	; 0xe0000001
   15444:	bhi	155a8 <close_stdout@@Base+0x156c>
   15448:	add	r3, fp, #4
   1544c:	cmp	r5, r3
   15450:	beq	1557c <close_stdout@@Base+0x1540>
   15454:	mov	r0, r5
   15458:	lsl	r1, r7, #3
   1545c:	bl	16290 <close_stdout@@Base+0x2254>
   15460:	mov	r5, r0
   15464:	str	r0, [fp]
   15468:	ldr	fp, [pc, #324]	; 155b4 <close_stdout@@Base+0x1578>
   1546c:	mov	r1, #0
   15470:	add	fp, pc, fp
   15474:	ldr	r0, [fp]
   15478:	rsb	r2, r0, r7
   1547c:	add	r0, r5, r0, lsl #3
   15480:	lsl	r2, r2, #3
   15484:	bl	11344 <memset@plt>
   15488:	str	r7, [fp]
   1548c:	add	r2, r4, #8
   15490:	str	r2, [sp, #32]
   15494:	ldr	r1, [r4]
   15498:	add	fp, r5, r6, lsl #3
   1549c:	ldr	lr, [sp, #32]
   154a0:	mov	r2, r9
   154a4:	ldr	r3, [r4, #4]
   154a8:	ldr	ip, [r5, r6, lsl #3]
   154ac:	ldr	r7, [fp, #4]
   154b0:	orr	r3, r3, #1
   154b4:	str	r1, [sp]
   154b8:	str	r3, [sp, #4]
   154bc:	mov	r1, ip
   154c0:	str	lr, [sp, #8]
   154c4:	mov	r0, r7
   154c8:	ldr	lr, [r4, #40]	; 0x28
   154cc:	str	r3, [sp, #28]
   154d0:	mov	r3, sl
   154d4:	str	lr, [sp, #12]
   154d8:	ldr	lr, [r4, #44]	; 0x2c
   154dc:	str	ip, [sp, #24]
   154e0:	str	lr, [sp, #16]
   154e4:	bl	146c4 <close_stdout@@Base+0x688>
   154e8:	ldr	ip, [sp, #24]
   154ec:	cmp	ip, r0
   154f0:	bhi	15568 <close_stdout@@Base+0x152c>
   154f4:	ldr	r3, [pc, #188]	; 155b8 <close_stdout@@Base+0x157c>
   154f8:	add	r1, r0, #1
   154fc:	str	r1, [r5, r6, lsl #3]
   15500:	add	r3, pc, r3
   15504:	cmp	r7, r3
   15508:	beq	1551c <close_stdout@@Base+0x14e0>
   1550c:	mov	r0, r7
   15510:	str	r1, [sp, #24]
   15514:	bl	11188 <free@plt>
   15518:	ldr	r1, [sp, #24]
   1551c:	mov	r0, r1
   15520:	str	r1, [sp, #24]
   15524:	bl	16238 <close_stdout@@Base+0x21fc>
   15528:	ldr	r3, [sp, #28]
   1552c:	ldr	lr, [sp, #32]
   15530:	mov	r2, r9
   15534:	str	r0, [fp, #4]
   15538:	mov	r7, r0
   1553c:	ldr	ip, [r4]
   15540:	str	r3, [sp, #4]
   15544:	mov	r3, sl
   15548:	str	lr, [sp, #8]
   1554c:	str	ip, [sp]
   15550:	ldr	ip, [r4, #40]	; 0x28
   15554:	ldr	r1, [sp, #24]
   15558:	str	ip, [sp, #12]
   1555c:	ldr	ip, [r4, #44]	; 0x2c
   15560:	str	ip, [sp, #16]
   15564:	bl	146c4 <close_stdout@@Base+0x688>
   15568:	ldr	r1, [sp, #36]	; 0x24
   1556c:	mov	r0, r7
   15570:	str	r1, [r8]
   15574:	add	sp, sp, #44	; 0x2c
   15578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1557c:	lsl	r1, r7, #3
   15580:	mov	r0, #0
   15584:	str	r3, [sp, #24]
   15588:	bl	16290 <close_stdout@@Base+0x2254>
   1558c:	ldr	r3, [sp, #24]
   15590:	mov	r5, r0
   15594:	ldm	r3, {r0, r1}
   15598:	str	r5, [fp]
   1559c:	stm	r5, {r0, r1}
   155a0:	b	15468 <close_stdout@@Base+0x142c>
   155a4:	bl	1141c <abort@plt>
   155a8:	bl	1644c <close_stdout@@Base+0x2410>
   155ac:	andeq	r3, r1, ip, lsl #27
   155b0:	andeq	r3, r1, ip, lsr sp
   155b4:	strdeq	r3, [r1], -r8
   155b8:	andeq	r3, r1, r0, asr #26
   155bc:	push	{r4, r5, r6, lr}
   155c0:	mov	r5, r0
   155c4:	bl	1132c <__errno_location@plt>
   155c8:	cmp	r5, #0
   155cc:	mov	r1, #48	; 0x30
   155d0:	mov	r4, r0
   155d4:	ldr	r0, [pc, #24]	; 155f4 <close_stdout@@Base+0x15b8>
   155d8:	ldr	r6, [r4]
   155dc:	add	r0, pc, r0
   155e0:	add	r0, r0, #256	; 0x100
   155e4:	movne	r0, r5
   155e8:	bl	1640c <close_stdout@@Base+0x23d0>
   155ec:	str	r6, [r4]
   155f0:	pop	{r4, r5, r6, pc}
   155f4:	andeq	r3, r1, r4, ror #24
   155f8:	cmp	r0, #0
   155fc:	beq	15608 <close_stdout@@Base+0x15cc>
   15600:	ldr	r0, [r0]
   15604:	bx	lr
   15608:	ldr	r0, [pc, #12]	; 1561c <close_stdout@@Base+0x15e0>
   1560c:	add	r0, pc, r0
   15610:	add	r0, r0, #256	; 0x100
   15614:	ldr	r0, [r0]
   15618:	bx	lr
   1561c:	andeq	r3, r1, r4, lsr ip
   15620:	cmp	r0, #0
   15624:	beq	15630 <close_stdout@@Base+0x15f4>
   15628:	str	r1, [r0]
   1562c:	bx	lr
   15630:	ldr	r0, [pc, #12]	; 15644 <close_stdout@@Base+0x1608>
   15634:	add	r0, pc, r0
   15638:	add	r0, r0, #256	; 0x100
   1563c:	str	r1, [r0]
   15640:	bx	lr
   15644:	andeq	r3, r1, ip, lsl #24
   15648:	cmp	r0, #0
   1564c:	movne	r3, r0
   15650:	beq	15680 <close_stdout@@Base+0x1644>
   15654:	lsr	ip, r1, #5
   15658:	and	r1, r1, #31
   1565c:	add	r3, r3, ip, lsl #2
   15660:	ldr	ip, [r3, #8]
   15664:	lsr	r0, ip, r1
   15668:	eor	r2, r0, r2
   1566c:	and	r0, r0, #1
   15670:	and	r2, r2, #1
   15674:	eor	ip, ip, r2, lsl r1
   15678:	str	ip, [r3, #8]
   1567c:	bx	lr
   15680:	ldr	r3, [pc, #8]	; 15690 <close_stdout@@Base+0x1654>
   15684:	add	r3, pc, r3
   15688:	add	r3, r3, #256	; 0x100
   1568c:	b	15654 <close_stdout@@Base+0x1618>
   15690:			; <UNDEFINED> instruction: 0x00013bbc
   15694:	subs	r3, r0, #0
   15698:	beq	156a8 <close_stdout@@Base+0x166c>
   1569c:	ldr	r0, [r3, #4]
   156a0:	str	r1, [r3, #4]
   156a4:	bx	lr
   156a8:	ldr	r3, [pc, #8]	; 156b8 <close_stdout@@Base+0x167c>
   156ac:	add	r3, pc, r3
   156b0:	add	r3, r3, #256	; 0x100
   156b4:	b	1569c <close_stdout@@Base+0x1660>
   156b8:	muleq	r1, r4, fp
   156bc:	cmp	r0, #0
   156c0:	push	{r3, lr}
   156c4:	beq	156e8 <close_stdout@@Base+0x16ac>
   156c8:	cmp	r2, #0
   156cc:	cmpne	r1, #0
   156d0:	mov	r3, #8
   156d4:	strne	r1, [r0, #40]	; 0x28
   156d8:	str	r3, [r0]
   156dc:	strne	r2, [r0, #44]	; 0x2c
   156e0:	popne	{r3, pc}
   156e4:	bl	1141c <abort@plt>
   156e8:	ldr	r0, [pc, #8]	; 156f8 <close_stdout@@Base+0x16bc>
   156ec:	add	r0, pc, r0
   156f0:	add	r0, r0, #256	; 0x100
   156f4:	b	156c8 <close_stdout@@Base+0x168c>
   156f8:	andeq	r3, r1, r4, asr fp
   156fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15700:	sub	sp, sp, #24
   15704:	mov	r7, r0
   15708:	mov	sl, r1
   1570c:	ldr	r4, [sp, #56]	; 0x38
   15710:	mov	r9, r2
   15714:	mov	r8, r3
   15718:	cmp	r4, #0
   1571c:	beq	15770 <close_stdout@@Base+0x1734>
   15720:	bl	1132c <__errno_location@plt>
   15724:	ldr	r3, [r4]
   15728:	add	lr, r4, #8
   1572c:	mov	r1, sl
   15730:	mov	r2, r9
   15734:	ldr	r6, [r0]
   15738:	mov	r5, r0
   1573c:	str	r3, [sp]
   15740:	mov	r0, r7
   15744:	ldr	ip, [r4, #4]
   15748:	mov	r3, r8
   1574c:	stmib	sp, {ip, lr}
   15750:	ldr	ip, [r4, #40]	; 0x28
   15754:	str	ip, [sp, #12]
   15758:	ldr	ip, [r4, #44]	; 0x2c
   1575c:	str	ip, [sp, #16]
   15760:	bl	146c4 <close_stdout@@Base+0x688>
   15764:	str	r6, [r5]
   15768:	add	sp, sp, #24
   1576c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15770:	ldr	r4, [pc, #8]	; 15780 <close_stdout@@Base+0x1744>
   15774:	add	r4, pc, r4
   15778:	add	r4, r4, #256	; 0x100
   1577c:	b	15720 <close_stdout@@Base+0x16e4>
   15780:	andeq	r3, r1, ip, asr #21
   15784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15788:	subs	r4, r3, #0
   1578c:	sub	sp, sp, #36	; 0x24
   15790:	mov	r7, r0
   15794:	mov	r6, r1
   15798:	mov	r5, r2
   1579c:	beq	15858 <close_stdout@@Base+0x181c>
   157a0:	bl	1132c <__errno_location@plt>
   157a4:	ldr	r3, [r4]
   157a8:	ldr	sl, [r4, #4]
   157ac:	add	r9, r4, #8
   157b0:	mov	r8, r0
   157b4:	mov	r0, #0
   157b8:	ldr	r2, [r8]
   157bc:	cmp	r5, r0
   157c0:	orreq	sl, sl, #1
   157c4:	str	r9, [sp, #8]
   157c8:	mov	r1, r0
   157cc:	stm	sp, {r3, sl}
   157d0:	mov	r3, r6
   157d4:	ldr	ip, [r4, #40]	; 0x28
   157d8:	str	r2, [sp, #28]
   157dc:	mov	r2, r7
   157e0:	str	ip, [sp, #12]
   157e4:	ldr	ip, [r4, #44]	; 0x2c
   157e8:	str	ip, [sp, #16]
   157ec:	bl	146c4 <close_stdout@@Base+0x688>
   157f0:	add	r1, r0, #1
   157f4:	mov	fp, r0
   157f8:	str	r1, [sp, #24]
   157fc:	mov	r0, r1
   15800:	bl	16238 <close_stdout@@Base+0x21fc>
   15804:	ldr	lr, [r4]
   15808:	str	sl, [sp, #4]
   1580c:	mov	r3, r6
   15810:	str	r9, [sp, #8]
   15814:	mov	r2, r7
   15818:	str	lr, [sp]
   1581c:	ldr	lr, [r4, #40]	; 0x28
   15820:	ldr	r1, [sp, #24]
   15824:	str	lr, [sp, #12]
   15828:	ldr	lr, [r4, #44]	; 0x2c
   1582c:	str	lr, [sp, #16]
   15830:	str	r0, [sp, #24]
   15834:	bl	146c4 <close_stdout@@Base+0x688>
   15838:	ldr	r3, [sp, #28]
   1583c:	cmp	r5, #0
   15840:	str	r3, [r8]
   15844:	ldr	ip, [sp, #24]
   15848:	strne	fp, [r5]
   1584c:	mov	r0, ip
   15850:	add	sp, sp, #36	; 0x24
   15854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15858:	ldr	r4, [pc, #8]	; 15868 <close_stdout@@Base+0x182c>
   1585c:	add	r4, pc, r4
   15860:	add	r4, r4, #256	; 0x100
   15864:	b	157a0 <close_stdout@@Base+0x1764>
   15868:	andeq	r3, r1, r4, ror #19
   1586c:	mov	r3, r2
   15870:	mov	r2, #0
   15874:	b	15784 <close_stdout@@Base+0x1748>
   15878:	ldr	r2, [pc, #152]	; 15918 <close_stdout@@Base+0x18dc>
   1587c:	push	{r3, r4, r5, r6, r7, lr}
   15880:	add	r2, pc, r2
   15884:	ldr	r3, [pc, #144]	; 1591c <close_stdout@@Base+0x18e0>
   15888:	ldr	r6, [r2]
   1588c:	add	r3, pc, r3
   15890:	cmp	r6, #1
   15894:	ldr	r7, [r3]
   15898:	movhi	r4, #1
   1589c:	movhi	r5, r7
   158a0:	bls	158bc <close_stdout@@Base+0x1880>
   158a4:	ldr	r0, [r5, #12]
   158a8:	add	r4, r4, #1
   158ac:	bl	11188 <free@plt>
   158b0:	cmp	r4, r6
   158b4:	add	r5, r5, #8
   158b8:	bne	158a4 <close_stdout@@Base+0x1868>
   158bc:	ldr	r4, [pc, #92]	; 15920 <close_stdout@@Base+0x18e4>
   158c0:	ldr	r0, [r7, #4]
   158c4:	add	r4, pc, r4
   158c8:	cmp	r0, r4
   158cc:	beq	158e4 <close_stdout@@Base+0x18a8>
   158d0:	bl	11188 <free@plt>
   158d4:	ldr	r3, [pc, #72]	; 15924 <close_stdout@@Base+0x18e8>
   158d8:	mov	r2, #256	; 0x100
   158dc:	add	r3, pc, r3
   158e0:	stmib	r3, {r2, r4}
   158e4:	ldr	r4, [pc, #60]	; 15928 <close_stdout@@Base+0x18ec>
   158e8:	add	r4, pc, r4
   158ec:	add	r5, r4, #4
   158f0:	cmp	r7, r5
   158f4:	beq	15904 <close_stdout@@Base+0x18c8>
   158f8:	mov	r0, r7
   158fc:	bl	11188 <free@plt>
   15900:	str	r5, [r4]
   15904:	ldr	r3, [pc, #32]	; 1592c <close_stdout@@Base+0x18f0>
   15908:	mov	r2, #1
   1590c:	add	r3, pc, r3
   15910:	str	r2, [r3]
   15914:	pop	{r3, r4, r5, r6, r7, pc}
   15918:	andeq	r3, r1, r8, ror #17
   1591c:	andeq	r3, r1, r0, lsl r9
   15920:	andeq	r3, r1, ip, ror r9
   15924:	andeq	r3, r1, r0, asr #17
   15928:			; <UNDEFINED> instruction: 0x000138b4
   1592c:	andeq	r3, r1, ip, asr r8
   15930:	ldr	r3, [pc, #12]	; 15944 <close_stdout@@Base+0x1908>
   15934:	mvn	r2, #0
   15938:	add	r3, pc, r3
   1593c:	add	r3, r3, #256	; 0x100
   15940:	b	153ec <close_stdout@@Base+0x13b0>
   15944:	andeq	r3, r1, r8, lsl #18
   15948:	ldr	r3, [pc, #8]	; 15958 <close_stdout@@Base+0x191c>
   1594c:	add	r3, pc, r3
   15950:	add	r3, r3, #256	; 0x100
   15954:	b	153ec <close_stdout@@Base+0x13b0>
   15958:	strdeq	r3, [r1], -r4
   1595c:	mov	r1, r0
   15960:	mov	r0, #0
   15964:	b	15930 <close_stdout@@Base+0x18f4>
   15968:	mov	r2, r1
   1596c:	mov	r1, r0
   15970:	mov	r0, #0
   15974:	b	15948 <close_stdout@@Base+0x190c>
   15978:	ldr	r3, [pc, #92]	; 159dc <close_stdout@@Base+0x19a0>
   1597c:	ldr	ip, [pc, #92]	; 159e0 <close_stdout@@Base+0x19a4>
   15980:	add	r3, pc, r3
   15984:	push	{r4, r5, r6, r7, lr}
   15988:	sub	sp, sp, #60	; 0x3c
   1598c:	ldr	r4, [r3, ip]
   15990:	add	r5, sp, #4
   15994:	mov	r7, r2
   15998:	mov	r6, r0
   1599c:	mov	r0, r5
   159a0:	ldr	r3, [r4]
   159a4:	str	r3, [sp, #52]	; 0x34
   159a8:	bl	1450c <close_stdout@@Base+0x4d0>
   159ac:	mov	r3, r5
   159b0:	mvn	r2, #0
   159b4:	mov	r0, r6
   159b8:	mov	r1, r7
   159bc:	bl	153ec <close_stdout@@Base+0x13b0>
   159c0:	ldr	r2, [sp, #52]	; 0x34
   159c4:	ldr	r3, [r4]
   159c8:	cmp	r2, r3
   159cc:	bne	159d8 <close_stdout@@Base+0x199c>
   159d0:	add	sp, sp, #60	; 0x3c
   159d4:	pop	{r4, r5, r6, r7, pc}
   159d8:	bl	111e8 <__stack_chk_fail@plt>
   159dc:	andeq	r3, r1, r8, ror r6
   159e0:	andeq	r0, r0, r8, lsl r1
   159e4:	ldr	ip, [pc, #96]	; 15a4c <close_stdout@@Base+0x1a10>
   159e8:	push	{r4, r5, r6, r7, r8, lr}
   159ec:	add	ip, pc, ip
   159f0:	ldr	lr, [pc, #88]	; 15a50 <close_stdout@@Base+0x1a14>
   159f4:	sub	sp, sp, #56	; 0x38
   159f8:	mov	r8, r3
   159fc:	add	r5, sp, #4
   15a00:	mov	r7, r2
   15a04:	mov	r6, r0
   15a08:	ldr	r4, [ip, lr]
   15a0c:	mov	r0, r5
   15a10:	ldr	r3, [r4]
   15a14:	str	r3, [sp, #52]	; 0x34
   15a18:	bl	1450c <close_stdout@@Base+0x4d0>
   15a1c:	mov	r2, r8
   15a20:	mov	r3, r5
   15a24:	mov	r0, r6
   15a28:	mov	r1, r7
   15a2c:	bl	153ec <close_stdout@@Base+0x13b0>
   15a30:	ldr	r2, [sp, #52]	; 0x34
   15a34:	ldr	r3, [r4]
   15a38:	cmp	r2, r3
   15a3c:	bne	15a48 <close_stdout@@Base+0x1a0c>
   15a40:	add	sp, sp, #56	; 0x38
   15a44:	pop	{r4, r5, r6, r7, r8, pc}
   15a48:	bl	111e8 <__stack_chk_fail@plt>
   15a4c:	andeq	r3, r1, ip, lsl #12
   15a50:	andeq	r0, r0, r8, lsl r1
   15a54:	mov	r2, r1
   15a58:	mov	r1, r0
   15a5c:	mov	r0, #0
   15a60:	b	15978 <close_stdout@@Base+0x193c>
   15a64:	mov	ip, r1
   15a68:	mov	r3, r2
   15a6c:	mov	r1, r0
   15a70:	mov	r2, ip
   15a74:	mov	r0, #0
   15a78:	b	159e4 <close_stdout@@Base+0x19a8>
   15a7c:	push	{r4, r5, r6, r7, r8, lr}
   15a80:	mov	r5, r2
   15a84:	ldr	lr, [pc, #136]	; 15b14 <close_stdout@@Base+0x1ad8>
   15a88:	mov	r7, r0
   15a8c:	mov	r6, r1
   15a90:	ldr	r4, [pc, #128]	; 15b18 <close_stdout@@Base+0x1adc>
   15a94:	add	lr, pc, lr
   15a98:	sub	sp, sp, #56	; 0x38
   15a9c:	add	lr, lr, #256	; 0x100
   15aa0:	ldr	r8, [pc, #116]	; 15b1c <close_stdout@@Base+0x1ae0>
   15aa4:	add	r4, pc, r4
   15aa8:	add	ip, sp, #4
   15aac:	ldm	lr!, {r0, r1, r2, r3}
   15ab0:	ldr	r4, [r4, r8]
   15ab4:	stmia	ip!, {r0, r1, r2, r3}
   15ab8:	ldm	lr!, {r0, r1, r2, r3}
   15abc:	ldr	r8, [r4]
   15ac0:	stmia	ip!, {r0, r1, r2, r3}
   15ac4:	ldm	lr, {r0, r1, r2, r3}
   15ac8:	str	r8, [sp, #52]	; 0x34
   15acc:	stm	ip, {r0, r1, r2, r3}
   15ad0:	mov	r1, r5
   15ad4:	add	r5, sp, #4
   15ad8:	mov	r2, #1
   15adc:	mov	r0, r5
   15ae0:	bl	15648 <close_stdout@@Base+0x160c>
   15ae4:	mov	r2, r6
   15ae8:	mov	r3, r5
   15aec:	mov	r1, r7
   15af0:	mov	r0, #0
   15af4:	bl	153ec <close_stdout@@Base+0x13b0>
   15af8:	ldr	r2, [sp, #52]	; 0x34
   15afc:	ldr	r3, [r4]
   15b00:	cmp	r2, r3
   15b04:	bne	15b10 <close_stdout@@Base+0x1ad4>
   15b08:	add	sp, sp, #56	; 0x38
   15b0c:	pop	{r4, r5, r6, r7, r8, pc}
   15b10:	bl	111e8 <__stack_chk_fail@plt>
   15b14:	andeq	r3, r1, ip, lsr #15
   15b18:	andeq	r3, r1, r4, asr r5
   15b1c:	andeq	r0, r0, r8, lsl r1
   15b20:	mov	r2, r1
   15b24:	mvn	r1, #0
   15b28:	b	15a7c <close_stdout@@Base+0x1a40>
   15b2c:	mov	r1, #58	; 0x3a
   15b30:	b	15b20 <close_stdout@@Base+0x1ae4>
   15b34:	mov	r2, #58	; 0x3a
   15b38:	b	15a7c <close_stdout@@Base+0x1a40>
   15b3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b40:	mov	r5, r2
   15b44:	ldr	lr, [pc, #144]	; 15bdc <close_stdout@@Base+0x1ba0>
   15b48:	mov	r8, r0
   15b4c:	mov	r9, r1
   15b50:	mov	r7, r3
   15b54:	add	lr, pc, lr
   15b58:	ldr	r4, [pc, #128]	; 15be0 <close_stdout@@Base+0x1ba4>
   15b5c:	add	lr, lr, #256	; 0x100
   15b60:	sub	sp, sp, #56	; 0x38
   15b64:	ldr	sl, [pc, #120]	; 15be4 <close_stdout@@Base+0x1ba8>
   15b68:	add	r4, pc, r4
   15b6c:	ldm	lr!, {r0, r1, r2, r3}
   15b70:	add	ip, sp, #4
   15b74:	ldr	r4, [r4, sl]
   15b78:	ldr	r6, [sp, #88]	; 0x58
   15b7c:	stmia	ip!, {r0, r1, r2, r3}
   15b80:	ldm	lr!, {r0, r1, r2, r3}
   15b84:	ldr	sl, [r4]
   15b88:	stmia	ip!, {r0, r1, r2, r3}
   15b8c:	ldm	lr, {r0, r1, r2, r3}
   15b90:	str	sl, [sp, #52]	; 0x34
   15b94:	stm	ip, {r0, r1, r2, r3}
   15b98:	mov	r2, r5
   15b9c:	add	r5, sp, #4
   15ba0:	mov	r1, r9
   15ba4:	mov	r0, r5
   15ba8:	bl	156bc <close_stdout@@Base+0x1680>
   15bac:	mov	r2, r6
   15bb0:	mov	r3, r5
   15bb4:	mov	r0, r8
   15bb8:	mov	r1, r7
   15bbc:	bl	153ec <close_stdout@@Base+0x13b0>
   15bc0:	ldr	r2, [sp, #52]	; 0x34
   15bc4:	ldr	r3, [r4]
   15bc8:	cmp	r2, r3
   15bcc:	bne	15bd8 <close_stdout@@Base+0x1b9c>
   15bd0:	add	sp, sp, #56	; 0x38
   15bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bd8:	bl	111e8 <__stack_chk_fail@plt>
   15bdc:	andeq	r3, r1, ip, ror #13
   15be0:	muleq	r1, r0, r4
   15be4:	andeq	r0, r0, r8, lsl r1
   15be8:	push	{lr}		; (str lr, [sp, #-4]!)
   15bec:	sub	sp, sp, #12
   15bf0:	mvn	ip, #0
   15bf4:	str	ip, [sp]
   15bf8:	bl	15b3c <close_stdout@@Base+0x1b00>
   15bfc:	add	sp, sp, #12
   15c00:	pop	{pc}		; (ldr pc, [sp], #4)
   15c04:	mov	ip, r1
   15c08:	mov	r3, r2
   15c0c:	mov	r1, r0
   15c10:	mov	r2, ip
   15c14:	mov	r0, #0
   15c18:	b	15be8 <close_stdout@@Base+0x1bac>
   15c1c:	push	{lr}		; (str lr, [sp, #-4]!)
   15c20:	sub	sp, sp, #12
   15c24:	mov	lr, r1
   15c28:	mov	ip, r2
   15c2c:	mov	r1, r0
   15c30:	str	r3, [sp]
   15c34:	mov	r2, lr
   15c38:	mov	r3, ip
   15c3c:	mov	r0, #0
   15c40:	bl	15b3c <close_stdout@@Base+0x1b00>
   15c44:	add	sp, sp, #12
   15c48:	pop	{pc}		; (ldr pc, [sp], #4)
   15c4c:	ldr	r3, [pc, #12]	; 15c60 <close_stdout@@Base+0x1c24>
   15c50:	ldr	ip, [pc, #12]	; 15c64 <close_stdout@@Base+0x1c28>
   15c54:	add	r3, pc, r3
   15c58:	ldr	r3, [r3, ip]
   15c5c:	b	153ec <close_stdout@@Base+0x13b0>
   15c60:	andeq	r3, r1, r4, lsr #7
   15c64:	andeq	r0, r0, r4, lsl r1
   15c68:	mov	r2, r1
   15c6c:	mov	r1, r0
   15c70:	mov	r0, #0
   15c74:	b	15c4c <close_stdout@@Base+0x1c10>
   15c78:	mvn	r2, #0
   15c7c:	b	15c4c <close_stdout@@Base+0x1c10>
   15c80:	mov	r1, r0
   15c84:	mov	r0, #0
   15c88:	b	15c78 <close_stdout@@Base+0x1c3c>
   15c8c:	mov	r1, #0
   15c90:	mov	r2, #3
   15c94:	b	16c08 <close_stdout@@Base+0x2bcc>
   15c98:	push	{r4, r5, r6, r7, lr}
   15c9c:	cmp	r1, #0
   15ca0:	sub	sp, sp, #36	; 0x24
   15ca4:	ldr	r7, [pc, #896]	; 1602c <close_stdout@@Base+0x1ff0>
   15ca8:	mov	ip, r3
   15cac:	mov	r5, r0
   15cb0:	add	r7, pc, r7
   15cb4:	ldr	r4, [sp, #56]	; 0x38
   15cb8:	ldr	r6, [sp, #60]	; 0x3c
   15cbc:	beq	16000 <close_stdout@@Base+0x1fc4>
   15cc0:	str	r2, [sp]
   15cc4:	mov	r3, r1
   15cc8:	ldr	r2, [pc, #864]	; 16030 <close_stdout@@Base+0x1ff4>
   15ccc:	mov	r1, #1
   15cd0:	str	ip, [sp, #4]
   15cd4:	add	r2, pc, r2
   15cd8:	bl	11374 <__fprintf_chk@plt>
   15cdc:	ldr	r1, [pc, #848]	; 16034 <close_stdout@@Base+0x1ff8>
   15ce0:	mov	r2, #5
   15ce4:	mov	r0, #0
   15ce8:	add	r1, pc, r1
   15cec:	bl	111dc <dcgettext@plt>
   15cf0:	ldr	r2, [pc, #832]	; 16038 <close_stdout@@Base+0x1ffc>
   15cf4:	movw	ip, #2013	; 0x7dd
   15cf8:	mov	r1, #1
   15cfc:	ldr	r2, [r7, r2]
   15d00:	str	ip, [sp]
   15d04:	mov	r3, r0
   15d08:	mov	r0, r5
   15d0c:	bl	11374 <__fprintf_chk@plt>
   15d10:	ldr	r1, [pc, #804]	; 1603c <close_stdout@@Base+0x2000>
   15d14:	mov	r0, #0
   15d18:	mov	r2, #5
   15d1c:	add	r1, pc, r1
   15d20:	bl	111dc <dcgettext@plt>
   15d24:	mov	r1, r5
   15d28:	bl	11140 <fputs_unlocked@plt>
   15d2c:	cmp	r6, #9
   15d30:	addls	pc, pc, r6, lsl #2
   15d34:	b	1601c <close_stdout@@Base+0x1fe0>
   15d38:	b	15dcc <close_stdout@@Base+0x1d90>
   15d3c:	b	15dd0 <close_stdout@@Base+0x1d94>
   15d40:	b	15e00 <close_stdout@@Base+0x1dc4>
   15d44:	b	15e34 <close_stdout@@Base+0x1df8>
   15d48:	b	15e70 <close_stdout@@Base+0x1e34>
   15d4c:	b	15eb0 <close_stdout@@Base+0x1e74>
   15d50:	b	15ef8 <close_stdout@@Base+0x1ebc>
   15d54:	b	15f48 <close_stdout@@Base+0x1f0c>
   15d58:	b	15fa0 <close_stdout@@Base+0x1f64>
   15d5c:	b	15d60 <close_stdout@@Base+0x1d24>
   15d60:	ldr	r1, [pc, #728]	; 16040 <close_stdout@@Base+0x2004>
   15d64:	mov	r0, #0
   15d68:	add	r1, pc, r1
   15d6c:	mov	r2, #5
   15d70:	bl	111dc <dcgettext@plt>
   15d74:	ldm	r4, {r3, ip}
   15d78:	mov	r1, #1
   15d7c:	str	ip, [sp]
   15d80:	ldr	ip, [r4, #8]
   15d84:	str	ip, [sp, #4]
   15d88:	ldr	ip, [r4, #12]
   15d8c:	str	ip, [sp, #8]
   15d90:	ldr	ip, [r4, #16]
   15d94:	str	ip, [sp, #12]
   15d98:	ldr	ip, [r4, #20]
   15d9c:	str	ip, [sp, #16]
   15da0:	ldr	ip, [r4, #24]
   15da4:	str	ip, [sp, #20]
   15da8:	ldr	ip, [r4, #28]
   15dac:	str	ip, [sp, #24]
   15db0:	ldr	ip, [r4, #32]
   15db4:	str	ip, [sp, #28]
   15db8:	mov	r2, r0
   15dbc:	mov	r0, r5
   15dc0:	bl	11374 <__fprintf_chk@plt>
   15dc4:	add	sp, sp, #36	; 0x24
   15dc8:	pop	{r4, r5, r6, r7, pc}
   15dcc:	bl	1141c <abort@plt>
   15dd0:	ldr	r1, [pc, #620]	; 16044 <close_stdout@@Base+0x2008>
   15dd4:	mov	r2, #5
   15dd8:	mov	r0, #0
   15ddc:	add	r1, pc, r1
   15de0:	bl	111dc <dcgettext@plt>
   15de4:	ldr	r3, [r4]
   15de8:	mov	r1, #1
   15dec:	mov	r2, r0
   15df0:	mov	r0, r5
   15df4:	add	sp, sp, #36	; 0x24
   15df8:	pop	{r4, r5, r6, r7, lr}
   15dfc:	b	11374 <__fprintf_chk@plt>
   15e00:	ldr	r1, [pc, #576]	; 16048 <close_stdout@@Base+0x200c>
   15e04:	mov	r2, #5
   15e08:	mov	r0, #0
   15e0c:	add	r1, pc, r1
   15e10:	bl	111dc <dcgettext@plt>
   15e14:	ldm	r4, {r3, ip}
   15e18:	mov	r1, #1
   15e1c:	str	ip, [sp, #56]	; 0x38
   15e20:	mov	r2, r0
   15e24:	mov	r0, r5
   15e28:	add	sp, sp, #36	; 0x24
   15e2c:	pop	{r4, r5, r6, r7, lr}
   15e30:	b	11374 <__fprintf_chk@plt>
   15e34:	ldr	r1, [pc, #528]	; 1604c <close_stdout@@Base+0x2010>
   15e38:	mov	r2, #5
   15e3c:	mov	r0, #0
   15e40:	add	r1, pc, r1
   15e44:	bl	111dc <dcgettext@plt>
   15e48:	ldm	r4, {r3, ip}
   15e4c:	mov	r1, #1
   15e50:	str	ip, [sp, #56]	; 0x38
   15e54:	ldr	ip, [r4, #8]
   15e58:	str	ip, [sp, #60]	; 0x3c
   15e5c:	mov	r2, r0
   15e60:	mov	r0, r5
   15e64:	add	sp, sp, #36	; 0x24
   15e68:	pop	{r4, r5, r6, r7, lr}
   15e6c:	b	11374 <__fprintf_chk@plt>
   15e70:	ldr	r1, [pc, #472]	; 16050 <close_stdout@@Base+0x2014>
   15e74:	mov	r2, #5
   15e78:	mov	r0, #0
   15e7c:	add	r1, pc, r1
   15e80:	bl	111dc <dcgettext@plt>
   15e84:	ldm	r4, {r3, ip}
   15e88:	mov	r1, #1
   15e8c:	str	ip, [sp]
   15e90:	ldr	ip, [r4, #8]
   15e94:	str	ip, [sp, #4]
   15e98:	ldr	ip, [r4, #12]
   15e9c:	str	ip, [sp, #8]
   15ea0:	mov	r2, r0
   15ea4:	mov	r0, r5
   15ea8:	bl	11374 <__fprintf_chk@plt>
   15eac:	b	15dc4 <close_stdout@@Base+0x1d88>
   15eb0:	ldr	r1, [pc, #412]	; 16054 <close_stdout@@Base+0x2018>
   15eb4:	mov	r2, #5
   15eb8:	mov	r0, #0
   15ebc:	add	r1, pc, r1
   15ec0:	bl	111dc <dcgettext@plt>
   15ec4:	ldm	r4, {r3, ip}
   15ec8:	mov	r1, #1
   15ecc:	str	ip, [sp]
   15ed0:	ldr	ip, [r4, #8]
   15ed4:	str	ip, [sp, #4]
   15ed8:	ldr	ip, [r4, #12]
   15edc:	str	ip, [sp, #8]
   15ee0:	ldr	ip, [r4, #16]
   15ee4:	str	ip, [sp, #12]
   15ee8:	mov	r2, r0
   15eec:	mov	r0, r5
   15ef0:	bl	11374 <__fprintf_chk@plt>
   15ef4:	b	15dc4 <close_stdout@@Base+0x1d88>
   15ef8:	ldr	r1, [pc, #344]	; 16058 <close_stdout@@Base+0x201c>
   15efc:	mov	r2, #5
   15f00:	mov	r0, #0
   15f04:	add	r1, pc, r1
   15f08:	bl	111dc <dcgettext@plt>
   15f0c:	ldm	r4, {r3, ip}
   15f10:	mov	r1, #1
   15f14:	str	ip, [sp]
   15f18:	ldr	ip, [r4, #8]
   15f1c:	str	ip, [sp, #4]
   15f20:	ldr	ip, [r4, #12]
   15f24:	str	ip, [sp, #8]
   15f28:	ldr	ip, [r4, #16]
   15f2c:	str	ip, [sp, #12]
   15f30:	ldr	ip, [r4, #20]
   15f34:	str	ip, [sp, #16]
   15f38:	mov	r2, r0
   15f3c:	mov	r0, r5
   15f40:	bl	11374 <__fprintf_chk@plt>
   15f44:	b	15dc4 <close_stdout@@Base+0x1d88>
   15f48:	ldr	r1, [pc, #268]	; 1605c <close_stdout@@Base+0x2020>
   15f4c:	mov	r2, #5
   15f50:	mov	r0, #0
   15f54:	add	r1, pc, r1
   15f58:	bl	111dc <dcgettext@plt>
   15f5c:	ldm	r4, {r3, ip}
   15f60:	mov	r1, #1
   15f64:	str	ip, [sp]
   15f68:	ldr	ip, [r4, #8]
   15f6c:	str	ip, [sp, #4]
   15f70:	ldr	ip, [r4, #12]
   15f74:	str	ip, [sp, #8]
   15f78:	ldr	ip, [r4, #16]
   15f7c:	str	ip, [sp, #12]
   15f80:	ldr	ip, [r4, #20]
   15f84:	str	ip, [sp, #16]
   15f88:	ldr	ip, [r4, #24]
   15f8c:	str	ip, [sp, #20]
   15f90:	mov	r2, r0
   15f94:	mov	r0, r5
   15f98:	bl	11374 <__fprintf_chk@plt>
   15f9c:	b	15dc4 <close_stdout@@Base+0x1d88>
   15fa0:	ldr	r1, [pc, #184]	; 16060 <close_stdout@@Base+0x2024>
   15fa4:	mov	r2, #5
   15fa8:	mov	r0, #0
   15fac:	add	r1, pc, r1
   15fb0:	bl	111dc <dcgettext@plt>
   15fb4:	ldm	r4, {r3, ip}
   15fb8:	mov	r1, #1
   15fbc:	str	ip, [sp]
   15fc0:	ldr	ip, [r4, #8]
   15fc4:	str	ip, [sp, #4]
   15fc8:	ldr	ip, [r4, #12]
   15fcc:	str	ip, [sp, #8]
   15fd0:	ldr	ip, [r4, #16]
   15fd4:	str	ip, [sp, #12]
   15fd8:	ldr	ip, [r4, #20]
   15fdc:	str	ip, [sp, #16]
   15fe0:	ldr	ip, [r4, #24]
   15fe4:	str	ip, [sp, #20]
   15fe8:	ldr	ip, [r4, #28]
   15fec:	str	ip, [sp, #24]
   15ff0:	mov	r2, r0
   15ff4:	mov	r0, r5
   15ff8:	bl	11374 <__fprintf_chk@plt>
   15ffc:	b	15dc4 <close_stdout@@Base+0x1d88>
   16000:	str	r3, [sp]
   16004:	mov	r3, r2
   16008:	ldr	r2, [pc, #84]	; 16064 <close_stdout@@Base+0x2028>
   1600c:	mov	r1, #1
   16010:	add	r2, pc, r2
   16014:	bl	11374 <__fprintf_chk@plt>
   16018:	b	15cdc <close_stdout@@Base+0x1ca0>
   1601c:	ldr	r1, [pc, #68]	; 16068 <close_stdout@@Base+0x202c>
   16020:	mov	r0, #0
   16024:	add	r1, pc, r1
   16028:	b	15d6c <close_stdout@@Base+0x1d30>
   1602c:	andeq	r3, r1, r8, asr #6
   16030:	andeq	r2, r0, r0, asr #14
   16034:	andeq	r2, r0, r0, asr #14
   16038:	andeq	r0, r0, r8, asr #2
   1603c:	andeq	r2, r0, r0, lsl r7
   16040:	muleq	r0, ip, r8
   16044:	andeq	r2, r0, ip, lsl r7
   16048:	strdeq	r2, [r0], -ip
   1604c:	andeq	r2, r0, r0, ror #13
   16050:	andeq	r2, r0, r0, asr #13
   16054:	andeq	r2, r0, r0, lsr #13
   16058:	andeq	r2, r0, ip, ror r6
   1605c:	andeq	r2, r0, r4, asr r6
   16060:	andeq	r2, r0, r8, lsr #12
   16064:	andeq	r2, r0, r0, lsl r4
   16068:	andeq	r2, r0, r4, lsl r6
   1606c:	push	{r4, r5, lr}
   16070:	sub	sp, sp, #12
   16074:	ldr	r5, [sp, #24]
   16078:	ldr	ip, [r5]
   1607c:	cmp	ip, #0
   16080:	beq	1609c <close_stdout@@Base+0x2060>
   16084:	mov	lr, r5
   16088:	mov	ip, #0
   1608c:	ldr	r4, [lr, #4]!
   16090:	add	ip, ip, #1
   16094:	cmp	r4, #0
   16098:	bne	1608c <close_stdout@@Base+0x2050>
   1609c:	stm	sp, {r5, ip}
   160a0:	bl	15c98 <close_stdout@@Base+0x1c5c>
   160a4:	add	sp, sp, #12
   160a8:	pop	{r4, r5, pc}
   160ac:	push	{r4, r5, r6, r7, lr}
   160b0:	sub	sp, sp, #60	; 0x3c
   160b4:	ldr	r4, [pc, #100]	; 16120 <close_stdout@@Base+0x20e4>
   160b8:	mov	ip, #0
   160bc:	ldr	r5, [pc, #96]	; 16124 <close_stdout@@Base+0x20e8>
   160c0:	mov	lr, ip
   160c4:	add	r4, pc, r4
   160c8:	ldr	r6, [sp, #80]	; 0x50
   160cc:	ldr	r7, [r4, r5]
   160d0:	add	r5, sp, #12
   160d4:	ldr	r4, [r7]
   160d8:	str	r4, [sp, #52]	; 0x34
   160dc:	ldr	r4, [r6, ip]
   160e0:	cmp	r4, #0
   160e4:	str	r4, [r5, ip]
   160e8:	beq	160fc <close_stdout@@Base+0x20c0>
   160ec:	add	lr, lr, #1
   160f0:	add	ip, ip, #4
   160f4:	cmp	lr, #10
   160f8:	bne	160dc <close_stdout@@Base+0x20a0>
   160fc:	stm	sp, {r5, lr}
   16100:	bl	15c98 <close_stdout@@Base+0x1c5c>
   16104:	ldr	r2, [sp, #52]	; 0x34
   16108:	ldr	r3, [r7]
   1610c:	cmp	r2, r3
   16110:	bne	1611c <close_stdout@@Base+0x20e0>
   16114:	add	sp, sp, #60	; 0x3c
   16118:	pop	{r4, r5, r6, r7, pc}
   1611c:	bl	111e8 <__stack_chk_fail@plt>
   16120:	andeq	r2, r1, r4, lsr pc
   16124:	andeq	r0, r0, r8, lsl r1
   16128:	push	{r3}		; (str r3, [sp, #-4]!)
   1612c:	push	{r4, lr}
   16130:	sub	sp, sp, #20
   16134:	ldr	lr, [pc, #72]	; 16184 <close_stdout@@Base+0x2148>
   16138:	add	ip, sp, #32
   1613c:	ldr	r4, [pc, #68]	; 16188 <close_stdout@@Base+0x214c>
   16140:	add	lr, pc, lr
   16144:	ldr	r3, [sp, #28]
   16148:	ldr	r4, [lr, r4]
   1614c:	str	ip, [sp]
   16150:	str	ip, [sp, #8]
   16154:	ldr	ip, [r4]
   16158:	str	ip, [sp, #12]
   1615c:	bl	160ac <close_stdout@@Base+0x2070>
   16160:	ldr	r2, [sp, #12]
   16164:	ldr	r3, [r4]
   16168:	cmp	r2, r3
   1616c:	bne	16180 <close_stdout@@Base+0x2144>
   16170:	add	sp, sp, #20
   16174:	pop	{r4, lr}
   16178:	add	sp, sp, #4
   1617c:	bx	lr
   16180:	bl	111e8 <__stack_chk_fail@plt>
   16184:			; <UNDEFINED> instruction: 0x00012eb8
   16188:	andeq	r0, r0, r8, lsl r1
   1618c:	ldr	r1, [pc, #132]	; 16218 <close_stdout@@Base+0x21dc>
   16190:	mov	r2, #5
   16194:	push	{r4, lr}
   16198:	add	r1, pc, r1
   1619c:	mov	r0, #0
   161a0:	ldr	r4, [pc, #116]	; 1621c <close_stdout@@Base+0x21e0>
   161a4:	bl	111dc <dcgettext@plt>
   161a8:	ldr	r2, [pc, #112]	; 16220 <close_stdout@@Base+0x21e4>
   161ac:	add	r4, pc, r4
   161b0:	add	r2, pc, r2
   161b4:	mov	r1, r0
   161b8:	mov	r0, #1
   161bc:	bl	1135c <__printf_chk@plt>
   161c0:	ldr	r1, [pc, #92]	; 16224 <close_stdout@@Base+0x21e8>
   161c4:	mov	r2, #5
   161c8:	mov	r0, #0
   161cc:	add	r1, pc, r1
   161d0:	bl	111dc <dcgettext@plt>
   161d4:	ldr	r2, [pc, #76]	; 16228 <close_stdout@@Base+0x21ec>
   161d8:	ldr	r3, [pc, #76]	; 1622c <close_stdout@@Base+0x21f0>
   161dc:	add	r2, pc, r2
   161e0:	add	r3, pc, r3
   161e4:	mov	r1, r0
   161e8:	mov	r0, #1
   161ec:	bl	1135c <__printf_chk@plt>
   161f0:	ldr	r1, [pc, #56]	; 16230 <close_stdout@@Base+0x21f4>
   161f4:	mov	r0, #0
   161f8:	mov	r2, #5
   161fc:	add	r1, pc, r1
   16200:	bl	111dc <dcgettext@plt>
   16204:	ldr	r3, [pc, #40]	; 16234 <close_stdout@@Base+0x21f8>
   16208:	ldr	r3, [r4, r3]
   1620c:	pop	{r4, lr}
   16210:	ldr	r1, [r3]
   16214:	b	11140 <fputs_unlocked@plt>
   16218:	ldrdeq	r2, [r0], -ip
   1621c:	andeq	r2, r1, ip, asr #28
   16220:	ldrdeq	r2, [r0], -ip
   16224:	ldrdeq	r2, [r0], -r8
   16228:	andeq	r1, r0, r0, asr pc
   1622c:	andeq	r1, r0, ip, asr pc
   16230:			; <UNDEFINED> instruction: 0x000024bc
   16234:	andeq	r0, r0, r8, lsr r1
   16238:	push	{r4, lr}
   1623c:	mov	r4, r0
   16240:	bl	11290 <malloc@plt>
   16244:	rsbs	r3, r0, #1
   16248:	movcc	r3, #0
   1624c:	cmp	r4, #0
   16250:	moveq	r3, #0
   16254:	cmp	r3, #0
   16258:	popeq	{r4, pc}
   1625c:	bl	1644c <close_stdout@@Base+0x2410>
   16260:	push	{r3, r4, r5, lr}
   16264:	mov	r4, r0
   16268:	mvn	r0, #0
   1626c:	mov	r5, r1
   16270:	bl	17484 <close_stdout@@Base+0x3448>
   16274:	cmp	r0, r4
   16278:	bcc	16288 <close_stdout@@Base+0x224c>
   1627c:	mul	r0, r4, r5
   16280:	pop	{r3, r4, r5, lr}
   16284:	b	16238 <close_stdout@@Base+0x21fc>
   16288:	bl	1644c <close_stdout@@Base+0x2410>
   1628c:	b	16238 <close_stdout@@Base+0x21fc>
   16290:	rsbs	r3, r1, #1
   16294:	push	{r4, lr}
   16298:	movcc	r3, #0
   1629c:	cmp	r0, #0
   162a0:	mov	r4, r1
   162a4:	moveq	r3, #0
   162a8:	cmp	r3, #0
   162ac:	bne	162d0 <close_stdout@@Base+0x2294>
   162b0:	bl	111f4 <realloc@plt>
   162b4:	rsbs	r3, r0, #1
   162b8:	movcc	r3, #0
   162bc:	cmp	r4, #0
   162c0:	moveq	r3, #0
   162c4:	cmp	r3, #0
   162c8:	popeq	{r4, pc}
   162cc:	bl	1644c <close_stdout@@Base+0x2410>
   162d0:	bl	11188 <free@plt>
   162d4:	mov	r0, #0
   162d8:	pop	{r4, pc}
   162dc:	push	{r4, r5, r6, lr}
   162e0:	mov	r5, r1
   162e4:	mov	r6, r0
   162e8:	mov	r1, r2
   162ec:	mvn	r0, #0
   162f0:	mov	r4, r2
   162f4:	bl	17484 <close_stdout@@Base+0x3448>
   162f8:	cmp	r0, r5
   162fc:	bcc	16310 <close_stdout@@Base+0x22d4>
   16300:	mov	r0, r6
   16304:	mul	r1, r5, r4
   16308:	pop	{r4, r5, r6, lr}
   1630c:	b	16290 <close_stdout@@Base+0x2254>
   16310:	bl	1644c <close_stdout@@Base+0x2410>
   16314:	push	{r3, r4, r5, r6, r7, lr}
   16318:	subs	r7, r0, #0
   1631c:	mov	r5, r1
   16320:	mov	r6, r2
   16324:	ldr	r4, [r1]
   16328:	beq	16360 <close_stdout@@Base+0x2324>
   1632c:	movw	r0, #43690	; 0xaaaa
   16330:	mov	r1, r2
   16334:	bfi	r0, r0, #16, #16
   16338:	bl	17484 <close_stdout@@Base+0x3448>
   1633c:	cmp	r4, r0
   16340:	addcc	r3, r4, #1
   16344:	addcc	r4, r4, r3, lsr #1
   16348:	bcs	16384 <close_stdout@@Base+0x2348>
   1634c:	str	r4, [r5]
   16350:	mov	r0, r7
   16354:	mul	r1, r6, r4
   16358:	pop	{r3, r4, r5, r6, r7, lr}
   1635c:	b	16290 <close_stdout@@Base+0x2254>
   16360:	cmp	r4, #0
   16364:	bne	1634c <close_stdout@@Base+0x2310>
   16368:	mov	r0, #64	; 0x40
   1636c:	mov	r1, r2
   16370:	bl	17484 <close_stdout@@Base+0x3448>
   16374:	cmp	r0, #0
   16378:	movne	r4, r0
   1637c:	addeq	r4, r0, #1
   16380:	b	1634c <close_stdout@@Base+0x2310>
   16384:	bl	1644c <close_stdout@@Base+0x2410>
   16388:	cmp	r0, #0
   1638c:	push	{r3, lr}
   16390:	ldr	r3, [r1]
   16394:	beq	163c0 <close_stdout@@Base+0x2384>
   16398:	movw	r2, #43689	; 0xaaa9
   1639c:	movt	r2, #43690	; 0xaaaa
   163a0:	cmp	r3, r2
   163a4:	addls	r2, r3, #1
   163a8:	addls	r3, r3, r2, lsr #1
   163ac:	bhi	163d8 <close_stdout@@Base+0x239c>
   163b0:	str	r3, [r1]
   163b4:	mov	r1, r3
   163b8:	pop	{r3, lr}
   163bc:	b	16290 <close_stdout@@Base+0x2254>
   163c0:	cmp	r3, #0
   163c4:	moveq	r3, #64	; 0x40
   163c8:	str	r3, [r1]
   163cc:	mov	r1, r3
   163d0:	pop	{r3, lr}
   163d4:	b	16290 <close_stdout@@Base+0x2254>
   163d8:	bl	1644c <close_stdout@@Base+0x2410>
   163dc:	push	{r4, lr}
   163e0:	mov	r4, r0
   163e4:	bl	16238 <close_stdout@@Base+0x21fc>
   163e8:	mov	r2, r4
   163ec:	mov	r1, #0
   163f0:	pop	{r4, lr}
   163f4:	b	11344 <memset@plt>
   163f8:	push	{r3, lr}
   163fc:	bl	11134 <calloc@plt>
   16400:	cmp	r0, #0
   16404:	popne	{r3, pc}
   16408:	bl	1644c <close_stdout@@Base+0x2410>
   1640c:	push	{r3, r4, r5, lr}
   16410:	mov	r4, r1
   16414:	mov	r5, r0
   16418:	mov	r0, r1
   1641c:	bl	16238 <close_stdout@@Base+0x21fc>
   16420:	mov	r1, r5
   16424:	mov	r2, r4
   16428:	pop	{r3, r4, r5, lr}
   1642c:	b	111a0 <memcpy@plt>
   16430:	push	{r4, lr}
   16434:	mov	r4, r0
   16438:	bl	112fc <strlen@plt>
   1643c:	add	r1, r0, #1
   16440:	mov	r0, r4
   16444:	pop	{r4, lr}
   16448:	b	1640c <close_stdout@@Base+0x23d0>
   1644c:	ldr	r3, [pc, #64]	; 16494 <close_stdout@@Base+0x2458>
   16450:	mov	r2, #5
   16454:	ldr	ip, [pc, #60]	; 16498 <close_stdout@@Base+0x245c>
   16458:	mov	r0, #0
   1645c:	add	r3, pc, r3
   16460:	ldr	r1, [pc, #52]	; 1649c <close_stdout@@Base+0x2460>
   16464:	push	{r4, lr}
   16468:	add	r1, pc, r1
   1646c:	ldr	r3, [r3, ip]
   16470:	ldr	r4, [r3]
   16474:	bl	111dc <dcgettext@plt>
   16478:	ldr	r2, [pc, #32]	; 164a0 <close_stdout@@Base+0x2464>
   1647c:	mov	r1, #0
   16480:	add	r2, pc, r2
   16484:	mov	r3, r0
   16488:	mov	r0, r4
   1648c:	bl	11260 <error@plt>
   16490:	bl	1141c <abort@plt>
   16494:	muleq	r1, ip, fp
   16498:	andeq	r0, r0, ip, lsr r1
   1649c:	andeq	r2, r0, r0, asr #5
   164a0:	andeq	r1, r0, r8, asr #29
   164a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164a8:	mov	r9, r1
   164ac:	ldr	r1, [pc, #196]	; 16578 <close_stdout@@Base+0x253c>
   164b0:	mov	r4, r0
   164b4:	mov	r5, r2
   164b8:	mov	r0, #0
   164bc:	add	r1, pc, r1
   164c0:	mov	r2, #5
   164c4:	mov	r8, r3
   164c8:	ldr	r7, [sp, #32]
   164cc:	bl	111dc <dcgettext@plt>
   164d0:	mov	r1, r4
   164d4:	ldr	r4, [pc, #160]	; 1657c <close_stdout@@Base+0x2540>
   164d8:	add	r4, pc, r4
   164dc:	mov	r2, r0
   164e0:	mov	r0, #0
   164e4:	bl	11260 <error@plt>
   164e8:	ldr	r1, [pc, #144]	; 16580 <close_stdout@@Base+0x2544>
   164ec:	mov	r2, #5
   164f0:	mov	r0, #0
   164f4:	add	r1, pc, r1
   164f8:	bl	111dc <dcgettext@plt>
   164fc:	mov	r2, r0
   16500:	mov	r0, #0
   16504:	mov	r1, r0
   16508:	bl	11260 <error@plt>
   1650c:	ldr	r3, [pc, #112]	; 16584 <close_stdout@@Base+0x2548>
   16510:	ldr	r1, [pc, #112]	; 16588 <close_stdout@@Base+0x254c>
   16514:	mov	r2, #5
   16518:	mov	r0, #0
   1651c:	ldr	r3, [r4, r3]
   16520:	add	r1, pc, r1
   16524:	ldr	r4, [r3]
   16528:	bl	111dc <dcgettext@plt>
   1652c:	mov	r2, r9
   16530:	mov	r3, r5
   16534:	mov	r1, #6
   16538:	mov	r6, r0
   1653c:	mov	r0, #0
   16540:	bl	159e4 <close_stdout@@Base+0x19a8>
   16544:	mov	r2, r8
   16548:	mov	r3, r7
   1654c:	mov	r1, #6
   16550:	mov	r5, r0
   16554:	mov	r0, #1
   16558:	bl	159e4 <close_stdout@@Base+0x19a8>
   1655c:	mov	r2, r6
   16560:	mov	r3, r5
   16564:	mov	r1, #0
   16568:	str	r0, [sp, #32]
   1656c:	mov	r0, r4
   16570:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16574:	b	11260 <error@plt>
   16578:	andeq	r2, r0, r0, lsl #5
   1657c:	andeq	r2, r1, r0, lsr #22
   16580:	andeq	r2, r0, r4, ror #4
   16584:	andeq	r0, r0, ip, lsr r1
   16588:	andeq	r2, r0, r4, ror #4
   1658c:	push	{r4, r5, r6, r7, r8, lr}
   16590:	sub	sp, sp, #8
   16594:	mov	r6, r1
   16598:	mov	r5, r2
   1659c:	mov	r8, r3
   165a0:	mov	r7, r0
   165a4:	bl	173ac <close_stdout@@Base+0x3370>
   165a8:	mov	r4, r0
   165ac:	bl	1132c <__errno_location@plt>
   165b0:	ldr	r0, [r0]
   165b4:	cmp	r0, #0
   165b8:	beq	165d0 <close_stdout@@Base+0x2594>
   165bc:	str	r8, [sp]
   165c0:	mov	r1, r7
   165c4:	mov	r2, r6
   165c8:	mov	r3, r5
   165cc:	bl	164a4 <close_stdout@@Base+0x2468>
   165d0:	mov	r0, r4
   165d4:	add	sp, sp, #8
   165d8:	pop	{r4, r5, r6, r7, r8, pc}
   165dc:	push	{r4, r5, r6, r7, r8, lr}
   165e0:	sub	sp, sp, #8
   165e4:	mov	r6, r1
   165e8:	mov	r5, r2
   165ec:	mov	r8, r3
   165f0:	mov	r7, r0
   165f4:	bl	1742c <close_stdout@@Base+0x33f0>
   165f8:	mov	r4, r0
   165fc:	bl	1132c <__errno_location@plt>
   16600:	ldr	r0, [r0]
   16604:	cmp	r0, #0
   16608:	beq	16624 <close_stdout@@Base+0x25e8>
   1660c:	sub	r8, r8, #1
   16610:	mov	r1, r7
   16614:	str	r8, [sp]
   16618:	sub	r2, r6, #1
   1661c:	mov	r3, r5
   16620:	bl	164a4 <close_stdout@@Base+0x2468>
   16624:	mov	r0, r4
   16628:	add	sp, sp, #8
   1662c:	pop	{r4, r5, r6, r7, r8, pc}
   16630:	ldr	ip, [pc, #1308]	; 16b54 <close_stdout@@Base+0x2b18>
   16634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16638:	mov	sl, r2
   1663c:	ldr	r2, [pc, #1300]	; 16b58 <close_stdout@@Base+0x2b1c>
   16640:	add	ip, pc, ip
   16644:	mov	r9, r3
   16648:	sub	sp, sp, #20
   1664c:	mov	r3, ip
   16650:	cmp	sl, #36	; 0x24
   16654:	ldr	r6, [ip, r2]
   16658:	mov	r5, r0
   1665c:	mov	r7, r1
   16660:	ldr	r8, [sp, #56]	; 0x38
   16664:	ldr	r3, [r6]
   16668:	str	r3, [sp, #12]
   1666c:	bhi	16b34 <close_stdout@@Base+0x2af8>
   16670:	cmp	r1, #0
   16674:	addeq	r7, sp, #8
   16678:	bl	112d8 <__ctype_b_loc@plt>
   1667c:	ldrb	ip, [r5]
   16680:	mov	r2, r5
   16684:	ldr	r1, [r0]
   16688:	b	16690 <close_stdout@@Base+0x2654>
   1668c:	ldrb	ip, [r2, #1]!
   16690:	lsl	r3, ip, #1
   16694:	ldrh	r4, [r1, r3]
   16698:	and	r4, r4, #8192	; 0x2000
   1669c:	uxth	r4, r4
   166a0:	cmp	r4, #0
   166a4:	bne	1668c <close_stdout@@Base+0x2650>
   166a8:	cmp	ip, #45	; 0x2d
   166ac:	bne	166cc <close_stdout@@Base+0x2690>
   166b0:	mov	r0, #4
   166b4:	ldr	r2, [sp, #12]
   166b8:	ldr	r3, [r6]
   166bc:	cmp	r2, r3
   166c0:	bne	16b30 <close_stdout@@Base+0x2af4>
   166c4:	add	sp, sp, #20
   166c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166cc:	bl	1132c <__errno_location@plt>
   166d0:	mov	r2, sl
   166d4:	mov	r1, r7
   166d8:	str	r4, [r0]
   166dc:	mov	fp, r0
   166e0:	mov	r0, r5
   166e4:	bl	112f0 <strtoul@plt>
   166e8:	ldr	r3, [r7]
   166ec:	cmp	r3, r5
   166f0:	mov	sl, r0
   166f4:	beq	16884 <close_stdout@@Base+0x2848>
   166f8:	ldr	r0, [fp]
   166fc:	cmp	r0, #0
   16700:	bne	16730 <close_stdout@@Base+0x26f4>
   16704:	mov	r4, r0
   16708:	cmp	r8, #0
   1670c:	streq	sl, [r9]
   16710:	moveq	r0, r4
   16714:	beq	166b4 <close_stdout@@Base+0x2678>
   16718:	ldrb	r5, [r3]
   1671c:	cmp	r5, #0
   16720:	bne	16740 <close_stdout@@Base+0x2704>
   16724:	mov	r0, r4
   16728:	str	sl, [r9]
   1672c:	b	166b4 <close_stdout@@Base+0x2678>
   16730:	cmp	r0, #34	; 0x22
   16734:	moveq	r4, #1
   16738:	bne	166b0 <close_stdout@@Base+0x2674>
   1673c:	b	16708 <close_stdout@@Base+0x26cc>
   16740:	mov	r0, r8
   16744:	mov	r1, r5
   16748:	str	r3, [sp, #4]
   1674c:	bl	11308 <strchr@plt>
   16750:	ldr	r3, [sp, #4]
   16754:	cmp	r0, #0
   16758:	beq	168bc <close_stdout@@Base+0x2880>
   1675c:	mov	r0, r8
   16760:	mov	r1, #48	; 0x30
   16764:	str	r3, [sp, #4]
   16768:	bl	11308 <strchr@plt>
   1676c:	ldr	r3, [sp, #4]
   16770:	cmp	r0, #0
   16774:	beq	16794 <close_stdout@@Base+0x2758>
   16778:	ldrb	r2, [r3, #1]
   1677c:	cmp	r2, #68	; 0x44
   16780:	beq	16b18 <close_stdout@@Base+0x2adc>
   16784:	cmp	r2, #105	; 0x69
   16788:	beq	16b00 <close_stdout@@Base+0x2ac4>
   1678c:	cmp	r2, #66	; 0x42
   16790:	beq	16b18 <close_stdout@@Base+0x2adc>
   16794:	mov	r8, #1
   16798:	mov	fp, #1024	; 0x400
   1679c:	sub	r5, r5, #66	; 0x42
   167a0:	cmp	r5, #53	; 0x35
   167a4:	addls	pc, pc, r5, lsl #2
   167a8:	b	168bc <close_stdout@@Base+0x2880>
   167ac:	b	16aac <close_stdout@@Base+0x2a70>
   167b0:	b	168bc <close_stdout@@Base+0x2880>
   167b4:	b	168bc <close_stdout@@Base+0x2880>
   167b8:	b	16a6c <close_stdout@@Base+0x2a30>
   167bc:	b	168bc <close_stdout@@Base+0x2880>
   167c0:	b	16ac0 <close_stdout@@Base+0x2a84>
   167c4:	b	168bc <close_stdout@@Base+0x2880>
   167c8:	b	168bc <close_stdout@@Base+0x2880>
   167cc:	b	168bc <close_stdout@@Base+0x2880>
   167d0:	b	16a4c <close_stdout@@Base+0x2a10>
   167d4:	b	168bc <close_stdout@@Base+0x2880>
   167d8:	b	16a18 <close_stdout@@Base+0x29dc>
   167dc:	b	168bc <close_stdout@@Base+0x2880>
   167e0:	b	168bc <close_stdout@@Base+0x2880>
   167e4:	b	169d8 <close_stdout@@Base+0x299c>
   167e8:	b	168bc <close_stdout@@Base+0x2880>
   167ec:	b	168bc <close_stdout@@Base+0x2880>
   167f0:	b	168bc <close_stdout@@Base+0x2880>
   167f4:	b	16998 <close_stdout@@Base+0x295c>
   167f8:	b	168bc <close_stdout@@Base+0x2880>
   167fc:	b	168bc <close_stdout@@Base+0x2880>
   16800:	b	168bc <close_stdout@@Base+0x2880>
   16804:	b	168bc <close_stdout@@Base+0x2880>
   16808:	b	16958 <close_stdout@@Base+0x291c>
   1680c:	b	16918 <close_stdout@@Base+0x28dc>
   16810:	b	168bc <close_stdout@@Base+0x2880>
   16814:	b	168bc <close_stdout@@Base+0x2880>
   16818:	b	168bc <close_stdout@@Base+0x2880>
   1681c:	b	168bc <close_stdout@@Base+0x2880>
   16820:	b	168bc <close_stdout@@Base+0x2880>
   16824:	b	168bc <close_stdout@@Base+0x2880>
   16828:	b	168bc <close_stdout@@Base+0x2880>
   1682c:	b	16904 <close_stdout@@Base+0x28c8>
   16830:	b	168c8 <close_stdout@@Base+0x288c>
   16834:	b	168bc <close_stdout@@Base+0x2880>
   16838:	b	168bc <close_stdout@@Base+0x2880>
   1683c:	b	168bc <close_stdout@@Base+0x2880>
   16840:	b	16ac0 <close_stdout@@Base+0x2a84>
   16844:	b	168bc <close_stdout@@Base+0x2880>
   16848:	b	168bc <close_stdout@@Base+0x2880>
   1684c:	b	168bc <close_stdout@@Base+0x2880>
   16850:	b	16a4c <close_stdout@@Base+0x2a10>
   16854:	b	168bc <close_stdout@@Base+0x2880>
   16858:	b	16a18 <close_stdout@@Base+0x29dc>
   1685c:	b	168bc <close_stdout@@Base+0x2880>
   16860:	b	168bc <close_stdout@@Base+0x2880>
   16864:	b	168bc <close_stdout@@Base+0x2880>
   16868:	b	168bc <close_stdout@@Base+0x2880>
   1686c:	b	168bc <close_stdout@@Base+0x2880>
   16870:	b	168bc <close_stdout@@Base+0x2880>
   16874:	b	16998 <close_stdout@@Base+0x295c>
   16878:	b	168bc <close_stdout@@Base+0x2880>
   1687c:	b	168bc <close_stdout@@Base+0x2880>
   16880:	b	168e8 <close_stdout@@Base+0x28ac>
   16884:	cmp	r8, #0
   16888:	beq	166b0 <close_stdout@@Base+0x2674>
   1688c:	ldrb	r5, [r5]
   16890:	cmp	r5, #0
   16894:	beq	166b0 <close_stdout@@Base+0x2674>
   16898:	mov	r0, r8
   1689c:	mov	r1, r5
   168a0:	str	r3, [sp, #4]
   168a4:	bl	11308 <strchr@plt>
   168a8:	ldr	r3, [sp, #4]
   168ac:	cmp	r0, #0
   168b0:	movne	sl, #1
   168b4:	bne	1675c <close_stdout@@Base+0x2720>
   168b8:	b	166b0 <close_stdout@@Base+0x2674>
   168bc:	str	sl, [r9]
   168c0:	orr	r0, r4, #2
   168c4:	b	166b4 <close_stdout@@Base+0x2678>
   168c8:	mov	r2, #0
   168cc:	add	r1, r3, r8
   168d0:	str	r1, [r7]
   168d4:	ldrb	r3, [r3, r8]
   168d8:	orr	r4, r4, r2
   168dc:	cmp	r3, #0
   168e0:	orrne	r4, r4, #2
   168e4:	b	16724 <close_stdout@@Base+0x26e8>
   168e8:	cmn	sl, #-2147483647	; 0x80000001
   168ec:	lslls	sl, sl, #1
   168f0:	movls	r2, #0
   168f4:	bls	168cc <close_stdout@@Base+0x2890>
   168f8:	mvn	sl, #0
   168fc:	mov	r2, #1
   16900:	b	168cc <close_stdout@@Base+0x2890>
   16904:	cmp	sl, #8388608	; 0x800000
   16908:	lslcc	sl, sl, #9
   1690c:	movcc	r2, #0
   16910:	bcc	168cc <close_stdout@@Base+0x2890>
   16914:	b	168f8 <close_stdout@@Base+0x28bc>
   16918:	mov	r1, fp
   1691c:	mvn	r0, #0
   16920:	str	r3, [sp, #4]
   16924:	bl	17484 <close_stdout@@Base+0x3448>
   16928:	ldr	r3, [sp, #4]
   1692c:	mov	r1, #7
   16930:	mov	r2, #0
   16934:	cmp	r0, sl
   16938:	movcs	ip, #0
   1693c:	movcc	ip, #1
   16940:	mulcs	sl, fp, sl
   16944:	mvncc	sl, #0
   16948:	subs	r1, r1, #1
   1694c:	orr	r2, r2, ip
   16950:	bne	16934 <close_stdout@@Base+0x28f8>
   16954:	b	168cc <close_stdout@@Base+0x2890>
   16958:	mov	r1, fp
   1695c:	mvn	r0, #0
   16960:	str	r3, [sp, #4]
   16964:	bl	17484 <close_stdout@@Base+0x3448>
   16968:	ldr	r3, [sp, #4]
   1696c:	mov	r1, #8
   16970:	mov	r2, #0
   16974:	cmp	r0, sl
   16978:	movcs	ip, #0
   1697c:	movcc	ip, #1
   16980:	mulcs	sl, fp, sl
   16984:	mvncc	sl, #0
   16988:	subs	r1, r1, #1
   1698c:	orr	r2, r2, ip
   16990:	bne	16974 <close_stdout@@Base+0x2938>
   16994:	b	168cc <close_stdout@@Base+0x2890>
   16998:	mov	r1, fp
   1699c:	mvn	r0, #0
   169a0:	str	r3, [sp, #4]
   169a4:	bl	17484 <close_stdout@@Base+0x3448>
   169a8:	ldr	r3, [sp, #4]
   169ac:	mov	r1, #4
   169b0:	mov	r2, #0
   169b4:	cmp	r0, sl
   169b8:	movcs	ip, #0
   169bc:	movcc	ip, #1
   169c0:	mulcs	sl, fp, sl
   169c4:	mvncc	sl, #0
   169c8:	subs	r1, r1, #1
   169cc:	orr	r2, r2, ip
   169d0:	bne	169b4 <close_stdout@@Base+0x2978>
   169d4:	b	168cc <close_stdout@@Base+0x2890>
   169d8:	mov	r1, fp
   169dc:	mvn	r0, #0
   169e0:	str	r3, [sp, #4]
   169e4:	bl	17484 <close_stdout@@Base+0x3448>
   169e8:	ldr	r3, [sp, #4]
   169ec:	mov	r1, #5
   169f0:	mov	r2, #0
   169f4:	cmp	r0, sl
   169f8:	movcs	ip, #0
   169fc:	movcc	ip, #1
   16a00:	mulcs	sl, fp, sl
   16a04:	mvncc	sl, #0
   16a08:	subs	r1, r1, #1
   16a0c:	orr	r2, r2, ip
   16a10:	bne	169f4 <close_stdout@@Base+0x29b8>
   16a14:	b	168cc <close_stdout@@Base+0x2890>
   16a18:	mvn	r0, #0
   16a1c:	mov	r1, fp
   16a20:	str	r3, [sp, #4]
   16a24:	bl	17484 <close_stdout@@Base+0x3448>
   16a28:	ldr	r3, [sp, #4]
   16a2c:	cmp	sl, r0
   16a30:	bhi	16b24 <close_stdout@@Base+0x2ae8>
   16a34:	mul	sl, sl, fp
   16a38:	cmp	r0, sl
   16a3c:	bcc	16b24 <close_stdout@@Base+0x2ae8>
   16a40:	mul	sl, fp, sl
   16a44:	mov	r2, #0
   16a48:	b	168cc <close_stdout@@Base+0x2890>
   16a4c:	mvn	r0, #0
   16a50:	mov	r1, fp
   16a54:	str	r3, [sp, #4]
   16a58:	bl	17484 <close_stdout@@Base+0x3448>
   16a5c:	ldr	r3, [sp, #4]
   16a60:	cmp	sl, r0
   16a64:	bhi	168f8 <close_stdout@@Base+0x28bc>
   16a68:	b	16a40 <close_stdout@@Base+0x2a04>
   16a6c:	mov	r1, fp
   16a70:	mvn	r0, #0
   16a74:	str	r3, [sp, #4]
   16a78:	bl	17484 <close_stdout@@Base+0x3448>
   16a7c:	ldr	r3, [sp, #4]
   16a80:	mov	r1, #6
   16a84:	mov	r2, #0
   16a88:	cmp	r0, sl
   16a8c:	movcs	ip, #0
   16a90:	movcc	ip, #1
   16a94:	mulcs	sl, fp, sl
   16a98:	mvncc	sl, #0
   16a9c:	subs	r1, r1, #1
   16aa0:	orr	r2, r2, ip
   16aa4:	bne	16a88 <close_stdout@@Base+0x2a4c>
   16aa8:	b	168cc <close_stdout@@Base+0x2890>
   16aac:	cmp	sl, #4194304	; 0x400000
   16ab0:	lslcc	sl, sl, #10
   16ab4:	movcc	r2, #0
   16ab8:	bcc	168cc <close_stdout@@Base+0x2890>
   16abc:	b	168f8 <close_stdout@@Base+0x28bc>
   16ac0:	mov	r1, fp
   16ac4:	mvn	r0, #0
   16ac8:	str	r3, [sp, #4]
   16acc:	bl	17484 <close_stdout@@Base+0x3448>
   16ad0:	ldr	r3, [sp, #4]
   16ad4:	mov	r1, #3
   16ad8:	mov	r2, #0
   16adc:	cmp	r0, sl
   16ae0:	movcs	ip, #0
   16ae4:	movcc	ip, #1
   16ae8:	mulcs	sl, fp, sl
   16aec:	mvncc	sl, #0
   16af0:	subs	r1, r1, #1
   16af4:	orr	r2, r2, ip
   16af8:	bne	16adc <close_stdout@@Base+0x2aa0>
   16afc:	b	168cc <close_stdout@@Base+0x2890>
   16b00:	ldrb	r8, [r3, #2]
   16b04:	mov	fp, #1024	; 0x400
   16b08:	cmp	r8, #66	; 0x42
   16b0c:	moveq	r8, #3
   16b10:	movne	r8, #1
   16b14:	b	1679c <close_stdout@@Base+0x2760>
   16b18:	mov	r8, #2
   16b1c:	mov	fp, #1000	; 0x3e8
   16b20:	b	1679c <close_stdout@@Base+0x2760>
   16b24:	mov	r2, #1
   16b28:	mvn	sl, #0
   16b2c:	b	168cc <close_stdout@@Base+0x2890>
   16b30:	bl	111e8 <__stack_chk_fail@plt>
   16b34:	ldr	r0, [pc, #32]	; 16b5c <close_stdout@@Base+0x2b20>
   16b38:	mov	r2, #96	; 0x60
   16b3c:	ldr	r1, [pc, #28]	; 16b60 <close_stdout@@Base+0x2b24>
   16b40:	ldr	r3, [pc, #28]	; 16b64 <close_stdout@@Base+0x2b28>
   16b44:	add	r0, pc, r0
   16b48:	add	r1, pc, r1
   16b4c:	add	r3, pc, r3
   16b50:	bl	11434 <__assert_fail@plt>
   16b54:			; <UNDEFINED> instruction: 0x000129b8
   16b58:	andeq	r0, r0, r8, lsl r1
   16b5c:	andeq	r1, r0, r4, ror ip
   16b60:	muleq	r0, r8, ip
   16b64:	andeq	r1, r0, r0, ror #24
   16b68:	push	{r4, r5, r6, lr}
   16b6c:	sub	sp, sp, #8
   16b70:	mov	r4, r0
   16b74:	bl	11368 <fileno@plt>
   16b78:	cmp	r0, #0
   16b7c:	mov	r0, r4
   16b80:	blt	16bfc <close_stdout@@Base+0x2bc0>
   16b84:	bl	112a8 <__freading@plt>
   16b88:	cmp	r0, #0
   16b8c:	bne	16bc8 <close_stdout@@Base+0x2b8c>
   16b90:	mov	r0, r4
   16b94:	bl	16d7c <close_stdout@@Base+0x2d40>
   16b98:	cmp	r0, #0
   16b9c:	beq	16bf8 <close_stdout@@Base+0x2bbc>
   16ba0:	bl	1132c <__errno_location@plt>
   16ba4:	ldr	r6, [r0]
   16ba8:	mov	r5, r0
   16bac:	mov	r0, r4
   16bb0:	bl	1138c <fclose@plt>
   16bb4:	cmp	r6, #0
   16bb8:	mvnne	r0, #0
   16bbc:	strne	r6, [r5]
   16bc0:	add	sp, sp, #8
   16bc4:	pop	{r4, r5, r6, pc}
   16bc8:	mov	r0, r4
   16bcc:	bl	11368 <fileno@plt>
   16bd0:	mov	r1, #1
   16bd4:	mov	r2, #0
   16bd8:	mov	r3, #0
   16bdc:	str	r1, [sp]
   16be0:	bl	11224 <lseek64@plt>
   16be4:	mvn	r2, #0
   16be8:	mvn	r3, #0
   16bec:	cmp	r1, r3
   16bf0:	cmpeq	r0, r2
   16bf4:	bne	16b90 <close_stdout@@Base+0x2b54>
   16bf8:	mov	r0, r4
   16bfc:	add	sp, sp, #8
   16c00:	pop	{r4, r5, r6, lr}
   16c04:	b	1138c <fclose@plt>
   16c08:	push	{r1, r2, r3}
   16c0c:	movw	ip, #1030	; 0x406
   16c10:	ldr	r3, [pc, #336]	; 16d68 <close_stdout@@Base+0x2d2c>
   16c14:	push	{r4, r5, r6, r7, r8, lr}
   16c18:	add	r3, pc, r3
   16c1c:	ldr	lr, [pc, #328]	; 16d6c <close_stdout@@Base+0x2d30>
   16c20:	sub	sp, sp, #12
   16c24:	add	r2, sp, #40	; 0x28
   16c28:	mov	r6, r0
   16c2c:	ldr	r1, [sp, #36]	; 0x24
   16c30:	ldr	r4, [r3, lr]
   16c34:	cmp	r1, ip
   16c38:	str	r2, [sp]
   16c3c:	ldr	r3, [r4]
   16c40:	str	r3, [sp, #4]
   16c44:	bne	16cc8 <close_stdout@@Base+0x2c8c>
   16c48:	ldr	r8, [pc, #288]	; 16d70 <close_stdout@@Base+0x2d34>
   16c4c:	add	r3, sp, #44	; 0x2c
   16c50:	str	r3, [sp]
   16c54:	add	r8, pc, r8
   16c58:	ldr	r7, [sp, #40]	; 0x28
   16c5c:	ldr	r3, [r8]
   16c60:	mov	r2, r7
   16c64:	cmp	r3, #0
   16c68:	blt	16d54 <close_stdout@@Base+0x2d18>
   16c6c:	bl	11320 <fcntl@plt>
   16c70:	subs	r5, r0, #0
   16c74:	blt	16cd8 <close_stdout@@Base+0x2c9c>
   16c78:	ldr	r3, [pc, #244]	; 16d74 <close_stdout@@Base+0x2d38>
   16c7c:	mov	r2, #1
   16c80:	add	r3, pc, r3
   16c84:	str	r2, [r3]
   16c88:	cmp	r5, #0
   16c8c:	blt	16ca4 <close_stdout@@Base+0x2c68>
   16c90:	ldr	r3, [pc, #224]	; 16d78 <close_stdout@@Base+0x2d3c>
   16c94:	add	r3, pc, r3
   16c98:	ldr	r3, [r3]
   16c9c:	cmn	r3, #1
   16ca0:	beq	16d08 <close_stdout@@Base+0x2ccc>
   16ca4:	ldr	r2, [sp, #4]
   16ca8:	mov	r0, r5
   16cac:	ldr	r3, [r4]
   16cb0:	cmp	r2, r3
   16cb4:	bne	16d64 <close_stdout@@Base+0x2d28>
   16cb8:	add	sp, sp, #12
   16cbc:	pop	{r4, r5, r6, r7, r8, lr}
   16cc0:	add	sp, sp, #12
   16cc4:	bx	lr
   16cc8:	ldr	r2, [sp, #40]	; 0x28
   16ccc:	bl	11320 <fcntl@plt>
   16cd0:	mov	r5, r0
   16cd4:	b	16ca4 <close_stdout@@Base+0x2c68>
   16cd8:	bl	1132c <__errno_location@plt>
   16cdc:	ldr	r3, [r0]
   16ce0:	cmp	r3, #22
   16ce4:	bne	16c78 <close_stdout@@Base+0x2c3c>
   16ce8:	mov	r0, r6
   16cec:	mov	r2, r7
   16cf0:	mov	r1, #0
   16cf4:	bl	16c08 <close_stdout@@Base+0x2bcc>
   16cf8:	subs	r5, r0, #0
   16cfc:	blt	16ca4 <close_stdout@@Base+0x2c68>
   16d00:	mvn	r3, #0
   16d04:	str	r3, [r8]
   16d08:	mov	r0, r5
   16d0c:	mov	r1, #1
   16d10:	bl	11320 <fcntl@plt>
   16d14:	subs	r2, r0, #0
   16d18:	blt	16d34 <close_stdout@@Base+0x2cf8>
   16d1c:	orr	r2, r2, #1
   16d20:	mov	r0, r5
   16d24:	mov	r1, #2
   16d28:	bl	11320 <fcntl@plt>
   16d2c:	cmn	r0, #1
   16d30:	bne	16ca4 <close_stdout@@Base+0x2c68>
   16d34:	bl	1132c <__errno_location@plt>
   16d38:	ldr	r7, [r0]
   16d3c:	mov	r6, r0
   16d40:	mov	r0, r5
   16d44:	mvn	r5, #0
   16d48:	bl	11428 <close@plt>
   16d4c:	str	r7, [r6]
   16d50:	b	16ca4 <close_stdout@@Base+0x2c68>
   16d54:	mov	r1, #0
   16d58:	bl	16c08 <close_stdout@@Base+0x2bcc>
   16d5c:	mov	r5, r0
   16d60:	b	16c88 <close_stdout@@Base+0x2c4c>
   16d64:	bl	111e8 <__stack_chk_fail@plt>
   16d68:	andeq	r2, r1, r0, ror #7
   16d6c:	andeq	r0, r0, r8, lsl r1
   16d70:	andeq	r2, r1, ip, lsl r7
   16d74:	strdeq	r2, [r1], -r0
   16d78:	ldrdeq	r2, [r1], -ip
   16d7c:	push	{r4, lr}
   16d80:	subs	r4, r0, #0
   16d84:	sub	sp, sp, #8
   16d88:	beq	16d98 <close_stdout@@Base+0x2d5c>
   16d8c:	bl	112a8 <__freading@plt>
   16d90:	cmp	r0, #0
   16d94:	bne	16da8 <close_stdout@@Base+0x2d6c>
   16d98:	mov	r0, r4
   16d9c:	add	sp, sp, #8
   16da0:	pop	{r4, lr}
   16da4:	b	1117c <fflush@plt>
   16da8:	ldr	r3, [r4]
   16dac:	tst	r3, #256	; 0x100
   16db0:	beq	16d98 <close_stdout@@Base+0x2d5c>
   16db4:	mov	r3, #1
   16db8:	mov	r0, r4
   16dbc:	str	r3, [sp]
   16dc0:	mov	r2, #0
   16dc4:	mov	r3, #0
   16dc8:	bl	16ddc <close_stdout@@Base+0x2da0>
   16dcc:	mov	r0, r4
   16dd0:	add	sp, sp, #8
   16dd4:	pop	{r4, lr}
   16dd8:	b	1117c <fflush@plt>
   16ddc:	push	{r4, r5, r6, r7, lr}
   16de0:	sub	sp, sp, #20
   16de4:	ldmib	r0, {r1, ip}
   16de8:	mov	r6, r0
   16dec:	ldr	r4, [sp, #40]	; 0x28
   16df0:	cmp	ip, r1
   16df4:	beq	16e0c <close_stdout@@Base+0x2dd0>
   16df8:	str	r4, [sp, #40]	; 0x28
   16dfc:	mov	r0, r6
   16e00:	add	sp, sp, #20
   16e04:	pop	{r4, r5, r6, r7, lr}
   16e08:	b	113a4 <fseeko64@plt>
   16e0c:	ldr	ip, [r0, #20]
   16e10:	ldr	r1, [r0, #16]
   16e14:	cmp	ip, r1
   16e18:	bne	16df8 <close_stdout@@Base+0x2dbc>
   16e1c:	ldr	r7, [r0, #36]	; 0x24
   16e20:	cmp	r7, #0
   16e24:	bne	16df8 <close_stdout@@Base+0x2dbc>
   16e28:	str	r2, [sp, #12]
   16e2c:	mvn	r5, #0
   16e30:	str	r3, [sp, #8]
   16e34:	bl	11368 <fileno@plt>
   16e38:	str	r4, [sp]
   16e3c:	mvn	r4, #0
   16e40:	ldr	r2, [sp, #12]
   16e44:	ldr	r3, [sp, #8]
   16e48:	bl	11224 <lseek64@plt>
   16e4c:	mov	r2, r0
   16e50:	mov	r3, r1
   16e54:	cmp	r3, r5
   16e58:	cmpeq	r2, r4
   16e5c:	beq	16e7c <close_stdout@@Base+0x2e40>
   16e60:	ldr	r1, [r6]
   16e64:	mov	r0, r7
   16e68:	strd	r2, [r6, #80]	; 0x50
   16e6c:	bic	r3, r1, #16
   16e70:	str	r3, [r6]
   16e74:	add	sp, sp, #20
   16e78:	pop	{r4, r5, r6, r7, pc}
   16e7c:	mvn	r0, #0
   16e80:	b	16e74 <close_stdout@@Base+0x2e38>
   16e84:	push	{r4, r5, r6, lr}
   16e88:	mov	r4, r0
   16e8c:	bl	11248 <__fpending@plt>
   16e90:	mov	r6, r0
   16e94:	mov	r0, r4
   16e98:	ldr	r4, [r4]
   16e9c:	bl	16b68 <close_stdout@@Base+0x2b2c>
   16ea0:	and	r4, r4, #32
   16ea4:	adds	r5, r0, #0
   16ea8:	movne	r5, #1
   16eac:	cmp	r4, #0
   16eb0:	bne	16ed0 <close_stdout@@Base+0x2e94>
   16eb4:	cmp	r5, #0
   16eb8:	beq	16ec8 <close_stdout@@Base+0x2e8c>
   16ebc:	cmp	r6, #0
   16ec0:	beq	16eec <close_stdout@@Base+0x2eb0>
   16ec4:	mvn	r4, #0
   16ec8:	mov	r0, r4
   16ecc:	pop	{r4, r5, r6, pc}
   16ed0:	cmp	r5, #0
   16ed4:	bne	16ec4 <close_stdout@@Base+0x2e88>
   16ed8:	bl	1132c <__errno_location@plt>
   16edc:	mvn	r4, #0
   16ee0:	str	r5, [r0]
   16ee4:	mov	r0, r4
   16ee8:	pop	{r4, r5, r6, pc}
   16eec:	bl	1132c <__errno_location@plt>
   16ef0:	ldr	r4, [r0]
   16ef4:	subs	r4, r4, #9
   16ef8:	mvnne	r4, #0
   16efc:	mov	r0, r4
   16f00:	pop	{r4, r5, r6, pc}
   16f04:	ldr	r3, [pc, #984]	; 172e4 <close_stdout@@Base+0x32a8>
   16f08:	mov	r0, #14
   16f0c:	ldr	r2, [pc, #980]	; 172e8 <close_stdout@@Base+0x32ac>
   16f10:	add	r3, pc, r3
   16f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f18:	sub	sp, sp, #132	; 0x84
   16f1c:	ldr	r6, [r3, r2]
   16f20:	ldr	r3, [r6]
   16f24:	str	r3, [sp, #124]	; 0x7c
   16f28:	bl	113e0 <nl_langinfo@plt>
   16f2c:	subs	r5, r0, #0
   16f30:	beq	16fe4 <close_stdout@@Base+0x2fa8>
   16f34:	ldr	r3, [pc, #944]	; 172ec <close_stdout@@Base+0x32b0>
   16f38:	ldr	r4, [pc, r3]
   16f3c:	cmp	r4, #0
   16f40:	beq	16ff0 <close_stdout@@Base+0x2fb4>
   16f44:	ldrb	r7, [r4]
   16f48:	cmp	r7, #0
   16f4c:	bne	16f80 <close_stdout@@Base+0x2f44>
   16f50:	b	16fb8 <close_stdout@@Base+0x2f7c>
   16f54:	mov	r0, r4
   16f58:	bl	112fc <strlen@plt>
   16f5c:	add	r0, r0, #1
   16f60:	add	r7, r4, r0
   16f64:	mov	r0, r7
   16f68:	bl	112fc <strlen@plt>
   16f6c:	add	r0, r0, #1
   16f70:	add	r4, r7, r0
   16f74:	ldrb	r7, [r7, r0]
   16f78:	cmp	r7, #0
   16f7c:	beq	16fb8 <close_stdout@@Base+0x2f7c>
   16f80:	mov	r0, r5
   16f84:	mov	r1, r4
   16f88:	bl	11164 <strcmp@plt>
   16f8c:	cmp	r0, #0
   16f90:	beq	16fa8 <close_stdout@@Base+0x2f6c>
   16f94:	cmp	r7, #42	; 0x2a
   16f98:	bne	16f54 <close_stdout@@Base+0x2f18>
   16f9c:	ldrb	r3, [r4, #1]
   16fa0:	cmp	r3, #0
   16fa4:	bne	16f54 <close_stdout@@Base+0x2f18>
   16fa8:	mov	r0, r4
   16fac:	bl	112fc <strlen@plt>
   16fb0:	add	r0, r0, #1
   16fb4:	add	r5, r4, r0
   16fb8:	ldrb	r3, [r5]
   16fbc:	cmp	r3, #0
   16fc0:	ldreq	r5, [pc, #808]	; 172f0 <close_stdout@@Base+0x32b4>
   16fc4:	addeq	r5, pc, r5
   16fc8:	ldr	r2, [sp, #124]	; 0x7c
   16fcc:	mov	r0, r5
   16fd0:	ldr	r3, [r6]
   16fd4:	cmp	r2, r3
   16fd8:	bne	172b8 <close_stdout@@Base+0x327c>
   16fdc:	add	sp, sp, #132	; 0x84
   16fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fe4:	ldr	r5, [pc, #776]	; 172f4 <close_stdout@@Base+0x32b8>
   16fe8:	add	r5, pc, r5
   16fec:	b	16f34 <close_stdout@@Base+0x2ef8>
   16ff0:	ldr	r0, [pc, #768]	; 172f8 <close_stdout@@Base+0x32bc>
   16ff4:	add	r0, pc, r0
   16ff8:	bl	11284 <getenv@plt>
   16ffc:	subs	r8, r0, #0
   17000:	beq	17290 <close_stdout@@Base+0x3254>
   17004:	ldrb	r3, [r8]
   17008:	cmp	r3, #0
   1700c:	beq	17224 <close_stdout@@Base+0x31e8>
   17010:	bl	112fc <strlen@plt>
   17014:	subs	sl, r0, #0
   17018:	subne	r3, sl, #1
   1701c:	bne	17234 <close_stdout@@Base+0x31f8>
   17020:	mov	r9, #0
   17024:	mov	fp, r9
   17028:	add	r9, sl, r9
   1702c:	add	r0, r9, #14
   17030:	bl	11290 <malloc@plt>
   17034:	subs	r7, r0, #0
   17038:	beq	17284 <close_stdout@@Base+0x3248>
   1703c:	mov	r1, r8
   17040:	mov	r2, sl
   17044:	bl	111a0 <memcpy@plt>
   17048:	cmp	fp, #0
   1704c:	add	ip, r7, r9
   17050:	movne	r3, #47	; 0x2f
   17054:	strbne	r3, [r7, sl]
   17058:	ldr	r3, [pc, #668]	; 172fc <close_stdout@@Base+0x32c0>
   1705c:	add	r3, pc, r3
   17060:	ldm	r3!, {r0, r1, r2}
   17064:	ldrh	r3, [r3]
   17068:	str	r0, [r7, r9]
   1706c:	mov	r0, r7
   17070:	str	r1, [ip, #4]
   17074:	mov	r1, #32768	; 0x8000
   17078:	strh	r3, [ip, #12]
   1707c:	str	r2, [ip, #8]
   17080:	bl	1126c <open64@plt>
   17084:	subs	r8, r0, #0
   17088:	blt	1724c <close_stdout@@Base+0x3210>
   1708c:	ldr	r1, [pc, #620]	; 17300 <close_stdout@@Base+0x32c4>
   17090:	add	r1, pc, r1
   17094:	bl	11128 <fdopen@plt>
   17098:	subs	fp, r0, #0
   1709c:	beq	172a4 <close_stdout@@Base+0x3268>
   170a0:	ldr	r0, [pc, #604]	; 17304 <close_stdout@@Base+0x32c8>
   170a4:	add	sl, sp, #20
   170a8:	add	r9, sp, #72	; 0x48
   170ac:	mov	r8, #0
   170b0:	add	r0, pc, r0
   170b4:	str	r0, [sp, #12]
   170b8:	ldr	r3, [fp, #4]
   170bc:	ldr	r2, [fp, #8]
   170c0:	cmp	r3, r2
   170c4:	bcs	171b0 <close_stdout@@Base+0x3174>
   170c8:	add	r2, r3, #1
   170cc:	str	r2, [fp, #4]
   170d0:	ldrb	r0, [r3]
   170d4:	cmp	r0, #32
   170d8:	beq	170b8 <close_stdout@@Base+0x307c>
   170dc:	sub	r3, r0, #9
   170e0:	cmp	r3, #1
   170e4:	bls	170b8 <close_stdout@@Base+0x307c>
   170e8:	cmp	r0, #35	; 0x23
   170ec:	beq	171c4 <close_stdout@@Base+0x3188>
   170f0:	mov	r1, fp
   170f4:	bl	11314 <ungetc@plt>
   170f8:	mov	r0, fp
   170fc:	ldr	r1, [sp, #12]
   17100:	mov	r2, sl
   17104:	mov	r3, r9
   17108:	bl	11350 <fscanf@plt>
   1710c:	cmp	r0, #1
   17110:	ble	171f4 <close_stdout@@Base+0x31b8>
   17114:	mov	r0, sl
   17118:	bl	112fc <strlen@plt>
   1711c:	str	r0, [sp, #8]
   17120:	mov	r0, r9
   17124:	bl	112fc <strlen@plt>
   17128:	cmp	r8, #0
   1712c:	mov	r2, r0
   17130:	bne	17258 <close_stdout@@Base+0x321c>
   17134:	ldr	r3, [sp, #8]
   17138:	str	r2, [sp]
   1713c:	add	r8, r0, r3
   17140:	add	r0, r8, #3
   17144:	add	r8, r8, #2
   17148:	bl	11290 <malloc@plt>
   1714c:	ldr	r2, [sp]
   17150:	mov	r3, r0
   17154:	cmp	r3, #0
   17158:	beq	172bc <close_stdout@@Base+0x3280>
   1715c:	ldr	r0, [sp, #8]
   17160:	movw	r1, #65534	; 0xfffe
   17164:	movt	r1, #65535	; 0xffff
   17168:	rsb	r2, r2, r8
   1716c:	rsb	r1, r0, r1
   17170:	stm	sp, {r2, r3}
   17174:	add	r0, r1, r2
   17178:	mov	r1, sl
   1717c:	add	r0, r3, r0
   17180:	mov	r4, r3
   17184:	bl	1123c <strcpy@plt>
   17188:	ldr	r2, [sp]
   1718c:	ldr	r3, [sp, #4]
   17190:	mov	r1, r9
   17194:	sub	r0, r2, #1
   17198:	add	r0, r3, r0
   1719c:	bl	1123c <strcpy@plt>
   171a0:	ldr	r3, [fp, #4]
   171a4:	ldr	r2, [fp, #8]
   171a8:	cmp	r3, r2
   171ac:	bcc	170c8 <close_stdout@@Base+0x308c>
   171b0:	mov	r0, fp
   171b4:	bl	113b0 <__uflow@plt>
   171b8:	cmn	r0, #1
   171bc:	beq	171f4 <close_stdout@@Base+0x31b8>
   171c0:	b	170d4 <close_stdout@@Base+0x3098>
   171c4:	ldr	r3, [fp, #4]
   171c8:	ldr	r2, [fp, #8]
   171cc:	cmp	r3, r2
   171d0:	bcs	172d8 <close_stdout@@Base+0x329c>
   171d4:	add	r2, r3, #1
   171d8:	str	r2, [fp, #4]
   171dc:	ldrb	r0, [r3]
   171e0:	cmp	r0, #10
   171e4:	cmnne	r0, #1
   171e8:	bne	171c4 <close_stdout@@Base+0x3188>
   171ec:	cmn	r0, #1
   171f0:	bne	170b8 <close_stdout@@Base+0x307c>
   171f4:	mov	r0, fp
   171f8:	bl	16b68 <close_stdout@@Base+0x2b2c>
   171fc:	cmp	r8, #0
   17200:	beq	1724c <close_stdout@@Base+0x3210>
   17204:	mov	r3, #0
   17208:	strb	r3, [r4, r8]
   1720c:	mov	r0, r7
   17210:	bl	11188 <free@plt>
   17214:	ldr	r3, [pc, #236]	; 17308 <close_stdout@@Base+0x32cc>
   17218:	add	r3, pc, r3
   1721c:	str	r4, [r3]
   17220:	b	16f44 <close_stdout@@Base+0x2f08>
   17224:	ldr	r8, [pc, #224]	; 1730c <close_stdout@@Base+0x32d0>
   17228:	mov	r3, #7
   1722c:	mov	sl, #8
   17230:	add	r8, pc, r8
   17234:	ldrb	r3, [r8, r3]
   17238:	cmp	r3, #47	; 0x2f
   1723c:	movne	r9, #1
   17240:	movne	fp, r9
   17244:	bne	17028 <close_stdout@@Base+0x2fec>
   17248:	b	17020 <close_stdout@@Base+0x2fe4>
   1724c:	ldr	r4, [pc, #188]	; 17310 <close_stdout@@Base+0x32d4>
   17250:	add	r4, pc, r4
   17254:	b	1720c <close_stdout@@Base+0x31d0>
   17258:	ldr	r0, [sp, #8]
   1725c:	str	r2, [sp]
   17260:	add	r3, r0, r2
   17264:	mov	r0, r4
   17268:	add	r8, r3, r8
   1726c:	add	r1, r8, #3
   17270:	add	r8, r8, #2
   17274:	bl	111f4 <realloc@plt>
   17278:	ldr	r2, [sp]
   1727c:	mov	r3, r0
   17280:	b	17154 <close_stdout@@Base+0x3118>
   17284:	ldr	r4, [pc, #136]	; 17314 <close_stdout@@Base+0x32d8>
   17288:	add	r4, pc, r4
   1728c:	b	17214 <close_stdout@@Base+0x31d8>
   17290:	ldr	r8, [pc, #128]	; 17318 <close_stdout@@Base+0x32dc>
   17294:	mov	r3, #7
   17298:	mov	sl, #8
   1729c:	add	r8, pc, r8
   172a0:	b	17234 <close_stdout@@Base+0x31f8>
   172a4:	ldr	r4, [pc, #112]	; 1731c <close_stdout@@Base+0x32e0>
   172a8:	mov	r0, r8
   172ac:	add	r4, pc, r4
   172b0:	bl	11428 <close@plt>
   172b4:	b	1720c <close_stdout@@Base+0x31d0>
   172b8:	bl	111e8 <__stack_chk_fail@plt>
   172bc:	mov	r0, r4
   172c0:	ldr	r4, [pc, #88]	; 17320 <close_stdout@@Base+0x32e4>
   172c4:	bl	11188 <free@plt>
   172c8:	mov	r0, fp
   172cc:	add	r4, pc, r4
   172d0:	bl	16b68 <close_stdout@@Base+0x2b2c>
   172d4:	b	1720c <close_stdout@@Base+0x31d0>
   172d8:	mov	r0, fp
   172dc:	bl	113b0 <__uflow@plt>
   172e0:	b	171e0 <close_stdout@@Base+0x31a4>
   172e4:	andeq	r2, r1, r8, ror #1
   172e8:	andeq	r0, r0, r8, lsl r1
   172ec:	andeq	r2, r1, ip, lsr r4
   172f0:	andeq	r1, r0, r8, lsr r8
   172f4:	andeq	r1, r0, r8, lsl #4
   172f8:	andeq	r1, r0, r0, lsl r8
   172fc:			; <UNDEFINED> instruction: 0x000017b8
   17300:	andeq	r1, r0, r4, ror r2
   17304:	andeq	r1, r0, r4, ror r7
   17308:	andeq	r2, r1, ip, asr r1
   1730c:	andeq	r1, r0, r0, asr #11
   17310:	andeq	r0, r0, r0, lsr #31
   17314:	andeq	r0, r0, r8, ror #30
   17318:	andeq	r1, r0, r4, asr r5
   1731c:	andeq	r0, r0, r4, asr #30
   17320:	andeq	r0, r0, r4, lsr #30
   17324:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17328:	mov	r4, r0
   1732c:	mov	r8, r1
   17330:	mov	r5, r2
   17334:	mov	r6, r3
   17338:	bl	1132c <__errno_location@plt>
   1733c:	mov	sl, #0
   17340:	mov	r9, r0
   17344:	str	sl, [r9]
   17348:	mov	r0, r4
   1734c:	mov	r1, r5
   17350:	bl	11278 <strcoll@plt>
   17354:	subs	r3, r0, #0
   17358:	mov	r0, r4
   1735c:	beq	17368 <close_stdout@@Base+0x332c>
   17360:	mov	r0, r3
   17364:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17368:	bl	112fc <strlen@plt>
   1736c:	add	r7, r0, #1
   17370:	mov	r0, r5
   17374:	bl	112fc <strlen@plt>
   17378:	subs	r8, r8, r7
   1737c:	add	r4, r4, r7
   17380:	add	r0, r0, #1
   17384:	add	r5, r5, r0
   17388:	rsb	r6, r0, r6
   1738c:	beq	173a0 <close_stdout@@Base+0x3364>
   17390:	cmp	r6, #0
   17394:	bne	17344 <close_stdout@@Base+0x3308>
   17398:	mov	r0, #1
   1739c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   173a0:	subs	r0, r6, #0
   173a4:	mvnne	r0, #0
   173a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   173ac:	cmp	r1, r3
   173b0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   173b4:	mov	r4, r1
   173b8:	mov	r5, r3
   173bc:	mov	r6, r2
   173c0:	mov	r7, r0
   173c4:	beq	17404 <close_stdout@@Base+0x33c8>
   173c8:	ldrb	r9, [r7, r4]
   173cc:	mov	r3, #0
   173d0:	ldrb	r8, [r6, r5]
   173d4:	mov	r0, r7
   173d8:	strb	r3, [r7, r4]
   173dc:	add	r1, r4, #1
   173e0:	strb	r3, [r6, r5]
   173e4:	mov	r2, r6
   173e8:	add	r3, r5, #1
   173ec:	bl	17324 <close_stdout@@Base+0x32e8>
   173f0:	strb	r9, [r7, r4]
   173f4:	strb	r8, [r6, r5]
   173f8:	mov	r3, r0
   173fc:	mov	r0, r3
   17400:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17404:	mov	r1, r2
   17408:	mov	r2, r4
   1740c:	bl	111d0 <memcmp@plt>
   17410:	subs	r8, r0, #0
   17414:	bne	173c8 <close_stdout@@Base+0x338c>
   17418:	bl	1132c <__errno_location@plt>
   1741c:	mov	r3, r8
   17420:	str	r8, [r0]
   17424:	mov	r0, r3
   17428:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1742c:	cmp	r1, r3
   17430:	push	{r4, r5, r6, r7, r8, lr}
   17434:	mov	r4, r1
   17438:	mov	r5, r3
   1743c:	mov	r6, r2
   17440:	mov	r7, r0
   17444:	beq	17460 <close_stdout@@Base+0x3424>
   17448:	mov	r0, r7
   1744c:	mov	r1, r4
   17450:	mov	r2, r6
   17454:	mov	r3, r5
   17458:	pop	{r4, r5, r6, r7, r8, lr}
   1745c:	b	17324 <close_stdout@@Base+0x32e8>
   17460:	mov	r1, r2
   17464:	mov	r2, r4
   17468:	bl	111d0 <memcmp@plt>
   1746c:	subs	r8, r0, #0
   17470:	bne	17448 <close_stdout@@Base+0x340c>
   17474:	bl	1132c <__errno_location@plt>
   17478:	str	r8, [r0]
   1747c:	mov	r0, r8
   17480:	pop	{r4, r5, r6, r7, r8, pc}
   17484:	subs	r2, r1, #1
   17488:	bxeq	lr
   1748c:	bcc	17664 <close_stdout@@Base+0x3628>
   17490:	cmp	r0, r1
   17494:	bls	17648 <close_stdout@@Base+0x360c>
   17498:	tst	r1, r2
   1749c:	beq	17654 <close_stdout@@Base+0x3618>
   174a0:	clz	r3, r0
   174a4:	clz	r2, r1
   174a8:	sub	r3, r2, r3
   174ac:	rsbs	r3, r3, #31
   174b0:	addne	r3, r3, r3, lsl #1
   174b4:	mov	r2, #0
   174b8:	addne	pc, pc, r3, lsl #2
   174bc:	nop	{0}
   174c0:	cmp	r0, r1, lsl #31
   174c4:	adc	r2, r2, r2
   174c8:	subcs	r0, r0, r1, lsl #31
   174cc:	cmp	r0, r1, lsl #30
   174d0:	adc	r2, r2, r2
   174d4:	subcs	r0, r0, r1, lsl #30
   174d8:	cmp	r0, r1, lsl #29
   174dc:	adc	r2, r2, r2
   174e0:	subcs	r0, r0, r1, lsl #29
   174e4:	cmp	r0, r1, lsl #28
   174e8:	adc	r2, r2, r2
   174ec:	subcs	r0, r0, r1, lsl #28
   174f0:	cmp	r0, r1, lsl #27
   174f4:	adc	r2, r2, r2
   174f8:	subcs	r0, r0, r1, lsl #27
   174fc:	cmp	r0, r1, lsl #26
   17500:	adc	r2, r2, r2
   17504:	subcs	r0, r0, r1, lsl #26
   17508:	cmp	r0, r1, lsl #25
   1750c:	adc	r2, r2, r2
   17510:	subcs	r0, r0, r1, lsl #25
   17514:	cmp	r0, r1, lsl #24
   17518:	adc	r2, r2, r2
   1751c:	subcs	r0, r0, r1, lsl #24
   17520:	cmp	r0, r1, lsl #23
   17524:	adc	r2, r2, r2
   17528:	subcs	r0, r0, r1, lsl #23
   1752c:	cmp	r0, r1, lsl #22
   17530:	adc	r2, r2, r2
   17534:	subcs	r0, r0, r1, lsl #22
   17538:	cmp	r0, r1, lsl #21
   1753c:	adc	r2, r2, r2
   17540:	subcs	r0, r0, r1, lsl #21
   17544:	cmp	r0, r1, lsl #20
   17548:	adc	r2, r2, r2
   1754c:	subcs	r0, r0, r1, lsl #20
   17550:	cmp	r0, r1, lsl #19
   17554:	adc	r2, r2, r2
   17558:	subcs	r0, r0, r1, lsl #19
   1755c:	cmp	r0, r1, lsl #18
   17560:	adc	r2, r2, r2
   17564:	subcs	r0, r0, r1, lsl #18
   17568:	cmp	r0, r1, lsl #17
   1756c:	adc	r2, r2, r2
   17570:	subcs	r0, r0, r1, lsl #17
   17574:	cmp	r0, r1, lsl #16
   17578:	adc	r2, r2, r2
   1757c:	subcs	r0, r0, r1, lsl #16
   17580:	cmp	r0, r1, lsl #15
   17584:	adc	r2, r2, r2
   17588:	subcs	r0, r0, r1, lsl #15
   1758c:	cmp	r0, r1, lsl #14
   17590:	adc	r2, r2, r2
   17594:	subcs	r0, r0, r1, lsl #14
   17598:	cmp	r0, r1, lsl #13
   1759c:	adc	r2, r2, r2
   175a0:	subcs	r0, r0, r1, lsl #13
   175a4:	cmp	r0, r1, lsl #12
   175a8:	adc	r2, r2, r2
   175ac:	subcs	r0, r0, r1, lsl #12
   175b0:	cmp	r0, r1, lsl #11
   175b4:	adc	r2, r2, r2
   175b8:	subcs	r0, r0, r1, lsl #11
   175bc:	cmp	r0, r1, lsl #10
   175c0:	adc	r2, r2, r2
   175c4:	subcs	r0, r0, r1, lsl #10
   175c8:	cmp	r0, r1, lsl #9
   175cc:	adc	r2, r2, r2
   175d0:	subcs	r0, r0, r1, lsl #9
   175d4:	cmp	r0, r1, lsl #8
   175d8:	adc	r2, r2, r2
   175dc:	subcs	r0, r0, r1, lsl #8
   175e0:	cmp	r0, r1, lsl #7
   175e4:	adc	r2, r2, r2
   175e8:	subcs	r0, r0, r1, lsl #7
   175ec:	cmp	r0, r1, lsl #6
   175f0:	adc	r2, r2, r2
   175f4:	subcs	r0, r0, r1, lsl #6
   175f8:	cmp	r0, r1, lsl #5
   175fc:	adc	r2, r2, r2
   17600:	subcs	r0, r0, r1, lsl #5
   17604:	cmp	r0, r1, lsl #4
   17608:	adc	r2, r2, r2
   1760c:	subcs	r0, r0, r1, lsl #4
   17610:	cmp	r0, r1, lsl #3
   17614:	adc	r2, r2, r2
   17618:	subcs	r0, r0, r1, lsl #3
   1761c:	cmp	r0, r1, lsl #2
   17620:	adc	r2, r2, r2
   17624:	subcs	r0, r0, r1, lsl #2
   17628:	cmp	r0, r1, lsl #1
   1762c:	adc	r2, r2, r2
   17630:	subcs	r0, r0, r1, lsl #1
   17634:	cmp	r0, r1
   17638:	adc	r2, r2, r2
   1763c:	subcs	r0, r0, r1
   17640:	mov	r0, r2
   17644:	bx	lr
   17648:	moveq	r0, #1
   1764c:	movne	r0, #0
   17650:	bx	lr
   17654:	clz	r2, r1
   17658:	rsb	r2, r2, #31
   1765c:	lsr	r0, r0, r2
   17660:	bx	lr
   17664:	cmp	r0, #0
   17668:	mvnne	r0, #0
   1766c:	b	17690 <close_stdout@@Base+0x3654>
   17670:	cmp	r1, #0
   17674:	beq	17664 <close_stdout@@Base+0x3628>
   17678:	push	{r0, r1, lr}
   1767c:	bl	17484 <close_stdout@@Base+0x3448>
   17680:	pop	{r1, r2, lr}
   17684:	mul	r3, r2, r0
   17688:	sub	r1, r1, r3
   1768c:	bx	lr
   17690:	push	{r1, lr}
   17694:	mov	r0, #8
   17698:	bl	1114c <raise@plt>
   1769c:	pop	{r1, pc}
   176a0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   176a4:	mov	r7, r0
   176a8:	ldr	r6, [pc, #76]	; 176fc <close_stdout@@Base+0x36c0>
   176ac:	mov	r8, r1
   176b0:	ldr	r5, [pc, #72]	; 17700 <close_stdout@@Base+0x36c4>
   176b4:	mov	r9, r2
   176b8:	add	r6, pc, r6
   176bc:	bl	11108 <fdopen@plt-0x20>
   176c0:	add	r5, pc, r5
   176c4:	rsb	r6, r5, r6
   176c8:	asrs	r6, r6, #2
   176cc:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   176d0:	sub	r5, r5, #4
   176d4:	mov	r4, #0
   176d8:	add	r4, r4, #1
   176dc:	ldr	r3, [r5, #4]!
   176e0:	mov	r0, r7
   176e4:	mov	r1, r8
   176e8:	mov	r2, r9
   176ec:	blx	r3
   176f0:	cmp	r4, r6
   176f4:	bne	176d8 <close_stdout@@Base+0x369c>
   176f8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   176fc:	muleq	r1, ip, r7
   17700:	muleq	r1, r0, r7
   17704:	bx	lr
   17708:	ldr	r3, [pc, #28]	; 1772c <close_stdout@@Base+0x36f0>
   1770c:	mov	r1, #0
   17710:	ldr	r2, [pc, #24]	; 17730 <close_stdout@@Base+0x36f4>
   17714:	add	r3, pc, r3
   17718:	ldr	r3, [r3, r2]
   1771c:	cmp	r3, #0
   17720:	ldrne	r2, [r3]
   17724:	moveq	r2, r3
   17728:	b	11338 <__cxa_atexit@plt>
   1772c:	andeq	r1, r1, r4, ror #17
   17730:	andeq	r0, r0, r0, lsr r1

Disassembly of section .fini:

00017734 <.fini>:
   17734:	push	{r3, lr}
   17738:	pop	{r3, pc}
