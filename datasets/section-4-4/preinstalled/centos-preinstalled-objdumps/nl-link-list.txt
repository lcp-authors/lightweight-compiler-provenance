
centos-preinstalled/nl-link-list:     file format elf32-littlearm


Disassembly of section .init:

000108bc <.init>:
   108bc:	push	{r3, lr}
   108c0:	bl	10bfc <exit@plt+0x23c>
   108c4:	pop	{r3, pc}

Disassembly of section .plt:

000108c8 <nl_cli_link_parse_txqlen@plt-0x14>:
   108c8:	push	{lr}		; (str lr, [sp, #-4]!)
   108cc:	ldr	lr, [pc, #4]	; 108d8 <nl_cli_link_parse_txqlen@plt-0x4>
   108d0:	add	lr, pc, lr
   108d4:	ldr	pc, [lr, #8]!
   108d8:	andeq	r1, r1, r8, lsr #14

000108dc <nl_cli_link_parse_txqlen@plt>:
   108dc:	add	ip, pc, #0, 12
   108e0:	add	ip, ip, #69632	; 0x11000
   108e4:	ldr	pc, [ip, #1832]!	; 0x728

000108e8 <abort@plt>:
   108e8:	add	ip, pc, #0, 12
   108ec:	add	ip, ip, #69632	; 0x11000
   108f0:	ldr	pc, [ip, #1824]!	; 0x720

000108f4 <nl_cache_dump_filter@plt>:
   108f4:	add	ip, pc, #0, 12
   108f8:	add	ip, ip, #69632	; 0x11000
   108fc:	ldr	pc, [ip, #1816]!	; 0x718

00010900 <__libc_start_main@plt>:
   10900:	add	ip, pc, #0, 12
   10904:	add	ip, ip, #69632	; 0x11000
   10908:	ldr	pc, [ip, #1808]!	; 0x710

0001090c <__gmon_start__@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #69632	; 0x11000
   10914:	ldr	pc, [ip, #1800]!	; 0x708

00010918 <nl_cli_link_parse_weight@plt>:
   10918:	add	ip, pc, #0, 12
   1091c:	add	ip, ip, #69632	; 0x11000
   10920:	ldr	pc, [ip, #1792]!	; 0x700

00010924 <nl_cli_print_version@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #69632	; 0x11000
   1092c:	ldr	pc, [ip, #1784]!	; 0x6f8

00010930 <nl_cli_alloc_socket@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #69632	; 0x11000
   10938:	ldr	pc, [ip, #1776]!	; 0x6f0

0001093c <nl_cli_link_parse_name@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #69632	; 0x11000
   10944:	ldr	pc, [ip, #1768]!	; 0x6e8

00010948 <getopt_long@plt>:
   10948:	add	ip, pc, #0, 12
   1094c:	add	ip, ip, #69632	; 0x11000
   10950:	ldr	pc, [ip, #1760]!	; 0x6e0

00010954 <nl_cli_link_parse_mtu@plt>:
   10954:	add	ip, pc, #0, 12
   10958:	add	ip, ip, #69632	; 0x11000
   1095c:	ldr	pc, [ip, #1752]!	; 0x6d8

00010960 <__stack_chk_fail@plt>:
   10960:	add	ip, pc, #0, 12
   10964:	add	ip, ip, #69632	; 0x11000
   10968:	ldr	pc, [ip, #1744]!	; 0x6d0

0001096c <nl_cli_link_parse_ifindex@plt>:
   1096c:	add	ip, pc, #0, 12
   10970:	add	ip, ip, #69632	; 0x11000
   10974:	ldr	pc, [ip, #1736]!	; 0x6c8

00010978 <nl_cli_link_parse_family@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #69632	; 0x11000
   10980:	ldr	pc, [ip, #1728]!	; 0x6c0

00010984 <puts@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #69632	; 0x11000
   1098c:	ldr	pc, [ip, #1720]!	; 0x6b8

00010990 <nl_cli_connect@plt>:
   10990:	add	ip, pc, #0, 12
   10994:	add	ip, ip, #69632	; 0x11000
   10998:	ldr	pc, [ip, #1712]!	; 0x6b0

0001099c <nl_cli_link_alloc@plt>:
   1099c:	add	ip, pc, #0, 12
   109a0:	add	ip, ip, #69632	; 0x11000
   109a4:	ldr	pc, [ip, #1704]!	; 0x6a8

000109a8 <nl_cli_link_alloc_cache_family@plt>:
   109a8:	add	ip, pc, #0, 12
   109ac:	add	ip, ip, #69632	; 0x11000
   109b0:	ldr	pc, [ip, #1696]!	; 0x6a0

000109b4 <rtnl_link_get_family@plt>:
   109b4:	add	ip, pc, #0, 12
   109b8:	add	ip, ip, #69632	; 0x11000
   109bc:	ldr	pc, [ip, #1688]!	; 0x698

000109c0 <exit@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #69632	; 0x11000
   109c8:	ldr	pc, [ip, #1680]!	; 0x690

Disassembly of section .text:

000109cc <.text>:
   109cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109d0:	movw	r3, #8476	; 0x211c
   109d4:	movw	sl, #8472	; 0x2118
   109d8:	movt	r3, #2
   109dc:	movt	sl, #2
   109e0:	sub	sp, sp, #84	; 0x54
   109e4:	ldr	r3, [r3]
   109e8:	mov	r9, #0
   109ec:	ldr	r2, [sl]
   109f0:	mov	r6, r1
   109f4:	str	r9, [sp, #24]
   109f8:	mov	r7, r0
   109fc:	str	r3, [sp, #52]	; 0x34
   10a00:	movw	r8, #8480	; 0x2120
   10a04:	str	r2, [sp, #76]	; 0x4c
   10a08:	movt	r8, #2
   10a0c:	str	r9, [sp, #28]
   10a10:	add	r5, sp, #20
   10a14:	str	r9, [sp, #32]
   10a18:	mov	r4, r9
   10a1c:	str	r9, [sp, #36]	; 0x24
   10a20:	mov	fp, #2
   10a24:	str	r9, [sp, #40]	; 0x28
   10a28:	str	r9, [sp, #44]	; 0x2c
   10a2c:	str	r9, [sp, #48]	; 0x30
   10a30:	str	r9, [sp, #56]	; 0x38
   10a34:	str	r9, [sp, #60]	; 0x3c
   10a38:	str	r9, [sp, #64]	; 0x40
   10a3c:	str	r9, [sp, #68]	; 0x44
   10a40:	str	r9, [sp, #72]	; 0x48
   10a44:	bl	10930 <nl_cli_alloc_socket@plt>
   10a48:	mov	r1, r9
   10a4c:	str	r0, [sp, #12]
   10a50:	bl	10990 <nl_cli_connect@plt>
   10a54:	bl	1099c <nl_cli_link_alloc@plt>
   10a58:	mov	r9, r0
   10a5c:	str	r5, [sp]
   10a60:	movw	r2, #3436	; 0xd6c
   10a64:	movw	r3, #8292	; 0x2064
   10a68:	movt	r2, #1
   10a6c:	movt	r3, #2
   10a70:	mov	r0, r7
   10a74:	mov	r1, r6
   10a78:	str	r4, [sp, #20]
   10a7c:	bl	10948 <getopt_long@plt>
   10a80:	cmn	r0, #1
   10a84:	beq	10b80 <exit@plt+0x1c0>
   10a88:	movw	r3, #257	; 0x101
   10a8c:	cmp	r0, r3
   10a90:	beq	10b40 <exit@plt+0x180>
   10a94:	ble	10acc <exit@plt+0x10c>
   10a98:	cmp	r0, #260	; 0x104
   10a9c:	beq	10b60 <exit@plt+0x1a0>
   10aa0:	bgt	10af0 <exit@plt+0x130>
   10aa4:	movw	r3, #258	; 0x102
   10aa8:	cmp	r0, r3
   10aac:	beq	10b50 <exit@plt+0x190>
   10ab0:	add	r3, r3, #1
   10ab4:	cmp	r0, r3
   10ab8:	bne	10a5c <exit@plt+0x9c>
   10abc:	mov	r0, r9
   10ac0:	ldr	r1, [r8]
   10ac4:	bl	108dc <nl_cli_link_parse_txqlen@plt>
   10ac8:	b	10a5c <exit@plt+0x9c>
   10acc:	cmp	r0, #105	; 0x69
   10ad0:	beq	10b30 <exit@plt+0x170>
   10ad4:	ble	10b14 <exit@plt+0x154>
   10ad8:	cmp	r0, #110	; 0x6e
   10adc:	beq	10b70 <exit@plt+0x1b0>
   10ae0:	cmp	r0, #118	; 0x76
   10ae4:	bne	10a5c <exit@plt+0x9c>
   10ae8:	bl	10924 <nl_cli_print_version@plt>
   10aec:	b	10a5c <exit@plt+0x9c>
   10af0:	movw	r3, #261	; 0x105
   10af4:	cmp	r0, r3
   10af8:	moveq	r3, #1
   10afc:	streq	r3, [sp, #24]
   10b00:	beq	10a5c <exit@plt+0x9c>
   10b04:	add	r3, r3, #1
   10b08:	cmp	r0, r3
   10b0c:	streq	fp, [sp, #24]
   10b10:	b	10a5c <exit@plt+0x9c>
   10b14:	cmp	r0, #104	; 0x68
   10b18:	bne	10a5c <exit@plt+0x9c>
   10b1c:	movw	r0, #3444	; 0xd74
   10b20:	movt	r0, #1
   10b24:	bl	10984 <puts@plt>
   10b28:	mov	r0, #0
   10b2c:	bl	109c0 <exit@plt>
   10b30:	mov	r0, r9
   10b34:	ldr	r1, [r8]
   10b38:	bl	1096c <nl_cli_link_parse_ifindex@plt>
   10b3c:	b	10a5c <exit@plt+0x9c>
   10b40:	mov	r0, r9
   10b44:	ldr	r1, [r8]
   10b48:	bl	10978 <nl_cli_link_parse_family@plt>
   10b4c:	b	10a5c <exit@plt+0x9c>
   10b50:	mov	r0, r9
   10b54:	ldr	r1, [r8]
   10b58:	bl	10954 <nl_cli_link_parse_mtu@plt>
   10b5c:	b	10a5c <exit@plt+0x9c>
   10b60:	mov	r0, r9
   10b64:	ldr	r1, [r8]
   10b68:	bl	10918 <nl_cli_link_parse_weight@plt>
   10b6c:	b	10a5c <exit@plt+0x9c>
   10b70:	mov	r0, r9
   10b74:	ldr	r1, [r8]
   10b78:	bl	1093c <nl_cli_link_parse_name@plt>
   10b7c:	b	10a5c <exit@plt+0x9c>
   10b80:	mov	r0, r9
   10b84:	bl	109b4 <rtnl_link_get_family@plt>
   10b88:	mov	r1, r0
   10b8c:	ldr	r0, [sp, #12]
   10b90:	bl	109a8 <nl_cli_link_alloc_cache_family@plt>
   10b94:	mov	r2, r9
   10b98:	add	r1, sp, #24
   10b9c:	bl	108f4 <nl_cache_dump_filter@plt>
   10ba0:	ldr	r2, [sp, #76]	; 0x4c
   10ba4:	ldr	r3, [sl]
   10ba8:	mov	r0, #0
   10bac:	cmp	r2, r3
   10bb0:	bne	10bbc <exit@plt+0x1fc>
   10bb4:	add	sp, sp, #84	; 0x54
   10bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bbc:	bl	10960 <__stack_chk_fail@plt>
   10bc0:	mov	fp, #0
   10bc4:	mov	lr, #0
   10bc8:	pop	{r1}		; (ldr r1, [sp], #4)
   10bcc:	mov	r2, sp
   10bd0:	push	{r2}		; (str r2, [sp, #-4]!)
   10bd4:	push	{r0}		; (str r0, [sp, #-4]!)
   10bd8:	ldr	ip, [pc, #16]	; 10bf0 <exit@plt+0x230>
   10bdc:	push	{ip}		; (str ip, [sp, #-4]!)
   10be0:	ldr	r0, [pc, #12]	; 10bf4 <exit@plt+0x234>
   10be4:	ldr	r3, [pc, #12]	; 10bf8 <exit@plt+0x238>
   10be8:	bl	10900 <__libc_start_main@plt>
   10bec:	bl	108e8 <abort@plt>
   10bf0:	andeq	r0, r1, r8, asr sp
   10bf4:	andeq	r0, r1, ip, asr #19
   10bf8:	strdeq	r0, [r1], -r4
   10bfc:	ldr	r3, [pc, #20]	; 10c18 <exit@plt+0x258>
   10c00:	ldr	r2, [pc, #20]	; 10c1c <exit@plt+0x25c>
   10c04:	add	r3, pc, r3
   10c08:	ldr	r2, [r3, r2]
   10c0c:	cmp	r2, #0
   10c10:	bxeq	lr
   10c14:	b	1090c <__gmon_start__@plt>
   10c18:	strdeq	r1, [r1], -r4
   10c1c:	andeq	r0, r0, ip, asr r0
   10c20:	push	{r3, lr}
   10c24:	movw	r0, #8468	; 0x2114
   10c28:	ldr	r3, [pc, #36]	; 10c54 <exit@plt+0x294>
   10c2c:	movt	r0, #2
   10c30:	rsb	r3, r0, r3
   10c34:	cmp	r3, #6
   10c38:	popls	{r3, pc}
   10c3c:	movw	r3, #0
   10c40:	movt	r3, #0
   10c44:	cmp	r3, #0
   10c48:	popeq	{r3, pc}
   10c4c:	blx	r3
   10c50:	pop	{r3, pc}
   10c54:	andeq	r2, r2, r7, lsl r1
   10c58:	push	{r3, lr}
   10c5c:	movw	r0, #8468	; 0x2114
   10c60:	movw	r3, #8468	; 0x2114
   10c64:	movt	r0, #2
   10c68:	movt	r3, #2
   10c6c:	rsb	r3, r0, r3
   10c70:	asr	r3, r3, #2
   10c74:	add	r3, r3, r3, lsr #31
   10c78:	asrs	r1, r3, #1
   10c7c:	popeq	{r3, pc}
   10c80:	movw	r2, #0
   10c84:	movt	r2, #0
   10c88:	cmp	r2, #0
   10c8c:	popeq	{r3, pc}
   10c90:	blx	r2
   10c94:	pop	{r3, pc}
   10c98:	push	{r4, lr}
   10c9c:	movw	r4, #8484	; 0x2124
   10ca0:	movt	r4, #2
   10ca4:	ldrb	r3, [r4]
   10ca8:	cmp	r3, #0
   10cac:	popne	{r4, pc}
   10cb0:	bl	10c20 <exit@plt+0x260>
   10cb4:	mov	r3, #1
   10cb8:	strb	r3, [r4]
   10cbc:	pop	{r4, pc}
   10cc0:	movw	r0, #7868	; 0x1ebc
   10cc4:	movt	r0, #2
   10cc8:	push	{r3, lr}
   10ccc:	ldr	r3, [r0]
   10cd0:	cmp	r3, #0
   10cd4:	beq	10cec <exit@plt+0x32c>
   10cd8:	movw	r3, #0
   10cdc:	movt	r3, #0
   10ce0:	cmp	r3, #0
   10ce4:	beq	10cec <exit@plt+0x32c>
   10ce8:	blx	r3
   10cec:	pop	{r3, lr}
   10cf0:	b	10c58 <exit@plt+0x298>
   10cf4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10cf8:	mov	r7, r0
   10cfc:	ldr	r6, [pc, #76]	; 10d50 <exit@plt+0x390>
   10d00:	mov	r8, r1
   10d04:	ldr	r5, [pc, #72]	; 10d54 <exit@plt+0x394>
   10d08:	mov	r9, r2
   10d0c:	add	r6, pc, r6
   10d10:	bl	108bc <nl_cli_link_parse_txqlen@plt-0x20>
   10d14:	add	r5, pc, r5
   10d18:	rsb	r6, r5, r6
   10d1c:	asrs	r6, r6, #2
   10d20:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10d24:	sub	r5, r5, #4
   10d28:	mov	r4, #0
   10d2c:	add	r4, r4, #1
   10d30:	ldr	r3, [r5, #4]!
   10d34:	mov	r0, r7
   10d38:	mov	r1, r8
   10d3c:	mov	r2, r9
   10d40:	blx	r3
   10d44:	cmp	r4, r6
   10d48:	bne	10d2c <exit@plt+0x36c>
   10d4c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10d50:	andeq	r1, r1, r4, lsr #3
   10d54:	muleq	r1, r8, r1
   10d58:	bx	lr

Disassembly of section .fini:

00010d5c <.fini>:
   10d5c:	push	{r3, lr}
   10d60:	pop	{r3, pc}
