
centos-preinstalled/pr:     file format elf32-littlearm


Disassembly of section .init:

00011284 <.init>:
   11284:	push	{r3, lr}
   11288:	bl	12834 <__assert_fail@plt+0x1224>
   1128c:	pop	{r3, pc}

Disassembly of section .plt:

00011290 <fdopen@plt-0x14>:
   11290:	push	{lr}		; (str lr, [sp, #-4]!)
   11294:	ldr	lr, [pc, #4]	; 112a0 <fdopen@plt-0x4>
   11298:	add	lr, pc, lr
   1129c:	ldr	pc, [lr, #8]!
   112a0:	andeq	sp, r1, r0, ror #26

000112a4 <fdopen@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #118784	; 0x1d000
   112ac:	ldr	pc, [ip, #3424]!	; 0xd60

000112b0 <calloc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #118784	; 0x1d000
   112b8:	ldr	pc, [ip, #3416]!	; 0xd58

000112bc <fputs_unlocked@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #118784	; 0x1d000
   112c4:	ldr	pc, [ip, #3408]!	; 0xd50

000112c8 <raise@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #118784	; 0x1d000
   112d0:	ldr	pc, [ip, #3400]!	; 0xd48

000112d4 <strcmp@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #118784	; 0x1d000
   112dc:	ldr	pc, [ip, #3392]!	; 0xd40

000112e0 <strtol@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #118784	; 0x1d000
   112e8:	ldr	pc, [ip, #3384]!	; 0xd38

000112ec <posix_fadvise64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #118784	; 0x1d000
   112f4:	ldr	pc, [ip, #3376]!	; 0xd30

000112f8 <mktime@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #118784	; 0x1d000
   11300:	ldr	pc, [ip, #3368]!	; 0xd28

00011304 <fflush@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #118784	; 0x1d000
   1130c:	ldr	pc, [ip, #3360]!	; 0xd20

00011310 <wcwidth@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #118784	; 0x1d000
   11318:	ldr	pc, [ip, #3352]!	; 0xd18

0001131c <__memmove_chk@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #118784	; 0x1d000
   11324:	ldr	pc, [ip, #3344]!	; 0xd10

00011328 <free@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #118784	; 0x1d000
   11330:	ldr	pc, [ip, #3336]!	; 0xd08

00011334 <clock_gettime@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #118784	; 0x1d000
   1133c:	ldr	pc, [ip, #3328]!	; 0xd00

00011340 <_exit@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #118784	; 0x1d000
   11348:	ldr	pc, [ip, #3320]!	; 0xcf8

0001134c <memcpy@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #118784	; 0x1d000
   11354:	ldr	pc, [ip, #3312]!	; 0xcf0

00011358 <__strtoull_internal@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #118784	; 0x1d000
   11360:	ldr	pc, [ip, #3304]!	; 0xce8

00011364 <mbsinit@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #118784	; 0x1d000
   1136c:	ldr	pc, [ip, #3296]!	; 0xce0

00011370 <fwrite_unlocked@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #118784	; 0x1d000
   11378:	ldr	pc, [ip, #3288]!	; 0xcd8

0001137c <memcmp@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #118784	; 0x1d000
   11384:	ldr	pc, [ip, #3280]!	; 0xcd0

00011388 <dcgettext@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #118784	; 0x1d000
   11390:	ldr	pc, [ip, #3272]!	; 0xcc8

00011394 <__stack_chk_fail@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #118784	; 0x1d000
   1139c:	ldr	pc, [ip, #3264]!	; 0xcc0

000113a0 <realloc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #118784	; 0x1d000
   113a8:	ldr	pc, [ip, #3256]!	; 0xcb8

000113ac <textdomain@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #118784	; 0x1d000
   113b4:	ldr	pc, [ip, #3248]!	; 0xcb0

000113b8 <iswcntrl@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #118784	; 0x1d000
   113c0:	ldr	pc, [ip, #3240]!	; 0xca8

000113c4 <iswprint@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #118784	; 0x1d000
   113cc:	ldr	pc, [ip, #3232]!	; 0xca0

000113d0 <__fxstat64@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #118784	; 0x1d000
   113d8:	ldr	pc, [ip, #3224]!	; 0xc98

000113dc <fwrite@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #118784	; 0x1d000
   113e4:	ldr	pc, [ip, #3216]!	; 0xc90

000113e8 <lseek64@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #118784	; 0x1d000
   113f0:	ldr	pc, [ip, #3208]!	; 0xc88

000113f4 <__ctype_get_mb_cur_max@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #118784	; 0x1d000
   113fc:	ldr	pc, [ip, #3200]!	; 0xc80

00011400 <strcpy@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #118784	; 0x1d000
   11408:	ldr	pc, [ip, #3192]!	; 0xc78

0001140c <gettimeofday@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #118784	; 0x1d000
   11414:	ldr	pc, [ip, #3184]!	; 0xc70

00011418 <__fpending@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #118784	; 0x1d000
   11420:	ldr	pc, [ip, #3176]!	; 0xc68

00011424 <mbrtowc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #118784	; 0x1d000
   1142c:	ldr	pc, [ip, #3168]!	; 0xc60

00011430 <error@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #118784	; 0x1d000
   11438:	ldr	pc, [ip, #3160]!	; 0xc58

0001143c <open64@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #118784	; 0x1d000
   11444:	ldr	pc, [ip, #3152]!	; 0xc50

00011448 <getenv@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #118784	; 0x1d000
   11450:	ldr	pc, [ip, #3144]!	; 0xc48

00011454 <malloc@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #118784	; 0x1d000
   1145c:	ldr	pc, [ip, #3136]!	; 0xc40

00011460 <__libc_start_main@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #118784	; 0x1d000
   11468:	ldr	pc, [ip, #3128]!	; 0xc38

0001146c <strftime@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #118784	; 0x1d000
   11474:	ldr	pc, [ip, #3120]!	; 0xc30

00011478 <__freading@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #118784	; 0x1d000
   11480:	ldr	pc, [ip, #3112]!	; 0xc28

00011484 <localtime@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #118784	; 0x1d000
   1148c:	ldr	pc, [ip, #3104]!	; 0xc20

00011490 <__ctype_tolower_loc@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #118784	; 0x1d000
   11498:	ldr	pc, [ip, #3096]!	; 0xc18

0001149c <__ctype_toupper_loc@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #118784	; 0x1d000
   114a4:	ldr	pc, [ip, #3088]!	; 0xc10

000114a8 <__gmon_start__@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #118784	; 0x1d000
   114b0:	ldr	pc, [ip, #3080]!	; 0xc08

000114b4 <getopt_long@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #118784	; 0x1d000
   114bc:	ldr	pc, [ip, #3072]!	; 0xc00

000114c0 <__ctype_b_loc@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #118784	; 0x1d000
   114c8:	ldr	pc, [ip, #3064]!	; 0xbf8

000114cc <exit@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #118784	; 0x1d000
   114d4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114d8 <strlen@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #118784	; 0x1d000
   114e0:	ldr	pc, [ip, #3048]!	; 0xbe8

000114e4 <strchr@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #118784	; 0x1d000
   114ec:	ldr	pc, [ip, #3040]!	; 0xbe0

000114f0 <ungetc@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #118784	; 0x1d000
   114f8:	ldr	pc, [ip, #3032]!	; 0xbd8

000114fc <fcntl@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #118784	; 0x1d000
   11504:	ldr	pc, [ip, #3024]!	; 0xbd0

00011508 <__errno_location@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #118784	; 0x1d000
   11510:	ldr	pc, [ip, #3016]!	; 0xbc8

00011514 <__sprintf_chk@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #118784	; 0x1d000
   1151c:	ldr	pc, [ip, #3008]!	; 0xbc0

00011520 <__cxa_atexit@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #118784	; 0x1d000
   11528:	ldr	pc, [ip, #3000]!	; 0xbb8

0001152c <memset@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #118784	; 0x1d000
   11534:	ldr	pc, [ip, #2992]!	; 0xbb0

00011538 <strncpy@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #118784	; 0x1d000
   11540:	ldr	pc, [ip, #2984]!	; 0xba8

00011544 <fscanf@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #118784	; 0x1d000
   1154c:	ldr	pc, [ip, #2976]!	; 0xba0

00011550 <__printf_chk@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #118784	; 0x1d000
   11558:	ldr	pc, [ip, #2968]!	; 0xb98

0001155c <fileno@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #118784	; 0x1d000
   11564:	ldr	pc, [ip, #2960]!	; 0xb90

00011568 <__fprintf_chk@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #118784	; 0x1d000
   11570:	ldr	pc, [ip, #2952]!	; 0xb88

00011574 <fclose@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #118784	; 0x1d000
   1157c:	ldr	pc, [ip, #2944]!	; 0xb80

00011580 <strnlen@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #118784	; 0x1d000
   11588:	ldr	pc, [ip, #2936]!	; 0xb78

0001158c <fseeko64@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #118784	; 0x1d000
   11594:	ldr	pc, [ip, #2928]!	; 0xb70

00011598 <__uflow@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #118784	; 0x1d000
   115a0:	ldr	pc, [ip, #2920]!	; 0xb68

000115a4 <__overflow@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #118784	; 0x1d000
   115ac:	ldr	pc, [ip, #2912]!	; 0xb60

000115b0 <setlocale@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #118784	; 0x1d000
   115b8:	ldr	pc, [ip, #2904]!	; 0xb58

000115bc <strrchr@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #118784	; 0x1d000
   115c4:	ldr	pc, [ip, #2896]!	; 0xb50

000115c8 <nl_langinfo@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #118784	; 0x1d000
   115d0:	ldr	pc, [ip, #2888]!	; 0xb48

000115d4 <fopen64@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #118784	; 0x1d000
   115dc:	ldr	pc, [ip, #2880]!	; 0xb40

000115e0 <bindtextdomain@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #118784	; 0x1d000
   115e8:	ldr	pc, [ip, #2872]!	; 0xb38

000115ec <strncmp@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #118784	; 0x1d000
   115f4:	ldr	pc, [ip, #2864]!	; 0xb30

000115f8 <abort@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #118784	; 0x1d000
   11600:	ldr	pc, [ip, #2856]!	; 0xb28

00011604 <close@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #118784	; 0x1d000
   1160c:	ldr	pc, [ip, #2848]!	; 0xb20

00011610 <__assert_fail@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #118784	; 0x1d000
   11618:	ldr	pc, [ip, #2840]!	; 0xb18

Disassembly of section .text:

0001161c <close_stdout@@Base-0x50f4>:
   1161c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11620:	sub	sp, sp, #92	; 0x5c
   11624:	ldr	r8, [pc, #4056]	; 12604 <__assert_fail@plt+0xff4>
   11628:	mov	r4, r0
   1162c:	ldr	r3, [pc, #4052]	; 12608 <__assert_fail@plt+0xff8>
   11630:	mov	r2, #0
   11634:	add	r8, pc, r8
   11638:	ldr	r0, [r1]
   1163c:	mov	r6, r1
   11640:	ldr	r5, [pc, #4036]	; 1260c <__assert_fail@plt+0xffc>
   11644:	ldr	r3, [r8, r3]
   11648:	str	r2, [sp, #68]	; 0x44
   1164c:	add	r5, pc, r5
   11650:	ldr	r3, [r3]
   11654:	str	r3, [sp, #84]	; 0x54
   11658:	bl	16cbc <close_stdout@@Base+0x5ac>
   1165c:	ldr	r1, [pc, #4012]	; 12610 <__assert_fail@plt+0x1000>
   11660:	mov	r0, #6
   11664:	add	r1, pc, r1
   11668:	bl	115b0 <setlocale@plt>
   1166c:	ldr	r1, [pc, #4000]	; 12614 <__assert_fail@plt+0x1004>
   11670:	mov	r0, r5
   11674:	add	r1, pc, r1
   11678:	bl	115e0 <bindtextdomain@plt>
   1167c:	mov	r0, r5
   11680:	bl	113ac <textdomain@plt>
   11684:	ldr	r3, [pc, #3980]	; 12618 <__assert_fail@plt+0x1008>
   11688:	ldr	r0, [r8, r3]
   1168c:	bl	1ca2c <close_stdout@@Base+0x631c>
   11690:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   11694:	cmp	r0, #1
   11698:	bls	123a4 <__assert_fail@plt+0xd94>
   1169c:	ldr	r3, [pc, #3960]	; 1261c <__assert_fail@plt+0x100c>
   116a0:	ldr	r1, [pc, #3960]	; 12620 <__assert_fail@plt+0x1010>
   116a4:	add	r3, pc, r3
   116a8:	ldr	r2, [pc, #3956]	; 12624 <__assert_fail@plt+0x1014>
   116ac:	add	r1, pc, r1
   116b0:	add	r2, pc, r2
   116b4:	str	r1, [r3, #164]	; 0xa4
   116b8:	str	r2, [r3, #192]	; 0xc0
   116bc:	cmp	r4, #1
   116c0:	movle	ip, #0
   116c4:	strle	ip, [sp, #44]	; 0x2c
   116c8:	ble	116dc <__assert_fail@plt+0xcc>
   116cc:	sub	r0, r4, #1
   116d0:	lsl	r0, r0, #2
   116d4:	bl	1a338 <close_stdout@@Base+0x3c28>
   116d8:	str	r0, [sp, #44]	; 0x2c
   116dc:	ldr	ip, [pc, #3908]	; 12628 <__assert_fail@plt+0x1018>
   116e0:	mov	fp, #0
   116e4:	add	r7, sp, #72	; 0x48
   116e8:	mov	r5, fp
   116ec:	add	ip, pc, ip
   116f0:	str	ip, [sp, #24]
   116f4:	ldr	ip, [pc, #3888]	; 1262c <__assert_fail@plt+0x101c>
   116f8:	mov	r9, fp
   116fc:	str	fp, [sp, #40]	; 0x28
   11700:	add	ip, pc, ip
   11704:	str	ip, [sp, #20]
   11708:	ldr	ip, [pc, #3872]	; 12630 <__assert_fail@plt+0x1020>
   1170c:	str	fp, [sp, #32]
   11710:	add	ip, pc, ip
   11714:	str	ip, [sp, #28]
   11718:	ldr	ip, [sp, #24]
   1171c:	str	fp, [sp, #36]	; 0x24
   11720:	add	ip, ip, #248	; 0xf8
   11724:	str	ip, [sp, #52]	; 0x34
   11728:	ldr	ip, [sp, #20]
   1172c:	add	ip, ip, #28
   11730:	str	ip, [sp, #56]	; 0x38
   11734:	ldr	ip, [sp, #28]
   11738:	add	ip, ip, #8
   1173c:	str	ip, [sp, #60]	; 0x3c
   11740:	ldr	r2, [pc, #3820]	; 12634 <__assert_fail@plt+0x1024>
   11744:	mov	r0, r4
   11748:	ldr	r3, [pc, #3816]	; 12638 <__assert_fail@plt+0x1028>
   1174c:	mov	r1, r6
   11750:	str	r7, [sp]
   11754:	add	r2, pc, r2
   11758:	add	r3, pc, r3
   1175c:	mvn	ip, #0
   11760:	str	ip, [sp, #72]	; 0x48
   11764:	bl	114b4 <getopt_long@plt>
   11768:	cmn	r0, #1
   1176c:	mov	sl, r0
   11770:	beq	12234 <__assert_fail@plt+0xc24>
   11774:	sub	r3, r0, #48	; 0x30
   11778:	cmp	r3, #9
   1177c:	bhi	117a4 <__assert_fail@plt+0x194>
   11780:	ldr	r2, [sp, #68]	; 0x44
   11784:	add	r3, fp, #1
   11788:	cmp	r3, r2
   1178c:	bcs	11bc8 <__assert_fail@plt+0x5b8>
   11790:	strb	sl, [r5, fp]
   11794:	mov	r2, #0
   11798:	mov	fp, r3
   1179c:	strb	r2, [r5, r3]
   117a0:	b	11740 <__assert_fail@plt+0x130>
   117a4:	add	sl, r0, #3
   117a8:	cmp	sl, #260	; 0x104
   117ac:	addls	pc, pc, sl, lsl #2
   117b0:	b	1222c <__assert_fail@plt+0xc1c>
   117b4:	b	121e0 <__assert_fail@plt+0xbd0>
   117b8:	b	121d8 <__assert_fail@plt+0xbc8>
   117bc:	b	1222c <__assert_fail@plt+0xc1c>
   117c0:	b	1222c <__assert_fail@plt+0xc1c>
   117c4:	b	121a8 <__assert_fail@plt+0xb98>
   117c8:	b	1222c <__assert_fail@plt+0xc1c>
   117cc:	b	1222c <__assert_fail@plt+0xc1c>
   117d0:	b	1222c <__assert_fail@plt+0xc1c>
   117d4:	b	1222c <__assert_fail@plt+0xc1c>
   117d8:	b	1222c <__assert_fail@plt+0xc1c>
   117dc:	b	1222c <__assert_fail@plt+0xc1c>
   117e0:	b	1222c <__assert_fail@plt+0xc1c>
   117e4:	b	1222c <__assert_fail@plt+0xc1c>
   117e8:	b	1222c <__assert_fail@plt+0xc1c>
   117ec:	b	1222c <__assert_fail@plt+0xc1c>
   117f0:	b	1222c <__assert_fail@plt+0xc1c>
   117f4:	b	1222c <__assert_fail@plt+0xc1c>
   117f8:	b	1222c <__assert_fail@plt+0xc1c>
   117fc:	b	1222c <__assert_fail@plt+0xc1c>
   11800:	b	1222c <__assert_fail@plt+0xc1c>
   11804:	b	1222c <__assert_fail@plt+0xc1c>
   11808:	b	1222c <__assert_fail@plt+0xc1c>
   1180c:	b	1222c <__assert_fail@plt+0xc1c>
   11810:	b	1222c <__assert_fail@plt+0xc1c>
   11814:	b	1222c <__assert_fail@plt+0xc1c>
   11818:	b	1222c <__assert_fail@plt+0xc1c>
   1181c:	b	1222c <__assert_fail@plt+0xc1c>
   11820:	b	1222c <__assert_fail@plt+0xc1c>
   11824:	b	1222c <__assert_fail@plt+0xc1c>
   11828:	b	1222c <__assert_fail@plt+0xc1c>
   1182c:	b	1222c <__assert_fail@plt+0xc1c>
   11830:	b	1222c <__assert_fail@plt+0xc1c>
   11834:	b	1222c <__assert_fail@plt+0xc1c>
   11838:	b	1222c <__assert_fail@plt+0xc1c>
   1183c:	b	1222c <__assert_fail@plt+0xc1c>
   11840:	b	1222c <__assert_fail@plt+0xc1c>
   11844:	b	1222c <__assert_fail@plt+0xc1c>
   11848:	b	1222c <__assert_fail@plt+0xc1c>
   1184c:	b	1222c <__assert_fail@plt+0xc1c>
   11850:	b	1222c <__assert_fail@plt+0xc1c>
   11854:	b	1222c <__assert_fail@plt+0xc1c>
   11858:	b	1222c <__assert_fail@plt+0xc1c>
   1185c:	b	1222c <__assert_fail@plt+0xc1c>
   11860:	b	1222c <__assert_fail@plt+0xc1c>
   11864:	b	1222c <__assert_fail@plt+0xc1c>
   11868:	b	1222c <__assert_fail@plt+0xc1c>
   1186c:	b	1222c <__assert_fail@plt+0xc1c>
   11870:	b	1222c <__assert_fail@plt+0xc1c>
   11874:	b	1222c <__assert_fail@plt+0xc1c>
   11878:	b	1222c <__assert_fail@plt+0xc1c>
   1187c:	b	1222c <__assert_fail@plt+0xc1c>
   11880:	b	1222c <__assert_fail@plt+0xc1c>
   11884:	b	1222c <__assert_fail@plt+0xc1c>
   11888:	b	1222c <__assert_fail@plt+0xc1c>
   1188c:	b	1222c <__assert_fail@plt+0xc1c>
   11890:	b	1222c <__assert_fail@plt+0xc1c>
   11894:	b	1222c <__assert_fail@plt+0xc1c>
   11898:	b	1222c <__assert_fail@plt+0xc1c>
   1189c:	b	1222c <__assert_fail@plt+0xc1c>
   118a0:	b	1222c <__assert_fail@plt+0xc1c>
   118a4:	b	1222c <__assert_fail@plt+0xc1c>
   118a8:	b	1222c <__assert_fail@plt+0xc1c>
   118ac:	b	1222c <__assert_fail@plt+0xc1c>
   118b0:	b	1222c <__assert_fail@plt+0xc1c>
   118b4:	b	1222c <__assert_fail@plt+0xc1c>
   118b8:	b	1222c <__assert_fail@plt+0xc1c>
   118bc:	b	1222c <__assert_fail@plt+0xc1c>
   118c0:	b	1222c <__assert_fail@plt+0xc1c>
   118c4:	b	1222c <__assert_fail@plt+0xc1c>
   118c8:	b	1222c <__assert_fail@plt+0xc1c>
   118cc:	b	1222c <__assert_fail@plt+0xc1c>
   118d0:	b	1218c <__assert_fail@plt+0xb7c>
   118d4:	b	1222c <__assert_fail@plt+0xc1c>
   118d8:	b	12178 <__assert_fail@plt+0xb68>
   118dc:	b	1222c <__assert_fail@plt+0xc1c>
   118e0:	b	1222c <__assert_fail@plt+0xc1c>
   118e4:	b	1222c <__assert_fail@plt+0xc1c>
   118e8:	b	12164 <__assert_fail@plt+0xb54>
   118ec:	b	1222c <__assert_fail@plt+0xc1c>
   118f0:	b	1222c <__assert_fail@plt+0xc1c>
   118f4:	b	1222c <__assert_fail@plt+0xc1c>
   118f8:	b	1210c <__assert_fail@plt+0xafc>
   118fc:	b	1222c <__assert_fail@plt+0xc1c>
   11900:	b	1222c <__assert_fail@plt+0xc1c>
   11904:	b	1222c <__assert_fail@plt+0xc1c>
   11908:	b	1222c <__assert_fail@plt+0xc1c>
   1190c:	b	120b8 <__assert_fail@plt+0xaa8>
   11910:	b	12098 <__assert_fail@plt+0xa88>
   11914:	b	1222c <__assert_fail@plt+0xc1c>
   11918:	b	1222c <__assert_fail@plt+0xc1c>
   1191c:	b	12008 <__assert_fail@plt+0x9f8>
   11920:	b	1222c <__assert_fail@plt+0xc1c>
   11924:	b	1222c <__assert_fail@plt+0xc1c>
   11928:	b	1222c <__assert_fail@plt+0xc1c>
   1192c:	b	1222c <__assert_fail@plt+0xc1c>
   11930:	b	1222c <__assert_fail@plt+0xc1c>
   11934:	b	1222c <__assert_fail@plt+0xc1c>
   11938:	b	1222c <__assert_fail@plt+0xc1c>
   1193c:	b	1222c <__assert_fail@plt+0xc1c>
   11940:	b	1222c <__assert_fail@plt+0xc1c>
   11944:	b	11fe4 <__assert_fail@plt+0x9d4>
   11948:	b	11fd0 <__assert_fail@plt+0x9c0>
   1194c:	b	11fbc <__assert_fail@plt+0x9ac>
   11950:	b	11fa8 <__assert_fail@plt+0x998>
   11954:	b	11f60 <__assert_fail@plt+0x950>
   11958:	b	12178 <__assert_fail@plt+0xb68>
   1195c:	b	1222c <__assert_fail@plt+0xc1c>
   11960:	b	11f44 <__assert_fail@plt+0x934>
   11964:	b	11efc <__assert_fail@plt+0x8ec>
   11968:	b	1222c <__assert_fail@plt+0xc1c>
   1196c:	b	1222c <__assert_fail@plt+0xc1c>
   11970:	b	11e84 <__assert_fail@plt+0x874>
   11974:	b	11e60 <__assert_fail@plt+0x850>
   11978:	b	11e14 <__assert_fail@plt+0x804>
   1197c:	b	11d9c <__assert_fail@plt+0x78c>
   11980:	b	1222c <__assert_fail@plt+0xc1c>
   11984:	b	1222c <__assert_fail@plt+0xc1c>
   11988:	b	11d88 <__assert_fail@plt+0x778>
   1198c:	b	11d44 <__assert_fail@plt+0x734>
   11990:	b	11d20 <__assert_fail@plt+0x710>
   11994:	b	1222c <__assert_fail@plt+0xc1c>
   11998:	b	11d0c <__assert_fail@plt+0x6fc>
   1199c:	b	11c78 <__assert_fail@plt+0x668>
   119a0:	b	1222c <__assert_fail@plt+0xc1c>
   119a4:	b	1222c <__assert_fail@plt+0xc1c>
   119a8:	b	1222c <__assert_fail@plt+0xc1c>
   119ac:	b	1222c <__assert_fail@plt+0xc1c>
   119b0:	b	1222c <__assert_fail@plt+0xc1c>
   119b4:	b	1222c <__assert_fail@plt+0xc1c>
   119b8:	b	1222c <__assert_fail@plt+0xc1c>
   119bc:	b	1222c <__assert_fail@plt+0xc1c>
   119c0:	b	1222c <__assert_fail@plt+0xc1c>
   119c4:	b	1222c <__assert_fail@plt+0xc1c>
   119c8:	b	1222c <__assert_fail@plt+0xc1c>
   119cc:	b	1222c <__assert_fail@plt+0xc1c>
   119d0:	b	1222c <__assert_fail@plt+0xc1c>
   119d4:	b	1222c <__assert_fail@plt+0xc1c>
   119d8:	b	1222c <__assert_fail@plt+0xc1c>
   119dc:	b	1222c <__assert_fail@plt+0xc1c>
   119e0:	b	1222c <__assert_fail@plt+0xc1c>
   119e4:	b	1222c <__assert_fail@plt+0xc1c>
   119e8:	b	1222c <__assert_fail@plt+0xc1c>
   119ec:	b	1222c <__assert_fail@plt+0xc1c>
   119f0:	b	1222c <__assert_fail@plt+0xc1c>
   119f4:	b	1222c <__assert_fail@plt+0xc1c>
   119f8:	b	1222c <__assert_fail@plt+0xc1c>
   119fc:	b	1222c <__assert_fail@plt+0xc1c>
   11a00:	b	1222c <__assert_fail@plt+0xc1c>
   11a04:	b	1222c <__assert_fail@plt+0xc1c>
   11a08:	b	1222c <__assert_fail@plt+0xc1c>
   11a0c:	b	1222c <__assert_fail@plt+0xc1c>
   11a10:	b	1222c <__assert_fail@plt+0xc1c>
   11a14:	b	1222c <__assert_fail@plt+0xc1c>
   11a18:	b	1222c <__assert_fail@plt+0xc1c>
   11a1c:	b	1222c <__assert_fail@plt+0xc1c>
   11a20:	b	1222c <__assert_fail@plt+0xc1c>
   11a24:	b	1222c <__assert_fail@plt+0xc1c>
   11a28:	b	1222c <__assert_fail@plt+0xc1c>
   11a2c:	b	1222c <__assert_fail@plt+0xc1c>
   11a30:	b	1222c <__assert_fail@plt+0xc1c>
   11a34:	b	1222c <__assert_fail@plt+0xc1c>
   11a38:	b	1222c <__assert_fail@plt+0xc1c>
   11a3c:	b	1222c <__assert_fail@plt+0xc1c>
   11a40:	b	1222c <__assert_fail@plt+0xc1c>
   11a44:	b	1222c <__assert_fail@plt+0xc1c>
   11a48:	b	1222c <__assert_fail@plt+0xc1c>
   11a4c:	b	1222c <__assert_fail@plt+0xc1c>
   11a50:	b	1222c <__assert_fail@plt+0xc1c>
   11a54:	b	1222c <__assert_fail@plt+0xc1c>
   11a58:	b	1222c <__assert_fail@plt+0xc1c>
   11a5c:	b	1222c <__assert_fail@plt+0xc1c>
   11a60:	b	1222c <__assert_fail@plt+0xc1c>
   11a64:	b	1222c <__assert_fail@plt+0xc1c>
   11a68:	b	1222c <__assert_fail@plt+0xc1c>
   11a6c:	b	1222c <__assert_fail@plt+0xc1c>
   11a70:	b	1222c <__assert_fail@plt+0xc1c>
   11a74:	b	1222c <__assert_fail@plt+0xc1c>
   11a78:	b	1222c <__assert_fail@plt+0xc1c>
   11a7c:	b	1222c <__assert_fail@plt+0xc1c>
   11a80:	b	1222c <__assert_fail@plt+0xc1c>
   11a84:	b	1222c <__assert_fail@plt+0xc1c>
   11a88:	b	1222c <__assert_fail@plt+0xc1c>
   11a8c:	b	1222c <__assert_fail@plt+0xc1c>
   11a90:	b	1222c <__assert_fail@plt+0xc1c>
   11a94:	b	1222c <__assert_fail@plt+0xc1c>
   11a98:	b	1222c <__assert_fail@plt+0xc1c>
   11a9c:	b	1222c <__assert_fail@plt+0xc1c>
   11aa0:	b	1222c <__assert_fail@plt+0xc1c>
   11aa4:	b	1222c <__assert_fail@plt+0xc1c>
   11aa8:	b	1222c <__assert_fail@plt+0xc1c>
   11aac:	b	1222c <__assert_fail@plt+0xc1c>
   11ab0:	b	1222c <__assert_fail@plt+0xc1c>
   11ab4:	b	1222c <__assert_fail@plt+0xc1c>
   11ab8:	b	1222c <__assert_fail@plt+0xc1c>
   11abc:	b	1222c <__assert_fail@plt+0xc1c>
   11ac0:	b	1222c <__assert_fail@plt+0xc1c>
   11ac4:	b	1222c <__assert_fail@plt+0xc1c>
   11ac8:	b	1222c <__assert_fail@plt+0xc1c>
   11acc:	b	1222c <__assert_fail@plt+0xc1c>
   11ad0:	b	1222c <__assert_fail@plt+0xc1c>
   11ad4:	b	1222c <__assert_fail@plt+0xc1c>
   11ad8:	b	1222c <__assert_fail@plt+0xc1c>
   11adc:	b	1222c <__assert_fail@plt+0xc1c>
   11ae0:	b	1222c <__assert_fail@plt+0xc1c>
   11ae4:	b	1222c <__assert_fail@plt+0xc1c>
   11ae8:	b	1222c <__assert_fail@plt+0xc1c>
   11aec:	b	1222c <__assert_fail@plt+0xc1c>
   11af0:	b	1222c <__assert_fail@plt+0xc1c>
   11af4:	b	1222c <__assert_fail@plt+0xc1c>
   11af8:	b	1222c <__assert_fail@plt+0xc1c>
   11afc:	b	1222c <__assert_fail@plt+0xc1c>
   11b00:	b	1222c <__assert_fail@plt+0xc1c>
   11b04:	b	1222c <__assert_fail@plt+0xc1c>
   11b08:	b	1222c <__assert_fail@plt+0xc1c>
   11b0c:	b	1222c <__assert_fail@plt+0xc1c>
   11b10:	b	1222c <__assert_fail@plt+0xc1c>
   11b14:	b	1222c <__assert_fail@plt+0xc1c>
   11b18:	b	1222c <__assert_fail@plt+0xc1c>
   11b1c:	b	1222c <__assert_fail@plt+0xc1c>
   11b20:	b	1222c <__assert_fail@plt+0xc1c>
   11b24:	b	1222c <__assert_fail@plt+0xc1c>
   11b28:	b	1222c <__assert_fail@plt+0xc1c>
   11b2c:	b	1222c <__assert_fail@plt+0xc1c>
   11b30:	b	1222c <__assert_fail@plt+0xc1c>
   11b34:	b	1222c <__assert_fail@plt+0xc1c>
   11b38:	b	1222c <__assert_fail@plt+0xc1c>
   11b3c:	b	1222c <__assert_fail@plt+0xc1c>
   11b40:	b	1222c <__assert_fail@plt+0xc1c>
   11b44:	b	1222c <__assert_fail@plt+0xc1c>
   11b48:	b	1222c <__assert_fail@plt+0xc1c>
   11b4c:	b	1222c <__assert_fail@plt+0xc1c>
   11b50:	b	1222c <__assert_fail@plt+0xc1c>
   11b54:	b	1222c <__assert_fail@plt+0xc1c>
   11b58:	b	1222c <__assert_fail@plt+0xc1c>
   11b5c:	b	1222c <__assert_fail@plt+0xc1c>
   11b60:	b	1222c <__assert_fail@plt+0xc1c>
   11b64:	b	1222c <__assert_fail@plt+0xc1c>
   11b68:	b	1222c <__assert_fail@plt+0xc1c>
   11b6c:	b	1222c <__assert_fail@plt+0xc1c>
   11b70:	b	1222c <__assert_fail@plt+0xc1c>
   11b74:	b	1222c <__assert_fail@plt+0xc1c>
   11b78:	b	1222c <__assert_fail@plt+0xc1c>
   11b7c:	b	1222c <__assert_fail@plt+0xc1c>
   11b80:	b	1222c <__assert_fail@plt+0xc1c>
   11b84:	b	1222c <__assert_fail@plt+0xc1c>
   11b88:	b	1222c <__assert_fail@plt+0xc1c>
   11b8c:	b	1222c <__assert_fail@plt+0xc1c>
   11b90:	b	1222c <__assert_fail@plt+0xc1c>
   11b94:	b	1222c <__assert_fail@plt+0xc1c>
   11b98:	b	1222c <__assert_fail@plt+0xc1c>
   11b9c:	b	1222c <__assert_fail@plt+0xc1c>
   11ba0:	b	1222c <__assert_fail@plt+0xc1c>
   11ba4:	b	1222c <__assert_fail@plt+0xc1c>
   11ba8:	b	1222c <__assert_fail@plt+0xc1c>
   11bac:	b	1222c <__assert_fail@plt+0xc1c>
   11bb0:	b	1222c <__assert_fail@plt+0xc1c>
   11bb4:	b	1222c <__assert_fail@plt+0xc1c>
   11bb8:	b	1222c <__assert_fail@plt+0xc1c>
   11bbc:	b	1222c <__assert_fail@plt+0xc1c>
   11bc0:	b	11c4c <__assert_fail@plt+0x63c>
   11bc4:	b	11be4 <__assert_fail@plt+0x5d4>
   11bc8:	mov	r0, r5
   11bcc:	add	r1, sp, #68	; 0x44
   11bd0:	str	r3, [sp, #16]
   11bd4:	bl	1a488 <close_stdout@@Base+0x3d78>
   11bd8:	ldr	r3, [sp, #16]
   11bdc:	mov	r5, r0
   11be0:	b	11790 <__assert_fail@plt+0x180>
   11be4:	ldr	r3, [pc, #2640]	; 1263c <__assert_fail@plt+0x102c>
   11be8:	ldr	r3, [r8, r3]
   11bec:	ldr	sl, [r3]
   11bf0:	str	r3, [sp, #48]	; 0x30
   11bf4:	cmp	sl, #0
   11bf8:	beq	125dc <__assert_fail@plt+0xfcc>
   11bfc:	mov	r2, sl
   11c00:	ldr	r0, [sp, #72]	; 0x48
   11c04:	mov	r1, #0
   11c08:	bl	13768 <__assert_fail@plt+0x2158>
   11c0c:	subs	sl, r0, #0
   11c10:	bne	11c70 <__assert_fail@plt+0x660>
   11c14:	ldr	r1, [pc, #2596]	; 12640 <__assert_fail@plt+0x1030>
   11c18:	mov	r2, #5
   11c1c:	add	r1, pc, r1
   11c20:	bl	11388 <dcgettext@plt>
   11c24:	ldr	r3, [sp, #48]	; 0x30
   11c28:	mov	fp, r0
   11c2c:	ldr	r0, [r3]
   11c30:	bl	1850c <close_stdout@@Base+0x1dfc>
   11c34:	mov	r2, fp
   11c38:	mov	r1, sl
   11c3c:	mov	r3, r0
   11c40:	mov	r0, #1
   11c44:	bl	11430 <error@plt>
   11c48:	b	11c70 <__assert_fail@plt+0x660>
   11c4c:	ldr	r3, [pc, #2536]	; 1263c <__assert_fail@plt+0x102c>
   11c50:	ldr	sl, [r8, r3]
   11c54:	ldr	r0, [sl]
   11c58:	bl	12ad4 <__assert_fail@plt+0x14c4>
   11c5c:	mov	r0, r5
   11c60:	bl	11328 <free@plt>
   11c64:	mov	r3, #0
   11c68:	mov	r5, r3
   11c6c:	str	r3, [sp, #68]	; 0x44
   11c70:	mov	fp, #0
   11c74:	b	11740 <__assert_fail@plt+0x130>
   11c78:	ldr	ip, [pc, #2492]	; 1263c <__assert_fail@plt+0x102c>
   11c7c:	mov	r1, #0
   11c80:	ldr	r0, [pc, #2492]	; 12644 <__assert_fail@plt+0x1034>
   11c84:	mov	r2, #10
   11c88:	add	r3, sp, #80	; 0x50
   11c8c:	ldr	sl, [r8, ip]
   11c90:	add	r0, pc, r0
   11c94:	str	r0, [sp]
   11c98:	ldr	r0, [sl]
   11c9c:	bl	1a5a4 <close_stdout@@Base+0x3e94>
   11ca0:	cmp	r0, #0
   11ca4:	beq	12464 <__assert_fail@plt+0xe54>
   11ca8:	ldr	r1, [pc, #2456]	; 12648 <__assert_fail@plt+0x1038>
   11cac:	mov	r2, #5
   11cb0:	mov	r0, #0
   11cb4:	add	r1, pc, r1
   11cb8:	bl	11388 <dcgettext@plt>
   11cbc:	mov	fp, r0
   11cc0:	ldr	r0, [sl]
   11cc4:	bl	1850c <close_stdout@@Base+0x1dfc>
   11cc8:	mov	r2, fp
   11ccc:	mov	r1, #0
   11cd0:	mov	r3, r0
   11cd4:	mov	r0, #1
   11cd8:	bl	11430 <error@plt>
   11cdc:	ldr	r3, [pc, #2408]	; 1264c <__assert_fail@plt+0x103c>
   11ce0:	add	r3, pc, r3
   11ce4:	ldrb	r3, [r3, #188]	; 0xbc
   11ce8:	cmp	r3, #0
   11cec:	ldreq	r3, [pc, #2396]	; 12650 <__assert_fail@plt+0x1040>
   11cf0:	ldreq	r2, [sp, #80]	; 0x50
   11cf4:	addeq	r3, pc, r3
   11cf8:	streq	r2, [r3, #64]	; 0x40
   11cfc:	mov	ip, #1
   11d00:	str	ip, [sp, #32]
   11d04:	str	ip, [sp, #36]	; 0x24
   11d08:	b	11c70 <__assert_fail@plt+0x660>
   11d0c:	ldr	r3, [pc, #2368]	; 12654 <__assert_fail@plt+0x1044>
   11d10:	mov	r2, #1
   11d14:	add	r3, pc, r3
   11d18:	strb	r2, [r3, #33]	; 0x21
   11d1c:	b	11c70 <__assert_fail@plt+0x660>
   11d20:	ldr	r1, [pc, #2352]	; 12658 <__assert_fail@plt+0x1048>
   11d24:	mov	r0, #0
   11d28:	ldr	r3, [pc, #2348]	; 1265c <__assert_fail@plt+0x104c>
   11d2c:	mov	r2, #1
   11d30:	add	r1, pc, r1
   11d34:	add	r3, pc, r3
   11d38:	strb	r0, [r1, #68]	; 0x44
   11d3c:	strb	r2, [r3, #173]	; 0xad
   11d40:	b	11c70 <__assert_fail@plt+0x660>
   11d44:	ldr	r3, [pc, #2324]	; 12660 <__assert_fail@plt+0x1050>
   11d48:	add	r3, pc, r3
   11d4c:	ldrb	r3, [r3, #160]	; 0xa0
   11d50:	cmp	r3, #0
   11d54:	bne	1240c <__assert_fail@plt+0xdfc>
   11d58:	ldr	r3, [pc, #2268]	; 1263c <__assert_fail@plt+0x102c>
   11d5c:	mov	ip, #1
   11d60:	ldr	sl, [r8, r3]
   11d64:	str	ip, [sp, #40]	; 0x28
   11d68:	ldr	r0, [sl]
   11d6c:	cmp	r0, #0
   11d70:	streq	ip, [sp, #36]	; 0x24
   11d74:	beq	11c70 <__assert_fail@plt+0x660>
   11d78:	bl	14c90 <__assert_fail@plt+0x3680>
   11d7c:	ldr	ip, [sp, #40]	; 0x28
   11d80:	str	ip, [sp, #36]	; 0x24
   11d84:	b	11c70 <__assert_fail@plt+0x660>
   11d88:	ldr	r3, [pc, #2260]	; 12664 <__assert_fail@plt+0x1054>
   11d8c:	mov	r2, #1
   11d90:	add	r3, pc, r3
   11d94:	strb	r2, [r3, #234]	; 0xea
   11d98:	b	11c70 <__assert_fail@plt+0x660>
   11d9c:	ldr	ip, [pc, #2200]	; 1263c <__assert_fail@plt+0x102c>
   11da0:	mov	r1, #0
   11da4:	ldr	r0, [pc, #2236]	; 12668 <__assert_fail@plt+0x1058>
   11da8:	mov	r2, #10
   11dac:	add	r3, sp, #80	; 0x50
   11db0:	ldr	sl, [r8, ip]
   11db4:	add	r0, pc, r0
   11db8:	str	r0, [sp]
   11dbc:	ldr	r0, [sl]
   11dc0:	bl	1a5a4 <close_stdout@@Base+0x3e94>
   11dc4:	cmp	r0, #0
   11dc8:	beq	12454 <__assert_fail@plt+0xe44>
   11dcc:	ldr	r1, [pc, #2200]	; 1266c <__assert_fail@plt+0x105c>
   11dd0:	mov	r2, #5
   11dd4:	mov	r0, #0
   11dd8:	add	r1, pc, r1
   11ddc:	bl	11388 <dcgettext@plt>
   11de0:	mov	fp, r0
   11de4:	ldr	r0, [sl]
   11de8:	bl	1850c <close_stdout@@Base+0x1dfc>
   11dec:	mov	r2, fp
   11df0:	mov	r1, #0
   11df4:	mov	r3, r0
   11df8:	mov	r0, #1
   11dfc:	bl	11430 <error@plt>
   11e00:	ldr	r3, [sp, #80]	; 0x50
   11e04:	ldr	r2, [pc, #2148]	; 12670 <__assert_fail@plt+0x1060>
   11e08:	add	r2, pc, r2
   11e0c:	str	r3, [r2, #128]	; 0x80
   11e10:	b	11c70 <__assert_fail@plt+0x660>
   11e14:	ldr	r3, [pc, #2080]	; 1263c <__assert_fail@plt+0x102c>
   11e18:	mov	r2, #1
   11e1c:	ldr	ip, [sp, #24]
   11e20:	strb	r2, [ip, #247]	; 0xf7
   11e24:	ldr	sl, [r8, r3]
   11e28:	ldr	r0, [sl]
   11e2c:	cmp	r0, #0
   11e30:	beq	11c70 <__assert_fail@plt+0x660>
   11e34:	ldr	ip, [sp, #52]	; 0x34
   11e38:	mov	r1, #110	; 0x6e
   11e3c:	ldr	r3, [pc, #2096]	; 12674 <__assert_fail@plt+0x1064>
   11e40:	add	r3, pc, r3
   11e44:	str	ip, [sp]
   11e48:	add	r2, r3, #76	; 0x4c
   11e4c:	str	r2, [sp, #4]
   11e50:	add	r2, r3, #84	; 0x54
   11e54:	add	r3, r3, #80	; 0x50
   11e58:	bl	16544 <__assert_fail@plt+0x4f34>
   11e5c:	b	11c70 <__assert_fail@plt+0x660>
   11e60:	ldr	r1, [pc, #2064]	; 12678 <__assert_fail@plt+0x1068>
   11e64:	mov	r0, #1
   11e68:	ldr	r3, [pc, #2060]	; 1267c <__assert_fail@plt+0x106c>
   11e6c:	mov	r2, #0
   11e70:	add	r1, pc, r1
   11e74:	add	r3, pc, r3
   11e78:	strb	r0, [r1, #96]	; 0x60
   11e7c:	strb	r2, [r3, #4]
   11e80:	b	11c70 <__assert_fail@plt+0x660>
   11e84:	ldr	ip, [pc, #1968]	; 1263c <__assert_fail@plt+0x102c>
   11e88:	mov	r1, #0
   11e8c:	ldr	r0, [pc, #2028]	; 12680 <__assert_fail@plt+0x1070>
   11e90:	mov	r2, #10
   11e94:	add	r3, sp, #80	; 0x50
   11e98:	ldr	sl, [r8, ip]
   11e9c:	add	r0, pc, r0
   11ea0:	str	r0, [sp]
   11ea4:	ldr	r0, [sl]
   11ea8:	bl	1a5a4 <close_stdout@@Base+0x3e94>
   11eac:	cmp	r0, #0
   11eb0:	beq	12474 <__assert_fail@plt+0xe64>
   11eb4:	ldr	r1, [pc, #1992]	; 12684 <__assert_fail@plt+0x1074>
   11eb8:	mov	r2, #5
   11ebc:	mov	r0, #0
   11ec0:	add	r1, pc, r1
   11ec4:	bl	11388 <dcgettext@plt>
   11ec8:	mov	fp, r0
   11ecc:	ldr	r0, [sl]
   11ed0:	bl	1850c <close_stdout@@Base+0x1dfc>
   11ed4:	mov	r2, fp
   11ed8:	mov	r1, #0
   11edc:	mov	r3, r0
   11ee0:	mov	r0, #1
   11ee4:	bl	11430 <error@plt>
   11ee8:	ldr	r3, [sp, #80]	; 0x50
   11eec:	ldr	r2, [pc, #1940]	; 12688 <__assert_fail@plt+0x1078>
   11ef0:	add	r2, pc, r2
   11ef4:	str	r3, [r2, #100]	; 0x64
   11ef8:	b	11c70 <__assert_fail@plt+0x660>
   11efc:	ldr	r3, [pc, #1848]	; 1263c <__assert_fail@plt+0x102c>
   11f00:	ldr	sl, [r8, r3]
   11f04:	ldr	r0, [sl]
   11f08:	cmp	r0, #0
   11f0c:	beq	11f30 <__assert_fail@plt+0x920>
   11f10:	ldr	ip, [sp, #20]
   11f14:	add	r2, sp, #80	; 0x50
   11f18:	mov	r1, #105	; 0x69
   11f1c:	add	r3, ip, #48	; 0x30
   11f20:	stm	sp, {r2, r3}
   11f24:	ldr	r2, [sp, #56]	; 0x38
   11f28:	add	r3, ip, #44	; 0x2c
   11f2c:	bl	16544 <__assert_fail@plt+0x4f34>
   11f30:	ldr	r3, [pc, #1876]	; 1268c <__assert_fail@plt+0x107c>
   11f34:	mov	r2, #1
   11f38:	add	r3, pc, r3
   11f3c:	strb	r2, [r3, #40]	; 0x28
   11f40:	b	11c70 <__assert_fail@plt+0x660>
   11f44:	ldr	r2, [pc, #1776]	; 1263c <__assert_fail@plt+0x102c>
   11f48:	ldr	r3, [pc, #1856]	; 12690 <__assert_fail@plt+0x1080>
   11f4c:	ldr	sl, [r8, r2]
   11f50:	add	r3, pc, r3
   11f54:	ldr	r2, [sl]
   11f58:	str	r2, [r3, #116]	; 0x74
   11f5c:	b	11c70 <__assert_fail@plt+0x660>
   11f60:	ldr	r3, [pc, #1748]	; 1263c <__assert_fail@plt+0x102c>
   11f64:	ldr	sl, [r8, r3]
   11f68:	ldr	r0, [sl]
   11f6c:	cmp	r0, #0
   11f70:	beq	11f94 <__assert_fail@plt+0x984>
   11f74:	ldr	ip, [sp, #28]
   11f78:	add	r2, sp, #80	; 0x50
   11f7c:	mov	r1, #101	; 0x65
   11f80:	add	r3, ip, #24
   11f84:	stm	sp, {r2, r3}
   11f88:	ldr	r2, [sp, #60]	; 0x3c
   11f8c:	add	r3, sp, #76	; 0x4c
   11f90:	bl	16544 <__assert_fail@plt+0x4f34>
   11f94:	ldr	r3, [pc, #1784]	; 12694 <__assert_fail@plt+0x1084>
   11f98:	mov	r2, #1
   11f9c:	add	r3, pc, r3
   11fa0:	strb	r2, [r3, #32]
   11fa4:	b	11c70 <__assert_fail@plt+0x660>
   11fa8:	ldr	r3, [pc, #1768]	; 12698 <__assert_fail@plt+0x1088>
   11fac:	mov	r2, #1
   11fb0:	add	r3, pc, r3
   11fb4:	strb	r2, [r3, #244]	; 0xf4
   11fb8:	b	11c70 <__assert_fail@plt+0x660>
   11fbc:	ldr	r3, [pc, #1752]	; 1269c <__assert_fail@plt+0x108c>
   11fc0:	mov	r2, #1
   11fc4:	add	r3, pc, r3
   11fc8:	strb	r2, [r3, #34]	; 0x22
   11fcc:	b	11c70 <__assert_fail@plt+0x660>
   11fd0:	ldr	r3, [pc, #1736]	; 126a0 <__assert_fail@plt+0x1090>
   11fd4:	mov	r2, #1
   11fd8:	add	r3, pc, r3
   11fdc:	strb	r2, [r3, #245]	; 0xf5
   11fe0:	b	11c70 <__assert_fail@plt+0x660>
   11fe4:	ldr	r1, [pc, #1720]	; 126a4 <__assert_fail@plt+0x1094>
   11fe8:	mov	r0, #1
   11fec:	ldr	r3, [pc, #1716]	; 126a8 <__assert_fail@plt+0x1098>
   11ff0:	mov	r2, #0
   11ff4:	add	r1, pc, r1
   11ff8:	add	r3, pc, r3
   11ffc:	strb	r0, [r1, #253]	; 0xfd
   12000:	strb	r2, [r3, #4]
   12004:	b	11c70 <__assert_fail@plt+0x660>
   12008:	ldr	r3, [pc, #1692]	; 126ac <__assert_fail@plt+0x109c>
   1200c:	mov	lr, #1
   12010:	ldr	ip, [pc, #1572]	; 1263c <__assert_fail@plt+0x102c>
   12014:	mov	r1, #0
   12018:	add	r3, pc, r3
   1201c:	ldr	r0, [pc, #1676]	; 126b0 <__assert_fail@plt+0x10a0>
   12020:	mov	r2, #10
   12024:	strb	lr, [r3, #188]	; 0xbc
   12028:	add	r0, pc, r0
   1202c:	ldr	sl, [r8, ip]
   12030:	add	r3, sp, #80	; 0x50
   12034:	str	r0, [sp]
   12038:	ldr	r0, [sl]
   1203c:	bl	1a5a4 <close_stdout@@Base+0x3e94>
   12040:	cmp	r0, #0
   12044:	beq	1241c <__assert_fail@plt+0xe0c>
   12048:	ldr	r1, [pc, #1636]	; 126b4 <__assert_fail@plt+0x10a4>
   1204c:	mov	r2, #5
   12050:	mov	r0, #0
   12054:	add	r1, pc, r1
   12058:	bl	11388 <dcgettext@plt>
   1205c:	mov	fp, r0
   12060:	ldr	r0, [sl]
   12064:	bl	1850c <close_stdout@@Base+0x1dfc>
   12068:	mov	r2, fp
   1206c:	mov	r1, #0
   12070:	mov	r3, r0
   12074:	mov	r0, #1
   12078:	bl	11430 <error@plt>
   1207c:	ldr	r3, [sp, #80]	; 0x50
   12080:	ldr	r2, [pc, #1584]	; 126b8 <__assert_fail@plt+0x10a8>
   12084:	mov	ip, #0
   12088:	str	ip, [sp, #32]
   1208c:	add	r2, pc, r2
   12090:	str	r3, [r2, #64]	; 0x40
   12094:	b	11c70 <__assert_fail@plt+0x660>
   12098:	ldr	r1, [pc, #1564]	; 126bc <__assert_fail@plt+0x10ac>
   1209c:	mov	r3, #0
   120a0:	ldr	r2, [pc, #1560]	; 126c0 <__assert_fail@plt+0x10b0>
   120a4:	add	r1, pc, r1
   120a8:	add	r2, pc, r2
   120ac:	strb	r3, [r1, #68]	; 0x44
   120b0:	strb	r3, [r2, #173]	; 0xad
   120b4:	b	11c70 <__assert_fail@plt+0x660>
   120b8:	ldr	r1, [pc, #1540]	; 126c4 <__assert_fail@plt+0x10b4>
   120bc:	mov	r2, #0
   120c0:	ldr	ip, [pc, #1536]	; 126c8 <__assert_fail@plt+0x10b8>
   120c4:	mov	r0, #1
   120c8:	add	r1, pc, r1
   120cc:	ldr	r3, [pc, #1528]	; 126cc <__assert_fail@plt+0x10bc>
   120d0:	add	ip, pc, ip
   120d4:	str	ip, [r1]
   120d8:	add	r3, pc, r3
   120dc:	ldr	r1, [pc, #1368]	; 1263c <__assert_fail@plt+0x102c>
   120e0:	strb	r0, [r3, #160]	; 0xa0
   120e4:	str	r2, [r3, #56]	; 0x38
   120e8:	str	r2, [r3, #48]	; 0x30
   120ec:	ldr	sl, [r8, r1]
   120f0:	ldr	r0, [sl]
   120f4:	cmp	r0, r2
   120f8:	streq	r0, [sp, #40]	; 0x28
   120fc:	beq	11c70 <__assert_fail@plt+0x660>
   12100:	str	r2, [sp, #40]	; 0x28
   12104:	bl	14c90 <__assert_fail@plt+0x3680>
   12108:	b	11c70 <__assert_fail@plt+0x660>
   1210c:	ldr	r3, [pc, #1468]	; 126d0 <__assert_fail@plt+0x10c0>
   12110:	mov	sl, #0
   12114:	ldr	ip, [pc, #1312]	; 1263c <__assert_fail@plt+0x102c>
   12118:	mov	r1, sl
   1211c:	add	r3, pc, r3
   12120:	ldr	r0, [pc, #1452]	; 126d4 <__assert_fail@plt+0x10c4>
   12124:	mov	r2, #10
   12128:	strb	sl, [r3, #69]	; 0x45
   1212c:	add	r0, pc, r0
   12130:	ldr	ip, [r8, ip]
   12134:	add	r3, sp, #80	; 0x50
   12138:	str	r0, [sp]
   1213c:	ldr	r0, [ip]
   12140:	str	ip, [sp, #48]	; 0x30
   12144:	bl	1a5a4 <close_stdout@@Base+0x3e94>
   12148:	cmp	r0, sl
   1214c:	bne	12484 <__assert_fail@plt+0xe74>
   12150:	ldr	r3, [pc, #1408]	; 126d8 <__assert_fail@plt+0x10c8>
   12154:	ldr	r2, [sp, #80]	; 0x50
   12158:	add	r3, pc, r3
   1215c:	str	r2, [r3, #104]	; 0x68
   12160:	b	11c70 <__assert_fail@plt+0x660>
   12164:	ldr	r3, [pc, #1392]	; 126dc <__assert_fail@plt+0x10cc>
   12168:	mov	r2, #1
   1216c:	add	r3, pc, r3
   12170:	strb	r2, [r3, #246]	; 0xf6
   12174:	b	11c70 <__assert_fail@plt+0x660>
   12178:	ldr	r3, [pc, #1376]	; 126e0 <__assert_fail@plt+0x10d0>
   1217c:	mov	r2, #1
   12180:	add	r3, pc, r3
   12184:	strb	r2, [r3, #252]	; 0xfc
   12188:	b	11c70 <__assert_fail@plt+0x660>
   1218c:	ldr	r2, [pc, #1192]	; 1263c <__assert_fail@plt+0x102c>
   12190:	ldr	r3, [pc, #1356]	; 126e4 <__assert_fail@plt+0x10d4>
   12194:	ldr	sl, [r8, r2]
   12198:	add	r3, pc, r3
   1219c:	ldr	r2, [sl]
   121a0:	str	r2, [r3, #108]	; 0x6c
   121a4:	b	11c70 <__assert_fail@plt+0x660>
   121a8:	ldr	r3, [pc, #1336]	; 126e8 <__assert_fail@plt+0x10d8>
   121ac:	add	r3, pc, r3
   121b0:	ldrd	r2, [r3, #88]	; 0x58
   121b4:	orrs	r0, r2, r3
   121b8:	ldr	r3, [pc, #1148]	; 1263c <__assert_fail@plt+0x102c>
   121bc:	ldr	sl, [r8, r3]
   121c0:	beq	1242c <__assert_fail@plt+0xe1c>
   121c4:	ldr	r3, [sl]
   121c8:	ldr	ip, [sp, #44]	; 0x2c
   121cc:	str	r3, [ip, r9, lsl #2]
   121d0:	add	r9, r9, #1
   121d4:	b	11c70 <__assert_fail@plt+0x660>
   121d8:	mov	r0, #0
   121dc:	bl	161c8 <__assert_fail@plt+0x4bb8>
   121e0:	ldr	r2, [pc, #1284]	; 126ec <__assert_fail@plt+0x10dc>
   121e4:	mov	r4, #0
   121e8:	ldr	r3, [pc, #1280]	; 126f0 <__assert_fail@plt+0x10e0>
   121ec:	ldr	r1, [pc, #1280]	; 126f4 <__assert_fail@plt+0x10e4>
   121f0:	ldr	r0, [r8, r2]
   121f4:	ldr	r3, [r8, r3]
   121f8:	add	r1, pc, r1
   121fc:	ldr	r2, [pc, #1268]	; 126f8 <__assert_fail@plt+0x10e8>
   12200:	ldr	r0, [r0]
   12204:	add	r2, pc, r2
   12208:	ldr	r3, [r3]
   1220c:	stm	sp, {r1, r2, r4}
   12210:	ldr	r1, [pc, #1252]	; 126fc <__assert_fail@plt+0x10ec>
   12214:	ldr	r2, [pc, #1252]	; 12700 <__assert_fail@plt+0x10f0>
   12218:	add	r1, pc, r1
   1221c:	add	r2, pc, r2
   12220:	bl	1a228 <close_stdout@@Base+0x3b18>
   12224:	mov	r0, r4
   12228:	bl	114cc <exit@plt>
   1222c:	mov	r0, #1
   12230:	bl	161c8 <__assert_fail@plt+0x4bb8>
   12234:	cmp	r5, #0
   12238:	beq	1224c <__assert_fail@plt+0xc3c>
   1223c:	mov	r0, r5
   12240:	bl	12ad4 <__assert_fail@plt+0x14c4>
   12244:	mov	r0, r5
   12248:	bl	11328 <free@plt>
   1224c:	ldr	r3, [pc, #1200]	; 12704 <__assert_fail@plt+0x10f4>
   12250:	add	r3, pc, r3
   12254:	ldr	r3, [r3, #108]	; 0x6c
   12258:	cmp	r3, #0
   1225c:	beq	127a4 <__assert_fail@plt+0x1194>
   12260:	ldr	r1, [pc, #1184]	; 12708 <__assert_fail@plt+0x10f8>
   12264:	ldr	r5, [pc, #1184]	; 1270c <__assert_fail@plt+0x10fc>
   12268:	add	r1, pc, r1
   1226c:	add	r5, pc, r5
   12270:	ldrd	r2, [r1, #88]	; 0x58
   12274:	orrs	r0, r2, r3
   12278:	moveq	r3, #0
   1227c:	moveq	r2, #1
   12280:	strdeq	r2, [r1, #88]	; 0x58
   12284:	ldrb	r3, [r5, #96]	; 0x60
   12288:	cmp	r3, #0
   1228c:	beq	122b0 <__assert_fail@plt+0xca0>
   12290:	ldrb	r3, [r5, #20]
   12294:	cmp	r3, #0
   12298:	bne	12770 <__assert_fail@plt+0x1160>
   1229c:	ldr	r3, [pc, #1132]	; 12710 <__assert_fail@plt+0x1100>
   122a0:	add	r3, pc, r3
   122a4:	ldrb	r3, [r3, #253]	; 0xfd
   122a8:	cmp	r3, #0
   122ac:	bne	1259c <__assert_fail@plt+0xf8c>
   122b0:	ldr	ip, [sp, #36]	; 0x24
   122b4:	cmp	ip, #0
   122b8:	bne	123cc <__assert_fail@plt+0xdbc>
   122bc:	ldr	r3, [pc, #1104]	; 12714 <__assert_fail@plt+0x1104>
   122c0:	ldr	r0, [r8, r3]
   122c4:	ldr	r2, [r0]
   122c8:	cmp	r4, r2
   122cc:	ble	12308 <__assert_fail@plt+0xcf8>
   122d0:	ldr	r1, [sp, #44]	; 0x2c
   122d4:	add	r6, r6, r2, lsl #2
   122d8:	mov	lr, r2
   122dc:	mov	r3, #0
   122e0:	add	ip, r1, r9, lsl #2
   122e4:	ldr	r1, [r6, r3]
   122e8:	add	r2, r2, #1
   122ec:	cmp	r2, r4
   122f0:	str	r2, [r0]
   122f4:	str	r1, [ip, r3]
   122f8:	add	r3, r3, #4
   122fc:	bne	122e4 <__assert_fail@plt+0xcd4>
   12300:	rsb	r4, lr, r4
   12304:	add	r9, r4, r9
   12308:	cmp	r9, #0
   1230c:	beq	12518 <__assert_fail@plt+0xf08>
   12310:	ldr	r3, [pc, #1024]	; 12718 <__assert_fail@plt+0x1108>
   12314:	add	r3, pc, r3
   12318:	ldrb	r4, [r3, #96]	; 0x60
   1231c:	cmp	r4, #0
   12320:	ldreq	r5, [sp, #44]	; 0x2c
   12324:	bne	124c0 <__assert_fail@plt+0xeb0>
   12328:	mov	r1, r5
   1232c:	add	r4, r4, #1
   12330:	mov	r0, #1
   12334:	add	r5, r5, #4
   12338:	bl	14e28 <__assert_fail@plt+0x3818>
   1233c:	cmp	r4, r9
   12340:	bne	12328 <__assert_fail@plt+0xd18>
   12344:	ldr	r4, [pc, #976]	; 1271c <__assert_fail@plt+0x110c>
   12348:	add	r4, pc, r4
   1234c:	ldr	r0, [r4, #176]	; 0xb0
   12350:	bl	11328 <free@plt>
   12354:	ldr	r0, [r4, #24]
   12358:	bl	11328 <free@plt>
   1235c:	ldr	r0, [r4]
   12360:	bl	11328 <free@plt>
   12364:	ldr	r0, [r4, #148]	; 0x94
   12368:	bl	11328 <free@plt>
   1236c:	ldr	r0, [r4, #168]	; 0xa8
   12370:	bl	11328 <free@plt>
   12374:	ldr	r0, [r4, #16]
   12378:	bl	11328 <free@plt>
   1237c:	ldrb	r3, [r4, #232]	; 0xe8
   12380:	cmp	r3, #0
   12384:	bne	124d0 <__assert_fail@plt+0xec0>
   12388:	ldr	r3, [pc, #912]	; 12720 <__assert_fail@plt+0x1110>
   1238c:	add	r3, pc, r3
   12390:	ldrb	r0, [r3, #233]	; 0xe9
   12394:	cmp	r0, #0
   12398:	beq	123c8 <__assert_fail@plt+0xdb8>
   1239c:	mov	r0, #1
   123a0:	bl	114cc <exit@plt>
   123a4:	ldr	r3, [pc, #888]	; 12724 <__assert_fail@plt+0x1114>
   123a8:	ldr	r1, [pc, #888]	; 12728 <__assert_fail@plt+0x1118>
   123ac:	add	r3, pc, r3
   123b0:	ldr	r2, [pc, #884]	; 1272c <__assert_fail@plt+0x111c>
   123b4:	add	r1, pc, r1
   123b8:	add	r2, pc, r2
   123bc:	str	r1, [r3, #164]	; 0xa4
   123c0:	str	r2, [r3, #192]	; 0xc0
   123c4:	b	116bc <__assert_fail@plt+0xac>
   123c8:	bl	114cc <exit@plt>
   123cc:	ldr	ip, [sp, #32]
   123d0:	cmp	ip, #0
   123d4:	beq	12528 <__assert_fail@plt+0xf18>
   123d8:	ldr	r3, [pc, #848]	; 12730 <__assert_fail@plt+0x1120>
   123dc:	add	r3, pc, r3
   123e0:	ldrb	r2, [r3, #96]	; 0x60
   123e4:	cmp	r2, #0
   123e8:	beq	125c4 <__assert_fail@plt+0xfb4>
   123ec:	ldr	r3, [pc, #832]	; 12734 <__assert_fail@plt+0x1124>
   123f0:	mov	r2, #1
   123f4:	ldr	ip, [sp, #40]	; 0x28
   123f8:	add	r3, pc, r3
   123fc:	cmp	ip, #0
   12400:	strb	r2, [r3, #188]	; 0xbc
   12404:	beq	122bc <__assert_fail@plt+0xcac>
   12408:	b	12588 <__assert_fail@plt+0xf78>
   1240c:	mov	ip, #1
   12410:	str	ip, [sp, #40]	; 0x28
   12414:	str	ip, [sp, #36]	; 0x24
   12418:	b	11c70 <__assert_fail@plt+0x660>
   1241c:	ldr	r3, [sp, #80]	; 0x50
   12420:	cmp	r3, #0
   12424:	bgt	12080 <__assert_fail@plt+0xa70>
   12428:	b	12048 <__assert_fail@plt+0xa38>
   1242c:	ldr	r2, [sl]
   12430:	ldrb	r1, [r2]
   12434:	cmp	r1, #43	; 0x2b
   12438:	bne	121c4 <__assert_fail@plt+0xbb4>
   1243c:	add	r2, r2, #1
   12440:	mvn	r0, #1
   12444:	bl	13768 <__assert_fail@plt+0x2158>
   12448:	cmp	r0, #0
   1244c:	bne	11c70 <__assert_fail@plt+0x660>
   12450:	b	121c4 <__assert_fail@plt+0xbb4>
   12454:	ldr	r3, [sp, #80]	; 0x50
   12458:	cmp	r3, #0
   1245c:	bge	11e04 <__assert_fail@plt+0x7f4>
   12460:	b	11dcc <__assert_fail@plt+0x7bc>
   12464:	ldr	r3, [sp, #80]	; 0x50
   12468:	cmp	r3, #0
   1246c:	bgt	11cdc <__assert_fail@plt+0x6cc>
   12470:	b	11ca8 <__assert_fail@plt+0x698>
   12474:	ldr	r3, [sp, #80]	; 0x50
   12478:	cmp	r3, #0
   1247c:	bgt	11eec <__assert_fail@plt+0x8dc>
   12480:	b	11eb4 <__assert_fail@plt+0x8a4>
   12484:	ldr	r1, [pc, #684]	; 12738 <__assert_fail@plt+0x1128>
   12488:	mov	r2, #5
   1248c:	mov	r0, sl
   12490:	add	r1, pc, r1
   12494:	bl	11388 <dcgettext@plt>
   12498:	ldr	ip, [sp, #48]	; 0x30
   1249c:	mov	fp, r0
   124a0:	ldr	r0, [ip]
   124a4:	bl	1850c <close_stdout@@Base+0x1dfc>
   124a8:	mov	r2, fp
   124ac:	mov	r1, sl
   124b0:	mov	r3, r0
   124b4:	mov	r0, #1
   124b8:	bl	11430 <error@plt>
   124bc:	b	12150 <__assert_fail@plt+0xb40>
   124c0:	mov	r0, r9
   124c4:	ldr	r1, [sp, #44]	; 0x2c
   124c8:	bl	14e28 <__assert_fail@plt+0x3818>
   124cc:	b	12344 <__assert_fail@plt+0xd34>
   124d0:	ldr	r3, [pc, #612]	; 1273c <__assert_fail@plt+0x112c>
   124d4:	ldr	r3, [r8, r3]
   124d8:	ldr	r0, [r3]
   124dc:	bl	1b43c <close_stdout@@Base+0x4d2c>
   124e0:	cmn	r0, #1
   124e4:	bne	12388 <__assert_fail@plt+0xd78>
   124e8:	bl	11508 <__errno_location@plt>
   124ec:	ldr	r1, [pc, #588]	; 12740 <__assert_fail@plt+0x1130>
   124f0:	mov	r2, #5
   124f4:	add	r1, pc, r1
   124f8:	ldr	r4, [r0]
   124fc:	mov	r0, #0
   12500:	bl	11388 <dcgettext@plt>
   12504:	mov	r1, r4
   12508:	mov	r2, r0
   1250c:	mov	r0, #1
   12510:	bl	11430 <error@plt>
   12514:	b	12388 <__assert_fail@plt+0xd78>
   12518:	mov	r0, r9
   1251c:	mov	r1, r9
   12520:	bl	14e28 <__assert_fail@plt+0x3818>
   12524:	b	12344 <__assert_fail@plt+0xd34>
   12528:	ldr	r3, [pc, #532]	; 12744 <__assert_fail@plt+0x1134>
   1252c:	add	r3, pc, r3
   12530:	ldrb	r2, [r3, #160]	; 0xa0
   12534:	cmp	r2, #0
   12538:	bne	122bc <__assert_fail@plt+0xcac>
   1253c:	ldr	ip, [sp, #40]	; 0x28
   12540:	cmp	ip, #0
   12544:	beq	122bc <__assert_fail@plt+0xcac>
   12548:	ldrb	r2, [r3, #96]	; 0x60
   1254c:	cmp	r2, #0
   12550:	bne	12560 <__assert_fail@plt+0xf50>
   12554:	ldrb	r3, [r3, #20]
   12558:	cmp	r3, #0
   1255c:	beq	122bc <__assert_fail@plt+0xcac>
   12560:	ldr	r3, [pc, #480]	; 12748 <__assert_fail@plt+0x1138>
   12564:	add	r3, pc, r3
   12568:	ldrb	r2, [r3, #188]	; 0xbc
   1256c:	cmp	r2, #0
   12570:	bne	12588 <__assert_fail@plt+0xf78>
   12574:	ldr	r2, [r3, #48]	; 0x30
   12578:	mov	r1, #1
   1257c:	strb	r1, [r3, #246]	; 0xf6
   12580:	cmp	r2, #0
   12584:	ble	122bc <__assert_fail@plt+0xcac>
   12588:	ldr	r3, [pc, #444]	; 1274c <__assert_fail@plt+0x113c>
   1258c:	mov	r2, #1
   12590:	add	r3, pc, r3
   12594:	strb	r2, [r3, #160]	; 0xa0
   12598:	b	122bc <__assert_fail@plt+0xcac>
   1259c:	ldr	r1, [pc, #428]	; 12750 <__assert_fail@plt+0x1140>
   125a0:	mov	r2, #5
   125a4:	mov	r0, #0
   125a8:	add	r1, pc, r1
   125ac:	bl	11388 <dcgettext@plt>
   125b0:	mov	r1, #0
   125b4:	mov	r2, r0
   125b8:	mov	r0, #1
   125bc:	bl	11430 <error@plt>
   125c0:	b	122b0 <__assert_fail@plt+0xca0>
   125c4:	ldrb	r2, [r3, #20]
   125c8:	cmp	r2, #0
   125cc:	moveq	r2, #1
   125d0:	strbeq	r2, [r3, #246]	; 0xf6
   125d4:	beq	122bc <__assert_fail@plt+0xcac>
   125d8:	b	123ec <__assert_fail@plt+0xddc>
   125dc:	ldr	r1, [pc, #368]	; 12754 <__assert_fail@plt+0x1144>
   125e0:	mov	r0, sl
   125e4:	mov	r2, #5
   125e8:	add	r1, pc, r1
   125ec:	bl	11388 <dcgettext@plt>
   125f0:	mov	r1, sl
   125f4:	mov	r2, r0
   125f8:	mov	r0, #1
   125fc:	bl	11430 <error@plt>
   12600:	b	11c70 <__assert_fail@plt+0x660>
   12604:	andeq	sp, r1, r4, asr #19
   12608:	andeq	r0, r0, r8, lsr r1
   1260c:	ldrdeq	ip, [r0], -r4
   12610:	andeq	fp, r0, r0, lsr #9
   12614:	ldrdeq	ip, [r0], -r0
   12618:	andeq	r0, r0, r8, asr #2
   1261c:	muleq	r1, r4, fp
   12620:	andeq	r3, r0, r0, lsl r3
   12624:	andeq	r1, r0, r8, lsr #22
   12628:	andeq	sp, r1, ip, asr #22
   1262c:	andeq	sp, r1, r8, ror sl
   12630:	andeq	sp, r1, r8, ror #20
   12634:	andeq	fp, r0, ip, lsl #6
   12638:	ldrdeq	sp, [r1], -r4
   1263c:	andeq	r0, r0, r0, ror r1
   12640:	andeq	ip, r0, r0, ror r0
   12644:	andeq	sl, r0, r4, ror lr
   12648:	andeq	ip, r0, r4, lsr #2
   1264c:	andeq	sp, r1, r8, asr r5
   12650:	andeq	sp, r1, r4, lsl #9
   12654:	andeq	sp, r1, r4, lsr #10
   12658:	andeq	sp, r1, r8, asr #8
   1265c:	andeq	sp, r1, r4, lsl #10
   12660:	strdeq	sp, [r1], -r0
   12664:	andeq	sp, r1, r8, lsr #9
   12668:	andeq	sl, r0, r0, asr sp
   1266c:	ldrdeq	fp, [r0], -ip
   12670:	andeq	sp, r1, r0, lsr r4
   12674:	andeq	sp, r1, r8, lsr r3
   12678:	andeq	sp, r1, r8, asr #7
   1267c:	andeq	sp, r1, r4, lsl #6
   12680:	andeq	sl, r0, r8, ror #24
   12684:	andeq	fp, r0, r4, asr #29
   12688:	andeq	sp, r1, r8, lsl #5
   1268c:	andeq	sp, r1, r0, lsl #6
   12690:	andeq	sp, r1, r8, ror #5
   12694:	muleq	r1, ip, r2
   12698:	andeq	sp, r1, r8, lsl #5
   1269c:	andeq	sp, r1, r4, ror r2
   126a0:	andeq	sp, r1, r0, ror #4
   126a4:	andeq	sp, r1, r4, asr #4
   126a8:	andeq	sp, r1, r0, lsl #3
   126ac:	andeq	sp, r1, r0, lsr #4
   126b0:	ldrdeq	sl, [r0], -ip
   126b4:			; <UNDEFINED> instruction: 0x0000bdb8
   126b8:	andeq	sp, r1, ip, ror #1
   126bc:	ldrdeq	sp, [r1], -r4
   126c0:	muleq	r1, r0, r1
   126c4:	andeq	sp, r1, ip, lsl r1
   126c8:	andeq	sl, r0, r4, lsr sl
   126cc:	andeq	sp, r1, r0, ror #2
   126d0:	andeq	sp, r1, ip, asr r0
   126d4:	ldrdeq	sl, [r0], -r8
   126d8:	andeq	sp, r1, r0, lsr #32
   126dc:	andeq	sp, r1, ip, asr #1
   126e0:	strheq	sp, [r1], -r8
   126e4:	andeq	sp, r1, r0, lsr #1
   126e8:	andeq	sp, r1, ip, lsl #1
   126ec:	andeq	r0, r0, r8, asr r1
   126f0:	andeq	r0, r0, r0, asr #2
   126f4:	andeq	fp, r0, r0, ror #21
   126f8:	andeq	fp, r0, r4, ror #21
   126fc:			; <UNDEFINED> instruction: 0x0000babc
   12700:	andeq	fp, r0, r0, lsl #18
   12704:	andeq	ip, r1, r8, ror #31
   12708:	ldrdeq	ip, [r1], -r0
   1270c:	andeq	ip, r1, ip, asr #31
   12710:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12714:	andeq	r0, r0, ip, lsr r1
   12718:	andeq	ip, r1, r4, lsr #30
   1271c:	strdeq	ip, [r1], -r0
   12720:	andeq	ip, r1, ip, lsr #29
   12724:	andeq	ip, r1, ip, lsl #29
   12728:			; <UNDEFINED> instruction: 0x00000bb8
   1272c:	strdeq	r0, [r0], -r4
   12730:	andeq	ip, r1, ip, asr lr
   12734:	andeq	ip, r1, r0, asr #28
   12738:	andeq	fp, r0, r4, lsl r8
   1273c:	andeq	r0, r0, r4, asr r1
   12740:	andeq	sl, r0, ip, lsl r6
   12744:	andeq	ip, r1, ip, lsl #26
   12748:	ldrdeq	ip, [r1], -r4
   1274c:	andeq	ip, r1, r8, lsr #25
   12750:	muleq	r0, ip, r7
   12754:	andeq	fp, r0, r0, ror r6
   12758:	andeq	fp, r0, ip, lsl #11
   1275c:	andeq	fp, r0, r0, asr r5
   12760:	andeq	fp, r0, r8, asr r4
   12764:	andeq	ip, r1, r4, ror #20
   12768:	andeq	fp, r0, r0, asr r4
   1276c:	andeq	fp, r0, r4, asr #8
   12770:	ldr	r1, [pc, #-32]	; 12758 <__assert_fail@plt+0x1148>
   12774:	mov	r2, #5
   12778:	mov	r0, #0
   1277c:	add	r1, pc, r1
   12780:	bl	11388 <dcgettext@plt>
   12784:	mov	r1, #0
   12788:	mov	r2, r0
   1278c:	mov	r0, #1
   12790:	bl	11430 <error@plt>
   12794:	ldrb	r3, [r5, #96]	; 0x60
   12798:	cmp	r3, #0
   1279c:	bne	1229c <__assert_fail@plt+0xc8c>
   127a0:	b	122b0 <__assert_fail@plt+0xca0>
   127a4:	ldr	r0, [pc, #-80]	; 1275c <__assert_fail@plt+0x114c>
   127a8:	add	r0, pc, r0
   127ac:	bl	11448 <getenv@plt>
   127b0:	cmp	r0, #0
   127b4:	beq	127ec <__assert_fail@plt+0x11dc>
   127b8:	mov	r0, #2
   127bc:	bl	16a24 <close_stdout@@Base+0x314>
   127c0:	cmp	r0, #0
   127c4:	bne	127e0 <__assert_fail@plt+0x11d0>
   127c8:	ldr	r3, [pc, #-112]	; 12760 <__assert_fail@plt+0x1150>
   127cc:	add	r3, pc, r3
   127d0:	ldr	r2, [pc, #-116]	; 12764 <__assert_fail@plt+0x1154>
   127d4:	add	r2, pc, r2
   127d8:	str	r3, [r2, #108]	; 0x6c
   127dc:	b	12260 <__assert_fail@plt+0xc50>
   127e0:	ldr	r3, [pc, #-128]	; 12768 <__assert_fail@plt+0x1158>
   127e4:	add	r3, pc, r3
   127e8:	b	127d0 <__assert_fail@plt+0x11c0>
   127ec:	ldr	r3, [pc, #-136]	; 1276c <__assert_fail@plt+0x115c>
   127f0:	add	r3, pc, r3
   127f4:	b	127d0 <__assert_fail@plt+0x11c0>
   127f8:	mov	fp, #0
   127fc:	mov	lr, #0
   12800:	pop	{r1}		; (ldr r1, [sp], #4)
   12804:	mov	r2, sp
   12808:	push	{r2}		; (str r2, [sp, #-4]!)
   1280c:	push	{r0}		; (str r0, [sp, #-4]!)
   12810:	ldr	ip, [pc, #16]	; 12828 <__assert_fail@plt+0x1218>
   12814:	push	{ip}		; (str ip, [sp, #-4]!)
   12818:	ldr	r0, [pc, #12]	; 1282c <__assert_fail@plt+0x121c>
   1281c:	ldr	r3, [pc, #12]	; 12830 <__assert_fail@plt+0x1220>
   12820:	bl	11460 <__libc_start_main@plt>
   12824:	bl	115f8 <abort@plt>
   12828:	andeq	ip, r1, r8, lsr #20
   1282c:	andeq	r1, r1, ip, lsl r6
   12830:	andeq	ip, r1, r4, asr #19
   12834:	ldr	r3, [pc, #20]	; 12850 <__assert_fail@plt+0x1240>
   12838:	ldr	r2, [pc, #20]	; 12854 <__assert_fail@plt+0x1244>
   1283c:	add	r3, pc, r3
   12840:	ldr	r2, [r3, r2]
   12844:	cmp	r2, #0
   12848:	bxeq	lr
   1284c:	b	114a8 <__gmon_start__@plt>
   12850:			; <UNDEFINED> instruction: 0x0001c7bc
   12854:	andeq	r0, r0, ip, asr #2
   12858:	push	{r3, lr}
   1285c:	movw	r0, #62008	; 0xf238
   12860:	ldr	r3, [pc, #36]	; 1288c <__assert_fail@plt+0x127c>
   12864:	movt	r0, #2
   12868:	rsb	r3, r0, r3
   1286c:	cmp	r3, #6
   12870:	popls	{r3, pc}
   12874:	movw	r3, #0
   12878:	movt	r3, #0
   1287c:	cmp	r3, #0
   12880:	popeq	{r3, pc}
   12884:	blx	r3
   12888:	pop	{r3, pc}
   1288c:	andeq	pc, r2, fp, lsr r2	; <UNPREDICTABLE>
   12890:	push	{r3, lr}
   12894:	movw	r0, #62008	; 0xf238
   12898:	movw	r3, #62008	; 0xf238
   1289c:	movt	r0, #2
   128a0:	movt	r3, #2
   128a4:	rsb	r3, r0, r3
   128a8:	asr	r3, r3, #2
   128ac:	add	r3, r3, r3, lsr #31
   128b0:	asrs	r1, r3, #1
   128b4:	popeq	{r3, pc}
   128b8:	movw	r2, #0
   128bc:	movt	r2, #0
   128c0:	cmp	r2, #0
   128c4:	popeq	{r3, pc}
   128c8:	blx	r2
   128cc:	pop	{r3, pc}
   128d0:	push	{r4, lr}
   128d4:	movw	r4, #62008	; 0xf238
   128d8:	movt	r4, #2
   128dc:	ldrb	r3, [r4]
   128e0:	cmp	r3, #0
   128e4:	popne	{r4, pc}
   128e8:	bl	12858 <__assert_fail@plt+0x1248>
   128ec:	mov	r3, #1
   128f0:	strb	r3, [r4]
   128f4:	pop	{r4, pc}
   128f8:	movw	r0, #60720	; 0xed30
   128fc:	movt	r0, #2
   12900:	push	{r3, lr}
   12904:	ldr	r3, [r0]
   12908:	cmp	r3, #0
   1290c:	beq	12924 <__assert_fail@plt+0x1314>
   12910:	movw	r3, #0
   12914:	movt	r3, #0
   12918:	cmp	r3, #0
   1291c:	beq	12924 <__assert_fail@plt+0x1314>
   12920:	blx	r3
   12924:	pop	{r3, lr}
   12928:	b	12890 <__assert_fail@plt+0x1280>
   1292c:	ldr	r2, [pc, #120]	; 129ac <__assert_fail@plt+0x139c>
   12930:	push	{r4}		; (str r4, [sp, #-4]!)
   12934:	add	r2, pc, r2
   12938:	ldr	r3, [pc, #112]	; 129b0 <__assert_fail@plt+0x13a0>
   1293c:	ldr	ip, [r2]
   12940:	add	r3, pc, r3
   12944:	cmp	ip, #0
   12948:	ldr	r3, [r3]
   1294c:	ble	129a4 <__assert_fail@plt+0x1394>
   12950:	mov	r0, #0
   12954:	ldrb	r4, [r2, #4]
   12958:	mov	r2, r0
   1295c:	ldr	r1, [r3, #8]
   12960:	add	r2, r2, #1
   12964:	cmp	r1, #1
   12968:	bls	1298c <__assert_fail@plt+0x137c>
   1296c:	cmp	r4, #0
   12970:	beq	12990 <__assert_fail@plt+0x1380>
   12974:	ldr	r1, [r3, #24]
   12978:	cmp	r1, #0
   1297c:	ble	12990 <__assert_fail@plt+0x1380>
   12980:	ldr	r1, [r3, #28]
   12984:	cmp	r1, #0
   12988:	ble	12990 <__assert_fail@plt+0x1380>
   1298c:	add	r0, r0, #1
   12990:	cmp	r2, ip
   12994:	add	r3, r3, #40	; 0x28
   12998:	bne	1295c <__assert_fail@plt+0x134c>
   1299c:	pop	{r4}		; (ldr r4, [sp], #4)
   129a0:	bx	lr
   129a4:	mov	r0, #0
   129a8:	b	1299c <__assert_fail@plt+0x138c>
   129ac:	andeq	ip, r1, r4, asr #16
   129b0:	strdeq	ip, [r1], -r8
   129b4:	ldr	r2, [pc, #160]	; 12a5c <__assert_fail@plt+0x144c>
   129b8:	push	{r4}		; (str r4, [sp, #-4]!)
   129bc:	add	r2, pc, r2
   129c0:	ldr	r3, [pc, #152]	; 12a60 <__assert_fail@plt+0x1450>
   129c4:	ldr	r2, [r2]
   129c8:	add	r3, pc, r3
   129cc:	cmp	r2, #0
   129d0:	ldr	r4, [r3]
   129d4:	beq	12a0c <__assert_fail@plt+0x13fc>
   129d8:	ldr	r0, [r3, #4]
   129dc:	mov	ip, #0
   129e0:	mov	r3, r4
   129e4:	ldr	r1, [r3, #8]
   129e8:	add	r3, r3, #40	; 0x28
   129ec:	cmp	r1, #2
   129f0:	streq	ip, [r3, #-32]	; 0xffffffe0
   129f4:	addeq	r0, r0, #1
   129f8:	subs	r2, r2, #1
   129fc:	bne	129e4 <__assert_fail@plt+0x13d4>
   12a00:	ldr	r3, [pc, #92]	; 12a64 <__assert_fail@plt+0x1454>
   12a04:	add	r3, pc, r3
   12a08:	str	r0, [r3, #4]
   12a0c:	ldr	r3, [pc, #84]	; 12a68 <__assert_fail@plt+0x1458>
   12a10:	add	r3, pc, r3
   12a14:	ldrb	r3, [r3, #4]
   12a18:	cmp	r3, #0
   12a1c:	beq	12a3c <__assert_fail@plt+0x142c>
   12a20:	ldr	r3, [r4, #8]
   12a24:	cmp	r3, #3
   12a28:	beq	12a44 <__assert_fail@plt+0x1434>
   12a2c:	ldr	r3, [pc, #56]	; 12a6c <__assert_fail@plt+0x145c>
   12a30:	mov	r2, #1
   12a34:	add	r3, pc, r3
   12a38:	str	r2, [r3, #4]
   12a3c:	pop	{r4}		; (ldr r4, [sp], #4)
   12a40:	bx	lr
   12a44:	ldr	r3, [pc, #36]	; 12a70 <__assert_fail@plt+0x1460>
   12a48:	mov	r2, #0
   12a4c:	add	r3, pc, r3
   12a50:	str	r2, [r3, #4]
   12a54:	pop	{r4}		; (ldr r4, [sp], #4)
   12a58:	bx	lr
   12a5c:			; <UNDEFINED> instruction: 0x0001c7bc
   12a60:	andeq	ip, r1, r0, ror r8
   12a64:	andeq	ip, r1, r4, lsr r8
   12a68:	andeq	ip, r1, r8, ror #14
   12a6c:	andeq	ip, r1, r4, lsl #16
   12a70:	andeq	ip, r1, ip, ror #15
   12a74:	push	{r3, r4, r5, lr}
   12a78:	mov	r5, r0
   12a7c:	ldr	r4, [pc, #72]	; 12acc <__assert_fail@plt+0x14bc>
   12a80:	add	r4, pc, r4
   12a84:	ldr	r3, [r4, #8]
   12a88:	ldr	r2, [r4, #12]
   12a8c:	cmp	r3, r2
   12a90:	bcs	12ab0 <__assert_fail@plt+0x14a0>
   12a94:	ldr	ip, [r4, #16]
   12a98:	ldr	r1, [pc, #48]	; 12ad0 <__assert_fail@plt+0x14c0>
   12a9c:	add	r2, r3, #1
   12aa0:	strb	r5, [ip, r3]
   12aa4:	add	r1, pc, r1
   12aa8:	str	r2, [r1, #8]
   12aac:	pop	{r3, r4, r5, pc}
   12ab0:	ldr	r0, [r4, #16]
   12ab4:	add	r1, r4, #12
   12ab8:	bl	1a488 <close_stdout@@Base+0x3d78>
   12abc:	ldr	r3, [r4, #8]
   12ac0:	mov	ip, r0
   12ac4:	str	r0, [r4, #16]
   12ac8:	b	12a98 <__assert_fail@plt+0x1488>
   12acc:			; <UNDEFINED> instruction: 0x0001c7b8
   12ad0:	muleq	r1, r4, r7
   12ad4:	ldr	ip, [pc, #192]	; 12b9c <__assert_fail@plt+0x158c>
   12ad8:	mov	r1, #0
   12adc:	push	{r4, r5, r6, lr}
   12ae0:	add	ip, pc, ip
   12ae4:	ldr	r4, [pc, #180]	; 12ba0 <__assert_fail@plt+0x1590>
   12ae8:	sub	sp, sp, #16
   12aec:	ldr	lr, [pc, #176]	; 12ba4 <__assert_fail@plt+0x1594>
   12af0:	mov	r2, #10
   12af4:	add	r3, sp, #8
   12af8:	mov	r6, r0
   12afc:	ldr	r4, [ip, r4]
   12b00:	add	lr, pc, lr
   12b04:	str	lr, [sp]
   12b08:	ldr	ip, [r4]
   12b0c:	str	ip, [sp, #12]
   12b10:	bl	1a5a4 <close_stdout@@Base+0x3e94>
   12b14:	cmp	r0, #0
   12b18:	bne	12b5c <__assert_fail@plt+0x154c>
   12b1c:	ldr	r5, [sp, #8]
   12b20:	cmp	r5, #0
   12b24:	ble	12b5c <__assert_fail@plt+0x154c>
   12b28:	ldr	ip, [sp, #12]
   12b2c:	mov	r2, #1
   12b30:	ldr	r0, [r4]
   12b34:	ldr	r1, [pc, #108]	; 12ba8 <__assert_fail@plt+0x1598>
   12b38:	ldr	r3, [pc, #108]	; 12bac <__assert_fail@plt+0x159c>
   12b3c:	cmp	ip, r0
   12b40:	add	r1, pc, r1
   12b44:	add	r3, pc, r3
   12b48:	str	r5, [r1]
   12b4c:	strb	r2, [r3, #20]
   12b50:	bne	12b98 <__assert_fail@plt+0x1588>
   12b54:	add	sp, sp, #16
   12b58:	pop	{r4, r5, r6, pc}
   12b5c:	ldr	r1, [pc, #76]	; 12bb0 <__assert_fail@plt+0x15a0>
   12b60:	mov	r2, #5
   12b64:	mov	r0, #0
   12b68:	add	r1, pc, r1
   12b6c:	bl	11388 <dcgettext@plt>
   12b70:	mov	r5, r0
   12b74:	mov	r0, r6
   12b78:	bl	1850c <close_stdout@@Base+0x1dfc>
   12b7c:	mov	r2, r5
   12b80:	mov	r1, #0
   12b84:	mov	r3, r0
   12b88:	mov	r0, #1
   12b8c:	bl	11430 <error@plt>
   12b90:	ldr	r5, [sp, #8]
   12b94:	b	12b28 <__assert_fail@plt+0x1518>
   12b98:	bl	11394 <__stack_chk_fail@plt>
   12b9c:	andeq	ip, r1, r8, lsl r5
   12ba0:	andeq	r0, r0, r8, lsr r1
   12ba4:	andeq	sl, r0, r4
   12ba8:	andeq	ip, r1, r8, lsr r6
   12bac:	strdeq	ip, [r1], -r4
   12bb0:	andeq	r9, r0, r0, lsr pc
   12bb4:	ldr	r3, [pc, #516]	; 12dc0 <__assert_fail@plt+0x17b0>
   12bb8:	ldr	r1, [pc, #516]	; 12dc4 <__assert_fail@plt+0x17b4>
   12bbc:	add	r3, pc, r3
   12bc0:	ldr	r2, [pc, #512]	; 12dc8 <__assert_fail@plt+0x17b8>
   12bc4:	push	{r4, r5, r6, r7, r8, r9, lr}
   12bc8:	add	r2, pc, r2
   12bcc:	ldr	r6, [r3, r1]
   12bd0:	sub	sp, sp, #20
   12bd4:	ldr	r7, [pc, #496]	; 12dcc <__assert_fail@plt+0x17bc>
   12bd8:	mov	r5, r0
   12bdc:	ldrb	r1, [r2, #8]
   12be0:	ldr	r3, [r6]
   12be4:	add	r7, pc, r7
   12be8:	cmp	r1, r0
   12bec:	ldr	r4, [r7, #24]
   12bf0:	str	r3, [sp, #12]
   12bf4:	ldreq	r9, [r2, #24]
   12bf8:	beq	12c9c <__assert_fail@plt+0x168c>
   12bfc:	cmp	r0, #9
   12c00:	beq	12c98 <__assert_fail@plt+0x1688>
   12c04:	bl	114c0 <__ctype_b_loc@plt>
   12c08:	lsl	r3, r5, #1
   12c0c:	ldr	r2, [r0]
   12c10:	ldrh	r3, [r2, r3]
   12c14:	tst	r3, #16384	; 0x4000
   12c18:	beq	12c5c <__assert_fail@plt+0x164c>
   12c1c:	mov	r0, #1
   12c20:	strb	r5, [r4]
   12c24:	mov	r1, r0
   12c28:	ldr	r3, [pc, #416]	; 12dd0 <__assert_fail@plt+0x17c0>
   12c2c:	add	r3, pc, r3
   12c30:	ldr	r3, [r3, #28]
   12c34:	ldr	r2, [pc, #408]	; 12dd4 <__assert_fail@plt+0x17c4>
   12c38:	add	r1, r3, r1
   12c3c:	add	r2, pc, r2
   12c40:	str	r1, [r2, #28]
   12c44:	ldr	r2, [sp, #12]
   12c48:	ldr	r3, [r6]
   12c4c:	cmp	r2, r3
   12c50:	bne	12dbc <__assert_fail@plt+0x17ac>
   12c54:	add	sp, sp, #20
   12c58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12c5c:	ldrb	r3, [r7, #33]	; 0x21
   12c60:	cmp	r3, #0
   12c64:	bne	12d28 <__assert_fail@plt+0x1718>
   12c68:	ldrb	r1, [r7, #34]	; 0x22
   12c6c:	cmp	r1, #0
   12c70:	beq	12d70 <__assert_fail@plt+0x1760>
   12c74:	tst	r5, #128	; 0x80
   12c78:	bne	12d98 <__assert_fail@plt+0x1788>
   12c7c:	mov	r0, #2
   12c80:	eor	r5, r5, #64	; 0x40
   12c84:	mov	r3, #94	; 0x5e
   12c88:	mov	r1, r0
   12c8c:	strb	r5, [r4, #1]
   12c90:	strb	r3, [r4]
   12c94:	b	12c28 <__assert_fail@plt+0x1618>
   12c98:	mov	r9, #8
   12c9c:	ldr	r7, [pc, #308]	; 12dd8 <__assert_fail@plt+0x17c8>
   12ca0:	mov	r1, r9
   12ca4:	add	r7, pc, r7
   12ca8:	ldr	r8, [r7, #28]
   12cac:	mov	r0, r8
   12cb0:	bl	1c024 <close_stdout@@Base+0x5914>
   12cb4:	ldrb	r3, [r7, #32]
   12cb8:	cmp	r3, #0
   12cbc:	rsb	r1, r1, r9
   12cc0:	beq	12d1c <__assert_fail@plt+0x170c>
   12cc4:	cmp	r1, #0
   12cc8:	beq	12d8c <__assert_fail@plt+0x177c>
   12ccc:	add	r2, r4, r1
   12cd0:	mov	r3, #32
   12cd4:	strb	r3, [r4], #1
   12cd8:	cmp	r4, r2
   12cdc:	bne	12cd4 <__assert_fail@plt+0x16c4>
   12ce0:	mov	r0, r1
   12ce4:	cmp	r1, #0
   12ce8:	mov	r3, r8
   12cec:	bge	12c34 <__assert_fail@plt+0x1624>
   12cf0:	cmp	r3, #0
   12cf4:	moveq	r0, r3
   12cf8:	beq	12c44 <__assert_fail@plt+0x1634>
   12cfc:	rsb	r2, r1, #0
   12d00:	cmp	r3, r2
   12d04:	bgt	12c34 <__assert_fail@plt+0x1624>
   12d08:	ldr	r3, [pc, #204]	; 12ddc <__assert_fail@plt+0x17cc>
   12d0c:	mov	r2, #0
   12d10:	add	r3, pc, r3
   12d14:	str	r2, [r3, #28]
   12d18:	b	12c44 <__assert_fail@plt+0x1634>
   12d1c:	strb	r5, [r4]
   12d20:	mov	r0, #1
   12d24:	b	12ce4 <__assert_fail@plt+0x16d4>
   12d28:	mov	r3, #92	; 0x5c
   12d2c:	strb	r3, [r4]
   12d30:	ldr	r3, [pc, #168]	; 12de0 <__assert_fail@plt+0x17d0>
   12d34:	add	r0, sp, #8
   12d38:	mov	r1, #1
   12d3c:	mov	r2, #4
   12d40:	add	r3, pc, r3
   12d44:	str	r5, [sp]
   12d48:	bl	11514 <__sprintf_chk@plt>
   12d4c:	ldrb	r3, [sp, #8]
   12d50:	mov	r0, #4
   12d54:	mov	r1, r0
   12d58:	strb	r3, [r4, #1]
   12d5c:	ldrb	r3, [sp, #9]
   12d60:	strb	r3, [r4, #2]
   12d64:	ldrb	r3, [sp, #10]
   12d68:	strb	r3, [r4, #3]
   12d6c:	b	12c28 <__assert_fail@plt+0x1618>
   12d70:	cmp	r5, #8
   12d74:	strb	r5, [r4]
   12d78:	mov	r0, #1
   12d7c:	bne	12c28 <__assert_fail@plt+0x1618>
   12d80:	ldr	r3, [r7, #28]
   12d84:	mvn	r1, #0
   12d88:	b	12cf0 <__assert_fail@plt+0x16e0>
   12d8c:	mov	r3, r8
   12d90:	mov	r0, r1
   12d94:	b	12c34 <__assert_fail@plt+0x1624>
   12d98:	mov	r3, #92	; 0x5c
   12d9c:	strb	r3, [r4]
   12da0:	ldr	r3, [pc, #60]	; 12de4 <__assert_fail@plt+0x17d4>
   12da4:	add	r0, sp, #8
   12da8:	mov	r1, #1
   12dac:	str	r5, [sp]
   12db0:	mov	r2, #4
   12db4:	add	r3, pc, r3
   12db8:	b	12d48 <__assert_fail@plt+0x1738>
   12dbc:	bl	11394 <__stack_chk_fail@plt>
   12dc0:	andeq	ip, r1, ip, lsr r4
   12dc4:	andeq	r0, r0, r8, lsr r1
   12dc8:			; <UNDEFINED> instruction: 0x0001c5b0
   12dcc:	andeq	ip, r1, r4, asr r6
   12dd0:	andeq	ip, r1, ip, lsl #12
   12dd4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12dd8:	muleq	r1, r4, r5
   12ddc:	andeq	ip, r1, r8, lsr #10
   12de0:	andeq	r9, r0, r8, ror sp
   12de4:	andeq	r9, r0, r4, lsl #26
   12de8:	push	{r3, r4, r5, r6, r7, lr}
   12dec:	mov	r5, r0
   12df0:	ldr	r3, [pc, #124]	; 12e74 <__assert_fail@plt+0x1864>
   12df4:	ldr	r6, [pc, #124]	; 12e78 <__assert_fail@plt+0x1868>
   12df8:	add	r3, pc, r3
   12dfc:	add	r6, pc, r6
   12e00:	ldrb	r2, [r3, #40]	; 0x28
   12e04:	ldr	r4, [r3, #36]	; 0x24
   12e08:	cmp	r2, #0
   12e0c:	moveq	r7, #32
   12e10:	beq	12e3c <__assert_fail@plt+0x182c>
   12e14:	b	12e5c <__assert_fail@plt+0x184c>
   12e18:	ldr	r3, [r6, r3]
   12e1c:	ldr	r0, [r3]
   12e20:	ldr	r2, [r0, #20]
   12e24:	ldr	r1, [r0, #24]
   12e28:	add	ip, r2, #1
   12e2c:	cmp	r2, r1
   12e30:	strcc	ip, [r0, #20]
   12e34:	strbcc	r7, [r2]
   12e38:	bcs	12e68 <__assert_fail@plt+0x1858>
   12e3c:	add	r4, r4, #1
   12e40:	ldr	r3, [pc, #52]	; 12e7c <__assert_fail@plt+0x186c>
   12e44:	cmp	r5, r4
   12e48:	bge	12e18 <__assert_fail@plt+0x1808>
   12e4c:	ldr	r3, [pc, #44]	; 12e80 <__assert_fail@plt+0x1870>
   12e50:	add	r3, pc, r3
   12e54:	str	r5, [r3, #36]	; 0x24
   12e58:	pop	{r3, r4, r5, r6, r7, pc}
   12e5c:	rsb	r4, r4, r0
   12e60:	str	r4, [r3, #44]	; 0x2c
   12e64:	pop	{r3, r4, r5, r6, r7, pc}
   12e68:	mov	r1, #32
   12e6c:	bl	115a4 <__overflow@plt>
   12e70:	b	12e3c <__assert_fail@plt+0x182c>
   12e74:	andeq	ip, r1, r0, asr #8
   12e78:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12e7c:	andeq	r0, r0, r8, asr r1
   12e80:	andeq	ip, r1, r8, ror #7
   12e84:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12e88:	ldr	r3, [pc, #208]	; 12f60 <__assert_fail@plt+0x1950>
   12e8c:	ldr	r7, [pc, #208]	; 12f64 <__assert_fail@plt+0x1954>
   12e90:	add	r3, pc, r3
   12e94:	ldr	r8, [pc, #204]	; 12f68 <__assert_fail@plt+0x1958>
   12e98:	add	r7, pc, r7
   12e9c:	ldr	r4, [r3, #36]	; 0x24
   12ea0:	add	r8, pc, r8
   12ea4:	ldr	r5, [r3, #44]	; 0x2c
   12ea8:	add	r9, r7, #28
   12eac:	add	r5, r4, r5
   12eb0:	b	12ef0 <__assert_fail@plt+0x18e0>
   12eb4:	ldr	r6, [r7, #48]	; 0x30
   12eb8:	mov	r1, r6
   12ebc:	bl	1c024 <close_stdout@@Base+0x5914>
   12ec0:	ldr	r3, [pc, #164]	; 12f6c <__assert_fail@plt+0x195c>
   12ec4:	mov	r0, r9
   12ec8:	rsb	r6, r1, r6
   12ecc:	mov	r1, #1
   12ed0:	add	r6, r6, r4
   12ed4:	cmp	r5, r6
   12ed8:	blt	12f00 <__assert_fail@plt+0x18f0>
   12edc:	ldr	r3, [r8, r3]
   12ee0:	mov	r4, r6
   12ee4:	ldr	r2, [r7, #44]	; 0x2c
   12ee8:	ldr	r3, [r3]
   12eec:	bl	11370 <fwrite_unlocked@plt>
   12ef0:	rsb	r3, r4, r5
   12ef4:	mov	r0, r4
   12ef8:	cmp	r3, #1
   12efc:	bgt	12eb4 <__assert_fail@plt+0x18a4>
   12f00:	mov	r6, #32
   12f04:	b	12f2c <__assert_fail@plt+0x191c>
   12f08:	ldr	r3, [r8, r3]
   12f0c:	ldr	r0, [r3]
   12f10:	ldr	r3, [r0, #20]
   12f14:	ldr	r1, [r0, #24]
   12f18:	add	r2, r3, #1
   12f1c:	cmp	r3, r1
   12f20:	strcc	r2, [r0, #20]
   12f24:	strbcc	r6, [r3]
   12f28:	bcs	12f54 <__assert_fail@plt+0x1944>
   12f2c:	add	r4, r4, #1
   12f30:	ldr	r3, [pc, #52]	; 12f6c <__assert_fail@plt+0x195c>
   12f34:	cmp	r5, r4
   12f38:	bge	12f08 <__assert_fail@plt+0x18f8>
   12f3c:	ldr	r3, [pc, #44]	; 12f70 <__assert_fail@plt+0x1960>
   12f40:	mov	r2, #0
   12f44:	add	r3, pc, r3
   12f48:	str	r5, [r3, #36]	; 0x24
   12f4c:	str	r2, [r3, #44]	; 0x2c
   12f50:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12f54:	mov	r1, #32
   12f58:	bl	115a4 <__overflow@plt>
   12f5c:	b	12f2c <__assert_fail@plt+0x191c>
   12f60:	andeq	ip, r1, r8, lsr #7
   12f64:	andeq	ip, r1, r0, ror #5
   12f68:	andeq	ip, r1, r8, asr r1
   12f6c:	andeq	r0, r0, r8, asr r1
   12f70:	strdeq	ip, [r1], -r4
   12f74:	push	{r3, r4, r5, lr}
   12f78:	mov	r4, r0
   12f7c:	ldr	r3, [pc, #192]	; 13044 <__assert_fail@plt+0x1a34>
   12f80:	ldr	r5, [pc, #192]	; 13048 <__assert_fail@plt+0x1a38>
   12f84:	add	r3, pc, r3
   12f88:	add	r5, pc, r5
   12f8c:	ldrb	r2, [r3, #40]	; 0x28
   12f90:	cmp	r2, #0
   12f94:	beq	12fd0 <__assert_fail@plt+0x19c0>
   12f98:	cmp	r0, #32
   12f9c:	beq	1301c <__assert_fail@plt+0x1a0c>
   12fa0:	ldr	r3, [r3, #44]	; 0x2c
   12fa4:	cmp	r3, #0
   12fa8:	ble	12fb0 <__assert_fail@plt+0x19a0>
   12fac:	bl	12e84 <__assert_fail@plt+0x1874>
   12fb0:	bl	114c0 <__ctype_b_loc@plt>
   12fb4:	lsl	r3, r4, #1
   12fb8:	ldr	r2, [r0]
   12fbc:	ldrh	r3, [r2, r3]
   12fc0:	tst	r3, #16384	; 0x4000
   12fc4:	bne	13004 <__assert_fail@plt+0x19f4>
   12fc8:	cmp	r4, #8
   12fcc:	beq	1302c <__assert_fail@plt+0x1a1c>
   12fd0:	ldr	r3, [pc, #116]	; 1304c <__assert_fail@plt+0x1a3c>
   12fd4:	ldr	r3, [r5, r3]
   12fd8:	ldr	r0, [r3]
   12fdc:	ldr	r2, [r0, #20]
   12fe0:	ldr	r1, [r0, #24]
   12fe4:	cmp	r2, r1
   12fe8:	addcc	r1, r2, #1
   12fec:	strcc	r1, [r0, #20]
   12ff0:	strbcc	r4, [r2]
   12ff4:	popcc	{r3, r4, r5, pc}
   12ff8:	mov	r1, r4
   12ffc:	pop	{r3, r4, r5, lr}
   13000:	b	115a4 <__overflow@plt>
   13004:	ldr	r3, [pc, #68]	; 13050 <__assert_fail@plt+0x1a40>
   13008:	add	r3, pc, r3
   1300c:	ldr	r2, [r3, #36]	; 0x24
   13010:	add	r2, r2, #1
   13014:	str	r2, [r3, #36]	; 0x24
   13018:	b	12fd0 <__assert_fail@plt+0x19c0>
   1301c:	ldr	r2, [r3, #44]	; 0x2c
   13020:	add	r2, r2, #1
   13024:	str	r2, [r3, #44]	; 0x2c
   13028:	pop	{r3, r4, r5, pc}
   1302c:	ldr	r3, [pc, #32]	; 13054 <__assert_fail@plt+0x1a44>
   13030:	add	r3, pc, r3
   13034:	ldr	r2, [r3, #36]	; 0x24
   13038:	sub	r2, r2, #1
   1303c:	str	r2, [r3, #36]	; 0x24
   13040:	b	12fd0 <__assert_fail@plt+0x19c0>
   13044:			; <UNDEFINED> instruction: 0x0001c2b4
   13048:	andeq	ip, r1, r0, ror r0
   1304c:	andeq	r0, r0, r8, asr r1
   13050:	andeq	ip, r1, r0, lsr r2
   13054:	andeq	ip, r1, r8, lsl #4
   13058:	ldr	r3, [pc, #352]	; 131c0 <__assert_fail@plt+0x1bb0>
   1305c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13060:	add	r3, pc, r3
   13064:	ldr	r2, [pc, #344]	; 131c4 <__assert_fail@plt+0x1bb4>
   13068:	sub	sp, sp, #20
   1306c:	ldr	r1, [r3, #52]	; 0x34
   13070:	add	r2, pc, r2
   13074:	ldr	sl, [pc, #332]	; 131c8 <__assert_fail@plt+0x1bb8>
   13078:	cmp	r1, #0
   1307c:	ldr	r6, [r3, #48]	; 0x30
   13080:	add	sl, pc, sl
   13084:	ldr	r7, [r2]
   13088:	ble	13198 <__assert_fail@plt+0x1b88>
   1308c:	str	r3, [sp, #8]
   13090:	mov	r8, r3
   13094:	ldr	r3, [pc, #304]	; 131cc <__assert_fail@plt+0x1bbc>
   13098:	ldr	r5, [pc, #304]	; 131d0 <__assert_fail@plt+0x1bc0>
   1309c:	add	r3, pc, r3
   130a0:	str	r3, [sp, #12]
   130a4:	ldr	r3, [pc, #296]	; 131d4 <__assert_fail@plt+0x1bc4>
   130a8:	add	r5, pc, r5
   130ac:	add	r3, pc, r3
   130b0:	str	r3, [sp]
   130b4:	ldr	r3, [pc, #284]	; 131d8 <__assert_fail@plt+0x1bc8>
   130b8:	add	r3, pc, r3
   130bc:	str	r3, [sp, #4]
   130c0:	ldr	r3, [sp, #8]
   130c4:	mov	r4, r6
   130c8:	mov	r9, r7
   130cc:	mov	fp, #0
   130d0:	ldr	r2, [r3, #44]	; 0x2c
   130d4:	b	1311c <__assert_fail@plt+0x1b0c>
   130d8:	cmp	r2, #0
   130dc:	ble	130e8 <__assert_fail@plt+0x1ad8>
   130e0:	bl	12e84 <__assert_fail@plt+0x1874>
   130e4:	ldrb	r1, [r9, #-1]
   130e8:	ldr	r3, [pc, #236]	; 131dc <__assert_fail@plt+0x1bcc>
   130ec:	mov	fp, #1
   130f0:	ldr	r3, [sl, r3]
   130f4:	ldr	r0, [r3]
   130f8:	ldr	r3, [r0, #20]
   130fc:	ldr	r2, [r0, #24]
   13100:	add	ip, r3, fp
   13104:	cmp	r3, r2
   13108:	bcs	131b0 <__assert_fail@plt+0x1ba0>
   1310c:	ldr	r2, [r5, #44]	; 0x2c
   13110:	str	ip, [r0, #20]
   13114:	strb	r1, [r3]
   13118:	sub	r4, r4, #1
   1311c:	cmp	r4, #0
   13120:	ble	13140 <__assert_fail@plt+0x1b30>
   13124:	ldrb	r1, [r9], #1
   13128:	cmp	r1, #32
   1312c:	bne	130d8 <__assert_fail@plt+0x1ac8>
   13130:	ldr	r3, [sp]
   13134:	add	r2, r2, #1
   13138:	str	r2, [r3, #44]	; 0x2c
   1313c:	b	13118 <__assert_fail@plt+0x1b08>
   13140:	cmp	fp, #0
   13144:	bic	r3, r6, r6, asr #31
   13148:	sub	r6, r6, #1
   1314c:	add	r7, r7, r3
   13150:	rsb	r6, r3, r6
   13154:	beq	13170 <__assert_fail@plt+0x1b60>
   13158:	ldr	r3, [sp, #4]
   1315c:	ldr	r0, [sp, #4]
   13160:	ldr	r1, [r3, #36]	; 0x24
   13164:	ldr	r3, [r3, #56]	; 0x38
   13168:	add	r3, r1, r3
   1316c:	str	r3, [r0, #36]	; 0x24
   13170:	cmp	r2, #0
   13174:	ble	1317c <__assert_fail@plt+0x1b6c>
   13178:	bl	12e84 <__assert_fail@plt+0x1874>
   1317c:	ldr	r3, [r8, #52]	; 0x34
   13180:	sub	r3, r3, #1
   13184:	str	r3, [r8, #52]	; 0x34
   13188:	cmp	r3, #0
   1318c:	bgt	130c0 <__assert_fail@plt+0x1ab0>
   13190:	add	sp, sp, #20
   13194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13198:	ldr	r3, [r3, #44]	; 0x2c
   1319c:	cmp	r3, #0
   131a0:	ble	13190 <__assert_fail@plt+0x1b80>
   131a4:	add	sp, sp, #20
   131a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131ac:	b	12e84 <__assert_fail@plt+0x1874>
   131b0:	bl	115a4 <__overflow@plt>
   131b4:	ldr	r3, [sp, #12]
   131b8:	ldr	r2, [r3, #44]	; 0x2c
   131bc:	b	13118 <__assert_fail@plt+0x1b08>
   131c0:	ldrdeq	ip, [r1], -r8
   131c4:	andeq	ip, r1, r4, ror r1
   131c8:	andeq	fp, r1, r8, ror pc
   131cc:	muleq	r1, ip, r1
   131d0:	muleq	r1, r0, r1
   131d4:	andeq	ip, r1, ip, lsl #3
   131d8:	andeq	ip, r1, r0, lsl #3
   131dc:	andeq	r0, r0, r8, asr r1
   131e0:	ldr	r3, [pc, #1352]	; 13730 <__assert_fail@plt+0x2120>
   131e4:	ldr	r2, [pc, #1352]	; 13734 <__assert_fail@plt+0x2124>
   131e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131ec:	add	r3, pc, r3
   131f0:	sub	sp, sp, #92	; 0x5c
   131f4:	ldr	r6, [pc, #1340]	; 13738 <__assert_fail@plt+0x2128>
   131f8:	add	r4, sp, #72	; 0x48
   131fc:	str	r0, [sp, #24]
   13200:	add	r6, pc, r6
   13204:	str	r4, [sp, #12]
   13208:	ldr	r2, [r3, r2]
   1320c:	add	r3, r6, #60	; 0x3c
   13210:	ldm	r3, {r0, r1}
   13214:	str	r2, [sp, #16]
   13218:	ldr	r4, [sp, #16]
   1321c:	ldr	r2, [r6, #68]	; 0x44
   13220:	ldr	ip, [r4]
   13224:	add	r7, r2, #1
   13228:	ldr	r4, [sp, #12]
   1322c:	add	lr, r6, r2
   13230:	mov	r2, r7
   13234:	str	r7, [r6, #68]	; 0x44
   13238:	str	ip, [sp, #84]	; 0x54
   1323c:	stm	r4, {r0, r1}
   13240:	add	r1, r6, #72	; 0x48
   13244:	ldr	r4, [sp, #24]
   13248:	add	r0, sp, #68	; 0x44
   1324c:	strb	r4, [lr, #72]	; 0x48
   13250:	ldr	r4, [r6, #24]
   13254:	bl	11424 <mbrtowc@plt>
   13258:	cmp	r7, #0
   1325c:	mov	r5, r0
   13260:	beq	136b4 <__assert_fail@plt+0x20a4>
   13264:	ldr	ip, [pc, #1232]	; 1373c <__assert_fail@plt+0x212c>
   13268:	mov	r9, #0
   1326c:	ldr	r6, [pc, #1228]	; 13740 <__assert_fail@plt+0x2130>
   13270:	mov	sl, r9
   13274:	add	ip, pc, ip
   13278:	str	ip, [sp, #36]	; 0x24
   1327c:	ldr	ip, [pc, #1216]	; 13744 <__assert_fail@plt+0x2134>
   13280:	add	r6, pc, r6
   13284:	add	r8, r6, #72	; 0x48
   13288:	mov	fp, #8
   1328c:	add	ip, pc, ip
   13290:	str	ip, [sp, #28]
   13294:	ldr	ip, [sp, #36]	; 0x24
   13298:	add	ip, ip, #72	; 0x48
   1329c:	str	ip, [sp, #20]
   132a0:	ldr	ip, [sp, #28]
   132a4:	add	ip, ip, #8
   132a8:	str	ip, [sp, #32]
   132ac:	cmn	r5, #2
   132b0:	beq	13468 <__assert_fail@plt+0x1e58>
   132b4:	bhi	133dc <__assert_fail@plt+0x1dcc>
   132b8:	cmp	r5, #0
   132bc:	ldr	r0, [sp, #20]
   132c0:	ldr	r1, [sp, #32]
   132c4:	moveq	r5, #1
   132c8:	mov	r2, r5
   132cc:	bl	1137c <memcmp@plt>
   132d0:	cmp	r0, #0
   132d4:	bne	13384 <__assert_fail@plt+0x1d74>
   132d8:	ldr	ip, [sp, #28]
   132dc:	ldr	fp, [ip, #24]
   132e0:	ldr	r7, [pc, #1120]	; 13748 <__assert_fail@plt+0x2138>
   132e4:	mov	r1, fp
   132e8:	add	r7, pc, r7
   132ec:	ldr	r0, [r7, #28]
   132f0:	bl	1c024 <close_stdout@@Base+0x5914>
   132f4:	ldrb	r3, [r7, #32]
   132f8:	cmp	r3, #0
   132fc:	rsb	r1, r1, fp
   13300:	add	sl, sl, r1
   13304:	bne	134a4 <__assert_fail@plt+0x1e94>
   13308:	cmp	r5, #0
   1330c:	movne	r1, r7
   13310:	beq	13330 <__assert_fail@plt+0x1d20>
   13314:	add	r2, r1, #72	; 0x48
   13318:	ldrb	r2, [r3, r2]
   1331c:	strb	r2, [r4, r3]
   13320:	add	r3, r3, #1
   13324:	cmp	r3, r5
   13328:	bne	13314 <__assert_fail@plt+0x1d04>
   1332c:	add	r4, r4, r5
   13330:	add	r9, r5, r9
   13334:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   13338:	mov	r3, #16
   1333c:	add	r1, r8, r5
   13340:	rsb	r2, r5, r0
   13344:	mov	r0, r8
   13348:	bl	1131c <__memmove_chk@plt>
   1334c:	ldr	r3, [r6, #68]	; 0x44
   13350:	rsb	r3, r5, r3
   13354:	str	r3, [r6, #68]	; 0x44
   13358:	cmp	r3, #0
   1335c:	bne	132ac <__assert_fail@plt+0x1c9c>
   13360:	cmp	sl, #0
   13364:	blt	136c4 <__assert_fail@plt+0x20b4>
   13368:	ldr	r1, [r6, #28]
   1336c:	ldr	r3, [pc, #984]	; 1374c <__assert_fail@plt+0x213c>
   13370:	add	r1, sl, r1
   13374:	mov	r2, r9
   13378:	add	r3, pc, r3
   1337c:	str	r1, [r3, #28]
   13380:	b	13484 <__assert_fail@plt+0x1e74>
   13384:	ldr	ip, [sp, #24]
   13388:	cmp	ip, #9
   1338c:	beq	132e0 <__assert_fail@plt+0x1cd0>
   13390:	ldr	r0, [sp, #68]	; 0x44
   13394:	bl	11310 <wcwidth@plt>
   13398:	cmp	r0, #0
   1339c:	ble	134e8 <__assert_fail@plt+0x1ed8>
   133a0:	cmp	r5, #0
   133a4:	add	sl, sl, r0
   133a8:	add	r9, r5, r9
   133ac:	beq	13334 <__assert_fail@plt+0x1d24>
   133b0:	ldr	ip, [sp, #20]
   133b4:	mov	r3, #0
   133b8:	sub	r1, ip, #72	; 0x48
   133bc:	add	r2, r1, #72	; 0x48
   133c0:	ldrb	r2, [r3, r2]
   133c4:	strb	r2, [r4, r3]
   133c8:	add	r3, r3, #1
   133cc:	cmp	r3, r5
   133d0:	bne	133bc <__assert_fail@plt+0x1dac>
   133d4:	add	r4, r4, r5
   133d8:	b	13334 <__assert_fail@plt+0x1d24>
   133dc:	ldr	r3, [pc, #876]	; 13750 <__assert_fail@plt+0x2140>
   133e0:	ldr	ip, [sp, #12]
   133e4:	add	r3, pc, r3
   133e8:	add	r2, r3, #60	; 0x3c
   133ec:	ldm	ip, {r0, r1}
   133f0:	ldrb	ip, [r3, #33]	; 0x21
   133f4:	cmp	ip, #0
   133f8:	stm	r2, {r0, r1}
   133fc:	bne	1340c <__assert_fail@plt+0x1dfc>
   13400:	ldrb	r2, [r3, #34]	; 0x22
   13404:	cmp	r2, #0
   13408:	beq	134cc <__assert_fail@plt+0x1ebc>
   1340c:	ldr	r3, [pc, #832]	; 13754 <__assert_fail@plt+0x2144>
   13410:	mov	r2, #92	; 0x5c
   13414:	strb	r2, [r4]
   13418:	add	r0, sp, #80	; 0x50
   1341c:	add	r3, pc, r3
   13420:	mov	r2, #4
   13424:	mov	r1, #1
   13428:	mov	r9, r2
   1342c:	ldrb	ip, [r3, #72]	; 0x48
   13430:	mov	sl, r9
   13434:	ldr	r3, [pc, #796]	; 13758 <__assert_fail@plt+0x2148>
   13438:	mov	r5, #1
   1343c:	add	r3, pc, r3
   13440:	str	ip, [sp]
   13444:	bl	11514 <__sprintf_chk@plt>
   13448:	ldrb	r3, [sp, #80]	; 0x50
   1344c:	strb	r3, [r4, #1]
   13450:	ldrb	r3, [sp, #81]	; 0x51
   13454:	strb	r3, [r4, #2]
   13458:	ldrb	r3, [sp, #82]	; 0x52
   1345c:	strb	r3, [r4, #3]
   13460:	add	r4, r4, r9
   13464:	b	13334 <__assert_fail@plt+0x1d24>
   13468:	ldr	r4, [sp, #12]
   1346c:	mov	r2, #0
   13470:	ldr	r3, [pc, #740]	; 1375c <__assert_fail@plt+0x214c>
   13474:	ldm	r4, {r0, r1}
   13478:	add	r3, pc, r3
   1347c:	add	r3, r3, #60	; 0x3c
   13480:	stm	r3, {r0, r1}
   13484:	ldr	r4, [sp, #16]
   13488:	mov	r0, r2
   1348c:	ldr	r1, [sp, #84]	; 0x54
   13490:	ldr	r3, [r4]
   13494:	cmp	r1, r3
   13498:	bne	1372c <__assert_fail@plt+0x211c>
   1349c:	add	sp, sp, #92	; 0x5c
   134a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134a4:	cmp	r1, #0
   134a8:	beq	13670 <__assert_fail@plt+0x2060>
   134ac:	add	r3, r4, r1
   134b0:	mov	r2, #32
   134b4:	strb	r2, [r4], #1
   134b8:	cmp	r4, r3
   134bc:	bne	134b4 <__assert_fail@plt+0x1ea4>
   134c0:	add	r9, r9, r1
   134c4:	mov	r4, r3
   134c8:	b	13334 <__assert_fail@plt+0x1d24>
   134cc:	ldrb	r3, [r3, #72]	; 0x48
   134d0:	mov	r5, #1
   134d4:	add	sl, sl, #1
   134d8:	add	r9, r9, #1
   134dc:	strb	r3, [r4]
   134e0:	add	r4, r4, r5
   134e4:	b	13334 <__assert_fail@plt+0x1d24>
   134e8:	ldr	ip, [sp, #36]	; 0x24
   134ec:	ldrb	r3, [ip, #33]	; 0x21
   134f0:	cmp	r3, #0
   134f4:	beq	135bc <__assert_fail@plt+0x1fac>
   134f8:	cmp	r5, #0
   134fc:	beq	13334 <__assert_fail@plt+0x1d24>
   13500:	ldr	lr, [pc, #600]	; 13760 <__assert_fail@plt+0x2150>
   13504:	add	ip, ip, #71	; 0x47
   13508:	add	r1, ip, r5
   1350c:	add	r2, sp, #80	; 0x50
   13510:	add	lr, pc, lr
   13514:	add	r7, r4, #4
   13518:	str	r5, [sp, #52]	; 0x34
   1351c:	mov	r5, r2
   13520:	str	r4, [sp, #56]	; 0x38
   13524:	mov	r4, r1
   13528:	str	sl, [sp, #60]	; 0x3c
   1352c:	mov	sl, lr
   13530:	str	r6, [sp, #40]	; 0x28
   13534:	mov	r6, ip
   13538:	str	lr, [sp, #48]	; 0x30
   1353c:	str	r1, [sp, #44]	; 0x2c
   13540:	mov	r3, #92	; 0x5c
   13544:	strb	r3, [r7, #-4]
   13548:	ldrb	lr, [r6, #1]!
   1354c:	mov	r3, sl
   13550:	mov	r0, r5
   13554:	mov	r1, #1
   13558:	mov	r2, #4
   1355c:	add	r7, r7, #4
   13560:	str	lr, [sp]
   13564:	bl	11514 <__sprintf_chk@plt>
   13568:	ldrb	r3, [sp, #80]	; 0x50
   1356c:	cmp	r6, r4
   13570:	strb	r3, [r7, #-7]
   13574:	ldrb	r3, [sp, #81]	; 0x51
   13578:	strb	r3, [r7, #-6]
   1357c:	ldrb	r3, [sp, #82]	; 0x52
   13580:	strb	r3, [r7, #-5]
   13584:	bne	13540 <__assert_fail@plt+0x1f30>
   13588:	ldr	r5, [sp, #52]	; 0x34
   1358c:	add	r9, r9, #4
   13590:	ldr	sl, [sp, #60]	; 0x3c
   13594:	sub	r3, r5, #-1073741823	; 0xc0000001
   13598:	ldr	r4, [sp, #56]	; 0x38
   1359c:	add	r1, sl, #4
   135a0:	ldr	r6, [sp, #40]	; 0x28
   135a4:	lsl	r3, r3, #2
   135a8:	add	r2, r3, #4
   135ac:	add	sl, r1, r3
   135b0:	add	r9, r3, r9
   135b4:	add	r4, r4, r2
   135b8:	b	13334 <__assert_fail@plt+0x1d24>
   135bc:	ldr	ip, [sp, #36]	; 0x24
   135c0:	ldrb	r3, [ip, #34]	; 0x22
   135c4:	cmp	r3, #0
   135c8:	beq	13678 <__assert_fail@plt+0x2068>
   135cc:	ldr	r3, [sp, #68]	; 0x44
   135d0:	cmp	r3, #127	; 0x7f
   135d4:	bls	136ec <__assert_fail@plt+0x20dc>
   135d8:	cmp	r5, #0
   135dc:	beq	13334 <__assert_fail@plt+0x1d24>
   135e0:	ldr	lr, [sp, #36]	; 0x24
   135e4:	add	r2, sp, #80	; 0x50
   135e8:	ldr	r1, [pc, #372]	; 13764 <__assert_fail@plt+0x2154>
   135ec:	add	r7, r4, #4
   135f0:	add	lr, lr, #71	; 0x47
   135f4:	str	r5, [sp, #52]	; 0x34
   135f8:	add	r1, pc, r1
   135fc:	add	ip, lr, r5
   13600:	str	r4, [sp, #56]	; 0x38
   13604:	mov	r5, r2
   13608:	str	sl, [sp, #60]	; 0x3c
   1360c:	mov	r4, ip
   13610:	str	r6, [sp, #40]	; 0x28
   13614:	mov	sl, r1
   13618:	mov	r6, lr
   1361c:	str	lr, [sp, #44]	; 0x2c
   13620:	str	r1, [sp, #48]	; 0x30
   13624:	mov	r3, #92	; 0x5c
   13628:	strb	r3, [r7, #-4]
   1362c:	ldrb	lr, [r6, #1]!
   13630:	mov	r3, sl
   13634:	mov	r0, r5
   13638:	mov	r1, #1
   1363c:	mov	r2, #4
   13640:	add	r7, r7, #4
   13644:	str	lr, [sp]
   13648:	bl	11514 <__sprintf_chk@plt>
   1364c:	ldrb	r3, [sp, #80]	; 0x50
   13650:	cmp	r6, r4
   13654:	strb	r3, [r7, #-7]
   13658:	ldrb	r3, [sp, #81]	; 0x51
   1365c:	strb	r3, [r7, #-6]
   13660:	ldrb	r3, [sp, #82]	; 0x52
   13664:	strb	r3, [r7, #-5]
   13668:	bne	13624 <__assert_fail@plt+0x2014>
   1366c:	b	13588 <__assert_fail@plt+0x1f78>
   13670:	mov	r3, r4
   13674:	b	134c0 <__assert_fail@plt+0x1eb0>
   13678:	ldr	r2, [sp, #68]	; 0x44
   1367c:	cmp	r2, #8
   13680:	beq	13714 <__assert_fail@plt+0x2104>
   13684:	cmp	r5, #0
   13688:	add	r9, r5, r9
   1368c:	beq	13334 <__assert_fail@plt+0x1d24>
   13690:	ldr	ip, [sp, #20]
   13694:	sub	r1, ip, #72	; 0x48
   13698:	add	r2, r1, #72	; 0x48
   1369c:	ldrb	r2, [r3, r2]
   136a0:	strb	r2, [r4, r3]
   136a4:	add	r3, r3, #1
   136a8:	cmp	r3, r5
   136ac:	bne	13698 <__assert_fail@plt+0x2088>
   136b0:	b	133d4 <__assert_fail@plt+0x1dc4>
   136b4:	mov	r9, r7
   136b8:	ldr	r1, [r6, #28]
   136bc:	mov	sl, r7
   136c0:	b	1336c <__assert_fail@plt+0x1d5c>
   136c4:	ldr	r2, [r6, #28]
   136c8:	cmp	r2, #0
   136cc:	beq	13484 <__assert_fail@plt+0x1e74>
   136d0:	rsb	r1, sl, #0
   136d4:	cmp	r2, r1
   136d8:	strle	r3, [r6, #28]
   136dc:	movle	r2, r9
   136e0:	ble	13484 <__assert_fail@plt+0x1e74>
   136e4:	mov	r1, r2
   136e8:	b	1336c <__assert_fail@plt+0x1d5c>
   136ec:	mov	r3, r4
   136f0:	mov	r2, #94	; 0x5e
   136f4:	strb	r2, [r3], #2
   136f8:	add	sl, sl, #2
   136fc:	ldr	r2, [sp, #68]	; 0x44
   13700:	add	r9, r9, #2
   13704:	eor	r2, r2, #64	; 0x40
   13708:	strb	r2, [r4, #1]
   1370c:	mov	r4, r3
   13710:	b	13334 <__assert_fail@plt+0x1d24>
   13714:	ldr	ip, [sp, #24]
   13718:	sub	sl, sl, #1
   1371c:	add	r9, r9, #1
   13720:	add	r4, r4, #1
   13724:	strb	ip, [r4, #-1]
   13728:	b	13334 <__assert_fail@plt+0x1d24>
   1372c:	bl	11394 <__stack_chk_fail@plt>
   13730:	andeq	fp, r1, ip, lsl #28
   13734:	andeq	r0, r0, r8, lsr r1
   13738:	andeq	ip, r1, r8, lsr r0
   1373c:	andeq	fp, r1, r4, asr #31
   13740:			; <UNDEFINED> instruction: 0x0001bfb8
   13744:	andeq	fp, r1, ip, ror #29
   13748:	andeq	fp, r1, r0, asr pc
   1374c:	andeq	fp, r1, r0, asr #29
   13750:	andeq	fp, r1, r4, asr lr
   13754:	andeq	fp, r1, ip, lsl lr
   13758:	andeq	r9, r0, ip, ror r6
   1375c:	andeq	fp, r1, r0, asr #27
   13760:	andeq	r9, r0, r8, lsr #11
   13764:	andeq	r9, r0, r0, asr #9
   13768:	ldr	ip, [pc, #328]	; 138b8 <__assert_fail@plt+0x22a8>
   1376c:	ldr	r3, [pc, #328]	; 138bc <__assert_fail@plt+0x22ac>
   13770:	add	ip, pc, ip
   13774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13778:	sub	sp, sp, #44	; 0x2c
   1377c:	ldr	r7, [ip, r3]
   13780:	add	r8, sp, #12
   13784:	ldr	r9, [pc, #308]	; 138c0 <__assert_fail@plt+0x22b0>
   13788:	mov	r6, r2
   1378c:	mov	fp, r0
   13790:	mov	sl, r1
   13794:	add	r9, pc, r9
   13798:	str	r9, [sp]
   1379c:	ldr	ip, [r7]
   137a0:	mov	r0, r2
   137a4:	mov	r1, r8
   137a8:	mov	r2, #10
   137ac:	add	r3, sp, #16
   137b0:	mvn	r4, #0
   137b4:	mvn	r5, #0
   137b8:	str	ip, [sp, #36]	; 0x24
   137bc:	strd	r4, [sp, #24]
   137c0:	bl	1ace4 <close_stdout@@Base+0x45d4>
   137c4:	bics	r1, r0, #2
   137c8:	bne	13888 <__assert_fail@plt+0x2278>
   137cc:	ldr	r0, [sp, #12]
   137d0:	cmp	r0, r6
   137d4:	beq	13860 <__assert_fail@plt+0x2250>
   137d8:	ldrd	r2, [sp, #16]
   137dc:	orrs	r1, r2, r3
   137e0:	beq	13860 <__assert_fail@plt+0x2250>
   137e4:	ldrb	r1, [r0]
   137e8:	cmp	r1, #58	; 0x3a
   137ec:	beq	1381c <__assert_fail@plt+0x220c>
   137f0:	cmp	r1, #0
   137f4:	bne	13860 <__assert_fail@plt+0x2250>
   137f8:	ldr	ip, [pc, #196]	; 138c4 <__assert_fail@plt+0x22b4>
   137fc:	mov	r0, #1
   13800:	ldr	r1, [pc, #192]	; 138c8 <__assert_fail@plt+0x22b8>
   13804:	ldrd	r4, [sp, #24]
   13808:	add	ip, pc, ip
   1380c:	add	r1, pc, r1
   13810:	strd	r2, [ip, #88]	; 0x58
   13814:	strd	r4, [r1, #56]	; 0x38
   13818:	b	13864 <__assert_fail@plt+0x2254>
   1381c:	add	r4, r0, #1
   13820:	str	r9, [sp]
   13824:	mov	r1, r8
   13828:	mov	r2, #10
   1382c:	mov	r0, r4
   13830:	add	r3, sp, #24
   13834:	bl	1ace4 <close_stdout@@Base+0x45d4>
   13838:	cmp	r0, #0
   1383c:	bne	138a0 <__assert_fail@plt+0x2290>
   13840:	ldr	ip, [sp, #12]
   13844:	cmp	r4, ip
   13848:	beq	13860 <__assert_fail@plt+0x2250>
   1384c:	ldrd	r0, [sp, #24]
   13850:	ldrd	r2, [sp, #16]
   13854:	cmp	r1, r3
   13858:	cmpeq	r0, r2
   1385c:	bcs	1387c <__assert_fail@plt+0x226c>
   13860:	mov	r0, #0
   13864:	ldr	r2, [sp, #36]	; 0x24
   13868:	ldr	r3, [r7]
   1386c:	cmp	r2, r3
   13870:	bne	13884 <__assert_fail@plt+0x2274>
   13874:	add	sp, sp, #44	; 0x2c
   13878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1387c:	ldrb	r1, [ip]
   13880:	b	137f0 <__assert_fail@plt+0x21e0>
   13884:	bl	11394 <__stack_chk_fail@plt>
   13888:	ldr	r3, [pc, #60]	; 138cc <__assert_fail@plt+0x22bc>
   1388c:	mov	r1, fp
   13890:	str	r6, [sp]
   13894:	mov	r2, sl
   13898:	add	r3, pc, r3
   1389c:	bl	1abf0 <close_stdout@@Base+0x44e0>
   138a0:	ldr	r3, [pc, #40]	; 138d0 <__assert_fail@plt+0x22c0>
   138a4:	mov	r1, fp
   138a8:	str	r6, [sp]
   138ac:	mov	r2, sl
   138b0:	add	r3, pc, r3
   138b4:	bl	1abf0 <close_stdout@@Base+0x44e0>
   138b8:	andeq	fp, r1, r8, lsl #17
   138bc:	andeq	r0, r0, r8, lsr r1
   138c0:	andeq	r9, r0, r0, ror r3
   138c4:	andeq	fp, r1, r0, lsr sl
   138c8:	andeq	fp, r1, ip, ror #18
   138cc:	muleq	r1, r4, r4
   138d0:	andeq	fp, r1, ip, ror r4
   138d4:	push	{r4, lr}
   138d8:	mov	r4, r0
   138dc:	ldr	r3, [r0, #8]
   138e0:	cmp	r3, #3
   138e4:	popeq	{r4, pc}
   138e8:	ldr	r0, [r0]
   138ec:	ldr	r3, [r0]
   138f0:	tst	r3, #32
   138f4:	bne	139ac <__assert_fail@plt+0x239c>
   138f8:	bl	1155c <fileno@plt>
   138fc:	cmp	r0, #0
   13900:	bne	1397c <__assert_fail@plt+0x236c>
   13904:	ldr	r3, [pc, #196]	; 139d0 <__assert_fail@plt+0x23c0>
   13908:	add	r3, pc, r3
   1390c:	ldrb	r2, [r3, #96]	; 0x60
   13910:	cmp	r2, #0
   13914:	bne	13954 <__assert_fail@plt+0x2344>
   13918:	ldr	r2, [pc, #180]	; 139d4 <__assert_fail@plt+0x23c4>
   1391c:	ldr	r3, [r3]
   13920:	add	r2, pc, r2
   13924:	ldr	r2, [r2]
   13928:	cmp	r2, #0
   1392c:	beq	13964 <__assert_fail@plt+0x2354>
   13930:	mov	r0, #3
   13934:	ldr	r1, [r3, #24]
   13938:	add	r3, r3, #40	; 0x28
   1393c:	str	r0, [r3, #-32]	; 0xffffffe0
   13940:	cmp	r1, #0
   13944:	streq	r1, [r3, #-12]
   13948:	subs	r2, r2, #1
   1394c:	bne	13934 <__assert_fail@plt+0x2324>
   13950:	b	13964 <__assert_fail@plt+0x2354>
   13954:	mov	r2, #3
   13958:	mov	r3, #0
   1395c:	str	r2, [r4, #8]
   13960:	str	r3, [r4, #28]
   13964:	ldr	r3, [pc, #108]	; 139d8 <__assert_fail@plt+0x23c8>
   13968:	add	r3, pc, r3
   1396c:	ldr	r2, [r3, #4]
   13970:	sub	r2, r2, #1
   13974:	str	r2, [r3, #4]
   13978:	pop	{r4, pc}
   1397c:	ldr	r0, [r4]
   13980:	bl	1b43c <close_stdout@@Base+0x4d2c>
   13984:	cmp	r0, #0
   13988:	beq	13904 <__assert_fail@plt+0x22f4>
   1398c:	bl	11508 <__errno_location@plt>
   13990:	ldr	r2, [pc, #68]	; 139dc <__assert_fail@plt+0x23cc>
   13994:	ldr	r3, [r4, #4]
   13998:	add	r2, pc, r2
   1399c:	ldr	r1, [r0]
   139a0:	mov	r0, #1
   139a4:	bl	11430 <error@plt>
   139a8:	b	13904 <__assert_fail@plt+0x22f4>
   139ac:	bl	11508 <__errno_location@plt>
   139b0:	ldr	r2, [pc, #40]	; 139e0 <__assert_fail@plt+0x23d0>
   139b4:	ldr	r3, [r4, #4]
   139b8:	add	r2, pc, r2
   139bc:	ldr	r1, [r0]
   139c0:	mov	r0, #1
   139c4:	bl	11430 <error@plt>
   139c8:	ldr	r0, [r4]
   139cc:	b	138f8 <__assert_fail@plt+0x22e8>
   139d0:	andeq	fp, r1, r0, lsr r9
   139d4:	andeq	fp, r1, r8, asr r8
   139d8:	ldrdeq	fp, [r1], -r0
   139dc:	strdeq	sl, [r0], -ip
   139e0:	ldrdeq	sl, [r0], -ip
   139e4:	ldr	r3, [pc, #480]	; 13bcc <__assert_fail@plt+0x25bc>
   139e8:	ldr	r2, [pc, #480]	; 13bd0 <__assert_fail@plt+0x25c0>
   139ec:	add	r3, pc, r3
   139f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139f4:	mov	r7, r1
   139f8:	ldr	r2, [r3, r2]
   139fc:	sub	sp, sp, #140	; 0x8c
   13a00:	ldrb	r1, [r0]
   13a04:	mov	r8, r0
   13a08:	ldr	r3, [r2]
   13a0c:	cmp	r1, #45	; 0x2d
   13a10:	str	r2, [sp, #12]
   13a14:	str	r3, [sp, #132]	; 0x84
   13a18:	bne	13b38 <__assert_fail@plt+0x2528>
   13a1c:	ldrb	r3, [r0, #1]
   13a20:	cmp	r3, #0
   13a24:	mvneq	r7, #0
   13a28:	bne	13b38 <__assert_fail@plt+0x2528>
   13a2c:	ldr	r0, [pc, #416]	; 13bd4 <__assert_fail@plt+0x25c4>
   13a30:	add	r0, pc, r0
   13a34:	ldr	r3, [r0, #100]	; 0x64
   13a38:	cmp	r3, #0
   13a3c:	beq	13bbc <__assert_fail@plt+0x25ac>
   13a40:	ldr	r2, [pc, #400]	; 13bd8 <__assert_fail@plt+0x25c8>
   13a44:	add	r3, sp, #16
   13a48:	add	r2, pc, r2
   13a4c:	add	r2, r2, #100	; 0x64
   13a50:	ldm	r2, {r0, r1}
   13a54:	stm	r3, {r0, r1}
   13a58:	mov	r0, r3
   13a5c:	ldr	r9, [sp, #20]
   13a60:	bl	11484 <localtime@plt>
   13a64:	subs	sl, r0, #0
   13a68:	beq	13b7c <__assert_fail@plt+0x256c>
   13a6c:	ldr	fp, [pc, #360]	; 13bdc <__assert_fail@plt+0x25cc>
   13a70:	mov	r4, #0
   13a74:	str	r9, [sp, #4]
   13a78:	mvn	r1, #0
   13a7c:	add	fp, pc, fp
   13a80:	str	r4, [sp]
   13a84:	mov	r3, sl
   13a88:	mov	r0, r4
   13a8c:	ldr	r2, [fp, #108]	; 0x6c
   13a90:	bl	19d50 <close_stdout@@Base+0x3640>
   13a94:	add	r5, r0, #1
   13a98:	mov	r0, r5
   13a9c:	bl	1a338 <close_stdout@@Base+0x3c28>
   13aa0:	ldr	r2, [fp, #108]	; 0x6c
   13aa4:	mov	r1, r5
   13aa8:	str	r4, [sp]
   13aac:	mov	r3, sl
   13ab0:	str	r9, [sp, #4]
   13ab4:	mov	r6, r0
   13ab8:	bl	19d50 <close_stdout@@Base+0x3640>
   13abc:	ldr	r4, [pc, #284]	; 13be0 <__assert_fail@plt+0x25d0>
   13ac0:	add	r4, pc, r4
   13ac4:	ldr	r0, [r4, #112]	; 0x70
   13ac8:	bl	11328 <free@plt>
   13acc:	ldr	r3, [r4, #116]	; 0x74
   13ad0:	str	r6, [r4, #112]	; 0x70
   13ad4:	cmp	r3, #0
   13ad8:	movne	r8, r3
   13adc:	beq	13bac <__assert_fail@plt+0x259c>
   13ae0:	ldr	r4, [pc, #252]	; 13be4 <__assert_fail@plt+0x25d4>
   13ae4:	mov	r0, r6
   13ae8:	ldr	r3, [pc, #248]	; 13be8 <__assert_fail@plt+0x25d8>
   13aec:	mov	r1, #0
   13af0:	add	r4, pc, r4
   13af4:	add	r3, pc, r3
   13af8:	str	r8, [r4, #120]	; 0x78
   13afc:	ldr	r6, [r3, #64]	; 0x40
   13b00:	bl	16c98 <close_stdout@@Base+0x588>
   13b04:	mov	r1, #0
   13b08:	rsb	r6, r0, r6
   13b0c:	ldr	r0, [r4, #120]	; 0x78
   13b10:	bl	16c98 <close_stdout@@Base+0x588>
   13b14:	ldr	r1, [sp, #12]
   13b18:	ldr	r2, [sp, #132]	; 0x84
   13b1c:	ldr	r3, [r1]
   13b20:	cmp	r2, r3
   13b24:	rsb	r0, r0, r6
   13b28:	str	r0, [r4, #124]	; 0x7c
   13b2c:	bne	13bc8 <__assert_fail@plt+0x25b8>
   13b30:	add	sp, sp, #140	; 0x8c
   13b34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b38:	cmp	r7, #0
   13b3c:	blt	13a2c <__assert_fail@plt+0x241c>
   13b40:	mov	r0, #3
   13b44:	mov	r1, r7
   13b48:	add	r2, sp, #24
   13b4c:	bl	113d0 <__fxstat64@plt>
   13b50:	cmp	r0, #0
   13b54:	bne	13a2c <__assert_fail@plt+0x241c>
   13b58:	ldr	r9, [sp, #108]	; 0x6c
   13b5c:	add	r3, sp, #16
   13b60:	ldr	r2, [sp, #104]	; 0x68
   13b64:	mov	r0, r3
   13b68:	str	r9, [sp, #20]
   13b6c:	str	r2, [sp, #16]
   13b70:	bl	11484 <localtime@plt>
   13b74:	subs	sl, r0, #0
   13b78:	bne	13a6c <__assert_fail@plt+0x245c>
   13b7c:	mov	r0, #24
   13b80:	bl	1a338 <close_stdout@@Base+0x3c28>
   13b84:	ldr	ip, [sp, #16]
   13b88:	ldr	r3, [pc, #92]	; 13bec <__assert_fail@plt+0x25dc>
   13b8c:	mov	r1, #1
   13b90:	str	r9, [sp, #4]
   13b94:	mov	r2, #24
   13b98:	add	r3, pc, r3
   13b9c:	str	ip, [sp]
   13ba0:	mov	r6, r0
   13ba4:	bl	11514 <__sprintf_chk@plt>
   13ba8:	b	13abc <__assert_fail@plt+0x24ac>
   13bac:	cmp	r7, #0
   13bb0:	ldrlt	r8, [pc, #56]	; 13bf0 <__assert_fail@plt+0x25e0>
   13bb4:	addlt	r8, pc, r8
   13bb8:	b	13ae0 <__assert_fail@plt+0x24d0>
   13bbc:	add	r0, r0, #100	; 0x64
   13bc0:	bl	169a8 <close_stdout@@Base+0x298>
   13bc4:	b	13a40 <__assert_fail@plt+0x2430>
   13bc8:	bl	11394 <__stack_chk_fail@plt>
   13bcc:	andeq	fp, r1, ip, lsl #12
   13bd0:	andeq	r0, r0, r8, lsr r1
   13bd4:	andeq	fp, r1, r8, lsl #16
   13bd8:	strdeq	fp, [r1], -r0
   13bdc:			; <UNDEFINED> instruction: 0x0001b7bc
   13be0:	andeq	fp, r1, r8, ror r7
   13be4:	andeq	fp, r1, r8, asr #14
   13be8:	andeq	fp, r1, r4, lsl #13
   13bec:	andeq	r8, r0, r8, lsr #30
   13bf0:	andeq	r8, r0, r0, asr pc
   13bf4:	ldr	r3, [pc, #320]	; 13d3c <__assert_fail@plt+0x272c>
   13bf8:	ldr	r2, [pc, #320]	; 13d40 <__assert_fail@plt+0x2730>
   13bfc:	add	r3, pc, r3
   13c00:	push	{r4, r5, r6, r7, lr}
   13c04:	sub	sp, sp, #316	; 0x13c
   13c08:	ldr	r6, [r3, r2]
   13c0c:	mov	r5, #0
   13c10:	ldr	r4, [pc, #300]	; 13d44 <__assert_fail@plt+0x2734>
   13c14:	ldr	r3, [r6]
   13c18:	add	r4, pc, r4
   13c1c:	ldr	r0, [r4, #128]	; 0x80
   13c20:	str	r3, [sp, #308]	; 0x134
   13c24:	str	r5, [r4, #36]	; 0x24
   13c28:	bl	12de8 <__assert_fail@plt+0x17d8>
   13c2c:	bl	12e84 <__assert_fail@plt+0x1874>
   13c30:	ldrd	r2, [r4, #136]	; 0x88
   13c34:	orrs	r1, r2, r3
   13c38:	movne	r5, r2
   13c3c:	movne	r7, r3
   13c40:	bne	13c70 <__assert_fail@plt+0x2660>
   13c44:	ldr	r1, [pc, #252]	; 13d48 <__assert_fail@plt+0x2738>
   13c48:	mov	r0, r5
   13c4c:	mov	r2, #5
   13c50:	add	r1, pc, r1
   13c54:	bl	11388 <dcgettext@plt>
   13c58:	mov	r1, r5
   13c5c:	mov	r2, r0
   13c60:	mov	r0, #1
   13c64:	bl	11430 <error@plt>
   13c68:	ldr	r5, [r4, #136]	; 0x88
   13c6c:	ldr	r7, [r4, #140]	; 0x8c
   13c70:	ldr	r1, [pc, #212]	; 13d4c <__assert_fail@plt+0x273c>
   13c74:	mov	r2, #5
   13c78:	mov	r0, #0
   13c7c:	ldr	r4, [pc, #204]	; 13d50 <__assert_fail@plt+0x2740>
   13c80:	add	r1, pc, r1
   13c84:	bl	11388 <dcgettext@plt>
   13c88:	str	r5, [sp]
   13c8c:	add	r5, sp, #32
   13c90:	add	r4, pc, r4
   13c94:	mov	r2, #276	; 0x114
   13c98:	str	r7, [sp, #4]
   13c9c:	mov	r1, #1
   13ca0:	mov	r3, r0
   13ca4:	mov	r0, r5
   13ca8:	bl	11514 <__sprintf_chk@plt>
   13cac:	mov	r1, #0
   13cb0:	mov	r0, r5
   13cb4:	ldr	r7, [r4, #124]	; 0x7c
   13cb8:	bl	16c98 <close_stdout@@Base+0x588>
   13cbc:	ldr	r1, [r4, #120]	; 0x78
   13cc0:	ldr	ip, [r4, #112]	; 0x70
   13cc4:	ldr	r3, [pc, #136]	; 13d54 <__assert_fail@plt+0x2744>
   13cc8:	ldr	r2, [r4, #128]	; 0x80
   13ccc:	add	r3, pc, r3
   13cd0:	str	r1, [sp, #12]
   13cd4:	str	r3, [sp, #8]
   13cd8:	str	r3, [sp, #20]
   13cdc:	ldr	r1, [pc, #116]	; 13d58 <__assert_fail@plt+0x2748>
   13ce0:	ldr	r3, [pc, #116]	; 13d5c <__assert_fail@plt+0x274c>
   13ce4:	str	ip, [sp]
   13ce8:	add	r1, pc, r1
   13cec:	add	r3, pc, r3
   13cf0:	str	r5, [sp, #24]
   13cf4:	rsb	lr, r0, r7
   13cf8:	mov	r0, #1
   13cfc:	bic	lr, lr, lr, asr #31
   13d00:	asr	ip, lr, r0
   13d04:	str	ip, [sp, #4]
   13d08:	rsb	ip, ip, lr
   13d0c:	str	ip, [sp, #16]
   13d10:	bl	11550 <__printf_chk@plt>
   13d14:	ldr	r1, [sp, #308]	; 0x134
   13d18:	ldr	r2, [r6]
   13d1c:	mov	r3, #0
   13d20:	strb	r3, [r4, #144]	; 0x90
   13d24:	cmp	r1, r2
   13d28:	str	r3, [r4, #36]	; 0x24
   13d2c:	bne	13d38 <__assert_fail@plt+0x2728>
   13d30:	add	sp, sp, #316	; 0x13c
   13d34:	pop	{r4, r5, r6, r7, pc}
   13d38:	bl	11394 <__stack_chk_fail@plt>
   13d3c:	strdeq	fp, [r1], -ip
   13d40:	andeq	r0, r0, r8, lsr r1
   13d44:	andeq	fp, r1, r0, lsr #12
   13d48:	andeq	r8, r0, ip, ror lr
   13d4c:	andeq	r8, r0, r4, ror #28
   13d50:	andeq	fp, r1, r8, lsr #11
   13d54:	andeq	r8, r0, ip, lsr lr
   13d58:	andeq	r8, r0, r8, lsl #28
   13d5c:	andeq	r8, r0, r8, lsl lr
   13d60:	ldr	r3, [pc, #380]	; 13ee4 <__assert_fail@plt+0x28d4>
   13d64:	push	{r4, r5, r6, r7, r8, lr}
   13d68:	add	r3, pc, r3
   13d6c:	ldr	r7, [r0, #20]
   13d70:	mov	r8, r0
   13d74:	ldr	r1, [r3, #148]	; 0x94
   13d78:	mov	r0, #1
   13d7c:	ldrb	r4, [r3, #144]	; 0x90
   13d80:	add	r2, r7, r0
   13d84:	add	ip, r1, r7, lsl #2
   13d88:	str	r2, [r8, #20]
   13d8c:	cmp	r4, #0
   13d90:	ldr	r2, [r3, #16]
   13d94:	ldr	r4, [r1, r7, lsl #2]
   13d98:	ldr	r5, [ip, #4]
   13d9c:	strb	r0, [r3, #152]	; 0x98
   13da0:	add	r4, r2, r4
   13da4:	add	r5, r2, r5
   13da8:	bne	13e60 <__assert_fail@plt+0x2850>
   13dac:	ldr	r2, [r8, #8]
   13db0:	cmp	r2, #1
   13db4:	beq	13e70 <__assert_fail@plt+0x2860>
   13db8:	ldr	r6, [pc, #296]	; 13ee8 <__assert_fail@plt+0x28d8>
   13dbc:	add	r6, pc, r6
   13dc0:	ldr	r0, [r6, #156]	; 0x9c
   13dc4:	ldr	r3, [r6, #56]	; 0x38
   13dc8:	rsb	r0, r3, r0
   13dcc:	cmp	r0, #0
   13dd0:	ble	13de0 <__assert_fail@plt+0x27d0>
   13dd4:	bl	12de8 <__assert_fail@plt+0x17d8>
   13dd8:	mov	r3, #0
   13ddc:	str	r3, [r6, #156]	; 0x9c
   13de0:	ldr	r3, [pc, #260]	; 13eec <__assert_fail@plt+0x28dc>
   13de4:	add	r3, pc, r3
   13de8:	ldrb	r3, [r3, #160]	; 0xa0
   13dec:	cmp	r3, #0
   13df0:	bne	13edc <__assert_fail@plt+0x28cc>
   13df4:	cmp	r4, r5
   13df8:	beq	13e18 <__assert_fail@plt+0x2808>
   13dfc:	ldr	r6, [pc, #236]	; 13ef0 <__assert_fail@plt+0x28e0>
   13e00:	add	r6, pc, r6
   13e04:	ldrb	r0, [r4], #1
   13e08:	ldr	r3, [r6, #164]	; 0xa4
   13e0c:	blx	r3
   13e10:	cmp	r5, r4
   13e14:	bne	13e04 <__assert_fail@plt+0x27f4>
   13e18:	ldr	r3, [pc, #212]	; 13ef4 <__assert_fail@plt+0x28e4>
   13e1c:	add	r3, pc, r3
   13e20:	ldr	r2, [r3, #44]	; 0x2c
   13e24:	cmp	r2, #0
   13e28:	bne	13e58 <__assert_fail@plt+0x2848>
   13e2c:	ldr	r0, [r3, #168]	; 0xa8
   13e30:	ldr	r2, [r8, #32]
   13e34:	ldr	r1, [r3, #56]	; 0x38
   13e38:	ldr	ip, [r3, #128]	; 0x80
   13e3c:	ldr	r0, [r0, r7, lsl #2]
   13e40:	rsb	r4, r1, r2
   13e44:	cmp	r4, ip
   13e48:	add	r2, r2, r0
   13e4c:	str	r2, [r3, #36]	; 0x24
   13e50:	rsbeq	r2, r1, r2
   13e54:	streq	r2, [r3, #36]	; 0x24
   13e58:	mov	r0, #1
   13e5c:	pop	{r4, r5, r6, r7, r8, pc}
   13e60:	bl	13bf4 <__assert_fail@plt+0x25e4>
   13e64:	ldr	r2, [r8, #8]
   13e68:	cmp	r2, #1
   13e6c:	bne	13db8 <__assert_fail@plt+0x27a8>
   13e70:	ldr	r1, [pc, #128]	; 13ef8 <__assert_fail@plt+0x28e8>
   13e74:	ldr	r3, [pc, #128]	; 13efc <__assert_fail@plt+0x28ec>
   13e78:	add	r1, pc, r1
   13e7c:	add	r3, pc, r3
   13e80:	ldr	r0, [r1]
   13e84:	ldr	ip, [r3]
   13e88:	cmp	r0, #0
   13e8c:	addgt	r0, r0, #1
   13e90:	movgt	r3, ip
   13e94:	movgt	r1, #2
   13e98:	ble	13eb0 <__assert_fail@plt+0x28a0>
   13e9c:	add	r2, r2, #1
   13ea0:	str	r1, [r3, #8]
   13ea4:	cmp	r2, r0
   13ea8:	add	r3, r3, #40	; 0x28
   13eac:	bne	13e9c <__assert_fail@plt+0x288c>
   13eb0:	ldr	r3, [ip, #28]
   13eb4:	cmp	r3, #0
   13eb8:	bgt	13db8 <__assert_fail@plt+0x27a8>
   13ebc:	ldr	r3, [pc, #60]	; 13f00 <__assert_fail@plt+0x28f0>
   13ec0:	add	r3, pc, r3
   13ec4:	ldrb	r3, [r3, #68]	; 0x44
   13ec8:	cmp	r3, #0
   13ecc:	ldreq	r2, [pc, #48]	; 13f04 <__assert_fail@plt+0x28f4>
   13ed0:	addeq	r2, pc, r2
   13ed4:	strbeq	r3, [r2, #152]	; 0x98
   13ed8:	b	13e58 <__assert_fail@plt+0x2848>
   13edc:	bl	13058 <__assert_fail@plt+0x1a48>
   13ee0:	b	13df4 <__assert_fail@plt+0x27e4>
   13ee4:	ldrdeq	fp, [r1], -r0
   13ee8:	andeq	fp, r1, ip, ror r4
   13eec:	andeq	fp, r1, r4, asr r4
   13ef0:	andeq	fp, r1, r8, lsr r4
   13ef4:	andeq	fp, r1, ip, lsl r4
   13ef8:	andeq	fp, r1, r0, lsl #6
   13efc:			; <UNDEFINED> instruction: 0x0001b3bc
   13f00:			; <UNDEFINED> instruction: 0x0001b2b8
   13f04:	andeq	fp, r1, r8, ror #6
   13f08:	ldr	r3, [pc, #124]	; 13f8c <__assert_fail@plt+0x297c>
   13f0c:	push	{r4, r5}
   13f10:	add	r3, pc, r3
   13f14:	ldrb	r2, [r3, #96]	; 0x60
   13f18:	cmp	r2, #0
   13f1c:	movne	r3, #2
   13f20:	strne	r3, [r0]
   13f24:	bne	13f68 <__assert_fail@plt+0x2958>
   13f28:	ldr	r0, [pc, #96]	; 13f90 <__assert_fail@plt+0x2980>
   13f2c:	ldr	r2, [r3]
   13f30:	add	r0, pc, r0
   13f34:	ldr	r3, [r0]
   13f38:	cmp	r3, #0
   13f3c:	beq	13f68 <__assert_fail@plt+0x2958>
   13f40:	ldrb	r5, [r0, #4]
   13f44:	mov	r4, #2
   13f48:	mov	ip, #1
   13f4c:	cmp	r5, #0
   13f50:	add	r2, r2, #40	; 0x28
   13f54:	moveq	r0, r4
   13f58:	movne	r0, ip
   13f5c:	subs	r3, r3, #1
   13f60:	str	r0, [r2, #-32]	; 0xffffffe0
   13f64:	bne	13f4c <__assert_fail@plt+0x293c>
   13f68:	ldr	r3, [pc, #36]	; 13f94 <__assert_fail@plt+0x2984>
   13f6c:	mov	r2, #0
   13f70:	str	r2, [r1]
   13f74:	add	r3, pc, r3
   13f78:	ldr	r2, [r3, #4]
   13f7c:	sub	r2, r2, #1
   13f80:	str	r2, [r3, #4]
   13f84:	pop	{r4, r5}
   13f88:	bx	lr
   13f8c:	andeq	fp, r1, r8, lsr #6
   13f90:	andeq	fp, r1, r8, asr #4
   13f94:	andeq	fp, r1, r4, asr #5
   13f98:	push	{r3, r4, r5, r6, r7, lr}
   13f9c:	mov	r7, r0
   13fa0:	ldr	r4, [r0]
   13fa4:	mov	r6, r1
   13fa8:	ldr	r3, [r4, #4]
   13fac:	ldr	r2, [r4, #8]
   13fb0:	cmp	r3, r2
   13fb4:	bcs	141ac <__assert_fail@plt+0x2b9c>
   13fb8:	add	r2, r3, #1
   13fbc:	str	r2, [r4, #4]
   13fc0:	ldrb	r0, [r3]
   13fc4:	cmp	r0, #12
   13fc8:	movne	r2, #0
   13fcc:	strbne	r2, [r7, #37]	; 0x25
   13fd0:	beq	1412c <__assert_fail@plt+0x2b1c>
   13fd4:	mov	r5, #0
   13fd8:	ldr	r2, [pc, #496]	; 141d0 <__assert_fail@plt+0x2bc0>
   13fdc:	add	r2, pc, r2
   13fe0:	ldrb	r2, [r2, #172]	; 0xac
   13fe4:	cmp	r2, #0
   13fe8:	movne	r1, #1
   13fec:	strbne	r1, [r7, #37]	; 0x25
   13ff0:	cmp	r0, #10
   13ff4:	beq	1403c <__assert_fail@plt+0x2a2c>
   13ff8:	cmp	r0, #12
   13ffc:	bne	1402c <__assert_fail@plt+0x2a1c>
   14000:	b	140a4 <__assert_fail@plt+0x2a94>
   14004:	ldmib	r4, {r3, ip}
   14008:	cmp	r3, ip
   1400c:	add	r2, r3, #1
   14010:	strcc	r2, [r4, #4]
   14014:	ldrbcc	r0, [r3]
   14018:	bcs	14194 <__assert_fail@plt+0x2b84>
   1401c:	cmp	r0, #10
   14020:	beq	1403c <__assert_fail@plt+0x2a2c>
   14024:	cmp	r0, #12
   14028:	beq	14098 <__assert_fail@plt+0x2a88>
   1402c:	cmn	r0, #1
   14030:	bne	14004 <__assert_fail@plt+0x29f4>
   14034:	mov	r0, r7
   14038:	bl	138d4 <__assert_fail@plt+0x22c4>
   1403c:	ldr	r3, [pc, #400]	; 141d4 <__assert_fail@plt+0x2bc4>
   14040:	add	r3, pc, r3
   14044:	ldrb	r3, [r3, #69]	; 0x45
   14048:	cmp	r3, #0
   1404c:	popeq	{r3, r4, r5, r6, r7, pc}
   14050:	ldr	r3, [pc, #384]	; 141d8 <__assert_fail@plt+0x2bc8>
   14054:	add	r3, pc, r3
   14058:	ldrb	r3, [r3, #96]	; 0x60
   1405c:	cmp	r3, #0
   14060:	bne	14084 <__assert_fail@plt+0x2a74>
   14064:	cmp	r5, #0
   14068:	popne	{r3, r4, r5, r6, r7, pc}
   1406c:	ldr	r3, [pc, #360]	; 141dc <__assert_fail@plt+0x2bcc>
   14070:	add	r3, pc, r3
   14074:	ldr	r2, [r3, #72]	; 0x48
   14078:	add	r2, r2, #1
   1407c:	str	r2, [r3, #72]	; 0x48
   14080:	pop	{r3, r4, r5, r6, r7, pc}
   14084:	cmp	r6, #1
   14088:	popne	{r3, r4, r5, r6, r7, pc}
   1408c:	cmp	r5, #0
   14090:	beq	1406c <__assert_fail@plt+0x2a5c>
   14094:	pop	{r3, r4, r5, r6, r7, pc}
   14098:	ldr	r3, [pc, #320]	; 141e0 <__assert_fail@plt+0x2bd0>
   1409c:	add	r3, pc, r3
   140a0:	ldrb	r2, [r3, #172]	; 0xac
   140a4:	cmp	r2, #0
   140a8:	beq	140f0 <__assert_fail@plt+0x2ae0>
   140ac:	ldr	r3, [pc, #304]	; 141e4 <__assert_fail@plt+0x2bd4>
   140b0:	add	r3, pc, r3
   140b4:	ldrb	r1, [r3, #96]	; 0x60
   140b8:	cmp	r1, #0
   140bc:	movne	r3, #0
   140c0:	strbne	r3, [r7, #37]	; 0x25
   140c4:	bne	140f0 <__assert_fail@plt+0x2ae0>
   140c8:	ldr	r0, [pc, #280]	; 141e8 <__assert_fail@plt+0x2bd8>
   140cc:	ldr	r2, [r3]
   140d0:	add	r0, pc, r0
   140d4:	ldr	r3, [r0]
   140d8:	cmp	r3, #0
   140dc:	beq	140f0 <__assert_fail@plt+0x2ae0>
   140e0:	subs	r3, r3, #1
   140e4:	strb	r1, [r2, #37]	; 0x25
   140e8:	add	r2, r2, #40	; 0x28
   140ec:	bne	140e0 <__assert_fail@plt+0x2ad0>
   140f0:	ldr	r3, [r4, #4]
   140f4:	ldr	r2, [r4, #8]
   140f8:	cmp	r3, r2
   140fc:	bcs	141b8 <__assert_fail@plt+0x2ba8>
   14100:	add	r2, r3, #1
   14104:	str	r2, [r4, #4]
   14108:	ldrb	r0, [r3]
   1410c:	cmp	r0, #10
   14110:	beq	1411c <__assert_fail@plt+0x2b0c>
   14114:	mov	r1, r4
   14118:	bl	114f0 <ungetc@plt>
   1411c:	add	r0, r7, #8
   14120:	add	r1, r7, #28
   14124:	bl	13f08 <__assert_fail@plt+0x28f8>
   14128:	b	1403c <__assert_fail@plt+0x2a2c>
   1412c:	ldrb	r2, [r7, #37]	; 0x25
   14130:	cmp	r2, #0
   14134:	beq	1416c <__assert_fail@plt+0x2b5c>
   14138:	ldr	r3, [r4, #4]
   1413c:	ldr	r2, [r4, #8]
   14140:	cmp	r3, r2
   14144:	bcs	141a0 <__assert_fail@plt+0x2b90>
   14148:	add	r2, r3, #1
   1414c:	str	r2, [r4, #4]
   14150:	ldrb	r0, [r3]
   14154:	cmp	r0, #10
   14158:	beq	14174 <__assert_fail@plt+0x2b64>
   1415c:	cmp	r0, #12
   14160:	mov	r2, #0
   14164:	strb	r2, [r7, #37]	; 0x25
   14168:	bne	13fd4 <__assert_fail@plt+0x29c4>
   1416c:	mov	r5, #1
   14170:	b	13fd8 <__assert_fail@plt+0x29c8>
   14174:	ldr	r3, [r4, #4]
   14178:	ldr	r2, [r4, #8]
   1417c:	cmp	r3, r2
   14180:	bcs	141c4 <__assert_fail@plt+0x2bb4>
   14184:	add	r2, r3, #1
   14188:	str	r2, [r4, #4]
   1418c:	ldrb	r0, [r3]
   14190:	b	1415c <__assert_fail@plt+0x2b4c>
   14194:	mov	r0, r4
   14198:	bl	11598 <__uflow@plt>
   1419c:	b	1401c <__assert_fail@plt+0x2a0c>
   141a0:	mov	r0, r4
   141a4:	bl	11598 <__uflow@plt>
   141a8:	b	14154 <__assert_fail@plt+0x2b44>
   141ac:	mov	r0, r4
   141b0:	bl	11598 <__uflow@plt>
   141b4:	b	13fc4 <__assert_fail@plt+0x29b4>
   141b8:	mov	r0, r4
   141bc:	bl	11598 <__uflow@plt>
   141c0:	b	1410c <__assert_fail@plt+0x2afc>
   141c4:	mov	r0, r4
   141c8:	bl	11598 <__uflow@plt>
   141cc:	b	1415c <__assert_fail@plt+0x2b4c>
   141d0:	andeq	fp, r1, ip, asr r2
   141d4:	andeq	fp, r1, r8, lsr r1
   141d8:	andeq	fp, r1, r4, ror #3
   141dc:	andeq	fp, r1, r8, lsl #2
   141e0:	muleq	r1, ip, r1
   141e4:	andeq	fp, r1, r8, lsl #3
   141e8:	andeq	fp, r1, r8, lsr #1
   141ec:	push	{r4, lr}
   141f0:	mov	r4, r0
   141f4:	sub	sp, sp, #8
   141f8:	ldr	r1, [r0]
   141fc:	b	14210 <__assert_fail@plt+0x2c00>
   14200:	cmp	r0, #12
   14204:	beq	1423c <__assert_fail@plt+0x2c2c>
   14208:	cmn	r0, #1
   1420c:	beq	14290 <__assert_fail@plt+0x2c80>
   14210:	ldr	r3, [r1, #4]
   14214:	ldr	r2, [r1, #8]
   14218:	add	ip, r3, #1
   1421c:	cmp	r3, r2
   14220:	strcc	ip, [r1, #4]
   14224:	ldrbcc	r0, [r3]
   14228:	bcs	142a0 <__assert_fail@plt+0x2c90>
   1422c:	cmp	r0, #10
   14230:	bne	14200 <__assert_fail@plt+0x2bf0>
   14234:	add	sp, sp, #8
   14238:	pop	{r4, pc}
   1423c:	ldr	r3, [r1, #4]
   14240:	ldr	r2, [r1, #8]
   14244:	cmp	r3, r2
   14248:	bcs	142b4 <__assert_fail@plt+0x2ca4>
   1424c:	add	r2, r3, #1
   14250:	str	r2, [r1, #4]
   14254:	ldrb	r0, [r3]
   14258:	cmp	r0, #10
   1425c:	beq	14264 <__assert_fail@plt+0x2c54>
   14260:	bl	114f0 <ungetc@plt>
   14264:	ldr	r3, [pc, #92]	; 142c8 <__assert_fail@plt+0x2cb8>
   14268:	add	r0, r4, #8
   1426c:	add	r1, r4, #28
   14270:	add	r3, pc, r3
   14274:	ldrb	r2, [r3, #173]	; 0xad
   14278:	cmp	r2, #0
   1427c:	movne	r2, #1
   14280:	strbne	r2, [r3, #174]	; 0xae
   14284:	add	sp, sp, #8
   14288:	pop	{r4, lr}
   1428c:	b	13f08 <__assert_fail@plt+0x28f8>
   14290:	mov	r0, r4
   14294:	add	sp, sp, #8
   14298:	pop	{r4, lr}
   1429c:	b	138d4 <__assert_fail@plt+0x22c4>
   142a0:	mov	r0, r1
   142a4:	str	r1, [sp, #4]
   142a8:	bl	11598 <__uflow@plt>
   142ac:	ldr	r1, [sp, #4]
   142b0:	b	1422c <__assert_fail@plt+0x2c1c>
   142b4:	mov	r0, r1
   142b8:	str	r1, [sp, #4]
   142bc:	bl	11598 <__uflow@plt>
   142c0:	ldr	r1, [sp, #4]
   142c4:	b	14258 <__assert_fail@plt+0x2c48>
   142c8:	andeq	sl, r1, r8, asr #31
   142cc:	push	{r4, r5, r6, r7, lr}
   142d0:	sub	sp, sp, #12
   142d4:	ldr	r7, [pc, #416]	; 1447c <__assert_fail@plt+0x2e6c>
   142d8:	mvn	r2, #0
   142dc:	ldr	r4, [pc, #412]	; 14480 <__assert_fail@plt+0x2e70>
   142e0:	mov	r5, r0
   142e4:	add	r7, pc, r7
   142e8:	ldr	r3, [pc, #404]	; 14484 <__assert_fail@plt+0x2e74>
   142ec:	add	r4, pc, r4
   142f0:	mov	r1, #1
   142f4:	ldr	lr, [r7, #180]	; 0xb4
   142f8:	add	r3, pc, r3
   142fc:	ldr	ip, [r4, #76]	; 0x4c
   14300:	ldr	r0, [r7, #176]	; 0xb0
   14304:	stm	sp, {ip, lr}
   14308:	bl	11514 <__sprintf_chk@plt>
   1430c:	ldr	r6, [r4, #76]	; 0x4c
   14310:	ldr	r3, [r7, #176]	; 0xb0
   14314:	ldr	r2, [r7, #180]	; 0xb4
   14318:	cmp	r6, #0
   1431c:	add	r2, r2, #1
   14320:	str	r2, [r7, #180]	; 0xb4
   14324:	rsb	r0, r6, r0
   14328:	add	r4, r3, r0
   1432c:	addgt	r6, r4, r6
   14330:	ble	14348 <__assert_fail@plt+0x2d38>
   14334:	ldrb	r0, [r4], #1
   14338:	ldr	r3, [r5]
   1433c:	blx	r3
   14340:	cmp	r4, r6
   14344:	bne	14334 <__assert_fail@plt+0x2d24>
   14348:	ldr	r7, [pc, #312]	; 14488 <__assert_fail@plt+0x2e78>
   1434c:	add	r7, pc, r7
   14350:	ldr	r3, [r7]
   14354:	cmp	r3, #1
   14358:	ble	143d0 <__assert_fail@plt+0x2dc0>
   1435c:	ldrb	r0, [r7, #84]	; 0x54
   14360:	cmp	r0, #9
   14364:	beq	14440 <__assert_fail@plt+0x2e30>
   14368:	ldr	r3, [r7, #80]	; 0x50
   1436c:	cmp	r3, #0
   14370:	addgt	r6, r7, #84	; 0x54
   14374:	movgt	r4, #0
   14378:	bgt	143b4 <__assert_fail@plt+0x2da4>
   1437c:	ldr	r3, [pc, #264]	; 1448c <__assert_fail@plt+0x2e7c>
   14380:	add	r3, pc, r3
   14384:	ldrb	r2, [r3, #188]	; 0xbc
   14388:	cmp	r2, #0
   1438c:	beq	143a8 <__assert_fail@plt+0x2d98>
   14390:	ldrb	r2, [r3, #96]	; 0x60
   14394:	cmp	r2, #0
   14398:	ldreq	r2, [r3, #184]	; 0xb8
   1439c:	ldreq	r1, [r3, #28]
   143a0:	addeq	r2, r1, r2
   143a4:	streq	r2, [r3, #28]
   143a8:	add	sp, sp, #12
   143ac:	pop	{r4, r5, r6, r7, pc}
   143b0:	ldrb	r0, [r6, #1]!
   143b4:	ldr	r3, [r5]
   143b8:	add	r4, r4, #1
   143bc:	blx	r3
   143c0:	ldr	r3, [r7, #80]	; 0x50
   143c4:	cmp	r4, r3
   143c8:	blt	143b0 <__assert_fail@plt+0x2da0>
   143cc:	b	1437c <__assert_fail@plt+0x2d6c>
   143d0:	ldr	r3, [r7, #80]	; 0x50
   143d4:	cmp	r3, #0
   143d8:	movgt	r4, #0
   143dc:	ble	14400 <__assert_fail@plt+0x2df0>
   143e0:	add	r2, r7, #84	; 0x54
   143e4:	ldr	r3, [r5]
   143e8:	ldrb	r0, [r2, r4]
   143ec:	add	r4, r4, #1
   143f0:	blx	r3
   143f4:	ldr	r3, [r7, #80]	; 0x50
   143f8:	cmp	r4, r3
   143fc:	blt	143e0 <__assert_fail@plt+0x2dd0>
   14400:	ldr	r3, [pc, #136]	; 14490 <__assert_fail@plt+0x2e80>
   14404:	add	r3, pc, r3
   14408:	ldrb	r2, [r3, #84]	; 0x54
   1440c:	cmp	r2, #9
   14410:	bne	1437c <__assert_fail@plt+0x2d6c>
   14414:	ldr	r4, [pc, #120]	; 14494 <__assert_fail@plt+0x2e84>
   14418:	ldr	r6, [r3, #48]	; 0x30
   1441c:	add	r4, pc, r4
   14420:	ldr	r5, [r4, #36]	; 0x24
   14424:	mov	r1, r6
   14428:	mov	r0, r5
   1442c:	bl	1c024 <close_stdout@@Base+0x5914>
   14430:	rsb	r1, r1, r6
   14434:	add	r5, r5, r1
   14438:	str	r5, [r4, #36]	; 0x24
   1443c:	b	1437c <__assert_fail@plt+0x2d6c>
   14440:	ldr	r2, [pc, #80]	; 14498 <__assert_fail@plt+0x2e88>
   14444:	ldr	r3, [r7, #76]	; 0x4c
   14448:	add	r2, pc, r2
   1444c:	ldr	r4, [r2, #184]	; 0xb8
   14450:	rsb	r4, r3, r4
   14454:	cmp	r4, #0
   14458:	sub	r4, r4, #1
   1445c:	ble	1437c <__assert_fail@plt+0x2d6c>
   14460:	sub	r4, r4, #1
   14464:	ldr	r3, [r5]
   14468:	mov	r0, #32
   1446c:	blx	r3
   14470:	cmn	r4, #1
   14474:	bne	14460 <__assert_fail@plt+0x2e50>
   14478:	b	1437c <__assert_fail@plt+0x2d6c>
   1447c:	andeq	sl, r1, r4, asr pc
   14480:	andeq	sl, r1, ip, lsl #29
   14484:	andeq	r8, r0, r4, lsl r8
   14488:	andeq	sl, r1, ip, lsr #28
   1448c:			; <UNDEFINED> instruction: 0x0001aeb8
   14490:	andeq	sl, r1, r4, ror sp
   14494:	andeq	sl, r1, ip, lsl lr
   14498:	strdeq	sl, [r1], -r0
   1449c:	push	{r3, r4, r5, lr}
   144a0:	mov	r5, r0
   144a4:	ldr	r4, [pc, #88]	; 14504 <__assert_fail@plt+0x2ef4>
   144a8:	ldr	r3, [r0, #32]
   144ac:	add	r4, pc, r4
   144b0:	ldr	r0, [r4, #56]	; 0x38
   144b4:	str	r3, [r4, #156]	; 0x9c
   144b8:	rsb	r0, r0, r3
   144bc:	cmp	r0, #0
   144c0:	ble	144d0 <__assert_fail@plt+0x2ec0>
   144c4:	bl	12de8 <__assert_fail@plt+0x17d8>
   144c8:	mov	r3, #0
   144cc:	str	r3, [r4, #156]	; 0x9c
   144d0:	ldr	r3, [pc, #48]	; 14508 <__assert_fail@plt+0x2ef8>
   144d4:	add	r3, pc, r3
   144d8:	ldrb	r3, [r3, #160]	; 0xa0
   144dc:	cmp	r3, #0
   144e0:	bne	144fc <__assert_fail@plt+0x2eec>
   144e4:	ldrb	r3, [r5, #36]	; 0x24
   144e8:	cmp	r3, #0
   144ec:	popeq	{r3, r4, r5, pc}
   144f0:	add	r0, r5, #16
   144f4:	pop	{r3, r4, r5, lr}
   144f8:	b	142cc <__assert_fail@plt+0x2cbc>
   144fc:	bl	13058 <__assert_fail@plt+0x1a48>
   14500:	b	144e4 <__assert_fail@plt+0x2ed4>
   14504:	andeq	sl, r1, ip, lsl #27
   14508:	andeq	sl, r1, r4, ror #26
   1450c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14510:	mov	r4, r0
   14514:	ldr	r0, [r0]
   14518:	ldr	r2, [r0, #4]
   1451c:	ldr	r1, [r0, #8]
   14520:	cmp	r2, r1
   14524:	bcs	14938 <__assert_fail@plt+0x3328>
   14528:	add	r1, r2, #1
   1452c:	str	r1, [r0, #4]
   14530:	ldrb	r6, [r2]
   14534:	ldr	r3, [pc, #1080]	; 14974 <__assert_fail@plt+0x3364>
   14538:	cmp	r6, #12
   1453c:	add	r3, pc, r3
   14540:	ldr	r7, [r3, #28]
   14544:	beq	1476c <__assert_fail@plt+0x315c>
   14548:	cmp	r6, #10
   1454c:	mov	r3, #0
   14550:	strb	r3, [r4, #37]	; 0x25
   14554:	beq	14580 <__assert_fail@plt+0x2f70>
   14558:	cmp	r6, #12
   1455c:	beq	147c4 <__assert_fail@plt+0x31b4>
   14560:	cmn	r6, #1
   14564:	beq	1475c <__assert_fail@plt+0x314c>
   14568:	ldr	r3, [pc, #1032]	; 14978 <__assert_fail@plt+0x3368>
   1456c:	uxtb	r0, r6
   14570:	add	r3, pc, r3
   14574:	ldr	r3, [r3, #192]	; 0xc0
   14578:	blx	r3
   1457c:	mov	r5, r0
   14580:	ldr	r3, [pc, #1012]	; 1497c <__assert_fail@plt+0x336c>
   14584:	add	r3, pc, r3
   14588:	ldrb	r2, [r3, #188]	; 0xbc
   1458c:	cmp	r2, #0
   14590:	bne	14670 <__assert_fail@plt+0x3060>
   14594:	ldr	r3, [pc, #996]	; 14980 <__assert_fail@plt+0x3370>
   14598:	ldr	r2, [r4, #16]
   1459c:	add	r3, pc, r3
   145a0:	cmp	r2, r3
   145a4:	beq	146d0 <__assert_fail@plt+0x30c0>
   145a8:	ldr	r3, [pc, #980]	; 14984 <__assert_fail@plt+0x3374>
   145ac:	mov	r1, #1
   145b0:	add	r3, pc, r3
   145b4:	ldrb	r2, [r3, #144]	; 0x90
   145b8:	strb	r1, [r3, #152]	; 0x98
   145bc:	cmp	r2, #0
   145c0:	beq	145dc <__assert_fail@plt+0x2fcc>
   145c4:	ldr	r3, [pc, #956]	; 14988 <__assert_fail@plt+0x3378>
   145c8:	add	r3, pc, r3
   145cc:	ldrb	r3, [r3, #4]
   145d0:	cmp	r3, #0
   145d4:	bne	145dc <__assert_fail@plt+0x2fcc>
   145d8:	bl	13bf4 <__assert_fail@plt+0x25e4>
   145dc:	ldr	r9, [pc, #936]	; 1498c <__assert_fail@plt+0x337c>
   145e0:	add	r9, pc, r9
   145e4:	ldrb	r3, [r9, #96]	; 0x60
   145e8:	cmp	r3, #0
   145ec:	beq	1468c <__assert_fail@plt+0x307c>
   145f0:	ldrb	r3, [r9, #200]	; 0xc8
   145f4:	cmp	r3, #0
   145f8:	beq	1468c <__assert_fail@plt+0x307c>
   145fc:	ldr	sl, [r9, #52]	; 0x34
   14600:	mov	r3, #0
   14604:	ldr	r7, [r9]
   14608:	cmp	sl, r3
   1460c:	str	r3, [r9, #52]	; 0x34
   14610:	movgt	r8, #1
   14614:	ble	1463c <__assert_fail@plt+0x302c>
   14618:	mov	r0, r7
   1461c:	add	r8, r8, #1
   14620:	bl	1449c <__assert_fail@plt+0x2e8c>
   14624:	ldr	r3, [r9, #52]	; 0x34
   14628:	cmp	sl, r8
   1462c:	add	r7, r7, #40	; 0x28
   14630:	add	r3, r3, #1
   14634:	str	r3, [r9, #52]	; 0x34
   14638:	bge	14618 <__assert_fail@plt+0x3008>
   1463c:	ldr	r3, [pc, #844]	; 14990 <__assert_fail@plt+0x3380>
   14640:	ldr	r0, [r4, #32]
   14644:	add	r3, pc, r3
   14648:	ldrb	r2, [r3, #188]	; 0xbc
   1464c:	str	r0, [r3, #156]	; 0x9c
   14650:	cmp	r2, #0
   14654:	bne	14914 <__assert_fail@plt+0x3304>
   14658:	str	r2, [r3, #44]	; 0x2c
   1465c:	ldr	r3, [pc, #816]	; 14994 <__assert_fail@plt+0x3384>
   14660:	mov	r2, #0
   14664:	add	r3, pc, r3
   14668:	strb	r2, [r3, #200]	; 0xc8
   1466c:	b	14698 <__assert_fail@plt+0x3088>
   14670:	ldr	r1, [r3, #28]
   14674:	ldr	r2, [r3, #196]	; 0xc4
   14678:	cmp	r1, r2
   1467c:	ble	14594 <__assert_fail@plt+0x2f84>
   14680:	str	r7, [r3, #28]
   14684:	mov	r0, #0
   14688:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1468c:	ldr	r3, [pc, #772]	; 14998 <__assert_fail@plt+0x3388>
   14690:	add	r3, pc, r3
   14694:	ldr	r0, [r3, #156]	; 0x9c
   14698:	ldr	r7, [pc, #764]	; 1499c <__assert_fail@plt+0x338c>
   1469c:	add	r7, pc, r7
   146a0:	ldr	r3, [r7, #56]	; 0x38
   146a4:	rsb	r0, r3, r0
   146a8:	cmp	r0, #0
   146ac:	ble	146bc <__assert_fail@plt+0x30ac>
   146b0:	bl	12de8 <__assert_fail@plt+0x17d8>
   146b4:	mov	r3, #0
   146b8:	str	r3, [r7, #156]	; 0x9c
   146bc:	ldr	r3, [pc, #732]	; 149a0 <__assert_fail@plt+0x3390>
   146c0:	add	r3, pc, r3
   146c4:	ldrb	r3, [r3, #160]	; 0xa0
   146c8:	cmp	r3, #0
   146cc:	bne	1490c <__assert_fail@plt+0x32fc>
   146d0:	ldrb	r3, [r4, #36]	; 0x24
   146d4:	cmp	r3, #0
   146d8:	bne	148b8 <__assert_fail@plt+0x32a8>
   146dc:	ldr	r3, [pc, #704]	; 149a4 <__assert_fail@plt+0x3394>
   146e0:	cmp	r6, #10
   146e4:	mov	r2, #0
   146e8:	add	r3, pc, r3
   146ec:	strb	r2, [r3, #201]	; 0xc9
   146f0:	beq	148b0 <__assert_fail@plt+0x32a0>
   146f4:	cmp	r5, r2
   146f8:	ldr	r6, [r3, #24]
   146fc:	beq	14714 <__assert_fail@plt+0x3104>
   14700:	ldr	r3, [r4, #16]
   14704:	ldrb	r0, [r6], #1
   14708:	blx	r3
   1470c:	subs	r5, r5, #1
   14710:	bne	14700 <__assert_fail@plt+0x30f0>
   14714:	ldr	r7, [pc, #652]	; 149a8 <__assert_fail@plt+0x3398>
   14718:	ldr	r8, [pc, #652]	; 149ac <__assert_fail@plt+0x339c>
   1471c:	add	r7, pc, r7
   14720:	add	r8, pc, r8
   14724:	ldr	r0, [r4]
   14728:	ldr	r3, [r0, #4]
   1472c:	ldr	r2, [r0, #8]
   14730:	cmp	r3, r2
   14734:	bcs	14964 <__assert_fail@plt+0x3354>
   14738:	add	r2, r3, #1
   1473c:	str	r2, [r0, #4]
   14740:	ldrb	r0, [r3]
   14744:	cmp	r0, #10
   14748:	beq	148b0 <__assert_fail@plt+0x32a0>
   1474c:	cmp	r0, #12
   14750:	beq	148c4 <__assert_fail@plt+0x32b4>
   14754:	cmn	r0, #1
   14758:	bne	1485c <__assert_fail@plt+0x324c>
   1475c:	mov	r0, r4
   14760:	bl	138d4 <__assert_fail@plt+0x22c4>
   14764:	mov	r0, #1
   14768:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1476c:	ldrb	r3, [r4, #37]	; 0x25
   14770:	cmp	r3, #0
   14774:	beq	147c4 <__assert_fail@plt+0x31b4>
   14778:	ldr	r0, [r4]
   1477c:	ldr	r3, [r0, #4]
   14780:	ldr	r2, [r0, #8]
   14784:	cmp	r3, r2
   14788:	bcs	14958 <__assert_fail@plt+0x3348>
   1478c:	add	r2, r3, #1
   14790:	str	r2, [r0, #4]
   14794:	ldrb	r6, [r3]
   14798:	cmp	r6, #10
   1479c:	bne	14548 <__assert_fail@plt+0x2f38>
   147a0:	ldr	r0, [r4]
   147a4:	ldr	r3, [r0, #4]
   147a8:	ldr	r2, [r0, #8]
   147ac:	cmp	r3, r2
   147b0:	bcs	1494c <__assert_fail@plt+0x333c>
   147b4:	add	r2, r3, #1
   147b8:	str	r2, [r0, #4]
   147bc:	ldrb	r6, [r3]
   147c0:	b	14548 <__assert_fail@plt+0x2f38>
   147c4:	ldr	r0, [r4]
   147c8:	ldr	r3, [r0, #4]
   147cc:	ldr	r2, [r0, #8]
   147d0:	cmp	r3, r2
   147d4:	bcs	1496c <__assert_fail@plt+0x335c>
   147d8:	add	r2, r3, #1
   147dc:	str	r2, [r0, #4]
   147e0:	ldrb	r0, [r3]
   147e4:	cmp	r0, #10
   147e8:	beq	147f4 <__assert_fail@plt+0x31e4>
   147ec:	ldr	r1, [r4]
   147f0:	bl	114f0 <ungetc@plt>
   147f4:	ldr	r3, [pc, #436]	; 149b0 <__assert_fail@plt+0x33a0>
   147f8:	mov	r2, #1
   147fc:	add	r3, pc, r3
   14800:	ldrb	r1, [r3, #144]	; 0x90
   14804:	strb	r2, [r3, #189]	; 0xbd
   14808:	cmp	r1, #0
   1480c:	beq	14824 <__assert_fail@plt+0x3214>
   14810:	ldr	r1, [pc, #412]	; 149b4 <__assert_fail@plt+0x33a4>
   14814:	add	r1, pc, r1
   14818:	ldrb	r1, [r1, #4]
   1481c:	cmp	r1, #0
   14820:	beq	14920 <__assert_fail@plt+0x3310>
   14824:	ldr	r3, [pc, #396]	; 149b8 <__assert_fail@plt+0x33a8>
   14828:	add	r3, pc, r3
   1482c:	ldrb	r3, [r3, #173]	; 0xad
   14830:	cmp	r3, #0
   14834:	beq	14848 <__assert_fail@plt+0x3238>
   14838:	ldr	r3, [pc, #380]	; 149bc <__assert_fail@plt+0x33ac>
   1483c:	mov	r2, #1
   14840:	add	r3, pc, r3
   14844:	strb	r2, [r3, #174]	; 0xae
   14848:	add	r0, r4, #8
   1484c:	add	r1, r4, #28
   14850:	bl	13f08 <__assert_fail@plt+0x28f8>
   14854:	mov	r0, #1
   14858:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1485c:	ldr	r3, [r7, #192]	; 0xc0
   14860:	uxtb	r0, r0
   14864:	ldr	r5, [r7, #28]
   14868:	blx	r3
   1486c:	ldrb	r3, [r7, #188]	; 0xbc
   14870:	cmp	r3, #0
   14874:	beq	14888 <__assert_fail@plt+0x3278>
   14878:	ldr	r2, [r7, #28]
   1487c:	ldr	r3, [r7, #196]	; 0xc4
   14880:	cmp	r2, r3
   14884:	bgt	1492c <__assert_fail@plt+0x331c>
   14888:	cmp	r0, #0
   1488c:	ldr	r6, [r8, #24]
   14890:	beq	14724 <__assert_fail@plt+0x3114>
   14894:	mov	r5, r0
   14898:	ldr	r3, [r4, #16]
   1489c:	ldrb	r0, [r6], #1
   148a0:	blx	r3
   148a4:	subs	r5, r5, #1
   148a8:	bne	14898 <__assert_fail@plt+0x3288>
   148ac:	b	14724 <__assert_fail@plt+0x3114>
   148b0:	mov	r0, #1
   148b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148b8:	add	r0, r4, #16
   148bc:	bl	142cc <__assert_fail@plt+0x2cbc>
   148c0:	b	146dc <__assert_fail@plt+0x30cc>
   148c4:	ldr	r0, [r4]
   148c8:	ldr	r3, [r0, #4]
   148cc:	ldr	r2, [r0, #8]
   148d0:	cmp	r3, r2
   148d4:	bcs	14944 <__assert_fail@plt+0x3334>
   148d8:	add	r2, r3, #1
   148dc:	str	r2, [r0, #4]
   148e0:	ldrb	r0, [r3]
   148e4:	cmp	r0, #10
   148e8:	beq	148f4 <__assert_fail@plt+0x32e4>
   148ec:	ldr	r1, [r4]
   148f0:	bl	114f0 <ungetc@plt>
   148f4:	ldr	r3, [pc, #196]	; 149c0 <__assert_fail@plt+0x33b0>
   148f8:	add	r3, pc, r3
   148fc:	ldrb	r3, [r3, #173]	; 0xad
   14900:	cmp	r3, #0
   14904:	bne	14838 <__assert_fail@plt+0x3228>
   14908:	b	14848 <__assert_fail@plt+0x3238>
   1490c:	bl	13058 <__assert_fail@plt+0x1a48>
   14910:	b	146d0 <__assert_fail@plt+0x30c0>
   14914:	ldr	r2, [r3, #196]	; 0xc4
   14918:	str	r2, [r3, #44]	; 0x2c
   1491c:	b	1465c <__assert_fail@plt+0x304c>
   14920:	strb	r2, [r3, #152]	; 0x98
   14924:	bl	13bf4 <__assert_fail@plt+0x25e4>
   14928:	b	14848 <__assert_fail@plt+0x3238>
   1492c:	str	r5, [r7, #28]
   14930:	mov	r0, #0
   14934:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14938:	bl	11598 <__uflow@plt>
   1493c:	mov	r6, r0
   14940:	b	14534 <__assert_fail@plt+0x2f24>
   14944:	bl	11598 <__uflow@plt>
   14948:	b	148e4 <__assert_fail@plt+0x32d4>
   1494c:	bl	11598 <__uflow@plt>
   14950:	mov	r6, r0
   14954:	b	14548 <__assert_fail@plt+0x2f38>
   14958:	bl	11598 <__uflow@plt>
   1495c:	mov	r6, r0
   14960:	b	14798 <__assert_fail@plt+0x3188>
   14964:	bl	11598 <__uflow@plt>
   14968:	b	14744 <__assert_fail@plt+0x3134>
   1496c:	bl	11598 <__uflow@plt>
   14970:	b	147e4 <__assert_fail@plt+0x31d4>
   14974:	strdeq	sl, [r1], -ip
   14978:	andeq	sl, r1, r8, asr #25
   1497c:			; <UNDEFINED> instruction: 0x0001acb4
   14980:			; <UNDEFINED> instruction: 0xffffe4d0
   14984:	andeq	sl, r1, r8, lsl #25
   14988:			; <UNDEFINED> instruction: 0x0001abb0
   1498c:	andeq	sl, r1, r8, asr ip
   14990:	strdeq	sl, [r1], -r4
   14994:	ldrdeq	sl, [r1], -r4
   14998:	andeq	sl, r1, r8, lsr #23
   1499c:	muleq	r1, ip, fp
   149a0:	andeq	sl, r1, r8, ror fp
   149a4:	andeq	sl, r1, r0, asr fp
   149a8:	andeq	sl, r1, ip, lsl fp
   149ac:	andeq	sl, r1, r8, lsl fp
   149b0:	andeq	sl, r1, ip, lsr sl
   149b4:	andeq	sl, r1, r4, ror #18
   149b8:	andeq	sl, r1, r0, lsl sl
   149bc:	strdeq	sl, [r1], -r8
   149c0:	andeq	sl, r1, r0, asr #18
   149c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149c8:	sub	sp, sp, #36	; 0x24
   149cc:	ldr	r5, [pc, #652]	; 14c60 <__assert_fail@plt+0x3650>
   149d0:	mov	r7, r0
   149d4:	ldr	r3, [pc, #648]	; 14c64 <__assert_fail@plt+0x3654>
   149d8:	add	r5, pc, r5
   149dc:	ldr	r4, [pc, #644]	; 14c68 <__assert_fail@plt+0x3658>
   149e0:	ldr	r3, [r5, r3]
   149e4:	add	r4, pc, r4
   149e8:	ldrb	r2, [r4, #40]	; 0x28
   149ec:	str	r3, [sp, #4]
   149f0:	ldr	r3, [r3]
   149f4:	cmp	r2, #0
   149f8:	str	r3, [sp, #28]
   149fc:	bne	14a44 <__assert_fail@plt+0x3434>
   14a00:	ldr	r3, [pc, #612]	; 14c6c <__assert_fail@plt+0x365c>
   14a04:	ldr	r3, [r5, r3]
   14a08:	ldr	r0, [r3]
   14a0c:	ldr	r2, [r0, #20]
   14a10:	ldr	r1, [r0, #24]
   14a14:	cmp	r2, r1
   14a18:	addcc	r1, r2, #1
   14a1c:	strcc	r1, [r0, #20]
   14a20:	strbcc	r7, [r2]
   14a24:	bcs	14c48 <__assert_fail@plt+0x3638>
   14a28:	ldr	r6, [sp, #4]
   14a2c:	ldr	r2, [sp, #28]
   14a30:	ldr	r3, [r6]
   14a34:	cmp	r2, r3
   14a38:	bne	14c44 <__assert_fail@plt+0x3634>
   14a3c:	add	sp, sp, #36	; 0x24
   14a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a44:	add	r3, r4, #204	; 0xcc
   14a48:	ldr	r2, [r4, #212]	; 0xd4
   14a4c:	add	r6, sp, #20
   14a50:	str	r6, [sp, #8]
   14a54:	ldm	r3, {r0, r1}
   14a58:	add	ip, r2, #1
   14a5c:	add	lr, r4, r2
   14a60:	str	ip, [r4, #212]	; 0xd4
   14a64:	mov	r2, ip
   14a68:	ldr	r8, [pc, #512]	; 14c70 <__assert_fail@plt+0x3660>
   14a6c:	stm	r6, {r0, r1}
   14a70:	add	r1, r4, #216	; 0xd8
   14a74:	add	r0, sp, #16
   14a78:	strb	r7, [lr, #216]	; 0xd8
   14a7c:	mov	r6, ip
   14a80:	bl	11424 <mbrtowc@plt>
   14a84:	ldr	r9, [pc, #488]	; 14c74 <__assert_fail@plt+0x3664>
   14a88:	add	r8, pc, r8
   14a8c:	ldr	fp, [pc, #484]	; 14c78 <__assert_fail@plt+0x3668>
   14a90:	add	r7, r8, #216	; 0xd8
   14a94:	ldr	sl, [pc, #480]	; 14c7c <__assert_fail@plt+0x366c>
   14a98:	add	r9, pc, r9
   14a9c:	add	fp, pc, fp
   14aa0:	add	sl, pc, sl
   14aa4:	add	r1, sl, #216	; 0xd8
   14aa8:	str	r1, [sp, #12]
   14aac:	mov	r4, r0
   14ab0:	cmp	r6, #0
   14ab4:	beq	14a28 <__assert_fail@plt+0x3418>
   14ab8:	cmn	r4, #2
   14abc:	beq	14b5c <__assert_fail@plt+0x354c>
   14ac0:	bhi	14b78 <__assert_fail@plt+0x3568>
   14ac4:	cmp	r4, #0
   14ac8:	ldr	r0, [sp, #16]
   14acc:	moveq	r4, #1
   14ad0:	cmp	r0, #32
   14ad4:	beq	14c08 <__assert_fail@plt+0x35f8>
   14ad8:	ldr	r3, [fp, #44]	; 0x2c
   14adc:	cmp	r3, #0
   14ae0:	ble	14aec <__assert_fail@plt+0x34dc>
   14ae4:	bl	12e84 <__assert_fail@plt+0x1874>
   14ae8:	ldr	r0, [sp, #16]
   14aec:	bl	11310 <wcwidth@plt>
   14af0:	cmp	r0, #0
   14af4:	ble	14be4 <__assert_fail@plt+0x35d4>
   14af8:	ldr	r3, [pc, #384]	; 14c80 <__assert_fail@plt+0x3670>
   14afc:	add	r3, pc, r3
   14b00:	ldr	r2, [r3, #36]	; 0x24
   14b04:	add	r0, r0, r2
   14b08:	str	r0, [r3, #36]	; 0x24
   14b0c:	ldr	r3, [pc, #344]	; 14c6c <__assert_fail@plt+0x365c>
   14b10:	mov	r1, #1
   14b14:	mov	r2, r4
   14b18:	mov	r0, r7
   14b1c:	ldr	r3, [r5, r3]
   14b20:	ldr	r3, [r3]
   14b24:	bl	11370 <fwrite_unlocked@plt>
   14b28:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   14b2c:	add	r1, r7, r4
   14b30:	mov	r3, #16
   14b34:	rsb	r2, r4, r0
   14b38:	mov	r0, r7
   14b3c:	bl	1131c <__memmove_chk@plt>
   14b40:	ldr	r6, [r8, #212]	; 0xd4
   14b44:	rsb	r6, r4, r6
   14b48:	str	r6, [r8, #212]	; 0xd4
   14b4c:	cmp	r6, #0
   14b50:	beq	14a28 <__assert_fail@plt+0x3418>
   14b54:	cmn	r4, #2
   14b58:	bne	14ac0 <__assert_fail@plt+0x34b0>
   14b5c:	ldr	r6, [sp, #8]
   14b60:	ldr	r3, [pc, #284]	; 14c84 <__assert_fail@plt+0x3674>
   14b64:	ldm	r6, {r0, r1}
   14b68:	add	r3, pc, r3
   14b6c:	add	r3, r3, #204	; 0xcc
   14b70:	stm	r3, {r0, r1}
   14b74:	b	14a28 <__assert_fail@plt+0x3418>
   14b78:	ldr	r2, [sp, #8]
   14b7c:	add	r3, r9, #204	; 0xcc
   14b80:	ldr	ip, [r9, #36]	; 0x24
   14b84:	ldm	r2, {r0, r1}
   14b88:	add	ip, ip, #1
   14b8c:	ldr	r2, [pc, #216]	; 14c6c <__assert_fail@plt+0x365c>
   14b90:	str	ip, [r9, #36]	; 0x24
   14b94:	stm	r3, {r0, r1}
   14b98:	ldr	r3, [r5, r2]
   14b9c:	ldrb	r1, [r9, #216]	; 0xd8
   14ba0:	ldr	r0, [r3]
   14ba4:	ldr	r3, [r0, #20]
   14ba8:	ldr	r2, [r0, #24]
   14bac:	cmp	r3, r2
   14bb0:	addcc	r2, r3, #1
   14bb4:	strcc	r2, [r0, #20]
   14bb8:	strbcc	r1, [r3]
   14bbc:	bcs	14c54 <__assert_fail@plt+0x3644>
   14bc0:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   14bc4:	add	r1, sl, #217	; 0xd9
   14bc8:	mov	r3, #16
   14bcc:	sub	r6, r6, #1
   14bd0:	sub	r2, r0, #1
   14bd4:	ldr	r0, [sp, #12]
   14bd8:	bl	1131c <__memmove_chk@plt>
   14bdc:	str	r6, [sl, #212]	; 0xd4
   14be0:	b	14ab0 <__assert_fail@plt+0x34a0>
   14be4:	ldr	r3, [sp, #16]
   14be8:	cmp	r3, #8
   14bec:	bne	14b0c <__assert_fail@plt+0x34fc>
   14bf0:	ldr	r3, [pc, #144]	; 14c88 <__assert_fail@plt+0x3678>
   14bf4:	add	r3, pc, r3
   14bf8:	ldr	r2, [r3, #36]	; 0x24
   14bfc:	sub	r2, r2, #1
   14c00:	str	r2, [r3, #36]	; 0x24
   14c04:	b	14b0c <__assert_fail@plt+0x34fc>
   14c08:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   14c0c:	ldr	r5, [pc, #120]	; 14c8c <__assert_fail@plt+0x367c>
   14c10:	mov	r3, #16
   14c14:	add	r5, pc, r5
   14c18:	add	r1, r5, #216	; 0xd8
   14c1c:	rsb	r2, r4, r0
   14c20:	mov	r0, r1
   14c24:	add	r1, r1, r4
   14c28:	bl	1131c <__memmove_chk@plt>
   14c2c:	ldr	r3, [r5, #44]	; 0x2c
   14c30:	sub	ip, r6, #1
   14c34:	str	ip, [r5, #212]	; 0xd4
   14c38:	add	r3, r3, #1
   14c3c:	str	r3, [r5, #44]	; 0x2c
   14c40:	b	14a28 <__assert_fail@plt+0x3418>
   14c44:	bl	11394 <__stack_chk_fail@plt>
   14c48:	mov	r1, r7
   14c4c:	bl	115a4 <__overflow@plt>
   14c50:	b	14a28 <__assert_fail@plt+0x3418>
   14c54:	bl	115a4 <__overflow@plt>
   14c58:	ldr	r6, [r9, #212]	; 0xd4
   14c5c:	b	14bc0 <__assert_fail@plt+0x35b0>
   14c60:	andeq	sl, r1, r0, lsr #12
   14c64:	andeq	r0, r0, r8, lsr r1
   14c68:	andeq	sl, r1, r4, asr r8
   14c6c:	andeq	r0, r0, r8, asr r1
   14c70:			; <UNDEFINED> instruction: 0x0001a7b0
   14c74:	andeq	sl, r1, r0, lsr #15
   14c78:	muleq	r1, ip, r7
   14c7c:	muleq	r1, r8, r7
   14c80:	andeq	sl, r1, ip, lsr r7
   14c84:	ldrdeq	sl, [r1], -r0
   14c88:	andeq	sl, r1, r4, asr #12
   14c8c:	andeq	sl, r1, r4, lsr #12
   14c90:	push	{r4, r5, r6, lr}
   14c94:	mov	r6, r0
   14c98:	bl	114d8 <strlen@plt>
   14c9c:	ldr	r4, [pc, #84]	; 14cf8 <__assert_fail@plt+0x36e8>
   14ca0:	add	r4, pc, r4
   14ca4:	mov	r3, r0
   14ca8:	add	r0, r0, #1
   14cac:	str	r3, [r4, #48]	; 0x30
   14cb0:	bl	1a338 <close_stdout@@Base+0x3c28>
   14cb4:	ldr	r3, [pc, #64]	; 14cfc <__assert_fail@plt+0x36ec>
   14cb8:	mov	r1, r6
   14cbc:	add	r3, pc, r3
   14cc0:	mov	r5, r0
   14cc4:	str	r0, [r3]
   14cc8:	bl	11400 <strcpy@plt>
   14ccc:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   14cd0:	cmp	r0, #1
   14cd4:	bhi	14ce4 <__assert_fail@plt+0x36d4>
   14cd8:	ldr	r3, [r4, #48]	; 0x30
   14cdc:	str	r3, [r4, #56]	; 0x38
   14ce0:	pop	{r4, r5, r6, pc}
   14ce4:	mov	r0, r5
   14ce8:	mov	r1, #0
   14cec:	bl	16c98 <close_stdout@@Base+0x588>
   14cf0:	str	r0, [r4, #56]	; 0x38
   14cf4:	pop	{r4, r5, r6, pc}
   14cf8:	muleq	r1, r8, r5
   14cfc:	andeq	sl, r1, r8, lsr #10
   14d00:	push	{r4, r5, r6, lr}
   14d04:	mov	r5, r0
   14d08:	ldrb	r3, [r0]
   14d0c:	mov	r4, r1
   14d10:	ldr	r6, [pc, #240]	; 14e08 <__assert_fail@plt+0x37f8>
   14d14:	cmp	r3, #45	; 0x2d
   14d18:	add	r6, pc, r6
   14d1c:	bne	14d9c <__assert_fail@plt+0x378c>
   14d20:	ldrb	r0, [r0, #1]
   14d24:	cmp	r0, #0
   14d28:	bne	14d9c <__assert_fail@plt+0x378c>
   14d2c:	ldr	r1, [pc, #216]	; 14e0c <__assert_fail@plt+0x37fc>
   14d30:	mov	r2, #5
   14d34:	add	r1, pc, r1
   14d38:	bl	11388 <dcgettext@plt>
   14d3c:	ldr	r1, [pc, #204]	; 14e10 <__assert_fail@plt+0x3800>
   14d40:	ldr	r2, [pc, #204]	; 14e14 <__assert_fail@plt+0x3804>
   14d44:	mov	r3, #1
   14d48:	add	r2, pc, r2
   14d4c:	str	r0, [r4, #4]
   14d50:	ldr	r1, [r6, r1]
   14d54:	strb	r3, [r2, #232]	; 0xe8
   14d58:	ldr	r6, [r1]
   14d5c:	cmp	r6, #0
   14d60:	str	r6, [r4]
   14d64:	beq	14dc0 <__assert_fail@plt+0x37b0>
   14d68:	mov	r0, r6
   14d6c:	mov	r1, #2
   14d70:	bl	168d0 <close_stdout@@Base+0x1c0>
   14d74:	ldr	r3, [pc, #156]	; 14e18 <__assert_fail@plt+0x3808>
   14d78:	mov	r2, #0
   14d7c:	mov	r0, #1
   14d80:	add	r3, pc, r3
   14d84:	str	r2, [r4, #8]
   14d88:	strb	r2, [r4, #37]	; 0x25
   14d8c:	ldr	r1, [r3, #236]	; 0xec
   14d90:	add	r2, r1, r0
   14d94:	str	r2, [r3, #236]	; 0xec
   14d98:	pop	{r4, r5, r6, pc}
   14d9c:	ldr	r1, [pc, #120]	; 14e1c <__assert_fail@plt+0x380c>
   14da0:	mov	r0, r5
   14da4:	str	r5, [r4, #4]
   14da8:	add	r1, pc, r1
   14dac:	bl	1690c <close_stdout@@Base+0x1fc>
   14db0:	mov	r6, r0
   14db4:	cmp	r6, #0
   14db8:	str	r0, [r4]
   14dbc:	bne	14d68 <__assert_fail@plt+0x3758>
   14dc0:	ldr	r3, [pc, #88]	; 14e20 <__assert_fail@plt+0x3810>
   14dc4:	mov	r1, #1
   14dc8:	add	r3, pc, r3
   14dcc:	ldrb	r2, [r3, #234]	; 0xea
   14dd0:	strb	r1, [r3, #233]	; 0xe9
   14dd4:	cmp	r2, #0
   14dd8:	beq	14de4 <__assert_fail@plt+0x37d4>
   14ddc:	mov	r0, r6
   14de0:	pop	{r4, r5, r6, pc}
   14de4:	bl	11508 <__errno_location@plt>
   14de8:	ldr	r2, [pc, #52]	; 14e24 <__assert_fail@plt+0x3814>
   14dec:	mov	r3, r5
   14df0:	add	r2, pc, r2
   14df4:	ldr	r1, [r0]
   14df8:	mov	r0, r6
   14dfc:	bl	11430 <error@plt>
   14e00:	mov	r0, r6
   14e04:	pop	{r4, r5, r6, pc}
   14e08:	andeq	sl, r1, r0, ror #5
   14e0c:	ldrdeq	r7, [r0], -ip
   14e10:	andeq	r0, r0, r4, asr r1
   14e14:	strdeq	sl, [r1], -r0
   14e18:			; <UNDEFINED> instruction: 0x0001a4b8
   14e1c:	andeq	r9, r0, r8, asr #2
   14e20:	andeq	sl, r1, r0, ror r4
   14e24:	andeq	r9, r0, r4, lsr #3
   14e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e2c:	sub	sp, sp, #84	; 0x54
   14e30:	mov	r6, r1
   14e34:	mov	r5, r0
   14e38:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   14e3c:	ldr	r3, [pc, #4024]	; 15dfc <__assert_fail@plt+0x47ec>
   14e40:	ldr	r1, [pc, #4024]	; 15e00 <__assert_fail@plt+0x47f0>
   14e44:	add	r3, pc, r3
   14e48:	ldr	r4, [pc, #4020]	; 15e04 <__assert_fail@plt+0x47f4>
   14e4c:	add	r1, pc, r1
   14e50:	ldr	r2, [r3, #100]	; 0x64
   14e54:	add	r4, pc, r4
   14e58:	str	r4, [sp, #52]	; 0x34
   14e5c:	sub	ip, r2, #10
   14e60:	str	ip, [r1, #240]	; 0xf0
   14e64:	cmp	r0, #1
   14e68:	movhi	r4, #16
   14e6c:	movls	r4, #1
   14e70:	cmp	ip, #0
   14e74:	ble	1510c <__assert_fail@plt+0x3afc>
   14e78:	ldrb	r3, [r3, #68]	; 0x44
   14e7c:	cmp	r3, #0
   14e80:	beq	1511c <__assert_fail@plt+0x3b0c>
   14e84:	ldr	r3, [pc, #3964]	; 15e08 <__assert_fail@plt+0x47f8>
   14e88:	add	r3, pc, r3
   14e8c:	ldrb	r2, [r3, #244]	; 0xf4
   14e90:	cmp	r2, #0
   14e94:	ldrne	r2, [r3, #240]	; 0xf0
   14e98:	addne	r2, r2, r2, lsr #31
   14e9c:	asrne	r2, r2, #1
   14ea0:	strne	r2, [r3, #240]	; 0xf0
   14ea4:	cmp	r5, #0
   14ea8:	beq	150f0 <__assert_fail@plt+0x3ae0>
   14eac:	ldr	r3, [pc, #3928]	; 15e0c <__assert_fail@plt+0x47fc>
   14eb0:	add	r3, pc, r3
   14eb4:	ldrb	r3, [r3, #96]	; 0x60
   14eb8:	cmp	r3, #0
   14ebc:	beq	161bc <__assert_fail@plt+0x4bac>
   14ec0:	ldr	r3, [pc, #3912]	; 15e10 <__assert_fail@plt+0x4800>
   14ec4:	mov	r1, r5
   14ec8:	add	r3, pc, r3
   14ecc:	str	r5, [r3]
   14ed0:	ldr	r3, [pc, #3900]	; 15e14 <__assert_fail@plt+0x4804>
   14ed4:	add	r3, pc, r3
   14ed8:	ldrb	r3, [r3, #4]
   14edc:	cmp	r3, #0
   14ee0:	ldrne	r3, [pc, #3888]	; 15e18 <__assert_fail@plt+0x4808>
   14ee4:	movne	r2, #1
   14ee8:	addne	r3, pc, r3
   14eec:	strbne	r2, [r3, #245]	; 0xf5
   14ef0:	cmp	r1, #1
   14ef4:	ble	16004 <__assert_fail@plt+0x49f4>
   14ef8:	ldr	r3, [pc, #3868]	; 15e1c <__assert_fail@plt+0x480c>
   14efc:	add	r3, pc, r3
   14f00:	ldrb	r2, [r3, #160]	; 0xa0
   14f04:	cmp	r2, #0
   14f08:	ldrb	r2, [r3, #246]	; 0xf6
   14f0c:	beq	1512c <__assert_fail@plt+0x3b1c>
   14f10:	cmp	r2, #0
   14f14:	beq	16100 <__assert_fail@plt+0x4af0>
   14f18:	ldr	r3, [r3, #56]	; 0x38
   14f1c:	mov	r2, #1
   14f20:	ldr	r0, [pc, #3832]	; 15e20 <__assert_fail@plt+0x4810>
   14f24:	mov	ip, #1
   14f28:	add	r0, pc, r0
   14f2c:	strb	ip, [r0, #188]	; 0xbc
   14f30:	strb	ip, [r0, #40]	; 0x28
   14f34:	cmp	r2, #0
   14f38:	ldrne	r2, [pc, #3812]	; 15e24 <__assert_fail@plt+0x4814>
   14f3c:	movne	r0, #0
   14f40:	addne	r2, pc, r2
   14f44:	strbne	r0, [r2, #188]	; 0xbc
   14f48:	ldr	r0, [pc, #3800]	; 15e28 <__assert_fail@plt+0x4818>
   14f4c:	add	r0, pc, r0
   14f50:	ldrb	r8, [r0, #247]	; 0xf7
   14f54:	cmp	r8, #0
   14f58:	beq	15168 <__assert_fail@plt+0x3b58>
   14f5c:	ldr	r2, [pc, #3784]	; 15e2c <__assert_fail@plt+0x481c>
   14f60:	add	r2, pc, r2
   14f64:	ldrb	lr, [r2, #84]	; 0x54
   14f68:	ldr	ip, [r2, #104]	; 0x68
   14f6c:	cmp	lr, #9
   14f70:	str	ip, [r2, #72]	; 0x48
   14f74:	ldreq	r2, [r2, #76]	; 0x4c
   14f78:	ldrne	ip, [r2, #76]	; 0x4c
   14f7c:	ldrne	r2, [r0, #248]	; 0xf8
   14f80:	asreq	ip, r2, #31
   14f84:	lsreq	ip, ip, #29
   14f88:	addeq	lr, r2, ip
   14f8c:	andeq	lr, lr, #7
   14f90:	rsbeq	ip, ip, lr
   14f94:	rsbeq	ip, ip, #8
   14f98:	add	r2, ip, r2
   14f9c:	str	r2, [r0, #184]	; 0xb8
   14fa0:	ldr	r2, [pc, #3720]	; 15e30 <__assert_fail@plt+0x4820>
   14fa4:	add	r2, pc, r2
   14fa8:	ldrb	r0, [r2, #96]	; 0x60
   14fac:	cmp	r0, #0
   14fb0:	beq	15168 <__assert_fail@plt+0x3b58>
   14fb4:	ldr	r2, [r2, #184]	; 0xb8
   14fb8:	ldr	ip, [pc, #3700]	; 15e34 <__assert_fail@plt+0x4824>
   14fbc:	rsb	r0, r1, #1
   14fc0:	ldr	r7, [pc, #3696]	; 15e38 <__assert_fail@plt+0x4828>
   14fc4:	add	ip, pc, ip
   14fc8:	add	r7, pc, r7
   14fcc:	ldr	ip, [ip, #64]	; 0x40
   14fd0:	rsb	r2, r2, ip
   14fd4:	mla	r0, r0, r3, r2
   14fd8:	bl	1be04 <close_stdout@@Base+0x56f4>
   14fdc:	cmp	r0, #0
   14fe0:	str	r0, [r7, #196]	; 0xc4
   14fe4:	ble	16154 <__assert_fail@plt+0x4b44>
   14fe8:	cmp	r8, #0
   14fec:	beq	15020 <__assert_fail@plt+0x3a10>
   14ff0:	ldr	r7, [pc, #3652]	; 15e3c <__assert_fail@plt+0x482c>
   14ff4:	add	r7, pc, r7
   14ff8:	ldr	r0, [r7, #176]	; 0xb0
   14ffc:	bl	11328 <free@plt>
   15000:	ldr	r3, [pc, #3640]	; 15e40 <__assert_fail@plt+0x4830>
   15004:	add	r3, pc, r3
   15008:	ldr	r0, [r3, #76]	; 0x4c
   1500c:	cmp	r0, #11
   15010:	movcc	r0, #11
   15014:	add	r0, r0, #1
   15018:	bl	1a338 <close_stdout@@Base+0x3c28>
   1501c:	str	r0, [r7, #176]	; 0xb0
   15020:	ldr	r7, [pc, #3612]	; 15e44 <__assert_fail@plt+0x4834>
   15024:	ldr	r8, [pc, #3612]	; 15e48 <__assert_fail@plt+0x4838>
   15028:	add	r7, pc, r7
   1502c:	add	r8, pc, r8
   15030:	ldr	r0, [r7, #24]
   15034:	bl	11328 <free@plt>
   15038:	ldr	r0, [r8, #24]
   1503c:	cmp	r0, #8
   15040:	movlt	r0, #8
   15044:	mul	r0, r4, r0
   15048:	bl	1a338 <close_stdout@@Base+0x3c28>
   1504c:	mov	r3, #0
   15050:	str	r3, [r7, #236]	; 0xec
   15054:	str	r0, [r7, #24]
   15058:	ldr	r0, [r7]
   1505c:	bl	11328 <free@plt>
   15060:	ldr	r3, [r8]
   15064:	movw	r2, #26214	; 0x6666
   15068:	movt	r2, #1638	; 0x666
   1506c:	cmp	r3, r2
   15070:	bhi	161b8 <__assert_fail@plt+0x4ba8>
   15074:	add	r0, r3, r3, lsl #2
   15078:	lsl	r0, r0, #3
   1507c:	bl	1a338 <close_stdout@@Base+0x3c28>
   15080:	ldrb	r8, [r7, #96]	; 0x60
   15084:	cmp	r8, #0
   15088:	mov	r4, r0
   1508c:	str	r0, [r7]
   15090:	beq	15170 <__assert_fail@plt+0x3b60>
   15094:	ldr	r7, [pc, #3504]	; 15e4c <__assert_fail@plt+0x483c>
   15098:	cmp	r5, #0
   1509c:	sub	r6, r6, #4
   150a0:	add	r7, pc, r7
   150a4:	beq	150d4 <__assert_fail@plt+0x3ac4>
   150a8:	mov	r1, r4
   150ac:	ldr	r0, [r6, #4]!
   150b0:	bl	14d00 <__assert_fail@plt+0x36f0>
   150b4:	cmp	r0, #0
   150b8:	subeq	r4, r4, #40	; 0x28
   150bc:	ldreq	r3, [r7]
   150c0:	add	r4, r4, #40	; 0x28
   150c4:	subeq	r3, r3, #1
   150c8:	streq	r3, [r7]
   150cc:	subs	r5, r5, #1
   150d0:	bne	150a8 <__assert_fail@plt+0x3a98>
   150d4:	ldr	r3, [pc, #3444]	; 15e50 <__assert_fail@plt+0x4840>
   150d8:	add	r3, pc, r3
   150dc:	ldr	r3, [r3]
   150e0:	cmp	r3, #0
   150e4:	bne	16028 <__assert_fail@plt+0x4a18>
   150e8:	add	sp, sp, #84	; 0x54
   150ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f0:	ldr	r2, [pc, #3420]	; 15e54 <__assert_fail@plt+0x4844>
   150f4:	ldr	r3, [pc, #3420]	; 15e58 <__assert_fail@plt+0x4848>
   150f8:	add	r2, pc, r2
   150fc:	add	r3, pc, r3
   15100:	strb	r5, [r2, #96]	; 0x60
   15104:	ldr	r1, [r3]
   15108:	b	14ed0 <__assert_fail@plt+0x38c0>
   1510c:	mov	ip, #0
   15110:	mov	r0, #1
   15114:	strb	ip, [r3, #68]	; 0x44
   15118:	strb	r0, [r1, #173]	; 0xad
   1511c:	ldr	r3, [pc, #3384]	; 15e5c <__assert_fail@plt+0x484c>
   15120:	add	r3, pc, r3
   15124:	str	r2, [r3, #240]	; 0xf0
   15128:	b	14e84 <__assert_fail@plt+0x3874>
   1512c:	cmp	r2, #0
   15130:	beq	16128 <__assert_fail@plt+0x4b18>
   15134:	ldr	r3, [pc, #3364]	; 15e60 <__assert_fail@plt+0x4850>
   15138:	ldr	r0, [pc, #3364]	; 15e64 <__assert_fail@plt+0x4854>
   1513c:	add	r3, pc, r3
   15140:	add	r0, pc, r0
   15144:	str	r0, [r3]
   15148:	ldr	ip, [pc, #3352]	; 15e68 <__assert_fail@plt+0x4858>
   1514c:	mov	r0, #1
   15150:	mov	r3, r0
   15154:	add	ip, pc, ip
   15158:	str	r0, [ip, #56]	; 0x38
   1515c:	str	r0, [ip, #48]	; 0x30
   15160:	strb	r0, [ip, #160]	; 0xa0
   15164:	b	14f20 <__assert_fail@plt+0x3910>
   15168:	mov	r2, #0
   1516c:	b	14fb8 <__assert_fail@plt+0x39a8>
   15170:	cmp	r5, #0
   15174:	ble	160a0 <__assert_fail@plt+0x4a90>
   15178:	ldr	r0, [r6]
   1517c:	mov	r1, r4
   15180:	bl	14d00 <__assert_fail@plt+0x36f0>
   15184:	cmp	r0, #0
   15188:	beq	150e8 <__assert_fail@plt+0x3ad8>
   1518c:	ldr	r0, [r4]
   15190:	ldr	r5, [r6]
   15194:	bl	1155c <fileno@plt>
   15198:	mov	r1, r0
   1519c:	mov	r0, r5
   151a0:	bl	139e4 <__assert_fail@plt+0x23d4>
   151a4:	str	r8, [r4, #24]
   151a8:	ldr	r3, [pc, #3260]	; 15e6c <__assert_fail@plt+0x485c>
   151ac:	ldm	r4, {r0, r1}
   151b0:	add	r3, pc, r3
   151b4:	ldr	r2, [r3]
   151b8:	subs	r2, r2, #1
   151bc:	beq	151e8 <__assert_fail@plt+0x3bd8>
   151c0:	add	r4, r4, #80	; 0x50
   151c4:	mov	r3, #0
   151c8:	subs	r2, r2, #1
   151cc:	str	r1, [r4, #-36]	; 0xffffffdc
   151d0:	str	r0, [r4, #-40]	; 0xffffffd8
   151d4:	add	r4, r4, #40	; 0x28
   151d8:	str	r3, [r4, #-72]	; 0xffffffb8
   151dc:	strb	r3, [r4, #-43]	; 0xffffffd5
   151e0:	str	r3, [r4, #-56]	; 0xffffffc8
   151e4:	bne	151c8 <__assert_fail@plt+0x3bb8>
   151e8:	ldr	r3, [pc, #3200]	; 15e70 <__assert_fail@plt+0x4860>
   151ec:	ldr	r4, [pc, #3200]	; 15e74 <__assert_fail@plt+0x4864>
   151f0:	add	r3, pc, r3
   151f4:	add	r4, pc, r4
   151f8:	ldrb	r1, [r3, #4]
   151fc:	ldr	r2, [r4, #236]	; 0xec
   15200:	cmp	r1, #0
   15204:	str	r2, [r4, #4]
   15208:	beq	1527c <__assert_fail@plt+0x3c6c>
   1520c:	ldr	r5, [r3]
   15210:	ldr	r3, [r4, #240]	; 0xf0
   15214:	ldr	r0, [r4, #148]	; 0x94
   15218:	ldr	r6, [r4, #196]	; 0xc4
   1521c:	mul	r5, r5, r3
   15220:	bl	11328 <free@plt>
   15224:	add	r0, r5, #1
   15228:	lsl	r0, r0, #2
   1522c:	bl	1a338 <close_stdout@@Base+0x3c28>
   15230:	mla	r6, r6, r5, r5
   15234:	str	r0, [r4, #148]	; 0x94
   15238:	ldr	r0, [r4, #168]	; 0xa8
   1523c:	bl	11328 <free@plt>
   15240:	lsl	r0, r5, #2
   15244:	bl	1a338 <close_stdout@@Base+0x3c28>
   15248:	str	r0, [r4, #168]	; 0xa8
   1524c:	ldr	r0, [r4, #16]
   15250:	bl	11328 <free@plt>
   15254:	ldrb	r3, [r4, #160]	; 0xa0
   15258:	ldr	r4, [pc, #3096]	; 15e78 <__assert_fail@plt+0x4868>
   1525c:	cmp	r3, #0
   15260:	lslne	r3, r6, #1
   15264:	add	r4, pc, r4
   15268:	moveq	r3, r6
   1526c:	mov	r0, r3
   15270:	str	r3, [r4, #12]
   15274:	bl	1a338 <close_stdout@@Base+0x3c28>
   15278:	str	r0, [r4, #16]
   1527c:	ldr	sl, [pc, #3064]	; 15e7c <__assert_fail@plt+0x486c>
   15280:	add	sl, pc, sl
   15284:	ldrd	r4, [sl, #88]	; 0x58
   15288:	cmp	r5, #0
   1528c:	cmpeq	r4, #1
   15290:	strd	r4, [sp, #32]
   15294:	bhi	15c4c <__assert_fail@plt+0x463c>
   15298:	ldr	r1, [pc, #3040]	; 15e80 <__assert_fail@plt+0x4870>
   1529c:	mov	r2, #1
   152a0:	mov	r3, #0
   152a4:	strd	r2, [sl, #136]	; 0x88
   152a8:	add	r1, pc, r1
   152ac:	ldrb	r6, [r1, #4]
   152b0:	ldr	r3, [pc, #3020]	; 15e84 <__assert_fail@plt+0x4874>
   152b4:	add	r3, pc, r3
   152b8:	ldrb	r0, [r3, #188]	; 0xbc
   152bc:	ldr	r1, [r3, #128]	; 0x80
   152c0:	cmp	r0, #0
   152c4:	moveq	ip, r0
   152c8:	beq	152f4 <__assert_fail@plt+0x3ce4>
   152cc:	ldrb	r2, [r3, #96]	; 0x60
   152d0:	cmp	r2, #0
   152d4:	beq	152e4 <__assert_fail@plt+0x3cd4>
   152d8:	ldrb	r2, [r3, #247]	; 0xf7
   152dc:	cmp	r2, #0
   152e0:	bne	16140 <__assert_fail@plt+0x4b30>
   152e4:	ldr	r3, [pc, #2972]	; 15e88 <__assert_fail@plt+0x4878>
   152e8:	add	r3, pc, r3
   152ec:	ldr	ip, [r3, #196]	; 0xc4
   152f0:	add	ip, r1, ip
   152f4:	ldr	r3, [pc, #2960]	; 15e8c <__assert_fail@plt+0x487c>
   152f8:	ldr	lr, [pc, #2960]	; 15e90 <__assert_fail@plt+0x4880>
   152fc:	add	r3, pc, r3
   15300:	add	lr, pc, lr
   15304:	ldr	r4, [r3]
   15308:	ldr	r7, [lr, #56]	; 0x38
   1530c:	cmp	r4, #1
   15310:	ldr	r3, [lr]
   15314:	add	r1, r1, r7
   15318:	ble	1618c <__assert_fail@plt+0x4b7c>
   1531c:	ldr	sl, [lr, #164]	; 0xa4
   15320:	mov	r2, #1
   15324:	ldrb	r5, [lr, #247]	; 0xf7
   15328:	ldrb	r9, [lr, #96]	; 0x60
   1532c:	ldr	r8, [lr, #196]	; 0xc4
   15330:	ldr	fp, [pc, #2908]	; 15e94 <__assert_fail@plt+0x4884>
   15334:	ldr	lr, [pc, #2908]	; 15e98 <__assert_fail@plt+0x4888>
   15338:	add	fp, pc, fp
   1533c:	add	lr, pc, lr
   15340:	str	lr, [sp, #24]
   15344:	ldr	lr, [pc, #2896]	; 15e9c <__assert_fail@plt+0x488c>
   15348:	add	lr, pc, lr
   1534c:	str	lr, [sp, #32]
   15350:	cmp	r6, #0
   15354:	streq	sl, [r3, #16]
   15358:	streq	fp, [r3, #12]
   1535c:	ldrne	lr, [sp, #24]
   15360:	strne	lr, [r3, #16]
   15364:	ldrne	lr, [sp, #32]
   15368:	strne	lr, [r3, #12]
   1536c:	cmp	r5, #0
   15370:	moveq	lr, r5
   15374:	beq	15390 <__assert_fail@plt+0x3d80>
   15378:	cmp	r9, #0
   1537c:	moveq	lr, #1
   15380:	beq	15390 <__assert_fail@plt+0x3d80>
   15384:	cmp	r2, #1
   15388:	movne	lr, #0
   1538c:	moveq	lr, #1
   15390:	cmp	r0, #0
   15394:	str	r1, [r3, #32]
   15398:	add	r2, r2, #1
   1539c:	addne	r1, r7, ip
   153a0:	addne	ip, r1, r8
   153a4:	moveq	ip, r0
   153a8:	moveq	r1, r0
   153ac:	cmp	r2, r4
   153b0:	strb	lr, [r3, #36]	; 0x24
   153b4:	add	r3, r3, #40	; 0x28
   153b8:	blt	15350 <__assert_fail@plt+0x3d40>
   153bc:	cmp	r4, #2
   153c0:	movlt	r4, #2
   153c4:	cmp	r6, #0
   153c8:	beq	15c2c <__assert_fail@plt+0x461c>
   153cc:	ldr	r2, [pc, #2764]	; 15ea0 <__assert_fail@plt+0x4890>
   153d0:	add	r2, pc, r2
   153d4:	ldrb	r2, [r2, #245]	; 0xf5
   153d8:	cmp	r2, #0
   153dc:	beq	15c2c <__assert_fail@plt+0x461c>
   153e0:	ldr	r0, [pc, #2748]	; 15ea4 <__assert_fail@plt+0x4894>
   153e4:	ldr	r2, [pc, #2748]	; 15ea8 <__assert_fail@plt+0x4898>
   153e8:	add	r0, pc, r0
   153ec:	str	r0, [r3, #16]
   153f0:	add	r2, pc, r2
   153f4:	str	r2, [r3, #12]
   153f8:	ldr	r0, [pc, #2732]	; 15eac <__assert_fail@plt+0x489c>
   153fc:	add	r0, pc, r0
   15400:	ldrb	r2, [r0, #247]	; 0xf7
   15404:	cmp	r2, #0
   15408:	beq	15428 <__assert_fail@plt+0x3e18>
   1540c:	ldrb	r2, [r0, #96]	; 0x60
   15410:	cmp	r2, #0
   15414:	moveq	r2, #1
   15418:	beq	15428 <__assert_fail@plt+0x3e18>
   1541c:	subs	r0, r4, #1
   15420:	rsbs	r2, r0, #0
   15424:	adcs	r2, r2, r0
   15428:	ldr	r0, [pc, #2688]	; 15eb0 <__assert_fail@plt+0x48a0>
   1542c:	ldr	ip, [pc, #2688]	; 15eb4 <__assert_fail@plt+0x48a4>
   15430:	add	r0, pc, r0
   15434:	ldr	r4, [pc, #2684]	; 15eb8 <__assert_fail@plt+0x48a8>
   15438:	ldr	r5, [pc, #2684]	; 15ebc <__assert_fail@plt+0x48ac>
   1543c:	add	ip, pc, ip
   15440:	ldr	r0, [r0, #72]	; 0x48
   15444:	add	r4, pc, r4
   15448:	add	r5, pc, r5
   1544c:	str	r4, [sp, #60]	; 0x3c
   15450:	str	r5, [sp, #56]	; 0x38
   15454:	ldr	r4, [pc, #2660]	; 15ec0 <__assert_fail@plt+0x48b0>
   15458:	ldr	r5, [pc, #2660]	; 15ec4 <__assert_fail@plt+0x48b4>
   1545c:	add	r4, pc, r4
   15460:	str	r0, [ip, #180]	; 0xb4
   15464:	add	r5, pc, r5
   15468:	str	r4, [sp, #68]	; 0x44
   1546c:	str	r5, [sp, #72]	; 0x48
   15470:	mov	r0, r6
   15474:	ldr	r4, [pc, #2636]	; 15ec8 <__assert_fail@plt+0x48b8>
   15478:	cmp	r0, #0
   1547c:	ldr	r5, [pc, #2632]	; 15ecc <__assert_fail@plt+0x48bc>
   15480:	add	r4, pc, r4
   15484:	strb	r2, [r3, #36]	; 0x24
   15488:	add	r5, pc, r5
   1548c:	str	r4, [sp, #64]	; 0x40
   15490:	str	r5, [sp, #76]	; 0x4c
   15494:	str	r1, [r3, #32]
   15498:	bne	158cc <__assert_fail@plt+0x42bc>
   1549c:	ldr	r5, [sp, #60]	; 0x3c
   154a0:	ldr	r4, [sp, #56]	; 0x38
   154a4:	ldr	r2, [r5]
   154a8:	ldr	r3, [r4]
   154ac:	cmp	r2, #0
   154b0:	beq	154d8 <__assert_fail@plt+0x3ec8>
   154b4:	ldr	ip, [r4, #240]	; 0xf0
   154b8:	ldr	r1, [r3, #8]
   154bc:	add	r3, r3, #40	; 0x28
   154c0:	cmp	r1, #0
   154c4:	movne	r1, r0
   154c8:	moveq	r1, ip
   154cc:	subs	r2, r2, #1
   154d0:	str	r1, [r3, #-12]
   154d4:	bne	154b8 <__assert_fail@plt+0x3ea8>
   154d8:	bl	1292c <__assert_fail@plt+0x131c>
   154dc:	cmp	r0, #0
   154e0:	beq	150e8 <__assert_fail@plt+0x3ad8>
   154e4:	ldr	r3, [pc, #2532]	; 15ed0 <__assert_fail@plt+0x48c0>
   154e8:	add	r3, pc, r3
   154ec:	ldrb	r3, [r3, #68]	; 0x44
   154f0:	cmp	r3, #0
   154f4:	ldrne	r3, [pc, #2520]	; 15ed4 <__assert_fail@plt+0x48c4>
   154f8:	movne	r2, #1
   154fc:	addne	r3, pc, r3
   15500:	strbne	r2, [r3, #144]	; 0x90
   15504:	ldr	r3, [pc, #2508]	; 15ed8 <__assert_fail@plt+0x48c8>
   15508:	mov	r1, #0
   1550c:	add	r3, pc, r3
   15510:	ldrb	r2, [r3, #244]	; 0xf4
   15514:	strb	r1, [r3, #152]	; 0x98
   15518:	ldr	r3, [r3, #240]	; 0xf0
   1551c:	cmp	r2, r1
   15520:	str	r3, [sp, #44]	; 0x2c
   15524:	lslne	r3, r3, #1
   15528:	strne	r3, [sp, #44]	; 0x2c
   1552c:	ldr	r5, [sp, #44]	; 0x2c
   15530:	cmp	r5, #0
   15534:	mov	r5, #0
   15538:	ble	157b0 <__assert_fail@plt+0x41a0>
   1553c:	ldr	r2, [pc, #2456]	; 15edc <__assert_fail@plt+0x48cc>
   15540:	ldr	r3, [pc, #2456]	; 15ee0 <__assert_fail@plt+0x48d0>
   15544:	ldr	r4, [pc, #2456]	; 15ee4 <__assert_fail@plt+0x48d4>
   15548:	add	r2, pc, r2
   1554c:	ldr	r6, [pc, #2452]	; 15ee8 <__assert_fail@plt+0x48d8>
   15550:	add	r3, pc, r3
   15554:	str	r2, [sp, #40]	; 0x28
   15558:	add	r4, pc, r4
   1555c:	str	r3, [sp, #48]	; 0x30
   15560:	add	r6, pc, r6
   15564:	ldr	r2, [pc, #2432]	; 15eec <__assert_fail@plt+0x48dc>
   15568:	ldr	r3, [pc, #2432]	; 15ef0 <__assert_fail@plt+0x48e0>
   1556c:	add	r2, pc, r2
   15570:	str	r2, [sp, #32]
   15574:	add	r3, pc, r3
   15578:	str	r3, [sp, #24]
   1557c:	bl	1292c <__assert_fail@plt+0x131c>
   15580:	cmp	r0, #0
   15584:	ble	15804 <__assert_fail@plt+0x41f4>
   15588:	ldr	r2, [sp, #48]	; 0x30
   1558c:	mov	r9, #0
   15590:	ldr	lr, [sp, #40]	; 0x28
   15594:	ldr	r3, [r2]
   15598:	mov	r2, #1
   1559c:	str	r9, [lr, #36]	; 0x24
   155a0:	cmp	r3, r9
   155a4:	str	r9, [lr, #44]	; 0x2c
   155a8:	str	r9, [lr, #52]	; 0x34
   155ac:	strb	r9, [lr, #152]	; 0x98
   155b0:	strb	r9, [lr, #200]	; 0xc8
   155b4:	strb	r2, [lr, #201]	; 0xc9
   155b8:	ldr	r8, [lr]
   155bc:	ble	15740 <__assert_fail@plt+0x4130>
   155c0:	ldr	sl, [pc, #2348]	; 15ef4 <__assert_fail@plt+0x48e4>
   155c4:	mov	fp, r2
   155c8:	mov	r7, r9
   155cc:	add	sl, pc, sl
   155d0:	b	15630 <__assert_fail@plt+0x4020>
   155d4:	ldr	r2, [r8, #8]
   155d8:	cmp	r2, #1
   155dc:	beq	15640 <__assert_fail@plt+0x4030>
   155e0:	ldrb	r2, [r4, #96]	; 0x60
   155e4:	cmp	r2, #0
   155e8:	beq	15600 <__assert_fail@plt+0x3ff0>
   155ec:	ldrb	r2, [r4, #201]	; 0xc9
   155f0:	cmp	r2, #0
   155f4:	beq	156d0 <__assert_fail@plt+0x40c0>
   155f8:	mov	r2, #1
   155fc:	strb	r2, [r4, #200]	; 0xc8
   15600:	ldrb	r2, [sl, #160]	; 0xa0
   15604:	add	fp, fp, #1
   15608:	add	r8, r8, #40	; 0x28
   1560c:	cmp	r2, #0
   15610:	ldrne	r2, [sl, #52]	; 0x34
   15614:	addne	r2, r2, #1
   15618:	strne	r2, [sl, #52]	; 0x34
   1561c:	ldr	r2, [pc, #2260]	; 15ef8 <__assert_fail@plt+0x48e8>
   15620:	add	r2, pc, r2
   15624:	ldr	r2, [r2]
   15628:	cmp	fp, r2
   1562c:	bgt	15ad8 <__assert_fail@plt+0x44c8>
   15630:	ldr	r2, [r8, #28]
   15634:	str	r7, [r4, #28]
   15638:	cmp	r2, #0
   1563c:	ble	155d4 <__assert_fail@plt+0x3fc4>
   15640:	ldr	ip, [r8, #32]
   15644:	mov	r0, r8
   15648:	ldr	r2, [r8, #12]
   1564c:	strb	r9, [r6, #189]	; 0xbd
   15650:	str	ip, [r6, #156]	; 0x9c
   15654:	blx	r2
   15658:	cmp	r0, #0
   1565c:	beq	156dc <__assert_fail@plt+0x40cc>
   15660:	ldr	r2, [r8, #28]
   15664:	ldr	r3, [sp, #32]
   15668:	sub	r2, r2, #1
   1566c:	str	r2, [r8, #28]
   15670:	cmp	r2, #0
   15674:	ldrb	ip, [r3, #152]	; 0x98
   15678:	orr	r5, r5, ip
   1567c:	ble	156e8 <__assert_fail@plt+0x40d8>
   15680:	ldr	r3, [sp, #24]
   15684:	ldrb	r2, [r3, #96]	; 0x60
   15688:	cmp	r2, #0
   1568c:	beq	15600 <__assert_fail@plt+0x3ff0>
   15690:	ldr	r2, [r8, #8]
   15694:	cmp	r2, #0
   15698:	beq	15600 <__assert_fail@plt+0x3ff0>
   1569c:	ldrb	r0, [r3, #201]	; 0xc9
   156a0:	cmp	r0, #0
   156a4:	movne	r2, #1
   156a8:	strbne	r2, [r3, #200]	; 0xc8
   156ac:	bne	15600 <__assert_fail@plt+0x3ff0>
   156b0:	cmp	r2, #3
   156b4:	beq	156d0 <__assert_fail@plt+0x40c0>
   156b8:	cmp	r2, #2
   156bc:	bne	15600 <__assert_fail@plt+0x3ff0>
   156c0:	ldr	r3, [sp, #24]
   156c4:	ldrb	r2, [r3, #189]	; 0xbd
   156c8:	cmp	r2, #0
   156cc:	beq	15600 <__assert_fail@plt+0x3ff0>
   156d0:	mov	r0, r8
   156d4:	bl	1449c <__assert_fail@plt+0x2e8c>
   156d8:	b	15600 <__assert_fail@plt+0x3ff0>
   156dc:	mov	r0, r8
   156e0:	bl	141ec <__assert_fail@plt+0x2bdc>
   156e4:	b	15660 <__assert_fail@plt+0x4050>
   156e8:	str	ip, [sp, #20]
   156ec:	bl	1292c <__assert_fail@plt+0x131c>
   156f0:	ldr	ip, [sp, #20]
   156f4:	cmp	r0, #0
   156f8:	bgt	15680 <__assert_fail@plt+0x4070>
   156fc:	cmp	ip, #0
   15700:	beq	15740 <__assert_fail@plt+0x4130>
   15704:	ldr	r3, [pc, #2176]	; 15f8c <__assert_fail@plt+0x497c>
   15708:	ldr	lr, [sp, #52]	; 0x34
   1570c:	ldr	r3, [lr, r3]
   15710:	ldr	r0, [r3]
   15714:	ldr	r2, [r0, #24]
   15718:	ldr	r3, [r0, #20]
   1571c:	cmp	r3, r2
   15720:	addcc	r2, r3, #1
   15724:	strcc	r2, [r0, #20]
   15728:	movcc	r2, #10
   1572c:	strbcc	r2, [r3]
   15730:	bcs	16194 <__assert_fail@plt+0x4b84>
   15734:	ldr	r2, [sp, #44]	; 0x2c
   15738:	sub	r2, r2, #1
   1573c:	str	r2, [sp, #44]	; 0x2c
   15740:	bl	1292c <__assert_fail@plt+0x131c>
   15744:	cmp	r0, #0
   15748:	ble	15ae8 <__assert_fail@plt+0x44d8>
   1574c:	ldr	r3, [pc, #1960]	; 15efc <__assert_fail@plt+0x48ec>
   15750:	add	r3, pc, r3
   15754:	ldrb	r3, [r3, #244]	; 0xf4
   15758:	cmp	r3, #0
   1575c:	beq	157a4 <__assert_fail@plt+0x4194>
   15760:	cmp	r5, #0
   15764:	beq	157a4 <__assert_fail@plt+0x4194>
   15768:	ldr	r0, [sp, #52]	; 0x34
   1576c:	ldr	r3, [pc, #2072]	; 15f8c <__assert_fail@plt+0x497c>
   15770:	ldr	r3, [r0, r3]
   15774:	ldr	r0, [r3]
   15778:	ldr	r2, [r0, #24]
   1577c:	ldr	r3, [r0, #20]
   15780:	cmp	r3, r2
   15784:	addcc	r2, r3, #1
   15788:	strcc	r2, [r0, #20]
   1578c:	movcc	r2, #10
   15790:	strbcc	r2, [r3]
   15794:	bcs	161ac <__assert_fail@plt+0x4b9c>
   15798:	ldr	r2, [sp, #44]	; 0x2c
   1579c:	sub	r2, r2, #1
   157a0:	str	r2, [sp, #44]	; 0x2c
   157a4:	ldr	r3, [sp, #44]	; 0x2c
   157a8:	cmp	r3, #0
   157ac:	bgt	1557c <__assert_fail@plt+0x3f6c>
   157b0:	ldr	r4, [sp, #44]	; 0x2c
   157b4:	cmp	r4, #0
   157b8:	bne	15804 <__assert_fail@plt+0x41f4>
   157bc:	ldr	r2, [pc, #1852]	; 15f00 <__assert_fail@plt+0x48f0>
   157c0:	ldr	r3, [pc, #1852]	; 15f04 <__assert_fail@plt+0x48f4>
   157c4:	add	r2, pc, r2
   157c8:	add	r3, pc, r3
   157cc:	ldr	r0, [r2]
   157d0:	ldr	r3, [r3]
   157d4:	cmp	r0, #0
   157d8:	ble	15804 <__assert_fail@plt+0x41f4>
   157dc:	mov	r2, #1
   157e0:	add	r0, r0, #1
   157e4:	mov	ip, r2
   157e8:	ldr	r1, [r3, #8]
   157ec:	add	r2, r2, #1
   157f0:	add	r3, r3, #40	; 0x28
   157f4:	cmp	r1, #0
   157f8:	strbeq	ip, [r3, #-3]
   157fc:	cmp	r2, r0
   15800:	bne	157e8 <__assert_fail@plt+0x41d8>
   15804:	ldr	r3, [pc, #1788]	; 15f08 <__assert_fail@plt+0x48f8>
   15808:	cmp	r5, #0
   1580c:	add	r3, pc, r3
   15810:	strb	r5, [r3, #152]	; 0x98
   15814:	beq	1582c <__assert_fail@plt+0x421c>
   15818:	ldr	r2, [pc, #1772]	; 15f0c <__assert_fail@plt+0x48fc>
   1581c:	add	r2, pc, r2
   15820:	ldrb	r2, [r2, #68]	; 0x44
   15824:	cmp	r2, #0
   15828:	bne	15bcc <__assert_fail@plt+0x45bc>
   1582c:	ldr	r3, [pc, #1756]	; 15f10 <__assert_fail@plt+0x4900>
   15830:	add	r3, pc, r3
   15834:	ldrb	r2, [r3, #173]	; 0xad
   15838:	cmp	r2, #0
   1583c:	beq	1588c <__assert_fail@plt+0x427c>
   15840:	ldrb	r3, [r3, #174]	; 0xae
   15844:	cmp	r3, #0
   15848:	beq	1588c <__assert_fail@plt+0x427c>
   1584c:	ldr	r3, [pc, #1848]	; 15f8c <__assert_fail@plt+0x497c>
   15850:	ldr	r5, [sp, #52]	; 0x34
   15854:	ldr	r4, [r5, r3]
   15858:	ldr	r0, [r4]
   1585c:	ldr	r3, [r0, #20]
   15860:	ldr	r2, [r0, #24]
   15864:	cmp	r3, r2
   15868:	addcc	r1, r3, #1
   1586c:	strcc	r1, [r0, #20]
   15870:	movcc	r2, #12
   15874:	strbcc	r2, [r3]
   15878:	bcs	161a0 <__assert_fail@plt+0x4b90>
   1587c:	ldr	r3, [pc, #1680]	; 15f14 <__assert_fail@plt+0x4904>
   15880:	mov	r2, #0
   15884:	add	r3, pc, r3
   15888:	strb	r2, [r3, #174]	; 0xae
   1588c:	ldr	ip, [pc, #1668]	; 15f18 <__assert_fail@plt+0x4908>
   15890:	ldr	r4, [pc, #1668]	; 15f1c <__assert_fail@plt+0x490c>
   15894:	add	ip, pc, ip
   15898:	add	r4, pc, r4
   1589c:	ldrd	r2, [ip, #136]	; 0x88
   158a0:	ldrd	r0, [r4, #56]	; 0x38
   158a4:	adds	r2, r2, #1
   158a8:	adc	r3, r3, #0
   158ac:	strd	r2, [ip, #136]	; 0x88
   158b0:	cmp	r3, r1
   158b4:	cmpeq	r2, r0
   158b8:	bhi	150e8 <__assert_fail@plt+0x3ad8>
   158bc:	bl	129b4 <__assert_fail@plt+0x13a4>
   158c0:	ldrb	r0, [r4, #4]
   158c4:	cmp	r0, #0
   158c8:	beq	1549c <__assert_fail@plt+0x3e8c>
   158cc:	ldr	r2, [sp, #68]	; 0x44
   158d0:	mov	r3, #0
   158d4:	ldrb	r4, [r2, #245]	; 0xf5
   158d8:	str	r3, [r2, #8]
   158dc:	cmp	r4, r3
   158e0:	beq	15b20 <__assert_fail@plt+0x4510>
   158e4:	ldr	r3, [pc, #1588]	; 15f20 <__assert_fail@plt+0x4910>
   158e8:	add	r3, pc, r3
   158ec:	ldr	r3, [r3]
   158f0:	str	r3, [sp, #44]	; 0x2c
   158f4:	ldr	r3, [sp, #44]	; 0x2c
   158f8:	ldr	r2, [sp, #72]	; 0x48
   158fc:	cmp	r3, #0
   15900:	ldr	r5, [r2]
   15904:	ble	1603c <__assert_fail@plt+0x4a2c>
   15908:	add	r0, r3, #1
   1590c:	mov	r2, r5
   15910:	mov	r3, #1
   15914:	mov	r1, #0
   15918:	add	r3, r3, #1
   1591c:	str	r1, [r2, #24]
   15920:	cmp	r3, r0
   15924:	add	r2, r2, #40	; 0x28
   15928:	bne	15918 <__assert_fail@plt+0x4308>
   1592c:	ldr	r9, [pc, #1520]	; 15f24 <__assert_fail@plt+0x4914>
   15930:	add	r9, pc, r9
   15934:	ldr	r6, [r9, #4]
   15938:	cmp	r6, #0
   1593c:	beq	16180 <__assert_fail@plt+0x4b70>
   15940:	ldr	fp, [pc, #1504]	; 15f28 <__assert_fail@plt+0x4918>
   15944:	mov	r6, #0
   15948:	ldr	r8, [pc, #1500]	; 15f2c <__assert_fail@plt+0x491c>
   1594c:	mov	sl, r6
   15950:	add	fp, pc, fp
   15954:	ldr	r7, [pc, #1492]	; 15f30 <__assert_fail@plt+0x4920>
   15958:	ldr	r3, [pc, #1492]	; 15f34 <__assert_fail@plt+0x4924>
   1595c:	add	r8, pc, r8
   15960:	ldr	r4, [pc, #1488]	; 15f38 <__assert_fail@plt+0x4928>
   15964:	add	r7, pc, r7
   15968:	add	r3, pc, r3
   1596c:	str	r3, [sp, #32]
   15970:	mov	r3, fp
   15974:	mov	fp, r8
   15978:	mov	r8, r3
   1597c:	add	r4, pc, r4
   15980:	mov	r1, #1
   15984:	str	r4, [sp, #40]	; 0x28
   15988:	str	r1, [sp, #24]
   1598c:	ldr	r4, [r9, #240]	; 0xf0
   15990:	str	sl, [r5, #20]
   15994:	cmp	r4, #0
   15998:	beq	15a28 <__assert_fail@plt+0x4418>
   1599c:	ldr	r0, [r9, #4]
   159a0:	cmp	r0, #0
   159a4:	bne	159c0 <__assert_fail@plt+0x43b0>
   159a8:	b	15a28 <__assert_fail@plt+0x4418>
   159ac:	subs	r4, r4, #1
   159b0:	beq	15a28 <__assert_fail@plt+0x4418>
   159b4:	ldr	r3, [r8, #4]
   159b8:	cmp	r3, #0
   159bc:	beq	15a28 <__assert_fail@plt+0x4418>
   159c0:	ldr	r3, [r5, #8]
   159c4:	cmp	r3, #0
   159c8:	bne	159ac <__assert_fail@plt+0x439c>
   159cc:	mov	r0, r5
   159d0:	str	r3, [r7, #28]
   159d4:	bl	1450c <__assert_fail@plt+0x2efc>
   159d8:	cmp	r0, #0
   159dc:	beq	15b14 <__assert_fail@plt+0x4504>
   159e0:	ldr	r3, [r5, #8]
   159e4:	cmp	r3, #0
   159e8:	bne	15b00 <__assert_fail@plt+0x44f0>
   159ec:	ldr	r2, [sp, #40]	; 0x28
   159f0:	ldr	ip, [r2, #8]
   159f4:	ldr	r1, [fp, #148]	; 0x94
   159f8:	lsl	r3, sl, #2
   159fc:	ldr	r0, [r5, #24]
   15a00:	subs	r4, r4, #1
   15a04:	ldr	r2, [fp, #168]	; 0xa8
   15a08:	add	r0, r0, #1
   15a0c:	str	r0, [r5, #24]
   15a10:	str	r6, [r1, sl, lsl #2]
   15a14:	mov	r6, ip
   15a18:	ldr	r1, [fp, #28]
   15a1c:	add	sl, sl, #1
   15a20:	str	r1, [r2, r3]
   15a24:	bne	159b4 <__assert_fail@plt+0x43a4>
   15a28:	ldr	r4, [sp, #24]
   15a2c:	add	r5, r5, #40	; 0x28
   15a30:	ldr	r1, [sp, #44]	; 0x2c
   15a34:	add	r4, r4, #1
   15a38:	str	r4, [sp, #24]
   15a3c:	cmp	r1, r4
   15a40:	blt	15b38 <__assert_fail@plt+0x4528>
   15a44:	ldr	r0, [pc, #1264]	; 15f3c <__assert_fail@plt+0x492c>
   15a48:	add	r0, pc, r0
   15a4c:	ldr	ip, [r0, #4]
   15a50:	cmp	ip, #0
   15a54:	bne	1598c <__assert_fail@plt+0x437c>
   15a58:	ldrb	r4, [r0, #245]	; 0xf5
   15a5c:	lsl	r2, sl, #2
   15a60:	ldr	r3, [sp, #64]	; 0x40
   15a64:	cmp	r4, #0
   15a68:	ldr	r1, [r3, #148]	; 0x94
   15a6c:	str	r6, [r1, r2]
   15a70:	bne	15b58 <__assert_fail@plt+0x4548>
   15a74:	ldr	r3, [pc, #1220]	; 15f40 <__assert_fail@plt+0x4930>
   15a78:	ldr	r5, [sp, #64]	; 0x40
   15a7c:	add	r3, pc, r3
   15a80:	ldr	r7, [r5]
   15a84:	ldr	r5, [r3]
   15a88:	subs	r2, r5, #1
   15a8c:	beq	15ab4 <__assert_fail@plt+0x44a4>
   15a90:	mov	r3, r7
   15a94:	ldr	r1, [r3, #24]
   15a98:	subs	r2, r2, #1
   15a9c:	add	r3, r3, #40	; 0x28
   15aa0:	str	r1, [r3, #-12]
   15aa4:	bne	15a94 <__assert_fail@plt+0x4484>
   15aa8:	add	r5, r5, r5, lsl #2
   15aac:	add	r7, r7, r5, lsl #3
   15ab0:	sub	r7, r7, #40	; 0x28
   15ab4:	cmp	r4, #0
   15ab8:	bne	15b4c <__assert_fail@plt+0x453c>
   15abc:	ldr	r3, [r7, #8]
   15ac0:	cmp	r3, #0
   15ac4:	strne	r4, [r7, #28]
   15ac8:	ldreq	r4, [sp, #76]	; 0x4c
   15acc:	ldreq	r3, [r4, #240]	; 0xf0
   15ad0:	streq	r3, [r7, #28]
   15ad4:	b	154d8 <__assert_fail@plt+0x3ec8>
   15ad8:	ldr	r3, [pc, #1124]	; 15f44 <__assert_fail@plt+0x4934>
   15adc:	add	r3, pc, r3
   15ae0:	ldrb	ip, [r3, #152]	; 0x98
   15ae4:	b	156fc <__assert_fail@plt+0x40ec>
   15ae8:	ldr	r3, [pc, #1112]	; 15f48 <__assert_fail@plt+0x4938>
   15aec:	add	r3, pc, r3
   15af0:	ldrb	r3, [r3, #68]	; 0x44
   15af4:	cmp	r3, #0
   15af8:	bne	1574c <__assert_fail@plt+0x413c>
   15afc:	b	157b0 <__assert_fail@plt+0x41a0>
   15b00:	ldr	r3, [sp, #32]
   15b04:	ldr	ip, [r3, #8]
   15b08:	cmp	ip, r6
   15b0c:	bne	159f4 <__assert_fail@plt+0x43e4>
   15b10:	b	159ac <__assert_fail@plt+0x439c>
   15b14:	mov	r0, r5
   15b18:	bl	141ec <__assert_fail@plt+0x2bdc>
   15b1c:	b	159e0 <__assert_fail@plt+0x43d0>
   15b20:	ldr	r3, [pc, #1060]	; 15f4c <__assert_fail@plt+0x493c>
   15b24:	add	r3, pc, r3
   15b28:	ldr	r3, [r3]
   15b2c:	sub	r3, r3, #1
   15b30:	str	r3, [sp, #44]	; 0x2c
   15b34:	b	158f4 <__assert_fail@plt+0x42e4>
   15b38:	ldr	r1, [pc, #1040]	; 15f50 <__assert_fail@plt+0x4940>
   15b3c:	lsl	r2, sl, #2
   15b40:	add	r1, pc, r1
   15b44:	ldrb	r4, [r1, #245]	; 0xf5
   15b48:	b	15a60 <__assert_fail@plt+0x4450>
   15b4c:	ldr	r3, [r7, #24]
   15b50:	str	r3, [r7, #28]
   15b54:	b	154d8 <__assert_fail@plt+0x3ec8>
   15b58:	ldr	r2, [pc, #1012]	; 15f54 <__assert_fail@plt+0x4944>
   15b5c:	ldr	r3, [sp, #64]	; 0x40
   15b60:	add	r2, pc, r2
   15b64:	ldr	r5, [r2]
   15b68:	ldr	r7, [r3]
   15b6c:	cmp	r5, #0
   15b70:	ble	15a88 <__assert_fail@plt+0x4478>
   15b74:	mov	r1, r5
   15b78:	mov	r0, sl
   15b7c:	bl	1be04 <close_stdout@@Base+0x56f4>
   15b80:	mov	r1, r5
   15b84:	mov	r6, r0
   15b88:	mov	r0, sl
   15b8c:	bl	1c024 <close_stdout@@Base+0x5914>
   15b90:	add	lr, r5, #1
   15b94:	mov	r2, r7
   15b98:	mov	r0, #0
   15b9c:	mov	r3, #1
   15ba0:	cmp	r1, r3
   15ba4:	add	r3, r3, #1
   15ba8:	addge	ip, r6, #1
   15bac:	str	r0, [r2, #20]
   15bb0:	movlt	ip, r6
   15bb4:	cmp	r3, lr
   15bb8:	str	ip, [r2, #24]
   15bbc:	add	r0, r0, ip
   15bc0:	add	r2, r2, #40	; 0x28
   15bc4:	bne	15ba0 <__assert_fail@plt+0x4590>
   15bc8:	b	15a88 <__assert_fail@plt+0x4478>
   15bcc:	ldrb	r3, [r3, #252]	; 0xfc
   15bd0:	cmp	r3, #0
   15bd4:	bne	15fc8 <__assert_fail@plt+0x49b8>
   15bd8:	ldr	r2, [sp, #44]	; 0x2c
   15bdc:	adds	r5, r2, #5
   15be0:	beq	1588c <__assert_fail@plt+0x427c>
   15be4:	ldr	r3, [pc, #928]	; 15f8c <__assert_fail@plt+0x497c>
   15be8:	mov	r6, #10
   15bec:	ldr	r0, [sp, #52]	; 0x34
   15bf0:	ldr	r4, [r0, r3]
   15bf4:	b	15c00 <__assert_fail@plt+0x45f0>
   15bf8:	subs	r5, r5, #1
   15bfc:	beq	1588c <__assert_fail@plt+0x427c>
   15c00:	ldr	r0, [r4]
   15c04:	ldr	r3, [r0, #20]
   15c08:	ldr	r2, [r0, #24]
   15c0c:	cmp	r3, r2
   15c10:	addcc	r2, r3, #1
   15c14:	strcc	r2, [r0, #20]
   15c18:	strbcc	r6, [r3]
   15c1c:	bcc	15bf8 <__assert_fail@plt+0x45e8>
   15c20:	mov	r1, #10
   15c24:	bl	115a4 <__overflow@plt>
   15c28:	b	15bf8 <__assert_fail@plt+0x45e8>
   15c2c:	ldr	r2, [pc, #804]	; 15f58 <__assert_fail@plt+0x4948>
   15c30:	ldr	r0, [pc, #804]	; 15f5c <__assert_fail@plt+0x494c>
   15c34:	add	r2, pc, r2
   15c38:	add	r0, pc, r0
   15c3c:	str	r0, [r3, #12]
   15c40:	ldr	r2, [r2, #164]	; 0xa4
   15c44:	str	r2, [r3, #16]
   15c48:	b	153f8 <__assert_fail@plt+0x3de8>
   15c4c:	mov	r4, #1
   15c50:	mov	r5, #0
   15c54:	strd	r4, [sp, #24]
   15c58:	ldr	r4, [pc, #768]	; 15f60 <__assert_fail@plt+0x4950>
   15c5c:	ldr	r5, [pc, #768]	; 15f64 <__assert_fail@plt+0x4954>
   15c60:	ldr	r9, [pc, #768]	; 15f68 <__assert_fail@plt+0x4958>
   15c64:	add	r4, pc, r4
   15c68:	ldr	r8, [pc, #764]	; 15f6c <__assert_fail@plt+0x495c>
   15c6c:	add	r5, pc, r5
   15c70:	ldr	r2, [pc, #760]	; 15f70 <__assert_fail@plt+0x4960>
   15c74:	add	r9, pc, r9
   15c78:	add	r8, pc, r8
   15c7c:	mov	r7, r4
   15c80:	add	r2, pc, r2
   15c84:	str	r2, [sp, #40]	; 0x28
   15c88:	ldr	r3, [sl, #240]	; 0xf0
   15c8c:	cmp	r3, #1
   15c90:	ble	15dec <__assert_fail@plt+0x47dc>
   15c94:	ldr	r1, [r5]
   15c98:	mov	fp, #1
   15c9c:	ldr	r6, [sl]
   15ca0:	cmp	r1, #0
   15ca4:	ble	15ce4 <__assert_fail@plt+0x46d4>
   15ca8:	mov	r4, #1
   15cac:	b	15cc4 <__assert_fail@plt+0x46b4>
   15cb0:	ldr	r1, [r7]
   15cb4:	add	r4, r4, #1
   15cb8:	add	r6, r6, #40	; 0x28
   15cbc:	cmp	r4, r1
   15cc0:	bgt	15ce0 <__assert_fail@plt+0x46d0>
   15cc4:	ldr	r3, [r6, #8]
   15cc8:	cmp	r3, #0
   15ccc:	bne	15cb0 <__assert_fail@plt+0x46a0>
   15cd0:	mov	r0, r6
   15cd4:	mov	r1, r4
   15cd8:	bl	13f98 <__assert_fail@plt+0x2988>
   15cdc:	b	15cb0 <__assert_fail@plt+0x46a0>
   15ce0:	ldr	r6, [r9]
   15ce4:	ldr	r3, [r8, #240]	; 0xf0
   15ce8:	add	fp, fp, #1
   15cec:	cmp	fp, r3
   15cf0:	blt	15ca0 <__assert_fail@plt+0x4690>
   15cf4:	ldr	r3, [pc, #632]	; 15f74 <__assert_fail@plt+0x4964>
   15cf8:	cmp	r1, #0
   15cfc:	mov	fp, #1
   15d00:	add	r3, pc, r3
   15d04:	strb	fp, [r3, #172]	; 0xac
   15d08:	ble	15d48 <__assert_fail@plt+0x4738>
   15d0c:	ldr	r4, [pc, #612]	; 15f78 <__assert_fail@plt+0x4968>
   15d10:	add	r4, pc, r4
   15d14:	b	15d2c <__assert_fail@plt+0x471c>
   15d18:	ldr	r1, [r4]
   15d1c:	add	fp, fp, #1
   15d20:	add	r6, r6, #40	; 0x28
   15d24:	cmp	fp, r1
   15d28:	bgt	15d48 <__assert_fail@plt+0x4738>
   15d2c:	ldr	r3, [r6, #8]
   15d30:	cmp	r3, #0
   15d34:	bne	15d18 <__assert_fail@plt+0x4708>
   15d38:	mov	r0, r6
   15d3c:	mov	r1, fp
   15d40:	bl	13f98 <__assert_fail@plt+0x2988>
   15d44:	b	15d18 <__assert_fail@plt+0x4708>
   15d48:	ldr	r3, [pc, #556]	; 15f7c <__assert_fail@plt+0x496c>
   15d4c:	add	r3, pc, r3
   15d50:	ldrb	r6, [r3, #4]
   15d54:	cmp	r6, #0
   15d58:	beq	15d98 <__assert_fail@plt+0x4788>
   15d5c:	ldr	r3, [pc, #540]	; 15f80 <__assert_fail@plt+0x4970>
   15d60:	cmp	r1, #0
   15d64:	add	r3, pc, r3
   15d68:	ldr	r3, [r3]
   15d6c:	ble	15d98 <__assert_fail@plt+0x4788>
   15d70:	add	ip, r1, #1
   15d74:	mov	lr, #2
   15d78:	mov	r1, #1
   15d7c:	ldr	r2, [r3, #8]
   15d80:	add	r1, r1, #1
   15d84:	add	r3, r3, #40	; 0x28
   15d88:	cmp	r2, #3
   15d8c:	strne	lr, [r3, #-32]	; 0xffffffe0
   15d90:	cmp	r1, ip
   15d94:	bne	15d7c <__assert_fail@plt+0x476c>
   15d98:	ldr	r4, [pc, #484]	; 15f84 <__assert_fail@plt+0x4974>
   15d9c:	bl	129b4 <__assert_fail@plt+0x13a4>
   15da0:	mov	fp, #0
   15da4:	add	r4, pc, r4
   15da8:	ldr	r1, [r4, #4]
   15dac:	strb	fp, [r4, #172]	; 0xac
   15db0:	cmp	r1, fp
   15db4:	ble	1604c <__assert_fail@plt+0x4a3c>
   15db8:	ldrd	r0, [sp, #24]
   15dbc:	ldrd	r2, [sp, #32]
   15dc0:	adds	r0, r0, #1
   15dc4:	adc	r1, r1, #0
   15dc8:	strd	r0, [sp, #24]
   15dcc:	cmp	r1, r3
   15dd0:	cmpeq	r0, r2
   15dd4:	bne	15c88 <__assert_fail@plt+0x4678>
   15dd8:	ldr	r1, [pc, #424]	; 15f88 <__assert_fail@plt+0x4978>
   15ddc:	add	r1, pc, r1
   15de0:	ldrd	r2, [r1, #88]	; 0x58
   15de4:	strd	r2, [r1, #136]	; 0x88
   15de8:	b	152b0 <__assert_fail@plt+0x3ca0>
   15dec:	ldr	r3, [sp, #40]	; 0x28
   15df0:	ldr	r6, [sl]
   15df4:	ldr	r1, [r3]
   15df8:	b	15cf4 <__assert_fail@plt+0x46e4>
   15dfc:	andeq	sl, r1, r4, lsr r3
   15e00:	andeq	sl, r1, ip, ror #7
   15e04:	andeq	sl, r1, r4, lsr #3
   15e08:			; <UNDEFINED> instruction: 0x0001a3b0
   15e0c:	andeq	sl, r1, r8, lsl #7
   15e10:			; <UNDEFINED> instruction: 0x0001a2b0
   15e14:	andeq	sl, r1, r4, lsr #5
   15e18:	andeq	sl, r1, r0, asr r3
   15e1c:	andeq	sl, r1, ip, lsr r3
   15e20:	andeq	sl, r1, r0, lsl r3
   15e24:	strdeq	sl, [r1], -r8
   15e28:	andeq	sl, r1, ip, ror #5
   15e2c:	andeq	sl, r1, r8, lsl r2
   15e30:	muleq	r1, r4, r2
   15e34:			; <UNDEFINED> instruction: 0x0001a1b4
   15e38:	andeq	sl, r1, r0, ror r2
   15e3c:	andeq	sl, r1, r4, asr #4
   15e40:	andeq	sl, r1, r4, ror r1
   15e44:	andeq	sl, r1, r0, lsl r2
   15e48:	andeq	sl, r1, ip, asr #2
   15e4c:	ldrdeq	sl, [r1], -r8
   15e50:	andeq	sl, r1, r0, lsr #1
   15e54:	andeq	sl, r1, r0, asr #2
   15e58:	andeq	sl, r1, ip, ror r0
   15e5c:	andeq	sl, r1, r8, lsl r1
   15e60:	andeq	sl, r1, r8, lsr #1
   15e64:	andeq	r7, r0, r0, ror #19
   15e68:	andeq	sl, r1, r4, ror #1
   15e6c:	andeq	r9, r1, r8, asr #31
   15e70:	andeq	r9, r1, r8, lsl #31
   15e74:	andeq	sl, r1, r4, asr #32
   15e78:	ldrdeq	r9, [r1], -r4
   15e7c:			; <UNDEFINED> instruction: 0x00019fb8
   15e80:	ldrdeq	r9, [r1], -r0
   15e84:	andeq	r9, r1, r4, lsl #31
   15e88:	andeq	r9, r1, r0, asr pc
   15e8c:	andeq	r9, r1, ip, ror lr
   15e90:	andeq	r9, r1, r8, lsr pc
   15e94:			; <UNDEFINED> instruction: 0xfffff1cc
   15e98:			; <UNDEFINED> instruction: 0xffffd730
   15e9c:			; <UNDEFINED> instruction: 0xffffea10
   15ea0:	andeq	r9, r1, r8, ror #28
   15ea4:			; <UNDEFINED> instruction: 0xffffd684
   15ea8:			; <UNDEFINED> instruction: 0xffffe968
   15eac:	andeq	r9, r1, ip, lsr lr
   15eb0:	andeq	r9, r1, r8, asr #26
   15eb4:	strdeq	r9, [r1], -ip
   15eb8:	andeq	r9, r1, r4, lsr sp
   15ebc:	strdeq	r9, [r1], -r0
   15ec0:	ldrdeq	r9, [r1], -ip
   15ec4:	ldrdeq	r9, [r1], -r4
   15ec8:			; <UNDEFINED> instruction: 0x00019db8
   15ecc:			; <UNDEFINED> instruction: 0x00019db0
   15ed0:	muleq	r1, r0, ip
   15ed4:	andeq	r9, r1, ip, lsr sp
   15ed8:	andeq	r9, r1, ip, lsr #26
   15edc:	strdeq	r9, [r1], -r0
   15ee0:	andeq	r9, r1, r8, lsr #24
   15ee4:	andeq	r9, r1, r0, ror #25
   15ee8:	ldrdeq	r9, [r1], -r8
   15eec:	andeq	r9, r1, ip, asr #25
   15ef0:	andeq	r9, r1, r4, asr #25
   15ef4:	andeq	r9, r1, ip, ror #24
   15ef8:	andeq	r9, r1, r8, asr fp
   15efc:	andeq	r9, r1, r8, ror #21
   15f00:			; <UNDEFINED> instruction: 0x000199b4
   15f04:	andeq	r9, r1, r0, ror sl
   15f08:	andeq	r9, r1, ip, lsr #20
   15f0c:	andeq	r9, r1, ip, asr r9
   15f10:	andeq	r9, r1, r8, lsl #20
   15f14:			; <UNDEFINED> instruction: 0x000199b4
   15f18:	andeq	r9, r1, r4, lsr #19
   15f1c:	andeq	r9, r1, r0, ror #17
   15f20:	muleq	r1, r0, r8
   15f24:	andeq	r9, r1, r8, lsl #18
   15f28:	andeq	r9, r1, r8, ror #17
   15f2c:	ldrdeq	r9, [r1], -ip
   15f30:	ldrdeq	r9, [r1], -r4
   15f34:	ldrdeq	r9, [r1], -r0
   15f38:			; <UNDEFINED> instruction: 0x000198bc
   15f3c:	strdeq	r9, [r1], -r0
   15f40:	strdeq	r9, [r1], -ip
   15f44:	andeq	r9, r1, ip, asr r7
   15f48:	andeq	r9, r1, ip, lsl #13
   15f4c:	andeq	r9, r1, r4, asr r6
   15f50:	strdeq	r9, [r1], -r8
   15f54:	andeq	r9, r1, r8, lsl r6
   15f58:	andeq	r9, r1, r4, lsl #12
   15f5c:			; <UNDEFINED> instruction: 0xffffe8cc
   15f60:	andeq	r9, r1, r4, lsl r5
   15f64:	andeq	r9, r1, ip, lsl #10
   15f68:	andeq	r9, r1, r4, asr #11
   15f6c:	andeq	r9, r1, r0, asr #11
   15f70:	strdeq	r9, [r1], -r8
   15f74:	andeq	r9, r1, r8, lsr r5
   15f78:	andeq	r9, r1, r8, ror #8
   15f7c:	andeq	r9, r1, ip, lsr #8
   15f80:	ldrdeq	r9, [r1], -r4
   15f84:	muleq	r1, r4, r4
   15f88:	andeq	r9, r1, ip, asr r4
   15f8c:	andeq	r0, r0, r8, asr r1
   15f90:	andeq	r9, r1, r8, lsr #4
   15f94:	andeq	r9, r1, r4, ror #2
   15f98:	ldrdeq	r6, [r0], -r4
   15f9c:	andeq	r6, r0, r0, ror #21
   15fa0:	andeq	r9, r1, r4, ror #1
   15fa4:	andeq	r6, r0, r4, ror #20
   15fa8:	andeq	r0, r0, r4, asr r1
   15fac:	andeq	r6, r0, r4, lsr #20
   15fb0:	ldrdeq	r9, [r1], -ip
   15fb4:	andeq	r6, r0, ip, ror #19
   15fb8:	strheq	r9, [r1], -r4
   15fbc:	ldrdeq	r6, [r0], -r4
   15fc0:	andeq	r6, r0, r4, asr #19
   15fc4:			; <UNDEFINED> instruction: 0x00018fb8
   15fc8:	ldr	r3, [pc, #-68]	; 15f8c <__assert_fail@plt+0x497c>
   15fcc:	ldr	r5, [sp, #52]	; 0x34
   15fd0:	ldr	r4, [r5, r3]
   15fd4:	ldr	r0, [r4]
   15fd8:	ldr	r3, [r0, #20]
   15fdc:	ldr	r2, [r0, #24]
   15fe0:	cmp	r3, r2
   15fe4:	addcc	r1, r3, #1
   15fe8:	strcc	r1, [r0, #20]
   15fec:	movcc	r2, #12
   15ff0:	strbcc	r2, [r3]
   15ff4:	bcc	1588c <__assert_fail@plt+0x427c>
   15ff8:	mov	r1, #12
   15ffc:	bl	115a4 <__overflow@plt>
   16000:	b	1588c <__assert_fail@plt+0x427c>
   16004:	ldr	r3, [pc, #-124]	; 15f90 <__assert_fail@plt+0x4980>
   16008:	mov	ip, #0
   1600c:	ldr	r0, [pc, #-128]	; 15f94 <__assert_fail@plt+0x4984>
   16010:	add	r3, pc, r3
   16014:	add	r0, pc, r0
   16018:	ldrb	r2, [r3, #246]	; 0xf6
   1601c:	strb	ip, [r0, #4]
   16020:	ldr	r3, [r3, #56]	; 0x38
   16024:	b	14f34 <__assert_fail@plt+0x3924>
   16028:	ldr	r0, [pc, #-152]	; 15f98 <__assert_fail@plt+0x4988>
   1602c:	mvn	r1, #0
   16030:	add	r0, pc, r0
   16034:	bl	139e4 <__assert_fail@plt+0x23d4>
   16038:	b	151e8 <__assert_fail@plt+0x3bd8>
   1603c:	mov	r6, #0
   16040:	mov	r2, r6
   16044:	mov	sl, r6
   16048:	b	15a60 <__assert_fail@plt+0x4450>
   1604c:	ldr	r1, [pc, #-184]	; 15f9c <__assert_fail@plt+0x498c>
   16050:	mov	r2, #5
   16054:	mov	r0, fp
   16058:	mov	r7, r4
   1605c:	add	r1, pc, r1
   16060:	bl	11388 <dcgettext@plt>
   16064:	ldrd	r4, [sp, #32]
   16068:	mov	r1, fp
   1606c:	strd	r4, [sp]
   16070:	ldrd	r4, [sp, #24]
   16074:	strd	r4, [sp, #8]
   16078:	mov	r2, r0
   1607c:	mov	r0, fp
   16080:	bl	11430 <error@plt>
   16084:	ldr	r3, [r7, #4]
   16088:	cmp	r3, #0
   1608c:	ble	150e8 <__assert_fail@plt+0x3ad8>
   16090:	ldr	r3, [pc, #-248]	; 15fa0 <__assert_fail@plt+0x4990>
   16094:	add	r3, pc, r3
   16098:	ldrb	r6, [r3, #4]
   1609c:	b	15dd8 <__assert_fail@plt+0x47c8>
   160a0:	ldr	r1, [pc, #-260]	; 15fa4 <__assert_fail@plt+0x4994>
   160a4:	mov	r2, #5
   160a8:	mov	r0, r8
   160ac:	add	r1, pc, r1
   160b0:	bl	11388 <dcgettext@plt>
   160b4:	ldr	r5, [sp, #52]	; 0x34
   160b8:	ldr	r2, [pc, #-280]	; 15fa8 <__assert_fail@plt+0x4998>
   160bc:	mvn	r1, #0
   160c0:	ldr	ip, [r7, #236]	; 0xec
   160c4:	mov	r3, #1
   160c8:	add	ip, ip, r3
   160cc:	str	r0, [r4, #4]
   160d0:	ldr	r2, [r5, r2]
   160d4:	ldr	r0, [pc, #-304]	; 15fac <__assert_fail@plt+0x499c>
   160d8:	str	r8, [r4, #8]
   160dc:	ldr	r2, [r2]
   160e0:	add	r0, pc, r0
   160e4:	strb	r8, [r4, #37]	; 0x25
   160e8:	str	ip, [r7, #236]	; 0xec
   160ec:	str	r2, [r4]
   160f0:	strb	r3, [r7, #232]	; 0xe8
   160f4:	bl	139e4 <__assert_fail@plt+0x23d4>
   160f8:	str	r8, [r4, #24]
   160fc:	b	151a8 <__assert_fail@plt+0x3b98>
   16100:	ldr	r0, [pc, #-344]	; 15fb0 <__assert_fail@plt+0x49a0>
   16104:	ldr	r3, [r3, #56]	; 0x38
   16108:	add	r0, pc, r0
   1610c:	ldr	ip, [r0]
   16110:	ldrb	ip, [ip]
   16114:	cmp	ip, #9
   16118:	ldreq	ip, [pc, #-364]	; 15fb4 <__assert_fail@plt+0x49a4>
   1611c:	addeq	ip, pc, ip
   16120:	streq	ip, [r0]
   16124:	b	14f20 <__assert_fail@plt+0x3910>
   16128:	ldr	r3, [pc, #-376]	; 15fb8 <__assert_fail@plt+0x49a8>
   1612c:	ldr	r0, [pc, #-376]	; 15fbc <__assert_fail@plt+0x49ac>
   16130:	add	r3, pc, r3
   16134:	add	r0, pc, r0
   16138:	str	r0, [r3]
   1613c:	b	15148 <__assert_fail@plt+0x3b38>
   16140:	ldr	ip, [r3, #196]	; 0xc4
   16144:	ldr	r3, [r3, #184]	; 0xb8
   16148:	add	ip, r1, ip
   1614c:	add	ip, ip, r3
   16150:	b	152f4 <__assert_fail@plt+0x3ce4>
   16154:	ldr	r1, [pc, #-412]	; 15fc0 <__assert_fail@plt+0x49b0>
   16158:	mov	r2, #5
   1615c:	mov	r0, #0
   16160:	add	r1, pc, r1
   16164:	bl	11388 <dcgettext@plt>
   16168:	mov	r1, #0
   1616c:	mov	r2, r0
   16170:	mov	r0, #1
   16174:	bl	11430 <error@plt>
   16178:	ldrb	r8, [r7, #247]	; 0xf7
   1617c:	b	14fe8 <__assert_fail@plt+0x39d8>
   16180:	mov	r2, r6
   16184:	mov	sl, r6
   16188:	b	15a60 <__assert_fail@plt+0x4450>
   1618c:	mov	r4, #1
   16190:	b	153c4 <__assert_fail@plt+0x3db4>
   16194:	mov	r1, #10
   16198:	bl	115a4 <__overflow@plt>
   1619c:	b	15734 <__assert_fail@plt+0x4124>
   161a0:	mov	r1, #12
   161a4:	bl	115a4 <__overflow@plt>
   161a8:	b	1587c <__assert_fail@plt+0x426c>
   161ac:	mov	r1, #10
   161b0:	bl	115a4 <__overflow@plt>
   161b4:	b	15798 <__assert_fail@plt+0x4188>
   161b8:	bl	1a54c <close_stdout@@Base+0x3e3c>
   161bc:	ldr	r3, [pc, #-512]	; 15fc4 <__assert_fail@plt+0x49b4>
   161c0:	ldr	r1, [pc, r3]
   161c4:	b	14ed0 <__assert_fail@plt+0x38c0>
   161c8:	push	{r4, r5, r6, lr}
   161cc:	subs	r4, r0, #0
   161d0:	ldr	r5, [pc, #764]	; 164d4 <__assert_fail@plt+0x4ec4>
   161d4:	add	r5, pc, r5
   161d8:	beq	16220 <__assert_fail@plt+0x4c10>
   161dc:	ldr	r3, [pc, #756]	; 164d8 <__assert_fail@plt+0x4ec8>
   161e0:	mov	r2, #5
   161e4:	ldr	r1, [pc, #752]	; 164dc <__assert_fail@plt+0x4ecc>
   161e8:	mov	r0, #0
   161ec:	ldr	r3, [r5, r3]
   161f0:	add	r1, pc, r1
   161f4:	ldr	r6, [r3]
   161f8:	bl	11388 <dcgettext@plt>
   161fc:	ldr	r3, [pc, #732]	; 164e0 <__assert_fail@plt+0x4ed0>
   16200:	mov	r1, #1
   16204:	ldr	r3, [r5, r3]
   16208:	ldr	r3, [r3]
   1620c:	mov	r2, r0
   16210:	mov	r0, r6
   16214:	bl	11568 <__fprintf_chk@plt>
   16218:	mov	r0, r4
   1621c:	bl	114cc <exit@plt>
   16220:	ldr	r1, [pc, #700]	; 164e4 <__assert_fail@plt+0x4ed4>
   16224:	mov	r2, #5
   16228:	add	r1, pc, r1
   1622c:	bl	11388 <dcgettext@plt>
   16230:	ldr	r3, [pc, #680]	; 164e0 <__assert_fail@plt+0x4ed0>
   16234:	ldr	r6, [r5, r3]
   16238:	ldr	r2, [r6]
   1623c:	mov	r1, r0
   16240:	mov	r0, #1
   16244:	bl	11550 <__printf_chk@plt>
   16248:	ldr	r1, [pc, #664]	; 164e8 <__assert_fail@plt+0x4ed8>
   1624c:	mov	r2, #5
   16250:	mov	r0, r4
   16254:	add	r1, pc, r1
   16258:	bl	11388 <dcgettext@plt>
   1625c:	ldr	r3, [pc, #648]	; 164ec <__assert_fail@plt+0x4edc>
   16260:	ldr	r5, [r5, r3]
   16264:	ldr	r1, [r5]
   16268:	bl	112bc <fputs_unlocked@plt>
   1626c:	ldr	r1, [pc, #636]	; 164f0 <__assert_fail@plt+0x4ee0>
   16270:	mov	r2, #5
   16274:	mov	r0, r4
   16278:	add	r1, pc, r1
   1627c:	bl	11388 <dcgettext@plt>
   16280:	ldr	r1, [r5]
   16284:	bl	112bc <fputs_unlocked@plt>
   16288:	ldr	r1, [pc, #612]	; 164f4 <__assert_fail@plt+0x4ee4>
   1628c:	mov	r2, #5
   16290:	mov	r0, r4
   16294:	add	r1, pc, r1
   16298:	bl	11388 <dcgettext@plt>
   1629c:	ldr	r1, [r5]
   162a0:	bl	112bc <fputs_unlocked@plt>
   162a4:	ldr	r1, [pc, #588]	; 164f8 <__assert_fail@plt+0x4ee8>
   162a8:	mov	r2, #5
   162ac:	mov	r0, r4
   162b0:	add	r1, pc, r1
   162b4:	bl	11388 <dcgettext@plt>
   162b8:	ldr	r1, [r5]
   162bc:	bl	112bc <fputs_unlocked@plt>
   162c0:	ldr	r1, [pc, #564]	; 164fc <__assert_fail@plt+0x4eec>
   162c4:	mov	r2, #5
   162c8:	mov	r0, r4
   162cc:	add	r1, pc, r1
   162d0:	bl	11388 <dcgettext@plt>
   162d4:	ldr	r1, [r5]
   162d8:	bl	112bc <fputs_unlocked@plt>
   162dc:	ldr	r1, [pc, #540]	; 16500 <__assert_fail@plt+0x4ef0>
   162e0:	mov	r2, #5
   162e4:	mov	r0, r4
   162e8:	add	r1, pc, r1
   162ec:	bl	11388 <dcgettext@plt>
   162f0:	ldr	r1, [r5]
   162f4:	bl	112bc <fputs_unlocked@plt>
   162f8:	ldr	r1, [pc, #516]	; 16504 <__assert_fail@plt+0x4ef4>
   162fc:	mov	r2, #5
   16300:	mov	r0, r4
   16304:	add	r1, pc, r1
   16308:	bl	11388 <dcgettext@plt>
   1630c:	ldr	r1, [r5]
   16310:	bl	112bc <fputs_unlocked@plt>
   16314:	ldr	r1, [pc, #492]	; 16508 <__assert_fail@plt+0x4ef8>
   16318:	mov	r2, #5
   1631c:	mov	r0, r4
   16320:	add	r1, pc, r1
   16324:	bl	11388 <dcgettext@plt>
   16328:	ldr	r1, [r5]
   1632c:	bl	112bc <fputs_unlocked@plt>
   16330:	ldr	r1, [pc, #468]	; 1650c <__assert_fail@plt+0x4efc>
   16334:	mov	r2, #5
   16338:	mov	r0, r4
   1633c:	add	r1, pc, r1
   16340:	bl	11388 <dcgettext@plt>
   16344:	ldr	r1, [r5]
   16348:	bl	112bc <fputs_unlocked@plt>
   1634c:	ldr	r1, [pc, #444]	; 16510 <__assert_fail@plt+0x4f00>
   16350:	mov	r2, #5
   16354:	mov	r0, r4
   16358:	add	r1, pc, r1
   1635c:	bl	11388 <dcgettext@plt>
   16360:	ldr	r1, [r5]
   16364:	bl	112bc <fputs_unlocked@plt>
   16368:	ldr	r1, [pc, #420]	; 16514 <__assert_fail@plt+0x4f04>
   1636c:	mov	r2, #5
   16370:	mov	r0, r4
   16374:	add	r1, pc, r1
   16378:	bl	11388 <dcgettext@plt>
   1637c:	ldr	r1, [r5]
   16380:	bl	112bc <fputs_unlocked@plt>
   16384:	ldr	r1, [pc, #396]	; 16518 <__assert_fail@plt+0x4f08>
   16388:	mov	r2, #5
   1638c:	mov	r0, r4
   16390:	add	r1, pc, r1
   16394:	bl	11388 <dcgettext@plt>
   16398:	ldr	r1, [r5]
   1639c:	bl	112bc <fputs_unlocked@plt>
   163a0:	ldr	r1, [pc, #372]	; 1651c <__assert_fail@plt+0x4f0c>
   163a4:	mov	r2, #5
   163a8:	mov	r0, r4
   163ac:	add	r1, pc, r1
   163b0:	bl	11388 <dcgettext@plt>
   163b4:	ldr	r1, [r5]
   163b8:	bl	112bc <fputs_unlocked@plt>
   163bc:	ldr	r1, [pc, #348]	; 16520 <__assert_fail@plt+0x4f10>
   163c0:	mov	r2, #5
   163c4:	mov	r0, r4
   163c8:	add	r1, pc, r1
   163cc:	bl	11388 <dcgettext@plt>
   163d0:	ldr	r1, [r5]
   163d4:	bl	112bc <fputs_unlocked@plt>
   163d8:	ldr	r1, [pc, #324]	; 16524 <__assert_fail@plt+0x4f14>
   163dc:	mov	r2, #5
   163e0:	mov	r0, r4
   163e4:	add	r1, pc, r1
   163e8:	bl	11388 <dcgettext@plt>
   163ec:	ldr	r1, [r5]
   163f0:	bl	112bc <fputs_unlocked@plt>
   163f4:	ldr	r1, [pc, #300]	; 16528 <__assert_fail@plt+0x4f18>
   163f8:	mov	r2, #5
   163fc:	mov	r0, r4
   16400:	add	r1, pc, r1
   16404:	bl	11388 <dcgettext@plt>
   16408:	ldr	r1, [r5]
   1640c:	bl	112bc <fputs_unlocked@plt>
   16410:	ldr	r1, [pc, #276]	; 1652c <__assert_fail@plt+0x4f1c>
   16414:	mov	r2, #5
   16418:	mov	r0, r4
   1641c:	add	r1, pc, r1
   16420:	bl	11388 <dcgettext@plt>
   16424:	ldr	r2, [pc, #260]	; 16530 <__assert_fail@plt+0x4f20>
   16428:	ldr	r3, [pc, #260]	; 16534 <__assert_fail@plt+0x4f24>
   1642c:	add	r2, pc, r2
   16430:	add	r3, pc, r3
   16434:	mov	r1, r0
   16438:	mov	r0, #1
   1643c:	bl	11550 <__printf_chk@plt>
   16440:	mov	r0, #5
   16444:	mov	r1, r4
   16448:	bl	115b0 <setlocale@plt>
   1644c:	cmp	r0, #0
   16450:	beq	1646c <__assert_fail@plt+0x4e5c>
   16454:	ldr	r1, [pc, #220]	; 16538 <__assert_fail@plt+0x4f28>
   16458:	mov	r2, #3
   1645c:	add	r1, pc, r1
   16460:	bl	115ec <strncmp@plt>
   16464:	cmp	r0, #0
   16468:	bne	164a0 <__assert_fail@plt+0x4e90>
   1646c:	ldr	r1, [pc, #200]	; 1653c <__assert_fail@plt+0x4f2c>
   16470:	mov	r2, #5
   16474:	mov	r0, #0
   16478:	add	r1, pc, r1
   1647c:	bl	11388 <dcgettext@plt>
   16480:	mov	r5, r0
   16484:	ldr	r0, [r6]
   16488:	bl	16828 <close_stdout@@Base+0x118>
   1648c:	mov	r1, r5
   16490:	mov	r2, r0
   16494:	mov	r0, #1
   16498:	bl	11550 <__printf_chk@plt>
   1649c:	b	16218 <__assert_fail@plt+0x4c08>
   164a0:	ldr	r1, [pc, #152]	; 16540 <__assert_fail@plt+0x4f30>
   164a4:	mov	r2, #5
   164a8:	mov	r0, r4
   164ac:	add	r1, pc, r1
   164b0:	bl	11388 <dcgettext@plt>
   164b4:	mov	r5, r0
   164b8:	ldr	r0, [r6]
   164bc:	bl	16828 <close_stdout@@Base+0x118>
   164c0:	mov	r1, r5
   164c4:	mov	r2, r0
   164c8:	mov	r0, #1
   164cc:	bl	11550 <__printf_chk@plt>
   164d0:	b	1646c <__assert_fail@plt+0x4e5c>
   164d4:	andeq	r8, r1, r4, lsr #28
   164d8:	andeq	r0, r0, r4, asr #2
   164dc:	andeq	r6, r0, r0, lsl #19
   164e0:	andeq	r0, r0, r4, ror #2
   164e4:	andeq	r6, r0, r0, ror r9
   164e8:	andeq	r6, r0, r8, ror #18
   164ec:	andeq	r0, r0, r8, asr r1
   164f0:	andeq	r6, r0, r4, ror r9
   164f4:	andeq	r6, r0, r4, lsr #19
   164f8:	ldrdeq	r6, [r0], -r8
   164fc:	andeq	r6, r0, ip, asr #23
   16500:	andeq	r6, r0, r0, asr #26
   16504:	ldrdeq	r6, [r0], -r0
   16508:	andeq	r6, r0, ip, ror #31
   1650c:	andeq	r7, r0, ip, lsr #2
   16510:	andeq	r7, r0, r0, lsl r2
   16514:	andeq	r7, r0, ip, lsr r3
   16518:	andeq	r7, r0, r0, asr #8
   1651c:			; <UNDEFINED> instruction: 0x000075b8
   16520:	andeq	r7, r0, r4, ror r6
   16524:	andeq	r7, r0, r8, lsl #13
   16528:	andeq	r7, r0, r4, lsr #13
   1652c:	andeq	r7, r0, r8, ror #13
   16530:	strdeq	r7, [r0], -r0
   16534:	strdeq	r7, [r0], -ip
   16538:	strdeq	r7, [r0], -r8
   1653c:	andeq	r7, r0, r8, lsr #14
   16540:	andeq	r7, r0, ip, lsr #13
   16544:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16548:	mov	r7, r3
   1654c:	ldr	r5, [pc, #388]	; 166d8 <__assert_fail@plt+0x50c8>
   16550:	sub	sp, sp, #24
   16554:	ldr	r6, [pc, #384]	; 166dc <__assert_fail@plt+0x50cc>
   16558:	mov	r4, r0
   1655c:	add	r5, pc, r5
   16560:	ldrb	ip, [r0]
   16564:	mov	r8, r1
   16568:	mov	r9, r2
   1656c:	ldr	r5, [r5, r6]
   16570:	sub	r3, ip, #48	; 0x30
   16574:	cmp	r3, #9
   16578:	ldr	sl, [sp, #56]	; 0x38
   1657c:	ldr	r6, [sp, #60]	; 0x3c
   16580:	ldr	r3, [r5]
   16584:	str	r3, [sp, #20]
   16588:	bhi	16614 <__assert_fail@plt+0x5004>
   1658c:	cmp	ip, #0
   16590:	bne	165ac <__assert_fail@plt+0x4f9c>
   16594:	ldr	r2, [sp, #20]
   16598:	ldr	r3, [r5]
   1659c:	cmp	r2, r3
   165a0:	bne	166d4 <__assert_fail@plt+0x50c4>
   165a4:	add	sp, sp, #24
   165a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   165ac:	ldr	ip, [pc, #300]	; 166e0 <__assert_fail@plt+0x50d0>
   165b0:	mov	r0, r4
   165b4:	mov	r1, #0
   165b8:	mov	r2, #10
   165bc:	add	ip, pc, ip
   165c0:	add	r3, sp, #8
   165c4:	str	ip, [sp]
   165c8:	bl	1a5a4 <close_stdout@@Base+0x3e94>
   165cc:	cmp	r0, #0
   165d0:	beq	166a0 <__assert_fail@plt+0x5090>
   165d4:	ldr	r1, [pc, #264]	; 166e4 <__assert_fail@plt+0x50d4>
   165d8:	mov	r2, #5
   165dc:	mov	r0, #0
   165e0:	add	r1, pc, r1
   165e4:	bl	11388 <dcgettext@plt>
   165e8:	mov	r5, r0
   165ec:	mov	r0, r4
   165f0:	bl	1850c <close_stdout@@Base+0x1dfc>
   165f4:	mov	r2, r5
   165f8:	mov	r3, r8
   165fc:	str	r0, [sp]
   16600:	mov	r0, #0
   16604:	mov	r1, r0
   16608:	bl	11430 <error@plt>
   1660c:	mov	r0, #1
   16610:	bl	161c8 <__assert_fail@plt+0x4bb8>
   16614:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   16618:	cmp	r0, #1
   1661c:	bls	166b4 <__assert_fail@plt+0x50a4>
   16620:	mov	r1, #16
   16624:	mov	r0, r4
   16628:	mov	r3, #0
   1662c:	str	r3, [sp, #12]
   16630:	str	r3, [sp, #16]
   16634:	bl	11580 <strnlen@plt>
   16638:	add	r3, sp, #12
   1663c:	mov	r1, r4
   16640:	mov	r2, r0
   16644:	add	r0, sp, #8
   16648:	bl	11424 <mbrtowc@plt>
   1664c:	add	r3, r0, #2
   16650:	cmp	r3, #1
   16654:	movls	r3, #1
   16658:	strls	r3, [r7]
   1665c:	strls	r3, [sl]
   16660:	bls	16684 <__assert_fail@plt+0x5074>
   16664:	cmp	r0, #0
   16668:	movne	r3, r0
   1666c:	moveq	r3, #1
   16670:	ldr	r0, [sp, #8]
   16674:	str	r3, [r7]
   16678:	bl	11310 <wcwidth@plt>
   1667c:	bic	r0, r0, r0, asr #31
   16680:	str	r0, [sl]
   16684:	mov	r1, r4
   16688:	mov	r0, r9
   1668c:	ldr	r2, [r7]
   16690:	bl	11538 <strncpy@plt>
   16694:	ldr	r3, [r7]
   16698:	ldrb	ip, [r4, r3]!
   1669c:	b	1658c <__assert_fail@plt+0x4f7c>
   166a0:	ldr	r3, [sp, #8]
   166a4:	cmp	r3, #0
   166a8:	strgt	r3, [r6]
   166ac:	bgt	16594 <__assert_fail@plt+0x4f84>
   166b0:	b	165d4 <__assert_fail@plt+0x4fc4>
   166b4:	ldrb	r2, [r4]
   166b8:	mov	r3, #1
   166bc:	strb	r2, [r9]
   166c0:	str	r3, [r7]
   166c4:	str	r3, [sl]
   166c8:	ldrb	ip, [r4, #1]
   166cc:	add	r4, r4, r3
   166d0:	b	1658c <__assert_fail@plt+0x4f7c>
   166d4:	bl	11394 <__stack_chk_fail@plt>
   166d8:	muleq	r1, ip, sl
   166dc:	andeq	r0, r0, r8, lsr r1
   166e0:	andeq	r6, r0, r8, asr #10
   166e4:	andeq	r7, r0, r4, lsl #12
   166e8:	ldr	r3, [pc, #8]	; 166f8 <__assert_fail@plt+0x50e8>
   166ec:	add	r3, pc, r3
   166f0:	str	r0, [r3]
   166f4:	bx	lr
   166f8:	andeq	r8, r1, ip, asr #24
   166fc:	ldr	r3, [pc, #8]	; 1670c <__assert_fail@plt+0x50fc>
   16700:	add	r3, pc, r3
   16704:	strb	r0, [r3, #4]
   16708:	bx	lr
   1670c:	andeq	r8, r1, r8, lsr ip

00016710 <close_stdout@@Base>:
   16710:	push	{r4, r5, r6, r7, lr}
   16714:	sub	sp, sp, #12
   16718:	ldr	r4, [pc, #228]	; 16804 <close_stdout@@Base+0xf4>
   1671c:	ldr	r3, [pc, #228]	; 16808 <close_stdout@@Base+0xf8>
   16720:	add	r4, pc, r4
   16724:	ldr	r3, [r4, r3]
   16728:	ldr	r0, [r3]
   1672c:	bl	1b758 <close_stdout@@Base+0x5048>
   16730:	cmp	r0, #0
   16734:	beq	1675c <close_stdout@@Base+0x4c>
   16738:	ldr	r3, [pc, #204]	; 1680c <close_stdout@@Base+0xfc>
   1673c:	add	r3, pc, r3
   16740:	ldrb	r3, [r3, #4]
   16744:	cmp	r3, #0
   16748:	beq	1677c <close_stdout@@Base+0x6c>
   1674c:	bl	11508 <__errno_location@plt>
   16750:	ldr	r3, [r0]
   16754:	cmp	r3, #32
   16758:	bne	1677c <close_stdout@@Base+0x6c>
   1675c:	ldr	r3, [pc, #172]	; 16810 <close_stdout@@Base+0x100>
   16760:	ldr	r3, [r4, r3]
   16764:	ldr	r0, [r3]
   16768:	bl	1b758 <close_stdout@@Base+0x5048>
   1676c:	cmp	r0, #0
   16770:	bne	167d0 <close_stdout@@Base+0xc0>
   16774:	add	sp, sp, #12
   16778:	pop	{r4, r5, r6, r7, pc}
   1677c:	ldr	r1, [pc, #144]	; 16814 <close_stdout@@Base+0x104>
   16780:	mov	r0, #0
   16784:	mov	r2, #5
   16788:	add	r1, pc, r1
   1678c:	bl	11388 <dcgettext@plt>
   16790:	ldr	r3, [pc, #128]	; 16818 <close_stdout@@Base+0x108>
   16794:	ldr	r5, [pc, r3]
   16798:	cmp	r5, #0
   1679c:	mov	r6, r0
   167a0:	beq	167e0 <close_stdout@@Base+0xd0>
   167a4:	bl	11508 <__errno_location@plt>
   167a8:	ldr	r7, [r0]
   167ac:	mov	r0, r5
   167b0:	bl	183b8 <close_stdout@@Base+0x1ca8>
   167b4:	ldr	r2, [pc, #96]	; 1681c <close_stdout@@Base+0x10c>
   167b8:	str	r6, [sp]
   167bc:	mov	r1, r7
   167c0:	add	r2, pc, r2
   167c4:	mov	r3, r0
   167c8:	mov	r0, #0
   167cc:	bl	11430 <error@plt>
   167d0:	ldr	r3, [pc, #72]	; 16820 <close_stdout@@Base+0x110>
   167d4:	ldr	r3, [r4, r3]
   167d8:	ldr	r0, [r3]
   167dc:	bl	11340 <_exit@plt>
   167e0:	bl	11508 <__errno_location@plt>
   167e4:	ldr	r2, [pc, #56]	; 16824 <close_stdout@@Base+0x114>
   167e8:	add	r2, pc, r2
   167ec:	mov	r3, r0
   167f0:	mov	r0, r5
   167f4:	ldr	r1, [r3]
   167f8:	mov	r3, r6
   167fc:	bl	11430 <error@plt>
   16800:	b	167d0 <close_stdout@@Base+0xc0>
   16804:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16808:	andeq	r0, r0, r8, asr r1
   1680c:	strdeq	r8, [r1], -ip
   16810:	andeq	r0, r0, r4, asr #2
   16814:	strdeq	r7, [r0], -ip
   16818:	andeq	r8, r1, r4, lsr #23
   1681c:	ldrdeq	r7, [r0], -r0
   16820:	andeq	r0, r0, ip, asr r1
   16824:	andeq	r7, r0, ip, lsr #15
   16828:	ldrb	r3, [r0]
   1682c:	cmp	r3, #47	; 0x2f
   16830:	bne	1684c <close_stdout@@Base+0x13c>
   16834:	add	r2, r0, #1
   16838:	mov	r0, r2
   1683c:	add	r2, r2, #1
   16840:	ldrb	r3, [r0]
   16844:	cmp	r3, #47	; 0x2f
   16848:	beq	16838 <close_stdout@@Base+0x128>
   1684c:	cmp	r3, #0
   16850:	bxeq	lr
   16854:	mov	r2, r0
   16858:	mov	r1, #0
   1685c:	cmp	r3, #47	; 0x2f
   16860:	moveq	r1, #1
   16864:	beq	16874 <close_stdout@@Base+0x164>
   16868:	cmp	r1, #0
   1686c:	movne	r0, r2
   16870:	movne	r1, #0
   16874:	ldrb	r3, [r2, #1]!
   16878:	cmp	r3, #0
   1687c:	bne	1685c <close_stdout@@Base+0x14c>
   16880:	bx	lr
   16884:	push	{r4, lr}
   16888:	mov	r4, r0
   1688c:	bl	114d8 <strlen@plt>
   16890:	cmp	r0, #1
   16894:	popls	{r4, pc}
   16898:	sub	r3, r0, #1
   1689c:	ldrb	r2, [r4, r3]
   168a0:	cmp	r2, #47	; 0x2f
   168a4:	popne	{r4, pc}
   168a8:	mov	r0, r3
   168ac:	cmp	r0, #1
   168b0:	sub	r3, r3, #1
   168b4:	beq	168c8 <close_stdout@@Base+0x1b8>
   168b8:	ldrb	r2, [r4, r3]
   168bc:	cmp	r2, #47	; 0x2f
   168c0:	popne	{r4, pc}
   168c4:	b	168a8 <close_stdout@@Base+0x198>
   168c8:	pop	{r4, pc}
   168cc:	b	112ec <posix_fadvise64@plt>
   168d0:	cmp	r0, #0
   168d4:	push	{r4, r5, r6, lr}
   168d8:	mov	r6, r1
   168dc:	sub	sp, sp, #16
   168e0:	beq	16904 <close_stdout@@Base+0x1f4>
   168e4:	mov	r4, #0
   168e8:	mov	r5, #0
   168ec:	bl	1155c <fileno@plt>
   168f0:	str	r6, [sp, #8]
   168f4:	mov	r2, r4
   168f8:	mov	r3, r5
   168fc:	strd	r4, [sp]
   16900:	bl	168cc <close_stdout@@Base+0x1bc>
   16904:	add	sp, sp, #16
   16908:	pop	{r4, r5, r6, pc}
   1690c:	push	{r4, r5, r6, lr}
   16910:	mov	r5, r1
   16914:	bl	115d4 <fopen64@plt>
   16918:	subs	r4, r0, #0
   1691c:	beq	1692c <close_stdout@@Base+0x21c>
   16920:	bl	1155c <fileno@plt>
   16924:	cmp	r0, #2
   16928:	bls	16934 <close_stdout@@Base+0x224>
   1692c:	mov	r0, r4
   16930:	pop	{r4, r5, r6, pc}
   16934:	bl	19d8c <close_stdout@@Base+0x367c>
   16938:	subs	r6, r0, #0
   1693c:	blt	16968 <close_stdout@@Base+0x258>
   16940:	mov	r0, r4
   16944:	bl	1b43c <close_stdout@@Base+0x4d2c>
   16948:	cmp	r0, #0
   1694c:	bne	16988 <close_stdout@@Base+0x278>
   16950:	mov	r1, r5
   16954:	mov	r0, r6
   16958:	bl	112a4 <fdopen@plt>
   1695c:	cmp	r0, #0
   16960:	beq	16988 <close_stdout@@Base+0x278>
   16964:	pop	{r4, r5, r6, pc}
   16968:	bl	11508 <__errno_location@plt>
   1696c:	ldr	r6, [r0]
   16970:	mov	r5, r0
   16974:	mov	r0, r4
   16978:	bl	1b43c <close_stdout@@Base+0x4d2c>
   1697c:	mov	r0, #0
   16980:	str	r6, [r5]
   16984:	pop	{r4, r5, r6, pc}
   16988:	bl	11508 <__errno_location@plt>
   1698c:	ldr	r5, [r0]
   16990:	mov	r4, r0
   16994:	mov	r0, r6
   16998:	bl	11604 <close@plt>
   1699c:	mov	r0, #0
   169a0:	str	r5, [r4]
   169a4:	pop	{r4, r5, r6, pc}
   169a8:	ldr	r3, [pc, #108]	; 16a1c <close_stdout@@Base+0x30c>
   169ac:	mov	r1, r0
   169b0:	ldr	r2, [pc, #104]	; 16a20 <close_stdout@@Base+0x310>
   169b4:	add	r3, pc, r3
   169b8:	push	{r4, r5, lr}
   169bc:	sub	sp, sp, #20
   169c0:	ldr	r4, [r3, r2]
   169c4:	mov	r5, r0
   169c8:	mov	r0, #0
   169cc:	ldr	r3, [r4]
   169d0:	str	r3, [sp, #12]
   169d4:	bl	11334 <clock_gettime@plt>
   169d8:	cmp	r0, #0
   169dc:	beq	16a00 <close_stdout@@Base+0x2f0>
   169e0:	mov	r1, #0
   169e4:	add	r0, sp, #4
   169e8:	bl	1140c <gettimeofday@plt>
   169ec:	ldr	r3, [sp, #8]
   169f0:	mov	r1, #1000	; 0x3e8
   169f4:	ldr	r2, [sp, #4]
   169f8:	mul	r3, r1, r3
   169fc:	stm	r5, {r2, r3}
   16a00:	ldr	r2, [sp, #12]
   16a04:	ldr	r3, [r4]
   16a08:	cmp	r2, r3
   16a0c:	bne	16a18 <close_stdout@@Base+0x308>
   16a10:	add	sp, sp, #20
   16a14:	pop	{r4, r5, pc}
   16a18:	bl	11394 <__stack_chk_fail@plt>
   16a1c:	andeq	r8, r1, r4, asr #12
   16a20:	andeq	r0, r0, r8, lsr r1
   16a24:	push	{r3, lr}
   16a28:	mov	r1, #0
   16a2c:	bl	115b0 <setlocale@plt>
   16a30:	cmp	r0, #0
   16a34:	beq	16a70 <close_stdout@@Base+0x360>
   16a38:	ldrb	r3, [r0]
   16a3c:	cmp	r3, #67	; 0x43
   16a40:	bne	16a58 <close_stdout@@Base+0x348>
   16a44:	ldrb	r3, [r0, #1]
   16a48:	cmp	r3, #0
   16a4c:	bne	16a58 <close_stdout@@Base+0x348>
   16a50:	mov	r0, r3
   16a54:	pop	{r3, pc}
   16a58:	ldr	r1, [pc, #24]	; 16a78 <close_stdout@@Base+0x368>
   16a5c:	add	r1, pc, r1
   16a60:	bl	112d4 <strcmp@plt>
   16a64:	adds	r0, r0, #0
   16a68:	movne	r0, #1
   16a6c:	pop	{r3, pc}
   16a70:	mov	r0, #1
   16a74:	pop	{r3, pc}
   16a78:	andeq	r7, r0, ip, lsr r5
   16a7c:	ldr	r3, [pc, #524]	; 16c90 <close_stdout@@Base+0x580>
   16a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a84:	mov	r4, r0
   16a88:	ldr	r0, [pc, #516]	; 16c94 <close_stdout@@Base+0x584>
   16a8c:	add	r3, pc, r3
   16a90:	sub	sp, sp, #28
   16a94:	add	r7, r4, r1
   16a98:	mov	fp, r2
   16a9c:	ldr	r0, [r3, r0]
   16aa0:	ldr	r3, [r0]
   16aa4:	str	r0, [sp]
   16aa8:	str	r3, [sp, #20]
   16aac:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   16ab0:	cmp	r0, #1
   16ab4:	bls	16c24 <close_stdout@@Base+0x514>
   16ab8:	cmp	r4, r7
   16abc:	bcs	16c84 <close_stdout@@Base+0x574>
   16ac0:	mov	r5, #0
   16ac4:	and	r9, fp, #2
   16ac8:	add	r6, sp, #12
   16acc:	and	fp, fp, #1
   16ad0:	add	r8, sp, #8
   16ad4:	str	fp, [sp, #4]
   16ad8:	mov	sl, r5
   16adc:	b	16b04 <close_stdout@@Base+0x3f4>
   16ae0:	cmp	r3, #37	; 0x25
   16ae4:	bcs	16af4 <close_stdout@@Base+0x3e4>
   16ae8:	sub	r3, r3, #32
   16aec:	cmp	r3, #3
   16af0:	bhi	16b2c <close_stdout@@Base+0x41c>
   16af4:	add	r4, r4, #1
   16af8:	add	r5, r5, #1
   16afc:	cmp	r7, r4
   16b00:	bls	16c14 <close_stdout@@Base+0x504>
   16b04:	ldrb	r3, [r4]
   16b08:	cmp	r3, #63	; 0x3f
   16b0c:	bls	16ae0 <close_stdout@@Base+0x3d0>
   16b10:	cmp	r3, #65	; 0x41
   16b14:	bcc	16b2c <close_stdout@@Base+0x41c>
   16b18:	cmp	r3, #95	; 0x5f
   16b1c:	bls	16af4 <close_stdout@@Base+0x3e4>
   16b20:	sub	r3, r3, #97	; 0x61
   16b24:	cmp	r3, #29
   16b28:	bls	16af4 <close_stdout@@Base+0x3e4>
   16b2c:	str	sl, [r6]
   16b30:	str	sl, [r6, #4]
   16b34:	b	16b64 <close_stdout@@Base+0x454>
   16b38:	movw	r2, #65535	; 0xffff
   16b3c:	movt	r2, #32767	; 0x7fff
   16b40:	rsb	r2, r5, r2
   16b44:	cmp	r0, r2
   16b48:	bgt	16c1c <close_stdout@@Base+0x50c>
   16b4c:	add	r5, r5, r0
   16b50:	mov	r0, r6
   16b54:	add	r4, r4, fp
   16b58:	bl	11364 <mbsinit@plt>
   16b5c:	cmp	r0, #0
   16b60:	bne	16afc <close_stdout@@Base+0x3ec>
   16b64:	mov	r0, r8
   16b68:	mov	r1, r4
   16b6c:	rsb	r2, r4, r7
   16b70:	mov	r3, r6
   16b74:	bl	11424 <mbrtowc@plt>
   16b78:	cmn	r0, #1
   16b7c:	mov	fp, r0
   16b80:	beq	16bcc <close_stdout@@Base+0x4bc>
   16b84:	cmn	r0, #2
   16b88:	beq	16bf8 <close_stdout@@Base+0x4e8>
   16b8c:	cmp	fp, #0
   16b90:	ldr	r0, [sp, #8]
   16b94:	moveq	fp, #1
   16b98:	bl	11310 <wcwidth@plt>
   16b9c:	cmp	r0, #0
   16ba0:	bge	16b38 <close_stdout@@Base+0x428>
   16ba4:	cmp	r9, #0
   16ba8:	bne	16bd8 <close_stdout@@Base+0x4c8>
   16bac:	ldr	r0, [sp, #8]
   16bb0:	bl	113b8 <iswcntrl@plt>
   16bb4:	cmp	r0, #0
   16bb8:	bne	16b50 <close_stdout@@Base+0x440>
   16bbc:	cmn	r5, #-2147483647	; 0x80000001
   16bc0:	beq	16c1c <close_stdout@@Base+0x50c>
   16bc4:	add	r5, r5, #1
   16bc8:	b	16b50 <close_stdout@@Base+0x440>
   16bcc:	ldr	r1, [sp, #4]
   16bd0:	cmp	r1, #0
   16bd4:	beq	16af4 <close_stdout@@Base+0x3e4>
   16bd8:	mvn	r0, #0
   16bdc:	ldr	r1, [sp]
   16be0:	ldr	r2, [sp, #20]
   16be4:	ldr	r3, [r1]
   16be8:	cmp	r2, r3
   16bec:	bne	16c8c <close_stdout@@Base+0x57c>
   16bf0:	add	sp, sp, #28
   16bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf8:	ldr	r2, [sp, #4]
   16bfc:	cmp	r2, #0
   16c00:	bne	16bd8 <close_stdout@@Base+0x4c8>
   16c04:	mov	r4, r7
   16c08:	cmp	r7, r4
   16c0c:	add	r5, r5, #1
   16c10:	bhi	16b04 <close_stdout@@Base+0x3f4>
   16c14:	mov	r0, r5
   16c18:	b	16bdc <close_stdout@@Base+0x4cc>
   16c1c:	mvn	r0, #-2147483648	; 0x80000000
   16c20:	b	16bdc <close_stdout@@Base+0x4cc>
   16c24:	cmp	r4, r7
   16c28:	bcs	16c84 <close_stdout@@Base+0x574>
   16c2c:	bl	114c0 <__ctype_b_loc@plt>
   16c30:	mov	r5, #0
   16c34:	and	r1, fp, #2
   16c38:	ldr	r2, [r0]
   16c3c:	b	16c54 <close_stdout@@Base+0x544>
   16c40:	cmn	r5, #-2147483647	; 0x80000001
   16c44:	beq	16c1c <close_stdout@@Base+0x50c>
   16c48:	add	r5, r5, #1
   16c4c:	cmp	r4, r7
   16c50:	beq	16c14 <close_stdout@@Base+0x504>
   16c54:	ldrb	r3, [r4], #1
   16c58:	lsl	r3, r3, #1
   16c5c:	ldrh	r3, [r2, r3]
   16c60:	tst	r3, #16384	; 0x4000
   16c64:	bne	16c40 <close_stdout@@Base+0x530>
   16c68:	cmp	r1, #0
   16c6c:	bne	16bd8 <close_stdout@@Base+0x4c8>
   16c70:	tst	r3, #2
   16c74:	bne	16c4c <close_stdout@@Base+0x53c>
   16c78:	cmn	r5, #-2147483647	; 0x80000001
   16c7c:	bne	16c48 <close_stdout@@Base+0x538>
   16c80:	b	16c14 <close_stdout@@Base+0x504>
   16c84:	mov	r0, #0
   16c88:	b	16bdc <close_stdout@@Base+0x4cc>
   16c8c:	bl	11394 <__stack_chk_fail@plt>
   16c90:	andeq	r8, r1, ip, ror #10
   16c94:	andeq	r0, r0, r8, lsr r1
   16c98:	push	{r3, r4, r5, lr}
   16c9c:	mov	r4, r1
   16ca0:	mov	r5, r0
   16ca4:	bl	114d8 <strlen@plt>
   16ca8:	mov	r2, r4
   16cac:	mov	r1, r0
   16cb0:	mov	r0, r5
   16cb4:	pop	{r3, r4, r5, lr}
   16cb8:	b	16a7c <close_stdout@@Base+0x36c>
   16cbc:	push	{r3, r4, r5, r6, r7, lr}
   16cc0:	subs	r4, r0, #0
   16cc4:	ldr	r5, [pc, #172]	; 16d78 <close_stdout@@Base+0x668>
   16cc8:	add	r5, pc, r5
   16ccc:	beq	16d54 <close_stdout@@Base+0x644>
   16cd0:	mov	r1, #47	; 0x2f
   16cd4:	bl	115bc <strrchr@plt>
   16cd8:	subs	r6, r0, #0
   16cdc:	beq	16d38 <close_stdout@@Base+0x628>
   16ce0:	add	r7, r6, #1
   16ce4:	rsb	r3, r4, r7
   16ce8:	cmp	r3, #6
   16cec:	ble	16d38 <close_stdout@@Base+0x628>
   16cf0:	ldr	r1, [pc, #132]	; 16d7c <close_stdout@@Base+0x66c>
   16cf4:	sub	r0, r6, #6
   16cf8:	mov	r2, #7
   16cfc:	add	r1, pc, r1
   16d00:	bl	115ec <strncmp@plt>
   16d04:	cmp	r0, #0
   16d08:	bne	16d38 <close_stdout@@Base+0x628>
   16d0c:	ldr	r1, [pc, #108]	; 16d80 <close_stdout@@Base+0x670>
   16d10:	mov	r0, r7
   16d14:	mov	r2, #3
   16d18:	add	r1, pc, r1
   16d1c:	bl	115ec <strncmp@plt>
   16d20:	cmp	r0, #0
   16d24:	movne	r4, r7
   16d28:	ldreq	r3, [pc, #84]	; 16d84 <close_stdout@@Base+0x674>
   16d2c:	addeq	r4, r6, #4
   16d30:	ldreq	r3, [r5, r3]
   16d34:	streq	r4, [r3]
   16d38:	ldr	r2, [pc, #72]	; 16d88 <close_stdout@@Base+0x678>
   16d3c:	ldr	r3, [pc, #72]	; 16d8c <close_stdout@@Base+0x67c>
   16d40:	ldr	r2, [r5, r2]
   16d44:	str	r4, [r2]
   16d48:	ldr	r3, [r5, r3]
   16d4c:	str	r4, [r3]
   16d50:	pop	{r3, r4, r5, r6, r7, pc}
   16d54:	ldr	r3, [pc, #52]	; 16d90 <close_stdout@@Base+0x680>
   16d58:	mov	r1, #1
   16d5c:	ldr	r0, [pc, #48]	; 16d94 <close_stdout@@Base+0x684>
   16d60:	mov	r2, #55	; 0x37
   16d64:	ldr	r3, [r5, r3]
   16d68:	add	r0, pc, r0
   16d6c:	ldr	r3, [r3]
   16d70:	bl	113dc <fwrite@plt>
   16d74:	bl	115f8 <abort@plt>
   16d78:	andeq	r8, r1, r0, lsr r3
   16d7c:	ldrdeq	r7, [r0], -ip
   16d80:	andeq	r7, r0, r8, asr #5
   16d84:	andeq	r0, r0, ip, ror #2
   16d88:	andeq	r0, r0, r4, ror #2
   16d8c:	andeq	r0, r0, r0, ror #2
   16d90:	andeq	r0, r0, r4, asr #2
   16d94:	andeq	r7, r0, r8, lsr r2
   16d98:	push	{r3, lr}
   16d9c:	mov	r3, r0
   16da0:	mov	r2, #0
   16da4:	cmp	r1, #8
   16da8:	str	r2, [r3], #4
   16dac:	add	r3, r3, #4
   16db0:	str	r2, [r0, #4]
   16db4:	str	r2, [r3], #4
   16db8:	str	r2, [r3], #4
   16dbc:	str	r2, [r3], #4
   16dc0:	str	r2, [r3], #4
   16dc4:	str	r2, [r3], #4
   16dc8:	str	r2, [r3], #4
   16dcc:	str	r2, [r3], #4
   16dd0:	str	r2, [r3], #4
   16dd4:	str	r2, [r3], #4
   16dd8:	str	r2, [r3]
   16ddc:	beq	16de8 <close_stdout@@Base+0x6d8>
   16de0:	str	r1, [r0]
   16de4:	pop	{r3, pc}
   16de8:	bl	115f8 <abort@plt>
   16dec:	push	{r4, r5, r6, lr}
   16df0:	mov	r4, r0
   16df4:	mov	r6, r1
   16df8:	mov	r0, #0
   16dfc:	mov	r1, r4
   16e00:	mov	r2, #5
   16e04:	bl	11388 <dcgettext@plt>
   16e08:	cmp	r0, r4
   16e0c:	mov	r5, r0
   16e10:	beq	16e18 <close_stdout@@Base+0x708>
   16e14:	pop	{r4, r5, r6, pc}
   16e18:	bl	1b7d8 <close_stdout@@Base+0x50c8>
   16e1c:	ldrb	r3, [r0]
   16e20:	bic	r3, r3, #32
   16e24:	cmp	r3, #85	; 0x55
   16e28:	bne	16e9c <close_stdout@@Base+0x78c>
   16e2c:	ldrb	r3, [r0, #1]
   16e30:	bic	r3, r3, #32
   16e34:	cmp	r3, #84	; 0x54
   16e38:	bne	16e88 <close_stdout@@Base+0x778>
   16e3c:	ldrb	r3, [r0, #2]
   16e40:	bic	r3, r3, #32
   16e44:	cmp	r3, #70	; 0x46
   16e48:	bne	16e88 <close_stdout@@Base+0x778>
   16e4c:	ldrb	r3, [r0, #3]
   16e50:	cmp	r3, #45	; 0x2d
   16e54:	bne	16e88 <close_stdout@@Base+0x778>
   16e58:	ldrb	r3, [r0, #4]
   16e5c:	cmp	r3, #56	; 0x38
   16e60:	bne	16e88 <close_stdout@@Base+0x778>
   16e64:	ldrb	r3, [r0, #5]
   16e68:	cmp	r3, #0
   16e6c:	bne	16e88 <close_stdout@@Base+0x778>
   16e70:	ldrb	r3, [r5]
   16e74:	cmp	r3, #96	; 0x60
   16e78:	beq	16f14 <close_stdout@@Base+0x804>
   16e7c:	ldr	r0, [pc, #180]	; 16f38 <close_stdout@@Base+0x828>
   16e80:	add	r0, pc, r0
   16e84:	pop	{r4, r5, r6, pc}
   16e88:	cmp	r6, #7
   16e8c:	beq	16f20 <close_stdout@@Base+0x810>
   16e90:	ldr	r0, [pc, #164]	; 16f3c <close_stdout@@Base+0x82c>
   16e94:	add	r0, pc, r0
   16e98:	pop	{r4, r5, r6, pc}
   16e9c:	cmp	r3, #71	; 0x47
   16ea0:	bne	16e88 <close_stdout@@Base+0x778>
   16ea4:	ldrb	r3, [r0, #1]
   16ea8:	bic	r3, r3, #32
   16eac:	cmp	r3, #66	; 0x42
   16eb0:	bne	16e88 <close_stdout@@Base+0x778>
   16eb4:	ldrb	r3, [r0, #2]
   16eb8:	cmp	r3, #49	; 0x31
   16ebc:	bne	16e88 <close_stdout@@Base+0x778>
   16ec0:	ldrb	r3, [r0, #3]
   16ec4:	cmp	r3, #56	; 0x38
   16ec8:	bne	16e88 <close_stdout@@Base+0x778>
   16ecc:	ldrb	r3, [r0, #4]
   16ed0:	cmp	r3, #48	; 0x30
   16ed4:	bne	16e88 <close_stdout@@Base+0x778>
   16ed8:	ldrb	r3, [r0, #5]
   16edc:	cmp	r3, #51	; 0x33
   16ee0:	bne	16e88 <close_stdout@@Base+0x778>
   16ee4:	ldrb	r3, [r0, #6]
   16ee8:	cmp	r3, #48	; 0x30
   16eec:	bne	16e88 <close_stdout@@Base+0x778>
   16ef0:	ldrb	r3, [r0, #7]
   16ef4:	cmp	r3, #0
   16ef8:	bne	16e88 <close_stdout@@Base+0x778>
   16efc:	ldrb	r3, [r5]
   16f00:	cmp	r3, #96	; 0x60
   16f04:	beq	16f2c <close_stdout@@Base+0x81c>
   16f08:	ldr	r0, [pc, #48]	; 16f40 <close_stdout@@Base+0x830>
   16f0c:	add	r0, pc, r0
   16f10:	pop	{r4, r5, r6, pc}
   16f14:	ldr	r0, [pc, #40]	; 16f44 <close_stdout@@Base+0x834>
   16f18:	add	r0, pc, r0
   16f1c:	pop	{r4, r5, r6, pc}
   16f20:	ldr	r0, [pc, #32]	; 16f48 <close_stdout@@Base+0x838>
   16f24:	add	r0, pc, r0
   16f28:	pop	{r4, r5, r6, pc}
   16f2c:	ldr	r0, [pc, #24]	; 16f4c <close_stdout@@Base+0x83c>
   16f30:	add	r0, pc, r0
   16f34:	pop	{r4, r5, r6, pc}
   16f38:	andeq	r7, r0, r4, lsl #3
   16f3c:	andeq	r7, r0, r8, ror r1
   16f40:	strdeq	r7, [r0], -ip
   16f44:	andeq	r7, r0, r0, lsl #2
   16f48:	andeq	r7, r0, ip, ror #1
   16f4c:	andeq	r7, r0, r4, ror #1
   16f50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f54:	sub	sp, sp, #124	; 0x7c
   16f58:	ldr	ip, [pc, #3304]	; 17c48 <close_stdout@@Base+0x1538>
   16f5c:	mov	sl, r1
   16f60:	str	r0, [sp, #40]	; 0x28
   16f64:	mov	r8, r3
   16f68:	ldr	r0, [pc, #3292]	; 17c4c <close_stdout@@Base+0x153c>
   16f6c:	add	ip, pc, ip
   16f70:	str	r2, [sp, #32]
   16f74:	ldr	r1, [sp, #164]	; 0xa4
   16f78:	mov	r3, ip
   16f7c:	ldr	r0, [ip, r0]
   16f80:	ldr	r2, [sp, #172]	; 0xac
   16f84:	ubfx	r1, r1, #1, #1
   16f88:	str	r1, [sp, #36]	; 0x24
   16f8c:	str	r0, [sp, #56]	; 0x38
   16f90:	ldr	r0, [sp, #168]	; 0xa8
   16f94:	ldr	r1, [sp, #176]	; 0xb0
   16f98:	str	r2, [sp, #72]	; 0x48
   16f9c:	str	r0, [sp, #48]	; 0x30
   16fa0:	ldr	r0, [sp, #56]	; 0x38
   16fa4:	str	r1, [sp, #68]	; 0x44
   16fa8:	ldr	r3, [r0]
   16fac:	str	r3, [sp, #116]	; 0x74
   16fb0:	bl	113f4 <__ctype_get_mb_cur_max@plt>
   16fb4:	ldr	r2, [sp, #160]	; 0xa0
   16fb8:	str	r0, [sp, #64]	; 0x40
   16fbc:	cmp	r2, #8
   16fc0:	addls	pc, pc, r2, lsl #2
   16fc4:	b	17b24 <close_stdout@@Base+0x1414>
   16fc8:	b	16fec <close_stdout@@Base+0x8dc>
   16fcc:	b	1783c <close_stdout@@Base+0x112c>
   16fd0:	b	1786c <close_stdout@@Base+0x115c>
   16fd4:	b	1771c <close_stdout@@Base+0x100c>
   16fd8:	b	1775c <close_stdout@@Base+0x104c>
   16fdc:	b	17788 <close_stdout@@Base+0x1078>
   16fe0:	b	177a8 <close_stdout@@Base+0x1098>
   16fe4:	b	177a8 <close_stdout@@Base+0x1098>
   16fe8:	b	177a8 <close_stdout@@Base+0x1098>
   16fec:	mov	r2, #0
   16ff0:	str	r2, [sp, #36]	; 0x24
   16ff4:	mov	r9, r2
   16ff8:	str	r2, [sp, #24]
   16ffc:	str	r2, [sp, #28]
   17000:	str	r2, [sp, #52]	; 0x34
   17004:	ldr	r0, [sp, #36]	; 0x24
   17008:	mov	fp, #0
   1700c:	ldr	r1, [sp, #24]
   17010:	eor	r2, r0, #1
   17014:	eor	r3, r1, #1
   17018:	and	r3, r2, r3
   1701c:	and	r2, r1, r0
   17020:	str	r3, [sp, #44]	; 0x2c
   17024:	str	r2, [sp, #76]	; 0x4c
   17028:	cmn	r8, #1
   1702c:	beq	173ac <close_stdout@@Base+0xc9c>
   17030:	subs	r3, fp, r8
   17034:	movne	r3, #1
   17038:	cmp	r3, #0
   1703c:	beq	173c4 <close_stdout@@Base+0xcb4>
   17040:	ldr	r3, [sp, #28]
   17044:	ldr	r0, [sp, #24]
   17048:	adds	r7, r3, #0
   1704c:	movne	r7, #1
   17050:	ands	r6, r7, r0
   17054:	bne	178b0 <close_stdout@@Base+0x11a0>
   17058:	ldr	r1, [sp, #32]
   1705c:	add	r5, r1, fp
   17060:	ldrb	r4, [r5]
   17064:	cmp	r4, #126	; 0x7e
   17068:	addls	pc, pc, r4, lsl #2
   1706c:	b	17630 <close_stdout@@Base+0xf20>
   17070:	b	1753c <close_stdout@@Base+0xe2c>
   17074:	b	17630 <close_stdout@@Base+0xf20>
   17078:	b	17630 <close_stdout@@Base+0xf20>
   1707c:	b	17630 <close_stdout@@Base+0xf20>
   17080:	b	17630 <close_stdout@@Base+0xf20>
   17084:	b	17630 <close_stdout@@Base+0xf20>
   17088:	b	17630 <close_stdout@@Base+0xf20>
   1708c:	b	17524 <close_stdout@@Base+0xe14>
   17090:	b	1750c <close_stdout@@Base+0xdfc>
   17094:	b	17534 <close_stdout@@Base+0xe24>
   17098:	b	1752c <close_stdout@@Base+0xe1c>
   1709c:	b	1751c <close_stdout@@Base+0xe0c>
   170a0:	b	17514 <close_stdout@@Base+0xe04>
   170a4:	b	174d8 <close_stdout@@Base+0xdc8>
   170a8:	b	17630 <close_stdout@@Base+0xf20>
   170ac:	b	17630 <close_stdout@@Base+0xf20>
   170b0:	b	17630 <close_stdout@@Base+0xf20>
   170b4:	b	17630 <close_stdout@@Base+0xf20>
   170b8:	b	17630 <close_stdout@@Base+0xf20>
   170bc:	b	17630 <close_stdout@@Base+0xf20>
   170c0:	b	17630 <close_stdout@@Base+0xf20>
   170c4:	b	17630 <close_stdout@@Base+0xf20>
   170c8:	b	17630 <close_stdout@@Base+0xf20>
   170cc:	b	17630 <close_stdout@@Base+0xf20>
   170d0:	b	17630 <close_stdout@@Base+0xf20>
   170d4:	b	17630 <close_stdout@@Base+0xf20>
   170d8:	b	17630 <close_stdout@@Base+0xf20>
   170dc:	b	17630 <close_stdout@@Base+0xf20>
   170e0:	b	17630 <close_stdout@@Base+0xf20>
   170e4:	b	17630 <close_stdout@@Base+0xf20>
   170e8:	b	17630 <close_stdout@@Base+0xf20>
   170ec:	b	17630 <close_stdout@@Base+0xf20>
   170f0:	b	17464 <close_stdout@@Base+0xd54>
   170f4:	b	17464 <close_stdout@@Base+0xd54>
   170f8:	b	17464 <close_stdout@@Base+0xd54>
   170fc:	b	1745c <close_stdout@@Base+0xd4c>
   17100:	b	17464 <close_stdout@@Base+0xd54>
   17104:	b	17338 <close_stdout@@Base+0xc28>
   17108:	b	17464 <close_stdout@@Base+0xd54>
   1710c:	b	175d8 <close_stdout@@Base+0xec8>
   17110:	b	17464 <close_stdout@@Base+0xd54>
   17114:	b	17464 <close_stdout@@Base+0xd54>
   17118:	b	17464 <close_stdout@@Base+0xd54>
   1711c:	b	17338 <close_stdout@@Base+0xc28>
   17120:	b	17338 <close_stdout@@Base+0xc28>
   17124:	b	17338 <close_stdout@@Base+0xc28>
   17128:	b	17338 <close_stdout@@Base+0xc28>
   1712c:	b	17338 <close_stdout@@Base+0xc28>
   17130:	b	17338 <close_stdout@@Base+0xc28>
   17134:	b	17338 <close_stdout@@Base+0xc28>
   17138:	b	17338 <close_stdout@@Base+0xc28>
   1713c:	b	17338 <close_stdout@@Base+0xc28>
   17140:	b	17338 <close_stdout@@Base+0xc28>
   17144:	b	17338 <close_stdout@@Base+0xc28>
   17148:	b	17338 <close_stdout@@Base+0xc28>
   1714c:	b	17338 <close_stdout@@Base+0xc28>
   17150:	b	17338 <close_stdout@@Base+0xc28>
   17154:	b	17338 <close_stdout@@Base+0xc28>
   17158:	b	17338 <close_stdout@@Base+0xc28>
   1715c:	b	17464 <close_stdout@@Base+0xd54>
   17160:	b	17464 <close_stdout@@Base+0xd54>
   17164:	b	17464 <close_stdout@@Base+0xd54>
   17168:	b	17464 <close_stdout@@Base+0xd54>
   1716c:	b	1726c <close_stdout@@Base+0xb5c>
   17170:	b	17630 <close_stdout@@Base+0xf20>
   17174:	b	17338 <close_stdout@@Base+0xc28>
   17178:	b	17338 <close_stdout@@Base+0xc28>
   1717c:	b	17338 <close_stdout@@Base+0xc28>
   17180:	b	17338 <close_stdout@@Base+0xc28>
   17184:	b	17338 <close_stdout@@Base+0xc28>
   17188:	b	17338 <close_stdout@@Base+0xc28>
   1718c:	b	17338 <close_stdout@@Base+0xc28>
   17190:	b	17338 <close_stdout@@Base+0xc28>
   17194:	b	17338 <close_stdout@@Base+0xc28>
   17198:	b	17338 <close_stdout@@Base+0xc28>
   1719c:	b	17338 <close_stdout@@Base+0xc28>
   171a0:	b	17338 <close_stdout@@Base+0xc28>
   171a4:	b	17338 <close_stdout@@Base+0xc28>
   171a8:	b	17338 <close_stdout@@Base+0xc28>
   171ac:	b	17338 <close_stdout@@Base+0xc28>
   171b0:	b	17338 <close_stdout@@Base+0xc28>
   171b4:	b	17338 <close_stdout@@Base+0xc28>
   171b8:	b	17338 <close_stdout@@Base+0xc28>
   171bc:	b	17338 <close_stdout@@Base+0xc28>
   171c0:	b	17338 <close_stdout@@Base+0xc28>
   171c4:	b	17338 <close_stdout@@Base+0xc28>
   171c8:	b	17338 <close_stdout@@Base+0xc28>
   171cc:	b	17338 <close_stdout@@Base+0xc28>
   171d0:	b	17338 <close_stdout@@Base+0xc28>
   171d4:	b	17338 <close_stdout@@Base+0xc28>
   171d8:	b	17338 <close_stdout@@Base+0xc28>
   171dc:	b	17464 <close_stdout@@Base+0xd54>
   171e0:	b	175bc <close_stdout@@Base+0xeac>
   171e4:	b	17338 <close_stdout@@Base+0xc28>
   171e8:	b	17464 <close_stdout@@Base+0xd54>
   171ec:	b	17338 <close_stdout@@Base+0xc28>
   171f0:	b	17464 <close_stdout@@Base+0xd54>
   171f4:	b	17338 <close_stdout@@Base+0xc28>
   171f8:	b	17338 <close_stdout@@Base+0xc28>
   171fc:	b	17338 <close_stdout@@Base+0xc28>
   17200:	b	17338 <close_stdout@@Base+0xc28>
   17204:	b	17338 <close_stdout@@Base+0xc28>
   17208:	b	17338 <close_stdout@@Base+0xc28>
   1720c:	b	17338 <close_stdout@@Base+0xc28>
   17210:	b	17338 <close_stdout@@Base+0xc28>
   17214:	b	17338 <close_stdout@@Base+0xc28>
   17218:	b	17338 <close_stdout@@Base+0xc28>
   1721c:	b	17338 <close_stdout@@Base+0xc28>
   17220:	b	17338 <close_stdout@@Base+0xc28>
   17224:	b	17338 <close_stdout@@Base+0xc28>
   17228:	b	17338 <close_stdout@@Base+0xc28>
   1722c:	b	17338 <close_stdout@@Base+0xc28>
   17230:	b	17338 <close_stdout@@Base+0xc28>
   17234:	b	17338 <close_stdout@@Base+0xc28>
   17238:	b	17338 <close_stdout@@Base+0xc28>
   1723c:	b	17338 <close_stdout@@Base+0xc28>
   17240:	b	17338 <close_stdout@@Base+0xc28>
   17244:	b	17338 <close_stdout@@Base+0xc28>
   17248:	b	17338 <close_stdout@@Base+0xc28>
   1724c:	b	17338 <close_stdout@@Base+0xc28>
   17250:	b	17338 <close_stdout@@Base+0xc28>
   17254:	b	17338 <close_stdout@@Base+0xc28>
   17258:	b	17338 <close_stdout@@Base+0xc28>
   1725c:	b	17444 <close_stdout@@Base+0xd34>
   17260:	b	17464 <close_stdout@@Base+0xd54>
   17264:	b	17444 <close_stdout@@Base+0xd34>
   17268:	b	1745c <close_stdout@@Base+0xd4c>
   1726c:	ldr	r3, [sp, #160]	; 0xa0
   17270:	cmp	r3, #2
   17274:	beq	17b00 <close_stdout@@Base+0x13f0>
   17278:	cmp	r3, #3
   1727c:	bne	17338 <close_stdout@@Base+0xc28>
   17280:	ldr	r1, [sp, #164]	; 0xa4
   17284:	tst	r1, #4
   17288:	beq	17338 <close_stdout@@Base+0xc28>
   1728c:	add	r3, fp, #2
   17290:	cmp	r8, r3
   17294:	bls	17338 <close_stdout@@Base+0xc28>
   17298:	ldrb	r2, [r5, #1]
   1729c:	mov	r1, #1
   172a0:	cmp	r2, #63	; 0x3f
   172a4:	bne	17338 <close_stdout@@Base+0xc28>
   172a8:	ldr	r0, [sp, #32]
   172ac:	ldrb	ip, [r0, r3]
   172b0:	sub	r0, ip, #33	; 0x21
   172b4:	uxtb	r0, r0
   172b8:	cmp	r0, #29
   172bc:	bhi	17338 <close_stdout@@Base+0xc28>
   172c0:	lsl	r1, r1, r0
   172c4:	movw	r0, #20929	; 0x51c1
   172c8:	movt	r0, #14336	; 0x3800
   172cc:	and	r0, r1, r0
   172d0:	cmp	r0, #0
   172d4:	beq	17338 <close_stdout@@Base+0xc28>
   172d8:	ldr	r1, [sp, #36]	; 0x24
   172dc:	cmp	r1, #0
   172e0:	bne	17480 <close_stdout@@Base+0xd70>
   172e4:	cmp	r9, sl
   172e8:	mov	r4, ip
   172ec:	mov	fp, r3
   172f0:	ldrcc	r0, [sp, #40]	; 0x28
   172f4:	strbcc	r2, [r0, r9]
   172f8:	add	r2, r9, #1
   172fc:	cmp	sl, r2
   17300:	ldrhi	r0, [sp, #40]	; 0x28
   17304:	movhi	r1, #34	; 0x22
   17308:	strbhi	r1, [r0, r2]
   1730c:	add	r2, r9, #2
   17310:	cmp	sl, r2
   17314:	ldrhi	r0, [sp, #40]	; 0x28
   17318:	movhi	r1, #34	; 0x22
   1731c:	strbhi	r1, [r0, r2]
   17320:	add	r2, r9, #3
   17324:	cmp	sl, r2
   17328:	add	r9, r9, #4
   1732c:	ldrhi	r0, [sp, #40]	; 0x28
   17330:	movhi	r1, #63	; 0x3f
   17334:	strbhi	r1, [r0, r2]
   17338:	ldr	r0, [sp, #44]	; 0x2c
   1733c:	cmp	r0, #0
   17340:	bne	17368 <close_stdout@@Base+0xc58>
   17344:	ldr	r1, [sp, #48]	; 0x30
   17348:	cmp	r1, #0
   1734c:	beq	17368 <close_stdout@@Base+0xc58>
   17350:	ubfx	r2, r4, #5, #8
   17354:	and	r3, r4, #31
   17358:	ldr	r2, [r1, r2, lsl #2]
   1735c:	lsr	r3, r2, r3
   17360:	tst	r3, #1
   17364:	bne	17370 <close_stdout@@Base+0xc60>
   17368:	cmp	r6, #0
   1736c:	beq	17390 <close_stdout@@Base+0xc80>
   17370:	ldr	r2, [sp, #36]	; 0x24
   17374:	cmp	r2, #0
   17378:	bne	17480 <close_stdout@@Base+0xd70>
   1737c:	cmp	r9, sl
   17380:	ldrcc	r0, [sp, #40]	; 0x28
   17384:	movcc	r3, #92	; 0x5c
   17388:	strbcc	r3, [r0, r9]
   1738c:	add	r9, r9, #1
   17390:	add	fp, fp, #1
   17394:	cmp	r9, sl
   17398:	ldrcc	r1, [sp, #40]	; 0x28
   1739c:	strbcc	r4, [r1, r9]
   173a0:	cmn	r8, #1
   173a4:	add	r9, r9, #1
   173a8:	bne	17030 <close_stdout@@Base+0x920>
   173ac:	ldr	r2, [sp, #32]
   173b0:	ldrb	r3, [r2, fp]
   173b4:	adds	r3, r3, #0
   173b8:	movne	r3, #1
   173bc:	cmp	r3, #0
   173c0:	bne	17040 <close_stdout@@Base+0x930>
   173c4:	ldr	r3, [sp, #160]	; 0xa0
   173c8:	cmp	r9, #0
   173cc:	cmpeq	r3, #2
   173d0:	bne	173e0 <close_stdout@@Base+0xcd0>
   173d4:	ldr	r0, [sp, #36]	; 0x24
   173d8:	cmp	r0, #0
   173dc:	bne	17480 <close_stdout@@Base+0xd70>
   173e0:	ldr	r1, [sp, #36]	; 0x24
   173e4:	ldr	r2, [sp, #52]	; 0x34
   173e8:	eor	r3, r1, #1
   173ec:	cmp	r2, #0
   173f0:	moveq	r3, #0
   173f4:	andne	r3, r3, #1
   173f8:	cmp	r3, #0
   173fc:	beq	17428 <close_stdout@@Base+0xd18>
   17400:	ldrb	r3, [r2]
   17404:	cmp	r3, #0
   17408:	beq	17428 <close_stdout@@Base+0xd18>
   1740c:	ldr	r1, [sp, #40]	; 0x28
   17410:	cmp	sl, r9
   17414:	strbhi	r3, [r1, r9]
   17418:	ldrb	r3, [r2, #1]!
   1741c:	add	r9, r9, #1
   17420:	cmp	r3, #0
   17424:	bne	17410 <close_stdout@@Base+0xd00>
   17428:	cmp	r9, sl
   1742c:	movcs	r0, r9
   17430:	ldrcc	r1, [sp, #40]	; 0x28
   17434:	movcc	r3, #0
   17438:	movcc	r0, r9
   1743c:	strbcc	r3, [r1, r9]
   17440:	b	174bc <close_stdout@@Base+0xdac>
   17444:	cmn	r8, #1
   17448:	beq	17b10 <close_stdout@@Base+0x1400>
   1744c:	subs	r3, r8, #1
   17450:	movne	r3, #1
   17454:	cmp	r3, #0
   17458:	bne	17338 <close_stdout@@Base+0xc28>
   1745c:	cmp	fp, #0
   17460:	bne	17338 <close_stdout@@Base+0xc28>
   17464:	ldr	r3, [sp, #36]	; 0x24
   17468:	ldr	r0, [sp, #160]	; 0xa0
   1746c:	cmp	r0, #2
   17470:	movne	r3, #0
   17474:	andeq	r3, r3, #1
   17478:	cmp	r3, #0
   1747c:	beq	17338 <close_stdout@@Base+0xc28>
   17480:	ldr	r2, [sp, #164]	; 0xa4
   17484:	mov	ip, #0
   17488:	ldr	r0, [sp, #160]	; 0xa0
   1748c:	bic	r3, r2, #2
   17490:	ldr	r1, [sp, #72]	; 0x48
   17494:	ldr	r2, [sp, #68]	; 0x44
   17498:	stm	sp, {r0, r3}
   1749c:	mov	r3, r8
   174a0:	str	r1, [sp, #12]
   174a4:	mov	r1, sl
   174a8:	str	r2, [sp, #16]
   174ac:	ldr	r0, [sp, #40]	; 0x28
   174b0:	ldr	r2, [sp, #32]
   174b4:	str	ip, [sp, #8]
   174b8:	bl	16f50 <close_stdout@@Base+0x840>
   174bc:	ldr	r1, [sp, #56]	; 0x38
   174c0:	ldr	r2, [sp, #116]	; 0x74
   174c4:	ldr	r3, [r1]
   174c8:	cmp	r2, r3
   174cc:	bne	17c00 <close_stdout@@Base+0x14f0>
   174d0:	add	sp, sp, #124	; 0x7c
   174d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d8:	mov	r3, #114	; 0x72
   174dc:	ldr	r2, [sp, #36]	; 0x24
   174e0:	ldr	r0, [sp, #160]	; 0xa0
   174e4:	cmp	r0, #2
   174e8:	movne	r2, #0
   174ec:	andeq	r2, r2, #1
   174f0:	cmp	r2, #0
   174f4:	bne	17480 <close_stdout@@Base+0xd70>
   174f8:	ldr	r1, [sp, #24]
   174fc:	cmp	r1, #0
   17500:	beq	17338 <close_stdout@@Base+0xc28>
   17504:	mov	r4, r3
   17508:	b	17370 <close_stdout@@Base+0xc60>
   1750c:	mov	r3, #98	; 0x62
   17510:	b	174f8 <close_stdout@@Base+0xde8>
   17514:	mov	r3, #102	; 0x66
   17518:	b	174f8 <close_stdout@@Base+0xde8>
   1751c:	mov	r3, #118	; 0x76
   17520:	b	174f8 <close_stdout@@Base+0xde8>
   17524:	mov	r3, #97	; 0x61
   17528:	b	174f8 <close_stdout@@Base+0xde8>
   1752c:	mov	r3, #110	; 0x6e
   17530:	b	174dc <close_stdout@@Base+0xdcc>
   17534:	mov	r3, #116	; 0x74
   17538:	b	174dc <close_stdout@@Base+0xdcc>
   1753c:	ldr	r2, [sp, #24]
   17540:	cmp	r2, #0
   17544:	beq	17aec <close_stdout@@Base+0x13dc>
   17548:	ldr	r3, [sp, #36]	; 0x24
   1754c:	cmp	r3, #0
   17550:	bne	17480 <close_stdout@@Base+0xd70>
   17554:	cmp	r9, sl
   17558:	add	r2, r9, #1
   1755c:	ldrcc	r0, [sp, #40]	; 0x28
   17560:	movcc	r3, #92	; 0x5c
   17564:	strbcc	r3, [r0, r9]
   17568:	add	r3, fp, #1
   1756c:	cmp	r8, r3
   17570:	bls	175b0 <close_stdout@@Base+0xea0>
   17574:	ldr	r1, [sp, #32]
   17578:	ldrb	r3, [r1, r3]
   1757c:	sub	r3, r3, #48	; 0x30
   17580:	cmp	r3, #9
   17584:	bhi	175b0 <close_stdout@@Base+0xea0>
   17588:	cmp	sl, r2
   1758c:	ldrhi	r0, [sp, #40]	; 0x28
   17590:	movhi	r3, #48	; 0x30
   17594:	strbhi	r3, [r0, r2]
   17598:	add	r3, r9, #2
   1759c:	cmp	sl, r3
   175a0:	ldrhi	r1, [sp, #40]	; 0x28
   175a4:	movhi	r2, #48	; 0x30
   175a8:	strbhi	r2, [r1, r3]
   175ac:	add	r2, r9, #3
   175b0:	mov	r9, r2
   175b4:	mov	r4, #48	; 0x30
   175b8:	b	17344 <close_stdout@@Base+0xc34>
   175bc:	ldr	r1, [sp, #76]	; 0x4c
   175c0:	cmp	r1, #0
   175c4:	beq	175d0 <close_stdout@@Base+0xec0>
   175c8:	cmp	r7, #0
   175cc:	bne	17390 <close_stdout@@Base+0xc80>
   175d0:	mov	r3, r4
   175d4:	b	174dc <close_stdout@@Base+0xdcc>
   175d8:	ldr	r1, [sp, #160]	; 0xa0
   175dc:	cmp	r1, #2
   175e0:	bne	17338 <close_stdout@@Base+0xc28>
   175e4:	ldr	r2, [sp, #36]	; 0x24
   175e8:	cmp	r2, #0
   175ec:	bne	17480 <close_stdout@@Base+0xd70>
   175f0:	cmp	r9, sl
   175f4:	ldrcc	r0, [sp, #40]	; 0x28
   175f8:	movcc	r3, #39	; 0x27
   175fc:	strbcc	r3, [r0, r9]
   17600:	add	r3, r9, #1
   17604:	cmp	sl, r3
   17608:	ldrhi	r1, [sp, #40]	; 0x28
   1760c:	movhi	r2, #92	; 0x5c
   17610:	strbhi	r2, [r1, r3]
   17614:	add	r3, r9, #2
   17618:	cmp	sl, r3
   1761c:	add	r9, r9, #3
   17620:	ldrhi	r0, [sp, #40]	; 0x28
   17624:	movhi	r2, #39	; 0x27
   17628:	strbhi	r2, [r0, r3]
   1762c:	b	17338 <close_stdout@@Base+0xc28>
   17630:	ldr	r1, [sp, #64]	; 0x40
   17634:	cmp	r1, #1
   17638:	bne	17930 <close_stdout@@Base+0x1220>
   1763c:	bl	114c0 <__ctype_b_loc@plt>
   17640:	ldr	r2, [sp, #64]	; 0x40
   17644:	sxth	r3, r4
   17648:	str	r2, [sp, #60]	; 0x3c
   1764c:	lsl	r3, r3, #1
   17650:	ldr	r2, [r0]
   17654:	ldrh	r2, [r2, r3]
   17658:	eor	r2, r2, #16384	; 0x4000
   1765c:	ubfx	r2, r2, #14, #1
   17660:	ldr	r1, [sp, #24]
   17664:	ands	r2, r2, r1
   17668:	beq	17338 <close_stdout@@Base+0xc28>
   1766c:	ldr	r3, [sp, #60]	; 0x3c
   17670:	mov	r0, #92	; 0x5c
   17674:	ldr	r7, [sp, #36]	; 0x24
   17678:	add	r1, r3, fp
   1767c:	str	r8, [sp, #60]	; 0x3c
   17680:	ldr	r3, [sp, #40]	; 0x28
   17684:	b	176e8 <close_stdout@@Base+0xfd8>
   17688:	cmp	r7, #0
   1768c:	bne	17b28 <close_stdout@@Base+0x1418>
   17690:	add	ip, r9, #1
   17694:	cmp	r9, sl
   17698:	strbcc	r0, [r3, r9]
   1769c:	cmp	sl, ip
   176a0:	lsrhi	r8, r4, #6
   176a4:	addhi	r8, r8, #48	; 0x30
   176a8:	strbhi	r8, [r3, ip]
   176ac:	add	ip, r9, #2
   176b0:	add	r9, r9, #3
   176b4:	cmp	sl, ip
   176b8:	ubfxhi	r8, r4, #3, #3
   176bc:	and	r4, r4, #7
   176c0:	add	r4, r4, #48	; 0x30
   176c4:	addhi	r8, r8, #48	; 0x30
   176c8:	strbhi	r8, [r3, ip]
   176cc:	add	fp, fp, #1
   176d0:	cmp	r1, fp
   176d4:	bls	17714 <close_stdout@@Base+0x1004>
   176d8:	cmp	r9, sl
   176dc:	strbcc	r4, [r3, r9]
   176e0:	ldrb	r4, [r5, #1]!
   176e4:	add	r9, r9, #1
   176e8:	cmp	r2, #0
   176ec:	bne	17688 <close_stdout@@Base+0xf78>
   176f0:	cmp	r6, #0
   176f4:	beq	176cc <close_stdout@@Base+0xfbc>
   176f8:	add	fp, fp, #1
   176fc:	cmp	r9, sl
   17700:	strbcc	r0, [r3, r9]
   17704:	cmp	r1, fp
   17708:	add	r9, r9, #1
   1770c:	mov	r6, #0
   17710:	bhi	176d8 <close_stdout@@Base+0xfc8>
   17714:	ldr	r8, [sp, #60]	; 0x3c
   17718:	b	17394 <close_stdout@@Base+0xc84>
   1771c:	ldr	r3, [sp, #36]	; 0x24
   17720:	cmp	r3, #0
   17724:	bne	17c28 <close_stdout@@Base+0x1518>
   17728:	cmp	sl, #0
   1772c:	beq	17b40 <close_stdout@@Base+0x1430>
   17730:	ldr	r1, [sp, #40]	; 0x28
   17734:	mov	r0, #1
   17738:	ldr	r2, [pc, #1296]	; 17c50 <close_stdout@@Base+0x1540>
   1773c:	mov	r3, #34	; 0x22
   17740:	str	r0, [sp, #24]
   17744:	mov	r9, r0
   17748:	add	r2, pc, r2
   1774c:	str	r0, [sp, #28]
   17750:	strb	r3, [r1]
   17754:	str	r2, [sp, #52]	; 0x34
   17758:	b	17004 <close_stdout@@Base+0x8f4>
   1775c:	ldr	r3, [pc, #1264]	; 17c54 <close_stdout@@Base+0x1544>
   17760:	mov	r2, #1
   17764:	mov	r0, #3
   17768:	str	r2, [sp, #36]	; 0x24
   1776c:	add	r3, pc, r3
   17770:	str	r2, [sp, #24]
   17774:	str	r3, [sp, #52]	; 0x34
   17778:	mov	r9, #0
   1777c:	str	r2, [sp, #28]
   17780:	str	r0, [sp, #160]	; 0xa0
   17784:	b	17004 <close_stdout@@Base+0x8f4>
   17788:	mov	r0, #0
   1778c:	mov	r1, #1
   17790:	str	r0, [sp, #36]	; 0x24
   17794:	mov	r9, r0
   17798:	str	r1, [sp, #24]
   1779c:	str	r0, [sp, #28]
   177a0:	str	r0, [sp, #52]	; 0x34
   177a4:	b	17004 <close_stdout@@Base+0x8f4>
   177a8:	ldr	r3, [sp, #160]	; 0xa0
   177ac:	cmp	r3, #8
   177b0:	beq	177dc <close_stdout@@Base+0x10cc>
   177b4:	ldr	r0, [pc, #1180]	; 17c58 <close_stdout@@Base+0x1548>
   177b8:	mov	r1, r3
   177bc:	add	r0, pc, r0
   177c0:	bl	16dec <close_stdout@@Base+0x6dc>
   177c4:	ldr	r1, [sp, #160]	; 0xa0
   177c8:	str	r0, [sp, #72]	; 0x48
   177cc:	ldr	r0, [pc, #1160]	; 17c5c <close_stdout@@Base+0x154c>
   177d0:	add	r0, pc, r0
   177d4:	bl	16dec <close_stdout@@Base+0x6dc>
   177d8:	str	r0, [sp, #68]	; 0x44
   177dc:	ldr	r0, [sp, #36]	; 0x24
   177e0:	cmp	r0, #0
   177e4:	movne	r9, #0
   177e8:	bne	17820 <close_stdout@@Base+0x1110>
   177ec:	ldr	r1, [sp, #72]	; 0x48
   177f0:	ldrb	r3, [r1]
   177f4:	cmp	r3, #0
   177f8:	beq	17bf8 <close_stdout@@Base+0x14e8>
   177fc:	mov	r2, r1
   17800:	ldr	r1, [sp, #40]	; 0x28
   17804:	mov	r9, r0
   17808:	cmp	r9, sl
   1780c:	strbcc	r3, [r1, r9]
   17810:	ldrb	r3, [r2, #1]!
   17814:	add	r9, r9, #1
   17818:	cmp	r3, #0
   1781c:	bne	17808 <close_stdout@@Base+0x10f8>
   17820:	ldr	r0, [sp, #68]	; 0x44
   17824:	str	r0, [sp, #52]	; 0x34
   17828:	bl	114d8 <strlen@plt>
   1782c:	mov	r2, #1
   17830:	str	r2, [sp, #24]
   17834:	str	r0, [sp, #28]
   17838:	b	17004 <close_stdout@@Base+0x8f4>
   1783c:	ldr	r3, [pc, #1052]	; 17c60 <close_stdout@@Base+0x1550>
   17840:	mov	r2, #0
   17844:	mov	r1, #1
   17848:	mov	r0, #2
   1784c:	add	r3, pc, r3
   17850:	str	r1, [sp, #36]	; 0x24
   17854:	str	r2, [sp, #24]
   17858:	mov	r9, r2
   1785c:	str	r1, [sp, #28]
   17860:	str	r3, [sp, #52]	; 0x34
   17864:	str	r0, [sp, #160]	; 0xa0
   17868:	b	17004 <close_stdout@@Base+0x8f4>
   1786c:	ldr	r3, [sp, #36]	; 0x24
   17870:	cmp	r3, #0
   17874:	bne	17c04 <close_stdout@@Base+0x14f4>
   17878:	cmp	sl, #0
   1787c:	beq	17b60 <close_stdout@@Base+0x1450>
   17880:	ldr	r1, [sp, #40]	; 0x28
   17884:	mov	r3, #39	; 0x27
   17888:	ldr	r2, [sp, #36]	; 0x24
   1788c:	mov	r0, #1
   17890:	mov	r9, r0
   17894:	str	r0, [sp, #28]
   17898:	strb	r3, [r1]
   1789c:	ldr	r3, [pc, #960]	; 17c64 <close_stdout@@Base+0x1554>
   178a0:	str	r2, [sp, #24]
   178a4:	add	r3, pc, r3
   178a8:	str	r3, [sp, #52]	; 0x34
   178ac:	b	17004 <close_stdout@@Base+0x8f4>
   178b0:	ldr	r2, [sp, #28]
   178b4:	cmp	r2, #1
   178b8:	add	r4, fp, r2
   178bc:	movls	r3, #0
   178c0:	movhi	r3, #1
   178c4:	cmn	r8, #1
   178c8:	movne	r3, #0
   178cc:	cmp	r3, #0
   178d0:	beq	178e0 <close_stdout@@Base+0x11d0>
   178d4:	ldr	r0, [sp, #32]
   178d8:	bl	114d8 <strlen@plt>
   178dc:	mov	r8, r0
   178e0:	cmp	r8, r4
   178e4:	ldrcc	r3, [sp, #32]
   178e8:	movcc	r6, #0
   178ec:	addcc	r5, r3, fp
   178f0:	bcc	17060 <close_stdout@@Base+0x950>
   178f4:	ldr	r0, [sp, #32]
   178f8:	ldr	r1, [sp, #52]	; 0x34
   178fc:	add	r5, r0, fp
   17900:	ldr	r2, [sp, #28]
   17904:	mov	r0, r5
   17908:	bl	1137c <memcmp@plt>
   1790c:	cmp	r0, #0
   17910:	bne	17928 <close_stdout@@Base+0x1218>
   17914:	ldr	r1, [sp, #36]	; 0x24
   17918:	cmp	r1, #0
   1791c:	bne	17480 <close_stdout@@Base+0xd70>
   17920:	mov	r6, #1
   17924:	b	17060 <close_stdout@@Base+0x950>
   17928:	mov	r6, #0
   1792c:	b	17060 <close_stdout@@Base+0x950>
   17930:	add	r7, sp, #108	; 0x6c
   17934:	cmn	r8, #1
   17938:	mov	r3, #0
   1793c:	str	r3, [sp, #108]	; 0x6c
   17940:	str	r3, [r7, #4]
   17944:	beq	17b30 <close_stdout@@Base+0x1420>
   17948:	mov	r1, #0
   1794c:	ldr	r0, [sp, #32]
   17950:	mov	ip, #1
   17954:	str	r9, [sp, #88]	; 0x58
   17958:	str	r6, [sp, #96]	; 0x60
   1795c:	mov	r9, r1
   17960:	str	r5, [sp, #100]	; 0x64
   17964:	mov	r6, ip
   17968:	mov	r5, r7
   1796c:	add	r3, sp, #104	; 0x68
   17970:	sub	r0, r0, #1
   17974:	str	r3, [sp, #80]	; 0x50
   17978:	str	r0, [sp, #84]	; 0x54
   1797c:	str	r1, [sp, #60]	; 0x3c
   17980:	str	r4, [sp, #92]	; 0x5c
   17984:	ldr	r2, [sp, #32]
   17988:	add	r7, r9, fp
   1798c:	add	r0, sp, #104	; 0x68
   17990:	mov	r3, r5
   17994:	add	r4, r2, r7
   17998:	rsb	r2, r7, r8
   1799c:	mov	r1, r4
   179a0:	bl	11424 <mbrtowc@plt>
   179a4:	subs	r2, r0, #0
   179a8:	beq	17ab4 <close_stdout@@Base+0x13a4>
   179ac:	cmn	r2, #1
   179b0:	beq	17bdc <close_stdout@@Base+0x14cc>
   179b4:	cmn	r2, #2
   179b8:	beq	17b80 <close_stdout@@Base+0x1470>
   179bc:	ldr	r3, [sp, #36]	; 0x24
   179c0:	ldr	r0, [sp, #160]	; 0xa0
   179c4:	cmp	r0, #2
   179c8:	movne	r3, #0
   179cc:	andeq	r3, r3, #1
   179d0:	cmp	r3, #0
   179d4:	beq	17a90 <close_stdout@@Base+0x1380>
   179d8:	cmp	r2, #1
   179dc:	beq	17a90 <close_stdout@@Base+0x1380>
   179e0:	ldr	r1, [sp, #84]	; 0x54
   179e4:	add	r3, r1, r2
   179e8:	add	r7, r3, r7
   179ec:	ldrb	r3, [r4, #1]!
   179f0:	sub	r3, r3, #91	; 0x5b
   179f4:	cmp	r3, #33	; 0x21
   179f8:	addls	pc, pc, r3, lsl #2
   179fc:	b	17a88 <close_stdout@@Base+0x1378>
   17a00:	b	17480 <close_stdout@@Base+0xd70>
   17a04:	b	17480 <close_stdout@@Base+0xd70>
   17a08:	b	17a88 <close_stdout@@Base+0x1378>
   17a0c:	b	17480 <close_stdout@@Base+0xd70>
   17a10:	b	17a88 <close_stdout@@Base+0x1378>
   17a14:	b	17480 <close_stdout@@Base+0xd70>
   17a18:	b	17a88 <close_stdout@@Base+0x1378>
   17a1c:	b	17a88 <close_stdout@@Base+0x1378>
   17a20:	b	17a88 <close_stdout@@Base+0x1378>
   17a24:	b	17a88 <close_stdout@@Base+0x1378>
   17a28:	b	17a88 <close_stdout@@Base+0x1378>
   17a2c:	b	17a88 <close_stdout@@Base+0x1378>
   17a30:	b	17a88 <close_stdout@@Base+0x1378>
   17a34:	b	17a88 <close_stdout@@Base+0x1378>
   17a38:	b	17a88 <close_stdout@@Base+0x1378>
   17a3c:	b	17a88 <close_stdout@@Base+0x1378>
   17a40:	b	17a88 <close_stdout@@Base+0x1378>
   17a44:	b	17a88 <close_stdout@@Base+0x1378>
   17a48:	b	17a88 <close_stdout@@Base+0x1378>
   17a4c:	b	17a88 <close_stdout@@Base+0x1378>
   17a50:	b	17a88 <close_stdout@@Base+0x1378>
   17a54:	b	17a88 <close_stdout@@Base+0x1378>
   17a58:	b	17a88 <close_stdout@@Base+0x1378>
   17a5c:	b	17a88 <close_stdout@@Base+0x1378>
   17a60:	b	17a88 <close_stdout@@Base+0x1378>
   17a64:	b	17a88 <close_stdout@@Base+0x1378>
   17a68:	b	17a88 <close_stdout@@Base+0x1378>
   17a6c:	b	17a88 <close_stdout@@Base+0x1378>
   17a70:	b	17a88 <close_stdout@@Base+0x1378>
   17a74:	b	17a88 <close_stdout@@Base+0x1378>
   17a78:	b	17a88 <close_stdout@@Base+0x1378>
   17a7c:	b	17a88 <close_stdout@@Base+0x1378>
   17a80:	b	17a88 <close_stdout@@Base+0x1378>
   17a84:	b	17480 <close_stdout@@Base+0xd70>
   17a88:	cmp	r4, r7
   17a8c:	bne	179ec <close_stdout@@Base+0x12dc>
   17a90:	ldr	r0, [sp, #104]	; 0x68
   17a94:	add	r9, r9, r2
   17a98:	bl	113c4 <iswprint@plt>
   17a9c:	cmp	r0, #0
   17aa0:	mov	r0, r5
   17aa4:	moveq	r6, #0
   17aa8:	bl	11364 <mbsinit@plt>
   17aac:	cmp	r0, #0
   17ab0:	beq	17984 <close_stdout@@Base+0x1274>
   17ab4:	mov	ip, r6
   17ab8:	eor	r2, ip, #1
   17abc:	str	r9, [sp, #60]	; 0x3c
   17ac0:	ldr	r4, [sp, #92]	; 0x5c
   17ac4:	uxtb	r2, r2
   17ac8:	ldr	r9, [sp, #88]	; 0x58
   17acc:	ldr	r6, [sp, #96]	; 0x60
   17ad0:	ldr	r5, [sp, #100]	; 0x64
   17ad4:	ldr	r3, [sp, #60]	; 0x3c
   17ad8:	cmp	r3, #1
   17adc:	bls	17660 <close_stdout@@Base+0xf50>
   17ae0:	ldr	r0, [sp, #24]
   17ae4:	and	r2, r2, r0
   17ae8:	b	1766c <close_stdout@@Base+0xf5c>
   17aec:	ldr	r2, [sp, #164]	; 0xa4
   17af0:	tst	r2, #1
   17af4:	addne	fp, fp, #1
   17af8:	bne	17028 <close_stdout@@Base+0x918>
   17afc:	b	17338 <close_stdout@@Base+0xc28>
   17b00:	ldr	r0, [sp, #36]	; 0x24
   17b04:	cmp	r0, #0
   17b08:	beq	17338 <close_stdout@@Base+0xc28>
   17b0c:	b	17480 <close_stdout@@Base+0xd70>
   17b10:	ldr	r2, [sp, #32]
   17b14:	ldrb	r3, [r2, #1]
   17b18:	adds	r3, r3, #0
   17b1c:	movne	r3, #1
   17b20:	b	17454 <close_stdout@@Base+0xd44>
   17b24:	bl	115f8 <abort@plt>
   17b28:	ldr	r8, [sp, #60]	; 0x3c
   17b2c:	b	17480 <close_stdout@@Base+0xd70>
   17b30:	ldr	r0, [sp, #32]
   17b34:	bl	114d8 <strlen@plt>
   17b38:	mov	r8, r0
   17b3c:	b	17948 <close_stdout@@Base+0x1238>
   17b40:	ldr	r2, [pc, #288]	; 17c68 <close_stdout@@Base+0x1558>
   17b44:	mov	r1, #1
   17b48:	mov	r9, r1
   17b4c:	str	r1, [sp, #24]
   17b50:	add	r2, pc, r2
   17b54:	str	r1, [sp, #28]
   17b58:	str	r2, [sp, #52]	; 0x34
   17b5c:	b	17004 <close_stdout@@Base+0x8f4>
   17b60:	ldr	r2, [pc, #260]	; 17c6c <close_stdout@@Base+0x155c>
   17b64:	mov	r3, #1
   17b68:	mov	r9, r3
   17b6c:	str	r3, [sp, #28]
   17b70:	add	r2, pc, r2
   17b74:	str	sl, [sp, #24]
   17b78:	str	r2, [sp, #52]	; 0x34
   17b7c:	b	17004 <close_stdout@@Base+0x8f4>
   17b80:	cmp	r8, r7
   17b84:	str	r9, [sp, #60]	; 0x3c
   17b88:	mov	ip, r4
   17b8c:	ldr	r6, [sp, #96]	; 0x60
   17b90:	ldr	r9, [sp, #88]	; 0x58
   17b94:	ldr	r4, [sp, #92]	; 0x5c
   17b98:	ldr	r5, [sp, #100]	; 0x64
   17b9c:	bls	17bd4 <close_stdout@@Base+0x14c4>
   17ba0:	ldrb	r3, [ip]
   17ba4:	cmp	r3, #0
   17ba8:	beq	17bd4 <close_stdout@@Base+0x14c4>
   17bac:	ldr	r3, [sp, #60]	; 0x3c
   17bb0:	b	17bc0 <close_stdout@@Base+0x14b0>
   17bb4:	ldrb	r2, [r5, r3]
   17bb8:	cmp	r2, #0
   17bbc:	beq	17bd0 <close_stdout@@Base+0x14c0>
   17bc0:	add	r3, r3, #1
   17bc4:	add	r2, fp, r3
   17bc8:	cmp	r8, r2
   17bcc:	bhi	17bb4 <close_stdout@@Base+0x14a4>
   17bd0:	str	r3, [sp, #60]	; 0x3c
   17bd4:	mov	r2, #1
   17bd8:	b	17ad4 <close_stdout@@Base+0x13c4>
   17bdc:	str	r9, [sp, #60]	; 0x3c
   17be0:	mov	r2, #1
   17be4:	ldr	r4, [sp, #92]	; 0x5c
   17be8:	ldr	r6, [sp, #96]	; 0x60
   17bec:	ldr	r9, [sp, #88]	; 0x58
   17bf0:	ldr	r5, [sp, #100]	; 0x64
   17bf4:	b	17ad4 <close_stdout@@Base+0x13c4>
   17bf8:	ldr	r9, [sp, #36]	; 0x24
   17bfc:	b	17820 <close_stdout@@Base+0x1110>
   17c00:	bl	11394 <__stack_chk_fail@plt>
   17c04:	ldr	r1, [pc, #100]	; 17c70 <close_stdout@@Base+0x1560>
   17c08:	mov	r3, #0
   17c0c:	mov	r0, #1
   17c10:	str	r3, [sp, #24]
   17c14:	add	r1, pc, r1
   17c18:	str	r0, [sp, #28]
   17c1c:	mov	r9, r3
   17c20:	str	r1, [sp, #52]	; 0x34
   17c24:	b	17004 <close_stdout@@Base+0x8f4>
   17c28:	ldr	r0, [pc, #68]	; 17c74 <close_stdout@@Base+0x1564>
   17c2c:	mov	r3, #1
   17c30:	mov	r9, #0
   17c34:	str	r3, [sp, #24]
   17c38:	add	r0, pc, r0
   17c3c:	str	r3, [sp, #28]
   17c40:	str	r0, [sp, #52]	; 0x34
   17c44:	b	17004 <close_stdout@@Base+0x8f4>
   17c48:	andeq	r8, r1, ip, lsl #1
   17c4c:	andeq	r0, r0, r8, lsr r1
   17c50:	andeq	r6, r0, r8, asr #17
   17c54:	andeq	r6, r0, r4, lsr #17
   17c58:	andeq	r6, r0, r0, ror #16
   17c5c:	andeq	r6, r0, ip, lsr r8
   17c60:	andeq	r6, r0, r0, asr #15
   17c64:	andeq	r6, r0, r8, ror #14
   17c68:	andeq	r6, r0, r0, asr #9
   17c6c:	muleq	r0, ip, r4
   17c70:	strdeq	r6, [r0], -r8
   17c74:	ldrdeq	r6, [r0], -r8
   17c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c7c:	sub	sp, sp, #44	; 0x2c
   17c80:	mov	r6, r0
   17c84:	mov	r9, r1
   17c88:	mov	sl, r2
   17c8c:	mov	r4, r3
   17c90:	bl	11508 <__errno_location@plt>
   17c94:	ldr	fp, [pc, #412]	; 17e38 <close_stdout@@Base+0x1728>
   17c98:	cmp	r6, #0
   17c9c:	add	fp, pc, fp
   17ca0:	ldr	r5, [fp]
   17ca4:	ldr	r1, [r0]
   17ca8:	mov	r8, r0
   17cac:	str	r1, [sp, #36]	; 0x24
   17cb0:	blt	17e30 <close_stdout@@Base+0x1720>
   17cb4:	ldr	r3, [pc, #384]	; 17e3c <close_stdout@@Base+0x172c>
   17cb8:	add	r3, pc, r3
   17cbc:	ldr	r3, [r3]
   17cc0:	cmp	r6, r3
   17cc4:	bcc	17d18 <close_stdout@@Base+0x1608>
   17cc8:	add	r7, r6, #1
   17ccc:	cmn	r7, #-536870911	; 0xe0000001
   17cd0:	bhi	17e34 <close_stdout@@Base+0x1724>
   17cd4:	add	r3, fp, #4
   17cd8:	cmp	r5, r3
   17cdc:	beq	17e08 <close_stdout@@Base+0x16f8>
   17ce0:	mov	r0, r5
   17ce4:	lsl	r1, r7, #3
   17ce8:	bl	1a390 <close_stdout@@Base+0x3c80>
   17cec:	mov	r5, r0
   17cf0:	str	r0, [fp]
   17cf4:	ldr	fp, [pc, #324]	; 17e40 <close_stdout@@Base+0x1730>
   17cf8:	mov	r1, #0
   17cfc:	add	fp, pc, fp
   17d00:	ldr	r0, [fp]
   17d04:	rsb	r2, r0, r7
   17d08:	add	r0, r5, r0, lsl #3
   17d0c:	lsl	r2, r2, #3
   17d10:	bl	1152c <memset@plt>
   17d14:	str	r7, [fp]
   17d18:	add	r2, r4, #8
   17d1c:	str	r2, [sp, #32]
   17d20:	ldr	r1, [r4]
   17d24:	add	fp, r5, r6, lsl #3
   17d28:	ldr	lr, [sp, #32]
   17d2c:	mov	r2, r9
   17d30:	ldr	r3, [r4, #4]
   17d34:	ldr	ip, [r5, r6, lsl #3]
   17d38:	ldr	r7, [fp, #4]
   17d3c:	orr	r3, r3, #1
   17d40:	str	r1, [sp]
   17d44:	str	r3, [sp, #4]
   17d48:	mov	r1, ip
   17d4c:	str	lr, [sp, #8]
   17d50:	mov	r0, r7
   17d54:	ldr	lr, [r4, #40]	; 0x28
   17d58:	str	r3, [sp, #28]
   17d5c:	mov	r3, sl
   17d60:	str	lr, [sp, #12]
   17d64:	ldr	lr, [r4, #44]	; 0x2c
   17d68:	str	ip, [sp, #24]
   17d6c:	str	lr, [sp, #16]
   17d70:	bl	16f50 <close_stdout@@Base+0x840>
   17d74:	ldr	ip, [sp, #24]
   17d78:	cmp	ip, r0
   17d7c:	bhi	17df4 <close_stdout@@Base+0x16e4>
   17d80:	ldr	r3, [pc, #188]	; 17e44 <close_stdout@@Base+0x1734>
   17d84:	add	r1, r0, #1
   17d88:	str	r1, [r5, r6, lsl #3]
   17d8c:	add	r3, pc, r3
   17d90:	cmp	r7, r3
   17d94:	beq	17da8 <close_stdout@@Base+0x1698>
   17d98:	mov	r0, r7
   17d9c:	str	r1, [sp, #24]
   17da0:	bl	11328 <free@plt>
   17da4:	ldr	r1, [sp, #24]
   17da8:	mov	r0, r1
   17dac:	str	r1, [sp, #24]
   17db0:	bl	1a338 <close_stdout@@Base+0x3c28>
   17db4:	ldr	r3, [sp, #28]
   17db8:	ldr	lr, [sp, #32]
   17dbc:	mov	r2, r9
   17dc0:	str	r0, [fp, #4]
   17dc4:	mov	r7, r0
   17dc8:	ldr	ip, [r4]
   17dcc:	str	r3, [sp, #4]
   17dd0:	mov	r3, sl
   17dd4:	str	lr, [sp, #8]
   17dd8:	str	ip, [sp]
   17ddc:	ldr	ip, [r4, #40]	; 0x28
   17de0:	ldr	r1, [sp, #24]
   17de4:	str	ip, [sp, #12]
   17de8:	ldr	ip, [r4, #44]	; 0x2c
   17dec:	str	ip, [sp, #16]
   17df0:	bl	16f50 <close_stdout@@Base+0x840>
   17df4:	ldr	r1, [sp, #36]	; 0x24
   17df8:	mov	r0, r7
   17dfc:	str	r1, [r8]
   17e00:	add	sp, sp, #44	; 0x2c
   17e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e08:	lsl	r1, r7, #3
   17e0c:	mov	r0, #0
   17e10:	str	r3, [sp, #24]
   17e14:	bl	1a390 <close_stdout@@Base+0x3c80>
   17e18:	ldr	r3, [sp, #24]
   17e1c:	mov	r5, r0
   17e20:	ldm	r3, {r0, r1}
   17e24:	str	r5, [fp]
   17e28:	stm	r5, {r0, r1}
   17e2c:	b	17cf4 <close_stdout@@Base+0x15e4>
   17e30:	bl	115f8 <abort@plt>
   17e34:	bl	1a54c <close_stdout@@Base+0x3e3c>
   17e38:	andeq	r7, r1, r8, lsl #11
   17e3c:	andeq	r7, r1, r8, lsr r5
   17e40:	strdeq	r7, [r1], -r4
   17e44:			; <UNDEFINED> instruction: 0x000175b8
   17e48:	push	{r4, r5, r6, lr}
   17e4c:	mov	r5, r0
   17e50:	bl	11508 <__errno_location@plt>
   17e54:	cmp	r5, #0
   17e58:	mov	r1, #48	; 0x30
   17e5c:	mov	r4, r0
   17e60:	ldr	r0, [pc, #24]	; 17e80 <close_stdout@@Base+0x1770>
   17e64:	ldr	r6, [r4]
   17e68:	add	r0, pc, r0
   17e6c:	add	r0, r0, #256	; 0x100
   17e70:	movne	r0, r5
   17e74:	bl	1a50c <close_stdout@@Base+0x3dfc>
   17e78:	str	r6, [r4]
   17e7c:	pop	{r4, r5, r6, pc}
   17e80:	ldrdeq	r7, [r1], -ip
   17e84:	cmp	r0, #0
   17e88:	beq	17e94 <close_stdout@@Base+0x1784>
   17e8c:	ldr	r0, [r0]
   17e90:	bx	lr
   17e94:	ldr	r0, [pc, #12]	; 17ea8 <close_stdout@@Base+0x1798>
   17e98:	add	r0, pc, r0
   17e9c:	add	r0, r0, #256	; 0x100
   17ea0:	ldr	r0, [r0]
   17ea4:	bx	lr
   17ea8:	andeq	r7, r1, ip, lsr #9
   17eac:	cmp	r0, #0
   17eb0:	beq	17ebc <close_stdout@@Base+0x17ac>
   17eb4:	str	r1, [r0]
   17eb8:	bx	lr
   17ebc:	ldr	r0, [pc, #12]	; 17ed0 <close_stdout@@Base+0x17c0>
   17ec0:	add	r0, pc, r0
   17ec4:	add	r0, r0, #256	; 0x100
   17ec8:	str	r1, [r0]
   17ecc:	bx	lr
   17ed0:	andeq	r7, r1, r4, lsl #9
   17ed4:	cmp	r0, #0
   17ed8:	movne	r3, r0
   17edc:	beq	17f0c <close_stdout@@Base+0x17fc>
   17ee0:	lsr	ip, r1, #5
   17ee4:	and	r1, r1, #31
   17ee8:	add	r3, r3, ip, lsl #2
   17eec:	ldr	ip, [r3, #8]
   17ef0:	lsr	r0, ip, r1
   17ef4:	eor	r2, r0, r2
   17ef8:	and	r0, r0, #1
   17efc:	and	r2, r2, #1
   17f00:	eor	ip, ip, r2, lsl r1
   17f04:	str	ip, [r3, #8]
   17f08:	bx	lr
   17f0c:	ldr	r3, [pc, #8]	; 17f1c <close_stdout@@Base+0x180c>
   17f10:	add	r3, pc, r3
   17f14:	add	r3, r3, #256	; 0x100
   17f18:	b	17ee0 <close_stdout@@Base+0x17d0>
   17f1c:	andeq	r7, r1, r4, lsr r4
   17f20:	subs	r3, r0, #0
   17f24:	beq	17f34 <close_stdout@@Base+0x1824>
   17f28:	ldr	r0, [r3, #4]
   17f2c:	str	r1, [r3, #4]
   17f30:	bx	lr
   17f34:	ldr	r3, [pc, #8]	; 17f44 <close_stdout@@Base+0x1834>
   17f38:	add	r3, pc, r3
   17f3c:	add	r3, r3, #256	; 0x100
   17f40:	b	17f28 <close_stdout@@Base+0x1818>
   17f44:	andeq	r7, r1, ip, lsl #8
   17f48:	cmp	r0, #0
   17f4c:	push	{r3, lr}
   17f50:	beq	17f74 <close_stdout@@Base+0x1864>
   17f54:	cmp	r2, #0
   17f58:	cmpne	r1, #0
   17f5c:	mov	r3, #8
   17f60:	strne	r1, [r0, #40]	; 0x28
   17f64:	str	r3, [r0]
   17f68:	strne	r2, [r0, #44]	; 0x2c
   17f6c:	popne	{r3, pc}
   17f70:	bl	115f8 <abort@plt>
   17f74:	ldr	r0, [pc, #8]	; 17f84 <close_stdout@@Base+0x1874>
   17f78:	add	r0, pc, r0
   17f7c:	add	r0, r0, #256	; 0x100
   17f80:	b	17f54 <close_stdout@@Base+0x1844>
   17f84:	andeq	r7, r1, ip, asr #7
   17f88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f8c:	sub	sp, sp, #24
   17f90:	mov	r7, r0
   17f94:	mov	sl, r1
   17f98:	ldr	r4, [sp, #56]	; 0x38
   17f9c:	mov	r9, r2
   17fa0:	mov	r8, r3
   17fa4:	cmp	r4, #0
   17fa8:	beq	17ffc <close_stdout@@Base+0x18ec>
   17fac:	bl	11508 <__errno_location@plt>
   17fb0:	ldr	r3, [r4]
   17fb4:	add	lr, r4, #8
   17fb8:	mov	r1, sl
   17fbc:	mov	r2, r9
   17fc0:	ldr	r6, [r0]
   17fc4:	mov	r5, r0
   17fc8:	str	r3, [sp]
   17fcc:	mov	r0, r7
   17fd0:	ldr	ip, [r4, #4]
   17fd4:	mov	r3, r8
   17fd8:	stmib	sp, {ip, lr}
   17fdc:	ldr	ip, [r4, #40]	; 0x28
   17fe0:	str	ip, [sp, #12]
   17fe4:	ldr	ip, [r4, #44]	; 0x2c
   17fe8:	str	ip, [sp, #16]
   17fec:	bl	16f50 <close_stdout@@Base+0x840>
   17ff0:	str	r6, [r5]
   17ff4:	add	sp, sp, #24
   17ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ffc:	ldr	r4, [pc, #8]	; 1800c <close_stdout@@Base+0x18fc>
   18000:	add	r4, pc, r4
   18004:	add	r4, r4, #256	; 0x100
   18008:	b	17fac <close_stdout@@Base+0x189c>
   1800c:	andeq	r7, r1, r4, asr #6
   18010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18014:	subs	r4, r3, #0
   18018:	sub	sp, sp, #36	; 0x24
   1801c:	mov	r7, r0
   18020:	mov	r6, r1
   18024:	mov	r5, r2
   18028:	beq	180e4 <close_stdout@@Base+0x19d4>
   1802c:	bl	11508 <__errno_location@plt>
   18030:	ldr	r3, [r4]
   18034:	ldr	sl, [r4, #4]
   18038:	add	r9, r4, #8
   1803c:	mov	r8, r0
   18040:	mov	r0, #0
   18044:	ldr	r2, [r8]
   18048:	cmp	r5, r0
   1804c:	orreq	sl, sl, #1
   18050:	str	r9, [sp, #8]
   18054:	mov	r1, r0
   18058:	stm	sp, {r3, sl}
   1805c:	mov	r3, r6
   18060:	ldr	ip, [r4, #40]	; 0x28
   18064:	str	r2, [sp, #28]
   18068:	mov	r2, r7
   1806c:	str	ip, [sp, #12]
   18070:	ldr	ip, [r4, #44]	; 0x2c
   18074:	str	ip, [sp, #16]
   18078:	bl	16f50 <close_stdout@@Base+0x840>
   1807c:	add	r1, r0, #1
   18080:	mov	fp, r0
   18084:	str	r1, [sp, #24]
   18088:	mov	r0, r1
   1808c:	bl	1a338 <close_stdout@@Base+0x3c28>
   18090:	ldr	lr, [r4]
   18094:	str	sl, [sp, #4]
   18098:	mov	r3, r6
   1809c:	str	r9, [sp, #8]
   180a0:	mov	r2, r7
   180a4:	str	lr, [sp]
   180a8:	ldr	lr, [r4, #40]	; 0x28
   180ac:	ldr	r1, [sp, #24]
   180b0:	str	lr, [sp, #12]
   180b4:	ldr	lr, [r4, #44]	; 0x2c
   180b8:	str	lr, [sp, #16]
   180bc:	str	r0, [sp, #24]
   180c0:	bl	16f50 <close_stdout@@Base+0x840>
   180c4:	ldr	r3, [sp, #28]
   180c8:	cmp	r5, #0
   180cc:	str	r3, [r8]
   180d0:	ldr	ip, [sp, #24]
   180d4:	strne	fp, [r5]
   180d8:	mov	r0, ip
   180dc:	add	sp, sp, #36	; 0x24
   180e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180e4:	ldr	r4, [pc, #8]	; 180f4 <close_stdout@@Base+0x19e4>
   180e8:	add	r4, pc, r4
   180ec:	add	r4, r4, #256	; 0x100
   180f0:	b	1802c <close_stdout@@Base+0x191c>
   180f4:	andeq	r7, r1, ip, asr r2
   180f8:	mov	r3, r2
   180fc:	mov	r2, #0
   18100:	b	18010 <close_stdout@@Base+0x1900>
   18104:	ldr	r2, [pc, #152]	; 181a4 <close_stdout@@Base+0x1a94>
   18108:	push	{r3, r4, r5, r6, r7, lr}
   1810c:	add	r2, pc, r2
   18110:	ldr	r3, [pc, #144]	; 181a8 <close_stdout@@Base+0x1a98>
   18114:	ldr	r6, [r2]
   18118:	add	r3, pc, r3
   1811c:	cmp	r6, #1
   18120:	ldr	r7, [r3]
   18124:	movhi	r4, #1
   18128:	movhi	r5, r7
   1812c:	bls	18148 <close_stdout@@Base+0x1a38>
   18130:	ldr	r0, [r5, #12]
   18134:	add	r4, r4, #1
   18138:	bl	11328 <free@plt>
   1813c:	cmp	r4, r6
   18140:	add	r5, r5, #8
   18144:	bne	18130 <close_stdout@@Base+0x1a20>
   18148:	ldr	r4, [pc, #92]	; 181ac <close_stdout@@Base+0x1a9c>
   1814c:	ldr	r0, [r7, #4]
   18150:	add	r4, pc, r4
   18154:	cmp	r0, r4
   18158:	beq	18170 <close_stdout@@Base+0x1a60>
   1815c:	bl	11328 <free@plt>
   18160:	ldr	r3, [pc, #72]	; 181b0 <close_stdout@@Base+0x1aa0>
   18164:	mov	r2, #256	; 0x100
   18168:	add	r3, pc, r3
   1816c:	stmib	r3, {r2, r4}
   18170:	ldr	r4, [pc, #60]	; 181b4 <close_stdout@@Base+0x1aa4>
   18174:	add	r4, pc, r4
   18178:	add	r5, r4, #4
   1817c:	cmp	r7, r5
   18180:	beq	18190 <close_stdout@@Base+0x1a80>
   18184:	mov	r0, r7
   18188:	bl	11328 <free@plt>
   1818c:	str	r5, [r4]
   18190:	ldr	r3, [pc, #32]	; 181b8 <close_stdout@@Base+0x1aa8>
   18194:	mov	r2, #1
   18198:	add	r3, pc, r3
   1819c:	str	r2, [r3]
   181a0:	pop	{r3, r4, r5, r6, r7, pc}
   181a4:	andeq	r7, r1, r4, ror #1
   181a8:	andeq	r7, r1, ip, lsl #2
   181ac:	strdeq	r7, [r1], -r4
   181b0:	strheq	r7, [r1], -ip
   181b4:	strheq	r7, [r1], -r0
   181b8:	andeq	r7, r1, r8, asr r0
   181bc:	ldr	r3, [pc, #12]	; 181d0 <close_stdout@@Base+0x1ac0>
   181c0:	mvn	r2, #0
   181c4:	add	r3, pc, r3
   181c8:	add	r3, r3, #256	; 0x100
   181cc:	b	17c78 <close_stdout@@Base+0x1568>
   181d0:	andeq	r7, r1, r0, lsl #3
   181d4:	ldr	r3, [pc, #8]	; 181e4 <close_stdout@@Base+0x1ad4>
   181d8:	add	r3, pc, r3
   181dc:	add	r3, r3, #256	; 0x100
   181e0:	b	17c78 <close_stdout@@Base+0x1568>
   181e4:	andeq	r7, r1, ip, ror #2
   181e8:	mov	r1, r0
   181ec:	mov	r0, #0
   181f0:	b	181bc <close_stdout@@Base+0x1aac>
   181f4:	mov	r2, r1
   181f8:	mov	r1, r0
   181fc:	mov	r0, #0
   18200:	b	181d4 <close_stdout@@Base+0x1ac4>
   18204:	ldr	r3, [pc, #92]	; 18268 <close_stdout@@Base+0x1b58>
   18208:	ldr	ip, [pc, #92]	; 1826c <close_stdout@@Base+0x1b5c>
   1820c:	add	r3, pc, r3
   18210:	push	{r4, r5, r6, r7, lr}
   18214:	sub	sp, sp, #60	; 0x3c
   18218:	ldr	r4, [r3, ip]
   1821c:	add	r5, sp, #4
   18220:	mov	r7, r2
   18224:	mov	r6, r0
   18228:	mov	r0, r5
   1822c:	ldr	r3, [r4]
   18230:	str	r3, [sp, #52]	; 0x34
   18234:	bl	16d98 <close_stdout@@Base+0x688>
   18238:	mov	r3, r5
   1823c:	mvn	r2, #0
   18240:	mov	r0, r6
   18244:	mov	r1, r7
   18248:	bl	17c78 <close_stdout@@Base+0x1568>
   1824c:	ldr	r2, [sp, #52]	; 0x34
   18250:	ldr	r3, [r4]
   18254:	cmp	r2, r3
   18258:	bne	18264 <close_stdout@@Base+0x1b54>
   1825c:	add	sp, sp, #60	; 0x3c
   18260:	pop	{r4, r5, r6, r7, pc}
   18264:	bl	11394 <__stack_chk_fail@plt>
   18268:	andeq	r6, r1, ip, ror #27
   1826c:	andeq	r0, r0, r8, lsr r1
   18270:	ldr	ip, [pc, #96]	; 182d8 <close_stdout@@Base+0x1bc8>
   18274:	push	{r4, r5, r6, r7, r8, lr}
   18278:	add	ip, pc, ip
   1827c:	ldr	lr, [pc, #88]	; 182dc <close_stdout@@Base+0x1bcc>
   18280:	sub	sp, sp, #56	; 0x38
   18284:	mov	r8, r3
   18288:	add	r5, sp, #4
   1828c:	mov	r7, r2
   18290:	mov	r6, r0
   18294:	ldr	r4, [ip, lr]
   18298:	mov	r0, r5
   1829c:	ldr	r3, [r4]
   182a0:	str	r3, [sp, #52]	; 0x34
   182a4:	bl	16d98 <close_stdout@@Base+0x688>
   182a8:	mov	r2, r8
   182ac:	mov	r3, r5
   182b0:	mov	r0, r6
   182b4:	mov	r1, r7
   182b8:	bl	17c78 <close_stdout@@Base+0x1568>
   182bc:	ldr	r2, [sp, #52]	; 0x34
   182c0:	ldr	r3, [r4]
   182c4:	cmp	r2, r3
   182c8:	bne	182d4 <close_stdout@@Base+0x1bc4>
   182cc:	add	sp, sp, #56	; 0x38
   182d0:	pop	{r4, r5, r6, r7, r8, pc}
   182d4:	bl	11394 <__stack_chk_fail@plt>
   182d8:	andeq	r6, r1, r0, lsl #27
   182dc:	andeq	r0, r0, r8, lsr r1
   182e0:	mov	r2, r1
   182e4:	mov	r1, r0
   182e8:	mov	r0, #0
   182ec:	b	18204 <close_stdout@@Base+0x1af4>
   182f0:	mov	ip, r1
   182f4:	mov	r3, r2
   182f8:	mov	r1, r0
   182fc:	mov	r2, ip
   18300:	mov	r0, #0
   18304:	b	18270 <close_stdout@@Base+0x1b60>
   18308:	push	{r4, r5, r6, r7, r8, lr}
   1830c:	mov	r5, r2
   18310:	ldr	lr, [pc, #136]	; 183a0 <close_stdout@@Base+0x1c90>
   18314:	mov	r7, r0
   18318:	mov	r6, r1
   1831c:	ldr	r4, [pc, #128]	; 183a4 <close_stdout@@Base+0x1c94>
   18320:	add	lr, pc, lr
   18324:	sub	sp, sp, #56	; 0x38
   18328:	add	lr, lr, #256	; 0x100
   1832c:	ldr	r8, [pc, #116]	; 183a8 <close_stdout@@Base+0x1c98>
   18330:	add	r4, pc, r4
   18334:	add	ip, sp, #4
   18338:	ldm	lr!, {r0, r1, r2, r3}
   1833c:	ldr	r4, [r4, r8]
   18340:	stmia	ip!, {r0, r1, r2, r3}
   18344:	ldm	lr!, {r0, r1, r2, r3}
   18348:	ldr	r8, [r4]
   1834c:	stmia	ip!, {r0, r1, r2, r3}
   18350:	ldm	lr, {r0, r1, r2, r3}
   18354:	str	r8, [sp, #52]	; 0x34
   18358:	stm	ip, {r0, r1, r2, r3}
   1835c:	mov	r1, r5
   18360:	add	r5, sp, #4
   18364:	mov	r2, #1
   18368:	mov	r0, r5
   1836c:	bl	17ed4 <close_stdout@@Base+0x17c4>
   18370:	mov	r2, r6
   18374:	mov	r3, r5
   18378:	mov	r1, r7
   1837c:	mov	r0, #0
   18380:	bl	17c78 <close_stdout@@Base+0x1568>
   18384:	ldr	r2, [sp, #52]	; 0x34
   18388:	ldr	r3, [r4]
   1838c:	cmp	r2, r3
   18390:	bne	1839c <close_stdout@@Base+0x1c8c>
   18394:	add	sp, sp, #56	; 0x38
   18398:	pop	{r4, r5, r6, r7, r8, pc}
   1839c:	bl	11394 <__stack_chk_fail@plt>
   183a0:	andeq	r7, r1, r4, lsr #32
   183a4:	andeq	r6, r1, r8, asr #25
   183a8:	andeq	r0, r0, r8, lsr r1
   183ac:	mov	r2, r1
   183b0:	mvn	r1, #0
   183b4:	b	18308 <close_stdout@@Base+0x1bf8>
   183b8:	mov	r1, #58	; 0x3a
   183bc:	b	183ac <close_stdout@@Base+0x1c9c>
   183c0:	mov	r2, #58	; 0x3a
   183c4:	b	18308 <close_stdout@@Base+0x1bf8>
   183c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   183cc:	mov	r5, r2
   183d0:	ldr	lr, [pc, #144]	; 18468 <close_stdout@@Base+0x1d58>
   183d4:	mov	r8, r0
   183d8:	mov	r9, r1
   183dc:	mov	r7, r3
   183e0:	add	lr, pc, lr
   183e4:	ldr	r4, [pc, #128]	; 1846c <close_stdout@@Base+0x1d5c>
   183e8:	add	lr, lr, #256	; 0x100
   183ec:	sub	sp, sp, #56	; 0x38
   183f0:	ldr	sl, [pc, #120]	; 18470 <close_stdout@@Base+0x1d60>
   183f4:	add	r4, pc, r4
   183f8:	ldm	lr!, {r0, r1, r2, r3}
   183fc:	add	ip, sp, #4
   18400:	ldr	r4, [r4, sl]
   18404:	ldr	r6, [sp, #88]	; 0x58
   18408:	stmia	ip!, {r0, r1, r2, r3}
   1840c:	ldm	lr!, {r0, r1, r2, r3}
   18410:	ldr	sl, [r4]
   18414:	stmia	ip!, {r0, r1, r2, r3}
   18418:	ldm	lr, {r0, r1, r2, r3}
   1841c:	str	sl, [sp, #52]	; 0x34
   18420:	stm	ip, {r0, r1, r2, r3}
   18424:	mov	r2, r5
   18428:	add	r5, sp, #4
   1842c:	mov	r1, r9
   18430:	mov	r0, r5
   18434:	bl	17f48 <close_stdout@@Base+0x1838>
   18438:	mov	r2, r6
   1843c:	mov	r3, r5
   18440:	mov	r0, r8
   18444:	mov	r1, r7
   18448:	bl	17c78 <close_stdout@@Base+0x1568>
   1844c:	ldr	r2, [sp, #52]	; 0x34
   18450:	ldr	r3, [r4]
   18454:	cmp	r2, r3
   18458:	bne	18464 <close_stdout@@Base+0x1d54>
   1845c:	add	sp, sp, #56	; 0x38
   18460:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18464:	bl	11394 <__stack_chk_fail@plt>
   18468:	andeq	r6, r1, r4, ror #30
   1846c:	andeq	r6, r1, r4, lsl #24
   18470:	andeq	r0, r0, r8, lsr r1
   18474:	push	{lr}		; (str lr, [sp, #-4]!)
   18478:	sub	sp, sp, #12
   1847c:	mvn	ip, #0
   18480:	str	ip, [sp]
   18484:	bl	183c8 <close_stdout@@Base+0x1cb8>
   18488:	add	sp, sp, #12
   1848c:	pop	{pc}		; (ldr pc, [sp], #4)
   18490:	mov	ip, r1
   18494:	mov	r3, r2
   18498:	mov	r1, r0
   1849c:	mov	r2, ip
   184a0:	mov	r0, #0
   184a4:	b	18474 <close_stdout@@Base+0x1d64>
   184a8:	push	{lr}		; (str lr, [sp, #-4]!)
   184ac:	sub	sp, sp, #12
   184b0:	mov	lr, r1
   184b4:	mov	ip, r2
   184b8:	mov	r1, r0
   184bc:	str	r3, [sp]
   184c0:	mov	r2, lr
   184c4:	mov	r3, ip
   184c8:	mov	r0, #0
   184cc:	bl	183c8 <close_stdout@@Base+0x1cb8>
   184d0:	add	sp, sp, #12
   184d4:	pop	{pc}		; (ldr pc, [sp], #4)
   184d8:	ldr	r3, [pc, #12]	; 184ec <close_stdout@@Base+0x1ddc>
   184dc:	ldr	ip, [pc, #12]	; 184f0 <close_stdout@@Base+0x1de0>
   184e0:	add	r3, pc, r3
   184e4:	ldr	r3, [r3, ip]
   184e8:	b	17c78 <close_stdout@@Base+0x1568>
   184ec:	andeq	r6, r1, r8, lsl fp
   184f0:	andeq	r0, r0, r4, lsr r1
   184f4:	mov	r2, r1
   184f8:	mov	r1, r0
   184fc:	mov	r0, #0
   18500:	b	184d8 <close_stdout@@Base+0x1dc8>
   18504:	mvn	r2, #0
   18508:	b	184d8 <close_stdout@@Base+0x1dc8>
   1850c:	mov	r1, r0
   18510:	mov	r0, #0
   18514:	b	18504 <close_stdout@@Base+0x1df4>
   18518:	cmp	r2, #0
   1851c:	push	{r3, r4, r6, r7, r8, lr}
   18520:	mov	r6, r2
   18524:	mov	r7, r0
   18528:	mov	r8, r1
   1852c:	sub	r4, r2, #1
   18530:	beq	1855c <close_stdout@@Base+0x1e4c>
   18534:	bl	11490 <__ctype_tolower_loc@plt>
   18538:	add	r1, r8, r6
   1853c:	add	r2, r7, r6
   18540:	ldrb	ip, [r1, #-1]!
   18544:	sub	r4, r4, #1
   18548:	ldr	r3, [r0]
   1854c:	cmn	r4, #1
   18550:	ldr	r3, [r3, ip, lsl #2]
   18554:	strb	r3, [r2, #-1]!
   18558:	bne	18540 <close_stdout@@Base+0x1e30>
   1855c:	mov	r0, r7
   18560:	pop	{r3, r4, r6, r7, r8, pc}
   18564:	cmp	r2, #0
   18568:	push	{r3, r4, r6, r7, r8, lr}
   1856c:	mov	r6, r2
   18570:	mov	r7, r0
   18574:	mov	r8, r1
   18578:	sub	r4, r2, #1
   1857c:	beq	185a8 <close_stdout@@Base+0x1e98>
   18580:	bl	1149c <__ctype_toupper_loc@plt>
   18584:	add	r1, r8, r6
   18588:	add	r2, r7, r6
   1858c:	ldrb	ip, [r1, #-1]!
   18590:	sub	r4, r4, #1
   18594:	ldr	r3, [r0]
   18598:	cmn	r4, #1
   1859c:	ldr	r3, [r3, ip, lsl #2]
   185a0:	strb	r3, [r2, #-1]!
   185a4:	bne	1858c <close_stdout@@Base+0x1e7c>
   185a8:	mov	r0, r7
   185ac:	pop	{r3, r4, r6, r7, r8, pc}
   185b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185b4:	sub	sp, sp, #1168	; 0x490
   185b8:	sub	sp, sp, #12
   185bc:	ldr	ip, [pc, #4080]	; 195b4 <close_stdout@@Base+0x2ea4>
   185c0:	mov	r4, r3
   185c4:	mov	r8, r1
   185c8:	ldr	r6, [sp, #1216]	; 0x4c0
   185cc:	add	ip, pc, ip
   185d0:	str	r0, [sp, #48]	; 0x30
   185d4:	ldr	r0, [pc, #4060]	; 195b8 <close_stdout@@Base+0x2ea8>
   185d8:	mov	r3, ip
   185dc:	str	r6, [sp, #40]	; 0x28
   185e0:	str	r2, [sp, #28]
   185e4:	ldr	r0, [ip, r0]
   185e8:	ldr	ip, [r6, #8]
   185ec:	ldr	r6, [r6, #40]	; 0x28
   185f0:	ldr	r3, [r0]
   185f4:	cmp	ip, #12
   185f8:	str	ip, [sp, #36]	; 0x24
   185fc:	subgt	ip, ip, #12
   18600:	str	r0, [sp, #44]	; 0x2c
   18604:	str	r6, [sp, #84]	; 0x54
   18608:	str	r3, [sp, #1172]	; 0x494
   1860c:	strgt	ip, [sp, #36]	; 0x24
   18610:	bgt	18624 <close_stdout@@Base+0x1f14>
   18614:	ldr	ip, [sp, #36]	; 0x24
   18618:	cmp	ip, #0
   1861c:	moveq	ip, #12
   18620:	str	ip, [sp, #36]	; 0x24
   18624:	ldrb	r2, [r4]
   18628:	cmp	r2, #0
   1862c:	beq	19b3c <close_stdout@@Base+0x342c>
   18630:	movw	ip, #46021	; 0xb3c5
   18634:	movw	r6, #34953	; 0x8889
   18638:	movt	ip, #37282	; 0x91a2
   1863c:	movt	r6, #34952	; 0x8888
   18640:	str	ip, [sp, #72]	; 0x48
   18644:	movw	r7, #52429	; 0xcccd
   18648:	str	r6, [sp, #64]	; 0x40
   1864c:	movw	ip, #34079	; 0x851f
   18650:	movw	r6, #9363	; 0x2493
   18654:	movt	ip, #20971	; 0x51eb
   18658:	movt	r6, #37449	; 0x9249
   1865c:	str	ip, [sp, #60]	; 0x3c
   18660:	movt	r7, #52428	; 0xcccc
   18664:	movw	ip, #26215	; 0x6667
   18668:	str	r6, [sp, #56]	; 0x38
   1866c:	movt	ip, #26214	; 0x6666
   18670:	mov	fp, #0
   18674:	str	ip, [sp, #68]	; 0x44
   18678:	str	r7, [sp, #80]	; 0x50
   1867c:	b	186ac <close_stdout@@Base+0x1f9c>
   18680:	ldr	ip, [sp, #28]
   18684:	rsb	r3, fp, ip
   18688:	cmp	r3, #1
   1868c:	bls	18994 <close_stdout@@Base+0x2284>
   18690:	add	fp, fp, #1
   18694:	cmp	r8, #0
   18698:	strbne	r2, [r8], #1
   1869c:	ldrb	r2, [r4, #1]
   186a0:	add	r4, r4, #1
   186a4:	cmp	r2, #0
   186a8:	beq	18ae4 <close_stdout@@Base+0x23d4>
   186ac:	cmp	r2, #37	; 0x25
   186b0:	bne	18680 <close_stdout@@Base+0x1f70>
   186b4:	ldr	r6, [sp, #48]	; 0x30
   186b8:	mov	r1, #0
   186bc:	mov	r3, r4
   186c0:	mov	sl, r1
   186c4:	str	r6, [sp, #32]
   186c8:	ldrb	r2, [r3, #1]
   186cc:	add	r3, r3, #1
   186d0:	cmp	r2, #48	; 0x30
   186d4:	mov	r4, r3
   186d8:	beq	1876c <close_stdout@@Base+0x205c>
   186dc:	bhi	18754 <close_stdout@@Base+0x2044>
   186e0:	cmp	r2, #35	; 0x23
   186e4:	moveq	r1, #1
   186e8:	beq	186c8 <close_stdout@@Base+0x1fb8>
   186ec:	cmp	r2, #45	; 0x2d
   186f0:	beq	1876c <close_stdout@@Base+0x205c>
   186f4:	sub	r0, r2, #48	; 0x30
   186f8:	cmp	r0, #9
   186fc:	mvnhi	r5, #0
   18700:	bhi	18774 <close_stdout@@Base+0x2064>
   18704:	movw	ip, #52428	; 0xcccc
   18708:	add	r3, r3, #1
   1870c:	movt	ip, #3276	; 0xccc
   18710:	mov	r5, #0
   18714:	b	18744 <close_stdout@@Base+0x2034>
   18718:	ldrb	r2, [r3, #-1]
   1871c:	beq	18984 <close_stdout@@Base+0x2274>
   18720:	add	r5, r5, r5, lsl #2
   18724:	sub	r2, r2, #48	; 0x30
   18728:	add	r5, r2, r5, lsl #1
   1872c:	mov	r4, r3
   18730:	add	r3, r3, #1
   18734:	ldrb	r2, [r4]
   18738:	sub	r0, r2, #48	; 0x30
   1873c:	cmp	r0, #9
   18740:	bhi	18774 <close_stdout@@Base+0x2064>
   18744:	cmp	r5, ip
   18748:	ble	18718 <close_stdout@@Base+0x2008>
   1874c:	mvn	r5, #-2147483648	; 0x80000000
   18750:	b	1872c <close_stdout@@Base+0x201c>
   18754:	cmp	r2, #94	; 0x5e
   18758:	moveq	r6, #1
   1875c:	streq	r6, [sp, #32]
   18760:	beq	186c8 <close_stdout@@Base+0x1fb8>
   18764:	cmp	r2, #95	; 0x5f
   18768:	bne	186f4 <close_stdout@@Base+0x1fe4>
   1876c:	mov	sl, r2
   18770:	b	186c8 <close_stdout@@Base+0x1fb8>
   18774:	cmp	r2, #69	; 0x45
   18778:	beq	189b8 <close_stdout@@Base+0x22a8>
   1877c:	cmp	r2, #79	; 0x4f
   18780:	movne	r3, #0
   18784:	beq	189b8 <close_stdout@@Base+0x22a8>
   18788:	mov	r9, r2
   1878c:	cmp	r2, #122	; 0x7a
   18790:	addls	pc, pc, r2, lsl #2
   18794:	b	18bb0 <close_stdout@@Base+0x24a0>
   18798:	b	18ba8 <close_stdout@@Base+0x2498>
   1879c:	b	18bb0 <close_stdout@@Base+0x24a0>
   187a0:	b	18bb0 <close_stdout@@Base+0x24a0>
   187a4:	b	18bb0 <close_stdout@@Base+0x24a0>
   187a8:	b	18bb0 <close_stdout@@Base+0x24a0>
   187ac:	b	18bb0 <close_stdout@@Base+0x24a0>
   187b0:	b	18bb0 <close_stdout@@Base+0x24a0>
   187b4:	b	18bb0 <close_stdout@@Base+0x24a0>
   187b8:	b	18bb0 <close_stdout@@Base+0x24a0>
   187bc:	b	18bb0 <close_stdout@@Base+0x24a0>
   187c0:	b	18bb0 <close_stdout@@Base+0x24a0>
   187c4:	b	18bb0 <close_stdout@@Base+0x24a0>
   187c8:	b	18bb0 <close_stdout@@Base+0x24a0>
   187cc:	b	18bb0 <close_stdout@@Base+0x24a0>
   187d0:	b	18bb0 <close_stdout@@Base+0x24a0>
   187d4:	b	18bb0 <close_stdout@@Base+0x24a0>
   187d8:	b	18bb0 <close_stdout@@Base+0x24a0>
   187dc:	b	18bb0 <close_stdout@@Base+0x24a0>
   187e0:	b	18bb0 <close_stdout@@Base+0x24a0>
   187e4:	b	18bb0 <close_stdout@@Base+0x24a0>
   187e8:	b	18bb0 <close_stdout@@Base+0x24a0>
   187ec:	b	18bb0 <close_stdout@@Base+0x24a0>
   187f0:	b	18bb0 <close_stdout@@Base+0x24a0>
   187f4:	b	18bb0 <close_stdout@@Base+0x24a0>
   187f8:	b	18bb0 <close_stdout@@Base+0x24a0>
   187fc:	b	18bb0 <close_stdout@@Base+0x24a0>
   18800:	b	18bb0 <close_stdout@@Base+0x24a0>
   18804:	b	18bb0 <close_stdout@@Base+0x24a0>
   18808:	b	18bb0 <close_stdout@@Base+0x24a0>
   1880c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18810:	b	18bb0 <close_stdout@@Base+0x24a0>
   18814:	b	18bb0 <close_stdout@@Base+0x24a0>
   18818:	b	18bb0 <close_stdout@@Base+0x24a0>
   1881c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18820:	b	18bb0 <close_stdout@@Base+0x24a0>
   18824:	b	18bb0 <close_stdout@@Base+0x24a0>
   18828:	b	18bb0 <close_stdout@@Base+0x24a0>
   1882c:	b	19548 <close_stdout@@Base+0x2e38>
   18830:	b	18bb0 <close_stdout@@Base+0x24a0>
   18834:	b	18bb0 <close_stdout@@Base+0x24a0>
   18838:	b	18bb0 <close_stdout@@Base+0x24a0>
   1883c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18840:	b	18bb0 <close_stdout@@Base+0x24a0>
   18844:	b	18bb0 <close_stdout@@Base+0x24a0>
   18848:	b	18bb0 <close_stdout@@Base+0x24a0>
   1884c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18850:	b	18bb0 <close_stdout@@Base+0x24a0>
   18854:	b	18bb0 <close_stdout@@Base+0x24a0>
   18858:	b	18bb0 <close_stdout@@Base+0x24a0>
   1885c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18860:	b	18bb0 <close_stdout@@Base+0x24a0>
   18864:	b	18bb0 <close_stdout@@Base+0x24a0>
   18868:	b	18bb0 <close_stdout@@Base+0x24a0>
   1886c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18870:	b	18bb0 <close_stdout@@Base+0x24a0>
   18874:	b	18bb0 <close_stdout@@Base+0x24a0>
   18878:	b	18bb0 <close_stdout@@Base+0x24a0>
   1887c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18880:	b	19874 <close_stdout@@Base+0x3164>
   18884:	b	18bb0 <close_stdout@@Base+0x24a0>
   18888:	b	18bb0 <close_stdout@@Base+0x24a0>
   1888c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18890:	b	18bb0 <close_stdout@@Base+0x24a0>
   18894:	b	18bb0 <close_stdout@@Base+0x24a0>
   18898:	b	18bb0 <close_stdout@@Base+0x24a0>
   1889c:	b	18b00 <close_stdout@@Base+0x23f0>
   188a0:	b	18b00 <close_stdout@@Base+0x23f0>
   188a4:	b	191bc <close_stdout@@Base+0x2aac>
   188a8:	b	19534 <close_stdout@@Base+0x2e24>
   188ac:	b	18bb0 <close_stdout@@Base+0x24a0>
   188b0:	b	194f0 <close_stdout@@Base+0x2de0>
   188b4:	b	1935c <close_stdout@@Base+0x2c4c>
   188b8:	b	19898 <close_stdout@@Base+0x3188>
   188bc:	b	18c5c <close_stdout@@Base+0x254c>
   188c0:	b	18bb0 <close_stdout@@Base+0x24a0>
   188c4:	b	18bb0 <close_stdout@@Base+0x24a0>
   188c8:	b	18bb0 <close_stdout@@Base+0x24a0>
   188cc:	b	19688 <close_stdout@@Base+0x2f78>
   188d0:	b	19644 <close_stdout@@Base+0x2f34>
   188d4:	b	18bb0 <close_stdout@@Base+0x24a0>
   188d8:	b	19848 <close_stdout@@Base+0x3138>
   188dc:	b	18bb0 <close_stdout@@Base+0x24a0>
   188e0:	b	1983c <close_stdout@@Base+0x312c>
   188e4:	b	19858 <close_stdout@@Base+0x3148>
   188e8:	b	19284 <close_stdout@@Base+0x2b74>
   188ec:	b	198c8 <close_stdout@@Base+0x31b8>
   188f0:	b	1935c <close_stdout@@Base+0x2c4c>
   188f4:	b	19160 <close_stdout@@Base+0x2a50>
   188f8:	b	189c8 <close_stdout@@Base+0x22b8>
   188fc:	b	18eec <close_stdout@@Base+0x27dc>
   18900:	b	18e34 <close_stdout@@Base+0x2724>
   18904:	b	18bb0 <close_stdout@@Base+0x24a0>
   18908:	b	18bb0 <close_stdout@@Base+0x24a0>
   1890c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18910:	b	18bb0 <close_stdout@@Base+0x24a0>
   18914:	b	18bb0 <close_stdout@@Base+0x24a0>
   18918:	b	18bb0 <close_stdout@@Base+0x24a0>
   1891c:	b	18e18 <close_stdout@@Base+0x2708>
   18920:	b	18dd8 <close_stdout@@Base+0x26c8>
   18924:	b	189c8 <close_stdout@@Base+0x22b8>
   18928:	b	18d24 <close_stdout@@Base+0x2614>
   1892c:	b	18cfc <close_stdout@@Base+0x25ec>
   18930:	b	18bb0 <close_stdout@@Base+0x24a0>
   18934:	b	1935c <close_stdout@@Base+0x2c4c>
   18938:	b	18dd8 <close_stdout@@Base+0x26c8>
   1893c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18940:	b	18cc4 <close_stdout@@Base+0x25b4>
   18944:	b	198b4 <close_stdout@@Base+0x31a4>
   18948:	b	19524 <close_stdout@@Base+0x2e14>
   1894c:	b	19504 <close_stdout@@Base+0x2df4>
   18950:	b	197d8 <close_stdout@@Base+0x30c8>
   18954:	b	18bb0 <close_stdout@@Base+0x24a0>
   18958:	b	19624 <close_stdout@@Base+0x2f14>
   1895c:	b	18bb0 <close_stdout@@Base+0x24a0>
   18960:	b	189d0 <close_stdout@@Base+0x22c0>
   18964:	b	196a4 <close_stdout@@Base+0x2f94>
   18968:	b	18bf4 <close_stdout@@Base+0x24e4>
   1896c:	b	195ec <close_stdout@@Base+0x2edc>
   18970:	b	18bb0 <close_stdout@@Base+0x24a0>
   18974:	b	195d0 <close_stdout@@Base+0x2ec0>
   18978:	b	189c8 <close_stdout@@Base+0x22b8>
   1897c:	b	19224 <close_stdout@@Base+0x2b14>
   18980:	b	18d40 <close_stdout@@Base+0x2630>
   18984:	cmp	r2, #55	; 0x37
   18988:	ble	18720 <close_stdout@@Base+0x2010>
   1898c:	mvn	r5, #-2147483648	; 0x80000000
   18990:	b	1872c <close_stdout@@Base+0x201c>
   18994:	mov	r0, #0
   18998:	ldr	ip, [sp, #44]	; 0x2c
   1899c:	ldr	r2, [sp, #1172]	; 0x494
   189a0:	ldr	r3, [ip]
   189a4:	cmp	r2, r3
   189a8:	bne	19d40 <close_stdout@@Base+0x3630>
   189ac:	add	sp, sp, #1168	; 0x490
   189b0:	add	sp, sp, #12
   189b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189b8:	mov	r3, r2
   189bc:	add	r4, r4, #1
   189c0:	ldrb	r2, [r4]
   189c4:	b	18788 <close_stdout@@Base+0x2078>
   189c8:	cmp	r3, #79	; 0x4f
   189cc:	beq	18b08 <close_stdout@@Base+0x23f8>
   189d0:	mov	ip, r2
   189d4:	mov	r6, #0
   189d8:	cmp	r3, #0
   189dc:	mov	r2, #32
   189e0:	addeq	r7, sp, #152	; 0x98
   189e4:	strb	r2, [sp, #140]	; 0x8c
   189e8:	streq	r3, [sp, #76]	; 0x4c
   189ec:	mov	r2, #37	; 0x25
   189f0:	subeq	r3, r7, #10
   189f4:	strb	r2, [sp, #141]	; 0x8d
   189f8:	bne	19d44 <close_stdout@@Base+0x3634>
   189fc:	strb	ip, [r3]
   18a00:	sub	r0, r7, #4
   18a04:	mov	ip, #0
   18a08:	mov	r1, #1024	; 0x400
   18a0c:	strb	ip, [r3, #1]
   18a10:	sub	r2, r7, #12
   18a14:	ldr	r3, [sp, #40]	; 0x28
   18a18:	bl	1146c <strftime@plt>
   18a1c:	cmp	r0, #0
   18a20:	beq	1869c <close_stdout@@Base+0x1f8c>
   18a24:	sub	r9, r0, #1
   18a28:	ldr	r0, [sp, #28]
   18a2c:	bic	r3, r5, r5, asr #31
   18a30:	cmp	r3, r9
   18a34:	movcs	ip, r3
   18a38:	movcc	ip, r9
   18a3c:	rsb	r2, fp, r0
   18a40:	cmp	ip, r2
   18a44:	bcs	18994 <close_stdout@@Base+0x2284>
   18a48:	cmp	r8, #0
   18a4c:	beq	18ad0 <close_stdout@@Base+0x23c0>
   18a50:	cmp	r9, r3
   18a54:	ldr	r1, [sp, #76]	; 0x4c
   18a58:	movcs	r3, #0
   18a5c:	movcc	r3, #1
   18a60:	cmp	r1, #0
   18a64:	movne	r3, #0
   18a68:	cmp	r3, #0
   18a6c:	beq	18aa0 <close_stdout@@Base+0x2390>
   18a70:	cmp	sl, #48	; 0x30
   18a74:	rsb	r5, r9, r5
   18a78:	str	ip, [sp, #20]
   18a7c:	moveq	r0, r8
   18a80:	movne	r0, r8
   18a84:	moveq	r1, sl
   18a88:	moveq	r2, r5
   18a8c:	movne	r2, r5
   18a90:	movne	r1, #32
   18a94:	bl	1152c <memset@plt>
   18a98:	ldr	ip, [sp, #20]
   18a9c:	add	r8, r8, r5
   18aa0:	cmp	r6, #0
   18aa4:	bne	18bd8 <close_stdout@@Base+0x24c8>
   18aa8:	ldr	r6, [sp, #32]
   18aac:	sub	r1, r7, #3
   18ab0:	mov	r0, r8
   18ab4:	mov	r2, r9
   18ab8:	cmp	r6, #0
   18abc:	str	ip, [sp, #20]
   18ac0:	beq	18bcc <close_stdout@@Base+0x24bc>
   18ac4:	bl	18564 <close_stdout@@Base+0x1e54>
   18ac8:	ldr	ip, [sp, #20]
   18acc:	add	r8, r8, r9
   18ad0:	ldrb	r2, [r4, #1]
   18ad4:	add	fp, fp, ip
   18ad8:	add	r4, r4, #1
   18adc:	cmp	r2, #0
   18ae0:	bne	186ac <close_stdout@@Base+0x1f9c>
   18ae4:	ldr	r6, [sp, #28]
   18ae8:	mov	r0, fp
   18aec:	cmp	r8, #0
   18af0:	cmpne	r6, #0
   18af4:	movne	r3, #0
   18af8:	strbne	r3, [r8]
   18afc:	b	18998 <close_stdout@@Base+0x2288>
   18b00:	cmp	r3, #0
   18b04:	beq	19904 <close_stdout@@Base+0x31f4>
   18b08:	sub	r3, r4, #1
   18b0c:	mov	r7, #1
   18b10:	ldrb	r2, [r3]
   18b14:	mov	r6, r3
   18b18:	add	r7, r7, #1
   18b1c:	sub	r3, r3, #1
   18b20:	cmp	r2, #37	; 0x25
   18b24:	bne	18b10 <close_stdout@@Base+0x2400>
   18b28:	ldr	ip, [sp, #28]
   18b2c:	bic	r3, r5, r5, asr #31
   18b30:	cmp	r7, r3
   18b34:	movcs	r9, r7
   18b38:	movcc	r9, r3
   18b3c:	rsb	r2, fp, ip
   18b40:	cmp	r9, r2
   18b44:	bcs	18994 <close_stdout@@Base+0x2284>
   18b48:	cmp	r8, #0
   18b4c:	beq	18ba0 <close_stdout@@Base+0x2490>
   18b50:	cmp	r3, r7
   18b54:	bls	18b80 <close_stdout@@Base+0x2470>
   18b58:	cmp	sl, #48	; 0x30
   18b5c:	rsb	r5, r7, r5
   18b60:	moveq	r0, r8
   18b64:	movne	r0, r8
   18b68:	moveq	r1, sl
   18b6c:	moveq	r2, r5
   18b70:	movne	r2, r5
   18b74:	movne	r1, #32
   18b78:	add	r8, r8, r5
   18b7c:	bl	1152c <memset@plt>
   18b80:	ldr	ip, [sp, #32]
   18b84:	mov	r1, r6
   18b88:	mov	r0, r8
   18b8c:	mov	r2, r7
   18b90:	cmp	ip, #0
   18b94:	beq	18bc4 <close_stdout@@Base+0x24b4>
   18b98:	bl	18564 <close_stdout@@Base+0x1e54>
   18b9c:	add	r8, r8, r7
   18ba0:	add	fp, fp, r9
   18ba4:	b	1869c <close_stdout@@Base+0x1f8c>
   18ba8:	ldrb	r2, [r4, #-1]
   18bac:	sub	r4, r4, #1
   18bb0:	cmp	r2, #37	; 0x25
   18bb4:	bne	18b08 <close_stdout@@Base+0x23f8>
   18bb8:	mov	r6, r4
   18bbc:	mov	r7, #1
   18bc0:	b	18b28 <close_stdout@@Base+0x2418>
   18bc4:	bl	1134c <memcpy@plt>
   18bc8:	b	18b9c <close_stdout@@Base+0x248c>
   18bcc:	bl	1134c <memcpy@plt>
   18bd0:	ldr	ip, [sp, #20]
   18bd4:	b	18acc <close_stdout@@Base+0x23bc>
   18bd8:	sub	r1, r7, #3
   18bdc:	mov	r0, r8
   18be0:	mov	r2, r9
   18be4:	str	ip, [sp, #20]
   18be8:	bl	18518 <close_stdout@@Base+0x1e08>
   18bec:	ldr	ip, [sp, #20]
   18bf0:	b	18acc <close_stdout@@Base+0x23bc>
   18bf4:	ldr	r6, [sp, #28]
   18bf8:	bic	r3, r5, r5, asr #31
   18bfc:	rsb	r2, fp, r6
   18c00:	cmp	r3, #1
   18c04:	movcs	r6, r3
   18c08:	movcc	r6, #1
   18c0c:	cmp	r6, r2
   18c10:	bcs	18994 <close_stdout@@Base+0x2284>
   18c14:	cmp	r8, #0
   18c18:	beq	18c54 <close_stdout@@Base+0x2544>
   18c1c:	cmp	r3, #1
   18c20:	bls	18c4c <close_stdout@@Base+0x253c>
   18c24:	cmp	sl, #48	; 0x30
   18c28:	sub	r5, r5, #1
   18c2c:	moveq	r0, r8
   18c30:	movne	r0, r8
   18c34:	moveq	r1, sl
   18c38:	moveq	r2, r5
   18c3c:	movne	r2, r5
   18c40:	movne	r1, #32
   18c44:	add	r8, r8, r5
   18c48:	bl	1152c <memset@plt>
   18c4c:	mov	r3, #9
   18c50:	strb	r3, [r8], #1
   18c54:	add	fp, fp, r6
   18c58:	b	1869c <close_stdout@@Base+0x1f8c>
   18c5c:	cmp	r3, #69	; 0x45
   18c60:	beq	18b08 <close_stdout@@Base+0x23f8>
   18c64:	ldr	r0, [sp, #36]	; 0x24
   18c68:	mov	r6, #2
   18c6c:	str	r6, [sp, #76]	; 0x4c
   18c70:	mov	r2, #0
   18c74:	lsr	r1, r0, #31
   18c78:	str	r2, [sp, #88]	; 0x58
   18c7c:	str	r1, [sp, #52]	; 0x34
   18c80:	ldr	r6, [sp, #52]	; 0x34
   18c84:	eor	r1, r6, #1
   18c88:	cmp	r3, #79	; 0x4f
   18c8c:	movne	r1, #0
   18c90:	andeq	r1, r1, #1
   18c94:	cmp	r1, #0
   18c98:	beq	18f34 <close_stdout@@Base+0x2824>
   18c9c:	mov	r6, #0
   18ca0:	mov	r2, #32
   18ca4:	strb	r2, [sp, #140]	; 0x8c
   18ca8:	mov	r2, #37	; 0x25
   18cac:	strb	r2, [sp, #141]	; 0x8d
   18cb0:	add	r7, sp, #152	; 0x98
   18cb4:	strb	r3, [sp, #142]	; 0x8e
   18cb8:	uxtb	ip, r9
   18cbc:	sub	r3, r7, #9
   18cc0:	b	189fc <close_stdout@@Base+0x22ec>
   18cc4:	cmp	r3, #69	; 0x45
   18cc8:	beq	18b08 <close_stdout@@Base+0x23f8>
   18ccc:	ldr	r6, [sp, #40]	; 0x28
   18cd0:	mov	ip, #3
   18cd4:	mov	r2, #0
   18cd8:	str	r2, [sp, #88]	; 0x58
   18cdc:	ldr	r0, [r6, #28]
   18ce0:	cmn	r0, #1
   18ce4:	str	ip, [sp, #76]	; 0x4c
   18ce8:	add	r0, r0, #1
   18cec:	movge	r1, #0
   18cf0:	movlt	r1, #1
   18cf4:	str	r1, [sp, #52]	; 0x34
   18cf8:	b	18c80 <close_stdout@@Base+0x2570>
   18cfc:	cmp	r3, #69	; 0x45
   18d00:	beq	18b08 <close_stdout@@Base+0x23f8>
   18d04:	ldr	r6, [sp, #40]	; 0x28
   18d08:	ldr	r0, [r6, #12]
   18d0c:	cmp	sl, #45	; 0x2d
   18d10:	cmpne	sl, #48	; 0x30
   18d14:	mov	ip, #2
   18d18:	str	ip, [sp, #76]	; 0x4c
   18d1c:	movne	sl, #95	; 0x5f
   18d20:	b	18c70 <close_stdout@@Base+0x2560>
   18d24:	cmp	r3, #69	; 0x45
   18d28:	beq	18b08 <close_stdout@@Base+0x23f8>
   18d2c:	ldr	r6, [sp, #40]	; 0x28
   18d30:	mov	ip, #2
   18d34:	str	ip, [sp, #76]	; 0x4c
   18d38:	ldr	r0, [r6, #12]
   18d3c:	b	18c70 <close_stdout@@Base+0x2560>
   18d40:	mov	r7, #0
   18d44:	ldr	r6, [sp, #40]	; 0x28
   18d48:	ldr	r2, [r6, #32]
   18d4c:	cmp	r2, #0
   18d50:	blt	1869c <close_stdout@@Base+0x1f8c>
   18d54:	ldr	ip, [r6, #36]	; 0x24
   18d58:	ldr	r6, [sp, #64]	; 0x40
   18d5c:	ldr	r0, [sp, #72]	; 0x48
   18d60:	asr	r2, ip, #31
   18d64:	smull	r6, r1, r6, ip
   18d68:	smull	r0, r6, r0, ip
   18d6c:	add	r1, r1, ip
   18d70:	add	r6, r6, ip
   18d74:	str	r6, [sp, #76]	; 0x4c
   18d78:	ldr	r6, [sp, #64]	; 0x40
   18d7c:	rsb	r1, r2, r1, asr #5
   18d80:	smull	r0, r6, r6, r1
   18d84:	ldr	r0, [sp, #76]	; 0x4c
   18d88:	rsb	r2, r2, r0, asr #11
   18d8c:	str	r2, [sp, #76]	; 0x4c
   18d90:	str	r6, [sp, #52]	; 0x34
   18d94:	asr	r6, r1, #31
   18d98:	ldr	r0, [sp, #52]	; 0x34
   18d9c:	str	r6, [sp, #88]	; 0x58
   18da0:	rsb	r6, r1, r1, lsl #4
   18da4:	add	r2, r0, r1
   18da8:	ldr	r0, [sp, #88]	; 0x58
   18dac:	sub	r6, ip, r6, lsl #2
   18db0:	rsb	r2, r0, r2, asr #5
   18db4:	rsb	r2, r2, r2, lsl #4
   18db8:	sub	r2, r1, r2, lsl #2
   18dbc:	cmp	r7, #3
   18dc0:	addls	pc, pc, r7, lsl #2
   18dc4:	b	19c2c <close_stdout@@Base+0x351c>
   18dc8:	b	1997c <close_stdout@@Base+0x326c>
   18dcc:	b	19950 <close_stdout@@Base+0x3240>
   18dd0:	b	19918 <close_stdout@@Base+0x3208>
   18dd4:	b	199a8 <close_stdout@@Base+0x3298>
   18dd8:	cmp	r1, #0
   18ddc:	ldr	r6, [sp, #32]
   18de0:	movne	r6, #1
   18de4:	cmp	r3, #0
   18de8:	str	r6, [sp, #32]
   18dec:	bne	18b08 <close_stdout@@Base+0x23f8>
   18df0:	add	r7, sp, #152	; 0x98
   18df4:	mov	r6, #0
   18df8:	mov	ip, r2
   18dfc:	str	r6, [sp, #76]	; 0x4c
   18e00:	mov	r2, #32
   18e04:	sub	r3, r7, #10
   18e08:	strb	r2, [sp, #140]	; 0x8c
   18e0c:	mov	r2, #37	; 0x25
   18e10:	strb	r2, [sp, #141]	; 0x8d
   18e14:	b	189fc <close_stdout@@Base+0x22ec>
   18e18:	cmp	r3, #0
   18e1c:	bne	18b08 <close_stdout@@Base+0x23f8>
   18e20:	ldr	r6, [sp, #32]
   18e24:	cmp	r1, #0
   18e28:	movne	r6, #1
   18e2c:	str	r6, [sp, #32]
   18e30:	b	18df0 <close_stdout@@Base+0x26e0>
   18e34:	ldr	ip, [sp, #32]
   18e38:	cmp	r1, #0
   18e3c:	ldr	r6, [sp, #84]	; 0x54
   18e40:	moveq	r9, #0
   18e44:	movne	r9, #1
   18e48:	movne	ip, #0
   18e4c:	cmp	r6, #0
   18e50:	str	ip, [sp, #32]
   18e54:	beq	19d00 <close_stdout@@Base+0x35f0>
   18e58:	mov	r0, r6
   18e5c:	bl	114d8 <strlen@plt>
   18e60:	mov	r6, r0
   18e64:	ldr	ip, [sp, #28]
   18e68:	bic	r3, r5, r5, asr #31
   18e6c:	cmp	r6, r3
   18e70:	movcs	r7, r6
   18e74:	movcc	r7, r3
   18e78:	rsb	r2, fp, ip
   18e7c:	cmp	r7, r2
   18e80:	bcs	18994 <close_stdout@@Base+0x2284>
   18e84:	cmp	r8, #0
   18e88:	beq	18ee4 <close_stdout@@Base+0x27d4>
   18e8c:	cmp	r3, r6
   18e90:	bls	18ebc <close_stdout@@Base+0x27ac>
   18e94:	cmp	sl, #48	; 0x30
   18e98:	rsb	r5, r6, r5
   18e9c:	moveq	r0, r8
   18ea0:	movne	r0, r8
   18ea4:	moveq	r1, sl
   18ea8:	moveq	r2, r5
   18eac:	movne	r2, r5
   18eb0:	movne	r1, #32
   18eb4:	add	r8, r8, r5
   18eb8:	bl	1152c <memset@plt>
   18ebc:	cmp	r9, #0
   18ec0:	bne	19b84 <close_stdout@@Base+0x3474>
   18ec4:	ldr	ip, [sp, #32]
   18ec8:	mov	r0, r8
   18ecc:	ldr	r1, [sp, #84]	; 0x54
   18ed0:	mov	r2, r6
   18ed4:	cmp	ip, #0
   18ed8:	beq	19b44 <close_stdout@@Base+0x3434>
   18edc:	bl	18564 <close_stdout@@Base+0x1e54>
   18ee0:	add	r8, r8, r6
   18ee4:	add	fp, fp, r7
   18ee8:	b	1869c <close_stdout@@Base+0x1f8c>
   18eec:	cmp	r3, #69	; 0x45
   18ef0:	beq	19b58 <close_stdout@@Base+0x3448>
   18ef4:	cmp	r3, #79	; 0x4f
   18ef8:	beq	18b08 <close_stdout@@Base+0x23f8>
   18efc:	ldr	r6, [sp, #40]	; 0x28
   18f00:	movw	r3, #63636	; 0xf894
   18f04:	movt	r3, #65535	; 0xffff
   18f08:	mov	ip, #4
   18f0c:	str	ip, [sp, #76]	; 0x4c
   18f10:	ldr	r2, [r6, #20]
   18f14:	add	r0, r2, #1888	; 0x760
   18f18:	cmp	r2, r3
   18f1c:	add	r0, r0, #12
   18f20:	movge	r3, #0
   18f24:	movlt	r3, #1
   18f28:	str	r3, [sp, #52]	; 0x34
   18f2c:	mov	r2, #0
   18f30:	str	r2, [sp, #88]	; 0x58
   18f34:	ldr	ip, [sp, #52]	; 0x34
   18f38:	add	r7, sp, #152	; 0x98
   18f3c:	str	fp, [sp, #92]	; 0x5c
   18f40:	add	r3, r7, #10
   18f44:	cmp	ip, #0
   18f48:	ldr	fp, [sp, #80]	; 0x50
   18f4c:	rsbne	r0, r0, #0
   18f50:	b	18f58 <close_stdout@@Base+0x2848>
   18f54:	mov	r3, r6
   18f58:	tst	r2, #1
   18f5c:	movne	r1, #58	; 0x3a
   18f60:	strbne	r1, [r3, #-1]
   18f64:	umull	r6, r1, fp, r0
   18f68:	subne	r3, r3, #1
   18f6c:	asrs	r2, r2, #1
   18f70:	sub	r6, r3, #1
   18f74:	moveq	r9, #0
   18f78:	movne	r9, #1
   18f7c:	lsr	r1, r1, #3
   18f80:	cmp	r1, #0
   18f84:	orrne	r9, r9, #1
   18f88:	add	ip, r1, r1, lsl #2
   18f8c:	cmp	r9, #0
   18f90:	sub	ip, r0, ip, lsl #1
   18f94:	mov	r0, r1
   18f98:	add	ip, ip, #48	; 0x30
   18f9c:	strb	ip, [r3, #-1]
   18fa0:	bne	18f54 <close_stdout@@Base+0x2844>
   18fa4:	ldr	r3, [sp, #76]	; 0x4c
   18fa8:	ldr	ip, [sp, #52]	; 0x34
   18fac:	cmp	r3, r5
   18fb0:	movlt	r3, r5
   18fb4:	ldr	fp, [sp, #92]	; 0x5c
   18fb8:	cmp	ip, #0
   18fbc:	bne	199d8 <close_stdout@@Base+0x32c8>
   18fc0:	ldr	r0, [sp, #88]	; 0x58
   18fc4:	cmp	r0, #0
   18fc8:	bne	19a78 <close_stdout@@Base+0x3368>
   18fcc:	cmp	sl, #45	; 0x2d
   18fd0:	add	r7, r7, #10
   18fd4:	str	r7, [sp, #52]	; 0x34
   18fd8:	beq	19b34 <close_stdout@@Base+0x3424>
   18fdc:	rsb	r7, r7, r6
   18fe0:	add	r7, r3, r7
   18fe4:	cmp	r7, #0
   18fe8:	movgt	ip, #0
   18fec:	strgt	ip, [sp, #76]	; 0x4c
   18ff0:	ble	19b34 <close_stdout@@Base+0x3424>
   18ff4:	cmp	sl, #95	; 0x5f
   18ff8:	beq	19a80 <close_stdout@@Base+0x3370>
   18ffc:	ldr	r1, [sp, #28]
   19000:	rsb	r2, fp, r1
   19004:	cmp	r3, r2
   19008:	bcs	18994 <close_stdout@@Base+0x2284>
   1900c:	ldr	r0, [sp, #76]	; 0x4c
   19010:	cmp	r0, #0
   19014:	beq	1908c <close_stdout@@Base+0x297c>
   19018:	bic	r1, r5, r5, asr #31
   1901c:	cmp	r1, #1
   19020:	movcs	r9, r1
   19024:	movcc	r9, #1
   19028:	cmp	r2, r9
   1902c:	bls	18994 <close_stdout@@Base+0x2284>
   19030:	cmp	r8, #0
   19034:	beq	19088 <close_stdout@@Base+0x2978>
   19038:	cmp	r1, #1
   1903c:	movls	r1, #0
   19040:	movhi	r1, #1
   19044:	cmp	r3, #0
   19048:	movne	r1, #0
   1904c:	cmp	r1, #0
   19050:	beq	19084 <close_stdout@@Base+0x2974>
   19054:	sub	r5, r5, #1
   19058:	cmp	sl, #48	; 0x30
   1905c:	mov	r0, r8
   19060:	mov	r2, r5
   19064:	beq	19c34 <close_stdout@@Base+0x3524>
   19068:	mov	r1, #32
   1906c:	str	r3, [sp, #24]
   19070:	str	ip, [sp, #20]
   19074:	bl	1152c <memset@plt>
   19078:	ldr	ip, [sp, #20]
   1907c:	add	r8, r8, r5
   19080:	ldr	r3, [sp, #24]
   19084:	strb	ip, [r8], #1
   19088:	add	fp, fp, r9
   1908c:	cmp	r8, #0
   19090:	beq	190b0 <close_stdout@@Base+0x29a0>
   19094:	mov	r0, r8
   19098:	mov	r1, #48	; 0x30
   1909c:	mov	r2, r7
   190a0:	str	r3, [sp, #24]
   190a4:	bl	1152c <memset@plt>
   190a8:	ldr	r3, [sp, #24]
   190ac:	add	r8, r8, r7
   190b0:	mov	r9, #0
   190b4:	add	fp, fp, r7
   190b8:	mov	r5, r9
   190bc:	ldr	ip, [sp, #52]	; 0x34
   190c0:	rsb	r7, r6, ip
   190c4:	ldr	ip, [sp, #28]
   190c8:	rsb	r2, fp, ip
   190cc:	cmp	r7, r9
   190d0:	movcs	ip, r7
   190d4:	movcc	ip, r9
   190d8:	cmp	ip, r2
   190dc:	bcs	18994 <close_stdout@@Base+0x2284>
   190e0:	cmp	r8, #0
   190e4:	beq	18ad0 <close_stdout@@Base+0x23c0>
   190e8:	cmp	r7, r9
   190ec:	movcs	r9, #0
   190f0:	movcc	r9, #1
   190f4:	cmp	r3, #0
   190f8:	movne	r9, #0
   190fc:	cmp	r9, #0
   19100:	beq	19134 <close_stdout@@Base+0x2a24>
   19104:	cmp	sl, #48	; 0x30
   19108:	rsb	r5, r7, r5
   1910c:	str	ip, [sp, #20]
   19110:	moveq	r0, r8
   19114:	movne	r0, r8
   19118:	moveq	r1, sl
   1911c:	moveq	r2, r5
   19120:	movne	r2, r5
   19124:	movne	r1, #32
   19128:	bl	1152c <memset@plt>
   1912c:	ldr	ip, [sp, #20]
   19130:	add	r8, r8, r5
   19134:	ldr	lr, [sp, #32]
   19138:	mov	r1, r6
   1913c:	mov	r0, r8
   19140:	mov	r2, r7
   19144:	cmp	lr, #0
   19148:	str	ip, [sp, #20]
   1914c:	beq	19a64 <close_stdout@@Base+0x3354>
   19150:	bl	18564 <close_stdout@@Base+0x1e54>
   19154:	ldr	ip, [sp, #20]
   19158:	add	r8, r8, r7
   1915c:	b	18ad0 <close_stdout@@Base+0x23c0>
   19160:	cmp	r3, #69	; 0x45
   19164:	beq	18b08 <close_stdout@@Base+0x23f8>
   19168:	ldr	r6, [sp, #40]	; 0x28
   1916c:	mov	ip, #2
   19170:	str	ip, [sp, #76]	; 0x4c
   19174:	ldr	r2, [r6, #24]
   19178:	ldr	ip, [r6, #28]
   1917c:	ldr	r6, [sp, #56]	; 0x38
   19180:	add	r2, r2, #6
   19184:	asr	r1, r2, #31
   19188:	smull	r6, r0, r6, r2
   1918c:	add	r0, r0, r2
   19190:	rsb	r1, r1, r0, asr #2
   19194:	rsb	r1, r1, r1, lsl #3
   19198:	rsb	r2, r1, r2
   1919c:	rsb	r2, r2, ip
   191a0:	ldr	ip, [sp, #56]	; 0x38
   191a4:	add	r2, r2, #7
   191a8:	smull	ip, r0, ip, r2
   191ac:	asr	r1, r2, #31
   191b0:	add	r0, r0, r2
   191b4:	rsb	r0, r1, r0, asr #2
   191b8:	b	18c70 <close_stdout@@Base+0x2560>
   191bc:	cmp	r3, #79	; 0x4f
   191c0:	beq	18b08 <close_stdout@@Base+0x23f8>
   191c4:	cmp	r3, #69	; 0x45
   191c8:	beq	19c00 <close_stdout@@Base+0x34f0>
   191cc:	ldr	ip, [sp, #40]	; 0x28
   191d0:	mov	r0, #100	; 0x64
   191d4:	ldr	r6, [sp, #60]	; 0x3c
   191d8:	ldr	r3, [ip, #20]
   191dc:	smull	r6, r1, r6, r3
   191e0:	asr	r2, r3, #31
   191e4:	rsb	r2, r2, r1, asr #5
   191e8:	add	r1, r2, #19
   191ec:	mls	r2, r0, r2, r3
   191f0:	cmp	r2, #0
   191f4:	movge	r0, #0
   191f8:	blt	19cf0 <close_stdout@@Base+0x35e0>
   191fc:	movw	r2, #63636	; 0xf894
   19200:	movt	r2, #65535	; 0xffff
   19204:	cmp	r3, r2
   19208:	mov	ip, #2
   1920c:	rsb	r0, r0, r1
   19210:	str	ip, [sp, #76]	; 0x4c
   19214:	movge	r2, #0
   19218:	movlt	r2, #1
   1921c:	str	r2, [sp, #52]	; 0x34
   19220:	b	18f2c <close_stdout@@Base+0x281c>
   19224:	cmp	r3, #69	; 0x45
   19228:	beq	19b4c <close_stdout@@Base+0x343c>
   1922c:	ldr	r6, [sp, #40]	; 0x28
   19230:	mov	r1, #100	; 0x64
   19234:	ldr	r2, [r6, #20]
   19238:	ldr	r6, [sp, #60]	; 0x3c
   1923c:	asr	r0, r2, #31
   19240:	smull	r6, ip, r6, r2
   19244:	rsb	r0, r0, ip, asr #5
   19248:	mls	r0, r1, r0, r2
   1924c:	cmp	r0, #0
   19250:	movge	ip, #2
   19254:	strge	ip, [sp, #76]	; 0x4c
   19258:	bge	18c70 <close_stdout@@Base+0x2560>
   1925c:	movw	r1, #63636	; 0xf894
   19260:	movt	r1, #65535	; 0xffff
   19264:	cmp	r2, r1
   19268:	rsblt	r0, r0, #0
   1926c:	addge	r0, r0, #100	; 0x64
   19270:	movlt	ip, #2
   19274:	movge	r6, #2
   19278:	strlt	ip, [sp, #76]	; 0x4c
   1927c:	strge	r6, [sp, #76]	; 0x4c
   19280:	b	18c70 <close_stdout@@Base+0x2560>
   19284:	ldr	r9, [pc, #816]	; 195bc <close_stdout@@Base+0x2eac>
   19288:	add	r9, pc, r9
   1928c:	ldr	r6, [sp, #40]	; 0x28
   19290:	mov	r3, r9
   19294:	ldr	ip, [sp, #1220]	; 0x4c4
   19298:	mov	r1, #0
   1929c:	ldr	lr, [sp, #1224]	; 0x4c8
   192a0:	mvn	r2, #0
   192a4:	str	r6, [sp]
   192a8:	ldr	r6, [sp, #28]
   192ac:	str	ip, [sp, #4]
   192b0:	ldr	r0, [sp, #32]
   192b4:	rsb	ip, fp, r6
   192b8:	str	lr, [sp, #8]
   192bc:	str	ip, [sp, #20]
   192c0:	bl	185b0 <close_stdout@@Base+0x1ea0>
   192c4:	bic	r3, r5, r5, asr #31
   192c8:	ldr	ip, [sp, #20]
   192cc:	cmp	r0, r3
   192d0:	movcs	r7, r0
   192d4:	movcc	r7, r3
   192d8:	mov	r6, r0
   192dc:	cmp	r7, ip
   192e0:	bcs	18994 <close_stdout@@Base+0x2284>
   192e4:	cmp	r8, #0
   192e8:	beq	18ee4 <close_stdout@@Base+0x27d4>
   192ec:	cmp	r0, r3
   192f0:	bcs	19328 <close_stdout@@Base+0x2c18>
   192f4:	cmp	sl, #48	; 0x30
   192f8:	rsb	r5, r0, r5
   192fc:	strne	ip, [sp, #20]
   19300:	moveq	r0, r8
   19304:	movne	r0, r8
   19308:	moveq	r1, sl
   1930c:	moveq	r2, r5
   19310:	movne	r2, r5
   19314:	movne	r1, #32
   19318:	addeq	r8, r8, r5
   1931c:	addne	r8, r8, r5
   19320:	bl	1152c <memset@plt>
   19324:	ldr	ip, [sp, #20]
   19328:	ldr	r1, [sp, #1220]	; 0x4c4
   1932c:	mov	r2, ip
   19330:	ldr	r3, [sp, #1224]	; 0x4c8
   19334:	ldr	lr, [sp, #40]	; 0x28
   19338:	str	r1, [sp, #4]
   1933c:	mov	r1, r8
   19340:	str	r3, [sp, #8]
   19344:	mov	r3, r9
   19348:	str	lr, [sp]
   1934c:	add	r8, r8, r6
   19350:	ldr	r0, [sp, #32]
   19354:	bl	185b0 <close_stdout@@Base+0x1ea0>
   19358:	b	18ee4 <close_stdout@@Base+0x27d4>
   1935c:	cmp	r3, #69	; 0x45
   19360:	beq	18b08 <close_stdout@@Base+0x23f8>
   19364:	ldr	ip, [sp, #40]	; 0x28
   19368:	ldr	r1, [ip, #20]
   1936c:	ldr	r0, [ip, #24]
   19370:	ldr	r7, [ip, #28]
   19374:	str	r1, [sp, #52]	; 0x34
   19378:	ldr	r6, [sp, #52]	; 0x34
   1937c:	rsb	r1, r0, r7
   19380:	add	r1, r1, #380	; 0x17c
   19384:	str	r0, [sp, #76]	; 0x4c
   19388:	cmp	r6, #0
   1938c:	ldr	r6, [sp, #56]	; 0x38
   19390:	add	r1, r1, #2
   19394:	smull	r6, ip, r6, r1
   19398:	mvnge	r6, #99	; 0x63
   1939c:	movlt	r6, #300	; 0x12c
   193a0:	asr	r0, r1, #31
   193a4:	add	ip, ip, r1
   193a8:	str	ip, [sp, #92]	; 0x5c
   193ac:	ldr	ip, [sp, #52]	; 0x34
   193b0:	add	r6, ip, r6
   193b4:	ldr	ip, [sp, #92]	; 0x5c
   193b8:	rsb	r0, r0, ip, asr #2
   193bc:	rsb	r0, r0, r0, lsl #3
   193c0:	rsb	r1, r0, r1
   193c4:	rsb	r1, r1, r7
   193c8:	adds	r1, r1, #3
   193cc:	str	r1, [sp, #88]	; 0x58
   193d0:	bmi	19c54 <close_stdout@@Base+0x3544>
   193d4:	tst	r6, #3
   193d8:	mvnne	r1, #364	; 0x16c
   193dc:	bne	1942c <close_stdout@@Base+0x2d1c>
   193e0:	ldr	r1, [sp, #60]	; 0x3c
   193e4:	smull	ip, r1, r1, r6
   193e8:	asr	ip, r6, #31
   193ec:	rsb	r0, ip, r1, asr #5
   193f0:	str	r1, [sp, #16]
   193f4:	mov	r1, #100	; 0x64
   193f8:	mls	r1, r1, r0, r6
   193fc:	cmp	r1, #0
   19400:	movwne	r1, #65170	; 0xfe92
   19404:	movtne	r1, #65535	; 0xffff
   19408:	bne	1942c <close_stdout@@Base+0x2d1c>
   1940c:	ldr	r1, [sp, #16]
   19410:	rsb	r0, ip, r1, asr #7
   19414:	mov	ip, #400	; 0x190
   19418:	movw	r1, #65170	; 0xfe92
   1941c:	movt	r1, #65535	; 0xffff
   19420:	mls	r0, ip, r0, r6
   19424:	cmp	r0, #0
   19428:	mvnne	r1, #364	; 0x16c
   1942c:	ldr	ip, [sp, #76]	; 0x4c
   19430:	add	r6, r1, r7
   19434:	ldr	r0, [sp, #56]	; 0x38
   19438:	rsb	r1, ip, r6
   1943c:	add	r1, r1, #380	; 0x17c
   19440:	add	r1, r1, #2
   19444:	smull	r0, ip, r0, r1
   19448:	asr	r0, r1, #31
   1944c:	add	ip, ip, r1
   19450:	rsb	r0, r0, ip, asr #2
   19454:	rsb	r0, r0, r0, lsl #3
   19458:	rsb	r1, r0, r1
   1945c:	rsb	r1, r1, r6
   19460:	adds	r1, r1, #3
   19464:	ldrmi	r1, [sp, #88]	; 0x58
   19468:	movmi	r7, #0
   1946c:	movpl	r7, #1
   19470:	cmp	r2, #71	; 0x47
   19474:	beq	19bbc <close_stdout@@Base+0x34ac>
   19478:	cmp	r2, #103	; 0x67
   1947c:	bne	19b98 <close_stdout@@Base+0x3488>
   19480:	ldr	r2, [sp, #52]	; 0x34
   19484:	ldr	r6, [sp, #60]	; 0x3c
   19488:	ldr	ip, [sp, #52]	; 0x34
   1948c:	ldr	r0, [sp, #52]	; 0x34
   19490:	smull	r2, r1, r6, r2
   19494:	asr	r2, ip, #31
   19498:	mov	ip, #100	; 0x64
   1949c:	rsb	r2, r2, r1, asr #5
   194a0:	mls	r2, ip, r2, r0
   194a4:	add	r2, r2, r7
   194a8:	smull	r6, r0, r6, r2
   194ac:	asr	r1, r2, #31
   194b0:	rsb	r0, r1, r0, asr #5
   194b4:	mls	r0, ip, r0, r2
   194b8:	cmp	r0, #0
   194bc:	bge	18c68 <close_stdout@@Base+0x2558>
   194c0:	movw	r2, #63636	; 0xf894
   194c4:	ldr	r1, [sp, #52]	; 0x34
   194c8:	movt	r2, #65535	; 0xffff
   194cc:	rsb	r2, r7, r2
   194d0:	cmp	r1, r2
   194d4:	rsblt	r0, r0, #0
   194d8:	addge	r0, r0, #100	; 0x64
   194dc:	movlt	r6, #2
   194e0:	movge	ip, #2
   194e4:	strlt	r6, [sp, #76]	; 0x4c
   194e8:	strge	ip, [sp, #76]	; 0x4c
   194ec:	b	18c70 <close_stdout@@Base+0x2560>
   194f0:	ldr	r9, [pc, #200]	; 195c0 <close_stdout@@Base+0x2eb0>
   194f4:	cmp	r3, #0
   194f8:	add	r9, pc, r9
   194fc:	beq	1928c <close_stdout@@Base+0x2b7c>
   19500:	b	18b08 <close_stdout@@Base+0x23f8>
   19504:	cmp	r3, #69	; 0x45
   19508:	beq	18b08 <close_stdout@@Base+0x23f8>
   1950c:	ldr	r6, [sp, #40]	; 0x28
   19510:	mov	r2, #0
   19514:	mov	ip, #2
   19518:	str	r2, [sp, #88]	; 0x58
   1951c:	ldr	r0, [r6, #16]
   19520:	b	18ce0 <close_stdout@@Base+0x25d0>
   19524:	cmp	r3, #69	; 0x45
   19528:	beq	18b08 <close_stdout@@Base+0x23f8>
   1952c:	ldr	r0, [sp, #36]	; 0x24
   19530:	b	18d0c <close_stdout@@Base+0x25fc>
   19534:	ldr	r9, [pc, #136]	; 195c4 <close_stdout@@Base+0x2eb4>
   19538:	cmp	r3, #0
   1953c:	add	r9, pc, r9
   19540:	beq	1928c <close_stdout@@Base+0x2b7c>
   19544:	b	18b08 <close_stdout@@Base+0x23f8>
   19548:	cmp	r3, #0
   1954c:	bne	18bb8 <close_stdout@@Base+0x24a8>
   19550:	ldr	ip, [sp, #28]
   19554:	bic	r3, r5, r5, asr #31
   19558:	cmp	r3, #1
   1955c:	movcs	r6, r3
   19560:	movcc	r6, #1
   19564:	rsb	r1, fp, ip
   19568:	cmp	r6, r1
   1956c:	bcs	18994 <close_stdout@@Base+0x2284>
   19570:	cmp	r8, #0
   19574:	beq	18c54 <close_stdout@@Base+0x2544>
   19578:	cmp	r3, #1
   1957c:	bls	195ac <close_stdout@@Base+0x2e9c>
   19580:	cmp	sl, #48	; 0x30
   19584:	sub	r5, r5, #1
   19588:	moveq	r0, r8
   1958c:	moveq	r2, r5
   19590:	movne	r0, r8
   19594:	movne	r2, r5
   19598:	moveq	r1, sl
   1959c:	movne	r1, #32
   195a0:	bl	1152c <memset@plt>
   195a4:	ldrb	r2, [r4]
   195a8:	add	r8, r8, r5
   195ac:	strb	r2, [r8], #1
   195b0:	b	18c54 <close_stdout@@Base+0x2544>
   195b4:	andeq	r6, r1, ip, lsr #20
   195b8:	andeq	r0, r0, r8, lsr r1
   195bc:	strdeq	r4, [r0], -r8
   195c0:	andeq	r4, r0, r4, ror fp
   195c4:	andeq	r4, r0, r4, lsr #22
   195c8:	andeq	r4, r0, r8, lsr r8
   195cc:	strdeq	r2, [r0], -ip
   195d0:	cmp	r3, #69	; 0x45
   195d4:	beq	18b08 <close_stdout@@Base+0x23f8>
   195d8:	ldr	r6, [sp, #40]	; 0x28
   195dc:	mov	ip, #1
   195e0:	str	ip, [sp, #76]	; 0x4c
   195e4:	ldr	r0, [r6, #24]
   195e8:	b	18c70 <close_stdout@@Base+0x2560>
   195ec:	ldr	ip, [sp, #40]	; 0x28
   195f0:	mov	r6, #1
   195f4:	str	r6, [sp, #76]	; 0x4c
   195f8:	ldr	r2, [ip, #24]
   195fc:	ldr	ip, [sp, #56]	; 0x38
   19600:	add	r2, r2, #6
   19604:	smull	ip, r0, ip, r2
   19608:	asr	r1, r2, #31
   1960c:	add	r0, r0, r2
   19610:	rsb	r1, r1, r0, asr #2
   19614:	rsb	r1, r1, r1, lsl #3
   19618:	rsb	r2, r1, r2
   1961c:	add	r0, r2, r6
   19620:	b	18c70 <close_stdout@@Base+0x2560>
   19624:	mov	ip, r2
   19628:	mov	r6, #0
   1962c:	ldr	lr, [sp, #32]
   19630:	cmp	r1, #0
   19634:	movne	r6, #1
   19638:	movne	lr, #0
   1963c:	str	lr, [sp, #32]
   19640:	b	189d8 <close_stdout@@Base+0x22c8>
   19644:	cmp	r3, #69	; 0x45
   19648:	beq	18b08 <close_stdout@@Base+0x23f8>
   1964c:	cmn	r5, #1
   19650:	beq	19c1c <close_stdout@@Base+0x350c>
   19654:	cmp	r5, #8
   19658:	bgt	19d34 <close_stdout@@Base+0x3624>
   1965c:	ldr	r0, [sp, #1224]	; 0x4c8
   19660:	mov	r2, r5
   19664:	ldr	ip, [sp, #68]	; 0x44
   19668:	smull	r6, r1, ip, r0
   1966c:	add	r2, r2, #1
   19670:	cmp	r2, #9
   19674:	asr	r0, r0, #31
   19678:	rsb	r0, r0, r1, asr #2
   1967c:	bne	19668 <close_stdout@@Base+0x2f58>
   19680:	str	r5, [sp, #76]	; 0x4c
   19684:	b	18c70 <close_stdout@@Base+0x2560>
   19688:	cmp	r3, #69	; 0x45
   1968c:	beq	18b08 <close_stdout@@Base+0x23f8>
   19690:	ldr	r6, [sp, #40]	; 0x28
   19694:	mov	ip, #2
   19698:	str	ip, [sp, #76]	; 0x4c
   1969c:	ldr	r0, [r6, #4]
   196a0:	b	18c70 <close_stdout@@Base+0x2560>
   196a4:	ldr	lr, [sp, #40]	; 0x28
   196a8:	add	ip, sp, #96	; 0x60
   196ac:	add	r7, sp, #152	; 0x98
   196b0:	ldm	lr!, {r0, r1, r2, r3}
   196b4:	stmia	ip!, {r0, r1, r2, r3}
   196b8:	ldm	lr!, {r0, r1, r2, r3}
   196bc:	stmia	ip!, {r0, r1, r2, r3}
   196c0:	ldm	lr, {r0, r1, r2}
   196c4:	stm	ip, {r0, r1, r2}
   196c8:	add	r0, sp, #96	; 0x60
   196cc:	bl	112f8 <mktime@plt>
   196d0:	ldr	r9, [sp, #68]	; 0x44
   196d4:	add	r2, r7, #9
   196d8:	lsr	ip, r0, #31
   196dc:	smull	r3, r1, r9, r0
   196e0:	asr	r3, r0, #31
   196e4:	cmp	ip, #0
   196e8:	mov	r6, r2
   196ec:	rsb	r3, r3, r1, asr #2
   196f0:	add	r1, r3, r3, lsl #2
   196f4:	sub	r1, r0, r1, lsl #1
   196f8:	mov	r0, r3
   196fc:	rsbne	r1, r1, #48	; 0x30
   19700:	addeq	r1, r1, #48	; 0x30
   19704:	cmp	r3, #0
   19708:	uxtb	r1, r1
   1970c:	strb	r1, [r2], #-1
   19710:	bne	196dc <close_stdout@@Base+0x2fcc>
   19714:	cmp	r5, #1
   19718:	movge	r3, r5
   1971c:	movlt	r3, #1
   19720:	cmp	ip, #0
   19724:	beq	18fcc <close_stdout@@Base+0x28bc>
   19728:	cmp	sl, #45	; 0x2d
   1972c:	movne	ip, #45	; 0x2d
   19730:	beq	19a70 <close_stdout@@Base+0x3360>
   19734:	add	r7, r7, #10
   19738:	str	r7, [sp, #52]	; 0x34
   1973c:	rsb	r7, r7, r6
   19740:	add	r7, r3, r7
   19744:	sub	r7, r7, #1
   19748:	cmp	r7, #0
   1974c:	movgt	r2, #1
   19750:	strgt	r2, [sp, #76]	; 0x4c
   19754:	bgt	18ff4 <close_stdout@@Base+0x28e4>
   19758:	ldr	r1, [sp, #28]
   1975c:	bic	r9, r5, r5, asr #31
   19760:	cmp	r9, #1
   19764:	movcs	r7, r9
   19768:	movcc	r7, #1
   1976c:	rsb	r2, fp, r1
   19770:	cmp	r7, r2
   19774:	bcs	18994 <close_stdout@@Base+0x2284>
   19778:	cmp	r8, #0
   1977c:	beq	197d0 <close_stdout@@Base+0x30c0>
   19780:	cmp	r9, #1
   19784:	movls	r2, #0
   19788:	movhi	r2, #1
   1978c:	cmp	r3, #0
   19790:	movne	r2, #0
   19794:	cmp	r2, #0
   19798:	beq	197cc <close_stdout@@Base+0x30bc>
   1979c:	cmp	sl, #48	; 0x30
   197a0:	sub	lr, r5, #1
   197a4:	mov	r0, r8
   197a8:	addne	r8, r8, lr
   197ac:	mov	r2, lr
   197b0:	movne	r1, #32
   197b4:	beq	19d14 <close_stdout@@Base+0x3604>
   197b8:	str	r3, [sp, #24]
   197bc:	str	ip, [sp, #20]
   197c0:	bl	1152c <memset@plt>
   197c4:	ldr	ip, [sp, #20]
   197c8:	ldr	r3, [sp, #24]
   197cc:	strb	ip, [r8], #1
   197d0:	add	fp, fp, r7
   197d4:	b	190bc <close_stdout@@Base+0x29ac>
   197d8:	ldr	ip, [sp, #28]
   197dc:	bic	r3, r5, r5, asr #31
   197e0:	cmp	r3, #1
   197e4:	movcs	r6, r3
   197e8:	movcc	r6, #1
   197ec:	rsb	r2, fp, ip
   197f0:	cmp	r6, r2
   197f4:	bcs	18994 <close_stdout@@Base+0x2284>
   197f8:	cmp	r8, #0
   197fc:	beq	18c54 <close_stdout@@Base+0x2544>
   19800:	cmp	r3, #1
   19804:	bls	19830 <close_stdout@@Base+0x3120>
   19808:	cmp	sl, #48	; 0x30
   1980c:	sub	r5, r5, #1
   19810:	moveq	r0, r8
   19814:	movne	r0, r8
   19818:	moveq	r1, sl
   1981c:	moveq	r2, r5
   19820:	movne	r2, r5
   19824:	movne	r1, #32
   19828:	add	r8, r8, r5
   1982c:	bl	1152c <memset@plt>
   19830:	mov	r3, #10
   19834:	strb	r3, [r8], #1
   19838:	b	18c54 <close_stdout@@Base+0x2544>
   1983c:	ldr	r9, [pc, #-636]	; 195c8 <close_stdout@@Base+0x2eb8>
   19840:	add	r9, pc, r9
   19844:	b	1928c <close_stdout@@Base+0x2b7c>
   19848:	mov	ip, #112	; 0x70
   1984c:	mov	r6, #1
   19850:	mov	r9, ip
   19854:	b	1962c <close_stdout@@Base+0x2f1c>
   19858:	cmp	r3, #69	; 0x45
   1985c:	beq	18b08 <close_stdout@@Base+0x23f8>
   19860:	ldr	r6, [sp, #40]	; 0x28
   19864:	mov	ip, #2
   19868:	str	ip, [sp, #76]	; 0x4c
   1986c:	ldr	r0, [r6]
   19870:	b	18c70 <close_stdout@@Base+0x2560>
   19874:	ldrb	r2, [r4, #1]
   19878:	cmp	r2, #58	; 0x3a
   1987c:	beq	19b64 <close_stdout@@Base+0x3454>
   19880:	add	r1, r4, #1
   19884:	mov	r7, #1
   19888:	cmp	r2, #122	; 0x7a
   1988c:	moveq	r4, r1
   19890:	bne	18b08 <close_stdout@@Base+0x23f8>
   19894:	b	18d44 <close_stdout@@Base+0x2634>
   19898:	cmp	r3, #69	; 0x45
   1989c:	beq	18b08 <close_stdout@@Base+0x23f8>
   198a0:	ldr	r6, [sp, #40]	; 0x28
   198a4:	mov	ip, #2
   198a8:	str	ip, [sp, #76]	; 0x4c
   198ac:	ldr	r0, [r6, #8]
   198b0:	b	18c70 <close_stdout@@Base+0x2560>
   198b4:	cmp	r3, #69	; 0x45
   198b8:	beq	18b08 <close_stdout@@Base+0x23f8>
   198bc:	ldr	ip, [sp, #40]	; 0x28
   198c0:	ldr	r0, [ip, #8]
   198c4:	b	18d0c <close_stdout@@Base+0x25fc>
   198c8:	cmp	r3, #69	; 0x45
   198cc:	beq	18b08 <close_stdout@@Base+0x23f8>
   198d0:	ldr	r6, [sp, #40]	; 0x28
   198d4:	mov	ip, #2
   198d8:	str	ip, [sp, #76]	; 0x4c
   198dc:	ldr	r1, [r6, #28]
   198e0:	ldr	r2, [r6, #24]
   198e4:	ldr	r6, [sp, #56]	; 0x38
   198e8:	rsb	r2, r2, r1
   198ec:	add	r2, r2, #7
   198f0:	smull	r6, r0, r6, r2
   198f4:	asr	r1, r2, #31
   198f8:	add	r0, r0, r2
   198fc:	rsb	r0, r1, r0, asr ip
   19900:	b	18c70 <close_stdout@@Base+0x2560>
   19904:	ldr	ip, [sp, #32]
   19908:	cmp	r1, #0
   1990c:	movne	ip, #1
   19910:	str	ip, [sp, #32]
   19914:	b	18df0 <close_stdout@@Base+0x26e0>
   19918:	lsr	ip, ip, #31
   1991c:	str	ip, [sp, #52]	; 0x34
   19920:	ldr	ip, [sp, #76]	; 0x4c
   19924:	mov	r0, #100	; 0x64
   19928:	movw	r1, #10000	; 0x2710
   1992c:	mul	r2, r0, r2
   19930:	mla	r0, r1, ip, r2
   19934:	mov	r1, #1
   19938:	mov	ip, #9
   1993c:	mov	r2, #20
   19940:	str	r1, [sp, #88]	; 0x58
   19944:	str	ip, [sp, #76]	; 0x4c
   19948:	add	r0, r0, r6
   1994c:	b	18c80 <close_stdout@@Base+0x2570>
   19950:	ldr	r1, [sp, #76]	; 0x4c
   19954:	mov	r0, #100	; 0x64
   19958:	lsr	ip, ip, #31
   1995c:	mov	r6, #1
   19960:	str	ip, [sp, #52]	; 0x34
   19964:	mov	ip, #6
   19968:	mla	r0, r0, r1, r2
   1996c:	str	r6, [sp, #88]	; 0x58
   19970:	mov	r2, #4
   19974:	str	ip, [sp, #76]	; 0x4c
   19978:	b	18c80 <close_stdout@@Base+0x2570>
   1997c:	ldr	r1, [sp, #76]	; 0x4c
   19980:	mov	r0, #100	; 0x64
   19984:	lsr	ip, ip, #31
   19988:	mov	r6, #1
   1998c:	str	ip, [sp, #52]	; 0x34
   19990:	mov	ip, #5
   19994:	mla	r0, r0, r1, r2
   19998:	str	r6, [sp, #88]	; 0x58
   1999c:	mov	r2, #0
   199a0:	str	ip, [sp, #76]	; 0x4c
   199a4:	b	18c80 <close_stdout@@Base+0x2570>
   199a8:	cmp	r6, #0
   199ac:	bne	19918 <close_stdout@@Base+0x3208>
   199b0:	cmp	r2, #0
   199b4:	bne	19950 <close_stdout@@Base+0x3240>
   199b8:	lsr	ip, ip, #31
   199bc:	ldr	r0, [sp, #76]	; 0x4c
   199c0:	mov	r1, #1
   199c4:	mov	r6, #3
   199c8:	str	ip, [sp, #52]	; 0x34
   199cc:	str	r1, [sp, #88]	; 0x58
   199d0:	str	r6, [sp, #76]	; 0x4c
   199d4:	b	18c80 <close_stdout@@Base+0x2570>
   199d8:	mov	ip, #45	; 0x2d
   199dc:	cmp	sl, #45	; 0x2d
   199e0:	bne	19734 <close_stdout@@Base+0x3024>
   199e4:	ldr	r1, [sp, #28]
   199e8:	bic	r9, r5, r5, asr #31
   199ec:	cmp	r9, #1
   199f0:	movcs	sl, r9
   199f4:	movcc	sl, #1
   199f8:	rsb	r2, fp, r1
   199fc:	cmp	sl, r2
   19a00:	bcs	18994 <close_stdout@@Base+0x2284>
   19a04:	cmp	r8, #0
   19a08:	beq	19a50 <close_stdout@@Base+0x3340>
   19a0c:	cmp	r9, #1
   19a10:	movls	r2, #0
   19a14:	movhi	r2, #1
   19a18:	cmp	r3, #0
   19a1c:	movne	r2, #0
   19a20:	cmp	r2, #0
   19a24:	beq	19a4c <close_stdout@@Base+0x333c>
   19a28:	sub	r2, r5, #1
   19a2c:	mov	r0, r8
   19a30:	mov	r1, #32
   19a34:	str	r3, [sp, #24]
   19a38:	str	ip, [sp, #20]
   19a3c:	add	r8, r8, r2
   19a40:	bl	1152c <memset@plt>
   19a44:	ldr	ip, [sp, #20]
   19a48:	ldr	r3, [sp, #24]
   19a4c:	strb	ip, [r8], #1
   19a50:	add	fp, fp, sl
   19a54:	add	r7, r7, #10
   19a58:	mov	sl, #45	; 0x2d
   19a5c:	str	r7, [sp, #52]	; 0x34
   19a60:	b	190bc <close_stdout@@Base+0x29ac>
   19a64:	bl	1134c <memcpy@plt>
   19a68:	ldr	ip, [sp, #20]
   19a6c:	b	19158 <close_stdout@@Base+0x2a48>
   19a70:	mov	ip, sl
   19a74:	b	199e4 <close_stdout@@Base+0x32d4>
   19a78:	mov	ip, #43	; 0x2b
   19a7c:	b	199dc <close_stdout@@Base+0x32cc>
   19a80:	ldr	r0, [sp, #28]
   19a84:	rsb	r2, fp, r0
   19a88:	cmp	r7, r2
   19a8c:	bcs	18994 <close_stdout@@Base+0x2284>
   19a90:	cmp	r8, #0
   19a94:	beq	19abc <close_stdout@@Base+0x33ac>
   19a98:	mov	r0, r8
   19a9c:	mov	r1, #32
   19aa0:	mov	r2, r7
   19aa4:	str	r3, [sp, #24]
   19aa8:	str	ip, [sp, #20]
   19aac:	bl	1152c <memset@plt>
   19ab0:	ldr	ip, [sp, #20]
   19ab4:	add	r8, r8, r7
   19ab8:	ldr	r3, [sp, #24]
   19abc:	cmp	r5, r7
   19ac0:	ldr	r1, [sp, #76]	; 0x4c
   19ac4:	rsbgt	r5, r7, r5
   19ac8:	add	fp, fp, r7
   19acc:	movle	r5, #0
   19ad0:	bicgt	r9, r5, r5, asr #31
   19ad4:	movle	r9, r5
   19ad8:	cmp	r1, #0
   19adc:	beq	190bc <close_stdout@@Base+0x29ac>
   19ae0:	ldr	r0, [sp, #28]
   19ae4:	cmp	r9, #1
   19ae8:	movcs	r7, r9
   19aec:	movcc	r7, #1
   19af0:	rsb	r2, fp, r0
   19af4:	cmp	r7, r2
   19af8:	bcs	18994 <close_stdout@@Base+0x2284>
   19afc:	cmp	r8, #0
   19b00:	beq	197d0 <close_stdout@@Base+0x30c0>
   19b04:	cmp	r9, #1
   19b08:	movls	r2, #0
   19b0c:	movhi	r2, #1
   19b10:	cmp	r3, #0
   19b14:	movne	r2, #0
   19b18:	cmp	r2, #0
   19b1c:	beq	197cc <close_stdout@@Base+0x30bc>
   19b20:	sub	r2, r5, #1
   19b24:	mov	r0, r8
   19b28:	mov	r1, #32
   19b2c:	add	r8, r8, r2
   19b30:	b	197b8 <close_stdout@@Base+0x30a8>
   19b34:	bic	r9, r5, r5, asr #31
   19b38:	b	190bc <close_stdout@@Base+0x29ac>
   19b3c:	mov	fp, r2
   19b40:	b	18ae4 <close_stdout@@Base+0x23d4>
   19b44:	bl	1134c <memcpy@plt>
   19b48:	b	18ee0 <close_stdout@@Base+0x27d0>
   19b4c:	mov	ip, #0
   19b50:	str	ip, [sp, #76]	; 0x4c
   19b54:	b	18c9c <close_stdout@@Base+0x258c>
   19b58:	mov	r6, #0
   19b5c:	str	r6, [sp, #76]	; 0x4c
   19b60:	b	18c9c <close_stdout@@Base+0x258c>
   19b64:	add	r0, r4, #2
   19b68:	mov	r7, #1
   19b6c:	mov	r1, r0
   19b70:	ldrb	r2, [r0], #1
   19b74:	add	r7, r7, #1
   19b78:	cmp	r2, #58	; 0x3a
   19b7c:	bne	19888 <close_stdout@@Base+0x3178>
   19b80:	b	19b6c <close_stdout@@Base+0x345c>
   19b84:	mov	r0, r8
   19b88:	ldr	r1, [sp, #84]	; 0x54
   19b8c:	mov	r2, r6
   19b90:	bl	18518 <close_stdout@@Base+0x1e08>
   19b94:	b	18ee0 <close_stdout@@Base+0x27d0>
   19b98:	ldr	r6, [sp, #56]	; 0x38
   19b9c:	asr	r2, r1, #31
   19ba0:	mov	ip, #2
   19ba4:	str	ip, [sp, #76]	; 0x4c
   19ba8:	smull	r6, r0, r6, r1
   19bac:	add	r1, r0, r1
   19bb0:	rsb	r2, r2, r1, asr ip
   19bb4:	add	r0, r2, #1
   19bb8:	b	18c70 <close_stdout@@Base+0x2560>
   19bbc:	ldr	r2, [sp, #52]	; 0x34
   19bc0:	movw	r1, #63636	; 0xf894
   19bc4:	ldr	r6, [sp, #52]	; 0x34
   19bc8:	movt	r1, #65535	; 0xffff
   19bcc:	rsb	r1, r7, r1
   19bd0:	add	r0, r2, #1888	; 0x760
   19bd4:	cmp	r6, r1
   19bd8:	add	r0, r0, #12
   19bdc:	mov	r2, #0
   19be0:	mov	ip, #4
   19be4:	movge	r1, #0
   19be8:	movlt	r1, #1
   19bec:	add	r0, r0, r7
   19bf0:	str	r1, [sp, #52]	; 0x34
   19bf4:	str	r2, [sp, #88]	; 0x58
   19bf8:	str	ip, [sp, #76]	; 0x4c
   19bfc:	b	18c80 <close_stdout@@Base+0x2570>
   19c00:	mov	r2, #32
   19c04:	mov	r6, #0
   19c08:	strb	r2, [sp, #140]	; 0x8c
   19c0c:	mov	r2, #37	; 0x25
   19c10:	str	r6, [sp, #76]	; 0x4c
   19c14:	strb	r2, [sp, #141]	; 0x8d
   19c18:	b	18cb0 <close_stdout@@Base+0x25a0>
   19c1c:	mov	r5, #9
   19c20:	ldr	r0, [sp, #1224]	; 0x4c8
   19c24:	str	r5, [sp, #76]	; 0x4c
   19c28:	b	18c70 <close_stdout@@Base+0x2560>
   19c2c:	ldrb	r2, [r4]
   19c30:	b	18bb0 <close_stdout@@Base+0x24a0>
   19c34:	mov	r1, sl
   19c38:	str	r3, [sp, #24]
   19c3c:	str	ip, [sp, #20]
   19c40:	add	r8, r8, r5
   19c44:	bl	1152c <memset@plt>
   19c48:	ldr	r3, [sp, #24]
   19c4c:	ldr	ip, [sp, #20]
   19c50:	b	19084 <close_stdout@@Base+0x2974>
   19c54:	sub	r6, r6, #1
   19c58:	tst	r6, #3
   19c5c:	movwne	r1, #365	; 0x16d
   19c60:	bne	19cb0 <close_stdout@@Base+0x35a0>
   19c64:	ldr	r1, [sp, #60]	; 0x3c
   19c68:	smull	ip, r1, r1, r6
   19c6c:	asr	ip, r6, #31
   19c70:	rsb	r0, ip, r1, asr #5
   19c74:	str	r1, [sp, #92]	; 0x5c
   19c78:	mov	r1, #100	; 0x64
   19c7c:	mls	r1, r1, r0, r6
   19c80:	cmp	r1, #0
   19c84:	movwne	r1, #366	; 0x16e
   19c88:	bne	19cb0 <close_stdout@@Base+0x35a0>
   19c8c:	ldr	r0, [sp, #92]	; 0x5c
   19c90:	mov	r1, #400	; 0x190
   19c94:	rsb	ip, ip, r0, asr #7
   19c98:	movw	r0, #366	; 0x16e
   19c9c:	mls	r1, r1, ip, r6
   19ca0:	movw	ip, #365	; 0x16d
   19ca4:	cmp	r1, #0
   19ca8:	moveq	r1, r0
   19cac:	movne	r1, ip
   19cb0:	ldr	ip, [sp, #76]	; 0x4c
   19cb4:	add	r6, r7, r1
   19cb8:	ldr	r0, [sp, #56]	; 0x38
   19cbc:	mvn	r7, #0
   19cc0:	rsb	r1, ip, r6
   19cc4:	add	r1, r1, #380	; 0x17c
   19cc8:	add	r1, r1, #2
   19ccc:	smull	r0, ip, r0, r1
   19cd0:	asr	r0, r1, #31
   19cd4:	add	ip, ip, r1
   19cd8:	rsb	r0, r0, ip, asr #2
   19cdc:	rsb	r0, r0, r0, lsl #3
   19ce0:	rsb	r1, r0, r1
   19ce4:	rsb	r1, r1, r6
   19ce8:	add	r1, r1, #3
   19cec:	b	19470 <close_stdout@@Base+0x2d60>
   19cf0:	cmp	r1, #0
   19cf4:	movle	r0, #0
   19cf8:	movgt	r0, #1
   19cfc:	b	191fc <close_stdout@@Base+0x2aec>
   19d00:	ldr	ip, [pc, #-1852]	; 195cc <close_stdout@@Base+0x2ebc>
   19d04:	ldr	r6, [sp, #84]	; 0x54
   19d08:	add	ip, pc, ip
   19d0c:	str	ip, [sp, #84]	; 0x54
   19d10:	b	18e64 <close_stdout@@Base+0x2754>
   19d14:	mov	r1, sl
   19d18:	str	r3, [sp, #24]
   19d1c:	str	ip, [sp, #20]
   19d20:	add	r8, r8, lr
   19d24:	bl	1152c <memset@plt>
   19d28:	ldr	r3, [sp, #24]
   19d2c:	ldr	ip, [sp, #20]
   19d30:	b	197cc <close_stdout@@Base+0x30bc>
   19d34:	ldr	r0, [sp, #1224]	; 0x4c8
   19d38:	str	r5, [sp, #76]	; 0x4c
   19d3c:	b	18c70 <close_stdout@@Base+0x2560>
   19d40:	bl	11394 <__stack_chk_fail@plt>
   19d44:	mov	ip, #0
   19d48:	str	ip, [sp, #76]	; 0x4c
   19d4c:	b	18cb0 <close_stdout@@Base+0x25a0>
   19d50:	push	{r4, r5, lr}
   19d54:	sub	sp, sp, #20
   19d58:	mov	r5, r1
   19d5c:	mov	r4, r2
   19d60:	ldr	ip, [sp, #32]
   19d64:	mov	r1, r0
   19d68:	ldr	lr, [sp, #36]	; 0x24
   19d6c:	mov	r2, r5
   19d70:	mov	r0, #0
   19d74:	stm	sp, {r3, ip}
   19d78:	mov	r3, r4
   19d7c:	str	lr, [sp, #8]
   19d80:	bl	185b0 <close_stdout@@Base+0x1ea0>
   19d84:	add	sp, sp, #20
   19d88:	pop	{r4, r5, pc}
   19d8c:	mov	r1, #0
   19d90:	mov	r2, #3
   19d94:	b	1b4dc <close_stdout@@Base+0x4dcc>
   19d98:	push	{r4, r5, r6, r7, lr}
   19d9c:	cmp	r1, #0
   19da0:	sub	sp, sp, #36	; 0x24
   19da4:	ldr	r7, [pc, #896]	; 1a12c <close_stdout@@Base+0x3a1c>
   19da8:	mov	ip, r3
   19dac:	mov	r5, r0
   19db0:	add	r7, pc, r7
   19db4:	ldr	r4, [sp, #56]	; 0x38
   19db8:	ldr	r6, [sp, #60]	; 0x3c
   19dbc:	beq	1a100 <close_stdout@@Base+0x39f0>
   19dc0:	str	r2, [sp]
   19dc4:	mov	r3, r1
   19dc8:	ldr	r2, [pc, #864]	; 1a130 <close_stdout@@Base+0x3a20>
   19dcc:	mov	r1, #1
   19dd0:	str	ip, [sp, #4]
   19dd4:	add	r2, pc, r2
   19dd8:	bl	11568 <__fprintf_chk@plt>
   19ddc:	ldr	r1, [pc, #848]	; 1a134 <close_stdout@@Base+0x3a24>
   19de0:	mov	r2, #5
   19de4:	mov	r0, #0
   19de8:	add	r1, pc, r1
   19dec:	bl	11388 <dcgettext@plt>
   19df0:	ldr	r2, [pc, #832]	; 1a138 <close_stdout@@Base+0x3a28>
   19df4:	movw	ip, #2013	; 0x7dd
   19df8:	mov	r1, #1
   19dfc:	ldr	r2, [r7, r2]
   19e00:	str	ip, [sp]
   19e04:	mov	r3, r0
   19e08:	mov	r0, r5
   19e0c:	bl	11568 <__fprintf_chk@plt>
   19e10:	ldr	r1, [pc, #804]	; 1a13c <close_stdout@@Base+0x3a2c>
   19e14:	mov	r0, #0
   19e18:	mov	r2, #5
   19e1c:	add	r1, pc, r1
   19e20:	bl	11388 <dcgettext@plt>
   19e24:	mov	r1, r5
   19e28:	bl	112bc <fputs_unlocked@plt>
   19e2c:	cmp	r6, #9
   19e30:	addls	pc, pc, r6, lsl #2
   19e34:	b	1a11c <close_stdout@@Base+0x3a0c>
   19e38:	b	19ecc <close_stdout@@Base+0x37bc>
   19e3c:	b	19ed0 <close_stdout@@Base+0x37c0>
   19e40:	b	19f00 <close_stdout@@Base+0x37f0>
   19e44:	b	19f34 <close_stdout@@Base+0x3824>
   19e48:	b	19f70 <close_stdout@@Base+0x3860>
   19e4c:	b	19fb0 <close_stdout@@Base+0x38a0>
   19e50:	b	19ff8 <close_stdout@@Base+0x38e8>
   19e54:	b	1a048 <close_stdout@@Base+0x3938>
   19e58:	b	1a0a0 <close_stdout@@Base+0x3990>
   19e5c:	b	19e60 <close_stdout@@Base+0x3750>
   19e60:	ldr	r1, [pc, #728]	; 1a140 <close_stdout@@Base+0x3a30>
   19e64:	mov	r0, #0
   19e68:	add	r1, pc, r1
   19e6c:	mov	r2, #5
   19e70:	bl	11388 <dcgettext@plt>
   19e74:	ldm	r4, {r3, ip}
   19e78:	mov	r1, #1
   19e7c:	str	ip, [sp]
   19e80:	ldr	ip, [r4, #8]
   19e84:	str	ip, [sp, #4]
   19e88:	ldr	ip, [r4, #12]
   19e8c:	str	ip, [sp, #8]
   19e90:	ldr	ip, [r4, #16]
   19e94:	str	ip, [sp, #12]
   19e98:	ldr	ip, [r4, #20]
   19e9c:	str	ip, [sp, #16]
   19ea0:	ldr	ip, [r4, #24]
   19ea4:	str	ip, [sp, #20]
   19ea8:	ldr	ip, [r4, #28]
   19eac:	str	ip, [sp, #24]
   19eb0:	ldr	ip, [r4, #32]
   19eb4:	str	ip, [sp, #28]
   19eb8:	mov	r2, r0
   19ebc:	mov	r0, r5
   19ec0:	bl	11568 <__fprintf_chk@plt>
   19ec4:	add	sp, sp, #36	; 0x24
   19ec8:	pop	{r4, r5, r6, r7, pc}
   19ecc:	bl	115f8 <abort@plt>
   19ed0:	ldr	r1, [pc, #620]	; 1a144 <close_stdout@@Base+0x3a34>
   19ed4:	mov	r2, #5
   19ed8:	mov	r0, #0
   19edc:	add	r1, pc, r1
   19ee0:	bl	11388 <dcgettext@plt>
   19ee4:	ldr	r3, [r4]
   19ee8:	mov	r1, #1
   19eec:	mov	r2, r0
   19ef0:	mov	r0, r5
   19ef4:	add	sp, sp, #36	; 0x24
   19ef8:	pop	{r4, r5, r6, r7, lr}
   19efc:	b	11568 <__fprintf_chk@plt>
   19f00:	ldr	r1, [pc, #576]	; 1a148 <close_stdout@@Base+0x3a38>
   19f04:	mov	r2, #5
   19f08:	mov	r0, #0
   19f0c:	add	r1, pc, r1
   19f10:	bl	11388 <dcgettext@plt>
   19f14:	ldm	r4, {r3, ip}
   19f18:	mov	r1, #1
   19f1c:	str	ip, [sp, #56]	; 0x38
   19f20:	mov	r2, r0
   19f24:	mov	r0, r5
   19f28:	add	sp, sp, #36	; 0x24
   19f2c:	pop	{r4, r5, r6, r7, lr}
   19f30:	b	11568 <__fprintf_chk@plt>
   19f34:	ldr	r1, [pc, #528]	; 1a14c <close_stdout@@Base+0x3a3c>
   19f38:	mov	r2, #5
   19f3c:	mov	r0, #0
   19f40:	add	r1, pc, r1
   19f44:	bl	11388 <dcgettext@plt>
   19f48:	ldm	r4, {r3, ip}
   19f4c:	mov	r1, #1
   19f50:	str	ip, [sp, #56]	; 0x38
   19f54:	ldr	ip, [r4, #8]
   19f58:	str	ip, [sp, #60]	; 0x3c
   19f5c:	mov	r2, r0
   19f60:	mov	r0, r5
   19f64:	add	sp, sp, #36	; 0x24
   19f68:	pop	{r4, r5, r6, r7, lr}
   19f6c:	b	11568 <__fprintf_chk@plt>
   19f70:	ldr	r1, [pc, #472]	; 1a150 <close_stdout@@Base+0x3a40>
   19f74:	mov	r2, #5
   19f78:	mov	r0, #0
   19f7c:	add	r1, pc, r1
   19f80:	bl	11388 <dcgettext@plt>
   19f84:	ldm	r4, {r3, ip}
   19f88:	mov	r1, #1
   19f8c:	str	ip, [sp]
   19f90:	ldr	ip, [r4, #8]
   19f94:	str	ip, [sp, #4]
   19f98:	ldr	ip, [r4, #12]
   19f9c:	str	ip, [sp, #8]
   19fa0:	mov	r2, r0
   19fa4:	mov	r0, r5
   19fa8:	bl	11568 <__fprintf_chk@plt>
   19fac:	b	19ec4 <close_stdout@@Base+0x37b4>
   19fb0:	ldr	r1, [pc, #412]	; 1a154 <close_stdout@@Base+0x3a44>
   19fb4:	mov	r2, #5
   19fb8:	mov	r0, #0
   19fbc:	add	r1, pc, r1
   19fc0:	bl	11388 <dcgettext@plt>
   19fc4:	ldm	r4, {r3, ip}
   19fc8:	mov	r1, #1
   19fcc:	str	ip, [sp]
   19fd0:	ldr	ip, [r4, #8]
   19fd4:	str	ip, [sp, #4]
   19fd8:	ldr	ip, [r4, #12]
   19fdc:	str	ip, [sp, #8]
   19fe0:	ldr	ip, [r4, #16]
   19fe4:	str	ip, [sp, #12]
   19fe8:	mov	r2, r0
   19fec:	mov	r0, r5
   19ff0:	bl	11568 <__fprintf_chk@plt>
   19ff4:	b	19ec4 <close_stdout@@Base+0x37b4>
   19ff8:	ldr	r1, [pc, #344]	; 1a158 <close_stdout@@Base+0x3a48>
   19ffc:	mov	r2, #5
   1a000:	mov	r0, #0
   1a004:	add	r1, pc, r1
   1a008:	bl	11388 <dcgettext@plt>
   1a00c:	ldm	r4, {r3, ip}
   1a010:	mov	r1, #1
   1a014:	str	ip, [sp]
   1a018:	ldr	ip, [r4, #8]
   1a01c:	str	ip, [sp, #4]
   1a020:	ldr	ip, [r4, #12]
   1a024:	str	ip, [sp, #8]
   1a028:	ldr	ip, [r4, #16]
   1a02c:	str	ip, [sp, #12]
   1a030:	ldr	ip, [r4, #20]
   1a034:	str	ip, [sp, #16]
   1a038:	mov	r2, r0
   1a03c:	mov	r0, r5
   1a040:	bl	11568 <__fprintf_chk@plt>
   1a044:	b	19ec4 <close_stdout@@Base+0x37b4>
   1a048:	ldr	r1, [pc, #268]	; 1a15c <close_stdout@@Base+0x3a4c>
   1a04c:	mov	r2, #5
   1a050:	mov	r0, #0
   1a054:	add	r1, pc, r1
   1a058:	bl	11388 <dcgettext@plt>
   1a05c:	ldm	r4, {r3, ip}
   1a060:	mov	r1, #1
   1a064:	str	ip, [sp]
   1a068:	ldr	ip, [r4, #8]
   1a06c:	str	ip, [sp, #4]
   1a070:	ldr	ip, [r4, #12]
   1a074:	str	ip, [sp, #8]
   1a078:	ldr	ip, [r4, #16]
   1a07c:	str	ip, [sp, #12]
   1a080:	ldr	ip, [r4, #20]
   1a084:	str	ip, [sp, #16]
   1a088:	ldr	ip, [r4, #24]
   1a08c:	str	ip, [sp, #20]
   1a090:	mov	r2, r0
   1a094:	mov	r0, r5
   1a098:	bl	11568 <__fprintf_chk@plt>
   1a09c:	b	19ec4 <close_stdout@@Base+0x37b4>
   1a0a0:	ldr	r1, [pc, #184]	; 1a160 <close_stdout@@Base+0x3a50>
   1a0a4:	mov	r2, #5
   1a0a8:	mov	r0, #0
   1a0ac:	add	r1, pc, r1
   1a0b0:	bl	11388 <dcgettext@plt>
   1a0b4:	ldm	r4, {r3, ip}
   1a0b8:	mov	r1, #1
   1a0bc:	str	ip, [sp]
   1a0c0:	ldr	ip, [r4, #8]
   1a0c4:	str	ip, [sp, #4]
   1a0c8:	ldr	ip, [r4, #12]
   1a0cc:	str	ip, [sp, #8]
   1a0d0:	ldr	ip, [r4, #16]
   1a0d4:	str	ip, [sp, #12]
   1a0d8:	ldr	ip, [r4, #20]
   1a0dc:	str	ip, [sp, #16]
   1a0e0:	ldr	ip, [r4, #24]
   1a0e4:	str	ip, [sp, #20]
   1a0e8:	ldr	ip, [r4, #28]
   1a0ec:	str	ip, [sp, #24]
   1a0f0:	mov	r2, r0
   1a0f4:	mov	r0, r5
   1a0f8:	bl	11568 <__fprintf_chk@plt>
   1a0fc:	b	19ec4 <close_stdout@@Base+0x37b4>
   1a100:	str	r3, [sp]
   1a104:	mov	r3, r2
   1a108:	ldr	r2, [pc, #84]	; 1a164 <close_stdout@@Base+0x3a54>
   1a10c:	mov	r1, #1
   1a110:	add	r2, pc, r2
   1a114:	bl	11568 <__fprintf_chk@plt>
   1a118:	b	19ddc <close_stdout@@Base+0x36cc>
   1a11c:	ldr	r1, [pc, #68]	; 1a168 <close_stdout@@Base+0x3a58>
   1a120:	mov	r0, #0
   1a124:	add	r1, pc, r1
   1a128:	b	19e6c <close_stdout@@Base+0x375c>
   1a12c:	andeq	r5, r1, r8, asr #4
   1a130:			; <UNDEFINED> instruction: 0x000042b8
   1a134:			; <UNDEFINED> instruction: 0x000042b8
   1a138:	andeq	r0, r0, r8, ror #2
   1a13c:	andeq	r4, r0, r8, lsl #5
   1a140:	andeq	r4, r0, r4, lsl r4
   1a144:	muleq	r0, r4, r2
   1a148:	andeq	r4, r0, r4, ror r2
   1a14c:	andeq	r4, r0, r8, asr r2
   1a150:	andeq	r4, r0, r8, lsr r2
   1a154:	andeq	r4, r0, r8, lsl r2
   1a158:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1a15c:	andeq	r4, r0, ip, asr #3
   1a160:	andeq	r4, r0, r0, lsr #3
   1a164:	andeq	r3, r0, r8, lsl #31
   1a168:	andeq	r4, r0, ip, lsl #3
   1a16c:	push	{r4, r5, lr}
   1a170:	sub	sp, sp, #12
   1a174:	ldr	r5, [sp, #24]
   1a178:	ldr	ip, [r5]
   1a17c:	cmp	ip, #0
   1a180:	beq	1a19c <close_stdout@@Base+0x3a8c>
   1a184:	mov	lr, r5
   1a188:	mov	ip, #0
   1a18c:	ldr	r4, [lr, #4]!
   1a190:	add	ip, ip, #1
   1a194:	cmp	r4, #0
   1a198:	bne	1a18c <close_stdout@@Base+0x3a7c>
   1a19c:	stm	sp, {r5, ip}
   1a1a0:	bl	19d98 <close_stdout@@Base+0x3688>
   1a1a4:	add	sp, sp, #12
   1a1a8:	pop	{r4, r5, pc}
   1a1ac:	push	{r4, r5, r6, r7, lr}
   1a1b0:	sub	sp, sp, #60	; 0x3c
   1a1b4:	ldr	r4, [pc, #100]	; 1a220 <close_stdout@@Base+0x3b10>
   1a1b8:	mov	ip, #0
   1a1bc:	ldr	r5, [pc, #96]	; 1a224 <close_stdout@@Base+0x3b14>
   1a1c0:	mov	lr, ip
   1a1c4:	add	r4, pc, r4
   1a1c8:	ldr	r6, [sp, #80]	; 0x50
   1a1cc:	ldr	r7, [r4, r5]
   1a1d0:	add	r5, sp, #12
   1a1d4:	ldr	r4, [r7]
   1a1d8:	str	r4, [sp, #52]	; 0x34
   1a1dc:	ldr	r4, [r6, ip]
   1a1e0:	cmp	r4, #0
   1a1e4:	str	r4, [r5, ip]
   1a1e8:	beq	1a1fc <close_stdout@@Base+0x3aec>
   1a1ec:	add	lr, lr, #1
   1a1f0:	add	ip, ip, #4
   1a1f4:	cmp	lr, #10
   1a1f8:	bne	1a1dc <close_stdout@@Base+0x3acc>
   1a1fc:	stm	sp, {r5, lr}
   1a200:	bl	19d98 <close_stdout@@Base+0x3688>
   1a204:	ldr	r2, [sp, #52]	; 0x34
   1a208:	ldr	r3, [r7]
   1a20c:	cmp	r2, r3
   1a210:	bne	1a21c <close_stdout@@Base+0x3b0c>
   1a214:	add	sp, sp, #60	; 0x3c
   1a218:	pop	{r4, r5, r6, r7, pc}
   1a21c:	bl	11394 <__stack_chk_fail@plt>
   1a220:	andeq	r4, r1, r4, lsr lr
   1a224:	andeq	r0, r0, r8, lsr r1
   1a228:	push	{r3}		; (str r3, [sp, #-4]!)
   1a22c:	push	{r4, lr}
   1a230:	sub	sp, sp, #20
   1a234:	ldr	lr, [pc, #72]	; 1a284 <close_stdout@@Base+0x3b74>
   1a238:	add	ip, sp, #32
   1a23c:	ldr	r4, [pc, #68]	; 1a288 <close_stdout@@Base+0x3b78>
   1a240:	add	lr, pc, lr
   1a244:	ldr	r3, [sp, #28]
   1a248:	ldr	r4, [lr, r4]
   1a24c:	str	ip, [sp]
   1a250:	str	ip, [sp, #8]
   1a254:	ldr	ip, [r4]
   1a258:	str	ip, [sp, #12]
   1a25c:	bl	1a1ac <close_stdout@@Base+0x3a9c>
   1a260:	ldr	r2, [sp, #12]
   1a264:	ldr	r3, [r4]
   1a268:	cmp	r2, r3
   1a26c:	bne	1a280 <close_stdout@@Base+0x3b70>
   1a270:	add	sp, sp, #20
   1a274:	pop	{r4, lr}
   1a278:	add	sp, sp, #4
   1a27c:	bx	lr
   1a280:	bl	11394 <__stack_chk_fail@plt>
   1a284:			; <UNDEFINED> instruction: 0x00014db8
   1a288:	andeq	r0, r0, r8, lsr r1
   1a28c:	ldr	r1, [pc, #132]	; 1a318 <close_stdout@@Base+0x3c08>
   1a290:	mov	r2, #5
   1a294:	push	{r4, lr}
   1a298:	add	r1, pc, r1
   1a29c:	mov	r0, #0
   1a2a0:	ldr	r4, [pc, #116]	; 1a31c <close_stdout@@Base+0x3c0c>
   1a2a4:	bl	11388 <dcgettext@plt>
   1a2a8:	ldr	r2, [pc, #112]	; 1a320 <close_stdout@@Base+0x3c10>
   1a2ac:	add	r4, pc, r4
   1a2b0:	add	r2, pc, r2
   1a2b4:	mov	r1, r0
   1a2b8:	mov	r0, #1
   1a2bc:	bl	11550 <__printf_chk@plt>
   1a2c0:	ldr	r1, [pc, #92]	; 1a324 <close_stdout@@Base+0x3c14>
   1a2c4:	mov	r2, #5
   1a2c8:	mov	r0, #0
   1a2cc:	add	r1, pc, r1
   1a2d0:	bl	11388 <dcgettext@plt>
   1a2d4:	ldr	r2, [pc, #76]	; 1a328 <close_stdout@@Base+0x3c18>
   1a2d8:	ldr	r3, [pc, #76]	; 1a32c <close_stdout@@Base+0x3c1c>
   1a2dc:	add	r2, pc, r2
   1a2e0:	add	r3, pc, r3
   1a2e4:	mov	r1, r0
   1a2e8:	mov	r0, #1
   1a2ec:	bl	11550 <__printf_chk@plt>
   1a2f0:	ldr	r1, [pc, #56]	; 1a330 <close_stdout@@Base+0x3c20>
   1a2f4:	mov	r0, #0
   1a2f8:	mov	r2, #5
   1a2fc:	add	r1, pc, r1
   1a300:	bl	11388 <dcgettext@plt>
   1a304:	ldr	r3, [pc, #40]	; 1a334 <close_stdout@@Base+0x3c24>
   1a308:	ldr	r3, [r4, r3]
   1a30c:	pop	{r4, lr}
   1a310:	ldr	r1, [r3]
   1a314:	b	112bc <fputs_unlocked@plt>
   1a318:	andeq	r4, r0, r4, asr r0
   1a31c:	andeq	r4, r1, ip, asr #26
   1a320:	andeq	r4, r0, r4, asr r0
   1a324:	andeq	r4, r0, r0, asr r0
   1a328:	andeq	r3, r0, r0, asr #16
   1a32c:	andeq	r3, r0, ip, asr #16
   1a330:	andeq	r4, r0, r4, lsr r0
   1a334:	andeq	r0, r0, r8, asr r1
   1a338:	push	{r4, lr}
   1a33c:	mov	r4, r0
   1a340:	bl	11454 <malloc@plt>
   1a344:	rsbs	r3, r0, #1
   1a348:	movcc	r3, #0
   1a34c:	cmp	r4, #0
   1a350:	moveq	r3, #0
   1a354:	cmp	r3, #0
   1a358:	popeq	{r4, pc}
   1a35c:	bl	1a54c <close_stdout@@Base+0x3e3c>
   1a360:	push	{r3, r4, r5, lr}
   1a364:	mov	r4, r0
   1a368:	mvn	r0, #0
   1a36c:	mov	r5, r1
   1a370:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1a374:	cmp	r0, r4
   1a378:	bcc	1a388 <close_stdout@@Base+0x3c78>
   1a37c:	mul	r0, r4, r5
   1a380:	pop	{r3, r4, r5, lr}
   1a384:	b	1a338 <close_stdout@@Base+0x3c28>
   1a388:	bl	1a54c <close_stdout@@Base+0x3e3c>
   1a38c:	b	1a338 <close_stdout@@Base+0x3c28>
   1a390:	rsbs	r3, r1, #1
   1a394:	push	{r4, lr}
   1a398:	movcc	r3, #0
   1a39c:	cmp	r0, #0
   1a3a0:	mov	r4, r1
   1a3a4:	moveq	r3, #0
   1a3a8:	cmp	r3, #0
   1a3ac:	bne	1a3d0 <close_stdout@@Base+0x3cc0>
   1a3b0:	bl	113a0 <realloc@plt>
   1a3b4:	rsbs	r3, r0, #1
   1a3b8:	movcc	r3, #0
   1a3bc:	cmp	r4, #0
   1a3c0:	moveq	r3, #0
   1a3c4:	cmp	r3, #0
   1a3c8:	popeq	{r4, pc}
   1a3cc:	bl	1a54c <close_stdout@@Base+0x3e3c>
   1a3d0:	bl	11328 <free@plt>
   1a3d4:	mov	r0, #0
   1a3d8:	pop	{r4, pc}
   1a3dc:	push	{r4, r5, r6, lr}
   1a3e0:	mov	r5, r1
   1a3e4:	mov	r6, r0
   1a3e8:	mov	r1, r2
   1a3ec:	mvn	r0, #0
   1a3f0:	mov	r4, r2
   1a3f4:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1a3f8:	cmp	r0, r5
   1a3fc:	bcc	1a410 <close_stdout@@Base+0x3d00>
   1a400:	mov	r0, r6
   1a404:	mul	r1, r5, r4
   1a408:	pop	{r4, r5, r6, lr}
   1a40c:	b	1a390 <close_stdout@@Base+0x3c80>
   1a410:	bl	1a54c <close_stdout@@Base+0x3e3c>
   1a414:	push	{r3, r4, r5, r6, r7, lr}
   1a418:	subs	r7, r0, #0
   1a41c:	mov	r5, r1
   1a420:	mov	r6, r2
   1a424:	ldr	r4, [r1]
   1a428:	beq	1a460 <close_stdout@@Base+0x3d50>
   1a42c:	movw	r0, #43690	; 0xaaaa
   1a430:	mov	r1, r2
   1a434:	bfi	r0, r0, #16, #16
   1a438:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1a43c:	cmp	r4, r0
   1a440:	addcc	r3, r4, #1
   1a444:	addcc	r4, r4, r3, lsr #1
   1a448:	bcs	1a484 <close_stdout@@Base+0x3d74>
   1a44c:	str	r4, [r5]
   1a450:	mov	r0, r7
   1a454:	mul	r1, r6, r4
   1a458:	pop	{r3, r4, r5, r6, r7, lr}
   1a45c:	b	1a390 <close_stdout@@Base+0x3c80>
   1a460:	cmp	r4, #0
   1a464:	bne	1a44c <close_stdout@@Base+0x3d3c>
   1a468:	mov	r0, #64	; 0x40
   1a46c:	mov	r1, r2
   1a470:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1a474:	cmp	r0, #0
   1a478:	movne	r4, r0
   1a47c:	addeq	r4, r0, #1
   1a480:	b	1a44c <close_stdout@@Base+0x3d3c>
   1a484:	bl	1a54c <close_stdout@@Base+0x3e3c>
   1a488:	cmp	r0, #0
   1a48c:	push	{r3, lr}
   1a490:	ldr	r3, [r1]
   1a494:	beq	1a4c0 <close_stdout@@Base+0x3db0>
   1a498:	movw	r2, #43689	; 0xaaa9
   1a49c:	movt	r2, #43690	; 0xaaaa
   1a4a0:	cmp	r3, r2
   1a4a4:	addls	r2, r3, #1
   1a4a8:	addls	r3, r3, r2, lsr #1
   1a4ac:	bhi	1a4d8 <close_stdout@@Base+0x3dc8>
   1a4b0:	str	r3, [r1]
   1a4b4:	mov	r1, r3
   1a4b8:	pop	{r3, lr}
   1a4bc:	b	1a390 <close_stdout@@Base+0x3c80>
   1a4c0:	cmp	r3, #0
   1a4c4:	moveq	r3, #64	; 0x40
   1a4c8:	str	r3, [r1]
   1a4cc:	mov	r1, r3
   1a4d0:	pop	{r3, lr}
   1a4d4:	b	1a390 <close_stdout@@Base+0x3c80>
   1a4d8:	bl	1a54c <close_stdout@@Base+0x3e3c>
   1a4dc:	push	{r4, lr}
   1a4e0:	mov	r4, r0
   1a4e4:	bl	1a338 <close_stdout@@Base+0x3c28>
   1a4e8:	mov	r2, r4
   1a4ec:	mov	r1, #0
   1a4f0:	pop	{r4, lr}
   1a4f4:	b	1152c <memset@plt>
   1a4f8:	push	{r3, lr}
   1a4fc:	bl	112b0 <calloc@plt>
   1a500:	cmp	r0, #0
   1a504:	popne	{r3, pc}
   1a508:	bl	1a54c <close_stdout@@Base+0x3e3c>
   1a50c:	push	{r3, r4, r5, lr}
   1a510:	mov	r4, r1
   1a514:	mov	r5, r0
   1a518:	mov	r0, r1
   1a51c:	bl	1a338 <close_stdout@@Base+0x3c28>
   1a520:	mov	r1, r5
   1a524:	mov	r2, r4
   1a528:	pop	{r3, r4, r5, lr}
   1a52c:	b	1134c <memcpy@plt>
   1a530:	push	{r4, lr}
   1a534:	mov	r4, r0
   1a538:	bl	114d8 <strlen@plt>
   1a53c:	add	r1, r0, #1
   1a540:	mov	r0, r4
   1a544:	pop	{r4, lr}
   1a548:	b	1a50c <close_stdout@@Base+0x3dfc>
   1a54c:	ldr	r3, [pc, #64]	; 1a594 <close_stdout@@Base+0x3e84>
   1a550:	mov	r2, #5
   1a554:	ldr	ip, [pc, #60]	; 1a598 <close_stdout@@Base+0x3e88>
   1a558:	mov	r0, #0
   1a55c:	add	r3, pc, r3
   1a560:	ldr	r1, [pc, #52]	; 1a59c <close_stdout@@Base+0x3e8c>
   1a564:	push	{r4, lr}
   1a568:	add	r1, pc, r1
   1a56c:	ldr	r3, [r3, ip]
   1a570:	ldr	r4, [r3]
   1a574:	bl	11388 <dcgettext@plt>
   1a578:	ldr	r2, [pc, #32]	; 1a5a0 <close_stdout@@Base+0x3e90>
   1a57c:	mov	r1, #0
   1a580:	add	r2, pc, r2
   1a584:	mov	r3, r0
   1a588:	mov	r0, r4
   1a58c:	bl	11430 <error@plt>
   1a590:	bl	115f8 <abort@plt>
   1a594:	muleq	r1, ip, sl
   1a598:	andeq	r0, r0, ip, asr r1
   1a59c:	andeq	r3, r0, r8, lsr lr
   1a5a0:	andeq	r3, r0, r4, lsl sl
   1a5a4:	ldr	ip, [pc, #1584]	; 1abdc <close_stdout@@Base+0x44cc>
   1a5a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5ac:	mov	r7, r2
   1a5b0:	ldr	r2, [pc, #1576]	; 1abe0 <close_stdout@@Base+0x44d0>
   1a5b4:	add	ip, pc, ip
   1a5b8:	mov	r9, r3
   1a5bc:	sub	sp, sp, #28
   1a5c0:	cmp	r7, #36	; 0x24
   1a5c4:	mov	r4, r1
   1a5c8:	ldr	r2, [ip, r2]
   1a5cc:	mov	r1, ip
   1a5d0:	mov	r5, r0
   1a5d4:	ldr	r8, [sp, #64]	; 0x40
   1a5d8:	ldr	r3, [r2]
   1a5dc:	str	r2, [sp, #12]
   1a5e0:	str	r3, [sp, #20]
   1a5e4:	bhi	1abbc <close_stdout@@Base+0x44ac>
   1a5e8:	cmp	r4, #0
   1a5ec:	mov	fp, #0
   1a5f0:	addeq	r4, sp, #16
   1a5f4:	bl	11508 <__errno_location@plt>
   1a5f8:	mov	r2, r7
   1a5fc:	mov	r1, r4
   1a600:	mov	sl, r0
   1a604:	mov	r0, r5
   1a608:	str	fp, [sl]
   1a60c:	bl	112e0 <strtol@plt>
   1a610:	ldr	r7, [r4]
   1a614:	cmp	r7, r5
   1a618:	mov	r6, r0
   1a61c:	beq	1a7b4 <close_stdout@@Base+0x40a4>
   1a620:	ldr	fp, [sl]
   1a624:	cmp	fp, #0
   1a628:	bne	1a664 <close_stdout@@Base+0x3f54>
   1a62c:	cmp	r8, #0
   1a630:	beq	1a640 <close_stdout@@Base+0x3f30>
   1a634:	ldrb	r5, [r7]
   1a638:	cmp	r5, #0
   1a63c:	bne	1a674 <close_stdout@@Base+0x3f64>
   1a640:	mov	r0, fp
   1a644:	str	r6, [r9]
   1a648:	ldr	r1, [sp, #12]
   1a64c:	ldr	r2, [sp, #20]
   1a650:	ldr	r3, [r1]
   1a654:	cmp	r2, r3
   1a658:	bne	1abb8 <close_stdout@@Base+0x44a8>
   1a65c:	add	sp, sp, #28
   1a660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a664:	cmp	fp, #34	; 0x22
   1a668:	beq	1a7e4 <close_stdout@@Base+0x40d4>
   1a66c:	mov	r0, #4
   1a670:	b	1a648 <close_stdout@@Base+0x3f38>
   1a674:	mov	r0, r8
   1a678:	mov	r1, r5
   1a67c:	bl	114e4 <strchr@plt>
   1a680:	cmp	r0, #0
   1a684:	beq	1a7a8 <close_stdout@@Base+0x4098>
   1a688:	mov	r0, r8
   1a68c:	mov	r1, #48	; 0x30
   1a690:	bl	114e4 <strchr@plt>
   1a694:	cmp	r0, #0
   1a698:	beq	1a6b8 <close_stdout@@Base+0x3fa8>
   1a69c:	ldrb	r2, [r7, #1]
   1a6a0:	cmp	r2, #68	; 0x44
   1a6a4:	beq	1a7ec <close_stdout@@Base+0x40dc>
   1a6a8:	cmp	r2, #105	; 0x69
   1a6ac:	beq	1ab78 <close_stdout@@Base+0x4468>
   1a6b0:	cmp	r2, #66	; 0x42
   1a6b4:	beq	1a7ec <close_stdout@@Base+0x40dc>
   1a6b8:	mov	sl, #1
   1a6bc:	mov	r8, #1024	; 0x400
   1a6c0:	sub	r5, r5, #66	; 0x42
   1a6c4:	cmp	r5, #53	; 0x35
   1a6c8:	addls	pc, pc, r5, lsl #2
   1a6cc:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a6d0:	b	1a91c <close_stdout@@Base+0x420c>
   1a6d4:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a6d8:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a6dc:	b	1a8b4 <close_stdout@@Base+0x41a4>
   1a6e0:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a6e4:	b	1a84c <close_stdout@@Base+0x413c>
   1a6e8:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a6ec:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a6f0:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a6f4:	b	1a818 <close_stdout@@Base+0x4108>
   1a6f8:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a6fc:	b	1ab18 <close_stdout@@Base+0x4408>
   1a700:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a704:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a708:	b	1aab0 <close_stdout@@Base+0x43a0>
   1a70c:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a710:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a714:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a718:	b	1aa48 <close_stdout@@Base+0x4338>
   1a71c:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a720:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a724:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a728:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a72c:	b	1a9e0 <close_stdout@@Base+0x42d0>
   1a730:	b	1a978 <close_stdout@@Base+0x4268>
   1a734:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a738:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a73c:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a740:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a744:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a748:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a74c:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a750:	b	1a95c <close_stdout@@Base+0x424c>
   1a754:	b	1a7f8 <close_stdout@@Base+0x40e8>
   1a758:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a75c:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a760:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a764:	b	1a84c <close_stdout@@Base+0x413c>
   1a768:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a76c:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a770:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a774:	b	1a818 <close_stdout@@Base+0x4108>
   1a778:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a77c:	b	1ab18 <close_stdout@@Base+0x4408>
   1a780:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a784:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a788:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a78c:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a790:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a794:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a798:	b	1aa48 <close_stdout@@Base+0x4338>
   1a79c:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a7a0:	b	1a7a8 <close_stdout@@Base+0x4098>
   1a7a4:	b	1a940 <close_stdout@@Base+0x4230>
   1a7a8:	str	r6, [r9]
   1a7ac:	orr	r0, fp, #2
   1a7b0:	b	1a648 <close_stdout@@Base+0x3f38>
   1a7b4:	cmp	r8, fp
   1a7b8:	beq	1a66c <close_stdout@@Base+0x3f5c>
   1a7bc:	ldrb	r5, [r5]
   1a7c0:	cmp	r5, fp
   1a7c4:	beq	1a66c <close_stdout@@Base+0x3f5c>
   1a7c8:	mov	r0, r8
   1a7cc:	mov	r1, r5
   1a7d0:	bl	114e4 <strchr@plt>
   1a7d4:	cmp	r0, fp
   1a7d8:	movne	r6, #1
   1a7dc:	bne	1a688 <close_stdout@@Base+0x3f78>
   1a7e0:	b	1a66c <close_stdout@@Base+0x3f5c>
   1a7e4:	mov	fp, #1
   1a7e8:	b	1a62c <close_stdout@@Base+0x3f1c>
   1a7ec:	mov	sl, #2
   1a7f0:	mov	r8, #1000	; 0x3e8
   1a7f4:	b	1a6c0 <close_stdout@@Base+0x3fb0>
   1a7f8:	mov	r5, #0
   1a7fc:	add	r2, r7, sl
   1a800:	str	r2, [r4]
   1a804:	ldrb	r2, [r7, sl]
   1a808:	orr	fp, fp, r5
   1a80c:	cmp	r2, #0
   1a810:	orrne	fp, fp, #2
   1a814:	b	1a640 <close_stdout@@Base+0x3f30>
   1a818:	mov	r0, #-2147483648	; 0x80000000
   1a81c:	mov	r1, r8
   1a820:	bl	1be04 <close_stdout@@Base+0x56f4>
   1a824:	cmp	r6, r0
   1a828:	blt	1ab90 <close_stdout@@Base+0x4480>
   1a82c:	mvn	r0, #-2147483648	; 0x80000000
   1a830:	mov	r1, r8
   1a834:	bl	1be04 <close_stdout@@Base+0x56f4>
   1a838:	cmp	r6, r0
   1a83c:	bgt	1a934 <close_stdout@@Base+0x4224>
   1a840:	mul	r6, r8, r6
   1a844:	mov	r5, #0
   1a848:	b	1a7fc <close_stdout@@Base+0x40ec>
   1a84c:	mov	r0, #-2147483648	; 0x80000000
   1a850:	mov	r1, r8
   1a854:	bl	1be04 <close_stdout@@Base+0x56f4>
   1a858:	mov	r5, #0
   1a85c:	mov	r2, #3
   1a860:	mov	ip, r0
   1a864:	cmp	ip, r6
   1a868:	movgt	r6, #-2147483648	; 0x80000000
   1a86c:	movgt	r1, #1
   1a870:	bgt	1a8a4 <close_stdout@@Base+0x4194>
   1a874:	mov	r1, r8
   1a878:	mvn	r0, #-2147483648	; 0x80000000
   1a87c:	str	r2, [sp, #8]
   1a880:	str	ip, [sp, #4]
   1a884:	bl	1be04 <close_stdout@@Base+0x56f4>
   1a888:	ldr	r2, [sp, #8]
   1a88c:	ldr	ip, [sp, #4]
   1a890:	cmp	r0, r6
   1a894:	mulge	r6, r8, r6
   1a898:	movge	r1, #0
   1a89c:	mvnlt	r6, #-2147483648	; 0x80000000
   1a8a0:	movlt	r1, #1
   1a8a4:	subs	r2, r2, #1
   1a8a8:	orr	r5, r5, r1
   1a8ac:	bne	1a864 <close_stdout@@Base+0x4154>
   1a8b0:	b	1a7fc <close_stdout@@Base+0x40ec>
   1a8b4:	mov	r0, #-2147483648	; 0x80000000
   1a8b8:	mov	r1, r8
   1a8bc:	bl	1be04 <close_stdout@@Base+0x56f4>
   1a8c0:	mov	r5, #0
   1a8c4:	mov	r2, #6
   1a8c8:	mov	ip, r0
   1a8cc:	cmp	ip, r6
   1a8d0:	movgt	r6, #-2147483648	; 0x80000000
   1a8d4:	movgt	r1, #1
   1a8d8:	bgt	1a90c <close_stdout@@Base+0x41fc>
   1a8dc:	mov	r1, r8
   1a8e0:	mvn	r0, #-2147483648	; 0x80000000
   1a8e4:	str	r2, [sp, #8]
   1a8e8:	str	ip, [sp, #4]
   1a8ec:	bl	1be04 <close_stdout@@Base+0x56f4>
   1a8f0:	ldr	r2, [sp, #8]
   1a8f4:	ldr	ip, [sp, #4]
   1a8f8:	cmp	r0, r6
   1a8fc:	mulge	r6, r8, r6
   1a900:	movge	r1, #0
   1a904:	mvnlt	r6, #-2147483648	; 0x80000000
   1a908:	movlt	r1, #1
   1a90c:	subs	r2, r2, #1
   1a910:	orr	r5, r5, r1
   1a914:	bne	1a8cc <close_stdout@@Base+0x41bc>
   1a918:	b	1a7fc <close_stdout@@Base+0x40ec>
   1a91c:	cmn	r6, #2097152	; 0x200000
   1a920:	blt	1ab90 <close_stdout@@Base+0x4480>
   1a924:	cmp	r6, #2097152	; 0x200000
   1a928:	lsllt	r6, r6, #10
   1a92c:	movlt	r5, #0
   1a930:	blt	1a7fc <close_stdout@@Base+0x40ec>
   1a934:	mvn	r6, #-2147483648	; 0x80000000
   1a938:	mov	r5, #1
   1a93c:	b	1a7fc <close_stdout@@Base+0x40ec>
   1a940:	cmp	r6, #-1073741824	; 0xc0000000
   1a944:	blt	1ab90 <close_stdout@@Base+0x4480>
   1a948:	cmn	r6, #-1073741823	; 0xc0000001
   1a94c:	lslle	r6, r6, #1
   1a950:	movle	r5, #0
   1a954:	ble	1a7fc <close_stdout@@Base+0x40ec>
   1a958:	b	1a934 <close_stdout@@Base+0x4224>
   1a95c:	cmn	r6, #4194304	; 0x400000
   1a960:	blt	1ab90 <close_stdout@@Base+0x4480>
   1a964:	cmp	r6, #4194304	; 0x400000
   1a968:	lsllt	r6, r6, #9
   1a96c:	movlt	r5, #0
   1a970:	blt	1a7fc <close_stdout@@Base+0x40ec>
   1a974:	b	1a934 <close_stdout@@Base+0x4224>
   1a978:	mov	r0, #-2147483648	; 0x80000000
   1a97c:	mov	r1, r8
   1a980:	bl	1be04 <close_stdout@@Base+0x56f4>
   1a984:	mov	r5, #0
   1a988:	mov	r2, #7
   1a98c:	mov	ip, r0
   1a990:	cmp	ip, r6
   1a994:	movgt	r6, #-2147483648	; 0x80000000
   1a998:	movgt	r1, #1
   1a99c:	bgt	1a9d0 <close_stdout@@Base+0x42c0>
   1a9a0:	mov	r1, r8
   1a9a4:	mvn	r0, #-2147483648	; 0x80000000
   1a9a8:	str	r2, [sp, #8]
   1a9ac:	str	ip, [sp, #4]
   1a9b0:	bl	1be04 <close_stdout@@Base+0x56f4>
   1a9b4:	ldr	r2, [sp, #8]
   1a9b8:	ldr	ip, [sp, #4]
   1a9bc:	cmp	r0, r6
   1a9c0:	mulge	r6, r8, r6
   1a9c4:	movge	r1, #0
   1a9c8:	mvnlt	r6, #-2147483648	; 0x80000000
   1a9cc:	movlt	r1, #1
   1a9d0:	subs	r2, r2, #1
   1a9d4:	orr	r5, r5, r1
   1a9d8:	bne	1a990 <close_stdout@@Base+0x4280>
   1a9dc:	b	1a7fc <close_stdout@@Base+0x40ec>
   1a9e0:	mov	r0, #-2147483648	; 0x80000000
   1a9e4:	mov	r1, r8
   1a9e8:	bl	1be04 <close_stdout@@Base+0x56f4>
   1a9ec:	mov	r5, #0
   1a9f0:	mov	r2, #8
   1a9f4:	mov	ip, r0
   1a9f8:	cmp	ip, r6
   1a9fc:	movgt	r6, #-2147483648	; 0x80000000
   1aa00:	movgt	r1, #1
   1aa04:	bgt	1aa38 <close_stdout@@Base+0x4328>
   1aa08:	mov	r1, r8
   1aa0c:	mvn	r0, #-2147483648	; 0x80000000
   1aa10:	str	r2, [sp, #8]
   1aa14:	str	ip, [sp, #4]
   1aa18:	bl	1be04 <close_stdout@@Base+0x56f4>
   1aa1c:	ldr	r2, [sp, #8]
   1aa20:	ldr	ip, [sp, #4]
   1aa24:	cmp	r0, r6
   1aa28:	mulge	r6, r8, r6
   1aa2c:	movge	r1, #0
   1aa30:	mvnlt	r6, #-2147483648	; 0x80000000
   1aa34:	movlt	r1, #1
   1aa38:	subs	r2, r2, #1
   1aa3c:	orr	r5, r5, r1
   1aa40:	bne	1a9f8 <close_stdout@@Base+0x42e8>
   1aa44:	b	1a7fc <close_stdout@@Base+0x40ec>
   1aa48:	mov	r0, #-2147483648	; 0x80000000
   1aa4c:	mov	r1, r8
   1aa50:	bl	1be04 <close_stdout@@Base+0x56f4>
   1aa54:	mov	r5, #0
   1aa58:	mov	r2, #4
   1aa5c:	mov	ip, r0
   1aa60:	cmp	ip, r6
   1aa64:	movgt	r6, #-2147483648	; 0x80000000
   1aa68:	movgt	r1, #1
   1aa6c:	bgt	1aaa0 <close_stdout@@Base+0x4390>
   1aa70:	mov	r1, r8
   1aa74:	mvn	r0, #-2147483648	; 0x80000000
   1aa78:	str	r2, [sp, #8]
   1aa7c:	str	ip, [sp, #4]
   1aa80:	bl	1be04 <close_stdout@@Base+0x56f4>
   1aa84:	ldr	r2, [sp, #8]
   1aa88:	ldr	ip, [sp, #4]
   1aa8c:	cmp	r0, r6
   1aa90:	mulge	r6, r8, r6
   1aa94:	movge	r1, #0
   1aa98:	mvnlt	r6, #-2147483648	; 0x80000000
   1aa9c:	movlt	r1, #1
   1aaa0:	subs	r2, r2, #1
   1aaa4:	orr	r5, r5, r1
   1aaa8:	bne	1aa60 <close_stdout@@Base+0x4350>
   1aaac:	b	1a7fc <close_stdout@@Base+0x40ec>
   1aab0:	mov	r0, #-2147483648	; 0x80000000
   1aab4:	mov	r1, r8
   1aab8:	bl	1be04 <close_stdout@@Base+0x56f4>
   1aabc:	mov	r5, #0
   1aac0:	mov	r2, #5
   1aac4:	mov	ip, r0
   1aac8:	cmp	ip, r6
   1aacc:	movgt	r6, #-2147483648	; 0x80000000
   1aad0:	movgt	r1, #1
   1aad4:	bgt	1ab08 <close_stdout@@Base+0x43f8>
   1aad8:	mov	r1, r8
   1aadc:	mvn	r0, #-2147483648	; 0x80000000
   1aae0:	str	r2, [sp, #8]
   1aae4:	str	ip, [sp, #4]
   1aae8:	bl	1be04 <close_stdout@@Base+0x56f4>
   1aaec:	ldr	r2, [sp, #8]
   1aaf0:	ldr	ip, [sp, #4]
   1aaf4:	cmp	r0, r6
   1aaf8:	mulge	r6, r8, r6
   1aafc:	movge	r1, #0
   1ab00:	mvnlt	r6, #-2147483648	; 0x80000000
   1ab04:	movlt	r1, #1
   1ab08:	subs	r2, r2, #1
   1ab0c:	orr	r5, r5, r1
   1ab10:	bne	1aac8 <close_stdout@@Base+0x43b8>
   1ab14:	b	1a7fc <close_stdout@@Base+0x40ec>
   1ab18:	mov	r0, #-2147483648	; 0x80000000
   1ab1c:	mov	r1, r8
   1ab20:	bl	1be04 <close_stdout@@Base+0x56f4>
   1ab24:	cmp	r6, r0
   1ab28:	mov	r5, r0
   1ab2c:	blt	1ab9c <close_stdout@@Base+0x448c>
   1ab30:	mvn	r0, #-2147483648	; 0x80000000
   1ab34:	mov	r1, r8
   1ab38:	bl	1be04 <close_stdout@@Base+0x56f4>
   1ab3c:	cmp	r6, r0
   1ab40:	bgt	1abac <close_stdout@@Base+0x449c>
   1ab44:	mul	r3, r6, r8
   1ab48:	mov	r2, #0
   1ab4c:	cmp	r3, r5
   1ab50:	movlt	r6, #-2147483648	; 0x80000000
   1ab54:	movlt	r5, #1
   1ab58:	blt	1ab70 <close_stdout@@Base+0x4460>
   1ab5c:	cmp	r0, r3
   1ab60:	mvnlt	r6, #-2147483648	; 0x80000000
   1ab64:	movlt	r5, #1
   1ab68:	mulge	r6, r3, r8
   1ab6c:	movge	r5, #0
   1ab70:	orr	r5, r5, r2
   1ab74:	b	1a7fc <close_stdout@@Base+0x40ec>
   1ab78:	ldrb	sl, [r7, #2]
   1ab7c:	mov	r8, #1024	; 0x400
   1ab80:	cmp	sl, #66	; 0x42
   1ab84:	moveq	sl, #3
   1ab88:	movne	sl, #1
   1ab8c:	b	1a6c0 <close_stdout@@Base+0x3fb0>
   1ab90:	mov	r6, #-2147483648	; 0x80000000
   1ab94:	mov	r5, #1
   1ab98:	b	1a7fc <close_stdout@@Base+0x40ec>
   1ab9c:	mov	r2, #1
   1aba0:	mov	r6, #-2147483648	; 0x80000000
   1aba4:	mov	r5, r2
   1aba8:	b	1ab70 <close_stdout@@Base+0x4460>
   1abac:	mov	r2, #1
   1abb0:	mvn	r3, #-2147483648	; 0x80000000
   1abb4:	b	1ab5c <close_stdout@@Base+0x444c>
   1abb8:	bl	11394 <__stack_chk_fail@plt>
   1abbc:	ldr	r0, [pc, #32]	; 1abe4 <close_stdout@@Base+0x44d4>
   1abc0:	mov	r2, #96	; 0x60
   1abc4:	ldr	r1, [pc, #28]	; 1abe8 <close_stdout@@Base+0x44d8>
   1abc8:	ldr	r3, [pc, #28]	; 1abec <close_stdout@@Base+0x44dc>
   1abcc:	add	r0, pc, r0
   1abd0:	add	r1, pc, r1
   1abd4:	add	r3, pc, r3
   1abd8:	bl	11610 <__assert_fail@plt>
   1abdc:	andeq	r4, r1, r4, asr #20
   1abe0:	andeq	r0, r0, r8, lsr r1
   1abe4:	strdeq	r3, [r0], -r0
   1abe8:	andeq	r3, r0, r4, lsl r8
   1abec:	andeq	r3, r0, r0, ror #15
   1abf0:	ldr	ip, [pc, #204]	; 1acc4 <close_stdout@@Base+0x45b4>
   1abf4:	push	{r4, r5, r6, r7, lr}
   1abf8:	sub	lr, r0, #1
   1abfc:	ldr	r0, [pc, #196]	; 1acc8 <close_stdout@@Base+0x45b8>
   1ac00:	add	ip, pc, ip
   1ac04:	ldr	r4, [pc, #192]	; 1accc <close_stdout@@Base+0x45bc>
   1ac08:	sub	sp, sp, #20
   1ac0c:	ldr	r0, [ip, r0]
   1ac10:	ldr	r5, [sp, #40]	; 0x28
   1ac14:	ldr	r0, [r0]
   1ac18:	str	r0, [sp, #12]
   1ac1c:	ldr	r0, [ip, r4]
   1ac20:	ldr	r4, [r0]
   1ac24:	cmp	lr, #3
   1ac28:	addls	pc, pc, lr, lsl #2
   1ac2c:	b	1ac88 <close_stdout@@Base+0x4578>
   1ac30:	b	1ac8c <close_stdout@@Base+0x457c>
   1ac34:	b	1ac40 <close_stdout@@Base+0x4530>
   1ac38:	b	1ac40 <close_stdout@@Base+0x4530>
   1ac3c:	b	1ac98 <close_stdout@@Base+0x4588>
   1ac40:	ldr	r0, [pc, #136]	; 1acd0 <close_stdout@@Base+0x45c0>
   1ac44:	add	r0, pc, r0
   1ac48:	cmp	r1, #0
   1ac4c:	blt	1aca4 <close_stdout@@Base+0x4594>
   1ac50:	ldr	r7, [pc, #124]	; 1acd4 <close_stdout@@Base+0x45c4>
   1ac54:	ldr	r6, [r3, r1, lsl #4]
   1ac58:	add	r7, pc, r7
   1ac5c:	mov	r1, r0
   1ac60:	mov	r2, #5
   1ac64:	mov	r0, #0
   1ac68:	bl	11388 <dcgettext@plt>
   1ac6c:	str	r6, [sp]
   1ac70:	str	r5, [sp, #4]
   1ac74:	mov	r3, r7
   1ac78:	mov	r1, #0
   1ac7c:	mov	r2, r0
   1ac80:	mov	r0, r4
   1ac84:	bl	11430 <error@plt>
   1ac88:	bl	115f8 <abort@plt>
   1ac8c:	ldr	r0, [pc, #68]	; 1acd8 <close_stdout@@Base+0x45c8>
   1ac90:	add	r0, pc, r0
   1ac94:	b	1ac48 <close_stdout@@Base+0x4538>
   1ac98:	ldr	r0, [pc, #60]	; 1acdc <close_stdout@@Base+0x45cc>
   1ac9c:	add	r0, pc, r0
   1aca0:	b	1ac48 <close_stdout@@Base+0x4538>
   1aca4:	ldr	r7, [pc, #52]	; 1ace0 <close_stdout@@Base+0x45d0>
   1aca8:	mov	r3, #0
   1acac:	strb	r2, [sp, #8]
   1acb0:	add	r6, sp, #8
   1acb4:	add	r7, pc, r7
   1acb8:	strb	r3, [sp, #9]
   1acbc:	rsb	r7, r1, r7
   1acc0:	b	1ac5c <close_stdout@@Base+0x454c>
   1acc4:	strdeq	r4, [r1], -r8
   1acc8:	andeq	r0, r0, r8, lsr r1
   1accc:	andeq	r0, r0, ip, asr r1
   1acd0:	andeq	r3, r0, ip, asr #15
   1acd4:	andeq	r3, r0, r0, lsl #16
   1acd8:	andeq	r3, r0, r8, lsr #15
   1acdc:	andeq	r3, r0, r8, asr r7
   1ace0:	andeq	r3, r0, r4, lsr #15
   1ace4:	ldr	ip, [pc, #1852]	; 1b428 <close_stdout@@Base+0x4d18>
   1ace8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acec:	mov	fp, r2
   1acf0:	ldr	r2, [pc, #1844]	; 1b42c <close_stdout@@Base+0x4d1c>
   1acf4:	add	ip, pc, ip
   1acf8:	mov	r9, r3
   1acfc:	sub	sp, sp, #36	; 0x24
   1ad00:	mov	r3, ip
   1ad04:	cmp	fp, #36	; 0x24
   1ad08:	ldr	sl, [ip, r2]
   1ad0c:	mov	r5, r0
   1ad10:	mov	r8, r1
   1ad14:	ldr	r6, [sp, #72]	; 0x48
   1ad18:	ldr	r3, [sl]
   1ad1c:	str	r3, [sp, #28]
   1ad20:	bhi	1b408 <close_stdout@@Base+0x4cf8>
   1ad24:	cmp	r1, #0
   1ad28:	addeq	r8, sp, #24
   1ad2c:	bl	114c0 <__ctype_b_loc@plt>
   1ad30:	ldrb	r3, [r5]
   1ad34:	mov	r1, r5
   1ad38:	ldr	r0, [r0]
   1ad3c:	b	1ad44 <close_stdout@@Base+0x4634>
   1ad40:	ldrb	r3, [r1, #1]!
   1ad44:	lsl	r2, r3, #1
   1ad48:	ldrh	r4, [r0, r2]
   1ad4c:	and	r4, r4, #8192	; 0x2000
   1ad50:	uxth	r4, r4
   1ad54:	cmp	r4, #0
   1ad58:	bne	1ad40 <close_stdout@@Base+0x4630>
   1ad5c:	cmp	r3, #45	; 0x2d
   1ad60:	bne	1ad80 <close_stdout@@Base+0x4670>
   1ad64:	mov	r0, #4
   1ad68:	ldr	r2, [sp, #28]
   1ad6c:	ldr	r3, [sl]
   1ad70:	cmp	r2, r3
   1ad74:	bne	1b404 <close_stdout@@Base+0x4cf4>
   1ad78:	add	sp, sp, #36	; 0x24
   1ad7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad80:	bl	11508 <__errno_location@plt>
   1ad84:	mov	r2, fp
   1ad88:	mov	r1, r8
   1ad8c:	mov	r3, r4
   1ad90:	str	r4, [r0]
   1ad94:	mov	r7, r0
   1ad98:	mov	r0, r5
   1ad9c:	bl	11358 <__strtoull_internal@plt>
   1ada0:	ldr	fp, [r8]
   1ada4:	cmp	fp, r5
   1ada8:	strd	r0, [sp]
   1adac:	beq	1af28 <close_stdout@@Base+0x4818>
   1adb0:	ldr	ip, [r7]
   1adb4:	cmp	ip, #0
   1adb8:	bne	1ade4 <close_stdout@@Base+0x46d4>
   1adbc:	mov	r7, ip
   1adc0:	cmp	r6, #0
   1adc4:	beq	1b394 <close_stdout@@Base+0x4c84>
   1adc8:	ldrb	r5, [fp]
   1adcc:	cmp	r5, #0
   1add0:	bne	1adf4 <close_stdout@@Base+0x46e4>
   1add4:	ldrd	r2, [sp]
   1add8:	mov	r0, r7
   1addc:	strd	r2, [r9]
   1ade0:	b	1ad68 <close_stdout@@Base+0x4658>
   1ade4:	cmp	ip, #34	; 0x22
   1ade8:	moveq	r7, #1
   1adec:	bne	1ad64 <close_stdout@@Base+0x4654>
   1adf0:	b	1adc0 <close_stdout@@Base+0x46b0>
   1adf4:	mov	r0, r6
   1adf8:	mov	r1, r5
   1adfc:	bl	114e4 <strchr@plt>
   1ae00:	cmp	r0, #0
   1ae04:	beq	1af64 <close_stdout@@Base+0x4854>
   1ae08:	mov	r0, r6
   1ae0c:	mov	r1, #48	; 0x30
   1ae10:	bl	114e4 <strchr@plt>
   1ae14:	cmp	r0, #0
   1ae18:	beq	1ae38 <close_stdout@@Base+0x4728>
   1ae1c:	ldrb	r3, [fp, #1]
   1ae20:	cmp	r3, #68	; 0x44
   1ae24:	beq	1b3bc <close_stdout@@Base+0x4cac>
   1ae28:	cmp	r3, #105	; 0x69
   1ae2c:	beq	1b3a4 <close_stdout@@Base+0x4c94>
   1ae30:	cmp	r3, #66	; 0x42
   1ae34:	beq	1b3bc <close_stdout@@Base+0x4cac>
   1ae38:	mov	r6, #1
   1ae3c:	mov	r4, #1024	; 0x400
   1ae40:	sub	r5, r5, #66	; 0x42
   1ae44:	cmp	r5, #53	; 0x35
   1ae48:	addls	pc, pc, r5, lsl #2
   1ae4c:	b	1af64 <close_stdout@@Base+0x4854>
   1ae50:	b	1b20c <close_stdout@@Base+0x4afc>
   1ae54:	b	1af64 <close_stdout@@Base+0x4854>
   1ae58:	b	1af64 <close_stdout@@Base+0x4854>
   1ae5c:	b	1b1a0 <close_stdout@@Base+0x4a90>
   1ae60:	b	1af64 <close_stdout@@Base+0x4854>
   1ae64:	b	1b134 <close_stdout@@Base+0x4a24>
   1ae68:	b	1af64 <close_stdout@@Base+0x4854>
   1ae6c:	b	1af64 <close_stdout@@Base+0x4854>
   1ae70:	b	1af64 <close_stdout@@Base+0x4854>
   1ae74:	b	1b0dc <close_stdout@@Base+0x49cc>
   1ae78:	b	1af64 <close_stdout@@Base+0x4854>
   1ae7c:	b	1b2b4 <close_stdout@@Base+0x4ba4>
   1ae80:	b	1af64 <close_stdout@@Base+0x4854>
   1ae84:	b	1af64 <close_stdout@@Base+0x4854>
   1ae88:	b	1b248 <close_stdout@@Base+0x4b38>
   1ae8c:	b	1af64 <close_stdout@@Base+0x4854>
   1ae90:	b	1af64 <close_stdout@@Base+0x4854>
   1ae94:	b	1af64 <close_stdout@@Base+0x4854>
   1ae98:	b	1b328 <close_stdout@@Base+0x4c18>
   1ae9c:	b	1af64 <close_stdout@@Base+0x4854>
   1aea0:	b	1af64 <close_stdout@@Base+0x4854>
   1aea4:	b	1af64 <close_stdout@@Base+0x4854>
   1aea8:	b	1af64 <close_stdout@@Base+0x4854>
   1aeac:	b	1b070 <close_stdout@@Base+0x4960>
   1aeb0:	b	1aff8 <close_stdout@@Base+0x48e8>
   1aeb4:	b	1af64 <close_stdout@@Base+0x4854>
   1aeb8:	b	1af64 <close_stdout@@Base+0x4854>
   1aebc:	b	1af64 <close_stdout@@Base+0x4854>
   1aec0:	b	1af64 <close_stdout@@Base+0x4854>
   1aec4:	b	1af64 <close_stdout@@Base+0x4854>
   1aec8:	b	1af64 <close_stdout@@Base+0x4854>
   1aecc:	b	1af64 <close_stdout@@Base+0x4854>
   1aed0:	b	1afbc <close_stdout@@Base+0x48ac>
   1aed4:	b	1af74 <close_stdout@@Base+0x4864>
   1aed8:	b	1af64 <close_stdout@@Base+0x4854>
   1aedc:	b	1af64 <close_stdout@@Base+0x4854>
   1aee0:	b	1af64 <close_stdout@@Base+0x4854>
   1aee4:	b	1b134 <close_stdout@@Base+0x4a24>
   1aee8:	b	1af64 <close_stdout@@Base+0x4854>
   1aeec:	b	1af64 <close_stdout@@Base+0x4854>
   1aef0:	b	1af64 <close_stdout@@Base+0x4854>
   1aef4:	b	1b0dc <close_stdout@@Base+0x49cc>
   1aef8:	b	1af64 <close_stdout@@Base+0x4854>
   1aefc:	b	1b2b4 <close_stdout@@Base+0x4ba4>
   1af00:	b	1af64 <close_stdout@@Base+0x4854>
   1af04:	b	1af64 <close_stdout@@Base+0x4854>
   1af08:	b	1af64 <close_stdout@@Base+0x4854>
   1af0c:	b	1af64 <close_stdout@@Base+0x4854>
   1af10:	b	1af64 <close_stdout@@Base+0x4854>
   1af14:	b	1af64 <close_stdout@@Base+0x4854>
   1af18:	b	1b328 <close_stdout@@Base+0x4c18>
   1af1c:	b	1af64 <close_stdout@@Base+0x4854>
   1af20:	b	1af64 <close_stdout@@Base+0x4854>
   1af24:	b	1af94 <close_stdout@@Base+0x4884>
   1af28:	cmp	r6, #0
   1af2c:	beq	1ad64 <close_stdout@@Base+0x4654>
   1af30:	ldrb	r5, [r5]
   1af34:	cmp	r5, #0
   1af38:	beq	1ad64 <close_stdout@@Base+0x4654>
   1af3c:	mov	r0, r6
   1af40:	mov	r1, r5
   1af44:	bl	114e4 <strchr@plt>
   1af48:	cmp	r0, #0
   1af4c:	beq	1ad64 <close_stdout@@Base+0x4654>
   1af50:	mov	r0, #1
   1af54:	mov	r1, #0
   1af58:	mov	r7, r4
   1af5c:	strd	r0, [sp]
   1af60:	b	1ae08 <close_stdout@@Base+0x46f8>
   1af64:	ldrd	r2, [sp]
   1af68:	orr	r0, r7, #2
   1af6c:	strd	r2, [r9]
   1af70:	b	1ad68 <close_stdout@@Base+0x4658>
   1af74:	mov	r3, #0
   1af78:	add	r2, fp, r6
   1af7c:	str	r2, [r8]
   1af80:	ldrb	r2, [fp, r6]
   1af84:	orr	r7, r7, r3
   1af88:	cmp	r2, #0
   1af8c:	orrne	r7, r7, #2
   1af90:	b	1add4 <close_stdout@@Base+0x46c4>
   1af94:	ldrd	r2, [sp]
   1af98:	cmp	r2, #0
   1af9c:	sbcs	r3, r3, #0
   1afa0:	blt	1b3dc <close_stdout@@Base+0x4ccc>
   1afa4:	ldrd	r0, [sp]
   1afa8:	mov	r3, #0
   1afac:	adds	r0, r0, r0
   1afb0:	adc	r1, r1, r1
   1afb4:	strd	r0, [sp]
   1afb8:	b	1af78 <close_stdout@@Base+0x4868>
   1afbc:	ldrd	r0, [sp]
   1afc0:	movw	r3, #65535	; 0xffff
   1afc4:	movt	r3, #127	; 0x7f
   1afc8:	mvn	r2, #0
   1afcc:	cmp	r1, r3
   1afd0:	cmpeq	r0, r2
   1afd4:	bhi	1b3dc <close_stdout@@Base+0x4ccc>
   1afd8:	lsl	r2, r1, #9
   1afdc:	ldr	r1, [sp]
   1afe0:	lsl	r3, r0, #9
   1afe4:	str	r3, [sp]
   1afe8:	mov	r3, #0
   1afec:	orr	r2, r2, r1, lsr #23
   1aff0:	str	r2, [sp, #4]
   1aff4:	b	1af78 <close_stdout@@Base+0x4868>
   1aff8:	asr	r5, r4, #31
   1affc:	mov	r2, r4
   1b000:	mvn	r0, #0
   1b004:	mvn	r1, #0
   1b008:	mov	r3, r5
   1b00c:	bl	1c044 <close_stdout@@Base+0x5934>
   1b010:	mov	ip, r7
   1b014:	str	r6, [sp, #20]
   1b018:	mov	r2, #7
   1b01c:	ldrd	r6, [sp]
   1b020:	mov	r3, #0
   1b024:	strd	r0, [sp, #8]
   1b028:	ldrd	r0, [sp, #8]
   1b02c:	cmp	r1, r7
   1b030:	cmpeq	r0, r6
   1b034:	mulcs	r0, r6, r5
   1b038:	movcs	r1, #0
   1b03c:	mlacs	r0, r4, r7, r0
   1b040:	movcc	r1, #1
   1b044:	umullcs	r6, r7, r6, r4
   1b048:	mvncc	r6, #0
   1b04c:	mvncc	r7, #0
   1b050:	orr	r3, r3, r1
   1b054:	addcs	r7, r0, r7
   1b058:	subs	r2, r2, #1
   1b05c:	bne	1b028 <close_stdout@@Base+0x4918>
   1b060:	strd	r6, [sp]
   1b064:	mov	r7, ip
   1b068:	ldr	r6, [sp, #20]
   1b06c:	b	1af78 <close_stdout@@Base+0x4868>
   1b070:	asr	r5, r4, #31
   1b074:	mov	r2, r4
   1b078:	mvn	r0, #0
   1b07c:	mvn	r1, #0
   1b080:	mov	r3, r5
   1b084:	bl	1c044 <close_stdout@@Base+0x5934>
   1b088:	mov	ip, r7
   1b08c:	str	r6, [sp, #20]
   1b090:	mov	r2, #8
   1b094:	ldrd	r6, [sp]
   1b098:	mov	r3, #0
   1b09c:	strd	r0, [sp, #8]
   1b0a0:	ldrd	r0, [sp, #8]
   1b0a4:	cmp	r1, r7
   1b0a8:	cmpeq	r0, r6
   1b0ac:	mulcs	r0, r6, r5
   1b0b0:	movcs	r1, #0
   1b0b4:	mlacs	r0, r4, r7, r0
   1b0b8:	movcc	r1, #1
   1b0bc:	umullcs	r6, r7, r6, r4
   1b0c0:	mvncc	r6, #0
   1b0c4:	mvncc	r7, #0
   1b0c8:	orr	r3, r3, r1
   1b0cc:	addcs	r7, r0, r7
   1b0d0:	subs	r2, r2, #1
   1b0d4:	bne	1b0a0 <close_stdout@@Base+0x4990>
   1b0d8:	b	1b060 <close_stdout@@Base+0x4950>
   1b0dc:	mov	r2, r4
   1b0e0:	asr	r3, r4, #31
   1b0e4:	mvn	r0, #0
   1b0e8:	mvn	r1, #0
   1b0ec:	strd	r2, [sp, #8]
   1b0f0:	bl	1c044 <close_stdout@@Base+0x5934>
   1b0f4:	ldrd	r2, [sp]
   1b0f8:	cmp	r3, r1
   1b0fc:	cmpeq	r2, r0
   1b100:	bhi	1b3c8 <close_stdout@@Base+0x4cb8>
   1b104:	ldr	r3, [sp]
   1b108:	ldr	ip, [sp, #12]
   1b10c:	ldr	r0, [sp, #4]
   1b110:	ldr	r1, [sp]
   1b114:	mul	r2, r3, ip
   1b118:	mov	r3, #0
   1b11c:	mla	r2, r4, r0, r2
   1b120:	umull	r0, r1, r1, r4
   1b124:	add	r2, r2, r1
   1b128:	strd	r0, [sp]
   1b12c:	str	r2, [sp, #4]
   1b130:	b	1af78 <close_stdout@@Base+0x4868>
   1b134:	asr	r5, r4, #31
   1b138:	mov	r2, r4
   1b13c:	mvn	r0, #0
   1b140:	mvn	r1, #0
   1b144:	mov	r3, r5
   1b148:	bl	1c044 <close_stdout@@Base+0x5934>
   1b14c:	mov	ip, r7
   1b150:	str	r6, [sp, #20]
   1b154:	mov	r2, #3
   1b158:	ldrd	r6, [sp]
   1b15c:	mov	r3, #0
   1b160:	strd	r0, [sp, #8]
   1b164:	ldrd	r0, [sp, #8]
   1b168:	cmp	r1, r7
   1b16c:	cmpeq	r0, r6
   1b170:	mulcs	r0, r6, r5
   1b174:	movcs	r1, #0
   1b178:	mlacs	r0, r4, r7, r0
   1b17c:	movcc	r1, #1
   1b180:	umullcs	r6, r7, r6, r4
   1b184:	mvncc	r6, #0
   1b188:	mvncc	r7, #0
   1b18c:	orr	r3, r3, r1
   1b190:	addcs	r7, r0, r7
   1b194:	subs	r2, r2, #1
   1b198:	bne	1b164 <close_stdout@@Base+0x4a54>
   1b19c:	b	1b060 <close_stdout@@Base+0x4950>
   1b1a0:	asr	r5, r4, #31
   1b1a4:	mov	r2, r4
   1b1a8:	mvn	r0, #0
   1b1ac:	mvn	r1, #0
   1b1b0:	mov	r3, r5
   1b1b4:	bl	1c044 <close_stdout@@Base+0x5934>
   1b1b8:	mov	ip, r7
   1b1bc:	str	r6, [sp, #20]
   1b1c0:	mov	r2, #6
   1b1c4:	ldrd	r6, [sp]
   1b1c8:	mov	r3, #0
   1b1cc:	strd	r0, [sp, #8]
   1b1d0:	ldrd	r0, [sp, #8]
   1b1d4:	cmp	r1, r7
   1b1d8:	cmpeq	r0, r6
   1b1dc:	mulcs	r0, r6, r5
   1b1e0:	movcs	r1, #0
   1b1e4:	mlacs	r0, r4, r7, r0
   1b1e8:	movcc	r1, #1
   1b1ec:	umullcs	r6, r7, r6, r4
   1b1f0:	mvncc	r6, #0
   1b1f4:	mvncc	r7, #0
   1b1f8:	orr	r3, r3, r1
   1b1fc:	addcs	r7, r0, r7
   1b200:	subs	r2, r2, #1
   1b204:	bne	1b1d0 <close_stdout@@Base+0x4ac0>
   1b208:	b	1b060 <close_stdout@@Base+0x4950>
   1b20c:	ldrd	r0, [sp]
   1b210:	movw	r3, #65535	; 0xffff
   1b214:	movt	r3, #63	; 0x3f
   1b218:	mvn	r2, #0
   1b21c:	cmp	r1, r3
   1b220:	cmpeq	r0, r2
   1b224:	bhi	1b3c8 <close_stdout@@Base+0x4cb8>
   1b228:	lsl	r2, r1, #10
   1b22c:	ldr	r1, [sp]
   1b230:	lsl	r3, r0, #10
   1b234:	str	r3, [sp]
   1b238:	mov	r3, #0
   1b23c:	orr	r2, r2, r1, lsr #22
   1b240:	str	r2, [sp, #4]
   1b244:	b	1af78 <close_stdout@@Base+0x4868>
   1b248:	asr	r5, r4, #31
   1b24c:	mov	r2, r4
   1b250:	mvn	r0, #0
   1b254:	mvn	r1, #0
   1b258:	mov	r3, r5
   1b25c:	bl	1c044 <close_stdout@@Base+0x5934>
   1b260:	mov	ip, r7
   1b264:	str	r6, [sp, #20]
   1b268:	mov	r2, #5
   1b26c:	ldrd	r6, [sp]
   1b270:	mov	r3, #0
   1b274:	strd	r0, [sp, #8]
   1b278:	ldrd	r0, [sp, #8]
   1b27c:	cmp	r1, r7
   1b280:	cmpeq	r0, r6
   1b284:	mulcs	r0, r6, r5
   1b288:	movcs	r1, #0
   1b28c:	mlacs	r0, r4, r7, r0
   1b290:	movcc	r1, #1
   1b294:	umullcs	r6, r7, r6, r4
   1b298:	mvncc	r6, #0
   1b29c:	mvncc	r7, #0
   1b2a0:	orr	r3, r3, r1
   1b2a4:	addcs	r7, r0, r7
   1b2a8:	subs	r2, r2, #1
   1b2ac:	bne	1b278 <close_stdout@@Base+0x4b68>
   1b2b0:	b	1b060 <close_stdout@@Base+0x4950>
   1b2b4:	mov	r2, r4
   1b2b8:	asr	r3, r4, #31
   1b2bc:	mvn	r0, #0
   1b2c0:	mvn	r1, #0
   1b2c4:	strd	r2, [sp, #8]
   1b2c8:	bl	1c044 <close_stdout@@Base+0x5934>
   1b2cc:	ldrd	r2, [sp]
   1b2d0:	cmp	r3, r1
   1b2d4:	cmpeq	r2, r0
   1b2d8:	bhi	1b3f0 <close_stdout@@Base+0x4ce0>
   1b2dc:	ldr	ip, [sp, #4]
   1b2e0:	mul	r3, r4, ip
   1b2e4:	ldr	ip, [sp, #12]
   1b2e8:	mla	r3, r2, ip, r3
   1b2ec:	ldr	r2, [sp]
   1b2f0:	umull	r4, r5, r4, r2
   1b2f4:	add	r5, r3, r5
   1b2f8:	cmp	r1, r5
   1b2fc:	cmpeq	r0, r4
   1b300:	bcc	1b3f0 <close_stdout@@Base+0x4ce0>
   1b304:	mul	r2, r4, ip
   1b308:	ldr	ip, [sp, #8]
   1b30c:	mov	r3, #0
   1b310:	umull	r0, r1, r4, ip
   1b314:	mla	r2, ip, r5, r2
   1b318:	strd	r0, [sp]
   1b31c:	add	r2, r2, r1
   1b320:	str	r2, [sp, #4]
   1b324:	b	1af78 <close_stdout@@Base+0x4868>
   1b328:	asr	r5, r4, #31
   1b32c:	mov	r2, r4
   1b330:	mvn	r0, #0
   1b334:	mvn	r1, #0
   1b338:	mov	r3, r5
   1b33c:	bl	1c044 <close_stdout@@Base+0x5934>
   1b340:	mov	ip, r7
   1b344:	str	r6, [sp, #20]
   1b348:	mov	r2, #4
   1b34c:	ldrd	r6, [sp]
   1b350:	mov	r3, #0
   1b354:	strd	r0, [sp, #8]
   1b358:	ldrd	r0, [sp, #8]
   1b35c:	cmp	r1, r7
   1b360:	cmpeq	r0, r6
   1b364:	mulcs	r0, r6, r5
   1b368:	movcs	r1, #0
   1b36c:	mlacs	r0, r4, r7, r0
   1b370:	movcc	r1, #1
   1b374:	umullcs	r6, r7, r6, r4
   1b378:	mvncc	r6, #0
   1b37c:	mvncc	r7, #0
   1b380:	orr	r3, r3, r1
   1b384:	addcs	r7, r0, r7
   1b388:	subs	r2, r2, #1
   1b38c:	bne	1b358 <close_stdout@@Base+0x4c48>
   1b390:	b	1b060 <close_stdout@@Base+0x4950>
   1b394:	ldrd	r0, [sp]
   1b398:	strd	r0, [r9]
   1b39c:	mov	r0, r7
   1b3a0:	b	1ad68 <close_stdout@@Base+0x4658>
   1b3a4:	ldrb	r3, [fp, #2]
   1b3a8:	mov	r4, #1024	; 0x400
   1b3ac:	cmp	r3, #66	; 0x42
   1b3b0:	moveq	r6, #3
   1b3b4:	movne	r6, #1
   1b3b8:	b	1ae40 <close_stdout@@Base+0x4730>
   1b3bc:	mov	r6, #2
   1b3c0:	mov	r4, #1000	; 0x3e8
   1b3c4:	b	1ae40 <close_stdout@@Base+0x4730>
   1b3c8:	mvn	r3, #0
   1b3cc:	mvn	r2, #0
   1b3d0:	strd	r2, [sp]
   1b3d4:	mov	r3, #1
   1b3d8:	b	1af78 <close_stdout@@Base+0x4868>
   1b3dc:	mvn	r0, #0
   1b3e0:	mvn	r1, #0
   1b3e4:	mov	r3, #1
   1b3e8:	strd	r0, [sp]
   1b3ec:	b	1af78 <close_stdout@@Base+0x4868>
   1b3f0:	mvn	r0, #0
   1b3f4:	mvn	r1, #0
   1b3f8:	mov	r3, #1
   1b3fc:	strd	r0, [sp]
   1b400:	b	1af78 <close_stdout@@Base+0x4868>
   1b404:	bl	11394 <__stack_chk_fail@plt>
   1b408:	ldr	r0, [pc, #32]	; 1b430 <close_stdout@@Base+0x4d20>
   1b40c:	mov	r2, #96	; 0x60
   1b410:	ldr	r1, [pc, #28]	; 1b434 <close_stdout@@Base+0x4d24>
   1b414:	ldr	r3, [pc, #28]	; 1b438 <close_stdout@@Base+0x4d28>
   1b418:	add	r0, pc, r0
   1b41c:	add	r1, pc, r1
   1b420:	add	r3, pc, r3
   1b424:	bl	11610 <__assert_fail@plt>
   1b428:	andeq	r4, r1, r4, lsl #6
   1b42c:	andeq	r0, r0, r8, lsr r1
   1b430:	andeq	r2, r0, r4, lsr #31
   1b434:	andeq	r2, r0, r8, asr #31
   1b438:	andeq	r3, r0, ip, lsr r0
   1b43c:	push	{r4, r5, r6, lr}
   1b440:	sub	sp, sp, #8
   1b444:	mov	r4, r0
   1b448:	bl	1155c <fileno@plt>
   1b44c:	cmp	r0, #0
   1b450:	mov	r0, r4
   1b454:	blt	1b4d0 <close_stdout@@Base+0x4dc0>
   1b458:	bl	11478 <__freading@plt>
   1b45c:	cmp	r0, #0
   1b460:	bne	1b49c <close_stdout@@Base+0x4d8c>
   1b464:	mov	r0, r4
   1b468:	bl	1b650 <close_stdout@@Base+0x4f40>
   1b46c:	cmp	r0, #0
   1b470:	beq	1b4cc <close_stdout@@Base+0x4dbc>
   1b474:	bl	11508 <__errno_location@plt>
   1b478:	ldr	r6, [r0]
   1b47c:	mov	r5, r0
   1b480:	mov	r0, r4
   1b484:	bl	11574 <fclose@plt>
   1b488:	cmp	r6, #0
   1b48c:	mvnne	r0, #0
   1b490:	strne	r6, [r5]
   1b494:	add	sp, sp, #8
   1b498:	pop	{r4, r5, r6, pc}
   1b49c:	mov	r0, r4
   1b4a0:	bl	1155c <fileno@plt>
   1b4a4:	mov	r1, #1
   1b4a8:	mov	r2, #0
   1b4ac:	mov	r3, #0
   1b4b0:	str	r1, [sp]
   1b4b4:	bl	113e8 <lseek64@plt>
   1b4b8:	mvn	r2, #0
   1b4bc:	mvn	r3, #0
   1b4c0:	cmp	r1, r3
   1b4c4:	cmpeq	r0, r2
   1b4c8:	bne	1b464 <close_stdout@@Base+0x4d54>
   1b4cc:	mov	r0, r4
   1b4d0:	add	sp, sp, #8
   1b4d4:	pop	{r4, r5, r6, lr}
   1b4d8:	b	11574 <fclose@plt>
   1b4dc:	push	{r1, r2, r3}
   1b4e0:	movw	ip, #1030	; 0x406
   1b4e4:	ldr	r3, [pc, #336]	; 1b63c <close_stdout@@Base+0x4f2c>
   1b4e8:	push	{r4, r5, r6, r7, r8, lr}
   1b4ec:	add	r3, pc, r3
   1b4f0:	ldr	lr, [pc, #328]	; 1b640 <close_stdout@@Base+0x4f30>
   1b4f4:	sub	sp, sp, #12
   1b4f8:	add	r2, sp, #40	; 0x28
   1b4fc:	mov	r6, r0
   1b500:	ldr	r1, [sp, #36]	; 0x24
   1b504:	ldr	r4, [r3, lr]
   1b508:	cmp	r1, ip
   1b50c:	str	r2, [sp]
   1b510:	ldr	r3, [r4]
   1b514:	str	r3, [sp, #4]
   1b518:	bne	1b59c <close_stdout@@Base+0x4e8c>
   1b51c:	ldr	r8, [pc, #288]	; 1b644 <close_stdout@@Base+0x4f34>
   1b520:	add	r3, sp, #44	; 0x2c
   1b524:	str	r3, [sp]
   1b528:	add	r8, pc, r8
   1b52c:	ldr	r7, [sp, #40]	; 0x28
   1b530:	ldr	r3, [r8]
   1b534:	mov	r2, r7
   1b538:	cmp	r3, #0
   1b53c:	blt	1b628 <close_stdout@@Base+0x4f18>
   1b540:	bl	114fc <fcntl@plt>
   1b544:	subs	r5, r0, #0
   1b548:	blt	1b5ac <close_stdout@@Base+0x4e9c>
   1b54c:	ldr	r3, [pc, #244]	; 1b648 <close_stdout@@Base+0x4f38>
   1b550:	mov	r2, #1
   1b554:	add	r3, pc, r3
   1b558:	str	r2, [r3]
   1b55c:	cmp	r5, #0
   1b560:	blt	1b578 <close_stdout@@Base+0x4e68>
   1b564:	ldr	r3, [pc, #224]	; 1b64c <close_stdout@@Base+0x4f3c>
   1b568:	add	r3, pc, r3
   1b56c:	ldr	r3, [r3]
   1b570:	cmn	r3, #1
   1b574:	beq	1b5dc <close_stdout@@Base+0x4ecc>
   1b578:	ldr	r2, [sp, #4]
   1b57c:	mov	r0, r5
   1b580:	ldr	r3, [r4]
   1b584:	cmp	r2, r3
   1b588:	bne	1b638 <close_stdout@@Base+0x4f28>
   1b58c:	add	sp, sp, #12
   1b590:	pop	{r4, r5, r6, r7, r8, lr}
   1b594:	add	sp, sp, #12
   1b598:	bx	lr
   1b59c:	ldr	r2, [sp, #40]	; 0x28
   1b5a0:	bl	114fc <fcntl@plt>
   1b5a4:	mov	r5, r0
   1b5a8:	b	1b578 <close_stdout@@Base+0x4e68>
   1b5ac:	bl	11508 <__errno_location@plt>
   1b5b0:	ldr	r3, [r0]
   1b5b4:	cmp	r3, #22
   1b5b8:	bne	1b54c <close_stdout@@Base+0x4e3c>
   1b5bc:	mov	r0, r6
   1b5c0:	mov	r2, r7
   1b5c4:	mov	r1, #0
   1b5c8:	bl	1b4dc <close_stdout@@Base+0x4dcc>
   1b5cc:	subs	r5, r0, #0
   1b5d0:	blt	1b578 <close_stdout@@Base+0x4e68>
   1b5d4:	mvn	r3, #0
   1b5d8:	str	r3, [r8]
   1b5dc:	mov	r0, r5
   1b5e0:	mov	r1, #1
   1b5e4:	bl	114fc <fcntl@plt>
   1b5e8:	subs	r2, r0, #0
   1b5ec:	blt	1b608 <close_stdout@@Base+0x4ef8>
   1b5f0:	orr	r2, r2, #1
   1b5f4:	mov	r0, r5
   1b5f8:	mov	r1, #2
   1b5fc:	bl	114fc <fcntl@plt>
   1b600:	cmn	r0, #1
   1b604:	bne	1b578 <close_stdout@@Base+0x4e68>
   1b608:	bl	11508 <__errno_location@plt>
   1b60c:	ldr	r7, [r0]
   1b610:	mov	r6, r0
   1b614:	mov	r0, r5
   1b618:	mvn	r5, #0
   1b61c:	bl	11604 <close@plt>
   1b620:	str	r7, [r6]
   1b624:	b	1b578 <close_stdout@@Base+0x4e68>
   1b628:	mov	r1, #0
   1b62c:	bl	1b4dc <close_stdout@@Base+0x4dcc>
   1b630:	mov	r5, r0
   1b634:	b	1b55c <close_stdout@@Base+0x4e4c>
   1b638:	bl	11394 <__stack_chk_fail@plt>
   1b63c:	andeq	r3, r1, ip, lsl #22
   1b640:	andeq	r0, r0, r8, lsr r1
   1b644:	andeq	r3, r1, ip, asr #30
   1b648:	andeq	r3, r1, r0, lsr #30
   1b64c:	andeq	r3, r1, ip, lsl #30
   1b650:	push	{r4, lr}
   1b654:	subs	r4, r0, #0
   1b658:	sub	sp, sp, #8
   1b65c:	beq	1b66c <close_stdout@@Base+0x4f5c>
   1b660:	bl	11478 <__freading@plt>
   1b664:	cmp	r0, #0
   1b668:	bne	1b67c <close_stdout@@Base+0x4f6c>
   1b66c:	mov	r0, r4
   1b670:	add	sp, sp, #8
   1b674:	pop	{r4, lr}
   1b678:	b	11304 <fflush@plt>
   1b67c:	ldr	r3, [r4]
   1b680:	tst	r3, #256	; 0x100
   1b684:	beq	1b66c <close_stdout@@Base+0x4f5c>
   1b688:	mov	r3, #1
   1b68c:	mov	r0, r4
   1b690:	str	r3, [sp]
   1b694:	mov	r2, #0
   1b698:	mov	r3, #0
   1b69c:	bl	1b6b0 <close_stdout@@Base+0x4fa0>
   1b6a0:	mov	r0, r4
   1b6a4:	add	sp, sp, #8
   1b6a8:	pop	{r4, lr}
   1b6ac:	b	11304 <fflush@plt>
   1b6b0:	push	{r4, r5, r6, r7, lr}
   1b6b4:	sub	sp, sp, #20
   1b6b8:	ldmib	r0, {r1, ip}
   1b6bc:	mov	r6, r0
   1b6c0:	ldr	r4, [sp, #40]	; 0x28
   1b6c4:	cmp	ip, r1
   1b6c8:	beq	1b6e0 <close_stdout@@Base+0x4fd0>
   1b6cc:	str	r4, [sp, #40]	; 0x28
   1b6d0:	mov	r0, r6
   1b6d4:	add	sp, sp, #20
   1b6d8:	pop	{r4, r5, r6, r7, lr}
   1b6dc:	b	1158c <fseeko64@plt>
   1b6e0:	ldr	ip, [r0, #20]
   1b6e4:	ldr	r1, [r0, #16]
   1b6e8:	cmp	ip, r1
   1b6ec:	bne	1b6cc <close_stdout@@Base+0x4fbc>
   1b6f0:	ldr	r7, [r0, #36]	; 0x24
   1b6f4:	cmp	r7, #0
   1b6f8:	bne	1b6cc <close_stdout@@Base+0x4fbc>
   1b6fc:	str	r2, [sp, #12]
   1b700:	mvn	r5, #0
   1b704:	str	r3, [sp, #8]
   1b708:	bl	1155c <fileno@plt>
   1b70c:	str	r4, [sp]
   1b710:	mvn	r4, #0
   1b714:	ldr	r2, [sp, #12]
   1b718:	ldr	r3, [sp, #8]
   1b71c:	bl	113e8 <lseek64@plt>
   1b720:	mov	r2, r0
   1b724:	mov	r3, r1
   1b728:	cmp	r3, r5
   1b72c:	cmpeq	r2, r4
   1b730:	beq	1b750 <close_stdout@@Base+0x5040>
   1b734:	ldr	r1, [r6]
   1b738:	mov	r0, r7
   1b73c:	strd	r2, [r6, #80]	; 0x50
   1b740:	bic	r3, r1, #16
   1b744:	str	r3, [r6]
   1b748:	add	sp, sp, #20
   1b74c:	pop	{r4, r5, r6, r7, pc}
   1b750:	mvn	r0, #0
   1b754:	b	1b748 <close_stdout@@Base+0x5038>
   1b758:	push	{r4, r5, r6, lr}
   1b75c:	mov	r4, r0
   1b760:	bl	11418 <__fpending@plt>
   1b764:	mov	r6, r0
   1b768:	mov	r0, r4
   1b76c:	ldr	r4, [r4]
   1b770:	bl	1b43c <close_stdout@@Base+0x4d2c>
   1b774:	and	r4, r4, #32
   1b778:	adds	r5, r0, #0
   1b77c:	movne	r5, #1
   1b780:	cmp	r4, #0
   1b784:	bne	1b7a4 <close_stdout@@Base+0x5094>
   1b788:	cmp	r5, #0
   1b78c:	beq	1b79c <close_stdout@@Base+0x508c>
   1b790:	cmp	r6, #0
   1b794:	beq	1b7c0 <close_stdout@@Base+0x50b0>
   1b798:	mvn	r4, #0
   1b79c:	mov	r0, r4
   1b7a0:	pop	{r4, r5, r6, pc}
   1b7a4:	cmp	r5, #0
   1b7a8:	bne	1b798 <close_stdout@@Base+0x5088>
   1b7ac:	bl	11508 <__errno_location@plt>
   1b7b0:	mvn	r4, #0
   1b7b4:	str	r5, [r0]
   1b7b8:	mov	r0, r4
   1b7bc:	pop	{r4, r5, r6, pc}
   1b7c0:	bl	11508 <__errno_location@plt>
   1b7c4:	ldr	r4, [r0]
   1b7c8:	subs	r4, r4, #9
   1b7cc:	mvnne	r4, #0
   1b7d0:	mov	r0, r4
   1b7d4:	pop	{r4, r5, r6, pc}
   1b7d8:	ldr	r3, [pc, #984]	; 1bbb8 <close_stdout@@Base+0x54a8>
   1b7dc:	mov	r0, #14
   1b7e0:	ldr	r2, [pc, #980]	; 1bbbc <close_stdout@@Base+0x54ac>
   1b7e4:	add	r3, pc, r3
   1b7e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7ec:	sub	sp, sp, #132	; 0x84
   1b7f0:	ldr	r6, [r3, r2]
   1b7f4:	ldr	r3, [r6]
   1b7f8:	str	r3, [sp, #124]	; 0x7c
   1b7fc:	bl	115c8 <nl_langinfo@plt>
   1b800:	subs	r5, r0, #0
   1b804:	beq	1b8b8 <close_stdout@@Base+0x51a8>
   1b808:	ldr	r3, [pc, #944]	; 1bbc0 <close_stdout@@Base+0x54b0>
   1b80c:	ldr	r4, [pc, r3]
   1b810:	cmp	r4, #0
   1b814:	beq	1b8c4 <close_stdout@@Base+0x51b4>
   1b818:	ldrb	r7, [r4]
   1b81c:	cmp	r7, #0
   1b820:	bne	1b854 <close_stdout@@Base+0x5144>
   1b824:	b	1b88c <close_stdout@@Base+0x517c>
   1b828:	mov	r0, r4
   1b82c:	bl	114d8 <strlen@plt>
   1b830:	add	r0, r0, #1
   1b834:	add	r7, r4, r0
   1b838:	mov	r0, r7
   1b83c:	bl	114d8 <strlen@plt>
   1b840:	add	r0, r0, #1
   1b844:	add	r4, r7, r0
   1b848:	ldrb	r7, [r7, r0]
   1b84c:	cmp	r7, #0
   1b850:	beq	1b88c <close_stdout@@Base+0x517c>
   1b854:	mov	r0, r5
   1b858:	mov	r1, r4
   1b85c:	bl	112d4 <strcmp@plt>
   1b860:	cmp	r0, #0
   1b864:	beq	1b87c <close_stdout@@Base+0x516c>
   1b868:	cmp	r7, #42	; 0x2a
   1b86c:	bne	1b828 <close_stdout@@Base+0x5118>
   1b870:	ldrb	r3, [r4, #1]
   1b874:	cmp	r3, #0
   1b878:	bne	1b828 <close_stdout@@Base+0x5118>
   1b87c:	mov	r0, r4
   1b880:	bl	114d8 <strlen@plt>
   1b884:	add	r0, r0, #1
   1b888:	add	r5, r4, r0
   1b88c:	ldrb	r3, [r5]
   1b890:	cmp	r3, #0
   1b894:	ldreq	r5, [pc, #808]	; 1bbc4 <close_stdout@@Base+0x54b4>
   1b898:	addeq	r5, pc, r5
   1b89c:	ldr	r2, [sp, #124]	; 0x7c
   1b8a0:	mov	r0, r5
   1b8a4:	ldr	r3, [r6]
   1b8a8:	cmp	r2, r3
   1b8ac:	bne	1bb8c <close_stdout@@Base+0x547c>
   1b8b0:	add	sp, sp, #132	; 0x84
   1b8b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8b8:	ldr	r5, [pc, #776]	; 1bbc8 <close_stdout@@Base+0x54b8>
   1b8bc:	add	r5, pc, r5
   1b8c0:	b	1b808 <close_stdout@@Base+0x50f8>
   1b8c4:	ldr	r0, [pc, #768]	; 1bbcc <close_stdout@@Base+0x54bc>
   1b8c8:	add	r0, pc, r0
   1b8cc:	bl	11448 <getenv@plt>
   1b8d0:	subs	r8, r0, #0
   1b8d4:	beq	1bb64 <close_stdout@@Base+0x5454>
   1b8d8:	ldrb	r3, [r8]
   1b8dc:	cmp	r3, #0
   1b8e0:	beq	1baf8 <close_stdout@@Base+0x53e8>
   1b8e4:	bl	114d8 <strlen@plt>
   1b8e8:	subs	sl, r0, #0
   1b8ec:	subne	r3, sl, #1
   1b8f0:	bne	1bb08 <close_stdout@@Base+0x53f8>
   1b8f4:	mov	r9, #0
   1b8f8:	mov	fp, r9
   1b8fc:	add	r9, sl, r9
   1b900:	add	r0, r9, #14
   1b904:	bl	11454 <malloc@plt>
   1b908:	subs	r7, r0, #0
   1b90c:	beq	1bb58 <close_stdout@@Base+0x5448>
   1b910:	mov	r1, r8
   1b914:	mov	r2, sl
   1b918:	bl	1134c <memcpy@plt>
   1b91c:	cmp	fp, #0
   1b920:	add	ip, r7, r9
   1b924:	movne	r3, #47	; 0x2f
   1b928:	strbne	r3, [r7, sl]
   1b92c:	ldr	r3, [pc, #668]	; 1bbd0 <close_stdout@@Base+0x54c0>
   1b930:	add	r3, pc, r3
   1b934:	ldm	r3!, {r0, r1, r2}
   1b938:	ldrh	r3, [r3]
   1b93c:	str	r0, [r7, r9]
   1b940:	mov	r0, r7
   1b944:	str	r1, [ip, #4]
   1b948:	mov	r1, #32768	; 0x8000
   1b94c:	strh	r3, [ip, #12]
   1b950:	str	r2, [ip, #8]
   1b954:	bl	1143c <open64@plt>
   1b958:	subs	r8, r0, #0
   1b95c:	blt	1bb20 <close_stdout@@Base+0x5410>
   1b960:	ldr	r1, [pc, #620]	; 1bbd4 <close_stdout@@Base+0x54c4>
   1b964:	add	r1, pc, r1
   1b968:	bl	112a4 <fdopen@plt>
   1b96c:	subs	fp, r0, #0
   1b970:	beq	1bb78 <close_stdout@@Base+0x5468>
   1b974:	ldr	r0, [pc, #604]	; 1bbd8 <close_stdout@@Base+0x54c8>
   1b978:	add	sl, sp, #20
   1b97c:	add	r9, sp, #72	; 0x48
   1b980:	mov	r8, #0
   1b984:	add	r0, pc, r0
   1b988:	str	r0, [sp, #12]
   1b98c:	ldr	r3, [fp, #4]
   1b990:	ldr	r2, [fp, #8]
   1b994:	cmp	r3, r2
   1b998:	bcs	1ba84 <close_stdout@@Base+0x5374>
   1b99c:	add	r2, r3, #1
   1b9a0:	str	r2, [fp, #4]
   1b9a4:	ldrb	r0, [r3]
   1b9a8:	cmp	r0, #32
   1b9ac:	beq	1b98c <close_stdout@@Base+0x527c>
   1b9b0:	sub	r3, r0, #9
   1b9b4:	cmp	r3, #1
   1b9b8:	bls	1b98c <close_stdout@@Base+0x527c>
   1b9bc:	cmp	r0, #35	; 0x23
   1b9c0:	beq	1ba98 <close_stdout@@Base+0x5388>
   1b9c4:	mov	r1, fp
   1b9c8:	bl	114f0 <ungetc@plt>
   1b9cc:	mov	r0, fp
   1b9d0:	ldr	r1, [sp, #12]
   1b9d4:	mov	r2, sl
   1b9d8:	mov	r3, r9
   1b9dc:	bl	11544 <fscanf@plt>
   1b9e0:	cmp	r0, #1
   1b9e4:	ble	1bac8 <close_stdout@@Base+0x53b8>
   1b9e8:	mov	r0, sl
   1b9ec:	bl	114d8 <strlen@plt>
   1b9f0:	str	r0, [sp, #8]
   1b9f4:	mov	r0, r9
   1b9f8:	bl	114d8 <strlen@plt>
   1b9fc:	cmp	r8, #0
   1ba00:	mov	r2, r0
   1ba04:	bne	1bb2c <close_stdout@@Base+0x541c>
   1ba08:	ldr	r3, [sp, #8]
   1ba0c:	str	r2, [sp]
   1ba10:	add	r8, r0, r3
   1ba14:	add	r0, r8, #3
   1ba18:	add	r8, r8, #2
   1ba1c:	bl	11454 <malloc@plt>
   1ba20:	ldr	r2, [sp]
   1ba24:	mov	r3, r0
   1ba28:	cmp	r3, #0
   1ba2c:	beq	1bb90 <close_stdout@@Base+0x5480>
   1ba30:	ldr	r0, [sp, #8]
   1ba34:	movw	r1, #65534	; 0xfffe
   1ba38:	movt	r1, #65535	; 0xffff
   1ba3c:	rsb	r2, r2, r8
   1ba40:	rsb	r1, r0, r1
   1ba44:	stm	sp, {r2, r3}
   1ba48:	add	r0, r1, r2
   1ba4c:	mov	r1, sl
   1ba50:	add	r0, r3, r0
   1ba54:	mov	r4, r3
   1ba58:	bl	11400 <strcpy@plt>
   1ba5c:	ldr	r2, [sp]
   1ba60:	ldr	r3, [sp, #4]
   1ba64:	mov	r1, r9
   1ba68:	sub	r0, r2, #1
   1ba6c:	add	r0, r3, r0
   1ba70:	bl	11400 <strcpy@plt>
   1ba74:	ldr	r3, [fp, #4]
   1ba78:	ldr	r2, [fp, #8]
   1ba7c:	cmp	r3, r2
   1ba80:	bcc	1b99c <close_stdout@@Base+0x528c>
   1ba84:	mov	r0, fp
   1ba88:	bl	11598 <__uflow@plt>
   1ba8c:	cmn	r0, #1
   1ba90:	beq	1bac8 <close_stdout@@Base+0x53b8>
   1ba94:	b	1b9a8 <close_stdout@@Base+0x5298>
   1ba98:	ldr	r3, [fp, #4]
   1ba9c:	ldr	r2, [fp, #8]
   1baa0:	cmp	r3, r2
   1baa4:	bcs	1bbac <close_stdout@@Base+0x549c>
   1baa8:	add	r2, r3, #1
   1baac:	str	r2, [fp, #4]
   1bab0:	ldrb	r0, [r3]
   1bab4:	cmp	r0, #10
   1bab8:	cmnne	r0, #1
   1babc:	bne	1ba98 <close_stdout@@Base+0x5388>
   1bac0:	cmn	r0, #1
   1bac4:	bne	1b98c <close_stdout@@Base+0x527c>
   1bac8:	mov	r0, fp
   1bacc:	bl	1b43c <close_stdout@@Base+0x4d2c>
   1bad0:	cmp	r8, #0
   1bad4:	beq	1bb20 <close_stdout@@Base+0x5410>
   1bad8:	mov	r3, #0
   1badc:	strb	r3, [r4, r8]
   1bae0:	mov	r0, r7
   1bae4:	bl	11328 <free@plt>
   1bae8:	ldr	r3, [pc, #236]	; 1bbdc <close_stdout@@Base+0x54cc>
   1baec:	add	r3, pc, r3
   1baf0:	str	r4, [r3]
   1baf4:	b	1b818 <close_stdout@@Base+0x5108>
   1baf8:	ldr	r8, [pc, #224]	; 1bbe0 <close_stdout@@Base+0x54d0>
   1bafc:	mov	r3, #7
   1bb00:	mov	sl, #8
   1bb04:	add	r8, pc, r8
   1bb08:	ldrb	r3, [r8, r3]
   1bb0c:	cmp	r3, #47	; 0x2f
   1bb10:	movne	r9, #1
   1bb14:	movne	fp, r9
   1bb18:	bne	1b8fc <close_stdout@@Base+0x51ec>
   1bb1c:	b	1b8f4 <close_stdout@@Base+0x51e4>
   1bb20:	ldr	r4, [pc, #188]	; 1bbe4 <close_stdout@@Base+0x54d4>
   1bb24:	add	r4, pc, r4
   1bb28:	b	1bae0 <close_stdout@@Base+0x53d0>
   1bb2c:	ldr	r0, [sp, #8]
   1bb30:	str	r2, [sp]
   1bb34:	add	r3, r0, r2
   1bb38:	mov	r0, r4
   1bb3c:	add	r8, r3, r8
   1bb40:	add	r1, r8, #3
   1bb44:	add	r8, r8, #2
   1bb48:	bl	113a0 <realloc@plt>
   1bb4c:	ldr	r2, [sp]
   1bb50:	mov	r3, r0
   1bb54:	b	1ba28 <close_stdout@@Base+0x5318>
   1bb58:	ldr	r4, [pc, #136]	; 1bbe8 <close_stdout@@Base+0x54d8>
   1bb5c:	add	r4, pc, r4
   1bb60:	b	1bae8 <close_stdout@@Base+0x53d8>
   1bb64:	ldr	r8, [pc, #128]	; 1bbec <close_stdout@@Base+0x54dc>
   1bb68:	mov	r3, #7
   1bb6c:	mov	sl, #8
   1bb70:	add	r8, pc, r8
   1bb74:	b	1bb08 <close_stdout@@Base+0x53f8>
   1bb78:	ldr	r4, [pc, #112]	; 1bbf0 <close_stdout@@Base+0x54e0>
   1bb7c:	mov	r0, r8
   1bb80:	add	r4, pc, r4
   1bb84:	bl	11604 <close@plt>
   1bb88:	b	1bae0 <close_stdout@@Base+0x53d0>
   1bb8c:	bl	11394 <__stack_chk_fail@plt>
   1bb90:	mov	r0, r4
   1bb94:	ldr	r4, [pc, #88]	; 1bbf4 <close_stdout@@Base+0x54e4>
   1bb98:	bl	11328 <free@plt>
   1bb9c:	mov	r0, fp
   1bba0:	add	r4, pc, r4
   1bba4:	bl	1b43c <close_stdout@@Base+0x4d2c>
   1bba8:	b	1bae0 <close_stdout@@Base+0x53d0>
   1bbac:	mov	r0, fp
   1bbb0:	bl	11598 <__uflow@plt>
   1bbb4:	b	1bab4 <close_stdout@@Base+0x53a4>
   1bbb8:	andeq	r3, r1, r4, lsl r8
   1bbbc:	andeq	r0, r0, r8, lsr r1
   1bbc0:	andeq	r3, r1, ip, ror #24
   1bbc4:	ldrdeq	r2, [r0], -ip
   1bbc8:	andeq	r1, r0, r8, asr #4
   1bbcc:			; <UNDEFINED> instruction: 0x00002bb4
   1bbd0:	andeq	r2, r0, ip, asr fp
   1bbd4:	andeq	r2, r0, ip, lsl #11
   1bbd8:	andeq	r2, r0, r8, lsl fp
   1bbdc:	andeq	r3, r1, ip, lsl #19
   1bbe0:	andeq	r2, r0, r4, ror #18
   1bbe4:	andeq	r0, r0, r0, ror #31
   1bbe8:	andeq	r0, r0, r8, lsr #31
   1bbec:	strdeq	r2, [r0], -r8
   1bbf0:	andeq	r0, r0, r4, lsl #31
   1bbf4:	andeq	r0, r0, r4, ror #30
   1bbf8:	subs	r2, r1, #1
   1bbfc:	bxeq	lr
   1bc00:	bcc	1bdd8 <close_stdout@@Base+0x56c8>
   1bc04:	cmp	r0, r1
   1bc08:	bls	1bdbc <close_stdout@@Base+0x56ac>
   1bc0c:	tst	r1, r2
   1bc10:	beq	1bdc8 <close_stdout@@Base+0x56b8>
   1bc14:	clz	r3, r0
   1bc18:	clz	r2, r1
   1bc1c:	sub	r3, r2, r3
   1bc20:	rsbs	r3, r3, #31
   1bc24:	addne	r3, r3, r3, lsl #1
   1bc28:	mov	r2, #0
   1bc2c:	addne	pc, pc, r3, lsl #2
   1bc30:	nop	{0}
   1bc34:	cmp	r0, r1, lsl #31
   1bc38:	adc	r2, r2, r2
   1bc3c:	subcs	r0, r0, r1, lsl #31
   1bc40:	cmp	r0, r1, lsl #30
   1bc44:	adc	r2, r2, r2
   1bc48:	subcs	r0, r0, r1, lsl #30
   1bc4c:	cmp	r0, r1, lsl #29
   1bc50:	adc	r2, r2, r2
   1bc54:	subcs	r0, r0, r1, lsl #29
   1bc58:	cmp	r0, r1, lsl #28
   1bc5c:	adc	r2, r2, r2
   1bc60:	subcs	r0, r0, r1, lsl #28
   1bc64:	cmp	r0, r1, lsl #27
   1bc68:	adc	r2, r2, r2
   1bc6c:	subcs	r0, r0, r1, lsl #27
   1bc70:	cmp	r0, r1, lsl #26
   1bc74:	adc	r2, r2, r2
   1bc78:	subcs	r0, r0, r1, lsl #26
   1bc7c:	cmp	r0, r1, lsl #25
   1bc80:	adc	r2, r2, r2
   1bc84:	subcs	r0, r0, r1, lsl #25
   1bc88:	cmp	r0, r1, lsl #24
   1bc8c:	adc	r2, r2, r2
   1bc90:	subcs	r0, r0, r1, lsl #24
   1bc94:	cmp	r0, r1, lsl #23
   1bc98:	adc	r2, r2, r2
   1bc9c:	subcs	r0, r0, r1, lsl #23
   1bca0:	cmp	r0, r1, lsl #22
   1bca4:	adc	r2, r2, r2
   1bca8:	subcs	r0, r0, r1, lsl #22
   1bcac:	cmp	r0, r1, lsl #21
   1bcb0:	adc	r2, r2, r2
   1bcb4:	subcs	r0, r0, r1, lsl #21
   1bcb8:	cmp	r0, r1, lsl #20
   1bcbc:	adc	r2, r2, r2
   1bcc0:	subcs	r0, r0, r1, lsl #20
   1bcc4:	cmp	r0, r1, lsl #19
   1bcc8:	adc	r2, r2, r2
   1bccc:	subcs	r0, r0, r1, lsl #19
   1bcd0:	cmp	r0, r1, lsl #18
   1bcd4:	adc	r2, r2, r2
   1bcd8:	subcs	r0, r0, r1, lsl #18
   1bcdc:	cmp	r0, r1, lsl #17
   1bce0:	adc	r2, r2, r2
   1bce4:	subcs	r0, r0, r1, lsl #17
   1bce8:	cmp	r0, r1, lsl #16
   1bcec:	adc	r2, r2, r2
   1bcf0:	subcs	r0, r0, r1, lsl #16
   1bcf4:	cmp	r0, r1, lsl #15
   1bcf8:	adc	r2, r2, r2
   1bcfc:	subcs	r0, r0, r1, lsl #15
   1bd00:	cmp	r0, r1, lsl #14
   1bd04:	adc	r2, r2, r2
   1bd08:	subcs	r0, r0, r1, lsl #14
   1bd0c:	cmp	r0, r1, lsl #13
   1bd10:	adc	r2, r2, r2
   1bd14:	subcs	r0, r0, r1, lsl #13
   1bd18:	cmp	r0, r1, lsl #12
   1bd1c:	adc	r2, r2, r2
   1bd20:	subcs	r0, r0, r1, lsl #12
   1bd24:	cmp	r0, r1, lsl #11
   1bd28:	adc	r2, r2, r2
   1bd2c:	subcs	r0, r0, r1, lsl #11
   1bd30:	cmp	r0, r1, lsl #10
   1bd34:	adc	r2, r2, r2
   1bd38:	subcs	r0, r0, r1, lsl #10
   1bd3c:	cmp	r0, r1, lsl #9
   1bd40:	adc	r2, r2, r2
   1bd44:	subcs	r0, r0, r1, lsl #9
   1bd48:	cmp	r0, r1, lsl #8
   1bd4c:	adc	r2, r2, r2
   1bd50:	subcs	r0, r0, r1, lsl #8
   1bd54:	cmp	r0, r1, lsl #7
   1bd58:	adc	r2, r2, r2
   1bd5c:	subcs	r0, r0, r1, lsl #7
   1bd60:	cmp	r0, r1, lsl #6
   1bd64:	adc	r2, r2, r2
   1bd68:	subcs	r0, r0, r1, lsl #6
   1bd6c:	cmp	r0, r1, lsl #5
   1bd70:	adc	r2, r2, r2
   1bd74:	subcs	r0, r0, r1, lsl #5
   1bd78:	cmp	r0, r1, lsl #4
   1bd7c:	adc	r2, r2, r2
   1bd80:	subcs	r0, r0, r1, lsl #4
   1bd84:	cmp	r0, r1, lsl #3
   1bd88:	adc	r2, r2, r2
   1bd8c:	subcs	r0, r0, r1, lsl #3
   1bd90:	cmp	r0, r1, lsl #2
   1bd94:	adc	r2, r2, r2
   1bd98:	subcs	r0, r0, r1, lsl #2
   1bd9c:	cmp	r0, r1, lsl #1
   1bda0:	adc	r2, r2, r2
   1bda4:	subcs	r0, r0, r1, lsl #1
   1bda8:	cmp	r0, r1
   1bdac:	adc	r2, r2, r2
   1bdb0:	subcs	r0, r0, r1
   1bdb4:	mov	r0, r2
   1bdb8:	bx	lr
   1bdbc:	moveq	r0, #1
   1bdc0:	movne	r0, #0
   1bdc4:	bx	lr
   1bdc8:	clz	r2, r1
   1bdcc:	rsb	r2, r2, #31
   1bdd0:	lsr	r0, r0, r2
   1bdd4:	bx	lr
   1bdd8:	cmp	r0, #0
   1bddc:	mvnne	r0, #0
   1bde0:	b	1c080 <close_stdout@@Base+0x5970>
   1bde4:	cmp	r1, #0
   1bde8:	beq	1bdd8 <close_stdout@@Base+0x56c8>
   1bdec:	push	{r0, r1, lr}
   1bdf0:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1bdf4:	pop	{r1, r2, lr}
   1bdf8:	mul	r3, r2, r0
   1bdfc:	sub	r1, r1, r3
   1be00:	bx	lr
   1be04:	cmp	r1, #0
   1be08:	beq	1c014 <close_stdout@@Base+0x5904>
   1be0c:	eor	ip, r0, r1
   1be10:	rsbmi	r1, r1, #0
   1be14:	subs	r2, r1, #1
   1be18:	beq	1bfe0 <close_stdout@@Base+0x58d0>
   1be1c:	movs	r3, r0
   1be20:	rsbmi	r3, r0, #0
   1be24:	cmp	r3, r1
   1be28:	bls	1bfec <close_stdout@@Base+0x58dc>
   1be2c:	tst	r1, r2
   1be30:	beq	1bffc <close_stdout@@Base+0x58ec>
   1be34:	clz	r2, r3
   1be38:	clz	r0, r1
   1be3c:	sub	r2, r0, r2
   1be40:	rsbs	r2, r2, #31
   1be44:	addne	r2, r2, r2, lsl #1
   1be48:	mov	r0, #0
   1be4c:	addne	pc, pc, r2, lsl #2
   1be50:	nop	{0}
   1be54:	cmp	r3, r1, lsl #31
   1be58:	adc	r0, r0, r0
   1be5c:	subcs	r3, r3, r1, lsl #31
   1be60:	cmp	r3, r1, lsl #30
   1be64:	adc	r0, r0, r0
   1be68:	subcs	r3, r3, r1, lsl #30
   1be6c:	cmp	r3, r1, lsl #29
   1be70:	adc	r0, r0, r0
   1be74:	subcs	r3, r3, r1, lsl #29
   1be78:	cmp	r3, r1, lsl #28
   1be7c:	adc	r0, r0, r0
   1be80:	subcs	r3, r3, r1, lsl #28
   1be84:	cmp	r3, r1, lsl #27
   1be88:	adc	r0, r0, r0
   1be8c:	subcs	r3, r3, r1, lsl #27
   1be90:	cmp	r3, r1, lsl #26
   1be94:	adc	r0, r0, r0
   1be98:	subcs	r3, r3, r1, lsl #26
   1be9c:	cmp	r3, r1, lsl #25
   1bea0:	adc	r0, r0, r0
   1bea4:	subcs	r3, r3, r1, lsl #25
   1bea8:	cmp	r3, r1, lsl #24
   1beac:	adc	r0, r0, r0
   1beb0:	subcs	r3, r3, r1, lsl #24
   1beb4:	cmp	r3, r1, lsl #23
   1beb8:	adc	r0, r0, r0
   1bebc:	subcs	r3, r3, r1, lsl #23
   1bec0:	cmp	r3, r1, lsl #22
   1bec4:	adc	r0, r0, r0
   1bec8:	subcs	r3, r3, r1, lsl #22
   1becc:	cmp	r3, r1, lsl #21
   1bed0:	adc	r0, r0, r0
   1bed4:	subcs	r3, r3, r1, lsl #21
   1bed8:	cmp	r3, r1, lsl #20
   1bedc:	adc	r0, r0, r0
   1bee0:	subcs	r3, r3, r1, lsl #20
   1bee4:	cmp	r3, r1, lsl #19
   1bee8:	adc	r0, r0, r0
   1beec:	subcs	r3, r3, r1, lsl #19
   1bef0:	cmp	r3, r1, lsl #18
   1bef4:	adc	r0, r0, r0
   1bef8:	subcs	r3, r3, r1, lsl #18
   1befc:	cmp	r3, r1, lsl #17
   1bf00:	adc	r0, r0, r0
   1bf04:	subcs	r3, r3, r1, lsl #17
   1bf08:	cmp	r3, r1, lsl #16
   1bf0c:	adc	r0, r0, r0
   1bf10:	subcs	r3, r3, r1, lsl #16
   1bf14:	cmp	r3, r1, lsl #15
   1bf18:	adc	r0, r0, r0
   1bf1c:	subcs	r3, r3, r1, lsl #15
   1bf20:	cmp	r3, r1, lsl #14
   1bf24:	adc	r0, r0, r0
   1bf28:	subcs	r3, r3, r1, lsl #14
   1bf2c:	cmp	r3, r1, lsl #13
   1bf30:	adc	r0, r0, r0
   1bf34:	subcs	r3, r3, r1, lsl #13
   1bf38:	cmp	r3, r1, lsl #12
   1bf3c:	adc	r0, r0, r0
   1bf40:	subcs	r3, r3, r1, lsl #12
   1bf44:	cmp	r3, r1, lsl #11
   1bf48:	adc	r0, r0, r0
   1bf4c:	subcs	r3, r3, r1, lsl #11
   1bf50:	cmp	r3, r1, lsl #10
   1bf54:	adc	r0, r0, r0
   1bf58:	subcs	r3, r3, r1, lsl #10
   1bf5c:	cmp	r3, r1, lsl #9
   1bf60:	adc	r0, r0, r0
   1bf64:	subcs	r3, r3, r1, lsl #9
   1bf68:	cmp	r3, r1, lsl #8
   1bf6c:	adc	r0, r0, r0
   1bf70:	subcs	r3, r3, r1, lsl #8
   1bf74:	cmp	r3, r1, lsl #7
   1bf78:	adc	r0, r0, r0
   1bf7c:	subcs	r3, r3, r1, lsl #7
   1bf80:	cmp	r3, r1, lsl #6
   1bf84:	adc	r0, r0, r0
   1bf88:	subcs	r3, r3, r1, lsl #6
   1bf8c:	cmp	r3, r1, lsl #5
   1bf90:	adc	r0, r0, r0
   1bf94:	subcs	r3, r3, r1, lsl #5
   1bf98:	cmp	r3, r1, lsl #4
   1bf9c:	adc	r0, r0, r0
   1bfa0:	subcs	r3, r3, r1, lsl #4
   1bfa4:	cmp	r3, r1, lsl #3
   1bfa8:	adc	r0, r0, r0
   1bfac:	subcs	r3, r3, r1, lsl #3
   1bfb0:	cmp	r3, r1, lsl #2
   1bfb4:	adc	r0, r0, r0
   1bfb8:	subcs	r3, r3, r1, lsl #2
   1bfbc:	cmp	r3, r1, lsl #1
   1bfc0:	adc	r0, r0, r0
   1bfc4:	subcs	r3, r3, r1, lsl #1
   1bfc8:	cmp	r3, r1
   1bfcc:	adc	r0, r0, r0
   1bfd0:	subcs	r3, r3, r1
   1bfd4:	cmp	ip, #0
   1bfd8:	rsbmi	r0, r0, #0
   1bfdc:	bx	lr
   1bfe0:	teq	ip, r0
   1bfe4:	rsbmi	r0, r0, #0
   1bfe8:	bx	lr
   1bfec:	movcc	r0, #0
   1bff0:	asreq	r0, ip, #31
   1bff4:	orreq	r0, r0, #1
   1bff8:	bx	lr
   1bffc:	clz	r2, r1
   1c000:	rsb	r2, r2, #31
   1c004:	cmp	ip, #0
   1c008:	lsr	r0, r3, r2
   1c00c:	rsbmi	r0, r0, #0
   1c010:	bx	lr
   1c014:	cmp	r0, #0
   1c018:	mvngt	r0, #-2147483648	; 0x80000000
   1c01c:	movlt	r0, #-2147483648	; 0x80000000
   1c020:	b	1c080 <close_stdout@@Base+0x5970>
   1c024:	cmp	r1, #0
   1c028:	beq	1c014 <close_stdout@@Base+0x5904>
   1c02c:	push	{r0, r1, lr}
   1c030:	bl	1be0c <close_stdout@@Base+0x56fc>
   1c034:	pop	{r1, r2, lr}
   1c038:	mul	r3, r2, r0
   1c03c:	sub	r1, r1, r3
   1c040:	bx	lr
   1c044:	cmp	r3, #0
   1c048:	cmpeq	r2, #0
   1c04c:	bne	1c064 <close_stdout@@Base+0x5954>
   1c050:	cmp	r1, #0
   1c054:	cmpeq	r0, #0
   1c058:	mvnne	r1, #0
   1c05c:	mvnne	r0, #0
   1c060:	b	1c080 <close_stdout@@Base+0x5970>
   1c064:	sub	sp, sp, #8
   1c068:	push	{sp, lr}
   1c06c:	bl	1c0cc <close_stdout@@Base+0x59bc>
   1c070:	ldr	lr, [sp, #4]
   1c074:	add	sp, sp, #8
   1c078:	pop	{r2, r3}
   1c07c:	bx	lr
   1c080:	push	{r1, lr}
   1c084:	mov	r0, #8
   1c088:	bl	112c8 <raise@plt>
   1c08c:	pop	{r1, pc}
   1c090:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c094:	mov	r8, r2
   1c098:	mov	r6, r0
   1c09c:	mov	r7, r1
   1c0a0:	mov	sl, r3
   1c0a4:	ldr	r9, [sp, #32]
   1c0a8:	bl	1c108 <close_stdout@@Base+0x59f8>
   1c0ac:	umull	r4, r5, r8, r0
   1c0b0:	mul	r8, r8, r1
   1c0b4:	mla	r2, r0, sl, r8
   1c0b8:	add	r5, r2, r5
   1c0bc:	subs	r4, r6, r4
   1c0c0:	sbc	r5, r7, r5
   1c0c4:	strd	r4, [r9]
   1c0c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c0cc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1c0d0:	mov	r8, r2
   1c0d4:	mov	r6, r0
   1c0d8:	mov	r7, r1
   1c0dc:	mov	r5, r3
   1c0e0:	ldr	r9, [sp, #32]
   1c0e4:	bl	1c594 <close_stdout@@Base+0x5e84>
   1c0e8:	mul	r3, r0, r5
   1c0ec:	umull	r4, r5, r0, r8
   1c0f0:	mla	r8, r8, r1, r3
   1c0f4:	add	r5, r8, r5
   1c0f8:	subs	r4, r6, r4
   1c0fc:	sbc	r5, r7, r5
   1c100:	strd	r4, [r9]
   1c104:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1c108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c10c:	rsbs	r4, r0, #0
   1c110:	rsc	r5, r1, #0
   1c114:	cmp	r1, #0
   1c118:	mvn	r6, #0
   1c11c:	sub	sp, sp, #12
   1c120:	movge	r4, r0
   1c124:	movge	r5, r1
   1c128:	movge	r6, #0
   1c12c:	cmp	r3, #0
   1c130:	blt	1c368 <close_stdout@@Base+0x5c58>
   1c134:	cmp	r3, #0
   1c138:	mov	sl, r4
   1c13c:	mov	ip, r5
   1c140:	mov	r0, r2
   1c144:	mov	r1, r3
   1c148:	mov	r8, r2
   1c14c:	mov	r7, r4
   1c150:	mov	r9, r5
   1c154:	bne	1c24c <close_stdout@@Base+0x5b3c>
   1c158:	cmp	r2, r5
   1c15c:	bls	1c288 <close_stdout@@Base+0x5b78>
   1c160:	clz	r3, r2
   1c164:	cmp	r3, #0
   1c168:	rsbne	r2, r3, #32
   1c16c:	lslne	r8, r0, r3
   1c170:	lsrne	r2, r4, r2
   1c174:	lslne	r7, r4, r3
   1c178:	orrne	r9, r2, r5, lsl r3
   1c17c:	lsr	r4, r8, #16
   1c180:	uxth	sl, r8
   1c184:	mov	r1, r4
   1c188:	mov	r0, r9
   1c18c:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c190:	mov	r1, r4
   1c194:	mov	fp, r0
   1c198:	mov	r0, r9
   1c19c:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c1a0:	mul	r0, sl, fp
   1c1a4:	lsr	r2, r7, #16
   1c1a8:	orr	r1, r2, r1, lsl #16
   1c1ac:	cmp	r0, r1
   1c1b0:	bls	1c1d4 <close_stdout@@Base+0x5ac4>
   1c1b4:	adds	r1, r1, r8
   1c1b8:	sub	r3, fp, #1
   1c1bc:	bcs	1c1d0 <close_stdout@@Base+0x5ac0>
   1c1c0:	cmp	r0, r1
   1c1c4:	subhi	fp, fp, #2
   1c1c8:	addhi	r1, r1, r8
   1c1cc:	bhi	1c1d4 <close_stdout@@Base+0x5ac4>
   1c1d0:	mov	fp, r3
   1c1d4:	rsb	r9, r0, r1
   1c1d8:	mov	r1, r4
   1c1dc:	uxth	r7, r7
   1c1e0:	mov	r0, r9
   1c1e4:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c1e8:	mov	r1, r4
   1c1ec:	mov	r5, r0
   1c1f0:	mov	r0, r9
   1c1f4:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c1f8:	mul	sl, sl, r5
   1c1fc:	orr	r1, r7, r1, lsl #16
   1c200:	cmp	sl, r1
   1c204:	bls	1c224 <close_stdout@@Base+0x5b14>
   1c208:	adds	r8, r1, r8
   1c20c:	sub	r3, r5, #1
   1c210:	bcs	1c220 <close_stdout@@Base+0x5b10>
   1c214:	cmp	sl, r8
   1c218:	subhi	r5, r5, #2
   1c21c:	bhi	1c224 <close_stdout@@Base+0x5b14>
   1c220:	mov	r5, r3
   1c224:	orr	r3, r5, fp, lsl #16
   1c228:	mov	r4, #0
   1c22c:	cmp	r6, #0
   1c230:	mov	r0, r3
   1c234:	mov	r1, r4
   1c238:	beq	1c244 <close_stdout@@Base+0x5b34>
   1c23c:	rsbs	r0, r0, #0
   1c240:	rsc	r1, r1, #0
   1c244:	add	sp, sp, #12
   1c248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c24c:	cmp	r3, r5
   1c250:	movhi	r4, #0
   1c254:	movhi	r3, r4
   1c258:	bhi	1c22c <close_stdout@@Base+0x5b1c>
   1c25c:	clz	r5, r1
   1c260:	cmp	r5, #0
   1c264:	bne	1c454 <close_stdout@@Base+0x5d44>
   1c268:	cmp	r1, ip
   1c26c:	cmpcs	r2, sl
   1c270:	movhi	r4, #0
   1c274:	movls	r4, #1
   1c278:	movls	r3, #1
   1c27c:	movls	r4, r5
   1c280:	movhi	r3, r4
   1c284:	b	1c22c <close_stdout@@Base+0x5b1c>
   1c288:	cmp	r2, #0
   1c28c:	bne	1c2a0 <close_stdout@@Base+0x5b90>
   1c290:	mov	r1, r2
   1c294:	mov	r0, #1
   1c298:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c29c:	mov	r8, r0
   1c2a0:	clz	r3, r8
   1c2a4:	cmp	r3, #0
   1c2a8:	bne	1c378 <close_stdout@@Base+0x5c68>
   1c2ac:	rsb	r9, r8, r9
   1c2b0:	lsr	r5, r8, #16
   1c2b4:	uxth	sl, r8
   1c2b8:	mov	r4, #1
   1c2bc:	mov	r1, r5
   1c2c0:	mov	r0, r9
   1c2c4:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c2c8:	mov	r1, r5
   1c2cc:	mov	fp, r0
   1c2d0:	mov	r0, r9
   1c2d4:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c2d8:	mul	r0, sl, fp
   1c2dc:	lsr	r2, r7, #16
   1c2e0:	orr	r1, r2, r1, lsl #16
   1c2e4:	cmp	r0, r1
   1c2e8:	bls	1c308 <close_stdout@@Base+0x5bf8>
   1c2ec:	adds	r1, r1, r8
   1c2f0:	sub	r3, fp, #1
   1c2f4:	bcs	1c574 <close_stdout@@Base+0x5e64>
   1c2f8:	cmp	r0, r1
   1c2fc:	subhi	fp, fp, #2
   1c300:	addhi	r1, r1, r8
   1c304:	bls	1c574 <close_stdout@@Base+0x5e64>
   1c308:	rsb	r2, r0, r1
   1c30c:	mov	r1, r5
   1c310:	str	r2, [sp]
   1c314:	uxth	r7, r7
   1c318:	mov	r0, r2
   1c31c:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c320:	ldr	r2, [sp]
   1c324:	mov	r1, r5
   1c328:	mov	r9, r0
   1c32c:	mov	r0, r2
   1c330:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c334:	mul	sl, sl, r9
   1c338:	orr	r1, r7, r1, lsl #16
   1c33c:	cmp	sl, r1
   1c340:	bls	1c360 <close_stdout@@Base+0x5c50>
   1c344:	adds	r8, r1, r8
   1c348:	sub	r3, r9, #1
   1c34c:	bcs	1c35c <close_stdout@@Base+0x5c4c>
   1c350:	cmp	sl, r8
   1c354:	subhi	r9, r9, #2
   1c358:	bhi	1c360 <close_stdout@@Base+0x5c50>
   1c35c:	mov	r9, r3
   1c360:	orr	r3, r9, fp, lsl #16
   1c364:	b	1c22c <close_stdout@@Base+0x5b1c>
   1c368:	mvn	r6, r6
   1c36c:	rsbs	r2, r2, #0
   1c370:	rsc	r3, r3, #0
   1c374:	b	1c134 <close_stdout@@Base+0x5a24>
   1c378:	lsl	r8, r8, r3
   1c37c:	rsb	fp, r3, #32
   1c380:	lsr	r4, r9, fp
   1c384:	lsr	fp, r7, fp
   1c388:	lsr	r5, r8, #16
   1c38c:	orr	fp, fp, r9, lsl r3
   1c390:	mov	r0, r4
   1c394:	lsl	r7, r7, r3
   1c398:	mov	r1, r5
   1c39c:	uxth	sl, r8
   1c3a0:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c3a4:	mov	r1, r5
   1c3a8:	mov	r3, r0
   1c3ac:	mov	r0, r4
   1c3b0:	str	r3, [sp]
   1c3b4:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c3b8:	ldr	r3, [sp]
   1c3bc:	lsr	r2, fp, #16
   1c3c0:	mul	r0, sl, r3
   1c3c4:	orr	r1, r2, r1, lsl #16
   1c3c8:	cmp	r0, r1
   1c3cc:	bls	1c3ec <close_stdout@@Base+0x5cdc>
   1c3d0:	adds	r1, r1, r8
   1c3d4:	sub	r2, r3, #1
   1c3d8:	bcs	1c58c <close_stdout@@Base+0x5e7c>
   1c3dc:	cmp	r0, r1
   1c3e0:	subhi	r3, r3, #2
   1c3e4:	addhi	r1, r1, r8
   1c3e8:	bls	1c58c <close_stdout@@Base+0x5e7c>
   1c3ec:	rsb	r9, r0, r1
   1c3f0:	mov	r1, r5
   1c3f4:	str	r3, [sp]
   1c3f8:	uxth	fp, fp
   1c3fc:	mov	r0, r9
   1c400:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c404:	mov	r1, r5
   1c408:	mov	r4, r0
   1c40c:	mov	r0, r9
   1c410:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c414:	mul	r9, sl, r4
   1c418:	ldr	r3, [sp]
   1c41c:	orr	r1, fp, r1, lsl #16
   1c420:	cmp	r9, r1
   1c424:	bls	1c448 <close_stdout@@Base+0x5d38>
   1c428:	adds	r1, r1, r8
   1c42c:	sub	r2, r4, #1
   1c430:	bcs	1c444 <close_stdout@@Base+0x5d34>
   1c434:	cmp	r9, r1
   1c438:	subhi	r4, r4, #2
   1c43c:	addhi	r1, r1, r8
   1c440:	bhi	1c448 <close_stdout@@Base+0x5d38>
   1c444:	mov	r4, r2
   1c448:	rsb	r9, r9, r1
   1c44c:	orr	r4, r4, r3, lsl #16
   1c450:	b	1c2bc <close_stdout@@Base+0x5bac>
   1c454:	rsb	sl, r5, #32
   1c458:	lsl	r3, r2, r5
   1c45c:	lsr	r0, r2, sl
   1c460:	lsr	r2, ip, sl
   1c464:	orr	r4, r0, r1, lsl r5
   1c468:	lsr	sl, r7, sl
   1c46c:	mov	r0, r2
   1c470:	orr	sl, sl, ip, lsl r5
   1c474:	lsr	r9, r4, #16
   1c478:	str	r3, [sp, #4]
   1c47c:	str	r2, [sp]
   1c480:	uxth	fp, r4
   1c484:	mov	r1, r9
   1c488:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c48c:	ldr	r2, [sp]
   1c490:	mov	r1, r9
   1c494:	mov	r8, r0
   1c498:	mov	r0, r2
   1c49c:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c4a0:	mul	r0, fp, r8
   1c4a4:	lsr	r2, sl, #16
   1c4a8:	orr	r1, r2, r1, lsl #16
   1c4ac:	cmp	r0, r1
   1c4b0:	bls	1c4d0 <close_stdout@@Base+0x5dc0>
   1c4b4:	adds	r1, r1, r4
   1c4b8:	sub	r2, r8, #1
   1c4bc:	bcs	1c584 <close_stdout@@Base+0x5e74>
   1c4c0:	cmp	r0, r1
   1c4c4:	subhi	r8, r8, #2
   1c4c8:	addhi	r1, r1, r4
   1c4cc:	bls	1c584 <close_stdout@@Base+0x5e74>
   1c4d0:	rsb	ip, r0, r1
   1c4d4:	mov	r1, r9
   1c4d8:	str	ip, [sp]
   1c4dc:	mov	r0, ip
   1c4e0:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c4e4:	ldr	ip, [sp]
   1c4e8:	mov	r1, r9
   1c4ec:	mov	r2, r0
   1c4f0:	mov	r0, ip
   1c4f4:	str	r2, [sp]
   1c4f8:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c4fc:	ldr	r2, [sp]
   1c500:	uxth	ip, sl
   1c504:	mul	fp, fp, r2
   1c508:	orr	ip, ip, r1, lsl #16
   1c50c:	cmp	fp, ip
   1c510:	bls	1c530 <close_stdout@@Base+0x5e20>
   1c514:	adds	ip, ip, r4
   1c518:	sub	r1, r2, #1
   1c51c:	bcs	1c57c <close_stdout@@Base+0x5e6c>
   1c520:	cmp	fp, ip
   1c524:	subhi	r2, r2, #2
   1c528:	addhi	ip, ip, r4
   1c52c:	bls	1c57c <close_stdout@@Base+0x5e6c>
   1c530:	ldr	r0, [sp, #4]
   1c534:	orr	r1, r2, r8, lsl #16
   1c538:	rsb	fp, fp, ip
   1c53c:	umull	r2, r3, r1, r0
   1c540:	cmp	fp, r3
   1c544:	bcc	1c568 <close_stdout@@Base+0x5e58>
   1c548:	movne	r4, #0
   1c54c:	moveq	r4, #1
   1c550:	cmp	r2, r7, lsl r5
   1c554:	movls	r4, #0
   1c558:	andhi	r4, r4, #1
   1c55c:	cmp	r4, #0
   1c560:	moveq	r3, r1
   1c564:	beq	1c22c <close_stdout@@Base+0x5b1c>
   1c568:	sub	r3, r1, #1
   1c56c:	mov	r4, #0
   1c570:	b	1c22c <close_stdout@@Base+0x5b1c>
   1c574:	mov	fp, r3
   1c578:	b	1c308 <close_stdout@@Base+0x5bf8>
   1c57c:	mov	r2, r1
   1c580:	b	1c530 <close_stdout@@Base+0x5e20>
   1c584:	mov	r8, r2
   1c588:	b	1c4d0 <close_stdout@@Base+0x5dc0>
   1c58c:	mov	r3, r2
   1c590:	b	1c3ec <close_stdout@@Base+0x5cdc>
   1c594:	cmp	r3, #0
   1c598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c59c:	mov	r6, r0
   1c5a0:	sub	sp, sp, #12
   1c5a4:	mov	r5, r1
   1c5a8:	mov	r7, r0
   1c5ac:	mov	r4, r2
   1c5b0:	mov	r8, r1
   1c5b4:	bne	1c694 <close_stdout@@Base+0x5f84>
   1c5b8:	cmp	r2, r1
   1c5bc:	bls	1c6d0 <close_stdout@@Base+0x5fc0>
   1c5c0:	clz	r3, r2
   1c5c4:	cmp	r3, #0
   1c5c8:	rsbne	r8, r3, #32
   1c5cc:	lslne	r4, r2, r3
   1c5d0:	lsrne	r8, r0, r8
   1c5d4:	lslne	r7, r0, r3
   1c5d8:	orrne	r8, r8, r1, lsl r3
   1c5dc:	lsr	r5, r4, #16
   1c5e0:	uxth	sl, r4
   1c5e4:	mov	r1, r5
   1c5e8:	mov	r0, r8
   1c5ec:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c5f0:	mov	r1, r5
   1c5f4:	mov	r9, r0
   1c5f8:	mov	r0, r8
   1c5fc:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c600:	mul	r0, sl, r9
   1c604:	lsr	r3, r7, #16
   1c608:	orr	r1, r3, r1, lsl #16
   1c60c:	cmp	r0, r1
   1c610:	bls	1c634 <close_stdout@@Base+0x5f24>
   1c614:	adds	r1, r1, r4
   1c618:	sub	r2, r9, #1
   1c61c:	bcs	1c630 <close_stdout@@Base+0x5f20>
   1c620:	cmp	r0, r1
   1c624:	subhi	r9, r9, #2
   1c628:	addhi	r1, r1, r4
   1c62c:	bhi	1c634 <close_stdout@@Base+0x5f24>
   1c630:	mov	r9, r2
   1c634:	rsb	r8, r0, r1
   1c638:	mov	r1, r5
   1c63c:	uxth	r7, r7
   1c640:	mov	r0, r8
   1c644:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c648:	mov	r1, r5
   1c64c:	mov	r6, r0
   1c650:	mov	r0, r8
   1c654:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c658:	mul	sl, sl, r6
   1c65c:	orr	r1, r7, r1, lsl #16
   1c660:	cmp	sl, r1
   1c664:	bls	1c680 <close_stdout@@Base+0x5f70>
   1c668:	adds	r4, r1, r4
   1c66c:	sub	r3, r6, #1
   1c670:	bcs	1c97c <close_stdout@@Base+0x626c>
   1c674:	cmp	sl, r4
   1c678:	subhi	r6, r6, #2
   1c67c:	bls	1c97c <close_stdout@@Base+0x626c>
   1c680:	orr	r0, r6, r9, lsl #16
   1c684:	mov	r6, #0
   1c688:	mov	r1, r6
   1c68c:	add	sp, sp, #12
   1c690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c694:	cmp	r3, r1
   1c698:	movhi	r6, #0
   1c69c:	movhi	r0, r6
   1c6a0:	bhi	1c688 <close_stdout@@Base+0x5f78>
   1c6a4:	clz	r7, r3
   1c6a8:	cmp	r7, #0
   1c6ac:	bne	1c7ac <close_stdout@@Base+0x609c>
   1c6b0:	cmp	r3, r1
   1c6b4:	cmpcs	r2, r6
   1c6b8:	movhi	r6, #0
   1c6bc:	movls	r6, #1
   1c6c0:	movls	r0, #1
   1c6c4:	movls	r6, r7
   1c6c8:	movhi	r0, r6
   1c6cc:	b	1c688 <close_stdout@@Base+0x5f78>
   1c6d0:	cmp	r2, #0
   1c6d4:	bne	1c6e8 <close_stdout@@Base+0x5fd8>
   1c6d8:	mov	r1, r2
   1c6dc:	mov	r0, #1
   1c6e0:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c6e4:	mov	r4, r0
   1c6e8:	clz	r3, r4
   1c6ec:	cmp	r3, #0
   1c6f0:	bne	1c8a8 <close_stdout@@Base+0x6198>
   1c6f4:	rsb	r5, r4, r5
   1c6f8:	lsr	r8, r4, #16
   1c6fc:	uxth	sl, r4
   1c700:	mov	r6, #1
   1c704:	mov	r1, r8
   1c708:	mov	r0, r5
   1c70c:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c710:	mov	r1, r8
   1c714:	mov	r9, r0
   1c718:	mov	r0, r5
   1c71c:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c720:	mul	r0, sl, r9
   1c724:	lsr	r3, r7, #16
   1c728:	orr	r1, r3, r1, lsl #16
   1c72c:	cmp	r0, r1
   1c730:	bls	1c750 <close_stdout@@Base+0x6040>
   1c734:	adds	r1, r1, r4
   1c738:	sub	r2, r9, #1
   1c73c:	bcs	1c984 <close_stdout@@Base+0x6274>
   1c740:	cmp	r0, r1
   1c744:	subhi	r9, r9, #2
   1c748:	addhi	r1, r1, r4
   1c74c:	bls	1c984 <close_stdout@@Base+0x6274>
   1c750:	rsb	fp, r0, r1
   1c754:	mov	r1, r8
   1c758:	uxth	r7, r7
   1c75c:	mov	r0, fp
   1c760:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c764:	mov	r1, r8
   1c768:	mov	r5, r0
   1c76c:	mov	r0, fp
   1c770:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c774:	mul	sl, sl, r5
   1c778:	orr	r1, r7, r1, lsl #16
   1c77c:	cmp	sl, r1
   1c780:	bls	1c79c <close_stdout@@Base+0x608c>
   1c784:	adds	r4, r1, r4
   1c788:	sub	r3, r5, #1
   1c78c:	bcs	1c98c <close_stdout@@Base+0x627c>
   1c790:	cmp	sl, r4
   1c794:	subhi	r5, r5, #2
   1c798:	bls	1c98c <close_stdout@@Base+0x627c>
   1c79c:	orr	r0, r5, r9, lsl #16
   1c7a0:	mov	r1, r6
   1c7a4:	add	sp, sp, #12
   1c7a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7ac:	rsb	r1, r7, #32
   1c7b0:	lsl	r0, r2, r7
   1c7b4:	lsr	r2, r2, r1
   1c7b8:	lsr	fp, r5, r1
   1c7bc:	orr	r8, r2, r3, lsl r7
   1c7c0:	lsr	r1, r6, r1
   1c7c4:	str	r0, [sp, #4]
   1c7c8:	orr	r5, r1, r5, lsl r7
   1c7cc:	lsr	r9, r8, #16
   1c7d0:	mov	r0, fp
   1c7d4:	uxth	sl, r8
   1c7d8:	mov	r1, r9
   1c7dc:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c7e0:	mov	r1, r9
   1c7e4:	mov	r4, r0
   1c7e8:	mov	r0, fp
   1c7ec:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c7f0:	mul	r0, sl, r4
   1c7f4:	lsr	ip, r5, #16
   1c7f8:	orr	r1, ip, r1, lsl #16
   1c7fc:	cmp	r0, r1
   1c800:	bls	1c814 <close_stdout@@Base+0x6104>
   1c804:	adds	r1, r1, r8
   1c808:	sub	r2, r4, #1
   1c80c:	bcc	1c9a8 <close_stdout@@Base+0x6298>
   1c810:	mov	r4, r2
   1c814:	rsb	ip, r0, r1
   1c818:	mov	r1, r9
   1c81c:	str	ip, [sp]
   1c820:	uxth	r5, r5
   1c824:	mov	r0, ip
   1c828:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c82c:	ldr	ip, [sp]
   1c830:	mov	r1, r9
   1c834:	mov	fp, r0
   1c838:	mov	r0, ip
   1c83c:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c840:	mul	sl, sl, fp
   1c844:	orr	r1, r5, r1, lsl #16
   1c848:	cmp	sl, r1
   1c84c:	bls	1c860 <close_stdout@@Base+0x6150>
   1c850:	adds	r1, r1, r8
   1c854:	sub	r2, fp, #1
   1c858:	bcc	1c994 <close_stdout@@Base+0x6284>
   1c85c:	mov	fp, r2
   1c860:	ldr	r3, [sp, #4]
   1c864:	orr	r0, fp, r4, lsl #16
   1c868:	rsb	sl, sl, r1
   1c86c:	umull	r4, r5, r0, r3
   1c870:	cmp	sl, r5
   1c874:	bcc	1c894 <close_stdout@@Base+0x6184>
   1c878:	movne	r3, #0
   1c87c:	moveq	r3, #1
   1c880:	cmp	r4, r6, lsl r7
   1c884:	movls	r6, #0
   1c888:	andhi	r6, r3, #1
   1c88c:	cmp	r6, #0
   1c890:	beq	1c688 <close_stdout@@Base+0x5f78>
   1c894:	mov	r6, #0
   1c898:	sub	r0, r0, #1
   1c89c:	mov	r1, r6
   1c8a0:	add	sp, sp, #12
   1c8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8a8:	lsl	r4, r4, r3
   1c8ac:	rsb	r9, r3, #32
   1c8b0:	lsr	r2, r5, r9
   1c8b4:	lsr	r9, r6, r9
   1c8b8:	lsr	r8, r4, #16
   1c8bc:	orr	r9, r9, r5, lsl r3
   1c8c0:	mov	r0, r2
   1c8c4:	lsl	r7, r6, r3
   1c8c8:	mov	r1, r8
   1c8cc:	str	r2, [sp]
   1c8d0:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c8d4:	ldr	r2, [sp]
   1c8d8:	mov	r1, r8
   1c8dc:	uxth	sl, r4
   1c8e0:	mov	fp, r0
   1c8e4:	mov	r0, r2
   1c8e8:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c8ec:	mul	r0, sl, fp
   1c8f0:	lsr	r3, r9, #16
   1c8f4:	orr	r1, r3, r1, lsl #16
   1c8f8:	cmp	r0, r1
   1c8fc:	bls	1c91c <close_stdout@@Base+0x620c>
   1c900:	adds	r1, r1, r4
   1c904:	sub	r3, fp, #1
   1c908:	bcs	1c9bc <close_stdout@@Base+0x62ac>
   1c90c:	cmp	r0, r1
   1c910:	subhi	fp, fp, #2
   1c914:	addhi	r1, r1, r4
   1c918:	bls	1c9bc <close_stdout@@Base+0x62ac>
   1c91c:	rsb	r5, r0, r1
   1c920:	mov	r1, r8
   1c924:	uxth	r9, r9
   1c928:	mov	r0, r5
   1c92c:	bl	1bbf8 <close_stdout@@Base+0x54e8>
   1c930:	mov	r1, r8
   1c934:	mov	r6, r0
   1c938:	mov	r0, r5
   1c93c:	bl	1bde4 <close_stdout@@Base+0x56d4>
   1c940:	mul	r5, sl, r6
   1c944:	orr	r1, r9, r1, lsl #16
   1c948:	cmp	r5, r1
   1c94c:	bls	1c970 <close_stdout@@Base+0x6260>
   1c950:	adds	r1, r1, r4
   1c954:	sub	r3, r6, #1
   1c958:	bcs	1c96c <close_stdout@@Base+0x625c>
   1c95c:	cmp	r5, r1
   1c960:	subhi	r6, r6, #2
   1c964:	addhi	r1, r1, r4
   1c968:	bhi	1c970 <close_stdout@@Base+0x6260>
   1c96c:	mov	r6, r3
   1c970:	rsb	r5, r5, r1
   1c974:	orr	r6, r6, fp, lsl #16
   1c978:	b	1c704 <close_stdout@@Base+0x5ff4>
   1c97c:	mov	r6, r3
   1c980:	b	1c680 <close_stdout@@Base+0x5f70>
   1c984:	mov	r9, r2
   1c988:	b	1c750 <close_stdout@@Base+0x6040>
   1c98c:	mov	r5, r3
   1c990:	b	1c79c <close_stdout@@Base+0x608c>
   1c994:	cmp	sl, r1
   1c998:	subhi	fp, fp, #2
   1c99c:	addhi	r1, r1, r8
   1c9a0:	bhi	1c860 <close_stdout@@Base+0x6150>
   1c9a4:	b	1c85c <close_stdout@@Base+0x614c>
   1c9a8:	cmp	r0, r1
   1c9ac:	subhi	r4, r4, #2
   1c9b0:	addhi	r1, r1, r8
   1c9b4:	bhi	1c814 <close_stdout@@Base+0x6104>
   1c9b8:	b	1c810 <close_stdout@@Base+0x6100>
   1c9bc:	mov	fp, r3
   1c9c0:	b	1c91c <close_stdout@@Base+0x620c>
   1c9c4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1c9c8:	mov	r7, r0
   1c9cc:	ldr	r6, [pc, #76]	; 1ca20 <close_stdout@@Base+0x6310>
   1c9d0:	mov	r8, r1
   1c9d4:	ldr	r5, [pc, #72]	; 1ca24 <close_stdout@@Base+0x6314>
   1c9d8:	mov	r9, r2
   1c9dc:	add	r6, pc, r6
   1c9e0:	bl	11284 <fdopen@plt-0x20>
   1c9e4:	add	r5, pc, r5
   1c9e8:	rsb	r6, r5, r6
   1c9ec:	asrs	r6, r6, #2
   1c9f0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1c9f4:	sub	r5, r5, #4
   1c9f8:	mov	r4, #0
   1c9fc:	add	r4, r4, #1
   1ca00:	ldr	r3, [r5, #4]!
   1ca04:	mov	r0, r7
   1ca08:	mov	r1, r8
   1ca0c:	mov	r2, r9
   1ca10:	blx	r3
   1ca14:	cmp	r4, r6
   1ca18:	bne	1c9fc <close_stdout@@Base+0x62ec>
   1ca1c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1ca20:	andeq	r2, r1, r8, asr #6
   1ca24:	andeq	r2, r1, ip, lsr r3
   1ca28:	bx	lr
   1ca2c:	ldr	r3, [pc, #28]	; 1ca50 <close_stdout@@Base+0x6340>
   1ca30:	mov	r1, #0
   1ca34:	ldr	r2, [pc, #24]	; 1ca54 <close_stdout@@Base+0x6344>
   1ca38:	add	r3, pc, r3
   1ca3c:	ldr	r3, [r3, r2]
   1ca40:	cmp	r3, #0
   1ca44:	ldrne	r2, [r3]
   1ca48:	moveq	r2, r3
   1ca4c:	b	11520 <__cxa_atexit@plt>
   1ca50:	andeq	r2, r1, r0, asr #11
   1ca54:	andeq	r0, r0, r0, asr r1

Disassembly of section .fini:

0001ca58 <.fini>:
   1ca58:	push	{r3, lr}
   1ca5c:	pop	{r3, pc}
