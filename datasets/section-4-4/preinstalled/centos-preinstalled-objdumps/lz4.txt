
centos-preinstalled/lz4:     file format elf32-littlearm


Disassembly of section .init:

00010ce8 <.init>:
   10ce8:	push	{r3, lr}
   10cec:	bl	12b90 <__assert_fail@plt+0x1c18>
   10cf0:	pop	{r3, pc}

Disassembly of section .plt:

00010cf4 <calloc@plt-0x14>:
   10cf4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cf8:	ldr	lr, [pc, #4]	; 10d04 <calloc@plt-0x4>
   10cfc:	add	lr, pc, lr
   10d00:	ldr	pc, [lr, #8]!
   10d04:	strdeq	r6, [r2], -ip

00010d08 <calloc@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #155648	; 0x26000
   10d10:	ldr	pc, [ip, #764]!	; 0x2fc

00010d14 <raise@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #155648	; 0x26000
   10d1c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d20 <strcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #155648	; 0x26000
   10d28:	ldr	pc, [ip, #748]!	; 0x2ec

00010d2c <fflush@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #155648	; 0x26000
   10d34:	ldr	pc, [ip, #740]!	; 0x2e4

00010d38 <memmove@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #155648	; 0x26000
   10d40:	ldr	pc, [ip, #732]!	; 0x2dc

00010d44 <free@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #155648	; 0x26000
   10d4c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d50 <nanosleep@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #155648	; 0x26000
   10d58:	ldr	pc, [ip, #716]!	; 0x2cc

00010d5c <ferror@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #155648	; 0x26000
   10d64:	ldr	pc, [ip, #708]!	; 0x2c4

00010d68 <clock_gettime@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #155648	; 0x26000
   10d70:	ldr	pc, [ip, #700]!	; 0x2bc

00010d74 <memcpy@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #155648	; 0x26000
   10d7c:	ldr	pc, [ip, #692]!	; 0x2b4

00010d80 <time@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #155648	; 0x26000
   10d88:	ldr	pc, [ip, #684]!	; 0x2ac

00010d8c <_IO_getc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #155648	; 0x26000
   10d94:	ldr	pc, [ip, #676]!	; 0x2a4

00010d98 <ftell@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #155648	; 0x26000
   10da0:	ldr	pc, [ip, #668]!	; 0x29c

00010da4 <sleep@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #155648	; 0x26000
   10dac:	ldr	pc, [ip, #660]!	; 0x294

00010db0 <__stack_chk_fail@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #155648	; 0x26000
   10db8:	ldr	pc, [ip, #652]!	; 0x28c

00010dbc <realloc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #155648	; 0x26000
   10dc4:	ldr	pc, [ip, #644]!	; 0x284

00010dc8 <perror@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #155648	; 0x26000
   10dd0:	ldr	pc, [ip, #636]!	; 0x27c

00010dd4 <fwrite@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #155648	; 0x26000
   10ddc:	ldr	pc, [ip, #628]!	; 0x274

00010de0 <strcat@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #155648	; 0x26000
   10de8:	ldr	pc, [ip, #620]!	; 0x26c

00010dec <strcpy@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #155648	; 0x26000
   10df4:	ldr	pc, [ip, #612]!	; 0x264

00010df8 <fread@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #155648	; 0x26000
   10e00:	ldr	pc, [ip, #604]!	; 0x25c

00010e04 <opendir@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #155648	; 0x26000
   10e0c:	ldr	pc, [ip, #596]!	; 0x254

00010e10 <setpriority@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #155648	; 0x26000
   10e18:	ldr	pc, [ip, #588]!	; 0x24c

00010e1c <malloc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #155648	; 0x26000
   10e24:	ldr	pc, [ip, #580]!	; 0x244

00010e28 <__libc_start_main@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #155648	; 0x26000
   10e30:	ldr	pc, [ip, #572]!	; 0x23c

00010e34 <strerror@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #155648	; 0x26000
   10e3c:	ldr	pc, [ip, #564]!	; 0x234

00010e40 <__gmon_start__@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #155648	; 0x26000
   10e48:	ldr	pc, [ip, #556]!	; 0x22c

00010e4c <clock@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #155648	; 0x26000
   10e54:	ldr	pc, [ip, #548]!	; 0x224

00010e58 <exit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #155648	; 0x26000
   10e60:	ldr	pc, [ip, #540]!	; 0x21c

00010e64 <strlen@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #155648	; 0x26000
   10e6c:	ldr	pc, [ip, #532]!	; 0x214

00010e70 <chown@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #155648	; 0x26000
   10e78:	ldr	pc, [ip, #524]!	; 0x20c

00010e7c <__errno_location@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #155648	; 0x26000
   10e84:	ldr	pc, [ip, #516]!	; 0x204

00010e88 <memset@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #155648	; 0x26000
   10e90:	ldr	pc, [ip, #508]!	; 0x1fc

00010e94 <strncpy@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #155648	; 0x26000
   10e9c:	ldr	pc, [ip, #500]!	; 0x1f4

00010ea0 <fileno@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #155648	; 0x26000
   10ea8:	ldr	pc, [ip, #492]!	; 0x1ec

00010eac <__fprintf_chk@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #155648	; 0x26000
   10eb4:	ldr	pc, [ip, #484]!	; 0x1e4

00010eb8 <fclose@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #155648	; 0x26000
   10ec0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ec4 <fseeko64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #155648	; 0x26000
   10ecc:	ldr	pc, [ip, #468]!	; 0x1d4

00010ed0 <__fread_chk@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #155648	; 0x26000
   10ed8:	ldr	pc, [ip, #460]!	; 0x1cc

00010edc <strrchr@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #155648	; 0x26000
   10ee4:	ldr	pc, [ip, #452]!	; 0x1c4

00010ee8 <utime@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #155648	; 0x26000
   10ef0:	ldr	pc, [ip, #444]!	; 0x1bc

00010ef4 <fputc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #155648	; 0x26000
   10efc:	ldr	pc, [ip, #436]!	; 0x1b4

00010f00 <readdir64@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #155648	; 0x26000
   10f08:	ldr	pc, [ip, #428]!	; 0x1ac

00010f0c <remove@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #155648	; 0x26000
   10f14:	ldr	pc, [ip, #420]!	; 0x1a4

00010f18 <fopen64@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #155648	; 0x26000
   10f20:	ldr	pc, [ip, #412]!	; 0x19c

00010f24 <chmod@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #155648	; 0x26000
   10f2c:	ldr	pc, [ip, #404]!	; 0x194

00010f30 <__xstat64@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #155648	; 0x26000
   10f38:	ldr	pc, [ip, #396]!	; 0x18c

00010f3c <isatty@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #155648	; 0x26000
   10f44:	ldr	pc, [ip, #388]!	; 0x184

00010f48 <strncmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #155648	; 0x26000
   10f50:	ldr	pc, [ip, #380]!	; 0x17c

00010f54 <abort@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #155648	; 0x26000
   10f5c:	ldr	pc, [ip, #372]!	; 0x174

00010f60 <closedir@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #155648	; 0x26000
   10f68:	ldr	pc, [ip, #364]!	; 0x16c

00010f6c <__snprintf_chk@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #155648	; 0x26000
   10f74:	ldr	pc, [ip, #356]!	; 0x164

00010f78 <__assert_fail@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #155648	; 0x26000
   10f80:	ldr	pc, [ip, #348]!	; 0x15c

Disassembly of section .text:

00010f88 <.text>:
   10f88:	movw	ip, #28936	; 0x7108
   10f8c:	movt	ip, #3
   10f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f94:	sub	sp, sp, #124	; 0x7c
   10f98:	ldr	r3, [ip]
   10f9c:	mov	r7, r1
   10fa0:	mov	r1, #4
   10fa4:	str	ip, [sp, #52]	; 0x34
   10fa8:	mov	r8, r0
   10fac:	movw	ip, #19100	; 0x4a9c
   10fb0:	str	r3, [sp, #116]	; 0x74
   10fb4:	movt	ip, #2
   10fb8:	str	ip, [sp, #48]	; 0x30
   10fbc:	bl	10d08 <calloc@plt>
   10fc0:	movw	r3, #21656	; 0x5498
   10fc4:	movt	r3, #2
   10fc8:	ldr	ip, [sp, #48]	; 0x30
   10fcc:	str	r0, [sp, #24]
   10fd0:	ldm	r3, {r0, r1}
   10fd4:	str	r0, [sp, #100]	; 0x64
   10fd8:	strb	r1, [sp, #104]	; 0x68
   10fdc:	ldm	ip, {r0, r1}
   10fe0:	str	r0, [sp, #108]	; 0x6c
   10fe4:	mov	r0, #7
   10fe8:	strb	r1, [sp, #112]	; 0x70
   10fec:	bl	223f8 <__assert_fail@plt+0x11480>
   10ff0:	ldr	ip, [r7]
   10ff4:	mov	r1, #47	; 0x2f
   10ff8:	str	ip, [sp, #32]
   10ffc:	str	r0, [sp, #80]	; 0x50
   11000:	mov	r0, ip
   11004:	bl	10edc <strrchr@plt>
   11008:	mov	r1, #92	; 0x5c
   1100c:	cmp	r0, #0
   11010:	addne	r0, r0, #1
   11014:	strne	r0, [sp, #32]
   11018:	ldr	r0, [sp, #32]
   1101c:	bl	10edc <strrchr@plt>
   11020:	ldr	ip, [sp, #24]
   11024:	cmp	r0, #0
   11028:	addne	r0, r0, #1
   1102c:	strne	r0, [sp, #32]
   11030:	cmp	ip, #0
   11034:	beq	11dfc <__assert_fail@plt+0xe84>
   11038:	ldr	ip, [sp, #24]
   1103c:	movw	r4, #18788	; 0x4964
   11040:	mov	r0, #0
   11044:	movt	r4, #2
   11048:	str	r4, [ip]
   1104c:	bl	223c0 <__assert_fail@plt+0x11448>
   11050:	ldr	r0, [sp, #32]
   11054:	movw	r1, #21136	; 0x5290
   11058:	movt	r1, #2
   1105c:	bl	1e81c <__assert_fail@plt+0xd8a4>
   11060:	cmp	r0, #0
   11064:	streq	r0, [sp, #20]
   11068:	streq	r0, [sp, #40]	; 0x28
   1106c:	streq	r0, [sp, #64]	; 0x40
   11070:	bne	11a78 <__assert_fail@plt+0xb00>
   11074:	movw	r1, #21144	; 0x5298
   11078:	ldr	r0, [sp, #32]
   1107c:	movt	r1, #2
   11080:	bl	1e81c <__assert_fail@plt+0xd8a4>
   11084:	ldr	ip, [sp, #40]	; 0x28
   11088:	movw	r1, #21152	; 0x52a0
   1108c:	movt	r1, #2
   11090:	cmp	r0, #0
   11094:	ldr	r0, [sp, #32]
   11098:	movne	ip, #2
   1109c:	str	ip, [sp, #40]	; 0x28
   110a0:	bl	1e81c <__assert_fail@plt+0xd8a4>
   110a4:	mov	ip, #0
   110a8:	str	ip, [sp, #36]	; 0x24
   110ac:	movw	ip, #55536	; 0xd8f0
   110b0:	cmp	r0, #0
   110b4:	movwne	fp, #28976	; 0x7130
   110b8:	movtne	fp, #3
   110bc:	movne	r3, #1
   110c0:	strne	r3, [fp]
   110c4:	cmp	r8, #1
   110c8:	ble	12824 <__assert_fail@plt+0x18ac>
   110cc:	mov	r5, #0
   110d0:	mov	ip, #1
   110d4:	movw	r1, #28940	; 0x710c
   110d8:	str	ip, [sp, #56]	; 0x38
   110dc:	movt	r1, #3
   110e0:	movw	ip, #55536	; 0xd8f0
   110e4:	str	r1, [sp, #44]	; 0x2c
   110e8:	movt	ip, #65535	; 0xffff
   110ec:	str	r5, [sp, #60]	; 0x3c
   110f0:	mov	sl, r5
   110f4:	str	ip, [sp, #68]	; 0x44
   110f8:	mov	r9, r5
   110fc:	movw	ip, #28912	; 0x70f0
   11100:	str	r5, [sp, #72]	; 0x48
   11104:	movt	ip, #3
   11108:	str	r5, [sp, #76]	; 0x4c
   1110c:	mov	r4, #1
   11110:	ldr	r6, [sp, #64]	; 0x40
   11114:	b	11134 <__assert_fail@plt+0x1bc>
   11118:	ldr	r1, [sp, #24]
   1111c:	mov	r6, #1
   11120:	str	fp, [r1, r5, lsl #2]
   11124:	add	r5, r5, r6
   11128:	add	r4, r4, #1
   1112c:	cmp	r8, r4
   11130:	ble	111b4 <__assert_fail@plt+0x23c>
   11134:	ldr	fp, [r7, r4, lsl #2]
   11138:	cmp	fp, #0
   1113c:	str	fp, [sp, #96]	; 0x60
   11140:	beq	11128 <__assert_fail@plt+0x1b0>
   11144:	cmp	r9, #0
   11148:	bne	11158 <__assert_fail@plt+0x1e0>
   1114c:	ldrb	r3, [fp]
   11150:	cmp	r3, #45	; 0x2d
   11154:	beq	11388 <__assert_fail@plt+0x410>
   11158:	cmp	r6, #0
   1115c:	bne	11118 <__assert_fail@plt+0x1a0>
   11160:	cmp	sl, #0
   11164:	moveq	sl, fp
   11168:	beq	11128 <__assert_fail@plt+0x1b0>
   1116c:	ldr	r2, [sp, #20]
   11170:	cmp	r2, #0
   11174:	beq	11420 <__assert_fail@plt+0x4a8>
   11178:	ldr	r3, [ip]
   1117c:	cmp	r3, #0
   11180:	beq	11128 <__assert_fail@plt+0x1b0>
   11184:	ldr	r1, [sp, #44]	; 0x2c
   11188:	mov	r3, fp
   1118c:	movw	r2, #23448	; 0x5b98
   11190:	add	r4, r4, #1
   11194:	movt	r2, #2
   11198:	ldr	r0, [r1]
   1119c:	mov	r1, #1
   111a0:	str	ip, [sp, #16]
   111a4:	bl	10eac <__fprintf_chk@plt>
   111a8:	cmp	r8, r4
   111ac:	ldr	ip, [sp, #16]
   111b0:	bgt	11134 <__assert_fail@plt+0x1bc>
   111b4:	movw	r9, #28912	; 0x70f0
   111b8:	movt	r9, #3
   111bc:	ldr	r3, [r9]
   111c0:	cmp	r3, #2
   111c4:	bhi	11bd4 <__assert_fail@plt+0xc5c>
   111c8:	ldr	r3, [r9]
   111cc:	movw	r4, #28912	; 0x70f0
   111d0:	movt	r4, #3
   111d4:	cmp	r3, #3
   111d8:	bhi	11b38 <__assert_fail@plt+0xbc0>
   111dc:	ldr	ip, [sp, #40]	; 0x28
   111e0:	subs	r3, ip, #4
   111e4:	rsbs	ip, r3, #0
   111e8:	adcs	ip, ip, r3
   111ec:	str	ip, [sp, #28]
   111f0:	ldr	ip, [sp, #40]	; 0x28
   111f4:	cmp	ip, #4
   111f8:	cmpne	ip, #1
   111fc:	bne	1120c <__assert_fail@plt+0x294>
   11200:	ldr	r3, [r9]
   11204:	cmp	r3, #3
   11208:	bhi	11c94 <__assert_fail@plt+0xd1c>
   1120c:	cmp	r6, #0
   11210:	moveq	fp, r6
   11214:	moveq	r8, r6
   11218:	bne	11574 <__assert_fail@plt+0x5fc>
   1121c:	ldr	ip, [sp, #28]
   11220:	cmp	ip, #0
   11224:	bne	11dd0 <__assert_fail@plt+0xe58>
   11228:	ldr	ip, [sp, #40]	; 0x28
   1122c:	cmp	ip, #3
   11230:	beq	11e24 <__assert_fail@plt+0xeac>
   11234:	ldr	ip, [sp, #60]	; 0x3c
   11238:	cmp	ip, #0
   1123c:	beq	11260 <__assert_fail@plt+0x2e8>
   11240:	movw	r1, #18788	; 0x4964
   11244:	mov	r0, ip
   11248:	movt	r1, #2
   1124c:	bl	10d20 <strcmp@plt>
   11250:	cmp	r0, #0
   11254:	beq	118c4 <__assert_fail@plt+0x94c>
   11258:	ldr	r0, [sp, #60]	; 0x3c
   1125c:	bl	2239c <__assert_fail@plt+0x11424>
   11260:	cmp	sl, #0
   11264:	beq	11910 <__assert_fail@plt+0x998>
   11268:	movw	r1, #18788	; 0x4964
   1126c:	mov	r0, sl
   11270:	movt	r1, #2
   11274:	bl	10d20 <strcmp@plt>
   11278:	cmp	r0, #0
   1127c:	beq	11918 <__assert_fail@plt+0x9a0>
   11280:	ldr	ip, [sp, #20]
   11284:	eor	r3, r6, #1
   11288:	rsbs	r4, ip, #1
   1128c:	movcc	r4, #0
   11290:	tst	r3, r4
   11294:	beq	11db4 <__assert_fail@plt+0xe3c>
   11298:	movw	r3, #28952	; 0x7118
   1129c:	movt	r3, #3
   112a0:	ldr	r0, [r3]
   112a4:	bl	10ea0 <fileno@plt>
   112a8:	bl	10f3c <isatty@plt>
   112ac:	cmp	r0, #0
   112b0:	beq	11cbc <__assert_fail@plt+0xd44>
   112b4:	ldr	ip, [sp, #40]	; 0x28
   112b8:	cmp	ip, #0
   112bc:	bne	11f44 <__assert_fail@plt+0xfcc>
   112c0:	mov	r0, sl
   112c4:	bl	10e64 <strlen@plt>
   112c8:	movw	r1, #19100	; 0x4a9c
   112cc:	movt	r1, #2
   112d0:	cmp	r0, #4
   112d4:	subhi	r0, r0, #4
   112d8:	ldrls	r0, [sp, #40]	; 0x28
   112dc:	add	r0, sl, r0
   112e0:	bl	10d20 <strcmp@plt>
   112e4:	cmp	r0, #0
   112e8:	bne	1268c <__assert_fail@plt+0x1714>
   112ec:	mov	r0, sl
   112f0:	bl	10e64 <strlen@plt>
   112f4:	add	r2, r0, #1
   112f8:	mov	r7, r0
   112fc:	mov	r0, #1
   11300:	str	r2, [sp, #16]
   11304:	mov	r1, r2
   11308:	bl	10d08 <calloc@plt>
   1130c:	ldr	r2, [sp, #16]
   11310:	subs	r4, r0, #0
   11314:	beq	129a8 <__assert_fail@plt+0x1a30>
   11318:	mov	r1, sl
   1131c:	bl	10d74 <memcpy@plt>
   11320:	cmp	r7, #4
   11324:	movls	r3, r7
   11328:	bls	11360 <__assert_fail@plt+0x3e8>
   1132c:	add	r2, sp, #113	; 0x71
   11330:	mov	r3, r7
   11334:	sub	r1, r7, #4
   11338:	mov	lr, #0
   1133c:	b	11358 <__assert_fail@plt+0x3e0>
   11340:	ldrb	ip, [sl, r3]
   11344:	ldrb	r0, [r2, #-1]!
   11348:	cmp	ip, r0
   1134c:	bne	11360 <__assert_fail@plt+0x3e8>
   11350:	strb	lr, [r4, r3]
   11354:	sub	r3, r3, #1
   11358:	cmp	r3, r1
   1135c:	bcs	11340 <__assert_fail@plt+0x3c8>
   11360:	sub	r7, r7, #5
   11364:	cmp	r7, r3
   11368:	ldr	r3, [r9]
   1136c:	bne	126ec <__assert_fail@plt+0x1774>
   11370:	cmp	r3, #1
   11374:	bhi	12870 <__assert_fail@plt+0x18f8>
   11378:	mov	ip, #2
   1137c:	str	r4, [sp, #20]
   11380:	str	ip, [sp, #40]	; 0x28
   11384:	b	1195c <__assert_fail@plt+0x9e4>
   11388:	ldrb	r3, [fp, #1]
   1138c:	cmp	r3, #0
   11390:	bne	113ac <__assert_fail@plt+0x434>
   11394:	cmp	sl, #0
   11398:	movweq	sl, #18788	; 0x4964
   1139c:	movteq	sl, #2
   113a0:	ldrne	r2, [pc, #3060]	; 11f9c <__assert_fail@plt+0x1024>
   113a4:	strne	r2, [sp, #20]
   113a8:	b	11128 <__assert_fail@plt+0x1b0>
   113ac:	cmp	r3, #45	; 0x2d
   113b0:	beq	11560 <__assert_fail@plt+0x5e8>
   113b4:	mov	r3, fp
   113b8:	mov	fp, ip
   113bc:	movw	r1, #28976	; 0x7130
   113c0:	movt	r1, #3
   113c4:	str	r1, [sp, #28]
   113c8:	ldr	ip, [sp, #28]
   113cc:	add	r2, r3, #1
   113d0:	str	r2, [sp, #96]	; 0x60
   113d4:	ldr	r1, [ip]
   113d8:	cmp	r1, #0
   113dc:	beq	1145c <__assert_fail@plt+0x4e4>
   113e0:	ldrb	r1, [r3, #1]
   113e4:	cmp	r1, #99	; 0x63
   113e8:	beq	1167c <__assert_fail@plt+0x704>
   113ec:	cmp	r1, #104	; 0x68
   113f0:	bne	11448 <__assert_fail@plt+0x4d0>
   113f4:	ldrb	r1, [r3, #2]
   113f8:	cmp	r1, #99	; 0x63
   113fc:	bne	1145c <__assert_fail@plt+0x4e4>
   11400:	ldrb	r1, [r3, #3]
   11404:	cmp	r1, #0
   11408:	bne	1145c <__assert_fail@plt+0x4e4>
   1140c:	add	r3, r3, #2
   11410:	mov	ip, #12
   11414:	str	r3, [sp, #96]	; 0x60
   11418:	str	ip, [sp, #56]	; 0x38
   1141c:	b	11b24 <__assert_fail@plt+0xbac>
   11420:	mov	r0, fp
   11424:	add	r1, sp, #100	; 0x64
   11428:	str	ip, [sp, #16]
   1142c:	bl	10d20 <strcmp@plt>
   11430:	ldr	r3, [pc, #2912]	; 11f98 <__assert_fail@plt+0x1020>
   11434:	ldr	ip, [sp, #16]
   11438:	cmp	r0, #0
   1143c:	moveq	fp, r3
   11440:	str	fp, [sp, #20]
   11444:	b	11128 <__assert_fail@plt+0x1b0>
   11448:	cmp	r1, #121	; 0x79
   1144c:	bne	1145c <__assert_fail@plt+0x4e4>
   11450:	ldrb	r1, [r3, #2]
   11454:	cmp	r1, #0
   11458:	beq	11f6c <__assert_fail@plt+0xff4>
   1145c:	ldrb	r1, [r3, #1]
   11460:	sub	r0, r1, #48	; 0x30
   11464:	cmp	r0, #9
   11468:	bls	11b0c <__assert_fail@plt+0xb94>
   1146c:	sub	r1, r1, #66	; 0x42
   11470:	cmp	r1, #56	; 0x38
   11474:	ldrls	pc, [pc, r1, lsl #2]
   11478:	b	12714 <__assert_fail@plt+0x179c>
   1147c:	andeq	r2, r1, ip, lsr #9
   11480:	andeq	r2, r1, r4, lsl r7
   11484:	andeq	r2, r1, ip, ror #8
   11488:	andeq	r2, r1, r4, lsl r7
   1148c:	andeq	r2, r1, r4, lsl r7
   11490:	andeq	r2, r1, r4, lsl r7
   11494:	andeq	r1, r1, r0, lsr #31
   11498:	andeq	r2, r1, r4, lsl r7
   1149c:	andeq	r2, r1, r4, lsl r7
   114a0:	andeq	r2, r1, r4, lsl r7
   114a4:	andeq	r2, r1, r4, lsl r7
   114a8:	andeq	r2, r1, r4, lsl r7
   114ac:	andeq	r2, r1, r4, lsl r7
   114b0:	andeq	r2, r1, r4, lsl r7
   114b4:	andeq	r2, r1, r4, lsl r7
   114b8:	andeq	r2, r1, r4, lsl r7
   114bc:	andeq	r2, r1, r4, lsl r7
   114c0:	andeq	r2, r1, r8, asr #12
   114c4:	andeq	r2, r1, r4, lsl r7
   114c8:	andeq	r2, r1, r4, lsl r7
   114cc:	andeq	r2, r1, r0, lsl #12
   114d0:	andeq	r2, r1, r4, lsl r7
   114d4:	andeq	r2, r1, r4, lsl r7
   114d8:	andeq	r2, r1, r4, lsl r7
   114dc:	andeq	r2, r1, r4, lsl r7
   114e0:	andeq	r2, r1, r4, lsl r7
   114e4:	andeq	r2, r1, r4, lsl r7
   114e8:	andeq	r2, r1, r4, lsl r7
   114ec:	andeq	r2, r1, r4, lsl r7
   114f0:	andeq	r2, r1, r4, lsl r7
   114f4:	andeq	r2, r1, r4, lsl r7
   114f8:	andeq	r2, r1, r4, lsl r7
   114fc:	andeq	r2, r1, ip, ror #11
   11500:	andeq	r2, r1, r0, lsl r5
   11504:	andeq	r2, r1, ip, asr #10
   11508:	andeq	r2, r1, r8, lsr #10
   1150c:	andeq	r1, r1, ip, ror #30
   11510:	andeq	r2, r1, r4, lsl r7
   11514:	andeq	r1, r1, ip, ror pc
   11518:	andeq	r2, r1, ip, lsr #11
   1151c:	andeq	r2, r1, r4, lsl r7
   11520:	andeq	r2, r1, ip, ror r6
   11524:	andeq	r2, r1, r8, asr r6
   11528:	andeq	r2, r1, r0, ror r6
   1152c:	andeq	r2, r1, r4, lsl r7
   11530:	andeq	r2, r1, r4, lsl r7
   11534:	muleq	r1, ip, r5
   11538:	andeq	r2, r1, r0, lsl #11
   1153c:	andeq	r2, r1, ip, ror #10
   11540:	andeq	r2, r1, r4, lsl r7
   11544:	andeq	r2, r1, ip, asr r5
   11548:	andeq	r2, r1, r4, lsl r7
   1154c:	strdeq	r2, [r1], -ip
   11550:	andeq	r2, r1, r4, lsl r7
   11554:	andeq	r2, r1, r4, lsl r7
   11558:	andeq	r2, r1, r4, lsl r7
   1155c:	andeq	r2, r1, ip, ror #9
   11560:	ldrb	r3, [fp, #2]
   11564:	cmp	r3, #0
   11568:	bne	116b0 <__assert_fail@plt+0x738>
   1156c:	mov	r9, #1
   11570:	b	11128 <__assert_fail@plt+0x1b0>
   11574:	ldr	ip, [sp, #36]	; 0x24
   11578:	cmp	ip, #0
   1157c:	ldr	ip, [sp, #24]
   11580:	ldreq	fp, [sp, #36]	; 0x24
   11584:	ldr	sl, [ip]
   11588:	moveq	r8, fp
   1158c:	beq	1121c <__assert_fail@plt+0x2a4>
   11590:	mov	r0, #8192	; 0x2000
   11594:	bl	10e1c <malloc@plt>
   11598:	cmp	r0, #0
   1159c:	str	r0, [sp, #92]	; 0x5c
   115a0:	add	r0, r0, #8192	; 0x2000
   115a4:	str	r0, [sp, #96]	; 0x60
   115a8:	beq	11670 <__assert_fail@plt+0x6f8>
   115ac:	cmp	r5, #0
   115b0:	mov	r3, #0
   115b4:	str	r3, [sp, #88]	; 0x58
   115b8:	beq	128a0 <__assert_fail@plt+0x1928>
   115bc:	str	r3, [sp, #36]	; 0x24
   115c0:	mov	r7, r3
   115c4:	ldr	r4, [sp, #24]
   115c8:	mov	fp, r3
   115cc:	str	r6, [sp, #44]	; 0x2c
   115d0:	str	r9, [sp, #80]	; 0x50
   115d4:	b	11634 <__assert_fail@plt+0x6bc>
   115d8:	ldr	r9, [r4, #-4]
   115dc:	mov	r0, r9
   115e0:	bl	10e64 <strlen@plt>
   115e4:	ldr	r3, [sp, #88]	; 0x58
   115e8:	ldr	r8, [sp, #92]	; 0x5c
   115ec:	ldr	r2, [sp, #96]	; 0x60
   115f0:	mov	r6, r0
   115f4:	add	r0, r0, r3
   115f8:	add	r0, r8, r0
   115fc:	cmp	r2, r0
   11600:	bls	11d30 <__assert_fail@plt+0xdb8>
   11604:	add	r0, r8, r3
   11608:	mov	r1, r9
   1160c:	rsb	r2, r0, r2
   11610:	add	fp, fp, #1
   11614:	bl	10e94 <strncpy@plt>
   11618:	ldr	r3, [sp, #88]	; 0x58
   1161c:	add	r3, r3, #1
   11620:	add	ip, r3, r6
   11624:	str	ip, [sp, #88]	; 0x58
   11628:	add	r7, r7, #1
   1162c:	cmp	r7, r5
   11630:	beq	11e4c <__assert_fail@plt+0xed4>
   11634:	ldr	r0, [r4], #4
   11638:	bl	1e878 <__assert_fail@plt+0xd900>
   1163c:	cmp	r0, #0
   11640:	beq	115d8 <__assert_fail@plt+0x660>
   11644:	add	r3, sp, #96	; 0x60
   11648:	ldr	r0, [r4, #-4]
   1164c:	add	r1, sp, #92	; 0x5c
   11650:	add	r2, sp, #88	; 0x58
   11654:	bl	1edd8 <__assert_fail@plt+0xde60>
   11658:	ldr	r3, [sp, #92]	; 0x5c
   1165c:	cmp	r3, #0
   11660:	add	fp, fp, r0
   11664:	bne	11628 <__assert_fail@plt+0x6b0>
   11668:	ldr	r6, [sp, #44]	; 0x2c
   1166c:	ldr	r9, [sp, #80]	; 0x50
   11670:	mov	fp, #0
   11674:	mov	r8, fp
   11678:	b	1121c <__assert_fail@plt+0x2a4>
   1167c:	ldrb	r1, [r3, #2]
   11680:	cmp	r1, #48	; 0x30
   11684:	beq	11c6c <__assert_fail@plt+0xcf4>
   11688:	cmp	r1, #49	; 0x31
   1168c:	bne	12948 <__assert_fail@plt+0x19d0>
   11690:	ldrb	r1, [r3, #3]
   11694:	cmp	r1, #0
   11698:	bne	1145c <__assert_fail@plt+0x4e4>
   1169c:	add	r3, r3, #2
   116a0:	mov	ip, #9
   116a4:	str	r3, [sp, #96]	; 0x60
   116a8:	str	ip, [sp, #56]	; 0x38
   116ac:	b	11b24 <__assert_fail@plt+0xbac>
   116b0:	movw	r1, #21160	; 0x52a8
   116b4:	mov	r0, fp
   116b8:	movt	r1, #2
   116bc:	str	ip, [sp, #16]
   116c0:	bl	10d20 <strcmp@plt>
   116c4:	ldr	ip, [sp, #16]
   116c8:	cmp	r0, #0
   116cc:	beq	11c88 <__assert_fail@plt+0xd10>
   116d0:	movw	r1, #21172	; 0x52b4
   116d4:	mov	r0, fp
   116d8:	movt	r1, #2
   116dc:	bl	10d20 <strcmp@plt>
   116e0:	ldr	ip, [sp, #16]
   116e4:	cmp	r0, #0
   116e8:	beq	11e40 <__assert_fail@plt+0xec8>
   116ec:	movw	r1, #21188	; 0x52c4
   116f0:	mov	r0, fp
   116f4:	movt	r1, #2
   116f8:	bl	10d20 <strcmp@plt>
   116fc:	ldr	ip, [sp, #16]
   11700:	cmp	r0, #0
   11704:	beq	11f60 <__assert_fail@plt+0xfe8>
   11708:	movw	r1, #21204	; 0x52d4
   1170c:	mov	r0, fp
   11710:	movt	r1, #2
   11714:	bl	10d20 <strcmp@plt>
   11718:	ldr	ip, [sp, #16]
   1171c:	cmp	r0, #0
   11720:	beq	12850 <__assert_fail@plt+0x18d8>
   11724:	movw	r1, #21216	; 0x52e0
   11728:	mov	r0, fp
   1172c:	movt	r1, #2
   11730:	bl	10d20 <strcmp@plt>
   11734:	ldr	ip, [sp, #16]
   11738:	cmp	r0, #0
   1173c:	beq	12864 <__assert_fail@plt+0x18ec>
   11740:	movw	r1, #21224	; 0x52e8
   11744:	mov	r0, fp
   11748:	movt	r1, #2
   1174c:	bl	10d20 <strcmp@plt>
   11750:	ldr	ip, [sp, #16]
   11754:	cmp	r0, #0
   11758:	beq	12910 <__assert_fail@plt+0x1998>
   1175c:	movw	r1, #21232	; 0x52f0
   11760:	mov	r0, fp
   11764:	movt	r1, #2
   11768:	str	ip, [sp, #16]
   1176c:	bl	10d20 <strcmp@plt>
   11770:	ldr	ip, [sp, #16]
   11774:	cmp	r0, #0
   11778:	beq	12904 <__assert_fail@plt+0x198c>
   1177c:	movw	r1, #21244	; 0x52fc
   11780:	mov	r0, fp
   11784:	movt	r1, #2
   11788:	str	ip, [sp, #16]
   1178c:	bl	10d20 <strcmp@plt>
   11790:	ldr	ip, [sp, #16]
   11794:	cmp	r0, #0
   11798:	beq	12934 <__assert_fail@plt+0x19bc>
   1179c:	movw	r1, #21256	; 0x5308
   117a0:	mov	r0, fp
   117a4:	movt	r1, #2
   117a8:	bl	10d20 <strcmp@plt>
   117ac:	ldr	ip, [sp, #16]
   117b0:	cmp	r0, #0
   117b4:	beq	12920 <__assert_fail@plt+0x19a8>
   117b8:	movw	r1, #21268	; 0x5314
   117bc:	mov	r0, fp
   117c0:	movt	r1, #2
   117c4:	bl	10d20 <strcmp@plt>
   117c8:	ldr	ip, [sp, #16]
   117cc:	cmp	r0, #0
   117d0:	beq	12960 <__assert_fail@plt+0x19e8>
   117d4:	movw	r1, #21280	; 0x5320
   117d8:	mov	r0, fp
   117dc:	movt	r1, #2
   117e0:	str	ip, [sp, #16]
   117e4:	bl	10d20 <strcmp@plt>
   117e8:	ldr	ip, [sp, #16]
   117ec:	cmp	r0, #0
   117f0:	beq	12954 <__assert_fail@plt+0x19dc>
   117f4:	movw	r1, #21296	; 0x5330
   117f8:	mov	r0, fp
   117fc:	movt	r1, #2
   11800:	str	ip, [sp, #16]
   11804:	bl	10d20 <strcmp@plt>
   11808:	ldr	ip, [sp, #16]
   1180c:	cmp	r0, #0
   11810:	beq	12998 <__assert_fail@plt+0x1a20>
   11814:	movw	r1, #21312	; 0x5340
   11818:	mov	r0, fp
   1181c:	movt	r1, #2
   11820:	str	ip, [sp, #16]
   11824:	bl	10d20 <strcmp@plt>
   11828:	ldr	ip, [sp, #16]
   1182c:	cmp	r0, #0
   11830:	beq	1298c <__assert_fail@plt+0x1a14>
   11834:	movw	r1, #21332	; 0x5354
   11838:	mov	r0, fp
   1183c:	movt	r1, #2
   11840:	str	ip, [sp, #16]
   11844:	bl	10d20 <strcmp@plt>
   11848:	ldr	ip, [sp, #16]
   1184c:	cmp	r0, #0
   11850:	beq	1297c <__assert_fail@plt+0x1a04>
   11854:	movw	r1, #24344	; 0x5f18
   11858:	mov	r0, fp
   1185c:	movt	r1, #2
   11860:	str	ip, [sp, #16]
   11864:	bl	10d20 <strcmp@plt>
   11868:	ldr	ip, [sp, #16]
   1186c:	cmp	r0, #0
   11870:	beq	12970 <__assert_fail@plt+0x19f8>
   11874:	movw	r1, #21344	; 0x5360
   11878:	mov	r0, fp
   1187c:	movt	r1, #2
   11880:	str	ip, [sp, #16]
   11884:	bl	10d20 <strcmp@plt>
   11888:	ldr	ip, [sp, #16]
   1188c:	cmp	r0, #0
   11890:	beq	129e8 <__assert_fail@plt+0x1a70>
   11894:	movw	r1, #21364	; 0x5374
   11898:	mov	r0, fp
   1189c:	movt	r1, #2
   118a0:	str	ip, [sp, #16]
   118a4:	bl	10d20 <strcmp@plt>
   118a8:	ldr	ip, [sp, #16]
   118ac:	cmp	r0, #0
   118b0:	bne	129b4 <__assert_fail@plt+0x1a3c>
   118b4:	ldr	r3, [ip]
   118b8:	add	r3, r3, #1
   118bc:	str	r3, [ip]
   118c0:	b	11128 <__assert_fail@plt+0x1b0>
   118c4:	movw	r3, #28944	; 0x7110
   118c8:	movt	r3, #3
   118cc:	ldr	r0, [r3]
   118d0:	bl	10ea0 <fileno@plt>
   118d4:	bl	10f3c <isatty@plt>
   118d8:	cmp	r0, #0
   118dc:	beq	11258 <__assert_fail@plt+0x2e0>
   118e0:	ldr	r3, [r9]
   118e4:	cmp	r3, #0
   118e8:	beq	11d04 <__assert_fail@plt+0xd8c>
   118ec:	movw	r3, #28940	; 0x710c
   118f0:	movt	r3, #3
   118f4:	movw	r0, #23660	; 0x5c6c
   118f8:	mov	r1, #1
   118fc:	ldr	r3, [r3]
   11900:	mov	r2, #32
   11904:	movt	r0, #2
   11908:	bl	10dd4 <fwrite@plt>
   1190c:	b	11d04 <__assert_fail@plt+0xd8c>
   11910:	movw	sl, #18788	; 0x4964
   11914:	movt	sl, #2
   11918:	movw	r3, #28944	; 0x7110
   1191c:	movt	r3, #3
   11920:	ldr	r0, [r3]
   11924:	bl	10ea0 <fileno@plt>
   11928:	bl	10f3c <isatty@plt>
   1192c:	cmp	r0, #0
   11930:	bne	118e0 <__assert_fail@plt+0x968>
   11934:	movw	r1, #18788	; 0x4964
   11938:	mov	r0, sl
   1193c:	movt	r1, #2
   11940:	bl	10d20 <strcmp@plt>
   11944:	cmp	r0, #0
   11948:	bne	11280 <__assert_fail@plt+0x308>
   1194c:	ldr	ip, [sp, #20]
   11950:	cmp	ip, #0
   11954:	movne	r4, r0
   11958:	beq	11c1c <__assert_fail@plt+0xca4>
   1195c:	ldr	r0, [sp, #20]
   11960:	ldr	r1, [pc, #1588]	; 11f9c <__assert_fail@plt+0x1024>
   11964:	bl	10d20 <strcmp@plt>
   11968:	cmp	r0, #0
   1196c:	ldreq	r7, [sp, #20]
   11970:	streq	r4, [sp, #20]
   11974:	beq	11c20 <__assert_fail@plt+0xca8>
   11978:	ldr	r7, [sp, #20]
   1197c:	str	r4, [sp, #20]
   11980:	cmp	r6, #0
   11984:	beq	119a0 <__assert_fail@plt+0xa28>
   11988:	ldr	r2, [r9]
   1198c:	movw	r3, #28912	; 0x70f0
   11990:	movt	r3, #3
   11994:	cmp	r2, #2
   11998:	moveq	r2, #1
   1199c:	streq	r2, [r3]
   119a0:	ldr	r0, [r9]
   119a4:	bl	22480 <__assert_fail@plt+0x11508>
   119a8:	cmp	r5, #0
   119ac:	ldr	ip, [sp, #40]	; 0x28
   119b0:	bne	119e0 <__assert_fail@plt+0xa68>
   119b4:	cmp	ip, #2
   119b8:	beq	11f30 <__assert_fail@plt+0xfb8>
   119bc:	ldr	ip, [sp, #76]	; 0x4c
   119c0:	cmp	ip, #0
   119c4:	bne	119f4 <__assert_fail@plt+0xa7c>
   119c8:	mov	r0, sl
   119cc:	mov	r1, r7
   119d0:	ldr	r2, [sp, #56]	; 0x38
   119d4:	bl	22c00 <__assert_fail@plt+0x11c88>
   119d8:	mov	sl, r0
   119dc:	b	11a14 <__assert_fail@plt+0xa9c>
   119e0:	cmp	ip, #2
   119e4:	beq	11d78 <__assert_fail@plt+0xe00>
   119e8:	ldr	ip, [sp, #76]	; 0x4c
   119ec:	cmp	ip, #0
   119f0:	beq	11ae4 <__assert_fail@plt+0xb6c>
   119f4:	ldr	r3, [r9]
   119f8:	cmp	r3, #2
   119fc:	bhi	11d0c <__assert_fail@plt+0xd94>
   11a00:	mov	r0, sl
   11a04:	mov	r1, r7
   11a08:	ldr	r2, [sp, #56]	; 0x38
   11a0c:	mov	sl, #0
   11a10:	bl	224f8 <__assert_fail@plt+0x11580>
   11a14:	ldr	ip, [sp, #72]	; 0x48
   11a18:	cmp	ip, #0
   11a1c:	bne	11ab0 <__assert_fail@plt+0xb38>
   11a20:	ldr	r0, [sp, #20]
   11a24:	bl	10d44 <free@plt>
   11a28:	cmp	r8, #0
   11a2c:	beq	11a50 <__assert_fail@plt+0xad8>
   11a30:	cmp	fp, #0
   11a34:	beq	11a40 <__assert_fail@plt+0xac8>
   11a38:	mov	r0, fp
   11a3c:	bl	10d44 <free@plt>
   11a40:	mov	r0, r8
   11a44:	mov	ip, #0
   11a48:	str	ip, [sp, #24]
   11a4c:	bl	10d44 <free@plt>
   11a50:	ldr	r0, [sp, #24]
   11a54:	bl	10d44 <free@plt>
   11a58:	mov	r0, sl
   11a5c:	ldr	ip, [sp, #52]	; 0x34
   11a60:	ldr	r2, [sp, #116]	; 0x74
   11a64:	ldr	r3, [ip]
   11a68:	cmp	r2, r3
   11a6c:	bne	12b24 <__assert_fail@plt+0x1bac>
   11a70:	add	sp, sp, #124	; 0x7c
   11a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a78:	mov	r0, #1
   11a7c:	add	r4, r4, #8
   11a80:	str	r4, [sp, #20]
   11a84:	bl	223c0 <__assert_fail@plt+0x11448>
   11a88:	mov	r0, #0
   11a8c:	bl	224e0 <__assert_fail@plt+0x11568>
   11a90:	movw	r3, #28912	; 0x70f0
   11a94:	movt	r3, #3
   11a98:	mov	r2, #1
   11a9c:	mov	ip, #2
   11aa0:	str	r2, [sp, #64]	; 0x40
   11aa4:	str	ip, [sp, #40]	; 0x28
   11aa8:	str	r2, [r3]
   11aac:	b	11074 <__assert_fail@plt+0xfc>
   11ab0:	movw	r3, #28940	; 0x710c
   11ab4:	movt	r3, #3
   11ab8:	mov	r1, #1
   11abc:	mov	r2, #27
   11ac0:	ldr	r3, [r3]
   11ac4:	movw	r0, #23884	; 0x5d4c
   11ac8:	movt	r0, #2
   11acc:	bl	10dd4 <fwrite@plt>
   11ad0:	movw	r3, #28944	; 0x7110
   11ad4:	movt	r3, #3
   11ad8:	ldr	r0, [r3]
   11adc:	bl	10d8c <_IO_getc@plt>
   11ae0:	b	11a20 <__assert_fail@plt+0xaa8>
   11ae4:	cmp	r6, #0
   11ae8:	beq	119c8 <__assert_fail@plt+0xa50>
   11aec:	mov	r1, r5
   11af0:	ldr	r3, [sp, #56]	; 0x38
   11af4:	movw	r2, #19100	; 0x4a9c
   11af8:	ldr	r0, [sp, #24]
   11afc:	movt	r2, #2
   11b00:	bl	22d70 <__assert_fail@plt+0x11df8>
   11b04:	mov	sl, r0
   11b08:	b	11a14 <__assert_fail@plt+0xa9c>
   11b0c:	add	r0, sp, #96	; 0x60
   11b10:	bl	1e778 <__assert_fail@plt+0xd800>
   11b14:	ldr	r3, [sp, #96]	; 0x60
   11b18:	sub	r3, r3, #1
   11b1c:	str	r3, [sp, #96]	; 0x60
   11b20:	str	r0, [sp, #56]	; 0x38
   11b24:	ldrb	r2, [r3, #1]
   11b28:	cmp	r2, #0
   11b2c:	bne	113c8 <__assert_fail@plt+0x450>
   11b30:	mov	ip, fp
   11b34:	b	11128 <__assert_fail@plt+0x1b0>
   11b38:	movw	r7, #28940	; 0x710c
   11b3c:	movt	r7, #3
   11b40:	movw	r2, #23520	; 0x5be0
   11b44:	mov	r3, #3504	; 0xdb0
   11b48:	ldr	r0, [r7]
   11b4c:	movt	r3, #3
   11b50:	movt	r2, #2
   11b54:	mov	r1, #1
   11b58:	bl	10eac <__fprintf_chk@plt>
   11b5c:	ldr	r3, [r4]
   11b60:	cmp	r3, #3
   11b64:	bls	111dc <__assert_fail@plt+0x264>
   11b68:	movw	r2, #23560	; 0x5c08
   11b6c:	mov	r3, #3504	; 0xdb0
   11b70:	movt	r2, #2
   11b74:	movt	r3, #3
   11b78:	ldr	r0, [r7]
   11b7c:	mov	r1, #1
   11b80:	bl	10eac <__fprintf_chk@plt>
   11b84:	ldr	r3, [r4]
   11b88:	cmp	r3, #3
   11b8c:	bls	111dc <__assert_fail@plt+0x264>
   11b90:	movw	r2, #23552	; 0x5c00
   11b94:	mov	r3, #3504	; 0xdb0
   11b98:	movt	r2, #2
   11b9c:	movt	r3, #3
   11ba0:	ldr	r0, [r7]
   11ba4:	mov	r1, #1
   11ba8:	bl	10eac <__fprintf_chk@plt>
   11bac:	ldr	r3, [r4]
   11bb0:	cmp	r3, #3
   11bb4:	bls	111dc <__assert_fail@plt+0x264>
   11bb8:	ldr	r0, [r7]
   11bbc:	movw	r2, #23592	; 0x5c28
   11bc0:	mov	r1, #1
   11bc4:	movt	r2, #2
   11bc8:	mov	r3, #64	; 0x40
   11bcc:	bl	10eac <__fprintf_chk@plt>
   11bd0:	b	111dc <__assert_fail@plt+0x264>
   11bd4:	movw	r3, #28940	; 0x710c
   11bd8:	movt	r3, #3
   11bdc:	ldr	r4, [r3]
   11be0:	bl	14254 <__assert_fail@plt+0x32dc>
   11be4:	mov	r2, #32
   11be8:	movw	r3, #19444	; 0x4bf4
   11bec:	str	r2, [sp]
   11bf0:	movt	r3, #2
   11bf4:	movw	r2, #19384	; 0x4bb8
   11bf8:	str	r3, [sp, #8]
   11bfc:	movt	r2, #2
   11c00:	movw	r3, #19416	; 0x4bd8
   11c04:	mov	r1, #1
   11c08:	movt	r3, #2
   11c0c:	str	r0, [sp, #4]
   11c10:	mov	r0, r4
   11c14:	bl	10eac <__fprintf_chk@plt>
   11c18:	b	111c8 <__assert_fail@plt+0x250>
   11c1c:	ldr	r7, [pc, #888]	; 11f9c <__assert_fail@plt+0x1024>
   11c20:	movw	r3, #28952	; 0x7118
   11c24:	movt	r3, #3
   11c28:	ldr	r0, [r3]
   11c2c:	bl	10ea0 <fileno@plt>
   11c30:	bl	10f3c <isatty@plt>
   11c34:	cmp	r0, #0
   11c38:	bne	11ccc <__assert_fail@plt+0xd54>
   11c3c:	mov	r0, r7
   11c40:	ldr	r1, [pc, #852]	; 11f9c <__assert_fail@plt+0x1024>
   11c44:	bl	10d20 <strcmp@plt>
   11c48:	cmp	r0, #0
   11c4c:	bne	11980 <__assert_fail@plt+0xa08>
   11c50:	ldr	r2, [r9]
   11c54:	movw	r3, #28912	; 0x70f0
   11c58:	movt	r3, #3
   11c5c:	cmp	r2, #2
   11c60:	moveq	r2, #1
   11c64:	streq	r2, [r3]
   11c68:	b	11980 <__assert_fail@plt+0xa08>
   11c6c:	ldrb	r1, [r3, #3]
   11c70:	cmp	r1, #0
   11c74:	bne	1145c <__assert_fail@plt+0x4e4>
   11c78:	add	r3, r3, #2
   11c7c:	str	r1, [sp, #56]	; 0x38
   11c80:	str	r3, [sp, #96]	; 0x60
   11c84:	b	11b24 <__assert_fail@plt+0xbac>
   11c88:	mov	r3, #1
   11c8c:	str	r3, [sp, #40]	; 0x28
   11c90:	b	11128 <__assert_fail@plt+0x1b0>
   11c94:	ldr	ip, [sp, #80]	; 0x50
   11c98:	movw	r1, #28940	; 0x710c
   11c9c:	movt	r1, #3
   11ca0:	movw	r2, #23628	; 0x5c4c
   11ca4:	movt	r2, #2
   11ca8:	lsr	r3, ip, #10
   11cac:	ldr	r0, [r1]
   11cb0:	mov	r1, #1
   11cb4:	bl	10eac <__fprintf_chk@plt>
   11cb8:	b	1120c <__assert_fail@plt+0x294>
   11cbc:	ldr	ip, [pc, #728]	; 11f9c <__assert_fail@plt+0x1024>
   11cc0:	mov	r4, r0
   11cc4:	str	ip, [sp, #20]
   11cc8:	b	1195c <__assert_fail@plt+0x9e4>
   11ccc:	ldr	ip, [sp, #64]	; 0x40
   11cd0:	cmp	ip, #0
   11cd4:	bne	11c3c <__assert_fail@plt+0xcc4>
   11cd8:	ldr	r3, [r9]
   11cdc:	cmp	r3, #0
   11ce0:	beq	11d04 <__assert_fail@plt+0xd8c>
   11ce4:	movw	r3, #28940	; 0x710c
   11ce8:	movt	r3, #3
   11cec:	movw	r0, #23792	; 0x5cf0
   11cf0:	mov	r1, #1
   11cf4:	ldr	r3, [r3]
   11cf8:	movt	r0, #2
   11cfc:	mov	r2, #40	; 0x28
   11d00:	bl	10dd4 <fwrite@plt>
   11d04:	mov	r0, #1
   11d08:	bl	10e58 <exit@plt>
   11d0c:	movw	r3, #28940	; 0x710c
   11d10:	movt	r3, #3
   11d14:	movw	r0, #23836	; 0x5d1c
   11d18:	mov	r1, #1
   11d1c:	ldr	r3, [r3]
   11d20:	mov	r2, #47	; 0x2f
   11d24:	movt	r0, #2
   11d28:	bl	10dd4 <fwrite@plt>
   11d2c:	b	11a00 <__assert_fail@plt+0xa88>
   11d30:	rsb	r2, r8, r2
   11d34:	mov	r0, r8
   11d38:	add	r9, r2, #8192	; 0x2000
   11d3c:	mov	r1, r9
   11d40:	bl	10dbc <realloc@plt>
   11d44:	cmp	r0, #0
   11d48:	beq	128dc <__assert_fail@plt+0x1964>
   11d4c:	ldr	r3, [sp, #88]	; 0x58
   11d50:	add	r2, r0, r9
   11d54:	str	r0, [sp, #92]	; 0x5c
   11d58:	add	r1, r6, r3
   11d5c:	str	r2, [sp, #96]	; 0x60
   11d60:	add	r1, r0, r1
   11d64:	cmp	r2, r1
   11d68:	bls	11628 <__assert_fail@plt+0x6b0>
   11d6c:	ldr	r9, [r4, #-4]
   11d70:	mov	r8, r0
   11d74:	b	11604 <__assert_fail@plt+0x68c>
   11d78:	cmp	r6, #0
   11d7c:	beq	11f30 <__assert_fail@plt+0xfb8>
   11d80:	ldr	r1, [pc, #532]	; 11f9c <__assert_fail@plt+0x1024>
   11d84:	mov	r0, r7
   11d88:	bl	10d20 <strcmp@plt>
   11d8c:	movw	r3, #19100	; 0x4a9c
   11d90:	movt	r3, #2
   11d94:	ldr	r2, [pc, #512]	; 11f9c <__assert_fail@plt+0x1024>
   11d98:	mov	r1, r5
   11d9c:	cmp	r0, #0
   11da0:	ldr	r0, [sp, #24]
   11da4:	movne	r2, r3
   11da8:	bl	22f90 <__assert_fail@plt+0x12018>
   11dac:	mov	sl, r0
   11db0:	b	11a14 <__assert_fail@plt+0xa9c>
   11db4:	cmp	r4, #0
   11db8:	beq	1195c <__assert_fail@plt+0x9e4>
   11dbc:	movw	ip, #21084	; 0x525c
   11dc0:	mov	r4, #0
   11dc4:	movt	ip, #2
   11dc8:	str	ip, [sp, #20]
   11dcc:	b	11978 <__assert_fail@plt+0xa00>
   11dd0:	ldr	r0, [r9]
   11dd4:	mov	ip, #0
   11dd8:	str	ip, [sp, #20]
   11ddc:	bl	1dee0 <__assert_fail@plt+0xcf68>
   11de0:	ldr	r0, [sp, #24]
   11de4:	mov	r1, r5
   11de8:	ldr	r2, [sp, #56]	; 0x38
   11dec:	ldr	r3, [sp, #68]	; 0x44
   11df0:	bl	1e018 <__assert_fail@plt+0xd0a0>
   11df4:	mov	sl, r0
   11df8:	b	11a14 <__assert_fail@plt+0xa9c>
   11dfc:	movw	r3, #28940	; 0x710c
   11e00:	movt	r3, #3
   11e04:	movw	r0, #21096	; 0x5268
   11e08:	mov	r1, #1
   11e0c:	ldr	r3, [r3]
   11e10:	movt	r0, #2
   11e14:	mov	r2, #38	; 0x26
   11e18:	bl	10dd4 <fwrite@plt>
   11e1c:	mov	r0, #1
   11e20:	b	11a5c <__assert_fail@plt+0xae4>
   11e24:	ldr	ip, [pc, #364]	; 11f98 <__assert_fail@plt+0x1020>
   11e28:	mov	r0, #1
   11e2c:	str	ip, [sp, #20]
   11e30:	bl	223dc <__assert_fail@plt+0x11464>
   11e34:	mov	ip, #2
   11e38:	str	ip, [sp, #40]	; 0x28
   11e3c:	b	11234 <__assert_fail@plt+0x2bc>
   11e40:	mov	r1, #2
   11e44:	str	r1, [sp, #40]	; 0x28
   11e48:	b	11128 <__assert_fail@plt+0x1b0>
   11e4c:	cmp	fp, #0
   11e50:	ldr	r6, [sp, #44]	; 0x2c
   11e54:	str	fp, [sp, #36]	; 0x24
   11e58:	ldr	r9, [sp, #80]	; 0x50
   11e5c:	beq	128a0 <__assert_fail@plt+0x1928>
   11e60:	add	r4, fp, #1
   11e64:	lsl	r4, r4, #2
   11e68:	mov	r0, r4
   11e6c:	bl	10e1c <malloc@plt>
   11e70:	subs	r8, r0, #0
   11e74:	beq	128a0 <__assert_fail@plt+0x1928>
   11e78:	sub	r4, r4, #4
   11e7c:	ldr	fp, [sp, #92]	; 0x5c
   11e80:	add	r2, r4, r8
   11e84:	mov	r3, #0
   11e88:	str	r5, [sp, #44]	; 0x2c
   11e8c:	mov	r7, r3
   11e90:	mov	r5, r8
   11e94:	mov	r4, r2
   11e98:	str	r3, [sp, #88]	; 0x58
   11e9c:	add	r0, fp, r7
   11ea0:	str	r0, [r5], #4
   11ea4:	bl	10e64 <strlen@plt>
   11ea8:	cmp	r5, r4
   11eac:	add	r7, r7, #1
   11eb0:	add	r7, r7, r0
   11eb4:	str	r7, [sp, #88]	; 0x58
   11eb8:	bne	11e9c <__assert_fail@plt+0xf24>
   11ebc:	ldr	r3, [sp, #96]	; 0x60
   11ec0:	add	r7, fp, r7
   11ec4:	ldr	r5, [sp, #44]	; 0x2c
   11ec8:	cmp	r3, r7
   11ecc:	bcc	128f0 <__assert_fail@plt+0x1978>
   11ed0:	movw	r4, #28940	; 0x710c
   11ed4:	mov	r5, #0
   11ed8:	movt	r4, #3
   11edc:	ldr	r7, [sp, #36]	; 0x24
   11ee0:	b	11ef0 <__assert_fail@plt+0xf78>
   11ee4:	add	r5, r5, #1
   11ee8:	cmp	r5, r7
   11eec:	beq	11f20 <__assert_fail@plt+0xfa8>
   11ef0:	ldr	r3, [r9]
   11ef4:	cmp	r3, #3
   11ef8:	bls	11ee4 <__assert_fail@plt+0xf6c>
   11efc:	ldr	ip, [r8, r5, lsl #2]
   11f00:	movw	r2, #23652	; 0x5c64
   11f04:	ldr	r0, [r4]
   11f08:	movt	r2, #2
   11f0c:	mov	r1, #1
   11f10:	mov	r3, r5
   11f14:	str	ip, [sp]
   11f18:	bl	10eac <__fprintf_chk@plt>
   11f1c:	b	11ee4 <__assert_fail@plt+0xf6c>
   11f20:	ldr	r0, [sp, #24]
   11f24:	bl	10d44 <free@plt>
   11f28:	str	r8, [sp, #24]
   11f2c:	b	1121c <__assert_fail@plt+0x2a4>
   11f30:	mov	r0, sl
   11f34:	mov	r1, r7
   11f38:	bl	22ed8 <__assert_fail@plt+0x11f60>
   11f3c:	mov	sl, r0
   11f40:	b	11a14 <__assert_fail@plt+0xa9c>
   11f44:	ldr	ip, [sp, #40]	; 0x28
   11f48:	cmp	ip, #1
   11f4c:	beq	1268c <__assert_fail@plt+0x1714>
   11f50:	ldr	ip, [sp, #40]	; 0x28
   11f54:	cmp	ip, #2
   11f58:	bne	11dbc <__assert_fail@plt+0xe44>
   11f5c:	b	112ec <__assert_fail@plt+0x374>
   11f60:	mov	r2, #2
   11f64:	str	r2, [sp, #40]	; 0x28
   11f68:	b	11128 <__assert_fail@plt+0x1b0>
   11f6c:	mov	r0, #1
   11f70:	bl	223c0 <__assert_fail@plt+0x11448>
   11f74:	ldr	r3, [sp, #96]	; 0x60
   11f78:	b	11b24 <__assert_fail@plt+0xbac>
   11f7c:	ldr	r0, [sp, #32]
   11f80:	bl	1ea58 <__assert_fail@plt+0xdae0>
   11f84:	mov	fp, #0
   11f88:	str	fp, [sp, #20]
   11f8c:	mov	r8, fp
   11f90:	mov	sl, fp
   11f94:	b	11a14 <__assert_fail@plt+0xa9c>
   11f98:	andeq	r4, r2, r4, ror r9
   11f9c:	andeq	r4, r2, ip, ror #18
   11fa0:	movw	r4, #28940	; 0x710c
   11fa4:	movt	r4, #3
   11fa8:	ldr	r0, [sp, #32]
   11fac:	ldr	fp, [sp, #28]
   11fb0:	bl	1ea58 <__assert_fail@plt+0xdae0>
   11fb4:	ldr	r1, [r4]
   11fb8:	mov	r0, #10
   11fbc:	bl	10ef4 <fputc@plt>
   11fc0:	ldr	r3, [r4]
   11fc4:	mov	r1, #1
   11fc8:	mov	r2, #29
   11fcc:	movw	r0, #21428	; 0x53b4
   11fd0:	movt	r0, #2
   11fd4:	bl	10dd4 <fwrite@plt>
   11fd8:	ldr	r3, [r4]
   11fdc:	mov	r1, #1
   11fe0:	mov	r2, #29
   11fe4:	movw	r0, #21460	; 0x53d4
   11fe8:	movt	r0, #2
   11fec:	bl	10dd4 <fwrite@plt>
   11ff0:	ldr	r3, [r4]
   11ff4:	mov	r2, #29
   11ff8:	mov	r1, #1
   11ffc:	movw	r0, #21428	; 0x53b4
   12000:	movt	r0, #2
   12004:	bl	10dd4 <fwrite@plt>
   12008:	ldr	r1, [r4]
   1200c:	mov	r0, #10
   12010:	bl	10ef4 <fputc@plt>
   12014:	ldr	r3, [r4]
   12018:	mov	r1, #1
   1201c:	mov	r2, #34	; 0x22
   12020:	movw	r0, #21492	; 0x53f4
   12024:	movt	r0, #2
   12028:	bl	10dd4 <fwrite@plt>
   1202c:	ldr	r3, [r4]
   12030:	mov	r1, #1
   12034:	mov	r2, #34	; 0x22
   12038:	movw	r0, #22900	; 0x5974
   1203c:	movt	r0, #2
   12040:	bl	10dd4 <fwrite@plt>
   12044:	ldr	r3, [r4]
   12048:	mov	r1, #1
   1204c:	mov	r2, #23
   12050:	movw	r0, #21528	; 0x5418
   12054:	movt	r0, #2
   12058:	bl	10dd4 <fwrite@plt>
   1205c:	mov	r1, #1
   12060:	ldr	r3, [pc, #-204]	; 11f9c <__assert_fail@plt+0x1024>
   12064:	movw	r2, #21552	; 0x5430
   12068:	ldr	r0, [r4]
   1206c:	movt	r2, #2
   12070:	bl	10eac <__fprintf_chk@plt>
   12074:	mov	r1, #1
   12078:	ldr	r0, [r4]
   1207c:	movw	r2, #21608	; 0x5468
   12080:	movw	r3, #21656	; 0x5498
   12084:	movt	r2, #2
   12088:	movt	r3, #2
   1208c:	bl	10eac <__fprintf_chk@plt>
   12090:	ldr	r3, [r4]
   12094:	mov	r1, #1
   12098:	mov	r2, #76	; 0x4c
   1209c:	movw	r0, #21664	; 0x54a0
   120a0:	movt	r0, #2
   120a4:	bl	10dd4 <fwrite@plt>
   120a8:	ldr	r3, [r4]
   120ac:	mov	r1, #1
   120b0:	mov	r2, #66	; 0x42
   120b4:	movw	r0, #21744	; 0x54f0
   120b8:	movt	r0, #2
   120bc:	bl	10dd4 <fwrite@plt>
   120c0:	ldr	r3, [r4]
   120c4:	mov	r1, #1
   120c8:	mov	r2, #36	; 0x24
   120cc:	movw	r0, #21812	; 0x5534
   120d0:	movt	r0, #2
   120d4:	bl	10dd4 <fwrite@plt>
   120d8:	mov	r1, #1
   120dc:	ldr	r0, [r4]
   120e0:	movw	r2, #21852	; 0x555c
   120e4:	movw	r3, #19100	; 0x4a9c
   120e8:	movt	r2, #2
   120ec:	movt	r3, #2
   120f0:	bl	10eac <__fprintf_chk@plt>
   120f4:	mov	r1, #1
   120f8:	ldr	r0, [r4]
   120fc:	movw	r2, #21912	; 0x5598
   12100:	movw	r3, #19100	; 0x4a9c
   12104:	movt	r2, #2
   12108:	movt	r3, #2
   1210c:	bl	10eac <__fprintf_chk@plt>
   12110:	mov	r1, #1
   12114:	ldr	r0, [r4]
   12118:	movw	r2, #21984	; 0x55e0
   1211c:	movw	r3, #19100	; 0x4a9c
   12120:	movt	r2, #2
   12124:	movt	r3, #2
   12128:	bl	10eac <__fprintf_chk@plt>
   1212c:	ldr	r1, [r4]
   12130:	mov	r0, #10
   12134:	bl	10ef4 <fputc@plt>
   12138:	ldr	r3, [r4]
   1213c:	mov	r1, #1
   12140:	mov	r2, #22
   12144:	movw	r0, #22056	; 0x5628
   12148:	movt	r0, #2
   1214c:	bl	10dd4 <fwrite@plt>
   12150:	ldr	r3, [r4]
   12154:	mov	r1, #1
   12158:	mov	r2, #22
   1215c:	movw	r0, #22912	; 0x5980
   12160:	movt	r0, #2
   12164:	bl	10dd4 <fwrite@plt>
   12168:	ldr	r3, [r4]
   1216c:	mov	r1, #1
   12170:	mov	r2, #47	; 0x2f
   12174:	movw	r0, #22080	; 0x5640
   12178:	movt	r0, #2
   1217c:	bl	10dd4 <fwrite@plt>
   12180:	mov	r3, #12
   12184:	mov	r1, #1
   12188:	ldr	r0, [r4]
   1218c:	movw	r2, #22128	; 0x5670
   12190:	movt	r2, #2
   12194:	bl	10eac <__fprintf_chk@plt>
   12198:	ldr	r1, [r4]
   1219c:	mov	r0, #10
   121a0:	bl	10ef4 <fputc@plt>
   121a4:	ldr	r3, [r4]
   121a8:	mov	r1, #1
   121ac:	mov	r2, #33	; 0x21
   121b0:	movw	r0, #22208	; 0x56c0
   121b4:	movt	r0, #2
   121b8:	bl	10dd4 <fwrite@plt>
   121bc:	ldr	r3, [r4]
   121c0:	mov	r1, #1
   121c4:	mov	r2, #33	; 0x21
   121c8:	movw	r0, #22244	; 0x56e4
   121cc:	movt	r0, #2
   121d0:	bl	10dd4 <fwrite@plt>
   121d4:	ldr	r3, [r4]
   121d8:	mov	r1, #1
   121dc:	mov	r2, #67	; 0x43
   121e0:	movw	r0, #22280	; 0x5708
   121e4:	movt	r0, #2
   121e8:	bl	10dd4 <fwrite@plt>
   121ec:	mov	r1, #1
   121f0:	ldr	r3, [sp, #32]
   121f4:	movw	r2, #22348	; 0x574c
   121f8:	ldr	r0, [r4]
   121fc:	movt	r2, #2
   12200:	bl	10eac <__fprintf_chk@plt>
   12204:	ldr	r3, [r4]
   12208:	mov	r2, #65	; 0x41
   1220c:	mov	r1, #1
   12210:	movw	r0, #22408	; 0x5788
   12214:	movt	r0, #2
   12218:	bl	10dd4 <fwrite@plt>
   1221c:	ldr	r1, [r4]
   12220:	mov	r0, #10
   12224:	bl	10ef4 <fputc@plt>
   12228:	ldr	r3, [r4]
   1222c:	mov	r1, #1
   12230:	mov	r2, #17
   12234:	movw	r0, #22476	; 0x57cc
   12238:	movt	r0, #2
   1223c:	bl	10dd4 <fwrite@plt>
   12240:	ldr	r3, [r4]
   12244:	mov	r1, #1
   12248:	mov	r2, #17
   1224c:	movw	r0, #22260	; 0x56f4
   12250:	movt	r0, #2
   12254:	bl	10dd4 <fwrite@plt>
   12258:	ldr	r3, [r4]
   1225c:	mov	r1, #1
   12260:	mov	r2, #71	; 0x47
   12264:	movw	r0, #22496	; 0x57e0
   12268:	movt	r0, #2
   1226c:	bl	10dd4 <fwrite@plt>
   12270:	ldr	r3, [sp, #32]
   12274:	mov	r1, #1
   12278:	ldr	r0, [r4]
   1227c:	movw	r2, #22568	; 0x5828
   12280:	movt	r2, #2
   12284:	bl	10eac <__fprintf_chk@plt>
   12288:	ldr	r1, [r4]
   1228c:	mov	r0, #10
   12290:	bl	10ef4 <fputc@plt>
   12294:	ldr	r3, [r4]
   12298:	mov	r1, #1
   1229c:	mov	r2, #49	; 0x31
   122a0:	movw	r0, #22592	; 0x5840
   122a4:	movt	r0, #2
   122a8:	bl	10dd4 <fwrite@plt>
   122ac:	ldr	r3, [r4]
   122b0:	mov	r1, #1
   122b4:	mov	r2, #35	; 0x23
   122b8:	movw	r0, #22644	; 0x5874
   122bc:	movt	r0, #2
   122c0:	bl	10dd4 <fwrite@plt>
   122c4:	ldr	r3, [r4]
   122c8:	mov	r1, #1
   122cc:	mov	r2, #77	; 0x4d
   122d0:	movw	r0, #22680	; 0x5898
   122d4:	movt	r0, #2
   122d8:	bl	10dd4 <fwrite@plt>
   122dc:	mov	r1, #1
   122e0:	ldr	r3, [sp, #32]
   122e4:	movw	r2, #22760	; 0x58e8
   122e8:	ldr	r0, [r4]
   122ec:	movt	r2, #2
   122f0:	bl	10eac <__fprintf_chk@plt>
   122f4:	ldr	r3, [r4]
   122f8:	mov	r1, #1
   122fc:	mov	r2, #23
   12300:	movw	r0, #22792	; 0x5908
   12304:	movt	r0, #2
   12308:	bl	10dd4 <fwrite@plt>
   1230c:	ldr	r3, [sp, #32]
   12310:	mov	r1, #1
   12314:	ldr	r0, [r4]
   12318:	movw	r2, #22816	; 0x5920
   1231c:	movt	r2, #2
   12320:	bl	10eac <__fprintf_chk@plt>
   12324:	ldr	r1, [r4]
   12328:	mov	r0, #10
   1232c:	bl	10ef4 <fputc@plt>
   12330:	mov	r1, #1
   12334:	ldr	r3, [sp, #32]
   12338:	movw	r2, #22844	; 0x593c
   1233c:	ldr	r0, [r4]
   12340:	movt	r2, #2
   12344:	bl	10eac <__fprintf_chk@plt>
   12348:	ldr	r3, [r4]
   1234c:	mov	r1, #1
   12350:	mov	r2, #38	; 0x26
   12354:	movw	r0, #22896	; 0x5970
   12358:	movt	r0, #2
   1235c:	bl	10dd4 <fwrite@plt>
   12360:	ldr	r3, [r4]
   12364:	mov	r1, #1
   12368:	mov	r2, #69	; 0x45
   1236c:	movw	r0, #22936	; 0x5998
   12370:	movt	r0, #2
   12374:	bl	10dd4 <fwrite@plt>
   12378:	ldr	r3, [sp, #32]
   1237c:	ldr	r0, [r4]
   12380:	movw	r2, #23008	; 0x59e0
   12384:	mov	r1, #1
   12388:	movt	r2, #2
   1238c:	bl	10eac <__fprintf_chk@plt>
   12390:	ldr	r3, [fp]
   12394:	cmp	r3, #0
   12398:	beq	11f84 <__assert_fail@plt+0x100c>
   1239c:	ldr	r1, [r4]
   123a0:	mov	r0, #10
   123a4:	bl	10ef4 <fputc@plt>
   123a8:	ldr	r3, [r4]
   123ac:	mov	r1, #1
   123b0:	mov	r2, #22
   123b4:	movw	r0, #23048	; 0x5a08
   123b8:	movt	r0, #2
   123bc:	bl	10dd4 <fwrite@plt>
   123c0:	ldr	r3, [r4]
   123c4:	mov	r1, #1
   123c8:	mov	r2, #47	; 0x2f
   123cc:	movw	r0, #23072	; 0x5a20
   123d0:	movt	r0, #2
   123d4:	bl	10dd4 <fwrite@plt>
   123d8:	ldr	r3, [r4]
   123dc:	mov	r1, #1
   123e0:	mov	r2, #35	; 0x23
   123e4:	movw	r0, #23120	; 0x5a50
   123e8:	movt	r0, #2
   123ec:	bl	10dd4 <fwrite@plt>
   123f0:	ldr	r3, [sp, #32]
   123f4:	ldr	r0, [r4]
   123f8:	mov	r1, #1
   123fc:	movw	r2, #23156	; 0x5a74
   12400:	movt	r2, #2
   12404:	bl	10eac <__fprintf_chk@plt>
   12408:	ldr	r3, [r4]
   1240c:	mov	r1, #1
   12410:	mov	r2, #52	; 0x34
   12414:	movw	r0, #23184	; 0x5a90
   12418:	movt	r0, #2
   1241c:	bl	10dd4 <fwrite@plt>
   12420:	ldr	r3, [r4]
   12424:	mov	r1, #1
   12428:	mov	r2, #27
   1242c:	movw	r0, #23240	; 0x5ac8
   12430:	movt	r0, #2
   12434:	bl	10dd4 <fwrite@plt>
   12438:	ldr	r3, [sp, #32]
   1243c:	ldr	r0, [r4]
   12440:	mov	r1, #1
   12444:	movw	r2, #23268	; 0x5ae4
   12448:	movt	r2, #2
   1244c:	bl	10eac <__fprintf_chk@plt>
   12450:	ldr	r3, [r4]
   12454:	movw	r0, #23300	; 0x5b04
   12458:	mov	r1, #1
   1245c:	mov	r2, #36	; 0x24
   12460:	movt	r0, #2
   12464:	bl	10dd4 <fwrite@plt>
   12468:	b	11f84 <__assert_fail@plt+0x100c>
   1246c:	ldrb	r1, [r3, #2]
   12470:	cmp	r1, #0
   12474:	bne	12858 <__assert_fail@plt+0x18e0>
   12478:	add	r4, r4, #1
   1247c:	cmp	r4, r8
   12480:	beq	12714 <__assert_fail@plt+0x179c>
   12484:	ldr	ip, [r7, r4, lsl #2]
   12488:	str	ip, [sp, #60]	; 0x3c
   1248c:	mov	r0, r2
   12490:	str	r2, [sp, #16]
   12494:	bl	10e64 <strlen@plt>
   12498:	ldr	r2, [sp, #16]
   1249c:	sub	r0, r0, #1
   124a0:	add	r3, r2, r0
   124a4:	str	r3, [sp, #96]	; 0x60
   124a8:	b	11b24 <__assert_fail@plt+0xbac>
   124ac:	add	ip, sp, #120	; 0x78
   124b0:	ldr	r3, [ip, #-24]!	; 0xffffffe8
   124b4:	str	ip, [sp, #84]	; 0x54
   124b8:	ldrb	r2, [r3, #1]
   124bc:	cmp	r2, #0
   124c0:	beq	11b30 <__assert_fail@plt+0xbb8>
   124c4:	cmp	r2, #68	; 0x44
   124c8:	beq	127a4 <__assert_fail@plt+0x182c>
   124cc:	cmp	r2, #88	; 0x58
   124d0:	bne	1271c <__assert_fail@plt+0x17a4>
   124d4:	mov	r0, #1
   124d8:	bl	22448 <__assert_fail@plt+0x114d0>
   124dc:	ldr	r3, [sp, #96]	; 0x60
   124e0:	add	r3, r3, #1
   124e4:	str	r3, [sp, #96]	; 0x60
   124e8:	b	124b8 <__assert_fail@plt+0x1540>
   124ec:	mov	ip, #1
   124f0:	ldr	r3, [sp, #96]	; 0x60
   124f4:	str	ip, [sp, #40]	; 0x28
   124f8:	b	11b24 <__assert_fail@plt+0xbac>
   124fc:	ldr	r2, [fp]
   12500:	ldr	r3, [sp, #96]	; 0x60
   12504:	add	r2, r2, #1
   12508:	str	r2, [fp]
   1250c:	b	11b24 <__assert_fail@plt+0xbac>
   12510:	ldr	ip, [pc, #-1404]	; 11f9c <__assert_fail@plt+0x1024>
   12514:	ldr	r3, [sp, #96]	; 0x60
   12518:	str	ip, [sp, #20]
   1251c:	mov	ip, #1
   12520:	str	ip, [sp, #64]	; 0x40
   12524:	b	11b24 <__assert_fail@plt+0xbac>
   12528:	add	r0, sp, #120	; 0x78
   1252c:	add	r3, r3, #2
   12530:	str	r3, [r0, #-24]!	; 0xffffffe8
   12534:	bl	1e778 <__assert_fail@plt+0xd800>
   12538:	ldr	r3, [sp, #96]	; 0x60
   1253c:	sub	r3, r3, #1
   12540:	str	r3, [sp, #96]	; 0x60
   12544:	str	r0, [sp, #68]	; 0x44
   12548:	b	11b24 <__assert_fail@plt+0xbac>
   1254c:	mov	ip, #2
   12550:	ldr	r3, [sp, #96]	; 0x60
   12554:	str	ip, [sp, #40]	; 0x28
   12558:	b	11b24 <__assert_fail@plt+0xbac>
   1255c:	mov	ip, #3
   12560:	ldr	r3, [sp, #96]	; 0x60
   12564:	str	ip, [sp, #40]	; 0x28
   12568:	b	11b24 <__assert_fail@plt+0xbac>
   1256c:	mov	ip, #1
   12570:	ldr	r3, [sp, #96]	; 0x60
   12574:	str	ip, [sp, #36]	; 0x24
   12578:	mov	r6, ip
   1257c:	b	11b24 <__assert_fail@plt+0xbac>
   12580:	ldr	r3, [fp]
   12584:	cmp	r3, #0
   12588:	beq	125a4 <__assert_fail@plt+0x162c>
   1258c:	sub	r3, r3, #1
   12590:	str	r3, [fp]
   12594:	ldr	r3, [sp, #96]	; 0x60
   12598:	b	11b24 <__assert_fail@plt+0xbac>
   1259c:	mov	ip, #1
   125a0:	str	ip, [sp, #72]	; 0x48
   125a4:	ldr	r3, [sp, #96]	; 0x60
   125a8:	b	11b24 <__assert_fail@plt+0xbac>
   125ac:	add	r0, sp, #120	; 0x78
   125b0:	add	r3, r3, #2
   125b4:	str	r3, [r0, #-24]!	; 0xffffffe8
   125b8:	bl	1e778 <__assert_fail@plt+0xd800>
   125bc:	ldr	r2, [sp, #96]	; 0x60
   125c0:	sub	r2, r2, #1
   125c4:	str	r2, [sp, #96]	; 0x60
   125c8:	mov	r3, r0
   125cc:	ldr	r0, [fp]
   125d0:	str	r3, [sp, #16]
   125d4:	bl	1dee0 <__assert_fail@plt+0xcf68>
   125d8:	ldr	r3, [sp, #16]
   125dc:	mov	r0, r3
   125e0:	bl	1df00 <__assert_fail@plt+0xcf88>
   125e4:	ldr	r3, [sp, #96]	; 0x60
   125e8:	b	11b24 <__assert_fail@plt+0xbac>
   125ec:	mov	ip, #4
   125f0:	mov	r6, #1
   125f4:	str	ip, [sp, #40]	; 0x28
   125f8:	ldr	r3, [sp, #96]	; 0x60
   125fc:	b	11b24 <__assert_fail@plt+0xbac>
   12600:	movw	r3, #28940	; 0x710c
   12604:	movt	r3, #3
   12608:	ldr	r4, [r3]
   1260c:	bl	14254 <__assert_fail@plt+0x32dc>
   12610:	mov	r2, #32
   12614:	movw	r3, #19444	; 0x4bf4
   12618:	str	r2, [sp]
   1261c:	movt	r3, #2
   12620:	movw	r2, #19384	; 0x4bb8
   12624:	str	r3, [sp, #8]
   12628:	movt	r2, #2
   1262c:	movw	r3, #19416	; 0x4bd8
   12630:	mov	r1, #1
   12634:	movt	r3, #2
   12638:	str	r0, [sp, #4]
   1263c:	mov	r0, r4
   12640:	bl	10eac <__fprintf_chk@plt>
   12644:	b	11f84 <__assert_fail@plt+0x100c>
   12648:	mov	r0, #1
   1264c:	bl	1df48 <__assert_fail@plt+0xcfd0>
   12650:	ldr	r3, [sp, #96]	; 0x60
   12654:	b	11b24 <__assert_fail@plt+0xbac>
   12658:	mov	ip, #8388608	; 0x800000
   1265c:	ldr	r3, [sp, #96]	; 0x60
   12660:	str	ip, [sp, #80]	; 0x50
   12664:	mov	ip, #1
   12668:	str	ip, [sp, #76]	; 0x4c
   1266c:	b	11b24 <__assert_fail@plt+0xbac>
   12670:	ldr	r3, [sp, #96]	; 0x60
   12674:	mov	r6, #1
   12678:	b	11b24 <__assert_fail@plt+0xbac>
   1267c:	mov	r0, #0
   12680:	bl	224e0 <__assert_fail@plt+0x11568>
   12684:	ldr	r3, [sp, #96]	; 0x60
   12688:	b	11b24 <__assert_fail@plt+0xbac>
   1268c:	mov	r0, sl
   12690:	bl	10e64 <strlen@plt>
   12694:	mov	r7, r0
   12698:	mov	r0, #1
   1269c:	add	r1, r7, #5
   126a0:	bl	10d08 <calloc@plt>
   126a4:	subs	r4, r0, #0
   126a8:	beq	129a8 <__assert_fail@plt+0x1a30>
   126ac:	mov	r1, sl
   126b0:	mov	r2, r7
   126b4:	bl	10d74 <memcpy@plt>
   126b8:	ldr	ip, [sp, #48]	; 0x30
   126bc:	ldr	r1, [r9]
   126c0:	add	r3, r4, r7
   126c4:	ldr	r0, [ip]
   126c8:	cmp	r1, #1
   126cc:	ldrb	r2, [ip, #4]
   126d0:	str	r0, [r4, r7]
   126d4:	strb	r2, [r3, #4]
   126d8:	bhi	128ac <__assert_fail@plt+0x1934>
   126dc:	mov	ip, #1
   126e0:	str	r4, [sp, #20]
   126e4:	str	ip, [sp, #40]	; 0x28
   126e8:	b	1195c <__assert_fail@plt+0x9e4>
   126ec:	cmp	r3, #0
   126f0:	beq	12714 <__assert_fail@plt+0x179c>
   126f4:	movw	r3, #28940	; 0x710c
   126f8:	movt	r3, #3
   126fc:	movw	r0, #23732	; 0x5cb4
   12700:	mov	r1, #1
   12704:	ldr	r3, [r3]
   12708:	movt	r0, #2
   1270c:	mov	r2, #36	; 0x24
   12710:	bl	10dd4 <fwrite@plt>
   12714:	ldr	r0, [sp, #32]
   12718:	bl	1ed7c <__assert_fail@plt+0xde04>
   1271c:	sub	r2, r2, #48	; 0x30
   12720:	cmp	r2, #9
   12724:	bhi	113c8 <__assert_fail@plt+0x450>
   12728:	ldr	r0, [sp, #84]	; 0x54
   1272c:	add	r3, r3, #1
   12730:	str	r3, [sp, #96]	; 0x60
   12734:	bl	1e778 <__assert_fail@plt+0xd800>
   12738:	ldr	r2, [sp, #96]	; 0x60
   1273c:	sub	r2, r2, #1
   12740:	str	r2, [sp, #96]	; 0x60
   12744:	cmp	r0, #3
   12748:	bls	12714 <__assert_fail@plt+0x179c>
   1274c:	cmp	r0, #7
   12750:	bls	127e4 <__assert_fail@plt+0x186c>
   12754:	cmp	r0, #31
   12758:	bls	12714 <__assert_fail@plt+0x179c>
   1275c:	str	r0, [sp, #16]
   12760:	bl	1df38 <__assert_fail@plt+0xcfc0>
   12764:	ldr	r3, [sp, #16]
   12768:	movw	r1, #1023	; 0x3ff
   1276c:	ldr	r2, [fp]
   12770:	cmp	r3, r1
   12774:	bls	127bc <__assert_fail@plt+0x1844>
   12778:	cmp	r2, #1
   1277c:	bls	127dc <__assert_fail@plt+0x1864>
   12780:	ldr	ip, [sp, #44]	; 0x2c
   12784:	lsr	r3, r3, #10
   12788:	movw	r2, #23372	; 0x5b4c
   1278c:	mov	r1, #1
   12790:	movt	r2, #2
   12794:	ldr	r0, [ip]
   12798:	bl	10eac <__fprintf_chk@plt>
   1279c:	ldr	r3, [sp, #96]	; 0x60
   127a0:	b	124b8 <__assert_fail@plt+0x1540>
   127a4:	mov	r0, #0
   127a8:	bl	22428 <__assert_fail@plt+0x114b0>
   127ac:	ldr	r3, [sp, #96]	; 0x60
   127b0:	add	r3, r3, #1
   127b4:	str	r3, [sp, #96]	; 0x60
   127b8:	b	124b8 <__assert_fail@plt+0x1540>
   127bc:	cmp	r2, #1
   127c0:	bls	127dc <__assert_fail@plt+0x1864>
   127c4:	ldr	ip, [sp, #44]	; 0x2c
   127c8:	movw	r2, #23408	; 0x5b70
   127cc:	mov	r1, #1
   127d0:	movt	r2, #2
   127d4:	ldr	r0, [ip]
   127d8:	bl	10eac <__fprintf_chk@plt>
   127dc:	ldr	r3, [sp, #96]	; 0x60
   127e0:	b	124b8 <__assert_fail@plt+0x1540>
   127e4:	bl	223f8 <__assert_fail@plt+0x11480>
   127e8:	str	r0, [sp, #80]	; 0x50
   127ec:	bl	1df38 <__assert_fail@plt+0xcfc0>
   127f0:	ldr	r3, [fp]
   127f4:	cmp	r3, #1
   127f8:	bls	127dc <__assert_fail@plt+0x1864>
   127fc:	ldr	ip, [sp, #44]	; 0x2c
   12800:	movw	r2, #23340	; 0x5b2c
   12804:	mov	r1, #1
   12808:	movt	r2, #2
   1280c:	ldr	r0, [ip]
   12810:	ldr	ip, [sp, #80]	; 0x50
   12814:	lsr	r3, ip, #10
   12818:	bl	10eac <__fprintf_chk@plt>
   1281c:	ldr	r3, [sp, #96]	; 0x60
   12820:	b	124b8 <__assert_fail@plt+0x1540>
   12824:	mov	r5, #0
   12828:	movt	ip, #65535	; 0xffff
   1282c:	str	r5, [sp, #60]	; 0x3c
   12830:	mov	sl, r5
   12834:	str	ip, [sp, #68]	; 0x44
   12838:	mov	ip, #1
   1283c:	str	r5, [sp, #72]	; 0x48
   12840:	str	r5, [sp, #76]	; 0x4c
   12844:	ldr	r6, [sp, #64]	; 0x40
   12848:	str	ip, [sp, #56]	; 0x38
   1284c:	b	111b4 <__assert_fail@plt+0x23c>
   12850:	mov	r6, #1
   12854:	b	11128 <__assert_fail@plt+0x1b0>
   12858:	add	r3, r3, #2
   1285c:	str	r3, [sp, #60]	; 0x3c
   12860:	b	1248c <__assert_fail@plt+0x1514>
   12864:	mov	r3, #3
   12868:	str	r3, [sp, #40]	; 0x28
   1286c:	b	11128 <__assert_fail@plt+0x1b0>
   12870:	movw	r3, #28940	; 0x710c
   12874:	movt	r3, #3
   12878:	movw	r2, #23772	; 0x5cdc
   1287c:	mov	r1, #1
   12880:	ldr	r0, [r3]
   12884:	movt	r2, #2
   12888:	mov	r3, r4
   1288c:	str	r4, [sp, #20]
   12890:	bl	10eac <__fprintf_chk@plt>
   12894:	mov	ip, #2
   12898:	str	ip, [sp, #40]	; 0x28
   1289c:	b	1195c <__assert_fail@plt+0x9e4>
   128a0:	ldr	r0, [sp, #92]	; 0x5c
   128a4:	bl	10d44 <free@plt>
   128a8:	b	11670 <__assert_fail@plt+0x6f8>
   128ac:	movw	r3, #28940	; 0x710c
   128b0:	movt	r3, #3
   128b4:	movw	r2, #23696	; 0x5c90
   128b8:	mov	r1, #1
   128bc:	ldr	r0, [r3]
   128c0:	movt	r2, #2
   128c4:	mov	r3, r4
   128c8:	str	r4, [sp, #20]
   128cc:	bl	10eac <__fprintf_chk@plt>
   128d0:	mov	ip, #1
   128d4:	str	ip, [sp, #40]	; 0x28
   128d8:	b	1195c <__assert_fail@plt+0x9e4>
   128dc:	mov	r0, r8
   128e0:	ldr	r6, [sp, #44]	; 0x2c
   128e4:	ldr	r9, [sp, #80]	; 0x50
   128e8:	bl	10d44 <free@plt>
   128ec:	b	11670 <__assert_fail@plt+0x6f8>
   128f0:	mov	r0, fp
   128f4:	bl	10d44 <free@plt>
   128f8:	mov	r0, r8
   128fc:	bl	10d44 <free@plt>
   12900:	b	11670 <__assert_fail@plt+0x6f8>
   12904:	bl	223c0 <__assert_fail@plt+0x11448>
   12908:	ldr	ip, [sp, #16]
   1290c:	b	11128 <__assert_fail@plt+0x1b0>
   12910:	mov	r0, #1
   12914:	bl	223c0 <__assert_fail@plt+0x11448>
   12918:	ldr	ip, [sp, #16]
   1291c:	b	11128 <__assert_fail@plt+0x1b0>
   12920:	ldr	r3, [pc, #-2444]	; 11f9c <__assert_fail@plt+0x1024>
   12924:	mov	r1, #1
   12928:	str	r1, [sp, #64]	; 0x40
   1292c:	str	r3, [sp, #20]
   12930:	b	11128 <__assert_fail@plt+0x1b0>
   12934:	ldr	r1, [pc, #-2464]	; 11f9c <__assert_fail@plt+0x1024>
   12938:	mov	r2, #1
   1293c:	str	r2, [sp, #64]	; 0x40
   12940:	str	r1, [sp, #20]
   12944:	b	11128 <__assert_fail@plt+0x1b0>
   12948:	cmp	r1, #50	; 0x32
   1294c:	beq	11400 <__assert_fail@plt+0x488>
   12950:	b	1145c <__assert_fail@plt+0x4e4>
   12954:	bl	22464 <__assert_fail@plt+0x114ec>
   12958:	ldr	ip, [sp, #16]
   1295c:	b	11128 <__assert_fail@plt+0x1b0>
   12960:	mov	r0, #1
   12964:	bl	22464 <__assert_fail@plt+0x114ec>
   12968:	ldr	ip, [sp, #16]
   1296c:	b	11128 <__assert_fail@plt+0x1b0>
   12970:	bl	22490 <__assert_fail@plt+0x11518>
   12974:	ldr	ip, [sp, #16]
   12978:	b	11128 <__assert_fail@plt+0x1b0>
   1297c:	mov	r0, #2
   12980:	bl	22490 <__assert_fail@plt+0x11518>
   12984:	ldr	ip, [sp, #16]
   12988:	b	11128 <__assert_fail@plt+0x1b0>
   1298c:	bl	224ac <__assert_fail@plt+0x11534>
   12990:	ldr	ip, [sp, #16]
   12994:	b	11128 <__assert_fail@plt+0x1b0>
   12998:	mov	r0, #1
   1299c:	bl	224ac <__assert_fail@plt+0x11534>
   129a0:	ldr	ip, [sp, #16]
   129a4:	b	11128 <__assert_fail@plt+0x1b0>
   129a8:	ldr	r0, [sp, #32]
   129ac:	bl	10dc8 <perror@plt>
   129b0:	b	11d04 <__assert_fail@plt+0xd8c>
   129b4:	movw	r1, #21376	; 0x5380
   129b8:	mov	r0, fp
   129bc:	movt	r1, #2
   129c0:	str	ip, [sp, #16]
   129c4:	bl	10d20 <strcmp@plt>
   129c8:	ldr	ip, [sp, #16]
   129cc:	cmp	r0, #0
   129d0:	bne	129f8 <__assert_fail@plt+0x1a80>
   129d4:	ldr	r3, [ip]
   129d8:	cmp	r3, #0
   129dc:	subne	r3, r3, #1
   129e0:	strne	r3, [ip]
   129e4:	b	11128 <__assert_fail@plt+0x1b0>
   129e8:	mov	r0, #1
   129ec:	bl	224c8 <__assert_fail@plt+0x11550>
   129f0:	ldr	ip, [sp, #16]
   129f4:	b	11128 <__assert_fail@plt+0x1b0>
   129f8:	movw	r1, #21384	; 0x5388
   129fc:	mov	r0, fp
   12a00:	movt	r1, #2
   12a04:	str	ip, [sp, #16]
   12a08:	bl	10d20 <strcmp@plt>
   12a0c:	ldr	ip, [sp, #16]
   12a10:	cmp	r0, #0
   12a14:	str	r0, [sp, #28]
   12a18:	beq	12a8c <__assert_fail@plt+0x1b14>
   12a1c:	movw	r1, #21396	; 0x5394
   12a20:	mov	r0, fp
   12a24:	movt	r1, #2
   12a28:	str	ip, [sp, #16]
   12a2c:	bl	10d20 <strcmp@plt>
   12a30:	ldr	ip, [sp, #16]
   12a34:	cmp	r0, #0
   12a38:	beq	11f7c <__assert_fail@plt+0x1004>
   12a3c:	movw	r1, #21404	; 0x539c
   12a40:	mov	r0, fp
   12a44:	movt	r1, #2
   12a48:	str	ip, [sp, #16]
   12a4c:	bl	10d20 <strcmp@plt>
   12a50:	ldr	ip, [sp, #16]
   12a54:	cmp	r0, #0
   12a58:	beq	12a80 <__assert_fail@plt+0x1b08>
   12a5c:	movw	r1, #21412	; 0x53a4
   12a60:	mov	r0, fp
   12a64:	movt	r1, #2
   12a68:	str	ip, [sp, #16]
   12a6c:	bl	10d20 <strcmp@plt>
   12a70:	ldr	ip, [sp, #16]
   12a74:	cmp	r0, #0
   12a78:	bne	12ad8 <__assert_fail@plt+0x1b60>
   12a7c:	mov	r0, #1
   12a80:	bl	224e0 <__assert_fail@plt+0x11568>
   12a84:	ldr	ip, [sp, #16]
   12a88:	b	11128 <__assert_fail@plt+0x1b0>
   12a8c:	movw	r3, #28940	; 0x710c
   12a90:	movt	r3, #3
   12a94:	ldr	r4, [r3]
   12a98:	bl	14254 <__assert_fail@plt+0x32dc>
   12a9c:	mov	r2, #32
   12aa0:	movw	r3, #19444	; 0x4bf4
   12aa4:	str	r2, [sp]
   12aa8:	movt	r3, #2
   12aac:	movw	r2, #19384	; 0x4bb8
   12ab0:	str	r3, [sp, #8]
   12ab4:	movt	r2, #2
   12ab8:	movw	r3, #19416	; 0x4bd8
   12abc:	mov	r1, #1
   12ac0:	movt	r3, #2
   12ac4:	str	r0, [sp, #4]
   12ac8:	mov	r0, r4
   12acc:	bl	10eac <__fprintf_chk@plt>
   12ad0:	ldr	r0, [sp, #28]
   12ad4:	b	11a5c <__assert_fail@plt+0xae4>
   12ad8:	movw	r1, #21420	; 0x53ac
   12adc:	mov	r0, fp
   12ae0:	movt	r1, #2
   12ae4:	mov	r2, #6
   12ae8:	str	ip, [sp, #16]
   12aec:	bl	10f48 <strncmp@plt>
   12af0:	ldr	ip, [sp, #16]
   12af4:	cmp	r0, #0
   12af8:	bne	113b4 <__assert_fail@plt+0x43c>
   12afc:	add	r3, fp, #6
   12b00:	str	r3, [sp, #96]	; 0x60
   12b04:	ldrb	r3, [fp, #6]
   12b08:	cmp	r3, #61	; 0x3d
   12b0c:	beq	12b28 <__assert_fail@plt+0x1bb0>
   12b10:	cmp	r3, #0
   12b14:	bne	12714 <__assert_fail@plt+0x179c>
   12b18:	mvn	r2, #0
   12b1c:	str	r2, [sp, #56]	; 0x38
   12b20:	b	11128 <__assert_fail@plt+0x1b0>
   12b24:	bl	10db0 <__stack_chk_fail@plt>
   12b28:	add	r0, sp, #120	; 0x78
   12b2c:	add	fp, fp, #7
   12b30:	str	fp, [r0, #-24]!	; 0xffffffe8
   12b34:	str	ip, [sp, #16]
   12b38:	bl	1e778 <__assert_fail@plt+0xd800>
   12b3c:	ldr	ip, [sp, #16]
   12b40:	cmp	r0, #0
   12b44:	beq	12714 <__assert_fail@plt+0x179c>
   12b48:	rsb	r0, r0, #0
   12b4c:	str	r0, [sp, #56]	; 0x38
   12b50:	b	11128 <__assert_fail@plt+0x1b0>
   12b54:	mov	fp, #0
   12b58:	mov	lr, #0
   12b5c:	pop	{r1}		; (ldr r1, [sp], #4)
   12b60:	mov	r2, sp
   12b64:	push	{r2}		; (str r2, [sp, #-4]!)
   12b68:	push	{r0}		; (str r0, [sp, #-4]!)
   12b6c:	ldr	ip, [pc, #16]	; 12b84 <__assert_fail@plt+0x1c0c>
   12b70:	push	{ip}		; (str ip, [sp, #-4]!)
   12b74:	ldr	r0, [pc, #12]	; 12b88 <__assert_fail@plt+0x1c10>
   12b78:	ldr	r3, [pc, #12]	; 12b8c <__assert_fail@plt+0x1c14>
   12b7c:	bl	10e28 <__libc_start_main@plt>
   12b80:	bl	10f54 <abort@plt>
   12b84:	andeq	r4, r2, ip, ror #2
   12b88:	andeq	r0, r1, r8, lsl #31
   12b8c:	andeq	r4, r2, r8, lsl #2
   12b90:	ldr	r3, [pc, #20]	; 12bac <__assert_fail@plt+0x1c34>
   12b94:	ldr	r2, [pc, #20]	; 12bb0 <__assert_fail@plt+0x1c38>
   12b98:	add	r3, pc, r3
   12b9c:	ldr	r2, [r3, r2]
   12ba0:	cmp	r2, #0
   12ba4:	bxeq	lr
   12ba8:	b	10e40 <__gmon_start__@plt>
   12bac:	andeq	r4, r2, r0, ror #8
   12bb0:	andeq	r0, r0, r0, ror #1
   12bb4:	push	{r3, lr}
   12bb8:	movw	r0, #28936	; 0x7108
   12bbc:	ldr	r3, [pc, #36]	; 12be8 <__assert_fail@plt+0x1c70>
   12bc0:	movt	r0, #3
   12bc4:	rsb	r3, r0, r3
   12bc8:	cmp	r3, #6
   12bcc:	popls	{r3, pc}
   12bd0:	movw	r3, #0
   12bd4:	movt	r3, #0
   12bd8:	cmp	r3, #0
   12bdc:	popeq	{r3, pc}
   12be0:	blx	r3
   12be4:	pop	{r3, pc}
   12be8:	andeq	r7, r3, fp, lsl #2
   12bec:	push	{r3, lr}
   12bf0:	movw	r0, #28936	; 0x7108
   12bf4:	movw	r3, #28936	; 0x7108
   12bf8:	movt	r0, #3
   12bfc:	movt	r3, #3
   12c00:	rsb	r3, r0, r3
   12c04:	asr	r3, r3, #2
   12c08:	add	r3, r3, r3, lsr #31
   12c0c:	asrs	r1, r3, #1
   12c10:	popeq	{r3, pc}
   12c14:	movw	r2, #0
   12c18:	movt	r2, #0
   12c1c:	cmp	r2, #0
   12c20:	popeq	{r3, pc}
   12c24:	blx	r2
   12c28:	pop	{r3, pc}
   12c2c:	push	{r4, lr}
   12c30:	movw	r4, #28956	; 0x711c
   12c34:	movt	r4, #3
   12c38:	ldrb	r3, [r4]
   12c3c:	cmp	r3, #0
   12c40:	popne	{r4, pc}
   12c44:	bl	12bb4 <__assert_fail@plt+0x1c3c>
   12c48:	mov	r3, #1
   12c4c:	strb	r3, [r4]
   12c50:	pop	{r4, pc}
   12c54:	movw	r0, #28420	; 0x6f04
   12c58:	movt	r0, #3
   12c5c:	push	{r3, lr}
   12c60:	ldr	r3, [r0]
   12c64:	cmp	r3, #0
   12c68:	beq	12c80 <__assert_fail@plt+0x1d08>
   12c6c:	movw	r3, #0
   12c70:	movt	r3, #0
   12c74:	cmp	r3, #0
   12c78:	beq	12c80 <__assert_fail@plt+0x1d08>
   12c7c:	blx	r3
   12c80:	pop	{r3, lr}
   12c84:	b	12bec <__assert_fail@plt+0x1c74>
   12c88:	cmp	r3, #2
   12c8c:	beq	12ca4 <__assert_fail@plt+0x1d2c>
   12c90:	cmp	r3, #3
   12c94:	beq	12cb4 <__assert_fail@plt+0x1d3c>
   12c98:	cmp	r3, #1
   12c9c:	streq	r0, [r2, r1, lsl #2]
   12ca0:	bx	lr
   12ca4:	ldr	r3, [sp]
   12ca8:	rsb	r0, r3, r0
   12cac:	str	r0, [r2, r1, lsl #2]
   12cb0:	bx	lr
   12cb4:	lsl	r1, r1, #1
   12cb8:	ldr	ip, [sp]
   12cbc:	rsb	r0, ip, r0
   12cc0:	strh	r0, [r2, r1]
   12cc4:	bx	lr
   12cc8:	cmp	r2, #3
   12ccc:	mov	ip, r2
   12cd0:	mov	r2, r1
   12cd4:	ldr	r1, [r0]
   12cd8:	push	{lr}		; (str lr, [sp, #-4]!)
   12cdc:	movw	lr, #31153	; 0x79b1
   12ce0:	movt	lr, #40503	; 0x9e37
   12ce4:	sub	sp, sp, #12
   12ce8:	mul	r1, lr, r1
   12cec:	str	r3, [sp]
   12cf0:	mov	r3, ip
   12cf4:	lsreq	r1, r1, #19
   12cf8:	lsrne	r1, r1, #20
   12cfc:	bl	12c88 <__assert_fail@plt+0x1d10>
   12d00:	add	sp, sp, #12
   12d04:	pop	{pc}		; (ldr pc, [sp], #4)
   12d08:	mov	r3, #16384	; 0x4000
   12d0c:	ldr	ip, [r0, r3]
   12d10:	push	{r4, r5, r6}
   12d14:	add	r1, r1, ip
   12d18:	cmp	r1, #-2147483648	; 0x80000000
   12d1c:	bls	12d90 <__assert_fail@plt+0x1e18>
   12d20:	add	r3, r3, #8
   12d24:	movw	r2, #16400	; 0x4010
   12d28:	ldr	r5, [r0, r2]
   12d2c:	sub	ip, ip, #65536	; 0x10000
   12d30:	ldr	r6, [r0, r3]
   12d34:	mov	r2, r0
   12d38:	mov	r3, #4096	; 0x1000
   12d3c:	mov	r4, #0
   12d40:	add	r6, r6, r5
   12d44:	ldr	r1, [r2], #4
   12d48:	cmp	ip, r1
   12d4c:	rsb	r1, ip, r1
   12d50:	strhi	r4, [r2, #-4]
   12d54:	strls	r1, [r2, #-4]
   12d58:	subs	r3, r3, #1
   12d5c:	bne	12d44 <__assert_fail@plt+0x1dcc>
   12d60:	cmp	r5, #65536	; 0x10000
   12d64:	mov	r2, #16384	; 0x4000
   12d68:	mov	r3, #65536	; 0x10000
   12d6c:	str	r3, [r0, r2]
   12d70:	movwhi	r2, #16400	; 0x4010
   12d74:	movhi	r5, #0
   12d78:	strhi	r3, [r0, r2]
   12d7c:	rsbls	r5, r5, #0
   12d80:	movthi	r5, #65535	; 0xffff
   12d84:	movw	r3, #16392	; 0x4008
   12d88:	add	r5, r6, r5
   12d8c:	str	r5, [r0, r3]
   12d90:	pop	{r4, r5, r6}
   12d94:	bx	lr
   12d98:	sub	ip, r2, #3
   12d9c:	cmp	r0, ip
   12da0:	push	{r4, r5}
   12da4:	bcs	12e24 <__assert_fail@plt+0x1eac>
   12da8:	ldr	r4, [r0]
   12dac:	ldr	r3, [r1]
   12db0:	eors	r3, r4, r3
   12db4:	bne	12e10 <__assert_fail@plt+0x1e98>
   12db8:	add	r3, r0, #4
   12dbc:	add	r4, r1, #4
   12dc0:	cmp	ip, r3
   12dc4:	bls	12e68 <__assert_fail@plt+0x1ef0>
   12dc8:	ldr	r1, [r1, #4]
   12dcc:	ldr	r5, [r0, #4]
   12dd0:	eors	r1, r5, r1
   12dd4:	bne	12df8 <__assert_fail@plt+0x1e80>
   12dd8:	add	r3, r3, #4
   12ddc:	add	r4, r4, #4
   12de0:	cmp	ip, r3
   12de4:	bls	12e68 <__assert_fail@plt+0x1ef0>
   12de8:	ldr	r5, [r3]
   12dec:	ldr	r1, [r4]
   12df0:	eors	r1, r5, r1
   12df4:	beq	12dd8 <__assert_fail@plt+0x1e60>
   12df8:	rbit	r1, r1
   12dfc:	clz	r1, r1
   12e00:	add	r3, r3, r1, lsr #3
   12e04:	rsb	r0, r0, r3
   12e08:	pop	{r4, r5}
   12e0c:	bx	lr
   12e10:	rbit	r3, r3
   12e14:	clz	r0, r3
   12e18:	pop	{r4, r5}
   12e1c:	asr	r0, r0, #3
   12e20:	bx	lr
   12e24:	mov	r3, r0
   12e28:	sub	ip, r2, #1
   12e2c:	cmp	r3, ip
   12e30:	bcs	12e48 <__assert_fail@plt+0x1ed0>
   12e34:	ldrh	r4, [r1]
   12e38:	ldrh	ip, [r3]
   12e3c:	cmp	r4, ip
   12e40:	addeq	r3, r3, #2
   12e44:	addeq	r1, r1, #2
   12e48:	cmp	r3, r2
   12e4c:	bcs	12e60 <__assert_fail@plt+0x1ee8>
   12e50:	ldrb	r2, [r3]
   12e54:	ldrb	r1, [r1]
   12e58:	cmp	r1, r2
   12e5c:	addeq	r3, r3, #1
   12e60:	rsb	r0, r0, r3
   12e64:	b	12e08 <__assert_fail@plt+0x1e90>
   12e68:	mov	r1, r4
   12e6c:	b	12e28 <__assert_fail@plt+0x1eb0>
   12e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e74:	sub	sp, sp, #132	; 0x84
   12e78:	movw	ip, #16396	; 0x400c
   12e7c:	str	r0, [sp, #20]
   12e80:	mov	r0, #16384	; 0x4000
   12e84:	ldr	r7, [sp, #20]
   12e88:	ldr	r9, [sp, #20]
   12e8c:	ldr	r4, [sp, #184]	; 0xb8
   12e90:	ldr	r7, [r7, r0]
   12e94:	ldr	ip, [r9, ip]
   12e98:	cmp	r4, #3
   12e9c:	str	r2, [sp, #100]	; 0x64
   12ea0:	movw	r2, #16400	; 0x4010
   12ea4:	str	r1, [sp, #56]	; 0x38
   12ea8:	str	ip, [sp, #76]	; 0x4c
   12eac:	str	r7, [sp, #40]	; 0x28
   12eb0:	ldr	ip, [sp, #172]	; 0xac
   12eb4:	ldr	r6, [sp, #180]	; 0xb4
   12eb8:	beq	13110 <__assert_fail@plt+0x2198>
   12ebc:	ldr	r7, [sp, #20]
   12ec0:	movw	r1, #16392	; 0x4008
   12ec4:	ldr	r9, [sp, #184]	; 0xb8
   12ec8:	ldr	r4, [sp, #40]	; 0x28
   12ecc:	ldr	r1, [r7, r1]
   12ed0:	sub	r9, r9, #2
   12ed4:	ldr	r2, [r7, r2]
   12ed8:	str	r9, [sp, #60]	; 0x3c
   12edc:	str	r1, [sp, #48]	; 0x30
   12ee0:	rsb	r7, r2, r4
   12ee4:	ldr	sl, [sp, #56]	; 0x38
   12ee8:	rsb	r1, r4, r2
   12eec:	ldr	r9, [sp, #48]	; 0x30
   12ef0:	ldr	r4, [sp, #60]	; 0x3c
   12ef4:	add	sl, sl, r3
   12ef8:	str	sl, [sp, #80]	; 0x50
   12efc:	add	r1, r9, r1
   12f00:	add	sl, r9, r2
   12f04:	cmp	r4, #1
   12f08:	str	r7, [sp, #24]
   12f0c:	ldr	r9, [sp, #80]	; 0x50
   12f10:	movhi	r4, #0
   12f14:	ldr	r7, [sp, #80]	; 0x50
   12f18:	movls	r4, #1
   12f1c:	str	sl, [sp, #108]	; 0x6c
   12f20:	sub	r9, r9, #5
   12f24:	sub	r7, r7, #11
   12f28:	mov	sl, #0
   12f2c:	str	r1, [sp, #68]	; 0x44
   12f30:	str	r4, [sp, #52]	; 0x34
   12f34:	str	r7, [sp, #32]
   12f38:	str	r9, [sp, #72]	; 0x48
   12f3c:	str	sl, [sp, #84]	; 0x54
   12f40:	ldr	r4, [sp, #176]	; 0xb0
   12f44:	ldr	r7, [sp, #176]	; 0xb0
   12f48:	subs	r5, r4, #2
   12f4c:	rsbs	r4, r5, #0
   12f50:	adcs	r4, r4, r5
   12f54:	cmp	ip, #0
   12f58:	cmple	r7, #2
   12f5c:	str	r4, [sp, #64]	; 0x40
   12f60:	beq	13104 <__assert_fail@plt+0x218c>
   12f64:	cmp	r3, #2113929216	; 0x7e000000
   12f68:	bhi	13104 <__assert_fail@plt+0x218c>
   12f6c:	subs	r0, r6, #3
   12f70:	mov	r1, #10
   12f74:	rsbs	fp, r0, #0
   12f78:	movt	r1, #1
   12f7c:	adcs	fp, fp, r0
   12f80:	cmp	r3, r1
   12f84:	movle	r1, #0
   12f88:	andgt	r1, fp, #1
   12f8c:	cmp	r1, #0
   12f90:	bne	13104 <__assert_fail@plt+0x218c>
   12f94:	ldr	r9, [sp, #184]	; 0xb8
   12f98:	cmp	r9, #1
   12f9c:	beq	1318c <__assert_fail@plt+0x2214>
   12fa0:	ldr	r4, [sp, #184]	; 0xb8
   12fa4:	cmp	r4, #3
   12fa8:	beq	138a8 <__assert_fail@plt+0x2930>
   12fac:	ldr	sl, [sp, #56]	; 0x38
   12fb0:	str	sl, [sp, #44]	; 0x2c
   12fb4:	ldr	r4, [sp, #20]
   12fb8:	movw	r2, #16400	; 0x4010
   12fbc:	ldr	r1, [r4, r2]
   12fc0:	add	r1, r3, r1
   12fc4:	str	r1, [r4, r2]
   12fc8:	ldr	sl, [sp, #20]
   12fcc:	cmp	r3, #12
   12fd0:	ldr	r7, [sp, #40]	; 0x28
   12fd4:	mov	r1, #16384	; 0x4000
   12fd8:	ldr	r9, [sp, #100]	; 0x64
   12fdc:	movw	r2, #16390	; 0x4006
   12fe0:	add	r3, r3, r7
   12fe4:	str	r3, [sl, r1]
   12fe8:	add	ip, r9, ip
   12fec:	strh	r6, [sl, r2]
   12ff0:	str	ip, [sp, #96]	; 0x60
   12ff4:	bgt	131b0 <__assert_fail@plt+0x2238>
   12ff8:	ldr	sl, [sp, #100]	; 0x64
   12ffc:	ldr	r4, [sp, #56]	; 0x38
   13000:	str	sl, [sp, #88]	; 0x58
   13004:	ldr	ip, [sp, #176]	; 0xb0
   13008:	ldr	r7, [sp, #80]	; 0x50
   1300c:	cmp	ip, #0
   13010:	rsb	r5, r4, r7
   13014:	bne	130c0 <__assert_fail@plt+0x2148>
   13018:	cmp	r5, #14
   1301c:	bls	1319c <__assert_fail@plt+0x2224>
   13020:	ldr	ip, [sp, #88]	; 0x58
   13024:	sub	r3, r5, #15
   13028:	cmp	r3, #254	; 0xfe
   1302c:	mvn	r2, #15
   13030:	strb	r2, [ip]
   13034:	add	r2, ip, #1
   13038:	bls	13050 <__assert_fail@plt+0x20d8>
   1303c:	mvn	r1, #0
   13040:	sub	r3, r3, #255	; 0xff
   13044:	strb	r1, [r2], #1
   13048:	cmp	r3, #254	; 0xfe
   1304c:	bhi	13040 <__assert_fail@plt+0x20c8>
   13050:	strb	r3, [r2]
   13054:	add	r3, r2, #1
   13058:	mov	r2, r5
   1305c:	mov	r1, r4
   13060:	mov	r0, r3
   13064:	bl	10d74 <memcpy@plt>
   13068:	ldr	r9, [sp, #64]	; 0x40
   1306c:	cmp	r9, #0
   13070:	addne	r2, r4, r5
   13074:	ldr	r4, [sp, #100]	; 0x64
   13078:	ldrne	ip, [sp, #168]	; 0xa8
   1307c:	ldrne	sl, [sp, #56]	; 0x38
   13080:	add	r3, r0, r5
   13084:	rsbne	r2, sl, r2
   13088:	rsb	r0, r4, r3
   1308c:	strne	r2, [ip]
   13090:	add	sp, sp, #132	; 0x84
   13094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13098:	ldr	ip, [sp, #96]	; 0x60
   1309c:	add	r2, r8, #11
   130a0:	cmp	ip, r2
   130a4:	bcs	134f0 <__assert_fail@plt+0x2578>
   130a8:	str	r3, [sp, #112]	; 0x70
   130ac:	str	r9, [sp, #88]	; 0x58
   130b0:	ldr	r9, [sp, #112]	; 0x70
   130b4:	ldr	r7, [sp, #80]	; 0x50
   130b8:	rsb	r5, r9, r7
   130bc:	mov	r4, r9
   130c0:	movw	r3, #32897	; 0x8081
   130c4:	add	r1, r5, #240	; 0xf0
   130c8:	movt	r3, #32896	; 0x8080
   130cc:	add	r2, r5, #1
   130d0:	ldr	sl, [sp, #88]	; 0x58
   130d4:	umull	r9, r1, r3, r1
   130d8:	ldr	ip, [sp, #96]	; 0x60
   130dc:	add	r2, r2, r1, lsr #7
   130e0:	add	r2, sl, r2
   130e4:	cmp	ip, r2
   130e8:	bcs	13018 <__assert_fail@plt+0x20a0>
   130ec:	ldr	r7, [sp, #64]	; 0x40
   130f0:	cmp	r7, #0
   130f4:	bne	139b0 <__assert_fail@plt+0x2a38>
   130f8:	ldr	sl, [sp, #176]	; 0xb0
   130fc:	cmp	sl, #1
   13100:	bne	13018 <__assert_fail@plt+0x20a0>
   13104:	mov	r0, #0
   13108:	add	sp, sp, #132	; 0x84
   1310c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13110:	ldr	sl, [sp, #76]	; 0x4c
   13114:	mov	r7, #1
   13118:	ldr	r4, [sp, #56]	; 0x38
   1311c:	ldr	r9, [sp, #40]	; 0x28
   13120:	ldr	r1, [sl, r0]
   13124:	add	r0, r0, #8
   13128:	ldr	r2, [sl, r2]
   1312c:	add	r4, r4, r3
   13130:	ldr	r0, [sl, r0]
   13134:	str	r4, [sp, #80]	; 0x50
   13138:	rsb	r4, r2, r9
   1313c:	str	r7, [sp, #52]	; 0x34
   13140:	str	r0, [sp, #48]	; 0x30
   13144:	rsb	r0, r1, r2
   13148:	ldr	sl, [sp, #48]	; 0x30
   1314c:	rsb	r1, r1, r9
   13150:	ldr	r9, [sp, #80]	; 0x50
   13154:	add	r0, sl, r0
   13158:	add	r7, sl, r2
   1315c:	ldr	sl, [sp, #80]	; 0x50
   13160:	sub	r9, r9, #11
   13164:	str	r4, [sp, #24]
   13168:	mov	r4, #1
   1316c:	sub	sl, sl, #5
   13170:	str	r1, [sp, #84]	; 0x54
   13174:	str	r0, [sp, #68]	; 0x44
   13178:	str	r7, [sp, #108]	; 0x6c
   1317c:	str	r9, [sp, #32]
   13180:	str	sl, [sp, #72]	; 0x48
   13184:	str	r4, [sp, #60]	; 0x3c
   13188:	b	12f40 <__assert_fail@plt+0x1fc8>
   1318c:	ldr	sl, [sp, #56]	; 0x38
   13190:	rsb	r2, r2, sl
   13194:	str	r2, [sp, #44]	; 0x2c
   13198:	b	12fb4 <__assert_fail@plt+0x203c>
   1319c:	ldr	r7, [sp, #88]	; 0x58
   131a0:	lsl	r2, r5, #4
   131a4:	add	r3, r7, #1
   131a8:	strb	r2, [r7]
   131ac:	b	13058 <__assert_fail@plt+0x20e0>
   131b0:	ldr	ip, [sp, #56]	; 0x38
   131b4:	mov	r1, sl
   131b8:	ldr	r0, [sp, #56]	; 0x38
   131bc:	mov	r2, r6
   131c0:	rsb	ip, r7, ip
   131c4:	str	ip, [sp, #28]
   131c8:	add	r4, r0, #1
   131cc:	mov	r9, #0
   131d0:	mov	r3, ip
   131d4:	movw	sl, #31153	; 0x79b1
   131d8:	bl	12cc8 <__assert_fail@plt+0x1d50>
   131dc:	ldr	r7, [sp, #56]	; 0x38
   131e0:	movw	r2, #31153	; 0x79b1
   131e4:	movt	r2, #40503	; 0x9e37
   131e8:	cmp	fp, #0
   131ec:	movt	sl, #40503	; 0x9e37
   131f0:	ldr	r3, [r7, #1]
   131f4:	movw	r7, #32897	; 0x8081
   131f8:	str	r9, [sp, #92]	; 0x5c
   131fc:	movt	r7, #32896	; 0x8080
   13200:	str	sl, [sp, #36]	; 0x24
   13204:	mvn	r5, #0
   13208:	mul	r3, r2, r3
   1320c:	ldr	r9, [sp, #192]	; 0xc0
   13210:	str	r7, [sp, #104]	; 0x68
   13214:	ldr	sl, [sp, #100]	; 0x64
   13218:	ldr	r7, [sp, #56]	; 0x38
   1321c:	lsl	r9, r9, #6
   13220:	str	r9, [sp, #116]	; 0x74
   13224:	lsreq	ip, r3, #20
   13228:	lsrne	ip, r3, #19
   1322c:	str	sl, [sp, #88]	; 0x58
   13230:	str	r7, [sp, #112]	; 0x70
   13234:	cmp	r6, #1
   13238:	beq	138c8 <__assert_fail@plt+0x2950>
   1323c:	ldr	r7, [sp, #116]	; 0x74
   13240:	mov	r0, #1
   13244:	b	13298 <__assert_fail@plt+0x2320>
   13248:	ldr	r9, [sp, #24]
   1324c:	lsl	ip, ip, #1
   13250:	ldr	sl, [sp, #188]	; 0xbc
   13254:	cmp	r3, r9
   13258:	movcs	r7, #0
   1325c:	movcc	r7, #1
   13260:	cmp	sl, #1
   13264:	movne	r7, #0
   13268:	cmp	r7, #0
   1326c:	ldr	r7, [sp, #20]
   13270:	strh	r1, [r7, ip]
   13274:	bne	1328c <__assert_fail@plt+0x2314>
   13278:	ldr	r9, [sp, #124]	; 0x7c
   1327c:	ldr	ip, [r4]
   13280:	ldr	sl, [r9]
   13284:	cmp	sl, ip
   13288:	beq	13418 <__assert_fail@plt+0x24a0>
   1328c:	ldr	ip, [sp, #12]
   13290:	mov	r7, r8
   13294:	mov	r4, r2
   13298:	ldr	sl, [sp, #28]
   1329c:	cmp	r6, #2
   132a0:	rsb	r1, sl, r4
   132a4:	beq	1339c <__assert_fail@plt+0x2424>
   132a8:	cmp	fp, #0
   132ac:	lslne	r3, ip, #1
   132b0:	ldrne	sl, [sp, #20]
   132b4:	moveq	r3, fp
   132b8:	ldrhne	r3, [sl, r3]
   132bc:	ldr	r9, [sp, #32]
   132c0:	add	r2, r4, r0
   132c4:	add	r8, r7, #1
   132c8:	lsr	r0, r7, #6
   132cc:	cmp	r2, r9
   132d0:	bhi	139d0 <__assert_fail@plt+0x2a58>
   132d4:	ldr	sl, [sp, #184]	; 0xb8
   132d8:	cmp	sl, #3
   132dc:	beq	133a8 <__assert_fail@plt+0x2430>
   132e0:	ldr	r9, [sp, #184]	; 0xb8
   132e4:	cmp	r9, #2
   132e8:	beq	133f4 <__assert_fail@plt+0x247c>
   132ec:	ldr	r9, [sp, #28]
   132f0:	add	r9, r9, r3
   132f4:	str	r9, [sp, #124]	; 0x7c
   132f8:	cmp	fp, #0
   132fc:	ldr	r9, [r2]
   13300:	ldrne	sl, [sp, #36]	; 0x24
   13304:	ldreq	r7, [sp, #36]	; 0x24
   13308:	mulne	r9, sl, r9
   1330c:	muleq	r9, r7, r9
   13310:	lsrne	r9, r9, #19
   13314:	lsreq	r9, r9, #20
   13318:	cmp	r6, #2
   1331c:	str	r9, [sp, #12]
   13320:	beq	13364 <__assert_fail@plt+0x23ec>
   13324:	cmp	r6, #3
   13328:	beq	13248 <__assert_fail@plt+0x22d0>
   1332c:	ldr	sl, [sp, #24]
   13330:	ldr	r7, [sp, #188]	; 0xbc
   13334:	cmp	r3, sl
   13338:	movcs	ip, #0
   1333c:	movcc	ip, #1
   13340:	cmp	r7, #1
   13344:	movne	ip, #0
   13348:	cmp	ip, #0
   1334c:	bne	1328c <__assert_fail@plt+0x2314>
   13350:	add	ip, r3, #65280	; 0xff00
   13354:	add	ip, ip, #255	; 0xff
   13358:	cmp	r1, ip
   1335c:	bhi	1328c <__assert_fail@plt+0x2314>
   13360:	b	13278 <__assert_fail@plt+0x2300>
   13364:	ldr	sl, [sp, #24]
   13368:	ldr	r7, [sp, #188]	; 0xbc
   1336c:	cmp	r3, sl
   13370:	movcs	r9, #0
   13374:	movcc	r9, #1
   13378:	cmp	r7, #1
   1337c:	movne	r9, #0
   13380:	str	r9, [sp, #120]	; 0x78
   13384:	ldr	sl, [sp, #120]	; 0x78
   13388:	ldr	r9, [sp, #20]
   1338c:	cmp	sl, #0
   13390:	str	r1, [r9, ip, lsl #2]
   13394:	bne	1328c <__assert_fail@plt+0x2314>
   13398:	b	13350 <__assert_fail@plt+0x23d8>
   1339c:	ldr	r9, [sp, #20]
   133a0:	ldr	r3, [r9, ip, lsl #2]
   133a4:	b	132bc <__assert_fail@plt+0x2344>
   133a8:	ldr	r7, [sp, #40]	; 0x28
   133ac:	cmp	r7, r3
   133b0:	bls	133dc <__assert_fail@plt+0x2464>
   133b4:	ldr	r9, [sp, #76]	; 0x4c
   133b8:	ldr	sl, [sp, #48]	; 0x30
   133bc:	ldr	r7, [sp, #68]	; 0x44
   133c0:	ldr	r3, [r9, ip, lsl #2]
   133c4:	ldr	r9, [sp, #84]	; 0x54
   133c8:	add	r7, r7, r3
   133cc:	str	sl, [sp, #44]	; 0x2c
   133d0:	str	r7, [sp, #124]	; 0x7c
   133d4:	add	r3, r3, r9
   133d8:	b	132f8 <__assert_fail@plt+0x2380>
   133dc:	ldr	r7, [sp, #56]	; 0x38
   133e0:	ldr	sl, [sp, #28]
   133e4:	str	r7, [sp, #44]	; 0x2c
   133e8:	add	sl, sl, r3
   133ec:	str	sl, [sp, #124]	; 0x7c
   133f0:	b	132f8 <__assert_fail@plt+0x2380>
   133f4:	ldr	sl, [sp, #40]	; 0x28
   133f8:	cmp	sl, r3
   133fc:	bls	133dc <__assert_fail@plt+0x2464>
   13400:	ldr	r9, [sp, #48]	; 0x30
   13404:	ldr	r7, [sp, #68]	; 0x44
   13408:	str	r9, [sp, #44]	; 0x2c
   1340c:	add	r7, r7, r3
   13410:	str	r7, [sp, #124]	; 0x7c
   13414:	b	132f8 <__assert_fail@plt+0x2380>
   13418:	ldr	r9, [sp, #52]	; 0x34
   1341c:	ldr	r7, [sp, #124]	; 0x7c
   13420:	cmp	r9, #0
   13424:	rsbne	r1, r3, r1
   13428:	strne	r1, [sp, #92]	; 0x5c
   1342c:	ldr	sl, [sp, #112]	; 0x70
   13430:	ldr	ip, [sp, #44]	; 0x2c
   13434:	cmp	sl, r4
   13438:	cmpcc	ip, r7
   1343c:	bcs	13450 <__assert_fail@plt+0x24d8>
   13440:	ldrb	r2, [r4, #-1]
   13444:	ldrb	r3, [r7, #-1]
   13448:	cmp	r2, r3
   1344c:	beq	13a14 <__assert_fail@plt+0x2a9c>
   13450:	ldr	ip, [sp, #176]	; 0xb0
   13454:	ldr	r9, [sp, #112]	; 0x70
   13458:	ldr	sl, [sp, #88]	; 0x58
   1345c:	cmp	ip, #1
   13460:	rsb	r8, r9, r4
   13464:	add	r3, sl, #1
   13468:	beq	1398c <__assert_fail@plt+0x2a14>
   1346c:	ldr	sl, [sp, #64]	; 0x40
   13470:	cmp	sl, #0
   13474:	bne	13964 <__assert_fail@plt+0x29ec>
   13478:	cmp	r8, #14
   1347c:	bls	13898 <__assert_fail@plt+0x2920>
   13480:	sub	r2, r8, #15
   13484:	ldr	ip, [sp, #88]	; 0x58
   13488:	cmp	r2, #254	; 0xfe
   1348c:	mvn	sl, #15
   13490:	strb	sl, [ip]
   13494:	ble	134a8 <__assert_fail@plt+0x2530>
   13498:	sub	r2, r2, #255	; 0xff
   1349c:	strb	r5, [r3], #1
   134a0:	cmp	r2, #254	; 0xfe
   134a4:	bgt	13498 <__assert_fail@plt+0x2520>
   134a8:	strb	r2, [r3]
   134ac:	add	r3, r3, #1
   134b0:	ldr	r2, [sp, #112]	; 0x70
   134b4:	add	r8, r3, r8
   134b8:	ldr	r0, [r2]
   134bc:	add	r3, r3, #8
   134c0:	ldr	r1, [r2, #4]
   134c4:	add	r2, r2, #8
   134c8:	str	r0, [r3, #-8]
   134cc:	str	r1, [r3, #-4]
   134d0:	cmp	r8, r3
   134d4:	bhi	134b8 <__assert_fail@plt+0x2540>
   134d8:	ldr	r3, [sp, #112]	; 0x70
   134dc:	ldr	r9, [sp, #88]	; 0x58
   134e0:	ldr	sl, [sp, #28]
   134e4:	ldr	ip, [sp, #64]	; 0x40
   134e8:	cmp	ip, #0
   134ec:	bne	13098 <__assert_fail@plt+0x2120>
   134f0:	ldr	ip, [sp, #52]	; 0x34
   134f4:	cmp	ip, #0
   134f8:	rsbeq	r3, r7, r4
   134fc:	strheq	r3, [r8], #2
   13500:	ldrne	ip, [sp, #92]	; 0x5c
   13504:	strhne	ip, [r8], #2
   13508:	ldr	ip, [sp, #60]	; 0x3c
   1350c:	cmp	ip, #1
   13510:	bls	13708 <__assert_fail@plt+0x2790>
   13514:	add	r1, r7, #4
   13518:	add	r0, r4, #4
   1351c:	ldr	r2, [sp, #72]	; 0x48
   13520:	bl	12d98 <__assert_fail@plt+0x1e20>
   13524:	add	r3, r0, #4
   13528:	mov	r7, r0
   1352c:	add	r4, r4, r3
   13530:	ldr	ip, [sp, #176]	; 0xb0
   13534:	cmp	ip, #0
   13538:	beq	13550 <__assert_fail@plt+0x25d8>
   1353c:	add	r3, r8, r7, lsr #8
   13540:	ldr	ip, [sp, #96]	; 0x60
   13544:	add	r3, r3, #6
   13548:	cmp	ip, r3
   1354c:	bcc	139d8 <__assert_fail@plt+0x2a60>
   13550:	cmp	r7, #14
   13554:	bls	136f4 <__assert_fail@plt+0x277c>
   13558:	sub	r7, r7, #15
   1355c:	ldrb	r3, [r9]
   13560:	cmp	r7, #1020	; 0x3fc
   13564:	add	r3, r3, #15
   13568:	strb	r3, [r9]
   1356c:	strb	r5, [r8]
   13570:	strb	r5, [r8, #1]
   13574:	strb	r5, [r8, #2]
   13578:	strb	r5, [r8, #3]
   1357c:	bcc	1359c <__assert_fail@plt+0x2624>
   13580:	sub	r7, r7, #1020	; 0x3fc
   13584:	strb	r5, [r8, #4]!
   13588:	cmp	r7, #1020	; 0x3fc
   1358c:	strb	r5, [r8, #1]
   13590:	strb	r5, [r8, #2]
   13594:	strb	r5, [r8, #3]
   13598:	bcs	13580 <__assert_fail@plt+0x2608>
   1359c:	ldr	r9, [sp, #104]	; 0x68
   135a0:	umull	r9, r3, r9, r7
   135a4:	lsr	r2, r3, #7
   135a8:	add	r9, r8, r2
   135ac:	add	r7, r7, r2
   135b0:	add	r9, r9, #1
   135b4:	strb	r7, [r8, r3, lsr #7]
   135b8:	ldr	ip, [sp, #32]
   135bc:	cmp	r4, ip
   135c0:	bcs	139c8 <__assert_fail@plt+0x2a50>
   135c4:	sub	r0, r4, #2
   135c8:	ldr	r1, [sp, #20]
   135cc:	mov	r2, r6
   135d0:	mov	r3, sl
   135d4:	bl	12cc8 <__assert_fail@plt+0x1d50>
   135d8:	cmp	r6, #1
   135dc:	beq	13840 <__assert_fail@plt+0x28c8>
   135e0:	ldr	r7, [sp, #36]	; 0x24
   135e4:	cmp	fp, #0
   135e8:	ldr	r0, [r4]
   135ec:	mul	r2, r7, r0
   135f0:	bne	137f8 <__assert_fail@plt+0x2880>
   135f4:	cmp	r6, #2
   135f8:	lsr	r2, r2, #20
   135fc:	rsb	r1, sl, r4
   13600:	ldreq	ip, [sp, #20]
   13604:	movne	r3, fp
   13608:	ldreq	r3, [ip, r2, lsl #2]
   1360c:	ldr	r7, [sp, #184]	; 0xb8
   13610:	cmp	r7, #3
   13614:	beq	137c8 <__assert_fail@plt+0x2850>
   13618:	ldr	r7, [sp, #184]	; 0xb8
   1361c:	cmp	r7, #2
   13620:	addne	r7, sl, r3
   13624:	beq	13820 <__assert_fail@plt+0x28a8>
   13628:	cmp	r6, #2
   1362c:	beq	13778 <__assert_fail@plt+0x2800>
   13630:	cmp	r6, #3
   13634:	bne	13698 <__assert_fail@plt+0x2720>
   13638:	ldr	ip, [sp, #188]	; 0xbc
   1363c:	lsl	r2, r2, #1
   13640:	subs	r0, ip, #1
   13644:	ldr	ip, [sp, #24]
   13648:	movne	r0, #1
   1364c:	cmp	r3, ip
   13650:	orrcs	r0, r0, #1
   13654:	ldr	ip, [sp, #20]
   13658:	cmp	r0, #0
   1365c:	strh	r1, [ip, r2]
   13660:	beq	137a4 <__assert_fail@plt+0x282c>
   13664:	ldr	r0, [r4]
   13668:	ldr	r2, [r7]
   1366c:	cmp	r2, r0
   13670:	bne	137a4 <__assert_fail@plt+0x282c>
   13674:	ldr	ip, [sp, #52]	; 0x34
   13678:	mov	r0, #0
   1367c:	add	r8, r9, #1
   13680:	strb	r0, [r9]
   13684:	cmp	ip, #0
   13688:	rsbne	r1, r3, r1
   1368c:	strne	r1, [sp, #92]	; 0x5c
   13690:	mov	r3, r4
   13694:	b	134e4 <__assert_fail@plt+0x256c>
   13698:	ldr	ip, [sp, #188]	; 0xbc
   1369c:	subs	r2, ip, #1
   136a0:	ldr	ip, [sp, #24]
   136a4:	movne	r2, #1
   136a8:	cmp	r3, ip
   136ac:	orrcs	r2, r2, #1
   136b0:	cmp	r2, #0
   136b4:	beq	137a4 <__assert_fail@plt+0x282c>
   136b8:	cmp	fp, #0
   136bc:	bne	13668 <__assert_fail@plt+0x26f0>
   136c0:	add	r2, r3, #65280	; 0xff00
   136c4:	add	r2, r2, #255	; 0xff
   136c8:	cmp	r2, r1
   136cc:	bcs	13664 <__assert_fail@plt+0x26ec>
   136d0:	ldr	r2, [r4, #1]
   136d4:	add	r3, r4, #1
   136d8:	str	r9, [sp, #88]	; 0x58
   136dc:	ldr	r9, [sp, #36]	; 0x24
   136e0:	mul	r2, r9, r2
   136e4:	lsr	ip, r2, #20
   136e8:	str	r4, [sp, #112]	; 0x70
   136ec:	mov	r4, r3
   136f0:	b	13234 <__assert_fail@plt+0x22bc>
   136f4:	ldrb	r3, [r9]
   136f8:	add	r7, r7, r3
   136fc:	strb	r7, [r9]
   13700:	mov	r9, r8
   13704:	b	135b8 <__assert_fail@plt+0x2640>
   13708:	ldr	ip, [sp, #44]	; 0x2c
   1370c:	ldr	r0, [sp, #48]	; 0x30
   13710:	cmp	ip, r0
   13714:	bne	13514 <__assert_fail@plt+0x259c>
   13718:	ldr	ip, [sp, #108]	; 0x6c
   1371c:	add	r1, r7, #4
   13720:	add	r0, r4, #4
   13724:	rsb	r3, r7, ip
   13728:	ldr	r7, [sp, #72]	; 0x48
   1372c:	add	r3, r4, r3
   13730:	cmp	r3, r7
   13734:	movcs	r3, r7
   13738:	str	r3, [sp, #16]
   1373c:	mov	r2, r3
   13740:	bl	12d98 <__assert_fail@plt+0x1e20>
   13744:	ldr	r3, [sp, #16]
   13748:	add	r2, r0, #4
   1374c:	mov	r7, r0
   13750:	add	r4, r4, r2
   13754:	cmp	r4, r3
   13758:	bne	13530 <__assert_fail@plt+0x25b8>
   1375c:	mov	r0, r4
   13760:	ldr	r1, [sp, #56]	; 0x38
   13764:	ldr	r2, [sp, #72]	; 0x48
   13768:	bl	12d98 <__assert_fail@plt+0x1e20>
   1376c:	add	r7, r7, r0
   13770:	add	r4, r4, r0
   13774:	b	13530 <__assert_fail@plt+0x25b8>
   13778:	ldr	ip, [sp, #188]	; 0xbc
   1377c:	subs	r0, ip, #1
   13780:	ldr	ip, [sp, #20]
   13784:	movne	r0, #1
   13788:	str	r1, [ip, r2, lsl #2]
   1378c:	ldr	ip, [sp, #24]
   13790:	cmp	r3, ip
   13794:	movcc	r2, r0
   13798:	orrcs	r2, r0, #1
   1379c:	cmp	r2, #0
   137a0:	bne	136c0 <__assert_fail@plt+0x2748>
   137a4:	cmp	fp, #0
   137a8:	str	r9, [sp, #88]	; 0x58
   137ac:	add	r3, r4, #1
   137b0:	ldr	r2, [r4, #1]
   137b4:	beq	136dc <__assert_fail@plt+0x2764>
   137b8:	ldr	r7, [sp, #36]	; 0x24
   137bc:	mul	r2, r7, r2
   137c0:	lsr	ip, r2, #19
   137c4:	b	136e8 <__assert_fail@plt+0x2770>
   137c8:	ldr	ip, [sp, #40]	; 0x28
   137cc:	cmp	ip, r3
   137d0:	bls	13810 <__assert_fail@plt+0x2898>
   137d4:	ldr	r7, [sp, #76]	; 0x4c
   137d8:	ldr	ip, [sp, #48]	; 0x30
   137dc:	ldr	r3, [r7, r2, lsl #2]
   137e0:	str	ip, [sp, #44]	; 0x2c
   137e4:	ldr	ip, [sp, #68]	; 0x44
   137e8:	add	r7, ip, r3
   137ec:	ldr	ip, [sp, #84]	; 0x54
   137f0:	add	r3, r3, ip
   137f4:	b	13628 <__assert_fail@plt+0x26b0>
   137f8:	lsr	r2, r2, #19
   137fc:	ldr	ip, [sp, #20]
   13800:	rsb	r1, sl, r4
   13804:	lsl	r3, r2, #1
   13808:	ldrh	r3, [ip, r3]
   1380c:	b	1360c <__assert_fail@plt+0x2694>
   13810:	ldr	ip, [sp, #56]	; 0x38
   13814:	add	r7, sl, r3
   13818:	str	ip, [sp, #44]	; 0x2c
   1381c:	b	13628 <__assert_fail@plt+0x26b0>
   13820:	ldr	ip, [sp, #40]	; 0x28
   13824:	cmp	ip, r3
   13828:	bls	13810 <__assert_fail@plt+0x2898>
   1382c:	ldr	ip, [sp, #68]	; 0x44
   13830:	add	r7, ip, r3
   13834:	ldr	ip, [sp, #48]	; 0x30
   13838:	str	ip, [sp, #44]	; 0x2c
   1383c:	b	13628 <__assert_fail@plt+0x26b0>
   13840:	ldr	r7, [sp, #36]	; 0x24
   13844:	mov	r3, sl
   13848:	ldr	lr, [r4]
   1384c:	mov	r0, r4
   13850:	ldr	r1, [sp, #20]
   13854:	mov	r2, r6
   13858:	mul	lr, r7, lr
   1385c:	lsr	lr, lr, #20
   13860:	ldr	r7, [r1, lr, lsl #2]
   13864:	bl	12cc8 <__assert_fail@plt+0x1d50>
   13868:	add	r3, r7, #65280	; 0xff00
   1386c:	add	r3, r3, #255	; 0xff
   13870:	cmp	r4, r3
   13874:	bhi	136d0 <__assert_fail@plt+0x2758>
   13878:	ldr	r2, [r7]
   1387c:	ldr	r3, [r4]
   13880:	cmp	r2, r3
   13884:	bne	136d0 <__assert_fail@plt+0x2758>
   13888:	mov	ip, #0
   1388c:	add	r8, r9, #1
   13890:	strb	ip, [r9]
   13894:	b	13690 <__assert_fail@plt+0x2718>
   13898:	ldr	r9, [sp, #88]	; 0x58
   1389c:	lsl	r2, r8, #4
   138a0:	strb	r2, [r9]
   138a4:	b	134b0 <__assert_fail@plt+0x2538>
   138a8:	ldr	r7, [sp, #20]
   138ac:	movw	r0, #16396	; 0x400c
   138b0:	ldr	r9, [sp, #56]	; 0x38
   138b4:	movw	r2, #16400	; 0x4010
   138b8:	str	r1, [r7, r0]
   138bc:	str	r9, [sp, #44]	; 0x2c
   138c0:	str	r3, [r7, r2]
   138c4:	b	12fc8 <__assert_fail@plt+0x2050>
   138c8:	ldr	r9, [sp, #116]	; 0x74
   138cc:	mov	sl, r6
   138d0:	str	fp, [sp, #120]	; 0x78
   138d4:	ldr	r8, [sp, #20]
   138d8:	str	r6, [sp, #124]	; 0x7c
   138dc:	b	138e4 <__assert_fail@plt+0x296c>
   138e0:	mov	r4, r6
   138e4:	add	r6, r4, sl
   138e8:	ldr	sl, [sp, #32]
   138ec:	mov	r3, #1
   138f0:	mov	r0, r4
   138f4:	cmp	r6, sl
   138f8:	mov	r1, ip
   138fc:	mov	r2, r8
   13900:	add	fp, r9, r3
   13904:	lsr	sl, r9, #6
   13908:	bhi	139d0 <__assert_fail@plt+0x2a58>
   1390c:	ldr	r7, [r8, ip, lsl #2]
   13910:	ldr	lr, [r6]
   13914:	ldr	ip, [sp, #28]
   13918:	ldr	r9, [sp, #36]	; 0x24
   1391c:	str	ip, [sp]
   13920:	mul	ip, r9, lr
   13924:	mov	r9, fp
   13928:	lsr	ip, ip, #20
   1392c:	str	ip, [sp, #16]
   13930:	bl	12c88 <__assert_fail@plt+0x1d10>
   13934:	add	r3, r7, #65280	; 0xff00
   13938:	add	r3, r3, #255	; 0xff
   1393c:	ldr	ip, [sp, #16]
   13940:	cmp	r4, r3
   13944:	bhi	138e0 <__assert_fail@plt+0x2968>
   13948:	ldr	r2, [r7]
   1394c:	ldr	r3, [r4]
   13950:	cmp	r2, r3
   13954:	bne	138e0 <__assert_fail@plt+0x2968>
   13958:	ldr	fp, [sp, #120]	; 0x78
   1395c:	ldr	r6, [sp, #124]	; 0x7c
   13960:	b	1342c <__assert_fail@plt+0x24b4>
   13964:	ldr	ip, [sp, #104]	; 0x68
   13968:	add	r1, r8, #240	; 0xf0
   1396c:	add	r2, r8, #11
   13970:	ldr	r9, [sp, #96]	; 0x60
   13974:	umull	ip, r1, ip, r1
   13978:	add	r2, r2, r1, lsr #7
   1397c:	add	r2, r3, r2
   13980:	cmp	r9, r2
   13984:	bcs	13478 <__assert_fail@plt+0x2500>
   13988:	b	130b0 <__assert_fail@plt+0x2138>
   1398c:	ldr	ip, [sp, #104]	; 0x68
   13990:	add	r1, r8, #8
   13994:	ldr	r9, [sp, #96]	; 0x60
   13998:	umull	ip, r2, ip, r8
   1399c:	add	r2, r1, r2, lsr #7
   139a0:	add	r2, r3, r2
   139a4:	cmp	r9, r2
   139a8:	bcs	13478 <__assert_fail@plt+0x2500>
   139ac:	b	13104 <__assert_fail@plt+0x218c>
   139b0:	rsb	r2, sl, ip
   139b4:	add	r1, r2, #239	; 0xef
   139b8:	sub	r2, r2, #1
   139bc:	umull	r9, r3, r3, r1
   139c0:	sub	r5, r2, r3, lsr #7
   139c4:	b	13018 <__assert_fail@plt+0x20a0>
   139c8:	str	r9, [sp, #88]	; 0x58
   139cc:	b	13004 <__assert_fail@plt+0x208c>
   139d0:	ldr	r4, [sp, #112]	; 0x70
   139d4:	b	13004 <__assert_fail@plt+0x208c>
   139d8:	ldr	ip, [sp, #176]	; 0xb0
   139dc:	cmp	ip, #1
   139e0:	beq	13104 <__assert_fail@plt+0x218c>
   139e4:	ldr	ip, [sp, #64]	; 0x40
   139e8:	cmp	ip, #0
   139ec:	beq	13550 <__assert_fail@plt+0x25d8>
   139f0:	ldr	ip, [sp, #96]	; 0x60
   139f4:	rsb	r3, r8, ip
   139f8:	rsb	r3, r3, r3, lsl #8
   139fc:	sub	r3, r3, #2016	; 0x7e0
   13a00:	sub	r3, r3, #10
   13a04:	rsb	r7, r7, r3
   13a08:	add	r4, r4, r7
   13a0c:	mov	r7, r3
   13a10:	b	13550 <__assert_fail@plt+0x25d8>
   13a14:	ldr	r9, [sp, #44]	; 0x2c
   13a18:	sub	r7, r7, #1
   13a1c:	ldr	sl, [sp, #112]	; 0x70
   13a20:	sub	r4, r4, #1
   13a24:	cmp	r7, r9
   13a28:	movls	r3, #0
   13a2c:	movhi	r3, #1
   13a30:	cmp	sl, r4
   13a34:	movcs	r3, #0
   13a38:	cmp	r3, #0
   13a3c:	bne	13440 <__assert_fail@plt+0x24c8>
   13a40:	b	13450 <__assert_fail@plt+0x24d8>
   13a44:	push	{r3, r4, r5, lr}
   13a48:	movw	r3, #16390	; 0x4006
   13a4c:	ldrh	r3, [r0, r3]
   13a50:	mov	r4, r0
   13a54:	cmp	r3, #0
   13a58:	beq	13aa8 <__assert_fail@plt+0x2b30>
   13a5c:	cmp	r3, r2
   13a60:	beq	13a8c <__assert_fail@plt+0x2b14>
   13a64:	mov	r5, #16384	; 0x4000
   13a68:	mov	r0, r4
   13a6c:	mov	r2, r5
   13a70:	mov	r1, #0
   13a74:	bl	10e88 <memset@plt>
   13a78:	movw	r2, #16390	; 0x4006
   13a7c:	mov	r3, #0
   13a80:	str	r3, [r4, r5]
   13a84:	strh	r3, [r4, r2]
   13a88:	b	13ac4 <__assert_fail@plt+0x2b4c>
   13a8c:	cmp	r3, #3
   13a90:	beq	13ae4 <__assert_fail@plt+0x2b6c>
   13a94:	cmp	r3, #2
   13a98:	beq	13b00 <__assert_fail@plt+0x2b88>
   13a9c:	cmp	r3, #1
   13aa0:	cmpne	r1, #4096	; 0x1000
   13aa4:	bge	13a64 <__assert_fail@plt+0x2aec>
   13aa8:	mov	r3, #16384	; 0x4000
   13aac:	ldr	r1, [r4, r3]
   13ab0:	cmp	r1, #0
   13ab4:	beq	13ac4 <__assert_fail@plt+0x2b4c>
   13ab8:	cmp	r2, #2
   13abc:	addeq	r1, r1, #65536	; 0x10000
   13ac0:	streq	r1, [r4, r3]
   13ac4:	movw	r0, #16396	; 0x400c
   13ac8:	movw	r1, #16392	; 0x4008
   13acc:	movw	r2, #16400	; 0x4010
   13ad0:	mov	r3, #0
   13ad4:	str	r3, [r4, r0]
   13ad8:	str	r3, [r4, r1]
   13adc:	str	r3, [r4, r2]
   13ae0:	pop	{r3, r4, r5, pc}
   13ae4:	mov	ip, #16384	; 0x4000
   13ae8:	movw	r0, #65534	; 0xfffe
   13aec:	ldr	ip, [r4, ip]
   13af0:	add	ip, r1, ip
   13af4:	cmp	ip, r0
   13af8:	bhi	13a64 <__assert_fail@plt+0x2aec>
   13afc:	b	13a9c <__assert_fail@plt+0x2b24>
   13b00:	mov	r0, #16384	; 0x4000
   13b04:	ldr	r0, [r4, r0]
   13b08:	cmp	r0, #1073741824	; 0x40000000
   13b0c:	bhi	13a64 <__assert_fail@plt+0x2aec>
   13b10:	b	13a9c <__assert_fail@plt+0x2b24>
   13b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b18:	movw	r9, #16768	; 0x4180
   13b1c:	sub	sp, sp, #148	; 0x94
   13b20:	movt	r9, #2
   13b24:	mov	r6, r2
   13b28:	mov	r5, r3
   13b2c:	str	r0, [sp, #44]	; 0x2c
   13b30:	add	r8, sp, #76	; 0x4c
   13b34:	str	r1, [sp, #52]	; 0x34
   13b38:	movw	sl, #28936	; 0x7108
   13b3c:	ldm	r9!, {r0, r1, r2, r3}
   13b40:	movt	sl, #3
   13b44:	ldr	r7, [sp, #184]	; 0xb8
   13b48:	add	r4, sp, #108	; 0x6c
   13b4c:	str	sl, [sp, #32]
   13b50:	add	ip, r9, #16
   13b54:	stmia	r8!, {r0, r1, r2, r3}
   13b58:	subs	r3, r7, #1
   13b5c:	rsbs	fp, r3, #0
   13b60:	adcs	fp, fp, r3
   13b64:	str	fp, [sp, #16]
   13b68:	ldm	r9, {r0, r1, r2, r3}
   13b6c:	ldr	r9, [sl]
   13b70:	ldr	sl, [sp, #204]	; 0xcc
   13b74:	stm	r8, {r0, r1, r2, r3}
   13b78:	cmp	sl, #65536	; 0x10000
   13b7c:	movcs	fp, #0
   13b80:	andcc	fp, fp, #1
   13b84:	ldm	ip!, {r0, r1, r2, r3}
   13b88:	cmp	r7, #0
   13b8c:	str	fp, [sp, #8]
   13b90:	ldr	fp, [sp, #200]	; 0xc8
   13b94:	str	r9, [sp, #140]	; 0x8c
   13b98:	add	fp, fp, sl
   13b9c:	ldr	r9, [sp, #188]	; 0xbc
   13ba0:	str	fp, [sp, #40]	; 0x28
   13ba4:	stmia	r4!, {r0, r1, r2, r3}
   13ba8:	ldm	ip, {r0, r1, r2, r3}
   13bac:	ldr	ip, [sp, #44]	; 0x2c
   13bb0:	ldr	fp, [sp, #196]	; 0xc4
   13bb4:	add	ip, ip, r6
   13bb8:	str	ip, [sp, #20]
   13bbc:	stm	r4, {r0, r1, r2, r3}
   13bc0:	ldr	r3, [sp, #52]	; 0x34
   13bc4:	add	r3, r3, r5
   13bc8:	str	r3, [sp, #4]
   13bcc:	beq	14100 <__assert_fail@plt+0x3188>
   13bd0:	ldr	sl, [sp, #20]
   13bd4:	cmp	r5, #0
   13bd8:	ldr	ip, [sp, #4]
   13bdc:	sub	sl, sl, #16
   13be0:	str	sl, [sp, #24]
   13be4:	sub	ip, ip, #32
   13be8:	str	ip, [sp, #28]
   13bec:	beq	14160 <__assert_fail@plt+0x31e8>
   13bf0:	cmp	r6, #0
   13bf4:	beq	14158 <__assert_fail@plt+0x31e0>
   13bf8:	ldr	ip, [sp, #4]
   13bfc:	ldr	r3, [sp, #4]
   13c00:	ldr	r8, [sp, #4]
   13c04:	sub	ip, ip, #12
   13c08:	ldr	r4, [sp, #52]	; 0x34
   13c0c:	sub	r3, r3, #7
   13c10:	ldr	r5, [sp, #44]	; 0x2c
   13c14:	sub	r8, r8, #5
   13c18:	str	ip, [sp, #12]
   13c1c:	str	r3, [sp, #68]	; 0x44
   13c20:	str	r8, [sp, #36]	; 0x24
   13c24:	ldr	sl, [sp, #20]
   13c28:	ldr	ip, [sp, #4]
   13c2c:	ldr	r3, [sp, #20]
   13c30:	sub	sl, sl, #5
   13c34:	ldr	r8, [sp, #20]
   13c38:	sub	ip, ip, #8
   13c3c:	sub	r3, r3, #8
   13c40:	str	sl, [sp, #48]	; 0x30
   13c44:	sub	r8, r8, #15
   13c48:	str	ip, [sp, #60]	; 0x3c
   13c4c:	str	r3, [sp, #64]	; 0x40
   13c50:	str	r8, [sp, #56]	; 0x38
   13c54:	ldrb	sl, [r5]
   13c58:	cmp	r7, #0
   13c5c:	add	r1, r5, #1
   13c60:	lsr	r8, sl, #4
   13c64:	beq	13e44 <__assert_fail@plt+0x2ecc>
   13c68:	subs	r3, r8, #15
   13c6c:	movne	r3, #1
   13c70:	cmp	r3, #0
   13c74:	beq	13d7c <__assert_fail@plt+0x2e04>
   13c78:	rsbs	r3, r7, #1
   13c7c:	ldr	ip, [sp, #24]
   13c80:	movcc	r3, #0
   13c84:	cmp	r1, ip
   13c88:	orrcc	r3, r3, #1
   13c8c:	ldr	ip, [sp, #28]
   13c90:	cmp	r4, ip
   13c94:	movhi	r3, #0
   13c98:	andls	r3, r3, #1
   13c9c:	cmp	r3, #0
   13ca0:	beq	13d7c <__assert_fail@plt+0x2e04>
   13ca4:	cmp	r7, #0
   13ca8:	add	r5, r1, r8
   13cac:	mov	r0, r4
   13cb0:	and	sl, sl, #15
   13cb4:	moveq	r2, #8
   13cb8:	movne	r2, #16
   13cbc:	bl	10d74 <memcpy@plt>
   13cc0:	ldrh	r2, [r5], #2
   13cc4:	add	r6, r4, r8
   13cc8:	cmp	sl, #15
   13ccc:	cmpne	r2, #7
   13cd0:	rsb	r1, r2, r6
   13cd4:	bls	13ce8 <__assert_fail@plt+0x2d70>
   13cd8:	ldr	r8, [sp, #192]	; 0xc0
   13cdc:	cmp	r8, #1
   13ce0:	cmpne	r1, fp
   13ce4:	bcs	14060 <__assert_fail@plt+0x30e8>
   13ce8:	ldr	r8, [sp, #8]
   13cec:	cmp	r8, #0
   13cf0:	beq	13d04 <__assert_fail@plt+0x2d8c>
   13cf4:	ldr	ip, [sp, #204]	; 0xcc
   13cf8:	add	r3, r1, ip
   13cfc:	cmp	fp, r3
   13d00:	bhi	13f60 <__assert_fail@plt+0x2fe8>
   13d04:	cmp	r9, #0
   13d08:	strbeq	r9, [r6]
   13d0c:	strbeq	r9, [r6, #1]
   13d10:	strbeq	r9, [r6, #2]
   13d14:	strbeq	r9, [r6, #3]
   13d18:	cmp	sl, #15
   13d1c:	beq	13f28 <__assert_fail@plt+0x2fb0>
   13d20:	cmp	r1, fp
   13d24:	ldr	ip, [sp, #192]	; 0xc0
   13d28:	add	sl, sl, #4
   13d2c:	movcs	r3, #0
   13d30:	movcc	r3, #1
   13d34:	cmp	ip, #2
   13d38:	movne	r3, #0
   13d3c:	cmp	r3, #0
   13d40:	beq	13e54 <__assert_fail@plt+0x2edc>
   13d44:	ldr	r8, [sp, #36]	; 0x24
   13d48:	add	r3, r6, sl
   13d4c:	cmp	r3, r8
   13d50:	bhi	14230 <__assert_fail@plt+0x32b8>
   13d54:	rsb	r3, r1, fp
   13d58:	cmp	sl, r3
   13d5c:	bhi	13f88 <__assert_fail@plt+0x3010>
   13d60:	ldr	r8, [sp, #40]	; 0x28
   13d64:	mov	r0, r6
   13d68:	mov	r2, sl
   13d6c:	add	r4, r6, sl
   13d70:	rsb	r1, r3, r8
   13d74:	bl	10d38 <memmove@plt>
   13d78:	b	13c54 <__assert_fail@plt+0x2cdc>
   13d7c:	cmp	r8, #15
   13d80:	beq	13fd4 <__assert_fail@plt+0x305c>
   13d84:	add	r3, r4, r8
   13d88:	cmp	r7, #0
   13d8c:	mov	r6, r3
   13d90:	bne	13e04 <__assert_fail@plt+0x2e8c>
   13d94:	ldr	ip, [sp, #60]	; 0x3c
   13d98:	cmp	r3, ip
   13d9c:	addls	r5, r1, r8
   13da0:	bls	13e20 <__assert_fail@plt+0x2ea8>
   13da4:	cmp	r9, #0
   13da8:	beq	13ffc <__assert_fail@plt+0x3084>
   13dac:	ldr	ip, [sp, #4]
   13db0:	cmp	ip, r3
   13db4:	rsbcc	r8, r4, ip
   13db8:	movcc	r3, ip
   13dbc:	cmp	r7, #0
   13dc0:	add	r5, r1, r8
   13dc4:	beq	13dd4 <__assert_fail@plt+0x2e5c>
   13dc8:	ldr	ip, [sp, #20]
   13dcc:	cmp	ip, r5
   13dd0:	bcc	13fe8 <__assert_fail@plt+0x3070>
   13dd4:	mov	r0, r4
   13dd8:	mov	r2, r8
   13ddc:	str	r3, [sp]
   13de0:	bl	10d74 <memcpy@plt>
   13de4:	ldm	sp, {r3, ip}
   13de8:	add	r6, r4, r8
   13dec:	cmp	r3, ip
   13df0:	beq	14048 <__assert_fail@plt+0x30d0>
   13df4:	ldrh	r2, [r5], #2
   13df8:	and	sl, sl, #15
   13dfc:	rsb	r1, r2, r6
   13e00:	b	13ce8 <__assert_fail@plt+0x2d70>
   13e04:	ldr	ip, [sp, #12]
   13e08:	cmp	r3, ip
   13e0c:	bhi	13da4 <__assert_fail@plt+0x2e2c>
   13e10:	ldr	ip, [sp, #64]	; 0x40
   13e14:	add	r5, r1, r8
   13e18:	cmp	r5, ip
   13e1c:	bhi	13da4 <__assert_fail@plt+0x2e2c>
   13e20:	ldr	r0, [r1]
   13e24:	add	r4, r4, #8
   13e28:	ldr	r2, [r1, #4]
   13e2c:	add	r1, r1, #8
   13e30:	str	r0, [r4, #-8]
   13e34:	str	r2, [r4, #-4]
   13e38:	cmp	r3, r4
   13e3c:	bhi	13e20 <__assert_fail@plt+0x2ea8>
   13e40:	b	13df4 <__assert_fail@plt+0x2e7c>
   13e44:	cmp	r8, #8
   13e48:	movhi	r3, #0
   13e4c:	movls	r3, #1
   13e50:	b	13c70 <__assert_fail@plt+0x2cf8>
   13e54:	cmp	r9, #0
   13e58:	add	r4, r6, sl
   13e5c:	beq	13eb8 <__assert_fail@plt+0x2f40>
   13e60:	ldr	r3, [sp, #12]
   13e64:	cmp	r4, r3
   13e68:	bls	13eb8 <__assert_fail@plt+0x2f40>
   13e6c:	ldr	r8, [sp, #4]
   13e70:	rsb	r2, r6, r8
   13e74:	cmp	sl, r2
   13e78:	movcc	r2, sl
   13e7c:	add	r3, r1, r2
   13e80:	add	r4, r6, r2
   13e84:	cmp	r6, r3
   13e88:	bcs	14140 <__assert_fail@plt+0x31c8>
   13e8c:	cmp	r6, r4
   13e90:	bcs	13ea4 <__assert_fail@plt+0x2f2c>
   13e94:	ldrb	r3, [r1], #1
   13e98:	strb	r3, [r6], #1
   13e9c:	cmp	r6, r4
   13ea0:	bne	13e94 <__assert_fail@plt+0x2f1c>
   13ea4:	ldr	sl, [sp, #4]
   13ea8:	cmp	sl, r4
   13eac:	bne	13c54 <__assert_fail@plt+0x2cdc>
   13eb0:	ldr	r6, [sp, #4]
   13eb4:	b	14048 <__assert_fail@plt+0x30d0>
   13eb8:	cmp	r2, #7
   13ebc:	bls	141e8 <__assert_fail@plt+0x3270>
   13ec0:	ldr	r0, [r1]
   13ec4:	add	r3, r1, #8
   13ec8:	ldr	r2, [r1, #4]
   13ecc:	str	r0, [r6]
   13ed0:	str	r2, [r6, #4]
   13ed4:	ldr	r8, [sp, #12]
   13ed8:	add	r2, r6, #8
   13edc:	cmp	r4, r8
   13ee0:	bhi	1417c <__assert_fail@plt+0x3204>
   13ee4:	ldr	r0, [r3]
   13ee8:	cmp	sl, #16
   13eec:	ldr	r1, [r3, #4]
   13ef0:	str	r0, [r6, #8]
   13ef4:	str	r1, [r2, #4]
   13ef8:	bls	13c54 <__assert_fail@plt+0x2cdc>
   13efc:	add	r6, r6, #16
   13f00:	add	r3, r3, #8
   13f04:	ldr	r1, [r3]
   13f08:	add	r6, r6, #8
   13f0c:	ldr	r2, [r3, #4]
   13f10:	add	r3, r3, #8
   13f14:	str	r1, [r6, #-8]
   13f18:	str	r2, [r6, #-4]
   13f1c:	cmp	r4, r6
   13f20:	bhi	13f04 <__assert_fail@plt+0x2f8c>
   13f24:	b	13c54 <__assert_fail@plt+0x2cdc>
   13f28:	ldr	r0, [sp, #48]	; 0x30
   13f2c:	cmp	r7, #0
   13f30:	ldrb	r3, [r5], #1
   13f34:	beq	13f40 <__assert_fail@plt+0x2fc8>
   13f38:	cmp	r5, r0
   13f3c:	bhi	13f60 <__assert_fail@plt+0x2fe8>
   13f40:	cmp	r3, #255	; 0xff
   13f44:	add	sl, sl, r3
   13f48:	beq	13f2c <__assert_fail@plt+0x2fb4>
   13f4c:	ldr	r8, [sp, #16]
   13f50:	cmp	r8, #0
   13f54:	beq	13d20 <__assert_fail@plt+0x2da8>
   13f58:	cmn	r6, sl
   13f5c:	bcc	13d20 <__assert_fail@plt+0x2da8>
   13f60:	ldr	ip, [sp, #44]	; 0x2c
   13f64:	rsb	r5, r5, ip
   13f68:	sub	r0, r5, #1
   13f6c:	ldr	r8, [sp, #32]
   13f70:	ldr	r2, [sp, #140]	; 0x8c
   13f74:	ldr	r3, [r8]
   13f78:	cmp	r2, r3
   13f7c:	bne	1422c <__assert_fail@plt+0x32b4>
   13f80:	add	sp, sp, #148	; 0x94
   13f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f88:	ldr	ip, [sp, #40]	; 0x28
   13f8c:	add	r4, r6, r3
   13f90:	mov	r2, r3
   13f94:	mov	r0, r6
   13f98:	rsb	r1, r3, ip
   13f9c:	rsb	sl, r3, sl
   13fa0:	bl	10d74 <memcpy@plt>
   13fa4:	rsb	r3, fp, r4
   13fa8:	cmp	sl, r3
   13fac:	bls	140e8 <__assert_fail@plt+0x3170>
   13fb0:	add	sl, r4, sl
   13fb4:	cmp	r4, sl
   13fb8:	bcs	13c54 <__assert_fail@plt+0x2cdc>
   13fbc:	mov	r3, fp
   13fc0:	ldrb	r2, [r3], #1
   13fc4:	strb	r2, [r4], #1
   13fc8:	cmp	r4, sl
   13fcc:	bne	13fc0 <__assert_fail@plt+0x3048>
   13fd0:	b	13c54 <__assert_fail@plt+0x2cdc>
   13fd4:	cmp	r7, #0
   13fd8:	beq	14098 <__assert_fail@plt+0x3120>
   13fdc:	ldr	ip, [sp, #56]	; 0x38
   13fe0:	cmp	r1, ip
   13fe4:	bcc	14138 <__assert_fail@plt+0x31c0>
   13fe8:	ldr	ip, [sp, #44]	; 0x2c
   13fec:	mov	r5, r1
   13ff0:	rsb	r5, r5, ip
   13ff4:	sub	r0, r5, #1
   13ff8:	b	13f6c <__assert_fail@plt+0x2ff4>
   13ffc:	ldr	sl, [sp, #4]
   14000:	subs	r2, r3, sl
   14004:	movne	r2, #1
   14008:	cmp	r7, #0
   1400c:	movne	r2, #0
   14010:	cmp	r2, #0
   14014:	bne	13fe8 <__assert_fail@plt+0x3070>
   14018:	cmp	r7, #0
   1401c:	beq	140e0 <__assert_fail@plt+0x3168>
   14020:	ldr	fp, [sp, #20]
   14024:	add	r2, r1, r8
   14028:	cmp	r2, fp
   1402c:	bne	13fe8 <__assert_fail@plt+0x3070>
   14030:	cmp	sl, r3
   14034:	bcc	13fe8 <__assert_fail@plt+0x3070>
   14038:	mov	r5, fp
   1403c:	mov	r0, r4
   14040:	mov	r2, r8
   14044:	bl	10d74 <memcpy@plt>
   14048:	cmp	r7, #0
   1404c:	ldrne	sl, [sp, #52]	; 0x34
   14050:	ldreq	fp, [sp, #44]	; 0x2c
   14054:	rsbne	r0, sl, r6
   14058:	rsbeq	r0, fp, r5
   1405c:	b	13f6c <__assert_fail@plt+0x2ff4>
   14060:	ldr	r2, [r1, #4]
   14064:	mov	r3, r1
   14068:	ldr	r0, [r1]
   1406c:	add	sl, sl, #4
   14070:	add	r4, r6, sl
   14074:	str	r2, [r6, #4]
   14078:	str	r0, [r6]
   1407c:	ldr	r2, [r3, #8]!
   14080:	ldr	r3, [r3, #4]
   14084:	str	r2, [r6, #8]
   14088:	str	r3, [r6, #12]
   1408c:	ldrh	r3, [r1, #16]
   14090:	strh	r3, [r6, #16]
   14094:	b	13c54 <__assert_fail@plt+0x2cdc>
   14098:	ldr	r2, [sp, #56]	; 0x38
   1409c:	ldrb	r3, [r1], #1
   140a0:	cmp	r7, #0
   140a4:	add	r8, r8, r3
   140a8:	beq	140d4 <__assert_fail@plt+0x315c>
   140ac:	cmp	r1, r2
   140b0:	bcc	140d4 <__assert_fail@plt+0x315c>
   140b4:	ldr	ip, [sp, #16]
   140b8:	cmp	ip, #0
   140bc:	beq	13d84 <__assert_fail@plt+0x2e0c>
   140c0:	adds	r3, r4, r8
   140c4:	bcs	13fe8 <__assert_fail@plt+0x3070>
   140c8:	cmn	r1, r8
   140cc:	bcc	13d88 <__assert_fail@plt+0x2e10>
   140d0:	b	13fe8 <__assert_fail@plt+0x3070>
   140d4:	cmp	r3, #255	; 0xff
   140d8:	beq	1409c <__assert_fail@plt+0x3124>
   140dc:	b	140b4 <__assert_fail@plt+0x313c>
   140e0:	add	r5, r1, r8
   140e4:	b	1403c <__assert_fail@plt+0x30c4>
   140e8:	mov	r0, r4
   140ec:	mov	r2, sl
   140f0:	mov	r1, fp
   140f4:	add	r4, r4, sl
   140f8:	bl	10d74 <memcpy@plt>
   140fc:	b	13c54 <__assert_fail@plt+0x2cdc>
   14100:	ldr	r3, [sp, #20]
   14104:	cmp	r5, #0
   14108:	ldr	r8, [sp, #4]
   1410c:	sub	r3, r3, #10
   14110:	str	r3, [sp, #24]
   14114:	sub	r8, r8, #26
   14118:	str	r8, [sp, #28]
   1411c:	bne	13bf8 <__assert_fail@plt+0x2c80>
   14120:	ldr	sl, [sp, #44]	; 0x2c
   14124:	ldrb	r3, [sl]
   14128:	cmp	r3, #0
   1412c:	moveq	r0, #1
   14130:	mvnne	r0, #0
   14134:	b	13f6c <__assert_fail@plt+0x2ff4>
   14138:	mov	r2, ip
   1413c:	b	1409c <__assert_fail@plt+0x3124>
   14140:	mov	r0, r6
   14144:	bl	10d74 <memcpy@plt>
   14148:	ldr	sl, [sp, #4]
   1414c:	cmp	sl, r4
   14150:	bne	13c54 <__assert_fail@plt+0x2cdc>
   14154:	b	13eb0 <__assert_fail@plt+0x2f38>
   14158:	mvn	r0, #0
   1415c:	b	13f6c <__assert_fail@plt+0x2ff4>
   14160:	cmp	r6, #1
   14164:	bne	14158 <__assert_fail@plt+0x31e0>
   14168:	ldr	r8, [sp, #44]	; 0x2c
   1416c:	ldrb	r0, [r8]
   14170:	subs	r0, r0, #0
   14174:	mvnne	r0, #0
   14178:	b	13f6c <__assert_fail@plt+0x2ff4>
   1417c:	ldr	sl, [sp, #36]	; 0x24
   14180:	cmp	r4, sl
   14184:	bhi	13f60 <__assert_fail@plt+0x2fe8>
   14188:	ldr	ip, [sp, #68]	; 0x44
   1418c:	cmp	r2, ip
   14190:	bcs	141cc <__assert_fail@plt+0x3254>
   14194:	mov	r0, r3
   14198:	mov	r1, r2
   1419c:	ldr	r6, [r0]
   141a0:	add	r1, r1, #8
   141a4:	ldr	ip, [r0, #4]
   141a8:	add	r0, r0, #8
   141ac:	ldr	r8, [sp, #68]	; 0x44
   141b0:	str	r6, [r1, #-8]
   141b4:	str	ip, [r1, #-4]
   141b8:	cmp	r8, r1
   141bc:	bhi	1419c <__assert_fail@plt+0x3224>
   141c0:	rsb	r1, r2, r8
   141c4:	mov	r2, r8
   141c8:	add	r3, r3, r1
   141cc:	cmp	r2, r4
   141d0:	bcs	13c54 <__assert_fail@plt+0x2cdc>
   141d4:	ldrb	r1, [r3], #1
   141d8:	strb	r1, [r2], #1
   141dc:	cmp	r2, r4
   141e0:	bne	141d4 <__assert_fail@plt+0x325c>
   141e4:	b	13c54 <__assert_fail@plt+0x2cdc>
   141e8:	ldrb	r3, [r1]
   141ec:	add	ip, sp, #144	; 0x90
   141f0:	add	r2, ip, r2, lsl #2
   141f4:	strb	r3, [r6]
   141f8:	ldr	r0, [r2, #-68]	; 0xffffffbc
   141fc:	ldrb	r3, [r1, #1]
   14200:	ldr	r2, [r2, #-36]	; 0xffffffdc
   14204:	add	r0, r1, r0
   14208:	strb	r3, [r6, #1]
   1420c:	rsb	r3, r2, r0
   14210:	ldrb	r2, [r1, #2]
   14214:	strb	r2, [r6, #2]
   14218:	ldrb	r2, [r1, #3]
   1421c:	strb	r2, [r6, #3]
   14220:	ldr	r2, [r0]
   14224:	str	r2, [r6, #4]
   14228:	b	13ed4 <__assert_fail@plt+0x2f5c>
   1422c:	bl	10db0 <__stack_chk_fail@plt>
   14230:	cmp	r9, #0
   14234:	beq	13f60 <__assert_fail@plt+0x2fe8>
   14238:	ldr	ip, [sp, #4]
   1423c:	rsb	r3, r6, ip
   14240:	cmp	sl, r3
   14244:	movcs	sl, r3
   14248:	b	13d54 <__assert_fail@plt+0x2ddc>
   1424c:	movw	r0, #10803	; 0x2a33
   14250:	bx	lr
   14254:	movw	r0, #16832	; 0x41c0
   14258:	movt	r0, #2
   1425c:	bx	lr
   14260:	cmp	r0, #2113929216	; 0x7e000000
   14264:	asrls	r2, r0, #31
   14268:	movwls	r3, #32897	; 0x8081
   1426c:	movtls	r3, #32896	; 0x8080
   14270:	smullls	r1, r3, r3, r0
   14274:	addls	r3, r3, r0
   14278:	rsbls	r3, r2, r3, asr #7
   1427c:	addls	r0, r3, r0
   14280:	addls	r0, r0, #16
   14284:	movhi	r0, #0
   14288:	bx	lr
   1428c:	movw	r0, #16416	; 0x4020
   14290:	bx	lr
   14294:	push	{r4, r5, r6, r7, r8, r9, lr}
   14298:	sub	sp, sp, #36	; 0x24
   1429c:	mov	r5, r1
   142a0:	mov	r7, r2
   142a4:	ldr	ip, [sp, #68]	; 0x44
   142a8:	movw	r2, #16416	; 0x4020
   142ac:	mov	r1, #0
   142b0:	mov	r4, r3
   142b4:	cmp	ip, #1
   142b8:	movge	r8, ip
   142bc:	movlt	r8, #1
   142c0:	ldr	r6, [sp, #64]	; 0x40
   142c4:	mov	r9, r0
   142c8:	bl	10e88 <memset@plt>
   142cc:	cmp	r4, #2113929216	; 0x7e000000
   142d0:	asrls	r3, r4, #31
   142d4:	movwls	r2, #32897	; 0x8081
   142d8:	movhi	r3, #0
   142dc:	movtls	r2, #32896	; 0x8080
   142e0:	smullls	r1, r2, r2, r4
   142e4:	addls	r2, r2, r4
   142e8:	rsbls	r3, r3, r2, asr #7
   142ec:	addls	r3, r4, r3
   142f0:	addls	r3, r3, #16
   142f4:	cmp	r6, r3
   142f8:	mov	r3, #10
   142fc:	movt	r3, #1
   14300:	blt	14354 <__assert_fail@plt+0x33dc>
   14304:	cmp	r4, r3
   14308:	str	r8, [sp, #24]
   1430c:	mov	r0, r9
   14310:	ble	143e0 <__assert_fail@plt+0x3468>
   14314:	cmp	r5, #65536	; 0x10000
   14318:	mov	r2, r7
   1431c:	mov	r3, r4
   14320:	mov	r1, r5
   14324:	movcc	ip, #2
   14328:	movcs	ip, #1
   1432c:	str	ip, [sp, #12]
   14330:	mov	ip, #0
   14334:	str	ip, [sp]
   14338:	str	ip, [sp, #4]
   1433c:	str	ip, [sp, #8]
   14340:	str	ip, [sp, #16]
   14344:	str	ip, [sp, #20]
   14348:	bl	12e70 <__assert_fail@plt+0x1ef8>
   1434c:	add	sp, sp, #36	; 0x24
   14350:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14354:	cmp	r4, r3
   14358:	str	r6, [sp, #4]
   1435c:	mov	r0, r9
   14360:	str	r8, [sp, #24]
   14364:	ble	143a8 <__assert_fail@plt+0x3430>
   14368:	cmp	r5, #65536	; 0x10000
   1436c:	mov	lr, #1
   14370:	mov	r2, r7
   14374:	mov	r3, r4
   14378:	movcc	ip, #2
   1437c:	movcs	ip, #1
   14380:	mov	r1, r5
   14384:	str	ip, [sp, #12]
   14388:	str	lr, [sp, #8]
   1438c:	mov	ip, #0
   14390:	str	ip, [sp]
   14394:	str	ip, [sp, #16]
   14398:	str	ip, [sp, #20]
   1439c:	bl	12e70 <__assert_fail@plt+0x1ef8>
   143a0:	add	sp, sp, #36	; 0x24
   143a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   143a8:	mov	ip, #0
   143ac:	mov	r3, r4
   143b0:	mov	lr, #3
   143b4:	mov	r1, r5
   143b8:	mov	r2, r7
   143bc:	mov	r4, #1
   143c0:	str	ip, [sp]
   143c4:	str	ip, [sp, #16]
   143c8:	str	ip, [sp, #20]
   143cc:	str	r4, [sp, #8]
   143d0:	str	lr, [sp, #12]
   143d4:	bl	12e70 <__assert_fail@plt+0x1ef8>
   143d8:	add	sp, sp, #36	; 0x24
   143dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   143e0:	mov	ip, #0
   143e4:	mov	lr, #3
   143e8:	mov	r1, r5
   143ec:	mov	r2, r7
   143f0:	mov	r3, r4
   143f4:	str	ip, [sp]
   143f8:	str	ip, [sp, #4]
   143fc:	str	ip, [sp, #8]
   14400:	str	ip, [sp, #16]
   14404:	str	ip, [sp, #20]
   14408:	str	lr, [sp, #12]
   1440c:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14410:	add	sp, sp, #36	; 0x24
   14414:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14418:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1441c:	sub	sp, sp, #32
   14420:	mov	r8, r2
   14424:	mov	r4, r3
   14428:	ldr	ip, [sp, #68]	; 0x44
   1442c:	mov	r6, r1
   14430:	ldr	r7, [sp, #64]	; 0x40
   14434:	mov	r5, r0
   14438:	cmp	ip, #1
   1443c:	movge	r9, ip
   14440:	movlt	r9, #1
   14444:	cmp	r3, #2113929216	; 0x7e000000
   14448:	asrls	r3, r3, #31
   1444c:	movwls	r2, #32897	; 0x8081
   14450:	movtls	r2, #32896	; 0x8080
   14454:	movhi	r3, #0
   14458:	smullls	r1, r2, r2, r4
   1445c:	addls	r2, r2, r4
   14460:	rsbls	r3, r3, r2, asr #7
   14464:	addls	r3, r4, r3
   14468:	addls	r3, r3, #16
   1446c:	cmp	r7, r3
   14470:	mov	r3, #10
   14474:	movt	r3, #1
   14478:	blt	144d8 <__assert_fail@plt+0x3560>
   1447c:	cmp	r4, r3
   14480:	ble	14594 <__assert_fail@plt+0x361c>
   14484:	cmp	r6, #65536	; 0x10000
   14488:	mov	r1, r4
   1448c:	movcc	r7, #2
   14490:	movcs	r7, #1
   14494:	mov	r2, r7
   14498:	bl	13a44 <__assert_fail@plt+0x2acc>
   1449c:	mov	ip, #0
   144a0:	str	r7, [sp, #12]
   144a4:	mov	r0, r5
   144a8:	str	r9, [sp, #24]
   144ac:	mov	r1, r6
   144b0:	mov	r2, r8
   144b4:	mov	r3, r4
   144b8:	str	ip, [sp]
   144bc:	str	ip, [sp, #4]
   144c0:	str	ip, [sp, #8]
   144c4:	str	ip, [sp, #16]
   144c8:	str	ip, [sp, #20]
   144cc:	bl	12e70 <__assert_fail@plt+0x1ef8>
   144d0:	add	sp, sp, #32
   144d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   144d8:	cmp	r4, r3
   144dc:	ble	14538 <__assert_fail@plt+0x35c0>
   144e0:	cmp	r6, #65536	; 0x10000
   144e4:	mov	r1, r4
   144e8:	movcc	sl, #2
   144ec:	movcs	sl, #1
   144f0:	mov	r2, sl
   144f4:	bl	13a44 <__assert_fail@plt+0x2acc>
   144f8:	mov	ip, #0
   144fc:	mov	lr, #1
   14500:	str	sl, [sp, #12]
   14504:	str	r7, [sp, #4]
   14508:	mov	r0, r5
   1450c:	str	r9, [sp, #24]
   14510:	mov	r1, r6
   14514:	mov	r2, r8
   14518:	mov	r3, r4
   1451c:	str	ip, [sp]
   14520:	str	ip, [sp, #16]
   14524:	str	ip, [sp, #20]
   14528:	str	lr, [sp, #8]
   1452c:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14530:	add	sp, sp, #32
   14534:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14538:	mov	r1, r4
   1453c:	mov	r2, #3
   14540:	bl	13a44 <__assert_fail@plt+0x2acc>
   14544:	mov	r3, #16384	; 0x4000
   14548:	ldr	r3, [r5, r3]
   1454c:	cmp	r3, #0
   14550:	beq	145f0 <__assert_fail@plt+0x3678>
   14554:	mov	lr, #0
   14558:	mov	ip, #1
   1455c:	mov	r3, r4
   14560:	str	r7, [sp, #4]
   14564:	mov	r4, #3
   14568:	mov	r0, r5
   1456c:	str	r9, [sp, #24]
   14570:	mov	r1, r6
   14574:	mov	r2, r8
   14578:	str	lr, [sp]
   1457c:	str	lr, [sp, #16]
   14580:	str	ip, [sp, #8]
   14584:	str	ip, [sp, #20]
   14588:	str	r4, [sp, #12]
   1458c:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14590:	b	14530 <__assert_fail@plt+0x35b8>
   14594:	mov	r1, r4
   14598:	mov	r2, #3
   1459c:	bl	13a44 <__assert_fail@plt+0x2acc>
   145a0:	mov	r3, #16384	; 0x4000
   145a4:	ldr	ip, [r5, r3]
   145a8:	cmp	ip, #0
   145ac:	beq	1462c <__assert_fail@plt+0x36b4>
   145b0:	mov	ip, #0
   145b4:	mov	r3, r4
   145b8:	mov	lr, #1
   145bc:	mov	r4, #3
   145c0:	str	r9, [sp, #24]
   145c4:	mov	r0, r5
   145c8:	mov	r1, r6
   145cc:	mov	r2, r8
   145d0:	str	ip, [sp]
   145d4:	str	ip, [sp, #4]
   145d8:	str	ip, [sp, #8]
   145dc:	str	ip, [sp, #16]
   145e0:	str	r4, [sp, #12]
   145e4:	str	lr, [sp, #20]
   145e8:	bl	12e70 <__assert_fail@plt+0x1ef8>
   145ec:	b	14530 <__assert_fail@plt+0x35b8>
   145f0:	str	r3, [sp]
   145f4:	mov	lr, #1
   145f8:	str	r3, [sp, #16]
   145fc:	mov	ip, #3
   14600:	str	r3, [sp, #20]
   14604:	mov	r0, r5
   14608:	str	r7, [sp, #4]
   1460c:	mov	r1, r6
   14610:	mov	r2, r8
   14614:	mov	r3, r4
   14618:	str	r9, [sp, #24]
   1461c:	str	lr, [sp, #8]
   14620:	str	ip, [sp, #12]
   14624:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14628:	b	14530 <__assert_fail@plt+0x35b8>
   1462c:	str	ip, [sp]
   14630:	mov	r0, r5
   14634:	str	ip, [sp, #4]
   14638:	mov	r1, r6
   1463c:	str	ip, [sp, #8]
   14640:	mov	r2, r8
   14644:	str	ip, [sp, #16]
   14648:	mov	r3, r4
   1464c:	str	ip, [sp, #20]
   14650:	mov	ip, #3
   14654:	str	r9, [sp, #24]
   14658:	str	ip, [sp, #12]
   1465c:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14660:	b	14530 <__assert_fail@plt+0x35b8>
   14664:	push	{r4, r5, r6, lr}
   14668:	sub	sp, sp, #16384	; 0x4000
   1466c:	sub	sp, sp, #48	; 0x30
   14670:	movw	r4, #28936	; 0x7108
   14674:	add	ip, sp, #16384	; 0x4000
   14678:	movt	r4, #3
   1467c:	mov	r6, r1
   14680:	mov	r5, r2
   14684:	ldr	lr, [ip, #64]	; 0x40
   14688:	mov	r1, r0
   1468c:	ldr	ip, [r4]
   14690:	mov	r2, r6
   14694:	str	r3, [sp]
   14698:	add	r0, sp, #8
   1469c:	str	lr, [sp, #4]
   146a0:	add	lr, sp, #16384	; 0x4000
   146a4:	mov	r3, r5
   146a8:	str	ip, [lr, #44]	; 0x2c
   146ac:	bl	14294 <__assert_fail@plt+0x331c>
   146b0:	add	r3, sp, #16384	; 0x4000
   146b4:	ldr	r2, [r3, #44]	; 0x2c
   146b8:	ldr	r3, [r4]
   146bc:	cmp	r2, r3
   146c0:	bne	146d0 <__assert_fail@plt+0x3758>
   146c4:	add	sp, sp, #16384	; 0x4000
   146c8:	add	sp, sp, #48	; 0x30
   146cc:	pop	{r4, r5, r6, pc}
   146d0:	bl	10db0 <__stack_chk_fail@plt>
   146d4:	push	{lr}		; (str lr, [sp, #-4]!)
   146d8:	sub	sp, sp, #12
   146dc:	mov	ip, #1
   146e0:	str	ip, [sp]
   146e4:	bl	14664 <__assert_fail@plt+0x36ec>
   146e8:	add	sp, sp, #12
   146ec:	pop	{pc}		; (ldr pc, [sp], #4)
   146f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   146f4:	movw	r4, #28936	; 0x7108
   146f8:	movt	r4, #3
   146fc:	sub	sp, sp, #16384	; 0x4000
   14700:	sub	sp, sp, #76	; 0x4c
   14704:	mov	r9, r3
   14708:	ldr	ip, [r4]
   1470c:	add	r3, sp, #16384	; 0x4000
   14710:	mov	r5, r2
   14714:	mov	r8, r0
   14718:	mov	r7, r1
   1471c:	movw	r2, #16416	; 0x4020
   14720:	mov	r1, #0
   14724:	add	r0, sp, #32
   14728:	str	ip, [r3, #68]	; 0x44
   1472c:	ldr	r6, [r3, #104]	; 0x68
   14730:	bl	10e88 <memset@plt>
   14734:	mov	ip, #10
   14738:	movt	ip, #1
   1473c:	cmp	r5, ip
   14740:	str	r9, [sp, #4]
   14744:	add	r0, sp, #32
   14748:	str	r6, [sp, #24]
   1474c:	mov	r1, r8
   14750:	mov	r2, r7
   14754:	mov	r3, r5
   14758:	mov	ip, #0
   1475c:	ble	1479c <__assert_fail@plt+0x3824>
   14760:	mov	lr, #1
   14764:	str	ip, [sp]
   14768:	str	ip, [sp, #16]
   1476c:	str	ip, [sp, #20]
   14770:	str	lr, [sp, #8]
   14774:	str	lr, [sp, #12]
   14778:	bl	12e70 <__assert_fail@plt+0x1ef8>
   1477c:	add	r3, sp, #16384	; 0x4000
   14780:	ldr	r2, [r3, #68]	; 0x44
   14784:	ldr	r3, [r4]
   14788:	cmp	r2, r3
   1478c:	bne	147c0 <__assert_fail@plt+0x3848>
   14790:	add	sp, sp, #16384	; 0x4000
   14794:	add	sp, sp, #76	; 0x4c
   14798:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1479c:	mov	r5, #1
   147a0:	mov	lr, #3
   147a4:	str	ip, [sp]
   147a8:	str	ip, [sp, #16]
   147ac:	str	ip, [sp, #20]
   147b0:	str	r5, [sp, #8]
   147b4:	str	lr, [sp, #12]
   147b8:	bl	12e70 <__assert_fail@plt+0x1ef8>
   147bc:	b	1477c <__assert_fail@plt+0x3804>
   147c0:	bl	10db0 <__stack_chk_fail@plt>
   147c4:	push	{r4, r5, r6, r7, r8, lr}
   147c8:	movw	r4, #28936	; 0x7108
   147cc:	movt	r4, #3
   147d0:	sub	sp, sp, #16384	; 0x4000
   147d4:	sub	sp, sp, #72	; 0x48
   147d8:	mov	r5, r3
   147dc:	ldr	ip, [r4]
   147e0:	add	r3, sp, #16384	; 0x4000
   147e4:	mov	r6, r2
   147e8:	mov	r7, r0
   147ec:	movw	r2, #16416	; 0x4020
   147f0:	mov	r8, r1
   147f4:	add	r0, sp, #32
   147f8:	mov	r1, #0
   147fc:	str	ip, [r3, #68]	; 0x44
   14800:	bl	10e88 <memset@plt>
   14804:	ldr	ip, [r6]
   14808:	cmp	ip, #2113929216	; 0x7e000000
   1480c:	asrls	r3, ip, #31
   14810:	movwls	r2, #32897	; 0x8081
   14814:	movhi	r3, #0
   14818:	movtls	r2, #32896	; 0x8080
   1481c:	smullls	r1, r2, r2, ip
   14820:	addls	r2, r2, ip
   14824:	rsbls	r3, r3, r2, asr #7
   14828:	addls	r3, ip, r3
   1482c:	addls	r3, r3, #16
   14830:	cmp	r5, r3
   14834:	bge	148b0 <__assert_fail@plt+0x3938>
   14838:	mov	r3, #10
   1483c:	movt	r3, #1
   14840:	cmp	ip, r3
   14844:	str	r6, [sp]
   14848:	add	r0, sp, #32
   1484c:	str	r5, [sp, #4]
   14850:	ble	148d4 <__assert_fail@plt+0x395c>
   14854:	cmp	r7, #65536	; 0x10000
   14858:	mov	r3, ip
   1485c:	mov	r2, r8
   14860:	mov	r1, r7
   14864:	movcc	ip, #2
   14868:	movcs	ip, #1
   1486c:	str	ip, [sp, #12]
   14870:	mov	ip, #0
   14874:	mov	lr, #2
   14878:	str	lr, [sp, #8]
   1487c:	mov	lr, #1
   14880:	str	ip, [sp, #16]
   14884:	str	ip, [sp, #20]
   14888:	str	lr, [sp, #24]
   1488c:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14890:	add	r3, sp, #16384	; 0x4000
   14894:	ldr	r2, [r3, #68]	; 0x44
   14898:	ldr	r3, [r4]
   1489c:	cmp	r2, r3
   148a0:	bne	148f8 <__assert_fail@plt+0x3980>
   148a4:	add	sp, sp, #16384	; 0x4000
   148a8:	add	sp, sp, #72	; 0x48
   148ac:	pop	{r4, r5, r6, r7, r8, pc}
   148b0:	mov	r3, ip
   148b4:	str	r5, [sp]
   148b8:	mov	ip, #1
   148bc:	add	r0, sp, #32
   148c0:	mov	r1, r7
   148c4:	mov	r2, r8
   148c8:	str	ip, [sp, #4]
   148cc:	bl	14294 <__assert_fail@plt+0x331c>
   148d0:	b	14890 <__assert_fail@plt+0x3918>
   148d4:	mov	r3, ip
   148d8:	mov	lr, #3
   148dc:	mov	ip, #2
   148e0:	mov	r1, r7
   148e4:	str	ip, [sp, #8]
   148e8:	mov	r2, r8
   148ec:	mov	ip, #0
   148f0:	str	lr, [sp, #12]
   148f4:	b	1487c <__assert_fail@plt+0x3904>
   148f8:	bl	10db0 <__stack_chk_fail@plt>
   148fc:	push	{r4, lr}
   14900:	movw	r0, #16416	; 0x4020
   14904:	bl	10e1c <malloc@plt>
   14908:	subs	r4, r0, #0
   1490c:	beq	1491c <__assert_fail@plt+0x39a4>
   14910:	mov	r1, #0
   14914:	movw	r2, #16416	; 0x4020
   14918:	bl	10e88 <memset@plt>
   1491c:	mov	r0, r4
   14920:	pop	{r4, pc}
   14924:	mov	r1, #0
   14928:	movw	r2, #16416	; 0x4020
   1492c:	b	10e88 <memset@plt>
   14930:	mov	r1, #0
   14934:	mov	r2, #2
   14938:	b	13a44 <__assert_fail@plt+0x2acc>
   1493c:	cmp	r0, #0
   14940:	push	{r3, lr}
   14944:	beq	1494c <__assert_fail@plt+0x39d4>
   14948:	bl	10d44 <free@plt>
   1494c:	mov	r0, #0
   14950:	pop	{r3, pc}
   14954:	push	{r4, r5, r6, r7, r8, lr}
   14958:	mov	r4, r1
   1495c:	mov	r6, r2
   14960:	add	r8, r4, r2
   14964:	mov	r1, #0
   14968:	movw	r2, #16416	; 0x4020
   1496c:	mov	r5, r0
   14970:	bl	10e88 <memset@plt>
   14974:	rsb	r0, r4, r8
   14978:	mov	r3, #16384	; 0x4000
   1497c:	cmp	r0, #65536	; 0x10000
   14980:	ldr	r7, [r5, r3]
   14984:	subgt	r4, r8, #65536	; 0x10000
   14988:	movw	r1, #16400	; 0x4010
   1498c:	movgt	r0, #65536	; 0x10000
   14990:	cmp	r6, #3
   14994:	movw	ip, #16392	; 0x4008
   14998:	movw	r2, #16390	; 0x4006
   1499c:	str	r0, [r5, r1]
   149a0:	add	r6, r7, #65536	; 0x10000
   149a4:	mov	r1, #2
   149a8:	str	r6, [r5, r3]
   149ac:	str	r4, [r5, ip]
   149b0:	strh	r1, [r5, r2]
   149b4:	ble	149fc <__assert_fail@plt+0x3a84>
   149b8:	sub	r6, r8, #4
   149bc:	cmp	r4, r6
   149c0:	pophi	{r4, r5, r6, r7, r8, pc}
   149c4:	rsb	r7, r7, #-16777216	; 0xff000000
   149c8:	add	r7, r7, #16711680	; 0xff0000
   149cc:	add	r7, r8, r7
   149d0:	mov	r0, r4
   149d4:	mov	r1, r5
   149d8:	add	r4, r4, #3
   149dc:	mov	r2, #2
   149e0:	mov	r3, r7
   149e4:	bl	12cc8 <__assert_fail@plt+0x1d50>
   149e8:	cmp	r4, r6
   149ec:	bls	149d0 <__assert_fail@plt+0x3a58>
   149f0:	movw	r3, #16400	; 0x4010
   149f4:	ldr	r0, [r5, r3]
   149f8:	pop	{r4, r5, r6, r7, r8, pc}
   149fc:	mov	r0, #0
   14a00:	pop	{r4, r5, r6, r7, r8, pc}
   14a04:	cmp	r1, #0
   14a08:	beq	14a20 <__assert_fail@plt+0x3aa8>
   14a0c:	mov	r3, #16384	; 0x4000
   14a10:	ldr	r2, [r0, r3]
   14a14:	cmp	r2, #0
   14a18:	moveq	r2, #65536	; 0x10000
   14a1c:	streq	r2, [r0, r3]
   14a20:	movw	r3, #16396	; 0x400c
   14a24:	str	r1, [r0, r3]
   14a28:	bx	lr
   14a2c:	movw	ip, #16388	; 0x4004
   14a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a34:	movw	r8, #16392	; 0x4008
   14a38:	ldrh	r9, [r0, ip]
   14a3c:	movw	r7, #16400	; 0x4010
   14a40:	mov	r4, r0
   14a44:	mov	fp, r2
   14a48:	cmp	r9, #0
   14a4c:	ldr	r2, [r0, r8]
   14a50:	ldr	sl, [r0, r7]
   14a54:	sub	sp, sp, #44	; 0x2c
   14a58:	mov	r5, r1
   14a5c:	mov	r6, r3
   14a60:	movne	r0, #0
   14a64:	beq	14a70 <__assert_fail@plt+0x3af8>
   14a68:	add	sp, sp, #44	; 0x2c
   14a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a70:	mov	r1, r3
   14a74:	ldr	r3, [sp, #84]	; 0x54
   14a78:	str	r2, [sp, #32]
   14a7c:	cmp	r3, #1
   14a80:	movlt	r3, #1
   14a84:	str	r3, [sp, #36]	; 0x24
   14a88:	bl	12d08 <__assert_fail@plt+0x1d90>
   14a8c:	ldr	r0, [r4, r7]
   14a90:	ldr	r2, [sp, #32]
   14a94:	sub	r3, r0, #1
   14a98:	cmp	r3, #3
   14a9c:	add	r1, r2, sl
   14aa0:	bhi	14b3c <__assert_fail@plt+0x3bc4>
   14aa4:	cmp	r1, r5
   14aa8:	beq	14b3c <__assert_fail@plt+0x3bc4>
   14aac:	add	r3, r5, r6
   14ab0:	mov	r2, r5
   14ab4:	cmp	r3, r2
   14ab8:	str	r9, [r4, r7]
   14abc:	mov	r1, r5
   14ac0:	str	r5, [r4, r8]
   14ac4:	bhi	14b4c <__assert_fail@plt+0x3bd4>
   14ac8:	cmp	r1, r5
   14acc:	beq	14bec <__assert_fail@plt+0x3c74>
   14ad0:	movw	r3, #16396	; 0x400c
   14ad4:	ldr	r1, [r4, r3]
   14ad8:	cmp	r1, #0
   14adc:	beq	14c68 <__assert_fail@plt+0x3cf0>
   14ae0:	cmp	r6, #4096	; 0x1000
   14ae4:	ble	14b8c <__assert_fail@plt+0x3c14>
   14ae8:	movw	r2, #16416	; 0x4020
   14aec:	mov	r0, r4
   14af0:	bl	10d74 <memcpy@plt>
   14af4:	ldr	r1, [sp, #80]	; 0x50
   14af8:	ldr	r3, [sp, #36]	; 0x24
   14afc:	mov	r2, fp
   14b00:	mov	ip, #2
   14b04:	mov	r0, r4
   14b08:	str	r1, [sp, #4]
   14b0c:	mov	r1, #1
   14b10:	str	r3, [sp, #24]
   14b14:	mov	r3, #0
   14b18:	str	r1, [sp, #8]
   14b1c:	str	r3, [sp]
   14b20:	str	r3, [sp, #20]
   14b24:	mov	r1, r5
   14b28:	str	ip, [sp, #12]
   14b2c:	mov	r3, r6
   14b30:	str	ip, [sp, #16]
   14b34:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14b38:	b	14bd4 <__assert_fail@plt+0x3c5c>
   14b3c:	ldr	r2, [r4, r8]
   14b40:	add	r3, r5, r6
   14b44:	cmp	r3, r2
   14b48:	bls	14ac8 <__assert_fail@plt+0x3b50>
   14b4c:	cmp	r1, r3
   14b50:	bls	14ac8 <__assert_fail@plt+0x3b50>
   14b54:	rsb	r3, r3, r1
   14b58:	cmp	r3, #65536	; 0x10000
   14b5c:	bhi	14c50 <__assert_fail@plt+0x3cd8>
   14b60:	cmp	r3, #3
   14b64:	rsbhi	r2, r3, #0
   14b68:	movls	r3, #0
   14b6c:	movwhi	r0, #16400	; 0x4010
   14b70:	movwls	r0, #16400	; 0x4010
   14b74:	movls	r2, r3
   14b78:	str	r3, [r4, r0]
   14b7c:	movw	r3, #16392	; 0x4008
   14b80:	add	r2, r1, r2
   14b84:	str	r2, [r4, r3]
   14b88:	b	14ac8 <__assert_fail@plt+0x3b50>
   14b8c:	ldr	r1, [sp, #80]	; 0x50
   14b90:	mov	r0, #1
   14b94:	ldr	r3, [sp, #36]	; 0x24
   14b98:	mov	r2, fp
   14b9c:	str	r0, [sp, #8]
   14ba0:	mov	r0, r4
   14ba4:	str	r1, [sp, #4]
   14ba8:	mov	r1, #2
   14bac:	str	r3, [sp, #24]
   14bb0:	mov	r3, #0
   14bb4:	str	r1, [sp, #12]
   14bb8:	mov	r1, r5
   14bbc:	str	r3, [sp]
   14bc0:	str	r3, [sp, #20]
   14bc4:	mov	r3, #3
   14bc8:	str	r3, [sp, #16]
   14bcc:	mov	r3, r6
   14bd0:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14bd4:	movw	r2, #16392	; 0x4008
   14bd8:	movw	r3, #16400	; 0x4010
   14bdc:	str	r5, [r4, r2]
   14be0:	str	r6, [r4, r3]
   14be4:	add	sp, sp, #44	; 0x2c
   14be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bec:	movw	r3, #16400	; 0x4010
   14bf0:	ldr	r3, [r4, r3]
   14bf4:	cmp	r3, #65536	; 0x10000
   14bf8:	bcs	14c0c <__assert_fail@plt+0x3c94>
   14bfc:	mov	r2, #16384	; 0x4000
   14c00:	ldr	r2, [r4, r2]
   14c04:	cmp	r3, r2
   14c08:	bcc	14cd0 <__assert_fail@plt+0x3d58>
   14c0c:	ldr	r3, [sp, #80]	; 0x50
   14c10:	mov	lr, #0
   14c14:	mov	ip, #1
   14c18:	mov	r0, r4
   14c1c:	mov	r2, fp
   14c20:	mov	r4, #2
   14c24:	str	r3, [sp, #4]
   14c28:	ldr	r3, [sp, #36]	; 0x24
   14c2c:	str	lr, [sp]
   14c30:	str	lr, [sp, #20]
   14c34:	str	r3, [sp, #24]
   14c38:	mov	r3, r6
   14c3c:	str	ip, [sp, #8]
   14c40:	str	ip, [sp, #16]
   14c44:	str	r4, [sp, #12]
   14c48:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14c4c:	b	14a68 <__assert_fail@plt+0x3af0>
   14c50:	movw	r3, #16400	; 0x4010
   14c54:	mov	r0, #65536	; 0x10000
   14c58:	mov	r2, #0
   14c5c:	str	r0, [r4, r3]
   14c60:	movt	r2, #65535	; 0xffff
   14c64:	b	14b7c <__assert_fail@plt+0x3c04>
   14c68:	movw	r3, #16400	; 0x4010
   14c6c:	ldr	r3, [r4, r3]
   14c70:	cmp	r3, #65536	; 0x10000
   14c74:	bcs	14c88 <__assert_fail@plt+0x3d10>
   14c78:	mov	r2, #16384	; 0x4000
   14c7c:	ldr	r2, [r4, r2]
   14c80:	cmp	r3, r2
   14c84:	bcc	14d14 <__assert_fail@plt+0x3d9c>
   14c88:	ldr	r3, [sp, #80]	; 0x50
   14c8c:	mov	r1, #1
   14c90:	mov	r2, fp
   14c94:	str	r1, [sp, #8]
   14c98:	mov	r0, r4
   14c9c:	mov	r1, r5
   14ca0:	str	r3, [sp, #4]
   14ca4:	ldr	r3, [sp, #36]	; 0x24
   14ca8:	str	r3, [sp, #24]
   14cac:	mov	r3, #0
   14cb0:	str	r3, [sp]
   14cb4:	str	r3, [sp, #20]
   14cb8:	mov	r3, #2
   14cbc:	str	r3, [sp, #12]
   14cc0:	str	r3, [sp, #16]
   14cc4:	mov	r3, r6
   14cc8:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14ccc:	b	14bd4 <__assert_fail@plt+0x3c5c>
   14cd0:	ldr	r3, [sp, #80]	; 0x50
   14cd4:	mov	ip, #1
   14cd8:	mov	lr, #0
   14cdc:	mov	r0, r4
   14ce0:	str	lr, [sp]
   14ce4:	mov	r2, fp
   14ce8:	str	r3, [sp, #4]
   14cec:	mov	lr, #2
   14cf0:	ldr	r3, [sp, #36]	; 0x24
   14cf4:	str	ip, [sp, #8]
   14cf8:	str	ip, [sp, #16]
   14cfc:	str	r3, [sp, #24]
   14d00:	mov	r3, r6
   14d04:	str	ip, [sp, #20]
   14d08:	str	lr, [sp, #12]
   14d0c:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14d10:	b	14a68 <__assert_fail@plt+0x3af0>
   14d14:	str	r1, [sp]
   14d18:	mov	r3, #1
   14d1c:	ldr	r1, [sp, #80]	; 0x50
   14d20:	mov	r2, fp
   14d24:	mov	ip, #2
   14d28:	str	r3, [sp, #8]
   14d2c:	mov	r0, r4
   14d30:	str	r3, [sp, #20]
   14d34:	str	r1, [sp, #4]
   14d38:	ldr	r1, [sp, #36]	; 0x24
   14d3c:	str	r1, [sp, #24]
   14d40:	b	14b24 <__assert_fail@plt+0x3bac>
   14d44:	push	{r4, r5, r6, r7, lr}
   14d48:	mov	r6, r1
   14d4c:	sub	sp, sp, #36	; 0x24
   14d50:	mov	r1, r3
   14d54:	mov	r5, r3
   14d58:	mov	r4, r0
   14d5c:	mov	r7, r2
   14d60:	bl	12d08 <__assert_fail@plt+0x1d90>
   14d64:	movw	r3, #16400	; 0x4010
   14d68:	ldr	r3, [r4, r3]
   14d6c:	cmp	r3, #65536	; 0x10000
   14d70:	bcs	14d84 <__assert_fail@plt+0x3e0c>
   14d74:	mov	r2, #16384	; 0x4000
   14d78:	ldr	r2, [r4, r2]
   14d7c:	cmp	r3, r2
   14d80:	bcc	14dd8 <__assert_fail@plt+0x3e60>
   14d84:	mov	ip, #0
   14d88:	mov	lr, #2
   14d8c:	mov	r2, r7
   14d90:	str	ip, [sp]
   14d94:	mov	r7, #1
   14d98:	str	ip, [sp, #4]
   14d9c:	str	ip, [sp, #8]
   14da0:	mov	r0, r4
   14da4:	str	ip, [sp, #20]
   14da8:	mov	r1, r6
   14dac:	str	lr, [sp, #12]
   14db0:	mov	r3, r5
   14db4:	str	lr, [sp, #16]
   14db8:	str	r7, [sp, #24]
   14dbc:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14dc0:	movw	r2, #16392	; 0x4008
   14dc4:	movw	r3, #16400	; 0x4010
   14dc8:	str	r6, [r4, r2]
   14dcc:	str	r5, [r4, r3]
   14dd0:	add	sp, sp, #36	; 0x24
   14dd4:	pop	{r4, r5, r6, r7, pc}
   14dd8:	mov	r3, #0
   14ddc:	mov	lr, #2
   14de0:	mov	ip, #1
   14de4:	str	r3, [sp]
   14de8:	str	r3, [sp, #4]
   14dec:	mov	r2, r7
   14df0:	str	r3, [sp, #8]
   14df4:	mov	r0, r4
   14df8:	str	lr, [sp, #12]
   14dfc:	mov	r1, r6
   14e00:	str	lr, [sp, #16]
   14e04:	mov	r3, r5
   14e08:	str	ip, [sp, #20]
   14e0c:	str	ip, [sp, #24]
   14e10:	bl	12e70 <__assert_fail@plt+0x1ef8>
   14e14:	b	14dc0 <__assert_fail@plt+0x3e48>
   14e18:	push	{r4, r5, r6, lr}
   14e1c:	cmp	r2, #65536	; 0x10000
   14e20:	mov	r5, r0
   14e24:	movw	r3, #16400	; 0x4010
   14e28:	ldr	r3, [r5, r3]
   14e2c:	mov	r4, r2
   14e30:	movhi	r6, #65536	; 0x10000
   14e34:	movls	r6, r4
   14e38:	movhi	r4, r6
   14e3c:	movw	r0, #16392	; 0x4008
   14e40:	cmp	r3, r6
   14e44:	ldr	r2, [r5, r0]
   14e48:	mov	ip, r1
   14e4c:	movcc	r4, r3
   14e50:	add	r1, r2, r3
   14e54:	movcc	r6, r4
   14e58:	mov	r0, ip
   14e5c:	mov	r2, r6
   14e60:	rsb	r1, r6, r1
   14e64:	bl	10d38 <memmove@plt>
   14e68:	movw	r2, #16392	; 0x4008
   14e6c:	movw	r3, #16400	; 0x4010
   14e70:	mov	ip, r0
   14e74:	mov	r0, r4
   14e78:	str	ip, [r5, r2]
   14e7c:	str	r6, [r5, r3]
   14e80:	pop	{r4, r5, r6, pc}
   14e84:	push	{lr}		; (str lr, [sp, #-4]!)
   14e88:	sub	sp, sp, #28
   14e8c:	mov	ip, #0
   14e90:	mov	lr, #1
   14e94:	str	r1, [sp, #12]
   14e98:	str	lr, [sp]
   14e9c:	str	ip, [sp, #4]
   14ea0:	str	ip, [sp, #8]
   14ea4:	str	ip, [sp, #16]
   14ea8:	str	ip, [sp, #20]
   14eac:	bl	13b14 <__assert_fail@plt+0x2b9c>
   14eb0:	add	sp, sp, #28
   14eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   14eb8:	push	{r4, lr}
   14ebc:	sub	sp, sp, #24
   14ec0:	mov	ip, #0
   14ec4:	mov	lr, #1
   14ec8:	ldr	r4, [sp, #32]
   14ecc:	str	r1, [sp, #12]
   14ed0:	cmp	r3, r4
   14ed4:	movge	r3, r4
   14ed8:	str	lr, [sp]
   14edc:	str	lr, [sp, #4]
   14ee0:	str	ip, [sp, #8]
   14ee4:	str	ip, [sp, #16]
   14ee8:	str	ip, [sp, #20]
   14eec:	bl	13b14 <__assert_fail@plt+0x2b9c>
   14ef0:	add	sp, sp, #24
   14ef4:	pop	{r4, pc}
   14ef8:	push	{lr}		; (str lr, [sp, #-4]!)
   14efc:	sub	sp, sp, #28
   14f00:	mov	ip, #0
   14f04:	mov	r3, r2
   14f08:	str	ip, [sp]
   14f0c:	mov	r2, ip
   14f10:	str	ip, [sp, #4]
   14f14:	mov	lr, #1
   14f18:	str	ip, [sp, #16]
   14f1c:	str	ip, [sp, #20]
   14f20:	sub	ip, r1, #65536	; 0x10000
   14f24:	str	lr, [sp, #8]
   14f28:	str	ip, [sp, #12]
   14f2c:	bl	13b14 <__assert_fail@plt+0x2b9c>
   14f30:	add	sp, sp, #28
   14f34:	pop	{pc}		; (ldr pc, [sp], #4)
   14f38:	push	{r4, lr}
   14f3c:	sub	sp, sp, #24
   14f40:	mov	ip, #0
   14f44:	mov	lr, #1
   14f48:	sub	r4, r1, #65536	; 0x10000
   14f4c:	str	lr, [sp]
   14f50:	stmib	sp, {ip, lr}
   14f54:	str	ip, [sp, #16]
   14f58:	str	ip, [sp, #20]
   14f5c:	str	r4, [sp, #12]
   14f60:	bl	13b14 <__assert_fail@plt+0x2b9c>
   14f64:	add	sp, sp, #24
   14f68:	pop	{r4, pc}
   14f6c:	b	14ef8 <__assert_fail@plt+0x3f80>
   14f70:	push	{r4, r5, r6, lr}
   14f74:	sub	sp, sp, #24
   14f78:	mov	lr, #0
   14f7c:	mov	ip, #2
   14f80:	ldr	r6, [sp, #40]	; 0x28
   14f84:	mov	r4, #1
   14f88:	ldr	r5, [sp, #44]	; 0x2c
   14f8c:	str	r1, [sp, #12]
   14f90:	str	r6, [sp, #16]
   14f94:	str	r5, [sp, #20]
   14f98:	stm	sp, {r4, lr}
   14f9c:	str	ip, [sp, #8]
   14fa0:	bl	13b14 <__assert_fail@plt+0x2b9c>
   14fa4:	add	sp, sp, #24
   14fa8:	pop	{r4, r5, r6, pc}
   14fac:	mov	r0, #1
   14fb0:	mov	r1, #32
   14fb4:	b	10d08 <calloc@plt>
   14fb8:	cmp	r0, #0
   14fbc:	push	{r3, lr}
   14fc0:	beq	14fc8 <__assert_fail@plt+0x4050>
   14fc4:	bl	10d44 <free@plt>
   14fc8:	mov	r0, #0
   14fcc:	pop	{r3, pc}
   14fd0:	mov	r3, r0
   14fd4:	str	r2, [r0, #12]
   14fd8:	mov	ip, #0
   14fdc:	add	r1, r1, r2
   14fe0:	mov	r0, #1
   14fe4:	str	r1, [r3, #8]
   14fe8:	str	ip, [r3]
   14fec:	str	ip, [r3, #4]
   14ff0:	bx	lr
   14ff4:	cmp	r0, #2113929216	; 0x7e000000
   14ff8:	bhi	15014 <__assert_fail@plt+0x409c>
   14ffc:	cmp	r0, #15
   15000:	addgt	r0, r0, #65536	; 0x10000
   15004:	addgt	r0, r0, #14
   15008:	movle	r0, #30
   1500c:	movtle	r0, #1
   15010:	bx	lr
   15014:	mov	r0, #0
   15018:	bx	lr
   1501c:	ldr	ip, [r0, #12]
   15020:	push	{r4, r5, r6, lr}
   15024:	cmp	ip, #0
   15028:	sub	sp, sp, #24
   1502c:	mov	r4, r0
   15030:	mov	r5, r2
   15034:	beq	15118 <__assert_fail@plt+0x41a0>
   15038:	ldr	lr, [r0, #8]
   1503c:	cmp	lr, r2
   15040:	beq	150a4 <__assert_fail@plt+0x412c>
   15044:	str	ip, [r0, #4]
   15048:	rsb	lr, ip, lr
   1504c:	str	r2, [sp, #12]
   15050:	mov	r0, r1
   15054:	str	lr, [r4]
   15058:	mov	r2, r3
   1505c:	mov	r1, #0
   15060:	mov	r3, #1
   15064:	str	r1, [sp, #4]
   15068:	mov	r1, r5
   1506c:	str	r3, [sp]
   15070:	mov	r3, #2
   15074:	str	lr, [sp, #16]
   15078:	str	r3, [sp, #8]
   1507c:	str	ip, [sp, #20]
   15080:	ldr	r3, [sp, #40]	; 0x28
   15084:	bl	13b14 <__assert_fail@plt+0x2b9c>
   15088:	cmp	r0, #0
   1508c:	ble	1509c <__assert_fail@plt+0x4124>
   15090:	add	r5, r5, r0
   15094:	str	r0, [r4, #12]
   15098:	str	r5, [r4, #8]
   1509c:	add	sp, sp, #24
   150a0:	pop	{r4, r5, r6, pc}
   150a4:	movw	r2, #65534	; 0xfffe
   150a8:	cmp	ip, r2
   150ac:	bhi	15138 <__assert_fail@plt+0x41c0>
   150b0:	ldr	r5, [r0, #4]
   150b4:	cmp	r5, #0
   150b8:	bne	15150 <__assert_fail@plt+0x41d8>
   150bc:	rsb	ip, ip, lr
   150c0:	mov	r0, r1
   150c4:	str	ip, [sp, #12]
   150c8:	mov	r2, r3
   150cc:	mov	ip, #1
   150d0:	str	r5, [sp, #4]
   150d4:	str	r5, [sp, #8]
   150d8:	mov	r1, lr
   150dc:	str	r5, [sp, #16]
   150e0:	str	r5, [sp, #20]
   150e4:	ldr	r3, [sp, #40]	; 0x28
   150e8:	str	ip, [sp]
   150ec:	bl	13b14 <__assert_fail@plt+0x2b9c>
   150f0:	cmp	r0, #0
   150f4:	ble	1509c <__assert_fail@plt+0x4124>
   150f8:	ldr	r2, [r4, #12]
   150fc:	ldr	r3, [r4, #8]
   15100:	add	r2, r2, r0
   15104:	str	r2, [r4, #12]
   15108:	add	r3, r3, r0
   1510c:	str	r3, [r4, #8]
   15110:	add	sp, sp, #24
   15114:	pop	{r4, r5, r6, pc}
   15118:	mov	r0, r1
   1511c:	mov	r2, r3
   15120:	mov	r1, r5
   15124:	ldr	r3, [sp, #40]	; 0x28
   15128:	bl	14e84 <__assert_fail@plt+0x3f0c>
   1512c:	cmp	r0, #0
   15130:	bgt	15090 <__assert_fail@plt+0x4118>
   15134:	b	1509c <__assert_fail@plt+0x4124>
   15138:	mov	r2, r3
   1513c:	mov	r0, r1
   15140:	ldr	r3, [sp, #40]	; 0x28
   15144:	mov	r1, lr
   15148:	bl	14f38 <__assert_fail@plt+0x3fc0>
   1514c:	b	150f0 <__assert_fail@plt+0x4178>
   15150:	ldr	r6, [r0]
   15154:	rsb	ip, ip, lr
   15158:	mov	r2, r3
   1515c:	str	ip, [sp, #12]
   15160:	mov	r3, #0
   15164:	mov	ip, #1
   15168:	str	r3, [sp, #4]
   1516c:	mov	r0, r1
   15170:	str	ip, [sp]
   15174:	mov	r1, lr
   15178:	mov	ip, #2
   1517c:	str	r5, [sp, #20]
   15180:	str	r6, [sp, #16]
   15184:	ldr	r3, [sp, #40]	; 0x28
   15188:	str	ip, [sp, #8]
   1518c:	bl	13b14 <__assert_fail@plt+0x2b9c>
   15190:	b	150f0 <__assert_fail@plt+0x4178>
   15194:	ldr	ip, [r0, #12]
   15198:	push	{r4, r5, r6, r7, lr}
   1519c:	cmp	ip, #0
   151a0:	sub	sp, sp, #28
   151a4:	mov	r4, r0
   151a8:	mov	r5, r2
   151ac:	mov	r6, r3
   151b0:	beq	15264 <__assert_fail@plt+0x42ec>
   151b4:	ldr	lr, [r0, #8]
   151b8:	cmp	lr, r2
   151bc:	beq	15214 <__assert_fail@plt+0x429c>
   151c0:	mov	r7, #0
   151c4:	str	ip, [r0, #4]
   151c8:	rsb	lr, ip, lr
   151cc:	str	r2, [sp, #12]
   151d0:	str	lr, [r0]
   151d4:	mov	r2, r7
   151d8:	mov	r0, r1
   151dc:	str	ip, [sp, #20]
   151e0:	str	lr, [sp, #16]
   151e4:	mov	ip, #2
   151e8:	str	r7, [sp]
   151ec:	mov	r1, r5
   151f0:	stmib	sp, {r7, ip}
   151f4:	bl	13b14 <__assert_fail@plt+0x2b9c>
   151f8:	cmp	r0, #0
   151fc:	ble	1520c <__assert_fail@plt+0x4294>
   15200:	add	r5, r5, r6
   15204:	str	r6, [r4, #12]
   15208:	str	r5, [r4, #8]
   1520c:	add	sp, sp, #28
   15210:	pop	{r4, r5, r6, r7, pc}
   15214:	movw	r2, #65534	; 0xfffe
   15218:	cmp	ip, r2
   1521c:	bhi	1522c <__assert_fail@plt+0x42b4>
   15220:	ldr	r0, [r0, #4]
   15224:	cmp	r0, #0
   15228:	bne	15280 <__assert_fail@plt+0x4308>
   1522c:	mov	r0, r1
   15230:	mov	r2, r6
   15234:	mov	r1, lr
   15238:	bl	14ef8 <__assert_fail@plt+0x3f80>
   1523c:	cmp	r0, #0
   15240:	ble	1520c <__assert_fail@plt+0x4294>
   15244:	ldr	r2, [r4, #12]
   15248:	ldr	r3, [r4, #8]
   1524c:	add	r2, r2, r6
   15250:	str	r2, [r4, #12]
   15254:	add	r6, r3, r6
   15258:	str	r6, [r4, #8]
   1525c:	add	sp, sp, #28
   15260:	pop	{r4, r5, r6, r7, pc}
   15264:	mov	r0, r1
   15268:	mov	r1, r2
   1526c:	mov	r2, r3
   15270:	bl	14ef8 <__assert_fail@plt+0x3f80>
   15274:	cmp	r0, #0
   15278:	bgt	15200 <__assert_fail@plt+0x4288>
   1527c:	b	1520c <__assert_fail@plt+0x4294>
   15280:	ldr	r2, [r4]
   15284:	mov	r5, #0
   15288:	rsb	ip, ip, lr
   1528c:	str	r0, [sp, #20]
   15290:	str	ip, [sp, #12]
   15294:	mov	r0, r1
   15298:	str	r2, [sp, #16]
   1529c:	mov	ip, #2
   152a0:	mov	r1, lr
   152a4:	str	r5, [sp]
   152a8:	mov	r2, r5
   152ac:	str	r5, [sp, #4]
   152b0:	str	ip, [sp, #8]
   152b4:	bl	13b14 <__assert_fail@plt+0x2b9c>
   152b8:	b	1523c <__assert_fail@plt+0x42c4>
   152bc:	push	{r4, r5, r6, lr}
   152c0:	sub	sp, sp, #24
   152c4:	ldr	ip, [sp, #44]	; 0x2c
   152c8:	ldr	r4, [sp, #40]	; 0x28
   152cc:	cmp	ip, #0
   152d0:	beq	15324 <__assert_fail@plt+0x43ac>
   152d4:	add	r6, r4, ip
   152d8:	cmp	r6, r1
   152dc:	beq	1530c <__assert_fail@plt+0x4394>
   152e0:	mov	lr, #0
   152e4:	str	ip, [sp, #20]
   152e8:	str	r1, [sp, #12]
   152ec:	mov	ip, #2
   152f0:	mov	r5, #1
   152f4:	str	r4, [sp, #16]
   152f8:	stm	sp, {r5, lr}
   152fc:	str	ip, [sp, #8]
   15300:	bl	13b14 <__assert_fail@plt+0x2b9c>
   15304:	add	sp, sp, #24
   15308:	pop	{r4, r5, r6, pc}
   1530c:	movw	r4, #65534	; 0xfffe
   15310:	cmp	ip, r4
   15314:	ble	15330 <__assert_fail@plt+0x43b8>
   15318:	add	sp, sp, #24
   1531c:	pop	{r4, r5, r6, lr}
   15320:	b	14f38 <__assert_fail@plt+0x3fc0>
   15324:	add	sp, sp, #24
   15328:	pop	{r4, r5, r6, lr}
   1532c:	b	14e84 <__assert_fail@plt+0x3f0c>
   15330:	rsb	ip, ip, r6
   15334:	mov	lr, #1
   15338:	str	ip, [sp, #12]
   1533c:	mov	ip, #0
   15340:	str	lr, [sp]
   15344:	str	ip, [sp, #4]
   15348:	str	ip, [sp, #8]
   1534c:	str	ip, [sp, #16]
   15350:	str	ip, [sp, #20]
   15354:	bl	13b14 <__assert_fail@plt+0x2b9c>
   15358:	add	sp, sp, #24
   1535c:	pop	{r4, r5, r6, pc}
   15360:	push	{r4, r5, r6, lr}
   15364:	sub	sp, sp, #24
   15368:	mov	r6, r0
   1536c:	mov	r4, r1
   15370:	ldr	ip, [sp, #40]	; 0x28
   15374:	cmp	ip, #0
   15378:	beq	153bc <__assert_fail@plt+0x4444>
   1537c:	add	r5, r3, ip
   15380:	cmp	r1, r5
   15384:	beq	153bc <__assert_fail@plt+0x4444>
   15388:	mov	lr, #0
   1538c:	str	r3, [sp, #16]
   15390:	str	ip, [sp, #20]
   15394:	mov	r3, r2
   15398:	mov	ip, #2
   1539c:	str	r1, [sp, #12]
   153a0:	mov	r2, lr
   153a4:	str	lr, [sp]
   153a8:	str	lr, [sp, #4]
   153ac:	str	ip, [sp, #8]
   153b0:	bl	13b14 <__assert_fail@plt+0x2b9c>
   153b4:	add	sp, sp, #24
   153b8:	pop	{r4, r5, r6, pc}
   153bc:	mov	r0, r6
   153c0:	mov	r1, r4
   153c4:	add	sp, sp, #24
   153c8:	pop	{r4, r5, r6, lr}
   153cc:	b	14ef8 <__assert_fail@plt+0x3f80>
   153d0:	push	{lr}		; (str lr, [sp, #-4]!)
   153d4:	sub	sp, sp, #12
   153d8:	mov	ip, #1
   153dc:	str	ip, [sp]
   153e0:	bl	14664 <__assert_fail@plt+0x36ec>
   153e4:	add	sp, sp, #12
   153e8:	pop	{pc}		; (ldr pc, [sp], #4)
   153ec:	cmp	r2, #2113929216	; 0x7e000000
   153f0:	push	{lr}		; (str lr, [sp, #-4]!)
   153f4:	movwls	ip, #32897	; 0x8081
   153f8:	movtls	ip, #32896	; 0x8080
   153fc:	asrls	r3, r2, #31
   15400:	sub	sp, sp, #12
   15404:	movhi	r3, #0
   15408:	smullls	lr, ip, ip, r2
   1540c:	addls	ip, ip, r2
   15410:	rsbls	r3, r3, ip, asr #7
   15414:	mov	ip, #1
   15418:	addls	r3, r2, r3
   1541c:	str	ip, [sp]
   15420:	addls	r3, r3, #16
   15424:	bl	14664 <__assert_fail@plt+0x36ec>
   15428:	add	sp, sp, #12
   1542c:	pop	{pc}		; (ldr pc, [sp], #4)
   15430:	push	{lr}		; (str lr, [sp, #-4]!)
   15434:	sub	sp, sp, #12
   15438:	mov	lr, #1
   1543c:	ldr	ip, [sp, #16]
   15440:	stm	sp, {ip, lr}
   15444:	bl	14294 <__assert_fail@plt+0x331c>
   15448:	add	sp, sp, #12
   1544c:	pop	{pc}		; (ldr pc, [sp], #4)
   15450:	cmp	r3, #2113929216	; 0x7e000000
   15454:	push	{r4, lr}
   15458:	movwls	lr, #32897	; 0x8081
   1545c:	movtls	lr, #32896	; 0x8080
   15460:	asrls	ip, r3, #31
   15464:	sub	sp, sp, #8
   15468:	movhi	ip, #0
   1546c:	smullls	r4, lr, lr, r3
   15470:	addls	lr, lr, r3
   15474:	rsbls	ip, ip, lr, asr #7
   15478:	addls	ip, r3, ip
   1547c:	addls	ip, ip, #16
   15480:	str	ip, [sp]
   15484:	mov	ip, #1
   15488:	str	ip, [sp, #4]
   1548c:	bl	14294 <__assert_fail@plt+0x331c>
   15490:	add	sp, sp, #8
   15494:	pop	{r4, pc}
   15498:	push	{lr}		; (str lr, [sp, #-4]!)
   1549c:	sub	sp, sp, #12
   154a0:	mov	lr, #1
   154a4:	ldr	ip, [sp, #16]
   154a8:	stm	sp, {ip, lr}
   154ac:	bl	14a2c <__assert_fail@plt+0x3ab4>
   154b0:	add	sp, sp, #12
   154b4:	pop	{pc}		; (ldr pc, [sp], #4)
   154b8:	cmp	r3, #2113929216	; 0x7e000000
   154bc:	push	{r4, lr}
   154c0:	movwls	lr, #32897	; 0x8081
   154c4:	movtls	lr, #32896	; 0x8080
   154c8:	asrls	ip, r3, #31
   154cc:	sub	sp, sp, #8
   154d0:	movhi	ip, #0
   154d4:	smullls	r4, lr, lr, r3
   154d8:	addls	lr, lr, r3
   154dc:	rsbls	ip, ip, lr, asr #7
   154e0:	addls	ip, r3, ip
   154e4:	addls	ip, ip, #16
   154e8:	str	ip, [sp]
   154ec:	mov	ip, #1
   154f0:	str	ip, [sp, #4]
   154f4:	bl	14a2c <__assert_fail@plt+0x3ab4>
   154f8:	add	sp, sp, #8
   154fc:	pop	{r4, pc}
   15500:	b	14ef8 <__assert_fail@plt+0x3f80>
   15504:	b	14e84 <__assert_fail@plt+0x3f0c>
   15508:	movw	r0, #16416	; 0x4020
   1550c:	bx	lr
   15510:	push	{r3, lr}
   15514:	mov	r1, #0
   15518:	movw	r2, #16416	; 0x4020
   1551c:	bl	10e88 <memset@plt>
   15520:	mov	r0, #0
   15524:	pop	{r3, pc}
   15528:	b	148fc <__assert_fail@plt+0x3984>
   1552c:	movw	r3, #16392	; 0x4008
   15530:	ldr	r0, [r0, r3]
   15534:	bx	lr
   15538:	ldr	ip, [r0, #76]	; 0x4c
   1553c:	push	{r3, r4, r5, r6, r7, lr}
   15540:	cmp	ip, #0
   15544:	mov	r4, r0
   15548:	mov	r5, r1
   1554c:	mov	r6, r2
   15550:	streq	r1, [r0, #72]	; 0x48
   15554:	bne	15564 <__assert_fail@plt+0x45ec>
   15558:	add	ip, r6, ip
   1555c:	str	ip, [r4, #76]	; 0x4c
   15560:	pop	{r3, r4, r5, r6, r7, pc}
   15564:	ldr	r1, [r0, #72]	; 0x48
   15568:	add	r2, r1, ip
   1556c:	cmp	r5, r2
   15570:	beq	15558 <__assert_fail@plt+0x45e0>
   15574:	rsb	r2, r3, r5
   15578:	add	r2, r2, r6
   1557c:	cmp	r2, #65536	; 0x10000
   15580:	strcs	r3, [r0, #72]	; 0x48
   15584:	strcs	r2, [r0, #76]	; 0x4c
   15588:	popcs	{r3, r4, r5, r6, r7, pc}
   1558c:	ldr	r2, [sp, #24]
   15590:	cmp	r2, #0
   15594:	beq	15604 <__assert_fail@plt+0x468c>
   15598:	ldr	r3, [r0, #68]	; 0x44
   1559c:	cmp	r1, r3
   155a0:	beq	15558 <__assert_fail@plt+0x45e0>
   155a4:	ldr	r2, [r0, #84]	; 0x54
   155a8:	ldr	r0, [r0, #88]	; 0x58
   155ac:	ldr	r5, [r4, #80]	; 0x50
   155b0:	cmp	r2, #65536	; 0x10000
   155b4:	rsb	ip, r0, ip
   155b8:	add	r1, r1, ip
   155bc:	rsb	r5, r3, r5
   155c0:	bhi	15654 <__assert_fail@plt+0x46dc>
   155c4:	rsb	r2, r2, #65536	; 0x10000
   155c8:	cmp	r5, r2
   155cc:	bcs	156bc <__assert_fail@plt+0x4744>
   155d0:	rsb	lr, r5, #0
   155d4:	mov	r2, r5
   155d8:	mov	r0, #0
   155dc:	add	r0, r3, r0
   155e0:	add	r1, r1, lr
   155e4:	bl	10d74 <memcpy@plt>
   155e8:	ldr	r2, [r4, #88]	; 0x58
   155ec:	ldr	r3, [r4, #68]	; 0x44
   155f0:	add	r5, r5, r2
   155f4:	add	r6, r5, r6
   155f8:	str	r6, [r4, #76]	; 0x4c
   155fc:	str	r3, [r4, #72]	; 0x48
   15600:	pop	{r3, r4, r5, r6, r7, pc}
   15604:	ldr	r0, [r0, #68]	; 0x44
   15608:	cmp	r1, r0
   1560c:	beq	15664 <__assert_fail@plt+0x46ec>
   15610:	rsb	r7, r6, #65536	; 0x10000
   15614:	cmp	r7, ip
   15618:	movcs	r7, ip
   1561c:	rsb	ip, r7, ip
   15620:	add	r1, r1, ip
   15624:	mov	r2, r7
   15628:	bl	10d74 <memcpy@plt>
   1562c:	ldr	r0, [r4, #68]	; 0x44
   15630:	mov	r2, r6
   15634:	mov	r1, r5
   15638:	add	r0, r0, r7
   1563c:	add	r6, r7, r6
   15640:	bl	10d74 <memcpy@plt>
   15644:	ldr	r3, [r4, #68]	; 0x44
   15648:	str	r6, [r4, #76]	; 0x4c
   1564c:	str	r3, [r4, #72]	; 0x48
   15650:	pop	{r3, r4, r5, r6, r7, pc}
   15654:	mov	lr, #0
   15658:	mov	r2, lr
   1565c:	rsb	r0, r2, r5
   15660:	b	155dc <__assert_fail@plt+0x4664>
   15664:	ldr	r3, [r4, #52]	; 0x34
   15668:	add	r2, r6, ip
   1566c:	cmp	r2, r3
   15670:	movls	r0, ip
   15674:	bls	1569c <__assert_fail@plt+0x4724>
   15678:	rsb	r7, r6, #65536	; 0x10000
   1567c:	mov	r0, r1
   15680:	rsb	r1, r7, ip
   15684:	add	r1, r0, r1
   15688:	mov	r2, r7
   1568c:	bl	10d74 <memcpy@plt>
   15690:	ldr	r1, [r4, #68]	; 0x44
   15694:	mov	r0, r7
   15698:	str	r7, [r4, #76]	; 0x4c
   1569c:	add	r0, r1, r0
   156a0:	mov	r2, r6
   156a4:	mov	r1, r5
   156a8:	bl	10d74 <memcpy@plt>
   156ac:	ldr	r3, [r4, #76]	; 0x4c
   156b0:	add	r6, r3, r6
   156b4:	str	r6, [r4, #76]	; 0x4c
   156b8:	pop	{r3, r4, r5, r6, r7, pc}
   156bc:	rsb	lr, r2, #0
   156c0:	b	1565c <__assert_fail@plt+0x46e4>
   156c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   156c8:	sub	sp, sp, #20
   156cc:	mov	r5, r0
   156d0:	add	r8, r5, #4
   156d4:	ldr	r0, [sp, #56]	; 0x38
   156d8:	mov	r6, r2
   156dc:	ldr	lr, [sp, #52]	; 0x34
   156e0:	mov	ip, r3
   156e4:	mov	r2, r8
   156e8:	sub	r4, r6, #1
   156ec:	mov	r3, r6
   156f0:	str	r0, [sp, #8]
   156f4:	stm	sp, {r4, lr}
   156f8:	mov	r9, r1
   156fc:	ldr	r0, [sp, #48]	; 0x30
   15700:	ldr	r7, [sp, #60]	; 0x3c
   15704:	blx	ip
   15708:	cmp	r0, #0
   1570c:	lsr	r3, r0, #16
   15710:	lsr	r2, r0, #8
   15714:	strb	r3, [r5, #2]
   15718:	mov	r4, r0
   1571c:	lsr	r3, r0, #24
   15720:	strb	r0, [r5]
   15724:	strb	r2, [r5, #1]
   15728:	strb	r3, [r5, #3]
   1572c:	beq	1577c <__assert_fail@plt+0x4804>
   15730:	cmp	r7, #0
   15734:	beq	1576c <__assert_fail@plt+0x47f4>
   15738:	mov	r1, r4
   1573c:	mov	r2, #0
   15740:	mov	r0, r8
   15744:	bl	1c428 <__assert_fail@plt+0xb4b0>
   15748:	add	r2, r4, #4
   1574c:	add	r3, r5, r2
   15750:	strb	r0, [r5, r2]
   15754:	lsr	ip, r0, #8
   15758:	lsr	r1, r0, #16
   1575c:	strb	ip, [r3, #1]
   15760:	lsr	r0, r0, #24
   15764:	strb	r1, [r3, #2]
   15768:	strb	r0, [r3, #3]
   1576c:	add	r0, r4, r7, lsl #2
   15770:	add	r0, r0, #4
   15774:	add	sp, sp, #20
   15778:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1577c:	orr	r3, r6, #-2147483648	; 0x80000000
   15780:	mov	r1, r9
   15784:	strb	r3, [r5]
   15788:	mov	r0, r8
   1578c:	lsr	ip, r3, #8
   15790:	lsr	r2, r3, #16
   15794:	strb	ip, [r5, #1]
   15798:	lsr	r3, r3, #24
   1579c:	strb	r2, [r5, #2]
   157a0:	mov	r2, r6
   157a4:	strb	r3, [r5, #3]
   157a8:	mov	r4, r6
   157ac:	bl	10d74 <memcpy@plt>
   157b0:	b	15730 <__assert_fail@plt+0x47b8>
   157b4:	b	1a2cc <__assert_fail@plt+0x9354>
   157b8:	push	{r4}		; (str r4, [sp, #-4]!)
   157bc:	ldr	ip, [sp, #8]
   157c0:	ldr	r4, [sp, #4]
   157c4:	cmp	ip, #0
   157c8:	rsblt	ip, ip, #1
   157cc:	movge	ip, #1
   157d0:	stmib	sp, {r4, ip}
   157d4:	pop	{r4}		; (ldr r4, [sp], #4)
   157d8:	b	14a2c <__assert_fail@plt+0x3ab4>
   157dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   157e0:	movw	r4, #28936	; 0x7108
   157e4:	movt	r4, #3
   157e8:	sub	sp, sp, #64	; 0x40
   157ec:	cmp	r1, #0
   157f0:	mov	r3, #0
   157f4:	ldr	ip, [r4]
   157f8:	str	r3, [sp]
   157fc:	str	r3, [sp, #4]
   15800:	str	ip, [sp, #60]	; 0x3c
   15804:	str	r3, [sp, #8]
   15808:	str	r3, [sp, #12]
   1580c:	str	r3, [sp, #16]
   15810:	str	r3, [sp, #20]
   15814:	str	r3, [sp, #24]
   15818:	str	r3, [sp, #28]
   1581c:	str	r3, [sp, #32]
   15820:	str	r3, [sp, #36]	; 0x24
   15824:	str	r3, [sp, #40]	; 0x28
   15828:	str	r3, [sp, #44]	; 0x2c
   1582c:	str	r3, [sp, #48]	; 0x30
   15830:	str	r3, [sp, #52]	; 0x34
   15834:	beq	158d4 <__assert_fail@plt+0x495c>
   15838:	ldr	r9, [r1, #8]
   1583c:	ldr	sl, [r1, #28]
   15840:	ldr	r8, [r1, #36]	; 0x24
   15844:	add	r9, r9, #1
   15848:	ldr	r1, [r1]
   1584c:	cmp	r0, r3
   15850:	orreq	r8, r8, #1
   15854:	lsl	sl, sl, #2
   15858:	cmp	r1, r3
   1585c:	lsl	r9, r9, #2
   15860:	add	sl, sl, #4
   15864:	beq	158e4 <__assert_fail@plt+0x496c>
   15868:	sub	r1, r1, #4
   1586c:	cmp	r1, #3
   15870:	mvnhi	r6, #2
   15874:	mvnhi	r5, #1
   15878:	bls	158e4 <__assert_fail@plt+0x496c>
   1587c:	cmp	r6, r2
   15880:	addls	r7, r0, r6
   15884:	addhi	r7, r0, r2
   15888:	mov	r1, r5
   1588c:	mov	r0, r7
   15890:	bl	231c4 <__assert_fail@plt+0x1224c>
   15894:	cmp	r8, #0
   15898:	moveq	r6, r8
   1589c:	beq	158ac <__assert_fail@plt+0x4934>
   158a0:	ands	r6, r7, r6
   158a4:	moveq	r8, #0
   158a8:	movne	r8, #1
   158ac:	mla	r5, r5, r0, r9
   158b0:	ldr	r2, [sp, #60]	; 0x3c
   158b4:	ldr	r3, [r4]
   158b8:	add	r0, r8, r0
   158bc:	add	r5, r5, r6
   158c0:	cmp	r2, r3
   158c4:	mla	r0, sl, r0, r5
   158c8:	bne	158f8 <__assert_fail@plt+0x4980>
   158cc:	add	sp, sp, #64	; 0x40
   158d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158d4:	rsbs	r8, r0, #1
   158d8:	mov	sl, #4
   158dc:	mov	r9, #8
   158e0:	movcc	r8, #0
   158e4:	movw	r3, #16840	; 0x41c8
   158e8:	movt	r3, #2
   158ec:	ldr	r5, [r3, r1, lsl #2]
   158f0:	sub	r6, r5, #1
   158f4:	b	1587c <__assert_fail@plt+0x4904>
   158f8:	bl	10db0 <__stack_chk_fail@plt>
   158fc:	cmp	r2, #2
   15900:	push	{r4, r5, r6, lr}
   15904:	mov	r4, r1
   15908:	mov	r5, r0
   1590c:	bgt	1593c <__assert_fail@plt+0x49c4>
   15910:	adds	r6, r1, #0
   15914:	movne	r6, #1
   15918:	cmp	r3, #0
   1591c:	movne	r3, r6
   15920:	orreq	r3, r6, #1
   15924:	cmp	r3, #0
   15928:	bne	1595c <__assert_fail@plt+0x49e4>
   1592c:	mov	r0, r5
   15930:	mov	r1, #0
   15934:	pop	{r4, r5, r6, lr}
   15938:	b	14a04 <__assert_fail@plt+0x3a8c>
   1593c:	mov	r1, r2
   15940:	bl	1a028 <__assert_fail@plt+0x90b0>
   15944:	cmp	r4, #0
   15948:	mov	r0, r5
   1594c:	ldrne	r1, [r4, #8]
   15950:	moveq	r1, r4
   15954:	pop	{r4, r5, r6, lr}
   15958:	b	1a2bc <__assert_fail@plt+0x9344>
   1595c:	bl	14930 <__assert_fail@plt+0x39b8>
   15960:	cmp	r6, #0
   15964:	beq	1592c <__assert_fail@plt+0x49b4>
   15968:	ldr	r1, [r4, #4]
   1596c:	mov	r0, r5
   15970:	pop	{r4, r5, r6, lr}
   15974:	b	14a04 <__assert_fail@plt+0x3a8c>
   15978:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1597c:	mov	r8, r1
   15980:	ldr	r4, [sp, #40]	; 0x28
   15984:	mov	r7, r2
   15988:	ldr	r5, [sp, #36]	; 0x24
   1598c:	mov	r6, r3
   15990:	ldr	sl, [sp, #32]
   15994:	mov	r3, #1
   15998:	mov	r1, r4
   1599c:	mov	r9, r0
   159a0:	mov	r2, r5
   159a4:	bl	158fc <__assert_fail@plt+0x4984>
   159a8:	cmp	r4, #0
   159ac:	str	sl, [sp, #32]
   159b0:	mov	r0, r9
   159b4:	beq	159cc <__assert_fail@plt+0x4a54>
   159b8:	mov	r1, r8
   159bc:	mov	r2, r7
   159c0:	mov	r3, r6
   159c4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   159c8:	b	1a2cc <__assert_fail@plt+0x9354>
   159cc:	str	r5, [sp, #36]	; 0x24
   159d0:	mov	r1, r8
   159d4:	mov	r2, r7
   159d8:	mov	r3, r6
   159dc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   159e0:	b	19ce8 <__assert_fail@plt+0x8d70>
   159e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   159e8:	mov	r8, r1
   159ec:	ldr	ip, [sp, #36]	; 0x24
   159f0:	mov	r7, r2
   159f4:	ldr	r4, [sp, #40]	; 0x28
   159f8:	mov	r6, r3
   159fc:	cmp	ip, #0
   15a00:	ldr	sl, [sp, #32]
   15a04:	mov	r2, ip
   15a08:	mov	r3, #1
   15a0c:	mov	r1, r4
   15a10:	rsblt	r9, ip, #1
   15a14:	movge	r9, #1
   15a18:	mov	r5, r0
   15a1c:	bl	158fc <__assert_fail@plt+0x4984>
   15a20:	cmp	r4, #0
   15a24:	str	sl, [sp, #32]
   15a28:	mov	r0, r5
   15a2c:	str	r9, [sp, #36]	; 0x24
   15a30:	mov	r1, r8
   15a34:	mov	r2, r7
   15a38:	mov	r3, r6
   15a3c:	beq	15a48 <__assert_fail@plt+0x4ad0>
   15a40:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a44:	b	14a2c <__assert_fail@plt+0x3ab4>
   15a48:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a4c:	b	14418 <__assert_fail@plt+0x34a0>
   15a50:	cmp	r2, #6
   15a54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a58:	mov	r7, r0
   15a5c:	sub	sp, sp, #28
   15a60:	mov	r4, r2
   15a64:	mov	r6, r1
   15a68:	mvnls	r0, #11
   15a6c:	bhi	15a78 <__assert_fail@plt+0x4b00>
   15a70:	add	sp, sp, #28
   15a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a78:	mov	r1, #0
   15a7c:	mov	r2, #32
   15a80:	bl	10e88 <memset@plt>
   15a84:	ldrb	ip, [r6, #3]
   15a88:	ldrb	r2, [r6]
   15a8c:	movw	r3, #10832	; 0x2a50
   15a90:	ldrb	r0, [r6, #1]
   15a94:	movt	r3, #6221	; 0x184d
   15a98:	ldrb	r1, [r6, #2]
   15a9c:	add	r2, r2, ip, lsl #24
   15aa0:	add	r2, r2, r0, lsl #8
   15aa4:	add	r2, r2, r1, lsl #16
   15aa8:	bic	r1, r2, #15
   15aac:	cmp	r1, r3
   15ab0:	beq	15ae4 <__assert_fail@plt+0x4b6c>
   15ab4:	movw	r3, #8708	; 0x2204
   15ab8:	movt	r3, #6221	; 0x184d
   15abc:	cmp	r2, r3
   15ac0:	mvnne	r0, #12
   15ac4:	bne	15a70 <__assert_fail@plt+0x4af8>
   15ac8:	mov	r3, #0
   15acc:	str	r3, [r7, #12]
   15ad0:	ldrb	r5, [r6, #4]
   15ad4:	tst	r5, #2
   15ad8:	beq	15b18 <__assert_fail@plt+0x4ba0>
   15adc:	mvn	r0, #7
   15ae0:	b	15a70 <__assert_fail@plt+0x4af8>
   15ae4:	add	r2, r7, #188	; 0xbc
   15ae8:	mov	r3, #1
   15aec:	cmp	r6, r2
   15af0:	str	r3, [r7, #12]
   15af4:	streq	r4, [r7, #60]	; 0x3c
   15af8:	moveq	r2, #8
   15afc:	moveq	r3, #13
   15b00:	movne	r3, #12
   15b04:	moveq	r0, r4
   15b08:	streq	r2, [r7, #64]	; 0x40
   15b0c:	movne	r0, #4
   15b10:	str	r3, [r7, #36]	; 0x24
   15b14:	b	15a70 <__assert_fail@plt+0x4af8>
   15b18:	lsr	r3, r5, #6
   15b1c:	cmp	r3, #1
   15b20:	mvnne	r0, #5
   15b24:	bne	15a70 <__assert_fail@plt+0x4af8>
   15b28:	ubfx	r9, r5, #3, #1
   15b2c:	and	ip, r5, #1
   15b30:	add	r8, ip, r9, lsl #1
   15b34:	lsl	r8, r8, #2
   15b38:	add	fp, r8, #7
   15b3c:	cmp	r4, fp
   15b40:	bcs	15b74 <__assert_fail@plt+0x4bfc>
   15b44:	add	r0, r7, #188	; 0xbc
   15b48:	cmp	r6, r0
   15b4c:	beq	15b5c <__assert_fail@plt+0x4be4>
   15b50:	mov	r1, r6
   15b54:	mov	r2, r4
   15b58:	bl	10d74 <memcpy@plt>
   15b5c:	mov	r3, #1
   15b60:	str	r4, [r7, #60]	; 0x3c
   15b64:	mov	r0, r4
   15b68:	str	fp, [r7, #64]	; 0x40
   15b6c:	str	r3, [r7, #36]	; 0x24
   15b70:	b	15a70 <__assert_fail@plt+0x4af8>
   15b74:	ldrb	r3, [r6, #5]
   15b78:	lsrs	r0, r3, #7
   15b7c:	bne	15adc <__assert_fail@plt+0x4b64>
   15b80:	lsr	r4, r3, #4
   15b84:	cmp	r4, #3
   15b88:	mvnls	r0, #1
   15b8c:	bls	15a70 <__assert_fail@plt+0x4af8>
   15b90:	ands	r2, r3, #15
   15b94:	bne	15adc <__assert_fail@plt+0x4b64>
   15b98:	add	sl, r8, #2
   15b9c:	add	r0, r6, #4
   15ba0:	str	ip, [sp, #4]
   15ba4:	add	r8, r6, r8
   15ba8:	mov	r1, sl
   15bac:	bl	1c428 <__assert_fail@plt+0xb4b0>
   15bb0:	ldrb	r3, [r8, #6]
   15bb4:	ldr	ip, [sp, #4]
   15bb8:	ubfx	r0, r0, #8, #8
   15bbc:	cmp	r3, r0
   15bc0:	mvnne	r0, #16
   15bc4:	bne	15a70 <__assert_fail@plt+0x4af8>
   15bc8:	sub	r2, r4, #4
   15bcc:	movw	r3, #16840	; 0x41c8
   15bd0:	movt	r3, #2
   15bd4:	cmp	r9, #0
   15bd8:	ubfx	r1, r5, #5, #1
   15bdc:	str	r4, [r7]
   15be0:	ldr	r3, [r3, r2, lsl #2]
   15be4:	ubfx	r2, r5, #4, #1
   15be8:	str	r1, [r7, #4]
   15bec:	ubfx	r5, r5, #2, #1
   15bf0:	str	r2, [r7, #28]
   15bf4:	str	r3, [r7, #48]	; 0x30
   15bf8:	str	r5, [r7, #8]
   15bfc:	beq	15ccc <__assert_fail@plt+0x4d54>
   15c00:	ldrb	r8, [r6, #7]
   15c04:	mov	r9, #0
   15c08:	ldrb	r4, [r6, #8]
   15c0c:	lsr	r1, r8, #24
   15c10:	lsl	r0, r8, #8
   15c14:	ldrb	r8, [r6, #9]
   15c18:	lsl	r2, r4, #16
   15c1c:	lsr	r3, r4, #16
   15c20:	adds	r4, r0, r2
   15c24:	adc	r5, r1, r3
   15c28:	strd	r4, [sp, #16]
   15c2c:	strd	r8, [sp, #8]
   15c30:	mov	r5, #0
   15c34:	ldr	r0, [sp, #8]
   15c38:	mov	r8, #0
   15c3c:	ldrb	r4, [r6, #6]
   15c40:	ldrb	r9, [r6, #10]
   15c44:	lsr	r3, r0, #8
   15c48:	ldrd	r0, [sp, #16]
   15c4c:	adds	r4, r4, r0
   15c50:	ldrb	r0, [r6, #11]
   15c54:	adc	r5, r5, r1
   15c58:	ldr	r1, [sp, #8]
   15c5c:	lsl	r2, r1, #24
   15c60:	mov	r1, #0
   15c64:	adds	r4, r4, r2
   15c68:	adc	r5, r5, r3
   15c6c:	lsl	r3, r0, #8
   15c70:	ldrb	r0, [r6, #12]
   15c74:	strd	r0, [sp, #16]
   15c78:	adds	r0, r4, r8
   15c7c:	adc	r1, r5, r9
   15c80:	strd	r0, [sp, #8]
   15c84:	ldrb	r0, [r6, #13]
   15c88:	ldr	r1, [sp, #16]
   15c8c:	lsl	r5, r1, #16
   15c90:	mov	r1, #0
   15c94:	strd	r0, [sp, #16]
   15c98:	ldrd	r0, [sp, #8]
   15c9c:	adds	r0, r0, r8
   15ca0:	adc	r1, r1, r3
   15ca4:	strd	r0, [sp, #8]
   15ca8:	ldr	r1, [sp, #16]
   15cac:	lsl	r3, r1, #24
   15cb0:	ldrd	r0, [sp, #8]
   15cb4:	adds	r0, r0, r8
   15cb8:	adc	r1, r1, r5
   15cbc:	adds	r2, r8, r0
   15cc0:	adc	r3, r3, r1
   15cc4:	strd	r2, [r7, #16]
   15cc8:	strd	r2, [r7, #40]	; 0x28
   15ccc:	cmp	ip, #0
   15cd0:	beq	15cf8 <__assert_fail@plt+0x4d80>
   15cd4:	add	r3, r6, sl
   15cd8:	ldrb	r0, [r6, sl]
   15cdc:	ldrb	ip, [r3, #3]
   15ce0:	ldrb	r1, [r3, #1]
   15ce4:	ldrb	r2, [r3, #2]
   15ce8:	add	r3, r0, ip, lsl #24
   15cec:	add	r3, r3, r1, lsl #8
   15cf0:	add	r3, r3, r2, lsl #16
   15cf4:	str	r3, [r7, #24]
   15cf8:	mov	r3, #2
   15cfc:	mov	r0, fp
   15d00:	str	r3, [r7, #36]	; 0x24
   15d04:	b	15a70 <__assert_fail@plt+0x4af8>
   15d08:	ldr	r2, [r0, #32]
   15d0c:	mov	r3, r0
   15d10:	ldr	r1, [r3, #76]	; 0x4c
   15d14:	cmp	r2, #2
   15d18:	ldr	r0, [r0, #144]	; 0x90
   15d1c:	mov	r2, #65536	; 0x10000
   15d20:	ble	15d28 <__assert_fail@plt+0x4db0>
   15d24:	b	1a340 <__assert_fail@plt+0x93c8>
   15d28:	b	14e18 <__assert_fail@plt+0x3ea0>
   15d2c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15d30:	sub	sp, sp, #68	; 0x44
   15d34:	subs	r7, r3, #0
   15d38:	add	r3, sp, #64	; 0x40
   15d3c:	subeq	r7, r3, #64	; 0x40
   15d40:	mov	r4, r0
   15d44:	mov	r6, r1
   15d48:	mov	r0, #0
   15d4c:	mov	lr, r7
   15d50:	str	r0, [sp]
   15d54:	str	r0, [sp, #4]
   15d58:	mov	r8, r2
   15d5c:	str	r0, [sp, #8]
   15d60:	movw	r5, #28936	; 0x7108
   15d64:	str	r0, [sp, #12]
   15d68:	movt	r5, #3
   15d6c:	str	r0, [sp, #16]
   15d70:	mov	ip, r4
   15d74:	str	r0, [sp, #20]
   15d78:	str	r0, [sp, #24]
   15d7c:	str	r0, [sp, #28]
   15d80:	str	r0, [sp, #32]
   15d84:	str	r0, [sp, #36]	; 0x24
   15d88:	str	r0, [sp, #40]	; 0x28
   15d8c:	str	r0, [sp, #44]	; 0x2c
   15d90:	str	r0, [sp, #48]	; 0x30
   15d94:	str	r0, [sp, #52]	; 0x34
   15d98:	ldm	lr!, {r0, r1, r2, r3}
   15d9c:	ldr	r9, [r5]
   15da0:	stmia	ip!, {r0, r1, r2, r3}
   15da4:	ldm	lr!, {r0, r1, r2, r3}
   15da8:	str	r9, [sp, #60]	; 0x3c
   15dac:	stmia	ip!, {r0, r1, r2, r3}
   15db0:	ldm	lr!, {r0, r1, r2, r3}
   15db4:	stmia	ip!, {r0, r1, r2, r3}
   15db8:	ldr	r3, [r4, #32]
   15dbc:	ldrh	r2, [r4, #148]	; 0x94
   15dc0:	cmp	r3, #2
   15dc4:	ldm	lr, {r0, r1}
   15dc8:	movgt	r9, #2
   15dcc:	movle	r9, #1
   15dd0:	cmp	r2, r9
   15dd4:	stm	ip, {r0, r1}
   15dd8:	bcc	16038 <__assert_fail@plt+0x50c0>
   15ddc:	ldrh	r2, [r4, #150]	; 0x96
   15de0:	cmp	r2, r9
   15de4:	beq	15e00 <__assert_fail@plt+0x4e88>
   15de8:	cmp	r3, #2
   15dec:	ble	1602c <__assert_fail@plt+0x50b4>
   15df0:	mov	r1, r3
   15df4:	ldr	r0, [r4, #144]	; 0x90
   15df8:	bl	19fc4 <__assert_fail@plt+0x904c>
   15dfc:	strh	r9, [r4, #150]	; 0x96
   15e00:	ldr	r3, [r4]
   15e04:	cmp	r3, #0
   15e08:	beq	15fe0 <__assert_fail@plt+0x5068>
   15e0c:	sub	r3, r3, #4
   15e10:	cmp	r3, #3
   15e14:	mvnhi	r3, #1
   15e18:	bls	15fe8 <__assert_fail@plt+0x5070>
   15e1c:	ldr	r2, [r7, #36]	; 0x24
   15e20:	str	r3, [r4, #68]	; 0x44
   15e24:	cmp	r2, #0
   15e28:	beq	16004 <__assert_fail@plt+0x508c>
   15e2c:	ldr	r3, [r4, #4]
   15e30:	cmp	r3, #0
   15e34:	bne	16024 <__assert_fail@plt+0x50ac>
   15e38:	ldr	r3, [r4, #72]	; 0x48
   15e3c:	mov	r9, #65536	; 0x10000
   15e40:	cmp	r3, r9
   15e44:	bcs	16024 <__assert_fail@plt+0x50ac>
   15e48:	mov	r3, #0
   15e4c:	ldr	r0, [r4, #76]	; 0x4c
   15e50:	str	r3, [r4, #72]	; 0x48
   15e54:	bl	10d44 <free@plt>
   15e58:	mov	r0, #1
   15e5c:	mov	r1, r9
   15e60:	bl	10d08 <calloc@plt>
   15e64:	cmp	r0, #0
   15e68:	str	r0, [r4, #76]	; 0x4c
   15e6c:	beq	16068 <__assert_fail@plt+0x50f0>
   15e70:	str	r9, [r4, #72]	; 0x48
   15e74:	mov	r1, #0
   15e78:	str	r0, [r4, #80]	; 0x50
   15e7c:	str	r1, [r4, #84]	; 0x54
   15e80:	add	r0, r4, #96	; 0x60
   15e84:	bl	1c4dc <__assert_fail@plt+0xb564>
   15e88:	ldr	r3, [r4, #4]
   15e8c:	str	r8, [r4, #64]	; 0x40
   15e90:	cmp	r3, #0
   15e94:	beq	16070 <__assert_fail@plt+0x50f8>
   15e98:	ldr	r3, [r7, #32]
   15e9c:	cmp	r3, #2
   15ea0:	bgt	1608c <__assert_fail@plt+0x5114>
   15ea4:	mov	r2, #4
   15ea8:	mov	r3, #34	; 0x22
   15eac:	strb	r2, [r6]
   15eb0:	mov	r2, #77	; 0x4d
   15eb4:	strb	r3, [r6, #1]
   15eb8:	mov	r3, #24
   15ebc:	strb	r2, [r6, #2]
   15ec0:	add	r0, r6, #4
   15ec4:	strb	r3, [r6, #3]
   15ec8:	ldrd	r2, [r4, #16]
   15ecc:	ldr	ip, [r4, #24]
   15ed0:	orrs	r1, r2, r3
   15ed4:	ldr	lr, [r4, #4]
   15ed8:	ldr	r3, [r4, #28]
   15edc:	ldr	r1, [r4, #8]
   15ee0:	moveq	r2, #0
   15ee4:	movne	r2, #8
   15ee8:	and	lr, lr, #1
   15eec:	cmp	ip, #0
   15ef0:	and	r3, r3, #1
   15ef4:	and	r1, r1, #1
   15ef8:	movne	ip, #65	; 0x41
   15efc:	moveq	ip, #64	; 0x40
   15f00:	add	ip, ip, lr, lsl #5
   15f04:	add	r3, ip, r3, lsl #4
   15f08:	add	r3, r3, r1, lsl #2
   15f0c:	add	r3, r2, r3
   15f10:	strb	r3, [r6, #4]
   15f14:	ldr	r3, [r4]
   15f18:	and	r3, r3, #7
   15f1c:	lsl	r3, r3, #4
   15f20:	strb	r3, [r6, #5]
   15f24:	ldrd	r2, [r4, #16]
   15f28:	orrs	r1, r2, r3
   15f2c:	addeq	r7, r6, #6
   15f30:	beq	15f7c <__assert_fail@plt+0x5004>
   15f34:	add	r7, r6, #14
   15f38:	lsr	r1, r2, #16
   15f3c:	strb	r2, [r6, #6]
   15f40:	lsr	ip, r2, #8
   15f44:	strb	r3, [r6, #10]
   15f48:	strb	r1, [r6, #8]
   15f4c:	lsr	r1, r2, #24
   15f50:	strb	ip, [r6, #7]
   15f54:	lsr	r2, r3, #8
   15f58:	strb	r1, [r6, #9]
   15f5c:	strb	r2, [r6, #11]
   15f60:	lsr	r2, r3, #16
   15f64:	lsr	r3, r3, #24
   15f68:	strb	r2, [r6, #12]
   15f6c:	strb	r3, [r6, #13]
   15f70:	mov	r2, #0
   15f74:	mov	r3, #0
   15f78:	strd	r2, [r4, #88]	; 0x58
   15f7c:	ldr	r3, [r4, #24]
   15f80:	cmp	r3, #0
   15f84:	beq	15fa8 <__assert_fail@plt+0x5030>
   15f88:	strb	r3, [r7]
   15f8c:	lsr	r1, r3, #8
   15f90:	lsr	r2, r3, #16
   15f94:	strb	r1, [r7, #1]
   15f98:	strb	r2, [r7, #2]
   15f9c:	lsr	r3, r3, #24
   15fa0:	add	r7, r7, #4
   15fa4:	strb	r3, [r7, #-1]
   15fa8:	rsb	r1, r0, r7
   15fac:	mov	r2, #0
   15fb0:	bl	1c428 <__assert_fail@plt+0xb4b0>
   15fb4:	mov	r3, #1
   15fb8:	lsr	r0, r0, #8
   15fbc:	strb	r0, [r7], #1
   15fc0:	rsb	r0, r6, r7
   15fc4:	str	r3, [r4, #60]	; 0x3c
   15fc8:	ldr	r2, [sp, #60]	; 0x3c
   15fcc:	ldr	r3, [r5]
   15fd0:	cmp	r2, r3
   15fd4:	bne	160ac <__assert_fail@plt+0x5134>
   15fd8:	add	sp, sp, #68	; 0x44
   15fdc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15fe0:	mov	r2, #4
   15fe4:	str	r2, [r4]
   15fe8:	movw	r2, #16840	; 0x41c8
   15fec:	movt	r2, #2
   15ff0:	ldr	r3, [r2, r3, lsl #2]
   15ff4:	ldr	r2, [r7, #36]	; 0x24
   15ff8:	cmp	r2, #0
   15ffc:	str	r3, [r4, #68]	; 0x44
   16000:	bne	15e2c <__assert_fail@plt+0x4eb4>
   16004:	ldr	r9, [r4, #4]
   16008:	cmp	r9, #0
   1600c:	moveq	r9, #131072	; 0x20000
   16010:	movne	r9, #0
   16014:	add	r9, r9, r3
   16018:	ldr	r3, [r4, #72]	; 0x48
   1601c:	cmp	r3, r9
   16020:	bcc	15e48 <__assert_fail@plt+0x4ed0>
   16024:	ldr	r0, [r4, #76]	; 0x4c
   16028:	b	15e74 <__assert_fail@plt+0x4efc>
   1602c:	ldr	r0, [r4, #144]	; 0x90
   16030:	bl	14924 <__assert_fail@plt+0x39ac>
   16034:	b	15dfc <__assert_fail@plt+0x4e84>
   16038:	ldr	r0, [r4, #144]	; 0x90
   1603c:	bl	10d44 <free@plt>
   16040:	ldr	r3, [r4, #32]
   16044:	cmp	r3, #2
   16048:	ble	1609c <__assert_fail@plt+0x5124>
   1604c:	bl	19f4c <__assert_fail@plt+0x8fd4>
   16050:	mov	r3, r0
   16054:	str	r0, [r4, #144]	; 0x90
   16058:	cmp	r3, #0
   1605c:	strhne	r9, [r4, #148]	; 0x94
   16060:	strhne	r9, [r4, #150]	; 0x96
   16064:	bne	15e00 <__assert_fail@plt+0x4e88>
   16068:	mvn	r0, #8
   1606c:	b	15fc8 <__assert_fail@plt+0x5050>
   16070:	mov	r1, r8
   16074:	ldr	r0, [r4, #144]	; 0x90
   16078:	ldr	r2, [r4, #32]
   1607c:	bl	158fc <__assert_fail@plt+0x4984>
   16080:	ldr	r3, [r7, #32]
   16084:	cmp	r3, #2
   16088:	ble	15ea4 <__assert_fail@plt+0x4f2c>
   1608c:	ldr	r1, [r7, #40]	; 0x28
   16090:	ldr	r0, [r4, #144]	; 0x90
   16094:	bl	1a0b4 <__assert_fail@plt+0x913c>
   16098:	b	15ea4 <__assert_fail@plt+0x4f2c>
   1609c:	bl	148fc <__assert_fail@plt+0x3984>
   160a0:	mov	r3, r0
   160a4:	str	r0, [r4, #144]	; 0x90
   160a8:	b	16058 <__assert_fail@plt+0x50e0>
   160ac:	bl	10db0 <__stack_chk_fail@plt>
   160b0:	cmn	r0, #20
   160b4:	movls	r0, #0
   160b8:	movhi	r0, #1
   160bc:	bx	lr
   160c0:	cmn	r0, #20
   160c4:	movwhi	r3, #16840	; 0x41c8
   160c8:	movthi	r3, #2
   160cc:	subhi	r0, r3, r0, lsl #2
   160d0:	ldrhi	r0, [r0, #16]
   160d4:	movwls	r0, #16940	; 0x422c
   160d8:	movtls	r0, #2
   160dc:	bx	lr
   160e0:	cmn	r0, #20
   160e4:	rsbhi	r0, r0, #0
   160e8:	movls	r0, #0
   160ec:	bx	lr
   160f0:	mov	r0, #100	; 0x64
   160f4:	bx	lr
   160f8:	mov	r0, #12
   160fc:	bx	lr
   16100:	push	{r4, r5, r6, lr}
   16104:	movw	r4, #28936	; 0x7108
   16108:	movt	r4, #3
   1610c:	sub	sp, sp, #64	; 0x40
   16110:	cmp	r1, #0
   16114:	mov	r6, r0
   16118:	ldr	r3, [r4]
   1611c:	str	r3, [sp, #60]	; 0x3c
   16120:	beq	16180 <__assert_fail@plt+0x5208>
   16124:	mov	lr, r1
   16128:	mov	ip, sp
   1612c:	ldm	lr!, {r0, r1, r2, r3}
   16130:	stmia	ip!, {r0, r1, r2, r3}
   16134:	ldm	lr!, {r0, r1, r2, r3}
   16138:	stmia	ip!, {r0, r1, r2, r3}
   1613c:	ldm	lr!, {r0, r1, r2, r3}
   16140:	stmia	ip!, {r0, r1, r2, r3}
   16144:	ldm	lr, {r0, r1}
   16148:	stm	ip, {r0, r1}
   1614c:	mov	r2, #0
   16150:	mov	r0, r6
   16154:	mov	r1, sp
   16158:	mov	r3, #1
   1615c:	str	r3, [sp, #36]	; 0x24
   16160:	bl	157dc <__assert_fail@plt+0x4864>
   16164:	ldr	r2, [sp, #60]	; 0x3c
   16168:	ldr	r3, [r4]
   1616c:	cmp	r2, r3
   16170:	add	r0, r0, #19
   16174:	bne	161b8 <__assert_fail@plt+0x5240>
   16178:	add	sp, sp, #64	; 0x40
   1617c:	pop	{r4, r5, r6, pc}
   16180:	str	r1, [sp]
   16184:	str	r1, [sp, #4]
   16188:	str	r1, [sp, #8]
   1618c:	str	r1, [sp, #12]
   16190:	str	r1, [sp, #16]
   16194:	str	r1, [sp, #20]
   16198:	str	r1, [sp, #24]
   1619c:	str	r1, [sp, #28]
   161a0:	str	r1, [sp, #32]
   161a4:	str	r1, [sp, #40]	; 0x28
   161a8:	str	r1, [sp, #44]	; 0x2c
   161ac:	str	r1, [sp, #48]	; 0x30
   161b0:	str	r1, [sp, #52]	; 0x34
   161b4:	b	1614c <__assert_fail@plt+0x51d4>
   161b8:	bl	10db0 <__stack_chk_fail@plt>
   161bc:	push	{r4, lr}
   161c0:	subs	r4, r0, #0
   161c4:	popeq	{r4, pc}
   161c8:	ldr	r0, [r4]
   161cc:	bl	10d44 <free@plt>
   161d0:	ldr	r0, [r4, #4]
   161d4:	bl	1493c <__assert_fail@plt+0x39c4>
   161d8:	ldr	r0, [r4, #8]
   161dc:	bl	19fac <__assert_fail@plt+0x9034>
   161e0:	mov	r0, r4
   161e4:	pop	{r4, lr}
   161e8:	b	10d44 <free@plt>
   161ec:	push	{r4, r5, r6, lr}
   161f0:	mov	r6, r0
   161f4:	mov	r0, #12
   161f8:	mov	r5, r1
   161fc:	bl	10e1c <malloc@plt>
   16200:	subs	r4, r0, #0
   16204:	beq	162a0 <__assert_fail@plt+0x5328>
   16208:	cmp	r5, #65536	; 0x10000
   1620c:	subhi	r3, r5, #65536	; 0x10000
   16210:	movhi	r5, #65536	; 0x10000
   16214:	addhi	r6, r6, r3
   16218:	mov	r0, r5
   1621c:	bl	10e1c <malloc@plt>
   16220:	str	r0, [r4]
   16224:	bl	148fc <__assert_fail@plt+0x3984>
   16228:	str	r0, [r4, #4]
   1622c:	bl	19f4c <__assert_fail@plt+0x8fd4>
   16230:	mov	r3, r0
   16234:	ldr	r0, [r4]
   16238:	str	r3, [r4, #8]
   1623c:	cmp	r0, #0
   16240:	beq	16298 <__assert_fail@plt+0x5320>
   16244:	ldr	r2, [r4, #4]
   16248:	cmp	r2, #0
   1624c:	beq	16298 <__assert_fail@plt+0x5320>
   16250:	cmp	r3, #0
   16254:	beq	16298 <__assert_fail@plt+0x5320>
   16258:	mov	r1, r6
   1625c:	mov	r2, r5
   16260:	bl	10d74 <memcpy@plt>
   16264:	mov	r2, r5
   16268:	ldr	r1, [r4]
   1626c:	ldr	r0, [r4, #4]
   16270:	bl	14954 <__assert_fail@plt+0x39dc>
   16274:	ldr	r0, [r4, #8]
   16278:	mov	r1, #9
   1627c:	bl	1a08c <__assert_fail@plt+0x9114>
   16280:	mov	r2, r5
   16284:	ldr	r0, [r4, #8]
   16288:	ldr	r1, [r4]
   1628c:	bl	1a0cc <__assert_fail@plt+0x9154>
   16290:	mov	r0, r4
   16294:	pop	{r4, r5, r6, pc}
   16298:	mov	r0, r4
   1629c:	bl	161bc <__assert_fail@plt+0x5244>
   162a0:	mov	r0, #0
   162a4:	pop	{r4, r5, r6, pc}
   162a8:	push	{r3, r4, r5, lr}
   162ac:	mov	r4, r0
   162b0:	mov	r5, r1
   162b4:	mov	r0, #1
   162b8:	mov	r1, #152	; 0x98
   162bc:	bl	10d08 <calloc@plt>
   162c0:	subs	r3, r0, #0
   162c4:	strne	r5, [r3, #56]	; 0x38
   162c8:	movne	r2, #0
   162cc:	strne	r2, [r3, #60]	; 0x3c
   162d0:	movne	r0, r2
   162d4:	strne	r3, [r4]
   162d8:	mvneq	r0, #8
   162dc:	pop	{r3, r4, r5, pc}
   162e0:	push	{r4, lr}
   162e4:	subs	r4, r0, #0
   162e8:	beq	16304 <__assert_fail@plt+0x538c>
   162ec:	ldr	r0, [r4, #144]	; 0x90
   162f0:	bl	10d44 <free@plt>
   162f4:	ldr	r0, [r4, #76]	; 0x4c
   162f8:	bl	10d44 <free@plt>
   162fc:	mov	r0, r4
   16300:	bl	10d44 <free@plt>
   16304:	mov	r0, #0
   16308:	pop	{r4, pc}
   1630c:	cmp	r2, #18
   16310:	ldr	ip, [sp]
   16314:	bhi	16320 <__assert_fail@plt+0x53a8>
   16318:	mvn	r0, #10
   1631c:	bx	lr
   16320:	mov	r2, r3
   16324:	mov	r3, ip
   16328:	b	15d2c <__assert_fail@plt+0x4db4>
   1632c:	cmp	r2, #18
   16330:	bhi	1633c <__assert_fail@plt+0x53c4>
   16334:	mvn	r0, #10
   16338:	bx	lr
   1633c:	mov	r2, #0
   16340:	b	15d2c <__assert_fail@plt+0x4db4>
   16344:	mvn	r2, #0
   16348:	b	157dc <__assert_fail@plt+0x4864>
   1634c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16350:	movw	r5, #28936	; 0x7108
   16354:	movt	r5, #3
   16358:	mov	r4, r0
   1635c:	ldr	r0, [r0, #32]
   16360:	mov	fp, r2
   16364:	ldr	r2, [r5]
   16368:	sub	sp, sp, #68	; 0x44
   1636c:	cmp	r0, #2
   16370:	mov	sl, r1
   16374:	mov	r9, r3
   16378:	ldr	r6, [r4, #68]	; 0x44
   1637c:	str	r2, [sp, #60]	; 0x3c
   16380:	ldr	r1, [r4, #4]
   16384:	ldr	r8, [sp, #108]	; 0x6c
   16388:	bgt	163cc <__assert_fail@plt+0x5454>
   1638c:	movw	r3, #23012	; 0x59e4
   16390:	cmp	r1, #1
   16394:	movt	r3, #1
   16398:	movw	r7, #22456	; 0x57b8
   1639c:	movt	r7, #1
   163a0:	moveq	r7, r3
   163a4:	ldr	r3, [r4, #60]	; 0x3c
   163a8:	cmp	r3, #1
   163ac:	beq	163ec <__assert_fail@plt+0x5474>
   163b0:	mvn	r0, #0
   163b4:	ldr	r2, [sp, #60]	; 0x3c
   163b8:	ldr	r3, [r5]
   163bc:	cmp	r2, r3
   163c0:	bne	166e8 <__assert_fail@plt+0x5770>
   163c4:	add	sp, sp, #68	; 0x44
   163c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163cc:	cmp	r1, #1
   163d0:	movw	r2, #22452	; 0x57b4
   163d4:	movw	r3, #22904	; 0x5978
   163d8:	movt	r2, #1
   163dc:	movt	r3, #1
   163e0:	movne	r7, r2
   163e4:	moveq	r7, r3
   163e8:	b	163a4 <__assert_fail@plt+0x542c>
   163ec:	ldr	r0, [sp, #104]	; 0x68
   163f0:	mov	r1, r4
   163f4:	ldr	r2, [r4, #84]	; 0x54
   163f8:	bl	157dc <__assert_fail@plt+0x4864>
   163fc:	cmp	r0, fp
   16400:	mvnhi	r0, #10
   16404:	bhi	163b4 <__assert_fail@plt+0x543c>
   16408:	ldr	r0, [r4, #84]	; 0x54
   1640c:	cmp	r8, #0
   16410:	add	r1, sp, #64	; 0x40
   16414:	mov	r3, #0
   16418:	subeq	r8, r1, #20
   1641c:	ldr	r2, [sp, #104]	; 0x68
   16420:	cmp	r0, r3
   16424:	str	r3, [sp, #44]	; 0x2c
   16428:	add	r2, r9, r2
   1642c:	str	r3, [sp, #48]	; 0x30
   16430:	str	r2, [sp, #28]
   16434:	str	r3, [sp, #52]	; 0x34
   16438:	str	r3, [sp, #56]	; 0x38
   1643c:	bne	16544 <__assert_fail@plt+0x55cc>
   16440:	rsb	r2, r9, r2
   16444:	mov	ip, sl
   16448:	mov	fp, r9
   1644c:	cmp	r6, r2
   16450:	bhi	164bc <__assert_fail@plt+0x5544>
   16454:	str	sl, [sp, #32]
   16458:	ldr	sl, [sp, #28]
   1645c:	str	r5, [sp, #36]	; 0x24
   16460:	mov	r5, ip
   16464:	ldr	lr, [r4, #144]	; 0x90
   16468:	mov	r0, r5
   1646c:	mov	r1, fp
   16470:	mov	r2, r6
   16474:	mov	r3, r7
   16478:	add	fp, fp, r6
   1647c:	str	lr, [sp]
   16480:	ldr	lr, [r4, #32]
   16484:	str	lr, [sp, #4]
   16488:	ldr	lr, [r4, #64]	; 0x40
   1648c:	str	lr, [sp, #8]
   16490:	ldr	lr, [r4, #28]
   16494:	str	lr, [sp, #12]
   16498:	bl	156c4 <__assert_fail@plt+0x474c>
   1649c:	rsb	r2, fp, sl
   164a0:	cmp	r6, r2
   164a4:	add	r5, r5, r0
   164a8:	bls	16464 <__assert_fail@plt+0x54ec>
   164ac:	mov	ip, r5
   164b0:	ldr	sl, [sp, #32]
   164b4:	ldr	r5, [sp, #36]	; 0x24
   164b8:	mov	r0, #2
   164bc:	ldr	r3, [r4, #36]	; 0x24
   164c0:	cmp	r3, #0
   164c4:	beq	164d4 <__assert_fail@plt+0x555c>
   164c8:	ldr	r3, [sp, #28]
   164cc:	cmp	r3, fp
   164d0:	bhi	16638 <__assert_fail@plt+0x56c0>
   164d4:	ldr	r3, [r4, #4]
   164d8:	cmp	r3, #0
   164dc:	bne	164e8 <__assert_fail@plt+0x5570>
   164e0:	cmp	r0, #2
   164e4:	beq	16690 <__assert_fail@plt+0x5718>
   164e8:	ldr	r3, [r4, #80]	; 0x50
   164ec:	ldr	r2, [r4, #76]	; 0x4c
   164f0:	ldr	r1, [r4, #72]	; 0x48
   164f4:	add	r3, r3, r6
   164f8:	add	r2, r2, r1
   164fc:	cmp	r3, r2
   16500:	bls	16510 <__assert_fail@plt+0x5598>
   16504:	ldr	r3, [r4, #36]	; 0x24
   16508:	cmp	r3, #0
   1650c:	beq	166ac <__assert_fail@plt+0x5734>
   16510:	ldr	r1, [sp, #28]
   16514:	cmp	r1, fp
   16518:	bhi	16598 <__assert_fail@plt+0x5620>
   1651c:	ldr	r3, [r4, #8]
   16520:	cmp	r3, #1
   16524:	beq	166cc <__assert_fail@plt+0x5754>
   16528:	ldrd	r2, [r4, #88]	; 0x58
   1652c:	rsb	r0, sl, ip
   16530:	ldr	r1, [sp, #104]	; 0x68
   16534:	adds	r2, r2, r1
   16538:	adc	r3, r3, #0
   1653c:	strd	r2, [r4, #88]	; 0x58
   16540:	b	163b4 <__assert_fail@plt+0x543c>
   16544:	ldr	r1, [sp, #104]	; 0x68
   16548:	rsb	fp, r0, r6
   1654c:	cmp	r1, fp
   16550:	bcs	165bc <__assert_fail@plt+0x5644>
   16554:	ldr	lr, [r4, #80]	; 0x50
   16558:	mov	r1, r9
   1655c:	ldr	r2, [sp, #104]	; 0x68
   16560:	add	r0, lr, r0
   16564:	str	r3, [sp, #24]
   16568:	ldr	fp, [sp, #28]
   1656c:	str	sl, [sp, #20]
   16570:	bl	10d74 <memcpy@plt>
   16574:	ldr	r3, [sp, #24]
   16578:	ldr	r1, [sp, #104]	; 0x68
   1657c:	ldr	ip, [sp, #20]
   16580:	mov	r2, r3
   16584:	ldr	r3, [r4, #84]	; 0x54
   16588:	mov	r0, r2
   1658c:	add	r3, r3, r1
   16590:	str	r3, [r4, #84]	; 0x54
   16594:	b	1644c <__assert_fail@plt+0x54d4>
   16598:	rsb	r6, fp, r1
   1659c:	ldr	r0, [r4, #80]	; 0x50
   165a0:	mov	r1, fp
   165a4:	str	ip, [sp, #20]
   165a8:	mov	r2, r6
   165ac:	bl	10d74 <memcpy@plt>
   165b0:	str	r6, [r4, #84]	; 0x54
   165b4:	ldr	ip, [sp, #20]
   165b8:	b	1651c <__assert_fail@plt+0x55a4>
   165bc:	ldr	r3, [r4, #80]	; 0x50
   165c0:	mov	r2, fp
   165c4:	mov	r1, r9
   165c8:	add	fp, r9, fp
   165cc:	add	r0, r3, r0
   165d0:	bl	10d74 <memcpy@plt>
   165d4:	ldr	ip, [r4, #144]	; 0x90
   165d8:	ldr	r1, [r4, #80]	; 0x50
   165dc:	mov	r2, r6
   165e0:	mov	r3, r7
   165e4:	mov	r0, sl
   165e8:	str	ip, [sp]
   165ec:	ldr	ip, [r4, #32]
   165f0:	str	ip, [sp, #4]
   165f4:	ldr	ip, [r4, #64]	; 0x40
   165f8:	str	ip, [sp, #8]
   165fc:	ldr	ip, [r4, #28]
   16600:	str	ip, [sp, #12]
   16604:	bl	156c4 <__assert_fail@plt+0x474c>
   16608:	ldr	r3, [r4, #4]
   1660c:	ldr	r1, [sp, #28]
   16610:	cmp	r3, #0
   16614:	rsb	r2, fp, r1
   16618:	ldreq	r3, [r4, #80]	; 0x50
   1661c:	addeq	r3, r3, r6
   16620:	streq	r3, [r4, #80]	; 0x50
   16624:	mov	r3, #0
   16628:	str	r3, [r4, #84]	; 0x54
   1662c:	add	ip, sl, r0
   16630:	mov	r0, #1
   16634:	b	1644c <__assert_fail@plt+0x54d4>
   16638:	ldr	lr, [r4, #144]	; 0x90
   1663c:	mov	r3, r7
   16640:	mov	r0, ip
   16644:	mov	r1, fp
   16648:	str	lr, [sp]
   1664c:	ldr	lr, [r4, #32]
   16650:	str	lr, [sp, #4]
   16654:	ldr	lr, [r4, #64]	; 0x40
   16658:	str	lr, [sp, #8]
   1665c:	ldr	lr, [r4, #28]
   16660:	str	ip, [sp, #20]
   16664:	str	lr, [sp, #12]
   16668:	bl	156c4 <__assert_fail@plt+0x474c>
   1666c:	ldr	r3, [r4, #4]
   16670:	ldr	ip, [sp, #20]
   16674:	cmp	r3, #0
   16678:	add	ip, ip, r0
   1667c:	ldrne	r3, [r4, #80]	; 0x50
   16680:	ldrne	fp, [sp, #28]
   16684:	ldrne	r2, [r4, #76]	; 0x4c
   16688:	bne	164f0 <__assert_fail@plt+0x5578>
   1668c:	ldr	fp, [sp, #28]
   16690:	ldr	r3, [r8]
   16694:	cmp	r3, #0
   16698:	beq	166ec <__assert_fail@plt+0x5774>
   1669c:	ldr	r3, [r4, #76]	; 0x4c
   166a0:	str	r3, [r4, #80]	; 0x50
   166a4:	mov	r2, r3
   166a8:	b	164f0 <__assert_fail@plt+0x5578>
   166ac:	mov	r0, r4
   166b0:	str	ip, [sp, #20]
   166b4:	bl	15d08 <__assert_fail@plt+0x4d90>
   166b8:	ldr	r3, [r4, #76]	; 0x4c
   166bc:	ldr	ip, [sp, #20]
   166c0:	add	r0, r3, r0
   166c4:	str	r0, [r4, #80]	; 0x50
   166c8:	b	16510 <__assert_fail@plt+0x5598>
   166cc:	mov	r1, r9
   166d0:	add	r0, r4, #96	; 0x60
   166d4:	ldr	r2, [sp, #104]	; 0x68
   166d8:	str	ip, [sp, #20]
   166dc:	bl	1c59c <__assert_fail@plt+0xb624>
   166e0:	ldr	ip, [sp, #20]
   166e4:	b	16528 <__assert_fail@plt+0x55b0>
   166e8:	bl	10db0 <__stack_chk_fail@plt>
   166ec:	mov	r0, r4
   166f0:	str	ip, [sp, #20]
   166f4:	bl	15d08 <__assert_fail@plt+0x4d90>
   166f8:	ldr	ip, [sp, #20]
   166fc:	cmp	r0, #0
   16700:	beq	163b0 <__assert_fail@plt+0x5438>
   16704:	ldr	r2, [r4, #76]	; 0x4c
   16708:	add	r3, r2, r0
   1670c:	str	r3, [r4, #80]	; 0x50
   16710:	b	164f0 <__assert_fail@plt+0x5578>
   16714:	push	{r4, r5, r6, lr}
   16718:	mov	r4, r0
   1671c:	ldr	r0, [r0, #84]	; 0x54
   16720:	sub	sp, sp, #16
   16724:	mov	r5, r1
   16728:	cmp	r0, #0
   1672c:	beq	16740 <__assert_fail@plt+0x57c8>
   16730:	ldr	r3, [r4, #60]	; 0x3c
   16734:	cmp	r3, #1
   16738:	mvnne	r0, #0
   1673c:	beq	16748 <__assert_fail@plt+0x57d0>
   16740:	add	sp, sp, #16
   16744:	pop	{r4, r5, r6, pc}
   16748:	add	r3, r0, #4
   1674c:	cmp	r3, r2
   16750:	mvnhi	r0, #10
   16754:	bhi	16740 <__assert_fail@plt+0x57c8>
   16758:	ldr	ip, [r4, #32]
   1675c:	ldr	r3, [r4, #4]
   16760:	cmp	ip, #2
   16764:	ldr	lr, [r4, #144]	; 0x90
   16768:	movwle	r1, #22456	; 0x57b8
   1676c:	movwle	r2, #23012	; 0x59e4
   16770:	movwgt	r1, #22452	; 0x57b4
   16774:	movwgt	r2, #22904	; 0x5978
   16778:	movtle	r1, #1
   1677c:	movtle	r2, #1
   16780:	movtgt	r1, #1
   16784:	movtgt	r2, #1
   16788:	cmp	r3, #1
   1678c:	movne	r3, r1
   16790:	ldr	r1, [r4, #80]	; 0x50
   16794:	str	ip, [sp, #4]
   16798:	moveq	r3, r2
   1679c:	str	lr, [sp]
   167a0:	mov	r2, r0
   167a4:	ldr	ip, [r4, #64]	; 0x40
   167a8:	mov	r0, r5
   167ac:	str	ip, [sp, #8]
   167b0:	ldr	ip, [r4, #28]
   167b4:	str	ip, [sp, #12]
   167b8:	bl	156c4 <__assert_fail@plt+0x474c>
   167bc:	ldr	r3, [r4, #4]
   167c0:	ldr	ip, [r4, #68]	; 0x44
   167c4:	cmp	r3, #0
   167c8:	ldr	r1, [r4, #76]	; 0x4c
   167cc:	ldreq	r3, [r4, #84]	; 0x54
   167d0:	ldreq	r2, [r4, #80]	; 0x50
   167d4:	ldrne	r3, [r4, #80]	; 0x50
   167d8:	addeq	r3, r2, r3
   167dc:	ldr	r2, [r4, #72]	; 0x48
   167e0:	streq	r3, [r4, #80]	; 0x50
   167e4:	add	r3, r3, ip
   167e8:	add	r2, r1, r2
   167ec:	add	r6, r5, r0
   167f0:	cmp	r3, r2
   167f4:	mov	r0, #0
   167f8:	str	r0, [r4, #84]	; 0x54
   167fc:	bhi	16808 <__assert_fail@plt+0x5890>
   16800:	rsb	r0, r5, r6
   16804:	b	16740 <__assert_fail@plt+0x57c8>
   16808:	mov	r0, r4
   1680c:	bl	15d08 <__assert_fail@plt+0x4d90>
   16810:	ldr	r3, [r4, #76]	; 0x4c
   16814:	add	r0, r3, r0
   16818:	str	r0, [r4, #80]	; 0x50
   1681c:	b	16800 <__assert_fail@plt+0x5888>
   16820:	push	{r4, r5, r6, lr}
   16824:	mov	r4, r0
   16828:	mov	r6, r1
   1682c:	bl	16714 <__assert_fail@plt+0x579c>
   16830:	cmn	r0, #20
   16834:	pophi	{r4, r5, r6, pc}
   16838:	add	r5, r6, r0
   1683c:	mov	r3, #0
   16840:	strb	r3, [r6, r0]
   16844:	add	ip, r5, #4
   16848:	strb	r3, [r5, #1]
   1684c:	strb	r3, [r5, #2]
   16850:	strb	r3, [r5, #3]
   16854:	ldr	r3, [r4, #8]
   16858:	cmp	r3, #1
   1685c:	beq	16898 <__assert_fail@plt+0x5920>
   16860:	ldrd	r2, [r4, #16]
   16864:	mov	r1, #0
   16868:	str	r1, [r4, #60]	; 0x3c
   1686c:	orrs	r0, r2, r3
   16870:	str	r1, [r4, #72]	; 0x48
   16874:	beq	16890 <__assert_fail@plt+0x5918>
   16878:	ldrd	r4, [r4, #88]	; 0x58
   1687c:	cmp	r3, r5
   16880:	cmpeq	r2, r4
   16884:	beq	16890 <__assert_fail@plt+0x5918>
   16888:	mvn	r0, #13
   1688c:	pop	{r4, r5, r6, pc}
   16890:	rsb	r0, r6, ip
   16894:	pop	{r4, r5, r6, pc}
   16898:	add	r0, r4, #96	; 0x60
   1689c:	bl	1c5b4 <__assert_fail@plt+0xb63c>
   168a0:	add	ip, r5, #8
   168a4:	lsr	r2, r0, #8
   168a8:	lsr	r3, r0, #16
   168ac:	strb	r0, [r5, #4]
   168b0:	lsr	r0, r0, #24
   168b4:	strb	r2, [r5, #5]
   168b8:	strb	r3, [r5, #6]
   168bc:	strb	r0, [r5, #7]
   168c0:	b	16860 <__assert_fail@plt+0x58e8>
   168c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168c8:	sub	sp, sp, #108	; 0x6c
   168cc:	movw	r7, #28936	; 0x7108
   168d0:	movt	r7, #3
   168d4:	ldr	lr, [sp, #152]	; 0x98
   168d8:	mov	r9, r1
   168dc:	str	r0, [sp, #16]
   168e0:	mov	sl, r2
   168e4:	ldr	r0, [r7]
   168e8:	cmp	lr, #0
   168ec:	ldr	r4, [sp, #148]	; 0x94
   168f0:	str	r3, [sp, #12]
   168f4:	ldr	r6, [sp, #144]	; 0x90
   168f8:	str	r0, [sp, #100]	; 0x64
   168fc:	str	r4, [sp, #20]
   16900:	beq	16aa4 <__assert_fail@plt+0x5b2c>
   16904:	ldm	lr!, {r0, r1, r2, r3}
   16908:	add	r8, sp, #40	; 0x28
   1690c:	mov	ip, r8
   16910:	stmia	ip!, {r0, r1, r2, r3}
   16914:	ldm	lr!, {r0, r1, r2, r3}
   16918:	ldr	fp, [sp, #40]	; 0x28
   1691c:	stmia	ip!, {r0, r1, r2, r3}
   16920:	ldm	lr!, {r0, r1, r2, r3}
   16924:	ldrd	r4, [sp, #56]	; 0x38
   16928:	orrs	r5, r4, r5
   1692c:	stmia	ip!, {r0, r1, r2, r3}
   16930:	ldm	lr, {r0, r1}
   16934:	stm	ip, {r0, r1}
   16938:	movne	r3, #0
   1693c:	strne	r6, [sp, #56]	; 0x38
   16940:	strne	r3, [sp, #60]	; 0x3c
   16944:	cmp	fp, #4
   16948:	bls	16a04 <__assert_fail@plt+0x5a8c>
   1694c:	cmp	r6, #65536	; 0x10000
   16950:	mov	r2, #4
   16954:	bls	16ae0 <__assert_fail@plt+0x5b68>
   16958:	mov	r3, #65536	; 0x10000
   1695c:	ldr	r5, [sp, #16]
   16960:	ldr	r4, [sp, #12]
   16964:	b	16970 <__assert_fail@plt+0x59f8>
   16968:	cmp	r6, r3
   1696c:	bls	169f8 <__assert_fail@plt+0x5a80>
   16970:	add	r2, r2, #1
   16974:	lsl	r3, r3, #2
   16978:	cmp	r2, fp
   1697c:	bcc	16968 <__assert_fail@plt+0x59f0>
   16980:	mov	r3, #1
   16984:	str	r5, [sp, #16]
   16988:	str	r4, [sp, #12]
   1698c:	str	fp, [sp, #40]	; 0x28
   16990:	str	r3, [sp, #76]	; 0x4c
   16994:	sub	fp, fp, #4
   16998:	cmp	fp, #3
   1699c:	mvnhi	r3, #1
   169a0:	bls	16a18 <__assert_fail@plt+0x5aa0>
   169a4:	cmp	r6, r3
   169a8:	mov	r0, r6
   169ac:	mov	r1, r8
   169b0:	mov	r2, #1
   169b4:	movls	r3, #1
   169b8:	str	r2, [sp, #24]
   169bc:	strls	r3, [sp, #44]	; 0x2c
   169c0:	mov	r3, #0
   169c4:	str	r3, [sp, #28]
   169c8:	str	r3, [sp, #32]
   169cc:	str	r3, [sp, #36]	; 0x24
   169d0:	bl	16100 <__assert_fail@plt+0x5188>
   169d4:	cmp	sl, r0
   169d8:	bcs	16a28 <__assert_fail@plt+0x5ab0>
   169dc:	mvn	r0, #10
   169e0:	ldr	r2, [sp, #100]	; 0x64
   169e4:	ldr	r3, [r7]
   169e8:	cmp	r2, r3
   169ec:	bne	16af4 <__assert_fail@plt+0x5b7c>
   169f0:	add	sp, sp, #108	; 0x6c
   169f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f8:	mov	fp, r2
   169fc:	str	r5, [sp, #16]
   16a00:	str	r4, [sp, #12]
   16a04:	cmp	fp, #0
   16a08:	mov	r3, #1
   16a0c:	str	fp, [sp, #40]	; 0x28
   16a10:	str	r3, [sp, #76]	; 0x4c
   16a14:	bne	16994 <__assert_fail@plt+0x5a1c>
   16a18:	movw	r3, #16840	; 0x41c8
   16a1c:	movt	r3, #2
   16a20:	ldr	r3, [r3, fp, lsl #2]
   16a24:	b	169a4 <__assert_fail@plt+0x5a2c>
   16a28:	cmp	sl, #18
   16a2c:	bls	169dc <__assert_fail@plt+0x5a64>
   16a30:	ldr	r2, [sp, #20]
   16a34:	mov	r3, r8
   16a38:	ldr	r0, [sp, #16]
   16a3c:	mov	r1, r9
   16a40:	bl	15d2c <__assert_fail@plt+0x4db4>
   16a44:	cmn	r0, #20
   16a48:	bhi	169e0 <__assert_fail@plt+0x5a68>
   16a4c:	add	r8, r9, r0
   16a50:	add	sl, r9, sl
   16a54:	add	r2, sp, #24
   16a58:	str	r6, [sp]
   16a5c:	str	r2, [sp, #4]
   16a60:	mov	r1, r8
   16a64:	ldr	r3, [sp, #12]
   16a68:	rsb	r2, r8, sl
   16a6c:	ldr	r0, [sp, #16]
   16a70:	bl	1634c <__assert_fail@plt+0x53d4>
   16a74:	cmn	r0, #20
   16a78:	bhi	169e0 <__assert_fail@plt+0x5a68>
   16a7c:	add	r4, r8, r0
   16a80:	add	r3, sp, #24
   16a84:	ldr	r0, [sp, #16]
   16a88:	rsb	r2, r4, sl
   16a8c:	mov	r1, r4
   16a90:	bl	16820 <__assert_fail@plt+0x58a8>
   16a94:	cmn	r0, #20
   16a98:	addls	r0, r4, r0
   16a9c:	rsbls	r0, r9, r0
   16aa0:	b	169e0 <__assert_fail@plt+0x5a68>
   16aa4:	str	lr, [sp, #44]	; 0x2c
   16aa8:	mov	fp, lr
   16aac:	str	lr, [sp, #48]	; 0x30
   16ab0:	add	r8, sp, #40	; 0x28
   16ab4:	str	lr, [sp, #52]	; 0x34
   16ab8:	str	lr, [sp, #56]	; 0x38
   16abc:	str	lr, [sp, #60]	; 0x3c
   16ac0:	str	lr, [sp, #64]	; 0x40
   16ac4:	str	lr, [sp, #68]	; 0x44
   16ac8:	str	lr, [sp, #72]	; 0x48
   16acc:	str	lr, [sp, #80]	; 0x50
   16ad0:	str	lr, [sp, #84]	; 0x54
   16ad4:	str	lr, [sp, #88]	; 0x58
   16ad8:	str	lr, [sp, #92]	; 0x5c
   16adc:	b	16a04 <__assert_fail@plt+0x5a8c>
   16ae0:	mov	r3, #1
   16ae4:	str	r2, [sp, #40]	; 0x28
   16ae8:	mov	fp, #0
   16aec:	str	r3, [sp, #76]	; 0x4c
   16af0:	b	16a18 <__assert_fail@plt+0x5aa0>
   16af4:	bl	10db0 <__stack_chk_fail@plt>
   16af8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16afc:	sub	sp, sp, #16384	; 0x4000
   16b00:	sub	sp, sp, #208	; 0xd0
   16b04:	movw	r4, #28936	; 0x7108
   16b08:	add	ip, sp, #16384	; 0x4000
   16b0c:	movt	r4, #3
   16b10:	mov	r9, r3
   16b14:	add	r3, sp, #16384	; 0x4000
   16b18:	ldr	r5, [ip, #240]	; 0xf0
   16b1c:	mov	r8, r0
   16b20:	ldr	ip, [r4]
   16b24:	mov	r7, r1
   16b28:	mov	r6, r2
   16b2c:	add	r0, sp, #16
   16b30:	mov	r1, #0
   16b34:	mov	r2, #152	; 0x98
   16b38:	str	ip, [r3, #204]	; 0xcc
   16b3c:	bl	10e88 <memset@plt>
   16b40:	cmp	r5, #0
   16b44:	mov	r3, #100	; 0x64
   16b48:	mov	ip, #5242880	; 0x500000
   16b4c:	str	r3, [sp, #72]	; 0x48
   16b50:	str	ip, [sp, #88]	; 0x58
   16b54:	beq	16c0c <__assert_fail@plt+0x5c94>
   16b58:	ldr	r3, [r5, #32]
   16b5c:	cmp	r3, #2
   16b60:	ble	16bc4 <__assert_fail@plt+0x5c4c>
   16b64:	mov	r3, r6
   16b68:	mov	ip, #0
   16b6c:	str	r9, [sp]
   16b70:	mov	r1, r8
   16b74:	str	r5, [sp, #8]
   16b78:	mov	r2, r7
   16b7c:	add	r0, sp, #16
   16b80:	str	ip, [sp, #4]
   16b84:	bl	168c4 <__assert_fail@plt+0x594c>
   16b88:	mov	r6, r0
   16b8c:	ldr	r3, [r5, #32]
   16b90:	cmp	r3, #2
   16b94:	ble	16ba0 <__assert_fail@plt+0x5c28>
   16b98:	ldr	r0, [sp, #160]	; 0xa0
   16b9c:	bl	10d44 <free@plt>
   16ba0:	add	ip, sp, #16384	; 0x4000
   16ba4:	mov	r0, r6
   16ba8:	ldr	r2, [ip, #204]	; 0xcc
   16bac:	ldr	r3, [r4]
   16bb0:	cmp	r2, r3
   16bb4:	bne	16c50 <__assert_fail@plt+0x5cd8>
   16bb8:	add	sp, sp, #16384	; 0x4000
   16bbc:	add	sp, sp, #208	; 0xd0
   16bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bc4:	add	sl, sp, #168	; 0xa8
   16bc8:	mov	r0, sl
   16bcc:	bl	14924 <__assert_fail@plt+0x39ac>
   16bd0:	mov	r3, r6
   16bd4:	mov	ip, #0
   16bd8:	str	r9, [sp]
   16bdc:	str	ip, [sp, #4]
   16be0:	mov	r1, r8
   16be4:	str	r5, [sp, #8]
   16be8:	mov	r2, r7
   16bec:	add	r0, sp, #16
   16bf0:	mov	ip, #1
   16bf4:	str	sl, [sp, #160]	; 0xa0
   16bf8:	strh	ip, [sp, #164]	; 0xa4
   16bfc:	strh	ip, [sp, #166]	; 0xa6
   16c00:	bl	168c4 <__assert_fail@plt+0x594c>
   16c04:	mov	r6, r0
   16c08:	b	16b8c <__assert_fail@plt+0x5c14>
   16c0c:	add	sl, sp, #168	; 0xa8
   16c10:	mov	r0, sl
   16c14:	bl	14924 <__assert_fail@plt+0x39ac>
   16c18:	mov	r3, r6
   16c1c:	str	r9, [sp]
   16c20:	mov	r1, r8
   16c24:	str	r5, [sp, #4]
   16c28:	mov	r2, r7
   16c2c:	str	r5, [sp, #8]
   16c30:	add	r0, sp, #16
   16c34:	mov	ip, #1
   16c38:	str	sl, [sp, #160]	; 0xa0
   16c3c:	strh	ip, [sp, #164]	; 0xa4
   16c40:	strh	ip, [sp, #166]	; 0xa6
   16c44:	bl	168c4 <__assert_fail@plt+0x594c>
   16c48:	mov	r6, r0
   16c4c:	b	16ba0 <__assert_fail@plt+0x5c28>
   16c50:	bl	10db0 <__stack_chk_fail@plt>
   16c54:	push	{r3, r4, r5, lr}
   16c58:	mov	r4, r0
   16c5c:	mov	r5, r1
   16c60:	mov	r0, #1
   16c64:	mov	r1, #208	; 0xd0
   16c68:	bl	10d08 <calloc@plt>
   16c6c:	subs	r3, r0, #0
   16c70:	strne	r5, [r3, #32]
   16c74:	strne	r3, [r4]
   16c78:	movne	r0, #0
   16c7c:	mvneq	r0, #0
   16c80:	pop	{r3, r4, r5, pc}
   16c84:	push	{r3, r4, r5, lr}
   16c88:	subs	r4, r0, #0
   16c8c:	moveq	r5, r4
   16c90:	beq	16cb0 <__assert_fail@plt+0x5d38>
   16c94:	ldr	r0, [r4, #56]	; 0x38
   16c98:	ldr	r5, [r4, #36]	; 0x24
   16c9c:	bl	10d44 <free@plt>
   16ca0:	ldr	r0, [r4, #68]	; 0x44
   16ca4:	bl	10d44 <free@plt>
   16ca8:	mov	r0, r4
   16cac:	bl	10d44 <free@plt>
   16cb0:	mov	r0, r5
   16cb4:	pop	{r3, r4, r5, pc}
   16cb8:	mov	r3, #0
   16cbc:	str	r3, [r0, #36]	; 0x24
   16cc0:	str	r3, [r0, #72]	; 0x48
   16cc4:	str	r3, [r0, #76]	; 0x4c
   16cc8:	bx	lr
   16ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cd0:	sub	sp, sp, #68	; 0x44
   16cd4:	movw	ip, #28936	; 0x7108
   16cd8:	movt	ip, #3
   16cdc:	ldr	r5, [sp, #104]	; 0x68
   16ce0:	mov	r4, r0
   16ce4:	str	r1, [sp, #16]
   16ce8:	mov	fp, #3
   16cec:	ldr	sl, [r2]
   16cf0:	ldr	r6, [r5]
   16cf4:	str	r5, [sp, #36]	; 0x24
   16cf8:	ldr	r5, [sp, #108]	; 0x6c
   16cfc:	ldr	r1, [ip]
   16d00:	str	ip, [sp, #20]
   16d04:	ldr	ip, [sp, #16]
   16d08:	str	r5, [sp, #24]
   16d0c:	add	sl, ip, sl
   16d10:	ldr	ip, [sp, #24]
   16d14:	str	r3, [sp, #32]
   16d18:	str	r2, [sp, #28]
   16d1c:	mov	r2, #0
   16d20:	ldr	r3, [r0, #36]	; 0x24
   16d24:	cmp	ip, r2
   16d28:	add	r0, sp, #64	; 0x40
   16d2c:	ldr	r5, [sp, #32]
   16d30:	subeq	ip, r0, #20
   16d34:	str	ip, [sp, #24]
   16d38:	ldr	ip, [sp, #36]	; 0x24
   16d3c:	add	r6, r5, r6
   16d40:	ldr	r7, [sp, #16]
   16d44:	mov	r8, r2
   16d48:	ldr	r5, [sp, #32]
   16d4c:	str	r2, [ip]
   16d50:	ldr	ip, [sp, #28]
   16d54:	str	r1, [sp, #60]	; 0x3c
   16d58:	str	r2, [sp, #44]	; 0x2c
   16d5c:	str	r2, [sp, #48]	; 0x30
   16d60:	str	r2, [sp, #52]	; 0x34
   16d64:	str	r2, [sp, #56]	; 0x38
   16d68:	str	r2, [ip]
   16d6c:	cmp	r3, #14
   16d70:	ldrls	pc, [pc, r3, lsl #2]
   16d74:	b	16d6c <__assert_fail@plt+0x5df4>
   16d78:	andeq	r6, r1, r4, lsl #31
   16d7c:	andeq	r6, r1, r8, lsl #29
   16d80:			; <UNDEFINED> instruction: 0x00016db4
   16d84:	andeq	r6, r1, r0, lsl #28
   16d88:	andeq	r7, r1, r8, lsr #6
   16d8c:	andeq	r7, r1, r8, asr #3
   16d90:	muleq	r1, r8, r2
   16d94:	andeq	r7, r1, r8, asr r1
   16d98:	strdeq	r7, [r1], -ip
   16d9c:	andeq	r7, r1, r0, lsr #1
   16da0:	andeq	r7, r1, r4, ror r0
   16da4:	andeq	r6, r1, r8, ror #31
   16da8:	andeq	r7, r1, r4, ror #4
   16dac:	andeq	r7, r1, r8, ror r1
   16db0:			; <UNDEFINED> instruction: 0x00016fb8
   16db4:	ldr	r3, [r4, #8]
   16db8:	cmp	r3, #0
   16dbc:	bne	17680 <__assert_fail@plt+0x6708>
   16dc0:	ldr	r9, [r4, #4]
   16dc4:	ldr	r2, [r4, #48]	; 0x30
   16dc8:	cmp	r9, #0
   16dcc:	ldr	r3, [r4, #52]	; 0x34
   16dd0:	moveq	r9, #131072	; 0x20000
   16dd4:	movne	r9, #0
   16dd8:	add	r9, r9, r2
   16ddc:	cmp	r9, r3
   16de0:	bhi	17638 <__assert_fail@plt+0x66c0>
   16de4:	ldr	r0, [r4, #68]	; 0x44
   16de8:	str	r8, [r4, #60]	; 0x3c
   16dec:	str	r8, [r4, #64]	; 0x40
   16df0:	str	r0, [r4, #80]	; 0x50
   16df4:	str	r8, [r4, #88]	; 0x58
   16df8:	str	r8, [r4, #84]	; 0x54
   16dfc:	str	fp, [r4, #36]	; 0x24
   16e00:	rsb	r9, r5, r6
   16e04:	cmp	r9, #3
   16e08:	bls	173a8 <__assert_fail@plt+0x6430>
   16e0c:	ldr	r3, [r4, #36]	; 0x24
   16e10:	add	r2, r5, #4
   16e14:	cmp	r3, #4
   16e18:	movne	r3, r5
   16e1c:	movne	r5, r2
   16e20:	beq	17858 <__assert_fail@plt+0x68e0>
   16e24:	ldrb	ip, [r3, #3]
   16e28:	ldrb	r0, [r3]
   16e2c:	ldrb	r1, [r3, #1]
   16e30:	ldrb	r2, [r3, #2]
   16e34:	add	r3, r0, ip, lsl #24
   16e38:	ldr	r0, [r4, #28]
   16e3c:	add	r3, r3, r1, lsl #8
   16e40:	add	r3, r3, r2, lsl #16
   16e44:	bics	r2, r3, #-2147483648	; 0x80000000
   16e48:	moveq	r3, #10
   16e4c:	streq	r3, [r4, #36]	; 0x24
   16e50:	beq	16e80 <__assert_fail@plt+0x5f08>
   16e54:	ldr	r1, [r4, #48]	; 0x30
   16e58:	cmp	r2, r1
   16e5c:	bhi	17774 <__assert_fail@plt+0x67fc>
   16e60:	cmp	r3, #0
   16e64:	blt	175c0 <__assert_fail@plt+0x6648>
   16e68:	cmp	sl, r7
   16e6c:	add	r2, r2, r0, lsl #2
   16e70:	mov	r3, #7
   16e74:	str	r2, [r4, #64]	; 0x40
   16e78:	str	r3, [r4, #36]	; 0x24
   16e7c:	beq	17738 <__assert_fail@plt+0x67c0>
   16e80:	ldr	r3, [r4, #36]	; 0x24
   16e84:	b	16d6c <__assert_fail@plt+0x5df4>
   16e88:	ldr	r3, [r4, #60]	; 0x3c
   16e8c:	rsb	r2, r5, r6
   16e90:	ldr	r9, [r4, #64]	; 0x40
   16e94:	rsb	r9, r3, r9
   16e98:	cmp	r9, r2
   16e9c:	movcs	r9, r2
   16ea0:	add	r0, r4, r3
   16ea4:	mov	r1, r5
   16ea8:	add	r0, r0, #188	; 0xbc
   16eac:	mov	r2, r9
   16eb0:	add	r5, r5, r9
   16eb4:	bl	10d74 <memcpy@plt>
   16eb8:	ldr	r3, [r4, #60]	; 0x3c
   16ebc:	ldr	r2, [r4, #64]	; 0x40
   16ec0:	add	r9, r9, r3
   16ec4:	str	r9, [r4, #60]	; 0x3c
   16ec8:	cmp	r9, r2
   16ecc:	bcs	1755c <__assert_fail@plt+0x65e4>
   16ed0:	add	r8, r2, #4
   16ed4:	rsb	r8, r9, r8
   16ed8:	ldr	r3, [r4, #4]
   16edc:	cmp	r3, #0
   16ee0:	bne	16f44 <__assert_fail@plt+0x5fcc>
   16ee4:	ldr	r3, [r4, #72]	; 0x48
   16ee8:	ldr	r0, [r4, #68]	; 0x44
   16eec:	cmp	r3, r0
   16ef0:	beq	16f44 <__assert_fail@plt+0x5fcc>
   16ef4:	ldr	ip, [sp, #24]
   16ef8:	ldr	r2, [ip]
   16efc:	cmp	r2, #0
   16f00:	bne	16f44 <__assert_fail@plt+0x5fcc>
   16f04:	ldr	r2, [r4, #36]	; 0x24
   16f08:	sub	r1, r2, #2
   16f0c:	cmp	r1, #7
   16f10:	bhi	16f44 <__assert_fail@plt+0x5fcc>
   16f14:	cmp	r2, #9
   16f18:	beq	177e8 <__assert_fail@plt+0x6870>
   16f1c:	ldr	r2, [r4, #76]	; 0x4c
   16f20:	cmp	r2, #65536	; 0x10000
   16f24:	movcc	r6, r2
   16f28:	movcs	r6, #65536	; 0x10000
   16f2c:	cmp	r6, #0
   16f30:	bne	1777c <__assert_fail@plt+0x6804>
   16f34:	str	r0, [r4, #72]	; 0x48
   16f38:	add	r0, r0, r6
   16f3c:	str	r6, [r4, #76]	; 0x4c
   16f40:	str	r0, [r4, #80]	; 0x50
   16f44:	ldr	ip, [sp, #32]
   16f48:	mov	r0, r8
   16f4c:	rsb	r5, ip, r5
   16f50:	ldr	ip, [sp, #16]
   16f54:	rsb	r7, ip, r7
   16f58:	ldr	ip, [sp, #36]	; 0x24
   16f5c:	str	r5, [ip]
   16f60:	ldr	r5, [sp, #28]
   16f64:	str	r7, [r5]
   16f68:	ldr	ip, [sp, #20]
   16f6c:	ldr	r2, [sp, #60]	; 0x3c
   16f70:	ldr	r3, [ip]
   16f74:	cmp	r2, r3
   16f78:	bne	1786c <__assert_fail@plt+0x68f4>
   16f7c:	add	sp, sp, #68	; 0x44
   16f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f84:	rsb	r2, r5, r6
   16f88:	cmp	r2, #18
   16f8c:	bhi	175d8 <__assert_fail@plt+0x6660>
   16f90:	cmp	r6, r5
   16f94:	str	r8, [r4, #60]	; 0x3c
   16f98:	beq	177a4 <__assert_fail@plt+0x682c>
   16f9c:	mov	r1, #7
   16fa0:	mov	r3, #0
   16fa4:	mov	r9, r1
   16fa8:	str	r1, [r4, #64]	; 0x40
   16fac:	mov	r1, #1
   16fb0:	str	r1, [r4, #36]	; 0x24
   16fb4:	b	16e98 <__assert_fail@plt+0x5f20>
   16fb8:	ldr	r8, [r4, #64]	; 0x40
   16fbc:	rsb	r6, r5, r6
   16fc0:	cmp	r6, r8
   16fc4:	movcs	r6, r8
   16fc8:	rsb	r8, r6, r8
   16fcc:	add	r5, r5, r6
   16fd0:	cmp	r8, #0
   16fd4:	str	r8, [r4, #64]	; 0x40
   16fd8:	streq	r8, [r4, #36]	; 0x24
   16fdc:	streq	r8, [r4, #72]	; 0x48
   16fe0:	streq	r8, [r4, #76]	; 0x4c
   16fe4:	b	16ed8 <__assert_fail@plt+0x5f60>
   16fe8:	ldr	r3, [r4, #60]	; 0x3c
   16fec:	rsb	r6, r5, r6
   16ff0:	rsb	r8, r3, #4
   16ff4:	cmp	r6, r8
   16ff8:	movcs	r6, r8
   16ffc:	ldr	r0, [r4, #56]	; 0x38
   17000:	mov	r1, r5
   17004:	add	r5, r5, r6
   17008:	mov	r2, r6
   1700c:	add	r0, r0, r3
   17010:	bl	10d74 <memcpy@plt>
   17014:	ldr	r8, [r4, #60]	; 0x3c
   17018:	add	r6, r6, r8
   1701c:	str	r6, [r4, #60]	; 0x3c
   17020:	cmp	r6, #3
   17024:	rsbls	r8, r6, #4
   17028:	bls	16ed8 <__assert_fail@plt+0x5f60>
   1702c:	ldr	r3, [r4, #56]	; 0x38
   17030:	ldrb	ip, [r3, #3]
   17034:	add	r0, r4, #92	; 0x5c
   17038:	ldrb	r1, [r3]
   1703c:	ldrb	r2, [r3, #1]
   17040:	ldrb	r3, [r3, #2]
   17044:	add	r1, r1, ip, lsl #24
   17048:	add	r2, r1, r2, lsl #8
   1704c:	add	r6, r2, r3, lsl #16
   17050:	bl	1c5b4 <__assert_fail@plt+0xb63c>
   17054:	cmp	r0, r6
   17058:	bne	1779c <__assert_fail@plt+0x6824>
   1705c:	mov	r3, #0
   17060:	str	r3, [r4, #36]	; 0x24
   17064:	str	r3, [r4, #72]	; 0x48
   17068:	mov	r8, r3
   1706c:	str	r3, [r4, #76]	; 0x4c
   17070:	b	16ed8 <__assert_fail@plt+0x5f60>
   17074:	ldrd	r2, [r4, #40]	; 0x28
   17078:	orrs	ip, r2, r3
   1707c:	bne	17794 <__assert_fail@plt+0x681c>
   17080:	ldr	r3, [r4, #8]
   17084:	cmp	r3, #0
   17088:	bne	17574 <__assert_fail@plt+0x65fc>
   1708c:	str	r3, [r4, #36]	; 0x24
   17090:	mov	r8, r3
   17094:	str	r3, [r4, #72]	; 0x48
   17098:	str	r3, [r4, #76]	; 0x4c
   1709c:	b	16ed8 <__assert_fail@plt+0x5f60>
   170a0:	ldr	r1, [r4, #84]	; 0x54
   170a4:	rsb	r9, r7, sl
   170a8:	ldr	r2, [r4, #88]	; 0x58
   170ac:	rsb	r3, r2, r1
   170b0:	ldr	r1, [r4, #80]	; 0x50
   170b4:	cmp	r3, r9
   170b8:	movcc	r9, r3
   170bc:	mov	r0, r7
   170c0:	add	r1, r1, r2
   170c4:	mov	r2, r9
   170c8:	bl	10d74 <memcpy@plt>
   170cc:	ldr	r3, [r4, #4]
   170d0:	cmp	r3, #0
   170d4:	beq	17598 <__assert_fail@plt+0x6620>
   170d8:	ldr	r2, [r4, #88]	; 0x58
   170dc:	add	r7, r7, r9
   170e0:	ldr	r3, [r4, #84]	; 0x54
   170e4:	add	r9, r9, r2
   170e8:	str	r9, [r4, #88]	; 0x58
   170ec:	cmp	r9, r3
   170f0:	beq	17320 <__assert_fail@plt+0x63a8>
   170f4:	mov	r8, #4
   170f8:	b	16ed8 <__assert_fail@plt+0x5f60>
   170fc:	ldr	r3, [r4, #60]	; 0x3c
   17100:	rsb	r9, r5, r6
   17104:	ldr	r2, [r4, #64]	; 0x40
   17108:	mov	r1, r5
   1710c:	ldr	r0, [r4, #56]	; 0x38
   17110:	rsb	r2, r3, r2
   17114:	cmp	r9, r2
   17118:	movcs	r9, r2
   1711c:	add	r0, r0, r3
   17120:	add	r5, r5, r9
   17124:	str	r5, [sp, #12]
   17128:	mov	r2, r9
   1712c:	bl	10d74 <memcpy@plt>
   17130:	ldr	r2, [r4, #60]	; 0x3c
   17134:	ldr	r3, [r4, #64]	; 0x40
   17138:	add	r9, r9, r2
   1713c:	str	r9, [r4, #60]	; 0x3c
   17140:	cmp	r9, r3
   17144:	bcs	173c4 <__assert_fail@plt+0x644c>
   17148:	add	r3, r3, #4
   1714c:	ldr	r5, [sp, #12]
   17150:	rsb	r8, r9, r3
   17154:	b	16ed8 <__assert_fail@plt+0x5f60>
   17158:	ldr	r3, [r4, #64]	; 0x40
   1715c:	rsb	r2, r5, r6
   17160:	cmp	r2, r3
   17164:	bcs	17464 <__assert_fail@plt+0x64ec>
   17168:	mov	r1, #8
   1716c:	str	r8, [r4, #60]	; 0x3c
   17170:	str	r1, [r4, #36]	; 0x24
   17174:	b	16e80 <__assert_fail@plt+0x5f08>
   17178:	ldr	r2, [r4, #60]	; 0x3c
   1717c:	rsb	r3, r5, r6
   17180:	ldr	r9, [r4, #64]	; 0x40
   17184:	rsb	r9, r2, r9
   17188:	cmp	r3, r9
   1718c:	movcc	r9, r3
   17190:	add	r0, r4, r2
   17194:	mov	r1, r5
   17198:	add	r0, r0, #188	; 0xbc
   1719c:	mov	r2, r9
   171a0:	add	r5, r5, r9
   171a4:	bl	10d74 <memcpy@plt>
   171a8:	ldr	r2, [r4, #60]	; 0x3c
   171ac:	ldr	r3, [r4, #64]	; 0x40
   171b0:	add	r9, r9, r2
   171b4:	str	r9, [r4, #60]	; 0x3c
   171b8:	cmp	r9, r3
   171bc:	bcs	17370 <__assert_fail@plt+0x63f8>
   171c0:	rsb	r8, r9, r3
   171c4:	b	16ed8 <__assert_fail@plt+0x5f60>
   171c8:	ldr	r3, [r4, #64]	; 0x40
   171cc:	rsb	r1, r7, sl
   171d0:	rsb	r2, r5, r6
   171d4:	mov	r0, r7
   171d8:	cmp	r1, r2
   171dc:	movcc	r9, r1
   171e0:	movcs	r9, r2
   171e4:	mov	r1, r5
   171e8:	cmp	r9, r3
   171ec:	movcs	r9, r3
   171f0:	mov	r2, r9
   171f4:	bl	10d74 <memcpy@plt>
   171f8:	ldr	r3, [r4, #28]
   171fc:	cmp	r3, #0
   17200:	bne	17608 <__assert_fail@plt+0x6690>
   17204:	ldr	r3, [r4, #8]
   17208:	cmp	r3, #0
   1720c:	bne	175f4 <__assert_fail@plt+0x667c>
   17210:	ldrd	r2, [r4, #16]
   17214:	orrs	r0, r2, r3
   17218:	beq	1722c <__assert_fail@plt+0x62b4>
   1721c:	ldrd	r2, [r4, #40]	; 0x28
   17220:	subs	r2, r2, r9
   17224:	sbc	r3, r3, #0
   17228:	strd	r2, [r4, #40]	; 0x28
   1722c:	ldr	r3, [r4, #4]
   17230:	cmp	r3, #0
   17234:	beq	1761c <__assert_fail@plt+0x66a4>
   17238:	ldr	r3, [r4, #64]	; 0x40
   1723c:	add	r5, r5, r9
   17240:	add	r7, r7, r9
   17244:	cmp	r3, r9
   17248:	beq	17690 <__assert_fail@plt+0x6718>
   1724c:	ldr	r8, [r4, #8]
   17250:	rsb	r3, r9, r3
   17254:	str	r3, [r4, #64]	; 0x40
   17258:	add	r3, r3, r8, lsl #2
   1725c:	add	r8, r3, #4
   17260:	b	16ed8 <__assert_fail@plt+0x5f60>
   17264:	rsb	r3, r5, r6
   17268:	cmp	r3, #3
   1726c:	movgt	r3, r5
   17270:	addgt	r5, r5, #4
   17274:	bgt	17374 <__assert_fail@plt+0x63fc>
   17278:	mov	r9, #4
   1727c:	mov	r0, #8
   17280:	mov	r1, #13
   17284:	str	r9, [r4, #60]	; 0x3c
   17288:	mov	r2, r9
   1728c:	str	r0, [r4, #64]	; 0x40
   17290:	str	r1, [r4, #36]	; 0x24
   17294:	b	17188 <__assert_fail@plt+0x6210>
   17298:	rsb	r3, r5, r6
   1729c:	ldr	r2, [r4, #60]	; 0x3c
   172a0:	cmp	r3, #3
   172a4:	ble	172b8 <__assert_fail@plt+0x6340>
   172a8:	cmp	r2, #0
   172ac:	moveq	r3, r5
   172b0:	addeq	r5, r5, #4
   172b4:	beq	172f4 <__assert_fail@plt+0x637c>
   172b8:	rsb	r9, r2, #4
   172bc:	add	r0, r4, r2
   172c0:	cmp	r9, r3
   172c4:	movcs	r9, r3
   172c8:	mov	r1, r5
   172cc:	add	r0, r0, #188	; 0xbc
   172d0:	add	r5, r5, r9
   172d4:	mov	r2, r9
   172d8:	bl	10d74 <memcpy@plt>
   172dc:	ldr	r3, [r4, #60]	; 0x3c
   172e0:	add	r9, r9, r3
   172e4:	str	r9, [r4, #60]	; 0x3c
   172e8:	cmp	r9, #3
   172ec:	bls	175b8 <__assert_fail@plt+0x6640>
   172f0:	add	r3, r4, #188	; 0xbc
   172f4:	ldrb	ip, [r3, #3]
   172f8:	add	r0, r4, #140	; 0x8c
   172fc:	ldrb	r2, [r3, #1]
   17300:	ldrb	r1, [r3]
   17304:	ldrb	r9, [r3, #2]
   17308:	add	r3, r1, ip, lsl #24
   1730c:	add	r3, r3, r2, lsl #8
   17310:	add	r9, r3, r9, lsl #16
   17314:	bl	1c5b4 <__assert_fail@plt+0xb63c>
   17318:	cmp	r0, r9
   1731c:	bne	174b4 <__assert_fail@plt+0x653c>
   17320:	str	fp, [r4, #36]	; 0x24
   17324:	b	16e80 <__assert_fail@plt+0x5f08>
   17328:	ldr	r3, [r4, #60]	; 0x3c
   1732c:	rsb	r9, r5, r6
   17330:	rsb	r2, r3, #4
   17334:	cmp	r2, r9
   17338:	movcc	r9, r2
   1733c:	ldr	r0, [r4, #56]	; 0x38
   17340:	mov	r1, r5
   17344:	add	r5, r5, r9
   17348:	mov	r2, r9
   1734c:	add	r0, r0, r3
   17350:	bl	10d74 <memcpy@plt>
   17354:	ldr	r3, [r4, #60]	; 0x3c
   17358:	add	r9, r9, r3
   1735c:	str	r9, [r4, #60]	; 0x3c
   17360:	cmp	r9, #3
   17364:	bhi	173bc <__assert_fail@plt+0x6444>
   17368:	rsb	r8, r9, #4
   1736c:	b	16ed8 <__assert_fail@plt+0x5f60>
   17370:	add	r3, r4, #192	; 0xc0
   17374:	ldrb	ip, [r3, #3]
   17378:	ldrb	r1, [r3, #1]
   1737c:	ldrb	r0, [r3]
   17380:	ldrb	r2, [r3, #2]
   17384:	add	r3, r0, ip, lsl #24
   17388:	str	r8, [r4, #20]
   1738c:	add	r3, r3, r1, lsl #8
   17390:	mov	ip, #14
   17394:	add	r3, r3, r2, lsl #16
   17398:	str	ip, [r4, #36]	; 0x24
   1739c:	str	r3, [r4, #16]
   173a0:	str	r3, [r4, #64]	; 0x40
   173a4:	b	16e80 <__assert_fail@plt+0x5f08>
   173a8:	mov	r2, #4
   173ac:	mov	r3, #0
   173b0:	str	r8, [r4, #60]	; 0x3c
   173b4:	str	r2, [r4, #36]	; 0x24
   173b8:	b	17334 <__assert_fail@plt+0x63bc>
   173bc:	ldr	r3, [r4, #56]	; 0x38
   173c0:	b	16e24 <__assert_fail@plt+0x5eac>
   173c4:	ldr	r2, [r4, #28]
   173c8:	ldr	r5, [r4, #56]	; 0x38
   173cc:	cmp	r2, #0
   173d0:	bne	17478 <__assert_fail@plt+0x6500>
   173d4:	ldr	r3, [r4, #48]	; 0x30
   173d8:	rsb	r9, r7, sl
   173dc:	cmp	r9, r3
   173e0:	bcc	174bc <__assert_fail@plt+0x6544>
   173e4:	ldr	r2, [r4, #76]	; 0x4c
   173e8:	mov	r0, r5
   173ec:	ldr	r1, [r4, #72]	; 0x48
   173f0:	cmp	r1, #0
   173f4:	cmpne	r2, #1073741824	; 0x40000000
   173f8:	subhi	r2, r2, #65536	; 0x10000
   173fc:	addhi	r1, r1, r2
   17400:	movls	ip, r2
   17404:	movhi	ip, #65536	; 0x10000
   17408:	ldr	r2, [r4, #64]	; 0x40
   1740c:	stm	sp, {r1, ip}
   17410:	mov	r1, r7
   17414:	bl	152bc <__assert_fail@plt+0x4344>
   17418:	subs	r5, r0, #0
   1741c:	blt	17848 <__assert_fail@plt+0x68d0>
   17420:	ldr	r3, [r4, #8]
   17424:	cmp	r3, #0
   17428:	bne	17708 <__assert_fail@plt+0x6790>
   1742c:	ldrd	r2, [r4, #16]
   17430:	orrs	r0, r2, r3
   17434:	beq	17448 <__assert_fail@plt+0x64d0>
   17438:	ldrd	r2, [r4, #40]	; 0x28
   1743c:	subs	r2, r2, r5
   17440:	sbc	r3, r3, r5, asr #31
   17444:	strd	r2, [r4, #40]	; 0x28
   17448:	ldr	r3, [r4, #4]
   1744c:	cmp	r3, #0
   17450:	beq	176ec <__assert_fail@plt+0x6774>
   17454:	add	r7, r7, r5
   17458:	str	fp, [r4, #36]	; 0x24
   1745c:	ldr	r5, [sp, #12]
   17460:	b	16e80 <__assert_fail@plt+0x5f08>
   17464:	ldr	r2, [r4, #28]
   17468:	add	ip, r5, r3
   1746c:	str	ip, [sp, #12]
   17470:	cmp	r2, #0
   17474:	beq	173d4 <__assert_fail@plt+0x645c>
   17478:	sub	r1, r3, #4
   1747c:	str	r1, [r4, #64]	; 0x40
   17480:	add	r3, r5, r1
   17484:	mov	r0, r5
   17488:	ldrb	lr, [r5, r1]
   1748c:	mov	r2, #0
   17490:	ldrb	r9, [r3, #3]
   17494:	ldrb	ip, [r3, #1]
   17498:	ldrb	r3, [r3, #2]
   1749c:	add	r9, lr, r9, lsl #24
   174a0:	add	r9, r9, ip, lsl #8
   174a4:	add	r9, r9, r3, lsl #16
   174a8:	bl	1c428 <__assert_fail@plt+0xb4b0>
   174ac:	cmp	r0, r9
   174b0:	beq	173d4 <__assert_fail@plt+0x645c>
   174b4:	mvn	r0, #6
   174b8:	b	16f68 <__assert_fail@plt+0x5ff0>
   174bc:	ldr	r2, [r4, #4]
   174c0:	ldr	r0, [r4, #72]	; 0x48
   174c4:	cmp	r2, #0
   174c8:	beq	176ac <__assert_fail@plt+0x6734>
   174cc:	ldr	ip, [r4, #76]	; 0x4c
   174d0:	ldr	r1, [r4, #80]	; 0x50
   174d4:	cmp	r0, #0
   174d8:	cmpne	ip, #1073741824	; 0x40000000
   174dc:	movls	r2, #0
   174e0:	movhi	r2, #1
   174e4:	cmp	r2, #0
   174e8:	subne	ip, ip, #65536	; 0x10000
   174ec:	addne	lr, r0, ip
   174f0:	moveq	lr, r0
   174f4:	movne	ip, #65536	; 0x10000
   174f8:	ldr	r2, [r4, #64]	; 0x40
   174fc:	mov	r0, r5
   17500:	str	lr, [sp]
   17504:	str	ip, [sp, #4]
   17508:	bl	152bc <__assert_fail@plt+0x4344>
   1750c:	subs	r3, r0, #0
   17510:	blt	17850 <__assert_fail@plt+0x68d8>
   17514:	ldr	r2, [r4, #8]
   17518:	cmp	r2, #0
   1751c:	bne	1771c <__assert_fail@plt+0x67a4>
   17520:	ldrd	r0, [r4, #16]
   17524:	orrs	r2, r0, r1
   17528:	beq	1753c <__assert_fail@plt+0x65c4>
   1752c:	ldrd	r0, [r4, #40]	; 0x28
   17530:	subs	r0, r0, r3
   17534:	sbc	r1, r1, r3, asr #31
   17538:	strd	r0, [r4, #40]	; 0x28
   1753c:	mov	r1, r3
   17540:	str	r3, [r4, #84]	; 0x54
   17544:	ldr	r5, [sp, #12]
   17548:	mov	r3, #9
   1754c:	mov	r2, #0
   17550:	str	r8, [r4, #88]	; 0x58
   17554:	str	r3, [r4, #36]	; 0x24
   17558:	b	170ac <__assert_fail@plt+0x6134>
   1755c:	mov	r0, r4
   17560:	add	r1, r4, #188	; 0xbc
   17564:	bl	15a50 <__assert_fail@plt+0x4ad8>
   17568:	cmn	r0, #20
   1756c:	bls	16e80 <__assert_fail@plt+0x5f08>
   17570:	b	16f68 <__assert_fail@plt+0x5ff0>
   17574:	rsb	r6, r5, r6
   17578:	cmp	r6, #3
   1757c:	bgt	176e0 <__assert_fail@plt+0x6768>
   17580:	mov	r3, #0
   17584:	mov	r2, #11
   17588:	str	r3, [r4, #60]	; 0x3c
   1758c:	mov	r8, #4
   17590:	str	r2, [r4, #36]	; 0x24
   17594:	b	16ff4 <__assert_fail@plt+0x607c>
   17598:	mov	r3, #1
   1759c:	mov	r0, r4
   175a0:	str	r3, [sp]
   175a4:	mov	r1, r7
   175a8:	mov	r2, r9
   175ac:	ldr	r3, [sp, #16]
   175b0:	bl	15538 <__assert_fail@plt+0x45c0>
   175b4:	b	170d8 <__assert_fail@plt+0x6160>
   175b8:	mov	r8, #1
   175bc:	b	16ed8 <__assert_fail@plt+0x5f60>
   175c0:	cmp	r0, #0
   175c4:	str	r2, [r4, #64]	; 0x40
   175c8:	bne	17740 <__assert_fail@plt+0x67c8>
   175cc:	mov	r3, #5
   175d0:	str	r3, [r4, #36]	; 0x24
   175d4:	b	16e80 <__assert_fail@plt+0x5f08>
   175d8:	mov	r0, r4
   175dc:	mov	r1, r5
   175e0:	bl	15a50 <__assert_fail@plt+0x4ad8>
   175e4:	cmn	r0, #20
   175e8:	bhi	16f68 <__assert_fail@plt+0x5ff0>
   175ec:	add	r5, r5, r0
   175f0:	b	16e80 <__assert_fail@plt+0x5f08>
   175f4:	add	r0, r4, #92	; 0x5c
   175f8:	mov	r1, r5
   175fc:	mov	r2, r9
   17600:	bl	1c59c <__assert_fail@plt+0xb624>
   17604:	b	17210 <__assert_fail@plt+0x6298>
   17608:	add	r0, r4, #140	; 0x8c
   1760c:	mov	r1, r5
   17610:	mov	r2, r9
   17614:	bl	1c59c <__assert_fail@plt+0xb624>
   17618:	b	17204 <__assert_fail@plt+0x628c>
   1761c:	str	r3, [sp]
   17620:	mov	r0, r4
   17624:	mov	r1, r7
   17628:	mov	r2, r9
   1762c:	ldr	r3, [sp, #16]
   17630:	bl	15538 <__assert_fail@plt+0x45c0>
   17634:	b	17238 <__assert_fail@plt+0x62c0>
   17638:	ldr	r0, [r4, #56]	; 0x38
   1763c:	str	r8, [r4, #52]	; 0x34
   17640:	bl	10d44 <free@plt>
   17644:	ldr	r0, [r4, #48]	; 0x30
   17648:	add	r0, r0, #4
   1764c:	bl	10e1c <malloc@plt>
   17650:	cmp	r0, #0
   17654:	str	r0, [r4, #56]	; 0x38
   17658:	beq	177ac <__assert_fail@plt+0x6834>
   1765c:	ldr	r0, [r4, #68]	; 0x44
   17660:	bl	10d44 <free@plt>
   17664:	mov	r0, r9
   17668:	bl	10e1c <malloc@plt>
   1766c:	cmp	r0, #0
   17670:	str	r0, [r4, #68]	; 0x44
   17674:	beq	177ac <__assert_fail@plt+0x6834>
   17678:	str	r9, [r4, #52]	; 0x34
   1767c:	b	16de8 <__assert_fail@plt+0x5e70>
   17680:	add	r0, r4, #92	; 0x5c
   17684:	mov	r1, #0
   17688:	bl	1c4dc <__assert_fail@plt+0xb564>
   1768c:	b	16dc0 <__assert_fail@plt+0x5e48>
   17690:	ldr	r3, [r4, #28]
   17694:	cmp	r3, #0
   17698:	beq	17320 <__assert_fail@plt+0x63a8>
   1769c:	mov	r3, #6
   176a0:	str	r8, [r4, #60]	; 0x3c
   176a4:	str	r3, [r4, #36]	; 0x24
   176a8:	b	16e80 <__assert_fail@plt+0x5f08>
   176ac:	ldr	r1, [r4, #68]	; 0x44
   176b0:	ldr	ip, [r4, #76]	; 0x4c
   176b4:	cmp	r0, r1
   176b8:	beq	17758 <__assert_fail@plt+0x67e0>
   176bc:	cmp	r0, #0
   176c0:	cmpne	ip, #1073741824	; 0x40000000
   176c4:	movls	r2, #0
   176c8:	movhi	r2, #1
   176cc:	cmp	ip, #65536	; 0x10000
   176d0:	addls	r1, r1, ip
   176d4:	addhi	r1, r1, #65536	; 0x10000
   176d8:	str	r1, [r4, #80]	; 0x50
   176dc:	b	174e4 <__assert_fail@plt+0x656c>
   176e0:	mov	r3, r5
   176e4:	add	r5, r5, #4
   176e8:	b	17030 <__assert_fail@plt+0x60b8>
   176ec:	str	r3, [sp]
   176f0:	mov	r0, r4
   176f4:	mov	r1, r7
   176f8:	mov	r2, r5
   176fc:	ldr	r3, [sp, #16]
   17700:	bl	15538 <__assert_fail@plt+0x45c0>
   17704:	b	17454 <__assert_fail@plt+0x64dc>
   17708:	add	r0, r4, #92	; 0x5c
   1770c:	mov	r1, r7
   17710:	mov	r2, r5
   17714:	bl	1c59c <__assert_fail@plt+0xb624>
   17718:	b	1742c <__assert_fail@plt+0x64b4>
   1771c:	ldr	r1, [r4, #80]	; 0x50
   17720:	mov	r2, r3
   17724:	add	r0, r4, #92	; 0x5c
   17728:	str	r3, [sp, #8]
   1772c:	bl	1c59c <__assert_fail@plt+0xb624>
   17730:	ldr	r3, [sp, #8]
   17734:	b	17520 <__assert_fail@plt+0x65a8>
   17738:	add	r8, r2, #4
   1773c:	b	16ed8 <__assert_fail@plt+0x5f60>
   17740:	add	r0, r4, #140	; 0x8c
   17744:	mov	r1, #0
   17748:	bl	1c4dc <__assert_fail@plt+0xb564>
   1774c:	mov	r3, #5
   17750:	str	r3, [r4, #36]	; 0x24
   17754:	b	16e80 <__assert_fail@plt+0x5f08>
   17758:	cmp	ip, #131072	; 0x20000
   1775c:	movls	r1, r0
   17760:	bhi	177b4 <__assert_fail@plt+0x683c>
   17764:	add	r1, r1, ip
   17768:	mov	lr, r0
   1776c:	str	r1, [r4, #80]	; 0x50
   17770:	b	174f8 <__assert_fail@plt+0x6580>
   17774:	mvn	r0, #1
   17778:	b	16f68 <__assert_fail@plt+0x5ff0>
   1777c:	add	r1, r3, r2
   17780:	mov	r2, r6
   17784:	rsb	r1, r6, r1
   17788:	bl	10d74 <memcpy@plt>
   1778c:	ldr	r0, [r4, #68]	; 0x44
   17790:	b	16f34 <__assert_fail@plt+0x5fbc>
   17794:	mvn	r0, #13
   17798:	b	16f68 <__assert_fail@plt+0x5ff0>
   1779c:	mvn	r0, #17
   177a0:	b	16f68 <__assert_fail@plt+0x5ff0>
   177a4:	mov	r0, #7
   177a8:	b	16f68 <__assert_fail@plt+0x5ff0>
   177ac:	mvn	r0, #8
   177b0:	b	16f68 <__assert_fail@plt+0x5ff0>
   177b4:	mov	r3, #65536	; 0x10000
   177b8:	sub	r1, ip, #65536	; 0x10000
   177bc:	mov	r2, r3
   177c0:	add	r1, r0, r1
   177c4:	str	r3, [sp, #8]
   177c8:	bl	10d74 <memcpy@plt>
   177cc:	ldr	r3, [sp, #8]
   177d0:	ldr	r1, [r4, #68]	; 0x44
   177d4:	ldr	r0, [r4, #72]	; 0x48
   177d8:	str	r3, [r4, #76]	; 0x4c
   177dc:	mov	ip, r3
   177e0:	ldr	r3, [r4, #48]	; 0x30
   177e4:	b	17764 <__assert_fail@plt+0x67ec>
   177e8:	ldr	r2, [r4, #84]	; 0x54
   177ec:	ldr	r6, [r4, #80]	; 0x50
   177f0:	cmp	r2, #65536	; 0x10000
   177f4:	ldr	ip, [r4, #76]	; 0x4c
   177f8:	rsb	r6, r0, r6
   177fc:	ldr	r1, [r4, #88]	; 0x58
   17800:	bhi	17838 <__assert_fail@plt+0x68c0>
   17804:	rsb	r2, r2, #65536	; 0x10000
   17808:	cmp	r2, r6
   1780c:	movcs	r2, r6
   17810:	cmp	r2, #0
   17814:	beq	17838 <__assert_fail@plt+0x68c0>
   17818:	rsb	r1, r1, ip
   1781c:	rsb	lr, r2, r6
   17820:	add	r1, r3, r1
   17824:	add	r0, r0, lr
   17828:	rsb	r1, r2, r1
   1782c:	bl	10d74 <memcpy@plt>
   17830:	ldr	r0, [r4, #68]	; 0x44
   17834:	ldr	r1, [r4, #88]	; 0x58
   17838:	add	r1, r1, r6
   1783c:	str	r0, [r4, #72]	; 0x48
   17840:	str	r1, [r4, #76]	; 0x4c
   17844:	b	16f44 <__assert_fail@plt+0x5fcc>
   17848:	mvn	r0, #0
   1784c:	b	16f68 <__assert_fail@plt+0x5ff0>
   17850:	mvn	r0, #15
   17854:	b	16f68 <__assert_fail@plt+0x5ff0>
   17858:	ldr	r3, [r4, #60]	; 0x3c
   1785c:	rsb	r9, r2, r6
   17860:	mov	r5, r2
   17864:	rsb	r2, r3, #4
   17868:	b	17334 <__assert_fail@plt+0x63bc>
   1786c:	bl	10db0 <__stack_chk_fail@plt>
   17870:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17874:	movw	r4, #28936	; 0x7108
   17878:	movt	r4, #3
   1787c:	mov	r5, r0
   17880:	ldr	r0, [r0, #36]	; 0x24
   17884:	sub	sp, sp, #32
   17888:	ldr	r6, [r4]
   1788c:	mov	sl, r1
   17890:	cmp	r0, #1
   17894:	str	r6, [sp, #28]
   17898:	bhi	178e4 <__assert_fail@plt+0x696c>
   1789c:	beq	178d4 <__assert_fail@plt+0x695c>
   178a0:	ldr	r1, [r3]
   178a4:	cmp	r1, #4
   178a8:	mvnls	r6, #11
   178ac:	bhi	17934 <__assert_fail@plt+0x69bc>
   178b0:	mov	r2, #0
   178b4:	str	r2, [r3]
   178b8:	ldr	r2, [sp, #28]
   178bc:	mov	r0, r6
   178c0:	ldr	r3, [r4]
   178c4:	cmp	r2, r3
   178c8:	bne	179f4 <__assert_fail@plt+0x6a7c>
   178cc:	add	sp, sp, #32
   178d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   178d4:	mov	r2, #0
   178d8:	mvn	r6, #18
   178dc:	str	r2, [r3]
   178e0:	b	178b8 <__assert_fail@plt+0x6940>
   178e4:	mov	lr, r5
   178e8:	mov	r6, #0
   178ec:	mov	ip, r1
   178f0:	str	r6, [r3]
   178f4:	ldm	lr!, {r0, r1, r2, r3}
   178f8:	add	r7, sp, #24
   178fc:	str	r6, [sp, #20]
   17900:	str	r6, [sp, #24]
   17904:	stmia	ip!, {r0, r1, r2, r3}
   17908:	ldm	lr, {r0, r1, r2, r3}
   1790c:	stm	ip, {r0, r1, r2, r3}
   17910:	mov	r1, r6
   17914:	str	r6, [sp, #4]
   17918:	mov	r3, r6
   1791c:	mov	r0, r5
   17920:	str	r7, [sp]
   17924:	add	r2, sp, #20
   17928:	bl	16ccc <__assert_fail@plt+0x5d54>
   1792c:	mov	r6, r0
   17930:	b	178b8 <__assert_fail@plt+0x6940>
   17934:	ldrb	r9, [r2, #3]
   17938:	movw	r0, #10832	; 0x2a50
   1793c:	ldrb	r6, [r2]
   17940:	movt	r0, #6221	; 0x184d
   17944:	ldrb	r8, [r2, #1]
   17948:	ldrb	r7, [r2, #2]
   1794c:	add	r6, r6, r9, lsl #24
   17950:	add	r6, r6, r8, lsl #8
   17954:	add	r6, r6, r7, lsl #16
   17958:	bic	r7, r6, #15
   1795c:	cmp	r7, r0
   17960:	beq	179ec <__assert_fail@plt+0x6a74>
   17964:	movw	r0, #8708	; 0x2204
   17968:	movt	r0, #6221	; 0x184d
   1796c:	cmp	r6, r0
   17970:	mvnne	r6, #12
   17974:	bne	178b0 <__assert_fail@plt+0x6938>
   17978:	ldrb	r0, [r2, #4]
   1797c:	ubfx	r6, r0, #3, #1
   17980:	and	r0, r0, #1
   17984:	add	r0, r0, r6, lsl #1
   17988:	lsl	r0, r0, #2
   1798c:	add	r0, r0, #7
   17990:	cmp	r1, r0
   17994:	movcc	r2, #0
   17998:	mvncc	r6, #11
   1799c:	strcc	r2, [r3]
   179a0:	bcc	178b8 <__assert_fail@plt+0x6940>
   179a4:	mov	r1, r2
   179a8:	mov	r2, r0
   179ac:	mov	r0, r5
   179b0:	str	r3, [sp, #12]
   179b4:	bl	15a50 <__assert_fail@plt+0x4ad8>
   179b8:	ldr	r3, [sp, #12]
   179bc:	mov	ip, sl
   179c0:	cmn	r0, #20
   179c4:	mov	r6, r0
   179c8:	strls	r0, [r3]
   179cc:	movhi	r2, #0
   179d0:	strhi	r2, [r3]
   179d4:	ldm	r5!, {r0, r1, r2, r3}
   179d8:	movls	r6, #4
   179dc:	stmia	ip!, {r0, r1, r2, r3}
   179e0:	ldm	r5, {r0, r1, r2, r3}
   179e4:	stm	ip, {r0, r1, r2, r3}
   179e8:	b	178b8 <__assert_fail@plt+0x6940>
   179ec:	mov	r0, #8
   179f0:	b	17990 <__assert_fail@plt+0x6a18>
   179f4:	bl	10db0 <__stack_chk_fail@plt>
   179f8:	ldr	ip, [r0, #36]	; 0x24
   179fc:	push	{r4, r5, r6}
   17a00:	cmp	ip, #2
   17a04:	ldr	r6, [sp, #16]
   17a08:	ldr	r4, [sp, #12]
   17a0c:	ldr	r5, [sp, #20]
   17a10:	ldr	ip, [sp, #24]
   17a14:	strls	r6, [r0, #72]	; 0x48
   17a18:	strls	r5, [r0, #76]	; 0x4c
   17a1c:	str	r4, [sp, #12]
   17a20:	str	ip, [sp, #16]
   17a24:	pop	{r4, r5, r6}
   17a28:	b	16ccc <__assert_fail@plt+0x5d54>
   17a2c:	add	r2, r0, #262144	; 0x40000
   17a30:	mov	r3, #20
   17a34:	movt	r3, #4
   17a38:	push	{r4, r5, r6, r7, r8}
   17a3c:	add	r7, r0, #131072	; 0x20000
   17a40:	ldr	r5, [r2, #4]
   17a44:	ldr	r3, [r0, r3]
   17a48:	rsb	r1, r5, r1
   17a4c:	cmp	r1, r3
   17a50:	movwhi	r6, #31153	; 0x79b1
   17a54:	movwhi	r8, #65535	; 0xffff
   17a58:	movthi	r6, #40503	; 0x9e37
   17a5c:	bls	17a98 <__assert_fail@plt+0x6b20>
   17a60:	ldr	r2, [r5, r3]
   17a64:	uxth	ip, r3
   17a68:	lsl	ip, ip, #1
   17a6c:	mul	r2, r6, r2
   17a70:	lsr	r2, r2, #17
   17a74:	ldr	r4, [r0, r2, lsl #2]
   17a78:	rsb	r4, r4, r3
   17a7c:	cmp	r4, r8
   17a80:	movcs	r4, r8
   17a84:	strh	r4, [r7, ip]
   17a88:	str	r3, [r0, r2, lsl #2]
   17a8c:	add	r3, r3, #1
   17a90:	cmp	r1, r3
   17a94:	bne	17a60 <__assert_fail@plt+0x6ae8>
   17a98:	mov	r3, #20
   17a9c:	movt	r3, #4
   17aa0:	pop	{r4, r5, r6, r7, r8}
   17aa4:	str	r1, [r0, r3]
   17aa8:	bx	lr
   17aac:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17ab0:	mov	r5, #12
   17ab4:	movt	r5, #4
   17ab8:	add	r3, r0, #262144	; 0x40000
   17abc:	mov	r7, #262144	; 0x40000
   17ac0:	mov	r6, r1
   17ac4:	ldr	ip, [r0, r5]
   17ac8:	mov	r4, r0
   17acc:	ldr	r3, [r3, #4]
   17ad0:	add	r1, ip, #4
   17ad4:	ldr	r2, [r0, r7]
   17ad8:	add	r1, r3, r1
   17adc:	cmp	r2, r1
   17ae0:	bcc	17afc <__assert_fail@plt+0x6b84>
   17ae4:	sub	r1, r2, #3
   17ae8:	bl	17a2c <__assert_fail@plt+0x6ab4>
   17aec:	add	r3, r4, r7
   17af0:	ldr	ip, [r4, r5]
   17af4:	ldr	r2, [r4, r7]
   17af8:	ldr	r3, [r3, #4]
   17afc:	mov	r7, #16
   17b00:	mov	r5, #12
   17b04:	movt	r7, #4
   17b08:	movt	r5, #4
   17b0c:	mov	r0, #8
   17b10:	add	r9, r4, #262144	; 0x40000
   17b14:	movt	r0, #4
   17b18:	mov	r1, #20
   17b1c:	movt	r1, #4
   17b20:	rsb	r2, r3, r2
   17b24:	mov	r8, #262144	; 0x40000
   17b28:	str	ip, [r4, r7]
   17b2c:	str	r2, [r4, r5]
   17b30:	rsb	ip, r2, r6
   17b34:	str	r3, [r4, r0]
   17b38:	str	ip, [r9, #4]
   17b3c:	str	r6, [r4, r8]
   17b40:	str	r2, [r4, r1]
   17b44:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17b48:	add	r3, r0, #262144	; 0x40000
   17b4c:	mov	r2, #262144	; 0x40000
   17b50:	ldr	r2, [r0, r2]
   17b54:	ldr	r3, [r3, #4]
   17b58:	push	{r4, r5, r6, r7, r8, lr}
   17b5c:	rsb	r3, r3, r2
   17b60:	cmp	r3, #1073741824	; 0x40000000
   17b64:	mov	r4, r0
   17b68:	addls	r3, r3, #65536	; 0x10000
   17b6c:	mov	r5, r1
   17b70:	rsbls	ip, r3, #0
   17b74:	bls	17ba0 <__assert_fail@plt+0x6c28>
   17b78:	mov	r1, #0
   17b7c:	mov	r2, #131072	; 0x20000
   17b80:	bl	10e88 <memset@plt>
   17b84:	add	r0, r4, #131072	; 0x20000
   17b88:	mov	r1, #255	; 0xff
   17b8c:	mov	r2, #131072	; 0x20000
   17b90:	bl	10e88 <memset@plt>
   17b94:	mov	ip, #0
   17b98:	movt	ip, #65535	; 0xffff
   17b9c:	mov	r3, #65536	; 0x10000
   17ba0:	mov	r6, #20
   17ba4:	add	r8, r4, #262144	; 0x40000
   17ba8:	movt	r6, #4
   17bac:	mov	r0, #8
   17bb0:	mov	r1, #12
   17bb4:	movt	r0, #4
   17bb8:	movt	r1, #4
   17bbc:	mov	r2, #16
   17bc0:	movt	r2, #4
   17bc4:	mov	r7, #262144	; 0x40000
   17bc8:	str	r3, [r4, r6]
   17bcc:	add	ip, r5, ip
   17bd0:	str	ip, [r8, #4]
   17bd4:	str	r5, [r4, r7]
   17bd8:	str	ip, [r4, r0]
   17bdc:	str	r3, [r4, r1]
   17be0:	str	r3, [r4, r2]
   17be4:	pop	{r4, r5, r6, r7, r8, pc}
   17be8:	push	{r4, r5}
   17bec:	sub	r4, r1, #3
   17bf0:	cmp	r0, r4
   17bf4:	movcs	r3, r0
   17bf8:	bcs	17c3c <__assert_fail@plt+0x6cc4>
   17bfc:	ldr	ip, [r0]
   17c00:	mov	r3, r0
   17c04:	eors	ip, r2, ip
   17c08:	bne	17c24 <__assert_fail@plt+0x6cac>
   17c0c:	add	r3, r3, #4
   17c10:	cmp	r3, r4
   17c14:	bcs	17c3c <__assert_fail@plt+0x6cc4>
   17c18:	ldr	ip, [r3]
   17c1c:	eors	ip, r2, ip
   17c20:	beq	17c0c <__assert_fail@plt+0x6c94>
   17c24:	rbit	ip, ip
   17c28:	clz	ip, ip
   17c2c:	add	r3, r3, ip, lsr #3
   17c30:	rsb	r0, r0, r3
   17c34:	pop	{r4, r5}
   17c38:	bx	lr
   17c3c:	cmp	r1, r3
   17c40:	bls	17c80 <__assert_fail@plt+0x6d08>
   17c44:	ldrb	r4, [r3]
   17c48:	uxtb	ip, r2
   17c4c:	cmp	r4, ip
   17c50:	bne	17c80 <__assert_fail@plt+0x6d08>
   17c54:	add	ip, r3, #1
   17c58:	b	17c68 <__assert_fail@plt+0x6cf0>
   17c5c:	ldrb	r5, [r3]
   17c60:	cmp	r5, r4
   17c64:	bne	17c80 <__assert_fail@plt+0x6d08>
   17c68:	cmp	ip, r1
   17c6c:	lsr	r2, r2, #8
   17c70:	mov	r3, ip
   17c74:	add	ip, ip, #1
   17c78:	uxtb	r4, r2
   17c7c:	bne	17c5c <__assert_fail@plt+0x6ce4>
   17c80:	rsb	r0, r0, r3
   17c84:	b	17c34 <__assert_fail@plt+0x6cbc>
   17c88:	sub	ip, r2, #3
   17c8c:	cmp	r0, ip
   17c90:	push	{r4, r5}
   17c94:	bcs	17d14 <__assert_fail@plt+0x6d9c>
   17c98:	ldr	r4, [r0]
   17c9c:	ldr	r3, [r1]
   17ca0:	eors	r3, r4, r3
   17ca4:	bne	17d00 <__assert_fail@plt+0x6d88>
   17ca8:	add	r3, r0, #4
   17cac:	add	r4, r1, #4
   17cb0:	cmp	ip, r3
   17cb4:	bls	17d58 <__assert_fail@plt+0x6de0>
   17cb8:	ldr	r1, [r1, #4]
   17cbc:	ldr	r5, [r0, #4]
   17cc0:	eors	r1, r5, r1
   17cc4:	bne	17ce8 <__assert_fail@plt+0x6d70>
   17cc8:	add	r3, r3, #4
   17ccc:	add	r4, r4, #4
   17cd0:	cmp	ip, r3
   17cd4:	bls	17d58 <__assert_fail@plt+0x6de0>
   17cd8:	ldr	r5, [r3]
   17cdc:	ldr	r1, [r4]
   17ce0:	eors	r1, r5, r1
   17ce4:	beq	17cc8 <__assert_fail@plt+0x6d50>
   17ce8:	rbit	r1, r1
   17cec:	clz	r1, r1
   17cf0:	add	r3, r3, r1, lsr #3
   17cf4:	rsb	r0, r0, r3
   17cf8:	pop	{r4, r5}
   17cfc:	bx	lr
   17d00:	rbit	r3, r3
   17d04:	clz	r0, r3
   17d08:	pop	{r4, r5}
   17d0c:	asr	r0, r0, #3
   17d10:	bx	lr
   17d14:	mov	r3, r0
   17d18:	sub	ip, r2, #1
   17d1c:	cmp	r3, ip
   17d20:	bcs	17d38 <__assert_fail@plt+0x6dc0>
   17d24:	ldrh	r4, [r1]
   17d28:	ldrh	ip, [r3]
   17d2c:	cmp	r4, ip
   17d30:	addeq	r3, r3, #2
   17d34:	addeq	r1, r1, #2
   17d38:	cmp	r3, r2
   17d3c:	bcs	17d50 <__assert_fail@plt+0x6dd8>
   17d40:	ldrb	r2, [r3]
   17d44:	ldrb	r1, [r1]
   17d48:	cmp	r1, r2
   17d4c:	addeq	r3, r3, #1
   17d50:	rsb	r0, r0, r3
   17d54:	b	17cf8 <__assert_fail@plt+0x6d80>
   17d58:	mov	r1, r4
   17d5c:	b	17d18 <__assert_fail@plt+0x6da0>
   17d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d64:	sub	sp, sp, #132	; 0x84
   17d68:	movw	r4, #28936	; 0x7108
   17d6c:	movt	r4, #3
   17d70:	str	r0, [sp, #20]
   17d74:	add	r0, r0, #262144	; 0x40000
   17d78:	str	r4, [sp, #48]	; 0x30
   17d7c:	mov	ip, #16
   17d80:	ldr	r4, [sp, #20]
   17d84:	movt	ip, #4
   17d88:	ldr	r0, [r0, #4]
   17d8c:	mov	r9, #0
   17d90:	str	r1, [sp, #4]
   17d94:	ldr	ip, [r4, ip]
   17d98:	ldr	r4, [sp, #48]	; 0x30
   17d9c:	str	r0, [sp, #32]
   17da0:	mov	r0, #12
   17da4:	ldr	lr, [sp, #32]
   17da8:	movt	r0, #4
   17dac:	ldr	r1, [r4]
   17db0:	ldr	r4, [sp, #4]
   17db4:	str	r3, [sp, #60]	; 0x3c
   17db8:	rsb	r4, lr, r4
   17dbc:	add	lr, ip, #65536	; 0x10000
   17dc0:	cmp	r4, lr
   17dc4:	str	r4, [sp, #8]
   17dc8:	ldr	r4, [sp, #20]
   17dcc:	ldr	r3, [sp, #32]
   17dd0:	ldrcs	ip, [sp, #8]
   17dd4:	ldr	r0, [r4, r0]
   17dd8:	str	r2, [sp, #36]	; 0x24
   17ddc:	str	r1, [sp, #124]	; 0x7c
   17de0:	str	r0, [sp, #16]
   17de4:	mov	r0, #28
   17de8:	ldr	r4, [sp, #16]
   17dec:	movt	r0, #4
   17df0:	ldr	r8, [sp, #168]	; 0xa8
   17df4:	add	r3, r3, r4
   17df8:	ldr	r4, [sp, #20]
   17dfc:	str	r3, [sp, #68]	; 0x44
   17e00:	ldr	r3, [sp, #172]	; 0xac
   17e04:	add	r5, r4, #131072	; 0x20000
   17e08:	ldr	r0, [r4, r0]
   17e0c:	ldr	r4, [sp, #176]	; 0xb0
   17e10:	str	r3, [sp, #100]	; 0x64
   17e14:	subcs	r3, ip, #65280	; 0xff00
   17e18:	subcs	r3, r3, #255	; 0xff
   17e1c:	str	r0, [sp, #80]	; 0x50
   17e20:	strcs	r3, [sp, #12]
   17e24:	mov	r3, #8
   17e28:	str	r4, [sp, #104]	; 0x68
   17e2c:	movt	r3, #4
   17e30:	ldr	r7, [sp, #180]	; 0xb4
   17e34:	strcc	ip, [sp, #12]
   17e38:	ldr	r0, [sp, #20]
   17e3c:	ldr	r1, [sp, #4]
   17e40:	ldr	r3, [r0, r3]
   17e44:	ldr	fp, [r1]
   17e48:	str	r3, [sp, #52]	; 0x34
   17e4c:	ldr	r3, [sp, #36]	; 0x24
   17e50:	rsb	r3, r3, r1
   17e54:	str	r3, [sp, #44]	; 0x2c
   17e58:	bl	17a2c <__assert_fail@plt+0x6ab4>
   17e5c:	ldr	r4, [sp, #4]
   17e60:	ldr	ip, [sp, #68]	; 0x44
   17e64:	uxtb	r1, fp
   17e68:	movw	r2, #31153	; 0x79b1
   17e6c:	movt	r2, #40503	; 0x9e37
   17e70:	ldr	r0, [r4]
   17e74:	cmp	r1, fp, lsr #24
   17e78:	add	r3, ip, #65280	; 0xff00
   17e7c:	uxth	ip, fp
   17e80:	sub	r1, r4, #65280	; 0xff00
   17e84:	mov	r4, #0
   17e88:	mul	r2, r2, r0
   17e8c:	str	r4, [sp, #64]	; 0x40
   17e90:	movne	r0, #0
   17e94:	moveq	r0, #1
   17e98:	ldr	r4, [sp, #4]
   17e9c:	cmp	ip, fp, lsr #16
   17ea0:	add	r3, r3, #255	; 0xff
   17ea4:	ldr	ip, [sp, #68]	; 0x44
   17ea8:	movne	r0, #0
   17eac:	andeq	r0, r0, #1
   17eb0:	cmp	r4, r3
   17eb4:	subhi	ip, r1, #255	; 0xff
   17eb8:	lsr	r2, r2, #17
   17ebc:	str	ip, [sp, #92]	; 0x5c
   17ec0:	add	ip, ip, #4
   17ec4:	str	ip, [sp, #116]	; 0x74
   17ec8:	mov	r4, #0
   17ecc:	ldr	ip, [sp, #20]
   17ed0:	ldr	r3, [sp, #44]	; 0x2c
   17ed4:	str	r4, [sp, #40]	; 0x28
   17ed8:	ldr	r4, [ip, r2, lsl #2]
   17edc:	ldr	ip, [sp, #4]
   17ee0:	mvn	r3, r3
   17ee4:	str	r3, [sp, #56]	; 0x38
   17ee8:	mov	r3, #16
   17eec:	add	ip, ip, #4
   17ef0:	movt	r3, #4
   17ef4:	str	ip, [sp, #84]	; 0x54
   17ef8:	str	r3, [sp, #72]	; 0x48
   17efc:	ldr	ip, [sp, #4]
   17f00:	ldr	r3, [sp, #36]	; 0x24
   17f04:	str	r0, [sp, #96]	; 0x60
   17f08:	rsb	r3, ip, r3
   17f0c:	str	r2, [sp, #88]	; 0x58
   17f10:	str	r3, [sp, #108]	; 0x6c
   17f14:	adds	r3, r7, #0
   17f18:	ldr	ip, [sp, #12]
   17f1c:	movne	r3, #1
   17f20:	cmp	r4, ip
   17f24:	movcc	r6, #0
   17f28:	andcs	r6, r3, #1
   17f2c:	cmp	r6, #0
   17f30:	beq	181ac <__assert_fail@plt+0x7234>
   17f34:	ldr	r3, [sp, #196]	; 0xc4
   17f38:	sub	r7, r7, #1
   17f3c:	cmp	r3, #0
   17f40:	beq	17f54 <__assert_fail@plt+0x6fdc>
   17f44:	ldr	ip, [sp, #8]
   17f48:	rsb	r3, r4, ip
   17f4c:	cmp	r3, #7
   17f50:	bls	17f88 <__assert_fail@plt+0x7010>
   17f54:	ldr	ip, [sp, #16]
   17f58:	cmp	r4, ip
   17f5c:	bcc	180a8 <__assert_fail@plt+0x7130>
   17f60:	ldr	ip, [sp, #32]
   17f64:	add	sl, ip, r4
   17f68:	ldr	ip, [sp, #36]	; 0x24
   17f6c:	add	r3, sl, r8
   17f70:	add	r2, ip, r8
   17f74:	ldr	ip, [sp, #56]	; 0x38
   17f78:	ldrh	r2, [r2, #-1]
   17f7c:	ldrh	r3, [r3, ip]
   17f80:	cmp	r2, r3
   17f84:	beq	1839c <__assert_fail@plt+0x7424>
   17f88:	rsbs	r6, r8, #1
   17f8c:	movcc	r6, #0
   17f90:	ldr	r3, [sp, #188]	; 0xbc
   17f94:	cmp	r3, #0
   17f98:	moveq	r6, #0
   17f9c:	andne	r6, r6, #1
   17fa0:	cmp	r6, #0
   17fa4:	beq	18010 <__assert_fail@plt+0x7098>
   17fa8:	ldr	ip, [sp, #8]
   17fac:	add	r3, r8, r4
   17fb0:	cmp	ip, r3
   17fb4:	bcc	18010 <__assert_fail@plt+0x7098>
   17fb8:	cmp	r8, #3
   17fbc:	uxth	r0, r4
   17fc0:	subgt	ip, r8, #3
   17fc4:	movgt	r3, #0
   17fc8:	movgt	r1, #1
   17fcc:	ble	18014 <__assert_fail@plt+0x709c>
   17fd0:	add	r2, r0, r3
   17fd4:	uxth	r2, r2
   17fd8:	lsl	r2, r2, #1
   17fdc:	ldrh	r2, [r5, r2]
   17fe0:	cmp	r2, r1
   17fe4:	movhi	r9, r3
   17fe8:	add	r3, r3, #1
   17fec:	movhi	r1, r2
   17ff0:	cmp	r3, ip
   17ff4:	bne	17fd0 <__assert_fail@plt+0x7058>
   17ff8:	cmp	r1, #1
   17ffc:	beq	18014 <__assert_fail@plt+0x709c>
   18000:	cmp	r4, r1
   18004:	bcc	181a4 <__assert_fail@plt+0x722c>
   18008:	rsb	r4, r1, r4
   1800c:	b	17f14 <__assert_fail@plt+0x6f9c>
   18010:	uxth	r0, r4
   18014:	lsl	r0, r0, #1
   18018:	ldr	ip, [sp, #184]	; 0xb8
   1801c:	ldrh	r2, [r5, r0]
   18020:	adds	r3, ip, #0
   18024:	movne	r3, #1
   18028:	cmp	r2, #1
   1802c:	movne	r3, #0
   18030:	cmp	r3, #0
   18034:	beq	18090 <__assert_fail@plt+0x7118>
   18038:	cmp	r9, #0
   1803c:	bne	18090 <__assert_fail@plt+0x7118>
   18040:	ldr	r3, [sp, #40]	; 0x28
   18044:	cmp	r3, #0
   18048:	beq	18414 <__assert_fail@plt+0x749c>
   1804c:	subs	r2, r3, #2
   18050:	rsbs	r3, r2, #0
   18054:	adcs	r3, r3, r2
   18058:	ldr	ip, [sp, #16]
   1805c:	sub	r6, r4, #1
   18060:	cmp	r6, ip
   18064:	movcc	r3, #0
   18068:	andcs	r3, r3, #1
   1806c:	cmp	r3, #0
   18070:	beq	18090 <__assert_fail@plt+0x7118>
   18074:	ldr	ip, [sp, #32]
   18078:	add	sl, ip, r6
   1807c:	ldr	r3, [sl]
   18080:	cmp	fp, r3
   18084:	movne	ip, #2
   18088:	strne	ip, [sp, #40]	; 0x28
   1808c:	beq	18514 <__assert_fail@plt+0x759c>
   18090:	add	r3, r9, r4
   18094:	uxth	r3, r3
   18098:	lsl	r3, r3, #1
   1809c:	ldrh	r3, [r5, r3]
   180a0:	rsb	r4, r3, r4
   180a4:	b	17f14 <__assert_fail@plt+0x6f9c>
   180a8:	ldr	ip, [sp, #52]	; 0x34
   180ac:	add	r3, ip, r4
   180b0:	ldr	r2, [r3]
   180b4:	cmp	fp, r2
   180b8:	bne	17f88 <__assert_fail@plt+0x7010>
   180bc:	ldr	lr, [sp, #16]
   180c0:	ldr	r1, [sp, #4]
   180c4:	rsb	ip, r4, lr
   180c8:	ldr	sl, [sp, #60]	; 0x3c
   180cc:	add	ip, r1, ip
   180d0:	ldr	lr, [sp, #20]
   180d4:	cmp	ip, sl
   180d8:	movcc	sl, ip
   180dc:	ldr	ip, [sp, #72]	; 0x48
   180e0:	add	r1, r3, #4
   180e4:	ldr	r0, [sp, #84]	; 0x54
   180e8:	mov	r2, sl
   180ec:	ldr	ip, [lr, ip]
   180f0:	str	r3, [sp]
   180f4:	str	ip, [sp, #112]	; 0x70
   180f8:	bl	17c88 <__assert_fail@plt+0x6d10>
   180fc:	ldr	ip, [sp, #4]
   18100:	ldr	r3, [sp]
   18104:	add	r0, r0, #4
   18108:	str	r0, [sp, #76]	; 0x4c
   1810c:	add	r0, ip, r0
   18110:	cmp	r0, sl
   18114:	beq	184e8 <__assert_fail@plt+0x7570>
   18118:	ldr	ip, [sp, #44]	; 0x2c
   1811c:	cmp	ip, #0
   18120:	beq	18450 <__assert_fail@plt+0x74d8>
   18124:	ldr	ip, [sp, #52]	; 0x34
   18128:	ldr	r0, [sp, #112]	; 0x70
   1812c:	add	sl, ip, r0
   18130:	ldr	ip, [sp, #108]	; 0x6c
   18134:	rsb	sl, r3, sl
   18138:	cmp	sl, ip
   1813c:	movlt	sl, ip
   18140:	cmp	sl, #0
   18144:	bge	18668 <__assert_fail@plt+0x76f0>
   18148:	ldr	ip, [sp, #4]
   1814c:	ldrb	r2, [r3, #-1]
   18150:	ldrb	r1, [ip, #-1]
   18154:	cmp	r1, r2
   18158:	bne	18668 <__assert_fail@plt+0x76f0>
   1815c:	sub	r0, r3, #1
   18160:	sub	r1, ip, #1
   18164:	mov	r3, #0
   18168:	b	1817c <__assert_fail@plt+0x7204>
   1816c:	ldrb	ip, [r1, #-1]!
   18170:	ldrb	r2, [r0, #-1]!
   18174:	cmp	ip, r2
   18178:	bne	18454 <__assert_fail@plt+0x74dc>
   1817c:	sub	r3, r3, #1
   18180:	cmp	r3, sl
   18184:	bne	1816c <__assert_fail@plt+0x71f4>
   18188:	ldr	ip, [sp, #76]	; 0x4c
   1818c:	rsb	r2, r3, ip
   18190:	cmp	r8, r2
   18194:	blt	18464 <__assert_fail@plt+0x74ec>
   18198:	movne	r6, #0
   1819c:	moveq	r6, #1
   181a0:	b	17f90 <__assert_fail@plt+0x7018>
   181a4:	adds	r3, r7, #0
   181a8:	movne	r3, #1
   181ac:	ldr	r4, [sp, #192]	; 0xc0
   181b0:	cmp	r4, #1
   181b4:	movne	r3, #0
   181b8:	andeq	r3, r3, #1
   181bc:	cmp	r3, #0
   181c0:	beq	1837c <__assert_fail@plt+0x7404>
   181c4:	ldr	r3, [sp, #12]
   181c8:	ldr	ip, [sp, #8]
   181cc:	rsb	r2, r3, ip
   181d0:	movw	r3, #65534	; 0xfffe
   181d4:	cmp	r2, r3
   181d8:	bhi	1837c <__assert_fail@plt+0x7404>
   181dc:	ldr	r4, [sp, #80]	; 0x50
   181e0:	mov	r3, #262144	; 0x40000
   181e4:	ldr	ip, [sp, #88]	; 0x58
   181e8:	add	r2, r4, #262144	; 0x40000
   181ec:	ldr	r3, [r4, r3]
   181f0:	ldr	sl, [r2, #4]
   181f4:	ldr	r4, [r4, ip, lsl #2]
   181f8:	rsb	r3, sl, r3
   181fc:	str	r3, [sp, #16]
   18200:	rsb	r5, r3, r4
   18204:	ldr	r3, [sp, #12]
   18208:	ldr	ip, [sp, #8]
   1820c:	add	r5, r5, r3
   18210:	rsb	r3, r5, ip
   18214:	cmp	r3, #65536	; 0x10000
   18218:	bcs	1837c <__assert_fail@plt+0x7404>
   1821c:	ldr	ip, [sp, #4]
   18220:	sub	r7, r7, #1
   18224:	ldr	r3, [sp, #36]	; 0x24
   18228:	mov	r6, #0
   1822c:	str	r8, [sp, #12]
   18230:	rsb	r3, ip, r3
   18234:	ldr	r8, [sp, #80]	; 0x50
   18238:	str	r3, [sp, #28]
   1823c:	add	ip, ip, #4
   18240:	mov	r3, #12
   18244:	str	ip, [sp, #20]
   18248:	movt	r3, #4
   1824c:	str	r3, [sp, #24]
   18250:	b	18290 <__assert_fail@plt+0x7318>
   18254:	uxth	r3, r4
   18258:	ldr	ip, [sp, #8]
   1825c:	add	r3, r3, #65536	; 0x10000
   18260:	lsl	r3, r3, #1
   18264:	ldrh	r3, [r8, r3]
   18268:	rsb	r5, r3, r5
   1826c:	rsb	r4, r3, r4
   18270:	rsb	r3, r5, ip
   18274:	cmp	r3, #65536	; 0x10000
   18278:	bcs	18378 <__assert_fail@plt+0x7400>
   1827c:	cmp	r6, r7
   18280:	beq	18378 <__assert_fail@plt+0x7400>
   18284:	add	r3, r8, #262144	; 0x40000
   18288:	add	r6, r6, #1
   1828c:	ldr	sl, [r3, #4]
   18290:	add	r9, sl, r4
   18294:	ldr	r3, [r9]
   18298:	cmp	fp, r3
   1829c:	bne	18254 <__assert_fail@plt+0x72dc>
   182a0:	ldr	r3, [sp, #16]
   182a4:	add	r1, r9, #4
   182a8:	ldr	ip, [sp, #4]
   182ac:	rsb	r2, r4, r3
   182b0:	ldr	r3, [sp, #60]	; 0x3c
   182b4:	add	r2, ip, r2
   182b8:	ldr	r0, [sp, #20]
   182bc:	cmp	r2, r3
   182c0:	movcs	r2, r3
   182c4:	bl	17c88 <__assert_fail@plt+0x6d10>
   182c8:	ldr	ip, [sp, #44]	; 0x2c
   182cc:	cmp	ip, #0
   182d0:	add	r0, r0, #4
   182d4:	beq	18490 <__assert_fail@plt+0x7518>
   182d8:	ldr	ip, [sp, #24]
   182dc:	ldr	r3, [r8, ip]
   182e0:	add	sl, sl, r3
   182e4:	ldr	r3, [sp, #28]
   182e8:	rsb	sl, r9, sl
   182ec:	cmp	sl, r3
   182f0:	movlt	sl, r3
   182f4:	cmp	sl, #0
   182f8:	bge	18654 <__assert_fail@plt+0x76dc>
   182fc:	ldr	ip, [sp, #4]
   18300:	ldrb	r3, [r9, #-1]
   18304:	ldrb	r2, [ip, #-1]
   18308:	cmp	r2, r3
   1830c:	bne	18654 <__assert_fail@plt+0x76dc>
   18310:	sub	r1, r9, #1
   18314:	sub	r2, ip, #1
   18318:	mov	r3, #0
   1831c:	b	18330 <__assert_fail@plt+0x73b8>
   18320:	ldrb	r9, [r2, #-1]!
   18324:	ldrb	ip, [r1, #-1]!
   18328:	cmp	r9, ip
   1832c:	bne	1833c <__assert_fail@plt+0x73c4>
   18330:	sub	r3, r3, #1
   18334:	cmp	r3, sl
   18338:	bne	18320 <__assert_fail@plt+0x73a8>
   1833c:	ldr	ip, [sp, #12]
   18340:	rsb	r0, r3, r0
   18344:	cmp	r0, ip
   18348:	ble	18254 <__assert_fail@plt+0x72dc>
   1834c:	ldr	ip, [sp, #32]
   18350:	add	r2, r3, r5
   18354:	str	r0, [sp, #12]
   18358:	add	r2, ip, r2
   1835c:	ldr	ip, [sp, #4]
   18360:	add	r3, ip, r3
   18364:	ldr	ip, [sp, #100]	; 0x64
   18368:	str	r2, [ip]
   1836c:	ldr	ip, [sp, #104]	; 0x68
   18370:	str	r3, [ip]
   18374:	b	18254 <__assert_fail@plt+0x72dc>
   18378:	ldr	r8, [sp, #12]
   1837c:	ldr	r4, [sp, #48]	; 0x30
   18380:	mov	r0, r8
   18384:	ldr	r2, [sp, #124]	; 0x7c
   18388:	ldr	r3, [r4]
   1838c:	cmp	r2, r3
   18390:	bne	18678 <__assert_fail@plt+0x7700>
   18394:	add	sp, sp, #132	; 0x84
   18398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1839c:	ldr	r3, [sl]
   183a0:	cmp	fp, r3
   183a4:	bne	17f88 <__assert_fail@plt+0x7010>
   183a8:	ldr	r3, [sp, #44]	; 0x2c
   183ac:	cmp	r3, #0
   183b0:	beq	18498 <__assert_fail@plt+0x7520>
   183b4:	ldr	ip, [sp, #68]	; 0x44
   183b8:	ldr	r3, [sp, #108]	; 0x6c
   183bc:	rsb	lr, sl, ip
   183c0:	cmp	lr, r3
   183c4:	movlt	lr, r3
   183c8:	cmp	lr, #0
   183cc:	bge	18498 <__assert_fail@plt+0x7520>
   183d0:	ldr	ip, [sp, #4]
   183d4:	ldrb	r3, [sl, #-1]
   183d8:	ldrb	r2, [ip, #-1]
   183dc:	cmp	r2, r3
   183e0:	bne	18498 <__assert_fail@plt+0x7520>
   183e4:	sub	r1, ip, #1
   183e8:	sub	r2, sl, #1
   183ec:	mov	r3, #0
   183f0:	b	18404 <__assert_fail@plt+0x748c>
   183f4:	ldrb	ip, [r1, #-1]!
   183f8:	ldrb	r0, [r2, #-1]!
   183fc:	cmp	ip, r0
   18400:	bne	1849c <__assert_fail@plt+0x7524>
   18404:	sub	r3, r3, #1
   18408:	cmp	r3, lr
   1840c:	bne	183f4 <__assert_fail@plt+0x747c>
   18410:	b	1849c <__assert_fail@plt+0x7524>
   18414:	ldr	ip, [sp, #96]	; 0x60
   18418:	cmp	ip, #0
   1841c:	moveq	r3, #1
   18420:	streq	r3, [sp, #40]	; 0x28
   18424:	beq	18090 <__assert_fail@plt+0x7118>
   18428:	ldr	r0, [sp, #84]	; 0x54
   1842c:	mov	r2, fp
   18430:	ldr	r1, [sp, #60]	; 0x3c
   18434:	mov	r3, #2
   18438:	str	r3, [sp, #40]	; 0x28
   1843c:	bl	17be8 <__assert_fail@plt+0x6c70>
   18440:	ldr	r3, [sp, #96]	; 0x60
   18444:	add	r0, r0, #4
   18448:	str	r0, [sp, #64]	; 0x40
   1844c:	b	18058 <__assert_fail@plt+0x70e0>
   18450:	ldr	r3, [sp, #44]	; 0x2c
   18454:	ldr	ip, [sp, #76]	; 0x4c
   18458:	rsb	r2, r3, ip
   1845c:	cmp	r8, r2
   18460:	bge	18198 <__assert_fail@plt+0x7220>
   18464:	ldr	ip, [sp, #32]
   18468:	mov	r8, r2
   1846c:	add	r2, r3, r4
   18470:	add	r2, ip, r2
   18474:	ldr	ip, [sp, #4]
   18478:	add	r3, ip, r3
   1847c:	ldr	ip, [sp, #100]	; 0x64
   18480:	str	r2, [ip]
   18484:	ldr	ip, [sp, #104]	; 0x68
   18488:	str	r3, [ip]
   1848c:	b	17f90 <__assert_fail@plt+0x7018>
   18490:	ldr	r3, [sp, #44]	; 0x2c
   18494:	b	1833c <__assert_fail@plt+0x73c4>
   18498:	mov	r3, #0
   1849c:	ldr	r2, [sp, #60]	; 0x3c
   184a0:	add	r1, sl, #4
   184a4:	ldr	r0, [sp, #84]	; 0x54
   184a8:	str	r3, [sp]
   184ac:	bl	17c88 <__assert_fail@plt+0x6d10>
   184b0:	ldr	r3, [sp]
   184b4:	add	r0, r0, #4
   184b8:	rsb	r2, r3, r0
   184bc:	cmp	r8, r2
   184c0:	bge	18198 <__assert_fail@plt+0x7220>
   184c4:	ldr	ip, [sp, #4]
   184c8:	add	sl, sl, r3
   184cc:	mov	r8, r2
   184d0:	add	r3, ip, r3
   184d4:	ldr	ip, [sp, #100]	; 0x64
   184d8:	str	sl, [ip]
   184dc:	ldr	ip, [sp, #104]	; 0x68
   184e0:	str	r3, [ip]
   184e4:	b	17f90 <__assert_fail@plt+0x7018>
   184e8:	ldr	ip, [sp, #60]	; 0x3c
   184ec:	cmp	ip, r0
   184f0:	bls	18118 <__assert_fail@plt+0x71a0>
   184f4:	mov	r2, ip
   184f8:	ldr	r1, [sp, #68]	; 0x44
   184fc:	bl	17c88 <__assert_fail@plt+0x6d10>
   18500:	ldr	ip, [sp, #76]	; 0x4c
   18504:	ldr	r3, [sp]
   18508:	add	ip, r0, ip
   1850c:	str	ip, [sp, #76]	; 0x4c
   18510:	b	18118 <__assert_fail@plt+0x71a0>
   18514:	add	r0, sl, #4
   18518:	ldr	r1, [sp, #60]	; 0x3c
   1851c:	mov	r2, fp
   18520:	bl	17be8 <__assert_fail@plt+0x6c70>
   18524:	ldr	r3, [sp, #116]	; 0x74
   18528:	str	fp, [sp, #120]	; 0x78
   1852c:	cmp	sl, r3
   18530:	add	r0, r0, #4
   18534:	bcc	18670 <__assert_fail@plt+0x76f8>
   18538:	ldr	r3, [sl, #-4]
   1853c:	cmp	fp, r3
   18540:	mov	r3, sl
   18544:	bne	18564 <__assert_fail@plt+0x75ec>
   18548:	ldr	r1, [sp, #116]	; 0x74
   1854c:	sub	r3, r3, #4
   18550:	cmp	r3, r1
   18554:	bcc	18564 <__assert_fail@plt+0x75ec>
   18558:	ldr	r2, [r3, #-4]
   1855c:	cmp	fp, r2
   18560:	beq	1854c <__assert_fail@plt+0x75d4>
   18564:	ldr	r4, [sp, #92]	; 0x5c
   18568:	cmp	r4, r3
   1856c:	bcs	185a0 <__assert_fail@plt+0x7628>
   18570:	ldrb	r1, [r3, #-1]
   18574:	ldrb	r2, [sp, #123]	; 0x7b
   18578:	cmp	r1, r2
   1857c:	bne	185a0 <__assert_fail@plt+0x7628>
   18580:	add	r2, sp, #123	; 0x7b
   18584:	sub	r3, r3, #1
   18588:	cmp	r3, r4
   1858c:	beq	185a0 <__assert_fail@plt+0x7628>
   18590:	ldrb	r1, [r2, #-1]!
   18594:	ldrb	ip, [r3, #-1]
   18598:	cmp	ip, r1
   1859c:	beq	18584 <__assert_fail@plt+0x760c>
   185a0:	ldr	ip, [sp, #64]	; 0x40
   185a4:	rsb	r3, r3, sl
   185a8:	add	r2, r3, r0
   185ac:	cmp	r2, ip
   185b0:	movcc	r1, #0
   185b4:	movcs	r1, #1
   185b8:	cmp	r0, ip
   185bc:	movhi	r1, #0
   185c0:	cmp	r1, #0
   185c4:	beq	185dc <__assert_fail@plt+0x7664>
   185c8:	rsb	r4, ip, r6
   185cc:	mov	r3, #2
   185d0:	add	r4, r4, r0
   185d4:	str	r3, [sp, #40]	; 0x28
   185d8:	b	17f14 <__assert_fail@plt+0x6f9c>
   185dc:	ldr	r4, [sp, #44]	; 0x2c
   185e0:	cmp	r4, #0
   185e4:	rsb	r4, r3, r6
   185e8:	bne	1865c <__assert_fail@plt+0x76e4>
   185ec:	ldr	ip, [sp, #64]	; 0x40
   185f0:	cmp	r2, ip
   185f4:	movcs	r2, ip
   185f8:	cmp	r2, r8
   185fc:	bls	18630 <__assert_fail@plt+0x76b8>
   18600:	ldr	ip, [sp, #32]
   18604:	add	r3, ip, r4
   18608:	ldr	ip, [sp, #4]
   1860c:	rsb	r1, r3, ip
   18610:	cmp	r1, #65536	; 0x10000
   18614:	bge	181a4 <__assert_fail@plt+0x722c>
   18618:	ldr	ip, [sp, #100]	; 0x64
   1861c:	mov	r8, r2
   18620:	str	r3, [ip]
   18624:	ldr	ip, [sp, #4]
   18628:	ldr	r3, [sp, #104]	; 0x68
   1862c:	str	ip, [r3]
   18630:	uxth	r3, r4
   18634:	lsl	r3, r3, #1
   18638:	ldrh	r3, [r5, r3]
   1863c:	cmp	r4, r3
   18640:	bcc	181a4 <__assert_fail@plt+0x722c>
   18644:	mov	ip, #2
   18648:	rsb	r4, r3, r4
   1864c:	str	ip, [sp, #40]	; 0x28
   18650:	b	17f14 <__assert_fail@plt+0x6f9c>
   18654:	mov	r3, #0
   18658:	b	1833c <__assert_fail@plt+0x73c4>
   1865c:	mov	r3, #2
   18660:	str	r3, [sp, #40]	; 0x28
   18664:	b	17f14 <__assert_fail@plt+0x6f9c>
   18668:	mov	r3, #0
   1866c:	b	18454 <__assert_fail@plt+0x74dc>
   18670:	mov	r3, sl
   18674:	b	18564 <__assert_fail@plt+0x75ec>
   18678:	bl	10db0 <__stack_chk_fail@plt>
   1867c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18680:	sub	sp, sp, #52	; 0x34
   18684:	add	ip, sp, #48	; 0x30
   18688:	movw	r4, #28936	; 0x7108
   1868c:	movt	r4, #3
   18690:	ldr	r6, [sp, #88]	; 0x58
   18694:	mov	r7, #0
   18698:	ldr	fp, [sp, #92]	; 0x5c
   1869c:	str	r7, [ip, #-8]!
   186a0:	mov	r5, r0
   186a4:	ldr	r8, [sp, #100]	; 0x64
   186a8:	mov	lr, #1
   186ac:	str	ip, [sp, #4]
   186b0:	mov	r0, r1
   186b4:	ldr	ip, [sp, #96]	; 0x60
   186b8:	add	sl, sp, #36	; 0x24
   186bc:	ldr	r9, [r4]
   186c0:	mov	r1, r2
   186c4:	str	r6, [sp]
   186c8:	str	fp, [sp, #12]
   186cc:	str	ip, [sp, #24]
   186d0:	str	r8, [sp, #28]
   186d4:	str	sl, [sp, #8]
   186d8:	str	lr, [sp, #16]
   186dc:	str	lr, [sp, #20]
   186e0:	str	r2, [sp, #36]	; 0x24
   186e4:	str	r9, [sp, #44]	; 0x2c
   186e8:	bl	17d60 <__assert_fail@plt+0x6de8>
   186ec:	cmp	r6, r0
   186f0:	strge	r7, [r5]
   186f4:	strge	r7, [r5, #4]
   186f8:	bge	18718 <__assert_fail@plt+0x77a0>
   186fc:	cmp	r8, #0
   18700:	bne	18734 <__assert_fail@plt+0x77bc>
   18704:	ldr	r2, [sp, #36]	; 0x24
   18708:	ldr	r3, [sp, #40]	; 0x28
   1870c:	str	r0, [r5, #4]
   18710:	rsb	r3, r3, r2
   18714:	str	r3, [r5]
   18718:	ldr	r2, [sp, #44]	; 0x2c
   1871c:	mov	r0, r5
   18720:	ldr	r3, [r4]
   18724:	cmp	r2, r3
   18728:	bne	18744 <__assert_fail@plt+0x77cc>
   1872c:	add	sp, sp, #52	; 0x34
   18730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18734:	sub	r3, r0, #19
   18738:	cmp	r3, #17
   1873c:	movls	r0, #18
   18740:	b	18704 <__assert_fail@plt+0x778c>
   18744:	bl	10db0 <__stack_chk_fail@plt>
   18748:	push	{r4, r5, r6, r7, r8, r9, sl}
   1874c:	ldr	r8, [sp, #32]
   18750:	ldr	r7, [r1]
   18754:	cmp	r8, #0
   18758:	add	ip, r7, #1
   1875c:	str	ip, [r1]
   18760:	ldr	r4, [r0]
   18764:	ldr	r9, [r2]
   18768:	rsb	r9, r9, r4
   1876c:	beq	18788 <__assert_fail@plt+0x7810>
   18770:	add	r4, r9, #8
   18774:	add	r4, r4, r9, lsr #8
   18778:	add	ip, ip, r4
   1877c:	ldr	r4, [sp, #36]	; 0x24
   18780:	cmp	r4, ip
   18784:	bcc	18908 <__assert_fail@plt+0x7990>
   18788:	cmp	r9, #14
   1878c:	lslls	ip, r9, #4
   18790:	strbls	ip, [r7]
   18794:	bls	187dc <__assert_fail@plt+0x7864>
   18798:	sub	ip, r9, #15
   1879c:	mvn	r4, #15
   187a0:	cmp	ip, #254	; 0xfe
   187a4:	strb	r4, [r7]
   187a8:	bls	187cc <__assert_fail@plt+0x7854>
   187ac:	mvn	r6, #0
   187b0:	ldr	r4, [r1]
   187b4:	sub	ip, ip, #255	; 0xff
   187b8:	cmp	ip, #254	; 0xfe
   187bc:	add	r5, r4, #1
   187c0:	str	r5, [r1]
   187c4:	strb	r6, [r4]
   187c8:	bhi	187b0 <__assert_fail@plt+0x7838>
   187cc:	ldr	r4, [r1]
   187d0:	add	r5, r4, #1
   187d4:	str	r5, [r1]
   187d8:	strb	ip, [r4]
   187dc:	ldr	ip, [r1]
   187e0:	ldr	r4, [r2]
   187e4:	add	sl, ip, r9
   187e8:	ldr	r6, [r4]
   187ec:	add	ip, ip, #8
   187f0:	ldr	r5, [r4, #4]
   187f4:	add	r4, r4, #8
   187f8:	str	r6, [ip, #-8]
   187fc:	str	r5, [ip, #-4]
   18800:	cmp	sl, ip
   18804:	bhi	187e8 <__assert_fail@plt+0x7870>
   18808:	ldr	r4, [r1]
   1880c:	cmp	r8, #0
   18810:	ldr	r8, [sp, #28]
   18814:	sub	ip, r3, #4
   18818:	add	r5, r4, r9
   1881c:	str	r5, [r1]
   18820:	ldr	r6, [r0]
   18824:	add	r5, r5, #2
   18828:	rsb	r6, r8, r6
   1882c:	strh	r6, [r4, r9]
   18830:	str	r5, [r1]
   18834:	beq	1884c <__assert_fail@plt+0x78d4>
   18838:	add	r5, r5, ip, lsr #8
   1883c:	ldr	r4, [sp, #36]	; 0x24
   18840:	add	r5, r5, #6
   18844:	cmp	r4, r5
   18848:	bcc	18908 <__assert_fail@plt+0x7990>
   1884c:	cmp	ip, #14
   18850:	bls	188dc <__assert_fail@plt+0x7964>
   18854:	sub	ip, ip, #15
   18858:	ldrb	r5, [r7]
   1885c:	movw	r4, #509	; 0x1fd
   18860:	cmp	ip, r4
   18864:	add	r5, r5, #15
   18868:	strb	r5, [r7]
   1886c:	bls	188a8 <__assert_fail@plt+0x7930>
   18870:	mov	r7, r4
   18874:	mvn	r5, #0
   18878:	ldr	r4, [r1]
   1887c:	sub	ip, ip, #508	; 0x1fc
   18880:	sub	ip, ip, #2
   18884:	add	r6, r4, #1
   18888:	str	r6, [r1]
   1888c:	strb	r5, [r4]
   18890:	cmp	ip, r7
   18894:	ldr	r4, [r1]
   18898:	add	r6, r4, #1
   1889c:	str	r6, [r1]
   188a0:	strb	r5, [r4]
   188a4:	bhi	18878 <__assert_fail@plt+0x7900>
   188a8:	cmp	ip, #254	; 0xfe
   188ac:	bls	188c8 <__assert_fail@plt+0x7950>
   188b0:	ldr	r4, [r1]
   188b4:	sub	ip, ip, #255	; 0xff
   188b8:	mvn	r5, #0
   188bc:	add	r6, r4, #1
   188c0:	str	r6, [r1]
   188c4:	strb	r5, [r4]
   188c8:	ldr	r4, [r1]
   188cc:	add	r5, r4, #1
   188d0:	str	r5, [r1]
   188d4:	strb	ip, [r4]
   188d8:	b	188e8 <__assert_fail@plt+0x7970>
   188dc:	ldrb	r1, [r7]
   188e0:	add	ip, r1, ip
   188e4:	strb	ip, [r7]
   188e8:	ldr	ip, [r0]
   188ec:	mov	r1, #0
   188f0:	pop	{r4, r5, r6, r7, r8, r9, sl}
   188f4:	add	r3, ip, r3
   188f8:	str	r3, [r0]
   188fc:	mov	r0, r1
   18900:	str	r3, [r2]
   18904:	bx	lr
   18908:	mov	r1, #1
   1890c:	mov	r0, r1
   18910:	pop	{r4, r5, r6, r7, r8, r9, sl}
   18914:	bx	lr
   18918:	cmp	r0, #14
   1891c:	ble	18938 <__assert_fail@plt+0x79c0>
   18920:	sub	r2, r0, #15
   18924:	movw	r3, #32897	; 0x8081
   18928:	movt	r3, #32896	; 0x8080
   1892c:	add	r0, r0, #1
   18930:	umull	ip, r3, r3, r2
   18934:	add	r0, r0, r3, lsr #7
   18938:	cmp	r1, #18
   1893c:	add	r0, r0, #3
   18940:	bxle	lr
   18944:	sub	r1, r1, #19
   18948:	movw	r3, #32897	; 0x8081
   1894c:	movt	r3, #32896	; 0x8080
   18950:	umull	r2, r3, r3, r1
   18954:	add	r0, r0, r3, lsr #7
   18958:	add	r0, r0, #1
   1895c:	bx	lr
   18960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18964:	sub	sp, sp, #65536	; 0x10000
   18968:	sub	sp, sp, #172	; 0xac
   1896c:	movw	r4, #28936	; 0x7108
   18970:	add	r8, sp, #65536	; 0x10000
   18974:	movt	r4, #3
   18978:	str	r0, [sp, #40]	; 0x28
   1897c:	add	r0, sp, #65536	; 0x10000
   18980:	ldr	sl, [r8, #220]	; 0xdc
   18984:	add	r0, r0, #168	; 0xa8
   18988:	ldr	ip, [r4]
   1898c:	movw	r5, #65456	; 0xffb0
   18990:	cmp	sl, #2
   18994:	add	sl, sp, #65536	; 0x10000
   18998:	ldr	r7, [r3]
   1899c:	movt	r5, #65534	; 0xfffe
   189a0:	str	r3, [sp, #84]	; 0x54
   189a4:	movw	r3, #65464	; 0xffb8
   189a8:	str	r2, [sp, #80]	; 0x50
   189ac:	add	r7, r1, r7
   189b0:	str	ip, [sl, #164]	; 0xa4
   189b4:	movt	r3, #65534	; 0xfffe
   189b8:	str	r4, [sp, #72]	; 0x48
   189bc:	movw	r4, #65460	; 0xffb4
   189c0:	ldr	ip, [sp, #84]	; 0x54
   189c4:	movt	r4, #65534	; 0xfffe
   189c8:	ldr	r6, [r8, #208]	; 0xd0
   189cc:	sub	r8, r7, #5
   189d0:	str	r1, [sp, #68]	; 0x44
   189d4:	mov	r2, #0
   189d8:	str	r1, [r0, r5]
   189dc:	ldr	r5, [sp, #80]	; 0x50
   189e0:	str	r7, [sp, #76]	; 0x4c
   189e4:	str	r1, [r0, r4]
   189e8:	sub	r4, r7, #12
   189ec:	ldr	r7, [sp, #68]	; 0x44
   189f0:	add	r6, r5, r6
   189f4:	str	r4, [sp, #28]
   189f8:	str	r8, [sp, #36]	; 0x24
   189fc:	movw	r8, #65468	; 0xffbc
   18a00:	str	r2, [ip]
   18a04:	movt	r8, #65534	; 0xfffe
   18a08:	ldr	r2, [sl, #216]	; 0xd8
   18a0c:	moveq	r4, r6
   18a10:	str	r8, [sp, #64]	; 0x40
   18a14:	subeq	r4, r4, #5
   18a18:	ldr	r8, [sp, #28]
   18a1c:	movw	sl, #32897	; 0x8081
   18a20:	str	r5, [r0, r3]
   18a24:	add	r5, sp, #116	; 0x74
   18a28:	str	r6, [sp, #52]	; 0x34
   18a2c:	movw	r3, #4095	; 0xfff
   18a30:	streq	r4, [sp, #52]	; 0x34
   18a34:	cmp	r2, r3
   18a38:	movcs	r2, r3
   18a3c:	str	r5, [sp, #48]	; 0x30
   18a40:	mov	r5, r7
   18a44:	cmp	r8, r5
   18a48:	movt	sl, #32896	; 0x8080
   18a4c:	str	r2, [sp, #60]	; 0x3c
   18a50:	str	sl, [sp, #32]
   18a54:	bcc	18ae8 <__assert_fail@plt+0x7b70>
   18a58:	add	ip, sp, #65536	; 0x10000
   18a5c:	add	lr, sp, #65536	; 0x10000
   18a60:	add	r1, sp, #65536	; 0x10000
   18a64:	mov	r3, #3
   18a68:	ldr	ip, [ip, #212]	; 0xd4
   18a6c:	add	r0, sp, #100	; 0x64
   18a70:	mov	r2, r5
   18a74:	add	sl, sp, #65536	; 0x10000
   18a78:	add	sl, sl, #168	; 0xa8
   18a7c:	str	ip, [sp, #4]
   18a80:	ldr	lr, [lr, #228]	; 0xe4
   18a84:	str	lr, [sp, #8]
   18a88:	ldr	r1, [r1, #232]	; 0xe8
   18a8c:	str	r3, [sp]
   18a90:	ldr	r3, [sp, #36]	; 0x24
   18a94:	str	r1, [sp, #12]
   18a98:	ldr	r1, [sp, #40]	; 0x28
   18a9c:	bl	1867c <__assert_fail@plt+0x7704>
   18aa0:	ldr	r6, [sp, #104]	; 0x68
   18aa4:	ldr	r8, [sp, #64]	; 0x40
   18aa8:	cmp	r6, #0
   18aac:	ldr	r4, [sl, r8]
   18ab0:	bne	18c38 <__assert_fail@plt+0x7cc0>
   18ab4:	movw	r3, #65456	; 0xffb0
   18ab8:	movt	r3, #65534	; 0xfffe
   18abc:	ldr	r5, [sl, r3]
   18ac0:	add	r5, r5, #1
   18ac4:	str	r5, [sl, r3]
   18ac8:	ldr	r8, [sp, #28]
   18acc:	add	r4, sp, #65536	; 0x10000
   18ad0:	movw	r3, #65460	; 0xffb4
   18ad4:	add	r4, r4, #168	; 0xa8
   18ad8:	movt	r3, #65534	; 0xfffe
   18adc:	cmp	r8, r5
   18ae0:	ldr	r7, [r4, r3]
   18ae4:	bcs	18a58 <__assert_fail@plt+0x7ae0>
   18ae8:	ldr	sl, [sp, #76]	; 0x4c
   18aec:	movw	r2, #32897	; 0x8081
   18af0:	movt	r2, #32896	; 0x8080
   18af4:	add	ip, sp, #65536	; 0x10000
   18af8:	rsb	r4, r7, sl
   18afc:	add	r1, r4, #240	; 0xf0
   18b00:	ldr	ip, [ip, #220]	; 0xdc
   18b04:	add	r3, r4, #1
   18b08:	umull	r0, r2, r2, r1
   18b0c:	cmp	ip, #2
   18b10:	add	r3, r3, r2, lsr #7
   18b14:	beq	193a8 <__assert_fail@plt+0x8430>
   18b18:	add	r8, sp, #65536	; 0x10000
   18b1c:	ldr	r8, [r8, #220]	; 0xdc
   18b20:	cmp	r8, #0
   18b24:	bne	19370 <__assert_fail@plt+0x83f8>
   18b28:	add	sl, sp, #65536	; 0x10000
   18b2c:	movw	r3, #65464	; 0xffb8
   18b30:	add	sl, sl, #168	; 0xa8
   18b34:	movt	r3, #65534	; 0xfffe
   18b38:	ldr	r2, [sl, r3]
   18b3c:	add	ip, sp, #65536	; 0x10000
   18b40:	movw	r3, #65456	; 0xffb0
   18b44:	add	ip, ip, #168	; 0xa8
   18b48:	movt	r3, #65534	; 0xfffe
   18b4c:	cmp	r4, #14
   18b50:	add	r7, r7, r4
   18b54:	str	r7, [ip, r3]
   18b58:	bls	1934c <__assert_fail@plt+0x83d4>
   18b5c:	sub	r3, r4, #15
   18b60:	add	lr, sp, #65536	; 0x10000
   18b64:	movw	r1, #65464	; 0xffb8
   18b68:	add	lr, lr, #168	; 0xa8
   18b6c:	movt	r1, #65534	; 0xfffe
   18b70:	cmp	r3, #254	; 0xfe
   18b74:	add	ip, r2, #1
   18b78:	mvn	r0, #15
   18b7c:	str	ip, [lr, r1]
   18b80:	strb	r0, [r2]
   18b84:	bls	18bb8 <__assert_fail@plt+0x7c40>
   18b88:	mvn	ip, #0
   18b8c:	add	r0, sp, #65536	; 0x10000
   18b90:	sub	r3, r3, #255	; 0xff
   18b94:	add	r0, r0, #168	; 0xa8
   18b98:	add	r5, sp, #65536	; 0x10000
   18b9c:	add	r5, r5, #168	; 0xa8
   18ba0:	cmp	r3, #254	; 0xfe
   18ba4:	ldr	r2, [r0, r1]
   18ba8:	add	r0, r2, #1
   18bac:	str	r0, [r5, r1]
   18bb0:	strb	ip, [r2]
   18bb4:	bhi	18b8c <__assert_fail@plt+0x7c14>
   18bb8:	add	r8, sp, #65536	; 0x10000
   18bbc:	movw	r2, #65464	; 0xffb8
   18bc0:	add	r8, r8, #168	; 0xa8
   18bc4:	movt	r2, #65534	; 0xfffe
   18bc8:	ldr	r1, [r8, r2]
   18bcc:	add	r0, r1, #1
   18bd0:	str	r0, [r8, r2]
   18bd4:	strb	r3, [r1]
   18bd8:	add	ip, sp, #65536	; 0x10000
   18bdc:	movw	r5, #65464	; 0xffb8
   18be0:	add	ip, ip, #168	; 0xa8
   18be4:	movt	r5, #65534	; 0xfffe
   18be8:	movw	r3, #65460	; 0xffb4
   18bec:	movt	r3, #65534	; 0xfffe
   18bf0:	mov	r2, r4
   18bf4:	ldr	r0, [ip, r5]
   18bf8:	ldr	r1, [ip, r3]
   18bfc:	bl	10d74 <memcpy@plt>
   18c00:	add	r1, sp, #65536	; 0x10000
   18c04:	add	r1, r1, #168	; 0xa8
   18c08:	movw	r3, #65456	; 0xffb0
   18c0c:	movt	r3, #65534	; 0xfffe
   18c10:	ldr	r8, [sp, #84]	; 0x54
   18c14:	ldr	r0, [r1, r5]
   18c18:	ldr	r3, [r1, r3]
   18c1c:	add	r0, r0, r4
   18c20:	ldr	r5, [sp, #68]	; 0x44
   18c24:	ldr	r4, [sp, #80]	; 0x50
   18c28:	rsb	r3, r5, r3
   18c2c:	str	r3, [r8]
   18c30:	rsb	r0, r4, r0
   18c34:	b	19254 <__assert_fail@plt+0x82dc>
   18c38:	ldr	ip, [sp, #60]	; 0x3c
   18c3c:	cmp	r6, ip
   18c40:	bhi	191e4 <__assert_fail@plt+0x826c>
   18c44:	rsb	r5, r7, r5
   18c48:	ldr	r9, [sp, #32]
   18c4c:	add	r3, sp, #124	; 0x7c
   18c50:	add	r8, sp, #188	; 0xbc
   18c54:	mov	r7, #1
   18c58:	mov	r2, r5
   18c5c:	mov	ip, #0
   18c60:	cmp	r2, #14
   18c64:	str	r2, [r3, #4]
   18c68:	subgt	r0, r2, #15
   18c6c:	addgt	r1, r2, #1
   18c70:	movle	r0, r2
   18c74:	str	r7, [r3]
   18c78:	umullgt	sl, r0, r9, r0
   18c7c:	str	ip, [r3, #-4]
   18c80:	add	r3, r3, #16
   18c84:	addle	r1, r2, #1
   18c88:	mov	r2, r1
   18c8c:	addgt	r0, r1, r0, lsr #7
   18c90:	str	r0, [r3, #-24]	; 0xffffffe8
   18c94:	cmp	r3, r8
   18c98:	bne	18c60 <__assert_fail@plt+0x7ce8>
   18c9c:	cmp	r6, #3
   18ca0:	ble	18cdc <__assert_fail@plt+0x7d64>
   18ca4:	ldr	r8, [sp, #48]	; 0x30
   18ca8:	add	r7, r6, #1
   18cac:	mov	r9, #4
   18cb0:	mov	r1, r9
   18cb4:	mov	r0, r5
   18cb8:	bl	18918 <__assert_fail@plt+0x79a0>
   18cbc:	str	r9, [r8, #72]	; 0x48
   18cc0:	add	r9, r9, #1
   18cc4:	str	r4, [r8, #68]	; 0x44
   18cc8:	cmp	r9, r7
   18ccc:	str	r5, [r8, #76]	; 0x4c
   18cd0:	add	r8, r8, #16
   18cd4:	str	r0, [r8, #48]	; 0x30
   18cd8:	bne	18cb0 <__assert_fail@plt+0x7d38>
   18cdc:	add	ip, sp, #65536	; 0x10000
   18ce0:	lsl	sl, r6, #4
   18ce4:	add	ip, ip, #168	; 0xa8
   18ce8:	ldr	r4, [sp, #48]	; 0x30
   18cec:	add	r1, ip, sl
   18cf0:	mov	r3, #1
   18cf4:	sub	r1, r1, #65536	; 0x10000
   18cf8:	add	r2, r4, sl
   18cfc:	sub	r1, r1, #52	; 0x34
   18d00:	mov	r4, r3
   18d04:	mov	ip, #0
   18d08:	str	r3, [r2, #28]
   18d0c:	str	r4, [r2, #24]
   18d10:	str	ip, [r2, #20]
   18d14:	ldr	r0, [r1]
   18d18:	add	r0, r3, r0
   18d1c:	add	r3, r3, #1
   18d20:	cmp	r3, #4
   18d24:	str	r0, [r2, #16]!
   18d28:	bne	18d08 <__assert_fail@plt+0x7d90>
   18d2c:	cmp	r6, #1
   18d30:	movw	r3, #65456	; 0xffb0
   18d34:	movt	r3, #65534	; 0xfffe
   18d38:	ble	19398 <__assert_fail@plt+0x8420>
   18d3c:	add	r0, sp, #65536	; 0x10000
   18d40:	ldr	r4, [sp, #28]
   18d44:	add	r0, r0, #168	; 0xa8
   18d48:	ldr	r5, [r0, r3]
   18d4c:	add	r2, r5, #1
   18d50:	cmp	r4, r2
   18d54:	bcc	19034 <__assert_fail@plt+0x80bc>
   18d58:	ldr	r8, [sp, #48]	; 0x30
   18d5c:	movw	r5, #65476	; 0xffc4
   18d60:	movt	r5, #65534	; 0xfffe
   18d64:	str	r5, [sp, #44]	; 0x2c
   18d68:	add	fp, r8, #64	; 0x40
   18d6c:	mov	r8, #2
   18d70:	add	r0, sp, #65536	; 0x10000
   18d74:	sub	r7, r8, #1
   18d78:	ldr	r0, [r0, #224]	; 0xe0
   18d7c:	mov	r4, r7
   18d80:	cmp	r0, #0
   18d84:	beq	191b4 <__assert_fail@plt+0x823c>
   18d88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18d8c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18d90:	cmp	r1, r3
   18d94:	bgt	18da8 <__assert_fail@plt+0x7e30>
   18d98:	ldr	r1, [fp, #16]
   18d9c:	add	r3, r3, #2
   18da0:	cmp	r3, r1
   18da4:	bge	19010 <__assert_fail@plt+0x8098>
   18da8:	add	r1, sp, #65536	; 0x10000
   18dac:	add	r3, sp, #65536	; 0x10000
   18db0:	ldr	r1, [r1, #212]	; 0xd4
   18db4:	str	r1, [sp, #4]
   18db8:	ldr	r3, [r3, #228]	; 0xe4
   18dbc:	str	r3, [sp, #8]
   18dc0:	mov	r3, #3
   18dc4:	add	r5, sp, #65536	; 0x10000
   18dc8:	add	r0, sp, #108	; 0x6c
   18dcc:	ldr	r1, [sp, #40]	; 0x28
   18dd0:	ldr	r5, [r5, #232]	; 0xe8
   18dd4:	str	r3, [sp]
   18dd8:	ldr	r3, [sp, #36]	; 0x24
   18ddc:	str	r5, [sp, #12]
   18de0:	bl	1867c <__assert_fail@plt+0x7704>
   18de4:	add	r0, sp, #65536	; 0x10000
   18de8:	ldr	ip, [sp, #44]	; 0x2c
   18dec:	add	r0, r0, #168	; 0xa8
   18df0:	ldr	r9, [sp, #112]	; 0x70
   18df4:	ldr	ip, [r0, ip]
   18df8:	cmp	r9, #0
   18dfc:	str	ip, [sp, #20]
   18e00:	beq	19010 <__assert_fail@plt+0x8098>
   18e04:	ldr	r5, [sp, #60]	; 0x3c
   18e08:	cmp	r9, r5
   18e0c:	bhi	192a0 <__assert_fail@plt+0x8328>
   18e10:	add	r3, r7, r9
   18e14:	cmp	r3, #4096	; 0x1000
   18e18:	bge	192a0 <__assert_fail@plt+0x8328>
   18e1c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   18e20:	sub	r5, fp, #48	; 0x30
   18e24:	ldr	r4, [sp, #32]
   18e28:	sub	r0, ip, #15
   18e2c:	add	r1, ip, #1
   18e30:	cmp	ip, #14
   18e34:	mov	r3, r5
   18e38:	umull	r4, r0, r4, r0
   18e3c:	mov	r2, r1
   18e40:	str	r5, [sp, #24]
   18e44:	add	r1, r1, r0, lsr #7
   18e48:	movgt	ip, r1
   18e4c:	cmp	r2, #14
   18e50:	ldr	r4, [fp, #-48]	; 0xffffffd0
   18e54:	subgt	r0, r2, #15
   18e58:	addgt	r1, r2, #1
   18e5c:	ldrgt	r5, [sp, #32]
   18e60:	rsb	r4, ip, r4
   18e64:	movle	r0, r2
   18e68:	addle	r1, r2, #1
   18e6c:	umullgt	r5, r0, r5, r0
   18e70:	addgt	r0, r1, r0, lsr #7
   18e74:	add	r0, r4, r0
   18e78:	ldr	r4, [r3, #16]
   18e7c:	cmp	r0, r4
   18e80:	bge	18e9c <__assert_fail@plt+0x7f24>
   18e84:	mov	r5, #1
   18e88:	mov	r4, #0
   18e8c:	str	r5, [r3, #24]
   18e90:	str	r4, [r3, #20]
   18e94:	str	r2, [r3, #28]
   18e98:	str	r0, [r3, #16]
   18e9c:	add	r3, r3, #16
   18ea0:	mov	r2, r1
   18ea4:	cmp	r3, fp
   18ea8:	bne	18e4c <__assert_fail@plt+0x7ed4>
   18eac:	cmp	r9, #3
   18eb0:	ldr	r5, [sp, #24]
   18eb4:	ble	18fc4 <__assert_fail@plt+0x804c>
   18eb8:	mov	r3, fp
   18ebc:	add	sl, r9, #1
   18ec0:	mov	fp, r6
   18ec4:	mov	r4, #4
   18ec8:	str	r8, [sp, #56]	; 0x38
   18ecc:	mov	r6, r3
   18ed0:	b	18f50 <__assert_fail@plt+0x7fd8>
   18ed4:	mov	r0, #0
   18ed8:	mov	r1, r4
   18edc:	bl	18918 <__assert_fail@plt+0x79a0>
   18ee0:	ldr	r3, [r6, #-48]	; 0xffffffd0
   18ee4:	mov	r2, #0
   18ee8:	add	r0, r0, r3
   18eec:	add	r1, fp, #3
   18ef0:	cmp	r1, r8
   18ef4:	blt	18f10 <__assert_fail@plt+0x7f98>
   18ef8:	add	r3, sp, #65536	; 0x10000
   18efc:	ldr	r1, [r5, #64]	; 0x40
   18f00:	ldr	r3, [r3, #232]	; 0xe8
   18f04:	rsb	r1, r3, r1
   18f08:	cmp	r0, r1
   18f0c:	bgt	18f40 <__assert_fail@plt+0x7fc8>
   18f10:	cmp	r8, fp
   18f14:	str	r4, [r5, #72]	; 0x48
   18f18:	str	r2, [r5, #76]	; 0x4c
   18f1c:	movle	r1, #0
   18f20:	movgt	r1, #1
   18f24:	cmp	r4, r9
   18f28:	str	r0, [r5, #64]	; 0x40
   18f2c:	movne	r1, #0
   18f30:	cmp	r1, #0
   18f34:	movne	fp, r8
   18f38:	ldr	r8, [sp, #20]
   18f3c:	str	r8, [r5, #68]	; 0x44
   18f40:	add	r4, r4, #1
   18f44:	add	r5, r5, #16
   18f48:	cmp	r4, sl
   18f4c:	beq	18fb0 <__assert_fail@plt+0x8038>
   18f50:	ldr	r2, [r6, #-40]	; 0xffffffd8
   18f54:	add	r8, r7, r4
   18f58:	cmp	r2, #1
   18f5c:	bne	18ed4 <__assert_fail@plt+0x7f5c>
   18f60:	ldr	r2, [r6, #-36]	; 0xffffffdc
   18f64:	cmp	r7, r2
   18f68:	rsbgt	r1, r2, r7
   18f6c:	addgt	ip, sp, #65536	; 0x10000
   18f70:	addgt	ip, ip, #168	; 0xa8
   18f74:	mov	r0, r2
   18f78:	addgt	r1, ip, r1, lsl #4
   18f7c:	movle	r3, #0
   18f80:	subgt	r1, r1, #65536	; 0x10000
   18f84:	strle	r3, [sp, #24]
   18f88:	subgt	r1, r1, #52	; 0x34
   18f8c:	ldrgt	r1, [r1]
   18f90:	str	r2, [sp, #16]
   18f94:	strgt	r1, [sp, #24]
   18f98:	mov	r1, r4
   18f9c:	bl	18918 <__assert_fail@plt+0x79a0>
   18fa0:	ldr	ip, [sp, #24]
   18fa4:	ldr	r2, [sp, #16]
   18fa8:	add	r0, ip, r0
   18fac:	b	18eec <__assert_fail@plt+0x7f74>
   18fb0:	mov	r3, r6
   18fb4:	ldr	r8, [sp, #56]	; 0x38
   18fb8:	mov	r6, fp
   18fbc:	mov	fp, r3
   18fc0:	lsl	sl, r6, #4
   18fc4:	add	r1, sp, #65536	; 0x10000
   18fc8:	ldr	ip, [sp, #48]	; 0x30
   18fcc:	add	r1, r1, #168	; 0xa8
   18fd0:	mov	r3, #1
   18fd4:	add	r0, r1, sl
   18fd8:	add	r2, ip, sl
   18fdc:	sub	r0, r0, #65536	; 0x10000
   18fe0:	sub	r0, r0, #52	; 0x34
   18fe4:	str	r3, [r2, #28]
   18fe8:	mov	r4, #1
   18fec:	mov	r5, #0
   18ff0:	str	r4, [r2, #24]
   18ff4:	str	r5, [r2, #20]
   18ff8:	ldr	r1, [r0]
   18ffc:	add	r1, r3, r1
   19000:	add	r3, r3, r4
   19004:	cmp	r3, #4
   19008:	str	r1, [r2, #16]!
   1900c:	bne	18fe4 <__assert_fail@plt+0x806c>
   19010:	cmp	r6, r8
   19014:	ble	19278 <__assert_fail@plt+0x8300>
   19018:	ldr	r5, [sp, #88]	; 0x58
   1901c:	add	fp, fp, #16
   19020:	ldr	ip, [sp, #28]
   19024:	add	r2, r5, r8
   19028:	add	r8, r8, #1
   1902c:	cmp	ip, r2
   19030:	bcs	18d70 <__assert_fail@plt+0x7df8>
   19034:	add	ip, sp, #65536	; 0x10000
   19038:	ldr	r4, [sp, #48]	; 0x30
   1903c:	add	ip, ip, #168	; 0xa8
   19040:	add	r3, ip, sl
   19044:	add	r2, r4, #4
   19048:	sub	r3, r3, #65536	; 0x10000
   1904c:	ldr	r2, [r2, r6, lsl #4]
   19050:	ldr	r9, [r3, #-44]	; 0xffffffd4
   19054:	rsb	r4, r9, r6
   19058:	str	r2, [sp, #20]
   1905c:	add	sl, sp, #65536	; 0x10000
   19060:	ldr	r8, [sp, #48]	; 0x30
   19064:	add	sl, sl, #168	; 0xa8
   19068:	ldr	ip, [sp, #20]
   1906c:	add	r3, sl, r4, lsl #4
   19070:	add	r1, r8, #4
   19074:	sub	r3, r3, #65536	; 0x10000
   19078:	ldr	r0, [r1, r4, lsl #4]
   1907c:	ldr	r2, [r3, #-44]	; 0xffffffd4
   19080:	str	r9, [r3, #-44]	; 0xffffffd4
   19084:	cmp	r4, r2
   19088:	str	ip, [r1, r4, lsl #4]
   1908c:	ldrge	r8, [sp, #48]	; 0x30
   19090:	bge	190a0 <__assert_fail@plt+0x8128>
   19094:	b	190d0 <__assert_fail@plt+0x8158>
   19098:	mov	r0, r7
   1909c:	mov	r2, ip
   190a0:	rsb	r4, r2, r4
   190a4:	add	sl, sp, #65536	; 0x10000
   190a8:	add	sl, sl, #168	; 0xa8
   190ac:	add	r1, r8, #4
   190b0:	add	r3, sl, r4, lsl #4
   190b4:	sub	r3, r3, #65536	; 0x10000
   190b8:	ldr	r7, [r1, r4, lsl #4]
   190bc:	ldr	ip, [r3, #-44]	; 0xffffffd4
   190c0:	str	r2, [r3, #-44]	; 0xffffffd4
   190c4:	cmp	ip, r4
   190c8:	str	r0, [r1, r4, lsl #4]
   190cc:	ble	19098 <__assert_fail@plt+0x8120>
   190d0:	cmp	r6, #0
   190d4:	ble	18ac8 <__assert_fail@plt+0x7b50>
   190d8:	movw	fp, #65456	; 0xffb0
   190dc:	movt	fp, #65534	; 0xfffe
   190e0:	add	r8, sp, #92	; 0x5c
   190e4:	movw	r7, #65464	; 0xffb8
   190e8:	mov	r3, fp
   190ec:	movt	r7, #65534	; 0xfffe
   190f0:	mov	fp, r8
   190f4:	str	r7, [sp, #24]
   190f8:	add	sl, sp, #88	; 0x58
   190fc:	mov	r7, r6
   19100:	add	r9, sp, #96	; 0x60
   19104:	mov	r4, #0
   19108:	mov	r1, r5
   1910c:	ldr	r6, [sp, #48]	; 0x30
   19110:	mov	r8, r3
   19114:	b	1912c <__assert_fail@plt+0x81b4>
   19118:	add	r4, r4, #1
   1911c:	add	r1, r1, #1
   19120:	cmp	r7, r4
   19124:	str	r1, [r0, r8]
   19128:	ble	191ac <__assert_fail@plt+0x8234>
   1912c:	add	r0, sp, #65536	; 0x10000
   19130:	add	r2, r6, #4
   19134:	add	r0, r0, #168	; 0xa8
   19138:	add	r3, r0, r4, lsl #4
   1913c:	ldr	r2, [r2, r4, lsl #4]
   19140:	sub	r3, r3, #65536	; 0x10000
   19144:	ldr	r5, [r3, #-44]	; 0xffffffd4
   19148:	cmp	r5, #1
   1914c:	beq	19118 <__assert_fail@plt+0x81a0>
   19150:	rsb	r1, r2, r1
   19154:	ldr	ip, [sp, #52]	; 0x34
   19158:	add	r2, sp, #65536	; 0x10000
   1915c:	add	lr, sp, #65536	; 0x10000
   19160:	add	lr, lr, #168	; 0xa8
   19164:	mov	r3, r5
   19168:	ldr	r2, [r2, #220]	; 0xdc
   1916c:	mov	r0, sl
   19170:	str	ip, [sp, #8]
   19174:	add	r4, r4, r5
   19178:	ldr	ip, [sp, #24]
   1917c:	stm	sp, {r1, r2}
   19180:	mov	r1, r9
   19184:	mov	r2, fp
   19188:	ldr	r5, [lr, ip]
   1918c:	bl	18748 <__assert_fail@plt+0x77d0>
   19190:	cmp	r0, #0
   19194:	bne	19240 <__assert_fail@plt+0x82c8>
   19198:	add	r0, sp, #65536	; 0x10000
   1919c:	cmp	r7, r4
   191a0:	add	r0, r0, #168	; 0xa8
   191a4:	ldr	r1, [r0, r8]
   191a8:	bgt	1912c <__assert_fail@plt+0x81b4>
   191ac:	mov	r5, r1
   191b0:	b	18ac8 <__assert_fail@plt+0x7b50>
   191b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   191b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   191bc:	cmp	r1, r3
   191c0:	ble	19010 <__assert_fail@plt+0x8098>
   191c4:	add	r1, sp, #65536	; 0x10000
   191c8:	add	r3, sp, #65536	; 0x10000
   191cc:	ldr	r1, [r1, #212]	; 0xd4
   191d0:	str	r1, [sp, #4]
   191d4:	ldr	r3, [r3, #228]	; 0xe4
   191d8:	str	r3, [sp, #8]
   191dc:	rsb	r3, r7, r6
   191e0:	b	18dc4 <__assert_fail@plt+0x7e4c>
   191e4:	add	lr, sp, #65536	; 0x10000
   191e8:	add	r0, sp, #65536	; 0x10000
   191ec:	add	lr, lr, #168	; 0xa8
   191f0:	movw	r7, #65456	; 0xffb0
   191f4:	movt	r7, #65534	; 0xfffe
   191f8:	ldr	r0, [r0, #220]	; 0xdc
   191fc:	ldr	r5, [sp, #52]	; 0x34
   19200:	movw	ip, #65464	; 0xffb8
   19204:	ldr	r2, [lr, r7]
   19208:	movt	ip, #65534	; 0xfffe
   1920c:	add	r1, sp, #168	; 0xa8
   19210:	str	r0, [sp, #4]
   19214:	str	r5, [sp, #8]
   19218:	rsb	r4, r4, r2
   1921c:	mov	r3, r6
   19220:	str	r4, [sp]
   19224:	add	r0, sp, #88	; 0x58
   19228:	sub	r1, r1, #72	; 0x48
   1922c:	add	r2, sp, #92	; 0x5c
   19230:	ldr	r5, [lr, ip]
   19234:	bl	18748 <__assert_fail@plt+0x77d0>
   19238:	cmp	r0, #0
   1923c:	beq	19290 <__assert_fail@plt+0x8318>
   19240:	add	r1, sp, #65536	; 0x10000
   19244:	ldr	r1, [r1, #220]	; 0xdc
   19248:	cmp	r1, #2
   1924c:	beq	192bc <__assert_fail@plt+0x8344>
   19250:	mov	r0, #0
   19254:	ldr	sl, [sp, #72]	; 0x48
   19258:	add	r8, sp, #65536	; 0x10000
   1925c:	ldr	r2, [r8, #164]	; 0xa4
   19260:	ldr	r3, [sl]
   19264:	cmp	r2, r3
   19268:	bne	193c0 <__assert_fail@plt+0x8448>
   1926c:	add	sp, sp, #65536	; 0x10000
   19270:	add	sp, sp, #172	; 0xac
   19274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19278:	add	r8, sp, #65536	; 0x10000
   1927c:	movw	r3, #65456	; 0xffb0
   19280:	add	r8, r8, #168	; 0xa8
   19284:	movt	r3, #65534	; 0xfffe
   19288:	ldr	r5, [r8, r3]
   1928c:	b	19034 <__assert_fail@plt+0x80bc>
   19290:	add	r2, sp, #65536	; 0x10000
   19294:	add	r2, r2, #168	; 0xa8
   19298:	ldr	r5, [r2, r7]
   1929c:	b	18ac8 <__assert_fail@plt+0x7b50>
   192a0:	mov	r6, r8
   192a4:	add	r8, sp, #65536	; 0x10000
   192a8:	movw	r3, #65456	; 0xffb0
   192ac:	add	r8, r8, #168	; 0xa8
   192b0:	movt	r3, #65534	; 0xfffe
   192b4:	ldr	r5, [r8, r3]
   192b8:	b	1905c <__assert_fail@plt+0x80e4>
   192bc:	add	sl, sp, #65536	; 0x10000
   192c0:	movw	r2, #65460	; 0xffb4
   192c4:	add	sl, sl, #168	; 0xa8
   192c8:	movt	r2, #65534	; 0xfffe
   192cc:	ldr	ip, [sp, #76]	; 0x4c
   192d0:	movw	r3, #32897	; 0x8081
   192d4:	ldr	r7, [sl, r2]
   192d8:	movt	r3, #32896	; 0x8080
   192dc:	movw	r1, #65464	; 0xffb8
   192e0:	movt	r1, #65534	; 0xfffe
   192e4:	rsb	r4, r7, ip
   192e8:	mov	r2, r5
   192ec:	add	r0, r4, #240	; 0xf0
   192f0:	str	r5, [sl, r1]
   192f4:	add	r1, r4, #1
   192f8:	umull	r5, r3, r3, r0
   192fc:	add	r3, r1, r3, lsr #7
   19300:	ldr	r5, [sp, #52]	; 0x34
   19304:	add	r3, r2, r3
   19308:	add	r5, r5, #5
   1930c:	str	r5, [sp, #52]	; 0x34
   19310:	ldr	r5, [sp, #52]	; 0x34
   19314:	cmp	r5, r3
   19318:	bcs	18b3c <__assert_fail@plt+0x7bc4>
   1931c:	add	r8, sp, #65536	; 0x10000
   19320:	ldr	r8, [r8, #220]	; 0xdc
   19324:	cmp	r8, #1
   19328:	beq	19250 <__assert_fail@plt+0x82d8>
   1932c:	rsb	r1, r2, r5
   19330:	movw	r3, #32897	; 0x8081
   19334:	add	r0, r1, #239	; 0xef
   19338:	movt	r3, #32896	; 0x8080
   1933c:	sub	r1, r1, #1
   19340:	umull	sl, r3, r3, r0
   19344:	sub	r4, r1, r3, lsr #7
   19348:	b	18b3c <__assert_fail@plt+0x7bc4>
   1934c:	add	sl, sp, #65536	; 0x10000
   19350:	movw	r3, #65464	; 0xffb8
   19354:	add	sl, sl, #168	; 0xa8
   19358:	movt	r3, #65534	; 0xfffe
   1935c:	add	r0, r2, #1
   19360:	lsl	r1, r4, #4
   19364:	str	r0, [sl, r3]
   19368:	strb	r1, [r2]
   1936c:	b	18bd8 <__assert_fail@plt+0x7c60>
   19370:	add	ip, sp, #65536	; 0x10000
   19374:	movw	r2, #65464	; 0xffb8
   19378:	add	ip, ip, #168	; 0xa8
   1937c:	movt	r2, #65534	; 0xfffe
   19380:	ldr	r5, [sp, #52]	; 0x34
   19384:	ldr	r2, [ip, r2]
   19388:	add	r3, r2, r3
   1938c:	cmp	r5, r3
   19390:	bcs	18b3c <__assert_fail@plt+0x7bc4>
   19394:	b	1931c <__assert_fail@plt+0x83a4>
   19398:	add	ip, sp, #65536	; 0x10000
   1939c:	add	ip, ip, #168	; 0xa8
   193a0:	ldr	r5, [ip, r3]
   193a4:	b	19034 <__assert_fail@plt+0x80bc>
   193a8:	add	r1, sp, #65536	; 0x10000
   193ac:	movw	r2, #65464	; 0xffb8
   193b0:	add	r1, r1, #168	; 0xa8
   193b4:	movt	r2, #65534	; 0xfffe
   193b8:	ldr	r2, [r1, r2]
   193bc:	b	19300 <__assert_fail@plt+0x8388>
   193c0:	bl	10db0 <__stack_chk_fail@plt>
   193c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193c8:	sub	sp, sp, #116	; 0x74
   193cc:	movw	r7, #28936	; 0x7108
   193d0:	movt	r7, #3
   193d4:	str	r3, [sp, #36]	; 0x24
   193d8:	mov	r8, r0
   193dc:	ldr	r3, [r3]
   193e0:	ldr	r0, [r7]
   193e4:	cmp	r3, #2113929216	; 0x7e000000
   193e8:	str	r1, [sp, #44]	; 0x2c
   193ec:	str	r2, [sp, #48]	; 0x30
   193f0:	ldr	r1, [sp, #156]	; 0x9c
   193f4:	str	r0, [sp, #108]	; 0x6c
   193f8:	bhi	19634 <__assert_fail@plt+0x86bc>
   193fc:	mov	r2, #262144	; 0x40000
   19400:	cmp	r1, #0
   19404:	ldr	r0, [r8, r2]
   19408:	movle	r1, #9
   1940c:	add	r0, r0, r3
   19410:	str	r0, [r8, r2]
   19414:	ble	19420 <__assert_fail@plt+0x84a8>
   19418:	cmp	r1, #12
   1941c:	movge	r1, #12
   19420:	add	r4, r1, r1, lsl #1
   19424:	movw	r2, #17512	; 0x4468
   19428:	movt	r2, #2
   1942c:	mov	r0, #26
   19430:	lsl	r4, r4, #2
   19434:	movt	r0, #4
   19438:	add	ip, r2, r4
   1943c:	ldr	r2, [r2, r4]
   19440:	ldr	r4, [ip, #4]
   19444:	cmp	r2, #0
   19448:	ldr	ip, [ip, #8]
   1944c:	ldrh	r0, [r8, r0]
   19450:	str	r4, [sp, #40]	; 0x28
   19454:	beq	194c4 <__assert_fail@plt+0x854c>
   19458:	ldr	r4, [sp, #40]	; 0x28
   1945c:	subs	r3, r1, #12
   19460:	rsbs	r1, r3, #0
   19464:	ldr	lr, [sp, #152]	; 0x98
   19468:	str	ip, [sp, #8]
   1946c:	adcs	r1, r1, r3
   19470:	str	r4, [sp, #4]
   19474:	adds	r3, r0, #0
   19478:	ldr	ip, [sp, #160]	; 0xa0
   1947c:	mov	r0, r8
   19480:	ldr	r4, [sp, #164]	; 0xa4
   19484:	movne	r3, #1
   19488:	str	r1, [sp, #16]
   1948c:	str	r3, [sp, #24]
   19490:	ldr	r1, [sp, #44]	; 0x2c
   19494:	str	lr, [sp]
   19498:	ldr	r2, [sp, #48]	; 0x30
   1949c:	ldr	r3, [sp, #36]	; 0x24
   194a0:	str	ip, [sp, #12]
   194a4:	str	r4, [sp, #20]
   194a8:	bl	18960 <__assert_fail@plt+0x79e8>
   194ac:	ldr	r2, [sp, #108]	; 0x6c
   194b0:	ldr	r3, [r7]
   194b4:	cmp	r2, r3
   194b8:	bne	19b18 <__assert_fail@plt+0x8ba0>
   194bc:	add	sp, sp, #116	; 0x74
   194c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194c4:	ldr	r4, [sp, #44]	; 0x2c
   194c8:	ldr	ip, [sp, #160]	; 0xa0
   194cc:	str	r2, [sp, #84]	; 0x54
   194d0:	cmp	ip, #2
   194d4:	str	r4, [sp, #72]	; 0x48
   194d8:	add	ip, r4, r3
   194dc:	str	r4, [sp, #76]	; 0x4c
   194e0:	ldr	r4, [sp, #48]	; 0x30
   194e4:	str	ip, [sp, #60]	; 0x3c
   194e8:	ldr	ip, [sp, #152]	; 0x98
   194ec:	str	r4, [sp, #80]	; 0x50
   194f0:	add	ip, r4, ip
   194f4:	ldr	r4, [sp, #36]	; 0x24
   194f8:	str	ip, [sp, #32]
   194fc:	subeq	ip, ip, #5
   19500:	streq	ip, [sp, #32]
   19504:	cmp	r3, #12
   19508:	str	r2, [sp, #88]	; 0x58
   1950c:	str	r2, [sp, #92]	; 0x5c
   19510:	str	r2, [sp, #96]	; 0x60
   19514:	str	r2, [sp, #100]	; 0x64
   19518:	str	r2, [r4]
   1951c:	ble	1963c <__assert_fail@plt+0x86c4>
   19520:	ldr	ip, [sp, #40]	; 0x28
   19524:	mov	sl, #0
   19528:	ldr	r4, [sp, #60]	; 0x3c
   1952c:	cmp	ip, #128	; 0x80
   19530:	ldr	fp, [sp, #160]	; 0xa0
   19534:	sub	r9, r4, #12
   19538:	str	r7, [sp, #64]	; 0x40
   1953c:	movls	ip, #0
   19540:	movhi	ip, #1
   19544:	str	ip, [sp, #52]	; 0x34
   19548:	sub	ip, r4, #5
   1954c:	str	ip, [sp, #56]	; 0x38
   19550:	ldr	ip, [sp, #44]	; 0x2c
   19554:	cmp	r9, ip
   19558:	bcc	19624 <__assert_fail@plt+0x86ac>
   1955c:	ldr	r4, [sp, #40]	; 0x28
   19560:	mov	r1, ip
   19564:	mov	lr, #3
   19568:	add	r0, sp, #84	; 0x54
   1956c:	mov	r2, ip
   19570:	str	r0, [sp, #4]
   19574:	str	r4, [sp, #12]
   19578:	add	r3, sp, #104	; 0x68
   1957c:	ldr	r4, [sp, #52]	; 0x34
   19580:	mov	r0, r8
   19584:	str	r3, [sp, #8]
   19588:	str	lr, [sp]
   1958c:	str	r4, [sp, #16]
   19590:	ldr	r4, [sp, #164]	; 0xa4
   19594:	ldr	r3, [sp, #56]	; 0x38
   19598:	str	sl, [sp, #20]
   1959c:	str	r4, [sp, #24]
   195a0:	str	sl, [sp, #28]
   195a4:	str	ip, [sp, #104]	; 0x68
   195a8:	bl	17d60 <__assert_fail@plt+0x6de8>
   195ac:	ldr	ip, [sp, #72]	; 0x48
   195b0:	cmp	r0, #3
   195b4:	mov	r4, r0
   195b8:	addle	ip, ip, #1
   195bc:	strle	ip, [sp, #72]	; 0x48
   195c0:	ble	19554 <__assert_fail@plt+0x85dc>
   195c4:	ldr	lr, [sp, #84]	; 0x54
   195c8:	mov	r2, ip
   195cc:	mov	r5, r0
   195d0:	mov	r6, ip
   195d4:	str	lr, [sp, #68]	; 0x44
   195d8:	add	r3, r2, r4
   195dc:	cmp	r9, r3
   195e0:	bcs	198fc <__assert_fail@plt+0x8984>
   195e4:	ldr	r1, [sp, #84]	; 0x54
   195e8:	mov	r3, r4
   195ec:	ldr	r4, [sp, #32]
   195f0:	add	r2, sp, #76	; 0x4c
   195f4:	str	fp, [sp, #4]
   195f8:	add	r0, sp, #72	; 0x48
   195fc:	str	r1, [sp]
   19600:	add	r1, sp, #80	; 0x50
   19604:	str	r4, [sp, #8]
   19608:	ldr	r4, [sp, #80]	; 0x50
   1960c:	bl	18748 <__assert_fail@plt+0x77d0>
   19610:	cmp	r0, #0
   19614:	bne	19878 <__assert_fail@plt+0x8900>
   19618:	ldr	ip, [sp, #72]	; 0x48
   1961c:	cmp	r9, ip
   19620:	bcs	1955c <__assert_fail@plt+0x85e4>
   19624:	ldr	r7, [sp, #64]	; 0x40
   19628:	ldr	r2, [sp, #76]	; 0x4c
   1962c:	ldr	r4, [sp, #80]	; 0x50
   19630:	b	19644 <__assert_fail@plt+0x86cc>
   19634:	mov	r0, #0
   19638:	b	194ac <__assert_fail@plt+0x8534>
   1963c:	ldr	r4, [sp, #48]	; 0x30
   19640:	ldr	r2, [sp, #44]	; 0x2c
   19644:	ldr	ip, [sp, #60]	; 0x3c
   19648:	movw	r3, #32897	; 0x8081
   1964c:	movt	r3, #32896	; 0x8080
   19650:	rsb	r5, r2, ip
   19654:	ldr	ip, [sp, #160]	; 0xa0
   19658:	add	r0, r5, #240	; 0xf0
   1965c:	add	r1, r5, #1
   19660:	cmp	ip, #2
   19664:	umull	ip, r3, r3, r0
   19668:	add	r3, r1, r3, lsr #7
   1966c:	beq	198b0 <__assert_fail@plt+0x8938>
   19670:	ldr	ip, [sp, #160]	; 0xa0
   19674:	cmp	ip, #0
   19678:	bne	198bc <__assert_fail@plt+0x8944>
   1967c:	cmp	r5, #14
   19680:	add	r2, r2, r5
   19684:	str	r2, [sp, #72]	; 0x48
   19688:	bls	19a70 <__assert_fail@plt+0x8af8>
   1968c:	sub	r3, r5, #15
   19690:	add	r2, r4, #1
   19694:	cmp	r3, #254	; 0xfe
   19698:	str	r2, [sp, #80]	; 0x50
   1969c:	mvn	r2, #15
   196a0:	strb	r2, [r4]
   196a4:	bls	196c8 <__assert_fail@plt+0x8750>
   196a8:	mvn	r0, #0
   196ac:	ldr	r2, [sp, #80]	; 0x50
   196b0:	sub	r3, r3, #255	; 0xff
   196b4:	cmp	r3, #254	; 0xfe
   196b8:	add	r1, r2, #1
   196bc:	str	r1, [sp, #80]	; 0x50
   196c0:	strb	r0, [r2]
   196c4:	bhi	196ac <__assert_fail@plt+0x8734>
   196c8:	ldr	r2, [sp, #80]	; 0x50
   196cc:	add	r1, r2, #1
   196d0:	str	r1, [sp, #80]	; 0x50
   196d4:	strb	r3, [r2]
   196d8:	ldr	r0, [sp, #80]	; 0x50
   196dc:	mov	r2, r5
   196e0:	ldr	r1, [sp, #76]	; 0x4c
   196e4:	bl	10d74 <memcpy@plt>
   196e8:	ldr	r0, [sp, #80]	; 0x50
   196ec:	ldr	r4, [sp, #48]	; 0x30
   196f0:	add	r0, r0, r5
   196f4:	ldr	r3, [sp, #72]	; 0x48
   196f8:	rsb	r0, r4, r0
   196fc:	ldr	r4, [sp, #36]	; 0x24
   19700:	ldr	ip, [sp, #44]	; 0x2c
   19704:	rsb	r3, ip, r3
   19708:	str	r3, [r4]
   1970c:	b	194ac <__assert_fail@plt+0x8534>
   19710:	add	ip, sp, #100	; 0x64
   19714:	str	ip, [sp, #4]
   19718:	ldr	ip, [sp, #40]	; 0x28
   1971c:	sub	r1, r6, #3
   19720:	add	lr, sp, #96	; 0x60
   19724:	ldr	r3, [sp, #56]	; 0x38
   19728:	str	r5, [sp]
   1972c:	add	r1, r2, r1
   19730:	str	ip, [sp, #12]
   19734:	mov	r0, r8
   19738:	ldr	ip, [sp, #52]	; 0x34
   1973c:	str	lr, [sp, #8]
   19740:	str	sl, [sp, #20]
   19744:	str	ip, [sp, #16]
   19748:	ldr	ip, [sp, #164]	; 0xa4
   1974c:	str	sl, [sp, #28]
   19750:	str	ip, [sp, #24]
   19754:	bl	17d60 <__assert_fail@plt+0x6de8>
   19758:	ldr	r3, [sp, #72]	; 0x48
   1975c:	cmp	r5, r0
   19760:	mov	r7, r0
   19764:	beq	19b1c <__assert_fail@plt+0x8ba4>
   19768:	add	r1, r4, #3
   1976c:	ldr	r2, [sp, #96]	; 0x60
   19770:	add	r1, r3, r1
   19774:	cmp	r2, r1
   19778:	bcs	199a8 <__assert_fail@plt+0x8a30>
   1977c:	add	r1, r3, r4
   19780:	cmp	r2, r1
   19784:	bcs	19a84 <__assert_fail@plt+0x8b0c>
   19788:	ldr	r1, [sp, #100]	; 0x64
   1978c:	str	r2, [sp, #88]	; 0x58
   19790:	str	r1, [sp, #92]	; 0x5c
   19794:	rsb	r1, r3, r2
   19798:	cmp	r1, #17
   1979c:	bgt	1999c <__assert_fail@plt+0x8a24>
   197a0:	cmp	r4, #18
   197a4:	movlt	r0, r4
   197a8:	movge	r0, #18
   197ac:	sub	ip, r7, #4
   197b0:	add	lr, r3, r0
   197b4:	add	ip, r2, ip
   197b8:	cmp	lr, ip
   197bc:	addhi	r1, r1, r7
   197c0:	subhi	r0, r1, #4
   197c4:	rsb	r1, r2, r3
   197c8:	add	r1, r1, r0
   197cc:	cmp	r1, #0
   197d0:	ble	1999c <__assert_fail@plt+0x8a24>
   197d4:	rsb	r5, r1, r7
   197d8:	ldr	r0, [sp, #92]	; 0x5c
   197dc:	add	r2, r2, r1
   197e0:	str	r2, [sp, #88]	; 0x58
   197e4:	mov	r6, r5
   197e8:	add	r1, r0, r1
   197ec:	str	r1, [sp, #92]	; 0x5c
   197f0:	add	r1, r2, r6
   197f4:	cmp	r9, r1
   197f8:	bcs	19710 <__assert_fail@plt+0x8798>
   197fc:	add	r1, r3, r4
   19800:	str	fp, [sp, #4]
   19804:	cmp	r2, r1
   19808:	add	r0, sp, #72	; 0x48
   1980c:	rsbcc	r4, r3, r2
   19810:	ldr	r2, [sp, #84]	; 0x54
   19814:	add	r1, sp, #80	; 0x50
   19818:	mov	r3, r4
   1981c:	ldr	r4, [sp, #32]
   19820:	str	r2, [sp]
   19824:	add	r2, sp, #76	; 0x4c
   19828:	str	r4, [sp, #8]
   1982c:	ldr	r4, [sp, #80]	; 0x50
   19830:	bl	18748 <__assert_fail@plt+0x77d0>
   19834:	cmp	r0, #0
   19838:	bne	19878 <__assert_fail@plt+0x8900>
   1983c:	ldr	r4, [sp, #32]
   19840:	add	r2, sp, #76	; 0x4c
   19844:	ldr	ip, [sp, #92]	; 0x5c
   19848:	mov	r3, r5
   1984c:	ldr	lr, [sp, #88]	; 0x58
   19850:	add	r0, sp, #72	; 0x48
   19854:	str	r4, [sp, #8]
   19858:	add	r1, sp, #80	; 0x50
   1985c:	str	fp, [sp, #4]
   19860:	str	ip, [sp]
   19864:	str	lr, [sp, #72]	; 0x48
   19868:	ldr	r4, [sp, #80]	; 0x50
   1986c:	bl	18748 <__assert_fail@plt+0x77d0>
   19870:	cmp	r0, #0
   19874:	beq	19618 <__assert_fail@plt+0x86a0>
   19878:	ldr	ip, [sp, #160]	; 0xa0
   1987c:	ldr	r7, [sp, #64]	; 0x40
   19880:	cmp	ip, #2
   19884:	bne	19634 <__assert_fail@plt+0x86bc>
   19888:	ldr	ip, [sp, #60]	; 0x3c
   1988c:	movw	r1, #32897	; 0x8081
   19890:	ldr	r2, [sp, #76]	; 0x4c
   19894:	movt	r1, #32896	; 0x8080
   19898:	str	r4, [sp, #80]	; 0x50
   1989c:	rsb	r5, r2, ip
   198a0:	add	r0, r5, #240	; 0xf0
   198a4:	add	r3, r5, #1
   198a8:	umull	ip, r1, r1, r0
   198ac:	add	r3, r3, r1, lsr #7
   198b0:	ldr	ip, [sp, #32]
   198b4:	add	ip, ip, #5
   198b8:	str	ip, [sp, #32]
   198bc:	ldr	ip, [sp, #32]
   198c0:	add	r3, r4, r3
   198c4:	cmp	ip, r3
   198c8:	bcs	1967c <__assert_fail@plt+0x8704>
   198cc:	ldr	ip, [sp, #160]	; 0xa0
   198d0:	cmp	ip, #1
   198d4:	beq	19634 <__assert_fail@plt+0x86bc>
   198d8:	ldr	ip, [sp, #32]
   198dc:	movw	r3, #32897	; 0x8081
   198e0:	movt	r3, #32896	; 0x8080
   198e4:	rsb	r1, r4, ip
   198e8:	add	r0, r1, #239	; 0xef
   198ec:	sub	r1, r1, #1
   198f0:	umull	lr, r3, r3, r0
   198f4:	sub	r5, r1, r3, lsr #7
   198f8:	b	1967c <__assert_fail@plt+0x8704>
   198fc:	add	ip, sp, #92	; 0x5c
   19900:	str	ip, [sp, #4]
   19904:	ldr	ip, [sp, #40]	; 0x28
   19908:	sub	r1, r4, #2
   1990c:	add	lr, sp, #88	; 0x58
   19910:	str	r4, [sp]
   19914:	add	r1, r2, r1
   19918:	str	lr, [sp, #8]
   1991c:	str	ip, [sp, #12]
   19920:	mov	r0, r8
   19924:	ldr	ip, [sp, #52]	; 0x34
   19928:	ldr	r3, [sp, #56]	; 0x38
   1992c:	str	sl, [sp, #20]
   19930:	str	ip, [sp, #16]
   19934:	ldr	ip, [sp, #164]	; 0xa4
   19938:	str	sl, [sp, #28]
   1993c:	str	ip, [sp, #24]
   19940:	bl	17d60 <__assert_fail@plt+0x6de8>
   19944:	cmp	r4, r0
   19948:	mov	r7, r0
   1994c:	beq	195e4 <__assert_fail@plt+0x866c>
   19950:	ldr	r3, [sp, #72]	; 0x48
   19954:	ldr	r2, [sp, #88]	; 0x58
   19958:	cmp	r3, r6
   1995c:	bls	1997c <__assert_fail@plt+0x8a04>
   19960:	add	r1, r3, r5
   19964:	cmp	r2, r1
   19968:	strcc	r6, [sp, #72]	; 0x48
   1996c:	ldrcc	r4, [sp, #68]	; 0x44
   19970:	movcc	r3, r6
   19974:	strcc	r4, [sp, #84]	; 0x54
   19978:	movcc	r4, r5
   1997c:	rsb	r1, r3, r2
   19980:	cmp	r1, #2
   19984:	bgt	19798 <__assert_fail@plt+0x8820>
   19988:	ldr	r3, [sp, #92]	; 0x5c
   1998c:	mov	r4, r7
   19990:	str	r2, [sp, #72]	; 0x48
   19994:	str	r3, [sp, #84]	; 0x54
   19998:	b	195d8 <__assert_fail@plt+0x8660>
   1999c:	mov	r6, r7
   199a0:	mov	r5, r7
   199a4:	b	197f0 <__assert_fail@plt+0x8878>
   199a8:	ldr	r2, [sp, #88]	; 0x58
   199ac:	add	r1, r3, r4
   199b0:	cmp	r2, r1
   199b4:	bcs	19a10 <__assert_fail@plt+0x8a98>
   199b8:	rsb	r1, r3, r2
   199bc:	cmp	r1, #17
   199c0:	movgt	r4, r1
   199c4:	bgt	19a10 <__assert_fail@plt+0x8a98>
   199c8:	cmp	r4, #18
   199cc:	movge	r4, #18
   199d0:	sub	r6, r6, #4
   199d4:	add	r0, r3, r4
   199d8:	add	r6, r2, r6
   199dc:	cmp	r0, r6
   199e0:	rsb	r3, r2, r3
   199e4:	addhi	r1, r5, r1
   199e8:	subhi	r4, r1, #4
   199ec:	add	r3, r3, r4
   199f0:	cmp	r3, #0
   199f4:	ble	19a10 <__assert_fail@plt+0x8a98>
   199f8:	ldr	r1, [sp, #92]	; 0x5c
   199fc:	add	r2, r2, r3
   19a00:	rsb	r5, r3, r5
   19a04:	str	r2, [sp, #88]	; 0x58
   19a08:	add	r3, r1, r3
   19a0c:	str	r3, [sp, #92]	; 0x5c
   19a10:	ldr	r2, [sp, #84]	; 0x54
   19a14:	mov	r3, r4
   19a18:	ldr	r4, [sp, #32]
   19a1c:	add	r0, sp, #72	; 0x48
   19a20:	str	fp, [sp, #4]
   19a24:	add	r1, sp, #80	; 0x50
   19a28:	str	r2, [sp]
   19a2c:	add	r2, sp, #76	; 0x4c
   19a30:	str	r4, [sp, #8]
   19a34:	ldr	r4, [sp, #80]	; 0x50
   19a38:	bl	18748 <__assert_fail@plt+0x77d0>
   19a3c:	cmp	r0, #0
   19a40:	bne	19878 <__assert_fail@plt+0x8900>
   19a44:	ldr	r2, [sp, #92]	; 0x5c
   19a48:	mov	r4, r5
   19a4c:	ldr	r3, [sp, #88]	; 0x58
   19a50:	ldr	r1, [sp, #96]	; 0x60
   19a54:	ldr	r0, [sp, #100]	; 0x64
   19a58:	str	r2, [sp, #84]	; 0x54
   19a5c:	str	r3, [sp, #72]	; 0x48
   19a60:	mov	r2, r1
   19a64:	str	r1, [sp, #88]	; 0x58
   19a68:	str	r0, [sp, #92]	; 0x5c
   19a6c:	b	19794 <__assert_fail@plt+0x881c>
   19a70:	add	r2, r4, #1
   19a74:	lsl	r3, r5, #4
   19a78:	str	r2, [sp, #80]	; 0x50
   19a7c:	strb	r3, [r4]
   19a80:	b	196d8 <__assert_fail@plt+0x8760>
   19a84:	ldr	r3, [sp, #88]	; 0x58
   19a88:	cmp	r3, r1
   19a8c:	bcc	19ae8 <__assert_fail@plt+0x8b70>
   19a90:	ldr	r2, [sp, #84]	; 0x54
   19a94:	mov	r3, r4
   19a98:	ldr	ip, [sp, #32]
   19a9c:	add	r0, sp, #72	; 0x48
   19aa0:	str	fp, [sp, #4]
   19aa4:	add	r1, sp, #80	; 0x50
   19aa8:	str	r2, [sp]
   19aac:	add	r2, sp, #76	; 0x4c
   19ab0:	str	ip, [sp, #8]
   19ab4:	ldr	r4, [sp, #80]	; 0x50
   19ab8:	bl	18748 <__assert_fail@plt+0x77d0>
   19abc:	cmp	r0, #0
   19ac0:	bne	19878 <__assert_fail@plt+0x8900>
   19ac4:	ldr	r2, [sp, #96]	; 0x60
   19ac8:	mov	r4, r7
   19acc:	ldr	r3, [sp, #100]	; 0x64
   19ad0:	ldr	ip, [sp, #92]	; 0x5c
   19ad4:	ldr	r6, [sp, #88]	; 0x58
   19ad8:	str	r2, [sp, #72]	; 0x48
   19adc:	str	r3, [sp, #84]	; 0x54
   19ae0:	str	ip, [sp, #68]	; 0x44
   19ae4:	b	195d8 <__assert_fail@plt+0x8660>
   19ae8:	rsb	r3, r3, r1
   19aec:	str	r1, [sp, #88]	; 0x58
   19af0:	rsb	r5, r3, r5
   19af4:	ldr	r1, [sp, #92]	; 0x5c
   19af8:	cmp	r5, #3
   19afc:	strle	r2, [sp, #88]	; 0x58
   19b00:	add	r3, r1, r3
   19b04:	str	r3, [sp, #92]	; 0x5c
   19b08:	ldrle	r3, [sp, #100]	; 0x64
   19b0c:	movle	r5, r0
   19b10:	strle	r3, [sp, #92]	; 0x5c
   19b14:	b	19a90 <__assert_fail@plt+0x8b18>
   19b18:	bl	10db0 <__stack_chk_fail@plt>
   19b1c:	ldr	r2, [sp, #88]	; 0x58
   19b20:	b	197fc <__assert_fail@plt+0x8884>
   19b24:	mov	ip, #28
   19b28:	movt	ip, #4
   19b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b30:	mov	r4, r0
   19b34:	ldr	r5, [r0, ip]
   19b38:	sub	sp, sp, #20
   19b3c:	mov	sl, r1
   19b40:	mov	fp, r2
   19b44:	cmp	r5, #0
   19b48:	mov	r9, r3
   19b4c:	beq	19c74 <__assert_fail@plt+0x8cfc>
   19b50:	add	r7, r0, #262144	; 0x40000
   19b54:	mov	r8, #262144	; 0x40000
   19b58:	mov	r6, #16
   19b5c:	movt	r6, #4
   19b60:	ldr	r7, [r7, #4]
   19b64:	ldr	r8, [r0, r8]
   19b68:	ldr	r6, [r0, r6]
   19b6c:	rsb	r7, r7, r8
   19b70:	rsb	r7, r6, r7
   19b74:	cmp	r7, #65536	; 0x10000
   19b78:	bcc	19bac <__assert_fail@plt+0x8c34>
   19b7c:	ldr	r5, [sp, #56]	; 0x38
   19b80:	ldr	r7, [sp, #64]	; 0x40
   19b84:	cmp	r5, #0
   19b88:	cmple	r7, #2
   19b8c:	mov	r5, #0
   19b90:	str	r5, [r0, ip]
   19b94:	movne	r6, #0
   19b98:	moveq	r6, #1
   19b9c:	bne	19cb4 <__assert_fail@plt+0x8d3c>
   19ba0:	mov	r0, #0
   19ba4:	add	sp, sp, #20
   19ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bac:	cmp	r7, #0
   19bb0:	bne	19c30 <__assert_fail@plt+0x8cb8>
   19bb4:	ldr	r3, [r3]
   19bb8:	cmp	r3, #4096	; 0x1000
   19bbc:	ble	19c30 <__assert_fail@plt+0x8cb8>
   19bc0:	mov	r1, r5
   19bc4:	mov	r2, #32
   19bc8:	movt	r2, #4
   19bcc:	bl	10d74 <memcpy@plt>
   19bd0:	mov	r0, r4
   19bd4:	mov	r1, sl
   19bd8:	bl	17aac <__assert_fail@plt+0x6b34>
   19bdc:	ldr	r5, [sp, #56]	; 0x38
   19be0:	ldr	r6, [sp, #64]	; 0x40
   19be4:	mov	r3, #24
   19be8:	ldr	r7, [sp, #60]	; 0x3c
   19bec:	movt	r3, #4
   19bf0:	cmp	r5, #0
   19bf4:	cmple	r6, #2
   19bf8:	strh	r7, [r4, r3]
   19bfc:	movne	ip, #0
   19c00:	moveq	ip, #1
   19c04:	beq	19ba0 <__assert_fail@plt+0x8c28>
   19c08:	str	r5, [sp]
   19c0c:	mov	r0, r4
   19c10:	str	r7, [sp, #4]
   19c14:	mov	r1, sl
   19c18:	str	r6, [sp, #8]
   19c1c:	mov	r2, fp
   19c20:	str	ip, [sp, #12]
   19c24:	mov	r3, r9
   19c28:	bl	193c4 <__assert_fail@plt+0x844c>
   19c2c:	b	19ba4 <__assert_fail@plt+0x8c2c>
   19c30:	ldr	ip, [sp, #56]	; 0x38
   19c34:	ldr	r5, [sp, #64]	; 0x40
   19c38:	cmp	ip, #0
   19c3c:	cmple	r5, #2
   19c40:	beq	19ba0 <__assert_fail@plt+0x8c28>
   19c44:	ldr	r6, [sp, #60]	; 0x3c
   19c48:	mov	r0, r4
   19c4c:	str	ip, [sp]
   19c50:	mov	r1, sl
   19c54:	mov	ip, #1
   19c58:	str	r5, [sp, #8]
   19c5c:	str	r6, [sp, #4]
   19c60:	mov	r2, fp
   19c64:	mov	r3, r9
   19c68:	str	ip, [sp, #12]
   19c6c:	bl	193c4 <__assert_fail@plt+0x844c>
   19c70:	b	19ba4 <__assert_fail@plt+0x8c2c>
   19c74:	ldr	r4, [sp, #56]	; 0x38
   19c78:	ldr	r6, [sp, #64]	; 0x40
   19c7c:	cmp	r4, #0
   19c80:	cmple	r6, #2
   19c84:	movne	ip, #0
   19c88:	moveq	ip, #1
   19c8c:	moveq	r0, r5
   19c90:	beq	19ba4 <__assert_fail@plt+0x8c2c>
   19c94:	ldr	r7, [sp, #60]	; 0x3c
   19c98:	str	r4, [sp]
   19c9c:	str	r6, [sp, #8]
   19ca0:	str	r7, [sp, #4]
   19ca4:	str	ip, [sp, #12]
   19ca8:	bl	193c4 <__assert_fail@plt+0x844c>
   19cac:	add	sp, sp, #20
   19cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cb4:	ldr	ip, [sp, #56]	; 0x38
   19cb8:	ldr	lr, [sp, #60]	; 0x3c
   19cbc:	ldr	r4, [sp, #64]	; 0x40
   19cc0:	str	ip, [sp]
   19cc4:	str	lr, [sp, #4]
   19cc8:	str	r4, [sp, #8]
   19ccc:	str	r6, [sp, #12]
   19cd0:	bl	193c4 <__assert_fail@plt+0x844c>
   19cd4:	add	sp, sp, #20
   19cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cdc:	mov	r0, #56	; 0x38
   19ce0:	movt	r0, #4
   19ce4:	bx	lr
   19ce8:	push	{r4, r5, r6, r7, r8, lr}
   19cec:	mov	r4, r0
   19cf0:	sub	sp, sp, #24
   19cf4:	ands	r0, r0, #3
   19cf8:	mov	r7, r1
   19cfc:	mov	r8, r2
   19d00:	str	r3, [sp, #20]
   19d04:	movne	r0, #0
   19d08:	ldr	r6, [sp, #48]	; 0x30
   19d0c:	ldr	r5, [sp, #52]	; 0x34
   19d10:	bne	19da4 <__assert_fail@plt+0x8e2c>
   19d14:	add	r3, r4, #262144	; 0x40000
   19d18:	mov	r1, #262144	; 0x40000
   19d1c:	ldr	lr, [r4, r1]
   19d20:	cmp	r5, #0
   19d24:	ldr	ip, [r3, #4]
   19d28:	mov	r2, r3
   19d2c:	mov	r3, #28
   19d30:	movt	r3, #4
   19d34:	rsb	ip, ip, lr
   19d38:	str	ip, [r4, r1]
   19d3c:	str	r0, [r2, #4]
   19d40:	movle	r2, #9
   19d44:	str	r0, [r4, r3]
   19d48:	ble	19d58 <__assert_fail@plt+0x8de0>
   19d4c:	cmp	r5, #12
   19d50:	uxthle	r2, r5
   19d54:	movgt	r2, #12
   19d58:	mov	r3, #24
   19d5c:	movt	r3, #4
   19d60:	mov	r1, r7
   19d64:	mov	r0, r4
   19d68:	strh	r2, [r4, r3]
   19d6c:	bl	17b48 <__assert_fail@plt+0x6bd0>
   19d70:	ldr	r0, [sp, #20]
   19d74:	bl	14260 <__assert_fail@plt+0x32e8>
   19d78:	str	r6, [sp]
   19d7c:	str	r5, [sp, #4]
   19d80:	mov	r1, r7
   19d84:	mov	r2, r8
   19d88:	add	r3, sp, #20
   19d8c:	cmp	r0, r6
   19d90:	mov	r0, r4
   19d94:	movgt	ip, #1
   19d98:	movle	ip, #0
   19d9c:	str	ip, [sp, #8]
   19da0:	bl	19b24 <__assert_fail@plt+0x8bac>
   19da4:	add	sp, sp, #24
   19da8:	pop	{r4, r5, r6, r7, r8, pc}
   19dac:	push	{r4, r5, r6, r7, r8, r9}
   19db0:	mov	ip, #4
   19db4:	ldr	r5, [sp, #28]
   19db8:	mov	r7, #28
   19dbc:	bfi	ip, ip, #16, #16
   19dc0:	movt	r7, #4
   19dc4:	mov	r6, #26
   19dc8:	cmp	r5, #0
   19dcc:	movt	r6, #4
   19dd0:	mov	r8, #262144	; 0x40000
   19dd4:	mov	r4, #0
   19dd8:	mvn	r9, #0
   19ddc:	str	r9, [r0, r8]
   19de0:	str	r4, [r0, ip]
   19de4:	ldr	r8, [sp, #24]
   19de8:	str	r4, [r0, r7]
   19dec:	strh	r4, [r0, r6]
   19df0:	movle	r4, #9
   19df4:	ble	19e04 <__assert_fail@plt+0x8e8c>
   19df8:	cmp	r5, #12
   19dfc:	uxthle	r4, r5
   19e00:	movgt	r4, #12
   19e04:	mov	ip, #24
   19e08:	movt	ip, #4
   19e0c:	strh	r4, [r0, ip]
   19e10:	str	r8, [sp, #24]
   19e14:	str	r5, [sp, #28]
   19e18:	pop	{r4, r5, r6, r7, r8, r9}
   19e1c:	b	19ce8 <__assert_fail@plt+0x8d70>
   19e20:	tst	r0, #3
   19e24:	push	{r4}		; (str r4, [sp, #-4]!)
   19e28:	bne	19e34 <__assert_fail@plt+0x8ebc>
   19e2c:	pop	{r4}		; (ldr r4, [sp], #4)
   19e30:	b	19dac <__assert_fail@plt+0x8e34>
   19e34:	mov	r0, #0
   19e38:	pop	{r4}		; (ldr r4, [sp], #4)
   19e3c:	bx	lr
   19e40:	push	{r4, r5, r6, r7, r8, r9, lr}
   19e44:	sub	sp, sp, #12
   19e48:	mov	r8, r0
   19e4c:	mov	r0, #56	; 0x38
   19e50:	movt	r0, #4
   19e54:	ldr	r4, [sp, #40]	; 0x28
   19e58:	mov	r7, r1
   19e5c:	mov	r6, r2
   19e60:	mov	r9, r3
   19e64:	bl	10e1c <malloc@plt>
   19e68:	mov	r1, r8
   19e6c:	str	r4, [sp, #4]
   19e70:	mov	r2, r7
   19e74:	mov	r3, r6
   19e78:	str	r9, [sp]
   19e7c:	mov	r5, r0
   19e80:	bl	19dac <__assert_fail@plt+0x8e34>
   19e84:	mov	r4, r0
   19e88:	mov	r0, r5
   19e8c:	bl	10d44 <free@plt>
   19e90:	mov	r0, r4
   19e94:	add	sp, sp, #12
   19e98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19e9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ea0:	sub	sp, sp, #16
   19ea4:	mov	ip, #4
   19ea8:	mov	r7, #28
   19eac:	ldr	r5, [sp, #52]	; 0x34
   19eb0:	bfi	ip, ip, #16, #16
   19eb4:	movt	r7, #4
   19eb8:	mov	lr, #26
   19ebc:	cmp	r5, #0
   19ec0:	movt	lr, #4
   19ec4:	mov	r4, r0
   19ec8:	mov	r8, #262144	; 0x40000
   19ecc:	mov	r0, #0
   19ed0:	mov	sl, r2
   19ed4:	mov	r9, r3
   19ed8:	mov	r6, r1
   19edc:	mvn	r3, #0
   19ee0:	movle	r2, #9
   19ee4:	str	r3, [r4, r8]
   19ee8:	str	r0, [r4, ip]
   19eec:	ldr	r8, [sp, #48]	; 0x30
   19ef0:	str	r0, [r4, r7]
   19ef4:	strh	r0, [r4, lr]
   19ef8:	ble	19f08 <__assert_fail@plt+0x8f90>
   19efc:	cmp	r5, #12
   19f00:	uxthle	r2, r5
   19f04:	movgt	r2, #12
   19f08:	mov	r3, #24
   19f0c:	movt	r3, #4
   19f10:	mov	r0, r4
   19f14:	mov	r1, r6
   19f18:	strh	r2, [r4, r3]
   19f1c:	bl	17b48 <__assert_fail@plt+0x6bd0>
   19f20:	mov	ip, #2
   19f24:	str	r8, [sp]
   19f28:	mov	r0, r4
   19f2c:	str	r5, [sp, #4]
   19f30:	mov	r1, r6
   19f34:	mov	r2, sl
   19f38:	mov	r3, r9
   19f3c:	str	ip, [sp, #8]
   19f40:	bl	19b24 <__assert_fail@plt+0x8bac>
   19f44:	add	sp, sp, #16
   19f48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f4c:	push	{r4, r5, r6, lr}
   19f50:	mov	r0, #56	; 0x38
   19f54:	movt	r0, #4
   19f58:	bl	10e1c <malloc@plt>
   19f5c:	cmp	r0, #0
   19f60:	popeq	{r4, r5, r6, pc}
   19f64:	mov	r2, #4
   19f68:	mov	r4, #28
   19f6c:	bfi	r2, r2, #16, #16
   19f70:	movt	r4, #4
   19f74:	mov	ip, #26
   19f78:	mov	r1, #24
   19f7c:	movt	ip, #4
   19f80:	movt	r1, #4
   19f84:	mov	r5, #262144	; 0x40000
   19f88:	mov	r3, #0
   19f8c:	mvn	r6, #0
   19f90:	str	r6, [r0, r5]
   19f94:	str	r3, [r0, r2]
   19f98:	mov	r5, #9
   19f9c:	str	r3, [r0, r4]
   19fa0:	strh	r3, [r0, ip]
   19fa4:	strh	r5, [r0, r1]
   19fa8:	pop	{r4, r5, r6, pc}
   19fac:	cmp	r0, #0
   19fb0:	push	{r3, lr}
   19fb4:	beq	19fbc <__assert_fail@plt+0x9044>
   19fb8:	bl	10d44 <free@plt>
   19fbc:	mov	r0, #0
   19fc0:	pop	{r3, pc}
   19fc4:	push	{r4, r5, r6}
   19fc8:	cmp	r1, #0
   19fcc:	mov	r3, #4
   19fd0:	mov	r4, #28
   19fd4:	bfi	r3, r3, #16, #16
   19fd8:	movt	r4, #4
   19fdc:	mov	ip, #26
   19fe0:	movt	ip, #4
   19fe4:	mov	r5, #262144	; 0x40000
   19fe8:	mov	r2, #0
   19fec:	mvn	r6, #0
   19ff0:	str	r6, [r0, r5]
   19ff4:	str	r2, [r0, r3]
   19ff8:	str	r2, [r0, r4]
   19ffc:	strh	r2, [r0, ip]
   1a000:	movle	r2, #9
   1a004:	ble	1a014 <__assert_fail@plt+0x909c>
   1a008:	cmp	r1, #12
   1a00c:	uxthle	r2, r1
   1a010:	movgt	r2, #12
   1a014:	mov	r3, #24
   1a018:	movt	r3, #4
   1a01c:	strh	r2, [r0, r3]
   1a020:	pop	{r4, r5, r6}
   1a024:	bx	lr
   1a028:	add	r3, r0, #262144	; 0x40000
   1a02c:	mov	r2, #262144	; 0x40000
   1a030:	push	{r4, r5}
   1a034:	cmp	r1, #0
   1a038:	ldr	r4, [r3, #4]
   1a03c:	mov	ip, #28
   1a040:	ldr	r5, [r0, r2]
   1a044:	mov	r3, #4
   1a048:	movt	ip, #4
   1a04c:	bfi	r3, r3, #16, #16
   1a050:	rsb	r5, r4, r5
   1a054:	mov	r4, #0
   1a058:	str	r5, [r0, r2]
   1a05c:	movle	r2, #9
   1a060:	str	r4, [r0, r3]
   1a064:	str	r4, [r0, ip]
   1a068:	ble	1a078 <__assert_fail@plt+0x9100>
   1a06c:	cmp	r1, #12
   1a070:	uxthle	r2, r1
   1a074:	movgt	r2, #12
   1a078:	mov	r3, #24
   1a07c:	movt	r3, #4
   1a080:	strh	r2, [r0, r3]
   1a084:	pop	{r4, r5}
   1a088:	bx	lr
   1a08c:	cmp	r1, #0
   1a090:	movle	r2, #9
   1a094:	ble	1a0a4 <__assert_fail@plt+0x912c>
   1a098:	cmp	r1, #12
   1a09c:	uxthle	r2, r1
   1a0a0:	movgt	r2, #12
   1a0a4:	mov	r3, #24
   1a0a8:	movt	r3, #4
   1a0ac:	strh	r2, [r0, r3]
   1a0b0:	bx	lr
   1a0b4:	adds	r1, r1, #0
   1a0b8:	mov	r3, #26
   1a0bc:	movt	r3, #4
   1a0c0:	movne	r1, #1
   1a0c4:	strh	r1, [r0, r3]
   1a0c8:	bx	lr
   1a0cc:	cmp	r2, #65536	; 0x10000
   1a0d0:	mov	ip, #26
   1a0d4:	subgt	r3, r2, #65536	; 0x10000
   1a0d8:	movt	ip, #4
   1a0dc:	push	{r4, r5, r6, r7, r8, lr}
   1a0e0:	mov	r6, r1
   1a0e4:	addgt	r6, r1, r3
   1a0e8:	mov	r3, #24
   1a0ec:	movt	r3, #4
   1a0f0:	mov	r4, r0
   1a0f4:	mov	r5, r2
   1a0f8:	mov	r0, #4
   1a0fc:	ldrh	r3, [r4, r3]
   1a100:	movgt	r5, #65536	; 0x10000
   1a104:	mov	lr, #28
   1a108:	bfi	r0, r0, #16, #16
   1a10c:	movt	lr, #4
   1a110:	mov	r2, #262144	; 0x40000
   1a114:	sxth	r1, r3
   1a118:	mvn	r8, #0
   1a11c:	cmp	r1, #0
   1a120:	str	r8, [r4, r2]
   1a124:	mov	r7, r5
   1a128:	mov	r2, #0
   1a12c:	movle	r3, #9
   1a130:	str	r2, [r4, r0]
   1a134:	str	r2, [r4, lr]
   1a138:	strh	r2, [r4, ip]
   1a13c:	ble	1a14c <__assert_fail@plt+0x91d4>
   1a140:	cmp	r1, #12
   1a144:	uxthle	r3, r3
   1a148:	movgt	r3, #12
   1a14c:	mov	r2, #24
   1a150:	movt	r2, #4
   1a154:	mov	r1, r6
   1a158:	mov	r0, r4
   1a15c:	strh	r3, [r4, r2]
   1a160:	bl	17b48 <__assert_fail@plt+0x6bd0>
   1a164:	cmp	r5, #3
   1a168:	mov	r3, #262144	; 0x40000
   1a16c:	add	r1, r6, r7
   1a170:	str	r1, [r4, r3]
   1a174:	ble	1a184 <__assert_fail@plt+0x920c>
   1a178:	mov	r0, r4
   1a17c:	sub	r1, r1, #3
   1a180:	bl	17a2c <__assert_fail@plt+0x6ab4>
   1a184:	mov	r0, r5
   1a188:	pop	{r4, r5, r6, r7, r8, pc}
   1a18c:	add	ip, r0, #262144	; 0x40000
   1a190:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a194:	mov	r7, r2
   1a198:	ldr	r2, [ip, #4]
   1a19c:	sub	sp, sp, #16
   1a1a0:	mov	r4, r0
   1a1a4:	mov	r9, r3
   1a1a8:	cmp	r2, #0
   1a1ac:	mov	r5, r1
   1a1b0:	ldr	r8, [sp, #48]	; 0x30
   1a1b4:	ldr	r6, [sp, #52]	; 0x34
   1a1b8:	beq	1a2ac <__assert_fail@plt+0x9334>
   1a1bc:	mov	sl, #262144	; 0x40000
   1a1c0:	ldr	r1, [r4, sl]
   1a1c4:	rsb	r2, r2, r1
   1a1c8:	cmp	r2, #-2147483648	; 0x80000000
   1a1cc:	bls	1a1f8 <__assert_fail@plt+0x9280>
   1a1d0:	mov	r3, #12
   1a1d4:	movt	r3, #4
   1a1d8:	mov	r0, r4
   1a1dc:	ldr	r3, [r4, r3]
   1a1e0:	rsb	r2, r3, r2
   1a1e4:	cmp	r2, #65536	; 0x10000
   1a1e8:	movcs	r2, #65536	; 0x10000
   1a1ec:	rsb	r1, r2, r1
   1a1f0:	bl	1a0cc <__assert_fail@plt+0x9154>
   1a1f4:	ldr	r1, [r4, sl]
   1a1f8:	cmp	r5, r1
   1a1fc:	beq	1a20c <__assert_fail@plt+0x9294>
   1a200:	mov	r0, r4
   1a204:	mov	r1, r5
   1a208:	bl	17aac <__assert_fail@plt+0x6b34>
   1a20c:	mov	r2, #8
   1a210:	mov	r1, #16
   1a214:	movt	r2, #4
   1a218:	movt	r1, #4
   1a21c:	mov	r3, #12
   1a220:	ldr	ip, [r9]
   1a224:	ldr	r0, [r4, r2]
   1a228:	movt	r3, #4
   1a22c:	ldr	lr, [r4, r1]
   1a230:	add	ip, r5, ip
   1a234:	ldr	r2, [r4, r3]
   1a238:	add	lr, r0, lr
   1a23c:	cmp	ip, lr
   1a240:	add	r3, r0, r2
   1a244:	movls	lr, #0
   1a248:	movhi	lr, #1
   1a24c:	cmp	r5, r3
   1a250:	movcs	lr, #0
   1a254:	cmp	lr, #0
   1a258:	beq	1a278 <__assert_fail@plt+0x9300>
   1a25c:	cmp	ip, r3
   1a260:	rsbls	r0, r0, ip
   1a264:	rsbhi	r0, r0, r3
   1a268:	rsb	r3, r0, r2
   1a26c:	cmp	r3, #3
   1a270:	movls	r0, r2
   1a274:	str	r0, [r4, r1]
   1a278:	mov	r3, #24
   1a27c:	movt	r3, #4
   1a280:	str	r8, [sp]
   1a284:	mov	r1, r5
   1a288:	ldrsh	ip, [r4, r3]
   1a28c:	mov	r2, r7
   1a290:	mov	r3, r9
   1a294:	str	r6, [sp, #8]
   1a298:	mov	r0, r4
   1a29c:	str	ip, [sp, #4]
   1a2a0:	bl	19b24 <__assert_fail@plt+0x8bac>
   1a2a4:	add	sp, sp, #16
   1a2a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a2ac:	bl	17b48 <__assert_fail@plt+0x6bd0>
   1a2b0:	add	r3, r4, #262144	; 0x40000
   1a2b4:	ldr	r2, [r3, #4]
   1a2b8:	b	1a1bc <__assert_fail@plt+0x9244>
   1a2bc:	mov	r3, #28
   1a2c0:	movt	r3, #4
   1a2c4:	str	r1, [r0, r3]
   1a2c8:	bx	lr
   1a2cc:	push	{r4, r5, r6, r7, lr}
   1a2d0:	sub	sp, sp, #20
   1a2d4:	mov	r5, r0
   1a2d8:	mov	r0, r3
   1a2dc:	ldr	r4, [sp, #40]	; 0x28
   1a2e0:	mov	r7, r1
   1a2e4:	mov	r6, r2
   1a2e8:	str	r3, [sp, #12]
   1a2ec:	bl	14260 <__assert_fail@plt+0x32e8>
   1a2f0:	mov	r1, r7
   1a2f4:	str	r4, [sp]
   1a2f8:	mov	r2, r6
   1a2fc:	add	r3, sp, #12
   1a300:	cmp	r0, r4
   1a304:	mov	r0, r5
   1a308:	movgt	ip, #1
   1a30c:	movle	ip, #0
   1a310:	str	ip, [sp, #4]
   1a314:	bl	1a18c <__assert_fail@plt+0x9214>
   1a318:	add	sp, sp, #20
   1a31c:	pop	{r4, r5, r6, r7, pc}
   1a320:	push	{lr}		; (str lr, [sp, #-4]!)
   1a324:	sub	sp, sp, #12
   1a328:	mov	lr, #2
   1a32c:	ldr	ip, [sp, #16]
   1a330:	stm	sp, {ip, lr}
   1a334:	bl	1a18c <__assert_fail@plt+0x9214>
   1a338:	add	sp, sp, #12
   1a33c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a340:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1a344:	add	ip, r0, #262144	; 0x40000
   1a348:	mov	r3, #12
   1a34c:	movt	r3, #4
   1a350:	mov	r4, r0
   1a354:	ldr	r5, [ip, #4]
   1a358:	mov	r0, #262144	; 0x40000
   1a35c:	ldr	r3, [r4, r3]
   1a360:	cmp	r2, #65536	; 0x10000
   1a364:	mov	ip, r1
   1a368:	ldr	r1, [r4, r0]
   1a36c:	add	r5, r5, r3
   1a370:	movgt	r2, #65536	; 0x10000
   1a374:	rsb	r5, r5, r1
   1a378:	bgt	1a384 <__assert_fail@plt+0x940c>
   1a37c:	cmp	r2, #3
   1a380:	movle	r2, #0
   1a384:	cmp	r5, r2
   1a388:	movge	r5, r2
   1a38c:	mov	r0, ip
   1a390:	rsb	r1, r5, r1
   1a394:	mov	r7, #262144	; 0x40000
   1a398:	mov	r2, r5
   1a39c:	add	r8, r4, r7
   1a3a0:	bl	10d38 <memmove@plt>
   1a3a4:	add	r3, r4, #262144	; 0x40000
   1a3a8:	ldr	r6, [r4, r7]
   1a3ac:	mov	r2, #20
   1a3b0:	ldr	r3, [r3, #4]
   1a3b4:	movt	r2, #4
   1a3b8:	mov	r1, #16
   1a3bc:	movt	r1, #4
   1a3c0:	ldr	r9, [r4, r2]
   1a3c4:	rsb	r6, r3, r6
   1a3c8:	rsb	r3, r5, r6
   1a3cc:	cmp	r3, r9
   1a3d0:	mov	ip, r0
   1a3d4:	mov	r0, #12
   1a3d8:	movt	r0, #4
   1a3dc:	add	ip, ip, r5
   1a3e0:	str	ip, [r4, r7]
   1a3e4:	rsb	ip, r6, ip
   1a3e8:	str	ip, [r8, #4]
   1a3ec:	str	r3, [r4, r0]
   1a3f0:	mov	r0, r5
   1a3f4:	str	r3, [r4, r1]
   1a3f8:	strhi	r3, [r4, r2]
   1a3fc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1a400:	push	{r4, r5, r6, lr}
   1a404:	mov	r5, r0
   1a408:	sub	sp, sp, #8
   1a40c:	mov	r0, r2
   1a410:	mov	r4, r2
   1a414:	mov	r6, r1
   1a418:	bl	14260 <__assert_fail@plt+0x32e8>
   1a41c:	mov	ip, #0
   1a420:	mov	r1, r6
   1a424:	mov	r2, r4
   1a428:	str	ip, [sp]
   1a42c:	mov	r3, r0
   1a430:	mov	r0, r5
   1a434:	bl	19e40 <__assert_fail@plt+0x8ec8>
   1a438:	add	sp, sp, #8
   1a43c:	pop	{r4, r5, r6, pc}
   1a440:	push	{lr}		; (str lr, [sp, #-4]!)
   1a444:	sub	sp, sp, #12
   1a448:	mov	ip, #0
   1a44c:	str	ip, [sp]
   1a450:	bl	19e40 <__assert_fail@plt+0x8ec8>
   1a454:	add	sp, sp, #12
   1a458:	pop	{pc}		; (ldr pc, [sp], #4)
   1a45c:	push	{r4, r5, r6, r7, lr}
   1a460:	mov	r5, r0
   1a464:	sub	sp, sp, #12
   1a468:	mov	r0, r2
   1a46c:	mov	r7, r3
   1a470:	mov	r4, r2
   1a474:	mov	r6, r1
   1a478:	bl	14260 <__assert_fail@plt+0x32e8>
   1a47c:	str	r7, [sp]
   1a480:	mov	r1, r6
   1a484:	mov	r2, r4
   1a488:	mov	r3, r0
   1a48c:	mov	r0, r5
   1a490:	bl	19e40 <__assert_fail@plt+0x8ec8>
   1a494:	add	sp, sp, #12
   1a498:	pop	{r4, r5, r6, r7, pc}
   1a49c:	b	19e40 <__assert_fail@plt+0x8ec8>
   1a4a0:	push	{r4, r5, r6, r7, lr}
   1a4a4:	mov	r4, r0
   1a4a8:	sub	sp, sp, #12
   1a4ac:	mov	r0, r3
   1a4b0:	mov	r5, r3
   1a4b4:	mov	r7, r1
   1a4b8:	mov	r6, r2
   1a4bc:	bl	14260 <__assert_fail@plt+0x32e8>
   1a4c0:	ands	r3, r4, #3
   1a4c4:	movne	r0, #0
   1a4c8:	bne	1a4e8 <__assert_fail@plt+0x9570>
   1a4cc:	str	r0, [sp]
   1a4d0:	mov	r1, r7
   1a4d4:	str	r3, [sp, #4]
   1a4d8:	mov	r0, r4
   1a4dc:	mov	r2, r6
   1a4e0:	mov	r3, r5
   1a4e4:	bl	19dac <__assert_fail@plt+0x8e34>
   1a4e8:	add	sp, sp, #12
   1a4ec:	pop	{r4, r5, r6, r7, pc}
   1a4f0:	ands	ip, r0, #3
   1a4f4:	push	{r4, lr}
   1a4f8:	movne	r0, #0
   1a4fc:	sub	sp, sp, #8
   1a500:	bne	1a510 <__assert_fail@plt+0x9598>
   1a504:	ldr	r4, [sp, #16]
   1a508:	stm	sp, {r4, ip}
   1a50c:	bl	19dac <__assert_fail@plt+0x8e34>
   1a510:	add	sp, sp, #8
   1a514:	pop	{r4, pc}
   1a518:	push	{r4, r5, r6, r7, lr}
   1a51c:	mov	r5, r0
   1a520:	sub	sp, sp, #12
   1a524:	mov	r0, r3
   1a528:	mov	r4, r3
   1a52c:	mov	r7, r1
   1a530:	mov	r6, r2
   1a534:	bl	14260 <__assert_fail@plt+0x32e8>
   1a538:	tst	r5, #3
   1a53c:	movne	r0, #0
   1a540:	bne	1a564 <__assert_fail@plt+0x95ec>
   1a544:	ldr	r3, [sp, #32]
   1a548:	mov	r1, r7
   1a54c:	str	r0, [sp]
   1a550:	mov	r2, r6
   1a554:	mov	r0, r5
   1a558:	str	r3, [sp, #4]
   1a55c:	mov	r3, r4
   1a560:	bl	19dac <__assert_fail@plt+0x8e34>
   1a564:	add	sp, sp, #12
   1a568:	pop	{r4, r5, r6, r7, pc}
   1a56c:	tst	r0, #3
   1a570:	push	{r4}		; (str r4, [sp, #-4]!)
   1a574:	beq	1a584 <__assert_fail@plt+0x960c>
   1a578:	mov	r0, #0
   1a57c:	pop	{r4}		; (ldr r4, [sp], #4)
   1a580:	bx	lr
   1a584:	pop	{r4}		; (ldr r4, [sp], #4)
   1a588:	b	19dac <__assert_fail@plt+0x8e34>
   1a58c:	push	{r4, r5, r6, r7, lr}
   1a590:	mov	r5, r0
   1a594:	sub	sp, sp, #12
   1a598:	mov	r0, r3
   1a59c:	mov	r4, r3
   1a5a0:	mov	r7, r1
   1a5a4:	mov	r6, r2
   1a5a8:	bl	14260 <__assert_fail@plt+0x32e8>
   1a5ac:	mov	r1, r7
   1a5b0:	mov	r2, r6
   1a5b4:	mov	r3, r4
   1a5b8:	str	r0, [sp]
   1a5bc:	mov	r0, r5
   1a5c0:	bl	1a2cc <__assert_fail@plt+0x9354>
   1a5c4:	add	sp, sp, #12
   1a5c8:	pop	{r4, r5, r6, r7, pc}
   1a5cc:	b	1a2cc <__assert_fail@plt+0x9354>
   1a5d0:	mov	r0, #56	; 0x38
   1a5d4:	movt	r0, #4
   1a5d8:	bx	lr
   1a5dc:	ands	r2, r0, #3
   1a5e0:	push	{r3, r4, r5, r6, r7, lr}
   1a5e4:	mov	r3, r0
   1a5e8:	bne	1a65c <__assert_fail@plt+0x96e4>
   1a5ec:	mov	r0, #24
   1a5f0:	movt	r0, #4
   1a5f4:	add	r5, r3, #262144	; 0x40000
   1a5f8:	mov	lr, #28
   1a5fc:	ldrh	ip, [r3, r0]
   1a600:	movt	lr, #4
   1a604:	mov	r0, #26
   1a608:	movt	r0, #4
   1a60c:	mov	r6, #262144	; 0x40000
   1a610:	mvn	r7, #0
   1a614:	sxth	r4, ip
   1a618:	str	r7, [r3, r6]
   1a61c:	cmp	r4, #0
   1a620:	str	r2, [r5, #4]
   1a624:	str	r2, [r3, lr]
   1a628:	movle	ip, #9
   1a62c:	strh	r2, [r3, r0]
   1a630:	ble	1a640 <__assert_fail@plt+0x96c8>
   1a634:	cmp	r4, #12
   1a638:	uxthle	ip, ip
   1a63c:	movgt	ip, #12
   1a640:	mov	r2, #24
   1a644:	movt	r2, #4
   1a648:	mov	r0, r3
   1a64c:	strh	ip, [r3, r2]
   1a650:	bl	17b48 <__assert_fail@plt+0x6bd0>
   1a654:	mov	r0, #0
   1a658:	pop	{r3, r4, r5, r6, r7, pc}
   1a65c:	mov	r0, #1
   1a660:	pop	{r3, r4, r5, r6, r7, pc}
   1a664:	push	{r3, r4, r5, r6, r7, lr}
   1a668:	mov	r6, r0
   1a66c:	mov	r0, #56	; 0x38
   1a670:	movt	r0, #4
   1a674:	bl	10e1c <malloc@plt>
   1a678:	subs	r4, r0, #0
   1a67c:	beq	1a6cc <__assert_fail@plt+0x9754>
   1a680:	mov	r2, #4
   1a684:	mov	r5, #28
   1a688:	bfi	r2, r2, #16, #16
   1a68c:	movt	r5, #4
   1a690:	mov	lr, #26
   1a694:	mov	ip, #24
   1a698:	movt	lr, #4
   1a69c:	movt	ip, #4
   1a6a0:	mov	r7, #262144	; 0x40000
   1a6a4:	mov	r3, #0
   1a6a8:	mov	r1, r6
   1a6ac:	mvn	r6, #0
   1a6b0:	str	r6, [r4, r7]
   1a6b4:	mov	r6, #9
   1a6b8:	str	r3, [r4, r2]
   1a6bc:	str	r3, [r4, r5]
   1a6c0:	strh	r3, [r4, lr]
   1a6c4:	strh	r6, [r4, ip]
   1a6c8:	bl	17b48 <__assert_fail@plt+0x6bd0>
   1a6cc:	mov	r0, r4
   1a6d0:	pop	{r3, r4, r5, r6, r7, pc}
   1a6d4:	cmp	r0, #0
   1a6d8:	push	{r3, lr}
   1a6dc:	beq	1a6e4 <__assert_fail@plt+0x976c>
   1a6e0:	bl	10d44 <free@plt>
   1a6e4:	mov	r0, #0
   1a6e8:	pop	{r3, pc}
   1a6ec:	push	{r4, lr}
   1a6f0:	sub	sp, sp, #24
   1a6f4:	add	ip, sp, #24
   1a6f8:	mov	lr, #0
   1a6fc:	ldr	r4, [sp, #32]
   1a700:	str	r3, [ip, #-4]!
   1a704:	mov	r3, ip
   1a708:	str	lr, [sp]
   1a70c:	stmib	sp, {r4, lr}
   1a710:	bl	19b24 <__assert_fail@plt+0x8bac>
   1a714:	add	sp, sp, #24
   1a718:	pop	{r4, pc}
   1a71c:	push	{r4, r5, lr}
   1a720:	sub	sp, sp, #28
   1a724:	add	ip, sp, #24
   1a728:	mov	lr, #1
   1a72c:	ldr	r5, [sp, #40]	; 0x28
   1a730:	ldr	r4, [sp, #44]	; 0x2c
   1a734:	str	r3, [ip, #-4]!
   1a738:	mov	r3, ip
   1a73c:	str	r5, [sp]
   1a740:	stmib	sp, {r4, lr}
   1a744:	bl	19b24 <__assert_fail@plt+0x8bac>
   1a748:	add	sp, sp, #28
   1a74c:	pop	{r4, r5, pc}
   1a750:	mov	r2, #24
   1a754:	movt	r2, #4
   1a758:	push	{r4, r5, r6, r7}
   1a75c:	add	r1, r0, #262144	; 0x40000
   1a760:	ldrh	r2, [r0, r2]
   1a764:	mov	ip, #16
   1a768:	movt	ip, #4
   1a76c:	mov	r3, r0
   1a770:	mov	r4, #262144	; 0x40000
   1a774:	ldr	r0, [r1, #4]
   1a778:	sxth	r5, r2
   1a77c:	ldr	r6, [r3, r4]
   1a780:	ldr	r7, [r3, ip]
   1a784:	mov	r1, #4
   1a788:	mov	ip, #28
   1a78c:	bfi	r1, r1, #16, #16
   1a790:	cmp	r5, #0
   1a794:	movt	ip, #4
   1a798:	rsb	r6, r0, r6
   1a79c:	add	r0, r0, r7
   1a7a0:	str	r6, [r3, r4]
   1a7a4:	movle	r2, #9
   1a7a8:	mov	r4, #0
   1a7ac:	str	r4, [r3, r1]
   1a7b0:	str	r4, [r3, ip]
   1a7b4:	ble	1a7c4 <__assert_fail@plt+0x984c>
   1a7b8:	cmp	r5, #12
   1a7bc:	uxthle	r2, r2
   1a7c0:	movgt	r2, #12
   1a7c4:	mov	r1, #24
   1a7c8:	movt	r1, #4
   1a7cc:	strh	r2, [r3, r1]
   1a7d0:	pop	{r4, r5, r6, r7}
   1a7d4:	bx	lr
   1a7d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   1a7dc:	cmp	r1, #15
   1a7e0:	sub	sp, sp, #16
   1a7e4:	str	r1, [sp, #8]
   1a7e8:	add	r1, r0, r1
   1a7ec:	ldr	sl, [sp, #48]	; 0x30
   1a7f0:	bls	1a900 <__assert_fail@plt+0x9988>
   1a7f4:	add	ip, r0, #16
   1a7f8:	movw	r8, #17448	; 0x4428
   1a7fc:	movw	r7, #51831	; 0xca77
   1a800:	movt	r8, #9251	; 0x2423
   1a804:	movt	r7, #34283	; 0x85eb
   1a808:	movw	r9, #34383	; 0x864f
   1a80c:	movt	r9, #25032	; 0x61c8
   1a810:	sub	r6, r1, #16
   1a814:	movw	r5, #51831	; 0xca77
   1a818:	movw	r4, #31153	; 0x79b1
   1a81c:	str	r6, [sp, #4]
   1a820:	add	r8, r2, r8
   1a824:	add	r7, r2, r7
   1a828:	add	r9, r2, r9
   1a82c:	movt	r5, #34283	; 0x85eb
   1a830:	movt	r4, #40503	; 0x9e37
   1a834:	mov	r6, ip
   1a838:	str	r1, [sp, #12]
   1a83c:	str	r3, [sp]
   1a840:	b	1a8b4 <__assert_fail@plt+0x993c>
   1a844:	ldr	r3, [sp]
   1a848:	cmp	r3, #1
   1a84c:	beq	1a8e4 <__assert_fail@plt+0x996c>
   1a850:	ldmib	r0, {r3, fp}
   1a854:	ldr	r1, [r6, #-16]
   1a858:	ldr	r0, [r0, #12]
   1a85c:	rev	r3, r3
   1a860:	rev	r1, r1
   1a864:	rev	fp, fp
   1a868:	rev	r0, r0
   1a86c:	mla	r8, r5, r1, r8
   1a870:	mla	r7, r5, r3, r7
   1a874:	mla	r2, r5, fp, r2
   1a878:	ldr	r1, [sp, #4]
   1a87c:	mla	r9, r5, r0, r9
   1a880:	ror	r8, r8, #19
   1a884:	ror	r7, r7, #19
   1a888:	ror	r2, r2, #19
   1a88c:	cmp	r1, ip
   1a890:	mov	r0, ip
   1a894:	mul	r8, r4, r8
   1a898:	add	r6, r6, #16
   1a89c:	ror	r9, r9, #19
   1a8a0:	add	ip, ip, #16
   1a8a4:	mul	r7, r4, r7
   1a8a8:	mul	r2, r4, r2
   1a8ac:	mul	r9, r4, r9
   1a8b0:	bcc	1a9f4 <__assert_fail@plt+0x9a7c>
   1a8b4:	cmp	sl, #1
   1a8b8:	bne	1a844 <__assert_fail@plt+0x98cc>
   1a8bc:	ldr	r1, [sp]
   1a8c0:	cmp	r1, #1
   1a8c4:	beq	1aa10 <__assert_fail@plt+0x9a98>
   1a8c8:	ldr	r1, [r0]
   1a8cc:	ldr	r3, [r0, #4]
   1a8d0:	ldr	fp, [r0, #8]
   1a8d4:	rev	r1, r1
   1a8d8:	rev	r3, r3
   1a8dc:	ldr	r0, [r0, #12]
   1a8e0:	b	1a864 <__assert_fail@plt+0x98ec>
   1a8e4:	ldmib	r0, {r1, r3}
   1a8e8:	ldr	fp, [r6, #-16]
   1a8ec:	ldr	r0, [r0, #12]
   1a8f0:	mla	r7, r5, r1, r7
   1a8f4:	mla	r8, r5, fp, r8
   1a8f8:	mla	r2, r5, r3, r2
   1a8fc:	b	1a878 <__assert_fail@plt+0x9900>
   1a900:	movw	ip, #26545	; 0x67b1
   1a904:	movt	ip, #5718	; 0x1656
   1a908:	add	ip, r2, ip
   1a90c:	add	r7, r0, #4
   1a910:	ldr	r4, [sp, #8]
   1a914:	cmp	r1, r7
   1a918:	add	r2, ip, r4
   1a91c:	bcc	1a994 <__assert_fail@plt+0x9a1c>
   1a920:	movw	r8, #44605	; 0xae3d
   1a924:	movw	r6, #60207	; 0xeb2f
   1a928:	movt	r8, #49842	; 0xc2b2
   1a92c:	movt	r6, #10196	; 0x27d4
   1a930:	mov	ip, r7
   1a934:	mov	r5, r0
   1a938:	b	1a96c <__assert_fail@plt+0x99f4>
   1a93c:	cmp	r3, #1
   1a940:	ldr	r5, [r5]
   1a944:	beq	1a94c <__assert_fail@plt+0x99d4>
   1a948:	rev	r5, r5
   1a94c:	mla	r2, r8, r5, r2
   1a950:	add	r4, ip, #4
   1a954:	cmp	r1, r4
   1a958:	mov	r5, ip
   1a95c:	mov	ip, r4
   1a960:	ror	r2, r2, #15
   1a964:	mul	r2, r6, r2
   1a968:	bcc	1a984 <__assert_fail@plt+0x9a0c>
   1a96c:	cmp	sl, #1
   1a970:	bne	1a93c <__assert_fail@plt+0x99c4>
   1a974:	cmp	r3, #1
   1a978:	ldr	r5, [r5]
   1a97c:	bne	1a948 <__assert_fail@plt+0x99d0>
   1a980:	b	1a94c <__assert_fail@plt+0x99d4>
   1a984:	sub	r3, r1, #4
   1a988:	rsb	r0, r0, r3
   1a98c:	bic	r0, r0, #3
   1a990:	add	r0, r7, r0
   1a994:	cmp	r1, r0
   1a998:	bls	1a9c4 <__assert_fail@plt+0x9a4c>
   1a99c:	movw	r4, #26545	; 0x67b1
   1a9a0:	movw	ip, #31153	; 0x79b1
   1a9a4:	movt	r4, #5718	; 0x1656
   1a9a8:	movt	ip, #40503	; 0x9e37
   1a9ac:	ldrb	r3, [r0], #1
   1a9b0:	cmp	r0, r1
   1a9b4:	mla	r2, r4, r3, r2
   1a9b8:	ror	r2, r2, #21
   1a9bc:	mul	r2, ip, r2
   1a9c0:	bne	1a9ac <__assert_fail@plt+0x9a34>
   1a9c4:	eor	r2, r2, r2, lsr #15
   1a9c8:	movw	r1, #51831	; 0xca77
   1a9cc:	movt	r1, #34283	; 0x85eb
   1a9d0:	movw	r3, #44605	; 0xae3d
   1a9d4:	movt	r3, #49842	; 0xc2b2
   1a9d8:	mul	r0, r1, r2
   1a9dc:	eor	r0, r0, r0, lsr #13
   1a9e0:	mul	r0, r3, r0
   1a9e4:	eor	r0, r0, r0, lsr #16
   1a9e8:	add	sp, sp, #16
   1a9ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1a9f0:	bx	lr
   1a9f4:	ror	r8, r8, #31
   1a9f8:	ldr	r1, [sp, #12]
   1a9fc:	add	r7, r8, r7, ror #25
   1aa00:	ldr	r3, [sp]
   1aa04:	add	r2, r7, r2, ror #20
   1aa08:	add	ip, r2, r9, ror #14
   1aa0c:	b	1a90c <__assert_fail@plt+0x9994>
   1aa10:	ldr	fp, [r0]
   1aa14:	ldr	r1, [r0, #4]
   1aa18:	ldr	r3, [r0, #8]
   1aa1c:	mla	r8, r5, fp, r8
   1aa20:	ldr	r0, [r0, #12]
   1aa24:	mla	r7, r5, r1, r7
   1aa28:	mla	r2, r5, r3, r2
   1aa2c:	b	1a878 <__assert_fail@plt+0x9900>
   1aa30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa34:	mov	r4, r0
   1aa38:	ldr	r0, [r0]
   1aa3c:	mov	sl, r3
   1aa40:	ldr	r3, [r4, #40]	; 0x28
   1aa44:	sub	sp, sp, #12
   1aa48:	add	r0, r2, r0
   1aa4c:	ldr	r6, [r4, #4]
   1aa50:	cmp	r2, #15
   1aa54:	cmpls	r0, #15
   1aa58:	add	r7, r2, r3
   1aa5c:	str	r0, [r4]
   1aa60:	mov	r5, r2
   1aa64:	movls	ip, #0
   1aa68:	movhi	ip, #1
   1aa6c:	cmp	r7, #15
   1aa70:	orr	r0, r6, ip
   1aa74:	mov	r9, r1
   1aa78:	add	ip, r1, r2
   1aa7c:	str	r0, [r4, #4]
   1aa80:	str	ip, [sp]
   1aa84:	bls	1ac68 <__assert_fail@plt+0x9cf0>
   1aa88:	cmp	r3, #0
   1aa8c:	bne	1aba8 <__assert_fail@plt+0x9c30>
   1aa90:	ldr	r3, [sp]
   1aa94:	sub	r1, r3, #16
   1aa98:	cmp	r9, r1
   1aa9c:	bhi	1ab6c <__assert_fail@plt+0x9bf4>
   1aaa0:	movw	ip, #51831	; 0xca77
   1aaa4:	movw	r2, #31153	; 0x79b1
   1aaa8:	ldr	r7, [r4, #8]
   1aaac:	movt	ip, #34283	; 0x85eb
   1aab0:	ldr	r6, [r4, #12]
   1aab4:	movt	r2, #40503	; 0x9e37
   1aab8:	ldr	r5, [r4, #16]
   1aabc:	mov	r3, r9
   1aac0:	ldr	r0, [r4, #20]
   1aac4:	mov	r8, sl
   1aac8:	str	r4, [sp, #4]
   1aacc:	b	1ab20 <__assert_fail@plt+0x9ba8>
   1aad0:	rev	fp, fp
   1aad4:	rev	sl, sl
   1aad8:	rev	r4, r4
   1aadc:	mla	r7, ip, fp, r7
   1aae0:	mla	r5, ip, sl, r5
   1aae4:	mla	r6, ip, r4, r6
   1aae8:	ldr	r4, [r3, #12]
   1aaec:	rev	r4, r4
   1aaf0:	mla	r0, ip, r4, r0
   1aaf4:	add	r3, r3, #16
   1aaf8:	ror	r7, r7, #19
   1aafc:	ror	r6, r6, #19
   1ab00:	ror	r5, r5, #19
   1ab04:	cmp	r1, r3
   1ab08:	mul	r7, r2, r7
   1ab0c:	ror	r0, r0, #19
   1ab10:	mul	r6, r2, r6
   1ab14:	mul	r5, r2, r5
   1ab18:	mul	r0, r2, r0
   1ab1c:	bcc	1ab48 <__assert_fail@plt+0x9bd0>
   1ab20:	cmp	r8, #1
   1ab24:	ldr	fp, [r3]
   1ab28:	ldr	r4, [r3, #4]
   1ab2c:	ldr	sl, [r3, #8]
   1ab30:	bne	1aad0 <__assert_fail@plt+0x9b58>
   1ab34:	mla	r6, ip, r4, r6
   1ab38:	ldr	r4, [r3, #12]
   1ab3c:	mla	r7, ip, fp, r7
   1ab40:	mla	r5, ip, sl, r5
   1ab44:	b	1aaf0 <__assert_fail@plt+0x9b78>
   1ab48:	rsb	r1, r9, r1
   1ab4c:	ldr	r4, [sp, #4]
   1ab50:	bic	r1, r1, #15
   1ab54:	add	r1, r1, #16
   1ab58:	add	r9, r9, r1
   1ab5c:	str	r7, [r4, #8]
   1ab60:	str	r6, [r4, #12]
   1ab64:	str	r5, [r4, #16]
   1ab68:	str	r0, [r4, #20]
   1ab6c:	ldr	ip, [sp]
   1ab70:	cmp	r9, ip
   1ab74:	bcc	1ab84 <__assert_fail@plt+0x9c0c>
   1ab78:	mov	r0, #0
   1ab7c:	add	sp, sp, #12
   1ab80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab84:	rsb	r5, r9, ip
   1ab88:	mov	r1, r9
   1ab8c:	add	r0, r4, #24
   1ab90:	mov	r2, r5
   1ab94:	bl	10d74 <memcpy@plt>
   1ab98:	mov	r0, #0
   1ab9c:	str	r5, [r4, #40]	; 0x28
   1aba0:	add	sp, sp, #12
   1aba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aba8:	add	r0, r4, #24
   1abac:	rsb	r2, r3, #16
   1abb0:	add	r0, r0, r3
   1abb4:	bl	10d74 <memcpy@plt>
   1abb8:	cmp	sl, #1
   1abbc:	ldr	r3, [r4, #8]
   1abc0:	ldr	r5, [r4, #24]
   1abc4:	beq	1ac8c <__assert_fail@plt+0x9d14>
   1abc8:	ldr	ip, [r4, #28]
   1abcc:	movw	r2, #51831	; 0xca77
   1abd0:	ldr	r0, [r4, #32]
   1abd4:	movt	r2, #34283	; 0x85eb
   1abd8:	ldr	r1, [r4, #16]
   1abdc:	rev	r5, r5
   1abe0:	ldr	r6, [r4, #12]
   1abe4:	rev	r0, r0
   1abe8:	rev	ip, ip
   1abec:	mla	r5, r2, r5, r3
   1abf0:	movw	r3, #31153	; 0x79b1
   1abf4:	mla	ip, r2, ip, r6
   1abf8:	movt	r3, #40503	; 0x9e37
   1abfc:	mla	r2, r2, r0, r1
   1ac00:	ldr	r0, [r4, #36]	; 0x24
   1ac04:	ror	r5, r5, #19
   1ac08:	ldr	r1, [r4, #20]
   1ac0c:	rev	r0, r0
   1ac10:	ror	ip, ip, #19
   1ac14:	mul	r5, r3, r5
   1ac18:	ror	r2, r2, #19
   1ac1c:	mul	ip, r3, ip
   1ac20:	mul	r3, r3, r2
   1ac24:	str	r5, [r4, #8]
   1ac28:	str	ip, [r4, #12]
   1ac2c:	str	r3, [r4, #16]
   1ac30:	movw	r2, #51831	; 0xca77
   1ac34:	movt	r2, #34283	; 0x85eb
   1ac38:	movw	r3, #31153	; 0x79b1
   1ac3c:	movt	r3, #40503	; 0x9e37
   1ac40:	mla	r2, r2, r0, r1
   1ac44:	ldr	r1, [r4, #40]	; 0x28
   1ac48:	mov	r0, #0
   1ac4c:	str	r0, [r4, #40]	; 0x28
   1ac50:	rsb	r1, r1, #16
   1ac54:	add	r9, r9, r1
   1ac58:	ror	r2, r2, #19
   1ac5c:	mul	r3, r3, r2
   1ac60:	str	r3, [r4, #20]
   1ac64:	b	1aa90 <__assert_fail@plt+0x9b18>
   1ac68:	add	r0, r4, #24
   1ac6c:	add	r0, r0, r3
   1ac70:	bl	10d74 <memcpy@plt>
   1ac74:	ldr	r3, [r4, #40]	; 0x28
   1ac78:	mov	r0, #0
   1ac7c:	add	r5, r3, r5
   1ac80:	str	r5, [r4, #40]	; 0x28
   1ac84:	add	sp, sp, #12
   1ac88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac8c:	ldr	r0, [r4, #12]
   1ac90:	movw	ip, #51831	; 0xca77
   1ac94:	ldr	r6, [r4, #16]
   1ac98:	movt	ip, #34283	; 0x85eb
   1ac9c:	ldr	r8, [r4, #28]
   1aca0:	movw	r2, #31153	; 0x79b1
   1aca4:	ldr	r7, [r4, #32]
   1aca8:	movt	r2, #40503	; 0x9e37
   1acac:	mla	r5, ip, r5, r3
   1acb0:	ldr	r1, [r4, #20]
   1acb4:	mla	r3, ip, r8, r0
   1acb8:	ldr	r0, [r4, #36]	; 0x24
   1acbc:	mla	ip, ip, r7, r6
   1acc0:	ror	r5, r5, #19
   1acc4:	ror	r3, r3, #19
   1acc8:	mul	r5, r2, r5
   1accc:	ror	ip, ip, #19
   1acd0:	mul	r3, r2, r3
   1acd4:	mul	r2, r2, ip
   1acd8:	str	r5, [r4, #8]
   1acdc:	str	r3, [r4, #12]
   1ace0:	str	r2, [r4, #16]
   1ace4:	b	1ac30 <__assert_fail@plt+0x9cb8>
   1ace8:	ldr	r2, [r0, #4]
   1acec:	add	r3, r0, #24
   1acf0:	push	{r4, r5, r6, r7}
   1acf4:	cmp	r2, #0
   1acf8:	ldr	r5, [r0, #40]	; 0x28
   1acfc:	add	r5, r3, r5
   1ad00:	beq	1addc <__assert_fail@plt+0x9e64>
   1ad04:	ldr	r2, [r0, #8]
   1ad08:	ldr	r6, [r0, #12]
   1ad0c:	ldr	r4, [r0, #16]
   1ad10:	ror	r2, r2, #31
   1ad14:	ldr	ip, [r0, #20]
   1ad18:	add	r2, r2, r6, ror #25
   1ad1c:	add	r2, r2, r4, ror #20
   1ad20:	add	r2, r2, ip, ror #14
   1ad24:	ldr	ip, [r0], #28
   1ad28:	cmp	r5, r0
   1ad2c:	add	r2, r2, ip
   1ad30:	bcc	1ad80 <__assert_fail@plt+0x9e08>
   1ad34:	movw	r7, #44605	; 0xae3d
   1ad38:	movw	r6, #60207	; 0xeb2f
   1ad3c:	movt	r7, #49842	; 0xc2b2
   1ad40:	movt	r6, #10196	; 0x27d4
   1ad44:	mov	ip, r0
   1ad48:	cmp	r1, #1
   1ad4c:	ldr	r3, [r3]
   1ad50:	revne	r3, r3
   1ad54:	mla	r2, r7, r3, r2
   1ad58:	add	r4, ip, #4
   1ad5c:	cmp	r5, r4
   1ad60:	mov	r3, ip
   1ad64:	mov	ip, r4
   1ad68:	ror	r2, r2, #15
   1ad6c:	mul	r2, r6, r2
   1ad70:	bcs	1ad48 <__assert_fail@plt+0x9dd0>
   1ad74:	rsb	r3, r0, r5
   1ad78:	bic	r3, r3, #3
   1ad7c:	add	r3, r0, r3
   1ad80:	cmp	r5, r3
   1ad84:	bls	1adb0 <__assert_fail@plt+0x9e38>
   1ad88:	movw	ip, #26545	; 0x67b1
   1ad8c:	movw	r0, #31153	; 0x79b1
   1ad90:	movt	ip, #5718	; 0x1656
   1ad94:	movt	r0, #40503	; 0x9e37
   1ad98:	ldrb	r1, [r3], #1
   1ad9c:	cmp	r3, r5
   1ada0:	mla	r2, ip, r1, r2
   1ada4:	ror	r2, r2, #21
   1ada8:	mul	r2, r0, r2
   1adac:	bne	1ad98 <__assert_fail@plt+0x9e20>
   1adb0:	eor	r2, r2, r2, lsr #15
   1adb4:	movw	r1, #51831	; 0xca77
   1adb8:	movt	r1, #34283	; 0x85eb
   1adbc:	movw	r3, #44605	; 0xae3d
   1adc0:	movt	r3, #49842	; 0xc2b2
   1adc4:	mul	r0, r1, r2
   1adc8:	pop	{r4, r5, r6, r7}
   1adcc:	eor	r0, r0, r0, lsr #13
   1add0:	mul	r0, r3, r0
   1add4:	eor	r0, r0, r0, lsr #16
   1add8:	bx	lr
   1addc:	ldr	ip, [r0, #16]
   1ade0:	movw	r2, #26545	; 0x67b1
   1ade4:	movt	r2, #5718	; 0x1656
   1ade8:	add	r2, ip, r2
   1adec:	b	1ad24 <__assert_fail@plt+0x9dac>
   1adf0:	cmp	r2, #1
   1adf4:	beq	1ae14 <__assert_fail@plt+0x9e9c>
   1adf8:	cmp	r1, #1
   1adfc:	beq	1ae38 <__assert_fail@plt+0x9ec0>
   1ae00:	ldr	r1, [r0]
   1ae04:	ldr	r0, [r0, #4]
   1ae08:	rev	r1, r1
   1ae0c:	rev	r0, r0
   1ae10:	bx	lr
   1ae14:	cmp	r1, #1
   1ae18:	ldreq	r3, [r0]
   1ae1c:	ldreq	r1, [r0, #4]
   1ae20:	ldrne	r1, [r0]
   1ae24:	ldrne	r3, [r0, #4]
   1ae28:	revne	r1, r1
   1ae2c:	revne	r3, r3
   1ae30:	mov	r0, r3
   1ae34:	bx	lr
   1ae38:	ldr	r3, [r0]
   1ae3c:	ldr	r1, [r0, #4]
   1ae40:	mov	r0, r3
   1ae44:	bx	lr
   1ae48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae4c:	cmp	r1, #31
   1ae50:	sub	sp, sp, #84	; 0x54
   1ae54:	mov	sl, r0
   1ae58:	strd	r2, [sp, #16]
   1ae5c:	add	r3, r0, r1
   1ae60:	str	r1, [sp, #76]	; 0x4c
   1ae64:	str	r3, [sp, #72]	; 0x48
   1ae68:	bls	1b630 <__assert_fail@plt+0xa6b8>
   1ae6c:	ldrd	r6, [sp, #16]
   1ae70:	movw	r4, #46550	; 0xb5d6
   1ae74:	movt	r4, #44480	; 0xadc0
   1ae78:	movw	r5, #10222	; 0x27ee
   1ae7c:	adds	r6, r6, r4
   1ae80:	movt	r5, #24810	; 0x60ea
   1ae84:	adc	r7, r7, r5
   1ae88:	ldrd	r4, [sp, #16]
   1ae8c:	movw	r2, #60239	; 0xeb4f
   1ae90:	strd	r6, [sp, #24]
   1ae94:	movt	r2, #10196	; 0x27d4
   1ae98:	ldrd	r6, [sp, #16]
   1ae9c:	adds	r4, r4, r2
   1aea0:	movw	r3, #44605	; 0xae3d
   1aea4:	movw	r0, #13689	; 0x3579
   1aea8:	movt	r3, #49842	; 0xc2b2
   1aeac:	movt	r0, #31252	; 0x7a14
   1aeb0:	adc	r5, r5, r3
   1aeb4:	movw	r1, #34382	; 0x864e
   1aeb8:	adds	r6, r6, r0
   1aebc:	movt	r1, #25032	; 0x61c8
   1aec0:	movw	r8, #60239	; 0xeb4f
   1aec4:	adc	r7, r7, r1
   1aec8:	ldr	fp, [sp, #72]	; 0x48
   1aecc:	strd	r6, [sp, #48]	; 0x30
   1aed0:	movt	r8, #10196	; 0x27d4
   1aed4:	movw	r7, #51847	; 0xca87
   1aed8:	movt	r7, #34283	; 0x85eb
   1aedc:	strd	r4, [sp, #40]	; 0x28
   1aee0:	movw	r6, #31153	; 0x79b1
   1aee4:	movw	r5, #44605	; 0xae3d
   1aee8:	movt	r6, #40503	; 0x9e37
   1aeec:	movt	r5, #49842	; 0xc2b2
   1aef0:	sub	fp, fp, #32
   1aef4:	str	r5, [sp, #36]	; 0x24
   1aef8:	str	fp, [sp, #64]	; 0x40
   1aefc:	str	sl, [sp, #8]
   1af00:	str	r6, [sp, #56]	; 0x38
   1af04:	ldr	r0, [sp, #8]
   1af08:	movw	r3, #60239	; 0xeb4f
   1af0c:	ldr	r2, [sp, #124]	; 0x7c
   1af10:	movw	r6, #51847	; 0xca87
   1af14:	ldr	r1, [sp, #120]	; 0x78
   1af18:	movw	r9, #31153	; 0x79b1
   1af1c:	str	r3, [sp, #12]
   1af20:	bl	1adf0 <__assert_fail@plt+0x9e78>
   1af24:	ldr	r4, [sp, #36]	; 0x24
   1af28:	movt	r6, #34283	; 0x85eb
   1af2c:	ldr	r5, [sp, #8]
   1af30:	movt	r9, #40503	; 0x9e37
   1af34:	ldr	r3, [sp, #12]
   1af38:	ldr	r2, [sp, #124]	; 0x7c
   1af3c:	movt	r3, #10196	; 0x27d4
   1af40:	str	r3, [sp, #12]
   1af44:	mov	lr, r0
   1af48:	umull	sl, fp, lr, r8
   1af4c:	mul	ip, r4, r0
   1af50:	add	r0, r5, #8
   1af54:	mla	r1, r8, r1, ip
   1af58:	movw	r4, #44605	; 0xae3d
   1af5c:	strd	sl, [sp]
   1af60:	movt	r4, #49842	; 0xc2b2
   1af64:	str	r4, [sp, #32]
   1af68:	add	r1, r1, fp
   1af6c:	str	r1, [sp, #4]
   1af70:	ldrd	r4, [sp, #24]
   1af74:	ldrd	sl, [sp]
   1af78:	adds	sl, sl, r4
   1af7c:	adc	fp, fp, r5
   1af80:	strd	sl, [sp, #24]
   1af84:	ldr	r5, [sp, #28]
   1af88:	lsl	ip, sl, #31
   1af8c:	ldr	sl, [sp, #24]
   1af90:	lsl	r1, fp, #31
   1af94:	orr	ip, ip, r5, lsr #1
   1af98:	ldr	r5, [sp, #56]	; 0x38
   1af9c:	orr	r4, r1, sl, lsr #1
   1afa0:	ldr	r1, [sp, #120]	; 0x78
   1afa4:	umull	sl, fp, ip, r7
   1afa8:	mul	lr, r5, ip
   1afac:	mla	lr, r7, r4, lr
   1afb0:	strd	sl, [sp, #24]
   1afb4:	add	lr, lr, fp
   1afb8:	str	lr, [sp, #28]
   1afbc:	bl	1adf0 <__assert_fail@plt+0x9e78>
   1afc0:	ldr	fp, [sp, #36]	; 0x24
   1afc4:	ldr	r5, [sp, #8]
   1afc8:	ldr	r2, [sp, #124]	; 0x7c
   1afcc:	mov	r4, r0
   1afd0:	mul	ip, fp, r0
   1afd4:	add	r0, r5, #16
   1afd8:	umull	sl, fp, r4, r8
   1afdc:	mla	r1, r8, r1, ip
   1afe0:	strd	sl, [sp]
   1afe4:	add	r1, r1, fp
   1afe8:	str	r1, [sp, #4]
   1afec:	ldrd	sl, [sp, #40]	; 0x28
   1aff0:	ldrd	r4, [sp]
   1aff4:	adds	r4, r4, sl
   1aff8:	adc	r5, r5, fp
   1affc:	strd	r4, [sp, #40]	; 0x28
   1b000:	ldr	fp, [sp, #44]	; 0x2c
   1b004:	lsl	ip, r4, #31
   1b008:	ldr	lr, [sp, #40]	; 0x28
   1b00c:	lsl	r1, r5, #31
   1b010:	ldr	r5, [sp, #56]	; 0x38
   1b014:	orr	ip, ip, fp, lsr #1
   1b018:	orr	r4, r1, lr, lsr #1
   1b01c:	ldr	r1, [sp, #120]	; 0x78
   1b020:	umull	sl, fp, ip, r7
   1b024:	mul	lr, r5, ip
   1b028:	mla	lr, r7, r4, lr
   1b02c:	strd	sl, [sp, #40]	; 0x28
   1b030:	add	lr, lr, fp
   1b034:	str	lr, [sp, #44]	; 0x2c
   1b038:	bl	1adf0 <__assert_fail@plt+0x9e78>
   1b03c:	ldr	fp, [sp, #36]	; 0x24
   1b040:	ldr	r5, [sp, #8]
   1b044:	ldr	r2, [sp, #124]	; 0x7c
   1b048:	mov	r4, r0
   1b04c:	mul	ip, fp, r0
   1b050:	add	r0, r5, #24
   1b054:	umull	sl, fp, r4, r8
   1b058:	add	r5, r5, #32
   1b05c:	mla	r1, r8, r1, ip
   1b060:	str	r5, [sp, #8]
   1b064:	strd	sl, [sp]
   1b068:	add	r1, r1, fp
   1b06c:	str	r1, [sp, #4]
   1b070:	ldrd	sl, [sp, #16]
   1b074:	ldrd	r4, [sp]
   1b078:	adds	r4, r4, sl
   1b07c:	adc	r5, r5, fp
   1b080:	strd	r4, [sp, #16]
   1b084:	ldr	fp, [sp, #20]
   1b088:	lsl	ip, r4, #31
   1b08c:	ldr	lr, [sp, #16]
   1b090:	lsl	r1, r5, #31
   1b094:	ldr	r5, [sp, #56]	; 0x38
   1b098:	orr	ip, ip, fp, lsr #1
   1b09c:	orr	r4, r1, lr, lsr #1
   1b0a0:	ldr	r1, [sp, #120]	; 0x78
   1b0a4:	umull	sl, fp, ip, r7
   1b0a8:	mul	lr, r5, ip
   1b0ac:	mla	lr, r7, r4, lr
   1b0b0:	strd	sl, [sp, #16]
   1b0b4:	add	lr, lr, fp
   1b0b8:	str	lr, [sp, #20]
   1b0bc:	bl	1adf0 <__assert_fail@plt+0x9e78>
   1b0c0:	ldr	fp, [sp, #36]	; 0x24
   1b0c4:	ldr	ip, [sp, #64]	; 0x40
   1b0c8:	ldr	r3, [sp, #12]
   1b0cc:	mul	r2, fp, r0
   1b0d0:	umull	r4, r5, r0, r8
   1b0d4:	mla	r1, r8, r1, r2
   1b0d8:	add	r5, r1, r5
   1b0dc:	ldrd	r0, [sp, #48]	; 0x30
   1b0e0:	adds	r0, r0, r4
   1b0e4:	ldr	r4, [sp, #8]
   1b0e8:	adc	r1, r1, r5
   1b0ec:	ldr	r5, [sp, #56]	; 0x38
   1b0f0:	cmp	ip, r4
   1b0f4:	lsl	ip, r0, #31
   1b0f8:	orr	ip, ip, r1, lsr #1
   1b0fc:	lsl	r2, r1, #31
   1b100:	orr	r2, r2, r0, lsr #1
   1b104:	umull	sl, fp, ip, r7
   1b108:	mul	r1, r5, ip
   1b10c:	mla	r2, r7, r2, r1
   1b110:	strd	sl, [sp, #48]	; 0x30
   1b114:	add	r2, r2, fp
   1b118:	str	r2, [sp, #52]	; 0x34
   1b11c:	bcs	1af04 <__assert_fail@plt+0x9f8c>
   1b120:	ldr	fp, [sp, #32]
   1b124:	mov	sl, r4
   1b128:	ldr	r0, [sp, #24]
   1b12c:	ldr	r1, [sp, #40]	; 0x28
   1b130:	str	r9, [sp, #36]	; 0x24
   1b134:	mov	r9, r3
   1b138:	ldr	r4, [sp, #28]
   1b13c:	mov	r7, r0
   1b140:	mul	ip, fp, r0
   1b144:	lsl	r2, r1, #7
   1b148:	umull	r0, r1, r0, r9
   1b14c:	ldr	r5, [sp, #40]	; 0x28
   1b150:	mla	ip, r9, r4, ip
   1b154:	ldr	r4, [sp, #44]	; 0x2c
   1b158:	mov	r3, r6
   1b15c:	add	r1, ip, r1
   1b160:	orr	r2, r2, r4, lsr #25
   1b164:	lsl	r6, r0, #31
   1b168:	str	r2, [sp, #56]	; 0x38
   1b16c:	mul	r2, fp, r5
   1b170:	orr	r6, r6, r1, lsr #1
   1b174:	mla	r8, r9, r4, r2
   1b178:	lsl	r2, r1, #31
   1b17c:	ldr	r1, [sp, #36]	; 0x24
   1b180:	orr	r0, r2, r0, lsr #1
   1b184:	lsl	r2, r7, #1
   1b188:	mul	ip, r1, r6
   1b18c:	lsl	r1, r4, #7
   1b190:	orr	r1, r1, r5, lsr #25
   1b194:	str	r1, [sp, #60]	; 0x3c
   1b198:	mla	ip, r3, r0, ip
   1b19c:	umull	r0, r1, r5, r9
   1b1a0:	ldr	r5, [sp, #28]
   1b1a4:	add	r1, r8, r1
   1b1a8:	orr	r2, r2, r5, lsr #31
   1b1ac:	str	r2, [sp, #64]	; 0x40
   1b1b0:	umull	r4, r5, r6, r3
   1b1b4:	strd	r4, [sp]
   1b1b8:	ldr	r5, [sp, #28]
   1b1bc:	lsl	r2, r5, #1
   1b1c0:	ldrd	r4, [sp, #56]	; 0x38
   1b1c4:	orr	r2, r2, r7, lsr #31
   1b1c8:	ldr	r7, [sp, #16]
   1b1cc:	str	r2, [sp, #68]	; 0x44
   1b1d0:	lsl	r2, r7, #12
   1b1d4:	ldrd	r6, [sp, #64]	; 0x40
   1b1d8:	adds	r4, r4, r6
   1b1dc:	adc	r5, r5, r7
   1b1e0:	strd	r4, [sp, #40]	; 0x28
   1b1e4:	ldr	r4, [sp, #20]
   1b1e8:	orr	r6, r2, r4, lsr #20
   1b1ec:	lsl	r5, r4, #12
   1b1f0:	ldr	r4, [sp, #48]	; 0x30
   1b1f4:	lsl	r2, r4, #18
   1b1f8:	ldr	r4, [sp, #16]
   1b1fc:	orr	r7, r5, r4, lsr #20
   1b200:	ldrd	r4, [sp, #40]	; 0x28
   1b204:	adds	r6, r6, r4
   1b208:	adc	r7, r7, r5
   1b20c:	ldr	r5, [sp, #52]	; 0x34
   1b210:	orr	r2, r2, r5, lsr #14
   1b214:	str	r2, [sp, #24]
   1b218:	lsl	r2, r5, #18
   1b21c:	ldr	r5, [sp, #48]	; 0x30
   1b220:	orr	r2, r2, r5, lsr #14
   1b224:	str	r2, [sp, #28]
   1b228:	ldrd	r4, [sp, #24]
   1b22c:	ldr	r2, [sp, #4]
   1b230:	adds	r6, r6, r4
   1b234:	add	ip, ip, r2
   1b238:	str	ip, [sp, #4]
   1b23c:	adc	r7, r7, r5
   1b240:	ldrd	r4, [sp]
   1b244:	lsl	ip, r1, #31
   1b248:	lsl	r2, r0, #31
   1b24c:	eor	r7, r7, r5
   1b250:	ldr	r5, [sp, #36]	; 0x24
   1b254:	eor	r6, r6, r4
   1b258:	orr	ip, ip, r0, lsr #1
   1b25c:	ldr	r0, [sp, #16]
   1b260:	orr	r2, r2, r1, lsr #1
   1b264:	mul	r4, r5, r6
   1b268:	mla	r4, r3, r7, r4
   1b26c:	umull	r6, r7, r6, r3
   1b270:	mul	r1, fp, r0
   1b274:	add	r7, r4, r7
   1b278:	ldr	r4, [sp, #20]
   1b27c:	mul	r0, r5, r2
   1b280:	movw	r5, #51831	; 0xca77
   1b284:	mla	r1, r9, r4, r1
   1b288:	movw	r4, #44643	; 0xae63
   1b28c:	movt	r4, #49842	; 0xc2b2
   1b290:	movt	r5, #34283	; 0x85eb
   1b294:	adds	r4, r4, r6
   1b298:	adc	r5, r5, r7
   1b29c:	strd	r4, [sp, #24]
   1b2a0:	ldr	r6, [sp, #16]
   1b2a4:	mla	ip, r3, ip, r0
   1b2a8:	umull	r4, r5, r6, r9
   1b2ac:	add	r5, r1, r5
   1b2b0:	umull	r0, r1, r2, r3
   1b2b4:	lsl	r6, r4, #31
   1b2b8:	lsl	r2, r5, #31
   1b2bc:	orr	r6, r6, r5, lsr #1
   1b2c0:	orr	r7, r2, r4, lsr #1
   1b2c4:	ldrd	r4, [sp, #24]
   1b2c8:	add	r1, ip, r1
   1b2cc:	ldr	ip, [sp, #36]	; 0x24
   1b2d0:	eor	r0, r0, r4
   1b2d4:	eor	r1, r1, r5
   1b2d8:	ldr	r5, [sp, #48]	; 0x30
   1b2dc:	mul	r2, ip, r0
   1b2e0:	ldr	r4, [sp, #52]	; 0x34
   1b2e4:	mla	r2, r3, r1, r2
   1b2e8:	umull	r0, r1, r0, r3
   1b2ec:	mul	fp, fp, r5
   1b2f0:	add	r1, r2, r1
   1b2f4:	mla	fp, r9, r4, fp
   1b2f8:	movw	r4, #44643	; 0xae63
   1b2fc:	movt	r4, #49842	; 0xc2b2
   1b300:	adds	r4, r4, r0
   1b304:	umull	r8, r9, r5, r9
   1b308:	movw	r5, #51831	; 0xca77
   1b30c:	mul	r2, ip, r6
   1b310:	movt	r5, #34283	; 0x85eb
   1b314:	adc	r5, r5, r1
   1b318:	strd	r4, [sp, #16]
   1b31c:	umull	r0, r1, r6, r3
   1b320:	add	r9, fp, r9
   1b324:	mla	r4, r3, r7, r2
   1b328:	lsl	r2, r8, #31
   1b32c:	orr	r2, r2, r9, lsr #1
   1b330:	lsl	ip, r9, #31
   1b334:	orr	r6, ip, r8, lsr #1
   1b338:	add	r1, r4, r1
   1b33c:	ldrd	r4, [sp, #16]
   1b340:	eor	r1, r1, r5
   1b344:	ldr	r5, [sp, #36]	; 0x24
   1b348:	eor	r0, r0, r4
   1b34c:	mul	r4, r5, r0
   1b350:	mul	ip, r5, r2
   1b354:	mla	r1, r3, r1, r4
   1b358:	umull	r4, r5, r0, r3
   1b35c:	movw	r0, #44643	; 0xae63
   1b360:	mla	ip, r3, r6, ip
   1b364:	movt	r0, #49842	; 0xc2b2
   1b368:	umull	r6, r7, r2, r3
   1b36c:	adds	r0, r0, r4
   1b370:	add	r5, r1, r5
   1b374:	movw	r1, #51831	; 0xca77
   1b378:	eor	r4, r0, r6
   1b37c:	movt	r1, #34283	; 0x85eb
   1b380:	ldr	r6, [sp, #36]	; 0x24
   1b384:	adc	r1, r1, r5
   1b388:	add	r7, ip, r7
   1b38c:	eor	r5, r1, r7
   1b390:	mul	r1, r6, r4
   1b394:	mla	r2, r3, r5, r1
   1b398:	movw	r5, #51831	; 0xca77
   1b39c:	umull	r0, r1, r4, r3
   1b3a0:	movw	r4, #44643	; 0xae63
   1b3a4:	movt	r4, #49842	; 0xc2b2
   1b3a8:	movt	r5, #34283	; 0x85eb
   1b3ac:	add	r1, r2, r1
   1b3b0:	adds	r4, r4, r0
   1b3b4:	adc	r5, r5, r1
   1b3b8:	ldr	fp, [sp, #76]	; 0x4c
   1b3bc:	add	r7, sl, #8
   1b3c0:	ldr	ip, [sp, #72]	; 0x48
   1b3c4:	adds	r4, r4, fp
   1b3c8:	str	r7, [sp, #16]
   1b3cc:	adc	r5, r5, #0
   1b3d0:	cmp	ip, r7
   1b3d4:	bcc	1b4b4 <__assert_fail@plt+0xa53c>
   1b3d8:	movw	r3, #44605	; 0xae3d
   1b3dc:	movt	r3, #49842	; 0xc2b2
   1b3e0:	movw	r8, #60239	; 0xeb4f
   1b3e4:	movw	r6, #51847	; 0xca87
   1b3e8:	movw	r9, #31153	; 0x79b1
   1b3ec:	movt	r8, #10196	; 0x27d4
   1b3f0:	movt	r6, #34283	; 0x85eb
   1b3f4:	movt	r9, #40503	; 0x9e37
   1b3f8:	mov	r0, sl
   1b3fc:	str	sl, [sp, #24]
   1b400:	mov	sl, r3
   1b404:	ldr	r2, [sp, #124]	; 0x7c
   1b408:	ldr	r1, [sp, #120]	; 0x78
   1b40c:	bl	1adf0 <__assert_fail@plt+0x9e78>
   1b410:	add	ip, r7, #8
   1b414:	mov	r2, r0
   1b418:	umull	r2, r3, r2, r8
   1b41c:	mul	fp, sl, r0
   1b420:	mov	r0, r7
   1b424:	mla	r1, r8, r1, fp
   1b428:	mov	r7, ip
   1b42c:	lsl	fp, r2, #31
   1b430:	add	r3, r1, r3
   1b434:	lsl	r1, r3, #31
   1b438:	orr	r3, fp, r3, lsr #1
   1b43c:	orr	r1, r1, r2, lsr #1
   1b440:	mul	fp, r9, r3
   1b444:	mla	r1, r6, r1, fp
   1b448:	umull	r2, r3, r3, r6
   1b44c:	add	r3, r1, r3
   1b450:	eor	r2, r2, r4
   1b454:	eor	r3, r3, r5
   1b458:	lsl	r4, r2, #27
   1b45c:	lsl	r1, r3, #27
   1b460:	orr	r4, r4, r3, lsr #5
   1b464:	orr	r2, r1, r2, lsr #5
   1b468:	mul	r3, r9, r4
   1b46c:	mla	r2, r6, r2, r3
   1b470:	movw	r3, #51831	; 0xca77
   1b474:	umull	r4, r5, r4, r6
   1b478:	movt	r3, #34283	; 0x85eb
   1b47c:	add	r5, r2, r5
   1b480:	movw	r2, #44643	; 0xae63
   1b484:	movt	r2, #49842	; 0xc2b2
   1b488:	adds	r4, r4, r2
   1b48c:	adc	r5, r5, r3
   1b490:	ldr	r3, [sp, #72]	; 0x48
   1b494:	cmp	r3, ip
   1b498:	bcs	1b404 <__assert_fail@plt+0xa48c>
   1b49c:	ldr	sl, [sp, #24]
   1b4a0:	sub	r3, r3, #8
   1b4a4:	ldr	r7, [sp, #16]
   1b4a8:	rsb	r3, sl, r3
   1b4ac:	bic	r3, r3, #7
   1b4b0:	add	sl, r7, r3
   1b4b4:	ldr	r3, [sp, #72]	; 0x48
   1b4b8:	add	ip, sl, #4
   1b4bc:	cmp	r3, ip
   1b4c0:	bcc	1b550 <__assert_fail@plt+0xa5d8>
   1b4c4:	ldr	r6, [sp, #124]	; 0x7c
   1b4c8:	cmp	r6, #1
   1b4cc:	beq	1b650 <__assert_fail@plt+0xa6d8>
   1b4d0:	ldr	fp, [sp, #120]	; 0x78
   1b4d4:	ldr	r9, [sl]
   1b4d8:	cmp	fp, #1
   1b4dc:	beq	1b4e4 <__assert_fail@plt+0xa56c>
   1b4e0:	rev	r9, r9
   1b4e4:	movw	r2, #51847	; 0xca87
   1b4e8:	movt	r2, #34283	; 0x85eb
   1b4ec:	movw	r8, #31153	; 0x79b1
   1b4f0:	movt	r8, #40503	; 0x9e37
   1b4f4:	umull	r2, r3, r9, r2
   1b4f8:	movw	r7, #44605	; 0xae3d
   1b4fc:	movt	r7, #49842	; 0xc2b2
   1b500:	movw	r6, #60239	; 0xeb4f
   1b504:	eor	r4, r4, r2
   1b508:	movt	r6, #10196	; 0x27d4
   1b50c:	movw	r0, #31225	; 0x79f9
   1b510:	movt	r0, #40503	; 0x9e37
   1b514:	movw	r1, #26545	; 0x67b1
   1b518:	movt	r1, #5718	; 0x1656
   1b51c:	mla	r3, r8, r9, r3
   1b520:	mov	sl, ip
   1b524:	eor	r5, r5, r3
   1b528:	lsl	r3, r4, #23
   1b52c:	lsl	r2, r5, #23
   1b530:	orr	r3, r3, r5, lsr #9
   1b534:	orr	r4, r2, r4, lsr #9
   1b538:	mul	r7, r7, r3
   1b53c:	mla	r7, r6, r4, r7
   1b540:	umull	r4, r5, r3, r6
   1b544:	add	r5, r7, r5
   1b548:	adds	r4, r4, r0
   1b54c:	adc	r5, r5, r1
   1b550:	ldr	ip, [sp, #72]	; 0x48
   1b554:	cmp	ip, sl
   1b558:	bls	1b5bc <__assert_fail@plt+0xa644>
   1b55c:	ldr	r9, [sp, #72]	; 0x48
   1b560:	movw	r8, #26565	; 0x67c5
   1b564:	movw	r7, #60207	; 0xeb2f
   1b568:	movw	ip, #51847	; 0xca87
   1b56c:	movw	r6, #31153	; 0x79b1
   1b570:	movt	r8, #5718	; 0x1656
   1b574:	movt	r7, #10196	; 0x27d4
   1b578:	movt	ip, #34283	; 0x85eb
   1b57c:	movt	r6, #40503	; 0x9e37
   1b580:	ldrb	r0, [sl], #1
   1b584:	cmp	sl, r9
   1b588:	umull	r2, r3, r0, r8
   1b58c:	eor	r2, r2, r4
   1b590:	lsl	r4, r2, #11
   1b594:	mla	r3, r7, r0, r3
   1b598:	eor	r3, r3, r5
   1b59c:	lsl	r1, r3, #11
   1b5a0:	orr	r4, r4, r3, lsr #21
   1b5a4:	orr	r2, r1, r2, lsr #21
   1b5a8:	mul	r3, r6, r4
   1b5ac:	mla	r2, ip, r2, r3
   1b5b0:	umull	r4, r5, r4, ip
   1b5b4:	add	r5, r2, r5
   1b5b8:	bne	1b580 <__assert_fail@plt+0xa608>
   1b5bc:	lsr	r8, r5, #1
   1b5c0:	movw	r1, #60239	; 0xeb4f
   1b5c4:	eor	r2, r8, r4
   1b5c8:	movt	r1, #10196	; 0x27d4
   1b5cc:	movw	r0, #44605	; 0xae3d
   1b5d0:	movt	r0, #49842	; 0xc2b2
   1b5d4:	mov	r9, #0
   1b5d8:	eor	r3, r9, r5
   1b5dc:	umull	r4, r5, r2, r1
   1b5e0:	movw	ip, #26545	; 0x67b1
   1b5e4:	mul	r0, r0, r2
   1b5e8:	movt	ip, #5718	; 0x1656
   1b5ec:	mla	r8, r1, r3, r0
   1b5f0:	movw	r3, #31225	; 0x79f9
   1b5f4:	lsr	r6, r4, #29
   1b5f8:	movt	r3, #40503	; 0x9e37
   1b5fc:	add	r5, r8, r5
   1b600:	orr	r6, r6, r5, lsl #3
   1b604:	lsr	r7, r5, #29
   1b608:	eor	r4, r4, r6
   1b60c:	eor	r5, r5, r7
   1b610:	mul	ip, ip, r4
   1b614:	mla	ip, r3, r5, ip
   1b618:	umull	r4, r5, r4, r3
   1b61c:	add	ip, ip, r5
   1b620:	eor	r0, ip, r4
   1b624:	eor	r1, r9, ip
   1b628:	add	sp, sp, #84	; 0x54
   1b62c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b630:	ldrd	r6, [sp, #16]
   1b634:	movw	r4, #26565	; 0x67c5
   1b638:	movt	r4, #5718	; 0x1656
   1b63c:	movw	r5, #60207	; 0xeb2f
   1b640:	adds	r4, r4, r6
   1b644:	movt	r5, #10196	; 0x27d4
   1b648:	adc	r5, r5, r7
   1b64c:	b	1b3b8 <__assert_fail@plt+0xa440>
   1b650:	ldr	r7, [sp, #120]	; 0x78
   1b654:	ldr	r9, [sl]
   1b658:	cmp	r7, #1
   1b65c:	bne	1b4e0 <__assert_fail@plt+0xa568>
   1b660:	b	1b4e4 <__assert_fail@plt+0xa56c>
   1b664:	ldrd	r2, [r0]
   1b668:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   1b66c:	sub	sp, sp, #56	; 0x38
   1b670:	add	sl, r0, #40	; 0x28
   1b674:	strd	r2, [sp, #40]	; 0x28
   1b678:	ldrd	r4, [sp, #40]	; 0x28
   1b67c:	ldr	r3, [r0, #72]	; 0x48
   1b680:	cmp	r5, #0
   1b684:	cmpeq	r4, #31
   1b688:	str	r1, [sp, #28]
   1b68c:	add	fp, sl, r3
   1b690:	bls	1bc9c <__assert_fail@plt+0xad24>
   1b694:	ldr	r3, [r0, #8]
   1b698:	movw	ip, #60239	; 0xeb4f
   1b69c:	movt	ip, #10196	; 0x27d4
   1b6a0:	ldr	r2, [r0, #12]
   1b6a4:	movw	r4, #44605	; 0xae3d
   1b6a8:	movt	r4, #49842	; 0xc2b2
   1b6ac:	umull	r6, r7, r3, ip
   1b6b0:	movw	r8, #31153	; 0x79b1
   1b6b4:	mul	r1, r4, r3
   1b6b8:	movt	r8, #40503	; 0x9e37
   1b6bc:	mla	r1, ip, r2, r1
   1b6c0:	strd	r6, [sp, #8]
   1b6c4:	lsl	r6, r3, #1
   1b6c8:	str	r6, [sp, #16]
   1b6cc:	add	r1, r1, r7
   1b6d0:	ldr	r7, [sp, #8]
   1b6d4:	str	r1, [sp, #12]
   1b6d8:	movw	r1, #51847	; 0xca87
   1b6dc:	ldr	r5, [sp, #12]
   1b6e0:	movt	r1, #34283	; 0x85eb
   1b6e4:	lsl	r9, r7, #31
   1b6e8:	ldr	r7, [r0, #16]
   1b6ec:	ldr	r6, [sp, #16]
   1b6f0:	orr	r9, r9, r5, lsr #1
   1b6f4:	lsl	r5, r7, #7
   1b6f8:	ldr	r7, [sp, #12]
   1b6fc:	orr	r6, r6, r2, lsr #31
   1b700:	str	r6, [sp, #32]
   1b704:	lsl	r2, r2, #1
   1b708:	lsl	r6, r7, #31
   1b70c:	ldr	r7, [sp, #8]
   1b710:	orr	r3, r2, r3, lsr #31
   1b714:	str	r3, [sp, #36]	; 0x24
   1b718:	ldr	r3, [r0, #20]
   1b71c:	orr	r6, r6, r7, lsr #1
   1b720:	str	r6, [sp, #48]	; 0x30
   1b724:	ldr	r6, [r0, #16]
   1b728:	orr	r5, r5, r3, lsr #25
   1b72c:	str	r5, [sp, #8]
   1b730:	mov	r5, r3
   1b734:	ldr	r7, [r0, #24]
   1b738:	mul	r2, r4, r6
   1b73c:	lsl	r3, r3, #7
   1b740:	mla	r2, ip, r5, r2
   1b744:	orr	r3, r3, r6, lsr #25
   1b748:	str	r3, [sp, #12]
   1b74c:	lsl	r5, r7, #12
   1b750:	ldrd	r6, [sp, #8]
   1b754:	str	r2, [sp, #4]
   1b758:	mul	r2, r8, r9
   1b75c:	str	r2, [sp, #16]
   1b760:	ldrd	r2, [sp, #32]
   1b764:	adds	r6, r6, r2
   1b768:	ldr	r2, [sp, #16]
   1b76c:	adc	r7, r7, r3
   1b770:	strd	r6, [sp, #32]
   1b774:	ldr	r7, [sp, #48]	; 0x30
   1b778:	ldr	r3, [r0, #28]
   1b77c:	mla	r7, r1, r7, r2
   1b780:	ldr	r2, [r0, #24]
   1b784:	orr	r5, r5, r3, lsr #20
   1b788:	str	r5, [sp, #8]
   1b78c:	lsl	r5, r3, #12
   1b790:	ldr	r3, [r0, #32]
   1b794:	orr	r5, r5, r2, lsr #20
   1b798:	str	r5, [sp, #12]
   1b79c:	str	r7, [sp, #24]
   1b7a0:	lsl	r5, r3, #18
   1b7a4:	ldr	r7, [r0, #16]
   1b7a8:	ldrd	r2, [sp, #8]
   1b7ac:	umull	r6, r7, r7, ip
   1b7b0:	strd	r6, [sp, #16]
   1b7b4:	ldrd	r6, [sp, #32]
   1b7b8:	adds	r6, r6, r2
   1b7bc:	adc	r7, r7, r3
   1b7c0:	strd	r6, [sp, #48]	; 0x30
   1b7c4:	ldr	r7, [r0, #36]	; 0x24
   1b7c8:	ldr	r2, [r0, #32]
   1b7cc:	ldr	r3, [sp, #4]
   1b7d0:	orr	r5, r5, r7, lsr #14
   1b7d4:	str	r5, [sp, #8]
   1b7d8:	lsl	r5, r7, #18
   1b7dc:	umull	r6, r7, r9, r1
   1b7e0:	orr	r5, r5, r2, lsr #14
   1b7e4:	str	r5, [sp, #12]
   1b7e8:	ldr	r5, [sp, #20]
   1b7ec:	add	r3, r3, r5
   1b7f0:	str	r3, [sp, #20]
   1b7f4:	strd	r6, [sp, #32]
   1b7f8:	ldrd	r2, [sp, #48]	; 0x30
   1b7fc:	ldrd	r6, [sp, #8]
   1b800:	ldr	r9, [sp, #20]
   1b804:	adds	r2, r2, r6
   1b808:	ldr	r6, [sp, #36]	; 0x24
   1b80c:	adc	r3, r3, r7
   1b810:	ldr	r7, [sp, #16]
   1b814:	strd	r2, [sp, #8]
   1b818:	lsl	r5, r9, #31
   1b81c:	ldr	r3, [sp, #24]
   1b820:	lsl	r2, r7, #31
   1b824:	add	r3, r3, r6
   1b828:	str	r3, [sp, #36]	; 0x24
   1b82c:	ldrd	r6, [sp, #32]
   1b830:	orr	r2, r2, r9, lsr #1
   1b834:	str	r2, [sp, #48]	; 0x30
   1b838:	ldrd	r2, [sp, #8]
   1b83c:	ldr	r9, [r0, #24]
   1b840:	eor	r3, r3, r7
   1b844:	ldr	r7, [sp, #16]
   1b848:	eor	r2, r2, r6
   1b84c:	strd	r2, [sp, #32]
   1b850:	orr	r5, r5, r7, lsr #1
   1b854:	str	r5, [sp, #24]
   1b858:	umull	r6, r7, r9, ip
   1b85c:	mul	r3, r8, r2
   1b860:	ldr	r2, [r0, #28]
   1b864:	mul	r5, r4, r9
   1b868:	ldr	r9, [sp, #36]	; 0x24
   1b86c:	mla	r5, ip, r2, r5
   1b870:	strd	r6, [sp, #8]
   1b874:	mla	r7, r1, r9, r3
   1b878:	ldr	r3, [sp, #48]	; 0x30
   1b87c:	ldr	r2, [sp, #12]
   1b880:	ldr	r9, [sp, #8]
   1b884:	add	r5, r5, r2
   1b888:	str	r5, [sp, #12]
   1b88c:	mul	r5, r8, r3
   1b890:	ldr	r3, [sp, #32]
   1b894:	lsl	r6, r9, #31
   1b898:	umull	r2, r3, r3, r1
   1b89c:	strd	r2, [sp, #16]
   1b8a0:	ldr	r2, [sp, #12]
   1b8a4:	ldr	r3, [sp, #24]
   1b8a8:	orr	r9, r6, r2, lsr #1
   1b8ac:	ldr	r6, [sp, #20]
   1b8b0:	mla	r5, r1, r3, r5
   1b8b4:	add	r7, r7, r6
   1b8b8:	str	r7, [sp, #20]
   1b8bc:	ldr	r3, [sp, #48]	; 0x30
   1b8c0:	ldrd	r6, [sp, #16]
   1b8c4:	umull	r2, r3, r3, r1
   1b8c8:	strd	r2, [sp, #32]
   1b8cc:	movw	r2, #44643	; 0xae63
   1b8d0:	movt	r2, #49842	; 0xc2b2
   1b8d4:	movw	r3, #51831	; 0xca77
   1b8d8:	adds	r6, r6, r2
   1b8dc:	movt	r3, #34283	; 0x85eb
   1b8e0:	adc	r7, r7, r3
   1b8e4:	ldr	r2, [sp, #36]	; 0x24
   1b8e8:	ldr	r3, [r0, #32]
   1b8ec:	add	r5, r5, r2
   1b8f0:	str	r5, [sp, #36]	; 0x24
   1b8f4:	mul	r4, r4, r3
   1b8f8:	ldrd	r2, [sp, #32]
   1b8fc:	eor	r7, r7, r3
   1b900:	ldr	r3, [sp, #12]
   1b904:	eor	r6, r6, r2
   1b908:	ldr	r2, [sp, #8]
   1b90c:	lsl	r5, r3, #31
   1b910:	mul	r3, r8, r6
   1b914:	orr	r5, r5, r2, lsr #1
   1b918:	ldr	r2, [r0, #36]	; 0x24
   1b91c:	mla	r4, ip, r2, r4
   1b920:	str	r3, [sp, #16]
   1b924:	ldr	r3, [r0, #32]
   1b928:	umull	r2, r3, r3, ip
   1b92c:	add	r4, r4, r3
   1b930:	strd	r2, [sp, #8]
   1b934:	mul	r2, r8, r9
   1b938:	str	r4, [sp, #12]
   1b93c:	ldr	r4, [sp, #8]
   1b940:	ldr	r3, [sp, #16]
   1b944:	lsl	r4, r4, #31
   1b948:	str	r4, [sp, #48]	; 0x30
   1b94c:	str	r2, [sp, #32]
   1b950:	ldr	r4, [sp, #32]
   1b954:	mla	ip, r1, r7, r3
   1b958:	umull	r2, r3, r6, r1
   1b95c:	mla	r5, r1, r5, r4
   1b960:	movw	r4, #44643	; 0xae63
   1b964:	movt	r4, #49842	; 0xc2b2
   1b968:	umull	r6, r7, r9, r1
   1b96c:	strd	r2, [sp, #16]
   1b970:	str	r5, [sp, #32]
   1b974:	ldr	r3, [sp, #12]
   1b978:	ldr	r5, [sp, #20]
   1b97c:	ldr	r9, [sp, #12]
   1b980:	add	ip, ip, r5
   1b984:	str	ip, [sp, #20]
   1b988:	lsl	r3, r3, #31
   1b98c:	str	r3, [sp, #24]
   1b990:	ldrd	r2, [sp, #16]
   1b994:	movw	r5, #51831	; 0xca77
   1b998:	movt	r5, #34283	; 0x85eb
   1b99c:	adds	r2, r2, r4
   1b9a0:	adc	r3, r3, r5
   1b9a4:	strd	r2, [sp, #16]
   1b9a8:	ldr	r3, [sp, #8]
   1b9ac:	ldr	r5, [sp, #48]	; 0x30
   1b9b0:	ldr	r2, [sp, #24]
   1b9b4:	orr	r4, r5, r9, lsr #1
   1b9b8:	ldr	r9, [sp, #32]
   1b9bc:	orr	r5, r2, r3, lsr #1
   1b9c0:	ldrd	r2, [sp, #16]
   1b9c4:	add	r7, r9, r7
   1b9c8:	eor	r6, r6, r2
   1b9cc:	eor	r7, r7, r3
   1b9d0:	mul	ip, r8, r4
   1b9d4:	movw	r3, #51831	; 0xca77
   1b9d8:	mul	r2, r8, r6
   1b9dc:	movt	r3, #34283	; 0x85eb
   1b9e0:	mla	r2, r1, r7, r2
   1b9e4:	umull	r6, r7, r6, r1
   1b9e8:	mla	ip, r1, r5, ip
   1b9ec:	add	r7, r2, r7
   1b9f0:	umull	r4, r5, r4, r1
   1b9f4:	movw	r2, #44643	; 0xae63
   1b9f8:	movt	r2, #49842	; 0xc2b2
   1b9fc:	adds	r6, r6, r2
   1ba00:	add	r5, ip, r5
   1ba04:	eor	r2, r6, r4
   1ba08:	adc	r7, r7, r3
   1ba0c:	eor	r3, r7, r5
   1ba10:	movw	r4, #44643	; 0xae63
   1ba14:	mul	r8, r8, r2
   1ba18:	movt	r4, #49842	; 0xc2b2
   1ba1c:	mla	r8, r1, r3, r8
   1ba20:	movw	r5, #51831	; 0xca77
   1ba24:	umull	r2, r3, r2, r1
   1ba28:	movt	r5, #34283	; 0x85eb
   1ba2c:	add	r3, r8, r3
   1ba30:	adds	r2, r2, r4
   1ba34:	adc	r3, r3, r5
   1ba38:	add	r0, r0, #48	; 0x30
   1ba3c:	str	r0, [sp, #16]
   1ba40:	ldrd	r0, [sp, #40]	; 0x28
   1ba44:	ldr	r5, [sp, #16]
   1ba48:	adds	r0, r0, r2
   1ba4c:	adc	r1, r1, r3
   1ba50:	cmp	fp, r5
   1ba54:	bcc	1bb38 <__assert_fail@plt+0xabc0>
   1ba58:	movw	r9, #60239	; 0xeb4f
   1ba5c:	movw	ip, #51847	; 0xca87
   1ba60:	movw	r8, #31153	; 0x79b1
   1ba64:	movt	r9, #10196	; 0x27d4
   1ba68:	movt	ip, #34283	; 0x85eb
   1ba6c:	movt	r8, #40503	; 0x9e37
   1ba70:	movw	r6, #44605	; 0xae3d
   1ba74:	movt	r6, #49842	; 0xc2b2
   1ba78:	str	r6, [sp, #8]
   1ba7c:	mov	r6, r5
   1ba80:	ldr	r7, [sp, #28]
   1ba84:	cmp	r7, #1
   1ba88:	ldreq	r2, [sl]
   1ba8c:	ldreq	r5, [sl, #4]
   1ba90:	ldrne	r5, [sl]
   1ba94:	ldrne	r2, [sl, #4]
   1ba98:	revne	r5, r5
   1ba9c:	revne	r2, r2
   1baa0:	ldr	r7, [sp, #8]
   1baa4:	add	r4, r6, #8
   1baa8:	mov	sl, r6
   1baac:	mov	r6, r4
   1bab0:	mul	r3, r7, r2
   1bab4:	mla	r5, r9, r5, r3
   1bab8:	umull	r2, r3, r2, r9
   1babc:	add	r3, r5, r3
   1bac0:	lsl	r5, r3, #31
   1bac4:	lsl	r7, r2, #31
   1bac8:	orr	r5, r5, r2, lsr #1
   1bacc:	orr	r3, r7, r3, lsr #1
   1bad0:	mul	r7, r8, r3
   1bad4:	mla	r5, ip, r5, r7
   1bad8:	umull	r2, r3, r3, ip
   1badc:	eor	r2, r2, r0
   1bae0:	add	r3, r5, r3
   1bae4:	eor	r3, r3, r1
   1bae8:	lsl	r0, r2, #27
   1baec:	lsl	r1, r3, #27
   1baf0:	orr	r0, r0, r3, lsr #5
   1baf4:	orr	r2, r1, r2, lsr #5
   1baf8:	mul	r3, r8, r0
   1bafc:	mla	r2, ip, r2, r3
   1bb00:	movw	r3, #51831	; 0xca77
   1bb04:	umull	r0, r1, r0, ip
   1bb08:	movt	r3, #34283	; 0x85eb
   1bb0c:	add	r1, r2, r1
   1bb10:	movw	r2, #44643	; 0xae63
   1bb14:	movt	r2, #49842	; 0xc2b2
   1bb18:	adds	r0, r0, r2
   1bb1c:	adc	r1, r1, r3
   1bb20:	cmp	fp, r4
   1bb24:	bcs	1ba80 <__assert_fail@plt+0xab08>
   1bb28:	ldr	r3, [sp, #16]
   1bb2c:	rsb	sl, r3, fp
   1bb30:	bic	sl, sl, #7
   1bb34:	add	sl, r3, sl
   1bb38:	add	ip, sl, #4
   1bb3c:	cmp	fp, ip
   1bb40:	bcc	1bbc0 <__assert_fail@plt+0xac48>
   1bb44:	ldr	r4, [sp, #28]
   1bb48:	ldr	r9, [sl]
   1bb4c:	cmp	r4, #1
   1bb50:	revne	r9, r9
   1bb54:	movw	r4, #51847	; 0xca87
   1bb58:	movt	r4, #34283	; 0x85eb
   1bb5c:	movw	r8, #31153	; 0x79b1
   1bb60:	movt	r8, #40503	; 0x9e37
   1bb64:	umull	r4, r5, r9, r4
   1bb68:	movw	r7, #44605	; 0xae3d
   1bb6c:	mov	sl, ip
   1bb70:	movt	r7, #49842	; 0xc2b2
   1bb74:	eor	r0, r0, r4
   1bb78:	movw	r6, #60239	; 0xeb4f
   1bb7c:	movt	r6, #10196	; 0x27d4
   1bb80:	movw	r2, #31225	; 0x79f9
   1bb84:	lsl	r4, r0, #23
   1bb88:	movt	r2, #40503	; 0x9e37
   1bb8c:	mla	r5, r8, r9, r5
   1bb90:	movw	r3, #26545	; 0x67b1
   1bb94:	movt	r3, #5718	; 0x1656
   1bb98:	eor	r1, r1, r5
   1bb9c:	lsl	ip, r1, #23
   1bba0:	orr	r1, r4, r1, lsr #9
   1bba4:	orr	r0, ip, r0, lsr #9
   1bba8:	mul	r7, r7, r1
   1bbac:	mla	r7, r6, r0, r7
   1bbb0:	umull	r0, r1, r1, r6
   1bbb4:	add	r1, r7, r1
   1bbb8:	adds	r0, r0, r2
   1bbbc:	adc	r1, r1, r3
   1bbc0:	cmp	fp, sl
   1bbc4:	bls	1bc24 <__assert_fail@plt+0xacac>
   1bbc8:	movw	r8, #26565	; 0x67c5
   1bbcc:	movw	r7, #60207	; 0xeb2f
   1bbd0:	movw	ip, #51847	; 0xca87
   1bbd4:	movw	r6, #31153	; 0x79b1
   1bbd8:	movt	r8, #5718	; 0x1656
   1bbdc:	movt	r7, #10196	; 0x27d4
   1bbe0:	movt	ip, #34283	; 0x85eb
   1bbe4:	movt	r6, #40503	; 0x9e37
   1bbe8:	ldrb	r4, [sl], #1
   1bbec:	cmp	sl, fp
   1bbf0:	umull	r2, r3, r4, r8
   1bbf4:	eor	r2, r2, r0
   1bbf8:	lsl	r0, r2, #11
   1bbfc:	mla	r3, r7, r4, r3
   1bc00:	eor	r3, r3, r1
   1bc04:	lsl	r1, r3, #11
   1bc08:	orr	r0, r0, r3, lsr #21
   1bc0c:	orr	r2, r1, r2, lsr #21
   1bc10:	mul	r3, r6, r0
   1bc14:	mla	r2, ip, r2, r3
   1bc18:	umull	r0, r1, r0, ip
   1bc1c:	add	r1, r2, r1
   1bc20:	bne	1bbe8 <__assert_fail@plt+0xac70>
   1bc24:	lsr	r6, r1, #1
   1bc28:	movw	r3, #44605	; 0xae3d
   1bc2c:	eor	r0, r0, r6
   1bc30:	movt	r3, #49842	; 0xc2b2
   1bc34:	mov	r7, #0
   1bc38:	movw	r2, #60239	; 0xeb4f
   1bc3c:	eor	r1, r1, r7
   1bc40:	movt	r2, #10196	; 0x27d4
   1bc44:	mul	r3, r3, r0
   1bc48:	movw	r6, #26545	; 0x67b1
   1bc4c:	mla	r8, r2, r1, r3
   1bc50:	movt	r6, #5718	; 0x1656
   1bc54:	umull	r2, r3, r0, r2
   1bc58:	movw	ip, #31225	; 0x79f9
   1bc5c:	movt	ip, #40503	; 0x9e37
   1bc60:	add	r3, r8, r3
   1bc64:	lsr	r5, r3, #29
   1bc68:	lsr	r4, r2, #29
   1bc6c:	orr	r4, r4, r3, lsl #3
   1bc70:	eor	r3, r3, r5
   1bc74:	eor	r2, r2, r4
   1bc78:	mul	r6, r6, r2
   1bc7c:	mla	r6, ip, r3, r6
   1bc80:	umull	r2, r3, r2, ip
   1bc84:	add	r6, r6, r3
   1bc88:	eor	r0, r6, r2
   1bc8c:	eor	r1, r7, r6
   1bc90:	add	sp, sp, #56	; 0x38
   1bc94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1bc98:	bx	lr
   1bc9c:	ldrd	r2, [r0, #24]
   1bca0:	movw	r4, #26565	; 0x67c5
   1bca4:	movt	r4, #5718	; 0x1656
   1bca8:	movw	r5, #60207	; 0xeb2f
   1bcac:	adds	r2, r2, r4
   1bcb0:	movt	r5, #10196	; 0x27d4
   1bcb4:	adc	r3, r3, r5
   1bcb8:	b	1ba38 <__assert_fail@plt+0xaac0>
   1bcbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcc0:	sub	sp, sp, #92	; 0x5c
   1bcc4:	ldrd	r4, [r0]
   1bcc8:	add	r7, r1, r2
   1bccc:	ldr	ip, [r0, #72]	; 0x48
   1bcd0:	mov	r6, r2
   1bcd4:	adds	r4, r4, r2
   1bcd8:	str	r3, [sp, #72]	; 0x48
   1bcdc:	add	r3, r2, ip
   1bce0:	adc	r5, r5, #0
   1bce4:	cmp	r3, #31
   1bce8:	str	r0, [sp, #64]	; 0x40
   1bcec:	str	r1, [sp, #68]	; 0x44
   1bcf0:	str	r7, [sp, #80]	; 0x50
   1bcf4:	strd	r4, [r0]
   1bcf8:	bls	1c2d0 <__assert_fail@plt+0xb358>
   1bcfc:	cmp	ip, #0
   1bd00:	bne	1c0e4 <__assert_fail@plt+0xb16c>
   1bd04:	ldr	r7, [sp, #68]	; 0x44
   1bd08:	ldr	r8, [sp, #80]	; 0x50
   1bd0c:	add	r3, r7, #32
   1bd10:	cmp	r8, r3
   1bd14:	bcc	1c09c <__assert_fail@plt+0xb124>
   1bd18:	ldr	r1, [sp, #64]	; 0x40
   1bd1c:	movw	fp, #60239	; 0xeb4f
   1bd20:	ldr	r3, [sp, #64]	; 0x40
   1bd24:	movw	sl, #44605	; 0xae3d
   1bd28:	ldr	r5, [sp, #64]	; 0x40
   1bd2c:	movw	r8, #31153	; 0x79b1
   1bd30:	ldr	r7, [sp, #64]	; 0x40
   1bd34:	movt	r8, #40503	; 0x9e37
   1bd38:	ldrd	r0, [r1, #8]
   1bd3c:	movt	fp, #10196	; 0x27d4
   1bd40:	ldrd	r2, [r3, #16]
   1bd44:	movt	sl, #49842	; 0xc2b2
   1bd48:	ldrd	r6, [r7, #32]
   1bd4c:	ldrd	r4, [r5, #24]
   1bd50:	ldr	r9, [sp, #80]	; 0x50
   1bd54:	strd	r6, [sp, #48]	; 0x30
   1bd58:	movw	r6, #51847	; 0xca87
   1bd5c:	sub	r9, r9, #32
   1bd60:	strd	r0, [sp, #32]
   1bd64:	strd	r2, [sp, #24]
   1bd68:	movt	r6, #34283	; 0x85eb
   1bd6c:	strd	r4, [sp, #40]	; 0x28
   1bd70:	str	r8, [sp, #60]	; 0x3c
   1bd74:	str	r9, [sp, #76]	; 0x4c
   1bd78:	ldr	ip, [sp, #68]	; 0x44
   1bd7c:	b	1bf18 <__assert_fail@plt+0xafa0>
   1bd80:	ldr	r4, [ip, #4]
   1bd84:	ldr	r1, [ip]
   1bd88:	rev	r4, r4
   1bd8c:	ldr	r8, [ip, #20]
   1bd90:	rev	r1, r1
   1bd94:	ldr	r0, [ip, #12]
   1bd98:	mul	r5, sl, r4
   1bd9c:	rev	r8, r8
   1bda0:	mla	r1, fp, r1, r5
   1bda4:	str	r8, [sp, #84]	; 0x54
   1bda8:	umull	r4, r5, r4, fp
   1bdac:	ldrd	r8, [sp, #32]
   1bdb0:	ldr	r2, [ip, #8]
   1bdb4:	rev	r0, r0
   1bdb8:	adds	r4, r4, r8
   1bdbc:	add	r5, r1, r5
   1bdc0:	adc	r5, r5, r9
   1bdc4:	ldr	r3, [ip, #16]
   1bdc8:	ldr	r9, [sp, #84]	; 0x54
   1bdcc:	rev	r2, r2
   1bdd0:	rev	r3, r3
   1bdd4:	mul	r7, sl, r0
   1bdd8:	mul	r1, sl, r9
   1bddc:	mla	r2, fp, r2, r7
   1bde0:	lsl	r7, r4, #31
   1bde4:	mla	r3, fp, r3, r1
   1bde8:	orr	r7, r7, r5, lsr #1
   1bdec:	umull	r0, r1, r0, fp
   1bdf0:	lsl	r5, r5, #31
   1bdf4:	umull	r8, r9, r9, fp
   1bdf8:	orr	r5, r5, r4, lsr #1
   1bdfc:	add	r1, r2, r1
   1be00:	str	r5, [sp, #32]
   1be04:	ldr	r2, [sp, #60]	; 0x3c
   1be08:	add	r9, r3, r9
   1be0c:	ldrd	r4, [sp, #24]
   1be10:	adds	r0, r0, r4
   1be14:	ldr	r4, [sp, #60]	; 0x3c
   1be18:	adc	r1, r1, r5
   1be1c:	mul	r5, r2, r7
   1be20:	ldrd	r2, [sp, #40]	; 0x28
   1be24:	adds	r2, r2, r8
   1be28:	lsl	r8, r0, #31
   1be2c:	orr	r8, r8, r1, lsr #1
   1be30:	adc	r3, r3, r9
   1be34:	lsl	r9, r1, #31
   1be38:	lsl	r1, r2, #31
   1be3c:	mul	r4, r4, r8
   1be40:	orr	r1, r1, r3, lsr #1
   1be44:	orr	r0, r9, r0, lsr #1
   1be48:	lsl	r9, r3, #31
   1be4c:	orr	r2, r9, r2, lsr #1
   1be50:	ldr	r3, [ip, #24]
   1be54:	rev	r3, r3
   1be58:	str	r4, [sp, #24]
   1be5c:	ldr	r4, [sp, #60]	; 0x3c
   1be60:	mul	r9, r4, r1
   1be64:	ldr	r4, [sp, #32]
   1be68:	mla	r2, r6, r2, r9
   1be6c:	mla	r5, r6, r4, r5
   1be70:	str	r5, [sp, #40]	; 0x28
   1be74:	umull	r4, r5, r7, r6
   1be78:	ldr	r7, [sp, #40]	; 0x28
   1be7c:	strd	r4, [sp, #32]
   1be80:	ldr	r5, [sp, #24]
   1be84:	ldr	r4, [sp, #36]	; 0x24
   1be88:	mla	r0, r6, r0, r5
   1be8c:	add	r7, r7, r4
   1be90:	umull	r4, r5, r8, r6
   1be94:	str	r7, [sp, #36]	; 0x24
   1be98:	umull	r8, r9, r1, r6
   1be9c:	strd	r4, [sp, #24]
   1bea0:	add	r2, r2, r9
   1bea4:	ldr	r5, [ip, #28]
   1bea8:	ldr	r7, [sp, #28]
   1beac:	rev	r5, r5
   1beb0:	strd	r8, [sp, #40]	; 0x28
   1beb4:	add	r0, r0, r7
   1beb8:	str	r2, [sp, #44]	; 0x2c
   1bebc:	str	r0, [sp, #28]
   1bec0:	mul	r1, sl, r5
   1bec4:	add	ip, ip, #32
   1bec8:	mla	r1, fp, r3, r1
   1becc:	ldr	r4, [sp, #60]	; 0x3c
   1bed0:	umull	r2, r3, r5, fp
   1bed4:	add	r3, r1, r3
   1bed8:	ldrd	r0, [sp, #48]	; 0x30
   1bedc:	adds	r2, r2, r0
   1bee0:	adc	r3, r3, r1
   1bee4:	ldr	r1, [sp, #76]	; 0x4c
   1bee8:	lsl	r0, r2, #31
   1beec:	cmp	r1, ip
   1bef0:	lsl	r1, r3, #31
   1bef4:	orr	r3, r0, r3, lsr #1
   1bef8:	orr	r2, r1, r2, lsr #1
   1befc:	umull	r8, r9, r3, r6
   1bf00:	mul	r1, r4, r3
   1bf04:	mla	r2, r6, r2, r1
   1bf08:	strd	r8, [sp, #48]	; 0x30
   1bf0c:	add	r2, r2, r9
   1bf10:	str	r2, [sp, #52]	; 0x34
   1bf14:	bcc	1c05c <__assert_fail@plt+0xb0e4>
   1bf18:	ldr	r3, [sp, #72]	; 0x48
   1bf1c:	cmp	r3, #1
   1bf20:	bne	1bd80 <__assert_fail@plt+0xae08>
   1bf24:	ldr	r8, [ip]
   1bf28:	ldr	r0, [ip, #8]
   1bf2c:	ldr	r1, [ip, #4]
   1bf30:	ldr	r5, [ip, #12]
   1bf34:	mul	r3, sl, r8
   1bf38:	ldr	r2, [ip, #16]
   1bf3c:	mla	r4, fp, r1, r3
   1bf40:	ldr	r3, [ip, #20]
   1bf44:	mul	r1, sl, r0
   1bf48:	mla	r5, fp, r5, r1
   1bf4c:	umull	r8, r9, r8, fp
   1bf50:	umull	r0, r1, r0, fp
   1bf54:	str	r5, [sp, #84]	; 0x54
   1bf58:	add	r9, r4, r9
   1bf5c:	ldrd	r4, [sp, #32]
   1bf60:	adds	r8, r8, r4
   1bf64:	adc	r9, r9, r5
   1bf68:	lsl	r4, r8, #31
   1bf6c:	mul	r5, sl, r2
   1bf70:	lsl	r7, r9, #31
   1bf74:	mla	r3, fp, r3, r5
   1bf78:	orr	r4, r4, r9, lsr #1
   1bf7c:	ldr	r5, [sp, #84]	; 0x54
   1bf80:	orr	r7, r7, r8, lsr #1
   1bf84:	umull	r8, r9, r2, fp
   1bf88:	add	r1, r5, r1
   1bf8c:	str	r3, [sp, #56]	; 0x38
   1bf90:	ldrd	r2, [sp, #24]
   1bf94:	str	r7, [sp, #32]
   1bf98:	adds	r0, r0, r2
   1bf9c:	ldr	r5, [sp, #56]	; 0x38
   1bfa0:	adc	r1, r1, r3
   1bfa4:	ldr	r3, [sp, #60]	; 0x3c
   1bfa8:	add	r9, r5, r9
   1bfac:	ldr	r5, [ip, #24]
   1bfb0:	mul	r7, r3, r4
   1bfb4:	ldrd	r2, [sp, #40]	; 0x28
   1bfb8:	adds	r2, r2, r8
   1bfbc:	lsl	r8, r1, #31
   1bfc0:	adc	r3, r3, r9
   1bfc4:	lsl	r9, r0, #31
   1bfc8:	orr	r9, r9, r1, lsr #1
   1bfcc:	lsl	r1, r2, #31
   1bfd0:	orr	r8, r8, r0, lsr #1
   1bfd4:	orr	r1, r1, r3, lsr #1
   1bfd8:	ldr	r0, [sp, #60]	; 0x3c
   1bfdc:	lsl	r3, r3, #31
   1bfe0:	str	r1, [sp, #40]	; 0x28
   1bfe4:	orr	r3, r3, r2, lsr #1
   1bfe8:	ldr	r1, [sp, #32]
   1bfec:	str	r8, [sp, #24]
   1bff0:	mul	r8, r0, r9
   1bff4:	str	r3, [sp, #84]	; 0x54
   1bff8:	mla	r7, r6, r1, r7
   1bffc:	ldr	r3, [ip, #28]
   1c000:	umull	r0, r1, r4, r6
   1c004:	strd	r0, [sp, #32]
   1c008:	ldr	r2, [sp, #36]	; 0x24
   1c00c:	ldr	r1, [sp, #24]
   1c010:	add	r7, r7, r2
   1c014:	ldr	r0, [sp, #40]	; 0x28
   1c018:	str	r7, [sp, #36]	; 0x24
   1c01c:	ldr	r7, [sp, #60]	; 0x3c
   1c020:	mla	r8, r6, r1, r8
   1c024:	mul	r4, r7, r0
   1c028:	umull	r0, r1, r9, r6
   1c02c:	ldr	r9, [sp, #40]	; 0x28
   1c030:	strd	r0, [sp, #24]
   1c034:	ldr	r1, [sp, #84]	; 0x54
   1c038:	mla	r2, r6, r1, r4
   1c03c:	ldr	r4, [sp, #28]
   1c040:	add	r8, r8, r4
   1c044:	str	r8, [sp, #28]
   1c048:	umull	r8, r9, r9, r6
   1c04c:	add	r2, r2, r9
   1c050:	strd	r8, [sp, #40]	; 0x28
   1c054:	str	r2, [sp, #44]	; 0x2c
   1c058:	b	1bec0 <__assert_fail@plt+0xaf48>
   1c05c:	ldr	r4, [sp, #64]	; 0x40
   1c060:	ldrd	r0, [sp, #32]
   1c064:	ldrd	r6, [sp, #24]
   1c068:	ldr	sl, [sp, #68]	; 0x44
   1c06c:	ldr	r9, [sp, #76]	; 0x4c
   1c070:	strd	r0, [r4, #8]
   1c074:	rsb	r3, sl, r9
   1c078:	strd	r6, [r4, #16]
   1c07c:	ldrd	r0, [sp, #40]	; 0x28
   1c080:	bic	r3, r3, #31
   1c084:	ldrd	r6, [sp, #48]	; 0x30
   1c088:	add	r3, r3, #32
   1c08c:	add	sl, sl, r3
   1c090:	str	sl, [sp, #68]	; 0x44
   1c094:	strd	r0, [r4, #24]
   1c098:	strd	r6, [r4, #32]
   1c09c:	ldr	r9, [sp, #68]	; 0x44
   1c0a0:	ldr	sl, [sp, #80]	; 0x50
   1c0a4:	cmp	r9, sl
   1c0a8:	bcc	1c0b8 <__assert_fail@plt+0xb140>
   1c0ac:	mov	r0, #0
   1c0b0:	add	sp, sp, #92	; 0x5c
   1c0b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0b8:	rsb	r4, r9, sl
   1c0bc:	ldr	ip, [sp, #64]	; 0x40
   1c0c0:	mov	r1, r9
   1c0c4:	add	r0, ip, #40	; 0x28
   1c0c8:	mov	r2, r4
   1c0cc:	bl	10d74 <memcpy@plt>
   1c0d0:	ldr	r5, [sp, #64]	; 0x40
   1c0d4:	mov	r0, #0
   1c0d8:	str	r4, [r5, #72]	; 0x48
   1c0dc:	add	sp, sp, #92	; 0x5c
   1c0e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0e4:	ldr	r9, [sp, #64]	; 0x40
   1c0e8:	rsb	r2, ip, #32
   1c0ec:	add	r0, r9, #40	; 0x28
   1c0f0:	add	r0, r0, ip
   1c0f4:	bl	10d74 <memcpy@plt>
   1c0f8:	ldr	sl, [sp, #72]	; 0x48
   1c0fc:	cmp	sl, #1
   1c100:	ldrd	sl, [r9, #8]
   1c104:	beq	1c2f8 <__assert_fail@plt+0xb380>
   1c108:	ldr	r7, [sp, #64]	; 0x40
   1c10c:	movw	ip, #44605	; 0xae3d
   1c110:	movt	ip, #49842	; 0xc2b2
   1c114:	movw	r3, #60239	; 0xeb4f
   1c118:	movt	r3, #10196	; 0x27d4
   1c11c:	ldr	r8, [r7, #44]	; 0x2c
   1c120:	ldr	r6, [r7, #40]	; 0x28
   1c124:	rev	r8, r8
   1c128:	ldr	r0, [r7, #52]	; 0x34
   1c12c:	rev	r6, r6
   1c130:	ldr	r4, [r7, #48]	; 0x30
   1c134:	mul	r1, ip, r8
   1c138:	rev	r0, r0
   1c13c:	mla	r1, r3, r6, r1
   1c140:	ldr	r2, [r7, #60]	; 0x3c
   1c144:	ldr	r5, [r7, #56]	; 0x38
   1c148:	rev	r4, r4
   1c14c:	ldrd	r6, [r7, #16]
   1c150:	rev	r2, r2
   1c154:	umull	r8, r9, r8, r3
   1c158:	str	r1, [sp, #24]
   1c15c:	mul	r1, ip, r0
   1c160:	strd	r6, [sp, #8]
   1c164:	mla	r4, r3, r4, r1
   1c168:	rev	r5, r5
   1c16c:	umull	r0, r1, r0, r3
   1c170:	ldr	r7, [sp, #64]	; 0x40
   1c174:	ldr	r6, [sp, #24]
   1c178:	adds	r8, r8, sl
   1c17c:	mul	ip, ip, r2
   1c180:	add	r9, r6, r9
   1c184:	mla	ip, r3, r5, ip
   1c188:	add	r1, r4, r1
   1c18c:	umull	r2, r3, r2, r3
   1c190:	ldrd	r4, [r7, #24]
   1c194:	ldrd	r6, [sp, #8]
   1c198:	adc	r9, r9, fp
   1c19c:	add	r3, ip, r3
   1c1a0:	ldr	sl, [sp, #64]	; 0x40
   1c1a4:	adds	r0, r0, r6
   1c1a8:	lsl	ip, r9, #31
   1c1ac:	adc	r1, r1, r7
   1c1b0:	adds	r2, r2, r4
   1c1b4:	adc	r3, r3, r5
   1c1b8:	lsl	r7, r8, #31
   1c1bc:	orr	r7, r7, r9, lsr #1
   1c1c0:	lsl	r6, r2, #31
   1c1c4:	orr	r8, ip, r8, lsr #1
   1c1c8:	movw	ip, #51847	; 0xca87
   1c1cc:	movt	ip, #34283	; 0x85eb
   1c1d0:	orr	r6, r6, r3, lsr #1
   1c1d4:	ldr	r9, [sp, #64]	; 0x40
   1c1d8:	lsl	r3, r3, #31
   1c1dc:	lsl	r4, r0, #31
   1c1e0:	orr	r2, r3, r2, lsr #1
   1c1e4:	movw	r5, #31153	; 0x79b1
   1c1e8:	ldr	r3, [sl, #68]	; 0x44
   1c1ec:	movt	r5, #40503	; 0x9e37
   1c1f0:	orr	r4, r4, r1, lsr #1
   1c1f4:	umull	sl, fp, r7, ip
   1c1f8:	lsl	r1, r1, #31
   1c1fc:	orr	r0, r1, r0, lsr #1
   1c200:	ldr	r1, [r9, #64]	; 0x40
   1c204:	mul	r9, r5, r7
   1c208:	rev	r3, r3
   1c20c:	mla	r8, ip, r8, r9
   1c210:	rev	r9, r1
   1c214:	mul	r7, r5, r4
   1c218:	mul	r1, r5, r6
   1c21c:	ldr	r5, [sp, #64]	; 0x40
   1c220:	add	fp, r8, fp
   1c224:	ldr	r8, [sp, #64]	; 0x40
   1c228:	mla	r0, ip, r0, r7
   1c22c:	strd	sl, [r5, #8]
   1c230:	umull	r6, r7, r6, ip
   1c234:	ldrd	sl, [r5, #32]
   1c238:	umull	r4, r5, r4, ip
   1c23c:	mla	r2, ip, r2, r1
   1c240:	add	r5, r0, r5
   1c244:	add	r7, r2, r7
   1c248:	strd	r4, [r8, #16]
   1c24c:	strd	r6, [r8, #24]
   1c250:	movw	r1, #44605	; 0xae3d
   1c254:	movt	r1, #49842	; 0xc2b2
   1c258:	movw	r2, #60239	; 0xeb4f
   1c25c:	movt	r2, #10196	; 0x27d4
   1c260:	mul	r1, r1, r3
   1c264:	movw	r0, #31153	; 0x79b1
   1c268:	mla	r9, r2, r9, r1
   1c26c:	movt	r0, #40503	; 0x9e37
   1c270:	umull	r2, r3, r3, r2
   1c274:	movw	ip, #51847	; 0xca87
   1c278:	movt	ip, #34283	; 0x85eb
   1c27c:	ldr	r5, [sp, #64]	; 0x40
   1c280:	adds	sl, sl, r2
   1c284:	add	r3, r9, r3
   1c288:	adc	fp, fp, r3
   1c28c:	lsl	r2, sl, #31
   1c290:	ldr	r4, [r5, #72]	; 0x48
   1c294:	mov	r1, #0
   1c298:	orr	r2, r2, fp, lsr #1
   1c29c:	lsl	r3, fp, #31
   1c2a0:	orr	sl, r3, sl, lsr #1
   1c2a4:	ldr	r6, [sp, #68]	; 0x44
   1c2a8:	mul	r0, r0, r2
   1c2ac:	rsb	r4, r4, #32
   1c2b0:	umull	r2, r3, r2, ip
   1c2b4:	add	r6, r6, r4
   1c2b8:	mla	r0, ip, sl, r0
   1c2bc:	str	r6, [sp, #68]	; 0x44
   1c2c0:	str	r1, [r5, #72]	; 0x48
   1c2c4:	add	r3, r0, r3
   1c2c8:	strd	r2, [r5, #32]
   1c2cc:	b	1bd04 <__assert_fail@plt+0xad8c>
   1c2d0:	mov	r8, r0
   1c2d4:	add	r0, r0, #40	; 0x28
   1c2d8:	add	r0, r0, ip
   1c2dc:	bl	10d74 <memcpy@plt>
   1c2e0:	ldr	r3, [r8, #72]	; 0x48
   1c2e4:	mov	r0, #0
   1c2e8:	add	r6, r3, r6
   1c2ec:	str	r6, [r8, #72]	; 0x48
   1c2f0:	add	sp, sp, #92	; 0x5c
   1c2f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2f8:	ldr	r8, [r9, #40]	; 0x28
   1c2fc:	movw	r2, #44605	; 0xae3d
   1c300:	ldr	r5, [r9, #44]	; 0x2c
   1c304:	movt	r2, #49842	; 0xc2b2
   1c308:	movw	r3, #60239	; 0xeb4f
   1c30c:	movt	r3, #10196	; 0x27d4
   1c310:	mul	ip, r2, r8
   1c314:	ldr	r0, [r9, #48]	; 0x30
   1c318:	ldr	r1, [r9, #56]	; 0x38
   1c31c:	movw	r7, #31153	; 0x79b1
   1c320:	ldr	r4, [r9, #52]	; 0x34
   1c324:	movt	r7, #40503	; 0x9e37
   1c328:	ldr	r6, [r9, #60]	; 0x3c
   1c32c:	mla	r5, r3, r5, ip
   1c330:	umull	r8, r9, r8, r3
   1c334:	mul	ip, r2, r0
   1c338:	add	r9, r5, r9
   1c33c:	ldr	r5, [sp, #64]	; 0x40
   1c340:	adds	sl, sl, r8
   1c344:	mla	ip, r3, r4, ip
   1c348:	adc	fp, fp, r9
   1c34c:	ldrd	r4, [r5, #16]
   1c350:	mul	r2, r2, r1
   1c354:	strd	r4, [sp]
   1c358:	ldr	r5, [sp, #64]	; 0x40
   1c35c:	umull	r8, r9, r0, r3
   1c360:	ldrd	r4, [r5, #24]
   1c364:	umull	r0, r1, r1, r3
   1c368:	strd	r4, [sp, #16]
   1c36c:	mla	r2, r3, r6, r2
   1c370:	ldrd	r4, [sp]
   1c374:	add	r9, ip, r9
   1c378:	lsl	ip, sl, #31
   1c37c:	adds	r8, r8, r4
   1c380:	orr	ip, ip, fp, lsr #1
   1c384:	add	r1, r2, r1
   1c388:	ldrd	r2, [sp, #16]
   1c38c:	adc	r9, r9, r5
   1c390:	lsl	r5, fp, #31
   1c394:	adds	r2, r2, r0
   1c398:	lsl	r4, r8, #31
   1c39c:	adc	r3, r3, r1
   1c3a0:	lsl	r1, r9, #31
   1c3a4:	orr	r5, r5, sl, lsr #1
   1c3a8:	orr	r1, r1, r8, lsr #1
   1c3ac:	movw	r0, #51847	; 0xca87
   1c3b0:	lsl	r8, r3, #31
   1c3b4:	movt	r0, #34283	; 0x85eb
   1c3b8:	lsl	r6, r2, #31
   1c3bc:	orr	r8, r8, r2, lsr #1
   1c3c0:	orr	r4, r4, r9, lsr #1
   1c3c4:	mul	r2, r7, ip
   1c3c8:	ldr	r9, [sp, #64]	; 0x40
   1c3cc:	umull	sl, fp, ip, r0
   1c3d0:	orr	r6, r6, r3, lsr #1
   1c3d4:	mla	r5, r0, r5, r2
   1c3d8:	ldr	r3, [r9, #64]	; 0x40
   1c3dc:	mul	ip, r7, r4
   1c3e0:	ldr	r9, [r9, #68]	; 0x44
   1c3e4:	add	fp, r5, fp
   1c3e8:	ldr	r5, [sp, #64]	; 0x40
   1c3ec:	mla	r1, r0, r1, ip
   1c3f0:	strd	sl, [r5, #8]
   1c3f4:	ldrd	sl, [r5, #32]
   1c3f8:	umull	r4, r5, r4, r0
   1c3fc:	mul	r2, r7, r6
   1c400:	add	r5, r1, r5
   1c404:	mla	r2, r0, r8, r2
   1c408:	umull	r0, r1, r6, r0
   1c40c:	ldr	r6, [sp, #64]	; 0x40
   1c410:	add	r1, r2, r1
   1c414:	strd	r4, [r6, #16]
   1c418:	strd	r0, [r6, #24]
   1c41c:	b	1c250 <__assert_fail@plt+0xb2d8>
   1c420:	movw	r0, #602	; 0x25a
   1c424:	bx	lr
   1c428:	movw	ip, #17668	; 0x4504
   1c42c:	ands	r3, r0, #3
   1c430:	movt	ip, #2
   1c434:	push	{lr}		; (str lr, [sp, #-4]!)
   1c438:	sub	sp, sp, #12
   1c43c:	ldrb	ip, [ip]
   1c440:	bne	1c45c <__assert_fail@plt+0xb4e4>
   1c444:	cmp	ip, #1
   1c448:	str	r3, [sp]
   1c44c:	beq	1c474 <__assert_fail@plt+0xb4fc>
   1c450:	bl	1a7d8 <__assert_fail@plt+0x9860>
   1c454:	add	sp, sp, #12
   1c458:	pop	{pc}		; (ldr pc, [sp], #4)
   1c45c:	cmp	ip, #1
   1c460:	movne	ip, #1
   1c464:	movne	r3, #0
   1c468:	strne	ip, [sp]
   1c46c:	bne	1c450 <__assert_fail@plt+0xb4d8>
   1c470:	str	ip, [sp]
   1c474:	mov	r3, ip
   1c478:	bl	1a7d8 <__assert_fail@plt+0x9860>
   1c47c:	add	sp, sp, #12
   1c480:	pop	{pc}		; (ldr pc, [sp], #4)
   1c484:	mov	r0, #48	; 0x30
   1c488:	b	10e1c <malloc@plt>
   1c48c:	push	{r3, lr}
   1c490:	bl	10d44 <free@plt>
   1c494:	mov	r0, #0
   1c498:	pop	{r3, pc}
   1c49c:	add	r3, r1, #48	; 0x30
   1c4a0:	push	{r4, r5}
   1c4a4:	add	r1, r1, #16
   1c4a8:	ldr	r5, [r1, #-16]
   1c4ac:	add	r0, r0, #16
   1c4b0:	ldr	r4, [r1, #-12]
   1c4b4:	ldr	ip, [r1, #-8]
   1c4b8:	ldr	r2, [r1, #-4]
   1c4bc:	cmp	r1, r3
   1c4c0:	str	r5, [r0, #-16]
   1c4c4:	str	r4, [r0, #-12]
   1c4c8:	str	ip, [r0, #-8]
   1c4cc:	str	r2, [r0, #-4]
   1c4d0:	bne	1c4a4 <__assert_fail@plt+0xb52c>
   1c4d4:	pop	{r4, r5}
   1c4d8:	bx	lr
   1c4dc:	push	{r4, r5, r6, r7, lr}
   1c4e0:	movw	r5, #28936	; 0x7108
   1c4e4:	movt	r5, #3
   1c4e8:	sub	sp, sp, #60	; 0x3c
   1c4ec:	add	r6, sp, #4
   1c4f0:	add	r7, sp, #52	; 0x34
   1c4f4:	ldr	ip, [r5]
   1c4f8:	mov	r4, r0
   1c4fc:	movw	r3, #51831	; 0xca77
   1c500:	movw	r0, #17448	; 0x4428
   1c504:	movt	r3, #34283	; 0x85eb
   1c508:	movt	r0, #9251	; 0x2423
   1c50c:	movw	r2, #34383	; 0x864f
   1c510:	movt	r2, #25032	; 0x61c8
   1c514:	add	r3, r1, r3
   1c518:	add	r0, r1, r0
   1c51c:	str	r3, [sp, #16]
   1c520:	add	r2, r1, r2
   1c524:	mov	r3, #0
   1c528:	str	ip, [sp, #52]	; 0x34
   1c52c:	str	r1, [sp, #20]
   1c530:	str	r0, [sp, #12]
   1c534:	str	r2, [sp, #24]
   1c538:	str	r3, [sp, #4]
   1c53c:	str	r3, [sp, #8]
   1c540:	str	r3, [sp, #28]
   1c544:	str	r3, [sp, #32]
   1c548:	str	r3, [sp, #36]	; 0x24
   1c54c:	str	r3, [sp, #40]	; 0x28
   1c550:	str	r3, [sp, #44]	; 0x2c
   1c554:	mov	ip, r6
   1c558:	add	r4, r4, #16
   1c55c:	ldm	ip!, {r0, r1, r2, r3}
   1c560:	add	r6, r6, #16
   1c564:	cmp	ip, r7
   1c568:	str	r0, [r4, #-16]
   1c56c:	str	r1, [r4, #-12]
   1c570:	str	r2, [r4, #-8]
   1c574:	str	r3, [r4, #-4]
   1c578:	bne	1c554 <__assert_fail@plt+0xb5dc>
   1c57c:	ldr	r2, [sp, #52]	; 0x34
   1c580:	mov	r0, #0
   1c584:	ldr	r3, [r5]
   1c588:	cmp	r2, r3
   1c58c:	bne	1c598 <__assert_fail@plt+0xb620>
   1c590:	add	sp, sp, #60	; 0x3c
   1c594:	pop	{r4, r5, r6, r7, pc}
   1c598:	bl	10db0 <__stack_chk_fail@plt>
   1c59c:	movw	r3, #17668	; 0x4504
   1c5a0:	movt	r3, #2
   1c5a4:	ldrb	r3, [r3]
   1c5a8:	cmp	r3, #1
   1c5ac:	movne	r3, #0
   1c5b0:	b	1aa30 <__assert_fail@plt+0x9ab8>
   1c5b4:	movw	r3, #17668	; 0x4504
   1c5b8:	movt	r3, #2
   1c5bc:	ldrb	r1, [r3]
   1c5c0:	cmp	r1, #1
   1c5c4:	movne	r1, #0
   1c5c8:	b	1ace8 <__assert_fail@plt+0x9d70>
   1c5cc:	movw	r3, #17668	; 0x4504
   1c5d0:	movt	r3, #2
   1c5d4:	sub	sp, sp, #8
   1c5d8:	mov	r2, r0
   1c5dc:	ldrb	r3, [r3]
   1c5e0:	str	r1, [sp, #4]
   1c5e4:	cmp	r3, #0
   1c5e8:	revne	r1, r1
   1c5ec:	strne	r1, [sp, #4]
   1c5f0:	ldr	r0, [sp, #4]
   1c5f4:	str	r0, [r2]
   1c5f8:	add	sp, sp, #8
   1c5fc:	bx	lr
   1c600:	movw	r3, #17668	; 0x4504
   1c604:	movt	r3, #2
   1c608:	ldr	r0, [r0]
   1c60c:	ldrb	r3, [r3]
   1c610:	cmp	r3, #0
   1c614:	bne	1c61c <__assert_fail@plt+0xb6a4>
   1c618:	bx	lr
   1c61c:	rev	r0, r0
   1c620:	bx	lr
   1c624:	push	{lr}		; (str lr, [sp, #-4]!)
   1c628:	movw	ip, #17668	; 0x4504
   1c62c:	ands	lr, r0, #7
   1c630:	movt	ip, #2
   1c634:	sub	sp, sp, #12
   1c638:	ldrb	ip, [ip]
   1c63c:	bne	1c65c <__assert_fail@plt+0xb6e4>
   1c640:	cmp	ip, #1
   1c644:	stmeq	sp, {ip, lr}
   1c648:	strne	lr, [sp]
   1c64c:	strne	lr, [sp, #4]
   1c650:	bl	1ae48 <__assert_fail@plt+0x9ed0>
   1c654:	add	sp, sp, #12
   1c658:	pop	{pc}		; (ldr pc, [sp], #4)
   1c65c:	cmp	ip, #1
   1c660:	streq	ip, [sp]
   1c664:	streq	ip, [sp, #4]
   1c668:	movne	ip, #0
   1c66c:	movne	lr, #1
   1c670:	stmne	sp, {ip, lr}
   1c674:	bl	1ae48 <__assert_fail@plt+0x9ed0>
   1c678:	add	sp, sp, #12
   1c67c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c680:	mov	r0, #88	; 0x58
   1c684:	b	10e1c <malloc@plt>
   1c688:	push	{r3, lr}
   1c68c:	bl	10d44 <free@plt>
   1c690:	mov	r0, #0
   1c694:	pop	{r3, pc}
   1c698:	mov	r2, #88	; 0x58
   1c69c:	b	10d74 <memcpy@plt>
   1c6a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c6a4:	movw	sl, #28936	; 0x7108
   1c6a8:	movt	sl, #3
   1c6ac:	sub	sp, sp, #96	; 0x60
   1c6b0:	mov	r4, r2
   1c6b4:	mov	r6, r0
   1c6b8:	ldr	ip, [sl]
   1c6bc:	mov	r1, #0
   1c6c0:	mov	r2, #80	; 0x50
   1c6c4:	mov	r0, sp
   1c6c8:	movw	r8, #46550	; 0xb5d6
   1c6cc:	movt	r8, #44480	; 0xadc0
   1c6d0:	mov	r5, r3
   1c6d4:	str	ip, [sp, #92]	; 0x5c
   1c6d8:	movw	r9, #10222	; 0x27ee
   1c6dc:	bl	10e88 <memset@plt>
   1c6e0:	movt	r9, #24810	; 0x60ea
   1c6e4:	adds	r8, r8, r4
   1c6e8:	mov	r0, r6
   1c6ec:	movw	r6, #60239	; 0xeb4f
   1c6f0:	movt	r6, #10196	; 0x27d4
   1c6f4:	adc	r9, r9, r5
   1c6f8:	movw	r7, #44605	; 0xae3d
   1c6fc:	adds	r6, r6, r4
   1c700:	movt	r7, #49842	; 0xc2b2
   1c704:	strd	r4, [sp, #24]
   1c708:	adc	r7, r7, r5
   1c70c:	strd	r6, [sp, #16]
   1c710:	movw	r6, #13689	; 0x3579
   1c714:	movt	r6, #31252	; 0x7a14
   1c718:	adds	r4, r4, r6
   1c71c:	mov	r2, #88	; 0x58
   1c720:	mov	r1, sp
   1c724:	movw	r7, #34382	; 0x864e
   1c728:	movt	r7, #25032	; 0x61c8
   1c72c:	strd	r8, [sp, #8]
   1c730:	adc	r5, r5, r7
   1c734:	strd	r4, [sp, #32]
   1c738:	bl	10d74 <memcpy@plt>
   1c73c:	ldr	r2, [sp, #92]	; 0x5c
   1c740:	ldr	r3, [sl]
   1c744:	mov	r0, #0
   1c748:	cmp	r2, r3
   1c74c:	bne	1c758 <__assert_fail@plt+0xb7e0>
   1c750:	add	sp, sp, #96	; 0x60
   1c754:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c758:	bl	10db0 <__stack_chk_fail@plt>
   1c75c:	movw	r3, #17668	; 0x4504
   1c760:	movt	r3, #2
   1c764:	ldrb	r3, [r3]
   1c768:	cmp	r3, #1
   1c76c:	movne	r3, #0
   1c770:	b	1bcbc <__assert_fail@plt+0xad44>
   1c774:	movw	r3, #17668	; 0x4504
   1c778:	movt	r3, #2
   1c77c:	ldrb	r1, [r3]
   1c780:	cmp	r1, #1
   1c784:	movne	r1, #0
   1c788:	b	1b664 <__assert_fail@plt+0xa6ec>
   1c78c:	sub	sp, sp, #8
   1c790:	movw	r1, #17668	; 0x4504
   1c794:	movt	r1, #2
   1c798:	mov	ip, r0
   1c79c:	strd	r2, [sp]
   1c7a0:	ldrb	r3, [r1]
   1c7a4:	cmp	r3, #0
   1c7a8:	beq	1c7c0 <__assert_fail@plt+0xb848>
   1c7ac:	ldm	sp, {r2, r3}
   1c7b0:	rev	r2, r2
   1c7b4:	rev	r3, r3
   1c7b8:	str	r2, [sp, #4]
   1c7bc:	str	r3, [sp]
   1c7c0:	mov	r3, sp
   1c7c4:	ldm	r3!, {r0, r1}
   1c7c8:	str	r0, [ip]
   1c7cc:	str	r1, [ip, #4]
   1c7d0:	add	sp, sp, #8
   1c7d4:	bx	lr
   1c7d8:	movw	r3, #17668	; 0x4504
   1c7dc:	movt	r3, #2
   1c7e0:	mov	r2, r0
   1c7e4:	ldrb	r3, [r3]
   1c7e8:	cmp	r3, #0
   1c7ec:	bne	1c7fc <__assert_fail@plt+0xb884>
   1c7f0:	ldr	r0, [r0]
   1c7f4:	ldr	r1, [r2, #4]
   1c7f8:	bx	lr
   1c7fc:	ldr	r1, [r0]
   1c800:	ldr	r0, [r0, #4]
   1c804:	rev	r1, r1
   1c808:	rev	r0, r0
   1c80c:	bx	lr
   1c810:	push	{r4, lr}
   1c814:	movw	r4, #28936	; 0x7108
   1c818:	movt	r4, #3
   1c81c:	sub	sp, sp, #112	; 0x70
   1c820:	mov	r1, r0
   1c824:	mov	r0, #3
   1c828:	ldr	r3, [r4]
   1c82c:	mov	r2, sp
   1c830:	str	r3, [sp, #108]	; 0x6c
   1c834:	bl	10f30 <__xstat64@plt>
   1c838:	cmp	r0, #0
   1c83c:	bne	1c850 <__assert_fail@plt+0xb8d8>
   1c840:	ldr	r3, [sp, #16]
   1c844:	and	r3, r3, #61440	; 0xf000
   1c848:	cmp	r3, #32768	; 0x8000
   1c84c:	beq	1c870 <__assert_fail@plt+0xb8f8>
   1c850:	mov	r0, #0
   1c854:	mov	r1, #0
   1c858:	ldr	r2, [sp, #108]	; 0x6c
   1c85c:	ldr	r3, [r4]
   1c860:	cmp	r2, r3
   1c864:	bne	1c878 <__assert_fail@plt+0xb900>
   1c868:	add	sp, sp, #112	; 0x70
   1c86c:	pop	{r4, pc}
   1c870:	ldrd	r0, [sp, #48]	; 0x30
   1c874:	b	1c858 <__assert_fail@plt+0xb8e0>
   1c878:	bl	10db0 <__stack_chk_fail@plt>
   1c87c:	ldr	ip, [sp]
   1c880:	cmp	ip, #0
   1c884:	rsblt	ip, ip, #1
   1c888:	movge	ip, #1
   1c88c:	str	ip, [sp]
   1c890:	b	14664 <__assert_fail@plt+0x36ec>
   1c894:	push	{r4, r5, r6, lr}
   1c898:	movw	r4, #28936	; 0x7108
   1c89c:	movt	r4, #3
   1c8a0:	sub	sp, sp, #16
   1c8a4:	add	r6, sp, #4
   1c8a8:	mov	r5, r0
   1c8ac:	ldr	r3, [r4]
   1c8b0:	mov	r0, #1
   1c8b4:	mov	r1, r6
   1c8b8:	str	r3, [sp, #12]
   1c8bc:	bl	10d68 <clock_gettime@plt>
   1c8c0:	cmp	r0, #0
   1c8c4:	beq	1c8e8 <__assert_fail@plt+0xb970>
   1c8c8:	movw	r3, #28940	; 0x710c
   1c8cc:	movt	r3, #3
   1c8d0:	movw	r0, #17704	; 0x4528
   1c8d4:	mov	r1, #1
   1c8d8:	ldr	r3, [r3]
   1c8dc:	movt	r0, #2
   1c8e0:	mov	r2, #26
   1c8e4:	bl	10dd4 <fwrite@plt>
   1c8e8:	ldr	r2, [sp, #12]
   1c8ec:	ldr	r3, [r4]
   1c8f0:	ldm	r6, {r0, r1}
   1c8f4:	cmp	r2, r3
   1c8f8:	stm	r5, {r0, r1}
   1c8fc:	mov	r0, r5
   1c900:	bne	1c90c <__assert_fail@plt+0xb994>
   1c904:	add	sp, sp, #16
   1c908:	pop	{r4, r5, r6, pc}
   1c90c:	bl	10db0 <__stack_chk_fail@plt>
   1c910:	push	{r4, r5, r6, lr}
   1c914:	sub	sp, sp, #16
   1c918:	mov	r5, #51712	; 0xca00
   1c91c:	movt	r5, #15258	; 0x3b9a
   1c920:	mov	r0, sp
   1c924:	bl	1c894 <__assert_fail@plt+0xb91c>
   1c928:	ldr	r6, [sp]
   1c92c:	ldr	r4, [sp, #4]
   1c930:	add	r0, sp, #8
   1c934:	bl	1c894 <__assert_fail@plt+0xb91c>
   1c938:	ldr	r3, [sp, #12]
   1c93c:	mov	r2, #51712	; 0xca00
   1c940:	movt	r2, #15258	; 0x3b9a
   1c944:	cmp	r3, r4
   1c948:	ldr	r1, [sp, #8]
   1c94c:	add	r2, r3, r2
   1c950:	rsb	r2, r4, r2
   1c954:	rsbge	r2, r4, r3
   1c958:	sublt	r1, r1, #1
   1c95c:	rsbge	r1, r6, r1
   1c960:	rsblt	r1, r6, r1
   1c964:	asr	r3, r2, #31
   1c968:	smlal	r2, r3, r5, r1
   1c96c:	orrs	r1, r2, r3
   1c970:	beq	1c930 <__assert_fail@plt+0xb9b8>
   1c974:	add	sp, sp, #16
   1c978:	pop	{r4, r5, r6, pc}
   1c97c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c980:	vpush	{d8-d11}
   1c984:	movw	r8, #28936	; 0x7108
   1c988:	sub	sp, sp, #244	; 0xf4
   1c98c:	movt	r8, #3
   1c990:	mov	fp, r3
   1c994:	str	r2, [sp, #148]	; 0x94
   1c998:	ldr	r2, [r8]
   1c99c:	str	r0, [sp, #156]	; 0x9c
   1c9a0:	str	r1, [sp, #56]	; 0x38
   1c9a4:	mov	r1, #92	; 0x5c
   1c9a8:	ldr	r0, [sp, #148]	; 0x94
   1c9ac:	str	r8, [sp, #164]	; 0xa4
   1c9b0:	str	r2, [sp, #236]	; 0xec
   1c9b4:	bl	10edc <strrchr@plt>
   1c9b8:	ldr	r9, [sp, #316]	; 0x13c
   1c9bc:	ldr	r4, [sp, #312]	; 0x138
   1c9c0:	str	r9, [sp, #188]	; 0xbc
   1c9c4:	cmp	r0, #0
   1c9c8:	beq	1d518 <__assert_fail@plt+0xc5a0>
   1c9cc:	add	r0, r0, #1
   1c9d0:	str	r0, [sp, #148]	; 0x94
   1c9d4:	mov	r0, #0
   1c9d8:	mvn	r2, #19
   1c9dc:	mov	r1, r0
   1c9e0:	movw	ip, #28904	; 0x70e8
   1c9e4:	movt	ip, #3
   1c9e8:	str	ip, [sp, #64]	; 0x40
   1c9ec:	bl	10e10 <setpriority@plt>
   1c9f0:	ldr	r8, [sp, #64]	; 0x40
   1c9f4:	ldr	r1, [r8]
   1c9f8:	cmp	r1, #1
   1c9fc:	beq	1d6ac <__assert_fail@plt+0xc734>
   1ca00:	cmp	r4, fp
   1ca04:	movlt	r4, fp
   1ca08:	str	r4, [sp, #176]	; 0xb0
   1ca0c:	cmp	r4, fp
   1ca10:	blt	1d41c <__assert_fail@plt+0xc4a4>
   1ca14:	movw	r8, #40512	; 0x9e40
   1ca18:	movt	r8, #1
   1ca1c:	str	r8, [sp, #168]	; 0xa8
   1ca20:	movw	r9, #51324	; 0xc87c
   1ca24:	ldr	r8, [sp, #56]	; 0x38
   1ca28:	movt	r9, #1
   1ca2c:	str	r9, [sp, #172]	; 0xac
   1ca30:	movw	ip, #28960	; 0x7120
   1ca34:	rsbs	r8, r8, #1
   1ca38:	ldr	r9, [sp, #56]	; 0x38
   1ca3c:	movt	ip, #3
   1ca40:	vldr	d10, [pc, #464]	; 1cc18 <__assert_fail@plt+0xbca0>
   1ca44:	str	ip, [sp, #160]	; 0xa0
   1ca48:	movcc	r8, #0
   1ca4c:	mov	ip, #51712	; 0xca00
   1ca50:	sub	r9, r9, #1
   1ca54:	movt	ip, #15258	; 0x3b9a
   1ca58:	str	r8, [sp, #184]	; 0xb8
   1ca5c:	str	ip, [sp, #152]	; 0x98
   1ca60:	str	r9, [sp, #180]	; 0xb4
   1ca64:	ldr	ip, [sp, #160]	; 0xa0
   1ca68:	ldr	r8, [sp, #56]	; 0x38
   1ca6c:	ldr	r9, [ip, #4]
   1ca70:	ldr	ip, [sp, #184]	; 0xb8
   1ca74:	cmp	r9, #31
   1ca78:	movls	r9, r8
   1ca7c:	ldr	r8, [sp, #180]	; 0xb4
   1ca80:	add	r9, r9, ip
   1ca84:	str	r9, [sp, #44]	; 0x2c
   1ca88:	add	r0, r9, r8
   1ca8c:	mov	r1, r9
   1ca90:	bl	231c4 <__assert_fail@plt+0x1224c>
   1ca94:	ldr	r9, [sp, #320]	; 0x140
   1ca98:	add	r4, r0, r9
   1ca9c:	rsb	r0, r4, r4, lsl #3
   1caa0:	lsl	r0, r0, #2
   1caa4:	bl	10e1c <malloc@plt>
   1caa8:	str	r0, [sp, #88]	; 0x58
   1caac:	ldr	r0, [sp, #56]	; 0x38
   1cab0:	bl	14260 <__assert_fail@plt+0x32e8>
   1cab4:	add	r4, r0, r4, lsl #10
   1cab8:	str	r4, [sp, #144]	; 0x90
   1cabc:	mov	r0, r4
   1cac0:	bl	10e1c <malloc@plt>
   1cac4:	str	r0, [sp, #116]	; 0x74
   1cac8:	ldr	r0, [sp, #56]	; 0x38
   1cacc:	bl	10e1c <malloc@plt>
   1cad0:	ldr	ip, [sp, #116]	; 0x74
   1cad4:	cmp	r0, #0
   1cad8:	cmpne	ip, #0
   1cadc:	str	r0, [sp, #72]	; 0x48
   1cae0:	beq	1d7c8 <__assert_fail@plt+0xc850>
   1cae4:	ldr	r8, [sp, #88]	; 0x58
   1cae8:	cmp	r8, #0
   1caec:	beq	1d7c8 <__assert_fail@plt+0xc850>
   1caf0:	ldr	r0, [sp, #148]	; 0x94
   1caf4:	bl	10e64 <strlen@plt>
   1caf8:	ldr	r9, [sp, #172]	; 0xac
   1cafc:	ldr	r5, [sp, #168]	; 0xa8
   1cb00:	cmp	r0, #17
   1cb04:	subhi	r0, r0, #17
   1cb08:	ldrls	r8, [sp, #148]	; 0x94
   1cb0c:	ldrhi	ip, [sp, #148]	; 0x94
   1cb10:	strls	r8, [sp, #76]	; 0x4c
   1cb14:	addhi	r0, ip, r0
   1cb18:	ldr	ip, [sp, #320]	; 0x140
   1cb1c:	strhi	r0, [sp, #76]	; 0x4c
   1cb20:	cmp	fp, #2
   1cb24:	movle	r5, r9
   1cb28:	cmp	ip, #0
   1cb2c:	beq	1d6a4 <__assert_fail@plt+0xc72c>
   1cb30:	ldr	r9, [sp, #116]	; 0x74
   1cb34:	mov	r7, #0
   1cb38:	ldr	sl, [sp, #156]	; 0x9c
   1cb3c:	ldr	ip, [sp, #72]	; 0x48
   1cb40:	ldr	r2, [sp, #44]	; 0x2c
   1cb44:	ldr	r3, [sp, #188]	; 0xbc
   1cb48:	str	fp, [sp, #80]	; 0x50
   1cb4c:	mov	fp, sl
   1cb50:	mov	sl, r9
   1cb54:	mov	r9, ip
   1cb58:	sub	r2, r2, #1
   1cb5c:	sub	r3, r3, #4
   1cb60:	str	r2, [sp, #52]	; 0x34
   1cb64:	str	r3, [sp, #60]	; 0x3c
   1cb68:	str	r7, [sp, #48]	; 0x30
   1cb6c:	str	r5, [sp, #68]	; 0x44
   1cb70:	ldr	r8, [sp, #60]	; 0x3c
   1cb74:	ldr	ip, [sp, #52]	; 0x34
   1cb78:	ldr	r1, [sp, #44]	; 0x2c
   1cb7c:	ldr	r6, [r8, #4]!
   1cb80:	add	r0, r6, ip
   1cb84:	str	r8, [sp, #60]	; 0x3c
   1cb88:	bl	231c4 <__assert_fail@plt+0x1224c>
   1cb8c:	add	r4, r0, r7
   1cb90:	cmp	r4, r7
   1cb94:	bls	1cc10 <__assert_fail@plt+0xbc98>
   1cb98:	rsb	r5, r7, r7, lsl #3
   1cb9c:	ldr	r8, [sp, #88]	; 0x58
   1cba0:	add	r5, r8, r5, lsl #2
   1cba4:	add	r5, r5, #20
   1cba8:	ldr	r8, [sp, #44]	; 0x2c
   1cbac:	add	r7, r7, #1
   1cbb0:	str	fp, [r5, #-20]	; 0xffffffec
   1cbb4:	add	r5, r5, #28
   1cbb8:	cmp	r6, r8
   1cbbc:	movcc	r8, r6
   1cbc0:	str	sl, [r5, #-40]	; 0xffffffd8
   1cbc4:	str	r9, [r5, #-28]	; 0xffffffe4
   1cbc8:	rsb	r6, r8, r6
   1cbcc:	str	r8, [r5, #-44]	; 0xffffffd4
   1cbd0:	mov	r0, r8
   1cbd4:	bl	14260 <__assert_fail@plt+0x32e8>
   1cbd8:	cmp	r4, r7
   1cbdc:	add	fp, fp, r8
   1cbe0:	add	r9, r9, r8
   1cbe4:	str	r0, [r5, #-36]	; 0xffffffdc
   1cbe8:	add	sl, sl, r0
   1cbec:	bhi	1cba8 <__assert_fail@plt+0xbc30>
   1cbf0:	ldr	ip, [sp, #48]	; 0x30
   1cbf4:	ldr	r8, [sp, #320]	; 0x140
   1cbf8:	add	ip, ip, #1
   1cbfc:	str	ip, [sp, #48]	; 0x30
   1cc00:	cmp	ip, r8
   1cc04:	beq	1cc34 <__assert_fail@plt+0xbcbc>
   1cc08:	mov	r7, r4
   1cc0c:	b	1cb70 <__assert_fail@plt+0xbbf8>
   1cc10:	mov	r4, r7
   1cc14:	b	1cbf0 <__assert_fail@plt+0xbc78>
   1cc18:	andeq	r0, r0, r0
   1cc1c:	addmi	r4, pc, r0
   1cc20:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1cc24:	svccc	0x00b99999
	...
   1cc30:	andeq	r4, r2, r8, lsl r5
   1cc34:	ldr	r5, [sp, #68]	; 0x44
   1cc38:	ldr	fp, [sp, #80]	; 0x50
   1cc3c:	ldr	r9, [sp, #56]	; 0x38
   1cc40:	vldr	d0, [pc, #-40]	; 1cc20 <__assert_fail@plt+0xbca8>
   1cc44:	vmov.f64	d1, #96	; 0x3f000000  0.5
   1cc48:	mov	r2, #1
   1cc4c:	ldr	r0, [sp, #116]	; 0x74
   1cc50:	add	r6, r9, r2
   1cc54:	ldr	r1, [sp, #144]	; 0x90
   1cc58:	mov	r8, #100	; 0x64
   1cc5c:	bl	1e568 <__assert_fail@plt+0xd5f0>
   1cc60:	mov	r2, #0
   1cc64:	mov	r3, #0
   1cc68:	ldr	r0, [sp, #156]	; 0x9c
   1cc6c:	ldr	r1, [sp, #56]	; 0x38
   1cc70:	mov	r9, #0
   1cc74:	strd	r8, [sp, #128]	; 0x80
   1cc78:	bl	1c624 <__assert_fail@plt+0xb6ac>
   1cc7c:	ldr	r9, [sp, #64]	; 0x40
   1cc80:	ldr	ip, [sp, #152]	; 0x98
   1cc84:	ldr	r3, [r9, #4]
   1cc88:	ldrd	r8, [sp, #128]	; 0x80
   1cc8c:	umlal	r8, r9, ip, r3
   1cc90:	strd	r8, [sp, #128]	; 0x80
   1cc94:	strd	r0, [sp, #104]	; 0x68
   1cc98:	mov	r1, r6
   1cc9c:	mov	r0, #5242880	; 0x500000
   1cca0:	bl	231c4 <__assert_fail@plt+0x1224c>
   1cca4:	mov	r1, r6
   1cca8:	add	r0, r0, #1
   1ccac:	str	r0, [sp, #92]	; 0x5c
   1ccb0:	mov	r0, #209715200	; 0xc800000
   1ccb4:	bl	231c4 <__assert_fail@plt+0x1224c>
   1ccb8:	movw	r3, #17672	; 0x4508
   1ccbc:	movt	r3, #2
   1ccc0:	add	ip, sp, #220	; 0xdc
   1ccc4:	add	r0, r0, #1
   1ccc8:	str	r0, [sp, #112]	; 0x70
   1cccc:	ldm	r3, {r0, r1, r2, r3}
   1ccd0:	stm	ip, {r0, r1, r2, r3}
   1ccd4:	add	r0, sp, #196	; 0xc4
   1ccd8:	bl	1c894 <__assert_fail@plt+0xb91c>
   1ccdc:	ldr	r8, [sp, #64]	; 0x40
   1cce0:	ldr	r3, [r8]
   1cce4:	cmp	r3, #1
   1cce8:	bls	1cd10 <__assert_fail@plt+0xbd98>
   1ccec:	movw	r1, #28940	; 0x710c
   1ccf0:	movt	r1, #3
   1ccf4:	movw	r2, #17840	; 0x45b0
   1ccf8:	movw	r3, #18552	; 0x4878
   1ccfc:	ldr	r0, [r1]
   1cd00:	movt	r2, #2
   1cd04:	movt	r3, #2
   1cd08:	mov	r1, #1
   1cd0c:	bl	10eac <__fprintf_chk@plt>
   1cd10:	ldr	r9, [sp, #88]	; 0x58
   1cd14:	rsb	r8, r4, r4, lsl #3
   1cd18:	mov	ip, #0
   1cd1c:	mov	r0, #0
   1cd20:	add	r8, r9, r8, lsl #2
   1cd24:	movw	r9, #28940	; 0x710c
   1cd28:	movt	r9, #3
   1cd2c:	str	r9, [sp, #60]	; 0x3c
   1cd30:	ldr	r9, [sp, #88]	; 0x58
   1cd34:	mov	r1, #0
   1cd38:	mvn	r2, #0
   1cd3c:	mvn	r3, #0
   1cd40:	strd	r0, [sp, #120]	; 0x78
   1cd44:	vldr	d9, [pc, #-292]	; 1cc28 <__assert_fail@plt+0xbcb0>
   1cd48:	strd	r2, [sp, #96]	; 0x60
   1cd4c:	strd	r0, [sp, #136]	; 0x88
   1cd50:	strd	r2, [sp, #80]	; 0x50
   1cd54:	str	ip, [sp, #68]	; 0x44
   1cd58:	str	ip, [sp, #52]	; 0x34
   1cd5c:	str	ip, [sp, #44]	; 0x2c
   1cd60:	str	ip, [sp, #48]	; 0x30
   1cd64:	ldr	ip, [sp, #48]	; 0x30
   1cd68:	eor	r2, ip, #1
   1cd6c:	ldr	ip, [sp, #44]	; 0x2c
   1cd70:	eor	r3, ip, #1
   1cd74:	orrs	r3, r2, r3
   1cd78:	beq	1d3b4 <__assert_fail@plt+0xc43c>
   1cd7c:	add	r0, sp, #212	; 0xd4
   1cd80:	ldr	r6, [sp, #196]	; 0xc4
   1cd84:	ldr	r7, [sp, #200]	; 0xc8
   1cd88:	bl	1c894 <__assert_fail@plt+0xb91c>
   1cd8c:	ldr	r3, [sp, #216]	; 0xd8
   1cd90:	ldr	r2, [sp, #212]	; 0xd4
   1cd94:	cmp	r3, r7
   1cd98:	rsbge	r0, r7, r3
   1cd9c:	sublt	r2, r2, #1
   1cda0:	movlt	r1, #51712	; 0xca00
   1cda4:	rsblt	r6, r6, r2
   1cda8:	rsbge	r6, r6, r2
   1cdac:	mov	r2, #1000	; 0x3e8
   1cdb0:	movtlt	r1, #15258	; 0x3b9a
   1cdb4:	addlt	r1, r3, r1
   1cdb8:	mov	r3, #0
   1cdbc:	rsblt	r0, r7, r1
   1cdc0:	asr	r1, r0, #31
   1cdc4:	bl	23788 <__assert_fail@plt+0x12810>
   1cdc8:	movw	r3, #16960	; 0x4240
   1cdcc:	movt	r3, #15
   1cdd0:	mov	r2, #7552	; 0x1d80
   1cdd4:	movt	r2, #1068	; 0x42c
   1cdd8:	smlal	r0, r1, r3, r6
   1cddc:	mov	r3, #0
   1cde0:	cmp	r1, r3
   1cde4:	cmpeq	r0, r2
   1cde8:	bls	1ce28 <__assert_fail@plt+0xbeb0>
   1cdec:	ldr	ip, [sp, #64]	; 0x40
   1cdf0:	ldr	r3, [ip]
   1cdf4:	cmp	r3, #1
   1cdf8:	bls	1ce18 <__assert_fail@plt+0xbea0>
   1cdfc:	ldr	ip, [sp, #60]	; 0x3c
   1ce00:	movw	r0, #17848	; 0x45b8
   1ce04:	mov	r1, #1
   1ce08:	movt	r0, #2
   1ce0c:	mov	r2, #22
   1ce10:	ldr	r3, [ip]
   1ce14:	bl	10dd4 <fwrite@plt>
   1ce18:	mov	r0, #10
   1ce1c:	bl	10da4 <sleep@plt>
   1ce20:	add	r0, sp, #196	; 0xc4
   1ce24:	bl	1c894 <__assert_fail@plt+0xb91c>
   1ce28:	ldr	ip, [sp, #64]	; 0x40
   1ce2c:	ldr	r3, [ip]
   1ce30:	cmp	r3, #1
   1ce34:	bls	1ce70 <__assert_fail@plt+0xbef8>
   1ce38:	ldr	ip, [sp, #60]	; 0x3c
   1ce3c:	add	r1, sp, #240	; 0xf0
   1ce40:	movw	r2, #17872	; 0x45d0
   1ce44:	movt	r2, #2
   1ce48:	ldr	r0, [ip]
   1ce4c:	ldr	ip, [sp, #76]	; 0x4c
   1ce50:	str	ip, [sp]
   1ce54:	ldr	ip, [sp, #52]	; 0x34
   1ce58:	add	r3, r1, ip, lsl #2
   1ce5c:	ldr	ip, [sp, #56]	; 0x38
   1ce60:	mov	r1, #1
   1ce64:	ldr	r3, [r3, #-20]	; 0xffffffec
   1ce68:	str	ip, [sp, #4]
   1ce6c:	bl	10eac <__fprintf_chk@plt>
   1ce70:	ldr	ip, [sp, #44]	; 0x2c
   1ce74:	cmp	ip, #0
   1ce78:	bne	1d43c <__assert_fail@plt+0xc4c4>
   1ce7c:	ldr	r2, [sp, #144]	; 0x90
   1ce80:	mov	r1, #229	; 0xe5
   1ce84:	ldr	r0, [sp, #116]	; 0x74
   1ce88:	mov	r7, ip
   1ce8c:	bl	10e88 <memset@plt>
   1ce90:	ldr	r1, [sp, #44]	; 0x2c
   1ce94:	add	r0, sp, #212	; 0xd4
   1ce98:	movw	r3, #16960	; 0x4240
   1ce9c:	movt	r3, #15
   1cea0:	str	r3, [sp, #216]	; 0xd8
   1cea4:	str	r1, [sp, #212]	; 0xd4
   1cea8:	bl	10d50 <nanosleep@plt>
   1ceac:	bl	1c910 <__assert_fail@plt+0xb998>
   1ceb0:	add	r0, sp, #204	; 0xcc
   1ceb4:	bl	1c894 <__assert_fail@plt+0xb91c>
   1ceb8:	ldr	sl, [sp, #92]	; 0x5c
   1cebc:	str	r8, [sp, #44]	; 0x2c
   1cec0:	cmp	r4, #0
   1cec4:	beq	1cf04 <__assert_fail@plt+0xbf8c>
   1cec8:	mov	r6, r9
   1cecc:	mov	r8, #0
   1ced0:	ldr	r0, [r6]
   1ced4:	ldr	r1, [r6, #8]
   1ced8:	ldr	r2, [r6, #4]
   1cedc:	ldr	r3, [r6, #12]
   1cee0:	str	fp, [sp]
   1cee4:	blx	r5
   1cee8:	cmp	r0, #0
   1ceec:	beq	1d4f8 <__assert_fail@plt+0xc580>
   1cef0:	add	r8, r8, #1
   1cef4:	str	r0, [r6, #16]
   1cef8:	cmp	r8, r4
   1cefc:	add	r6, r6, #28
   1cf00:	bne	1ced0 <__assert_fail@plt+0xbf58>
   1cf04:	add	r7, r7, #1
   1cf08:	cmp	r7, sl
   1cf0c:	bne	1cec0 <__assert_fail@plt+0xbf48>
   1cf10:	add	r0, sp, #212	; 0xd4
   1cf14:	ldr	r6, [sp, #208]	; 0xd0
   1cf18:	ldr	r7, [sp, #204]	; 0xcc
   1cf1c:	ldr	r8, [sp, #44]	; 0x2c
   1cf20:	bl	1c894 <__assert_fail@plt+0xb91c>
   1cf24:	ldr	r3, [sp, #216]	; 0xd8
   1cf28:	ldr	r1, [sp, #212]	; 0xd4
   1cf2c:	cmp	r6, r3
   1cf30:	ldr	ip, [sp, #152]	; 0x98
   1cf34:	rsble	r6, r6, r3
   1cf38:	subgt	r1, r1, #1
   1cf3c:	movgt	r2, #51712	; 0xca00
   1cf40:	rsbgt	r1, r7, r1
   1cf44:	rsble	r1, r7, r1
   1cf48:	movtgt	r2, #15258	; 0x3b9a
   1cf4c:	addgt	r2, r3, r2
   1cf50:	rsbgt	r6, r6, r2
   1cf54:	asr	r7, r6, #31
   1cf58:	smlal	r6, r7, ip, r1
   1cf5c:	orrs	r0, r6, r7
   1cf60:	beq	1d4d0 <__assert_fail@plt+0xc558>
   1cf64:	ldr	ip, [sp, #92]	; 0x5c
   1cf68:	ldr	r0, [sp, #80]	; 0x50
   1cf6c:	ldr	r1, [sp, #84]	; 0x54
   1cf70:	umull	r2, r3, ip, r0
   1cf74:	mla	r3, ip, r1, r3
   1cf78:	cmp	r3, r7
   1cf7c:	cmpeq	r2, r6
   1cf80:	bls	1cf9c <__assert_fail@plt+0xc024>
   1cf84:	mov	r2, ip
   1cf88:	mov	r0, r6
   1cf8c:	mov	r1, r7
   1cf90:	mov	r3, #0
   1cf94:	bl	23788 <__assert_fail@plt+0x12810>
   1cf98:	strd	r0, [sp, #80]	; 0x50
   1cf9c:	ldrd	r2, [sp, #80]	; 0x50
   1cfa0:	orrs	r3, r2, r3
   1cfa4:	beq	1d7ac <__assert_fail@plt+0xc834>
   1cfa8:	mov	r0, #51712	; 0xca00
   1cfac:	mov	r1, #0
   1cfb0:	movt	r0, #15258	; 0x3b9a
   1cfb4:	ldrd	r2, [sp, #80]	; 0x50
   1cfb8:	bl	23788 <__assert_fail@plt+0x12810>
   1cfbc:	add	r0, r0, #1
   1cfc0:	str	r0, [sp, #92]	; 0x5c
   1cfc4:	ldrd	r0, [sp, #136]	; 0x88
   1cfc8:	ldrd	r2, [sp, #128]	; 0x80
   1cfcc:	adds	r0, r0, r6
   1cfd0:	adc	r1, r1, r7
   1cfd4:	strd	r0, [sp, #136]	; 0x88
   1cfd8:	cmp	r3, r1
   1cfdc:	cmpeq	r2, r0
   1cfe0:	movcs	ip, #0
   1cfe4:	movcc	ip, #1
   1cfe8:	cmp	r4, #0
   1cfec:	str	ip, [sp, #44]	; 0x2c
   1cff0:	beq	1d46c <__assert_fail@plt+0xc4f4>
   1cff4:	mov	r3, r9
   1cff8:	mov	r2, #0
   1cffc:	ldr	r1, [r3, #16]
   1d000:	add	r3, r3, #28
   1d004:	cmp	r3, r8
   1d008:	add	r2, r2, r1
   1d00c:	bne	1cffc <__assert_fail@plt+0xc084>
   1d010:	cmp	r2, #0
   1d014:	addeq	r2, r2, #1
   1d018:	str	r2, [sp, #68]	; 0x44
   1d01c:	vmov	s12, r2
   1d020:	vcvt.f64.u32	d9, s12
   1d024:	ldr	ip, [sp, #64]	; 0x40
   1d028:	vldr	s12, [sp, #56]	; 0x38
   1d02c:	ldr	r3, [ip]
   1d030:	ldr	ip, [sp, #52]	; 0x34
   1d034:	cmp	r3, #1
   1d038:	vcvt.f64.u32	d8, s12
   1d03c:	add	r2, ip, #1
   1d040:	and	r2, r2, #3
   1d044:	str	r2, [sp, #52]	; 0x34
   1d048:	vdiv.f64	d9, d8, d9
   1d04c:	bls	1d0ac <__assert_fail@plt+0xc134>
   1d050:	ldr	ip, [sp, #76]	; 0x4c
   1d054:	vstr	s12, [sp, #4]
   1d058:	ldrd	r0, [sp, #80]	; 0x50
   1d05c:	vstr	d9, [sp, #16]
   1d060:	str	ip, [sp]
   1d064:	ldr	ip, [sp, #68]	; 0x44
   1d068:	str	ip, [sp, #8]
   1d06c:	add	ip, sp, #240	; 0xf0
   1d070:	add	r3, ip, r2, lsl #2
   1d074:	ldr	r6, [r3, #-20]	; 0xffffffec
   1d078:	bl	23714 <__assert_fail@plt+0x1279c>
   1d07c:	ldr	r2, [sp, #60]	; 0x3c
   1d080:	mov	r3, r6
   1d084:	ldr	ip, [r2]
   1d088:	movw	r2, #17976	; 0x4638
   1d08c:	movt	r2, #2
   1d090:	vmov	d6, r0, r1
   1d094:	mov	r0, ip
   1d098:	mov	r1, #1
   1d09c:	vdiv.f64	d7, d8, d6
   1d0a0:	vmul.f64	d7, d7, d10
   1d0a4:	vstr	d7, [sp, #24]
   1d0a8:	bl	10eac <__fprintf_chk@plt>
   1d0ac:	ldr	ip, [sp, #48]	; 0x30
   1d0b0:	cmp	ip, #0
   1d0b4:	bne	1d47c <__assert_fail@plt+0xc504>
   1d0b8:	ldr	r2, [sp, #56]	; 0x38
   1d0bc:	mov	r1, #214	; 0xd6
   1d0c0:	ldr	r0, [sp, #72]	; 0x48
   1d0c4:	mov	r7, ip
   1d0c8:	bl	10e88 <memset@plt>
   1d0cc:	ldr	r1, [sp, #48]	; 0x30
   1d0d0:	add	r0, sp, #212	; 0xd4
   1d0d4:	movw	r3, #19264	; 0x4b40
   1d0d8:	movt	r3, #76	; 0x4c
   1d0dc:	str	r3, [sp, #216]	; 0xd8
   1d0e0:	str	r1, [sp, #212]	; 0xd4
   1d0e4:	bl	10d50 <nanosleep@plt>
   1d0e8:	bl	1c910 <__assert_fail@plt+0xb998>
   1d0ec:	add	r0, sp, #204	; 0xcc
   1d0f0:	bl	1c894 <__assert_fail@plt+0xb91c>
   1d0f4:	ldr	sl, [sp, #112]	; 0x70
   1d0f8:	str	r5, [sp, #48]	; 0x30
   1d0fc:	cmp	r4, #0
   1d100:	beq	1d15c <__assert_fail@plt+0xc1e4>
   1d104:	mov	r6, r9
   1d108:	mov	r5, #0
   1d10c:	b	1d124 <__assert_fail@plt+0xc1ac>
   1d110:	add	r5, r5, #1
   1d114:	str	r0, [r6, #24]
   1d118:	cmp	r5, r4
   1d11c:	add	r6, r6, #28
   1d120:	beq	1d15c <__assert_fail@plt+0xc1e4>
   1d124:	ldr	r0, [r6, #8]
   1d128:	ldr	r1, [r6, #20]
   1d12c:	ldr	r2, [r6, #16]
   1d130:	ldr	r3, [r6, #4]
   1d134:	bl	14e84 <__assert_fail@plt+0x3f0c>
   1d138:	cmp	r0, #0
   1d13c:	bne	1d110 <__assert_fail@plt+0xc198>
   1d140:	ldr	ip, [sp, #60]	; 0x3c
   1d144:	movw	r2, #18024	; 0x4668
   1d148:	mov	r3, r5
   1d14c:	movt	r2, #2
   1d150:	mov	r1, #1
   1d154:	ldr	r0, [ip]
   1d158:	bl	10eac <__fprintf_chk@plt>
   1d15c:	add	r7, r7, #1
   1d160:	cmp	r7, sl
   1d164:	bne	1d0fc <__assert_fail@plt+0xc184>
   1d168:	add	r0, sp, #212	; 0xd4
   1d16c:	ldr	r6, [sp, #208]	; 0xd0
   1d170:	ldr	r7, [sp, #204]	; 0xcc
   1d174:	ldr	r5, [sp, #48]	; 0x30
   1d178:	bl	1c894 <__assert_fail@plt+0xb91c>
   1d17c:	ldr	r3, [sp, #216]	; 0xd8
   1d180:	ldr	r1, [sp, #212]	; 0xd4
   1d184:	cmp	r6, r3
   1d188:	ldr	ip, [sp, #152]	; 0x98
   1d18c:	rsble	r6, r6, r3
   1d190:	subgt	r1, r1, #1
   1d194:	movgt	r2, #51712	; 0xca00
   1d198:	rsbgt	r1, r7, r1
   1d19c:	rsble	r1, r7, r1
   1d1a0:	movtgt	r2, #15258	; 0x3b9a
   1d1a4:	addgt	r2, r3, r2
   1d1a8:	rsbgt	r6, r6, r2
   1d1ac:	asr	r7, r6, #31
   1d1b0:	smlal	r6, r7, ip, r1
   1d1b4:	orrs	r0, r6, r7
   1d1b8:	beq	1d4a8 <__assert_fail@plt+0xc530>
   1d1bc:	ldr	ip, [sp, #112]	; 0x70
   1d1c0:	ldr	r0, [sp, #96]	; 0x60
   1d1c4:	ldr	r1, [sp, #100]	; 0x64
   1d1c8:	umull	r2, r3, ip, r0
   1d1cc:	mla	r3, ip, r1, r3
   1d1d0:	cmp	r3, r7
   1d1d4:	cmpeq	r2, r6
   1d1d8:	bls	1d1f4 <__assert_fail@plt+0xc27c>
   1d1dc:	mov	r2, ip
   1d1e0:	mov	r0, r6
   1d1e4:	mov	r1, r7
   1d1e8:	mov	r3, #0
   1d1ec:	bl	23788 <__assert_fail@plt+0x12810>
   1d1f0:	strd	r0, [sp, #96]	; 0x60
   1d1f4:	ldrd	r2, [sp, #96]	; 0x60
   1d1f8:	orrs	r3, r2, r3
   1d1fc:	beq	1d718 <__assert_fail@plt+0xc7a0>
   1d200:	mov	r0, #51712	; 0xca00
   1d204:	mov	r1, #0
   1d208:	movt	r0, #15258	; 0x3b9a
   1d20c:	ldrd	r2, [sp, #96]	; 0x60
   1d210:	bl	23788 <__assert_fail@plt+0x12810>
   1d214:	add	r0, r0, #1
   1d218:	str	r0, [sp, #112]	; 0x70
   1d21c:	ldrd	r0, [sp, #120]	; 0x78
   1d220:	ldrd	r2, [sp, #128]	; 0x80
   1d224:	adds	r0, r0, r6
   1d228:	adc	r1, r1, r7
   1d22c:	strd	r0, [sp, #120]	; 0x78
   1d230:	cmp	r3, r1
   1d234:	cmpeq	r2, r0
   1d238:	movcs	ip, #0
   1d23c:	movcc	ip, #1
   1d240:	str	ip, [sp, #48]	; 0x30
   1d244:	ldr	ip, [sp, #64]	; 0x40
   1d248:	ldr	r3, [ip]
   1d24c:	ldr	ip, [sp, #52]	; 0x34
   1d250:	cmp	r3, #1
   1d254:	add	r2, ip, #1
   1d258:	and	r2, r2, #3
   1d25c:	str	r2, [sp, #52]	; 0x34
   1d260:	bls	1d2dc <__assert_fail@plt+0xc364>
   1d264:	ldr	ip, [sp, #76]	; 0x4c
   1d268:	vstr	d9, [sp, #16]
   1d26c:	ldrd	r0, [sp, #80]	; 0x50
   1d270:	str	ip, [sp]
   1d274:	ldr	ip, [sp, #56]	; 0x38
   1d278:	str	ip, [sp, #4]
   1d27c:	ldr	ip, [sp, #68]	; 0x44
   1d280:	str	ip, [sp, #8]
   1d284:	add	ip, sp, #240	; 0xf0
   1d288:	add	r3, ip, r2, lsl #2
   1d28c:	ldr	r7, [r3, #-20]	; 0xffffffec
   1d290:	bl	23714 <__assert_fail@plt+0x1279c>
   1d294:	ldr	ip, [sp, #60]	; 0x3c
   1d298:	ldr	r6, [ip]
   1d29c:	vmov	d6, r0, r1
   1d2a0:	ldrd	r0, [sp, #96]	; 0x60
   1d2a4:	vdiv.f64	d7, d8, d6
   1d2a8:	vmul.f64	d7, d7, d10
   1d2ac:	vstr	d7, [sp, #24]
   1d2b0:	bl	23714 <__assert_fail@plt+0x1279c>
   1d2b4:	movw	r2, #18112	; 0x46c0
   1d2b8:	mov	r3, r7
   1d2bc:	movt	r2, #2
   1d2c0:	vmov	d6, r0, r1
   1d2c4:	mov	r0, r6
   1d2c8:	mov	r1, #1
   1d2cc:	vdiv.f64	d7, d8, d6
   1d2d0:	vmul.f64	d7, d7, d10
   1d2d4:	vstr	d7, [sp, #32]
   1d2d8:	bl	10eac <__fprintf_chk@plt>
   1d2dc:	mov	r2, #0
   1d2e0:	mov	r3, #0
   1d2e4:	ldr	r0, [sp, #72]	; 0x48
   1d2e8:	ldr	r1, [sp, #56]	; 0x38
   1d2ec:	bl	1c624 <__assert_fail@plt+0xb6ac>
   1d2f0:	ldrd	r2, [sp, #104]	; 0x68
   1d2f4:	cmp	r3, r1
   1d2f8:	cmpeq	r2, r0
   1d2fc:	beq	1cd64 <__assert_fail@plt+0xbdec>
   1d300:	movw	r6, #28940	; 0x710c
   1d304:	movt	r6, #3
   1d308:	str	r2, [sp]
   1d30c:	mov	r1, #1
   1d310:	ldr	ip, [r6]
   1d314:	movw	r2, #18172	; 0x46fc
   1d318:	str	r0, [sp, #4]
   1d31c:	movt	r2, #2
   1d320:	ldr	r3, [sp, #76]	; 0x4c
   1d324:	mov	r0, ip
   1d328:	bl	10eac <__fprintf_chk@plt>
   1d32c:	ldr	r8, [sp, #56]	; 0x38
   1d330:	cmp	r8, #0
   1d334:	beq	1d3b4 <__assert_fail@plt+0xc43c>
   1d338:	ldr	r9, [sp, #156]	; 0x9c
   1d33c:	ldr	ip, [sp, #72]	; 0x48
   1d340:	ldrb	r2, [r9]
   1d344:	ldrb	r3, [ip]
   1d348:	cmp	r2, r3
   1d34c:	bne	1d618 <__assert_fail@plt+0xc6a0>
   1d350:	ldr	r7, [sp, #156]	; 0x9c
   1d354:	mov	r5, #0
   1d358:	ldr	r8, [sp, #72]	; 0x48
   1d35c:	b	1d380 <__assert_fail@plt+0xc408>
   1d360:	ldr	ip, [sp, #56]	; 0x38
   1d364:	add	r5, r5, #1
   1d368:	cmp	r5, ip
   1d36c:	beq	1d3b4 <__assert_fail@plt+0xc43c>
   1d370:	ldrb	r2, [r7, #1]!
   1d374:	ldrb	r3, [r8, #1]!
   1d378:	cmp	r2, r3
   1d37c:	bne	1d61c <__assert_fail@plt+0xc6a4>
   1d380:	ldr	r9, [sp, #180]	; 0xb4
   1d384:	cmp	r5, r9
   1d388:	bne	1d360 <__assert_fail@plt+0xc3e8>
   1d38c:	movw	r0, #18288	; 0x4770
   1d390:	mov	r1, #1
   1d394:	movt	r0, #2
   1d398:	mov	r2, #23
   1d39c:	ldr	r3, [r6]
   1d3a0:	add	r5, r5, #1
   1d3a4:	bl	10dd4 <fwrite@plt>
   1d3a8:	ldr	ip, [sp, #56]	; 0x38
   1d3ac:	cmp	r5, ip
   1d3b0:	bne	1d370 <__assert_fail@plt+0xc3f8>
   1d3b4:	ldr	r8, [sp, #64]	; 0x40
   1d3b8:	movw	r4, #28904	; 0x70e8
   1d3bc:	movt	r4, #3
   1d3c0:	ldr	r5, [r8]
   1d3c4:	cmp	r5, #1
   1d3c8:	beq	1d530 <__assert_fail@plt+0xc5b8>
   1d3cc:	cmp	r5, #1
   1d3d0:	bls	1d3f4 <__assert_fail@plt+0xc47c>
   1d3d4:	movw	r3, #28940	; 0x710c
   1d3d8:	movt	r3, #3
   1d3dc:	movw	r2, #18416	; 0x47f0
   1d3e0:	mov	r1, #1
   1d3e4:	ldr	r0, [r3]
   1d3e8:	movt	r2, #2
   1d3ec:	mov	r3, fp
   1d3f0:	bl	10eac <__fprintf_chk@plt>
   1d3f4:	ldr	r0, [sp, #88]	; 0x58
   1d3f8:	add	fp, fp, #1
   1d3fc:	bl	10d44 <free@plt>
   1d400:	ldr	r0, [sp, #116]	; 0x74
   1d404:	bl	10d44 <free@plt>
   1d408:	ldr	r0, [sp, #72]	; 0x48
   1d40c:	bl	10d44 <free@plt>
   1d410:	ldr	r9, [sp, #176]	; 0xb0
   1d414:	cmp	r9, fp
   1d418:	bge	1ca64 <__assert_fail@plt+0xbaec>
   1d41c:	ldr	r8, [sp, #164]	; 0xa4
   1d420:	ldr	r2, [sp, #236]	; 0xec
   1d424:	ldr	r3, [r8]
   1d428:	cmp	r2, r3
   1d42c:	bne	1d7a8 <__assert_fail@plt+0xc830>
   1d430:	add	sp, sp, #244	; 0xf4
   1d434:	vpop	{d8-d11}
   1d438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d43c:	mov	r1, #0
   1d440:	add	r0, sp, #212	; 0xd4
   1d444:	str	r1, [sp, #212]	; 0xd4
   1d448:	movw	r3, #16960	; 0x4240
   1d44c:	movt	r3, #15
   1d450:	str	r3, [sp, #216]	; 0xd8
   1d454:	bl	10d50 <nanosleep@plt>
   1d458:	mov	ip, #1
   1d45c:	str	ip, [sp, #44]	; 0x2c
   1d460:	bl	1c910 <__assert_fail@plt+0xb998>
   1d464:	cmp	r4, #0
   1d468:	bne	1cff4 <__assert_fail@plt+0xc07c>
   1d46c:	mov	ip, #1
   1d470:	vmov.f64	d9, #112	; 0x3f800000  1.0
   1d474:	str	ip, [sp, #68]	; 0x44
   1d478:	b	1d024 <__assert_fail@plt+0xc0ac>
   1d47c:	mov	r1, #0
   1d480:	add	r0, sp, #212	; 0xd4
   1d484:	str	r1, [sp, #212]	; 0xd4
   1d488:	movw	r3, #19264	; 0x4b40
   1d48c:	movt	r3, #76	; 0x4c
   1d490:	str	r3, [sp, #216]	; 0xd8
   1d494:	bl	10d50 <nanosleep@plt>
   1d498:	mov	ip, #1
   1d49c:	str	ip, [sp, #48]	; 0x30
   1d4a0:	bl	1c910 <__assert_fail@plt+0xb998>
   1d4a4:	b	1d244 <__assert_fail@plt+0xc2cc>
   1d4a8:	ldr	ip, [sp, #112]	; 0x70
   1d4ac:	movw	r3, #23039	; 0x59ff
   1d4b0:	movt	r3, #610	; 0x262
   1d4b4:	cmp	ip, r3
   1d4b8:	bhi	1d734 <__assert_fail@plt+0xc7bc>
   1d4bc:	ldr	ip, [sp, #112]	; 0x70
   1d4c0:	mov	r3, #100	; 0x64
   1d4c4:	mul	ip, r3, ip
   1d4c8:	str	ip, [sp, #112]	; 0x70
   1d4cc:	b	1d21c <__assert_fail@plt+0xc2a4>
   1d4d0:	ldr	ip, [sp, #92]	; 0x5c
   1d4d4:	movw	r3, #23039	; 0x59ff
   1d4d8:	movt	r3, #610	; 0x262
   1d4dc:	cmp	ip, r3
   1d4e0:	bhi	1d78c <__assert_fail@plt+0xc814>
   1d4e4:	ldr	ip, [sp, #92]	; 0x5c
   1d4e8:	mov	r3, #100	; 0x64
   1d4ec:	mul	ip, r3, ip
   1d4f0:	str	ip, [sp, #92]	; 0x5c
   1d4f4:	b	1cfc4 <__assert_fail@plt+0xc04c>
   1d4f8:	ldr	r8, [sp, #64]	; 0x40
   1d4fc:	movw	r5, #28904	; 0x70e8
   1d500:	movt	r5, #3
   1d504:	ldr	r3, [r8]
   1d508:	cmp	r3, #0
   1d50c:	bne	1d5b8 <__assert_fail@plt+0xc640>
   1d510:	mov	r0, #1
   1d514:	bl	10e58 <exit@plt>
   1d518:	ldr	r0, [sp, #148]	; 0x94
   1d51c:	mov	r1, #47	; 0x2f
   1d520:	bl	10edc <strrchr@plt>
   1d524:	cmp	r0, #0
   1d528:	beq	1c9d4 <__assert_fail@plt+0xba5c>
   1d52c:	b	1c9cc <__assert_fail@plt+0xba54>
   1d530:	ldrd	r0, [sp, #80]	; 0x50
   1d534:	bl	23714 <__assert_fail@plt+0x1279c>
   1d538:	vldr	s12, [sp, #56]	; 0x38
   1d53c:	vcvt.f64.u32	d11, s12
   1d540:	vmov	d7, r0, r1
   1d544:	ldrd	r0, [sp, #96]	; 0x60
   1d548:	vdiv.f64	d8, d11, d7
   1d54c:	bl	23714 <__assert_fail@plt+0x1279c>
   1d550:	ldr	r8, [sp, #160]	; 0xa0
   1d554:	movw	r3, #28940	; 0x710c
   1d558:	movt	r3, #3
   1d55c:	ldr	r2, [r8]
   1d560:	cmp	r2, #0
   1d564:	vmov	d6, r0, r1
   1d568:	vdiv.f64	d7, d11, d6
   1d56c:	vmul.f64	d8, d8, d10
   1d570:	vmul.f64	d7, d7, d10
   1d574:	beq	1d750 <__assert_fail@plt+0xc7d8>
   1d578:	ldr	r8, [sp, #68]	; 0x44
   1d57c:	vstr	d9, [sp, #8]
   1d580:	ldr	r9, [sp, #76]	; 0x4c
   1d584:	mov	r1, r5
   1d588:	str	r8, [sp]
   1d58c:	ldr	r0, [r3]
   1d590:	vstr	d8, [sp, #16]
   1d594:	str	r2, [sp, #36]	; 0x24
   1d598:	vstr	d7, [sp, #24]
   1d59c:	str	r9, [sp, #32]
   1d5a0:	movw	r2, #18312	; 0x4788
   1d5a4:	mov	r3, fp
   1d5a8:	movt	r2, #2
   1d5ac:	bl	10eac <__fprintf_chk@plt>
   1d5b0:	ldr	r5, [r4]
   1d5b4:	b	1d3cc <__assert_fail@plt+0xc454>
   1d5b8:	movw	r4, #28940	; 0x710c
   1d5bc:	movt	r4, #3
   1d5c0:	mov	r1, #1
   1d5c4:	movw	r2, #17788	; 0x457c
   1d5c8:	mov	r3, r1
   1d5cc:	ldr	r0, [r4]
   1d5d0:	movt	r2, #2
   1d5d4:	bl	10eac <__fprintf_chk@plt>
   1d5d8:	ldr	r3, [r5]
   1d5dc:	cmp	r3, #0
   1d5e0:	beq	1d510 <__assert_fail@plt+0xc598>
   1d5e4:	ldr	r3, [r4]
   1d5e8:	movw	r0, #17896	; 0x45e8
   1d5ec:	mov	r1, #1
   1d5f0:	movt	r0, #2
   1d5f4:	mov	r2, #21
   1d5f8:	bl	10dd4 <fwrite@plt>
   1d5fc:	ldr	r3, [r5]
   1d600:	cmp	r3, #0
   1d604:	beq	1d510 <__assert_fail@plt+0xc598>
   1d608:	ldr	r1, [r4]
   1d60c:	mov	r0, #10
   1d610:	bl	10ef4 <fputc@plt>
   1d614:	b	1d510 <__assert_fail@plt+0xc598>
   1d618:	mov	r5, #0
   1d61c:	movw	r2, #18228	; 0x4734
   1d620:	ldr	r0, [r6]
   1d624:	movt	r2, #2
   1d628:	mov	r1, #1
   1d62c:	mov	r3, r5
   1d630:	bl	10eac <__fprintf_chk@plt>
   1d634:	cmp	r4, #0
   1d638:	beq	1d70c <__assert_fail@plt+0xc794>
   1d63c:	ldr	r8, [sp, #88]	; 0x58
   1d640:	ldr	r2, [r8, #4]
   1d644:	cmp	r2, r5
   1d648:	bhi	1d7e8 <__assert_fail@plt+0xc870>
   1d64c:	mov	r1, r8
   1d650:	mov	r3, #0
   1d654:	b	1d670 <__assert_fail@plt+0xc6f8>
   1d658:	ldr	r0, [r1, #32]
   1d65c:	add	r1, r1, #28
   1d660:	add	r0, r2, r0
   1d664:	cmp	r0, r5
   1d668:	bhi	1d67c <__assert_fail@plt+0xc704>
   1d66c:	mov	r2, r0
   1d670:	add	r3, r3, #1
   1d674:	cmp	r3, r4
   1d678:	bne	1d658 <__assert_fail@plt+0xc6e0>
   1d67c:	rsb	r2, r2, r5
   1d680:	ldr	r0, [r6]
   1d684:	str	r2, [sp, #4]
   1d688:	lsr	r1, r2, #17
   1d68c:	movw	r2, #18256	; 0x4750
   1d690:	str	r1, [sp]
   1d694:	movt	r2, #2
   1d698:	mov	r1, #1
   1d69c:	bl	10eac <__fprintf_chk@plt>
   1d6a0:	b	1d3b4 <__assert_fail@plt+0xc43c>
   1d6a4:	ldr	r4, [sp, #320]	; 0x140
   1d6a8:	b	1cc3c <__assert_fail@plt+0xbcc4>
   1d6ac:	movw	r3, #28960	; 0x7120
   1d6b0:	movt	r3, #3
   1d6b4:	ldr	r2, [r3]
   1d6b8:	cmp	r2, #0
   1d6bc:	bne	1ca00 <__assert_fail@plt+0xba88>
   1d6c0:	ldr	lr, [r3, #4]
   1d6c4:	movw	r2, #28940	; 0x710c
   1d6c8:	ldr	ip, [r8, #4]
   1d6cc:	movt	r2, #3
   1d6d0:	ldr	r9, [sp, #56]	; 0x38
   1d6d4:	movw	r3, #18552	; 0x4878
   1d6d8:	ldr	r0, [r2]
   1d6dc:	movt	r3, #2
   1d6e0:	lsr	lr, lr, #10
   1d6e4:	str	r3, [sp]
   1d6e8:	str	r9, [sp, #4]
   1d6ec:	movw	r2, #17732	; 0x4544
   1d6f0:	str	lr, [sp, #12]
   1d6f4:	movt	r2, #2
   1d6f8:	str	ip, [sp, #8]
   1d6fc:	movw	r3, #16832	; 0x41c0
   1d700:	movt	r3, #2
   1d704:	bl	10eac <__fprintf_chk@plt>
   1d708:	b	1ca00 <__assert_fail@plt+0xba88>
   1d70c:	mov	r2, r4
   1d710:	mov	r3, r4
   1d714:	b	1d67c <__assert_fail@plt+0xc704>
   1d718:	movw	r0, #18068	; 0x4694
   1d71c:	movw	r1, #17936	; 0x4610
   1d720:	movt	r0, #2
   1d724:	movt	r1, #2
   1d728:	mov	r2, #312	; 0x138
   1d72c:	ldr	r3, [pc, #-2820]	; 1cc30 <__assert_fail@plt+0xbcb8>
   1d730:	bl	10f78 <__assert_fail@plt>
   1d734:	movw	r0, #18084	; 0x46a4
   1d738:	movw	r1, #17936	; 0x4610
   1d73c:	movt	r0, #2
   1d740:	movt	r1, #2
   1d744:	movw	r2, #315	; 0x13b
   1d748:	ldr	r3, [pc, #-2848]	; 1cc30 <__assert_fail@plt+0xbcb8>
   1d74c:	bl	10f78 <__assert_fail@plt>
   1d750:	ldr	ip, [sp, #68]	; 0x44
   1d754:	vstr	d9, [sp, #8]
   1d758:	ldr	r8, [sp, #76]	; 0x4c
   1d75c:	mov	r1, r5
   1d760:	movw	r2, #18368	; 0x47c0
   1d764:	movt	r2, #2
   1d768:	str	ip, [sp]
   1d76c:	ldr	r0, [r3]
   1d770:	vstr	d8, [sp, #16]
   1d774:	vstr	d7, [sp, #24]
   1d778:	str	r8, [sp, #32]
   1d77c:	mov	r3, fp
   1d780:	bl	10eac <__fprintf_chk@plt>
   1d784:	ldr	r5, [r4]
   1d788:	b	1d3cc <__assert_fail@plt+0xc454>
   1d78c:	movw	r0, #17944	; 0x4618
   1d790:	movw	r1, #17936	; 0x4610
   1d794:	movt	r0, #2
   1d798:	movt	r1, #2
   1d79c:	movw	r2, #271	; 0x10f
   1d7a0:	ldr	r3, [pc, #-2936]	; 1cc30 <__assert_fail@plt+0xbcb8>
   1d7a4:	bl	10f78 <__assert_fail@plt>
   1d7a8:	bl	10db0 <__stack_chk_fail@plt>
   1d7ac:	movw	r0, #17920	; 0x4600
   1d7b0:	movw	r1, #17936	; 0x4610
   1d7b4:	movt	r0, #2
   1d7b8:	movt	r1, #2
   1d7bc:	mov	r2, #268	; 0x10c
   1d7c0:	ldr	r3, [pc, #-2968]	; 1cc30 <__assert_fail@plt+0xbcb8>
   1d7c4:	bl	10f78 <__assert_fail@plt>
   1d7c8:	ldr	r9, [sp, #64]	; 0x40
   1d7cc:	movw	r5, #28904	; 0x70e8
   1d7d0:	movt	r5, #3
   1d7d4:	ldr	r3, [r9]
   1d7d8:	cmp	r3, #0
   1d7dc:	bne	1d7f4 <__assert_fail@plt+0xc87c>
   1d7e0:	mov	r0, #31
   1d7e4:	bl	10e58 <exit@plt>
   1d7e8:	mov	r2, #0
   1d7ec:	mov	r3, r2
   1d7f0:	b	1d67c <__assert_fail@plt+0xc704>
   1d7f4:	movw	r4, #28940	; 0x710c
   1d7f8:	movt	r4, #3
   1d7fc:	mov	r3, #31
   1d800:	movw	r2, #17788	; 0x457c
   1d804:	mov	r1, #1
   1d808:	ldr	r0, [r4]
   1d80c:	movt	r2, #2
   1d810:	bl	10eac <__fprintf_chk@plt>
   1d814:	ldr	r3, [r5]
   1d818:	cmp	r3, #0
   1d81c:	beq	1d7e0 <__assert_fail@plt+0xc868>
   1d820:	ldr	r3, [r4]
   1d824:	movw	r0, #17800	; 0x4588
   1d828:	mov	r1, #1
   1d82c:	movt	r0, #2
   1d830:	mov	r2, #36	; 0x24
   1d834:	bl	10dd4 <fwrite@plt>
   1d838:	ldr	r3, [r5]
   1d83c:	cmp	r3, #0
   1d840:	beq	1d7e0 <__assert_fail@plt+0xc868>
   1d844:	ldr	r1, [r4]
   1d848:	mov	r0, #10
   1d84c:	bl	10ef4 <fputc@plt>
   1d850:	b	1d7e0 <__assert_fail@plt+0xc868>
   1d854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d858:	sub	sp, sp, #212	; 0xd4
   1d85c:	movw	ip, #28936	; 0x7108
   1d860:	movt	ip, #3
   1d864:	str	r1, [sp, #56]	; 0x38
   1d868:	str	ip, [sp, #60]	; 0x3c
   1d86c:	ldr	r1, [ip]
   1d870:	ldr	ip, [sp, #56]	; 0x38
   1d874:	str	r0, [sp, #68]	; 0x44
   1d878:	str	r2, [sp, #72]	; 0x48
   1d87c:	lsl	r0, ip, #2
   1d880:	str	r3, [sp, #76]	; 0x4c
   1d884:	str	r1, [sp, #204]	; 0xcc
   1d888:	bl	10e1c <malloc@plt>
   1d88c:	ldr	ip, [sp, #56]	; 0x38
   1d890:	cmp	ip, #0
   1d894:	str	r0, [sp, #28]
   1d898:	beq	1dc9c <__assert_fail@plt+0xcd24>
   1d89c:	ldr	ip, [sp, #68]	; 0x44
   1d8a0:	mov	r4, #0
   1d8a4:	ldr	r8, [sp, #56]	; 0x38
   1d8a8:	mov	r5, #0
   1d8ac:	sub	r7, ip, #4
   1d8b0:	mov	r6, #0
   1d8b4:	ldr	r0, [r7, #4]!
   1d8b8:	add	r6, r6, #1
   1d8bc:	bl	1c810 <__assert_fail@plt+0xb898>
   1d8c0:	adds	r4, r4, r0
   1d8c4:	adc	r5, r5, r1
   1d8c8:	cmp	r6, r8
   1d8cc:	bne	1d8b4 <__assert_fail@plt+0xc93c>
   1d8d0:	ldr	ip, [sp, #28]
   1d8d4:	mov	r3, #0
   1d8d8:	str	r3, [sp, #184]	; 0xb8
   1d8dc:	cmp	ip, #0
   1d8e0:	str	r3, [sp, #188]	; 0xbc
   1d8e4:	str	r3, [sp, #192]	; 0xc0
   1d8e8:	str	r3, [sp, #196]	; 0xc4
   1d8ec:	str	r3, [sp, #200]	; 0xc8
   1d8f0:	beq	1ddd8 <__assert_fail@plt+0xce60>
   1d8f4:	adds	r6, r4, r4
   1d8f8:	adc	r7, r5, r5
   1d8fc:	adds	r6, r6, r4
   1d900:	adc	r7, r7, r5
   1d904:	lsr	r0, r6, #26
   1d908:	orr	r0, r0, r7, lsl #6
   1d90c:	lsr	r1, r7, #26
   1d910:	adds	r0, r0, #1
   1d914:	adc	r1, r1, #0
   1d918:	lsl	r2, r0, #26
   1d91c:	adds	r6, r2, #134217728	; 0x8000000
   1d920:	lsl	r3, r1, #26
   1d924:	orr	r3, r3, r0, lsr #6
   1d928:	adc	r7, r3, #0
   1d92c:	cmp	r7, #0
   1d930:	cmpeq	r6, #2080374784	; 0x7c000000
   1d934:	movhi	r6, #2080374784	; 0x7c000000
   1d938:	movhi	r7, #0
   1d93c:	b	1d958 <__assert_fail@plt+0xc9e0>
   1d940:	adds	r6, r6, #-67108864	; 0xfc000000
   1d944:	sbc	r7, r7, #0
   1d948:	mov	r0, r6
   1d94c:	bl	10e1c <malloc@plt>
   1d950:	cmp	r0, #0
   1d954:	bne	1d97c <__assert_fail@plt+0xca04>
   1d958:	cmp	r7, #0
   1d95c:	cmpeq	r6, #67108864	; 0x4000000
   1d960:	bhi	1d940 <__assert_fail@plt+0xc9c8>
   1d964:	lsrs	r7, r7, #1
   1d968:	rrx	r6, r6
   1d96c:	mov	r0, r6
   1d970:	bl	10e1c <malloc@plt>
   1d974:	cmp	r0, #0
   1d978:	beq	1d958 <__assert_fail@plt+0xc9e0>
   1d97c:	bl	10d44 <free@plt>
   1d980:	cmp	r7, #0
   1d984:	cmpeq	r6, #67108864	; 0x4000000
   1d988:	bhi	1dc6c <__assert_fail@plt+0xccf4>
   1d98c:	lsrs	r7, r7, #1
   1d990:	rrx	r6, r6
   1d994:	movw	r3, #43691	; 0xaaab
   1d998:	movt	r3, #43690	; 0xaaaa
   1d99c:	umull	r0, r6, r3, r6
   1d9a0:	lsrs	r6, r6, #1
   1d9a4:	str	r6, [sp, #44]	; 0x2c
   1d9a8:	beq	1de2c <__assert_fail@plt+0xceb4>
   1d9ac:	ldr	r0, [sp, #44]	; 0x2c
   1d9b0:	mov	r1, #0
   1d9b4:	mov	r3, r1
   1d9b8:	mov	r2, r0
   1d9bc:	cmp	r3, r5
   1d9c0:	cmpeq	r2, r4
   1d9c4:	strhi	r4, [sp, #44]	; 0x2c
   1d9c8:	movhi	r2, r4
   1d9cc:	movhi	r3, #0
   1d9d0:	cmp	r3, r5
   1d9d4:	cmpeq	r2, r4
   1d9d8:	bcc	1dc74 <__assert_fail@plt+0xccfc>
   1d9dc:	ldr	r0, [sp, #44]	; 0x2c
   1d9e0:	cmp	r0, #0
   1d9e4:	addeq	r0, r0, #1
   1d9e8:	bl	10e1c <malloc@plt>
   1d9ec:	cmp	r0, #0
   1d9f0:	str	r0, [sp, #48]	; 0x30
   1d9f4:	beq	1de2c <__assert_fail@plt+0xceb4>
   1d9f8:	ldr	ip, [sp, #56]	; 0x38
   1d9fc:	cmp	ip, #0
   1da00:	beq	1dca8 <__assert_fail@plt+0xcd30>
   1da04:	mov	fp, #0
   1da08:	mov	ip, #0
   1da0c:	mov	r9, fp
   1da10:	str	ip, [sp, #32]
   1da14:	ldr	r8, [sp, #68]	; 0x44
   1da18:	movw	ip, #28904	; 0x70e8
   1da1c:	ldr	r6, [sp, #56]	; 0x38
   1da20:	movt	ip, #3
   1da24:	str	ip, [sp, #36]	; 0x24
   1da28:	movw	ip, #28960	; 0x7120
   1da2c:	movt	ip, #3
   1da30:	str	ip, [sp, #52]	; 0x34
   1da34:	movw	ip, #28940	; 0x710c
   1da38:	movt	ip, #3
   1da3c:	str	ip, [sp, #40]	; 0x28
   1da40:	movw	ip, #28952	; 0x7118
   1da44:	movt	ip, #3
   1da48:	str	ip, [sp, #64]	; 0x40
   1da4c:	b	1db44 <__assert_fail@plt+0xcbcc>
   1da50:	movw	r1, #18660	; 0x48e4
   1da54:	ldr	r0, [r8, #-4]
   1da58:	movt	r1, #2
   1da5c:	bl	10f18 <fopen64@plt>
   1da60:	subs	r7, r0, #0
   1da64:	beq	1dcf4 <__assert_fail@plt+0xcd7c>
   1da68:	ldr	ip, [sp, #36]	; 0x24
   1da6c:	ldr	r4, [ip]
   1da70:	cmp	r4, #1
   1da74:	bls	1dad8 <__assert_fail@plt+0xcb60>
   1da78:	bl	10e4c <clock@plt>
   1da7c:	ldr	ip, [sp, #52]	; 0x34
   1da80:	movw	r3, #18928	; 0x49f0
   1da84:	movt	r3, #2
   1da88:	ldr	r2, [ip, #8]
   1da8c:	rsb	r0, r2, r0
   1da90:	cmp	r0, r3
   1da94:	bgt	1daa0 <__assert_fail@plt+0xcb28>
   1da98:	cmp	r4, #3
   1da9c:	bls	1dad8 <__assert_fail@plt+0xcb60>
   1daa0:	bl	10e4c <clock@plt>
   1daa4:	ldr	ip, [sp, #52]	; 0x34
   1daa8:	ldr	r3, [r8, #-4]
   1daac:	movw	r2, #18584	; 0x4898
   1dab0:	mov	r1, #1
   1dab4:	movt	r2, #2
   1dab8:	str	r0, [ip, #8]
   1dabc:	ldr	ip, [sp, #40]	; 0x28
   1dac0:	ldr	r0, [ip]
   1dac4:	bl	10eac <__fprintf_chk@plt>
   1dac8:	ldr	ip, [sp, #36]	; 0x24
   1dacc:	ldr	r3, [ip]
   1dad0:	cmp	r3, #3
   1dad4:	bhi	1dc5c <__assert_fail@plt+0xcce4>
   1dad8:	ldr	ip, [sp, #44]	; 0x2c
   1dadc:	mov	r5, #0
   1dae0:	ldrd	r0, [sp, #16]
   1dae4:	mov	r3, r7
   1dae8:	rsb	r4, fp, ip
   1daec:	ldr	ip, [sp, #48]	; 0x30
   1daf0:	cmp	r1, r5
   1daf4:	cmpeq	r0, r4
   1daf8:	mov	r1, #1
   1dafc:	movls	r4, r0
   1db00:	add	r0, ip, fp
   1db04:	mov	r2, r4
   1db08:	movhi	r6, r9
   1db0c:	bl	10df8 <fread@plt>
   1db10:	cmp	r0, r4
   1db14:	bne	1dcd4 <__assert_fail@plt+0xcd5c>
   1db18:	ldr	ip, [sp, #28]
   1db1c:	mov	r0, r7
   1db20:	add	fp, fp, r4
   1db24:	str	r4, [ip, r9, lsl #2]
   1db28:	add	r9, r9, #1
   1db2c:	ldr	ip, [sp, #32]
   1db30:	add	ip, ip, r4
   1db34:	str	ip, [sp, #32]
   1db38:	bl	10eb8 <fclose@plt>
   1db3c:	cmp	r9, r6
   1db40:	bcs	1dbc0 <__assert_fail@plt+0xcc48>
   1db44:	ldr	r0, [r8]
   1db48:	mov	sl, r8
   1db4c:	bl	1c810 <__assert_fail@plt+0xb898>
   1db50:	add	r2, sp, #80	; 0x50
   1db54:	strd	r0, [sp, #16]
   1db58:	mov	r0, #3
   1db5c:	ldr	r1, [r8], #4
   1db60:	bl	10f30 <__xstat64@plt>
   1db64:	cmp	r0, #0
   1db68:	bne	1da50 <__assert_fail@plt+0xcad8>
   1db6c:	ldr	r3, [sp, #96]	; 0x60
   1db70:	and	r3, r3, #61440	; 0xf000
   1db74:	cmp	r3, #16384	; 0x4000
   1db78:	bne	1da50 <__assert_fail@plt+0xcad8>
   1db7c:	ldr	ip, [sp, #36]	; 0x24
   1db80:	ldr	r3, [ip]
   1db84:	cmp	r3, #1
   1db88:	bls	1dba8 <__assert_fail@plt+0xcc30>
   1db8c:	ldr	ip, [sp, #40]	; 0x28
   1db90:	movw	r2, #18520	; 0x4858
   1db94:	mov	r1, #1
   1db98:	movt	r2, #2
   1db9c:	ldr	r3, [r8, #-4]
   1dba0:	ldr	r0, [ip]
   1dba4:	bl	10eac <__fprintf_chk@plt>
   1dba8:	ldr	ip, [sp, #28]
   1dbac:	mov	r3, #0
   1dbb0:	str	r3, [ip, r9, lsl #2]
   1dbb4:	add	r9, r9, #1
   1dbb8:	cmp	r9, r6
   1dbbc:	bcc	1db44 <__assert_fail@plt+0xcbcc>
   1dbc0:	ldr	ip, [sp, #32]
   1dbc4:	cmp	ip, #0
   1dbc8:	beq	1dcb4 <__assert_fail@plt+0xcd3c>
   1dbcc:	ldr	ip, [sp, #56]	; 0x38
   1dbd0:	mov	r1, #20
   1dbd4:	mov	r3, r1
   1dbd8:	movw	r2, #18648	; 0x48d8
   1dbdc:	add	r0, sp, #184	; 0xb8
   1dbe0:	movt	r2, #2
   1dbe4:	str	ip, [sp, #4]
   1dbe8:	str	r2, [sp]
   1dbec:	mov	r2, #1
   1dbf0:	bl	10f6c <__snprintf_chk@plt>
   1dbf4:	ldr	ip, [sp, #56]	; 0x38
   1dbf8:	ldr	r3, [sp, #72]	; 0x48
   1dbfc:	cmp	ip, #1
   1dc00:	ldr	r1, [sp, #44]	; 0x2c
   1dc04:	addhi	r2, sp, #184	; 0xb8
   1dc08:	ldr	r0, [sp, #48]	; 0x30
   1dc0c:	ldrls	ip, [sp, #68]	; 0x44
   1dc10:	ldrls	r2, [ip]
   1dc14:	ldr	ip, [sp, #76]	; 0x4c
   1dc18:	str	ip, [sp]
   1dc1c:	ldr	ip, [sp, #28]
   1dc20:	str	ip, [sp, #4]
   1dc24:	ldr	ip, [sp, #56]	; 0x38
   1dc28:	str	ip, [sp, #8]
   1dc2c:	bl	1c97c <__assert_fail@plt+0xba04>
   1dc30:	ldr	r0, [sp, #48]	; 0x30
   1dc34:	bl	10d44 <free@plt>
   1dc38:	ldr	ip, [sp, #60]	; 0x3c
   1dc3c:	ldr	r2, [sp, #204]	; 0xcc
   1dc40:	ldr	r3, [ip]
   1dc44:	cmp	r2, r3
   1dc48:	bne	1ddd4 <__assert_fail@plt+0xce5c>
   1dc4c:	ldr	r0, [sp, #28]
   1dc50:	add	sp, sp, #212	; 0xd4
   1dc54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc58:	b	10d44 <free@plt>
   1dc5c:	ldr	ip, [sp, #64]	; 0x40
   1dc60:	ldr	r0, [ip]
   1dc64:	bl	10d2c <fflush@plt>
   1dc68:	b	1dad8 <__assert_fail@plt+0xcb60>
   1dc6c:	adds	r6, r6, #-67108864	; 0xfc000000
   1dc70:	b	1d994 <__assert_fail@plt+0xca1c>
   1dc74:	ldr	ip, [sp, #44]	; 0x2c
   1dc78:	movw	r3, #28940	; 0x710c
   1dc7c:	movt	r3, #3
   1dc80:	movw	r2, #18476	; 0x482c
   1dc84:	mov	r1, #1
   1dc88:	movt	r2, #2
   1dc8c:	ldr	r0, [r3]
   1dc90:	lsr	r3, ip, #20
   1dc94:	bl	10eac <__fprintf_chk@plt>
   1dc98:	b	1d9dc <__assert_fail@plt+0xca64>
   1dc9c:	mov	r4, #0
   1dca0:	mov	r5, #0
   1dca4:	b	1d8d0 <__assert_fail@plt+0xc958>
   1dca8:	movw	ip, #28904	; 0x70e8
   1dcac:	movt	ip, #3
   1dcb0:	str	ip, [sp, #36]	; 0x24
   1dcb4:	ldr	ip, [sp, #36]	; 0x24
   1dcb8:	movw	r5, #28904	; 0x70e8
   1dcbc:	movt	r5, #3
   1dcc0:	ldr	r3, [ip]
   1dcc4:	cmp	r3, #0
   1dcc8:	bne	1dd14 <__assert_fail@plt+0xcd9c>
   1dccc:	mov	r0, #12
   1dcd0:	bl	10e58 <exit@plt>
   1dcd4:	ldr	ip, [sp, #36]	; 0x24
   1dcd8:	movw	r5, #28904	; 0x70e8
   1dcdc:	movt	r5, #3
   1dce0:	ldr	r3, [ip]
   1dce4:	cmp	r3, #0
   1dce8:	bne	1de80 <__assert_fail@plt+0xcf08>
   1dcec:	mov	r0, #11
   1dcf0:	bl	10e58 <exit@plt>
   1dcf4:	ldr	ip, [sp, #36]	; 0x24
   1dcf8:	movw	r5, #28904	; 0x70e8
   1dcfc:	movt	r5, #3
   1dd00:	ldr	r3, [ip]
   1dd04:	cmp	r3, #0
   1dd08:	bne	1dd74 <__assert_fail@plt+0xcdfc>
   1dd0c:	mov	r0, #10
   1dd10:	bl	10e58 <exit@plt>
   1dd14:	movw	r4, #28940	; 0x710c
   1dd18:	movt	r4, #3
   1dd1c:	mov	r3, #12
   1dd20:	movw	r2, #17788	; 0x457c
   1dd24:	mov	r1, #1
   1dd28:	ldr	r0, [r4]
   1dd2c:	movt	r2, #2
   1dd30:	bl	10eac <__fprintf_chk@plt>
   1dd34:	ldr	r3, [r5]
   1dd38:	cmp	r3, #0
   1dd3c:	beq	1dccc <__assert_fail@plt+0xcd54>
   1dd40:	movw	r0, #18628	; 0x48c4
   1dd44:	movt	r0, #2
   1dd48:	mov	r1, #1
   1dd4c:	mov	r2, #16
   1dd50:	ldr	r3, [r4]
   1dd54:	bl	10dd4 <fwrite@plt>
   1dd58:	ldr	r3, [r5]
   1dd5c:	cmp	r3, #0
   1dd60:	beq	1dccc <__assert_fail@plt+0xcd54>
   1dd64:	ldr	r1, [r4]
   1dd68:	mov	r0, #10
   1dd6c:	bl	10ef4 <fputc@plt>
   1dd70:	b	1dccc <__assert_fail@plt+0xcd54>
   1dd74:	movw	r4, #28940	; 0x710c
   1dd78:	movt	r4, #3
   1dd7c:	mov	r3, #10
   1dd80:	movw	r2, #17788	; 0x457c
   1dd84:	mov	r1, #1
   1dd88:	ldr	r0, [r4]
   1dd8c:	movt	r2, #2
   1dd90:	bl	10eac <__fprintf_chk@plt>
   1dd94:	ldr	r3, [r5]
   1dd98:	cmp	r3, #0
   1dd9c:	beq	1dd0c <__assert_fail@plt+0xcd94>
   1dda0:	ldr	r3, [sl]
   1dda4:	movw	r2, #18556	; 0x487c
   1dda8:	ldr	r0, [r4]
   1ddac:	movt	r2, #2
   1ddb0:	mov	r1, #1
   1ddb4:	bl	10eac <__fprintf_chk@plt>
   1ddb8:	ldr	r3, [r5]
   1ddbc:	cmp	r3, #0
   1ddc0:	beq	1dd0c <__assert_fail@plt+0xcd94>
   1ddc4:	ldr	r1, [r4]
   1ddc8:	mov	r0, #10
   1ddcc:	bl	10ef4 <fputc@plt>
   1ddd0:	b	1dd0c <__assert_fail@plt+0xcd94>
   1ddd4:	bl	10db0 <__stack_chk_fail@plt>
   1ddd8:	movw	r5, #28904	; 0x70e8
   1dddc:	movt	r5, #3
   1dde0:	ldr	r3, [r5]
   1dde4:	cmp	r3, #0
   1dde8:	beq	1dccc <__assert_fail@plt+0xcd54>
   1ddec:	movw	r4, #28940	; 0x710c
   1ddf0:	movt	r4, #3
   1ddf4:	mov	r3, #12
   1ddf8:	movw	r2, #17788	; 0x457c
   1ddfc:	mov	r1, #1
   1de00:	ldr	r0, [r4]
   1de04:	movt	r2, #2
   1de08:	bl	10eac <__fprintf_chk@plt>
   1de0c:	ldr	r3, [r5]
   1de10:	cmp	r3, #0
   1de14:	beq	1dccc <__assert_fail@plt+0xcd54>
   1de18:	movw	r0, #18424	; 0x47f8
   1de1c:	mov	r1, #1
   1de20:	movt	r0, #2
   1de24:	mov	r2, #31
   1de28:	b	1dd50 <__assert_fail@plt+0xcdd8>
   1de2c:	movw	r5, #28904	; 0x70e8
   1de30:	movt	r5, #3
   1de34:	ldr	r3, [r5]
   1de38:	cmp	r3, #0
   1de3c:	beq	1dccc <__assert_fail@plt+0xcd54>
   1de40:	movw	r4, #28940	; 0x710c
   1de44:	movt	r4, #3
   1de48:	mov	r3, #12
   1de4c:	movw	r2, #17788	; 0x457c
   1de50:	mov	r1, #1
   1de54:	ldr	r0, [r4]
   1de58:	movt	r2, #2
   1de5c:	bl	10eac <__fprintf_chk@plt>
   1de60:	ldr	r3, [r5]
   1de64:	cmp	r3, #0
   1de68:	beq	1dccc <__assert_fail@plt+0xcd54>
   1de6c:	movw	r0, #18456	; 0x4818
   1de70:	mov	r1, #1
   1de74:	movt	r0, #2
   1de78:	mov	r2, #17
   1de7c:	b	1dd50 <__assert_fail@plt+0xcdd8>
   1de80:	movw	r4, #28940	; 0x710c
   1de84:	movt	r4, #3
   1de88:	mov	r3, #11
   1de8c:	movw	r2, #17788	; 0x457c
   1de90:	mov	r1, #1
   1de94:	ldr	r0, [r4]
   1de98:	movt	r2, #2
   1de9c:	bl	10eac <__fprintf_chk@plt>
   1dea0:	ldr	r3, [r5]
   1dea4:	cmp	r3, #0
   1dea8:	beq	1dcec <__assert_fail@plt+0xcd74>
   1deac:	ldr	r3, [sl]
   1deb0:	movw	r2, #18608	; 0x48b0
   1deb4:	ldr	r0, [r4]
   1deb8:	movt	r2, #2
   1debc:	mov	r1, #1
   1dec0:	bl	10eac <__fprintf_chk@plt>
   1dec4:	ldr	r3, [r5]
   1dec8:	cmp	r3, #0
   1decc:	beq	1dcec <__assert_fail@plt+0xcd74>
   1ded0:	ldr	r1, [r4]
   1ded4:	mov	r0, #10
   1ded8:	bl	10ef4 <fputc@plt>
   1dedc:	b	1dcec <__assert_fail@plt+0xcd74>
   1dee0:	movw	r3, #28904	; 0x70e8
   1dee4:	movt	r3, #3
   1dee8:	str	r0, [r3]
   1deec:	bx	lr
   1def0:	movw	r3, #28960	; 0x7120
   1def4:	movt	r3, #3
   1def8:	str	r0, [r3]
   1defc:	bx	lr
   1df00:	movw	r2, #28904	; 0x70e8
   1df04:	movt	r2, #3
   1df08:	ldr	r3, [r2]
   1df0c:	str	r0, [r2, #4]
   1df10:	cmp	r3, #2
   1df14:	bxls	lr
   1df18:	movw	r1, #28940	; 0x710c
   1df1c:	movt	r1, #3
   1df20:	mov	r3, r0
   1df24:	movw	r2, #18664	; 0x48e8
   1df28:	ldr	r0, [r1]
   1df2c:	movt	r2, #2
   1df30:	mov	r1, #1
   1df34:	b	10eac <__fprintf_chk@plt>
   1df38:	movw	r3, #28960	; 0x7120
   1df3c:	movt	r3, #3
   1df40:	str	r0, [r3, #4]
   1df44:	bx	lr
   1df48:	adds	r0, r0, #0
   1df4c:	movw	r3, #28960	; 0x7120
   1df50:	movt	r3, #3
   1df54:	movne	r0, #1
   1df58:	str	r0, [r3, #12]
   1df5c:	bx	lr
   1df60:	push	{r4, r5, r6, r7, r8, lr}
   1df64:	cmp	r2, #12
   1df68:	movlt	r7, r2
   1df6c:	movge	r7, #12
   1df70:	cmp	r3, #12
   1df74:	sub	sp, sp, #8
   1df78:	mov	r6, r3
   1df7c:	mov	r5, r0
   1df80:	mov	r8, r1
   1df84:	bgt	1dfd0 <__assert_fail@plt+0xd058>
   1df88:	cmp	r3, r7
   1df8c:	movlt	r6, r7
   1df90:	bge	1dfd4 <__assert_fail@plt+0xd05c>
   1df94:	cmp	r8, #0
   1df98:	beq	1dfc4 <__assert_fail@plt+0xd04c>
   1df9c:	mov	r4, #0
   1dfa0:	mov	r0, r5
   1dfa4:	add	r4, r4, #1
   1dfa8:	mov	r1, #1
   1dfac:	mov	r2, r7
   1dfb0:	mov	r3, r6
   1dfb4:	add	r5, r5, #4
   1dfb8:	bl	1d854 <__assert_fail@plt+0xc8dc>
   1dfbc:	cmp	r4, r8
   1dfc0:	bne	1dfa0 <__assert_fail@plt+0xd028>
   1dfc4:	mov	r0, #0
   1dfc8:	add	sp, sp, #8
   1dfcc:	pop	{r4, r5, r6, r7, r8, pc}
   1dfd0:	mov	r6, #12
   1dfd4:	cmp	r6, r7
   1dfd8:	ble	1df94 <__assert_fail@plt+0xd01c>
   1dfdc:	movw	r3, #28904	; 0x70e8
   1dfe0:	movt	r3, #3
   1dfe4:	ldr	r3, [r3]
   1dfe8:	cmp	r3, #1
   1dfec:	bls	1df94 <__assert_fail@plt+0xd01c>
   1dff0:	movw	r3, #28940	; 0x710c
   1dff4:	movt	r3, #3
   1dff8:	str	r6, [sp]
   1dffc:	movw	r2, #18720	; 0x4920
   1e000:	ldr	r0, [r3]
   1e004:	movt	r2, #2
   1e008:	mov	r1, #1
   1e00c:	mov	r3, r7
   1e010:	bl	10eac <__fprintf_chk@plt>
   1e014:	b	1df94 <__assert_fail@plt+0xd01c>
   1e018:	push	{r4, r5, r6, r7, r8, r9, lr}
   1e01c:	movw	r5, #28936	; 0x7108
   1e020:	movt	r5, #3
   1e024:	mov	r4, r3
   1e028:	sub	sp, sp, #52	; 0x34
   1e02c:	cmp	r2, #12
   1e030:	movlt	r7, r2
   1e034:	movge	r7, #12
   1e038:	ldr	r3, [r5]
   1e03c:	cmp	r4, #12
   1e040:	mov	r8, r0
   1e044:	mov	r6, r1
   1e048:	str	r3, [sp, #44]	; 0x2c
   1e04c:	bgt	1e0a8 <__assert_fail@plt+0xd130>
   1e050:	cmp	r7, r4
   1e054:	movgt	r4, r7
   1e058:	ble	1e0ac <__assert_fail@plt+0xd134>
   1e05c:	cmp	r6, #0
   1e060:	beq	1e0f4 <__assert_fail@plt+0xd17c>
   1e064:	movw	r3, #28960	; 0x7120
   1e068:	movt	r3, #3
   1e06c:	mov	r0, r8
   1e070:	mov	r1, r6
   1e074:	ldr	r3, [r3, #12]
   1e078:	mov	r2, r7
   1e07c:	cmp	r3, #0
   1e080:	mov	r3, r4
   1e084:	bne	1e190 <__assert_fail@plt+0xd218>
   1e088:	bl	1d854 <__assert_fail@plt+0xc8dc>
   1e08c:	ldr	r2, [sp, #44]	; 0x2c
   1e090:	mov	r0, #0
   1e094:	ldr	r3, [r5]
   1e098:	cmp	r2, r3
   1e09c:	bne	1e198 <__assert_fail@plt+0xd220>
   1e0a0:	add	sp, sp, #52	; 0x34
   1e0a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e0a8:	mov	r4, #12
   1e0ac:	cmp	r4, r7
   1e0b0:	ble	1e05c <__assert_fail@plt+0xd0e4>
   1e0b4:	movw	r3, #28904	; 0x70e8
   1e0b8:	movt	r3, #3
   1e0bc:	ldr	r3, [r3]
   1e0c0:	cmp	r3, #1
   1e0c4:	bls	1e05c <__assert_fail@plt+0xd0e4>
   1e0c8:	movw	r3, #28940	; 0x710c
   1e0cc:	movt	r3, #3
   1e0d0:	str	r4, [sp]
   1e0d4:	movw	r2, #18720	; 0x4920
   1e0d8:	ldr	r0, [r3]
   1e0dc:	movt	r2, #2
   1e0e0:	mov	r1, #1
   1e0e4:	mov	r3, r7
   1e0e8:	bl	10eac <__fprintf_chk@plt>
   1e0ec:	cmp	r6, #0
   1e0f0:	bne	1e064 <__assert_fail@plt+0xd0ec>
   1e0f4:	movw	r8, #38528	; 0x9680
   1e0f8:	movt	r8, #152	; 0x98
   1e0fc:	str	r6, [sp, #24]
   1e100:	mov	r0, r8
   1e104:	str	r6, [sp, #28]
   1e108:	str	r6, [sp, #32]
   1e10c:	str	r6, [sp, #36]	; 0x24
   1e110:	str	r6, [sp, #40]	; 0x28
   1e114:	str	r8, [sp, #20]
   1e118:	bl	10e1c <malloc@plt>
   1e11c:	subs	r9, r0, #0
   1e120:	beq	1e19c <__assert_fail@plt+0xd224>
   1e124:	vmov.f64	d0, #96	; 0x3f000000  0.5
   1e128:	vldr	d1, [pc, #232]	; 1e218 <__assert_fail@plt+0xd2a0>
   1e12c:	mov	r1, r8
   1e130:	mov	r2, r6
   1e134:	bl	1e568 <__assert_fail@plt+0xd5f0>
   1e138:	mov	r1, #20
   1e13c:	mov	r3, r1
   1e140:	mov	ip, #50	; 0x32
   1e144:	add	r0, sp, #24
   1e148:	str	ip, [sp, #4]
   1e14c:	movw	r2, #18756	; 0x4944
   1e150:	movt	r2, #2
   1e154:	str	r2, [sp]
   1e158:	mov	r2, #1
   1e15c:	bl	10f6c <__snprintf_chk@plt>
   1e160:	add	ip, sp, #48	; 0x30
   1e164:	mov	lr, #1
   1e168:	mov	r0, r9
   1e16c:	ldr	r1, [ip, #-28]!	; 0xffffffe4
   1e170:	add	r2, sp, #24
   1e174:	str	r4, [sp]
   1e178:	mov	r3, r7
   1e17c:	stmib	sp, {ip, lr}
   1e180:	bl	1c97c <__assert_fail@plt+0xba04>
   1e184:	mov	r0, r9
   1e188:	bl	10d44 <free@plt>
   1e18c:	b	1e08c <__assert_fail@plt+0xd114>
   1e190:	bl	1df60 <__assert_fail@plt+0xcfe8>
   1e194:	b	1e08c <__assert_fail@plt+0xd114>
   1e198:	bl	10db0 <__stack_chk_fail@plt>
   1e19c:	movw	r5, #28904	; 0x70e8
   1e1a0:	movt	r5, #3
   1e1a4:	ldr	r3, [r5]
   1e1a8:	cmp	r3, #0
   1e1ac:	bne	1e1b8 <__assert_fail@plt+0xd240>
   1e1b0:	mov	r0, #21
   1e1b4:	bl	10e58 <exit@plt>
   1e1b8:	movw	r4, #28940	; 0x710c
   1e1bc:	movt	r4, #3
   1e1c0:	mov	r3, #21
   1e1c4:	movw	r2, #17788	; 0x457c
   1e1c8:	mov	r1, #1
   1e1cc:	ldr	r0, [r4]
   1e1d0:	movt	r2, #2
   1e1d4:	bl	10eac <__fprintf_chk@plt>
   1e1d8:	ldr	r3, [r5]
   1e1dc:	cmp	r3, #0
   1e1e0:	beq	1e1b0 <__assert_fail@plt+0xd238>
   1e1e4:	ldr	r3, [r4]
   1e1e8:	movw	r0, #18456	; 0x4818
   1e1ec:	mov	r1, #1
   1e1f0:	movt	r0, #2
   1e1f4:	mov	r2, #17
   1e1f8:	bl	10dd4 <fwrite@plt>
   1e1fc:	ldr	r3, [r5]
   1e200:	cmp	r3, #0
   1e204:	beq	1e1b0 <__assert_fail@plt+0xd238>
   1e208:	ldr	r1, [r4]
   1e20c:	mov	r0, #10
   1e210:	bl	10ef4 <fputc@plt>
   1e214:	b	1e1b0 <__assert_fail@plt+0xd238>
	...
   1e220:	vcmpe.f64	d0, #0.0
   1e224:	push	{r4, r5}
   1e228:	vmrs	APSR_nzcv, fpscr
   1e22c:	bls	1e2b8 <__assert_fail@plt+0xd340>
   1e230:	bls	1e2c8 <__assert_fail@plt+0xd350>
   1e234:	mov	r5, #125	; 0x7d
   1e238:	mov	r4, #40	; 0x28
   1e23c:	movhi	r2, #48	; 0x30
   1e240:	bls	1e2c0 <__assert_fail@plt+0xd348>
   1e244:	mov	r3, #0
   1e248:	rsb	ip, r3, #8192	; 0x2000
   1e24c:	add	r1, r3, #1
   1e250:	vmov	s13, ip
   1e254:	vcvt.f64.s32	d7, s13
   1e258:	vmul.f64	d7, d7, d0
   1e25c:	vcvt.u32.f64	s13, d7
   1e260:	vmov	ip, s13
   1e264:	add	ip, r1, ip
   1e268:	cmp	ip, #8192	; 0x2000
   1e26c:	movcs	ip, #8192	; 0x2000
   1e270:	cmp	ip, r3
   1e274:	bls	1e2b0 <__assert_fail@plt+0xd338>
   1e278:	add	r3, r0, r3
   1e27c:	add	r1, r0, ip
   1e280:	strb	r2, [r3], #1
   1e284:	cmp	r3, r1
   1e288:	bne	1e280 <__assert_fail@plt+0xd308>
   1e28c:	add	r2, r2, #1
   1e290:	uxtb	r2, r2
   1e294:	cmp	r5, r2
   1e298:	movcc	r2, r4
   1e29c:	cmp	ip, #8192	; 0x2000
   1e2a0:	movne	r3, ip
   1e2a4:	bne	1e248 <__assert_fail@plt+0xd2d0>
   1e2a8:	pop	{r4, r5}
   1e2ac:	bx	lr
   1e2b0:	mov	ip, r3
   1e2b4:	b	1e28c <__assert_fail@plt+0xd314>
   1e2b8:	mov	r4, #0
   1e2bc:	mov	r5, #255	; 0xff
   1e2c0:	mov	r2, #0
   1e2c4:	b	1e244 <__assert_fail@plt+0xd2cc>
   1e2c8:	mov	r4, #40	; 0x28
   1e2cc:	b	1e2bc <__assert_fail@plt+0xd344>
   1e2d0:	vmov.f64	d7, #112	; 0x3f800000  1.0
   1e2d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2d8:	mov	r6, r0
   1e2dc:	mov	r7, r1
   1e2e0:	mov	r5, r2
   1e2e4:	mov	r8, r3
   1e2e8:	ldr	r4, [sp, #40]	; 0x28
   1e2ec:	vcmpe.f64	d0, d7
   1e2f0:	vmrs	APSR_nzcv, fpscr
   1e2f4:	blt	1e3a8 <__assert_fail@plt+0xd430>
   1e2f8:	movw	sl, #31153	; 0x79b1
   1e2fc:	mov	r9, #1
   1e300:	movt	sl, #40503	; 0x9e37
   1e304:	b	1e33c <__assert_fail@plt+0xd3c4>
   1e308:	bl	10e88 <memset@plt>
   1e30c:	ldr	r1, [r4]
   1e310:	movw	r3, #51831	; 0xca77
   1e314:	movt	r3, #34283	; 0x85eb
   1e318:	add	r2, r6, fp
   1e31c:	mov	r5, fp
   1e320:	mul	r1, sl, r1
   1e324:	eor	r3, r1, r3
   1e328:	ror	r3, r3, #19
   1e32c:	str	r3, [r4]
   1e330:	ubfx	r3, r3, #0, #13
   1e334:	ldrb	r3, [r8, r3]
   1e338:	strb	r3, [r2, #-1]
   1e33c:	ldr	r2, [r4]
   1e340:	movw	r3, #51831	; 0xca77
   1e344:	movt	r3, #34283	; 0x85eb
   1e348:	movw	ip, #51831	; 0xca77
   1e34c:	movt	ip, #34283	; 0x85eb
   1e350:	add	r0, r6, r5
   1e354:	mul	r2, sl, r2
   1e358:	mov	r1, #0
   1e35c:	eor	r3, r2, r3
   1e360:	ror	r3, r3, #19
   1e364:	and	r2, r3, #3
   1e368:	mul	r3, sl, r3
   1e36c:	add	r2, r2, #8
   1e370:	lsl	r2, r2, #1
   1e374:	eor	ip, r3, ip
   1e378:	lsl	r3, r9, r2
   1e37c:	sub	r2, r3, #1
   1e380:	ror	ip, ip, #19
   1e384:	str	ip, [r4]
   1e388:	and	ip, r2, ip
   1e38c:	add	r2, ip, r3
   1e390:	add	fp, r5, r2
   1e394:	cmp	fp, r7
   1e398:	bls	1e308 <__assert_fail@plt+0xd390>
   1e39c:	rsb	r2, r5, r7
   1e3a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3a4:	b	10e88 <memset@plt>
   1e3a8:	cmp	r2, #0
   1e3ac:	bne	1e3e4 <__assert_fail@plt+0xd46c>
   1e3b0:	ldr	r1, [r4]
   1e3b4:	movw	r2, #31153	; 0x79b1
   1e3b8:	movt	r2, #40503	; 0x9e37
   1e3bc:	movw	r3, #51831	; 0xca77
   1e3c0:	movt	r3, #34283	; 0x85eb
   1e3c4:	mov	r5, #1
   1e3c8:	mul	r2, r2, r1
   1e3cc:	eor	r3, r2, r3
   1e3d0:	ror	r3, r3, #19
   1e3d4:	str	r3, [r4]
   1e3d8:	ubfx	r3, r3, #0, #13
   1e3dc:	ldrb	r3, [r8, r3]
   1e3e0:	strb	r3, [r0]
   1e3e4:	cmp	r7, r5
   1e3e8:	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3ec:	vldr	d7, [pc, #364]	; 1e560 <__assert_fail@plt+0xd5e8>
   1e3f0:	vmul.f64	d0, d0, d7
   1e3f4:	movw	r2, #31153	; 0x79b1
   1e3f8:	movt	r2, #40503	; 0x9e37
   1e3fc:	vcvt.u32.f64	s15, d0
   1e400:	vmov	r1, s15
   1e404:	ldr	r0, [r4]
   1e408:	movw	r3, #51831	; 0xca77
   1e40c:	movt	r3, #34283	; 0x85eb
   1e410:	mul	r0, r2, r0
   1e414:	eor	r3, r0, r3
   1e418:	ror	r3, r3, #19
   1e41c:	str	r3, [r4]
   1e420:	ubfx	r0, r3, #3, #15
   1e424:	mul	r3, r2, r3
   1e428:	cmp	r1, r0
   1e42c:	movw	r0, #51831	; 0xca77
   1e430:	movt	r0, #34283	; 0x85eb
   1e434:	eor	r0, r3, r0
   1e438:	ror	r0, r0, #19
   1e43c:	str	r0, [r4]
   1e440:	bls	1e4d8 <__assert_fail@plt+0xd560>
   1e444:	tst	r0, #896	; 0x380
   1e448:	movw	r3, #51831	; 0xca77
   1e44c:	mul	r0, r2, r0
   1e450:	movt	r3, #34283	; 0x85eb
   1e454:	eor	r3, r0, r3
   1e458:	ror	r3, r3, #19
   1e45c:	andne	sl, r3, #15
   1e460:	ubfxeq	sl, r3, #0, #9
   1e464:	mul	r0, r2, r3
   1e468:	movw	r3, #51831	; 0xca77
   1e46c:	movt	r3, #34283	; 0x85eb
   1e470:	addne	sl, sl, #4
   1e474:	addeq	sl, sl, #19
   1e478:	eor	r3, r0, r3
   1e47c:	add	sl, sl, r5
   1e480:	cmp	sl, r7
   1e484:	movcs	sl, r7
   1e488:	ror	r3, r3, #19
   1e48c:	str	r3, [r4]
   1e490:	ubfx	r3, r3, #3, #15
   1e494:	add	r0, r3, #1
   1e498:	cmp	r0, r5
   1e49c:	movcs	r0, r5
   1e4a0:	cmp	sl, r5
   1e4a4:	rsb	r0, r0, r5
   1e4a8:	bls	1e4cc <__assert_fail@plt+0xd554>
   1e4ac:	add	ip, r6, r5
   1e4b0:	add	r9, r6, sl
   1e4b4:	rsb	r3, r5, ip
   1e4b8:	ldrb	r3, [r3, r0]
   1e4bc:	strb	r3, [ip], #1
   1e4c0:	cmp	ip, r9
   1e4c4:	bne	1e4b4 <__assert_fail@plt+0xd53c>
   1e4c8:	mov	r5, sl
   1e4cc:	cmp	r7, r5
   1e4d0:	bhi	1e404 <__assert_fail@plt+0xd48c>
   1e4d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4d8:	tst	r0, #896	; 0x380
   1e4dc:	movw	r3, #51831	; 0xca77
   1e4e0:	mul	r0, r2, r0
   1e4e4:	movt	r3, #34283	; 0x85eb
   1e4e8:	eor	r3, r0, r3
   1e4ec:	roreq	r3, r3, #19
   1e4f0:	rorne	r0, r3, #19
   1e4f4:	streq	r3, [r4]
   1e4f8:	ubfxeq	r3, r3, #0, #9
   1e4fc:	strne	r0, [r4]
   1e500:	addeq	r0, r3, #15
   1e504:	andne	r0, r0, #15
   1e508:	add	r0, r0, r5
   1e50c:	cmp	r0, r7
   1e510:	movcs	r0, r7
   1e514:	cmp	r0, r5
   1e518:	bls	1e4cc <__assert_fail@plt+0xd554>
   1e51c:	add	r5, r6, r5
   1e520:	add	r9, r6, r0
   1e524:	ldr	r3, [r4]
   1e528:	movw	ip, #51831	; 0xca77
   1e52c:	movt	ip, #34283	; 0x85eb
   1e530:	mul	r3, r2, r3
   1e534:	eor	ip, r3, ip
   1e538:	ror	ip, ip, #19
   1e53c:	str	ip, [r4]
   1e540:	ubfx	ip, ip, #0, #13
   1e544:	ldrb	r3, [r8, ip]
   1e548:	strb	r3, [r5], #1
   1e54c:	cmp	r5, r9
   1e550:	bne	1e524 <__assert_fail@plt+0xd5ac>
   1e554:	mov	r5, r0
   1e558:	b	1e4cc <__assert_fail@plt+0xd554>
   1e55c:	nop	{0}
   1e560:	andeq	r0, r0, r0
   1e564:	rscmi	r0, r0, r0
   1e568:	vcmp.f64	d1, #0.0
   1e56c:	movw	r3, #57332	; 0xdff4
   1e570:	push	{r4, r5, r6, lr}
   1e574:	vpush	{d8}
   1e578:	sub	sp, sp, #8192	; 0x2000
   1e57c:	sub	sp, sp, #24
   1e580:	mov	r6, r1
   1e584:	vmrs	APSR_nzcv, fpscr
   1e588:	vmoveq.f64	d1, #18	; 0x40900000  4.5
   1e58c:	movw	r4, #28936	; 0x7108
   1e590:	add	r1, sp, #8192	; 0x2000
   1e594:	movt	r4, #3
   1e598:	add	r1, r1, #24
   1e59c:	movt	r3, #65535	; 0xffff
   1e5a0:	mov	r5, r0
   1e5a4:	ldr	r0, [r4]
   1e5a8:	str	r2, [r1, r3]
   1e5ac:	add	r3, sp, #8192	; 0x2000
   1e5b0:	str	r0, [r3, #20]
   1e5b4:	add	r0, sp, #20
   1e5b8:	vdiveq.f64	d1, d0, d1
   1e5bc:	vmov.f64	d8, d0
   1e5c0:	vmov.f64	d0, d1
   1e5c4:	bl	1e220 <__assert_fail@plt+0xd2a8>
   1e5c8:	add	r3, sp, #20
   1e5cc:	add	r2, sp, #12
   1e5d0:	mov	r0, r5
   1e5d4:	str	r2, [sp]
   1e5d8:	mov	r1, r6
   1e5dc:	mov	r2, #0
   1e5e0:	vmov.f64	d0, d8
   1e5e4:	bl	1e2d0 <__assert_fail@plt+0xd358>
   1e5e8:	add	r3, sp, #8192	; 0x2000
   1e5ec:	ldr	r2, [r3, #20]
   1e5f0:	ldr	r3, [r4]
   1e5f4:	cmp	r2, r3
   1e5f8:	bne	1e60c <__assert_fail@plt+0xd694>
   1e5fc:	add	sp, sp, #8192	; 0x2000
   1e600:	add	sp, sp, #24
   1e604:	vpop	{d8}
   1e608:	pop	{r4, r5, r6, pc}
   1e60c:	bl	10db0 <__stack_chk_fail@plt>
   1e610:	vcmp.f64	d1, #0.0
   1e614:	movw	r3, #28936	; 0x7108
   1e618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e61c:	vpush	{d8}
   1e620:	sub	sp, sp, #172032	; 0x2a000
   1e624:	sub	sp, sp, #28
   1e628:	movt	r3, #3
   1e62c:	vmrs	APSR_nzcv, fpscr
   1e630:	vmoveq.f64	d1, #18	; 0x40900000  4.5
   1e634:	str	r3, [sp, #8]
   1e638:	mov	r6, r0
   1e63c:	ldr	r0, [sp, #8]
   1e640:	mov	r7, r1
   1e644:	movw	r3, #24564	; 0x5ff4
   1e648:	movt	r3, #65533	; 0xfffd
   1e64c:	add	sl, sp, #12
   1e650:	ldr	r1, [r0]
   1e654:	add	r0, sp, #172032	; 0x2a000
   1e658:	add	r0, r0, #24
   1e65c:	str	r2, [r0, r3]
   1e660:	add	r3, sp, #172032	; 0x2a000
   1e664:	add	r0, sp, #20
   1e668:	vdiveq.f64	d1, d0, d1
   1e66c:	str	r1, [r3, #20]
   1e670:	vmov.f64	d8, d0
   1e674:	vmov.f64	d0, d1
   1e678:	bl	1e220 <__assert_fail@plt+0xd2a8>
   1e67c:	add	r0, sp, #8192	; 0x2000
   1e680:	mov	r1, #32768	; 0x8000
   1e684:	str	sl, [sp]
   1e688:	add	r3, sp, #20
   1e68c:	add	r0, r0, #20
   1e690:	mov	r2, #0
   1e694:	vmov.f64	d0, d8
   1e698:	bl	1e2d0 <__assert_fail@plt+0xd358>
   1e69c:	orrs	r1, r6, r7
   1e6a0:	beq	1e74c <__assert_fail@plt+0xd7d4>
   1e6a4:	add	r3, sp, #8192	; 0x2000
   1e6a8:	movw	r9, #28952	; 0x7118
   1e6ac:	add	r3, r3, #20
   1e6b0:	movt	r9, #3
   1e6b4:	add	fp, r3, #131072	; 0x20000
   1e6b8:	mov	r4, #0
   1e6bc:	mov	r5, #0
   1e6c0:	mov	r8, #131072	; 0x20000
   1e6c4:	add	r0, sp, #8192	; 0x2000
   1e6c8:	vmov.f64	d0, d8
   1e6cc:	add	r0, r0, #20
   1e6d0:	mov	r1, #163840	; 0x28000
   1e6d4:	mov	r2, #32768	; 0x8000
   1e6d8:	add	r3, sp, #20
   1e6dc:	str	sl, [sp]
   1e6e0:	bl	1e2d0 <__assert_fail@plt+0xd358>
   1e6e4:	mov	r2, r6
   1e6e8:	mov	r3, r7
   1e6ec:	movw	r0, #65535	; 0xffff
   1e6f0:	subs	r2, r2, r4
   1e6f4:	sbc	r3, r3, r5
   1e6f8:	movt	r0, #1
   1e6fc:	mov	r1, #0
   1e700:	cmp	r3, r1
   1e704:	cmpeq	r2, r0
   1e708:	rsbls	r8, r4, r6
   1e70c:	add	r0, sp, #8192	; 0x2000
   1e710:	adds	r4, r4, r8
   1e714:	mov	r1, #1
   1e718:	mov	r2, r8
   1e71c:	ldr	r3, [r9]
   1e720:	add	r0, r0, #20
   1e724:	adc	r5, r5, #0
   1e728:	bl	10dd4 <fwrite@plt>
   1e72c:	add	r0, sp, #8192	; 0x2000
   1e730:	add	r0, r0, #20
   1e734:	mov	r1, fp
   1e738:	mov	r2, #32768	; 0x8000
   1e73c:	bl	10d74 <memcpy@plt>
   1e740:	cmp	r7, r5
   1e744:	cmpeq	r6, r4
   1e748:	bhi	1e6c4 <__assert_fail@plt+0xd74c>
   1e74c:	ldr	r0, [sp, #8]
   1e750:	add	r1, sp, #172032	; 0x2a000
   1e754:	ldr	r2, [r1, #20]
   1e758:	ldr	r3, [r0]
   1e75c:	cmp	r2, r3
   1e760:	bne	1e774 <__assert_fail@plt+0xd7fc>
   1e764:	add	sp, sp, #172032	; 0x2a000
   1e768:	add	sp, sp, #28
   1e76c:	vpop	{d8}
   1e770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e774:	bl	10db0 <__stack_chk_fail@plt>
   1e778:	ldr	ip, [r0]
   1e77c:	push	{r4}		; (str r4, [sp, #-4]!)
   1e780:	mov	r4, r0
   1e784:	ldrb	r2, [ip]
   1e788:	sub	r3, r2, #48	; 0x30
   1e78c:	cmp	r3, #9
   1e790:	bhi	1e814 <__assert_fail@plt+0xd89c>
   1e794:	add	r3, ip, #1
   1e798:	mov	r0, #0
   1e79c:	add	r1, r0, r0, lsl #2
   1e7a0:	str	r3, [r4]
   1e7a4:	mov	ip, r3
   1e7a8:	add	r1, r2, r1, lsl #1
   1e7ac:	ldrb	r2, [r3], #1
   1e7b0:	sub	r0, r1, #48	; 0x30
   1e7b4:	sub	r1, r2, #48	; 0x30
   1e7b8:	cmp	r1, #9
   1e7bc:	bls	1e79c <__assert_fail@plt+0xd824>
   1e7c0:	subs	r1, r2, #77	; 0x4d
   1e7c4:	rsbs	r3, r1, #0
   1e7c8:	adcs	r3, r3, r1
   1e7cc:	cmp	r2, #77	; 0x4d
   1e7d0:	cmpne	r2, #75	; 0x4b
   1e7d4:	bne	1e80c <__assert_fail@plt+0xd894>
   1e7d8:	cmp	r3, #0
   1e7dc:	lsl	r0, r0, #10
   1e7e0:	add	r3, ip, #1
   1e7e4:	str	r3, [r4]
   1e7e8:	ldrb	r2, [ip, #1]
   1e7ec:	lslne	r0, r0, #10
   1e7f0:	cmp	r2, #105	; 0x69
   1e7f4:	addeq	r3, ip, #2
   1e7f8:	streq	r3, [r4]
   1e7fc:	ldrbeq	r2, [ip, #2]
   1e800:	cmp	r2, #66	; 0x42
   1e804:	addeq	r3, r3, #1
   1e808:	streq	r3, [r4]
   1e80c:	pop	{r4}		; (ldr r4, [sp], #4)
   1e810:	bx	lr
   1e814:	mov	r0, #0
   1e818:	b	1e7c0 <__assert_fail@plt+0xd848>
   1e81c:	push	{r4, r5, r6, lr}
   1e820:	mov	r5, r0
   1e824:	mov	r0, r1
   1e828:	mov	r4, r1
   1e82c:	bl	10e64 <strlen@plt>
   1e830:	mov	r1, r4
   1e834:	mov	r6, r0
   1e838:	mov	r0, r5
   1e83c:	mov	r2, r6
   1e840:	bl	10f48 <strncmp@plt>
   1e844:	cmp	r0, #0
   1e848:	bne	1e868 <__assert_fail@plt+0xd8f0>
   1e84c:	ldrb	r0, [r5, r6]
   1e850:	cmp	r0, #0
   1e854:	beq	1e870 <__assert_fail@plt+0xd8f8>
   1e858:	subs	r3, r0, #46	; 0x2e
   1e85c:	rsbs	r0, r3, #0
   1e860:	adcs	r0, r0, r3
   1e864:	pop	{r4, r5, r6, pc}
   1e868:	mov	r0, #0
   1e86c:	pop	{r4, r5, r6, pc}
   1e870:	mov	r0, #1
   1e874:	pop	{r4, r5, r6, pc}
   1e878:	push	{r4, lr}
   1e87c:	movw	r4, #28936	; 0x7108
   1e880:	movt	r4, #3
   1e884:	sub	sp, sp, #112	; 0x70
   1e888:	mov	r1, r0
   1e88c:	mov	r0, #3
   1e890:	ldr	r3, [r4]
   1e894:	mov	r2, sp
   1e898:	str	r3, [sp, #108]	; 0x6c
   1e89c:	bl	10f30 <__xstat64@plt>
   1e8a0:	cmp	r0, #0
   1e8a4:	movne	r0, #0
   1e8a8:	bne	1e8c0 <__assert_fail@plt+0xd948>
   1e8ac:	ldr	r0, [sp, #16]
   1e8b0:	and	r0, r0, #61440	; 0xf000
   1e8b4:	subs	r3, r0, #16384	; 0x4000
   1e8b8:	rsbs	r0, r3, #0
   1e8bc:	adcs	r0, r0, r3
   1e8c0:	ldr	r2, [sp, #108]	; 0x6c
   1e8c4:	ldr	r3, [r4]
   1e8c8:	cmp	r2, r3
   1e8cc:	bne	1e8d8 <__assert_fail@plt+0xd960>
   1e8d0:	add	sp, sp, #112	; 0x70
   1e8d4:	pop	{r4, pc}
   1e8d8:	bl	10db0 <__stack_chk_fail@plt>
   1e8dc:	push	{r3, r4, r5, lr}
   1e8e0:	movw	r4, #28940	; 0x710c
   1e8e4:	movt	r4, #3
   1e8e8:	mov	r5, r0
   1e8ec:	mov	r1, #1
   1e8f0:	mov	r2, #9
   1e8f4:	ldr	r3, [r4]
   1e8f8:	movw	r0, #18816	; 0x4980
   1e8fc:	movt	r0, #2
   1e900:	bl	10dd4 <fwrite@plt>
   1e904:	mov	r3, r5
   1e908:	ldr	r0, [r4]
   1e90c:	mov	r1, #1
   1e910:	movw	r2, #18828	; 0x498c
   1e914:	movt	r2, #2
   1e918:	bl	10eac <__fprintf_chk@plt>
   1e91c:	ldr	r1, [r4]
   1e920:	mov	r0, #10
   1e924:	bl	10ef4 <fputc@plt>
   1e928:	ldr	r3, [r4]
   1e92c:	mov	r1, #1
   1e930:	mov	r2, #22
   1e934:	movw	r0, #18864	; 0x49b0
   1e938:	movt	r0, #2
   1e93c:	bl	10dd4 <fwrite@plt>
   1e940:	ldr	r0, [r4]
   1e944:	mov	r1, #1
   1e948:	movw	r2, #18888	; 0x49c8
   1e94c:	movw	r3, #18788	; 0x4964
   1e950:	movt	r2, #2
   1e954:	movt	r3, #2
   1e958:	bl	10eac <__fprintf_chk@plt>
   1e95c:	ldr	r3, [r4]
   1e960:	mov	r1, #1
   1e964:	mov	r2, #13
   1e968:	movw	r0, #18960	; 0x4a10
   1e96c:	movt	r0, #2
   1e970:	bl	10dd4 <fwrite@plt>
   1e974:	ldr	r3, [r4]
   1e978:	mov	r1, #1
   1e97c:	mov	r2, #38	; 0x26
   1e980:	movw	r0, #18976	; 0x4a20
   1e984:	movt	r0, #2
   1e988:	bl	10dd4 <fwrite@plt>
   1e98c:	ldr	r3, [r4]
   1e990:	mov	r1, #1
   1e994:	mov	r2, #28
   1e998:	movw	r0, #19016	; 0x4a48
   1e99c:	movt	r0, #2
   1e9a0:	bl	10dd4 <fwrite@plt>
   1e9a4:	ldr	r0, [r4]
   1e9a8:	mov	r1, #1
   1e9ac:	movw	r2, #19048	; 0x4a68
   1e9b0:	movw	r3, #19100	; 0x4a9c
   1e9b4:	movt	r2, #2
   1e9b8:	movt	r3, #2
   1e9bc:	bl	10eac <__fprintf_chk@plt>
   1e9c0:	ldr	r3, [r4]
   1e9c4:	mov	r1, #1
   1e9c8:	mov	r2, #29
   1e9cc:	movw	r0, #19108	; 0x4aa4
   1e9d0:	movt	r0, #2
   1e9d4:	bl	10dd4 <fwrite@plt>
   1e9d8:	ldr	r3, [r4]
   1e9dc:	mov	r1, #1
   1e9e0:	mov	r2, #34	; 0x22
   1e9e4:	movw	r0, #19140	; 0x4ac4
   1e9e8:	movt	r0, #2
   1e9ec:	bl	10dd4 <fwrite@plt>
   1e9f0:	ldr	r3, [r4]
   1e9f4:	mov	r1, #1
   1e9f8:	mov	r2, #46	; 0x2e
   1e9fc:	movw	r0, #19176	; 0x4ae8
   1ea00:	movt	r0, #2
   1ea04:	bl	10dd4 <fwrite@plt>
   1ea08:	ldr	r3, [r4]
   1ea0c:	mov	r1, #1
   1ea10:	mov	r2, #47	; 0x2f
   1ea14:	movw	r0, #19224	; 0x4b18
   1ea18:	movt	r0, #2
   1ea1c:	bl	10dd4 <fwrite@plt>
   1ea20:	ldr	r3, [r4]
   1ea24:	mov	r1, #1
   1ea28:	mov	r2, #65	; 0x41
   1ea2c:	movw	r0, #19272	; 0x4b48
   1ea30:	movt	r0, #2
   1ea34:	bl	10dd4 <fwrite@plt>
   1ea38:	ldr	r3, [r4]
   1ea3c:	mov	r1, #1
   1ea40:	mov	r2, #43	; 0x2b
   1ea44:	movw	r0, #19340	; 0x4b8c
   1ea48:	movt	r0, #2
   1ea4c:	bl	10dd4 <fwrite@plt>
   1ea50:	mov	r0, #0
   1ea54:	pop	{r3, r4, r5, pc}
   1ea58:	push	{r4, r5, r6, lr}
   1ea5c:	movw	r4, #28940	; 0x710c
   1ea60:	movt	r4, #3
   1ea64:	sub	sp, sp, #16
   1ea68:	mov	r5, r0
   1ea6c:	ldr	r6, [r4]
   1ea70:	bl	14254 <__assert_fail@plt+0x32dc>
   1ea74:	mov	r1, #1
   1ea78:	mov	r2, #32
   1ea7c:	movw	r3, #19444	; 0x4bf4
   1ea80:	str	r2, [sp]
   1ea84:	movt	r3, #2
   1ea88:	movw	r2, #19384	; 0x4bb8
   1ea8c:	str	r3, [sp, #8]
   1ea90:	movt	r2, #2
   1ea94:	movw	r3, #19416	; 0x4bd8
   1ea98:	movt	r3, #2
   1ea9c:	str	r0, [sp, #4]
   1eaa0:	mov	r0, r6
   1eaa4:	bl	10eac <__fprintf_chk@plt>
   1eaa8:	mov	r0, r5
   1eaac:	bl	1e8dc <__assert_fail@plt+0xd964>
   1eab0:	ldr	r1, [r4]
   1eab4:	mov	r0, #10
   1eab8:	bl	10ef4 <fputc@plt>
   1eabc:	ldr	r3, [r4]
   1eac0:	mov	r1, #1
   1eac4:	mov	r2, #21
   1eac8:	movw	r0, #19456	; 0x4c00
   1eacc:	movt	r0, #2
   1ead0:	bl	10dd4 <fwrite@plt>
   1ead4:	ldr	r3, [r4]
   1ead8:	mov	r1, #1
   1eadc:	mov	r2, #43	; 0x2b
   1eae0:	movw	r0, #19480	; 0x4c18
   1eae4:	movt	r0, #2
   1eae8:	bl	10dd4 <fwrite@plt>
   1eaec:	ldr	r3, [r4]
   1eaf0:	mov	r1, #1
   1eaf4:	mov	r2, #24
   1eaf8:	movw	r0, #19524	; 0x4c44
   1eafc:	movt	r0, #2
   1eb00:	bl	10dd4 <fwrite@plt>
   1eb04:	ldr	r3, [r4]
   1eb08:	mov	r1, #1
   1eb0c:	mov	r2, #66	; 0x42
   1eb10:	movw	r0, #19552	; 0x4c60
   1eb14:	movt	r0, #2
   1eb18:	bl	10dd4 <fwrite@plt>
   1eb1c:	ldr	r3, [r4]
   1eb20:	mov	r1, #1
   1eb24:	mov	r2, #68	; 0x44
   1eb28:	movw	r0, #19620	; 0x4ca4
   1eb2c:	movt	r0, #2
   1eb30:	bl	10dd4 <fwrite@plt>
   1eb34:	ldr	r3, [r4]
   1eb38:	mov	r1, #1
   1eb3c:	mov	r2, #41	; 0x29
   1eb40:	movw	r0, #19692	; 0x4cec
   1eb44:	movt	r0, #2
   1eb48:	bl	10dd4 <fwrite@plt>
   1eb4c:	ldr	r3, [r4]
   1eb50:	mov	r1, #1
   1eb54:	mov	r2, #68	; 0x44
   1eb58:	movw	r0, #19736	; 0x4d18
   1eb5c:	movt	r0, #2
   1eb60:	bl	10dd4 <fwrite@plt>
   1eb64:	ldr	r3, [r4]
   1eb68:	mov	r1, #1
   1eb6c:	mov	r2, #61	; 0x3d
   1eb70:	movw	r0, #19808	; 0x4d60
   1eb74:	movt	r0, #2
   1eb78:	bl	10dd4 <fwrite@plt>
   1eb7c:	ldr	r3, [r4]
   1eb80:	mov	r1, #1
   1eb84:	mov	r2, #66	; 0x42
   1eb88:	movw	r0, #19872	; 0x4da0
   1eb8c:	movt	r0, #2
   1eb90:	bl	10dd4 <fwrite@plt>
   1eb94:	ldr	r3, [r4]
   1eb98:	mov	r1, #1
   1eb9c:	mov	r2, #42	; 0x2a
   1eba0:	movw	r0, #19940	; 0x4de4
   1eba4:	movt	r0, #2
   1eba8:	bl	10dd4 <fwrite@plt>
   1ebac:	ldr	r3, [r4]
   1ebb0:	mov	r1, #1
   1ebb4:	mov	r2, #56	; 0x38
   1ebb8:	movw	r0, #19984	; 0x4e10
   1ebbc:	movt	r0, #2
   1ebc0:	bl	10dd4 <fwrite@plt>
   1ebc4:	ldr	r3, [r4]
   1ebc8:	mov	r1, #1
   1ebcc:	mov	r2, #52	; 0x34
   1ebd0:	movw	r0, #20044	; 0x4e4c
   1ebd4:	movt	r0, #2
   1ebd8:	bl	10dd4 <fwrite@plt>
   1ebdc:	ldr	r3, [r4]
   1ebe0:	mov	r1, #1
   1ebe4:	mov	r2, #60	; 0x3c
   1ebe8:	movw	r0, #20100	; 0x4e84
   1ebec:	movt	r0, #2
   1ebf0:	bl	10dd4 <fwrite@plt>
   1ebf4:	ldr	r3, [r4]
   1ebf8:	mov	r1, #1
   1ebfc:	mov	r2, #79	; 0x4f
   1ec00:	movw	r0, #20164	; 0x4ec4
   1ec04:	movt	r0, #2
   1ec08:	bl	10dd4 <fwrite@plt>
   1ec0c:	ldr	r3, [r4]
   1ec10:	mov	r1, #1
   1ec14:	mov	r2, #75	; 0x4b
   1ec18:	movw	r0, #20244	; 0x4f14
   1ec1c:	movt	r0, #2
   1ec20:	bl	10dd4 <fwrite@plt>
   1ec24:	ldr	r3, [r4]
   1ec28:	mov	r1, #1
   1ec2c:	mov	r2, #79	; 0x4f
   1ec30:	movw	r0, #20320	; 0x4f60
   1ec34:	movt	r0, #2
   1ec38:	bl	10dd4 <fwrite@plt>
   1ec3c:	mov	r1, #1
   1ec40:	mov	r3, r1
   1ec44:	ldr	r0, [r4]
   1ec48:	movw	r2, #20400	; 0x4fb0
   1ec4c:	movt	r2, #2
   1ec50:	bl	10eac <__fprintf_chk@plt>
   1ec54:	ldr	r3, [r4]
   1ec58:	mov	r1, #1
   1ec5c:	mov	r2, #23
   1ec60:	movw	r0, #20468	; 0x4ff4
   1ec64:	movt	r0, #2
   1ec68:	bl	10dd4 <fwrite@plt>
   1ec6c:	ldr	r3, [r4]
   1ec70:	mov	r1, #1
   1ec74:	mov	r2, #70	; 0x46
   1ec78:	movw	r0, #20492	; 0x500c
   1ec7c:	movt	r0, #2
   1ec80:	bl	10dd4 <fwrite@plt>
   1ec84:	ldr	r3, [r4]
   1ec88:	mov	r1, #1
   1ec8c:	mov	r2, #66	; 0x42
   1ec90:	movw	r0, #20564	; 0x5054
   1ec94:	movt	r0, #2
   1ec98:	bl	10dd4 <fwrite@plt>
   1ec9c:	ldr	r3, [r4]
   1eca0:	mov	r1, #1
   1eca4:	mov	r2, #61	; 0x3d
   1eca8:	movw	r0, #20632	; 0x5098
   1ecac:	movt	r0, #2
   1ecb0:	bl	10dd4 <fwrite@plt>
   1ecb4:	ldr	r3, [r4]
   1ecb8:	mov	r1, #1
   1ecbc:	mov	r2, #66	; 0x42
   1ecc0:	movw	r0, #20696	; 0x50d8
   1ecc4:	movt	r0, #2
   1ecc8:	bl	10dd4 <fwrite@plt>
   1eccc:	ldr	r3, [r4]
   1ecd0:	movw	r0, #20764	; 0x511c
   1ecd4:	mov	r1, #1
   1ecd8:	movt	r0, #2
   1ecdc:	mov	r2, #66	; 0x42
   1ece0:	bl	10dd4 <fwrite@plt>
   1ece4:	movw	r3, #28976	; 0x7130
   1ece8:	movt	r3, #3
   1ecec:	ldr	r3, [r3]
   1ecf0:	cmp	r3, #0
   1ecf4:	beq	1ed70 <__assert_fail@plt+0xddf8>
   1ecf8:	mov	r1, #1
   1ecfc:	mov	r2, #20
   1ed00:	ldr	r3, [r4]
   1ed04:	movw	r0, #20832	; 0x5160
   1ed08:	movt	r0, #2
   1ed0c:	bl	10dd4 <fwrite@plt>
   1ed10:	mov	r1, #1
   1ed14:	mov	r2, #28
   1ed18:	ldr	r3, [r4]
   1ed1c:	movw	r0, #20856	; 0x5178
   1ed20:	movt	r0, #2
   1ed24:	bl	10dd4 <fwrite@plt>
   1ed28:	mov	r1, #1
   1ed2c:	mov	r2, #28
   1ed30:	ldr	r3, [r4]
   1ed34:	movw	r0, #20888	; 0x5198
   1ed38:	movt	r0, #2
   1ed3c:	bl	10dd4 <fwrite@plt>
   1ed40:	mov	r1, #1
   1ed44:	mov	r2, #33	; 0x21
   1ed48:	ldr	r3, [r4]
   1ed4c:	movw	r0, #20920	; 0x51b8
   1ed50:	movt	r0, #2
   1ed54:	bl	10dd4 <fwrite@plt>
   1ed58:	movw	r0, #20956	; 0x51dc
   1ed5c:	ldr	r3, [r4]
   1ed60:	mov	r1, #1
   1ed64:	movt	r0, #2
   1ed68:	mov	r2, #46	; 0x2e
   1ed6c:	bl	10dd4 <fwrite@plt>
   1ed70:	mov	r0, #0
   1ed74:	add	sp, sp, #16
   1ed78:	pop	{r4, r5, r6, pc}
   1ed7c:	push	{r3, r4, r5, lr}
   1ed80:	movw	r4, #28912	; 0x70f0
   1ed84:	movt	r4, #3
   1ed88:	mov	r5, r0
   1ed8c:	ldr	r3, [r4]
   1ed90:	cmp	r3, #0
   1ed94:	bne	1eda0 <__assert_fail@plt+0xde28>
   1ed98:	mov	r0, #1
   1ed9c:	bl	10e58 <exit@plt>
   1eda0:	movw	r3, #28940	; 0x710c
   1eda4:	movt	r3, #3
   1eda8:	movw	r0, #21004	; 0x520c
   1edac:	mov	r1, #1
   1edb0:	ldr	r3, [r3]
   1edb4:	movt	r0, #2
   1edb8:	mov	r2, #21
   1edbc:	bl	10dd4 <fwrite@plt>
   1edc0:	ldr	r3, [r4]
   1edc4:	cmp	r3, #0
   1edc8:	beq	1ed98 <__assert_fail@plt+0xde20>
   1edcc:	mov	r0, r5
   1edd0:	bl	1e8dc <__assert_fail@plt+0xd964>
   1edd4:	b	1ed98 <__assert_fail@plt+0xde20>
   1edd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eddc:	sub	sp, sp, #44	; 0x2c
   1ede0:	str	r1, [sp, #16]
   1ede4:	str	r2, [sp, #20]
   1ede8:	str	r3, [sp, #36]	; 0x24
   1edec:	str	r0, [sp, #32]
   1edf0:	bl	10e04 <opendir@plt>
   1edf4:	subs	r4, r0, #0
   1edf8:	beq	1f060 <__assert_fail@plt+0xe0e8>
   1edfc:	ldr	r0, [sp, #32]
   1ee00:	bl	10e64 <strlen@plt>
   1ee04:	mov	r6, r0
   1ee08:	bl	10e7c <__errno_location@plt>
   1ee0c:	add	r9, r6, #1
   1ee10:	mov	r3, #0
   1ee14:	mov	sl, r3
   1ee18:	str	r3, [sp, #28]
   1ee1c:	str	r0, [sp, #24]
   1ee20:	str	r3, [r0]
   1ee24:	mov	r0, r4
   1ee28:	bl	10f00 <readdir64@plt>
   1ee2c:	cmp	r0, #0
   1ee30:	beq	1ef18 <__assert_fail@plt+0xdfa0>
   1ee34:	ldrb	r3, [r0, #19]
   1ee38:	cmp	r3, #46	; 0x2e
   1ee3c:	beq	1ef40 <__assert_fail@plt+0xdfc8>
   1ee40:	add	r8, r0, #19
   1ee44:	mov	r0, r8
   1ee48:	bl	10e64 <strlen@plt>
   1ee4c:	mov	r7, r0
   1ee50:	add	r0, r6, r0
   1ee54:	add	r0, r0, #2
   1ee58:	bl	10e1c <malloc@plt>
   1ee5c:	subs	r5, r0, #0
   1ee60:	beq	1f04c <__assert_fail@plt+0xe0d4>
   1ee64:	ldr	r1, [sp, #32]
   1ee68:	mov	r2, r6
   1ee6c:	add	fp, r9, r7
   1ee70:	bl	10d74 <memcpy@plt>
   1ee74:	mov	r1, #47	; 0x2f
   1ee78:	mov	r2, r7
   1ee7c:	strb	r1, [r5, r6]
   1ee80:	add	r0, r5, r9
   1ee84:	mov	r1, r8
   1ee88:	bl	10d74 <memcpy@plt>
   1ee8c:	strb	sl, [r5, fp]
   1ee90:	mov	r0, r5
   1ee94:	bl	1e878 <__assert_fail@plt+0xd900>
   1ee98:	cmp	r0, #0
   1ee9c:	bne	1ef68 <__assert_fail@plt+0xdff0>
   1eea0:	ldr	r1, [sp, #20]
   1eea4:	ldr	r2, [sp, #16]
   1eea8:	ldr	r0, [r1]
   1eeac:	ldr	r1, [sp, #36]	; 0x24
   1eeb0:	ldr	r8, [r2]
   1eeb4:	add	r3, fp, r0
   1eeb8:	ldr	r2, [r1]
   1eebc:	add	r3, r8, r3
   1eec0:	cmp	r2, r3
   1eec4:	bls	1efb0 <__assert_fail@plt+0xe038>
   1eec8:	ldr	r3, [sp, #28]
   1eecc:	add	r0, r8, r0
   1eed0:	mov	r1, r5
   1eed4:	rsb	r2, r0, r2
   1eed8:	add	r3, r3, #1
   1eedc:	str	r3, [sp, #28]
   1eee0:	bl	10e94 <strncpy@plt>
   1eee4:	ldr	r1, [sp, #20]
   1eee8:	ldr	r3, [r1]
   1eeec:	add	r3, r3, #1
   1eef0:	add	fp, r3, fp
   1eef4:	str	fp, [r1]
   1eef8:	mov	r0, r5
   1eefc:	bl	10d44 <free@plt>
   1ef00:	ldr	r2, [sp, #24]
   1ef04:	mov	r0, r4
   1ef08:	str	sl, [r2]
   1ef0c:	bl	10f00 <readdir64@plt>
   1ef10:	cmp	r0, #0
   1ef14:	bne	1ee34 <__assert_fail@plt+0xdebc>
   1ef18:	ldr	r3, [sp, #24]
   1ef1c:	mov	r8, r0
   1ef20:	ldr	r0, [r3]
   1ef24:	cmp	r0, #0
   1ef28:	bne	1f008 <__assert_fail@plt+0xe090>
   1ef2c:	mov	r0, r4
   1ef30:	bl	10f60 <closedir@plt>
   1ef34:	ldr	r0, [sp, #28]
   1ef38:	add	sp, sp, #44	; 0x2c
   1ef3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef40:	ldrb	r3, [r0, #20]
   1ef44:	cmp	r3, #46	; 0x2e
   1ef48:	beq	1ef58 <__assert_fail@plt+0xdfe0>
   1ef4c:	cmp	r3, #0
   1ef50:	beq	1ee24 <__assert_fail@plt+0xdeac>
   1ef54:	b	1ee40 <__assert_fail@plt+0xdec8>
   1ef58:	ldrb	r3, [r0, #21]
   1ef5c:	cmp	r3, #0
   1ef60:	beq	1ee24 <__assert_fail@plt+0xdeac>
   1ef64:	b	1ee40 <__assert_fail@plt+0xdec8>
   1ef68:	ldr	r2, [sp, #20]
   1ef6c:	mov	r0, r5
   1ef70:	ldr	r3, [sp, #36]	; 0x24
   1ef74:	ldr	r1, [sp, #16]
   1ef78:	bl	1edd8 <__assert_fail@plt+0xde60>
   1ef7c:	ldr	r2, [sp, #16]
   1ef80:	ldr	r3, [sp, #28]
   1ef84:	ldr	r7, [r2]
   1ef88:	cmp	r7, #0
   1ef8c:	add	r3, r3, r0
   1ef90:	str	r3, [sp, #28]
   1ef94:	bne	1eef8 <__assert_fail@plt+0xdf80>
   1ef98:	mov	r0, r5
   1ef9c:	bl	10d44 <free@plt>
   1efa0:	mov	r0, r4
   1efa4:	bl	10f60 <closedir@plt>
   1efa8:	mov	r0, r7
   1efac:	b	1ef38 <__assert_fail@plt+0xdfc0>
   1efb0:	rsb	r2, r8, r2
   1efb4:	mov	r0, r8
   1efb8:	add	r7, r2, #8192	; 0x2000
   1efbc:	mov	r1, r7
   1efc0:	bl	10dbc <realloc@plt>
   1efc4:	subs	r2, r0, #0
   1efc8:	beq	1f0b4 <__assert_fail@plt+0xe13c>
   1efcc:	ldr	r3, [sp, #16]
   1efd0:	ldr	r1, [sp, #36]	; 0x24
   1efd4:	str	r2, [r3]
   1efd8:	add	r2, r2, r7
   1efdc:	str	r2, [r1]
   1efe0:	ldr	r8, [r3]
   1efe4:	cmp	r8, #0
   1efe8:	beq	1f09c <__assert_fail@plt+0xe124>
   1efec:	ldr	r3, [sp, #20]
   1eff0:	ldr	r0, [r3]
   1eff4:	add	r3, fp, r0
   1eff8:	add	r3, r8, r3
   1effc:	cmp	r2, r3
   1f000:	bls	1eef8 <__assert_fail@plt+0xdf80>
   1f004:	b	1eec8 <__assert_fail@plt+0xdf50>
   1f008:	movw	r3, #28940	; 0x710c
   1f00c:	movt	r3, #3
   1f010:	ldr	r5, [r3]
   1f014:	bl	10e34 <strerror@plt>
   1f018:	ldr	r3, [sp, #32]
   1f01c:	mov	r1, #1
   1f020:	movw	r2, #21060	; 0x5244
   1f024:	movt	r2, #2
   1f028:	str	r0, [sp]
   1f02c:	mov	r0, r5
   1f030:	bl	10eac <__fprintf_chk@plt>
   1f034:	ldr	r1, [sp, #16]
   1f038:	ldr	r0, [r1]
   1f03c:	bl	10d44 <free@plt>
   1f040:	ldr	r2, [sp, #16]
   1f044:	str	r8, [r2]
   1f048:	b	1ef2c <__assert_fail@plt+0xdfb4>
   1f04c:	mov	r0, r4
   1f050:	bl	10f60 <closedir@plt>
   1f054:	mov	r0, r5
   1f058:	add	sp, sp, #44	; 0x2c
   1f05c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f060:	movw	r3, #28940	; 0x710c
   1f064:	movt	r3, #3
   1f068:	ldr	r5, [r3]
   1f06c:	bl	10e7c <__errno_location@plt>
   1f070:	ldr	r0, [r0]
   1f074:	bl	10e34 <strerror@plt>
   1f078:	ldr	r3, [sp, #32]
   1f07c:	movw	r2, #21028	; 0x5224
   1f080:	mov	r1, #1
   1f084:	movt	r2, #2
   1f088:	str	r0, [sp]
   1f08c:	mov	r0, r5
   1f090:	bl	10eac <__fprintf_chk@plt>
   1f094:	mov	r0, r4
   1f098:	b	1ef38 <__assert_fail@plt+0xdfc0>
   1f09c:	mov	r0, r5
   1f0a0:	bl	10d44 <free@plt>
   1f0a4:	mov	r0, r4
   1f0a8:	bl	10f60 <closedir@plt>
   1f0ac:	mov	r0, r8
   1f0b0:	b	1ef38 <__assert_fail@plt+0xdfc0>
   1f0b4:	mov	r0, r8
   1f0b8:	str	r2, [sp, #12]
   1f0bc:	bl	10d44 <free@plt>
   1f0c0:	ldr	r2, [sp, #12]
   1f0c4:	b	1efcc <__assert_fail@plt+0xe054>
   1f0c8:	mov	ip, #1
   1f0cc:	str	ip, [sp]
   1f0d0:	b	14664 <__assert_fail@plt+0x36ec>
   1f0d4:	push	{r4, r5, r6, r7, lr}
   1f0d8:	movw	r1, #23912	; 0x5d68
   1f0dc:	sub	sp, sp, #12
   1f0e0:	movt	r1, #2
   1f0e4:	mov	r4, r0
   1f0e8:	bl	10d20 <strcmp@plt>
   1f0ec:	cmp	r0, #0
   1f0f0:	bne	1f134 <__assert_fail@plt+0xe1bc>
   1f0f4:	movw	r4, #28980	; 0x7134
   1f0f8:	movt	r4, #3
   1f0fc:	ldr	r3, [r4]
   1f100:	cmp	r3, #3
   1f104:	bgt	1f1c4 <__assert_fail@plt+0xe24c>
   1f108:	movw	r3, #28916	; 0x70f4
   1f10c:	movt	r3, #3
   1f110:	movw	r2, #28952	; 0x7118
   1f114:	movt	r2, #3
   1f118:	ldr	r1, [r3]
   1f11c:	ldr	r5, [r2]
   1f120:	cmp	r1, #1
   1f124:	beq	1f1e8 <__assert_fail@plt+0xe270>
   1f128:	mov	r0, r5
   1f12c:	add	sp, sp, #12
   1f130:	pop	{r4, r5, r6, r7, pc}
   1f134:	movw	r3, #28916	; 0x70f4
   1f138:	movt	r3, #3
   1f13c:	ldr	r5, [r3, #4]
   1f140:	cmp	r5, #0
   1f144:	bne	1f15c <__assert_fail@plt+0xe1e4>
   1f148:	mov	r0, r4
   1f14c:	ldr	r1, [pc, #408]	; 1f2ec <__assert_fail@plt+0xe374>
   1f150:	bl	10d20 <strcmp@plt>
   1f154:	cmp	r0, #0
   1f158:	bne	1f220 <__assert_fail@plt+0xe2a8>
   1f15c:	movw	r1, #24060	; 0x5dfc
   1f160:	mov	r0, r4
   1f164:	movt	r1, #2
   1f168:	bl	10f18 <fopen64@plt>
   1f16c:	subs	r5, r0, #0
   1f170:	bne	1f128 <__assert_fail@plt+0xe1b0>
   1f174:	movw	r3, #28980	; 0x7134
   1f178:	movt	r3, #3
   1f17c:	ldr	r3, [r3]
   1f180:	cmp	r3, #0
   1f184:	ble	1f128 <__assert_fail@plt+0xe1b0>
   1f188:	movw	r3, #28940	; 0x710c
   1f18c:	movt	r3, #3
   1f190:	ldr	r6, [r3]
   1f194:	bl	10e7c <__errno_location@plt>
   1f198:	ldr	r0, [r0]
   1f19c:	bl	10e34 <strerror@plt>
   1f1a0:	mov	r3, r4
   1f1a4:	movw	r2, #24184	; 0x5e78
   1f1a8:	mov	r1, #1
   1f1ac:	movt	r2, #2
   1f1b0:	str	r0, [sp]
   1f1b4:	mov	r0, r6
   1f1b8:	bl	10eac <__fprintf_chk@plt>
   1f1bc:	mov	r0, r5
   1f1c0:	b	1f12c <__assert_fail@plt+0xe1b4>
   1f1c4:	movw	r3, #28940	; 0x710c
   1f1c8:	movt	r3, #3
   1f1cc:	movw	r0, #23956	; 0x5d94
   1f1d0:	mov	r1, #1
   1f1d4:	ldr	r3, [r3]
   1f1d8:	mov	r2, #24
   1f1dc:	movt	r0, #2
   1f1e0:	bl	10dd4 <fwrite@plt>
   1f1e4:	b	1f108 <__assert_fail@plt+0xe190>
   1f1e8:	ldr	r2, [r4]
   1f1ec:	mov	r0, #0
   1f1f0:	str	r0, [r3]
   1f1f4:	cmp	r2, #3
   1f1f8:	ble	1f128 <__assert_fail@plt+0xe1b0>
   1f1fc:	movw	r3, #28940	; 0x710c
   1f200:	movt	r3, #3
   1f204:	movw	r0, #23984	; 0x5db0
   1f208:	mov	r2, #72	; 0x48
   1f20c:	ldr	r3, [r3]
   1f210:	movt	r0, #2
   1f214:	bl	10dd4 <fwrite@plt>
   1f218:	mov	r0, r5
   1f21c:	b	1f12c <__assert_fail@plt+0xe1b4>
   1f220:	movw	r1, #18660	; 0x48e4
   1f224:	mov	r0, r4
   1f228:	movt	r1, #2
   1f22c:	bl	10f18 <fopen64@plt>
   1f230:	cmp	r0, #0
   1f234:	beq	1f15c <__assert_fail@plt+0xe1e4>
   1f238:	bl	10eb8 <fclose@plt>
   1f23c:	movw	r3, #28980	; 0x7134
   1f240:	movt	r3, #3
   1f244:	ldr	r3, [r3]
   1f248:	cmp	r3, #1
   1f24c:	ble	1f2c4 <__assert_fail@plt+0xe34c>
   1f250:	movw	r7, #28940	; 0x710c
   1f254:	movt	r7, #3
   1f258:	movw	r6, #28944	; 0x7110
   1f25c:	movt	r6, #3
   1f260:	mov	r1, #1
   1f264:	mov	r3, r4
   1f268:	ldr	r0, [r7]
   1f26c:	movw	r2, #24104	; 0x5e28
   1f270:	movt	r2, #2
   1f274:	bl	10eac <__fprintf_chk@plt>
   1f278:	ldr	r0, [r6]
   1f27c:	bl	10d8c <_IO_getc@plt>
   1f280:	bic	r0, r0, #32
   1f284:	cmp	r0, #89	; 0x59
   1f288:	bne	1f2a4 <__assert_fail@plt+0xe32c>
   1f28c:	ldr	r0, [r6]
   1f290:	bl	10d8c <_IO_getc@plt>
   1f294:	cmp	r0, #10
   1f298:	cmnne	r0, #1
   1f29c:	bne	1f28c <__assert_fail@plt+0xe314>
   1f2a0:	b	1f15c <__assert_fail@plt+0xe1e4>
   1f2a4:	ldr	r3, [r7]
   1f2a8:	movw	r0, #24160	; 0x5e60
   1f2ac:	mov	r1, #1
   1f2b0:	movt	r0, #2
   1f2b4:	mov	r2, #22
   1f2b8:	bl	10dd4 <fwrite@plt>
   1f2bc:	mov	r0, r5
   1f2c0:	b	1f12c <__assert_fail@plt+0xe1b4>
   1f2c4:	movw	r1, #28940	; 0x710c
   1f2c8:	movt	r1, #3
   1f2cc:	mov	r3, r4
   1f2d0:	movw	r2, #24064	; 0x5e00
   1f2d4:	ldr	r0, [r1]
   1f2d8:	movt	r2, #2
   1f2dc:	mov	r1, #1
   1f2e0:	bl	10eac <__fprintf_chk@plt>
   1f2e4:	mov	r0, r5
   1f2e8:	b	1f12c <__assert_fail@plt+0xe1b4>
   1f2ec:	andeq	r5, r2, r0, ror sp
   1f2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2f4:	movw	r4, #28916	; 0x70f4
   1f2f8:	movt	r4, #3
   1f2fc:	mov	fp, r3
   1f300:	sub	sp, sp, #20
   1f304:	mov	r6, r1
   1f308:	ldr	r3, [r4]
   1f30c:	mov	r9, r0
   1f310:	str	r2, [sp, #12]
   1f314:	cmp	r3, #0
   1f318:	beq	1f5bc <__assert_fail@plt+0xe644>
   1f31c:	cmp	fp, #1073741824	; 0x40000000
   1f320:	bhi	1f5e4 <__assert_fail@plt+0xe66c>
   1f324:	ldr	r3, [sp, #12]
   1f328:	lsr	r7, r3, #2
   1f32c:	add	r8, r6, r7, lsl #2
   1f330:	cmp	r6, r8
   1f334:	bcs	1f394 <__assert_fail@plt+0xe41c>
   1f338:	cmp	r7, #8192	; 0x2000
   1f33c:	bcs	1f5a4 <__assert_fail@plt+0xe62c>
   1f340:	subs	r5, r7, #0
   1f344:	beq	1f388 <__assert_fail@plt+0xe410>
   1f348:	mov	r7, #0
   1f34c:	ldr	r4, [r6]
   1f350:	cmp	r4, #0
   1f354:	bne	1f4b8 <__assert_fail@plt+0xe540>
   1f358:	mov	r1, r6
   1f35c:	b	1f370 <__assert_fail@plt+0xe3f8>
   1f360:	ldr	r3, [r1, #4]!
   1f364:	lsl	sl, r4, #2
   1f368:	cmp	r3, #0
   1f36c:	bne	1f4c0 <__assert_fail@plt+0xe548>
   1f370:	add	r4, r4, #1
   1f374:	cmp	r4, r5
   1f378:	bcc	1f360 <__assert_fail@plt+0xe3e8>
   1f37c:	lsl	sl, r4, #2
   1f380:	add	fp, fp, sl
   1f384:	bne	1f4c4 <__assert_fail@plt+0xe54c>
   1f388:	add	r6, r6, r5, lsl #2
   1f38c:	cmp	r8, r6
   1f390:	bhi	1f338 <__assert_fail@plt+0xe3c0>
   1f394:	ldr	r3, [sp, #12]
   1f398:	ands	r5, r3, #3
   1f39c:	beq	1f5b0 <__assert_fail@plt+0xe638>
   1f3a0:	add	r5, r8, r5
   1f3a4:	cmp	r8, r5
   1f3a8:	bcs	1f69c <__assert_fail@plt+0xe724>
   1f3ac:	ldrb	r3, [r8]
   1f3b0:	cmp	r3, #0
   1f3b4:	bne	1f6ac <__assert_fail@plt+0xe734>
   1f3b8:	add	r3, r8, #1
   1f3bc:	b	1f3d0 <__assert_fail@plt+0xe458>
   1f3c0:	ldrb	r2, [r3]
   1f3c4:	add	r3, r3, #1
   1f3c8:	cmp	r2, #0
   1f3cc:	bne	1f688 <__assert_fail@plt+0xe710>
   1f3d0:	cmp	r3, r5
   1f3d4:	mov	r4, r3
   1f3d8:	bne	1f3c0 <__assert_fail@plt+0xe448>
   1f3dc:	rsb	r8, r8, r5
   1f3e0:	mov	r3, r5
   1f3e4:	cmp	r4, r5
   1f3e8:	add	r2, r8, fp
   1f3ec:	moveq	r0, r2
   1f3f0:	beq	1f5b4 <__assert_fail@plt+0xe63c>
   1f3f4:	mov	r7, r3
   1f3f8:	mov	r6, #1
   1f3fc:	mov	r0, r9
   1f400:	str	r6, [sp]
   1f404:	mov	r3, #0
   1f408:	bl	10ec4 <fseeko64@plt>
   1f40c:	cmp	r0, #0
   1f410:	bne	1f6bc <__assert_fail@plt+0xe744>
   1f414:	rsb	r5, r7, r5
   1f418:	mov	r0, r4
   1f41c:	mov	r3, r9
   1f420:	mov	r1, r6
   1f424:	mov	r2, r5
   1f428:	bl	10dd4 <fwrite@plt>
   1f42c:	cmp	r5, r0
   1f430:	beq	1f5d8 <__assert_fail@plt+0xe660>
   1f434:	movw	r5, #28980	; 0x7134
   1f438:	movt	r5, #3
   1f43c:	ldr	r3, [r5]
   1f440:	cmp	r3, #0
   1f444:	ble	1f4b0 <__assert_fail@plt+0xe538>
   1f448:	movw	r4, #28940	; 0x710c
   1f44c:	movt	r4, #3
   1f450:	mov	r3, #75	; 0x4b
   1f454:	movw	r2, #17788	; 0x457c
   1f458:	mov	r1, r6
   1f45c:	ldr	r0, [r4]
   1f460:	movt	r2, #2
   1f464:	bl	10eac <__fprintf_chk@plt>
   1f468:	ldr	r3, [r5]
   1f46c:	cmp	r3, #0
   1f470:	ble	1f4b0 <__assert_fail@plt+0xe538>
   1f474:	ldr	r3, [r4]
   1f478:	movw	r0, #24356	; 0x5f24
   1f47c:	mov	r1, r6
   1f480:	movt	r0, #2
   1f484:	mov	r2, #47	; 0x2f
   1f488:	bl	10dd4 <fwrite@plt>
   1f48c:	ldr	r3, [r5]
   1f490:	cmp	r3, #0
   1f494:	ble	1f4b0 <__assert_fail@plt+0xe538>
   1f498:	movw	r0, #24180	; 0x5e74
   1f49c:	mov	r1, r6
   1f4a0:	ldr	r3, [r4]
   1f4a4:	mov	r2, #2
   1f4a8:	movt	r0, #2
   1f4ac:	bl	10dd4 <fwrite@plt>
   1f4b0:	mov	r0, #75	; 0x4b
   1f4b4:	bl	10e58 <exit@plt>
   1f4b8:	mov	sl, #0
   1f4bc:	mov	r4, sl
   1f4c0:	add	fp, fp, sl
   1f4c4:	bl	10e7c <__errno_location@plt>
   1f4c8:	mov	r3, #0
   1f4cc:	mov	r2, fp
   1f4d0:	str	r3, [r0]
   1f4d4:	mov	r1, r0
   1f4d8:	mov	r3, #1
   1f4dc:	mov	r0, r9
   1f4e0:	str	r3, [sp]
   1f4e4:	mov	r3, #0
   1f4e8:	str	r1, [sp, #8]
   1f4ec:	bl	10ec4 <fseeko64@plt>
   1f4f0:	ldr	r1, [sp, #8]
   1f4f4:	subs	fp, r0, #0
   1f4f8:	bne	1f7c4 <__assert_fail@plt+0xe84c>
   1f4fc:	rsb	r5, r4, r5
   1f500:	add	r6, r6, sl
   1f504:	mov	r1, #4
   1f508:	mov	r3, r9
   1f50c:	mov	r0, r6
   1f510:	mov	r2, r5
   1f514:	bl	10dd4 <fwrite@plt>
   1f518:	cmp	r5, r0
   1f51c:	beq	1f388 <__assert_fail@plt+0xe410>
   1f520:	movw	r5, #28980	; 0x7134
   1f524:	movt	r5, #3
   1f528:	ldr	r3, [r5]
   1f52c:	cmp	r3, #0
   1f530:	ble	1f59c <__assert_fail@plt+0xe624>
   1f534:	movw	r4, #28940	; 0x710c
   1f538:	movt	r4, #3
   1f53c:	mov	r3, #73	; 0x49
   1f540:	movw	r2, #17788	; 0x457c
   1f544:	mov	r1, #1
   1f548:	ldr	r0, [r4]
   1f54c:	movt	r2, #2
   1f550:	bl	10eac <__fprintf_chk@plt>
   1f554:	ldr	r3, [r5]
   1f558:	cmp	r3, #0
   1f55c:	ble	1f59c <__assert_fail@plt+0xe624>
   1f560:	ldr	r3, [r4]
   1f564:	movw	r0, #24192	; 0x5e80
   1f568:	mov	r1, #1
   1f56c:	movt	r0, #2
   1f570:	mov	r2, #40	; 0x28
   1f574:	bl	10dd4 <fwrite@plt>
   1f578:	ldr	r3, [r5]
   1f57c:	cmp	r3, #0
   1f580:	ble	1f59c <__assert_fail@plt+0xe624>
   1f584:	movw	r0, #24180	; 0x5e74
   1f588:	ldr	r3, [r4]
   1f58c:	mov	r1, #1
   1f590:	movt	r0, #2
   1f594:	mov	r2, #2
   1f598:	bl	10dd4 <fwrite@plt>
   1f59c:	mov	r0, #73	; 0x49
   1f5a0:	bl	10e58 <exit@plt>
   1f5a4:	sub	r7, r7, #8192	; 0x2000
   1f5a8:	mov	r5, #8192	; 0x2000
   1f5ac:	b	1f34c <__assert_fail@plt+0xe3d4>
   1f5b0:	mov	r0, fp
   1f5b4:	add	sp, sp, #20
   1f5b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5bc:	mov	r0, r1
   1f5c0:	mov	r3, r9
   1f5c4:	mov	r1, #1
   1f5c8:	bl	10dd4 <fwrite@plt>
   1f5cc:	ldr	r3, [sp, #12]
   1f5d0:	cmp	r3, r0
   1f5d4:	bne	1f740 <__assert_fail@plt+0xe7c8>
   1f5d8:	mov	r0, #0
   1f5dc:	add	sp, sp, #20
   1f5e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5e4:	mov	r7, #1
   1f5e8:	mov	r2, #1073741824	; 0x40000000
   1f5ec:	mov	r3, #0
   1f5f0:	str	r7, [sp]
   1f5f4:	bl	10ec4 <fseeko64@plt>
   1f5f8:	cmp	r0, #0
   1f5fc:	addeq	fp, fp, #-1073741824	; 0xc0000000
   1f600:	beq	1f324 <__assert_fail@plt+0xe3ac>
   1f604:	movw	r5, #28980	; 0x7134
   1f608:	movt	r5, #3
   1f60c:	ldr	r3, [r5]
   1f610:	cmp	r3, #0
   1f614:	ble	1f680 <__assert_fail@plt+0xe708>
   1f618:	movw	r4, #28940	; 0x710c
   1f61c:	movt	r4, #3
   1f620:	mov	r3, #71	; 0x47
   1f624:	movw	r2, #17788	; 0x457c
   1f628:	mov	r1, r7
   1f62c:	ldr	r0, [r4]
   1f630:	movt	r2, #2
   1f634:	bl	10eac <__fprintf_chk@plt>
   1f638:	ldr	r3, [r5]
   1f63c:	cmp	r3, #0
   1f640:	ble	1f680 <__assert_fail@plt+0xe708>
   1f644:	ldr	r3, [r4]
   1f648:	movw	r0, #24236	; 0x5eac
   1f64c:	mov	r1, r7
   1f650:	movt	r0, #2
   1f654:	mov	r2, #37	; 0x25
   1f658:	bl	10dd4 <fwrite@plt>
   1f65c:	ldr	r3, [r5]
   1f660:	cmp	r3, #0
   1f664:	ble	1f680 <__assert_fail@plt+0xe708>
   1f668:	movw	r0, #24180	; 0x5e74
   1f66c:	mov	r1, r7
   1f670:	ldr	r3, [r4]
   1f674:	mov	r2, #2
   1f678:	movt	r0, #2
   1f67c:	bl	10dd4 <fwrite@plt>
   1f680:	mov	r0, #71	; 0x47
   1f684:	bl	10e58 <exit@plt>
   1f688:	rsb	r8, r8, r4
   1f68c:	mov	r3, r4
   1f690:	add	r2, r8, fp
   1f694:	mov	r7, r3
   1f698:	b	1f3f8 <__assert_fail@plt+0xe480>
   1f69c:	mov	r3, r8
   1f6a0:	mov	r8, #0
   1f6a4:	mov	r4, r3
   1f6a8:	b	1f3e4 <__assert_fail@plt+0xe46c>
   1f6ac:	mov	r3, r8
   1f6b0:	mov	r8, #0
   1f6b4:	mov	r4, r3
   1f6b8:	b	1f690 <__assert_fail@plt+0xe718>
   1f6bc:	movw	r5, #28980	; 0x7134
   1f6c0:	movt	r5, #3
   1f6c4:	ldr	r3, [r5]
   1f6c8:	cmp	r3, #0
   1f6cc:	ble	1f738 <__assert_fail@plt+0xe7c0>
   1f6d0:	movw	r4, #28940	; 0x710c
   1f6d4:	movt	r4, #3
   1f6d8:	mov	r3, #74	; 0x4a
   1f6dc:	movw	r2, #17788	; 0x457c
   1f6e0:	mov	r1, r6
   1f6e4:	ldr	r0, [r4]
   1f6e8:	movt	r2, #2
   1f6ec:	bl	10eac <__fprintf_chk@plt>
   1f6f0:	ldr	r3, [r5]
   1f6f4:	cmp	r3, #0
   1f6f8:	ble	1f738 <__assert_fail@plt+0xe7c0>
   1f6fc:	ldr	r3, [r4]
   1f700:	movw	r0, #24320	; 0x5f00
   1f704:	mov	r1, r6
   1f708:	movt	r0, #2
   1f70c:	mov	r2, #35	; 0x23
   1f710:	bl	10dd4 <fwrite@plt>
   1f714:	ldr	r3, [r5]
   1f718:	cmp	r3, #0
   1f71c:	ble	1f738 <__assert_fail@plt+0xe7c0>
   1f720:	movw	r0, #24180	; 0x5e74
   1f724:	mov	r1, r6
   1f728:	ldr	r3, [r4]
   1f72c:	mov	r2, #2
   1f730:	movt	r0, #2
   1f734:	bl	10dd4 <fwrite@plt>
   1f738:	mov	r0, #74	; 0x4a
   1f73c:	bl	10e58 <exit@plt>
   1f740:	movw	r5, #28980	; 0x7134
   1f744:	movt	r5, #3
   1f748:	ldr	r3, [r5]
   1f74c:	cmp	r3, #0
   1f750:	ble	1f7bc <__assert_fail@plt+0xe844>
   1f754:	movw	r4, #28940	; 0x710c
   1f758:	movt	r4, #3
   1f75c:	mov	r3, #70	; 0x46
   1f760:	movw	r2, #17788	; 0x457c
   1f764:	mov	r1, #1
   1f768:	ldr	r0, [r4]
   1f76c:	movt	r2, #2
   1f770:	bl	10eac <__fprintf_chk@plt>
   1f774:	ldr	r3, [r5]
   1f778:	cmp	r3, #0
   1f77c:	ble	1f7bc <__assert_fail@plt+0xe844>
   1f780:	ldr	r3, [r4]
   1f784:	movw	r0, #24192	; 0x5e80
   1f788:	mov	r1, #1
   1f78c:	movt	r0, #2
   1f790:	mov	r2, #40	; 0x28
   1f794:	bl	10dd4 <fwrite@plt>
   1f798:	ldr	r3, [r5]
   1f79c:	cmp	r3, #0
   1f7a0:	ble	1f7bc <__assert_fail@plt+0xe844>
   1f7a4:	movw	r0, #24180	; 0x5e74
   1f7a8:	ldr	r3, [r4]
   1f7ac:	mov	r1, #1
   1f7b0:	movt	r0, #2
   1f7b4:	mov	r2, #2
   1f7b8:	bl	10dd4 <fwrite@plt>
   1f7bc:	mov	r0, #70	; 0x46
   1f7c0:	bl	10e58 <exit@plt>
   1f7c4:	movw	r5, #28980	; 0x7134
   1f7c8:	movt	r5, #3
   1f7cc:	mov	sl, r1
   1f7d0:	ldr	r3, [r5]
   1f7d4:	cmp	r3, #0
   1f7d8:	ble	1f858 <__assert_fail@plt+0xe8e0>
   1f7dc:	movw	r4, #28940	; 0x710c
   1f7e0:	movt	r4, #3
   1f7e4:	mov	r3, #72	; 0x48
   1f7e8:	movw	r2, #17788	; 0x457c
   1f7ec:	mov	r1, #1
   1f7f0:	ldr	r0, [r4]
   1f7f4:	movt	r2, #2
   1f7f8:	bl	10eac <__fprintf_chk@plt>
   1f7fc:	ldr	r3, [r5]
   1f800:	cmp	r3, #0
   1f804:	ble	1f858 <__assert_fail@plt+0xe8e0>
   1f808:	ldr	r6, [sl]
   1f80c:	ldr	r7, [r4]
   1f810:	mov	r0, r6
   1f814:	bl	10e34 <strerror@plt>
   1f818:	mov	r3, r6
   1f81c:	movw	r2, #24276	; 0x5ed4
   1f820:	mov	r1, #1
   1f824:	movt	r2, #2
   1f828:	str	r0, [sp]
   1f82c:	mov	r0, r7
   1f830:	bl	10eac <__fprintf_chk@plt>
   1f834:	ldr	r3, [r5]
   1f838:	cmp	r3, #0
   1f83c:	ble	1f858 <__assert_fail@plt+0xe8e0>
   1f840:	movw	r0, #24180	; 0x5e74
   1f844:	ldr	r3, [r4]
   1f848:	mov	r1, #1
   1f84c:	movt	r0, #2
   1f850:	mov	r2, #2
   1f854:	bl	10dd4 <fwrite@plt>
   1f858:	mov	r0, #72	; 0x48
   1f85c:	bl	10e58 <exit@plt>
   1f860:	push	{r4, lr}
   1f864:	mov	r2, r1
   1f868:	mov	r4, r1
   1f86c:	mov	r1, r0
   1f870:	mov	r0, #3
   1f874:	bl	10f30 <__xstat64@plt>
   1f878:	cmp	r0, #0
   1f87c:	bne	1f898 <__assert_fail@plt+0xe920>
   1f880:	ldr	r0, [r4, #16]
   1f884:	and	r0, r0, #61440	; 0xf000
   1f888:	subs	r3, r0, #32768	; 0x8000
   1f88c:	rsbs	r0, r3, #0
   1f890:	adcs	r0, r0, r3
   1f894:	pop	{r4, pc}
   1f898:	mov	r0, #0
   1f89c:	pop	{r4, pc}
   1f8a0:	push	{r4, r5, r6, r7, lr}
   1f8a4:	movw	r4, #28936	; 0x7108
   1f8a8:	movt	r4, #3
   1f8ac:	sub	sp, sp, #116	; 0x74
   1f8b0:	mov	r5, r1
   1f8b4:	mov	r6, r0
   1f8b8:	ldr	r3, [r4]
   1f8bc:	mov	r1, sp
   1f8c0:	str	r3, [sp, #108]	; 0x6c
   1f8c4:	bl	1f860 <__assert_fail@plt+0xe8e8>
   1f8c8:	cmp	r0, #0
   1f8cc:	beq	1f944 <__assert_fail@plt+0xe9cc>
   1f8d0:	mov	r0, #0
   1f8d4:	bl	10d80 <time@plt>
   1f8d8:	ldr	r3, [r5, #80]	; 0x50
   1f8dc:	mov	r1, sp
   1f8e0:	stm	sp, {r0, r3}
   1f8e4:	mov	r0, r6
   1f8e8:	bl	10ee8 <utime@plt>
   1f8ec:	ldr	r2, [r5, #28]
   1f8f0:	ldr	r1, [r5, #24]
   1f8f4:	mov	r7, r0
   1f8f8:	mov	r0, r6
   1f8fc:	bl	10e70 <chown@plt>
   1f900:	ldr	r1, [r5, #16]
   1f904:	ubfx	r1, r1, #0, #12
   1f908:	add	r7, r7, r0
   1f90c:	mov	r0, r6
   1f910:	bl	10f24 <chmod@plt>
   1f914:	add	r7, r0, r7
   1f918:	bl	10e7c <__errno_location@plt>
   1f91c:	mov	r2, #0
   1f920:	mov	r3, r0
   1f924:	rsb	r0, r7, #0
   1f928:	str	r2, [r3]
   1f92c:	ldr	r2, [sp, #108]	; 0x6c
   1f930:	ldr	r3, [r4]
   1f934:	cmp	r2, r3
   1f938:	bne	1f94c <__assert_fail@plt+0xe9d4>
   1f93c:	add	sp, sp, #116	; 0x74
   1f940:	pop	{r4, r5, r6, r7, pc}
   1f944:	mvn	r0, #0
   1f948:	b	1f92c <__assert_fail@plt+0xe9b4>
   1f94c:	bl	10db0 <__stack_chk_fail@plt>
   1f950:	push	{r4, r5, r6, lr}
   1f954:	sub	sp, sp, #8
   1f958:	ldr	r1, [pc, #192]	; 1fa20 <__assert_fail@plt+0xeaa8>
   1f95c:	mov	r5, r0
   1f960:	bl	10d20 <strcmp@plt>
   1f964:	cmp	r0, #0
   1f968:	bne	1f9bc <__assert_fail@plt+0xea44>
   1f96c:	movw	r3, #28980	; 0x7134
   1f970:	movt	r3, #3
   1f974:	ldr	r3, [r3]
   1f978:	cmp	r3, #3
   1f97c:	bgt	1f998 <__assert_fail@plt+0xea20>
   1f980:	movw	r3, #28944	; 0x7110
   1f984:	movt	r3, #3
   1f988:	ldr	r4, [r3]
   1f98c:	mov	r0, r4
   1f990:	add	sp, sp, #8
   1f994:	pop	{r4, r5, r6, pc}
   1f998:	movw	r3, #28940	; 0x710c
   1f99c:	movt	r3, #3
   1f9a0:	movw	r0, #24404	; 0x5f54
   1f9a4:	mov	r1, #1
   1f9a8:	ldr	r3, [r3]
   1f9ac:	mov	r2, #22
   1f9b0:	movt	r0, #2
   1f9b4:	bl	10dd4 <fwrite@plt>
   1f9b8:	b	1f980 <__assert_fail@plt+0xea08>
   1f9bc:	movw	r1, #18660	; 0x48e4
   1f9c0:	mov	r0, r5
   1f9c4:	movt	r1, #2
   1f9c8:	bl	10f18 <fopen64@plt>
   1f9cc:	subs	r4, r0, #0
   1f9d0:	bne	1f98c <__assert_fail@plt+0xea14>
   1f9d4:	movw	r3, #28980	; 0x7134
   1f9d8:	movt	r3, #3
   1f9dc:	ldr	r3, [r3]
   1f9e0:	cmp	r3, #0
   1f9e4:	ble	1f98c <__assert_fail@plt+0xea14>
   1f9e8:	movw	r3, #28940	; 0x710c
   1f9ec:	movt	r3, #3
   1f9f0:	ldr	r6, [r3]
   1f9f4:	bl	10e7c <__errno_location@plt>
   1f9f8:	ldr	r0, [r0]
   1f9fc:	bl	10e34 <strerror@plt>
   1fa00:	mov	r3, r5
   1fa04:	movw	r2, #24428	; 0x5f6c
   1fa08:	mov	r1, #1
   1fa0c:	movt	r2, #2
   1fa10:	str	r0, [sp]
   1fa14:	mov	r0, r6
   1fa18:	bl	10eac <__fprintf_chk@plt>
   1fa1c:	b	1f98c <__assert_fail@plt+0xea14>
   1fa20:	andeq	r5, r2, ip, ror sp
   1fa24:	push	{r4, r5, r6, r7, r8, r9, lr}
   1fa28:	subs	r4, r0, #0
   1fa2c:	sub	sp, sp, #12
   1fa30:	mov	r8, r1
   1fa34:	beq	1fb3c <__assert_fail@plt+0xebc4>
   1fa38:	mov	r0, #65536	; 0x10000
   1fa3c:	bl	10e1c <malloc@plt>
   1fa40:	subs	r6, r0, #0
   1fa44:	beq	1fc14 <__assert_fail@plt+0xec9c>
   1fa48:	mov	r0, r4
   1fa4c:	bl	1f950 <__assert_fail@plt+0xe9d8>
   1fa50:	subs	r7, r0, #0
   1fa54:	beq	1fbc0 <__assert_fail@plt+0xec48>
   1fa58:	mov	r0, r4
   1fa5c:	ldr	r1, [pc, #516]	; 1fc68 <__assert_fail@plt+0xecf0>
   1fa60:	bl	10d20 <strcmp@plt>
   1fa64:	cmp	r0, #0
   1fa68:	bne	1fb10 <__assert_fail@plt+0xeb98>
   1fa6c:	mov	r5, #0
   1fa70:	mov	r4, r5
   1fa74:	add	r0, r6, r4
   1fa78:	rsb	r2, r4, #65536	; 0x10000
   1fa7c:	mov	r1, #1
   1fa80:	mov	r3, r7
   1fa84:	bl	10df8 <fread@plt>
   1fa88:	add	r4, r0, r4
   1fa8c:	cmp	r0, #0
   1fa90:	add	r5, r5, r0
   1fa94:	uxth	r4, r4
   1fa98:	bne	1fa74 <__assert_fail@plt+0xeafc>
   1fa9c:	cmp	r5, #65536	; 0x10000
   1faa0:	movcs	r5, #65536	; 0x10000
   1faa4:	str	r5, [r8]
   1faa8:	rsb	r4, r5, r4
   1faac:	uxth	r4, r4
   1fab0:	cmp	r4, #0
   1fab4:	beq	1fb30 <__assert_fail@plt+0xebb8>
   1fab8:	cmp	r5, #0
   1fabc:	movne	r0, r5
   1fac0:	moveq	r0, #1
   1fac4:	bl	10e1c <malloc@plt>
   1fac8:	subs	r8, r0, #0
   1facc:	beq	1fc14 <__assert_fail@plt+0xec9c>
   1fad0:	rsb	r9, r4, #65536	; 0x10000
   1fad4:	add	r1, r6, r4
   1fad8:	mov	r2, r9
   1fadc:	bl	10d74 <memcpy@plt>
   1fae0:	sub	r2, r5, #65536	; 0x10000
   1fae4:	add	r0, r8, r9
   1fae8:	add	r2, r2, r4
   1faec:	mov	r1, r6
   1faf0:	bl	10d74 <memcpy@plt>
   1faf4:	mov	r0, r7
   1faf8:	bl	10eb8 <fclose@plt>
   1fafc:	mov	r0, r6
   1fb00:	bl	10d44 <free@plt>
   1fb04:	mov	r0, r8
   1fb08:	add	sp, sp, #12
   1fb0c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1fb10:	mov	r3, #2
   1fb14:	mov	r0, r7
   1fb18:	str	r3, [sp]
   1fb1c:	mov	r2, #0
   1fb20:	mvn	r3, #0
   1fb24:	movt	r2, #65535	; 0xffff
   1fb28:	bl	10ec4 <fseeko64@plt>
   1fb2c:	b	1fa6c <__assert_fail@plt+0xeaf4>
   1fb30:	mov	r8, r6
   1fb34:	mov	r6, r4
   1fb38:	b	1faf4 <__assert_fail@plt+0xeb7c>
   1fb3c:	movw	r5, #28980	; 0x7134
   1fb40:	movt	r5, #3
   1fb44:	ldr	r3, [r5]
   1fb48:	cmp	r3, #0
   1fb4c:	ble	1fbb8 <__assert_fail@plt+0xec40>
   1fb50:	movw	r4, #28940	; 0x710c
   1fb54:	movt	r4, #3
   1fb58:	mov	r3, #25
   1fb5c:	movw	r2, #17788	; 0x457c
   1fb60:	mov	r1, #1
   1fb64:	ldr	r0, [r4]
   1fb68:	movt	r2, #2
   1fb6c:	bl	10eac <__fprintf_chk@plt>
   1fb70:	ldr	r3, [r5]
   1fb74:	cmp	r3, #0
   1fb78:	ble	1fbb8 <__assert_fail@plt+0xec40>
   1fb7c:	movw	r0, #24440	; 0x5f78
   1fb80:	movt	r0, #2
   1fb84:	mov	r1, #1
   1fb88:	mov	r2, #39	; 0x27
   1fb8c:	ldr	r3, [r4]
   1fb90:	bl	10dd4 <fwrite@plt>
   1fb94:	ldr	r3, [r5]
   1fb98:	cmp	r3, #0
   1fb9c:	ble	1fbb8 <__assert_fail@plt+0xec40>
   1fba0:	movw	r0, #24180	; 0x5e74
   1fba4:	ldr	r3, [r4]
   1fba8:	mov	r1, #1
   1fbac:	movt	r0, #2
   1fbb0:	mov	r2, #2
   1fbb4:	bl	10dd4 <fwrite@plt>
   1fbb8:	mov	r0, #25
   1fbbc:	bl	10e58 <exit@plt>
   1fbc0:	movw	r5, #28980	; 0x7134
   1fbc4:	movt	r5, #3
   1fbc8:	ldr	r3, [r5]
   1fbcc:	cmp	r3, #0
   1fbd0:	ble	1fbb8 <__assert_fail@plt+0xec40>
   1fbd4:	movw	r4, #28940	; 0x710c
   1fbd8:	movt	r4, #3
   1fbdc:	mov	r3, #25
   1fbe0:	movw	r2, #17788	; 0x457c
   1fbe4:	mov	r1, #1
   1fbe8:	ldr	r0, [r4]
   1fbec:	movt	r2, #2
   1fbf0:	bl	10eac <__fprintf_chk@plt>
   1fbf4:	ldr	r3, [r5]
   1fbf8:	cmp	r3, #0
   1fbfc:	ble	1fbb8 <__assert_fail@plt+0xec40>
   1fc00:	movw	r0, #24520	; 0x5fc8
   1fc04:	mov	r1, #1
   1fc08:	movt	r0, #2
   1fc0c:	mov	r2, #49	; 0x31
   1fc10:	b	1fb8c <__assert_fail@plt+0xec14>
   1fc14:	movw	r5, #28980	; 0x7134
   1fc18:	movt	r5, #3
   1fc1c:	ldr	r3, [r5]
   1fc20:	cmp	r3, #0
   1fc24:	ble	1fbb8 <__assert_fail@plt+0xec40>
   1fc28:	movw	r4, #28940	; 0x710c
   1fc2c:	movt	r4, #3
   1fc30:	mov	r3, #25
   1fc34:	movw	r2, #17788	; 0x457c
   1fc38:	mov	r1, #1
   1fc3c:	ldr	r0, [r4]
   1fc40:	movt	r2, #2
   1fc44:	bl	10eac <__fprintf_chk@plt>
   1fc48:	ldr	r3, [r5]
   1fc4c:	cmp	r3, #0
   1fc50:	ble	1fbb8 <__assert_fail@plt+0xec40>
   1fc54:	movw	r0, #24480	; 0x5fa0
   1fc58:	mov	r1, #1
   1fc5c:	movt	r0, #2
   1fc60:	mov	r2, #36	; 0x24
   1fc64:	b	1fb8c <__assert_fail@plt+0xec14>
   1fc68:	andeq	r5, r2, ip, ror sp
   1fc6c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1fc70:	movw	r3, #28916	; 0x70f4
   1fc74:	movw	r5, #28936	; 0x7108
   1fc78:	movt	r3, #3
   1fc7c:	movt	r5, #3
   1fc80:	sub	sp, sp, #36	; 0x24
   1fc84:	ldr	r4, [r3, #8]
   1fc88:	mov	r1, #100	; 0x64
   1fc8c:	ldr	r3, [r5]
   1fc90:	mov	r6, r0
   1fc94:	add	r0, sp, #20
   1fc98:	add	r4, r4, #4
   1fc9c:	mov	r7, #1
   1fca0:	str	r3, [sp, #28]
   1fca4:	bl	162a8 <__assert_fail@plt+0x5330>
   1fca8:	lsl	r4, r4, r7
   1fcac:	lsl	r4, r7, r4
   1fcb0:	mov	r9, r0
   1fcb4:	bl	160b0 <__assert_fail@plt+0x5138>
   1fcb8:	subs	r8, r0, #0
   1fcbc:	bne	1fdfc <__assert_fail@plt+0xee84>
   1fcc0:	mov	r0, r4
   1fcc4:	bl	10e1c <malloc@plt>
   1fcc8:	mov	r1, r8
   1fccc:	stmib	sp, {r0, r4}
   1fcd0:	mov	r0, r4
   1fcd4:	bl	16100 <__assert_fail@plt+0x5188>
   1fcd8:	str	r0, [sp, #16]
   1fcdc:	bl	10e1c <malloc@plt>
   1fce0:	ldr	r2, [sp, #4]
   1fce4:	cmp	r2, #0
   1fce8:	str	r0, [sp, #12]
   1fcec:	beq	1fd74 <__assert_fail@plt+0xedfc>
   1fcf0:	cmp	r0, #0
   1fcf4:	beq	1fd74 <__assert_fail@plt+0xedfc>
   1fcf8:	movw	r4, #28980	; 0x7134
   1fcfc:	movt	r4, #3
   1fd00:	ldr	r0, [r4, #4]
   1fd04:	cmp	r0, #0
   1fd08:	beq	1fd6c <__assert_fail@plt+0xedf4>
   1fd0c:	ldr	r0, [r4, #8]
   1fd10:	mov	r1, sp
   1fd14:	bl	1fa24 <__assert_fail@plt+0xeaac>
   1fd18:	subs	r9, r0, #0
   1fd1c:	beq	1fe8c <__assert_fail@plt+0xef14>
   1fd20:	ldr	r1, [sp]
   1fd24:	bl	161ec <__assert_fail@plt+0x5274>
   1fd28:	mov	r8, r0
   1fd2c:	mov	r0, r9
   1fd30:	bl	10d44 <free@plt>
   1fd34:	add	r4, sp, #4
   1fd38:	ldr	r7, [sp, #28]
   1fd3c:	mov	ip, r6
   1fd40:	ldr	r5, [r5]
   1fd44:	ldm	r4!, {r0, r1, r2, r3}
   1fd48:	cmp	r7, r5
   1fd4c:	str	r8, [sp, #24]
   1fd50:	stmia	ip!, {r0, r1, r2, r3}
   1fd54:	ldm	r4, {r0, r1}
   1fd58:	stm	ip, {r0, r1}
   1fd5c:	mov	r0, r6
   1fd60:	bne	1fdf8 <__assert_fail@plt+0xee80>
   1fd64:	add	sp, sp, #36	; 0x24
   1fd68:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1fd6c:	mov	r8, r0
   1fd70:	b	1fd34 <__assert_fail@plt+0xedbc>
   1fd74:	movw	r5, #28980	; 0x7134
   1fd78:	movt	r5, #3
   1fd7c:	ldr	r3, [r5]
   1fd80:	cmp	r3, #0
   1fd84:	ble	1fdf0 <__assert_fail@plt+0xee78>
   1fd88:	movw	r4, #28940	; 0x710c
   1fd8c:	movt	r4, #3
   1fd90:	mov	r3, #31
   1fd94:	movw	r2, #17788	; 0x457c
   1fd98:	mov	r1, #1
   1fd9c:	ldr	r0, [r4]
   1fda0:	movt	r2, #2
   1fda4:	bl	10eac <__fprintf_chk@plt>
   1fda8:	ldr	r3, [r5]
   1fdac:	cmp	r3, #0
   1fdb0:	ble	1fdf0 <__assert_fail@plt+0xee78>
   1fdb4:	ldr	r3, [r4]
   1fdb8:	movw	r0, #24480	; 0x5fa0
   1fdbc:	mov	r1, #1
   1fdc0:	movt	r0, #2
   1fdc4:	mov	r2, #36	; 0x24
   1fdc8:	bl	10dd4 <fwrite@plt>
   1fdcc:	ldr	r3, [r5]
   1fdd0:	cmp	r3, #0
   1fdd4:	ble	1fdf0 <__assert_fail@plt+0xee78>
   1fdd8:	movw	r0, #24180	; 0x5e74
   1fddc:	ldr	r3, [r4]
   1fde0:	mov	r1, #1
   1fde4:	movt	r0, #2
   1fde8:	mov	r2, #2
   1fdec:	bl	10dd4 <fwrite@plt>
   1fdf0:	mov	r0, #31
   1fdf4:	bl	10e58 <exit@plt>
   1fdf8:	bl	10db0 <__stack_chk_fail@plt>
   1fdfc:	movw	r5, #28980	; 0x7134
   1fe00:	movt	r5, #3
   1fe04:	ldr	r3, [r5]
   1fe08:	cmp	r3, #0
   1fe0c:	ble	1fe84 <__assert_fail@plt+0xef0c>
   1fe10:	movw	r4, #28940	; 0x710c
   1fe14:	movt	r4, #3
   1fe18:	mov	r3, #30
   1fe1c:	movw	r2, #17788	; 0x457c
   1fe20:	mov	r1, r7
   1fe24:	ldr	r0, [r4]
   1fe28:	movt	r2, #2
   1fe2c:	bl	10eac <__fprintf_chk@plt>
   1fe30:	ldr	r3, [r5]
   1fe34:	cmp	r3, #0
   1fe38:	ble	1fe84 <__assert_fail@plt+0xef0c>
   1fe3c:	mov	r0, r9
   1fe40:	ldr	r6, [r4]
   1fe44:	bl	160c0 <__assert_fail@plt+0x5148>
   1fe48:	mov	r1, r7
   1fe4c:	movw	r2, #24572	; 0x5ffc
   1fe50:	movt	r2, #2
   1fe54:	mov	r3, r0
   1fe58:	mov	r0, r6
   1fe5c:	bl	10eac <__fprintf_chk@plt>
   1fe60:	ldr	r3, [r5]
   1fe64:	cmp	r3, #0
   1fe68:	ble	1fe84 <__assert_fail@plt+0xef0c>
   1fe6c:	movw	r0, #24180	; 0x5e74
   1fe70:	mov	r1, r7
   1fe74:	ldr	r3, [r4]
   1fe78:	mov	r2, #2
   1fe7c:	movt	r0, #2
   1fe80:	bl	10dd4 <fwrite@plt>
   1fe84:	mov	r0, #30
   1fe88:	bl	10e58 <exit@plt>
   1fe8c:	ldr	r3, [r4]
   1fe90:	cmp	r3, #0
   1fe94:	ble	1ff00 <__assert_fail@plt+0xef88>
   1fe98:	movw	r5, #28940	; 0x710c
   1fe9c:	movt	r5, #3
   1fea0:	mov	r3, #25
   1fea4:	movw	r2, #17788	; 0x457c
   1fea8:	mov	r1, r7
   1feac:	ldr	r0, [r5]
   1feb0:	movt	r2, #2
   1feb4:	bl	10eac <__fprintf_chk@plt>
   1feb8:	ldr	r3, [r4]
   1febc:	cmp	r3, #0
   1fec0:	ble	1ff00 <__assert_fail@plt+0xef88>
   1fec4:	ldr	r3, [r5]
   1fec8:	movw	r0, #24624	; 0x6030
   1fecc:	mov	r1, r7
   1fed0:	movt	r0, #2
   1fed4:	mov	r2, #46	; 0x2e
   1fed8:	bl	10dd4 <fwrite@plt>
   1fedc:	ldr	r3, [r4]
   1fee0:	cmp	r3, #0
   1fee4:	ble	1ff00 <__assert_fail@plt+0xef88>
   1fee8:	movw	r0, #24180	; 0x5e74
   1feec:	mov	r1, r7
   1fef0:	ldr	r3, [r5]
   1fef4:	mov	r2, #2
   1fef8:	movt	r0, #2
   1fefc:	bl	10dd4 <fwrite@plt>
   1ff00:	mov	r0, #25
   1ff04:	bl	10e58 <exit@plt>
   1ff08:	push	{r4, r5, r6, r7, lr}
   1ff0c:	movw	r5, #28936	; 0x7108
   1ff10:	movt	r5, #3
   1ff14:	sub	sp, sp, #44	; 0x2c
   1ff18:	mov	r1, #100	; 0x64
   1ff1c:	mov	r7, r0
   1ff20:	ldr	r3, [r5]
   1ff24:	add	r0, sp, #24
   1ff28:	str	r3, [sp, #36]	; 0x24
   1ff2c:	bl	16c54 <__assert_fail@plt+0x5cdc>
   1ff30:	mov	r4, r0
   1ff34:	bl	160b0 <__assert_fail@plt+0x5138>
   1ff38:	cmp	r0, #0
   1ff3c:	bne	200ec <__assert_fail@plt+0xf174>
   1ff40:	mov	r4, #65536	; 0x10000
   1ff44:	str	r4, [sp, #8]
   1ff48:	mov	r0, r4
   1ff4c:	bl	10e1c <malloc@plt>
   1ff50:	str	r4, [sp, #16]
   1ff54:	mov	r6, r0
   1ff58:	mov	r0, r4
   1ff5c:	str	r6, [sp, #4]
   1ff60:	bl	10e1c <malloc@plt>
   1ff64:	cmp	r6, #0
   1ff68:	str	r0, [sp, #12]
   1ff6c:	beq	20064 <__assert_fail@plt+0xf0ec>
   1ff70:	cmp	r0, #0
   1ff74:	beq	20064 <__assert_fail@plt+0xf0ec>
   1ff78:	movw	r4, #28980	; 0x7134
   1ff7c:	movt	r4, #3
   1ff80:	ldr	r3, [r4, #4]
   1ff84:	cmp	r3, #0
   1ff88:	streq	r3, [sp, #28]
   1ff8c:	streq	r3, [sp, #32]
   1ff90:	bne	1ffd0 <__assert_fail@plt+0xf058>
   1ff94:	add	r4, sp, #4
   1ff98:	mov	r3, #0
   1ff9c:	str	r3, [sp, #20]
   1ffa0:	mov	ip, r7
   1ffa4:	ldm	r4!, {r0, r1, r2, r3}
   1ffa8:	ldr	r6, [sp, #36]	; 0x24
   1ffac:	ldr	r5, [r5]
   1ffb0:	stmia	ip!, {r0, r1, r2, r3}
   1ffb4:	cmp	r6, r5
   1ffb8:	ldm	r4, {r0, r1, r2, r3}
   1ffbc:	stm	ip, {r0, r1, r2, r3}
   1ffc0:	mov	r0, r7
   1ffc4:	bne	200e8 <__assert_fail@plt+0xf170>
   1ffc8:	add	sp, sp, #44	; 0x2c
   1ffcc:	pop	{r4, r5, r6, r7, pc}
   1ffd0:	ldr	r0, [r4, #8]
   1ffd4:	add	r1, sp, #32
   1ffd8:	bl	1fa24 <__assert_fail@plt+0xeaac>
   1ffdc:	cmp	r0, #0
   1ffe0:	str	r0, [sp, #28]
   1ffe4:	bne	1ff94 <__assert_fail@plt+0xf01c>
   1ffe8:	ldr	r3, [r4]
   1ffec:	cmp	r3, #0
   1fff0:	ble	2005c <__assert_fail@plt+0xf0e4>
   1fff4:	movw	r5, #28940	; 0x710c
   1fff8:	movt	r5, #3
   1fffc:	mov	r3, #25
   20000:	movw	r2, #17788	; 0x457c
   20004:	mov	r1, #1
   20008:	ldr	r0, [r5]
   2000c:	movt	r2, #2
   20010:	bl	10eac <__fprintf_chk@plt>
   20014:	ldr	r3, [r4]
   20018:	cmp	r3, #0
   2001c:	ble	2005c <__assert_fail@plt+0xf0e4>
   20020:	ldr	r3, [r5]
   20024:	movw	r0, #24624	; 0x6030
   20028:	mov	r1, #1
   2002c:	movt	r0, #2
   20030:	mov	r2, #46	; 0x2e
   20034:	bl	10dd4 <fwrite@plt>
   20038:	ldr	r3, [r4]
   2003c:	cmp	r3, #0
   20040:	ble	2005c <__assert_fail@plt+0xf0e4>
   20044:	movw	r0, #24180	; 0x5e74
   20048:	ldr	r3, [r5]
   2004c:	mov	r1, #1
   20050:	movt	r0, #2
   20054:	mov	r2, #2
   20058:	bl	10dd4 <fwrite@plt>
   2005c:	mov	r0, #25
   20060:	bl	10e58 <exit@plt>
   20064:	movw	r5, #28980	; 0x7134
   20068:	movt	r5, #3
   2006c:	ldr	r3, [r5]
   20070:	cmp	r3, #0
   20074:	ble	200e0 <__assert_fail@plt+0xf168>
   20078:	movw	r4, #28940	; 0x710c
   2007c:	movt	r4, #3
   20080:	mov	r3, #61	; 0x3d
   20084:	movw	r2, #17788	; 0x457c
   20088:	mov	r1, #1
   2008c:	ldr	r0, [r4]
   20090:	movt	r2, #2
   20094:	bl	10eac <__fprintf_chk@plt>
   20098:	ldr	r3, [r5]
   2009c:	cmp	r3, #0
   200a0:	ble	200e0 <__assert_fail@plt+0xf168>
   200a4:	ldr	r3, [r4]
   200a8:	movw	r0, #24480	; 0x5fa0
   200ac:	mov	r1, #1
   200b0:	movt	r0, #2
   200b4:	mov	r2, #36	; 0x24
   200b8:	bl	10dd4 <fwrite@plt>
   200bc:	ldr	r3, [r5]
   200c0:	cmp	r3, #0
   200c4:	ble	200e0 <__assert_fail@plt+0xf168>
   200c8:	movw	r0, #24180	; 0x5e74
   200cc:	ldr	r3, [r4]
   200d0:	mov	r1, #1
   200d4:	movt	r0, #2
   200d8:	mov	r2, #2
   200dc:	bl	10dd4 <fwrite@plt>
   200e0:	mov	r0, #61	; 0x3d
   200e4:	bl	10e58 <exit@plt>
   200e8:	bl	10db0 <__stack_chk_fail@plt>
   200ec:	movw	r6, #28980	; 0x7134
   200f0:	movt	r6, #3
   200f4:	ldr	r3, [r6]
   200f8:	cmp	r3, #0
   200fc:	ble	20174 <__assert_fail@plt+0xf1fc>
   20100:	movw	r5, #28940	; 0x710c
   20104:	movt	r5, #3
   20108:	mov	r3, #60	; 0x3c
   2010c:	movw	r2, #17788	; 0x457c
   20110:	mov	r1, #1
   20114:	ldr	r0, [r5]
   20118:	movt	r2, #2
   2011c:	bl	10eac <__fprintf_chk@plt>
   20120:	ldr	r3, [r6]
   20124:	cmp	r3, #0
   20128:	ble	20174 <__assert_fail@plt+0xf1fc>
   2012c:	mov	r0, r4
   20130:	ldr	r4, [r5]
   20134:	bl	160c0 <__assert_fail@plt+0x5148>
   20138:	movw	r2, #24672	; 0x6060
   2013c:	mov	r1, #1
   20140:	movt	r2, #2
   20144:	mov	r3, r0
   20148:	mov	r0, r4
   2014c:	bl	10eac <__fprintf_chk@plt>
   20150:	ldr	r3, [r6]
   20154:	cmp	r3, #0
   20158:	ble	20174 <__assert_fail@plt+0xf1fc>
   2015c:	movw	r0, #24180	; 0x5e74
   20160:	ldr	r3, [r5]
   20164:	mov	r1, #1
   20168:	movt	r0, #2
   2016c:	mov	r2, #2
   20170:	bl	10dd4 <fwrite@plt>
   20174:	mov	r0, #60	; 0x3c
   20178:	bl	10e58 <exit@plt>
   2017c:	push	{r4, r5, r6, lr}
   20180:	movw	r4, #28936	; 0x7108
   20184:	movt	r4, #3
   20188:	sub	sp, sp, #16
   2018c:	add	r6, sp, #4
   20190:	mov	r5, r0
   20194:	ldr	r3, [r4]
   20198:	mov	r0, #1
   2019c:	mov	r1, r6
   201a0:	str	r3, [sp, #12]
   201a4:	bl	10d68 <clock_gettime@plt>
   201a8:	cmp	r0, #0
   201ac:	beq	201d0 <__assert_fail@plt+0xf258>
   201b0:	movw	r3, #28940	; 0x710c
   201b4:	movt	r3, #3
   201b8:	movw	r0, #17704	; 0x4528
   201bc:	mov	r1, #1
   201c0:	ldr	r3, [r3]
   201c4:	movt	r0, #2
   201c8:	mov	r2, #26
   201cc:	bl	10dd4 <fwrite@plt>
   201d0:	ldr	r2, [sp, #12]
   201d4:	ldr	r3, [r4]
   201d8:	ldm	r6, {r0, r1}
   201dc:	cmp	r2, r3
   201e0:	stm	r5, {r0, r1}
   201e4:	mov	r0, r5
   201e8:	bne	201f4 <__assert_fail@plt+0xf27c>
   201ec:	add	sp, sp, #16
   201f0:	pop	{r4, r5, r6, pc}
   201f4:	bl	10db0 <__stack_chk_fail@plt>
   201f8:	push	{r4, r5, r6, lr}
   201fc:	movw	r4, #28936	; 0x7108
   20200:	movt	r4, #3
   20204:	sub	sp, sp, #16
   20208:	sub	r2, r1, #1
   2020c:	mov	r5, #1
   20210:	ldr	r1, [r4]
   20214:	mov	r3, #0
   20218:	str	r5, [sp]
   2021c:	mov	r6, r0
   20220:	str	r1, [sp, #12]
   20224:	bl	10ec4 <fseeko64@plt>
   20228:	subs	r2, r0, #0
   2022c:	bne	20268 <__assert_fail@plt+0xf2f0>
   20230:	add	r0, sp, #16
   20234:	mov	r3, r6
   20238:	mov	r1, r5
   2023c:	strb	r2, [r0, #-8]!
   20240:	mov	r2, r5
   20244:	bl	10dd4 <fwrite@plt>
   20248:	cmp	r0, #1
   2024c:	bne	202f0 <__assert_fail@plt+0xf378>
   20250:	ldr	r2, [sp, #12]
   20254:	ldr	r3, [r4]
   20258:	cmp	r2, r3
   2025c:	bne	202ec <__assert_fail@plt+0xf374>
   20260:	add	sp, sp, #16
   20264:	pop	{r4, r5, r6, pc}
   20268:	movw	r6, #28980	; 0x7134
   2026c:	movt	r6, #3
   20270:	ldr	r3, [r6]
   20274:	cmp	r3, #0
   20278:	ble	202e4 <__assert_fail@plt+0xf36c>
   2027c:	movw	r4, #28940	; 0x710c
   20280:	movt	r4, #3
   20284:	mov	r3, #69	; 0x45
   20288:	movw	r2, #17788	; 0x457c
   2028c:	mov	r1, r5
   20290:	ldr	r0, [r4]
   20294:	movt	r2, #2
   20298:	bl	10eac <__fprintf_chk@plt>
   2029c:	ldr	r3, [r6]
   202a0:	cmp	r3, #0
   202a4:	ble	202e4 <__assert_fail@plt+0xf36c>
   202a8:	movw	r0, #24704	; 0x6080
   202ac:	movt	r0, #2
   202b0:	mov	r1, r5
   202b4:	mov	r2, #31
   202b8:	ldr	r3, [r4]
   202bc:	bl	10dd4 <fwrite@plt>
   202c0:	ldr	r3, [r6]
   202c4:	cmp	r3, #0
   202c8:	ble	202e4 <__assert_fail@plt+0xf36c>
   202cc:	movw	r0, #24180	; 0x5e74
   202d0:	mov	r1, r5
   202d4:	ldr	r3, [r4]
   202d8:	mov	r2, #2
   202dc:	movt	r0, #2
   202e0:	bl	10dd4 <fwrite@plt>
   202e4:	mov	r0, #69	; 0x45
   202e8:	bl	10e58 <exit@plt>
   202ec:	bl	10db0 <__stack_chk_fail@plt>
   202f0:	movw	r6, #28980	; 0x7134
   202f4:	movt	r6, #3
   202f8:	ldr	r3, [r6]
   202fc:	cmp	r3, #0
   20300:	ble	202e4 <__assert_fail@plt+0xf36c>
   20304:	movw	r4, #28940	; 0x710c
   20308:	movt	r4, #3
   2030c:	mov	r3, #69	; 0x45
   20310:	movw	r2, #17788	; 0x457c
   20314:	mov	r1, r5
   20318:	ldr	r0, [r4]
   2031c:	movt	r2, #2
   20320:	bl	10eac <__fprintf_chk@plt>
   20324:	ldr	r3, [r6]
   20328:	cmp	r3, #0
   2032c:	ble	202e4 <__assert_fail@plt+0xf36c>
   20330:	movw	r0, #24736	; 0x60a0
   20334:	mov	r1, r5
   20338:	movt	r0, #2
   2033c:	mov	r2, #37	; 0x25
   20340:	b	202b8 <__assert_fail@plt+0xf340>
   20344:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20348:	movw	sl, #28936	; 0x7108
   2034c:	movt	sl, #3
   20350:	sub	sp, sp, #65536	; 0x10000
   20354:	sub	sp, sp, #16
   20358:	mov	r3, r1
   2035c:	ldr	ip, [sl]
   20360:	add	lr, sp, #65536	; 0x10000
   20364:	mov	r8, r1
   20368:	mov	r9, r0
   2036c:	mov	r1, #1
   20370:	mov	r0, r2
   20374:	mov	r2, #4
   20378:	str	ip, [lr, #12]
   2037c:	bl	10dd4 <fwrite@plt>
   20380:	cmp	r0, #4
   20384:	moveq	r4, #4
   20388:	moveq	r5, #0
   2038c:	moveq	r7, #0
   20390:	bne	204ac <__assert_fail@plt+0xf534>
   20394:	mov	r1, #65536	; 0x10000
   20398:	mov	r2, #1
   2039c:	mov	r3, r1
   203a0:	str	r9, [sp]
   203a4:	add	r0, sp, #12
   203a8:	bl	10ed0 <__fread_chk@plt>
   203ac:	mov	r3, r7
   203b0:	add	r1, sp, #12
   203b4:	mov	r6, r0
   203b8:	mov	r2, r0
   203bc:	adds	r4, r4, r6
   203c0:	mov	r0, r8
   203c4:	adc	r5, r5, #0
   203c8:	bl	1f2f0 <__assert_fail@plt+0xe378>
   203cc:	cmp	r6, #0
   203d0:	mov	r7, r0
   203d4:	bne	20394 <__assert_fail@plt+0xf41c>
   203d8:	mov	r0, r9
   203dc:	bl	10d5c <ferror@plt>
   203e0:	cmp	r0, #0
   203e4:	bne	20428 <__assert_fail@plt+0xf4b0>
   203e8:	cmp	r7, #0
   203ec:	beq	203fc <__assert_fail@plt+0xf484>
   203f0:	mov	r0, r8
   203f4:	mov	r1, r7
   203f8:	bl	201f8 <__assert_fail@plt+0xf280>
   203fc:	add	r3, sp, #65536	; 0x10000
   20400:	mov	r0, r4
   20404:	mov	r1, r5
   20408:	ldr	r2, [r3, #12]
   2040c:	ldr	r3, [sl]
   20410:	cmp	r2, r3
   20414:	bne	20424 <__assert_fail@plt+0xf4ac>
   20418:	add	sp, sp, #65536	; 0x10000
   2041c:	add	sp, sp, #16
   20420:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20424:	bl	10db0 <__stack_chk_fail@plt>
   20428:	movw	r5, #28980	; 0x7134
   2042c:	movt	r5, #3
   20430:	ldr	r3, [r5]
   20434:	cmp	r3, #0
   20438:	ble	204a4 <__assert_fail@plt+0xf52c>
   2043c:	movw	r4, #28940	; 0x710c
   20440:	movt	r4, #3
   20444:	mov	r3, #51	; 0x33
   20448:	movw	r2, #17788	; 0x457c
   2044c:	mov	r1, #1
   20450:	ldr	r0, [r4]
   20454:	movt	r2, #2
   20458:	bl	10eac <__fprintf_chk@plt>
   2045c:	ldr	r3, [r5]
   20460:	cmp	r3, #0
   20464:	ble	204a4 <__assert_fail@plt+0xf52c>
   20468:	ldr	r3, [r4]
   2046c:	movw	r0, #24804	; 0x60e4
   20470:	mov	r1, #1
   20474:	movt	r0, #2
   20478:	mov	r2, #10
   2047c:	bl	10dd4 <fwrite@plt>
   20480:	ldr	r3, [r5]
   20484:	cmp	r3, #0
   20488:	ble	204a4 <__assert_fail@plt+0xf52c>
   2048c:	movw	r0, #24180	; 0x5e74
   20490:	ldr	r3, [r4]
   20494:	mov	r1, #1
   20498:	movt	r0, #2
   2049c:	mov	r2, #2
   204a0:	bl	10dd4 <fwrite@plt>
   204a4:	mov	r0, #51	; 0x33
   204a8:	bl	10e58 <exit@plt>
   204ac:	movw	r5, #28980	; 0x7134
   204b0:	movt	r5, #3
   204b4:	ldr	r3, [r5]
   204b8:	cmp	r3, #0
   204bc:	ble	20528 <__assert_fail@plt+0xf5b0>
   204c0:	movw	r4, #28940	; 0x710c
   204c4:	movt	r4, #3
   204c8:	mov	r3, #50	; 0x32
   204cc:	movw	r2, #17788	; 0x457c
   204d0:	mov	r1, #1
   204d4:	ldr	r0, [r4]
   204d8:	movt	r2, #2
   204dc:	bl	10eac <__fprintf_chk@plt>
   204e0:	ldr	r3, [r5]
   204e4:	cmp	r3, #0
   204e8:	ble	20528 <__assert_fail@plt+0xf5b0>
   204ec:	ldr	r3, [r4]
   204f0:	movw	r0, #24776	; 0x60c8
   204f4:	mov	r1, #1
   204f8:	movt	r0, #2
   204fc:	mov	r2, #24
   20500:	bl	10dd4 <fwrite@plt>
   20504:	ldr	r3, [r5]
   20508:	cmp	r3, #0
   2050c:	ble	20528 <__assert_fail@plt+0xf5b0>
   20510:	movw	r0, #24180	; 0x5e74
   20514:	ldr	r3, [r4]
   20518:	mov	r1, #1
   2051c:	movt	r0, #2
   20520:	mov	r2, #2
   20524:	bl	10dd4 <fwrite@plt>
   20528:	mov	r0, #50	; 0x32
   2052c:	bl	10e58 <exit@plt>
   20530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20534:	vpush	{d8-d9}
   20538:	sub	sp, sp, #252	; 0xfc
   2053c:	movw	ip, #28936	; 0x7108
   20540:	movt	ip, #3
   20544:	str	ip, [sp, #64]	; 0x40
   20548:	movw	r8, #28916	; 0x70f4
   2054c:	ldr	ip, [sp, #308]	; 0x134
   20550:	movt	r8, #3
   20554:	ldr	lr, [sp, #64]	; 0x40
   20558:	mov	r7, r0
   2055c:	mov	r5, r1
   20560:	str	r2, [sp, #44]	; 0x2c
   20564:	str	ip, [sp, #68]	; 0x44
   20568:	ldr	ip, [lr]
   2056c:	ldr	r0, [sp, #68]	; 0x44
   20570:	str	r3, [sp, #48]	; 0x30
   20574:	str	ip, [sp, #244]	; 0xf4
   20578:	ldr	ip, [sp, #312]	; 0x138
   2057c:	ldr	r4, [r8, #8]
   20580:	ldr	fp, [sp, #304]	; 0x130
   20584:	str	ip, [sp, #76]	; 0x4c
   20588:	bl	1f950 <__assert_fail@plt+0xe9d8>
   2058c:	cmp	r0, #0
   20590:	str	r0, [sp, #36]	; 0x24
   20594:	beq	20af8 <__assert_fail@plt+0xfb80>
   20598:	ldr	r0, [sp, #76]	; 0x4c
   2059c:	bl	1f0d4 <__assert_fail@plt+0xe15c>
   205a0:	cmp	r0, #0
   205a4:	str	r0, [sp, #40]	; 0x28
   205a8:	beq	20c40 <__assert_fail@plt+0xfcc8>
   205ac:	movw	r6, #28980	; 0x7134
   205b0:	movt	r6, #3
   205b4:	mov	r3, #0
   205b8:	ldr	lr, [sp, #316]	; 0x13c
   205bc:	ldr	r2, [r6, #20]
   205c0:	ldr	r1, [r6, #12]
   205c4:	cmp	r2, r3
   205c8:	ldr	r2, [r6, #16]
   205cc:	ldr	r0, [r8, #12]
   205d0:	str	r1, [sp, #108]	; 0x6c
   205d4:	str	r2, [sp, #120]	; 0x78
   205d8:	ldr	r1, [r8, #16]
   205dc:	ldr	r2, [r8, #8]
   205e0:	str	lr, [sp, #112]	; 0x70
   205e4:	str	r3, [sp, #92]	; 0x5c
   205e8:	str	r2, [sp, #80]	; 0x50
   205ec:	mov	r2, #1
   205f0:	str	r0, [sp, #84]	; 0x54
   205f4:	str	r1, [sp, #88]	; 0x58
   205f8:	str	r3, [sp, #96]	; 0x60
   205fc:	str	r3, [sp, #100]	; 0x64
   20600:	str	r3, [sp, #104]	; 0x68
   20604:	str	r3, [sp, #124]	; 0x7c
   20608:	str	r3, [sp, #128]	; 0x80
   2060c:	str	r3, [sp, #132]	; 0x84
   20610:	str	r2, [sp, #116]	; 0x74
   20614:	bne	20b04 <__assert_fail@plt+0xfb8c>
   20618:	add	r8, r4, #4
   2061c:	mov	sl, #1
   20620:	mov	r1, sl
   20624:	ldr	r3, [sp, #36]	; 0x24
   20628:	lsl	r8, r8, sl
   2062c:	mov	r0, r7
   20630:	lsl	r8, sl, r8
   20634:	str	r8, [sp, #32]
   20638:	mov	r2, r8
   2063c:	bl	10df8 <fread@plt>
   20640:	mov	r4, r0
   20644:	ldr	r0, [sp, #36]	; 0x24
   20648:	bl	10d5c <ferror@plt>
   2064c:	cmp	r0, #0
   20650:	str	r0, [sp, #72]	; 0x48
   20654:	bne	20d88 <__assert_fail@plt+0xfe10>
   20658:	ldr	ip, [sp, #32]
   2065c:	mov	r8, r4
   20660:	mov	r9, #0
   20664:	cmp	ip, r4
   20668:	bhi	2083c <__assert_fail@plt+0xf8c4>
   2066c:	mov	r3, fp
   20670:	add	r2, sp, #80	; 0x50
   20674:	mov	r1, r5
   20678:	str	r2, [sp]
   2067c:	ldr	r0, [sp, #48]	; 0x30
   20680:	ldr	r2, [sp, #44]	; 0x2c
   20684:	bl	1630c <__assert_fail@plt+0x5394>
   20688:	mov	fp, r0
   2068c:	bl	160b0 <__assert_fail@plt+0x5138>
   20690:	cmp	r0, #0
   20694:	bne	20e0c <__assert_fail@plt+0xfe94>
   20698:	mov	r0, r5
   2069c:	mov	r1, sl
   206a0:	mov	r2, fp
   206a4:	ldr	r3, [sp, #40]	; 0x28
   206a8:	bl	10dd4 <fwrite@plt>
   206ac:	cmp	fp, r0
   206b0:	bne	21148 <__assert_fail@plt+0x101d0>
   206b4:	cmp	r4, #0
   206b8:	mov	sl, fp
   206bc:	mov	fp, #0
   206c0:	beq	20aa0 <__assert_fail@plt+0xfb28>
   206c4:	mov	r3, r9
   206c8:	movw	ip, #28980	; 0x7134
   206cc:	mov	r8, sl
   206d0:	movt	ip, #3
   206d4:	mov	r9, fp
   206d8:	str	ip, [sp, #52]	; 0x34
   206dc:	vldr	d9, [pc, #916]	; 20a78 <__assert_fail@plt+0xfb00>
   206e0:	movw	ip, #35594	; 0x8b0a
   206e4:	mov	r0, r4
   206e8:	movt	ip, #2
   206ec:	mov	sl, r4
   206f0:	str	ip, [sp, #56]	; 0x38
   206f4:	mov	fp, r3
   206f8:	movw	ip, #28940	; 0x710c
   206fc:	movt	ip, #3
   20700:	str	ip, [sp, #60]	; 0x3c
   20704:	b	20748 <__assert_fail@plt+0xf7d0>
   20708:	mov	r0, r5
   2070c:	mov	r1, #1
   20710:	mov	r2, r4
   20714:	ldr	r3, [sp, #40]	; 0x28
   20718:	bl	10dd4 <fwrite@plt>
   2071c:	cmp	r4, r0
   20720:	bne	20c74 <__assert_fail@plt+0xfcfc>
   20724:	mov	r0, r7
   20728:	mov	r1, #1
   2072c:	ldr	r2, [sp, #32]
   20730:	ldr	r3, [sp, #36]	; 0x24
   20734:	bl	10df8 <fread@plt>
   20738:	adds	sl, sl, r0
   2073c:	adc	fp, fp, #0
   20740:	cmp	r0, #0
   20744:	beq	20a88 <__assert_fail@plt+0xfb10>
   20748:	mov	lr, #0
   2074c:	mov	r3, r7
   20750:	str	r0, [sp]
   20754:	mov	r1, r5
   20758:	str	lr, [sp, #4]
   2075c:	ldr	r2, [sp, #44]	; 0x2c
   20760:	ldr	r0, [sp, #48]	; 0x30
   20764:	bl	1634c <__assert_fail@plt+0x53d4>
   20768:	mov	r4, r0
   2076c:	bl	160b0 <__assert_fail@plt+0x5138>
   20770:	ldr	r3, [r6]
   20774:	cmp	r0, #0
   20778:	bne	20cf8 <__assert_fail@plt+0xfd80>
   2077c:	adds	r8, r8, r4
   20780:	adc	r9, r9, #0
   20784:	cmp	r3, #1
   20788:	ble	20708 <__assert_fail@plt+0xf790>
   2078c:	str	r3, [sp, #28]
   20790:	bl	10e4c <clock@plt>
   20794:	ldr	ip, [sp, #52]	; 0x34
   20798:	ldr	r3, [sp, #28]
   2079c:	ldr	r2, [ip, #24]
   207a0:	ldr	ip, [sp, #56]	; 0x38
   207a4:	rsb	r0, r2, r0
   207a8:	cmp	r0, ip
   207ac:	bgt	207b8 <__assert_fail@plt+0xf840>
   207b0:	cmp	r3, #3
   207b4:	ble	20708 <__assert_fail@plt+0xf790>
   207b8:	bl	10e4c <clock@plt>
   207bc:	ldr	lr, [sp, #60]	; 0x3c
   207c0:	lsr	r3, sl, #20
   207c4:	mov	r1, r9
   207c8:	orr	r3, r3, fp, lsl #12
   207cc:	ldr	ip, [lr]
   207d0:	str	r0, [r6, #24]
   207d4:	mov	r0, r8
   207d8:	str	r3, [sp, #28]
   207dc:	str	ip, [sp, #24]
   207e0:	bl	23714 <__assert_fail@plt+0x1279c>
   207e4:	vmov	d8, r0, r1
   207e8:	mov	r0, sl
   207ec:	mov	r1, fp
   207f0:	bl	23714 <__assert_fail@plt+0x1279c>
   207f4:	ldr	ip, [sp, #24]
   207f8:	ldr	r3, [sp, #28]
   207fc:	movw	r2, #24908	; 0x614c
   20800:	movt	r2, #2
   20804:	vmov	d5, r0, r1
   20808:	mov	r0, ip
   2080c:	mov	r1, #1
   20810:	vdiv.f64	d8, d8, d5
   20814:	vmul.f64	d8, d8, d9
   20818:	vstr	d8, [sp]
   2081c:	bl	10eac <__fprintf_chk@plt>
   20820:	ldr	r3, [r6]
   20824:	cmp	r3, #3
   20828:	ble	20708 <__assert_fail@plt+0xf790>
   2082c:	ldr	ip, [sp, #60]	; 0x3c
   20830:	ldr	r0, [ip]
   20834:	bl	10d2c <fflush@plt>
   20838:	b	20708 <__assert_fail@plt+0xf790>
   2083c:	add	ip, sp, #80	; 0x50
   20840:	str	r4, [sp]
   20844:	ldr	r2, [sp, #44]	; 0x2c
   20848:	mov	r3, r7
   2084c:	mov	r1, r5
   20850:	str	ip, [sp, #8]
   20854:	ldr	r0, [sp, #48]	; 0x30
   20858:	str	fp, [sp, #4]
   2085c:	bl	168c4 <__assert_fail@plt+0x594c>
   20860:	mov	r4, r0
   20864:	bl	160b0 <__assert_fail@plt+0x5138>
   20868:	cmp	r0, #0
   2086c:	bne	20e9c <__assert_fail@plt+0xff24>
   20870:	ldr	r1, [r6]
   20874:	movw	r7, #28980	; 0x7134
   20878:	mov	sl, r4
   2087c:	mov	fp, #0
   20880:	cmp	r1, #1
   20884:	movt	r7, #3
   20888:	ble	2093c <__assert_fail@plt+0xf9c4>
   2088c:	str	r1, [sp, #28]
   20890:	bl	10e4c <clock@plt>
   20894:	ldr	r2, [r7, #24]
   20898:	movw	r3, #35594	; 0x8b0a
   2089c:	movt	r3, #2
   208a0:	ldr	r1, [sp, #28]
   208a4:	rsb	r0, r2, r0
   208a8:	cmp	r0, r3
   208ac:	bgt	208b8 <__assert_fail@plt+0xf940>
   208b0:	cmp	r1, #3
   208b4:	ble	2093c <__assert_fail@plt+0xf9c4>
   208b8:	bl	10e4c <clock@plt>
   208bc:	orrs	lr, r8, r9
   208c0:	movw	ip, #28940	; 0x710c
   208c4:	movt	ip, #3
   208c8:	movne	r3, #0
   208cc:	moveq	r3, #1
   208d0:	lsr	r2, r8, #20
   208d4:	ldr	r7, [ip]
   208d8:	orr	r2, r2, r9, lsl #12
   208dc:	str	r0, [r6, #24]
   208e0:	adds	r0, r8, r3
   208e4:	adc	r1, r9, #0
   208e8:	str	ip, [sp, #24]
   208ec:	str	r2, [sp, #28]
   208f0:	bl	23714 <__assert_fail@plt+0x1279c>
   208f4:	vmov	s10, r4
   208f8:	vldr	d7, [pc, #376]	; 20a78 <__assert_fail@plt+0xfb00>
   208fc:	ldr	r2, [sp, #28]
   20900:	vcvt.f64.u32	d6, s10
   20904:	mov	r3, r2
   20908:	movw	r2, #24908	; 0x614c
   2090c:	movt	r2, #2
   20910:	vmov	d5, r0, r1
   20914:	mov	r0, r7
   20918:	mov	r1, #1
   2091c:	vdiv.f64	d6, d6, d5
   20920:	vmul.f64	d7, d6, d7
   20924:	vstr	d7, [sp]
   20928:	bl	10eac <__fprintf_chk@plt>
   2092c:	ldr	r3, [r6]
   20930:	ldr	ip, [sp, #24]
   20934:	cmp	r3, #3
   20938:	bgt	20c54 <__assert_fail@plt+0xfcdc>
   2093c:	mov	r0, r5
   20940:	mov	r1, #1
   20944:	mov	r2, r4
   20948:	ldr	r3, [sp, #40]	; 0x28
   2094c:	bl	10dd4 <fwrite@plt>
   20950:	cmp	r4, r0
   20954:	bne	20fb0 <__assert_fail@plt+0x10038>
   20958:	ldr	r0, [sp, #36]	; 0x24
   2095c:	bl	10eb8 <fclose@plt>
   20960:	ldr	r0, [sp, #40]	; 0x28
   20964:	bl	10eb8 <fclose@plt>
   20968:	ldr	r0, [sp, #68]	; 0x44
   2096c:	ldr	r1, [pc, #268]	; 20a80 <__assert_fail@plt+0xfb08>
   20970:	bl	10d20 <strcmp@plt>
   20974:	cmp	r0, #0
   20978:	beq	20994 <__assert_fail@plt+0xfa1c>
   2097c:	movw	r1, #23912	; 0x5d68
   20980:	ldr	r0, [sp, #76]	; 0x4c
   20984:	movt	r1, #2
   20988:	bl	10d20 <strcmp@plt>
   2098c:	cmp	r0, #0
   20990:	bne	20c08 <__assert_fail@plt+0xfc90>
   20994:	ldr	r3, [r6, #28]
   20998:	movw	r4, #28980	; 0x7134
   2099c:	movt	r4, #3
   209a0:	cmp	r3, #0
   209a4:	bne	20b68 <__assert_fail@plt+0xfbf0>
   209a8:	ldr	r3, [r6]
   209ac:	movw	r4, #28980	; 0x7134
   209b0:	movt	r4, #3
   209b4:	cmp	r3, #1
   209b8:	ble	20a50 <__assert_fail@plt+0xfad8>
   209bc:	movw	r5, #28940	; 0x710c
   209c0:	movt	r5, #3
   209c4:	movw	r2, #17840	; 0x45b0
   209c8:	movw	r3, #18552	; 0x4878
   209cc:	ldr	r0, [r5]
   209d0:	movt	r3, #2
   209d4:	movt	r2, #2
   209d8:	mov	r1, #1
   209dc:	bl	10eac <__fprintf_chk@plt>
   209e0:	ldr	r3, [r4]
   209e4:	cmp	r3, #1
   209e8:	ble	20a50 <__assert_fail@plt+0xfad8>
   209ec:	mov	r0, sl
   209f0:	mov	r1, fp
   209f4:	strd	r8, [sp]
   209f8:	strd	sl, [sp, #8]
   209fc:	bl	23714 <__assert_fail@plt+0x1279c>
   20a00:	orrs	lr, r8, r9
   20a04:	ldr	r4, [r5]
   20a08:	vmov	d8, r0, r1
   20a0c:	movne	r0, #0
   20a10:	moveq	r0, #1
   20a14:	adds	r2, r8, r0
   20a18:	adc	r3, r9, #0
   20a1c:	mov	r0, r2
   20a20:	mov	r1, r3
   20a24:	bl	23714 <__assert_fail@plt+0x1279c>
   20a28:	vldr	d7, [pc, #72]	; 20a78 <__assert_fail@plt+0xfb00>
   20a2c:	movw	r2, #25160	; 0x6248
   20a30:	movt	r2, #2
   20a34:	vmov	d5, r0, r1
   20a38:	mov	r0, r4
   20a3c:	mov	r1, #1
   20a40:	vdiv.f64	d8, d8, d5
   20a44:	vmul.f64	d8, d8, d7
   20a48:	vstr	d8, [sp, #16]
   20a4c:	bl	10eac <__fprintf_chk@plt>
   20a50:	ldr	ip, [sp, #64]	; 0x40
   20a54:	ldr	r2, [sp, #244]	; 0xf4
   20a58:	ldr	r0, [sp, #72]	; 0x48
   20a5c:	ldr	r3, [ip]
   20a60:	cmp	r2, r3
   20a64:	bne	20d84 <__assert_fail@plt+0xfe0c>
   20a68:	add	sp, sp, #252	; 0xfc
   20a6c:	vpop	{d8-d9}
   20a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a74:	nop	{0}
   20a78:	andeq	r0, r0, r0
   20a7c:	subsmi	r0, r9, r0
   20a80:	andeq	r5, r2, ip, ror sp
   20a84:	andeq	r5, r2, r0, ror sp
   20a88:	mov	r2, sl
   20a8c:	mov	r3, fp
   20a90:	mov	sl, r8
   20a94:	mov	fp, r9
   20a98:	mov	r8, r2
   20a9c:	mov	r9, r3
   20aa0:	ldr	r0, [sp, #36]	; 0x24
   20aa4:	bl	10d5c <ferror@plt>
   20aa8:	subs	r3, r0, #0
   20aac:	bne	20f2c <__assert_fail@plt+0xffb4>
   20ab0:	ldr	r2, [sp, #44]	; 0x2c
   20ab4:	mov	r1, r5
   20ab8:	ldr	r0, [sp, #48]	; 0x30
   20abc:	bl	16820 <__assert_fail@plt+0x58a8>
   20ac0:	mov	r4, r0
   20ac4:	bl	160b0 <__assert_fail@plt+0x5138>
   20ac8:	cmp	r0, #0
   20acc:	bne	21034 <__assert_fail@plt+0x100bc>
   20ad0:	mov	r0, r5
   20ad4:	mov	r1, #1
   20ad8:	mov	r2, r4
   20adc:	ldr	r3, [sp, #40]	; 0x28
   20ae0:	bl	10dd4 <fwrite@plt>
   20ae4:	cmp	r4, r0
   20ae8:	bne	210c4 <__assert_fail@plt+0x1014c>
   20aec:	adds	sl, sl, r4
   20af0:	adc	fp, fp, #0
   20af4:	b	20958 <__assert_fail@plt+0xf9e0>
   20af8:	mov	ip, #1
   20afc:	str	ip, [sp, #72]	; 0x48
   20b00:	b	20a50 <__assert_fail@plt+0xfad8>
   20b04:	mov	r0, #3
   20b08:	ldr	r1, [sp, #68]	; 0x44
   20b0c:	add	r2, sp, #136	; 0x88
   20b10:	bl	10f30 <__xstat64@plt>
   20b14:	cmp	r0, #0
   20b18:	bne	20b2c <__assert_fail@plt+0xfbb4>
   20b1c:	ldr	r3, [sp, #152]	; 0x98
   20b20:	and	r3, r3, #61440	; 0xf000
   20b24:	cmp	r3, #32768	; 0x8000
   20b28:	beq	20c60 <__assert_fail@plt+0xfce8>
   20b2c:	mov	r2, #0
   20b30:	mov	r3, #0
   20b34:	strd	r2, [sp, #96]	; 0x60
   20b38:	ldr	r3, [r6]
   20b3c:	cmp	r3, #2
   20b40:	ble	20618 <__assert_fail@plt+0xf6a0>
   20b44:	movw	r3, #28940	; 0x710c
   20b48:	movt	r3, #3
   20b4c:	movw	r0, #24816	; 0x60f0
   20b50:	mov	r1, #1
   20b54:	ldr	r3, [r3]
   20b58:	mov	r2, #47	; 0x2f
   20b5c:	movt	r0, #2
   20b60:	bl	10dd4 <fwrite@plt>
   20b64:	b	20618 <__assert_fail@plt+0xf6a0>
   20b68:	ldr	r0, [sp, #68]	; 0x44
   20b6c:	bl	10f0c <remove@plt>
   20b70:	cmp	r0, #0
   20b74:	beq	209a8 <__assert_fail@plt+0xfa30>
   20b78:	ldr	r3, [r4]
   20b7c:	cmp	r3, #0
   20b80:	ble	20c00 <__assert_fail@plt+0xfc88>
   20b84:	movw	r5, #28940	; 0x710c
   20b88:	movt	r5, #3
   20b8c:	mov	r3, #40	; 0x28
   20b90:	movw	r2, #17788	; 0x457c
   20b94:	mov	r1, #1
   20b98:	ldr	r0, [r5]
   20b9c:	movt	r2, #2
   20ba0:	bl	10eac <__fprintf_chk@plt>
   20ba4:	ldr	r3, [r4]
   20ba8:	cmp	r3, #0
   20bac:	ble	20c00 <__assert_fail@plt+0xfc88>
   20bb0:	bl	10e7c <__errno_location@plt>
   20bb4:	ldr	r6, [r5]
   20bb8:	ldr	r0, [r0]
   20bbc:	bl	10e34 <strerror@plt>
   20bc0:	ldr	r3, [sp, #68]	; 0x44
   20bc4:	movw	r2, #25136	; 0x6230
   20bc8:	mov	r1, #1
   20bcc:	movt	r2, #2
   20bd0:	str	r0, [sp]
   20bd4:	mov	r0, r6
   20bd8:	bl	10eac <__fprintf_chk@plt>
   20bdc:	ldr	r3, [r4]
   20be0:	cmp	r3, #0
   20be4:	ble	20c00 <__assert_fail@plt+0xfc88>
   20be8:	movw	r0, #24180	; 0x5e74
   20bec:	ldr	r3, [r5]
   20bf0:	mov	r1, #1
   20bf4:	movt	r0, #2
   20bf8:	mov	r2, #2
   20bfc:	bl	10dd4 <fwrite@plt>
   20c00:	mov	r0, #40	; 0x28
   20c04:	bl	10e58 <exit@plt>
   20c08:	ldr	r0, [sp, #76]	; 0x4c
   20c0c:	ldr	r1, [pc, #-400]	; 20a84 <__assert_fail@plt+0xfb0c>
   20c10:	bl	10d20 <strcmp@plt>
   20c14:	cmp	r0, #0
   20c18:	beq	20994 <__assert_fail@plt+0xfa1c>
   20c1c:	ldr	r0, [sp, #68]	; 0x44
   20c20:	add	r1, sp, #136	; 0x88
   20c24:	bl	1f860 <__assert_fail@plt+0xe8e8>
   20c28:	cmp	r0, #0
   20c2c:	beq	20994 <__assert_fail@plt+0xfa1c>
   20c30:	ldr	r0, [sp, #76]	; 0x4c
   20c34:	add	r1, sp, #136	; 0x88
   20c38:	bl	1f8a0 <__assert_fail@plt+0xe928>
   20c3c:	b	20994 <__assert_fail@plt+0xfa1c>
   20c40:	ldr	r0, [sp, #36]	; 0x24
   20c44:	mov	ip, #1
   20c48:	str	ip, [sp, #72]	; 0x48
   20c4c:	bl	10eb8 <fclose@plt>
   20c50:	b	20a50 <__assert_fail@plt+0xfad8>
   20c54:	ldr	r0, [ip]
   20c58:	bl	10d2c <fflush@plt>
   20c5c:	b	2093c <__assert_fail@plt+0xf9c4>
   20c60:	ldrd	r2, [sp, #184]	; 0xb8
   20c64:	orrs	r1, r2, r3
   20c68:	strd	r2, [sp, #96]	; 0x60
   20c6c:	bne	20618 <__assert_fail@plt+0xf6a0>
   20c70:	b	20b38 <__assert_fail@plt+0xfbc0>
   20c74:	ldr	r3, [r6]
   20c78:	movw	r5, #28980	; 0x7134
   20c7c:	movt	r5, #3
   20c80:	cmp	r3, #0
   20c84:	ble	20cf0 <__assert_fail@plt+0xfd78>
   20c88:	movw	r4, #28940	; 0x710c
   20c8c:	movt	r4, #3
   20c90:	mov	r3, #36	; 0x24
   20c94:	movw	r2, #17788	; 0x457c
   20c98:	mov	r1, #1
   20c9c:	ldr	r0, [r4]
   20ca0:	movt	r2, #2
   20ca4:	bl	10eac <__fprintf_chk@plt>
   20ca8:	ldr	r3, [r5]
   20cac:	cmp	r3, #0
   20cb0:	ble	20cf0 <__assert_fail@plt+0xfd78>
   20cb4:	ldr	r3, [r4]
   20cb8:	movw	r0, #24940	; 0x616c
   20cbc:	mov	r1, #1
   20cc0:	movt	r0, #2
   20cc4:	mov	r2, #43	; 0x2b
   20cc8:	bl	10dd4 <fwrite@plt>
   20ccc:	ldr	r3, [r5]
   20cd0:	cmp	r3, #0
   20cd4:	ble	20cf0 <__assert_fail@plt+0xfd78>
   20cd8:	movw	r0, #24180	; 0x5e74
   20cdc:	ldr	r3, [r4]
   20ce0:	mov	r1, #1
   20ce4:	movt	r0, #2
   20ce8:	mov	r2, #2
   20cec:	bl	10dd4 <fwrite@plt>
   20cf0:	mov	r0, #36	; 0x24
   20cf4:	bl	10e58 <exit@plt>
   20cf8:	cmp	r3, #0
   20cfc:	movw	r6, #28980	; 0x7134
   20d00:	movt	r6, #3
   20d04:	ble	20d7c <__assert_fail@plt+0xfe04>
   20d08:	movw	r5, #28940	; 0x710c
   20d0c:	movt	r5, #3
   20d10:	mov	r3, #35	; 0x23
   20d14:	movw	r2, #17788	; 0x457c
   20d18:	mov	r1, #1
   20d1c:	ldr	r0, [r5]
   20d20:	movt	r2, #2
   20d24:	bl	10eac <__fprintf_chk@plt>
   20d28:	ldr	r3, [r6]
   20d2c:	cmp	r3, #0
   20d30:	ble	20d7c <__assert_fail@plt+0xfe04>
   20d34:	mov	r0, r4
   20d38:	ldr	r4, [r5]
   20d3c:	bl	160c0 <__assert_fail@plt+0x5148>
   20d40:	movw	r2, #24884	; 0x6134
   20d44:	mov	r1, #1
   20d48:	movt	r2, #2
   20d4c:	mov	r3, r0
   20d50:	mov	r0, r4
   20d54:	bl	10eac <__fprintf_chk@plt>
   20d58:	ldr	r3, [r6]
   20d5c:	cmp	r3, #0
   20d60:	ble	20d7c <__assert_fail@plt+0xfe04>
   20d64:	movw	r0, #24180	; 0x5e74
   20d68:	ldr	r3, [r5]
   20d6c:	mov	r1, #1
   20d70:	movt	r0, #2
   20d74:	mov	r2, #2
   20d78:	bl	10dd4 <fwrite@plt>
   20d7c:	mov	r0, #35	; 0x23
   20d80:	bl	10e58 <exit@plt>
   20d84:	bl	10db0 <__stack_chk_fail@plt>
   20d88:	ldr	r3, [r6]
   20d8c:	movw	r5, #28980	; 0x7134
   20d90:	movt	r5, #3
   20d94:	cmp	r3, #0
   20d98:	ble	20e04 <__assert_fail@plt+0xfe8c>
   20d9c:	movw	r4, #28940	; 0x710c
   20da0:	movt	r4, #3
   20da4:	mov	r3, #30
   20da8:	movw	r2, #17788	; 0x457c
   20dac:	mov	r1, sl
   20db0:	ldr	r0, [r4]
   20db4:	movt	r2, #2
   20db8:	bl	10eac <__fprintf_chk@plt>
   20dbc:	ldr	r3, [r5]
   20dc0:	cmp	r3, #0
   20dc4:	ble	20e04 <__assert_fail@plt+0xfe8c>
   20dc8:	ldr	r3, [sp, #68]	; 0x44
   20dcc:	movw	r2, #24864	; 0x6120
   20dd0:	ldr	r0, [r4]
   20dd4:	movt	r2, #2
   20dd8:	mov	r1, sl
   20ddc:	bl	10eac <__fprintf_chk@plt>
   20de0:	ldr	r3, [r5]
   20de4:	cmp	r3, #0
   20de8:	ble	20e04 <__assert_fail@plt+0xfe8c>
   20dec:	movw	r0, #24180	; 0x5e74
   20df0:	mov	r1, sl
   20df4:	ldr	r3, [r4]
   20df8:	mov	r2, #2
   20dfc:	movt	r0, #2
   20e00:	bl	10dd4 <fwrite@plt>
   20e04:	mov	r0, #30
   20e08:	bl	10e58 <exit@plt>
   20e0c:	ldr	r3, [r6]
   20e10:	movw	r6, #28980	; 0x7134
   20e14:	movt	r6, #3
   20e18:	cmp	r3, #0
   20e1c:	ble	20e94 <__assert_fail@plt+0xff1c>
   20e20:	movw	r5, #28940	; 0x710c
   20e24:	movt	r5, #3
   20e28:	mov	r3, #33	; 0x21
   20e2c:	movw	r2, #17788	; 0x457c
   20e30:	mov	r1, sl
   20e34:	ldr	r0, [r5]
   20e38:	movt	r2, #2
   20e3c:	bl	10eac <__fprintf_chk@plt>
   20e40:	ldr	r3, [r6]
   20e44:	cmp	r3, #0
   20e48:	ble	20e94 <__assert_fail@plt+0xff1c>
   20e4c:	mov	r0, fp
   20e50:	ldr	r4, [r5]
   20e54:	bl	160c0 <__assert_fail@plt+0x5148>
   20e58:	mov	r1, sl
   20e5c:	movw	r2, #24984	; 0x6198
   20e60:	movt	r2, #2
   20e64:	mov	r3, r0
   20e68:	mov	r0, r4
   20e6c:	bl	10eac <__fprintf_chk@plt>
   20e70:	ldr	r3, [r6]
   20e74:	cmp	r3, #0
   20e78:	ble	20e94 <__assert_fail@plt+0xff1c>
   20e7c:	movw	r0, #24180	; 0x5e74
   20e80:	mov	r1, sl
   20e84:	ldr	r3, [r5]
   20e88:	mov	r2, #2
   20e8c:	movt	r0, #2
   20e90:	bl	10dd4 <fwrite@plt>
   20e94:	mov	r0, #33	; 0x21
   20e98:	bl	10e58 <exit@plt>
   20e9c:	ldr	r3, [r6]
   20ea0:	movw	r6, #28980	; 0x7134
   20ea4:	movt	r6, #3
   20ea8:	cmp	r3, #0
   20eac:	ble	20f24 <__assert_fail@plt+0xffac>
   20eb0:	movw	r5, #28940	; 0x710c
   20eb4:	movt	r5, #3
   20eb8:	mov	r3, #31
   20ebc:	movw	r2, #17788	; 0x457c
   20ec0:	mov	r1, sl
   20ec4:	ldr	r0, [r5]
   20ec8:	movt	r2, #2
   20ecc:	bl	10eac <__fprintf_chk@plt>
   20ed0:	ldr	r3, [r6]
   20ed4:	cmp	r3, #0
   20ed8:	ble	20f24 <__assert_fail@plt+0xffac>
   20edc:	mov	r0, r4
   20ee0:	ldr	r4, [r5]
   20ee4:	bl	160c0 <__assert_fail@plt+0x5148>
   20ee8:	mov	r1, sl
   20eec:	movw	r2, #24884	; 0x6134
   20ef0:	movt	r2, #2
   20ef4:	mov	r3, r0
   20ef8:	mov	r0, r4
   20efc:	bl	10eac <__fprintf_chk@plt>
   20f00:	ldr	r3, [r6]
   20f04:	cmp	r3, #0
   20f08:	ble	20f24 <__assert_fail@plt+0xffac>
   20f0c:	movw	r0, #24180	; 0x5e74
   20f10:	mov	r1, sl
   20f14:	ldr	r3, [r5]
   20f18:	mov	r2, #2
   20f1c:	movt	r0, #2
   20f20:	bl	10dd4 <fwrite@plt>
   20f24:	mov	r0, #31
   20f28:	bl	10e58 <exit@plt>
   20f2c:	ldr	r3, [r6]
   20f30:	movw	r5, #28980	; 0x7134
   20f34:	movt	r5, #3
   20f38:	cmp	r3, #0
   20f3c:	ble	20fa8 <__assert_fail@plt+0x10030>
   20f40:	movw	r4, #28940	; 0x710c
   20f44:	movt	r4, #3
   20f48:	mov	r3, #37	; 0x25
   20f4c:	movw	r2, #17788	; 0x457c
   20f50:	mov	r1, #1
   20f54:	ldr	r0, [r4]
   20f58:	movt	r2, #2
   20f5c:	bl	10eac <__fprintf_chk@plt>
   20f60:	ldr	r3, [r5]
   20f64:	cmp	r3, #0
   20f68:	ble	20fa8 <__assert_fail@plt+0x10030>
   20f6c:	ldr	r3, [sp, #68]	; 0x44
   20f70:	movw	r2, #24864	; 0x6120
   20f74:	ldr	r0, [r4]
   20f78:	movt	r2, #2
   20f7c:	mov	r1, #1
   20f80:	bl	10eac <__fprintf_chk@plt>
   20f84:	ldr	r3, [r5]
   20f88:	cmp	r3, #0
   20f8c:	ble	20fa8 <__assert_fail@plt+0x10030>
   20f90:	movw	r0, #24180	; 0x5e74
   20f94:	ldr	r3, [r4]
   20f98:	mov	r1, #1
   20f9c:	movt	r0, #2
   20fa0:	mov	r2, #2
   20fa4:	bl	10dd4 <fwrite@plt>
   20fa8:	mov	r0, #37	; 0x25
   20fac:	bl	10e58 <exit@plt>
   20fb0:	ldr	r3, [r6]
   20fb4:	movw	r5, #28980	; 0x7134
   20fb8:	movt	r5, #3
   20fbc:	cmp	r3, #0
   20fc0:	ble	2102c <__assert_fail@plt+0x100b4>
   20fc4:	movw	r4, #28940	; 0x710c
   20fc8:	movt	r4, #3
   20fcc:	mov	r3, #32
   20fd0:	movw	r2, #17788	; 0x457c
   20fd4:	mov	r1, #1
   20fd8:	ldr	r0, [r4]
   20fdc:	movt	r2, #2
   20fe0:	bl	10eac <__fprintf_chk@plt>
   20fe4:	ldr	r3, [r5]
   20fe8:	cmp	r3, #0
   20fec:	ble	2102c <__assert_fail@plt+0x100b4>
   20ff0:	ldr	r3, [r4]
   20ff4:	movw	r0, #24940	; 0x616c
   20ff8:	mov	r1, #1
   20ffc:	movt	r0, #2
   21000:	mov	r2, #43	; 0x2b
   21004:	bl	10dd4 <fwrite@plt>
   21008:	ldr	r3, [r5]
   2100c:	cmp	r3, #0
   21010:	ble	2102c <__assert_fail@plt+0x100b4>
   21014:	movw	r0, #24180	; 0x5e74
   21018:	ldr	r3, [r4]
   2101c:	mov	r1, #1
   21020:	movt	r0, #2
   21024:	mov	r2, #2
   21028:	bl	10dd4 <fwrite@plt>
   2102c:	mov	r0, #32
   21030:	bl	10e58 <exit@plt>
   21034:	ldr	r3, [r6]
   21038:	movw	r6, #28980	; 0x7134
   2103c:	movt	r6, #3
   21040:	cmp	r3, #0
   21044:	ble	210bc <__assert_fail@plt+0x10144>
   21048:	movw	r5, #28940	; 0x710c
   2104c:	movt	r5, #3
   21050:	mov	r3, #38	; 0x26
   21054:	movw	r2, #17788	; 0x457c
   21058:	mov	r1, #1
   2105c:	ldr	r0, [r5]
   21060:	movt	r2, #2
   21064:	bl	10eac <__fprintf_chk@plt>
   21068:	ldr	r3, [r6]
   2106c:	cmp	r3, #0
   21070:	ble	210bc <__assert_fail@plt+0x10144>
   21074:	mov	r0, r4
   21078:	ldr	r4, [r5]
   2107c:	bl	160c0 <__assert_fail@plt+0x5148>
   21080:	movw	r2, #25056	; 0x61e0
   21084:	mov	r1, #1
   21088:	movt	r2, #2
   2108c:	mov	r3, r0
   21090:	mov	r0, r4
   21094:	bl	10eac <__fprintf_chk@plt>
   21098:	ldr	r3, [r6]
   2109c:	cmp	r3, #0
   210a0:	ble	210bc <__assert_fail@plt+0x10144>
   210a4:	movw	r0, #24180	; 0x5e74
   210a8:	ldr	r3, [r5]
   210ac:	mov	r1, #1
   210b0:	movt	r0, #2
   210b4:	mov	r2, #2
   210b8:	bl	10dd4 <fwrite@plt>
   210bc:	mov	r0, #38	; 0x26
   210c0:	bl	10e58 <exit@plt>
   210c4:	ldr	r3, [r6]
   210c8:	movw	r5, #28980	; 0x7134
   210cc:	movt	r5, #3
   210d0:	cmp	r3, #0
   210d4:	ble	21140 <__assert_fail@plt+0x101c8>
   210d8:	movw	r4, #28940	; 0x710c
   210dc:	movt	r4, #3
   210e0:	mov	r3, #39	; 0x27
   210e4:	movw	r2, #17788	; 0x457c
   210e8:	mov	r1, #1
   210ec:	ldr	r0, [r4]
   210f0:	movt	r2, #2
   210f4:	bl	10eac <__fprintf_chk@plt>
   210f8:	ldr	r3, [r5]
   210fc:	cmp	r3, #0
   21100:	ble	21140 <__assert_fail@plt+0x101c8>
   21104:	ldr	r3, [r4]
   21108:	movw	r0, #25092	; 0x6204
   2110c:	mov	r1, #1
   21110:	movt	r0, #2
   21114:	mov	r2, #40	; 0x28
   21118:	bl	10dd4 <fwrite@plt>
   2111c:	ldr	r3, [r5]
   21120:	cmp	r3, #0
   21124:	ble	21140 <__assert_fail@plt+0x101c8>
   21128:	movw	r0, #24180	; 0x5e74
   2112c:	ldr	r3, [r4]
   21130:	mov	r1, #1
   21134:	movt	r0, #2
   21138:	mov	r2, #2
   2113c:	bl	10dd4 <fwrite@plt>
   21140:	mov	r0, #39	; 0x27
   21144:	bl	10e58 <exit@plt>
   21148:	ldr	r3, [r6]
   2114c:	movw	r5, #28980	; 0x7134
   21150:	movt	r5, #3
   21154:	cmp	r3, #0
   21158:	ble	211c4 <__assert_fail@plt+0x1024c>
   2115c:	movw	r4, #28940	; 0x710c
   21160:	movt	r4, #3
   21164:	mov	r3, #34	; 0x22
   21168:	movw	r2, #17788	; 0x457c
   2116c:	mov	r1, sl
   21170:	ldr	r0, [r4]
   21174:	movt	r2, #2
   21178:	bl	10eac <__fprintf_chk@plt>
   2117c:	ldr	r3, [r5]
   21180:	cmp	r3, #0
   21184:	ble	211c4 <__assert_fail@plt+0x1024c>
   21188:	ldr	r3, [r4]
   2118c:	movw	r0, #25020	; 0x61bc
   21190:	mov	r1, sl
   21194:	movt	r0, #2
   21198:	mov	r2, #33	; 0x21
   2119c:	bl	10dd4 <fwrite@plt>
   211a0:	ldr	r3, [r5]
   211a4:	cmp	r3, #0
   211a8:	ble	211c4 <__assert_fail@plt+0x1024c>
   211ac:	movw	r0, #24180	; 0x5e74
   211b0:	mov	r1, sl
   211b4:	ldr	r3, [r4]
   211b8:	mov	r2, #2
   211bc:	movt	r0, #2
   211c0:	bl	10dd4 <fwrite@plt>
   211c4:	mov	r0, #34	; 0x22
   211c8:	bl	10e58 <exit@plt>
   211cc:	push	{r4, r5, r6, lr}
   211d0:	mov	r4, r1
   211d4:	mov	r5, r2
   211d8:	mov	r6, r3
   211dc:	bl	10d44 <free@plt>
   211e0:	mov	r0, r4
   211e4:	bl	10d44 <free@plt>
   211e8:	mov	r0, r6
   211ec:	bl	161bc <__assert_fail@plt+0x5244>
   211f0:	mov	r0, r5
   211f4:	bl	162e0 <__assert_fail@plt+0x5368>
   211f8:	mov	r4, r0
   211fc:	bl	160b0 <__assert_fail@plt+0x5138>
   21200:	cmp	r0, #0
   21204:	popeq	{r4, r5, r6, pc}
   21208:	movw	r6, #28980	; 0x7134
   2120c:	movt	r6, #3
   21210:	ldr	r3, [r6]
   21214:	cmp	r3, #0
   21218:	ble	21290 <__assert_fail@plt+0x10318>
   2121c:	movw	r5, #28940	; 0x710c
   21220:	movt	r5, #3
   21224:	mov	r3, #38	; 0x26
   21228:	movw	r2, #17788	; 0x457c
   2122c:	mov	r1, #1
   21230:	ldr	r0, [r5]
   21234:	movt	r2, #2
   21238:	bl	10eac <__fprintf_chk@plt>
   2123c:	ldr	r3, [r6]
   21240:	cmp	r3, #0
   21244:	ble	21290 <__assert_fail@plt+0x10318>
   21248:	mov	r0, r4
   2124c:	ldr	r4, [r5]
   21250:	bl	160c0 <__assert_fail@plt+0x5148>
   21254:	movw	r2, #25212	; 0x627c
   21258:	mov	r1, #1
   2125c:	movt	r2, #2
   21260:	mov	r3, r0
   21264:	mov	r0, r4
   21268:	bl	10eac <__fprintf_chk@plt>
   2126c:	ldr	r3, [r6]
   21270:	cmp	r3, #0
   21274:	ble	21290 <__assert_fail@plt+0x10318>
   21278:	movw	r0, #24180	; 0x5e74
   2127c:	ldr	r3, [r5]
   21280:	mov	r1, #1
   21284:	movt	r0, #2
   21288:	mov	r2, #2
   2128c:	bl	10dd4 <fwrite@plt>
   21290:	mov	r0, #38	; 0x26
   21294:	bl	10e58 <exit@plt>
   21298:	push	{r3, r4, r5, r6, r7, lr}
   2129c:	mov	r6, r0
   212a0:	mov	r0, r2
   212a4:	mov	r5, r1
   212a8:	mov	r4, r3
   212ac:	bl	16c84 <__assert_fail@plt+0x5d0c>
   212b0:	mov	r7, r0
   212b4:	bl	160b0 <__assert_fail@plt+0x5138>
   212b8:	cmp	r0, #0
   212bc:	bne	212dc <__assert_fail@plt+0x10364>
   212c0:	mov	r0, r6
   212c4:	bl	10d44 <free@plt>
   212c8:	mov	r0, r5
   212cc:	bl	10d44 <free@plt>
   212d0:	mov	r0, r4
   212d4:	pop	{r3, r4, r5, r6, r7, lr}
   212d8:	b	10d44 <free@plt>
   212dc:	movw	r5, #28980	; 0x7134
   212e0:	movt	r5, #3
   212e4:	ldr	r3, [r5]
   212e8:	cmp	r3, #0
   212ec:	ble	21364 <__assert_fail@plt+0x103ec>
   212f0:	movw	r4, #28940	; 0x710c
   212f4:	movt	r4, #3
   212f8:	mov	r3, #69	; 0x45
   212fc:	movw	r2, #17788	; 0x457c
   21300:	mov	r1, #1
   21304:	ldr	r0, [r4]
   21308:	movt	r2, #2
   2130c:	bl	10eac <__fprintf_chk@plt>
   21310:	ldr	r3, [r5]
   21314:	cmp	r3, #0
   21318:	ble	21364 <__assert_fail@plt+0x103ec>
   2131c:	mov	r0, r7
   21320:	ldr	r6, [r4]
   21324:	bl	160c0 <__assert_fail@plt+0x5148>
   21328:	movw	r2, #25212	; 0x627c
   2132c:	mov	r1, #1
   21330:	movt	r2, #2
   21334:	mov	r3, r0
   21338:	mov	r0, r6
   2133c:	bl	10eac <__fprintf_chk@plt>
   21340:	ldr	r3, [r5]
   21344:	cmp	r3, #0
   21348:	ble	21364 <__assert_fail@plt+0x103ec>
   2134c:	movw	r0, #24180	; 0x5e74
   21350:	ldr	r3, [r4]
   21354:	mov	r1, #1
   21358:	movt	r0, #2
   2135c:	mov	r2, #2
   21360:	bl	10dd4 <fwrite@plt>
   21364:	mov	r0, #69	; 0x45
   21368:	bl	10e58 <exit@plt>
   2136c:	sub	sp, sp, #16
   21370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21374:	sub	sp, sp, #116	; 0x74
   21378:	movw	r4, #28936	; 0x7108
   2137c:	movt	r4, #3
   21380:	ldr	r5, [sp, #184]	; 0xb8
   21384:	add	lr, sp, #148	; 0x94
   21388:	ldr	ip, [r4]
   2138c:	str	r4, [sp, #88]	; 0x58
   21390:	ldr	r4, [sp, #168]	; 0xa8
   21394:	stmib	lr, {r0, r1, r2, r3}
   21398:	mov	r0, r5
   2139c:	str	r5, [sp, #92]	; 0x5c
   213a0:	str	ip, [sp, #108]	; 0x6c
   213a4:	str	r4, [sp, #56]	; 0x38
   213a8:	bl	1f950 <__assert_fail@plt+0xe9d8>
   213ac:	cmp	r0, #0
   213b0:	str	r0, [sp, #64]	; 0x40
   213b4:	beq	21cc0 <__assert_fail@plt+0x10d48>
   213b8:	ldr	r4, [sp, #172]	; 0xac
   213bc:	movw	ip, #10832	; 0x2a50
   213c0:	ldr	r5, [sp, #156]	; 0x9c
   213c4:	movt	ip, #6221	; 0x184d
   213c8:	ldr	r9, [sp, #152]	; 0x98
   213cc:	movw	fp, #28980	; 0x7134
   213d0:	str	ip, [sp, #80]	; 0x50
   213d4:	movt	fp, #3
   213d8:	str	r4, [sp, #40]	; 0x28
   213dc:	ldr	ip, [sp, #176]	; 0xb0
   213e0:	ldr	r4, [sp, #180]	; 0xb4
   213e4:	ldr	r8, [sp, #160]	; 0xa0
   213e8:	ldr	r7, [sp, #164]	; 0xa4
   213ec:	str	r5, [sp, #68]	; 0x44
   213f0:	movw	r5, #28940	; 0x710c
   213f4:	str	r4, [sp, #36]	; 0x24
   213f8:	movt	r5, #3
   213fc:	mov	r4, #0
   21400:	str	r5, [sp, #60]	; 0x3c
   21404:	str	ip, [sp, #44]	; 0x2c
   21408:	mov	r5, #0
   2140c:	strd	r4, [sp, #72]	; 0x48
   21410:	movw	r5, #8708	; 0x2204
   21414:	movt	r5, #6221	; 0x184d
   21418:	str	r5, [sp, #84]	; 0x54
   2141c:	ldr	r3, [fp, #36]	; 0x24
   21420:	movw	r4, #28980	; 0x7134
   21424:	ldr	r2, [fp, #32]
   21428:	movt	r4, #3
   2142c:	cmp	r3, #0
   21430:	add	r2, r2, #1
   21434:	str	r2, [fp, #32]
   21438:	beq	2162c <__assert_fail@plt+0x106b4>
   2143c:	mov	r2, #0
   21440:	str	r2, [r4, #36]	; 0x24
   21444:	ldr	r4, [sp, #80]	; 0x50
   21448:	bic	r2, r3, #15
   2144c:	cmp	r2, r4
   21450:	beq	21740 <__assert_fail@plt+0x107c8>
   21454:	ldr	r5, [sp, #84]	; 0x54
   21458:	cmp	r3, r5
   2145c:	beq	21848 <__assert_fail@plt+0x108d0>
   21460:	cmp	r3, r4
   21464:	beq	21740 <__assert_fail@plt+0x107c8>
   21468:	movw	r2, #8450	; 0x2102
   2146c:	movt	r2, #6220	; 0x184c
   21470:	cmp	r3, r2
   21474:	bne	216f4 <__assert_fail@plt+0x1077c>
   21478:	ldr	r3, [fp]
   2147c:	cmp	r3, #3
   21480:	ble	214a0 <__assert_fail@plt+0x10528>
   21484:	ldr	ip, [sp, #60]	; 0x3c
   21488:	movw	r0, #25412	; 0x6344
   2148c:	mov	r1, #1
   21490:	movt	r0, #2
   21494:	mov	r2, #26
   21498:	ldr	r3, [ip]
   2149c:	bl	10dd4 <fwrite@plt>
   214a0:	mov	r0, #8388608	; 0x800000
   214a4:	bl	14260 <__assert_fail@plt+0x32e8>
   214a8:	bl	10e1c <malloc@plt>
   214ac:	mov	r4, r0
   214b0:	mov	r0, #8388608	; 0x800000
   214b4:	bl	10e1c <malloc@plt>
   214b8:	cmp	r4, #0
   214bc:	cmpne	r0, #0
   214c0:	mov	r5, r0
   214c4:	movne	r6, #0
   214c8:	moveq	r6, #1
   214cc:	beq	21f8c <__assert_fail@plt+0x11014>
   214d0:	mov	r2, #0
   214d4:	mov	r3, #0
   214d8:	movw	r7, #32912	; 0x8090
   214dc:	str	fp, [sp, #36]	; 0x24
   214e0:	strd	r2, [sp, #24]
   214e4:	movt	r7, #128	; 0x80
   214e8:	ldr	r9, [sp, #64]	; 0x40
   214ec:	mov	sl, r2
   214f0:	mov	fp, r3
   214f4:	b	2157c <__assert_fail@plt+0x10604>
   214f8:	cmp	r0, #4
   214fc:	bne	22220 <__assert_fail@plt+0x112a8>
   21500:	ldrb	ip, [r4, #3]
   21504:	ldrb	r3, [r4]
   21508:	ldrb	r2, [r4, #1]
   2150c:	add	ip, r3, ip, lsl #24
   21510:	ldrb	r3, [r4, #2]
   21514:	add	ip, ip, r2, lsl #8
   21518:	add	r8, ip, r3, lsl #16
   2151c:	cmp	r8, r7
   21520:	bhi	21b50 <__assert_fail@plt+0x10bd8>
   21524:	mov	r0, r4
   21528:	mov	r1, #1
   2152c:	mov	r2, r8
   21530:	mov	r3, r9
   21534:	bl	10df8 <fread@plt>
   21538:	cmp	r8, r0
   2153c:	bne	22198 <__assert_fail@plt+0x11220>
   21540:	mov	r2, r8
   21544:	mov	r0, r4
   21548:	mov	r1, r5
   2154c:	mov	r3, #8388608	; 0x800000
   21550:	bl	14e84 <__assert_fail@plt+0x3f0c>
   21554:	subs	ip, r0, #0
   21558:	blt	21ce8 <__assert_fail@plt+0x10d70>
   2155c:	mov	r3, r6
   21560:	adds	sl, sl, ip
   21564:	mov	r2, ip
   21568:	ldr	r0, [sp, #56]	; 0x38
   2156c:	mov	r1, r5
   21570:	adc	fp, fp, ip, asr #31
   21574:	bl	1f2f0 <__assert_fail@plt+0xe378>
   21578:	mov	r6, r0
   2157c:	mov	r0, r4
   21580:	mov	r1, #1
   21584:	mov	r2, #4
   21588:	mov	r3, r9
   2158c:	bl	10df8 <fread@plt>
   21590:	cmp	r0, #0
   21594:	bne	214f8 <__assert_fail@plt+0x10580>
   21598:	strd	sl, [sp, #24]
   2159c:	ldr	fp, [sp, #36]	; 0x24
   215a0:	ldr	r0, [sp, #64]	; 0x40
   215a4:	bl	10d5c <ferror@plt>
   215a8:	cmp	r0, #0
   215ac:	bne	21e00 <__assert_fail@plt+0x10e88>
   215b0:	cmp	r6, #0
   215b4:	beq	215c4 <__assert_fail@plt+0x1064c>
   215b8:	mov	r1, r6
   215bc:	ldr	r0, [sp, #56]	; 0x38
   215c0:	bl	201f8 <__assert_fail@plt+0xf280>
   215c4:	mov	r0, r4
   215c8:	bl	10d44 <free@plt>
   215cc:	mov	r0, r5
   215d0:	bl	10d44 <free@plt>
   215d4:	ldrd	r0, [sp, #24]
   215d8:	mvn	r2, #0
   215dc:	mvn	r3, #0
   215e0:	cmp	r1, r3
   215e4:	cmpeq	r0, r2
   215e8:	beq	2164c <__assert_fail@plt+0x106d4>
   215ec:	ldr	ip, [sp, #156]	; 0x9c
   215f0:	ldr	r4, [sp, #172]	; 0xac
   215f4:	ldr	r5, [sp, #176]	; 0xb0
   215f8:	str	ip, [sp, #68]	; 0x44
   215fc:	ldr	r9, [sp, #152]	; 0x98
   21600:	ldr	ip, [sp, #180]	; 0xb4
   21604:	ldr	r8, [sp, #160]	; 0xa0
   21608:	ldr	r7, [sp, #164]	; 0xa4
   2160c:	str	r4, [sp, #40]	; 0x28
   21610:	str	r5, [sp, #44]	; 0x2c
   21614:	str	ip, [sp, #36]	; 0x24
   21618:	ldrd	r4, [sp, #72]	; 0x48
   2161c:	adds	r4, r4, r0
   21620:	adc	r5, r5, r1
   21624:	strd	r4, [sp, #72]	; 0x48
   21628:	b	2141c <__assert_fail@plt+0x104a4>
   2162c:	add	r0, sp, #104	; 0x68
   21630:	mov	r1, #1
   21634:	mov	r2, #4
   21638:	ldr	r3, [sp, #64]	; 0x40
   2163c:	bl	10df8 <fread@plt>
   21640:	cmp	r0, #0
   21644:	bne	21b28 <__assert_fail@plt+0x10bb0>
   21648:	str	r0, [r4, #32]
   2164c:	ldr	r0, [sp, #64]	; 0x40
   21650:	movw	r5, #28980	; 0x7134
   21654:	bl	10eb8 <fclose@plt>
   21658:	ldr	r3, [fp, #28]
   2165c:	movt	r5, #3
   21660:	cmp	r3, #0
   21664:	bne	21b90 <__assert_fail@plt+0x10c18>
   21668:	ldr	r3, [fp]
   2166c:	movw	r5, #28980	; 0x7134
   21670:	movt	r5, #3
   21674:	cmp	r3, #1
   21678:	ble	216cc <__assert_fail@plt+0x10754>
   2167c:	movw	r4, #28940	; 0x710c
   21680:	movt	r4, #3
   21684:	movw	r2, #17840	; 0x45b0
   21688:	movw	r3, #18552	; 0x4878
   2168c:	ldr	r0, [r4]
   21690:	movt	r3, #2
   21694:	movt	r2, #2
   21698:	mov	r1, #1
   2169c:	bl	10eac <__fprintf_chk@plt>
   216a0:	ldr	r3, [r5]
   216a4:	cmp	r3, #1
   216a8:	ble	216cc <__assert_fail@plt+0x10754>
   216ac:	ldr	r0, [r4]
   216b0:	movw	r2, #25824	; 0x64e0
   216b4:	ldrd	r4, [sp, #72]	; 0x48
   216b8:	mov	r1, #1
   216bc:	ldr	r3, [sp, #92]	; 0x5c
   216c0:	movt	r2, #2
   216c4:	strd	r4, [sp]
   216c8:	bl	10eac <__fprintf_chk@plt>
   216cc:	mov	r0, #0
   216d0:	ldr	r5, [sp, #88]	; 0x58
   216d4:	ldr	r2, [sp, #108]	; 0x6c
   216d8:	ldr	r3, [r5]
   216dc:	cmp	r2, r3
   216e0:	bne	2208c <__assert_fail@plt+0x11114>
   216e4:	add	sp, sp, #116	; 0x74
   216e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216ec:	add	sp, sp, #16
   216f0:	bx	lr
   216f4:	ldr	r3, [fp, #32]
   216f8:	movw	r4, #28980	; 0x7134
   216fc:	movt	r4, #3
   21700:	cmp	r3, #1
   21704:	bne	21aa0 <__assert_fail@plt+0x10b28>
   21708:	ldr	ip, [r4, #40]	; 0x28
   2170c:	cmp	ip, #0
   21710:	bne	21f08 <__assert_fail@plt+0x10f90>
   21714:	movw	r3, #28916	; 0x70f4
   21718:	movt	r3, #3
   2171c:	ldr	r3, [r3, #4]
   21720:	cmp	r3, #0
   21724:	beq	21f08 <__assert_fail@plt+0x10f90>
   21728:	ldr	r0, [sp, #64]	; 0x40
   2172c:	add	r2, sp, #104	; 0x68
   21730:	ldr	r1, [sp, #56]	; 0x38
   21734:	str	ip, [r4, #32]
   21738:	bl	20344 <__assert_fail@plt+0xf3cc>
   2173c:	b	215d8 <__assert_fail@plt+0x10660>
   21740:	ldr	r3, [fp]
   21744:	cmp	r3, #3
   21748:	bgt	21b60 <__assert_fail@plt+0x10be8>
   2174c:	add	r0, sp, #104	; 0x68
   21750:	mov	r1, #1
   21754:	mov	r2, #4
   21758:	ldr	r3, [sp, #64]	; 0x40
   2175c:	bl	10df8 <fread@plt>
   21760:	cmp	r0, #4
   21764:	bne	22114 <__assert_fail@plt+0x1119c>
   21768:	ldrb	r1, [sp, #107]	; 0x6b
   2176c:	ldrb	r3, [sp, #104]	; 0x68
   21770:	ldrb	r2, [sp, #105]	; 0x69
   21774:	add	r3, r3, r1, lsl #24
   21778:	ldrb	r5, [sp, #106]	; 0x6a
   2177c:	add	r3, r3, r2, lsl #8
   21780:	adds	r5, r3, r5, lsl #16
   21784:	beq	21a94 <__assert_fail@plt+0x10b1c>
   21788:	mov	r4, #1
   2178c:	ldr	sl, [sp, #64]	; 0x40
   21790:	b	2179c <__assert_fail@plt+0x10824>
   21794:	subs	r5, r5, r6
   21798:	beq	21a94 <__assert_fail@plt+0x10b1c>
   2179c:	cmp	r5, #1073741824	; 0x40000000
   217a0:	movcc	r6, r5
   217a4:	movcs	r6, #1073741824	; 0x40000000
   217a8:	str	r4, [sp]
   217ac:	mov	r0, sl
   217b0:	mov	r3, #0
   217b4:	mov	r2, r6
   217b8:	bl	10ec4 <fseeko64@plt>
   217bc:	cmp	r0, #0
   217c0:	beq	21794 <__assert_fail@plt+0x1081c>
   217c4:	ldr	r3, [fp]
   217c8:	movw	r5, #28980	; 0x7134
   217cc:	movt	r5, #3
   217d0:	cmp	r3, #0
   217d4:	ble	21840 <__assert_fail@plt+0x108c8>
   217d8:	movw	r4, #28940	; 0x710c
   217dc:	movt	r4, #3
   217e0:	mov	r3, #43	; 0x2b
   217e4:	movw	r2, #17788	; 0x457c
   217e8:	mov	r1, #1
   217ec:	ldr	r0, [r4]
   217f0:	movt	r2, #2
   217f4:	bl	10eac <__fprintf_chk@plt>
   217f8:	ldr	r3, [r5]
   217fc:	cmp	r3, #0
   21800:	ble	21840 <__assert_fail@plt+0x108c8>
   21804:	ldr	r3, [r4]
   21808:	movw	r0, #25676	; 0x644c
   2180c:	mov	r1, #1
   21810:	movt	r0, #2
   21814:	mov	r2, #41	; 0x29
   21818:	bl	10dd4 <fwrite@plt>
   2181c:	ldr	r3, [r5]
   21820:	cmp	r3, #0
   21824:	ble	21840 <__assert_fail@plt+0x108c8>
   21828:	movw	r0, #24180	; 0x5e74
   2182c:	ldr	r3, [r4]
   21830:	mov	r1, #1
   21834:	movt	r0, #2
   21838:	mov	r2, #2
   2183c:	bl	10dd4 <fwrite@plt>
   21840:	mov	r0, #43	; 0x2b
   21844:	bl	10e58 <exit@plt>
   21848:	ldr	r4, [sp, #44]	; 0x2c
   2184c:	add	r5, sp, #112	; 0x70
   21850:	mov	ip, #4
   21854:	mov	r3, #0
   21858:	strb	ip, [r9]
   2185c:	mov	r1, #34	; 0x22
   21860:	str	r3, [r5, #-12]!
   21864:	mov	r2, #77	; 0x4d
   21868:	strb	r1, [r9, #1]
   2186c:	mov	r1, #24
   21870:	strb	r2, [r9, #2]
   21874:	add	lr, sp, #96	; 0x60
   21878:	strb	r1, [r9, #3]
   2187c:	mov	r2, r5
   21880:	str	r4, [sp, #4]
   21884:	mov	r1, r8
   21888:	ldr	r4, [sp, #36]	; 0x24
   2188c:	str	r3, [sp, #12]
   21890:	mov	r3, r9
   21894:	str	lr, [sp]
   21898:	ldr	r0, [sp, #40]	; 0x28
   2189c:	str	r4, [sp, #8]
   218a0:	str	ip, [sp, #96]	; 0x60
   218a4:	bl	179f8 <__assert_fail@plt+0x6a80>
   218a8:	mov	sl, r0
   218ac:	bl	160b0 <__assert_fail@plt+0x5138>
   218b0:	cmp	r0, #0
   218b4:	bne	21d70 <__assert_fail@plt+0x10df8>
   218b8:	cmp	sl, #0
   218bc:	beq	21cc8 <__assert_fail@plt+0x10d50>
   218c0:	str	r0, [sp, #48]	; 0x30
   218c4:	movw	r4, #35594	; 0x8b0a
   218c8:	mov	r0, #0
   218cc:	mov	r1, #0
   218d0:	movt	r4, #2
   218d4:	strd	r0, [sp, #24]
   218d8:	str	r4, [sp, #52]	; 0x34
   218dc:	ldr	r4, [sp, #68]	; 0x44
   218e0:	mov	r0, r9
   218e4:	mov	r1, #1
   218e8:	ldr	r3, [sp, #64]	; 0x40
   218ec:	cmp	sl, r4
   218f0:	movcs	sl, r4
   218f4:	str	r7, [sp, #96]	; 0x60
   218f8:	mov	r2, sl
   218fc:	bl	10df8 <fread@plt>
   21900:	subs	r4, r0, #0
   21904:	beq	21a50 <__assert_fail@plt+0x10ad8>
   21908:	mov	r6, #0
   2190c:	b	219a0 <__assert_fail@plt+0x10a28>
   21910:	ldrd	r0, [sp, #24]
   21914:	ldr	r3, [fp]
   21918:	adds	r0, r0, r2
   2191c:	adc	r1, r1, #0
   21920:	cmp	r3, #1
   21924:	strd	r0, [sp, #24]
   21928:	ble	21998 <__assert_fail@plt+0x10a20>
   2192c:	str	r3, [sp, #20]
   21930:	bl	10e4c <clock@plt>
   21934:	movw	r1, #28980	; 0x7134
   21938:	movt	r1, #3
   2193c:	ldr	ip, [sp, #52]	; 0x34
   21940:	ldr	r2, [r1, #24]
   21944:	ldr	r3, [sp, #20]
   21948:	rsb	r0, r2, r0
   2194c:	cmp	r0, ip
   21950:	bgt	2195c <__assert_fail@plt+0x109e4>
   21954:	cmp	r3, #3
   21958:	ble	21998 <__assert_fail@plt+0x10a20>
   2195c:	bl	10e4c <clock@plt>
   21960:	ldr	lr, [sp, #24]
   21964:	ldr	r1, [sp, #28]
   21968:	movw	r2, #25356	; 0x630c
   2196c:	ldr	ip, [sp, #60]	; 0x3c
   21970:	movt	r2, #2
   21974:	lsr	r3, lr, #20
   21978:	orr	r3, r3, r1, lsl #12
   2197c:	mov	r1, #1
   21980:	str	r0, [fp, #24]
   21984:	ldr	r0, [ip]
   21988:	bl	10eac <__fprintf_chk@plt>
   2198c:	ldr	r3, [fp]
   21990:	cmp	r3, #3
   21994:	bgt	21a3c <__assert_fail@plt+0x10ac4>
   21998:	cmp	sl, #0
   2199c:	beq	21a50 <__assert_fail@plt+0x10ad8>
   219a0:	cmp	r4, r6
   219a4:	bhi	219b4 <__assert_fail@plt+0x10a3c>
   219a8:	ldr	r3, [sp, #96]	; 0x60
   219ac:	cmp	r3, r7
   219b0:	bne	21a88 <__assert_fail@plt+0x10b10>
   219b4:	ldr	ip, [sp, #44]	; 0x2c
   219b8:	mov	r1, r8
   219bc:	add	r2, sp, #96	; 0x60
   219c0:	mov	lr, #0
   219c4:	add	r3, r9, r6
   219c8:	str	lr, [sp, #12]
   219cc:	str	ip, [sp, #4]
   219d0:	rsb	lr, r6, r4
   219d4:	ldr	ip, [sp, #36]	; 0x24
   219d8:	str	r5, [sp]
   219dc:	ldr	r0, [sp, #40]	; 0x28
   219e0:	str	ip, [sp, #8]
   219e4:	str	lr, [sp, #100]	; 0x64
   219e8:	str	r7, [sp, #96]	; 0x60
   219ec:	bl	179f8 <__assert_fail@plt+0x6a80>
   219f0:	mov	sl, r0
   219f4:	bl	160b0 <__assert_fail@plt+0x5138>
   219f8:	cmp	r0, #0
   219fc:	bne	21c30 <__assert_fail@plt+0x10cb8>
   21a00:	ldr	r2, [sp, #96]	; 0x60
   21a04:	ldr	r3, [sp, #100]	; 0x64
   21a08:	cmp	r2, #0
   21a0c:	add	r6, r6, r3
   21a10:	beq	21998 <__assert_fail@plt+0x10a20>
   21a14:	ldr	r3, [fp, #40]	; 0x28
   21a18:	cmp	r3, #0
   21a1c:	bne	21910 <__assert_fail@plt+0x10998>
   21a20:	ldr	r3, [sp, #48]	; 0x30
   21a24:	mov	r1, r8
   21a28:	ldr	r0, [sp, #56]	; 0x38
   21a2c:	bl	1f2f0 <__assert_fail@plt+0xe378>
   21a30:	ldr	r2, [sp, #96]	; 0x60
   21a34:	str	r0, [sp, #48]	; 0x30
   21a38:	b	21910 <__assert_fail@plt+0x10998>
   21a3c:	ldr	ip, [sp, #60]	; 0x3c
   21a40:	ldr	r0, [ip]
   21a44:	bl	10d2c <fflush@plt>
   21a48:	cmp	sl, #0
   21a4c:	bne	219a0 <__assert_fail@plt+0x10a28>
   21a50:	ldr	r0, [sp, #64]	; 0x40
   21a54:	bl	10d5c <ferror@plt>
   21a58:	cmp	r0, #0
   21a5c:	bne	21e84 <__assert_fail@plt+0x10f0c>
   21a60:	ldr	r3, [fp, #40]	; 0x28
   21a64:	cmp	r3, #0
   21a68:	bne	21a78 <__assert_fail@plt+0x10b00>
   21a6c:	ldr	r5, [sp, #48]	; 0x30
   21a70:	cmp	r5, #0
   21a74:	bne	21b80 <__assert_fail@plt+0x10c08>
   21a78:	cmp	sl, #0
   21a7c:	bne	22090 <__assert_fail@plt+0x11118>
   21a80:	ldrd	r0, [sp, #24]
   21a84:	b	215d8 <__assert_fail@plt+0x10660>
   21a88:	cmp	sl, #0
   21a8c:	bne	218dc <__assert_fail@plt+0x10964>
   21a90:	b	21a50 <__assert_fail@plt+0x10ad8>
   21a94:	mov	r0, #0
   21a98:	mov	r1, #0
   21a9c:	b	21618 <__assert_fail@plt+0x106a0>
   21aa0:	ldr	r0, [sp, #64]	; 0x40
   21aa4:	bl	10d98 <ftell@plt>
   21aa8:	ldr	r3, [r4]
   21aac:	cmp	r3, #1
   21ab0:	mov	r6, r0
   21ab4:	ble	21cdc <__assert_fail@plt+0x10d64>
   21ab8:	movw	r5, #28940	; 0x710c
   21abc:	movt	r5, #3
   21ac0:	movw	r0, #25768	; 0x64a8
   21ac4:	mov	r1, #1
   21ac8:	ldr	r3, [r5]
   21acc:	movt	r0, #2
   21ad0:	mov	r2, #36	; 0x24
   21ad4:	bl	10dd4 <fwrite@plt>
   21ad8:	cmn	r6, #1
   21adc:	ldr	r3, [r4]
   21ae0:	beq	21b08 <__assert_fail@plt+0x10b90>
   21ae4:	cmp	r3, #1
   21ae8:	ble	2164c <__assert_fail@plt+0x106d4>
   21aec:	mov	r3, r6
   21af0:	ldr	r0, [r5]
   21af4:	movw	r2, #25808	; 0x64d0
   21af8:	mov	r1, #1
   21afc:	movt	r2, #2
   21b00:	bl	10eac <__fprintf_chk@plt>
   21b04:	ldr	r3, [r4]
   21b08:	cmp	r3, #1
   21b0c:	ble	2164c <__assert_fail@plt+0x106d4>
   21b10:	movw	r3, #28940	; 0x710c
   21b14:	movt	r3, #3
   21b18:	mov	r0, #10
   21b1c:	ldr	r1, [r3]
   21b20:	bl	10ef4 <fputc@plt>
   21b24:	b	2164c <__assert_fail@plt+0x106d4>
   21b28:	cmp	r0, #4
   21b2c:	bne	22010 <__assert_fail@plt+0x11098>
   21b30:	ldrb	r2, [sp, #107]	; 0x6b
   21b34:	ldrb	r3, [sp, #104]	; 0x68
   21b38:	ldrb	r1, [sp, #105]	; 0x69
   21b3c:	add	r3, r3, r2, lsl #24
   21b40:	ldrb	r2, [sp, #106]	; 0x6a
   21b44:	add	r3, r3, r1, lsl #8
   21b48:	add	r3, r3, r2, lsl #16
   21b4c:	b	21444 <__assert_fail@plt+0x104cc>
   21b50:	strd	sl, [sp, #24]
   21b54:	ldr	fp, [sp, #36]	; 0x24
   21b58:	str	r8, [fp, #36]	; 0x24
   21b5c:	b	215a0 <__assert_fail@plt+0x10628>
   21b60:	ldr	r4, [sp, #60]	; 0x3c
   21b64:	movw	r0, #25596	; 0x63fc
   21b68:	mov	r1, #1
   21b6c:	mov	r2, #34	; 0x22
   21b70:	movt	r0, #2
   21b74:	ldr	r3, [r4]
   21b78:	bl	10dd4 <fwrite@plt>
   21b7c:	b	2174c <__assert_fail@plt+0x107d4>
   21b80:	mov	r1, r5
   21b84:	ldr	r0, [sp, #56]	; 0x38
   21b88:	bl	201f8 <__assert_fail@plt+0xf280>
   21b8c:	b	21a78 <__assert_fail@plt+0x10b00>
   21b90:	ldr	r0, [sp, #92]	; 0x5c
   21b94:	bl	10f0c <remove@plt>
   21b98:	cmp	r0, #0
   21b9c:	beq	21668 <__assert_fail@plt+0x106f0>
   21ba0:	ldr	r3, [r5]
   21ba4:	cmp	r3, #0
   21ba8:	ble	21c28 <__assert_fail@plt+0x10cb0>
   21bac:	movw	r4, #28940	; 0x710c
   21bb0:	movt	r4, #3
   21bb4:	mov	r3, #45	; 0x2d
   21bb8:	movw	r2, #17788	; 0x457c
   21bbc:	mov	r1, #1
   21bc0:	ldr	r0, [r4]
   21bc4:	movt	r2, #2
   21bc8:	bl	10eac <__fprintf_chk@plt>
   21bcc:	ldr	r3, [r5]
   21bd0:	cmp	r3, #0
   21bd4:	ble	21c28 <__assert_fail@plt+0x10cb0>
   21bd8:	bl	10e7c <__errno_location@plt>
   21bdc:	ldr	r6, [r4]
   21be0:	ldr	r0, [r0]
   21be4:	bl	10e34 <strerror@plt>
   21be8:	ldr	r3, [sp, #92]	; 0x5c
   21bec:	movw	r2, #25136	; 0x6230
   21bf0:	mov	r1, #1
   21bf4:	movt	r2, #2
   21bf8:	str	r0, [sp]
   21bfc:	mov	r0, r6
   21c00:	bl	10eac <__fprintf_chk@plt>
   21c04:	ldr	r3, [r5]
   21c08:	cmp	r3, #0
   21c0c:	ble	21c28 <__assert_fail@plt+0x10cb0>
   21c10:	movw	r0, #24180	; 0x5e74
   21c14:	ldr	r3, [r4]
   21c18:	mov	r1, #1
   21c1c:	movt	r0, #2
   21c20:	mov	r2, #2
   21c24:	bl	10dd4 <fwrite@plt>
   21c28:	mov	r0, #45	; 0x2d
   21c2c:	bl	10e58 <exit@plt>
   21c30:	ldr	r3, [fp]
   21c34:	movw	r5, #28980	; 0x7134
   21c38:	movt	r5, #3
   21c3c:	cmp	r3, #0
   21c40:	ble	21cb8 <__assert_fail@plt+0x10d40>
   21c44:	movw	r4, #28940	; 0x710c
   21c48:	movt	r4, #3
   21c4c:	mov	r3, #66	; 0x42
   21c50:	movw	r2, #17788	; 0x457c
   21c54:	mov	r1, #1
   21c58:	ldr	r0, [r4]
   21c5c:	movt	r2, #2
   21c60:	bl	10eac <__fprintf_chk@plt>
   21c64:	ldr	r3, [r5]
   21c68:	cmp	r3, #0
   21c6c:	ble	21cb8 <__assert_fail@plt+0x10d40>
   21c70:	mov	r0, sl
   21c74:	ldr	r6, [r4]
   21c78:	bl	160c0 <__assert_fail@plt+0x5148>
   21c7c:	movw	r2, #25328	; 0x62f0
   21c80:	mov	r1, #1
   21c84:	movt	r2, #2
   21c88:	mov	r3, r0
   21c8c:	mov	r0, r6
   21c90:	bl	10eac <__fprintf_chk@plt>
   21c94:	ldr	r3, [r5]
   21c98:	cmp	r3, #0
   21c9c:	ble	21cb8 <__assert_fail@plt+0x10d40>
   21ca0:	movw	r0, #24180	; 0x5e74
   21ca4:	ldr	r3, [r4]
   21ca8:	mov	r1, #1
   21cac:	movt	r0, #2
   21cb0:	mov	r2, #2
   21cb4:	bl	10dd4 <fwrite@plt>
   21cb8:	mov	r0, #66	; 0x42
   21cbc:	bl	10e58 <exit@plt>
   21cc0:	mov	r0, #1
   21cc4:	b	216d0 <__assert_fail@plt+0x10758>
   21cc8:	mov	r4, #0
   21ccc:	mov	r5, #0
   21cd0:	str	sl, [sp, #48]	; 0x30
   21cd4:	strd	r4, [sp, #24]
   21cd8:	b	21a50 <__assert_fail@plt+0x10ad8>
   21cdc:	cmn	r0, #1
   21ce0:	bne	2164c <__assert_fail@plt+0x106d4>
   21ce4:	b	21b08 <__assert_fail@plt+0x10b90>
   21ce8:	ldr	fp, [sp, #36]	; 0x24
   21cec:	movw	r5, #28980	; 0x7134
   21cf0:	movt	r5, #3
   21cf4:	ldr	r3, [fp]
   21cf8:	cmp	r3, #0
   21cfc:	ble	21d68 <__assert_fail@plt+0x10df0>
   21d00:	movw	r4, #28940	; 0x710c
   21d04:	movt	r4, #3
   21d08:	mov	r3, #53	; 0x35
   21d0c:	movw	r2, #17788	; 0x457c
   21d10:	mov	r1, #1
   21d14:	ldr	r0, [r4]
   21d18:	movt	r2, #2
   21d1c:	bl	10eac <__fprintf_chk@plt>
   21d20:	ldr	r3, [r5]
   21d24:	cmp	r3, #0
   21d28:	ble	21d68 <__assert_fail@plt+0x10df0>
   21d2c:	ldr	r3, [r4]
   21d30:	movw	r0, #25528	; 0x63b8
   21d34:	mov	r1, #1
   21d38:	movt	r0, #2
   21d3c:	mov	r2, #44	; 0x2c
   21d40:	bl	10dd4 <fwrite@plt>
   21d44:	ldr	r3, [r5]
   21d48:	cmp	r3, #0
   21d4c:	ble	21d68 <__assert_fail@plt+0x10df0>
   21d50:	movw	r0, #24180	; 0x5e74
   21d54:	ldr	r3, [r4]
   21d58:	mov	r1, #1
   21d5c:	movt	r0, #2
   21d60:	mov	r2, #2
   21d64:	bl	10dd4 <fwrite@plt>
   21d68:	mov	r0, #53	; 0x35
   21d6c:	bl	10e58 <exit@plt>
   21d70:	ldr	r3, [fp]
   21d74:	movw	r5, #28980	; 0x7134
   21d78:	movt	r5, #3
   21d7c:	cmp	r3, #0
   21d80:	ble	21df8 <__assert_fail@plt+0x10e80>
   21d84:	movw	r4, #28940	; 0x710c
   21d88:	movt	r4, #3
   21d8c:	mov	r3, #62	; 0x3e
   21d90:	movw	r2, #17788	; 0x457c
   21d94:	mov	r1, #1
   21d98:	ldr	r0, [r4]
   21d9c:	movt	r2, #2
   21da0:	bl	10eac <__fprintf_chk@plt>
   21da4:	ldr	r3, [r5]
   21da8:	cmp	r3, #0
   21dac:	ble	21df8 <__assert_fail@plt+0x10e80>
   21db0:	mov	r0, sl
   21db4:	ldr	r6, [r4]
   21db8:	bl	160c0 <__assert_fail@plt+0x5148>
   21dbc:	movw	r2, #25308	; 0x62dc
   21dc0:	mov	r1, #1
   21dc4:	movt	r2, #2
   21dc8:	mov	r3, r0
   21dcc:	mov	r0, r6
   21dd0:	bl	10eac <__fprintf_chk@plt>
   21dd4:	ldr	r3, [r5]
   21dd8:	cmp	r3, #0
   21ddc:	ble	21df8 <__assert_fail@plt+0x10e80>
   21de0:	movw	r0, #24180	; 0x5e74
   21de4:	ldr	r3, [r4]
   21de8:	mov	r1, #1
   21dec:	movt	r0, #2
   21df0:	mov	r2, #2
   21df4:	bl	10dd4 <fwrite@plt>
   21df8:	mov	r0, #62	; 0x3e
   21dfc:	bl	10e58 <exit@plt>
   21e00:	ldr	r3, [fp]
   21e04:	movw	r5, #28980	; 0x7134
   21e08:	movt	r5, #3
   21e0c:	cmp	r3, #0
   21e10:	ble	21e7c <__assert_fail@plt+0x10f04>
   21e14:	movw	r4, #28940	; 0x710c
   21e18:	movt	r4, #3
   21e1c:	mov	r3, #54	; 0x36
   21e20:	movw	r2, #17788	; 0x457c
   21e24:	mov	r1, #1
   21e28:	ldr	r0, [r4]
   21e2c:	movt	r2, #2
   21e30:	bl	10eac <__fprintf_chk@plt>
   21e34:	ldr	r3, [r5]
   21e38:	cmp	r3, #0
   21e3c:	ble	21e7c <__assert_fail@plt+0x10f04>
   21e40:	ldr	r3, [r4]
   21e44:	movw	r0, #25576	; 0x63e8
   21e48:	mov	r1, #1
   21e4c:	movt	r0, #2
   21e50:	mov	r2, #19
   21e54:	bl	10dd4 <fwrite@plt>
   21e58:	ldr	r3, [r5]
   21e5c:	cmp	r3, #0
   21e60:	ble	21e7c <__assert_fail@plt+0x10f04>
   21e64:	movw	r0, #24180	; 0x5e74
   21e68:	ldr	r3, [r4]
   21e6c:	mov	r1, #1
   21e70:	movt	r0, #2
   21e74:	mov	r2, #2
   21e78:	bl	10dd4 <fwrite@plt>
   21e7c:	mov	r0, #54	; 0x36
   21e80:	bl	10e58 <exit@plt>
   21e84:	ldr	r3, [fp]
   21e88:	movw	r5, #28980	; 0x7134
   21e8c:	movt	r5, #3
   21e90:	cmp	r3, #0
   21e94:	ble	21f00 <__assert_fail@plt+0x10f88>
   21e98:	movw	r4, #28940	; 0x710c
   21e9c:	movt	r4, #3
   21ea0:	mov	r3, #67	; 0x43
   21ea4:	movw	r2, #17788	; 0x457c
   21ea8:	mov	r1, #1
   21eac:	ldr	r0, [r4]
   21eb0:	movt	r2, #2
   21eb4:	bl	10eac <__fprintf_chk@plt>
   21eb8:	ldr	r3, [r5]
   21ebc:	cmp	r3, #0
   21ec0:	ble	21f00 <__assert_fail@plt+0x10f88>
   21ec4:	ldr	r3, [r4]
   21ec8:	movw	r0, #25380	; 0x6324
   21ecc:	mov	r1, #1
   21ed0:	movt	r0, #2
   21ed4:	mov	r2, #10
   21ed8:	bl	10dd4 <fwrite@plt>
   21edc:	ldr	r3, [r5]
   21ee0:	cmp	r3, #0
   21ee4:	ble	21f00 <__assert_fail@plt+0x10f88>
   21ee8:	movw	r0, #24180	; 0x5e74
   21eec:	ldr	r3, [r4]
   21ef0:	mov	r1, #1
   21ef4:	movt	r0, #2
   21ef8:	mov	r2, #2
   21efc:	bl	10dd4 <fwrite@plt>
   21f00:	mov	r0, #67	; 0x43
   21f04:	bl	10e58 <exit@plt>
   21f08:	ldr	r3, [fp]
   21f0c:	movw	r5, #28980	; 0x7134
   21f10:	movt	r5, #3
   21f14:	cmp	r3, #0
   21f18:	ble	21f84 <__assert_fail@plt+0x1100c>
   21f1c:	movw	r4, #28940	; 0x710c
   21f20:	movt	r4, #3
   21f24:	mov	r3, #44	; 0x2c
   21f28:	movw	r2, #17788	; 0x457c
   21f2c:	mov	r1, #1
   21f30:	ldr	r0, [r4]
   21f34:	movt	r2, #2
   21f38:	bl	10eac <__fprintf_chk@plt>
   21f3c:	ldr	r3, [r5]
   21f40:	cmp	r3, #0
   21f44:	ble	21f84 <__assert_fail@plt+0x1100c>
   21f48:	ldr	r3, [r4]
   21f4c:	movw	r0, #25720	; 0x6478
   21f50:	mov	r1, #1
   21f54:	movt	r0, #2
   21f58:	mov	r2, #44	; 0x2c
   21f5c:	bl	10dd4 <fwrite@plt>
   21f60:	ldr	r3, [r5]
   21f64:	cmp	r3, #0
   21f68:	ble	21f84 <__assert_fail@plt+0x1100c>
   21f6c:	movw	r0, #24180	; 0x5e74
   21f70:	ldr	r3, [r4]
   21f74:	mov	r1, #1
   21f78:	movt	r0, #2
   21f7c:	mov	r2, #2
   21f80:	bl	10dd4 <fwrite@plt>
   21f84:	mov	r0, #44	; 0x2c
   21f88:	bl	10e58 <exit@plt>
   21f8c:	ldr	r3, [fp]
   21f90:	movw	r5, #28980	; 0x7134
   21f94:	movt	r5, #3
   21f98:	cmp	r3, #0
   21f9c:	ble	22008 <__assert_fail@plt+0x11090>
   21fa0:	movw	r4, #28940	; 0x710c
   21fa4:	movt	r4, #3
   21fa8:	mov	r3, #51	; 0x33
   21fac:	movw	r2, #17788	; 0x457c
   21fb0:	mov	r1, #1
   21fb4:	ldr	r0, [r4]
   21fb8:	movt	r2, #2
   21fbc:	bl	10eac <__fprintf_chk@plt>
   21fc0:	ldr	r3, [r5]
   21fc4:	cmp	r3, #0
   21fc8:	ble	22008 <__assert_fail@plt+0x11090>
   21fcc:	ldr	r3, [r4]
   21fd0:	movw	r0, #24480	; 0x5fa0
   21fd4:	mov	r1, #1
   21fd8:	movt	r0, #2
   21fdc:	mov	r2, #36	; 0x24
   21fe0:	bl	10dd4 <fwrite@plt>
   21fe4:	ldr	r3, [r5]
   21fe8:	cmp	r3, #0
   21fec:	ble	22008 <__assert_fail@plt+0x11090>
   21ff0:	movw	r0, #24180	; 0x5e74
   21ff4:	ldr	r3, [r4]
   21ff8:	mov	r1, #1
   21ffc:	movt	r0, #2
   22000:	mov	r2, #2
   22004:	bl	10dd4 <fwrite@plt>
   22008:	mov	r0, #51	; 0x33
   2200c:	bl	10e58 <exit@plt>
   22010:	ldr	r3, [r4]
   22014:	cmp	r3, #0
   22018:	ble	22084 <__assert_fail@plt+0x1110c>
   2201c:	movw	r5, #28940	; 0x710c
   22020:	movt	r5, #3
   22024:	mov	r3, #40	; 0x28
   22028:	movw	r2, #17788	; 0x457c
   2202c:	mov	r1, #1
   22030:	ldr	r0, [r5]
   22034:	movt	r2, #2
   22038:	bl	10eac <__fprintf_chk@plt>
   2203c:	ldr	r3, [r4]
   22040:	cmp	r3, #0
   22044:	ble	22084 <__assert_fail@plt+0x1110c>
   22048:	ldr	r3, [r5]
   2204c:	movw	r0, #25260	; 0x62ac
   22050:	mov	r1, #1
   22054:	movt	r0, #2
   22058:	mov	r2, #45	; 0x2d
   2205c:	bl	10dd4 <fwrite@plt>
   22060:	ldr	r3, [r4]
   22064:	cmp	r3, #0
   22068:	ble	22084 <__assert_fail@plt+0x1110c>
   2206c:	movw	r0, #24180	; 0x5e74
   22070:	ldr	r3, [r5]
   22074:	mov	r1, #1
   22078:	movt	r0, #2
   2207c:	mov	r2, #2
   22080:	bl	10dd4 <fwrite@plt>
   22084:	mov	r0, #40	; 0x28
   22088:	bl	10e58 <exit@plt>
   2208c:	bl	10db0 <__stack_chk_fail@plt>
   22090:	ldr	r3, [fp]
   22094:	movw	r5, #28980	; 0x7134
   22098:	movt	r5, #3
   2209c:	cmp	r3, #0
   220a0:	ble	2210c <__assert_fail@plt+0x11194>
   220a4:	movw	r4, #28940	; 0x710c
   220a8:	movt	r4, #3
   220ac:	mov	r3, #68	; 0x44
   220b0:	movw	r2, #17788	; 0x457c
   220b4:	mov	r1, #1
   220b8:	ldr	r0, [r4]
   220bc:	movt	r2, #2
   220c0:	bl	10eac <__fprintf_chk@plt>
   220c4:	ldr	r3, [r5]
   220c8:	cmp	r3, #0
   220cc:	ble	2210c <__assert_fail@plt+0x11194>
   220d0:	ldr	r3, [r4]
   220d4:	movw	r0, #25392	; 0x6330
   220d8:	mov	r1, #1
   220dc:	movt	r0, #2
   220e0:	mov	r2, #17
   220e4:	bl	10dd4 <fwrite@plt>
   220e8:	ldr	r3, [r5]
   220ec:	cmp	r3, #0
   220f0:	ble	2210c <__assert_fail@plt+0x11194>
   220f4:	movw	r0, #24180	; 0x5e74
   220f8:	ldr	r3, [r4]
   220fc:	mov	r1, #1
   22100:	movt	r0, #2
   22104:	mov	r2, #2
   22108:	bl	10dd4 <fwrite@plt>
   2210c:	mov	r0, #68	; 0x44
   22110:	bl	10e58 <exit@plt>
   22114:	ldr	r3, [fp]
   22118:	movw	r5, #28980	; 0x7134
   2211c:	movt	r5, #3
   22120:	cmp	r3, #0
   22124:	ble	22190 <__assert_fail@plt+0x11218>
   22128:	movw	r4, #28940	; 0x710c
   2212c:	movt	r4, #3
   22130:	mov	r3, #42	; 0x2a
   22134:	movw	r2, #17788	; 0x457c
   22138:	mov	r1, #1
   2213c:	ldr	r0, [r4]
   22140:	movt	r2, #2
   22144:	bl	10eac <__fprintf_chk@plt>
   22148:	ldr	r3, [r5]
   2214c:	cmp	r3, #0
   22150:	ble	22190 <__assert_fail@plt+0x11218>
   22154:	ldr	r3, [r4]
   22158:	movw	r0, #25632	; 0x6420
   2215c:	mov	r1, #1
   22160:	movt	r0, #2
   22164:	mov	r2, #40	; 0x28
   22168:	bl	10dd4 <fwrite@plt>
   2216c:	ldr	r3, [r5]
   22170:	cmp	r3, #0
   22174:	ble	22190 <__assert_fail@plt+0x11218>
   22178:	movw	r0, #24180	; 0x5e74
   2217c:	ldr	r3, [r4]
   22180:	mov	r1, #1
   22184:	movt	r0, #2
   22188:	mov	r2, #2
   2218c:	bl	10dd4 <fwrite@plt>
   22190:	mov	r0, #42	; 0x2a
   22194:	bl	10e58 <exit@plt>
   22198:	ldr	fp, [sp, #36]	; 0x24
   2219c:	movw	r5, #28980	; 0x7134
   221a0:	movt	r5, #3
   221a4:	ldr	r3, [fp]
   221a8:	cmp	r3, #0
   221ac:	ble	22218 <__assert_fail@plt+0x112a0>
   221b0:	movw	r4, #28940	; 0x710c
   221b4:	movt	r4, #3
   221b8:	mov	r3, #52	; 0x34
   221bc:	movw	r2, #17788	; 0x457c
   221c0:	mov	r1, #1
   221c4:	ldr	r0, [r4]
   221c8:	movt	r2, #2
   221cc:	bl	10eac <__fprintf_chk@plt>
   221d0:	ldr	r3, [r5]
   221d4:	cmp	r3, #0
   221d8:	ble	22218 <__assert_fail@plt+0x112a0>
   221dc:	movw	r0, #25480	; 0x6388
   221e0:	movt	r0, #2
   221e4:	mov	r1, #1
   221e8:	mov	r2, #45	; 0x2d
   221ec:	ldr	r3, [r4]
   221f0:	bl	10dd4 <fwrite@plt>
   221f4:	ldr	r3, [r5]
   221f8:	cmp	r3, #0
   221fc:	ble	22218 <__assert_fail@plt+0x112a0>
   22200:	movw	r0, #24180	; 0x5e74
   22204:	ldr	r3, [r4]
   22208:	mov	r1, #1
   2220c:	movt	r0, #2
   22210:	mov	r2, #2
   22214:	bl	10dd4 <fwrite@plt>
   22218:	mov	r0, #52	; 0x34
   2221c:	bl	10e58 <exit@plt>
   22220:	ldr	fp, [sp, #36]	; 0x24
   22224:	movw	r5, #28980	; 0x7134
   22228:	movt	r5, #3
   2222c:	ldr	r3, [fp]
   22230:	cmp	r3, #0
   22234:	ble	22218 <__assert_fail@plt+0x112a0>
   22238:	movw	r4, #28940	; 0x710c
   2223c:	movt	r4, #3
   22240:	mov	r3, #52	; 0x34
   22244:	movw	r2, #17788	; 0x457c
   22248:	mov	r1, #1
   2224c:	ldr	r0, [r4]
   22250:	movt	r2, #2
   22254:	bl	10eac <__fprintf_chk@plt>
   22258:	ldr	r3, [r5]
   2225c:	cmp	r3, #0
   22260:	ble	22218 <__assert_fail@plt+0x112a0>
   22264:	movw	r0, #25440	; 0x6360
   22268:	mov	r1, #1
   2226c:	movt	r0, #2
   22270:	mov	r2, #38	; 0x26
   22274:	b	221ec <__assert_fail@plt+0x11274>
   22278:	sub	sp, sp, #16
   2227c:	push	{r4, r5, r6, r7, r8, lr}
   22280:	sub	sp, sp, #136	; 0x88
   22284:	movw	r5, #28936	; 0x7108
   22288:	movt	r5, #3
   2228c:	ldr	r8, [sp, #196]	; 0xc4
   22290:	add	r4, sp, #160	; 0xa0
   22294:	ldr	ip, [r5]
   22298:	stm	r4, {r0, r1, r2, r3}
   2229c:	mov	r0, r8
   222a0:	str	ip, [sp, #132]	; 0x84
   222a4:	ldr	r6, [sp, #192]	; 0xc0
   222a8:	bl	1f0d4 <__assert_fail@plt+0xe15c>
   222ac:	subs	r7, r0, #0
   222b0:	beq	22388 <__assert_fail@plt+0x11410>
   222b4:	mov	r0, r6
   222b8:	ldr	r1, [pc, #212]	; 22394 <__assert_fail@plt+0x1141c>
   222bc:	bl	10d20 <strcmp@plt>
   222c0:	cmp	r0, #0
   222c4:	bne	22310 <__assert_fail@plt+0x11398>
   222c8:	add	r3, sp, #156	; 0x9c
   222cc:	str	r6, [sp, #16]
   222d0:	str	r7, [r3, #20]!
   222d4:	ldm	r3, {r0, r1, r2, r3}
   222d8:	stm	sp, {r0, r1, r2, r3}
   222dc:	ldm	r4, {r0, r1, r2, r3}
   222e0:	bl	2136c <__assert_fail@plt+0x103f4>
   222e4:	mov	r0, r7
   222e8:	bl	10eb8 <fclose@plt>
   222ec:	mov	r0, #0
   222f0:	ldr	r2, [sp, #132]	; 0x84
   222f4:	ldr	r3, [r5]
   222f8:	cmp	r2, r3
   222fc:	bne	22390 <__assert_fail@plt+0x11418>
   22300:	add	sp, sp, #136	; 0x88
   22304:	pop	{r4, r5, r6, r7, r8, lr}
   22308:	add	sp, sp, #16
   2230c:	bx	lr
   22310:	mov	r0, r6
   22314:	add	r1, sp, #24
   22318:	bl	1f860 <__assert_fail@plt+0xe8e8>
   2231c:	cmp	r0, #0
   22320:	beq	222c8 <__assert_fail@plt+0x11350>
   22324:	add	r3, sp, #156	; 0x9c
   22328:	str	r6, [sp, #16]
   2232c:	str	r7, [r3, #20]!
   22330:	ldm	r3, {r0, r1, r2, r3}
   22334:	stm	sp, {r0, r1, r2, r3}
   22338:	ldm	r4, {r0, r1, r2, r3}
   2233c:	bl	2136c <__assert_fail@plt+0x103f4>
   22340:	mov	r0, r7
   22344:	bl	10eb8 <fclose@plt>
   22348:	mov	r0, r8
   2234c:	movw	r1, #23912	; 0x5d68
   22350:	movt	r1, #2
   22354:	bl	10d20 <strcmp@plt>
   22358:	cmp	r0, #0
   2235c:	beq	222f0 <__assert_fail@plt+0x11378>
   22360:	mov	r0, r8
   22364:	ldr	r1, [pc, #44]	; 22398 <__assert_fail@plt+0x11420>
   22368:	bl	10d20 <strcmp@plt>
   2236c:	cmp	r0, #0
   22370:	beq	222f0 <__assert_fail@plt+0x11378>
   22374:	mov	r0, r8
   22378:	add	r1, sp, #24
   2237c:	bl	1f8a0 <__assert_fail@plt+0xe928>
   22380:	mov	r0, #0
   22384:	b	222f0 <__assert_fail@plt+0x11378>
   22388:	mov	r0, #1
   2238c:	b	222f0 <__assert_fail@plt+0x11378>
   22390:	bl	10db0 <__stack_chk_fail@plt>
   22394:	andeq	r5, r2, ip, ror sp
   22398:	andeq	r5, r2, r0, ror sp
   2239c:	adds	r2, r0, #0
   223a0:	movw	r3, #28980	; 0x7134
   223a4:	movt	r3, #3
   223a8:	mov	r1, r0
   223ac:	movne	r2, #1
   223b0:	mov	r0, r2
   223b4:	str	r1, [r3, #8]
   223b8:	str	r2, [r3, #4]
   223bc:	bx	lr
   223c0:	adds	r2, r0, #0
   223c4:	movw	r3, #28916	; 0x70f4
   223c8:	movt	r3, #3
   223cc:	movne	r2, #1
   223d0:	mov	r0, r2
   223d4:	str	r2, [r3, #4]
   223d8:	bx	lr
   223dc:	adds	r2, r0, #0
   223e0:	movw	r3, #28980	; 0x7134
   223e4:	movt	r3, #3
   223e8:	movne	r2, #1
   223ec:	mov	r0, r2
   223f0:	str	r2, [r3, #40]	; 0x28
   223f4:	bx	lr
   223f8:	sub	r2, r0, #4
   223fc:	mov	r3, r0
   22400:	cmp	r2, #3
   22404:	movwls	r1, #23912	; 0x5d68
   22408:	movtls	r1, #2
   2240c:	addls	r2, r1, r2, lsl #2
   22410:	movwls	r1, #28916	; 0x70f4
   22414:	movtls	r1, #3
   22418:	ldrls	r0, [r2, #28]
   2241c:	movhi	r0, #0
   22420:	strls	r3, [r1, #8]
   22424:	bx	lr
   22428:	subs	r3, r0, #1
   2242c:	rsbs	r2, r3, #0
   22430:	adcs	r2, r2, r3
   22434:	movw	r3, #28916	; 0x70f4
   22438:	movt	r3, #3
   2243c:	mov	r0, r2
   22440:	str	r2, [r3, #12]
   22444:	bx	lr
   22448:	adds	r2, r0, #0
   2244c:	movw	r3, #28980	; 0x7134
   22450:	movt	r3, #3
   22454:	movne	r2, #1
   22458:	mov	r0, r2
   2245c:	str	r2, [r3, #12]
   22460:	bx	lr
   22464:	adds	r2, r0, #0
   22468:	movw	r3, #28916	; 0x70f4
   2246c:	movt	r3, #3
   22470:	movne	r2, #1
   22474:	mov	r0, r2
   22478:	str	r2, [r3, #16]
   2247c:	bx	lr
   22480:	movw	r3, #28980	; 0x7134
   22484:	movt	r3, #3
   22488:	str	r0, [r3]
   2248c:	bx	lr
   22490:	adds	r2, r0, #0
   22494:	movw	r3, #28916	; 0x70f4
   22498:	movt	r3, #3
   2249c:	movne	r2, #1
   224a0:	mov	r0, r2
   224a4:	str	r2, [r3]
   224a8:	bx	lr
   224ac:	adds	r2, r0, #0
   224b0:	movw	r3, #28980	; 0x7134
   224b4:	movt	r3, #3
   224b8:	movne	r2, #1
   224bc:	mov	r0, r2
   224c0:	str	r2, [r3, #20]
   224c4:	bx	lr
   224c8:	adds	r0, r0, #0
   224cc:	movw	r3, #28980	; 0x7134
   224d0:	movt	r3, #3
   224d4:	movne	r0, #1
   224d8:	str	r0, [r3, #16]
   224dc:	bx	lr
   224e0:	adds	r0, r0, #0
   224e4:	movw	r3, #28980	; 0x7134
   224e8:	movt	r3, #3
   224ec:	movne	r0, #1
   224f0:	str	r0, [r3, #28]
   224f4:	bx	lr
   224f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224fc:	vpush	{d8-d9}
   22500:	sub	sp, sp, #76	; 0x4c
   22504:	mov	r4, r1
   22508:	str	r0, [sp, #68]	; 0x44
   2250c:	mov	r0, #8388608	; 0x800000
   22510:	str	r2, [sp, #48]	; 0x30
   22514:	bl	14260 <__assert_fail@plt+0x32e8>
   22518:	str	r0, [sp, #44]	; 0x2c
   2251c:	bl	10e4c <clock@plt>
   22520:	ldr	ip, [sp, #48]	; 0x30
   22524:	movw	r3, #61640	; 0xf0c8
   22528:	movt	r3, #1
   2252c:	movw	r2, #40512	; 0x9e40
   22530:	cmp	ip, #2
   22534:	movt	r2, #1
   22538:	movle	r2, r3
   2253c:	str	r2, [sp, #52]	; 0x34
   22540:	str	r0, [sp, #64]	; 0x40
   22544:	ldr	r0, [sp, #68]	; 0x44
   22548:	bl	1f950 <__assert_fail@plt+0xe9d8>
   2254c:	subs	r9, r0, #0
   22550:	beq	22be8 <__assert_fail@plt+0x11c70>
   22554:	mov	r0, r4
   22558:	bl	1f0d4 <__assert_fail@plt+0xe15c>
   2255c:	cmp	r0, #0
   22560:	str	r0, [sp, #40]	; 0x28
   22564:	beq	22b5c <__assert_fail@plt+0x11be4>
   22568:	mov	r0, #8388608	; 0x800000
   2256c:	bl	10e1c <malloc@plt>
   22570:	mov	r7, r0
   22574:	ldr	r0, [sp, #44]	; 0x2c
   22578:	bl	10e1c <malloc@plt>
   2257c:	cmp	r7, #0
   22580:	cmpne	r0, #0
   22584:	mov	r4, r0
   22588:	beq	22ad8 <__assert_fail@plt+0x11b60>
   2258c:	mov	r2, #76	; 0x4c
   22590:	mov	r3, #24
   22594:	strb	r2, [r0, #2]
   22598:	mov	r5, #2
   2259c:	strb	r3, [r0, #3]
   225a0:	mov	r6, #33	; 0x21
   225a4:	strb	r5, [r0]
   225a8:	mov	r1, #1
   225ac:	strb	r6, [r0, #1]
   225b0:	mov	r2, #4
   225b4:	ldr	r3, [sp, #40]	; 0x28
   225b8:	bl	10dd4 <fwrite@plt>
   225bc:	cmp	r0, #4
   225c0:	bne	22a54 <__assert_fail@plt+0x11adc>
   225c4:	movw	r8, #28980	; 0x7134
   225c8:	movw	ip, #35594	; 0x8b0a
   225cc:	mov	r0, #4
   225d0:	movt	ip, #2
   225d4:	mov	r1, #0
   225d8:	str	ip, [sp, #56]	; 0x38
   225dc:	movt	r8, #3
   225e0:	movw	ip, #28940	; 0x710c
   225e4:	strd	r0, [sp, #32]
   225e8:	movt	ip, #3
   225ec:	mov	sl, #0
   225f0:	str	ip, [sp, #60]	; 0x3c
   225f4:	mov	fp, #0
   225f8:	vldr	d9, [pc, #952]	; 229b8 <__assert_fail@plt+0x11a40>
   225fc:	b	22638 <__assert_fail@plt+0x116c0>
   22600:	lsr	r2, r5, #8
   22604:	lsr	r3, r5, #16
   22608:	strb	r5, [r4]
   2260c:	mov	r0, r4
   22610:	strb	r2, [r4, #1]
   22614:	lsr	r5, r5, #24
   22618:	strb	r3, [r4, #2]
   2261c:	mov	r1, #1
   22620:	strb	r5, [r4, #3]
   22624:	mov	r2, r6
   22628:	ldr	r3, [sp, #40]	; 0x28
   2262c:	bl	10dd4 <fwrite@plt>
   22630:	cmp	r6, r0
   22634:	bne	228b0 <__assert_fail@plt+0x11938>
   22638:	mov	r1, #8388608	; 0x800000
   2263c:	str	r9, [sp]
   22640:	mov	r3, r1
   22644:	mov	r0, r7
   22648:	mov	r2, #1
   2264c:	bl	10ed0 <__fread_chk@plt>
   22650:	subs	ip, r0, #0
   22654:	beq	2275c <__assert_fail@plt+0x117e4>
   22658:	cmp	ip, #8388608	; 0x800000
   2265c:	bhi	22934 <__assert_fail@plt+0x119bc>
   22660:	ldr	r1, [sp, #48]	; 0x30
   22664:	adds	sl, sl, ip
   22668:	mov	r2, ip
   2266c:	ldr	r3, [sp, #44]	; 0x2c
   22670:	mov	r0, r7
   22674:	ldr	ip, [sp, #52]	; 0x34
   22678:	str	r1, [sp]
   2267c:	add	r1, r4, #4
   22680:	adc	fp, fp, #0
   22684:	blx	ip
   22688:	ldr	r3, [r8]
   2268c:	add	r6, r0, #4
   22690:	mov	r5, r0
   22694:	ldrd	r0, [sp, #32]
   22698:	adds	r0, r0, r6
   2269c:	adc	r1, r1, #0
   226a0:	cmp	r3, #1
   226a4:	strd	r0, [sp, #32]
   226a8:	ble	22600 <__assert_fail@plt+0x11688>
   226ac:	str	r3, [sp, #24]
   226b0:	bl	10e4c <clock@plt>
   226b4:	movw	r1, #28980	; 0x7134
   226b8:	movt	r1, #3
   226bc:	ldr	ip, [sp, #56]	; 0x38
   226c0:	ldr	r2, [r1, #24]
   226c4:	ldr	r3, [sp, #24]
   226c8:	rsb	r0, r2, r0
   226cc:	cmp	r0, ip
   226d0:	bgt	226dc <__assert_fail@plt+0x11764>
   226d4:	cmp	r3, #3
   226d8:	ble	22600 <__assert_fail@plt+0x11688>
   226dc:	bl	10e4c <clock@plt>
   226e0:	ldr	r1, [sp, #60]	; 0x3c
   226e4:	lsr	r3, sl, #20
   226e8:	orr	r3, r3, fp, lsl #12
   226ec:	ldr	ip, [r1]
   226f0:	str	r0, [r8, #24]
   226f4:	ldrd	r0, [sp, #32]
   226f8:	str	r3, [sp, #24]
   226fc:	str	ip, [sp, #28]
   22700:	bl	23714 <__assert_fail@plt+0x1279c>
   22704:	vmov	d8, r0, r1
   22708:	mov	r0, sl
   2270c:	mov	r1, fp
   22710:	bl	23714 <__assert_fail@plt+0x1279c>
   22714:	ldr	ip, [sp, #28]
   22718:	ldr	r3, [sp, #24]
   2271c:	movw	r2, #25920	; 0x6540
   22720:	movt	r2, #2
   22724:	vmov	d5, r0, r1
   22728:	mov	r0, ip
   2272c:	mov	r1, #1
   22730:	vdiv.f64	d8, d8, d5
   22734:	vmul.f64	d8, d8, d9
   22738:	vstr	d8, [sp]
   2273c:	bl	10eac <__fprintf_chk@plt>
   22740:	ldr	r3, [r8]
   22744:	cmp	r3, #3
   22748:	ble	22600 <__assert_fail@plt+0x11688>
   2274c:	ldr	ip, [sp, #60]	; 0x3c
   22750:	ldr	r0, [ip]
   22754:	bl	10d2c <fflush@plt>
   22758:	b	22600 <__assert_fail@plt+0x11688>
   2275c:	mov	r0, r9
   22760:	bl	10d5c <ferror@plt>
   22764:	cmp	r0, #0
   22768:	bne	229d0 <__assert_fail@plt+0x11a58>
   2276c:	bl	10e4c <clock@plt>
   22770:	ldr	ip, [sp, #64]	; 0x40
   22774:	ldr	r3, [r8]
   22778:	mov	r1, #0
   2277c:	movw	r5, #28980	; 0x7134
   22780:	movt	r5, #3
   22784:	cmp	r0, ip
   22788:	mov	r6, r0
   2278c:	addeq	r6, ip, #1
   22790:	orrs	r0, sl, fp
   22794:	movne	r0, #0
   22798:	moveq	r0, #1
   2279c:	adds	sl, sl, r0
   227a0:	adc	fp, fp, r1
   227a4:	cmp	r3, #1
   227a8:	ble	22880 <__assert_fail@plt+0x11908>
   227ac:	movw	r8, #28940	; 0x710c
   227b0:	movt	r8, #3
   227b4:	movw	r2, #17840	; 0x45b0
   227b8:	movw	r3, #18552	; 0x4878
   227bc:	ldr	r0, [r8]
   227c0:	movt	r3, #2
   227c4:	movt	r2, #2
   227c8:	mov	r1, #1
   227cc:	bl	10eac <__fprintf_chk@plt>
   227d0:	ldr	r3, [r5]
   227d4:	cmp	r3, #1
   227d8:	ble	22880 <__assert_fail@plt+0x11908>
   227dc:	mov	r0, sl
   227e0:	mov	r1, fp
   227e4:	bl	23714 <__assert_fail@plt+0x1279c>
   227e8:	strd	sl, [sp]
   227ec:	vmov	d8, r0, r1
   227f0:	ldrd	r0, [sp, #32]
   227f4:	mov	r2, r0
   227f8:	mov	r3, r1
   227fc:	strd	r2, [sp, #8]
   22800:	bl	23714 <__assert_fail@plt+0x1279c>
   22804:	vldr	d7, [pc, #428]	; 229b8 <__assert_fail@plt+0x11a40>
   22808:	ldr	r3, [r8]
   2280c:	movw	r2, #25160	; 0x6248
   22810:	movt	r2, #2
   22814:	vmov	d5, r0, r1
   22818:	mov	r0, r3
   2281c:	mov	r1, #1
   22820:	vdiv.f64	d6, d5, d8
   22824:	vmul.f64	d7, d6, d7
   22828:	vstr	d7, [sp, #16]
   2282c:	bl	10eac <__fprintf_chk@plt>
   22830:	ldr	r3, [r5]
   22834:	cmp	r3, #3
   22838:	ble	22880 <__assert_fail@plt+0x11908>
   2283c:	ldr	ip, [sp, #64]	; 0x40
   22840:	vldr	d5, [pc, #376]	; 229c0 <__assert_fail@plt+0x11a48>
   22844:	vldr	d7, [pc, #380]	; 229c8 <__assert_fail@plt+0x11a50>
   22848:	ldr	r0, [r8]
   2284c:	rsb	ip, ip, r6
   22850:	movw	r2, #25976	; 0x6578
   22854:	mov	r1, #1
   22858:	movt	r2, #2
   2285c:	vmov	s12, ip
   22860:	vcvt.f64.s32	d6, s12
   22864:	vdiv.f64	d6, d6, d5
   22868:	vdiv.f64	d8, d8, d6
   2286c:	vstr	d6, [sp]
   22870:	vmul.f64	d6, d8, d7
   22874:	vmul.f64	d7, d6, d7
   22878:	vstr	d7, [sp, #8]
   2287c:	bl	10eac <__fprintf_chk@plt>
   22880:	mov	r0, r7
   22884:	bl	10d44 <free@plt>
   22888:	mov	r0, r4
   2288c:	bl	10d44 <free@plt>
   22890:	mov	r0, r9
   22894:	bl	10eb8 <fclose@plt>
   22898:	ldr	r0, [sp, #40]	; 0x28
   2289c:	bl	10eb8 <fclose@plt>
   228a0:	mov	r0, #0
   228a4:	add	sp, sp, #76	; 0x4c
   228a8:	vpop	{d8-d9}
   228ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228b0:	ldr	r3, [r8]
   228b4:	movw	r5, #28980	; 0x7134
   228b8:	movt	r5, #3
   228bc:	cmp	r3, #0
   228c0:	ble	2292c <__assert_fail@plt+0x119b4>
   228c4:	movw	r4, #28940	; 0x710c
   228c8:	movt	r4, #3
   228cc:	mov	r3, #24
   228d0:	movw	r2, #17788	; 0x457c
   228d4:	mov	r1, #1
   228d8:	ldr	r0, [r4]
   228dc:	movt	r2, #2
   228e0:	bl	10eac <__fprintf_chk@plt>
   228e4:	ldr	r3, [r5]
   228e8:	cmp	r3, #0
   228ec:	ble	2292c <__assert_fail@plt+0x119b4>
   228f0:	ldr	r3, [r4]
   228f4:	movw	r0, #24940	; 0x616c
   228f8:	mov	r1, #1
   228fc:	movt	r0, #2
   22900:	mov	r2, #43	; 0x2b
   22904:	bl	10dd4 <fwrite@plt>
   22908:	ldr	r3, [r5]
   2290c:	cmp	r3, #0
   22910:	ble	2292c <__assert_fail@plt+0x119b4>
   22914:	movw	r0, #24180	; 0x5e74
   22918:	ldr	r3, [r4]
   2291c:	mov	r1, #1
   22920:	movt	r0, #2
   22924:	mov	r2, #2
   22928:	bl	10dd4 <fwrite@plt>
   2292c:	mov	r0, #24
   22930:	bl	10e58 <exit@plt>
   22934:	ldr	r3, [r8]
   22938:	movw	r5, #28980	; 0x7134
   2293c:	movt	r5, #3
   22940:	cmp	r3, #0
   22944:	ble	229b0 <__assert_fail@plt+0x11a38>
   22948:	movw	r4, #28940	; 0x710c
   2294c:	movt	r4, #3
   22950:	mov	r3, #23
   22954:	movw	r2, #17788	; 0x457c
   22958:	mov	r1, #1
   2295c:	ldr	r0, [r4]
   22960:	movt	r2, #2
   22964:	bl	10eac <__fprintf_chk@plt>
   22968:	ldr	r3, [r5]
   2296c:	cmp	r3, #0
   22970:	ble	229b0 <__assert_fail@plt+0x11a38>
   22974:	ldr	r3, [r4]
   22978:	movw	r0, #25880	; 0x6518
   2297c:	mov	r1, #1
   22980:	movt	r0, #2
   22984:	mov	r2, #39	; 0x27
   22988:	bl	10dd4 <fwrite@plt>
   2298c:	ldr	r3, [r5]
   22990:	cmp	r3, #0
   22994:	ble	229b0 <__assert_fail@plt+0x11a38>
   22998:	movw	r0, #24180	; 0x5e74
   2299c:	ldr	r3, [r4]
   229a0:	mov	r1, #1
   229a4:	movt	r0, #2
   229a8:	mov	r2, #2
   229ac:	bl	10dd4 <fwrite@plt>
   229b0:	mov	r0, #23
   229b4:	bl	10e58 <exit@plt>
   229b8:	andeq	r0, r0, r0
   229bc:	subsmi	r0, r9, r0
   229c0:	andeq	r0, r0, r0
   229c4:	smlawbmi	lr, r0, r4, r8
   229c8:	andeq	r0, r0, r0
   229cc:	svccc	0x00500000
   229d0:	ldr	r3, [r8]
   229d4:	movw	r5, #28980	; 0x7134
   229d8:	movt	r5, #3
   229dc:	cmp	r3, #0
   229e0:	ble	22a4c <__assert_fail@plt+0x11ad4>
   229e4:	movw	r4, #28940	; 0x710c
   229e8:	movt	r4, #3
   229ec:	mov	r3, #25
   229f0:	movw	r2, #17788	; 0x457c
   229f4:	mov	r1, #1
   229f8:	ldr	r0, [r4]
   229fc:	movt	r2, #2
   22a00:	bl	10eac <__fprintf_chk@plt>
   22a04:	ldr	r3, [r5]
   22a08:	cmp	r3, #0
   22a0c:	ble	22a4c <__assert_fail@plt+0x11ad4>
   22a10:	ldr	r3, [sp, #68]	; 0x44
   22a14:	movw	r2, #25952	; 0x6560
   22a18:	ldr	r0, [r4]
   22a1c:	movt	r2, #2
   22a20:	mov	r1, #1
   22a24:	bl	10eac <__fprintf_chk@plt>
   22a28:	ldr	r3, [r5]
   22a2c:	cmp	r3, #0
   22a30:	ble	22a4c <__assert_fail@plt+0x11ad4>
   22a34:	movw	r0, #24180	; 0x5e74
   22a38:	ldr	r3, [r4]
   22a3c:	mov	r1, #1
   22a40:	movt	r0, #2
   22a44:	mov	r2, #2
   22a48:	bl	10dd4 <fwrite@plt>
   22a4c:	mov	r0, #25
   22a50:	bl	10e58 <exit@plt>
   22a54:	movw	r7, #28980	; 0x7134
   22a58:	movt	r7, #3
   22a5c:	ldr	r3, [r7]
   22a60:	cmp	r3, #0
   22a64:	ble	22ad0 <__assert_fail@plt+0x11b58>
   22a68:	movw	r4, #28940	; 0x710c
   22a6c:	movt	r4, #3
   22a70:	mov	r3, #22
   22a74:	movw	r2, #17788	; 0x457c
   22a78:	mov	r1, #1
   22a7c:	ldr	r0, [r4]
   22a80:	movt	r2, #2
   22a84:	bl	10eac <__fprintf_chk@plt>
   22a88:	ldr	r3, [r7]
   22a8c:	cmp	r3, #0
   22a90:	ble	22ad0 <__assert_fail@plt+0x11b58>
   22a94:	ldr	r3, [r4]
   22a98:	mov	r2, r6
   22a9c:	movw	r0, #25020	; 0x61bc
   22aa0:	mov	r1, #1
   22aa4:	movt	r0, #2
   22aa8:	bl	10dd4 <fwrite@plt>
   22aac:	ldr	r3, [r7]
   22ab0:	cmp	r3, #0
   22ab4:	ble	22ad0 <__assert_fail@plt+0x11b58>
   22ab8:	movw	r0, #24180	; 0x5e74
   22abc:	mov	r2, r5
   22ac0:	ldr	r3, [r4]
   22ac4:	mov	r1, #1
   22ac8:	movt	r0, #2
   22acc:	bl	10dd4 <fwrite@plt>
   22ad0:	mov	r0, #22
   22ad4:	bl	10e58 <exit@plt>
   22ad8:	movw	r5, #28980	; 0x7134
   22adc:	movt	r5, #3
   22ae0:	ldr	r3, [r5]
   22ae4:	cmp	r3, #0
   22ae8:	ble	22b54 <__assert_fail@plt+0x11bdc>
   22aec:	movw	r4, #28940	; 0x710c
   22af0:	movt	r4, #3
   22af4:	mov	r3, #21
   22af8:	movw	r2, #17788	; 0x457c
   22afc:	mov	r1, #1
   22b00:	ldr	r0, [r4]
   22b04:	movt	r2, #2
   22b08:	bl	10eac <__fprintf_chk@plt>
   22b0c:	ldr	r3, [r5]
   22b10:	cmp	r3, #0
   22b14:	ble	22b54 <__assert_fail@plt+0x11bdc>
   22b18:	ldr	r3, [r4]
   22b1c:	movw	r0, #24480	; 0x5fa0
   22b20:	mov	r1, #1
   22b24:	movt	r0, #2
   22b28:	mov	r2, #36	; 0x24
   22b2c:	bl	10dd4 <fwrite@plt>
   22b30:	ldr	r3, [r5]
   22b34:	cmp	r3, #0
   22b38:	ble	22b54 <__assert_fail@plt+0x11bdc>
   22b3c:	movw	r0, #24180	; 0x5e74
   22b40:	ldr	r3, [r4]
   22b44:	mov	r1, #1
   22b48:	movt	r0, #2
   22b4c:	mov	r2, #2
   22b50:	bl	10dd4 <fwrite@plt>
   22b54:	mov	r0, #21
   22b58:	bl	10e58 <exit@plt>
   22b5c:	movw	r5, #28980	; 0x7134
   22b60:	movt	r5, #3
   22b64:	mov	r0, r9
   22b68:	bl	10eb8 <fclose@plt>
   22b6c:	ldr	r3, [r5]
   22b70:	cmp	r3, #0
   22b74:	ble	22be0 <__assert_fail@plt+0x11c68>
   22b78:	movw	r4, #28940	; 0x710c
   22b7c:	movt	r4, #3
   22b80:	mov	r3, #20
   22b84:	movw	r2, #17788	; 0x457c
   22b88:	mov	r1, #1
   22b8c:	ldr	r0, [r4]
   22b90:	movt	r2, #2
   22b94:	bl	10eac <__fprintf_chk@plt>
   22b98:	ldr	r3, [r5]
   22b9c:	cmp	r3, #0
   22ba0:	ble	22be0 <__assert_fail@plt+0x11c68>
   22ba4:	ldr	r3, [sp, #68]	; 0x44
   22ba8:	movw	r2, #25856	; 0x6500
   22bac:	ldr	r0, [r4]
   22bb0:	movt	r2, #2
   22bb4:	mov	r1, #1
   22bb8:	bl	10eac <__fprintf_chk@plt>
   22bbc:	ldr	r3, [r5]
   22bc0:	cmp	r3, #0
   22bc4:	ble	22be0 <__assert_fail@plt+0x11c68>
   22bc8:	movw	r0, #24180	; 0x5e74
   22bcc:	ldr	r3, [r4]
   22bd0:	mov	r1, #1
   22bd4:	movt	r0, #2
   22bd8:	mov	r2, #2
   22bdc:	bl	10dd4 <fwrite@plt>
   22be0:	mov	r0, #20
   22be4:	bl	10e58 <exit@plt>
   22be8:	movw	r5, #28980	; 0x7134
   22bec:	movt	r5, #3
   22bf0:	ldr	r3, [r5]
   22bf4:	cmp	r3, #0
   22bf8:	bgt	22b78 <__assert_fail@plt+0x11c00>
   22bfc:	b	22be0 <__assert_fail@plt+0x11c68>
   22c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c04:	sub	sp, sp, #60	; 0x3c
   22c08:	mov	fp, r0
   22c0c:	add	r0, sp, #16
   22c10:	mov	r7, r1
   22c14:	mov	sl, r2
   22c18:	bl	2017c <__assert_fail@plt+0xf204>
   22c1c:	bl	10e4c <clock@plt>
   22c20:	mov	r8, r0
   22c24:	add	r0, sp, #32
   22c28:	bl	1fc6c <__assert_fail@plt+0xecf4>
   22c2c:	ldr	r6, [sp, #40]	; 0x28
   22c30:	ldr	r5, [sp, #48]	; 0x30
   22c34:	ldr	r4, [sp, #52]	; 0x34
   22c38:	ldr	r9, [sp, #32]
   22c3c:	mov	r1, r6
   22c40:	mov	r3, r5
   22c44:	ldr	r2, [sp, #44]	; 0x2c
   22c48:	str	r7, [sp, #8]
   22c4c:	str	r4, [sp]
   22c50:	mov	r0, r9
   22c54:	str	fp, [sp, #4]
   22c58:	str	sl, [sp, #12]
   22c5c:	bl	20530 <__assert_fail@plt+0xf5b8>
   22c60:	mov	r1, r6
   22c64:	mov	r2, r5
   22c68:	mov	r3, r4
   22c6c:	mov	r7, r0
   22c70:	mov	r0, r9
   22c74:	bl	211cc <__assert_fail@plt+0x10254>
   22c78:	bl	10e4c <clock@plt>
   22c7c:	ldr	r4, [sp, #20]
   22c80:	ldr	r6, [sp, #16]
   22c84:	mov	r5, r0
   22c88:	add	r0, sp, #24
   22c8c:	bl	2017c <__assert_fail@plt+0xf204>
   22c90:	ldr	r2, [sp, #28]
   22c94:	ldr	r3, [sp, #24]
   22c98:	cmp	r4, r2
   22c9c:	subgt	r3, r3, #1
   22ca0:	rsble	r6, r6, r3
   22ca4:	rsbgt	r6, r6, r3
   22ca8:	movw	r3, #28980	; 0x7134
   22cac:	movt	r3, #3
   22cb0:	movgt	r1, #51712	; 0xca00
   22cb4:	rsble	r2, r4, r2
   22cb8:	ldr	r3, [r3]
   22cbc:	movtgt	r1, #15258	; 0x3b9a
   22cc0:	addgt	r1, r2, r1
   22cc4:	rsbgt	r2, r4, r1
   22cc8:	cmp	r3, #3
   22ccc:	ble	22d48 <__assert_fail@plt+0x11dd0>
   22cd0:	asr	r3, r2, #31
   22cd4:	mov	r1, #51712	; 0xca00
   22cd8:	movt	r1, #15258	; 0x3b9a
   22cdc:	mov	sl, r2
   22ce0:	mov	fp, r3
   22ce4:	rsb	r5, r8, r5
   22ce8:	smlal	sl, fp, r1, r6
   22cec:	mov	r0, sl
   22cf0:	mov	r1, fp
   22cf4:	bl	23714 <__assert_fail@plt+0x1279c>
   22cf8:	vmov	s10, r5
   22cfc:	vldr	d4, [pc, #84]	; 22d58 <__assert_fail@plt+0x11de0>
   22d00:	vldr	d7, [pc, #88]	; 22d60 <__assert_fail@plt+0x11de8>
   22d04:	vcvt.f64.s32	d5, s10
   22d08:	movw	r3, #28940	; 0x710c
   22d0c:	movt	r3, #3
   22d10:	vldr	d6, [pc, #80]	; 22d68 <__assert_fail@plt+0x11df0>
   22d14:	movw	r2, #26008	; 0x6598
   22d18:	movt	r2, #2
   22d1c:	ldr	r3, [r3]
   22d20:	vdiv.f64	d5, d5, d4
   22d24:	vmov	d4, r0, r1
   22d28:	mov	r0, r3
   22d2c:	mov	r1, #1
   22d30:	vdiv.f64	d7, d4, d7
   22d34:	vdiv.f64	d5, d5, d7
   22d38:	vstr	d7, [sp]
   22d3c:	vmul.f64	d7, d5, d6
   22d40:	vstr	d7, [sp, #8]
   22d44:	bl	10eac <__fprintf_chk@plt>
   22d48:	mov	r0, r7
   22d4c:	add	sp, sp, #60	; 0x3c
   22d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d54:	nop	{0}
   22d58:	andeq	r0, r0, r0
   22d5c:	smlawbmi	lr, r0, r4, r8
   22d60:	andeq	r0, r0, r0
   22d64:	bicmi	ip, sp, r5, ror #26
   22d68:	andeq	r0, r0, r0
   22d6c:	subsmi	r0, r9, r0
   22d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d74:	sub	sp, sp, #68	; 0x44
   22d78:	mov	r5, r0
   22d7c:	mov	r0, #30
   22d80:	mov	sl, r2
   22d84:	mov	r9, r1
   22d88:	str	r3, [sp, #36]	; 0x24
   22d8c:	bl	10e1c <malloc@plt>
   22d90:	mov	r4, r0
   22d94:	mov	r0, sl
   22d98:	bl	10e64 <strlen@plt>
   22d9c:	cmp	r4, #0
   22da0:	mov	r6, r0
   22da4:	moveq	r0, r9
   22da8:	beq	22ea8 <__assert_fail@plt+0x11f30>
   22dac:	add	r0, sp, #40	; 0x28
   22db0:	bl	1fc6c <__assert_fail@plt+0xecf4>
   22db4:	ldr	r1, [sp, #40]	; 0x28
   22db8:	ldr	r3, [sp, #48]	; 0x30
   22dbc:	cmp	r9, #0
   22dc0:	ldr	lr, [sp, #56]	; 0x38
   22dc4:	str	r1, [sp, #28]
   22dc8:	ldr	r1, [sp, #60]	; 0x3c
   22dcc:	str	r3, [sp, #24]
   22dd0:	str	lr, [sp, #20]
   22dd4:	str	r1, [sp, #16]
   22dd8:	ble	22ed0 <__assert_fail@plt+0x11f58>
   22ddc:	mov	r7, #0
   22de0:	add	r6, r6, #1
   22de4:	mov	r8, #30
   22de8:	str	r6, [sp, #32]
   22dec:	mov	r6, r7
   22df0:	ldr	fp, [r5], #4
   22df4:	mov	r0, fp
   22df8:	bl	10e64 <strlen@plt>
   22dfc:	ldr	lr, [sp, #32]
   22e00:	mov	r3, r0
   22e04:	add	r2, r3, lr
   22e08:	cmp	r2, r8
   22e0c:	mov	r0, r4
   22e10:	bcc	22e30 <__assert_fail@plt+0x11eb8>
   22e14:	add	r8, r3, #20
   22e18:	bl	10d44 <free@plt>
   22e1c:	mov	r0, r8
   22e20:	bl	10e1c <malloc@plt>
   22e24:	subs	r4, r0, #0
   22e28:	beq	22eb0 <__assert_fail@plt+0x11f38>
   22e2c:	ldr	fp, [r5, #-4]
   22e30:	mov	r1, fp
   22e34:	mov	r0, r4
   22e38:	bl	10dec <strcpy@plt>
   22e3c:	mov	r1, sl
   22e40:	mov	r0, r4
   22e44:	add	r6, r6, #1
   22e48:	bl	10de0 <strcat@plt>
   22e4c:	ldr	r1, [sp, #16]
   22e50:	ldr	lr, [sp, #36]	; 0x24
   22e54:	ldr	r2, [sp, #52]	; 0x34
   22e58:	str	r1, [sp]
   22e5c:	ldr	ip, [r5, #-4]
   22e60:	ldr	r0, [sp, #28]
   22e64:	ldr	r1, [sp, #24]
   22e68:	str	r4, [sp, #8]
   22e6c:	ldr	r3, [sp, #20]
   22e70:	str	lr, [sp, #12]
   22e74:	str	ip, [sp, #4]
   22e78:	bl	20530 <__assert_fail@plt+0xf5b8>
   22e7c:	cmp	r6, r9
   22e80:	add	r7, r7, r0
   22e84:	bne	22df0 <__assert_fail@plt+0x11e78>
   22e88:	ldr	r0, [sp, #28]
   22e8c:	ldr	r1, [sp, #24]
   22e90:	ldr	r2, [sp, #20]
   22e94:	ldr	r3, [sp, #16]
   22e98:	bl	211cc <__assert_fail@plt+0x10254>
   22e9c:	mov	r0, r4
   22ea0:	bl	10d44 <free@plt>
   22ea4:	mov	r0, r7
   22ea8:	add	sp, sp, #68	; 0x44
   22eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22eb0:	ldr	r0, [sp, #28]
   22eb4:	ldr	r1, [sp, #24]
   22eb8:	ldr	r2, [sp, #20]
   22ebc:	ldr	r3, [sp, #16]
   22ec0:	bl	211cc <__assert_fail@plt+0x10254>
   22ec4:	mov	r0, r9
   22ec8:	add	sp, sp, #68	; 0x44
   22ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ed0:	mov	r7, #0
   22ed4:	b	22e88 <__assert_fail@plt+0x11f10>
   22ed8:	push	{r4, r5, r6, r7, lr}
   22edc:	sub	sp, sp, #60	; 0x3c
   22ee0:	add	r4, sp, #24
   22ee4:	mov	r6, r0
   22ee8:	mov	r5, r1
   22eec:	mov	r0, r4
   22ef0:	bl	1ff08 <__assert_fail@plt+0xef90>
   22ef4:	bl	10e4c <clock@plt>
   22ef8:	add	ip, sp, #56	; 0x38
   22efc:	mov	r7, r0
   22f00:	ldmdb	ip, {r0, r1, r2, r3}
   22f04:	str	r6, [sp, #16]
   22f08:	str	r5, [sp, #20]
   22f0c:	stm	sp, {r0, r1, r2, r3}
   22f10:	ldm	r4, {r0, r1, r2, r3}
   22f14:	bl	22278 <__assert_fail@plt+0x11300>
   22f18:	mov	r4, r0
   22f1c:	bl	10e4c <clock@plt>
   22f20:	movw	r3, #28980	; 0x7134
   22f24:	movt	r3, #3
   22f28:	ldr	r3, [r3]
   22f2c:	cmp	r3, #3
   22f30:	ble	22f68 <__assert_fail@plt+0x11ff0>
   22f34:	rsb	r0, r7, r0
   22f38:	vldr	d6, [pc, #72]	; 22f88 <__assert_fail@plt+0x12010>
   22f3c:	movw	r3, #28940	; 0x710c
   22f40:	movt	r3, #3
   22f44:	vmov	s14, r0
   22f48:	movw	r2, #26052	; 0x65c4
   22f4c:	ldr	r0, [r3]
   22f50:	movt	r2, #2
   22f54:	vcvt.f64.s32	d7, s14
   22f58:	mov	r1, #1
   22f5c:	vdiv.f64	d7, d7, d6
   22f60:	vstr	d7, [sp]
   22f64:	bl	10eac <__fprintf_chk@plt>
   22f68:	ldr	r0, [sp, #24]
   22f6c:	ldr	r1, [sp, #32]
   22f70:	ldr	r2, [sp, #44]	; 0x2c
   22f74:	ldr	r3, [sp, #48]	; 0x30
   22f78:	bl	21298 <__assert_fail@plt+0x10320>
   22f7c:	mov	r0, r4
   22f80:	add	sp, sp, #60	; 0x3c
   22f84:	pop	{r4, r5, r6, r7, pc}
   22f88:	andeq	r0, r0, r0
   22f8c:	smlawbmi	lr, r0, r4, r8
   22f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f94:	sub	sp, sp, #92	; 0x5c
   22f98:	mov	r6, r0
   22f9c:	mov	r0, #30
   22fa0:	add	ip, sp, #56	; 0x38
   22fa4:	mov	r7, r2
   22fa8:	str	ip, [sp, #28]
   22fac:	str	r1, [sp, #40]	; 0x28
   22fb0:	bl	10e1c <malloc@plt>
   22fb4:	str	r0, [sp, #48]	; 0x30
   22fb8:	mov	r0, r7
   22fbc:	bl	10e64 <strlen@plt>
   22fc0:	mov	r8, r0
   22fc4:	add	r0, sp, #56	; 0x38
   22fc8:	bl	1ff08 <__assert_fail@plt+0xef90>
   22fcc:	ldr	ip, [sp, #48]	; 0x30
   22fd0:	cmp	ip, #0
   22fd4:	beq	2315c <__assert_fail@plt+0x121e4>
   22fd8:	movw	r0, #23912	; 0x5d68
   22fdc:	movt	r0, #2
   22fe0:	bl	1f0d4 <__assert_fail@plt+0xe15c>
   22fe4:	ldr	ip, [sp, #40]	; 0x28
   22fe8:	cmp	ip, #0
   22fec:	str	r0, [sp, #72]	; 0x48
   22ff0:	ble	231bc <__assert_fail@plt+0x12244>
   22ff4:	mov	ip, #0
   22ff8:	str	ip, [sp, #44]	; 0x2c
   22ffc:	movw	ip, #28940	; 0x710c
   23000:	movt	ip, #3
   23004:	str	ip, [sp, #52]	; 0x34
   23008:	mov	ip, #0
   2300c:	movw	fp, #28980	; 0x7134
   23010:	str	ip, [sp, #32]
   23014:	mov	r4, ip
   23018:	movt	fp, #3
   2301c:	mov	ip, #30
   23020:	str	ip, [sp, #36]	; 0x24
   23024:	b	230a4 <__assert_fail@plt+0x1212c>
   23028:	rsb	sl, r8, r9
   2302c:	ldr	ip, [sp, #36]	; 0x24
   23030:	add	r2, sl, #1
   23034:	cmp	r2, ip
   23038:	bcs	23138 <__assert_fail@plt+0x121c0>
   2303c:	cmp	r8, r9
   23040:	bcs	23058 <__assert_fail@plt+0x120e0>
   23044:	add	r0, r5, sl
   23048:	mov	r1, r7
   2304c:	bl	10d20 <strcmp@plt>
   23050:	subs	r5, r0, #0
   23054:	beq	2316c <__assert_fail@plt+0x121f4>
   23058:	ldr	r3, [fp]
   2305c:	cmp	r3, #0
   23060:	ble	23088 <__assert_fail@plt+0x12110>
   23064:	ldr	ip, [sp, #52]	; 0x34
   23068:	movw	r2, #26072	; 0x65d8
   2306c:	mov	r1, #1
   23070:	movt	r2, #2
   23074:	mov	r3, r7
   23078:	ldr	r0, [ip]
   2307c:	ldr	ip, [r6, #-4]
   23080:	str	ip, [sp]
   23084:	bl	10eac <__fprintf_chk@plt>
   23088:	ldr	ip, [sp, #32]
   2308c:	add	ip, ip, #1
   23090:	str	ip, [sp, #32]
   23094:	ldr	ip, [sp, #40]	; 0x28
   23098:	add	r4, r4, #1
   2309c:	cmp	r4, ip
   230a0:	beq	23104 <__assert_fail@plt+0x1218c>
   230a4:	ldr	r5, [r6], #4
   230a8:	mov	r0, r5
   230ac:	bl	10e64 <strlen@plt>
   230b0:	movw	r1, #23912	; 0x5d68
   230b4:	movt	r1, #2
   230b8:	mov	r9, r0
   230bc:	mov	r0, r7
   230c0:	bl	10d20 <strcmp@plt>
   230c4:	cmp	r0, #0
   230c8:	bne	23028 <__assert_fail@plt+0x120b0>
   230cc:	add	lr, sp, #88	; 0x58
   230d0:	ldr	ip, [sp, #28]
   230d4:	add	r4, r4, #1
   230d8:	ldmdb	lr, {r0, r1, r2, r3}
   230dc:	str	r5, [sp, #16]
   230e0:	stm	sp, {r0, r1, r2, r3}
   230e4:	ldm	ip, {r0, r1, r2, r3}
   230e8:	bl	2136c <__assert_fail@plt+0x103f4>
   230ec:	ldr	ip, [sp, #44]	; 0x2c
   230f0:	add	ip, ip, r0
   230f4:	str	ip, [sp, #44]	; 0x2c
   230f8:	ldr	ip, [sp, #40]	; 0x28
   230fc:	cmp	r4, ip
   23100:	bne	230a4 <__assert_fail@plt+0x1212c>
   23104:	ldr	ip, [sp, #32]
   23108:	ldr	lr, [sp, #44]	; 0x2c
   2310c:	add	r9, ip, lr
   23110:	ldr	r0, [sp, #56]	; 0x38
   23114:	ldr	r1, [sp, #64]	; 0x40
   23118:	ldr	r2, [sp, #76]	; 0x4c
   2311c:	ldr	r3, [sp, #80]	; 0x50
   23120:	bl	21298 <__assert_fail@plt+0x10320>
   23124:	ldr	r0, [sp, #48]	; 0x30
   23128:	bl	10d44 <free@plt>
   2312c:	mov	r0, r9
   23130:	add	sp, sp, #92	; 0x5c
   23134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23138:	ldr	r0, [sp, #48]	; 0x30
   2313c:	add	ip, r9, #20
   23140:	str	ip, [sp, #36]	; 0x24
   23144:	bl	10d44 <free@plt>
   23148:	ldr	r0, [sp, #36]	; 0x24
   2314c:	bl	10e1c <malloc@plt>
   23150:	cmp	r0, #0
   23154:	str	r0, [sp, #48]	; 0x30
   23158:	bne	2303c <__assert_fail@plt+0x120c4>
   2315c:	ldr	r9, [sp, #40]	; 0x28
   23160:	mov	r0, r9
   23164:	add	sp, sp, #92	; 0x5c
   23168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2316c:	ldr	r1, [r6, #-4]
   23170:	mov	r2, sl
   23174:	ldr	r0, [sp, #48]	; 0x30
   23178:	bl	10d74 <memcpy@plt>
   2317c:	ldr	ip, [sp, #48]	; 0x30
   23180:	add	lr, sp, #88	; 0x58
   23184:	strb	r5, [ip, sl]
   23188:	ldr	ip, [r6, #-4]
   2318c:	ldmdb	lr, {r0, r1, r2, r3}
   23190:	str	ip, [sp, #16]
   23194:	ldr	lr, [sp, #48]	; 0x30
   23198:	ldr	ip, [sp, #28]
   2319c:	stm	sp, {r0, r1, r2, r3}
   231a0:	str	lr, [sp, #20]
   231a4:	ldm	ip, {r0, r1, r2, r3}
   231a8:	bl	22278 <__assert_fail@plt+0x11300>
   231ac:	ldr	ip, [sp, #44]	; 0x2c
   231b0:	add	ip, ip, r0
   231b4:	str	ip, [sp, #44]	; 0x2c
   231b8:	b	23094 <__assert_fail@plt+0x1211c>
   231bc:	mov	r9, #0
   231c0:	b	23110 <__assert_fail@plt+0x12198>
   231c4:	subs	r2, r1, #1
   231c8:	bxeq	lr
   231cc:	bcc	233a4 <__assert_fail@plt+0x1242c>
   231d0:	cmp	r0, r1
   231d4:	bls	23388 <__assert_fail@plt+0x12410>
   231d8:	tst	r1, r2
   231dc:	beq	23394 <__assert_fail@plt+0x1241c>
   231e0:	clz	r3, r0
   231e4:	clz	r2, r1
   231e8:	sub	r3, r2, r3
   231ec:	rsbs	r3, r3, #31
   231f0:	addne	r3, r3, r3, lsl #1
   231f4:	mov	r2, #0
   231f8:	addne	pc, pc, r3, lsl #2
   231fc:	nop	{0}
   23200:	cmp	r0, r1, lsl #31
   23204:	adc	r2, r2, r2
   23208:	subcs	r0, r0, r1, lsl #31
   2320c:	cmp	r0, r1, lsl #30
   23210:	adc	r2, r2, r2
   23214:	subcs	r0, r0, r1, lsl #30
   23218:	cmp	r0, r1, lsl #29
   2321c:	adc	r2, r2, r2
   23220:	subcs	r0, r0, r1, lsl #29
   23224:	cmp	r0, r1, lsl #28
   23228:	adc	r2, r2, r2
   2322c:	subcs	r0, r0, r1, lsl #28
   23230:	cmp	r0, r1, lsl #27
   23234:	adc	r2, r2, r2
   23238:	subcs	r0, r0, r1, lsl #27
   2323c:	cmp	r0, r1, lsl #26
   23240:	adc	r2, r2, r2
   23244:	subcs	r0, r0, r1, lsl #26
   23248:	cmp	r0, r1, lsl #25
   2324c:	adc	r2, r2, r2
   23250:	subcs	r0, r0, r1, lsl #25
   23254:	cmp	r0, r1, lsl #24
   23258:	adc	r2, r2, r2
   2325c:	subcs	r0, r0, r1, lsl #24
   23260:	cmp	r0, r1, lsl #23
   23264:	adc	r2, r2, r2
   23268:	subcs	r0, r0, r1, lsl #23
   2326c:	cmp	r0, r1, lsl #22
   23270:	adc	r2, r2, r2
   23274:	subcs	r0, r0, r1, lsl #22
   23278:	cmp	r0, r1, lsl #21
   2327c:	adc	r2, r2, r2
   23280:	subcs	r0, r0, r1, lsl #21
   23284:	cmp	r0, r1, lsl #20
   23288:	adc	r2, r2, r2
   2328c:	subcs	r0, r0, r1, lsl #20
   23290:	cmp	r0, r1, lsl #19
   23294:	adc	r2, r2, r2
   23298:	subcs	r0, r0, r1, lsl #19
   2329c:	cmp	r0, r1, lsl #18
   232a0:	adc	r2, r2, r2
   232a4:	subcs	r0, r0, r1, lsl #18
   232a8:	cmp	r0, r1, lsl #17
   232ac:	adc	r2, r2, r2
   232b0:	subcs	r0, r0, r1, lsl #17
   232b4:	cmp	r0, r1, lsl #16
   232b8:	adc	r2, r2, r2
   232bc:	subcs	r0, r0, r1, lsl #16
   232c0:	cmp	r0, r1, lsl #15
   232c4:	adc	r2, r2, r2
   232c8:	subcs	r0, r0, r1, lsl #15
   232cc:	cmp	r0, r1, lsl #14
   232d0:	adc	r2, r2, r2
   232d4:	subcs	r0, r0, r1, lsl #14
   232d8:	cmp	r0, r1, lsl #13
   232dc:	adc	r2, r2, r2
   232e0:	subcs	r0, r0, r1, lsl #13
   232e4:	cmp	r0, r1, lsl #12
   232e8:	adc	r2, r2, r2
   232ec:	subcs	r0, r0, r1, lsl #12
   232f0:	cmp	r0, r1, lsl #11
   232f4:	adc	r2, r2, r2
   232f8:	subcs	r0, r0, r1, lsl #11
   232fc:	cmp	r0, r1, lsl #10
   23300:	adc	r2, r2, r2
   23304:	subcs	r0, r0, r1, lsl #10
   23308:	cmp	r0, r1, lsl #9
   2330c:	adc	r2, r2, r2
   23310:	subcs	r0, r0, r1, lsl #9
   23314:	cmp	r0, r1, lsl #8
   23318:	adc	r2, r2, r2
   2331c:	subcs	r0, r0, r1, lsl #8
   23320:	cmp	r0, r1, lsl #7
   23324:	adc	r2, r2, r2
   23328:	subcs	r0, r0, r1, lsl #7
   2332c:	cmp	r0, r1, lsl #6
   23330:	adc	r2, r2, r2
   23334:	subcs	r0, r0, r1, lsl #6
   23338:	cmp	r0, r1, lsl #5
   2333c:	adc	r2, r2, r2
   23340:	subcs	r0, r0, r1, lsl #5
   23344:	cmp	r0, r1, lsl #4
   23348:	adc	r2, r2, r2
   2334c:	subcs	r0, r0, r1, lsl #4
   23350:	cmp	r0, r1, lsl #3
   23354:	adc	r2, r2, r2
   23358:	subcs	r0, r0, r1, lsl #3
   2335c:	cmp	r0, r1, lsl #2
   23360:	adc	r2, r2, r2
   23364:	subcs	r0, r0, r1, lsl #2
   23368:	cmp	r0, r1, lsl #1
   2336c:	adc	r2, r2, r2
   23370:	subcs	r0, r0, r1, lsl #1
   23374:	cmp	r0, r1
   23378:	adc	r2, r2, r2
   2337c:	subcs	r0, r0, r1
   23380:	mov	r0, r2
   23384:	bx	lr
   23388:	moveq	r0, #1
   2338c:	movne	r0, #0
   23390:	bx	lr
   23394:	clz	r2, r1
   23398:	rsb	r2, r2, #31
   2339c:	lsr	r0, r0, r2
   233a0:	bx	lr
   233a4:	cmp	r0, #0
   233a8:	mvnne	r0, #0
   233ac:	b	237c4 <__assert_fail@plt+0x1284c>
   233b0:	cmp	r1, #0
   233b4:	beq	233a4 <__assert_fail@plt+0x1242c>
   233b8:	push	{r0, r1, lr}
   233bc:	bl	231c4 <__assert_fail@plt+0x1224c>
   233c0:	pop	{r1, r2, lr}
   233c4:	mul	r3, r2, r0
   233c8:	sub	r1, r1, r3
   233cc:	bx	lr
   233d0:	eor	r1, r1, #-2147483648	; 0x80000000
   233d4:	b	233dc <__assert_fail@plt+0x12464>
   233d8:	eor	r3, r3, #-2147483648	; 0x80000000
   233dc:	push	{r4, r5, lr}
   233e0:	lsl	r4, r1, #1
   233e4:	lsl	r5, r3, #1
   233e8:	teq	r4, r5
   233ec:	teqeq	r0, r2
   233f0:	orrsne	ip, r4, r0
   233f4:	orrsne	ip, r5, r2
   233f8:	mvnsne	ip, r4, asr #21
   233fc:	mvnsne	ip, r5, asr #21
   23400:	beq	235ec <__assert_fail@plt+0x12674>
   23404:	lsr	r4, r4, #21
   23408:	rsbs	r5, r4, r5, lsr #21
   2340c:	rsblt	r5, r5, #0
   23410:	ble	23430 <__assert_fail@plt+0x124b8>
   23414:	add	r4, r4, r5
   23418:	eor	r2, r0, r2
   2341c:	eor	r3, r1, r3
   23420:	eor	r0, r2, r0
   23424:	eor	r1, r3, r1
   23428:	eor	r2, r0, r2
   2342c:	eor	r3, r1, r3
   23430:	cmp	r5, #54	; 0x36
   23434:	pophi	{r4, r5, pc}
   23438:	tst	r1, #-2147483648	; 0x80000000
   2343c:	lsl	r1, r1, #12
   23440:	mov	ip, #1048576	; 0x100000
   23444:	orr	r1, ip, r1, lsr #12
   23448:	beq	23454 <__assert_fail@plt+0x124dc>
   2344c:	rsbs	r0, r0, #0
   23450:	rsc	r1, r1, #0
   23454:	tst	r3, #-2147483648	; 0x80000000
   23458:	lsl	r3, r3, #12
   2345c:	orr	r3, ip, r3, lsr #12
   23460:	beq	2346c <__assert_fail@plt+0x124f4>
   23464:	rsbs	r2, r2, #0
   23468:	rsc	r3, r3, #0
   2346c:	teq	r4, r5
   23470:	beq	235d4 <__assert_fail@plt+0x1265c>
   23474:	sub	r4, r4, #1
   23478:	rsbs	lr, r5, #32
   2347c:	blt	23498 <__assert_fail@plt+0x12520>
   23480:	lsl	ip, r2, lr
   23484:	adds	r0, r0, r2, lsr r5
   23488:	adc	r1, r1, #0
   2348c:	adds	r0, r0, r3, lsl lr
   23490:	adcs	r1, r1, r3, asr r5
   23494:	b	234b4 <__assert_fail@plt+0x1253c>
   23498:	sub	r5, r5, #32
   2349c:	add	lr, lr, #32
   234a0:	cmp	r2, #1
   234a4:	lsl	ip, r3, lr
   234a8:	orrcs	ip, ip, #2
   234ac:	adds	r0, r0, r3, asr r5
   234b0:	adcs	r1, r1, r3, asr #31
   234b4:	and	r5, r1, #-2147483648	; 0x80000000
   234b8:	bpl	234c8 <__assert_fail@plt+0x12550>
   234bc:	rsbs	ip, ip, #0
   234c0:	rscs	r0, r0, #0
   234c4:	rsc	r1, r1, #0
   234c8:	cmp	r1, #1048576	; 0x100000
   234cc:	bcc	2350c <__assert_fail@plt+0x12594>
   234d0:	cmp	r1, #2097152	; 0x200000
   234d4:	bcc	234f4 <__assert_fail@plt+0x1257c>
   234d8:	lsrs	r1, r1, #1
   234dc:	rrxs	r0, r0
   234e0:	rrx	ip, ip
   234e4:	add	r4, r4, #1
   234e8:	lsl	r2, r4, #21
   234ec:	cmn	r2, #4194304	; 0x400000
   234f0:	bcs	2364c <__assert_fail@plt+0x126d4>
   234f4:	cmp	ip, #-2147483648	; 0x80000000
   234f8:	lsrseq	ip, r0, #1
   234fc:	adcs	r0, r0, #0
   23500:	adc	r1, r1, r4, lsl #20
   23504:	orr	r1, r1, r5
   23508:	pop	{r4, r5, pc}
   2350c:	lsls	ip, ip, #1
   23510:	adcs	r0, r0, r0
   23514:	adc	r1, r1, r1
   23518:	tst	r1, #1048576	; 0x100000
   2351c:	sub	r4, r4, #1
   23520:	bne	234f4 <__assert_fail@plt+0x1257c>
   23524:	teq	r1, #0
   23528:	moveq	r1, r0
   2352c:	moveq	r0, #0
   23530:	clz	r3, r1
   23534:	addeq	r3, r3, #32
   23538:	sub	r3, r3, #11
   2353c:	subs	r2, r3, #32
   23540:	bge	23564 <__assert_fail@plt+0x125ec>
   23544:	adds	r2, r2, #12
   23548:	ble	23560 <__assert_fail@plt+0x125e8>
   2354c:	add	ip, r2, #20
   23550:	rsb	r2, r2, #12
   23554:	lsl	r0, r1, ip
   23558:	lsr	r1, r1, r2
   2355c:	b	23574 <__assert_fail@plt+0x125fc>
   23560:	add	r2, r2, #20
   23564:	rsble	ip, r2, #32
   23568:	lsl	r1, r1, r2
   2356c:	orrle	r1, r1, r0, lsr ip
   23570:	lslle	r0, r0, r2
   23574:	subs	r4, r4, r3
   23578:	addge	r1, r1, r4, lsl #20
   2357c:	orrge	r1, r1, r5
   23580:	popge	{r4, r5, pc}
   23584:	mvn	r4, r4
   23588:	subs	r4, r4, #31
   2358c:	bge	235c8 <__assert_fail@plt+0x12650>
   23590:	adds	r4, r4, #12
   23594:	bgt	235b0 <__assert_fail@plt+0x12638>
   23598:	add	r4, r4, #20
   2359c:	rsb	r2, r4, #32
   235a0:	lsr	r0, r0, r4
   235a4:	orr	r0, r0, r1, lsl r2
   235a8:	orr	r1, r5, r1, lsr r4
   235ac:	pop	{r4, r5, pc}
   235b0:	rsb	r4, r4, #12
   235b4:	rsb	r2, r4, #32
   235b8:	lsr	r0, r0, r2
   235bc:	orr	r0, r0, r1, lsl r4
   235c0:	mov	r1, r5
   235c4:	pop	{r4, r5, pc}
   235c8:	lsr	r0, r1, r4
   235cc:	mov	r1, r5
   235d0:	pop	{r4, r5, pc}
   235d4:	teq	r4, #0
   235d8:	eor	r3, r3, #1048576	; 0x100000
   235dc:	eoreq	r1, r1, #1048576	; 0x100000
   235e0:	addeq	r4, r4, #1
   235e4:	subne	r5, r5, #1
   235e8:	b	23474 <__assert_fail@plt+0x124fc>
   235ec:	mvns	ip, r4, asr #21
   235f0:	mvnsne	ip, r5, asr #21
   235f4:	beq	2365c <__assert_fail@plt+0x126e4>
   235f8:	teq	r4, r5
   235fc:	teqeq	r0, r2
   23600:	beq	23614 <__assert_fail@plt+0x1269c>
   23604:	orrs	ip, r4, r0
   23608:	moveq	r1, r3
   2360c:	moveq	r0, r2
   23610:	pop	{r4, r5, pc}
   23614:	teq	r1, r3
   23618:	movne	r1, #0
   2361c:	movne	r0, #0
   23620:	popne	{r4, r5, pc}
   23624:	lsrs	ip, r4, #21
   23628:	bne	2363c <__assert_fail@plt+0x126c4>
   2362c:	lsls	r0, r0, #1
   23630:	adcs	r1, r1, r1
   23634:	orrcs	r1, r1, #-2147483648	; 0x80000000
   23638:	pop	{r4, r5, pc}
   2363c:	adds	r4, r4, #4194304	; 0x400000
   23640:	addcc	r1, r1, #1048576	; 0x100000
   23644:	popcc	{r4, r5, pc}
   23648:	and	r5, r1, #-2147483648	; 0x80000000
   2364c:	orr	r1, r5, #2130706432	; 0x7f000000
   23650:	orr	r1, r1, #15728640	; 0xf00000
   23654:	mov	r0, #0
   23658:	pop	{r4, r5, pc}
   2365c:	mvns	ip, r4, asr #21
   23660:	movne	r1, r3
   23664:	movne	r0, r2
   23668:	mvnseq	ip, r5, asr #21
   2366c:	movne	r3, r1
   23670:	movne	r2, r0
   23674:	orrs	r4, r0, r1, lsl #12
   23678:	orrseq	r5, r2, r3, lsl #12
   2367c:	teqeq	r1, r3
   23680:	orrne	r1, r1, #524288	; 0x80000
   23684:	pop	{r4, r5, pc}
   23688:	teq	r0, #0
   2368c:	moveq	r1, #0
   23690:	bxeq	lr
   23694:	push	{r4, r5, lr}
   23698:	mov	r4, #1024	; 0x400
   2369c:	add	r4, r4, #50	; 0x32
   236a0:	mov	r5, #0
   236a4:	mov	r1, #0
   236a8:	b	23524 <__assert_fail@plt+0x125ac>
   236ac:	teq	r0, #0
   236b0:	moveq	r1, #0
   236b4:	bxeq	lr
   236b8:	push	{r4, r5, lr}
   236bc:	mov	r4, #1024	; 0x400
   236c0:	add	r4, r4, #50	; 0x32
   236c4:	ands	r5, r0, #-2147483648	; 0x80000000
   236c8:	rsbmi	r0, r0, #0
   236cc:	mov	r1, #0
   236d0:	b	23524 <__assert_fail@plt+0x125ac>
   236d4:	lsls	r2, r0, #1
   236d8:	asr	r1, r2, #3
   236dc:	rrx	r1, r1
   236e0:	lsl	r0, r2, #28
   236e4:	andsne	r3, r2, #-16777216	; 0xff000000
   236e8:	teqne	r3, #-16777216	; 0xff000000
   236ec:	eorne	r1, r1, #939524096	; 0x38000000
   236f0:	bxne	lr
   236f4:	teq	r2, #0
   236f8:	teqne	r3, #-16777216	; 0xff000000
   236fc:	bxeq	lr
   23700:	push	{r4, r5, lr}
   23704:	mov	r4, #896	; 0x380
   23708:	and	r5, r1, #-2147483648	; 0x80000000
   2370c:	bic	r1, r1, #-2147483648	; 0x80000000
   23710:	b	23524 <__assert_fail@plt+0x125ac>
   23714:	orrs	r2, r0, r1
   23718:	bxeq	lr
   2371c:	push	{r4, r5, lr}
   23720:	mov	r5, #0
   23724:	b	23744 <__assert_fail@plt+0x127cc>
   23728:	orrs	r2, r0, r1
   2372c:	bxeq	lr
   23730:	push	{r4, r5, lr}
   23734:	ands	r5, r1, #-2147483648	; 0x80000000
   23738:	bpl	23744 <__assert_fail@plt+0x127cc>
   2373c:	rsbs	r0, r0, #0
   23740:	rsc	r1, r1, #0
   23744:	mov	r4, #1024	; 0x400
   23748:	add	r4, r4, #50	; 0x32
   2374c:	lsrs	ip, r1, #22
   23750:	beq	234c8 <__assert_fail@plt+0x12550>
   23754:	mov	r2, #3
   23758:	lsrs	ip, ip, #3
   2375c:	addne	r2, r2, #3
   23760:	lsrs	ip, ip, #3
   23764:	addne	r2, r2, #3
   23768:	add	r2, r2, ip, lsr #3
   2376c:	rsb	r3, r2, #32
   23770:	lsl	ip, r0, r3
   23774:	lsr	r0, r0, r2
   23778:	orr	r0, r0, r1, lsl r3
   2377c:	lsr	r1, r1, r2
   23780:	add	r4, r4, r2
   23784:	b	234c8 <__assert_fail@plt+0x12550>
   23788:	cmp	r3, #0
   2378c:	cmpeq	r2, #0
   23790:	bne	237a8 <__assert_fail@plt+0x12830>
   23794:	cmp	r1, #0
   23798:	cmpeq	r0, #0
   2379c:	mvnne	r1, #0
   237a0:	mvnne	r0, #0
   237a4:	b	237c4 <__assert_fail@plt+0x1284c>
   237a8:	sub	sp, sp, #8
   237ac:	push	{sp, lr}
   237b0:	bl	23810 <__assert_fail@plt+0x12898>
   237b4:	ldr	lr, [sp, #4]
   237b8:	add	sp, sp, #8
   237bc:	pop	{r2, r3}
   237c0:	bx	lr
   237c4:	push	{r1, lr}
   237c8:	mov	r0, #8
   237cc:	bl	10d14 <raise@plt>
   237d0:	pop	{r1, pc}
   237d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   237d8:	mov	r8, r2
   237dc:	mov	r6, r0
   237e0:	mov	r7, r1
   237e4:	mov	sl, r3
   237e8:	ldr	r9, [sp, #32]
   237ec:	bl	2384c <__assert_fail@plt+0x128d4>
   237f0:	umull	r4, r5, r8, r0
   237f4:	mul	r8, r8, r1
   237f8:	mla	r2, r0, sl, r8
   237fc:	add	r5, r2, r5
   23800:	subs	r4, r6, r4
   23804:	sbc	r5, r7, r5
   23808:	strd	r4, [r9]
   2380c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23810:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   23814:	mov	r8, r2
   23818:	mov	r6, r0
   2381c:	mov	r7, r1
   23820:	mov	r5, r3
   23824:	ldr	r9, [sp, #32]
   23828:	bl	23cd8 <__assert_fail@plt+0x12d60>
   2382c:	mul	r3, r0, r5
   23830:	umull	r4, r5, r0, r8
   23834:	mla	r8, r8, r1, r3
   23838:	add	r5, r8, r5
   2383c:	subs	r4, r6, r4
   23840:	sbc	r5, r7, r5
   23844:	strd	r4, [r9]
   23848:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2384c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23850:	rsbs	r4, r0, #0
   23854:	rsc	r5, r1, #0
   23858:	cmp	r1, #0
   2385c:	mvn	r6, #0
   23860:	sub	sp, sp, #12
   23864:	movge	r4, r0
   23868:	movge	r5, r1
   2386c:	movge	r6, #0
   23870:	cmp	r3, #0
   23874:	blt	23aac <__assert_fail@plt+0x12b34>
   23878:	cmp	r3, #0
   2387c:	mov	sl, r4
   23880:	mov	ip, r5
   23884:	mov	r0, r2
   23888:	mov	r1, r3
   2388c:	mov	r8, r2
   23890:	mov	r7, r4
   23894:	mov	r9, r5
   23898:	bne	23990 <__assert_fail@plt+0x12a18>
   2389c:	cmp	r2, r5
   238a0:	bls	239cc <__assert_fail@plt+0x12a54>
   238a4:	clz	r3, r2
   238a8:	cmp	r3, #0
   238ac:	rsbne	r2, r3, #32
   238b0:	lslne	r8, r0, r3
   238b4:	lsrne	r2, r4, r2
   238b8:	lslne	r7, r4, r3
   238bc:	orrne	r9, r2, r5, lsl r3
   238c0:	lsr	r4, r8, #16
   238c4:	uxth	sl, r8
   238c8:	mov	r1, r4
   238cc:	mov	r0, r9
   238d0:	bl	231c4 <__assert_fail@plt+0x1224c>
   238d4:	mov	r1, r4
   238d8:	mov	fp, r0
   238dc:	mov	r0, r9
   238e0:	bl	233b0 <__assert_fail@plt+0x12438>
   238e4:	mul	r0, sl, fp
   238e8:	lsr	r2, r7, #16
   238ec:	orr	r1, r2, r1, lsl #16
   238f0:	cmp	r0, r1
   238f4:	bls	23918 <__assert_fail@plt+0x129a0>
   238f8:	adds	r1, r1, r8
   238fc:	sub	r3, fp, #1
   23900:	bcs	23914 <__assert_fail@plt+0x1299c>
   23904:	cmp	r0, r1
   23908:	subhi	fp, fp, #2
   2390c:	addhi	r1, r1, r8
   23910:	bhi	23918 <__assert_fail@plt+0x129a0>
   23914:	mov	fp, r3
   23918:	rsb	r9, r0, r1
   2391c:	mov	r1, r4
   23920:	uxth	r7, r7
   23924:	mov	r0, r9
   23928:	bl	231c4 <__assert_fail@plt+0x1224c>
   2392c:	mov	r1, r4
   23930:	mov	r5, r0
   23934:	mov	r0, r9
   23938:	bl	233b0 <__assert_fail@plt+0x12438>
   2393c:	mul	sl, sl, r5
   23940:	orr	r1, r7, r1, lsl #16
   23944:	cmp	sl, r1
   23948:	bls	23968 <__assert_fail@plt+0x129f0>
   2394c:	adds	r8, r1, r8
   23950:	sub	r3, r5, #1
   23954:	bcs	23964 <__assert_fail@plt+0x129ec>
   23958:	cmp	sl, r8
   2395c:	subhi	r5, r5, #2
   23960:	bhi	23968 <__assert_fail@plt+0x129f0>
   23964:	mov	r5, r3
   23968:	orr	r3, r5, fp, lsl #16
   2396c:	mov	r4, #0
   23970:	cmp	r6, #0
   23974:	mov	r0, r3
   23978:	mov	r1, r4
   2397c:	beq	23988 <__assert_fail@plt+0x12a10>
   23980:	rsbs	r0, r0, #0
   23984:	rsc	r1, r1, #0
   23988:	add	sp, sp, #12
   2398c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23990:	cmp	r3, r5
   23994:	movhi	r4, #0
   23998:	movhi	r3, r4
   2399c:	bhi	23970 <__assert_fail@plt+0x129f8>
   239a0:	clz	r5, r1
   239a4:	cmp	r5, #0
   239a8:	bne	23b98 <__assert_fail@plt+0x12c20>
   239ac:	cmp	r1, ip
   239b0:	cmpcs	r2, sl
   239b4:	movhi	r4, #0
   239b8:	movls	r4, #1
   239bc:	movls	r3, #1
   239c0:	movls	r4, r5
   239c4:	movhi	r3, r4
   239c8:	b	23970 <__assert_fail@plt+0x129f8>
   239cc:	cmp	r2, #0
   239d0:	bne	239e4 <__assert_fail@plt+0x12a6c>
   239d4:	mov	r1, r2
   239d8:	mov	r0, #1
   239dc:	bl	231c4 <__assert_fail@plt+0x1224c>
   239e0:	mov	r8, r0
   239e4:	clz	r3, r8
   239e8:	cmp	r3, #0
   239ec:	bne	23abc <__assert_fail@plt+0x12b44>
   239f0:	rsb	r9, r8, r9
   239f4:	lsr	r5, r8, #16
   239f8:	uxth	sl, r8
   239fc:	mov	r4, #1
   23a00:	mov	r1, r5
   23a04:	mov	r0, r9
   23a08:	bl	231c4 <__assert_fail@plt+0x1224c>
   23a0c:	mov	r1, r5
   23a10:	mov	fp, r0
   23a14:	mov	r0, r9
   23a18:	bl	233b0 <__assert_fail@plt+0x12438>
   23a1c:	mul	r0, sl, fp
   23a20:	lsr	r2, r7, #16
   23a24:	orr	r1, r2, r1, lsl #16
   23a28:	cmp	r0, r1
   23a2c:	bls	23a4c <__assert_fail@plt+0x12ad4>
   23a30:	adds	r1, r1, r8
   23a34:	sub	r3, fp, #1
   23a38:	bcs	23cb8 <__assert_fail@plt+0x12d40>
   23a3c:	cmp	r0, r1
   23a40:	subhi	fp, fp, #2
   23a44:	addhi	r1, r1, r8
   23a48:	bls	23cb8 <__assert_fail@plt+0x12d40>
   23a4c:	rsb	r2, r0, r1
   23a50:	mov	r1, r5
   23a54:	str	r2, [sp]
   23a58:	uxth	r7, r7
   23a5c:	mov	r0, r2
   23a60:	bl	231c4 <__assert_fail@plt+0x1224c>
   23a64:	ldr	r2, [sp]
   23a68:	mov	r1, r5
   23a6c:	mov	r9, r0
   23a70:	mov	r0, r2
   23a74:	bl	233b0 <__assert_fail@plt+0x12438>
   23a78:	mul	sl, sl, r9
   23a7c:	orr	r1, r7, r1, lsl #16
   23a80:	cmp	sl, r1
   23a84:	bls	23aa4 <__assert_fail@plt+0x12b2c>
   23a88:	adds	r8, r1, r8
   23a8c:	sub	r3, r9, #1
   23a90:	bcs	23aa0 <__assert_fail@plt+0x12b28>
   23a94:	cmp	sl, r8
   23a98:	subhi	r9, r9, #2
   23a9c:	bhi	23aa4 <__assert_fail@plt+0x12b2c>
   23aa0:	mov	r9, r3
   23aa4:	orr	r3, r9, fp, lsl #16
   23aa8:	b	23970 <__assert_fail@plt+0x129f8>
   23aac:	mvn	r6, r6
   23ab0:	rsbs	r2, r2, #0
   23ab4:	rsc	r3, r3, #0
   23ab8:	b	23878 <__assert_fail@plt+0x12900>
   23abc:	lsl	r8, r8, r3
   23ac0:	rsb	fp, r3, #32
   23ac4:	lsr	r4, r9, fp
   23ac8:	lsr	fp, r7, fp
   23acc:	lsr	r5, r8, #16
   23ad0:	orr	fp, fp, r9, lsl r3
   23ad4:	mov	r0, r4
   23ad8:	lsl	r7, r7, r3
   23adc:	mov	r1, r5
   23ae0:	uxth	sl, r8
   23ae4:	bl	231c4 <__assert_fail@plt+0x1224c>
   23ae8:	mov	r1, r5
   23aec:	mov	r3, r0
   23af0:	mov	r0, r4
   23af4:	str	r3, [sp]
   23af8:	bl	233b0 <__assert_fail@plt+0x12438>
   23afc:	ldr	r3, [sp]
   23b00:	lsr	r2, fp, #16
   23b04:	mul	r0, sl, r3
   23b08:	orr	r1, r2, r1, lsl #16
   23b0c:	cmp	r0, r1
   23b10:	bls	23b30 <__assert_fail@plt+0x12bb8>
   23b14:	adds	r1, r1, r8
   23b18:	sub	r2, r3, #1
   23b1c:	bcs	23cd0 <__assert_fail@plt+0x12d58>
   23b20:	cmp	r0, r1
   23b24:	subhi	r3, r3, #2
   23b28:	addhi	r1, r1, r8
   23b2c:	bls	23cd0 <__assert_fail@plt+0x12d58>
   23b30:	rsb	r9, r0, r1
   23b34:	mov	r1, r5
   23b38:	str	r3, [sp]
   23b3c:	uxth	fp, fp
   23b40:	mov	r0, r9
   23b44:	bl	231c4 <__assert_fail@plt+0x1224c>
   23b48:	mov	r1, r5
   23b4c:	mov	r4, r0
   23b50:	mov	r0, r9
   23b54:	bl	233b0 <__assert_fail@plt+0x12438>
   23b58:	mul	r9, sl, r4
   23b5c:	ldr	r3, [sp]
   23b60:	orr	r1, fp, r1, lsl #16
   23b64:	cmp	r9, r1
   23b68:	bls	23b8c <__assert_fail@plt+0x12c14>
   23b6c:	adds	r1, r1, r8
   23b70:	sub	r2, r4, #1
   23b74:	bcs	23b88 <__assert_fail@plt+0x12c10>
   23b78:	cmp	r9, r1
   23b7c:	subhi	r4, r4, #2
   23b80:	addhi	r1, r1, r8
   23b84:	bhi	23b8c <__assert_fail@plt+0x12c14>
   23b88:	mov	r4, r2
   23b8c:	rsb	r9, r9, r1
   23b90:	orr	r4, r4, r3, lsl #16
   23b94:	b	23a00 <__assert_fail@plt+0x12a88>
   23b98:	rsb	sl, r5, #32
   23b9c:	lsl	r3, r2, r5
   23ba0:	lsr	r0, r2, sl
   23ba4:	lsr	r2, ip, sl
   23ba8:	orr	r4, r0, r1, lsl r5
   23bac:	lsr	sl, r7, sl
   23bb0:	mov	r0, r2
   23bb4:	orr	sl, sl, ip, lsl r5
   23bb8:	lsr	r9, r4, #16
   23bbc:	str	r3, [sp, #4]
   23bc0:	str	r2, [sp]
   23bc4:	uxth	fp, r4
   23bc8:	mov	r1, r9
   23bcc:	bl	231c4 <__assert_fail@plt+0x1224c>
   23bd0:	ldr	r2, [sp]
   23bd4:	mov	r1, r9
   23bd8:	mov	r8, r0
   23bdc:	mov	r0, r2
   23be0:	bl	233b0 <__assert_fail@plt+0x12438>
   23be4:	mul	r0, fp, r8
   23be8:	lsr	r2, sl, #16
   23bec:	orr	r1, r2, r1, lsl #16
   23bf0:	cmp	r0, r1
   23bf4:	bls	23c14 <__assert_fail@plt+0x12c9c>
   23bf8:	adds	r1, r1, r4
   23bfc:	sub	r2, r8, #1
   23c00:	bcs	23cc8 <__assert_fail@plt+0x12d50>
   23c04:	cmp	r0, r1
   23c08:	subhi	r8, r8, #2
   23c0c:	addhi	r1, r1, r4
   23c10:	bls	23cc8 <__assert_fail@plt+0x12d50>
   23c14:	rsb	ip, r0, r1
   23c18:	mov	r1, r9
   23c1c:	str	ip, [sp]
   23c20:	mov	r0, ip
   23c24:	bl	231c4 <__assert_fail@plt+0x1224c>
   23c28:	ldr	ip, [sp]
   23c2c:	mov	r1, r9
   23c30:	mov	r2, r0
   23c34:	mov	r0, ip
   23c38:	str	r2, [sp]
   23c3c:	bl	233b0 <__assert_fail@plt+0x12438>
   23c40:	ldr	r2, [sp]
   23c44:	uxth	ip, sl
   23c48:	mul	fp, fp, r2
   23c4c:	orr	ip, ip, r1, lsl #16
   23c50:	cmp	fp, ip
   23c54:	bls	23c74 <__assert_fail@plt+0x12cfc>
   23c58:	adds	ip, ip, r4
   23c5c:	sub	r1, r2, #1
   23c60:	bcs	23cc0 <__assert_fail@plt+0x12d48>
   23c64:	cmp	fp, ip
   23c68:	subhi	r2, r2, #2
   23c6c:	addhi	ip, ip, r4
   23c70:	bls	23cc0 <__assert_fail@plt+0x12d48>
   23c74:	ldr	r0, [sp, #4]
   23c78:	orr	r1, r2, r8, lsl #16
   23c7c:	rsb	fp, fp, ip
   23c80:	umull	r2, r3, r1, r0
   23c84:	cmp	fp, r3
   23c88:	bcc	23cac <__assert_fail@plt+0x12d34>
   23c8c:	movne	r4, #0
   23c90:	moveq	r4, #1
   23c94:	cmp	r2, r7, lsl r5
   23c98:	movls	r4, #0
   23c9c:	andhi	r4, r4, #1
   23ca0:	cmp	r4, #0
   23ca4:	moveq	r3, r1
   23ca8:	beq	23970 <__assert_fail@plt+0x129f8>
   23cac:	sub	r3, r1, #1
   23cb0:	mov	r4, #0
   23cb4:	b	23970 <__assert_fail@plt+0x129f8>
   23cb8:	mov	fp, r3
   23cbc:	b	23a4c <__assert_fail@plt+0x12ad4>
   23cc0:	mov	r2, r1
   23cc4:	b	23c74 <__assert_fail@plt+0x12cfc>
   23cc8:	mov	r8, r2
   23ccc:	b	23c14 <__assert_fail@plt+0x12c9c>
   23cd0:	mov	r3, r2
   23cd4:	b	23b30 <__assert_fail@plt+0x12bb8>
   23cd8:	cmp	r3, #0
   23cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ce0:	mov	r6, r0
   23ce4:	sub	sp, sp, #12
   23ce8:	mov	r5, r1
   23cec:	mov	r7, r0
   23cf0:	mov	r4, r2
   23cf4:	mov	r8, r1
   23cf8:	bne	23dd8 <__assert_fail@plt+0x12e60>
   23cfc:	cmp	r2, r1
   23d00:	bls	23e14 <__assert_fail@plt+0x12e9c>
   23d04:	clz	r3, r2
   23d08:	cmp	r3, #0
   23d0c:	rsbne	r8, r3, #32
   23d10:	lslne	r4, r2, r3
   23d14:	lsrne	r8, r0, r8
   23d18:	lslne	r7, r0, r3
   23d1c:	orrne	r8, r8, r1, lsl r3
   23d20:	lsr	r5, r4, #16
   23d24:	uxth	sl, r4
   23d28:	mov	r1, r5
   23d2c:	mov	r0, r8
   23d30:	bl	231c4 <__assert_fail@plt+0x1224c>
   23d34:	mov	r1, r5
   23d38:	mov	r9, r0
   23d3c:	mov	r0, r8
   23d40:	bl	233b0 <__assert_fail@plt+0x12438>
   23d44:	mul	r0, sl, r9
   23d48:	lsr	r3, r7, #16
   23d4c:	orr	r1, r3, r1, lsl #16
   23d50:	cmp	r0, r1
   23d54:	bls	23d78 <__assert_fail@plt+0x12e00>
   23d58:	adds	r1, r1, r4
   23d5c:	sub	r2, r9, #1
   23d60:	bcs	23d74 <__assert_fail@plt+0x12dfc>
   23d64:	cmp	r0, r1
   23d68:	subhi	r9, r9, #2
   23d6c:	addhi	r1, r1, r4
   23d70:	bhi	23d78 <__assert_fail@plt+0x12e00>
   23d74:	mov	r9, r2
   23d78:	rsb	r8, r0, r1
   23d7c:	mov	r1, r5
   23d80:	uxth	r7, r7
   23d84:	mov	r0, r8
   23d88:	bl	231c4 <__assert_fail@plt+0x1224c>
   23d8c:	mov	r1, r5
   23d90:	mov	r6, r0
   23d94:	mov	r0, r8
   23d98:	bl	233b0 <__assert_fail@plt+0x12438>
   23d9c:	mul	sl, sl, r6
   23da0:	orr	r1, r7, r1, lsl #16
   23da4:	cmp	sl, r1
   23da8:	bls	23dc4 <__assert_fail@plt+0x12e4c>
   23dac:	adds	r4, r1, r4
   23db0:	sub	r3, r6, #1
   23db4:	bcs	240c0 <__assert_fail@plt+0x13148>
   23db8:	cmp	sl, r4
   23dbc:	subhi	r6, r6, #2
   23dc0:	bls	240c0 <__assert_fail@plt+0x13148>
   23dc4:	orr	r0, r6, r9, lsl #16
   23dc8:	mov	r6, #0
   23dcc:	mov	r1, r6
   23dd0:	add	sp, sp, #12
   23dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23dd8:	cmp	r3, r1
   23ddc:	movhi	r6, #0
   23de0:	movhi	r0, r6
   23de4:	bhi	23dcc <__assert_fail@plt+0x12e54>
   23de8:	clz	r7, r3
   23dec:	cmp	r7, #0
   23df0:	bne	23ef0 <__assert_fail@plt+0x12f78>
   23df4:	cmp	r3, r1
   23df8:	cmpcs	r2, r6
   23dfc:	movhi	r6, #0
   23e00:	movls	r6, #1
   23e04:	movls	r0, #1
   23e08:	movls	r6, r7
   23e0c:	movhi	r0, r6
   23e10:	b	23dcc <__assert_fail@plt+0x12e54>
   23e14:	cmp	r2, #0
   23e18:	bne	23e2c <__assert_fail@plt+0x12eb4>
   23e1c:	mov	r1, r2
   23e20:	mov	r0, #1
   23e24:	bl	231c4 <__assert_fail@plt+0x1224c>
   23e28:	mov	r4, r0
   23e2c:	clz	r3, r4
   23e30:	cmp	r3, #0
   23e34:	bne	23fec <__assert_fail@plt+0x13074>
   23e38:	rsb	r5, r4, r5
   23e3c:	lsr	r8, r4, #16
   23e40:	uxth	sl, r4
   23e44:	mov	r6, #1
   23e48:	mov	r1, r8
   23e4c:	mov	r0, r5
   23e50:	bl	231c4 <__assert_fail@plt+0x1224c>
   23e54:	mov	r1, r8
   23e58:	mov	r9, r0
   23e5c:	mov	r0, r5
   23e60:	bl	233b0 <__assert_fail@plt+0x12438>
   23e64:	mul	r0, sl, r9
   23e68:	lsr	r3, r7, #16
   23e6c:	orr	r1, r3, r1, lsl #16
   23e70:	cmp	r0, r1
   23e74:	bls	23e94 <__assert_fail@plt+0x12f1c>
   23e78:	adds	r1, r1, r4
   23e7c:	sub	r2, r9, #1
   23e80:	bcs	240c8 <__assert_fail@plt+0x13150>
   23e84:	cmp	r0, r1
   23e88:	subhi	r9, r9, #2
   23e8c:	addhi	r1, r1, r4
   23e90:	bls	240c8 <__assert_fail@plt+0x13150>
   23e94:	rsb	fp, r0, r1
   23e98:	mov	r1, r8
   23e9c:	uxth	r7, r7
   23ea0:	mov	r0, fp
   23ea4:	bl	231c4 <__assert_fail@plt+0x1224c>
   23ea8:	mov	r1, r8
   23eac:	mov	r5, r0
   23eb0:	mov	r0, fp
   23eb4:	bl	233b0 <__assert_fail@plt+0x12438>
   23eb8:	mul	sl, sl, r5
   23ebc:	orr	r1, r7, r1, lsl #16
   23ec0:	cmp	sl, r1
   23ec4:	bls	23ee0 <__assert_fail@plt+0x12f68>
   23ec8:	adds	r4, r1, r4
   23ecc:	sub	r3, r5, #1
   23ed0:	bcs	240d0 <__assert_fail@plt+0x13158>
   23ed4:	cmp	sl, r4
   23ed8:	subhi	r5, r5, #2
   23edc:	bls	240d0 <__assert_fail@plt+0x13158>
   23ee0:	orr	r0, r5, r9, lsl #16
   23ee4:	mov	r1, r6
   23ee8:	add	sp, sp, #12
   23eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ef0:	rsb	r1, r7, #32
   23ef4:	lsl	r0, r2, r7
   23ef8:	lsr	r2, r2, r1
   23efc:	lsr	fp, r5, r1
   23f00:	orr	r8, r2, r3, lsl r7
   23f04:	lsr	r1, r6, r1
   23f08:	str	r0, [sp, #4]
   23f0c:	orr	r5, r1, r5, lsl r7
   23f10:	lsr	r9, r8, #16
   23f14:	mov	r0, fp
   23f18:	uxth	sl, r8
   23f1c:	mov	r1, r9
   23f20:	bl	231c4 <__assert_fail@plt+0x1224c>
   23f24:	mov	r1, r9
   23f28:	mov	r4, r0
   23f2c:	mov	r0, fp
   23f30:	bl	233b0 <__assert_fail@plt+0x12438>
   23f34:	mul	r0, sl, r4
   23f38:	lsr	ip, r5, #16
   23f3c:	orr	r1, ip, r1, lsl #16
   23f40:	cmp	r0, r1
   23f44:	bls	23f58 <__assert_fail@plt+0x12fe0>
   23f48:	adds	r1, r1, r8
   23f4c:	sub	r2, r4, #1
   23f50:	bcc	240ec <__assert_fail@plt+0x13174>
   23f54:	mov	r4, r2
   23f58:	rsb	ip, r0, r1
   23f5c:	mov	r1, r9
   23f60:	str	ip, [sp]
   23f64:	uxth	r5, r5
   23f68:	mov	r0, ip
   23f6c:	bl	231c4 <__assert_fail@plt+0x1224c>
   23f70:	ldr	ip, [sp]
   23f74:	mov	r1, r9
   23f78:	mov	fp, r0
   23f7c:	mov	r0, ip
   23f80:	bl	233b0 <__assert_fail@plt+0x12438>
   23f84:	mul	sl, sl, fp
   23f88:	orr	r1, r5, r1, lsl #16
   23f8c:	cmp	sl, r1
   23f90:	bls	23fa4 <__assert_fail@plt+0x1302c>
   23f94:	adds	r1, r1, r8
   23f98:	sub	r2, fp, #1
   23f9c:	bcc	240d8 <__assert_fail@plt+0x13160>
   23fa0:	mov	fp, r2
   23fa4:	ldr	r3, [sp, #4]
   23fa8:	orr	r0, fp, r4, lsl #16
   23fac:	rsb	sl, sl, r1
   23fb0:	umull	r4, r5, r0, r3
   23fb4:	cmp	sl, r5
   23fb8:	bcc	23fd8 <__assert_fail@plt+0x13060>
   23fbc:	movne	r3, #0
   23fc0:	moveq	r3, #1
   23fc4:	cmp	r4, r6, lsl r7
   23fc8:	movls	r6, #0
   23fcc:	andhi	r6, r3, #1
   23fd0:	cmp	r6, #0
   23fd4:	beq	23dcc <__assert_fail@plt+0x12e54>
   23fd8:	mov	r6, #0
   23fdc:	sub	r0, r0, #1
   23fe0:	mov	r1, r6
   23fe4:	add	sp, sp, #12
   23fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fec:	lsl	r4, r4, r3
   23ff0:	rsb	r9, r3, #32
   23ff4:	lsr	r2, r5, r9
   23ff8:	lsr	r9, r6, r9
   23ffc:	lsr	r8, r4, #16
   24000:	orr	r9, r9, r5, lsl r3
   24004:	mov	r0, r2
   24008:	lsl	r7, r6, r3
   2400c:	mov	r1, r8
   24010:	str	r2, [sp]
   24014:	bl	231c4 <__assert_fail@plt+0x1224c>
   24018:	ldr	r2, [sp]
   2401c:	mov	r1, r8
   24020:	uxth	sl, r4
   24024:	mov	fp, r0
   24028:	mov	r0, r2
   2402c:	bl	233b0 <__assert_fail@plt+0x12438>
   24030:	mul	r0, sl, fp
   24034:	lsr	r3, r9, #16
   24038:	orr	r1, r3, r1, lsl #16
   2403c:	cmp	r0, r1
   24040:	bls	24060 <__assert_fail@plt+0x130e8>
   24044:	adds	r1, r1, r4
   24048:	sub	r3, fp, #1
   2404c:	bcs	24100 <__assert_fail@plt+0x13188>
   24050:	cmp	r0, r1
   24054:	subhi	fp, fp, #2
   24058:	addhi	r1, r1, r4
   2405c:	bls	24100 <__assert_fail@plt+0x13188>
   24060:	rsb	r5, r0, r1
   24064:	mov	r1, r8
   24068:	uxth	r9, r9
   2406c:	mov	r0, r5
   24070:	bl	231c4 <__assert_fail@plt+0x1224c>
   24074:	mov	r1, r8
   24078:	mov	r6, r0
   2407c:	mov	r0, r5
   24080:	bl	233b0 <__assert_fail@plt+0x12438>
   24084:	mul	r5, sl, r6
   24088:	orr	r1, r9, r1, lsl #16
   2408c:	cmp	r5, r1
   24090:	bls	240b4 <__assert_fail@plt+0x1313c>
   24094:	adds	r1, r1, r4
   24098:	sub	r3, r6, #1
   2409c:	bcs	240b0 <__assert_fail@plt+0x13138>
   240a0:	cmp	r5, r1
   240a4:	subhi	r6, r6, #2
   240a8:	addhi	r1, r1, r4
   240ac:	bhi	240b4 <__assert_fail@plt+0x1313c>
   240b0:	mov	r6, r3
   240b4:	rsb	r5, r5, r1
   240b8:	orr	r6, r6, fp, lsl #16
   240bc:	b	23e48 <__assert_fail@plt+0x12ed0>
   240c0:	mov	r6, r3
   240c4:	b	23dc4 <__assert_fail@plt+0x12e4c>
   240c8:	mov	r9, r2
   240cc:	b	23e94 <__assert_fail@plt+0x12f1c>
   240d0:	mov	r5, r3
   240d4:	b	23ee0 <__assert_fail@plt+0x12f68>
   240d8:	cmp	sl, r1
   240dc:	subhi	fp, fp, #2
   240e0:	addhi	r1, r1, r8
   240e4:	bhi	23fa4 <__assert_fail@plt+0x1302c>
   240e8:	b	23fa0 <__assert_fail@plt+0x13028>
   240ec:	cmp	r0, r1
   240f0:	subhi	r4, r4, #2
   240f4:	addhi	r1, r1, r8
   240f8:	bhi	23f58 <__assert_fail@plt+0x12fe0>
   240fc:	b	23f54 <__assert_fail@plt+0x12fdc>
   24100:	mov	fp, r3
   24104:	b	24060 <__assert_fail@plt+0x130e8>
   24108:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2410c:	mov	r7, r0
   24110:	ldr	r6, [pc, #76]	; 24164 <__assert_fail@plt+0x131ec>
   24114:	mov	r8, r1
   24118:	ldr	r5, [pc, #72]	; 24168 <__assert_fail@plt+0x131f0>
   2411c:	mov	r9, r2
   24120:	add	r6, pc, r6
   24124:	bl	10ce8 <calloc@plt-0x20>
   24128:	add	r5, pc, r5
   2412c:	rsb	r6, r5, r6
   24130:	asrs	r6, r6, #2
   24134:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   24138:	sub	r5, r5, #4
   2413c:	mov	r4, #0
   24140:	add	r4, r4, #1
   24144:	ldr	r3, [r5, #4]!
   24148:	mov	r0, r7
   2414c:	mov	r1, r8
   24150:	mov	r2, r9
   24154:	blx	r3
   24158:	cmp	r4, r6
   2415c:	bne	24140 <__assert_fail@plt+0x131c8>
   24160:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   24164:	ldrdeq	r2, [r1], -r8
   24168:	andeq	r2, r1, ip, asr #27
   2416c:	bx	lr

Disassembly of section .fini:

00024170 <.fini>:
   24170:	push	{r3, lr}
   24174:	pop	{r3, pc}
