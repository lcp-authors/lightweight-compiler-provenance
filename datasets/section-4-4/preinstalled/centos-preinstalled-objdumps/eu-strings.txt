
centos-preinstalled/eu-strings:     file format elf32-littlearm


Disassembly of section .init:

00010d2c <.init>:
   10d2c:	push	{r3, lr}
   10d30:	bl	114fc <__assert_fail@plt+0x564>
   10d34:	pop	{r3, pc}

Disassembly of section .plt:

00010d38 <calloc@plt-0x14>:
   10d38:	push	{lr}		; (str lr, [sp, #-4]!)
   10d3c:	ldr	lr, [pc, #4]	; 10d48 <calloc@plt-0x4>
   10d40:	add	lr, pc, lr
   10d44:	ldr	pc, [lr, #8]!
   10d48:			; <UNDEFINED> instruction: 0x000132b8

00010d4c <calloc@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #77824	; 0x13000
   10d54:	ldr	pc, [ip, #696]!	; 0x2b8

00010d58 <fputs_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #77824	; 0x13000
   10d60:	ldr	pc, [ip, #688]!	; 0x2b0

00010d64 <raise@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #77824	; 0x13000
   10d6c:	ldr	pc, [ip, #680]!	; 0x2a8

00010d70 <gelf_getshdr@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #77824	; 0x13000
   10d78:	ldr	pc, [ip, #672]!	; 0x2a0

00010d7c <strtol@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #77824	; 0x13000
   10d84:	ldr	pc, [ip, #664]!	; 0x298

00010d88 <elf_version@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #77824	; 0x13000
   10d90:	ldr	pc, [ip, #656]!	; 0x290

00010d94 <posix_fadvise64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #77824	; 0x13000
   10d9c:	ldr	pc, [ip, #648]!	; 0x288

00010da0 <read@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #77824	; 0x13000
   10da8:	ldr	pc, [ip, #640]!	; 0x280

00010dac <mprotect@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #77824	; 0x13000
   10db4:	ldr	pc, [ip, #632]!	; 0x278

00010db8 <memmove@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #77824	; 0x13000
   10dc0:	ldr	pc, [ip, #624]!	; 0x270

00010dc4 <free@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #77824	; 0x13000
   10dcc:	ldr	pc, [ip, #616]!	; 0x268

00010dd0 <mmap64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #77824	; 0x13000
   10dd8:	ldr	pc, [ip, #608]!	; 0x260

00010ddc <fwrite_unlocked@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #77824	; 0x13000
   10de4:	ldr	pc, [ip, #600]!	; 0x258

00010de8 <dcgettext@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #77824	; 0x13000
   10df0:	ldr	pc, [ip, #592]!	; 0x250

00010df4 <__stack_chk_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #77824	; 0x13000
   10dfc:	ldr	pc, [ip, #584]!	; 0x248

00010e00 <sysconf@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #77824	; 0x13000
   10e08:	ldr	pc, [ip, #576]!	; 0x240

00010e0c <realloc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #77824	; 0x13000
   10e14:	ldr	pc, [ip, #568]!	; 0x238

00010e18 <elf_strptr@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #77824	; 0x13000
   10e20:	ldr	pc, [ip, #560]!	; 0x230

00010e24 <textdomain@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #77824	; 0x13000
   10e2c:	ldr	pc, [ip, #552]!	; 0x228

00010e30 <__fxstat64@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #77824	; 0x13000
   10e38:	ldr	pc, [ip, #544]!	; 0x220

00010e3c <posix_madvise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #77824	; 0x13000
   10e44:	ldr	pc, [ip, #536]!	; 0x218

00010e48 <lseek64@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #77824	; 0x13000
   10e50:	ldr	pc, [ip, #528]!	; 0x210

00010e54 <error@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #77824	; 0x13000
   10e5c:	ldr	pc, [ip, #520]!	; 0x208

00010e60 <open64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #77824	; 0x13000
   10e68:	ldr	pc, [ip, #512]!	; 0x200

00010e6c <malloc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #77824	; 0x13000
   10e74:	ldr	pc, [ip, #504]!	; 0x1f8

00010e78 <__libc_start_main@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #77824	; 0x13000
   10e80:	ldr	pc, [ip, #496]!	; 0x1f0

00010e84 <__gmon_start__@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #77824	; 0x13000
   10e8c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e90 <mempcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #77824	; 0x13000
   10e98:	ldr	pc, [ip, #480]!	; 0x1e0

00010e9c <elf_end@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #77824	; 0x13000
   10ea4:	ldr	pc, [ip, #472]!	; 0x1d8

00010ea8 <__ctype_b_loc@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #77824	; 0x13000
   10eb0:	ldr	pc, [ip, #464]!	; 0x1d0

00010eb4 <strlen@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #77824	; 0x13000
   10ebc:	ldr	pc, [ip, #456]!	; 0x1c8

00010ec0 <__errno_location@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #77824	; 0x13000
   10ec8:	ldr	pc, [ip, #448]!	; 0x1c0

00010ecc <argp_help@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #77824	; 0x13000
   10ed4:	ldr	pc, [ip, #440]!	; 0x1b8

00010ed8 <__fsetlocking@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #77824	; 0x13000
   10ee0:	ldr	pc, [ip, #432]!	; 0x1b0

00010ee4 <argp_parse@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #77824	; 0x13000
   10eec:	ldr	pc, [ip, #424]!	; 0x1a8

00010ef0 <__printf_chk@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #77824	; 0x13000
   10ef8:	ldr	pc, [ip, #416]!	; 0x1a0

00010efc <__fprintf_chk@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #77824	; 0x13000
   10f04:	ldr	pc, [ip, #408]!	; 0x198

00010f08 <elf_begin@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #77824	; 0x13000
   10f10:	ldr	pc, [ip, #400]!	; 0x190

00010f14 <strnlen@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #77824	; 0x13000
   10f1c:	ldr	pc, [ip, #392]!	; 0x188

00010f20 <munmap@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #77824	; 0x13000
   10f28:	ldr	pc, [ip, #384]!	; 0x180

00010f2c <__overflow@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #77824	; 0x13000
   10f34:	ldr	pc, [ip, #376]!	; 0x178

00010f38 <setlocale@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #77824	; 0x13000
   10f40:	ldr	pc, [ip, #368]!	; 0x170

00010f44 <elf_nextscn@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #77824	; 0x13000
   10f4c:	ldr	pc, [ip, #360]!	; 0x168

00010f50 <elf_ndxscn@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #77824	; 0x13000
   10f58:	ldr	pc, [ip, #352]!	; 0x160

00010f5c <bindtextdomain@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #77824	; 0x13000
   10f64:	ldr	pc, [ip, #344]!	; 0x158

00010f68 <abort@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #77824	; 0x13000
   10f70:	ldr	pc, [ip, #336]!	; 0x150

00010f74 <close@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #77824	; 0x13000
   10f7c:	ldr	pc, [ip, #328]!	; 0x148

00010f80 <elf_getshdrstrndx@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #77824	; 0x13000
   10f88:	ldr	pc, [ip, #320]!	; 0x140

00010f8c <elf_kind@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #77824	; 0x13000
   10f94:	ldr	pc, [ip, #312]!	; 0x138

00010f98 <__assert_fail@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #77824	; 0x13000
   10fa0:	ldr	pc, [ip, #304]!	; 0x130

Disassembly of section .text:

00010fa4 <.text>:
   10fa4:	movw	ip, #16640	; 0x4100
   10fa8:	movt	ip, #2
   10fac:	movw	r3, #16648	; 0x4108
   10fb0:	movt	r3, #2
   10fb4:	ldr	r2, [ip]
   10fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fbc:	sub	sp, sp, #244	; 0xf4
   10fc0:	mov	sl, r0
   10fc4:	mov	fp, r1
   10fc8:	ldr	r0, [r3]
   10fcc:	mov	r1, #2
   10fd0:	str	ip, [sp, #24]
   10fd4:	mov	r4, #0
   10fd8:	str	r2, [sp, #236]	; 0xec
   10fdc:	bl	10ed8 <__fsetlocking@plt>
   10fe0:	movw	r3, #16656	; 0x4110
   10fe4:	movt	r3, #2
   10fe8:	mov	r1, #2
   10fec:	movw	r8, #16664	; 0x4118
   10ff0:	ldr	r0, [r3]
   10ff4:	movt	r8, #2
   10ff8:	bl	10ed8 <__fsetlocking@plt>
   10ffc:	movw	r1, #14232	; 0x3798
   11000:	mov	r0, #6
   11004:	movt	r1, #1
   11008:	bl	10f38 <setlocale@plt>
   1100c:	movw	r0, #14184	; 0x3768
   11010:	movw	r1, #14196	; 0x3774
   11014:	movt	r0, #1
   11018:	movt	r1, #1
   1101c:	bl	10f5c <bindtextdomain@plt>
   11020:	movw	r0, #14184	; 0x3768
   11024:	movt	r0, #1
   11028:	bl	10e24 <textdomain@plt>
   1102c:	mov	r3, r4
   11030:	add	ip, sp, #56	; 0x38
   11034:	mov	r1, sl
   11038:	mov	r2, fp
   1103c:	str	ip, [sp]
   11040:	str	r4, [sp, #4]
   11044:	ldr	r0, [pc, #1136]	; 114bc <__assert_fail@plt+0x524>
   11048:	bl	10ee4 <argp_parse@plt>
   1104c:	mov	r0, #1
   11050:	bl	10d88 <elf_version@plt>
   11054:	mov	r0, #30
   11058:	bl	10e00 <sysconf@plt>
   1105c:	ldr	r3, [sp, #56]	; 0x38
   11060:	cmp	r3, sl
   11064:	str	r0, [r8, #16]
   11068:	beq	111b0 <__assert_fail@plt+0x218>
   1106c:	movw	ip, #14172	; 0x375c
   11070:	mov	r9, r4
   11074:	movt	ip, #1
   11078:	str	sl, [sp, #20]
   1107c:	str	ip, [sp, #28]
   11080:	b	11134 <__assert_fail@plt+0x19c>
   11084:	mov	r1, #0
   11088:	bl	10e60 <open64@plt>
   1108c:	cmn	r0, #1
   11090:	mov	r6, r0
   11094:	beq	1123c <__assert_fail@plt+0x2a4>
   11098:	ldrb	r7, [r8, #3]
   1109c:	mov	r0, #3
   110a0:	mov	r1, r6
   110a4:	add	r2, sp, #128	; 0x80
   110a8:	cmp	r7, #0
   110ac:	ldrne	r3, [sp, #56]	; 0x38
   110b0:	ldrne	r7, [fp, r3, lsl #2]
   110b4:	bl	10e30 <__fxstat64@plt>
   110b8:	cmp	r0, #0
   110bc:	bne	11164 <__assert_fail@plt+0x1cc>
   110c0:	ldr	r2, [r8, #8]
   110c4:	mov	r3, #0
   110c8:	ldrd	r4, [sp, #176]	; 0xb0
   110cc:	movw	r1, #16664	; 0x4118
   110d0:	movt	r1, #2
   110d4:	cmp	r2, r4
   110d8:	sbcs	ip, r3, r5
   110dc:	blt	1127c <__assert_fail@plt+0x2e4>
   110e0:	ldr	r3, [sp, #56]	; 0x38
   110e4:	ldr	r3, [fp, r3, lsl #2]
   110e8:	ldrb	r2, [r3]
   110ec:	cmp	r2, #45	; 0x2d
   110f0:	beq	11154 <__assert_fail@plt+0x1bc>
   110f4:	mov	r0, r6
   110f8:	bl	10f74 <close@plt>
   110fc:	ldr	r0, [r8, #12]
   11100:	movw	r3, #16664	; 0x4118
   11104:	movt	r3, #2
   11108:	sub	r2, r0, #1
   1110c:	cmn	r2, #3
   11110:	bls	111a4 <__assert_fail@plt+0x20c>
   11114:	ldr	r3, [sp, #56]	; 0x38
   11118:	mov	r2, #0
   1111c:	ldr	ip, [sp, #20]
   11120:	add	r3, r3, #1
   11124:	str	r2, [r8, #12]
   11128:	cmp	ip, r3
   1112c:	str	r3, [sp, #56]	; 0x38
   11130:	ble	1121c <__assert_fail@plt+0x284>
   11134:	ldr	r0, [fp, r3, lsl #2]
   11138:	ldrb	r3, [r0]
   1113c:	cmp	r3, #45	; 0x2d
   11140:	bne	11084 <__assert_fail@plt+0xec>
   11144:	ldrb	r6, [r0, #1]
   11148:	cmp	r6, #0
   1114c:	beq	11098 <__assert_fail@plt+0x100>
   11150:	b	11084 <__assert_fail@plt+0xec>
   11154:	ldrb	r3, [r3, #1]
   11158:	cmp	r3, #0
   1115c:	beq	110fc <__assert_fail@plt+0x164>
   11160:	b	110f4 <__assert_fail@plt+0x15c>
   11164:	mvn	r4, #0
   11168:	mvn	r5, #-2147483648	; 0x80000000
   1116c:	mov	sl, #0
   11170:	strd	r4, [sp, #8]
   11174:	mov	r2, r4
   11178:	mov	r3, r5
   1117c:	mov	r1, r7
   11180:	mov	r4, #0
   11184:	mov	r5, #0
   11188:	mov	r0, r6
   1118c:	strd	r4, [sp]
   11190:	bl	11e34 <__assert_fail@plt+0xe9c>
   11194:	orr	r9, r9, r0
   11198:	mov	r0, sl
   1119c:	bl	10e9c <elf_end@plt>
   111a0:	b	110e0 <__assert_fail@plt+0x148>
   111a4:	ldr	r1, [r3, #32]
   111a8:	bl	10f20 <munmap@plt>
   111ac:	b	11114 <__assert_fail@plt+0x17c>
   111b0:	ldrb	ip, [r8, #3]
   111b4:	movw	r3, #14152	; 0x3748
   111b8:	movt	r3, #1
   111bc:	mov	r1, r4
   111c0:	cmp	ip, r4
   111c4:	mov	r0, #3
   111c8:	add	r2, sp, #128	; 0x80
   111cc:	movne	r4, r3
   111d0:	moveq	r4, r1
   111d4:	bl	10e30 <__fxstat64@plt>
   111d8:	cmp	r0, #0
   111dc:	bne	111f4 <__assert_fail@plt+0x25c>
   111e0:	ldr	r3, [sp, #144]	; 0x90
   111e4:	and	r3, r3, #61440	; 0xf000
   111e8:	cmp	r3, #32768	; 0x8000
   111ec:	ldrdeq	r2, [sp, #176]	; 0xb0
   111f0:	beq	111fc <__assert_fail@plt+0x264>
   111f4:	mvn	r2, #0
   111f8:	mvn	r3, #-2147483648	; 0x80000000
   111fc:	mov	r1, r4
   11200:	strd	r2, [sp, #8]
   11204:	mov	r4, #0
   11208:	mov	r5, #0
   1120c:	mov	r0, #0
   11210:	strd	r4, [sp]
   11214:	bl	11e34 <__assert_fail@plt+0xe9c>
   11218:	mov	r9, r0
   1121c:	ldr	ip, [sp, #24]
   11220:	mov	r0, r9
   11224:	ldr	r2, [sp, #236]	; 0xec
   11228:	ldr	r3, [ip]
   1122c:	cmp	r2, r3
   11230:	bne	11278 <__assert_fail@plt+0x2e0>
   11234:	add	sp, sp, #244	; 0xf4
   11238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1123c:	bl	10ec0 <__errno_location@plt>
   11240:	mov	r2, #5
   11244:	movw	r1, #14216	; 0x3788
   11248:	movt	r1, #1
   1124c:	mov	r9, #1
   11250:	ldr	r4, [r0]
   11254:	mov	r0, #0
   11258:	bl	10de8 <dcgettext@plt>
   1125c:	ldr	r3, [sp, #56]	; 0x38
   11260:	mov	r1, r4
   11264:	ldr	r3, [fp, r3, lsl #2]
   11268:	mov	r2, r0
   1126c:	mov	r0, #0
   11270:	bl	10e54 <error@plt>
   11274:	b	110fc <__assert_fail@plt+0x164>
   11278:	bl	10df4 <__stack_chk_fail@plt>
   1127c:	ldrb	ip, [r1]
   11280:	cmp	ip, #0
   11284:	bne	114a8 <__assert_fail@plt+0x510>
   11288:	ldr	r3, [sp, #144]	; 0x90
   1128c:	and	r3, r3, #61440	; 0xf000
   11290:	cmp	r3, #32768	; 0x8000
   11294:	movne	sl, ip
   11298:	bne	11170 <__assert_fail@plt+0x1d8>
   1129c:	mov	r0, r6
   112a0:	mov	r1, #1
   112a4:	mov	r2, ip
   112a8:	str	ip, [sp, #16]
   112ac:	bl	10f08 <elf_begin@plt>
   112b0:	subs	sl, r0, #0
   112b4:	beq	11170 <__assert_fail@plt+0x1d8>
   112b8:	bl	10f8c <elf_kind@plt>
   112bc:	ldr	ip, [sp, #16]
   112c0:	cmp	r0, #3
   112c4:	bne	11170 <__assert_fail@plt+0x1d8>
   112c8:	mov	r1, ip
   112cc:	mov	r0, sl
   112d0:	str	ip, [sp, #16]
   112d4:	bl	10f44 <elf_nextscn@plt>
   112d8:	ldr	ip, [sp, #16]
   112dc:	cmp	r0, #0
   112e0:	str	r0, [sp, #36]	; 0x24
   112e4:	beq	11480 <__assert_fail@plt+0x4e8>
   112e8:	str	r8, [sp, #48]	; 0x30
   112ec:	ldr	r8, [sp, #36]	; 0x24
   112f0:	str	r7, [sp, #52]	; 0x34
   112f4:	mov	r7, r5
   112f8:	str	fp, [sp, #44]	; 0x2c
   112fc:	mov	fp, r6
   11300:	mov	r6, r4
   11304:	str	ip, [sp, #32]
   11308:	str	r9, [sp, #40]	; 0x28
   1130c:	mov	r0, r8
   11310:	add	r1, sp, #64	; 0x40
   11314:	bl	10d70 <gelf_getshdr@plt>
   11318:	subs	r9, r0, #0
   1131c:	beq	113f0 <__assert_fail@plt+0x458>
   11320:	ldr	r3, [r9, #4]
   11324:	cmp	r3, #8
   11328:	beq	113f0 <__assert_fail@plt+0x458>
   1132c:	ldrd	r2, [r9, #8]
   11330:	mov	r1, #0
   11334:	mov	r0, #2
   11338:	and	r3, r3, r1
   1133c:	and	r2, r2, r0
   11340:	orrs	r1, r2, r3
   11344:	beq	113f0 <__assert_fail@plt+0x458>
   11348:	ldrd	r2, [r9, #24]
   1134c:	cmp	r3, r7
   11350:	cmpeq	r2, r6
   11354:	bhi	11378 <__assert_fail@plt+0x3e0>
   11358:	ldrd	r4, [r9, #32]
   1135c:	mov	r0, r6
   11360:	mov	r1, r7
   11364:	subs	r0, r0, r2
   11368:	sbc	r1, r1, r3
   1136c:	cmp	r1, r5
   11370:	cmpeq	r0, r4
   11374:	bcs	11440 <__assert_fail@plt+0x4a8>
   11378:	mov	r0, sl
   1137c:	add	r1, sp, #60	; 0x3c
   11380:	mov	r3, #0
   11384:	str	r3, [sp, #60]	; 0x3c
   11388:	bl	10f80 <elf_getshdrstrndx@plt>
   1138c:	cmp	r0, #0
   11390:	blt	114b0 <__assert_fail@plt+0x518>
   11394:	ldr	r2, [r9]
   11398:	mov	r0, sl
   1139c:	ldr	r1, [sp, #60]	; 0x3c
   113a0:	bl	10e18 <elf_strptr@plt>
   113a4:	ldr	r4, [sp, #28]
   113a8:	cmp	r0, #0
   113ac:	movne	r4, r0
   113b0:	mov	r2, #5
   113b4:	movw	r1, #14236	; 0x379c
   113b8:	mov	r0, #0
   113bc:	movt	r1, #1
   113c0:	bl	10de8 <dcgettext@plt>
   113c4:	mov	r5, r0
   113c8:	mov	r0, r8
   113cc:	bl	10f50 <elf_ndxscn@plt>
   113d0:	mov	r2, r5
   113d4:	str	r4, [sp]
   113d8:	mov	ip, #1
   113dc:	str	ip, [sp, #32]
   113e0:	mov	r3, r0
   113e4:	mov	r0, #0
   113e8:	mov	r1, r0
   113ec:	bl	10e54 <error@plt>
   113f0:	mov	r1, r8
   113f4:	mov	r0, sl
   113f8:	bl	10f44 <elf_nextscn@plt>
   113fc:	subs	r8, r0, #0
   11400:	bne	1130c <__assert_fail@plt+0x374>
   11404:	ldr	r8, [sp, #48]	; 0x30
   11408:	mov	r6, fp
   1140c:	movw	r3, #16664	; 0x4118
   11410:	ldr	r9, [sp, #40]	; 0x28
   11414:	ldr	fp, [sp, #44]	; 0x2c
   11418:	movt	r3, #2
   1141c:	ldr	r0, [r8, #12]
   11420:	sub	r2, r0, #1
   11424:	cmn	r2, #3
   11428:	bls	11474 <__assert_fail@plt+0x4dc>
   1142c:	ldr	r0, [sp, #32]
   11430:	mov	r3, #0
   11434:	str	r3, [r8, #12]
   11438:	orr	r9, r9, r0
   1143c:	b	11198 <__assert_fail@plt+0x200>
   11440:	adds	r4, r4, r2
   11444:	strd	r2, [sp]
   11448:	adc	r5, r5, r3
   1144c:	mov	r0, fp
   11450:	strd	r4, [sp, #8]
   11454:	mov	r2, r6
   11458:	ldr	r1, [sp, #52]	; 0x34
   1145c:	mov	r3, r7
   11460:	bl	11e34 <__assert_fail@plt+0xe9c>
   11464:	ldr	ip, [sp, #32]
   11468:	orr	ip, ip, r0
   1146c:	str	ip, [sp, #32]
   11470:	b	113f0 <__assert_fail@plt+0x458>
   11474:	ldr	r1, [r3, #32]
   11478:	bl	10f20 <munmap@plt>
   1147c:	b	1142c <__assert_fail@plt+0x494>
   11480:	strd	r4, [sp, #8]
   11484:	mov	r2, r4
   11488:	mov	r3, r5
   1148c:	mov	r4, #0
   11490:	mov	r5, #0
   11494:	mov	r1, r7
   11498:	strd	r4, [sp]
   1149c:	mov	r0, r6
   114a0:	bl	11e34 <__assert_fail@plt+0xe9c>
   114a4:	b	11438 <__assert_fail@plt+0x4a0>
   114a8:	mov	sl, r0
   114ac:	b	11170 <__assert_fail@plt+0x1d8>
   114b0:	movw	r4, #14172	; 0x375c
   114b4:	movt	r4, #1
   114b8:	b	113b0 <__assert_fail@plt+0x418>
   114bc:	andeq	r4, r2, r0, ror #1
   114c0:	mov	fp, #0
   114c4:	mov	lr, #0
   114c8:	pop	{r1}		; (ldr r1, [sp], #4)
   114cc:	mov	r2, sp
   114d0:	push	{r2}		; (str r2, [sp, #-4]!)
   114d4:	push	{r0}		; (str r0, [sp, #-4]!)
   114d8:	ldr	ip, [pc, #16]	; 114f0 <__assert_fail@plt+0x558>
   114dc:	push	{ip}		; (str ip, [sp, #-4]!)
   114e0:	ldr	r0, [pc, #12]	; 114f4 <__assert_fail@plt+0x55c>
   114e4:	ldr	r3, [pc, #12]	; 114f8 <__assert_fail@plt+0x560>
   114e8:	bl	10e78 <__libc_start_main@plt>
   114ec:	bl	10f68 <abort@plt>
   114f0:	andeq	r3, r1, ip, lsl #7
   114f4:	andeq	r0, r1, r4, lsr #31
   114f8:	andeq	r3, r1, r8, lsr #6
   114fc:	ldr	r3, [pc, #20]	; 11518 <__assert_fail@plt+0x580>
   11500:	ldr	r2, [pc, #20]	; 1151c <__assert_fail@plt+0x584>
   11504:	add	r3, pc, r3
   11508:	ldr	r2, [r3, r2]
   1150c:	cmp	r2, #0
   11510:	bxeq	lr
   11514:	b	10e84 <__gmon_start__@plt>
   11518:	strdeq	r2, [r1], -r4
   1151c:	ldrdeq	r0, [r0], -r4
   11520:	push	{r3, lr}
   11524:	movw	r0, #16640	; 0x4100
   11528:	ldr	r3, [pc, #36]	; 11554 <__assert_fail@plt+0x5bc>
   1152c:	movt	r0, #2
   11530:	rsb	r3, r0, r3
   11534:	cmp	r3, #6
   11538:	popls	{r3, pc}
   1153c:	movw	r3, #0
   11540:	movt	r3, #0
   11544:	cmp	r3, #0
   11548:	popeq	{r3, pc}
   1154c:	blx	r3
   11550:	pop	{r3, pc}
   11554:	andeq	r4, r2, r3, lsl #2
   11558:	push	{r3, lr}
   1155c:	movw	r0, #16640	; 0x4100
   11560:	movw	r3, #16640	; 0x4100
   11564:	movt	r0, #2
   11568:	movt	r3, #2
   1156c:	rsb	r3, r0, r3
   11570:	asr	r3, r3, #2
   11574:	add	r3, r3, r3, lsr #31
   11578:	asrs	r1, r3, #1
   1157c:	popeq	{r3, pc}
   11580:	movw	r2, #0
   11584:	movt	r2, #0
   11588:	cmp	r2, #0
   1158c:	popeq	{r3, pc}
   11590:	blx	r2
   11594:	pop	{r3, pc}
   11598:	push	{r4, lr}
   1159c:	movw	r4, #16660	; 0x4114
   115a0:	movt	r4, #2
   115a4:	ldrb	r3, [r4]
   115a8:	cmp	r3, #0
   115ac:	popne	{r4, pc}
   115b0:	bl	11520 <__assert_fail@plt+0x588>
   115b4:	mov	r3, #1
   115b8:	strb	r3, [r4]
   115bc:	pop	{r4, pc}
   115c0:	movw	r0, #16124	; 0x3efc
   115c4:	movt	r0, #2
   115c8:	push	{r3, lr}
   115cc:	ldr	r3, [r0]
   115d0:	cmp	r3, #0
   115d4:	beq	115ec <__assert_fail@plt+0x654>
   115d8:	movw	r3, #0
   115dc:	movt	r3, #0
   115e0:	cmp	r3, #0
   115e4:	beq	115ec <__assert_fail@plt+0x654>
   115e8:	blx	r3
   115ec:	pop	{r3, lr}
   115f0:	b	11558 <__assert_fail@plt+0x5c0>
   115f4:	cmp	r0, #110	; 0x6e
   115f8:	push	{r4, r5, lr}
   115fc:	mov	r4, r1
   11600:	sub	sp, sp, #12
   11604:	beq	117b4 <__assert_fail@plt+0x81c>
   11608:	ble	1163c <__assert_fail@plt+0x6a4>
   1160c:	cmp	r0, #116	; 0x74
   11610:	beq	11700 <__assert_fail@plt+0x768>
   11614:	mov	r3, #7
   11618:	movt	r3, #256	; 0x100
   1161c:	cmp	r0, r3
   11620:	beq	11674 <__assert_fail@plt+0x6dc>
   11624:	cmp	r0, #111	; 0x6f
   11628:	beq	116e0 <__assert_fail@plt+0x748>
   1162c:	mov	r3, #7
   11630:	mov	r0, r3
   11634:	add	sp, sp, #12
   11638:	pop	{r4, r5, pc}
   1163c:	cmp	r0, #101	; 0x65
   11640:	beq	11778 <__assert_fail@plt+0x7e0>
   11644:	cmp	r0, #102	; 0x66
   11648:	beq	116c0 <__assert_fail@plt+0x728>
   1164c:	cmp	r0, #97	; 0x61
   11650:	bne	1162c <__assert_fail@plt+0x694>
   11654:	movw	r2, #16664	; 0x4118
   11658:	movt	r2, #2
   1165c:	mov	r3, #0
   11660:	mov	r1, #1
   11664:	mov	r0, r3
   11668:	strb	r1, [r2]
   1166c:	add	sp, sp, #12
   11670:	pop	{r4, r5, pc}
   11674:	movw	r3, #16604	; 0x40dc
   11678:	movt	r3, #2
   1167c:	ldr	r4, [r3, #32]
   11680:	cmp	r4, #0
   11684:	beq	1195c <__assert_fail@plt+0x9c4>
   11688:	ldr	r5, [r3]
   1168c:	mvn	r0, #-2147483648	; 0x80000000
   11690:	mov	r1, r5
   11694:	bl	12790 <__assert_fail@plt+0x17f8>
   11698:	cmp	r4, r0
   1169c:	bhi	1195c <__assert_fail@plt+0x9c4>
   116a0:	mul	r4, r4, r5
   116a4:	movw	r2, #16664	; 0x4118
   116a8:	movt	r2, #2
   116ac:	mov	r3, #0
   116b0:	mov	r0, r3
   116b4:	str	r4, [r2, #8]
   116b8:	add	sp, sp, #12
   116bc:	pop	{r4, r5, pc}
   116c0:	movw	r2, #16664	; 0x4118
   116c4:	movt	r2, #2
   116c8:	mov	r3, #0
   116cc:	mov	r1, #1
   116d0:	mov	r0, r3
   116d4:	strb	r1, [r2, #3]
   116d8:	add	sp, sp, #12
   116dc:	pop	{r4, r5, pc}
   116e0:	movw	r2, #16664	; 0x4118
   116e4:	movt	r2, #2
   116e8:	mov	r3, #0
   116ec:	mov	r1, #3
   116f0:	mov	r0, r3
   116f4:	str	r1, [r2, #4]
   116f8:	add	sp, sp, #12
   116fc:	pop	{r4, r5, pc}
   11700:	ldrb	r3, [r1]
   11704:	cmp	r3, #111	; 0x6f
   11708:	beq	116e0 <__assert_fail@plt+0x748>
   1170c:	cmp	r3, #120	; 0x78
   11710:	beq	11944 <__assert_fail@plt+0x9ac>
   11714:	cmp	r3, #100	; 0x64
   11718:	beq	118fc <__assert_fail@plt+0x964>
   1171c:	mov	r2, #5
   11720:	movw	r1, #13536	; 0x34e0
   11724:	mov	r0, #0
   11728:	movt	r1, #1
   1172c:	bl	10de8 <dcgettext@plt>
   11730:	movw	ip, #13584	; 0x3510
   11734:	movt	ip, #1
   11738:	mov	r3, r4
   1173c:	mov	r2, r0
   11740:	mov	r0, #0
   11744:	mov	r1, r0
   11748:	str	ip, [sp]
   1174c:	bl	10e54 <error@plt>
   11750:	movw	r2, #16644	; 0x4104
   11754:	movt	r2, #2
   11758:	movw	r3, #13576	; 0x3508
   1175c:	ldr	r0, [pc, #540]	; 11980 <__assert_fail@plt+0x9e8>
   11760:	movt	r3, #1
   11764:	ldr	r1, [r2]
   11768:	mov	r2, #4
   1176c:	bl	10ecc <argp_help@plt>
   11770:	mov	r3, #7
   11774:	b	11630 <__assert_fail@plt+0x698>
   11778:	ldrb	r3, [r1, #1]
   1177c:	cmp	r3, #0
   11780:	beq	117e0 <__assert_fail@plt+0x848>
   11784:	mov	r2, #5
   11788:	movw	r1, #13536	; 0x34e0
   1178c:	mov	r0, #0
   11790:	movt	r1, #1
   11794:	bl	10de8 <dcgettext@plt>
   11798:	movw	ip, #13572	; 0x3504
   1179c:	mov	r3, r4
   117a0:	movt	ip, #1
   117a4:	mov	r2, r0
   117a8:	mov	r0, #0
   117ac:	mov	r1, r0
   117b0:	b	11748 <__assert_fail@plt+0x7b0>
   117b4:	mov	r0, r1
   117b8:	mov	r2, #10
   117bc:	mov	r1, #0
   117c0:	bl	10d7c <strtol@plt>
   117c4:	movw	r2, #16604	; 0x40dc
   117c8:	movt	r2, #2
   117cc:	mov	r3, #0
   117d0:	str	r0, [r2, #32]
   117d4:	mov	r0, r3
   117d8:	add	sp, sp, #12
   117dc:	pop	{r4, r5, pc}
   117e0:	ldrb	r5, [r1]
   117e4:	sub	r3, r5, #66	; 0x42
   117e8:	cmp	r3, #49	; 0x31
   117ec:	ldrls	pc, [pc, r3, lsl #2]
   117f0:	b	11784 <__assert_fail@plt+0x7ec>
   117f4:			; <UNDEFINED> instruction: 0x000118bc
   117f8:	andeq	r1, r1, r4, lsl #15
   117fc:	andeq	r1, r1, r4, lsl #15
   11800:	andeq	r1, r1, r4, lsl #15
   11804:	andeq	r1, r1, r4, lsl #15
   11808:	andeq	r1, r1, r4, lsl #15
   1180c:	andeq	r1, r1, r4, lsl #15
   11810:	andeq	r1, r1, r4, lsl #15
   11814:	andeq	r1, r1, r4, lsl #15
   11818:	andeq	r1, r1, r4, lsl #15
   1181c:	andeq	r1, r1, ip, asr #17
   11820:	andeq	r1, r1, r4, lsl #15
   11824:	andeq	r1, r1, r4, lsl #15
   11828:	andeq	r1, r1, r4, lsl #15
   1182c:	andeq	r1, r1, r4, lsl #15
   11830:	andeq	r1, r1, r4, lsl #15
   11834:	andeq	r1, r1, r4, lsl #15
   11838:	andeq	r1, r1, r4, lsl r9
   1183c:	andeq	r1, r1, r4, lsl #15
   11840:	andeq	r1, r1, r4, lsl #15
   11844:	andeq	r1, r1, r4, lsl #15
   11848:	andeq	r1, r1, r4, lsl #15
   1184c:	andeq	r1, r1, r4, lsl #15
   11850:	andeq	r1, r1, r4, lsl #15
   11854:	andeq	r1, r1, r4, lsl #15
   11858:	andeq	r1, r1, r4, lsl #15
   1185c:	andeq	r1, r1, r4, lsl #15
   11860:	andeq	r1, r1, r4, lsl #15
   11864:	andeq	r1, r1, r4, lsl #15
   11868:	andeq	r1, r1, r4, lsl #15
   1186c:	andeq	r1, r1, r4, lsl #15
   11870:	andeq	r1, r1, r4, lsl #15
   11874:			; <UNDEFINED> instruction: 0x000118bc
   11878:	andeq	r1, r1, r4, lsl #15
   1187c:	andeq	r1, r1, r4, lsl #15
   11880:	andeq	r1, r1, r4, lsl #15
   11884:	andeq	r1, r1, r4, lsl #15
   11888:	andeq	r1, r1, r4, lsl #15
   1188c:	andeq	r1, r1, r4, lsl #15
   11890:	andeq	r1, r1, r4, lsl #15
   11894:	andeq	r1, r1, r4, lsl #15
   11898:	andeq	r1, r1, r4, lsl #15
   1189c:	andeq	r1, r1, ip, asr #17
   118a0:	andeq	r1, r1, r4, lsl #15
   118a4:	andeq	r1, r1, r4, lsl #15
   118a8:	andeq	r1, r1, r4, lsl #15
   118ac:	andeq	r1, r1, r4, lsl #15
   118b0:	andeq	r1, r1, r4, lsl #15
   118b4:	andeq	r1, r1, r4, lsl #15
   118b8:	andeq	r1, r1, r4, lsl r9
   118bc:	movw	r3, #16664	; 0x4118
   118c0:	movt	r3, #2
   118c4:	mov	r2, #1
   118c8:	strb	r2, [r3, #2]
   118cc:	bl	10ea8 <__ctype_b_loc@plt>
   118d0:	lsl	r5, r5, #1
   118d4:	movw	r2, #16604	; 0x40dc
   118d8:	movt	r2, #2
   118dc:	mov	r3, #0
   118e0:	ldr	r1, [r0]
   118e4:	ldrh	r1, [r1, r5]
   118e8:	tst	r1, #256	; 0x100
   118ec:	moveq	r1, #2
   118f0:	movne	r1, #4
   118f4:	str	r1, [r2]
   118f8:	b	11630 <__assert_fail@plt+0x698>
   118fc:	movw	r2, #16664	; 0x4118
   11900:	movt	r2, #2
   11904:	mov	r1, #1
   11908:	mov	r3, #0
   1190c:	str	r1, [r2, #4]
   11910:	b	11630 <__assert_fail@plt+0x698>
   11914:	subs	r1, r5, #115	; 0x73
   11918:	movw	r3, #16664	; 0x4118
   1191c:	movw	r2, #16604	; 0x40dc
   11920:	movt	r3, #2
   11924:	movt	r2, #2
   11928:	rsbs	r5, r1, #0
   1192c:	adcs	r5, r5, r1
   11930:	mov	r1, #1
   11934:	strb	r5, [r3, #1]
   11938:	mov	r3, #0
   1193c:	str	r1, [r2]
   11940:	b	11630 <__assert_fail@plt+0x698>
   11944:	movw	r2, #16664	; 0x4118
   11948:	movt	r2, #2
   1194c:	mov	r1, #2
   11950:	mov	r3, #0
   11954:	str	r1, [r2, #4]
   11958:	b	11630 <__assert_fail@plt+0x698>
   1195c:	mov	r2, #5
   11960:	movw	r1, #13588	; 0x3514
   11964:	mov	r0, #0
   11968:	movt	r1, #1
   1196c:	bl	10de8 <dcgettext@plt>
   11970:	mov	r1, #0
   11974:	mov	r2, r0
   11978:	mov	r0, #1
   1197c:	bl	10e54 <error@plt>
   11980:	andeq	r4, r2, r0, ror #1
   11984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11988:	movw	fp, #16604	; 0x40dc
   1198c:	movt	fp, #2
   11990:	sub	sp, sp, #36	; 0x24
   11994:	mov	r9, r1
   11998:	ldr	r6, [fp]
   1199c:	ldr	ip, [sp, #76]	; 0x4c
   119a0:	cmp	r6, #1
   119a4:	str	r0, [sp, #12]
   119a8:	strd	r2, [sp, #24]
   119ac:	ldr	r4, [sp, #72]	; 0x48
   119b0:	ldr	r0, [ip]
   119b4:	bne	11bd0 <__assert_fail@plt+0xc38>
   119b8:	cmp	r0, #0
   119bc:	moveq	sl, r0
   119c0:	beq	119cc <__assert_fail@plt+0xa34>
   119c4:	bl	10eb4 <strlen@plt>
   119c8:	mov	sl, r0
   119cc:	cmp	r4, #0
   119d0:	beq	11b64 <__assert_fail@plt+0xbcc>
   119d4:	movw	ip, #13644	; 0x354c
   119d8:	movt	ip, #1
   119dc:	str	ip, [sp, #16]
   119e0:	movw	ip, #13652	; 0x3554
   119e4:	movt	ip, #1
   119e8:	str	ip, [sp, #20]
   119ec:	movw	ip, #16656	; 0x4110
   119f0:	movt	ip, #2
   119f4:	str	ip, [sp, #8]
   119f8:	bl	10ea8 <__ctype_b_loc@plt>
   119fc:	movw	r8, #16664	; 0x4118
   11a00:	sub	r5, r9, #1
   11a04:	movt	r8, #2
   11a08:	mov	r7, r0
   11a0c:	b	11b28 <__assert_fail@plt+0xb90>
   11a10:	cmp	r3, #9
   11a14:	beq	11b44 <__assert_fail@plt+0xbac>
   11a18:	ldr	r3, [fp, #32]
   11a1c:	cmp	r3, sl
   11a20:	bhi	11b0c <__assert_fail@plt+0xb74>
   11a24:	ldr	ip, [sp, #12]
   11a28:	cmp	ip, #0
   11a2c:	movweq	sl, #16656	; 0x4110
   11a30:	movteq	sl, #2
   11a34:	beq	11a6c <__assert_fail@plt+0xad4>
   11a38:	ldr	ip, [sp, #8]
   11a3c:	movw	sl, #16656	; 0x4110
   11a40:	ldr	r0, [sp, #12]
   11a44:	movt	sl, #2
   11a48:	ldr	r1, [ip]
   11a4c:	bl	10d58 <fputs_unlocked@plt>
   11a50:	ldr	ip, [sp, #8]
   11a54:	movw	r0, #13660	; 0x355c
   11a58:	mov	r1, #1
   11a5c:	movt	r0, #1
   11a60:	mov	r2, #2
   11a64:	ldr	r3, [ip]
   11a68:	bl	10ddc <fwrite_unlocked@plt>
   11a6c:	ldr	r1, [r8, #4]
   11a70:	cmp	r1, #0
   11a74:	rsbeq	ip, r9, r6
   11a78:	beq	11ac0 <__assert_fail@plt+0xb28>
   11a7c:	cmp	r1, #3
   11a80:	beq	11b88 <__assert_fail@plt+0xbf0>
   11a84:	ldr	r2, [sp, #20]
   11a88:	cmp	r1, #1
   11a8c:	ldr	ip, [sp, #16]
   11a90:	moveq	ip, r2
   11a94:	mov	r1, ip
   11a98:	ldrd	r2, [sp, #24]
   11a9c:	rsb	ip, r9, r6
   11aa0:	mov	r0, #1
   11aa4:	str	ip, [sp, #4]
   11aa8:	subs	r2, r2, r4
   11aac:	sbc	r3, r3, #0
   11ab0:	subs	r2, r2, ip
   11ab4:	sbc	r3, r3, ip, asr #31
   11ab8:	bl	10ef0 <__printf_chk@plt>
   11abc:	ldr	ip, [sp, #4]
   11ac0:	ldr	r3, [sp, #76]	; 0x4c
   11ac4:	ldr	r0, [r3]
   11ac8:	cmp	r0, #0
   11acc:	bne	11ba4 <__assert_fail@plt+0xc0c>
   11ad0:	mov	r2, ip
   11ad4:	ldr	r3, [sl]
   11ad8:	mov	r0, r9
   11adc:	mov	r1, #1
   11ae0:	bl	10ddc <fwrite_unlocked@plt>
   11ae4:	ldr	r0, [sl]
   11ae8:	ldr	r2, [r0, #20]
   11aec:	ldr	r3, [r0, #24]
   11af0:	cmp	r2, r3
   11af4:	bcs	11b94 <__assert_fail@plt+0xbfc>
   11af8:	add	r3, r2, #1
   11afc:	str	r3, [r0, #20]
   11b00:	ldr	r3, [fp, #32]
   11b04:	mov	r1, #10
   11b08:	strb	r1, [r2]
   11b0c:	cmp	r4, r3
   11b10:	add	r9, r5, #2
   11b14:	bls	11b80 <__assert_fail@plt+0xbe8>
   11b18:	subs	r4, r4, #1
   11b1c:	mov	sl, #0
   11b20:	beq	11b64 <__assert_fail@plt+0xbcc>
   11b24:	mov	r5, r6
   11b28:	ldrb	r3, [r5, #1]
   11b2c:	add	r6, r5, #1
   11b30:	ldr	r1, [r7]
   11b34:	lsl	r2, r3, #1
   11b38:	ldrh	r2, [r1, r2]
   11b3c:	tst	r2, #16384	; 0x4000
   11b40:	beq	11a10 <__assert_fail@plt+0xa78>
   11b44:	ldrb	r2, [r8, #1]
   11b48:	cmp	r2, #0
   11b4c:	beq	11b58 <__assert_fail@plt+0xbc0>
   11b50:	tst	r3, #128	; 0x80
   11b54:	bne	11a18 <__assert_fail@plt+0xa80>
   11b58:	subs	r4, r4, #1
   11b5c:	add	sl, sl, #1
   11b60:	bne	11b24 <__assert_fail@plt+0xb8c>
   11b64:	cmp	sl, #0
   11b68:	beq	11b80 <__assert_fail@plt+0xbe8>
   11b6c:	mov	r0, r9
   11b70:	mov	r1, sl
   11b74:	bl	12628 <__assert_fail@plt+0x1690>
   11b78:	ldr	ip, [sp, #76]	; 0x4c
   11b7c:	str	r0, [ip]
   11b80:	add	sp, sp, #36	; 0x24
   11b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b88:	movw	r1, #13636	; 0x3544
   11b8c:	movt	r1, #1
   11b90:	b	11a98 <__assert_fail@plt+0xb00>
   11b94:	mov	r1, #10
   11b98:	bl	10f2c <__overflow@plt>
   11b9c:	ldr	r3, [fp, #32]
   11ba0:	b	11b0c <__assert_fail@plt+0xb74>
   11ba4:	ldr	r1, [sl]
   11ba8:	str	ip, [sp, #4]
   11bac:	bl	10d58 <fputs_unlocked@plt>
   11bb0:	ldr	r2, [sp, #76]	; 0x4c
   11bb4:	ldr	r0, [r2]
   11bb8:	bl	10dc4 <free@plt>
   11bbc:	ldr	r2, [sp, #76]	; 0x4c
   11bc0:	mov	r3, #0
   11bc4:	ldr	ip, [sp, #4]
   11bc8:	str	r3, [r2]
   11bcc:	b	11ad0 <__assert_fail@plt+0xb38>
   11bd0:	cmp	r0, #0
   11bd4:	moveq	r5, r0
   11bd8:	beq	11be4 <__assert_fail@plt+0xc4c>
   11bdc:	bl	10eb4 <strlen@plt>
   11be0:	mov	r5, r0
   11be4:	cmp	r6, r4
   11be8:	bhi	11d5c <__assert_fail@plt+0xdc4>
   11bec:	movw	sl, #16664	; 0x4118
   11bf0:	movw	ip, #13644	; 0x354c
   11bf4:	movt	sl, #2
   11bf8:	movt	ip, #1
   11bfc:	add	r8, r9, #1
   11c00:	str	ip, [sp, #16]
   11c04:	mov	r7, r9
   11c08:	movw	ip, #13652	; 0x3554
   11c0c:	mov	r3, r6
   11c10:	movt	ip, #1
   11c14:	str	ip, [sp, #20]
   11c18:	movw	ip, #16656	; 0x4110
   11c1c:	movt	ip, #2
   11c20:	str	ip, [sp, #8]
   11c24:	b	11d2c <__assert_fail@plt+0xd94>
   11c28:	cmp	r3, #0
   11c2c:	ldrbne	r1, [r7, #1]
   11c30:	ldrbeq	r1, [r7, #2]
   11c34:	ldrbne	r0, [r8, #-1]
   11c38:	ldrbeq	r0, [r7, #3]
   11c3c:	lslne	r1, r1, #16
   11c40:	ldrbne	r2, [r7, #3]
   11c44:	lsleq	r1, r1, #16
   11c48:	ldrbne	r3, [r7, #2]
   11c4c:	ldrbeq	r2, [r8, #-1]
   11c50:	orr	r1, r1, r0, lsl #24
   11c54:	ldrbeq	r3, [r7, #1]
   11c58:	orr	r2, r1, r2
   11c5c:	orr	r6, r2, r3, lsl #8
   11c60:	cmp	r6, #255	; 0xff
   11c64:	bhi	11c88 <__assert_fail@plt+0xcf0>
   11c68:	bl	10ea8 <__ctype_b_loc@plt>
   11c6c:	lsl	r2, r6, #1
   11c70:	ldr	r1, [r0]
   11c74:	ldrh	r2, [r1, r2]
   11c78:	tst	r2, #16384	; 0x4000
   11c7c:	bne	11d54 <__assert_fail@plt+0xdbc>
   11c80:	cmp	r6, #9
   11c84:	beq	11d54 <__assert_fail@plt+0xdbc>
   11c88:	ldr	r3, [fp, #32]
   11c8c:	cmp	r5, r3
   11c90:	bcc	11d04 <__assert_fail@plt+0xd6c>
   11c94:	ldr	ip, [sp, #12]
   11c98:	cmp	ip, #0
   11c9c:	bne	11df0 <__assert_fail@plt+0xe58>
   11ca0:	movw	r5, #16656	; 0x4110
   11ca4:	movt	r5, #2
   11ca8:	ldr	r1, [sl, #4]
   11cac:	cmp	r1, #0
   11cb0:	bne	11db0 <__assert_fail@plt+0xe18>
   11cb4:	rsb	r6, r9, r7
   11cb8:	ldr	ip, [sp, #76]	; 0x4c
   11cbc:	ldr	r0, [ip]
   11cc0:	cmp	r0, #0
   11cc4:	bne	11d8c <__assert_fail@plt+0xdf4>
   11cc8:	mov	r2, r6
   11ccc:	ldr	r3, [r5]
   11cd0:	mov	r0, r9
   11cd4:	mov	r1, #1
   11cd8:	bl	10ddc <fwrite_unlocked@plt>
   11cdc:	ldr	r0, [r5]
   11ce0:	ldr	r2, [r0, #20]
   11ce4:	ldr	r3, [r0, #24]
   11ce8:	cmp	r2, r3
   11cec:	bcs	11d7c <__assert_fail@plt+0xde4>
   11cf0:	add	r3, r2, #1
   11cf4:	str	r3, [r0, #20]
   11cf8:	ldr	r3, [fp, #32]
   11cfc:	mov	r1, #10
   11d00:	strb	r1, [r2]
   11d04:	cmp	r4, r3
   11d08:	mov	r9, r8
   11d0c:	bls	11b80 <__assert_fail@plt+0xbe8>
   11d10:	mov	r5, #0
   11d14:	ldr	r3, [fp]
   11d18:	sub	r4, r4, #1
   11d1c:	add	r8, r8, #1
   11d20:	add	r7, r7, #1
   11d24:	cmp	r3, r4
   11d28:	bhi	11d5c <__assert_fail@plt+0xdc4>
   11d2c:	cmp	r3, #2
   11d30:	ldrb	r3, [sl, #2]
   11d34:	bne	11c28 <__assert_fail@plt+0xc90>
   11d38:	cmp	r3, #0
   11d3c:	ldrbne	r2, [r8, #-1]
   11d40:	ldrbeq	r2, [r7, #1]
   11d44:	ldrbne	r3, [r7, #1]
   11d48:	ldrbeq	r3, [r8, #-1]
   11d4c:	orr	r6, r3, r2, lsl #8
   11d50:	b	11c60 <__assert_fail@plt+0xcc8>
   11d54:	add	r5, r5, #1
   11d58:	b	11d14 <__assert_fail@plt+0xd7c>
   11d5c:	cmp	r5, #0
   11d60:	beq	11b80 <__assert_fail@plt+0xbe8>
   11d64:	mov	r0, r9
   11d68:	mov	r1, r5
   11d6c:	bl	12628 <__assert_fail@plt+0x1690>
   11d70:	ldr	ip, [sp, #76]	; 0x4c
   11d74:	str	r0, [ip]
   11d78:	b	11b80 <__assert_fail@plt+0xbe8>
   11d7c:	mov	r1, #10
   11d80:	bl	10f2c <__overflow@plt>
   11d84:	ldr	r3, [fp, #32]
   11d88:	b	11d04 <__assert_fail@plt+0xd6c>
   11d8c:	ldr	r1, [r5]
   11d90:	bl	10d58 <fputs_unlocked@plt>
   11d94:	ldr	ip, [sp, #76]	; 0x4c
   11d98:	ldr	r0, [ip]
   11d9c:	bl	10dc4 <free@plt>
   11da0:	ldr	ip, [sp, #76]	; 0x4c
   11da4:	mov	r2, #0
   11da8:	str	r2, [ip]
   11dac:	b	11cc8 <__assert_fail@plt+0xd30>
   11db0:	cmp	r1, #3
   11db4:	beq	11e28 <__assert_fail@plt+0xe90>
   11db8:	ldr	r2, [sp, #20]
   11dbc:	cmp	r1, #1
   11dc0:	ldr	ip, [sp, #16]
   11dc4:	moveq	ip, r2
   11dc8:	mov	r1, ip
   11dcc:	ldrd	r2, [sp, #24]
   11dd0:	rsb	r6, r9, r7
   11dd4:	mov	r0, #1
   11dd8:	subs	r2, r2, r4
   11ddc:	sbc	r3, r3, #0
   11de0:	subs	r2, r2, r6
   11de4:	sbc	r3, r3, r6, asr #31
   11de8:	bl	10ef0 <__printf_chk@plt>
   11dec:	b	11cb8 <__assert_fail@plt+0xd20>
   11df0:	ldr	ip, [sp, #8]
   11df4:	movw	r5, #16656	; 0x4110
   11df8:	ldr	r0, [sp, #12]
   11dfc:	movt	r5, #2
   11e00:	ldr	r1, [ip]
   11e04:	bl	10d58 <fputs_unlocked@plt>
   11e08:	ldr	ip, [sp, #8]
   11e0c:	movw	r0, #13660	; 0x355c
   11e10:	mov	r1, #1
   11e14:	mov	r2, #2
   11e18:	movt	r0, #1
   11e1c:	ldr	r3, [ip]
   11e20:	bl	10ddc <fwrite_unlocked@plt>
   11e24:	b	11ca8 <__assert_fail@plt+0xd10>
   11e28:	movw	r1, #13636	; 0x3544
   11e2c:	movt	r1, #1
   11e30:	b	11dcc <__assert_fail@plt+0xe34>
   11e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e38:	sub	sp, sp, #60	; 0x3c
   11e3c:	movw	r4, #16640	; 0x4100
   11e40:	movt	r4, #2
   11e44:	str	r4, [sp, #44]	; 0x2c
   11e48:	movw	r7, #16664	; 0x4118
   11e4c:	ldr	r5, [sp, #44]	; 0x2c
   11e50:	movt	r7, #2
   11e54:	str	r0, [sp, #36]	; 0x24
   11e58:	mov	r8, r2
   11e5c:	ldr	r4, [r7, #12]
   11e60:	mov	r9, r3
   11e64:	ldr	r0, [r5]
   11e68:	cmp	r4, #0
   11e6c:	str	r1, [sp, #40]	; 0x28
   11e70:	str	r0, [sp, #52]	; 0x34
   11e74:	beq	12228 <__assert_fail@plt+0x1290>
   11e78:	cmn	r4, #1
   11e7c:	beq	12318 <__assert_fail@plt+0x1380>
   11e80:	ldr	r2, [r7, #8]
   11e84:	mov	r3, #0
   11e88:	movw	r1, #16664	; 0x4118
   11e8c:	movt	r1, #2
   11e90:	cmp	r2, r8
   11e94:	sbcs	r5, r3, r9
   11e98:	bge	125d0 <__assert_fail@plt+0x1638>
   11e9c:	ldrd	r8, [r1, #24]
   11ea0:	ldrd	r2, [sp, #104]	; 0x68
   11ea4:	cmp	r2, r8
   11ea8:	sbcs	r3, r3, r9
   11eac:	ldrlt	r1, [r1, #32]
   11eb0:	blt	12124 <__assert_fail@plt+0x118c>
   11eb4:	ldr	ip, [r1, #32]
   11eb8:	ldrd	r0, [sp, #96]	; 0x60
   11ebc:	adds	r2, r8, ip
   11ec0:	adc	r3, r9, #0
   11ec4:	cmp	r2, r0
   11ec8:	sbcs	r1, r3, r1
   11ecc:	blt	12120 <__assert_fail@plt+0x1188>
   11ed0:	ldrd	r4, [sp, #96]	; 0x60
   11ed4:	mov	r1, #0
   11ed8:	str	r1, [sp, #48]	; 0x30
   11edc:	cmp	r4, r8
   11ee0:	sbcs	r5, r5, r9
   11ee4:	blt	11ef8 <__assert_fail@plt+0xf60>
   11ee8:	ldrd	r4, [sp, #96]	; 0x60
   11eec:	cmp	r4, r2
   11ef0:	sbcs	r5, r5, r3
   11ef4:	blt	12184 <__assert_fail@plt+0x11ec>
   11ef8:	mov	sl, r2
   11efc:	mov	fp, r3
   11f00:	ldrd	r4, [sp, #104]	; 0x68
   11f04:	cmp	sl, r4
   11f08:	sbcs	r5, fp, r5
   11f0c:	bge	120f8 <__assert_fail@plt+0x1160>
   11f10:	ldrd	r0, [sp, #96]	; 0x60
   11f14:	movw	r5, #16664	; 0x4118
   11f18:	ldr	r4, [r7, #36]	; 0x24
   11f1c:	movt	r5, #2
   11f20:	ldr	r3, [r7, #12]
   11f24:	cmp	r0, r8
   11f28:	sbcs	r1, r1, r9
   11f2c:	rsb	r2, r4, r3
   11f30:	add	r8, ip, r2
   11f34:	blt	125ec <__assert_fail@plt+0x1654>
   11f38:	ldrd	r0, [sp, #96]	; 0x60
   11f3c:	cmp	r0, sl
   11f40:	sbcs	r1, r1, fp
   11f44:	bge	125ec <__assert_fail@plt+0x1654>
   11f48:	cmp	r4, r3
   11f4c:	beq	121d0 <__assert_fail@plt+0x1238>
   11f50:	ldr	r2, [r5, #16]
   11f54:	rsb	r3, r3, r4
   11f58:	ldr	r0, [r5, #8]
   11f5c:	rsb	r1, r2, #0
   11f60:	add	r2, r2, r0
   11f64:	sub	r2, r2, #1
   11f68:	and	r2, r2, r1
   11f6c:	cmp	r3, r2
   11f70:	bne	12608 <__assert_fail@plt+0x1670>
   11f74:	movw	r5, #16604	; 0x40dc
   11f78:	movw	r9, #16664	; 0x4118
   11f7c:	movt	r5, #2
   11f80:	movt	r9, #2
   11f84:	strd	sl, [sp, #16]
   11f88:	mov	r1, r4
   11f8c:	str	r5, [sp, #28]
   11f90:	mov	sl, r8
   11f94:	str	r9, [sp, #32]
   11f98:	b	120d0 <__assert_fail@plt+0x1138>
   11f9c:	ldr	r6, [r7, #36]	; 0x24
   11fa0:	rsb	sl, r8, sl
   11fa4:	add	r1, r1, sl
   11fa8:	mov	r2, r8
   11fac:	add	fp, r6, fp
   11fb0:	mov	r0, fp
   11fb4:	bl	10db8 <memmove@plt>
   11fb8:	ldr	ip, [sp, #28]
   11fbc:	ldr	r4, [r7, #12]
   11fc0:	ldr	r3, [r7, #32]
   11fc4:	ldr	r9, [ip]
   11fc8:	rsb	r4, r6, r4
   11fcc:	add	r4, r4, r3
   11fd0:	mov	r1, r9
   11fd4:	mov	r0, r4
   11fd8:	bl	1297c <__assert_fail@plt+0x19e4>
   11fdc:	cmp	r1, #0
   11fe0:	bne	12500 <__assert_fail@plt+0x1568>
   11fe4:	mov	r0, r4
   11fe8:	ldrd	r2, [sp, #16]
   11fec:	asr	r1, r4, #31
   11ff0:	ldrd	r4, [sp, #104]	; 0x68
   11ff4:	subs	r4, r4, r2
   11ff8:	sbc	r5, r5, r3
   11ffc:	ldr	r2, [r7, #16]
   12000:	cmp	r0, r4
   12004:	sbcs	r3, r1, r5
   12008:	mov	r3, #0
   1200c:	movlt	r4, r0
   12010:	ldrd	r0, [sp, #16]
   12014:	bl	1299c <__assert_fail@plt+0x1a04>
   12018:	mov	sl, r4
   1201c:	orrs	ip, r2, r3
   12020:	bne	124e4 <__assert_fail@plt+0x154c>
   12024:	ldrd	r0, [sp, #16]
   12028:	mov	r2, r9
   1202c:	mov	r3, #0
   12030:	bl	1299c <__assert_fail@plt+0x1a04>
   12034:	orrs	r0, r2, r3
   12038:	bne	124c8 <__assert_fail@plt+0x1530>
   1203c:	ldrd	r2, [sp, #16]
   12040:	mov	r0, r6
   12044:	ldr	ip, [sp, #36]	; 0x24
   12048:	mov	r1, r4
   1204c:	strd	r2, [sp, #8]
   12050:	mov	r2, #1
   12054:	str	ip, [sp]
   12058:	movw	r3, #32786	; 0x8012
   1205c:	bl	10dd0 <mmap64@plt>
   12060:	cmn	r0, #1
   12064:	beq	1249c <__assert_fail@plt+0x1504>
   12068:	ldrd	r0, [sp, #16]
   1206c:	rsb	r9, r9, #0
   12070:	ldr	ip, [sp, #32]
   12074:	and	r2, r4, r9
   12078:	add	r8, r8, r2
   1207c:	strd	r0, [ip, #24]
   12080:	add	r0, sp, #48	; 0x30
   12084:	str	r8, [sp]
   12088:	mov	r1, fp
   1208c:	ldrd	r8, [sp, #16]
   12090:	str	r0, [sp, #4]
   12094:	adds	r8, r8, r2
   12098:	ldr	r0, [sp, #40]	; 0x28
   1209c:	adc	r9, r9, #0
   120a0:	mov	r2, r8
   120a4:	mov	r3, r9
   120a8:	ldrd	r8, [sp, #16]
   120ac:	adds	r8, r8, r4
   120b0:	adc	r9, r9, #0
   120b4:	strd	r8, [sp, #16]
   120b8:	bl	11984 <__assert_fail@plt+0x9ec>
   120bc:	ldrd	r4, [sp, #104]	; 0x68
   120c0:	cmp	r8, r4
   120c4:	sbcs	r5, r9, r5
   120c8:	bge	120f8 <__assert_fail@plt+0x1160>
   120cc:	mov	r1, r6
   120d0:	ldr	r3, [sp, #48]	; 0x30
   120d4:	cmp	r3, #0
   120d8:	movne	fp, #0
   120dc:	movne	r8, fp
   120e0:	bne	11f9c <__assert_fail@plt+0x1004>
   120e4:	ldr	r8, [r7, #8]
   120e8:	cmp	sl, r8
   120ec:	bcc	1251c <__assert_fail@plt+0x1584>
   120f0:	rsb	fp, r8, #0
   120f4:	b	11f9c <__assert_fail@plt+0x1004>
   120f8:	ldr	r0, [sp, #48]	; 0x30
   120fc:	bl	10dc4 <free@plt>
   12100:	mov	r0, #0
   12104:	ldr	r8, [sp, #44]	; 0x2c
   12108:	ldr	r2, [sp, #52]	; 0x34
   1210c:	ldr	r3, [r8]
   12110:	cmp	r2, r3
   12114:	bne	12584 <__assert_fail@plt+0x15ec>
   12118:	add	sp, sp, #60	; 0x3c
   1211c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12120:	mov	r1, ip
   12124:	ldrd	r8, [sp, #96]	; 0x60
   12128:	mov	r0, r4
   1212c:	ldr	r5, [sp, #36]	; 0x24
   12130:	mov	r2, #1
   12134:	ldr	r3, [r7, #16]
   12138:	mov	fp, #0
   1213c:	strd	r8, [sp, #8]
   12140:	rsb	ip, r3, #0
   12144:	str	r5, [sp]
   12148:	movw	r3, #32786	; 0x8012
   1214c:	and	sl, r8, ip
   12150:	strd	sl, [r7, #24]
   12154:	bl	10dd0 <mmap64@plt>
   12158:	movw	r3, #16664	; 0x4118
   1215c:	movt	r3, #2
   12160:	cmn	r0, #1
   12164:	beq	1249c <__assert_fail@plt+0x1504>
   12168:	ldr	ip, [r3, #32]
   1216c:	mov	r8, sl
   12170:	str	r4, [r3, #36]	; 0x24
   12174:	mov	r9, fp
   12178:	adds	r2, sl, ip
   1217c:	adc	r3, fp, #0
   12180:	b	11ed0 <__assert_fail@plt+0xf38>
   12184:	ldrd	r4, [sp, #104]	; 0x68
   12188:	add	ip, sp, #48	; 0x30
   1218c:	ldr	r0, [sp, #96]	; 0x60
   12190:	cmp	r4, r2
   12194:	sbcs	r5, r5, r3
   12198:	ldr	r1, [r7, #36]	; 0x24
   1219c:	rsb	r8, r8, r0
   121a0:	str	ip, [sp, #4]
   121a4:	ldrdlt	r2, [sp, #104]	; 0x68
   121a8:	add	r1, r1, r8
   121ac:	rsb	r0, r0, r2
   121b0:	str	r0, [sp]
   121b4:	ldr	r0, [sp, #40]	; 0x28
   121b8:	bl	11984 <__assert_fail@plt+0x9ec>
   121bc:	ldrd	r8, [r7, #24]
   121c0:	ldr	ip, [r7, #32]
   121c4:	adds	sl, r8, ip
   121c8:	adc	fp, r9, #0
   121cc:	b	11f00 <__assert_fail@plt+0xf68>
   121d0:	ldr	r3, [r5, #16]
   121d4:	ldr	r6, [r5, #8]
   121d8:	rsb	r2, r3, #0
   121dc:	add	r6, r3, r6
   121e0:	sub	r6, r6, #1
   121e4:	and	r6, r6, r2
   121e8:	add	r3, r6, r3
   121ec:	cmp	r3, ip
   121f0:	bhi	125b4 <__assert_fail@plt+0x161c>
   121f4:	mov	r1, r6
   121f8:	mov	r0, r4
   121fc:	mov	r2, #3
   12200:	bl	10dac <mprotect@plt>
   12204:	cmp	r0, #0
   12208:	addeq	r6, r4, r6
   1220c:	streq	r6, [r5, #36]	; 0x24
   12210:	beq	11f74 <__assert_fail@plt+0xfdc>
   12214:	bl	10ec0 <__errno_location@plt>
   12218:	movw	r1, #13992	; 0x36a8
   1221c:	mov	r2, #5
   12220:	movt	r1, #1
   12224:	b	124ac <__assert_fail@plt+0x1514>
   12228:	ldr	r6, [r7, #16]
   1222c:	cmp	r8, #1073741825	; 0x40000001
   12230:	sbcs	ip, r9, #0
   12234:	ldr	r0, [r7, #8]
   12238:	mov	r5, r2
   1223c:	ldrd	sl, [sp, #96]	; 0x60
   12240:	rsb	r3, r6, #0
   12244:	lsl	r4, r6, #1
   12248:	mov	r1, r6
   1224c:	add	r0, r6, r0, lsl #1
   12250:	movge	r5, #1073741824	; 0x40000000
   12254:	and	sl, sl, r3
   12258:	mov	fp, #0
   1225c:	mvn	r3, #-268435456	; 0xf0000000
   12260:	strd	sl, [r7, #24]
   12264:	cmp	r4, r3
   12268:	movcc	r4, r3
   1226c:	bl	12790 <__assert_fail@plt+0x17f8>
   12270:	mul	r0, r6, r0
   12274:	ldr	r6, [sp, #36]	; 0x24
   12278:	cmp	r4, r0
   1227c:	movcc	r4, r0
   12280:	b	122a4 <__assert_fail@plt+0x130c>
   12284:	bl	10ec0 <__errno_location@plt>
   12288:	ldr	r3, [r0]
   1228c:	cmp	r3, #12
   12290:	cmpne	r3, #22
   12294:	bne	122ec <__assert_fail@plt+0x1354>
   12298:	lsr	r5, r5, #1
   1229c:	cmp	r4, r5
   122a0:	bhi	122ec <__assert_fail@plt+0x1354>
   122a4:	str	r6, [sp]
   122a8:	mov	r0, #0
   122ac:	strd	sl, [sp, #8]
   122b0:	mov	r1, r5
   122b4:	mov	r2, #1
   122b8:	movw	r3, #32770	; 0x8002
   122bc:	bl	10dd0 <mmap64@plt>
   122c0:	cmn	r0, #1
   122c4:	beq	12284 <__assert_fail@plt+0x12ec>
   122c8:	mov	r6, r0
   122cc:	mov	r1, r5
   122d0:	mov	r2, #2
   122d4:	mov	r4, r6
   122d8:	bl	10e3c <posix_madvise@plt>
   122dc:	str	r5, [r7, #32]
   122e0:	str	r6, [r7, #12]
   122e4:	str	r6, [r7, #36]	; 0x24
   122e8:	b	11e80 <__assert_fail@plt+0xee8>
   122ec:	mov	r1, #2
   122f0:	mov	r2, #0
   122f4:	mov	r3, #0
   122f8:	str	r1, [sp, #8]
   122fc:	strd	r2, [sp]
   12300:	mvn	r1, #0
   12304:	ldr	r0, [sp, #36]	; 0x24
   12308:	str	r5, [r7, #32]
   1230c:	str	r1, [r7, #12]
   12310:	str	r1, [r7, #36]	; 0x24
   12314:	bl	10d94 <posix_fadvise64@plt>
   12318:	ldrd	r4, [sp, #96]	; 0x60
   1231c:	orrs	r5, r4, r5
   12320:	beq	12348 <__assert_fail@plt+0x13b0>
   12324:	mov	r4, #0
   12328:	ldr	r0, [sp, #36]	; 0x24
   1232c:	str	r4, [sp]
   12330:	ldrd	r2, [sp, #96]	; 0x60
   12334:	bl	10e48 <lseek64@plt>
   12338:	ldrd	r8, [sp, #96]	; 0x60
   1233c:	cmp	r1, r9
   12340:	cmpeq	r0, r8
   12344:	bne	12588 <__assert_fail@plt+0x15f0>
   12348:	movw	r6, #16604	; 0x40dc
   1234c:	movt	r6, #2
   12350:	ldr	r0, [r7, #8]
   12354:	ldr	r3, [r6]
   12358:	ldrd	r4, [sp, #96]	; 0x60
   1235c:	add	r0, r0, r3
   12360:	ldrd	r8, [sp, #104]	; 0x68
   12364:	add	r0, r0, #65280	; 0xff00
   12368:	add	r0, r0, #255	; 0xff
   1236c:	subs	r8, r8, r4
   12370:	sbc	r9, r9, r5
   12374:	mov	r4, #0
   12378:	str	r4, [sp, #48]	; 0x30
   1237c:	bl	12664 <__assert_fail@plt+0x16cc>
   12380:	cmp	r8, #1
   12384:	sbcs	r5, r9, #0
   12388:	ldrlt	r5, [sp, #48]	; 0x30
   1238c:	mov	sl, r0
   12390:	blt	12484 <__assert_fail@plt+0x14ec>
   12394:	movw	r5, #16664	; 0x4118
   12398:	movt	r5, #2
   1239c:	mov	r3, r5
   123a0:	mov	r5, r4
   123a4:	mov	fp, r3
   123a8:	mov	r0, #65536	; 0x10000
   123ac:	mov	r1, #0
   123b0:	cmp	r0, r8
   123b4:	sbcs	r1, r1, r9
   123b8:	add	r3, sl, r5
   123bc:	mov	r4, r8
   123c0:	str	r3, [sp, #24]
   123c4:	movlt	r4, #65536	; 0x10000
   123c8:	b	123dc <__assert_fail@plt+0x1444>
   123cc:	bl	10ec0 <__errno_location@plt>
   123d0:	ldr	r3, [r0]
   123d4:	cmp	r3, #4
   123d8:	bne	12538 <__assert_fail@plt+0x15a0>
   123dc:	ldr	r0, [sp, #36]	; 0x24
   123e0:	mov	r2, r4
   123e4:	ldr	r1, [sp, #24]
   123e8:	bl	10da0 <read@plt>
   123ec:	cmn	r0, #1
   123f0:	beq	123cc <__assert_fail@plt+0x1434>
   123f4:	cmp	r0, #0
   123f8:	beq	12544 <__assert_fail@plt+0x15ac>
   123fc:	blt	12538 <__assert_fail@plt+0x15a0>
   12400:	ldr	r2, [r7, #8]
   12404:	add	r5, r5, r0
   12408:	subs	r8, r8, r0
   1240c:	sbc	r9, r9, r0, asr #31
   12410:	cmp	r5, r2
   12414:	bcc	12470 <__assert_fail@plt+0x14d8>
   12418:	ldr	r4, [r6]
   1241c:	add	ip, sp, #48	; 0x30
   12420:	ldrd	r2, [sp, #96]	; 0x60
   12424:	mov	r1, sl
   12428:	rsb	r4, r4, #0
   1242c:	ldr	r0, [sp, #40]	; 0x28
   12430:	and	r4, r5, r4
   12434:	str	ip, [sp, #4]
   12438:	adds	r2, r2, r4
   1243c:	str	r4, [sp]
   12440:	adc	r3, r3, #0
   12444:	strd	r2, [sp, #96]	; 0x60
   12448:	bl	11984 <__assert_fail@plt+0x9ec>
   1244c:	ldr	r3, [sp, #48]	; 0x30
   12450:	mov	r0, sl
   12454:	cmp	r3, #0
   12458:	ldreq	r5, [fp, #8]
   1245c:	movne	r5, #0
   12460:	rsb	r1, r5, r4
   12464:	add	r1, sl, r1
   12468:	mov	r2, r5
   1246c:	bl	10db8 <memmove@plt>
   12470:	cmp	r8, #1
   12474:	sbcs	r3, r9, #0
   12478:	bge	123a8 <__assert_fail@plt+0x1410>
   1247c:	ldr	r5, [sp, #48]	; 0x30
   12480:	mov	r4, #0
   12484:	mov	r0, sl
   12488:	bl	10dc4 <free@plt>
   1248c:	mov	r0, r5
   12490:	bl	10dc4 <free@plt>
   12494:	mov	r0, r4
   12498:	b	12104 <__assert_fail@plt+0x116c>
   1249c:	bl	10ec0 <__errno_location@plt>
   124a0:	movw	r1, #13768	; 0x35c8
   124a4:	movt	r1, #1
   124a8:	mov	r2, #5
   124ac:	ldr	r4, [r0]
   124b0:	mov	r0, #0
   124b4:	bl	10de8 <dcgettext@plt>
   124b8:	mov	r1, r4
   124bc:	mov	r2, r0
   124c0:	mov	r0, #1
   124c4:	bl	10e54 <error@plt>
   124c8:	movw	r0, #14116	; 0x3724
   124cc:	movw	r1, #13724	; 0x359c
   124d0:	movt	r0, #1
   124d4:	movt	r1, #1
   124d8:	movw	r2, #662	; 0x296
   124dc:	ldr	r3, [pc, #320]	; 12624 <__assert_fail@plt+0x168c>
   124e0:	bl	10f98 <__assert_fail@plt>
   124e4:	movw	r0, #14092	; 0x370c
   124e8:	movw	r1, #13724	; 0x359c
   124ec:	movt	r0, #1
   124f0:	movt	r1, #1
   124f4:	movw	r2, #661	; 0x295
   124f8:	ldr	r3, [pc, #292]	; 12624 <__assert_fail@plt+0x168c>
   124fc:	bl	10f98 <__assert_fail@plt>
   12500:	movw	r0, #14028	; 0x36cc
   12504:	movw	r1, #13724	; 0x359c
   12508:	movt	r0, #1
   1250c:	movt	r1, #1
   12510:	movw	r2, #657	; 0x291
   12514:	ldr	r3, [pc, #264]	; 12624 <__assert_fail@plt+0x168c>
   12518:	bl	10f98 <__assert_fail@plt>
   1251c:	movw	r0, #14008	; 0x36b8
   12520:	movw	r1, #13724	; 0x359c
   12524:	movt	r0, #1
   12528:	movt	r1, #1
   1252c:	movw	r2, #651	; 0x28b
   12530:	ldr	r3, [pc, #236]	; 12624 <__assert_fail@plt+0x168c>
   12534:	bl	10f98 <__assert_fail@plt>
   12538:	ldr	r5, [sp, #48]	; 0x30
   1253c:	mov	r4, #1
   12540:	b	12484 <__assert_fail@plt+0x14ec>
   12544:	mov	fp, r5
   12548:	ldr	r5, [sp, #48]	; 0x30
   1254c:	cmp	fp, #0
   12550:	cmpne	r5, #0
   12554:	moveq	r3, #0
   12558:	movne	r3, #1
   1255c:	moveq	r4, r3
   12560:	beq	12484 <__assert_fail@plt+0x14ec>
   12564:	movw	r0, #13680	; 0x3570
   12568:	movw	r1, #13724	; 0x359c
   1256c:	movw	r3, #13216	; 0x33a0
   12570:	movt	r0, #1
   12574:	movt	r1, #1
   12578:	movw	r2, #519	; 0x207
   1257c:	movt	r3, #1
   12580:	bl	10f98 <__assert_fail@plt>
   12584:	bl	10df4 <__stack_chk_fail@plt>
   12588:	bl	10ec0 <__errno_location@plt>
   1258c:	mov	r2, #5
   12590:	movw	r1, #13664	; 0x3560
   12594:	movt	r1, #1
   12598:	ldr	r5, [r0]
   1259c:	mov	r0, r4
   125a0:	bl	10de8 <dcgettext@plt>
   125a4:	mov	r1, r5
   125a8:	mov	r2, r0
   125ac:	mov	r0, #1
   125b0:	bl	10e54 <error@plt>
   125b4:	movw	r0, #13960	; 0x3688
   125b8:	movw	r1, #13724	; 0x359c
   125bc:	movt	r0, #1
   125c0:	movt	r1, #1
   125c4:	movw	r2, #633	; 0x279
   125c8:	ldr	r3, [pc, #84]	; 12624 <__assert_fail@plt+0x168c>
   125cc:	bl	10f98 <__assert_fail@plt>
   125d0:	movw	r0, #13736	; 0x35a8
   125d4:	movw	r1, #13724	; 0x359c
   125d8:	movt	r0, #1
   125dc:	movt	r1, #1
   125e0:	movw	r2, #590	; 0x24e
   125e4:	ldr	r3, [pc, #56]	; 12624 <__assert_fail@plt+0x168c>
   125e8:	bl	10f98 <__assert_fail@plt>
   125ec:	movw	r0, #13784	; 0x35d8
   125f0:	movw	r1, #13724	; 0x359c
   125f4:	movt	r0, #1
   125f8:	movt	r1, #1
   125fc:	movw	r2, #625	; 0x271
   12600:	ldr	r3, [pc, #28]	; 12624 <__assert_fail@plt+0x168c>
   12604:	bl	10f98 <__assert_fail@plt>
   12608:	movw	r0, #13856	; 0x3620
   1260c:	movw	r1, #13724	; 0x359c
   12610:	movt	r0, #1
   12614:	movt	r1, #1
   12618:	movw	r2, #629	; 0x275
   1261c:	ldr	r3, [pc]	; 12624 <__assert_fail@plt+0x168c>
   12620:	bl	10f98 <__assert_fail@plt>
   12624:			; <UNDEFINED> instruction: 0x000133b4
   12628:	push	{r4, r5, r6, lr}
   1262c:	mov	r6, r0
   12630:	bl	10f14 <strnlen@plt>
   12634:	mov	r4, r0
   12638:	add	r0, r0, #1
   1263c:	bl	12664 <__assert_fail@plt+0x16cc>
   12640:	mov	r2, r4
   12644:	mov	r1, r6
   12648:	mov	r5, r0
   1264c:	bl	10e90 <mempcpy@plt>
   12650:	mov	r2, #0
   12654:	mov	r3, r0
   12658:	mov	r0, r5
   1265c:	strb	r2, [r3]
   12660:	pop	{r4, r5, r6, pc}
   12664:	push	{r4, lr}
   12668:	bl	10e6c <malloc@plt>
   1266c:	subs	r4, r0, #0
   12670:	popne	{r4, pc}
   12674:	ldr	r1, [pc, #24]	; 12694 <__assert_fail@plt+0x16fc>
   12678:	mov	r2, #5
   1267c:	add	r1, pc, r1
   12680:	bl	10de8 <dcgettext@plt>
   12684:	mov	r1, r4
   12688:	mov	r2, r0
   1268c:	mov	r0, #1
   12690:	bl	10e54 <error@plt>
   12694:	andeq	r1, r0, r4, lsr #6
   12698:	push	{r4, lr}
   1269c:	bl	10d4c <calloc@plt>
   126a0:	subs	r4, r0, #0
   126a4:	popne	{r4, pc}
   126a8:	ldr	r1, [pc, #24]	; 126c8 <__assert_fail@plt+0x1730>
   126ac:	mov	r2, #5
   126b0:	add	r1, pc, r1
   126b4:	bl	10de8 <dcgettext@plt>
   126b8:	mov	r1, r4
   126bc:	mov	r2, r0
   126c0:	mov	r0, #1
   126c4:	bl	10e54 <error@plt>
   126c8:	strdeq	r1, [r0], -r0
   126cc:	push	{r4, lr}
   126d0:	bl	10e0c <realloc@plt>
   126d4:	subs	r4, r0, #0
   126d8:	popne	{r4, pc}
   126dc:	ldr	r1, [pc, #24]	; 126fc <__assert_fail@plt+0x1764>
   126e0:	mov	r2, #5
   126e4:	add	r1, pc, r1
   126e8:	bl	10de8 <dcgettext@plt>
   126ec:	mov	r1, r4
   126f0:	mov	r2, r0
   126f4:	mov	r0, #1
   126f8:	bl	10e54 <error@plt>
   126fc:			; <UNDEFINED> instruction: 0x000012bc
   12700:	push	{r4, lr}
   12704:	sub	sp, sp, #8
   12708:	ldr	lr, [pc, #104]	; 12778 <__assert_fail@plt+0x17e0>
   1270c:	mov	r4, r0
   12710:	ldr	ip, [pc, #100]	; 1277c <__assert_fail@plt+0x17e4>
   12714:	ldr	r2, [pc, #100]	; 12780 <__assert_fail@plt+0x17e8>
   12718:	add	lr, pc, lr
   1271c:	ldr	r3, [r1, #40]	; 0x28
   12720:	add	ip, pc, ip
   12724:	str	lr, [sp]
   12728:	mov	r1, #1
   1272c:	str	ip, [sp, #4]
   12730:	add	r2, pc, r2
   12734:	bl	10efc <__fprintf_chk@plt>
   12738:	ldr	r1, [pc, #68]	; 12784 <__assert_fail@plt+0x17ec>
   1273c:	mov	r2, #5
   12740:	mov	r0, #0
   12744:	add	r1, pc, r1
   12748:	bl	10de8 <dcgettext@plt>
   1274c:	ldr	ip, [pc, #52]	; 12788 <__assert_fail@plt+0x17f0>
   12750:	ldr	r3, [pc, #52]	; 1278c <__assert_fail@plt+0x17f4>
   12754:	mov	r1, #1
   12758:	add	ip, pc, ip
   1275c:	str	ip, [sp]
   12760:	add	r3, pc, r3
   12764:	mov	r2, r0
   12768:	mov	r0, r4
   1276c:	bl	10efc <__fprintf_chk@plt>
   12770:	add	sp, sp, #8
   12774:	pop	{r4, pc}
   12778:	andeq	r1, r0, r8, asr #32
   1277c:	andeq	r1, r0, r0, lsr #5
   12780:	andeq	r1, r0, r4, lsl #5
   12784:	andeq	r1, r0, r4, lsl #5
   12788:	andeq	r1, r0, r0, asr #6
   1278c:	andeq	r1, r0, r0, lsr r3
   12790:	subs	r2, r1, #1
   12794:	bxeq	lr
   12798:	bcc	12970 <__assert_fail@plt+0x19d8>
   1279c:	cmp	r0, r1
   127a0:	bls	12954 <__assert_fail@plt+0x19bc>
   127a4:	tst	r1, r2
   127a8:	beq	12960 <__assert_fail@plt+0x19c8>
   127ac:	clz	r3, r0
   127b0:	clz	r2, r1
   127b4:	sub	r3, r2, r3
   127b8:	rsbs	r3, r3, #31
   127bc:	addne	r3, r3, r3, lsl #1
   127c0:	mov	r2, #0
   127c4:	addne	pc, pc, r3, lsl #2
   127c8:	nop	{0}
   127cc:	cmp	r0, r1, lsl #31
   127d0:	adc	r2, r2, r2
   127d4:	subcs	r0, r0, r1, lsl #31
   127d8:	cmp	r0, r1, lsl #30
   127dc:	adc	r2, r2, r2
   127e0:	subcs	r0, r0, r1, lsl #30
   127e4:	cmp	r0, r1, lsl #29
   127e8:	adc	r2, r2, r2
   127ec:	subcs	r0, r0, r1, lsl #29
   127f0:	cmp	r0, r1, lsl #28
   127f4:	adc	r2, r2, r2
   127f8:	subcs	r0, r0, r1, lsl #28
   127fc:	cmp	r0, r1, lsl #27
   12800:	adc	r2, r2, r2
   12804:	subcs	r0, r0, r1, lsl #27
   12808:	cmp	r0, r1, lsl #26
   1280c:	adc	r2, r2, r2
   12810:	subcs	r0, r0, r1, lsl #26
   12814:	cmp	r0, r1, lsl #25
   12818:	adc	r2, r2, r2
   1281c:	subcs	r0, r0, r1, lsl #25
   12820:	cmp	r0, r1, lsl #24
   12824:	adc	r2, r2, r2
   12828:	subcs	r0, r0, r1, lsl #24
   1282c:	cmp	r0, r1, lsl #23
   12830:	adc	r2, r2, r2
   12834:	subcs	r0, r0, r1, lsl #23
   12838:	cmp	r0, r1, lsl #22
   1283c:	adc	r2, r2, r2
   12840:	subcs	r0, r0, r1, lsl #22
   12844:	cmp	r0, r1, lsl #21
   12848:	adc	r2, r2, r2
   1284c:	subcs	r0, r0, r1, lsl #21
   12850:	cmp	r0, r1, lsl #20
   12854:	adc	r2, r2, r2
   12858:	subcs	r0, r0, r1, lsl #20
   1285c:	cmp	r0, r1, lsl #19
   12860:	adc	r2, r2, r2
   12864:	subcs	r0, r0, r1, lsl #19
   12868:	cmp	r0, r1, lsl #18
   1286c:	adc	r2, r2, r2
   12870:	subcs	r0, r0, r1, lsl #18
   12874:	cmp	r0, r1, lsl #17
   12878:	adc	r2, r2, r2
   1287c:	subcs	r0, r0, r1, lsl #17
   12880:	cmp	r0, r1, lsl #16
   12884:	adc	r2, r2, r2
   12888:	subcs	r0, r0, r1, lsl #16
   1288c:	cmp	r0, r1, lsl #15
   12890:	adc	r2, r2, r2
   12894:	subcs	r0, r0, r1, lsl #15
   12898:	cmp	r0, r1, lsl #14
   1289c:	adc	r2, r2, r2
   128a0:	subcs	r0, r0, r1, lsl #14
   128a4:	cmp	r0, r1, lsl #13
   128a8:	adc	r2, r2, r2
   128ac:	subcs	r0, r0, r1, lsl #13
   128b0:	cmp	r0, r1, lsl #12
   128b4:	adc	r2, r2, r2
   128b8:	subcs	r0, r0, r1, lsl #12
   128bc:	cmp	r0, r1, lsl #11
   128c0:	adc	r2, r2, r2
   128c4:	subcs	r0, r0, r1, lsl #11
   128c8:	cmp	r0, r1, lsl #10
   128cc:	adc	r2, r2, r2
   128d0:	subcs	r0, r0, r1, lsl #10
   128d4:	cmp	r0, r1, lsl #9
   128d8:	adc	r2, r2, r2
   128dc:	subcs	r0, r0, r1, lsl #9
   128e0:	cmp	r0, r1, lsl #8
   128e4:	adc	r2, r2, r2
   128e8:	subcs	r0, r0, r1, lsl #8
   128ec:	cmp	r0, r1, lsl #7
   128f0:	adc	r2, r2, r2
   128f4:	subcs	r0, r0, r1, lsl #7
   128f8:	cmp	r0, r1, lsl #6
   128fc:	adc	r2, r2, r2
   12900:	subcs	r0, r0, r1, lsl #6
   12904:	cmp	r0, r1, lsl #5
   12908:	adc	r2, r2, r2
   1290c:	subcs	r0, r0, r1, lsl #5
   12910:	cmp	r0, r1, lsl #4
   12914:	adc	r2, r2, r2
   12918:	subcs	r0, r0, r1, lsl #4
   1291c:	cmp	r0, r1, lsl #3
   12920:	adc	r2, r2, r2
   12924:	subcs	r0, r0, r1, lsl #3
   12928:	cmp	r0, r1, lsl #2
   1292c:	adc	r2, r2, r2
   12930:	subcs	r0, r0, r1, lsl #2
   12934:	cmp	r0, r1, lsl #1
   12938:	adc	r2, r2, r2
   1293c:	subcs	r0, r0, r1, lsl #1
   12940:	cmp	r0, r1
   12944:	adc	r2, r2, r2
   12948:	subcs	r0, r0, r1
   1294c:	mov	r0, r2
   12950:	bx	lr
   12954:	moveq	r0, #1
   12958:	movne	r0, #0
   1295c:	bx	lr
   12960:	clz	r2, r1
   12964:	rsb	r2, r2, #31
   12968:	lsr	r0, r0, r2
   1296c:	bx	lr
   12970:	cmp	r0, #0
   12974:	mvnne	r0, #0
   12978:	b	129e4 <__assert_fail@plt+0x1a4c>
   1297c:	cmp	r1, #0
   12980:	beq	12970 <__assert_fail@plt+0x19d8>
   12984:	push	{r0, r1, lr}
   12988:	bl	12790 <__assert_fail@plt+0x17f8>
   1298c:	pop	{r1, r2, lr}
   12990:	mul	r3, r2, r0
   12994:	sub	r1, r1, r3
   12998:	bx	lr
   1299c:	cmp	r3, #0
   129a0:	cmpeq	r2, #0
   129a4:	bne	129c8 <__assert_fail@plt+0x1a30>
   129a8:	cmp	r1, #0
   129ac:	movlt	r1, #-2147483648	; 0x80000000
   129b0:	movlt	r0, #0
   129b4:	blt	129c4 <__assert_fail@plt+0x1a2c>
   129b8:	cmpeq	r0, #0
   129bc:	mvnne	r1, #-2147483648	; 0x80000000
   129c0:	mvnne	r0, #0
   129c4:	b	129e4 <__assert_fail@plt+0x1a4c>
   129c8:	sub	sp, sp, #8
   129cc:	push	{sp, lr}
   129d0:	bl	129f4 <__assert_fail@plt+0x1a5c>
   129d4:	ldr	lr, [sp, #4]
   129d8:	add	sp, sp, #8
   129dc:	pop	{r2, r3}
   129e0:	bx	lr
   129e4:	push	{r1, lr}
   129e8:	mov	r0, #8
   129ec:	bl	10d64 <raise@plt>
   129f0:	pop	{r1, pc}
   129f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   129f8:	mov	r8, r2
   129fc:	mov	r6, r0
   12a00:	mov	r7, r1
   12a04:	mov	sl, r3
   12a08:	ldr	r9, [sp, #32]
   12a0c:	bl	12a6c <__assert_fail@plt+0x1ad4>
   12a10:	umull	r4, r5, r8, r0
   12a14:	mul	r8, r8, r1
   12a18:	mla	r2, r0, sl, r8
   12a1c:	add	r5, r2, r5
   12a20:	subs	r4, r6, r4
   12a24:	sbc	r5, r7, r5
   12a28:	strd	r4, [r9]
   12a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a30:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12a34:	mov	r8, r2
   12a38:	mov	r6, r0
   12a3c:	mov	r7, r1
   12a40:	mov	r5, r3
   12a44:	ldr	r9, [sp, #32]
   12a48:	bl	12ef8 <__assert_fail@plt+0x1f60>
   12a4c:	mul	r3, r0, r5
   12a50:	umull	r4, r5, r0, r8
   12a54:	mla	r8, r8, r1, r3
   12a58:	add	r5, r8, r5
   12a5c:	subs	r4, r6, r4
   12a60:	sbc	r5, r7, r5
   12a64:	strd	r4, [r9]
   12a68:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a70:	rsbs	r4, r0, #0
   12a74:	rsc	r5, r1, #0
   12a78:	cmp	r1, #0
   12a7c:	mvn	r6, #0
   12a80:	sub	sp, sp, #12
   12a84:	movge	r4, r0
   12a88:	movge	r5, r1
   12a8c:	movge	r6, #0
   12a90:	cmp	r3, #0
   12a94:	blt	12ccc <__assert_fail@plt+0x1d34>
   12a98:	cmp	r3, #0
   12a9c:	mov	sl, r4
   12aa0:	mov	ip, r5
   12aa4:	mov	r0, r2
   12aa8:	mov	r1, r3
   12aac:	mov	r8, r2
   12ab0:	mov	r7, r4
   12ab4:	mov	r9, r5
   12ab8:	bne	12bb0 <__assert_fail@plt+0x1c18>
   12abc:	cmp	r2, r5
   12ac0:	bls	12bec <__assert_fail@plt+0x1c54>
   12ac4:	clz	r3, r2
   12ac8:	cmp	r3, #0
   12acc:	rsbne	r2, r3, #32
   12ad0:	lslne	r8, r0, r3
   12ad4:	lsrne	r2, r4, r2
   12ad8:	lslne	r7, r4, r3
   12adc:	orrne	r9, r2, r5, lsl r3
   12ae0:	lsr	r4, r8, #16
   12ae4:	uxth	sl, r8
   12ae8:	mov	r1, r4
   12aec:	mov	r0, r9
   12af0:	bl	12790 <__assert_fail@plt+0x17f8>
   12af4:	mov	r1, r4
   12af8:	mov	fp, r0
   12afc:	mov	r0, r9
   12b00:	bl	1297c <__assert_fail@plt+0x19e4>
   12b04:	mul	r0, sl, fp
   12b08:	lsr	r2, r7, #16
   12b0c:	orr	r1, r2, r1, lsl #16
   12b10:	cmp	r0, r1
   12b14:	bls	12b38 <__assert_fail@plt+0x1ba0>
   12b18:	adds	r1, r1, r8
   12b1c:	sub	r3, fp, #1
   12b20:	bcs	12b34 <__assert_fail@plt+0x1b9c>
   12b24:	cmp	r0, r1
   12b28:	subhi	fp, fp, #2
   12b2c:	addhi	r1, r1, r8
   12b30:	bhi	12b38 <__assert_fail@plt+0x1ba0>
   12b34:	mov	fp, r3
   12b38:	rsb	r9, r0, r1
   12b3c:	mov	r1, r4
   12b40:	uxth	r7, r7
   12b44:	mov	r0, r9
   12b48:	bl	12790 <__assert_fail@plt+0x17f8>
   12b4c:	mov	r1, r4
   12b50:	mov	r5, r0
   12b54:	mov	r0, r9
   12b58:	bl	1297c <__assert_fail@plt+0x19e4>
   12b5c:	mul	sl, sl, r5
   12b60:	orr	r1, r7, r1, lsl #16
   12b64:	cmp	sl, r1
   12b68:	bls	12b88 <__assert_fail@plt+0x1bf0>
   12b6c:	adds	r8, r1, r8
   12b70:	sub	r3, r5, #1
   12b74:	bcs	12b84 <__assert_fail@plt+0x1bec>
   12b78:	cmp	sl, r8
   12b7c:	subhi	r5, r5, #2
   12b80:	bhi	12b88 <__assert_fail@plt+0x1bf0>
   12b84:	mov	r5, r3
   12b88:	orr	r3, r5, fp, lsl #16
   12b8c:	mov	r4, #0
   12b90:	cmp	r6, #0
   12b94:	mov	r0, r3
   12b98:	mov	r1, r4
   12b9c:	beq	12ba8 <__assert_fail@plt+0x1c10>
   12ba0:	rsbs	r0, r0, #0
   12ba4:	rsc	r1, r1, #0
   12ba8:	add	sp, sp, #12
   12bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bb0:	cmp	r3, r5
   12bb4:	movhi	r4, #0
   12bb8:	movhi	r3, r4
   12bbc:	bhi	12b90 <__assert_fail@plt+0x1bf8>
   12bc0:	clz	r5, r1
   12bc4:	cmp	r5, #0
   12bc8:	bne	12db8 <__assert_fail@plt+0x1e20>
   12bcc:	cmp	r1, ip
   12bd0:	cmpcs	r2, sl
   12bd4:	movhi	r4, #0
   12bd8:	movls	r4, #1
   12bdc:	movls	r3, #1
   12be0:	movls	r4, r5
   12be4:	movhi	r3, r4
   12be8:	b	12b90 <__assert_fail@plt+0x1bf8>
   12bec:	cmp	r2, #0
   12bf0:	bne	12c04 <__assert_fail@plt+0x1c6c>
   12bf4:	mov	r1, r2
   12bf8:	mov	r0, #1
   12bfc:	bl	12790 <__assert_fail@plt+0x17f8>
   12c00:	mov	r8, r0
   12c04:	clz	r3, r8
   12c08:	cmp	r3, #0
   12c0c:	bne	12cdc <__assert_fail@plt+0x1d44>
   12c10:	rsb	r9, r8, r9
   12c14:	lsr	r5, r8, #16
   12c18:	uxth	sl, r8
   12c1c:	mov	r4, #1
   12c20:	mov	r1, r5
   12c24:	mov	r0, r9
   12c28:	bl	12790 <__assert_fail@plt+0x17f8>
   12c2c:	mov	r1, r5
   12c30:	mov	fp, r0
   12c34:	mov	r0, r9
   12c38:	bl	1297c <__assert_fail@plt+0x19e4>
   12c3c:	mul	r0, sl, fp
   12c40:	lsr	r2, r7, #16
   12c44:	orr	r1, r2, r1, lsl #16
   12c48:	cmp	r0, r1
   12c4c:	bls	12c6c <__assert_fail@plt+0x1cd4>
   12c50:	adds	r1, r1, r8
   12c54:	sub	r3, fp, #1
   12c58:	bcs	12ed8 <__assert_fail@plt+0x1f40>
   12c5c:	cmp	r0, r1
   12c60:	subhi	fp, fp, #2
   12c64:	addhi	r1, r1, r8
   12c68:	bls	12ed8 <__assert_fail@plt+0x1f40>
   12c6c:	rsb	r2, r0, r1
   12c70:	mov	r1, r5
   12c74:	str	r2, [sp]
   12c78:	uxth	r7, r7
   12c7c:	mov	r0, r2
   12c80:	bl	12790 <__assert_fail@plt+0x17f8>
   12c84:	ldr	r2, [sp]
   12c88:	mov	r1, r5
   12c8c:	mov	r9, r0
   12c90:	mov	r0, r2
   12c94:	bl	1297c <__assert_fail@plt+0x19e4>
   12c98:	mul	sl, sl, r9
   12c9c:	orr	r1, r7, r1, lsl #16
   12ca0:	cmp	sl, r1
   12ca4:	bls	12cc4 <__assert_fail@plt+0x1d2c>
   12ca8:	adds	r8, r1, r8
   12cac:	sub	r3, r9, #1
   12cb0:	bcs	12cc0 <__assert_fail@plt+0x1d28>
   12cb4:	cmp	sl, r8
   12cb8:	subhi	r9, r9, #2
   12cbc:	bhi	12cc4 <__assert_fail@plt+0x1d2c>
   12cc0:	mov	r9, r3
   12cc4:	orr	r3, r9, fp, lsl #16
   12cc8:	b	12b90 <__assert_fail@plt+0x1bf8>
   12ccc:	mvn	r6, r6
   12cd0:	rsbs	r2, r2, #0
   12cd4:	rsc	r3, r3, #0
   12cd8:	b	12a98 <__assert_fail@plt+0x1b00>
   12cdc:	lsl	r8, r8, r3
   12ce0:	rsb	fp, r3, #32
   12ce4:	lsr	r4, r9, fp
   12ce8:	lsr	fp, r7, fp
   12cec:	lsr	r5, r8, #16
   12cf0:	orr	fp, fp, r9, lsl r3
   12cf4:	mov	r0, r4
   12cf8:	lsl	r7, r7, r3
   12cfc:	mov	r1, r5
   12d00:	uxth	sl, r8
   12d04:	bl	12790 <__assert_fail@plt+0x17f8>
   12d08:	mov	r1, r5
   12d0c:	mov	r3, r0
   12d10:	mov	r0, r4
   12d14:	str	r3, [sp]
   12d18:	bl	1297c <__assert_fail@plt+0x19e4>
   12d1c:	ldr	r3, [sp]
   12d20:	lsr	r2, fp, #16
   12d24:	mul	r0, sl, r3
   12d28:	orr	r1, r2, r1, lsl #16
   12d2c:	cmp	r0, r1
   12d30:	bls	12d50 <__assert_fail@plt+0x1db8>
   12d34:	adds	r1, r1, r8
   12d38:	sub	r2, r3, #1
   12d3c:	bcs	12ef0 <__assert_fail@plt+0x1f58>
   12d40:	cmp	r0, r1
   12d44:	subhi	r3, r3, #2
   12d48:	addhi	r1, r1, r8
   12d4c:	bls	12ef0 <__assert_fail@plt+0x1f58>
   12d50:	rsb	r9, r0, r1
   12d54:	mov	r1, r5
   12d58:	str	r3, [sp]
   12d5c:	uxth	fp, fp
   12d60:	mov	r0, r9
   12d64:	bl	12790 <__assert_fail@plt+0x17f8>
   12d68:	mov	r1, r5
   12d6c:	mov	r4, r0
   12d70:	mov	r0, r9
   12d74:	bl	1297c <__assert_fail@plt+0x19e4>
   12d78:	mul	r9, sl, r4
   12d7c:	ldr	r3, [sp]
   12d80:	orr	r1, fp, r1, lsl #16
   12d84:	cmp	r9, r1
   12d88:	bls	12dac <__assert_fail@plt+0x1e14>
   12d8c:	adds	r1, r1, r8
   12d90:	sub	r2, r4, #1
   12d94:	bcs	12da8 <__assert_fail@plt+0x1e10>
   12d98:	cmp	r9, r1
   12d9c:	subhi	r4, r4, #2
   12da0:	addhi	r1, r1, r8
   12da4:	bhi	12dac <__assert_fail@plt+0x1e14>
   12da8:	mov	r4, r2
   12dac:	rsb	r9, r9, r1
   12db0:	orr	r4, r4, r3, lsl #16
   12db4:	b	12c20 <__assert_fail@plt+0x1c88>
   12db8:	rsb	sl, r5, #32
   12dbc:	lsl	r3, r2, r5
   12dc0:	lsr	r0, r2, sl
   12dc4:	lsr	r2, ip, sl
   12dc8:	orr	r4, r0, r1, lsl r5
   12dcc:	lsr	sl, r7, sl
   12dd0:	mov	r0, r2
   12dd4:	orr	sl, sl, ip, lsl r5
   12dd8:	lsr	r9, r4, #16
   12ddc:	str	r3, [sp, #4]
   12de0:	str	r2, [sp]
   12de4:	uxth	fp, r4
   12de8:	mov	r1, r9
   12dec:	bl	12790 <__assert_fail@plt+0x17f8>
   12df0:	ldr	r2, [sp]
   12df4:	mov	r1, r9
   12df8:	mov	r8, r0
   12dfc:	mov	r0, r2
   12e00:	bl	1297c <__assert_fail@plt+0x19e4>
   12e04:	mul	r0, fp, r8
   12e08:	lsr	r2, sl, #16
   12e0c:	orr	r1, r2, r1, lsl #16
   12e10:	cmp	r0, r1
   12e14:	bls	12e34 <__assert_fail@plt+0x1e9c>
   12e18:	adds	r1, r1, r4
   12e1c:	sub	r2, r8, #1
   12e20:	bcs	12ee8 <__assert_fail@plt+0x1f50>
   12e24:	cmp	r0, r1
   12e28:	subhi	r8, r8, #2
   12e2c:	addhi	r1, r1, r4
   12e30:	bls	12ee8 <__assert_fail@plt+0x1f50>
   12e34:	rsb	ip, r0, r1
   12e38:	mov	r1, r9
   12e3c:	str	ip, [sp]
   12e40:	mov	r0, ip
   12e44:	bl	12790 <__assert_fail@plt+0x17f8>
   12e48:	ldr	ip, [sp]
   12e4c:	mov	r1, r9
   12e50:	mov	r2, r0
   12e54:	mov	r0, ip
   12e58:	str	r2, [sp]
   12e5c:	bl	1297c <__assert_fail@plt+0x19e4>
   12e60:	ldr	r2, [sp]
   12e64:	uxth	ip, sl
   12e68:	mul	fp, fp, r2
   12e6c:	orr	ip, ip, r1, lsl #16
   12e70:	cmp	fp, ip
   12e74:	bls	12e94 <__assert_fail@plt+0x1efc>
   12e78:	adds	ip, ip, r4
   12e7c:	sub	r1, r2, #1
   12e80:	bcs	12ee0 <__assert_fail@plt+0x1f48>
   12e84:	cmp	fp, ip
   12e88:	subhi	r2, r2, #2
   12e8c:	addhi	ip, ip, r4
   12e90:	bls	12ee0 <__assert_fail@plt+0x1f48>
   12e94:	ldr	r0, [sp, #4]
   12e98:	orr	r1, r2, r8, lsl #16
   12e9c:	rsb	fp, fp, ip
   12ea0:	umull	r2, r3, r1, r0
   12ea4:	cmp	fp, r3
   12ea8:	bcc	12ecc <__assert_fail@plt+0x1f34>
   12eac:	movne	r4, #0
   12eb0:	moveq	r4, #1
   12eb4:	cmp	r2, r7, lsl r5
   12eb8:	movls	r4, #0
   12ebc:	andhi	r4, r4, #1
   12ec0:	cmp	r4, #0
   12ec4:	moveq	r3, r1
   12ec8:	beq	12b90 <__assert_fail@plt+0x1bf8>
   12ecc:	sub	r3, r1, #1
   12ed0:	mov	r4, #0
   12ed4:	b	12b90 <__assert_fail@plt+0x1bf8>
   12ed8:	mov	fp, r3
   12edc:	b	12c6c <__assert_fail@plt+0x1cd4>
   12ee0:	mov	r2, r1
   12ee4:	b	12e94 <__assert_fail@plt+0x1efc>
   12ee8:	mov	r8, r2
   12eec:	b	12e34 <__assert_fail@plt+0x1e9c>
   12ef0:	mov	r3, r2
   12ef4:	b	12d50 <__assert_fail@plt+0x1db8>
   12ef8:	cmp	r3, #0
   12efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f00:	mov	r6, r0
   12f04:	sub	sp, sp, #12
   12f08:	mov	r5, r1
   12f0c:	mov	r7, r0
   12f10:	mov	r4, r2
   12f14:	mov	r8, r1
   12f18:	bne	12ff8 <__assert_fail@plt+0x2060>
   12f1c:	cmp	r2, r1
   12f20:	bls	13034 <__assert_fail@plt+0x209c>
   12f24:	clz	r3, r2
   12f28:	cmp	r3, #0
   12f2c:	rsbne	r8, r3, #32
   12f30:	lslne	r4, r2, r3
   12f34:	lsrne	r8, r0, r8
   12f38:	lslne	r7, r0, r3
   12f3c:	orrne	r8, r8, r1, lsl r3
   12f40:	lsr	r5, r4, #16
   12f44:	uxth	sl, r4
   12f48:	mov	r1, r5
   12f4c:	mov	r0, r8
   12f50:	bl	12790 <__assert_fail@plt+0x17f8>
   12f54:	mov	r1, r5
   12f58:	mov	r9, r0
   12f5c:	mov	r0, r8
   12f60:	bl	1297c <__assert_fail@plt+0x19e4>
   12f64:	mul	r0, sl, r9
   12f68:	lsr	r3, r7, #16
   12f6c:	orr	r1, r3, r1, lsl #16
   12f70:	cmp	r0, r1
   12f74:	bls	12f98 <__assert_fail@plt+0x2000>
   12f78:	adds	r1, r1, r4
   12f7c:	sub	r2, r9, #1
   12f80:	bcs	12f94 <__assert_fail@plt+0x1ffc>
   12f84:	cmp	r0, r1
   12f88:	subhi	r9, r9, #2
   12f8c:	addhi	r1, r1, r4
   12f90:	bhi	12f98 <__assert_fail@plt+0x2000>
   12f94:	mov	r9, r2
   12f98:	rsb	r8, r0, r1
   12f9c:	mov	r1, r5
   12fa0:	uxth	r7, r7
   12fa4:	mov	r0, r8
   12fa8:	bl	12790 <__assert_fail@plt+0x17f8>
   12fac:	mov	r1, r5
   12fb0:	mov	r6, r0
   12fb4:	mov	r0, r8
   12fb8:	bl	1297c <__assert_fail@plt+0x19e4>
   12fbc:	mul	sl, sl, r6
   12fc0:	orr	r1, r7, r1, lsl #16
   12fc4:	cmp	sl, r1
   12fc8:	bls	12fe4 <__assert_fail@plt+0x204c>
   12fcc:	adds	r4, r1, r4
   12fd0:	sub	r3, r6, #1
   12fd4:	bcs	132e0 <__assert_fail@plt+0x2348>
   12fd8:	cmp	sl, r4
   12fdc:	subhi	r6, r6, #2
   12fe0:	bls	132e0 <__assert_fail@plt+0x2348>
   12fe4:	orr	r0, r6, r9, lsl #16
   12fe8:	mov	r6, #0
   12fec:	mov	r1, r6
   12ff0:	add	sp, sp, #12
   12ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ff8:	cmp	r3, r1
   12ffc:	movhi	r6, #0
   13000:	movhi	r0, r6
   13004:	bhi	12fec <__assert_fail@plt+0x2054>
   13008:	clz	r7, r3
   1300c:	cmp	r7, #0
   13010:	bne	13110 <__assert_fail@plt+0x2178>
   13014:	cmp	r3, r1
   13018:	cmpcs	r2, r6
   1301c:	movhi	r6, #0
   13020:	movls	r6, #1
   13024:	movls	r0, #1
   13028:	movls	r6, r7
   1302c:	movhi	r0, r6
   13030:	b	12fec <__assert_fail@plt+0x2054>
   13034:	cmp	r2, #0
   13038:	bne	1304c <__assert_fail@plt+0x20b4>
   1303c:	mov	r1, r2
   13040:	mov	r0, #1
   13044:	bl	12790 <__assert_fail@plt+0x17f8>
   13048:	mov	r4, r0
   1304c:	clz	r3, r4
   13050:	cmp	r3, #0
   13054:	bne	1320c <__assert_fail@plt+0x2274>
   13058:	rsb	r5, r4, r5
   1305c:	lsr	r8, r4, #16
   13060:	uxth	sl, r4
   13064:	mov	r6, #1
   13068:	mov	r1, r8
   1306c:	mov	r0, r5
   13070:	bl	12790 <__assert_fail@plt+0x17f8>
   13074:	mov	r1, r8
   13078:	mov	r9, r0
   1307c:	mov	r0, r5
   13080:	bl	1297c <__assert_fail@plt+0x19e4>
   13084:	mul	r0, sl, r9
   13088:	lsr	r3, r7, #16
   1308c:	orr	r1, r3, r1, lsl #16
   13090:	cmp	r0, r1
   13094:	bls	130b4 <__assert_fail@plt+0x211c>
   13098:	adds	r1, r1, r4
   1309c:	sub	r2, r9, #1
   130a0:	bcs	132e8 <__assert_fail@plt+0x2350>
   130a4:	cmp	r0, r1
   130a8:	subhi	r9, r9, #2
   130ac:	addhi	r1, r1, r4
   130b0:	bls	132e8 <__assert_fail@plt+0x2350>
   130b4:	rsb	fp, r0, r1
   130b8:	mov	r1, r8
   130bc:	uxth	r7, r7
   130c0:	mov	r0, fp
   130c4:	bl	12790 <__assert_fail@plt+0x17f8>
   130c8:	mov	r1, r8
   130cc:	mov	r5, r0
   130d0:	mov	r0, fp
   130d4:	bl	1297c <__assert_fail@plt+0x19e4>
   130d8:	mul	sl, sl, r5
   130dc:	orr	r1, r7, r1, lsl #16
   130e0:	cmp	sl, r1
   130e4:	bls	13100 <__assert_fail@plt+0x2168>
   130e8:	adds	r4, r1, r4
   130ec:	sub	r3, r5, #1
   130f0:	bcs	132f0 <__assert_fail@plt+0x2358>
   130f4:	cmp	sl, r4
   130f8:	subhi	r5, r5, #2
   130fc:	bls	132f0 <__assert_fail@plt+0x2358>
   13100:	orr	r0, r5, r9, lsl #16
   13104:	mov	r1, r6
   13108:	add	sp, sp, #12
   1310c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13110:	rsb	r1, r7, #32
   13114:	lsl	r0, r2, r7
   13118:	lsr	r2, r2, r1
   1311c:	lsr	fp, r5, r1
   13120:	orr	r8, r2, r3, lsl r7
   13124:	lsr	r1, r6, r1
   13128:	str	r0, [sp, #4]
   1312c:	orr	r5, r1, r5, lsl r7
   13130:	lsr	r9, r8, #16
   13134:	mov	r0, fp
   13138:	uxth	sl, r8
   1313c:	mov	r1, r9
   13140:	bl	12790 <__assert_fail@plt+0x17f8>
   13144:	mov	r1, r9
   13148:	mov	r4, r0
   1314c:	mov	r0, fp
   13150:	bl	1297c <__assert_fail@plt+0x19e4>
   13154:	mul	r0, sl, r4
   13158:	lsr	ip, r5, #16
   1315c:	orr	r1, ip, r1, lsl #16
   13160:	cmp	r0, r1
   13164:	bls	13178 <__assert_fail@plt+0x21e0>
   13168:	adds	r1, r1, r8
   1316c:	sub	r2, r4, #1
   13170:	bcc	1330c <__assert_fail@plt+0x2374>
   13174:	mov	r4, r2
   13178:	rsb	ip, r0, r1
   1317c:	mov	r1, r9
   13180:	str	ip, [sp]
   13184:	uxth	r5, r5
   13188:	mov	r0, ip
   1318c:	bl	12790 <__assert_fail@plt+0x17f8>
   13190:	ldr	ip, [sp]
   13194:	mov	r1, r9
   13198:	mov	fp, r0
   1319c:	mov	r0, ip
   131a0:	bl	1297c <__assert_fail@plt+0x19e4>
   131a4:	mul	sl, sl, fp
   131a8:	orr	r1, r5, r1, lsl #16
   131ac:	cmp	sl, r1
   131b0:	bls	131c4 <__assert_fail@plt+0x222c>
   131b4:	adds	r1, r1, r8
   131b8:	sub	r2, fp, #1
   131bc:	bcc	132f8 <__assert_fail@plt+0x2360>
   131c0:	mov	fp, r2
   131c4:	ldr	r3, [sp, #4]
   131c8:	orr	r0, fp, r4, lsl #16
   131cc:	rsb	sl, sl, r1
   131d0:	umull	r4, r5, r0, r3
   131d4:	cmp	sl, r5
   131d8:	bcc	131f8 <__assert_fail@plt+0x2260>
   131dc:	movne	r3, #0
   131e0:	moveq	r3, #1
   131e4:	cmp	r4, r6, lsl r7
   131e8:	movls	r6, #0
   131ec:	andhi	r6, r3, #1
   131f0:	cmp	r6, #0
   131f4:	beq	12fec <__assert_fail@plt+0x2054>
   131f8:	mov	r6, #0
   131fc:	sub	r0, r0, #1
   13200:	mov	r1, r6
   13204:	add	sp, sp, #12
   13208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1320c:	lsl	r4, r4, r3
   13210:	rsb	r9, r3, #32
   13214:	lsr	r2, r5, r9
   13218:	lsr	r9, r6, r9
   1321c:	lsr	r8, r4, #16
   13220:	orr	r9, r9, r5, lsl r3
   13224:	mov	r0, r2
   13228:	lsl	r7, r6, r3
   1322c:	mov	r1, r8
   13230:	str	r2, [sp]
   13234:	bl	12790 <__assert_fail@plt+0x17f8>
   13238:	ldr	r2, [sp]
   1323c:	mov	r1, r8
   13240:	uxth	sl, r4
   13244:	mov	fp, r0
   13248:	mov	r0, r2
   1324c:	bl	1297c <__assert_fail@plt+0x19e4>
   13250:	mul	r0, sl, fp
   13254:	lsr	r3, r9, #16
   13258:	orr	r1, r3, r1, lsl #16
   1325c:	cmp	r0, r1
   13260:	bls	13280 <__assert_fail@plt+0x22e8>
   13264:	adds	r1, r1, r4
   13268:	sub	r3, fp, #1
   1326c:	bcs	13320 <__assert_fail@plt+0x2388>
   13270:	cmp	r0, r1
   13274:	subhi	fp, fp, #2
   13278:	addhi	r1, r1, r4
   1327c:	bls	13320 <__assert_fail@plt+0x2388>
   13280:	rsb	r5, r0, r1
   13284:	mov	r1, r8
   13288:	uxth	r9, r9
   1328c:	mov	r0, r5
   13290:	bl	12790 <__assert_fail@plt+0x17f8>
   13294:	mov	r1, r8
   13298:	mov	r6, r0
   1329c:	mov	r0, r5
   132a0:	bl	1297c <__assert_fail@plt+0x19e4>
   132a4:	mul	r5, sl, r6
   132a8:	orr	r1, r9, r1, lsl #16
   132ac:	cmp	r5, r1
   132b0:	bls	132d4 <__assert_fail@plt+0x233c>
   132b4:	adds	r1, r1, r4
   132b8:	sub	r3, r6, #1
   132bc:	bcs	132d0 <__assert_fail@plt+0x2338>
   132c0:	cmp	r5, r1
   132c4:	subhi	r6, r6, #2
   132c8:	addhi	r1, r1, r4
   132cc:	bhi	132d4 <__assert_fail@plt+0x233c>
   132d0:	mov	r6, r3
   132d4:	rsb	r5, r5, r1
   132d8:	orr	r6, r6, fp, lsl #16
   132dc:	b	13068 <__assert_fail@plt+0x20d0>
   132e0:	mov	r6, r3
   132e4:	b	12fe4 <__assert_fail@plt+0x204c>
   132e8:	mov	r9, r2
   132ec:	b	130b4 <__assert_fail@plt+0x211c>
   132f0:	mov	r5, r3
   132f4:	b	13100 <__assert_fail@plt+0x2168>
   132f8:	cmp	sl, r1
   132fc:	subhi	fp, fp, #2
   13300:	addhi	r1, r1, r8
   13304:	bhi	131c4 <__assert_fail@plt+0x222c>
   13308:	b	131c0 <__assert_fail@plt+0x2228>
   1330c:	cmp	r0, r1
   13310:	subhi	r4, r4, #2
   13314:	addhi	r1, r1, r8
   13318:	bhi	13178 <__assert_fail@plt+0x21e0>
   1331c:	b	13174 <__assert_fail@plt+0x21dc>
   13320:	mov	fp, r3
   13324:	b	13280 <__assert_fail@plt+0x22e8>
   13328:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1332c:	mov	r7, r0
   13330:	ldr	r6, [pc, #76]	; 13384 <__assert_fail@plt+0x23ec>
   13334:	mov	r8, r1
   13338:	ldr	r5, [pc, #72]	; 13388 <__assert_fail@plt+0x23f0>
   1333c:	mov	r9, r2
   13340:	add	r6, pc, r6
   13344:	bl	10d2c <calloc@plt-0x20>
   13348:	add	r5, pc, r5
   1334c:	rsb	r6, r5, r6
   13350:	asrs	r6, r6, #2
   13354:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   13358:	sub	r5, r5, #4
   1335c:	mov	r4, #0
   13360:	add	r4, r4, #1
   13364:	ldr	r3, [r5, #4]!
   13368:	mov	r0, r7
   1336c:	mov	r1, r8
   13370:	mov	r2, r9
   13374:	blx	r3
   13378:	cmp	r4, r6
   1337c:	bne	13360 <__assert_fail@plt+0x23c8>
   13380:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13384:			; <UNDEFINED> instruction: 0x00010bb0
   13388:	andeq	r0, r1, r4, lsr #23
   1338c:	bx	lr

Disassembly of section .fini:

00013390 <.fini>:
   13390:	push	{r3, lr}
   13394:	pop	{r3, pc}
