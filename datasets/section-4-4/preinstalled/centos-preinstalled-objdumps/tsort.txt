
centos-preinstalled/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010f18 <.init>:
   10f18:	push	{r3, lr}
   10f1c:	bl	11a14 <__assert_fail@plt+0x848>
   10f20:	pop	{r3, pc}

Disassembly of section .plt:

00010f24 <fdopen@plt-0x14>:
   10f24:	push	{lr}		; (str lr, [sp, #-4]!)
   10f28:	ldr	lr, [pc, #4]	; 10f34 <fdopen@plt-0x4>
   10f2c:	add	lr, pc, lr
   10f30:	ldr	pc, [lr, #8]!
   10f34:	andeq	r6, r1, ip, asr #1

00010f38 <fdopen@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #204]!	; 0xcc

00010f44 <calloc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #196]!	; 0xc4

00010f50 <fputs_unlocked@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #188]!	; 0xbc

00010f5c <raise@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #180]!	; 0xb4

00010f68 <strcmp@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #172]!	; 0xac

00010f74 <posix_fadvise64@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #164]!	; 0xa4

00010f80 <fflush@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #156]!	; 0x9c

00010f8c <free@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #148]!	; 0x94

00010f98 <_exit@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #140]!	; 0x8c

00010fa4 <memcpy@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #132]!	; 0x84

00010fb0 <mbsinit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #124]!	; 0x7c

00010fbc <memcmp@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #116]!	; 0x74

00010fc8 <dcgettext@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #108]!	; 0x6c

00010fd4 <__stack_chk_fail@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #100]!	; 0x64

00010fe0 <dup2@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #92]!	; 0x5c

00010fec <realloc@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #84]!	; 0x54

00010ff8 <textdomain@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #76]!	; 0x4c

00011004 <iswprint@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #68]!	; 0x44

00011010 <fwrite@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #60]!	; 0x3c

0001101c <lseek64@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #52]!	; 0x34

00011028 <__ctype_get_mb_cur_max@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #44]!	; 0x2c

00011034 <strcpy@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #36]!	; 0x24

00011040 <__fpending@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #28]!

0001104c <mbrtowc@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #20]!

00011058 <error@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #12]!

00011064 <open64@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #4]!

00011070 <getenv@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #86016	; 0x15000
   11078:	ldr	pc, [ip, #4092]!	; 0xffc

0001107c <puts@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #86016	; 0x15000
   11084:	ldr	pc, [ip, #4084]!	; 0xff4

00011088 <malloc@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #86016	; 0x15000
   11090:	ldr	pc, [ip, #4076]!	; 0xfec

00011094 <__libc_start_main@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #86016	; 0x15000
   1109c:	ldr	pc, [ip, #4068]!	; 0xfe4

000110a0 <__freading@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #86016	; 0x15000
   110a8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ac <__gmon_start__@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #86016	; 0x15000
   110b4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110b8 <freopen64@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #86016	; 0x15000
   110c0:	ldr	pc, [ip, #4044]!	; 0xfcc

000110c4 <getopt_long@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #86016	; 0x15000
   110cc:	ldr	pc, [ip, #4036]!	; 0xfc4

000110d0 <__ctype_b_loc@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4028]!	; 0xfbc

000110dc <exit@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #4020]!	; 0xfb4

000110e8 <strlen@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #4012]!	; 0xfac

000110f4 <ungetc@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #4004]!	; 0xfa4

00011100 <__errno_location@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #3996]!	; 0xf9c

0001110c <__cxa_atexit@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #86016	; 0x15000
   11114:	ldr	pc, [ip, #3988]!	; 0xf94

00011118 <memset@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #86016	; 0x15000
   11120:	ldr	pc, [ip, #3980]!	; 0xf8c

00011124 <fscanf@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #86016	; 0x15000
   1112c:	ldr	pc, [ip, #3972]!	; 0xf84

00011130 <__printf_chk@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #86016	; 0x15000
   11138:	ldr	pc, [ip, #3964]!	; 0xf7c

0001113c <fileno@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #86016	; 0x15000
   11144:	ldr	pc, [ip, #3956]!	; 0xf74

00011148 <__fprintf_chk@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #86016	; 0x15000
   11150:	ldr	pc, [ip, #3948]!	; 0xf6c

00011154 <fclose@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #86016	; 0x15000
   1115c:	ldr	pc, [ip, #3940]!	; 0xf64

00011160 <fseeko64@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #86016	; 0x15000
   11168:	ldr	pc, [ip, #3932]!	; 0xf5c

0001116c <__uflow@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #86016	; 0x15000
   11174:	ldr	pc, [ip, #3924]!	; 0xf54

00011178 <setlocale@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #86016	; 0x15000
   11180:	ldr	pc, [ip, #3916]!	; 0xf4c

00011184 <strrchr@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #86016	; 0x15000
   1118c:	ldr	pc, [ip, #3908]!	; 0xf44

00011190 <nl_langinfo@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #86016	; 0x15000
   11198:	ldr	pc, [ip, #3900]!	; 0xf3c

0001119c <bindtextdomain@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #86016	; 0x15000
   111a4:	ldr	pc, [ip, #3892]!	; 0xf34

000111a8 <strncmp@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #86016	; 0x15000
   111b0:	ldr	pc, [ip, #3884]!	; 0xf2c

000111b4 <abort@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #86016	; 0x15000
   111bc:	ldr	pc, [ip, #3876]!	; 0xf24

000111c0 <close@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #86016	; 0x15000
   111c8:	ldr	pc, [ip, #3868]!	; 0xf1c

000111cc <__assert_fail@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #86016	; 0x15000
   111d4:	ldr	pc, [ip, #3860]!	; 0xf14

Disassembly of section .text:

000111d8 <usage@@Base-0x9bc>:
   111d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111dc:	sub	sp, sp, #68	; 0x44
   111e0:	ldr	r4, [pc, #1868]	; 11934 <__assert_fail@plt+0x768>
   111e4:	mov	r7, r0
   111e8:	ldr	r3, [pc, #1864]	; 11938 <__assert_fail@plt+0x76c>
   111ec:	mov	r5, r1
   111f0:	add	r4, pc, r4
   111f4:	ldr	r9, [pc, #1856]	; 1193c <__assert_fail@plt+0x770>
   111f8:	ldr	r0, [r1]
   111fc:	mov	r6, #0
   11200:	ldr	r3, [r4, r3]
   11204:	add	r9, pc, r9
   11208:	ldr	r8, [pc, #1840]	; 11940 <__assert_fail@plt+0x774>
   1120c:	ldr	r3, [r3]
   11210:	add	r8, pc, r8
   11214:	str	r3, [sp, #60]	; 0x3c
   11218:	bl	12450 <close_stdout@@Base+0x4b8>
   1121c:	mov	r1, r9
   11220:	mov	r0, #6
   11224:	bl	11178 <setlocale@plt>
   11228:	ldr	r1, [pc, #1812]	; 11944 <__assert_fail@plt+0x778>
   1122c:	mov	r0, r8
   11230:	add	r1, pc, r1
   11234:	bl	1119c <bindtextdomain@plt>
   11238:	mov	r0, r8
   1123c:	bl	10ff8 <textdomain@plt>
   11240:	ldr	r3, [pc, #1792]	; 11948 <__assert_fail@plt+0x77c>
   11244:	ldr	r0, [r4, r3]
   11248:	bl	15180 <close_stdout@@Base+0x31e8>
   1124c:	ldr	r2, [pc, #1784]	; 1194c <__assert_fail@plt+0x780>
   11250:	mov	r3, r8
   11254:	ldr	ip, [pc, #1780]	; 11950 <__assert_fail@plt+0x784>
   11258:	ldr	lr, [pc, #1780]	; 11954 <__assert_fail@plt+0x788>
   1125c:	mov	r0, r7
   11260:	ldr	r8, [r4, r2]
   11264:	mov	r1, r5
   11268:	ldr	r2, [pc, #1768]	; 11958 <__assert_fail@plt+0x78c>
   1126c:	add	lr, pc, lr
   11270:	ldr	r8, [r8]
   11274:	add	r2, pc, r2
   11278:	str	r8, [sp]
   1127c:	ldr	ip, [r4, ip]
   11280:	str	lr, [sp, #8]
   11284:	str	r6, [sp, #12]
   11288:	str	ip, [sp, #4]
   1128c:	bl	12344 <close_stdout@@Base+0x3ac>
   11290:	str	r6, [sp]
   11294:	mov	r2, r9
   11298:	mov	r0, r7
   1129c:	mov	r1, r5
   112a0:	mov	r3, r6
   112a4:	bl	110c4 <getopt_long@plt>
   112a8:	cmn	r0, #1
   112ac:	bne	11304 <__assert_fail@plt+0x138>
   112b0:	ldr	r3, [pc, #1700]	; 1195c <__assert_fail@plt+0x790>
   112b4:	ldr	r8, [r4, r3]
   112b8:	ldr	r3, [r8]
   112bc:	rsb	r2, r3, r7
   112c0:	cmp	r2, #1
   112c4:	ble	1130c <__assert_fail@plt+0x140>
   112c8:	ldr	r1, [pc, #1680]	; 11960 <__assert_fail@plt+0x794>
   112cc:	mov	r2, #5
   112d0:	mov	r0, r6
   112d4:	add	r1, pc, r1
   112d8:	bl	10fc8 <dcgettext@plt>
   112dc:	ldr	r3, [r8]
   112e0:	add	r3, r3, #1
   112e4:	mov	r4, r0
   112e8:	ldr	r0, [r5, r3, lsl #2]
   112ec:	bl	13ca0 <close_stdout@@Base+0x1d08>
   112f0:	mov	r1, r6
   112f4:	mov	r2, r4
   112f8:	mov	r3, r0
   112fc:	mov	r0, r6
   11300:	bl	11058 <error@plt>
   11304:	mov	r0, #1
   11308:	bl	11b94 <usage@@Base>
   1130c:	cmp	r7, r3
   11310:	beq	11898 <__assert_fail@plt+0x6cc>
   11314:	ldr	r5, [r5, r3, lsl #2]
   11318:	str	r5, [sp, #36]	; 0x24
   1131c:	ldr	r1, [sp, #36]	; 0x24
   11320:	ldrb	r3, [r1]
   11324:	cmp	r3, #45	; 0x2d
   11328:	beq	11438 <__assert_fail@plt+0x26c>
   1132c:	mov	r0, #0
   11330:	bl	11d50 <usage@@Base+0x1bc>
   11334:	mov	r9, r0
   11338:	ldr	r3, [pc, #1572]	; 11964 <__assert_fail@plt+0x798>
   1133c:	ldr	r1, [pc, #1572]	; 11968 <__assert_fail@plt+0x79c>
   11340:	ldr	r0, [sp, #36]	; 0x24
   11344:	ldr	r3, [r4, r3]
   11348:	add	r1, pc, r1
   1134c:	ldr	r2, [r3]
   11350:	str	r3, [sp, #24]
   11354:	bl	121e8 <close_stdout@@Base+0x250>
   11358:	subs	r4, r0, #0
   1135c:	movne	r3, #0
   11360:	strne	r3, [sp, #40]	; 0x28
   11364:	beq	118a8 <__assert_fail@plt+0x6dc>
   11368:	ldr	r1, [sp, #24]
   1136c:	add	r0, sp, #52	; 0x34
   11370:	str	r0, [sp, #28]
   11374:	mov	r2, #0
   11378:	str	r2, [sp, #16]
   1137c:	mov	r8, #1
   11380:	ldr	r0, [r1]
   11384:	mov	r1, #2
   11388:	bl	12158 <close_stdout@@Base+0x1c0>
   1138c:	add	r0, sp, #52	; 0x34
   11390:	bl	13cac <close_stdout@@Base+0x1d14>
   11394:	ldr	r3, [pc, #1488]	; 1196c <__assert_fail@plt+0x7a0>
   11398:	add	r3, pc, r3
   1139c:	str	r3, [sp, #32]
   113a0:	ldr	r1, [sp, #24]
   113a4:	mov	r2, #3
   113a8:	add	r3, sp, #52	; 0x34
   113ac:	ldr	r0, [r1]
   113b0:	ldr	r1, [sp, #32]
   113b4:	bl	13cbc <close_stdout@@Base+0x1d24>
   113b8:	cmn	r0, #1
   113bc:	beq	11658 <__assert_fail@plt+0x48c>
   113c0:	cmp	r0, #0
   113c4:	beq	11914 <__assert_fail@plt+0x748>
   113c8:	cmp	r9, #0
   113cc:	ldr	r5, [sp, #56]	; 0x38
   113d0:	beq	118f0 <__assert_fail@plt+0x724>
   113d4:	ldr	sl, [r9, #8]
   113d8:	cmp	sl, #0
   113dc:	beq	11644 <__assert_fail@plt+0x478>
   113e0:	mov	r6, r9
   113e4:	mov	r4, sl
   113e8:	b	11410 <__assert_fail@plt+0x244>
   113ec:	ldmib	sl, {r2, r3}
   113f0:	movlt	r3, r2
   113f4:	cmp	r3, #0
   113f8:	beq	11468 <__assert_fail@plt+0x29c>
   113fc:	ldr	r2, [r3, #12]
   11400:	cmp	r2, #0
   11404:	movne	r6, sl
   11408:	movne	r4, r3
   1140c:	mov	sl, r3
   11410:	mov	r0, r5
   11414:	ldr	r1, [sl]
   11418:	bl	10f68 <strcmp@plt>
   1141c:	cmp	r0, #0
   11420:	bne	113ec <__assert_fail@plt+0x220>
   11424:	ldr	r1, [sp, #16]
   11428:	cmp	r1, #0
   1142c:	bne	11598 <__assert_fail@plt+0x3cc>
   11430:	str	sl, [sp, #16]
   11434:	b	113a0 <__assert_fail@plt+0x1d4>
   11438:	mov	r0, #0
   1143c:	ldrb	r5, [r1, #1]
   11440:	bl	11d50 <usage@@Base+0x1bc>
   11444:	cmp	r5, #0
   11448:	mov	r9, r0
   1144c:	bne	11338 <__assert_fail@plt+0x16c>
   11450:	ldr	r3, [pc, #1292]	; 11964 <__assert_fail@plt+0x798>
   11454:	mov	r2, #1
   11458:	str	r2, [sp, #40]	; 0x28
   1145c:	ldr	r3, [r4, r3]
   11460:	str	r3, [sp, #24]
   11464:	b	11368 <__assert_fail@plt+0x19c>
   11468:	mov	fp, r0
   1146c:	mov	r0, r5
   11470:	bl	11d50 <usage@@Base+0x1bc>
   11474:	cmp	fp, #0
   11478:	mov	r7, r0
   1147c:	strlt	r0, [sl, #4]
   11480:	strge	r0, [sl, #8]
   11484:	mov	r0, r5
   11488:	ldr	r1, [r4]
   1148c:	bl	10f68 <strcmp@plt>
   11490:	cmp	r0, #0
   11494:	beq	118cc <__assert_fail@plt+0x700>
   11498:	ldmib	r4, {r3, sl}
   1149c:	mvnlt	r2, #0
   114a0:	movge	r3, #1
   114a4:	strlt	r2, [sp, #20]
   114a8:	movlt	sl, r3
   114ac:	strge	r3, [sp, #20]
   114b0:	cmp	r7, sl
   114b4:	movne	fp, sl
   114b8:	beq	114ec <__assert_fail@plt+0x320>
   114bc:	mov	r0, r5
   114c0:	ldr	r1, [fp]
   114c4:	bl	10f68 <strcmp@plt>
   114c8:	cmp	r0, #0
   114cc:	beq	11868 <__assert_fail@plt+0x69c>
   114d0:	mvnlt	r0, #0
   114d4:	strge	r8, [fp, #12]
   114d8:	strlt	r0, [fp, #12]
   114dc:	ldrge	fp, [fp, #8]
   114e0:	ldrlt	fp, [fp, #4]
   114e4:	cmp	r7, fp
   114e8:	bne	114bc <__assert_fail@plt+0x2f0>
   114ec:	ldr	r3, [r4, #12]
   114f0:	cmp	r3, #0
   114f4:	beq	115e0 <__assert_fail@plt+0x414>
   114f8:	ldr	r1, [sp, #20]
   114fc:	rsb	r2, r1, #0
   11500:	cmp	r3, r2
   11504:	beq	115e0 <__assert_fail@plt+0x414>
   11508:	ldr	r3, [sl, #12]
   1150c:	ldr	r0, [sp, #20]
   11510:	cmp	r3, r0
   11514:	beq	115f4 <__assert_fail@plt+0x428>
   11518:	ldr	r3, [sp, #20]
   1151c:	ldr	r1, [sl, #8]
   11520:	cmp	r3, #0
   11524:	ldr	r3, [sl, #4]
   11528:	blt	11624 <__assert_fail@plt+0x458>
   1152c:	ldr	r1, [r3, #8]
   11530:	str	r1, [sl, #4]
   11534:	ldr	r1, [r3, #4]
   11538:	str	sl, [r3, #8]
   1153c:	str	r1, [r4, #8]
   11540:	str	r4, [r3, #4]
   11544:	mov	r0, #0
   11548:	str	r0, [r4, #12]
   1154c:	str	r0, [sl, #12]
   11550:	ldr	r0, [sp, #20]
   11554:	ldr	r1, [r3, #12]
   11558:	cmp	r1, r0
   1155c:	streq	r2, [r4, #12]
   11560:	beq	11570 <__assert_fail@plt+0x3a4>
   11564:	cmp	r2, r1
   11568:	ldreq	r2, [sp, #20]
   1156c:	streq	r2, [sl, #12]
   11570:	mov	r0, #0
   11574:	str	r0, [r3, #12]
   11578:	ldr	r2, [r6, #8]
   1157c:	mov	sl, r7
   11580:	ldr	r1, [sp, #16]
   11584:	cmp	r4, r2
   11588:	streq	r3, [r6, #8]
   1158c:	strne	r3, [r6, #4]
   11590:	cmp	r1, #0
   11594:	beq	11430 <__assert_fail@plt+0x264>
   11598:	ldr	r0, [r1]
   1159c:	ldr	r1, [sl]
   115a0:	bl	10f68 <strcmp@plt>
   115a4:	cmp	r0, #0
   115a8:	moveq	sl, r0
   115ac:	beq	11430 <__assert_fail@plt+0x264>
   115b0:	ldr	r3, [sl, #16]
   115b4:	mov	r0, #8
   115b8:	add	r3, r3, #1
   115bc:	str	r3, [sl, #16]
   115c0:	bl	14648 <close_stdout@@Base+0x26b0>
   115c4:	ldr	r2, [sp, #16]
   115c8:	str	sl, [r0]
   115cc:	mov	sl, #0
   115d0:	ldr	r3, [r2, #24]
   115d4:	str	r3, [r0, #4]
   115d8:	str	r0, [r2, #24]
   115dc:	b	11430 <__assert_fail@plt+0x264>
   115e0:	ldr	r2, [sp, #20]
   115e4:	mov	sl, r7
   115e8:	add	r3, r3, r2
   115ec:	str	r3, [r4, #12]
   115f0:	b	11424 <__assert_fail@plt+0x258>
   115f4:	cmn	r0, #1
   115f8:	mov	r1, #0
   115fc:	ldreq	r3, [sl, #8]
   11600:	ldrne	r3, [sl, #4]
   11604:	streq	r3, [r4, #4]
   11608:	strne	r3, [r4, #8]
   1160c:	mov	r3, sl
   11610:	streq	r4, [sl, #8]
   11614:	strne	r4, [sl, #4]
   11618:	str	r1, [sl, #12]
   1161c:	str	r1, [r4, #12]
   11620:	b	11578 <__assert_fail@plt+0x3ac>
   11624:	ldr	r0, [r1, #4]
   11628:	mov	r3, r1
   1162c:	str	r0, [sl, #8]
   11630:	ldr	r0, [r1, #8]
   11634:	str	sl, [r1, #4]
   11638:	str	r0, [r4, #4]
   1163c:	str	r4, [r1, #8]
   11640:	b	11544 <__assert_fail@plt+0x378>
   11644:	mov	r0, r5
   11648:	bl	11d50 <usage@@Base+0x1bc>
   1164c:	mov	sl, r0
   11650:	str	r0, [r9, #8]
   11654:	b	11424 <__assert_fail@plt+0x258>
   11658:	ldr	r3, [sp, #16]
   1165c:	cmp	r3, #0
   11660:	beq	1168c <__assert_fail@plt+0x4c0>
   11664:	ldr	r1, [pc, #772]	; 11970 <__assert_fail@plt+0x7a4>
   11668:	mov	r2, #5
   1166c:	mov	r0, #0
   11670:	add	r1, pc, r1
   11674:	bl	10fc8 <dcgettext@plt>
   11678:	mov	r1, #0
   1167c:	ldr	r3, [sp, #36]	; 0x24
   11680:	mov	r2, r0
   11684:	mov	r0, #1
   11688:	bl	11058 <error@plt>
   1168c:	ldr	r0, [r9, #8]
   11690:	cmp	r0, #0
   11694:	beq	116a4 <__assert_fail@plt+0x4d8>
   11698:	ldr	r1, [pc, #724]	; 11974 <__assert_fail@plt+0x7a8>
   1169c:	add	r1, pc, r1
   116a0:	bl	11b2c <__assert_fail@plt+0x960>
   116a4:	ldr	r0, [pc, #716]	; 11978 <__assert_fail@plt+0x7ac>
   116a8:	mov	r1, #1
   116ac:	ldr	fp, [pc, #712]	; 1197c <__assert_fail@plt+0x7b0>
   116b0:	ldr	r8, [pc, #712]	; 11980 <__assert_fail@plt+0x7b4>
   116b4:	add	r0, pc, r0
   116b8:	ldr	r2, [pc, #708]	; 11984 <__assert_fail@plt+0x7b8>
   116bc:	add	fp, pc, fp
   116c0:	str	r0, [sp, #20]
   116c4:	add	r8, pc, r8
   116c8:	ldr	r3, [pc, #696]	; 11988 <__assert_fail@plt+0x7bc>
   116cc:	add	r2, pc, r2
   116d0:	ldr	r0, [pc, #692]	; 1198c <__assert_fail@plt+0x7c0>
   116d4:	add	r3, pc, r3
   116d8:	str	r1, [sp, #16]
   116dc:	add	r0, pc, r0
   116e0:	str	r2, [sp, #28]
   116e4:	str	r3, [sp, #32]
   116e8:	str	r0, [sp, #44]	; 0x2c
   116ec:	ldr	r1, [sp, #20]
   116f0:	ldr	r3, [r1]
   116f4:	cmp	r3, #0
   116f8:	beq	117b0 <__assert_fail@plt+0x5e4>
   116fc:	ldr	r0, [r9, #8]
   11700:	cmp	r0, #0
   11704:	beq	11710 <__assert_fail@plt+0x544>
   11708:	mov	r1, fp
   1170c:	bl	11b2c <__assert_fail@plt+0x960>
   11710:	ldr	r3, [r8, #4]
   11714:	cmp	r3, #0
   11718:	ldreq	ip, [r8]
   1171c:	beq	117a8 <__assert_fail@plt+0x5dc>
   11720:	ldr	sl, [pc, #616]	; 11990 <__assert_fail@plt+0x7c4>
   11724:	mov	r6, #0
   11728:	ldr	r7, [pc, #612]	; 11994 <__assert_fail@plt+0x7c8>
   1172c:	add	sl, pc, sl
   11730:	add	r7, pc, r7
   11734:	mov	r5, sl
   11738:	ldr	r4, [r3, #24]
   1173c:	ldr	r0, [r3]
   11740:	bl	1107c <puts@plt>
   11744:	ldr	r0, [sl, #4]
   11748:	ldr	ip, [sl]
   1174c:	cmp	r4, #0
   11750:	sub	ip, ip, #1
   11754:	str	r6, [r0]
   11758:	str	ip, [sl]
   1175c:	ldrne	r1, [sl, #8]
   11760:	beq	11798 <__assert_fail@plt+0x5cc>
   11764:	ldr	r3, [r4]
   11768:	ldr	r2, [r3, #16]
   1176c:	sub	r2, r2, #1
   11770:	str	r2, [r3, #16]
   11774:	ldr	r3, [r4]
   11778:	ldr	r2, [r3, #16]
   1177c:	cmp	r2, #0
   11780:	streq	r3, [r1, #20]
   11784:	ldreq	r1, [r4]
   11788:	ldr	r4, [r4, #4]
   1178c:	cmp	r4, #0
   11790:	bne	11764 <__assert_fail@plt+0x598>
   11794:	str	r1, [r7, #8]
   11798:	ldr	r3, [r0, #20]
   1179c:	cmp	r3, #0
   117a0:	str	r3, [r5, #4]
   117a4:	bne	11738 <__assert_fail@plt+0x56c>
   117a8:	cmp	ip, #0
   117ac:	bne	11814 <__assert_fail@plt+0x648>
   117b0:	ldr	r2, [sp, #24]
   117b4:	ldr	r0, [r2]
   117b8:	bl	148b4 <close_stdout@@Base+0x291c>
   117bc:	cmp	r0, #0
   117c0:	beq	11804 <__assert_fail@plt+0x638>
   117c4:	bl	11100 <__errno_location@plt>
   117c8:	ldr	r3, [sp, #40]	; 0x28
   117cc:	cmp	r3, #0
   117d0:	ldr	r4, [r0]
   117d4:	beq	1188c <__assert_fail@plt+0x6c0>
   117d8:	ldr	r1, [pc, #440]	; 11998 <__assert_fail@plt+0x7cc>
   117dc:	mov	r0, #0
   117e0:	mov	r2, #5
   117e4:	add	r1, pc, r1
   117e8:	bl	10fc8 <dcgettext@plt>
   117ec:	ldr	r2, [pc, #424]	; 1199c <__assert_fail@plt+0x7d0>
   117f0:	mov	r3, r0
   117f4:	mov	r1, r4
   117f8:	mov	r0, #1
   117fc:	add	r2, pc, r2
   11800:	bl	11058 <error@plt>
   11804:	ldr	r1, [sp, #16]
   11808:	rsbs	r0, r1, #1
   1180c:	movcc	r0, #0
   11810:	bl	110dc <exit@plt>
   11814:	ldr	r1, [sp, #28]
   11818:	mov	r2, #5
   1181c:	mov	r0, #0
   11820:	bl	10fc8 <dcgettext@plt>
   11824:	ldr	r3, [sp, #36]	; 0x24
   11828:	mov	r2, r0
   1182c:	mov	r0, #0
   11830:	mov	r1, r0
   11834:	bl	11058 <error@plt>
   11838:	ldr	r5, [sp, #32]
   1183c:	ldr	r4, [sp, #44]	; 0x2c
   11840:	ldr	r0, [r9, #8]
   11844:	cmp	r0, #0
   11848:	beq	11854 <__assert_fail@plt+0x688>
   1184c:	mov	r1, r5
   11850:	bl	11b2c <__assert_fail@plt+0x960>
   11854:	ldr	r3, [r4, #12]
   11858:	cmp	r3, #0
   1185c:	bne	11840 <__assert_fail@plt+0x674>
   11860:	str	r3, [sp, #16]
   11864:	b	116ec <__assert_fail@plt+0x520>
   11868:	ldr	r3, [pc, #304]	; 119a0 <__assert_fail@plt+0x7d4>
   1186c:	mov	r2, #178	; 0xb2
   11870:	ldr	r0, [pc, #300]	; 119a4 <__assert_fail@plt+0x7d8>
   11874:	ldr	r1, [pc, #300]	; 119a8 <__assert_fail@plt+0x7dc>
   11878:	add	r3, pc, r3
   1187c:	add	r0, pc, r0
   11880:	add	r3, r3, #8
   11884:	add	r1, pc, r1
   11888:	bl	111cc <__assert_fail@plt>
   1188c:	ldr	r0, [sp, #36]	; 0x24
   11890:	bl	13ca0 <close_stdout@@Base+0x1d08>
   11894:	b	117ec <__assert_fail@plt+0x620>
   11898:	ldr	r0, [pc, #268]	; 119ac <__assert_fail@plt+0x7e0>
   1189c:	add	r0, pc, r0
   118a0:	str	r0, [sp, #36]	; 0x24
   118a4:	b	1131c <__assert_fail@plt+0x150>
   118a8:	bl	11100 <__errno_location@plt>
   118ac:	ldr	r2, [pc, #252]	; 119b0 <__assert_fail@plt+0x7e4>
   118b0:	ldr	r3, [sp, #36]	; 0x24
   118b4:	add	r2, pc, r2
   118b8:	str	r4, [sp, #40]	; 0x28
   118bc:	ldr	r1, [r0]
   118c0:	mov	r0, #1
   118c4:	bl	11058 <error@plt>
   118c8:	b	11368 <__assert_fail@plt+0x19c>
   118cc:	ldr	r3, [pc, #224]	; 119b4 <__assert_fail@plt+0x7e8>
   118d0:	mov	r2, #164	; 0xa4
   118d4:	ldr	r0, [pc, #220]	; 119b8 <__assert_fail@plt+0x7ec>
   118d8:	ldr	r1, [pc, #220]	; 119bc <__assert_fail@plt+0x7f0>
   118dc:	add	r3, pc, r3
   118e0:	add	r0, pc, r0
   118e4:	add	r3, r3, #8
   118e8:	add	r1, pc, r1
   118ec:	bl	111cc <__assert_fail@plt>
   118f0:	ldr	r3, [pc, #200]	; 119c0 <__assert_fail@plt+0x7f4>
   118f4:	mov	r2, #128	; 0x80
   118f8:	ldr	r0, [pc, #196]	; 119c4 <__assert_fail@plt+0x7f8>
   118fc:	ldr	r1, [pc, #196]	; 119c8 <__assert_fail@plt+0x7fc>
   11900:	add	r3, pc, r3
   11904:	add	r0, pc, r0
   11908:	add	r3, r3, #8
   1190c:	add	r1, pc, r1
   11910:	bl	111cc <__assert_fail@plt>
   11914:	ldr	r0, [pc, #176]	; 119cc <__assert_fail@plt+0x800>
   11918:	movw	r2, #458	; 0x1ca
   1191c:	ldr	r1, [pc, #172]	; 119d0 <__assert_fail@plt+0x804>
   11920:	ldr	r3, [pc, #172]	; 119d4 <__assert_fail@plt+0x808>
   11924:	add	r0, pc, r0
   11928:	add	r1, pc, r1
   1192c:	add	r3, pc, r3
   11930:	bl	111cc <__assert_fail@plt>
   11934:	andeq	r5, r1, r8, lsl #28
   11938:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1193c:	andeq	r4, r0, ip, asr #3
   11940:	andeq	r4, r0, r0, lsl #2
   11944:			; <UNDEFINED> instruction: 0x000041b0
   11948:	andeq	r0, r0, r0, lsl #2
   1194c:	strdeq	r0, [r0], -r8
   11950:	andeq	r0, r0, r4, lsl r1
   11954:	muleq	r0, r0, r1
   11958:	andeq	r4, r0, r0, lsl #3
   1195c:	strdeq	r0, [r0], -r4
   11960:	andeq	r4, r0, r8, lsr r1
   11964:	andeq	r0, r0, ip, lsl #2
   11968:	ldrdeq	r4, [r0], -r8
   1196c:	andeq	r4, r0, ip, lsl #1
   11970:	andeq	r4, r0, r0, lsr lr
   11974:	andeq	r0, r0, r8, ror #8
   11978:	andeq	r5, r1, r4, asr #21
   1197c:	ldrdeq	r0, [r0], -r4
   11980:			; <UNDEFINED> instruction: 0x00015ab4
   11984:	andeq	r4, r0, r0, lsl #28
   11988:	andeq	r0, r0, ip, lsl #14
   1198c:	muleq	r1, ip, sl
   11990:	andeq	r5, r1, ip, asr #20
   11994:	andeq	r5, r1, r8, asr #20
   11998:	andeq	r4, r0, r4, lsl #26
   1199c:	andeq	r4, r0, r4, lsl sp
   119a0:	andeq	r3, r0, ip, lsr r9
   119a4:	strdeq	r4, [r0], -r8
   119a8:			; <UNDEFINED> instruction: 0x00003bb0
   119ac:	andeq	r3, r0, r0, asr #22
   119b0:	andeq	r4, r0, ip, asr ip
   119b4:	ldrdeq	r3, [r0], -r8
   119b8:	andeq	r3, r0, r8, ror #22
   119bc:	andeq	r3, r0, ip, asr #22
   119c0:			; <UNDEFINED> instruction: 0x000038b4
   119c4:	andeq	r3, r0, ip, lsr fp
   119c8:	andeq	r3, r0, r8, lsr #22
   119cc:	andeq	r3, r0, r4, lsl #22
   119d0:	andeq	r3, r0, ip, lsl #22
   119d4:	andeq	r3, r0, r8, lsl #17
   119d8:	mov	fp, #0
   119dc:	mov	lr, #0
   119e0:	pop	{r1}		; (ldr r1, [sp], #4)
   119e4:	mov	r2, sp
   119e8:	push	{r2}		; (str r2, [sp, #-4]!)
   119ec:	push	{r0}		; (str r0, [sp, #-4]!)
   119f0:	ldr	ip, [pc, #16]	; 11a08 <__assert_fail@plt+0x83c>
   119f4:	push	{ip}		; (str ip, [sp, #-4]!)
   119f8:	ldr	r0, [pc, #12]	; 11a0c <__assert_fail@plt+0x840>
   119fc:	ldr	r3, [pc, #12]	; 11a10 <__assert_fail@plt+0x844>
   11a00:	bl	11094 <__libc_start_main@plt>
   11a04:	bl	111b4 <abort@plt>
   11a08:	andeq	r5, r1, ip, ror r1
   11a0c:	ldrdeq	r1, [r1], -r8
   11a10:	andeq	r5, r1, r8, lsl r1
   11a14:	ldr	r3, [pc, #20]	; 11a30 <__assert_fail@plt+0x864>
   11a18:	ldr	r2, [pc, #20]	; 11a34 <__assert_fail@plt+0x868>
   11a1c:	add	r3, pc, r3
   11a20:	ldr	r2, [r3, r2]
   11a24:	cmp	r2, #0
   11a28:	bxeq	lr
   11a2c:	b	110ac <__gmon_start__@plt>
   11a30:	ldrdeq	r5, [r1], -ip
   11a34:	andeq	r0, r0, r4, lsl #2
   11a38:	push	{r3, lr}
   11a3c:	movw	r0, #29052	; 0x717c
   11a40:	ldr	r3, [pc, #36]	; 11a6c <__assert_fail@plt+0x8a0>
   11a44:	movt	r0, #2
   11a48:	rsb	r3, r0, r3
   11a4c:	cmp	r3, #6
   11a50:	popls	{r3, pc}
   11a54:	movw	r3, #0
   11a58:	movt	r3, #0
   11a5c:	cmp	r3, #0
   11a60:	popeq	{r3, pc}
   11a64:	blx	r3
   11a68:	pop	{r3, pc}
   11a6c:	andeq	r7, r2, pc, ror r1
   11a70:	push	{r3, lr}
   11a74:	movw	r0, #29052	; 0x717c
   11a78:	movw	r3, #29052	; 0x717c
   11a7c:	movt	r0, #2
   11a80:	movt	r3, #2
   11a84:	rsb	r3, r0, r3
   11a88:	asr	r3, r3, #2
   11a8c:	add	r3, r3, r3, lsr #31
   11a90:	asrs	r1, r3, #1
   11a94:	popeq	{r3, pc}
   11a98:	movw	r2, #0
   11a9c:	movt	r2, #0
   11aa0:	cmp	r2, #0
   11aa4:	popeq	{r3, pc}
   11aa8:	blx	r2
   11aac:	pop	{r3, pc}
   11ab0:	push	{r4, lr}
   11ab4:	movw	r4, #29052	; 0x717c
   11ab8:	movt	r4, #2
   11abc:	ldrb	r3, [r4]
   11ac0:	cmp	r3, #0
   11ac4:	popne	{r4, pc}
   11ac8:	bl	11a38 <__assert_fail@plt+0x86c>
   11acc:	mov	r3, #1
   11ad0:	strb	r3, [r4]
   11ad4:	pop	{r4, pc}
   11ad8:	movw	r0, #28336	; 0x6eb0
   11adc:	movt	r0, #2
   11ae0:	push	{r3, lr}
   11ae4:	ldr	r3, [r0]
   11ae8:	cmp	r3, #0
   11aec:	beq	11b04 <__assert_fail@plt+0x938>
   11af0:	movw	r3, #0
   11af4:	movt	r3, #0
   11af8:	cmp	r3, #0
   11afc:	beq	11b04 <__assert_fail@plt+0x938>
   11b00:	blx	r3
   11b04:	pop	{r3, lr}
   11b08:	b	11a70 <__assert_fail@plt+0x8a4>
   11b0c:	ldr	r3, [pc, #20]	; 11b28 <__assert_fail@plt+0x95c>
   11b10:	mov	r0, #0
   11b14:	add	r3, pc, r3
   11b18:	ldr	r2, [r3]
   11b1c:	add	r2, r2, #1
   11b20:	str	r2, [r3]
   11b24:	bx	lr
   11b28:	andeq	r5, r1, r4, ror #12
   11b2c:	push	{r3, r4, r5, lr}
   11b30:	mov	r4, r0
   11b34:	mov	r5, r1
   11b38:	ldr	r0, [r4, #4]
   11b3c:	mov	r1, r5
   11b40:	cmp	r0, #0
   11b44:	beq	11b7c <__assert_fail@plt+0x9b0>
   11b48:	bl	11b2c <__assert_fail@plt+0x960>
   11b4c:	cmp	r0, #0
   11b50:	bne	11b74 <__assert_fail@plt+0x9a8>
   11b54:	mov	r0, r4
   11b58:	blx	r5
   11b5c:	cmp	r0, #0
   11b60:	bne	11b74 <__assert_fail@plt+0x9a8>
   11b64:	ldr	r4, [r4, #8]
   11b68:	cmp	r4, #0
   11b6c:	bne	11b38 <__assert_fail@plt+0x96c>
   11b70:	pop	{r3, r4, r5, pc}
   11b74:	mov	r0, #1
   11b78:	pop	{r3, r4, r5, pc}
   11b7c:	ldr	r3, [r4, #8]
   11b80:	cmp	r3, #0
   11b84:	bne	11b54 <__assert_fail@plt+0x988>
   11b88:	mov	r0, r4
   11b8c:	blx	r5
   11b90:	pop	{r3, r4, r5, pc}

00011b94 <usage@@Base>:
   11b94:	push	{r4, r5, r6, lr}
   11b98:	subs	r4, r0, #0
   11b9c:	ldr	r5, [pc, #372]	; 11d18 <usage@@Base+0x184>
   11ba0:	add	r5, pc, r5
   11ba4:	beq	11bec <usage@@Base+0x58>
   11ba8:	ldr	r3, [pc, #364]	; 11d1c <usage@@Base+0x188>
   11bac:	mov	r2, #5
   11bb0:	ldr	r1, [pc, #360]	; 11d20 <usage@@Base+0x18c>
   11bb4:	mov	r0, #0
   11bb8:	ldr	r3, [r5, r3]
   11bbc:	add	r1, pc, r1
   11bc0:	ldr	r6, [r3]
   11bc4:	bl	10fc8 <dcgettext@plt>
   11bc8:	ldr	r3, [pc, #340]	; 11d24 <usage@@Base+0x190>
   11bcc:	mov	r1, #1
   11bd0:	ldr	r3, [r5, r3]
   11bd4:	ldr	r3, [r3]
   11bd8:	mov	r2, r0
   11bdc:	mov	r0, r6
   11be0:	bl	11148 <__fprintf_chk@plt>
   11be4:	mov	r0, r4
   11be8:	bl	110dc <exit@plt>
   11bec:	ldr	r1, [pc, #308]	; 11d28 <usage@@Base+0x194>
   11bf0:	mov	r2, #5
   11bf4:	add	r1, pc, r1
   11bf8:	bl	10fc8 <dcgettext@plt>
   11bfc:	ldr	r3, [pc, #288]	; 11d24 <usage@@Base+0x190>
   11c00:	ldr	r6, [r5, r3]
   11c04:	ldr	r2, [r6]
   11c08:	mov	r1, r0
   11c0c:	mov	r0, #1
   11c10:	bl	11130 <__printf_chk@plt>
   11c14:	ldr	r1, [pc, #272]	; 11d2c <usage@@Base+0x198>
   11c18:	mov	r2, #5
   11c1c:	mov	r0, r4
   11c20:	add	r1, pc, r1
   11c24:	bl	10fc8 <dcgettext@plt>
   11c28:	ldr	r3, [pc, #256]	; 11d30 <usage@@Base+0x19c>
   11c2c:	ldr	r5, [r5, r3]
   11c30:	ldr	r1, [r5]
   11c34:	bl	10f50 <fputs_unlocked@plt>
   11c38:	ldr	r1, [pc, #244]	; 11d34 <usage@@Base+0x1a0>
   11c3c:	mov	r2, #5
   11c40:	mov	r0, r4
   11c44:	add	r1, pc, r1
   11c48:	bl	10fc8 <dcgettext@plt>
   11c4c:	ldr	r1, [r5]
   11c50:	bl	10f50 <fputs_unlocked@plt>
   11c54:	ldr	r1, [pc, #220]	; 11d38 <usage@@Base+0x1a4>
   11c58:	mov	r2, #5
   11c5c:	mov	r0, r4
   11c60:	add	r1, pc, r1
   11c64:	bl	10fc8 <dcgettext@plt>
   11c68:	ldr	r2, [pc, #204]	; 11d3c <usage@@Base+0x1a8>
   11c6c:	ldr	r3, [pc, #204]	; 11d40 <usage@@Base+0x1ac>
   11c70:	add	r2, pc, r2
   11c74:	add	r3, pc, r3
   11c78:	mov	r1, r0
   11c7c:	mov	r0, #1
   11c80:	bl	11130 <__printf_chk@plt>
   11c84:	mov	r0, #5
   11c88:	mov	r1, r4
   11c8c:	bl	11178 <setlocale@plt>
   11c90:	cmp	r0, #0
   11c94:	beq	11cb0 <usage@@Base+0x11c>
   11c98:	ldr	r1, [pc, #164]	; 11d44 <usage@@Base+0x1b0>
   11c9c:	mov	r2, #3
   11ca0:	add	r1, pc, r1
   11ca4:	bl	111a8 <strncmp@plt>
   11ca8:	cmp	r0, #0
   11cac:	bne	11ce4 <usage@@Base+0x150>
   11cb0:	ldr	r1, [pc, #144]	; 11d48 <usage@@Base+0x1b4>
   11cb4:	mov	r2, #5
   11cb8:	mov	r0, #0
   11cbc:	add	r1, pc, r1
   11cc0:	bl	10fc8 <dcgettext@plt>
   11cc4:	mov	r5, r0
   11cc8:	ldr	r0, [r6]
   11ccc:	bl	120b0 <close_stdout@@Base+0x118>
   11cd0:	mov	r1, r5
   11cd4:	mov	r2, r0
   11cd8:	mov	r0, #1
   11cdc:	bl	11130 <__printf_chk@plt>
   11ce0:	b	11be4 <usage@@Base+0x50>
   11ce4:	ldr	r1, [pc, #96]	; 11d4c <usage@@Base+0x1b8>
   11ce8:	mov	r2, #5
   11cec:	mov	r0, r4
   11cf0:	add	r1, pc, r1
   11cf4:	bl	10fc8 <dcgettext@plt>
   11cf8:	mov	r5, r0
   11cfc:	ldr	r0, [r6]
   11d00:	bl	120b0 <close_stdout@@Base+0x118>
   11d04:	mov	r1, r5
   11d08:	mov	r2, r0
   11d0c:	mov	r0, #1
   11d10:	bl	11130 <__printf_chk@plt>
   11d14:	b	11cb0 <usage@@Base+0x11c>
   11d18:	andeq	r5, r1, r8, asr r4
   11d1c:	strdeq	r0, [r0], -ip
   11d20:	andeq	r3, r0, ip, lsl #12
   11d24:	andeq	r0, r0, r0, lsr #2
   11d28:	strdeq	r3, [r0], -ip
   11d2c:	andeq	r3, r0, ip, ror #12
   11d30:	andeq	r0, r0, r0, lsl r1
   11d34:	andeq	r3, r0, r8, ror r6
   11d38:	muleq	r0, r4, r6
   11d3c:	muleq	r0, ip, r6
   11d40:	andeq	r3, r0, r8, lsr #13
   11d44:	andeq	r3, r0, r4, lsr #13
   11d48:	ldrdeq	r3, [r0], -r4
   11d4c:	andeq	r3, r0, r8, asr r6
   11d50:	push	{r3, r4, r5, lr}
   11d54:	mov	r5, r0
   11d58:	mov	r0, #28
   11d5c:	bl	14648 <close_stdout@@Base+0x26b0>
   11d60:	mov	r4, r0
   11d64:	subs	r0, r5, #0
   11d68:	beq	11d70 <usage@@Base+0x1dc>
   11d6c:	bl	14840 <close_stdout@@Base+0x28a8>
   11d70:	mov	r3, #0
   11d74:	str	r0, [r4]
   11d78:	str	r3, [r4, #8]
   11d7c:	mov	r0, r4
   11d80:	str	r3, [r4, #4]
   11d84:	str	r3, [r4, #12]
   11d88:	str	r3, [r4, #16]
   11d8c:	str	r3, [r4, #20]
   11d90:	str	r3, [r4, #24]
   11d94:	pop	{r3, r4, r5, pc}
   11d98:	ldr	r3, [r0, #16]
   11d9c:	cmp	r3, #0
   11da0:	bne	11dd8 <usage@@Base+0x244>
   11da4:	ldr	r3, [r0]
   11da8:	cmp	r3, #0
   11dac:	beq	11dd8 <usage@@Base+0x244>
   11db0:	ldr	r3, [pc, #40]	; 11de0 <usage@@Base+0x24c>
   11db4:	add	r3, pc, r3
   11db8:	ldr	r2, [r3, #4]
   11dbc:	cmp	r2, #0
   11dc0:	streq	r0, [r3, #4]
   11dc4:	ldrne	r3, [r3, #8]
   11dc8:	strne	r0, [r3, #20]
   11dcc:	ldr	r3, [pc, #16]	; 11de4 <usage@@Base+0x250>
   11dd0:	add	r3, pc, r3
   11dd4:	str	r0, [r3, #8]
   11dd8:	mov	r0, #0
   11ddc:	bx	lr
   11de0:	andeq	r5, r1, r4, asr #7
   11de4:	andeq	r5, r1, r8, lsr #7
   11de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dec:	mov	r6, r0
   11df0:	ldr	r0, [r0, #16]
   11df4:	sub	sp, sp, #12
   11df8:	ldr	r1, [pc, #336]	; 11f50 <usage@@Base+0x3bc>
   11dfc:	cmp	r0, #0
   11e00:	add	r1, pc, r1
   11e04:	beq	11e64 <usage@@Base+0x2d0>
   11e08:	ldr	r3, [pc, #324]	; 11f54 <usage@@Base+0x3c0>
   11e0c:	add	r3, pc, r3
   11e10:	ldr	ip, [r3, #12]
   11e14:	cmp	ip, #0
   11e18:	streq	r6, [r3, #12]
   11e1c:	moveq	r0, ip
   11e20:	beq	11e64 <usage@@Base+0x2d0>
   11e24:	ldr	sl, [r6, #24]
   11e28:	cmp	sl, #0
   11e2c:	beq	11f48 <usage@@Base+0x3b4>
   11e30:	ldr	r3, [sl]
   11e34:	cmp	ip, r3
   11e38:	addeq	sl, r6, #24
   11e3c:	bne	11e54 <usage@@Base+0x2c0>
   11e40:	b	11e70 <usage@@Base+0x2dc>
   11e44:	ldr	r2, [r3]
   11e48:	cmp	ip, r2
   11e4c:	beq	11e6c <usage@@Base+0x2d8>
   11e50:	mov	sl, r3
   11e54:	ldr	r3, [sl, #4]
   11e58:	cmp	r3, #0
   11e5c:	bne	11e44 <usage@@Base+0x2b0>
   11e60:	mov	r0, r3
   11e64:	add	sp, sp, #12
   11e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e6c:	add	sl, sl, #4
   11e70:	ldr	r0, [r6, #20]
   11e74:	cmp	r0, #0
   11e78:	beq	11f34 <usage@@Base+0x3a0>
   11e7c:	ldr	r2, [pc, #212]	; 11f58 <usage@@Base+0x3c4>
   11e80:	mov	r9, #0
   11e84:	ldr	r3, [pc, #208]	; 11f5c <usage@@Base+0x3c8>
   11e88:	ldr	r7, [pc, #208]	; 11f60 <usage@@Base+0x3cc>
   11e8c:	ldr	r5, [pc, #208]	; 11f64 <usage@@Base+0x3d0>
   11e90:	add	r7, pc, r7
   11e94:	ldr	fp, [r1, r2]
   11e98:	ldr	r8, [r1, r3]
   11e9c:	add	r5, pc, r5
   11ea0:	b	11eb4 <usage@@Base+0x320>
   11ea4:	cmp	r4, #0
   11ea8:	str	r9, [r3, #20]
   11eac:	str	r4, [r5, #12]
   11eb0:	beq	11f28 <usage@@Base+0x394>
   11eb4:	ldr	lr, [ip]
   11eb8:	mov	r1, #1
   11ebc:	ldr	r3, [r8]
   11ec0:	mov	r2, r7
   11ec4:	ldr	r4, [ip, #20]
   11ec8:	ldr	r0, [fp]
   11ecc:	str	lr, [sp]
   11ed0:	bl	11148 <__fprintf_chk@plt>
   11ed4:	ldr	r3, [r5, #12]
   11ed8:	mov	ip, r4
   11edc:	cmp	r6, r3
   11ee0:	bne	11ea4 <usage@@Base+0x310>
   11ee4:	ldr	r2, [sl]
   11ee8:	mov	r1, #0
   11eec:	ldr	r2, [r2]
   11ef0:	ldr	r0, [r2, #16]
   11ef4:	sub	r0, r0, #1
   11ef8:	str	r0, [r2, #16]
   11efc:	ldr	r2, [sl]
   11f00:	ldr	r2, [r2, #4]
   11f04:	str	r2, [sl]
   11f08:	ldr	r2, [r3, #20]
   11f0c:	str	r1, [r3, #20]
   11f10:	cmp	r2, #0
   11f14:	mov	r3, r2
   11f18:	bne	11f08 <usage@@Base+0x374>
   11f1c:	ldr	r3, [pc, #68]	; 11f68 <usage@@Base+0x3d4>
   11f20:	add	r3, pc, r3
   11f24:	str	r2, [r3, #12]
   11f28:	mov	r0, #1
   11f2c:	add	sp, sp, #12
   11f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f34:	ldr	r3, [pc, #48]	; 11f6c <usage@@Base+0x3d8>
   11f38:	str	ip, [r6, #20]
   11f3c:	add	r3, pc, r3
   11f40:	str	r6, [r3, #12]
   11f44:	b	11e64 <usage@@Base+0x2d0>
   11f48:	mov	r0, sl
   11f4c:	b	11e64 <usage@@Base+0x2d0>
   11f50:	strdeq	r5, [r1], -r8
   11f54:	andeq	r5, r1, ip, ror #6
   11f58:	strdeq	r0, [r0], -ip
   11f5c:	andeq	r0, r0, r0, lsr #2
   11f60:	andeq	r3, r0, r4, asr #10
   11f64:	ldrdeq	r5, [r1], -ip
   11f68:	andeq	r5, r1, r8, asr r2
   11f6c:	andeq	r5, r1, ip, lsr r2
   11f70:	ldr	r3, [pc, #8]	; 11f80 <usage@@Base+0x3ec>
   11f74:	add	r3, pc, r3
   11f78:	str	r0, [r3]
   11f7c:	bx	lr
   11f80:	andeq	r5, r1, r4, lsl r2
   11f84:	ldr	r3, [pc, #8]	; 11f94 <usage@@Base+0x400>
   11f88:	add	r3, pc, r3
   11f8c:	strb	r0, [r3, #4]
   11f90:	bx	lr
   11f94:	andeq	r5, r1, r0, lsl #4

00011f98 <close_stdout@@Base>:
   11f98:	push	{r4, r5, r6, r7, lr}
   11f9c:	sub	sp, sp, #12
   11fa0:	ldr	r4, [pc, #228]	; 1208c <close_stdout@@Base+0xf4>
   11fa4:	ldr	r3, [pc, #228]	; 12090 <close_stdout@@Base+0xf8>
   11fa8:	add	r4, pc, r4
   11fac:	ldr	r3, [r4, r3]
   11fb0:	ldr	r0, [r3]
   11fb4:	bl	14a5c <close_stdout@@Base+0x2ac4>
   11fb8:	cmp	r0, #0
   11fbc:	beq	11fe4 <close_stdout@@Base+0x4c>
   11fc0:	ldr	r3, [pc, #204]	; 12094 <close_stdout@@Base+0xfc>
   11fc4:	add	r3, pc, r3
   11fc8:	ldrb	r3, [r3, #4]
   11fcc:	cmp	r3, #0
   11fd0:	beq	12004 <close_stdout@@Base+0x6c>
   11fd4:	bl	11100 <__errno_location@plt>
   11fd8:	ldr	r3, [r0]
   11fdc:	cmp	r3, #32
   11fe0:	bne	12004 <close_stdout@@Base+0x6c>
   11fe4:	ldr	r3, [pc, #172]	; 12098 <close_stdout@@Base+0x100>
   11fe8:	ldr	r3, [r4, r3]
   11fec:	ldr	r0, [r3]
   11ff0:	bl	14a5c <close_stdout@@Base+0x2ac4>
   11ff4:	cmp	r0, #0
   11ff8:	bne	12058 <close_stdout@@Base+0xc0>
   11ffc:	add	sp, sp, #12
   12000:	pop	{r4, r5, r6, r7, pc}
   12004:	ldr	r1, [pc, #144]	; 1209c <close_stdout@@Base+0x104>
   12008:	mov	r0, #0
   1200c:	mov	r2, #5
   12010:	add	r1, pc, r1
   12014:	bl	10fc8 <dcgettext@plt>
   12018:	ldr	r3, [pc, #128]	; 120a0 <close_stdout@@Base+0x108>
   1201c:	ldr	r5, [pc, r3]
   12020:	cmp	r5, #0
   12024:	mov	r6, r0
   12028:	beq	12068 <close_stdout@@Base+0xd0>
   1202c:	bl	11100 <__errno_location@plt>
   12030:	ldr	r7, [r0]
   12034:	mov	r0, r5
   12038:	bl	13b4c <close_stdout@@Base+0x1bb4>
   1203c:	ldr	r2, [pc, #96]	; 120a4 <close_stdout@@Base+0x10c>
   12040:	str	r6, [sp]
   12044:	mov	r1, r7
   12048:	add	r2, pc, r2
   1204c:	mov	r3, r0
   12050:	mov	r0, #0
   12054:	bl	11058 <error@plt>
   12058:	ldr	r3, [pc, #72]	; 120a8 <close_stdout@@Base+0x110>
   1205c:	ldr	r3, [r4, r3]
   12060:	ldr	r0, [r3]
   12064:	bl	10f98 <_exit@plt>
   12068:	bl	11100 <__errno_location@plt>
   1206c:	ldr	r2, [pc, #56]	; 120ac <close_stdout@@Base+0x114>
   12070:	add	r2, pc, r2
   12074:	mov	r3, r0
   12078:	mov	r0, r5
   1207c:	ldr	r1, [r3]
   12080:	mov	r3, r6
   12084:	bl	11058 <error@plt>
   12088:	b	12058 <close_stdout@@Base+0xc0>
   1208c:	andeq	r5, r1, r0, asr r0
   12090:	andeq	r0, r0, r0, lsl r1
   12094:	andeq	r5, r1, r4, asr #3
   12098:	strdeq	r0, [r0], -ip
   1209c:	strdeq	r4, [r0], -r0
   120a0:	andeq	r5, r1, ip, ror #2
   120a4:	andeq	r4, r0, r4, asr #9
   120a8:	andeq	r0, r0, r8, lsl r1
   120ac:	andeq	r4, r0, r0, lsr #9
   120b0:	ldrb	r3, [r0]
   120b4:	cmp	r3, #47	; 0x2f
   120b8:	bne	120d4 <close_stdout@@Base+0x13c>
   120bc:	add	r2, r0, #1
   120c0:	mov	r0, r2
   120c4:	add	r2, r2, #1
   120c8:	ldrb	r3, [r0]
   120cc:	cmp	r3, #47	; 0x2f
   120d0:	beq	120c0 <close_stdout@@Base+0x128>
   120d4:	cmp	r3, #0
   120d8:	bxeq	lr
   120dc:	mov	r2, r0
   120e0:	mov	r1, #0
   120e4:	cmp	r3, #47	; 0x2f
   120e8:	moveq	r1, #1
   120ec:	beq	120fc <close_stdout@@Base+0x164>
   120f0:	cmp	r1, #0
   120f4:	movne	r0, r2
   120f8:	movne	r1, #0
   120fc:	ldrb	r3, [r2, #1]!
   12100:	cmp	r3, #0
   12104:	bne	120e4 <close_stdout@@Base+0x14c>
   12108:	bx	lr
   1210c:	push	{r4, lr}
   12110:	mov	r4, r0
   12114:	bl	110e8 <strlen@plt>
   12118:	cmp	r0, #1
   1211c:	popls	{r4, pc}
   12120:	sub	r3, r0, #1
   12124:	ldrb	r2, [r4, r3]
   12128:	cmp	r2, #47	; 0x2f
   1212c:	popne	{r4, pc}
   12130:	mov	r0, r3
   12134:	cmp	r0, #1
   12138:	sub	r3, r3, #1
   1213c:	beq	12150 <close_stdout@@Base+0x1b8>
   12140:	ldrb	r2, [r4, r3]
   12144:	cmp	r2, #47	; 0x2f
   12148:	popne	{r4, pc}
   1214c:	b	12130 <close_stdout@@Base+0x198>
   12150:	pop	{r4, pc}
   12154:	b	10f74 <posix_fadvise64@plt>
   12158:	cmp	r0, #0
   1215c:	push	{r4, r5, r6, lr}
   12160:	mov	r6, r1
   12164:	sub	sp, sp, #16
   12168:	beq	1218c <close_stdout@@Base+0x1f4>
   1216c:	mov	r4, #0
   12170:	mov	r5, #0
   12174:	bl	1113c <fileno@plt>
   12178:	str	r6, [sp, #8]
   1217c:	mov	r2, r4
   12180:	mov	r3, r5
   12184:	strd	r4, [sp]
   12188:	bl	12154 <close_stdout@@Base+0x1bc>
   1218c:	add	sp, sp, #16
   12190:	pop	{r4, r5, r6, pc}
   12194:	push	{r4, lr}
   12198:	mov	r4, r0
   1219c:	ldr	r0, [pc, #64]	; 121e4 <close_stdout@@Base+0x24c>
   121a0:	mov	r1, #0
   121a4:	add	r0, pc, r0
   121a8:	bl	11064 <open64@plt>
   121ac:	cmp	r4, r0
   121b0:	mov	r3, r0
   121b4:	moveq	r3, #1
   121b8:	beq	121dc <close_stdout@@Base+0x244>
   121bc:	cmp	r3, #0
   121c0:	movlt	r3, #0
   121c4:	blt	121dc <close_stdout@@Base+0x244>
   121c8:	bl	111c0 <close@plt>
   121cc:	bl	11100 <__errno_location@plt>
   121d0:	mov	r3, #0
   121d4:	mov	r2, #9
   121d8:	str	r2, [r0]
   121dc:	mov	r0, r3
   121e0:	pop	{r4, pc}
   121e4:	andeq	r4, r0, r0, ror r3
   121e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   121ec:	mov	r9, r0
   121f0:	mov	r0, r2
   121f4:	mov	r7, r2
   121f8:	mov	sl, r1
   121fc:	bl	1113c <fileno@plt>
   12200:	cmp	r0, #1
   12204:	beq	12338 <close_stdout@@Base+0x3a0>
   12208:	cmp	r0, #2
   1220c:	beq	12330 <close_stdout@@Base+0x398>
   12210:	cmp	r0, #0
   12214:	beq	122d8 <close_stdout@@Base+0x340>
   12218:	mov	r0, #2
   1221c:	mov	r1, r0
   12220:	bl	10fe0 <dup2@plt>
   12224:	subs	r5, r0, #2
   12228:	movne	r5, #1
   1222c:	mov	r0, #1
   12230:	mov	r1, r0
   12234:	bl	10fe0 <dup2@plt>
   12238:	subs	r6, r0, #1
   1223c:	movne	r6, #1
   12240:	mov	r0, #0
   12244:	mov	r1, r0
   12248:	bl	10fe0 <dup2@plt>
   1224c:	cmp	r0, #0
   12250:	beq	122e0 <close_stdout@@Base+0x348>
   12254:	mov	r0, #0
   12258:	bl	12194 <close_stdout@@Base+0x1fc>
   1225c:	cmp	r0, #0
   12260:	moveq	r4, r0
   12264:	moveq	r8, #1
   12268:	beq	122a4 <close_stdout@@Base+0x30c>
   1226c:	cmp	r6, #0
   12270:	mov	r8, #1
   12274:	bne	122ec <close_stdout@@Base+0x354>
   12278:	cmp	r5, #0
   1227c:	beq	12290 <close_stdout@@Base+0x2f8>
   12280:	mov	r0, #2
   12284:	bl	12194 <close_stdout@@Base+0x1fc>
   12288:	subs	r4, r0, #0
   1228c:	beq	12318 <close_stdout@@Base+0x380>
   12290:	mov	r0, r9
   12294:	mov	r1, sl
   12298:	mov	r2, r7
   1229c:	bl	110b8 <freopen64@plt>
   122a0:	mov	r4, r0
   122a4:	bl	11100 <__errno_location@plt>
   122a8:	cmp	r5, #0
   122ac:	mov	r7, r0
   122b0:	ldr	r5, [r0]
   122b4:	bne	12324 <close_stdout@@Base+0x38c>
   122b8:	cmp	r6, #0
   122bc:	bne	1230c <close_stdout@@Base+0x374>
   122c0:	cmp	r8, #0
   122c4:	bne	12300 <close_stdout@@Base+0x368>
   122c8:	cmp	r4, #0
   122cc:	mov	r0, r4
   122d0:	streq	r5, [r7]
   122d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122d8:	mov	r5, r0
   122dc:	mov	r6, r0
   122e0:	cmp	r6, #0
   122e4:	mov	r8, #0
   122e8:	beq	12278 <close_stdout@@Base+0x2e0>
   122ec:	mov	r0, #1
   122f0:	bl	12194 <close_stdout@@Base+0x1fc>
   122f4:	cmp	r0, #0
   122f8:	bne	12278 <close_stdout@@Base+0x2e0>
   122fc:	b	122a0 <close_stdout@@Base+0x308>
   12300:	mov	r0, #0
   12304:	bl	111c0 <close@plt>
   12308:	b	122c8 <close_stdout@@Base+0x330>
   1230c:	mov	r0, #1
   12310:	bl	111c0 <close@plt>
   12314:	b	122c0 <close_stdout@@Base+0x328>
   12318:	bl	11100 <__errno_location@plt>
   1231c:	ldr	r5, [r0]
   12320:	mov	r7, r0
   12324:	mov	r0, #2
   12328:	bl	111c0 <close@plt>
   1232c:	b	122b8 <close_stdout@@Base+0x320>
   12330:	mov	r5, #0
   12334:	b	1222c <close_stdout@@Base+0x294>
   12338:	mov	r5, #0
   1233c:	mov	r6, r5
   12340:	b	12240 <close_stdout@@Base+0x2a8>
   12344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12348:	mov	r9, r3
   1234c:	ldr	r4, [pc, #224]	; 12434 <close_stdout@@Base+0x49c>
   12350:	sub	sp, sp, #28
   12354:	ldr	ip, [pc, #220]	; 12438 <close_stdout@@Base+0x4a0>
   12358:	cmp	r0, #2
   1235c:	add	r4, pc, r4
   12360:	ldr	r5, [pc, #212]	; 1243c <close_stdout@@Base+0x4a4>
   12364:	mov	r7, #0
   12368:	mov	sl, r2
   1236c:	ldr	r6, [r4, ip]
   12370:	ldr	r8, [sp, #64]	; 0x40
   12374:	ldr	fp, [sp, #68]	; 0x44
   12378:	ldr	r3, [r6]
   1237c:	str	r3, [sp, #20]
   12380:	ldr	r5, [r4, r5]
   12384:	ldr	ip, [r5]
   12388:	str	r7, [r5]
   1238c:	beq	123bc <close_stdout@@Base+0x424>
   12390:	ldr	r3, [pc, #168]	; 12440 <close_stdout@@Base+0x4a8>
   12394:	mov	r2, #0
   12398:	ldr	r0, [sp, #20]
   1239c:	ldr	r1, [r6]
   123a0:	str	ip, [r5]
   123a4:	ldr	r3, [r4, r3]
   123a8:	cmp	r0, r1
   123ac:	str	r2, [r3]
   123b0:	bne	12430 <close_stdout@@Base+0x498>
   123b4:	add	sp, sp, #28
   123b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123bc:	ldr	r2, [pc, #128]	; 12444 <close_stdout@@Base+0x4ac>
   123c0:	ldr	r3, [pc, #128]	; 12448 <close_stdout@@Base+0x4b0>
   123c4:	str	r7, [sp]
   123c8:	add	r2, pc, r2
   123cc:	add	r3, pc, r3
   123d0:	str	ip, [sp, #12]
   123d4:	bl	110c4 <getopt_long@plt>
   123d8:	ldr	ip, [sp, #12]
   123dc:	cmn	r0, #1
   123e0:	beq	12390 <close_stdout@@Base+0x3f8>
   123e4:	cmp	r0, #104	; 0x68
   123e8:	beq	12424 <close_stdout@@Base+0x48c>
   123ec:	cmp	r0, #118	; 0x76
   123f0:	bne	12390 <close_stdout@@Base+0x3f8>
   123f4:	ldr	ip, [pc, #80]	; 1244c <close_stdout@@Base+0x4b4>
   123f8:	add	r0, sp, #72	; 0x48
   123fc:	str	r0, [sp, #16]
   12400:	mov	r1, sl
   12404:	mov	r2, r9
   12408:	mov	r3, r8
   1240c:	ldr	ip, [r4, ip]
   12410:	str	r0, [sp]
   12414:	ldr	r0, [ip]
   12418:	bl	144bc <close_stdout@@Base+0x2524>
   1241c:	mov	r0, #0
   12420:	bl	110dc <exit@plt>
   12424:	mov	r0, r7
   12428:	blx	fp
   1242c:	b	123f4 <close_stdout@@Base+0x45c>
   12430:	bl	10fd4 <__stack_chk_fail@plt>
   12434:	muleq	r1, ip, ip
   12438:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1243c:	andeq	r0, r0, r8, lsr #2
   12440:	strdeq	r0, [r0], -r4
   12444:	andeq	r4, r0, r8, asr r1
   12448:	andeq	r4, r1, r0, ror #21
   1244c:	andeq	r0, r0, r0, lsl r1
   12450:	push	{r3, r4, r5, r6, r7, lr}
   12454:	subs	r4, r0, #0
   12458:	ldr	r5, [pc, #172]	; 1250c <close_stdout@@Base+0x574>
   1245c:	add	r5, pc, r5
   12460:	beq	124e8 <close_stdout@@Base+0x550>
   12464:	mov	r1, #47	; 0x2f
   12468:	bl	11184 <strrchr@plt>
   1246c:	subs	r6, r0, #0
   12470:	beq	124cc <close_stdout@@Base+0x534>
   12474:	add	r7, r6, #1
   12478:	rsb	r3, r4, r7
   1247c:	cmp	r3, #6
   12480:	ble	124cc <close_stdout@@Base+0x534>
   12484:	ldr	r1, [pc, #132]	; 12510 <close_stdout@@Base+0x578>
   12488:	sub	r0, r6, #6
   1248c:	mov	r2, #7
   12490:	add	r1, pc, r1
   12494:	bl	111a8 <strncmp@plt>
   12498:	cmp	r0, #0
   1249c:	bne	124cc <close_stdout@@Base+0x534>
   124a0:	ldr	r1, [pc, #108]	; 12514 <close_stdout@@Base+0x57c>
   124a4:	mov	r0, r7
   124a8:	mov	r2, #3
   124ac:	add	r1, pc, r1
   124b0:	bl	111a8 <strncmp@plt>
   124b4:	cmp	r0, #0
   124b8:	movne	r4, r7
   124bc:	ldreq	r3, [pc, #84]	; 12518 <close_stdout@@Base+0x580>
   124c0:	addeq	r4, r6, #4
   124c4:	ldreq	r3, [r5, r3]
   124c8:	streq	r4, [r3]
   124cc:	ldr	r2, [pc, #72]	; 1251c <close_stdout@@Base+0x584>
   124d0:	ldr	r3, [pc, #72]	; 12520 <close_stdout@@Base+0x588>
   124d4:	ldr	r2, [r5, r2]
   124d8:	str	r4, [r2]
   124dc:	ldr	r3, [r5, r3]
   124e0:	str	r4, [r3]
   124e4:	pop	{r3, r4, r5, r6, r7, pc}
   124e8:	ldr	r3, [pc, #52]	; 12524 <close_stdout@@Base+0x58c>
   124ec:	mov	r1, #1
   124f0:	ldr	r0, [pc, #48]	; 12528 <close_stdout@@Base+0x590>
   124f4:	mov	r2, #55	; 0x37
   124f8:	ldr	r3, [r5, r3]
   124fc:	add	r0, pc, r0
   12500:	ldr	r3, [r3]
   12504:	bl	11010 <fwrite@plt>
   12508:	bl	111b4 <abort@plt>
   1250c:	muleq	r1, ip, fp
   12510:	ldrdeq	r4, [r0], -ip
   12514:	andeq	r4, r0, r8, asr #1
   12518:	andeq	r0, r0, ip, lsr #2
   1251c:	andeq	r0, r0, r0, lsr #2
   12520:	andeq	r0, r0, ip, lsl r1
   12524:	strdeq	r0, [r0], -ip
   12528:	andeq	r4, r0, r8, lsr r0
   1252c:	push	{r3, lr}
   12530:	mov	r3, r0
   12534:	mov	r2, #0
   12538:	cmp	r1, #8
   1253c:	str	r2, [r3], #4
   12540:	add	r3, r3, #4
   12544:	str	r2, [r0, #4]
   12548:	str	r2, [r3], #4
   1254c:	str	r2, [r3], #4
   12550:	str	r2, [r3], #4
   12554:	str	r2, [r3], #4
   12558:	str	r2, [r3], #4
   1255c:	str	r2, [r3], #4
   12560:	str	r2, [r3], #4
   12564:	str	r2, [r3], #4
   12568:	str	r2, [r3], #4
   1256c:	str	r2, [r3]
   12570:	beq	1257c <close_stdout@@Base+0x5e4>
   12574:	str	r1, [r0]
   12578:	pop	{r3, pc}
   1257c:	bl	111b4 <abort@plt>
   12580:	push	{r4, r5, r6, lr}
   12584:	mov	r4, r0
   12588:	mov	r6, r1
   1258c:	mov	r0, #0
   12590:	mov	r1, r4
   12594:	mov	r2, #5
   12598:	bl	10fc8 <dcgettext@plt>
   1259c:	cmp	r0, r4
   125a0:	mov	r5, r0
   125a4:	beq	125ac <close_stdout@@Base+0x614>
   125a8:	pop	{r4, r5, r6, pc}
   125ac:	bl	14adc <close_stdout@@Base+0x2b44>
   125b0:	ldrb	r3, [r0]
   125b4:	bic	r3, r3, #32
   125b8:	cmp	r3, #85	; 0x55
   125bc:	bne	12630 <close_stdout@@Base+0x698>
   125c0:	ldrb	r3, [r0, #1]
   125c4:	bic	r3, r3, #32
   125c8:	cmp	r3, #84	; 0x54
   125cc:	bne	1261c <close_stdout@@Base+0x684>
   125d0:	ldrb	r3, [r0, #2]
   125d4:	bic	r3, r3, #32
   125d8:	cmp	r3, #70	; 0x46
   125dc:	bne	1261c <close_stdout@@Base+0x684>
   125e0:	ldrb	r3, [r0, #3]
   125e4:	cmp	r3, #45	; 0x2d
   125e8:	bne	1261c <close_stdout@@Base+0x684>
   125ec:	ldrb	r3, [r0, #4]
   125f0:	cmp	r3, #56	; 0x38
   125f4:	bne	1261c <close_stdout@@Base+0x684>
   125f8:	ldrb	r3, [r0, #5]
   125fc:	cmp	r3, #0
   12600:	bne	1261c <close_stdout@@Base+0x684>
   12604:	ldrb	r3, [r5]
   12608:	cmp	r3, #96	; 0x60
   1260c:	beq	126a8 <close_stdout@@Base+0x710>
   12610:	ldr	r0, [pc, #180]	; 126cc <close_stdout@@Base+0x734>
   12614:	add	r0, pc, r0
   12618:	pop	{r4, r5, r6, pc}
   1261c:	cmp	r6, #7
   12620:	beq	126b4 <close_stdout@@Base+0x71c>
   12624:	ldr	r0, [pc, #164]	; 126d0 <close_stdout@@Base+0x738>
   12628:	add	r0, pc, r0
   1262c:	pop	{r4, r5, r6, pc}
   12630:	cmp	r3, #71	; 0x47
   12634:	bne	1261c <close_stdout@@Base+0x684>
   12638:	ldrb	r3, [r0, #1]
   1263c:	bic	r3, r3, #32
   12640:	cmp	r3, #66	; 0x42
   12644:	bne	1261c <close_stdout@@Base+0x684>
   12648:	ldrb	r3, [r0, #2]
   1264c:	cmp	r3, #49	; 0x31
   12650:	bne	1261c <close_stdout@@Base+0x684>
   12654:	ldrb	r3, [r0, #3]
   12658:	cmp	r3, #56	; 0x38
   1265c:	bne	1261c <close_stdout@@Base+0x684>
   12660:	ldrb	r3, [r0, #4]
   12664:	cmp	r3, #48	; 0x30
   12668:	bne	1261c <close_stdout@@Base+0x684>
   1266c:	ldrb	r3, [r0, #5]
   12670:	cmp	r3, #51	; 0x33
   12674:	bne	1261c <close_stdout@@Base+0x684>
   12678:	ldrb	r3, [r0, #6]
   1267c:	cmp	r3, #48	; 0x30
   12680:	bne	1261c <close_stdout@@Base+0x684>
   12684:	ldrb	r3, [r0, #7]
   12688:	cmp	r3, #0
   1268c:	bne	1261c <close_stdout@@Base+0x684>
   12690:	ldrb	r3, [r5]
   12694:	cmp	r3, #96	; 0x60
   12698:	beq	126c0 <close_stdout@@Base+0x728>
   1269c:	ldr	r0, [pc, #48]	; 126d4 <close_stdout@@Base+0x73c>
   126a0:	add	r0, pc, r0
   126a4:	pop	{r4, r5, r6, pc}
   126a8:	ldr	r0, [pc, #40]	; 126d8 <close_stdout@@Base+0x740>
   126ac:	add	r0, pc, r0
   126b0:	pop	{r4, r5, r6, pc}
   126b4:	ldr	r0, [pc, #32]	; 126dc <close_stdout@@Base+0x744>
   126b8:	add	r0, pc, r0
   126bc:	pop	{r4, r5, r6, pc}
   126c0:	ldr	r0, [pc, #24]	; 126e0 <close_stdout@@Base+0x748>
   126c4:	add	r0, pc, r0
   126c8:	pop	{r4, r5, r6, pc}
   126cc:	andeq	r3, r0, r4, lsl #31
   126d0:	andeq	r3, r0, r8, ror pc
   126d4:	strdeq	r3, [r0], -ip
   126d8:	andeq	r3, r0, r0, lsl #30
   126dc:	andeq	r3, r0, ip, ror #29
   126e0:	andeq	r3, r0, r4, ror #29
   126e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126e8:	sub	sp, sp, #124	; 0x7c
   126ec:	ldr	ip, [pc, #3304]	; 133dc <close_stdout@@Base+0x1444>
   126f0:	mov	sl, r1
   126f4:	str	r0, [sp, #40]	; 0x28
   126f8:	mov	r8, r3
   126fc:	ldr	r0, [pc, #3292]	; 133e0 <close_stdout@@Base+0x1448>
   12700:	add	ip, pc, ip
   12704:	str	r2, [sp, #32]
   12708:	ldr	r1, [sp, #164]	; 0xa4
   1270c:	mov	r3, ip
   12710:	ldr	r0, [ip, r0]
   12714:	ldr	r2, [sp, #172]	; 0xac
   12718:	ubfx	r1, r1, #1, #1
   1271c:	str	r1, [sp, #36]	; 0x24
   12720:	str	r0, [sp, #56]	; 0x38
   12724:	ldr	r0, [sp, #168]	; 0xa8
   12728:	ldr	r1, [sp, #176]	; 0xb0
   1272c:	str	r2, [sp, #72]	; 0x48
   12730:	str	r0, [sp, #48]	; 0x30
   12734:	ldr	r0, [sp, #56]	; 0x38
   12738:	str	r1, [sp, #68]	; 0x44
   1273c:	ldr	r3, [r0]
   12740:	str	r3, [sp, #116]	; 0x74
   12744:	bl	11028 <__ctype_get_mb_cur_max@plt>
   12748:	ldr	r2, [sp, #160]	; 0xa0
   1274c:	str	r0, [sp, #64]	; 0x40
   12750:	cmp	r2, #8
   12754:	addls	pc, pc, r2, lsl #2
   12758:	b	132b8 <close_stdout@@Base+0x1320>
   1275c:	b	12780 <close_stdout@@Base+0x7e8>
   12760:	b	12fd0 <close_stdout@@Base+0x1038>
   12764:	b	13000 <close_stdout@@Base+0x1068>
   12768:	b	12eb0 <close_stdout@@Base+0xf18>
   1276c:	b	12ef0 <close_stdout@@Base+0xf58>
   12770:	b	12f1c <close_stdout@@Base+0xf84>
   12774:	b	12f3c <close_stdout@@Base+0xfa4>
   12778:	b	12f3c <close_stdout@@Base+0xfa4>
   1277c:	b	12f3c <close_stdout@@Base+0xfa4>
   12780:	mov	r2, #0
   12784:	str	r2, [sp, #36]	; 0x24
   12788:	mov	r9, r2
   1278c:	str	r2, [sp, #24]
   12790:	str	r2, [sp, #28]
   12794:	str	r2, [sp, #52]	; 0x34
   12798:	ldr	r0, [sp, #36]	; 0x24
   1279c:	mov	fp, #0
   127a0:	ldr	r1, [sp, #24]
   127a4:	eor	r2, r0, #1
   127a8:	eor	r3, r1, #1
   127ac:	and	r3, r2, r3
   127b0:	and	r2, r1, r0
   127b4:	str	r3, [sp, #44]	; 0x2c
   127b8:	str	r2, [sp, #76]	; 0x4c
   127bc:	cmn	r8, #1
   127c0:	beq	12b40 <close_stdout@@Base+0xba8>
   127c4:	subs	r3, fp, r8
   127c8:	movne	r3, #1
   127cc:	cmp	r3, #0
   127d0:	beq	12b58 <close_stdout@@Base+0xbc0>
   127d4:	ldr	r3, [sp, #28]
   127d8:	ldr	r0, [sp, #24]
   127dc:	adds	r7, r3, #0
   127e0:	movne	r7, #1
   127e4:	ands	r6, r7, r0
   127e8:	bne	13044 <close_stdout@@Base+0x10ac>
   127ec:	ldr	r1, [sp, #32]
   127f0:	add	r5, r1, fp
   127f4:	ldrb	r4, [r5]
   127f8:	cmp	r4, #126	; 0x7e
   127fc:	addls	pc, pc, r4, lsl #2
   12800:	b	12dc4 <close_stdout@@Base+0xe2c>
   12804:	b	12cd0 <close_stdout@@Base+0xd38>
   12808:	b	12dc4 <close_stdout@@Base+0xe2c>
   1280c:	b	12dc4 <close_stdout@@Base+0xe2c>
   12810:	b	12dc4 <close_stdout@@Base+0xe2c>
   12814:	b	12dc4 <close_stdout@@Base+0xe2c>
   12818:	b	12dc4 <close_stdout@@Base+0xe2c>
   1281c:	b	12dc4 <close_stdout@@Base+0xe2c>
   12820:	b	12cb8 <close_stdout@@Base+0xd20>
   12824:	b	12ca0 <close_stdout@@Base+0xd08>
   12828:	b	12cc8 <close_stdout@@Base+0xd30>
   1282c:	b	12cc0 <close_stdout@@Base+0xd28>
   12830:	b	12cb0 <close_stdout@@Base+0xd18>
   12834:	b	12ca8 <close_stdout@@Base+0xd10>
   12838:	b	12c6c <close_stdout@@Base+0xcd4>
   1283c:	b	12dc4 <close_stdout@@Base+0xe2c>
   12840:	b	12dc4 <close_stdout@@Base+0xe2c>
   12844:	b	12dc4 <close_stdout@@Base+0xe2c>
   12848:	b	12dc4 <close_stdout@@Base+0xe2c>
   1284c:	b	12dc4 <close_stdout@@Base+0xe2c>
   12850:	b	12dc4 <close_stdout@@Base+0xe2c>
   12854:	b	12dc4 <close_stdout@@Base+0xe2c>
   12858:	b	12dc4 <close_stdout@@Base+0xe2c>
   1285c:	b	12dc4 <close_stdout@@Base+0xe2c>
   12860:	b	12dc4 <close_stdout@@Base+0xe2c>
   12864:	b	12dc4 <close_stdout@@Base+0xe2c>
   12868:	b	12dc4 <close_stdout@@Base+0xe2c>
   1286c:	b	12dc4 <close_stdout@@Base+0xe2c>
   12870:	b	12dc4 <close_stdout@@Base+0xe2c>
   12874:	b	12dc4 <close_stdout@@Base+0xe2c>
   12878:	b	12dc4 <close_stdout@@Base+0xe2c>
   1287c:	b	12dc4 <close_stdout@@Base+0xe2c>
   12880:	b	12dc4 <close_stdout@@Base+0xe2c>
   12884:	b	12bf8 <close_stdout@@Base+0xc60>
   12888:	b	12bf8 <close_stdout@@Base+0xc60>
   1288c:	b	12bf8 <close_stdout@@Base+0xc60>
   12890:	b	12bf0 <close_stdout@@Base+0xc58>
   12894:	b	12bf8 <close_stdout@@Base+0xc60>
   12898:	b	12acc <close_stdout@@Base+0xb34>
   1289c:	b	12bf8 <close_stdout@@Base+0xc60>
   128a0:	b	12d6c <close_stdout@@Base+0xdd4>
   128a4:	b	12bf8 <close_stdout@@Base+0xc60>
   128a8:	b	12bf8 <close_stdout@@Base+0xc60>
   128ac:	b	12bf8 <close_stdout@@Base+0xc60>
   128b0:	b	12acc <close_stdout@@Base+0xb34>
   128b4:	b	12acc <close_stdout@@Base+0xb34>
   128b8:	b	12acc <close_stdout@@Base+0xb34>
   128bc:	b	12acc <close_stdout@@Base+0xb34>
   128c0:	b	12acc <close_stdout@@Base+0xb34>
   128c4:	b	12acc <close_stdout@@Base+0xb34>
   128c8:	b	12acc <close_stdout@@Base+0xb34>
   128cc:	b	12acc <close_stdout@@Base+0xb34>
   128d0:	b	12acc <close_stdout@@Base+0xb34>
   128d4:	b	12acc <close_stdout@@Base+0xb34>
   128d8:	b	12acc <close_stdout@@Base+0xb34>
   128dc:	b	12acc <close_stdout@@Base+0xb34>
   128e0:	b	12acc <close_stdout@@Base+0xb34>
   128e4:	b	12acc <close_stdout@@Base+0xb34>
   128e8:	b	12acc <close_stdout@@Base+0xb34>
   128ec:	b	12acc <close_stdout@@Base+0xb34>
   128f0:	b	12bf8 <close_stdout@@Base+0xc60>
   128f4:	b	12bf8 <close_stdout@@Base+0xc60>
   128f8:	b	12bf8 <close_stdout@@Base+0xc60>
   128fc:	b	12bf8 <close_stdout@@Base+0xc60>
   12900:	b	12a00 <close_stdout@@Base+0xa68>
   12904:	b	12dc4 <close_stdout@@Base+0xe2c>
   12908:	b	12acc <close_stdout@@Base+0xb34>
   1290c:	b	12acc <close_stdout@@Base+0xb34>
   12910:	b	12acc <close_stdout@@Base+0xb34>
   12914:	b	12acc <close_stdout@@Base+0xb34>
   12918:	b	12acc <close_stdout@@Base+0xb34>
   1291c:	b	12acc <close_stdout@@Base+0xb34>
   12920:	b	12acc <close_stdout@@Base+0xb34>
   12924:	b	12acc <close_stdout@@Base+0xb34>
   12928:	b	12acc <close_stdout@@Base+0xb34>
   1292c:	b	12acc <close_stdout@@Base+0xb34>
   12930:	b	12acc <close_stdout@@Base+0xb34>
   12934:	b	12acc <close_stdout@@Base+0xb34>
   12938:	b	12acc <close_stdout@@Base+0xb34>
   1293c:	b	12acc <close_stdout@@Base+0xb34>
   12940:	b	12acc <close_stdout@@Base+0xb34>
   12944:	b	12acc <close_stdout@@Base+0xb34>
   12948:	b	12acc <close_stdout@@Base+0xb34>
   1294c:	b	12acc <close_stdout@@Base+0xb34>
   12950:	b	12acc <close_stdout@@Base+0xb34>
   12954:	b	12acc <close_stdout@@Base+0xb34>
   12958:	b	12acc <close_stdout@@Base+0xb34>
   1295c:	b	12acc <close_stdout@@Base+0xb34>
   12960:	b	12acc <close_stdout@@Base+0xb34>
   12964:	b	12acc <close_stdout@@Base+0xb34>
   12968:	b	12acc <close_stdout@@Base+0xb34>
   1296c:	b	12acc <close_stdout@@Base+0xb34>
   12970:	b	12bf8 <close_stdout@@Base+0xc60>
   12974:	b	12d50 <close_stdout@@Base+0xdb8>
   12978:	b	12acc <close_stdout@@Base+0xb34>
   1297c:	b	12bf8 <close_stdout@@Base+0xc60>
   12980:	b	12acc <close_stdout@@Base+0xb34>
   12984:	b	12bf8 <close_stdout@@Base+0xc60>
   12988:	b	12acc <close_stdout@@Base+0xb34>
   1298c:	b	12acc <close_stdout@@Base+0xb34>
   12990:	b	12acc <close_stdout@@Base+0xb34>
   12994:	b	12acc <close_stdout@@Base+0xb34>
   12998:	b	12acc <close_stdout@@Base+0xb34>
   1299c:	b	12acc <close_stdout@@Base+0xb34>
   129a0:	b	12acc <close_stdout@@Base+0xb34>
   129a4:	b	12acc <close_stdout@@Base+0xb34>
   129a8:	b	12acc <close_stdout@@Base+0xb34>
   129ac:	b	12acc <close_stdout@@Base+0xb34>
   129b0:	b	12acc <close_stdout@@Base+0xb34>
   129b4:	b	12acc <close_stdout@@Base+0xb34>
   129b8:	b	12acc <close_stdout@@Base+0xb34>
   129bc:	b	12acc <close_stdout@@Base+0xb34>
   129c0:	b	12acc <close_stdout@@Base+0xb34>
   129c4:	b	12acc <close_stdout@@Base+0xb34>
   129c8:	b	12acc <close_stdout@@Base+0xb34>
   129cc:	b	12acc <close_stdout@@Base+0xb34>
   129d0:	b	12acc <close_stdout@@Base+0xb34>
   129d4:	b	12acc <close_stdout@@Base+0xb34>
   129d8:	b	12acc <close_stdout@@Base+0xb34>
   129dc:	b	12acc <close_stdout@@Base+0xb34>
   129e0:	b	12acc <close_stdout@@Base+0xb34>
   129e4:	b	12acc <close_stdout@@Base+0xb34>
   129e8:	b	12acc <close_stdout@@Base+0xb34>
   129ec:	b	12acc <close_stdout@@Base+0xb34>
   129f0:	b	12bd8 <close_stdout@@Base+0xc40>
   129f4:	b	12bf8 <close_stdout@@Base+0xc60>
   129f8:	b	12bd8 <close_stdout@@Base+0xc40>
   129fc:	b	12bf0 <close_stdout@@Base+0xc58>
   12a00:	ldr	r3, [sp, #160]	; 0xa0
   12a04:	cmp	r3, #2
   12a08:	beq	13294 <close_stdout@@Base+0x12fc>
   12a0c:	cmp	r3, #3
   12a10:	bne	12acc <close_stdout@@Base+0xb34>
   12a14:	ldr	r1, [sp, #164]	; 0xa4
   12a18:	tst	r1, #4
   12a1c:	beq	12acc <close_stdout@@Base+0xb34>
   12a20:	add	r3, fp, #2
   12a24:	cmp	r8, r3
   12a28:	bls	12acc <close_stdout@@Base+0xb34>
   12a2c:	ldrb	r2, [r5, #1]
   12a30:	mov	r1, #1
   12a34:	cmp	r2, #63	; 0x3f
   12a38:	bne	12acc <close_stdout@@Base+0xb34>
   12a3c:	ldr	r0, [sp, #32]
   12a40:	ldrb	ip, [r0, r3]
   12a44:	sub	r0, ip, #33	; 0x21
   12a48:	uxtb	r0, r0
   12a4c:	cmp	r0, #29
   12a50:	bhi	12acc <close_stdout@@Base+0xb34>
   12a54:	lsl	r1, r1, r0
   12a58:	movw	r0, #20929	; 0x51c1
   12a5c:	movt	r0, #14336	; 0x3800
   12a60:	and	r0, r1, r0
   12a64:	cmp	r0, #0
   12a68:	beq	12acc <close_stdout@@Base+0xb34>
   12a6c:	ldr	r1, [sp, #36]	; 0x24
   12a70:	cmp	r1, #0
   12a74:	bne	12c14 <close_stdout@@Base+0xc7c>
   12a78:	cmp	r9, sl
   12a7c:	mov	r4, ip
   12a80:	mov	fp, r3
   12a84:	ldrcc	r0, [sp, #40]	; 0x28
   12a88:	strbcc	r2, [r0, r9]
   12a8c:	add	r2, r9, #1
   12a90:	cmp	sl, r2
   12a94:	ldrhi	r0, [sp, #40]	; 0x28
   12a98:	movhi	r1, #34	; 0x22
   12a9c:	strbhi	r1, [r0, r2]
   12aa0:	add	r2, r9, #2
   12aa4:	cmp	sl, r2
   12aa8:	ldrhi	r0, [sp, #40]	; 0x28
   12aac:	movhi	r1, #34	; 0x22
   12ab0:	strbhi	r1, [r0, r2]
   12ab4:	add	r2, r9, #3
   12ab8:	cmp	sl, r2
   12abc:	add	r9, r9, #4
   12ac0:	ldrhi	r0, [sp, #40]	; 0x28
   12ac4:	movhi	r1, #63	; 0x3f
   12ac8:	strbhi	r1, [r0, r2]
   12acc:	ldr	r0, [sp, #44]	; 0x2c
   12ad0:	cmp	r0, #0
   12ad4:	bne	12afc <close_stdout@@Base+0xb64>
   12ad8:	ldr	r1, [sp, #48]	; 0x30
   12adc:	cmp	r1, #0
   12ae0:	beq	12afc <close_stdout@@Base+0xb64>
   12ae4:	ubfx	r2, r4, #5, #8
   12ae8:	and	r3, r4, #31
   12aec:	ldr	r2, [r1, r2, lsl #2]
   12af0:	lsr	r3, r2, r3
   12af4:	tst	r3, #1
   12af8:	bne	12b04 <close_stdout@@Base+0xb6c>
   12afc:	cmp	r6, #0
   12b00:	beq	12b24 <close_stdout@@Base+0xb8c>
   12b04:	ldr	r2, [sp, #36]	; 0x24
   12b08:	cmp	r2, #0
   12b0c:	bne	12c14 <close_stdout@@Base+0xc7c>
   12b10:	cmp	r9, sl
   12b14:	ldrcc	r0, [sp, #40]	; 0x28
   12b18:	movcc	r3, #92	; 0x5c
   12b1c:	strbcc	r3, [r0, r9]
   12b20:	add	r9, r9, #1
   12b24:	add	fp, fp, #1
   12b28:	cmp	r9, sl
   12b2c:	ldrcc	r1, [sp, #40]	; 0x28
   12b30:	strbcc	r4, [r1, r9]
   12b34:	cmn	r8, #1
   12b38:	add	r9, r9, #1
   12b3c:	bne	127c4 <close_stdout@@Base+0x82c>
   12b40:	ldr	r2, [sp, #32]
   12b44:	ldrb	r3, [r2, fp]
   12b48:	adds	r3, r3, #0
   12b4c:	movne	r3, #1
   12b50:	cmp	r3, #0
   12b54:	bne	127d4 <close_stdout@@Base+0x83c>
   12b58:	ldr	r3, [sp, #160]	; 0xa0
   12b5c:	cmp	r9, #0
   12b60:	cmpeq	r3, #2
   12b64:	bne	12b74 <close_stdout@@Base+0xbdc>
   12b68:	ldr	r0, [sp, #36]	; 0x24
   12b6c:	cmp	r0, #0
   12b70:	bne	12c14 <close_stdout@@Base+0xc7c>
   12b74:	ldr	r1, [sp, #36]	; 0x24
   12b78:	ldr	r2, [sp, #52]	; 0x34
   12b7c:	eor	r3, r1, #1
   12b80:	cmp	r2, #0
   12b84:	moveq	r3, #0
   12b88:	andne	r3, r3, #1
   12b8c:	cmp	r3, #0
   12b90:	beq	12bbc <close_stdout@@Base+0xc24>
   12b94:	ldrb	r3, [r2]
   12b98:	cmp	r3, #0
   12b9c:	beq	12bbc <close_stdout@@Base+0xc24>
   12ba0:	ldr	r1, [sp, #40]	; 0x28
   12ba4:	cmp	sl, r9
   12ba8:	strbhi	r3, [r1, r9]
   12bac:	ldrb	r3, [r2, #1]!
   12bb0:	add	r9, r9, #1
   12bb4:	cmp	r3, #0
   12bb8:	bne	12ba4 <close_stdout@@Base+0xc0c>
   12bbc:	cmp	r9, sl
   12bc0:	movcs	r0, r9
   12bc4:	ldrcc	r1, [sp, #40]	; 0x28
   12bc8:	movcc	r3, #0
   12bcc:	movcc	r0, r9
   12bd0:	strbcc	r3, [r1, r9]
   12bd4:	b	12c50 <close_stdout@@Base+0xcb8>
   12bd8:	cmn	r8, #1
   12bdc:	beq	132a4 <close_stdout@@Base+0x130c>
   12be0:	subs	r3, r8, #1
   12be4:	movne	r3, #1
   12be8:	cmp	r3, #0
   12bec:	bne	12acc <close_stdout@@Base+0xb34>
   12bf0:	cmp	fp, #0
   12bf4:	bne	12acc <close_stdout@@Base+0xb34>
   12bf8:	ldr	r3, [sp, #36]	; 0x24
   12bfc:	ldr	r0, [sp, #160]	; 0xa0
   12c00:	cmp	r0, #2
   12c04:	movne	r3, #0
   12c08:	andeq	r3, r3, #1
   12c0c:	cmp	r3, #0
   12c10:	beq	12acc <close_stdout@@Base+0xb34>
   12c14:	ldr	r2, [sp, #164]	; 0xa4
   12c18:	mov	ip, #0
   12c1c:	ldr	r0, [sp, #160]	; 0xa0
   12c20:	bic	r3, r2, #2
   12c24:	ldr	r1, [sp, #72]	; 0x48
   12c28:	ldr	r2, [sp, #68]	; 0x44
   12c2c:	stm	sp, {r0, r3}
   12c30:	mov	r3, r8
   12c34:	str	r1, [sp, #12]
   12c38:	mov	r1, sl
   12c3c:	str	r2, [sp, #16]
   12c40:	ldr	r0, [sp, #40]	; 0x28
   12c44:	ldr	r2, [sp, #32]
   12c48:	str	ip, [sp, #8]
   12c4c:	bl	126e4 <close_stdout@@Base+0x74c>
   12c50:	ldr	r1, [sp, #56]	; 0x38
   12c54:	ldr	r2, [sp, #116]	; 0x74
   12c58:	ldr	r3, [r1]
   12c5c:	cmp	r2, r3
   12c60:	bne	13394 <close_stdout@@Base+0x13fc>
   12c64:	add	sp, sp, #124	; 0x7c
   12c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c6c:	mov	r3, #114	; 0x72
   12c70:	ldr	r2, [sp, #36]	; 0x24
   12c74:	ldr	r0, [sp, #160]	; 0xa0
   12c78:	cmp	r0, #2
   12c7c:	movne	r2, #0
   12c80:	andeq	r2, r2, #1
   12c84:	cmp	r2, #0
   12c88:	bne	12c14 <close_stdout@@Base+0xc7c>
   12c8c:	ldr	r1, [sp, #24]
   12c90:	cmp	r1, #0
   12c94:	beq	12acc <close_stdout@@Base+0xb34>
   12c98:	mov	r4, r3
   12c9c:	b	12b04 <close_stdout@@Base+0xb6c>
   12ca0:	mov	r3, #98	; 0x62
   12ca4:	b	12c8c <close_stdout@@Base+0xcf4>
   12ca8:	mov	r3, #102	; 0x66
   12cac:	b	12c8c <close_stdout@@Base+0xcf4>
   12cb0:	mov	r3, #118	; 0x76
   12cb4:	b	12c8c <close_stdout@@Base+0xcf4>
   12cb8:	mov	r3, #97	; 0x61
   12cbc:	b	12c8c <close_stdout@@Base+0xcf4>
   12cc0:	mov	r3, #110	; 0x6e
   12cc4:	b	12c70 <close_stdout@@Base+0xcd8>
   12cc8:	mov	r3, #116	; 0x74
   12ccc:	b	12c70 <close_stdout@@Base+0xcd8>
   12cd0:	ldr	r2, [sp, #24]
   12cd4:	cmp	r2, #0
   12cd8:	beq	13280 <close_stdout@@Base+0x12e8>
   12cdc:	ldr	r3, [sp, #36]	; 0x24
   12ce0:	cmp	r3, #0
   12ce4:	bne	12c14 <close_stdout@@Base+0xc7c>
   12ce8:	cmp	r9, sl
   12cec:	add	r2, r9, #1
   12cf0:	ldrcc	r0, [sp, #40]	; 0x28
   12cf4:	movcc	r3, #92	; 0x5c
   12cf8:	strbcc	r3, [r0, r9]
   12cfc:	add	r3, fp, #1
   12d00:	cmp	r8, r3
   12d04:	bls	12d44 <close_stdout@@Base+0xdac>
   12d08:	ldr	r1, [sp, #32]
   12d0c:	ldrb	r3, [r1, r3]
   12d10:	sub	r3, r3, #48	; 0x30
   12d14:	cmp	r3, #9
   12d18:	bhi	12d44 <close_stdout@@Base+0xdac>
   12d1c:	cmp	sl, r2
   12d20:	ldrhi	r0, [sp, #40]	; 0x28
   12d24:	movhi	r3, #48	; 0x30
   12d28:	strbhi	r3, [r0, r2]
   12d2c:	add	r3, r9, #2
   12d30:	cmp	sl, r3
   12d34:	ldrhi	r1, [sp, #40]	; 0x28
   12d38:	movhi	r2, #48	; 0x30
   12d3c:	strbhi	r2, [r1, r3]
   12d40:	add	r2, r9, #3
   12d44:	mov	r9, r2
   12d48:	mov	r4, #48	; 0x30
   12d4c:	b	12ad8 <close_stdout@@Base+0xb40>
   12d50:	ldr	r1, [sp, #76]	; 0x4c
   12d54:	cmp	r1, #0
   12d58:	beq	12d64 <close_stdout@@Base+0xdcc>
   12d5c:	cmp	r7, #0
   12d60:	bne	12b24 <close_stdout@@Base+0xb8c>
   12d64:	mov	r3, r4
   12d68:	b	12c70 <close_stdout@@Base+0xcd8>
   12d6c:	ldr	r1, [sp, #160]	; 0xa0
   12d70:	cmp	r1, #2
   12d74:	bne	12acc <close_stdout@@Base+0xb34>
   12d78:	ldr	r2, [sp, #36]	; 0x24
   12d7c:	cmp	r2, #0
   12d80:	bne	12c14 <close_stdout@@Base+0xc7c>
   12d84:	cmp	r9, sl
   12d88:	ldrcc	r0, [sp, #40]	; 0x28
   12d8c:	movcc	r3, #39	; 0x27
   12d90:	strbcc	r3, [r0, r9]
   12d94:	add	r3, r9, #1
   12d98:	cmp	sl, r3
   12d9c:	ldrhi	r1, [sp, #40]	; 0x28
   12da0:	movhi	r2, #92	; 0x5c
   12da4:	strbhi	r2, [r1, r3]
   12da8:	add	r3, r9, #2
   12dac:	cmp	sl, r3
   12db0:	add	r9, r9, #3
   12db4:	ldrhi	r0, [sp, #40]	; 0x28
   12db8:	movhi	r2, #39	; 0x27
   12dbc:	strbhi	r2, [r0, r3]
   12dc0:	b	12acc <close_stdout@@Base+0xb34>
   12dc4:	ldr	r1, [sp, #64]	; 0x40
   12dc8:	cmp	r1, #1
   12dcc:	bne	130c4 <close_stdout@@Base+0x112c>
   12dd0:	bl	110d0 <__ctype_b_loc@plt>
   12dd4:	ldr	r2, [sp, #64]	; 0x40
   12dd8:	sxth	r3, r4
   12ddc:	str	r2, [sp, #60]	; 0x3c
   12de0:	lsl	r3, r3, #1
   12de4:	ldr	r2, [r0]
   12de8:	ldrh	r2, [r2, r3]
   12dec:	eor	r2, r2, #16384	; 0x4000
   12df0:	ubfx	r2, r2, #14, #1
   12df4:	ldr	r1, [sp, #24]
   12df8:	ands	r2, r2, r1
   12dfc:	beq	12acc <close_stdout@@Base+0xb34>
   12e00:	ldr	r3, [sp, #60]	; 0x3c
   12e04:	mov	r0, #92	; 0x5c
   12e08:	ldr	r7, [sp, #36]	; 0x24
   12e0c:	add	r1, r3, fp
   12e10:	str	r8, [sp, #60]	; 0x3c
   12e14:	ldr	r3, [sp, #40]	; 0x28
   12e18:	b	12e7c <close_stdout@@Base+0xee4>
   12e1c:	cmp	r7, #0
   12e20:	bne	132bc <close_stdout@@Base+0x1324>
   12e24:	add	ip, r9, #1
   12e28:	cmp	r9, sl
   12e2c:	strbcc	r0, [r3, r9]
   12e30:	cmp	sl, ip
   12e34:	lsrhi	r8, r4, #6
   12e38:	addhi	r8, r8, #48	; 0x30
   12e3c:	strbhi	r8, [r3, ip]
   12e40:	add	ip, r9, #2
   12e44:	add	r9, r9, #3
   12e48:	cmp	sl, ip
   12e4c:	ubfxhi	r8, r4, #3, #3
   12e50:	and	r4, r4, #7
   12e54:	add	r4, r4, #48	; 0x30
   12e58:	addhi	r8, r8, #48	; 0x30
   12e5c:	strbhi	r8, [r3, ip]
   12e60:	add	fp, fp, #1
   12e64:	cmp	r1, fp
   12e68:	bls	12ea8 <close_stdout@@Base+0xf10>
   12e6c:	cmp	r9, sl
   12e70:	strbcc	r4, [r3, r9]
   12e74:	ldrb	r4, [r5, #1]!
   12e78:	add	r9, r9, #1
   12e7c:	cmp	r2, #0
   12e80:	bne	12e1c <close_stdout@@Base+0xe84>
   12e84:	cmp	r6, #0
   12e88:	beq	12e60 <close_stdout@@Base+0xec8>
   12e8c:	add	fp, fp, #1
   12e90:	cmp	r9, sl
   12e94:	strbcc	r0, [r3, r9]
   12e98:	cmp	r1, fp
   12e9c:	add	r9, r9, #1
   12ea0:	mov	r6, #0
   12ea4:	bhi	12e6c <close_stdout@@Base+0xed4>
   12ea8:	ldr	r8, [sp, #60]	; 0x3c
   12eac:	b	12b28 <close_stdout@@Base+0xb90>
   12eb0:	ldr	r3, [sp, #36]	; 0x24
   12eb4:	cmp	r3, #0
   12eb8:	bne	133bc <close_stdout@@Base+0x1424>
   12ebc:	cmp	sl, #0
   12ec0:	beq	132d4 <close_stdout@@Base+0x133c>
   12ec4:	ldr	r1, [sp, #40]	; 0x28
   12ec8:	mov	r0, #1
   12ecc:	ldr	r2, [pc, #1296]	; 133e4 <close_stdout@@Base+0x144c>
   12ed0:	mov	r3, #34	; 0x22
   12ed4:	str	r0, [sp, #24]
   12ed8:	mov	r9, r0
   12edc:	add	r2, pc, r2
   12ee0:	str	r0, [sp, #28]
   12ee4:	strb	r3, [r1]
   12ee8:	str	r2, [sp, #52]	; 0x34
   12eec:	b	12798 <close_stdout@@Base+0x800>
   12ef0:	ldr	r3, [pc, #1264]	; 133e8 <close_stdout@@Base+0x1450>
   12ef4:	mov	r2, #1
   12ef8:	mov	r0, #3
   12efc:	str	r2, [sp, #36]	; 0x24
   12f00:	add	r3, pc, r3
   12f04:	str	r2, [sp, #24]
   12f08:	str	r3, [sp, #52]	; 0x34
   12f0c:	mov	r9, #0
   12f10:	str	r2, [sp, #28]
   12f14:	str	r0, [sp, #160]	; 0xa0
   12f18:	b	12798 <close_stdout@@Base+0x800>
   12f1c:	mov	r0, #0
   12f20:	mov	r1, #1
   12f24:	str	r0, [sp, #36]	; 0x24
   12f28:	mov	r9, r0
   12f2c:	str	r1, [sp, #24]
   12f30:	str	r0, [sp, #28]
   12f34:	str	r0, [sp, #52]	; 0x34
   12f38:	b	12798 <close_stdout@@Base+0x800>
   12f3c:	ldr	r3, [sp, #160]	; 0xa0
   12f40:	cmp	r3, #8
   12f44:	beq	12f70 <close_stdout@@Base+0xfd8>
   12f48:	ldr	r0, [pc, #1180]	; 133ec <close_stdout@@Base+0x1454>
   12f4c:	mov	r1, r3
   12f50:	add	r0, pc, r0
   12f54:	bl	12580 <close_stdout@@Base+0x5e8>
   12f58:	ldr	r1, [sp, #160]	; 0xa0
   12f5c:	str	r0, [sp, #72]	; 0x48
   12f60:	ldr	r0, [pc, #1160]	; 133f0 <close_stdout@@Base+0x1458>
   12f64:	add	r0, pc, r0
   12f68:	bl	12580 <close_stdout@@Base+0x5e8>
   12f6c:	str	r0, [sp, #68]	; 0x44
   12f70:	ldr	r0, [sp, #36]	; 0x24
   12f74:	cmp	r0, #0
   12f78:	movne	r9, #0
   12f7c:	bne	12fb4 <close_stdout@@Base+0x101c>
   12f80:	ldr	r1, [sp, #72]	; 0x48
   12f84:	ldrb	r3, [r1]
   12f88:	cmp	r3, #0
   12f8c:	beq	1338c <close_stdout@@Base+0x13f4>
   12f90:	mov	r2, r1
   12f94:	ldr	r1, [sp, #40]	; 0x28
   12f98:	mov	r9, r0
   12f9c:	cmp	r9, sl
   12fa0:	strbcc	r3, [r1, r9]
   12fa4:	ldrb	r3, [r2, #1]!
   12fa8:	add	r9, r9, #1
   12fac:	cmp	r3, #0
   12fb0:	bne	12f9c <close_stdout@@Base+0x1004>
   12fb4:	ldr	r0, [sp, #68]	; 0x44
   12fb8:	str	r0, [sp, #52]	; 0x34
   12fbc:	bl	110e8 <strlen@plt>
   12fc0:	mov	r2, #1
   12fc4:	str	r2, [sp, #24]
   12fc8:	str	r0, [sp, #28]
   12fcc:	b	12798 <close_stdout@@Base+0x800>
   12fd0:	ldr	r3, [pc, #1052]	; 133f4 <close_stdout@@Base+0x145c>
   12fd4:	mov	r2, #0
   12fd8:	mov	r1, #1
   12fdc:	mov	r0, #2
   12fe0:	add	r3, pc, r3
   12fe4:	str	r1, [sp, #36]	; 0x24
   12fe8:	str	r2, [sp, #24]
   12fec:	mov	r9, r2
   12ff0:	str	r1, [sp, #28]
   12ff4:	str	r3, [sp, #52]	; 0x34
   12ff8:	str	r0, [sp, #160]	; 0xa0
   12ffc:	b	12798 <close_stdout@@Base+0x800>
   13000:	ldr	r3, [sp, #36]	; 0x24
   13004:	cmp	r3, #0
   13008:	bne	13398 <close_stdout@@Base+0x1400>
   1300c:	cmp	sl, #0
   13010:	beq	132f4 <close_stdout@@Base+0x135c>
   13014:	ldr	r1, [sp, #40]	; 0x28
   13018:	mov	r3, #39	; 0x27
   1301c:	ldr	r2, [sp, #36]	; 0x24
   13020:	mov	r0, #1
   13024:	mov	r9, r0
   13028:	str	r0, [sp, #28]
   1302c:	strb	r3, [r1]
   13030:	ldr	r3, [pc, #960]	; 133f8 <close_stdout@@Base+0x1460>
   13034:	str	r2, [sp, #24]
   13038:	add	r3, pc, r3
   1303c:	str	r3, [sp, #52]	; 0x34
   13040:	b	12798 <close_stdout@@Base+0x800>
   13044:	ldr	r2, [sp, #28]
   13048:	cmp	r2, #1
   1304c:	add	r4, fp, r2
   13050:	movls	r3, #0
   13054:	movhi	r3, #1
   13058:	cmn	r8, #1
   1305c:	movne	r3, #0
   13060:	cmp	r3, #0
   13064:	beq	13074 <close_stdout@@Base+0x10dc>
   13068:	ldr	r0, [sp, #32]
   1306c:	bl	110e8 <strlen@plt>
   13070:	mov	r8, r0
   13074:	cmp	r8, r4
   13078:	ldrcc	r3, [sp, #32]
   1307c:	movcc	r6, #0
   13080:	addcc	r5, r3, fp
   13084:	bcc	127f4 <close_stdout@@Base+0x85c>
   13088:	ldr	r0, [sp, #32]
   1308c:	ldr	r1, [sp, #52]	; 0x34
   13090:	add	r5, r0, fp
   13094:	ldr	r2, [sp, #28]
   13098:	mov	r0, r5
   1309c:	bl	10fbc <memcmp@plt>
   130a0:	cmp	r0, #0
   130a4:	bne	130bc <close_stdout@@Base+0x1124>
   130a8:	ldr	r1, [sp, #36]	; 0x24
   130ac:	cmp	r1, #0
   130b0:	bne	12c14 <close_stdout@@Base+0xc7c>
   130b4:	mov	r6, #1
   130b8:	b	127f4 <close_stdout@@Base+0x85c>
   130bc:	mov	r6, #0
   130c0:	b	127f4 <close_stdout@@Base+0x85c>
   130c4:	add	r7, sp, #108	; 0x6c
   130c8:	cmn	r8, #1
   130cc:	mov	r3, #0
   130d0:	str	r3, [sp, #108]	; 0x6c
   130d4:	str	r3, [r7, #4]
   130d8:	beq	132c4 <close_stdout@@Base+0x132c>
   130dc:	mov	r1, #0
   130e0:	ldr	r0, [sp, #32]
   130e4:	mov	ip, #1
   130e8:	str	r9, [sp, #88]	; 0x58
   130ec:	str	r6, [sp, #96]	; 0x60
   130f0:	mov	r9, r1
   130f4:	str	r5, [sp, #100]	; 0x64
   130f8:	mov	r6, ip
   130fc:	mov	r5, r7
   13100:	add	r3, sp, #104	; 0x68
   13104:	sub	r0, r0, #1
   13108:	str	r3, [sp, #80]	; 0x50
   1310c:	str	r0, [sp, #84]	; 0x54
   13110:	str	r1, [sp, #60]	; 0x3c
   13114:	str	r4, [sp, #92]	; 0x5c
   13118:	ldr	r2, [sp, #32]
   1311c:	add	r7, r9, fp
   13120:	add	r0, sp, #104	; 0x68
   13124:	mov	r3, r5
   13128:	add	r4, r2, r7
   1312c:	rsb	r2, r7, r8
   13130:	mov	r1, r4
   13134:	bl	1104c <mbrtowc@plt>
   13138:	subs	r2, r0, #0
   1313c:	beq	13248 <close_stdout@@Base+0x12b0>
   13140:	cmn	r2, #1
   13144:	beq	13370 <close_stdout@@Base+0x13d8>
   13148:	cmn	r2, #2
   1314c:	beq	13314 <close_stdout@@Base+0x137c>
   13150:	ldr	r3, [sp, #36]	; 0x24
   13154:	ldr	r0, [sp, #160]	; 0xa0
   13158:	cmp	r0, #2
   1315c:	movne	r3, #0
   13160:	andeq	r3, r3, #1
   13164:	cmp	r3, #0
   13168:	beq	13224 <close_stdout@@Base+0x128c>
   1316c:	cmp	r2, #1
   13170:	beq	13224 <close_stdout@@Base+0x128c>
   13174:	ldr	r1, [sp, #84]	; 0x54
   13178:	add	r3, r1, r2
   1317c:	add	r7, r3, r7
   13180:	ldrb	r3, [r4, #1]!
   13184:	sub	r3, r3, #91	; 0x5b
   13188:	cmp	r3, #33	; 0x21
   1318c:	addls	pc, pc, r3, lsl #2
   13190:	b	1321c <close_stdout@@Base+0x1284>
   13194:	b	12c14 <close_stdout@@Base+0xc7c>
   13198:	b	12c14 <close_stdout@@Base+0xc7c>
   1319c:	b	1321c <close_stdout@@Base+0x1284>
   131a0:	b	12c14 <close_stdout@@Base+0xc7c>
   131a4:	b	1321c <close_stdout@@Base+0x1284>
   131a8:	b	12c14 <close_stdout@@Base+0xc7c>
   131ac:	b	1321c <close_stdout@@Base+0x1284>
   131b0:	b	1321c <close_stdout@@Base+0x1284>
   131b4:	b	1321c <close_stdout@@Base+0x1284>
   131b8:	b	1321c <close_stdout@@Base+0x1284>
   131bc:	b	1321c <close_stdout@@Base+0x1284>
   131c0:	b	1321c <close_stdout@@Base+0x1284>
   131c4:	b	1321c <close_stdout@@Base+0x1284>
   131c8:	b	1321c <close_stdout@@Base+0x1284>
   131cc:	b	1321c <close_stdout@@Base+0x1284>
   131d0:	b	1321c <close_stdout@@Base+0x1284>
   131d4:	b	1321c <close_stdout@@Base+0x1284>
   131d8:	b	1321c <close_stdout@@Base+0x1284>
   131dc:	b	1321c <close_stdout@@Base+0x1284>
   131e0:	b	1321c <close_stdout@@Base+0x1284>
   131e4:	b	1321c <close_stdout@@Base+0x1284>
   131e8:	b	1321c <close_stdout@@Base+0x1284>
   131ec:	b	1321c <close_stdout@@Base+0x1284>
   131f0:	b	1321c <close_stdout@@Base+0x1284>
   131f4:	b	1321c <close_stdout@@Base+0x1284>
   131f8:	b	1321c <close_stdout@@Base+0x1284>
   131fc:	b	1321c <close_stdout@@Base+0x1284>
   13200:	b	1321c <close_stdout@@Base+0x1284>
   13204:	b	1321c <close_stdout@@Base+0x1284>
   13208:	b	1321c <close_stdout@@Base+0x1284>
   1320c:	b	1321c <close_stdout@@Base+0x1284>
   13210:	b	1321c <close_stdout@@Base+0x1284>
   13214:	b	1321c <close_stdout@@Base+0x1284>
   13218:	b	12c14 <close_stdout@@Base+0xc7c>
   1321c:	cmp	r4, r7
   13220:	bne	13180 <close_stdout@@Base+0x11e8>
   13224:	ldr	r0, [sp, #104]	; 0x68
   13228:	add	r9, r9, r2
   1322c:	bl	11004 <iswprint@plt>
   13230:	cmp	r0, #0
   13234:	mov	r0, r5
   13238:	moveq	r6, #0
   1323c:	bl	10fb0 <mbsinit@plt>
   13240:	cmp	r0, #0
   13244:	beq	13118 <close_stdout@@Base+0x1180>
   13248:	mov	ip, r6
   1324c:	eor	r2, ip, #1
   13250:	str	r9, [sp, #60]	; 0x3c
   13254:	ldr	r4, [sp, #92]	; 0x5c
   13258:	uxtb	r2, r2
   1325c:	ldr	r9, [sp, #88]	; 0x58
   13260:	ldr	r6, [sp, #96]	; 0x60
   13264:	ldr	r5, [sp, #100]	; 0x64
   13268:	ldr	r3, [sp, #60]	; 0x3c
   1326c:	cmp	r3, #1
   13270:	bls	12df4 <close_stdout@@Base+0xe5c>
   13274:	ldr	r0, [sp, #24]
   13278:	and	r2, r2, r0
   1327c:	b	12e00 <close_stdout@@Base+0xe68>
   13280:	ldr	r2, [sp, #164]	; 0xa4
   13284:	tst	r2, #1
   13288:	addne	fp, fp, #1
   1328c:	bne	127bc <close_stdout@@Base+0x824>
   13290:	b	12acc <close_stdout@@Base+0xb34>
   13294:	ldr	r0, [sp, #36]	; 0x24
   13298:	cmp	r0, #0
   1329c:	beq	12acc <close_stdout@@Base+0xb34>
   132a0:	b	12c14 <close_stdout@@Base+0xc7c>
   132a4:	ldr	r2, [sp, #32]
   132a8:	ldrb	r3, [r2, #1]
   132ac:	adds	r3, r3, #0
   132b0:	movne	r3, #1
   132b4:	b	12be8 <close_stdout@@Base+0xc50>
   132b8:	bl	111b4 <abort@plt>
   132bc:	ldr	r8, [sp, #60]	; 0x3c
   132c0:	b	12c14 <close_stdout@@Base+0xc7c>
   132c4:	ldr	r0, [sp, #32]
   132c8:	bl	110e8 <strlen@plt>
   132cc:	mov	r8, r0
   132d0:	b	130dc <close_stdout@@Base+0x1144>
   132d4:	ldr	r2, [pc, #288]	; 133fc <close_stdout@@Base+0x1464>
   132d8:	mov	r1, #1
   132dc:	mov	r9, r1
   132e0:	str	r1, [sp, #24]
   132e4:	add	r2, pc, r2
   132e8:	str	r1, [sp, #28]
   132ec:	str	r2, [sp, #52]	; 0x34
   132f0:	b	12798 <close_stdout@@Base+0x800>
   132f4:	ldr	r2, [pc, #260]	; 13400 <close_stdout@@Base+0x1468>
   132f8:	mov	r3, #1
   132fc:	mov	r9, r3
   13300:	str	r3, [sp, #28]
   13304:	add	r2, pc, r2
   13308:	str	sl, [sp, #24]
   1330c:	str	r2, [sp, #52]	; 0x34
   13310:	b	12798 <close_stdout@@Base+0x800>
   13314:	cmp	r8, r7
   13318:	str	r9, [sp, #60]	; 0x3c
   1331c:	mov	ip, r4
   13320:	ldr	r6, [sp, #96]	; 0x60
   13324:	ldr	r9, [sp, #88]	; 0x58
   13328:	ldr	r4, [sp, #92]	; 0x5c
   1332c:	ldr	r5, [sp, #100]	; 0x64
   13330:	bls	13368 <close_stdout@@Base+0x13d0>
   13334:	ldrb	r3, [ip]
   13338:	cmp	r3, #0
   1333c:	beq	13368 <close_stdout@@Base+0x13d0>
   13340:	ldr	r3, [sp, #60]	; 0x3c
   13344:	b	13354 <close_stdout@@Base+0x13bc>
   13348:	ldrb	r2, [r5, r3]
   1334c:	cmp	r2, #0
   13350:	beq	13364 <close_stdout@@Base+0x13cc>
   13354:	add	r3, r3, #1
   13358:	add	r2, fp, r3
   1335c:	cmp	r8, r2
   13360:	bhi	13348 <close_stdout@@Base+0x13b0>
   13364:	str	r3, [sp, #60]	; 0x3c
   13368:	mov	r2, #1
   1336c:	b	13268 <close_stdout@@Base+0x12d0>
   13370:	str	r9, [sp, #60]	; 0x3c
   13374:	mov	r2, #1
   13378:	ldr	r4, [sp, #92]	; 0x5c
   1337c:	ldr	r6, [sp, #96]	; 0x60
   13380:	ldr	r9, [sp, #88]	; 0x58
   13384:	ldr	r5, [sp, #100]	; 0x64
   13388:	b	13268 <close_stdout@@Base+0x12d0>
   1338c:	ldr	r9, [sp, #36]	; 0x24
   13390:	b	12fb4 <close_stdout@@Base+0x101c>
   13394:	bl	10fd4 <__stack_chk_fail@plt>
   13398:	ldr	r1, [pc, #100]	; 13404 <close_stdout@@Base+0x146c>
   1339c:	mov	r3, #0
   133a0:	mov	r0, #1
   133a4:	str	r3, [sp, #24]
   133a8:	add	r1, pc, r1
   133ac:	str	r0, [sp, #28]
   133b0:	mov	r9, r3
   133b4:	str	r1, [sp, #52]	; 0x34
   133b8:	b	12798 <close_stdout@@Base+0x800>
   133bc:	ldr	r0, [pc, #68]	; 13408 <close_stdout@@Base+0x1470>
   133c0:	mov	r3, #1
   133c4:	mov	r9, #0
   133c8:	str	r3, [sp, #24]
   133cc:	add	r0, pc, r0
   133d0:	str	r3, [sp, #28]
   133d4:	str	r0, [sp, #52]	; 0x34
   133d8:	b	12798 <close_stdout@@Base+0x800>
   133dc:	strdeq	r4, [r1], -r8
   133e0:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   133e4:	andeq	r3, r0, r8, asr #13
   133e8:	andeq	r3, r0, r4, lsr #13
   133ec:	andeq	r3, r0, r0, ror #12
   133f0:	andeq	r3, r0, ip, lsr r6
   133f4:	andeq	r3, r0, r0, asr #11
   133f8:	andeq	r3, r0, r8, ror #10
   133fc:	andeq	r3, r0, r0, asr #5
   13400:	muleq	r0, ip, r2
   13404:	strdeq	r3, [r0], -r8
   13408:	ldrdeq	r3, [r0], -r8
   1340c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13410:	sub	sp, sp, #44	; 0x2c
   13414:	mov	r6, r0
   13418:	mov	r9, r1
   1341c:	mov	sl, r2
   13420:	mov	r4, r3
   13424:	bl	11100 <__errno_location@plt>
   13428:	ldr	fp, [pc, #412]	; 135cc <close_stdout@@Base+0x1634>
   1342c:	cmp	r6, #0
   13430:	add	fp, pc, fp
   13434:	ldr	r5, [fp]
   13438:	ldr	r1, [r0]
   1343c:	mov	r8, r0
   13440:	str	r1, [sp, #36]	; 0x24
   13444:	blt	135c4 <close_stdout@@Base+0x162c>
   13448:	ldr	r3, [pc, #384]	; 135d0 <close_stdout@@Base+0x1638>
   1344c:	add	r3, pc, r3
   13450:	ldr	r3, [r3]
   13454:	cmp	r6, r3
   13458:	bcc	134ac <close_stdout@@Base+0x1514>
   1345c:	add	r7, r6, #1
   13460:	cmn	r7, #-536870911	; 0xe0000001
   13464:	bhi	135c8 <close_stdout@@Base+0x1630>
   13468:	add	r3, fp, #4
   1346c:	cmp	r5, r3
   13470:	beq	1359c <close_stdout@@Base+0x1604>
   13474:	mov	r0, r5
   13478:	lsl	r1, r7, #3
   1347c:	bl	146a0 <close_stdout@@Base+0x2708>
   13480:	mov	r5, r0
   13484:	str	r0, [fp]
   13488:	ldr	fp, [pc, #324]	; 135d4 <close_stdout@@Base+0x163c>
   1348c:	mov	r1, #0
   13490:	add	fp, pc, fp
   13494:	ldr	r0, [fp]
   13498:	rsb	r2, r0, r7
   1349c:	add	r0, r5, r0, lsl #3
   134a0:	lsl	r2, r2, #3
   134a4:	bl	11118 <memset@plt>
   134a8:	str	r7, [fp]
   134ac:	add	r2, r4, #8
   134b0:	str	r2, [sp, #32]
   134b4:	ldr	r1, [r4]
   134b8:	add	fp, r5, r6, lsl #3
   134bc:	ldr	lr, [sp, #32]
   134c0:	mov	r2, r9
   134c4:	ldr	r3, [r4, #4]
   134c8:	ldr	ip, [r5, r6, lsl #3]
   134cc:	ldr	r7, [fp, #4]
   134d0:	orr	r3, r3, #1
   134d4:	str	r1, [sp]
   134d8:	str	r3, [sp, #4]
   134dc:	mov	r1, ip
   134e0:	str	lr, [sp, #8]
   134e4:	mov	r0, r7
   134e8:	ldr	lr, [r4, #40]	; 0x28
   134ec:	str	r3, [sp, #28]
   134f0:	mov	r3, sl
   134f4:	str	lr, [sp, #12]
   134f8:	ldr	lr, [r4, #44]	; 0x2c
   134fc:	str	ip, [sp, #24]
   13500:	str	lr, [sp, #16]
   13504:	bl	126e4 <close_stdout@@Base+0x74c>
   13508:	ldr	ip, [sp, #24]
   1350c:	cmp	ip, r0
   13510:	bhi	13588 <close_stdout@@Base+0x15f0>
   13514:	ldr	r3, [pc, #188]	; 135d8 <close_stdout@@Base+0x1640>
   13518:	add	r1, r0, #1
   1351c:	str	r1, [r5, r6, lsl #3]
   13520:	add	r3, pc, r3
   13524:	cmp	r7, r3
   13528:	beq	1353c <close_stdout@@Base+0x15a4>
   1352c:	mov	r0, r7
   13530:	str	r1, [sp, #24]
   13534:	bl	10f8c <free@plt>
   13538:	ldr	r1, [sp, #24]
   1353c:	mov	r0, r1
   13540:	str	r1, [sp, #24]
   13544:	bl	14648 <close_stdout@@Base+0x26b0>
   13548:	ldr	r3, [sp, #28]
   1354c:	ldr	lr, [sp, #32]
   13550:	mov	r2, r9
   13554:	str	r0, [fp, #4]
   13558:	mov	r7, r0
   1355c:	ldr	ip, [r4]
   13560:	str	r3, [sp, #4]
   13564:	mov	r3, sl
   13568:	str	lr, [sp, #8]
   1356c:	str	ip, [sp]
   13570:	ldr	ip, [r4, #40]	; 0x28
   13574:	ldr	r1, [sp, #24]
   13578:	str	ip, [sp, #12]
   1357c:	ldr	ip, [r4, #44]	; 0x2c
   13580:	str	ip, [sp, #16]
   13584:	bl	126e4 <close_stdout@@Base+0x74c>
   13588:	ldr	r1, [sp, #36]	; 0x24
   1358c:	mov	r0, r7
   13590:	str	r1, [r8]
   13594:	add	sp, sp, #44	; 0x2c
   13598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1359c:	lsl	r1, r7, #3
   135a0:	mov	r0, #0
   135a4:	str	r3, [sp, #24]
   135a8:	bl	146a0 <close_stdout@@Base+0x2708>
   135ac:	ldr	r3, [sp, #24]
   135b0:	mov	r5, r0
   135b4:	ldm	r3, {r0, r1}
   135b8:	str	r5, [fp]
   135bc:	stm	r5, {r0, r1}
   135c0:	b	13488 <close_stdout@@Base+0x14f0>
   135c4:	bl	111b4 <abort@plt>
   135c8:	bl	1485c <close_stdout@@Base+0x28c4>
   135cc:	andeq	r3, r1, r8, lsr sp
   135d0:	andeq	r3, r1, r8, ror #25
   135d4:	andeq	r3, r1, r4, lsr #25
   135d8:	andeq	r3, r1, r4, ror ip
   135dc:	push	{r4, r5, r6, lr}
   135e0:	mov	r5, r0
   135e4:	bl	11100 <__errno_location@plt>
   135e8:	cmp	r5, #0
   135ec:	mov	r1, #48	; 0x30
   135f0:	mov	r4, r0
   135f4:	ldr	r0, [pc, #24]	; 13614 <close_stdout@@Base+0x167c>
   135f8:	ldr	r6, [r4]
   135fc:	add	r0, pc, r0
   13600:	add	r0, r0, #256	; 0x100
   13604:	movne	r0, r5
   13608:	bl	1481c <close_stdout@@Base+0x2884>
   1360c:	str	r6, [r4]
   13610:	pop	{r4, r5, r6, pc}
   13614:	muleq	r1, r8, fp
   13618:	cmp	r0, #0
   1361c:	beq	13628 <close_stdout@@Base+0x1690>
   13620:	ldr	r0, [r0]
   13624:	bx	lr
   13628:	ldr	r0, [pc, #12]	; 1363c <close_stdout@@Base+0x16a4>
   1362c:	add	r0, pc, r0
   13630:	add	r0, r0, #256	; 0x100
   13634:	ldr	r0, [r0]
   13638:	bx	lr
   1363c:	andeq	r3, r1, r8, ror #22
   13640:	cmp	r0, #0
   13644:	beq	13650 <close_stdout@@Base+0x16b8>
   13648:	str	r1, [r0]
   1364c:	bx	lr
   13650:	ldr	r0, [pc, #12]	; 13664 <close_stdout@@Base+0x16cc>
   13654:	add	r0, pc, r0
   13658:	add	r0, r0, #256	; 0x100
   1365c:	str	r1, [r0]
   13660:	bx	lr
   13664:	andeq	r3, r1, r0, asr #22
   13668:	cmp	r0, #0
   1366c:	movne	r3, r0
   13670:	beq	136a0 <close_stdout@@Base+0x1708>
   13674:	lsr	ip, r1, #5
   13678:	and	r1, r1, #31
   1367c:	add	r3, r3, ip, lsl #2
   13680:	ldr	ip, [r3, #8]
   13684:	lsr	r0, ip, r1
   13688:	eor	r2, r0, r2
   1368c:	and	r0, r0, #1
   13690:	and	r2, r2, #1
   13694:	eor	ip, ip, r2, lsl r1
   13698:	str	ip, [r3, #8]
   1369c:	bx	lr
   136a0:	ldr	r3, [pc, #8]	; 136b0 <close_stdout@@Base+0x1718>
   136a4:	add	r3, pc, r3
   136a8:	add	r3, r3, #256	; 0x100
   136ac:	b	13674 <close_stdout@@Base+0x16dc>
   136b0:	strdeq	r3, [r1], -r0
   136b4:	subs	r3, r0, #0
   136b8:	beq	136c8 <close_stdout@@Base+0x1730>
   136bc:	ldr	r0, [r3, #4]
   136c0:	str	r1, [r3, #4]
   136c4:	bx	lr
   136c8:	ldr	r3, [pc, #8]	; 136d8 <close_stdout@@Base+0x1740>
   136cc:	add	r3, pc, r3
   136d0:	add	r3, r3, #256	; 0x100
   136d4:	b	136bc <close_stdout@@Base+0x1724>
   136d8:	andeq	r3, r1, r8, asr #21
   136dc:	cmp	r0, #0
   136e0:	push	{r3, lr}
   136e4:	beq	13708 <close_stdout@@Base+0x1770>
   136e8:	cmp	r2, #0
   136ec:	cmpne	r1, #0
   136f0:	mov	r3, #8
   136f4:	strne	r1, [r0, #40]	; 0x28
   136f8:	str	r3, [r0]
   136fc:	strne	r2, [r0, #44]	; 0x2c
   13700:	popne	{r3, pc}
   13704:	bl	111b4 <abort@plt>
   13708:	ldr	r0, [pc, #8]	; 13718 <close_stdout@@Base+0x1780>
   1370c:	add	r0, pc, r0
   13710:	add	r0, r0, #256	; 0x100
   13714:	b	136e8 <close_stdout@@Base+0x1750>
   13718:	andeq	r3, r1, r8, lsl #21
   1371c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13720:	sub	sp, sp, #24
   13724:	mov	r7, r0
   13728:	mov	sl, r1
   1372c:	ldr	r4, [sp, #56]	; 0x38
   13730:	mov	r9, r2
   13734:	mov	r8, r3
   13738:	cmp	r4, #0
   1373c:	beq	13790 <close_stdout@@Base+0x17f8>
   13740:	bl	11100 <__errno_location@plt>
   13744:	ldr	r3, [r4]
   13748:	add	lr, r4, #8
   1374c:	mov	r1, sl
   13750:	mov	r2, r9
   13754:	ldr	r6, [r0]
   13758:	mov	r5, r0
   1375c:	str	r3, [sp]
   13760:	mov	r0, r7
   13764:	ldr	ip, [r4, #4]
   13768:	mov	r3, r8
   1376c:	stmib	sp, {ip, lr}
   13770:	ldr	ip, [r4, #40]	; 0x28
   13774:	str	ip, [sp, #12]
   13778:	ldr	ip, [r4, #44]	; 0x2c
   1377c:	str	ip, [sp, #16]
   13780:	bl	126e4 <close_stdout@@Base+0x74c>
   13784:	str	r6, [r5]
   13788:	add	sp, sp, #24
   1378c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13790:	ldr	r4, [pc, #8]	; 137a0 <close_stdout@@Base+0x1808>
   13794:	add	r4, pc, r4
   13798:	add	r4, r4, #256	; 0x100
   1379c:	b	13740 <close_stdout@@Base+0x17a8>
   137a0:	andeq	r3, r1, r0, lsl #20
   137a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137a8:	subs	r4, r3, #0
   137ac:	sub	sp, sp, #36	; 0x24
   137b0:	mov	r7, r0
   137b4:	mov	r6, r1
   137b8:	mov	r5, r2
   137bc:	beq	13878 <close_stdout@@Base+0x18e0>
   137c0:	bl	11100 <__errno_location@plt>
   137c4:	ldr	r3, [r4]
   137c8:	ldr	sl, [r4, #4]
   137cc:	add	r9, r4, #8
   137d0:	mov	r8, r0
   137d4:	mov	r0, #0
   137d8:	ldr	r2, [r8]
   137dc:	cmp	r5, r0
   137e0:	orreq	sl, sl, #1
   137e4:	str	r9, [sp, #8]
   137e8:	mov	r1, r0
   137ec:	stm	sp, {r3, sl}
   137f0:	mov	r3, r6
   137f4:	ldr	ip, [r4, #40]	; 0x28
   137f8:	str	r2, [sp, #28]
   137fc:	mov	r2, r7
   13800:	str	ip, [sp, #12]
   13804:	ldr	ip, [r4, #44]	; 0x2c
   13808:	str	ip, [sp, #16]
   1380c:	bl	126e4 <close_stdout@@Base+0x74c>
   13810:	add	r1, r0, #1
   13814:	mov	fp, r0
   13818:	str	r1, [sp, #24]
   1381c:	mov	r0, r1
   13820:	bl	14648 <close_stdout@@Base+0x26b0>
   13824:	ldr	lr, [r4]
   13828:	str	sl, [sp, #4]
   1382c:	mov	r3, r6
   13830:	str	r9, [sp, #8]
   13834:	mov	r2, r7
   13838:	str	lr, [sp]
   1383c:	ldr	lr, [r4, #40]	; 0x28
   13840:	ldr	r1, [sp, #24]
   13844:	str	lr, [sp, #12]
   13848:	ldr	lr, [r4, #44]	; 0x2c
   1384c:	str	lr, [sp, #16]
   13850:	str	r0, [sp, #24]
   13854:	bl	126e4 <close_stdout@@Base+0x74c>
   13858:	ldr	r3, [sp, #28]
   1385c:	cmp	r5, #0
   13860:	str	r3, [r8]
   13864:	ldr	ip, [sp, #24]
   13868:	strne	fp, [r5]
   1386c:	mov	r0, ip
   13870:	add	sp, sp, #36	; 0x24
   13874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13878:	ldr	r4, [pc, #8]	; 13888 <close_stdout@@Base+0x18f0>
   1387c:	add	r4, pc, r4
   13880:	add	r4, r4, #256	; 0x100
   13884:	b	137c0 <close_stdout@@Base+0x1828>
   13888:	andeq	r3, r1, r8, lsl r9
   1388c:	mov	r3, r2
   13890:	mov	r2, #0
   13894:	b	137a4 <close_stdout@@Base+0x180c>
   13898:	ldr	r2, [pc, #152]	; 13938 <close_stdout@@Base+0x19a0>
   1389c:	push	{r3, r4, r5, r6, r7, lr}
   138a0:	add	r2, pc, r2
   138a4:	ldr	r3, [pc, #144]	; 1393c <close_stdout@@Base+0x19a4>
   138a8:	ldr	r6, [r2]
   138ac:	add	r3, pc, r3
   138b0:	cmp	r6, #1
   138b4:	ldr	r7, [r3]
   138b8:	movhi	r4, #1
   138bc:	movhi	r5, r7
   138c0:	bls	138dc <close_stdout@@Base+0x1944>
   138c4:	ldr	r0, [r5, #12]
   138c8:	add	r4, r4, #1
   138cc:	bl	10f8c <free@plt>
   138d0:	cmp	r4, r6
   138d4:	add	r5, r5, #8
   138d8:	bne	138c4 <close_stdout@@Base+0x192c>
   138dc:	ldr	r4, [pc, #92]	; 13940 <close_stdout@@Base+0x19a8>
   138e0:	ldr	r0, [r7, #4]
   138e4:	add	r4, pc, r4
   138e8:	cmp	r0, r4
   138ec:	beq	13904 <close_stdout@@Base+0x196c>
   138f0:	bl	10f8c <free@plt>
   138f4:	ldr	r3, [pc, #72]	; 13944 <close_stdout@@Base+0x19ac>
   138f8:	mov	r2, #256	; 0x100
   138fc:	add	r3, pc, r3
   13900:	stmib	r3, {r2, r4}
   13904:	ldr	r4, [pc, #60]	; 13948 <close_stdout@@Base+0x19b0>
   13908:	add	r4, pc, r4
   1390c:	add	r5, r4, #4
   13910:	cmp	r7, r5
   13914:	beq	13924 <close_stdout@@Base+0x198c>
   13918:	mov	r0, r7
   1391c:	bl	10f8c <free@plt>
   13920:	str	r5, [r4]
   13924:	ldr	r3, [pc, #32]	; 1394c <close_stdout@@Base+0x19b4>
   13928:	mov	r2, #1
   1392c:	add	r3, pc, r3
   13930:	str	r2, [r3]
   13934:	pop	{r3, r4, r5, r6, r7, pc}
   13938:	muleq	r1, r4, r8
   1393c:			; <UNDEFINED> instruction: 0x000138bc
   13940:			; <UNDEFINED> instruction: 0x000138b0
   13944:	andeq	r3, r1, ip, ror #16
   13948:	andeq	r3, r1, r0, ror #16
   1394c:	andeq	r3, r1, r8, lsl #16
   13950:	ldr	r3, [pc, #12]	; 13964 <close_stdout@@Base+0x19cc>
   13954:	mvn	r2, #0
   13958:	add	r3, pc, r3
   1395c:	add	r3, r3, #256	; 0x100
   13960:	b	1340c <close_stdout@@Base+0x1474>
   13964:	andeq	r3, r1, ip, lsr r8
   13968:	ldr	r3, [pc, #8]	; 13978 <close_stdout@@Base+0x19e0>
   1396c:	add	r3, pc, r3
   13970:	add	r3, r3, #256	; 0x100
   13974:	b	1340c <close_stdout@@Base+0x1474>
   13978:	andeq	r3, r1, r8, lsr #16
   1397c:	mov	r1, r0
   13980:	mov	r0, #0
   13984:	b	13950 <close_stdout@@Base+0x19b8>
   13988:	mov	r2, r1
   1398c:	mov	r1, r0
   13990:	mov	r0, #0
   13994:	b	13968 <close_stdout@@Base+0x19d0>
   13998:	ldr	r3, [pc, #92]	; 139fc <close_stdout@@Base+0x1a64>
   1399c:	ldr	ip, [pc, #92]	; 13a00 <close_stdout@@Base+0x1a68>
   139a0:	add	r3, pc, r3
   139a4:	push	{r4, r5, r6, r7, lr}
   139a8:	sub	sp, sp, #60	; 0x3c
   139ac:	ldr	r4, [r3, ip]
   139b0:	add	r5, sp, #4
   139b4:	mov	r7, r2
   139b8:	mov	r6, r0
   139bc:	mov	r0, r5
   139c0:	ldr	r3, [r4]
   139c4:	str	r3, [sp, #52]	; 0x34
   139c8:	bl	1252c <close_stdout@@Base+0x594>
   139cc:	mov	r3, r5
   139d0:	mvn	r2, #0
   139d4:	mov	r0, r6
   139d8:	mov	r1, r7
   139dc:	bl	1340c <close_stdout@@Base+0x1474>
   139e0:	ldr	r2, [sp, #52]	; 0x34
   139e4:	ldr	r3, [r4]
   139e8:	cmp	r2, r3
   139ec:	bne	139f8 <close_stdout@@Base+0x1a60>
   139f0:	add	sp, sp, #60	; 0x3c
   139f4:	pop	{r4, r5, r6, r7, pc}
   139f8:	bl	10fd4 <__stack_chk_fail@plt>
   139fc:	andeq	r3, r1, r8, asr r6
   13a00:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13a04:	ldr	ip, [pc, #96]	; 13a6c <close_stdout@@Base+0x1ad4>
   13a08:	push	{r4, r5, r6, r7, r8, lr}
   13a0c:	add	ip, pc, ip
   13a10:	ldr	lr, [pc, #88]	; 13a70 <close_stdout@@Base+0x1ad8>
   13a14:	sub	sp, sp, #56	; 0x38
   13a18:	mov	r8, r3
   13a1c:	add	r5, sp, #4
   13a20:	mov	r7, r2
   13a24:	mov	r6, r0
   13a28:	ldr	r4, [ip, lr]
   13a2c:	mov	r0, r5
   13a30:	ldr	r3, [r4]
   13a34:	str	r3, [sp, #52]	; 0x34
   13a38:	bl	1252c <close_stdout@@Base+0x594>
   13a3c:	mov	r2, r8
   13a40:	mov	r3, r5
   13a44:	mov	r0, r6
   13a48:	mov	r1, r7
   13a4c:	bl	1340c <close_stdout@@Base+0x1474>
   13a50:	ldr	r2, [sp, #52]	; 0x34
   13a54:	ldr	r3, [r4]
   13a58:	cmp	r2, r3
   13a5c:	bne	13a68 <close_stdout@@Base+0x1ad0>
   13a60:	add	sp, sp, #56	; 0x38
   13a64:	pop	{r4, r5, r6, r7, r8, pc}
   13a68:	bl	10fd4 <__stack_chk_fail@plt>
   13a6c:	andeq	r3, r1, ip, ror #11
   13a70:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13a74:	mov	r2, r1
   13a78:	mov	r1, r0
   13a7c:	mov	r0, #0
   13a80:	b	13998 <close_stdout@@Base+0x1a00>
   13a84:	mov	ip, r1
   13a88:	mov	r3, r2
   13a8c:	mov	r1, r0
   13a90:	mov	r2, ip
   13a94:	mov	r0, #0
   13a98:	b	13a04 <close_stdout@@Base+0x1a6c>
   13a9c:	push	{r4, r5, r6, r7, r8, lr}
   13aa0:	mov	r5, r2
   13aa4:	ldr	lr, [pc, #136]	; 13b34 <close_stdout@@Base+0x1b9c>
   13aa8:	mov	r7, r0
   13aac:	mov	r6, r1
   13ab0:	ldr	r4, [pc, #128]	; 13b38 <close_stdout@@Base+0x1ba0>
   13ab4:	add	lr, pc, lr
   13ab8:	sub	sp, sp, #56	; 0x38
   13abc:	add	lr, lr, #256	; 0x100
   13ac0:	ldr	r8, [pc, #116]	; 13b3c <close_stdout@@Base+0x1ba4>
   13ac4:	add	r4, pc, r4
   13ac8:	add	ip, sp, #4
   13acc:	ldm	lr!, {r0, r1, r2, r3}
   13ad0:	ldr	r4, [r4, r8]
   13ad4:	stmia	ip!, {r0, r1, r2, r3}
   13ad8:	ldm	lr!, {r0, r1, r2, r3}
   13adc:	ldr	r8, [r4]
   13ae0:	stmia	ip!, {r0, r1, r2, r3}
   13ae4:	ldm	lr, {r0, r1, r2, r3}
   13ae8:	str	r8, [sp, #52]	; 0x34
   13aec:	stm	ip, {r0, r1, r2, r3}
   13af0:	mov	r1, r5
   13af4:	add	r5, sp, #4
   13af8:	mov	r2, #1
   13afc:	mov	r0, r5
   13b00:	bl	13668 <close_stdout@@Base+0x16d0>
   13b04:	mov	r2, r6
   13b08:	mov	r3, r5
   13b0c:	mov	r1, r7
   13b10:	mov	r0, #0
   13b14:	bl	1340c <close_stdout@@Base+0x1474>
   13b18:	ldr	r2, [sp, #52]	; 0x34
   13b1c:	ldr	r3, [r4]
   13b20:	cmp	r2, r3
   13b24:	bne	13b30 <close_stdout@@Base+0x1b98>
   13b28:	add	sp, sp, #56	; 0x38
   13b2c:	pop	{r4, r5, r6, r7, r8, pc}
   13b30:	bl	10fd4 <__stack_chk_fail@plt>
   13b34:	andeq	r3, r1, r0, ror #13
   13b38:	andeq	r3, r1, r4, lsr r5
   13b3c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13b40:	mov	r2, r1
   13b44:	mvn	r1, #0
   13b48:	b	13a9c <close_stdout@@Base+0x1b04>
   13b4c:	mov	r1, #58	; 0x3a
   13b50:	b	13b40 <close_stdout@@Base+0x1ba8>
   13b54:	mov	r2, #58	; 0x3a
   13b58:	b	13a9c <close_stdout@@Base+0x1b04>
   13b5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b60:	mov	r5, r2
   13b64:	ldr	lr, [pc, #144]	; 13bfc <close_stdout@@Base+0x1c64>
   13b68:	mov	r8, r0
   13b6c:	mov	r9, r1
   13b70:	mov	r7, r3
   13b74:	add	lr, pc, lr
   13b78:	ldr	r4, [pc, #128]	; 13c00 <close_stdout@@Base+0x1c68>
   13b7c:	add	lr, lr, #256	; 0x100
   13b80:	sub	sp, sp, #56	; 0x38
   13b84:	ldr	sl, [pc, #120]	; 13c04 <close_stdout@@Base+0x1c6c>
   13b88:	add	r4, pc, r4
   13b8c:	ldm	lr!, {r0, r1, r2, r3}
   13b90:	add	ip, sp, #4
   13b94:	ldr	r4, [r4, sl]
   13b98:	ldr	r6, [sp, #88]	; 0x58
   13b9c:	stmia	ip!, {r0, r1, r2, r3}
   13ba0:	ldm	lr!, {r0, r1, r2, r3}
   13ba4:	ldr	sl, [r4]
   13ba8:	stmia	ip!, {r0, r1, r2, r3}
   13bac:	ldm	lr, {r0, r1, r2, r3}
   13bb0:	str	sl, [sp, #52]	; 0x34
   13bb4:	stm	ip, {r0, r1, r2, r3}
   13bb8:	mov	r2, r5
   13bbc:	add	r5, sp, #4
   13bc0:	mov	r1, r9
   13bc4:	mov	r0, r5
   13bc8:	bl	136dc <close_stdout@@Base+0x1744>
   13bcc:	mov	r2, r6
   13bd0:	mov	r3, r5
   13bd4:	mov	r0, r8
   13bd8:	mov	r1, r7
   13bdc:	bl	1340c <close_stdout@@Base+0x1474>
   13be0:	ldr	r2, [sp, #52]	; 0x34
   13be4:	ldr	r3, [r4]
   13be8:	cmp	r2, r3
   13bec:	bne	13bf8 <close_stdout@@Base+0x1c60>
   13bf0:	add	sp, sp, #56	; 0x38
   13bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13bf8:	bl	10fd4 <__stack_chk_fail@plt>
   13bfc:	andeq	r3, r1, r0, lsr #12
   13c00:	andeq	r3, r1, r0, ror r4
   13c04:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13c08:	push	{lr}		; (str lr, [sp, #-4]!)
   13c0c:	sub	sp, sp, #12
   13c10:	mvn	ip, #0
   13c14:	str	ip, [sp]
   13c18:	bl	13b5c <close_stdout@@Base+0x1bc4>
   13c1c:	add	sp, sp, #12
   13c20:	pop	{pc}		; (ldr pc, [sp], #4)
   13c24:	mov	ip, r1
   13c28:	mov	r3, r2
   13c2c:	mov	r1, r0
   13c30:	mov	r2, ip
   13c34:	mov	r0, #0
   13c38:	b	13c08 <close_stdout@@Base+0x1c70>
   13c3c:	push	{lr}		; (str lr, [sp, #-4]!)
   13c40:	sub	sp, sp, #12
   13c44:	mov	lr, r1
   13c48:	mov	ip, r2
   13c4c:	mov	r1, r0
   13c50:	str	r3, [sp]
   13c54:	mov	r2, lr
   13c58:	mov	r3, ip
   13c5c:	mov	r0, #0
   13c60:	bl	13b5c <close_stdout@@Base+0x1bc4>
   13c64:	add	sp, sp, #12
   13c68:	pop	{pc}		; (ldr pc, [sp], #4)
   13c6c:	ldr	r3, [pc, #12]	; 13c80 <close_stdout@@Base+0x1ce8>
   13c70:	ldr	ip, [pc, #12]	; 13c84 <close_stdout@@Base+0x1cec>
   13c74:	add	r3, pc, r3
   13c78:	ldr	r3, [r3, ip]
   13c7c:	b	1340c <close_stdout@@Base+0x1474>
   13c80:	andeq	r3, r1, r4, lsl #7
   13c84:	andeq	r0, r0, ip, ror #1
   13c88:	mov	r2, r1
   13c8c:	mov	r1, r0
   13c90:	mov	r0, #0
   13c94:	b	13c6c <close_stdout@@Base+0x1cd4>
   13c98:	mvn	r2, #0
   13c9c:	b	13c6c <close_stdout@@Base+0x1cd4>
   13ca0:	mov	r1, r0
   13ca4:	mov	r0, #0
   13ca8:	b	13c98 <close_stdout@@Base+0x1d00>
   13cac:	mov	r3, #0
   13cb0:	str	r3, [r0]
   13cb4:	str	r3, [r0, #4]
   13cb8:	bx	lr
   13cbc:	ldr	ip, [pc, #560]	; 13ef4 <close_stdout@@Base+0x1f5c>
   13cc0:	cmp	r2, #0
   13cc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cc8:	add	ip, pc, ip
   13ccc:	ldr	r4, [pc, #548]	; 13ef8 <close_stdout@@Base+0x1f60>
   13cd0:	mov	r6, r0
   13cd4:	mov	r0, ip
   13cd8:	sub	sp, sp, #52	; 0x34
   13cdc:	mov	r8, r3
   13ce0:	addne	r5, r1, r2
   13ce4:	ldr	r9, [ip, r4]
   13ce8:	mov	r3, #0
   13cec:	movne	r4, #1
   13cf0:	str	r3, [sp, #12]
   13cf4:	str	r3, [sp, #16]
   13cf8:	ldr	r0, [r9]
   13cfc:	str	r3, [sp, #20]
   13d00:	str	r3, [sp, #24]
   13d04:	str	r0, [sp, #44]	; 0x2c
   13d08:	addne	r0, sp, #12
   13d0c:	str	r3, [sp, #28]
   13d10:	str	r3, [sp, #32]
   13d14:	str	r3, [sp, #36]	; 0x24
   13d18:	str	r3, [sp, #40]	; 0x28
   13d1c:	beq	13d40 <close_stdout@@Base+0x1da8>
   13d20:	ldrb	r3, [r1], #1
   13d24:	and	ip, r3, #31
   13d28:	cmp	r1, r5
   13d2c:	lsr	r3, r3, #5
   13d30:	ldr	r2, [r0, r3, lsl #2]
   13d34:	orr	r2, r2, r4, lsl ip
   13d38:	str	r2, [r0, r3, lsl #2]
   13d3c:	bne	13d20 <close_stdout@@Base+0x1d88>
   13d40:	ldr	r3, [r6, #4]
   13d44:	ldr	r2, [r6, #8]
   13d48:	cmp	r3, r2
   13d4c:	bcs	13ee0 <close_stdout@@Base+0x1f48>
   13d50:	add	r2, r3, #1
   13d54:	str	r2, [r6, #4]
   13d58:	ldrb	r4, [r3]
   13d5c:	lsr	r2, r4, #5
   13d60:	add	r0, sp, #48	; 0x30
   13d64:	and	r3, r4, #31
   13d68:	add	r2, r0, r2, lsl #2
   13d6c:	ldr	r2, [r2, #-36]	; 0xffffffdc
   13d70:	lsr	r3, r2, r3
   13d74:	tst	r3, #1
   13d78:	beq	13db4 <close_stdout@@Base+0x1e1c>
   13d7c:	ldmib	r6, {r2, r3}
   13d80:	cmp	r2, r3
   13d84:	bcs	13ec4 <close_stdout@@Base+0x1f2c>
   13d88:	add	r3, r2, #1
   13d8c:	str	r3, [r6, #4]
   13d90:	ldrb	r4, [r2]
   13d94:	lsr	r2, r4, #5
   13d98:	add	r1, sp, #48	; 0x30
   13d9c:	and	r3, r4, #31
   13da0:	add	r2, r1, r2, lsl #2
   13da4:	ldr	r2, [r2, #-36]	; 0xffffffdc
   13da8:	lsr	r3, r2, r3
   13dac:	tst	r3, #1
   13db0:	bne	13d7c <close_stdout@@Base+0x1de4>
   13db4:	movw	fp, #43689	; 0xaaa9
   13db8:	ldr	r1, [r8, #4]
   13dbc:	movt	fp, #43690	; 0xaaaa
   13dc0:	ldr	sl, [r8]
   13dc4:	mov	r5, #0
   13dc8:	b	13e14 <close_stdout@@Base+0x1e7c>
   13dcc:	cmp	r7, #0
   13dd0:	bne	13e60 <close_stdout@@Base+0x1ec8>
   13dd4:	lsr	r2, r4, #5
   13dd8:	add	r0, sp, #48	; 0x30
   13ddc:	and	r3, r4, #31
   13de0:	add	r2, r0, r2, lsl #2
   13de4:	ldr	r2, [r2, #-36]	; 0xffffffdc
   13de8:	lsr	r3, r2, r3
   13dec:	tst	r3, #1
   13df0:	bne	13ea4 <close_stdout@@Base+0x1f0c>
   13df4:	strb	r4, [r1, r5]
   13df8:	add	r5, r5, #1
   13dfc:	ldmib	r6, {r2, r3}
   13e00:	cmp	r2, r3
   13e04:	bcs	13eac <close_stdout@@Base+0x1f14>
   13e08:	add	r3, r2, #1
   13e0c:	str	r3, [r6, #4]
   13e10:	ldrb	r4, [r2]
   13e14:	rsbs	r3, r5, #1
   13e18:	lsr	r7, r4, #31
   13e1c:	movcc	r3, #0
   13e20:	tst	r3, r7
   13e24:	bne	13e88 <close_stdout@@Base+0x1ef0>
   13e28:	cmp	r5, sl
   13e2c:	bne	13dcc <close_stdout@@Base+0x1e34>
   13e30:	cmp	r1, #0
   13e34:	beq	13e78 <close_stdout@@Base+0x1ee0>
   13e38:	cmp	r5, fp
   13e3c:	bhi	13ed8 <close_stdout@@Base+0x1f40>
   13e40:	add	sl, r5, #1
   13e44:	add	sl, r5, sl, lsr #1
   13e48:	mov	r0, r1
   13e4c:	mov	r1, sl
   13e50:	bl	146a0 <close_stdout@@Base+0x2708>
   13e54:	cmp	r7, #0
   13e58:	mov	r1, r0
   13e5c:	beq	13dd4 <close_stdout@@Base+0x1e3c>
   13e60:	mov	r3, #0
   13e64:	strb	r3, [r1, r5]
   13e68:	str	r1, [r8, #4]
   13e6c:	mov	r0, r5
   13e70:	str	sl, [r8]
   13e74:	b	13e8c <close_stdout@@Base+0x1ef4>
   13e78:	cmp	r3, #0
   13e7c:	moveq	sl, r5
   13e80:	movne	sl, #64	; 0x40
   13e84:	b	13e48 <close_stdout@@Base+0x1eb0>
   13e88:	mvn	r0, #0
   13e8c:	ldr	r2, [sp, #44]	; 0x2c
   13e90:	ldr	r3, [r9]
   13e94:	cmp	r2, r3
   13e98:	bne	13edc <close_stdout@@Base+0x1f44>
   13e9c:	add	sp, sp, #52	; 0x34
   13ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea4:	strb	r7, [r1, r5]
   13ea8:	b	13e68 <close_stdout@@Base+0x1ed0>
   13eac:	mov	r0, r6
   13eb0:	str	r1, [sp, #4]
   13eb4:	bl	1116c <__uflow@plt>
   13eb8:	ldr	r1, [sp, #4]
   13ebc:	mov	r4, r0
   13ec0:	b	13e14 <close_stdout@@Base+0x1e7c>
   13ec4:	mov	r0, r6
   13ec8:	bl	1116c <__uflow@plt>
   13ecc:	subs	r4, r0, #0
   13ed0:	blt	13db4 <close_stdout@@Base+0x1e1c>
   13ed4:	b	13d94 <close_stdout@@Base+0x1dfc>
   13ed8:	bl	1485c <close_stdout@@Base+0x28c4>
   13edc:	bl	10fd4 <__stack_chk_fail@plt>
   13ee0:	mov	r0, r6
   13ee4:	bl	1116c <__uflow@plt>
   13ee8:	subs	r4, r0, #0
   13eec:	blt	13db4 <close_stdout@@Base+0x1e1c>
   13ef0:	b	13d5c <close_stdout@@Base+0x1dc4>
   13ef4:	andeq	r3, r1, r0, lsr r3
   13ef8:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f00:	sub	sp, sp, #44	; 0x2c
   13f04:	ldr	ip, [pc, #404]	; 140a0 <close_stdout@@Base+0x2108>
   13f08:	mov	fp, r3
   13f0c:	stm	sp, {r0, r2}
   13f10:	cmp	r1, #0
   13f14:	ldr	lr, [pc, #392]	; 140a4 <close_stdout@@Base+0x210c>
   13f18:	add	ip, pc, ip
   13f1c:	ldr	r2, [sp, #80]	; 0x50
   13f20:	mov	r3, ip
   13f24:	ldr	r3, [sp, #84]	; 0x54
   13f28:	str	r2, [sp, #20]
   13f2c:	ldr	lr, [ip, lr]
   13f30:	str	r3, [sp, #16]
   13f34:	ldr	r3, [lr]
   13f38:	str	lr, [sp, #12]
   13f3c:	str	r3, [sp, #36]	; 0x24
   13f40:	beq	14080 <close_stdout@@Base+0x20e8>
   13f44:	add	r5, r1, #1
   13f48:	cmn	r5, #-1073741823	; 0xc0000001
   13f4c:	bhi	14098 <close_stdout@@Base+0x2100>
   13f50:	lsl	r4, r5, #2
   13f54:	mov	r0, r4
   13f58:	add	r8, sp, #28
   13f5c:	bl	14648 <close_stdout@@Base+0x26b0>
   13f60:	mov	r6, r0
   13f64:	mov	r0, r4
   13f68:	bl	14648 <close_stdout@@Base+0x26b0>
   13f6c:	movw	r1, #43689	; 0xaaa9
   13f70:	str	r1, [sp, #8]
   13f74:	mov	r4, #0
   13f78:	mov	r7, r0
   13f7c:	mov	r0, r8
   13f80:	bl	13cac <close_stdout@@Base+0x1d14>
   13f84:	ldr	r2, [sp, #8]
   13f88:	movt	r2, #10922	; 0x2aaa
   13f8c:	str	r2, [sp, #8]
   13f90:	b	13ff8 <close_stdout@@Base+0x2060>
   13f94:	ldr	r3, [sp, #8]
   13f98:	cmp	r5, r3
   13f9c:	bhi	14098 <close_stdout@@Base+0x2100>
   13fa0:	add	r2, r5, #1
   13fa4:	add	r5, r5, r2, lsr #1
   13fa8:	lsl	r9, r5, #2
   13fac:	mov	r0, r6
   13fb0:	mov	r1, r9
   13fb4:	bl	146a0 <close_stdout@@Base+0x2708>
   13fb8:	mov	r1, r9
   13fbc:	mov	r6, r0
   13fc0:	mov	r0, r7
   13fc4:	bl	146a0 <close_stdout@@Base+0x2708>
   13fc8:	mov	r7, r0
   13fcc:	cmn	sl, #1
   13fd0:	beq	14030 <close_stdout@@Base+0x2098>
   13fd4:	add	r9, sl, #1
   13fd8:	mov	r0, r9
   13fdc:	bl	14648 <close_stdout@@Base+0x26b0>
   13fe0:	str	sl, [r7, r4, lsl #2]
   13fe4:	mov	r2, r9
   13fe8:	ldr	r1, [sp, #32]
   13fec:	bl	10fa4 <memcpy@plt>
   13ff0:	str	r0, [r6, r4, lsl #2]
   13ff4:	add	r4, r4, #1
   13ff8:	ldm	sp, {r0, r1}
   13ffc:	mov	r2, fp
   14000:	mov	r3, r8
   14004:	bl	13cbc <close_stdout@@Base+0x1d24>
   14008:	cmp	r4, r5
   1400c:	mov	sl, r0
   14010:	bcc	13fcc <close_stdout@@Base+0x2034>
   14014:	cmp	r6, #0
   14018:	bne	13f94 <close_stdout@@Base+0x1ffc>
   1401c:	cmp	r5, #0
   14020:	moveq	r9, #64	; 0x40
   14024:	moveq	r5, #16
   14028:	beq	13fac <close_stdout@@Base+0x2014>
   1402c:	b	13fa8 <close_stdout@@Base+0x2010>
   14030:	mov	r3, #0
   14034:	str	r3, [r6, r4, lsl #2]
   14038:	str	r3, [r7, r4, lsl #2]
   1403c:	ldr	r0, [sp, #32]
   14040:	bl	10f8c <free@plt>
   14044:	ldr	r1, [sp, #16]
   14048:	ldr	r2, [sp, #20]
   1404c:	cmp	r1, #0
   14050:	ldrne	r3, [sp, #16]
   14054:	str	r6, [r2]
   14058:	strne	r7, [r3]
   1405c:	beq	1408c <close_stdout@@Base+0x20f4>
   14060:	ldr	r1, [sp, #12]
   14064:	mov	r0, r4
   14068:	ldr	r2, [sp, #36]	; 0x24
   1406c:	ldr	r3, [r1]
   14070:	cmp	r2, r3
   14074:	bne	1409c <close_stdout@@Base+0x2104>
   14078:	add	sp, sp, #44	; 0x2c
   1407c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14080:	mov	r4, #256	; 0x100
   14084:	mov	r5, #64	; 0x40
   14088:	b	13f54 <close_stdout@@Base+0x1fbc>
   1408c:	mov	r0, r7
   14090:	bl	10f8c <free@plt>
   14094:	b	14060 <close_stdout@@Base+0x20c8>
   14098:	bl	1485c <close_stdout@@Base+0x28c4>
   1409c:	bl	10fd4 <__stack_chk_fail@plt>
   140a0:	andeq	r3, r1, r0, ror #1
   140a4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   140a8:	push	{r4, r5, r6, r7, lr}
   140ac:	cmp	r1, #0
   140b0:	sub	sp, sp, #36	; 0x24
   140b4:	ldr	r7, [pc, #896]	; 1443c <close_stdout@@Base+0x24a4>
   140b8:	mov	ip, r3
   140bc:	mov	r5, r0
   140c0:	add	r7, pc, r7
   140c4:	ldr	r4, [sp, #56]	; 0x38
   140c8:	ldr	r6, [sp, #60]	; 0x3c
   140cc:	beq	14410 <close_stdout@@Base+0x2478>
   140d0:	str	r2, [sp]
   140d4:	mov	r3, r1
   140d8:	ldr	r2, [pc, #864]	; 14440 <close_stdout@@Base+0x24a8>
   140dc:	mov	r1, #1
   140e0:	str	ip, [sp, #4]
   140e4:	add	r2, pc, r2
   140e8:	bl	11148 <__fprintf_chk@plt>
   140ec:	ldr	r1, [pc, #848]	; 14444 <close_stdout@@Base+0x24ac>
   140f0:	mov	r2, #5
   140f4:	mov	r0, #0
   140f8:	add	r1, pc, r1
   140fc:	bl	10fc8 <dcgettext@plt>
   14100:	ldr	r2, [pc, #832]	; 14448 <close_stdout@@Base+0x24b0>
   14104:	movw	ip, #2013	; 0x7dd
   14108:	mov	r1, #1
   1410c:	ldr	r2, [r7, r2]
   14110:	str	ip, [sp]
   14114:	mov	r3, r0
   14118:	mov	r0, r5
   1411c:	bl	11148 <__fprintf_chk@plt>
   14120:	ldr	r1, [pc, #804]	; 1444c <close_stdout@@Base+0x24b4>
   14124:	mov	r0, #0
   14128:	mov	r2, #5
   1412c:	add	r1, pc, r1
   14130:	bl	10fc8 <dcgettext@plt>
   14134:	mov	r1, r5
   14138:	bl	10f50 <fputs_unlocked@plt>
   1413c:	cmp	r6, #9
   14140:	addls	pc, pc, r6, lsl #2
   14144:	b	1442c <close_stdout@@Base+0x2494>
   14148:	b	141dc <close_stdout@@Base+0x2244>
   1414c:	b	141e0 <close_stdout@@Base+0x2248>
   14150:	b	14210 <close_stdout@@Base+0x2278>
   14154:	b	14244 <close_stdout@@Base+0x22ac>
   14158:	b	14280 <close_stdout@@Base+0x22e8>
   1415c:	b	142c0 <close_stdout@@Base+0x2328>
   14160:	b	14308 <close_stdout@@Base+0x2370>
   14164:	b	14358 <close_stdout@@Base+0x23c0>
   14168:	b	143b0 <close_stdout@@Base+0x2418>
   1416c:	b	14170 <close_stdout@@Base+0x21d8>
   14170:	ldr	r1, [pc, #728]	; 14450 <close_stdout@@Base+0x24b8>
   14174:	mov	r0, #0
   14178:	add	r1, pc, r1
   1417c:	mov	r2, #5
   14180:	bl	10fc8 <dcgettext@plt>
   14184:	ldm	r4, {r3, ip}
   14188:	mov	r1, #1
   1418c:	str	ip, [sp]
   14190:	ldr	ip, [r4, #8]
   14194:	str	ip, [sp, #4]
   14198:	ldr	ip, [r4, #12]
   1419c:	str	ip, [sp, #8]
   141a0:	ldr	ip, [r4, #16]
   141a4:	str	ip, [sp, #12]
   141a8:	ldr	ip, [r4, #20]
   141ac:	str	ip, [sp, #16]
   141b0:	ldr	ip, [r4, #24]
   141b4:	str	ip, [sp, #20]
   141b8:	ldr	ip, [r4, #28]
   141bc:	str	ip, [sp, #24]
   141c0:	ldr	ip, [r4, #32]
   141c4:	str	ip, [sp, #28]
   141c8:	mov	r2, r0
   141cc:	mov	r0, r5
   141d0:	bl	11148 <__fprintf_chk@plt>
   141d4:	add	sp, sp, #36	; 0x24
   141d8:	pop	{r4, r5, r6, r7, pc}
   141dc:	bl	111b4 <abort@plt>
   141e0:	ldr	r1, [pc, #620]	; 14454 <close_stdout@@Base+0x24bc>
   141e4:	mov	r2, #5
   141e8:	mov	r0, #0
   141ec:	add	r1, pc, r1
   141f0:	bl	10fc8 <dcgettext@plt>
   141f4:	ldr	r3, [r4]
   141f8:	mov	r1, #1
   141fc:	mov	r2, r0
   14200:	mov	r0, r5
   14204:	add	sp, sp, #36	; 0x24
   14208:	pop	{r4, r5, r6, r7, lr}
   1420c:	b	11148 <__fprintf_chk@plt>
   14210:	ldr	r1, [pc, #576]	; 14458 <close_stdout@@Base+0x24c0>
   14214:	mov	r2, #5
   14218:	mov	r0, #0
   1421c:	add	r1, pc, r1
   14220:	bl	10fc8 <dcgettext@plt>
   14224:	ldm	r4, {r3, ip}
   14228:	mov	r1, #1
   1422c:	str	ip, [sp, #56]	; 0x38
   14230:	mov	r2, r0
   14234:	mov	r0, r5
   14238:	add	sp, sp, #36	; 0x24
   1423c:	pop	{r4, r5, r6, r7, lr}
   14240:	b	11148 <__fprintf_chk@plt>
   14244:	ldr	r1, [pc, #528]	; 1445c <close_stdout@@Base+0x24c4>
   14248:	mov	r2, #5
   1424c:	mov	r0, #0
   14250:	add	r1, pc, r1
   14254:	bl	10fc8 <dcgettext@plt>
   14258:	ldm	r4, {r3, ip}
   1425c:	mov	r1, #1
   14260:	str	ip, [sp, #56]	; 0x38
   14264:	ldr	ip, [r4, #8]
   14268:	str	ip, [sp, #60]	; 0x3c
   1426c:	mov	r2, r0
   14270:	mov	r0, r5
   14274:	add	sp, sp, #36	; 0x24
   14278:	pop	{r4, r5, r6, r7, lr}
   1427c:	b	11148 <__fprintf_chk@plt>
   14280:	ldr	r1, [pc, #472]	; 14460 <close_stdout@@Base+0x24c8>
   14284:	mov	r2, #5
   14288:	mov	r0, #0
   1428c:	add	r1, pc, r1
   14290:	bl	10fc8 <dcgettext@plt>
   14294:	ldm	r4, {r3, ip}
   14298:	mov	r1, #1
   1429c:	str	ip, [sp]
   142a0:	ldr	ip, [r4, #8]
   142a4:	str	ip, [sp, #4]
   142a8:	ldr	ip, [r4, #12]
   142ac:	str	ip, [sp, #8]
   142b0:	mov	r2, r0
   142b4:	mov	r0, r5
   142b8:	bl	11148 <__fprintf_chk@plt>
   142bc:	b	141d4 <close_stdout@@Base+0x223c>
   142c0:	ldr	r1, [pc, #412]	; 14464 <close_stdout@@Base+0x24cc>
   142c4:	mov	r2, #5
   142c8:	mov	r0, #0
   142cc:	add	r1, pc, r1
   142d0:	bl	10fc8 <dcgettext@plt>
   142d4:	ldm	r4, {r3, ip}
   142d8:	mov	r1, #1
   142dc:	str	ip, [sp]
   142e0:	ldr	ip, [r4, #8]
   142e4:	str	ip, [sp, #4]
   142e8:	ldr	ip, [r4, #12]
   142ec:	str	ip, [sp, #8]
   142f0:	ldr	ip, [r4, #16]
   142f4:	str	ip, [sp, #12]
   142f8:	mov	r2, r0
   142fc:	mov	r0, r5
   14300:	bl	11148 <__fprintf_chk@plt>
   14304:	b	141d4 <close_stdout@@Base+0x223c>
   14308:	ldr	r1, [pc, #344]	; 14468 <close_stdout@@Base+0x24d0>
   1430c:	mov	r2, #5
   14310:	mov	r0, #0
   14314:	add	r1, pc, r1
   14318:	bl	10fc8 <dcgettext@plt>
   1431c:	ldm	r4, {r3, ip}
   14320:	mov	r1, #1
   14324:	str	ip, [sp]
   14328:	ldr	ip, [r4, #8]
   1432c:	str	ip, [sp, #4]
   14330:	ldr	ip, [r4, #12]
   14334:	str	ip, [sp, #8]
   14338:	ldr	ip, [r4, #16]
   1433c:	str	ip, [sp, #12]
   14340:	ldr	ip, [r4, #20]
   14344:	str	ip, [sp, #16]
   14348:	mov	r2, r0
   1434c:	mov	r0, r5
   14350:	bl	11148 <__fprintf_chk@plt>
   14354:	b	141d4 <close_stdout@@Base+0x223c>
   14358:	ldr	r1, [pc, #268]	; 1446c <close_stdout@@Base+0x24d4>
   1435c:	mov	r2, #5
   14360:	mov	r0, #0
   14364:	add	r1, pc, r1
   14368:	bl	10fc8 <dcgettext@plt>
   1436c:	ldm	r4, {r3, ip}
   14370:	mov	r1, #1
   14374:	str	ip, [sp]
   14378:	ldr	ip, [r4, #8]
   1437c:	str	ip, [sp, #4]
   14380:	ldr	ip, [r4, #12]
   14384:	str	ip, [sp, #8]
   14388:	ldr	ip, [r4, #16]
   1438c:	str	ip, [sp, #12]
   14390:	ldr	ip, [r4, #20]
   14394:	str	ip, [sp, #16]
   14398:	ldr	ip, [r4, #24]
   1439c:	str	ip, [sp, #20]
   143a0:	mov	r2, r0
   143a4:	mov	r0, r5
   143a8:	bl	11148 <__fprintf_chk@plt>
   143ac:	b	141d4 <close_stdout@@Base+0x223c>
   143b0:	ldr	r1, [pc, #184]	; 14470 <close_stdout@@Base+0x24d8>
   143b4:	mov	r2, #5
   143b8:	mov	r0, #0
   143bc:	add	r1, pc, r1
   143c0:	bl	10fc8 <dcgettext@plt>
   143c4:	ldm	r4, {r3, ip}
   143c8:	mov	r1, #1
   143cc:	str	ip, [sp]
   143d0:	ldr	ip, [r4, #8]
   143d4:	str	ip, [sp, #4]
   143d8:	ldr	ip, [r4, #12]
   143dc:	str	ip, [sp, #8]
   143e0:	ldr	ip, [r4, #16]
   143e4:	str	ip, [sp, #12]
   143e8:	ldr	ip, [r4, #20]
   143ec:	str	ip, [sp, #16]
   143f0:	ldr	ip, [r4, #24]
   143f4:	str	ip, [sp, #20]
   143f8:	ldr	ip, [r4, #28]
   143fc:	str	ip, [sp, #24]
   14400:	mov	r2, r0
   14404:	mov	r0, r5
   14408:	bl	11148 <__fprintf_chk@plt>
   1440c:	b	141d4 <close_stdout@@Base+0x223c>
   14410:	str	r3, [sp]
   14414:	mov	r3, r2
   14418:	ldr	r2, [pc, #84]	; 14474 <close_stdout@@Base+0x24dc>
   1441c:	mov	r1, #1
   14420:	add	r2, pc, r2
   14424:	bl	11148 <__fprintf_chk@plt>
   14428:	b	140ec <close_stdout@@Base+0x2154>
   1442c:	ldr	r1, [pc, #68]	; 14478 <close_stdout@@Base+0x24e0>
   14430:	mov	r0, #0
   14434:	add	r1, pc, r1
   14438:	b	1417c <close_stdout@@Base+0x21e4>
   1443c:	andeq	r2, r1, r8, lsr pc
   14440:	andeq	r2, r0, r4, lsl r5
   14444:	andeq	r2, r0, r4, lsl r5
   14448:	andeq	r0, r0, r4, lsr #2
   1444c:	andeq	r2, r0, r4, ror #9
   14450:	andeq	r2, r0, r0, ror r6
   14454:	strdeq	r2, [r0], -r0
   14458:	ldrdeq	r2, [r0], -r0
   1445c:			; <UNDEFINED> instruction: 0x000024b4
   14460:	muleq	r0, r4, r4
   14464:	andeq	r2, r0, r4, ror r4
   14468:	andeq	r2, r0, r0, asr r4
   1446c:	andeq	r2, r0, r8, lsr #8
   14470:	strdeq	r2, [r0], -ip
   14474:	andeq	r2, r0, r4, ror #3
   14478:	andeq	r2, r0, r8, ror #7
   1447c:	push	{r4, r5, lr}
   14480:	sub	sp, sp, #12
   14484:	ldr	r5, [sp, #24]
   14488:	ldr	ip, [r5]
   1448c:	cmp	ip, #0
   14490:	beq	144ac <close_stdout@@Base+0x2514>
   14494:	mov	lr, r5
   14498:	mov	ip, #0
   1449c:	ldr	r4, [lr, #4]!
   144a0:	add	ip, ip, #1
   144a4:	cmp	r4, #0
   144a8:	bne	1449c <close_stdout@@Base+0x2504>
   144ac:	stm	sp, {r5, ip}
   144b0:	bl	140a8 <close_stdout@@Base+0x2110>
   144b4:	add	sp, sp, #12
   144b8:	pop	{r4, r5, pc}
   144bc:	push	{r4, r5, r6, r7, lr}
   144c0:	sub	sp, sp, #60	; 0x3c
   144c4:	ldr	r4, [pc, #100]	; 14530 <close_stdout@@Base+0x2598>
   144c8:	mov	ip, #0
   144cc:	ldr	r5, [pc, #96]	; 14534 <close_stdout@@Base+0x259c>
   144d0:	mov	lr, ip
   144d4:	add	r4, pc, r4
   144d8:	ldr	r6, [sp, #80]	; 0x50
   144dc:	ldr	r7, [r4, r5]
   144e0:	add	r5, sp, #12
   144e4:	ldr	r4, [r7]
   144e8:	str	r4, [sp, #52]	; 0x34
   144ec:	ldr	r4, [r6, ip]
   144f0:	cmp	r4, #0
   144f4:	str	r4, [r5, ip]
   144f8:	beq	1450c <close_stdout@@Base+0x2574>
   144fc:	add	lr, lr, #1
   14500:	add	ip, ip, #4
   14504:	cmp	lr, #10
   14508:	bne	144ec <close_stdout@@Base+0x2554>
   1450c:	stm	sp, {r5, lr}
   14510:	bl	140a8 <close_stdout@@Base+0x2110>
   14514:	ldr	r2, [sp, #52]	; 0x34
   14518:	ldr	r3, [r7]
   1451c:	cmp	r2, r3
   14520:	bne	1452c <close_stdout@@Base+0x2594>
   14524:	add	sp, sp, #60	; 0x3c
   14528:	pop	{r4, r5, r6, r7, pc}
   1452c:	bl	10fd4 <__stack_chk_fail@plt>
   14530:	andeq	r2, r1, r4, lsr #22
   14534:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   14538:	push	{r3}		; (str r3, [sp, #-4]!)
   1453c:	push	{r4, lr}
   14540:	sub	sp, sp, #20
   14544:	ldr	lr, [pc, #72]	; 14594 <close_stdout@@Base+0x25fc>
   14548:	add	ip, sp, #32
   1454c:	ldr	r4, [pc, #68]	; 14598 <close_stdout@@Base+0x2600>
   14550:	add	lr, pc, lr
   14554:	ldr	r3, [sp, #28]
   14558:	ldr	r4, [lr, r4]
   1455c:	str	ip, [sp]
   14560:	str	ip, [sp, #8]
   14564:	ldr	ip, [r4]
   14568:	str	ip, [sp, #12]
   1456c:	bl	144bc <close_stdout@@Base+0x2524>
   14570:	ldr	r2, [sp, #12]
   14574:	ldr	r3, [r4]
   14578:	cmp	r2, r3
   1457c:	bne	14590 <close_stdout@@Base+0x25f8>
   14580:	add	sp, sp, #20
   14584:	pop	{r4, lr}
   14588:	add	sp, sp, #4
   1458c:	bx	lr
   14590:	bl	10fd4 <__stack_chk_fail@plt>
   14594:	andeq	r2, r1, r8, lsr #21
   14598:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1459c:	ldr	r1, [pc, #132]	; 14628 <close_stdout@@Base+0x2690>
   145a0:	mov	r2, #5
   145a4:	push	{r4, lr}
   145a8:	add	r1, pc, r1
   145ac:	mov	r0, #0
   145b0:	ldr	r4, [pc, #116]	; 1462c <close_stdout@@Base+0x2694>
   145b4:	bl	10fc8 <dcgettext@plt>
   145b8:	ldr	r2, [pc, #112]	; 14630 <close_stdout@@Base+0x2698>
   145bc:	add	r4, pc, r4
   145c0:	add	r2, pc, r2
   145c4:	mov	r1, r0
   145c8:	mov	r0, #1
   145cc:	bl	11130 <__printf_chk@plt>
   145d0:	ldr	r1, [pc, #92]	; 14634 <close_stdout@@Base+0x269c>
   145d4:	mov	r2, #5
   145d8:	mov	r0, #0
   145dc:	add	r1, pc, r1
   145e0:	bl	10fc8 <dcgettext@plt>
   145e4:	ldr	r2, [pc, #76]	; 14638 <close_stdout@@Base+0x26a0>
   145e8:	ldr	r3, [pc, #76]	; 1463c <close_stdout@@Base+0x26a4>
   145ec:	add	r2, pc, r2
   145f0:	add	r3, pc, r3
   145f4:	mov	r1, r0
   145f8:	mov	r0, #1
   145fc:	bl	11130 <__printf_chk@plt>
   14600:	ldr	r1, [pc, #56]	; 14640 <close_stdout@@Base+0x26a8>
   14604:	mov	r0, #0
   14608:	mov	r2, #5
   1460c:	add	r1, pc, r1
   14610:	bl	10fc8 <dcgettext@plt>
   14614:	ldr	r3, [pc, #40]	; 14644 <close_stdout@@Base+0x26ac>
   14618:	ldr	r3, [r4, r3]
   1461c:	pop	{r4, lr}
   14620:	ldr	r1, [r3]
   14624:	b	10f50 <fputs_unlocked@plt>
   14628:			; <UNDEFINED> instruction: 0x000022b0
   1462c:	andeq	r2, r1, ip, lsr sl
   14630:			; <UNDEFINED> instruction: 0x000022b0
   14634:	andeq	r2, r0, ip, lsr #5
   14638:	andeq	r0, r0, r0, lsr #26
   1463c:	andeq	r0, r0, ip, lsr #26
   14640:	muleq	r0, r0, r2
   14644:	andeq	r0, r0, r0, lsl r1
   14648:	push	{r4, lr}
   1464c:	mov	r4, r0
   14650:	bl	11088 <malloc@plt>
   14654:	rsbs	r3, r0, #1
   14658:	movcc	r3, #0
   1465c:	cmp	r4, #0
   14660:	moveq	r3, #0
   14664:	cmp	r3, #0
   14668:	popeq	{r4, pc}
   1466c:	bl	1485c <close_stdout@@Base+0x28c4>
   14670:	push	{r3, r4, r5, lr}
   14674:	mov	r4, r0
   14678:	mvn	r0, #0
   1467c:	mov	r5, r1
   14680:	bl	14efc <close_stdout@@Base+0x2f64>
   14684:	cmp	r0, r4
   14688:	bcc	14698 <close_stdout@@Base+0x2700>
   1468c:	mul	r0, r4, r5
   14690:	pop	{r3, r4, r5, lr}
   14694:	b	14648 <close_stdout@@Base+0x26b0>
   14698:	bl	1485c <close_stdout@@Base+0x28c4>
   1469c:	b	14648 <close_stdout@@Base+0x26b0>
   146a0:	rsbs	r3, r1, #1
   146a4:	push	{r4, lr}
   146a8:	movcc	r3, #0
   146ac:	cmp	r0, #0
   146b0:	mov	r4, r1
   146b4:	moveq	r3, #0
   146b8:	cmp	r3, #0
   146bc:	bne	146e0 <close_stdout@@Base+0x2748>
   146c0:	bl	10fec <realloc@plt>
   146c4:	rsbs	r3, r0, #1
   146c8:	movcc	r3, #0
   146cc:	cmp	r4, #0
   146d0:	moveq	r3, #0
   146d4:	cmp	r3, #0
   146d8:	popeq	{r4, pc}
   146dc:	bl	1485c <close_stdout@@Base+0x28c4>
   146e0:	bl	10f8c <free@plt>
   146e4:	mov	r0, #0
   146e8:	pop	{r4, pc}
   146ec:	push	{r4, r5, r6, lr}
   146f0:	mov	r5, r1
   146f4:	mov	r6, r0
   146f8:	mov	r1, r2
   146fc:	mvn	r0, #0
   14700:	mov	r4, r2
   14704:	bl	14efc <close_stdout@@Base+0x2f64>
   14708:	cmp	r0, r5
   1470c:	bcc	14720 <close_stdout@@Base+0x2788>
   14710:	mov	r0, r6
   14714:	mul	r1, r5, r4
   14718:	pop	{r4, r5, r6, lr}
   1471c:	b	146a0 <close_stdout@@Base+0x2708>
   14720:	bl	1485c <close_stdout@@Base+0x28c4>
   14724:	push	{r3, r4, r5, r6, r7, lr}
   14728:	subs	r7, r0, #0
   1472c:	mov	r5, r1
   14730:	mov	r6, r2
   14734:	ldr	r4, [r1]
   14738:	beq	14770 <close_stdout@@Base+0x27d8>
   1473c:	movw	r0, #43690	; 0xaaaa
   14740:	mov	r1, r2
   14744:	bfi	r0, r0, #16, #16
   14748:	bl	14efc <close_stdout@@Base+0x2f64>
   1474c:	cmp	r4, r0
   14750:	addcc	r3, r4, #1
   14754:	addcc	r4, r4, r3, lsr #1
   14758:	bcs	14794 <close_stdout@@Base+0x27fc>
   1475c:	str	r4, [r5]
   14760:	mov	r0, r7
   14764:	mul	r1, r6, r4
   14768:	pop	{r3, r4, r5, r6, r7, lr}
   1476c:	b	146a0 <close_stdout@@Base+0x2708>
   14770:	cmp	r4, #0
   14774:	bne	1475c <close_stdout@@Base+0x27c4>
   14778:	mov	r0, #64	; 0x40
   1477c:	mov	r1, r2
   14780:	bl	14efc <close_stdout@@Base+0x2f64>
   14784:	cmp	r0, #0
   14788:	movne	r4, r0
   1478c:	addeq	r4, r0, #1
   14790:	b	1475c <close_stdout@@Base+0x27c4>
   14794:	bl	1485c <close_stdout@@Base+0x28c4>
   14798:	cmp	r0, #0
   1479c:	push	{r3, lr}
   147a0:	ldr	r3, [r1]
   147a4:	beq	147d0 <close_stdout@@Base+0x2838>
   147a8:	movw	r2, #43689	; 0xaaa9
   147ac:	movt	r2, #43690	; 0xaaaa
   147b0:	cmp	r3, r2
   147b4:	addls	r2, r3, #1
   147b8:	addls	r3, r3, r2, lsr #1
   147bc:	bhi	147e8 <close_stdout@@Base+0x2850>
   147c0:	str	r3, [r1]
   147c4:	mov	r1, r3
   147c8:	pop	{r3, lr}
   147cc:	b	146a0 <close_stdout@@Base+0x2708>
   147d0:	cmp	r3, #0
   147d4:	moveq	r3, #64	; 0x40
   147d8:	str	r3, [r1]
   147dc:	mov	r1, r3
   147e0:	pop	{r3, lr}
   147e4:	b	146a0 <close_stdout@@Base+0x2708>
   147e8:	bl	1485c <close_stdout@@Base+0x28c4>
   147ec:	push	{r4, lr}
   147f0:	mov	r4, r0
   147f4:	bl	14648 <close_stdout@@Base+0x26b0>
   147f8:	mov	r2, r4
   147fc:	mov	r1, #0
   14800:	pop	{r4, lr}
   14804:	b	11118 <memset@plt>
   14808:	push	{r3, lr}
   1480c:	bl	10f44 <calloc@plt>
   14810:	cmp	r0, #0
   14814:	popne	{r3, pc}
   14818:	bl	1485c <close_stdout@@Base+0x28c4>
   1481c:	push	{r3, r4, r5, lr}
   14820:	mov	r4, r1
   14824:	mov	r5, r0
   14828:	mov	r0, r1
   1482c:	bl	14648 <close_stdout@@Base+0x26b0>
   14830:	mov	r1, r5
   14834:	mov	r2, r4
   14838:	pop	{r3, r4, r5, lr}
   1483c:	b	10fa4 <memcpy@plt>
   14840:	push	{r4, lr}
   14844:	mov	r4, r0
   14848:	bl	110e8 <strlen@plt>
   1484c:	add	r1, r0, #1
   14850:	mov	r0, r4
   14854:	pop	{r4, lr}
   14858:	b	1481c <close_stdout@@Base+0x2884>
   1485c:	ldr	r3, [pc, #64]	; 148a4 <close_stdout@@Base+0x290c>
   14860:	mov	r2, #5
   14864:	ldr	ip, [pc, #60]	; 148a8 <close_stdout@@Base+0x2910>
   14868:	mov	r0, #0
   1486c:	add	r3, pc, r3
   14870:	ldr	r1, [pc, #52]	; 148ac <close_stdout@@Base+0x2914>
   14874:	push	{r4, lr}
   14878:	add	r1, pc, r1
   1487c:	ldr	r3, [r3, ip]
   14880:	ldr	r4, [r3]
   14884:	bl	10fc8 <dcgettext@plt>
   14888:	ldr	r2, [pc, #32]	; 148b0 <close_stdout@@Base+0x2918>
   1488c:	mov	r1, #0
   14890:	add	r2, pc, r2
   14894:	mov	r3, r0
   14898:	mov	r0, r4
   1489c:	bl	11058 <error@plt>
   148a0:	bl	111b4 <abort@plt>
   148a4:	andeq	r2, r1, ip, lsl #15
   148a8:	andeq	r0, r0, r8, lsl r1
   148ac:	muleq	r0, r4, r0
   148b0:	andeq	r1, r0, r0, lsl #25
   148b4:	push	{r4, r5, r6, lr}
   148b8:	sub	sp, sp, #8
   148bc:	mov	r4, r0
   148c0:	bl	1113c <fileno@plt>
   148c4:	cmp	r0, #0
   148c8:	mov	r0, r4
   148cc:	blt	14948 <close_stdout@@Base+0x29b0>
   148d0:	bl	110a0 <__freading@plt>
   148d4:	cmp	r0, #0
   148d8:	bne	14914 <close_stdout@@Base+0x297c>
   148dc:	mov	r0, r4
   148e0:	bl	14954 <close_stdout@@Base+0x29bc>
   148e4:	cmp	r0, #0
   148e8:	beq	14944 <close_stdout@@Base+0x29ac>
   148ec:	bl	11100 <__errno_location@plt>
   148f0:	ldr	r6, [r0]
   148f4:	mov	r5, r0
   148f8:	mov	r0, r4
   148fc:	bl	11154 <fclose@plt>
   14900:	cmp	r6, #0
   14904:	mvnne	r0, #0
   14908:	strne	r6, [r5]
   1490c:	add	sp, sp, #8
   14910:	pop	{r4, r5, r6, pc}
   14914:	mov	r0, r4
   14918:	bl	1113c <fileno@plt>
   1491c:	mov	r1, #1
   14920:	mov	r2, #0
   14924:	mov	r3, #0
   14928:	str	r1, [sp]
   1492c:	bl	1101c <lseek64@plt>
   14930:	mvn	r2, #0
   14934:	mvn	r3, #0
   14938:	cmp	r1, r3
   1493c:	cmpeq	r0, r2
   14940:	bne	148dc <close_stdout@@Base+0x2944>
   14944:	mov	r0, r4
   14948:	add	sp, sp, #8
   1494c:	pop	{r4, r5, r6, lr}
   14950:	b	11154 <fclose@plt>
   14954:	push	{r4, lr}
   14958:	subs	r4, r0, #0
   1495c:	sub	sp, sp, #8
   14960:	beq	14970 <close_stdout@@Base+0x29d8>
   14964:	bl	110a0 <__freading@plt>
   14968:	cmp	r0, #0
   1496c:	bne	14980 <close_stdout@@Base+0x29e8>
   14970:	mov	r0, r4
   14974:	add	sp, sp, #8
   14978:	pop	{r4, lr}
   1497c:	b	10f80 <fflush@plt>
   14980:	ldr	r3, [r4]
   14984:	tst	r3, #256	; 0x100
   14988:	beq	14970 <close_stdout@@Base+0x29d8>
   1498c:	mov	r3, #1
   14990:	mov	r0, r4
   14994:	str	r3, [sp]
   14998:	mov	r2, #0
   1499c:	mov	r3, #0
   149a0:	bl	149b4 <close_stdout@@Base+0x2a1c>
   149a4:	mov	r0, r4
   149a8:	add	sp, sp, #8
   149ac:	pop	{r4, lr}
   149b0:	b	10f80 <fflush@plt>
   149b4:	push	{r4, r5, r6, r7, lr}
   149b8:	sub	sp, sp, #20
   149bc:	ldmib	r0, {r1, ip}
   149c0:	mov	r6, r0
   149c4:	ldr	r4, [sp, #40]	; 0x28
   149c8:	cmp	ip, r1
   149cc:	beq	149e4 <close_stdout@@Base+0x2a4c>
   149d0:	str	r4, [sp, #40]	; 0x28
   149d4:	mov	r0, r6
   149d8:	add	sp, sp, #20
   149dc:	pop	{r4, r5, r6, r7, lr}
   149e0:	b	11160 <fseeko64@plt>
   149e4:	ldr	ip, [r0, #20]
   149e8:	ldr	r1, [r0, #16]
   149ec:	cmp	ip, r1
   149f0:	bne	149d0 <close_stdout@@Base+0x2a38>
   149f4:	ldr	r7, [r0, #36]	; 0x24
   149f8:	cmp	r7, #0
   149fc:	bne	149d0 <close_stdout@@Base+0x2a38>
   14a00:	str	r2, [sp, #12]
   14a04:	mvn	r5, #0
   14a08:	str	r3, [sp, #8]
   14a0c:	bl	1113c <fileno@plt>
   14a10:	str	r4, [sp]
   14a14:	mvn	r4, #0
   14a18:	ldr	r2, [sp, #12]
   14a1c:	ldr	r3, [sp, #8]
   14a20:	bl	1101c <lseek64@plt>
   14a24:	mov	r2, r0
   14a28:	mov	r3, r1
   14a2c:	cmp	r3, r5
   14a30:	cmpeq	r2, r4
   14a34:	beq	14a54 <close_stdout@@Base+0x2abc>
   14a38:	ldr	r1, [r6]
   14a3c:	mov	r0, r7
   14a40:	strd	r2, [r6, #80]	; 0x50
   14a44:	bic	r3, r1, #16
   14a48:	str	r3, [r6]
   14a4c:	add	sp, sp, #20
   14a50:	pop	{r4, r5, r6, r7, pc}
   14a54:	mvn	r0, #0
   14a58:	b	14a4c <close_stdout@@Base+0x2ab4>
   14a5c:	push	{r4, r5, r6, lr}
   14a60:	mov	r4, r0
   14a64:	bl	11040 <__fpending@plt>
   14a68:	mov	r6, r0
   14a6c:	mov	r0, r4
   14a70:	ldr	r4, [r4]
   14a74:	bl	148b4 <close_stdout@@Base+0x291c>
   14a78:	and	r4, r4, #32
   14a7c:	adds	r5, r0, #0
   14a80:	movne	r5, #1
   14a84:	cmp	r4, #0
   14a88:	bne	14aa8 <close_stdout@@Base+0x2b10>
   14a8c:	cmp	r5, #0
   14a90:	beq	14aa0 <close_stdout@@Base+0x2b08>
   14a94:	cmp	r6, #0
   14a98:	beq	14ac4 <close_stdout@@Base+0x2b2c>
   14a9c:	mvn	r4, #0
   14aa0:	mov	r0, r4
   14aa4:	pop	{r4, r5, r6, pc}
   14aa8:	cmp	r5, #0
   14aac:	bne	14a9c <close_stdout@@Base+0x2b04>
   14ab0:	bl	11100 <__errno_location@plt>
   14ab4:	mvn	r4, #0
   14ab8:	str	r5, [r0]
   14abc:	mov	r0, r4
   14ac0:	pop	{r4, r5, r6, pc}
   14ac4:	bl	11100 <__errno_location@plt>
   14ac8:	ldr	r4, [r0]
   14acc:	subs	r4, r4, #9
   14ad0:	mvnne	r4, #0
   14ad4:	mov	r0, r4
   14ad8:	pop	{r4, r5, r6, pc}
   14adc:	ldr	r3, [pc, #984]	; 14ebc <close_stdout@@Base+0x2f24>
   14ae0:	mov	r0, #14
   14ae4:	ldr	r2, [pc, #980]	; 14ec0 <close_stdout@@Base+0x2f28>
   14ae8:	add	r3, pc, r3
   14aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14af0:	sub	sp, sp, #132	; 0x84
   14af4:	ldr	r6, [r3, r2]
   14af8:	ldr	r3, [r6]
   14afc:	str	r3, [sp, #124]	; 0x7c
   14b00:	bl	11190 <nl_langinfo@plt>
   14b04:	subs	r5, r0, #0
   14b08:	beq	14bbc <close_stdout@@Base+0x2c24>
   14b0c:	ldr	r3, [pc, #944]	; 14ec4 <close_stdout@@Base+0x2f2c>
   14b10:	ldr	r4, [pc, r3]
   14b14:	cmp	r4, #0
   14b18:	beq	14bc8 <close_stdout@@Base+0x2c30>
   14b1c:	ldrb	r7, [r4]
   14b20:	cmp	r7, #0
   14b24:	bne	14b58 <close_stdout@@Base+0x2bc0>
   14b28:	b	14b90 <close_stdout@@Base+0x2bf8>
   14b2c:	mov	r0, r4
   14b30:	bl	110e8 <strlen@plt>
   14b34:	add	r0, r0, #1
   14b38:	add	r7, r4, r0
   14b3c:	mov	r0, r7
   14b40:	bl	110e8 <strlen@plt>
   14b44:	add	r0, r0, #1
   14b48:	add	r4, r7, r0
   14b4c:	ldrb	r7, [r7, r0]
   14b50:	cmp	r7, #0
   14b54:	beq	14b90 <close_stdout@@Base+0x2bf8>
   14b58:	mov	r0, r5
   14b5c:	mov	r1, r4
   14b60:	bl	10f68 <strcmp@plt>
   14b64:	cmp	r0, #0
   14b68:	beq	14b80 <close_stdout@@Base+0x2be8>
   14b6c:	cmp	r7, #42	; 0x2a
   14b70:	bne	14b2c <close_stdout@@Base+0x2b94>
   14b74:	ldrb	r3, [r4, #1]
   14b78:	cmp	r3, #0
   14b7c:	bne	14b2c <close_stdout@@Base+0x2b94>
   14b80:	mov	r0, r4
   14b84:	bl	110e8 <strlen@plt>
   14b88:	add	r0, r0, #1
   14b8c:	add	r5, r4, r0
   14b90:	ldrb	r3, [r5]
   14b94:	cmp	r3, #0
   14b98:	ldreq	r5, [pc, #808]	; 14ec8 <close_stdout@@Base+0x2f30>
   14b9c:	addeq	r5, pc, r5
   14ba0:	ldr	r2, [sp, #124]	; 0x7c
   14ba4:	mov	r0, r5
   14ba8:	ldr	r3, [r6]
   14bac:	cmp	r2, r3
   14bb0:	bne	14e90 <close_stdout@@Base+0x2ef8>
   14bb4:	add	sp, sp, #132	; 0x84
   14bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bbc:	ldr	r5, [pc, #776]	; 14ecc <close_stdout@@Base+0x2f34>
   14bc0:	add	r5, pc, r5
   14bc4:	b	14b0c <close_stdout@@Base+0x2b74>
   14bc8:	ldr	r0, [pc, #768]	; 14ed0 <close_stdout@@Base+0x2f38>
   14bcc:	add	r0, pc, r0
   14bd0:	bl	11070 <getenv@plt>
   14bd4:	subs	r8, r0, #0
   14bd8:	beq	14e68 <close_stdout@@Base+0x2ed0>
   14bdc:	ldrb	r3, [r8]
   14be0:	cmp	r3, #0
   14be4:	beq	14dfc <close_stdout@@Base+0x2e64>
   14be8:	bl	110e8 <strlen@plt>
   14bec:	subs	sl, r0, #0
   14bf0:	subne	r3, sl, #1
   14bf4:	bne	14e0c <close_stdout@@Base+0x2e74>
   14bf8:	mov	r9, #0
   14bfc:	mov	fp, r9
   14c00:	add	r9, sl, r9
   14c04:	add	r0, r9, #14
   14c08:	bl	11088 <malloc@plt>
   14c0c:	subs	r7, r0, #0
   14c10:	beq	14e5c <close_stdout@@Base+0x2ec4>
   14c14:	mov	r1, r8
   14c18:	mov	r2, sl
   14c1c:	bl	10fa4 <memcpy@plt>
   14c20:	cmp	fp, #0
   14c24:	add	ip, r7, r9
   14c28:	movne	r3, #47	; 0x2f
   14c2c:	strbne	r3, [r7, sl]
   14c30:	ldr	r3, [pc, #668]	; 14ed4 <close_stdout@@Base+0x2f3c>
   14c34:	add	r3, pc, r3
   14c38:	ldm	r3!, {r0, r1, r2}
   14c3c:	ldrh	r3, [r3]
   14c40:	str	r0, [r7, r9]
   14c44:	mov	r0, r7
   14c48:	str	r1, [ip, #4]
   14c4c:	mov	r1, #32768	; 0x8000
   14c50:	strh	r3, [ip, #12]
   14c54:	str	r2, [ip, #8]
   14c58:	bl	11064 <open64@plt>
   14c5c:	subs	r8, r0, #0
   14c60:	blt	14e24 <close_stdout@@Base+0x2e8c>
   14c64:	ldr	r1, [pc, #620]	; 14ed8 <close_stdout@@Base+0x2f40>
   14c68:	add	r1, pc, r1
   14c6c:	bl	10f38 <fdopen@plt>
   14c70:	subs	fp, r0, #0
   14c74:	beq	14e7c <close_stdout@@Base+0x2ee4>
   14c78:	ldr	r0, [pc, #604]	; 14edc <close_stdout@@Base+0x2f44>
   14c7c:	add	sl, sp, #20
   14c80:	add	r9, sp, #72	; 0x48
   14c84:	mov	r8, #0
   14c88:	add	r0, pc, r0
   14c8c:	str	r0, [sp, #12]
   14c90:	ldr	r3, [fp, #4]
   14c94:	ldr	r2, [fp, #8]
   14c98:	cmp	r3, r2
   14c9c:	bcs	14d88 <close_stdout@@Base+0x2df0>
   14ca0:	add	r2, r3, #1
   14ca4:	str	r2, [fp, #4]
   14ca8:	ldrb	r0, [r3]
   14cac:	cmp	r0, #32
   14cb0:	beq	14c90 <close_stdout@@Base+0x2cf8>
   14cb4:	sub	r3, r0, #9
   14cb8:	cmp	r3, #1
   14cbc:	bls	14c90 <close_stdout@@Base+0x2cf8>
   14cc0:	cmp	r0, #35	; 0x23
   14cc4:	beq	14d9c <close_stdout@@Base+0x2e04>
   14cc8:	mov	r1, fp
   14ccc:	bl	110f4 <ungetc@plt>
   14cd0:	mov	r0, fp
   14cd4:	ldr	r1, [sp, #12]
   14cd8:	mov	r2, sl
   14cdc:	mov	r3, r9
   14ce0:	bl	11124 <fscanf@plt>
   14ce4:	cmp	r0, #1
   14ce8:	ble	14dcc <close_stdout@@Base+0x2e34>
   14cec:	mov	r0, sl
   14cf0:	bl	110e8 <strlen@plt>
   14cf4:	str	r0, [sp, #8]
   14cf8:	mov	r0, r9
   14cfc:	bl	110e8 <strlen@plt>
   14d00:	cmp	r8, #0
   14d04:	mov	r2, r0
   14d08:	bne	14e30 <close_stdout@@Base+0x2e98>
   14d0c:	ldr	r3, [sp, #8]
   14d10:	str	r2, [sp]
   14d14:	add	r8, r0, r3
   14d18:	add	r0, r8, #3
   14d1c:	add	r8, r8, #2
   14d20:	bl	11088 <malloc@plt>
   14d24:	ldr	r2, [sp]
   14d28:	mov	r3, r0
   14d2c:	cmp	r3, #0
   14d30:	beq	14e94 <close_stdout@@Base+0x2efc>
   14d34:	ldr	r0, [sp, #8]
   14d38:	movw	r1, #65534	; 0xfffe
   14d3c:	movt	r1, #65535	; 0xffff
   14d40:	rsb	r2, r2, r8
   14d44:	rsb	r1, r0, r1
   14d48:	stm	sp, {r2, r3}
   14d4c:	add	r0, r1, r2
   14d50:	mov	r1, sl
   14d54:	add	r0, r3, r0
   14d58:	mov	r4, r3
   14d5c:	bl	11034 <strcpy@plt>
   14d60:	ldr	r2, [sp]
   14d64:	ldr	r3, [sp, #4]
   14d68:	mov	r1, r9
   14d6c:	sub	r0, r2, #1
   14d70:	add	r0, r3, r0
   14d74:	bl	11034 <strcpy@plt>
   14d78:	ldr	r3, [fp, #4]
   14d7c:	ldr	r2, [fp, #8]
   14d80:	cmp	r3, r2
   14d84:	bcc	14ca0 <close_stdout@@Base+0x2d08>
   14d88:	mov	r0, fp
   14d8c:	bl	1116c <__uflow@plt>
   14d90:	cmn	r0, #1
   14d94:	beq	14dcc <close_stdout@@Base+0x2e34>
   14d98:	b	14cac <close_stdout@@Base+0x2d14>
   14d9c:	ldr	r3, [fp, #4]
   14da0:	ldr	r2, [fp, #8]
   14da4:	cmp	r3, r2
   14da8:	bcs	14eb0 <close_stdout@@Base+0x2f18>
   14dac:	add	r2, r3, #1
   14db0:	str	r2, [fp, #4]
   14db4:	ldrb	r0, [r3]
   14db8:	cmp	r0, #10
   14dbc:	cmnne	r0, #1
   14dc0:	bne	14d9c <close_stdout@@Base+0x2e04>
   14dc4:	cmn	r0, #1
   14dc8:	bne	14c90 <close_stdout@@Base+0x2cf8>
   14dcc:	mov	r0, fp
   14dd0:	bl	148b4 <close_stdout@@Base+0x291c>
   14dd4:	cmp	r8, #0
   14dd8:	beq	14e24 <close_stdout@@Base+0x2e8c>
   14ddc:	mov	r3, #0
   14de0:	strb	r3, [r4, r8]
   14de4:	mov	r0, r7
   14de8:	bl	10f8c <free@plt>
   14dec:	ldr	r3, [pc, #236]	; 14ee0 <close_stdout@@Base+0x2f48>
   14df0:	add	r3, pc, r3
   14df4:	str	r4, [r3]
   14df8:	b	14b1c <close_stdout@@Base+0x2b84>
   14dfc:	ldr	r8, [pc, #224]	; 14ee4 <close_stdout@@Base+0x2f4c>
   14e00:	mov	r3, #7
   14e04:	mov	sl, #8
   14e08:	add	r8, pc, r8
   14e0c:	ldrb	r3, [r8, r3]
   14e10:	cmp	r3, #47	; 0x2f
   14e14:	movne	r9, #1
   14e18:	movne	fp, r9
   14e1c:	bne	14c00 <close_stdout@@Base+0x2c68>
   14e20:	b	14bf8 <close_stdout@@Base+0x2c60>
   14e24:	ldr	r4, [pc, #188]	; 14ee8 <close_stdout@@Base+0x2f50>
   14e28:	add	r4, pc, r4
   14e2c:	b	14de4 <close_stdout@@Base+0x2e4c>
   14e30:	ldr	r0, [sp, #8]
   14e34:	str	r2, [sp]
   14e38:	add	r3, r0, r2
   14e3c:	mov	r0, r4
   14e40:	add	r8, r3, r8
   14e44:	add	r1, r8, #3
   14e48:	add	r8, r8, #2
   14e4c:	bl	10fec <realloc@plt>
   14e50:	ldr	r2, [sp]
   14e54:	mov	r3, r0
   14e58:	b	14d2c <close_stdout@@Base+0x2d94>
   14e5c:	ldr	r4, [pc, #136]	; 14eec <close_stdout@@Base+0x2f54>
   14e60:	add	r4, pc, r4
   14e64:	b	14dec <close_stdout@@Base+0x2e54>
   14e68:	ldr	r8, [pc, #128]	; 14ef0 <close_stdout@@Base+0x2f58>
   14e6c:	mov	r3, #7
   14e70:	mov	sl, #8
   14e74:	add	r8, pc, r8
   14e78:	b	14e0c <close_stdout@@Base+0x2e74>
   14e7c:	ldr	r4, [pc, #112]	; 14ef4 <close_stdout@@Base+0x2f5c>
   14e80:	mov	r0, r8
   14e84:	add	r4, pc, r4
   14e88:	bl	111c0 <close@plt>
   14e8c:	b	14de4 <close_stdout@@Base+0x2e4c>
   14e90:	bl	10fd4 <__stack_chk_fail@plt>
   14e94:	mov	r0, r4
   14e98:	ldr	r4, [pc, #88]	; 14ef8 <close_stdout@@Base+0x2f60>
   14e9c:	bl	10f8c <free@plt>
   14ea0:	mov	r0, fp
   14ea4:	add	r4, pc, r4
   14ea8:	bl	148b4 <close_stdout@@Base+0x291c>
   14eac:	b	14de4 <close_stdout@@Base+0x2e4c>
   14eb0:	mov	r0, fp
   14eb4:	bl	1116c <__uflow@plt>
   14eb8:	b	14db8 <close_stdout@@Base+0x2e20>
   14ebc:	andeq	r2, r1, r0, lsl r5
   14ec0:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   14ec4:			; <UNDEFINED> instruction: 0x000127b4
   14ec8:	muleq	r0, r0, sp
   14ecc:	andeq	r0, r0, r0, lsl r8
   14ed0:	andeq	r1, r0, r8, ror #26
   14ed4:	andeq	r1, r0, r0, lsl sp
   14ed8:			; <UNDEFINED> instruction: 0x000007b8
   14edc:	andeq	r1, r0, ip, asr #25
   14ee0:	ldrdeq	r2, [r1], -r4
   14ee4:	andeq	r1, r0, r8, lsl fp
   14ee8:	andeq	r0, r0, r8, lsr #11
   14eec:	andeq	r0, r0, r0, ror r5
   14ef0:	andeq	r1, r0, ip, lsr #21
   14ef4:	andeq	r0, r0, ip, asr #10
   14ef8:	andeq	r0, r0, ip, lsr #10
   14efc:	subs	r2, r1, #1
   14f00:	bxeq	lr
   14f04:	bcc	150dc <close_stdout@@Base+0x3144>
   14f08:	cmp	r0, r1
   14f0c:	bls	150c0 <close_stdout@@Base+0x3128>
   14f10:	tst	r1, r2
   14f14:	beq	150cc <close_stdout@@Base+0x3134>
   14f18:	clz	r3, r0
   14f1c:	clz	r2, r1
   14f20:	sub	r3, r2, r3
   14f24:	rsbs	r3, r3, #31
   14f28:	addne	r3, r3, r3, lsl #1
   14f2c:	mov	r2, #0
   14f30:	addne	pc, pc, r3, lsl #2
   14f34:	nop	{0}
   14f38:	cmp	r0, r1, lsl #31
   14f3c:	adc	r2, r2, r2
   14f40:	subcs	r0, r0, r1, lsl #31
   14f44:	cmp	r0, r1, lsl #30
   14f48:	adc	r2, r2, r2
   14f4c:	subcs	r0, r0, r1, lsl #30
   14f50:	cmp	r0, r1, lsl #29
   14f54:	adc	r2, r2, r2
   14f58:	subcs	r0, r0, r1, lsl #29
   14f5c:	cmp	r0, r1, lsl #28
   14f60:	adc	r2, r2, r2
   14f64:	subcs	r0, r0, r1, lsl #28
   14f68:	cmp	r0, r1, lsl #27
   14f6c:	adc	r2, r2, r2
   14f70:	subcs	r0, r0, r1, lsl #27
   14f74:	cmp	r0, r1, lsl #26
   14f78:	adc	r2, r2, r2
   14f7c:	subcs	r0, r0, r1, lsl #26
   14f80:	cmp	r0, r1, lsl #25
   14f84:	adc	r2, r2, r2
   14f88:	subcs	r0, r0, r1, lsl #25
   14f8c:	cmp	r0, r1, lsl #24
   14f90:	adc	r2, r2, r2
   14f94:	subcs	r0, r0, r1, lsl #24
   14f98:	cmp	r0, r1, lsl #23
   14f9c:	adc	r2, r2, r2
   14fa0:	subcs	r0, r0, r1, lsl #23
   14fa4:	cmp	r0, r1, lsl #22
   14fa8:	adc	r2, r2, r2
   14fac:	subcs	r0, r0, r1, lsl #22
   14fb0:	cmp	r0, r1, lsl #21
   14fb4:	adc	r2, r2, r2
   14fb8:	subcs	r0, r0, r1, lsl #21
   14fbc:	cmp	r0, r1, lsl #20
   14fc0:	adc	r2, r2, r2
   14fc4:	subcs	r0, r0, r1, lsl #20
   14fc8:	cmp	r0, r1, lsl #19
   14fcc:	adc	r2, r2, r2
   14fd0:	subcs	r0, r0, r1, lsl #19
   14fd4:	cmp	r0, r1, lsl #18
   14fd8:	adc	r2, r2, r2
   14fdc:	subcs	r0, r0, r1, lsl #18
   14fe0:	cmp	r0, r1, lsl #17
   14fe4:	adc	r2, r2, r2
   14fe8:	subcs	r0, r0, r1, lsl #17
   14fec:	cmp	r0, r1, lsl #16
   14ff0:	adc	r2, r2, r2
   14ff4:	subcs	r0, r0, r1, lsl #16
   14ff8:	cmp	r0, r1, lsl #15
   14ffc:	adc	r2, r2, r2
   15000:	subcs	r0, r0, r1, lsl #15
   15004:	cmp	r0, r1, lsl #14
   15008:	adc	r2, r2, r2
   1500c:	subcs	r0, r0, r1, lsl #14
   15010:	cmp	r0, r1, lsl #13
   15014:	adc	r2, r2, r2
   15018:	subcs	r0, r0, r1, lsl #13
   1501c:	cmp	r0, r1, lsl #12
   15020:	adc	r2, r2, r2
   15024:	subcs	r0, r0, r1, lsl #12
   15028:	cmp	r0, r1, lsl #11
   1502c:	adc	r2, r2, r2
   15030:	subcs	r0, r0, r1, lsl #11
   15034:	cmp	r0, r1, lsl #10
   15038:	adc	r2, r2, r2
   1503c:	subcs	r0, r0, r1, lsl #10
   15040:	cmp	r0, r1, lsl #9
   15044:	adc	r2, r2, r2
   15048:	subcs	r0, r0, r1, lsl #9
   1504c:	cmp	r0, r1, lsl #8
   15050:	adc	r2, r2, r2
   15054:	subcs	r0, r0, r1, lsl #8
   15058:	cmp	r0, r1, lsl #7
   1505c:	adc	r2, r2, r2
   15060:	subcs	r0, r0, r1, lsl #7
   15064:	cmp	r0, r1, lsl #6
   15068:	adc	r2, r2, r2
   1506c:	subcs	r0, r0, r1, lsl #6
   15070:	cmp	r0, r1, lsl #5
   15074:	adc	r2, r2, r2
   15078:	subcs	r0, r0, r1, lsl #5
   1507c:	cmp	r0, r1, lsl #4
   15080:	adc	r2, r2, r2
   15084:	subcs	r0, r0, r1, lsl #4
   15088:	cmp	r0, r1, lsl #3
   1508c:	adc	r2, r2, r2
   15090:	subcs	r0, r0, r1, lsl #3
   15094:	cmp	r0, r1, lsl #2
   15098:	adc	r2, r2, r2
   1509c:	subcs	r0, r0, r1, lsl #2
   150a0:	cmp	r0, r1, lsl #1
   150a4:	adc	r2, r2, r2
   150a8:	subcs	r0, r0, r1, lsl #1
   150ac:	cmp	r0, r1
   150b0:	adc	r2, r2, r2
   150b4:	subcs	r0, r0, r1
   150b8:	mov	r0, r2
   150bc:	bx	lr
   150c0:	moveq	r0, #1
   150c4:	movne	r0, #0
   150c8:	bx	lr
   150cc:	clz	r2, r1
   150d0:	rsb	r2, r2, #31
   150d4:	lsr	r0, r0, r2
   150d8:	bx	lr
   150dc:	cmp	r0, #0
   150e0:	mvnne	r0, #0
   150e4:	b	15108 <close_stdout@@Base+0x3170>
   150e8:	cmp	r1, #0
   150ec:	beq	150dc <close_stdout@@Base+0x3144>
   150f0:	push	{r0, r1, lr}
   150f4:	bl	14efc <close_stdout@@Base+0x2f64>
   150f8:	pop	{r1, r2, lr}
   150fc:	mul	r3, r2, r0
   15100:	sub	r1, r1, r3
   15104:	bx	lr
   15108:	push	{r1, lr}
   1510c:	mov	r0, #8
   15110:	bl	10f5c <raise@plt>
   15114:	pop	{r1, pc}
   15118:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1511c:	mov	r7, r0
   15120:	ldr	r6, [pc, #76]	; 15174 <close_stdout@@Base+0x31dc>
   15124:	mov	r8, r1
   15128:	ldr	r5, [pc, #72]	; 15178 <close_stdout@@Base+0x31e0>
   1512c:	mov	r9, r2
   15130:	add	r6, pc, r6
   15134:	bl	10f18 <fdopen@plt-0x20>
   15138:	add	r5, pc, r5
   1513c:	rsb	r6, r5, r6
   15140:	asrs	r6, r6, #2
   15144:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   15148:	sub	r5, r5, #4
   1514c:	mov	r4, #0
   15150:	add	r4, r4, #1
   15154:	ldr	r3, [r5, #4]!
   15158:	mov	r0, r7
   1515c:	mov	r1, r8
   15160:	mov	r2, r9
   15164:	blx	r3
   15168:	cmp	r4, r6
   1516c:	bne	15150 <close_stdout@@Base+0x31b8>
   15170:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15174:	andeq	r1, r1, r4, ror sp
   15178:	andeq	r1, r1, r8, ror #26
   1517c:	bx	lr
   15180:	ldr	r3, [pc, #28]	; 151a4 <close_stdout@@Base+0x320c>
   15184:	mov	r1, #0
   15188:	ldr	r2, [pc, #24]	; 151a8 <close_stdout@@Base+0x3210>
   1518c:	add	r3, pc, r3
   15190:	ldr	r3, [r3, r2]
   15194:	cmp	r3, #0
   15198:	ldrne	r2, [r3]
   1519c:	moveq	r2, r3
   151a0:	b	1110c <__cxa_atexit@plt>
   151a4:	andeq	r1, r1, ip, ror #28
   151a8:	andeq	r0, r0, r8, lsl #2

Disassembly of section .fini:

000151ac <.fini>:
   151ac:	push	{r3, lr}
   151b0:	pop	{r3, pc}
