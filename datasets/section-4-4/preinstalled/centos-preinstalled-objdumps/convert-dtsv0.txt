
centos-preinstalled/convert-dtsv0:     file format elf32-littlearm


Disassembly of section .init:

00010ad4 <.init>:
   10ad4:	push	{r3, lr}
   10ad8:	bl	11004 <__assert_fail@plt+0x33c>
   10adc:	pop	{r3, pc}

Disassembly of section .plt:

00010ae0 <strcmp@plt-0x14>:
   10ae0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ae4:	ldr	lr, [pc, #4]	; 10af0 <strcmp@plt-0x4>
   10ae8:	add	lr, pc, lr
   10aec:	ldr	pc, [lr, #8]!
   10af0:	andeq	r4, r1, r0, lsl r5

00010af4 <strcmp@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #20, 20	; 0x14000
   10afc:	ldr	pc, [ip, #1296]!	; 0x510

00010b00 <strtol@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #20, 20	; 0x14000
   10b08:	ldr	pc, [ip, #1288]!	; 0x508

00010b0c <printf@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #20, 20	; 0x14000
   10b14:	ldr	pc, [ip, #1280]!	; 0x500

00010b18 <fopen@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #20, 20	; 0x14000
   10b20:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b24 <read@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #20, 20	; 0x14000
   10b2c:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b30 <free@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #20, 20	; 0x14000
   10b38:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b3c <ferror@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #20, 20	; 0x14000
   10b44:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b48 <memcpy@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #20, 20	; 0x14000
   10b50:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b54 <_IO_getc@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #20, 20	; 0x14000
   10b5c:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b60 <realloc@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #20, 20	; 0x14000
   10b68:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b6c <fwrite@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #20, 20	; 0x14000
   10b74:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b78 <fread@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #20, 20	; 0x14000
   10b80:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b84 <fnmatch@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #20, 20	; 0x14000
   10b8c:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b90 <malloc@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #20, 20	; 0x14000
   10b98:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b9c <__libc_start_main@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #20, 20	; 0x14000
   10ba4:	ldr	pc, [ip, #1184]!	; 0x4a0

00010ba8 <strerror@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #20, 20	; 0x14000
   10bb0:	ldr	pc, [ip, #1176]!	; 0x498

00010bb4 <__gmon_start__@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #20, 20	; 0x14000
   10bbc:	ldr	pc, [ip, #1168]!	; 0x490

00010bc0 <open@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #20, 20	; 0x14000
   10bc8:	ldr	pc, [ip, #1160]!	; 0x488

00010bcc <getopt_long@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #20, 20	; 0x14000
   10bd4:	ldr	pc, [ip, #1152]!	; 0x480

00010bd8 <__ctype_b_loc@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #20, 20	; 0x14000
   10be0:	ldr	pc, [ip, #1144]!	; 0x478

00010be4 <exit@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #20, 20	; 0x14000
   10bec:	ldr	pc, [ip, #1136]!	; 0x470

00010bf0 <strlen@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #20, 20	; 0x14000
   10bf8:	ldr	pc, [ip, #1128]!	; 0x468

00010bfc <strchr@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #20, 20	; 0x14000
   10c04:	ldr	pc, [ip, #1120]!	; 0x460

00010c08 <fprintf@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #20, 20	; 0x14000
   10c10:	ldr	pc, [ip, #1112]!	; 0x458

00010c14 <__errno_location@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #20, 20	; 0x14000
   10c1c:	ldr	pc, [ip, #1104]!	; 0x450

00010c20 <memset@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #20, 20	; 0x14000
   10c28:	ldr	pc, [ip, #1096]!	; 0x448

00010c2c <putchar@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #20, 20	; 0x14000
   10c34:	ldr	pc, [ip, #1088]!	; 0x440

00010c38 <strncpy@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #20, 20	; 0x14000
   10c40:	ldr	pc, [ip, #1080]!	; 0x438

00010c44 <strtoull@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #20, 20	; 0x14000
   10c4c:	ldr	pc, [ip, #1072]!	; 0x430

00010c50 <write@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #20, 20	; 0x14000
   10c58:	ldr	pc, [ip, #1064]!	; 0x428

00010c5c <fclose@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #20, 20	; 0x14000
   10c64:	ldr	pc, [ip, #1056]!	; 0x420

00010c68 <strrchr@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #20, 20	; 0x14000
   10c70:	ldr	pc, [ip, #1048]!	; 0x418

00010c74 <vfprintf@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #20, 20	; 0x14000
   10c7c:	ldr	pc, [ip, #1040]!	; 0x410

00010c80 <fputc@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #1032]!	; 0x408

00010c8c <clearerr@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #1024]!	; 0x400

00010c98 <vsnprintf@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #1016]!	; 0x3f8

00010ca4 <fputs@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #1008]!	; 0x3f0

00010cb0 <abort@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #1000]!	; 0x3e8

00010cbc <close@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #992]!	; 0x3e0

00010cc8 <__assert_fail@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #984]!	; 0x3d8

Disassembly of section .text:

00010cd4 <.text>:
   10cd4:	push	{r0, r1, r2, r3}
   10cd8:	ldr	r3, [pc, #60]	; 10d1c <__assert_fail@plt+0x54>
   10cdc:	push	{r0, r1, r2, lr}
   10ce0:	add	r2, sp, #20
   10ce4:	str	r2, [sp, #4]
   10ce8:	add	r3, pc, r3
   10cec:	ldr	r2, [pc, #44]	; 10d20 <__assert_fail@plt+0x58>
   10cf0:	ldr	r0, [pc, #44]	; 10d24 <__assert_fail@plt+0x5c>
   10cf4:	ldr	r4, [r3, r2]
   10cf8:	add	r0, pc, r0
   10cfc:	ldr	r1, [r4]
   10d00:	bl	10ca4 <fputs@plt>
   10d04:	ldr	r0, [r4]
   10d08:	ldr	r1, [sp, #16]
   10d0c:	ldr	r2, [sp, #4]
   10d10:	bl	10c74 <vfprintf@plt>
   10d14:	mov	r0, #1
   10d18:	bl	10be4 <exit@plt>
   10d1c:	andeq	r4, r1, r0, lsl r3
   10d20:	andeq	r0, r0, r4, asr #1
   10d24:	andeq	r2, r0, fp, asr fp
   10d28:	push	{r0, r1, r2, r3}
   10d2c:	ldr	r3, [pc, #60]	; 10d70 <__assert_fail@plt+0xa8>
   10d30:	push	{r0, r1, r2, lr}
   10d34:	add	r2, sp, #20
   10d38:	str	r2, [sp, #4]
   10d3c:	add	r3, pc, r3
   10d40:	ldr	r2, [pc, #44]	; 10d74 <__assert_fail@plt+0xac>
   10d44:	ldr	r0, [pc, #44]	; 10d78 <__assert_fail@plt+0xb0>
   10d48:	ldr	r4, [r3, r2]
   10d4c:	add	r0, pc, r0
   10d50:	ldr	r1, [r4]
   10d54:	bl	10ca4 <fputs@plt>
   10d58:	ldr	r0, [r4]
   10d5c:	ldr	r1, [sp, #16]
   10d60:	ldr	r2, [sp, #4]
   10d64:	bl	10c74 <vfprintf@plt>
   10d68:	mov	r0, #1
   10d6c:	bl	10be4 <exit@plt>
   10d70:			; <UNDEFINED> instruction: 0x000142bc
   10d74:	andeq	r0, r0, r4, asr #1
   10d78:	andeq	r2, r0, r7, lsl #22
   10d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d80:	sub	sp, sp, #28
   10d84:	ldr	sl, [pc, #512]	; 10f8c <__assert_fail@plt+0x2c4>
   10d88:	mov	r7, r0
   10d8c:	ldr	r8, [pc, #508]	; 10f90 <__assert_fail@plt+0x2c8>
   10d90:	mov	r9, r1
   10d94:	add	sl, pc, sl
   10d98:	ldr	r5, [pc, #500]	; 10f94 <__assert_fail@plt+0x2cc>
   10d9c:	add	r6, sl, #3040	; 0xbe0
   10da0:	add	r8, pc, r8
   10da4:	add	r6, r6, #11
   10da8:	add	r4, r8, #204	; 0xcc
   10dac:	mov	fp, #0
   10db0:	add	r5, pc, r5
   10db4:	str	fp, [sp]
   10db8:	mov	r0, r7
   10dbc:	mov	r1, r9
   10dc0:	mov	r2, r6
   10dc4:	mov	r3, r4
   10dc8:	bl	10bcc <getopt_long@plt>
   10dcc:	cmn	r0, #1
   10dd0:	beq	10e1c <__assert_fail@plt+0x154>
   10dd4:	cmp	r0, #86	; 0x56
   10dd8:	beq	10e18 <__assert_fail@plt+0x150>
   10ddc:	cmp	r0, #104	; 0x68
   10de0:	beq	10e04 <__assert_fail@plt+0x13c>
   10de4:	cmp	r0, #63	; 0x3f
   10de8:	bne	10db4 <__assert_fail@plt+0xec>
   10dec:	ldr	r0, [pc, #420]	; 10f98 <__assert_fail@plt+0x2d0>
   10df0:	add	r8, r8, #252	; 0xfc
   10df4:	add	r1, sl, #3008	; 0xbc0
   10df8:	str	r8, [sp]
   10dfc:	add	r0, pc, r0
   10e00:	b	10e38 <__assert_fail@plt+0x170>
   10e04:	add	r8, r8, #252	; 0xfc
   10e08:	add	r1, sl, #3008	; 0xbc0
   10e0c:	str	r8, [sp]
   10e10:	mov	r0, #0
   10e14:	b	10e38 <__assert_fail@plt+0x170>
   10e18:	bl	11f54 <__assert_fail@plt+0x128c>
   10e1c:	cmp	r7, #1
   10e20:	bgt	10e48 <__assert_fail@plt+0x180>
   10e24:	ldr	r0, [pc, #368]	; 10f9c <__assert_fail@plt+0x2d4>
   10e28:	add	r1, sl, #3008	; 0xbc0
   10e2c:	add	r8, r8, #252	; 0xfc
   10e30:	str	r8, [sp]
   10e34:	add	r0, pc, r0
   10e38:	add	r1, r1, #2
   10e3c:	mov	r2, r6
   10e40:	mov	r3, r4
   10e44:	bl	11f7c <__assert_fail@plt+0x12b4>
   10e48:	ldr	r3, [pc, #336]	; 10fa0 <__assert_fail@plt+0x2d8>
   10e4c:	mov	r8, #1
   10e50:	ldr	sl, [pc, #332]	; 10fa4 <__assert_fail@plt+0x2dc>
   10e54:	add	r3, pc, r3
   10e58:	str	r3, [sp, #8]
   10e5c:	add	sl, pc, sl
   10e60:	ldr	r3, [pc, #320]	; 10fa8 <__assert_fail@plt+0x2e0>
   10e64:	add	r3, pc, r3
   10e68:	str	r3, [sp, #12]
   10e6c:	ldr	r3, [pc, #312]	; 10fac <__assert_fail@plt+0x2e4>
   10e70:	ldr	r1, [sp, #8]
   10e74:	ldr	r2, [r9, #4]
   10e78:	ldr	r3, [r5, r3]
   10e7c:	ldr	r0, [r3]
   10e80:	bl	10c08 <fprintf@plt>
   10e84:	ldr	r6, [r9, #4]!
   10e88:	ldrh	r2, [sl]
   10e8c:	ldrb	r3, [sl, #2]
   10e90:	mov	r0, r6
   10e94:	strh	r2, [sp, #20]
   10e98:	strb	r3, [sp, #22]
   10e9c:	bl	10bf0 <strlen@plt>
   10ea0:	mov	fp, r0
   10ea4:	add	r0, r0, #3
   10ea8:	bl	10b90 <malloc@plt>
   10eac:	subs	r4, r0, #0
   10eb0:	bne	10ec0 <__assert_fail@plt+0x1f8>
   10eb4:	ldr	r0, [pc, #244]	; 10fb0 <__assert_fail@plt+0x2e8>
   10eb8:	add	r0, pc, r0
   10ebc:	bl	122dc <__assert_fail@plt+0x1614>
   10ec0:	mov	r1, r6
   10ec4:	mov	r2, fp
   10ec8:	bl	10b48 <memcpy@plt>
   10ecc:	ldrh	r0, [sp, #20]
   10ed0:	ldrb	r1, [sp, #22]
   10ed4:	add	r2, r4, fp
   10ed8:	strh	r0, [r4, fp]
   10edc:	mov	r0, r6
   10ee0:	strb	r1, [r2, #2]
   10ee4:	ldr	r1, [pc, #200]	; 10fb4 <__assert_fail@plt+0x2ec>
   10ee8:	add	r1, pc, r1
   10eec:	bl	10b18 <fopen@plt>
   10ef0:	ldr	r3, [pc, #192]	; 10fb8 <__assert_fail@plt+0x2f0>
   10ef4:	ldr	r3, [r5, r3]
   10ef8:	cmp	r0, #0
   10efc:	str	r0, [r3]
   10f00:	bne	10f24 <__assert_fail@plt+0x25c>
   10f04:	bl	10c14 <__errno_location@plt>
   10f08:	ldr	r0, [r0]
   10f0c:	bl	10ba8 <strerror@plt>
   10f10:	mov	r1, r6
   10f14:	mov	r2, r0
   10f18:	ldr	r0, [pc, #156]	; 10fbc <__assert_fail@plt+0x2f4>
   10f1c:	add	r0, pc, r0
   10f20:	b	10f60 <__assert_fail@plt+0x298>
   10f24:	mov	r0, r4
   10f28:	ldr	r1, [sp, #12]
   10f2c:	bl	10b18 <fopen@plt>
   10f30:	ldr	r3, [pc, #136]	; 10fc0 <__assert_fail@plt+0x2f8>
   10f34:	ldr	r3, [r5, r3]
   10f38:	cmp	r0, #0
   10f3c:	str	r0, [r3]
   10f40:	bne	10f64 <__assert_fail@plt+0x29c>
   10f44:	bl	10c14 <__errno_location@plt>
   10f48:	ldr	r0, [r0]
   10f4c:	bl	10ba8 <strerror@plt>
   10f50:	mov	r1, r4
   10f54:	mov	r2, r0
   10f58:	ldr	r0, [pc, #100]	; 10fc4 <__assert_fail@plt+0x2fc>
   10f5c:	add	r0, pc, r0
   10f60:	bl	122dc <__assert_fail@plt+0x1614>
   10f64:	bl	12984 <__assert_fail@plt+0x1cbc>
   10f68:	subs	r6, r0, #0
   10f6c:	bne	10f64 <__assert_fail@plt+0x29c>
   10f70:	mov	r0, r4
   10f74:	add	r8, r8, #1
   10f78:	bl	10b30 <free@plt>
   10f7c:	cmp	r8, r7
   10f80:	bne	10e6c <__assert_fail@plt+0x1a4>
   10f84:	mov	r0, r6
   10f88:	bl	10be4 <exit@plt>
   10f8c:	ldrdeq	r2, [r0], -ip
   10f90:	andeq	r4, r1, r0, rrx
   10f94:	andeq	r4, r1, r8, asr #4
   10f98:	andeq	r3, r0, r3, ror #20
   10f9c:	andeq	r3, r0, sl, lsr sl
   10fa0:	andeq	r3, r0, fp, lsr #20
   10fa4:	andeq	r3, r0, sp, lsl #21
   10fa8:	andeq	r3, r0, fp, ror r9
   10fac:	andeq	r0, r0, r4, asr #1
   10fb0:	andeq	r2, r0, r9, lsr #19
   10fb4:			; <UNDEFINED> instruction: 0x000039bc
   10fb8:	andeq	r0, r0, ip, lsr #1
   10fbc:	andeq	r3, r0, sl, lsl #19
   10fc0:	andeq	r0, r0, r8, asr #1
   10fc4:	andeq	r3, r0, fp, ror #18
   10fc8:	mov	fp, #0
   10fcc:	mov	lr, #0
   10fd0:	pop	{r1}		; (ldr r1, [sp], #4)
   10fd4:	mov	r2, sp
   10fd8:	push	{r2}		; (str r2, [sp, #-4]!)
   10fdc:	push	{r0}		; (str r0, [sp, #-4]!)
   10fe0:	ldr	ip, [pc, #16]	; 10ff8 <__assert_fail@plt+0x330>
   10fe4:	push	{ip}		; (str ip, [sp, #-4]!)
   10fe8:	ldr	r0, [pc, #12]	; 10ffc <__assert_fail@plt+0x334>
   10fec:	ldr	r3, [pc, #12]	; 11000 <__assert_fail@plt+0x338>
   10ff0:	bl	10b9c <__libc_start_main@plt>
   10ff4:	bl	10cb0 <abort@plt>
   10ff8:	andeq	r3, r1, r8, lsr r8
   10ffc:	andeq	r0, r1, ip, ror sp
   11000:	ldrdeq	r3, [r1], -r4
   11004:	ldr	r3, [pc, #20]	; 11020 <__assert_fail@plt+0x358>
   11008:	ldr	r2, [pc, #20]	; 11024 <__assert_fail@plt+0x35c>
   1100c:	add	r3, pc, r3
   11010:	ldr	r2, [r3, r2]
   11014:	cmp	r2, #0
   11018:	bxeq	lr
   1101c:	b	10bb4 <__gmon_start__@plt>
   11020:	andeq	r3, r1, ip, ror #31
   11024:	andeq	r0, r0, ip, asr #1
   11028:	push	{r3, lr}
   1102c:	movw	r0, #20712	; 0x50e8
   11030:	ldr	r3, [pc, #36]	; 1105c <__assert_fail@plt+0x394>
   11034:	movt	r0, #2
   11038:	rsb	r3, r0, r3
   1103c:	cmp	r3, #6
   11040:	popls	{r3, pc}
   11044:	movw	r3, #0
   11048:	movt	r3, #0
   1104c:	cmp	r3, #0
   11050:	popeq	{r3, pc}
   11054:	blx	r3
   11058:	pop	{r3, pc}
   1105c:	andeq	r5, r2, fp, ror #1
   11060:	push	{r3, lr}
   11064:	movw	r0, #20712	; 0x50e8
   11068:	movw	r3, #20712	; 0x50e8
   1106c:	movt	r0, #2
   11070:	movt	r3, #2
   11074:	rsb	r3, r0, r3
   11078:	asr	r3, r3, #2
   1107c:	add	r3, r3, r3, lsr #31
   11080:	asrs	r1, r3, #1
   11084:	popeq	{r3, pc}
   11088:	movw	r2, #0
   1108c:	movt	r2, #0
   11090:	cmp	r2, #0
   11094:	popeq	{r3, pc}
   11098:	blx	r2
   1109c:	pop	{r3, pc}
   110a0:	push	{r4, lr}
   110a4:	movw	r4, #20712	; 0x50e8
   110a8:	movt	r4, #2
   110ac:	ldrb	r3, [r4]
   110b0:	cmp	r3, #0
   110b4:	popne	{r4, pc}
   110b8:	bl	11028 <__assert_fail@plt+0x360>
   110bc:	mov	r3, #1
   110c0:	strb	r3, [r4]
   110c4:	pop	{r4, pc}
   110c8:	movw	r0, #19972	; 0x4e04
   110cc:	movt	r0, #2
   110d0:	push	{r3, lr}
   110d4:	ldr	r3, [r0]
   110d8:	cmp	r3, #0
   110dc:	beq	110f4 <__assert_fail@plt+0x42c>
   110e0:	movw	r3, #0
   110e4:	movt	r3, #0
   110e8:	cmp	r3, #0
   110ec:	beq	110f4 <__assert_fail@plt+0x42c>
   110f0:	blx	r3
   110f4:	pop	{r3, lr}
   110f8:	b	11060 <__assert_fail@plt+0x398>
   110fc:	cmp	r0, #0
   11100:	mov	r3, r1
   11104:	push	{r4, r5, r6, lr}
   11108:	mov	r6, r2
   1110c:	beq	1111c <__assert_fail@plt+0x454>
   11110:	ldrb	r2, [r1]
   11114:	cmp	r2, #47	; 0x2f
   11118:	bne	11128 <__assert_fail@plt+0x460>
   1111c:	mov	r0, r3
   11120:	bl	116e8 <__assert_fail@plt+0xa20>
   11124:	b	1112c <__assert_fail@plt+0x464>
   11128:	bl	117b0 <__assert_fail@plt+0xae8>
   1112c:	ldr	r1, [pc, #44]	; 11160 <__assert_fail@plt+0x498>
   11130:	mov	r4, r0
   11134:	add	r1, pc, r1
   11138:	bl	10b18 <fopen@plt>
   1113c:	cmp	r0, #0
   11140:	mov	r5, r0
   11144:	str	r0, [r6]
   11148:	bne	11158 <__assert_fail@plt+0x490>
   1114c:	mov	r0, r4
   11150:	mov	r4, r5
   11154:	bl	10b30 <free@plt>
   11158:	mov	r0, r4
   1115c:	pop	{r4, r5, r6, pc}
   11160:	andeq	r2, r0, ip, lsl r7
   11164:	push	{r3, lr}
   11168:	bl	10b90 <malloc@plt>
   1116c:	cmp	r0, #0
   11170:	popne	{r3, pc}
   11174:	ldr	r0, [pc, #4]	; 11180 <__assert_fail@plt+0x4b8>
   11178:	add	r0, pc, r0
   1117c:	bl	10cd4 <__assert_fail@plt+0xc>
   11180:	andeq	r2, r0, r9, ror #13
   11184:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11188:	mov	r8, r1
   1118c:	ldr	r1, [pc, #256]	; 11294 <__assert_fail@plt+0x5cc>
   11190:	mov	r7, r0
   11194:	ldr	r5, [pc, #252]	; 11298 <__assert_fail@plt+0x5d0>
   11198:	add	r1, pc, r1
   1119c:	bl	10af4 <strcmp@plt>
   111a0:	add	r5, pc, r5
   111a4:	cmp	r0, #0
   111a8:	bne	111d0 <__assert_fail@plt+0x508>
   111ac:	ldr	r3, [pc, #232]	; 1129c <__assert_fail@plt+0x5d4>
   111b0:	ldr	r0, [pc, #232]	; 112a0 <__assert_fail@plt+0x5d8>
   111b4:	ldr	r3, [r5, r3]
   111b8:	add	r0, pc, r0
   111bc:	ldr	r3, [r3]
   111c0:	str	r3, [sp, #4]
   111c4:	bl	116e8 <__assert_fail@plt+0xa20>
   111c8:	mov	r4, r0
   111cc:	b	11230 <__assert_fail@plt+0x568>
   111d0:	ldr	r3, [pc, #204]	; 112a4 <__assert_fail@plt+0x5dc>
   111d4:	add	r9, sp, #4
   111d8:	mov	r1, r7
   111dc:	mov	r2, r9
   111e0:	ldr	r3, [r5, r3]
   111e4:	ldr	r0, [r3]
   111e8:	cmp	r0, #0
   111ec:	ldrne	r0, [r0, #8]
   111f0:	bl	110fc <__assert_fail@plt+0x434>
   111f4:	ldr	r3, [pc, #172]	; 112a8 <__assert_fail@plt+0x5e0>
   111f8:	ldr	r6, [pc, r3]
   111fc:	mov	r4, r0
   11200:	ldr	r3, [sp, #4]
   11204:	cmp	r3, #0
   11208:	bne	11230 <__assert_fail@plt+0x568>
   1120c:	cmp	r6, #0
   11210:	beq	11274 <__assert_fail@plt+0x5ac>
   11214:	ldr	r0, [r6, #4]
   11218:	mov	r1, r7
   1121c:	mov	r2, r9
   11220:	bl	110fc <__assert_fail@plt+0x434>
   11224:	ldr	r6, [r6]
   11228:	mov	r4, r0
   1122c:	b	11200 <__assert_fail@plt+0x538>
   11230:	ldr	r3, [pc, #116]	; 112ac <__assert_fail@plt+0x5e4>
   11234:	ldr	r3, [r5, r3]
   11238:	ldr	r0, [r3]
   1123c:	cmp	r0, #0
   11240:	beq	11254 <__assert_fail@plt+0x58c>
   11244:	ldr	r1, [pc, #100]	; 112b0 <__assert_fail@plt+0x5e8>
   11248:	mov	r2, r4
   1124c:	add	r1, pc, r1
   11250:	bl	10c08 <fprintf@plt>
   11254:	cmp	r8, #0
   11258:	strne	r4, [r8]
   1125c:	bne	11268 <__assert_fail@plt+0x5a0>
   11260:	mov	r0, r4
   11264:	bl	10b30 <free@plt>
   11268:	ldr	r0, [sp, #4]
   1126c:	add	sp, sp, #12
   11270:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11274:	bl	10c14 <__errno_location@plt>
   11278:	ldr	r0, [r0]
   1127c:	bl	10ba8 <strerror@plt>
   11280:	mov	r1, r7
   11284:	mov	r2, r0
   11288:	ldr	r0, [pc, #36]	; 112b4 <__assert_fail@plt+0x5ec>
   1128c:	add	r0, pc, r0
   11290:	bl	10cd4 <__assert_fail@plt+0xc>
   11294:	ldrdeq	r2, [r0], -sl
   11298:	andeq	r3, r1, r8, asr lr
   1129c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   112a0:			; <UNDEFINED> instruction: 0x000026bc
   112a4:	strheq	r0, [r0], -r8
   112a8:	andeq	r3, r1, ip, ror #29
   112ac:	strheq	r0, [r0], -r4
   112b0:	andeq	r2, r0, r0, lsr r6
   112b4:	strdeq	r2, [r0], -r4
   112b8:	ldr	r2, [pc, #184]	; 11378 <__assert_fail@plt+0x6b0>
   112bc:	push	{r3, r4, r5, r6, r7, lr}
   112c0:	add	r2, pc, r2
   112c4:	ldr	r7, [pc, #176]	; 1137c <__assert_fail@plt+0x6b4>
   112c8:	mov	r5, r0
   112cc:	ldr	r3, [r2, #4]
   112d0:	add	r7, pc, r7
   112d4:	cmp	r3, #99	; 0x63
   112d8:	add	r1, r3, #1
   112dc:	str	r1, [r2, #4]
   112e0:	ble	112f0 <__assert_fail@plt+0x628>
   112e4:	ldr	r0, [pc, #148]	; 11380 <__assert_fail@plt+0x6b8>
   112e8:	add	r0, pc, r0
   112ec:	bl	10cd4 <__assert_fail@plt+0xc>
   112f0:	mov	r0, #24
   112f4:	bl	11164 <__assert_fail@plt+0x49c>
   112f8:	mov	r4, r0
   112fc:	mov	r0, r5
   11300:	add	r1, r4, #4
   11304:	bl	11184 <__assert_fail@plt+0x4bc>
   11308:	ldr	r6, [r4, #4]
   1130c:	mov	r1, #47	; 0x2f
   11310:	str	r0, [r4]
   11314:	mov	r0, r6
   11318:	bl	10c68 <strrchr@plt>
   1131c:	cmp	r0, #0
   11320:	beq	1134c <__assert_fail@plt+0x684>
   11324:	rsb	r5, r6, r0
   11328:	add	r0, r5, #1
   1132c:	bl	11164 <__assert_fail@plt+0x49c>
   11330:	mov	r2, r5
   11334:	mov	r1, r6
   11338:	bl	10b48 <memcpy@plt>
   1133c:	mov	r2, #0
   11340:	mov	r3, r0
   11344:	strb	r2, [r0, r5]
   11348:	b	11350 <__assert_fail@plt+0x688>
   1134c:	mov	r3, r0
   11350:	str	r3, [r4, #8]
   11354:	ldr	r3, [pc, #40]	; 11384 <__assert_fail@plt+0x6bc>
   11358:	ldr	r3, [r7, r3]
   1135c:	ldr	r2, [r3]
   11360:	str	r4, [r3]
   11364:	str	r2, [r4, #20]
   11368:	mov	r2, #1
   1136c:	str	r2, [r4, #12]
   11370:	str	r2, [r4, #16]
   11374:	pop	{r3, r4, r5, r6, r7, pc}
   11378:	andeq	r3, r1, r4, lsr #28
   1137c:	andeq	r3, r1, r8, lsr #26
   11380:			; <UNDEFINED> instruction: 0x000025b0
   11384:	strheq	r0, [r0], -r8
   11388:	push	{r3, r4, r5, lr}
   1138c:	ldr	r3, [pc, #128]	; 11414 <__assert_fail@plt+0x74c>
   11390:	ldr	r2, [pc, #128]	; 11418 <__assert_fail@plt+0x750>
   11394:	add	r3, pc, r3
   11398:	ldr	r5, [r3, r2]
   1139c:	ldr	r4, [r5]
   113a0:	cmp	r4, #0
   113a4:	bne	113c8 <__assert_fail@plt+0x700>
   113a8:	ldr	r0, [pc, #108]	; 1141c <__assert_fail@plt+0x754>
   113ac:	mov	r2, #166	; 0xa6
   113b0:	ldr	r1, [pc, #104]	; 11420 <__assert_fail@plt+0x758>
   113b4:	ldr	r3, [pc, #104]	; 11424 <__assert_fail@plt+0x75c>
   113b8:	add	r0, pc, r0
   113bc:	add	r1, pc, r1
   113c0:	add	r3, pc, r3
   113c4:	bl	10cc8 <__assert_fail@plt>
   113c8:	ldr	r3, [r4, #20]
   113cc:	ldr	r0, [r4]
   113d0:	str	r3, [r5]
   113d4:	bl	10c5c <fclose@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	11404 <__assert_fail@plt+0x73c>
   113e0:	bl	10c14 <__errno_location@plt>
   113e4:	ldr	r4, [r4, #4]
   113e8:	ldr	r0, [r0]
   113ec:	bl	10ba8 <strerror@plt>
   113f0:	mov	r1, r4
   113f4:	mov	r2, r0
   113f8:	ldr	r0, [pc, #40]	; 11428 <__assert_fail@plt+0x760>
   113fc:	add	r0, pc, r0
   11400:	bl	10cd4 <__assert_fail@plt+0xc>
   11404:	ldr	r0, [r5]
   11408:	adds	r0, r0, #0
   1140c:	movne	r0, #1
   11410:	pop	{r3, r4, r5, pc}
   11414:	andeq	r3, r1, r4, ror #24
   11418:	strheq	r0, [r0], -r8
   1141c:	strdeq	r2, [r0], -fp
   11420:	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   11424:	andeq	r2, r0, r4, lsl #9
   11428:	andeq	r2, r0, r8, asr #9
   1142c:	push	{r3, r4, r5, lr}
   11430:	mov	r5, r0
   11434:	mov	r0, #8
   11438:	bl	11164 <__assert_fail@plt+0x49c>
   1143c:	mov	r3, #0
   11440:	mov	r4, r0
   11444:	str	r3, [r0]
   11448:	mov	r0, r5
   1144c:	bl	116e8 <__assert_fail@plt+0xa20>
   11450:	ldr	r3, [pc, #36]	; 1147c <__assert_fail@plt+0x7b4>
   11454:	add	r3, pc, r3
   11458:	ldr	r2, [r3, #8]
   1145c:	cmp	r2, #0
   11460:	streq	r4, [r3]
   11464:	ldr	r3, [pc, #20]	; 11480 <__assert_fail@plt+0x7b8>
   11468:	add	r3, pc, r3
   1146c:	str	r4, [r3, #8]
   11470:	str	r0, [r4, #4]
   11474:	strne	r4, [r2]
   11478:	pop	{r3, r4, r5, pc}
   1147c:	muleq	r1, r0, ip
   11480:	andeq	r3, r1, ip, ror ip
   11484:	ldr	r3, [pc, #140]	; 11518 <__assert_fail@plt+0x850>
   11488:	ldr	ip, [pc, #140]	; 1151c <__assert_fail@plt+0x854>
   1148c:	add	r3, pc, r3
   11490:	push	{r4, r5, r6, lr}
   11494:	mov	r6, #1
   11498:	ldr	r4, [r3, ip]
   1149c:	ldr	r3, [r4]
   114a0:	ldr	ip, [r3, #12]
   114a4:	str	r3, [r0, #16]
   114a8:	ldr	r3, [r3, #16]
   114ac:	str	ip, [r0]
   114b0:	mov	ip, #0
   114b4:	str	r3, [r0, #4]
   114b8:	ldr	r3, [r4]
   114bc:	cmp	ip, r2
   114c0:	bge	11500 <__assert_fail@plt+0x838>
   114c4:	ldrb	r5, [r1, ip]
   114c8:	cmp	r5, #10
   114cc:	ldreq	r5, [r3, #12]
   114d0:	streq	r6, [r3, #16]
   114d4:	addeq	r5, r5, #1
   114d8:	streq	r5, [r3, #12]
   114dc:	beq	114f8 <__assert_fail@plt+0x830>
   114e0:	cmp	r5, #9
   114e4:	ldr	r5, [r3, #16]
   114e8:	addeq	r5, r5, #7
   114ec:	addne	r5, r5, #1
   114f0:	biceq	r5, r5, #7
   114f4:	str	r5, [r3, #16]
   114f8:	add	ip, ip, #1
   114fc:	b	114bc <__assert_fail@plt+0x7f4>
   11500:	ldr	r3, [r4]
   11504:	ldr	r2, [r3, #12]
   11508:	ldr	r3, [r3, #16]
   1150c:	str	r2, [r0, #8]
   11510:	str	r3, [r0, #12]
   11514:	pop	{r4, r5, r6, pc}
   11518:	andeq	r3, r1, ip, ror #22
   1151c:	strheq	r0, [r0], -r8
   11520:	push	{r4, lr}
   11524:	mov	r4, r0
   11528:	mov	r0, #20
   1152c:	bl	11164 <__assert_fail@plt+0x49c>
   11530:	add	r1, r4, #20
   11534:	mov	r3, r4
   11538:	mov	r2, r0
   1153c:	ldr	ip, [r3], #4
   11540:	cmp	r3, r1
   11544:	str	ip, [r2], #4
   11548:	bne	1153c <__assert_fail@plt+0x874>
   1154c:	pop	{r4, pc}
   11550:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11554:	mov	r1, r0
   11558:	ldr	r3, [r0, #16]
   1155c:	cmp	r3, #0
   11560:	beq	11578 <__assert_fail@plt+0x8b0>
   11564:	ldr	r2, [r3, #4]
   11568:	cmp	r2, #0
   1156c:	ldreq	r2, [pc, #124]	; 115f0 <__assert_fail@plt+0x928>
   11570:	addeq	r2, pc, r2
   11574:	b	11580 <__assert_fail@plt+0x8b8>
   11578:	ldr	r2, [pc, #116]	; 115f4 <__assert_fail@plt+0x92c>
   1157c:	add	r2, pc, r2
   11580:	ldr	r3, [r1]
   11584:	add	r0, sp, #20
   11588:	ldr	lr, [r1, #8]
   1158c:	ldr	ip, [r1, #4]
   11590:	cmp	r3, lr
   11594:	beq	115b4 <__assert_fail@plt+0x8ec>
   11598:	stm	sp, {ip, lr}
   1159c:	ldr	r1, [r1, #12]
   115a0:	str	r1, [sp, #8]
   115a4:	ldr	r1, [pc, #76]	; 115f8 <__assert_fail@plt+0x930>
   115a8:	add	r1, pc, r1
   115ac:	bl	11710 <__assert_fail@plt+0xa48>
   115b0:	b	115e4 <__assert_fail@plt+0x91c>
   115b4:	ldr	r1, [r1, #12]
   115b8:	str	ip, [sp]
   115bc:	cmp	ip, r1
   115c0:	beq	115d8 <__assert_fail@plt+0x910>
   115c4:	str	r1, [sp, #4]
   115c8:	ldr	r1, [pc, #44]	; 115fc <__assert_fail@plt+0x934>
   115cc:	add	r1, pc, r1
   115d0:	bl	11710 <__assert_fail@plt+0xa48>
   115d4:	b	115e4 <__assert_fail@plt+0x91c>
   115d8:	ldr	r1, [pc, #32]	; 11600 <__assert_fail@plt+0x938>
   115dc:	add	r1, pc, r1
   115e0:	bl	11710 <__assert_fail@plt+0xa48>
   115e4:	ldr	r0, [sp, #20]
   115e8:	add	sp, sp, #28
   115ec:	pop	{pc}		; (ldr pc, [sp], #4)
   115f0:	andeq	r2, r0, ip, ror #6
   115f4:	andeq	r2, r0, r0, ror #6
   115f8:	andeq	r2, r0, lr, lsr r3
   115fc:	andeq	r2, r0, r9, lsr #6
   11600:	andeq	r2, r0, r5, lsr #6
   11604:	push	{r4, r5, r6, r7, r8, lr}
   11608:	mov	r8, r1
   1160c:	mov	r7, r2
   11610:	mov	r6, r3
   11614:	bl	11550 <__assert_fail@plt+0x888>
   11618:	ldr	r4, [pc, #76]	; 1166c <__assert_fail@plt+0x9a4>
   1161c:	ldr	r3, [pc, #76]	; 11670 <__assert_fail@plt+0x9a8>
   11620:	mov	r2, r8
   11624:	add	r4, pc, r4
   11628:	ldr	r1, [pc, #68]	; 11674 <__assert_fail@plt+0x9ac>
   1162c:	ldr	r4, [r4, r3]
   11630:	add	r1, pc, r1
   11634:	mov	r5, r0
   11638:	ldr	r0, [r4]
   1163c:	mov	r3, r5
   11640:	bl	10c08 <fprintf@plt>
   11644:	mov	r1, r7
   11648:	mov	r2, r6
   1164c:	ldr	r0, [r4]
   11650:	bl	10c74 <vfprintf@plt>
   11654:	ldr	r1, [r4]
   11658:	mov	r0, #10
   1165c:	bl	10c80 <fputc@plt>
   11660:	mov	r0, r5
   11664:	pop	{r4, r5, r6, r7, r8, lr}
   11668:	b	10b30 <free@plt>
   1166c:	ldrdeq	r3, [r1], -r4
   11670:	andeq	r0, r0, r4, asr #1
   11674:	ldrdeq	r2, [r0], -sl
   11678:	push	{r2, r3}
   1167c:	push	{r0, r1, r2, lr}
   11680:	add	r3, sp, #20
   11684:	ldr	r2, [sp, #16]
   11688:	str	r3, [sp, #4]
   1168c:	bl	11604 <__assert_fail@plt+0x93c>
   11690:	add	sp, sp, #12
   11694:	pop	{lr}		; (ldr lr, [sp], #4)
   11698:	add	sp, sp, #8
   1169c:	bx	lr
   116a0:	ldr	r3, [pc, #24]	; 116c0 <__assert_fail@plt+0x9f8>
   116a4:	ldr	r2, [pc, #24]	; 116c4 <__assert_fail@plt+0x9fc>
   116a8:	add	r3, pc, r3
   116ac:	ldr	r3, [r3, r2]
   116b0:	ldr	r3, [r3]
   116b4:	str	r0, [r3, #4]
   116b8:	str	r1, [r3, #12]
   116bc:	bx	lr
   116c0:	andeq	r3, r1, r0, asr r9
   116c4:	strheq	r0, [r0], -r8
   116c8:	push	{r3, lr}
   116cc:	bl	10b90 <malloc@plt>
   116d0:	cmp	r0, #0
   116d4:	popne	{r3, pc}
   116d8:	ldr	r0, [pc, #4]	; 116e4 <__assert_fail@plt+0xa1c>
   116dc:	add	r0, pc, r0
   116e0:	bl	10d28 <__assert_fail@plt+0x60>
   116e4:	andeq	r2, r0, r5, lsl #3
   116e8:	push	{r3, r4, r5, lr}
   116ec:	mov	r5, r0
   116f0:	bl	10bf0 <strlen@plt>
   116f4:	add	r4, r0, #1
   116f8:	mov	r0, r4
   116fc:	bl	116c8 <__assert_fail@plt+0xa00>
   11700:	mov	r1, r5
   11704:	mov	r2, r4
   11708:	bl	10b48 <memcpy@plt>
   1170c:	pop	{r3, r4, r5, pc}
   11710:	push	{r1, r2, r3}
   11714:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   11718:	add	r6, sp, #40	; 0x28
   1171c:	ldr	r8, [sp, #36]	; 0x24
   11720:	mov	r7, r0
   11724:	mov	r5, #0
   11728:	mov	r4, #128	; 0x80
   1172c:	mov	r0, r5
   11730:	mov	r1, r4
   11734:	bl	10b60 <realloc@plt>
   11738:	subs	r5, r0, #0
   1173c:	bne	11750 <__assert_fail@plt+0xa88>
   11740:	ldr	r0, [pc, #100]	; 117ac <__assert_fail@plt+0xae4>
   11744:	mov	r1, r4
   11748:	add	r0, pc, r0
   1174c:	bl	10d28 <__assert_fail@plt+0x60>
   11750:	mov	r2, r8
   11754:	mov	r3, r6
   11758:	mov	r1, r4
   1175c:	str	r6, [sp, #4]
   11760:	bl	10c98 <vsnprintf@plt>
   11764:	mvn	r3, r0
   11768:	lsr	r3, r3, #31
   1176c:	cmp	r0, r4
   11770:	movge	r2, #0
   11774:	andlt	r2, r3, #1
   11778:	cmp	r2, #0
   1177c:	bne	11790 <__assert_fail@plt+0xac8>
   11780:	cmp	r3, #0
   11784:	addne	r4, r0, #1
   11788:	lsleq	r4, r4, #1
   1178c:	b	1172c <__assert_fail@plt+0xa64>
   11790:	str	r5, [r7]
   11794:	mov	r0, r5
   11798:	bl	10bf0 <strlen@plt>
   1179c:	add	sp, sp, #12
   117a0:	pop	{r4, r5, r6, r7, r8, lr}
   117a4:	add	sp, sp, #12
   117a8:	bx	lr
   117ac:	andeq	r2, r0, r2, ror #3
   117b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117b4:	mov	r7, r1
   117b8:	mov	r9, r0
   117bc:	bl	10bf0 <strlen@plt>
   117c0:	mov	r4, r0
   117c4:	mov	r8, r0
   117c8:	mov	r0, r7
   117cc:	bl	10bf0 <strlen@plt>
   117d0:	cmp	r4, #0
   117d4:	add	r3, r4, r0
   117d8:	mov	sl, r0
   117dc:	add	r0, r3, #2
   117e0:	ble	117fc <__assert_fail@plt+0xb34>
   117e4:	add	r2, r9, r4
   117e8:	ldrb	r2, [r2, #-1]
   117ec:	cmp	r2, #47	; 0x2f
   117f0:	addeq	r0, r3, #1
   117f4:	moveq	r6, #0
   117f8:	beq	11800 <__assert_fail@plt+0xb38>
   117fc:	mov	r6, #1
   11800:	bl	116c8 <__assert_fail@plt+0xa00>
   11804:	mov	r1, r9
   11808:	mov	r2, r4
   1180c:	mov	r5, r0
   11810:	bl	10b48 <memcpy@plt>
   11814:	cmp	r6, #0
   11818:	mov	r1, r7
   1181c:	addne	r8, r4, #1
   11820:	add	r2, sl, #1
   11824:	movne	r3, #47	; 0x2f
   11828:	add	r0, r5, r8
   1182c:	strbne	r3, [r5, r4]
   11830:	bl	10b48 <memcpy@plt>
   11834:	mov	r0, r5
   11838:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1183c:	cmp	r1, #0
   11840:	push	{r4, r5, r6, r7, r8, lr}
   11844:	mov	r4, r0
   11848:	beq	118b8 <__assert_fail@plt+0xbf0>
   1184c:	add	r7, r0, r1
   11850:	ldrb	r3, [r7, #-1]
   11854:	cmp	r3, #0
   11858:	bne	118b8 <__assert_fail@plt+0xbf0>
   1185c:	cmp	r4, r7
   11860:	bcs	118c0 <__assert_fail@plt+0xbf8>
   11864:	mov	r5, r4
   11868:	mov	r6, r5
   1186c:	ldrb	r8, [r5], #1
   11870:	cmp	r8, #0
   11874:	beq	1189c <__assert_fail@plt+0xbd4>
   11878:	bl	10bd8 <__ctype_b_loc@plt>
   1187c:	lsl	r8, r8, #1
   11880:	ldr	r3, [r0]
   11884:	ldrh	r3, [r3, r8]
   11888:	tst	r3, #16384	; 0x4000
   1188c:	beq	1189c <__assert_fail@plt+0xbd4>
   11890:	cmp	r5, r7
   11894:	mov	r6, r5
   11898:	bne	11868 <__assert_fail@plt+0xba0>
   1189c:	ldrb	r0, [r6]
   118a0:	cmp	r0, #0
   118a4:	bne	118b8 <__assert_fail@plt+0xbf0>
   118a8:	cmp	r6, r4
   118ac:	popeq	{r4, r5, r6, r7, r8, pc}
   118b0:	add	r4, r6, #1
   118b4:	b	1185c <__assert_fail@plt+0xb94>
   118b8:	mov	r0, #0
   118bc:	pop	{r4, r5, r6, r7, r8, pc}
   118c0:	mov	r0, #1
   118c4:	pop	{r4, r5, r6, r7, r8, pc}
   118c8:	push	{r0, r1, r4, r5, r6, lr}
   118cc:	mov	r3, r0
   118d0:	ldr	r5, [r1]
   118d4:	mov	r6, r1
   118d8:	add	r1, r0, r5
   118dc:	add	r4, r5, #1
   118e0:	ldrb	r0, [r0, r5]
   118e4:	cmp	r0, #102	; 0x66
   118e8:	beq	11968 <__assert_fail@plt+0xca0>
   118ec:	bhi	11918 <__assert_fail@plt+0xc50>
   118f0:	cmp	r0, #97	; 0x61
   118f4:	beq	11950 <__assert_fail@plt+0xc88>
   118f8:	bhi	1190c <__assert_fail@plt+0xc44>
   118fc:	sub	r3, r0, #48	; 0x30
   11900:	cmp	r3, #7
   11904:	bls	11970 <__assert_fail@plt+0xca8>
   11908:	b	11a18 <__assert_fail@plt+0xd50>
   1190c:	cmp	r0, #98	; 0x62
   11910:	moveq	r0, #8
   11914:	b	11a18 <__assert_fail@plt+0xd50>
   11918:	cmp	r0, #116	; 0x74
   1191c:	beq	11958 <__assert_fail@plt+0xc90>
   11920:	bhi	1193c <__assert_fail@plt+0xc74>
   11924:	cmp	r0, #110	; 0x6e
   11928:	moveq	r0, #10
   1192c:	beq	11a18 <__assert_fail@plt+0xd50>
   11930:	cmp	r0, #114	; 0x72
   11934:	moveq	r0, #13
   11938:	b	11a18 <__assert_fail@plt+0xd50>
   1193c:	cmp	r0, #118	; 0x76
   11940:	beq	11960 <__assert_fail@plt+0xc98>
   11944:	cmp	r0, #120	; 0x78
   11948:	beq	119c8 <__assert_fail@plt+0xd00>
   1194c:	b	11a18 <__assert_fail@plt+0xd50>
   11950:	mov	r0, #7
   11954:	b	11a18 <__assert_fail@plt+0xd50>
   11958:	mov	r0, #9
   1195c:	b	11a18 <__assert_fail@plt+0xd50>
   11960:	mov	r0, #11
   11964:	b	11a18 <__assert_fail@plt+0xd50>
   11968:	mov	r0, #12
   1196c:	b	11a18 <__assert_fail@plt+0xd50>
   11970:	mov	r2, #3
   11974:	mov	r0, sp
   11978:	mov	r3, #0
   1197c:	strb	r3, [sp, #3]
   11980:	bl	10c38 <strncpy@plt>
   11984:	mov	r0, sp
   11988:	add	r1, sp, #4
   1198c:	mov	r2, #8
   11990:	bl	10b00 <strtol@plt>
   11994:	ldr	r3, [sp, #4]
   11998:	mov	r4, sp
   1199c:	cmp	r3, r4
   119a0:	rsbhi	r4, r4, r3
   119a4:	bhi	11a10 <__assert_fail@plt+0xd48>
   119a8:	ldr	r0, [pc, #116]	; 11a24 <__assert_fail@plt+0xd5c>
   119ac:	mov	r2, #150	; 0x96
   119b0:	ldr	r1, [pc, #112]	; 11a28 <__assert_fail@plt+0xd60>
   119b4:	ldr	r3, [pc, #112]	; 11a2c <__assert_fail@plt+0xd64>
   119b8:	add	r0, pc, r0
   119bc:	add	r1, pc, r1
   119c0:	add	r3, pc, r3
   119c4:	bl	10cc8 <__assert_fail@plt>
   119c8:	add	r1, r3, r4
   119cc:	mov	r2, #0
   119d0:	mov	r0, sp
   119d4:	strb	r2, [sp, #2]
   119d8:	mov	r2, #2
   119dc:	mov	r5, sp
   119e0:	bl	10c38 <strncpy@plt>
   119e4:	mov	r0, sp
   119e8:	add	r1, sp, #4
   119ec:	mov	r2, #16
   119f0:	bl	10b00 <strtol@plt>
   119f4:	ldr	r3, [sp, #4]
   119f8:	cmp	r3, r5
   119fc:	rsbhi	r5, r5, r3
   11a00:	bhi	11a10 <__assert_fail@plt+0xd48>
   11a04:	ldr	r0, [pc, #36]	; 11a30 <__assert_fail@plt+0xd68>
   11a08:	add	r0, pc, r0
   11a0c:	bl	10d28 <__assert_fail@plt+0x60>
   11a10:	add	r4, r4, r5
   11a14:	uxtb	r0, r0
   11a18:	str	r4, [r6]
   11a1c:	add	sp, sp, #8
   11a20:	pop	{r4, r5, r6, pc}
   11a24:	andeq	r1, r0, lr, lsl #31
   11a28:	muleq	r0, r3, pc	; <UNPREDICTABLE>
   11a2c:	andeq	r1, r0, r2, asr pc
   11a30:	andeq	r1, r0, lr, asr #30
   11a34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11a38:	mov	r9, r1
   11a3c:	mov	r4, #0
   11a40:	str	r4, [r1]
   11a44:	ldr	r1, [pc, #208]	; 11b1c <__assert_fail@plt+0xe54>
   11a48:	mov	r5, r0
   11a4c:	mov	sl, r2
   11a50:	add	r1, pc, r1
   11a54:	bl	10af4 <strcmp@plt>
   11a58:	cmp	r0, #0
   11a5c:	beq	11a80 <__assert_fail@plt+0xdb8>
   11a60:	mov	r0, r5
   11a64:	mov	r1, r4
   11a68:	bl	10bc0 <open@plt>
   11a6c:	subs	r8, r0, #0
   11a70:	bge	11a84 <__assert_fail@plt+0xdbc>
   11a74:	bl	10c14 <__errno_location@plt>
   11a78:	ldr	r0, [r0]
   11a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a80:	mov	r8, r0
   11a84:	mov	r0, #1024	; 0x400
   11a88:	mov	r5, #0
   11a8c:	bl	116c8 <__assert_fail@plt+0xa00>
   11a90:	mov	r4, #1024	; 0x400
   11a94:	mov	r6, r0
   11a98:	mov	r0, r8
   11a9c:	add	r1, r6, r5
   11aa0:	rsb	r2, r5, r4
   11aa4:	bl	10b24 <read@plt>
   11aa8:	subs	r7, r0, #0
   11aac:	bge	11abc <__assert_fail@plt+0xdf4>
   11ab0:	bl	10c14 <__errno_location@plt>
   11ab4:	ldr	r7, [r0]
   11ab8:	b	11af4 <__assert_fail@plt+0xe2c>
   11abc:	add	r5, r5, r7
   11ac0:	beq	11af4 <__assert_fail@plt+0xe2c>
   11ac4:	cmp	r5, r4
   11ac8:	bne	11a98 <__assert_fail@plt+0xdd0>
   11acc:	lsl	r4, r5, #1
   11ad0:	mov	r0, r6
   11ad4:	mov	r1, r4
   11ad8:	bl	10b60 <realloc@plt>
   11adc:	subs	r6, r0, #0
   11ae0:	bne	11a98 <__assert_fail@plt+0xdd0>
   11ae4:	ldr	r0, [pc, #52]	; 11b20 <__assert_fail@plt+0xe58>
   11ae8:	mov	r1, r4
   11aec:	add	r0, pc, r0
   11af0:	bl	10d28 <__assert_fail@plt+0x60>
   11af4:	mov	r0, r8
   11af8:	bl	10cbc <close@plt>
   11afc:	cmp	r7, #0
   11b00:	streq	r6, [r9]
   11b04:	beq	11b10 <__assert_fail@plt+0xe48>
   11b08:	mov	r0, r6
   11b0c:	bl	10b30 <free@plt>
   11b10:	str	r4, [sl]
   11b14:	mov	r0, r7
   11b18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b1c:	andeq	r1, r0, r2, lsr #28
   11b20:	andeq	r1, r0, lr, lsr lr
   11b24:	push	{r0, r1, r2, lr}
   11b28:	add	r2, sp, #4
   11b2c:	bl	11a34 <__assert_fail@plt+0xd6c>
   11b30:	add	sp, sp, #12
   11b34:	pop	{pc}		; (ldr pc, [sp], #4)
   11b38:	push	{r0, r1, r2, r4, r5, lr}
   11b3c:	mov	r2, r1
   11b40:	add	r1, sp, #4
   11b44:	mov	r5, r0
   11b48:	bl	11a34 <__assert_fail@plt+0xd6c>
   11b4c:	ldr	r4, [pc, #64]	; 11b94 <__assert_fail@plt+0xecc>
   11b50:	add	r4, pc, r4
   11b54:	cmp	r0, #0
   11b58:	ldreq	r0, [sp, #4]
   11b5c:	beq	11b8c <__assert_fail@plt+0xec4>
   11b60:	ldr	r3, [pc, #48]	; 11b98 <__assert_fail@plt+0xed0>
   11b64:	ldr	r3, [r4, r3]
   11b68:	ldr	r4, [r3]
   11b6c:	bl	10ba8 <strerror@plt>
   11b70:	ldr	r1, [pc, #36]	; 11b9c <__assert_fail@plt+0xed4>
   11b74:	mov	r2, r5
   11b78:	add	r1, pc, r1
   11b7c:	mov	r3, r0
   11b80:	mov	r0, r4
   11b84:	bl	10c08 <fprintf@plt>
   11b88:	mov	r0, #0
   11b8c:	add	sp, sp, #12
   11b90:	pop	{r4, r5, pc}
   11b94:	andeq	r3, r1, r8, lsr #9
   11b98:	andeq	r0, r0, r4, asr #1
   11b9c:	andeq	r1, r0, r4, lsl #28
   11ba0:	push	{r0, r1, r2, lr}
   11ba4:	add	r1, sp, #4
   11ba8:	bl	11b38 <__assert_fail@plt+0xe70>
   11bac:	add	sp, sp, #12
   11bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   11bb4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11bb8:	mov	r7, r1
   11bbc:	ldr	r1, [pc, #188]	; 11c80 <__assert_fail@plt+0xfb8>
   11bc0:	mov	r4, r0
   11bc4:	add	r1, pc, r1
   11bc8:	bl	10af4 <strcmp@plt>
   11bcc:	cmp	r0, #0
   11bd0:	moveq	r6, #1
   11bd4:	beq	11bfc <__assert_fail@plt+0xf34>
   11bd8:	mov	r0, r4
   11bdc:	movw	r1, #577	; 0x241
   11be0:	movw	r2, #438	; 0x1b6
   11be4:	bl	10bc0 <open@plt>
   11be8:	subs	r6, r0, #0
   11bec:	bge	11bfc <__assert_fail@plt+0xf34>
   11bf0:	bl	10c14 <__errno_location@plt>
   11bf4:	ldr	r0, [r0]
   11bf8:	b	11c78 <__assert_fail@plt+0xfb0>
   11bfc:	ldr	r3, [r7, #4]
   11c00:	mov	r4, #0
   11c04:	mov	r5, r4
   11c08:	ubfx	r8, r3, #8, #8
   11c0c:	str	r3, [sp, #4]
   11c10:	lsl	r8, r8, #16
   11c14:	orr	r8, r8, r3, lsl #24
   11c18:	orr	r8, r8, r3, lsr #24
   11c1c:	ubfx	r3, r3, #16, #8
   11c20:	orr	r8, r8, r3, lsl #8
   11c24:	cmp	r5, r8
   11c28:	bge	11c5c <__assert_fail@plt+0xf94>
   11c2c:	mov	r0, r6
   11c30:	add	r1, r7, r5
   11c34:	rsb	r2, r5, r8
   11c38:	bl	10c50 <write@plt>
   11c3c:	subs	r4, r0, #0
   11c40:	bge	11c54 <__assert_fail@plt+0xf8c>
   11c44:	bl	10c14 <__errno_location@plt>
   11c48:	ldr	r4, [r0]
   11c4c:	rsb	r4, r4, #0
   11c50:	b	11c5c <__assert_fail@plt+0xf94>
   11c54:	add	r5, r5, r4
   11c58:	b	11c24 <__assert_fail@plt+0xf5c>
   11c5c:	cmp	r6, #1
   11c60:	beq	11c6c <__assert_fail@plt+0xfa4>
   11c64:	mov	r0, r6
   11c68:	bl	10cbc <close@plt>
   11c6c:	cmp	r4, #0
   11c70:	rsblt	r0, r4, #0
   11c74:	movge	r0, #0
   11c78:	add	sp, sp, #8
   11c7c:	pop	{r4, r5, r6, r7, r8, pc}
   11c80:	andeq	r1, r0, lr, lsr #25
   11c84:	push	{r3, r4, r5, lr}
   11c88:	mov	r5, r0
   11c8c:	bl	11bb4 <__assert_fail@plt+0xeec>
   11c90:	ldr	r4, [pc, #64]	; 11cd8 <__assert_fail@plt+0x1010>
   11c94:	add	r4, pc, r4
   11c98:	subs	r3, r0, #0
   11c9c:	beq	11cd0 <__assert_fail@plt+0x1008>
   11ca0:	ldr	r3, [pc, #52]	; 11cdc <__assert_fail@plt+0x1014>
   11ca4:	ldr	r3, [r4, r3]
   11ca8:	ldr	r4, [r3]
   11cac:	bl	10ba8 <strerror@plt>
   11cb0:	ldr	r1, [pc, #40]	; 11ce0 <__assert_fail@plt+0x1018>
   11cb4:	mov	r2, r5
   11cb8:	add	r1, pc, r1
   11cbc:	mov	r3, r0
   11cc0:	mov	r0, r4
   11cc4:	bl	10c08 <fprintf@plt>
   11cc8:	mvn	r0, #0
   11ccc:	pop	{r3, r4, r5, pc}
   11cd0:	mov	r0, r3
   11cd4:	pop	{r3, r4, r5, pc}
   11cd8:	andeq	r3, r1, r4, ror #6
   11cdc:	andeq	r0, r0, r4, asr #1
   11ce0:	andeq	r1, r0, r6, ror #25
   11ce4:	push	{r4, r5, r6, r7, r8, lr}
   11ce8:	mov	r4, r0
   11cec:	ldrb	r3, [r0]
   11cf0:	mov	r8, r1
   11cf4:	mov	r7, r2
   11cf8:	cmp	r3, #0
   11cfc:	bne	11d08 <__assert_fail@plt+0x1040>
   11d00:	mvn	r0, #0
   11d04:	pop	{r4, r5, r6, r7, r8, pc}
   11d08:	mvn	r3, #0
   11d0c:	str	r3, [r2]
   11d10:	ldrb	r5, [r0]
   11d14:	ldr	r0, [pc, #156]	; 11db8 <__assert_fail@plt+0x10f0>
   11d18:	mov	r1, r5
   11d1c:	add	r0, pc, r0
   11d20:	bl	10bfc <strchr@plt>
   11d24:	cmp	r0, #0
   11d28:	moveq	r5, r0
   11d2c:	beq	11d4c <__assert_fail@plt+0x1084>
   11d30:	ldrb	r3, [r4, #1]
   11d34:	cmp	r5, r3
   11d38:	addne	r4, r4, #1
   11d3c:	bne	11d4c <__assert_fail@plt+0x1084>
   11d40:	cmp	r5, #104	; 0x68
   11d44:	add	r4, r4, #2
   11d48:	moveq	r5, #98	; 0x62
   11d4c:	ldrb	r6, [r4]
   11d50:	cmp	r6, #0
   11d54:	beq	11d00 <__assert_fail@plt+0x1038>
   11d58:	ldr	r0, [pc, #92]	; 11dbc <__assert_fail@plt+0x10f4>
   11d5c:	mov	r1, r6
   11d60:	add	r0, pc, r0
   11d64:	bl	10bfc <strchr@plt>
   11d68:	cmp	r0, #0
   11d6c:	beq	11d00 <__assert_fail@plt+0x1038>
   11d70:	cmp	r6, #115	; 0x73
   11d74:	beq	11da0 <__assert_fail@plt+0x10d8>
   11d78:	cmp	r5, #98	; 0x62
   11d7c:	moveq	r3, #1
   11d80:	beq	11d9c <__assert_fail@plt+0x10d4>
   11d84:	cmp	r5, #104	; 0x68
   11d88:	moveq	r3, #2
   11d8c:	beq	11d9c <__assert_fail@plt+0x10d4>
   11d90:	cmp	r5, #108	; 0x6c
   11d94:	mvnne	r3, #0
   11d98:	moveq	r3, #4
   11d9c:	str	r3, [r7]
   11da0:	ldrb	r3, [r4]
   11da4:	str	r3, [r8]
   11da8:	ldrb	r0, [r4, #1]
   11dac:	subs	r0, r0, #0
   11db0:	mvnne	r0, #0
   11db4:	pop	{r4, r5, r6, r7, r8, pc}
   11db8:	andeq	r1, r0, r3, lsr #25
   11dbc:	andeq	r1, r0, r4, ror #24
   11dc0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11dc4:	subs	r4, r1, #0
   11dc8:	mov	r6, r0
   11dcc:	beq	11f20 <__assert_fail@plt+0x1258>
   11dd0:	bl	1183c <__assert_fail@plt+0xb74>
   11dd4:	subs	r5, r0, #0
   11dd8:	beq	11e30 <__assert_fail@plt+0x1168>
   11ddc:	ldr	r0, [pc, #324]	; 11f28 <__assert_fail@plt+0x1260>
   11de0:	mov	r5, r6
   11de4:	ldr	r7, [pc, #320]	; 11f2c <__assert_fail@plt+0x1264>
   11de8:	add	r4, r6, r4
   11dec:	add	r0, pc, r0
   11df0:	ldr	r6, [pc, #312]	; 11f30 <__assert_fail@plt+0x1268>
   11df4:	bl	10b0c <printf@plt>
   11df8:	add	r7, pc, r7
   11dfc:	add	r6, pc, r6
   11e00:	mov	r1, r5
   11e04:	mov	r0, r7
   11e08:	bl	10b0c <printf@plt>
   11e0c:	mov	r0, r5
   11e10:	bl	10bf0 <strlen@plt>
   11e14:	add	r0, r0, #1
   11e18:	add	r5, r5, r0
   11e1c:	cmp	r5, r4
   11e20:	bcs	11f20 <__assert_fail@plt+0x1258>
   11e24:	mov	r0, r6
   11e28:	bl	10b0c <printf@plt>
   11e2c:	b	11e00 <__assert_fail@plt+0x1138>
   11e30:	ands	r7, r4, #3
   11e34:	bne	11ec0 <__assert_fail@plt+0x11f8>
   11e38:	ldr	r0, [pc, #244]	; 11f34 <__assert_fail@plt+0x126c>
   11e3c:	mov	r5, r7
   11e40:	ldr	r8, [pc, #240]	; 11f38 <__assert_fail@plt+0x1270>
   11e44:	add	r0, pc, r0
   11e48:	ldr	r7, [pc, #236]	; 11f3c <__assert_fail@plt+0x1274>
   11e4c:	bl	10b0c <printf@plt>
   11e50:	add	r3, r4, #3
   11e54:	cmp	r4, #0
   11e58:	ldr	r9, [pc, #224]	; 11f40 <__assert_fail@plt+0x1278>
   11e5c:	add	r7, pc, r7
   11e60:	add	r8, pc, r8
   11e64:	movlt	r4, r3
   11e68:	add	r9, pc, r9
   11e6c:	asr	r4, r4, #2
   11e70:	cmp	r5, r4
   11e74:	bge	11eb8 <__assert_fail@plt+0x11f0>
   11e78:	ldr	r3, [r6, r5, lsl #2]
   11e7c:	sub	r2, r4, #1
   11e80:	cmp	r5, r2
   11e84:	mov	r0, r9
   11e88:	ubfx	r1, r3, #8, #8
   11e8c:	add	r5, r5, #1
   11e90:	str	r3, [sp, #4]
   11e94:	movge	r2, r7
   11e98:	movlt	r2, r8
   11e9c:	lsl	r1, r1, #16
   11ea0:	orr	r1, r1, r3, lsl #24
   11ea4:	orr	r1, r1, r3, lsr #24
   11ea8:	ubfx	r3, r3, #16, #8
   11eac:	orr	r1, r1, r3, lsl #8
   11eb0:	bl	10b0c <printf@plt>
   11eb4:	b	11e70 <__assert_fail@plt+0x11a8>
   11eb8:	mov	r0, #62	; 0x3e
   11ebc:	b	11f14 <__assert_fail@plt+0x124c>
   11ec0:	ldr	r0, [pc, #124]	; 11f44 <__assert_fail@plt+0x127c>
   11ec4:	ldr	r7, [pc, #124]	; 11f48 <__assert_fail@plt+0x1280>
   11ec8:	add	r0, pc, r0
   11ecc:	ldr	r8, [pc, #120]	; 11f4c <__assert_fail@plt+0x1284>
   11ed0:	bl	10b0c <printf@plt>
   11ed4:	ldr	r9, [pc, #116]	; 11f50 <__assert_fail@plt+0x1288>
   11ed8:	add	r7, pc, r7
   11edc:	add	r8, pc, r8
   11ee0:	add	r9, pc, r9
   11ee4:	cmp	r5, r4
   11ee8:	bge	11f10 <__assert_fail@plt+0x1248>
   11eec:	sub	r3, r4, #1
   11ef0:	ldrb	r1, [r6, r5]
   11ef4:	cmp	r5, r3
   11ef8:	mov	r0, r9
   11efc:	add	r5, r5, #1
   11f00:	movge	r2, r7
   11f04:	movlt	r2, r8
   11f08:	bl	10b0c <printf@plt>
   11f0c:	b	11ee4 <__assert_fail@plt+0x121c>
   11f10:	mov	r0, #93	; 0x5d
   11f14:	add	sp, sp, #12
   11f18:	pop	{r4, r5, r6, r7, r8, r9, lr}
   11f1c:	b	10c2c <putchar@plt>
   11f20:	add	sp, sp, #12
   11f24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11f28:	ldrdeq	r1, [r0], -sp
   11f2c:	ldrdeq	r1, [r0], -r5
   11f30:	andeq	r1, r0, sl, asr #24
   11f34:	andeq	r1, r0, lr, lsl #23
   11f38:	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11f3c:	andeq	r2, r0, r2, lsl #18
   11f40:	andeq	r1, r0, pc, ror #22
   11f44:	andeq	r1, r0, r8, lsl fp
   11f48:	andeq	r2, r0, r6, lsl #17
   11f4c:	andeq	r1, r0, r3, ror #22
   11f50:	andeq	r1, r0, r5, lsl #22
   11f54:	ldr	r0, [pc, #24]	; 11f74 <__assert_fail@plt+0x12ac>
   11f58:	ldr	r1, [pc, #24]	; 11f78 <__assert_fail@plt+0x12b0>
   11f5c:	push	{r3, lr}
   11f60:	add	r0, pc, r0
   11f64:	add	r1, pc, r1
   11f68:	bl	10b0c <printf@plt>
   11f6c:	mov	r0, #0
   11f70:	bl	10be4 <exit@plt>
   11f74:	andeq	r1, r0, ip, lsl #21
   11f78:	muleq	r0, r5, sl
   11f7c:	ldr	ip, [pc, #444]	; 12140 <__assert_fail@plt+0x1478>
   11f80:	subs	r8, r0, #0
   11f84:	push	{r0, r1, r2, r3, r4, r5, r6, r7, fp, lr}
   11f88:	add	ip, pc, ip
   11f8c:	mov	r6, r1
   11f90:	mov	lr, r2
   11f94:	mov	r5, r3
   11f98:	ldrne	r3, [pc, #420]	; 12144 <__assert_fail@plt+0x147c>
   11f9c:	ldreq	r3, [pc, #420]	; 12148 <__assert_fail@plt+0x1480>
   11fa0:	ldr	r3, [ip, r3]
   11fa4:	mov	r2, r6
   11fa8:	ldr	ip, [pc, #412]	; 1214c <__assert_fail@plt+0x1484>
   11fac:	mov	r6, #0
   11fb0:	ldr	r1, [pc, #408]	; 12150 <__assert_fail@plt+0x1488>
   11fb4:	mov	r7, r6
   11fb8:	add	ip, pc, ip
   11fbc:	ldr	r4, [r3]
   11fc0:	add	r1, pc, r1
   11fc4:	ldr	r0, [ip]
   11fc8:	ldrh	r3, [ip, #4]
   11fcc:	str	r0, [sp, #16]
   11fd0:	mov	r0, r4
   11fd4:	strh	r3, [sp, #20]
   11fd8:	mov	r3, lr
   11fdc:	bl	10c08 <fprintf@plt>
   11fe0:	ldr	r0, [r5, r6]
   11fe4:	cmp	r0, #0
   11fe8:	beq	12014 <__assert_fail@plt+0x134c>
   11fec:	bl	10bf0 <strlen@plt>
   11ff0:	add	r3, r5, r6
   11ff4:	add	r6, r6, #16
   11ff8:	ldr	r3, [r3, #4]
   11ffc:	cmp	r3, #1
   12000:	addne	r0, r0, #1
   12004:	addeq	r0, r0, #7
   12008:	cmp	r7, r0
   1200c:	movlt	r7, r0
   12010:	b	11fe0 <__assert_fail@plt+0x1318>
   12014:	ldr	r6, [sp, #40]	; 0x28
   12018:	ldr	r9, [pc, #308]	; 12154 <__assert_fail@plt+0x148c>
   1201c:	ldr	sl, [pc, #308]	; 12158 <__assert_fail@plt+0x1490>
   12020:	sub	r6, r6, #4
   12024:	ldr	fp, [pc, #304]	; 1215c <__assert_fail@plt+0x1494>
   12028:	add	r9, pc, r9
   1202c:	add	sl, pc, sl
   12030:	add	fp, pc, fp
   12034:	ldr	r3, [r5]
   12038:	cmp	r3, #0
   1203c:	beq	12118 <__assert_fail@plt+0x1450>
   12040:	ldr	r3, [r6, #4]
   12044:	cmp	r3, #0
   12048:	bne	12070 <__assert_fail@plt+0x13a8>
   1204c:	ldr	r3, [pc, #268]	; 12160 <__assert_fail@plt+0x1498>
   12050:	movw	r2, #450	; 0x1c2
   12054:	ldr	r0, [pc, #264]	; 12164 <__assert_fail@plt+0x149c>
   12058:	ldr	r1, [pc, #264]	; 12168 <__assert_fail@plt+0x14a0>
   1205c:	add	r3, pc, r3
   12060:	add	r0, pc, r0
   12064:	add	r3, r3, #13
   12068:	add	r1, pc, r1
   1206c:	bl	10cc8 <__assert_fail@plt>
   12070:	ldr	r2, [r5, #12]
   12074:	cmp	r2, #126	; 0x7e
   12078:	ble	1208c <__assert_fail@plt+0x13c4>
   1207c:	mov	r0, sl
   12080:	mov	r1, r4
   12084:	bl	10ca4 <fputs@plt>
   12088:	b	12098 <__assert_fail@plt+0x13d0>
   1208c:	mov	r0, r4
   12090:	mov	r1, r9
   12094:	bl	10c08 <fprintf@plt>
   12098:	ldr	r3, [r5, #4]
   1209c:	cmp	r3, #0
   120a0:	bne	120c0 <__assert_fail@plt+0x13f8>
   120a4:	ldr	r1, [pc, #192]	; 1216c <__assert_fail@plt+0x14a4>
   120a8:	mov	r0, r4
   120ac:	mov	r2, r7
   120b0:	ldr	r3, [r5]
   120b4:	add	r1, pc, r1
   120b8:	bl	10c08 <fprintf@plt>
   120bc:	b	120fc <__assert_fail@plt+0x1434>
   120c0:	ldr	r2, [r5]
   120c4:	mov	r0, r2
   120c8:	str	r2, [sp, #12]
   120cc:	bl	10bf0 <strlen@plt>
   120d0:	sub	r3, r7, #6
   120d4:	mov	r1, fp
   120d8:	ldr	r2, [sp, #12]
   120dc:	rsb	r0, r0, r3
   120e0:	ldr	r3, [pc, #136]	; 12170 <__assert_fail@plt+0x14a8>
   120e4:	str	r0, [sp]
   120e8:	mov	r0, r4
   120ec:	add	r3, pc, r3
   120f0:	str	r3, [sp, #4]
   120f4:	add	r3, sp, #16
   120f8:	bl	10c08 <fprintf@plt>
   120fc:	ldr	r1, [pc, #112]	; 12174 <__assert_fail@plt+0x14ac>
   12100:	mov	r0, r4
   12104:	ldr	r2, [r6, #4]!
   12108:	add	r5, r5, #16
   1210c:	add	r1, pc, r1
   12110:	bl	10c08 <fprintf@plt>
   12114:	b	12034 <__assert_fail@plt+0x136c>
   12118:	cmp	r8, #0
   1211c:	moveq	r0, r8
   12120:	beq	1213c <__assert_fail@plt+0x1474>
   12124:	ldr	r1, [pc, #76]	; 12178 <__assert_fail@plt+0x14b0>
   12128:	mov	r0, r4
   1212c:	mov	r2, r8
   12130:	add	r1, pc, r1
   12134:	bl	10c08 <fprintf@plt>
   12138:	mov	r0, #1
   1213c:	bl	10be4 <exit@plt>
   12140:	andeq	r3, r1, r0, ror r0
   12144:	andeq	r0, r0, r4, asr #1
   12148:	ldrdeq	r0, [r0], -r8
   1214c:	andeq	r1, r0, pc, lsr #21
   12150:	andeq	r1, r0, r3, asr #20
   12154:	andeq	r1, r0, r9, lsl sl
   12158:	andeq	r1, r0, lr, lsl #20
   1215c:	andeq	r1, r0, r0, lsr #20
   12160:			; <UNDEFINED> instruction: 0x000018b6
   12164:			; <UNDEFINED> instruction: 0x000019be
   12168:	andeq	r1, r0, r7, ror #17
   1216c:	muleq	r0, r5, r9
   12170:	andeq	r2, r0, r2, ror r6
   12174:	andeq	r1, r0, ip, asr #15
   12178:	andeq	r1, r0, fp, lsr #18
   1217c:	ldr	r3, [pc, #208]	; 12254 <__assert_fail@plt+0x158c>
   12180:	ldr	r2, [pc, #208]	; 12258 <__assert_fail@plt+0x1590>
   12184:	add	r3, pc, r3
   12188:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1218c:	add	r2, pc, r2
   12190:	ldm	r3, {r0, r7, ip}
   12194:	ldr	r1, [r3, #12]
   12198:	ldr	r3, [pc, #188]	; 1225c <__assert_fail@plt+0x1594>
   1219c:	ldr	r8, [pc, #188]	; 12260 <__assert_fail@plt+0x1598>
   121a0:	ldr	r9, [pc, #188]	; 12264 <__assert_fail@plt+0x159c>
   121a4:	ldr	r3, [r2, r3]
   121a8:	add	r8, pc, r8
   121ac:	ldr	r4, [pc, #180]	; 12268 <__assert_fail@plt+0x15a0>
   121b0:	add	r9, pc, r9
   121b4:	ldr	r3, [r3]
   121b8:	add	r4, pc, r4
   121bc:	cmp	r3, r7
   121c0:	mov	r5, r3
   121c4:	bcs	12240 <__assert_fail@plt+0x1578>
   121c8:	add	r6, r9, r0, lsl #1
   121cc:	ldrb	r2, [r3], #1
   121d0:	add	r6, r6, #1024	; 0x400
   121d4:	cmp	r2, #0
   121d8:	ldrsh	r6, [r6]
   121dc:	ldrbne	r2, [r8, r2, lsl #2]
   121e0:	moveq	r2, #1
   121e4:	cmp	r6, #0
   121e8:	movne	r1, r5
   121ec:	movne	ip, r0
   121f0:	add	sl, r4, r0, lsl #1
   121f4:	add	r5, sl, #1552	; 0x610
   121f8:	ldrsh	r6, [r5]
   121fc:	add	r6, r6, r2
   12200:	add	r6, r4, r6, lsl #1
   12204:	add	r5, r6, #1760	; 0x6e0
   12208:	add	r5, r5, #2
   1220c:	ldrsh	r5, [r5]
   12210:	cmp	r5, r0
   12214:	beq	12234 <__assert_fail@plt+0x156c>
   12218:	add	r0, sl, #1200	; 0x4b0
   1221c:	add	r0, r0, #6
   12220:	ldrsh	r0, [r0]
   12224:	cmp	r0, #90	; 0x5a
   12228:	addgt	r2, r4, r2, lsl #2
   1222c:	ldrbgt	r2, [r2, #1416]	; 0x588
   12230:	b	121f0 <__assert_fail@plt+0x1528>
   12234:	add	r2, r6, #2384	; 0x950
   12238:	ldrsh	r0, [r2, #2]
   1223c:	b	121bc <__assert_fail@plt+0x14f4>
   12240:	ldr	r3, [pc, #36]	; 1226c <__assert_fail@plt+0x15a4>
   12244:	add	r3, pc, r3
   12248:	str	ip, [r3, #8]
   1224c:	str	r1, [r3, #12]
   12250:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12254:	andeq	r2, r1, r4, lsl #31
   12258:	andeq	r2, r1, ip, ror #28
   1225c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   12260:	andeq	r1, r0, r8, asr #17
   12264:	andeq	r1, r0, r0, asr #17
   12268:			; <UNDEFINED> instruction: 0x000018b8
   1226c:	andeq	r2, r1, r4, asr #29
   12270:	ldr	r3, [pc, #84]	; 122cc <__assert_fail@plt+0x1604>
   12274:	push	{r4, lr}
   12278:	add	r3, pc, r3
   1227c:	ldr	r1, [pc, #76]	; 122d0 <__assert_fail@plt+0x1608>
   12280:	ldr	ip, [r3, #20]
   12284:	ldr	r0, [r3, #16]
   12288:	add	r1, pc, r1
   1228c:	ldr	r2, [r0, ip, lsl #2]
   12290:	ldr	r4, [r2, #16]
   12294:	ldr	r2, [r2, #8]
   12298:	str	r4, [r3, #24]
   1229c:	ldr	r4, [pc, #48]	; 122d4 <__assert_fail@plt+0x160c>
   122a0:	str	r2, [r3, #4]
   122a4:	ldr	r4, [r1, r4]
   122a8:	str	r2, [r4]
   122ac:	ldr	r4, [pc, #36]	; 122d8 <__assert_fail@plt+0x1610>
   122b0:	ldr	r0, [r0, ip, lsl #2]
   122b4:	ldr	r1, [r1, r4]
   122b8:	ldr	r0, [r0]
   122bc:	str	r0, [r1]
   122c0:	ldrb	r2, [r2]
   122c4:	strb	r2, [r3, #28]
   122c8:	pop	{r4, pc}
   122cc:	muleq	r1, r0, lr
   122d0:	andeq	r2, r1, r0, ror sp
   122d4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   122d8:	andeq	r0, r0, ip, lsr #1
   122dc:	push	{r0, r1, r2, r3}
   122e0:	ldr	r3, [pc, #60]	; 12324 <__assert_fail@plt+0x165c>
   122e4:	push	{r0, r1, r2, lr}
   122e8:	add	r2, sp, #20
   122ec:	str	r2, [sp, #4]
   122f0:	add	r3, pc, r3
   122f4:	ldr	r2, [pc, #44]	; 12328 <__assert_fail@plt+0x1660>
   122f8:	ldr	r0, [pc, #44]	; 1232c <__assert_fail@plt+0x1664>
   122fc:	ldr	r4, [r3, r2]
   12300:	add	r0, pc, r0
   12304:	ldr	r1, [r4]
   12308:	bl	10ca4 <fputs@plt>
   1230c:	ldr	r0, [r4]
   12310:	ldr	r1, [sp, #16]
   12314:	ldr	r2, [sp, #4]
   12318:	bl	10c74 <vfprintf@plt>
   1231c:	mov	r0, #1
   12320:	bl	10be4 <exit@plt>
   12324:	andeq	r2, r1, r8, lsl #26
   12328:	andeq	r0, r0, r4, asr #1
   1232c:	andeq	r1, r0, r3, asr r5
   12330:	push	{r3, lr}
   12334:	mov	r2, r0
   12338:	ldr	r3, [pc, #32]	; 12360 <__assert_fail@plt+0x1698>
   1233c:	ldr	r1, [pc, #32]	; 12364 <__assert_fail@plt+0x169c>
   12340:	add	r3, pc, r3
   12344:	ldr	r3, [r3, r1]
   12348:	ldr	r1, [pc, #24]	; 12368 <__assert_fail@plt+0x16a0>
   1234c:	ldr	r0, [r3]
   12350:	add	r1, pc, r1
   12354:	bl	10c08 <fprintf@plt>
   12358:	mov	r0, #2
   1235c:	bl	10be4 <exit@plt>
   12360:			; <UNDEFINED> instruction: 0x00012cb8
   12364:	andeq	r0, r0, r4, asr #1
   12368:	andeq	r1, r0, r8, lsl #11
   1236c:	cmp	r0, #0
   12370:	bxeq	lr
   12374:	ldr	r2, [r0, #4]
   12378:	mov	r3, #0
   1237c:	str	r3, [r0, #16]
   12380:	strb	r3, [r2]
   12384:	ldr	r2, [r0, #4]
   12388:	strb	r3, [r2, #1]
   1238c:	ldr	r2, [r0, #4]
   12390:	str	r3, [r0, #44]	; 0x2c
   12394:	str	r2, [r0, #8]
   12398:	mov	r2, #1
   1239c:	str	r2, [r0, #28]
   123a0:	ldr	r2, [pc, #32]	; 123c8 <__assert_fail@plt+0x1700>
   123a4:	add	r2, pc, r2
   123a8:	ldr	r3, [r2, #16]
   123ac:	cmp	r3, #0
   123b0:	bxeq	lr
   123b4:	ldr	r2, [r2, #20]
   123b8:	ldr	r3, [r3, r2, lsl #2]
   123bc:	cmp	r0, r3
   123c0:	bxne	lr
   123c4:	b	12270 <__assert_fail@plt+0x15a8>
   123c8:	andeq	r2, r1, r4, ror #26
   123cc:	push	{r3, r4, r5, r6, r7, lr}
   123d0:	mov	r4, r0
   123d4:	mov	r7, r1
   123d8:	bl	10c14 <__errno_location@plt>
   123dc:	ldr	r6, [r0]
   123e0:	mov	r5, r0
   123e4:	mov	r0, r4
   123e8:	bl	1236c <__assert_fail@plt+0x16a4>
   123ec:	ldr	r2, [pc, #72]	; 1243c <__assert_fail@plt+0x1774>
   123f0:	mov	r3, #1
   123f4:	str	r3, [r4, #40]	; 0x28
   123f8:	add	r2, pc, r2
   123fc:	str	r7, [r4]
   12400:	ldr	r3, [r2, #16]
   12404:	cmp	r3, #0
   12408:	beq	1241c <__assert_fail@plt+0x1754>
   1240c:	ldr	r2, [r2, #20]
   12410:	ldr	r3, [r3, r2, lsl #2]
   12414:	cmp	r4, r3
   12418:	beq	1242c <__assert_fail@plt+0x1764>
   1241c:	mov	r3, #1
   12420:	str	r3, [r4, #32]
   12424:	mov	r3, #0
   12428:	str	r3, [r4, #36]	; 0x24
   1242c:	mov	r3, #0
   12430:	str	r3, [r4, #24]
   12434:	str	r6, [r5]
   12438:	pop	{r3, r4, r5, r6, r7, pc}
   1243c:	andeq	r2, r1, r0, lsl sp
   12440:	ldr	r3, [pc, #16]	; 12458 <__assert_fail@plt+0x1790>
   12444:	ldr	r2, [pc, #16]	; 1245c <__assert_fail@plt+0x1794>
   12448:	add	r3, pc, r3
   1244c:	ldr	r3, [r3, r2]
   12450:	ldr	r0, [r3]
   12454:	bx	lr
   12458:			; <UNDEFINED> instruction: 0x00012bb0
   1245c:	strheq	r0, [r0], -ip
   12460:	ldr	r3, [pc, #16]	; 12478 <__assert_fail@plt+0x17b0>
   12464:	ldr	r2, [pc, #16]	; 1247c <__assert_fail@plt+0x17b4>
   12468:	add	r3, pc, r3
   1246c:	ldr	r3, [r3, r2]
   12470:	ldr	r0, [r3]
   12474:	bx	lr
   12478:	muleq	r1, r0, fp
   1247c:	andeq	r0, r0, ip, lsr #1
   12480:	ldr	r3, [pc, #16]	; 12498 <__assert_fail@plt+0x17d0>
   12484:	ldr	r2, [pc, #16]	; 1249c <__assert_fail@plt+0x17d4>
   12488:	add	r3, pc, r3
   1248c:	ldr	r3, [r3, r2]
   12490:	ldr	r0, [r3]
   12494:	bx	lr
   12498:	andeq	r2, r1, r0, ror fp
   1249c:	andeq	r0, r0, r8, asr #1
   124a0:	ldr	r3, [pc, #16]	; 124b8 <__assert_fail@plt+0x17f0>
   124a4:	ldr	r2, [pc, #16]	; 124bc <__assert_fail@plt+0x17f4>
   124a8:	add	r3, pc, r3
   124ac:	ldr	r3, [r3, r2]
   124b0:	ldr	r0, [r3]
   124b4:	bx	lr
   124b8:	andeq	r2, r1, r0, asr fp
   124bc:	ldrdeq	r0, [r0], -r4
   124c0:	ldr	r3, [pc, #16]	; 124d8 <__assert_fail@plt+0x1810>
   124c4:	ldr	r2, [pc, #16]	; 124dc <__assert_fail@plt+0x1814>
   124c8:	add	r3, pc, r3
   124cc:	ldr	r3, [r3, r2]
   124d0:	ldr	r0, [r3]
   124d4:	bx	lr
   124d8:	andeq	r2, r1, r0, lsr fp
   124dc:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   124e0:	ldr	r3, [pc, #16]	; 124f8 <__assert_fail@plt+0x1830>
   124e4:	ldr	r2, [pc, #16]	; 124fc <__assert_fail@plt+0x1834>
   124e8:	add	r3, pc, r3
   124ec:	ldr	r3, [r3, r2]
   124f0:	str	r0, [r3]
   124f4:	bx	lr
   124f8:	andeq	r2, r1, r0, lsl fp
   124fc:	strheq	r0, [r0], -ip
   12500:	ldr	r3, [pc, #16]	; 12518 <__assert_fail@plt+0x1850>
   12504:	ldr	r2, [pc, #16]	; 1251c <__assert_fail@plt+0x1854>
   12508:	add	r3, pc, r3
   1250c:	ldr	r3, [r3, r2]
   12510:	str	r0, [r3]
   12514:	bx	lr
   12518:	strdeq	r2, [r1], -r0
   1251c:	andeq	r0, r0, ip, lsr #1
   12520:	ldr	r3, [pc, #16]	; 12538 <__assert_fail@plt+0x1870>
   12524:	ldr	r2, [pc, #16]	; 1253c <__assert_fail@plt+0x1874>
   12528:	add	r3, pc, r3
   1252c:	ldr	r3, [r3, r2]
   12530:	str	r0, [r3]
   12534:	bx	lr
   12538:	ldrdeq	r2, [r1], -r0
   1253c:	andeq	r0, r0, r8, asr #1
   12540:	ldr	r3, [pc, #16]	; 12558 <__assert_fail@plt+0x1890>
   12544:	ldr	r2, [pc, #16]	; 1255c <__assert_fail@plt+0x1894>
   12548:	add	r3, pc, r3
   1254c:	ldr	r3, [r3, r2]
   12550:	ldr	r0, [r3]
   12554:	bx	lr
   12558:			; <UNDEFINED> instruction: 0x00012ab0
   1255c:	andeq	r0, r0, r0, asr #1
   12560:	ldr	r3, [pc, #16]	; 12578 <__assert_fail@plt+0x18b0>
   12564:	ldr	r2, [pc, #16]	; 1257c <__assert_fail@plt+0x18b4>
   12568:	add	r3, pc, r3
   1256c:	ldr	r3, [r3, r2]
   12570:	str	r0, [r3]
   12574:	bx	lr
   12578:	muleq	r1, r0, sl
   1257c:	andeq	r0, r0, r0, asr #1
   12580:	b	10b90 <malloc@plt>
   12584:	push	{r4, r5, r6, lr}
   12588:	mov	r6, r0
   1258c:	mov	r0, #48	; 0x30
   12590:	mov	r5, r1
   12594:	bl	12580 <__assert_fail@plt+0x18b8>
   12598:	subs	r4, r0, #0
   1259c:	bne	125ac <__assert_fail@plt+0x18e4>
   125a0:	ldr	r0, [pc, #56]	; 125e0 <__assert_fail@plt+0x1918>
   125a4:	add	r0, pc, r0
   125a8:	bl	12330 <__assert_fail@plt+0x1668>
   125ac:	str	r5, [r4, #12]
   125b0:	add	r0, r5, #2
   125b4:	bl	12580 <__assert_fail@plt+0x18b8>
   125b8:	cmp	r0, #0
   125bc:	str	r0, [r4, #4]
   125c0:	beq	125a0 <__assert_fail@plt+0x18d8>
   125c4:	mov	r3, #1
   125c8:	mov	r0, r4
   125cc:	str	r3, [r4, #20]
   125d0:	mov	r1, r6
   125d4:	bl	123cc <__assert_fail@plt+0x1704>
   125d8:	mov	r0, r4
   125dc:	pop	{r4, r5, r6, pc}
   125e0:	strheq	r2, [r0], -ip
   125e4:	b	10b60 <realloc@plt>
   125e8:	push	{r4, r5, r6, lr}
   125ec:	ldr	r4, [pc, #148]	; 12688 <__assert_fail@plt+0x19c0>
   125f0:	add	r4, pc, r4
   125f4:	ldr	r5, [r4, #16]
   125f8:	cmp	r5, #0
   125fc:	bne	1263c <__assert_fail@plt+0x1974>
   12600:	mov	r0, #4
   12604:	bl	12580 <__assert_fail@plt+0x18b8>
   12608:	cmp	r0, #0
   1260c:	str	r0, [r4, #16]
   12610:	bne	12620 <__assert_fail@plt+0x1958>
   12614:	ldr	r0, [pc, #112]	; 1268c <__assert_fail@plt+0x19c4>
   12618:	add	r0, pc, r0
   1261c:	bl	12330 <__assert_fail@plt+0x1668>
   12620:	mov	r1, r5
   12624:	mov	r2, #4
   12628:	bl	10c20 <memset@plt>
   1262c:	mov	r3, #1
   12630:	str	r5, [r4, #20]
   12634:	str	r3, [r4, #32]
   12638:	pop	{r4, r5, r6, pc}
   1263c:	ldr	r6, [r4, #32]
   12640:	ldr	r2, [r4, #20]
   12644:	sub	r3, r6, #1
   12648:	cmp	r2, r3
   1264c:	popcc	{r4, r5, r6, pc}
   12650:	add	r6, r6, #8
   12654:	mov	r0, r5
   12658:	lsl	r1, r6, #2
   1265c:	bl	125e4 <__assert_fail@plt+0x191c>
   12660:	cmp	r0, #0
   12664:	str	r0, [r4, #16]
   12668:	beq	12614 <__assert_fail@plt+0x194c>
   1266c:	ldr	r3, [r4, #32]
   12670:	mov	r1, #0
   12674:	mov	r2, #32
   12678:	add	r0, r0, r3, lsl #2
   1267c:	bl	10c20 <memset@plt>
   12680:	str	r6, [r4, #32]
   12684:	pop	{r4, r5, r6, pc}
   12688:	andeq	r2, r1, r8, lsl fp
   1268c:	andeq	r2, r0, r4, ror r0
   12690:	ldr	r2, [pc, #132]	; 1271c <__assert_fail@plt+0x1a54>
   12694:	push	{r3, r4, r5, r6, r7, lr}
   12698:	add	r2, pc, r2
   1269c:	ldr	r4, [pc, #124]	; 12720 <__assert_fail@plt+0x1a58>
   126a0:	mov	r5, r0
   126a4:	ldr	r3, [r2, #16]
   126a8:	add	r4, pc, r4
   126ac:	cmp	r3, #0
   126b0:	beq	126c4 <__assert_fail@plt+0x19fc>
   126b4:	ldr	r2, [r2, #20]
   126b8:	ldr	r3, [r3, r2, lsl #2]
   126bc:	cmp	r3, #0
   126c0:	bne	126f0 <__assert_fail@plt+0x1a28>
   126c4:	bl	125e8 <__assert_fail@plt+0x1920>
   126c8:	ldr	r3, [pc, #84]	; 12724 <__assert_fail@plt+0x1a5c>
   126cc:	mov	r1, #16384	; 0x4000
   126d0:	add	r3, pc, r3
   126d4:	ldr	r7, [r3, #20]
   126d8:	ldr	r6, [r3, #16]
   126dc:	ldr	r3, [pc, #68]	; 12728 <__assert_fail@plt+0x1a60>
   126e0:	ldr	r3, [r4, r3]
   126e4:	ldr	r0, [r3]
   126e8:	bl	12584 <__assert_fail@plt+0x18bc>
   126ec:	str	r0, [r6, r7, lsl #2]
   126f0:	ldr	r2, [pc, #52]	; 1272c <__assert_fail@plt+0x1a64>
   126f4:	mov	r1, r5
   126f8:	add	r2, pc, r2
   126fc:	ldr	r3, [r2, #16]
   12700:	cmp	r3, #0
   12704:	ldrne	r2, [r2, #20]
   12708:	moveq	r0, r3
   1270c:	ldrne	r0, [r3, r2, lsl #2]
   12710:	bl	123cc <__assert_fail@plt+0x1704>
   12714:	pop	{r3, r4, r5, r6, r7, lr}
   12718:	b	12270 <__assert_fail@plt+0x15a8>
   1271c:	andeq	r2, r1, r0, ror sl
   12720:	andeq	r2, r1, r0, asr r9
   12724:	andeq	r2, r1, r8, lsr sl
   12728:	andeq	r0, r0, ip, lsr #1
   1272c:	andeq	r2, r1, r0, lsl sl
   12730:	push	{r3, r4, r5, lr}
   12734:	mov	r4, r0
   12738:	bl	125e8 <__assert_fail@plt+0x1920>
   1273c:	ldr	r2, [pc, #112]	; 127b4 <__assert_fail@plt+0x1aec>
   12740:	add	r2, pc, r2
   12744:	ldr	r3, [r2, #16]
   12748:	cmp	r3, #0
   1274c:	beq	127a8 <__assert_fail@plt+0x1ae0>
   12750:	ldr	r1, [r2, #20]
   12754:	ldr	r0, [r3, r1, lsl #2]
   12758:	cmp	r0, r4
   1275c:	popeq	{r3, r4, r5, pc}
   12760:	cmp	r0, #0
   12764:	beq	12788 <__assert_fail@plt+0x1ac0>
   12768:	ldr	r0, [r2, #4]
   1276c:	ldrb	ip, [r2, #28]
   12770:	ldr	r2, [r2, #24]
   12774:	strb	ip, [r0]
   12778:	ldr	ip, [r3, r1, lsl #2]
   1277c:	str	r0, [ip, #8]
   12780:	ldr	r1, [r3, r1, lsl #2]
   12784:	str	r2, [r1, #16]
   12788:	ldr	r5, [pc, #40]	; 127b8 <__assert_fail@plt+0x1af0>
   1278c:	add	r5, pc, r5
   12790:	ldr	r2, [r5, #20]
   12794:	str	r4, [r3, r2, lsl #2]
   12798:	bl	12270 <__assert_fail@plt+0x15a8>
   1279c:	mov	r3, #1
   127a0:	str	r3, [r5, #36]	; 0x24
   127a4:	pop	{r3, r4, r5, pc}
   127a8:	cmp	r4, #0
   127ac:	bne	12788 <__assert_fail@plt+0x1ac0>
   127b0:	pop	{r3, r4, r5, pc}
   127b4:	andeq	r2, r1, r8, asr #19
   127b8:	andeq	r2, r1, ip, ror r9
   127bc:	cmp	r1, #1
   127c0:	push	{r3, r4, r5, r6, r7, lr}
   127c4:	mov	r6, r0
   127c8:	bls	12840 <__assert_fail@plt+0x1b78>
   127cc:	sub	r7, r1, #2
   127d0:	ldrb	r0, [r0, r7]
   127d4:	cmp	r0, #0
   127d8:	bne	12840 <__assert_fail@plt+0x1b78>
   127dc:	add	r1, r6, r1
   127e0:	ldrb	r5, [r1, #-1]
   127e4:	cmp	r5, #0
   127e8:	popne	{r3, r4, r5, r6, r7, pc}
   127ec:	mov	r0, #48	; 0x30
   127f0:	bl	12580 <__assert_fail@plt+0x18b8>
   127f4:	subs	r4, r0, #0
   127f8:	bne	12808 <__assert_fail@plt+0x1b40>
   127fc:	ldr	r0, [pc, #68]	; 12848 <__assert_fail@plt+0x1b80>
   12800:	add	r0, pc, r0
   12804:	bl	12330 <__assert_fail@plt+0x1668>
   12808:	mov	r3, #1
   1280c:	str	r7, [r4, #12]
   12810:	str	r6, [r4, #4]
   12814:	str	r6, [r4, #8]
   12818:	str	r5, [r4, #20]
   1281c:	str	r5, [r4]
   12820:	str	r7, [r4, #16]
   12824:	str	r5, [r4, #24]
   12828:	str	r3, [r4, #28]
   1282c:	str	r5, [r4, #40]	; 0x28
   12830:	str	r5, [r4, #44]	; 0x2c
   12834:	bl	12730 <__assert_fail@plt+0x1a68>
   12838:	mov	r0, r4
   1283c:	pop	{r3, r4, r5, r6, r7, pc}
   12840:	mov	r0, #0
   12844:	pop	{r3, r4, r5, r6, r7, pc}
   12848:			; <UNDEFINED> instruction: 0x00001ebd
   1284c:	push	{r4, r5, r6, lr}
   12850:	add	r4, r1, #2
   12854:	mov	r6, r0
   12858:	mov	r5, r1
   1285c:	mov	r0, r4
   12860:	bl	12580 <__assert_fail@plt+0x18b8>
   12864:	subs	r2, r0, #0
   12868:	movne	r3, #0
   1286c:	ldreq	r0, [pc, #84]	; 128c8 <__assert_fail@plt+0x1c00>
   12870:	addeq	r0, pc, r0
   12874:	beq	128b8 <__assert_fail@plt+0x1bf0>
   12878:	cmp	r3, r5
   1287c:	ldrbne	r1, [r6, r3]
   12880:	strbne	r1, [r2, r3]
   12884:	addne	r3, r3, #1
   12888:	bne	12878 <__assert_fail@plt+0x1bb0>
   1288c:	add	r0, r2, r3
   12890:	mov	r1, #0
   12894:	strb	r1, [r0, #1]
   12898:	mov	r0, r2
   1289c:	strb	r1, [r2, r3]
   128a0:	mov	r1, r4
   128a4:	bl	127bc <__assert_fail@plt+0x1af4>
   128a8:	subs	r3, r0, #0
   128ac:	bne	128bc <__assert_fail@plt+0x1bf4>
   128b0:	ldr	r0, [pc, #20]	; 128cc <__assert_fail@plt+0x1c04>
   128b4:	add	r0, pc, r0
   128b8:	bl	12330 <__assert_fail@plt+0x1668>
   128bc:	mov	r2, #1
   128c0:	str	r2, [r3, #20]
   128c4:	pop	{r4, r5, r6, pc}
   128c8:	andeq	r1, r0, r7, ror lr
   128cc:	andeq	r1, r0, ip, asr lr
   128d0:	push	{r4, lr}
   128d4:	mov	r4, r0
   128d8:	bl	10bf0 <strlen@plt>
   128dc:	mov	r1, r0
   128e0:	mov	r0, r4
   128e4:	pop	{r4, lr}
   128e8:	b	1284c <__assert_fail@plt+0x1b84>
   128ec:	push	{r3, r4, r5, lr}
   128f0:	subs	r5, r0, #0
   128f4:	popeq	{r3, r4, r5, pc}
   128f8:	bl	125e8 <__assert_fail@plt+0x1920>
   128fc:	ldr	r1, [pc, #116]	; 12978 <__assert_fail@plt+0x1cb0>
   12900:	add	r1, pc, r1
   12904:	ldr	r3, [r1, #16]
   12908:	cmp	r3, #0
   1290c:	beq	12958 <__assert_fail@plt+0x1c90>
   12910:	ldr	r2, [r1, #20]
   12914:	ldr	r0, [r3, r2, lsl #2]
   12918:	cmp	r0, #0
   1291c:	beq	12940 <__assert_fail@plt+0x1c78>
   12920:	ldr	ip, [r1, #4]
   12924:	ldrb	r0, [r1, #28]
   12928:	ldr	r1, [r1, #24]
   1292c:	strb	r0, [ip]
   12930:	ldr	r0, [r3, r2, lsl #2]
   12934:	str	ip, [r0, #8]
   12938:	ldr	r0, [r3, r2, lsl #2]
   1293c:	str	r1, [r0, #16]
   12940:	ldr	r1, [r3, r2, lsl #2]
   12944:	cmp	r1, #0
   12948:	ldrne	r1, [pc, #44]	; 1297c <__assert_fail@plt+0x1cb4>
   1294c:	addne	r2, r2, #1
   12950:	addne	r1, pc, r1
   12954:	strne	r2, [r1, #20]
   12958:	ldr	r4, [pc, #32]	; 12980 <__assert_fail@plt+0x1cb8>
   1295c:	add	r4, pc, r4
   12960:	ldr	r2, [r4, #20]
   12964:	str	r5, [r3, r2, lsl #2]
   12968:	bl	12270 <__assert_fail@plt+0x15a8>
   1296c:	mov	r3, #1
   12970:	str	r3, [r4, #36]	; 0x24
   12974:	pop	{r3, r4, r5, pc}
   12978:	andeq	r2, r1, r8, lsl #16
   1297c:			; <UNDEFINED> instruction: 0x000127b8
   12980:	andeq	r2, r1, ip, lsr #15
   12984:	ldr	r3, [pc, #2988]	; 13538 <__assert_fail@plt+0x2870>
   12988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1298c:	add	r3, pc, r3
   12990:	ldr	r4, [pc, #2980]	; 1353c <__assert_fail@plt+0x2874>
   12994:	sub	sp, sp, #68	; 0x44
   12998:	ldr	r2, [r3, #40]	; 0x28
   1299c:	add	r4, pc, r4
   129a0:	cmp	r2, #0
   129a4:	bne	12a48 <__assert_fail@plt+0x1d80>
   129a8:	ldr	r1, [r3]
   129ac:	mov	r2, #1
   129b0:	str	r2, [r3, #40]	; 0x28
   129b4:	cmp	r1, #0
   129b8:	streq	r2, [r3]
   129bc:	ldr	r3, [pc, #2940]	; 13540 <__assert_fail@plt+0x2878>
   129c0:	ldr	r5, [r4, r3]
   129c4:	ldr	r3, [r5]
   129c8:	cmp	r3, #0
   129cc:	ldreq	r3, [pc, #2928]	; 13544 <__assert_fail@plt+0x287c>
   129d0:	ldreq	r3, [r4, r3]
   129d4:	ldreq	r3, [r3]
   129d8:	streq	r3, [r5]
   129dc:	ldr	r3, [pc, #2916]	; 13548 <__assert_fail@plt+0x2880>
   129e0:	ldr	r3, [r4, r3]
   129e4:	ldr	r2, [r3]
   129e8:	cmp	r2, #0
   129ec:	ldreq	r2, [pc, #2904]	; 1354c <__assert_fail@plt+0x2884>
   129f0:	ldreq	r2, [r4, r2]
   129f4:	ldreq	r2, [r2]
   129f8:	streq	r2, [r3]
   129fc:	ldr	r2, [pc, #2892]	; 13550 <__assert_fail@plt+0x2888>
   12a00:	add	r2, pc, r2
   12a04:	ldr	r3, [r2, #16]
   12a08:	cmp	r3, #0
   12a0c:	beq	12a20 <__assert_fail@plt+0x1d58>
   12a10:	ldr	r2, [r2, #20]
   12a14:	ldr	r3, [r3, r2, lsl #2]
   12a18:	cmp	r3, #0
   12a1c:	bne	12a44 <__assert_fail@plt+0x1d7c>
   12a20:	bl	125e8 <__assert_fail@plt+0x1920>
   12a24:	ldr	r3, [pc, #2856]	; 13554 <__assert_fail@plt+0x288c>
   12a28:	ldr	r0, [r5]
   12a2c:	mov	r1, #16384	; 0x4000
   12a30:	add	r3, pc, r3
   12a34:	ldr	r7, [r3, #20]
   12a38:	ldr	r6, [r3, #16]
   12a3c:	bl	12584 <__assert_fail@plt+0x18bc>
   12a40:	str	r0, [r6, r7, lsl #2]
   12a44:	bl	12270 <__assert_fail@plt+0x15a8>
   12a48:	ldr	ip, [pc, #2824]	; 13558 <__assert_fail@plt+0x2890>
   12a4c:	add	ip, pc, ip
   12a50:	str	ip, [sp, #36]	; 0x24
   12a54:	ldr	ip, [pc, #2816]	; 1355c <__assert_fail@plt+0x2894>
   12a58:	add	ip, pc, ip
   12a5c:	str	ip, [sp, #40]	; 0x28
   12a60:	ldr	ip, [pc, #2808]	; 13560 <__assert_fail@plt+0x2898>
   12a64:	add	ip, pc, ip
   12a68:	str	ip, [sp, #52]	; 0x34
   12a6c:	add	ip, ip, #212	; 0xd4
   12a70:	str	ip, [sp, #60]	; 0x3c
   12a74:	ldr	ip, [sp, #36]	; 0x24
   12a78:	ldr	ip, [ip, #4]
   12a7c:	str	ip, [sp, #20]
   12a80:	ldr	ip, [sp, #36]	; 0x24
   12a84:	ldr	r7, [sp, #20]
   12a88:	ldrb	r3, [ip, #28]
   12a8c:	ldr	ip, [sp, #20]
   12a90:	strb	r3, [ip]
   12a94:	ldr	ip, [sp, #36]	; 0x24
   12a98:	ldr	r0, [ip]
   12a9c:	ldr	ip, [pc, #2752]	; 13564 <__assert_fail@plt+0x289c>
   12aa0:	add	ip, pc, ip
   12aa4:	str	ip, [sp, #48]	; 0x30
   12aa8:	ldr	ip, [sp, #48]	; 0x30
   12aac:	mov	r2, r7
   12ab0:	ldr	r5, [pc, #2736]	; 13568 <__assert_fail@plt+0x28a0>
   12ab4:	ldr	r3, [ip, #8]
   12ab8:	add	r5, pc, r5
   12abc:	ldr	r6, [ip, #12]
   12ac0:	add	r7, r5, r0, lsl #1
   12ac4:	mov	r1, r2
   12ac8:	add	r7, r7, #1024	; 0x400
   12acc:	ldrb	ip, [r1]
   12ad0:	add	r2, r2, #1
   12ad4:	ldrsh	r7, [r7]
   12ad8:	ldrb	ip, [r5, ip, lsl #2]
   12adc:	cmp	r7, #0
   12ae0:	movne	r6, r1
   12ae4:	movne	r3, r0
   12ae8:	ldr	r1, [sp, #40]	; 0x28
   12aec:	add	r8, r1, r0, lsl #1
   12af0:	add	r1, r8, #1552	; 0x610
   12af4:	ldrsh	r7, [r1]
   12af8:	ldr	r1, [sp, #40]	; 0x28
   12afc:	add	r7, r7, ip
   12b00:	add	r7, r1, r7, lsl #1
   12b04:	add	r1, r7, #1760	; 0x6e0
   12b08:	add	r1, r1, #2
   12b0c:	ldrsh	r1, [r1]
   12b10:	cmp	r1, r0
   12b14:	beq	12b34 <__assert_fail@plt+0x1e6c>
   12b18:	add	r8, r8, #1200	; 0x4b0
   12b1c:	ldrsh	r0, [r8, #6]
   12b20:	cmp	r0, #90	; 0x5a
   12b24:	ldrgt	r1, [sp, #40]	; 0x28
   12b28:	addgt	ip, r1, ip, lsl #2
   12b2c:	ldrbgt	ip, [ip, #1416]	; 0x588
   12b30:	b	12ae8 <__assert_fail@plt+0x1e20>
   12b34:	add	r7, r7, #2384	; 0x950
   12b38:	ldrsh	r0, [r7, #2]
   12b3c:	cmp	r0, #90	; 0x5a
   12b40:	bne	12ac0 <__assert_fail@plt+0x1df8>
   12b44:	ldr	r2, [pc, #2592]	; 1356c <__assert_fail@plt+0x28a4>
   12b48:	mov	r0, r3
   12b4c:	ldr	ip, [pc, #2588]	; 13570 <__assert_fail@plt+0x28a8>
   12b50:	add	r2, pc, r2
   12b54:	add	ip, pc, ip
   12b58:	str	ip, [sp, #56]	; 0x38
   12b5c:	ldr	ip, [pc, #2576]	; 13574 <__assert_fail@plt+0x28ac>
   12b60:	str	r3, [r2, #8]
   12b64:	add	ip, pc, ip
   12b68:	str	r6, [r2, #12]
   12b6c:	str	ip, [sp, #32]
   12b70:	ldr	r2, [pc, #2560]	; 13578 <__assert_fail@plt+0x28b0>
   12b74:	ldr	ip, [sp, #56]	; 0x38
   12b78:	ldr	r2, [r4, r2]
   12b7c:	add	r0, ip, r0, lsl #1
   12b80:	ldr	ip, [sp, #20]
   12b84:	add	r0, r0, #1024	; 0x400
   12b88:	str	r2, [sp, #24]
   12b8c:	str	ip, [r2]
   12b90:	ldr	r2, [pc, #2532]	; 1357c <__assert_fail@plt+0x28b4>
   12b94:	ldrsh	r3, [r0]
   12b98:	ldr	r5, [sp, #24]
   12b9c:	ldr	r7, [r4, r2]
   12ba0:	rsb	r2, ip, r6
   12ba4:	ldr	ip, [pc, #2516]	; 13580 <__assert_fail@plt+0x28b8>
   12ba8:	str	r2, [r7]
   12bac:	add	ip, pc, ip
   12bb0:	ldr	r2, [pc, #2508]	; 13584 <__assert_fail@plt+0x28bc>
   12bb4:	ldrb	r1, [r6]
   12bb8:	add	r2, pc, r2
   12bbc:	str	ip, [sp, #28]
   12bc0:	strb	r1, [r2, #28]
   12bc4:	mov	r1, #0
   12bc8:	str	r6, [r2, #4]
   12bcc:	strb	r1, [r6]
   12bd0:	cmp	r3, #21
   12bd4:	addls	pc, pc, r3, lsl #2
   12bd8:	b	1350c <__assert_fail@plt+0x2844>
   12bdc:	b	12c34 <__assert_fail@plt+0x1f6c>
   12be0:	b	12f94 <__assert_fail@plt+0x22cc>
   12be4:	b	12f94 <__assert_fail@plt+0x22cc>
   12be8:	b	12c48 <__assert_fail@plt+0x1f80>
   12bec:	b	12c54 <__assert_fail@plt+0x1f8c>
   12bf0:	b	12f94 <__assert_fail@plt+0x22cc>
   12bf4:	b	12cac <__assert_fail@plt+0x1fe4>
   12bf8:	b	12d00 <__assert_fail@plt+0x2038>
   12bfc:	b	12f94 <__assert_fail@plt+0x22cc>
   12c00:	b	12f94 <__assert_fail@plt+0x22cc>
   12c04:	b	12e60 <__assert_fail@plt+0x2198>
   12c08:	b	12f94 <__assert_fail@plt+0x22cc>
   12c0c:	b	12e84 <__assert_fail@plt+0x21bc>
   12c10:	b	12eb0 <__assert_fail@plt+0x21e8>
   12c14:	b	12f94 <__assert_fail@plt+0x22cc>
   12c18:	b	12ee8 <__assert_fail@plt+0x2220>
   12c1c:	b	12f10 <__assert_fail@plt+0x2248>
   12c20:	b	12f94 <__assert_fail@plt+0x22cc>
   12c24:	b	12fb4 <__assert_fail@plt+0x22ec>
   12c28:	b	1352c <__assert_fail@plt+0x2864>
   12c2c:	b	1352c <__assert_fail@plt+0x2864>
   12c30:	b	1352c <__assert_fail@plt+0x2864>
   12c34:	ldr	r3, [pc, #2380]	; 13588 <__assert_fail@plt+0x28c0>
   12c38:	add	r3, pc, r3
   12c3c:	ldrb	r2, [r3, #28]
   12c40:	strb	r2, [r6]
   12c44:	b	130dc <__assert_fail@plt+0x2414>
   12c48:	ldr	r0, [pc, #2364]	; 1358c <__assert_fail@plt+0x28c4>
   12c4c:	add	r0, pc, r0
   12c50:	bl	122dc <__assert_fail@plt+0x1614>
   12c54:	ldr	r8, [pc, #2356]	; 13590 <__assert_fail@plt+0x28c8>
   12c58:	add	r8, pc, r8
   12c5c:	ldr	r3, [r8, #44]	; 0x2c
   12c60:	cmp	r3, #0
   12c64:	ldr	r3, [pc, #2268]	; 13548 <__assert_fail@plt+0x2880>
   12c68:	ldr	r6, [r4, r3]
   12c6c:	bne	12c88 <__assert_fail@plt+0x1fc0>
   12c70:	ldr	r0, [pc, #2332]	; 13594 <__assert_fail@plt+0x28cc>
   12c74:	ldr	r1, [r6]
   12c78:	add	r0, pc, r0
   12c7c:	bl	10ca4 <fputs@plt>
   12c80:	mov	r3, #1
   12c84:	str	r3, [r8, #44]	; 0x2c
   12c88:	mov	r2, #1
   12c8c:	ldr	r3, [r6]
   12c90:	ldr	r0, [r5]
   12c94:	ldr	r1, [r7]
   12c98:	bl	10b6c <fwrite@plt>
   12c9c:	ldr	r3, [pc, #2292]	; 13598 <__assert_fail@plt+0x28d0>
   12ca0:	mov	r2, #1
   12ca4:	add	r3, pc, r3
   12ca8:	b	12f8c <__assert_fail@plt+0x22c4>
   12cac:	ldr	r3, [r5]
   12cb0:	ldrb	r3, [r3]
   12cb4:	cmp	r3, #98	; 0x62
   12cb8:	ldreq	r3, [pc, #2268]	; 1359c <__assert_fail@plt+0x28d4>
   12cbc:	moveq	r2, #2
   12cc0:	addeq	r3, pc, r3
   12cc4:	beq	12f8c <__assert_fail@plt+0x22c4>
   12cc8:	cmp	r3, #111	; 0x6f
   12ccc:	ldreq	r3, [pc, #2252]	; 135a0 <__assert_fail@plt+0x28d8>
   12cd0:	moveq	r2, #8
   12cd4:	addeq	r3, pc, r3
   12cd8:	beq	12f8c <__assert_fail@plt+0x22c4>
   12cdc:	cmp	r3, #100	; 0x64
   12ce0:	ldreq	r3, [pc, #2236]	; 135a4 <__assert_fail@plt+0x28dc>
   12ce4:	moveq	r2, #10
   12ce8:	addeq	r3, pc, r3
   12cec:	beq	12f8c <__assert_fail@plt+0x22c4>
   12cf0:	ldr	r3, [pc, #2224]	; 135a8 <__assert_fail@plt+0x28e0>
   12cf4:	mov	r2, #16
   12cf8:	add	r3, pc, r3
   12cfc:	b	12f8c <__assert_fail@plt+0x22c4>
   12d00:	ldr	r3, [pc, #2212]	; 135ac <__assert_fail@plt+0x28e4>
   12d04:	mov	r1, #0
   12d08:	ldr	r0, [r5]
   12d0c:	ldr	r2, [pc, r3]
   12d10:	bl	10c44 <strtoull@plt>
   12d14:	ldr	r3, [pc, #2196]	; 135b0 <__assert_fail@plt+0x28e8>
   12d18:	add	r3, pc, r3
   12d1c:	ldr	r2, [r3, #48]	; 0x30
   12d20:	cmp	r2, #0
   12d24:	mov	r6, r0
   12d28:	mov	r7, r1
   12d2c:	beq	12d44 <__assert_fail@plt+0x207c>
   12d30:	ldrd	r2, [r3, #56]	; 0x38
   12d34:	subs	r6, r6, r2
   12d38:	sbc	r7, r7, r3
   12d3c:	adds	r6, r6, #1
   12d40:	adc	r7, r7, #0
   12d44:	ldr	r3, [pc, #2152]	; 135b4 <__assert_fail@plt+0x28ec>
   12d48:	add	r3, pc, r3
   12d4c:	ldr	r3, [r3, #64]	; 0x40
   12d50:	cmp	r3, #0
   12d54:	beq	12da0 <__assert_fail@plt+0x20d8>
   12d58:	ldr	ip, [sp, #52]	; 0x34
   12d5c:	mov	r5, #0
   12d60:	ldr	sl, [pc, #2128]	; 135b8 <__assert_fail@plt+0x28f0>
   12d64:	mov	r9, #16
   12d68:	add	r8, ip, #8
   12d6c:	add	sl, pc, sl
   12d70:	ldr	ip, [sp, #60]	; 0x3c
   12d74:	cmp	r8, ip
   12d78:	beq	12da8 <__assert_fail@plt+0x20e0>
   12d7c:	ldr	r0, [r8, #-8]
   12d80:	mov	r2, #0
   12d84:	ldr	r1, [sl, #64]	; 0x40
   12d88:	add	r8, r8, #12
   12d8c:	bl	10b84 <fnmatch@plt>
   12d90:	cmp	r0, #0
   12d94:	ldreq	r9, [r8, #-16]
   12d98:	ldreq	r5, [r8, #-12]
   12d9c:	b	12d70 <__assert_fail@plt+0x20a8>
   12da0:	mov	r5, #16
   12da4:	mov	r9, r5
   12da8:	ldr	r3, [pc, #2060]	; 135bc <__assert_fail@plt+0x28f4>
   12dac:	add	r3, pc, r3
   12db0:	ldr	r3, [r3]
   12db4:	cmp	r3, #16
   12db8:	moveq	r3, r9
   12dbc:	cmp	r3, #8
   12dc0:	beq	12dfc <__assert_fail@plt+0x2134>
   12dc4:	bgt	12dd0 <__assert_fail@plt+0x2108>
   12dc8:	cmp	r3, #2
   12dcc:	b	12ddc <__assert_fail@plt+0x2114>
   12dd0:	cmp	r3, #10
   12dd4:	beq	12e18 <__assert_fail@plt+0x2150>
   12dd8:	cmp	r3, #16
   12ddc:	bne	12e38 <__assert_fail@plt+0x2170>
   12de0:	ldr	r3, [pc, #1888]	; 13548 <__assert_fail@plt+0x2880>
   12de4:	ldr	r1, [pc, #2004]	; 135c0 <__assert_fail@plt+0x28f8>
   12de8:	ldr	r3, [r4, r3]
   12dec:	add	r1, pc, r1
   12df0:	strd	r6, [sp]
   12df4:	ldr	r0, [r3]
   12df8:	b	12e30 <__assert_fail@plt+0x2168>
   12dfc:	ldr	r3, [pc, #1860]	; 13548 <__assert_fail@plt+0x2880>
   12e00:	ldr	r1, [pc, #1980]	; 135c4 <__assert_fail@plt+0x28fc>
   12e04:	ldr	r3, [r4, r3]
   12e08:	add	r1, pc, r1
   12e0c:	strd	r6, [sp]
   12e10:	ldr	r0, [r3]
   12e14:	b	12e30 <__assert_fail@plt+0x2168>
   12e18:	ldr	r3, [pc, #1832]	; 13548 <__assert_fail@plt+0x2880>
   12e1c:	ldr	r1, [pc, #1956]	; 135c8 <__assert_fail@plt+0x2900>
   12e20:	ldr	r3, [r4, r3]
   12e24:	add	r1, pc, r1
   12e28:	strd	r6, [sp]
   12e2c:	ldr	r0, [r3]
   12e30:	mov	r2, r5
   12e34:	bl	10c08 <fprintf@plt>
   12e38:	ldr	r3, [pc, #1932]	; 135cc <__assert_fail@plt+0x2904>
   12e3c:	mov	r2, #16
   12e40:	add	r3, pc, r3
   12e44:	str	r2, [r3]
   12e48:	mov	r2, #0
   12e4c:	ldr	r3, [pc, #1916]	; 135d0 <__assert_fail@plt+0x2908>
   12e50:	add	r3, pc, r3
   12e54:	strd	r6, [r3, #56]	; 0x38
   12e58:	str	r2, [r3, #48]	; 0x30
   12e5c:	b	12a74 <__assert_fail@plt+0x1dac>
   12e60:	ldr	r3, [pc, #1760]	; 13548 <__assert_fail@plt+0x2880>
   12e64:	ldr	r2, [r5]
   12e68:	ldr	r1, [pc, #1892]	; 135d4 <__assert_fail@plt+0x290c>
   12e6c:	ldr	r3, [r4, r3]
   12e70:	add	r2, r2, #2
   12e74:	add	r1, pc, r1
   12e78:	ldr	r0, [r3]
   12e7c:	bl	10c08 <fprintf@plt>
   12e80:	b	12a74 <__assert_fail@plt+0x1dac>
   12e84:	ldr	r3, [pc, #1724]	; 13548 <__assert_fail@plt+0x2880>
   12e88:	mov	r2, #1
   12e8c:	ldr	r0, [r5]
   12e90:	ldr	r1, [r7]
   12e94:	ldr	r3, [r4, r3]
   12e98:	ldr	r3, [r3]
   12e9c:	bl	10b6c <fwrite@plt>
   12ea0:	ldr	r3, [pc, #1840]	; 135d8 <__assert_fail@plt+0x2910>
   12ea4:	mov	r2, #1
   12ea8:	add	r3, pc, r3
   12eac:	b	12f8c <__assert_fail@plt+0x22c4>
   12eb0:	ldr	r3, [pc, #1680]	; 13548 <__assert_fail@plt+0x2880>
   12eb4:	mov	r2, #1
   12eb8:	ldr	r1, [r7]
   12ebc:	ldr	r0, [r5]
   12ec0:	ldr	r3, [r4, r3]
   12ec4:	ldr	r3, [r3]
   12ec8:	bl	10b6c <fwrite@plt>
   12ecc:	ldr	r0, [r5]
   12ed0:	bl	116e8 <__assert_fail@plt+0xa20>
   12ed4:	ldr	r3, [pc, #1792]	; 135dc <__assert_fail@plt+0x2914>
   12ed8:	mov	r2, #1
   12edc:	add	r3, pc, r3
   12ee0:	str	r0, [r3, #64]	; 0x40
   12ee4:	b	12f8c <__assert_fail@plt+0x22c4>
   12ee8:	ldr	r3, [pc, #1776]	; 135e0 <__assert_fail@plt+0x2918>
   12eec:	mov	r2, #1
   12ef0:	mov	r0, #32
   12ef4:	add	r3, pc, r3
   12ef8:	str	r2, [r3, #48]	; 0x30
   12efc:	ldr	r3, [pc, #1604]	; 13548 <__assert_fail@plt+0x2880>
   12f00:	ldr	r3, [r4, r3]
   12f04:	ldr	r1, [r3]
   12f08:	bl	10c80 <fputc@plt>
   12f0c:	b	12a74 <__assert_fail@plt+0x1dac>
   12f10:	ldr	r8, [pc, #1740]	; 135e4 <__assert_fail@plt+0x291c>
   12f14:	add	r8, pc, r8
   12f18:	ldr	r3, [r8, #44]	; 0x2c
   12f1c:	cmp	r3, #0
   12f20:	ldr	r3, [pc, #1568]	; 13548 <__assert_fail@plt+0x2880>
   12f24:	ldr	r6, [r4, r3]
   12f28:	bne	12f44 <__assert_fail@plt+0x227c>
   12f2c:	ldr	r0, [pc, #1716]	; 135e8 <__assert_fail@plt+0x2920>
   12f30:	ldr	r1, [r6]
   12f34:	add	r0, pc, r0
   12f38:	bl	10ca4 <fputs@plt>
   12f3c:	mov	r3, #1
   12f40:	str	r3, [r8, #44]	; 0x2c
   12f44:	ldr	r3, [r6]
   12f48:	mov	r2, #1
   12f4c:	ldr	r0, [r5]
   12f50:	ldr	r1, [r7]
   12f54:	bl	10b6c <fwrite@plt>
   12f58:	ldr	r3, [r5]
   12f5c:	ldrb	r3, [r3]
   12f60:	cmp	r3, #91	; 0x5b
   12f64:	ldreq	r2, [pc, #1664]	; 135ec <__assert_fail@plt+0x2924>
   12f68:	moveq	r1, #3
   12f6c:	addeq	r2, pc, r2
   12f70:	streq	r1, [r2]
   12f74:	and	r3, r3, #191	; 0xbf
   12f78:	cmp	r3, #59	; 0x3b
   12f7c:	bne	12a74 <__assert_fail@plt+0x1dac>
   12f80:	ldr	r3, [pc, #1640]	; 135f0 <__assert_fail@plt+0x2928>
   12f84:	mov	r2, #5
   12f88:	add	r3, pc, r3
   12f8c:	str	r2, [r3]
   12f90:	b	12a74 <__assert_fail@plt+0x1dac>
   12f94:	ldr	r3, [pc, #1452]	; 13548 <__assert_fail@plt+0x2880>
   12f98:	mov	r2, #1
   12f9c:	ldr	r0, [r5]
   12fa0:	ldr	r1, [r7]
   12fa4:	ldr	r3, [r4, r3]
   12fa8:	ldr	r3, [r3]
   12fac:	bl	10b6c <fwrite@plt>
   12fb0:	b	12a74 <__assert_fail@plt+0x1dac>
   12fb4:	ldr	ip, [sp, #28]
   12fb8:	ldr	r3, [r5]
   12fbc:	rsb	r3, r3, r6
   12fc0:	ldr	r0, [ip, #20]
   12fc4:	sub	r3, r3, #1
   12fc8:	ldr	r1, [ip, #16]
   12fcc:	str	r3, [sp, #44]	; 0x2c
   12fd0:	ldrb	r3, [ip, #28]
   12fd4:	strb	r3, [r6]
   12fd8:	ldr	r3, [r1, r0, lsl #2]
   12fdc:	ldr	r2, [r3, #44]	; 0x2c
   12fe0:	cmp	r2, #0
   12fe4:	bne	1300c <__assert_fail@plt+0x2344>
   12fe8:	ldr	r2, [r3, #16]
   12fec:	str	r2, [ip, #24]
   12ff0:	ldr	r2, [pc, #1352]	; 13540 <__assert_fail@plt+0x2878>
   12ff4:	ldr	r2, [r4, r2]
   12ff8:	ldr	r2, [r2]
   12ffc:	str	r2, [r3]
   13000:	mov	r2, #1
   13004:	ldr	r3, [r1, r0, lsl #2]
   13008:	str	r2, [r3, #44]	; 0x2c
   1300c:	ldr	r8, [pc, #1504]	; 135f4 <__assert_fail@plt+0x292c>
   13010:	ldr	r2, [r1, r0, lsl #2]
   13014:	add	r8, pc, r8
   13018:	ldr	ip, [r2, #4]
   1301c:	ldr	sl, [r8, #24]
   13020:	ldr	r3, [r8, #4]
   13024:	add	r9, ip, sl
   13028:	cmp	r3, r9
   1302c:	bhi	130e8 <__assert_fail@plt+0x2420>
   13030:	ldr	ip, [sp, #24]
   13034:	ldr	r5, [ip]
   13038:	ldr	ip, [sp, #44]	; 0x2c
   1303c:	add	r5, r5, ip
   13040:	str	r5, [r8, #4]
   13044:	bl	1217c <__assert_fail@plt+0x14b4>
   13048:	ldr	r3, [pc, #1448]	; 135f8 <__assert_fail@plt+0x2930>
   1304c:	ldr	r1, [pc, #1448]	; 135fc <__assert_fail@plt+0x2934>
   13050:	add	r3, pc, r3
   13054:	add	r1, pc, r1
   13058:	add	r3, r3, r0, lsl #1
   1305c:	add	r3, r3, #1024	; 0x400
   13060:	ldrsh	r3, [r3]
   13064:	cmp	r3, #0
   13068:	strne	r0, [r8, #8]
   1306c:	strne	r5, [r8, #12]
   13070:	add	ip, r1, r0, lsl #1
   13074:	add	r3, ip, #1552	; 0x610
   13078:	ldrsh	r2, [r3]
   1307c:	add	r2, r2, #1
   13080:	add	r2, r1, r2, lsl #1
   13084:	add	r3, r2, #1760	; 0x6e0
   13088:	add	r3, r3, #2
   1308c:	ldrsh	r3, [r3]
   13090:	cmp	r3, r0
   13094:	addne	ip, ip, #1200	; 0x4b0
   13098:	ldrshne	r0, [ip, #6]
   1309c:	bne	13070 <__assert_fail@plt+0x23a8>
   130a0:	add	r2, r2, #2384	; 0x950
   130a4:	ldr	ip, [sp, #24]
   130a8:	ldrsh	r0, [r2, #2]
   130ac:	ldr	ip, [ip]
   130b0:	cmp	r0, #90	; 0x5a
   130b4:	moveq	r0, #0
   130b8:	cmp	r0, #0
   130bc:	str	ip, [sp, #20]
   130c0:	ldrne	r3, [pc, #1336]	; 13600 <__assert_fail@plt+0x2938>
   130c4:	addne	r7, r5, #1
   130c8:	addne	r3, pc, r3
   130cc:	strne	r7, [r3, #4]
   130d0:	bne	12aa8 <__assert_fail@plt+0x1de0>
   130d4:	ldr	r3, [pc, #1320]	; 13604 <__assert_fail@plt+0x293c>
   130d8:	add	r3, pc, r3
   130dc:	ldr	r6, [r3, #12]
   130e0:	ldr	r0, [r3, #8]
   130e4:	b	12b70 <__assert_fail@plt+0x1ea8>
   130e8:	add	sl, sl, #1
   130ec:	ldr	r9, [r5]
   130f0:	add	sl, ip, sl
   130f4:	cmp	r3, sl
   130f8:	ldrhi	r0, [pc, #1288]	; 13608 <__assert_fail@plt+0x2940>
   130fc:	addhi	r0, pc, r0
   13100:	bhi	13214 <__assert_fail@plt+0x254c>
   13104:	ldr	r2, [r2, #40]	; 0x28
   13108:	rsb	r3, r9, r3
   1310c:	cmp	r2, #0
   13110:	bne	13120 <__assert_fail@plt+0x2458>
   13114:	cmp	r3, #1
   13118:	bne	134d4 <__assert_fail@plt+0x280c>
   1311c:	b	134a4 <__assert_fail@plt+0x27dc>
   13120:	sub	r8, r3, #1
   13124:	mov	r2, #0
   13128:	cmp	r2, r8
   1312c:	ldrblt	sl, [r9, r2]
   13130:	strblt	sl, [ip, r2]
   13134:	addlt	r2, r2, #1
   13138:	blt	13128 <__assert_fail@plt+0x2460>
   1313c:	ldr	r2, [r1, r0, lsl #2]
   13140:	ldr	r1, [r2, #44]	; 0x2c
   13144:	cmp	r1, #2
   13148:	ldreq	r1, [pc, #1212]	; 1360c <__assert_fail@plt+0x2944>
   1314c:	moveq	r3, #0
   13150:	addeq	r1, pc, r1
   13154:	streq	r3, [r1, #24]
   13158:	beq	13388 <__assert_fail@plt+0x26c0>
   1315c:	ldr	r1, [r2, #12]
   13160:	ldr	sl, [pc, #1192]	; 13610 <__assert_fail@plt+0x2948>
   13164:	ldr	fp, [pc, #1192]	; 13614 <__assert_fail@plt+0x294c>
   13168:	sub	r1, r1, #1
   1316c:	rsb	r1, r8, r1
   13170:	add	sl, pc, sl
   13174:	add	fp, pc, fp
   13178:	b	1319c <__assert_fail@plt+0x24d4>
   1317c:	add	r2, r1, r2
   13180:	ldr	r1, [fp, #20]
   13184:	str	r2, [fp, #4]
   13188:	ldr	r2, [fp, #16]
   1318c:	ldr	r2, [r2, r1, lsl #2]
   13190:	ldr	r1, [r2, #12]
   13194:	sub	r1, r1, #1
   13198:	rsb	r1, r8, r1
   1319c:	cmp	r1, #0
   131a0:	bne	13218 <__assert_fail@plt+0x2550>
   131a4:	ldr	r0, [sl, #20]
   131a8:	ldr	r2, [sl, #16]
   131ac:	ldr	r9, [r2, r0, lsl #2]
   131b0:	ldr	r2, [sl, #4]
   131b4:	ldr	ip, [r9, #20]
   131b8:	ldr	r0, [r9, #4]
   131bc:	cmp	ip, #0
   131c0:	streq	r1, [r9, #4]
   131c4:	rsb	r2, r0, r2
   131c8:	beq	13200 <__assert_fail@plt+0x2538>
   131cc:	ldr	r1, [r9, #12]
   131d0:	lsls	ip, r1, #1
   131d4:	strne	ip, [r9, #12]
   131d8:	addeq	r1, r1, r1, lsr #3
   131dc:	streq	r1, [r9, #12]
   131e0:	ldr	r1, [r9, #12]
   131e4:	str	r2, [sp, #16]
   131e8:	add	r1, r1, #2
   131ec:	str	r3, [sp, #12]
   131f0:	bl	125e4 <__assert_fail@plt+0x191c>
   131f4:	ldr	r2, [sp, #16]
   131f8:	ldr	r3, [sp, #12]
   131fc:	str	r0, [r9, #4]
   13200:	ldr	r1, [r9, #4]
   13204:	cmp	r1, #0
   13208:	bne	1317c <__assert_fail@plt+0x24b4>
   1320c:	ldr	r0, [pc, #1028]	; 13618 <__assert_fail@plt+0x2950>
   13210:	add	r0, pc, r0
   13214:	bl	12330 <__assert_fail@plt+0x1668>
   13218:	ldr	r2, [pc, #1020]	; 1361c <__assert_fail@plt+0x2954>
   1321c:	cmp	r1, #8192	; 0x2000
   13220:	movcc	fp, r1
   13224:	movcs	fp, #8192	; 0x2000
   13228:	add	r2, pc, r2
   1322c:	ldr	r1, [r2, #20]
   13230:	ldr	r2, [r2, #16]
   13234:	ldr	r2, [r2, r1, lsl #2]
   13238:	ldr	r1, [pc, #768]	; 13540 <__assert_fail@plt+0x2878>
   1323c:	ldr	r2, [r2, #24]
   13240:	ldr	sl, [r4, r1]
   13244:	cmp	r2, #0
   13248:	beq	132e0 <__assert_fail@plt+0x2618>
   1324c:	ldr	r2, [pc, #972]	; 13620 <__assert_fail@plt+0x2958>
   13250:	mov	r9, #0
   13254:	add	r2, pc, r2
   13258:	ldr	r0, [sl]
   1325c:	str	r2, [sp, #16]
   13260:	str	r3, [sp, #12]
   13264:	bl	10b54 <_IO_getc@plt>
   13268:	ldr	r2, [sp, #16]
   1326c:	ldr	r3, [sp, #12]
   13270:	cmn	r0, #1
   13274:	beq	13518 <__assert_fail@plt+0x2850>
   13278:	cmp	r0, #10
   1327c:	beq	132ac <__assert_fail@plt+0x25e4>
   13280:	ldr	ip, [r2, #20]
   13284:	ldr	r1, [r2, #16]
   13288:	ldr	r1, [r1, ip, lsl #2]
   1328c:	ldr	r1, [r1, #4]
   13290:	add	r1, r1, r3
   13294:	add	r1, r1, r9
   13298:	add	r9, r9, #1
   1329c:	cmp	r9, fp
   132a0:	strb	r0, [r1, #-1]
   132a4:	bcc	13258 <__assert_fail@plt+0x2590>
   132a8:	b	132d0 <__assert_fail@plt+0x2608>
   132ac:	ldr	r3, [pc, #880]	; 13624 <__assert_fail@plt+0x295c>
   132b0:	add	r3, pc, r3
   132b4:	ldr	r2, [r3, #20]
   132b8:	ldr	r3, [r3, #16]
   132bc:	ldr	r3, [r3, r2, lsl #2]
   132c0:	ldr	r3, [r3, #4]
   132c4:	add	r3, r3, r8
   132c8:	strb	r0, [r3, r9]
   132cc:	add	r9, r9, #1
   132d0:	ldr	r3, [pc, #848]	; 13628 <__assert_fail@plt+0x2960>
   132d4:	add	r3, pc, r3
   132d8:	str	r9, [r3, #24]
   132dc:	b	13370 <__assert_fail@plt+0x26a8>
   132e0:	str	r2, [sp, #16]
   132e4:	bl	10c14 <__errno_location@plt>
   132e8:	ldr	r2, [sp, #16]
   132ec:	mov	r9, r0
   132f0:	str	r2, [r0]
   132f4:	ldr	ip, [sp, #32]
   132f8:	mov	r1, #1
   132fc:	ldr	r2, [ip, #20]
   13300:	ldr	r3, [ip, #16]
   13304:	ldr	r3, [r3, r2, lsl #2]
   13308:	mov	r2, fp
   1330c:	ldr	r0, [r3, #4]
   13310:	ldr	r3, [sl]
   13314:	add	r0, r0, r8
   13318:	bl	10b78 <fread@plt>
   1331c:	ldr	ip, [sp, #32]
   13320:	cmp	r0, #0
   13324:	mov	r3, r0
   13328:	str	r0, [ip, #24]
   1332c:	bne	13370 <__assert_fail@plt+0x26a8>
   13330:	ldr	r0, [sl]
   13334:	str	r3, [sp, #12]
   13338:	bl	10b3c <ferror@plt>
   1333c:	ldr	r3, [sp, #12]
   13340:	cmp	r0, #0
   13344:	beq	13370 <__assert_fail@plt+0x26a8>
   13348:	ldr	r2, [r9]
   1334c:	cmp	r2, #4
   13350:	beq	13360 <__assert_fail@plt+0x2698>
   13354:	ldr	r0, [pc, #720]	; 1362c <__assert_fail@plt+0x2964>
   13358:	add	r0, pc, r0
   1335c:	b	13214 <__assert_fail@plt+0x254c>
   13360:	str	r3, [r9]
   13364:	ldr	r0, [sl]
   13368:	bl	10c8c <clearerr@plt>
   1336c:	b	132f4 <__assert_fail@plt+0x262c>
   13370:	ldr	r3, [pc, #696]	; 13630 <__assert_fail@plt+0x2968>
   13374:	add	r3, pc, r3
   13378:	ldr	r1, [r3, #20]
   1337c:	ldr	r2, [r3, #16]
   13380:	ldr	r3, [r3, #24]
   13384:	ldr	r2, [r2, r1, lsl #2]
   13388:	str	r3, [r2, #16]
   1338c:	ldr	r3, [pc, #672]	; 13634 <__assert_fail@plt+0x296c>
   13390:	add	r3, pc, r3
   13394:	ldr	r2, [r3, #24]
   13398:	cmp	r2, #0
   1339c:	movne	sl, #0
   133a0:	bne	133d8 <__assert_fail@plt+0x2710>
   133a4:	cmp	r8, #0
   133a8:	bne	133c4 <__assert_fail@plt+0x26fc>
   133ac:	ldr	r3, [pc, #396]	; 13540 <__assert_fail@plt+0x2878>
   133b0:	mov	sl, #1
   133b4:	ldr	r3, [r4, r3]
   133b8:	ldr	r0, [r3]
   133bc:	bl	12690 <__assert_fail@plt+0x19c8>
   133c0:	b	133d8 <__assert_fail@plt+0x2710>
   133c4:	ldr	r2, [r3, #20]
   133c8:	mov	sl, #2
   133cc:	ldr	r3, [r3, #16]
   133d0:	ldr	r3, [r3, r2, lsl #2]
   133d4:	str	sl, [r3, #44]	; 0x2c
   133d8:	ldr	r9, [pc, #600]	; 13638 <__assert_fail@plt+0x2970>
   133dc:	add	r9, pc, r9
   133e0:	ldr	r2, [r9, #16]
   133e4:	ldr	r0, [r9, #20]
   133e8:	ldr	r1, [r9, #24]
   133ec:	ldr	fp, [r2, r0, lsl #2]
   133f0:	add	r3, r8, r1
   133f4:	ldr	r2, [fp, #12]
   133f8:	cmp	r3, r2
   133fc:	bls	13430 <__assert_fail@plt+0x2768>
   13400:	add	r1, r3, r1, lsr #1
   13404:	ldr	r0, [fp, #4]
   13408:	bl	125e4 <__assert_fail@plt+0x191c>
   1340c:	ldr	r2, [r9, #20]
   13410:	ldr	r3, [r9, #16]
   13414:	str	r0, [fp, #4]
   13418:	ldr	r3, [r3, r2, lsl #2]
   1341c:	ldr	r3, [r3, #4]
   13420:	cmp	r3, #0
   13424:	ldreq	r0, [pc, #528]	; 1363c <__assert_fail@plt+0x2974>
   13428:	addeq	r0, pc, r0
   1342c:	beq	13214 <__assert_fail@plt+0x254c>
   13430:	ldr	r3, [pc, #520]	; 13640 <__assert_fail@plt+0x2978>
   13434:	cmp	sl, #1
   13438:	add	r3, pc, r3
   1343c:	ldr	r2, [r3, #24]
   13440:	ldr	r1, [r3, #20]
   13444:	add	r8, r8, r2
   13448:	ldr	r2, [r3, #16]
   1344c:	str	r8, [r3, #24]
   13450:	ldr	r0, [r2, r1, lsl #2]
   13454:	ldr	ip, [r0, #4]
   13458:	mov	r0, #0
   1345c:	strb	r0, [ip, r8]
   13460:	ldr	ip, [r2, r1, lsl #2]
   13464:	ldr	ip, [ip, #4]
   13468:	add	r8, ip, r8
   1346c:	strb	r0, [r8, #1]
   13470:	ldr	r2, [r2, r1, lsl #2]
   13474:	ldr	r2, [r2, #4]
   13478:	str	r2, [r5]
   1347c:	beq	134a4 <__assert_fail@plt+0x27dc>
   13480:	cmp	sl, #2
   13484:	beq	134d4 <__assert_fail@plt+0x280c>
   13488:	ldr	ip, [sp, #44]	; 0x2c
   1348c:	add	r7, r2, ip
   13490:	str	r7, [r3, #4]
   13494:	bl	1217c <__assert_fail@plt+0x14b4>
   13498:	ldr	r5, [r5]
   1349c:	str	r5, [sp, #20]
   134a0:	b	12aa8 <__assert_fail@plt+0x1de0>
   134a4:	ldr	r3, [pc, #408]	; 13644 <__assert_fail@plt+0x297c>
   134a8:	mov	r2, #0
   134ac:	add	r3, pc, r3
   134b0:	str	r2, [r3, #36]	; 0x24
   134b4:	ldr	r2, [r5]
   134b8:	str	r2, [r3, #4]
   134bc:	ldr	r3, [r3]
   134c0:	sub	r3, r3, #1
   134c4:	add	r3, r3, r3, lsr #31
   134c8:	asr	r3, r3, #1
   134cc:	add	r3, r3, #19
   134d0:	b	12bd0 <__assert_fail@plt+0x1f08>
   134d4:	ldr	r3, [pc, #364]	; 13648 <__assert_fail@plt+0x2980>
   134d8:	add	r3, pc, r3
   134dc:	ldr	r1, [r3, #20]
   134e0:	ldr	r2, [r3, #16]
   134e4:	ldr	r2, [r2, r1, lsl #2]
   134e8:	ldr	r6, [r2, #4]
   134ec:	ldr	r2, [r3, #24]
   134f0:	add	r6, r6, r2
   134f4:	str	r6, [r3, #4]
   134f8:	bl	1217c <__assert_fail@plt+0x14b4>
   134fc:	ldr	ip, [sp, #24]
   13500:	ldr	ip, [ip]
   13504:	str	ip, [sp, #20]
   13508:	b	12b70 <__assert_fail@plt+0x1ea8>
   1350c:	ldr	r0, [pc, #312]	; 1364c <__assert_fail@plt+0x2984>
   13510:	add	r0, pc, r0
   13514:	b	13214 <__assert_fail@plt+0x254c>
   13518:	ldr	r0, [sl]
   1351c:	bl	10b3c <ferror@plt>
   13520:	cmp	r0, #0
   13524:	beq	132d0 <__assert_fail@plt+0x2608>
   13528:	b	13354 <__assert_fail@plt+0x268c>
   1352c:	mov	r0, #0
   13530:	add	sp, sp, #68	; 0x44
   13534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13538:	andeq	r2, r1, ip, ror r7
   1353c:	andeq	r2, r1, ip, asr r6
   13540:	andeq	r0, r0, ip, lsr #1
   13544:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13548:	andeq	r0, r0, r8, asr #1
   1354c:	ldrdeq	r0, [r0], -r8
   13550:	andeq	r2, r1, r8, lsl #14
   13554:	ldrdeq	r2, [r1], -r8
   13558:			; <UNDEFINED> instruction: 0x000126bc
   1355c:	andeq	r1, r0, r8, lsl r0
   13560:	muleq	r1, ip, r3
   13564:	andeq	r2, r1, r8, ror #12
   13568:			; <UNDEFINED> instruction: 0x00000fb8
   1356c:			; <UNDEFINED> instruction: 0x000125b8
   13570:	andeq	r0, r0, ip, lsl pc
   13574:	andeq	r2, r1, r4, lsr #11
   13578:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1357c:	ldrdeq	r0, [r0], -r4
   13580:	andeq	r2, r1, ip, asr r5
   13584:	andeq	r2, r1, r0, asr r5
   13588:	ldrdeq	r2, [r1], -r0
   1358c:	andeq	r1, r0, r2, ror #21
   13590:			; <UNDEFINED> instruction: 0x000124b0
   13594:	ldrdeq	r1, [r0], -fp
   13598:	andeq	r2, r1, r4, ror #8
   1359c:	andeq	r2, r1, r8, lsl r4
   135a0:	andeq	r2, r1, r4, lsl #8
   135a4:	strdeq	r2, [r1], -r0
   135a8:	andeq	r2, r1, r0, ror #7
   135ac:	andeq	r2, r1, ip, asr #7
   135b0:	strdeq	r2, [r1], -r0
   135b4:	andeq	r2, r1, r0, asr #7
   135b8:	muleq	r1, ip, r3
   135bc:	andeq	r2, r1, ip, lsr #6
   135c0:	andeq	r1, r0, r3, ror r9
   135c4:	andeq	r1, r0, r0, ror #18
   135c8:	andeq	r1, r0, ip, asr #18
   135cc:	muleq	r1, r8, r2
   135d0:			; <UNDEFINED> instruction: 0x000122b8
   135d4:	andeq	r1, r0, r2, lsl #18
   135d8:	andeq	r2, r1, r0, ror #4
   135dc:	andeq	r2, r1, ip, lsr #4
   135e0:	andeq	r2, r1, r4, lsl r2
   135e4:	strdeq	r2, [r1], -r4
   135e8:	andeq	r1, r0, pc, lsl r8
   135ec:	muleq	r1, ip, r1
   135f0:	andeq	r2, r1, r0, lsl #3
   135f4:	strdeq	r2, [r1], -r4
   135f8:	andeq	r0, r0, r0, lsr #20
   135fc:	andeq	r0, r0, ip, lsl sl
   13600:	andeq	r2, r1, r0, asr #32
   13604:	andeq	r2, r1, r0, lsr r0
   13608:	andeq	r1, r0, r1, lsl #13
   1360c:			; <UNDEFINED> instruction: 0x00011fb8
   13610:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13614:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13618:	andeq	r1, r0, r5, lsr #11
   1361c:	andeq	r1, r1, r0, ror #29
   13620:			; <UNDEFINED> instruction: 0x00011eb4
   13624:	andeq	r1, r1, r8, asr lr
   13628:	andeq	r1, r1, r4, lsr lr
   1362c:	andeq	r1, r0, r9, lsl #9
   13630:	muleq	r1, r4, sp
   13634:	andeq	r1, r1, r8, ror sp
   13638:	andeq	r1, r1, ip, lsr #26
   1363c:	ldrdeq	r1, [r0], -r6
   13640:	ldrdeq	r1, [r1], -r0
   13644:	andeq	r1, r1, ip, asr ip
   13648:	andeq	r1, r1, r0, lsr ip
   1364c:	andeq	r1, r0, ip, lsl r3
   13650:	b	10b30 <free@plt>
   13654:	push	{r4, lr}
   13658:	subs	r4, r0, #0
   1365c:	popeq	{r4, pc}
   13660:	ldr	r2, [pc, #64]	; 136a8 <__assert_fail@plt+0x29e0>
   13664:	add	r2, pc, r2
   13668:	ldr	r3, [r2, #16]
   1366c:	cmp	r3, #0
   13670:	beq	13688 <__assert_fail@plt+0x29c0>
   13674:	ldr	r2, [r2, #20]
   13678:	ldr	r1, [r3, r2, lsl #2]
   1367c:	cmp	r4, r1
   13680:	moveq	r1, #0
   13684:	streq	r1, [r3, r2, lsl #2]
   13688:	ldr	r3, [r4, #20]
   1368c:	cmp	r3, #0
   13690:	beq	1369c <__assert_fail@plt+0x29d4>
   13694:	ldr	r0, [r4, #4]
   13698:	bl	13650 <__assert_fail@plt+0x2988>
   1369c:	mov	r0, r4
   136a0:	pop	{r4, lr}
   136a4:	b	13650 <__assert_fail@plt+0x2988>
   136a8:	andeq	r1, r1, r4, lsr #21
   136ac:	push	{r4, lr}
   136b0:	ldr	r4, [pc, #108]	; 13724 <__assert_fail@plt+0x2a5c>
   136b4:	add	r4, pc, r4
   136b8:	ldr	r3, [r4, #16]
   136bc:	cmp	r3, #0
   136c0:	popeq	{r4, pc}
   136c4:	ldr	r2, [r4, #20]
   136c8:	ldr	r0, [r3, r2, lsl #2]
   136cc:	cmp	r0, #0
   136d0:	popeq	{r4, pc}
   136d4:	bl	13654 <__assert_fail@plt+0x298c>
   136d8:	ldr	r2, [r4, #20]
   136dc:	ldr	r3, [r4, #16]
   136e0:	mov	r1, #0
   136e4:	cmp	r2, r1
   136e8:	str	r1, [r3, r2, lsl #2]
   136ec:	subne	r2, r2, #1
   136f0:	strne	r2, [r4, #20]
   136f4:	cmp	r3, #0
   136f8:	popeq	{r4, pc}
   136fc:	ldr	r4, [pc, #36]	; 13728 <__assert_fail@plt+0x2a60>
   13700:	add	r4, pc, r4
   13704:	ldr	r2, [r4, #20]
   13708:	ldr	r3, [r3, r2, lsl #2]
   1370c:	cmp	r3, #0
   13710:	popeq	{r4, pc}
   13714:	bl	12270 <__assert_fail@plt+0x15a8>
   13718:	mov	r3, #1
   1371c:	str	r3, [r4, #36]	; 0x24
   13720:	pop	{r4, pc}
   13724:	andeq	r1, r1, r4, asr sl
   13728:	andeq	r1, r1, r8, lsl #20
   1372c:	push	{r4, r5, r6, lr}
   13730:	mov	r6, #0
   13734:	ldr	r4, [pc, #132]	; 137c0 <__assert_fail@plt+0x2af8>
   13738:	ldr	r5, [pc, #132]	; 137c4 <__assert_fail@plt+0x2afc>
   1373c:	add	r4, pc, r4
   13740:	add	r5, pc, r5
   13744:	ldr	r3, [r4, #16]
   13748:	cmp	r3, #0
   1374c:	beq	13778 <__assert_fail@plt+0x2ab0>
   13750:	ldr	r2, [r4, #20]
   13754:	ldr	r0, [r3, r2, lsl #2]
   13758:	cmp	r0, #0
   1375c:	beq	13778 <__assert_fail@plt+0x2ab0>
   13760:	bl	13654 <__assert_fail@plt+0x298c>
   13764:	ldr	r2, [r4, #20]
   13768:	ldr	r3, [r4, #16]
   1376c:	str	r6, [r3, r2, lsl #2]
   13770:	bl	136ac <__assert_fail@plt+0x29e4>
   13774:	b	13744 <__assert_fail@plt+0x2a7c>
   13778:	mov	r0, r3
   1377c:	bl	13650 <__assert_fail@plt+0x2988>
   13780:	ldr	r3, [pc, #64]	; 137c8 <__assert_fail@plt+0x2b00>
   13784:	mov	r0, #0
   13788:	add	r3, pc, r3
   1378c:	str	r0, [r3]
   13790:	str	r0, [r3, #16]
   13794:	str	r0, [r3, #20]
   13798:	str	r0, [r3, #32]
   1379c:	str	r0, [r3, #4]
   137a0:	str	r0, [r3, #40]	; 0x28
   137a4:	ldr	r3, [pc, #32]	; 137cc <__assert_fail@plt+0x2b04>
   137a8:	ldr	r3, [r5, r3]
   137ac:	str	r0, [r3]
   137b0:	ldr	r3, [pc, #24]	; 137d0 <__assert_fail@plt+0x2b08>
   137b4:	ldr	r3, [r5, r3]
   137b8:	str	r0, [r3]
   137bc:	pop	{r4, r5, r6, pc}
   137c0:	andeq	r1, r1, ip, asr #19
   137c4:			; <UNDEFINED> instruction: 0x000118b8
   137c8:	andeq	r1, r1, r0, lsl #19
   137cc:	andeq	r0, r0, ip, lsr #1
   137d0:	andeq	r0, r0, r8, asr #1
   137d4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   137d8:	mov	r7, r0
   137dc:	ldr	r6, [pc, #76]	; 13830 <__assert_fail@plt+0x2b68>
   137e0:	mov	r8, r1
   137e4:	ldr	r5, [pc, #72]	; 13834 <__assert_fail@plt+0x2b6c>
   137e8:	mov	r9, r2
   137ec:	add	r6, pc, r6
   137f0:	bl	10ad4 <strcmp@plt-0x20>
   137f4:	add	r5, pc, r5
   137f8:	rsb	r6, r5, r6
   137fc:	asrs	r6, r6, #2
   13800:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   13804:	sub	r5, r5, #4
   13808:	mov	r4, #0
   1380c:	add	r4, r4, #1
   13810:	ldr	r3, [r5, #4]!
   13814:	mov	r0, r7
   13818:	mov	r1, r8
   1381c:	mov	r2, r9
   13820:	blx	r3
   13824:	cmp	r4, r6
   13828:	bne	1380c <__assert_fail@plt+0x2b44>
   1382c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13830:	andeq	r1, r1, ip, lsl #12
   13834:	andeq	r1, r1, r0, lsl #12
   13838:	bx	lr

Disassembly of section .fini:

0001383c <.fini>:
   1383c:	push	{r3, lr}
   13840:	pop	{r3, pc}
