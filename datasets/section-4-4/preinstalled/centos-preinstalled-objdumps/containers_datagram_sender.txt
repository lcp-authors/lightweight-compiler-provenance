
centos-preinstalled/containers_datagram_sender:     file format elf32-littlearm


Disassembly of section .init:

0001088c <_init@@Base>:
   1088c:	push	{r3, lr}
   10890:	bl	10af4 <_start@@Base+0x3c>
   10894:	pop	{r3, pc}

Disassembly of section .plt:

00010898 <vc_container_net_maximum_datagram_size@plt-0x14>:
   10898:	push	{lr}		; (str lr, [sp, #-4]!)
   1089c:	ldr	lr, [pc, #4]	; 108a8 <_init@@Base+0x1c>
   108a0:	add	lr, pc, lr
   108a4:	ldr	pc, [lr, #8]!
   108a8:	andeq	r0, r1, r8, asr r7

000108ac <vc_container_net_maximum_datagram_size@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #16, 20	; 0x10000
   108b4:	ldr	pc, [ip, #1880]!	; 0x758

000108b8 <fgets@plt>:
   108b8:	add	ip, pc, #0, 12
   108bc:	add	ip, ip, #16, 20	; 0x10000
   108c0:	ldr	pc, [ip, #1872]!	; 0x750

000108c4 <__stack_chk_fail@plt>:
   108c4:	add	ip, pc, #0, 12
   108c8:	add	ip, ip, #16, 20	; 0x10000
   108cc:	ldr	pc, [ip, #1864]!	; 0x748

000108d0 <vc_container_net_write@plt>:
   108d0:	add	ip, pc, #0, 12
   108d4:	add	ip, ip, #16, 20	; 0x10000
   108d8:	ldr	pc, [ip, #1856]!	; 0x740

000108dc <malloc@plt>:
   108dc:	add	ip, pc, #0, 12
   108e0:	add	ip, ip, #16, 20	; 0x10000
   108e4:	ldr	pc, [ip, #1848]!	; 0x738

000108e8 <__libc_start_main@plt>:
   108e8:	add	ip, pc, #0, 12
   108ec:	add	ip, ip, #16, 20	; 0x10000
   108f0:	ldr	pc, [ip, #1840]!	; 0x730

000108f4 <__gmon_start__@plt>:
   108f4:	add	ip, pc, #0, 12
   108f8:	add	ip, ip, #16, 20	; 0x10000
   108fc:	ldr	pc, [ip, #1832]!	; 0x728

00010900 <strlen@plt>:
   10900:	add	ip, pc, #0, 12
   10904:	add	ip, ip, #16, 20	; 0x10000
   10908:	ldr	pc, [ip, #1824]!	; 0x720

0001090c <vc_container_net_status@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #16, 20	; 0x10000
   10914:	ldr	pc, [ip, #1816]!	; 0x718

00010918 <__printf_chk@plt>:
   10918:	add	ip, pc, #0, 12
   1091c:	add	ip, ip, #16, 20	; 0x10000
   10920:	ldr	pc, [ip, #1808]!	; 0x710

00010924 <vc_container_net_open@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #16, 20	; 0x10000
   1092c:	ldr	pc, [ip, #1800]!	; 0x708

00010930 <vc_container_net_close@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #16, 20	; 0x10000
   10938:	ldr	pc, [ip, #1792]!	; 0x700

0001093c <abort@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #16, 20	; 0x10000
   10944:	ldr	pc, [ip, #1784]!	; 0x6f8

Disassembly of section .text:

00010948 <main@@Base>:
   10948:	push	{r4, r5, r6, r7, r8, lr}
   1094c:	cmp	r0, #2
   10950:	ldr	r7, [pc, #320]	; 10a98 <main@@Base+0x150>
   10954:	sub	sp, sp, #8
   10958:	ldr	r3, [pc, #316]	; 10a9c <main@@Base+0x154>
   1095c:	add	r7, pc, r7
   10960:	ldr	r8, [r7, r3]
   10964:	ldr	r3, [r8]
   10968:	str	r3, [sp, #4]
   1096c:	ble	10a1c <main@@Base+0xd4>
   10970:	ldr	r0, [r1, #4]
   10974:	mov	r2, #0
   10978:	ldr	r1, [r1, #8]
   1097c:	mov	r3, sp
   10980:	bl	10924 <vc_container_net_open@plt>
   10984:	subs	r5, r0, #0
   10988:	beq	10a38 <main@@Base+0xf0>
   1098c:	bl	108ac <vc_container_net_maximum_datagram_size@plt>
   10990:	mov	r6, r0
   10994:	bl	108dc <malloc@plt>
   10998:	subs	r4, r0, #0
   1099c:	beq	10a74 <main@@Base+0x12c>
   109a0:	ldr	r1, [pc, #248]	; 10aa0 <main@@Base+0x158>
   109a4:	mov	r0, #1
   109a8:	mov	r2, r6
   109ac:	add	r1, pc, r1
   109b0:	bl	10918 <__printf_chk@plt>
   109b4:	ldr	r3, [pc, #232]	; 10aa4 <main@@Base+0x15c>
   109b8:	ldr	r7, [r7, r3]
   109bc:	b	109e0 <main@@Base+0x98>
   109c0:	mov	r0, r4
   109c4:	bl	10900 <strlen@plt>
   109c8:	mov	r1, r4
   109cc:	mov	r2, r0
   109d0:	mov	r0, r5
   109d4:	bl	108d0 <vc_container_net_write@plt>
   109d8:	cmp	r0, #0
   109dc:	beq	10a54 <main@@Base+0x10c>
   109e0:	mov	r0, r4
   109e4:	mov	r1, r6
   109e8:	ldr	r2, [r7]
   109ec:	bl	108b8 <fgets@plt>
   109f0:	cmp	r0, #0
   109f4:	bne	109c0 <main@@Base+0x78>
   109f8:	mov	r0, r5
   109fc:	bl	10930 <vc_container_net_close@plt>
   10a00:	mov	r0, #0
   10a04:	ldr	r2, [sp, #4]
   10a08:	ldr	r3, [r8]
   10a0c:	cmp	r2, r3
   10a10:	bne	10a94 <main@@Base+0x14c>
   10a14:	add	sp, sp, #8
   10a18:	pop	{r4, r5, r6, r7, r8, pc}
   10a1c:	ldr	r2, [r1]
   10a20:	mov	r0, #1
   10a24:	ldr	r1, [pc, #124]	; 10aa8 <main@@Base+0x160>
   10a28:	add	r1, pc, r1
   10a2c:	bl	10918 <__printf_chk@plt>
   10a30:	mov	r0, #1
   10a34:	b	10a04 <main@@Base+0xbc>
   10a38:	ldr	r1, [pc, #108]	; 10aac <main@@Base+0x164>
   10a3c:	mov	r0, #1
   10a40:	ldr	r2, [sp]
   10a44:	add	r1, pc, r1
   10a48:	bl	10918 <__printf_chk@plt>
   10a4c:	mov	r0, #2
   10a50:	b	10a04 <main@@Base+0xbc>
   10a54:	mov	r0, r5
   10a58:	bl	1090c <vc_container_net_status@plt>
   10a5c:	ldr	r1, [pc, #76]	; 10ab0 <main@@Base+0x168>
   10a60:	add	r1, pc, r1
   10a64:	mov	r2, r0
   10a68:	mov	r0, #1
   10a6c:	bl	10918 <__printf_chk@plt>
   10a70:	b	109f8 <main@@Base+0xb0>
   10a74:	mov	r0, r5
   10a78:	bl	10930 <vc_container_net_close@plt>
   10a7c:	ldr	r1, [pc, #48]	; 10ab4 <main@@Base+0x16c>
   10a80:	mov	r0, #1
   10a84:	add	r1, pc, r1
   10a88:	bl	10918 <__printf_chk@plt>
   10a8c:	mov	r0, #3
   10a90:	b	10a04 <main@@Base+0xbc>
   10a94:	bl	108c4 <__stack_chk_fail@plt>
   10a98:	muleq	r1, ip, r6
   10a9c:	andeq	r0, r0, r0, asr #32
   10aa0:	andeq	r0, r0, ip, lsl #6
   10aa4:	andeq	r0, r0, r8, asr #32
   10aa8:	andeq	r0, r0, r4, lsr r2
   10aac:	andeq	r0, r0, r4, lsr r2
   10ab0:	andeq	r0, r0, ip, lsl #5
   10ab4:	andeq	r0, r0, r8, lsl r2

00010ab8 <_start@@Base>:
   10ab8:	mov	fp, #0
   10abc:	mov	lr, #0
   10ac0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ac4:	mov	r2, sp
   10ac8:	push	{r2}		; (str r2, [sp, #-4]!)
   10acc:	push	{r0}		; (str r0, [sp, #-4]!)
   10ad0:	ldr	ip, [pc, #16]	; 10ae8 <_start@@Base+0x30>
   10ad4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ad8:	ldr	r0, [pc, #12]	; 10aec <_start@@Base+0x34>
   10adc:	ldr	r3, [pc, #12]	; 10af0 <_start@@Base+0x38>
   10ae0:	bl	108e8 <__libc_start_main@plt>
   10ae4:	bl	1093c <abort@plt>
   10ae8:	andeq	r0, r1, r0, asr ip
   10aec:	andeq	r0, r1, r8, asr #18
   10af0:	andeq	r0, r1, ip, ror #23
   10af4:	ldr	r3, [pc, #20]	; 10b10 <_start@@Base+0x58>
   10af8:	ldr	r2, [pc, #20]	; 10b14 <_start@@Base+0x5c>
   10afc:	add	r3, pc, r3
   10b00:	ldr	r2, [r3, r2]
   10b04:	cmp	r2, #0
   10b08:	bxeq	lr
   10b0c:	b	108f4 <__gmon_start__@plt>
   10b10:	strdeq	r0, [r1], -ip
   10b14:	andeq	r0, r0, r4, asr #32
   10b18:	push	{r3, lr}
   10b1c:	movw	r0, #4176	; 0x1050
   10b20:	ldr	r3, [pc, #36]	; 10b4c <_start@@Base+0x94>
   10b24:	movt	r0, #2
   10b28:	rsb	r3, r0, r3
   10b2c:	cmp	r3, #6
   10b30:	popls	{r3, pc}
   10b34:	movw	r3, #0
   10b38:	movt	r3, #0
   10b3c:	cmp	r3, #0
   10b40:	popeq	{r3, pc}
   10b44:	blx	r3
   10b48:	pop	{r3, pc}
   10b4c:	andeq	r1, r2, r3, asr r0
   10b50:	push	{r3, lr}
   10b54:	movw	r0, #4176	; 0x1050
   10b58:	movw	r3, #4176	; 0x1050
   10b5c:	movt	r0, #2
   10b60:	movt	r3, #2
   10b64:	rsb	r3, r0, r3
   10b68:	asr	r3, r3, #2
   10b6c:	add	r3, r3, r3, lsr #31
   10b70:	asrs	r1, r3, #1
   10b74:	popeq	{r3, pc}
   10b78:	movw	r2, #0
   10b7c:	movt	r2, #0
   10b80:	cmp	r2, #0
   10b84:	popeq	{r3, pc}
   10b88:	blx	r2
   10b8c:	pop	{r3, pc}
   10b90:	push	{r4, lr}
   10b94:	movw	r4, #4176	; 0x1050
   10b98:	movt	r4, #2
   10b9c:	ldrb	r3, [r4]
   10ba0:	cmp	r3, #0
   10ba4:	popne	{r4, pc}
   10ba8:	bl	10b18 <_start@@Base+0x60>
   10bac:	mov	r3, #1
   10bb0:	strb	r3, [r4]
   10bb4:	pop	{r4, pc}
   10bb8:	movw	r0, #3796	; 0xed4
   10bbc:	movt	r0, #2
   10bc0:	push	{r3, lr}
   10bc4:	ldr	r3, [r0]
   10bc8:	cmp	r3, #0
   10bcc:	beq	10be4 <_start@@Base+0x12c>
   10bd0:	movw	r3, #0
   10bd4:	movt	r3, #0
   10bd8:	cmp	r3, #0
   10bdc:	beq	10be4 <_start@@Base+0x12c>
   10be0:	blx	r3
   10be4:	pop	{r3, lr}
   10be8:	b	10b50 <_start@@Base+0x98>

00010bec <__libc_csu_init@@Base>:
   10bec:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10bf0:	mov	r7, r0
   10bf4:	ldr	r6, [pc, #76]	; 10c48 <__libc_csu_init@@Base+0x5c>
   10bf8:	mov	r8, r1
   10bfc:	ldr	r5, [pc, #72]	; 10c4c <__libc_csu_init@@Base+0x60>
   10c00:	mov	r9, r2
   10c04:	add	r6, pc, r6
   10c08:	bl	1088c <_init@@Base>
   10c0c:	add	r5, pc, r5
   10c10:	rsb	r6, r5, r6
   10c14:	asrs	r6, r6, #2
   10c18:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10c1c:	sub	r5, r5, #4
   10c20:	mov	r4, #0
   10c24:	add	r4, r4, #1
   10c28:	ldr	r3, [r5, #4]!
   10c2c:	mov	r0, r7
   10c30:	mov	r1, r8
   10c34:	mov	r2, r9
   10c38:	blx	r3
   10c3c:	cmp	r4, r6
   10c40:	bne	10c24 <__libc_csu_init@@Base+0x38>
   10c44:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10c48:	andeq	r0, r1, r4, asr #5
   10c4c:			; <UNDEFINED> instruction: 0x000102b8

00010c50 <__libc_csu_fini@@Base>:
   10c50:	bx	lr

Disassembly of section .fini:

00010c54 <_fini@@Base>:
   10c54:	push	{r3, lr}
   10c58:	pop	{r3, pc}
