
centos-preinstalled/nsenter:     file format elf32-littlearm


Disassembly of section .init:

00011168 <_init@@Base>:
   11168:	push	{r3, lr}
   1116c:	bl	11d8c <__assert_fail@plt+0x8e0>
   11170:	pop	{r3, pc}

Disassembly of section .plt:

00011174 <calloc@plt-0x14>:
   11174:	push	{lr}		; (str lr, [sp, #-4]!)
   11178:	ldr	lr, [pc, #4]	; 11184 <_init@@Base+0x1c>
   1117c:	add	lr, pc, lr
   11180:	ldr	pc, [lr, #8]!
   11184:	andeq	r4, r1, ip, ror lr

00011188 <calloc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #20, 20	; 0x14000
   11190:	ldr	pc, [ip, #3708]!	; 0xe7c

00011194 <raise@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #20, 20	; 0x14000
   1119c:	ldr	pc, [ip, #3700]!	; 0xe74

000111a0 <is_selinux_enabled@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #20, 20	; 0x14000
   111a8:	ldr	pc, [ip, #3692]!	; 0xe6c

000111ac <strcmp@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #20, 20	; 0x14000
   111b4:	ldr	pc, [ip, #3684]!	; 0xe64

000111b8 <strtol@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #20, 20	; 0x14000
   111c0:	ldr	pc, [ip, #3676]!	; 0xe5c

000111c4 <basename@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #20, 20	; 0x14000
   111cc:	ldr	pc, [ip, #3668]!	; 0xe54

000111d0 <strcspn@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #20, 20	; 0x14000
   111d8:	ldr	pc, [ip, #3660]!	; 0xe4c

000111dc <free@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #20, 20	; 0x14000
   111e4:	ldr	pc, [ip, #3652]!	; 0xe44

000111e8 <ferror@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #20, 20	; 0x14000
   111f0:	ldr	pc, [ip, #3644]!	; 0xe3c

000111f4 <_exit@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #20, 20	; 0x14000
   111fc:	ldr	pc, [ip, #3636]!	; 0xe34

00011200 <memcpy@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #20, 20	; 0x14000
   11208:	ldr	pc, [ip, #3628]!	; 0xe2c

0001120c <execvp@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #20, 20	; 0x14000
   11214:	ldr	pc, [ip, #3620]!	; 0xe24

00011218 <__strtoull_internal@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #20, 20	; 0x14000
   11220:	ldr	pc, [ip, #3612]!	; 0xe1c

00011224 <dcgettext@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #20, 20	; 0x14000
   1122c:	ldr	pc, [ip, #3604]!	; 0xe14

00011230 <__stack_chk_fail@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #20, 20	; 0x14000
   11238:	ldr	pc, [ip, #3596]!	; 0xe0c

0001123c <setns@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #20, 20	; 0x14000
   11244:	ldr	pc, [ip, #3588]!	; 0xe04

00011248 <textdomain@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #20, 20	; 0x14000
   11250:	ldr	pc, [ip, #3580]!	; 0xdfc

00011254 <__strndup@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #20, 20	; 0x14000
   1125c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011260 <err@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #20, 20	; 0x14000
   11268:	ldr	pc, [ip, #3564]!	; 0xdec

0001126c <setgroups@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #20, 20	; 0x14000
   11274:	ldr	pc, [ip, #3556]!	; 0xde4

00011278 <waitpid@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #20, 20	; 0x14000
   11280:	ldr	pc, [ip, #3548]!	; 0xddc

00011284 <strcpy@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #20, 20	; 0x14000
   1128c:	ldr	pc, [ip, #3540]!	; 0xdd4

00011290 <chroot@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #20, 20	; 0x14000
   11298:	ldr	pc, [ip, #3532]!	; 0xdcc

0001129c <__fpending@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #20, 20	; 0x14000
   112a4:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a8 <open64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #20, 20	; 0x14000
   112b0:	ldr	pc, [ip, #3516]!	; 0xdbc

000112b4 <getenv@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #20, 20	; 0x14000
   112bc:	ldr	pc, [ip, #3508]!	; 0xdb4

000112c0 <setgid@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #20, 20	; 0x14000
   112c8:	ldr	pc, [ip, #3500]!	; 0xdac

000112cc <malloc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #20, 20	; 0x14000
   112d4:	ldr	pc, [ip, #3492]!	; 0xda4

000112d8 <__libc_start_main@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #20, 20	; 0x14000
   112e0:	ldr	pc, [ip, #3484]!	; 0xd9c

000112e4 <__gmon_start__@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #20, 20	; 0x14000
   112ec:	ldr	pc, [ip, #3476]!	; 0xd94

000112f0 <getopt_long@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #20, 20	; 0x14000
   112f8:	ldr	pc, [ip, #3468]!	; 0xd8c

000112fc <kill@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #20, 20	; 0x14000
   11304:	ldr	pc, [ip, #3460]!	; 0xd84

00011308 <__ctype_b_loc@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #20, 20	; 0x14000
   11310:	ldr	pc, [ip, #3452]!	; 0xd7c

00011314 <getpid@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #20, 20	; 0x14000
   1131c:	ldr	pc, [ip, #3444]!	; 0xd74

00011320 <exit@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #20, 20	; 0x14000
   11328:	ldr	pc, [ip, #3436]!	; 0xd6c

0001132c <strtoul@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #20, 20	; 0x14000
   11334:	ldr	pc, [ip, #3428]!	; 0xd64

00011338 <strlen@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #20, 20	; 0x14000
   11340:	ldr	pc, [ip, #3420]!	; 0xd5c

00011344 <strchr@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #20, 20	; 0x14000
   1134c:	ldr	pc, [ip, #3412]!	; 0xd54

00011350 <warnx@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #20, 20	; 0x14000
   11358:	ldr	pc, [ip, #3404]!	; 0xd4c

0001135c <__errno_location@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #20, 20	; 0x14000
   11364:	ldr	pc, [ip, #3396]!	; 0xd44

00011368 <__cxa_atexit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #20, 20	; 0x14000
   11370:	ldr	pc, [ip, #3388]!	; 0xd3c

00011374 <__vasprintf_chk@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #20, 20	; 0x14000
   1137c:	ldr	pc, [ip, #3380]!	; 0xd34

00011380 <__strdup@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #20, 20	; 0x14000
   11388:	ldr	pc, [ip, #3372]!	; 0xd2c

0001138c <fgetc@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #20, 20	; 0x14000
   11394:	ldr	pc, [ip, #3364]!	; 0xd24

00011398 <__printf_chk@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #20, 20	; 0x14000
   113a0:	ldr	pc, [ip, #3356]!	; 0xd1c

000113a4 <strtod@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #20, 20	; 0x14000
   113ac:	ldr	pc, [ip, #3348]!	; 0xd14

000113b0 <__fprintf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #20, 20	; 0x14000
   113b8:	ldr	pc, [ip, #3340]!	; 0xd0c

000113bc <fclose@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #20, 20	; 0x14000
   113c4:	ldr	pc, [ip, #3332]!	; 0xd04

000113c8 <setlocale@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #20, 20	; 0x14000
   113d0:	ldr	pc, [ip, #3324]!	; 0xcfc

000113d4 <fork@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #20, 20	; 0x14000
   113dc:	ldr	pc, [ip, #3316]!	; 0xcf4

000113e0 <errx@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #20, 20	; 0x14000
   113e8:	ldr	pc, [ip, #3308]!	; 0xcec

000113ec <execl@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #20, 20	; 0x14000
   113f4:	ldr	pc, [ip, #3300]!	; 0xce4

000113f8 <warn@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #20, 20	; 0x14000
   11400:	ldr	pc, [ip, #3292]!	; 0xcdc

00011404 <setuid@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #20, 20	; 0x14000
   1140c:	ldr	pc, [ip, #3284]!	; 0xcd4

00011410 <localeconv@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #20, 20	; 0x14000
   11418:	ldr	pc, [ip, #3276]!	; 0xccc

0001141c <fchdir@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #20, 20	; 0x14000
   11424:	ldr	pc, [ip, #3268]!	; 0xcc4

00011428 <__strtoll_internal@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #20, 20	; 0x14000
   11430:	ldr	pc, [ip, #3260]!	; 0xcbc

00011434 <freecon@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #20, 20	; 0x14000
   1143c:	ldr	pc, [ip, #3252]!	; 0xcb4

00011440 <bindtextdomain@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #20, 20	; 0x14000
   11448:	ldr	pc, [ip, #3244]!	; 0xcac

0001144c <setexeccon@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #20, 20	; 0x14000
   11454:	ldr	pc, [ip, #3236]!	; 0xca4

00011458 <getpidcon@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #20, 20	; 0x14000
   11460:	ldr	pc, [ip, #3228]!	; 0xc9c

00011464 <fputs@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #20, 20	; 0x14000
   1146c:	ldr	pc, [ip, #3220]!	; 0xc94

00011470 <strncmp@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #20, 20	; 0x14000
   11478:	ldr	pc, [ip, #3212]!	; 0xc8c

0001147c <abort@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #20, 20	; 0x14000
   11484:	ldr	pc, [ip, #3204]!	; 0xc84

00011488 <close@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #20, 20	; 0x14000
   11490:	ldr	pc, [ip, #3196]!	; 0xc7c

00011494 <__snprintf_chk@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #20, 20	; 0x14000
   1149c:	ldr	pc, [ip, #3188]!	; 0xc74

000114a0 <strspn@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #20, 20	; 0x14000
   114a8:	ldr	pc, [ip, #3180]!	; 0xc6c

000114ac <__assert_fail@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #20, 20	; 0x14000
   114b4:	ldr	pc, [ip, #3172]!	; 0xc64

Disassembly of section .text:

000114b8 <.text>:
   114b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114bc:	movw	sl, #24976	; 0x6190
   114c0:	movt	sl, #2
   114c4:	sub	sp, sp, #52	; 0x34
   114c8:	mov	r6, r1
   114cc:	mov	r7, r0
   114d0:	ldr	r3, [sl]
   114d4:	movw	r1, #19276	; 0x4b4c
   114d8:	mov	r0, #6
   114dc:	movt	r1, #1
   114e0:	mov	r5, #0
   114e4:	movw	r8, #25000	; 0x61a8
   114e8:	str	r3, [sp, #44]	; 0x2c
   114ec:	bl	113c8 <setlocale@plt>
   114f0:	movw	r0, #20432	; 0x4fd0
   114f4:	movw	r1, #20444	; 0x4fdc
   114f8:	movt	r0, #1
   114fc:	movt	r1, #1
   11500:	bl	11440 <bindtextdomain@plt>
   11504:	movw	fp, #25008	; 0x61b0
   11508:	movw	r0, #20432	; 0x4fd0
   1150c:	movt	r8, #2
   11510:	movt	r0, #1
   11514:	movt	fp, #2
   11518:	str	r5, [sp, #28]
   1151c:	mov	r9, r5
   11520:	bl	11248 <textdomain@plt>
   11524:	movw	r0, #8908	; 0x22cc
   11528:	movt	r0, #1
   1152c:	str	r5, [sp, #24]
   11530:	bl	149e4 <__assert_fail@plt+0x3538>
   11534:	mvn	r2, #0
   11538:	str	r5, [sp, #12]
   1153c:	str	r5, [sp, #16]
   11540:	str	r5, [sp, #36]	; 0x24
   11544:	str	r5, [sp, #32]
   11548:	str	r5, [sp, #20]
   1154c:	str	r2, [sp, #8]
   11550:	mov	r4, #0
   11554:	movw	r2, #20568	; 0x5058
   11558:	str	r4, [sp]
   1155c:	movt	r2, #1
   11560:	mov	r0, r7
   11564:	mov	r1, r6
   11568:	ldr	r3, [pc, #2004]	; 11d44 <__assert_fail@plt+0x898>
   1156c:	bl	112f0 <getopt_long@plt>
   11570:	cmn	r0, #1
   11574:	beq	11870 <__assert_fail@plt+0x3c4>
   11578:	sub	r0, r0, #70	; 0x46
   1157c:	cmp	r0, #58	; 0x3a
   11580:	ldrls	pc, [pc, r0, lsl #2]
   11584:	b	11868 <__assert_fail@plt+0x3bc>
   11588:	andeq	r1, r1, ip, asr r8
   1158c:	andeq	r1, r1, r8, lsr #16
   11590:	andeq	r1, r1, r8, ror #16
   11594:	andeq	r1, r1, r8, ror #16
   11598:	andeq	r1, r1, r8, ror #16
   1159c:	andeq	r1, r1, r8, ror #16
   115a0:	andeq	r1, r1, r8, ror #16
   115a4:	andeq	r1, r1, r8, ror #16
   115a8:	andeq	r1, r1, r8, ror #16
   115ac:	andeq	r1, r1, r8, ror #16
   115b0:	andeq	r1, r1, r8, ror #16
   115b4:	andeq	r1, r1, r8, ror #16
   115b8:	andeq	r1, r1, r8, ror #16
   115bc:	strdeq	r1, [r1], -r4
   115c0:	andeq	r1, r1, r8, ror #16
   115c4:	ldrdeq	r1, [r1], -r8
   115c8:	andeq	r1, r1, r8, lsl #15
   115cc:	andeq	r1, r1, r8, ror #16
   115d0:	andeq	r1, r1, r8, ror #16
   115d4:	andeq	r1, r1, r8, ror #16
   115d8:	andeq	r1, r1, r0, lsl #15
   115dc:	andeq	r1, r1, r8, ror #16
   115e0:	andeq	r1, r1, r8, ror #16
   115e4:	andeq	r1, r1, r8, ror #16
   115e8:	andeq	r1, r1, r8, ror #16
   115ec:	andeq	r1, r1, r8, ror #16
   115f0:	andeq	r1, r1, r8, ror #16
   115f4:	andeq	r1, r1, r8, ror #16
   115f8:	andeq	r1, r1, r8, ror #16
   115fc:	andeq	r1, r1, r8, ror #16
   11600:	andeq	r1, r1, r8, ror #16
   11604:	andeq	r1, r1, r8, ror #16
   11608:	andeq	r1, r1, r8, ror #16
   1160c:	andeq	r1, r1, r8, ror #16
   11610:	andeq	r1, r1, r8, ror r7
   11614:	andeq	r1, r1, ip, asr r7
   11618:	andeq	r1, r1, r8, ror #16
   1161c:	andeq	r1, r1, r8, ror #16
   11620:	andeq	r1, r1, r8, ror #16
   11624:	andeq	r1, r1, r0, asr #14
   11628:	andeq	r1, r1, r4, lsr #14
   1162c:	andeq	r1, r1, r8, ror #16
   11630:	andeq	r1, r1, r8, lsl #14
   11634:	andeq	r1, r1, r8, ror #16
   11638:	andeq	r1, r1, r8, ror #13
   1163c:	andeq	r1, r1, r8, ror #16
   11640:			; <UNDEFINED> instruction: 0x000116bc
   11644:	andeq	r1, r1, r0, lsr #13
   11648:	andeq	r1, r1, r8, ror #16
   1164c:	andeq	r1, r1, r0, lsl #13
   11650:	andeq	r1, r1, r8, ror #16
   11654:	andeq	r1, r1, r8, ror #16
   11658:	andeq	r1, r1, r8, ror #16
   1165c:	andeq	r1, r1, r8, ror #16
   11660:	andeq	r1, r1, r8, ror #16
   11664:	andeq	r1, r1, r8, ror #16
   11668:	andeq	r1, r1, r8, ror #16
   1166c:	andeq	r1, r1, r8, ror #16
   11670:	andeq	r1, r1, r4, ror r6
   11674:	mov	r3, #1
   11678:	str	r3, [sp, #20]
   1167c:	b	11550 <__assert_fail@plt+0xa4>
   11680:	ldr	r2, [r8]
   11684:	cmp	r2, #0
   11688:	beq	11a98 <__assert_fail@plt+0x5ec>
   1168c:	movw	r1, #20564	; 0x5054
   11690:	ldr	r0, [pc, #1712]	; 11d48 <__assert_fail@plt+0x89c>
   11694:	movt	r1, #1
   11698:	bl	12150 <__assert_fail@plt+0xca4>
   1169c:	b	11550 <__assert_fail@plt+0xa4>
   116a0:	ldr	r1, [r8]
   116a4:	cmp	r1, #0
   116a8:	orreq	r9, r9, #67108864	; 0x4000000
   116ac:	beq	11550 <__assert_fail@plt+0xa4>
   116b0:	mov	r0, #67108864	; 0x4000000
   116b4:	bl	12250 <__assert_fail@plt+0xda4>
   116b8:	b	11550 <__assert_fail@plt+0xa4>
   116bc:	mov	r2, #5
   116c0:	movw	r1, #20496	; 0x5010
   116c4:	mov	r0, #0
   116c8:	movt	r1, #1
   116cc:	ldr	r4, [r8]
   116d0:	bl	11224 <dcgettext@plt>
   116d4:	mov	r1, r0
   116d8:	mov	r0, r4
   116dc:	bl	12db4 <__assert_fail@plt+0x1908>
   116e0:	str	r0, [fp]
   116e4:	b	11550 <__assert_fail@plt+0xa4>
   116e8:	ldr	r2, [r8]
   116ec:	cmp	r2, #0
   116f0:	beq	11a8c <__assert_fail@plt+0x5e0>
   116f4:	movw	r1, #20556	; 0x504c
   116f8:	ldr	r0, [pc, #1612]	; 11d4c <__assert_fail@plt+0x8a0>
   116fc:	movt	r1, #1
   11700:	bl	12150 <__assert_fail@plt+0xca4>
   11704:	b	11550 <__assert_fail@plt+0xa4>
   11708:	ldr	r1, [r8]
   1170c:	cmp	r1, #0
   11710:	orreq	r9, r9, #536870912	; 0x20000000
   11714:	beq	11550 <__assert_fail@plt+0xa4>
   11718:	mov	r0, #536870912	; 0x20000000
   1171c:	bl	12250 <__assert_fail@plt+0xda4>
   11720:	b	11550 <__assert_fail@plt+0xa4>
   11724:	ldr	r1, [r8]
   11728:	cmp	r1, #0
   1172c:	orreq	r9, r9, #1073741824	; 0x40000000
   11730:	beq	11550 <__assert_fail@plt+0xa4>
   11734:	mov	r0, #1073741824	; 0x40000000
   11738:	bl	12250 <__assert_fail@plt+0xda4>
   1173c:	b	11550 <__assert_fail@plt+0xa4>
   11740:	ldr	r1, [r8]
   11744:	cmp	r1, #0
   11748:	orreq	r9, r9, #131072	; 0x20000
   1174c:	beq	11550 <__assert_fail@plt+0xa4>
   11750:	mov	r0, #131072	; 0x20000
   11754:	bl	12250 <__assert_fail@plt+0xda4>
   11758:	b	11550 <__assert_fail@plt+0xa4>
   1175c:	ldr	r1, [r8]
   11760:	cmp	r1, #0
   11764:	orreq	r9, r9, #134217728	; 0x8000000
   11768:	beq	11550 <__assert_fail@plt+0xa4>
   1176c:	mov	r0, #134217728	; 0x8000000
   11770:	bl	12250 <__assert_fail@plt+0xda4>
   11774:	b	11550 <__assert_fail@plt+0xa4>
   11778:	mov	r0, #0
   1177c:	bl	11e84 <__assert_fail@plt+0x9d8>
   11780:	mov	r5, #1
   11784:	b	11550 <__assert_fail@plt+0xa4>
   11788:	mov	r2, #5
   1178c:	movw	r1, #20464	; 0x4ff0
   11790:	mov	r0, #0
   11794:	movt	r1, #1
   11798:	bl	11224 <dcgettext@plt>
   1179c:	movw	r2, #24968	; 0x6188
   117a0:	movt	r2, #2
   117a4:	movw	r3, #20476	; 0x4ffc
   117a8:	movt	r3, #1
   117ac:	ldr	r2, [r2]
   117b0:	mov	r1, r0
   117b4:	mov	r0, #1
   117b8:	bl	11398 <__printf_chk@plt>
   117bc:	ldr	r2, [sp, #44]	; 0x2c
   117c0:	ldr	r3, [sl]
   117c4:	mov	r0, #0
   117c8:	cmp	r2, r3
   117cc:	bne	11cac <__assert_fail@plt+0x800>
   117d0:	add	sp, sp, #52	; 0x34
   117d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117d8:	ldr	r1, [r8]
   117dc:	cmp	r1, #0
   117e0:	orreq	r9, r9, #268435456	; 0x10000000
   117e4:	beq	11550 <__assert_fail@plt+0xa4>
   117e8:	mov	r0, #268435456	; 0x10000000
   117ec:	bl	12250 <__assert_fail@plt+0xda4>
   117f0:	b	11550 <__assert_fail@plt+0xa4>
   117f4:	mov	r2, #5
   117f8:	movw	r1, #20516	; 0x5024
   117fc:	mov	r0, #0
   11800:	movt	r1, #1
   11804:	mov	r3, #1
   11808:	ldr	r4, [r8]
   1180c:	str	r3, [sp, #16]
   11810:	bl	11224 <dcgettext@plt>
   11814:	mov	r1, r0
   11818:	mov	r0, r4
   1181c:	bl	12db4 <__assert_fail@plt+0x1908>
   11820:	str	r0, [sp, #24]
   11824:	b	11550 <__assert_fail@plt+0xa4>
   11828:	mov	r2, #5
   1182c:	movw	r1, #20536	; 0x5038
   11830:	mov	r0, #0
   11834:	movt	r1, #1
   11838:	mov	r3, #1
   1183c:	ldr	r4, [r8]
   11840:	str	r3, [sp, #12]
   11844:	bl	11224 <dcgettext@plt>
   11848:	mov	r1, r0
   1184c:	mov	r0, r4
   11850:	bl	12db4 <__assert_fail@plt+0x1908>
   11854:	str	r0, [sp, #28]
   11858:	b	11550 <__assert_fail@plt+0xa4>
   1185c:	mov	r2, #0
   11860:	str	r2, [sp, #8]
   11864:	b	11550 <__assert_fail@plt+0xa4>
   11868:	mov	r0, #1
   1186c:	bl	11e84 <__assert_fail@plt+0x9d8>
   11870:	cmp	r5, r4
   11874:	bne	11b5c <__assert_fail@plt+0x6b0>
   11878:	movw	r5, #24876	; 0x612c
   1187c:	movt	r5, #2
   11880:	ldr	r0, [r5]
   11884:	cmp	r0, #0
   11888:	movne	r4, r5
   1188c:	bne	118a0 <__assert_fail@plt+0x3f4>
   11890:	b	118b4 <__assert_fail@plt+0x408>
   11894:	ldr	r0, [r4, #12]!
   11898:	cmp	r0, #0
   1189c:	beq	118b4 <__assert_fail@plt+0x408>
   118a0:	tst	r0, r9
   118a4:	beq	11894 <__assert_fail@plt+0x3e8>
   118a8:	mov	r1, #0
   118ac:	bl	12250 <__assert_fail@plt+0xda4>
   118b0:	b	11894 <__assert_fail@plt+0x3e8>
   118b4:	ldr	r2, [sp, #32]
   118b8:	cmp	r2, #0
   118bc:	bne	11b44 <__assert_fail@plt+0x698>
   118c0:	ldr	r3, [sp, #36]	; 0x24
   118c4:	cmp	r3, #0
   118c8:	bne	11bac <__assert_fail@plt+0x700>
   118cc:	ldr	r2, [r5]
   118d0:	cmp	r2, #0
   118d4:	beq	118f8 <__assert_fail@plt+0x44c>
   118d8:	movw	r3, #24876	; 0x612c
   118dc:	movt	r3, #2
   118e0:	ldr	r1, [r3, #8]
   118e4:	cmp	r1, #0
   118e8:	orrge	r9, r9, r2
   118ec:	ldr	r2, [r3, #12]!
   118f0:	cmp	r2, #0
   118f4:	bne	118e0 <__assert_fail@plt+0x434>
   118f8:	ands	r9, r9, #268435456	; 0x10000000
   118fc:	beq	11910 <__assert_fail@plt+0x464>
   11900:	ldr	r2, [sp, #20]
   11904:	cmp	r2, #0
   11908:	movne	r9, #0
   1190c:	beq	11aa8 <__assert_fail@plt+0x5fc>
   11910:	ldr	r1, [r5]
   11914:	cmp	r1, #0
   11918:	beq	11978 <__assert_fail@plt+0x4cc>
   1191c:	movw	r8, #24876	; 0x612c
   11920:	mvn	r4, #0
   11924:	movt	r8, #2
   11928:	ldr	sl, [sp, #8]
   1192c:	b	11954 <__assert_fail@plt+0x4a8>
   11930:	bl	1123c <setns@plt>
   11934:	cmp	r0, #0
   11938:	bne	11c88 <__assert_fail@plt+0x7dc>
   1193c:	ldr	r0, [r8, #8]
   11940:	bl	11488 <close@plt>
   11944:	str	r4, [r8, #8]
   11948:	ldr	r1, [r8, #12]!
   1194c:	cmp	r1, #0
   11950:	beq	11974 <__assert_fail@plt+0x4c8>
   11954:	ldr	r0, [r8, #8]
   11958:	cmp	r0, #0
   1195c:	blt	11948 <__assert_fail@plt+0x49c>
   11960:	cmp	r1, #536870912	; 0x20000000
   11964:	bne	11930 <__assert_fail@plt+0x484>
   11968:	cmn	sl, #1
   1196c:	moveq	sl, #1
   11970:	b	11930 <__assert_fail@plt+0x484>
   11974:	str	sl, [sp, #8]
   11978:	ldr	r0, [r5, #84]	; 0x54
   1197c:	movw	r4, #24876	; 0x612c
   11980:	movt	r4, #2
   11984:	cmp	r0, #0
   11988:	blt	119d4 <__assert_fail@plt+0x528>
   1198c:	ldr	r3, [r4, #88]	; 0x58
   11990:	cmp	r3, #0
   11994:	blt	11c48 <__assert_fail@plt+0x79c>
   11998:	bl	1141c <fchdir@plt>
   1199c:	cmp	r0, #0
   119a0:	blt	11cf4 <__assert_fail@plt+0x848>
   119a4:	movw	r0, #20764	; 0x511c
   119a8:	movt	r0, #1
   119ac:	bl	11290 <chroot@plt>
   119b0:	cmp	r0, #0
   119b4:	movwlt	r1, #20856	; 0x5178
   119b8:	movlt	r0, #0
   119bc:	movtlt	r1, #1
   119c0:	blt	11ae8 <__assert_fail@plt+0x63c>
   119c4:	ldr	r0, [r5, #84]	; 0x54
   119c8:	bl	11488 <close@plt>
   119cc:	mvn	r3, #0
   119d0:	str	r3, [r5, #84]	; 0x54
   119d4:	ldr	r0, [r5, #88]	; 0x58
   119d8:	movw	r4, #24876	; 0x612c
   119dc:	movt	r4, #2
   119e0:	cmp	r0, #0
   119e4:	blt	11a10 <__assert_fail@plt+0x564>
   119e8:	bl	1141c <fchdir@plt>
   119ec:	cmp	r0, #0
   119f0:	movwlt	r1, #20872	; 0x5188
   119f4:	movlt	r0, #0
   119f8:	movtlt	r1, #1
   119fc:	blt	11ae8 <__assert_fail@plt+0x63c>
   11a00:	ldr	r0, [r4, #88]	; 0x58
   11a04:	bl	11488 <close@plt>
   11a08:	mvn	r3, #0
   11a0c:	str	r3, [r4, #88]	; 0x58
   11a10:	ldr	r2, [sp, #8]
   11a14:	cmp	r2, #1
   11a18:	beq	11bc4 <__assert_fail@plt+0x718>
   11a1c:	ldr	r3, [sp, #12]
   11a20:	ldr	r2, [sp, #16]
   11a24:	orrs	r3, r3, r2
   11a28:	beq	11a44 <__assert_fail@plt+0x598>
   11a2c:	ldr	r3, [sp, #12]
   11a30:	cmp	r3, #0
   11a34:	bne	11afc <__assert_fail@plt+0x650>
   11a38:	ldr	r2, [sp, #16]
   11a3c:	cmp	r2, #0
   11a40:	bne	11acc <__assert_fail@plt+0x620>
   11a44:	movw	r4, #24984	; 0x6198
   11a48:	movt	r4, #2
   11a4c:	ldr	r1, [r4]
   11a50:	cmp	r7, r1
   11a54:	ble	11aa4 <__assert_fail@plt+0x5f8>
   11a58:	ldr	r0, [r6, r1, lsl #2]
   11a5c:	add	r1, r6, r1, lsl #2
   11a60:	bl	1120c <execvp@plt>
   11a64:	mov	r2, #5
   11a68:	movw	r1, #21000	; 0x5208
   11a6c:	mov	r0, #0
   11a70:	movt	r1, #1
   11a74:	bl	11224 <dcgettext@plt>
   11a78:	ldr	r3, [r4]
   11a7c:	ldr	r2, [r6, r3, lsl #2]
   11a80:	mov	r1, r0
   11a84:	mov	r0, #1
   11a88:	bl	11260 <err@plt>
   11a8c:	mov	r2, #1
   11a90:	str	r2, [sp, #32]
   11a94:	b	11550 <__assert_fail@plt+0xa4>
   11a98:	mov	r3, #1
   11a9c:	str	r3, [sp, #36]	; 0x24
   11aa0:	b	11550 <__assert_fail@plt+0xa4>
   11aa4:	bl	13d2c <__assert_fail@plt+0x2880>
   11aa8:	mov	r0, r2
   11aac:	mov	r1, r2
   11ab0:	mov	r3, #1
   11ab4:	str	r3, [sp, #12]
   11ab8:	str	r3, [sp, #16]
   11abc:	bl	1126c <setgroups@plt>
   11ac0:	adds	r9, r0, #0
   11ac4:	movne	r9, #1
   11ac8:	b	11910 <__assert_fail@plt+0x464>
   11acc:	ldr	r0, [sp, #24]
   11ad0:	bl	11404 <setuid@plt>
   11ad4:	cmp	r0, #0
   11ad8:	movwlt	r1, #20984	; 0x51f8
   11adc:	movlt	r0, #0
   11ae0:	movtlt	r1, #1
   11ae4:	bge	11a44 <__assert_fail@plt+0x598>
   11ae8:	mov	r2, #5
   11aec:	bl	11224 <dcgettext@plt>
   11af0:	mov	r1, r0
   11af4:	mov	r0, #1
   11af8:	bl	11260 <err@plt>
   11afc:	mov	r0, #0
   11b00:	mov	r1, r0
   11b04:	bl	1126c <setgroups@plt>
   11b08:	cmp	r0, #0
   11b0c:	beq	11b24 <__assert_fail@plt+0x678>
   11b10:	cmp	r9, #0
   11b14:	movwne	r1, #20948	; 0x51d4
   11b18:	movne	r0, #0
   11b1c:	movtne	r1, #1
   11b20:	bne	11ae8 <__assert_fail@plt+0x63c>
   11b24:	ldr	r0, [sp, #28]
   11b28:	bl	112c0 <setgid@plt>
   11b2c:	cmp	r0, #0
   11b30:	bge	11a38 <__assert_fail@plt+0x58c>
   11b34:	movw	r1, #20968	; 0x51e8
   11b38:	mov	r0, #0
   11b3c:	movt	r1, #1
   11b40:	b	11ae8 <__assert_fail@plt+0x63c>
   11b44:	movw	r1, #20556	; 0x504c
   11b48:	ldr	r0, [pc, #508]	; 11d4c <__assert_fail@plt+0x8a0>
   11b4c:	movt	r1, #1
   11b50:	mov	r2, #0
   11b54:	bl	12150 <__assert_fail@plt+0xca4>
   11b58:	b	118c0 <__assert_fail@plt+0x414>
   11b5c:	bl	111a0 <is_selinux_enabled@plt>
   11b60:	cmp	r0, r4
   11b64:	ble	11878 <__assert_fail@plt+0x3cc>
   11b68:	movw	r5, #25008	; 0x61b0
   11b6c:	movt	r5, #2
   11b70:	str	r4, [sp, #40]	; 0x28
   11b74:	ldr	r0, [r5]
   11b78:	cmp	r0, r4
   11b7c:	beq	11d28 <__assert_fail@plt+0x87c>
   11b80:	add	r1, sp, #40	; 0x28
   11b84:	bl	11458 <getpidcon@plt>
   11b88:	cmp	r0, #0
   11b8c:	blt	11d04 <__assert_fail@plt+0x858>
   11b90:	ldr	r0, [sp, #40]	; 0x28
   11b94:	bl	1144c <setexeccon@plt>
   11b98:	cmp	r0, #0
   11b9c:	blt	11cb0 <__assert_fail@plt+0x804>
   11ba0:	ldr	r0, [sp, #40]	; 0x28
   11ba4:	bl	11434 <freecon@plt>
   11ba8:	b	11878 <__assert_fail@plt+0x3cc>
   11bac:	movw	r1, #20564	; 0x5054
   11bb0:	ldr	r0, [pc, #400]	; 11d48 <__assert_fail@plt+0x89c>
   11bb4:	movt	r1, #1
   11bb8:	mov	r2, #0
   11bbc:	bl	12150 <__assert_fail@plt+0xca4>
   11bc0:	b	118cc <__assert_fail@plt+0x420>
   11bc4:	bl	113d4 <fork@plt>
   11bc8:	subs	r4, r0, #0
   11bcc:	blt	11cd4 <__assert_fail@plt+0x828>
   11bd0:	bne	11bfc <__assert_fail@plt+0x750>
   11bd4:	b	11a1c <__assert_fail@plt+0x570>
   11bd8:	uxtb	r3, r0
   11bdc:	cmp	r3, #127	; 0x7f
   11be0:	bne	11c18 <__assert_fail@plt+0x76c>
   11be4:	bl	11314 <getpid@plt>
   11be8:	mov	r1, #19
   11bec:	bl	112fc <kill@plt>
   11bf0:	mov	r0, r4
   11bf4:	mov	r1, #18
   11bf8:	bl	112fc <kill@plt>
   11bfc:	mov	r0, r4
   11c00:	add	r1, sp, #40	; 0x28
   11c04:	mov	r2, #2
   11c08:	bl	11278 <waitpid@plt>
   11c0c:	cmp	r4, r0
   11c10:	ldr	r0, [sp, #40]	; 0x28
   11c14:	beq	11bd8 <__assert_fail@plt+0x72c>
   11c18:	ands	r3, r0, #127	; 0x7f
   11c1c:	beq	11c80 <__assert_fail@plt+0x7d4>
   11c20:	add	r3, r3, #1
   11c24:	sbfx	r3, r3, #1, #7
   11c28:	cmp	r3, #0
   11c2c:	ble	11c40 <__assert_fail@plt+0x794>
   11c30:	bl	11314 <getpid@plt>
   11c34:	ldr	r1, [sp, #40]	; 0x28
   11c38:	and	r1, r1, #127	; 0x7f
   11c3c:	bl	112fc <kill@plt>
   11c40:	mov	r0, #1
   11c44:	bl	11320 <exit@plt>
   11c48:	mov	r1, #0
   11c4c:	movw	r0, #20764	; 0x511c
   11c50:	movt	r0, #1
   11c54:	bl	112a8 <open64@plt>
   11c58:	cmp	r0, #0
   11c5c:	str	r0, [r4, #88]	; 0x58
   11c60:	movwlt	r1, #20768	; 0x5120
   11c64:	movlt	r0, #0
   11c68:	movtlt	r1, #1
   11c6c:	blt	11ae8 <__assert_fail@plt+0x63c>
   11c70:	ldr	r0, [r4, #84]	; 0x54
   11c74:	cmp	r0, #0
   11c78:	blt	119d4 <__assert_fail@plt+0x528>
   11c7c:	b	11998 <__assert_fail@plt+0x4ec>
   11c80:	ubfx	r0, r0, #8, #8
   11c84:	bl	11320 <exit@plt>
   11c88:	mov	r2, #5
   11c8c:	movw	r1, #20724	; 0x50f4
   11c90:	mov	r0, #0
   11c94:	movt	r1, #1
   11c98:	bl	11224 <dcgettext@plt>
   11c9c:	ldr	r2, [r8, #4]
   11ca0:	mov	r1, r0
   11ca4:	mov	r0, #1
   11ca8:	bl	11260 <err@plt>
   11cac:	bl	11230 <__stack_chk_fail@plt>
   11cb0:	mov	r2, #5
   11cb4:	mov	r0, r4
   11cb8:	movw	r1, #20688	; 0x50d0
   11cbc:	movt	r1, #1
   11cc0:	bl	11224 <dcgettext@plt>
   11cc4:	ldr	r2, [sp, #40]	; 0x28
   11cc8:	mov	r1, r0
   11ccc:	mov	r0, #1
   11cd0:	bl	113e0 <errx@plt>
   11cd4:	movw	r1, #20936	; 0x51c8
   11cd8:	mov	r0, #0
   11cdc:	movt	r1, #1
   11ce0:	mov	r2, #5
   11ce4:	bl	11224 <dcgettext@plt>
   11ce8:	mov	r1, r0
   11cec:	ldr	r0, [sp, #8]
   11cf0:	bl	11260 <err@plt>
   11cf4:	movw	r1, #20808	; 0x5148
   11cf8:	mov	r0, #0
   11cfc:	movt	r1, #1
   11d00:	b	11ae8 <__assert_fail@plt+0x63c>
   11d04:	mov	r2, #5
   11d08:	mov	r0, r4
   11d0c:	movw	r1, #20652	; 0x50ac
   11d10:	movt	r1, #1
   11d14:	bl	11224 <dcgettext@plt>
   11d18:	ldr	r2, [r5]
   11d1c:	mov	r1, r0
   11d20:	mov	r0, #1
   11d24:	bl	113e0 <errx@plt>
   11d28:	movw	r1, #20604	; 0x507c
   11d2c:	mov	r2, #5
   11d30:	movt	r1, #1
   11d34:	bl	11224 <dcgettext@plt>
   11d38:	mov	r1, r0
   11d3c:	mov	r0, #1
   11d40:	bl	113e0 <errx@plt>
   11d44:	andeq	r4, r1, r4, lsr sl
   11d48:	andeq	r6, r2, r4, lsl #3
   11d4c:	andeq	r6, r2, r0, lsl #3
   11d50:	mov	fp, #0
   11d54:	mov	lr, #0
   11d58:	pop	{r1}		; (ldr r1, [sp], #4)
   11d5c:	mov	r2, sp
   11d60:	push	{r2}		; (str r2, [sp, #-4]!)
   11d64:	push	{r0}		; (str r0, [sp, #-4]!)
   11d68:	ldr	ip, [pc, #16]	; 11d80 <__assert_fail@plt+0x8d4>
   11d6c:	push	{ip}		; (str ip, [sp, #-4]!)
   11d70:	ldr	r0, [pc, #12]	; 11d84 <__assert_fail@plt+0x8d8>
   11d74:	ldr	r3, [pc, #12]	; 11d88 <__assert_fail@plt+0x8dc>
   11d78:	bl	112d8 <__libc_start_main@plt>
   11d7c:	bl	1147c <abort@plt>
   11d80:	andeq	r4, r1, r0, ror #19
   11d84:			; <UNDEFINED> instruction: 0x000114b8
   11d88:	andeq	r4, r1, ip, ror r9
   11d8c:	ldr	r3, [pc, #20]	; 11da8 <__assert_fail@plt+0x8fc>
   11d90:	ldr	r2, [pc, #20]	; 11dac <__assert_fail@plt+0x900>
   11d94:	add	r3, pc, r3
   11d98:	ldr	r2, [r3, r2]
   11d9c:	cmp	r2, #0
   11da0:	bxeq	lr
   11da4:	b	112e4 <__gmon_start__@plt>
   11da8:	andeq	r4, r1, r4, ror #4
   11dac:	andeq	r0, r0, r0, lsr #2
   11db0:	push	{r3, lr}
   11db4:	movw	r0, #24968	; 0x6188
   11db8:	ldr	r3, [pc, #36]	; 11de4 <__assert_fail@plt+0x938>
   11dbc:	movt	r0, #2
   11dc0:	rsb	r3, r0, r3
   11dc4:	cmp	r3, #6
   11dc8:	popls	{r3, pc}
   11dcc:	movw	r3, #0
   11dd0:	movt	r3, #0
   11dd4:	cmp	r3, #0
   11dd8:	popeq	{r3, pc}
   11ddc:	blx	r3
   11de0:	pop	{r3, pc}
   11de4:	andeq	r6, r2, fp, lsl #3
   11de8:	push	{r3, lr}
   11dec:	movw	r0, #24968	; 0x6188
   11df0:	movw	r3, #24968	; 0x6188
   11df4:	movt	r0, #2
   11df8:	movt	r3, #2
   11dfc:	rsb	r3, r0, r3
   11e00:	asr	r3, r3, #2
   11e04:	add	r3, r3, r3, lsr #31
   11e08:	asrs	r1, r3, #1
   11e0c:	popeq	{r3, pc}
   11e10:	movw	r2, #0
   11e14:	movt	r2, #0
   11e18:	cmp	r2, #0
   11e1c:	popeq	{r3, pc}
   11e20:	blx	r2
   11e24:	pop	{r3, pc}
   11e28:	push	{r4, lr}
   11e2c:	movw	r4, #25004	; 0x61ac
   11e30:	movt	r4, #2
   11e34:	ldrb	r3, [r4]
   11e38:	cmp	r3, #0
   11e3c:	popne	{r4, pc}
   11e40:	bl	11db0 <__assert_fail@plt+0x904>
   11e44:	mov	r3, #1
   11e48:	strb	r3, [r4]
   11e4c:	pop	{r4, pc}
   11e50:	movw	r0, #24316	; 0x5efc
   11e54:	movt	r0, #2
   11e58:	push	{r3, lr}
   11e5c:	ldr	r3, [r0]
   11e60:	cmp	r3, #0
   11e64:	beq	11e7c <__assert_fail@plt+0x9d0>
   11e68:	movw	r3, #0
   11e6c:	movt	r3, #0
   11e70:	cmp	r3, #0
   11e74:	beq	11e7c <__assert_fail@plt+0x9d0>
   11e78:	blx	r3
   11e7c:	pop	{r3, lr}
   11e80:	b	11de8 <__assert_fail@plt+0x93c>
   11e84:	push	{r3, r4, r5, lr}
   11e88:	subs	r5, r0, #0
   11e8c:	mov	r2, #5
   11e90:	movw	r1, #19268	; 0x4b44
   11e94:	movweq	r3, #24992	; 0x61a0
   11e98:	movwne	r3, #24988	; 0x619c
   11e9c:	movteq	r3, #2
   11ea0:	movtne	r3, #2
   11ea4:	movt	r1, #1
   11ea8:	mov	r0, #0
   11eac:	ldr	r4, [r3]
   11eb0:	bl	11224 <dcgettext@plt>
   11eb4:	mov	r1, r4
   11eb8:	bl	11464 <fputs@plt>
   11ebc:	mov	r2, #5
   11ec0:	movw	r1, #19280	; 0x4b50
   11ec4:	mov	r0, #0
   11ec8:	movt	r1, #1
   11ecc:	bl	11224 <dcgettext@plt>
   11ed0:	movw	r3, #24968	; 0x6188
   11ed4:	movt	r3, #2
   11ed8:	mov	r1, #1
   11edc:	ldr	r3, [r3]
   11ee0:	mov	r2, r0
   11ee4:	mov	r0, r4
   11ee8:	bl	113b0 <__fprintf_chk@plt>
   11eec:	mov	r2, #5
   11ef0:	movw	r1, #19612	; 0x4c9c
   11ef4:	mov	r0, #0
   11ef8:	movt	r1, #1
   11efc:	bl	11224 <dcgettext@plt>
   11f00:	mov	r1, r4
   11f04:	bl	11464 <fputs@plt>
   11f08:	mov	r2, #5
   11f0c:	movw	r1, #19324	; 0x4b7c
   11f10:	mov	r0, #0
   11f14:	movt	r1, #1
   11f18:	bl	11224 <dcgettext@plt>
   11f1c:	mov	r1, r4
   11f20:	bl	11464 <fputs@plt>
   11f24:	mov	r2, #5
   11f28:	movw	r1, #19376	; 0x4bb0
   11f2c:	mov	r0, #0
   11f30:	movt	r1, #1
   11f34:	bl	11224 <dcgettext@plt>
   11f38:	mov	r1, r4
   11f3c:	bl	11464 <fputs@plt>
   11f40:	mov	r2, #5
   11f44:	movw	r1, #19388	; 0x4bbc
   11f48:	mov	r0, #0
   11f4c:	movt	r1, #1
   11f50:	bl	11224 <dcgettext@plt>
   11f54:	mov	r1, r4
   11f58:	bl	11464 <fputs@plt>
   11f5c:	mov	r2, #5
   11f60:	movw	r1, #19452	; 0x4bfc
   11f64:	mov	r0, #0
   11f68:	movt	r1, #1
   11f6c:	bl	11224 <dcgettext@plt>
   11f70:	mov	r1, r4
   11f74:	bl	11464 <fputs@plt>
   11f78:	mov	r2, #5
   11f7c:	movw	r1, #19500	; 0x4c2c
   11f80:	mov	r0, #0
   11f84:	movt	r1, #1
   11f88:	bl	11224 <dcgettext@plt>
   11f8c:	mov	r1, r4
   11f90:	bl	11464 <fputs@plt>
   11f94:	mov	r2, #5
   11f98:	movw	r1, #19560	; 0x4c68
   11f9c:	mov	r0, #0
   11fa0:	movt	r1, #1
   11fa4:	bl	11224 <dcgettext@plt>
   11fa8:	mov	r1, r4
   11fac:	bl	11464 <fputs@plt>
   11fb0:	mov	r2, #5
   11fb4:	movw	r1, #19616	; 0x4ca0
   11fb8:	mov	r0, #0
   11fbc:	movt	r1, #1
   11fc0:	bl	11224 <dcgettext@plt>
   11fc4:	mov	r1, r4
   11fc8:	bl	11464 <fputs@plt>
   11fcc:	mov	r2, #5
   11fd0:	movw	r1, #19668	; 0x4cd4
   11fd4:	mov	r0, #0
   11fd8:	movt	r1, #1
   11fdc:	bl	11224 <dcgettext@plt>
   11fe0:	mov	r1, r4
   11fe4:	bl	11464 <fputs@plt>
   11fe8:	mov	r2, #5
   11fec:	movw	r1, #19716	; 0x4d04
   11ff0:	mov	r0, #0
   11ff4:	movt	r1, #1
   11ff8:	bl	11224 <dcgettext@plt>
   11ffc:	mov	r1, r4
   12000:	bl	11464 <fputs@plt>
   12004:	mov	r2, #5
   12008:	movw	r1, #19764	; 0x4d34
   1200c:	mov	r0, #0
   12010:	movt	r1, #1
   12014:	bl	11224 <dcgettext@plt>
   12018:	mov	r1, r4
   1201c:	bl	11464 <fputs@plt>
   12020:	mov	r2, #5
   12024:	movw	r1, #19820	; 0x4d6c
   12028:	mov	r0, #0
   1202c:	movt	r1, #1
   12030:	bl	11224 <dcgettext@plt>
   12034:	mov	r1, r4
   12038:	bl	11464 <fputs@plt>
   1203c:	mov	r2, #5
   12040:	movw	r1, #19876	; 0x4da4
   12044:	mov	r0, #0
   12048:	movt	r1, #1
   1204c:	bl	11224 <dcgettext@plt>
   12050:	mov	r1, r4
   12054:	bl	11464 <fputs@plt>
   12058:	mov	r2, #5
   1205c:	movw	r1, #19932	; 0x4ddc
   12060:	mov	r0, #0
   12064:	movt	r1, #1
   12068:	bl	11224 <dcgettext@plt>
   1206c:	mov	r1, r4
   12070:	bl	11464 <fputs@plt>
   12074:	mov	r2, #5
   12078:	movw	r1, #19980	; 0x4e0c
   1207c:	mov	r0, #0
   12080:	movt	r1, #1
   12084:	bl	11224 <dcgettext@plt>
   12088:	mov	r1, r4
   1208c:	bl	11464 <fputs@plt>
   12090:	mov	r2, #5
   12094:	movw	r1, #20032	; 0x4e40
   12098:	mov	r0, #0
   1209c:	movt	r1, #1
   120a0:	bl	11224 <dcgettext@plt>
   120a4:	mov	r1, r4
   120a8:	bl	11464 <fputs@plt>
   120ac:	mov	r2, #5
   120b0:	movw	r1, #20096	; 0x4e80
   120b4:	mov	r0, #0
   120b8:	movt	r1, #1
   120bc:	bl	11224 <dcgettext@plt>
   120c0:	mov	r1, r4
   120c4:	bl	11464 <fputs@plt>
   120c8:	mov	r2, #5
   120cc:	movw	r1, #19612	; 0x4c9c
   120d0:	mov	r0, #0
   120d4:	movt	r1, #1
   120d8:	bl	11224 <dcgettext@plt>
   120dc:	mov	r1, r4
   120e0:	bl	11464 <fputs@plt>
   120e4:	mov	r2, #5
   120e8:	movw	r1, #20168	; 0x4ec8
   120ec:	mov	r0, #0
   120f0:	movt	r1, #1
   120f4:	bl	11224 <dcgettext@plt>
   120f8:	mov	r1, r4
   120fc:	bl	11464 <fputs@plt>
   12100:	mov	r2, #5
   12104:	movw	r1, #20212	; 0x4ef4
   12108:	mov	r0, #0
   1210c:	movt	r1, #1
   12110:	bl	11224 <dcgettext@plt>
   12114:	mov	r1, r4
   12118:	bl	11464 <fputs@plt>
   1211c:	mov	r2, #5
   12120:	movw	r1, #20268	; 0x4f2c
   12124:	mov	r0, #0
   12128:	movt	r1, #1
   1212c:	bl	11224 <dcgettext@plt>
   12130:	movw	r3, #20296	; 0x4f48
   12134:	mov	r1, #1
   12138:	movt	r3, #1
   1213c:	mov	r2, r0
   12140:	mov	r0, r4
   12144:	bl	113b0 <__fprintf_chk@plt>
   12148:	mov	r0, r5
   1214c:	bl	11320 <exit@plt>
   12150:	push	{r4, r5, r6, r7, lr}
   12154:	movw	r4, #24976	; 0x6190
   12158:	movt	r4, #2
   1215c:	sub	sp, sp, #4096	; 0x1000
   12160:	sub	sp, sp, #28
   12164:	subs	r6, r2, #0
   12168:	ldr	r3, [r4]
   1216c:	add	r2, sp, #8192	; 0x2000
   12170:	mov	r5, r0
   12174:	mov	r7, r1
   12178:	str	r3, [r2, #-4076]	; 0xfffff014
   1217c:	beq	121c8 <__assert_fail@plt+0xd1c>
   12180:	ldr	r0, [r5]
   12184:	cmp	r0, #0
   12188:	blt	12190 <__assert_fail@plt+0xce4>
   1218c:	bl	11488 <close@plt>
   12190:	mov	r0, r6
   12194:	mov	r1, #0
   12198:	bl	112a8 <open64@plt>
   1219c:	cmp	r0, #0
   121a0:	str	r0, [r5]
   121a4:	blt	1222c <__assert_fail@plt+0xd80>
   121a8:	add	r3, sp, #8192	; 0x2000
   121ac:	ldr	r2, [r3, #-4076]	; 0xfffff014
   121b0:	ldr	r3, [r4]
   121b4:	cmp	r2, r3
   121b8:	bne	12228 <__assert_fail@plt+0xd7c>
   121bc:	add	sp, sp, #4096	; 0x1000
   121c0:	add	sp, sp, #28
   121c4:	pop	{r4, r5, r6, r7, pc}
   121c8:	movw	r3, #25008	; 0x61b0
   121cc:	movt	r3, #2
   121d0:	ldr	r0, [r3]
   121d4:	cmp	r0, #0
   121d8:	bne	121fc <__assert_fail@plt+0xd50>
   121dc:	mov	r2, #5
   121e0:	movw	r1, #20336	; 0x4f70
   121e4:	movt	r1, #1
   121e8:	bl	11224 <dcgettext@plt>
   121ec:	mov	r2, r7
   121f0:	mov	r1, r0
   121f4:	mov	r0, #1
   121f8:	bl	113e0 <errx@plt>
   121fc:	mov	r1, #4096	; 0x1000
   12200:	stmib	sp, {r0, r7}
   12204:	add	r0, sp, #20
   12208:	movw	r2, #20308	; 0x4f54
   1220c:	mov	r3, r1
   12210:	movt	r2, #1
   12214:	str	r2, [sp]
   12218:	mov	r2, #1
   1221c:	mov	r6, r0
   12220:	bl	11494 <__snprintf_chk@plt>
   12224:	b	12180 <__assert_fail@plt+0xcd4>
   12228:	bl	11230 <__stack_chk_fail@plt>
   1222c:	mov	r2, #5
   12230:	movw	r1, #20320	; 0x4f60
   12234:	mov	r0, #0
   12238:	movt	r1, #1
   1223c:	bl	11224 <dcgettext@plt>
   12240:	mov	r2, r6
   12244:	mov	r1, r0
   12248:	mov	r0, #1
   1224c:	bl	11260 <err@plt>
   12250:	movw	r3, #24876	; 0x612c
   12254:	movt	r3, #2
   12258:	push	{r4, lr}
   1225c:	ldr	ip, [r3]
   12260:	cmp	ip, #0
   12264:	beq	122a4 <__assert_fail@plt+0xdf8>
   12268:	cmp	ip, r0
   1226c:	beq	122c4 <__assert_fail@plt+0xe18>
   12270:	add	r3, r3, #12
   12274:	ldr	ip, [r3]
   12278:	mov	r4, r3
   1227c:	cmp	ip, #0
   12280:	beq	122a4 <__assert_fail@plt+0xdf8>
   12284:	cmp	ip, r0
   12288:	add	r3, r3, #12
   1228c:	bne	12274 <__assert_fail@plt+0xdc8>
   12290:	mov	r2, r1
   12294:	add	r0, r4, #8
   12298:	ldr	r1, [r4, #4]
   1229c:	pop	{r4, lr}
   122a0:	b	12150 <__assert_fail@plt+0xca4>
   122a4:	movw	r0, #20384	; 0x4fa0
   122a8:	movw	r1, #20400	; 0x4fb0
   122ac:	movw	r3, #18976	; 0x4a20
   122b0:	movt	r0, #1
   122b4:	movt	r1, #1
   122b8:	mov	r2, #139	; 0x8b
   122bc:	movt	r3, #1
   122c0:	bl	114ac <__assert_fail@plt>
   122c4:	mov	r4, r3
   122c8:	b	12290 <__assert_fail@plt+0xde4>
   122cc:	movw	r3, #24992	; 0x61a0
   122d0:	movt	r3, #2
   122d4:	push	{r4, r5, r6, lr}
   122d8:	ldr	r4, [r3]
   122dc:	mov	r0, r4
   122e0:	bl	1129c <__fpending@plt>
   122e4:	mov	r6, r0
   122e8:	mov	r0, r4
   122ec:	bl	111e8 <ferror@plt>
   122f0:	mov	r5, r0
   122f4:	mov	r0, r4
   122f8:	bl	113bc <fclose@plt>
   122fc:	adds	r4, r0, #0
   12300:	movne	r4, #1
   12304:	cmp	r5, #0
   12308:	bne	12380 <__assert_fail@plt+0xed4>
   1230c:	cmp	r4, #0
   12310:	beq	1232c <__assert_fail@plt+0xe80>
   12314:	cmp	r6, #0
   12318:	beq	123d0 <__assert_fail@plt+0xf24>
   1231c:	bl	1135c <__errno_location@plt>
   12320:	ldr	r3, [r0]
   12324:	cmp	r3, #32
   12328:	bne	123e4 <__assert_fail@plt+0xf38>
   1232c:	movw	r3, #24988	; 0x619c
   12330:	movt	r3, #2
   12334:	ldr	r4, [r3]
   12338:	mov	r0, r4
   1233c:	bl	1129c <__fpending@plt>
   12340:	mov	r6, r0
   12344:	mov	r0, r4
   12348:	bl	111e8 <ferror@plt>
   1234c:	mov	r5, r0
   12350:	mov	r0, r4
   12354:	bl	113bc <fclose@plt>
   12358:	adds	r4, r0, #0
   1235c:	movne	r4, #1
   12360:	cmp	r5, #0
   12364:	beq	123ac <__assert_fail@plt+0xf00>
   12368:	cmp	r4, #0
   1236c:	bne	12378 <__assert_fail@plt+0xecc>
   12370:	bl	1135c <__errno_location@plt>
   12374:	str	r4, [r0]
   12378:	mov	r0, #1
   1237c:	bl	111f4 <_exit@plt>
   12380:	cmp	r4, #0
   12384:	bne	1231c <__assert_fail@plt+0xe70>
   12388:	bl	1135c <__errno_location@plt>
   1238c:	str	r4, [r0]
   12390:	mov	r2, #5
   12394:	movw	r1, #20420	; 0x4fc4
   12398:	mov	r0, #0
   1239c:	movt	r1, #1
   123a0:	bl	11224 <dcgettext@plt>
   123a4:	bl	11350 <warnx@plt>
   123a8:	b	12378 <__assert_fail@plt+0xecc>
   123ac:	cmp	r4, #0
   123b0:	popeq	{r4, r5, r6, pc}
   123b4:	cmp	r6, #0
   123b8:	bne	12378 <__assert_fail@plt+0xecc>
   123bc:	bl	1135c <__errno_location@plt>
   123c0:	ldr	r3, [r0]
   123c4:	cmp	r3, #9
   123c8:	bne	12378 <__assert_fail@plt+0xecc>
   123cc:	pop	{r4, r5, r6, pc}
   123d0:	bl	1135c <__errno_location@plt>
   123d4:	ldr	r3, [r0]
   123d8:	cmp	r3, #9
   123dc:	bne	12324 <__assert_fail@plt+0xe78>
   123e0:	b	1232c <__assert_fail@plt+0xe80>
   123e4:	cmp	r3, #0
   123e8:	beq	12390 <__assert_fail@plt+0xee4>
   123ec:	mov	r2, #5
   123f0:	movw	r1, #20420	; 0x4fc4
   123f4:	mov	r0, #0
   123f8:	movt	r1, #1
   123fc:	bl	11224 <dcgettext@plt>
   12400:	bl	113f8 <warn@plt>
   12404:	b	12378 <__assert_fail@plt+0xecc>
   12408:	cmp	r0, #0
   1240c:	mov	r3, #0
   12410:	str	r3, [r1]
   12414:	bxeq	lr
   12418:	ldrb	r2, [r0]
   1241c:	cmp	r2, #47	; 0x2f
   12420:	bne	12468 <__assert_fail@plt+0xfbc>
   12424:	ldrsb	r3, [r0, #1]
   12428:	cmp	r3, #47	; 0x2f
   1242c:	bne	12470 <__assert_fail@plt+0xfc4>
   12430:	mov	r3, r0
   12434:	b	12454 <__assert_fail@plt+0xfa8>
   12438:	ldrb	r2, [r3, #1]
   1243c:	mov	r3, r0
   12440:	cmp	r2, #47	; 0x2f
   12444:	bne	12468 <__assert_fail@plt+0xfbc>
   12448:	ldrsb	r2, [r0, #1]
   1244c:	cmp	r2, #47	; 0x2f
   12450:	bne	12470 <__assert_fail@plt+0xfc4>
   12454:	cmn	r3, #1
   12458:	add	r0, r0, #1
   1245c:	bne	12438 <__assert_fail@plt+0xf8c>
   12460:	mov	r0, #0
   12464:	bx	lr
   12468:	cmp	r2, #0
   1246c:	beq	12460 <__assert_fail@plt+0xfb4>
   12470:	mov	r3, #1
   12474:	str	r3, [r1]
   12478:	ldrsb	r3, [r0, #1]
   1247c:	cmp	r3, #47	; 0x2f
   12480:	cmpne	r3, #0
   12484:	bxeq	lr
   12488:	mov	r3, #2
   1248c:	str	r3, [r1]
   12490:	ldrb	r2, [r0, r3]
   12494:	add	r3, r3, #1
   12498:	cmp	r2, #47	; 0x2f
   1249c:	cmpne	r2, #0
   124a0:	bne	1248c <__assert_fail@plt+0xfe0>
   124a4:	bx	lr
   124a8:	push	{r3, r4, r5, r6, r7, lr}
   124ac:	mov	r7, r1
   124b0:	ldrb	r3, [r0]
   124b4:	cmp	r3, #0
   124b8:	beq	12530 <__assert_fail@plt+0x1084>
   124bc:	mov	r4, #0
   124c0:	mov	r5, r0
   124c4:	mov	r6, r4
   124c8:	b	124f8 <__assert_fail@plt+0x104c>
   124cc:	cmp	r3, #92	; 0x5c
   124d0:	mov	r0, r7
   124d4:	mov	r1, r3
   124d8:	beq	12520 <__assert_fail@plt+0x1074>
   124dc:	bl	11344 <strchr@plt>
   124e0:	cmp	r0, #0
   124e4:	bne	12528 <__assert_fail@plt+0x107c>
   124e8:	ldrb	r3, [r5, #1]!
   124ec:	add	r4, r4, #1
   124f0:	cmp	r3, #0
   124f4:	beq	12518 <__assert_fail@plt+0x106c>
   124f8:	cmp	r6, #0
   124fc:	sxtb	r3, r3
   12500:	beq	124cc <__assert_fail@plt+0x1020>
   12504:	ldrb	r3, [r5, #1]!
   12508:	mov	r6, #0
   1250c:	add	r4, r4, #1
   12510:	cmp	r3, #0
   12514:	bne	124f8 <__assert_fail@plt+0x104c>
   12518:	rsb	r0, r6, r4
   1251c:	pop	{r3, r4, r5, r6, r7, pc}
   12520:	mov	r6, #1
   12524:	b	124e8 <__assert_fail@plt+0x103c>
   12528:	mov	r0, r4
   1252c:	pop	{r3, r4, r5, r6, r7, pc}
   12530:	mov	r0, r3
   12534:	pop	{r3, r4, r5, r6, r7, pc}
   12538:	ldr	r3, [pc, #224]	; 12620 <__assert_fail@plt+0x1174>
   1253c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12540:	mov	r6, r0
   12544:	ldr	r0, [pc, #216]	; 12624 <__assert_fail@plt+0x1178>
   12548:	add	r3, pc, r3
   1254c:	sub	sp, sp, #12
   12550:	mov	r4, #0
   12554:	mov	r9, r1
   12558:	mov	r5, r2
   1255c:	ldr	r8, [r3, r0]
   12560:	str	r4, [sp]
   12564:	ldr	r3, [r8]
   12568:	str	r3, [sp, #4]
   1256c:	bl	1135c <__errno_location@plt>
   12570:	cmp	r6, r4
   12574:	mov	r7, r0
   12578:	str	r4, [r0]
   1257c:	beq	1258c <__assert_fail@plt+0x10e0>
   12580:	ldrsb	r3, [r6]
   12584:	cmp	r3, r4
   12588:	bne	125a4 <__assert_fail@plt+0x10f8>
   1258c:	ldr	r1, [pc, #148]	; 12628 <__assert_fail@plt+0x117c>
   12590:	mov	r2, r9
   12594:	mov	r3, r6
   12598:	mov	r0, #1
   1259c:	add	r1, pc, r1
   125a0:	bl	113e0 <errx@plt>
   125a4:	mov	r3, r4
   125a8:	mov	r2, r5
   125ac:	mov	r0, r6
   125b0:	mov	r1, sp
   125b4:	bl	11218 <__strtoull_internal@plt>
   125b8:	ldr	r3, [r7]
   125bc:	cmp	r3, r4
   125c0:	bne	125fc <__assert_fail@plt+0x1150>
   125c4:	ldr	r3, [sp]
   125c8:	cmp	r6, r3
   125cc:	beq	1258c <__assert_fail@plt+0x10e0>
   125d0:	cmp	r3, r4
   125d4:	beq	125e4 <__assert_fail@plt+0x1138>
   125d8:	ldrsb	r3, [r3]
   125dc:	cmp	r3, r4
   125e0:	bne	1258c <__assert_fail@plt+0x10e0>
   125e4:	ldr	r2, [sp, #4]
   125e8:	ldr	r3, [r8]
   125ec:	cmp	r2, r3
   125f0:	bne	1261c <__assert_fail@plt+0x1170>
   125f4:	add	sp, sp, #12
   125f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   125fc:	cmp	r3, #34	; 0x22
   12600:	bne	1258c <__assert_fail@plt+0x10e0>
   12604:	ldr	r1, [pc, #32]	; 1262c <__assert_fail@plt+0x1180>
   12608:	mov	r2, r9
   1260c:	mov	r3, r6
   12610:	mov	r0, #1
   12614:	add	r1, pc, r1
   12618:	bl	11260 <err@plt>
   1261c:	bl	11230 <__stack_chk_fail@plt>
   12620:			; <UNDEFINED> instruction: 0x00013ab0
   12624:	andeq	r0, r0, ip, lsl r1
   12628:	andeq	r2, r0, r4, lsr #26
   1262c:	andeq	r2, r0, ip, lsr #25
   12630:	ldr	r3, [pc, #596]	; 1288c <__assert_fail@plt+0x13e0>
   12634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12638:	add	r3, pc, r3
   1263c:	subs	r6, r0, #0
   12640:	ldr	r0, [pc, #584]	; 12890 <__assert_fail@plt+0x13e4>
   12644:	mov	r8, r1
   12648:	mov	r1, r3
   1264c:	sub	sp, sp, #20
   12650:	mov	r9, r2
   12654:	ldr	sl, [r1, r0]
   12658:	mov	r2, #0
   1265c:	mov	r3, #0
   12660:	ldr	r1, [sl]
   12664:	strd	r2, [r8]
   12668:	str	r1, [sp, #12]
   1266c:	beq	12754 <__assert_fail@plt+0x12a8>
   12670:	ldrb	r5, [r6]
   12674:	cmp	r5, #0
   12678:	beq	12754 <__assert_fail@plt+0x12a8>
   1267c:	str	r6, [sp, #8]
   12680:	bl	11308 <__ctype_b_loc@plt>
   12684:	mov	r3, r6
   12688:	ldr	r1, [r0]
   1268c:	b	126a0 <__assert_fail@plt+0x11f4>
   12690:	add	r2, r3, #1
   12694:	str	r2, [sp, #8]
   12698:	ldrb	r5, [r3, #1]
   1269c:	mov	r3, r2
   126a0:	lsl	r2, r5, #1
   126a4:	ldrh	r4, [r1, r2]
   126a8:	and	r4, r4, #8192	; 0x2000
   126ac:	uxth	r4, r4
   126b0:	cmp	r4, #0
   126b4:	bne	12690 <__assert_fail@plt+0x11e4>
   126b8:	cmp	r5, #45	; 0x2d
   126bc:	beq	12754 <__assert_fail@plt+0x12a8>
   126c0:	add	r5, sp, #16
   126c4:	str	r4, [r5, #-8]!
   126c8:	bl	1135c <__errno_location@plt>
   126cc:	mov	r2, r4
   126d0:	mov	r1, r5
   126d4:	mov	r3, r4
   126d8:	mov	r7, r0
   126dc:	mov	r0, r6
   126e0:	str	r4, [r7]
   126e4:	bl	11218 <__strtoull_internal@plt>
   126e8:	mov	r5, r1
   126ec:	ldr	r1, [sp, #8]
   126f0:	mov	r4, r0
   126f4:	cmp	r1, r6
   126f8:	beq	12754 <__assert_fail@plt+0x12a8>
   126fc:	ldr	r3, [r7]
   12700:	cmp	r3, #0
   12704:	bne	12738 <__assert_fail@plt+0x128c>
   12708:	cmp	r1, #0
   1270c:	beq	1283c <__assert_fail@plt+0x1390>
   12710:	ldrb	r0, [r1]
   12714:	cmp	r0, #0
   12718:	bne	1275c <__assert_fail@plt+0x12b0>
   1271c:	strd	r4, [r8]
   12720:	ldr	r2, [sp, #12]
   12724:	ldr	r3, [sl]
   12728:	cmp	r2, r3
   1272c:	bne	12888 <__assert_fail@plt+0x13dc>
   12730:	add	sp, sp, #20
   12734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12738:	subs	r2, r4, #1
   1273c:	mvn	r6, #2
   12740:	sbc	r3, r5, #0
   12744:	mvn	r7, #0
   12748:	cmp	r3, r7
   1274c:	cmpeq	r2, r6
   12750:	bls	12708 <__assert_fail@plt+0x125c>
   12754:	mvn	r0, #0
   12758:	b	12720 <__assert_fail@plt+0x1274>
   1275c:	ldrb	r2, [r1, #1]
   12760:	sxtb	r3, r2
   12764:	cmp	r3, #105	; 0x69
   12768:	beq	12844 <__assert_fail@plt+0x1398>
   1276c:	cmp	r3, #66	; 0x42
   12770:	beq	12820 <__assert_fail@plt+0x1374>
   12774:	cmp	r2, #0
   12778:	bne	12754 <__assert_fail@plt+0x12a8>
   1277c:	mov	r6, #1024	; 0x400
   12780:	ldr	r7, [pc, #268]	; 12894 <__assert_fail@plt+0x13e8>
   12784:	sxtb	r3, r0
   12788:	str	r3, [sp, #4]
   1278c:	add	r7, pc, r7
   12790:	mov	r1, r3
   12794:	mov	r0, r7
   12798:	bl	11344 <strchr@plt>
   1279c:	ldr	r3, [sp, #4]
   127a0:	cmp	r0, #0
   127a4:	rsbne	fp, r7, r0
   127a8:	addne	fp, fp, #1
   127ac:	beq	12860 <__assert_fail@plt+0x13b4>
   127b0:	cmp	fp, #0
   127b4:	beq	12810 <__assert_fail@plt+0x1364>
   127b8:	asr	r7, r6, #31
   127bc:	mvn	r0, #0
   127c0:	mvn	r1, #0
   127c4:	mov	r2, r6
   127c8:	mov	r3, r7
   127cc:	bl	13df0 <__assert_fail@plt+0x2944>
   127d0:	cmp	r1, r5
   127d4:	cmpeq	r0, r4
   127d8:	bcc	12834 <__assert_fail@plt+0x1388>
   127dc:	sub	ip, fp, #1
   127e0:	mov	r3, #0
   127e4:	b	127f8 <__assert_fail@plt+0x134c>
   127e8:	cmp	r1, r5
   127ec:	cmpeq	r0, r4
   127f0:	add	r3, r3, #1
   127f4:	bcc	12834 <__assert_fail@plt+0x1388>
   127f8:	mul	r2, r4, r7
   127fc:	cmp	r3, ip
   12800:	mla	r2, r6, r5, r2
   12804:	umull	r4, r5, r4, r6
   12808:	add	r5, r2, r5
   1280c:	bne	127e8 <__assert_fail@plt+0x133c>
   12810:	mov	r0, #0
   12814:	cmp	r9, #0
   12818:	strne	fp, [r9]
   1281c:	b	1271c <__assert_fail@plt+0x1270>
   12820:	ldrsb	r3, [r1, #2]
   12824:	cmp	r3, #0
   12828:	bne	12754 <__assert_fail@plt+0x12a8>
   1282c:	mov	r6, #1000	; 0x3e8
   12830:	b	12780 <__assert_fail@plt+0x12d4>
   12834:	mvn	r0, #1
   12838:	b	12814 <__assert_fail@plt+0x1368>
   1283c:	mov	r0, r1
   12840:	b	1271c <__assert_fail@plt+0x1270>
   12844:	ldrsb	r3, [r1, #2]
   12848:	cmp	r3, #66	; 0x42
   1284c:	bne	12754 <__assert_fail@plt+0x12a8>
   12850:	ldrsb	r3, [r1, #3]
   12854:	cmp	r3, #0
   12858:	beq	1277c <__assert_fail@plt+0x12d0>
   1285c:	b	12754 <__assert_fail@plt+0x12a8>
   12860:	ldr	r7, [pc, #48]	; 12898 <__assert_fail@plt+0x13ec>
   12864:	mov	r1, r3
   12868:	add	r7, pc, r7
   1286c:	mov	r0, r7
   12870:	bl	11344 <strchr@plt>
   12874:	cmp	r0, #0
   12878:	beq	12754 <__assert_fail@plt+0x12a8>
   1287c:	rsb	r7, r7, r0
   12880:	add	fp, r7, #1
   12884:	b	127b0 <__assert_fail@plt+0x1304>
   12888:	bl	11230 <__stack_chk_fail@plt>
   1288c:	andeq	r3, r1, r0, asr #19
   12890:	andeq	r0, r0, ip, lsl r1
   12894:	andeq	r2, r0, r0, asr #22
   12898:	andeq	r2, r0, r0, ror sl
   1289c:	mov	r2, #0
   128a0:	b	12630 <__assert_fail@plt+0x1184>
   128a4:	push	{r4, r5, r6, lr}
   128a8:	subs	r6, r0, #0
   128ac:	beq	12930 <__assert_fail@plt+0x1484>
   128b0:	ldrb	r4, [r6]
   128b4:	cmp	r4, #0
   128b8:	beq	12938 <__assert_fail@plt+0x148c>
   128bc:	bl	11308 <__ctype_b_loc@plt>
   128c0:	mov	r3, r6
   128c4:	ldr	r5, [r0]
   128c8:	b	128e4 <__assert_fail@plt+0x1438>
   128cc:	cmn	r3, #1
   128d0:	beq	12920 <__assert_fail@plt+0x1474>
   128d4:	ldrb	r4, [r3, #1]
   128d8:	mov	r3, r1
   128dc:	cmp	r4, #0
   128e0:	beq	12928 <__assert_fail@plt+0x147c>
   128e4:	lsl	r4, r4, #1
   128e8:	mov	ip, r3
   128ec:	add	r1, r3, #1
   128f0:	ldrh	r2, [r5, r4]
   128f4:	tst	r2, #2048	; 0x800
   128f8:	bne	128cc <__assert_fail@plt+0x1420>
   128fc:	cmp	ip, #0
   12900:	cmpne	ip, r6
   12904:	movls	r0, #0
   12908:	movhi	r0, #1
   1290c:	popls	{r4, r5, r6, pc}
   12910:	ldrsb	r0, [ip]
   12914:	rsbs	r0, r0, #1
   12918:	movcc	r0, #0
   1291c:	pop	{r4, r5, r6, pc}
   12920:	mov	r0, #0
   12924:	pop	{r4, r5, r6, pc}
   12928:	mov	ip, r1
   1292c:	b	128fc <__assert_fail@plt+0x1450>
   12930:	mov	r0, r6
   12934:	pop	{r4, r5, r6, pc}
   12938:	mov	r0, r4
   1293c:	pop	{r4, r5, r6, pc}
   12940:	cmp	r1, #0
   12944:	push	{r4, r5}
   12948:	sub	r4, r1, #1
   1294c:	beq	129b8 <__assert_fail@plt+0x150c>
   12950:	ldrb	r1, [r0]
   12954:	cmp	r1, #0
   12958:	beq	129b8 <__assert_fail@plt+0x150c>
   1295c:	sxtb	r1, r1
   12960:	sxtb	r2, r2
   12964:	cmp	r1, r2
   12968:	beq	129a4 <__assert_fail@plt+0x14f8>
   1296c:	add	r1, r0, #1
   12970:	mov	r3, #0
   12974:	b	12990 <__assert_fail@plt+0x14e4>
   12978:	ldrb	r0, [r1], #1
   1297c:	cmp	r0, #0
   12980:	sxtb	ip, r0
   12984:	beq	129a4 <__assert_fail@plt+0x14f8>
   12988:	cmp	ip, r2
   1298c:	beq	129ac <__assert_fail@plt+0x1500>
   12990:	cmp	r3, r4
   12994:	mov	r5, r1
   12998:	add	r3, r3, #1
   1299c:	bne	12978 <__assert_fail@plt+0x14cc>
   129a0:	mov	r0, #0
   129a4:	pop	{r4, r5}
   129a8:	bx	lr
   129ac:	mov	r0, r5
   129b0:	pop	{r4, r5}
   129b4:	bx	lr
   129b8:	mov	r0, r1
   129bc:	b	129a4 <__assert_fail@plt+0x14f8>
   129c0:	ldr	r3, [pc, #228]	; 12aac <__assert_fail@plt+0x1600>
   129c4:	ldr	r2, [pc, #228]	; 12ab0 <__assert_fail@plt+0x1604>
   129c8:	add	r3, pc, r3
   129cc:	push	{r4, r6, r7, r8, r9, lr}
   129d0:	subs	r6, r0, #0
   129d4:	ldr	r7, [r3, r2]
   129d8:	mov	r0, r3
   129dc:	sub	sp, sp, #8
   129e0:	mov	r4, #0
   129e4:	mov	r8, r1
   129e8:	ldr	r3, [r7]
   129ec:	str	r4, [sp]
   129f0:	str	r3, [sp, #4]
   129f4:	beq	12a04 <__assert_fail@plt+0x1558>
   129f8:	ldrsb	r3, [r6]
   129fc:	cmp	r3, r4
   12a00:	bne	12a2c <__assert_fail@plt+0x1580>
   12a04:	bl	1135c <__errno_location@plt>
   12a08:	ldr	r3, [r0]
   12a0c:	cmp	r3, #0
   12a10:	bne	12a58 <__assert_fail@plt+0x15ac>
   12a14:	ldr	r1, [pc, #152]	; 12ab4 <__assert_fail@plt+0x1608>
   12a18:	mov	r2, r8
   12a1c:	mov	r3, r6
   12a20:	mov	r0, #1
   12a24:	add	r1, pc, r1
   12a28:	bl	113e0 <errx@plt>
   12a2c:	bl	1135c <__errno_location@plt>
   12a30:	mov	r3, r4
   12a34:	mov	r1, sp
   12a38:	mov	r2, #10
   12a3c:	mov	r9, r0
   12a40:	str	r4, [r0]
   12a44:	mov	r0, r6
   12a48:	bl	11428 <__strtoll_internal@plt>
   12a4c:	ldr	r3, [r9]
   12a50:	cmp	r3, r4
   12a54:	beq	12a70 <__assert_fail@plt+0x15c4>
   12a58:	ldr	r1, [pc, #88]	; 12ab8 <__assert_fail@plt+0x160c>
   12a5c:	mov	r2, r8
   12a60:	mov	r3, r6
   12a64:	mov	r0, #1
   12a68:	add	r1, pc, r1
   12a6c:	bl	11260 <err@plt>
   12a70:	ldr	r3, [sp]
   12a74:	cmp	r6, r3
   12a78:	beq	12a14 <__assert_fail@plt+0x1568>
   12a7c:	cmp	r3, #0
   12a80:	beq	12a90 <__assert_fail@plt+0x15e4>
   12a84:	ldrsb	r3, [r3]
   12a88:	cmp	r3, #0
   12a8c:	bne	12a14 <__assert_fail@plt+0x1568>
   12a90:	ldr	r2, [sp, #4]
   12a94:	ldr	r3, [r7]
   12a98:	cmp	r2, r3
   12a9c:	bne	12aa8 <__assert_fail@plt+0x15fc>
   12aa0:	add	sp, sp, #8
   12aa4:	pop	{r4, r6, r7, r8, r9, pc}
   12aa8:	bl	11230 <__stack_chk_fail@plt>
   12aac:	andeq	r3, r1, r0, lsr r6
   12ab0:	andeq	r0, r0, ip, lsl r1
   12ab4:	muleq	r0, ip, r8
   12ab8:	andeq	r2, r0, r8, asr r8
   12abc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12ac0:	mov	r8, r0
   12ac4:	mov	r9, r1
   12ac8:	bl	129c0 <__assert_fail@plt+0x1514>
   12acc:	mvn	r4, #0
   12ad0:	mov	r5, #0
   12ad4:	adds	r6, r0, #-2147483648	; 0x80000000
   12ad8:	adc	r7, r1, #0
   12adc:	cmp	r7, r5
   12ae0:	cmpeq	r6, r4
   12ae4:	popls	{r3, r4, r5, r6, r7, r8, r9, pc}
   12ae8:	ldr	r1, [pc, #16]	; 12b00 <__assert_fail@plt+0x1654>
   12aec:	mov	r2, r9
   12af0:	mov	r3, r8
   12af4:	mov	r0, #1
   12af8:	add	r1, pc, r1
   12afc:	bl	113e0 <errx@plt>
   12b00:	andeq	r2, r0, r8, asr #15
   12b04:	push	{r3, r4, r5, lr}
   12b08:	mov	r4, r0
   12b0c:	mov	r5, r1
   12b10:	bl	12abc <__assert_fail@plt+0x1610>
   12b14:	add	ip, r0, #32768	; 0x8000
   12b18:	cmp	ip, #65536	; 0x10000
   12b1c:	bcs	12b28 <__assert_fail@plt+0x167c>
   12b20:	sxth	r0, r0
   12b24:	pop	{r3, r4, r5, pc}
   12b28:	ldr	r1, [pc, #16]	; 12b40 <__assert_fail@plt+0x1694>
   12b2c:	mov	r2, r5
   12b30:	mov	r3, r4
   12b34:	mov	r0, #1
   12b38:	add	r1, pc, r1
   12b3c:	bl	113e0 <errx@plt>
   12b40:	andeq	r2, r0, r8, lsl #15
   12b44:	mov	r2, #10
   12b48:	b	12538 <__assert_fail@plt+0x108c>
   12b4c:	push	{r3, r4, r5, r6, r7, lr}
   12b50:	mov	r6, r0
   12b54:	mov	r7, r1
   12b58:	bl	12b44 <__assert_fail@plt+0x1698>
   12b5c:	mvn	r4, #0
   12b60:	mov	r5, #0
   12b64:	cmp	r1, r5
   12b68:	cmpeq	r0, r4
   12b6c:	popls	{r3, r4, r5, r6, r7, pc}
   12b70:	ldr	r1, [pc, #16]	; 12b88 <__assert_fail@plt+0x16dc>
   12b74:	mov	r2, r7
   12b78:	mov	r3, r6
   12b7c:	mov	r0, #1
   12b80:	add	r1, pc, r1
   12b84:	bl	113e0 <errx@plt>
   12b88:	andeq	r2, r0, r0, asr #14
   12b8c:	push	{r3, r4, r5, lr}
   12b90:	mov	r4, r0
   12b94:	mov	r5, r1
   12b98:	bl	12b4c <__assert_fail@plt+0x16a0>
   12b9c:	cmp	r0, #65536	; 0x10000
   12ba0:	bcs	12bac <__assert_fail@plt+0x1700>
   12ba4:	uxth	r0, r0
   12ba8:	pop	{r3, r4, r5, pc}
   12bac:	ldr	r1, [pc, #16]	; 12bc4 <__assert_fail@plt+0x1718>
   12bb0:	mov	r2, r5
   12bb4:	mov	r3, r4
   12bb8:	mov	r0, #1
   12bbc:	add	r1, pc, r1
   12bc0:	bl	113e0 <errx@plt>
   12bc4:	andeq	r2, r0, r4, lsl #14
   12bc8:	mov	r2, #16
   12bcc:	b	12538 <__assert_fail@plt+0x108c>
   12bd0:	ldr	r3, [pc, #216]	; 12cb0 <__assert_fail@plt+0x1804>
   12bd4:	push	{r4, r5, r6, r7, r8, lr}
   12bd8:	subs	r4, r0, #0
   12bdc:	ldr	r0, [pc, #208]	; 12cb4 <__assert_fail@plt+0x1808>
   12be0:	add	r3, pc, r3
   12be4:	sub	sp, sp, #8
   12be8:	mov	r5, #0
   12bec:	mov	r7, r1
   12bf0:	ldr	r6, [r3, r0]
   12bf4:	str	r5, [sp]
   12bf8:	ldr	r3, [r6]
   12bfc:	str	r3, [sp, #4]
   12c00:	beq	12c10 <__assert_fail@plt+0x1764>
   12c04:	ldrsb	r3, [r4]
   12c08:	cmp	r3, r5
   12c0c:	bne	12c38 <__assert_fail@plt+0x178c>
   12c10:	bl	1135c <__errno_location@plt>
   12c14:	ldr	r3, [r0]
   12c18:	cmp	r3, #0
   12c1c:	bne	12c5c <__assert_fail@plt+0x17b0>
   12c20:	ldr	r1, [pc, #144]	; 12cb8 <__assert_fail@plt+0x180c>
   12c24:	mov	r2, r7
   12c28:	mov	r3, r4
   12c2c:	mov	r0, #1
   12c30:	add	r1, pc, r1
   12c34:	bl	113e0 <errx@plt>
   12c38:	bl	1135c <__errno_location@plt>
   12c3c:	mov	r1, sp
   12c40:	mov	r8, r0
   12c44:	str	r5, [r0]
   12c48:	mov	r0, r4
   12c4c:	bl	113a4 <strtod@plt>
   12c50:	ldr	r3, [r8]
   12c54:	cmp	r3, r5
   12c58:	beq	12c74 <__assert_fail@plt+0x17c8>
   12c5c:	ldr	r1, [pc, #88]	; 12cbc <__assert_fail@plt+0x1810>
   12c60:	mov	r2, r7
   12c64:	mov	r3, r4
   12c68:	mov	r0, #1
   12c6c:	add	r1, pc, r1
   12c70:	bl	11260 <err@plt>
   12c74:	ldr	r3, [sp]
   12c78:	cmp	r4, r3
   12c7c:	beq	12c20 <__assert_fail@plt+0x1774>
   12c80:	cmp	r3, #0
   12c84:	beq	12c94 <__assert_fail@plt+0x17e8>
   12c88:	ldrsb	r3, [r3]
   12c8c:	cmp	r3, #0
   12c90:	bne	12c20 <__assert_fail@plt+0x1774>
   12c94:	ldr	r2, [sp, #4]
   12c98:	ldr	r3, [r6]
   12c9c:	cmp	r2, r3
   12ca0:	bne	12cac <__assert_fail@plt+0x1800>
   12ca4:	add	sp, sp, #8
   12ca8:	pop	{r4, r5, r6, r7, r8, pc}
   12cac:	bl	11230 <__stack_chk_fail@plt>
   12cb0:	andeq	r3, r1, r8, lsl r4
   12cb4:	andeq	r0, r0, ip, lsl r1
   12cb8:	muleq	r0, r0, r6
   12cbc:	andeq	r2, r0, r4, asr r6
   12cc0:	ldr	r3, [pc, #220]	; 12da4 <__assert_fail@plt+0x18f8>
   12cc4:	push	{r4, r5, r6, r7, r8, lr}
   12cc8:	subs	r4, r0, #0
   12ccc:	ldr	r0, [pc, #212]	; 12da8 <__assert_fail@plt+0x18fc>
   12cd0:	add	r3, pc, r3
   12cd4:	sub	sp, sp, #8
   12cd8:	mov	r5, #0
   12cdc:	mov	r7, r1
   12ce0:	ldr	r6, [r3, r0]
   12ce4:	str	r5, [sp]
   12ce8:	ldr	r3, [r6]
   12cec:	str	r3, [sp, #4]
   12cf0:	beq	12d00 <__assert_fail@plt+0x1854>
   12cf4:	ldrsb	r3, [r4]
   12cf8:	cmp	r3, r5
   12cfc:	bne	12d28 <__assert_fail@plt+0x187c>
   12d00:	bl	1135c <__errno_location@plt>
   12d04:	ldr	r3, [r0]
   12d08:	cmp	r3, #0
   12d0c:	bne	12d50 <__assert_fail@plt+0x18a4>
   12d10:	ldr	r1, [pc, #148]	; 12dac <__assert_fail@plt+0x1900>
   12d14:	mov	r2, r7
   12d18:	mov	r3, r4
   12d1c:	mov	r0, #1
   12d20:	add	r1, pc, r1
   12d24:	bl	113e0 <errx@plt>
   12d28:	bl	1135c <__errno_location@plt>
   12d2c:	mov	r1, sp
   12d30:	mov	r2, #10
   12d34:	mov	r8, r0
   12d38:	str	r5, [r0]
   12d3c:	mov	r0, r4
   12d40:	bl	111b8 <strtol@plt>
   12d44:	ldr	r3, [r8]
   12d48:	cmp	r3, r5
   12d4c:	beq	12d68 <__assert_fail@plt+0x18bc>
   12d50:	ldr	r1, [pc, #88]	; 12db0 <__assert_fail@plt+0x1904>
   12d54:	mov	r2, r7
   12d58:	mov	r3, r4
   12d5c:	mov	r0, #1
   12d60:	add	r1, pc, r1
   12d64:	bl	11260 <err@plt>
   12d68:	ldr	r3, [sp]
   12d6c:	cmp	r4, r3
   12d70:	beq	12d10 <__assert_fail@plt+0x1864>
   12d74:	cmp	r3, #0
   12d78:	beq	12d88 <__assert_fail@plt+0x18dc>
   12d7c:	ldrsb	r3, [r3]
   12d80:	cmp	r3, #0
   12d84:	bne	12d10 <__assert_fail@plt+0x1864>
   12d88:	ldr	r2, [sp, #4]
   12d8c:	ldr	r3, [r6]
   12d90:	cmp	r2, r3
   12d94:	bne	12da0 <__assert_fail@plt+0x18f4>
   12d98:	add	sp, sp, #8
   12d9c:	pop	{r4, r5, r6, r7, r8, pc}
   12da0:	bl	11230 <__stack_chk_fail@plt>
   12da4:	andeq	r3, r1, r8, lsr #6
   12da8:	andeq	r0, r0, ip, lsl r1
   12dac:	andeq	r2, r0, r0, lsr #11
   12db0:	andeq	r2, r0, r0, ror #10
   12db4:	ldr	r3, [pc, #220]	; 12e98 <__assert_fail@plt+0x19ec>
   12db8:	push	{r4, r5, r6, r7, r8, lr}
   12dbc:	subs	r4, r0, #0
   12dc0:	ldr	r0, [pc, #212]	; 12e9c <__assert_fail@plt+0x19f0>
   12dc4:	add	r3, pc, r3
   12dc8:	sub	sp, sp, #8
   12dcc:	mov	r5, #0
   12dd0:	mov	r7, r1
   12dd4:	ldr	r6, [r3, r0]
   12dd8:	str	r5, [sp]
   12ddc:	ldr	r3, [r6]
   12de0:	str	r3, [sp, #4]
   12de4:	beq	12df4 <__assert_fail@plt+0x1948>
   12de8:	ldrsb	r3, [r4]
   12dec:	cmp	r3, r5
   12df0:	bne	12e1c <__assert_fail@plt+0x1970>
   12df4:	bl	1135c <__errno_location@plt>
   12df8:	ldr	r3, [r0]
   12dfc:	cmp	r3, #0
   12e00:	bne	12e44 <__assert_fail@plt+0x1998>
   12e04:	ldr	r1, [pc, #148]	; 12ea0 <__assert_fail@plt+0x19f4>
   12e08:	mov	r2, r7
   12e0c:	mov	r3, r4
   12e10:	mov	r0, #1
   12e14:	add	r1, pc, r1
   12e18:	bl	113e0 <errx@plt>
   12e1c:	bl	1135c <__errno_location@plt>
   12e20:	mov	r1, sp
   12e24:	mov	r2, #10
   12e28:	mov	r8, r0
   12e2c:	str	r5, [r0]
   12e30:	mov	r0, r4
   12e34:	bl	1132c <strtoul@plt>
   12e38:	ldr	r3, [r8]
   12e3c:	cmp	r3, r5
   12e40:	beq	12e5c <__assert_fail@plt+0x19b0>
   12e44:	ldr	r1, [pc, #88]	; 12ea4 <__assert_fail@plt+0x19f8>
   12e48:	mov	r2, r7
   12e4c:	mov	r3, r4
   12e50:	mov	r0, #1
   12e54:	add	r1, pc, r1
   12e58:	bl	11260 <err@plt>
   12e5c:	ldr	r3, [sp]
   12e60:	cmp	r4, r3
   12e64:	beq	12e04 <__assert_fail@plt+0x1958>
   12e68:	cmp	r3, #0
   12e6c:	beq	12e7c <__assert_fail@plt+0x19d0>
   12e70:	ldrsb	r3, [r3]
   12e74:	cmp	r3, #0
   12e78:	bne	12e04 <__assert_fail@plt+0x1958>
   12e7c:	ldr	r2, [sp, #4]
   12e80:	ldr	r3, [r6]
   12e84:	cmp	r2, r3
   12e88:	bne	12e94 <__assert_fail@plt+0x19e8>
   12e8c:	add	sp, sp, #8
   12e90:	pop	{r4, r5, r6, r7, r8, pc}
   12e94:	bl	11230 <__stack_chk_fail@plt>
   12e98:	andeq	r3, r1, r4, lsr r2
   12e9c:	andeq	r0, r0, ip, lsl r1
   12ea0:	andeq	r2, r0, ip, lsr #9
   12ea4:	andeq	r2, r0, ip, ror #8
   12ea8:	ldr	ip, [pc, #132]	; 12f34 <__assert_fail@plt+0x1a88>
   12eac:	push	{r4, r5, r6, lr}
   12eb0:	add	ip, pc, ip
   12eb4:	ldr	lr, [pc, #124]	; 12f38 <__assert_fail@plt+0x1a8c>
   12eb8:	sub	sp, sp, #16
   12ebc:	mov	r6, r1
   12ec0:	mov	r5, r0
   12ec4:	mov	r1, sp
   12ec8:	ldr	r4, [ip, lr]
   12ecc:	ldr	ip, [r4]
   12ed0:	str	ip, [sp, #12]
   12ed4:	bl	1289c <__assert_fail@plt+0x13f0>
   12ed8:	cmp	r0, #0
   12edc:	bne	12efc <__assert_fail@plt+0x1a50>
   12ee0:	ldr	r2, [sp, #12]
   12ee4:	ldr	r3, [r4]
   12ee8:	ldrd	r0, [sp]
   12eec:	cmp	r2, r3
   12ef0:	bne	12f30 <__assert_fail@plt+0x1a84>
   12ef4:	add	sp, sp, #16
   12ef8:	pop	{r4, r5, r6, pc}
   12efc:	bl	1135c <__errno_location@plt>
   12f00:	mov	r2, r6
   12f04:	ldr	r3, [r0]
   12f08:	mov	r0, #1
   12f0c:	cmp	r3, #0
   12f10:	mov	r3, r5
   12f14:	beq	12f24 <__assert_fail@plt+0x1a78>
   12f18:	ldr	r1, [pc, #28]	; 12f3c <__assert_fail@plt+0x1a90>
   12f1c:	add	r1, pc, r1
   12f20:	bl	11260 <err@plt>
   12f24:	ldr	r1, [pc, #20]	; 12f40 <__assert_fail@plt+0x1a94>
   12f28:	add	r1, pc, r1
   12f2c:	bl	113e0 <errx@plt>
   12f30:	bl	11230 <__stack_chk_fail@plt>
   12f34:	andeq	r3, r1, r8, asr #2
   12f38:	andeq	r0, r0, ip, lsl r1
   12f3c:	andeq	r2, r0, r4, lsr #7
   12f40:	muleq	r0, r8, r3
   12f44:	push	{r4, lr}
   12f48:	mov	r4, r1
   12f4c:	mov	r1, r2
   12f50:	bl	12bd0 <__assert_fail@plt+0x1724>
   12f54:	vldr	d7, [pc, #28]	; 12f78 <__assert_fail@plt+0x1acc>
   12f58:	vcvt.s32.f64	s11, d0
   12f5c:	vcvt.f64.s32	d6, s11
   12f60:	vstr	s11, [r4]
   12f64:	vsub.f64	d0, d0, d6
   12f68:	vmul.f64	d0, d0, d7
   12f6c:	vcvt.s32.f64	s0, d0
   12f70:	vstr	s0, [r4, #4]
   12f74:	pop	{r4, pc}
   12f78:	andeq	r0, r0, r0
   12f7c:	smlawbmi	lr, r0, r4, r8
   12f80:	and	r3, r0, #61440	; 0xf000
   12f84:	cmp	r3, #16384	; 0x4000
   12f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   12f8c:	moveq	r3, #100	; 0x64
   12f90:	beq	13008 <__assert_fail@plt+0x1b5c>
   12f94:	cmp	r3, #40960	; 0xa000
   12f98:	moveq	r3, #108	; 0x6c
   12f9c:	beq	13008 <__assert_fail@plt+0x1b5c>
   12fa0:	cmp	r3, #8192	; 0x2000
   12fa4:	moveq	r3, #99	; 0x63
   12fa8:	beq	13008 <__assert_fail@plt+0x1b5c>
   12fac:	cmp	r3, #24576	; 0x6000
   12fb0:	moveq	r3, #98	; 0x62
   12fb4:	beq	13008 <__assert_fail@plt+0x1b5c>
   12fb8:	cmp	r3, #49152	; 0xc000
   12fbc:	moveq	r3, #115	; 0x73
   12fc0:	beq	13008 <__assert_fail@plt+0x1b5c>
   12fc4:	cmp	r3, #4096	; 0x1000
   12fc8:	moveq	r3, #112	; 0x70
   12fcc:	beq	13008 <__assert_fail@plt+0x1b5c>
   12fd0:	cmp	r3, #32768	; 0x8000
   12fd4:	beq	13004 <__assert_fail@plt+0x1b58>
   12fd8:	mov	r4, #9
   12fdc:	mov	r3, #8
   12fe0:	mov	r6, #7
   12fe4:	mov	r7, #6
   12fe8:	mov	r2, #5
   12fec:	mov	r8, #4
   12ff0:	mov	r9, #3
   12ff4:	mov	ip, #2
   12ff8:	mov	sl, #1
   12ffc:	mov	fp, #0
   13000:	b	13034 <__assert_fail@plt+0x1b88>
   13004:	mov	r3, #45	; 0x2d
   13008:	strb	r3, [r1]
   1300c:	mov	r4, #10
   13010:	mov	r3, #9
   13014:	mov	r6, #8
   13018:	mov	r7, #7
   1301c:	mov	r2, #6
   13020:	mov	r8, #5
   13024:	mov	r9, #4
   13028:	mov	ip, #3
   1302c:	mov	sl, #2
   13030:	mov	fp, #1
   13034:	tst	r0, #256	; 0x100
   13038:	add	ip, r1, ip
   1303c:	moveq	r5, #45	; 0x2d
   13040:	movne	r5, #114	; 0x72
   13044:	tst	r0, #128	; 0x80
   13048:	strb	r5, [r1, fp]
   1304c:	moveq	r5, #45	; 0x2d
   13050:	movne	r5, #119	; 0x77
   13054:	tst	r0, #2048	; 0x800
   13058:	strb	r5, [r1, sl]
   1305c:	beq	130f8 <__assert_fail@plt+0x1c4c>
   13060:	tst	r0, #64	; 0x40
   13064:	moveq	r5, #83	; 0x53
   13068:	movne	r5, #115	; 0x73
   1306c:	tst	r0, #32
   13070:	strb	r5, [ip]
   13074:	add	r2, r1, r2
   13078:	moveq	ip, #45	; 0x2d
   1307c:	movne	ip, #114	; 0x72
   13080:	tst	r0, #16
   13084:	strb	ip, [r1, r9]
   13088:	moveq	ip, #45	; 0x2d
   1308c:	movne	ip, #119	; 0x77
   13090:	tst	r0, #1024	; 0x400
   13094:	strb	ip, [r1, r8]
   13098:	beq	13118 <__assert_fail@plt+0x1c6c>
   1309c:	tst	r0, #8
   130a0:	moveq	ip, #83	; 0x53
   130a4:	movne	ip, #115	; 0x73
   130a8:	tst	r0, #4
   130ac:	strb	ip, [r2]
   130b0:	add	r3, r1, r3
   130b4:	moveq	r2, #45	; 0x2d
   130b8:	movne	r2, #114	; 0x72
   130bc:	tst	r0, #2
   130c0:	strb	r2, [r1, r7]
   130c4:	moveq	r2, #45	; 0x2d
   130c8:	movne	r2, #119	; 0x77
   130cc:	tst	r0, #512	; 0x200
   130d0:	strb	r2, [r1, r6]
   130d4:	beq	13108 <__assert_fail@plt+0x1c5c>
   130d8:	tst	r0, #1
   130dc:	moveq	r2, #84	; 0x54
   130e0:	movne	r2, #116	; 0x74
   130e4:	strb	r2, [r3]
   130e8:	mov	r3, #0
   130ec:	strb	r3, [r1, r4]
   130f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   130f4:	bx	lr
   130f8:	tst	r0, #64	; 0x40
   130fc:	moveq	r5, #45	; 0x2d
   13100:	movne	r5, #120	; 0x78
   13104:	b	1306c <__assert_fail@plt+0x1bc0>
   13108:	tst	r0, #1
   1310c:	moveq	r2, #45	; 0x2d
   13110:	movne	r2, #120	; 0x78
   13114:	b	130e4 <__assert_fail@plt+0x1c38>
   13118:	tst	r0, #8
   1311c:	moveq	ip, #45	; 0x2d
   13120:	movne	ip, #120	; 0x78
   13124:	b	130a8 <__assert_fail@plt+0x1bfc>
   13128:	ldr	r1, [pc, #580]	; 13374 <__assert_fail@plt+0x1ec8>
   1312c:	tst	r0, #2
   13130:	ldr	ip, [pc, #576]	; 13378 <__assert_fail@plt+0x1ecc>
   13134:	add	r1, pc, r1
   13138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1313c:	sub	sp, sp, #100	; 0x64
   13140:	ldr	r6, [r1, ip]
   13144:	addeq	r7, sp, #52	; 0x34
   13148:	addne	lr, sp, #53	; 0x35
   1314c:	addne	r7, sp, #52	; 0x34
   13150:	moveq	lr, r7
   13154:	mov	ip, #10
   13158:	ldr	r1, [r6]
   1315c:	str	r1, [sp, #92]	; 0x5c
   13160:	movne	r1, #32
   13164:	strbne	r1, [sp, #52]	; 0x34
   13168:	mov	r1, #1
   1316c:	sub	r9, ip, #32
   13170:	rsb	r8, ip, #32
   13174:	lsl	r5, r1, r9
   13178:	lsl	r4, r1, ip
   1317c:	orr	r5, r5, r1, lsr r8
   13180:	cmp	r3, r5
   13184:	cmpeq	r2, r4
   13188:	bcc	132f4 <__assert_fail@plt+0x1e48>
   1318c:	add	ip, ip, #10
   13190:	cmp	ip, #70	; 0x46
   13194:	bne	1316c <__assert_fail@plt+0x1cc0>
   13198:	mov	r1, #60	; 0x3c
   1319c:	movw	r5, #26215	; 0x6667
   131a0:	movt	r5, #26214	; 0x6666
   131a4:	ldr	r8, [pc, #464]	; 1337c <__assert_fail@plt+0x1ed0>
   131a8:	mov	fp, #1
   131ac:	smull	sl, r9, r5, r1
   131b0:	add	r8, pc, r8
   131b4:	str	r8, [sp, #36]	; 0x24
   131b8:	sub	r8, r1, #32
   131bc:	asr	r4, r1, #31
   131c0:	lsl	r5, fp, r8
   131c4:	str	r4, [sp, #44]	; 0x2c
   131c8:	lsl	r4, fp, r1
   131cc:	subs	r4, r4, #1
   131d0:	str	r9, [sp, #40]	; 0x28
   131d4:	rsb	r9, r1, #32
   131d8:	ldr	sl, [sp, #40]	; 0x28
   131dc:	orr	r5, r5, fp, lsr r9
   131e0:	ldr	fp, [sp, #44]	; 0x2c
   131e4:	sbc	r5, r5, #0
   131e8:	tst	r0, #1
   131ec:	lsr	r1, r2, r1
   131f0:	rsb	fp, fp, sl, asr #2
   131f4:	ldr	sl, [sp, #36]	; 0x24
   131f8:	orr	r1, r1, r3, lsl r9
   131fc:	and	r5, r5, r3
   13200:	orr	r8, r1, r3, lsr r8
   13204:	and	r4, r4, r2
   13208:	ldrb	r0, [sl, fp]
   1320c:	add	r3, lr, #1
   13210:	strb	r0, [lr]
   13214:	bne	132d8 <__assert_fail@plt+0x1e2c>
   13218:	orrs	fp, r4, r5
   1321c:	mov	r2, #0
   13220:	strb	r2, [r3]
   13224:	beq	1330c <__assert_fail@plt+0x1e60>
   13228:	sub	lr, ip, #20
   1322c:	sub	ip, ip, #52	; 0x34
   13230:	rsb	r3, lr, #32
   13234:	lsr	r0, r4, lr
   13238:	orr	r0, r0, r5, lsl r3
   1323c:	lsr	r1, r5, lr
   13240:	orr	r0, r0, r5, lsr ip
   13244:	mov	r2, #100	; 0x64
   13248:	adds	r0, r0, #50	; 0x32
   1324c:	mov	r3, #0
   13250:	adc	r1, r1, #0
   13254:	bl	13df0 <__assert_fail@plt+0x2944>
   13258:	mov	r4, r0
   1325c:	mov	r5, r1
   13260:	cmp	r5, #0
   13264:	cmpeq	r4, #10
   13268:	addeq	r8, r8, #1
   1326c:	beq	1330c <__assert_fail@plt+0x1e60>
   13270:	orrs	r2, r4, r5
   13274:	beq	1330c <__assert_fail@plt+0x1e60>
   13278:	bl	11410 <localeconv@plt>
   1327c:	cmp	r0, #0
   13280:	beq	13358 <__assert_fail@plt+0x1eac>
   13284:	ldr	r3, [r0]
   13288:	cmp	r3, #0
   1328c:	beq	13368 <__assert_fail@plt+0x1ebc>
   13290:	ldrsb	r2, [r3]
   13294:	cmp	r2, #0
   13298:	ldreq	r3, [pc, #224]	; 13380 <__assert_fail@plt+0x1ed4>
   1329c:	addeq	r3, pc, r3
   132a0:	add	r9, sp, #60	; 0x3c
   132a4:	ldr	ip, [pc, #216]	; 13384 <__assert_fail@plt+0x1ed8>
   132a8:	mov	r1, #32
   132ac:	str	r3, [sp, #8]
   132b0:	add	ip, pc, ip
   132b4:	str	r8, [sp, #4]
   132b8:	mov	r0, r9
   132bc:	strd	r4, [sp, #16]
   132c0:	mov	r3, r1
   132c4:	str	r7, [sp, #24]
   132c8:	mov	r2, #1
   132cc:	str	ip, [sp]
   132d0:	bl	11494 <__snprintf_chk@plt>
   132d4:	b	13338 <__assert_fail@plt+0x1e8c>
   132d8:	cmp	r0, #66	; 0x42
   132dc:	addne	r3, lr, #3
   132e0:	movne	r1, #105	; 0x69
   132e4:	movne	r2, #66	; 0x42
   132e8:	strbne	r1, [lr, #1]
   132ec:	strbne	r2, [lr, #2]
   132f0:	b	13218 <__assert_fail@plt+0x1d6c>
   132f4:	subs	r1, ip, #10
   132f8:	strbeq	r1, [lr, #1]
   132fc:	moveq	r3, #66	; 0x42
   13300:	moveq	r8, r2
   13304:	strbeq	r3, [lr]
   13308:	bne	1319c <__assert_fail@plt+0x1cf0>
   1330c:	ldr	r3, [pc, #116]	; 13388 <__assert_fail@plt+0x1edc>
   13310:	add	r9, sp, #60	; 0x3c
   13314:	mov	r1, #32
   13318:	str	r8, [sp, #4]
   1331c:	add	r3, pc, r3
   13320:	str	r7, [sp, #8]
   13324:	str	r3, [sp]
   13328:	mov	r0, r9
   1332c:	mov	r3, r1
   13330:	mov	r2, #1
   13334:	bl	11494 <__snprintf_chk@plt>
   13338:	mov	r0, r9
   1333c:	bl	11380 <__strdup@plt>
   13340:	ldr	r2, [sp, #92]	; 0x5c
   13344:	ldr	r3, [r6]
   13348:	cmp	r2, r3
   1334c:	bne	13364 <__assert_fail@plt+0x1eb8>
   13350:	add	sp, sp, #100	; 0x64
   13354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13358:	ldr	r3, [pc, #44]	; 1338c <__assert_fail@plt+0x1ee0>
   1335c:	add	r3, pc, r3
   13360:	b	132a0 <__assert_fail@plt+0x1df4>
   13364:	bl	11230 <__stack_chk_fail@plt>
   13368:	ldr	r3, [pc, #32]	; 13390 <__assert_fail@plt+0x1ee4>
   1336c:	add	r3, pc, r3
   13370:	b	132a0 <__assert_fail@plt+0x1df4>
   13374:	andeq	r2, r1, r4, asr #29
   13378:	andeq	r0, r0, ip, lsl r1
   1337c:	andeq	r2, r0, r4, lsr r1
   13380:	andeq	r1, r0, r8, ror lr
   13384:	andeq	r2, r0, ip, lsr r0
   13388:	ldrdeq	r1, [r0], -ip
   1338c:			; <UNDEFINED> instruction: 0x00001db8
   13390:	andeq	r1, r0, r8, lsr #27
   13394:	cmp	r0, #0
   13398:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1339c:	mov	r8, r1
   133a0:	mov	sl, r2
   133a4:	mov	r9, r3
   133a8:	beq	13464 <__assert_fail@plt+0x1fb8>
   133ac:	ldrb	r5, [r0]
   133b0:	cmp	r5, #0
   133b4:	beq	13464 <__assert_fail@plt+0x1fb8>
   133b8:	cmp	r2, #0
   133bc:	cmpne	r1, #0
   133c0:	movne	ip, #0
   133c4:	moveq	ip, #1
   133c8:	beq	13464 <__assert_fail@plt+0x1fb8>
   133cc:	cmp	r3, #0
   133d0:	movne	r4, r0
   133d4:	movne	r6, ip
   133d8:	bne	133ec <__assert_fail@plt+0x1f40>
   133dc:	b	13464 <__assert_fail@plt+0x1fb8>
   133e0:	ldrb	r5, [r4, #1]!
   133e4:	cmp	r5, #0
   133e8:	beq	1345c <__assert_fail@plt+0x1fb0>
   133ec:	cmp	sl, r6
   133f0:	bls	1346c <__assert_fail@plt+0x1fc0>
   133f4:	cmp	ip, #0
   133f8:	ldrsb	r7, [r4, #1]
   133fc:	moveq	ip, r4
   13400:	cmp	r5, #44	; 0x2c
   13404:	mov	r0, ip
   13408:	moveq	r5, r4
   1340c:	movne	r5, #0
   13410:	cmp	r7, #0
   13414:	addeq	r5, r4, #1
   13418:	cmp	r5, #0
   1341c:	rsb	r1, ip, r5
   13420:	beq	13454 <__assert_fail@plt+0x1fa8>
   13424:	cmp	ip, r5
   13428:	bcs	13464 <__assert_fail@plt+0x1fb8>
   1342c:	blx	r9
   13430:	mov	ip, #0
   13434:	add	r3, r6, #1
   13438:	cmn	r0, #1
   1343c:	beq	13464 <__assert_fail@plt+0x1fb8>
   13440:	str	r0, [r8, r6, lsl #2]
   13444:	mov	r6, r3
   13448:	ldrsb	r2, [r5]
   1344c:	cmp	r2, ip
   13450:	beq	13474 <__assert_fail@plt+0x1fc8>
   13454:	cmn	r4, #1
   13458:	bne	133e0 <__assert_fail@plt+0x1f34>
   1345c:	mov	r0, r6
   13460:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13464:	mvn	r0, #0
   13468:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1346c:	mvn	r0, #1
   13470:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13474:	mov	r6, r3
   13478:	b	1345c <__assert_fail@plt+0x1fb0>
   1347c:	cmp	r0, #0
   13480:	push	{r4, lr}
   13484:	mov	r4, r3
   13488:	beq	13500 <__assert_fail@plt+0x2054>
   1348c:	ldrb	ip, [r0]
   13490:	cmp	ip, #0
   13494:	beq	13500 <__assert_fail@plt+0x2054>
   13498:	cmp	r3, #0
   1349c:	beq	13500 <__assert_fail@plt+0x2054>
   134a0:	ldr	r3, [r3]
   134a4:	cmp	r3, #0
   134a8:	blt	13500 <__assert_fail@plt+0x2054>
   134ac:	cmp	r3, r2
   134b0:	bhi	13500 <__assert_fail@plt+0x2054>
   134b4:	cmp	ip, #43	; 0x2b
   134b8:	lsleq	ip, r3, #2
   134bc:	addeq	r0, r0, #1
   134c0:	movne	ip, #0
   134c4:	strne	ip, [r4]
   134c8:	movne	r3, ip
   134cc:	add	r1, r1, ip
   134d0:	rsb	r2, r3, r2
   134d4:	ldr	r3, [sp, #8]
   134d8:	bl	13394 <__assert_fail@plt+0x1ee8>
   134dc:	subs	r3, r0, #0
   134e0:	ble	134f8 <__assert_fail@plt+0x204c>
   134e4:	ldr	r2, [r4]
   134e8:	mov	r0, r3
   134ec:	add	r3, r2, r3
   134f0:	str	r3, [r4]
   134f4:	pop	{r4, pc}
   134f8:	mov	r0, r3
   134fc:	pop	{r4, pc}
   13500:	mvn	r0, #0
   13504:	pop	{r4, pc}
   13508:	cmp	r2, #0
   1350c:	cmpne	r0, #0
   13510:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13514:	mov	r4, r0
   13518:	mov	r7, r2
   1351c:	movne	r3, #0
   13520:	moveq	r3, #1
   13524:	mov	r9, r1
   13528:	beq	135c4 <__assert_fail@plt+0x2118>
   1352c:	cmp	r1, #0
   13530:	beq	135c4 <__assert_fail@plt+0x2118>
   13534:	mov	r6, r0
   13538:	mov	r8, #1
   1353c:	ldrb	r5, [r6], #1
   13540:	cmp	r5, #0
   13544:	beq	135b4 <__assert_fail@plt+0x2108>
   13548:	cmp	r5, #44	; 0x2c
   1354c:	ldrsb	r0, [r4, #1]
   13550:	moveq	r5, r4
   13554:	movne	r5, #0
   13558:	cmp	r3, #0
   1355c:	moveq	r3, r4
   13560:	cmp	r0, #0
   13564:	mov	r0, r3
   13568:	moveq	r5, r6
   1356c:	cmp	r5, #0
   13570:	rsb	r1, r3, r5
   13574:	beq	135ac <__assert_fail@plt+0x2100>
   13578:	cmp	r3, r5
   1357c:	bcs	135bc <__assert_fail@plt+0x2110>
   13580:	blx	r7
   13584:	mov	r3, #0
   13588:	cmp	r0, #0
   1358c:	and	r2, r0, #7
   13590:	poplt	{r3, r4, r5, r6, r7, r8, r9, pc}
   13594:	ldrb	r1, [r9, r0, asr #3]
   13598:	orr	r2, r1, r8, lsl r2
   1359c:	strb	r2, [r9, r0, asr #3]
   135a0:	ldrsb	r2, [r5]
   135a4:	cmp	r2, r3
   135a8:	beq	135b4 <__assert_fail@plt+0x2108>
   135ac:	adds	r4, r4, #1
   135b0:	bne	1353c <__assert_fail@plt+0x2090>
   135b4:	mov	r0, #0
   135b8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   135bc:	mvn	r0, #0
   135c0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   135c4:	mvn	r0, #21
   135c8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   135cc:	cmp	r2, #0
   135d0:	cmpne	r0, #0
   135d4:	push	{r4, r5, r6, r7, r8, lr}
   135d8:	movne	r3, #0
   135dc:	moveq	r3, #1
   135e0:	mov	r4, r0
   135e4:	mov	r8, r2
   135e8:	mov	r7, r1
   135ec:	beq	13680 <__assert_fail@plt+0x21d4>
   135f0:	cmp	r1, #0
   135f4:	beq	13680 <__assert_fail@plt+0x21d4>
   135f8:	mov	r6, r0
   135fc:	ldrb	r5, [r6], #1
   13600:	cmp	r5, #0
   13604:	beq	13670 <__assert_fail@plt+0x21c4>
   13608:	cmp	r5, #44	; 0x2c
   1360c:	ldrsb	r0, [r4, #1]
   13610:	moveq	r5, r4
   13614:	movne	r5, #0
   13618:	cmp	r3, #0
   1361c:	moveq	r3, r4
   13620:	cmp	r0, #0
   13624:	mov	r0, r3
   13628:	moveq	r5, r6
   1362c:	cmp	r5, #0
   13630:	rsb	r1, r3, r5
   13634:	beq	13668 <__assert_fail@plt+0x21bc>
   13638:	cmp	r3, r5
   1363c:	bcs	13678 <__assert_fail@plt+0x21cc>
   13640:	blx	r8
   13644:	mov	r3, #0
   13648:	cmp	r0, #0
   1364c:	poplt	{r4, r5, r6, r7, r8, pc}
   13650:	ldr	r2, [r7]
   13654:	orr	r0, r2, r0
   13658:	str	r0, [r7]
   1365c:	ldrsb	r2, [r5]
   13660:	cmp	r2, r3
   13664:	beq	13670 <__assert_fail@plt+0x21c4>
   13668:	adds	r4, r4, #1
   1366c:	bne	135fc <__assert_fail@plt+0x2150>
   13670:	mov	r0, #0
   13674:	pop	{r4, r5, r6, r7, r8, pc}
   13678:	mvn	r0, #0
   1367c:	pop	{r4, r5, r6, r7, r8, pc}
   13680:	mvn	r0, #21
   13684:	pop	{r4, r5, r6, r7, r8, pc}
   13688:	ldr	ip, [pc, #380]	; 1380c <__assert_fail@plt+0x2360>
   1368c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13690:	subs	r4, r0, #0
   13694:	ldr	r0, [pc, #372]	; 13810 <__assert_fail@plt+0x2364>
   13698:	add	ip, pc, ip
   1369c:	mov	r6, r2
   136a0:	sub	sp, sp, #12
   136a4:	mov	r2, ip
   136a8:	mov	r8, #0
   136ac:	ldr	r7, [ip, r0]
   136b0:	mov	r9, r1
   136b4:	str	r8, [sp]
   136b8:	ldr	r2, [r7]
   136bc:	str	r2, [sp, #4]
   136c0:	beq	13730 <__assert_fail@plt+0x2284>
   136c4:	str	r3, [r1]
   136c8:	str	r3, [r6]
   136cc:	bl	1135c <__errno_location@plt>
   136d0:	str	r8, [r0]
   136d4:	mov	r5, r0
   136d8:	ldrsb	r3, [r4]
   136dc:	cmp	r3, #58	; 0x3a
   136e0:	beq	1374c <__assert_fail@plt+0x22a0>
   136e4:	mov	r0, r4
   136e8:	mov	r2, #10
   136ec:	mov	r1, sp
   136f0:	bl	111b8 <strtol@plt>
   136f4:	str	r0, [r9]
   136f8:	str	r0, [r6]
   136fc:	ldr	r0, [r5]
   13700:	cmp	r0, #0
   13704:	bne	13800 <__assert_fail@plt+0x2354>
   13708:	ldr	r3, [sp]
   1370c:	cmp	r3, #0
   13710:	beq	13800 <__assert_fail@plt+0x2354>
   13714:	cmp	r4, r3
   13718:	beq	13800 <__assert_fail@plt+0x2354>
   1371c:	ldrsb	r2, [r3]
   13720:	cmp	r2, #58	; 0x3a
   13724:	beq	13798 <__assert_fail@plt+0x22ec>
   13728:	cmp	r2, #45	; 0x2d
   1372c:	beq	137a8 <__assert_fail@plt+0x22fc>
   13730:	mov	r0, #0
   13734:	ldr	r2, [sp, #4]
   13738:	ldr	r3, [r7]
   1373c:	cmp	r2, r3
   13740:	bne	13808 <__assert_fail@plt+0x235c>
   13744:	add	sp, sp, #12
   13748:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1374c:	add	r4, r4, #1
   13750:	mov	r1, sp
   13754:	mov	r2, #10
   13758:	mov	r0, r4
   1375c:	bl	111b8 <strtol@plt>
   13760:	str	r0, [r6]
   13764:	ldr	r3, [r5]
   13768:	cmp	r3, #0
   1376c:	bne	13800 <__assert_fail@plt+0x2354>
   13770:	ldr	r3, [sp]
   13774:	cmp	r3, #0
   13778:	beq	13800 <__assert_fail@plt+0x2354>
   1377c:	ldrsb	r2, [r3]
   13780:	cmp	r2, #0
   13784:	bne	13800 <__assert_fail@plt+0x2354>
   13788:	cmp	r4, r3
   1378c:	movne	r0, #0
   13790:	mvneq	r0, #0
   13794:	b	13734 <__assert_fail@plt+0x2288>
   13798:	ldrsb	r2, [r3, #1]
   1379c:	cmp	r2, #0
   137a0:	streq	r0, [r6]
   137a4:	beq	13734 <__assert_fail@plt+0x2288>
   137a8:	add	r4, r3, #1
   137ac:	mov	ip, #0
   137b0:	mov	r1, sp
   137b4:	mov	r2, #10
   137b8:	mov	r0, r4
   137bc:	str	ip, [r5]
   137c0:	str	ip, [sp]
   137c4:	bl	111b8 <strtol@plt>
   137c8:	str	r0, [r6]
   137cc:	ldr	r3, [r5]
   137d0:	cmp	r3, #0
   137d4:	bne	13800 <__assert_fail@plt+0x2354>
   137d8:	ldr	r2, [sp]
   137dc:	cmp	r2, #0
   137e0:	beq	13800 <__assert_fail@plt+0x2354>
   137e4:	ldrsb	r3, [r2]
   137e8:	cmp	r3, #0
   137ec:	bne	13800 <__assert_fail@plt+0x2354>
   137f0:	cmp	r4, r2
   137f4:	movne	r0, #0
   137f8:	mvneq	r0, #0
   137fc:	b	13734 <__assert_fail@plt+0x2288>
   13800:	mvn	r0, #0
   13804:	b	13734 <__assert_fail@plt+0x2288>
   13808:	bl	11230 <__stack_chk_fail@plt>
   1380c:	andeq	r2, r1, r0, ror #18
   13810:	andeq	r0, r0, ip, lsl r1
   13814:	rsbs	r2, r0, #1
   13818:	push	{r4, r5, r6, lr}
   1381c:	movcc	r2, #0
   13820:	rsbs	r3, r1, #1
   13824:	mov	r5, r0
   13828:	mov	r4, r1
   1382c:	movcc	r3, #0
   13830:	ands	ip, r2, r3
   13834:	bne	138a0 <__assert_fail@plt+0x23f4>
   13838:	orrs	r3, r2, r3
   1383c:	bne	138a8 <__assert_fail@plt+0x23fc>
   13840:	bl	111ac <strcmp@plt>
   13844:	cmp	r0, #0
   13848:	beq	138a0 <__assert_fail@plt+0x23f4>
   1384c:	mov	r0, r5
   13850:	bl	11338 <strlen@plt>
   13854:	mov	r6, r0
   13858:	mov	r0, r4
   1385c:	bl	11338 <strlen@plt>
   13860:	cmp	r6, #0
   13864:	beq	13878 <__assert_fail@plt+0x23cc>
   13868:	sub	r3, r6, #1
   1386c:	ldrsb	r2, [r5, r3]
   13870:	cmp	r2, #47	; 0x2f
   13874:	moveq	r6, r3
   13878:	cmp	r0, #0
   1387c:	beq	13890 <__assert_fail@plt+0x23e4>
   13880:	sub	r3, r0, #1
   13884:	ldrsb	r2, [r4, r3]
   13888:	cmp	r2, #47	; 0x2f
   1388c:	moveq	r0, r3
   13890:	cmp	r6, r0
   13894:	beq	138b0 <__assert_fail@plt+0x2404>
   13898:	mov	r0, #0
   1389c:	pop	{r4, r5, r6, pc}
   138a0:	mov	r0, #1
   138a4:	pop	{r4, r5, r6, pc}
   138a8:	mov	r0, ip
   138ac:	pop	{r4, r5, r6, pc}
   138b0:	mov	r0, r5
   138b4:	mov	r1, r4
   138b8:	mov	r2, r6
   138bc:	bl	11470 <strncmp@plt>
   138c0:	rsbs	r0, r0, #1
   138c4:	movcc	r0, #0
   138c8:	pop	{r4, r5, r6, pc}
   138cc:	ldr	r3, [pc, #248]	; 139cc <__assert_fail@plt+0x2520>
   138d0:	cmp	r0, #0
   138d4:	cmpne	r1, #0
   138d8:	ldr	r2, [pc, #240]	; 139d0 <__assert_fail@plt+0x2524>
   138dc:	add	r3, pc, r3
   138e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   138e4:	sub	sp, sp, #20
   138e8:	ldr	r9, [r3, r2]
   138ec:	mov	r6, r1
   138f0:	addne	r8, sp, #4
   138f4:	addne	r7, sp, #8
   138f8:	ldr	r3, [r9]
   138fc:	str	r3, [sp, #12]
   13900:	bne	13948 <__assert_fail@plt+0x249c>
   13904:	b	139c0 <__assert_fail@plt+0x2514>
   13908:	cmp	r4, r3
   1390c:	bne	139c0 <__assert_fail@plt+0x2514>
   13910:	mov	r0, r5
   13914:	mov	r1, r6
   13918:	mov	r2, r4
   1391c:	bl	11470 <strncmp@plt>
   13920:	cmp	r0, #0
   13924:	bne	139c0 <__assert_fail@plt+0x2514>
   13928:	adds	r6, r6, r4
   1392c:	moveq	r3, #0
   13930:	movne	r3, #1
   13934:	adds	r0, r5, r4
   13938:	moveq	r3, #0
   1393c:	andne	r3, r3, #1
   13940:	cmp	r3, #0
   13944:	beq	139c0 <__assert_fail@plt+0x2514>
   13948:	mov	r1, r8
   1394c:	bl	12408 <__assert_fail@plt+0xf5c>
   13950:	mov	r1, r7
   13954:	mov	r5, r0
   13958:	mov	r0, r6
   1395c:	bl	12408 <__assert_fail@plt+0xf5c>
   13960:	ldr	r4, [sp, #4]
   13964:	ldr	r3, [sp, #8]
   13968:	mov	r6, r0
   1396c:	adds	r0, r3, r4
   13970:	beq	139a4 <__assert_fail@plt+0x24f8>
   13974:	cmp	r0, #1
   13978:	bne	13908 <__assert_fail@plt+0x245c>
   1397c:	cmp	r5, #0
   13980:	beq	13990 <__assert_fail@plt+0x24e4>
   13984:	ldrsb	r2, [r5]
   13988:	cmp	r2, #47	; 0x2f
   1398c:	beq	139a8 <__assert_fail@plt+0x24fc>
   13990:	cmp	r6, #0
   13994:	beq	13908 <__assert_fail@plt+0x245c>
   13998:	ldrsb	r2, [r6]
   1399c:	cmp	r2, #47	; 0x2f
   139a0:	bne	13908 <__assert_fail@plt+0x245c>
   139a4:	mov	r0, #1
   139a8:	ldr	r2, [sp, #12]
   139ac:	ldr	r3, [r9]
   139b0:	cmp	r2, r3
   139b4:	bne	139c8 <__assert_fail@plt+0x251c>
   139b8:	add	sp, sp, #20
   139bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   139c0:	mov	r0, #0
   139c4:	b	139a8 <__assert_fail@plt+0x24fc>
   139c8:	bl	11230 <__stack_chk_fail@plt>
   139cc:	andeq	r2, r1, ip, lsl r7
   139d0:	andeq	r0, r0, ip, lsl r1
   139d4:	rsbs	r3, r0, #1
   139d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139dc:	movcc	r3, #0
   139e0:	rsbs	r4, r1, #1
   139e4:	mov	r7, r1
   139e8:	mov	r6, r2
   139ec:	mov	sl, r0
   139f0:	movcc	r4, #0
   139f4:	tst	r3, r4
   139f8:	bne	13a5c <__assert_fail@plt+0x25b0>
   139fc:	cmp	r3, #0
   13a00:	bne	13a74 <__assert_fail@plt+0x25c8>
   13a04:	cmp	r4, #0
   13a08:	bne	13a84 <__assert_fail@plt+0x25d8>
   13a0c:	bl	11338 <strlen@plt>
   13a10:	mvn	r3, r0
   13a14:	cmp	r6, r3
   13a18:	mov	r5, r0
   13a1c:	bhi	13a6c <__assert_fail@plt+0x25c0>
   13a20:	add	r9, r0, r6
   13a24:	add	r0, r9, #1
   13a28:	bl	112cc <malloc@plt>
   13a2c:	subs	r8, r0, #0
   13a30:	beq	13a8c <__assert_fail@plt+0x25e0>
   13a34:	mov	r1, sl
   13a38:	mov	r2, r5
   13a3c:	bl	11200 <memcpy@plt>
   13a40:	add	r0, r8, r5
   13a44:	mov	r1, r7
   13a48:	mov	r2, r6
   13a4c:	bl	11200 <memcpy@plt>
   13a50:	strb	r4, [r8, r9]
   13a54:	mov	r0, r8
   13a58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a5c:	mov	r0, #1
   13a60:	mov	r1, r0
   13a64:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a68:	b	11188 <calloc@plt>
   13a6c:	mov	r0, r4
   13a70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a74:	mov	r0, r1
   13a78:	mov	r1, r2
   13a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a80:	b	11254 <__strndup@plt>
   13a84:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a88:	b	11380 <__strdup@plt>
   13a8c:	mov	r0, r8
   13a90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a94:	push	{r3, r4, r5, lr}
   13a98:	subs	r4, r1, #0
   13a9c:	mov	r5, r0
   13aa0:	beq	13ac0 <__assert_fail@plt+0x2614>
   13aa4:	mov	r0, r4
   13aa8:	bl	11338 <strlen@plt>
   13aac:	mov	r1, r4
   13ab0:	mov	r2, r0
   13ab4:	mov	r0, r5
   13ab8:	pop	{r3, r4, r5, lr}
   13abc:	b	139d4 <__assert_fail@plt+0x2528>
   13ac0:	mov	r2, r4
   13ac4:	mov	r0, r5
   13ac8:	mov	r1, r4
   13acc:	pop	{r3, r4, r5, lr}
   13ad0:	b	139d4 <__assert_fail@plt+0x2528>
   13ad4:	push	{r1, r2, r3}
   13ad8:	mov	r1, #1
   13adc:	push	{r4, r5, lr}
   13ae0:	sub	sp, sp, #16
   13ae4:	ldr	lr, [pc, #124]	; 13b68 <__assert_fail@plt+0x26bc>
   13ae8:	add	ip, sp, #32
   13aec:	ldr	r4, [pc, #120]	; 13b6c <__assert_fail@plt+0x26c0>
   13af0:	mov	r5, r0
   13af4:	add	lr, pc, lr
   13af8:	mov	r3, ip
   13afc:	ldr	r2, [sp, #28]
   13b00:	add	r0, sp, #8
   13b04:	ldr	r4, [lr, r4]
   13b08:	str	ip, [sp, #4]
   13b0c:	ldr	ip, [r4]
   13b10:	str	ip, [sp, #12]
   13b14:	bl	11374 <__vasprintf_chk@plt>
   13b18:	subs	r2, r0, #0
   13b1c:	blt	13b5c <__assert_fail@plt+0x26b0>
   13b20:	mov	r0, r5
   13b24:	ldr	r1, [sp, #8]
   13b28:	bl	139d4 <__assert_fail@plt+0x2528>
   13b2c:	mov	r5, r0
   13b30:	ldr	r0, [sp, #8]
   13b34:	bl	111dc <free@plt>
   13b38:	mov	r0, r5
   13b3c:	ldr	r2, [sp, #12]
   13b40:	ldr	r3, [r4]
   13b44:	cmp	r2, r3
   13b48:	bne	13b64 <__assert_fail@plt+0x26b8>
   13b4c:	add	sp, sp, #16
   13b50:	pop	{r4, r5, lr}
   13b54:	add	sp, sp, #12
   13b58:	bx	lr
   13b5c:	mov	r0, #0
   13b60:	b	13b3c <__assert_fail@plt+0x2690>
   13b64:	bl	11230 <__stack_chk_fail@plt>
   13b68:	andeq	r2, r1, r4, lsl #10
   13b6c:	andeq	r0, r0, ip, lsl r1
   13b70:	ldr	ip, [pc, #372]	; 13cec <__assert_fail@plt+0x2840>
   13b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b78:	mov	r6, r0
   13b7c:	ldr	r0, [pc, #364]	; 13cf0 <__assert_fail@plt+0x2844>
   13b80:	add	ip, pc, ip
   13b84:	ldr	r4, [r6]
   13b88:	mov	r9, r3
   13b8c:	sub	sp, sp, #12
   13b90:	mov	r7, r1
   13b94:	ldr	r5, [ip, r0]
   13b98:	mov	r8, r2
   13b9c:	ldrsb	ip, [r4]
   13ba0:	ldr	r3, [r5]
   13ba4:	cmp	ip, #0
   13ba8:	moveq	r0, ip
   13bac:	str	r3, [sp, #4]
   13bb0:	beq	13c60 <__assert_fail@plt+0x27b4>
   13bb4:	mov	r0, r4
   13bb8:	mov	r1, r2
   13bbc:	bl	114a0 <strspn@plt>
   13bc0:	ldrb	sl, [r4, r0]
   13bc4:	add	r4, r4, r0
   13bc8:	cmp	sl, #0
   13bcc:	beq	13cdc <__assert_fail@plt+0x2830>
   13bd0:	cmp	r9, #0
   13bd4:	beq	13c78 <__assert_fail@plt+0x27cc>
   13bd8:	sxtb	r9, sl
   13bdc:	ldr	r0, [pc, #272]	; 13cf4 <__assert_fail@plt+0x2848>
   13be0:	mov	r1, r9
   13be4:	add	r0, pc, r0
   13be8:	bl	11344 <strchr@plt>
   13bec:	cmp	r0, #0
   13bf0:	beq	13c9c <__assert_fail@plt+0x27f0>
   13bf4:	add	fp, r4, #1
   13bf8:	mov	r1, sp
   13bfc:	mov	r3, #0
   13c00:	strb	sl, [sp]
   13c04:	mov	r0, fp
   13c08:	strb	r3, [sp, #1]
   13c0c:	bl	124a8 <__assert_fail@plt+0xffc>
   13c10:	add	r3, r4, r0
   13c14:	str	r0, [r7]
   13c18:	ldrb	r3, [r3, #1]
   13c1c:	cmp	r3, #0
   13c20:	beq	13cdc <__assert_fail@plt+0x2830>
   13c24:	sxtb	r3, r3
   13c28:	cmp	r9, r3
   13c2c:	bne	13cdc <__assert_fail@plt+0x2830>
   13c30:	add	r0, r0, #2
   13c34:	add	r7, r4, r0
   13c38:	ldrb	r1, [r4, r0]
   13c3c:	cmp	r1, #0
   13c40:	beq	13c58 <__assert_fail@plt+0x27ac>
   13c44:	mov	r0, r8
   13c48:	sxtb	r1, r1
   13c4c:	bl	11344 <strchr@plt>
   13c50:	cmp	r0, #0
   13c54:	beq	13cdc <__assert_fail@plt+0x2830>
   13c58:	mov	r0, fp
   13c5c:	str	r7, [r6]
   13c60:	ldr	r2, [sp, #4]
   13c64:	ldr	r3, [r5]
   13c68:	cmp	r2, r3
   13c6c:	bne	13ce8 <__assert_fail@plt+0x283c>
   13c70:	add	sp, sp, #12
   13c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c78:	mov	r0, r4
   13c7c:	mov	r1, r8
   13c80:	bl	111d0 <strcspn@plt>
   13c84:	mov	r3, r0
   13c88:	mov	r0, r4
   13c8c:	add	r4, r4, r3
   13c90:	str	r3, [r7]
   13c94:	str	r4, [r6]
   13c98:	b	13c60 <__assert_fail@plt+0x27b4>
   13c9c:	mov	r1, r8
   13ca0:	mov	r0, r4
   13ca4:	bl	124a8 <__assert_fail@plt+0xffc>
   13ca8:	str	r0, [r7]
   13cac:	add	r7, r4, r0
   13cb0:	ldrb	r1, [r4, r0]
   13cb4:	cmp	r1, #0
   13cb8:	beq	13cd0 <__assert_fail@plt+0x2824>
   13cbc:	mov	r0, r8
   13cc0:	sxtb	r1, r1
   13cc4:	bl	11344 <strchr@plt>
   13cc8:	cmp	r0, #0
   13ccc:	beq	13c94 <__assert_fail@plt+0x27e8>
   13cd0:	str	r7, [r6]
   13cd4:	mov	r0, r4
   13cd8:	b	13c60 <__assert_fail@plt+0x27b4>
   13cdc:	str	r4, [r6]
   13ce0:	mov	r0, #0
   13ce4:	b	13c60 <__assert_fail@plt+0x27b4>
   13ce8:	bl	11230 <__stack_chk_fail@plt>
   13cec:	andeq	r2, r1, r8, ror r4
   13cf0:	andeq	r0, r0, ip, lsl r1
   13cf4:	andeq	r1, r0, ip, lsl r7
   13cf8:	push	{r4, lr}
   13cfc:	mov	r4, r0
   13d00:	b	13d0c <__assert_fail@plt+0x2860>
   13d04:	cmp	r0, #10
   13d08:	beq	13d24 <__assert_fail@plt+0x2878>
   13d0c:	mov	r0, r4
   13d10:	bl	1138c <fgetc@plt>
   13d14:	cmn	r0, #1
   13d18:	bne	13d04 <__assert_fail@plt+0x2858>
   13d1c:	mov	r0, #1
   13d20:	pop	{r4, pc}
   13d24:	mov	r0, #0
   13d28:	pop	{r4, pc}
   13d2c:	ldr	r0, [pc, #172]	; 13de0 <__assert_fail@plt+0x2934>
   13d30:	push	{r4, r5, r6, r7, r8, lr}
   13d34:	add	r0, pc, r0
   13d38:	bl	112b4 <getenv@plt>
   13d3c:	subs	r4, r0, #0
   13d40:	beq	13dc0 <__assert_fail@plt+0x2914>
   13d44:	mov	r0, r4
   13d48:	bl	111c4 <basename@plt>
   13d4c:	mov	r8, r0
   13d50:	bl	11338 <strlen@plt>
   13d54:	add	r7, r0, #2
   13d58:	mov	r0, r7
   13d5c:	bl	112cc <malloc@plt>
   13d60:	adds	r5, r7, #0
   13d64:	movne	r5, #1
   13d68:	cmp	r0, #0
   13d6c:	mov	r6, r0
   13d70:	movne	r5, #0
   13d74:	cmp	r5, #0
   13d78:	bne	13dcc <__assert_fail@plt+0x2920>
   13d7c:	mov	r3, #45	; 0x2d
   13d80:	mov	r1, r8
   13d84:	strb	r3, [r0], #1
   13d88:	bl	11284 <strcpy@plt>
   13d8c:	mov	r1, r6
   13d90:	mov	r2, r5
   13d94:	mov	r0, r4
   13d98:	bl	113ec <execl@plt>
   13d9c:	ldr	r1, [pc, #64]	; 13de4 <__assert_fail@plt+0x2938>
   13da0:	mov	r2, #5
   13da4:	mov	r0, r5
   13da8:	add	r1, pc, r1
   13dac:	bl	11224 <dcgettext@plt>
   13db0:	mov	r2, r4
   13db4:	mov	r1, r0
   13db8:	mov	r0, #1
   13dbc:	bl	11260 <err@plt>
   13dc0:	ldr	r4, [pc, #32]	; 13de8 <__assert_fail@plt+0x293c>
   13dc4:	add	r4, pc, r4
   13dc8:	b	13d44 <__assert_fail@plt+0x2898>
   13dcc:	ldr	r1, [pc, #24]	; 13dec <__assert_fail@plt+0x2940>
   13dd0:	mov	r2, r7
   13dd4:	mov	r0, #1
   13dd8:	add	r1, pc, r1
   13ddc:	bl	11260 <err@plt>
   13de0:	ldrdeq	r1, [r0], -r8
   13de4:	andeq	r1, r0, r8, asr r4
   13de8:	andeq	r1, r0, r0, asr #10
   13dec:	andeq	r1, r0, ip, lsr r5
   13df0:	cmp	r3, #0
   13df4:	cmpeq	r2, #0
   13df8:	bne	13e10 <__assert_fail@plt+0x2964>
   13dfc:	cmp	r1, #0
   13e00:	cmpeq	r0, #0
   13e04:	mvnne	r1, #0
   13e08:	mvnne	r0, #0
   13e0c:	b	13e2c <__assert_fail@plt+0x2980>
   13e10:	sub	sp, sp, #8
   13e14:	push	{sp, lr}
   13e18:	bl	13e78 <__assert_fail@plt+0x29cc>
   13e1c:	ldr	lr, [sp, #4]
   13e20:	add	sp, sp, #8
   13e24:	pop	{r2, r3}
   13e28:	bx	lr
   13e2c:	push	{r1, lr}
   13e30:	mov	r0, #8
   13e34:	bl	11194 <raise@plt>
   13e38:	pop	{r1, pc}
   13e3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e40:	mov	r8, r2
   13e44:	mov	r6, r0
   13e48:	mov	r7, r1
   13e4c:	mov	sl, r3
   13e50:	ldr	r9, [sp, #32]
   13e54:	bl	13eb4 <__assert_fail@plt+0x2a08>
   13e58:	umull	r4, r5, r8, r0
   13e5c:	mul	r8, r8, r1
   13e60:	mla	r2, r0, sl, r8
   13e64:	add	r5, r2, r5
   13e68:	subs	r4, r6, r4
   13e6c:	sbc	r5, r7, r5
   13e70:	strd	r4, [r9]
   13e74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e78:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13e7c:	mov	r8, r2
   13e80:	mov	r6, r0
   13e84:	mov	r7, r1
   13e88:	mov	r5, r3
   13e8c:	ldr	r9, [sp, #32]
   13e90:	bl	14340 <__assert_fail@plt+0x2e94>
   13e94:	mul	r3, r0, r5
   13e98:	umull	r4, r5, r0, r8
   13e9c:	mla	r8, r8, r1, r3
   13ea0:	add	r5, r8, r5
   13ea4:	subs	r4, r6, r4
   13ea8:	sbc	r5, r7, r5
   13eac:	strd	r4, [r9]
   13eb0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eb8:	rsbs	r4, r0, #0
   13ebc:	rsc	r5, r1, #0
   13ec0:	cmp	r1, #0
   13ec4:	mvn	r6, #0
   13ec8:	sub	sp, sp, #12
   13ecc:	movge	r4, r0
   13ed0:	movge	r5, r1
   13ed4:	movge	r6, #0
   13ed8:	cmp	r3, #0
   13edc:	blt	14114 <__assert_fail@plt+0x2c68>
   13ee0:	cmp	r3, #0
   13ee4:	mov	sl, r4
   13ee8:	mov	ip, r5
   13eec:	mov	r0, r2
   13ef0:	mov	r1, r3
   13ef4:	mov	r8, r2
   13ef8:	mov	r7, r4
   13efc:	mov	r9, r5
   13f00:	bne	13ff8 <__assert_fail@plt+0x2b4c>
   13f04:	cmp	r2, r5
   13f08:	bls	14034 <__assert_fail@plt+0x2b88>
   13f0c:	clz	r3, r2
   13f10:	cmp	r3, #0
   13f14:	rsbne	r2, r3, #32
   13f18:	lslne	r8, r0, r3
   13f1c:	lsrne	r2, r4, r2
   13f20:	lslne	r7, r4, r3
   13f24:	orrne	r9, r2, r5, lsl r3
   13f28:	lsr	r4, r8, #16
   13f2c:	uxth	sl, r8
   13f30:	mov	r1, r4
   13f34:	mov	r0, r9
   13f38:	bl	14770 <__assert_fail@plt+0x32c4>
   13f3c:	mov	r1, r4
   13f40:	mov	fp, r0
   13f44:	mov	r0, r9
   13f48:	bl	1495c <__assert_fail@plt+0x34b0>
   13f4c:	mul	r0, sl, fp
   13f50:	lsr	r2, r7, #16
   13f54:	orr	r1, r2, r1, lsl #16
   13f58:	cmp	r0, r1
   13f5c:	bls	13f80 <__assert_fail@plt+0x2ad4>
   13f60:	adds	r1, r1, r8
   13f64:	sub	r3, fp, #1
   13f68:	bcs	13f7c <__assert_fail@plt+0x2ad0>
   13f6c:	cmp	r0, r1
   13f70:	subhi	fp, fp, #2
   13f74:	addhi	r1, r1, r8
   13f78:	bhi	13f80 <__assert_fail@plt+0x2ad4>
   13f7c:	mov	fp, r3
   13f80:	rsb	r9, r0, r1
   13f84:	mov	r1, r4
   13f88:	uxth	r7, r7
   13f8c:	mov	r0, r9
   13f90:	bl	14770 <__assert_fail@plt+0x32c4>
   13f94:	mov	r1, r4
   13f98:	mov	r5, r0
   13f9c:	mov	r0, r9
   13fa0:	bl	1495c <__assert_fail@plt+0x34b0>
   13fa4:	mul	sl, sl, r5
   13fa8:	orr	r1, r7, r1, lsl #16
   13fac:	cmp	sl, r1
   13fb0:	bls	13fd0 <__assert_fail@plt+0x2b24>
   13fb4:	adds	r8, r1, r8
   13fb8:	sub	r3, r5, #1
   13fbc:	bcs	13fcc <__assert_fail@plt+0x2b20>
   13fc0:	cmp	sl, r8
   13fc4:	subhi	r5, r5, #2
   13fc8:	bhi	13fd0 <__assert_fail@plt+0x2b24>
   13fcc:	mov	r5, r3
   13fd0:	orr	r3, r5, fp, lsl #16
   13fd4:	mov	r4, #0
   13fd8:	cmp	r6, #0
   13fdc:	mov	r0, r3
   13fe0:	mov	r1, r4
   13fe4:	beq	13ff0 <__assert_fail@plt+0x2b44>
   13fe8:	rsbs	r0, r0, #0
   13fec:	rsc	r1, r1, #0
   13ff0:	add	sp, sp, #12
   13ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ff8:	cmp	r3, r5
   13ffc:	movhi	r4, #0
   14000:	movhi	r3, r4
   14004:	bhi	13fd8 <__assert_fail@plt+0x2b2c>
   14008:	clz	r5, r1
   1400c:	cmp	r5, #0
   14010:	bne	14200 <__assert_fail@plt+0x2d54>
   14014:	cmp	r1, ip
   14018:	cmpcs	r2, sl
   1401c:	movhi	r4, #0
   14020:	movls	r4, #1
   14024:	movls	r3, #1
   14028:	movls	r4, r5
   1402c:	movhi	r3, r4
   14030:	b	13fd8 <__assert_fail@plt+0x2b2c>
   14034:	cmp	r2, #0
   14038:	bne	1404c <__assert_fail@plt+0x2ba0>
   1403c:	mov	r1, r2
   14040:	mov	r0, #1
   14044:	bl	14770 <__assert_fail@plt+0x32c4>
   14048:	mov	r8, r0
   1404c:	clz	r3, r8
   14050:	cmp	r3, #0
   14054:	bne	14124 <__assert_fail@plt+0x2c78>
   14058:	rsb	r9, r8, r9
   1405c:	lsr	r5, r8, #16
   14060:	uxth	sl, r8
   14064:	mov	r4, #1
   14068:	mov	r1, r5
   1406c:	mov	r0, r9
   14070:	bl	14770 <__assert_fail@plt+0x32c4>
   14074:	mov	r1, r5
   14078:	mov	fp, r0
   1407c:	mov	r0, r9
   14080:	bl	1495c <__assert_fail@plt+0x34b0>
   14084:	mul	r0, sl, fp
   14088:	lsr	r2, r7, #16
   1408c:	orr	r1, r2, r1, lsl #16
   14090:	cmp	r0, r1
   14094:	bls	140b4 <__assert_fail@plt+0x2c08>
   14098:	adds	r1, r1, r8
   1409c:	sub	r3, fp, #1
   140a0:	bcs	14320 <__assert_fail@plt+0x2e74>
   140a4:	cmp	r0, r1
   140a8:	subhi	fp, fp, #2
   140ac:	addhi	r1, r1, r8
   140b0:	bls	14320 <__assert_fail@plt+0x2e74>
   140b4:	rsb	r2, r0, r1
   140b8:	mov	r1, r5
   140bc:	str	r2, [sp]
   140c0:	uxth	r7, r7
   140c4:	mov	r0, r2
   140c8:	bl	14770 <__assert_fail@plt+0x32c4>
   140cc:	ldr	r2, [sp]
   140d0:	mov	r1, r5
   140d4:	mov	r9, r0
   140d8:	mov	r0, r2
   140dc:	bl	1495c <__assert_fail@plt+0x34b0>
   140e0:	mul	sl, sl, r9
   140e4:	orr	r1, r7, r1, lsl #16
   140e8:	cmp	sl, r1
   140ec:	bls	1410c <__assert_fail@plt+0x2c60>
   140f0:	adds	r8, r1, r8
   140f4:	sub	r3, r9, #1
   140f8:	bcs	14108 <__assert_fail@plt+0x2c5c>
   140fc:	cmp	sl, r8
   14100:	subhi	r9, r9, #2
   14104:	bhi	1410c <__assert_fail@plt+0x2c60>
   14108:	mov	r9, r3
   1410c:	orr	r3, r9, fp, lsl #16
   14110:	b	13fd8 <__assert_fail@plt+0x2b2c>
   14114:	mvn	r6, r6
   14118:	rsbs	r2, r2, #0
   1411c:	rsc	r3, r3, #0
   14120:	b	13ee0 <__assert_fail@plt+0x2a34>
   14124:	lsl	r8, r8, r3
   14128:	rsb	fp, r3, #32
   1412c:	lsr	r4, r9, fp
   14130:	lsr	fp, r7, fp
   14134:	lsr	r5, r8, #16
   14138:	orr	fp, fp, r9, lsl r3
   1413c:	mov	r0, r4
   14140:	lsl	r7, r7, r3
   14144:	mov	r1, r5
   14148:	uxth	sl, r8
   1414c:	bl	14770 <__assert_fail@plt+0x32c4>
   14150:	mov	r1, r5
   14154:	mov	r3, r0
   14158:	mov	r0, r4
   1415c:	str	r3, [sp]
   14160:	bl	1495c <__assert_fail@plt+0x34b0>
   14164:	ldr	r3, [sp]
   14168:	lsr	r2, fp, #16
   1416c:	mul	r0, sl, r3
   14170:	orr	r1, r2, r1, lsl #16
   14174:	cmp	r0, r1
   14178:	bls	14198 <__assert_fail@plt+0x2cec>
   1417c:	adds	r1, r1, r8
   14180:	sub	r2, r3, #1
   14184:	bcs	14338 <__assert_fail@plt+0x2e8c>
   14188:	cmp	r0, r1
   1418c:	subhi	r3, r3, #2
   14190:	addhi	r1, r1, r8
   14194:	bls	14338 <__assert_fail@plt+0x2e8c>
   14198:	rsb	r9, r0, r1
   1419c:	mov	r1, r5
   141a0:	str	r3, [sp]
   141a4:	uxth	fp, fp
   141a8:	mov	r0, r9
   141ac:	bl	14770 <__assert_fail@plt+0x32c4>
   141b0:	mov	r1, r5
   141b4:	mov	r4, r0
   141b8:	mov	r0, r9
   141bc:	bl	1495c <__assert_fail@plt+0x34b0>
   141c0:	mul	r9, sl, r4
   141c4:	ldr	r3, [sp]
   141c8:	orr	r1, fp, r1, lsl #16
   141cc:	cmp	r9, r1
   141d0:	bls	141f4 <__assert_fail@plt+0x2d48>
   141d4:	adds	r1, r1, r8
   141d8:	sub	r2, r4, #1
   141dc:	bcs	141f0 <__assert_fail@plt+0x2d44>
   141e0:	cmp	r9, r1
   141e4:	subhi	r4, r4, #2
   141e8:	addhi	r1, r1, r8
   141ec:	bhi	141f4 <__assert_fail@plt+0x2d48>
   141f0:	mov	r4, r2
   141f4:	rsb	r9, r9, r1
   141f8:	orr	r4, r4, r3, lsl #16
   141fc:	b	14068 <__assert_fail@plt+0x2bbc>
   14200:	rsb	sl, r5, #32
   14204:	lsl	r3, r2, r5
   14208:	lsr	r0, r2, sl
   1420c:	lsr	r2, ip, sl
   14210:	orr	r4, r0, r1, lsl r5
   14214:	lsr	sl, r7, sl
   14218:	mov	r0, r2
   1421c:	orr	sl, sl, ip, lsl r5
   14220:	lsr	r9, r4, #16
   14224:	str	r3, [sp, #4]
   14228:	str	r2, [sp]
   1422c:	uxth	fp, r4
   14230:	mov	r1, r9
   14234:	bl	14770 <__assert_fail@plt+0x32c4>
   14238:	ldr	r2, [sp]
   1423c:	mov	r1, r9
   14240:	mov	r8, r0
   14244:	mov	r0, r2
   14248:	bl	1495c <__assert_fail@plt+0x34b0>
   1424c:	mul	r0, fp, r8
   14250:	lsr	r2, sl, #16
   14254:	orr	r1, r2, r1, lsl #16
   14258:	cmp	r0, r1
   1425c:	bls	1427c <__assert_fail@plt+0x2dd0>
   14260:	adds	r1, r1, r4
   14264:	sub	r2, r8, #1
   14268:	bcs	14330 <__assert_fail@plt+0x2e84>
   1426c:	cmp	r0, r1
   14270:	subhi	r8, r8, #2
   14274:	addhi	r1, r1, r4
   14278:	bls	14330 <__assert_fail@plt+0x2e84>
   1427c:	rsb	ip, r0, r1
   14280:	mov	r1, r9
   14284:	str	ip, [sp]
   14288:	mov	r0, ip
   1428c:	bl	14770 <__assert_fail@plt+0x32c4>
   14290:	ldr	ip, [sp]
   14294:	mov	r1, r9
   14298:	mov	r2, r0
   1429c:	mov	r0, ip
   142a0:	str	r2, [sp]
   142a4:	bl	1495c <__assert_fail@plt+0x34b0>
   142a8:	ldr	r2, [sp]
   142ac:	uxth	ip, sl
   142b0:	mul	fp, fp, r2
   142b4:	orr	ip, ip, r1, lsl #16
   142b8:	cmp	fp, ip
   142bc:	bls	142dc <__assert_fail@plt+0x2e30>
   142c0:	adds	ip, ip, r4
   142c4:	sub	r1, r2, #1
   142c8:	bcs	14328 <__assert_fail@plt+0x2e7c>
   142cc:	cmp	fp, ip
   142d0:	subhi	r2, r2, #2
   142d4:	addhi	ip, ip, r4
   142d8:	bls	14328 <__assert_fail@plt+0x2e7c>
   142dc:	ldr	r0, [sp, #4]
   142e0:	orr	r1, r2, r8, lsl #16
   142e4:	rsb	fp, fp, ip
   142e8:	umull	r2, r3, r1, r0
   142ec:	cmp	fp, r3
   142f0:	bcc	14314 <__assert_fail@plt+0x2e68>
   142f4:	movne	r4, #0
   142f8:	moveq	r4, #1
   142fc:	cmp	r2, r7, lsl r5
   14300:	movls	r4, #0
   14304:	andhi	r4, r4, #1
   14308:	cmp	r4, #0
   1430c:	moveq	r3, r1
   14310:	beq	13fd8 <__assert_fail@plt+0x2b2c>
   14314:	sub	r3, r1, #1
   14318:	mov	r4, #0
   1431c:	b	13fd8 <__assert_fail@plt+0x2b2c>
   14320:	mov	fp, r3
   14324:	b	140b4 <__assert_fail@plt+0x2c08>
   14328:	mov	r2, r1
   1432c:	b	142dc <__assert_fail@plt+0x2e30>
   14330:	mov	r8, r2
   14334:	b	1427c <__assert_fail@plt+0x2dd0>
   14338:	mov	r3, r2
   1433c:	b	14198 <__assert_fail@plt+0x2cec>
   14340:	cmp	r3, #0
   14344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14348:	mov	r6, r0
   1434c:	sub	sp, sp, #12
   14350:	mov	r5, r1
   14354:	mov	r7, r0
   14358:	mov	r4, r2
   1435c:	mov	r8, r1
   14360:	bne	14440 <__assert_fail@plt+0x2f94>
   14364:	cmp	r2, r1
   14368:	bls	1447c <__assert_fail@plt+0x2fd0>
   1436c:	clz	r3, r2
   14370:	cmp	r3, #0
   14374:	rsbne	r8, r3, #32
   14378:	lslne	r4, r2, r3
   1437c:	lsrne	r8, r0, r8
   14380:	lslne	r7, r0, r3
   14384:	orrne	r8, r8, r1, lsl r3
   14388:	lsr	r5, r4, #16
   1438c:	uxth	sl, r4
   14390:	mov	r1, r5
   14394:	mov	r0, r8
   14398:	bl	14770 <__assert_fail@plt+0x32c4>
   1439c:	mov	r1, r5
   143a0:	mov	r9, r0
   143a4:	mov	r0, r8
   143a8:	bl	1495c <__assert_fail@plt+0x34b0>
   143ac:	mul	r0, sl, r9
   143b0:	lsr	r3, r7, #16
   143b4:	orr	r1, r3, r1, lsl #16
   143b8:	cmp	r0, r1
   143bc:	bls	143e0 <__assert_fail@plt+0x2f34>
   143c0:	adds	r1, r1, r4
   143c4:	sub	r2, r9, #1
   143c8:	bcs	143dc <__assert_fail@plt+0x2f30>
   143cc:	cmp	r0, r1
   143d0:	subhi	r9, r9, #2
   143d4:	addhi	r1, r1, r4
   143d8:	bhi	143e0 <__assert_fail@plt+0x2f34>
   143dc:	mov	r9, r2
   143e0:	rsb	r8, r0, r1
   143e4:	mov	r1, r5
   143e8:	uxth	r7, r7
   143ec:	mov	r0, r8
   143f0:	bl	14770 <__assert_fail@plt+0x32c4>
   143f4:	mov	r1, r5
   143f8:	mov	r6, r0
   143fc:	mov	r0, r8
   14400:	bl	1495c <__assert_fail@plt+0x34b0>
   14404:	mul	sl, sl, r6
   14408:	orr	r1, r7, r1, lsl #16
   1440c:	cmp	sl, r1
   14410:	bls	1442c <__assert_fail@plt+0x2f80>
   14414:	adds	r4, r1, r4
   14418:	sub	r3, r6, #1
   1441c:	bcs	14728 <__assert_fail@plt+0x327c>
   14420:	cmp	sl, r4
   14424:	subhi	r6, r6, #2
   14428:	bls	14728 <__assert_fail@plt+0x327c>
   1442c:	orr	r0, r6, r9, lsl #16
   14430:	mov	r6, #0
   14434:	mov	r1, r6
   14438:	add	sp, sp, #12
   1443c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14440:	cmp	r3, r1
   14444:	movhi	r6, #0
   14448:	movhi	r0, r6
   1444c:	bhi	14434 <__assert_fail@plt+0x2f88>
   14450:	clz	r7, r3
   14454:	cmp	r7, #0
   14458:	bne	14558 <__assert_fail@plt+0x30ac>
   1445c:	cmp	r3, r1
   14460:	cmpcs	r2, r6
   14464:	movhi	r6, #0
   14468:	movls	r6, #1
   1446c:	movls	r0, #1
   14470:	movls	r6, r7
   14474:	movhi	r0, r6
   14478:	b	14434 <__assert_fail@plt+0x2f88>
   1447c:	cmp	r2, #0
   14480:	bne	14494 <__assert_fail@plt+0x2fe8>
   14484:	mov	r1, r2
   14488:	mov	r0, #1
   1448c:	bl	14770 <__assert_fail@plt+0x32c4>
   14490:	mov	r4, r0
   14494:	clz	r3, r4
   14498:	cmp	r3, #0
   1449c:	bne	14654 <__assert_fail@plt+0x31a8>
   144a0:	rsb	r5, r4, r5
   144a4:	lsr	r8, r4, #16
   144a8:	uxth	sl, r4
   144ac:	mov	r6, #1
   144b0:	mov	r1, r8
   144b4:	mov	r0, r5
   144b8:	bl	14770 <__assert_fail@plt+0x32c4>
   144bc:	mov	r1, r8
   144c0:	mov	r9, r0
   144c4:	mov	r0, r5
   144c8:	bl	1495c <__assert_fail@plt+0x34b0>
   144cc:	mul	r0, sl, r9
   144d0:	lsr	r3, r7, #16
   144d4:	orr	r1, r3, r1, lsl #16
   144d8:	cmp	r0, r1
   144dc:	bls	144fc <__assert_fail@plt+0x3050>
   144e0:	adds	r1, r1, r4
   144e4:	sub	r2, r9, #1
   144e8:	bcs	14730 <__assert_fail@plt+0x3284>
   144ec:	cmp	r0, r1
   144f0:	subhi	r9, r9, #2
   144f4:	addhi	r1, r1, r4
   144f8:	bls	14730 <__assert_fail@plt+0x3284>
   144fc:	rsb	fp, r0, r1
   14500:	mov	r1, r8
   14504:	uxth	r7, r7
   14508:	mov	r0, fp
   1450c:	bl	14770 <__assert_fail@plt+0x32c4>
   14510:	mov	r1, r8
   14514:	mov	r5, r0
   14518:	mov	r0, fp
   1451c:	bl	1495c <__assert_fail@plt+0x34b0>
   14520:	mul	sl, sl, r5
   14524:	orr	r1, r7, r1, lsl #16
   14528:	cmp	sl, r1
   1452c:	bls	14548 <__assert_fail@plt+0x309c>
   14530:	adds	r4, r1, r4
   14534:	sub	r3, r5, #1
   14538:	bcs	14738 <__assert_fail@plt+0x328c>
   1453c:	cmp	sl, r4
   14540:	subhi	r5, r5, #2
   14544:	bls	14738 <__assert_fail@plt+0x328c>
   14548:	orr	r0, r5, r9, lsl #16
   1454c:	mov	r1, r6
   14550:	add	sp, sp, #12
   14554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14558:	rsb	r1, r7, #32
   1455c:	lsl	r0, r2, r7
   14560:	lsr	r2, r2, r1
   14564:	lsr	fp, r5, r1
   14568:	orr	r8, r2, r3, lsl r7
   1456c:	lsr	r1, r6, r1
   14570:	str	r0, [sp, #4]
   14574:	orr	r5, r1, r5, lsl r7
   14578:	lsr	r9, r8, #16
   1457c:	mov	r0, fp
   14580:	uxth	sl, r8
   14584:	mov	r1, r9
   14588:	bl	14770 <__assert_fail@plt+0x32c4>
   1458c:	mov	r1, r9
   14590:	mov	r4, r0
   14594:	mov	r0, fp
   14598:	bl	1495c <__assert_fail@plt+0x34b0>
   1459c:	mul	r0, sl, r4
   145a0:	lsr	ip, r5, #16
   145a4:	orr	r1, ip, r1, lsl #16
   145a8:	cmp	r0, r1
   145ac:	bls	145c0 <__assert_fail@plt+0x3114>
   145b0:	adds	r1, r1, r8
   145b4:	sub	r2, r4, #1
   145b8:	bcc	14754 <__assert_fail@plt+0x32a8>
   145bc:	mov	r4, r2
   145c0:	rsb	ip, r0, r1
   145c4:	mov	r1, r9
   145c8:	str	ip, [sp]
   145cc:	uxth	r5, r5
   145d0:	mov	r0, ip
   145d4:	bl	14770 <__assert_fail@plt+0x32c4>
   145d8:	ldr	ip, [sp]
   145dc:	mov	r1, r9
   145e0:	mov	fp, r0
   145e4:	mov	r0, ip
   145e8:	bl	1495c <__assert_fail@plt+0x34b0>
   145ec:	mul	sl, sl, fp
   145f0:	orr	r1, r5, r1, lsl #16
   145f4:	cmp	sl, r1
   145f8:	bls	1460c <__assert_fail@plt+0x3160>
   145fc:	adds	r1, r1, r8
   14600:	sub	r2, fp, #1
   14604:	bcc	14740 <__assert_fail@plt+0x3294>
   14608:	mov	fp, r2
   1460c:	ldr	r3, [sp, #4]
   14610:	orr	r0, fp, r4, lsl #16
   14614:	rsb	sl, sl, r1
   14618:	umull	r4, r5, r0, r3
   1461c:	cmp	sl, r5
   14620:	bcc	14640 <__assert_fail@plt+0x3194>
   14624:	movne	r3, #0
   14628:	moveq	r3, #1
   1462c:	cmp	r4, r6, lsl r7
   14630:	movls	r6, #0
   14634:	andhi	r6, r3, #1
   14638:	cmp	r6, #0
   1463c:	beq	14434 <__assert_fail@plt+0x2f88>
   14640:	mov	r6, #0
   14644:	sub	r0, r0, #1
   14648:	mov	r1, r6
   1464c:	add	sp, sp, #12
   14650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14654:	lsl	r4, r4, r3
   14658:	rsb	r9, r3, #32
   1465c:	lsr	r2, r5, r9
   14660:	lsr	r9, r6, r9
   14664:	lsr	r8, r4, #16
   14668:	orr	r9, r9, r5, lsl r3
   1466c:	mov	r0, r2
   14670:	lsl	r7, r6, r3
   14674:	mov	r1, r8
   14678:	str	r2, [sp]
   1467c:	bl	14770 <__assert_fail@plt+0x32c4>
   14680:	ldr	r2, [sp]
   14684:	mov	r1, r8
   14688:	uxth	sl, r4
   1468c:	mov	fp, r0
   14690:	mov	r0, r2
   14694:	bl	1495c <__assert_fail@plt+0x34b0>
   14698:	mul	r0, sl, fp
   1469c:	lsr	r3, r9, #16
   146a0:	orr	r1, r3, r1, lsl #16
   146a4:	cmp	r0, r1
   146a8:	bls	146c8 <__assert_fail@plt+0x321c>
   146ac:	adds	r1, r1, r4
   146b0:	sub	r3, fp, #1
   146b4:	bcs	14768 <__assert_fail@plt+0x32bc>
   146b8:	cmp	r0, r1
   146bc:	subhi	fp, fp, #2
   146c0:	addhi	r1, r1, r4
   146c4:	bls	14768 <__assert_fail@plt+0x32bc>
   146c8:	rsb	r5, r0, r1
   146cc:	mov	r1, r8
   146d0:	uxth	r9, r9
   146d4:	mov	r0, r5
   146d8:	bl	14770 <__assert_fail@plt+0x32c4>
   146dc:	mov	r1, r8
   146e0:	mov	r6, r0
   146e4:	mov	r0, r5
   146e8:	bl	1495c <__assert_fail@plt+0x34b0>
   146ec:	mul	r5, sl, r6
   146f0:	orr	r1, r9, r1, lsl #16
   146f4:	cmp	r5, r1
   146f8:	bls	1471c <__assert_fail@plt+0x3270>
   146fc:	adds	r1, r1, r4
   14700:	sub	r3, r6, #1
   14704:	bcs	14718 <__assert_fail@plt+0x326c>
   14708:	cmp	r5, r1
   1470c:	subhi	r6, r6, #2
   14710:	addhi	r1, r1, r4
   14714:	bhi	1471c <__assert_fail@plt+0x3270>
   14718:	mov	r6, r3
   1471c:	rsb	r5, r5, r1
   14720:	orr	r6, r6, fp, lsl #16
   14724:	b	144b0 <__assert_fail@plt+0x3004>
   14728:	mov	r6, r3
   1472c:	b	1442c <__assert_fail@plt+0x2f80>
   14730:	mov	r9, r2
   14734:	b	144fc <__assert_fail@plt+0x3050>
   14738:	mov	r5, r3
   1473c:	b	14548 <__assert_fail@plt+0x309c>
   14740:	cmp	sl, r1
   14744:	subhi	fp, fp, #2
   14748:	addhi	r1, r1, r8
   1474c:	bhi	1460c <__assert_fail@plt+0x3160>
   14750:	b	14608 <__assert_fail@plt+0x315c>
   14754:	cmp	r0, r1
   14758:	subhi	r4, r4, #2
   1475c:	addhi	r1, r1, r8
   14760:	bhi	145c0 <__assert_fail@plt+0x3114>
   14764:	b	145bc <__assert_fail@plt+0x3110>
   14768:	mov	fp, r3
   1476c:	b	146c8 <__assert_fail@plt+0x321c>
   14770:	subs	r2, r1, #1
   14774:	bxeq	lr
   14778:	bcc	14950 <__assert_fail@plt+0x34a4>
   1477c:	cmp	r0, r1
   14780:	bls	14934 <__assert_fail@plt+0x3488>
   14784:	tst	r1, r2
   14788:	beq	14940 <__assert_fail@plt+0x3494>
   1478c:	clz	r3, r0
   14790:	clz	r2, r1
   14794:	sub	r3, r2, r3
   14798:	rsbs	r3, r3, #31
   1479c:	addne	r3, r3, r3, lsl #1
   147a0:	mov	r2, #0
   147a4:	addne	pc, pc, r3, lsl #2
   147a8:	nop	{0}
   147ac:	cmp	r0, r1, lsl #31
   147b0:	adc	r2, r2, r2
   147b4:	subcs	r0, r0, r1, lsl #31
   147b8:	cmp	r0, r1, lsl #30
   147bc:	adc	r2, r2, r2
   147c0:	subcs	r0, r0, r1, lsl #30
   147c4:	cmp	r0, r1, lsl #29
   147c8:	adc	r2, r2, r2
   147cc:	subcs	r0, r0, r1, lsl #29
   147d0:	cmp	r0, r1, lsl #28
   147d4:	adc	r2, r2, r2
   147d8:	subcs	r0, r0, r1, lsl #28
   147dc:	cmp	r0, r1, lsl #27
   147e0:	adc	r2, r2, r2
   147e4:	subcs	r0, r0, r1, lsl #27
   147e8:	cmp	r0, r1, lsl #26
   147ec:	adc	r2, r2, r2
   147f0:	subcs	r0, r0, r1, lsl #26
   147f4:	cmp	r0, r1, lsl #25
   147f8:	adc	r2, r2, r2
   147fc:	subcs	r0, r0, r1, lsl #25
   14800:	cmp	r0, r1, lsl #24
   14804:	adc	r2, r2, r2
   14808:	subcs	r0, r0, r1, lsl #24
   1480c:	cmp	r0, r1, lsl #23
   14810:	adc	r2, r2, r2
   14814:	subcs	r0, r0, r1, lsl #23
   14818:	cmp	r0, r1, lsl #22
   1481c:	adc	r2, r2, r2
   14820:	subcs	r0, r0, r1, lsl #22
   14824:	cmp	r0, r1, lsl #21
   14828:	adc	r2, r2, r2
   1482c:	subcs	r0, r0, r1, lsl #21
   14830:	cmp	r0, r1, lsl #20
   14834:	adc	r2, r2, r2
   14838:	subcs	r0, r0, r1, lsl #20
   1483c:	cmp	r0, r1, lsl #19
   14840:	adc	r2, r2, r2
   14844:	subcs	r0, r0, r1, lsl #19
   14848:	cmp	r0, r1, lsl #18
   1484c:	adc	r2, r2, r2
   14850:	subcs	r0, r0, r1, lsl #18
   14854:	cmp	r0, r1, lsl #17
   14858:	adc	r2, r2, r2
   1485c:	subcs	r0, r0, r1, lsl #17
   14860:	cmp	r0, r1, lsl #16
   14864:	adc	r2, r2, r2
   14868:	subcs	r0, r0, r1, lsl #16
   1486c:	cmp	r0, r1, lsl #15
   14870:	adc	r2, r2, r2
   14874:	subcs	r0, r0, r1, lsl #15
   14878:	cmp	r0, r1, lsl #14
   1487c:	adc	r2, r2, r2
   14880:	subcs	r0, r0, r1, lsl #14
   14884:	cmp	r0, r1, lsl #13
   14888:	adc	r2, r2, r2
   1488c:	subcs	r0, r0, r1, lsl #13
   14890:	cmp	r0, r1, lsl #12
   14894:	adc	r2, r2, r2
   14898:	subcs	r0, r0, r1, lsl #12
   1489c:	cmp	r0, r1, lsl #11
   148a0:	adc	r2, r2, r2
   148a4:	subcs	r0, r0, r1, lsl #11
   148a8:	cmp	r0, r1, lsl #10
   148ac:	adc	r2, r2, r2
   148b0:	subcs	r0, r0, r1, lsl #10
   148b4:	cmp	r0, r1, lsl #9
   148b8:	adc	r2, r2, r2
   148bc:	subcs	r0, r0, r1, lsl #9
   148c0:	cmp	r0, r1, lsl #8
   148c4:	adc	r2, r2, r2
   148c8:	subcs	r0, r0, r1, lsl #8
   148cc:	cmp	r0, r1, lsl #7
   148d0:	adc	r2, r2, r2
   148d4:	subcs	r0, r0, r1, lsl #7
   148d8:	cmp	r0, r1, lsl #6
   148dc:	adc	r2, r2, r2
   148e0:	subcs	r0, r0, r1, lsl #6
   148e4:	cmp	r0, r1, lsl #5
   148e8:	adc	r2, r2, r2
   148ec:	subcs	r0, r0, r1, lsl #5
   148f0:	cmp	r0, r1, lsl #4
   148f4:	adc	r2, r2, r2
   148f8:	subcs	r0, r0, r1, lsl #4
   148fc:	cmp	r0, r1, lsl #3
   14900:	adc	r2, r2, r2
   14904:	subcs	r0, r0, r1, lsl #3
   14908:	cmp	r0, r1, lsl #2
   1490c:	adc	r2, r2, r2
   14910:	subcs	r0, r0, r1, lsl #2
   14914:	cmp	r0, r1, lsl #1
   14918:	adc	r2, r2, r2
   1491c:	subcs	r0, r0, r1, lsl #1
   14920:	cmp	r0, r1
   14924:	adc	r2, r2, r2
   14928:	subcs	r0, r0, r1
   1492c:	mov	r0, r2
   14930:	bx	lr
   14934:	moveq	r0, #1
   14938:	movne	r0, #0
   1493c:	bx	lr
   14940:	clz	r2, r1
   14944:	rsb	r2, r2, #31
   14948:	lsr	r0, r0, r2
   1494c:	bx	lr
   14950:	cmp	r0, #0
   14954:	mvnne	r0, #0
   14958:	b	13e2c <__assert_fail@plt+0x2980>
   1495c:	cmp	r1, #0
   14960:	beq	14950 <__assert_fail@plt+0x34a4>
   14964:	push	{r0, r1, lr}
   14968:	bl	14770 <__assert_fail@plt+0x32c4>
   1496c:	pop	{r1, r2, lr}
   14970:	mul	r3, r2, r0
   14974:	sub	r1, r1, r3
   14978:	bx	lr
   1497c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14980:	mov	r7, r0
   14984:	ldr	r6, [pc, #76]	; 149d8 <__assert_fail@plt+0x352c>
   14988:	mov	r8, r1
   1498c:	ldr	r5, [pc, #72]	; 149dc <__assert_fail@plt+0x3530>
   14990:	mov	r9, r2
   14994:	add	r6, pc, r6
   14998:	bl	11168 <_init@@Base>
   1499c:	add	r5, pc, r5
   149a0:	rsb	r6, r5, r6
   149a4:	asrs	r6, r6, #2
   149a8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   149ac:	sub	r5, r5, #4
   149b0:	mov	r4, #0
   149b4:	add	r4, r4, #1
   149b8:	ldr	r3, [r5, #4]!
   149bc:	mov	r0, r7
   149c0:	mov	r1, r8
   149c4:	mov	r2, r9
   149c8:	blx	r3
   149cc:	cmp	r4, r6
   149d0:	bne	149b4 <__assert_fail@plt+0x3508>
   149d4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   149d8:	andeq	r1, r1, ip, asr r5
   149dc:	andeq	r1, r1, r0, asr r5
   149e0:	bx	lr
   149e4:	ldr	r3, [pc, #28]	; 14a08 <__assert_fail@plt+0x355c>
   149e8:	mov	r1, #0
   149ec:	ldr	r2, [pc, #24]	; 14a0c <__assert_fail@plt+0x3560>
   149f0:	add	r3, pc, r3
   149f4:	ldr	r3, [r3, r2]
   149f8:	cmp	r3, #0
   149fc:	ldrne	r2, [r3]
   14a00:	moveq	r2, r3
   14a04:	b	11368 <__cxa_atexit@plt>
   14a08:	andeq	r1, r1, r8, lsl #12
   14a0c:	andeq	r0, r0, r4, lsr #2

Disassembly of section .fini:

00014a10 <_fini@@Base>:
   14a10:	push	{r3, lr}
   14a14:	pop	{r3, pc}
