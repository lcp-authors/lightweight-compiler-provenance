
centos-preinstalled/addr2line:     file format elf32-littlearm


Disassembly of section .init:

000113ac <_init@@Base>:
   113ac:	push	{r3, lr}
   113b0:	bl	12230 <__assert_fail@plt+0xabc>
   113b4:	pop	{r3, pc}

Disassembly of section .plt:

000113b8 <cplus_demangle_name_to_style@plt-0x14>:
   113b8:	push	{lr}		; (str lr, [sp, #-4]!)
   113bc:	ldr	lr, [pc, #4]	; 113c8 <_init@@Base+0x1c>
   113c0:	add	lr, pc, lr
   113c4:	ldr	pc, [lr, #8]!
   113c8:	andeq	r5, r1, r8, lsr ip

000113cc <cplus_demangle_name_to_style@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #86016	; 0x15000
   113d4:	ldr	pc, [ip, #3128]!	; 0xc38

000113d8 <bfd_scan_vma@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #86016	; 0x15000
   113e0:	ldr	pc, [ip, #3120]!	; 0xc30

000113e4 <strcmp@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #86016	; 0x15000
   113ec:	ldr	pc, [ip, #3112]!	; 0xc28

000113f0 <strtol@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #86016	; 0x15000
   113f8:	ldr	pc, [ip, #3104]!	; 0xc20

000113fc <fflush@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #86016	; 0x15000
   11404:	ldr	pc, [ip, #3096]!	; 0xc18

00011408 <bfd_arch_list@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #86016	; 0x15000
   11410:	ldr	pc, [ip, #3088]!	; 0xc10

00011414 <memmove@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #86016	; 0x15000
   1141c:	ldr	pc, [ip, #3080]!	; 0xc08

00011420 <bfd_set_default_target@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #86016	; 0x15000
   11428:	ldr	pc, [ip, #3072]!	; 0xc00

0001142c <free@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #86016	; 0x15000
   11434:	ldr	pc, [ip, #3064]!	; 0xbf8

00011438 <fgets@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #86016	; 0x15000
   11440:	ldr	pc, [ip, #3056]!	; 0xbf0

00011444 <ferror@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #86016	; 0x15000
   1144c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011450 <cplus_demangle_set_style@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #86016	; 0x15000
   11458:	ldr	pc, [ip, #3040]!	; 0xbe0

0001145c <memcpy@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #86016	; 0x15000
   11464:	ldr	pc, [ip, #3032]!	; 0xbd8

00011468 <bfd_openr@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #86016	; 0x15000
   11470:	ldr	pc, [ip, #3024]!	; 0xbd0

00011474 <ftell@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #86016	; 0x15000
   1147c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011480 <ctime@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #86016	; 0x15000
   11488:	ldr	pc, [ip, #3008]!	; 0xbc0

0001148c <dcgettext@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #86016	; 0x15000
   11494:	ldr	pc, [ip, #3000]!	; 0xbb8

00011498 <bfd_malloc@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #86016	; 0x15000
   114a0:	ldr	pc, [ip, #2992]!	; 0xbb0

000114a4 <__stack_chk_fail@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #86016	; 0x15000
   114ac:	ldr	pc, [ip, #2984]!	; 0xba8

000114b0 <unlink@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #86016	; 0x15000
   114b8:	ldr	pc, [ip, #2976]!	; 0xba0

000114bc <xrealloc@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #86016	; 0x15000
   114c4:	ldr	pc, [ip, #2968]!	; 0xb98

000114c8 <textdomain@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #86016	; 0x15000
   114d0:	ldr	pc, [ip, #2960]!	; 0xb90

000114d4 <bfd_target_list@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #86016	; 0x15000
   114dc:	ldr	pc, [ip, #2952]!	; 0xb88

000114e0 <bfd_get_error@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #86016	; 0x15000
   114e8:	ldr	pc, [ip, #2944]!	; 0xb80

000114ec <_IO_putc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #86016	; 0x15000
   114f4:	ldr	pc, [ip, #2936]!	; 0xb78

000114f8 <fwrite@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #86016	; 0x15000
   11500:	ldr	pc, [ip, #2928]!	; 0xb70

00011504 <xmalloc@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #86016	; 0x15000
   1150c:	ldr	pc, [ip, #2920]!	; 0xb68

00011510 <xmalloc_set_program_name@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #86016	; 0x15000
   11518:	ldr	pc, [ip, #2912]!	; 0xb60

0001151c <xstrdup@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #86016	; 0x15000
   11524:	ldr	pc, [ip, #2904]!	; 0xb58

00011528 <strcpy@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #86016	; 0x15000
   11530:	ldr	pc, [ip, #2896]!	; 0xb50

00011534 <fread@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #86016	; 0x15000
   1153c:	ldr	pc, [ip, #2888]!	; 0xb48

00011540 <bfd_get_section_by_name@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #86016	; 0x15000
   11548:	ldr	pc, [ip, #2880]!	; 0xb40

0001154c <bfd_init@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #86016	; 0x15000
   11554:	ldr	pc, [ip, #2872]!	; 0xb38

00011558 <mkstemps64@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #86016	; 0x15000
   11560:	ldr	pc, [ip, #2864]!	; 0xb30

00011564 <getenv@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #86016	; 0x15000
   1156c:	ldr	pc, [ip, #2856]!	; 0xb28

00011570 <mkstemp64@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #86016	; 0x15000
   11578:	ldr	pc, [ip, #2848]!	; 0xb20

0001157c <__gnu_Unwind_Find_exidx@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #86016	; 0x15000
   11584:	ldr	pc, [ip, #2840]!	; 0xb18

00011588 <puts@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #86016	; 0x15000
   11590:	ldr	pc, [ip, #2832]!	; 0xb10

00011594 <__cxa_begin_cleanup@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #86016	; 0x15000
   1159c:	ldr	pc, [ip, #2824]!	; 0xb08

000115a0 <__libc_start_main@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #86016	; 0x15000
   115a8:	ldr	pc, [ip, #2816]!	; 0xb00

000115ac <strerror@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #86016	; 0x15000
   115b4:	ldr	pc, [ip, #2808]!	; 0xaf8

000115b8 <__vfprintf_chk@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #86016	; 0x15000
   115c0:	ldr	pc, [ip, #2800]!	; 0xaf0

000115c4 <__gmon_start__@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #86016	; 0x15000
   115cc:	ldr	pc, [ip, #2792]!	; 0xae8

000115d0 <bfd_set_format@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #86016	; 0x15000
   115d8:	ldr	pc, [ip, #2784]!	; 0xae0

000115dc <getopt_long@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #86016	; 0x15000
   115e4:	ldr	pc, [ip, #2776]!	; 0xad8

000115e8 <exit@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #86016	; 0x15000
   115f0:	ldr	pc, [ip, #2768]!	; 0xad0

000115f4 <__cxa_type_match@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #86016	; 0x15000
   115fc:	ldr	pc, [ip, #2760]!	; 0xac8

00011600 <strlen@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #86016	; 0x15000
   11608:	ldr	pc, [ip, #2752]!	; 0xac0

0001160c <bfd_close_all_done@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #86016	; 0x15000
   11614:	ldr	pc, [ip, #2744]!	; 0xab8

00011618 <bfd_printable_arch_mach@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #86016	; 0x15000
   11620:	ldr	pc, [ip, #2736]!	; 0xab0

00011624 <__errno_location@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #86016	; 0x15000
   1162c:	ldr	pc, [ip, #2728]!	; 0xaa8

00011630 <__sprintf_chk@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #86016	; 0x15000
   11638:	ldr	pc, [ip, #2720]!	; 0xaa0

0001163c <putchar@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #86016	; 0x15000
   11644:	ldr	pc, [ip, #2712]!	; 0xa98

00011648 <__printf_chk@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #86016	; 0x15000
   11650:	ldr	pc, [ip, #2704]!	; 0xa90

00011654 <__fprintf_chk@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #86016	; 0x15000
   1165c:	ldr	pc, [ip, #2696]!	; 0xa88

00011660 <access@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #86016	; 0x15000
   11668:	ldr	pc, [ip, #2688]!	; 0xa80

0001166c <fclose@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #86016	; 0x15000
   11674:	ldr	pc, [ip, #2680]!	; 0xa78

00011678 <bfd_openw@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #86016	; 0x15000
   11680:	ldr	pc, [ip, #2672]!	; 0xa70

00011684 <bfd_set_error_program_name@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #86016	; 0x15000
   1168c:	ldr	pc, [ip, #2664]!	; 0xa68

00011690 <bfd_demangle@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #86016	; 0x15000
   11698:	ldr	pc, [ip, #2656]!	; 0xa60

0001169c <setlocale@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #86016	; 0x15000
   116a4:	ldr	pc, [ip, #2648]!	; 0xa58

000116a8 <strrchr@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #86016	; 0x15000
   116b0:	ldr	pc, [ip, #2640]!	; 0xa50

000116b4 <fputc@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #86016	; 0x15000
   116bc:	ldr	pc, [ip, #2632]!	; 0xa48

000116c0 <xexit@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #86016	; 0x15000
   116c8:	ldr	pc, [ip, #2624]!	; 0xa40

000116cc <bfd_close@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #86016	; 0x15000
   116d4:	ldr	pc, [ip, #2616]!	; 0xa38

000116d8 <mkdtemp@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #86016	; 0x15000
   116e0:	ldr	pc, [ip, #2608]!	; 0xa30

000116e4 <bfd_check_format_matches@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #86016	; 0x15000
   116ec:	ldr	pc, [ip, #2600]!	; 0xa28

000116f0 <fopen64@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #86016	; 0x15000
   116f8:	ldr	pc, [ip, #2592]!	; 0xa20

000116fc <bfd_errmsg@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #86016	; 0x15000
   11704:	ldr	pc, [ip, #2584]!	; 0xa18

00011708 <bindtextdomain@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #86016	; 0x15000
   11710:	ldr	pc, [ip, #2576]!	; 0xa10

00011714 <bfd_check_format@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #86016	; 0x15000
   1171c:	ldr	pc, [ip, #2568]!	; 0xa08

00011720 <bfd_fprintf_vma@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #86016	; 0x15000
   11728:	ldr	pc, [ip, #2560]!	; 0xa00

0001172c <bfd_map_over_sections@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #86016	; 0x15000
   11734:	ldr	pc, [ip, #2552]!	; 0x9f8

00011738 <fseek@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #86016	; 0x15000
   11740:	ldr	pc, [ip, #2544]!	; 0x9f0

00011744 <__xstat64@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #86016	; 0x15000
   1174c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011750 <fputs@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #86016	; 0x15000
   11758:	ldr	pc, [ip, #2528]!	; 0x9e0

0001175c <abort@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #86016	; 0x15000
   11764:	ldr	pc, [ip, #2520]!	; 0x9d8

00011768 <close@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #86016	; 0x15000
   11770:	ldr	pc, [ip, #2512]!	; 0x9d0

00011774 <__assert_fail@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #86016	; 0x15000
   1177c:	ldr	pc, [ip, #2504]!	; 0x9c8

Disassembly of section .text:

00011780 <.text>:
   11780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11784:	movw	fp, #29224	; 0x7228
   11788:	movt	fp, #2
   1178c:	sub	sp, sp, #172	; 0xac
   11790:	movw	r4, #29344	; 0x72a0
   11794:	movt	r4, #2
   11798:	ldr	r3, [fp]
   1179c:	movw	r6, #29256	; 0x7248
   117a0:	str	r1, [sp, #48]	; 0x30
   117a4:	movw	r1, #23132	; 0x5a5c
   117a8:	str	r0, [sp, #52]	; 0x34
   117ac:	movt	r1, #1
   117b0:	mov	r0, #5
   117b4:	str	r3, [sp, #164]	; 0xa4
   117b8:	bl	1169c <setlocale@plt>
   117bc:	mov	r0, #0
   117c0:	movw	r1, #23132	; 0x5a5c
   117c4:	movt	r1, #1
   117c8:	mov	r8, r0
   117cc:	bl	1169c <setlocale@plt>
   117d0:	movw	r0, #23208	; 0x5aa8
   117d4:	movw	r1, #23220	; 0x5ab4
   117d8:	movt	r0, #1
   117dc:	movt	r1, #1
   117e0:	bl	11708 <bindtextdomain@plt>
   117e4:	movw	r0, #23208	; 0x5aa8
   117e8:	movt	r0, #1
   117ec:	movw	r5, #29264	; 0x7250
   117f0:	bl	114c8 <textdomain@plt>
   117f4:	ldr	r3, [sp, #48]	; 0x30
   117f8:	mov	r9, r8
   117fc:	mov	r7, r8
   11800:	movt	r6, #2
   11804:	movt	r5, #2
   11808:	ldr	r3, [r3]
   1180c:	mov	sl, #1
   11810:	mov	r0, r3
   11814:	str	r3, [r4]
   11818:	bl	11510 <xmalloc_set_program_name@plt>
   1181c:	ldr	r0, [r4]
   11820:	bl	11684 <bfd_set_error_program_name@plt>
   11824:	add	r0, sp, #52	; 0x34
   11828:	add	r1, sp, #48	; 0x30
   1182c:	bl	13990 <__assert_fail@plt+0x221c>
   11830:	bl	1154c <bfd_init@plt>
   11834:	bl	12714 <__assert_fail@plt+0xfa0>
   11838:	ldr	r0, [sp, #52]	; 0x34
   1183c:	mov	r4, #0
   11840:	ldr	r1, [sp, #48]	; 0x30
   11844:	movw	r2, #23284	; 0x5af4
   11848:	str	r4, [sp]
   1184c:	movt	r2, #1
   11850:	movw	r3, #29032	; 0x7168
   11854:	movt	r3, #2
   11858:	bl	115dc <getopt_long@plt>
   1185c:	cmn	r0, #1
   11860:	beq	11af0 <__assert_fail@plt+0x37c>
   11864:	cmp	r0, #118	; 0x76
   11868:	ldrls	pc, [pc, r0, lsl #2]
   1186c:	b	11adc <__assert_fail@plt+0x368>
   11870:	andeq	r1, r1, r8, lsr r8
   11874:	ldrdeq	r1, [r1], -ip
   11878:	ldrdeq	r1, [r1], -ip
   1187c:	ldrdeq	r1, [r1], -ip
   11880:	ldrdeq	r1, [r1], -ip
   11884:	ldrdeq	r1, [r1], -ip
   11888:	ldrdeq	r1, [r1], -ip
   1188c:	ldrdeq	r1, [r1], -ip
   11890:	ldrdeq	r1, [r1], -ip
   11894:	ldrdeq	r1, [r1], -ip
   11898:	ldrdeq	r1, [r1], -ip
   1189c:	ldrdeq	r1, [r1], -ip
   118a0:	ldrdeq	r1, [r1], -ip
   118a4:	ldrdeq	r1, [r1], -ip
   118a8:	ldrdeq	r1, [r1], -ip
   118ac:	ldrdeq	r1, [r1], -ip
   118b0:	ldrdeq	r1, [r1], -ip
   118b4:	ldrdeq	r1, [r1], -ip
   118b8:	ldrdeq	r1, [r1], -ip
   118bc:	ldrdeq	r1, [r1], -ip
   118c0:	ldrdeq	r1, [r1], -ip
   118c4:	ldrdeq	r1, [r1], -ip
   118c8:	ldrdeq	r1, [r1], -ip
   118cc:	ldrdeq	r1, [r1], -ip
   118d0:	ldrdeq	r1, [r1], -ip
   118d4:	ldrdeq	r1, [r1], -ip
   118d8:	ldrdeq	r1, [r1], -ip
   118dc:	ldrdeq	r1, [r1], -ip
   118e0:	ldrdeq	r1, [r1], -ip
   118e4:	ldrdeq	r1, [r1], -ip
   118e8:	ldrdeq	r1, [r1], -ip
   118ec:	ldrdeq	r1, [r1], -ip
   118f0:	ldrdeq	r1, [r1], -ip
   118f4:	ldrdeq	r1, [r1], -ip
   118f8:	ldrdeq	r1, [r1], -ip
   118fc:	ldrdeq	r1, [r1], -ip
   11900:	ldrdeq	r1, [r1], -ip
   11904:	ldrdeq	r1, [r1], -ip
   11908:	ldrdeq	r1, [r1], -ip
   1190c:	ldrdeq	r1, [r1], -ip
   11910:	ldrdeq	r1, [r1], -ip
   11914:	ldrdeq	r1, [r1], -ip
   11918:	ldrdeq	r1, [r1], -ip
   1191c:	ldrdeq	r1, [r1], -ip
   11920:	ldrdeq	r1, [r1], -ip
   11924:	ldrdeq	r1, [r1], -ip
   11928:	ldrdeq	r1, [r1], -ip
   1192c:	ldrdeq	r1, [r1], -ip
   11930:	ldrdeq	r1, [r1], -ip
   11934:	ldrdeq	r1, [r1], -ip
   11938:	ldrdeq	r1, [r1], -ip
   1193c:	ldrdeq	r1, [r1], -ip
   11940:	ldrdeq	r1, [r1], -ip
   11944:	ldrdeq	r1, [r1], -ip
   11948:	ldrdeq	r1, [r1], -ip
   1194c:	ldrdeq	r1, [r1], -ip
   11950:	ldrdeq	r1, [r1], -ip
   11954:	ldrdeq	r1, [r1], -ip
   11958:	ldrdeq	r1, [r1], -ip
   1195c:	ldrdeq	r1, [r1], -ip
   11960:	ldrdeq	r1, [r1], -ip
   11964:	ldrdeq	r1, [r1], -ip
   11968:	ldrdeq	r1, [r1], -ip
   1196c:	ldrdeq	r1, [r1], -ip
   11970:	ldrdeq	r1, [r1], -ip
   11974:	ldrdeq	r1, [r1], -ip
   11978:	ldrdeq	r1, [r1], -ip
   1197c:			; <UNDEFINED> instruction: 0x00011ab0
   11980:	ldrdeq	r1, [r1], -ip
   11984:	ldrdeq	r1, [r1], -ip
   11988:	ldrdeq	r1, [r1], -ip
   1198c:	ldrdeq	r1, [r1], -ip
   11990:	muleq	r1, ip, sl
   11994:	ldrdeq	r1, [r1], -ip
   11998:	ldrdeq	r1, [r1], -ip
   1199c:	ldrdeq	r1, [r1], -ip
   119a0:	ldrdeq	r1, [r1], -ip
   119a4:	ldrdeq	r1, [r1], -ip
   119a8:	ldrdeq	r1, [r1], -ip
   119ac:	ldrdeq	r1, [r1], -ip
   119b0:	ldrdeq	r1, [r1], -ip
   119b4:	ldrdeq	r1, [r1], -ip
   119b8:	ldrdeq	r1, [r1], -ip
   119bc:	ldrdeq	r1, [r1], -ip
   119c0:	ldrdeq	r1, [r1], -ip
   119c4:	ldrdeq	r1, [r1], -ip
   119c8:	andeq	r1, r1, ip, lsl #21
   119cc:	ldrdeq	r1, [r1], -ip
   119d0:	ldrdeq	r1, [r1], -ip
   119d4:	ldrdeq	r1, [r1], -ip
   119d8:	ldrdeq	r1, [r1], -ip
   119dc:	ldrdeq	r1, [r1], -ip
   119e0:	ldrdeq	r1, [r1], -ip
   119e4:	ldrdeq	r1, [r1], -ip
   119e8:	ldrdeq	r1, [r1], -ip
   119ec:	ldrdeq	r1, [r1], -ip
   119f0:	ldrdeq	r1, [r1], -ip
   119f4:	andeq	r1, r1, r4, lsl #21
   119f8:	andeq	r1, r1, ip, ror sl
   119fc:	ldrdeq	r1, [r1], -ip
   11a00:	ldrdeq	r1, [r1], -ip
   11a04:	andeq	r1, r1, r4, ror sl
   11a08:	andeq	r1, r1, ip, ror #20
   11a0c:	ldrdeq	r1, [r1], -ip
   11a10:	muleq	r1, ip, sl
   11a14:	andeq	r1, r1, r4, ror #20
   11a18:	andeq	r1, r1, ip, asr sl
   11a1c:	ldrdeq	r1, [r1], -ip
   11a20:	ldrdeq	r1, [r1], -ip
   11a24:	ldrdeq	r1, [r1], -ip
   11a28:	ldrdeq	r1, [r1], -ip
   11a2c:	ldrdeq	r1, [r1], -ip
   11a30:	andeq	r1, r1, r4, asr sl
   11a34:	ldrdeq	r1, [r1], -ip
   11a38:	ldrdeq	r1, [r1], -ip
   11a3c:	andeq	r1, r1, ip, asr #20
   11a40:	ldrdeq	r1, [r1], -ip
   11a44:	ldrdeq	r1, [r1], -ip
   11a48:	andeq	r1, r1, ip, lsl #21
   11a4c:	str	sl, [r5, #44]	; 0x2c
   11a50:	b	11838 <__assert_fail@plt+0xc4>
   11a54:	str	sl, [r5, #52]	; 0x34
   11a58:	b	11838 <__assert_fail@plt+0xc4>
   11a5c:	ldr	r9, [r6]
   11a60:	b	11838 <__assert_fail@plt+0xc4>
   11a64:	str	sl, [r5, #56]	; 0x38
   11a68:	b	11838 <__assert_fail@plt+0xc4>
   11a6c:	str	sl, [r5, #48]	; 0x30
   11a70:	b	11838 <__assert_fail@plt+0xc4>
   11a74:	ldr	r7, [r6]
   11a78:	b	11838 <__assert_fail@plt+0xc4>
   11a7c:	ldr	r8, [r6]
   11a80:	b	11838 <__assert_fail@plt+0xc4>
   11a84:	str	sl, [r5, #36]	; 0x24
   11a88:	b	11838 <__assert_fail@plt+0xc4>
   11a8c:	movw	r0, #23272	; 0x5ae8
   11a90:	movt	r0, #1
   11a94:	bl	13434 <__assert_fail@plt+0x1cc0>
   11a98:	b	11838 <__assert_fail@plt+0xc4>
   11a9c:	movw	r3, #29248	; 0x7240
   11aa0:	movt	r3, #2
   11aa4:	mov	r1, #0
   11aa8:	ldr	r0, [r3]
   11aac:	bl	12328 <__assert_fail@plt+0xbb4>
   11ab0:	ldr	r0, [r6]
   11ab4:	movw	r4, #29256	; 0x7248
   11ab8:	str	sl, [r5, #40]	; 0x28
   11abc:	movt	r4, #2
   11ac0:	cmp	r0, #0
   11ac4:	beq	11838 <__assert_fail@plt+0xc4>
   11ac8:	bl	113cc <cplus_demangle_name_to_style@plt>
   11acc:	cmp	r0, #0
   11ad0:	beq	121d4 <__assert_fail@plt+0xa60>
   11ad4:	bl	11450 <cplus_demangle_set_style@plt>
   11ad8:	b	11838 <__assert_fail@plt+0xc4>
   11adc:	movw	r3, #29236	; 0x7234
   11ae0:	movt	r3, #2
   11ae4:	mov	r1, #1
   11ae8:	ldr	r0, [r3]
   11aec:	bl	12328 <__assert_fail@plt+0xbb4>
   11af0:	movw	r2, #29232	; 0x7230
   11af4:	movt	r2, #2
   11af8:	cmp	r7, r4
   11afc:	movw	r3, #23196	; 0x5a9c
   11b00:	movt	r3, #1
   11b04:	ldr	r2, [r2]
   11b08:	ldr	r1, [sp, #52]	; 0x34
   11b0c:	movw	r6, #29264	; 0x7250
   11b10:	moveq	r7, r3
   11b14:	movt	r6, #2
   11b18:	ldr	r3, [sp, #48]	; 0x30
   11b1c:	mov	r0, r7
   11b20:	add	r3, r3, r2, lsl #2
   11b24:	rsb	r2, r2, r1
   11b28:	str	r3, [r6, #60]	; 0x3c
   11b2c:	str	r2, [r6, #64]	; 0x40
   11b30:	bl	13040 <__assert_fail@plt+0x18cc>
   11b34:	cmp	r0, #1
   11b38:	sbcs	r2, r1, #0
   11b3c:	blt	1206c <__assert_fail@plt+0x8f8>
   11b40:	mov	r1, r8
   11b44:	mov	r0, r7
   11b48:	bl	11468 <bfd_openr@plt>
   11b4c:	subs	r8, r0, #0
   11b50:	beq	121cc <__assert_fail@plt+0xa58>
   11b54:	ldr	r3, [r8, #40]	; 0x28
   11b58:	mov	r1, #2
   11b5c:	orr	r3, r3, #1048576	; 0x100000
   11b60:	str	r3, [r8, #40]	; 0x28
   11b64:	bl	11714 <bfd_check_format@plt>
   11b68:	cmp	r0, #0
   11b6c:	str	r0, [sp, #40]	; 0x28
   11b70:	bne	121b0 <__assert_fail@plt+0xa3c>
   11b74:	mov	r0, r8
   11b78:	mov	r1, #1
   11b7c:	add	r2, sp, #60	; 0x3c
   11b80:	bl	116e4 <bfd_check_format_matches@plt>
   11b84:	cmp	r0, #0
   11b88:	beq	12184 <__assert_fail@plt+0xa10>
   11b8c:	cmp	r9, #0
   11b90:	beq	120f8 <__assert_fail@plt+0x984>
   11b94:	mov	r0, r8
   11b98:	mov	r1, r9
   11b9c:	bl	11540 <bfd_get_section_by_name@plt>
   11ba0:	subs	sl, r0, #0
   11ba4:	beq	12168 <__assert_fail@plt+0x9f4>
   11ba8:	ldr	r3, [r8, #40]	; 0x28
   11bac:	tst	r3, #512	; 0x200
   11bb0:	bne	12078 <__assert_fail@plt+0x904>
   11bb4:	ldr	ip, [r6, #64]	; 0x40
   11bb8:	movw	r7, #29264	; 0x7250
   11bbc:	movw	r4, #29244	; 0x723c
   11bc0:	movw	r5, #29248	; 0x7240
   11bc4:	movt	r4, #2
   11bc8:	movt	r5, #2
   11bcc:	str	fp, [sp, #44]	; 0x2c
   11bd0:	movt	r7, #2
   11bd4:	str	r4, [sp, #32]
   11bd8:	mov	fp, ip
   11bdc:	str	r5, [sp, #36]	; 0x24
   11be0:	b	11ca8 <__assert_fail@plt+0x534>
   11be4:	ldr	r3, [r6, #64]	; 0x40
   11be8:	cmp	r3, #0
   11bec:	ble	12024 <__assert_fail@plt+0x8b0>
   11bf0:	ldr	r0, [r7, #60]	; 0x3c
   11bf4:	sub	r3, r3, #1
   11bf8:	mov	r1, #0
   11bfc:	str	r3, [r7, #64]	; 0x40
   11c00:	mov	r2, #16
   11c04:	add	r3, r0, #4
   11c08:	ldr	r0, [r0]
   11c0c:	str	r3, [r7, #60]	; 0x3c
   11c10:	bl	113d8 <bfd_scan_vma@plt>
   11c14:	strd	r0, [r7, #8]
   11c18:	ldr	r3, [r8, #4]
   11c1c:	ldr	r2, [r3, #4]
   11c20:	cmp	r2, #5
   11c24:	beq	11d30 <__assert_fail@plt+0x5bc>
   11c28:	ldr	r3, [r6, #36]	; 0x24
   11c2c:	cmp	r3, #0
   11c30:	bne	11ce4 <__assert_fail@plt+0x570>
   11c34:	movw	r9, #29248	; 0x7240
   11c38:	movt	r9, #2
   11c3c:	cmp	sl, #0
   11c40:	mov	r3, #0
   11c44:	str	r3, [r6]
   11c48:	beq	11db8 <__assert_fail@plt+0x644>
   11c4c:	ldr	r3, [sl, #20]
   11c50:	tst	r3, #1
   11c54:	beq	11c6c <__assert_fail@plt+0x4f8>
   11c58:	ldrd	r4, [r7, #8]
   11c5c:	ldrd	r2, [sl, #48]	; 0x30
   11c60:	cmp	r3, r5
   11c64:	cmpeq	r2, r4
   11c68:	bhi	11fe0 <__assert_fail@plt+0x86c>
   11c6c:	ldr	r3, [r6, #48]	; 0x30
   11c70:	cmp	r3, #0
   11c74:	beq	11c94 <__assert_fail@plt+0x520>
   11c78:	ldr	r3, [r7, #52]	; 0x34
   11c7c:	cmp	r3, #0
   11c80:	beq	11fd0 <__assert_fail@plt+0x85c>
   11c84:	movw	r1, #23380	; 0x5b54
   11c88:	mov	r0, #1
   11c8c:	movt	r1, #1
   11c90:	bl	11648 <__printf_chk@plt>
   11c94:	movw	r0, #23384	; 0x5b58
   11c98:	movt	r0, #1
   11c9c:	bl	11588 <puts@plt>
   11ca0:	ldr	r0, [r9]
   11ca4:	bl	113fc <fflush@plt>
   11ca8:	cmp	fp, #0
   11cac:	bne	11be4 <__assert_fail@plt+0x470>
   11cb0:	ldr	ip, [sp, #32]
   11cb4:	add	r0, sp, #64	; 0x40
   11cb8:	mov	r1, #100	; 0x64
   11cbc:	ldr	r2, [ip]
   11cc0:	bl	11438 <fgets@plt>
   11cc4:	cmp	r0, #0
   11cc8:	beq	12024 <__assert_fail@plt+0x8b0>
   11ccc:	add	r0, sp, #64	; 0x40
   11cd0:	mov	r1, fp
   11cd4:	mov	r2, #16
   11cd8:	bl	113d8 <bfd_scan_vma@plt>
   11cdc:	strd	r0, [r6, #8]
   11ce0:	b	11c18 <__assert_fail@plt+0x4a4>
   11ce4:	movw	r1, #23372	; 0x5b4c
   11ce8:	mov	r0, #1
   11cec:	movt	r1, #1
   11cf0:	movw	r9, #29248	; 0x7240
   11cf4:	bl	11648 <__printf_chk@plt>
   11cf8:	ldr	r4, [sp, #36]	; 0x24
   11cfc:	ldrd	r2, [r7, #8]
   11d00:	mov	r0, r8
   11d04:	movt	r9, #2
   11d08:	ldr	r1, [r4]
   11d0c:	bl	11720 <bfd_fprintf_vma@plt>
   11d10:	ldr	r3, [r7, #52]	; 0x34
   11d14:	cmp	r3, #0
   11d18:	beq	11fc4 <__assert_fail@plt+0x850>
   11d1c:	movw	r1, #23376	; 0x5b50
   11d20:	mov	r0, #1
   11d24:	movt	r1, #1
   11d28:	bl	11648 <__printf_chk@plt>
   11d2c:	b	11c3c <__assert_fail@plt+0x4c8>
   11d30:	ldr	r1, [r3, #436]	; 0x1b4
   11d34:	mov	r3, #1
   11d38:	ldr	r2, [r1, #392]	; 0x188
   11d3c:	ldrb	r1, [r1, #472]	; 0x1d8
   11d40:	ldrb	r2, [r2, #10]
   11d44:	sub	r0, r2, #33	; 0x21
   11d48:	sub	r2, r2, #1
   11d4c:	lsl	r0, r3, r0
   11d50:	str	r0, [sp, #28]
   11d54:	ldr	r4, [sp, #28]
   11d58:	rsb	r0, r2, #32
   11d5c:	orr	r0, r4, r3, lsr r0
   11d60:	lsl	r3, r3, r2
   11d64:	str	r0, [sp, #28]
   11d68:	str	r3, [sp, #24]
   11d6c:	ldrd	r2, [sp, #24]
   11d70:	mov	r4, r2
   11d74:	adds	r2, r2, r2
   11d78:	mov	r5, r3
   11d7c:	adc	r3, r3, r3
   11d80:	subs	r2, r2, #1
   11d84:	sbc	r3, r3, #0
   11d88:	lsrs	r1, r1, #7
   11d8c:	ldrd	r0, [r6, #8]
   11d90:	and	r2, r2, r0
   11d94:	and	r3, r3, r1
   11d98:	strd	r2, [r6, #8]
   11d9c:	beq	11c28 <__assert_fail@plt+0x4b4>
   11da0:	eor	r2, r2, r4
   11da4:	eor	r3, r3, r5
   11da8:	subs	r2, r2, r4
   11dac:	sbc	r3, r3, r5
   11db0:	strd	r2, [r7, #8]
   11db4:	b	11c28 <__assert_fail@plt+0x4b4>
   11db8:	movw	r1, #9244	; 0x241c
   11dbc:	mov	r0, r8
   11dc0:	movt	r1, #1
   11dc4:	mov	r2, sl
   11dc8:	bl	1172c <bfd_map_over_sections@plt>
   11dcc:	ldr	r3, [r6]
   11dd0:	cmp	r3, #0
   11dd4:	beq	11c6c <__assert_fail@plt+0x4f8>
   11dd8:	ldr	r3, [r6, #48]	; 0x30
   11ddc:	cmp	r3, #0
   11de0:	beq	11e60 <__assert_fail@plt+0x6ec>
   11de4:	ldr	r4, [r7, #24]
   11de8:	cmp	r4, #0
   11dec:	beq	11f94 <__assert_fail@plt+0x820>
   11df0:	ldrb	r5, [r4]
   11df4:	cmp	r5, #0
   11df8:	movweq	r4, #23204	; 0x5aa4
   11dfc:	movteq	r4, #1
   11e00:	beq	11e10 <__assert_fail@plt+0x69c>
   11e04:	ldr	r5, [r7, #40]	; 0x28
   11e08:	cmp	r5, #0
   11e0c:	bne	11fa4 <__assert_fail@plt+0x830>
   11e10:	mov	r2, r4
   11e14:	movw	r1, #24080	; 0x5e10
   11e18:	mov	r0, #1
   11e1c:	movt	r1, #1
   11e20:	bl	11648 <__printf_chk@plt>
   11e24:	ldr	r3, [r6, #52]	; 0x34
   11e28:	cmp	r3, #0
   11e2c:	beq	11f88 <__assert_fail@plt+0x814>
   11e30:	movw	r1, #23392	; 0x5b60
   11e34:	mov	r0, #0
   11e38:	movt	r1, #1
   11e3c:	mov	r2, #5
   11e40:	bl	1148c <dcgettext@plt>
   11e44:	mov	r1, r0
   11e48:	mov	r0, #1
   11e4c:	bl	11648 <__printf_chk@plt>
   11e50:	cmp	r5, #0
   11e54:	beq	11e60 <__assert_fail@plt+0x6ec>
   11e58:	mov	r0, r5
   11e5c:	bl	1142c <free@plt>
   11e60:	ldr	r3, [r6, #44]	; 0x2c
   11e64:	cmp	r3, #0
   11e68:	bne	11ecc <__assert_fail@plt+0x758>
   11e6c:	ldr	r2, [r7, #20]
   11e70:	cmp	r2, #0
   11e74:	beq	11f00 <__assert_fail@plt+0x78c>
   11e78:	movw	r1, #23400	; 0x5b68
   11e7c:	mov	r0, #1
   11e80:	movt	r1, #1
   11e84:	bl	11648 <__printf_chk@plt>
   11e88:	ldr	r2, [r6, #28]
   11e8c:	cmp	r2, #0
   11e90:	beq	11f78 <__assert_fail@plt+0x804>
   11e94:	ldr	r3, [r7, #32]
   11e98:	cmp	r3, #0
   11e9c:	beq	11f0c <__assert_fail@plt+0x798>
   11ea0:	movw	r1, #23404	; 0x5b6c
   11ea4:	mov	r0, #1
   11ea8:	movt	r1, #1
   11eac:	bl	11648 <__printf_chk@plt>
   11eb0:	ldr	r2, [r6, #56]	; 0x38
   11eb4:	movw	r3, #29264	; 0x7250
   11eb8:	movt	r3, #2
   11ebc:	cmp	r2, #0
   11ec0:	bne	11f20 <__assert_fail@plt+0x7ac>
   11ec4:	str	r2, [r3]
   11ec8:	b	11ca0 <__assert_fail@plt+0x52c>
   11ecc:	ldr	r4, [r7, #20]
   11ed0:	cmp	r4, #0
   11ed4:	beq	11f00 <__assert_fail@plt+0x78c>
   11ed8:	mov	r0, r4
   11edc:	mov	r1, #47	; 0x2f
   11ee0:	bl	116a8 <strrchr@plt>
   11ee4:	cmp	r0, #0
   11ee8:	moveq	r2, r4
   11eec:	beq	11e78 <__assert_fail@plt+0x704>
   11ef0:	add	r2, r0, #1
   11ef4:	str	r2, [r7, #20]
   11ef8:	cmp	r2, #0
   11efc:	bne	11e78 <__assert_fail@plt+0x704>
   11f00:	movw	r2, #23204	; 0x5aa4
   11f04:	movt	r2, #1
   11f08:	b	11e78 <__assert_fail@plt+0x704>
   11f0c:	movw	r1, #23428	; 0x5b84
   11f10:	mov	r0, #1
   11f14:	movt	r1, #1
   11f18:	bl	11648 <__printf_chk@plt>
   11f1c:	b	11eb0 <__assert_fail@plt+0x73c>
   11f20:	ldr	ip, [r8, #4]
   11f24:	add	r1, r3, #20
   11f28:	add	r2, r3, #24
   11f2c:	mov	r0, r8
   11f30:	add	r3, r3, #28
   11f34:	ldr	ip, [ip, #304]	; 0x130
   11f38:	blx	ip
   11f3c:	cmp	r0, #0
   11f40:	str	r0, [r7]
   11f44:	beq	11ca0 <__assert_fail@plt+0x52c>
   11f48:	ldr	r3, [r7, #52]	; 0x34
   11f4c:	cmp	r3, #0
   11f50:	beq	11dd8 <__assert_fail@plt+0x664>
   11f54:	mov	r2, #5
   11f58:	movw	r1, #23436	; 0x5b8c
   11f5c:	mov	r0, #0
   11f60:	movt	r1, #1
   11f64:	bl	1148c <dcgettext@plt>
   11f68:	mov	r1, r0
   11f6c:	mov	r0, #1
   11f70:	bl	11648 <__printf_chk@plt>
   11f74:	b	11dd8 <__assert_fail@plt+0x664>
   11f78:	movw	r0, #23432	; 0x5b88
   11f7c:	movt	r0, #1
   11f80:	bl	11588 <puts@plt>
   11f84:	b	11eb0 <__assert_fail@plt+0x73c>
   11f88:	mov	r0, #10
   11f8c:	bl	1163c <putchar@plt>
   11f90:	b	11e50 <__assert_fail@plt+0x6dc>
   11f94:	mov	r5, r4
   11f98:	movw	r4, #23204	; 0x5aa4
   11f9c:	movt	r4, #1
   11fa0:	b	11e10 <__assert_fail@plt+0x69c>
   11fa4:	mov	r1, r4
   11fa8:	mov	r0, r8
   11fac:	mov	r2, #3
   11fb0:	bl	11690 <bfd_demangle@plt>
   11fb4:	cmp	r0, #0
   11fb8:	mov	r5, r0
   11fbc:	movne	r4, r0
   11fc0:	b	11e10 <__assert_fail@plt+0x69c>
   11fc4:	mov	r0, #10
   11fc8:	bl	1163c <putchar@plt>
   11fcc:	b	11c3c <__assert_fail@plt+0x4c8>
   11fd0:	movw	r0, #23204	; 0x5aa4
   11fd4:	movt	r0, #1
   11fd8:	bl	11588 <puts@plt>
   11fdc:	b	11c94 <__assert_fail@plt+0x520>
   11fe0:	ldr	ip, [r8, #4]
   11fe4:	mov	r0, r8
   11fe8:	ldr	r3, [pc, #512]	; 121f0 <__assert_fail@plt+0xa7c>
   11fec:	mov	r2, sl
   11ff0:	strd	r4, [sp]
   11ff4:	add	r1, r3, #4
   11ff8:	sub	r5, r3, #8
   11ffc:	str	r1, [sp, #20]
   12000:	sub	r1, r3, #4
   12004:	str	r3, [sp, #16]
   12008:	str	r5, [sp, #8]
   1200c:	str	r1, [sp, #12]
   12010:	ldr	r1, [r7, #16]
   12014:	ldr	r3, [ip, #296]	; 0x128
   12018:	blx	r3
   1201c:	str	r0, [r7]
   12020:	b	11dcc <__assert_fail@plt+0x658>
   12024:	ldr	r0, [r6, #16]
   12028:	movw	r4, #29264	; 0x7250
   1202c:	ldr	fp, [sp, #44]	; 0x2c
   12030:	movt	r4, #2
   12034:	cmp	r0, #0
   12038:	beq	12048 <__assert_fail@plt+0x8d4>
   1203c:	bl	1142c <free@plt>
   12040:	mov	r3, #0
   12044:	str	r3, [r4, #16]
   12048:	mov	r0, r8
   1204c:	bl	116cc <bfd_close@plt>
   12050:	ldr	r2, [sp, #164]	; 0xa4
   12054:	ldr	r3, [fp]
   12058:	ldr	r0, [sp, #40]	; 0x28
   1205c:	cmp	r2, r3
   12060:	bne	121ec <__assert_fail@plt+0xa78>
   12064:	add	sp, sp, #172	; 0xac
   12068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1206c:	mov	r4, #1
   12070:	str	r4, [sp, #40]	; 0x28
   12074:	b	12050 <__assert_fail@plt+0x8dc>
   12078:	ldr	r3, [r8, #4]
   1207c:	mov	r0, r8
   12080:	ldr	r3, [r3, #260]	; 0x104
   12084:	blx	r3
   12088:	cmp	r0, #0
   1208c:	movne	r4, #0
   12090:	beq	12148 <__assert_fail@plt+0x9d4>
   12094:	cmp	r0, #0
   12098:	blt	12160 <__assert_fail@plt+0x9ec>
   1209c:	bl	11504 <xmalloc@plt>
   120a0:	ldr	r3, [r8, #4]
   120a4:	cmp	r4, #0
   120a8:	ldrne	r3, [r3, #416]	; 0x1a0
   120ac:	ldreq	r3, [r3, #264]	; 0x108
   120b0:	mov	r1, r0
   120b4:	str	r0, [r6, #16]
   120b8:	mov	r0, r8
   120bc:	blx	r3
   120c0:	cmp	r0, #0
   120c4:	blt	12160 <__assert_fail@plt+0x9ec>
   120c8:	eor	r3, r4, #1
   120cc:	movne	r3, #0
   120d0:	andeq	r3, r3, #1
   120d4:	cmp	r3, #0
   120d8:	bne	12100 <__assert_fail@plt+0x98c>
   120dc:	cmp	r0, #0
   120e0:	bgt	11bb4 <__assert_fail@plt+0x440>
   120e4:	ldr	r0, [r6, #16]
   120e8:	bl	1142c <free@plt>
   120ec:	mov	r3, #0
   120f0:	str	r3, [r6, #16]
   120f4:	b	11bb4 <__assert_fail@plt+0x440>
   120f8:	ldr	sl, [sp, #40]	; 0x28
   120fc:	b	11ba8 <__assert_fail@plt+0x434>
   12100:	ldr	r3, [r8, #4]
   12104:	mov	r0, r8
   12108:	ldr	r3, [r3, #412]	; 0x19c
   1210c:	blx	r3
   12110:	subs	r4, r0, #0
   12114:	ble	120e4 <__assert_fail@plt+0x970>
   12118:	ldr	r0, [r6, #16]
   1211c:	bl	1142c <free@plt>
   12120:	mov	r0, r4
   12124:	bl	11504 <xmalloc@plt>
   12128:	ldr	r2, [r8, #4]
   1212c:	mov	r3, r0
   12130:	mov	r1, r0
   12134:	str	r3, [r6, #16]
   12138:	mov	r0, r8
   1213c:	ldr	r3, [r2, #416]	; 0x1a0
   12140:	blx	r3
   12144:	b	120dc <__assert_fail@plt+0x968>
   12148:	ldr	r3, [r8, #4]
   1214c:	mov	r0, r8
   12150:	mov	r4, #1
   12154:	ldr	r3, [r3, #412]	; 0x19c
   12158:	blx	r3
   1215c:	b	12094 <__assert_fail@plt+0x920>
   12160:	ldr	r0, [r8]
   12164:	bl	12610 <__assert_fail@plt+0xe9c>
   12168:	mov	r2, #5
   1216c:	movw	r1, #23344	; 0x5b30
   12170:	movt	r1, #1
   12174:	bl	1148c <dcgettext@plt>
   12178:	mov	r1, r7
   1217c:	mov	r2, r9
   12180:	bl	12688 <__assert_fail@plt+0xf14>
   12184:	ldr	r0, [r8]
   12188:	bl	12584 <__assert_fail@plt+0xe10>
   1218c:	bl	114e0 <bfd_get_error@plt>
   12190:	cmp	r0, #13
   12194:	bne	121a8 <__assert_fail@plt+0xa34>
   12198:	ldr	r0, [sp, #60]	; 0x3c
   1219c:	bl	1275c <__assert_fail@plt+0xfe8>
   121a0:	ldr	r0, [sp, #60]	; 0x3c
   121a4:	bl	1142c <free@plt>
   121a8:	mov	r0, #1
   121ac:	bl	116c0 <xexit@plt>
   121b0:	mov	r0, r4
   121b4:	movw	r1, #23304	; 0x5b08
   121b8:	mov	r2, #5
   121bc:	movt	r1, #1
   121c0:	bl	1148c <dcgettext@plt>
   121c4:	mov	r1, r7
   121c8:	bl	12688 <__assert_fail@plt+0xf14>
   121cc:	mov	r0, r7
   121d0:	bl	12610 <__assert_fail@plt+0xe9c>
   121d4:	movw	r1, #23240	; 0x5ac8
   121d8:	mov	r2, #5
   121dc:	movt	r1, #1
   121e0:	bl	1148c <dcgettext@plt>
   121e4:	ldr	r1, [r4]
   121e8:	bl	12688 <__assert_fail@plt+0xf14>
   121ec:	bl	114a4 <__stack_chk_fail@plt>
   121f0:	andeq	r7, r2, ip, ror #4
   121f4:	mov	fp, #0
   121f8:	mov	lr, #0
   121fc:	pop	{r1}		; (ldr r1, [sp], #4)
   12200:	mov	r2, sp
   12204:	push	{r2}		; (str r2, [sp, #-4]!)
   12208:	push	{r0}		; (str r0, [sp, #-4]!)
   1220c:	ldr	ip, [pc, #16]	; 12224 <__assert_fail@plt+0xab0>
   12210:	push	{ip}		; (str ip, [sp, #-4]!)
   12214:	ldr	r0, [pc, #12]	; 12228 <__assert_fail@plt+0xab4>
   12218:	ldr	r3, [pc, #12]	; 1222c <__assert_fail@plt+0xab8>
   1221c:	bl	115a0 <__libc_start_main@plt>
   12220:	bl	1175c <abort@plt>
   12224:	strdeq	r5, [r1], -ip
   12228:	andeq	r1, r1, r0, lsl #15
   1222c:	muleq	r1, r8, r6
   12230:	ldr	r3, [pc, #20]	; 1224c <__assert_fail@plt+0xad8>
   12234:	ldr	r2, [pc, #20]	; 12250 <__assert_fail@plt+0xadc>
   12238:	add	r3, pc, r3
   1223c:	ldr	r2, [r3, r2]
   12240:	cmp	r2, #0
   12244:	bxeq	lr
   12248:	b	115c4 <__gmon_start__@plt>
   1224c:	andeq	r4, r1, r0, asr #27
   12250:	andeq	r0, r0, r8, asr r1
   12254:	push	{r3, lr}
   12258:	movw	r0, #29224	; 0x7228
   1225c:	ldr	r3, [pc, #36]	; 12288 <__assert_fail@plt+0xb14>
   12260:	movt	r0, #2
   12264:	rsb	r3, r0, r3
   12268:	cmp	r3, #6
   1226c:	popls	{r3, pc}
   12270:	movw	r3, #0
   12274:	movt	r3, #0
   12278:	cmp	r3, #0
   1227c:	popeq	{r3, pc}
   12280:	blx	r3
   12284:	pop	{r3, pc}
   12288:	andeq	r7, r2, fp, lsr #4
   1228c:	push	{r3, lr}
   12290:	movw	r0, #29224	; 0x7228
   12294:	movw	r3, #29224	; 0x7228
   12298:	movt	r0, #2
   1229c:	movt	r3, #2
   122a0:	rsb	r3, r0, r3
   122a4:	asr	r3, r3, #2
   122a8:	add	r3, r3, r3, lsr #31
   122ac:	asrs	r1, r3, #1
   122b0:	popeq	{r3, pc}
   122b4:	movw	r2, #0
   122b8:	movt	r2, #0
   122bc:	cmp	r2, #0
   122c0:	popeq	{r3, pc}
   122c4:	blx	r2
   122c8:	pop	{r3, pc}
   122cc:	push	{r4, lr}
   122d0:	movw	r4, #29260	; 0x724c
   122d4:	movt	r4, #2
   122d8:	ldrb	r3, [r4]
   122dc:	cmp	r3, #0
   122e0:	popne	{r4, pc}
   122e4:	bl	12254 <__assert_fail@plt+0xae0>
   122e8:	mov	r3, #1
   122ec:	strb	r3, [r4]
   122f0:	pop	{r4, pc}
   122f4:	movw	r0, #28412	; 0x6efc
   122f8:	movt	r0, #2
   122fc:	push	{r3, lr}
   12300:	ldr	r3, [r0]
   12304:	cmp	r3, #0
   12308:	beq	12320 <__assert_fail@plt+0xbac>
   1230c:	movw	r3, #0
   12310:	movt	r3, #0
   12314:	cmp	r3, #0
   12318:	beq	12320 <__assert_fail@plt+0xbac>
   1231c:	blx	r3
   12320:	pop	{r3, lr}
   12324:	b	1228c <__assert_fail@plt+0xb18>
   12328:	push	{r4, r5, r6, lr}
   1232c:	mov	r2, #5
   12330:	mov	r4, r0
   12334:	mov	r6, r1
   12338:	mov	r0, #0
   1233c:	movw	r1, #22288	; 0x5710
   12340:	movt	r1, #1
   12344:	movw	r5, #29344	; 0x72a0
   12348:	bl	1148c <dcgettext@plt>
   1234c:	movt	r5, #2
   12350:	mov	r1, #1
   12354:	ldr	r3, [r5]
   12358:	mov	r2, r0
   1235c:	mov	r0, r4
   12360:	bl	11654 <__fprintf_chk@plt>
   12364:	mov	r2, #5
   12368:	movw	r1, #22324	; 0x5734
   1236c:	mov	r0, #0
   12370:	movt	r1, #1
   12374:	bl	1148c <dcgettext@plt>
   12378:	mov	r1, #1
   1237c:	mov	r2, r0
   12380:	mov	r0, r4
   12384:	bl	11654 <__fprintf_chk@plt>
   12388:	mov	r2, #5
   1238c:	movw	r1, #22380	; 0x576c
   12390:	mov	r0, #0
   12394:	movt	r1, #1
   12398:	bl	1148c <dcgettext@plt>
   1239c:	mov	r1, #1
   123a0:	mov	r2, r0
   123a4:	mov	r0, r4
   123a8:	bl	11654 <__fprintf_chk@plt>
   123ac:	mov	r2, #5
   123b0:	movw	r1, #22464	; 0x57c0
   123b4:	mov	r0, #0
   123b8:	movt	r1, #1
   123bc:	bl	1148c <dcgettext@plt>
   123c0:	mov	r1, #1
   123c4:	mov	r2, r0
   123c8:	mov	r0, r4
   123cc:	bl	11654 <__fprintf_chk@plt>
   123d0:	ldr	r0, [r5]
   123d4:	mov	r1, r4
   123d8:	bl	127ec <__assert_fail@plt+0x1078>
   123dc:	cmp	r6, #0
   123e0:	beq	123ec <__assert_fail@plt+0xc78>
   123e4:	mov	r0, r6
   123e8:	bl	115e8 <exit@plt>
   123ec:	mov	r0, r6
   123f0:	mov	r2, #5
   123f4:	movw	r1, #23136	; 0x5a60
   123f8:	movt	r1, #1
   123fc:	bl	1148c <dcgettext@plt>
   12400:	movw	r3, #23156	; 0x5a74
   12404:	mov	r1, #1
   12408:	movt	r3, #1
   1240c:	mov	r2, r0
   12410:	mov	r0, r4
   12414:	bl	11654 <__fprintf_chk@plt>
   12418:	b	123e4 <__assert_fail@plt+0xc70>
   1241c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12420:	movw	sl, #29264	; 0x7250
   12424:	movt	sl, #2
   12428:	sub	sp, sp, #24
   1242c:	ldr	r3, [sl]
   12430:	cmp	r3, #0
   12434:	bne	12470 <__assert_fail@plt+0xcfc>
   12438:	ldr	r3, [r1, #20]
   1243c:	tst	r3, #1
   12440:	beq	12470 <__assert_fail@plt+0xcfc>
   12444:	ldrd	r4, [r1, #32]
   12448:	ldrd	r8, [sl, #8]
   1244c:	cmp	r5, r9
   12450:	cmpeq	r4, r8
   12454:	bhi	12470 <__assert_fail@plt+0xcfc>
   12458:	ldrd	r6, [r1, #48]	; 0x30
   1245c:	adds	r6, r6, r4
   12460:	adc	r7, r7, r5
   12464:	cmp	r9, r7
   12468:	cmpeq	r8, r6
   1246c:	bcc	12478 <__assert_fail@plt+0xd04>
   12470:	add	sp, sp, #24
   12474:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12478:	ldr	r3, [r0, #4]
   1247c:	mov	r2, r1
   12480:	ldr	lr, [sl, #16]
   12484:	add	r1, sl, #20
   12488:	add	ip, sl, #24
   1248c:	str	r1, [sp, #8]
   12490:	str	ip, [sp, #12]
   12494:	add	r1, sl, #28
   12498:	add	ip, sl, #32
   1249c:	str	r1, [sp, #16]
   124a0:	str	ip, [sp, #20]
   124a4:	subs	r8, r8, r4
   124a8:	sbc	r9, r9, r5
   124ac:	mov	r1, lr
   124b0:	strd	r8, [sp]
   124b4:	ldr	r3, [r3, #296]	; 0x128
   124b8:	blx	r3
   124bc:	str	r0, [sl]
   124c0:	b	12470 <__assert_fail@plt+0xcfc>
   124c4:	push	{r4, r5, r6, lr}
   124c8:	mov	r1, #47	; 0x2f
   124cc:	mov	r6, r0
   124d0:	bl	116a8 <strrchr@plt>
   124d4:	subs	r5, r0, #0
   124d8:	beq	1252c <__assert_fail@plt+0xdb8>
   124dc:	rsb	r4, r6, r5
   124e0:	add	r0, r4, #11
   124e4:	add	r5, r4, #1
   124e8:	bl	11504 <xmalloc@plt>
   124ec:	mov	r1, r6
   124f0:	mov	r2, r4
   124f4:	bl	1145c <memcpy@plt>
   124f8:	mov	r3, #47	; 0x2f
   124fc:	mov	ip, r0
   12500:	strb	r3, [r0, r4]
   12504:	movw	r3, #23588	; 0x5c24
   12508:	movt	r3, #1
   1250c:	add	r2, ip, r5
   12510:	ldm	r3!, {r0, r1}
   12514:	ldrb	r3, [r3]
   12518:	str	r0, [ip, r5]
   1251c:	mov	r0, ip
   12520:	str	r1, [r2, #4]
   12524:	strb	r3, [r2, #8]
   12528:	pop	{r4, r5, r6, pc}
   1252c:	mov	r0, #9
   12530:	bl	11504 <xmalloc@plt>
   12534:	mov	ip, r0
   12538:	b	12504 <__assert_fail@plt+0xd90>
   1253c:	subs	r3, r0, #0
   12540:	beq	12574 <__assert_fail@plt+0xe00>
   12544:	cmp	r3, #1
   12548:	bne	12560 <__assert_fail@plt+0xdec>
   1254c:	movw	r1, #23612	; 0x5c3c
   12550:	mov	r0, #0
   12554:	movt	r1, #1
   12558:	mov	r2, #5
   1255c:	b	1148c <dcgettext@plt>
   12560:	movw	r1, #23628	; 0x5c4c
   12564:	mov	r0, #0
   12568:	movt	r1, #1
   1256c:	mov	r2, #5
   12570:	b	1148c <dcgettext@plt>
   12574:	movw	r1, #23600	; 0x5c30
   12578:	mov	r2, #5
   1257c:	movt	r1, #1
   12580:	b	1148c <dcgettext@plt>
   12584:	push	{r4, r5, lr}
   12588:	sub	sp, sp, #12
   1258c:	mov	r4, r0
   12590:	bl	114e0 <bfd_get_error@plt>
   12594:	bl	116fc <bfd_errmsg@plt>
   12598:	movw	r3, #29248	; 0x7240
   1259c:	movt	r3, #2
   125a0:	mov	r5, r0
   125a4:	ldr	r0, [r3]
   125a8:	bl	113fc <fflush@plt>
   125ac:	cmp	r4, #0
   125b0:	movw	r1, #29236	; 0x7234
   125b4:	movw	r3, #29344	; 0x72a0
   125b8:	movt	r1, #2
   125bc:	movt	r3, #2
   125c0:	beq	125ec <__assert_fail@plt+0xe78>
   125c4:	str	r4, [sp]
   125c8:	movw	r2, #23648	; 0x5c60
   125cc:	ldr	r0, [r1]
   125d0:	movt	r2, #1
   125d4:	ldr	r3, [r3]
   125d8:	mov	r1, #1
   125dc:	str	r5, [sp, #4]
   125e0:	bl	11654 <__fprintf_chk@plt>
   125e4:	add	sp, sp, #12
   125e8:	pop	{r4, r5, pc}
   125ec:	str	r5, [sp]
   125f0:	movw	r2, #23652	; 0x5c64
   125f4:	ldr	r0, [r1]
   125f8:	movt	r2, #1
   125fc:	ldr	r3, [r3]
   12600:	mov	r1, #1
   12604:	bl	11654 <__fprintf_chk@plt>
   12608:	add	sp, sp, #12
   1260c:	pop	{r4, r5, pc}
   12610:	push	{r3, lr}
   12614:	bl	12584 <__assert_fail@plt+0xe10>
   12618:	mov	r0, #1
   1261c:	bl	116c0 <xexit@plt>
   12620:	movw	ip, #29248	; 0x7240
   12624:	movt	ip, #2
   12628:	push	{r4, r5, r6, lr}
   1262c:	mov	r6, r0
   12630:	ldr	r0, [ip]
   12634:	mov	r5, r1
   12638:	movw	r4, #29236	; 0x7234
   1263c:	bl	113fc <fflush@plt>
   12640:	movt	r4, #2
   12644:	movw	ip, #29344	; 0x72a0
   12648:	movt	ip, #2
   1264c:	mov	r1, #1
   12650:	ldr	r0, [r4]
   12654:	movw	r2, #23660	; 0x5c6c
   12658:	ldr	r3, [ip]
   1265c:	movt	r2, #1
   12660:	bl	11654 <__fprintf_chk@plt>
   12664:	mov	r2, r6
   12668:	mov	r3, r5
   1266c:	ldr	r0, [r4]
   12670:	mov	r1, #1
   12674:	bl	115b8 <__vfprintf_chk@plt>
   12678:	ldr	r1, [r4]
   1267c:	mov	r0, #10
   12680:	pop	{r4, r5, r6, lr}
   12684:	b	114ec <_IO_putc@plt>
   12688:	push	{r0, r1, r2, r3}
   1268c:	movw	r3, #29224	; 0x7228
   12690:	movt	r3, #2
   12694:	push	{lr}		; (str lr, [sp, #-4]!)
   12698:	sub	sp, sp, #12
   1269c:	add	r2, sp, #20
   126a0:	ldr	r3, [r3]
   126a4:	ldr	r0, [sp, #16]
   126a8:	mov	r1, r2
   126ac:	str	r2, [sp]
   126b0:	str	r3, [sp, #4]
   126b4:	bl	12620 <__assert_fail@plt+0xeac>
   126b8:	mov	r0, #1
   126bc:	bl	116c0 <xexit@plt>
   126c0:	push	{r0, r1, r2, r3}
   126c4:	push	{r4, lr}
   126c8:	movw	r4, #29224	; 0x7228
   126cc:	movt	r4, #2
   126d0:	sub	sp, sp, #8
   126d4:	add	r3, sp, #20
   126d8:	ldr	r2, [r4]
   126dc:	mov	r1, r3
   126e0:	ldr	r0, [sp, #16]
   126e4:	str	r3, [sp]
   126e8:	str	r2, [sp, #4]
   126ec:	bl	12620 <__assert_fail@plt+0xeac>
   126f0:	ldr	r2, [sp, #4]
   126f4:	ldr	r3, [r4]
   126f8:	cmp	r2, r3
   126fc:	bne	12710 <__assert_fail@plt+0xf9c>
   12700:	add	sp, sp, #8
   12704:	pop	{r4, lr}
   12708:	add	sp, sp, #16
   1270c:	bx	lr
   12710:	bl	114a4 <__stack_chk_fail@plt>
   12714:	push	{r4, lr}
   12718:	movw	r0, #23668	; 0x5c74
   1271c:	movt	r0, #1
   12720:	bl	11420 <bfd_set_default_target@plt>
   12724:	cmp	r0, #0
   12728:	popne	{r4, pc}
   1272c:	mov	r2, #5
   12730:	movw	r1, #23700	; 0x5c94
   12734:	movt	r1, #1
   12738:	bl	1148c <dcgettext@plt>
   1273c:	mov	r4, r0
   12740:	bl	114e0 <bfd_get_error@plt>
   12744:	bl	116fc <bfd_errmsg@plt>
   12748:	movw	r1, #23668	; 0x5c74
   1274c:	movt	r1, #1
   12750:	mov	r2, r0
   12754:	mov	r0, r4
   12758:	bl	12688 <__assert_fail@plt+0xf14>
   1275c:	movw	r3, #29248	; 0x7240
   12760:	movt	r3, #2
   12764:	push	{r4, r5, r6, lr}
   12768:	mov	r4, r0
   1276c:	movw	r5, #29236	; 0x7234
   12770:	ldr	r0, [r3]
   12774:	movt	r5, #2
   12778:	bl	113fc <fflush@plt>
   1277c:	mov	r2, #5
   12780:	movw	r1, #23744	; 0x5cc0
   12784:	mov	r0, #0
   12788:	movt	r1, #1
   1278c:	ldr	r6, [r5]
   12790:	bl	1148c <dcgettext@plt>
   12794:	movw	r3, #29344	; 0x72a0
   12798:	movt	r3, #2
   1279c:	mov	r1, #1
   127a0:	ldr	r3, [r3]
   127a4:	mov	r2, r0
   127a8:	mov	r0, r6
   127ac:	bl	11654 <__fprintf_chk@plt>
   127b0:	ldr	r3, [r4]
   127b4:	cmp	r3, #0
   127b8:	beq	127dc <__assert_fail@plt+0x1068>
   127bc:	movw	r2, #24144	; 0x5e50
   127c0:	ldr	r0, [r5]
   127c4:	movt	r2, #1
   127c8:	mov	r1, #1
   127cc:	bl	11654 <__fprintf_chk@plt>
   127d0:	ldr	r3, [r4, #4]!
   127d4:	cmp	r3, #0
   127d8:	bne	127bc <__assert_fail@plt+0x1048>
   127dc:	ldr	r1, [r5]
   127e0:	mov	r0, #10
   127e4:	pop	{r4, r5, r6, lr}
   127e8:	b	116b4 <fputc@plt>
   127ec:	push	{r4, r5, r6, lr}
   127f0:	subs	r4, r0, #0
   127f4:	mov	r5, r1
   127f8:	beq	12874 <__assert_fail@plt+0x1100>
   127fc:	mov	r2, #5
   12800:	movw	r1, #23788	; 0x5cec
   12804:	mov	r0, #0
   12808:	movt	r1, #1
   1280c:	bl	1148c <dcgettext@plt>
   12810:	mov	r3, r4
   12814:	mov	r1, #1
   12818:	mov	r2, r0
   1281c:	mov	r0, r5
   12820:	bl	11654 <__fprintf_chk@plt>
   12824:	bl	114d4 <bfd_target_list@plt>
   12828:	ldr	r3, [r0]
   1282c:	mov	r6, r0
   12830:	cmp	r3, #0
   12834:	movne	r4, r0
   12838:	beq	1285c <__assert_fail@plt+0x10e8>
   1283c:	movw	r2, #24144	; 0x5e50
   12840:	mov	r0, r5
   12844:	movt	r2, #1
   12848:	mov	r1, #1
   1284c:	bl	11654 <__fprintf_chk@plt>
   12850:	ldr	r3, [r4, #4]!
   12854:	cmp	r3, #0
   12858:	bne	1283c <__assert_fail@plt+0x10c8>
   1285c:	mov	r1, r5
   12860:	mov	r0, #10
   12864:	bl	116b4 <fputc@plt>
   12868:	mov	r0, r6
   1286c:	pop	{r4, r5, r6, lr}
   12870:	b	1142c <free@plt>
   12874:	mov	r2, #5
   12878:	movw	r1, #23768	; 0x5cd8
   1287c:	movt	r1, #1
   12880:	bl	1148c <dcgettext@plt>
   12884:	mov	r1, #1
   12888:	mov	r2, r0
   1288c:	mov	r0, r5
   12890:	bl	11654 <__fprintf_chk@plt>
   12894:	b	12824 <__assert_fail@plt+0x10b0>
   12898:	push	{r4, r5, r6, lr}
   1289c:	subs	r4, r0, #0
   128a0:	mov	r5, r1
   128a4:	beq	12920 <__assert_fail@plt+0x11ac>
   128a8:	mov	r2, #5
   128ac:	movw	r1, #23840	; 0x5d20
   128b0:	mov	r0, #0
   128b4:	movt	r1, #1
   128b8:	bl	1148c <dcgettext@plt>
   128bc:	mov	r3, r4
   128c0:	mov	r1, #1
   128c4:	mov	r2, r0
   128c8:	mov	r0, r5
   128cc:	bl	11654 <__fprintf_chk@plt>
   128d0:	bl	11408 <bfd_arch_list@plt>
   128d4:	ldr	r3, [r0]
   128d8:	mov	r6, r0
   128dc:	cmp	r3, #0
   128e0:	movne	r4, r0
   128e4:	beq	12908 <__assert_fail@plt+0x1194>
   128e8:	movw	r2, #24144	; 0x5e50
   128ec:	mov	r0, r5
   128f0:	movt	r2, #1
   128f4:	mov	r1, #1
   128f8:	bl	11654 <__fprintf_chk@plt>
   128fc:	ldr	r3, [r4, #4]!
   12900:	cmp	r3, #0
   12904:	bne	128e8 <__assert_fail@plt+0x1174>
   12908:	mov	r1, r5
   1290c:	mov	r0, #10
   12910:	bl	116b4 <fputc@plt>
   12914:	mov	r0, r6
   12918:	pop	{r4, r5, r6, lr}
   1291c:	b	1142c <free@plt>
   12920:	mov	r2, #5
   12924:	movw	r1, #23812	; 0x5d04
   12928:	movt	r1, #1
   1292c:	bl	1148c <dcgettext@plt>
   12930:	mov	r1, #1
   12934:	mov	r2, r0
   12938:	mov	r0, r5
   1293c:	bl	11654 <__fprintf_chk@plt>
   12940:	b	128d0 <__assert_fail@plt+0x115c>
   12944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12948:	mov	r2, #5
   1294c:	sub	sp, sp, #44	; 0x2c
   12950:	movw	r1, #23872	; 0x5d40
   12954:	mov	r0, #0
   12958:	movt	r1, #1
   1295c:	bl	1148c <dcgettext@plt>
   12960:	movw	r2, #23900	; 0x5d5c
   12964:	movt	r2, #1
   12968:	movw	fp, #29240	; 0x7238
   1296c:	movt	fp, #2
   12970:	mov	r1, r0
   12974:	mov	r0, #1
   12978:	bl	11648 <__printf_chk@plt>
   1297c:	mov	r0, #0
   12980:	bl	13eb8 <__assert_fail@plt+0x2744>
   12984:	ldr	r3, [fp]
   12988:	ldr	r4, [r3]
   1298c:	cmp	r4, #0
   12990:	mov	r6, r0
   12994:	beq	12ae4 <__assert_fail@plt+0x1370>
   12998:	mov	r8, #4
   1299c:	mov	r7, #1
   129a0:	ldr	r1, [r4]
   129a4:	mov	r0, r6
   129a8:	bl	11678 <bfd_openw@plt>
   129ac:	mov	r2, #5
   129b0:	movw	r1, #23928	; 0x5d78
   129b4:	movt	r1, #1
   129b8:	mov	r5, r0
   129bc:	mov	r0, #0
   129c0:	bl	1148c <dcgettext@plt>
   129c4:	ldr	sl, [r4]
   129c8:	mov	r1, r0
   129cc:	ldr	r0, [r4, #12]
   129d0:	str	r1, [sp, #8]
   129d4:	bl	1253c <__assert_fail@plt+0xdc8>
   129d8:	mov	r9, r0
   129dc:	ldr	r0, [r4, #8]
   129e0:	bl	1253c <__assert_fail@plt+0xdc8>
   129e4:	ldr	r1, [sp, #8]
   129e8:	mov	r2, sl
   129ec:	mov	r3, r9
   129f0:	str	r0, [sp]
   129f4:	mov	r0, #1
   129f8:	bl	11648 <__printf_chk@plt>
   129fc:	cmp	r5, #0
   12a00:	beq	12ad4 <__assert_fail@plt+0x1360>
   12a04:	mov	r0, r5
   12a08:	mov	r1, #1
   12a0c:	bl	115d0 <bfd_set_format@plt>
   12a10:	subs	r9, r0, #0
   12a14:	movne	r4, #2
   12a18:	bne	12a2c <__assert_fail@plt+0x12b8>
   12a1c:	b	12ab8 <__assert_fail@plt+0x1344>
   12a20:	add	r4, r4, #1
   12a24:	cmp	r4, #92	; 0x5c
   12a28:	beq	12a78 <__assert_fail@plt+0x1304>
   12a2c:	ldr	r3, [r5, #4]
   12a30:	mov	r0, r5
   12a34:	mov	r1, r4
   12a38:	mov	r2, #0
   12a3c:	ldr	r3, [r3, #336]	; 0x150
   12a40:	blx	r3
   12a44:	cmp	r0, #0
   12a48:	beq	12a20 <__assert_fail@plt+0x12ac>
   12a4c:	mov	r0, r4
   12a50:	mov	r1, #0
   12a54:	bl	11618 <bfd_printable_arch_mach@plt>
   12a58:	add	r4, r4, #1
   12a5c:	movw	r1, #23956	; 0x5d94
   12a60:	movt	r1, #1
   12a64:	mov	r2, r0
   12a68:	mov	r0, #1
   12a6c:	bl	11648 <__printf_chk@plt>
   12a70:	cmp	r4, #92	; 0x5c
   12a74:	bne	12a2c <__assert_fail@plt+0x12b8>
   12a78:	mov	r0, r5
   12a7c:	bl	1160c <bfd_close_all_done@plt>
   12a80:	ldr	r3, [fp]
   12a84:	ldr	r4, [r3, r8]
   12a88:	add	r8, r8, #4
   12a8c:	cmp	r4, #0
   12a90:	bne	129a0 <__assert_fail@plt+0x122c>
   12a94:	mov	r0, r6
   12a98:	bl	114b0 <unlink@plt>
   12a9c:	mov	r0, r6
   12aa0:	bl	1142c <free@plt>
   12aa4:	cmp	r7, #0
   12aa8:	moveq	r0, #1
   12aac:	bne	12af0 <__assert_fail@plt+0x137c>
   12ab0:	add	sp, sp, #44	; 0x2c
   12ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ab8:	bl	114e0 <bfd_get_error@plt>
   12abc:	cmp	r0, #5
   12ac0:	beq	12a78 <__assert_fail@plt+0x1304>
   12ac4:	ldr	r0, [r4]
   12ac8:	mov	r7, r9
   12acc:	bl	12584 <__assert_fail@plt+0xe10>
   12ad0:	b	12a78 <__assert_fail@plt+0x1304>
   12ad4:	mov	r0, r6
   12ad8:	mov	r7, r5
   12adc:	bl	12584 <__assert_fail@plt+0xe10>
   12ae0:	b	12a80 <__assert_fail@plt+0x130c>
   12ae4:	bl	114b0 <unlink@plt>
   12ae8:	mov	r0, r6
   12aec:	bl	1142c <free@plt>
   12af0:	movw	r0, #23964	; 0x5d9c
   12af4:	movt	r0, #1
   12af8:	bl	11564 <getenv@plt>
   12afc:	cmp	r0, #0
   12b00:	beq	12e44 <__assert_fail@plt+0x16d0>
   12b04:	mov	r1, #0
   12b08:	mov	r2, #10
   12b0c:	bl	113f0 <strtol@plt>
   12b10:	cmp	r0, #0
   12b14:	str	r0, [sp, #32]
   12b18:	beq	12e44 <__assert_fail@plt+0x16d0>
   12b1c:	movw	sl, #29248	; 0x7240
   12b20:	movt	sl, #2
   12b24:	mov	r3, #1
   12b28:	mov	r2, #0
   12b2c:	str	r3, [sp, #36]	; 0x24
   12b30:	str	r2, [sp, #16]
   12b34:	ldr	r6, [fp]
   12b38:	ldr	r3, [sp, #16]
   12b3c:	ldr	r2, [sp, #16]
   12b40:	lsl	r3, r3, #2
   12b44:	str	r3, [sp, #24]
   12b48:	ldr	r3, [r6, r2, lsl #2]
   12b4c:	cmp	r3, #0
   12b50:	beq	12e30 <__assert_fail@plt+0x16bc>
   12b54:	ldr	r0, [r3]
   12b58:	ldr	r3, [sp, #16]
   12b5c:	add	r9, r3, #1
   12b60:	bl	11600 <strlen@plt>
   12b64:	ldr	r2, [sp, #32]
   12b68:	add	r5, r0, #16
   12b6c:	cmp	r5, r2
   12b70:	bge	12e20 <__assert_fail@plt+0x16ac>
   12b74:	ldr	r2, [sp, #24]
   12b78:	add	r2, r2, #4
   12b7c:	str	r2, [sp, #20]
   12b80:	add	r4, r6, r2
   12b84:	ldr	r3, [r6, r2]
   12b88:	cmp	r3, #0
   12b8c:	beq	12bc0 <__assert_fail@plt+0x144c>
   12b90:	ldr	r6, [sp, #32]
   12b94:	b	12ba8 <__assert_fail@plt+0x1434>
   12b98:	ldr	r3, [r4, #4]!
   12b9c:	add	r9, r9, #1
   12ba0:	cmp	r3, #0
   12ba4:	beq	12bc0 <__assert_fail@plt+0x144c>
   12ba8:	ldr	r0, [r3]
   12bac:	add	r5, r5, #1
   12bb0:	bl	11600 <strlen@plt>
   12bb4:	add	r5, r5, r0
   12bb8:	cmp	r5, r6
   12bbc:	blt	12b98 <__assert_fail@plt+0x1424>
   12bc0:	movw	r1, #23972	; 0x5da4
   12bc4:	movw	r3, #23980	; 0x5dac
   12bc8:	movt	r1, #1
   12bcc:	movt	r3, #1
   12bd0:	mov	r0, #1
   12bd4:	mov	r2, #15
   12bd8:	bl	11648 <__printf_chk@plt>
   12bdc:	ldr	r3, [sp, #16]
   12be0:	cmp	r9, r3
   12be4:	ble	12c3c <__assert_fail@plt+0x14c8>
   12be8:	ldr	r3, [fp]
   12bec:	ldr	r2, [sp, #24]
   12bf0:	ldr	r3, [r3, r2]
   12bf4:	cmp	r3, #0
   12bf8:	beq	12c3c <__assert_fail@plt+0x14c8>
   12bfc:	ldr	r5, [sp, #20]
   12c00:	ldr	r4, [sp, #16]
   12c04:	b	12c1c <__assert_fail@plt+0x14a8>
   12c08:	ldr	r3, [fp]
   12c0c:	ldr	r3, [r3, r5]
   12c10:	add	r5, r5, #4
   12c14:	cmp	r3, #0
   12c18:	beq	12c3c <__assert_fail@plt+0x14c8>
   12c1c:	ldr	r2, [r3]
   12c20:	add	r4, r4, #1
   12c24:	movw	r1, #23984	; 0x5db0
   12c28:	mov	r0, #1
   12c2c:	movt	r1, #1
   12c30:	bl	11648 <__printf_chk@plt>
   12c34:	cmp	r4, r9
   12c38:	bne	12c08 <__assert_fail@plt+0x1494>
   12c3c:	ldr	r1, [sl]
   12c40:	mov	r0, #10
   12c44:	bl	114ec <_IO_putc@plt>
   12c48:	mov	r0, #0
   12c4c:	bl	13eb8 <__assert_fail@plt+0x2744>
   12c50:	mov	r8, #2
   12c54:	mov	r2, #1
   12c58:	str	r2, [sp, #28]
   12c5c:	str	r0, [sp, #12]
   12c60:	b	12c70 <__assert_fail@plt+0x14fc>
   12c64:	add	r8, r8, #1
   12c68:	cmp	r8, #92	; 0x5c
   12c6c:	beq	12dc0 <__assert_fail@plt+0x164c>
   12c70:	mov	r1, #0
   12c74:	mov	r0, r8
   12c78:	bl	11618 <bfd_printable_arch_mach@plt>
   12c7c:	movw	r1, #23988	; 0x5db4
   12c80:	movt	r1, #1
   12c84:	bl	113e4 <strcmp@plt>
   12c88:	cmp	r0, #0
   12c8c:	beq	12c64 <__assert_fail@plt+0x14f0>
   12c90:	mov	r1, #0
   12c94:	mov	r0, r8
   12c98:	bl	11618 <bfd_printable_arch_mach@plt>
   12c9c:	movw	r1, #24000	; 0x5dc0
   12ca0:	mov	r2, #14
   12ca4:	movt	r1, #1
   12ca8:	mov	r3, r0
   12cac:	mov	r0, #1
   12cb0:	bl	11648 <__printf_chk@plt>
   12cb4:	ldr	r3, [sp, #16]
   12cb8:	cmp	r9, r3
   12cbc:	ble	12da8 <__assert_fail@plt+0x1634>
   12cc0:	ldr	r3, [fp]
   12cc4:	ldr	r2, [sp, #24]
   12cc8:	ldr	r4, [r3, r2]
   12ccc:	cmp	r4, #0
   12cd0:	beq	12da8 <__assert_fail@plt+0x1634>
   12cd4:	ldr	r7, [sp, #20]
   12cd8:	ldr	r6, [sp, #16]
   12cdc:	b	12d1c <__assert_fail@plt+0x15a8>
   12ce0:	movw	r1, #23984	; 0x5db0
   12ce4:	ldr	r2, [r4]
   12ce8:	mov	r0, #1
   12cec:	movt	r1, #1
   12cf0:	bl	11648 <__printf_chk@plt>
   12cf4:	mov	r0, r5
   12cf8:	add	r6, r6, #1
   12cfc:	bl	1160c <bfd_close_all_done@plt>
   12d00:	cmp	r6, r9
   12d04:	beq	12da8 <__assert_fail@plt+0x1634>
   12d08:	ldr	r3, [fp]
   12d0c:	ldr	r4, [r3, r7]
   12d10:	add	r7, r7, #4
   12d14:	cmp	r4, #0
   12d18:	beq	12da8 <__assert_fail@plt+0x1634>
   12d1c:	ldr	r0, [sp, #12]
   12d20:	ldr	r1, [r4]
   12d24:	bl	11678 <bfd_openw@plt>
   12d28:	subs	r5, r0, #0
   12d2c:	beq	12e10 <__assert_fail@plt+0x169c>
   12d30:	mov	r1, #1
   12d34:	bl	115d0 <bfd_set_format@plt>
   12d38:	subs	r3, r0, #0
   12d3c:	beq	12dec <__assert_fail@plt+0x1678>
   12d40:	ldr	r3, [r5, #4]
   12d44:	mov	r0, r5
   12d48:	mov	r1, r8
   12d4c:	mov	r2, #0
   12d50:	ldr	r3, [r3, #336]	; 0x150
   12d54:	blx	r3
   12d58:	cmp	r0, #0
   12d5c:	bne	12ce0 <__assert_fail@plt+0x156c>
   12d60:	ldr	r0, [r4]
   12d64:	bl	11600 <strlen@plt>
   12d68:	cmp	r0, #0
   12d6c:	beq	12d88 <__assert_fail@plt+0x1614>
   12d70:	mov	r4, r0
   12d74:	mov	r0, #45	; 0x2d
   12d78:	ldr	r1, [sl]
   12d7c:	bl	114ec <_IO_putc@plt>
   12d80:	subs	r4, r4, #1
   12d84:	bne	12d74 <__assert_fail@plt+0x1600>
   12d88:	mov	r0, #32
   12d8c:	ldr	r1, [sl]
   12d90:	bl	114ec <_IO_putc@plt>
   12d94:	cmp	r5, #0
   12d98:	bne	12cf4 <__assert_fail@plt+0x1580>
   12d9c:	add	r6, r6, #1
   12da0:	cmp	r6, r9
   12da4:	bne	12d08 <__assert_fail@plt+0x1594>
   12da8:	mov	r0, #10
   12dac:	ldr	r1, [sl]
   12db0:	add	r8, r8, #1
   12db4:	bl	114ec <_IO_putc@plt>
   12db8:	cmp	r8, #92	; 0x5c
   12dbc:	bne	12c70 <__assert_fail@plt+0x14fc>
   12dc0:	ldr	r2, [sp, #28]
   12dc4:	ldr	r3, [sp, #36]	; 0x24
   12dc8:	cmp	r2, #0
   12dcc:	ldr	r0, [sp, #12]
   12dd0:	moveq	r3, #0
   12dd4:	str	r3, [sp, #36]	; 0x24
   12dd8:	bl	114b0 <unlink@plt>
   12ddc:	ldr	r0, [sp, #12]
   12de0:	bl	1142c <free@plt>
   12de4:	str	r9, [sp, #16]
   12de8:	b	12b34 <__assert_fail@plt+0x13c0>
   12dec:	str	r3, [sp, #8]
   12df0:	bl	114e0 <bfd_get_error@plt>
   12df4:	ldr	r3, [sp, #8]
   12df8:	cmp	r0, #5
   12dfc:	beq	12d60 <__assert_fail@plt+0x15ec>
   12e00:	ldr	r0, [r4]
   12e04:	str	r3, [sp, #28]
   12e08:	bl	12584 <__assert_fail@plt+0xe10>
   12e0c:	b	12d60 <__assert_fail@plt+0x15ec>
   12e10:	ldr	r0, [r4]
   12e14:	str	r5, [sp, #28]
   12e18:	bl	12584 <__assert_fail@plt+0xe10>
   12e1c:	b	12d60 <__assert_fail@plt+0x15ec>
   12e20:	ldr	r3, [sp, #24]
   12e24:	add	r3, r3, #4
   12e28:	str	r3, [sp, #20]
   12e2c:	b	12bc0 <__assert_fail@plt+0x144c>
   12e30:	ldr	r3, [sp, #36]	; 0x24
   12e34:	rsbs	r0, r3, #1
   12e38:	movcc	r0, #0
   12e3c:	add	sp, sp, #44	; 0x2c
   12e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e44:	mov	r2, #80	; 0x50
   12e48:	str	r2, [sp, #32]
   12e4c:	b	12b1c <__assert_fail@plt+0x13a8>
   12e50:	push	{r4, r5, r6, r7, r8, r9, lr}
   12e54:	movw	r6, #29224	; 0x7228
   12e58:	movt	r6, #2
   12e5c:	sub	sp, sp, #196	; 0xc4
   12e60:	cmp	r2, #0
   12e64:	mov	r8, r0
   12e68:	ldr	r3, [r6]
   12e6c:	mov	r7, r1
   12e70:	str	r3, [sp, #188]	; 0xbc
   12e74:	bne	12ea8 <__assert_fail@plt+0x1734>
   12e78:	ldr	r3, [r7]
   12e7c:	mov	r0, r8
   12e80:	movw	r2, #23656	; 0x5c68
   12e84:	mov	r1, #1
   12e88:	movt	r2, #1
   12e8c:	bl	11654 <__fprintf_chk@plt>
   12e90:	ldr	r2, [sp, #188]	; 0xbc
   12e94:	ldr	r3, [r6]
   12e98:	cmp	r2, r3
   12e9c:	bne	12f80 <__assert_fail@plt+0x180c>
   12ea0:	add	sp, sp, #196	; 0xc4
   12ea4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12ea8:	ldr	r3, [r1, #4]
   12eac:	mov	r0, r1
   12eb0:	add	r1, sp, #32
   12eb4:	ldr	r3, [r3, #252]	; 0xfc
   12eb8:	blx	r3
   12ebc:	cmp	r0, #0
   12ec0:	bne	12e78 <__assert_fail@plt+0x1704>
   12ec4:	ldr	r3, [sp, #112]	; 0x70
   12ec8:	add	r0, sp, #192	; 0xc0
   12ecc:	str	r3, [r0, #-164]!	; 0xffffff5c
   12ed0:	bl	11480 <ctime@plt>
   12ed4:	subs	r3, r0, #0
   12ed8:	beq	12f54 <__assert_fail@plt+0x17e0>
   12edc:	add	r9, sp, #148	; 0x94
   12ee0:	add	r2, r3, #4
   12ee4:	mov	r1, #1
   12ee8:	add	r3, r3, #20
   12eec:	str	r2, [sp]
   12ef0:	mov	r0, r9
   12ef4:	str	r3, [sp, #4]
   12ef8:	mov	r2, #40	; 0x28
   12efc:	movw	r3, #24028	; 0x5ddc
   12f00:	movt	r3, #1
   12f04:	bl	11630 <__sprintf_chk@plt>
   12f08:	ldr	r0, [sp, #48]	; 0x30
   12f0c:	add	r1, sp, #136	; 0x88
   12f10:	bl	1349c <__assert_fail@plt+0x1d28>
   12f14:	ldr	r1, [sp, #56]	; 0x38
   12f18:	ldr	r3, [sp, #60]	; 0x3c
   12f1c:	movw	r2, #24040	; 0x5de8
   12f20:	ldrd	r4, [sp, #80]	; 0x50
   12f24:	movt	r2, #1
   12f28:	str	r1, [sp]
   12f2c:	mov	r0, r8
   12f30:	str	r3, [sp, #4]
   12f34:	mov	r1, #1
   12f38:	str	r9, [sp, #16]
   12f3c:	add	r3, sp, #137	; 0x89
   12f40:	strd	r4, [sp, #8]
   12f44:	mov	ip, #0
   12f48:	strb	ip, [sp, #146]	; 0x92
   12f4c:	bl	11654 <__fprintf_chk@plt>
   12f50:	b	12e78 <__assert_fail@plt+0x1704>
   12f54:	mov	r2, #5
   12f58:	movw	r1, #24008	; 0x5dc8
   12f5c:	movt	r1, #1
   12f60:	add	r9, sp, #148	; 0x94
   12f64:	bl	1148c <dcgettext@plt>
   12f68:	mov	r1, #1
   12f6c:	mov	r2, #40	; 0x28
   12f70:	mov	r3, r0
   12f74:	mov	r0, r9
   12f78:	bl	11630 <__sprintf_chk@plt>
   12f7c:	b	12f08 <__assert_fail@plt+0x1794>
   12f80:	bl	114a4 <__stack_chk_fail@plt>
   12f84:	push	{r4, lr}
   12f88:	bl	124c4 <__assert_fail@plt+0xd50>
   12f8c:	mov	r4, r0
   12f90:	bl	11570 <mkstemp64@plt>
   12f94:	cmn	r0, #1
   12f98:	beq	12fa8 <__assert_fail@plt+0x1834>
   12f9c:	bl	11768 <close@plt>
   12fa0:	mov	r0, r4
   12fa4:	pop	{r4, pc}
   12fa8:	mov	r0, r4
   12fac:	bl	1142c <free@plt>
   12fb0:	mov	r0, #0
   12fb4:	pop	{r4, pc}
   12fb8:	push	{r3, lr}
   12fbc:	bl	124c4 <__assert_fail@plt+0xd50>
   12fc0:	pop	{r3, lr}
   12fc4:	b	116d8 <mkdtemp@plt>
   12fc8:	push	{r4, r5, r6, lr}
   12fcc:	movw	r4, #29224	; 0x7228
   12fd0:	movt	r4, #2
   12fd4:	sub	sp, sp, #8
   12fd8:	mov	r6, r1
   12fdc:	mov	r2, #0
   12fe0:	ldr	r3, [r4]
   12fe4:	mov	r1, sp
   12fe8:	mov	r5, r0
   12fec:	str	r3, [sp, #4]
   12ff0:	bl	113d8 <bfd_scan_vma@plt>
   12ff4:	ldr	r3, [sp]
   12ff8:	ldrb	r3, [r3]
   12ffc:	cmp	r3, #0
   13000:	bne	13020 <__assert_fail@plt+0x18ac>
   13004:	ldr	r2, [sp, #4]
   13008:	ldr	r3, [r4]
   1300c:	cmp	r2, r3
   13010:	bne	1301c <__assert_fail@plt+0x18a8>
   13014:	add	sp, sp, #8
   13018:	pop	{r4, r5, r6, pc}
   1301c:	bl	114a4 <__stack_chk_fail@plt>
   13020:	mov	r2, #5
   13024:	movw	r1, #24064	; 0x5e00
   13028:	mov	r0, #0
   1302c:	movt	r1, #1
   13030:	bl	1148c <dcgettext@plt>
   13034:	mov	r1, r6
   13038:	mov	r2, r5
   1303c:	bl	12688 <__assert_fail@plt+0xf14>
   13040:	push	{r4, r5, r6, r7, lr}
   13044:	movw	r4, #29224	; 0x7228
   13048:	movt	r4, #2
   1304c:	sub	sp, sp, #116	; 0x74
   13050:	mov	r1, r0
   13054:	mov	r5, r0
   13058:	ldr	r3, [r4]
   1305c:	mov	r2, sp
   13060:	mov	r0, #3
   13064:	str	r3, [sp, #108]	; 0x6c
   13068:	bl	11744 <__xstat64@plt>
   1306c:	cmp	r0, #0
   13070:	blt	130c0 <__assert_fail@plt+0x194c>
   13074:	ldr	r3, [sp, #16]
   13078:	and	r3, r3, #61440	; 0xf000
   1307c:	cmp	r3, #32768	; 0x8000
   13080:	bne	1311c <__assert_fail@plt+0x19a8>
   13084:	ldrd	r2, [sp, #48]	; 0x30
   13088:	cmp	r2, #0
   1308c:	sbcs	r1, r3, #0
   13090:	movwlt	r1, #24188	; 0x5e7c
   13094:	movlt	r0, #0
   13098:	movtlt	r1, #1
   1309c:	blt	13128 <__assert_fail@plt+0x19b4>
   130a0:	mov	r0, r2
   130a4:	mov	r1, r3
   130a8:	ldr	r2, [sp, #108]	; 0x6c
   130ac:	ldr	r3, [r4]
   130b0:	cmp	r2, r3
   130b4:	bne	13144 <__assert_fail@plt+0x19d0>
   130b8:	add	sp, sp, #116	; 0x74
   130bc:	pop	{r4, r5, r6, r7, pc}
   130c0:	bl	11624 <__errno_location@plt>
   130c4:	ldr	r3, [r0]
   130c8:	mov	r6, r0
   130cc:	cmp	r3, #2
   130d0:	movweq	r1, #24084	; 0x5e14
   130d4:	moveq	r0, #0
   130d8:	movteq	r1, #1
   130dc:	beq	13128 <__assert_fail@plt+0x19b4>
   130e0:	mov	r2, #5
   130e4:	movw	r1, #24104	; 0x5e28
   130e8:	mov	r0, #0
   130ec:	movt	r1, #1
   130f0:	bl	1148c <dcgettext@plt>
   130f4:	mov	r7, r0
   130f8:	ldr	r0, [r6]
   130fc:	bl	115ac <strerror@plt>
   13100:	mov	r1, r5
   13104:	mov	r2, r0
   13108:	mov	r0, r7
   1310c:	bl	126c0 <__assert_fail@plt+0xf4c>
   13110:	mvn	r0, #0
   13114:	mov	r1, r0
   13118:	b	130a8 <__assert_fail@plt+0x1934>
   1311c:	movw	r1, #24148	; 0x5e54
   13120:	movt	r1, #1
   13124:	mov	r0, #0
   13128:	mov	r2, #5
   1312c:	bl	1148c <dcgettext@plt>
   13130:	mov	r1, r5
   13134:	bl	126c0 <__assert_fail@plt+0xf4c>
   13138:	mvn	r0, #0
   1313c:	mov	r1, r0
   13140:	b	130a8 <__assert_fail@plt+0x1934>
   13144:	bl	114a4 <__stack_chk_fail@plt>
   13148:	push	{r4, r5, r6, r7, r8, lr}
   1314c:	subs	r5, r0, #0
   13150:	sub	sp, sp, #8
   13154:	beq	13228 <__assert_fail@plt+0x1ab4>
   13158:	ldr	r3, [r5, #148]	; 0x94
   1315c:	cmp	r3, #0
   13160:	beq	13208 <__assert_fail@plt+0x1a94>
   13164:	ldrb	r2, [r3, #44]	; 0x2c
   13168:	tst	r2, #1
   1316c:	bne	13208 <__assert_fail@plt+0x1a94>
   13170:	ldr	r6, [r3]
   13174:	movw	r4, #29332	; 0x7294
   13178:	movt	r4, #2
   1317c:	mov	r0, r6
   13180:	bl	11600 <strlen@plt>
   13184:	ldr	r8, [r5]
   13188:	mov	r7, r0
   1318c:	mov	r0, r8
   13190:	bl	11600 <strlen@plt>
   13194:	ldr	r3, [r4]
   13198:	add	r0, r7, r0
   1319c:	add	r7, r0, #3
   131a0:	cmp	r7, r3
   131a4:	bls	13214 <__assert_fail@plt+0x1aa0>
   131a8:	cmp	r3, #0
   131ac:	bne	1321c <__assert_fail@plt+0x1aa8>
   131b0:	add	r0, r7, r7, lsr #1
   131b4:	mov	r1, #0
   131b8:	str	r0, [r4]
   131bc:	bl	11498 <bfd_malloc@plt>
   131c0:	movw	r6, #29332	; 0x7294
   131c4:	movt	r6, #2
   131c8:	cmp	r0, #0
   131cc:	str	r0, [r4, #4]
   131d0:	beq	13204 <__assert_fail@plt+0x1a90>
   131d4:	ldr	r3, [r5, #148]	; 0x94
   131d8:	ldr	r8, [r5]
   131dc:	ldr	r6, [r3]
   131e0:	stm	sp, {r6, r8}
   131e4:	mov	r1, #1
   131e8:	mvn	r2, #0
   131ec:	movw	r3, #24280	; 0x5ed8
   131f0:	movt	r3, #1
   131f4:	bl	11630 <__sprintf_chk@plt>
   131f8:	ldr	r0, [r4, #4]
   131fc:	add	sp, sp, #8
   13200:	pop	{r4, r5, r6, r7, r8, pc}
   13204:	str	r0, [r6]
   13208:	ldr	r0, [r5]
   1320c:	add	sp, sp, #8
   13210:	pop	{r4, r5, r6, r7, r8, pc}
   13214:	ldr	r0, [r4, #4]
   13218:	b	131e0 <__assert_fail@plt+0x1a6c>
   1321c:	ldr	r0, [r4, #4]
   13220:	bl	1142c <free@plt>
   13224:	b	131b0 <__assert_fail@plt+0x1a3c>
   13228:	movw	r0, #24248	; 0x5eb8
   1322c:	movw	r1, #24268	; 0x5ecc
   13230:	movw	r3, #23560	; 0x5c08
   13234:	movt	r0, #1
   13238:	movt	r1, #1
   1323c:	movw	r2, #606	; 0x25e
   13240:	movt	r3, #1
   13244:	bl	11774 <__assert_fail@plt>
   13248:	push	{r3}		; (str r3, [sp, #-4]!)
   1324c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13250:	movw	r5, #29224	; 0x7228
   13254:	movt	r5, #2
   13258:	sub	sp, sp, #20
   1325c:	mov	sl, r1
   13260:	mov	r8, r2
   13264:	ldr	r3, [r5]
   13268:	mov	r6, r0
   1326c:	ldr	r7, [sp, #52]	; 0x34
   13270:	movw	r4, #29236	; 0x7234
   13274:	movt	r4, #2
   13278:	str	r3, [sp, #12]
   1327c:	bl	114e0 <bfd_get_error@plt>
   13280:	bl	116fc <bfd_errmsg@plt>
   13284:	movw	ip, #29248	; 0x7240
   13288:	movt	ip, #2
   1328c:	mov	r9, r0
   13290:	ldr	r0, [ip]
   13294:	bl	113fc <fflush@plt>
   13298:	movw	ip, #29344	; 0x72a0
   1329c:	movt	ip, #2
   132a0:	ldr	r1, [r4]
   132a4:	add	r3, sp, #56	; 0x38
   132a8:	str	r3, [sp, #8]
   132ac:	ldr	r0, [ip]
   132b0:	bl	11750 <fputs@plt>
   132b4:	cmp	sl, #0
   132b8:	beq	13360 <__assert_fail@plt+0x1bec>
   132bc:	cmp	r6, #0
   132c0:	beq	1337c <__assert_fail@plt+0x1c08>
   132c4:	cmp	r8, #0
   132c8:	beq	13360 <__assert_fail@plt+0x1bec>
   132cc:	ldr	r2, [r8]
   132d0:	cmp	r2, #0
   132d4:	beq	13360 <__assert_fail@plt+0x1bec>
   132d8:	str	r2, [sp]
   132dc:	mov	r3, r6
   132e0:	movw	r2, #24288	; 0x5ee0
   132e4:	ldr	r0, [r4]
   132e8:	mov	r1, #1
   132ec:	movt	r2, #1
   132f0:	bl	11654 <__fprintf_chk@plt>
   132f4:	cmp	r7, #0
   132f8:	beq	13328 <__assert_fail@plt+0x1bb4>
   132fc:	mov	r1, #1
   13300:	mov	r2, #2
   13304:	ldr	r3, [r4]
   13308:	movw	r0, #23376	; 0x5b50
   1330c:	movt	r0, #1
   13310:	bl	114f8 <fwrite@plt>
   13314:	mov	r2, r7
   13318:	ldr	r0, [r4]
   1331c:	mov	r1, #1
   13320:	ldr	r3, [sp, #8]
   13324:	bl	115b8 <__vfprintf_chk@plt>
   13328:	mov	r3, r9
   1332c:	ldr	r0, [r4]
   13330:	movw	r2, #24300	; 0x5eec
   13334:	mov	r1, #1
   13338:	movt	r2, #1
   1333c:	bl	11654 <__fprintf_chk@plt>
   13340:	ldr	r2, [sp, #12]
   13344:	ldr	r3, [r5]
   13348:	cmp	r2, r3
   1334c:	bne	1338c <__assert_fail@plt+0x1c18>
   13350:	add	sp, sp, #20
   13354:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13358:	add	sp, sp, #4
   1335c:	bx	lr
   13360:	mov	r3, r6
   13364:	movw	r2, #24296	; 0x5ee8
   13368:	ldr	r0, [r4]
   1336c:	movt	r2, #1
   13370:	mov	r1, #1
   13374:	bl	11654 <__fprintf_chk@plt>
   13378:	b	132f4 <__assert_fail@plt+0x1b80>
   1337c:	mov	r0, sl
   13380:	bl	13148 <__assert_fail@plt+0x19d4>
   13384:	mov	r6, r0
   13388:	b	132c4 <__assert_fail@plt+0x1b50>
   1338c:	bl	114a4 <__stack_chk_fail@plt>
   13390:	ldrb	r3, [r0]
   13394:	cmp	r3, #47	; 0x2f
   13398:	beq	1342c <__assert_fail@plt+0x1cb8>
   1339c:	cmp	r3, #0
   133a0:	beq	133fc <__assert_fail@plt+0x1c88>
   133a4:	cmp	r3, #46	; 0x2e
   133a8:	beq	13404 <__assert_fail@plt+0x1c90>
   133ac:	cmp	r3, #0
   133b0:	cmpne	r3, #47	; 0x2f
   133b4:	beq	133d4 <__assert_fail@plt+0x1c60>
   133b8:	add	r2, r0, #1
   133bc:	mov	r0, r2
   133c0:	add	r2, r2, #1
   133c4:	ldrb	r3, [r0]
   133c8:	cmp	r3, #47	; 0x2f
   133cc:	cmpne	r3, #0
   133d0:	bne	133bc <__assert_fail@plt+0x1c48>
   133d4:	cmp	r3, #47	; 0x2f
   133d8:	bne	1339c <__assert_fail@plt+0x1c28>
   133dc:	add	r2, r0, #1
   133e0:	mov	r0, r2
   133e4:	add	r2, r2, #1
   133e8:	ldrb	r3, [r0]
   133ec:	cmp	r3, #47	; 0x2f
   133f0:	beq	133e0 <__assert_fail@plt+0x1c6c>
   133f4:	cmp	r3, #0
   133f8:	bne	133a4 <__assert_fail@plt+0x1c30>
   133fc:	mov	r0, #1
   13400:	bx	lr
   13404:	ldrb	r3, [r0, #1]
   13408:	cmp	r3, #46	; 0x2e
   1340c:	addne	r0, r0, #1
   13410:	bne	133ac <__assert_fail@plt+0x1c38>
   13414:	ldrb	r3, [r0, #2]
   13418:	add	r0, r0, #2
   1341c:	cmp	r3, #0
   13420:	beq	1342c <__assert_fail@plt+0x1cb8>
   13424:	cmp	r3, #47	; 0x2f
   13428:	bne	133b8 <__assert_fail@plt+0x1c44>
   1342c:	mov	r0, #0
   13430:	bx	lr
   13434:	push	{r3, lr}
   13438:	mov	r2, r0
   1343c:	movw	r1, #24308	; 0x5ef4
   13440:	movw	r3, #23900	; 0x5d5c
   13444:	movt	r1, #1
   13448:	movt	r3, #1
   1344c:	mov	r0, #1
   13450:	bl	11648 <__printf_chk@plt>
   13454:	mov	r2, #5
   13458:	movw	r1, #24320	; 0x5f00
   1345c:	mov	r0, #0
   13460:	movt	r1, #1
   13464:	bl	1148c <dcgettext@plt>
   13468:	mov	r1, r0
   1346c:	mov	r0, #1
   13470:	bl	11648 <__printf_chk@plt>
   13474:	mov	r2, #5
   13478:	movw	r1, #24372	; 0x5f34
   1347c:	mov	r0, #0
   13480:	movt	r1, #1
   13484:	bl	1148c <dcgettext@plt>
   13488:	mov	r1, r0
   1348c:	mov	r0, #1
   13490:	bl	11648 <__printf_chk@plt>
   13494:	mov	r0, #0
   13498:	bl	115e8 <exit@plt>
   1349c:	and	r3, r0, #61440	; 0xf000
   134a0:	cmp	r3, #16384	; 0x4000
   134a4:	moveq	r3, #100	; 0x64
   134a8:	beq	134e8 <__assert_fail@plt+0x1d74>
   134ac:	cmp	r3, #40960	; 0xa000
   134b0:	moveq	r3, #108	; 0x6c
   134b4:	beq	134e8 <__assert_fail@plt+0x1d74>
   134b8:	cmp	r3, #24576	; 0x6000
   134bc:	moveq	r3, #98	; 0x62
   134c0:	beq	134e8 <__assert_fail@plt+0x1d74>
   134c4:	cmp	r3, #8192	; 0x2000
   134c8:	moveq	r3, #99	; 0x63
   134cc:	beq	134e8 <__assert_fail@plt+0x1d74>
   134d0:	cmp	r3, #49152	; 0xc000
   134d4:	moveq	r3, #115	; 0x73
   134d8:	beq	134e8 <__assert_fail@plt+0x1d74>
   134dc:	cmp	r3, #4096	; 0x1000
   134e0:	movne	r3, #45	; 0x2d
   134e4:	moveq	r3, #112	; 0x70
   134e8:	tst	r0, #256	; 0x100
   134ec:	strb	r3, [r1]
   134f0:	moveq	r3, #45	; 0x2d
   134f4:	movne	r3, #114	; 0x72
   134f8:	tst	r0, #128	; 0x80
   134fc:	strb	r3, [r1, #1]
   13500:	moveq	r3, #45	; 0x2d
   13504:	movne	r3, #119	; 0x77
   13508:	tst	r0, #64	; 0x40
   1350c:	strb	r3, [r1, #2]
   13510:	moveq	ip, #45	; 0x2d
   13514:	movne	ip, #120	; 0x78
   13518:	tst	r0, #32
   1351c:	strb	ip, [r1, #3]
   13520:	moveq	r3, #45	; 0x2d
   13524:	movne	r3, #114	; 0x72
   13528:	tst	r0, #16
   1352c:	strb	r3, [r1, #4]
   13530:	moveq	r3, #45	; 0x2d
   13534:	movne	r3, #119	; 0x77
   13538:	tst	r0, #8
   1353c:	strb	r3, [r1, #5]
   13540:	moveq	r2, #45	; 0x2d
   13544:	movne	r2, #120	; 0x78
   13548:	tst	r0, #4
   1354c:	strb	r2, [r1, #6]
   13550:	moveq	r3, #45	; 0x2d
   13554:	movne	r3, #114	; 0x72
   13558:	tst	r0, #2
   1355c:	strb	r3, [r1, #7]
   13560:	moveq	r3, #45	; 0x2d
   13564:	movne	r3, #119	; 0x77
   13568:	tst	r0, #1
   1356c:	strb	r3, [r1, #8]
   13570:	moveq	r3, #45	; 0x2d
   13574:	movne	r3, #120	; 0x78
   13578:	tst	r0, #2048	; 0x800
   1357c:	strb	r3, [r1, #9]
   13580:	beq	13594 <__assert_fail@plt+0x1e20>
   13584:	cmp	ip, #120	; 0x78
   13588:	movne	ip, #83	; 0x53
   1358c:	moveq	ip, #115	; 0x73
   13590:	strb	ip, [r1, #3]
   13594:	tst	r0, #1024	; 0x400
   13598:	beq	135ac <__assert_fail@plt+0x1e38>
   1359c:	cmp	r2, #120	; 0x78
   135a0:	movne	r2, #83	; 0x53
   135a4:	moveq	r2, #115	; 0x73
   135a8:	strb	r2, [r1, #6]
   135ac:	tst	r0, #512	; 0x200
   135b0:	bxeq	lr
   135b4:	cmp	r3, #120	; 0x78
   135b8:	movne	r3, #84	; 0x54
   135bc:	moveq	r3, #116	; 0x74
   135c0:	strb	r3, [r1, #9]
   135c4:	bx	lr
   135c8:	push	{r3, r4, r5, r6, r7, lr}
   135cc:	subs	r4, r0, #0
   135d0:	beq	13654 <__assert_fail@plt+0x1ee0>
   135d4:	ldr	r3, [r4]
   135d8:	cmp	r3, #0
   135dc:	beq	13644 <__assert_fail@plt+0x1ed0>
   135e0:	mov	r2, r4
   135e4:	mov	r3, #0
   135e8:	ldr	r1, [r2, #4]!
   135ec:	add	r3, r3, #1
   135f0:	cmp	r1, #0
   135f4:	bne	135e8 <__assert_fail@plt+0x1e74>
   135f8:	add	r3, r3, #1
   135fc:	lsl	r0, r3, #2
   13600:	bl	11504 <xmalloc@plt>
   13604:	mov	r6, r0
   13608:	ldr	r0, [r4]
   1360c:	cmp	r0, #0
   13610:	beq	1364c <__assert_fail@plt+0x1ed8>
   13614:	rsb	r7, r4, #4
   13618:	mov	r5, #0
   1361c:	bl	1151c <xstrdup@plt>
   13620:	str	r0, [r6, r5]
   13624:	add	r5, r7, r4
   13628:	ldr	r0, [r4, #4]!
   1362c:	cmp	r0, #0
   13630:	bne	1361c <__assert_fail@plt+0x1ea8>
   13634:	mov	r3, #0
   13638:	mov	r0, r6
   1363c:	str	r3, [r6, r5]
   13640:	pop	{r3, r4, r5, r6, r7, pc}
   13644:	mov	r0, #4
   13648:	b	13600 <__assert_fail@plt+0x1e8c>
   1364c:	mov	r5, r0
   13650:	b	13634 <__assert_fail@plt+0x1ec0>
   13654:	mov	r0, r4
   13658:	pop	{r3, r4, r5, r6, r7, pc}
   1365c:	push	{r3, r4, r5, lr}
   13660:	subs	r5, r0, #0
   13664:	popeq	{r3, r4, r5, pc}
   13668:	ldr	r0, [r5]
   1366c:	cmp	r0, #0
   13670:	movne	r4, r5
   13674:	beq	13688 <__assert_fail@plt+0x1f14>
   13678:	bl	1142c <free@plt>
   1367c:	ldr	r0, [r4, #4]!
   13680:	cmp	r0, #0
   13684:	bne	13678 <__assert_fail@plt+0x1f04>
   13688:	mov	r0, r5
   1368c:	pop	{r3, r4, r5, lr}
   13690:	b	1142c <free@plt>
   13694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13698:	subs	r4, r0, #0
   1369c:	ldr	r5, [pc, #536]	; 138bc <__assert_fail@plt+0x2148>
   136a0:	sub	sp, sp, #12
   136a4:	add	r5, pc, r5
   136a8:	beq	138b4 <__assert_fail@plt+0x2140>
   136ac:	bl	11600 <strlen@plt>
   136b0:	mov	r9, #0
   136b4:	mov	r7, r9
   136b8:	mov	r8, r9
   136bc:	mov	r6, r9
   136c0:	mov	fp, r9
   136c4:	mov	sl, r9
   136c8:	add	r0, r0, #1
   136cc:	bl	11504 <xmalloc@plt>
   136d0:	ldr	r3, [pc, #488]	; 138c0 <__assert_fail@plt+0x214c>
   136d4:	str	r0, [sp]
   136d8:	ldr	r5, [r5, r3]
   136dc:	ldrb	r3, [r4]
   136e0:	lsl	r3, r3, #1
   136e4:	ldrh	r3, [r5, r3]
   136e8:	tst	r3, #64	; 0x40
   136ec:	beq	13710 <__assert_fail@plt+0x1f9c>
   136f0:	mov	r3, r4
   136f4:	ldrb	r2, [r3, #1]
   136f8:	add	r4, r3, #1
   136fc:	mov	r3, r4
   13700:	lsl	r2, r2, #1
   13704:	ldrh	r2, [r5, r2]
   13708:	tst	r2, #64	; 0x40
   1370c:	bne	136f4 <__assert_fail@plt+0x1f80>
   13710:	cmp	r7, #0
   13714:	beq	1372c <__assert_fail@plt+0x1fb8>
   13718:	sub	r3, r7, #1
   1371c:	cmp	r9, r3
   13720:	addlt	r3, r8, r9, lsl #2
   13724:	strlt	r3, [sp, #4]
   13728:	blt	13758 <__assert_fail@plt+0x1fe4>
   1372c:	cmp	r8, #0
   13730:	beq	138a0 <__assert_fail@plt+0x212c>
   13734:	lsl	r7, r7, #1
   13738:	mov	r0, r8
   1373c:	lsl	r1, r7, #2
   13740:	bl	114bc <xrealloc@plt>
   13744:	mov	r8, r0
   13748:	add	r3, r8, r9, lsl #2
   1374c:	str	r3, [sp, #4]
   13750:	mov	r3, #0
   13754:	str	r3, [r8, r9, lsl #2]
   13758:	ldrb	r3, [r4]
   1375c:	cmp	r3, #0
   13760:	beq	13818 <__assert_fail@plt+0x20a4>
   13764:	mov	r2, r4
   13768:	ldr	lr, [sp]
   1376c:	b	13790 <__assert_fail@plt+0x201c>
   13770:	strb	r3, [lr]
   13774:	add	lr, lr, #1
   13778:	mov	r6, #0
   1377c:	ldrb	r3, [r2, #1]
   13780:	add	r2, r2, #1
   13784:	cmp	r3, #0
   13788:	mov	r4, r2
   1378c:	beq	1381c <__assert_fail@plt+0x20a8>
   13790:	lsl	r1, r3, #1
   13794:	mov	r4, r2
   13798:	ldrh	r1, [r5, r1]
   1379c:	tst	r1, #64	; 0x40
   137a0:	beq	137b0 <__assert_fail@plt+0x203c>
   137a4:	orr	r0, r6, fp
   137a8:	orrs	r0, r0, sl
   137ac:	beq	13894 <__assert_fail@plt+0x2120>
   137b0:	cmp	r6, #0
   137b4:	bne	13770 <__assert_fail@plt+0x1ffc>
   137b8:	cmp	r3, #92	; 0x5c
   137bc:	moveq	r6, #1
   137c0:	beq	1377c <__assert_fail@plt+0x2008>
   137c4:	cmp	sl, #0
   137c8:	beq	137e4 <__assert_fail@plt+0x2070>
   137cc:	cmp	r3, #39	; 0x27
   137d0:	moveq	sl, r6
   137d4:	beq	1377c <__assert_fail@plt+0x2008>
   137d8:	strb	r3, [lr]
   137dc:	add	lr, lr, #1
   137e0:	b	1377c <__assert_fail@plt+0x2008>
   137e4:	cmp	fp, #0
   137e8:	beq	137fc <__assert_fail@plt+0x2088>
   137ec:	cmp	r3, #34	; 0x22
   137f0:	moveq	fp, sl
   137f4:	bne	137d8 <__assert_fail@plt+0x2064>
   137f8:	b	1377c <__assert_fail@plt+0x2008>
   137fc:	cmp	r3, #39	; 0x27
   13800:	moveq	sl, #1
   13804:	beq	1377c <__assert_fail@plt+0x2008>
   13808:	cmp	r3, #34	; 0x22
   1380c:	moveq	fp, #1
   13810:	bne	137d8 <__assert_fail@plt+0x2064>
   13814:	b	1377c <__assert_fail@plt+0x2008>
   13818:	ldr	lr, [sp]
   1381c:	mov	r3, #0
   13820:	ldr	r0, [sp]
   13824:	strb	r3, [lr]
   13828:	add	r9, r9, #1
   1382c:	bl	1151c <xstrdup@plt>
   13830:	ldr	r3, [sp, #4]
   13834:	str	r0, [r3]
   13838:	mov	r3, #0
   1383c:	str	r3, [r8, r9, lsl #2]
   13840:	ldrb	r2, [r4]
   13844:	lsl	r3, r2, #1
   13848:	ldrh	r3, [r5, r3]
   1384c:	tst	r3, #64	; 0x40
   13850:	beq	13874 <__assert_fail@plt+0x2100>
   13854:	mov	r3, r4
   13858:	ldrb	r2, [r3, #1]
   1385c:	add	r4, r3, #1
   13860:	mov	r3, r4
   13864:	lsl	r1, r2, #1
   13868:	ldrh	r1, [r5, r1]
   1386c:	tst	r1, #64	; 0x40
   13870:	bne	13858 <__assert_fail@plt+0x20e4>
   13874:	cmp	r2, #0
   13878:	bne	136dc <__assert_fail@plt+0x1f68>
   1387c:	ldr	r0, [sp]
   13880:	mov	r9, r8
   13884:	bl	1142c <free@plt>
   13888:	mov	r0, r9
   1388c:	add	sp, sp, #12
   13890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13894:	mov	r6, r0
   13898:	mov	sl, r0
   1389c:	b	1381c <__assert_fail@plt+0x20a8>
   138a0:	mov	r0, #32
   138a4:	mov	r7, #8
   138a8:	bl	11504 <xmalloc@plt>
   138ac:	mov	r8, r0
   138b0:	b	13748 <__assert_fail@plt+0x1fd4>
   138b4:	mov	r9, r4
   138b8:	b	13888 <__assert_fail@plt+0x2114>
   138bc:	andeq	r3, r1, r4, asr r9
   138c0:	andeq	r0, r0, r8, asr #2
   138c4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   138c8:	subs	r5, r1, #0
   138cc:	ldr	r8, [pc, #180]	; 13988 <__assert_fail@plt+0x2214>
   138d0:	add	r8, pc, r8
   138d4:	beq	13958 <__assert_fail@plt+0x21e4>
   138d8:	ldr	r6, [r0]
   138dc:	cmp	r6, #0
   138e0:	movne	r9, r0
   138e4:	beq	13980 <__assert_fail@plt+0x220c>
   138e8:	ldrb	r4, [r6]
   138ec:	cmp	r4, #0
   138f0:	beq	13960 <__assert_fail@plt+0x21ec>
   138f4:	ldr	r3, [pc, #144]	; 1398c <__assert_fail@plt+0x2218>
   138f8:	ldr	r7, [r8, r3]
   138fc:	b	13928 <__assert_fail@plt+0x21b4>
   13900:	cmp	r4, #34	; 0x22
   13904:	beq	1394c <__assert_fail@plt+0x21d8>
   13908:	mov	r0, r4
   1390c:	mov	r1, r5
   13910:	bl	116b4 <fputc@plt>
   13914:	cmn	r0, #1
   13918:	beq	13958 <__assert_fail@plt+0x21e4>
   1391c:	ldrb	r4, [r6, #1]!
   13920:	cmp	r4, #0
   13924:	beq	13960 <__assert_fail@plt+0x21ec>
   13928:	lsl	r3, r4, #1
   1392c:	mov	r1, r5
   13930:	mov	r0, #92	; 0x5c
   13934:	ldrh	r3, [r7, r3]
   13938:	tst	r3, #64	; 0x40
   1393c:	bne	1394c <__assert_fail@plt+0x21d8>
   13940:	cmp	r4, #39	; 0x27
   13944:	cmpne	r4, r0
   13948:	bne	13900 <__assert_fail@plt+0x218c>
   1394c:	bl	116b4 <fputc@plt>
   13950:	cmn	r0, #1
   13954:	bne	13908 <__assert_fail@plt+0x2194>
   13958:	mov	r0, #1
   1395c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13960:	mov	r0, #10
   13964:	mov	r1, r5
   13968:	bl	116b4 <fputc@plt>
   1396c:	cmn	r0, #1
   13970:	beq	13958 <__assert_fail@plt+0x21e4>
   13974:	ldr	r6, [r9, #4]!
   13978:	cmp	r6, #0
   1397c:	bne	138e8 <__assert_fail@plt+0x2174>
   13980:	mov	r0, #0
   13984:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13988:	andeq	r3, r1, r8, lsr #14
   1398c:	andeq	r0, r0, r8, asr #2
   13990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13994:	sub	sp, sp, #28
   13998:	ldr	ip, [pc, #684]	; 13c4c <__assert_fail@plt+0x24d8>
   1399c:	mov	r6, r1
   139a0:	mov	sl, r0
   139a4:	mov	r5, #0
   139a8:	add	ip, pc, ip
   139ac:	str	ip, [sp, #12]
   139b0:	ldr	ip, [pc, #664]	; 13c50 <__assert_fail@plt+0x24dc>
   139b4:	mov	r8, #2000	; 0x7d0
   139b8:	ldr	r1, [r0]
   139bc:	add	ip, pc, ip
   139c0:	mov	fp, ip
   139c4:	b	139cc <__assert_fail@plt+0x2258>
   139c8:	mov	r5, r4
   139cc:	add	r4, r5, #1
   139d0:	cmp	r4, r1
   139d4:	bge	13bc8 <__assert_fail@plt+0x2454>
   139d8:	ldr	r3, [r6]
   139dc:	lsl	r7, r4, #2
   139e0:	ldr	r0, [r3, r4, lsl #2]
   139e4:	ldrb	r2, [r0]
   139e8:	cmp	r2, #64	; 0x40
   139ec:	bne	139c8 <__assert_fail@plt+0x2254>
   139f0:	subs	r8, r8, #1
   139f4:	beq	13c20 <__assert_fail@plt+0x24ac>
   139f8:	add	r0, r0, #1
   139fc:	mov	r1, fp
   13a00:	bl	116f0 <fopen64@plt>
   13a04:	subs	r9, r0, #0
   13a08:	beq	13bc0 <__assert_fail@plt+0x244c>
   13a0c:	mov	r1, #0
   13a10:	mov	r2, #2
   13a14:	bl	11738 <fseek@plt>
   13a18:	cmn	r0, #1
   13a1c:	beq	13bb8 <__assert_fail@plt+0x2444>
   13a20:	mov	r0, r9
   13a24:	bl	11474 <ftell@plt>
   13a28:	cmn	r0, #1
   13a2c:	mov	ip, r0
   13a30:	beq	13bb8 <__assert_fail@plt+0x2444>
   13a34:	mov	r1, #0
   13a38:	mov	r0, r9
   13a3c:	mov	r2, r1
   13a40:	str	ip, [sp, #4]
   13a44:	bl	11738 <fseek@plt>
   13a48:	ldr	ip, [sp, #4]
   13a4c:	cmn	r0, #1
   13a50:	beq	13bb8 <__assert_fail@plt+0x2444>
   13a54:	add	r0, ip, #1
   13a58:	bl	11504 <xmalloc@plt>
   13a5c:	ldr	ip, [sp, #4]
   13a60:	mov	r3, r9
   13a64:	mov	r1, #1
   13a68:	mov	r2, ip
   13a6c:	str	r0, [sp, #16]
   13a70:	bl	11534 <fread@plt>
   13a74:	ldr	ip, [sp, #4]
   13a78:	cmp	ip, r0
   13a7c:	mov	r3, r0
   13a80:	beq	13a9c <__assert_fail@plt+0x2328>
   13a84:	mov	r0, r9
   13a88:	str	r3, [sp, #8]
   13a8c:	bl	11444 <ferror@plt>
   13a90:	ldr	r3, [sp, #8]
   13a94:	cmp	r0, #0
   13a98:	bne	13bb8 <__assert_fail@plt+0x2444>
   13a9c:	ldr	ip, [sp, #16]
   13aa0:	mov	r0, #0
   13aa4:	strb	r0, [ip, r3]
   13aa8:	ldrb	r3, [ip]
   13aac:	cmp	r3, #0
   13ab0:	beq	13af4 <__assert_fail@plt+0x2380>
   13ab4:	ldr	r2, [pc, #408]	; 13c54 <__assert_fail@plt+0x24e0>
   13ab8:	lsl	r3, r3, #1
   13abc:	ldr	ip, [sp, #12]
   13ac0:	ldr	r1, [ip, r2]
   13ac4:	ldrh	r3, [r1, r3]
   13ac8:	tst	r3, #64	; 0x40
   13acc:	beq	13bd0 <__assert_fail@plt+0x245c>
   13ad0:	ldr	r2, [sp, #16]
   13ad4:	b	13ae8 <__assert_fail@plt+0x2374>
   13ad8:	lsl	r3, r3, #1
   13adc:	ldrh	r3, [r1, r3]
   13ae0:	tst	r3, #64	; 0x40
   13ae4:	beq	13bd0 <__assert_fail@plt+0x245c>
   13ae8:	ldrb	r3, [r2, #1]!
   13aec:	cmp	r3, #0
   13af0:	bne	13ad8 <__assert_fail@plt+0x2364>
   13af4:	mov	r0, #4
   13af8:	mov	ip, #0
   13afc:	str	ip, [sp, #4]
   13b00:	bl	11504 <xmalloc@plt>
   13b04:	ldr	ip, [sp, #4]
   13b08:	mov	r1, #0
   13b0c:	str	r0, [sp, #20]
   13b10:	str	r1, [r0]
   13b14:	ldr	r0, [r6]
   13b18:	str	ip, [sp, #8]
   13b1c:	bl	135c8 <__assert_fail@plt+0x1e54>
   13b20:	ldr	r3, [sp, #8]
   13b24:	ldr	ip, [sp, #4]
   13b28:	str	r0, [r6]
   13b2c:	ldr	r1, [sl]
   13b30:	str	ip, [sp, #4]
   13b34:	add	r1, r1, #1
   13b38:	str	r3, [sp, #8]
   13b3c:	add	r1, r1, r3
   13b40:	lsl	r1, r1, #2
   13b44:	bl	114bc <xrealloc@plt>
   13b48:	ldr	r3, [sp, #8]
   13b4c:	ldr	r2, [sl]
   13b50:	add	lr, r7, #4
   13b54:	rsb	r2, r4, r2
   13b58:	lsl	r2, r2, #2
   13b5c:	mov	r1, r0
   13b60:	add	r0, r3, r4
   13b64:	str	r1, [r6]
   13b68:	mov	r4, r5
   13b6c:	add	r0, r1, r0, lsl #2
   13b70:	add	r1, r1, lr
   13b74:	str	r3, [sp, #8]
   13b78:	bl	11414 <memmove@plt>
   13b7c:	ldr	ip, [sp, #4]
   13b80:	ldr	r0, [r6]
   13b84:	ldr	r1, [sp, #20]
   13b88:	mov	r2, ip
   13b8c:	add	r0, r0, r7
   13b90:	bl	1145c <memcpy@plt>
   13b94:	ldr	r2, [sl]
   13b98:	ldr	r3, [sp, #8]
   13b9c:	sub	r2, r2, #1
   13ba0:	ldr	r0, [sp, #20]
   13ba4:	add	r3, r2, r3
   13ba8:	str	r3, [sl]
   13bac:	bl	1142c <free@plt>
   13bb0:	ldr	r0, [sp, #16]
   13bb4:	bl	1142c <free@plt>
   13bb8:	mov	r0, r9
   13bbc:	bl	1166c <fclose@plt>
   13bc0:	ldr	r1, [sl]
   13bc4:	b	139c8 <__assert_fail@plt+0x2254>
   13bc8:	add	sp, sp, #28
   13bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bd0:	ldr	r0, [sp, #16]
   13bd4:	bl	13694 <__assert_fail@plt+0x1f20>
   13bd8:	ldr	ip, [r0]
   13bdc:	str	r0, [sp, #20]
   13be0:	ldr	r0, [r6]
   13be4:	str	ip, [sp, #4]
   13be8:	bl	135c8 <__assert_fail@plt+0x1e54>
   13bec:	ldr	ip, [sp, #4]
   13bf0:	cmp	ip, #0
   13bf4:	moveq	r3, ip
   13bf8:	str	r0, [r6]
   13bfc:	beq	13b2c <__assert_fail@plt+0x23b8>
   13c00:	ldr	r2, [sp, #20]
   13c04:	mov	r3, #0
   13c08:	ldr	r1, [r2, #4]!
   13c0c:	add	r3, r3, #1
   13c10:	cmp	r1, #0
   13c14:	lsl	ip, r3, #2
   13c18:	bne	13c08 <__assert_fail@plt+0x2494>
   13c1c:	b	13b2c <__assert_fail@plt+0x23b8>
   13c20:	ldr	ip, [sp, #12]
   13c24:	mov	r1, #1
   13c28:	ldr	r0, [pc, #40]	; 13c58 <__assert_fail@plt+0x24e4>
   13c2c:	ldr	r2, [pc, #40]	; 13c5c <__assert_fail@plt+0x24e8>
   13c30:	ldr	r3, [r3]
   13c34:	ldr	r0, [ip, r0]
   13c38:	add	r2, pc, r2
   13c3c:	ldr	r0, [r0]
   13c40:	bl	11654 <__fprintf_chk@plt>
   13c44:	mov	r0, #1
   13c48:	bl	116c0 <xexit@plt>
   13c4c:	andeq	r3, r1, r0, asr r6
   13c50:	andeq	r2, r0, r0, ror #12
   13c54:	andeq	r0, r0, r8, asr #2
   13c58:	andeq	r0, r0, ip, asr #2
   13c5c:			; <UNDEFINED> instruction: 0x000023b8
   13c60:	subs	r3, r0, #0
   13c64:	beq	13c8c <__assert_fail@plt+0x2518>
   13c68:	ldr	r0, [r3]
   13c6c:	cmp	r0, #0
   13c70:	bxeq	lr
   13c74:	mov	r0, #0
   13c78:	ldr	r2, [r3, #4]!
   13c7c:	add	r0, r0, #1
   13c80:	cmp	r2, #0
   13c84:	bne	13c78 <__assert_fail@plt+0x2504>
   13c88:	bx	lr
   13c8c:	mov	r0, r3
   13c90:	bx	lr
   13c94:	ldr	r3, [pc, #488]	; 13e84 <__assert_fail@plt+0x2710>
   13c98:	push	{r4, r5, r6, lr}
   13c9c:	ldr	r0, [pc, r3]
   13ca0:	cmp	r0, #0
   13ca4:	popne	{r4, r5, r6, pc}
   13ca8:	ldr	r0, [pc, #472]	; 13e88 <__assert_fail@plt+0x2714>
   13cac:	add	r0, pc, r0
   13cb0:	bl	11564 <getenv@plt>
   13cb4:	subs	r4, r0, #0
   13cb8:	beq	13d30 <__assert_fail@plt+0x25bc>
   13cbc:	mov	r1, #7
   13cc0:	bl	11660 <access@plt>
   13cc4:	cmp	r0, #0
   13cc8:	bne	13d6c <__assert_fail@plt+0x25f8>
   13ccc:	ldr	r0, [pc, #440]	; 13e8c <__assert_fail@plt+0x2718>
   13cd0:	add	r0, pc, r0
   13cd4:	bl	11564 <getenv@plt>
   13cd8:	ldr	r0, [pc, #432]	; 13e90 <__assert_fail@plt+0x271c>
   13cdc:	add	r0, pc, r0
   13ce0:	bl	11564 <getenv@plt>
   13ce4:	mov	r0, r4
   13ce8:	bl	11600 <strlen@plt>
   13cec:	mov	r3, r0
   13cf0:	mov	r5, r0
   13cf4:	add	r6, r3, #1
   13cf8:	add	r0, r0, #2
   13cfc:	bl	11504 <xmalloc@plt>
   13d00:	mov	r1, r4
   13d04:	bl	11528 <strcpy@plt>
   13d08:	ldr	r2, [pc, #388]	; 13e94 <__assert_fail@plt+0x2720>
   13d0c:	mov	r1, #0
   13d10:	add	r2, pc, r2
   13d14:	mov	r3, r0
   13d18:	mov	r0, #47	; 0x2f
   13d1c:	str	r3, [r2]
   13d20:	strb	r0, [r3, r5]
   13d24:	mov	r0, r3
   13d28:	strb	r1, [r3, r6]
   13d2c:	pop	{r4, r5, r6, pc}
   13d30:	ldr	r0, [pc, #352]	; 13e98 <__assert_fail@plt+0x2724>
   13d34:	add	r0, pc, r0
   13d38:	bl	11564 <getenv@plt>
   13d3c:	mov	r4, r0
   13d40:	cmp	r4, #0
   13d44:	beq	13d80 <__assert_fail@plt+0x260c>
   13d48:	mov	r0, r4
   13d4c:	mov	r1, #7
   13d50:	bl	11660 <access@plt>
   13d54:	cmp	r0, #0
   13d58:	bne	13e10 <__assert_fail@plt+0x269c>
   13d5c:	ldr	r0, [pc, #312]	; 13e9c <__assert_fail@plt+0x2728>
   13d60:	add	r0, pc, r0
   13d64:	bl	11564 <getenv@plt>
   13d68:	b	13ce4 <__assert_fail@plt+0x2570>
   13d6c:	ldr	r0, [pc, #300]	; 13ea0 <__assert_fail@plt+0x272c>
   13d70:	add	r0, pc, r0
   13d74:	bl	11564 <getenv@plt>
   13d78:	mov	r4, r0
   13d7c:	b	13d40 <__assert_fail@plt+0x25cc>
   13d80:	ldr	r0, [pc, #284]	; 13ea4 <__assert_fail@plt+0x2730>
   13d84:	add	r0, pc, r0
   13d88:	bl	11564 <getenv@plt>
   13d8c:	mov	r4, r0
   13d90:	cmp	r4, #0
   13d94:	beq	13dac <__assert_fail@plt+0x2638>
   13d98:	mov	r0, r4
   13d9c:	mov	r1, #7
   13da0:	bl	11660 <access@plt>
   13da4:	cmp	r0, #0
   13da8:	beq	13ce4 <__assert_fail@plt+0x2570>
   13dac:	ldr	r4, [pc, #244]	; 13ea8 <__assert_fail@plt+0x2734>
   13db0:	mov	r1, #7
   13db4:	add	r4, pc, r4
   13db8:	mov	r0, r4
   13dbc:	bl	11660 <access@plt>
   13dc0:	cmp	r0, #0
   13dc4:	moveq	r6, #5
   13dc8:	moveq	r0, #6
   13dcc:	moveq	r5, #4
   13dd0:	beq	13cfc <__assert_fail@plt+0x2588>
   13dd4:	ldr	r5, [pc, #208]	; 13eac <__assert_fail@plt+0x2738>
   13dd8:	mov	r1, #7
   13ddc:	add	r5, pc, r5
   13de0:	add	r4, r5, #8
   13de4:	mov	r0, r4
   13de8:	bl	11660 <access@plt>
   13dec:	cmp	r0, #0
   13df0:	bne	13e24 <__assert_fail@plt+0x26b0>
   13df4:	mov	r0, r4
   13df8:	bl	11600 <strlen@plt>
   13dfc:	mov	r6, r0
   13e00:	mov	r5, r0
   13e04:	add	r6, r6, #1
   13e08:	add	r0, r0, #2
   13e0c:	b	13cfc <__assert_fail@plt+0x2588>
   13e10:	ldr	r0, [pc, #152]	; 13eb0 <__assert_fail@plt+0x273c>
   13e14:	add	r0, pc, r0
   13e18:	bl	11564 <getenv@plt>
   13e1c:	mov	r4, r0
   13e20:	b	13d90 <__assert_fail@plt+0x261c>
   13e24:	add	r4, r5, #20
   13e28:	mov	r1, #7
   13e2c:	mov	r0, r4
   13e30:	bl	11660 <access@plt>
   13e34:	cmp	r0, #0
   13e38:	beq	13df4 <__assert_fail@plt+0x2680>
   13e3c:	mov	r0, r5
   13e40:	mov	r1, #7
   13e44:	bl	11660 <access@plt>
   13e48:	cmp	r0, #0
   13e4c:	bne	13e6c <__assert_fail@plt+0x26f8>
   13e50:	mov	r0, r5
   13e54:	mov	r4, r5
   13e58:	bl	11600 <strlen@plt>
   13e5c:	mov	r5, r0
   13e60:	add	r0, r0, #2
   13e64:	add	r6, r5, #1
   13e68:	b	13cfc <__assert_fail@plt+0x2588>
   13e6c:	ldr	r4, [pc, #64]	; 13eb4 <__assert_fail@plt+0x2740>
   13e70:	mov	r6, #2
   13e74:	mov	r0, #3
   13e78:	mov	r5, #1
   13e7c:	add	r4, pc, r4
   13e80:	b	13cfc <__assert_fail@plt+0x2588>
   13e84:	strdeq	r3, [r1], -r8
   13e88:	andeq	r2, r0, r0, lsr #7
   13e8c:	andeq	r2, r0, r4, lsl #7
   13e90:	andeq	r2, r0, ip, ror r3
   13e94:	andeq	r3, r1, r4, lsl #11
   13e98:	andeq	r2, r0, r0, lsr #6
   13e9c:	strdeq	r2, [r0], -r8
   13ea0:	andeq	r2, r0, r4, ror #5
   13ea4:	ldrdeq	r2, [r0], -r4
   13ea8:	muleq	r0, r0, r2
   13eac:	andeq	r2, r0, r4, asr #4
   13eb0:	andeq	r2, r0, r4, asr #4
   13eb4:	andeq	r2, r0, r4, asr #3
   13eb8:	push	{r4, r5, r6, r7, r8, r9, lr}
   13ebc:	sub	sp, sp, #12
   13ec0:	mov	r6, r0
   13ec4:	bl	13c94 <__assert_fail@plt+0x2520>
   13ec8:	ldr	r9, [pc, #236]	; 13fbc <__assert_fail@plt+0x2848>
   13ecc:	cmp	r6, #0
   13ed0:	add	r9, pc, r9
   13ed4:	mov	r7, r0
   13ed8:	beq	13f6c <__assert_fail@plt+0x27f8>
   13edc:	mov	r0, r6
   13ee0:	bl	11600 <strlen@plt>
   13ee4:	mov	r8, r0
   13ee8:	mov	r4, r0
   13eec:	mov	r0, r7
   13ef0:	bl	11600 <strlen@plt>
   13ef4:	mov	r5, r0
   13ef8:	add	r0, r0, r4
   13efc:	add	r0, r0, #9
   13f00:	bl	11504 <xmalloc@plt>
   13f04:	mov	r1, r7
   13f08:	mov	r4, r0
   13f0c:	bl	11528 <strcpy@plt>
   13f10:	ldr	r2, [pc, #168]	; 13fc0 <__assert_fail@plt+0x284c>
   13f14:	add	r3, r4, r5
   13f18:	add	ip, r5, #8
   13f1c:	add	r2, pc, r2
   13f20:	ldm	r2!, {r0, r1}
   13f24:	ldrb	r2, [r2]
   13f28:	str	r0, [r4, r5]
   13f2c:	add	r0, r4, ip
   13f30:	str	r1, [r3, #4]
   13f34:	mov	r1, r6
   13f38:	strb	r2, [r3, #8]
   13f3c:	bl	11528 <strcpy@plt>
   13f40:	mov	r0, r4
   13f44:	mov	r1, r8
   13f48:	bl	11558 <mkstemps64@plt>
   13f4c:	cmn	r0, #1
   13f50:	beq	13f80 <__assert_fail@plt+0x280c>
   13f54:	bl	11768 <close@plt>
   13f58:	cmp	r0, #0
   13f5c:	bne	13fb8 <__assert_fail@plt+0x2844>
   13f60:	mov	r0, r4
   13f64:	add	sp, sp, #12
   13f68:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f6c:	mov	r8, r6
   13f70:	ldr	r6, [pc, #76]	; 13fc4 <__assert_fail@plt+0x2850>
   13f74:	mov	r4, r8
   13f78:	add	r6, pc, r6
   13f7c:	b	13eec <__assert_fail@plt+0x2778>
   13f80:	ldr	r3, [pc, #64]	; 13fc8 <__assert_fail@plt+0x2854>
   13f84:	ldr	r3, [r9, r3]
   13f88:	ldr	r4, [r3]
   13f8c:	bl	11624 <__errno_location@plt>
   13f90:	ldr	r0, [r0]
   13f94:	bl	115ac <strerror@plt>
   13f98:	ldr	r2, [pc, #44]	; 13fcc <__assert_fail@plt+0x2858>
   13f9c:	mov	r3, r7
   13fa0:	mov	r1, #1
   13fa4:	add	r2, pc, r2
   13fa8:	str	r0, [sp]
   13fac:	mov	r0, r4
   13fb0:	bl	11654 <__fprintf_chk@plt>
   13fb4:	bl	1175c <abort@plt>
   13fb8:	bl	1175c <abort@plt>
   13fbc:	andeq	r3, r1, r8, lsr #2
   13fc0:	andeq	r2, r0, r4, asr #2
   13fc4:	ldrdeq	r1, [r0], -ip
   13fc8:	andeq	r0, r0, ip, asr #2
   13fcc:	andeq	r2, r0, r8, asr #1
   13fd0:	ldr	r3, [r0]
   13fd4:	tst	r3, #1073741824	; 0x40000000
   13fd8:	orrne	r3, r3, #-2147483648	; 0x80000000
   13fdc:	biceq	r3, r3, #-2147483648	; 0x80000000
   13fe0:	add	r0, r0, r3
   13fe4:	bx	lr
   13fe8:	cmp	r1, #0
   13fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ff0:	mov	r6, r0
   13ff4:	sub	sp, sp, #12
   13ff8:	mov	r9, r2
   13ffc:	beq	14080 <__assert_fail@plt+0x290c>
   14000:	sub	r1, r1, #1
   14004:	mov	r7, #0
   14008:	str	r1, [sp, #4]
   1400c:	mov	r8, r1
   14010:	add	r4, r7, r8
   14014:	add	r4, r4, r4, lsr #31
   14018:	asr	r4, r4, #1
   1401c:	lsl	r5, r4, #3
   14020:	add	fp, r6, r5
   14024:	mov	r0, fp
   14028:	bl	13fd0 <__assert_fail@plt+0x285c>
   1402c:	ldr	r3, [sp, #4]
   14030:	cmp	r3, r4
   14034:	mov	sl, r0
   14038:	add	r0, r5, #8
   1403c:	add	r0, r6, r0
   14040:	beq	14090 <__assert_fail@plt+0x291c>
   14044:	bl	13fd0 <__assert_fail@plt+0x285c>
   14048:	cmp	sl, r9
   1404c:	sub	r0, r0, #1
   14050:	bls	14070 <__assert_fail@plt+0x28fc>
   14054:	cmp	r4, r7
   14058:	sub	r8, r4, #1
   1405c:	bne	14010 <__assert_fail@plt+0x289c>
   14060:	mov	fp, #0
   14064:	mov	r0, fp
   14068:	add	sp, sp, #12
   1406c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14070:	cmp	r0, r9
   14074:	add	r7, r4, #1
   14078:	bcc	14010 <__assert_fail@plt+0x289c>
   1407c:	b	14064 <__assert_fail@plt+0x28f0>
   14080:	mov	fp, r1
   14084:	mov	r0, fp
   14088:	add	sp, sp, #12
   1408c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14090:	cmp	sl, r9
   14094:	bhi	14054 <__assert_fail@plt+0x28e0>
   14098:	b	14064 <__assert_fail@plt+0x28f0>
   1409c:	cmp	r0, #1
   140a0:	beq	140d4 <__assert_fail@plt+0x2960>
   140a4:	cmp	r0, #2
   140a8:	beq	140c8 <__assert_fail@plt+0x2954>
   140ac:	cmp	r0, #0
   140b0:	beq	140bc <__assert_fail@plt+0x2948>
   140b4:	mov	r0, #0
   140b8:	bx	lr
   140bc:	ldr	r0, [pc, #28]	; 140e0 <__assert_fail@plt+0x296c>
   140c0:	add	r0, pc, r0
   140c4:	bx	lr
   140c8:	ldr	r0, [pc, #20]	; 140e4 <__assert_fail@plt+0x2970>
   140cc:	add	r0, pc, r0
   140d0:	bx	lr
   140d4:	ldr	r0, [pc, #12]	; 140e8 <__assert_fail@plt+0x2974>
   140d8:	add	r0, pc, r0
   140dc:	bx	lr
   140e0:	andeq	r0, r0, r0, lsl #23
   140e4:	andeq	r0, r0, r4, lsl #23
   140e8:	andeq	r0, r0, r0, ror fp
   140ec:	ldr	r3, [pc, #276]	; 14208 <__assert_fail@plt+0x2a94>
   140f0:	ldr	r2, [pc, #276]	; 1420c <__assert_fail@plt+0x2a98>
   140f4:	add	r3, pc, r3
   140f8:	push	{r4, r5, lr}
   140fc:	mov	r4, r0
   14100:	ldr	r2, [r3, r2]
   14104:	sub	sp, sp, #12
   14108:	sub	r5, r1, #2
   1410c:	cmp	r2, #0
   14110:	beq	141e8 <__assert_fail@plt+0x2a74>
   14114:	mov	r0, r5
   14118:	add	r1, sp, #4
   1411c:	bl	1157c <__gnu_Unwind_Find_exidx@plt>
   14120:	cmp	r0, #0
   14124:	beq	141b4 <__assert_fail@plt+0x2a40>
   14128:	mov	r2, r5
   1412c:	ldr	r1, [sp, #4]
   14130:	bl	13fe8 <__assert_fail@plt+0x2874>
   14134:	subs	r5, r0, #0
   14138:	beq	141b4 <__assert_fail@plt+0x2a40>
   1413c:	bl	13fd0 <__assert_fail@plt+0x285c>
   14140:	ldr	r3, [r5, #4]
   14144:	cmp	r3, #1
   14148:	str	r0, [r4, #72]	; 0x48
   1414c:	beq	1419c <__assert_fail@plt+0x2a28>
   14150:	cmp	r3, #0
   14154:	add	r0, r5, #4
   14158:	strlt	r0, [r4, #76]	; 0x4c
   1415c:	movlt	r3, #1
   14160:	strlt	r3, [r4, #80]	; 0x50
   14164:	blt	14178 <__assert_fail@plt+0x2a04>
   14168:	bl	13fd0 <__assert_fail@plt+0x285c>
   1416c:	mov	r3, #0
   14170:	str	r3, [r4, #80]	; 0x50
   14174:	str	r0, [r4, #76]	; 0x4c
   14178:	ldr	r3, [r0]
   1417c:	cmp	r3, #0
   14180:	blt	141cc <__assert_fail@plt+0x2a58>
   14184:	bl	13fd0 <__assert_fail@plt+0x285c>
   14188:	mov	r3, #0
   1418c:	str	r0, [r4, #16]
   14190:	mov	r0, r3
   14194:	add	sp, sp, #12
   14198:	pop	{r4, r5, pc}
   1419c:	mov	r3, #5
   141a0:	mov	r2, #0
   141a4:	mov	r0, r3
   141a8:	str	r2, [r4, #16]
   141ac:	add	sp, sp, #12
   141b0:	pop	{r4, r5, pc}
   141b4:	mov	r3, #9
   141b8:	mov	r2, #0
   141bc:	mov	r0, r3
   141c0:	str	r2, [r4, #16]
   141c4:	add	sp, sp, #12
   141c8:	pop	{r4, r5, pc}
   141cc:	ubfx	r0, r3, #24, #4
   141d0:	bl	1409c <__assert_fail@plt+0x2928>
   141d4:	cmp	r0, #0
   141d8:	str	r0, [r4, #16]
   141dc:	moveq	r3, #9
   141e0:	movne	r3, #0
   141e4:	b	14190 <__assert_fail@plt+0x2a1c>
   141e8:	ldr	r2, [pc, #32]	; 14210 <__assert_fail@plt+0x2a9c>
   141ec:	ldr	r1, [pc, #32]	; 14214 <__assert_fail@plt+0x2aa0>
   141f0:	ldr	r2, [r3, r2]
   141f4:	ldr	r0, [r3, r1]
   141f8:	rsb	r3, r0, r2
   141fc:	asr	r3, r3, #3
   14200:	str	r3, [sp, #4]
   14204:	b	14128 <__assert_fail@plt+0x29b4>
   14208:	andeq	r2, r1, r4, lsl #30
   1420c:	andeq	r0, r0, r0, asr r1
   14210:	andeq	r0, r0, r4, asr r1
   14214:	andeq	r0, r0, ip, asr r1
   14218:	ldr	r3, [r0]
   1421c:	push	{r4, lr}
   14220:	tst	r3, #1
   14224:	mov	r4, r0
   14228:	bne	14240 <__assert_fail@plt+0x2acc>
   1422c:	tst	r3, #2
   14230:	add	r0, r0, #72	; 0x48
   14234:	beq	14264 <__assert_fail@plt+0x2af0>
   14238:	bl	15010 <__assert_fail@plt+0x389c>
   1423c:	ldr	r3, [r4]
   14240:	tst	r3, #4
   14244:	beq	14274 <__assert_fail@plt+0x2b00>
   14248:	tst	r3, #8
   1424c:	beq	14288 <__assert_fail@plt+0x2b14>
   14250:	tst	r3, #16
   14254:	popne	{r4, pc}
   14258:	add	r0, r4, #464	; 0x1d0
   1425c:	pop	{r4, lr}
   14260:	b	150b8 <__assert_fail@plt+0x3944>
   14264:	bl	15000 <__assert_fail@plt+0x388c>
   14268:	ldr	r3, [r4]
   1426c:	tst	r3, #4
   14270:	bne	14248 <__assert_fail@plt+0x2ad4>
   14274:	add	r0, r4, #208	; 0xd0
   14278:	bl	15020 <__assert_fail@plt+0x38ac>
   1427c:	ldr	r3, [r4]
   14280:	tst	r3, #8
   14284:	bne	14250 <__assert_fail@plt+0x2adc>
   14288:	add	r0, r4, #336	; 0x150
   1428c:	bl	15030 <__assert_fail@plt+0x38bc>
   14290:	ldr	r3, [r4]
   14294:	tst	r3, #16
   14298:	popne	{r4, pc}
   1429c:	b	14258 <__assert_fail@plt+0x2ae4>
   142a0:	ldr	r3, [r0]
   142a4:	cmp	r3, #0
   142a8:	ldrne	r0, [r3, r0]
   142ac:	moveq	r0, r3
   142b0:	bx	lr
   142b4:	mov	r0, #9
   142b8:	bx	lr
   142bc:	nop	{0}
   142c0:	bx	lr
   142c4:	push	{r4, r5, r6, lr}
   142c8:	mov	r4, r0
   142cc:	mov	r5, r1
   142d0:	b	142f8 <__assert_fail@plt+0x2b84>
   142d4:	ldr	ip, [r5, #64]	; 0x40
   142d8:	mov	r0, #1
   142dc:	ldr	r3, [r4, #16]
   142e0:	mov	r1, r4
   142e4:	mov	r2, r5
   142e8:	str	ip, [r4, #20]
   142ec:	blx	r3
   142f0:	cmp	r0, #8
   142f4:	bne	14310 <__assert_fail@plt+0x2b9c>
   142f8:	mov	r0, r4
   142fc:	ldr	r1, [r5, #64]	; 0x40
   14300:	bl	140ec <__assert_fail@plt+0x2978>
   14304:	subs	r6, r0, #0
   14308:	beq	142d4 <__assert_fail@plt+0x2b60>
   1430c:	bl	1175c <abort@plt>
   14310:	cmp	r0, #7
   14314:	bne	1430c <__assert_fail@plt+0x2b98>
   14318:	mov	r0, r6
   1431c:	ldr	r1, [r5, #64]	; 0x40
   14320:	bl	142bc <__assert_fail@plt+0x2b48>
   14324:	add	r0, r5, #4
   14328:	bl	14fec <__assert_fail@plt+0x3878>
   1432c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14330:	add	r5, r1, #4
   14334:	sub	sp, sp, #980	; 0x3d4
   14338:	mov	r4, r0
   1433c:	mov	ip, r2
   14340:	add	r3, sp, #20
   14344:	str	r3, [sp, #12]
   14348:	add	lr, sp, #20
   1434c:	ldm	r5!, {r0, r1, r2, r3}
   14350:	cmp	ip, #0
   14354:	ldr	r9, [r4, #12]
   14358:	mov	r8, #0
   1435c:	ldr	sl, [r4, #24]
   14360:	movne	fp, #10
   14364:	moveq	fp, #9
   14368:	add	r6, sp, #16
   1436c:	stmia	lr!, {r0, r1, r2, r3}
   14370:	add	r7, sp, #496	; 0x1f0
   14374:	ldm	r5!, {r0, r1, r2, r3}
   14378:	stmia	lr!, {r0, r1, r2, r3}
   1437c:	ldm	r5!, {r0, r1, r2, r3}
   14380:	stmia	lr!, {r0, r1, r2, r3}
   14384:	ldm	r5, {r0, r1, r2, r3}
   14388:	stm	lr, {r0, r1, r2, r3}
   1438c:	mov	r0, r4
   14390:	ldr	r1, [sp, #80]	; 0x50
   14394:	str	r8, [sp, #16]
   14398:	bl	140ec <__assert_fail@plt+0x2978>
   1439c:	mov	r5, r0
   143a0:	cmp	r5, #0
   143a4:	beq	143e0 <__assert_fail@plt+0x2c6c>
   143a8:	ldr	r0, [sp, #72]	; 0x48
   143ac:	mov	r2, r4
   143b0:	str	r6, [sp]
   143b4:	orr	r1, fp, #16
   143b8:	str	sl, [sp, #4]
   143bc:	mov	r3, r4
   143c0:	str	r0, [sp, #84]	; 0x54
   143c4:	mov	r0, #1
   143c8:	blx	r9
   143cc:	cmp	r0, #0
   143d0:	bne	14474 <__assert_fail@plt+0x2d00>
   143d4:	mov	r0, r5
   143d8:	add	sp, sp, #980	; 0x3d4
   143dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143e0:	ldr	r3, [sp, #80]	; 0x50
   143e4:	mov	r1, r6
   143e8:	mov	r2, #480	; 0x1e0
   143ec:	mov	r0, r7
   143f0:	str	r3, [r4, #20]
   143f4:	bl	1145c <memcpy@plt>
   143f8:	ldr	r3, [r4, #16]
   143fc:	mov	r1, r4
   14400:	mov	r2, r7
   14404:	mov	r0, fp
   14408:	blx	r3
   1440c:	ldr	r3, [sp, #552]	; 0x228
   14410:	mov	r1, fp
   14414:	str	r6, [sp]
   14418:	str	sl, [sp, #4]
   1441c:	mov	r2, r4
   14420:	str	r3, [sp, #84]	; 0x54
   14424:	mov	r3, r4
   14428:	mov	r8, r0
   1442c:	mov	r0, #1
   14430:	blx	r9
   14434:	cmp	r0, #0
   14438:	bne	14474 <__assert_fail@plt+0x2d00>
   1443c:	mov	r0, r6
   14440:	mov	r1, r7
   14444:	mov	r2, #480	; 0x1e0
   14448:	bl	1145c <memcpy@plt>
   1444c:	cmp	r8, #8
   14450:	bne	1446c <__assert_fail@plt+0x2cf8>
   14454:	mov	r0, r4
   14458:	ldr	r1, [sp, #80]	; 0x50
   1445c:	bl	140ec <__assert_fail@plt+0x2978>
   14460:	mov	fp, #9
   14464:	mov	r5, r0
   14468:	b	143a0 <__assert_fail@plt+0x2c2c>
   1446c:	cmp	r8, #7
   14470:	beq	14480 <__assert_fail@plt+0x2d0c>
   14474:	mov	r0, #9
   14478:	add	sp, sp, #980	; 0x3d4
   1447c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14480:	mov	r0, r5
   14484:	ldr	r1, [sp, #80]	; 0x50
   14488:	bl	142bc <__assert_fail@plt+0x2b48>
   1448c:	add	r0, sp, #20
   14490:	bl	14fec <__assert_fail@plt+0x3878>
   14494:	ldr	r0, [r0, #68]	; 0x44
   14498:	bx	lr
   1449c:	ldr	r3, [r1, #60]	; 0x3c
   144a0:	push	{r4, r5, r6, r7, lr}
   144a4:	add	lr, r1, #4
   144a8:	str	r3, [r1, #64]	; 0x40
   144ac:	mov	r7, r1
   144b0:	mov	r4, r0
   144b4:	sub	sp, sp, #484	; 0x1e4
   144b8:	ldm	lr!, {r0, r1, r2, r3}
   144bc:	add	ip, sp, #4
   144c0:	add	r6, sp, #480	; 0x1e0
   144c4:	mvn	r5, #0
   144c8:	stmia	ip!, {r0, r1, r2, r3}
   144cc:	ldm	lr!, {r0, r1, r2, r3}
   144d0:	stmia	ip!, {r0, r1, r2, r3}
   144d4:	ldm	lr!, {r0, r1, r2, r3}
   144d8:	stmia	ip!, {r0, r1, r2, r3}
   144dc:	ldm	lr, {r0, r1, r2, r3}
   144e0:	stm	ip, {r0, r1, r2, r3}
   144e4:	str	r5, [r6, #-480]!	; 0xfffffe20
   144e8:	b	14508 <__assert_fail@plt+0x2d94>
   144ec:	ldr	r3, [r4, #16]
   144f0:	mov	r1, r4
   144f4:	mov	r2, sp
   144f8:	blx	r3
   144fc:	cmp	r0, #8
   14500:	mov	r5, r0
   14504:	bne	14528 <__assert_fail@plt+0x2db4>
   14508:	mov	r0, r4
   1450c:	ldr	r1, [sp, #64]	; 0x40
   14510:	bl	140ec <__assert_fail@plt+0x2978>
   14514:	cmp	r0, #0
   14518:	beq	144ec <__assert_fail@plt+0x2d78>
   1451c:	mov	r0, #9
   14520:	add	sp, sp, #484	; 0x1e4
   14524:	pop	{r4, r5, r6, r7, pc}
   14528:	mov	r0, sp
   1452c:	bl	14218 <__assert_fail@plt+0x2aa4>
   14530:	cmp	r5, #6
   14534:	bne	1451c <__assert_fail@plt+0x2da8>
   14538:	mov	r0, r4
   1453c:	mov	r1, r7
   14540:	bl	142c4 <__assert_fail@plt+0x2b50>
   14544:	push	{r4}		; (str r4, [sp, #-4]!)
   14548:	ldr	r4, [r3, #60]	; 0x3c
   1454c:	str	r1, [r0, #12]
   14550:	mov	r1, r3
   14554:	str	r2, [r0, #24]
   14558:	mov	r2, #0
   1455c:	str	r4, [r3, #64]	; 0x40
   14560:	pop	{r4}		; (ldr r4, [sp], #4)
   14564:	b	1432c <__assert_fail@plt+0x2bb8>
   14568:	push	{r4, r5, r6, lr}
   1456c:	mov	r4, r0
   14570:	ldr	r6, [r0, #12]
   14574:	mov	r5, r1
   14578:	ldr	r3, [r0, #20]
   1457c:	cmp	r6, #0
   14580:	str	r3, [r1, #64]	; 0x40
   14584:	beq	14594 <__assert_fail@plt+0x2e20>
   14588:	mov	r2, #1
   1458c:	bl	1432c <__assert_fail@plt+0x2bb8>
   14590:	bl	1175c <abort@plt>
   14594:	ldr	r3, [r0, #16]
   14598:	mov	r1, r4
   1459c:	mov	r0, #2
   145a0:	mov	r2, r5
   145a4:	blx	r3
   145a8:	cmp	r0, #7
   145ac:	beq	145c8 <__assert_fail@plt+0x2e54>
   145b0:	cmp	r0, #8
   145b4:	bne	145c4 <__assert_fail@plt+0x2e50>
   145b8:	mov	r0, r4
   145bc:	mov	r1, r5
   145c0:	bl	142c4 <__assert_fail@plt+0x2b50>
   145c4:	bl	1175c <abort@plt>
   145c8:	mov	r0, r6
   145cc:	ldr	r1, [r5, #64]	; 0x40
   145d0:	bl	142bc <__assert_fail@plt+0x2b48>
   145d4:	add	r0, r5, #4
   145d8:	bl	14fec <__assert_fail@plt+0x3878>
   145dc:	ldr	r2, [r0, #12]
   145e0:	cmp	r2, #0
   145e4:	beq	145f8 <__assert_fail@plt+0x2e84>
   145e8:	ldr	ip, [r1, #60]	; 0x3c
   145ec:	mov	r2, #0
   145f0:	str	ip, [r1, #64]	; 0x40
   145f4:	b	1432c <__assert_fail@plt+0x2bb8>
   145f8:	b	1449c <__assert_fail@plt+0x2d28>
   145fc:	bx	lr
   14600:	push	{r3, lr}
   14604:	ldr	r3, [r0, #8]
   14608:	cmp	r3, #0
   1460c:	popeq	{r3, pc}
   14610:	mov	r1, r0
   14614:	mov	r0, #1
   14618:	blx	r3
   1461c:	pop	{r3, pc}
   14620:	cmp	r1, #4
   14624:	addls	pc, pc, r1, lsl #2
   14628:	b	1465c <__assert_fail@plt+0x2ee8>
   1462c:	b	14648 <__assert_fail@plt+0x2ed4>
   14630:	b	14640 <__assert_fail@plt+0x2ecc>
   14634:	b	1465c <__assert_fail@plt+0x2ee8>
   14638:	b	14640 <__assert_fail@plt+0x2ecc>
   1463c:	b	14640 <__assert_fail@plt+0x2ecc>
   14640:	mov	r0, #1
   14644:	bx	lr
   14648:	cmp	r2, #15
   1464c:	cmpls	r3, #0
   14650:	moveq	r3, #0
   14654:	movne	r3, #1
   14658:	beq	14664 <__assert_fail@plt+0x2ef0>
   1465c:	mov	r0, #2
   14660:	bx	lr
   14664:	add	r2, r0, r2, lsl #2
   14668:	mov	r0, r3
   1466c:	ldr	r3, [r2, #4]
   14670:	ldr	r2, [sp]
   14674:	str	r3, [r2]
   14678:	bx	lr
   1467c:	push	{lr}		; (str lr, [sp, #-4]!)
   14680:	sub	sp, sp, #20
   14684:	mov	r2, r1
   14688:	mov	r1, #0
   1468c:	add	ip, sp, #12
   14690:	mov	r3, r1
   14694:	str	ip, [sp]
   14698:	bl	14620 <__assert_fail@plt+0x2eac>
   1469c:	ldr	r0, [sp, #12]
   146a0:	add	sp, sp, #20
   146a4:	pop	{pc}		; (ldr pc, [sp], #4)
   146a8:	cmp	r1, #4
   146ac:	addls	pc, pc, r1, lsl #2
   146b0:	b	146e4 <__assert_fail@plt+0x2f70>
   146b4:	b	146d0 <__assert_fail@plt+0x2f5c>
   146b8:	b	146c8 <__assert_fail@plt+0x2f54>
   146bc:	b	146e4 <__assert_fail@plt+0x2f70>
   146c0:	b	146c8 <__assert_fail@plt+0x2f54>
   146c4:	b	146c8 <__assert_fail@plt+0x2f54>
   146c8:	mov	r0, #1
   146cc:	bx	lr
   146d0:	cmp	r2, #15
   146d4:	cmpls	r3, #0
   146d8:	moveq	r3, #0
   146dc:	movne	r3, #1
   146e0:	beq	146ec <__assert_fail@plt+0x2f78>
   146e4:	mov	r0, #2
   146e8:	bx	lr
   146ec:	ldr	ip, [sp]
   146f0:	add	r2, r0, r2, lsl #2
   146f4:	mov	r0, r3
   146f8:	ldr	r1, [ip]
   146fc:	str	r1, [r2, #4]
   14700:	bx	lr
   14704:	push	{lr}		; (str lr, [sp, #-4]!)
   14708:	sub	sp, sp, #20
   1470c:	add	ip, sp, #16
   14710:	mov	lr, r1
   14714:	mov	r1, #0
   14718:	str	r2, [ip, #-4]!
   1471c:	mov	r3, r1
   14720:	str	ip, [sp]
   14724:	mov	r2, lr
   14728:	bl	146a8 <__assert_fail@plt+0x2f34>
   1472c:	add	sp, sp, #20
   14730:	pop	{pc}		; (ldr pc, [sp], #4)
   14734:	ldr	r3, [r2, #60]	; 0x3c
   14738:	push	{r4, r5, r6, r7, r8, lr}
   1473c:	add	lr, r2, #4
   14740:	str	r3, [r2, #64]	; 0x40
   14744:	mov	r8, r0
   14748:	mov	r7, r1
   1474c:	sub	sp, sp, #568	; 0x238
   14750:	ldm	lr!, {r0, r1, r2, r3}
   14754:	add	ip, sp, #92	; 0x5c
   14758:	mvn	r6, #0
   1475c:	add	r4, sp, #88	; 0x58
   14760:	stmia	ip!, {r0, r1, r2, r3}
   14764:	ldm	lr!, {r0, r1, r2, r3}
   14768:	stmia	ip!, {r0, r1, r2, r3}
   1476c:	ldm	lr!, {r0, r1, r2, r3}
   14770:	stmia	ip!, {r0, r1, r2, r3}
   14774:	ldm	lr, {r0, r1, r2, r3}
   14778:	stm	ip, {r0, r1, r2, r3}
   1477c:	str	r6, [sp, #88]	; 0x58
   14780:	b	147c0 <__assert_fail@plt+0x304c>
   14784:	bl	14704 <__assert_fail@plt+0x2f90>
   14788:	mov	r1, r7
   1478c:	mov	r0, r4
   14790:	blx	r8
   14794:	mov	r1, sp
   14798:	mov	r2, r4
   1479c:	cmp	r0, #0
   147a0:	mov	r0, #8
   147a4:	bne	147e0 <__assert_fail@plt+0x306c>
   147a8:	ldr	r3, [sp, #16]
   147ac:	blx	r3
   147b0:	cmp	r0, #9
   147b4:	cmpne	r0, #5
   147b8:	mov	r6, r0
   147bc:	beq	147e4 <__assert_fail@plt+0x3070>
   147c0:	ldr	r1, [sp, #152]	; 0x98
   147c4:	mov	r0, sp
   147c8:	bl	140ec <__assert_fail@plt+0x2978>
   147cc:	mov	r2, sp
   147d0:	mov	r1, #12
   147d4:	cmp	r0, #0
   147d8:	mov	r0, r4
   147dc:	beq	14784 <__assert_fail@plt+0x3010>
   147e0:	mov	r6, #9
   147e4:	mov	r0, r4
   147e8:	bl	14218 <__assert_fail@plt+0x2aa4>
   147ec:	mov	r0, r6
   147f0:	add	sp, sp, #568	; 0x238
   147f4:	pop	{r4, r5, r6, r7, r8, pc}
   147f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147fc:	mov	r4, r1
   14800:	ldr	r1, [r1, #76]	; 0x4c
   14804:	mov	r8, r2
   14808:	sub	sp, sp, #44	; 0x2c
   1480c:	subs	r6, r3, #0
   14810:	ldr	ip, [pc, #1064]	; 14c40 <__assert_fail@plt+0x34cc>
   14814:	add	r3, r1, #4
   14818:	ldr	r2, [r1]
   1481c:	and	r7, r0, #3
   14820:	add	ip, pc, ip
   14824:	str	r3, [sp, #32]
   14828:	str	ip, [sp, #4]
   1482c:	str	r2, [sp, #28]
   14830:	bne	149dc <__assert_fail@plt+0x3268>
   14834:	lsl	r2, r2, #8
   14838:	strb	r6, [sp, #37]	; 0x25
   1483c:	str	r2, [sp, #28]
   14840:	mov	r2, #3
   14844:	strb	r2, [sp, #36]	; 0x24
   14848:	cmp	r7, #2
   1484c:	ldr	r2, [r4, #80]	; 0x50
   14850:	ldreq	r3, [r4, #56]	; 0x38
   14854:	ands	r2, r2, #1
   14858:	bne	149b0 <__assert_fail@plt+0x323c>
   1485c:	eor	r0, r0, #8
   14860:	str	r2, [sp, #8]
   14864:	ubfx	r0, r0, #3, #1
   14868:	str	r0, [sp, #12]
   1486c:	ldr	r9, [r3]
   14870:	cmp	r9, #0
   14874:	beq	149b8 <__assert_fail@plt+0x3244>
   14878:	cmp	r6, #2
   1487c:	mov	r0, r8
   14880:	addeq	r5, r3, #8
   14884:	addne	r5, r3, #4
   14888:	ldreq	sl, [r3, #4]
   1488c:	mov	r1, #15
   14890:	ldrhne	sl, [r3, #2]
   14894:	ldrhne	r9, [r3]
   14898:	ldr	r3, [r4, #72]	; 0x48
   1489c:	bic	fp, sl, #1
   148a0:	add	fp, fp, r3
   148a4:	bl	1467c <__assert_fail@plt+0x2f08>
   148a8:	cmp	fp, r0
   148ac:	movhi	r0, #0
   148b0:	bhi	148c8 <__assert_fail@plt+0x3154>
   148b4:	bic	r3, r9, #1
   148b8:	add	fp, fp, r3
   148bc:	cmp	r0, fp
   148c0:	movcs	r0, #0
   148c4:	movcc	r0, #1
   148c8:	and	sl, sl, #1
   148cc:	and	r9, r9, #1
   148d0:	orr	r9, r9, sl, lsl #1
   148d4:	cmp	r9, #1
   148d8:	beq	14a54 <__assert_fail@plt+0x32e0>
   148dc:	bcc	14a38 <__assert_fail@plt+0x32c4>
   148e0:	cmp	r9, #2
   148e4:	bne	149cc <__assert_fail@plt+0x3258>
   148e8:	ldr	r3, [r5]
   148ec:	cmp	r7, #0
   148f0:	bic	fp, r3, #-2147483648	; 0x80000000
   148f4:	bne	14a08 <__assert_fail@plt+0x3294>
   148f8:	cmp	r0, #0
   148fc:	beq	14a24 <__assert_fail@plt+0x32b0>
   14900:	ldr	r2, [sp, #12]
   14904:	cmp	fp, #0
   14908:	orreq	r2, r2, #1
   1490c:	cmp	r2, #0
   14910:	beq	14a24 <__assert_fail@plt+0x32b0>
   14914:	cmp	fp, #0
   14918:	beq	1498c <__assert_fail@plt+0x3218>
   1491c:	add	r2, r4, #88	; 0x58
   14920:	add	ip, sp, #24
   14924:	mov	sl, r7
   14928:	str	r7, [sp, #20]
   1492c:	str	r6, [sp, #16]
   14930:	add	r9, r5, #4
   14934:	mov	r7, r2
   14938:	mov	r6, ip
   1493c:	b	1494c <__assert_fail@plt+0x31d8>
   14940:	cmp	r3, fp
   14944:	mov	sl, r3
   14948:	beq	1498c <__assert_fail@plt+0x3218>
   1494c:	mov	r0, r9
   14950:	str	r7, [sp, #24]
   14954:	bl	142a0 <__assert_fail@plt+0x2b2c>
   14958:	mov	r3, r6
   1495c:	mov	r2, #0
   14960:	add	r9, r9, #4
   14964:	mov	r1, r0
   14968:	mov	r0, r4
   1496c:	bl	115f4 <__cxa_type_match@plt>
   14970:	add	r3, sl, #1
   14974:	cmp	r0, #0
   14978:	beq	14940 <__assert_fail@plt+0x31cc>
   1497c:	cmp	fp, sl
   14980:	ldr	r7, [sp, #20]
   14984:	ldr	r6, [sp, #16]
   14988:	bne	14a20 <__assert_fail@plt+0x32ac>
   1498c:	mov	r0, r8
   14990:	mov	r1, #13
   14994:	bl	1467c <__assert_fail@plt+0x2f08>
   14998:	ldr	r2, [sp, #24]
   1499c:	str	r5, [r4, #40]	; 0x28
   149a0:	mov	r3, #6
   149a4:	str	r2, [r4, #36]	; 0x24
   149a8:	str	r0, [r4, #32]
   149ac:	b	149d0 <__assert_fail@plt+0x325c>
   149b0:	mov	ip, #0
   149b4:	str	ip, [sp, #8]
   149b8:	cmp	r6, #2
   149bc:	ble	14ab0 <__assert_fail@plt+0x333c>
   149c0:	bl	142b4 <__assert_fail@plt+0x2b40>
   149c4:	cmp	r0, #0
   149c8:	beq	14ac4 <__assert_fail@plt+0x3350>
   149cc:	mov	r3, #9
   149d0:	mov	r0, r3
   149d4:	add	sp, sp, #44	; 0x2c
   149d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149dc:	cmp	r6, #2
   149e0:	bgt	14848 <__assert_fail@plt+0x30d4>
   149e4:	lsr	r1, r2, #16
   149e8:	strb	r1, [sp, #37]	; 0x25
   149ec:	lsl	r2, r2, #16
   149f0:	mov	ip, #2
   149f4:	uxtb	r1, r1
   149f8:	str	r2, [sp, #28]
   149fc:	strb	ip, [sp, #36]	; 0x24
   14a00:	add	r3, r3, r1, lsl #2
   14a04:	b	14848 <__assert_fail@plt+0x30d4>
   14a08:	mov	r0, r8
   14a0c:	mov	r1, #13
   14a10:	ldr	r9, [r4, #32]
   14a14:	bl	1467c <__assert_fail@plt+0x2f08>
   14a18:	cmp	r9, r0
   14a1c:	beq	14b64 <__assert_fail@plt+0x33f0>
   14a20:	ldr	r3, [r5]
   14a24:	cmp	r3, #0
   14a28:	addlt	r5, r5, #4
   14a2c:	add	fp, fp, #1
   14a30:	add	r3, r5, fp, lsl #2
   14a34:	b	1486c <__assert_fail@plt+0x30f8>
   14a38:	cmp	r7, #0
   14a3c:	moveq	r0, #0
   14a40:	andne	r0, r0, #1
   14a44:	cmp	r0, #0
   14a48:	bne	14bc8 <__assert_fail@plt+0x3454>
   14a4c:	add	r3, r5, #4
   14a50:	b	1486c <__assert_fail@plt+0x30f8>
   14a54:	cmp	r7, #0
   14a58:	bne	14b10 <__assert_fail@plt+0x339c>
   14a5c:	cmp	r0, #0
   14a60:	beq	14aa8 <__assert_fail@plt+0x3334>
   14a64:	ldm	r5, {r2, r3}
   14a68:	cmn	r3, #2
   14a6c:	lsr	r9, r2, #31
   14a70:	beq	149cc <__assert_fail@plt+0x3258>
   14a74:	cmn	r3, #1
   14a78:	add	r3, r4, #88	; 0x58
   14a7c:	str	r3, [sp, #24]
   14a80:	beq	14ba4 <__assert_fail@plt+0x3430>
   14a84:	add	r0, r5, #4
   14a88:	bl	142a0 <__assert_fail@plt+0x2b2c>
   14a8c:	mov	r2, r9
   14a90:	add	r3, sp, #24
   14a94:	mov	r1, r0
   14a98:	mov	r0, r4
   14a9c:	bl	115f4 <__cxa_type_match@plt>
   14aa0:	cmp	r0, #0
   14aa4:	bne	14c10 <__assert_fail@plt+0x349c>
   14aa8:	add	r3, r5, #8
   14aac:	b	1486c <__assert_fail@plt+0x30f8>
   14ab0:	mov	r0, r8
   14ab4:	add	r1, sp, #28
   14ab8:	bl	15228 <__assert_fail@plt+0x3ab4>
   14abc:	cmp	r0, #0
   14ac0:	bne	149cc <__assert_fail@plt+0x3258>
   14ac4:	ldr	ip, [sp, #8]
   14ac8:	cmp	ip, #0
   14acc:	moveq	r3, #8
   14ad0:	beq	149d0 <__assert_fail@plt+0x325c>
   14ad4:	mov	r1, #15
   14ad8:	mov	r0, r8
   14adc:	bl	1467c <__assert_fail@plt+0x2f08>
   14ae0:	mov	r1, #14
   14ae4:	mov	r2, r0
   14ae8:	mov	r0, r8
   14aec:	bl	14704 <__assert_fail@plt+0x2f90>
   14af0:	ldr	r3, [pc, #332]	; 14c44 <__assert_fail@plt+0x34d0>
   14af4:	ldr	ip, [sp, #4]
   14af8:	mov	r0, r8
   14afc:	mov	r1, #15
   14b00:	ldr	r2, [ip, r3]
   14b04:	bl	14704 <__assert_fail@plt+0x2f90>
   14b08:	mov	r3, #7
   14b0c:	b	149d0 <__assert_fail@plt+0x325c>
   14b10:	mov	r0, r8
   14b14:	mov	r1, #13
   14b18:	ldr	r9, [r4, #32]
   14b1c:	bl	1467c <__assert_fail@plt+0x2f08>
   14b20:	cmp	r9, r0
   14b24:	bne	14aa8 <__assert_fail@plt+0x3334>
   14b28:	ldr	r3, [r4, #40]	; 0x28
   14b2c:	cmp	r5, r3
   14b30:	bne	14aa8 <__assert_fail@plt+0x3334>
   14b34:	mov	r0, r5
   14b38:	bl	13fd0 <__assert_fail@plt+0x285c>
   14b3c:	mov	r1, #15
   14b40:	mov	r2, r0
   14b44:	mov	r0, r8
   14b48:	bl	14704 <__assert_fail@plt+0x2f90>
   14b4c:	mov	r0, r8
   14b50:	mov	r2, r4
   14b54:	mov	r1, #0
   14b58:	bl	14704 <__assert_fail@plt+0x2f90>
   14b5c:	mov	r3, #7
   14b60:	b	149d0 <__assert_fail@plt+0x325c>
   14b64:	ldr	r3, [r4, #40]	; 0x28
   14b68:	cmp	r5, r3
   14b6c:	bne	14a20 <__assert_fail@plt+0x32ac>
   14b70:	mov	r2, #4
   14b74:	mov	r3, #0
   14b78:	str	fp, [r4, #40]	; 0x28
   14b7c:	str	r3, [r4, #44]	; 0x2c
   14b80:	add	r3, r5, r2
   14b84:	str	r2, [r4, #48]	; 0x30
   14b88:	str	r3, [r4, #52]	; 0x34
   14b8c:	ldr	r3, [r5]
   14b90:	cmp	r3, #0
   14b94:	blt	14c04 <__assert_fail@plt+0x3490>
   14b98:	mov	ip, #1
   14b9c:	str	ip, [sp, #8]
   14ba0:	b	14a2c <__assert_fail@plt+0x32b8>
   14ba4:	mov	r0, r8
   14ba8:	mov	r1, #13
   14bac:	bl	1467c <__assert_fail@plt+0x2f08>
   14bb0:	str	r0, [r4, #32]
   14bb4:	ldr	r3, [sp, #24]
   14bb8:	str	r3, [r4, #36]	; 0x24
   14bbc:	str	r5, [r4, #40]	; 0x28
   14bc0:	mov	r3, #6
   14bc4:	b	149d0 <__assert_fail@plt+0x325c>
   14bc8:	mov	r0, r5
   14bcc:	add	r5, r5, #4
   14bd0:	bl	13fd0 <__assert_fail@plt+0x285c>
   14bd4:	str	r5, [r4, #56]	; 0x38
   14bd8:	mov	r6, r0
   14bdc:	mov	r0, r4
   14be0:	bl	11594 <__cxa_begin_cleanup@plt>
   14be4:	cmp	r0, #0
   14be8:	beq	149cc <__assert_fail@plt+0x3258>
   14bec:	mov	r0, r8
   14bf0:	mov	r2, r6
   14bf4:	mov	r1, #15
   14bf8:	bl	14704 <__assert_fail@plt+0x2f90>
   14bfc:	mov	r3, #7
   14c00:	b	149d0 <__assert_fail@plt+0x325c>
   14c04:	add	r0, fp, #1
   14c08:	add	r0, r5, r0, lsl #2
   14c0c:	b	14b38 <__assert_fail@plt+0x33c4>
   14c10:	mov	r9, r0
   14c14:	mov	r1, #13
   14c18:	mov	r0, r8
   14c1c:	bl	1467c <__assert_fail@plt+0x2f08>
   14c20:	cmp	r9, #2
   14c24:	str	r0, [r4, #32]
   14c28:	bne	14bb4 <__assert_fail@plt+0x3440>
   14c2c:	ldr	r2, [sp, #24]
   14c30:	mov	r3, r4
   14c34:	str	r2, [r3, #44]!	; 0x2c
   14c38:	str	r3, [r4, #36]	; 0x24
   14c3c:	b	14bbc <__assert_fail@plt+0x3448>
   14c40:	ldrdeq	r2, [r1], -r8
   14c44:	andeq	r0, r0, r0, ror #2
   14c48:	mov	r3, #0
   14c4c:	b	147f8 <__assert_fail@plt+0x3084>
   14c50:	mov	r3, #1
   14c54:	b	147f8 <__assert_fail@plt+0x3084>
   14c58:	mov	r3, #2
   14c5c:	b	147f8 <__assert_fail@plt+0x3084>
   14c60:	push	{r4, r5, r6, r7, r8, lr}
   14c64:	mov	r4, r0
   14c68:	sub	sp, sp, #272	; 0x110
   14c6c:	cmp	r1, #4
   14c70:	addls	pc, pc, r1, lsl #2
   14c74:	b	14c94 <__assert_fail@plt+0x3520>
   14c78:	b	14e88 <__assert_fail@plt+0x3714>
   14c7c:	b	14d08 <__assert_fail@plt+0x3594>
   14c80:	b	14c94 <__assert_fail@plt+0x3520>
   14c84:	b	14c8c <__assert_fail@plt+0x3518>
   14c88:	b	14ca0 <__assert_fail@plt+0x352c>
   14c8c:	cmp	r3, #3
   14c90:	beq	14ecc <__assert_fail@plt+0x3758>
   14c94:	mov	r0, #2
   14c98:	add	sp, sp, #272	; 0x110
   14c9c:	pop	{r4, r5, r6, r7, r8, pc}
   14ca0:	cmp	r2, #16
   14ca4:	cmpls	r3, #0
   14ca8:	bne	14c94 <__assert_fail@plt+0x3520>
   14cac:	ldr	r3, [r0]
   14cb0:	tst	r3, #16
   14cb4:	bne	14f48 <__assert_fail@plt+0x37d4>
   14cb8:	add	r5, sp, #136	; 0x88
   14cbc:	str	r2, [sp, #4]
   14cc0:	mov	r0, r5
   14cc4:	bl	150cc <__assert_fail@plt+0x3958>
   14cc8:	ldr	r1, [r4, #56]	; 0x38
   14ccc:	ldr	r2, [sp, #4]
   14cd0:	mov	r3, #0
   14cd4:	mov	r0, #1
   14cd8:	ands	ip, r2, r0, lsl r3
   14cdc:	ldrne	ip, [r1]
   14ce0:	addne	r1, r1, #4
   14ce4:	strne	ip, [r5, r3, lsl #2]
   14ce8:	add	r3, r3, #1
   14cec:	cmp	r3, #4
   14cf0:	bne	14cd8 <__assert_fail@plt+0x3564>
   14cf4:	mov	r0, r5
   14cf8:	str	r1, [r4, #56]	; 0x38
   14cfc:	bl	150b8 <__assert_fail@plt+0x3944>
   14d00:	mov	r0, #0
   14d04:	b	14c98 <__assert_fail@plt+0x3524>
   14d08:	bic	r1, r3, #4
   14d0c:	cmp	r1, #1
   14d10:	bne	14c94 <__assert_fail@plt+0x3520>
   14d14:	cmp	r3, #1
   14d18:	lsr	r5, r2, #16
   14d1c:	uxth	r6, r2
   14d20:	add	r2, r6, r5
   14d24:	movne	r1, #32
   14d28:	moveq	r1, #16
   14d2c:	cmp	r1, r2
   14d30:	bcc	14c94 <__assert_fail@plt+0x3520>
   14d34:	subs	r0, r3, #1
   14d38:	rsbs	r7, r0, #0
   14d3c:	adcs	r7, r7, r0
   14d40:	cmp	r5, #15
   14d44:	movls	r1, #0
   14d48:	movhi	r1, #1
   14d4c:	tst	r7, r1
   14d50:	bne	14c94 <__assert_fail@plt+0x3520>
   14d54:	cmp	r1, #0
   14d58:	movne	r8, r6
   14d5c:	bne	14d6c <__assert_fail@plt+0x35f8>
   14d60:	cmp	r2, #16
   14d64:	bls	14f70 <__assert_fail@plt+0x37fc>
   14d68:	sub	r8, r2, #16
   14d6c:	cmp	r8, #0
   14d70:	cmpne	r3, #5
   14d74:	bne	14c94 <__assert_fail@plt+0x3520>
   14d78:	cmp	r5, #15
   14d7c:	bhi	14dac <__assert_fail@plt+0x3638>
   14d80:	ldr	r2, [r4]
   14d84:	tst	r2, #1
   14d88:	beq	14dac <__assert_fail@plt+0x3638>
   14d8c:	cmp	r3, #5
   14d90:	mov	r0, r4
   14d94:	bic	r3, r2, #1
   14d98:	str	r3, [r4]
   14d9c:	beq	14fdc <__assert_fail@plt+0x3868>
   14da0:	bic	r2, r2, #3
   14da4:	str	r2, [r0], #72	; 0x48
   14da8:	bl	15008 <__assert_fail@plt+0x3894>
   14dac:	cmp	r8, #0
   14db0:	beq	14dc0 <__assert_fail@plt+0x364c>
   14db4:	ldr	r3, [r4]
   14db8:	tst	r3, #4
   14dbc:	bne	14fb4 <__assert_fail@plt+0x3840>
   14dc0:	cmp	r7, #0
   14dc4:	bne	14fc8 <__assert_fail@plt+0x3854>
   14dc8:	cmp	r5, #15
   14dcc:	bls	14f98 <__assert_fail@plt+0x3824>
   14dd0:	cmp	r8, #0
   14dd4:	bne	14fa4 <__assert_fail@plt+0x3830>
   14dd8:	ldr	ip, [r4, #56]	; 0x38
   14ddc:	cmp	r6, #0
   14de0:	mov	r2, ip
   14de4:	ble	14e18 <__assert_fail@plt+0x36a4>
   14de8:	add	r0, sp, #136	; 0x88
   14dec:	lsl	r6, r6, #1
   14df0:	add	r0, r0, r5, lsl #3
   14df4:	sub	r1, r6, #1
   14df8:	rsb	r0, ip, r0
   14dfc:	sub	r3, ip, #4
   14e00:	sub	r1, r1, #1
   14e04:	ldr	r2, [r3, #4]!
   14e08:	cmn	r1, #1
   14e0c:	str	r2, [r0, r3]
   14e10:	bne	14e00 <__assert_fail@plt+0x368c>
   14e14:	add	r2, ip, r6, lsl #2
   14e18:	cmp	r8, #0
   14e1c:	beq	14e5c <__assert_fail@plt+0x36e8>
   14e20:	cmp	r5, #16
   14e24:	movcs	r0, r5
   14e28:	movcc	r0, #16
   14e2c:	add	r6, sp, #272	; 0x110
   14e30:	lsl	r1, r8, #1
   14e34:	mov	ip, r2
   14e38:	add	r0, r6, r0, lsl #3
   14e3c:	sub	r3, r1, #1
   14e40:	sub	r0, r0, #392	; 0x188
   14e44:	sub	r3, r3, #1
   14e48:	ldr	r6, [ip], #4
   14e4c:	cmn	r3, #1
   14e50:	str	r6, [r0], #4
   14e54:	bne	14e44 <__assert_fail@plt+0x36d0>
   14e58:	add	r2, r2, r1, lsl #2
   14e5c:	cmp	r7, #0
   14e60:	bne	14f78 <__assert_fail@plt+0x3804>
   14e64:	cmp	r5, #15
   14e68:	str	r2, [r4, #56]	; 0x38
   14e6c:	bls	14f8c <__assert_fail@plt+0x3818>
   14e70:	cmp	r8, #0
   14e74:	beq	14e80 <__assert_fail@plt+0x370c>
   14e78:	add	r0, sp, #8
   14e7c:	bl	15020 <__assert_fail@plt+0x38ac>
   14e80:	mov	r0, #0
   14e84:	b	14c98 <__assert_fail@plt+0x3524>
   14e88:	cmp	r3, #0
   14e8c:	bne	14c94 <__assert_fail@plt+0x3520>
   14e90:	ldr	r1, [r0, #56]	; 0x38
   14e94:	uxth	r5, r2
   14e98:	mov	ip, #1
   14e9c:	ands	r0, r5, ip, lsl r3
   14ea0:	add	r0, r4, r3, lsl #2
   14ea4:	add	r3, r3, #1
   14ea8:	ldrne	r6, [r1]
   14eac:	addne	r1, r1, #4
   14eb0:	strne	r6, [r0, #4]
   14eb4:	cmp	r3, #16
   14eb8:	bne	14e9c <__assert_fail@plt+0x3728>
   14ebc:	ands	r0, r2, #8192	; 0x2000
   14ec0:	streq	r1, [r4, #56]	; 0x38
   14ec4:	beq	14c98 <__assert_fail@plt+0x3524>
   14ec8:	b	14e80 <__assert_fail@plt+0x370c>
   14ecc:	lsr	r6, r2, #16
   14ed0:	uxth	r7, r2
   14ed4:	add	r3, r7, r6
   14ed8:	cmp	r3, #16
   14edc:	bhi	14c94 <__assert_fail@plt+0x3520>
   14ee0:	ldr	r3, [r0]
   14ee4:	tst	r3, #8
   14ee8:	bne	14f60 <__assert_fail@plt+0x37ec>
   14eec:	add	r5, sp, #136	; 0x88
   14ef0:	lsl	r7, r7, #1
   14ef4:	mov	r0, r5
   14ef8:	bl	15074 <__assert_fail@plt+0x3900>
   14efc:	ldr	ip, [r4, #56]	; 0x38
   14f00:	cmp	r7, #0
   14f04:	add	r0, r5, r6, lsl #3
   14f08:	sub	r3, r7, #1
   14f0c:	mov	r2, ip
   14f10:	beq	14f34 <__assert_fail@plt+0x37c0>
   14f14:	rsb	r0, ip, r0
   14f18:	sub	r2, ip, #4
   14f1c:	sub	r3, r3, #1
   14f20:	ldr	r1, [r2, #4]!
   14f24:	cmn	r3, #1
   14f28:	str	r1, [r0, r2]
   14f2c:	bne	14f1c <__assert_fail@plt+0x37a8>
   14f30:	add	r2, ip, r7, lsl #2
   14f34:	mov	r0, r5
   14f38:	str	r2, [r4, #56]	; 0x38
   14f3c:	bl	15030 <__assert_fail@plt+0x38bc>
   14f40:	mov	r0, #0
   14f44:	b	14c98 <__assert_fail@plt+0x3524>
   14f48:	bic	r3, r3, #16
   14f4c:	str	r3, [r0], #464	; 0x1d0
   14f50:	str	r2, [sp, #4]
   14f54:	bl	150cc <__assert_fail@plt+0x3958>
   14f58:	ldr	r2, [sp, #4]
   14f5c:	b	14cb8 <__assert_fail@plt+0x3544>
   14f60:	bic	r3, r3, #8
   14f64:	str	r3, [r0], #336	; 0x150
   14f68:	bl	15074 <__assert_fail@plt+0x3900>
   14f6c:	b	14eec <__assert_fail@plt+0x3778>
   14f70:	mov	r8, r1
   14f74:	b	14d78 <__assert_fail@plt+0x3604>
   14f78:	add	r2, r2, #4
   14f7c:	add	r0, sp, #136	; 0x88
   14f80:	str	r2, [r4, #56]	; 0x38
   14f84:	bl	15000 <__assert_fail@plt+0x388c>
   14f88:	b	14e80 <__assert_fail@plt+0x370c>
   14f8c:	add	r0, sp, #136	; 0x88
   14f90:	bl	15010 <__assert_fail@plt+0x389c>
   14f94:	b	14e70 <__assert_fail@plt+0x36fc>
   14f98:	add	r0, sp, #136	; 0x88
   14f9c:	bl	15018 <__assert_fail@plt+0x38a4>
   14fa0:	b	14dd0 <__assert_fail@plt+0x365c>
   14fa4:	add	r0, sp, #8
   14fa8:	bl	15028 <__assert_fail@plt+0x38b4>
   14fac:	rsb	r6, r5, #16
   14fb0:	b	14dd8 <__assert_fail@plt+0x3664>
   14fb4:	mov	r0, r4
   14fb8:	bic	r3, r3, #4
   14fbc:	str	r3, [r0], #208	; 0xd0
   14fc0:	bl	15028 <__assert_fail@plt+0x38b4>
   14fc4:	b	14dc0 <__assert_fail@plt+0x364c>
   14fc8:	add	r0, sp, #136	; 0x88
   14fcc:	bl	15008 <__assert_fail@plt+0x3894>
   14fd0:	cmp	r8, #0
   14fd4:	bne	14fac <__assert_fail@plt+0x3838>
   14fd8:	b	14dd8 <__assert_fail@plt+0x3664>
   14fdc:	orr	r3, r3, #2
   14fe0:	str	r3, [r0], #72	; 0x48
   14fe4:	bl	15018 <__assert_fail@plt+0x38a4>
   14fe8:	b	14dac <__assert_fail@plt+0x3638>
   14fec:	add	r1, r0, #52	; 0x34
   14ff0:	ldm	r1, {r3, r4, r5}
   14ff4:	push	{r3, r4, r5}
   14ff8:	ldm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   14ffc:	ldm	sp, {sp, lr, pc}
   15000:	fldmiax	r0, {d0-d15}	;@ Deprecated
   15004:	bx	lr
   15008:	fstmiax	r0, {d0-d15}	;@ Deprecated
   1500c:	bx	lr
   15010:	vldmia	r0, {d0-d15}
   15014:	bx	lr
   15018:	vstmia	r0, {d0-d15}
   1501c:	bx	lr
   15020:	vldmia	r0, {d16-d31}
   15024:	bx	lr
   15028:	vstmia	r0, {d16-d31}
   1502c:	bx	lr
   15030:	ldfe	f0, [r0], #8
   15034:	ldfe	f1, [r0], #8
   15038:	ldfe	f2, [r0], #8
   1503c:	ldfe	f3, [r0], #8
   15040:	ldfe	f4, [r0], #8
   15044:	ldfe	f5, [r0], #8
   15048:	ldfe	f6, [r0], #8
   1504c:	ldfe	f7, [r0], #8
   15050:	ldfp	f0, [r0], #8
   15054:	ldfp	f1, [r0], #8
   15058:	ldfp	f2, [r0], #8
   1505c:	ldfp	f3, [r0], #8
   15060:	ldfp	f4, [r0], #8
   15064:	ldfp	f5, [r0], #8
   15068:	ldfp	f6, [r0], #8
   1506c:	ldfp	f7, [r0], #8
   15070:	bx	lr
   15074:	stfe	f0, [r0], #8
   15078:	stfe	f1, [r0], #8
   1507c:	stfe	f2, [r0], #8
   15080:	stfe	f3, [r0], #8
   15084:	stfe	f4, [r0], #8
   15088:	stfe	f5, [r0], #8
   1508c:	stfe	f6, [r0], #8
   15090:	stfe	f7, [r0], #8
   15094:	stfp	f0, [r0], #8
   15098:	stfp	f1, [r0], #8
   1509c:	stfp	f2, [r0], #8
   150a0:	stfp	f3, [r0], #8
   150a4:	stfp	f4, [r0], #8
   150a8:	stfp	f5, [r0], #8
   150ac:	stfp	f6, [r0], #8
   150b0:	stfp	f7, [r0], #8
   150b4:	bx	lr
   150b8:	ldc2	1, cr8, [r0], #4
   150bc:	ldc2	1, cr9, [r0], #4
   150c0:	ldc2	1, cr10, [r0], #4
   150c4:	ldc2	1, cr11, [r0], #4
   150c8:	bx	lr
   150cc:	stc2	1, cr8, [r0], #4
   150d0:	stc2	1, cr9, [r0], #4
   150d4:	stc2	1, cr10, [r0], #4
   150d8:	stc2	1, cr11, [r0], #4
   150dc:	bx	lr
   150e0:	push	{sp, lr, pc}
   150e4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   150e8:	mov	r3, #0
   150ec:	push	{r2, r3}
   150f0:	add	r1, sp, #4
   150f4:	bl	1449c <__assert_fail@plt+0x2d28>
   150f8:	ldr	lr, [sp, #64]	; 0x40
   150fc:	add	sp, sp, #72	; 0x48
   15100:	bx	lr
   15104:	push	{sp, lr, pc}
   15108:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1510c:	mov	r3, #0
   15110:	push	{r2, r3}
   15114:	add	r1, sp, #4
   15118:	bl	14568 <__assert_fail@plt+0x2df4>
   1511c:	ldr	lr, [sp, #64]	; 0x40
   15120:	add	sp, sp, #72	; 0x48
   15124:	bx	lr
   15128:	push	{sp, lr, pc}
   1512c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   15130:	mov	r3, #0
   15134:	push	{r2, r3}
   15138:	add	r1, sp, #4
   1513c:	bl	145dc <__assert_fail@plt+0x2e68>
   15140:	ldr	lr, [sp, #64]	; 0x40
   15144:	add	sp, sp, #72	; 0x48
   15148:	bx	lr
   1514c:	push	{sp, lr, pc}
   15150:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   15154:	mov	r3, #0
   15158:	push	{r2, r3}
   1515c:	add	r3, sp, #4
   15160:	bl	14544 <__assert_fail@plt+0x2dd0>
   15164:	ldr	lr, [sp, #64]	; 0x40
   15168:	add	sp, sp, #72	; 0x48
   1516c:	bx	lr
   15170:	push	{sp, lr, pc}
   15174:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   15178:	mov	r3, #0
   1517c:	push	{r2, r3}
   15180:	add	r2, sp, #4
   15184:	bl	14734 <__assert_fail@plt+0x2fc0>
   15188:	ldr	lr, [sp, #64]	; 0x40
   1518c:	add	sp, sp, #72	; 0x48
   15190:	bx	lr
   15194:	ldrb	r2, [r0, #8]
   15198:	mov	r3, r0
   1519c:	cmp	r2, #0
   151a0:	bne	151b8 <__assert_fail@plt+0x3a44>
   151a4:	ldrb	r2, [r0, #9]
   151a8:	cmp	r2, #0
   151ac:	bne	151d4 <__assert_fail@plt+0x3a60>
   151b0:	mov	r0, #176	; 0xb0
   151b4:	bx	lr
   151b8:	ldr	r0, [r0]
   151bc:	sub	r2, r2, #1
   151c0:	strb	r2, [r3, #8]
   151c4:	lsl	r2, r0, #8
   151c8:	lsr	r0, r0, #24
   151cc:	str	r2, [r3]
   151d0:	bx	lr
   151d4:	ldr	r1, [r0, #4]
   151d8:	sub	r2, r2, #1
   151dc:	strb	r2, [r0, #9]
   151e0:	mov	r2, #3
   151e4:	add	r0, r1, #4
   151e8:	str	r0, [r3, #4]
   151ec:	ldr	r0, [r1]
   151f0:	strb	r2, [r3, #8]
   151f4:	b	151c4 <__assert_fail@plt+0x3a50>
   151f8:	push	{lr}		; (str lr, [sp, #-4]!)
   151fc:	sub	sp, sp, #20
   15200:	mov	r1, #0
   15204:	add	r2, sp, #12
   15208:	mov	r3, r1
   1520c:	str	r2, [sp]
   15210:	mov	r2, #12
   15214:	bl	14620 <__assert_fail@plt+0x2eac>
   15218:	ldr	r0, [sp, #12]
   1521c:	add	sp, sp, #20
   15220:	pop	{pc}		; (ldr pc, [sp], #4)
   15224:	b	151f8 <__assert_fail@plt+0x3a84>
   15228:	push	{r4, r5, r6, r7, r8, r9, lr}
   1522c:	sub	sp, sp, #20
   15230:	add	r7, sp, #12
   15234:	mov	r6, r0
   15238:	mov	r5, r1
   1523c:	mov	r8, #0
   15240:	mov	r0, r5
   15244:	bl	15194 <__assert_fail@plt+0x3a20>
   15248:	cmp	r0, #176	; 0xb0
   1524c:	mov	r4, r0
   15250:	beq	1546c <__assert_fail@plt+0x3cf8>
   15254:	bic	r2, r0, #127	; 0x7f
   15258:	ands	r1, r2, #255	; 0xff
   1525c:	beq	152c8 <__assert_fail@plt+0x3b54>
   15260:	and	r2, r0, #240	; 0xf0
   15264:	cmp	r2, #128	; 0x80
   15268:	beq	153c4 <__assert_fail@plt+0x3c50>
   1526c:	cmp	r2, #144	; 0x90
   15270:	beq	15318 <__assert_fail@plt+0x3ba4>
   15274:	cmp	r2, #160	; 0xa0
   15278:	beq	15340 <__assert_fail@plt+0x3bcc>
   1527c:	cmp	r2, #176	; 0xb0
   15280:	beq	15378 <__assert_fail@plt+0x3c04>
   15284:	cmp	r2, #192	; 0xc0
   15288:	beq	1540c <__assert_fail@plt+0x3c98>
   1528c:	and	r3, r0, #248	; 0xf8
   15290:	cmp	r3, #208	; 0xd0
   15294:	bne	152bc <__assert_fail@plt+0x3b48>
   15298:	and	r4, r0, #7
   1529c:	mov	r1, #1
   152a0:	add	r2, r4, #1
   152a4:	mov	r0, r6
   152a8:	orr	r2, r2, #524288	; 0x80000
   152ac:	mov	r3, #5
   152b0:	bl	14c60 <__assert_fail@plt+0x34ec>
   152b4:	cmp	r0, #0
   152b8:	beq	15240 <__assert_fail@plt+0x3acc>
   152bc:	mov	r0, #9
   152c0:	add	sp, sp, #20
   152c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   152c8:	lsl	r9, r0, #2
   152cc:	mov	r3, r1
   152d0:	str	r7, [sp]
   152d4:	mov	r0, r6
   152d8:	mov	r2, #13
   152dc:	uxtb	r9, r9
   152e0:	bl	14620 <__assert_fail@plt+0x2eac>
   152e4:	ldr	r3, [sp, #12]
   152e8:	add	r9, r9, #4
   152ec:	tst	r4, #64	; 0x40
   152f0:	rsbne	r9, r9, r3
   152f4:	addeq	r9, r3, r9
   152f8:	str	r9, [sp, #12]
   152fc:	mov	r1, #0
   15300:	str	r7, [sp]
   15304:	mov	r3, r1
   15308:	mov	r0, r6
   1530c:	mov	r2, #13
   15310:	bl	146a8 <__assert_fail@plt+0x2f34>
   15314:	b	15240 <__assert_fail@plt+0x3acc>
   15318:	and	r3, r0, #13
   1531c:	cmp	r3, #13
   15320:	beq	152bc <__assert_fail@plt+0x3b48>
   15324:	mov	r1, #0
   15328:	and	r2, r0, #15
   1532c:	str	r7, [sp]
   15330:	mov	r3, r1
   15334:	mov	r0, r6
   15338:	bl	14620 <__assert_fail@plt+0x2eac>
   1533c:	b	152fc <__assert_fail@plt+0x3b88>
   15340:	mvn	r4, r0
   15344:	mov	r2, #4080	; 0xff0
   15348:	and	r4, r4, #7
   1534c:	tst	r0, #8
   15350:	asr	r2, r2, r4
   15354:	mov	r1, #0
   15358:	and	r2, r2, #4080	; 0xff0
   1535c:	orrne	r2, r2, #16384	; 0x4000
   15360:	mov	r3, r1
   15364:	mov	r0, r6
   15368:	bl	14c60 <__assert_fail@plt+0x34ec>
   1536c:	cmp	r0, #0
   15370:	bne	152bc <__assert_fail@plt+0x3b48>
   15374:	b	15240 <__assert_fail@plt+0x3acc>
   15378:	cmp	r0, #177	; 0xb1
   1537c:	beq	154b4 <__assert_fail@plt+0x3d40>
   15380:	cmp	r0, #178	; 0xb2
   15384:	beq	154d0 <__assert_fail@plt+0x3d5c>
   15388:	cmp	r0, #179	; 0xb3
   1538c:	beq	15550 <__assert_fail@plt+0x3ddc>
   15390:	and	r3, r0, #252	; 0xfc
   15394:	cmp	r3, #180	; 0xb4
   15398:	beq	152bc <__assert_fail@plt+0x3b48>
   1539c:	and	r2, r0, #7
   153a0:	mov	r1, #1
   153a4:	add	r2, r2, r1
   153a8:	mov	r3, r1
   153ac:	orr	r2, r2, #524288	; 0x80000
   153b0:	mov	r0, r6
   153b4:	bl	14c60 <__assert_fail@plt+0x34ec>
   153b8:	cmp	r0, #0
   153bc:	bne	152bc <__assert_fail@plt+0x3b48>
   153c0:	b	15240 <__assert_fail@plt+0x3acc>
   153c4:	mov	r0, r5
   153c8:	lsl	r4, r4, #8
   153cc:	bl	15194 <__assert_fail@plt+0x3a20>
   153d0:	orr	r0, r0, r4
   153d4:	cmp	r0, #32768	; 0x8000
   153d8:	beq	152bc <__assert_fail@plt+0x3b48>
   153dc:	lsl	r4, r0, #4
   153e0:	mov	r1, #0
   153e4:	movw	r2, #65520	; 0xfff0
   153e8:	mov	r3, r1
   153ec:	and	r2, r4, r2
   153f0:	mov	r0, r6
   153f4:	bl	14c60 <__assert_fail@plt+0x34ec>
   153f8:	cmp	r0, #0
   153fc:	bne	152bc <__assert_fail@plt+0x3b48>
   15400:	tst	r4, #32768	; 0x8000
   15404:	movne	r8, #1
   15408:	b	15240 <__assert_fail@plt+0x3acc>
   1540c:	cmp	r0, #198	; 0xc6
   15410:	beq	15570 <__assert_fail@plt+0x3dfc>
   15414:	cmp	r0, #199	; 0xc7
   15418:	beq	1558c <__assert_fail@plt+0x3e18>
   1541c:	and	r3, r0, #248	; 0xf8
   15420:	cmp	r3, #192	; 0xc0
   15424:	beq	155bc <__assert_fail@plt+0x3e48>
   15428:	cmp	r0, #200	; 0xc8
   1542c:	beq	155e4 <__assert_fail@plt+0x3e70>
   15430:	cmp	r0, #201	; 0xc9
   15434:	bne	152bc <__assert_fail@plt+0x3b48>
   15438:	mov	r0, r5
   1543c:	bl	15194 <__assert_fail@plt+0x3a20>
   15440:	mov	r1, #1
   15444:	and	r3, r0, #15
   15448:	and	r2, r0, #240	; 0xf0
   1544c:	add	r3, r3, #1
   15450:	mov	r0, r6
   15454:	orr	r2, r3, r2, lsl #12
   15458:	mov	r3, #5
   1545c:	bl	14c60 <__assert_fail@plt+0x34ec>
   15460:	cmp	r0, #0
   15464:	bne	152bc <__assert_fail@plt+0x3b48>
   15468:	b	15240 <__assert_fail@plt+0x3acc>
   1546c:	cmp	r8, #0
   15470:	movne	r0, #0
   15474:	bne	152c0 <__assert_fail@plt+0x3b4c>
   15478:	add	r4, sp, #12
   1547c:	mov	r1, r8
   15480:	mov	r2, #14
   15484:	mov	r3, r8
   15488:	mov	r0, r6
   1548c:	str	r4, [sp]
   15490:	bl	14620 <__assert_fail@plt+0x2eac>
   15494:	str	r4, [sp]
   15498:	mov	r0, r6
   1549c:	mov	r1, r8
   154a0:	mov	r2, #15
   154a4:	mov	r3, r8
   154a8:	bl	146a8 <__assert_fail@plt+0x2f34>
   154ac:	mov	r0, r8
   154b0:	b	152c0 <__assert_fail@plt+0x3b4c>
   154b4:	mov	r0, r5
   154b8:	bl	15194 <__assert_fail@plt+0x3a20>
   154bc:	subs	r2, r0, #0
   154c0:	beq	152bc <__assert_fail@plt+0x3b48>
   154c4:	ands	r1, r2, #240	; 0xf0
   154c8:	beq	15360 <__assert_fail@plt+0x3bec>
   154cc:	b	152bc <__assert_fail@plt+0x3b48>
   154d0:	mov	r1, #0
   154d4:	mov	r2, #13
   154d8:	mov	r3, r1
   154dc:	str	r7, [sp]
   154e0:	mov	r0, r6
   154e4:	mov	r4, #2
   154e8:	bl	14620 <__assert_fail@plt+0x2eac>
   154ec:	mov	r0, r5
   154f0:	bl	15194 <__assert_fail@plt+0x3a20>
   154f4:	tst	r0, #128	; 0x80
   154f8:	beq	15520 <__assert_fail@plt+0x3dac>
   154fc:	and	r2, r0, #127	; 0x7f
   15500:	ldr	r3, [sp, #12]
   15504:	mov	r0, r5
   15508:	add	r3, r3, r2, lsl r4
   1550c:	str	r3, [sp, #12]
   15510:	bl	15194 <__assert_fail@plt+0x3a20>
   15514:	add	r4, r4, #7
   15518:	tst	r0, #128	; 0x80
   1551c:	bne	154fc <__assert_fail@plt+0x3d88>
   15520:	ldr	ip, [sp, #12]
   15524:	and	lr, r0, #127	; 0x7f
   15528:	mov	r1, #0
   1552c:	str	r7, [sp]
   15530:	add	ip, ip, #516	; 0x204
   15534:	mov	r3, r1
   15538:	mov	r0, r6
   1553c:	mov	r2, #13
   15540:	add	r4, ip, lr, lsl r4
   15544:	str	r4, [sp, #12]
   15548:	bl	146a8 <__assert_fail@plt+0x2f34>
   1554c:	b	15240 <__assert_fail@plt+0x3acc>
   15550:	mov	r0, r5
   15554:	bl	15194 <__assert_fail@plt+0x3a20>
   15558:	mov	r1, #1
   1555c:	and	r3, r0, #15
   15560:	and	r2, r0, #240	; 0xf0
   15564:	add	r3, r3, #1
   15568:	orr	r2, r3, r2, lsl #12
   1556c:	b	15360 <__assert_fail@plt+0x3bec>
   15570:	mov	r0, r5
   15574:	bl	15194 <__assert_fail@plt+0x3a20>
   15578:	mov	r1, #3
   1557c:	and	r3, r0, #15
   15580:	and	r2, r0, #240	; 0xf0
   15584:	add	r3, r3, #1
   15588:	b	15568 <__assert_fail@plt+0x3df4>
   1558c:	mov	r0, r5
   15590:	bl	15194 <__assert_fail@plt+0x3a20>
   15594:	subs	r2, r0, #0
   15598:	beq	152bc <__assert_fail@plt+0x3b48>
   1559c:	ands	r3, r2, #240	; 0xf0
   155a0:	bne	152bc <__assert_fail@plt+0x3b48>
   155a4:	mov	r0, r6
   155a8:	mov	r1, #4
   155ac:	bl	14c60 <__assert_fail@plt+0x34ec>
   155b0:	cmp	r0, #0
   155b4:	bne	152bc <__assert_fail@plt+0x3b48>
   155b8:	b	15240 <__assert_fail@plt+0x3acc>
   155bc:	and	r2, r0, #15
   155c0:	mov	r1, #3
   155c4:	add	r2, r2, #1
   155c8:	mov	r3, r1
   155cc:	orr	r2, r2, #655360	; 0xa0000
   155d0:	mov	r0, r6
   155d4:	bl	14c60 <__assert_fail@plt+0x34ec>
   155d8:	cmp	r0, #0
   155dc:	bne	152bc <__assert_fail@plt+0x3b48>
   155e0:	b	15240 <__assert_fail@plt+0x3acc>
   155e4:	mov	r0, r5
   155e8:	bl	15194 <__assert_fail@plt+0x3a20>
   155ec:	mov	r1, #1
   155f0:	and	r2, r0, #240	; 0xf0
   155f4:	and	r3, r0, #15
   155f8:	add	r2, r2, #16
   155fc:	add	r3, r3, #1
   15600:	mov	r0, r6
   15604:	orr	r2, r3, r2, lsl #12
   15608:	mov	r3, #5
   1560c:	bl	14c60 <__assert_fail@plt+0x34ec>
   15610:	cmp	r0, #0
   15614:	bne	152bc <__assert_fail@plt+0x3b48>
   15618:	b	15240 <__assert_fail@plt+0x3acc>
   1561c:	ldr	r3, [r0, #76]	; 0x4c
   15620:	mov	r0, r1
   15624:	push	{lr}		; (str lr, [sp, #-4]!)
   15628:	sub	sp, sp, #20
   1562c:	ldr	r2, [r3, #4]
   15630:	add	ip, r3, #8
   15634:	mov	lr, #3
   15638:	strb	lr, [sp, #12]
   1563c:	ldrb	r3, [r3, #7]
   15640:	add	r1, sp, #4
   15644:	lsl	r2, r2, #8
   15648:	stmib	sp, {r2, ip}
   1564c:	strb	r3, [sp, #13]
   15650:	bl	15228 <__assert_fail@plt+0x3ab4>
   15654:	add	sp, sp, #20
   15658:	pop	{pc}		; (ldr pc, [sp], #4)
   1565c:	push	{r3, lr}
   15660:	bl	15224 <__assert_fail@plt+0x3ab0>
   15664:	ldr	r0, [r0, #72]	; 0x48
   15668:	pop	{r3, pc}
   1566c:	push	{r3, lr}
   15670:	bl	15224 <__assert_fail@plt+0x3ab0>
   15674:	ldr	r3, [r0, #76]	; 0x4c
   15678:	ldrb	r2, [r3, #7]
   1567c:	add	r0, r3, r2, lsl #2
   15680:	add	r0, r0, #8
   15684:	pop	{r3, pc}
   15688:	push	{r3, lr}
   1568c:	bl	1175c <abort@plt>
   15690:	push	{r3, lr}
   15694:	bl	1175c <abort@plt>
   15698:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1569c:	mov	r7, r0
   156a0:	ldr	r6, [pc, #76]	; 156f4 <__assert_fail@plt+0x3f80>
   156a4:	mov	r8, r1
   156a8:	ldr	r5, [pc, #72]	; 156f8 <__assert_fail@plt+0x3f84>
   156ac:	mov	r9, r2
   156b0:	add	r6, pc, r6
   156b4:	bl	113ac <_init@@Base>
   156b8:	add	r5, pc, r5
   156bc:	rsb	r6, r5, r6
   156c0:	asrs	r6, r6, #2
   156c4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   156c8:	sub	r5, r5, #4
   156cc:	mov	r4, #0
   156d0:	add	r4, r4, #1
   156d4:	ldr	r3, [r5, #4]!
   156d8:	mov	r0, r7
   156dc:	mov	r1, r8
   156e0:	mov	r2, r9
   156e4:	blx	r3
   156e8:	cmp	r4, r6
   156ec:	bne	156d0 <__assert_fail@plt+0x3f5c>
   156f0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   156f4:	andeq	r1, r1, r0, asr #16
   156f8:	andeq	r1, r1, r4, lsr r8
   156fc:	bx	lr

Disassembly of section .fini:

00015700 <_fini@@Base>:
   15700:	push	{r3, lr}
   15704:	pop	{r3, pc}
