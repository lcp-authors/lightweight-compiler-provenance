
centos-preinstalled/id:     file format elf32-littlearm


Disassembly of section .init:

00011254 <_init@@Base>:
   11254:	push	{r3, lr}
   11258:	bl	123ac <__assert_fail@plt+0xe08>
   1125c:	pop	{r3, pc}

Disassembly of section .plt:

00011260 <fdopen@plt-0x14>:
   11260:	push	{lr}		; (str lr, [sp, #-4]!)
   11264:	ldr	lr, [pc, #4]	; 11270 <_init@@Base+0x1c>
   11268:	add	lr, pc, lr
   1126c:	ldr	pc, [lr, #8]!
   11270:	muleq	r1, r0, sp

00011274 <fdopen@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3472]!	; 0xd90

00011280 <calloc@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3464]!	; 0xd88

0001128c <endgrent@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3456]!	; 0xd80

00011298 <fputs_unlocked@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3448]!	; 0xd78

000112a4 <raise@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3440]!	; 0xd70

000112b0 <getpwnam@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3432]!	; 0xd68

000112bc <is_selinux_enabled@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3424]!	; 0xd60

000112c8 <strcmp@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3416]!	; 0xd58

000112d4 <getpwuid@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3408]!	; 0xd50

000112e0 <fflush@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3400]!	; 0xd48

000112ec <getuid@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3392]!	; 0xd40

000112f8 <free@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3384]!	; 0xd38

00011304 <_exit@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3376]!	; 0xd30

00011310 <memcpy@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3368]!	; 0xd28

0001131c <mbsinit@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3360]!	; 0xd20

00011328 <memcmp@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3352]!	; 0xd18

00011334 <dcgettext@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3344]!	; 0xd10

00011340 <__stack_chk_fail@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3336]!	; 0xd08

0001134c <realloc@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3328]!	; 0xd00

00011358 <textdomain@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3320]!	; 0xcf8

00011364 <geteuid@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3312]!	; 0xcf0

00011370 <iswprint@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3304]!	; 0xce8

0001137c <getegid@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3296]!	; 0xce0

00011388 <fwrite@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3288]!	; 0xcd8

00011394 <lseek64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3280]!	; 0xcd0

000113a0 <__ctype_get_mb_cur_max@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3272]!	; 0xcc8

000113ac <strcpy@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #90112	; 0x16000
   113b4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113b8 <getcon@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #90112	; 0x16000
   113c0:	ldr	pc, [ip, #3256]!	; 0xcb8

000113c4 <__fpending@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #90112	; 0x16000
   113cc:	ldr	pc, [ip, #3248]!	; 0xcb0

000113d0 <mbrtowc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #90112	; 0x16000
   113d8:	ldr	pc, [ip, #3240]!	; 0xca8

000113dc <error@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #90112	; 0x16000
   113e4:	ldr	pc, [ip, #3232]!	; 0xca0

000113e8 <open64@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #90112	; 0x16000
   113f0:	ldr	pc, [ip, #3224]!	; 0xc98

000113f4 <getenv@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #90112	; 0x16000
   113fc:	ldr	pc, [ip, #3216]!	; 0xc90

00011400 <malloc@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #90112	; 0x16000
   11408:	ldr	pc, [ip, #3208]!	; 0xc88

0001140c <__libc_start_main@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #90112	; 0x16000
   11414:	ldr	pc, [ip, #3200]!	; 0xc80

00011418 <__freading@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #90112	; 0x16000
   11420:	ldr	pc, [ip, #3192]!	; 0xc78

00011424 <__gmon_start__@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #90112	; 0x16000
   1142c:	ldr	pc, [ip, #3184]!	; 0xc70

00011430 <getopt_long@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #90112	; 0x16000
   11438:	ldr	pc, [ip, #3176]!	; 0xc68

0001143c <__ctype_b_loc@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #90112	; 0x16000
   11444:	ldr	pc, [ip, #3168]!	; 0xc60

00011448 <exit@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #90112	; 0x16000
   11450:	ldr	pc, [ip, #3160]!	; 0xc58

00011454 <strtoul@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #90112	; 0x16000
   1145c:	ldr	pc, [ip, #3152]!	; 0xc50

00011460 <strlen@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #90112	; 0x16000
   11468:	ldr	pc, [ip, #3144]!	; 0xc48

0001146c <strchr@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #90112	; 0x16000
   11474:	ldr	pc, [ip, #3136]!	; 0xc40

00011478 <ungetc@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #90112	; 0x16000
   11480:	ldr	pc, [ip, #3128]!	; 0xc38

00011484 <__errno_location@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #90112	; 0x16000
   1148c:	ldr	pc, [ip, #3120]!	; 0xc30

00011490 <__cxa_atexit@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #90112	; 0x16000
   11498:	ldr	pc, [ip, #3112]!	; 0xc28

0001149c <getgid@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #90112	; 0x16000
   114a4:	ldr	pc, [ip, #3104]!	; 0xc20

000114a8 <getgrouplist@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #90112	; 0x16000
   114b0:	ldr	pc, [ip, #3096]!	; 0xc18

000114b4 <memset@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #90112	; 0x16000
   114bc:	ldr	pc, [ip, #3088]!	; 0xc10

000114c0 <fscanf@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #90112	; 0x16000
   114c8:	ldr	pc, [ip, #3080]!	; 0xc08

000114cc <__printf_chk@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #90112	; 0x16000
   114d4:	ldr	pc, [ip, #3072]!	; 0xc00

000114d8 <fileno@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #90112	; 0x16000
   114e0:	ldr	pc, [ip, #3064]!	; 0xbf8

000114e4 <__fprintf_chk@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #90112	; 0x16000
   114ec:	ldr	pc, [ip, #3056]!	; 0xbf0

000114f0 <fclose@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #90112	; 0x16000
   114f8:	ldr	pc, [ip, #3048]!	; 0xbe8

000114fc <fseeko64@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #90112	; 0x16000
   11504:	ldr	pc, [ip, #3040]!	; 0xbe0

00011508 <__uflow@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #90112	; 0x16000
   11510:	ldr	pc, [ip, #3032]!	; 0xbd8

00011514 <__overflow@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #90112	; 0x16000
   1151c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011520 <setlocale@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #90112	; 0x16000
   11528:	ldr	pc, [ip, #3016]!	; 0xbc8

0001152c <endpwent@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #90112	; 0x16000
   11534:	ldr	pc, [ip, #3008]!	; 0xbc0

00011538 <strrchr@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #90112	; 0x16000
   11540:	ldr	pc, [ip, #3000]!	; 0xbb8

00011544 <nl_langinfo@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #90112	; 0x16000
   1154c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011550 <getgroups@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #90112	; 0x16000
   11558:	ldr	pc, [ip, #2984]!	; 0xba8

0001155c <bindtextdomain@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #90112	; 0x16000
   11564:	ldr	pc, [ip, #2976]!	; 0xba0

00011568 <strncmp@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #90112	; 0x16000
   11570:	ldr	pc, [ip, #2968]!	; 0xb98

00011574 <abort@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #90112	; 0x16000
   1157c:	ldr	pc, [ip, #2960]!	; 0xb90

00011580 <close@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #90112	; 0x16000
   11588:	ldr	pc, [ip, #2952]!	; 0xb88

0001158c <getgrgid@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #90112	; 0x16000
   11594:	ldr	pc, [ip, #2944]!	; 0xb80

00011598 <getgrnam@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #90112	; 0x16000
   115a0:	ldr	pc, [ip, #2936]!	; 0xb78

000115a4 <__assert_fail@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #90112	; 0x16000
   115ac:	ldr	pc, [ip, #2928]!	; 0xb70

Disassembly of section .text:

000115b0 <close_stdout@@Base-0x13ec>:
   115b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115b4:	sub	sp, sp, #60	; 0x3c
   115b8:	ldr	r6, [pc, #3196]	; 1223c <__assert_fail@plt+0xc98>
   115bc:	mov	r5, #0
   115c0:	ldr	r2, [pc, #3192]	; 12240 <__assert_fail@plt+0xc9c>
   115c4:	mov	r4, r1
   115c8:	add	r6, pc, r6
   115cc:	str	r5, [sp, #28]
   115d0:	str	r5, [sp, #20]
   115d4:	mov	r7, r0
   115d8:	ldr	r2, [r6, r2]
   115dc:	mov	sl, #1
   115e0:	ldr	r1, [pc, #3164]	; 12244 <__assert_fail@plt+0xca0>
   115e4:	str	r5, [sp, #24]
   115e8:	ldr	r2, [r2]
   115ec:	add	r1, pc, r1
   115f0:	str	r5, [sp, #32]
   115f4:	str	r1, [sp, #36]	; 0x24
   115f8:	str	r2, [sp, #52]	; 0x34
   115fc:	bl	112bc <is_selinux_enabled@plt>
   11600:	ldr	r2, [pc, #3136]	; 12248 <__assert_fail@plt+0xca4>
   11604:	ldr	r3, [pc, #3136]	; 1224c <__assert_fail@plt+0xca8>
   11608:	add	r2, pc, r2
   1160c:	str	r2, [sp, #40]	; 0x28
   11610:	add	r3, pc, r3
   11614:	str	r3, [sp, #44]	; 0x2c
   11618:	ldr	fp, [pc, #3120]	; 12250 <__assert_fail@plt+0xcac>
   1161c:	ldr	r9, [pc, #3120]	; 12254 <__assert_fail@plt+0xcb0>
   11620:	add	fp, pc, fp
   11624:	ldr	r8, [pc, #3116]	; 12258 <__assert_fail@plt+0xcb4>
   11628:	add	r9, pc, r9
   1162c:	add	r8, pc, r8
   11630:	cmp	r0, r5
   11634:	movle	r0, #0
   11638:	movgt	r0, #1
   1163c:	str	r0, [sp, #16]
   11640:	ldr	r0, [r4]
   11644:	bl	12bbc <close_stdout@@Base+0x220>
   11648:	ldr	r1, [pc, #3084]	; 1225c <__assert_fail@plt+0xcb8>
   1164c:	mov	r0, #6
   11650:	add	r1, pc, r1
   11654:	bl	11520 <setlocale@plt>
   11658:	ldr	r1, [pc, #3072]	; 12260 <__assert_fail@plt+0xcbc>
   1165c:	mov	r0, fp
   11660:	add	r1, pc, r1
   11664:	bl	1155c <bindtextdomain@plt>
   11668:	mov	r0, fp
   1166c:	bl	11358 <textdomain@plt>
   11670:	ldr	r3, [pc, #3052]	; 12264 <__assert_fail@plt+0xcc0>
   11674:	ldr	r0, [r6, r3]
   11678:	bl	16a34 <close_stdout@@Base+0x4098>
   1167c:	mov	fp, #0
   11680:	mov	r0, r7
   11684:	str	fp, [sp]
   11688:	mov	r1, r4
   1168c:	mov	r2, r9
   11690:	mov	r3, r8
   11694:	bl	11430 <getopt_long@plt>
   11698:	cmn	r0, #1
   1169c:	beq	11794 <__assert_fail@plt+0x1f0>
   116a0:	cmp	r0, #97	; 0x61
   116a4:	beq	1167c <__assert_fail@plt+0xd8>
   116a8:	ble	116d4 <__assert_fail@plt+0x130>
   116ac:	cmp	r0, #114	; 0x72
   116b0:	beq	117f8 <__assert_fail@plt+0x254>
   116b4:	bgt	11708 <__assert_fail@plt+0x164>
   116b8:	cmp	r0, #103	; 0x67
   116bc:	beq	11738 <__assert_fail@plt+0x194>
   116c0:	cmp	r0, #110	; 0x6e
   116c4:	bne	117e8 <__assert_fail@plt+0x244>
   116c8:	ldr	r3, [sp, #36]	; 0x24
   116cc:	strb	sl, [r3, #1]
   116d0:	b	1167c <__assert_fail@plt+0xd8>
   116d4:	cmn	r0, #2
   116d8:	beq	117f0 <__assert_fail@plt+0x24c>
   116dc:	ble	11744 <__assert_fail@plt+0x1a0>
   116e0:	cmp	r0, #71	; 0x47
   116e4:	beq	11724 <__assert_fail@plt+0x180>
   116e8:	cmp	r0, #90	; 0x5a
   116ec:	bne	117e8 <__assert_fail@plt+0x244>
   116f0:	ldr	r1, [sp, #16]
   116f4:	cmp	r1, #0
   116f8:	beq	11804 <__assert_fail@plt+0x260>
   116fc:	ldr	r2, [sp, #40]	; 0x28
   11700:	strb	sl, [r2]
   11704:	b	1167c <__assert_fail@plt+0xd8>
   11708:	cmp	r0, #117	; 0x75
   1170c:	beq	11730 <__assert_fail@plt+0x18c>
   11710:	cmp	r0, #122	; 0x7a
   11714:	bne	117e8 <__assert_fail@plt+0x244>
   11718:	mov	r2, #1
   1171c:	str	r2, [sp, #32]
   11720:	b	1167c <__assert_fail@plt+0xd8>
   11724:	mov	r3, #1
   11728:	str	r3, [sp, #24]
   1172c:	b	1167c <__assert_fail@plt+0xd8>
   11730:	mov	r5, #1
   11734:	b	1167c <__assert_fail@plt+0xd8>
   11738:	mov	r1, #1
   1173c:	str	r1, [sp, #20]
   11740:	b	1167c <__assert_fail@plt+0xd8>
   11744:	cmn	r0, #3
   11748:	bne	117e8 <__assert_fail@plt+0x244>
   1174c:	ldr	r2, [pc, #2836]	; 12268 <__assert_fail@plt+0xcc4>
   11750:	ldr	r3, [pc, #2836]	; 1226c <__assert_fail@plt+0xcc8>
   11754:	ldr	r1, [pc, #2836]	; 12270 <__assert_fail@plt+0xccc>
   11758:	ldr	r0, [r6, r2]
   1175c:	ldr	r3, [r6, r3]
   11760:	add	r1, pc, r1
   11764:	ldr	r2, [pc, #2824]	; 12274 <__assert_fail@plt+0xcd0>
   11768:	ldr	r0, [r0]
   1176c:	add	r2, pc, r2
   11770:	ldr	r3, [r3]
   11774:	stm	sp, {r1, r2, fp}
   11778:	ldr	r1, [pc, #2808]	; 12278 <__assert_fail@plt+0xcd4>
   1177c:	ldr	r2, [pc, #2808]	; 1227c <__assert_fail@plt+0xcd8>
   11780:	add	r1, pc, r1
   11784:	add	r2, pc, r2
   11788:	bl	14ca4 <close_stdout@@Base+0x2308>
   1178c:	mov	r0, fp
   11790:	bl	11448 <exit@plt>
   11794:	ldr	r3, [pc, #2788]	; 12280 <__assert_fail@plt+0xcdc>
   11798:	ldr	r8, [r6, r3]
   1179c:	ldr	r3, [r8]
   117a0:	rsb	r7, r3, r7
   117a4:	cmp	r7, #1
   117a8:	bls	11828 <__assert_fail@plt+0x284>
   117ac:	ldr	r1, [pc, #2768]	; 12284 <__assert_fail@plt+0xce0>
   117b0:	mov	r2, #5
   117b4:	mov	r0, fp
   117b8:	add	r1, pc, r1
   117bc:	bl	11334 <dcgettext@plt>
   117c0:	ldr	r3, [r8]
   117c4:	add	r3, r3, #1
   117c8:	mov	r5, r0
   117cc:	ldr	r0, [r4, r3, lsl #2]
   117d0:	bl	1440c <close_stdout@@Base+0x1a70>
   117d4:	mov	r1, fp
   117d8:	mov	r2, r5
   117dc:	mov	r3, r0
   117e0:	mov	r0, fp
   117e4:	bl	113dc <error@plt>
   117e8:	mov	r0, #1
   117ec:	bl	124a4 <__assert_fail@plt+0xf00>
   117f0:	mov	r0, fp
   117f4:	bl	124a4 <__assert_fail@plt+0xf00>
   117f8:	mov	r1, #1
   117fc:	str	r1, [sp, #28]
   11800:	b	1167c <__assert_fail@plt+0xd8>
   11804:	mov	r0, r1
   11808:	mov	r2, #5
   1180c:	ldr	r1, [sp, #44]	; 0x2c
   11810:	bl	11334 <dcgettext@plt>
   11814:	ldr	r1, [sp, #16]
   11818:	mov	r2, r0
   1181c:	mov	r0, #1
   11820:	bl	113dc <error@plt>
   11824:	b	116fc <__assert_fail@plt+0x158>
   11828:	cmp	r7, #0
   1182c:	beq	11844 <__assert_fail@plt+0x2a0>
   11830:	ldr	r3, [pc, #2640]	; 12288 <__assert_fail@plt+0xce4>
   11834:	add	r3, pc, r3
   11838:	ldrb	r3, [r3]
   1183c:	cmp	r3, #0
   11840:	bne	11d44 <__assert_fail@plt+0x7a0>
   11844:	ldr	r3, [pc, #2624]	; 1228c <__assert_fail@plt+0xce8>
   11848:	ldr	r2, [sp, #20]
   1184c:	add	r3, pc, r3
   11850:	ldr	r1, [sp, #24]
   11854:	add	r9, r5, r2
   11858:	ldrb	r3, [r3]
   1185c:	add	r9, r9, r1
   11860:	add	r3, r9, r3
   11864:	cmp	r3, #1
   11868:	ble	11890 <__assert_fail@plt+0x2ec>
   1186c:	ldr	r1, [pc, #2588]	; 12290 <__assert_fail@plt+0xcec>
   11870:	mov	r2, #5
   11874:	mov	r0, #0
   11878:	add	r1, pc, r1
   1187c:	bl	11334 <dcgettext@plt>
   11880:	mov	r1, #0
   11884:	mov	r2, r0
   11888:	mov	r0, #1
   1188c:	bl	113dc <error@plt>
   11890:	ldr	r3, [pc, #2556]	; 12294 <__assert_fail@plt+0xcf0>
   11894:	add	r3, pc, r3
   11898:	ldrb	r2, [r3]
   1189c:	cmn	r9, r2
   118a0:	movne	r9, #0
   118a4:	moveq	r9, #1
   118a8:	bne	11918 <__assert_fail@plt+0x374>
   118ac:	ldr	r2, [sp, #28]
   118b0:	cmp	r2, #0
   118b4:	bne	118c4 <__assert_fail@plt+0x320>
   118b8:	ldrb	r3, [r3, #1]
   118bc:	cmp	r3, #0
   118c0:	beq	118e8 <__assert_fail@plt+0x344>
   118c4:	ldr	r1, [pc, #2508]	; 12298 <__assert_fail@plt+0xcf4>
   118c8:	mov	r2, #5
   118cc:	mov	r0, #0
   118d0:	add	r1, pc, r1
   118d4:	bl	11334 <dcgettext@plt>
   118d8:	mov	r1, #0
   118dc:	mov	r2, r0
   118e0:	mov	r0, #1
   118e4:	bl	113dc <error@plt>
   118e8:	ldr	r3, [sp, #32]
   118ec:	cmp	r3, #0
   118f0:	beq	11918 <__assert_fail@plt+0x374>
   118f4:	ldr	r1, [pc, #2464]	; 1229c <__assert_fail@plt+0xcf8>
   118f8:	mov	r2, #5
   118fc:	mov	r0, #0
   11900:	add	r1, pc, r1
   11904:	bl	11334 <dcgettext@plt>
   11908:	mov	r1, #0
   1190c:	mov	r2, r0
   11910:	mov	r0, #1
   11914:	bl	113dc <error@plt>
   11918:	cmp	r7, #0
   1191c:	bne	11adc <__assert_fail@plt+0x538>
   11920:	ldr	r3, [pc, #2424]	; 122a0 <__assert_fail@plt+0xcfc>
   11924:	add	r3, pc, r3
   11928:	ldrb	r3, [r3]
   1192c:	cmp	r3, #0
   11930:	beq	11c00 <__assert_fail@plt+0x65c>
   11934:	ldr	r1, [sp, #16]
   11938:	cmp	r1, #0
   1193c:	bne	11de4 <__assert_fail@plt+0x840>
   11940:	cmp	r5, #0
   11944:	ldrne	r2, [sp, #28]
   11948:	eorne	r3, r2, #1
   1194c:	bne	1197c <__assert_fail@plt+0x3d8>
   11950:	ldr	r3, [sp, #24]
   11954:	ldr	r1, [sp, #20]
   11958:	eor	r2, r3, #1
   1195c:	eor	r3, r1, #1
   11960:	tst	r2, r3
   11964:	moveq	r3, r5
   11968:	ldrne	r3, [pc, #2356]	; 122a4 <__assert_fail@plt+0xd00>
   1196c:	addne	r3, pc, r3
   11970:	ldrbne	r3, [r3]
   11974:	eorne	r3, r3, #1
   11978:	and	r3, r3, #1
   1197c:	cmp	r3, #0
   11980:	bne	11c30 <__assert_fail@plt+0x68c>
   11984:	cmp	r5, #0
   11988:	ldrne	r3, [sp, #28]
   1198c:	bne	119c0 <__assert_fail@plt+0x41c>
   11990:	ldr	r2, [sp, #20]
   11994:	cmp	r2, #0
   11998:	movne	r3, r5
   1199c:	bne	119bc <__assert_fail@plt+0x418>
   119a0:	ldr	r3, [sp, #24]
   119a4:	cmp	r3, #0
   119a8:	movne	r3, #1
   119ac:	ldreq	r3, [pc, #2292]	; 122a8 <__assert_fail@plt+0xd04>
   119b0:	addeq	r3, pc, r3
   119b4:	ldrbeq	r3, [r3]
   119b8:	eoreq	r3, r3, #1
   119bc:	and	r3, r3, #1
   119c0:	cmp	r3, #0
   119c4:	bne	11c8c <__assert_fail@plt+0x6e8>
   119c8:	cmp	r5, #0
   119cc:	bne	11b50 <__assert_fail@plt+0x5ac>
   119d0:	ldr	r1, [sp, #24]
   119d4:	ldr	r2, [sp, #20]
   119d8:	orrs	r1, r1, r2
   119dc:	bne	119f4 <__assert_fail@plt+0x450>
   119e0:	ldr	r3, [pc, #2244]	; 122ac <__assert_fail@plt+0xd08>
   119e4:	add	r3, pc, r3
   119e8:	ldrb	r3, [r3]
   119ec:	cmp	r3, #0
   119f0:	bne	11a3c <__assert_fail@plt+0x498>
   119f4:	bl	11484 <__errno_location@plt>
   119f8:	mov	r5, #0
   119fc:	str	r5, [r0]
   11a00:	mov	r4, r0
   11a04:	bl	1137c <getegid@plt>
   11a08:	ldr	r3, [pc, #2208]	; 122b0 <__assert_fail@plt+0xd0c>
   11a0c:	add	r3, pc, r3
   11a10:	cmn	r0, #1
   11a14:	str	r0, [r3, #16]
   11a18:	beq	11e64 <__assert_fail@plt+0x8c0>
   11a1c:	mov	r5, #0
   11a20:	str	r5, [r4]
   11a24:	bl	1149c <getgid@plt>
   11a28:	ldr	r3, [pc, #2180]	; 122b4 <__assert_fail@plt+0xd10>
   11a2c:	add	r3, pc, r3
   11a30:	cmn	r0, #1
   11a34:	str	r0, [r3, #20]
   11a38:	beq	11e30 <__assert_fail@plt+0x88c>
   11a3c:	mov	r4, #0
   11a40:	ldr	r1, [sp, #20]
   11a44:	cmp	r1, #0
   11a48:	beq	11ba8 <__assert_fail@plt+0x604>
   11a4c:	ldr	r2, [sp, #28]
   11a50:	cmp	r2, #0
   11a54:	beq	11d6c <__assert_fail@plt+0x7c8>
   11a58:	ldr	r3, [pc, #2136]	; 122b8 <__assert_fail@plt+0xd14>
   11a5c:	add	r3, pc, r3
   11a60:	ldr	r0, [r3, #20]
   11a64:	ldr	r3, [pc, #2128]	; 122bc <__assert_fail@plt+0xd18>
   11a68:	add	r3, pc, r3
   11a6c:	ldrb	r1, [r3, #1]
   11a70:	bl	126c0 <__assert_fail@plt+0x111c>
   11a74:	cmp	r0, #0
   11a78:	bne	11bf4 <__assert_fail@plt+0x650>
   11a7c:	ldr	r2, [pc, #2108]	; 122c0 <__assert_fail@plt+0xd1c>
   11a80:	mov	r1, #0
   11a84:	ldr	r3, [pc, #2012]	; 12268 <__assert_fail@plt+0xcc4>
   11a88:	add	r2, pc, r2
   11a8c:	strb	r1, [r2]
   11a90:	ldr	r4, [r6, r3]
   11a94:	ldr	r0, [r4]
   11a98:	ldr	r2, [sp, #32]
   11a9c:	ldr	r3, [r0, #20]
   11aa0:	cmp	r2, #0
   11aa4:	ldr	r2, [r0, #24]
   11aa8:	moveq	r1, #10
   11aac:	movne	r1, #0
   11ab0:	cmp	r3, r2
   11ab4:	addcc	r2, r3, #1
   11ab8:	strcc	r2, [r0, #20]
   11abc:	strbcc	r1, [r3]
   11ac0:	bcs	12228 <__assert_fail@plt+0xc84>
   11ac4:	ldr	r3, [pc, #2040]	; 122c4 <__assert_fail@plt+0xd20>
   11ac8:	add	r3, pc, r3
   11acc:	ldrb	r0, [r3]
   11ad0:	rsbs	r0, r0, #1
   11ad4:	movcc	r0, #0
   11ad8:	bl	11448 <exit@plt>
   11adc:	ldr	r3, [r8]
   11ae0:	ldr	r4, [r4, r3, lsl #2]
   11ae4:	ldrb	r3, [r4]
   11ae8:	cmp	r3, #0
   11aec:	bne	11da8 <__assert_fail@plt+0x804>
   11af0:	ldr	r1, [pc, #2000]	; 122c8 <__assert_fail@plt+0xd24>
   11af4:	mov	r0, #0
   11af8:	mov	r2, #5
   11afc:	mov	r7, r0
   11b00:	add	r1, pc, r1
   11b04:	bl	11334 <dcgettext@plt>
   11b08:	mov	r3, r4
   11b0c:	mov	r1, r7
   11b10:	mov	r2, r0
   11b14:	mov	r0, #1
   11b18:	bl	113dc <error@plt>
   11b1c:	ldr	r0, [r7]
   11b20:	bl	14fac <close_stdout@@Base+0x2610>
   11b24:	ldr	r3, [pc, #1952]	; 122cc <__assert_fail@plt+0xd28>
   11b28:	ldr	r1, [r7, #8]
   11b2c:	cmp	r5, #0
   11b30:	ldr	r2, [r7, #12]
   11b34:	add	r3, pc, r3
   11b38:	str	r1, [r3, #8]
   11b3c:	str	r1, [r3, #12]
   11b40:	str	r2, [r3, #16]
   11b44:	str	r2, [r3, #20]
   11b48:	mov	r4, r0
   11b4c:	beq	11a40 <__assert_fail@plt+0x49c>
   11b50:	ldr	r3, [sp, #28]
   11b54:	cmp	r3, #0
   11b58:	beq	11c20 <__assert_fail@plt+0x67c>
   11b5c:	ldr	r3, [pc, #1900]	; 122d0 <__assert_fail@plt+0xd2c>
   11b60:	add	r3, pc, r3
   11b64:	ldr	r5, [r3, #12]
   11b68:	ldr	r4, [pc, #1892]	; 122d4 <__assert_fail@plt+0xd30>
   11b6c:	add	r4, pc, r4
   11b70:	ldrb	r3, [r4, #1]
   11b74:	cmp	r3, #0
   11b78:	bne	11ce8 <__assert_fail@plt+0x744>
   11b7c:	ldr	r2, [pc, #1876]	; 122d8 <__assert_fail@plt+0xd34>
   11b80:	mov	r0, r5
   11b84:	mov	r1, #0
   11b88:	add	r2, pc, r2
   11b8c:	add	r2, r2, #24
   11b90:	bl	12b58 <close_stdout@@Base+0x1bc>
   11b94:	ldr	r3, [pc, #1740]	; 12268 <__assert_fail@plt+0xcc4>
   11b98:	ldr	r4, [r6, r3]
   11b9c:	ldr	r1, [r4]
   11ba0:	bl	11298 <fputs_unlocked@plt>
   11ba4:	b	11a94 <__assert_fail@plt+0x4f0>
   11ba8:	ldr	r3, [sp, #24]
   11bac:	cmp	r3, #0
   11bb0:	beq	11d7c <__assert_fail@plt+0x7d8>
   11bb4:	ldr	r1, [sp, #32]
   11bb8:	mov	r0, r4
   11bbc:	ldr	ip, [pc, #1816]	; 122dc <__assert_fail@plt+0xd38>
   11bc0:	cmp	r1, #0
   11bc4:	add	ip, pc, ip
   11bc8:	moveq	r3, #32
   11bcc:	movne	r3, #0
   11bd0:	str	r3, [sp, #4]
   11bd4:	ldr	r1, [ip, #12]
   11bd8:	ldr	r2, [ip, #20]
   11bdc:	ldr	r3, [ip, #16]
   11be0:	ldrb	ip, [ip, #1]
   11be4:	str	ip, [sp]
   11be8:	bl	12754 <__assert_fail@plt+0x11b0>
   11bec:	cmp	r0, #0
   11bf0:	beq	11a7c <__assert_fail@plt+0x4d8>
   11bf4:	ldr	r3, [pc, #1644]	; 12268 <__assert_fail@plt+0xcc4>
   11bf8:	ldr	r4, [r6, r3]
   11bfc:	b	11a94 <__assert_fail@plt+0x4f0>
   11c00:	cmp	r9, #0
   11c04:	beq	11940 <__assert_fail@plt+0x39c>
   11c08:	ldr	r0, [pc, #1744]	; 122e0 <__assert_fail@plt+0xd3c>
   11c0c:	add	r0, pc, r0
   11c10:	bl	113f4 <getenv@plt>
   11c14:	cmp	r0, #0
   11c18:	bne	11940 <__assert_fail@plt+0x39c>
   11c1c:	b	11934 <__assert_fail@plt+0x390>
   11c20:	ldr	r3, [pc, #1724]	; 122e4 <__assert_fail@plt+0xd40>
   11c24:	add	r3, pc, r3
   11c28:	ldr	r5, [r3, #8]
   11c2c:	b	11b68 <__assert_fail@plt+0x5c4>
   11c30:	bl	11484 <__errno_location@plt>
   11c34:	mov	r4, #0
   11c38:	str	r4, [r0]
   11c3c:	mov	r7, r0
   11c40:	bl	11364 <geteuid@plt>
   11c44:	ldr	r2, [pc, #1692]	; 122e8 <__assert_fail@plt+0xd44>
   11c48:	add	r2, pc, r2
   11c4c:	cmn	r0, #1
   11c50:	str	r0, [r2, #8]
   11c54:	bne	11984 <__assert_fail@plt+0x3e0>
   11c58:	ldr	r7, [r7]
   11c5c:	cmp	r7, r4
   11c60:	beq	11984 <__assert_fail@plt+0x3e0>
   11c64:	ldr	r1, [pc, #1664]	; 122ec <__assert_fail@plt+0xd48>
   11c68:	mov	r0, r4
   11c6c:	mov	r2, #5
   11c70:	add	r1, pc, r1
   11c74:	bl	11334 <dcgettext@plt>
   11c78:	mov	r1, r7
   11c7c:	mov	r2, r0
   11c80:	mov	r0, #1
   11c84:	bl	113dc <error@plt>
   11c88:	b	11984 <__assert_fail@plt+0x3e0>
   11c8c:	bl	11484 <__errno_location@plt>
   11c90:	mov	r4, #0
   11c94:	str	r4, [r0]
   11c98:	mov	r7, r0
   11c9c:	bl	112ec <getuid@plt>
   11ca0:	ldr	r2, [pc, #1608]	; 122f0 <__assert_fail@plt+0xd4c>
   11ca4:	add	r2, pc, r2
   11ca8:	cmn	r0, #1
   11cac:	str	r0, [r2, #12]
   11cb0:	bne	119c8 <__assert_fail@plt+0x424>
   11cb4:	ldr	r7, [r7]
   11cb8:	cmp	r7, r4
   11cbc:	beq	119c8 <__assert_fail@plt+0x424>
   11cc0:	ldr	r1, [pc, #1580]	; 122f4 <__assert_fail@plt+0xd50>
   11cc4:	mov	r0, r4
   11cc8:	mov	r2, #5
   11ccc:	add	r1, pc, r1
   11cd0:	bl	11334 <dcgettext@plt>
   11cd4:	mov	r1, r7
   11cd8:	mov	r2, r0
   11cdc:	mov	r0, #1
   11ce0:	bl	113dc <error@plt>
   11ce4:	b	119c8 <__assert_fail@plt+0x424>
   11ce8:	mov	r0, r5
   11cec:	bl	112d4 <getpwuid@plt>
   11cf0:	subs	r7, r0, #0
   11cf4:	ldrne	r0, [r7]
   11cf8:	bne	11b94 <__assert_fail@plt+0x5f0>
   11cfc:	ldr	r1, [pc, #1524]	; 122f8 <__assert_fail@plt+0xd54>
   11d00:	mov	r2, #5
   11d04:	add	r1, pc, r1
   11d08:	bl	11334 <dcgettext@plt>
   11d0c:	mov	r1, r7
   11d10:	add	r2, r4, #24
   11d14:	mov	r8, r0
   11d18:	mov	r0, r5
   11d1c:	bl	12b58 <close_stdout@@Base+0x1bc>
   11d20:	mov	r1, r7
   11d24:	mov	r2, r8
   11d28:	mov	r3, r0
   11d2c:	mov	r0, r7
   11d30:	bl	113dc <error@plt>
   11d34:	ldr	r3, [pc, #1472]	; 122fc <__assert_fail@plt+0xd58>
   11d38:	add	r3, pc, r3
   11d3c:	strb	r7, [r3]
   11d40:	b	11b7c <__assert_fail@plt+0x5d8>
   11d44:	ldr	r1, [pc, #1460]	; 12300 <__assert_fail@plt+0xd5c>
   11d48:	mov	r0, fp
   11d4c:	mov	r2, #5
   11d50:	add	r1, pc, r1
   11d54:	bl	11334 <dcgettext@plt>
   11d58:	mov	r1, fp
   11d5c:	mov	r2, r0
   11d60:	mov	r0, #1
   11d64:	bl	113dc <error@plt>
   11d68:	b	11844 <__assert_fail@plt+0x2a0>
   11d6c:	ldr	r3, [pc, #1424]	; 12304 <__assert_fail@plt+0xd60>
   11d70:	add	r3, pc, r3
   11d74:	ldr	r0, [r3, #16]
   11d78:	b	11a64 <__assert_fail@plt+0x4c0>
   11d7c:	ldr	r5, [pc, #1412]	; 12308 <__assert_fail@plt+0xd64>
   11d80:	add	r5, pc, r5
   11d84:	ldrb	r3, [r5]
   11d88:	cmp	r3, #0
   11d8c:	beq	11e98 <__assert_fail@plt+0x8f4>
   11d90:	ldr	r3, [pc, #1232]	; 12268 <__assert_fail@plt+0xcc4>
   11d94:	ldr	r0, [r5, #4]
   11d98:	ldr	r4, [r6, r3]
   11d9c:	ldr	r1, [r4]
   11da0:	bl	11298 <fputs_unlocked@plt>
   11da4:	b	11a94 <__assert_fail@plt+0x4f0>
   11da8:	ldr	r7, [pc, #1372]	; 1230c <__assert_fail@plt+0xd68>
   11dac:	mov	r3, #0
   11db0:	mov	r2, r3
   11db4:	str	r3, [sp]
   11db8:	add	r7, pc, r7
   11dbc:	mov	r0, r4
   11dc0:	add	r1, r7, #8
   11dc4:	bl	14750 <close_stdout@@Base+0x1db4>
   11dc8:	cmp	r0, #0
   11dcc:	bne	11af0 <__assert_fail@plt+0x54c>
   11dd0:	ldr	r0, [r7, #8]
   11dd4:	bl	112d4 <getpwuid@plt>
   11dd8:	subs	r7, r0, #0
   11ddc:	bne	11b1c <__assert_fail@plt+0x578>
   11de0:	b	11af0 <__assert_fail@plt+0x54c>
   11de4:	ldr	r4, [pc, #1316]	; 12310 <__assert_fail@plt+0xd6c>
   11de8:	add	r4, pc, r4
   11dec:	add	r0, r4, #4
   11df0:	bl	113b8 <getcon@plt>
   11df4:	cmp	r0, #0
   11df8:	beq	11940 <__assert_fail@plt+0x39c>
   11dfc:	ldrb	r3, [r4]
   11e00:	cmp	r3, #0
   11e04:	beq	11940 <__assert_fail@plt+0x39c>
   11e08:	ldr	r1, [pc, #1284]	; 12314 <__assert_fail@plt+0xd70>
   11e0c:	mov	r2, #5
   11e10:	mov	r0, #0
   11e14:	add	r1, pc, r1
   11e18:	bl	11334 <dcgettext@plt>
   11e1c:	mov	r1, #0
   11e20:	mov	r2, r0
   11e24:	mov	r0, #1
   11e28:	bl	113dc <error@plt>
   11e2c:	b	11940 <__assert_fail@plt+0x39c>
   11e30:	ldr	r4, [r4]
   11e34:	cmp	r4, r5
   11e38:	beq	11a3c <__assert_fail@plt+0x498>
   11e3c:	ldr	r1, [pc, #1236]	; 12318 <__assert_fail@plt+0xd74>
   11e40:	mov	r0, r5
   11e44:	mov	r2, #5
   11e48:	add	r1, pc, r1
   11e4c:	bl	11334 <dcgettext@plt>
   11e50:	mov	r1, r4
   11e54:	mov	r2, r0
   11e58:	mov	r0, #1
   11e5c:	bl	113dc <error@plt>
   11e60:	b	11a3c <__assert_fail@plt+0x498>
   11e64:	ldr	r7, [r4]
   11e68:	cmp	r7, r5
   11e6c:	beq	11a1c <__assert_fail@plt+0x478>
   11e70:	ldr	r1, [pc, #1188]	; 1231c <__assert_fail@plt+0xd78>
   11e74:	mov	r0, r5
   11e78:	mov	r2, #5
   11e7c:	add	r1, pc, r1
   11e80:	bl	11334 <dcgettext@plt>
   11e84:	mov	r1, r7
   11e88:	mov	r2, r0
   11e8c:	mov	r0, #1
   11e90:	bl	113dc <error@plt>
   11e94:	b	11a1c <__assert_fail@plt+0x478>
   11e98:	ldr	r1, [pc, #1152]	; 12320 <__assert_fail@plt+0xd7c>
   11e9c:	mov	r2, #5
   11ea0:	ldr	r0, [sp, #24]
   11ea4:	add	r1, pc, r1
   11ea8:	bl	11334 <dcgettext@plt>
   11eac:	add	r2, r5, #24
   11eb0:	ldr	r1, [sp, #24]
   11eb4:	mov	r7, r0
   11eb8:	ldr	r0, [r5, #12]
   11ebc:	bl	12b58 <close_stdout@@Base+0x1bc>
   11ec0:	mov	r1, r7
   11ec4:	mov	r2, r0
   11ec8:	mov	r0, #1
   11ecc:	bl	114cc <__printf_chk@plt>
   11ed0:	ldr	r0, [r5, #12]
   11ed4:	bl	112d4 <getpwuid@plt>
   11ed8:	subs	r5, r0, #0
   11edc:	beq	11ef4 <__assert_fail@plt+0x950>
   11ee0:	ldr	r1, [pc, #1084]	; 12324 <__assert_fail@plt+0xd80>
   11ee4:	mov	r0, #1
   11ee8:	ldr	r2, [r5]
   11eec:	add	r1, pc, r1
   11ef0:	bl	114cc <__printf_chk@plt>
   11ef4:	ldr	r1, [pc, #1068]	; 12328 <__assert_fail@plt+0xd84>
   11ef8:	mov	r2, #5
   11efc:	mov	r0, #0
   11f00:	ldr	r7, [pc, #1060]	; 1232c <__assert_fail@plt+0xd88>
   11f04:	add	r1, pc, r1
   11f08:	bl	11334 <dcgettext@plt>
   11f0c:	add	r7, pc, r7
   11f10:	add	r2, r7, #48	; 0x30
   11f14:	mov	r1, #0
   11f18:	mov	r8, r0
   11f1c:	ldr	r0, [r7, #20]
   11f20:	bl	12b58 <close_stdout@@Base+0x1bc>
   11f24:	mov	r1, r8
   11f28:	mov	r2, r0
   11f2c:	mov	r0, #1
   11f30:	bl	114cc <__printf_chk@plt>
   11f34:	ldr	r0, [r7, #20]
   11f38:	bl	1158c <getgrgid@plt>
   11f3c:	cmp	r0, #0
   11f40:	beq	11f58 <__assert_fail@plt+0x9b4>
   11f44:	ldr	r1, [pc, #996]	; 12330 <__assert_fail@plt+0xd8c>
   11f48:	ldr	r2, [r0]
   11f4c:	mov	r0, #1
   11f50:	add	r1, pc, r1
   11f54:	bl	114cc <__printf_chk@plt>
   11f58:	ldr	r7, [pc, #980]	; 12334 <__assert_fail@plt+0xd90>
   11f5c:	add	r7, pc, r7
   11f60:	ldr	r2, [r7, #8]
   11f64:	ldr	r3, [r7, #12]
   11f68:	cmp	r2, r3
   11f6c:	beq	11fcc <__assert_fail@plt+0xa28>
   11f70:	ldr	r1, [pc, #960]	; 12338 <__assert_fail@plt+0xd94>
   11f74:	mov	r2, #5
   11f78:	mov	r0, #0
   11f7c:	add	r1, pc, r1
   11f80:	bl	11334 <dcgettext@plt>
   11f84:	mov	r1, #0
   11f88:	add	r2, r7, #24
   11f8c:	mov	r5, r0
   11f90:	ldr	r0, [r7, #8]
   11f94:	bl	12b58 <close_stdout@@Base+0x1bc>
   11f98:	mov	r1, r5
   11f9c:	mov	r2, r0
   11fa0:	mov	r0, #1
   11fa4:	bl	114cc <__printf_chk@plt>
   11fa8:	ldr	r0, [r7, #8]
   11fac:	bl	112d4 <getpwuid@plt>
   11fb0:	subs	r5, r0, #0
   11fb4:	beq	11fcc <__assert_fail@plt+0xa28>
   11fb8:	ldr	r1, [pc, #892]	; 1233c <__assert_fail@plt+0xd98>
   11fbc:	mov	r0, #1
   11fc0:	ldr	r2, [r5]
   11fc4:	add	r1, pc, r1
   11fc8:	bl	114cc <__printf_chk@plt>
   11fcc:	ldr	r7, [pc, #876]	; 12340 <__assert_fail@plt+0xd9c>
   11fd0:	add	r7, pc, r7
   11fd4:	ldr	r8, [r7, #16]
   11fd8:	ldr	r3, [r7, #20]
   11fdc:	cmp	r8, r3
   11fe0:	beq	12040 <__assert_fail@plt+0xa9c>
   11fe4:	ldr	r1, [pc, #856]	; 12344 <__assert_fail@plt+0xda0>
   11fe8:	mov	r2, #5
   11fec:	mov	r0, #0
   11ff0:	add	r1, pc, r1
   11ff4:	bl	11334 <dcgettext@plt>
   11ff8:	mov	r1, #0
   11ffc:	add	r2, r7, #48	; 0x30
   12000:	mov	r9, r0
   12004:	mov	r0, r8
   12008:	bl	12b58 <close_stdout@@Base+0x1bc>
   1200c:	mov	r1, r9
   12010:	mov	r2, r0
   12014:	mov	r0, #1
   12018:	bl	114cc <__printf_chk@plt>
   1201c:	ldr	r0, [r7, #16]
   12020:	bl	1158c <getgrgid@plt>
   12024:	cmp	r0, #0
   12028:	beq	12040 <__assert_fail@plt+0xa9c>
   1202c:	ldr	r1, [pc, #788]	; 12348 <__assert_fail@plt+0xda4>
   12030:	ldr	r2, [r0]
   12034:	mov	r0, #1
   12038:	add	r1, pc, r1
   1203c:	bl	114cc <__printf_chk@plt>
   12040:	cmp	r4, #0
   12044:	beq	121d8 <__assert_fail@plt+0xc34>
   12048:	cmp	r5, #0
   1204c:	ldrne	r1, [r5, #12]
   12050:	beq	121d0 <__assert_fail@plt+0xc2c>
   12054:	mov	r0, r4
   12058:	add	r2, sp, #48	; 0x30
   1205c:	bl	15020 <close_stdout@@Base+0x2684>
   12060:	subs	r7, r0, #0
   12064:	blt	12178 <__assert_fail@plt+0xbd4>
   12068:	cmp	r7, #0
   1206c:	bne	12150 <__assert_fail@plt+0xbac>
   12070:	ldr	r3, [pc, #496]	; 12268 <__assert_fail@plt+0xcc4>
   12074:	ldr	r4, [r6, r3]
   12078:	ldr	r6, [pc, #716]	; 1234c <__assert_fail@plt+0xda8>
   1207c:	mov	r5, #0
   12080:	ldr	r8, [pc, #712]	; 12350 <__assert_fail@plt+0xdac>
   12084:	add	r6, pc, r6
   12088:	add	r8, pc, r8
   1208c:	add	r6, r6, #48	; 0x30
   12090:	b	12104 <__assert_fail@plt+0xb60>
   12094:	cmp	r5, #0
   12098:	beq	120c0 <__assert_fail@plt+0xb1c>
   1209c:	ldr	r0, [r4]
   120a0:	ldr	r3, [r0, #20]
   120a4:	ldr	r2, [r0, #24]
   120a8:	cmp	r3, r2
   120ac:	addcc	r1, r3, #1
   120b0:	strcc	r1, [r0, #20]
   120b4:	movcc	r2, #44	; 0x2c
   120b8:	strbcc	r2, [r3]
   120bc:	bcs	12230 <__assert_fail@plt+0xc8c>
   120c0:	ldr	r3, [sp, #48]	; 0x30
   120c4:	mov	r2, r6
   120c8:	mov	r1, #0
   120cc:	ldr	r0, [r3, r5, lsl #2]
   120d0:	bl	12b58 <close_stdout@@Base+0x1bc>
   120d4:	ldr	r1, [r4]
   120d8:	bl	11298 <fputs_unlocked@plt>
   120dc:	ldr	r3, [sp, #48]	; 0x30
   120e0:	ldr	r0, [r3, r5, lsl #2]
   120e4:	bl	1158c <getgrgid@plt>
   120e8:	cmp	r0, #0
   120ec:	beq	12100 <__assert_fail@plt+0xb5c>
   120f0:	ldr	r2, [r0]
   120f4:	mov	r1, r8
   120f8:	mov	r0, #1
   120fc:	bl	114cc <__printf_chk@plt>
   12100:	add	r5, r5, #1
   12104:	cmp	r7, r5
   12108:	bgt	12094 <__assert_fail@plt+0xaf0>
   1210c:	ldr	r5, [pc, #576]	; 12354 <__assert_fail@plt+0xdb0>
   12110:	ldr	r0, [sp, #48]	; 0x30
   12114:	add	r5, pc, r5
   12118:	bl	112f8 <free@plt>
   1211c:	ldr	r3, [r5, #4]
   12120:	cmp	r3, #0
   12124:	beq	11a94 <__assert_fail@plt+0x4f0>
   12128:	ldr	r1, [pc, #552]	; 12358 <__assert_fail@plt+0xdb4>
   1212c:	mov	r2, #5
   12130:	mov	r0, #0
   12134:	add	r1, pc, r1
   12138:	bl	11334 <dcgettext@plt>
   1213c:	ldr	r2, [r5, #4]
   12140:	mov	r1, r0
   12144:	mov	r0, #1
   12148:	bl	114cc <__printf_chk@plt>
   1214c:	b	11a94 <__assert_fail@plt+0x4f0>
   12150:	ldr	r1, [pc, #516]	; 1235c <__assert_fail@plt+0xdb8>
   12154:	mov	r2, #5
   12158:	mov	r0, #0
   1215c:	add	r1, pc, r1
   12160:	bl	11334 <dcgettext@plt>
   12164:	ldr	r3, [pc, #252]	; 12268 <__assert_fail@plt+0xcc4>
   12168:	ldr	r4, [r6, r3]
   1216c:	ldr	r1, [r4]
   12170:	bl	11298 <fputs_unlocked@plt>
   12174:	b	12078 <__assert_fail@plt+0xad4>
   12178:	bl	11484 <__errno_location@plt>
   1217c:	ldr	r1, [pc, #476]	; 12360 <__assert_fail@plt+0xdbc>
   12180:	mov	r2, #5
   12184:	add	r1, pc, r1
   12188:	ldr	r5, [r0]
   1218c:	mov	r0, #0
   12190:	bl	11334 <dcgettext@plt>
   12194:	mov	r7, r0
   12198:	mov	r0, r4
   1219c:	bl	1440c <close_stdout@@Base+0x1a70>
   121a0:	mov	r1, r5
   121a4:	mov	r2, r7
   121a8:	mov	r3, r0
   121ac:	mov	r0, #0
   121b0:	bl	113dc <error@plt>
   121b4:	ldr	r2, [pc, #424]	; 12364 <__assert_fail@plt+0xdc0>
   121b8:	mov	r1, #0
   121bc:	ldr	r3, [pc, #164]	; 12268 <__assert_fail@plt+0xcc4>
   121c0:	add	r2, pc, r2
   121c4:	strb	r1, [r2]
   121c8:	ldr	r4, [r6, r3]
   121cc:	b	11a94 <__assert_fail@plt+0x4f0>
   121d0:	mvn	r1, #0
   121d4:	b	12054 <__assert_fail@plt+0xab0>
   121d8:	ldr	r3, [pc, #392]	; 12368 <__assert_fail@plt+0xdc4>
   121dc:	mov	r0, r4
   121e0:	add	r2, sp, #48	; 0x30
   121e4:	add	r3, pc, r3
   121e8:	ldr	r1, [r3, #16]
   121ec:	bl	15020 <close_stdout@@Base+0x2684>
   121f0:	subs	r7, r0, #0
   121f4:	bge	12068 <__assert_fail@plt+0xac4>
   121f8:	bl	11484 <__errno_location@plt>
   121fc:	ldr	r1, [pc, #360]	; 1236c <__assert_fail@plt+0xdc8>
   12200:	mov	r2, #5
   12204:	add	r1, pc, r1
   12208:	ldr	r5, [r0]
   1220c:	mov	r0, r4
   12210:	bl	11334 <dcgettext@plt>
   12214:	mov	r1, r5
   12218:	mov	r2, r0
   1221c:	mov	r0, r4
   12220:	bl	113dc <error@plt>
   12224:	b	121b4 <__assert_fail@plt+0xc10>
   12228:	bl	11514 <__overflow@plt>
   1222c:	b	11ac4 <__assert_fail@plt+0x520>
   12230:	mov	r1, #44	; 0x2c
   12234:	bl	11514 <__overflow@plt>
   12238:	b	120c0 <__assert_fail@plt+0xb1c>
   1223c:	andeq	r6, r1, r0, lsr sl
   12240:	andeq	r0, r0, r4, lsr #2
   12244:			; <UNDEFINED> instruction: 0x00016bb8
   12248:	muleq	r1, ip, fp
   1224c:			; <UNDEFINED> instruction: 0x000058bc
   12250:	ldrdeq	r5, [r0], -r4
   12254:	andeq	r5, r0, r0, lsl #18
   12258:	andeq	r6, r1, r8, lsl #16
   1225c:	andeq	r5, r0, r4, ror #16
   12260:	andeq	r5, r0, r8, asr r8
   12264:	andeq	r0, r0, r4, lsr r1
   12268:	andeq	r0, r0, r0, asr #2
   1226c:	andeq	r0, r0, ip, lsr #2
   12270:	andeq	r5, r0, r8, lsr #15
   12274:	andeq	r5, r0, ip, lsr #15
   12278:	andeq	r5, r0, r4, lsl #15
   1227c:	andeq	r5, r0, ip, ror #12
   12280:	andeq	r0, r0, r8, lsr #2
   12284:	andeq	r5, r0, ip, ror r7
   12288:	andeq	r6, r1, r0, ror r9
   1228c:	andeq	r6, r1, r8, asr r9
   12290:	andeq	r5, r0, r4, lsl #14
   12294:	andeq	r6, r1, r0, lsl r9
   12298:	ldrdeq	r5, [r0], -r8
   1229c:	andeq	r5, r0, r0, ror #13
   122a0:	andeq	r6, r1, r0, lsl #17
   122a4:	andeq	r6, r1, r8, lsr r8
   122a8:	strdeq	r6, [r1], -r4
   122ac:	andeq	r6, r1, r0, asr #15
   122b0:	muleq	r1, r8, r7
   122b4:	andeq	r6, r1, r8, ror r7
   122b8:	andeq	r6, r1, r8, asr #14
   122bc:	andeq	r6, r1, ip, lsr r7
   122c0:	andeq	r6, r1, ip, asr #13
   122c4:	andeq	r6, r1, ip, lsl #13
   122c8:	andeq	r5, r0, ip, lsr r5
   122cc:	andeq	r6, r1, r0, ror r6
   122d0:	andeq	r6, r1, r4, asr #12
   122d4:	andeq	r6, r1, r8, lsr r6
   122d8:	andeq	r6, r1, ip, lsl r6
   122dc:	andeq	r6, r1, r0, ror #11
   122e0:	andeq	r5, r0, r4, lsl #8
   122e4:	andeq	r6, r1, r0, lsl #11
   122e8:	andeq	r6, r1, ip, asr r5
   122ec:	andeq	r5, r0, r0, ror #7
   122f0:	andeq	r6, r1, r0, lsl #10
   122f4:	andeq	r5, r0, r0, lsr #7
   122f8:	andeq	r5, r0, ip, lsr #7
   122fc:	andeq	r6, r1, ip, lsl r4
   12300:	strdeq	r5, [r0], -r8
   12304:	andeq	r6, r1, r4, lsr r4
   12308:	andeq	r6, r1, r4, lsr #8
   1230c:	andeq	r6, r1, ip, ror #7
   12310:			; <UNDEFINED> instruction: 0x000163bc
   12314:	andeq	r5, r0, ip, lsl #4
   12318:	andeq	r5, r0, r4, asr r2
   1231c:	andeq	r5, r0, r4, lsl #4
   12320:	andeq	r5, r0, ip, lsr #4
   12324:	andeq	r5, r0, ip, ror #3
   12328:	ldrdeq	r5, [r0], -ip
   1232c:	muleq	r1, r8, r2
   12330:	andeq	r5, r0, r8, lsl #3
   12334:	andeq	r6, r1, r8, asr #4
   12338:	andeq	r5, r0, ip, ror #2
   1233c:	andeq	r5, r0, r4, lsl r1
   12340:	ldrdeq	r6, [r1], -r4
   12344:	andeq	r5, r0, r4, lsl #2
   12348:	andeq	r5, r0, r0, lsr #1
   1234c:	andeq	r6, r1, r0, lsr #2
   12350:	andeq	r5, r0, r0, asr r0
   12354:	muleq	r1, r0, r0
   12358:	andeq	r5, r0, ip, lsr #32
   1235c:	strdeq	r4, [r0], -r8
   12360:	andeq	r4, r0, ip, ror pc
   12364:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12368:	andeq	r5, r1, r0, asr #31
   1236c:	andeq	r4, r0, r0, lsr #30
   12370:	mov	fp, #0
   12374:	mov	lr, #0
   12378:	pop	{r1}		; (ldr r1, [sp], #4)
   1237c:	mov	r2, sp
   12380:	push	{r2}		; (str r2, [sp, #-4]!)
   12384:	push	{r0}		; (str r0, [sp, #-4]!)
   12388:	ldr	ip, [pc, #16]	; 123a0 <__assert_fail@plt+0xdfc>
   1238c:	push	{ip}		; (str ip, [sp, #-4]!)
   12390:	ldr	r0, [pc, #12]	; 123a4 <__assert_fail@plt+0xe00>
   12394:	ldr	r3, [pc, #12]	; 123a8 <__assert_fail@plt+0xe04>
   12398:	bl	1140c <__libc_start_main@plt>
   1239c:	bl	11574 <abort@plt>
   123a0:	andeq	r6, r1, r0, lsr sl
   123a4:			; <UNDEFINED> instruction: 0x000115b0
   123a8:	andeq	r6, r1, ip, asr #19
   123ac:	ldr	r3, [pc, #20]	; 123c8 <__assert_fail@plt+0xe24>
   123b0:	ldr	r2, [pc, #20]	; 123cc <__assert_fail@plt+0xe28>
   123b4:	add	r3, pc, r3
   123b8:	ldr	r2, [r3, r2]
   123bc:	cmp	r2, #0
   123c0:	bxeq	lr
   123c4:	b	11424 <__gmon_start__@plt>
   123c8:	andeq	r5, r1, r4, asr #24
   123cc:	andeq	r0, r0, r8, lsr r1
   123d0:	push	{r3, lr}
   123d4:	movw	r0, #33192	; 0x81a8
   123d8:	ldr	r3, [pc, #36]	; 12404 <__assert_fail@plt+0xe60>
   123dc:	movt	r0, #2
   123e0:	rsb	r3, r0, r3
   123e4:	cmp	r3, #6
   123e8:	popls	{r3, pc}
   123ec:	movw	r3, #0
   123f0:	movt	r3, #0
   123f4:	cmp	r3, #0
   123f8:	popeq	{r3, pc}
   123fc:	blx	r3
   12400:	pop	{r3, pc}
   12404:	andeq	r8, r2, fp, lsr #3
   12408:	push	{r3, lr}
   1240c:	movw	r0, #33192	; 0x81a8
   12410:	movw	r3, #33192	; 0x81a8
   12414:	movt	r0, #2
   12418:	movt	r3, #2
   1241c:	rsb	r3, r0, r3
   12420:	asr	r3, r3, #2
   12424:	add	r3, r3, r3, lsr #31
   12428:	asrs	r1, r3, #1
   1242c:	popeq	{r3, pc}
   12430:	movw	r2, #0
   12434:	movt	r2, #0
   12438:	cmp	r2, #0
   1243c:	popeq	{r3, pc}
   12440:	blx	r2
   12444:	pop	{r3, pc}
   12448:	push	{r4, lr}
   1244c:	movw	r4, #33192	; 0x81a8
   12450:	movt	r4, #2
   12454:	ldrb	r3, [r4]
   12458:	cmp	r3, #0
   1245c:	popne	{r4, pc}
   12460:	bl	123d0 <__assert_fail@plt+0xe2c>
   12464:	mov	r3, #1
   12468:	strb	r3, [r4]
   1246c:	pop	{r4, pc}
   12470:	movw	r0, #32312	; 0x7e38
   12474:	movt	r0, #2
   12478:	push	{r3, lr}
   1247c:	ldr	r3, [r0]
   12480:	cmp	r3, #0
   12484:	beq	1249c <__assert_fail@plt+0xef8>
   12488:	movw	r3, #0
   1248c:	movt	r3, #0
   12490:	cmp	r3, #0
   12494:	beq	1249c <__assert_fail@plt+0xef8>
   12498:	blx	r3
   1249c:	pop	{r3, lr}
   124a0:	b	12408 <__assert_fail@plt+0xe64>
   124a4:	push	{r4, r5, r6, lr}
   124a8:	subs	r4, r0, #0
   124ac:	ldr	r5, [pc, #456]	; 1267c <__assert_fail@plt+0x10d8>
   124b0:	add	r5, pc, r5
   124b4:	beq	124fc <__assert_fail@plt+0xf58>
   124b8:	ldr	r3, [pc, #448]	; 12680 <__assert_fail@plt+0x10dc>
   124bc:	mov	r2, #5
   124c0:	ldr	r1, [pc, #444]	; 12684 <__assert_fail@plt+0x10e0>
   124c4:	mov	r0, #0
   124c8:	ldr	r3, [r5, r3]
   124cc:	add	r1, pc, r1
   124d0:	ldr	r6, [r3]
   124d4:	bl	11334 <dcgettext@plt>
   124d8:	ldr	r3, [pc, #424]	; 12688 <__assert_fail@plt+0x10e4>
   124dc:	mov	r1, #1
   124e0:	ldr	r3, [r5, r3]
   124e4:	ldr	r3, [r3]
   124e8:	mov	r2, r0
   124ec:	mov	r0, r6
   124f0:	bl	114e4 <__fprintf_chk@plt>
   124f4:	mov	r0, r4
   124f8:	bl	11448 <exit@plt>
   124fc:	ldr	r1, [pc, #392]	; 1268c <__assert_fail@plt+0x10e8>
   12500:	mov	r2, #5
   12504:	add	r1, pc, r1
   12508:	bl	11334 <dcgettext@plt>
   1250c:	ldr	r3, [pc, #372]	; 12688 <__assert_fail@plt+0x10e4>
   12510:	ldr	r6, [r5, r3]
   12514:	ldr	r2, [r6]
   12518:	mov	r1, r0
   1251c:	mov	r0, #1
   12520:	bl	114cc <__printf_chk@plt>
   12524:	ldr	r1, [pc, #356]	; 12690 <__assert_fail@plt+0x10ec>
   12528:	mov	r2, #5
   1252c:	mov	r0, r4
   12530:	add	r1, pc, r1
   12534:	bl	11334 <dcgettext@plt>
   12538:	ldr	r3, [pc, #340]	; 12694 <__assert_fail@plt+0x10f0>
   1253c:	ldr	r5, [r5, r3]
   12540:	ldr	r1, [r5]
   12544:	bl	11298 <fputs_unlocked@plt>
   12548:	ldr	r1, [pc, #328]	; 12698 <__assert_fail@plt+0x10f4>
   1254c:	mov	r2, #5
   12550:	mov	r0, r4
   12554:	add	r1, pc, r1
   12558:	bl	11334 <dcgettext@plt>
   1255c:	ldr	r1, [r5]
   12560:	bl	11298 <fputs_unlocked@plt>
   12564:	ldr	r1, [pc, #304]	; 1269c <__assert_fail@plt+0x10f8>
   12568:	mov	r2, #5
   1256c:	mov	r0, r4
   12570:	add	r1, pc, r1
   12574:	bl	11334 <dcgettext@plt>
   12578:	ldr	r1, [r5]
   1257c:	bl	11298 <fputs_unlocked@plt>
   12580:	ldr	r1, [pc, #280]	; 126a0 <__assert_fail@plt+0x10fc>
   12584:	mov	r2, #5
   12588:	mov	r0, r4
   1258c:	add	r1, pc, r1
   12590:	bl	11334 <dcgettext@plt>
   12594:	ldr	r1, [r5]
   12598:	bl	11298 <fputs_unlocked@plt>
   1259c:	ldr	r1, [pc, #256]	; 126a4 <__assert_fail@plt+0x1100>
   125a0:	mov	r2, #5
   125a4:	mov	r0, r4
   125a8:	add	r1, pc, r1
   125ac:	bl	11334 <dcgettext@plt>
   125b0:	ldr	r1, [r5]
   125b4:	bl	11298 <fputs_unlocked@plt>
   125b8:	ldr	r1, [pc, #232]	; 126a8 <__assert_fail@plt+0x1104>
   125bc:	mov	r2, #5
   125c0:	mov	r0, r4
   125c4:	add	r1, pc, r1
   125c8:	bl	11334 <dcgettext@plt>
   125cc:	ldr	r2, [pc, #216]	; 126ac <__assert_fail@plt+0x1108>
   125d0:	ldr	r3, [pc, #216]	; 126b0 <__assert_fail@plt+0x110c>
   125d4:	add	r2, pc, r2
   125d8:	add	r3, pc, r3
   125dc:	mov	r1, r0
   125e0:	mov	r0, #1
   125e4:	bl	114cc <__printf_chk@plt>
   125e8:	mov	r0, #5
   125ec:	mov	r1, r4
   125f0:	bl	11520 <setlocale@plt>
   125f4:	cmp	r0, #0
   125f8:	beq	12614 <__assert_fail@plt+0x1070>
   125fc:	ldr	r1, [pc, #176]	; 126b4 <__assert_fail@plt+0x1110>
   12600:	mov	r2, #3
   12604:	add	r1, pc, r1
   12608:	bl	11568 <strncmp@plt>
   1260c:	cmp	r0, #0
   12610:	bne	12648 <__assert_fail@plt+0x10a4>
   12614:	ldr	r1, [pc, #156]	; 126b8 <__assert_fail@plt+0x1114>
   12618:	mov	r2, #5
   1261c:	mov	r0, #0
   12620:	add	r1, pc, r1
   12624:	bl	11334 <dcgettext@plt>
   12628:	mov	r5, r0
   1262c:	ldr	r0, [r6]
   12630:	bl	12ab4 <close_stdout@@Base+0x118>
   12634:	mov	r1, r5
   12638:	mov	r2, r0
   1263c:	mov	r0, #1
   12640:	bl	114cc <__printf_chk@plt>
   12644:	b	124f4 <__assert_fail@plt+0xf50>
   12648:	ldr	r1, [pc, #108]	; 126bc <__assert_fail@plt+0x1118>
   1264c:	mov	r2, #5
   12650:	mov	r0, r4
   12654:	add	r1, pc, r1
   12658:	bl	11334 <dcgettext@plt>
   1265c:	mov	r5, r0
   12660:	ldr	r0, [r6]
   12664:	bl	12ab4 <close_stdout@@Base+0x118>
   12668:	mov	r1, r5
   1266c:	mov	r2, r0
   12670:	mov	r0, #1
   12674:	bl	114cc <__printf_chk@plt>
   12678:	b	12614 <__assert_fail@plt+0x1070>
   1267c:	andeq	r5, r1, r8, asr #22
   12680:	andeq	r0, r0, r0, lsr r1
   12684:	muleq	r0, ip, r5
   12688:	andeq	r0, r0, ip, asr #2
   1268c:	andeq	r4, r0, ip, lsl #11
   12690:	andeq	r4, r0, r0, lsl #11
   12694:	andeq	r0, r0, r0, asr #2
   12698:	andeq	r4, r0, r4, asr #11
   1269c:			; <UNDEFINED> instruction: 0x000047b8
   126a0:	andeq	r4, r0, ip, asr #15
   126a4:	andeq	r4, r0, r8, ror #15
   126a8:	andeq	r4, r0, r4, lsl r8
   126ac:	andeq	r4, r0, ip, lsl r8
   126b0:	andeq	r4, r0, r8, lsr #16
   126b4:	andeq	r4, r0, r4, lsr #16
   126b8:	andeq	r4, r0, r4, asr r8
   126bc:	ldrdeq	r4, [r0], -r8
   126c0:	push	{r4, r5, r6, lr}
   126c4:	cmp	r1, #0
   126c8:	ldr	r4, [pc, #116]	; 12744 <__assert_fail@plt+0x11a0>
   126cc:	mov	r6, r0
   126d0:	moveq	r5, #1
   126d4:	add	r4, pc, r4
   126d8:	bne	12708 <__assert_fail@plt+0x1164>
   126dc:	ldr	r2, [pc, #100]	; 12748 <__assert_fail@plt+0x11a4>
   126e0:	mov	r0, r6
   126e4:	mov	r1, #0
   126e8:	add	r2, pc, r2
   126ec:	bl	12b58 <close_stdout@@Base+0x1bc>
   126f0:	ldr	r3, [pc, #84]	; 1274c <__assert_fail@plt+0x11a8>
   126f4:	ldr	r3, [r4, r3]
   126f8:	ldr	r1, [r3]
   126fc:	bl	11298 <fputs_unlocked@plt>
   12700:	mov	r0, r5
   12704:	pop	{r4, r5, r6, pc}
   12708:	bl	1158c <getgrgid@plt>
   1270c:	subs	r5, r0, #0
   12710:	ldrne	r0, [r5]
   12714:	movne	r5, #1
   12718:	bne	126f0 <__assert_fail@plt+0x114c>
   1271c:	ldr	r1, [pc, #44]	; 12750 <__assert_fail@plt+0x11ac>
   12720:	mov	r2, #5
   12724:	add	r1, pc, r1
   12728:	bl	11334 <dcgettext@plt>
   1272c:	mov	r1, r5
   12730:	mov	r3, r6
   12734:	mov	r2, r0
   12738:	mov	r0, r5
   1273c:	bl	113dc <error@plt>
   12740:	b	126dc <__assert_fail@plt+0x1138>
   12744:	andeq	r5, r1, r4, lsr #18
   12748:	andeq	r5, r1, r4, lsl #22
   1274c:	andeq	r0, r0, r0, asr #2
   12750:	andeq	r4, r0, r0, lsl #21
   12754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12758:	mov	r6, r3
   1275c:	ldr	r7, [pc, #508]	; 12960 <__assert_fail@plt+0x13bc>
   12760:	sub	sp, sp, #20
   12764:	ldr	ip, [pc, #504]	; 12964 <__assert_fail@plt+0x13c0>
   12768:	subs	r4, r0, #0
   1276c:	add	r7, pc, r7
   12770:	mov	r5, r2
   12774:	ldrb	r9, [sp, #56]	; 0x38
   12778:	ldr	ip, [r7, ip]
   1277c:	ldrb	sl, [sp, #60]	; 0x3c
   12780:	ldr	r3, [ip]
   12784:	str	ip, [sp, #4]
   12788:	str	r3, [sp, #12]
   1278c:	beq	128b4 <__assert_fail@plt+0x1310>
   12790:	mov	r0, r1
   12794:	bl	112d4 <getpwuid@plt>
   12798:	adds	r8, r0, #0
   1279c:	mov	fp, r0
   127a0:	movne	r8, #1
   127a4:	mov	r0, r5
   127a8:	mov	r1, r9
   127ac:	bl	126c0 <__assert_fail@plt+0x111c>
   127b0:	cmp	r0, #0
   127b4:	moveq	r8, #0
   127b8:	cmp	r6, r5
   127bc:	beq	127fc <__assert_fail@plt+0x1258>
   127c0:	ldr	r2, [pc, #416]	; 12968 <__assert_fail@plt+0x13c4>
   127c4:	ldr	r2, [r7, r2]
   127c8:	ldr	r0, [r2]
   127cc:	ldr	r2, [r0, #20]
   127d0:	ldr	r1, [r0, #24]
   127d4:	cmp	r2, r1
   127d8:	addcc	r1, r2, #1
   127dc:	strcc	r1, [r0, #20]
   127e0:	strbcc	sl, [r2]
   127e4:	bcs	12954 <__assert_fail@plt+0x13b0>
   127e8:	mov	r0, r6
   127ec:	mov	r1, r9
   127f0:	bl	126c0 <__assert_fail@plt+0x111c>
   127f4:	cmp	r0, #0
   127f8:	moveq	r8, #0
   127fc:	cmp	fp, #0
   12800:	mov	r0, r4
   12804:	add	r2, sp, #8
   12808:	ldrne	r1, [fp, #12]
   1280c:	moveq	r1, r6
   12810:	bl	15020 <close_stdout@@Base+0x2684>
   12814:	subs	fp, r0, #0
   12818:	blt	128c0 <__assert_fail@plt+0x131c>
   1281c:	ldr	r0, [sp, #8]
   12820:	movne	r4, #0
   12824:	beq	12890 <__assert_fail@plt+0x12ec>
   12828:	ldr	r3, [r0, r4, lsl #2]
   1282c:	lsl	ip, r4, #2
   12830:	cmp	r3, r5
   12834:	beq	12884 <__assert_fail@plt+0x12e0>
   12838:	cmp	r6, r3
   1283c:	beq	12884 <__assert_fail@plt+0x12e0>
   12840:	ldr	r3, [pc, #288]	; 12968 <__assert_fail@plt+0x13c4>
   12844:	ldr	r3, [r7, r3]
   12848:	ldr	r0, [r3]
   1284c:	ldr	r3, [r0, #20]
   12850:	ldr	r1, [r0, #24]
   12854:	cmp	r3, r1
   12858:	addcc	r1, r3, #1
   1285c:	strcc	r1, [r0, #20]
   12860:	strbcc	sl, [r3]
   12864:	bcs	1293c <__assert_fail@plt+0x1398>
   12868:	ldr	r3, [sp, #8]
   1286c:	mov	r1, r9
   12870:	ldr	r0, [r3, ip]
   12874:	bl	126c0 <__assert_fail@plt+0x111c>
   12878:	subs	r3, r0, #0
   1287c:	ldr	r0, [sp, #8]
   12880:	moveq	r8, r3
   12884:	add	r4, r4, #1
   12888:	cmp	r4, fp
   1288c:	bne	12828 <__assert_fail@plt+0x1284>
   12890:	bl	112f8 <free@plt>
   12894:	mov	r0, r8
   12898:	ldr	r1, [sp, #4]
   1289c:	ldr	r2, [sp, #12]
   128a0:	ldr	r3, [r1]
   128a4:	cmp	r2, r3
   128a8:	bne	12950 <__assert_fail@plt+0x13ac>
   128ac:	add	sp, sp, #20
   128b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128b4:	mov	fp, r4
   128b8:	mov	r8, #1
   128bc:	b	127a4 <__assert_fail@plt+0x1200>
   128c0:	cmp	r4, #0
   128c4:	beq	1290c <__assert_fail@plt+0x1368>
   128c8:	bl	11484 <__errno_location@plt>
   128cc:	ldr	r1, [pc, #152]	; 1296c <__assert_fail@plt+0x13c8>
   128d0:	mov	r2, #5
   128d4:	add	r1, pc, r1
   128d8:	ldr	r5, [r0]
   128dc:	mov	r0, #0
   128e0:	bl	11334 <dcgettext@plt>
   128e4:	mov	r6, r0
   128e8:	mov	r0, r4
   128ec:	bl	1440c <close_stdout@@Base+0x1a70>
   128f0:	mov	r1, r5
   128f4:	mov	r2, r6
   128f8:	mov	r3, r0
   128fc:	mov	r0, #0
   12900:	bl	113dc <error@plt>
   12904:	mov	r0, #0
   12908:	b	12898 <__assert_fail@plt+0x12f4>
   1290c:	bl	11484 <__errno_location@plt>
   12910:	ldr	r1, [pc, #88]	; 12970 <__assert_fail@plt+0x13cc>
   12914:	mov	r2, #5
   12918:	add	r1, pc, r1
   1291c:	ldr	r5, [r0]
   12920:	mov	r0, r4
   12924:	bl	11334 <dcgettext@plt>
   12928:	mov	r1, r5
   1292c:	mov	r2, r0
   12930:	mov	r0, r4
   12934:	bl	113dc <error@plt>
   12938:	b	12904 <__assert_fail@plt+0x1360>
   1293c:	mov	r1, sl
   12940:	str	ip, [sp]
   12944:	bl	11514 <__overflow@plt>
   12948:	ldr	ip, [sp]
   1294c:	b	12868 <__assert_fail@plt+0x12c4>
   12950:	bl	11340 <__stack_chk_fail@plt>
   12954:	mov	r1, sl
   12958:	bl	11514 <__overflow@plt>
   1295c:	b	127e8 <__assert_fail@plt+0x1244>
   12960:	andeq	r5, r1, ip, lsl #17
   12964:	andeq	r0, r0, r4, lsr #2
   12968:	andeq	r0, r0, r0, asr #2
   1296c:	andeq	r4, r0, ip, lsr #16
   12970:	andeq	r4, r0, ip, lsl #16
   12974:	ldr	r3, [pc, #8]	; 12984 <__assert_fail@plt+0x13e0>
   12978:	add	r3, pc, r3
   1297c:	str	r0, [r3]
   12980:	bx	lr
   12984:	andeq	r5, r1, ip, lsl #17
   12988:	ldr	r3, [pc, #8]	; 12998 <__assert_fail@plt+0x13f4>
   1298c:	add	r3, pc, r3
   12990:	strb	r0, [r3, #4]
   12994:	bx	lr
   12998:	andeq	r5, r1, r8, ror r8

0001299c <close_stdout@@Base>:
   1299c:	push	{r4, r5, r6, r7, lr}
   129a0:	sub	sp, sp, #12
   129a4:	ldr	r4, [pc, #228]	; 12a90 <close_stdout@@Base+0xf4>
   129a8:	ldr	r3, [pc, #228]	; 12a94 <close_stdout@@Base+0xf8>
   129ac:	add	r4, pc, r4
   129b0:	ldr	r3, [r4, r3]
   129b4:	ldr	r0, [r3]
   129b8:	bl	15588 <close_stdout@@Base+0x2bec>
   129bc:	cmp	r0, #0
   129c0:	beq	129e8 <close_stdout@@Base+0x4c>
   129c4:	ldr	r3, [pc, #204]	; 12a98 <close_stdout@@Base+0xfc>
   129c8:	add	r3, pc, r3
   129cc:	ldrb	r3, [r3, #4]
   129d0:	cmp	r3, #0
   129d4:	beq	12a08 <close_stdout@@Base+0x6c>
   129d8:	bl	11484 <__errno_location@plt>
   129dc:	ldr	r3, [r0]
   129e0:	cmp	r3, #32
   129e4:	bne	12a08 <close_stdout@@Base+0x6c>
   129e8:	ldr	r3, [pc, #172]	; 12a9c <close_stdout@@Base+0x100>
   129ec:	ldr	r3, [r4, r3]
   129f0:	ldr	r0, [r3]
   129f4:	bl	15588 <close_stdout@@Base+0x2bec>
   129f8:	cmp	r0, #0
   129fc:	bne	12a5c <close_stdout@@Base+0xc0>
   12a00:	add	sp, sp, #12
   12a04:	pop	{r4, r5, r6, r7, pc}
   12a08:	ldr	r1, [pc, #144]	; 12aa0 <close_stdout@@Base+0x104>
   12a0c:	mov	r0, #0
   12a10:	mov	r2, #5
   12a14:	add	r1, pc, r1
   12a18:	bl	11334 <dcgettext@plt>
   12a1c:	ldr	r3, [pc, #128]	; 12aa4 <close_stdout@@Base+0x108>
   12a20:	ldr	r5, [pc, r3]
   12a24:	cmp	r5, #0
   12a28:	mov	r6, r0
   12a2c:	beq	12a6c <close_stdout@@Base+0xd0>
   12a30:	bl	11484 <__errno_location@plt>
   12a34:	ldr	r7, [r0]
   12a38:	mov	r0, r5
   12a3c:	bl	142b8 <close_stdout@@Base+0x191c>
   12a40:	ldr	r2, [pc, #96]	; 12aa8 <close_stdout@@Base+0x10c>
   12a44:	str	r6, [sp]
   12a48:	mov	r1, r7
   12a4c:	add	r2, pc, r2
   12a50:	mov	r3, r0
   12a54:	mov	r0, #0
   12a58:	bl	113dc <error@plt>
   12a5c:	ldr	r3, [pc, #72]	; 12aac <close_stdout@@Base+0x110>
   12a60:	ldr	r3, [r4, r3]
   12a64:	ldr	r0, [r3]
   12a68:	bl	11304 <_exit@plt>
   12a6c:	bl	11484 <__errno_location@plt>
   12a70:	ldr	r2, [pc, #56]	; 12ab0 <close_stdout@@Base+0x114>
   12a74:	add	r2, pc, r2
   12a78:	mov	r3, r0
   12a7c:	mov	r0, r5
   12a80:	ldr	r1, [r3]
   12a84:	mov	r3, r6
   12a88:	bl	113dc <error@plt>
   12a8c:	b	12a5c <close_stdout@@Base+0xc0>
   12a90:	andeq	r5, r1, ip, asr #12
   12a94:	andeq	r0, r0, r0, asr #2
   12a98:	andeq	r5, r1, ip, lsr r8
   12a9c:	andeq	r0, r0, r0, lsr r1
   12aa0:			; <UNDEFINED> instruction: 0x000047bc
   12aa4:	andeq	r5, r1, r4, ror #15
   12aa8:	muleq	r0, r0, r7
   12aac:	andeq	r0, r0, r4, asr #2
   12ab0:	andeq	r4, r0, ip, ror #14
   12ab4:	ldrb	r3, [r0]
   12ab8:	cmp	r3, #47	; 0x2f
   12abc:	bne	12ad8 <close_stdout@@Base+0x13c>
   12ac0:	add	r2, r0, #1
   12ac4:	mov	r0, r2
   12ac8:	add	r2, r2, #1
   12acc:	ldrb	r3, [r0]
   12ad0:	cmp	r3, #47	; 0x2f
   12ad4:	beq	12ac4 <close_stdout@@Base+0x128>
   12ad8:	cmp	r3, #0
   12adc:	bxeq	lr
   12ae0:	mov	r2, r0
   12ae4:	mov	r1, #0
   12ae8:	cmp	r3, #47	; 0x2f
   12aec:	moveq	r1, #1
   12af0:	beq	12b00 <close_stdout@@Base+0x164>
   12af4:	cmp	r1, #0
   12af8:	movne	r0, r2
   12afc:	movne	r1, #0
   12b00:	ldrb	r3, [r2, #1]!
   12b04:	cmp	r3, #0
   12b08:	bne	12ae8 <close_stdout@@Base+0x14c>
   12b0c:	bx	lr
   12b10:	push	{r4, lr}
   12b14:	mov	r4, r0
   12b18:	bl	11460 <strlen@plt>
   12b1c:	cmp	r0, #1
   12b20:	popls	{r4, pc}
   12b24:	sub	r3, r0, #1
   12b28:	ldrb	r2, [r4, r3]
   12b2c:	cmp	r2, #47	; 0x2f
   12b30:	popne	{r4, pc}
   12b34:	mov	r0, r3
   12b38:	cmp	r0, #1
   12b3c:	sub	r3, r3, #1
   12b40:	beq	12b54 <close_stdout@@Base+0x1b8>
   12b44:	ldrb	r2, [r4, r3]
   12b48:	cmp	r2, #47	; 0x2f
   12b4c:	popne	{r4, pc}
   12b50:	b	12b34 <close_stdout@@Base+0x198>
   12b54:	pop	{r4, pc}
   12b58:	push	{r3, r4, r5, r6, r7, lr}
   12b5c:	add	r6, r2, #19
   12b60:	mov	r4, r0
   12b64:	mov	r5, r1
   12b68:	mov	r3, #0
   12b6c:	strb	r3, [r2, #20]
   12b70:	mov	r0, r4
   12b74:	mov	r1, r5
   12b78:	mov	r2, #10
   12b7c:	mov	r3, #0
   12b80:	bl	1604c <close_stdout@@Base+0x36b0>
   12b84:	mov	r7, r6
   12b88:	mov	r0, r4
   12b8c:	mov	r1, r5
   12b90:	mov	r3, #0
   12b94:	add	ip, r2, #48	; 0x30
   12b98:	mov	r2, #10
   12b9c:	strb	ip, [r6], #-1
   12ba0:	bl	1604c <close_stdout@@Base+0x36b0>
   12ba4:	mov	r4, r0
   12ba8:	mov	r5, r1
   12bac:	orrs	r3, r4, r5
   12bb0:	bne	12b70 <close_stdout@@Base+0x1d4>
   12bb4:	mov	r0, r7
   12bb8:	pop	{r3, r4, r5, r6, r7, pc}
   12bbc:	push	{r3, r4, r5, r6, r7, lr}
   12bc0:	subs	r4, r0, #0
   12bc4:	ldr	r5, [pc, #172]	; 12c78 <close_stdout@@Base+0x2dc>
   12bc8:	add	r5, pc, r5
   12bcc:	beq	12c54 <close_stdout@@Base+0x2b8>
   12bd0:	mov	r1, #47	; 0x2f
   12bd4:	bl	11538 <strrchr@plt>
   12bd8:	subs	r6, r0, #0
   12bdc:	beq	12c38 <close_stdout@@Base+0x29c>
   12be0:	add	r7, r6, #1
   12be4:	rsb	r3, r4, r7
   12be8:	cmp	r3, #6
   12bec:	ble	12c38 <close_stdout@@Base+0x29c>
   12bf0:	ldr	r1, [pc, #132]	; 12c7c <close_stdout@@Base+0x2e0>
   12bf4:	sub	r0, r6, #6
   12bf8:	mov	r2, #7
   12bfc:	add	r1, pc, r1
   12c00:	bl	11568 <strncmp@plt>
   12c04:	cmp	r0, #0
   12c08:	bne	12c38 <close_stdout@@Base+0x29c>
   12c0c:	ldr	r1, [pc, #108]	; 12c80 <close_stdout@@Base+0x2e4>
   12c10:	mov	r0, r7
   12c14:	mov	r2, #3
   12c18:	add	r1, pc, r1
   12c1c:	bl	11568 <strncmp@plt>
   12c20:	cmp	r0, #0
   12c24:	movne	r4, r7
   12c28:	ldreq	r3, [pc, #84]	; 12c84 <close_stdout@@Base+0x2e8>
   12c2c:	addeq	r4, r6, #4
   12c30:	ldreq	r3, [r5, r3]
   12c34:	streq	r4, [r3]
   12c38:	ldr	r2, [pc, #72]	; 12c88 <close_stdout@@Base+0x2ec>
   12c3c:	ldr	r3, [pc, #72]	; 12c8c <close_stdout@@Base+0x2f0>
   12c40:	ldr	r2, [r5, r2]
   12c44:	str	r4, [r2]
   12c48:	ldr	r3, [r5, r3]
   12c4c:	str	r4, [r3]
   12c50:	pop	{r3, r4, r5, r6, r7, pc}
   12c54:	ldr	r3, [pc, #52]	; 12c90 <close_stdout@@Base+0x2f4>
   12c58:	mov	r1, #1
   12c5c:	ldr	r0, [pc, #48]	; 12c94 <close_stdout@@Base+0x2f8>
   12c60:	mov	r2, #55	; 0x37
   12c64:	ldr	r3, [r5, r3]
   12c68:	add	r0, pc, r0
   12c6c:	ldr	r3, [r3]
   12c70:	bl	11388 <fwrite@plt>
   12c74:	bl	11574 <abort@plt>
   12c78:	andeq	r5, r1, r0, lsr r4
   12c7c:	andeq	r4, r0, r0, lsr #12
   12c80:	andeq	r4, r0, ip, lsl #12
   12c84:	andeq	r0, r0, r4, asr r1
   12c88:	andeq	r0, r0, ip, asr #2
   12c8c:	andeq	r0, r0, r8, asr #2
   12c90:	andeq	r0, r0, r0, lsr r1
   12c94:	andeq	r4, r0, ip, ror r5
   12c98:	push	{r3, lr}
   12c9c:	mov	r3, r0
   12ca0:	mov	r2, #0
   12ca4:	cmp	r1, #8
   12ca8:	str	r2, [r3], #4
   12cac:	add	r3, r3, #4
   12cb0:	str	r2, [r0, #4]
   12cb4:	str	r2, [r3], #4
   12cb8:	str	r2, [r3], #4
   12cbc:	str	r2, [r3], #4
   12cc0:	str	r2, [r3], #4
   12cc4:	str	r2, [r3], #4
   12cc8:	str	r2, [r3], #4
   12ccc:	str	r2, [r3], #4
   12cd0:	str	r2, [r3], #4
   12cd4:	str	r2, [r3], #4
   12cd8:	str	r2, [r3]
   12cdc:	beq	12ce8 <close_stdout@@Base+0x34c>
   12ce0:	str	r1, [r0]
   12ce4:	pop	{r3, pc}
   12ce8:	bl	11574 <abort@plt>
   12cec:	push	{r4, r5, r6, lr}
   12cf0:	mov	r4, r0
   12cf4:	mov	r6, r1
   12cf8:	mov	r0, #0
   12cfc:	mov	r1, r4
   12d00:	mov	r2, #5
   12d04:	bl	11334 <dcgettext@plt>
   12d08:	cmp	r0, r4
   12d0c:	mov	r5, r0
   12d10:	beq	12d18 <close_stdout@@Base+0x37c>
   12d14:	pop	{r4, r5, r6, pc}
   12d18:	bl	15608 <close_stdout@@Base+0x2c6c>
   12d1c:	ldrb	r3, [r0]
   12d20:	bic	r3, r3, #32
   12d24:	cmp	r3, #85	; 0x55
   12d28:	bne	12d9c <close_stdout@@Base+0x400>
   12d2c:	ldrb	r3, [r0, #1]
   12d30:	bic	r3, r3, #32
   12d34:	cmp	r3, #84	; 0x54
   12d38:	bne	12d88 <close_stdout@@Base+0x3ec>
   12d3c:	ldrb	r3, [r0, #2]
   12d40:	bic	r3, r3, #32
   12d44:	cmp	r3, #70	; 0x46
   12d48:	bne	12d88 <close_stdout@@Base+0x3ec>
   12d4c:	ldrb	r3, [r0, #3]
   12d50:	cmp	r3, #45	; 0x2d
   12d54:	bne	12d88 <close_stdout@@Base+0x3ec>
   12d58:	ldrb	r3, [r0, #4]
   12d5c:	cmp	r3, #56	; 0x38
   12d60:	bne	12d88 <close_stdout@@Base+0x3ec>
   12d64:	ldrb	r3, [r0, #5]
   12d68:	cmp	r3, #0
   12d6c:	bne	12d88 <close_stdout@@Base+0x3ec>
   12d70:	ldrb	r3, [r5]
   12d74:	cmp	r3, #96	; 0x60
   12d78:	beq	12e14 <close_stdout@@Base+0x478>
   12d7c:	ldr	r0, [pc, #180]	; 12e38 <close_stdout@@Base+0x49c>
   12d80:	add	r0, pc, r0
   12d84:	pop	{r4, r5, r6, pc}
   12d88:	cmp	r6, #7
   12d8c:	beq	12e20 <close_stdout@@Base+0x484>
   12d90:	ldr	r0, [pc, #164]	; 12e3c <close_stdout@@Base+0x4a0>
   12d94:	add	r0, pc, r0
   12d98:	pop	{r4, r5, r6, pc}
   12d9c:	cmp	r3, #71	; 0x47
   12da0:	bne	12d88 <close_stdout@@Base+0x3ec>
   12da4:	ldrb	r3, [r0, #1]
   12da8:	bic	r3, r3, #32
   12dac:	cmp	r3, #66	; 0x42
   12db0:	bne	12d88 <close_stdout@@Base+0x3ec>
   12db4:	ldrb	r3, [r0, #2]
   12db8:	cmp	r3, #49	; 0x31
   12dbc:	bne	12d88 <close_stdout@@Base+0x3ec>
   12dc0:	ldrb	r3, [r0, #3]
   12dc4:	cmp	r3, #56	; 0x38
   12dc8:	bne	12d88 <close_stdout@@Base+0x3ec>
   12dcc:	ldrb	r3, [r0, #4]
   12dd0:	cmp	r3, #48	; 0x30
   12dd4:	bne	12d88 <close_stdout@@Base+0x3ec>
   12dd8:	ldrb	r3, [r0, #5]
   12ddc:	cmp	r3, #51	; 0x33
   12de0:	bne	12d88 <close_stdout@@Base+0x3ec>
   12de4:	ldrb	r3, [r0, #6]
   12de8:	cmp	r3, #48	; 0x30
   12dec:	bne	12d88 <close_stdout@@Base+0x3ec>
   12df0:	ldrb	r3, [r0, #7]
   12df4:	cmp	r3, #0
   12df8:	bne	12d88 <close_stdout@@Base+0x3ec>
   12dfc:	ldrb	r3, [r5]
   12e00:	cmp	r3, #96	; 0x60
   12e04:	beq	12e2c <close_stdout@@Base+0x490>
   12e08:	ldr	r0, [pc, #48]	; 12e40 <close_stdout@@Base+0x4a4>
   12e0c:	add	r0, pc, r0
   12e10:	pop	{r4, r5, r6, pc}
   12e14:	ldr	r0, [pc, #40]	; 12e44 <close_stdout@@Base+0x4a8>
   12e18:	add	r0, pc, r0
   12e1c:	pop	{r4, r5, r6, pc}
   12e20:	ldr	r0, [pc, #32]	; 12e48 <close_stdout@@Base+0x4ac>
   12e24:	add	r0, pc, r0
   12e28:	pop	{r4, r5, r6, pc}
   12e2c:	ldr	r0, [pc, #24]	; 12e4c <close_stdout@@Base+0x4b0>
   12e30:	add	r0, pc, r0
   12e34:	pop	{r4, r5, r6, pc}
   12e38:	andeq	r4, r0, r8, asr #9
   12e3c:			; <UNDEFINED> instruction: 0x000044bc
   12e40:	andeq	r4, r0, r0, asr #8
   12e44:	andeq	r4, r0, r4, asr #8
   12e48:	andeq	r4, r0, r0, lsr r4
   12e4c:	andeq	r4, r0, r8, lsr #8
   12e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e54:	sub	sp, sp, #124	; 0x7c
   12e58:	ldr	ip, [pc, #3304]	; 13b48 <close_stdout@@Base+0x11ac>
   12e5c:	mov	sl, r1
   12e60:	str	r0, [sp, #40]	; 0x28
   12e64:	mov	r8, r3
   12e68:	ldr	r0, [pc, #3292]	; 13b4c <close_stdout@@Base+0x11b0>
   12e6c:	add	ip, pc, ip
   12e70:	str	r2, [sp, #32]
   12e74:	ldr	r1, [sp, #164]	; 0xa4
   12e78:	mov	r3, ip
   12e7c:	ldr	r0, [ip, r0]
   12e80:	ldr	r2, [sp, #172]	; 0xac
   12e84:	ubfx	r1, r1, #1, #1
   12e88:	str	r1, [sp, #36]	; 0x24
   12e8c:	str	r0, [sp, #56]	; 0x38
   12e90:	ldr	r0, [sp, #168]	; 0xa8
   12e94:	ldr	r1, [sp, #176]	; 0xb0
   12e98:	str	r2, [sp, #72]	; 0x48
   12e9c:	str	r0, [sp, #48]	; 0x30
   12ea0:	ldr	r0, [sp, #56]	; 0x38
   12ea4:	str	r1, [sp, #68]	; 0x44
   12ea8:	ldr	r3, [r0]
   12eac:	str	r3, [sp, #116]	; 0x74
   12eb0:	bl	113a0 <__ctype_get_mb_cur_max@plt>
   12eb4:	ldr	r2, [sp, #160]	; 0xa0
   12eb8:	str	r0, [sp, #64]	; 0x40
   12ebc:	cmp	r2, #8
   12ec0:	addls	pc, pc, r2, lsl #2
   12ec4:	b	13a24 <close_stdout@@Base+0x1088>
   12ec8:	b	12eec <close_stdout@@Base+0x550>
   12ecc:	b	1373c <close_stdout@@Base+0xda0>
   12ed0:	b	1376c <close_stdout@@Base+0xdd0>
   12ed4:	b	1361c <close_stdout@@Base+0xc80>
   12ed8:	b	1365c <close_stdout@@Base+0xcc0>
   12edc:	b	13688 <close_stdout@@Base+0xcec>
   12ee0:	b	136a8 <close_stdout@@Base+0xd0c>
   12ee4:	b	136a8 <close_stdout@@Base+0xd0c>
   12ee8:	b	136a8 <close_stdout@@Base+0xd0c>
   12eec:	mov	r2, #0
   12ef0:	str	r2, [sp, #36]	; 0x24
   12ef4:	mov	r9, r2
   12ef8:	str	r2, [sp, #24]
   12efc:	str	r2, [sp, #28]
   12f00:	str	r2, [sp, #52]	; 0x34
   12f04:	ldr	r0, [sp, #36]	; 0x24
   12f08:	mov	fp, #0
   12f0c:	ldr	r1, [sp, #24]
   12f10:	eor	r2, r0, #1
   12f14:	eor	r3, r1, #1
   12f18:	and	r3, r2, r3
   12f1c:	and	r2, r1, r0
   12f20:	str	r3, [sp, #44]	; 0x2c
   12f24:	str	r2, [sp, #76]	; 0x4c
   12f28:	cmn	r8, #1
   12f2c:	beq	132ac <close_stdout@@Base+0x910>
   12f30:	subs	r3, fp, r8
   12f34:	movne	r3, #1
   12f38:	cmp	r3, #0
   12f3c:	beq	132c4 <close_stdout@@Base+0x928>
   12f40:	ldr	r3, [sp, #28]
   12f44:	ldr	r0, [sp, #24]
   12f48:	adds	r7, r3, #0
   12f4c:	movne	r7, #1
   12f50:	ands	r6, r7, r0
   12f54:	bne	137b0 <close_stdout@@Base+0xe14>
   12f58:	ldr	r1, [sp, #32]
   12f5c:	add	r5, r1, fp
   12f60:	ldrb	r4, [r5]
   12f64:	cmp	r4, #126	; 0x7e
   12f68:	addls	pc, pc, r4, lsl #2
   12f6c:	b	13530 <close_stdout@@Base+0xb94>
   12f70:	b	1343c <close_stdout@@Base+0xaa0>
   12f74:	b	13530 <close_stdout@@Base+0xb94>
   12f78:	b	13530 <close_stdout@@Base+0xb94>
   12f7c:	b	13530 <close_stdout@@Base+0xb94>
   12f80:	b	13530 <close_stdout@@Base+0xb94>
   12f84:	b	13530 <close_stdout@@Base+0xb94>
   12f88:	b	13530 <close_stdout@@Base+0xb94>
   12f8c:	b	13424 <close_stdout@@Base+0xa88>
   12f90:	b	1340c <close_stdout@@Base+0xa70>
   12f94:	b	13434 <close_stdout@@Base+0xa98>
   12f98:	b	1342c <close_stdout@@Base+0xa90>
   12f9c:	b	1341c <close_stdout@@Base+0xa80>
   12fa0:	b	13414 <close_stdout@@Base+0xa78>
   12fa4:	b	133d8 <close_stdout@@Base+0xa3c>
   12fa8:	b	13530 <close_stdout@@Base+0xb94>
   12fac:	b	13530 <close_stdout@@Base+0xb94>
   12fb0:	b	13530 <close_stdout@@Base+0xb94>
   12fb4:	b	13530 <close_stdout@@Base+0xb94>
   12fb8:	b	13530 <close_stdout@@Base+0xb94>
   12fbc:	b	13530 <close_stdout@@Base+0xb94>
   12fc0:	b	13530 <close_stdout@@Base+0xb94>
   12fc4:	b	13530 <close_stdout@@Base+0xb94>
   12fc8:	b	13530 <close_stdout@@Base+0xb94>
   12fcc:	b	13530 <close_stdout@@Base+0xb94>
   12fd0:	b	13530 <close_stdout@@Base+0xb94>
   12fd4:	b	13530 <close_stdout@@Base+0xb94>
   12fd8:	b	13530 <close_stdout@@Base+0xb94>
   12fdc:	b	13530 <close_stdout@@Base+0xb94>
   12fe0:	b	13530 <close_stdout@@Base+0xb94>
   12fe4:	b	13530 <close_stdout@@Base+0xb94>
   12fe8:	b	13530 <close_stdout@@Base+0xb94>
   12fec:	b	13530 <close_stdout@@Base+0xb94>
   12ff0:	b	13364 <close_stdout@@Base+0x9c8>
   12ff4:	b	13364 <close_stdout@@Base+0x9c8>
   12ff8:	b	13364 <close_stdout@@Base+0x9c8>
   12ffc:	b	1335c <close_stdout@@Base+0x9c0>
   13000:	b	13364 <close_stdout@@Base+0x9c8>
   13004:	b	13238 <close_stdout@@Base+0x89c>
   13008:	b	13364 <close_stdout@@Base+0x9c8>
   1300c:	b	134d8 <close_stdout@@Base+0xb3c>
   13010:	b	13364 <close_stdout@@Base+0x9c8>
   13014:	b	13364 <close_stdout@@Base+0x9c8>
   13018:	b	13364 <close_stdout@@Base+0x9c8>
   1301c:	b	13238 <close_stdout@@Base+0x89c>
   13020:	b	13238 <close_stdout@@Base+0x89c>
   13024:	b	13238 <close_stdout@@Base+0x89c>
   13028:	b	13238 <close_stdout@@Base+0x89c>
   1302c:	b	13238 <close_stdout@@Base+0x89c>
   13030:	b	13238 <close_stdout@@Base+0x89c>
   13034:	b	13238 <close_stdout@@Base+0x89c>
   13038:	b	13238 <close_stdout@@Base+0x89c>
   1303c:	b	13238 <close_stdout@@Base+0x89c>
   13040:	b	13238 <close_stdout@@Base+0x89c>
   13044:	b	13238 <close_stdout@@Base+0x89c>
   13048:	b	13238 <close_stdout@@Base+0x89c>
   1304c:	b	13238 <close_stdout@@Base+0x89c>
   13050:	b	13238 <close_stdout@@Base+0x89c>
   13054:	b	13238 <close_stdout@@Base+0x89c>
   13058:	b	13238 <close_stdout@@Base+0x89c>
   1305c:	b	13364 <close_stdout@@Base+0x9c8>
   13060:	b	13364 <close_stdout@@Base+0x9c8>
   13064:	b	13364 <close_stdout@@Base+0x9c8>
   13068:	b	13364 <close_stdout@@Base+0x9c8>
   1306c:	b	1316c <close_stdout@@Base+0x7d0>
   13070:	b	13530 <close_stdout@@Base+0xb94>
   13074:	b	13238 <close_stdout@@Base+0x89c>
   13078:	b	13238 <close_stdout@@Base+0x89c>
   1307c:	b	13238 <close_stdout@@Base+0x89c>
   13080:	b	13238 <close_stdout@@Base+0x89c>
   13084:	b	13238 <close_stdout@@Base+0x89c>
   13088:	b	13238 <close_stdout@@Base+0x89c>
   1308c:	b	13238 <close_stdout@@Base+0x89c>
   13090:	b	13238 <close_stdout@@Base+0x89c>
   13094:	b	13238 <close_stdout@@Base+0x89c>
   13098:	b	13238 <close_stdout@@Base+0x89c>
   1309c:	b	13238 <close_stdout@@Base+0x89c>
   130a0:	b	13238 <close_stdout@@Base+0x89c>
   130a4:	b	13238 <close_stdout@@Base+0x89c>
   130a8:	b	13238 <close_stdout@@Base+0x89c>
   130ac:	b	13238 <close_stdout@@Base+0x89c>
   130b0:	b	13238 <close_stdout@@Base+0x89c>
   130b4:	b	13238 <close_stdout@@Base+0x89c>
   130b8:	b	13238 <close_stdout@@Base+0x89c>
   130bc:	b	13238 <close_stdout@@Base+0x89c>
   130c0:	b	13238 <close_stdout@@Base+0x89c>
   130c4:	b	13238 <close_stdout@@Base+0x89c>
   130c8:	b	13238 <close_stdout@@Base+0x89c>
   130cc:	b	13238 <close_stdout@@Base+0x89c>
   130d0:	b	13238 <close_stdout@@Base+0x89c>
   130d4:	b	13238 <close_stdout@@Base+0x89c>
   130d8:	b	13238 <close_stdout@@Base+0x89c>
   130dc:	b	13364 <close_stdout@@Base+0x9c8>
   130e0:	b	134bc <close_stdout@@Base+0xb20>
   130e4:	b	13238 <close_stdout@@Base+0x89c>
   130e8:	b	13364 <close_stdout@@Base+0x9c8>
   130ec:	b	13238 <close_stdout@@Base+0x89c>
   130f0:	b	13364 <close_stdout@@Base+0x9c8>
   130f4:	b	13238 <close_stdout@@Base+0x89c>
   130f8:	b	13238 <close_stdout@@Base+0x89c>
   130fc:	b	13238 <close_stdout@@Base+0x89c>
   13100:	b	13238 <close_stdout@@Base+0x89c>
   13104:	b	13238 <close_stdout@@Base+0x89c>
   13108:	b	13238 <close_stdout@@Base+0x89c>
   1310c:	b	13238 <close_stdout@@Base+0x89c>
   13110:	b	13238 <close_stdout@@Base+0x89c>
   13114:	b	13238 <close_stdout@@Base+0x89c>
   13118:	b	13238 <close_stdout@@Base+0x89c>
   1311c:	b	13238 <close_stdout@@Base+0x89c>
   13120:	b	13238 <close_stdout@@Base+0x89c>
   13124:	b	13238 <close_stdout@@Base+0x89c>
   13128:	b	13238 <close_stdout@@Base+0x89c>
   1312c:	b	13238 <close_stdout@@Base+0x89c>
   13130:	b	13238 <close_stdout@@Base+0x89c>
   13134:	b	13238 <close_stdout@@Base+0x89c>
   13138:	b	13238 <close_stdout@@Base+0x89c>
   1313c:	b	13238 <close_stdout@@Base+0x89c>
   13140:	b	13238 <close_stdout@@Base+0x89c>
   13144:	b	13238 <close_stdout@@Base+0x89c>
   13148:	b	13238 <close_stdout@@Base+0x89c>
   1314c:	b	13238 <close_stdout@@Base+0x89c>
   13150:	b	13238 <close_stdout@@Base+0x89c>
   13154:	b	13238 <close_stdout@@Base+0x89c>
   13158:	b	13238 <close_stdout@@Base+0x89c>
   1315c:	b	13344 <close_stdout@@Base+0x9a8>
   13160:	b	13364 <close_stdout@@Base+0x9c8>
   13164:	b	13344 <close_stdout@@Base+0x9a8>
   13168:	b	1335c <close_stdout@@Base+0x9c0>
   1316c:	ldr	r3, [sp, #160]	; 0xa0
   13170:	cmp	r3, #2
   13174:	beq	13a00 <close_stdout@@Base+0x1064>
   13178:	cmp	r3, #3
   1317c:	bne	13238 <close_stdout@@Base+0x89c>
   13180:	ldr	r1, [sp, #164]	; 0xa4
   13184:	tst	r1, #4
   13188:	beq	13238 <close_stdout@@Base+0x89c>
   1318c:	add	r3, fp, #2
   13190:	cmp	r8, r3
   13194:	bls	13238 <close_stdout@@Base+0x89c>
   13198:	ldrb	r2, [r5, #1]
   1319c:	mov	r1, #1
   131a0:	cmp	r2, #63	; 0x3f
   131a4:	bne	13238 <close_stdout@@Base+0x89c>
   131a8:	ldr	r0, [sp, #32]
   131ac:	ldrb	ip, [r0, r3]
   131b0:	sub	r0, ip, #33	; 0x21
   131b4:	uxtb	r0, r0
   131b8:	cmp	r0, #29
   131bc:	bhi	13238 <close_stdout@@Base+0x89c>
   131c0:	lsl	r1, r1, r0
   131c4:	movw	r0, #20929	; 0x51c1
   131c8:	movt	r0, #14336	; 0x3800
   131cc:	and	r0, r1, r0
   131d0:	cmp	r0, #0
   131d4:	beq	13238 <close_stdout@@Base+0x89c>
   131d8:	ldr	r1, [sp, #36]	; 0x24
   131dc:	cmp	r1, #0
   131e0:	bne	13380 <close_stdout@@Base+0x9e4>
   131e4:	cmp	r9, sl
   131e8:	mov	r4, ip
   131ec:	mov	fp, r3
   131f0:	ldrcc	r0, [sp, #40]	; 0x28
   131f4:	strbcc	r2, [r0, r9]
   131f8:	add	r2, r9, #1
   131fc:	cmp	sl, r2
   13200:	ldrhi	r0, [sp, #40]	; 0x28
   13204:	movhi	r1, #34	; 0x22
   13208:	strbhi	r1, [r0, r2]
   1320c:	add	r2, r9, #2
   13210:	cmp	sl, r2
   13214:	ldrhi	r0, [sp, #40]	; 0x28
   13218:	movhi	r1, #34	; 0x22
   1321c:	strbhi	r1, [r0, r2]
   13220:	add	r2, r9, #3
   13224:	cmp	sl, r2
   13228:	add	r9, r9, #4
   1322c:	ldrhi	r0, [sp, #40]	; 0x28
   13230:	movhi	r1, #63	; 0x3f
   13234:	strbhi	r1, [r0, r2]
   13238:	ldr	r0, [sp, #44]	; 0x2c
   1323c:	cmp	r0, #0
   13240:	bne	13268 <close_stdout@@Base+0x8cc>
   13244:	ldr	r1, [sp, #48]	; 0x30
   13248:	cmp	r1, #0
   1324c:	beq	13268 <close_stdout@@Base+0x8cc>
   13250:	ubfx	r2, r4, #5, #8
   13254:	and	r3, r4, #31
   13258:	ldr	r2, [r1, r2, lsl #2]
   1325c:	lsr	r3, r2, r3
   13260:	tst	r3, #1
   13264:	bne	13270 <close_stdout@@Base+0x8d4>
   13268:	cmp	r6, #0
   1326c:	beq	13290 <close_stdout@@Base+0x8f4>
   13270:	ldr	r2, [sp, #36]	; 0x24
   13274:	cmp	r2, #0
   13278:	bne	13380 <close_stdout@@Base+0x9e4>
   1327c:	cmp	r9, sl
   13280:	ldrcc	r0, [sp, #40]	; 0x28
   13284:	movcc	r3, #92	; 0x5c
   13288:	strbcc	r3, [r0, r9]
   1328c:	add	r9, r9, #1
   13290:	add	fp, fp, #1
   13294:	cmp	r9, sl
   13298:	ldrcc	r1, [sp, #40]	; 0x28
   1329c:	strbcc	r4, [r1, r9]
   132a0:	cmn	r8, #1
   132a4:	add	r9, r9, #1
   132a8:	bne	12f30 <close_stdout@@Base+0x594>
   132ac:	ldr	r2, [sp, #32]
   132b0:	ldrb	r3, [r2, fp]
   132b4:	adds	r3, r3, #0
   132b8:	movne	r3, #1
   132bc:	cmp	r3, #0
   132c0:	bne	12f40 <close_stdout@@Base+0x5a4>
   132c4:	ldr	r3, [sp, #160]	; 0xa0
   132c8:	cmp	r9, #0
   132cc:	cmpeq	r3, #2
   132d0:	bne	132e0 <close_stdout@@Base+0x944>
   132d4:	ldr	r0, [sp, #36]	; 0x24
   132d8:	cmp	r0, #0
   132dc:	bne	13380 <close_stdout@@Base+0x9e4>
   132e0:	ldr	r1, [sp, #36]	; 0x24
   132e4:	ldr	r2, [sp, #52]	; 0x34
   132e8:	eor	r3, r1, #1
   132ec:	cmp	r2, #0
   132f0:	moveq	r3, #0
   132f4:	andne	r3, r3, #1
   132f8:	cmp	r3, #0
   132fc:	beq	13328 <close_stdout@@Base+0x98c>
   13300:	ldrb	r3, [r2]
   13304:	cmp	r3, #0
   13308:	beq	13328 <close_stdout@@Base+0x98c>
   1330c:	ldr	r1, [sp, #40]	; 0x28
   13310:	cmp	sl, r9
   13314:	strbhi	r3, [r1, r9]
   13318:	ldrb	r3, [r2, #1]!
   1331c:	add	r9, r9, #1
   13320:	cmp	r3, #0
   13324:	bne	13310 <close_stdout@@Base+0x974>
   13328:	cmp	r9, sl
   1332c:	movcs	r0, r9
   13330:	ldrcc	r1, [sp, #40]	; 0x28
   13334:	movcc	r3, #0
   13338:	movcc	r0, r9
   1333c:	strbcc	r3, [r1, r9]
   13340:	b	133bc <close_stdout@@Base+0xa20>
   13344:	cmn	r8, #1
   13348:	beq	13a10 <close_stdout@@Base+0x1074>
   1334c:	subs	r3, r8, #1
   13350:	movne	r3, #1
   13354:	cmp	r3, #0
   13358:	bne	13238 <close_stdout@@Base+0x89c>
   1335c:	cmp	fp, #0
   13360:	bne	13238 <close_stdout@@Base+0x89c>
   13364:	ldr	r3, [sp, #36]	; 0x24
   13368:	ldr	r0, [sp, #160]	; 0xa0
   1336c:	cmp	r0, #2
   13370:	movne	r3, #0
   13374:	andeq	r3, r3, #1
   13378:	cmp	r3, #0
   1337c:	beq	13238 <close_stdout@@Base+0x89c>
   13380:	ldr	r2, [sp, #164]	; 0xa4
   13384:	mov	ip, #0
   13388:	ldr	r0, [sp, #160]	; 0xa0
   1338c:	bic	r3, r2, #2
   13390:	ldr	r1, [sp, #72]	; 0x48
   13394:	ldr	r2, [sp, #68]	; 0x44
   13398:	stm	sp, {r0, r3}
   1339c:	mov	r3, r8
   133a0:	str	r1, [sp, #12]
   133a4:	mov	r1, sl
   133a8:	str	r2, [sp, #16]
   133ac:	ldr	r0, [sp, #40]	; 0x28
   133b0:	ldr	r2, [sp, #32]
   133b4:	str	ip, [sp, #8]
   133b8:	bl	12e50 <close_stdout@@Base+0x4b4>
   133bc:	ldr	r1, [sp, #56]	; 0x38
   133c0:	ldr	r2, [sp, #116]	; 0x74
   133c4:	ldr	r3, [r1]
   133c8:	cmp	r2, r3
   133cc:	bne	13b00 <close_stdout@@Base+0x1164>
   133d0:	add	sp, sp, #124	; 0x7c
   133d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133d8:	mov	r3, #114	; 0x72
   133dc:	ldr	r2, [sp, #36]	; 0x24
   133e0:	ldr	r0, [sp, #160]	; 0xa0
   133e4:	cmp	r0, #2
   133e8:	movne	r2, #0
   133ec:	andeq	r2, r2, #1
   133f0:	cmp	r2, #0
   133f4:	bne	13380 <close_stdout@@Base+0x9e4>
   133f8:	ldr	r1, [sp, #24]
   133fc:	cmp	r1, #0
   13400:	beq	13238 <close_stdout@@Base+0x89c>
   13404:	mov	r4, r3
   13408:	b	13270 <close_stdout@@Base+0x8d4>
   1340c:	mov	r3, #98	; 0x62
   13410:	b	133f8 <close_stdout@@Base+0xa5c>
   13414:	mov	r3, #102	; 0x66
   13418:	b	133f8 <close_stdout@@Base+0xa5c>
   1341c:	mov	r3, #118	; 0x76
   13420:	b	133f8 <close_stdout@@Base+0xa5c>
   13424:	mov	r3, #97	; 0x61
   13428:	b	133f8 <close_stdout@@Base+0xa5c>
   1342c:	mov	r3, #110	; 0x6e
   13430:	b	133dc <close_stdout@@Base+0xa40>
   13434:	mov	r3, #116	; 0x74
   13438:	b	133dc <close_stdout@@Base+0xa40>
   1343c:	ldr	r2, [sp, #24]
   13440:	cmp	r2, #0
   13444:	beq	139ec <close_stdout@@Base+0x1050>
   13448:	ldr	r3, [sp, #36]	; 0x24
   1344c:	cmp	r3, #0
   13450:	bne	13380 <close_stdout@@Base+0x9e4>
   13454:	cmp	r9, sl
   13458:	add	r2, r9, #1
   1345c:	ldrcc	r0, [sp, #40]	; 0x28
   13460:	movcc	r3, #92	; 0x5c
   13464:	strbcc	r3, [r0, r9]
   13468:	add	r3, fp, #1
   1346c:	cmp	r8, r3
   13470:	bls	134b0 <close_stdout@@Base+0xb14>
   13474:	ldr	r1, [sp, #32]
   13478:	ldrb	r3, [r1, r3]
   1347c:	sub	r3, r3, #48	; 0x30
   13480:	cmp	r3, #9
   13484:	bhi	134b0 <close_stdout@@Base+0xb14>
   13488:	cmp	sl, r2
   1348c:	ldrhi	r0, [sp, #40]	; 0x28
   13490:	movhi	r3, #48	; 0x30
   13494:	strbhi	r3, [r0, r2]
   13498:	add	r3, r9, #2
   1349c:	cmp	sl, r3
   134a0:	ldrhi	r1, [sp, #40]	; 0x28
   134a4:	movhi	r2, #48	; 0x30
   134a8:	strbhi	r2, [r1, r3]
   134ac:	add	r2, r9, #3
   134b0:	mov	r9, r2
   134b4:	mov	r4, #48	; 0x30
   134b8:	b	13244 <close_stdout@@Base+0x8a8>
   134bc:	ldr	r1, [sp, #76]	; 0x4c
   134c0:	cmp	r1, #0
   134c4:	beq	134d0 <close_stdout@@Base+0xb34>
   134c8:	cmp	r7, #0
   134cc:	bne	13290 <close_stdout@@Base+0x8f4>
   134d0:	mov	r3, r4
   134d4:	b	133dc <close_stdout@@Base+0xa40>
   134d8:	ldr	r1, [sp, #160]	; 0xa0
   134dc:	cmp	r1, #2
   134e0:	bne	13238 <close_stdout@@Base+0x89c>
   134e4:	ldr	r2, [sp, #36]	; 0x24
   134e8:	cmp	r2, #0
   134ec:	bne	13380 <close_stdout@@Base+0x9e4>
   134f0:	cmp	r9, sl
   134f4:	ldrcc	r0, [sp, #40]	; 0x28
   134f8:	movcc	r3, #39	; 0x27
   134fc:	strbcc	r3, [r0, r9]
   13500:	add	r3, r9, #1
   13504:	cmp	sl, r3
   13508:	ldrhi	r1, [sp, #40]	; 0x28
   1350c:	movhi	r2, #92	; 0x5c
   13510:	strbhi	r2, [r1, r3]
   13514:	add	r3, r9, #2
   13518:	cmp	sl, r3
   1351c:	add	r9, r9, #3
   13520:	ldrhi	r0, [sp, #40]	; 0x28
   13524:	movhi	r2, #39	; 0x27
   13528:	strbhi	r2, [r0, r3]
   1352c:	b	13238 <close_stdout@@Base+0x89c>
   13530:	ldr	r1, [sp, #64]	; 0x40
   13534:	cmp	r1, #1
   13538:	bne	13830 <close_stdout@@Base+0xe94>
   1353c:	bl	1143c <__ctype_b_loc@plt>
   13540:	ldr	r2, [sp, #64]	; 0x40
   13544:	sxth	r3, r4
   13548:	str	r2, [sp, #60]	; 0x3c
   1354c:	lsl	r3, r3, #1
   13550:	ldr	r2, [r0]
   13554:	ldrh	r2, [r2, r3]
   13558:	eor	r2, r2, #16384	; 0x4000
   1355c:	ubfx	r2, r2, #14, #1
   13560:	ldr	r1, [sp, #24]
   13564:	ands	r2, r2, r1
   13568:	beq	13238 <close_stdout@@Base+0x89c>
   1356c:	ldr	r3, [sp, #60]	; 0x3c
   13570:	mov	r0, #92	; 0x5c
   13574:	ldr	r7, [sp, #36]	; 0x24
   13578:	add	r1, r3, fp
   1357c:	str	r8, [sp, #60]	; 0x3c
   13580:	ldr	r3, [sp, #40]	; 0x28
   13584:	b	135e8 <close_stdout@@Base+0xc4c>
   13588:	cmp	r7, #0
   1358c:	bne	13a28 <close_stdout@@Base+0x108c>
   13590:	add	ip, r9, #1
   13594:	cmp	r9, sl
   13598:	strbcc	r0, [r3, r9]
   1359c:	cmp	sl, ip
   135a0:	lsrhi	r8, r4, #6
   135a4:	addhi	r8, r8, #48	; 0x30
   135a8:	strbhi	r8, [r3, ip]
   135ac:	add	ip, r9, #2
   135b0:	add	r9, r9, #3
   135b4:	cmp	sl, ip
   135b8:	ubfxhi	r8, r4, #3, #3
   135bc:	and	r4, r4, #7
   135c0:	add	r4, r4, #48	; 0x30
   135c4:	addhi	r8, r8, #48	; 0x30
   135c8:	strbhi	r8, [r3, ip]
   135cc:	add	fp, fp, #1
   135d0:	cmp	r1, fp
   135d4:	bls	13614 <close_stdout@@Base+0xc78>
   135d8:	cmp	r9, sl
   135dc:	strbcc	r4, [r3, r9]
   135e0:	ldrb	r4, [r5, #1]!
   135e4:	add	r9, r9, #1
   135e8:	cmp	r2, #0
   135ec:	bne	13588 <close_stdout@@Base+0xbec>
   135f0:	cmp	r6, #0
   135f4:	beq	135cc <close_stdout@@Base+0xc30>
   135f8:	add	fp, fp, #1
   135fc:	cmp	r9, sl
   13600:	strbcc	r0, [r3, r9]
   13604:	cmp	r1, fp
   13608:	add	r9, r9, #1
   1360c:	mov	r6, #0
   13610:	bhi	135d8 <close_stdout@@Base+0xc3c>
   13614:	ldr	r8, [sp, #60]	; 0x3c
   13618:	b	13294 <close_stdout@@Base+0x8f8>
   1361c:	ldr	r3, [sp, #36]	; 0x24
   13620:	cmp	r3, #0
   13624:	bne	13b28 <close_stdout@@Base+0x118c>
   13628:	cmp	sl, #0
   1362c:	beq	13a40 <close_stdout@@Base+0x10a4>
   13630:	ldr	r1, [sp, #40]	; 0x28
   13634:	mov	r0, #1
   13638:	ldr	r2, [pc, #1296]	; 13b50 <close_stdout@@Base+0x11b4>
   1363c:	mov	r3, #34	; 0x22
   13640:	str	r0, [sp, #24]
   13644:	mov	r9, r0
   13648:	add	r2, pc, r2
   1364c:	str	r0, [sp, #28]
   13650:	strb	r3, [r1]
   13654:	str	r2, [sp, #52]	; 0x34
   13658:	b	12f04 <close_stdout@@Base+0x568>
   1365c:	ldr	r3, [pc, #1264]	; 13b54 <close_stdout@@Base+0x11b8>
   13660:	mov	r2, #1
   13664:	mov	r0, #3
   13668:	str	r2, [sp, #36]	; 0x24
   1366c:	add	r3, pc, r3
   13670:	str	r2, [sp, #24]
   13674:	str	r3, [sp, #52]	; 0x34
   13678:	mov	r9, #0
   1367c:	str	r2, [sp, #28]
   13680:	str	r0, [sp, #160]	; 0xa0
   13684:	b	12f04 <close_stdout@@Base+0x568>
   13688:	mov	r0, #0
   1368c:	mov	r1, #1
   13690:	str	r0, [sp, #36]	; 0x24
   13694:	mov	r9, r0
   13698:	str	r1, [sp, #24]
   1369c:	str	r0, [sp, #28]
   136a0:	str	r0, [sp, #52]	; 0x34
   136a4:	b	12f04 <close_stdout@@Base+0x568>
   136a8:	ldr	r3, [sp, #160]	; 0xa0
   136ac:	cmp	r3, #8
   136b0:	beq	136dc <close_stdout@@Base+0xd40>
   136b4:	ldr	r0, [pc, #1180]	; 13b58 <close_stdout@@Base+0x11bc>
   136b8:	mov	r1, r3
   136bc:	add	r0, pc, r0
   136c0:	bl	12cec <close_stdout@@Base+0x350>
   136c4:	ldr	r1, [sp, #160]	; 0xa0
   136c8:	str	r0, [sp, #72]	; 0x48
   136cc:	ldr	r0, [pc, #1160]	; 13b5c <close_stdout@@Base+0x11c0>
   136d0:	add	r0, pc, r0
   136d4:	bl	12cec <close_stdout@@Base+0x350>
   136d8:	str	r0, [sp, #68]	; 0x44
   136dc:	ldr	r0, [sp, #36]	; 0x24
   136e0:	cmp	r0, #0
   136e4:	movne	r9, #0
   136e8:	bne	13720 <close_stdout@@Base+0xd84>
   136ec:	ldr	r1, [sp, #72]	; 0x48
   136f0:	ldrb	r3, [r1]
   136f4:	cmp	r3, #0
   136f8:	beq	13af8 <close_stdout@@Base+0x115c>
   136fc:	mov	r2, r1
   13700:	ldr	r1, [sp, #40]	; 0x28
   13704:	mov	r9, r0
   13708:	cmp	r9, sl
   1370c:	strbcc	r3, [r1, r9]
   13710:	ldrb	r3, [r2, #1]!
   13714:	add	r9, r9, #1
   13718:	cmp	r3, #0
   1371c:	bne	13708 <close_stdout@@Base+0xd6c>
   13720:	ldr	r0, [sp, #68]	; 0x44
   13724:	str	r0, [sp, #52]	; 0x34
   13728:	bl	11460 <strlen@plt>
   1372c:	mov	r2, #1
   13730:	str	r2, [sp, #24]
   13734:	str	r0, [sp, #28]
   13738:	b	12f04 <close_stdout@@Base+0x568>
   1373c:	ldr	r3, [pc, #1052]	; 13b60 <close_stdout@@Base+0x11c4>
   13740:	mov	r2, #0
   13744:	mov	r1, #1
   13748:	mov	r0, #2
   1374c:	add	r3, pc, r3
   13750:	str	r1, [sp, #36]	; 0x24
   13754:	str	r2, [sp, #24]
   13758:	mov	r9, r2
   1375c:	str	r1, [sp, #28]
   13760:	str	r3, [sp, #52]	; 0x34
   13764:	str	r0, [sp, #160]	; 0xa0
   13768:	b	12f04 <close_stdout@@Base+0x568>
   1376c:	ldr	r3, [sp, #36]	; 0x24
   13770:	cmp	r3, #0
   13774:	bne	13b04 <close_stdout@@Base+0x1168>
   13778:	cmp	sl, #0
   1377c:	beq	13a60 <close_stdout@@Base+0x10c4>
   13780:	ldr	r1, [sp, #40]	; 0x28
   13784:	mov	r3, #39	; 0x27
   13788:	ldr	r2, [sp, #36]	; 0x24
   1378c:	mov	r0, #1
   13790:	mov	r9, r0
   13794:	str	r0, [sp, #28]
   13798:	strb	r3, [r1]
   1379c:	ldr	r3, [pc, #960]	; 13b64 <close_stdout@@Base+0x11c8>
   137a0:	str	r2, [sp, #24]
   137a4:	add	r3, pc, r3
   137a8:	str	r3, [sp, #52]	; 0x34
   137ac:	b	12f04 <close_stdout@@Base+0x568>
   137b0:	ldr	r2, [sp, #28]
   137b4:	cmp	r2, #1
   137b8:	add	r4, fp, r2
   137bc:	movls	r3, #0
   137c0:	movhi	r3, #1
   137c4:	cmn	r8, #1
   137c8:	movne	r3, #0
   137cc:	cmp	r3, #0
   137d0:	beq	137e0 <close_stdout@@Base+0xe44>
   137d4:	ldr	r0, [sp, #32]
   137d8:	bl	11460 <strlen@plt>
   137dc:	mov	r8, r0
   137e0:	cmp	r8, r4
   137e4:	ldrcc	r3, [sp, #32]
   137e8:	movcc	r6, #0
   137ec:	addcc	r5, r3, fp
   137f0:	bcc	12f60 <close_stdout@@Base+0x5c4>
   137f4:	ldr	r0, [sp, #32]
   137f8:	ldr	r1, [sp, #52]	; 0x34
   137fc:	add	r5, r0, fp
   13800:	ldr	r2, [sp, #28]
   13804:	mov	r0, r5
   13808:	bl	11328 <memcmp@plt>
   1380c:	cmp	r0, #0
   13810:	bne	13828 <close_stdout@@Base+0xe8c>
   13814:	ldr	r1, [sp, #36]	; 0x24
   13818:	cmp	r1, #0
   1381c:	bne	13380 <close_stdout@@Base+0x9e4>
   13820:	mov	r6, #1
   13824:	b	12f60 <close_stdout@@Base+0x5c4>
   13828:	mov	r6, #0
   1382c:	b	12f60 <close_stdout@@Base+0x5c4>
   13830:	add	r7, sp, #108	; 0x6c
   13834:	cmn	r8, #1
   13838:	mov	r3, #0
   1383c:	str	r3, [sp, #108]	; 0x6c
   13840:	str	r3, [r7, #4]
   13844:	beq	13a30 <close_stdout@@Base+0x1094>
   13848:	mov	r1, #0
   1384c:	ldr	r0, [sp, #32]
   13850:	mov	ip, #1
   13854:	str	r9, [sp, #88]	; 0x58
   13858:	str	r6, [sp, #96]	; 0x60
   1385c:	mov	r9, r1
   13860:	str	r5, [sp, #100]	; 0x64
   13864:	mov	r6, ip
   13868:	mov	r5, r7
   1386c:	add	r3, sp, #104	; 0x68
   13870:	sub	r0, r0, #1
   13874:	str	r3, [sp, #80]	; 0x50
   13878:	str	r0, [sp, #84]	; 0x54
   1387c:	str	r1, [sp, #60]	; 0x3c
   13880:	str	r4, [sp, #92]	; 0x5c
   13884:	ldr	r2, [sp, #32]
   13888:	add	r7, r9, fp
   1388c:	add	r0, sp, #104	; 0x68
   13890:	mov	r3, r5
   13894:	add	r4, r2, r7
   13898:	rsb	r2, r7, r8
   1389c:	mov	r1, r4
   138a0:	bl	113d0 <mbrtowc@plt>
   138a4:	subs	r2, r0, #0
   138a8:	beq	139b4 <close_stdout@@Base+0x1018>
   138ac:	cmn	r2, #1
   138b0:	beq	13adc <close_stdout@@Base+0x1140>
   138b4:	cmn	r2, #2
   138b8:	beq	13a80 <close_stdout@@Base+0x10e4>
   138bc:	ldr	r3, [sp, #36]	; 0x24
   138c0:	ldr	r0, [sp, #160]	; 0xa0
   138c4:	cmp	r0, #2
   138c8:	movne	r3, #0
   138cc:	andeq	r3, r3, #1
   138d0:	cmp	r3, #0
   138d4:	beq	13990 <close_stdout@@Base+0xff4>
   138d8:	cmp	r2, #1
   138dc:	beq	13990 <close_stdout@@Base+0xff4>
   138e0:	ldr	r1, [sp, #84]	; 0x54
   138e4:	add	r3, r1, r2
   138e8:	add	r7, r3, r7
   138ec:	ldrb	r3, [r4, #1]!
   138f0:	sub	r3, r3, #91	; 0x5b
   138f4:	cmp	r3, #33	; 0x21
   138f8:	addls	pc, pc, r3, lsl #2
   138fc:	b	13988 <close_stdout@@Base+0xfec>
   13900:	b	13380 <close_stdout@@Base+0x9e4>
   13904:	b	13380 <close_stdout@@Base+0x9e4>
   13908:	b	13988 <close_stdout@@Base+0xfec>
   1390c:	b	13380 <close_stdout@@Base+0x9e4>
   13910:	b	13988 <close_stdout@@Base+0xfec>
   13914:	b	13380 <close_stdout@@Base+0x9e4>
   13918:	b	13988 <close_stdout@@Base+0xfec>
   1391c:	b	13988 <close_stdout@@Base+0xfec>
   13920:	b	13988 <close_stdout@@Base+0xfec>
   13924:	b	13988 <close_stdout@@Base+0xfec>
   13928:	b	13988 <close_stdout@@Base+0xfec>
   1392c:	b	13988 <close_stdout@@Base+0xfec>
   13930:	b	13988 <close_stdout@@Base+0xfec>
   13934:	b	13988 <close_stdout@@Base+0xfec>
   13938:	b	13988 <close_stdout@@Base+0xfec>
   1393c:	b	13988 <close_stdout@@Base+0xfec>
   13940:	b	13988 <close_stdout@@Base+0xfec>
   13944:	b	13988 <close_stdout@@Base+0xfec>
   13948:	b	13988 <close_stdout@@Base+0xfec>
   1394c:	b	13988 <close_stdout@@Base+0xfec>
   13950:	b	13988 <close_stdout@@Base+0xfec>
   13954:	b	13988 <close_stdout@@Base+0xfec>
   13958:	b	13988 <close_stdout@@Base+0xfec>
   1395c:	b	13988 <close_stdout@@Base+0xfec>
   13960:	b	13988 <close_stdout@@Base+0xfec>
   13964:	b	13988 <close_stdout@@Base+0xfec>
   13968:	b	13988 <close_stdout@@Base+0xfec>
   1396c:	b	13988 <close_stdout@@Base+0xfec>
   13970:	b	13988 <close_stdout@@Base+0xfec>
   13974:	b	13988 <close_stdout@@Base+0xfec>
   13978:	b	13988 <close_stdout@@Base+0xfec>
   1397c:	b	13988 <close_stdout@@Base+0xfec>
   13980:	b	13988 <close_stdout@@Base+0xfec>
   13984:	b	13380 <close_stdout@@Base+0x9e4>
   13988:	cmp	r4, r7
   1398c:	bne	138ec <close_stdout@@Base+0xf50>
   13990:	ldr	r0, [sp, #104]	; 0x68
   13994:	add	r9, r9, r2
   13998:	bl	11370 <iswprint@plt>
   1399c:	cmp	r0, #0
   139a0:	mov	r0, r5
   139a4:	moveq	r6, #0
   139a8:	bl	1131c <mbsinit@plt>
   139ac:	cmp	r0, #0
   139b0:	beq	13884 <close_stdout@@Base+0xee8>
   139b4:	mov	ip, r6
   139b8:	eor	r2, ip, #1
   139bc:	str	r9, [sp, #60]	; 0x3c
   139c0:	ldr	r4, [sp, #92]	; 0x5c
   139c4:	uxtb	r2, r2
   139c8:	ldr	r9, [sp, #88]	; 0x58
   139cc:	ldr	r6, [sp, #96]	; 0x60
   139d0:	ldr	r5, [sp, #100]	; 0x64
   139d4:	ldr	r3, [sp, #60]	; 0x3c
   139d8:	cmp	r3, #1
   139dc:	bls	13560 <close_stdout@@Base+0xbc4>
   139e0:	ldr	r0, [sp, #24]
   139e4:	and	r2, r2, r0
   139e8:	b	1356c <close_stdout@@Base+0xbd0>
   139ec:	ldr	r2, [sp, #164]	; 0xa4
   139f0:	tst	r2, #1
   139f4:	addne	fp, fp, #1
   139f8:	bne	12f28 <close_stdout@@Base+0x58c>
   139fc:	b	13238 <close_stdout@@Base+0x89c>
   13a00:	ldr	r0, [sp, #36]	; 0x24
   13a04:	cmp	r0, #0
   13a08:	beq	13238 <close_stdout@@Base+0x89c>
   13a0c:	b	13380 <close_stdout@@Base+0x9e4>
   13a10:	ldr	r2, [sp, #32]
   13a14:	ldrb	r3, [r2, #1]
   13a18:	adds	r3, r3, #0
   13a1c:	movne	r3, #1
   13a20:	b	13354 <close_stdout@@Base+0x9b8>
   13a24:	bl	11574 <abort@plt>
   13a28:	ldr	r8, [sp, #60]	; 0x3c
   13a2c:	b	13380 <close_stdout@@Base+0x9e4>
   13a30:	ldr	r0, [sp, #32]
   13a34:	bl	11460 <strlen@plt>
   13a38:	mov	r8, r0
   13a3c:	b	13848 <close_stdout@@Base+0xeac>
   13a40:	ldr	r2, [pc, #288]	; 13b68 <close_stdout@@Base+0x11cc>
   13a44:	mov	r1, #1
   13a48:	mov	r9, r1
   13a4c:	str	r1, [sp, #24]
   13a50:	add	r2, pc, r2
   13a54:	str	r1, [sp, #28]
   13a58:	str	r2, [sp, #52]	; 0x34
   13a5c:	b	12f04 <close_stdout@@Base+0x568>
   13a60:	ldr	r2, [pc, #260]	; 13b6c <close_stdout@@Base+0x11d0>
   13a64:	mov	r3, #1
   13a68:	mov	r9, r3
   13a6c:	str	r3, [sp, #28]
   13a70:	add	r2, pc, r2
   13a74:	str	sl, [sp, #24]
   13a78:	str	r2, [sp, #52]	; 0x34
   13a7c:	b	12f04 <close_stdout@@Base+0x568>
   13a80:	cmp	r8, r7
   13a84:	str	r9, [sp, #60]	; 0x3c
   13a88:	mov	ip, r4
   13a8c:	ldr	r6, [sp, #96]	; 0x60
   13a90:	ldr	r9, [sp, #88]	; 0x58
   13a94:	ldr	r4, [sp, #92]	; 0x5c
   13a98:	ldr	r5, [sp, #100]	; 0x64
   13a9c:	bls	13ad4 <close_stdout@@Base+0x1138>
   13aa0:	ldrb	r3, [ip]
   13aa4:	cmp	r3, #0
   13aa8:	beq	13ad4 <close_stdout@@Base+0x1138>
   13aac:	ldr	r3, [sp, #60]	; 0x3c
   13ab0:	b	13ac0 <close_stdout@@Base+0x1124>
   13ab4:	ldrb	r2, [r5, r3]
   13ab8:	cmp	r2, #0
   13abc:	beq	13ad0 <close_stdout@@Base+0x1134>
   13ac0:	add	r3, r3, #1
   13ac4:	add	r2, fp, r3
   13ac8:	cmp	r8, r2
   13acc:	bhi	13ab4 <close_stdout@@Base+0x1118>
   13ad0:	str	r3, [sp, #60]	; 0x3c
   13ad4:	mov	r2, #1
   13ad8:	b	139d4 <close_stdout@@Base+0x1038>
   13adc:	str	r9, [sp, #60]	; 0x3c
   13ae0:	mov	r2, #1
   13ae4:	ldr	r4, [sp, #92]	; 0x5c
   13ae8:	ldr	r6, [sp, #96]	; 0x60
   13aec:	ldr	r9, [sp, #88]	; 0x58
   13af0:	ldr	r5, [sp, #100]	; 0x64
   13af4:	b	139d4 <close_stdout@@Base+0x1038>
   13af8:	ldr	r9, [sp, #36]	; 0x24
   13afc:	b	13720 <close_stdout@@Base+0xd84>
   13b00:	bl	11340 <__stack_chk_fail@plt>
   13b04:	ldr	r1, [pc, #100]	; 13b70 <close_stdout@@Base+0x11d4>
   13b08:	mov	r3, #0
   13b0c:	mov	r0, #1
   13b10:	str	r3, [sp, #24]
   13b14:	add	r1, pc, r1
   13b18:	str	r0, [sp, #28]
   13b1c:	mov	r9, r3
   13b20:	str	r1, [sp, #52]	; 0x34
   13b24:	b	12f04 <close_stdout@@Base+0x568>
   13b28:	ldr	r0, [pc, #68]	; 13b74 <close_stdout@@Base+0x11d8>
   13b2c:	mov	r3, #1
   13b30:	mov	r9, #0
   13b34:	str	r3, [sp, #24]
   13b38:	add	r0, pc, r0
   13b3c:	str	r3, [sp, #28]
   13b40:	str	r0, [sp, #52]	; 0x34
   13b44:	b	12f04 <close_stdout@@Base+0x568>
   13b48:	andeq	r5, r1, ip, lsl #3
   13b4c:	andeq	r0, r0, r4, lsr #2
   13b50:	andeq	r3, r0, ip, lsl #24
   13b54:	andeq	r3, r0, r8, ror #23
   13b58:	andeq	r3, r0, r4, lsr #23
   13b5c:	andeq	r3, r0, r0, lsl #23
   13b60:	andeq	r3, r0, r4, lsl #22
   13b64:	andeq	r3, r0, ip, lsr #21
   13b68:	andeq	r3, r0, r4, lsl #16
   13b6c:	andeq	r3, r0, r0, ror #15
   13b70:	andeq	r3, r0, ip, lsr r7
   13b74:	andeq	r3, r0, ip, lsl r7
   13b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b7c:	sub	sp, sp, #44	; 0x2c
   13b80:	mov	r6, r0
   13b84:	mov	r9, r1
   13b88:	mov	sl, r2
   13b8c:	mov	r4, r3
   13b90:	bl	11484 <__errno_location@plt>
   13b94:	ldr	fp, [pc, #412]	; 13d38 <close_stdout@@Base+0x139c>
   13b98:	cmp	r6, #0
   13b9c:	add	fp, pc, fp
   13ba0:	ldr	r5, [fp]
   13ba4:	ldr	r1, [r0]
   13ba8:	mov	r8, r0
   13bac:	str	r1, [sp, #36]	; 0x24
   13bb0:	blt	13d30 <close_stdout@@Base+0x1394>
   13bb4:	ldr	r3, [pc, #384]	; 13d3c <close_stdout@@Base+0x13a0>
   13bb8:	add	r3, pc, r3
   13bbc:	ldr	r3, [r3]
   13bc0:	cmp	r6, r3
   13bc4:	bcc	13c18 <close_stdout@@Base+0x127c>
   13bc8:	add	r7, r6, #1
   13bcc:	cmn	r7, #-536870911	; 0xe0000001
   13bd0:	bhi	13d34 <close_stdout@@Base+0x1398>
   13bd4:	add	r3, fp, #4
   13bd8:	cmp	r5, r3
   13bdc:	beq	13d08 <close_stdout@@Base+0x136c>
   13be0:	mov	r0, r5
   13be4:	lsl	r1, r7, #3
   13be8:	bl	14e0c <close_stdout@@Base+0x2470>
   13bec:	mov	r5, r0
   13bf0:	str	r0, [fp]
   13bf4:	ldr	fp, [pc, #324]	; 13d40 <close_stdout@@Base+0x13a4>
   13bf8:	mov	r1, #0
   13bfc:	add	fp, pc, fp
   13c00:	ldr	r0, [fp]
   13c04:	rsb	r2, r0, r7
   13c08:	add	r0, r5, r0, lsl #3
   13c0c:	lsl	r2, r2, #3
   13c10:	bl	114b4 <memset@plt>
   13c14:	str	r7, [fp]
   13c18:	add	r2, r4, #8
   13c1c:	str	r2, [sp, #32]
   13c20:	ldr	r1, [r4]
   13c24:	add	fp, r5, r6, lsl #3
   13c28:	ldr	lr, [sp, #32]
   13c2c:	mov	r2, r9
   13c30:	ldr	r3, [r4, #4]
   13c34:	ldr	ip, [r5, r6, lsl #3]
   13c38:	ldr	r7, [fp, #4]
   13c3c:	orr	r3, r3, #1
   13c40:	str	r1, [sp]
   13c44:	str	r3, [sp, #4]
   13c48:	mov	r1, ip
   13c4c:	str	lr, [sp, #8]
   13c50:	mov	r0, r7
   13c54:	ldr	lr, [r4, #40]	; 0x28
   13c58:	str	r3, [sp, #28]
   13c5c:	mov	r3, sl
   13c60:	str	lr, [sp, #12]
   13c64:	ldr	lr, [r4, #44]	; 0x2c
   13c68:	str	ip, [sp, #24]
   13c6c:	str	lr, [sp, #16]
   13c70:	bl	12e50 <close_stdout@@Base+0x4b4>
   13c74:	ldr	ip, [sp, #24]
   13c78:	cmp	ip, r0
   13c7c:	bhi	13cf4 <close_stdout@@Base+0x1358>
   13c80:	ldr	r3, [pc, #188]	; 13d44 <close_stdout@@Base+0x13a8>
   13c84:	add	r1, r0, #1
   13c88:	str	r1, [r5, r6, lsl #3]
   13c8c:	add	r3, pc, r3
   13c90:	cmp	r7, r3
   13c94:	beq	13ca8 <close_stdout@@Base+0x130c>
   13c98:	mov	r0, r7
   13c9c:	str	r1, [sp, #24]
   13ca0:	bl	112f8 <free@plt>
   13ca4:	ldr	r1, [sp, #24]
   13ca8:	mov	r0, r1
   13cac:	str	r1, [sp, #24]
   13cb0:	bl	14db4 <close_stdout@@Base+0x2418>
   13cb4:	ldr	r3, [sp, #28]
   13cb8:	ldr	lr, [sp, #32]
   13cbc:	mov	r2, r9
   13cc0:	str	r0, [fp, #4]
   13cc4:	mov	r7, r0
   13cc8:	ldr	ip, [r4]
   13ccc:	str	r3, [sp, #4]
   13cd0:	mov	r3, sl
   13cd4:	str	lr, [sp, #8]
   13cd8:	str	ip, [sp]
   13cdc:	ldr	ip, [r4, #40]	; 0x28
   13ce0:	ldr	r1, [sp, #24]
   13ce4:	str	ip, [sp, #12]
   13ce8:	ldr	ip, [r4, #44]	; 0x2c
   13cec:	str	ip, [sp, #16]
   13cf0:	bl	12e50 <close_stdout@@Base+0x4b4>
   13cf4:	ldr	r1, [sp, #36]	; 0x24
   13cf8:	mov	r0, r7
   13cfc:	str	r1, [r8]
   13d00:	add	sp, sp, #44	; 0x2c
   13d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d08:	lsl	r1, r7, #3
   13d0c:	mov	r0, #0
   13d10:	str	r3, [sp, #24]
   13d14:	bl	14e0c <close_stdout@@Base+0x2470>
   13d18:	ldr	r3, [sp, #24]
   13d1c:	mov	r5, r0
   13d20:	ldm	r3, {r0, r1}
   13d24:	str	r5, [fp]
   13d28:	stm	r5, {r0, r1}
   13d2c:	b	13bf4 <close_stdout@@Base+0x1258>
   13d30:	bl	11574 <abort@plt>
   13d34:	bl	14fc8 <close_stdout@@Base+0x262c>
   13d38:	strdeq	r4, [r1], -r8
   13d3c:	andeq	r4, r1, r8, lsr #11
   13d40:	andeq	r4, r1, r4, ror #10
   13d44:	andeq	r4, r1, r4, lsl #11
   13d48:	push	{r4, r5, r6, lr}
   13d4c:	mov	r5, r0
   13d50:	bl	11484 <__errno_location@plt>
   13d54:	cmp	r5, #0
   13d58:	mov	r1, #48	; 0x30
   13d5c:	mov	r4, r0
   13d60:	ldr	r0, [pc, #24]	; 13d80 <close_stdout@@Base+0x13e4>
   13d64:	ldr	r6, [r4]
   13d68:	add	r0, pc, r0
   13d6c:	add	r0, r0, #256	; 0x100
   13d70:	movne	r0, r5
   13d74:	bl	14f88 <close_stdout@@Base+0x25ec>
   13d78:	str	r6, [r4]
   13d7c:	pop	{r4, r5, r6, pc}
   13d80:	andeq	r4, r1, r8, lsr #9
   13d84:	cmp	r0, #0
   13d88:	beq	13d94 <close_stdout@@Base+0x13f8>
   13d8c:	ldr	r0, [r0]
   13d90:	bx	lr
   13d94:	ldr	r0, [pc, #12]	; 13da8 <close_stdout@@Base+0x140c>
   13d98:	add	r0, pc, r0
   13d9c:	add	r0, r0, #256	; 0x100
   13da0:	ldr	r0, [r0]
   13da4:	bx	lr
   13da8:	andeq	r4, r1, r8, ror r4
   13dac:	cmp	r0, #0
   13db0:	beq	13dbc <close_stdout@@Base+0x1420>
   13db4:	str	r1, [r0]
   13db8:	bx	lr
   13dbc:	ldr	r0, [pc, #12]	; 13dd0 <close_stdout@@Base+0x1434>
   13dc0:	add	r0, pc, r0
   13dc4:	add	r0, r0, #256	; 0x100
   13dc8:	str	r1, [r0]
   13dcc:	bx	lr
   13dd0:	andeq	r4, r1, r0, asr r4
   13dd4:	cmp	r0, #0
   13dd8:	movne	r3, r0
   13ddc:	beq	13e0c <close_stdout@@Base+0x1470>
   13de0:	lsr	ip, r1, #5
   13de4:	and	r1, r1, #31
   13de8:	add	r3, r3, ip, lsl #2
   13dec:	ldr	ip, [r3, #8]
   13df0:	lsr	r0, ip, r1
   13df4:	eor	r2, r0, r2
   13df8:	and	r0, r0, #1
   13dfc:	and	r2, r2, #1
   13e00:	eor	ip, ip, r2, lsl r1
   13e04:	str	ip, [r3, #8]
   13e08:	bx	lr
   13e0c:	ldr	r3, [pc, #8]	; 13e1c <close_stdout@@Base+0x1480>
   13e10:	add	r3, pc, r3
   13e14:	add	r3, r3, #256	; 0x100
   13e18:	b	13de0 <close_stdout@@Base+0x1444>
   13e1c:	andeq	r4, r1, r0, lsl #8
   13e20:	subs	r3, r0, #0
   13e24:	beq	13e34 <close_stdout@@Base+0x1498>
   13e28:	ldr	r0, [r3, #4]
   13e2c:	str	r1, [r3, #4]
   13e30:	bx	lr
   13e34:	ldr	r3, [pc, #8]	; 13e44 <close_stdout@@Base+0x14a8>
   13e38:	add	r3, pc, r3
   13e3c:	add	r3, r3, #256	; 0x100
   13e40:	b	13e28 <close_stdout@@Base+0x148c>
   13e44:	ldrdeq	r4, [r1], -r8
   13e48:	cmp	r0, #0
   13e4c:	push	{r3, lr}
   13e50:	beq	13e74 <close_stdout@@Base+0x14d8>
   13e54:	cmp	r2, #0
   13e58:	cmpne	r1, #0
   13e5c:	mov	r3, #8
   13e60:	strne	r1, [r0, #40]	; 0x28
   13e64:	str	r3, [r0]
   13e68:	strne	r2, [r0, #44]	; 0x2c
   13e6c:	popne	{r3, pc}
   13e70:	bl	11574 <abort@plt>
   13e74:	ldr	r0, [pc, #8]	; 13e84 <close_stdout@@Base+0x14e8>
   13e78:	add	r0, pc, r0
   13e7c:	add	r0, r0, #256	; 0x100
   13e80:	b	13e54 <close_stdout@@Base+0x14b8>
   13e84:	muleq	r1, r8, r3
   13e88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e8c:	sub	sp, sp, #24
   13e90:	mov	r7, r0
   13e94:	mov	sl, r1
   13e98:	ldr	r4, [sp, #56]	; 0x38
   13e9c:	mov	r9, r2
   13ea0:	mov	r8, r3
   13ea4:	cmp	r4, #0
   13ea8:	beq	13efc <close_stdout@@Base+0x1560>
   13eac:	bl	11484 <__errno_location@plt>
   13eb0:	ldr	r3, [r4]
   13eb4:	add	lr, r4, #8
   13eb8:	mov	r1, sl
   13ebc:	mov	r2, r9
   13ec0:	ldr	r6, [r0]
   13ec4:	mov	r5, r0
   13ec8:	str	r3, [sp]
   13ecc:	mov	r0, r7
   13ed0:	ldr	ip, [r4, #4]
   13ed4:	mov	r3, r8
   13ed8:	stmib	sp, {ip, lr}
   13edc:	ldr	ip, [r4, #40]	; 0x28
   13ee0:	str	ip, [sp, #12]
   13ee4:	ldr	ip, [r4, #44]	; 0x2c
   13ee8:	str	ip, [sp, #16]
   13eec:	bl	12e50 <close_stdout@@Base+0x4b4>
   13ef0:	str	r6, [r5]
   13ef4:	add	sp, sp, #24
   13ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13efc:	ldr	r4, [pc, #8]	; 13f0c <close_stdout@@Base+0x1570>
   13f00:	add	r4, pc, r4
   13f04:	add	r4, r4, #256	; 0x100
   13f08:	b	13eac <close_stdout@@Base+0x1510>
   13f0c:	andeq	r4, r1, r0, lsl r3
   13f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f14:	subs	r4, r3, #0
   13f18:	sub	sp, sp, #36	; 0x24
   13f1c:	mov	r7, r0
   13f20:	mov	r6, r1
   13f24:	mov	r5, r2
   13f28:	beq	13fe4 <close_stdout@@Base+0x1648>
   13f2c:	bl	11484 <__errno_location@plt>
   13f30:	ldr	r3, [r4]
   13f34:	ldr	sl, [r4, #4]
   13f38:	add	r9, r4, #8
   13f3c:	mov	r8, r0
   13f40:	mov	r0, #0
   13f44:	ldr	r2, [r8]
   13f48:	cmp	r5, r0
   13f4c:	orreq	sl, sl, #1
   13f50:	str	r9, [sp, #8]
   13f54:	mov	r1, r0
   13f58:	stm	sp, {r3, sl}
   13f5c:	mov	r3, r6
   13f60:	ldr	ip, [r4, #40]	; 0x28
   13f64:	str	r2, [sp, #28]
   13f68:	mov	r2, r7
   13f6c:	str	ip, [sp, #12]
   13f70:	ldr	ip, [r4, #44]	; 0x2c
   13f74:	str	ip, [sp, #16]
   13f78:	bl	12e50 <close_stdout@@Base+0x4b4>
   13f7c:	add	r1, r0, #1
   13f80:	mov	fp, r0
   13f84:	str	r1, [sp, #24]
   13f88:	mov	r0, r1
   13f8c:	bl	14db4 <close_stdout@@Base+0x2418>
   13f90:	ldr	lr, [r4]
   13f94:	str	sl, [sp, #4]
   13f98:	mov	r3, r6
   13f9c:	str	r9, [sp, #8]
   13fa0:	mov	r2, r7
   13fa4:	str	lr, [sp]
   13fa8:	ldr	lr, [r4, #40]	; 0x28
   13fac:	ldr	r1, [sp, #24]
   13fb0:	str	lr, [sp, #12]
   13fb4:	ldr	lr, [r4, #44]	; 0x2c
   13fb8:	str	lr, [sp, #16]
   13fbc:	str	r0, [sp, #24]
   13fc0:	bl	12e50 <close_stdout@@Base+0x4b4>
   13fc4:	ldr	r3, [sp, #28]
   13fc8:	cmp	r5, #0
   13fcc:	str	r3, [r8]
   13fd0:	ldr	ip, [sp, #24]
   13fd4:	strne	fp, [r5]
   13fd8:	mov	r0, ip
   13fdc:	add	sp, sp, #36	; 0x24
   13fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe4:	ldr	r4, [pc, #8]	; 13ff4 <close_stdout@@Base+0x1658>
   13fe8:	add	r4, pc, r4
   13fec:	add	r4, r4, #256	; 0x100
   13ff0:	b	13f2c <close_stdout@@Base+0x1590>
   13ff4:	andeq	r4, r1, r8, lsr #4
   13ff8:	mov	r3, r2
   13ffc:	mov	r2, #0
   14000:	b	13f10 <close_stdout@@Base+0x1574>
   14004:	ldr	r2, [pc, #152]	; 140a4 <close_stdout@@Base+0x1708>
   14008:	push	{r3, r4, r5, r6, r7, lr}
   1400c:	add	r2, pc, r2
   14010:	ldr	r3, [pc, #144]	; 140a8 <close_stdout@@Base+0x170c>
   14014:	ldr	r6, [r2]
   14018:	add	r3, pc, r3
   1401c:	cmp	r6, #1
   14020:	ldr	r7, [r3]
   14024:	movhi	r4, #1
   14028:	movhi	r5, r7
   1402c:	bls	14048 <close_stdout@@Base+0x16ac>
   14030:	ldr	r0, [r5, #12]
   14034:	add	r4, r4, #1
   14038:	bl	112f8 <free@plt>
   1403c:	cmp	r4, r6
   14040:	add	r5, r5, #8
   14044:	bne	14030 <close_stdout@@Base+0x1694>
   14048:	ldr	r4, [pc, #92]	; 140ac <close_stdout@@Base+0x1710>
   1404c:	ldr	r0, [r7, #4]
   14050:	add	r4, pc, r4
   14054:	cmp	r0, r4
   14058:	beq	14070 <close_stdout@@Base+0x16d4>
   1405c:	bl	112f8 <free@plt>
   14060:	ldr	r3, [pc, #72]	; 140b0 <close_stdout@@Base+0x1714>
   14064:	mov	r2, #256	; 0x100
   14068:	add	r3, pc, r3
   1406c:	stmib	r3, {r2, r4}
   14070:	ldr	r4, [pc, #60]	; 140b4 <close_stdout@@Base+0x1718>
   14074:	add	r4, pc, r4
   14078:	add	r5, r4, #4
   1407c:	cmp	r7, r5
   14080:	beq	14090 <close_stdout@@Base+0x16f4>
   14084:	mov	r0, r7
   14088:	bl	112f8 <free@plt>
   1408c:	str	r5, [r4]
   14090:	ldr	r3, [pc, #32]	; 140b8 <close_stdout@@Base+0x171c>
   14094:	mov	r2, #1
   14098:	add	r3, pc, r3
   1409c:	str	r2, [r3]
   140a0:	pop	{r3, r4, r5, r6, r7, pc}
   140a4:	andeq	r4, r1, r4, asr r1
   140a8:	andeq	r4, r1, ip, ror r1
   140ac:	andeq	r4, r1, r0, asr #3
   140b0:	andeq	r4, r1, ip, lsr #2
   140b4:	andeq	r4, r1, r0, lsr #2
   140b8:	andeq	r4, r1, r8, asr #1
   140bc:	ldr	r3, [pc, #12]	; 140d0 <close_stdout@@Base+0x1734>
   140c0:	mvn	r2, #0
   140c4:	add	r3, pc, r3
   140c8:	add	r3, r3, #256	; 0x100
   140cc:	b	13b78 <close_stdout@@Base+0x11dc>
   140d0:	andeq	r4, r1, ip, asr #2
   140d4:	ldr	r3, [pc, #8]	; 140e4 <close_stdout@@Base+0x1748>
   140d8:	add	r3, pc, r3
   140dc:	add	r3, r3, #256	; 0x100
   140e0:	b	13b78 <close_stdout@@Base+0x11dc>
   140e4:	andeq	r4, r1, r8, lsr r1
   140e8:	mov	r1, r0
   140ec:	mov	r0, #0
   140f0:	b	140bc <close_stdout@@Base+0x1720>
   140f4:	mov	r2, r1
   140f8:	mov	r1, r0
   140fc:	mov	r0, #0
   14100:	b	140d4 <close_stdout@@Base+0x1738>
   14104:	ldr	r3, [pc, #92]	; 14168 <close_stdout@@Base+0x17cc>
   14108:	ldr	ip, [pc, #92]	; 1416c <close_stdout@@Base+0x17d0>
   1410c:	add	r3, pc, r3
   14110:	push	{r4, r5, r6, r7, lr}
   14114:	sub	sp, sp, #60	; 0x3c
   14118:	ldr	r4, [r3, ip]
   1411c:	add	r5, sp, #4
   14120:	mov	r7, r2
   14124:	mov	r6, r0
   14128:	mov	r0, r5
   1412c:	ldr	r3, [r4]
   14130:	str	r3, [sp, #52]	; 0x34
   14134:	bl	12c98 <close_stdout@@Base+0x2fc>
   14138:	mov	r3, r5
   1413c:	mvn	r2, #0
   14140:	mov	r0, r6
   14144:	mov	r1, r7
   14148:	bl	13b78 <close_stdout@@Base+0x11dc>
   1414c:	ldr	r2, [sp, #52]	; 0x34
   14150:	ldr	r3, [r4]
   14154:	cmp	r2, r3
   14158:	bne	14164 <close_stdout@@Base+0x17c8>
   1415c:	add	sp, sp, #60	; 0x3c
   14160:	pop	{r4, r5, r6, r7, pc}
   14164:	bl	11340 <__stack_chk_fail@plt>
   14168:	andeq	r3, r1, ip, ror #29
   1416c:	andeq	r0, r0, r4, lsr #2
   14170:	ldr	ip, [pc, #96]	; 141d8 <close_stdout@@Base+0x183c>
   14174:	push	{r4, r5, r6, r7, r8, lr}
   14178:	add	ip, pc, ip
   1417c:	ldr	lr, [pc, #88]	; 141dc <close_stdout@@Base+0x1840>
   14180:	sub	sp, sp, #56	; 0x38
   14184:	mov	r8, r3
   14188:	add	r5, sp, #4
   1418c:	mov	r7, r2
   14190:	mov	r6, r0
   14194:	ldr	r4, [ip, lr]
   14198:	mov	r0, r5
   1419c:	ldr	r3, [r4]
   141a0:	str	r3, [sp, #52]	; 0x34
   141a4:	bl	12c98 <close_stdout@@Base+0x2fc>
   141a8:	mov	r2, r8
   141ac:	mov	r3, r5
   141b0:	mov	r0, r6
   141b4:	mov	r1, r7
   141b8:	bl	13b78 <close_stdout@@Base+0x11dc>
   141bc:	ldr	r2, [sp, #52]	; 0x34
   141c0:	ldr	r3, [r4]
   141c4:	cmp	r2, r3
   141c8:	bne	141d4 <close_stdout@@Base+0x1838>
   141cc:	add	sp, sp, #56	; 0x38
   141d0:	pop	{r4, r5, r6, r7, r8, pc}
   141d4:	bl	11340 <__stack_chk_fail@plt>
   141d8:	andeq	r3, r1, r0, lsl #29
   141dc:	andeq	r0, r0, r4, lsr #2
   141e0:	mov	r2, r1
   141e4:	mov	r1, r0
   141e8:	mov	r0, #0
   141ec:	b	14104 <close_stdout@@Base+0x1768>
   141f0:	mov	ip, r1
   141f4:	mov	r3, r2
   141f8:	mov	r1, r0
   141fc:	mov	r2, ip
   14200:	mov	r0, #0
   14204:	b	14170 <close_stdout@@Base+0x17d4>
   14208:	push	{r4, r5, r6, r7, r8, lr}
   1420c:	mov	r5, r2
   14210:	ldr	lr, [pc, #136]	; 142a0 <close_stdout@@Base+0x1904>
   14214:	mov	r7, r0
   14218:	mov	r6, r1
   1421c:	ldr	r4, [pc, #128]	; 142a4 <close_stdout@@Base+0x1908>
   14220:	add	lr, pc, lr
   14224:	sub	sp, sp, #56	; 0x38
   14228:	add	lr, lr, #256	; 0x100
   1422c:	ldr	r8, [pc, #116]	; 142a8 <close_stdout@@Base+0x190c>
   14230:	add	r4, pc, r4
   14234:	add	ip, sp, #4
   14238:	ldm	lr!, {r0, r1, r2, r3}
   1423c:	ldr	r4, [r4, r8]
   14240:	stmia	ip!, {r0, r1, r2, r3}
   14244:	ldm	lr!, {r0, r1, r2, r3}
   14248:	ldr	r8, [r4]
   1424c:	stmia	ip!, {r0, r1, r2, r3}
   14250:	ldm	lr, {r0, r1, r2, r3}
   14254:	str	r8, [sp, #52]	; 0x34
   14258:	stm	ip, {r0, r1, r2, r3}
   1425c:	mov	r1, r5
   14260:	add	r5, sp, #4
   14264:	mov	r2, #1
   14268:	mov	r0, r5
   1426c:	bl	13dd4 <close_stdout@@Base+0x1438>
   14270:	mov	r2, r6
   14274:	mov	r3, r5
   14278:	mov	r1, r7
   1427c:	mov	r0, #0
   14280:	bl	13b78 <close_stdout@@Base+0x11dc>
   14284:	ldr	r2, [sp, #52]	; 0x34
   14288:	ldr	r3, [r4]
   1428c:	cmp	r2, r3
   14290:	bne	1429c <close_stdout@@Base+0x1900>
   14294:	add	sp, sp, #56	; 0x38
   14298:	pop	{r4, r5, r6, r7, r8, pc}
   1429c:	bl	11340 <__stack_chk_fail@plt>
   142a0:	strdeq	r3, [r1], -r0
   142a4:	andeq	r3, r1, r8, asr #27
   142a8:	andeq	r0, r0, r4, lsr #2
   142ac:	mov	r2, r1
   142b0:	mvn	r1, #0
   142b4:	b	14208 <close_stdout@@Base+0x186c>
   142b8:	mov	r1, #58	; 0x3a
   142bc:	b	142ac <close_stdout@@Base+0x1910>
   142c0:	mov	r2, #58	; 0x3a
   142c4:	b	14208 <close_stdout@@Base+0x186c>
   142c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   142cc:	mov	r5, r2
   142d0:	ldr	lr, [pc, #144]	; 14368 <close_stdout@@Base+0x19cc>
   142d4:	mov	r8, r0
   142d8:	mov	r9, r1
   142dc:	mov	r7, r3
   142e0:	add	lr, pc, lr
   142e4:	ldr	r4, [pc, #128]	; 1436c <close_stdout@@Base+0x19d0>
   142e8:	add	lr, lr, #256	; 0x100
   142ec:	sub	sp, sp, #56	; 0x38
   142f0:	ldr	sl, [pc, #120]	; 14370 <close_stdout@@Base+0x19d4>
   142f4:	add	r4, pc, r4
   142f8:	ldm	lr!, {r0, r1, r2, r3}
   142fc:	add	ip, sp, #4
   14300:	ldr	r4, [r4, sl]
   14304:	ldr	r6, [sp, #88]	; 0x58
   14308:	stmia	ip!, {r0, r1, r2, r3}
   1430c:	ldm	lr!, {r0, r1, r2, r3}
   14310:	ldr	sl, [r4]
   14314:	stmia	ip!, {r0, r1, r2, r3}
   14318:	ldm	lr, {r0, r1, r2, r3}
   1431c:	str	sl, [sp, #52]	; 0x34
   14320:	stm	ip, {r0, r1, r2, r3}
   14324:	mov	r2, r5
   14328:	add	r5, sp, #4
   1432c:	mov	r1, r9
   14330:	mov	r0, r5
   14334:	bl	13e48 <close_stdout@@Base+0x14ac>
   14338:	mov	r2, r6
   1433c:	mov	r3, r5
   14340:	mov	r0, r8
   14344:	mov	r1, r7
   14348:	bl	13b78 <close_stdout@@Base+0x11dc>
   1434c:	ldr	r2, [sp, #52]	; 0x34
   14350:	ldr	r3, [r4]
   14354:	cmp	r2, r3
   14358:	bne	14364 <close_stdout@@Base+0x19c8>
   1435c:	add	sp, sp, #56	; 0x38
   14360:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14364:	bl	11340 <__stack_chk_fail@plt>
   14368:	andeq	r3, r1, r0, lsr pc
   1436c:	andeq	r3, r1, r4, lsl #26
   14370:	andeq	r0, r0, r4, lsr #2
   14374:	push	{lr}		; (str lr, [sp, #-4]!)
   14378:	sub	sp, sp, #12
   1437c:	mvn	ip, #0
   14380:	str	ip, [sp]
   14384:	bl	142c8 <close_stdout@@Base+0x192c>
   14388:	add	sp, sp, #12
   1438c:	pop	{pc}		; (ldr pc, [sp], #4)
   14390:	mov	ip, r1
   14394:	mov	r3, r2
   14398:	mov	r1, r0
   1439c:	mov	r2, ip
   143a0:	mov	r0, #0
   143a4:	b	14374 <close_stdout@@Base+0x19d8>
   143a8:	push	{lr}		; (str lr, [sp, #-4]!)
   143ac:	sub	sp, sp, #12
   143b0:	mov	lr, r1
   143b4:	mov	ip, r2
   143b8:	mov	r1, r0
   143bc:	str	r3, [sp]
   143c0:	mov	r2, lr
   143c4:	mov	r3, ip
   143c8:	mov	r0, #0
   143cc:	bl	142c8 <close_stdout@@Base+0x192c>
   143d0:	add	sp, sp, #12
   143d4:	pop	{pc}		; (ldr pc, [sp], #4)
   143d8:	ldr	r3, [pc, #12]	; 143ec <close_stdout@@Base+0x1a50>
   143dc:	ldr	ip, [pc, #12]	; 143f0 <close_stdout@@Base+0x1a54>
   143e0:	add	r3, pc, r3
   143e4:	ldr	r3, [r3, ip]
   143e8:	b	13b78 <close_stdout@@Base+0x11dc>
   143ec:	andeq	r3, r1, r8, lsl ip
   143f0:	andeq	r0, r0, r0, lsr #2
   143f4:	mov	r2, r1
   143f8:	mov	r1, r0
   143fc:	mov	r0, #0
   14400:	b	143d8 <close_stdout@@Base+0x1a3c>
   14404:	mvn	r2, #0
   14408:	b	143d8 <close_stdout@@Base+0x1a3c>
   1440c:	mov	r1, r0
   14410:	mov	r0, #0
   14414:	b	14404 <close_stdout@@Base+0x1a68>
   14418:	ldr	ip, [pc, #780]	; 1472c <close_stdout@@Base+0x1d90>
   1441c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14420:	mov	r5, r1
   14424:	ldr	lr, [pc, #772]	; 14730 <close_stdout@@Base+0x1d94>
   14428:	sub	sp, sp, #60	; 0x3c
   1442c:	ldr	r1, [r2]
   14430:	add	ip, pc, ip
   14434:	str	r2, [sp, #12]
   14438:	subs	fp, r3, #0
   1443c:	mov	r3, ip
   14440:	ldr	r9, [sp, #96]	; 0x60
   14444:	str	r1, [sp, #20]
   14448:	ldr	lr, [ip, lr]
   1444c:	ldrne	r2, [fp]
   14450:	ldr	r8, [sp, #100]	; 0x64
   14454:	ldr	r3, [lr]
   14458:	strne	r2, [sp, #16]
   1445c:	str	lr, [sp, #8]
   14460:	str	r3, [sp, #52]	; 0x34
   14464:	mvneq	r3, #0
   14468:	streq	r3, [sp, #16]
   1446c:	cmp	r9, #0
   14470:	movne	r3, #0
   14474:	strne	r3, [r9]
   14478:	cmp	r8, #0
   1447c:	movne	r3, #0
   14480:	strne	r3, [r8]
   14484:	cmp	r5, #0
   14488:	beq	14698 <close_stdout@@Base+0x1cfc>
   1448c:	subs	r6, r5, r0
   14490:	moveq	r4, r6
   14494:	bne	14648 <close_stdout@@Base+0x1cac>
   14498:	ldrb	sl, [r5, #1]
   1449c:	cmp	sl, #0
   144a0:	bne	1454c <close_stdout@@Base+0x1bb0>
   144a4:	cmp	r4, #0
   144a8:	mov	r6, sl
   144ac:	beq	14560 <close_stdout@@Base+0x1bc4>
   144b0:	ldrb	r3, [r4]
   144b4:	cmp	r3, #43	; 0x2b
   144b8:	beq	145b4 <close_stdout@@Base+0x1c18>
   144bc:	mov	r0, r4
   144c0:	bl	112b0 <getpwnam@plt>
   144c4:	cmp	r0, #0
   144c8:	beq	145b4 <close_stdout@@Base+0x1c18>
   144cc:	rsbs	r7, r6, #1
   144d0:	ldr	r1, [r0, #8]
   144d4:	movcc	r7, #0
   144d8:	cmp	r5, #0
   144dc:	str	r1, [sp, #20]
   144e0:	moveq	r7, #0
   144e4:	cmp	r7, #0
   144e8:	moveq	r5, r7
   144ec:	bne	14660 <close_stdout@@Base+0x1cc4>
   144f0:	bl	1152c <endpwent@plt>
   144f4:	cmp	sl, #0
   144f8:	beq	14570 <close_stdout@@Base+0x1bd4>
   144fc:	ldrb	r3, [r6]
   14500:	cmp	r3, #43	; 0x2b
   14504:	bne	145e0 <close_stdout@@Base+0x1c44>
   14508:	ldr	ip, [pc, #548]	; 14734 <close_stdout@@Base+0x1d98>
   1450c:	mov	r0, r6
   14510:	mov	r1, #0
   14514:	mov	r2, #10
   14518:	add	ip, pc, ip
   1451c:	add	r3, sp, #24
   14520:	str	ip, [sp]
   14524:	bl	15050 <close_stdout@@Base+0x26b4>
   14528:	cmp	r0, #0
   1452c:	bne	1468c <close_stdout@@Base+0x1cf0>
   14530:	ldr	r3, [sp, #24]
   14534:	ldr	r5, [pc, #508]	; 14738 <close_stdout@@Base+0x1d9c>
   14538:	cmn	r3, #1
   1453c:	add	r5, pc, r5
   14540:	strne	r3, [sp, #16]
   14544:	movne	r5, r0
   14548:	b	145fc <close_stdout@@Base+0x1c60>
   1454c:	adds	sl, r5, #1
   14550:	add	r6, r5, #1
   14554:	movne	sl, #1
   14558:	cmp	r4, #0
   1455c:	bne	144b0 <close_stdout@@Base+0x1b14>
   14560:	cmp	sl, #0
   14564:	mov	r7, r4
   14568:	mov	r5, r4
   1456c:	bne	144fc <close_stdout@@Base+0x1b60>
   14570:	cmp	r5, #0
   14574:	beq	14614 <close_stdout@@Base+0x1c78>
   14578:	mov	r0, r4
   1457c:	bl	112f8 <free@plt>
   14580:	mov	r0, r7
   14584:	bl	112f8 <free@plt>
   14588:	mov	r1, r5
   1458c:	mov	r2, #5
   14590:	mov	r0, #0
   14594:	bl	11334 <dcgettext@plt>
   14598:	ldr	r1, [sp, #8]
   1459c:	ldr	r2, [sp, #52]	; 0x34
   145a0:	ldr	r3, [r1]
   145a4:	cmp	r2, r3
   145a8:	bne	14728 <close_stdout@@Base+0x1d8c>
   145ac:	add	sp, sp, #60	; 0x3c
   145b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145b4:	rsbs	r7, r6, #1
   145b8:	movcc	r7, #0
   145bc:	cmp	r5, #0
   145c0:	moveq	r7, #0
   145c4:	cmp	r7, #0
   145c8:	beq	146cc <close_stdout@@Base+0x1d30>
   145cc:	ldr	r5, [pc, #360]	; 1473c <close_stdout@@Base+0x1da0>
   145d0:	mov	sl, #0
   145d4:	mov	r7, sl
   145d8:	add	r5, pc, r5
   145dc:	b	144f0 <close_stdout@@Base+0x1b54>
   145e0:	mov	r0, r6
   145e4:	bl	11598 <getgrnam@plt>
   145e8:	cmp	r0, #0
   145ec:	beq	14508 <close_stdout@@Base+0x1b6c>
   145f0:	ldr	r0, [r0, #8]
   145f4:	mov	r5, #0
   145f8:	str	r0, [sp, #16]
   145fc:	bl	1128c <endgrent@plt>
   14600:	mov	r0, r6
   14604:	bl	14fac <close_stdout@@Base+0x2610>
   14608:	cmp	r5, #0
   1460c:	mov	r7, r0
   14610:	bne	14578 <close_stdout@@Base+0x1bdc>
   14614:	cmp	fp, #0
   14618:	ldr	r2, [sp, #20]
   1461c:	ldr	r3, [sp, #12]
   14620:	ldrne	r1, [sp, #16]
   14624:	str	r2, [r3]
   14628:	strne	r1, [fp]
   1462c:	cmp	r9, #0
   14630:	strne	r4, [r9]
   14634:	movne	r4, #0
   14638:	cmp	r8, #0
   1463c:	strne	r7, [r8]
   14640:	movne	r7, #0
   14644:	b	14578 <close_stdout@@Base+0x1bdc>
   14648:	add	r1, r6, #1
   1464c:	bl	14f88 <close_stdout@@Base+0x25ec>
   14650:	mov	r3, #0
   14654:	mov	r4, r0
   14658:	strb	r3, [r0, r6]
   1465c:	b	14498 <close_stdout@@Base+0x1afc>
   14660:	ldr	r0, [r0, #12]
   14664:	str	r0, [sp, #16]
   14668:	bl	1158c <getgrgid@plt>
   1466c:	subs	r1, r0, #0
   14670:	beq	146b0 <close_stdout@@Base+0x1d14>
   14674:	ldr	r0, [r1]
   14678:	bl	14fac <close_stdout@@Base+0x2610>
   1467c:	mov	r5, #0
   14680:	mov	r7, r0
   14684:	bl	1128c <endgrent@plt>
   14688:	b	144f0 <close_stdout@@Base+0x1b54>
   1468c:	ldr	r5, [pc, #172]	; 14740 <close_stdout@@Base+0x1da4>
   14690:	add	r5, pc, r5
   14694:	b	145fc <close_stdout@@Base+0x1c60>
   14698:	ldrb	r3, [r0]
   1469c:	cmp	r3, #0
   146a0:	moveq	r4, r5
   146a4:	bne	146c0 <close_stdout@@Base+0x1d24>
   146a8:	mov	sl, #0
   146ac:	b	144a4 <close_stdout@@Base+0x1b08>
   146b0:	ldr	r0, [sp, #16]
   146b4:	add	r2, sp, #28
   146b8:	bl	12b58 <close_stdout@@Base+0x1bc>
   146bc:	b	14678 <close_stdout@@Base+0x1cdc>
   146c0:	bl	14fac <close_stdout@@Base+0x2610>
   146c4:	mov	r4, r0
   146c8:	b	146a8 <close_stdout@@Base+0x1d0c>
   146cc:	ldr	ip, [pc, #112]	; 14744 <close_stdout@@Base+0x1da8>
   146d0:	mov	r0, r4
   146d4:	mov	r1, r7
   146d8:	mov	r2, #10
   146dc:	add	ip, pc, ip
   146e0:	add	r3, sp, #24
   146e4:	str	ip, [sp]
   146e8:	bl	15050 <close_stdout@@Base+0x26b4>
   146ec:	cmp	r0, #0
   146f0:	bne	1471c <close_stdout@@Base+0x1d80>
   146f4:	ldr	r3, [sp, #24]
   146f8:	ldr	r5, [pc, #72]	; 14748 <close_stdout@@Base+0x1dac>
   146fc:	cmn	r3, #1
   14700:	add	r5, pc, r5
   14704:	movne	r7, sl
   14708:	movne	r5, r0
   1470c:	strne	r3, [sp, #20]
   14710:	mov	sl, r7
   14714:	mov	r7, #0
   14718:	b	144f0 <close_stdout@@Base+0x1b54>
   1471c:	ldr	r5, [pc, #40]	; 1474c <close_stdout@@Base+0x1db0>
   14720:	add	r5, pc, r5
   14724:	b	14710 <close_stdout@@Base+0x1d74>
   14728:	bl	11340 <__stack_chk_fail@plt>
   1472c:	andeq	r3, r1, r8, asr #23
   14730:	andeq	r0, r0, r4, lsr #2
   14734:	muleq	r0, ip, r9
   14738:	andeq	r2, r0, r8, lsl #27
   1473c:	ldrdeq	r2, [r0], -ip
   14740:	andeq	r2, r0, r4, lsr ip
   14744:	ldrdeq	r2, [r0], -r8
   14748:	andeq	r2, r0, r4, lsr #23
   1474c:	andeq	r2, r0, r4, lsl #23
   14750:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14754:	subs	sl, r2, #0
   14758:	sub	sp, sp, #8
   1475c:	mov	r7, r1
   14760:	mov	r9, r3
   14764:	mov	r5, r0
   14768:	ldr	r8, [sp, #40]	; 0x28
   1476c:	beq	147ec <close_stdout@@Base+0x1e50>
   14770:	mov	r1, #58	; 0x3a
   14774:	bl	1146c <strchr@plt>
   14778:	str	r9, [sp]
   1477c:	str	r8, [sp, #4]
   14780:	mov	r2, r7
   14784:	mov	r3, sl
   14788:	mov	r6, r0
   1478c:	mov	r1, r0
   14790:	mov	r0, r5
   14794:	bl	14418 <close_stdout@@Base+0x1a7c>
   14798:	cmp	r6, #0
   1479c:	mov	r4, r0
   147a0:	bne	147e0 <close_stdout@@Base+0x1e44>
   147a4:	cmp	r0, #0
   147a8:	beq	147e0 <close_stdout@@Base+0x1e44>
   147ac:	mov	r1, #46	; 0x2e
   147b0:	mov	r0, r5
   147b4:	bl	1146c <strchr@plt>
   147b8:	subs	r1, r0, #0
   147bc:	beq	147e0 <close_stdout@@Base+0x1e44>
   147c0:	str	r9, [sp]
   147c4:	mov	r0, r5
   147c8:	str	r8, [sp, #4]
   147cc:	mov	r2, r7
   147d0:	mov	r3, sl
   147d4:	bl	14418 <close_stdout@@Base+0x1a7c>
   147d8:	cmp	r0, #0
   147dc:	moveq	r4, #0
   147e0:	mov	r0, r4
   147e4:	add	sp, sp, #8
   147e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   147ec:	str	r3, [sp]
   147f0:	mov	r1, sl
   147f4:	str	r8, [sp, #4]
   147f8:	mov	r2, r7
   147fc:	mov	r3, sl
   14800:	bl	14418 <close_stdout@@Base+0x1a7c>
   14804:	mov	r4, r0
   14808:	mov	r0, r4
   1480c:	add	sp, sp, #8
   14810:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14814:	push	{r4, r5, r6, r7, lr}
   14818:	cmp	r1, #0
   1481c:	sub	sp, sp, #36	; 0x24
   14820:	ldr	r7, [pc, #896]	; 14ba8 <close_stdout@@Base+0x220c>
   14824:	mov	ip, r3
   14828:	mov	r5, r0
   1482c:	add	r7, pc, r7
   14830:	ldr	r4, [sp, #56]	; 0x38
   14834:	ldr	r6, [sp, #60]	; 0x3c
   14838:	beq	14b7c <close_stdout@@Base+0x21e0>
   1483c:	str	r2, [sp]
   14840:	mov	r3, r1
   14844:	ldr	r2, [pc, #864]	; 14bac <close_stdout@@Base+0x2210>
   14848:	mov	r1, #1
   1484c:	str	ip, [sp, #4]
   14850:	add	r2, pc, r2
   14854:	bl	114e4 <__fprintf_chk@plt>
   14858:	ldr	r1, [pc, #848]	; 14bb0 <close_stdout@@Base+0x2214>
   1485c:	mov	r2, #5
   14860:	mov	r0, #0
   14864:	add	r1, pc, r1
   14868:	bl	11334 <dcgettext@plt>
   1486c:	ldr	r2, [pc, #832]	; 14bb4 <close_stdout@@Base+0x2218>
   14870:	movw	ip, #2013	; 0x7dd
   14874:	mov	r1, #1
   14878:	ldr	r2, [r7, r2]
   1487c:	str	ip, [sp]
   14880:	mov	r3, r0
   14884:	mov	r0, r5
   14888:	bl	114e4 <__fprintf_chk@plt>
   1488c:	ldr	r1, [pc, #804]	; 14bb8 <close_stdout@@Base+0x221c>
   14890:	mov	r0, #0
   14894:	mov	r2, #5
   14898:	add	r1, pc, r1
   1489c:	bl	11334 <dcgettext@plt>
   148a0:	mov	r1, r5
   148a4:	bl	11298 <fputs_unlocked@plt>
   148a8:	cmp	r6, #9
   148ac:	addls	pc, pc, r6, lsl #2
   148b0:	b	14b98 <close_stdout@@Base+0x21fc>
   148b4:	b	14948 <close_stdout@@Base+0x1fac>
   148b8:	b	1494c <close_stdout@@Base+0x1fb0>
   148bc:	b	1497c <close_stdout@@Base+0x1fe0>
   148c0:	b	149b0 <close_stdout@@Base+0x2014>
   148c4:	b	149ec <close_stdout@@Base+0x2050>
   148c8:	b	14a2c <close_stdout@@Base+0x2090>
   148cc:	b	14a74 <close_stdout@@Base+0x20d8>
   148d0:	b	14ac4 <close_stdout@@Base+0x2128>
   148d4:	b	14b1c <close_stdout@@Base+0x2180>
   148d8:	b	148dc <close_stdout@@Base+0x1f40>
   148dc:	ldr	r1, [pc, #728]	; 14bbc <close_stdout@@Base+0x2220>
   148e0:	mov	r0, #0
   148e4:	add	r1, pc, r1
   148e8:	mov	r2, #5
   148ec:	bl	11334 <dcgettext@plt>
   148f0:	ldm	r4, {r3, ip}
   148f4:	mov	r1, #1
   148f8:	str	ip, [sp]
   148fc:	ldr	ip, [r4, #8]
   14900:	str	ip, [sp, #4]
   14904:	ldr	ip, [r4, #12]
   14908:	str	ip, [sp, #8]
   1490c:	ldr	ip, [r4, #16]
   14910:	str	ip, [sp, #12]
   14914:	ldr	ip, [r4, #20]
   14918:	str	ip, [sp, #16]
   1491c:	ldr	ip, [r4, #24]
   14920:	str	ip, [sp, #20]
   14924:	ldr	ip, [r4, #28]
   14928:	str	ip, [sp, #24]
   1492c:	ldr	ip, [r4, #32]
   14930:	str	ip, [sp, #28]
   14934:	mov	r2, r0
   14938:	mov	r0, r5
   1493c:	bl	114e4 <__fprintf_chk@plt>
   14940:	add	sp, sp, #36	; 0x24
   14944:	pop	{r4, r5, r6, r7, pc}
   14948:	bl	11574 <abort@plt>
   1494c:	ldr	r1, [pc, #620]	; 14bc0 <close_stdout@@Base+0x2224>
   14950:	mov	r2, #5
   14954:	mov	r0, #0
   14958:	add	r1, pc, r1
   1495c:	bl	11334 <dcgettext@plt>
   14960:	ldr	r3, [r4]
   14964:	mov	r1, #1
   14968:	mov	r2, r0
   1496c:	mov	r0, r5
   14970:	add	sp, sp, #36	; 0x24
   14974:	pop	{r4, r5, r6, r7, lr}
   14978:	b	114e4 <__fprintf_chk@plt>
   1497c:	ldr	r1, [pc, #576]	; 14bc4 <close_stdout@@Base+0x2228>
   14980:	mov	r2, #5
   14984:	mov	r0, #0
   14988:	add	r1, pc, r1
   1498c:	bl	11334 <dcgettext@plt>
   14990:	ldm	r4, {r3, ip}
   14994:	mov	r1, #1
   14998:	str	ip, [sp, #56]	; 0x38
   1499c:	mov	r2, r0
   149a0:	mov	r0, r5
   149a4:	add	sp, sp, #36	; 0x24
   149a8:	pop	{r4, r5, r6, r7, lr}
   149ac:	b	114e4 <__fprintf_chk@plt>
   149b0:	ldr	r1, [pc, #528]	; 14bc8 <close_stdout@@Base+0x222c>
   149b4:	mov	r2, #5
   149b8:	mov	r0, #0
   149bc:	add	r1, pc, r1
   149c0:	bl	11334 <dcgettext@plt>
   149c4:	ldm	r4, {r3, ip}
   149c8:	mov	r1, #1
   149cc:	str	ip, [sp, #56]	; 0x38
   149d0:	ldr	ip, [r4, #8]
   149d4:	str	ip, [sp, #60]	; 0x3c
   149d8:	mov	r2, r0
   149dc:	mov	r0, r5
   149e0:	add	sp, sp, #36	; 0x24
   149e4:	pop	{r4, r5, r6, r7, lr}
   149e8:	b	114e4 <__fprintf_chk@plt>
   149ec:	ldr	r1, [pc, #472]	; 14bcc <close_stdout@@Base+0x2230>
   149f0:	mov	r2, #5
   149f4:	mov	r0, #0
   149f8:	add	r1, pc, r1
   149fc:	bl	11334 <dcgettext@plt>
   14a00:	ldm	r4, {r3, ip}
   14a04:	mov	r1, #1
   14a08:	str	ip, [sp]
   14a0c:	ldr	ip, [r4, #8]
   14a10:	str	ip, [sp, #4]
   14a14:	ldr	ip, [r4, #12]
   14a18:	str	ip, [sp, #8]
   14a1c:	mov	r2, r0
   14a20:	mov	r0, r5
   14a24:	bl	114e4 <__fprintf_chk@plt>
   14a28:	b	14940 <close_stdout@@Base+0x1fa4>
   14a2c:	ldr	r1, [pc, #412]	; 14bd0 <close_stdout@@Base+0x2234>
   14a30:	mov	r2, #5
   14a34:	mov	r0, #0
   14a38:	add	r1, pc, r1
   14a3c:	bl	11334 <dcgettext@plt>
   14a40:	ldm	r4, {r3, ip}
   14a44:	mov	r1, #1
   14a48:	str	ip, [sp]
   14a4c:	ldr	ip, [r4, #8]
   14a50:	str	ip, [sp, #4]
   14a54:	ldr	ip, [r4, #12]
   14a58:	str	ip, [sp, #8]
   14a5c:	ldr	ip, [r4, #16]
   14a60:	str	ip, [sp, #12]
   14a64:	mov	r2, r0
   14a68:	mov	r0, r5
   14a6c:	bl	114e4 <__fprintf_chk@plt>
   14a70:	b	14940 <close_stdout@@Base+0x1fa4>
   14a74:	ldr	r1, [pc, #344]	; 14bd4 <close_stdout@@Base+0x2238>
   14a78:	mov	r2, #5
   14a7c:	mov	r0, #0
   14a80:	add	r1, pc, r1
   14a84:	bl	11334 <dcgettext@plt>
   14a88:	ldm	r4, {r3, ip}
   14a8c:	mov	r1, #1
   14a90:	str	ip, [sp]
   14a94:	ldr	ip, [r4, #8]
   14a98:	str	ip, [sp, #4]
   14a9c:	ldr	ip, [r4, #12]
   14aa0:	str	ip, [sp, #8]
   14aa4:	ldr	ip, [r4, #16]
   14aa8:	str	ip, [sp, #12]
   14aac:	ldr	ip, [r4, #20]
   14ab0:	str	ip, [sp, #16]
   14ab4:	mov	r2, r0
   14ab8:	mov	r0, r5
   14abc:	bl	114e4 <__fprintf_chk@plt>
   14ac0:	b	14940 <close_stdout@@Base+0x1fa4>
   14ac4:	ldr	r1, [pc, #268]	; 14bd8 <close_stdout@@Base+0x223c>
   14ac8:	mov	r2, #5
   14acc:	mov	r0, #0
   14ad0:	add	r1, pc, r1
   14ad4:	bl	11334 <dcgettext@plt>
   14ad8:	ldm	r4, {r3, ip}
   14adc:	mov	r1, #1
   14ae0:	str	ip, [sp]
   14ae4:	ldr	ip, [r4, #8]
   14ae8:	str	ip, [sp, #4]
   14aec:	ldr	ip, [r4, #12]
   14af0:	str	ip, [sp, #8]
   14af4:	ldr	ip, [r4, #16]
   14af8:	str	ip, [sp, #12]
   14afc:	ldr	ip, [r4, #20]
   14b00:	str	ip, [sp, #16]
   14b04:	ldr	ip, [r4, #24]
   14b08:	str	ip, [sp, #20]
   14b0c:	mov	r2, r0
   14b10:	mov	r0, r5
   14b14:	bl	114e4 <__fprintf_chk@plt>
   14b18:	b	14940 <close_stdout@@Base+0x1fa4>
   14b1c:	ldr	r1, [pc, #184]	; 14bdc <close_stdout@@Base+0x2240>
   14b20:	mov	r2, #5
   14b24:	mov	r0, #0
   14b28:	add	r1, pc, r1
   14b2c:	bl	11334 <dcgettext@plt>
   14b30:	ldm	r4, {r3, ip}
   14b34:	mov	r1, #1
   14b38:	str	ip, [sp]
   14b3c:	ldr	ip, [r4, #8]
   14b40:	str	ip, [sp, #4]
   14b44:	ldr	ip, [r4, #12]
   14b48:	str	ip, [sp, #8]
   14b4c:	ldr	ip, [r4, #16]
   14b50:	str	ip, [sp, #12]
   14b54:	ldr	ip, [r4, #20]
   14b58:	str	ip, [sp, #16]
   14b5c:	ldr	ip, [r4, #24]
   14b60:	str	ip, [sp, #20]
   14b64:	ldr	ip, [r4, #28]
   14b68:	str	ip, [sp, #24]
   14b6c:	mov	r2, r0
   14b70:	mov	r0, r5
   14b74:	bl	114e4 <__fprintf_chk@plt>
   14b78:	b	14940 <close_stdout@@Base+0x1fa4>
   14b7c:	str	r3, [sp]
   14b80:	mov	r3, r2
   14b84:	ldr	r2, [pc, #84]	; 14be0 <close_stdout@@Base+0x2244>
   14b88:	mov	r1, #1
   14b8c:	add	r2, pc, r2
   14b90:	bl	114e4 <__fprintf_chk@plt>
   14b94:	b	14858 <close_stdout@@Base+0x1ebc>
   14b98:	ldr	r1, [pc, #68]	; 14be4 <close_stdout@@Base+0x2248>
   14b9c:	mov	r0, #0
   14ba0:	add	r1, pc, r1
   14ba4:	b	148e8 <close_stdout@@Base+0x1f4c>
   14ba8:	andeq	r3, r1, ip, asr #15
   14bac:	andeq	r2, r0, r4, lsl #21
   14bb0:	andeq	r2, r0, r4, lsl #21
   14bb4:	andeq	r0, r0, r0, asr r1
   14bb8:	andeq	r2, r0, r4, asr sl
   14bbc:	andeq	r2, r0, r0, ror #23
   14bc0:	andeq	r2, r0, r0, ror #20
   14bc4:	andeq	r2, r0, r0, asr #20
   14bc8:	andeq	r2, r0, r4, lsr #20
   14bcc:	andeq	r2, r0, r4, lsl #20
   14bd0:	andeq	r2, r0, r4, ror #19
   14bd4:	andeq	r2, r0, r0, asr #19
   14bd8:	muleq	r0, r8, r9
   14bdc:	andeq	r2, r0, ip, ror #18
   14be0:	andeq	r2, r0, r4, asr r7
   14be4:	andeq	r2, r0, r8, asr r9
   14be8:	push	{r4, r5, lr}
   14bec:	sub	sp, sp, #12
   14bf0:	ldr	r5, [sp, #24]
   14bf4:	ldr	ip, [r5]
   14bf8:	cmp	ip, #0
   14bfc:	beq	14c18 <close_stdout@@Base+0x227c>
   14c00:	mov	lr, r5
   14c04:	mov	ip, #0
   14c08:	ldr	r4, [lr, #4]!
   14c0c:	add	ip, ip, #1
   14c10:	cmp	r4, #0
   14c14:	bne	14c08 <close_stdout@@Base+0x226c>
   14c18:	stm	sp, {r5, ip}
   14c1c:	bl	14814 <close_stdout@@Base+0x1e78>
   14c20:	add	sp, sp, #12
   14c24:	pop	{r4, r5, pc}
   14c28:	push	{r4, r5, r6, r7, lr}
   14c2c:	sub	sp, sp, #60	; 0x3c
   14c30:	ldr	r4, [pc, #100]	; 14c9c <close_stdout@@Base+0x2300>
   14c34:	mov	ip, #0
   14c38:	ldr	r5, [pc, #96]	; 14ca0 <close_stdout@@Base+0x2304>
   14c3c:	mov	lr, ip
   14c40:	add	r4, pc, r4
   14c44:	ldr	r6, [sp, #80]	; 0x50
   14c48:	ldr	r7, [r4, r5]
   14c4c:	add	r5, sp, #12
   14c50:	ldr	r4, [r7]
   14c54:	str	r4, [sp, #52]	; 0x34
   14c58:	ldr	r4, [r6, ip]
   14c5c:	cmp	r4, #0
   14c60:	str	r4, [r5, ip]
   14c64:	beq	14c78 <close_stdout@@Base+0x22dc>
   14c68:	add	lr, lr, #1
   14c6c:	add	ip, ip, #4
   14c70:	cmp	lr, #10
   14c74:	bne	14c58 <close_stdout@@Base+0x22bc>
   14c78:	stm	sp, {r5, lr}
   14c7c:	bl	14814 <close_stdout@@Base+0x1e78>
   14c80:	ldr	r2, [sp, #52]	; 0x34
   14c84:	ldr	r3, [r7]
   14c88:	cmp	r2, r3
   14c8c:	bne	14c98 <close_stdout@@Base+0x22fc>
   14c90:	add	sp, sp, #60	; 0x3c
   14c94:	pop	{r4, r5, r6, r7, pc}
   14c98:	bl	11340 <__stack_chk_fail@plt>
   14c9c:			; <UNDEFINED> instruction: 0x000133b8
   14ca0:	andeq	r0, r0, r4, lsr #2
   14ca4:	push	{r3}		; (str r3, [sp, #-4]!)
   14ca8:	push	{r4, lr}
   14cac:	sub	sp, sp, #20
   14cb0:	ldr	lr, [pc, #72]	; 14d00 <close_stdout@@Base+0x2364>
   14cb4:	add	ip, sp, #32
   14cb8:	ldr	r4, [pc, #68]	; 14d04 <close_stdout@@Base+0x2368>
   14cbc:	add	lr, pc, lr
   14cc0:	ldr	r3, [sp, #28]
   14cc4:	ldr	r4, [lr, r4]
   14cc8:	str	ip, [sp]
   14ccc:	str	ip, [sp, #8]
   14cd0:	ldr	ip, [r4]
   14cd4:	str	ip, [sp, #12]
   14cd8:	bl	14c28 <close_stdout@@Base+0x228c>
   14cdc:	ldr	r2, [sp, #12]
   14ce0:	ldr	r3, [r4]
   14ce4:	cmp	r2, r3
   14ce8:	bne	14cfc <close_stdout@@Base+0x2360>
   14cec:	add	sp, sp, #20
   14cf0:	pop	{r4, lr}
   14cf4:	add	sp, sp, #4
   14cf8:	bx	lr
   14cfc:	bl	11340 <__stack_chk_fail@plt>
   14d00:	andeq	r3, r1, ip, lsr r3
   14d04:	andeq	r0, r0, r4, lsr #2
   14d08:	ldr	r1, [pc, #132]	; 14d94 <close_stdout@@Base+0x23f8>
   14d0c:	mov	r2, #5
   14d10:	push	{r4, lr}
   14d14:	add	r1, pc, r1
   14d18:	mov	r0, #0
   14d1c:	ldr	r4, [pc, #116]	; 14d98 <close_stdout@@Base+0x23fc>
   14d20:	bl	11334 <dcgettext@plt>
   14d24:	ldr	r2, [pc, #112]	; 14d9c <close_stdout@@Base+0x2400>
   14d28:	add	r4, pc, r4
   14d2c:	add	r2, pc, r2
   14d30:	mov	r1, r0
   14d34:	mov	r0, #1
   14d38:	bl	114cc <__printf_chk@plt>
   14d3c:	ldr	r1, [pc, #92]	; 14da0 <close_stdout@@Base+0x2404>
   14d40:	mov	r2, #5
   14d44:	mov	r0, #0
   14d48:	add	r1, pc, r1
   14d4c:	bl	11334 <dcgettext@plt>
   14d50:	ldr	r2, [pc, #76]	; 14da4 <close_stdout@@Base+0x2408>
   14d54:	ldr	r3, [pc, #76]	; 14da8 <close_stdout@@Base+0x240c>
   14d58:	add	r2, pc, r2
   14d5c:	add	r3, pc, r3
   14d60:	mov	r1, r0
   14d64:	mov	r0, #1
   14d68:	bl	114cc <__printf_chk@plt>
   14d6c:	ldr	r1, [pc, #56]	; 14dac <close_stdout@@Base+0x2410>
   14d70:	mov	r0, #0
   14d74:	mov	r2, #5
   14d78:	add	r1, pc, r1
   14d7c:	bl	11334 <dcgettext@plt>
   14d80:	ldr	r3, [pc, #40]	; 14db0 <close_stdout@@Base+0x2414>
   14d84:	ldr	r3, [r4, r3]
   14d88:	pop	{r4, lr}
   14d8c:	ldr	r1, [r3]
   14d90:	b	11298 <fputs_unlocked@plt>
   14d94:	andeq	r2, r0, r0, lsr #16
   14d98:	ldrdeq	r3, [r1], -r0
   14d9c:	andeq	r2, r0, r0, lsr #16
   14da0:	andeq	r2, r0, ip, lsl r8
   14da4:	muleq	r0, r8, r0
   14da8:	andeq	r2, r0, r4, lsr #1
   14dac:	andeq	r2, r0, r0, lsl #16
   14db0:	andeq	r0, r0, r0, asr #2
   14db4:	push	{r4, lr}
   14db8:	mov	r4, r0
   14dbc:	bl	11400 <malloc@plt>
   14dc0:	rsbs	r3, r0, #1
   14dc4:	movcc	r3, #0
   14dc8:	cmp	r4, #0
   14dcc:	moveq	r3, #0
   14dd0:	cmp	r3, #0
   14dd4:	popeq	{r4, pc}
   14dd8:	bl	14fc8 <close_stdout@@Base+0x262c>
   14ddc:	push	{r3, r4, r5, lr}
   14de0:	mov	r4, r0
   14de4:	mvn	r0, #0
   14de8:	mov	r5, r1
   14dec:	bl	15e40 <close_stdout@@Base+0x34a4>
   14df0:	cmp	r0, r4
   14df4:	bcc	14e04 <close_stdout@@Base+0x2468>
   14df8:	mul	r0, r4, r5
   14dfc:	pop	{r3, r4, r5, lr}
   14e00:	b	14db4 <close_stdout@@Base+0x2418>
   14e04:	bl	14fc8 <close_stdout@@Base+0x262c>
   14e08:	b	14db4 <close_stdout@@Base+0x2418>
   14e0c:	rsbs	r3, r1, #1
   14e10:	push	{r4, lr}
   14e14:	movcc	r3, #0
   14e18:	cmp	r0, #0
   14e1c:	mov	r4, r1
   14e20:	moveq	r3, #0
   14e24:	cmp	r3, #0
   14e28:	bne	14e4c <close_stdout@@Base+0x24b0>
   14e2c:	bl	1134c <realloc@plt>
   14e30:	rsbs	r3, r0, #1
   14e34:	movcc	r3, #0
   14e38:	cmp	r4, #0
   14e3c:	moveq	r3, #0
   14e40:	cmp	r3, #0
   14e44:	popeq	{r4, pc}
   14e48:	bl	14fc8 <close_stdout@@Base+0x262c>
   14e4c:	bl	112f8 <free@plt>
   14e50:	mov	r0, #0
   14e54:	pop	{r4, pc}
   14e58:	push	{r4, r5, r6, lr}
   14e5c:	mov	r5, r1
   14e60:	mov	r6, r0
   14e64:	mov	r1, r2
   14e68:	mvn	r0, #0
   14e6c:	mov	r4, r2
   14e70:	bl	15e40 <close_stdout@@Base+0x34a4>
   14e74:	cmp	r0, r5
   14e78:	bcc	14e8c <close_stdout@@Base+0x24f0>
   14e7c:	mov	r0, r6
   14e80:	mul	r1, r5, r4
   14e84:	pop	{r4, r5, r6, lr}
   14e88:	b	14e0c <close_stdout@@Base+0x2470>
   14e8c:	bl	14fc8 <close_stdout@@Base+0x262c>
   14e90:	push	{r3, r4, r5, r6, r7, lr}
   14e94:	subs	r7, r0, #0
   14e98:	mov	r5, r1
   14e9c:	mov	r6, r2
   14ea0:	ldr	r4, [r1]
   14ea4:	beq	14edc <close_stdout@@Base+0x2540>
   14ea8:	movw	r0, #43690	; 0xaaaa
   14eac:	mov	r1, r2
   14eb0:	bfi	r0, r0, #16, #16
   14eb4:	bl	15e40 <close_stdout@@Base+0x34a4>
   14eb8:	cmp	r4, r0
   14ebc:	addcc	r3, r4, #1
   14ec0:	addcc	r4, r4, r3, lsr #1
   14ec4:	bcs	14f00 <close_stdout@@Base+0x2564>
   14ec8:	str	r4, [r5]
   14ecc:	mov	r0, r7
   14ed0:	mul	r1, r6, r4
   14ed4:	pop	{r3, r4, r5, r6, r7, lr}
   14ed8:	b	14e0c <close_stdout@@Base+0x2470>
   14edc:	cmp	r4, #0
   14ee0:	bne	14ec8 <close_stdout@@Base+0x252c>
   14ee4:	mov	r0, #64	; 0x40
   14ee8:	mov	r1, r2
   14eec:	bl	15e40 <close_stdout@@Base+0x34a4>
   14ef0:	cmp	r0, #0
   14ef4:	movne	r4, r0
   14ef8:	addeq	r4, r0, #1
   14efc:	b	14ec8 <close_stdout@@Base+0x252c>
   14f00:	bl	14fc8 <close_stdout@@Base+0x262c>
   14f04:	cmp	r0, #0
   14f08:	push	{r3, lr}
   14f0c:	ldr	r3, [r1]
   14f10:	beq	14f3c <close_stdout@@Base+0x25a0>
   14f14:	movw	r2, #43689	; 0xaaa9
   14f18:	movt	r2, #43690	; 0xaaaa
   14f1c:	cmp	r3, r2
   14f20:	addls	r2, r3, #1
   14f24:	addls	r3, r3, r2, lsr #1
   14f28:	bhi	14f54 <close_stdout@@Base+0x25b8>
   14f2c:	str	r3, [r1]
   14f30:	mov	r1, r3
   14f34:	pop	{r3, lr}
   14f38:	b	14e0c <close_stdout@@Base+0x2470>
   14f3c:	cmp	r3, #0
   14f40:	moveq	r3, #64	; 0x40
   14f44:	str	r3, [r1]
   14f48:	mov	r1, r3
   14f4c:	pop	{r3, lr}
   14f50:	b	14e0c <close_stdout@@Base+0x2470>
   14f54:	bl	14fc8 <close_stdout@@Base+0x262c>
   14f58:	push	{r4, lr}
   14f5c:	mov	r4, r0
   14f60:	bl	14db4 <close_stdout@@Base+0x2418>
   14f64:	mov	r2, r4
   14f68:	mov	r1, #0
   14f6c:	pop	{r4, lr}
   14f70:	b	114b4 <memset@plt>
   14f74:	push	{r3, lr}
   14f78:	bl	11280 <calloc@plt>
   14f7c:	cmp	r0, #0
   14f80:	popne	{r3, pc}
   14f84:	bl	14fc8 <close_stdout@@Base+0x262c>
   14f88:	push	{r3, r4, r5, lr}
   14f8c:	mov	r4, r1
   14f90:	mov	r5, r0
   14f94:	mov	r0, r1
   14f98:	bl	14db4 <close_stdout@@Base+0x2418>
   14f9c:	mov	r1, r5
   14fa0:	mov	r2, r4
   14fa4:	pop	{r3, r4, r5, lr}
   14fa8:	b	11310 <memcpy@plt>
   14fac:	push	{r4, lr}
   14fb0:	mov	r4, r0
   14fb4:	bl	11460 <strlen@plt>
   14fb8:	add	r1, r0, #1
   14fbc:	mov	r0, r4
   14fc0:	pop	{r4, lr}
   14fc4:	b	14f88 <close_stdout@@Base+0x25ec>
   14fc8:	ldr	r3, [pc, #64]	; 15010 <close_stdout@@Base+0x2674>
   14fcc:	mov	r2, #5
   14fd0:	ldr	ip, [pc, #60]	; 15014 <close_stdout@@Base+0x2678>
   14fd4:	mov	r0, #0
   14fd8:	add	r3, pc, r3
   14fdc:	ldr	r1, [pc, #52]	; 15018 <close_stdout@@Base+0x267c>
   14fe0:	push	{r4, lr}
   14fe4:	add	r1, pc, r1
   14fe8:	ldr	r3, [r3, ip]
   14fec:	ldr	r4, [r3]
   14ff0:	bl	11334 <dcgettext@plt>
   14ff4:	ldr	r2, [pc, #32]	; 1501c <close_stdout@@Base+0x2680>
   14ff8:	mov	r1, #0
   14ffc:	add	r2, pc, r2
   15000:	mov	r3, r0
   15004:	mov	r0, r4
   15008:	bl	113dc <error@plt>
   1500c:	bl	11574 <abort@plt>
   15010:	andeq	r3, r1, r0, lsr #32
   15014:	andeq	r0, r0, r4, asr #2
   15018:	andeq	r2, r0, r4, lsl #12
   1501c:	andeq	r2, r0, r4, ror #3
   15020:	push	{r4, lr}
   15024:	bl	15a28 <close_stdout@@Base+0x308c>
   15028:	cmn	r0, #1
   1502c:	mov	r4, r0
   15030:	beq	1503c <close_stdout@@Base+0x26a0>
   15034:	mov	r0, r4
   15038:	pop	{r4, pc}
   1503c:	bl	11484 <__errno_location@plt>
   15040:	ldr	r3, [r0]
   15044:	cmp	r3, #12
   15048:	bne	15034 <close_stdout@@Base+0x2698>
   1504c:	bl	14fc8 <close_stdout@@Base+0x262c>
   15050:	ldr	ip, [pc, #1308]	; 15574 <close_stdout@@Base+0x2bd8>
   15054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15058:	mov	sl, r2
   1505c:	ldr	r2, [pc, #1300]	; 15578 <close_stdout@@Base+0x2bdc>
   15060:	add	ip, pc, ip
   15064:	mov	r9, r3
   15068:	sub	sp, sp, #20
   1506c:	mov	r3, ip
   15070:	cmp	sl, #36	; 0x24
   15074:	ldr	r6, [ip, r2]
   15078:	mov	r5, r0
   1507c:	mov	r7, r1
   15080:	ldr	r8, [sp, #56]	; 0x38
   15084:	ldr	r3, [r6]
   15088:	str	r3, [sp, #12]
   1508c:	bhi	15554 <close_stdout@@Base+0x2bb8>
   15090:	cmp	r1, #0
   15094:	addeq	r7, sp, #8
   15098:	bl	1143c <__ctype_b_loc@plt>
   1509c:	ldrb	ip, [r5]
   150a0:	mov	r2, r5
   150a4:	ldr	r1, [r0]
   150a8:	b	150b0 <close_stdout@@Base+0x2714>
   150ac:	ldrb	ip, [r2, #1]!
   150b0:	lsl	r3, ip, #1
   150b4:	ldrh	r4, [r1, r3]
   150b8:	and	r4, r4, #8192	; 0x2000
   150bc:	uxth	r4, r4
   150c0:	cmp	r4, #0
   150c4:	bne	150ac <close_stdout@@Base+0x2710>
   150c8:	cmp	ip, #45	; 0x2d
   150cc:	bne	150ec <close_stdout@@Base+0x2750>
   150d0:	mov	r0, #4
   150d4:	ldr	r2, [sp, #12]
   150d8:	ldr	r3, [r6]
   150dc:	cmp	r2, r3
   150e0:	bne	15550 <close_stdout@@Base+0x2bb4>
   150e4:	add	sp, sp, #20
   150e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150ec:	bl	11484 <__errno_location@plt>
   150f0:	mov	r2, sl
   150f4:	mov	r1, r7
   150f8:	str	r4, [r0]
   150fc:	mov	fp, r0
   15100:	mov	r0, r5
   15104:	bl	11454 <strtoul@plt>
   15108:	ldr	r3, [r7]
   1510c:	cmp	r3, r5
   15110:	mov	sl, r0
   15114:	beq	152a4 <close_stdout@@Base+0x2908>
   15118:	ldr	r0, [fp]
   1511c:	cmp	r0, #0
   15120:	bne	15150 <close_stdout@@Base+0x27b4>
   15124:	mov	r4, r0
   15128:	cmp	r8, #0
   1512c:	streq	sl, [r9]
   15130:	moveq	r0, r4
   15134:	beq	150d4 <close_stdout@@Base+0x2738>
   15138:	ldrb	r5, [r3]
   1513c:	cmp	r5, #0
   15140:	bne	15160 <close_stdout@@Base+0x27c4>
   15144:	mov	r0, r4
   15148:	str	sl, [r9]
   1514c:	b	150d4 <close_stdout@@Base+0x2738>
   15150:	cmp	r0, #34	; 0x22
   15154:	moveq	r4, #1
   15158:	bne	150d0 <close_stdout@@Base+0x2734>
   1515c:	b	15128 <close_stdout@@Base+0x278c>
   15160:	mov	r0, r8
   15164:	mov	r1, r5
   15168:	str	r3, [sp, #4]
   1516c:	bl	1146c <strchr@plt>
   15170:	ldr	r3, [sp, #4]
   15174:	cmp	r0, #0
   15178:	beq	152dc <close_stdout@@Base+0x2940>
   1517c:	mov	r0, r8
   15180:	mov	r1, #48	; 0x30
   15184:	str	r3, [sp, #4]
   15188:	bl	1146c <strchr@plt>
   1518c:	ldr	r3, [sp, #4]
   15190:	cmp	r0, #0
   15194:	beq	151b4 <close_stdout@@Base+0x2818>
   15198:	ldrb	r2, [r3, #1]
   1519c:	cmp	r2, #68	; 0x44
   151a0:	beq	15538 <close_stdout@@Base+0x2b9c>
   151a4:	cmp	r2, #105	; 0x69
   151a8:	beq	15520 <close_stdout@@Base+0x2b84>
   151ac:	cmp	r2, #66	; 0x42
   151b0:	beq	15538 <close_stdout@@Base+0x2b9c>
   151b4:	mov	r8, #1
   151b8:	mov	fp, #1024	; 0x400
   151bc:	sub	r5, r5, #66	; 0x42
   151c0:	cmp	r5, #53	; 0x35
   151c4:	addls	pc, pc, r5, lsl #2
   151c8:	b	152dc <close_stdout@@Base+0x2940>
   151cc:	b	154cc <close_stdout@@Base+0x2b30>
   151d0:	b	152dc <close_stdout@@Base+0x2940>
   151d4:	b	152dc <close_stdout@@Base+0x2940>
   151d8:	b	1548c <close_stdout@@Base+0x2af0>
   151dc:	b	152dc <close_stdout@@Base+0x2940>
   151e0:	b	154e0 <close_stdout@@Base+0x2b44>
   151e4:	b	152dc <close_stdout@@Base+0x2940>
   151e8:	b	152dc <close_stdout@@Base+0x2940>
   151ec:	b	152dc <close_stdout@@Base+0x2940>
   151f0:	b	1546c <close_stdout@@Base+0x2ad0>
   151f4:	b	152dc <close_stdout@@Base+0x2940>
   151f8:	b	15438 <close_stdout@@Base+0x2a9c>
   151fc:	b	152dc <close_stdout@@Base+0x2940>
   15200:	b	152dc <close_stdout@@Base+0x2940>
   15204:	b	153f8 <close_stdout@@Base+0x2a5c>
   15208:	b	152dc <close_stdout@@Base+0x2940>
   1520c:	b	152dc <close_stdout@@Base+0x2940>
   15210:	b	152dc <close_stdout@@Base+0x2940>
   15214:	b	153b8 <close_stdout@@Base+0x2a1c>
   15218:	b	152dc <close_stdout@@Base+0x2940>
   1521c:	b	152dc <close_stdout@@Base+0x2940>
   15220:	b	152dc <close_stdout@@Base+0x2940>
   15224:	b	152dc <close_stdout@@Base+0x2940>
   15228:	b	15378 <close_stdout@@Base+0x29dc>
   1522c:	b	15338 <close_stdout@@Base+0x299c>
   15230:	b	152dc <close_stdout@@Base+0x2940>
   15234:	b	152dc <close_stdout@@Base+0x2940>
   15238:	b	152dc <close_stdout@@Base+0x2940>
   1523c:	b	152dc <close_stdout@@Base+0x2940>
   15240:	b	152dc <close_stdout@@Base+0x2940>
   15244:	b	152dc <close_stdout@@Base+0x2940>
   15248:	b	152dc <close_stdout@@Base+0x2940>
   1524c:	b	15324 <close_stdout@@Base+0x2988>
   15250:	b	152e8 <close_stdout@@Base+0x294c>
   15254:	b	152dc <close_stdout@@Base+0x2940>
   15258:	b	152dc <close_stdout@@Base+0x2940>
   1525c:	b	152dc <close_stdout@@Base+0x2940>
   15260:	b	154e0 <close_stdout@@Base+0x2b44>
   15264:	b	152dc <close_stdout@@Base+0x2940>
   15268:	b	152dc <close_stdout@@Base+0x2940>
   1526c:	b	152dc <close_stdout@@Base+0x2940>
   15270:	b	1546c <close_stdout@@Base+0x2ad0>
   15274:	b	152dc <close_stdout@@Base+0x2940>
   15278:	b	15438 <close_stdout@@Base+0x2a9c>
   1527c:	b	152dc <close_stdout@@Base+0x2940>
   15280:	b	152dc <close_stdout@@Base+0x2940>
   15284:	b	152dc <close_stdout@@Base+0x2940>
   15288:	b	152dc <close_stdout@@Base+0x2940>
   1528c:	b	152dc <close_stdout@@Base+0x2940>
   15290:	b	152dc <close_stdout@@Base+0x2940>
   15294:	b	153b8 <close_stdout@@Base+0x2a1c>
   15298:	b	152dc <close_stdout@@Base+0x2940>
   1529c:	b	152dc <close_stdout@@Base+0x2940>
   152a0:	b	15308 <close_stdout@@Base+0x296c>
   152a4:	cmp	r8, #0
   152a8:	beq	150d0 <close_stdout@@Base+0x2734>
   152ac:	ldrb	r5, [r5]
   152b0:	cmp	r5, #0
   152b4:	beq	150d0 <close_stdout@@Base+0x2734>
   152b8:	mov	r0, r8
   152bc:	mov	r1, r5
   152c0:	str	r3, [sp, #4]
   152c4:	bl	1146c <strchr@plt>
   152c8:	ldr	r3, [sp, #4]
   152cc:	cmp	r0, #0
   152d0:	movne	sl, #1
   152d4:	bne	1517c <close_stdout@@Base+0x27e0>
   152d8:	b	150d0 <close_stdout@@Base+0x2734>
   152dc:	str	sl, [r9]
   152e0:	orr	r0, r4, #2
   152e4:	b	150d4 <close_stdout@@Base+0x2738>
   152e8:	mov	r2, #0
   152ec:	add	r1, r3, r8
   152f0:	str	r1, [r7]
   152f4:	ldrb	r3, [r3, r8]
   152f8:	orr	r4, r4, r2
   152fc:	cmp	r3, #0
   15300:	orrne	r4, r4, #2
   15304:	b	15144 <close_stdout@@Base+0x27a8>
   15308:	cmn	sl, #-2147483647	; 0x80000001
   1530c:	lslls	sl, sl, #1
   15310:	movls	r2, #0
   15314:	bls	152ec <close_stdout@@Base+0x2950>
   15318:	mvn	sl, #0
   1531c:	mov	r2, #1
   15320:	b	152ec <close_stdout@@Base+0x2950>
   15324:	cmp	sl, #8388608	; 0x800000
   15328:	lslcc	sl, sl, #9
   1532c:	movcc	r2, #0
   15330:	bcc	152ec <close_stdout@@Base+0x2950>
   15334:	b	15318 <close_stdout@@Base+0x297c>
   15338:	mov	r1, fp
   1533c:	mvn	r0, #0
   15340:	str	r3, [sp, #4]
   15344:	bl	15e40 <close_stdout@@Base+0x34a4>
   15348:	ldr	r3, [sp, #4]
   1534c:	mov	r1, #7
   15350:	mov	r2, #0
   15354:	cmp	r0, sl
   15358:	movcs	ip, #0
   1535c:	movcc	ip, #1
   15360:	mulcs	sl, fp, sl
   15364:	mvncc	sl, #0
   15368:	subs	r1, r1, #1
   1536c:	orr	r2, r2, ip
   15370:	bne	15354 <close_stdout@@Base+0x29b8>
   15374:	b	152ec <close_stdout@@Base+0x2950>
   15378:	mov	r1, fp
   1537c:	mvn	r0, #0
   15380:	str	r3, [sp, #4]
   15384:	bl	15e40 <close_stdout@@Base+0x34a4>
   15388:	ldr	r3, [sp, #4]
   1538c:	mov	r1, #8
   15390:	mov	r2, #0
   15394:	cmp	r0, sl
   15398:	movcs	ip, #0
   1539c:	movcc	ip, #1
   153a0:	mulcs	sl, fp, sl
   153a4:	mvncc	sl, #0
   153a8:	subs	r1, r1, #1
   153ac:	orr	r2, r2, ip
   153b0:	bne	15394 <close_stdout@@Base+0x29f8>
   153b4:	b	152ec <close_stdout@@Base+0x2950>
   153b8:	mov	r1, fp
   153bc:	mvn	r0, #0
   153c0:	str	r3, [sp, #4]
   153c4:	bl	15e40 <close_stdout@@Base+0x34a4>
   153c8:	ldr	r3, [sp, #4]
   153cc:	mov	r1, #4
   153d0:	mov	r2, #0
   153d4:	cmp	r0, sl
   153d8:	movcs	ip, #0
   153dc:	movcc	ip, #1
   153e0:	mulcs	sl, fp, sl
   153e4:	mvncc	sl, #0
   153e8:	subs	r1, r1, #1
   153ec:	orr	r2, r2, ip
   153f0:	bne	153d4 <close_stdout@@Base+0x2a38>
   153f4:	b	152ec <close_stdout@@Base+0x2950>
   153f8:	mov	r1, fp
   153fc:	mvn	r0, #0
   15400:	str	r3, [sp, #4]
   15404:	bl	15e40 <close_stdout@@Base+0x34a4>
   15408:	ldr	r3, [sp, #4]
   1540c:	mov	r1, #5
   15410:	mov	r2, #0
   15414:	cmp	r0, sl
   15418:	movcs	ip, #0
   1541c:	movcc	ip, #1
   15420:	mulcs	sl, fp, sl
   15424:	mvncc	sl, #0
   15428:	subs	r1, r1, #1
   1542c:	orr	r2, r2, ip
   15430:	bne	15414 <close_stdout@@Base+0x2a78>
   15434:	b	152ec <close_stdout@@Base+0x2950>
   15438:	mvn	r0, #0
   1543c:	mov	r1, fp
   15440:	str	r3, [sp, #4]
   15444:	bl	15e40 <close_stdout@@Base+0x34a4>
   15448:	ldr	r3, [sp, #4]
   1544c:	cmp	sl, r0
   15450:	bhi	15544 <close_stdout@@Base+0x2ba8>
   15454:	mul	sl, sl, fp
   15458:	cmp	r0, sl
   1545c:	bcc	15544 <close_stdout@@Base+0x2ba8>
   15460:	mul	sl, fp, sl
   15464:	mov	r2, #0
   15468:	b	152ec <close_stdout@@Base+0x2950>
   1546c:	mvn	r0, #0
   15470:	mov	r1, fp
   15474:	str	r3, [sp, #4]
   15478:	bl	15e40 <close_stdout@@Base+0x34a4>
   1547c:	ldr	r3, [sp, #4]
   15480:	cmp	sl, r0
   15484:	bhi	15318 <close_stdout@@Base+0x297c>
   15488:	b	15460 <close_stdout@@Base+0x2ac4>
   1548c:	mov	r1, fp
   15490:	mvn	r0, #0
   15494:	str	r3, [sp, #4]
   15498:	bl	15e40 <close_stdout@@Base+0x34a4>
   1549c:	ldr	r3, [sp, #4]
   154a0:	mov	r1, #6
   154a4:	mov	r2, #0
   154a8:	cmp	r0, sl
   154ac:	movcs	ip, #0
   154b0:	movcc	ip, #1
   154b4:	mulcs	sl, fp, sl
   154b8:	mvncc	sl, #0
   154bc:	subs	r1, r1, #1
   154c0:	orr	r2, r2, ip
   154c4:	bne	154a8 <close_stdout@@Base+0x2b0c>
   154c8:	b	152ec <close_stdout@@Base+0x2950>
   154cc:	cmp	sl, #4194304	; 0x400000
   154d0:	lslcc	sl, sl, #10
   154d4:	movcc	r2, #0
   154d8:	bcc	152ec <close_stdout@@Base+0x2950>
   154dc:	b	15318 <close_stdout@@Base+0x297c>
   154e0:	mov	r1, fp
   154e4:	mvn	r0, #0
   154e8:	str	r3, [sp, #4]
   154ec:	bl	15e40 <close_stdout@@Base+0x34a4>
   154f0:	ldr	r3, [sp, #4]
   154f4:	mov	r1, #3
   154f8:	mov	r2, #0
   154fc:	cmp	r0, sl
   15500:	movcs	ip, #0
   15504:	movcc	ip, #1
   15508:	mulcs	sl, fp, sl
   1550c:	mvncc	sl, #0
   15510:	subs	r1, r1, #1
   15514:	orr	r2, r2, ip
   15518:	bne	154fc <close_stdout@@Base+0x2b60>
   1551c:	b	152ec <close_stdout@@Base+0x2950>
   15520:	ldrb	r8, [r3, #2]
   15524:	mov	fp, #1024	; 0x400
   15528:	cmp	r8, #66	; 0x42
   1552c:	moveq	r8, #3
   15530:	movne	r8, #1
   15534:	b	151bc <close_stdout@@Base+0x2820>
   15538:	mov	r8, #2
   1553c:	mov	fp, #1000	; 0x3e8
   15540:	b	151bc <close_stdout@@Base+0x2820>
   15544:	mov	r2, #1
   15548:	mvn	sl, #0
   1554c:	b	152ec <close_stdout@@Base+0x2950>
   15550:	bl	11340 <__stack_chk_fail@plt>
   15554:	ldr	r0, [pc, #32]	; 1557c <close_stdout@@Base+0x2be0>
   15558:	mov	r2, #96	; 0x60
   1555c:	ldr	r1, [pc, #28]	; 15580 <close_stdout@@Base+0x2be4>
   15560:	ldr	r3, [pc, #28]	; 15584 <close_stdout@@Base+0x2be8>
   15564:	add	r0, pc, r0
   15568:	add	r1, pc, r1
   1556c:	add	r3, pc, r3
   15570:	bl	115a4 <__assert_fail@plt>
   15574:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15578:	andeq	r0, r0, r4, lsr #2
   1557c:	andeq	r2, r0, r4, lsr #1
   15580:	andeq	r2, r0, r8, asr #1
   15584:	muleq	r0, r0, r0
   15588:	push	{r4, r5, r6, lr}
   1558c:	mov	r4, r0
   15590:	bl	113c4 <__fpending@plt>
   15594:	mov	r6, r0
   15598:	mov	r0, r4
   1559c:	ldr	r4, [r4]
   155a0:	bl	15c98 <close_stdout@@Base+0x32fc>
   155a4:	and	r4, r4, #32
   155a8:	adds	r5, r0, #0
   155ac:	movne	r5, #1
   155b0:	cmp	r4, #0
   155b4:	bne	155d4 <close_stdout@@Base+0x2c38>
   155b8:	cmp	r5, #0
   155bc:	beq	155cc <close_stdout@@Base+0x2c30>
   155c0:	cmp	r6, #0
   155c4:	beq	155f0 <close_stdout@@Base+0x2c54>
   155c8:	mvn	r4, #0
   155cc:	mov	r0, r4
   155d0:	pop	{r4, r5, r6, pc}
   155d4:	cmp	r5, #0
   155d8:	bne	155c8 <close_stdout@@Base+0x2c2c>
   155dc:	bl	11484 <__errno_location@plt>
   155e0:	mvn	r4, #0
   155e4:	str	r5, [r0]
   155e8:	mov	r0, r4
   155ec:	pop	{r4, r5, r6, pc}
   155f0:	bl	11484 <__errno_location@plt>
   155f4:	ldr	r4, [r0]
   155f8:	subs	r4, r4, #9
   155fc:	mvnne	r4, #0
   15600:	mov	r0, r4
   15604:	pop	{r4, r5, r6, pc}
   15608:	ldr	r3, [pc, #984]	; 159e8 <close_stdout@@Base+0x304c>
   1560c:	mov	r0, #14
   15610:	ldr	r2, [pc, #980]	; 159ec <close_stdout@@Base+0x3050>
   15614:	add	r3, pc, r3
   15618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1561c:	sub	sp, sp, #132	; 0x84
   15620:	ldr	r6, [r3, r2]
   15624:	ldr	r3, [r6]
   15628:	str	r3, [sp, #124]	; 0x7c
   1562c:	bl	11544 <nl_langinfo@plt>
   15630:	subs	r5, r0, #0
   15634:	beq	156e8 <close_stdout@@Base+0x2d4c>
   15638:	ldr	r3, [pc, #944]	; 159f0 <close_stdout@@Base+0x3054>
   1563c:	ldr	r4, [pc, r3]
   15640:	cmp	r4, #0
   15644:	beq	156f4 <close_stdout@@Base+0x2d58>
   15648:	ldrb	r7, [r4]
   1564c:	cmp	r7, #0
   15650:	bne	15684 <close_stdout@@Base+0x2ce8>
   15654:	b	156bc <close_stdout@@Base+0x2d20>
   15658:	mov	r0, r4
   1565c:	bl	11460 <strlen@plt>
   15660:	add	r0, r0, #1
   15664:	add	r7, r4, r0
   15668:	mov	r0, r7
   1566c:	bl	11460 <strlen@plt>
   15670:	add	r0, r0, #1
   15674:	add	r4, r7, r0
   15678:	ldrb	r7, [r7, r0]
   1567c:	cmp	r7, #0
   15680:	beq	156bc <close_stdout@@Base+0x2d20>
   15684:	mov	r0, r5
   15688:	mov	r1, r4
   1568c:	bl	112c8 <strcmp@plt>
   15690:	cmp	r0, #0
   15694:	beq	156ac <close_stdout@@Base+0x2d10>
   15698:	cmp	r7, #42	; 0x2a
   1569c:	bne	15658 <close_stdout@@Base+0x2cbc>
   156a0:	ldrb	r3, [r4, #1]
   156a4:	cmp	r3, #0
   156a8:	bne	15658 <close_stdout@@Base+0x2cbc>
   156ac:	mov	r0, r4
   156b0:	bl	11460 <strlen@plt>
   156b4:	add	r0, r0, #1
   156b8:	add	r5, r4, r0
   156bc:	ldrb	r3, [r5]
   156c0:	cmp	r3, #0
   156c4:	ldreq	r5, [pc, #808]	; 159f4 <close_stdout@@Base+0x3058>
   156c8:	addeq	r5, pc, r5
   156cc:	ldr	r2, [sp, #124]	; 0x7c
   156d0:	mov	r0, r5
   156d4:	ldr	r3, [r6]
   156d8:	cmp	r2, r3
   156dc:	bne	159bc <close_stdout@@Base+0x3020>
   156e0:	add	sp, sp, #132	; 0x84
   156e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156e8:	ldr	r5, [pc, #776]	; 159f8 <close_stdout@@Base+0x305c>
   156ec:	add	r5, pc, r5
   156f0:	b	15638 <close_stdout@@Base+0x2c9c>
   156f4:	ldr	r0, [pc, #768]	; 159fc <close_stdout@@Base+0x3060>
   156f8:	add	r0, pc, r0
   156fc:	bl	113f4 <getenv@plt>
   15700:	subs	r8, r0, #0
   15704:	beq	15994 <close_stdout@@Base+0x2ff8>
   15708:	ldrb	r3, [r8]
   1570c:	cmp	r3, #0
   15710:	beq	15928 <close_stdout@@Base+0x2f8c>
   15714:	bl	11460 <strlen@plt>
   15718:	subs	sl, r0, #0
   1571c:	subne	r3, sl, #1
   15720:	bne	15938 <close_stdout@@Base+0x2f9c>
   15724:	mov	r9, #0
   15728:	mov	fp, r9
   1572c:	add	r9, sl, r9
   15730:	add	r0, r9, #14
   15734:	bl	11400 <malloc@plt>
   15738:	subs	r7, r0, #0
   1573c:	beq	15988 <close_stdout@@Base+0x2fec>
   15740:	mov	r1, r8
   15744:	mov	r2, sl
   15748:	bl	11310 <memcpy@plt>
   1574c:	cmp	fp, #0
   15750:	add	ip, r7, r9
   15754:	movne	r3, #47	; 0x2f
   15758:	strbne	r3, [r7, sl]
   1575c:	ldr	r3, [pc, #668]	; 15a00 <close_stdout@@Base+0x3064>
   15760:	add	r3, pc, r3
   15764:	ldm	r3!, {r0, r1, r2}
   15768:	ldrh	r3, [r3]
   1576c:	str	r0, [r7, r9]
   15770:	mov	r0, r7
   15774:	str	r1, [ip, #4]
   15778:	mov	r1, #32768	; 0x8000
   1577c:	strh	r3, [ip, #12]
   15780:	str	r2, [ip, #8]
   15784:	bl	113e8 <open64@plt>
   15788:	subs	r8, r0, #0
   1578c:	blt	15950 <close_stdout@@Base+0x2fb4>
   15790:	ldr	r1, [pc, #620]	; 15a04 <close_stdout@@Base+0x3068>
   15794:	add	r1, pc, r1
   15798:	bl	11274 <fdopen@plt>
   1579c:	subs	fp, r0, #0
   157a0:	beq	159a8 <close_stdout@@Base+0x300c>
   157a4:	ldr	r0, [pc, #604]	; 15a08 <close_stdout@@Base+0x306c>
   157a8:	add	sl, sp, #20
   157ac:	add	r9, sp, #72	; 0x48
   157b0:	mov	r8, #0
   157b4:	add	r0, pc, r0
   157b8:	str	r0, [sp, #12]
   157bc:	ldr	r3, [fp, #4]
   157c0:	ldr	r2, [fp, #8]
   157c4:	cmp	r3, r2
   157c8:	bcs	158b4 <close_stdout@@Base+0x2f18>
   157cc:	add	r2, r3, #1
   157d0:	str	r2, [fp, #4]
   157d4:	ldrb	r0, [r3]
   157d8:	cmp	r0, #32
   157dc:	beq	157bc <close_stdout@@Base+0x2e20>
   157e0:	sub	r3, r0, #9
   157e4:	cmp	r3, #1
   157e8:	bls	157bc <close_stdout@@Base+0x2e20>
   157ec:	cmp	r0, #35	; 0x23
   157f0:	beq	158c8 <close_stdout@@Base+0x2f2c>
   157f4:	mov	r1, fp
   157f8:	bl	11478 <ungetc@plt>
   157fc:	mov	r0, fp
   15800:	ldr	r1, [sp, #12]
   15804:	mov	r2, sl
   15808:	mov	r3, r9
   1580c:	bl	114c0 <fscanf@plt>
   15810:	cmp	r0, #1
   15814:	ble	158f8 <close_stdout@@Base+0x2f5c>
   15818:	mov	r0, sl
   1581c:	bl	11460 <strlen@plt>
   15820:	str	r0, [sp, #8]
   15824:	mov	r0, r9
   15828:	bl	11460 <strlen@plt>
   1582c:	cmp	r8, #0
   15830:	mov	r2, r0
   15834:	bne	1595c <close_stdout@@Base+0x2fc0>
   15838:	ldr	r3, [sp, #8]
   1583c:	str	r2, [sp]
   15840:	add	r8, r0, r3
   15844:	add	r0, r8, #3
   15848:	add	r8, r8, #2
   1584c:	bl	11400 <malloc@plt>
   15850:	ldr	r2, [sp]
   15854:	mov	r3, r0
   15858:	cmp	r3, #0
   1585c:	beq	159c0 <close_stdout@@Base+0x3024>
   15860:	ldr	r0, [sp, #8]
   15864:	movw	r1, #65534	; 0xfffe
   15868:	movt	r1, #65535	; 0xffff
   1586c:	rsb	r2, r2, r8
   15870:	rsb	r1, r0, r1
   15874:	stm	sp, {r2, r3}
   15878:	add	r0, r1, r2
   1587c:	mov	r1, sl
   15880:	add	r0, r3, r0
   15884:	mov	r4, r3
   15888:	bl	113ac <strcpy@plt>
   1588c:	ldr	r2, [sp]
   15890:	ldr	r3, [sp, #4]
   15894:	mov	r1, r9
   15898:	sub	r0, r2, #1
   1589c:	add	r0, r3, r0
   158a0:	bl	113ac <strcpy@plt>
   158a4:	ldr	r3, [fp, #4]
   158a8:	ldr	r2, [fp, #8]
   158ac:	cmp	r3, r2
   158b0:	bcc	157cc <close_stdout@@Base+0x2e30>
   158b4:	mov	r0, fp
   158b8:	bl	11508 <__uflow@plt>
   158bc:	cmn	r0, #1
   158c0:	beq	158f8 <close_stdout@@Base+0x2f5c>
   158c4:	b	157d8 <close_stdout@@Base+0x2e3c>
   158c8:	ldr	r3, [fp, #4]
   158cc:	ldr	r2, [fp, #8]
   158d0:	cmp	r3, r2
   158d4:	bcs	159dc <close_stdout@@Base+0x3040>
   158d8:	add	r2, r3, #1
   158dc:	str	r2, [fp, #4]
   158e0:	ldrb	r0, [r3]
   158e4:	cmp	r0, #10
   158e8:	cmnne	r0, #1
   158ec:	bne	158c8 <close_stdout@@Base+0x2f2c>
   158f0:	cmn	r0, #1
   158f4:	bne	157bc <close_stdout@@Base+0x2e20>
   158f8:	mov	r0, fp
   158fc:	bl	15c98 <close_stdout@@Base+0x32fc>
   15900:	cmp	r8, #0
   15904:	beq	15950 <close_stdout@@Base+0x2fb4>
   15908:	mov	r3, #0
   1590c:	strb	r3, [r4, r8]
   15910:	mov	r0, r7
   15914:	bl	112f8 <free@plt>
   15918:	ldr	r3, [pc, #236]	; 15a0c <close_stdout@@Base+0x3070>
   1591c:	add	r3, pc, r3
   15920:	str	r4, [r3]
   15924:	b	15648 <close_stdout@@Base+0x2cac>
   15928:	ldr	r8, [pc, #224]	; 15a10 <close_stdout@@Base+0x3074>
   1592c:	mov	r3, #7
   15930:	mov	sl, #8
   15934:	add	r8, pc, r8
   15938:	ldrb	r3, [r8, r3]
   1593c:	cmp	r3, #47	; 0x2f
   15940:	movne	r9, #1
   15944:	movne	fp, r9
   15948:	bne	1572c <close_stdout@@Base+0x2d90>
   1594c:	b	15724 <close_stdout@@Base+0x2d88>
   15950:	ldr	r4, [pc, #188]	; 15a14 <close_stdout@@Base+0x3078>
   15954:	add	r4, pc, r4
   15958:	b	15910 <close_stdout@@Base+0x2f74>
   1595c:	ldr	r0, [sp, #8]
   15960:	str	r2, [sp]
   15964:	add	r3, r0, r2
   15968:	mov	r0, r4
   1596c:	add	r8, r3, r8
   15970:	add	r1, r8, #3
   15974:	add	r8, r8, #2
   15978:	bl	1134c <realloc@plt>
   1597c:	ldr	r2, [sp]
   15980:	mov	r3, r0
   15984:	b	15858 <close_stdout@@Base+0x2ebc>
   15988:	ldr	r4, [pc, #136]	; 15a18 <close_stdout@@Base+0x307c>
   1598c:	add	r4, pc, r4
   15990:	b	15918 <close_stdout@@Base+0x2f7c>
   15994:	ldr	r8, [pc, #128]	; 15a1c <close_stdout@@Base+0x3080>
   15998:	mov	r3, #7
   1599c:	mov	sl, #8
   159a0:	add	r8, pc, r8
   159a4:	b	15938 <close_stdout@@Base+0x2f9c>
   159a8:	ldr	r4, [pc, #112]	; 15a20 <close_stdout@@Base+0x3084>
   159ac:	mov	r0, r8
   159b0:	add	r4, pc, r4
   159b4:	bl	11580 <close@plt>
   159b8:	b	15910 <close_stdout@@Base+0x2f74>
   159bc:	bl	11340 <__stack_chk_fail@plt>
   159c0:	mov	r0, r4
   159c4:	ldr	r4, [pc, #88]	; 15a24 <close_stdout@@Base+0x3088>
   159c8:	bl	112f8 <free@plt>
   159cc:	mov	r0, fp
   159d0:	add	r4, pc, r4
   159d4:	bl	15c98 <close_stdout@@Base+0x32fc>
   159d8:	b	15910 <close_stdout@@Base+0x2f74>
   159dc:	mov	r0, fp
   159e0:	bl	11508 <__uflow@plt>
   159e4:	b	158e4 <close_stdout@@Base+0x2f48>
   159e8:	andeq	r2, r1, r4, ror #19
   159ec:	andeq	r0, r0, r4, lsr #2
   159f0:	andeq	r2, r1, r4, lsl #26
   159f4:	andeq	r1, r0, r4, lsl #31
   159f8:	andeq	r1, r0, r8, asr #15
   159fc:	andeq	r1, r0, ip, asr pc
   15a00:	andeq	r1, r0, r4, lsl #30
   15a04:	andeq	r1, r0, r0, ror #29
   15a08:	andeq	r1, r0, r4, asr #29
   15a0c:	andeq	r2, r1, r4, lsr #20
   15a10:	andeq	r1, r0, ip, lsl #26
   15a14:	andeq	r1, r0, r0, ror #10
   15a18:	andeq	r1, r0, r8, lsr #10
   15a1c:	andeq	r1, r0, r0, lsr #25
   15a20:	andeq	r1, r0, r4, lsl #10
   15a24:	andeq	r1, r0, r4, ror #9
   15a28:	ldr	r3, [pc, #608]	; 15c90 <close_stdout@@Base+0x32f4>
   15a2c:	ldr	ip, [pc, #608]	; 15c94 <close_stdout@@Base+0x32f8>
   15a30:	add	r3, pc, r3
   15a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a38:	subs	r7, r0, #0
   15a3c:	ldr	r9, [r3, ip]
   15a40:	sub	sp, sp, #12
   15a44:	mov	r6, r1
   15a48:	mov	sl, r2
   15a4c:	ldr	r3, [r9]
   15a50:	str	r3, [sp, #4]
   15a54:	beq	15b2c <close_stdout@@Base+0x3190>
   15a58:	mov	r0, #0
   15a5c:	mov	r1, #40	; 0x28
   15a60:	mov	r3, #10
   15a64:	str	r3, [sp]
   15a68:	bl	1134c <realloc@plt>
   15a6c:	subs	r4, r0, #0
   15a70:	bne	15aa4 <close_stdout@@Base+0x3108>
   15a74:	b	15b00 <close_stdout@@Base+0x3164>
   15a78:	ldr	r1, [sp]
   15a7c:	cmn	r1, #-1073741823	; 0xc0000001
   15a80:	bhi	15ae0 <close_stdout@@Base+0x3144>
   15a84:	lsl	r1, r1, #2
   15a88:	mov	r0, r4
   15a8c:	bl	1134c <realloc@plt>
   15a90:	cmp	r0, #0
   15a94:	beq	15c80 <close_stdout@@Base+0x32e4>
   15a98:	cmp	r5, #0
   15a9c:	bge	15b20 <close_stdout@@Base+0x3184>
   15aa0:	mov	r4, r0
   15aa4:	mov	r0, r7
   15aa8:	mov	r1, r6
   15aac:	mov	r2, r4
   15ab0:	mov	r3, sp
   15ab4:	ldr	fp, [sp]
   15ab8:	bl	114a8 <getgrouplist@plt>
   15abc:	subs	r5, r0, #0
   15ac0:	bge	15a78 <close_stdout@@Base+0x30dc>
   15ac4:	ldr	ip, [sp]
   15ac8:	cmp	fp, ip
   15acc:	lsleq	ip, fp, #1
   15ad0:	streq	ip, [sp]
   15ad4:	mov	r1, ip
   15ad8:	cmn	r1, #-1073741823	; 0xc0000001
   15adc:	bls	15a84 <close_stdout@@Base+0x30e8>
   15ae0:	bl	11484 <__errno_location@plt>
   15ae4:	mov	r3, #12
   15ae8:	mov	r6, r3
   15aec:	mov	r5, r0
   15af0:	str	r3, [r0]
   15af4:	mov	r0, r4
   15af8:	bl	112f8 <free@plt>
   15afc:	str	r6, [r5]
   15b00:	mvn	r3, #0
   15b04:	ldr	r2, [sp, #4]
   15b08:	mov	r0, r3
   15b0c:	ldr	r3, [r9]
   15b10:	cmp	r2, r3
   15b14:	bne	15c7c <close_stdout@@Base+0x32e0>
   15b18:	add	sp, sp, #12
   15b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b20:	str	r0, [sl]
   15b24:	ldr	r3, [sp]
   15b28:	b	15b04 <close_stdout@@Base+0x3168>
   15b2c:	mov	r1, r7
   15b30:	bl	11550 <getgroups@plt>
   15b34:	cmp	r0, #0
   15b38:	str	r0, [sp]
   15b3c:	blt	15c00 <close_stdout@@Base+0x3264>
   15b40:	beq	15b4c <close_stdout@@Base+0x31b0>
   15b44:	cmn	r6, #1
   15b48:	beq	15b54 <close_stdout@@Base+0x31b8>
   15b4c:	add	r0, r0, #1
   15b50:	str	r0, [sp]
   15b54:	cmn	r0, #-1073741823	; 0xc0000001
   15b58:	bhi	15c38 <close_stdout@@Base+0x329c>
   15b5c:	lsl	r1, r0, #2
   15b60:	mov	r0, #0
   15b64:	bl	1134c <realloc@plt>
   15b68:	subs	r4, r0, #0
   15b6c:	beq	15b00 <close_stdout@@Base+0x3164>
   15b70:	adds	r3, r6, #1
   15b74:	ldr	r2, [sp]
   15b78:	movne	r3, #1
   15b7c:	cmp	r3, #0
   15b80:	rsb	r0, r3, r2
   15b84:	beq	15c4c <close_stdout@@Base+0x32b0>
   15b88:	add	r1, r4, #4
   15b8c:	bl	11550 <getgroups@plt>
   15b90:	cmp	r0, #0
   15b94:	strge	r6, [r4]
   15b98:	addge	r0, r0, #1
   15b9c:	blt	15c5c <close_stdout@@Base+0x32c0>
   15ba0:	cmp	r0, #1
   15ba4:	str	r4, [sl]
   15ba8:	ble	15bf8 <close_stdout@@Base+0x325c>
   15bac:	add	ip, r4, r0, lsl #2
   15bb0:	add	r2, r4, #4
   15bb4:	cmp	ip, r2
   15bb8:	ldr	r5, [r4]
   15bbc:	bhi	15be0 <close_stdout@@Base+0x3244>
   15bc0:	b	15bf8 <close_stdout@@Base+0x325c>
   15bc4:	ldr	r1, [r4]
   15bc8:	cmp	r3, r1
   15bcc:	strne	r3, [r4, #4]
   15bd0:	addne	r4, r4, #4
   15bd4:	beq	15bec <close_stdout@@Base+0x3250>
   15bd8:	cmp	ip, r2
   15bdc:	bls	15bf8 <close_stdout@@Base+0x325c>
   15be0:	ldr	r3, [r2], #4
   15be4:	cmp	r3, r5
   15be8:	bne	15bc4 <close_stdout@@Base+0x3228>
   15bec:	cmp	ip, r2
   15bf0:	sub	r0, r0, #1
   15bf4:	bhi	15be0 <close_stdout@@Base+0x3244>
   15bf8:	mov	r3, r0
   15bfc:	b	15b04 <close_stdout@@Base+0x3168>
   15c00:	bl	11484 <__errno_location@plt>
   15c04:	ldr	r3, [r0]
   15c08:	cmp	r3, #38	; 0x26
   15c0c:	bne	15b00 <close_stdout@@Base+0x3164>
   15c10:	mov	r0, r7
   15c14:	mov	r1, #4
   15c18:	bl	1134c <realloc@plt>
   15c1c:	cmp	r0, #0
   15c20:	beq	15b00 <close_stdout@@Base+0x3164>
   15c24:	adds	r3, r6, #1
   15c28:	str	r0, [sl]
   15c2c:	str	r6, [r0]
   15c30:	movne	r3, #1
   15c34:	b	15b04 <close_stdout@@Base+0x3168>
   15c38:	bl	11484 <__errno_location@plt>
   15c3c:	mov	r2, #12
   15c40:	mvn	r3, #0
   15c44:	str	r2, [r0]
   15c48:	b	15b04 <close_stdout@@Base+0x3168>
   15c4c:	mov	r1, r4
   15c50:	bl	11550 <getgroups@plt>
   15c54:	cmp	r0, #0
   15c58:	bge	15ba0 <close_stdout@@Base+0x3204>
   15c5c:	bl	11484 <__errno_location@plt>
   15c60:	ldr	r6, [r0]
   15c64:	mov	r5, r0
   15c68:	mov	r0, r4
   15c6c:	bl	112f8 <free@plt>
   15c70:	mvn	r3, #0
   15c74:	str	r6, [r5]
   15c78:	b	15b04 <close_stdout@@Base+0x3168>
   15c7c:	bl	11340 <__stack_chk_fail@plt>
   15c80:	bl	11484 <__errno_location@plt>
   15c84:	mov	r5, r0
   15c88:	ldr	r6, [r0]
   15c8c:	b	15af4 <close_stdout@@Base+0x3158>
   15c90:	andeq	r2, r1, r8, asr #11
   15c94:	andeq	r0, r0, r4, lsr #2
   15c98:	push	{r4, r5, r6, lr}
   15c9c:	sub	sp, sp, #8
   15ca0:	mov	r4, r0
   15ca4:	bl	114d8 <fileno@plt>
   15ca8:	cmp	r0, #0
   15cac:	mov	r0, r4
   15cb0:	blt	15d2c <close_stdout@@Base+0x3390>
   15cb4:	bl	11418 <__freading@plt>
   15cb8:	cmp	r0, #0
   15cbc:	bne	15cf8 <close_stdout@@Base+0x335c>
   15cc0:	mov	r0, r4
   15cc4:	bl	15d38 <close_stdout@@Base+0x339c>
   15cc8:	cmp	r0, #0
   15ccc:	beq	15d28 <close_stdout@@Base+0x338c>
   15cd0:	bl	11484 <__errno_location@plt>
   15cd4:	ldr	r6, [r0]
   15cd8:	mov	r5, r0
   15cdc:	mov	r0, r4
   15ce0:	bl	114f0 <fclose@plt>
   15ce4:	cmp	r6, #0
   15ce8:	mvnne	r0, #0
   15cec:	strne	r6, [r5]
   15cf0:	add	sp, sp, #8
   15cf4:	pop	{r4, r5, r6, pc}
   15cf8:	mov	r0, r4
   15cfc:	bl	114d8 <fileno@plt>
   15d00:	mov	r1, #1
   15d04:	mov	r2, #0
   15d08:	mov	r3, #0
   15d0c:	str	r1, [sp]
   15d10:	bl	11394 <lseek64@plt>
   15d14:	mvn	r2, #0
   15d18:	mvn	r3, #0
   15d1c:	cmp	r1, r3
   15d20:	cmpeq	r0, r2
   15d24:	bne	15cc0 <close_stdout@@Base+0x3324>
   15d28:	mov	r0, r4
   15d2c:	add	sp, sp, #8
   15d30:	pop	{r4, r5, r6, lr}
   15d34:	b	114f0 <fclose@plt>
   15d38:	push	{r4, lr}
   15d3c:	subs	r4, r0, #0
   15d40:	sub	sp, sp, #8
   15d44:	beq	15d54 <close_stdout@@Base+0x33b8>
   15d48:	bl	11418 <__freading@plt>
   15d4c:	cmp	r0, #0
   15d50:	bne	15d64 <close_stdout@@Base+0x33c8>
   15d54:	mov	r0, r4
   15d58:	add	sp, sp, #8
   15d5c:	pop	{r4, lr}
   15d60:	b	112e0 <fflush@plt>
   15d64:	ldr	r3, [r4]
   15d68:	tst	r3, #256	; 0x100
   15d6c:	beq	15d54 <close_stdout@@Base+0x33b8>
   15d70:	mov	r3, #1
   15d74:	mov	r0, r4
   15d78:	str	r3, [sp]
   15d7c:	mov	r2, #0
   15d80:	mov	r3, #0
   15d84:	bl	15d98 <close_stdout@@Base+0x33fc>
   15d88:	mov	r0, r4
   15d8c:	add	sp, sp, #8
   15d90:	pop	{r4, lr}
   15d94:	b	112e0 <fflush@plt>
   15d98:	push	{r4, r5, r6, r7, lr}
   15d9c:	sub	sp, sp, #20
   15da0:	ldmib	r0, {r1, ip}
   15da4:	mov	r6, r0
   15da8:	ldr	r4, [sp, #40]	; 0x28
   15dac:	cmp	ip, r1
   15db0:	beq	15dc8 <close_stdout@@Base+0x342c>
   15db4:	str	r4, [sp, #40]	; 0x28
   15db8:	mov	r0, r6
   15dbc:	add	sp, sp, #20
   15dc0:	pop	{r4, r5, r6, r7, lr}
   15dc4:	b	114fc <fseeko64@plt>
   15dc8:	ldr	ip, [r0, #20]
   15dcc:	ldr	r1, [r0, #16]
   15dd0:	cmp	ip, r1
   15dd4:	bne	15db4 <close_stdout@@Base+0x3418>
   15dd8:	ldr	r7, [r0, #36]	; 0x24
   15ddc:	cmp	r7, #0
   15de0:	bne	15db4 <close_stdout@@Base+0x3418>
   15de4:	str	r2, [sp, #12]
   15de8:	mvn	r5, #0
   15dec:	str	r3, [sp, #8]
   15df0:	bl	114d8 <fileno@plt>
   15df4:	str	r4, [sp]
   15df8:	mvn	r4, #0
   15dfc:	ldr	r2, [sp, #12]
   15e00:	ldr	r3, [sp, #8]
   15e04:	bl	11394 <lseek64@plt>
   15e08:	mov	r2, r0
   15e0c:	mov	r3, r1
   15e10:	cmp	r3, r5
   15e14:	cmpeq	r2, r4
   15e18:	beq	15e38 <close_stdout@@Base+0x349c>
   15e1c:	ldr	r1, [r6]
   15e20:	mov	r0, r7
   15e24:	strd	r2, [r6, #80]	; 0x50
   15e28:	bic	r3, r1, #16
   15e2c:	str	r3, [r6]
   15e30:	add	sp, sp, #20
   15e34:	pop	{r4, r5, r6, r7, pc}
   15e38:	mvn	r0, #0
   15e3c:	b	15e30 <close_stdout@@Base+0x3494>
   15e40:	subs	r2, r1, #1
   15e44:	bxeq	lr
   15e48:	bcc	16020 <close_stdout@@Base+0x3684>
   15e4c:	cmp	r0, r1
   15e50:	bls	16004 <close_stdout@@Base+0x3668>
   15e54:	tst	r1, r2
   15e58:	beq	16010 <close_stdout@@Base+0x3674>
   15e5c:	clz	r3, r0
   15e60:	clz	r2, r1
   15e64:	sub	r3, r2, r3
   15e68:	rsbs	r3, r3, #31
   15e6c:	addne	r3, r3, r3, lsl #1
   15e70:	mov	r2, #0
   15e74:	addne	pc, pc, r3, lsl #2
   15e78:	nop	{0}
   15e7c:	cmp	r0, r1, lsl #31
   15e80:	adc	r2, r2, r2
   15e84:	subcs	r0, r0, r1, lsl #31
   15e88:	cmp	r0, r1, lsl #30
   15e8c:	adc	r2, r2, r2
   15e90:	subcs	r0, r0, r1, lsl #30
   15e94:	cmp	r0, r1, lsl #29
   15e98:	adc	r2, r2, r2
   15e9c:	subcs	r0, r0, r1, lsl #29
   15ea0:	cmp	r0, r1, lsl #28
   15ea4:	adc	r2, r2, r2
   15ea8:	subcs	r0, r0, r1, lsl #28
   15eac:	cmp	r0, r1, lsl #27
   15eb0:	adc	r2, r2, r2
   15eb4:	subcs	r0, r0, r1, lsl #27
   15eb8:	cmp	r0, r1, lsl #26
   15ebc:	adc	r2, r2, r2
   15ec0:	subcs	r0, r0, r1, lsl #26
   15ec4:	cmp	r0, r1, lsl #25
   15ec8:	adc	r2, r2, r2
   15ecc:	subcs	r0, r0, r1, lsl #25
   15ed0:	cmp	r0, r1, lsl #24
   15ed4:	adc	r2, r2, r2
   15ed8:	subcs	r0, r0, r1, lsl #24
   15edc:	cmp	r0, r1, lsl #23
   15ee0:	adc	r2, r2, r2
   15ee4:	subcs	r0, r0, r1, lsl #23
   15ee8:	cmp	r0, r1, lsl #22
   15eec:	adc	r2, r2, r2
   15ef0:	subcs	r0, r0, r1, lsl #22
   15ef4:	cmp	r0, r1, lsl #21
   15ef8:	adc	r2, r2, r2
   15efc:	subcs	r0, r0, r1, lsl #21
   15f00:	cmp	r0, r1, lsl #20
   15f04:	adc	r2, r2, r2
   15f08:	subcs	r0, r0, r1, lsl #20
   15f0c:	cmp	r0, r1, lsl #19
   15f10:	adc	r2, r2, r2
   15f14:	subcs	r0, r0, r1, lsl #19
   15f18:	cmp	r0, r1, lsl #18
   15f1c:	adc	r2, r2, r2
   15f20:	subcs	r0, r0, r1, lsl #18
   15f24:	cmp	r0, r1, lsl #17
   15f28:	adc	r2, r2, r2
   15f2c:	subcs	r0, r0, r1, lsl #17
   15f30:	cmp	r0, r1, lsl #16
   15f34:	adc	r2, r2, r2
   15f38:	subcs	r0, r0, r1, lsl #16
   15f3c:	cmp	r0, r1, lsl #15
   15f40:	adc	r2, r2, r2
   15f44:	subcs	r0, r0, r1, lsl #15
   15f48:	cmp	r0, r1, lsl #14
   15f4c:	adc	r2, r2, r2
   15f50:	subcs	r0, r0, r1, lsl #14
   15f54:	cmp	r0, r1, lsl #13
   15f58:	adc	r2, r2, r2
   15f5c:	subcs	r0, r0, r1, lsl #13
   15f60:	cmp	r0, r1, lsl #12
   15f64:	adc	r2, r2, r2
   15f68:	subcs	r0, r0, r1, lsl #12
   15f6c:	cmp	r0, r1, lsl #11
   15f70:	adc	r2, r2, r2
   15f74:	subcs	r0, r0, r1, lsl #11
   15f78:	cmp	r0, r1, lsl #10
   15f7c:	adc	r2, r2, r2
   15f80:	subcs	r0, r0, r1, lsl #10
   15f84:	cmp	r0, r1, lsl #9
   15f88:	adc	r2, r2, r2
   15f8c:	subcs	r0, r0, r1, lsl #9
   15f90:	cmp	r0, r1, lsl #8
   15f94:	adc	r2, r2, r2
   15f98:	subcs	r0, r0, r1, lsl #8
   15f9c:	cmp	r0, r1, lsl #7
   15fa0:	adc	r2, r2, r2
   15fa4:	subcs	r0, r0, r1, lsl #7
   15fa8:	cmp	r0, r1, lsl #6
   15fac:	adc	r2, r2, r2
   15fb0:	subcs	r0, r0, r1, lsl #6
   15fb4:	cmp	r0, r1, lsl #5
   15fb8:	adc	r2, r2, r2
   15fbc:	subcs	r0, r0, r1, lsl #5
   15fc0:	cmp	r0, r1, lsl #4
   15fc4:	adc	r2, r2, r2
   15fc8:	subcs	r0, r0, r1, lsl #4
   15fcc:	cmp	r0, r1, lsl #3
   15fd0:	adc	r2, r2, r2
   15fd4:	subcs	r0, r0, r1, lsl #3
   15fd8:	cmp	r0, r1, lsl #2
   15fdc:	adc	r2, r2, r2
   15fe0:	subcs	r0, r0, r1, lsl #2
   15fe4:	cmp	r0, r1, lsl #1
   15fe8:	adc	r2, r2, r2
   15fec:	subcs	r0, r0, r1, lsl #1
   15ff0:	cmp	r0, r1
   15ff4:	adc	r2, r2, r2
   15ff8:	subcs	r0, r0, r1
   15ffc:	mov	r0, r2
   16000:	bx	lr
   16004:	moveq	r0, #1
   16008:	movne	r0, #0
   1600c:	bx	lr
   16010:	clz	r2, r1
   16014:	rsb	r2, r2, #31
   16018:	lsr	r0, r0, r2
   1601c:	bx	lr
   16020:	cmp	r0, #0
   16024:	mvnne	r0, #0
   16028:	b	16088 <close_stdout@@Base+0x36ec>
   1602c:	cmp	r1, #0
   16030:	beq	16020 <close_stdout@@Base+0x3684>
   16034:	push	{r0, r1, lr}
   16038:	bl	15e40 <close_stdout@@Base+0x34a4>
   1603c:	pop	{r1, r2, lr}
   16040:	mul	r3, r2, r0
   16044:	sub	r1, r1, r3
   16048:	bx	lr
   1604c:	cmp	r3, #0
   16050:	cmpeq	r2, #0
   16054:	bne	1606c <close_stdout@@Base+0x36d0>
   16058:	cmp	r1, #0
   1605c:	cmpeq	r0, #0
   16060:	mvnne	r1, #0
   16064:	mvnne	r0, #0
   16068:	b	16088 <close_stdout@@Base+0x36ec>
   1606c:	sub	sp, sp, #8
   16070:	push	{sp, lr}
   16074:	bl	160d4 <close_stdout@@Base+0x3738>
   16078:	ldr	lr, [sp, #4]
   1607c:	add	sp, sp, #8
   16080:	pop	{r2, r3}
   16084:	bx	lr
   16088:	push	{r1, lr}
   1608c:	mov	r0, #8
   16090:	bl	112a4 <raise@plt>
   16094:	pop	{r1, pc}
   16098:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1609c:	mov	r8, r2
   160a0:	mov	r6, r0
   160a4:	mov	r7, r1
   160a8:	mov	sl, r3
   160ac:	ldr	r9, [sp, #32]
   160b0:	bl	16110 <close_stdout@@Base+0x3774>
   160b4:	umull	r4, r5, r8, r0
   160b8:	mul	r8, r8, r1
   160bc:	mla	r2, r0, sl, r8
   160c0:	add	r5, r2, r5
   160c4:	subs	r4, r6, r4
   160c8:	sbc	r5, r7, r5
   160cc:	strd	r4, [r9]
   160d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   160d4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   160d8:	mov	r8, r2
   160dc:	mov	r6, r0
   160e0:	mov	r7, r1
   160e4:	mov	r5, r3
   160e8:	ldr	r9, [sp, #32]
   160ec:	bl	1659c <close_stdout@@Base+0x3c00>
   160f0:	mul	r3, r0, r5
   160f4:	umull	r4, r5, r0, r8
   160f8:	mla	r8, r8, r1, r3
   160fc:	add	r5, r8, r5
   16100:	subs	r4, r6, r4
   16104:	sbc	r5, r7, r5
   16108:	strd	r4, [r9]
   1610c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16114:	rsbs	r4, r0, #0
   16118:	rsc	r5, r1, #0
   1611c:	cmp	r1, #0
   16120:	mvn	r6, #0
   16124:	sub	sp, sp, #12
   16128:	movge	r4, r0
   1612c:	movge	r5, r1
   16130:	movge	r6, #0
   16134:	cmp	r3, #0
   16138:	blt	16370 <close_stdout@@Base+0x39d4>
   1613c:	cmp	r3, #0
   16140:	mov	sl, r4
   16144:	mov	ip, r5
   16148:	mov	r0, r2
   1614c:	mov	r1, r3
   16150:	mov	r8, r2
   16154:	mov	r7, r4
   16158:	mov	r9, r5
   1615c:	bne	16254 <close_stdout@@Base+0x38b8>
   16160:	cmp	r2, r5
   16164:	bls	16290 <close_stdout@@Base+0x38f4>
   16168:	clz	r3, r2
   1616c:	cmp	r3, #0
   16170:	rsbne	r2, r3, #32
   16174:	lslne	r8, r0, r3
   16178:	lsrne	r2, r4, r2
   1617c:	lslne	r7, r4, r3
   16180:	orrne	r9, r2, r5, lsl r3
   16184:	lsr	r4, r8, #16
   16188:	uxth	sl, r8
   1618c:	mov	r1, r4
   16190:	mov	r0, r9
   16194:	bl	15e40 <close_stdout@@Base+0x34a4>
   16198:	mov	r1, r4
   1619c:	mov	fp, r0
   161a0:	mov	r0, r9
   161a4:	bl	1602c <close_stdout@@Base+0x3690>
   161a8:	mul	r0, sl, fp
   161ac:	lsr	r2, r7, #16
   161b0:	orr	r1, r2, r1, lsl #16
   161b4:	cmp	r0, r1
   161b8:	bls	161dc <close_stdout@@Base+0x3840>
   161bc:	adds	r1, r1, r8
   161c0:	sub	r3, fp, #1
   161c4:	bcs	161d8 <close_stdout@@Base+0x383c>
   161c8:	cmp	r0, r1
   161cc:	subhi	fp, fp, #2
   161d0:	addhi	r1, r1, r8
   161d4:	bhi	161dc <close_stdout@@Base+0x3840>
   161d8:	mov	fp, r3
   161dc:	rsb	r9, r0, r1
   161e0:	mov	r1, r4
   161e4:	uxth	r7, r7
   161e8:	mov	r0, r9
   161ec:	bl	15e40 <close_stdout@@Base+0x34a4>
   161f0:	mov	r1, r4
   161f4:	mov	r5, r0
   161f8:	mov	r0, r9
   161fc:	bl	1602c <close_stdout@@Base+0x3690>
   16200:	mul	sl, sl, r5
   16204:	orr	r1, r7, r1, lsl #16
   16208:	cmp	sl, r1
   1620c:	bls	1622c <close_stdout@@Base+0x3890>
   16210:	adds	r8, r1, r8
   16214:	sub	r3, r5, #1
   16218:	bcs	16228 <close_stdout@@Base+0x388c>
   1621c:	cmp	sl, r8
   16220:	subhi	r5, r5, #2
   16224:	bhi	1622c <close_stdout@@Base+0x3890>
   16228:	mov	r5, r3
   1622c:	orr	r3, r5, fp, lsl #16
   16230:	mov	r4, #0
   16234:	cmp	r6, #0
   16238:	mov	r0, r3
   1623c:	mov	r1, r4
   16240:	beq	1624c <close_stdout@@Base+0x38b0>
   16244:	rsbs	r0, r0, #0
   16248:	rsc	r1, r1, #0
   1624c:	add	sp, sp, #12
   16250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16254:	cmp	r3, r5
   16258:	movhi	r4, #0
   1625c:	movhi	r3, r4
   16260:	bhi	16234 <close_stdout@@Base+0x3898>
   16264:	clz	r5, r1
   16268:	cmp	r5, #0
   1626c:	bne	1645c <close_stdout@@Base+0x3ac0>
   16270:	cmp	r1, ip
   16274:	cmpcs	r2, sl
   16278:	movhi	r4, #0
   1627c:	movls	r4, #1
   16280:	movls	r3, #1
   16284:	movls	r4, r5
   16288:	movhi	r3, r4
   1628c:	b	16234 <close_stdout@@Base+0x3898>
   16290:	cmp	r2, #0
   16294:	bne	162a8 <close_stdout@@Base+0x390c>
   16298:	mov	r1, r2
   1629c:	mov	r0, #1
   162a0:	bl	15e40 <close_stdout@@Base+0x34a4>
   162a4:	mov	r8, r0
   162a8:	clz	r3, r8
   162ac:	cmp	r3, #0
   162b0:	bne	16380 <close_stdout@@Base+0x39e4>
   162b4:	rsb	r9, r8, r9
   162b8:	lsr	r5, r8, #16
   162bc:	uxth	sl, r8
   162c0:	mov	r4, #1
   162c4:	mov	r1, r5
   162c8:	mov	r0, r9
   162cc:	bl	15e40 <close_stdout@@Base+0x34a4>
   162d0:	mov	r1, r5
   162d4:	mov	fp, r0
   162d8:	mov	r0, r9
   162dc:	bl	1602c <close_stdout@@Base+0x3690>
   162e0:	mul	r0, sl, fp
   162e4:	lsr	r2, r7, #16
   162e8:	orr	r1, r2, r1, lsl #16
   162ec:	cmp	r0, r1
   162f0:	bls	16310 <close_stdout@@Base+0x3974>
   162f4:	adds	r1, r1, r8
   162f8:	sub	r3, fp, #1
   162fc:	bcs	1657c <close_stdout@@Base+0x3be0>
   16300:	cmp	r0, r1
   16304:	subhi	fp, fp, #2
   16308:	addhi	r1, r1, r8
   1630c:	bls	1657c <close_stdout@@Base+0x3be0>
   16310:	rsb	r2, r0, r1
   16314:	mov	r1, r5
   16318:	str	r2, [sp]
   1631c:	uxth	r7, r7
   16320:	mov	r0, r2
   16324:	bl	15e40 <close_stdout@@Base+0x34a4>
   16328:	ldr	r2, [sp]
   1632c:	mov	r1, r5
   16330:	mov	r9, r0
   16334:	mov	r0, r2
   16338:	bl	1602c <close_stdout@@Base+0x3690>
   1633c:	mul	sl, sl, r9
   16340:	orr	r1, r7, r1, lsl #16
   16344:	cmp	sl, r1
   16348:	bls	16368 <close_stdout@@Base+0x39cc>
   1634c:	adds	r8, r1, r8
   16350:	sub	r3, r9, #1
   16354:	bcs	16364 <close_stdout@@Base+0x39c8>
   16358:	cmp	sl, r8
   1635c:	subhi	r9, r9, #2
   16360:	bhi	16368 <close_stdout@@Base+0x39cc>
   16364:	mov	r9, r3
   16368:	orr	r3, r9, fp, lsl #16
   1636c:	b	16234 <close_stdout@@Base+0x3898>
   16370:	mvn	r6, r6
   16374:	rsbs	r2, r2, #0
   16378:	rsc	r3, r3, #0
   1637c:	b	1613c <close_stdout@@Base+0x37a0>
   16380:	lsl	r8, r8, r3
   16384:	rsb	fp, r3, #32
   16388:	lsr	r4, r9, fp
   1638c:	lsr	fp, r7, fp
   16390:	lsr	r5, r8, #16
   16394:	orr	fp, fp, r9, lsl r3
   16398:	mov	r0, r4
   1639c:	lsl	r7, r7, r3
   163a0:	mov	r1, r5
   163a4:	uxth	sl, r8
   163a8:	bl	15e40 <close_stdout@@Base+0x34a4>
   163ac:	mov	r1, r5
   163b0:	mov	r3, r0
   163b4:	mov	r0, r4
   163b8:	str	r3, [sp]
   163bc:	bl	1602c <close_stdout@@Base+0x3690>
   163c0:	ldr	r3, [sp]
   163c4:	lsr	r2, fp, #16
   163c8:	mul	r0, sl, r3
   163cc:	orr	r1, r2, r1, lsl #16
   163d0:	cmp	r0, r1
   163d4:	bls	163f4 <close_stdout@@Base+0x3a58>
   163d8:	adds	r1, r1, r8
   163dc:	sub	r2, r3, #1
   163e0:	bcs	16594 <close_stdout@@Base+0x3bf8>
   163e4:	cmp	r0, r1
   163e8:	subhi	r3, r3, #2
   163ec:	addhi	r1, r1, r8
   163f0:	bls	16594 <close_stdout@@Base+0x3bf8>
   163f4:	rsb	r9, r0, r1
   163f8:	mov	r1, r5
   163fc:	str	r3, [sp]
   16400:	uxth	fp, fp
   16404:	mov	r0, r9
   16408:	bl	15e40 <close_stdout@@Base+0x34a4>
   1640c:	mov	r1, r5
   16410:	mov	r4, r0
   16414:	mov	r0, r9
   16418:	bl	1602c <close_stdout@@Base+0x3690>
   1641c:	mul	r9, sl, r4
   16420:	ldr	r3, [sp]
   16424:	orr	r1, fp, r1, lsl #16
   16428:	cmp	r9, r1
   1642c:	bls	16450 <close_stdout@@Base+0x3ab4>
   16430:	adds	r1, r1, r8
   16434:	sub	r2, r4, #1
   16438:	bcs	1644c <close_stdout@@Base+0x3ab0>
   1643c:	cmp	r9, r1
   16440:	subhi	r4, r4, #2
   16444:	addhi	r1, r1, r8
   16448:	bhi	16450 <close_stdout@@Base+0x3ab4>
   1644c:	mov	r4, r2
   16450:	rsb	r9, r9, r1
   16454:	orr	r4, r4, r3, lsl #16
   16458:	b	162c4 <close_stdout@@Base+0x3928>
   1645c:	rsb	sl, r5, #32
   16460:	lsl	r3, r2, r5
   16464:	lsr	r0, r2, sl
   16468:	lsr	r2, ip, sl
   1646c:	orr	r4, r0, r1, lsl r5
   16470:	lsr	sl, r7, sl
   16474:	mov	r0, r2
   16478:	orr	sl, sl, ip, lsl r5
   1647c:	lsr	r9, r4, #16
   16480:	str	r3, [sp, #4]
   16484:	str	r2, [sp]
   16488:	uxth	fp, r4
   1648c:	mov	r1, r9
   16490:	bl	15e40 <close_stdout@@Base+0x34a4>
   16494:	ldr	r2, [sp]
   16498:	mov	r1, r9
   1649c:	mov	r8, r0
   164a0:	mov	r0, r2
   164a4:	bl	1602c <close_stdout@@Base+0x3690>
   164a8:	mul	r0, fp, r8
   164ac:	lsr	r2, sl, #16
   164b0:	orr	r1, r2, r1, lsl #16
   164b4:	cmp	r0, r1
   164b8:	bls	164d8 <close_stdout@@Base+0x3b3c>
   164bc:	adds	r1, r1, r4
   164c0:	sub	r2, r8, #1
   164c4:	bcs	1658c <close_stdout@@Base+0x3bf0>
   164c8:	cmp	r0, r1
   164cc:	subhi	r8, r8, #2
   164d0:	addhi	r1, r1, r4
   164d4:	bls	1658c <close_stdout@@Base+0x3bf0>
   164d8:	rsb	ip, r0, r1
   164dc:	mov	r1, r9
   164e0:	str	ip, [sp]
   164e4:	mov	r0, ip
   164e8:	bl	15e40 <close_stdout@@Base+0x34a4>
   164ec:	ldr	ip, [sp]
   164f0:	mov	r1, r9
   164f4:	mov	r2, r0
   164f8:	mov	r0, ip
   164fc:	str	r2, [sp]
   16500:	bl	1602c <close_stdout@@Base+0x3690>
   16504:	ldr	r2, [sp]
   16508:	uxth	ip, sl
   1650c:	mul	fp, fp, r2
   16510:	orr	ip, ip, r1, lsl #16
   16514:	cmp	fp, ip
   16518:	bls	16538 <close_stdout@@Base+0x3b9c>
   1651c:	adds	ip, ip, r4
   16520:	sub	r1, r2, #1
   16524:	bcs	16584 <close_stdout@@Base+0x3be8>
   16528:	cmp	fp, ip
   1652c:	subhi	r2, r2, #2
   16530:	addhi	ip, ip, r4
   16534:	bls	16584 <close_stdout@@Base+0x3be8>
   16538:	ldr	r0, [sp, #4]
   1653c:	orr	r1, r2, r8, lsl #16
   16540:	rsb	fp, fp, ip
   16544:	umull	r2, r3, r1, r0
   16548:	cmp	fp, r3
   1654c:	bcc	16570 <close_stdout@@Base+0x3bd4>
   16550:	movne	r4, #0
   16554:	moveq	r4, #1
   16558:	cmp	r2, r7, lsl r5
   1655c:	movls	r4, #0
   16560:	andhi	r4, r4, #1
   16564:	cmp	r4, #0
   16568:	moveq	r3, r1
   1656c:	beq	16234 <close_stdout@@Base+0x3898>
   16570:	sub	r3, r1, #1
   16574:	mov	r4, #0
   16578:	b	16234 <close_stdout@@Base+0x3898>
   1657c:	mov	fp, r3
   16580:	b	16310 <close_stdout@@Base+0x3974>
   16584:	mov	r2, r1
   16588:	b	16538 <close_stdout@@Base+0x3b9c>
   1658c:	mov	r8, r2
   16590:	b	164d8 <close_stdout@@Base+0x3b3c>
   16594:	mov	r3, r2
   16598:	b	163f4 <close_stdout@@Base+0x3a58>
   1659c:	cmp	r3, #0
   165a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165a4:	mov	r6, r0
   165a8:	sub	sp, sp, #12
   165ac:	mov	r5, r1
   165b0:	mov	r7, r0
   165b4:	mov	r4, r2
   165b8:	mov	r8, r1
   165bc:	bne	1669c <close_stdout@@Base+0x3d00>
   165c0:	cmp	r2, r1
   165c4:	bls	166d8 <close_stdout@@Base+0x3d3c>
   165c8:	clz	r3, r2
   165cc:	cmp	r3, #0
   165d0:	rsbne	r8, r3, #32
   165d4:	lslne	r4, r2, r3
   165d8:	lsrne	r8, r0, r8
   165dc:	lslne	r7, r0, r3
   165e0:	orrne	r8, r8, r1, lsl r3
   165e4:	lsr	r5, r4, #16
   165e8:	uxth	sl, r4
   165ec:	mov	r1, r5
   165f0:	mov	r0, r8
   165f4:	bl	15e40 <close_stdout@@Base+0x34a4>
   165f8:	mov	r1, r5
   165fc:	mov	r9, r0
   16600:	mov	r0, r8
   16604:	bl	1602c <close_stdout@@Base+0x3690>
   16608:	mul	r0, sl, r9
   1660c:	lsr	r3, r7, #16
   16610:	orr	r1, r3, r1, lsl #16
   16614:	cmp	r0, r1
   16618:	bls	1663c <close_stdout@@Base+0x3ca0>
   1661c:	adds	r1, r1, r4
   16620:	sub	r2, r9, #1
   16624:	bcs	16638 <close_stdout@@Base+0x3c9c>
   16628:	cmp	r0, r1
   1662c:	subhi	r9, r9, #2
   16630:	addhi	r1, r1, r4
   16634:	bhi	1663c <close_stdout@@Base+0x3ca0>
   16638:	mov	r9, r2
   1663c:	rsb	r8, r0, r1
   16640:	mov	r1, r5
   16644:	uxth	r7, r7
   16648:	mov	r0, r8
   1664c:	bl	15e40 <close_stdout@@Base+0x34a4>
   16650:	mov	r1, r5
   16654:	mov	r6, r0
   16658:	mov	r0, r8
   1665c:	bl	1602c <close_stdout@@Base+0x3690>
   16660:	mul	sl, sl, r6
   16664:	orr	r1, r7, r1, lsl #16
   16668:	cmp	sl, r1
   1666c:	bls	16688 <close_stdout@@Base+0x3cec>
   16670:	adds	r4, r1, r4
   16674:	sub	r3, r6, #1
   16678:	bcs	16984 <close_stdout@@Base+0x3fe8>
   1667c:	cmp	sl, r4
   16680:	subhi	r6, r6, #2
   16684:	bls	16984 <close_stdout@@Base+0x3fe8>
   16688:	orr	r0, r6, r9, lsl #16
   1668c:	mov	r6, #0
   16690:	mov	r1, r6
   16694:	add	sp, sp, #12
   16698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1669c:	cmp	r3, r1
   166a0:	movhi	r6, #0
   166a4:	movhi	r0, r6
   166a8:	bhi	16690 <close_stdout@@Base+0x3cf4>
   166ac:	clz	r7, r3
   166b0:	cmp	r7, #0
   166b4:	bne	167b4 <close_stdout@@Base+0x3e18>
   166b8:	cmp	r3, r1
   166bc:	cmpcs	r2, r6
   166c0:	movhi	r6, #0
   166c4:	movls	r6, #1
   166c8:	movls	r0, #1
   166cc:	movls	r6, r7
   166d0:	movhi	r0, r6
   166d4:	b	16690 <close_stdout@@Base+0x3cf4>
   166d8:	cmp	r2, #0
   166dc:	bne	166f0 <close_stdout@@Base+0x3d54>
   166e0:	mov	r1, r2
   166e4:	mov	r0, #1
   166e8:	bl	15e40 <close_stdout@@Base+0x34a4>
   166ec:	mov	r4, r0
   166f0:	clz	r3, r4
   166f4:	cmp	r3, #0
   166f8:	bne	168b0 <close_stdout@@Base+0x3f14>
   166fc:	rsb	r5, r4, r5
   16700:	lsr	r8, r4, #16
   16704:	uxth	sl, r4
   16708:	mov	r6, #1
   1670c:	mov	r1, r8
   16710:	mov	r0, r5
   16714:	bl	15e40 <close_stdout@@Base+0x34a4>
   16718:	mov	r1, r8
   1671c:	mov	r9, r0
   16720:	mov	r0, r5
   16724:	bl	1602c <close_stdout@@Base+0x3690>
   16728:	mul	r0, sl, r9
   1672c:	lsr	r3, r7, #16
   16730:	orr	r1, r3, r1, lsl #16
   16734:	cmp	r0, r1
   16738:	bls	16758 <close_stdout@@Base+0x3dbc>
   1673c:	adds	r1, r1, r4
   16740:	sub	r2, r9, #1
   16744:	bcs	1698c <close_stdout@@Base+0x3ff0>
   16748:	cmp	r0, r1
   1674c:	subhi	r9, r9, #2
   16750:	addhi	r1, r1, r4
   16754:	bls	1698c <close_stdout@@Base+0x3ff0>
   16758:	rsb	fp, r0, r1
   1675c:	mov	r1, r8
   16760:	uxth	r7, r7
   16764:	mov	r0, fp
   16768:	bl	15e40 <close_stdout@@Base+0x34a4>
   1676c:	mov	r1, r8
   16770:	mov	r5, r0
   16774:	mov	r0, fp
   16778:	bl	1602c <close_stdout@@Base+0x3690>
   1677c:	mul	sl, sl, r5
   16780:	orr	r1, r7, r1, lsl #16
   16784:	cmp	sl, r1
   16788:	bls	167a4 <close_stdout@@Base+0x3e08>
   1678c:	adds	r4, r1, r4
   16790:	sub	r3, r5, #1
   16794:	bcs	16994 <close_stdout@@Base+0x3ff8>
   16798:	cmp	sl, r4
   1679c:	subhi	r5, r5, #2
   167a0:	bls	16994 <close_stdout@@Base+0x3ff8>
   167a4:	orr	r0, r5, r9, lsl #16
   167a8:	mov	r1, r6
   167ac:	add	sp, sp, #12
   167b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167b4:	rsb	r1, r7, #32
   167b8:	lsl	r0, r2, r7
   167bc:	lsr	r2, r2, r1
   167c0:	lsr	fp, r5, r1
   167c4:	orr	r8, r2, r3, lsl r7
   167c8:	lsr	r1, r6, r1
   167cc:	str	r0, [sp, #4]
   167d0:	orr	r5, r1, r5, lsl r7
   167d4:	lsr	r9, r8, #16
   167d8:	mov	r0, fp
   167dc:	uxth	sl, r8
   167e0:	mov	r1, r9
   167e4:	bl	15e40 <close_stdout@@Base+0x34a4>
   167e8:	mov	r1, r9
   167ec:	mov	r4, r0
   167f0:	mov	r0, fp
   167f4:	bl	1602c <close_stdout@@Base+0x3690>
   167f8:	mul	r0, sl, r4
   167fc:	lsr	ip, r5, #16
   16800:	orr	r1, ip, r1, lsl #16
   16804:	cmp	r0, r1
   16808:	bls	1681c <close_stdout@@Base+0x3e80>
   1680c:	adds	r1, r1, r8
   16810:	sub	r2, r4, #1
   16814:	bcc	169b0 <close_stdout@@Base+0x4014>
   16818:	mov	r4, r2
   1681c:	rsb	ip, r0, r1
   16820:	mov	r1, r9
   16824:	str	ip, [sp]
   16828:	uxth	r5, r5
   1682c:	mov	r0, ip
   16830:	bl	15e40 <close_stdout@@Base+0x34a4>
   16834:	ldr	ip, [sp]
   16838:	mov	r1, r9
   1683c:	mov	fp, r0
   16840:	mov	r0, ip
   16844:	bl	1602c <close_stdout@@Base+0x3690>
   16848:	mul	sl, sl, fp
   1684c:	orr	r1, r5, r1, lsl #16
   16850:	cmp	sl, r1
   16854:	bls	16868 <close_stdout@@Base+0x3ecc>
   16858:	adds	r1, r1, r8
   1685c:	sub	r2, fp, #1
   16860:	bcc	1699c <close_stdout@@Base+0x4000>
   16864:	mov	fp, r2
   16868:	ldr	r3, [sp, #4]
   1686c:	orr	r0, fp, r4, lsl #16
   16870:	rsb	sl, sl, r1
   16874:	umull	r4, r5, r0, r3
   16878:	cmp	sl, r5
   1687c:	bcc	1689c <close_stdout@@Base+0x3f00>
   16880:	movne	r3, #0
   16884:	moveq	r3, #1
   16888:	cmp	r4, r6, lsl r7
   1688c:	movls	r6, #0
   16890:	andhi	r6, r3, #1
   16894:	cmp	r6, #0
   16898:	beq	16690 <close_stdout@@Base+0x3cf4>
   1689c:	mov	r6, #0
   168a0:	sub	r0, r0, #1
   168a4:	mov	r1, r6
   168a8:	add	sp, sp, #12
   168ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168b0:	lsl	r4, r4, r3
   168b4:	rsb	r9, r3, #32
   168b8:	lsr	r2, r5, r9
   168bc:	lsr	r9, r6, r9
   168c0:	lsr	r8, r4, #16
   168c4:	orr	r9, r9, r5, lsl r3
   168c8:	mov	r0, r2
   168cc:	lsl	r7, r6, r3
   168d0:	mov	r1, r8
   168d4:	str	r2, [sp]
   168d8:	bl	15e40 <close_stdout@@Base+0x34a4>
   168dc:	ldr	r2, [sp]
   168e0:	mov	r1, r8
   168e4:	uxth	sl, r4
   168e8:	mov	fp, r0
   168ec:	mov	r0, r2
   168f0:	bl	1602c <close_stdout@@Base+0x3690>
   168f4:	mul	r0, sl, fp
   168f8:	lsr	r3, r9, #16
   168fc:	orr	r1, r3, r1, lsl #16
   16900:	cmp	r0, r1
   16904:	bls	16924 <close_stdout@@Base+0x3f88>
   16908:	adds	r1, r1, r4
   1690c:	sub	r3, fp, #1
   16910:	bcs	169c4 <close_stdout@@Base+0x4028>
   16914:	cmp	r0, r1
   16918:	subhi	fp, fp, #2
   1691c:	addhi	r1, r1, r4
   16920:	bls	169c4 <close_stdout@@Base+0x4028>
   16924:	rsb	r5, r0, r1
   16928:	mov	r1, r8
   1692c:	uxth	r9, r9
   16930:	mov	r0, r5
   16934:	bl	15e40 <close_stdout@@Base+0x34a4>
   16938:	mov	r1, r8
   1693c:	mov	r6, r0
   16940:	mov	r0, r5
   16944:	bl	1602c <close_stdout@@Base+0x3690>
   16948:	mul	r5, sl, r6
   1694c:	orr	r1, r9, r1, lsl #16
   16950:	cmp	r5, r1
   16954:	bls	16978 <close_stdout@@Base+0x3fdc>
   16958:	adds	r1, r1, r4
   1695c:	sub	r3, r6, #1
   16960:	bcs	16974 <close_stdout@@Base+0x3fd8>
   16964:	cmp	r5, r1
   16968:	subhi	r6, r6, #2
   1696c:	addhi	r1, r1, r4
   16970:	bhi	16978 <close_stdout@@Base+0x3fdc>
   16974:	mov	r6, r3
   16978:	rsb	r5, r5, r1
   1697c:	orr	r6, r6, fp, lsl #16
   16980:	b	1670c <close_stdout@@Base+0x3d70>
   16984:	mov	r6, r3
   16988:	b	16688 <close_stdout@@Base+0x3cec>
   1698c:	mov	r9, r2
   16990:	b	16758 <close_stdout@@Base+0x3dbc>
   16994:	mov	r5, r3
   16998:	b	167a4 <close_stdout@@Base+0x3e08>
   1699c:	cmp	sl, r1
   169a0:	subhi	fp, fp, #2
   169a4:	addhi	r1, r1, r8
   169a8:	bhi	16868 <close_stdout@@Base+0x3ecc>
   169ac:	b	16864 <close_stdout@@Base+0x3ec8>
   169b0:	cmp	r0, r1
   169b4:	subhi	r4, r4, #2
   169b8:	addhi	r1, r1, r8
   169bc:	bhi	1681c <close_stdout@@Base+0x3e80>
   169c0:	b	16818 <close_stdout@@Base+0x3e7c>
   169c4:	mov	fp, r3
   169c8:	b	16924 <close_stdout@@Base+0x3f88>
   169cc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   169d0:	mov	r7, r0
   169d4:	ldr	r6, [pc, #76]	; 16a28 <close_stdout@@Base+0x408c>
   169d8:	mov	r8, r1
   169dc:	ldr	r5, [pc, #72]	; 16a2c <close_stdout@@Base+0x4090>
   169e0:	mov	r9, r2
   169e4:	add	r6, pc, r6
   169e8:	bl	11254 <_init@@Base>
   169ec:	add	r5, pc, r5
   169f0:	rsb	r6, r5, r6
   169f4:	asrs	r6, r6, #2
   169f8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   169fc:	sub	r5, r5, #4
   16a00:	mov	r4, #0
   16a04:	add	r4, r4, #1
   16a08:	ldr	r3, [r5, #4]!
   16a0c:	mov	r0, r7
   16a10:	mov	r1, r8
   16a14:	mov	r2, r9
   16a18:	blx	r3
   16a1c:	cmp	r4, r6
   16a20:	bne	16a04 <close_stdout@@Base+0x4068>
   16a24:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16a28:	andeq	r1, r1, r8, asr #8
   16a2c:	andeq	r1, r1, ip, lsr r4
   16a30:	bx	lr
   16a34:	ldr	r3, [pc, #28]	; 16a58 <close_stdout@@Base+0x40bc>
   16a38:	mov	r1, #0
   16a3c:	ldr	r2, [pc, #24]	; 16a5c <close_stdout@@Base+0x40c0>
   16a40:	add	r3, pc, r3
   16a44:	ldr	r3, [r3, r2]
   16a48:	cmp	r3, #0
   16a4c:	ldrne	r2, [r3]
   16a50:	moveq	r2, r3
   16a54:	b	11490 <__cxa_atexit@plt>
   16a58:			; <UNDEFINED> instruction: 0x000115b8
   16a5c:	andeq	r0, r0, ip, lsr r1

Disassembly of section .fini:

00016a60 <_fini@@Base>:
   16a60:	push	{r3, lr}
   16a64:	pop	{r3, pc}
