
centos-preinstalled/eu-readelf:     file format elf32-littlearm


Disassembly of section .init:

00012c2c <_init@@Base>:
   12c2c:	push	{r3, lr}
   12c30:	bl	136bc <__assert_fail@plt+0x1b8>
   12c34:	pop	{r3, pc}

Disassembly of section .plt:

00012c38 <calloc@plt-0x14>:
   12c38:	push	{lr}		; (str lr, [sp, #-4]!)
   12c3c:	ldr	lr, [pc, #4]	; 12c48 <_init@@Base+0x1c>
   12c40:	add	lr, pc, lr
   12c44:	ldr	pc, [lr, #8]!
   12c48:			; <UNDEFINED> instruction: 0x000463b8

00012c4c <calloc@plt>:
   12c4c:	add	ip, pc, #0, 12
   12c50:	add	ip, ip, #286720	; 0x46000
   12c54:	ldr	pc, [ip, #952]!	; 0x3b8

00012c58 <fputs_unlocked@plt>:
   12c58:	add	ip, pc, #0, 12
   12c5c:	add	ip, ip, #286720	; 0x46000
   12c60:	ldr	pc, [ip, #944]!	; 0x3b0

00012c64 <strstr@plt>:
   12c64:	add	ip, pc, #0, 12
   12c68:	add	ip, ip, #286720	; 0x46000
   12c6c:	ldr	pc, [ip, #936]!	; 0x3a8

00012c70 <gelf_getehdr@plt>:
   12c70:	add	ip, pc, #0, 12
   12c74:	add	ip, ip, #286720	; 0x46000
   12c78:	ldr	pc, [ip, #928]!	; 0x3a0

00012c7c <dwarf_nextcu@plt>:
   12c7c:	add	ip, pc, #0, 12
   12c80:	add	ip, ip, #286720	; 0x46000
   12c84:	ldr	pc, [ip, #920]!	; 0x398

00012c88 <raise@plt>:
   12c88:	add	ip, pc, #0, 12
   12c8c:	add	ip, ip, #286720	; 0x46000
   12c90:	ldr	pc, [ip, #912]!	; 0x390

00012c94 <dwarf_abbrevhaschildren@plt>:
   12c94:	add	ip, pc, #0, 12
   12c98:	add	ip, ip, #286720	; 0x46000
   12c9c:	ldr	pc, [ip, #904]!	; 0x388

00012ca0 <gelf_getvernaux@plt>:
   12ca0:	add	ip, pc, #0, 12
   12ca4:	add	ip, ip, #286720	; 0x46000
   12ca8:	ldr	pc, [ip, #896]!	; 0x380

00012cac <dwarf_tag@plt>:
   12cac:	add	ip, pc, #0, 12
   12cb0:	add	ip, ip, #286720	; 0x46000
   12cb4:	ldr	pc, [ip, #888]!	; 0x378

00012cb8 <dwelf_scn_gnu_compressed_size@plt>:
   12cb8:	add	ip, pc, #0, 12
   12cbc:	add	ip, ip, #286720	; 0x46000
   12cc0:	ldr	pc, [ip, #880]!	; 0x370

00012cc4 <gelf_getshdr@plt>:
   12cc4:	add	ip, pc, #0, 12
   12cc8:	add	ip, ip, #286720	; 0x46000
   12ccc:	ldr	pc, [ip, #872]!	; 0x368

00012cd0 <strcmp@plt>:
   12cd0:	add	ip, pc, #0, 12
   12cd4:	add	ip, ip, #286720	; 0x46000
   12cd8:	ldr	pc, [ip, #864]!	; 0x360

00012cdc <elf_version@plt>:
   12cdc:	add	ip, pc, #0, 12
   12ce0:	add	ip, ip, #286720	; 0x46000
   12ce4:	ldr	pc, [ip, #856]!	; 0x358

00012ce8 <dwfl_begin@plt>:
   12ce8:	add	ip, pc, #0, 12
   12cec:	add	ip, ip, #286720	; 0x46000
   12cf0:	ldr	pc, [ip, #848]!	; 0x350

00012cf4 <free@plt>:
   12cf4:	add	ip, pc, #0, 12
   12cf8:	add	ip, ip, #286720	; 0x46000
   12cfc:	ldr	pc, [ip, #840]!	; 0x348

00012d00 <dwarf_formaddr@plt>:
   12d00:	add	ip, pc, #0, 12
   12d04:	add	ip, ip, #286720	; 0x46000
   12d08:	ldr	pc, [ip, #832]!	; 0x340

00012d0c <dwarf_get_units@plt>:
   12d0c:	add	ip, pc, #0, 12
   12d10:	add	ip, ip, #286720	; 0x46000
   12d14:	ldr	pc, [ip, #824]!	; 0x338

00012d18 <dwarf_formstring@plt>:
   12d18:	add	ip, pc, #0, 12
   12d1c:	add	ip, ip, #286720	; 0x46000
   12d20:	ldr	pc, [ip, #816]!	; 0x330

00012d24 <fwrite_unlocked@plt>:
   12d24:	add	ip, pc, #0, 12
   12d28:	add	ip, ip, #286720	; 0x46000
   12d2c:	ldr	pc, [ip, #808]!	; 0x328

00012d30 <memcmp@plt>:
   12d30:	add	ip, pc, #0, 12
   12d34:	add	ip, ip, #286720	; 0x46000
   12d38:	ldr	pc, [ip, #800]!	; 0x320

00012d3c <dwarf_cu_getdwarf@plt>:
   12d3c:	add	ip, pc, #0, 12
   12d40:	add	ip, ip, #286720	; 0x46000
   12d44:	ldr	pc, [ip, #792]!	; 0x318

00012d48 <dwarf_lineisa@plt>:
   12d48:	add	ip, pc, #0, 12
   12d4c:	add	ip, ip, #286720	; 0x46000
   12d50:	ldr	pc, [ip, #784]!	; 0x310

00012d54 <fputc_unlocked@plt>:
   12d54:	add	ip, pc, #0, 12
   12d58:	add	ip, ip, #286720	; 0x46000
   12d5c:	ldr	pc, [ip, #776]!	; 0x308

00012d60 <elf_getident@plt>:
   12d60:	add	ip, pc, #0, 12
   12d64:	add	ip, ip, #286720	; 0x46000
   12d68:	ldr	pc, [ip, #768]!	; 0x300

00012d6c <dwelf_elf_begin@plt>:
   12d6c:	add	ip, pc, #0, 12
   12d70:	add	ip, ip, #286720	; 0x46000
   12d74:	ldr	pc, [ip, #760]!	; 0x2f8

00012d78 <gelf_getversym@plt>:
   12d78:	add	ip, pc, #0, 12
   12d7c:	add	ip, ip, #286720	; 0x46000
   12d80:	ldr	pc, [ip, #752]!	; 0x2f0

00012d84 <dcgettext@plt>:
   12d84:	add	ip, pc, #0, 12
   12d88:	add	ip, ip, #286720	; 0x46000
   12d8c:	ldr	pc, [ip, #744]!	; 0x2e8

00012d90 <gelf_getverneed@plt>:
   12d90:	add	ip, pc, #0, 12
   12d94:	add	ip, ip, #286720	; 0x46000
   12d98:	ldr	pc, [ip, #736]!	; 0x2e0

00012d9c <__strncpy_chk@plt>:
   12d9c:	add	ip, pc, #0, 12
   12da0:	add	ip, ip, #286720	; 0x46000
   12da4:	ldr	pc, [ip, #728]!	; 0x2d8

00012da8 <gelf_getnote@plt>:
   12da8:	add	ip, pc, #0, 12
   12dac:	add	ip, ip, #286720	; 0x46000
   12db0:	ldr	pc, [ip, #720]!	; 0x2d0

00012db4 <dwfl_module_getelf@plt>:
   12db4:	add	ip, pc, #0, 12
   12db8:	add	ip, ip, #286720	; 0x46000
   12dbc:	ldr	pc, [ip, #712]!	; 0x2c8

00012dc0 <__stack_chk_fail@plt>:
   12dc0:	add	ip, pc, #0, 12
   12dc4:	add	ip, ip, #286720	; 0x46000
   12dc8:	ldr	pc, [ip, #704]!	; 0x2c0

00012dcc <dlclose@plt>:
   12dcc:	add	ip, pc, #0, 12
   12dd0:	add	ip, ip, #286720	; 0x46000
   12dd4:	ldr	pc, [ip, #696]!	; 0x2b8

00012dd8 <gelf_getphdr@plt>:
   12dd8:	add	ip, pc, #0, 12
   12ddc:	add	ip, ip, #286720	; 0x46000
   12de0:	ldr	pc, [ip, #688]!	; 0x2b0

00012de4 <unlink@plt>:
   12de4:	add	ip, pc, #0, 12
   12de8:	add	ip, ip, #286720	; 0x46000
   12dec:	ldr	pc, [ip, #680]!	; 0x2a8

00012df0 <realloc@plt>:
   12df0:	add	ip, pc, #0, 12
   12df4:	add	ip, ip, #286720	; 0x46000
   12df8:	ldr	pc, [ip, #672]!	; 0x2a0

00012dfc <dwarf_formblock@plt>:
   12dfc:	add	ip, pc, #0, 12
   12e00:	add	ip, ip, #286720	; 0x46000
   12e04:	ldr	pc, [ip, #664]!	; 0x298

00012e08 <dup@plt>:
   12e08:	add	ip, pc, #0, 12
   12e0c:	add	ip, ip, #286720	; 0x46000
   12e10:	ldr	pc, [ip, #656]!	; 0x290

00012e14 <gelf_getsym@plt>:
   12e14:	add	ip, pc, #0, 12
   12e18:	add	ip, ip, #286720	; 0x46000
   12e1c:	ldr	pc, [ip, #648]!	; 0x288

00012e20 <dwfl_offline_section_address@plt>:
   12e20:	add	ip, pc, #0, 12
   12e24:	add	ip, ip, #286720	; 0x46000
   12e28:	ldr	pc, [ip, #640]!	; 0x280

00012e2c <dwarf_lineblock@plt>:
   12e2c:	add	ip, pc, #0, 12
   12e30:	add	ip, ip, #286720	; 0x46000
   12e34:	ldr	pc, [ip, #632]!	; 0x278

00012e38 <gelf_getclass@plt>:
   12e38:	add	ip, pc, #0, 12
   12e3c:	add	ip, ip, #286720	; 0x46000
   12e40:	ldr	pc, [ip, #624]!	; 0x270

00012e44 <elf_strptr@plt>:
   12e44:	add	ip, pc, #0, 12
   12e48:	add	ip, ip, #286720	; 0x46000
   12e4c:	ldr	pc, [ip, #616]!	; 0x268

00012e50 <textdomain@plt>:
   12e50:	add	ip, pc, #0, 12
   12e54:	add	ip, ip, #286720	; 0x46000
   12e58:	ldr	pc, [ip, #608]!	; 0x260

00012e5c <dwarf_getattrs@plt>:
   12e5c:	add	ip, pc, #0, 12
   12e60:	add	ip, ip, #286720	; 0x46000
   12e64:	ldr	pc, [ip, #600]!	; 0x258

00012e68 <dwarf_lineaddr@plt>:
   12e68:	add	ip, pc, #0, 12
   12e6c:	add	ip, ip, #286720	; 0x46000
   12e70:	ldr	pc, [ip, #592]!	; 0x250

00012e74 <__rawmemchr@plt>:
   12e74:	add	ip, pc, #0, 12
   12e78:	add	ip, ip, #286720	; 0x46000
   12e7c:	ldr	pc, [ip, #584]!	; 0x248

00012e80 <elf_errno@plt>:
   12e80:	add	ip, pc, #0, 12
   12e84:	add	ip, ip, #286720	; 0x46000
   12e88:	ldr	pc, [ip, #576]!	; 0x240

00012e8c <elf_compress@plt>:
   12e8c:	add	ip, pc, #0, 12
   12e90:	add	ip, ip, #286720	; 0x46000
   12e94:	ldr	pc, [ip, #568]!	; 0x238

00012e98 <dwarf_cu_info@plt>:
   12e98:	add	ip, pc, #0, 12
   12e9c:	add	ip, ip, #286720	; 0x46000
   12ea0:	ldr	pc, [ip, #560]!	; 0x230

00012ea4 <dwarf_linecol@plt>:
   12ea4:	add	ip, pc, #0, 12
   12ea8:	add	ip, ip, #286720	; 0x46000
   12eac:	ldr	pc, [ip, #552]!	; 0x228

00012eb0 <__fxstat64@plt>:
   12eb0:	add	ip, pc, #0, 12
   12eb4:	add	ip, ip, #286720	; 0x46000
   12eb8:	ldr	pc, [ip, #544]!	; 0x220

00012ebc <dwfl_module_relocations@plt>:
   12ebc:	add	ip, pc, #0, 12
   12ec0:	add	ip, ip, #286720	; 0x46000
   12ec4:	ldr	pc, [ip, #536]!	; 0x218

00012ec8 <dwarf_getabbrevtag@plt>:
   12ec8:	add	ip, pc, #0, 12
   12ecc:	add	ip, ip, #286720	; 0x46000
   12ed0:	ldr	pc, [ip, #528]!	; 0x210

00012ed4 <_IO_putc@plt>:
   12ed4:	add	ip, pc, #0, 12
   12ed8:	add	ip, ip, #286720	; 0x46000
   12edc:	ldr	pc, [ip, #520]!	; 0x208

00012ee0 <fwrite@plt>:
   12ee0:	add	ip, pc, #0, 12
   12ee4:	add	ip, ip, #286720	; 0x46000
   12ee8:	ldr	pc, [ip, #512]!	; 0x200

00012eec <dwfl_report_end@plt>:
   12eec:	add	ip, pc, #0, 12
   12ef0:	add	ip, ip, #286720	; 0x46000
   12ef4:	ldr	pc, [ip, #504]!	; 0x1f8

00012ef8 <lseek64@plt>:
   12ef8:	add	ip, pc, #0, 12
   12efc:	add	ip, ip, #286720	; 0x46000
   12f00:	ldr	pc, [ip, #496]!	; 0x1f0

00012f04 <dwarf_lineno@plt>:
   12f04:	add	ip, pc, #0, 12
   12f08:	add	ip, ip, #286720	; 0x46000
   12f0c:	ldr	pc, [ip, #488]!	; 0x1e8

00012f10 <__stpcpy_chk@plt>:
   12f10:	add	ip, pc, #0, 12
   12f14:	add	ip, ip, #286720	; 0x46000
   12f18:	ldr	pc, [ip, #480]!	; 0x1e0

00012f1c <dlopen@plt>:
   12f1c:	add	ip, pc, #0, 12
   12f20:	add	ip, ip, #286720	; 0x46000
   12f24:	ldr	pc, [ip, #472]!	; 0x1d8

00012f28 <dwarf_dieoffset@plt>:
   12f28:	add	ip, pc, #0, 12
   12f2c:	add	ip, ip, #286720	; 0x46000
   12f30:	ldr	pc, [ip, #464]!	; 0x1d0

00012f34 <elf_getdata@plt>:
   12f34:	add	ip, pc, #0, 12
   12f38:	add	ip, ip, #286720	; 0x46000
   12f3c:	ldr	pc, [ip, #456]!	; 0x1c8

00012f40 <dwarf_getaranges@plt>:
   12f40:	add	ip, pc, #0, 12
   12f44:	add	ip, ip, #286720	; 0x46000
   12f48:	ldr	pc, [ip, #448]!	; 0x1c0

00012f4c <dwarf_getarangeinfo@plt>:
   12f4c:	add	ip, pc, #0, 12
   12f50:	add	ip, ip, #286720	; 0x46000
   12f54:	ldr	pc, [ip, #440]!	; 0x1b8

00012f58 <dwarf_diename@plt>:
   12f58:	add	ip, pc, #0, 12
   12f5c:	add	ip, ip, #286720	; 0x46000
   12f60:	ldr	pc, [ip, #432]!	; 0x1b0

00012f64 <gelf_fsize@plt>:
   12f64:	add	ip, pc, #0, 12
   12f68:	add	ip, ip, #286720	; 0x46000
   12f6c:	ldr	pc, [ip, #424]!	; 0x1a8

00012f70 <error@plt>:
   12f70:	add	ip, pc, #0, 12
   12f74:	add	ip, ip, #286720	; 0x46000
   12f78:	ldr	pc, [ip, #416]!	; 0x1a0

00012f7c <dwarf_formref_die@plt>:
   12f7c:	add	ip, pc, #0, 12
   12f80:	add	ip, ip, #286720	; 0x46000
   12f84:	ldr	pc, [ip, #408]!	; 0x198

00012f88 <dwarf_getabbrevattr_data@plt>:
   12f88:	add	ip, pc, #0, 12
   12f8c:	add	ip, ip, #286720	; 0x46000
   12f90:	ldr	pc, [ip, #400]!	; 0x190

00012f94 <gelf_xlatetom@plt>:
   12f94:	add	ip, pc, #0, 12
   12f98:	add	ip, ip, #286720	; 0x46000
   12f9c:	ldr	pc, [ip, #392]!	; 0x188

00012fa0 <gelf_offscn@plt>:
   12fa0:	add	ip, pc, #0, 12
   12fa4:	add	ip, ip, #286720	; 0x46000
   12fa8:	ldr	pc, [ip, #384]!	; 0x180

00012fac <open64@plt>:
   12fac:	add	ip, pc, #0, 12
   12fb0:	add	ip, ip, #286720	; 0x46000
   12fb4:	ldr	pc, [ip, #376]!	; 0x178

00012fb8 <__asprintf_chk@plt>:
   12fb8:	add	ip, pc, #0, 12
   12fbc:	add	ip, ip, #286720	; 0x46000
   12fc0:	ldr	pc, [ip, #368]!	; 0x170

00012fc4 <getenv@plt>:
   12fc4:	add	ip, pc, #0, 12
   12fc8:	add	ip, ip, #286720	; 0x46000
   12fcc:	ldr	pc, [ip, #360]!	; 0x168

00012fd0 <mkstemp64@plt>:
   12fd0:	add	ip, pc, #0, 12
   12fd4:	add	ip, ip, #286720	; 0x46000
   12fd8:	ldr	pc, [ip, #352]!	; 0x160

00012fdc <puts@plt>:
   12fdc:	add	ip, pc, #0, 12
   12fe0:	add	ip, ip, #286720	; 0x46000
   12fe4:	ldr	pc, [ip, #344]!	; 0x158

00012fe8 <malloc@plt>:
   12fe8:	add	ip, pc, #0, 12
   12fec:	add	ip, ip, #286720	; 0x46000
   12ff0:	ldr	pc, [ip, #336]!	; 0x150

00012ff4 <__libc_start_main@plt>:
   12ff4:	add	ip, pc, #0, 12
   12ff8:	add	ip, ip, #286720	; 0x46000
   12ffc:	ldr	pc, [ip, #328]!	; 0x148

00013000 <dwfl_module_relocate_address@plt>:
   13000:	add	ip, pc, #0, 12
   13004:	add	ip, ip, #286720	; 0x46000
   13008:	ldr	pc, [ip, #320]!	; 0x140

0001300c <__gmon_start__@plt>:
   1300c:	add	ip, pc, #0, 12
   13010:	add	ip, ip, #286720	; 0x46000
   13014:	ldr	pc, [ip, #312]!	; 0x138

00013018 <dwarf_onesrcline@plt>:
   13018:	add	ip, pc, #0, 12
   1301c:	add	ip, ip, #286720	; 0x46000
   13020:	ldr	pc, [ip, #304]!	; 0x130

00013024 <elf32_xlatetom@plt>:
   13024:	add	ip, pc, #0, 12
   13028:	add	ip, ip, #286720	; 0x46000
   1302c:	ldr	pc, [ip, #296]!	; 0x128

00013030 <mempcpy@plt>:
   13030:	add	ip, pc, #0, 12
   13034:	add	ip, ip, #286720	; 0x46000
   13038:	ldr	pc, [ip, #288]!	; 0x120

0001303c <elf_end@plt>:
   1303c:	add	ip, pc, #0, 12
   13040:	add	ip, ip, #286720	; 0x46000
   13044:	ldr	pc, [ip, #280]!	; 0x118

00013048 <__ctype_b_loc@plt>:
   13048:	add	ip, pc, #0, 12
   1304c:	add	ip, ip, #286720	; 0x46000
   13050:	ldr	pc, [ip, #272]!	; 0x110

00013054 <exit@plt>:
   13054:	add	ip, pc, #0, 12
   13058:	add	ip, ip, #286720	; 0x46000
   1305c:	ldr	pc, [ip, #264]!	; 0x108

00013060 <gelf_getauxv@plt>:
   13060:	add	ip, pc, #0, 12
   13064:	add	ip, ip, #286720	; 0x46000
   13068:	ldr	pc, [ip, #256]!	; 0x100

0001306c <dwarf_getabbrevcode@plt>:
   1306c:	add	ip, pc, #0, 12
   13070:	add	ip, ip, #286720	; 0x46000
   13074:	ldr	pc, [ip, #248]!	; 0xf8

00013078 <dwarf_errmsg@plt>:
   13078:	add	ip, pc, #0, 12
   1307c:	add	ip, ip, #286720	; 0x46000
   13080:	ldr	pc, [ip, #240]!	; 0xf0

00013084 <strtoul@plt>:
   13084:	add	ip, pc, #0, 12
   13088:	add	ip, ip, #286720	; 0x46000
   1308c:	ldr	pc, [ip, #232]!	; 0xe8

00013090 <strlen@plt>:
   13090:	add	ip, pc, #0, 12
   13094:	add	ip, ip, #286720	; 0x46000
   13098:	ldr	pc, [ip, #224]!	; 0xe0

0001309c <dwarf_offdie@plt>:
   1309c:	add	ip, pc, #0, 12
   130a0:	add	ip, ip, #286720	; 0x46000
   130a4:	ldr	pc, [ip, #216]!	; 0xd8

000130a8 <elf_errmsg@plt>:
   130a8:	add	ip, pc, #0, 12
   130ac:	add	ip, ip, #286720	; 0x46000
   130b0:	ldr	pc, [ip, #208]!	; 0xd0

000130b4 <dwarf_offabbrev@plt>:
   130b4:	add	ip, pc, #0, 12
   130b8:	add	ip, ip, #286720	; 0x46000
   130bc:	ldr	pc, [ip, #200]!	; 0xc8

000130c0 <qsort_r@plt>:
   130c0:	add	ip, pc, #0, 12
   130c4:	add	ip, ip, #286720	; 0x46000
   130c8:	ldr	pc, [ip, #192]!	; 0xc0

000130cc <dwarf_lowpc@plt>:
   130cc:	add	ip, pc, #0, 12
   130d0:	add	ip, ip, #286720	; 0x46000
   130d4:	ldr	pc, [ip, #184]!	; 0xb8

000130d8 <gelf_getverdaux@plt>:
   130d8:	add	ip, pc, #0, 12
   130dc:	add	ip, ip, #286720	; 0x46000
   130e0:	ldr	pc, [ip, #176]!	; 0xb0

000130e4 <dwarf_onearange@plt>:
   130e4:	add	ip, pc, #0, 12
   130e8:	add	ip, ip, #286720	; 0x46000
   130ec:	ldr	pc, [ip, #168]!	; 0xa8

000130f0 <elf_rand@plt>:
   130f0:	add	ip, pc, #0, 12
   130f4:	add	ip, ip, #286720	; 0x46000
   130f8:	ldr	pc, [ip, #160]!	; 0xa0

000130fc <dwarf_lineop_index@plt>:
   130fc:	add	ip, pc, #0, 12
   13100:	add	ip, ip, #286720	; 0x46000
   13104:	ldr	pc, [ip, #152]!	; 0x98

00013108 <dwarf_formsdata@plt>:
   13108:	add	ip, pc, #0, 12
   1310c:	add	ip, ip, #286720	; 0x46000
   13110:	ldr	pc, [ip, #144]!	; 0x90

00013114 <dwarf_attr@plt>:
   13114:	add	ip, pc, #0, 12
   13118:	add	ip, ip, #286720	; 0x46000
   1311c:	ldr	pc, [ip, #136]!	; 0x88

00013120 <gelf_getrela@plt>:
   13120:	add	ip, pc, #0, 12
   13124:	add	ip, ip, #286720	; 0x46000
   13128:	ldr	pc, [ip, #128]!	; 0x80

0001312c <__errno_location@plt>:
   1312c:	add	ip, pc, #0, 12
   13130:	add	ip, ip, #286720	; 0x46000
   13134:	ldr	pc, [ip, #120]!	; 0x78

00013138 <argp_help@plt>:
   13138:	add	ip, pc, #0, 12
   1313c:	add	ip, ip, #286720	; 0x46000
   13140:	ldr	pc, [ip, #112]!	; 0x70

00013144 <dwarf_offdie_types@plt>:
   13144:	add	ip, pc, #0, 12
   13148:	add	ip, ip, #286720	; 0x46000
   1314c:	ldr	pc, [ip, #104]!	; 0x68

00013150 <__sprintf_chk@plt>:
   13150:	add	ip, pc, #0, 12
   13154:	add	ip, ip, #286720	; 0x46000
   13158:	ldr	pc, [ip, #96]!	; 0x60

0001315c <snprintf@plt>:
   1315c:	add	ip, pc, #0, 12
   13160:	add	ip, ip, #286720	; 0x46000
   13164:	ldr	pc, [ip, #88]!	; 0x58

00013168 <__vasprintf_chk@plt>:
   13168:	add	ip, pc, #0, 12
   1316c:	add	ip, ip, #286720	; 0x46000
   13170:	ldr	pc, [ip, #80]!	; 0x50

00013174 <__strdup@plt>:
   13174:	add	ip, pc, #0, 12
   13178:	add	ip, ip, #286720	; 0x46000
   1317c:	ldr	pc, [ip, #72]!	; 0x48

00013180 <elf_getphdrnum@plt>:
   13180:	add	ip, pc, #0, 12
   13184:	add	ip, ip, #286720	; 0x46000
   13188:	ldr	pc, [ip, #64]!	; 0x40

0001318c <dwarf_aggregate_size@plt>:
   1318c:	add	ip, pc, #0, 12
   13190:	add	ip, ip, #286720	; 0x46000
   13194:	ldr	pc, [ip, #56]!	; 0x38

00013198 <memset@plt>:
   13198:	add	ip, pc, #0, 12
   1319c:	add	ip, ip, #286720	; 0x46000
   131a0:	ldr	pc, [ip, #48]!	; 0x30

000131a4 <dwarf_formflag@plt>:
   131a4:	add	ip, pc, #0, 12
   131a8:	add	ip, ip, #286720	; 0x46000
   131ac:	ldr	pc, [ip, #40]!	; 0x28

000131b0 <putchar@plt>:
   131b0:	add	ip, pc, #0, 12
   131b4:	add	ip, ip, #286720	; 0x46000
   131b8:	ldr	pc, [ip, #32]!

000131bc <elf_rawdata@plt>:
   131bc:	add	ip, pc, #0, 12
   131c0:	add	ip, ip, #286720	; 0x46000
   131c4:	ldr	pc, [ip, #24]!

000131c8 <strncpy@plt>:
   131c8:	add	ip, pc, #0, 12
   131cc:	add	ip, ip, #286720	; 0x46000
   131d0:	ldr	pc, [ip, #16]!

000131d4 <__fsetlocking@plt>:
   131d4:	add	ip, pc, #0, 12
   131d8:	add	ip, ip, #286720	; 0x46000
   131dc:	ldr	pc, [ip, #8]!

000131e0 <argp_parse@plt>:
   131e0:	add	ip, pc, #0, 12
   131e4:	add	ip, ip, #286720	; 0x46000
   131e8:	ldr	pc, [ip, #0]!

000131ec <dwarf_cu_die@plt>:
   131ec:	add	ip, pc, #0, 12
   131f0:	add	ip, ip, #282624	; 0x45000
   131f4:	ldr	pc, [ip, #4088]!	; 0xff8

000131f8 <gmtime@plt>:
   131f8:	add	ip, pc, #0, 12
   131fc:	add	ip, ip, #282624	; 0x45000
   13200:	ldr	pc, [ip, #4080]!	; 0xff0

00013204 <__printf_chk@plt>:
   13204:	add	ip, pc, #0, 12
   13208:	add	ip, ip, #282624	; 0x45000
   1320c:	ldr	pc, [ip, #4072]!	; 0xfe8

00013210 <dwarf_child@plt>:
   13210:	add	ip, pc, #0, 12
   13214:	add	ip, ip, #282624	; 0x45000
   13218:	ldr	pc, [ip, #4064]!	; 0xfe0

0001321c <dwfl_getmodules@plt>:
   1321c:	add	ip, pc, #0, 12
   13220:	add	ip, ip, #282624	; 0x45000
   13224:	ldr	pc, [ip, #4056]!	; 0xfd8

00013228 <write@plt>:
   13228:	add	ip, pc, #0, 12
   1322c:	add	ip, ip, #282624	; 0x45000
   13230:	ldr	pc, [ip, #4048]!	; 0xfd0

00013234 <dwarf_filesrc@plt>:
   13234:	add	ip, pc, #0, 12
   13238:	add	ip, ip, #282624	; 0x45000
   1323c:	ldr	pc, [ip, #4040]!	; 0xfc8

00013240 <elf_rawfile@plt>:
   13240:	add	ip, pc, #0, 12
   13244:	add	ip, ip, #282624	; 0x45000
   13248:	ldr	pc, [ip, #4032]!	; 0xfc0

0001324c <dwfl_report_offline@plt>:
   1324c:	add	ip, pc, #0, 12
   13250:	add	ip, ip, #282624	; 0x45000
   13254:	ldr	pc, [ip, #4024]!	; 0xfb8

00013258 <__fprintf_chk@plt>:
   13258:	add	ip, pc, #0, 12
   1325c:	add	ip, ip, #282624	; 0x45000
   13260:	ldr	pc, [ip, #4016]!	; 0xfb0

00013264 <elf_begin@plt>:
   13264:	add	ip, pc, #0, 12
   13268:	add	ip, ip, #282624	; 0x45000
   1326c:	ldr	pc, [ip, #4008]!	; 0xfa8

00013270 <memchr@plt>:
   13270:	add	ip, pc, #0, 12
   13274:	add	ip, ip, #282624	; 0x45000
   13278:	ldr	pc, [ip, #4000]!	; 0xfa0

0001327c <gelf_getverdef@plt>:
   1327c:	add	ip, pc, #0, 12
   13280:	add	ip, ip, #282624	; 0x45000
   13284:	ldr	pc, [ip, #3992]!	; 0xf98

00013288 <dwfl_module_relocation_info@plt>:
   13288:	add	ip, pc, #0, 12
   1328c:	add	ip, ip, #282624	; 0x45000
   13290:	ldr	pc, [ip, #3984]!	; 0xf90

00013294 <dwarf_lineepiloguebegin@plt>:
   13294:	add	ip, pc, #0, 12
   13298:	add	ip, ip, #282624	; 0x45000
   1329c:	ldr	pc, [ip, #3976]!	; 0xf88

000132a0 <dwarf_formudata@plt>:
   132a0:	add	ip, pc, #0, 12
   132a4:	add	ip, ip, #282624	; 0x45000
   132a8:	ldr	pc, [ip, #3968]!	; 0xf80

000132ac <dwarf_highpc@plt>:
   132ac:	add	ip, pc, #0, 12
   132b0:	add	ip, ip, #282624	; 0x45000
   132b4:	ldr	pc, [ip, #3960]!	; 0xf78

000132b8 <dwarf_siblingof@plt>:
   132b8:	add	ip, pc, #0, 12
   132bc:	add	ip, ip, #282624	; 0x45000
   132c0:	ldr	pc, [ip, #3952]!	; 0xf70

000132c4 <dwfl_end@plt>:
   132c4:	add	ip, pc, #0, 12
   132c8:	add	ip, ip, #282624	; 0x45000
   132cc:	ldr	pc, [ip, #3944]!	; 0xf68

000132d0 <dwfl_errmsg@plt>:
   132d0:	add	ip, pc, #0, 12
   132d4:	add	ip, ip, #282624	; 0x45000
   132d8:	ldr	pc, [ip, #3936]!	; 0xf60

000132dc <__overflow@plt>:
   132dc:	add	ip, pc, #0, 12
   132e0:	add	ip, ip, #282624	; 0x45000
   132e4:	ldr	pc, [ip, #3928]!	; 0xf58

000132e8 <setlocale@plt>:
   132e8:	add	ip, pc, #0, 12
   132ec:	add	ip, ip, #282624	; 0x45000
   132f0:	ldr	pc, [ip, #3920]!	; 0xf50

000132f4 <dwarf_lineendsequence@plt>:
   132f4:	add	ip, pc, #0, 12
   132f8:	add	ip, ip, #282624	; 0x45000
   132fc:	ldr	pc, [ip, #3912]!	; 0xf48

00013300 <elf_nextscn@plt>:
   13300:	add	ip, pc, #0, 12
   13304:	add	ip, ip, #282624	; 0x45000
   13308:	ldr	pc, [ip, #3904]!	; 0xf40

0001330c <strrchr@plt>:
   1330c:	add	ip, pc, #0, 12
   13310:	add	ip, ip, #282624	; 0x45000
   13314:	ldr	pc, [ip, #3896]!	; 0xf38

00013318 <elf_getdata_rawchunk@plt>:
   13318:	add	ip, pc, #0, 12
   1331c:	add	ip, ip, #282624	; 0x45000
   13320:	ldr	pc, [ip, #3888]!	; 0xf30

00013324 <gelf_getrel@plt>:
   13324:	add	ip, pc, #0, 12
   13328:	add	ip, ip, #282624	; 0x45000
   1332c:	ldr	pc, [ip, #3880]!	; 0xf28

00013330 <dwfl_standard_find_debuginfo@plt>:
   13330:	add	ip, pc, #0, 12
   13334:	add	ip, ip, #282624	; 0x45000
   13338:	ldr	pc, [ip, #3872]!	; 0xf20

0001333c <dwarf_linediscriminator@plt>:
   1333c:	add	ip, pc, #0, 12
   13340:	add	ip, ip, #282624	; 0x45000
   13344:	ldr	pc, [ip, #3864]!	; 0xf18

00013348 <dwarf_getpubnames@plt>:
   13348:	add	ip, pc, #0, 12
   1334c:	add	ip, ip, #282624	; 0x45000
   13350:	ldr	pc, [ip, #3856]!	; 0xf10

00013354 <dwarf_lineprologueend@plt>:
   13354:	add	ip, pc, #0, 12
   13358:	add	ip, ip, #282624	; 0x45000
   1335c:	ldr	pc, [ip, #3848]!	; 0xf08

00013360 <gelf_getdyn@plt>:
   13360:	add	ip, pc, #0, 12
   13364:	add	ip, ip, #282624	; 0x45000
   13368:	ldr	pc, [ip, #3840]!	; 0xf00

0001336c <dwfl_module_getdwarf@plt>:
   1336c:	add	ip, pc, #0, 12
   13370:	add	ip, ip, #282624	; 0x45000
   13374:	ldr	pc, [ip, #3832]!	; 0xef8

00013378 <dwarf_attr_integrate@plt>:
   13378:	add	ip, pc, #0, 12
   1337c:	add	ip, ip, #282624	; 0x45000
   13380:	ldr	pc, [ip, #3824]!	; 0xef0

00013384 <dwarf_peel_type@plt>:
   13384:	add	ip, pc, #0, 12
   13388:	add	ip, ip, #282624	; 0x45000
   1338c:	ldr	pc, [ip, #3816]!	; 0xee8

00013390 <qsort@plt>:
   13390:	add	ip, pc, #0, 12
   13394:	add	ip, ip, #282624	; 0x45000
   13398:	ldr	pc, [ip, #3808]!	; 0xee0

0001339c <dwarf_linesrc@plt>:
   1339c:	add	ip, pc, #0, 12
   133a0:	add	ip, ip, #282624	; 0x45000
   133a4:	ldr	pc, [ip, #3800]!	; 0xed8

000133a8 <dwfl_module_info@plt>:
   133a8:	add	ip, pc, #0, 12
   133ac:	add	ip, ip, #282624	; 0x45000
   133b0:	ldr	pc, [ip, #3792]!	; 0xed0

000133b4 <dwarf_getsrcfiles@plt>:
   133b4:	add	ip, pc, #0, 12
   133b8:	add	ip, ip, #282624	; 0x45000
   133bc:	ldr	pc, [ip, #3784]!	; 0xec8

000133c0 <gelf_getchdr@plt>:
   133c0:	add	ip, pc, #0, 12
   133c4:	add	ip, ip, #282624	; 0x45000
   133c8:	ldr	pc, [ip, #3776]!	; 0xec0

000133cc <dwarf_getstring@plt>:
   133cc:	add	ip, pc, #0, 12
   133d0:	add	ip, ip, #282624	; 0x45000
   133d4:	ldr	pc, [ip, #3768]!	; 0xeb8

000133d8 <elf_ndxscn@plt>:
   133d8:	add	ip, pc, #0, 12
   133dc:	add	ip, ip, #282624	; 0x45000
   133e0:	ldr	pc, [ip, #3760]!	; 0xeb0

000133e4 <elf_getscn@plt>:
   133e4:	add	ip, pc, #0, 12
   133e8:	add	ip, ip, #282624	; 0x45000
   133ec:	ldr	pc, [ip, #3752]!	; 0xea8

000133f0 <elf_getshdrnum@plt>:
   133f0:	add	ip, pc, #0, 12
   133f4:	add	ip, ip, #282624	; 0x45000
   133f8:	ldr	pc, [ip, #3744]!	; 0xea0

000133fc <elf_getaroff@plt>:
   133fc:	add	ip, pc, #0, 12
   13400:	add	ip, ip, #282624	; 0x45000
   13404:	ldr	pc, [ip, #3736]!	; 0xe98

00013408 <dwfl_module_addrinfo@plt>:
   13408:	add	ip, pc, #0, 12
   1340c:	add	ip, ip, #282624	; 0x45000
   13410:	ldr	pc, [ip, #3728]!	; 0xe90

00013414 <elf_getarhdr@plt>:
   13414:	add	ip, pc, #0, 12
   13418:	add	ip, ip, #282624	; 0x45000
   1341c:	ldr	pc, [ip, #3720]!	; 0xe88

00013420 <elf_compress_gnu@plt>:
   13420:	add	ip, pc, #0, 12
   13424:	add	ip, ip, #282624	; 0x45000
   13428:	ldr	pc, [ip, #3712]!	; 0xe80

0001342c <gelf_getsymshndx@plt>:
   1342c:	add	ip, pc, #0, 12
   13430:	add	ip, ip, #282624	; 0x45000
   13434:	ldr	pc, [ip, #3704]!	; 0xe78

00013438 <elf_getarsym@plt>:
   13438:	add	ip, pc, #0, 12
   1343c:	add	ip, ip, #282624	; 0x45000
   13440:	ldr	pc, [ip, #3696]!	; 0xe70

00013444 <dwarf_getalt@plt>:
   13444:	add	ip, pc, #0, 12
   13448:	add	ip, ip, #282624	; 0x45000
   1344c:	ldr	pc, [ip, #3688]!	; 0xe68

00013450 <elf64_xlatetom@plt>:
   13450:	add	ip, pc, #0, 12
   13454:	add	ip, ip, #282624	; 0x45000
   13458:	ldr	pc, [ip, #3680]!	; 0xe60

0001345c <fputs@plt>:
   1345c:	add	ip, pc, #0, 12
   13460:	add	ip, ip, #282624	; 0x45000
   13464:	ldr	pc, [ip, #3672]!	; 0xe58

00013468 <strncmp@plt>:
   13468:	add	ip, pc, #0, 12
   1346c:	add	ip, ip, #282624	; 0x45000
   13470:	ldr	pc, [ip, #3664]!	; 0xe50

00013474 <abort@plt>:
   13474:	add	ip, pc, #0, 12
   13478:	add	ip, ip, #282624	; 0x45000
   1347c:	ldr	pc, [ip, #3656]!	; 0xe48

00013480 <close@plt>:
   13480:	add	ip, pc, #0, 12
   13484:	add	ip, ip, #282624	; 0x45000
   13488:	ldr	pc, [ip, #3648]!	; 0xe40

0001348c <dwarf_next_lines@plt>:
   1348c:	add	ip, pc, #0, 12
   13490:	add	ip, ip, #282624	; 0x45000
   13494:	ldr	pc, [ip, #3640]!	; 0xe38

00013498 <elf_getshdrstrndx@plt>:
   13498:	add	ip, pc, #0, 12
   1349c:	add	ip, ip, #282624	; 0x45000
   134a0:	ldr	pc, [ip, #3632]!	; 0xe30

000134a4 <dcngettext@plt>:
   134a4:	add	ip, pc, #0, 12
   134a8:	add	ip, ip, #282624	; 0x45000
   134ac:	ldr	pc, [ip, #3624]!	; 0xe28

000134b0 <dwarf_linebeginstatement@plt>:
   134b0:	add	ip, pc, #0, 12
   134b4:	add	ip, ip, #282624	; 0x45000
   134b8:	ldr	pc, [ip, #3616]!	; 0xe20

000134bc <dlsym@plt>:
   134bc:	add	ip, pc, #0, 12
   134c0:	add	ip, ip, #282624	; 0x45000
   134c4:	ldr	pc, [ip, #3608]!	; 0xe18

000134c8 <elf_scnshndx@plt>:
   134c8:	add	ip, pc, #0, 12
   134cc:	add	ip, ip, #282624	; 0x45000
   134d0:	ldr	pc, [ip, #3600]!	; 0xe10

000134d4 <elf_kind@plt>:
   134d4:	add	ip, pc, #0, 12
   134d8:	add	ip, ip, #282624	; 0x45000
   134dc:	ldr	pc, [ip, #3592]!	; 0xe08

000134e0 <gelf_getlib@plt>:
   134e0:	add	ip, pc, #0, 12
   134e4:	add	ip, ip, #282624	; 0x45000
   134e8:	ldr	pc, [ip, #3584]!	; 0xe00

000134ec <__snprintf_chk@plt>:
   134ec:	add	ip, pc, #0, 12
   134f0:	add	ip, ip, #282624	; 0x45000
   134f4:	ldr	pc, [ip, #3576]!	; 0xdf8

000134f8 <__mempcpy_chk@plt>:
   134f8:	add	ip, pc, #0, 12
   134fc:	add	ip, ip, #282624	; 0x45000
   13500:	ldr	pc, [ip, #3568]!	; 0xdf0

00013504 <__assert_fail@plt>:
   13504:	add	ip, pc, #0, 12
   13508:	add	ip, ip, #282624	; 0x45000
   1350c:	ldr	pc, [ip, #3560]!	; 0xde8

Disassembly of section .text:

00013510 <.text>:
   13510:	push	{r4, r5, r6, r7, r8, lr}
   13514:	movw	r8, #37688	; 0x9338
   13518:	movt	r8, #5
   1351c:	movw	r3, #37704	; 0x9348
   13520:	movt	r3, #5
   13524:	sub	sp, sp, #16
   13528:	ldr	r2, [r8]
   1352c:	mov	r6, r0
   13530:	mov	r5, r1
   13534:	ldr	r0, [r3]
   13538:	mov	r1, #2
   1353c:	movw	r4, #37712	; 0x9350
   13540:	str	r2, [sp, #12]
   13544:	bl	131d4 <__fsetlocking@plt>
   13548:	movw	r1, #15800	; 0x3db8
   1354c:	mov	r0, #6
   13550:	movt	r1, #4
   13554:	movt	r4, #5
   13558:	bl	132e8 <setlocale@plt>
   1355c:	movw	r0, #60748	; 0xed4c
   13560:	movt	r0, #3
   13564:	bl	12e50 <textdomain@plt>
   13568:	mov	r2, #5
   1356c:	movw	r1, #8848	; 0x2290
   13570:	mov	r0, #0
   13574:	movt	r1, #4
   13578:	bl	12d84 <dcgettext@plt>
   1357c:	mov	r2, #5
   13580:	movw	r1, #8852	; 0x2294
   13584:	movt	r1, #4
   13588:	str	r0, [r4, #116]	; 0x74
   1358c:	mov	r0, #0
   13590:	bl	12d84 <dcgettext@plt>
   13594:	mov	r3, #0
   13598:	mov	r2, r5
   1359c:	str	r3, [sp, #4]
   135a0:	add	ip, sp, #8
   135a4:	mov	r1, r6
   135a8:	str	ip, [sp]
   135ac:	str	r0, [r4, #120]	; 0x78
   135b0:	ldr	r0, [pc, #196]	; 1367c <__assert_fail@plt+0x178>
   135b4:	bl	131e0 <argp_parse@plt>
   135b8:	mov	r0, #1
   135bc:	bl	12cdc <elf_version@plt>
   135c0:	ldr	r3, [sp, #8]
   135c4:	add	r7, r3, #1
   135c8:	subs	r2, r7, r6
   135cc:	rsbs	r7, r2, #0
   135d0:	adcs	r7, r7, r2
   135d4:	b	13604 <__assert_fail@plt+0x100>
   135d8:	ldr	r3, [sp, #8]
   135dc:	mov	r2, r7
   135e0:	ldr	r1, [r5, r3, lsl #2]
   135e4:	bl	15e88 <__assert_fail@plt+0x2984>
   135e8:	mov	r0, r4
   135ec:	bl	13480 <close@plt>
   135f0:	ldr	r3, [sp, #8]
   135f4:	add	r3, r3, #1
   135f8:	str	r3, [sp, #8]
   135fc:	cmp	r6, r3
   13600:	ble	1364c <__assert_fail@plt+0x148>
   13604:	ldr	r0, [r5, r3, lsl #2]
   13608:	mov	r1, #0
   1360c:	bl	12fac <open64@plt>
   13610:	cmn	r0, #1
   13614:	mov	r4, r0
   13618:	bne	135d8 <__assert_fail@plt+0xd4>
   1361c:	bl	1312c <__errno_location@plt>
   13620:	mov	r2, #5
   13624:	movw	r1, #8856	; 0x2298
   13628:	movt	r1, #4
   1362c:	ldr	r4, [r0]
   13630:	mov	r0, #0
   13634:	bl	12d84 <dcgettext@plt>
   13638:	mov	r1, r4
   1363c:	mov	r2, r0
   13640:	mov	r0, #0
   13644:	bl	12f70 <error@plt>
   13648:	b	135f0 <__assert_fail@plt+0xec>
   1364c:	movw	r3, #37696	; 0x9340
   13650:	movt	r3, #5
   13654:	ldr	r2, [sp, #12]
   13658:	ldr	r0, [r3]
   1365c:	ldr	r3, [r8]
   13660:	adds	r0, r0, #0
   13664:	movne	r0, #1
   13668:	cmp	r2, r3
   1366c:	bne	13678 <__assert_fail@plt+0x174>
   13670:	add	sp, sp, #16
   13674:	pop	{r4, r5, r6, r7, r8, pc}
   13678:	bl	12dc0 <__stack_chk_fail@plt>
   1367c:	andeq	r9, r5, r0, lsl r3
   13680:	mov	fp, #0
   13684:	mov	lr, #0
   13688:	pop	{r1}		; (ldr r1, [sp], #4)
   1368c:	mov	r2, sp
   13690:	push	{r2}		; (str r2, [sp, #-4]!)
   13694:	push	{r0}		; (str r0, [sp, #-4]!)
   13698:	ldr	ip, [pc, #16]	; 136b0 <__assert_fail@plt+0x1ac>
   1369c:	push	{ip}		; (str ip, [sp, #-4]!)
   136a0:	ldr	r0, [pc, #12]	; 136b4 <__assert_fail@plt+0x1b0>
   136a4:	ldr	r3, [pc, #12]	; 136b8 <__assert_fail@plt+0x1b4>
   136a8:	bl	12ff4 <__libc_start_main@plt>
   136ac:	bl	13474 <abort@plt>
   136b0:	ldrdeq	ip, [r3], -r0
   136b4:	andeq	r3, r1, r0, lsl r5
   136b8:	andeq	ip, r3, ip, ror #10
   136bc:	ldr	r3, [pc, #20]	; 136d8 <__assert_fail@plt+0x1d4>
   136c0:	ldr	r2, [pc, #20]	; 136dc <__assert_fail@plt+0x1d8>
   136c4:	add	r3, pc, r3
   136c8:	ldr	r2, [r3, r2]
   136cc:	cmp	r2, #0
   136d0:	bxeq	lr
   136d4:	b	1300c <__gmon_start__@plt>
   136d8:	andeq	r5, r4, r4, lsr r9
   136dc:	strdeq	r0, [r0], -ip
   136e0:	push	{r3, lr}
   136e4:	movw	r0, #37680	; 0x9330
   136e8:	ldr	r3, [pc, #36]	; 13714 <__assert_fail@plt+0x210>
   136ec:	movt	r0, #5
   136f0:	rsb	r3, r0, r3
   136f4:	cmp	r3, #6
   136f8:	popls	{r3, pc}
   136fc:	movw	r3, #0
   13700:	movt	r3, #0
   13704:	cmp	r3, #0
   13708:	popeq	{r3, pc}
   1370c:	blx	r3
   13710:	pop	{r3, pc}
   13714:	andeq	r9, r5, r3, lsr r3
   13718:	push	{r3, lr}
   1371c:	movw	r0, #37680	; 0x9330
   13720:	movw	r3, #37680	; 0x9330
   13724:	movt	r0, #5
   13728:	movt	r3, #5
   1372c:	rsb	r3, r0, r3
   13730:	asr	r3, r3, #2
   13734:	add	r3, r3, r3, lsr #31
   13738:	asrs	r1, r3, #1
   1373c:	popeq	{r3, pc}
   13740:	movw	r2, #0
   13744:	movt	r2, #0
   13748:	cmp	r2, #0
   1374c:	popeq	{r3, pc}
   13750:	blx	r2
   13754:	pop	{r3, pc}
   13758:	push	{r4, lr}
   1375c:	movw	r4, #37708	; 0x934c
   13760:	movt	r4, #5
   13764:	ldrb	r3, [r4]
   13768:	cmp	r3, #0
   1376c:	popne	{r4, pc}
   13770:	bl	136e0 <__assert_fail@plt+0x1dc>
   13774:	mov	r3, #1
   13778:	strb	r3, [r4]
   1377c:	pop	{r4, pc}
   13780:	movw	r0, #33468	; 0x82bc
   13784:	movt	r0, #5
   13788:	push	{r3, lr}
   1378c:	ldr	r3, [r0]
   13790:	cmp	r3, #0
   13794:	beq	137ac <__assert_fail@plt+0x2a8>
   13798:	movw	r3, #0
   1379c:	movt	r3, #0
   137a0:	cmp	r3, #0
   137a4:	beq	137ac <__assert_fail@plt+0x2a8>
   137a8:	blx	r3
   137ac:	pop	{r3, lr}
   137b0:	b	13718 <__assert_fail@plt+0x214>
   137b4:	andeq	r0, r0, r0
   137b8:	ldr	r3, [sp, #8]
   137bc:	ldrb	r0, [r3]
   137c0:	cmp	r0, #0
   137c4:	moveq	r2, #1
   137c8:	movne	r0, #1
   137cc:	strbeq	r2, [r3]
   137d0:	bx	lr
   137d4:	push	{r3, r4, r5, r6, r7, lr}
   137d8:	mov	r4, ip
   137dc:	ldr	r7, [ip, #12]
   137e0:	ldrb	r5, [ip, #17]
   137e4:	add	r6, r0, r7
   137e8:	mov	r1, r5
   137ec:	mov	r0, r6
   137f0:	bl	3b39c <__assert_fail@plt+0x27e98>
   137f4:	ldrb	r1, [r4, #18]
   137f8:	ldrd	r2, [r4]
   137fc:	mul	r0, r1, r0
   13800:	mov	r1, r5
   13804:	adds	r2, r2, r0
   13808:	adc	r3, r3, #0
   1380c:	cmp	r7, #0
   13810:	str	r0, [r4, #8]
   13814:	mov	r0, r6
   13818:	strd	r2, [r4]
   1381c:	bne	13838 <__assert_fail@plt+0x334>
   13820:	bl	3b588 <__assert_fail@plt+0x28084>
   13824:	adds	r3, r1, #0
   13828:	movne	r3, #1
   1382c:	strb	r3, [r4, #16]
   13830:	str	r1, [r4, #12]
   13834:	pop	{r3, r4, r5, r6, r7, pc}
   13838:	bl	3b588 <__assert_fail@plt+0x28084>
   1383c:	mov	r3, #1
   13840:	b	1382c <__assert_fail@plt+0x328>
   13844:	ldrd	r2, [r0, #16]
   13848:	ldrd	r0, [r1, #16]
   1384c:	cmp	r3, r1
   13850:	cmpeq	r2, r0
   13854:	bcc	13864 <__assert_fail@plt+0x360>
   13858:	movls	r0, #0
   1385c:	movhi	r0, #1
   13860:	bx	lr
   13864:	mvn	r0, #0
   13868:	bx	lr
   1386c:	ldr	r3, [sp, #8]
   13870:	ldr	r2, [r3]
   13874:	cmp	r2, #0
   13878:	streq	r0, [r3]
   1387c:	moveq	r0, r2
   13880:	movne	r0, #1
   13884:	bx	lr
   13888:	ldr	r3, [r0]
   1388c:	ldr	r1, [r1]
   13890:	ldr	r2, [r3]
   13894:	ldr	r3, [r1]
   13898:	ldrh	r0, [r2, #8]
   1389c:	ldrh	r3, [r3, #8]
   138a0:	rsb	r0, r3, r0
   138a4:	bx	lr
   138a8:	push	{r3, r4, r5, lr}
   138ac:	ldr	r5, [r0]
   138b0:	ldr	r4, [r1]
   138b4:	ldr	r0, [r5, #4]
   138b8:	ldr	r1, [r4, #4]
   138bc:	cmp	r0, r1
   138c0:	beq	138d0 <__assert_fail@plt+0x3cc>
   138c4:	bl	12cd0 <strcmp@plt>
   138c8:	cmp	r0, #0
   138cc:	popne	{r3, r4, r5, pc}
   138d0:	ldrh	r0, [r5, #8]
   138d4:	ldrh	r3, [r4, #8]
   138d8:	rsb	r0, r3, r0
   138dc:	pop	{r3, r4, r5, pc}
   138e0:	push	{r4, r5, r6, lr}
   138e4:	mov	r4, r0
   138e8:	mov	r0, #12
   138ec:	mov	r6, r1
   138f0:	mov	r5, ip
   138f4:	bl	3b270 <__assert_fail@plt+0x27d6c>
   138f8:	ldr	r1, [r5]
   138fc:	mov	r2, #0
   13900:	cmp	r1, #120	; 0x78
   13904:	str	r2, [r0]
   13908:	movw	r2, #37640	; 0x9308
   1390c:	movt	r2, #5
   13910:	str	r4, [r0, #4]
   13914:	strb	r6, [r0, #8]
   13918:	ldreq	r1, [r2]
   1391c:	ldrne	r1, [r2, #4]!
   13920:	str	r0, [r1]
   13924:	str	r0, [r2]
   13928:	pop	{r4, r5, r6, pc}
   1392c:	push	{r4, r5, r6, lr}
   13930:	movw	r4, #37688	; 0x9338
   13934:	movt	r4, #5
   13938:	sub	sp, sp, #8
   1393c:	cmp	r0, #104	; 0x68
   13940:	mov	r5, r1
   13944:	ldr	r2, [r4]
   13948:	str	r0, [sp]
   1394c:	str	r2, [sp, #4]
   13950:	beq	13ddc <__assert_fail@plt+0x8d8>
   13954:	bgt	139a0 <__assert_fail@plt+0x49c>
   13958:	cmp	r0, #86	; 0x56
   1395c:	beq	13d0c <__assert_fail@plt+0x808>
   13960:	ble	139ec <__assert_fail@plt+0x4e8>
   13964:	cmp	r0, #99	; 0x63
   13968:	beq	13d28 <__assert_fail@plt+0x824>
   1396c:	ble	13a8c <__assert_fail@plt+0x588>
   13970:	cmp	r0, #101	; 0x65
   13974:	beq	13ce8 <__assert_fail@plt+0x7e4>
   13978:	blt	13ccc <__assert_fail@plt+0x7c8>
   1397c:	cmp	r0, #103	; 0x67
   13980:	bne	139e4 <__assert_fail@plt+0x4e0>
   13984:	movw	r3, #37712	; 0x9350
   13988:	movt	r3, #5
   1398c:	mov	r2, #1
   13990:	mov	r0, #0
   13994:	strb	r2, [r3, #7]
   13998:	strb	r2, [r3, #16]
   1399c:	b	13b2c <__assert_fail@plt+0x628>
   139a0:	cmp	r0, #119	; 0x77
   139a4:	beq	13d40 <__assert_fail@plt+0x83c>
   139a8:	ble	13a24 <__assert_fail@plt+0x520>
   139ac:	cmp	r0, #256	; 0x100
   139b0:	beq	13d78 <__assert_fail@plt+0x874>
   139b4:	ble	13a5c <__assert_fail@plt+0x558>
   139b8:	mov	r3, #2
   139bc:	movt	r3, #256	; 0x100
   139c0:	cmp	r0, r3
   139c4:	beq	13db4 <__assert_fail@plt+0x8b0>
   139c8:	mov	r3, #7
   139cc:	movt	r3, #256	; 0x100
   139d0:	cmp	r0, r3
   139d4:	beq	13bdc <__assert_fail@plt+0x6d8>
   139d8:	movw	r3, #257	; 0x101
   139dc:	cmp	r0, r3
   139e0:	beq	13da0 <__assert_fail@plt+0x89c>
   139e4:	mov	r0, #7
   139e8:	b	13b2c <__assert_fail@plt+0x628>
   139ec:	cmp	r0, #78	; 0x4e
   139f0:	beq	13cb4 <__assert_fail@plt+0x7b0>
   139f4:	bgt	13bb4 <__assert_fail@plt+0x6b0>
   139f8:	cmp	r0, #65	; 0x41
   139fc:	beq	13c44 <__assert_fail@plt+0x740>
   13a00:	cmp	r0, #73	; 0x49
   13a04:	bne	139e4 <__assert_fail@plt+0x4e0>
   13a08:	movw	r3, #37712	; 0x9350
   13a0c:	movt	r3, #5
   13a10:	mov	r2, #1
   13a14:	mov	r0, #0
   13a18:	strb	r2, [r3, #8]
   13a1c:	strb	r2, [r3, #16]
   13a20:	b	13b2c <__assert_fail@plt+0x628>
   13a24:	cmp	r0, #112	; 0x70
   13a28:	beq	13b44 <__assert_fail@plt+0x640>
   13a2c:	bgt	13b84 <__assert_fail@plt+0x680>
   13a30:	cmp	r0, #108	; 0x6c
   13a34:	beq	13c60 <__assert_fail@plt+0x75c>
   13a38:	cmp	r0, #110	; 0x6e
   13a3c:	bne	139e4 <__assert_fail@plt+0x4e0>
   13a40:	movw	r3, #37712	; 0x9350
   13a44:	movt	r3, #5
   13a48:	mov	r2, #1
   13a4c:	mov	r0, #0
   13a50:	strb	r2, [r3, #10]
   13a54:	strb	r2, [r3, #16]
   13a58:	b	13b2c <__assert_fail@plt+0x628>
   13a5c:	cmp	r0, #120	; 0x78
   13a60:	movweq	r6, #37712	; 0x9350
   13a64:	movteq	r6, #5
   13a68:	beq	13b64 <__assert_fail@plt+0x660>
   13a6c:	cmp	r0, #122	; 0x7a
   13a70:	bne	139e4 <__assert_fail@plt+0x4e0>
   13a74:	movw	r3, #37712	; 0x9350
   13a78:	movt	r3, #5
   13a7c:	mov	r2, #1
   13a80:	mov	r0, #0
   13a84:	strb	r2, [r3, #34]	; 0x22
   13a88:	b	13b2c <__assert_fail@plt+0x628>
   13a8c:	cmp	r0, #87	; 0x57
   13a90:	beq	13b28 <__assert_fail@plt+0x624>
   13a94:	cmp	r0, #97	; 0x61
   13a98:	bne	139e4 <__assert_fail@plt+0x4e0>
   13a9c:	movw	r5, #37712	; 0x9350
   13aa0:	movt	r5, #5
   13aa4:	mov	r6, #1
   13aa8:	mov	ip, sp
   13aac:	ldr	r3, [r5, #12]
   13ab0:	mov	r1, r6
   13ab4:	movw	r0, #53556	; 0xd134
   13ab8:	movt	r0, #3
   13abc:	orr	r3, r3, #1024	; 0x400
   13ac0:	strb	r6, [r5]
   13ac4:	str	r3, [r5, #12]
   13ac8:	strb	r6, [r5, #1]
   13acc:	strb	r6, [r5, #2]
   13ad0:	strb	r6, [r5, #3]
   13ad4:	strb	r6, [r5, #4]
   13ad8:	strb	r6, [r5, #5]
   13adc:	strb	r6, [r5, #6]
   13ae0:	strb	r6, [r5, #7]
   13ae4:	strb	r6, [r5, #8]
   13ae8:	strb	r6, [r5, #9]
   13aec:	strb	r6, [r5, #10]
   13af0:	bl	138e0 <__assert_fail@plt+0x3dc>
   13af4:	mov	ip, sp
   13af8:	mov	r1, r6
   13afc:	movw	r0, #53564	; 0xd13c
   13b00:	movt	r0, #3
   13b04:	bl	138e0 <__assert_fail@plt+0x3dc>
   13b08:	mov	ip, sp
   13b0c:	mov	r1, r6
   13b10:	movw	r0, #20204	; 0x4eec
   13b14:	movt	r0, #4
   13b18:	bl	138e0 <__assert_fail@plt+0x3dc>
   13b1c:	strb	r6, [r5, #16]
   13b20:	mov	r0, #0
   13b24:	b	13b2c <__assert_fail@plt+0x628>
   13b28:	mov	r0, #0
   13b2c:	ldr	r2, [sp, #4]
   13b30:	ldr	r3, [r4]
   13b34:	cmp	r2, r3
   13b38:	bne	13f60 <__assert_fail@plt+0xa5c>
   13b3c:	add	sp, sp, #8
   13b40:	pop	{r4, r5, r6, pc}
   13b44:	cmp	r1, #0
   13b48:	movw	r6, #37712	; 0x9350
   13b4c:	movt	r6, #5
   13b50:	mov	r3, #1
   13b54:	moveq	r0, r1
   13b58:	strb	r3, [r6, #16]
   13b5c:	strbeq	r3, [r6, #32]
   13b60:	beq	13b2c <__assert_fail@plt+0x628>
   13b64:	mov	r0, r5
   13b68:	mov	ip, sp
   13b6c:	mov	r1, #0
   13b70:	bl	138e0 <__assert_fail@plt+0x3dc>
   13b74:	mov	r3, #1
   13b78:	mov	r0, #0
   13b7c:	strb	r3, [r6, #16]
   13b80:	b	13b2c <__assert_fail@plt+0x628>
   13b84:	cmp	r0, #114	; 0x72
   13b88:	beq	13c98 <__assert_fail@plt+0x794>
   13b8c:	cmp	r0, #115	; 0x73
   13b90:	bne	139e4 <__assert_fail@plt+0x4e0>
   13b94:	movw	r3, #37712	; 0x9350
   13b98:	movt	r3, #5
   13b9c:	mov	r2, #1
   13ba0:	mov	r0, #0
   13ba4:	str	r1, [r3, #24]
   13ba8:	strb	r2, [r3, #4]
   13bac:	strb	r2, [r3, #16]
   13bb0:	b	13b2c <__assert_fail@plt+0x628>
   13bb4:	cmp	r0, #83	; 0x53
   13bb8:	beq	13c7c <__assert_fail@plt+0x778>
   13bbc:	cmp	r0, #85	; 0x55
   13bc0:	bne	139e4 <__assert_fail@plt+0x4e0>
   13bc4:	movw	r3, #37712	; 0x9350
   13bc8:	movt	r3, #5
   13bcc:	mov	r2, #1
   13bd0:	mov	r0, #0
   13bd4:	strb	r2, [r3, #33]	; 0x21
   13bd8:	b	13b2c <__assert_fail@plt+0x628>
   13bdc:	movw	r3, #37712	; 0x9350
   13be0:	movt	r3, #5
   13be4:	ldrb	r2, [r3, #16]
   13be8:	cmp	r2, #0
   13bec:	bne	13b28 <__assert_fail@plt+0x624>
   13bf0:	ldrb	r3, [r3, #28]
   13bf4:	cmp	r3, #0
   13bf8:	bne	13b28 <__assert_fail@plt+0x624>
   13bfc:	movw	r4, #37692	; 0x933c
   13c00:	movt	r4, #5
   13c04:	movw	r1, #53736	; 0xd1e8
   13c08:	mov	r0, #0
   13c0c:	movt	r1, #3
   13c10:	mov	r2, #5
   13c14:	bl	12d84 <dcgettext@plt>
   13c18:	ldr	r1, [r4]
   13c1c:	bl	1345c <fputs@plt>
   13c20:	movw	r3, #37680	; 0x9330
   13c24:	movt	r3, #5
   13c28:	ldr	r0, [pc, #1500]	; 1420c <__assert_fail@plt+0xd08>
   13c2c:	mov	r2, #4
   13c30:	ldr	r1, [r4]
   13c34:	ldr	r3, [r3]
   13c38:	bl	13138 <argp_help@plt>
   13c3c:	mov	r0, #1
   13c40:	bl	13054 <exit@plt>
   13c44:	movw	r3, #37712	; 0x9350
   13c48:	movt	r3, #5
   13c4c:	mov	r2, #1
   13c50:	mov	r0, #0
   13c54:	strb	r2, [r3, #9]
   13c58:	strb	r2, [r3, #16]
   13c5c:	b	13b2c <__assert_fail@plt+0x628>
   13c60:	movw	r3, #37712	; 0x9350
   13c64:	movt	r3, #5
   13c68:	mov	r2, #1
   13c6c:	mov	r0, #0
   13c70:	strb	r2, [r3, #1]
   13c74:	strb	r2, [r3, #16]
   13c78:	b	13b2c <__assert_fail@plt+0x628>
   13c7c:	movw	r3, #37712	; 0x9350
   13c80:	movt	r3, #5
   13c84:	mov	r2, #1
   13c88:	mov	r0, #0
   13c8c:	strb	r2, [r3, #3]
   13c90:	strb	r2, [r3, #16]
   13c94:	b	13b2c <__assert_fail@plt+0x628>
   13c98:	movw	r3, #37712	; 0x9350
   13c9c:	movt	r3, #5
   13ca0:	mov	r2, #1
   13ca4:	mov	r0, #0
   13ca8:	strb	r2, [r3, #2]
   13cac:	strb	r2, [r3, #16]
   13cb0:	b	13b2c <__assert_fail@plt+0x628>
   13cb4:	movw	r3, #37640	; 0x9308
   13cb8:	movt	r3, #5
   13cbc:	mov	r2, #0
   13cc0:	mov	r0, r2
   13cc4:	strb	r2, [r3, #36]	; 0x24
   13cc8:	b	13b2c <__assert_fail@plt+0x628>
   13ccc:	movw	r3, #37712	; 0x9350
   13cd0:	movt	r3, #5
   13cd4:	mov	r2, #1
   13cd8:	mov	r0, #0
   13cdc:	strb	r2, [r3, #6]
   13ce0:	strb	r2, [r3, #16]
   13ce4:	b	13b2c <__assert_fail@plt+0x628>
   13ce8:	movw	r3, #37712	; 0x9350
   13cec:	movt	r3, #5
   13cf0:	mov	r1, #1
   13cf4:	mov	r0, #0
   13cf8:	ldr	r2, [r3, #20]
   13cfc:	strb	r1, [r3, #16]
   13d00:	orr	r2, r2, #1024	; 0x400
   13d04:	str	r2, [r3, #20]
   13d08:	b	13b2c <__assert_fail@plt+0x628>
   13d0c:	movw	r3, #37712	; 0x9350
   13d10:	movt	r3, #5
   13d14:	mov	r2, #1
   13d18:	mov	r0, #0
   13d1c:	strb	r2, [r3, #5]
   13d20:	strb	r2, [r3, #16]
   13d24:	b	13b2c <__assert_fail@plt+0x628>
   13d28:	movw	r3, #37712	; 0x9350
   13d2c:	movt	r3, #5
   13d30:	mov	r2, #1
   13d34:	mov	r0, #0
   13d38:	strb	r2, [r3, #28]
   13d3c:	b	13b2c <__assert_fail@plt+0x628>
   13d40:	cmp	r1, #0
   13d44:	beq	13e64 <__assert_fail@plt+0x960>
   13d48:	movw	r1, #53572	; 0xd144
   13d4c:	mov	r0, r5
   13d50:	movt	r1, #3
   13d54:	bl	12cd0 <strcmp@plt>
   13d58:	cmp	r0, #0
   13d5c:	bne	13df8 <__assert_fail@plt+0x8f4>
   13d60:	movw	r6, #37712	; 0x9350
   13d64:	movt	r6, #5
   13d68:	ldr	r3, [r6, #20]
   13d6c:	orr	r3, r3, #1
   13d70:	str	r3, [r6, #20]
   13d74:	b	13b74 <__assert_fail@plt+0x670>
   13d78:	cmp	r1, #0
   13d7c:	movw	r3, #37712	; 0x9350
   13d80:	movt	r3, #5
   13d84:	movweq	r2, #53764	; 0xd204
   13d88:	moveq	r0, r1
   13d8c:	movteq	r2, #3
   13d90:	movne	r0, #0
   13d94:	streq	r2, [r3, #36]	; 0x24
   13d98:	strne	r1, [r3, #36]	; 0x24
   13d9c:	b	13b2c <__assert_fail@plt+0x628>
   13da0:	movw	r3, #37712	; 0x9350
   13da4:	movt	r3, #5
   13da8:	mov	r0, #0
   13dac:	str	r1, [r3, #40]	; 0x28
   13db0:	b	13b2c <__assert_fail@plt+0x628>
   13db4:	movw	r4, #37692	; 0x933c
   13db8:	movt	r4, #5
   13dbc:	mov	r2, #5
   13dc0:	movw	r1, #53716	; 0xd1d4
   13dc4:	mov	r0, #0
   13dc8:	movt	r1, #3
   13dcc:	bl	12d84 <dcgettext@plt>
   13dd0:	ldr	r1, [r4]
   13dd4:	bl	1345c <fputs@plt>
   13dd8:	b	13c20 <__assert_fail@plt+0x71c>
   13ddc:	movw	r3, #37712	; 0x9350
   13de0:	movt	r3, #5
   13de4:	mov	r2, #1
   13de8:	mov	r0, #0
   13dec:	strb	r2, [r3]
   13df0:	strb	r2, [r3, #16]
   13df4:	b	13b2c <__assert_fail@plt+0x628>
   13df8:	movw	r1, #18588	; 0x489c
   13dfc:	mov	r0, r5
   13e00:	movt	r1, #4
   13e04:	bl	12cd0 <strcmp@plt>
   13e08:	cmp	r0, #0
   13e0c:	bne	13e34 <__assert_fail@plt+0x930>
   13e10:	movw	r6, #37712	; 0x9350
   13e14:	movt	r6, #5
   13e18:	ldr	r2, [r6, #20]
   13e1c:	ldr	r3, [r6, #12]
   13e20:	orr	r2, r2, #8192	; 0x2000
   13e24:	str	r2, [r6, #20]
   13e28:	orr	r3, r3, #8
   13e2c:	str	r3, [r6, #12]
   13e30:	b	13b74 <__assert_fail@plt+0x670>
   13e34:	movw	r1, #53580	; 0xd14c
   13e38:	mov	r0, r5
   13e3c:	movt	r1, #3
   13e40:	bl	12cd0 <strcmp@plt>
   13e44:	cmp	r0, #0
   13e48:	bne	13e88 <__assert_fail@plt+0x984>
   13e4c:	movw	r6, #37712	; 0x9350
   13e50:	movt	r6, #5
   13e54:	ldr	r3, [r6, #20]
   13e58:	orr	r3, r3, #2
   13e5c:	str	r3, [r6, #20]
   13e60:	b	13b74 <__assert_fail@plt+0x670>
   13e64:	movw	r6, #37712	; 0x9350
   13e68:	movt	r6, #5
   13e6c:	movw	r3, #32767	; 0x7fff
   13e70:	mov	r2, #8
   13e74:	str	r3, [r6, #20]
   13e78:	mov	r3, #1
   13e7c:	str	r2, [r6, #12]
   13e80:	strb	r3, [r6, #29]
   13e84:	b	13b74 <__assert_fail@plt+0x670>
   13e88:	movw	r1, #53588	; 0xd154
   13e8c:	mov	r0, r5
   13e90:	movt	r1, #3
   13e94:	bl	12cd0 <strcmp@plt>
   13e98:	cmp	r0, #0
   13e9c:	bne	13ec0 <__assert_fail@plt+0x9bc>
   13ea0:	movw	r6, #37712	; 0x9350
   13ea4:	movt	r6, #5
   13ea8:	mov	r2, #1
   13eac:	ldr	r3, [r6, #20]
   13eb0:	strb	r2, [r6, #30]
   13eb4:	orr	r3, r3, #2
   13eb8:	str	r3, [r6, #20]
   13ebc:	b	13b74 <__assert_fail@plt+0x670>
   13ec0:	movw	r1, #19312	; 0x4b70
   13ec4:	mov	r0, r5
   13ec8:	movt	r1, #4
   13ecc:	bl	12cd0 <strcmp@plt>
   13ed0:	cmp	r0, #0
   13ed4:	bne	13efc <__assert_fail@plt+0x9f8>
   13ed8:	movw	r6, #37712	; 0x9350
   13edc:	movt	r6, #5
   13ee0:	ldr	r2, [r6, #20]
   13ee4:	ldr	r3, [r6, #12]
   13ee8:	orr	r2, r2, #512	; 0x200
   13eec:	str	r2, [r6, #20]
   13ef0:	orr	r3, r3, #8
   13ef4:	str	r3, [r6, #12]
   13ef8:	b	13b74 <__assert_fail@plt+0x670>
   13efc:	movw	r1, #14360	; 0x3818
   13f00:	mov	r0, r5
   13f04:	movt	r1, #4
   13f08:	bl	12cd0 <strcmp@plt>
   13f0c:	cmp	r0, #0
   13f10:	beq	13f64 <__assert_fail@plt+0xa60>
   13f14:	movw	r1, #53604	; 0xd164
   13f18:	mov	r0, r5
   13f1c:	movt	r1, #3
   13f20:	bl	12cd0 <strcmp@plt>
   13f24:	cmp	r0, #0
   13f28:	beq	13f64 <__assert_fail@plt+0xa60>
   13f2c:	movw	r1, #20588	; 0x506c
   13f30:	mov	r0, r5
   13f34:	movt	r1, #4
   13f38:	bl	12cd0 <strcmp@plt>
   13f3c:	cmp	r0, #0
   13f40:	bne	13f7c <__assert_fail@plt+0xa78>
   13f44:	movw	r6, #37712	; 0x9350
   13f48:	movt	r6, #5
   13f4c:	ldr	r3, [r6, #20]
   13f50:	orr	r3, r3, #16384	; 0x4000
   13f54:	orr	r3, r3, #8
   13f58:	str	r3, [r6, #20]
   13f5c:	b	13b74 <__assert_fail@plt+0x670>
   13f60:	bl	12dc0 <__stack_chk_fail@plt>
   13f64:	movw	r6, #37712	; 0x9350
   13f68:	movt	r6, #5
   13f6c:	ldr	r3, [r6, #20]
   13f70:	orr	r3, r3, #4
   13f74:	str	r3, [r6, #20]
   13f78:	b	13b74 <__assert_fail@plt+0x670>
   13f7c:	movw	r1, #53612	; 0xd16c
   13f80:	mov	r0, r5
   13f84:	movt	r1, #3
   13f88:	bl	12cd0 <strcmp@plt>
   13f8c:	cmp	r0, #0
   13f90:	bne	13fb8 <__assert_fail@plt+0xab4>
   13f94:	movw	r6, #37712	; 0x9350
   13f98:	movt	r6, #5
   13f9c:	mov	r2, #1
   13fa0:	ldr	r3, [r6, #20]
   13fa4:	strb	r2, [r6, #29]
   13fa8:	orr	r3, r3, #16384	; 0x4000
   13fac:	orr	r3, r3, #8
   13fb0:	str	r3, [r6, #20]
   13fb4:	b	13b74 <__assert_fail@plt+0x670>
   13fb8:	ldrb	r6, [r5]
   13fbc:	cmp	r6, #108	; 0x6c
   13fc0:	bne	1400c <__assert_fail@plt+0xb08>
   13fc4:	ldrb	r3, [r5, #1]
   13fc8:	cmp	r3, #111	; 0x6f
   13fcc:	bne	1400c <__assert_fail@plt+0xb08>
   13fd0:	ldrb	r3, [r5, #2]
   13fd4:	cmp	r3, #99	; 0x63
   13fd8:	bne	1400c <__assert_fail@plt+0xb08>
   13fdc:	ldrb	r3, [r5, #3]
   13fe0:	cmp	r3, #0
   13fe4:	bne	1400c <__assert_fail@plt+0xb08>
   13fe8:	movw	r6, #37712	; 0x9350
   13fec:	movt	r6, #5
   13ff0:	ldr	r2, [r6, #20]
   13ff4:	ldr	r3, [r6, #12]
   13ff8:	orr	r2, r2, #32
   13ffc:	str	r2, [r6, #20]
   14000:	orr	r3, r3, #8
   14004:	str	r3, [r6, #12]
   14008:	b	13b74 <__assert_fail@plt+0x670>
   1400c:	movw	r1, #53620	; 0xd174
   14010:	mov	r0, r5
   14014:	movt	r1, #3
   14018:	bl	12cd0 <strcmp@plt>
   1401c:	cmp	r0, #0
   14020:	bne	1403c <__assert_fail@plt+0xb38>
   14024:	movw	r6, #37712	; 0x9350
   14028:	movt	r6, #5
   1402c:	ldr	r3, [r6, #20]
   14030:	orr	r3, r3, #16
   14034:	str	r3, [r6, #20]
   14038:	b	13b74 <__assert_fail@plt+0x670>
   1403c:	movw	r1, #53628	; 0xd17c
   14040:	mov	r0, r5
   14044:	movt	r1, #3
   14048:	bl	12cd0 <strcmp@plt>
   1404c:	cmp	r0, #0
   14050:	bne	14074 <__assert_fail@plt+0xb70>
   14054:	movw	r6, #37712	; 0x9350
   14058:	movt	r6, #5
   1405c:	mov	r2, #1
   14060:	ldr	r3, [r6, #20]
   14064:	strb	r2, [r6, #31]
   14068:	orr	r3, r3, #16
   1406c:	str	r3, [r6, #20]
   14070:	b	13b74 <__assert_fail@plt+0x670>
   14074:	movw	r1, #55924	; 0xda74
   14078:	mov	r0, r5
   1407c:	movt	r1, #3
   14080:	bl	12cd0 <strcmp@plt>
   14084:	cmp	r0, #0
   14088:	bne	140a4 <__assert_fail@plt+0xba0>
   1408c:	movw	r6, #37712	; 0x9350
   14090:	movt	r6, #5
   14094:	ldr	r3, [r6, #20]
   14098:	orr	r3, r3, #64	; 0x40
   1409c:	str	r3, [r6, #20]
   140a0:	b	13b74 <__assert_fail@plt+0x670>
   140a4:	cmp	r6, #115	; 0x73
   140a8:	bne	140f4 <__assert_fail@plt+0xbf0>
   140ac:	ldrb	r3, [r5, #1]
   140b0:	cmp	r3, #116	; 0x74
   140b4:	bne	140f4 <__assert_fail@plt+0xbf0>
   140b8:	ldrb	r3, [r5, #2]
   140bc:	cmp	r3, #114	; 0x72
   140c0:	bne	140f4 <__assert_fail@plt+0xbf0>
   140c4:	ldrb	r3, [r5, #3]
   140c8:	cmp	r3, #0
   140cc:	bne	140f4 <__assert_fail@plt+0xbf0>
   140d0:	movw	r6, #37712	; 0x9350
   140d4:	movt	r6, #5
   140d8:	ldr	r2, [r6, #20]
   140dc:	ldr	r3, [r6, #12]
   140e0:	orr	r2, r2, #128	; 0x80
   140e4:	str	r2, [r6, #20]
   140e8:	orr	r3, r3, #8
   140ec:	str	r3, [r6, #12]
   140f0:	b	13b74 <__assert_fail@plt+0x670>
   140f4:	movw	r1, #53640	; 0xd188
   140f8:	mov	r0, r5
   140fc:	movt	r1, #3
   14100:	bl	12cd0 <strcmp@plt>
   14104:	cmp	r0, #0
   14108:	bne	14124 <__assert_fail@plt+0xc20>
   1410c:	movw	r6, #37712	; 0x9350
   14110:	movt	r6, #5
   14114:	ldr	r3, [r6, #20]
   14118:	orr	r3, r3, #256	; 0x100
   1411c:	str	r3, [r6, #20]
   14120:	b	13b74 <__assert_fail@plt+0x670>
   14124:	movw	r1, #53648	; 0xd190
   14128:	mov	r0, r5
   1412c:	movt	r1, #3
   14130:	bl	12cd0 <strcmp@plt>
   14134:	cmp	r0, #0
   14138:	bne	14154 <__assert_fail@plt+0xc50>
   1413c:	movw	r6, #37712	; 0x9350
   14140:	movt	r6, #5
   14144:	ldr	r3, [r6, #20]
   14148:	orr	r3, r3, #4096	; 0x1000
   1414c:	str	r3, [r6, #20]
   14150:	b	13b74 <__assert_fail@plt+0x670>
   14154:	movw	r1, #53656	; 0xd198
   14158:	mov	r0, r5
   1415c:	movt	r1, #3
   14160:	bl	12cd0 <strcmp@plt>
   14164:	cmp	r0, #0
   14168:	bne	14184 <__assert_fail@plt+0xc80>
   1416c:	movw	r6, #37712	; 0x9350
   14170:	movt	r6, #5
   14174:	ldr	r3, [r6, #20]
   14178:	orr	r3, r3, #1024	; 0x400
   1417c:	str	r3, [r6, #20]
   14180:	b	13b74 <__assert_fail@plt+0x670>
   14184:	movw	r1, #53668	; 0xd1a4
   14188:	mov	r0, r5
   1418c:	movt	r1, #3
   14190:	bl	12cd0 <strcmp@plt>
   14194:	cmp	r0, #0
   14198:	bne	141b4 <__assert_fail@plt+0xcb0>
   1419c:	movw	r6, #37712	; 0x9350
   141a0:	movt	r6, #5
   141a4:	ldr	r3, [r6, #20]
   141a8:	orr	r3, r3, #2048	; 0x800
   141ac:	str	r3, [r6, #20]
   141b0:	b	13b74 <__assert_fail@plt+0x670>
   141b4:	movw	r4, #37692	; 0x933c
   141b8:	movt	r4, #5
   141bc:	mov	r2, #5
   141c0:	movw	r1, #53680	; 0xd1b0
   141c4:	mov	r0, #0
   141c8:	movt	r1, #3
   141cc:	ldr	r6, [r4]
   141d0:	bl	12d84 <dcgettext@plt>
   141d4:	mov	r3, r5
   141d8:	mov	r1, #1
   141dc:	mov	r2, r0
   141e0:	mov	r0, r6
   141e4:	bl	13258 <__fprintf_chk@plt>
   141e8:	movw	r3, #37680	; 0x9330
   141ec:	movt	r3, #5
   141f0:	ldr	r0, [pc, #20]	; 1420c <__assert_fail@plt+0xd08>
   141f4:	ldr	r1, [r4]
   141f8:	mov	r2, #4
   141fc:	ldr	r3, [r3]
   14200:	bl	13138 <argp_help@plt>
   14204:	mov	r0, #1
   14208:	bl	13054 <exit@plt>
   1420c:	andeq	r9, r5, r0, lsl r3
   14210:	push	{r4, r5, r6, lr}
   14214:	mov	r4, r0
   14218:	mov	r5, r1
   1421c:	add	r6, r1, r0
   14220:	b	1423c <__assert_fail@plt+0xd38>
   14224:	ldrb	r2, [r5], #1
   14228:	bl	13204 <__printf_chk@plt>
   1422c:	cmp	r4, #0
   14230:	mov	r0, #32
   14234:	beq	1423c <__assert_fail@plt+0xd38>
   14238:	bl	131b0 <putchar@plt>
   1423c:	cmp	r5, r6
   14240:	movw	r1, #53780	; 0xd214
   14244:	mov	r0, #1
   14248:	movt	r1, #3
   1424c:	sub	r4, r4, #1
   14250:	bne	14224 <__assert_fail@plt+0xd20>
   14254:	pop	{r4, r5, r6, pc}
   14258:	push	{r4, r5, r6, r7, r8, r9, lr}
   1425c:	mov	r0, #0
   14260:	sub	sp, sp, #28
   14264:	mov	r8, r1
   14268:	mov	r9, r2
   1426c:	movw	r1, #53788	; 0xd21c
   14270:	mov	r2, #5
   14274:	movt	r1, #3
   14278:	bl	12d84 <dcgettext@plt>
   1427c:	ldrd	r4, [r8, #8]
   14280:	ldrd	r6, [r8]
   14284:	ldr	r2, [r9]
   14288:	strd	r4, [sp]
   1428c:	strd	r6, [sp, #8]
   14290:	ldr	r3, [r8, #16]
   14294:	mov	r1, r0
   14298:	mov	r0, #1
   1429c:	add	ip, r2, r0
   142a0:	str	ip, [r9]
   142a4:	str	r3, [sp, #16]
   142a8:	bl	13204 <__printf_chk@plt>
   142ac:	mov	r0, #0
   142b0:	add	sp, sp, #28
   142b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   142b8:	ldr	ip, [r0]
   142bc:	mov	r3, #0
   142c0:	push	{r4, r5, r6, r7, r8, sl, fp}
   142c4:	sub	sp, sp, #12
   142c8:	mov	r4, ip
   142cc:	add	ip, ip, #1
   142d0:	str	ip, [r0]
   142d4:	ldrb	r2, [r4]
   142d8:	tst	r2, #128	; 0x80
   142dc:	and	r2, r2, #127	; 0x7f
   142e0:	uxtb	r2, r2
   142e4:	bne	142fc <__assert_fail@plt+0xdf8>
   142e8:	mov	r0, r2
   142ec:	mov	r1, r3
   142f0:	add	sp, sp, #12
   142f4:	pop	{r4, r5, r6, r7, r8, sl, fp}
   142f8:	bx	lr
   142fc:	cmp	r4, r1
   14300:	bcs	14378 <__assert_fail@plt+0xe74>
   14304:	rsb	r1, r4, r1
   14308:	cmp	r1, #10
   1430c:	movcc	r7, r1
   14310:	movcs	r7, #10
   14314:	mov	r1, #1
   14318:	mov	r8, #7
   1431c:	strd	r2, [sp]
   14320:	mul	r4, r8, r1
   14324:	cmp	r1, r7
   14328:	mov	r3, ip
   1432c:	add	ip, ip, #1
   14330:	sub	r6, r4, #32
   14334:	rsb	r5, r4, #32
   14338:	bcs	14388 <__assert_fail@plt+0xe84>
   1433c:	str	ip, [r0]
   14340:	ldrb	r3, [r3]
   14344:	and	r2, r3, #127	; 0x7f
   14348:	tst	r3, #128	; 0x80
   1434c:	uxtb	r2, r2
   14350:	lsl	fp, r2, r6
   14354:	lsl	sl, r2, r4
   14358:	orr	fp, fp, r2, lsr r5
   1435c:	ldrd	r2, [sp]
   14360:	orr	r2, r2, sl
   14364:	orr	r3, r3, fp
   14368:	strd	r2, [sp]
   1436c:	bne	14380 <__assert_fail@plt+0xe7c>
   14370:	ldrd	r2, [sp]
   14374:	b	142e8 <__assert_fail@plt+0xde4>
   14378:	mov	r7, #0
   1437c:	b	14314 <__assert_fail@plt+0xe10>
   14380:	add	r1, r1, #1
   14384:	b	14320 <__assert_fail@plt+0xe1c>
   14388:	mvn	r0, #0
   1438c:	mov	r1, r0
   14390:	b	142f0 <__assert_fail@plt+0xdec>
   14394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14398:	sub	sp, sp, #20
   1439c:	mov	r4, r2
   143a0:	mov	r5, r3
   143a4:	ldr	ip, [sp, #60]	; 0x3c
   143a8:	str	r0, [sp, #12]
   143ac:	cmp	ip, #0
   143b0:	ldr	sl, [sp, #56]	; 0x38
   143b4:	ble	144ec <__assert_fail@plt+0xfe8>
   143b8:	mov	r8, #0
   143bc:	movw	fp, #37704	; 0x9348
   143c0:	movt	fp, #5
   143c4:	mov	r9, r8
   143c8:	mov	r0, #1
   143cc:	ldr	r1, [sl, r8]
   143d0:	and	r6, r4, r1
   143d4:	and	r7, r5, r1, asr #31
   143d8:	orrs	r3, r6, r7
   143dc:	beq	14438 <__assert_fail@plt+0xf34>
   143e0:	cmp	r0, #0
   143e4:	bne	1440c <__assert_fail@plt+0xf08>
   143e8:	ldr	r0, [fp]
   143ec:	ldr	r1, [r0, #20]
   143f0:	ldr	r6, [r0, #24]
   143f4:	add	lr, r1, #1
   143f8:	cmp	r1, r6
   143fc:	strcc	lr, [r0, #20]
   14400:	movcc	r3, #32
   14404:	strbcc	r3, [r1]
   14408:	bcs	144d8 <__assert_fail@plt+0xfd4>
   1440c:	add	r0, sl, r8
   14410:	ldr	r1, [fp]
   14414:	ldr	r0, [r0, #4]
   14418:	str	ip, [sp, #8]
   1441c:	bl	12c58 <fputs_unlocked@plt>
   14420:	ldr	r1, [sl, r8]
   14424:	mov	r0, #0
   14428:	ldr	ip, [sp, #8]
   1442c:	mvn	r1, r1
   14430:	and	r4, r4, r1
   14434:	and	r5, r5, r1, asr #31
   14438:	add	r9, r9, #1
   1443c:	add	r8, r8, #8
   14440:	cmp	r9, ip
   14444:	bne	143cc <__assert_fail@plt+0xec8>
   14448:	orrs	r3, r4, r5
   1444c:	beq	1447c <__assert_fail@plt+0xf78>
   14450:	cmp	r0, #0
   14454:	beq	144a8 <__assert_fail@plt+0xfa4>
   14458:	ldr	r3, [sp, #12]
   1445c:	movw	r1, #53848	; 0xd258
   14460:	strd	r4, [sp]
   14464:	mov	r0, #1
   14468:	cmp	r3, #1
   1446c:	movt	r1, #3
   14470:	movne	r2, #18
   14474:	moveq	r2, #10
   14478:	bl	13204 <__printf_chk@plt>
   1447c:	ldr	r0, [fp]
   14480:	ldr	r3, [r0, #20]
   14484:	ldr	r2, [r0, #24]
   14488:	cmp	r3, r2
   1448c:	addcc	r1, r3, #1
   14490:	strcc	r1, [r0, #20]
   14494:	movcc	r2, #10
   14498:	strbcc	r2, [r3]
   1449c:	bcs	14500 <__assert_fail@plt+0xffc>
   144a0:	add	sp, sp, #20
   144a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a8:	ldr	r0, [fp]
   144ac:	ldr	r2, [r0, #20]
   144b0:	ldr	r1, [r0, #24]
   144b4:	cmp	r2, r1
   144b8:	addcc	ip, r2, #1
   144bc:	strcc	ip, [r0, #20]
   144c0:	movcc	r1, #32
   144c4:	strbcc	r1, [r2]
   144c8:	bcc	14458 <__assert_fail@plt+0xf54>
   144cc:	mov	r1, #32
   144d0:	bl	132dc <__overflow@plt>
   144d4:	b	14458 <__assert_fail@plt+0xf54>
   144d8:	mov	r1, #32
   144dc:	str	ip, [sp, #8]
   144e0:	bl	132dc <__overflow@plt>
   144e4:	ldr	ip, [sp, #8]
   144e8:	b	1440c <__assert_fail@plt+0xf08>
   144ec:	orrs	r3, r4, r5
   144f0:	movw	fp, #37704	; 0x9348
   144f4:	movt	fp, #5
   144f8:	bne	14458 <__assert_fail@plt+0xf54>
   144fc:	b	1447c <__assert_fail@plt+0xf78>
   14500:	mov	r1, #10
   14504:	add	sp, sp, #20
   14508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1450c:	b	132dc <__overflow@plt>
   14510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14514:	movw	r8, #37688	; 0x9338
   14518:	movt	r8, #5
   1451c:	sub	sp, sp, #596	; 0x254
   14520:	mov	r7, r0
   14524:	movw	r9, #37712	; 0x9350
   14528:	ldr	r3, [r8]
   1452c:	movw	ip, #37704	; 0x9348
   14530:	str	r8, [sp, #140]	; 0x8c
   14534:	movt	r9, #5
   14538:	movt	ip, #5
   1453c:	mov	r8, #0
   14540:	str	r1, [sp, #116]	; 0x74
   14544:	str	r9, [sp, #100]	; 0x64
   14548:	str	ip, [sp, #108]	; 0x6c
   1454c:	str	r8, [sp, #76]	; 0x4c
   14550:	str	r3, [sp, #588]	; 0x24c
   14554:	ldr	r1, [sp, #76]	; 0x4c
   14558:	ldr	r0, [r7, #16]
   1455c:	bl	13300 <elf_nextscn@plt>
   14560:	subs	r9, r0, #0
   14564:	str	r9, [sp, #76]	; 0x4c
   14568:	beq	14d50 <__assert_fail@plt+0x184c>
   1456c:	add	r1, sp, #200	; 0xc8
   14570:	bl	12cc4 <gelf_getshdr@plt>
   14574:	cmp	r0, #0
   14578:	str	r0, [sp, #60]	; 0x3c
   1457c:	beq	14554 <__assert_fail@plt+0x1050>
   14580:	ldr	r3, [r0, #4]
   14584:	ldr	r9, [sp, #116]	; 0x74
   14588:	cmp	r3, r9
   1458c:	bne	14554 <__assert_fail@plt+0x1050>
   14590:	ldr	ip, [sp, #100]	; 0x64
   14594:	movw	r4, #37712	; 0x9350
   14598:	movt	r4, #5
   1459c:	ldr	r3, [ip, #24]
   145a0:	cmp	r3, #0
   145a4:	beq	145e8 <__assert_fail@plt+0x10e4>
   145a8:	ldr	r0, [r7, #16]
   145ac:	add	r1, sp, #328	; 0x148
   145b0:	bl	13498 <elf_getshdrstrndx@plt>
   145b4:	cmp	r0, #0
   145b8:	blt	14dbc <__assert_fail@plt+0x18b8>
   145bc:	ldr	r8, [sp, #60]	; 0x3c
   145c0:	ldr	r0, [r7, #16]
   145c4:	ldr	r1, [sp, #328]	; 0x148
   145c8:	ldr	r2, [r8]
   145cc:	bl	12e44 <elf_strptr@plt>
   145d0:	cmp	r0, #0
   145d4:	beq	14554 <__assert_fail@plt+0x1050>
   145d8:	ldr	r1, [r4, #24]
   145dc:	bl	12cd0 <strcmp@plt>
   145e0:	cmp	r0, #0
   145e4:	bne	14554 <__assert_fail@plt+0x1050>
   145e8:	ldr	r9, [sp, #60]	; 0x3c
   145ec:	mov	r0, #2048	; 0x800
   145f0:	mov	r1, #0
   145f4:	ldrd	r2, [r9, #8]
   145f8:	and	r2, r2, r0
   145fc:	and	r3, r3, r1
   14600:	orrs	ip, r2, r3
   14604:	beq	14638 <__assert_fail@plt+0x1134>
   14608:	mov	r1, #0
   1460c:	ldr	r0, [sp, #76]	; 0x4c
   14610:	mov	r2, r1
   14614:	bl	12e8c <elf_compress@plt>
   14618:	cmp	r0, #0
   1461c:	blt	14d80 <__assert_fail@plt+0x187c>
   14620:	add	r1, sp, #200	; 0xc8
   14624:	ldr	r0, [sp, #76]	; 0x4c
   14628:	bl	12cc4 <gelf_getshdr@plt>
   1462c:	subs	r8, r0, #0
   14630:	str	r8, [sp, #60]	; 0x3c
   14634:	beq	14de0 <__assert_fail@plt+0x18dc>
   14638:	ldr	r0, [r7, #16]
   1463c:	bl	12e38 <gelf_getclass@plt>
   14640:	mov	r1, #0
   14644:	str	r0, [sp, #92]	; 0x5c
   14648:	ldr	r0, [sp, #76]	; 0x4c
   1464c:	bl	12f34 <elf_getdata@plt>
   14650:	cmp	r0, #0
   14654:	str	r0, [sp, #104]	; 0x68
   14658:	beq	14554 <__assert_fail@plt+0x1050>
   1465c:	mov	r9, #0
   14660:	str	r9, [sp, #136]	; 0x88
   14664:	mov	r8, r9
   14668:	str	r9, [sp, #132]	; 0x84
   1466c:	str	r9, [sp, #112]	; 0x70
   14670:	str	r9, [sp, #120]	; 0x78
   14674:	str	r9, [sp, #84]	; 0x54
   14678:	mov	r1, r9
   1467c:	ldr	r0, [r7, #16]
   14680:	bl	13300 <elf_nextscn@plt>
   14684:	subs	r9, r0, #0
   14688:	beq	14740 <__assert_fail@plt+0x123c>
   1468c:	add	r1, sp, #328	; 0x148
   14690:	bl	12cc4 <gelf_getshdr@plt>
   14694:	subs	r4, r0, #0
   14698:	beq	14678 <__assert_fail@plt+0x1174>
   1469c:	ldr	r3, [r4, #4]
   146a0:	cmn	r3, #-1879048191	; 0x90000001
   146a4:	beq	146e8 <__assert_fail@plt+0x11e4>
   146a8:	cmn	r3, #-1879048190	; 0x90000002
   146ac:	beq	14708 <__assert_fail@plt+0x1204>
   146b0:	cmn	r3, #-1879048189	; 0x90000003
   146b4:	beq	14724 <__assert_fail@plt+0x1220>
   146b8:	cmp	r3, #18
   146bc:	bne	14678 <__assert_fail@plt+0x1174>
   146c0:	ldr	r0, [sp, #76]	; 0x4c
   146c4:	ldr	r4, [r4, #40]	; 0x28
   146c8:	bl	133d8 <elf_ndxscn@plt>
   146cc:	cmp	r4, r0
   146d0:	bne	14678 <__assert_fail@plt+0x1174>
   146d4:	mov	r0, r9
   146d8:	mov	r1, #0
   146dc:	bl	12f34 <elf_getdata@plt>
   146e0:	str	r0, [sp, #112]	; 0x70
   146e4:	b	14678 <__assert_fail@plt+0x1174>
   146e8:	ldr	r0, [sp, #76]	; 0x4c
   146ec:	ldr	r5, [r4, #40]	; 0x28
   146f0:	bl	133d8 <elf_ndxscn@plt>
   146f4:	cmp	r5, r0
   146f8:	beq	14d6c <__assert_fail@plt+0x1868>
   146fc:	ldr	r3, [r4, #4]
   14700:	cmn	r3, #-1879048190	; 0x90000002
   14704:	bne	146b0 <__assert_fail@plt+0x11ac>
   14708:	mov	r0, r9
   1470c:	mov	r1, #0
   14710:	bl	12f34 <elf_getdata@plt>
   14714:	ldr	r4, [r4, #40]	; 0x28
   14718:	str	r4, [sp, #132]	; 0x84
   1471c:	mov	r8, r0
   14720:	b	14678 <__assert_fail@plt+0x1174>
   14724:	mov	r0, r9
   14728:	mov	r1, #0
   1472c:	bl	12f34 <elf_getdata@plt>
   14730:	ldr	r4, [r4, #40]	; 0x28
   14734:	str	r4, [sp, #136]	; 0x88
   14738:	str	r0, [sp, #120]	; 0x78
   1473c:	b	14678 <__assert_fail@plt+0x1174>
   14740:	ldr	r0, [r7, #16]
   14744:	add	r1, sp, #152	; 0x98
   14748:	bl	13498 <elf_getshdrstrndx@plt>
   1474c:	cmp	r0, #0
   14750:	blt	14e20 <__assert_fail@plt+0x191c>
   14754:	ldr	ip, [sp, #60]	; 0x3c
   14758:	ldr	r0, [r7, #16]
   1475c:	ldr	r1, [ip, #40]	; 0x28
   14760:	bl	133e4 <elf_getscn@plt>
   14764:	add	r1, sp, #264	; 0x108
   14768:	bl	12cc4 <gelf_getshdr@plt>
   1476c:	subs	fp, r0, #0
   14770:	beq	14e44 <__assert_fail@plt+0x1940>
   14774:	ldr	ip, [sp, #104]	; 0x68
   14778:	mov	r4, #5
   1477c:	ldr	r0, [ip, #12]
   14780:	ldr	ip, [sp, #92]	; 0x5c
   14784:	cmp	ip, #1
   14788:	movne	r1, #24
   1478c:	moveq	r1, #16
   14790:	bl	3b39c <__assert_fail@plt+0x27e98>
   14794:	movw	r1, #54040	; 0xd318
   14798:	str	r4, [sp]
   1479c:	movt	r1, #3
   147a0:	movw	r2, #54088	; 0xd348
   147a4:	movt	r2, #3
   147a8:	mov	r3, r0
   147ac:	str	r0, [sp, #88]	; 0x58
   147b0:	mov	r0, r9
   147b4:	bl	134a4 <dcngettext@plt>
   147b8:	mov	r6, r0
   147bc:	ldr	r0, [sp, #76]	; 0x4c
   147c0:	bl	133d8 <elf_ndxscn@plt>
   147c4:	ldr	ip, [sp, #60]	; 0x3c
   147c8:	ldr	r1, [sp, #152]	; 0x98
   147cc:	ldr	r2, [ip]
   147d0:	mov	r5, r0
   147d4:	ldr	r0, [r7, #16]
   147d8:	bl	12e44 <elf_strptr@plt>
   147dc:	ldr	ip, [sp, #88]	; 0x58
   147e0:	mov	r1, r6
   147e4:	mov	r2, r5
   147e8:	str	ip, [sp]
   147ec:	mov	r3, r0
   147f0:	mov	r0, #1
   147f4:	bl	13204 <__printf_chk@plt>
   147f8:	ldr	ip, [sp, #60]	; 0x3c
   147fc:	mov	r0, r9
   14800:	movw	r1, #54136	; 0xd378
   14804:	movw	r2, #54184	; 0xd3a8
   14808:	movt	r1, #3
   1480c:	ldr	r3, [ip, #44]	; 0x2c
   14810:	movt	r2, #3
   14814:	str	r4, [sp]
   14818:	bl	134a4 <dcngettext@plt>
   1481c:	ldr	ip, [sp, #60]	; 0x3c
   14820:	ldr	r2, [fp]
   14824:	ldr	r1, [sp, #152]	; 0x98
   14828:	ldr	r6, [ip, #44]	; 0x2c
   1482c:	ldr	r5, [ip, #40]	; 0x28
   14830:	mov	sl, r0
   14834:	ldr	r0, [r7, #16]
   14838:	bl	12e44 <elf_strptr@plt>
   1483c:	mov	r1, sl
   14840:	mov	r3, r5
   14844:	mov	r2, r6
   14848:	str	r0, [sp]
   1484c:	mov	r0, #1
   14850:	bl	13204 <__printf_chk@plt>
   14854:	ldr	ip, [sp, #92]	; 0x5c
   14858:	mov	r0, r9
   1485c:	mov	r2, r4
   14860:	cmp	ip, #1
   14864:	movweq	r1, #54232	; 0xd3d8
   14868:	movwne	r1, #54296	; 0xd418
   1486c:	movteq	r1, #3
   14870:	movtne	r1, #3
   14874:	bl	12d84 <dcgettext@plt>
   14878:	ldr	r9, [sp, #108]	; 0x6c
   1487c:	ldr	r1, [r9]
   14880:	bl	12c58 <fputs_unlocked@plt>
   14884:	ldr	ip, [sp, #88]	; 0x58
   14888:	cmp	ip, #0
   1488c:	beq	14554 <__assert_fail@plt+0x1050>
   14890:	movw	r9, #50660	; 0xc5e4
   14894:	movt	r9, #3
   14898:	str	r9, [sp, #96]	; 0x60
   1489c:	movw	r9, #53856	; 0xd260
   148a0:	movt	r9, #3
   148a4:	str	r9, [sp, #128]	; 0x80
   148a8:	mov	r9, #0
   148ac:	movw	ip, #53860	; 0xd264
   148b0:	str	r8, [sp, #40]	; 0x28
   148b4:	movt	ip, #3
   148b8:	mov	sl, r9
   148bc:	str	ip, [sp, #124]	; 0x7c
   148c0:	b	14900 <__assert_fail@plt+0x13fc>
   148c4:	str	r8, [sp, #40]	; 0x28
   148c8:	ldr	ip, [sp, #108]	; 0x6c
   148cc:	ldr	r0, [ip]
   148d0:	ldr	r2, [r0, #24]
   148d4:	ldr	r3, [r0, #20]
   148d8:	cmp	r3, r2
   148dc:	addcc	r2, r3, #1
   148e0:	strcc	r2, [r0, #20]
   148e4:	movcc	r2, #10
   148e8:	strbcc	r2, [r3]
   148ec:	bcs	14e74 <__assert_fail@plt+0x1970>
   148f0:	ldr	r8, [sp, #88]	; 0x58
   148f4:	add	sl, sl, #1
   148f8:	cmp	sl, r8
   148fc:	beq	14554 <__assert_fail@plt+0x1050>
   14900:	add	ip, sp, #156	; 0x9c
   14904:	ldr	r0, [sp, #104]	; 0x68
   14908:	str	ip, [sp]
   1490c:	mov	r2, sl
   14910:	ldr	r1, [sp, #112]	; 0x70
   14914:	add	r3, sp, #176	; 0xb0
   14918:	bl	1342c <gelf_getsymshndx@plt>
   1491c:	subs	r4, r0, #0
   14920:	beq	148f0 <__assert_fail@plt+0x13ec>
   14924:	ldrh	r3, [r4, #6]
   14928:	movw	r2, #65535	; 0xffff
   1492c:	movw	r1, #54368	; 0xd460
   14930:	mov	r0, #0
   14934:	cmp	r3, r2
   14938:	movt	r1, #3
   1493c:	mov	r2, #5
   14940:	strne	r3, [sp, #156]	; 0x9c
   14944:	bl	12d84 <dcgettext@plt>
   14948:	ldrd	r8, [r4, #8]
   1494c:	ldrb	r1, [r4, #4]
   14950:	add	r2, sp, #396	; 0x18c
   14954:	mov	r3, #64	; 0x40
   14958:	mov	r5, #0
   1495c:	strd	r8, [sp, #48]	; 0x30
   14960:	and	r1, r1, #15
   14964:	ldrd	r8, [r4, #16]
   14968:	strd	r8, [sp, #64]	; 0x40
   1496c:	mov	fp, r0
   14970:	mov	r0, r7
   14974:	bl	39214 <__assert_fail@plt+0x25d10>
   14978:	ldr	ip, [sp, #92]	; 0x5c
   1497c:	ldrb	r1, [r4, #4]
   14980:	add	r2, sp, #460	; 0x1cc
   14984:	cmp	ip, #1
   14988:	mov	r3, #64	; 0x40
   1498c:	lsr	r1, r1, #4
   14990:	movne	ip, #16
   14994:	moveq	ip, #8
   14998:	str	ip, [sp, #80]	; 0x50
   1499c:	mov	r9, r0
   149a0:	mov	r0, r7
   149a4:	bl	39710 <__assert_fail@plt+0x2620c>
   149a8:	ldr	lr, [sp, #100]	; 0x64
   149ac:	ldrb	ip, [r4, #5]
   149b0:	ldrh	r1, [r4, #6]
   149b4:	ldr	r3, [lr, #44]	; 0x2c
   149b8:	and	ip, ip, #3
   149bc:	ldr	lr, [sp, #96]	; 0x60
   149c0:	ldr	r2, [sp, #156]	; 0x9c
   149c4:	str	r3, [sp, #8]
   149c8:	add	r3, sp, #524	; 0x20c
   149cc:	ldr	ip, [lr, ip, lsl #2]
   149d0:	str	ip, [sp, #44]	; 0x2c
   149d4:	mov	r8, r0
   149d8:	mov	r0, #64	; 0x40
   149dc:	stm	sp, {r0, r5}
   149e0:	mov	r0, r7
   149e4:	bl	394d8 <__assert_fail@plt+0x25fd4>
   149e8:	ldr	r2, [r4]
   149ec:	mov	r6, r0
   149f0:	ldr	r0, [sp, #60]	; 0x3c
   149f4:	ldr	r1, [r0, #40]	; 0x28
   149f8:	ldr	r0, [r7, #16]
   149fc:	bl	12e44 <elf_strptr@plt>
   14a00:	ldrd	r2, [sp, #48]	; 0x30
   14a04:	ldr	ip, [sp, #44]	; 0x2c
   14a08:	mov	r1, fp
   14a0c:	str	r8, [sp, #20]
   14a10:	strd	r2, [sp]
   14a14:	ldrd	r2, [sp, #64]	; 0x40
   14a18:	str	ip, [sp, #24]
   14a1c:	str	r9, [sp, #16]
   14a20:	strd	r2, [sp, #8]
   14a24:	mov	r2, sl
   14a28:	ldr	r3, [sp, #80]	; 0x50
   14a2c:	str	r6, [sp, #28]
   14a30:	str	r0, [sp, #32]
   14a34:	mov	r0, #1
   14a38:	bl	13204 <__printf_chk@plt>
   14a3c:	ldr	r8, [sp, #84]	; 0x54
   14a40:	cmp	r8, r5
   14a44:	beq	148c8 <__assert_fail@plt+0x13c4>
   14a48:	mov	r0, r8
   14a4c:	mov	r1, sl
   14a50:	add	r2, sp, #150	; 0x96
   14a54:	bl	12d78 <gelf_getversym@plt>
   14a58:	subs	r6, r0, #0
   14a5c:	beq	148c8 <__assert_fail@plt+0x13c4>
   14a60:	ldrh	r3, [r6]
   14a64:	cmp	r3, #1
   14a68:	bls	148c8 <__assert_fail@plt+0x13c4>
   14a6c:	ldr	r1, [sp, #156]	; 0x9c
   14a70:	subs	ip, r1, r5
   14a74:	movne	ip, #1
   14a78:	cmp	r1, #65280	; 0xff00
   14a7c:	str	ip, [sp, #64]	; 0x40
   14a80:	bcc	14b88 <__assert_fail@plt+0x1684>
   14a84:	ldrh	r2, [r4, #6]
   14a88:	movw	r3, #65535	; 0xffff
   14a8c:	cmp	r2, r3
   14a90:	beq	14b88 <__assert_fail@plt+0x1684>
   14a94:	eor	r3, ip, #1
   14a98:	str	r5, [sp, #72]	; 0x48
   14a9c:	cmp	r3, #0
   14aa0:	bne	14bcc <__assert_fail@plt+0x16c8>
   14aa4:	ldrh	r2, [r6]
   14aa8:	movw	r3, #32769	; 0x8001
   14aac:	cmp	r2, r3
   14ab0:	beq	148c8 <__assert_fail@plt+0x13c4>
   14ab4:	add	ip, sp, #328	; 0x148
   14ab8:	ldr	r0, [sp, #120]	; 0x78
   14abc:	mov	r1, #0
   14ac0:	str	ip, [sp, #48]	; 0x30
   14ac4:	mov	r2, ip
   14ac8:	bl	1327c <gelf_getverdef@plt>
   14acc:	cmp	r0, #0
   14ad0:	beq	148c8 <__assert_fail@plt+0x13c4>
   14ad4:	ldrh	r3, [r6]
   14ad8:	mov	r4, #0
   14adc:	ldrh	r2, [r0, #4]
   14ae0:	ubfx	r3, r3, #0, #15
   14ae4:	cmp	r2, r3
   14ae8:	beq	14b34 <__assert_fail@plt+0x1630>
   14aec:	ldr	r8, [sp, #40]	; 0x28
   14af0:	ldr	r5, [sp, #48]	; 0x30
   14af4:	ldr	r3, [r0, #16]
   14af8:	cmp	r3, #0
   14afc:	beq	148c4 <__assert_fail@plt+0x13c0>
   14b00:	add	r4, r4, r3
   14b04:	ldr	r0, [sp, #120]	; 0x78
   14b08:	mov	r2, r5
   14b0c:	mov	r1, r4
   14b10:	bl	1327c <gelf_getverdef@plt>
   14b14:	cmp	r0, #0
   14b18:	beq	148c4 <__assert_fail@plt+0x13c0>
   14b1c:	ldrh	r3, [r6]
   14b20:	ldrh	ip, [r0, #4]
   14b24:	ubfx	r3, r3, #0, #15
   14b28:	cmp	ip, r3
   14b2c:	bne	14af4 <__assert_fail@plt+0x15f0>
   14b30:	str	r8, [sp, #40]	; 0x28
   14b34:	ldr	r1, [r0, #12]
   14b38:	add	r2, sp, #160	; 0xa0
   14b3c:	ldr	r0, [sp, #120]	; 0x78
   14b40:	add	r1, r4, r1
   14b44:	bl	130d8 <gelf_getverdaux@plt>
   14b48:	cmp	r0, #0
   14b4c:	beq	148c8 <__assert_fail@plt+0x13c4>
   14b50:	ldrsh	r4, [r6]
   14b54:	ldr	r9, [sp, #128]	; 0x80
   14b58:	cmp	r4, #0
   14b5c:	ldr	r1, [sp, #136]	; 0x88
   14b60:	ldr	r2, [r0]
   14b64:	ldr	r0, [r7, #16]
   14b68:	ldr	r8, [sp, #124]	; 0x7c
   14b6c:	movlt	r8, r9
   14b70:	bl	12e44 <elf_strptr@plt>
   14b74:	mov	r1, r8
   14b78:	mov	r2, r0
   14b7c:	mov	r0, #1
   14b80:	bl	13204 <__printf_chk@plt>
   14b84:	b	148c8 <__assert_fail@plt+0x13c4>
   14b88:	ldr	r0, [r7, #16]
   14b8c:	add	r3, sp, #328	; 0x148
   14b90:	str	r3, [sp, #48]	; 0x30
   14b94:	bl	133e4 <elf_getscn@plt>
   14b98:	ldr	r1, [sp, #48]	; 0x30
   14b9c:	bl	12cc4 <gelf_getshdr@plt>
   14ba0:	cmp	r0, #0
   14ba4:	beq	14bb4 <__assert_fail@plt+0x16b0>
   14ba8:	ldr	r3, [r0, #4]
   14bac:	cmp	r3, #8
   14bb0:	beq	14d3c <__assert_fail@plt+0x1838>
   14bb4:	ldr	r8, [sp, #64]	; 0x40
   14bb8:	mov	r9, #0
   14bbc:	str	r9, [sp, #72]	; 0x48
   14bc0:	eor	r3, r8, #1
   14bc4:	cmp	r3, #0
   14bc8:	beq	14aa4 <__assert_fail@plt+0x15a0>
   14bcc:	add	r3, sp, #328	; 0x148
   14bd0:	str	r3, [sp, #48]	; 0x30
   14bd4:	ldr	r0, [sp, #40]	; 0x28
   14bd8:	mov	r1, #0
   14bdc:	ldr	r2, [sp, #48]	; 0x30
   14be0:	bl	12d90 <gelf_getverneed@plt>
   14be4:	subs	r4, r0, #0
   14be8:	beq	14c98 <__assert_fail@plt+0x1794>
   14bec:	ldr	r8, [sp, #40]	; 0x28
   14bf0:	mov	r5, #0
   14bf4:	ldr	r3, [r4, #8]
   14bf8:	mov	r0, r8
   14bfc:	add	r2, sp, #160	; 0xa0
   14c00:	add	r9, r5, r3
   14c04:	mov	r1, r9
   14c08:	bl	12ca0 <gelf_getvernaux@plt>
   14c0c:	subs	fp, r0, #0
   14c10:	beq	14c6c <__assert_fail@plt+0x1768>
   14c14:	ldrh	r1, [fp, #6]
   14c18:	ldrh	r2, [r6]
   14c1c:	cmp	r1, r2
   14c20:	beq	14d48 <__assert_fail@plt+0x1844>
   14c24:	ldr	r2, [fp, #12]
   14c28:	cmp	r2, #0
   14c2c:	bne	14c50 <__assert_fail@plt+0x174c>
   14c30:	b	14c70 <__assert_fail@plt+0x176c>
   14c34:	ldrh	r2, [r0, #6]
   14c38:	ldrh	r3, [r6]
   14c3c:	cmp	r2, r3
   14c40:	beq	14cd8 <__assert_fail@plt+0x17d4>
   14c44:	ldr	r2, [r0, #12]
   14c48:	cmp	r2, #0
   14c4c:	beq	14d0c <__assert_fail@plt+0x1808>
   14c50:	add	r9, r9, r2
   14c54:	mov	r0, r8
   14c58:	add	r2, sp, #160	; 0xa0
   14c5c:	mov	r1, r9
   14c60:	bl	12ca0 <gelf_getvernaux@plt>
   14c64:	cmp	r0, #0
   14c68:	bne	14c34 <__assert_fail@plt+0x1730>
   14c6c:	mov	fp, #0
   14c70:	ldr	r3, [r4, #12]
   14c74:	cmp	r3, #0
   14c78:	bne	14d1c <__assert_fail@plt+0x1818>
   14c7c:	cmp	fp, #0
   14c80:	str	r8, [sp, #40]	; 0x28
   14c84:	beq	14c98 <__assert_fail@plt+0x1794>
   14c88:	ldrh	r2, [fp, #6]
   14c8c:	ldrh	r3, [r6]
   14c90:	cmp	r2, r3
   14c94:	beq	14ce0 <__assert_fail@plt+0x17dc>
   14c98:	ldr	r8, [sp, #72]	; 0x48
   14c9c:	cmp	r8, #0
   14ca0:	bne	14aa4 <__assert_fail@plt+0x15a0>
   14ca4:	mov	r2, #5
   14ca8:	movw	r1, #54420	; 0xd494
   14cac:	mov	r0, r8
   14cb0:	movt	r1, #3
   14cb4:	bl	12d84 <dcgettext@plt>
   14cb8:	mov	r2, r0
   14cbc:	ldr	r0, [sp, #72]	; 0x48
   14cc0:	mov	r1, r0
   14cc4:	bl	12f70 <error@plt>
   14cc8:	ldr	r9, [sp, #64]	; 0x40
   14ccc:	cmp	r9, #0
   14cd0:	beq	148c8 <__assert_fail@plt+0x13c4>
   14cd4:	b	14aa4 <__assert_fail@plt+0x15a0>
   14cd8:	mov	fp, r0
   14cdc:	str	r8, [sp, #40]	; 0x28
   14ce0:	ldr	r1, [sp, #132]	; 0x84
   14ce4:	ldr	r2, [fp, #8]
   14ce8:	ldr	r0, [r7, #16]
   14cec:	bl	12e44 <elf_strptr@plt>
   14cf0:	ldrh	r3, [fp, #6]
   14cf4:	movw	r1, #54408	; 0xd488
   14cf8:	movt	r1, #3
   14cfc:	mov	r2, r0
   14d00:	mov	r0, #1
   14d04:	bl	13204 <__printf_chk@plt>
   14d08:	b	148c8 <__assert_fail@plt+0x13c4>
   14d0c:	ldr	r3, [r4, #12]
   14d10:	mov	fp, r0
   14d14:	cmp	r3, #0
   14d18:	beq	14c7c <__assert_fail@plt+0x1778>
   14d1c:	add	r5, r5, r3
   14d20:	mov	r0, r8
   14d24:	ldr	r2, [sp, #48]	; 0x30
   14d28:	mov	r1, r5
   14d2c:	bl	12d90 <gelf_getverneed@plt>
   14d30:	subs	r4, r0, #0
   14d34:	bne	14bf4 <__assert_fail@plt+0x16f0>
   14d38:	b	14c7c <__assert_fail@plt+0x1778>
   14d3c:	mov	ip, #1
   14d40:	str	ip, [sp, #72]	; 0x48
   14d44:	b	14bd4 <__assert_fail@plt+0x16d0>
   14d48:	str	r8, [sp, #40]	; 0x28
   14d4c:	b	14ce0 <__assert_fail@plt+0x17dc>
   14d50:	ldr	ip, [sp, #140]	; 0x8c
   14d54:	ldr	r2, [sp, #588]	; 0x24c
   14d58:	ldr	r3, [ip]
   14d5c:	cmp	r2, r3
   14d60:	bne	14e80 <__assert_fail@plt+0x197c>
   14d64:	add	sp, sp, #596	; 0x254
   14d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d6c:	mov	r0, r9
   14d70:	mov	r1, #0
   14d74:	bl	12f34 <elf_getdata@plt>
   14d78:	str	r0, [sp, #84]	; 0x54
   14d7c:	b	14678 <__assert_fail@plt+0x1174>
   14d80:	mov	r2, #5
   14d84:	movw	r1, #53916	; 0xd29c
   14d88:	mov	r0, #0
   14d8c:	movt	r1, #3
   14d90:	bl	12d84 <dcgettext@plt>
   14d94:	mov	r4, r0
   14d98:	ldr	r0, [sp, #76]	; 0x4c
   14d9c:	bl	133d8 <elf_ndxscn@plt>
   14da0:	mov	r2, r4
   14da4:	movw	r1, #53944	; 0xd2b8
   14da8:	movt	r1, #3
   14dac:	mov	r3, r0
   14db0:	mov	r0, #1
   14db4:	bl	13204 <__printf_chk@plt>
   14db8:	b	14620 <__assert_fail@plt+0x111c>
   14dbc:	mov	r2, #5
   14dc0:	movw	r1, #53868	; 0xd26c
   14dc4:	mov	r0, #0
   14dc8:	movt	r1, #3
   14dcc:	bl	12d84 <dcgettext@plt>
   14dd0:	mov	r1, #0
   14dd4:	mov	r2, r0
   14dd8:	mov	r0, #1
   14ddc:	bl	12f70 <error@plt>
   14de0:	mov	r2, #5
   14de4:	movw	r1, #53964	; 0xd2cc
   14de8:	movt	r1, #3
   14dec:	bl	12d84 <dcgettext@plt>
   14df0:	mov	r5, r0
   14df4:	ldr	r0, [sp, #76]	; 0x4c
   14df8:	bl	133d8 <elf_ndxscn@plt>
   14dfc:	mov	r4, r0
   14e00:	mvn	r0, #0
   14e04:	bl	130a8 <elf_errmsg@plt>
   14e08:	mov	r2, r5
   14e0c:	mov	r3, r4
   14e10:	mov	r1, r8
   14e14:	str	r0, [sp]
   14e18:	mov	r0, #1
   14e1c:	bl	12f70 <error@plt>
   14e20:	mov	r2, #5
   14e24:	movw	r1, #53868	; 0xd26c
   14e28:	mov	r0, r9
   14e2c:	movt	r1, #3
   14e30:	bl	12d84 <dcgettext@plt>
   14e34:	mov	r1, r9
   14e38:	mov	r2, r0
   14e3c:	mov	r0, #1
   14e40:	bl	12f70 <error@plt>
   14e44:	mov	r2, #5
   14e48:	movw	r1, #54000	; 0xd2f0
   14e4c:	movt	r1, #3
   14e50:	bl	12d84 <dcgettext@plt>
   14e54:	mov	r4, r0
   14e58:	ldr	r0, [sp, #76]	; 0x4c
   14e5c:	bl	133d8 <elf_ndxscn@plt>
   14e60:	mov	r2, r4
   14e64:	mov	r1, r9
   14e68:	mov	r3, r0
   14e6c:	mov	r0, #1
   14e70:	bl	12f70 <error@plt>
   14e74:	mov	r1, #10
   14e78:	bl	132dc <__overflow@plt>
   14e7c:	b	148f0 <__assert_fail@plt+0x13ec>
   14e80:	bl	12dc0 <__stack_chk_fail@plt>
   14e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e88:	movw	fp, #37688	; 0x9338
   14e8c:	movt	fp, #5
   14e90:	sub	sp, sp, #84	; 0x54
   14e94:	mov	r6, r1
   14e98:	mov	r9, r2
   14e9c:	ldr	r3, [fp]
   14ea0:	mov	r1, sp
   14ea4:	mov	r5, r0
   14ea8:	str	r3, [sp, #76]	; 0x4c
   14eac:	bl	13498 <elf_getshdrstrndx@plt>
   14eb0:	cmp	r0, #0
   14eb4:	blt	14ff0 <__assert_fail@plt+0x1aec>
   14eb8:	cmp	r6, #0
   14ebc:	movne	sl, #0
   14ec0:	beq	14f78 <__assert_fail@plt+0x1a74>
   14ec4:	mov	r2, #0
   14ec8:	ldr	r0, [r6, #4]
   14ecc:	add	r1, sp, #4
   14ed0:	str	sl, [sp, #4]
   14ed4:	bl	13084 <strtoul@plt>
   14ed8:	ldr	r2, [sp, #4]
   14edc:	ldr	ip, [r6, #4]
   14ee0:	cmp	ip, r2
   14ee4:	mov	r4, r0
   14ee8:	beq	14ef8 <__assert_fail@plt+0x19f4>
   14eec:	ldrb	r2, [r2]
   14ef0:	cmp	r2, #0
   14ef4:	beq	14f90 <__assert_fail@plt+0x1a8c>
   14ef8:	mov	r8, #0
   14efc:	mov	r4, r8
   14f00:	mov	r1, r4
   14f04:	mov	r0, r5
   14f08:	bl	13300 <elf_nextscn@plt>
   14f0c:	subs	r4, r0, #0
   14f10:	beq	14f64 <__assert_fail@plt+0x1a60>
   14f14:	add	r1, sp, #8
   14f18:	bl	12cc4 <gelf_getshdr@plt>
   14f1c:	cmp	r0, #0
   14f20:	beq	14f00 <__assert_fail@plt+0x19fc>
   14f24:	mov	r0, r5
   14f28:	ldr	r1, [sp]
   14f2c:	ldr	r2, [sp, #8]
   14f30:	bl	12e44 <elf_strptr@plt>
   14f34:	subs	r7, r0, #0
   14f38:	beq	14f00 <__assert_fail@plt+0x19fc>
   14f3c:	ldr	r1, [r6, #4]
   14f40:	bl	12cd0 <strcmp@plt>
   14f44:	cmp	r0, #0
   14f48:	bne	14f00 <__assert_fail@plt+0x19fc>
   14f4c:	mov	r2, r7
   14f50:	mov	r0, r4
   14f54:	add	r1, sp, #8
   14f58:	mov	r8, #1
   14f5c:	blx	r9
   14f60:	b	14f00 <__assert_fail@plt+0x19fc>
   14f64:	cmp	r8, #0
   14f68:	beq	15048 <__assert_fail@plt+0x1b44>
   14f6c:	ldr	r6, [r6]
   14f70:	cmp	r6, #0
   14f74:	bne	14ec4 <__assert_fail@plt+0x19c0>
   14f78:	ldr	r2, [sp, #76]	; 0x4c
   14f7c:	ldr	r3, [fp]
   14f80:	cmp	r2, r3
   14f84:	bne	15044 <__assert_fail@plt+0x1b40>
   14f88:	add	sp, sp, #84	; 0x54
   14f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f90:	mov	r0, r5
   14f94:	mov	r1, r4
   14f98:	bl	133e4 <elf_getscn@plt>
   14f9c:	subs	r7, r0, #0
   14fa0:	beq	14fc8 <__assert_fail@plt+0x1ac4>
   14fa4:	add	r1, sp, #8
   14fa8:	bl	12cc4 <gelf_getshdr@plt>
   14fac:	subs	r4, r0, #0
   14fb0:	beq	15014 <__assert_fail@plt+0x1b10>
   14fb4:	mov	r0, r5
   14fb8:	ldr	r1, [sp]
   14fbc:	ldr	r2, [sp, #8]
   14fc0:	bl	12e44 <elf_strptr@plt>
   14fc4:	b	14f6c <__assert_fail@plt+0x1a68>
   14fc8:	mov	r2, #5
   14fcc:	movw	r1, #54440	; 0xd4a8
   14fd0:	movt	r1, #3
   14fd4:	bl	12d84 <dcgettext@plt>
   14fd8:	mov	r1, r7
   14fdc:	mov	r3, r4
   14fe0:	mov	r2, r0
   14fe4:	mov	r0, r7
   14fe8:	bl	12f70 <error@plt>
   14fec:	b	14f6c <__assert_fail@plt+0x1a68>
   14ff0:	mov	r2, #5
   14ff4:	movw	r1, #53868	; 0xd26c
   14ff8:	mov	r0, #0
   14ffc:	movt	r1, #3
   15000:	bl	12d84 <dcgettext@plt>
   15004:	mov	r1, #0
   15008:	mov	r2, r0
   1500c:	mov	r0, #1
   15010:	bl	12f70 <error@plt>
   15014:	mov	r2, #5
   15018:	movw	r1, #54472	; 0xd4c8
   1501c:	movt	r1, #3
   15020:	bl	12d84 <dcgettext@plt>
   15024:	mov	r5, r0
   15028:	mvn	r0, #0
   1502c:	bl	130a8 <elf_errmsg@plt>
   15030:	mov	r2, r5
   15034:	mov	r1, r4
   15038:	mov	r3, r0
   1503c:	mov	r0, #1
   15040:	bl	12f70 <error@plt>
   15044:	bl	12dc0 <__stack_chk_fail@plt>
   15048:	ldrb	r3, [r6, #8]
   1504c:	cmp	r3, #0
   15050:	bne	14f6c <__assert_fail@plt+0x1a68>
   15054:	mov	r2, #5
   15058:	movw	r1, #54504	; 0xd4e8
   1505c:	movt	r1, #3
   15060:	bl	12d84 <dcgettext@plt>
   15064:	mov	r1, r8
   15068:	ldr	r3, [r6, #4]
   1506c:	mov	r2, r0
   15070:	mov	r0, r8
   15074:	bl	12f70 <error@plt>
   15078:	b	14f6c <__assert_fail@plt+0x1a68>
   1507c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15080:	movw	r9, #37688	; 0x9338
   15084:	movt	r9, #5
   15088:	sub	sp, sp, #32
   1508c:	add	r6, sp, #32
   15090:	mov	ip, #0
   15094:	ldr	lr, [r9]
   15098:	mov	r3, ip
   1509c:	mov	r7, r0
   150a0:	mov	r8, r1
   150a4:	mov	sl, r2
   150a8:	str	ip, [r6, #-8]!
   150ac:	str	lr, [sp, #28]
   150b0:	mov	r5, ip
   150b4:	b	15100 <__assert_fail@plt+0x1bfc>
   150b8:	ldr	r0, [sp, #24]
   150bc:	mov	r1, r4
   150c0:	str	r4, [sp]
   150c4:	add	r2, sp, #23
   150c8:	str	r8, [sp, #4]
   150cc:	mov	r3, r4
   150d0:	str	r4, [sp, #8]
   150d4:	str	r4, [sp, #12]
   150d8:	bl	12e98 <dwarf_cu_info@plt>
   150dc:	cmp	r0, #0
   150e0:	bne	15128 <__assert_fail@plt+0x1c24>
   150e4:	ldrb	r3, [sp, #23]
   150e8:	sub	r2, r3, #5
   150ec:	cmp	r2, #1
   150f0:	bhi	1512c <__assert_fail@plt+0x1c28>
   150f4:	cmp	r3, #5
   150f8:	ldr	r3, [sp, #24]
   150fc:	beq	15144 <__assert_fail@plt+0x1c40>
   15100:	mov	r1, r3
   15104:	str	r5, [sp]
   15108:	str	r5, [sp, #4]
   1510c:	mov	r0, r7
   15110:	str	r5, [sp, #8]
   15114:	mov	r2, r6
   15118:	mov	r3, #0
   1511c:	bl	12d0c <dwarf_get_units@plt>
   15120:	subs	r4, r0, #0
   15124:	beq	150b8 <__assert_fail@plt+0x1bb4>
   15128:	mov	r0, #0
   1512c:	ldr	r2, [sp, #28]
   15130:	ldr	r3, [r9]
   15134:	cmp	r2, r3
   15138:	bne	15150 <__assert_fail@plt+0x1c4c>
   1513c:	add	sp, sp, #32
   15140:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15144:	mov	r0, #1
   15148:	str	r3, [sl]
   1514c:	b	1512c <__assert_fail@plt+0x1c28>
   15150:	bl	12dc0 <__stack_chk_fail@plt>
   15154:	and	r3, r0, #15
   15158:	push	{r4, lr}
   1515c:	mov	r4, r0
   15160:	cmp	r3, #12
   15164:	ldrls	pc, [pc, r3, lsl #2]
   15168:	b	15308 <__assert_fail@plt+0x1e04>
   1516c:	andeq	r5, r1, r8, asr #3
   15170:	strdeq	r5, [r1], -r0
   15174:	andeq	r5, r1, r8, lsl r2
   15178:	andeq	r5, r1, r0, asr #4
   1517c:	andeq	r5, r1, r8, ror #4
   15180:	andeq	r5, r1, r8, lsl #6
   15184:	andeq	r5, r1, r8, lsl #6
   15188:	andeq	r5, r1, r8, lsl #6
   1518c:	andeq	r5, r1, r8, lsl #6
   15190:	muleq	r1, r0, r2
   15194:			; <UNDEFINED> instruction: 0x000152b8
   15198:	andeq	r5, r1, r0, ror #5
   1519c:	andeq	r5, r1, r0, lsr #3
   151a0:	movw	r3, #37704	; 0x9348
   151a4:	movt	r3, #5
   151a8:	mov	r1, #1
   151ac:	mov	r2, #6
   151b0:	ldr	r3, [r3]
   151b4:	movw	r0, #54600	; 0xd548
   151b8:	movt	r0, #3
   151bc:	bl	12ee0 <fwrite@plt>
   151c0:	bic	r0, r4, #15
   151c4:	pop	{r4, pc}
   151c8:	movw	r3, #37704	; 0x9348
   151cc:	movt	r3, #5
   151d0:	mov	r1, #1
   151d4:	mov	r2, #6
   151d8:	ldr	r3, [r3]
   151dc:	movw	r0, #54536	; 0xd508
   151e0:	movt	r0, #3
   151e4:	bl	12ee0 <fwrite@plt>
   151e8:	bic	r0, r4, #15
   151ec:	pop	{r4, pc}
   151f0:	movw	r3, #37704	; 0x9348
   151f4:	movt	r3, #5
   151f8:	mov	r1, #1
   151fc:	mov	r2, #7
   15200:	ldr	r3, [r3]
   15204:	movw	r0, #54544	; 0xd510
   15208:	movt	r0, #3
   1520c:	bl	12ee0 <fwrite@plt>
   15210:	bic	r0, r4, #15
   15214:	pop	{r4, pc}
   15218:	movw	r3, #37704	; 0x9348
   1521c:	movt	r3, #5
   15220:	mov	r1, #1
   15224:	mov	r2, #6
   15228:	ldr	r3, [r3]
   1522c:	movw	r0, #54552	; 0xd518
   15230:	movt	r0, #3
   15234:	bl	12ee0 <fwrite@plt>
   15238:	bic	r0, r4, #15
   1523c:	pop	{r4, pc}
   15240:	movw	r3, #37704	; 0x9348
   15244:	movt	r3, #5
   15248:	mov	r1, #1
   1524c:	mov	r2, #6
   15250:	ldr	r3, [r3]
   15254:	movw	r0, #54560	; 0xd520
   15258:	movt	r0, #3
   1525c:	bl	12ee0 <fwrite@plt>
   15260:	bic	r0, r4, #15
   15264:	pop	{r4, pc}
   15268:	movw	r3, #37704	; 0x9348
   1526c:	movt	r3, #5
   15270:	mov	r1, #1
   15274:	mov	r2, #6
   15278:	ldr	r3, [r3]
   1527c:	movw	r0, #54568	; 0xd528
   15280:	movt	r0, #3
   15284:	bl	12ee0 <fwrite@plt>
   15288:	bic	r0, r4, #15
   1528c:	pop	{r4, pc}
   15290:	movw	r3, #37704	; 0x9348
   15294:	movt	r3, #5
   15298:	mov	r1, #1
   1529c:	mov	r2, #7
   152a0:	ldr	r3, [r3]
   152a4:	movw	r0, #54576	; 0xd530
   152a8:	movt	r0, #3
   152ac:	bl	12ee0 <fwrite@plt>
   152b0:	bic	r0, r4, #15
   152b4:	pop	{r4, pc}
   152b8:	movw	r3, #37704	; 0x9348
   152bc:	movt	r3, #5
   152c0:	mov	r1, #1
   152c4:	mov	r2, #6
   152c8:	ldr	r3, [r3]
   152cc:	movw	r0, #54584	; 0xd538
   152d0:	movt	r0, #3
   152d4:	bl	12ee0 <fwrite@plt>
   152d8:	bic	r0, r4, #15
   152dc:	pop	{r4, pc}
   152e0:	movw	r3, #37704	; 0x9348
   152e4:	movt	r3, #5
   152e8:	mov	r1, #1
   152ec:	mov	r2, #6
   152f0:	ldr	r3, [r3]
   152f4:	movw	r0, #54592	; 0xd540
   152f8:	movt	r0, #3
   152fc:	bl	12ee0 <fwrite@plt>
   15300:	bic	r0, r4, #15
   15304:	pop	{r4, pc}
   15308:	pop	{r4, pc}
   1530c:	push	{r4, r5, r6, lr}
   15310:	mov	r2, r0
   15314:	mov	r5, r1
   15318:	mov	r0, #1
   1531c:	movw	r1, #54608	; 0xd550
   15320:	movt	r1, #3
   15324:	bl	13204 <__printf_chk@plt>
   15328:	cmp	r5, #255	; 0xff
   1532c:	beq	15430 <__assert_fail@plt+0x1f2c>
   15330:	mov	r0, r5
   15334:	bl	15154 <__assert_fail@plt+0x1c50>
   15338:	ands	r6, r0, #112	; 0x70
   1533c:	mov	r4, r0
   15340:	beq	153b8 <__assert_fail@plt+0x1eb4>
   15344:	cmp	r5, r0
   15348:	beq	15378 <__assert_fail@plt+0x1e74>
   1534c:	movw	r3, #37704	; 0x9348
   15350:	movt	r3, #5
   15354:	ldr	r0, [r3]
   15358:	ldr	r3, [r0, #20]
   1535c:	ldr	r2, [r0, #24]
   15360:	cmp	r3, r2
   15364:	addcc	r1, r3, #1
   15368:	strcc	r1, [r0, #20]
   1536c:	movcc	r2, #32
   15370:	strbcc	r2, [r3]
   15374:	bcs	154ac <__assert_fail@plt+0x1fa8>
   15378:	cmp	r6, #48	; 0x30
   1537c:	beq	15440 <__assert_fail@plt+0x1f3c>
   15380:	bhi	153fc <__assert_fail@plt+0x1ef8>
   15384:	cmp	r6, #16
   15388:	beq	15464 <__assert_fail@plt+0x1f60>
   1538c:	cmp	r6, #32
   15390:	bne	153b8 <__assert_fail@plt+0x1eb4>
   15394:	movw	r3, #37704	; 0x9348
   15398:	movt	r3, #5
   1539c:	movw	r0, #54628	; 0xd564
   153a0:	mov	r1, #1
   153a4:	ldr	r3, [r3]
   153a8:	movt	r0, #3
   153ac:	mov	r2, #7
   153b0:	bl	12ee0 <fwrite@plt>
   153b4:	bic	r4, r4, #112	; 0x70
   153b8:	cmp	r4, #0
   153bc:	beq	153ec <__assert_fail@plt+0x1ee8>
   153c0:	movw	r3, #11956	; 0x2eb4
   153c4:	cmp	r4, r5
   153c8:	movt	r3, #4
   153cc:	movw	r2, #15800	; 0x3db8
   153d0:	movw	r1, #54660	; 0xd584
   153d4:	movt	r2, #4
   153d8:	mov	r0, #1
   153dc:	movne	r2, r3
   153e0:	movt	r1, #3
   153e4:	mov	r3, r4
   153e8:	bl	13204 <__printf_chk@plt>
   153ec:	movw	r0, #256	; 0x100
   153f0:	movt	r0, #4
   153f4:	pop	{r4, r5, r6, lr}
   153f8:	b	12fdc <puts@plt>
   153fc:	cmp	r6, #64	; 0x40
   15400:	beq	15488 <__assert_fail@plt+0x1f84>
   15404:	cmp	r6, #80	; 0x50
   15408:	bne	153b8 <__assert_fail@plt+0x1eb4>
   1540c:	movw	r3, #37704	; 0x9348
   15410:	movt	r3, #5
   15414:	movw	r0, #54652	; 0xd57c
   15418:	mov	r1, #1
   1541c:	ldr	r3, [r3]
   15420:	mov	r2, #7
   15424:	movt	r0, #3
   15428:	bl	12ee0 <fwrite@plt>
   1542c:	b	153b4 <__assert_fail@plt+0x1eb0>
   15430:	movw	r0, #54612	; 0xd554
   15434:	movt	r0, #3
   15438:	pop	{r4, r5, r6, lr}
   1543c:	b	12fdc <puts@plt>
   15440:	movw	r3, #37704	; 0x9348
   15444:	movt	r3, #5
   15448:	movw	r0, #54636	; 0xd56c
   1544c:	mov	r1, #1
   15450:	ldr	r3, [r3]
   15454:	mov	r2, #7
   15458:	movt	r0, #3
   1545c:	bl	12ee0 <fwrite@plt>
   15460:	b	153b4 <__assert_fail@plt+0x1eb0>
   15464:	movw	r3, #37704	; 0x9348
   15468:	movt	r3, #5
   1546c:	movw	r0, #54620	; 0xd55c
   15470:	mov	r1, #1
   15474:	ldr	r3, [r3]
   15478:	mov	r2, #5
   1547c:	movt	r0, #3
   15480:	bl	12ee0 <fwrite@plt>
   15484:	b	153b4 <__assert_fail@plt+0x1eb0>
   15488:	movw	r3, #37704	; 0x9348
   1548c:	movt	r3, #5
   15490:	movw	r0, #54644	; 0xd574
   15494:	mov	r1, #1
   15498:	ldr	r3, [r3]
   1549c:	mov	r2, #7
   154a0:	movt	r0, #3
   154a4:	bl	12ee0 <fwrite@plt>
   154a8:	b	153b4 <__assert_fail@plt+0x1eb0>
   154ac:	mov	r1, #32
   154b0:	bl	132dc <__overflow@plt>
   154b4:	b	15378 <__assert_fail@plt+0x1e74>
   154b8:	push	{r4, r5, lr}
   154bc:	movw	r4, #37688	; 0x9338
   154c0:	movt	r4, #5
   154c4:	sub	sp, sp, #36	; 0x24
   154c8:	mov	r5, r0
   154cc:	ldr	r3, [r4]
   154d0:	mov	r1, sp
   154d4:	str	r3, [sp, #28]
   154d8:	bl	130cc <dwarf_lowpc@plt>
   154dc:	cmp	r0, #0
   154e0:	bne	15504 <__assert_fail@plt+0x2000>
   154e4:	ldr	r2, [sp, #28]
   154e8:	ldr	r3, [r4]
   154ec:	ldrd	r0, [sp]
   154f0:	cmp	r2, r3
   154f4:	bne	15500 <__assert_fail@plt+0x1ffc>
   154f8:	add	sp, sp, #36	; 0x24
   154fc:	pop	{r4, r5, pc}
   15500:	bl	12dc0 <__stack_chk_fail@plt>
   15504:	add	r2, sp, #12
   15508:	mov	r1, #82	; 0x52
   1550c:	mov	r0, r5
   15510:	bl	13114 <dwarf_attr@plt>
   15514:	mov	r1, sp
   15518:	bl	12d00 <dwarf_formaddr@plt>
   1551c:	cmp	r0, #0
   15520:	movne	r2, #0
   15524:	movne	r3, #0
   15528:	strdne	r2, [sp]
   1552c:	b	154e4 <__assert_fail@plt+0x1fe0>
   15530:	push	{r4, r5, r6, r7, r8, lr}
   15534:	sub	sp, sp, #72	; 0x48
   15538:	movw	r5, #37688	; 0x9338
   1553c:	movt	r5, #5
   15540:	ldr	lr, [sp, #100]	; 0x64
   15544:	mov	ip, #0
   15548:	ldr	r4, [r5]
   1554c:	mov	r7, r1
   15550:	cmp	lr, ip
   15554:	stm	sp, {r3, r7}
   15558:	mov	r6, r0
   1555c:	mov	r3, #1
   15560:	str	r4, [sp, #68]	; 0x44
   15564:	str	r3, [sp, #8]
   15568:	movne	r3, lr
   1556c:	str	ip, [sp, #12]
   15570:	str	ip, [sp, #16]
   15574:	str	ip, [sp, #20]
   15578:	str	ip, [sp, #24]
   1557c:	str	ip, [sp, #28]
   15580:	ldr	r8, [sp, #96]	; 0x60
   15584:	beq	1561c <__assert_fail@plt+0x2118>
   15588:	mov	r0, r6
   1558c:	mov	r4, #0
   15590:	str	r3, [sp, #12]
   15594:	str	r4, [sp, #48]	; 0x30
   15598:	str	r4, [sp, #52]	; 0x34
   1559c:	str	r4, [sp, #56]	; 0x38
   155a0:	str	r4, [sp, #60]	; 0x3c
   155a4:	str	r7, [sp, #36]	; 0x24
   155a8:	mov	r7, #1
   155ac:	str	r3, [sp, #44]	; 0x2c
   155b0:	str	r8, [sp, #32]
   155b4:	str	r7, [sp, #40]	; 0x28
   155b8:	bl	12e38 <gelf_getclass@plt>
   155bc:	movw	r2, #13392	; 0x3450
   155c0:	movw	r3, #12324	; 0x3024
   155c4:	movt	r2, #1
   155c8:	movt	r3, #1
   155cc:	mov	r1, r4
   155d0:	cmp	r0, r7
   155d4:	mov	r0, r6
   155d8:	movne	r4, r2
   155dc:	moveq	r4, r3
   155e0:	bl	12d60 <elf_getident@plt>
   155e4:	add	r1, sp, #32
   155e8:	ldrb	r2, [r0, #5]
   155ec:	mov	r0, sp
   155f0:	blx	r4
   155f4:	subs	r4, r0, #0
   155f8:	beq	1562c <__assert_fail@plt+0x2128>
   155fc:	ldr	r2, [sp, #68]	; 0x44
   15600:	ldr	r3, [r5]
   15604:	ldr	r0, [sp, #44]	; 0x2c
   15608:	cmp	r2, r3
   1560c:	add	r0, r8, r0
   15610:	bne	15628 <__assert_fail@plt+0x2124>
   15614:	add	sp, sp, #72	; 0x48
   15618:	pop	{r4, r5, r6, r7, r8, pc}
   1561c:	bl	12f64 <gelf_fsize@plt>
   15620:	mov	r3, r0
   15624:	b	15588 <__assert_fail@plt+0x2084>
   15628:	bl	12dc0 <__stack_chk_fail@plt>
   1562c:	mov	r2, #5
   15630:	movw	r1, #54668	; 0xd58c
   15634:	movt	r1, #3
   15638:	bl	12d84 <dcgettext@plt>
   1563c:	mov	r5, r0
   15640:	mvn	r0, #0
   15644:	bl	130a8 <elf_errmsg@plt>
   15648:	mov	r1, r4
   1564c:	mov	r2, r5
   15650:	mov	r3, r0
   15654:	mov	r0, r7
   15658:	bl	12f70 <error@plt>
   1565c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15660:	movw	r4, #37688	; 0x9338
   15664:	movt	r4, #5
   15668:	sub	sp, sp, #28
   1566c:	mov	r6, r1
   15670:	mov	r1, #1
   15674:	ldr	ip, [r4]
   15678:	mov	r5, r2
   1567c:	mov	r7, r3
   15680:	mov	r2, r1
   15684:	mov	r3, r1
   15688:	mov	r9, r0
   1568c:	str	ip, [sp, #20]
   15690:	bl	12f64 <gelf_fsize@plt>
   15694:	ldr	ip, [r6]
   15698:	cmp	ip, r5
   1569c:	mov	r8, r0
   156a0:	bcs	156b0 <__assert_fail@plt+0x21ac>
   156a4:	rsb	r5, ip, r5
   156a8:	cmp	r0, r5
   156ac:	bls	156cc <__assert_fail@plt+0x21c8>
   156b0:	mov	r0, #0
   156b4:	ldr	r2, [sp, #20]
   156b8:	ldr	r3, [r4]
   156bc:	cmp	r2, r3
   156c0:	bne	15718 <__assert_fail@plt+0x2214>
   156c4:	add	sp, sp, #28
   156c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   156cc:	mov	r1, #1
   156d0:	str	r0, [sp, #4]
   156d4:	str	ip, [sp]
   156d8:	mov	r0, r9
   156dc:	mov	r2, r1
   156e0:	add	r3, sp, #8
   156e4:	bl	15530 <__assert_fail@plt+0x202c>
   156e8:	cmp	r8, #4
   156ec:	str	r0, [r6]
   156f0:	ldrdne	r2, [sp, #8]
   156f4:	movne	r0, #1
   156f8:	strdne	r2, [r7]
   156fc:	bne	156b4 <__assert_fail@plt+0x21b0>
   15700:	ldr	r3, [sp, #8]
   15704:	mov	r2, #0
   15708:	mov	r0, #1
   1570c:	str	r2, [r7, #4]
   15710:	str	r3, [r7]
   15714:	b	156b4 <__assert_fail@plt+0x21b0>
   15718:	bl	12dc0 <__stack_chk_fail@plt>
   1571c:	ldr	ip, [r1]
   15720:	push	{r4, lr}
   15724:	cmp	ip, r2
   15728:	sub	sp, sp, #8
   1572c:	mov	r4, r1
   15730:	bcs	15740 <__assert_fail@plt+0x223c>
   15734:	rsb	r2, ip, r2
   15738:	cmp	r2, #3
   1573c:	bhi	15750 <__assert_fail@plt+0x224c>
   15740:	mov	r3, #0
   15744:	mov	r0, r3
   15748:	add	sp, sp, #8
   1574c:	pop	{r4, pc}
   15750:	str	ip, [sp]
   15754:	mov	r2, #4
   15758:	mov	r1, #12
   1575c:	str	r2, [sp, #4]
   15760:	mov	r2, #1
   15764:	bl	15530 <__assert_fail@plt+0x202c>
   15768:	mov	r3, #1
   1576c:	str	r0, [r4]
   15770:	mov	r0, r3
   15774:	add	sp, sp, #8
   15778:	pop	{r4, pc}
   1577c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15780:	sub	sp, sp, #36	; 0x24
   15784:	movw	r5, #37688	; 0x9338
   15788:	movt	r5, #5
   1578c:	ldr	r6, [sp, #64]	; 0x40
   15790:	mov	r8, r2
   15794:	ldr	r4, [sp, #68]	; 0x44
   15798:	mov	r7, r3
   1579c:	cmp	r6, #0
   157a0:	ldr	ip, [r5]
   157a4:	addeq	r2, sp, #24
   157a8:	mov	r9, r1
   157ac:	movne	r2, r6
   157b0:	cmp	r4, #0
   157b4:	addeq	r3, sp, #24
   157b8:	str	r2, [sp, #8]
   157bc:	movne	r3, r4
   157c0:	add	r2, sp, #20
   157c4:	str	r3, [sp, #12]
   157c8:	add	r3, sp, #16
   157cc:	stm	sp, {r2, r3}
   157d0:	mov	r2, r7
   157d4:	mov	r3, #16
   157d8:	str	ip, [sp, #28]
   157dc:	bl	3b11c <__assert_fail@plt+0x27c18>
   157e0:	cmp	r0, #0
   157e4:	ble	15830 <__assert_fail@plt+0x232c>
   157e8:	cmp	r6, #0
   157ec:	beq	157fc <__assert_fail@plt+0x22f8>
   157f0:	ldr	r3, [r6]
   157f4:	cmp	r3, #0
   157f8:	ble	15888 <__assert_fail@plt+0x2384>
   157fc:	cmp	r4, #0
   15800:	ldr	r0, [sp, #16]
   15804:	beq	15818 <__assert_fail@plt+0x2314>
   15808:	ldr	r3, [r4]
   1580c:	cmp	r3, #0
   15810:	moveq	r3, #7
   15814:	streq	r3, [r4]
   15818:	ldr	r2, [sp, #28]
   1581c:	ldr	r3, [r5]
   15820:	cmp	r2, r3
   15824:	bne	158c8 <__assert_fail@plt+0x23c4>
   15828:	add	sp, sp, #36	; 0x24
   1582c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15830:	cmp	r8, #0
   15834:	beq	15898 <__assert_fail@plt+0x2394>
   15838:	movw	r3, #54724	; 0xd5c4
   1583c:	movt	r3, #3
   15840:	str	r3, [sp]
   15844:	mov	r0, r7
   15848:	ldrh	ip, [r8, #2]
   1584c:	mov	r1, #16
   15850:	mov	r2, #1
   15854:	mvn	r3, #0
   15858:	str	ip, [sp, #4]
   1585c:	bl	134ec <__snprintf_chk@plt>
   15860:	cmp	r6, #0
   15864:	ldrbne	r8, [r8, #4]
   15868:	beq	15870 <__assert_fail@plt+0x236c>
   1586c:	str	r8, [r6]
   15870:	cmp	r4, #0
   15874:	movw	r0, #54704	; 0xd5b0
   15878:	movt	r0, #3
   1587c:	movne	r3, #7
   15880:	strne	r3, [r4]
   15884:	b	15818 <__assert_fail@plt+0x2314>
   15888:	cmp	r8, #0
   1588c:	ldrbne	r8, [r8, #4]
   15890:	str	r8, [r6]
   15894:	b	157fc <__assert_fail@plt+0x22f8>
   15898:	str	r9, [sp, #4]
   1589c:	mov	r0, r7
   158a0:	movw	r3, #54732	; 0xd5cc
   158a4:	mov	r1, #16
   158a8:	movt	r3, #3
   158ac:	mov	r2, #1
   158b0:	str	r3, [sp]
   158b4:	mvn	r3, #0
   158b8:	bl	134ec <__snprintf_chk@plt>
   158bc:	cmp	r6, #0
   158c0:	bne	1586c <__assert_fail@plt+0x2368>
   158c4:	b	15870 <__assert_fail@plt+0x236c>
   158c8:	bl	12dc0 <__stack_chk_fail@plt>
   158cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158d0:	add	fp, sp, #32
   158d4:	sub	sp, sp, #100	; 0x64
   158d8:	movw	r7, #37688	; 0x9338
   158dc:	movt	r7, #5
   158e0:	mov	r1, #8
   158e4:	mov	r2, #0
   158e8:	ldr	r3, [r7]
   158ec:	str	r3, [fp, #-40]	; 0xffffffd8
   158f0:	bl	13264 <elf_begin@plt>
   158f4:	subs	r5, r0, #0
   158f8:	beq	15c3c <__assert_fail@plt+0x2738>
   158fc:	sub	r1, fp, #116	; 0x74
   15900:	bl	133f0 <elf_getshdrnum@plt>
   15904:	cmp	r0, #0
   15908:	blt	15c04 <__assert_fail@plt+0x2700>
   1590c:	mov	r0, r5
   15910:	sub	r1, fp, #112	; 0x70
   15914:	bl	13498 <elf_getshdrstrndx@plt>
   15918:	cmp	r0, #0
   1591c:	blt	15c74 <__assert_fail@plt+0x2770>
   15920:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15924:	cmp	r3, #0
   15928:	movwne	r8, #37712	; 0x9350
   1592c:	movne	r4, #0
   15930:	movtne	r8, #5
   15934:	bne	15984 <__assert_fail@plt+0x2480>
   15938:	b	159ec <__assert_fail@plt+0x24e8>
   1593c:	sub	r1, fp, #108	; 0x6c
   15940:	bl	12cc4 <gelf_getshdr@plt>
   15944:	subs	r6, r0, #0
   15948:	beq	15c84 <__assert_fail@plt+0x2780>
   1594c:	ldr	r2, [r6]
   15950:	mov	r0, r5
   15954:	ldr	r1, [fp, #-112]	; 0xffffff90
   15958:	bl	12e44 <elf_strptr@plt>
   1595c:	subs	r6, r0, #0
   15960:	beq	15a3c <__assert_fail@plt+0x2538>
   15964:	ldr	r1, [r8, #36]	; 0x24
   15968:	bl	12cd0 <strcmp@plt>
   1596c:	subs	r1, r0, #0
   15970:	beq	15a60 <__assert_fail@plt+0x255c>
   15974:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15978:	add	r4, r4, #1
   1597c:	cmp	r3, r4
   15980:	bls	159ec <__assert_fail@plt+0x24e8>
   15984:	mov	r0, r5
   15988:	mov	r1, r4
   1598c:	bl	133e4 <elf_getscn@plt>
   15990:	subs	r9, r0, #0
   15994:	bne	1593c <__assert_fail@plt+0x2438>
   15998:	mov	r2, #5
   1599c:	movw	r1, #54828	; 0xd62c
   159a0:	movt	r1, #3
   159a4:	bl	12d84 <dcgettext@plt>
   159a8:	mov	r4, r0
   159ac:	mvn	r0, #0
   159b0:	bl	130a8 <elf_errmsg@plt>
   159b4:	mov	r1, r9
   159b8:	mov	r2, r4
   159bc:	mov	r3, r0
   159c0:	mov	r0, r9
   159c4:	bl	12f70 <error@plt>
   159c8:	mov	r0, r5
   159cc:	bl	1303c <elf_end@plt>
   159d0:	mvn	r0, #0
   159d4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   159d8:	ldr	r3, [r7]
   159dc:	cmp	r2, r3
   159e0:	bne	15ce4 <__assert_fail@plt+0x27e0>
   159e4:	sub	sp, fp, #32
   159e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159ec:	mov	r0, r5
   159f0:	bl	1303c <elf_end@plt>
   159f4:	cmp	r0, #0
   159f8:	mvneq	r0, #0
   159fc:	beq	159d4 <__assert_fail@plt+0x24d0>
   15a00:	mov	r2, #5
   15a04:	movw	r1, #54980	; 0xd6c4
   15a08:	mov	r0, #0
   15a0c:	movt	r1, #3
   15a10:	bl	12d84 <dcgettext@plt>
   15a14:	mov	r4, r0
   15a18:	mvn	r0, #0
   15a1c:	bl	130a8 <elf_errmsg@plt>
   15a20:	mov	r2, r4
   15a24:	mov	r3, r0
   15a28:	mov	r0, #0
   15a2c:	mov	r1, r0
   15a30:	bl	12f70 <error@plt>
   15a34:	mvn	r0, #0
   15a38:	b	159d4 <__assert_fail@plt+0x24d0>
   15a3c:	mov	r2, #5
   15a40:	movw	r1, #54852	; 0xd644
   15a44:	movt	r1, #3
   15a48:	bl	12d84 <dcgettext@plt>
   15a4c:	mov	r1, r6
   15a50:	mov	r2, r0
   15a54:	mov	r0, r6
   15a58:	bl	12f70 <error@plt>
   15a5c:	b	159c8 <__assert_fail@plt+0x24c4>
   15a60:	mov	r0, r9
   15a64:	bl	131bc <elf_rawdata@plt>
   15a68:	subs	r9, r0, #0
   15a6c:	beq	15ce8 <__assert_fail@plt+0x27e4>
   15a70:	movw	r0, #54904	; 0xd678
   15a74:	movt	r0, #3
   15a78:	bl	12fc4 <getenv@plt>
   15a7c:	subs	r6, r0, #0
   15a80:	beq	15bcc <__assert_fail@plt+0x26c8>
   15a84:	bl	13090 <strlen@plt>
   15a88:	add	r0, r0, #15
   15a8c:	add	r2, r0, #14
   15a90:	ldr	r0, [pc, #648]	; 15d20 <__assert_fail@plt+0x281c>
   15a94:	bic	r2, r2, #7
   15a98:	mov	r1, #1
   15a9c:	sub	sp, sp, r2
   15aa0:	movw	r3, #54912	; 0xd680
   15aa4:	add	r4, sp, #8
   15aa8:	movt	r3, #3
   15aac:	mvn	r2, #0
   15ab0:	str	r0, [sp, #4]
   15ab4:	str	r6, [sp]
   15ab8:	mov	r0, r4
   15abc:	bl	13150 <__sprintf_chk@plt>
   15ac0:	mov	r0, r4
   15ac4:	bl	12fd0 <mkstemp64@plt>
   15ac8:	cmn	r0, #1
   15acc:	mov	r8, r0
   15ad0:	beq	15cb8 <__assert_fail@plt+0x27b4>
   15ad4:	mov	r0, r4
   15ad8:	mov	sl, #0
   15adc:	bl	12de4 <unlink@plt>
   15ae0:	ldr	r4, [r9, #12]
   15ae4:	ldr	r9, [r9]
   15ae8:	str	r9, [fp, #-120]	; 0xffffff88
   15aec:	mov	r9, r4
   15af0:	ldr	r6, [fp, #-120]	; 0xffffff88
   15af4:	b	15b18 <__assert_fail@plt+0x2614>
   15af8:	cmp	r0, #0
   15afc:	ble	15bc0 <__assert_fail@plt+0x26bc>
   15b00:	add	sl, sl, r0
   15b04:	cmp	r4, sl
   15b08:	bls	15bc4 <__assert_fail@plt+0x26c0>
   15b0c:	ldr	r3, [fp, #-120]	; 0xffffff88
   15b10:	rsb	r9, sl, r4
   15b14:	add	r6, r3, sl
   15b18:	mov	r2, r9
   15b1c:	mov	r0, r8
   15b20:	mov	r1, r6
   15b24:	bl	13228 <write@plt>
   15b28:	cmn	r0, #1
   15b2c:	mov	r2, r0
   15b30:	bne	15af8 <__assert_fail@plt+0x25f4>
   15b34:	str	r0, [fp, #-124]	; 0xffffff84
   15b38:	bl	1312c <__errno_location@plt>
   15b3c:	ldr	r2, [fp, #-124]	; 0xffffff84
   15b40:	ldr	r1, [r0]
   15b44:	cmp	r1, #4
   15b48:	beq	15b18 <__assert_fail@plt+0x2614>
   15b4c:	mov	r3, r2
   15b50:	cmp	r4, r3
   15b54:	bne	15bdc <__assert_fail@plt+0x26d8>
   15b58:	mov	r0, r5
   15b5c:	bl	1303c <elf_end@plt>
   15b60:	subs	r4, r0, #0
   15b64:	bne	15a00 <__assert_fail@plt+0x24fc>
   15b68:	mov	r2, #0
   15b6c:	mov	r3, #0
   15b70:	str	r4, [sp]
   15b74:	mov	r0, r8
   15b78:	bl	12ef8 <lseek64@plt>
   15b7c:	mvn	r2, #0
   15b80:	mvn	r3, #0
   15b84:	cmp	r1, r3
   15b88:	cmpeq	r0, r2
   15b8c:	movne	r0, r8
   15b90:	bne	159d4 <__assert_fail@plt+0x24d0>
   15b94:	mov	r2, #5
   15b98:	movw	r1, #55020	; 0xd6ec
   15b9c:	mov	r0, r4
   15ba0:	movt	r1, #3
   15ba4:	bl	12d84 <dcgettext@plt>
   15ba8:	mov	r1, r4
   15bac:	mov	r2, r0
   15bb0:	mov	r0, r4
   15bb4:	bl	12f70 <error@plt>
   15bb8:	mvn	r0, #0
   15bbc:	b	159d4 <__assert_fail@plt+0x24d0>
   15bc0:	bne	15b4c <__assert_fail@plt+0x2648>
   15bc4:	mov	r3, sl
   15bc8:	b	15b50 <__assert_fail@plt+0x264c>
   15bcc:	movw	r6, #54744	; 0xd5d8
   15bd0:	mov	r0, #19
   15bd4:	movt	r6, #3
   15bd8:	b	15a8c <__assert_fail@plt+0x2588>
   15bdc:	movw	r1, #54952	; 0xd6a8
   15be0:	movt	r1, #3
   15be4:	mov	r0, #0
   15be8:	mov	r2, #5
   15bec:	bl	12d84 <dcgettext@plt>
   15bf0:	mov	r2, r0
   15bf4:	mov	r0, #0
   15bf8:	mov	r1, r0
   15bfc:	bl	12f70 <error@plt>
   15c00:	b	159c8 <__assert_fail@plt+0x24c4>
   15c04:	mov	r2, #5
   15c08:	movw	r1, #54788	; 0xd604
   15c0c:	mov	r0, #0
   15c10:	movt	r1, #3
   15c14:	bl	12d84 <dcgettext@plt>
   15c18:	mov	r4, r0
   15c1c:	mvn	r0, #0
   15c20:	bl	130a8 <elf_errmsg@plt>
   15c24:	mov	r2, r4
   15c28:	mov	r3, r0
   15c2c:	mov	r0, #0
   15c30:	mov	r1, r0
   15c34:	bl	12f70 <error@plt>
   15c38:	b	159c8 <__assert_fail@plt+0x24c4>
   15c3c:	mov	r2, #5
   15c40:	movw	r1, #54752	; 0xd5e0
   15c44:	movt	r1, #3
   15c48:	bl	12d84 <dcgettext@plt>
   15c4c:	mov	r4, r0
   15c50:	mvn	r0, #0
   15c54:	bl	130a8 <elf_errmsg@plt>
   15c58:	mov	r1, r5
   15c5c:	mov	r2, r4
   15c60:	mov	r3, r0
   15c64:	mov	r0, r5
   15c68:	bl	12f70 <error@plt>
   15c6c:	mvn	r0, #0
   15c70:	b	159d4 <__assert_fail@plt+0x24d0>
   15c74:	movw	r1, #53868	; 0xd26c
   15c78:	mov	r0, #0
   15c7c:	movt	r1, #3
   15c80:	b	15be8 <__assert_fail@plt+0x26e4>
   15c84:	mov	r2, #5
   15c88:	movw	r1, #54472	; 0xd4c8
   15c8c:	movt	r1, #3
   15c90:	bl	12d84 <dcgettext@plt>
   15c94:	mov	r4, r0
   15c98:	mvn	r0, #0
   15c9c:	bl	130a8 <elf_errmsg@plt>
   15ca0:	mov	r1, r6
   15ca4:	mov	r2, r4
   15ca8:	mov	r3, r0
   15cac:	mov	r0, r6
   15cb0:	bl	12f70 <error@plt>
   15cb4:	b	159c8 <__assert_fail@plt+0x24c4>
   15cb8:	mov	r2, #5
   15cbc:	movw	r1, #54920	; 0xd688
   15cc0:	mov	r0, #0
   15cc4:	movt	r1, #3
   15cc8:	bl	12d84 <dcgettext@plt>
   15ccc:	mov	r3, r4
   15cd0:	mov	r2, r0
   15cd4:	mov	r0, #0
   15cd8:	mov	r1, r0
   15cdc:	bl	12f70 <error@plt>
   15ce0:	b	159c8 <__assert_fail@plt+0x24c4>
   15ce4:	bl	12dc0 <__stack_chk_fail@plt>
   15ce8:	mov	r2, #5
   15cec:	movw	r1, #54876	; 0xd65c
   15cf0:	movt	r1, #3
   15cf4:	bl	12d84 <dcgettext@plt>
   15cf8:	mov	r4, r0
   15cfc:	mvn	r0, #0
   15d00:	bl	130a8 <elf_errmsg@plt>
   15d04:	mov	r2, r4
   15d08:	mov	r3, r6
   15d0c:	mov	r1, r9
   15d10:	str	r0, [sp]
   15d14:	mov	r0, r9
   15d18:	bl	12f70 <error@plt>
   15d1c:	b	159c8 <__assert_fail@plt+0x24c4>
   15d20:	strdeq	ip, [r3], -r4
   15d24:	push	{r4, r5, r6, r7, r8, r9, lr}
   15d28:	movw	r6, #37688	; 0x9338
   15d2c:	movt	r6, #5
   15d30:	sub	sp, sp, #124	; 0x7c
   15d34:	mov	r8, r1
   15d38:	ldr	r3, [r6]
   15d3c:	str	r3, [sp, #116]	; 0x74
   15d40:	bl	12e08 <dup@plt>
   15d44:	subs	r9, r0, #0
   15d48:	blt	15e48 <__assert_fail@plt+0x2944>
   15d4c:	ldr	r0, [pc, #304]	; 15e84 <__assert_fail@plt+0x2980>
   15d50:	bl	12ce8 <dwfl_begin@plt>
   15d54:	mov	r1, r8
   15d58:	mov	r2, r8
   15d5c:	mov	r3, r9
   15d60:	subs	r7, r0, #0
   15d64:	movne	r4, #0
   15d68:	movne	r5, #0
   15d6c:	mov	r0, r7
   15d70:	strdne	r4, [r7, #16]
   15d74:	bl	1324c <dwfl_report_offline@plt>
   15d78:	subs	r4, r0, #0
   15d7c:	beq	15dac <__assert_fail@plt+0x28a8>
   15d80:	mov	r1, #0
   15d84:	mov	r0, r7
   15d88:	mov	r2, r1
   15d8c:	bl	12eec <dwfl_report_end@plt>
   15d90:	ldr	r2, [sp, #116]	; 0x74
   15d94:	mov	r0, r7
   15d98:	ldr	r3, [r6]
   15d9c:	cmp	r2, r3
   15da0:	bne	15e44 <__assert_fail@plt+0x2940>
   15da4:	add	sp, sp, #124	; 0x7c
   15da8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15dac:	mov	r0, #3
   15db0:	mov	r1, r9
   15db4:	add	r2, sp, #8
   15db8:	bl	12eb0 <__fxstat64@plt>
   15dbc:	subs	r7, r0, #0
   15dc0:	bne	15e14 <__assert_fail@plt+0x2910>
   15dc4:	ldrd	r4, [sp, #56]	; 0x38
   15dc8:	orrs	r3, r4, r5
   15dcc:	beq	15e60 <__assert_fail@plt+0x295c>
   15dd0:	mov	r2, #5
   15dd4:	movw	r1, #55108	; 0xd744
   15dd8:	movt	r1, #3
   15ddc:	bl	12d84 <dcgettext@plt>
   15de0:	mov	r4, r0
   15de4:	mvn	r0, #0
   15de8:	bl	132d0 <dwfl_errmsg@plt>
   15dec:	mov	r2, r4
   15df0:	mov	r3, r8
   15df4:	mov	r1, r7
   15df8:	str	r0, [sp]
   15dfc:	mov	r0, r7
   15e00:	bl	12f70 <error@plt>
   15e04:	mov	r0, r9
   15e08:	mov	r7, #0
   15e0c:	bl	13480 <close@plt>
   15e10:	b	15d90 <__assert_fail@plt+0x288c>
   15e14:	bl	1312c <__errno_location@plt>
   15e18:	mov	r2, #5
   15e1c:	movw	r1, #55064	; 0xd718
   15e20:	movt	r1, #3
   15e24:	ldr	r5, [r0]
   15e28:	mov	r0, r4
   15e2c:	bl	12d84 <dcgettext@plt>
   15e30:	mov	r1, r5
   15e34:	mov	r2, r0
   15e38:	mov	r0, r4
   15e3c:	bl	12f70 <error@plt>
   15e40:	b	15e04 <__assert_fail@plt+0x2900>
   15e44:	bl	12dc0 <__stack_chk_fail@plt>
   15e48:	bl	1312c <__errno_location@plt>
   15e4c:	movw	r2, #55060	; 0xd714
   15e50:	movt	r2, #3
   15e54:	ldr	r1, [r0]
   15e58:	mov	r0, #1
   15e5c:	bl	12f70 <error@plt>
   15e60:	mov	r2, #5
   15e64:	movw	r1, #55088	; 0xd730
   15e68:	movt	r1, #3
   15e6c:	bl	12d84 <dcgettext@plt>
   15e70:	mov	r1, r7
   15e74:	mov	r2, r0
   15e78:	mov	r0, r7
   15e7c:	bl	12f70 <error@plt>
   15e80:	b	15e04 <__assert_fail@plt+0x2900>
   15e84:	andeq	ip, r3, r4, lsl #12
   15e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e8c:	add	fp, sp, #32
   15e90:	sub	sp, sp, #52	; 0x34
   15e94:	movw	r8, #37712	; 0x9350
   15e98:	movt	r8, #5
   15e9c:	movw	ip, #37688	; 0x9338
   15ea0:	movt	ip, #5
   15ea4:	ldrb	r3, [r8, #28]
   15ea8:	str	r1, [fp, #-64]	; 0xffffffc0
   15eac:	ldr	r1, [ip]
   15eb0:	cmp	r3, #0
   15eb4:	str	ip, [fp, #-56]	; 0xffffffc8
   15eb8:	str	r2, [fp, #-68]	; 0xffffffbc
   15ebc:	str	r0, [fp, #-60]	; 0xffffffc4
   15ec0:	str	r1, [fp, #-40]	; 0xffffffd8
   15ec4:	bne	15fd0 <__assert_fail@plt+0x2acc>
   15ec8:	ldrb	r3, [r8, #16]
   15ecc:	movw	r4, #37712	; 0x9350
   15ed0:	movt	r4, #5
   15ed4:	cmp	r3, #0
   15ed8:	beq	15fb4 <__assert_fail@plt+0x2ab0>
   15edc:	ldr	r5, [r4, #36]	; 0x24
   15ee0:	cmp	r5, #0
   15ee4:	beq	161bc <__assert_fail@plt+0x2cb8>
   15ee8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15eec:	bl	13090 <strlen@plt>
   15ef0:	mov	r6, r0
   15ef4:	mov	r0, r5
   15ef8:	bl	13090 <strlen@plt>
   15efc:	ldr	ip, [fp, #-64]	; 0xffffffc0
   15f00:	mov	r1, #1
   15f04:	mvn	r2, #0
   15f08:	movw	r3, #55404	; 0xd86c
   15f0c:	movt	r3, #3
   15f10:	add	r0, r6, r0
   15f14:	add	r6, r0, #16
   15f18:	bic	r6, r6, #7
   15f1c:	sub	sp, sp, r6
   15f20:	add	r6, sp, #8
   15f24:	str	ip, [sp]
   15f28:	str	r5, [sp, #4]
   15f2c:	mov	r0, r6
   15f30:	bl	13150 <__sprintf_chk@plt>
   15f34:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15f38:	bl	158cc <__assert_fail@plt+0x23c8>
   15f3c:	cmn	r0, #1
   15f40:	str	r0, [fp, #-60]	; 0xffffffc4
   15f44:	beq	161c4 <__assert_fail@plt+0x2cc0>
   15f48:	mov	r1, r6
   15f4c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15f50:	bl	15d24 <__assert_fail@plt+0x2820>
   15f54:	subs	r5, r0, #0
   15f58:	beq	15f94 <__assert_fail@plt+0x2a90>
   15f5c:	ldr	ip, [fp, #-68]	; 0xffffffbc
   15f60:	cmp	ip, #0
   15f64:	subeq	r4, fp, #48	; 0x30
   15f68:	bne	16190 <__assert_fail@plt+0x2c8c>
   15f6c:	ldr	ip, [fp, #-60]	; 0xffffffc4
   15f70:	movw	r1, #16556	; 0x40ac
   15f74:	mov	r2, r4
   15f78:	mov	r0, r5
   15f7c:	movt	r1, #2
   15f80:	mov	r3, #0
   15f84:	str	ip, [fp, #-48]	; 0xffffffd0
   15f88:	ldr	ip, [fp, #-68]	; 0xffffffbc
   15f8c:	strb	ip, [fp, #-44]	; 0xffffffd4
   15f90:	bl	1321c <dwfl_getmodules@plt>
   15f94:	ldrb	r3, [r8, #48]	; 0x30
   15f98:	cmp	r3, #0
   15f9c:	beq	16060 <__assert_fail@plt+0x2b5c>
   15fa0:	ldr	r3, [r8, #36]	; 0x24
   15fa4:	cmp	r3, #0
   15fa8:	beq	15fb4 <__assert_fail@plt+0x2ab0>
   15fac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15fb0:	bl	13480 <close@plt>
   15fb4:	ldr	ip, [fp, #-56]	; 0xffffffc8
   15fb8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15fbc:	ldr	r3, [ip]
   15fc0:	cmp	r2, r3
   15fc4:	bne	162b8 <__assert_fail@plt+0x2db4>
   15fc8:	sub	sp, fp, #32
   15fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fd0:	mov	r1, #8
   15fd4:	mov	r2, #0
   15fd8:	bl	13264 <elf_begin@plt>
   15fdc:	subs	r9, r0, #0
   15fe0:	beq	16244 <__assert_fail@plt+0x2d40>
   15fe4:	bl	134d4 <elf_kind@plt>
   15fe8:	cmp	r0, #1
   15fec:	beq	16078 <__assert_fail@plt+0x2b74>
   15ff0:	mov	r2, #5
   15ff4:	movw	r1, #55352	; 0xd838
   15ff8:	mov	r0, #0
   15ffc:	movt	r1, #3
   16000:	bl	12d84 <dcgettext@plt>
   16004:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16008:	mov	r2, r0
   1600c:	mov	r0, #0
   16010:	mov	r1, r0
   16014:	bl	12f70 <error@plt>
   16018:	mov	r0, r9
   1601c:	bl	1303c <elf_end@plt>
   16020:	cmp	r0, #0
   16024:	beq	15ec8 <__assert_fail@plt+0x29c4>
   16028:	mov	r2, #5
   1602c:	movw	r1, #54980	; 0xd6c4
   16030:	mov	r0, #0
   16034:	movt	r1, #3
   16038:	bl	12d84 <dcgettext@plt>
   1603c:	mov	r4, r0
   16040:	mvn	r0, #0
   16044:	bl	130a8 <elf_errmsg@plt>
   16048:	mov	r2, r4
   1604c:	mov	r3, r0
   16050:	mov	r0, #0
   16054:	mov	r1, r0
   16058:	bl	12f70 <error@plt>
   1605c:	b	15ec8 <__assert_fail@plt+0x29c4>
   16060:	mov	r0, r5
   16064:	bl	132c4 <dwfl_end@plt>
   16068:	ldr	r3, [r8, #36]	; 0x24
   1606c:	cmp	r3, #0
   16070:	bne	15fac <__assert_fail@plt+0x2aa8>
   16074:	b	15fb4 <__assert_fail@plt+0x2ab0>
   16078:	ldr	ip, [fp, #-68]	; 0xffffffbc
   1607c:	cmp	ip, #0
   16080:	beq	161f8 <__assert_fail@plt+0x2cf4>
   16084:	mov	r0, r9
   16088:	sub	r1, fp, #48	; 0x30
   1608c:	bl	13438 <elf_getarsym@plt>
   16090:	subs	sl, r0, #0
   16094:	beq	1620c <__assert_fail@plt+0x2d08>
   16098:	mov	r2, #5
   1609c:	movw	r1, #55220	; 0xd7b4
   160a0:	mov	r0, #0
   160a4:	movt	r1, #3
   160a8:	bl	12d84 <dcgettext@plt>
   160ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   160b0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   160b4:	mov	r1, r0
   160b8:	mov	r0, #1
   160bc:	bl	13204 <__printf_chk@plt>
   160c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   160c4:	add	r3, r3, r3, lsl #1
   160c8:	add	r3, sl, r3, lsl #2
   160cc:	sub	r3, r3, #12
   160d0:	cmp	sl, r3
   160d4:	bcs	16018 <__assert_fail@plt+0x2b14>
   160d8:	add	r4, sl, #12
   160dc:	mov	r7, #0
   160e0:	str	r8, [fp, #-72]	; 0xffffffb8
   160e4:	ldr	r5, [r4, #-8]
   160e8:	mov	r6, r4
   160ec:	cmp	r5, r7
   160f0:	beq	16158 <__assert_fail@plt+0x2c54>
   160f4:	mov	r0, r9
   160f8:	mov	r1, r5
   160fc:	bl	130f0 <elf_rand@plt>
   16100:	cmp	r0, #0
   16104:	beq	16278 <__assert_fail@plt+0x2d74>
   16108:	mvn	r0, #0
   1610c:	mov	r1, #8
   16110:	mov	r2, r9
   16114:	bl	13264 <elf_begin@plt>
   16118:	subs	r8, r0, #0
   1611c:	beq	16278 <__assert_fail@plt+0x2d74>
   16120:	bl	13414 <elf_getarhdr@plt>
   16124:	mov	r2, #5
   16128:	movw	r1, #55312	; 0xd810
   1612c:	movt	r1, #3
   16130:	mov	r7, r0
   16134:	mov	r0, #0
   16138:	bl	12d84 <dcgettext@plt>
   1613c:	ldr	r2, [r7]
   16140:	mov	r7, r5
   16144:	mov	r1, r0
   16148:	mov	r0, #1
   1614c:	bl	13204 <__printf_chk@plt>
   16150:	mov	r0, r8
   16154:	bl	1303c <elf_end@plt>
   16158:	ldr	r2, [r4, #-12]
   1615c:	movw	r1, #55344	; 0xd830
   16160:	mov	r0, #1
   16164:	movt	r1, #3
   16168:	bl	13204 <__printf_chk@plt>
   1616c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16170:	add	r4, r4, #12
   16174:	add	r3, r3, r3, lsl #1
   16178:	add	r3, sl, r3, lsl #2
   1617c:	sub	r3, r3, #12
   16180:	cmp	r6, r3
   16184:	bcc	160e4 <__assert_fail@plt+0x2be0>
   16188:	ldr	r8, [fp, #-72]	; 0xffffffb8
   1618c:	b	16018 <__assert_fail@plt+0x2b14>
   16190:	sub	r4, fp, #36	; 0x24
   16194:	mov	r3, #0
   16198:	movw	r1, #14264	; 0x37b8
   1619c:	movt	r1, #1
   161a0:	strb	r3, [r4, #-12]!
   161a4:	mov	r2, r4
   161a8:	bl	1321c <dwfl_getmodules@plt>
   161ac:	rsbs	r0, r0, #1
   161b0:	movcc	r0, #0
   161b4:	str	r0, [fp, #-68]	; 0xffffffbc
   161b8:	b	15f6c <__assert_fail@plt+0x2a68>
   161bc:	ldr	r6, [fp, #-64]	; 0xffffffc0
   161c0:	b	15f48 <__assert_fail@plt+0x2a44>
   161c4:	mov	r2, #5
   161c8:	movw	r1, #55412	; 0xd874
   161cc:	mov	r0, #0
   161d0:	movt	r1, #3
   161d4:	bl	12d84 <dcgettext@plt>
   161d8:	ldr	ip, [fp, #-64]	; 0xffffffc0
   161dc:	ldr	r3, [r4, #36]	; 0x24
   161e0:	str	ip, [sp]
   161e4:	mov	r2, r0
   161e8:	mov	r0, #0
   161ec:	mov	r1, r0
   161f0:	bl	12f70 <error@plt>
   161f4:	b	15fb4 <__assert_fail@plt+0x2ab0>
   161f8:	movw	r1, #55132	; 0xd75c
   161fc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16200:	movt	r1, #3
   16204:	bl	13204 <__printf_chk@plt>
   16208:	b	16084 <__assert_fail@plt+0x2b80>
   1620c:	bl	12e80 <elf_errno@plt>
   16210:	cmp	r0, #18
   16214:	mov	r4, r0
   16218:	bne	162bc <__assert_fail@plt+0x2db8>
   1621c:	mov	r0, sl
   16220:	mov	r2, #5
   16224:	movw	r1, #55184	; 0xd790
   16228:	movt	r1, #3
   1622c:	bl	12d84 <dcgettext@plt>
   16230:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16234:	mov	r1, r0
   16238:	mov	r0, #1
   1623c:	bl	13204 <__printf_chk@plt>
   16240:	b	16018 <__assert_fail@plt+0x2b14>
   16244:	mov	r2, #5
   16248:	movw	r1, #54752	; 0xd5e0
   1624c:	movt	r1, #3
   16250:	bl	12d84 <dcgettext@plt>
   16254:	mov	r4, r0
   16258:	mvn	r0, #0
   1625c:	bl	130a8 <elf_errmsg@plt>
   16260:	mov	r1, r9
   16264:	mov	r2, r4
   16268:	mov	r3, r0
   1626c:	mov	r0, r9
   16270:	bl	12f70 <error@plt>
   16274:	b	15ec8 <__assert_fail@plt+0x29c4>
   16278:	mov	r2, #5
   1627c:	movw	r1, #55264	; 0xd7e0
   16280:	mov	r0, #0
   16284:	movt	r1, #3
   16288:	bl	12d84 <dcgettext@plt>
   1628c:	mov	r4, r0
   16290:	mvn	r0, #0
   16294:	bl	130a8 <elf_errmsg@plt>
   16298:	ldr	ip, [fp, #-64]	; 0xffffffc0
   1629c:	mov	r2, r4
   162a0:	mov	r3, r5
   162a4:	mov	r1, #0
   162a8:	str	ip, [sp]
   162ac:	str	r0, [sp, #4]
   162b0:	mov	r0, #1
   162b4:	bl	12f70 <error@plt>
   162b8:	bl	12dc0 <__stack_chk_fail@plt>
   162bc:	mov	r2, #5
   162c0:	movw	r1, #55140	; 0xd764
   162c4:	mov	r0, sl
   162c8:	movt	r1, #3
   162cc:	bl	12d84 <dcgettext@plt>
   162d0:	mov	r5, r0
   162d4:	mov	r0, r4
   162d8:	bl	130a8 <elf_errmsg@plt>
   162dc:	mov	r2, r5
   162e0:	mov	r1, sl
   162e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   162e8:	str	r0, [sp]
   162ec:	mov	r0, #1
   162f0:	bl	12f70 <error@plt>
   162f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162f8:	movw	r5, #37688	; 0x9338
   162fc:	sub	sp, sp, #52	; 0x34
   16300:	movt	r5, #5
   16304:	mov	r3, #0
   16308:	add	r4, sp, #32
   1630c:	ldr	r6, [sp, #100]	; 0x64
   16310:	mov	r9, r1
   16314:	ldr	lr, [r5]
   16318:	mov	r1, r3
   1631c:	str	r3, [sp, #4]
   16320:	mov	r8, r2
   16324:	str	r3, [sp, #8]
   16328:	mov	r2, r3
   1632c:	str	r3, [sp, #12]
   16330:	mov	fp, r0
   16334:	str	r4, [sp]
   16338:	mvn	r7, #0
   1633c:	str	r6, [sp, #28]
   16340:	mvn	r6, #0
   16344:	str	lr, [sp, #44]	; 0x2c
   16348:	ldr	sl, [sp, #96]	; 0x60
   1634c:	ldr	r4, [sp, #108]	; 0x6c
   16350:	bl	133a8 <dwfl_module_info@plt>
   16354:	ldrd	r2, [sp, #32]
   16358:	cmp	r3, r7
   1635c:	cmpeq	r2, r6
   16360:	beq	163ac <__assert_fail@plt+0x2ea8>
   16364:	ldrd	r2, [sp, #88]	; 0x58
   16368:	mov	r0, fp
   1636c:	ldr	r6, [sp, #28]
   16370:	mov	r1, r9
   16374:	ldr	r7, [sp, #104]	; 0x68
   16378:	strd	r2, [sp]
   1637c:	mov	r2, r8
   16380:	str	sl, [sp, #8]
   16384:	str	r6, [sp, #12]
   16388:	str	r7, [sp, #16]
   1638c:	str	r4, [sp, #20]
   16390:	bl	13330 <dwfl_standard_find_debuginfo@plt>
   16394:	ldr	r2, [sp, #44]	; 0x2c
   16398:	ldr	r3, [r5]
   1639c:	cmp	r2, r3
   163a0:	bne	163b4 <__assert_fail@plt+0x2eb0>
   163a4:	add	sp, sp, #52	; 0x34
   163a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163ac:	mvn	r0, #0
   163b0:	b	16394 <__assert_fail@plt+0x2e90>
   163b4:	bl	12dc0 <__stack_chk_fail@plt>
   163b8:	push	{r4, r5, r6, r7}
   163bc:	mov	ip, #8
   163c0:	ldr	r2, [r0]
   163c4:	ldr	r3, [r1]
   163c8:	ldr	r6, [r0, #24]
   163cc:	ldrb	r4, [r2, #5]
   163d0:	ldrb	r0, [r2, #4]
   163d4:	ldrb	r5, [r3, #4]
   163d8:	ldrb	r7, [r3, #5]
   163dc:	smlabb	r4, ip, r4, r0
   163e0:	ldrh	r0, [r2, #2]
   163e4:	smlabb	ip, ip, r7, r5
   163e8:	ldr	r5, [r1, #24]
   163ec:	ldrh	r1, [r3, #2]
   163f0:	rsb	r0, r0, r6
   163f4:	ldrh	r2, [r2]
   163f8:	rsb	r1, r1, r5
   163fc:	ldrh	r3, [r3]
   16400:	mul	r0, r4, r0
   16404:	mul	ip, ip, r1
   16408:	add	r0, r0, r2, lsl #3
   1640c:	pop	{r4, r5, r6, r7}
   16410:	add	ip, ip, r3, lsl #3
   16414:	rsb	r0, ip, r0
   16418:	bx	lr
   1641c:	ldr	r0, [r0]
   16420:	ldr	r1, [r1]
   16424:	ldr	r3, [r0, #28]
   16428:	ldr	r2, [r1, #28]
   1642c:	cmp	r2, r3
   16430:	beq	1643c <__assert_fail@plt+0x2f38>
   16434:	rsb	r0, r3, r2
   16438:	bx	lr
   1643c:	b	163b8 <__assert_fail@plt+0x2eb4>
   16440:	push	{r3, r4, r5, lr}
   16444:	mov	r4, r0
   16448:	ldr	r3, [r0]
   1644c:	mov	r5, r1
   16450:	cmp	r3, #0
   16454:	beq	164a8 <__assert_fail@plt+0x2fa4>
   16458:	ldr	r3, [r1]
   1645c:	cmp	r3, #0
   16460:	beq	164b8 <__assert_fail@plt+0x2fb4>
   16464:	ldr	r0, [r0, #4]
   16468:	ldr	r1, [r1, #4]
   1646c:	cmp	r0, r1
   16470:	beq	16480 <__assert_fail@plt+0x2f7c>
   16474:	bl	12cd0 <strcmp@plt>
   16478:	cmp	r0, #0
   1647c:	popne	{r3, r4, r5, pc}
   16480:	ldr	r0, [r5, #28]
   16484:	ldr	r3, [r4, #28]
   16488:	cmp	r0, r3
   1648c:	beq	16498 <__assert_fail@plt+0x2f94>
   16490:	rsb	r0, r3, r0
   16494:	pop	{r3, r4, r5, pc}
   16498:	mov	r0, r4
   1649c:	mov	r1, r5
   164a0:	pop	{r3, r4, r5, lr}
   164a4:	b	163b8 <__assert_fail@plt+0x2eb4>
   164a8:	ldr	r0, [r1]
   164ac:	adds	r0, r0, #0
   164b0:	movne	r0, #1
   164b4:	pop	{r3, r4, r5, pc}
   164b8:	mvn	r0, #0
   164bc:	pop	{r3, r4, r5, pc}
   164c0:	subs	r3, r0, #0
   164c4:	push	{r4, r5, r6, lr}
   164c8:	beq	16560 <__assert_fail@plt+0x305c>
   164cc:	tst	r3, #1
   164d0:	bne	164f4 <__assert_fail@plt+0x2ff0>
   164d4:	ldr	r4, [pc, #224]	; 165bc <__assert_fail@plt+0x30b8>
   164d8:	tst	r3, #2
   164dc:	moveq	r5, r4
   164e0:	bne	165b4 <__assert_fail@plt+0x30b0>
   164e4:	bics	r2, r3, #3
   164e8:	bne	16574 <__assert_fail@plt+0x3070>
   164ec:	mov	r0, r4
   164f0:	pop	{r4, r5, r6, pc}
   164f4:	movw	r1, #55452	; 0xd89c
   164f8:	movt	r1, #3
   164fc:	tst	r3, #2
   16500:	movw	r2, #37712	; 0x9350
   16504:	ldm	r1, {r0, r1}
   16508:	movt	r2, #5
   1650c:	addeq	r5, r2, #57	; 0x39
   16510:	addeq	r4, r2, #52	; 0x34
   16514:	str	r0, [r2, #52]	; 0x34
   16518:	strh	r1, [r2, #56]	; 0x38
   1651c:	beq	164e4 <__assert_fail@plt+0x2fe0>
   16520:	movw	r0, #55460	; 0xd8a4
   16524:	movt	r0, #3
   16528:	add	r1, r2, #59	; 0x3b
   1652c:	add	r4, r2, #52	; 0x34
   16530:	ldrh	ip, [r0]
   16534:	ldrb	r0, [r0, #2]
   16538:	strh	ip, [r2, #57]	; 0x39
   1653c:	strb	r0, [r2, #59]	; 0x3b
   16540:	movw	r2, #55464	; 0xd8a8
   16544:	movt	r2, #3
   16548:	add	r5, r1, #5
   1654c:	ldr	r0, [r2]
   16550:	ldrh	r2, [r2, #4]
   16554:	str	r0, [r1]
   16558:	strh	r2, [r1, #4]
   1655c:	b	164e4 <__assert_fail@plt+0x2fe0>
   16560:	movw	r1, #55444	; 0xd894
   16564:	mov	r2, #5
   16568:	movt	r1, #3
   1656c:	pop	{r4, r5, r6, lr}
   16570:	b	12d84 <dcgettext@plt>
   16574:	mov	r2, #5
   16578:	movw	r1, #55472	; 0xd8b0
   1657c:	mov	r0, #0
   16580:	movt	r1, #3
   16584:	bl	12d84 <dcgettext@plt>
   16588:	movw	r6, #37712	; 0x9350
   1658c:	movt	r6, #5
   16590:	mov	r3, #32
   16594:	add	r2, r6, #84	; 0x54
   16598:	rsb	r2, r5, r2
   1659c:	mov	r1, r0
   165a0:	mov	r0, r5
   165a4:	bl	12d9c <__strncpy_chk@plt>
   165a8:	mov	r3, #0
   165ac:	strb	r3, [r6, #83]	; 0x53
   165b0:	b	164ec <__assert_fail@plt+0x2fe8>
   165b4:	mov	r1, r4
   165b8:	b	16540 <__assert_fail@plt+0x303c>
   165bc:	andeq	r9, r5, r4, lsl #7
   165c0:	push	{lr}		; (str lr, [sp, #-4]!)
   165c4:	cmp	r0, #0
   165c8:	sub	sp, sp, #12
   165cc:	mov	ip, r1
   165d0:	ldrb	r1, [sp, #16]
   165d4:	beq	165e0 <__assert_fail@plt+0x30dc>
   165d8:	add	sp, sp, #12
   165dc:	pop	{pc}		; (ldr pc, [sp], #4)
   165e0:	adds	r0, r2, #0
   165e4:	movne	r0, #1
   165e8:	cmp	ip, r2
   165ec:	movcc	r0, #0
   165f0:	cmp	r0, #0
   165f4:	beq	16600 <__assert_fail@plt+0x30fc>
   165f8:	cmp	ip, r3
   165fc:	bls	1663c <__assert_fail@plt+0x3138>
   16600:	cmp	r1, #0
   16604:	movweq	r0, #8172	; 0x1fec
   16608:	movteq	r0, #4
   1660c:	beq	165d8 <__assert_fail@plt+0x30d4>
   16610:	mov	r1, #20
   16614:	str	ip, [sp, #4]
   16618:	movw	r2, #55496	; 0xd8c8
   1661c:	mov	r3, r1
   16620:	movt	r2, #3
   16624:	ldr	r0, [pc, #64]	; 1666c <__assert_fail@plt+0x3168>
   16628:	str	r2, [sp]
   1662c:	mov	r2, #1
   16630:	bl	134ec <__snprintf_chk@plt>
   16634:	ldr	r0, [pc, #48]	; 1666c <__assert_fail@plt+0x3168>
   16638:	b	165d8 <__assert_fail@plt+0x30d4>
   1663c:	mov	r1, #20
   16640:	rsb	r2, r2, ip
   16644:	movw	r0, #55484	; 0xd8bc
   16648:	str	r2, [sp, #4]
   1664c:	movt	r0, #3
   16650:	mov	r3, r1
   16654:	str	r0, [sp]
   16658:	mov	r2, #1
   1665c:	ldr	r0, [pc, #8]	; 1666c <__assert_fail@plt+0x3168>
   16660:	bl	134ec <__snprintf_chk@plt>
   16664:	ldr	r0, [pc]	; 1666c <__assert_fail@plt+0x3168>
   16668:	b	165d8 <__assert_fail@plt+0x30d4>
   1666c:	andeq	r9, r5, r4, lsr #7
   16670:	cmp	r0, #104	; 0x68
   16674:	mov	r1, r0
   16678:	push	{lr}		; (str lr, [sp, #-4]!)
   1667c:	sub	sp, sp, #12
   16680:	beq	1727c <__assert_fail@plt+0x3d78>
   16684:	bls	166ec <__assert_fail@plt+0x31e8>
   16688:	movw	r3, #8200	; 0x2008
   1668c:	cmp	r0, r3
   16690:	beq	16e1c <__assert_fail@plt+0x3918>
   16694:	bhi	1674c <__assert_fail@plt+0x3248>
   16698:	cmp	r0, #126	; 0x7e
   1669c:	beq	17468 <__assert_fail@plt+0x3f64>
   166a0:	bls	168b0 <__assert_fail@plt+0x33ac>
   166a4:	cmp	r0, #137	; 0x89
   166a8:	beq	17354 <__assert_fail@plt+0x3e50>
   166ac:	bhi	16a30 <__assert_fail@plt+0x352c>
   166b0:	cmp	r0, #131	; 0x83
   166b4:	beq	1739c <__assert_fail@plt+0x3e98>
   166b8:	bls	16b6c <__assert_fail@plt+0x3668>
   166bc:	cmp	r0, #134	; 0x86
   166c0:	beq	171b0 <__assert_fail@plt+0x3cac>
   166c4:	bhi	16fb0 <__assert_fail@plt+0x3aac>
   166c8:	cmp	r0, #132	; 0x84
   166cc:	movweq	r0, #56820	; 0xddf4
   166d0:	movteq	r0, #3
   166d4:	beq	16940 <__assert_fail@plt+0x343c>
   166d8:	cmp	r1, #133	; 0x85
   166dc:	movweq	r0, #56680	; 0xdd68
   166e0:	movteq	r0, #3
   166e4:	beq	16940 <__assert_fail@plt+0x343c>
   166e8:	b	168f4 <__assert_fail@plt+0x33f0>
   166ec:	cmp	r0, #61	; 0x3d
   166f0:	beq	17450 <__assert_fail@plt+0x3f4c>
   166f4:	bhi	167b8 <__assert_fail@plt+0x32b4>
   166f8:	cmp	r0, #30
   166fc:	beq	1745c <__assert_fail@plt+0x3f58>
   16700:	bls	16868 <__assert_fail@plt+0x3364>
   16704:	cmp	r0, #50	; 0x32
   16708:	beq	17348 <__assert_fail@plt+0x3e44>
   1670c:	bhi	16ab8 <__assert_fail@plt+0x35b4>
   16710:	cmp	r0, #39	; 0x27
   16714:	beq	1736c <__assert_fail@plt+0x3e68>
   16718:	bls	16bd8 <__assert_fail@plt+0x36d4>
   1671c:	cmp	r0, #46	; 0x2e
   16720:	beq	173d8 <__assert_fail@plt+0x3ed4>
   16724:	bhi	17000 <__assert_fail@plt+0x3afc>
   16728:	cmp	r0, #42	; 0x2a
   1672c:	movweq	r0, #57596	; 0xe0fc
   16730:	movteq	r0, #3
   16734:	beq	16940 <__assert_fail@plt+0x343c>
   16738:	cmp	r1, #44	; 0x2c
   1673c:	movweq	r0, #57712	; 0xe170
   16740:	movteq	r0, #3
   16744:	beq	16940 <__assert_fail@plt+0x343c>
   16748:	b	168f4 <__assert_fail@plt+0x33f0>
   1674c:	movw	r3, #8461	; 0x210d
   16750:	cmp	r0, r3
   16754:	beq	17444 <__assert_fail@plt+0x3f40>
   16758:	bls	1680c <__assert_fail@plt+0x3308>
   1675c:	movw	r3, #8472	; 0x2118
   16760:	cmp	r0, r3
   16764:	beq	17360 <__assert_fail@plt+0x3e5c>
   16768:	bhi	169a8 <__assert_fail@plt+0x34a4>
   1676c:	movw	r3, #8466	; 0x2112
   16770:	cmp	r0, r3
   16774:	beq	17264 <__assert_fail@plt+0x3d60>
   16778:	bls	16b9c <__assert_fail@plt+0x3698>
   1677c:	movw	r3, #8469	; 0x2115
   16780:	cmp	r0, r3
   16784:	beq	1712c <__assert_fail@plt+0x3c28>
   16788:	bhi	17074 <__assert_fail@plt+0x3b70>
   1678c:	movw	r3, #8467	; 0x2113
   16790:	cmp	r0, r3
   16794:	movweq	r0, #55624	; 0xd948
   16798:	movteq	r0, #3
   1679c:	beq	16940 <__assert_fail@plt+0x343c>
   167a0:	add	r3, r3, #1
   167a4:	cmp	r1, r3
   167a8:	movweq	r0, #55648	; 0xd960
   167ac:	movteq	r0, #3
   167b0:	beq	16940 <__assert_fail@plt+0x343c>
   167b4:	b	168f4 <__assert_fail@plt+0x33f0>
   167b8:	cmp	r0, #82	; 0x52
   167bc:	beq	17438 <__assert_fail@plt+0x3f34>
   167c0:	bls	168fc <__assert_fail@plt+0x33f8>
   167c4:	cmp	r0, #93	; 0x5d
   167c8:	beq	1733c <__assert_fail@plt+0x3e38>
   167cc:	bhi	169f4 <__assert_fail@plt+0x34f0>
   167d0:	cmp	r0, #87	; 0x57
   167d4:	beq	17108 <__assert_fail@plt+0x3c04>
   167d8:	bls	16d40 <__assert_fail@plt+0x383c>
   167dc:	cmp	r0, #90	; 0x5a
   167e0:	beq	173fc <__assert_fail@plt+0x3ef8>
   167e4:	bhi	16efc <__assert_fail@plt+0x39f8>
   167e8:	cmp	r0, #88	; 0x58
   167ec:	movweq	r0, #56716	; 0xdd8c
   167f0:	movteq	r0, #3
   167f4:	beq	16940 <__assert_fail@plt+0x343c>
   167f8:	cmp	r1, #89	; 0x59
   167fc:	movweq	r0, #56728	; 0xdd98
   16800:	movteq	r0, #3
   16804:	beq	16940 <__assert_fail@plt+0x343c>
   16808:	b	168f4 <__assert_fail@plt+0x33f0>
   1680c:	movw	r3, #8450	; 0x2102
   16810:	cmp	r0, r3
   16814:	beq	1742c <__assert_fail@plt+0x3f28>
   16818:	bhi	1695c <__assert_fail@plt+0x3458>
   1681c:	movw	r3, #8205	; 0x200d
   16820:	cmp	r0, r3
   16824:	beq	17384 <__assert_fail@plt+0x3e80>
   16828:	bls	16c08 <__assert_fail@plt+0x3704>
   1682c:	movw	r3, #8208	; 0x2010
   16830:	cmp	r0, r3
   16834:	beq	17138 <__assert_fail@plt+0x3c34>
   16838:	bhi	170a0 <__assert_fail@plt+0x3b9c>
   1683c:	movw	r3, #8206	; 0x200e
   16840:	cmp	r0, r3
   16844:	movweq	r0, #56272	; 0xdbd0
   16848:	movteq	r0, #3
   1684c:	beq	16940 <__assert_fail@plt+0x343c>
   16850:	add	r3, r3, #1
   16854:	cmp	r1, r3
   16858:	movweq	r0, #56064	; 0xdb00
   1685c:	movteq	r0, #3
   16860:	beq	16940 <__assert_fail@plt+0x343c>
   16864:	b	168f4 <__assert_fail@plt+0x33f0>
   16868:	cmp	r0, #18
   1686c:	beq	17288 <__assert_fail@plt+0x3d84>
   16870:	bhi	16af4 <__assert_fail@plt+0x35f0>
   16874:	cmp	r0, #11
   16878:	beq	16e10 <__assert_fail@plt+0x390c>
   1687c:	bhi	16e40 <__assert_fail@plt+0x393c>
   16880:	cmp	r0, #2
   16884:	beq	17114 <__assert_fail@plt+0x3c10>
   16888:	bls	170f4 <__assert_fail@plt+0x3bf0>
   1688c:	cmp	r0, #3
   16890:	movweq	r0, #57368	; 0xe018
   16894:	movteq	r0, #3
   16898:	beq	16940 <__assert_fail@plt+0x343c>
   1689c:	cmp	r1, #9
   168a0:	movweq	r0, #57504	; 0xe0a0
   168a4:	movteq	r0, #3
   168a8:	beq	16940 <__assert_fail@plt+0x343c>
   168ac:	b	168f4 <__assert_fail@plt+0x33f0>
   168b0:	cmp	r0, #114	; 0x72
   168b4:	beq	171c8 <__assert_fail@plt+0x3cc4>
   168b8:	bhi	16a7c <__assert_fail@plt+0x3578>
   168bc:	cmp	r0, #109	; 0x6d
   168c0:	beq	16e34 <__assert_fail@plt+0x3930>
   168c4:	bhi	16e70 <__assert_fail@plt+0x396c>
   168c8:	cmp	r0, #106	; 0x6a
   168cc:	beq	17120 <__assert_fail@plt+0x3c1c>
   168d0:	bcc	17168 <__assert_fail@plt+0x3c64>
   168d4:	cmp	r0, #107	; 0x6b
   168d8:	movweq	r0, #56956	; 0xde7c
   168dc:	movteq	r0, #3
   168e0:	beq	16940 <__assert_fail@plt+0x343c>
   168e4:	cmp	r1, #108	; 0x6c
   168e8:	movweq	r0, #56908	; 0xde4c
   168ec:	movteq	r0, #3
   168f0:	beq	16940 <__assert_fail@plt+0x343c>
   168f4:	mov	r0, #0
   168f8:	b	16940 <__assert_fail@plt+0x343c>
   168fc:	cmp	r0, #71	; 0x47
   16900:	beq	172e8 <__assert_fail@plt+0x3de4>
   16904:	bhi	16b30 <__assert_fail@plt+0x362c>
   16908:	cmp	r0, #66	; 0x42
   1690c:	beq	16e28 <__assert_fail@plt+0x3924>
   16910:	bhi	16ea0 <__assert_fail@plt+0x399c>
   16914:	cmp	r0, #63	; 0x3f
   16918:	beq	17414 <__assert_fail@plt+0x3f10>
   1691c:	bcc	172dc <__assert_fail@plt+0x3dd8>
   16920:	cmp	r0, #64	; 0x40
   16924:	movweq	r0, #57276	; 0xdfbc
   16928:	movteq	r0, #3
   1692c:	beq	16940 <__assert_fail@plt+0x343c>
   16930:	cmp	r1, #65	; 0x41
   16934:	movweq	r0, #57288	; 0xdfc8
   16938:	movteq	r0, #3
   1693c:	bne	168f4 <__assert_fail@plt+0x33f0>
   16940:	mov	r3, #1
   16944:	mov	r2, #8192	; 0x2000
   16948:	str	r3, [sp]
   1694c:	movw	r3, #16383	; 0x3fff
   16950:	bl	165c0 <__assert_fail@plt+0x30bc>
   16954:	add	sp, sp, #12
   16958:	pop	{pc}		; (ldr pc, [sp], #4)
   1695c:	movw	r3, #8455	; 0x2107
   16960:	cmp	r0, r3
   16964:	beq	171bc <__assert_fail@plt+0x3cb8>
   16968:	bls	16ca4 <__assert_fail@plt+0x37a0>
   1696c:	movw	r3, #8458	; 0x210a
   16970:	cmp	r0, r3
   16974:	beq	17198 <__assert_fail@plt+0x3c94>
   16978:	bhi	17048 <__assert_fail@plt+0x3b44>
   1697c:	movw	r3, #8456	; 0x2108
   16980:	cmp	r0, r3
   16984:	movweq	r0, #55800	; 0xd9f8
   16988:	movteq	r0, #3
   1698c:	beq	16940 <__assert_fail@plt+0x343c>
   16990:	add	r3, r3, #1
   16994:	cmp	r1, r3
   16998:	movweq	r0, #55900	; 0xda5c
   1699c:	movteq	r0, #3
   169a0:	beq	16940 <__assert_fail@plt+0x343c>
   169a4:	b	168f4 <__assert_fail@plt+0x33f0>
   169a8:	movw	r3, #8498	; 0x2132
   169ac:	cmp	r0, r3
   169b0:	beq	17390 <__assert_fail@plt+0x3e8c>
   169b4:	bls	16d70 <__assert_fail@plt+0x386c>
   169b8:	movw	r3, #8501	; 0x2135
   169bc:	cmp	r0, r3
   169c0:	beq	173cc <__assert_fail@plt+0x3ec8>
   169c4:	bhi	16fd4 <__assert_fail@plt+0x3ad0>
   169c8:	movw	r3, #8499	; 0x2133
   169cc:	cmp	r0, r3
   169d0:	movweq	r0, #55508	; 0xd8d4
   169d4:	movteq	r0, #3
   169d8:	beq	16940 <__assert_fail@plt+0x343c>
   169dc:	add	r3, r3, #1
   169e0:	cmp	r1, r3
   169e4:	movweq	r0, #55920	; 0xda70
   169e8:	movteq	r0, #3
   169ec:	beq	16940 <__assert_fail@plt+0x343c>
   169f0:	b	168f4 <__assert_fail@plt+0x33f0>
   169f4:	cmp	r0, #98	; 0x62
   169f8:	beq	17294 <__assert_fail@plt+0x3d90>
   169fc:	bls	16ce0 <__assert_fail@plt+0x37dc>
   16a00:	cmp	r0, #101	; 0x65
   16a04:	beq	17408 <__assert_fail@plt+0x3f04>
   16a08:	bhi	16f20 <__assert_fail@plt+0x3a1c>
   16a0c:	cmp	r0, #99	; 0x63
   16a10:	movweq	r0, #57224	; 0xdf88
   16a14:	movteq	r0, #3
   16a18:	beq	16940 <__assert_fail@plt+0x343c>
   16a1c:	cmp	r1, #100	; 0x64
   16a20:	movweq	r0, #57488	; 0xe090
   16a24:	movteq	r0, #3
   16a28:	beq	16940 <__assert_fail@plt+0x343c>
   16a2c:	b	168f4 <__assert_fail@plt+0x33f0>
   16a30:	movw	r3, #8194	; 0x2002
   16a34:	cmp	r0, r3
   16a38:	beq	17270 <__assert_fail@plt+0x3d6c>
   16a3c:	bls	16ddc <__assert_fail@plt+0x38d8>
   16a40:	movw	r3, #8197	; 0x2005
   16a44:	cmp	r0, r3
   16a48:	beq	17420 <__assert_fail@plt+0x3f1c>
   16a4c:	bhi	16ed0 <__assert_fail@plt+0x39cc>
   16a50:	movw	r3, #8195	; 0x2003
   16a54:	cmp	r0, r3
   16a58:	movweq	r0, #56376	; 0xdc38
   16a5c:	movteq	r0, #3
   16a60:	beq	16940 <__assert_fail@plt+0x343c>
   16a64:	add	r3, r3, #1
   16a68:	cmp	r1, r3
   16a6c:	movweq	r0, #56160	; 0xdb60
   16a70:	movteq	r0, #3
   16a74:	beq	16940 <__assert_fail@plt+0x343c>
   16a78:	b	168f4 <__assert_fail@plt+0x33f0>
   16a7c:	cmp	r0, #120	; 0x78
   16a80:	beq	1715c <__assert_fail@plt+0x3c58>
   16a84:	bls	16c44 <__assert_fail@plt+0x3740>
   16a88:	cmp	r0, #123	; 0x7b
   16a8c:	beq	1721c <__assert_fail@plt+0x3d18>
   16a90:	bhi	16f44 <__assert_fail@plt+0x3a40>
   16a94:	cmp	r0, #121	; 0x79
   16a98:	movweq	r0, #55856	; 0xda30
   16a9c:	movteq	r0, #3
   16aa0:	beq	16940 <__assert_fail@plt+0x343c>
   16aa4:	cmp	r1, #122	; 0x7a
   16aa8:	movweq	r0, #56608	; 0xdd20
   16aac:	movteq	r0, #3
   16ab0:	beq	16940 <__assert_fail@plt+0x343c>
   16ab4:	b	168f4 <__assert_fail@plt+0x33f0>
   16ab8:	cmp	r0, #55	; 0x37
   16abc:	beq	17378 <__assert_fail@plt+0x3e74>
   16ac0:	bls	16dac <__assert_fail@plt+0x38a8>
   16ac4:	cmp	r0, #58	; 0x3a
   16ac8:	beq	171a4 <__assert_fail@plt+0x3ca0>
   16acc:	bhi	16f8c <__assert_fail@plt+0x3a88>
   16ad0:	cmp	r0, #56	; 0x38
   16ad4:	movweq	r0, #56988	; 0xde9c
   16ad8:	movteq	r0, #3
   16adc:	beq	16940 <__assert_fail@plt+0x343c>
   16ae0:	cmp	r1, #57	; 0x39
   16ae4:	movweq	r0, #57044	; 0xded4
   16ae8:	movteq	r0, #3
   16aec:	beq	16940 <__assert_fail@plt+0x343c>
   16af0:	b	168f4 <__assert_fail@plt+0x33f0>
   16af4:	cmp	r0, #24
   16af8:	beq	172a0 <__assert_fail@plt+0x3d9c>
   16afc:	bls	16c74 <__assert_fail@plt+0x3770>
   16b00:	cmp	r0, #27
   16b04:	beq	1718c <__assert_fail@plt+0x3c88>
   16b08:	bhi	17024 <__assert_fail@plt+0x3b20>
   16b0c:	cmp	r0, #25
   16b10:	movweq	r0, #57768	; 0xe1a8
   16b14:	movteq	r0, #3
   16b18:	beq	16940 <__assert_fail@plt+0x343c>
   16b1c:	cmp	r1, #26
   16b20:	movweq	r0, #56876	; 0xde2c
   16b24:	movteq	r0, #3
   16b28:	beq	16940 <__assert_fail@plt+0x343c>
   16b2c:	b	168f4 <__assert_fail@plt+0x33f0>
   16b30:	cmp	r0, #76	; 0x4c
   16b34:	beq	173a8 <__assert_fail@plt+0x3ea4>
   16b38:	bls	16d10 <__assert_fail@plt+0x380c>
   16b3c:	cmp	r0, #79	; 0x4f
   16b40:	beq	17228 <__assert_fail@plt+0x3d24>
   16b44:	bhi	16f68 <__assert_fail@plt+0x3a64>
   16b48:	cmp	r0, #77	; 0x4d
   16b4c:	movweq	r0, #57944	; 0xe258
   16b50:	movteq	r0, #3
   16b54:	beq	16940 <__assert_fail@plt+0x343c>
   16b58:	cmp	r1, #78	; 0x4e
   16b5c:	movweq	r0, #56460	; 0xdc8c
   16b60:	movteq	r0, #3
   16b64:	beq	16940 <__assert_fail@plt+0x343c>
   16b68:	b	168f4 <__assert_fail@plt+0x33f0>
   16b6c:	cmp	r0, #128	; 0x80
   16b70:	beq	17240 <__assert_fail@plt+0x3d3c>
   16b74:	bcc	17234 <__assert_fail@plt+0x3d30>
   16b78:	cmp	r0, #129	; 0x81
   16b7c:	movweq	r0, #56768	; 0xddc0
   16b80:	movteq	r0, #3
   16b84:	beq	16940 <__assert_fail@plt+0x343c>
   16b88:	cmp	r1, #130	; 0x82
   16b8c:	movweq	r0, #56792	; 0xddd8
   16b90:	movteq	r0, #3
   16b94:	beq	16940 <__assert_fail@plt+0x343c>
   16b98:	b	168f4 <__assert_fail@plt+0x33f0>
   16b9c:	movw	r3, #8463	; 0x210f
   16ba0:	cmp	r0, r3
   16ba4:	beq	17210 <__assert_fail@plt+0x3d0c>
   16ba8:	bcc	17204 <__assert_fail@plt+0x3d00>
   16bac:	add	r3, r3, #1
   16bb0:	cmp	r0, r3
   16bb4:	movweq	r0, #56012	; 0xdacc
   16bb8:	movteq	r0, #3
   16bbc:	beq	16940 <__assert_fail@plt+0x343c>
   16bc0:	add	r3, r3, #1
   16bc4:	cmp	r1, r3
   16bc8:	movweq	r0, #55680	; 0xd980
   16bcc:	movteq	r0, #3
   16bd0:	beq	16940 <__assert_fail@plt+0x343c>
   16bd4:	b	168f4 <__assert_fail@plt+0x33f0>
   16bd8:	cmp	r0, #33	; 0x21
   16bdc:	beq	171f8 <__assert_fail@plt+0x3cf4>
   16be0:	bls	170e0 <__assert_fail@plt+0x3bdc>
   16be4:	cmp	r0, #34	; 0x22
   16be8:	movweq	r0, #57400	; 0xe038
   16bec:	movteq	r0, #3
   16bf0:	beq	16940 <__assert_fail@plt+0x343c>
   16bf4:	cmp	r1, #37	; 0x25
   16bf8:	movweq	r0, #57544	; 0xe0c8
   16bfc:	movteq	r0, #3
   16c00:	beq	16940 <__assert_fail@plt+0x343c>
   16c04:	b	168f4 <__assert_fail@plt+0x33f0>
   16c08:	movw	r3, #8202	; 0x200a
   16c0c:	cmp	r0, r3
   16c10:	beq	173c0 <__assert_fail@plt+0x3ebc>
   16c14:	bcc	173b4 <__assert_fail@plt+0x3eb0>
   16c18:	add	r3, r3, #1
   16c1c:	cmp	r0, r3
   16c20:	movweq	r0, #56192	; 0xdb80
   16c24:	movteq	r0, #3
   16c28:	beq	16940 <__assert_fail@plt+0x343c>
   16c2c:	add	r3, r3, #1
   16c30:	cmp	r1, r3
   16c34:	movweq	r0, #56336	; 0xdc10
   16c38:	movteq	r0, #3
   16c3c:	beq	16940 <__assert_fail@plt+0x343c>
   16c40:	b	168f4 <__assert_fail@plt+0x33f0>
   16c44:	cmp	r0, #116	; 0x74
   16c48:	beq	17330 <__assert_fail@plt+0x3e2c>
   16c4c:	bcc	17324 <__assert_fail@plt+0x3e20>
   16c50:	cmp	r0, #118	; 0x76
   16c54:	movweq	r0, #55728	; 0xd9b0
   16c58:	movteq	r0, #3
   16c5c:	beq	16940 <__assert_fail@plt+0x343c>
   16c60:	cmp	r1, #119	; 0x77
   16c64:	movweq	r0, #18880	; 0x49c0
   16c68:	movteq	r0, #4
   16c6c:	beq	16940 <__assert_fail@plt+0x343c>
   16c70:	b	168f4 <__assert_fail@plt+0x33f0>
   16c74:	cmp	r0, #21
   16c78:	beq	171ec <__assert_fail@plt+0x3ce8>
   16c7c:	bls	170cc <__assert_fail@plt+0x3bc8>
   16c80:	cmp	r0, #22
   16c84:	movweq	r0, #57164	; 0xdf4c
   16c88:	movteq	r0, #3
   16c8c:	beq	16940 <__assert_fail@plt+0x343c>
   16c90:	cmp	r1, #23
   16c94:	movweq	r0, #57932	; 0xe24c
   16c98:	movteq	r0, #3
   16c9c:	beq	16940 <__assert_fail@plt+0x343c>
   16ca0:	b	168f4 <__assert_fail@plt+0x33f0>
   16ca4:	movw	r3, #8452	; 0x2104
   16ca8:	cmp	r0, r3
   16cac:	beq	17258 <__assert_fail@plt+0x3d54>
   16cb0:	bcc	1724c <__assert_fail@plt+0x3d48>
   16cb4:	add	r3, r3, #1
   16cb8:	cmp	r0, r3
   16cbc:	movweq	r0, #56560	; 0xdcf0
   16cc0:	movteq	r0, #3
   16cc4:	beq	16940 <__assert_fail@plt+0x343c>
   16cc8:	add	r3, r3, #1
   16ccc:	cmp	r1, r3
   16cd0:	movweq	r0, #56572	; 0xdcfc
   16cd4:	movteq	r0, #3
   16cd8:	beq	16940 <__assert_fail@plt+0x343c>
   16cdc:	b	168f4 <__assert_fail@plt+0x33f0>
   16ce0:	cmp	r0, #95	; 0x5f
   16ce4:	beq	17480 <__assert_fail@plt+0x3f7c>
   16ce8:	bcc	17474 <__assert_fail@plt+0x3f70>
   16cec:	cmp	r0, #96	; 0x60
   16cf0:	movweq	r0, #57516	; 0xe0ac
   16cf4:	movteq	r0, #3
   16cf8:	beq	16940 <__assert_fail@plt+0x343c>
   16cfc:	cmp	r1, #97	; 0x61
   16d00:	movweq	r0, #57452	; 0xe06c
   16d04:	movteq	r0, #3
   16d08:	beq	16940 <__assert_fail@plt+0x343c>
   16d0c:	b	168f4 <__assert_fail@plt+0x33f0>
   16d10:	cmp	r0, #73	; 0x49
   16d14:	beq	172b8 <__assert_fail@plt+0x3db4>
   16d18:	bcc	172ac <__assert_fail@plt+0x3da8>
   16d1c:	cmp	r0, #74	; 0x4a
   16d20:	movweq	r0, #57884	; 0xe21c
   16d24:	movteq	r0, #3
   16d28:	beq	16940 <__assert_fail@plt+0x343c>
   16d2c:	cmp	r1, #75	; 0x4b
   16d30:	movweq	r0, #57900	; 0xe22c
   16d34:	movteq	r0, #3
   16d38:	beq	16940 <__assert_fail@plt+0x343c>
   16d3c:	b	168f4 <__assert_fail@plt+0x33f0>
   16d40:	cmp	r0, #84	; 0x54
   16d44:	beq	17150 <__assert_fail@plt+0x3c4c>
   16d48:	bcc	17144 <__assert_fail@plt+0x3c40>
   16d4c:	cmp	r0, #85	; 0x55
   16d50:	movweq	r0, #19312	; 0x4b70
   16d54:	movteq	r0, #4
   16d58:	beq	16940 <__assert_fail@plt+0x343c>
   16d5c:	cmp	r1, #86	; 0x56
   16d60:	movweq	r0, #57848	; 0xe1f8
   16d64:	movteq	r0, #3
   16d68:	beq	16940 <__assert_fail@plt+0x343c>
   16d6c:	b	168f4 <__assert_fail@plt+0x33f0>
   16d70:	movw	r3, #8474	; 0x211a
   16d74:	cmp	r0, r3
   16d78:	beq	173f0 <__assert_fail@plt+0x3eec>
   16d7c:	bcc	173e4 <__assert_fail@plt+0x3ee0>
   16d80:	add	r3, r3, #22
   16d84:	cmp	r0, r3
   16d88:	movweq	r0, #55724	; 0xd9ac
   16d8c:	movteq	r0, #3
   16d90:	beq	16940 <__assert_fail@plt+0x343c>
   16d94:	add	r3, r3, #1
   16d98:	cmp	r1, r3
   16d9c:	movweq	r0, #55712	; 0xd9a0
   16da0:	movteq	r0, #3
   16da4:	beq	16940 <__assert_fail@plt+0x343c>
   16da8:	b	168f4 <__assert_fail@plt+0x33f0>
   16dac:	cmp	r0, #52	; 0x34
   16db0:	beq	17318 <__assert_fail@plt+0x3e14>
   16db4:	bcc	1730c <__assert_fail@plt+0x3e08>
   16db8:	cmp	r0, #53	; 0x35
   16dbc:	movweq	r0, #56496	; 0xdcb0
   16dc0:	movteq	r0, #3
   16dc4:	beq	16940 <__assert_fail@plt+0x343c>
   16dc8:	cmp	r1, #54	; 0x36
   16dcc:	movweq	r0, #56856	; 0xde18
   16dd0:	movteq	r0, #3
   16dd4:	beq	16940 <__assert_fail@plt+0x343c>
   16dd8:	b	168f4 <__assert_fail@plt+0x33f0>
   16ddc:	cmp	r0, #139	; 0x8b
   16de0:	beq	171e0 <__assert_fail@plt+0x3cdc>
   16de4:	bcc	171d4 <__assert_fail@plt+0x3cd0>
   16de8:	cmp	r0, #140	; 0x8c
   16dec:	movweq	r0, #57376	; 0xe020
   16df0:	movteq	r0, #3
   16df4:	beq	16940 <__assert_fail@plt+0x343c>
   16df8:	movw	r3, #8193	; 0x2001
   16dfc:	cmp	r1, r3
   16e00:	movweq	r0, #56180	; 0xdb74
   16e04:	movteq	r0, #3
   16e08:	beq	16940 <__assert_fail@plt+0x343c>
   16e0c:	b	168f4 <__assert_fail@plt+0x33f0>
   16e10:	movw	r0, #56584	; 0xdd08
   16e14:	movt	r0, #3
   16e18:	b	16940 <__assert_fail@plt+0x343c>
   16e1c:	movw	r0, #56324	; 0xdc04
   16e20:	movt	r0, #3
   16e24:	b	16940 <__assert_fail@plt+0x343c>
   16e28:	movw	r0, #57304	; 0xdfd8
   16e2c:	movt	r0, #3
   16e30:	b	16940 <__assert_fail@plt+0x343c>
   16e34:	movw	r0, #57212	; 0xdf7c
   16e38:	movt	r0, #3
   16e3c:	b	16940 <__assert_fail@plt+0x343c>
   16e40:	cmp	r0, #13
   16e44:	beq	172d0 <__assert_fail@plt+0x3dcc>
   16e48:	bcc	172c4 <__assert_fail@plt+0x3dc0>
   16e4c:	cmp	r0, #16
   16e50:	movweq	r0, #57736	; 0xe188
   16e54:	movteq	r0, #3
   16e58:	beq	16940 <__assert_fail@plt+0x343c>
   16e5c:	cmp	r1, #17
   16e60:	movweq	r0, #57392	; 0xe030
   16e64:	movteq	r0, #3
   16e68:	beq	16940 <__assert_fail@plt+0x343c>
   16e6c:	b	168f4 <__assert_fail@plt+0x33f0>
   16e70:	cmp	r0, #111	; 0x6f
   16e74:	beq	17300 <__assert_fail@plt+0x3dfc>
   16e78:	bcc	172f4 <__assert_fail@plt+0x3df0>
   16e7c:	cmp	r0, #112	; 0x70
   16e80:	movweq	r0, #57808	; 0xe1d0
   16e84:	movteq	r0, #3
   16e88:	beq	16940 <__assert_fail@plt+0x343c>
   16e8c:	cmp	r1, #113	; 0x71
   16e90:	movweq	r0, #57576	; 0xe0e8
   16e94:	movteq	r0, #3
   16e98:	beq	16940 <__assert_fail@plt+0x343c>
   16e9c:	b	168f4 <__assert_fail@plt+0x33f0>
   16ea0:	cmp	r0, #68	; 0x44
   16ea4:	beq	17180 <__assert_fail@plt+0x3c7c>
   16ea8:	bcc	17174 <__assert_fail@plt+0x3c70>
   16eac:	cmp	r0, #69	; 0x45
   16eb0:	movweq	r0, #57532	; 0xe0bc
   16eb4:	movteq	r0, #3
   16eb8:	beq	16940 <__assert_fail@plt+0x343c>
   16ebc:	cmp	r1, #70	; 0x46
   16ec0:	movweq	r0, #20244	; 0x4f14
   16ec4:	movteq	r0, #4
   16ec8:	beq	16940 <__assert_fail@plt+0x343c>
   16ecc:	b	168f4 <__assert_fail@plt+0x33f0>
   16ed0:	movw	r3, #8198	; 0x2006
   16ed4:	cmp	r0, r3
   16ed8:	movweq	r0, #56292	; 0xdbe4
   16edc:	movteq	r0, #3
   16ee0:	beq	16940 <__assert_fail@plt+0x343c>
   16ee4:	add	r3, r3, #1
   16ee8:	cmp	r1, r3
   16eec:	movweq	r0, #56212	; 0xdb94
   16ef0:	movteq	r0, #3
   16ef4:	beq	16940 <__assert_fail@plt+0x343c>
   16ef8:	b	168f4 <__assert_fail@plt+0x33f0>
   16efc:	cmp	r0, #91	; 0x5b
   16f00:	movweq	r0, #56508	; 0xdcbc
   16f04:	movteq	r0, #3
   16f08:	beq	16940 <__assert_fail@plt+0x343c>
   16f0c:	cmp	r1, #92	; 0x5c
   16f10:	movweq	r0, #57012	; 0xdeb4
   16f14:	movteq	r0, #3
   16f18:	beq	16940 <__assert_fail@plt+0x343c>
   16f1c:	b	168f4 <__assert_fail@plt+0x33f0>
   16f20:	cmp	r0, #102	; 0x66
   16f24:	movweq	r0, #57176	; 0xdf58
   16f28:	movteq	r0, #3
   16f2c:	beq	16940 <__assert_fail@plt+0x343c>
   16f30:	cmp	r1, #103	; 0x67
   16f34:	movweq	r0, #57568	; 0xe0e0
   16f38:	movteq	r0, #3
   16f3c:	beq	16940 <__assert_fail@plt+0x343c>
   16f40:	b	168f4 <__assert_fail@plt+0x33f0>
   16f44:	cmp	r0, #124	; 0x7c
   16f48:	movweq	r0, #56648	; 0xdd48
   16f4c:	movteq	r0, #3
   16f50:	beq	16940 <__assert_fail@plt+0x343c>
   16f54:	cmp	r1, #125	; 0x7d
   16f58:	movweq	r0, #56776	; 0xddc8
   16f5c:	movteq	r0, #3
   16f60:	beq	16940 <__assert_fail@plt+0x343c>
   16f64:	b	168f4 <__assert_fail@plt+0x33f0>
   16f68:	cmp	r0, #80	; 0x50
   16f6c:	movweq	r0, #56972	; 0xde8c
   16f70:	movteq	r0, #3
   16f74:	beq	16940 <__assert_fail@plt+0x343c>
   16f78:	cmp	r1, #81	; 0x51
   16f7c:	movweq	r0, #56596	; 0xdd14
   16f80:	movteq	r0, #3
   16f84:	beq	16940 <__assert_fail@plt+0x343c>
   16f88:	b	168f4 <__assert_fail@plt+0x33f0>
   16f8c:	cmp	r0, #59	; 0x3b
   16f90:	movweq	r0, #57068	; 0xdeec
   16f94:	movteq	r0, #3
   16f98:	beq	16940 <__assert_fail@plt+0x343c>
   16f9c:	cmp	r1, #60	; 0x3c
   16fa0:	movweq	r0, #57080	; 0xdef8
   16fa4:	movteq	r0, #3
   16fa8:	beq	16940 <__assert_fail@plt+0x343c>
   16fac:	b	168f4 <__assert_fail@plt+0x33f0>
   16fb0:	cmp	r0, #135	; 0x87
   16fb4:	movweq	r0, #57476	; 0xe084
   16fb8:	movteq	r0, #3
   16fbc:	beq	16940 <__assert_fail@plt+0x343c>
   16fc0:	cmp	r1, #136	; 0x88
   16fc4:	movweq	r0, #56448	; 0xdc80
   16fc8:	movteq	r0, #3
   16fcc:	beq	16940 <__assert_fail@plt+0x343c>
   16fd0:	b	168f4 <__assert_fail@plt+0x33f0>
   16fd4:	movw	r3, #8503	; 0x2137
   16fd8:	cmp	r0, r3
   16fdc:	movweq	r0, #55836	; 0xda1c
   16fe0:	movteq	r0, #3
   16fe4:	beq	16940 <__assert_fail@plt+0x343c>
   16fe8:	add	r3, r3, #1
   16fec:	cmp	r1, r3
   16ff0:	movweq	r0, #55740	; 0xd9bc
   16ff4:	movteq	r0, #3
   16ff8:	beq	16940 <__assert_fail@plt+0x343c>
   16ffc:	b	168f4 <__assert_fail@plt+0x33f0>
   17000:	cmp	r0, #47	; 0x2f
   17004:	movweq	r0, #57860	; 0xe204
   17008:	movteq	r0, #3
   1700c:	beq	16940 <__assert_fail@plt+0x343c>
   17010:	cmp	r1, #49	; 0x31
   17014:	movweq	r0, #56400	; 0xdc50
   17018:	movteq	r0, #3
   1701c:	beq	16940 <__assert_fail@plt+0x343c>
   17020:	b	168f4 <__assert_fail@plt+0x33f0>
   17024:	cmp	r0, #28
   17028:	movweq	r0, #56920	; 0xde58
   1702c:	movteq	r0, #3
   17030:	beq	16940 <__assert_fail@plt+0x343c>
   17034:	cmp	r1, #29
   17038:	movweq	r0, #56932	; 0xde64
   1703c:	movteq	r0, #3
   17040:	beq	16940 <__assert_fail@plt+0x343c>
   17044:	b	168f4 <__assert_fail@plt+0x33f0>
   17048:	movw	r3, #8459	; 0x210b
   1704c:	cmp	r0, r3
   17050:	movweq	r0, #55884	; 0xda4c
   17054:	movteq	r0, #3
   17058:	beq	16940 <__assert_fail@plt+0x343c>
   1705c:	add	r3, r3, #1
   17060:	cmp	r1, r3
   17064:	movweq	r0, #55816	; 0xda08
   17068:	movteq	r0, #3
   1706c:	beq	16940 <__assert_fail@plt+0x343c>
   17070:	b	168f4 <__assert_fail@plt+0x33f0>
   17074:	movw	r3, #8470	; 0x2116
   17078:	cmp	r0, r3
   1707c:	movweq	r0, #55572	; 0xd914
   17080:	movteq	r0, #3
   17084:	beq	16940 <__assert_fail@plt+0x343c>
   17088:	add	r3, r3, #1
   1708c:	cmp	r1, r3
   17090:	movweq	r0, #55524	; 0xd8e4
   17094:	movteq	r0, #3
   17098:	beq	16940 <__assert_fail@plt+0x343c>
   1709c:	b	168f4 <__assert_fail@plt+0x33f0>
   170a0:	movw	r3, #8209	; 0x2011
   170a4:	cmp	r0, r3
   170a8:	movweq	r0, #56120	; 0xdb38
   170ac:	movteq	r0, #3
   170b0:	beq	16940 <__assert_fail@plt+0x343c>
   170b4:	add	r3, r3, #240	; 0xf0
   170b8:	cmp	r1, r3
   170bc:	movweq	r0, #57644	; 0xe12c
   170c0:	movteq	r0, #3
   170c4:	beq	16940 <__assert_fail@plt+0x343c>
   170c8:	b	168f4 <__assert_fail@plt+0x33f0>
   170cc:	cmp	r0, #19
   170d0:	movweq	r0, #57348	; 0xe004
   170d4:	movteq	r0, #3
   170d8:	beq	16940 <__assert_fail@plt+0x343c>
   170dc:	b	168f4 <__assert_fail@plt+0x33f0>
   170e0:	cmp	r0, #32
   170e4:	movweq	r0, #57328	; 0xdff0
   170e8:	movteq	r0, #3
   170ec:	beq	16940 <__assert_fail@plt+0x343c>
   170f0:	b	168f4 <__assert_fail@plt+0x33f0>
   170f4:	cmp	r0, #1
   170f8:	movweq	r0, #57656	; 0xe138
   170fc:	movteq	r0, #3
   17100:	beq	16940 <__assert_fail@plt+0x343c>
   17104:	b	168f4 <__assert_fail@plt+0x33f0>
   17108:	movw	r0, #56668	; 0xdd5c
   1710c:	movt	r0, #3
   17110:	b	16940 <__assert_fail@plt+0x343c>
   17114:	movw	r0, #57888	; 0xe220
   17118:	movt	r0, #3
   1711c:	b	16940 <__assert_fail@plt+0x343c>
   17120:	movw	r0, #57436	; 0xe05c
   17124:	movt	r0, #3
   17128:	b	16940 <__assert_fail@plt+0x343c>
   1712c:	movw	r0, #55996	; 0xdabc
   17130:	movt	r0, #3
   17134:	b	16940 <__assert_fail@plt+0x343c>
   17138:	movw	r0, #56092	; 0xdb1c
   1713c:	movt	r0, #3
   17140:	b	16940 <__assert_fail@plt+0x343c>
   17144:	movw	r0, #57872	; 0xe210
   17148:	movt	r0, #3
   1714c:	b	16940 <__assert_fail@plt+0x343c>
   17150:	movw	r0, #57252	; 0xdfa4
   17154:	movt	r0, #3
   17158:	b	16940 <__assert_fail@plt+0x343c>
   1715c:	movw	r0, #57624	; 0xe118
   17160:	movt	r0, #3
   17164:	b	16940 <__assert_fail@plt+0x343c>
   17168:	movw	r0, #55872	; 0xda40
   1716c:	movt	r0, #3
   17170:	b	16940 <__assert_fail@plt+0x343c>
   17174:	movw	r0, #57424	; 0xe050
   17178:	movt	r0, #3
   1717c:	b	16940 <__assert_fail@plt+0x343c>
   17180:	movw	r0, #57460	; 0xe074
   17184:	movt	r0, #3
   17188:	b	16940 <__assert_fail@plt+0x343c>
   1718c:	movw	r0, #56896	; 0xde40
   17190:	movt	r0, #3
   17194:	b	16940 <__assert_fail@plt+0x343c>
   17198:	movw	r0, #55788	; 0xd9ec
   1719c:	movt	r0, #3
   171a0:	b	16940 <__assert_fail@plt+0x343c>
   171a4:	movw	r0, #57056	; 0xdee0
   171a8:	movt	r0, #3
   171ac:	b	16940 <__assert_fail@plt+0x343c>
   171b0:	movw	r0, #56700	; 0xdd7c
   171b4:	movt	r0, #3
   171b8:	b	16940 <__assert_fail@plt+0x343c>
   171bc:	movw	r0, #56032	; 0xdae0
   171c0:	movt	r0, #3
   171c4:	b	16940 <__assert_fail@plt+0x343c>
   171c8:	movw	r0, #57748	; 0xe194
   171cc:	movt	r0, #3
   171d0:	b	16940 <__assert_fail@plt+0x343c>
   171d4:	movw	r0, #55704	; 0xd998
   171d8:	movt	r0, #3
   171dc:	b	16940 <__assert_fail@plt+0x343c>
   171e0:	movw	r0, #57108	; 0xdf14
   171e4:	movt	r0, #3
   171e8:	b	16940 <__assert_fail@plt+0x343c>
   171ec:	movw	r0, #57144	; 0xdf38
   171f0:	movt	r0, #3
   171f4:	b	16940 <__assert_fail@plt+0x343c>
   171f8:	movw	r0, #57336	; 0xdff8
   171fc:	movt	r0, #3
   17200:	b	16940 <__assert_fail@plt+0x343c>
   17204:	movw	r0, #55968	; 0xdaa0
   17208:	movt	r0, #3
   1720c:	b	16940 <__assert_fail@plt+0x343c>
   17210:	movw	r0, #55864	; 0xda38
   17214:	movt	r0, #3
   17218:	b	16940 <__assert_fail@plt+0x343c>
   1721c:	movw	r0, #56624	; 0xdd30
   17220:	movt	r0, #3
   17224:	b	16940 <__assert_fail@plt+0x343c>
   17228:	movw	r0, #56484	; 0xdca4
   1722c:	movt	r0, #3
   17230:	b	16940 <__assert_fail@plt+0x343c>
   17234:	movw	r0, #56740	; 0xdda4
   17238:	movt	r0, #3
   1723c:	b	16940 <__assert_fail@plt+0x343c>
   17240:	movw	r0, #56752	; 0xddb0
   17244:	movt	r0, #3
   17248:	b	16940 <__assert_fail@plt+0x343c>
   1724c:	movw	r0, #57412	; 0xe044
   17250:	movt	r0, #3
   17254:	b	16940 <__assert_fail@plt+0x343c>
   17258:	movw	r0, #57688	; 0xe158
   1725c:	movt	r0, #3
   17260:	b	16940 <__assert_fail@plt+0x343c>
   17264:	movw	r0, #55596	; 0xd92c
   17268:	movt	r0, #3
   1726c:	b	16940 <__assert_fail@plt+0x343c>
   17270:	movw	r0, #56232	; 0xdba8
   17274:	movt	r0, #3
   17278:	b	16940 <__assert_fail@plt+0x343c>
   1727c:	movw	r0, #57584	; 0xe0f0
   17280:	movt	r0, #3
   17284:	b	16940 <__assert_fail@plt+0x343c>
   17288:	movw	r0, #57296	; 0xdfd0
   1728c:	movt	r0, #3
   17290:	b	16940 <__assert_fail@plt+0x343c>
   17294:	movw	r0, #57832	; 0xe1e8
   17298:	movt	r0, #3
   1729c:	b	16940 <__assert_fail@plt+0x343c>
   172a0:	movw	r0, #57320	; 0xdfe8
   172a4:	movt	r0, #3
   172a8:	b	16940 <__assert_fail@plt+0x343c>
   172ac:	movw	r0, #57724	; 0xe17c
   172b0:	movt	r0, #3
   172b4:	b	16940 <__assert_fail@plt+0x343c>
   172b8:	movw	r0, #58764	; 0xe58c
   172bc:	movt	r0, #3
   172c0:	b	16940 <__assert_fail@plt+0x343c>
   172c4:	movw	r0, #56524	; 0xdccc
   172c8:	movt	r0, #3
   172cc:	b	16940 <__assert_fail@plt+0x343c>
   172d0:	movw	r0, #56536	; 0xdcd8
   172d4:	movt	r0, #3
   172d8:	b	16940 <__assert_fail@plt+0x343c>
   172dc:	movw	r0, #2204	; 0x89c
   172e0:	movt	r0, #4
   172e4:	b	16940 <__assert_fail@plt+0x343c>
   172e8:	movw	r0, #57672	; 0xe148
   172ec:	movt	r0, #3
   172f0:	b	16940 <__assert_fail@plt+0x343c>
   172f4:	movw	r0, #57360	; 0xe010
   172f8:	movt	r0, #3
   172fc:	b	16940 <__assert_fail@plt+0x343c>
   17300:	movw	r0, #57784	; 0xe1b8
   17304:	movt	r0, #3
   17308:	b	16940 <__assert_fail@plt+0x343c>
   1730c:	movw	r0, #56432	; 0xdc70
   17310:	movt	r0, #3
   17314:	b	16940 <__assert_fail@plt+0x343c>
   17318:	movw	r0, #56472	; 0xdc98
   1731c:	movt	r0, #3
   17320:	b	16940 <__assert_fail@plt+0x343c>
   17324:	movw	r0, #55512	; 0xd8d8
   17328:	movt	r0, #3
   1732c:	b	16940 <__assert_fail@plt+0x343c>
   17330:	movw	r0, #57608	; 0xe108
   17334:	movt	r0, #3
   17338:	b	16940 <__assert_fail@plt+0x343c>
   1733c:	movw	r0, #57664	; 0xe140
   17340:	movt	r0, #3
   17344:	b	16940 <__assert_fail@plt+0x343c>
   17348:	movw	r0, #56416	; 0xdc60
   1734c:	movt	r0, #3
   17350:	b	16940 <__assert_fail@plt+0x343c>
   17354:	movw	r0, #57236	; 0xdf94
   17358:	movt	r0, #3
   1735c:	b	16940 <__assert_fail@plt+0x343c>
   17360:	movw	r0, #55544	; 0xd8f8
   17364:	movt	r0, #3
   17368:	b	16940 <__assert_fail@plt+0x343c>
   1736c:	movw	r0, #57556	; 0xe0d4
   17370:	movt	r0, #3
   17374:	b	16940 <__assert_fail@plt+0x343c>
   17378:	movw	r0, #56948	; 0xde74
   1737c:	movt	r0, #3
   17380:	b	16940 <__assert_fail@plt+0x343c>
   17384:	movw	r0, #56356	; 0xdc24
   17388:	movt	r0, #3
   1738c:	b	16940 <__assert_fail@plt+0x343c>
   17390:	movw	r0, #55952	; 0xda90
   17394:	movt	r0, #3
   17398:	b	16940 <__assert_fail@plt+0x343c>
   1739c:	movw	r0, #56808	; 0xdde8
   173a0:	movt	r0, #3
   173a4:	b	16940 <__assert_fail@plt+0x343c>
   173a8:	movw	r0, #57920	; 0xe240
   173ac:	movt	r0, #3
   173b0:	b	16940 <__assert_fail@plt+0x343c>
   173b4:	movw	r0, #56044	; 0xdaec
   173b8:	movt	r0, #3
   173bc:	b	16940 <__assert_fail@plt+0x343c>
   173c0:	movw	r0, #56140	; 0xdb4c
   173c4:	movt	r0, #3
   173c8:	b	16940 <__assert_fail@plt+0x343c>
   173cc:	movw	r0, #55936	; 0xda80
   173d0:	movt	r0, #3
   173d4:	b	16940 <__assert_fail@plt+0x343c>
   173d8:	movw	r0, #56548	; 0xdce4
   173dc:	movt	r0, #3
   173e0:	b	16940 <__assert_fail@plt+0x343c>
   173e4:	movw	r0, #55852	; 0xda2c
   173e8:	movt	r0, #3
   173ec:	b	16940 <__assert_fail@plt+0x343c>
   173f0:	movw	r0, #55700	; 0xd994
   173f4:	movt	r0, #3
   173f8:	b	16940 <__assert_fail@plt+0x343c>
   173fc:	movw	r0, #57120	; 0xdf20
   17400:	movt	r0, #3
   17404:	b	16940 <__assert_fail@plt+0x343c>
   17408:	movw	r0, #57188	; 0xdf64
   1740c:	movt	r0, #3
   17410:	b	16940 <__assert_fail@plt+0x343c>
   17414:	movw	r0, #57264	; 0xdfb0
   17418:	movt	r0, #3
   1741c:	b	16940 <__assert_fail@plt+0x343c>
   17420:	movw	r0, #56248	; 0xdbb8
   17424:	movt	r0, #3
   17428:	b	16940 <__assert_fail@plt+0x343c>
   1742c:	movw	r0, #57700	; 0xe164
   17430:	movt	r0, #3
   17434:	b	16940 <__assert_fail@plt+0x343c>
   17438:	movw	r0, #57200	; 0xdf70
   1743c:	movt	r0, #3
   17440:	b	16940 <__assert_fail@plt+0x343c>
   17444:	movw	r0, #55756	; 0xd9cc
   17448:	movt	r0, #3
   1744c:	b	16940 <__assert_fail@plt+0x343c>
   17450:	movw	r0, #57152	; 0xdf40
   17454:	movt	r0, #3
   17458:	b	16940 <__assert_fail@plt+0x343c>
   1745c:	movw	r0, #57092	; 0xdf04
   17460:	movt	r0, #3
   17464:	b	16940 <__assert_fail@plt+0x343c>
   17468:	movw	r0, #56844	; 0xde0c
   1746c:	movt	r0, #3
   17470:	b	16940 <__assert_fail@plt+0x343c>
   17474:	movw	r0, #57028	; 0xdec4
   17478:	movt	r0, #3
   1747c:	b	16940 <__assert_fail@plt+0x343c>
   17480:	movw	r0, #57132	; 0xdf2c
   17484:	movt	r0, #3
   17488:	b	16940 <__assert_fail@plt+0x343c>
   1748c:	cmp	r0, #25
   17490:	mov	r1, r0
   17494:	push	{lr}		; (str lr, [sp, #-4]!)
   17498:	sub	sp, sp, #12
   1749c:	beq	17848 <__assert_fail@plt+0x4344>
   174a0:	bls	174ec <__assert_fail@plt+0x3fe8>
   174a4:	cmp	r0, #37	; 0x25
   174a8:	beq	17830 <__assert_fail@plt+0x432c>
   174ac:	bhi	17574 <__assert_fail@plt+0x4070>
   174b0:	cmp	r0, #31
   174b4:	beq	1783c <__assert_fail@plt+0x4338>
   174b8:	bls	1761c <__assert_fail@plt+0x4118>
   174bc:	cmp	r0, #34	; 0x22
   174c0:	beq	177f4 <__assert_fail@plt+0x42f0>
   174c4:	bls	176dc <__assert_fail@plt+0x41d8>
   174c8:	cmp	r0, #35	; 0x23
   174cc:	movweq	r0, #58300	; 0xe3bc
   174d0:	movteq	r0, #3
   174d4:	beq	1769c <__assert_fail@plt+0x4198>
   174d8:	cmp	r1, #36	; 0x24
   174dc:	movweq	r0, #58276	; 0xe3a4
   174e0:	movteq	r0, #3
   174e4:	beq	1769c <__assert_fail@plt+0x4198>
   174e8:	b	17530 <__assert_fail@plt+0x402c>
   174ec:	cmp	r0, #13
   174f0:	beq	17854 <__assert_fail@plt+0x4350>
   174f4:	bhi	17538 <__assert_fail@plt+0x4034>
   174f8:	cmp	r0, #7
   174fc:	beq	17860 <__assert_fail@plt+0x435c>
   17500:	bls	1764c <__assert_fail@plt+0x4148>
   17504:	cmp	r0, #10
   17508:	beq	177dc <__assert_fail@plt+0x42d8>
   1750c:	bls	1767c <__assert_fail@plt+0x4178>
   17510:	cmp	r0, #11
   17514:	movweq	r0, #58092	; 0xe2ec
   17518:	movteq	r0, #3
   1751c:	beq	1769c <__assert_fail@plt+0x4198>
   17520:	cmp	r1, #12
   17524:	movweq	r0, #14180	; 0x3764
   17528:	movteq	r0, #4
   1752c:	beq	1769c <__assert_fail@plt+0x4198>
   17530:	mov	r0, #0
   17534:	b	1769c <__assert_fail@plt+0x4198>
   17538:	cmp	r0, #19
   1753c:	beq	17818 <__assert_fail@plt+0x4314>
   17540:	bls	175ec <__assert_fail@plt+0x40e8>
   17544:	cmp	r0, #22
   17548:	beq	177c4 <__assert_fail@plt+0x42c0>
   1754c:	bls	17724 <__assert_fail@plt+0x4220>
   17550:	cmp	r0, #23
   17554:	movweq	r0, #58320	; 0xe3d0
   17558:	movteq	r0, #3
   1755c:	beq	1769c <__assert_fail@plt+0x4198>
   17560:	cmp	r1, #24
   17564:	movweq	r0, #58132	; 0xe314
   17568:	movteq	r0, #3
   1756c:	beq	1769c <__assert_fail@plt+0x4198>
   17570:	b	17530 <__assert_fail@plt+0x402c>
   17574:	cmp	r0, #43	; 0x2b
   17578:	beq	17824 <__assert_fail@plt+0x4320>
   1757c:	bls	175bc <__assert_fail@plt+0x40b8>
   17580:	movw	r3, #7938	; 0x1f02
   17584:	cmp	r0, r3
   17588:	beq	177b8 <__assert_fail@plt+0x42b4>
   1758c:	bls	1776c <__assert_fail@plt+0x4268>
   17590:	movw	r3, #7968	; 0x1f20
   17594:	cmp	r0, r3
   17598:	movweq	r0, #57984	; 0xe280
   1759c:	movteq	r0, #3
   175a0:	beq	1769c <__assert_fail@plt+0x4198>
   175a4:	add	r3, r3, #1
   175a8:	cmp	r1, r3
   175ac:	movweq	r0, #58012	; 0xe29c
   175b0:	movteq	r0, #3
   175b4:	beq	1769c <__assert_fail@plt+0x4198>
   175b8:	b	17530 <__assert_fail@plt+0x402c>
   175bc:	cmp	r0, #40	; 0x28
   175c0:	beq	1780c <__assert_fail@plt+0x4308>
   175c4:	bls	17794 <__assert_fail@plt+0x4290>
   175c8:	cmp	r0, #41	; 0x29
   175cc:	movweq	r0, #58036	; 0xe2b4
   175d0:	movteq	r0, #3
   175d4:	beq	1769c <__assert_fail@plt+0x4198>
   175d8:	cmp	r1, #42	; 0x2a
   175dc:	movweq	r0, #58044	; 0xe2bc
   175e0:	movteq	r0, #3
   175e4:	beq	1769c <__assert_fail@plt+0x4198>
   175e8:	b	17530 <__assert_fail@plt+0x402c>
   175ec:	cmp	r0, #16
   175f0:	beq	177d0 <__assert_fail@plt+0x42cc>
   175f4:	bls	17748 <__assert_fail@plt+0x4244>
   175f8:	cmp	r0, #17
   175fc:	movweq	r0, #58208	; 0xe360
   17600:	movteq	r0, #3
   17604:	beq	1769c <__assert_fail@plt+0x4198>
   17608:	cmp	r1, #18
   1760c:	movweq	r0, #58216	; 0xe368
   17610:	movteq	r0, #3
   17614:	beq	1769c <__assert_fail@plt+0x4198>
   17618:	b	17530 <__assert_fail@plt+0x402c>
   1761c:	cmp	r0, #28
   17620:	beq	17800 <__assert_fail@plt+0x42fc>
   17624:	bls	17700 <__assert_fail@plt+0x41fc>
   17628:	cmp	r0, #29
   1762c:	movweq	r0, #58340	; 0xe3e4
   17630:	movteq	r0, #3
   17634:	beq	1769c <__assert_fail@plt+0x4198>
   17638:	cmp	r1, #30
   1763c:	movweq	r0, #58100	; 0xe2f4
   17640:	movteq	r0, #3
   17644:	beq	1769c <__assert_fail@plt+0x4198>
   17648:	b	17530 <__assert_fail@plt+0x402c>
   1764c:	cmp	r0, #4
   17650:	beq	177e8 <__assert_fail@plt+0x42e4>
   17654:	bls	176b8 <__assert_fail@plt+0x41b4>
   17658:	cmp	r0, #5
   1765c:	movweq	r0, #58108	; 0xe2fc
   17660:	movteq	r0, #3
   17664:	beq	1769c <__assert_fail@plt+0x4198>
   17668:	cmp	r1, #6
   1766c:	movweq	r0, #58116	; 0xe304
   17670:	movteq	r0, #3
   17674:	beq	1769c <__assert_fail@plt+0x4198>
   17678:	b	17530 <__assert_fail@plt+0x402c>
   1767c:	cmp	r0, #8
   17680:	movweq	r0, #19196	; 0x4afc
   17684:	movteq	r0, #4
   17688:	beq	1769c <__assert_fail@plt+0x4198>
   1768c:	cmp	r1, #9
   17690:	movweq	r0, #59040	; 0xe6a0
   17694:	movteq	r0, #3
   17698:	bne	17530 <__assert_fail@plt+0x402c>
   1769c:	mov	r2, #0
   176a0:	mov	ip, #1
   176a4:	mov	r3, r2
   176a8:	str	ip, [sp]
   176ac:	bl	165c0 <__assert_fail@plt+0x30bc>
   176b0:	add	sp, sp, #12
   176b4:	pop	{pc}		; (ldr pc, [sp], #4)
   176b8:	cmp	r0, #1
   176bc:	movweq	r0, #18588	; 0x489c
   176c0:	movteq	r0, #4
   176c4:	beq	1769c <__assert_fail@plt+0x4198>
   176c8:	cmp	r1, #3
   176cc:	movweq	r0, #58076	; 0xe2dc
   176d0:	movteq	r0, #3
   176d4:	beq	1769c <__assert_fail@plt+0x4198>
   176d8:	b	17530 <__assert_fail@plt+0x402c>
   176dc:	cmp	r0, #32
   176e0:	movweq	r0, #58252	; 0xe38c
   176e4:	movteq	r0, #3
   176e8:	beq	1769c <__assert_fail@plt+0x4198>
   176ec:	cmp	r1, #33	; 0x21
   176f0:	movweq	r0, #58156	; 0xe32c
   176f4:	movteq	r0, #3
   176f8:	beq	1769c <__assert_fail@plt+0x4198>
   176fc:	b	17530 <__assert_fail@plt+0x402c>
   17700:	cmp	r0, #26
   17704:	movweq	r0, #58352	; 0xe3f0
   17708:	movteq	r0, #3
   1770c:	beq	1769c <__assert_fail@plt+0x4198>
   17710:	cmp	r1, #27
   17714:	movweq	r0, #58028	; 0xe2ac
   17718:	movteq	r0, #3
   1771c:	beq	1769c <__assert_fail@plt+0x4198>
   17720:	b	17530 <__assert_fail@plt+0x402c>
   17724:	cmp	r0, #20
   17728:	movweq	r0, #58232	; 0xe378
   1772c:	movteq	r0, #3
   17730:	beq	1769c <__assert_fail@plt+0x4198>
   17734:	cmp	r1, #21
   17738:	movweq	r0, #58288	; 0xe3b0
   1773c:	movteq	r0, #3
   17740:	beq	1769c <__assert_fail@plt+0x4198>
   17744:	b	17530 <__assert_fail@plt+0x402c>
   17748:	cmp	r0, #14
   1774c:	movweq	r0, #58332	; 0xe3dc
   17750:	movteq	r0, #3
   17754:	beq	1769c <__assert_fail@plt+0x4198>
   17758:	cmp	r1, #15
   1775c:	movweq	r0, #58292	; 0xe3b4
   17760:	movteq	r0, #3
   17764:	beq	1769c <__assert_fail@plt+0x4198>
   17768:	b	17530 <__assert_fail@plt+0x402c>
   1776c:	cmp	r0, #44	; 0x2c
   17770:	movweq	r0, #58060	; 0xe2cc
   17774:	movteq	r0, #3
   17778:	beq	1769c <__assert_fail@plt+0x4198>
   1777c:	movw	r3, #7937	; 0x1f01
   17780:	cmp	r1, r3
   17784:	movweq	r0, #57968	; 0xe270
   17788:	movteq	r0, #3
   1778c:	beq	1769c <__assert_fail@plt+0x4198>
   17790:	b	17530 <__assert_fail@plt+0x402c>
   17794:	cmp	r0, #38	; 0x26
   17798:	movweq	r0, #58368	; 0xe400
   1779c:	movteq	r0, #3
   177a0:	beq	1769c <__assert_fail@plt+0x4198>
   177a4:	cmp	r1, #39	; 0x27
   177a8:	movweq	r0, #58376	; 0xe408
   177ac:	movteq	r0, #3
   177b0:	beq	1769c <__assert_fail@plt+0x4198>
   177b4:	b	17530 <__assert_fail@plt+0x402c>
   177b8:	movw	r0, #57996	; 0xe28c
   177bc:	movt	r0, #3
   177c0:	b	1769c <__assert_fail@plt+0x4198>
   177c4:	movw	r0, #58172	; 0xe33c
   177c8:	movt	r0, #3
   177cc:	b	1769c <__assert_fail@plt+0x4198>
   177d0:	movw	r0, #58240	; 0xe380
   177d4:	movt	r0, #3
   177d8:	b	1769c <__assert_fail@plt+0x4198>
   177dc:	movw	r0, #58068	; 0xe2d4
   177e0:	movt	r0, #3
   177e4:	b	1769c <__assert_fail@plt+0x4198>
   177e8:	movw	r0, #58084	; 0xe2e4
   177ec:	movt	r0, #3
   177f0:	b	1769c <__assert_fail@plt+0x4198>
   177f4:	movw	r0, #58196	; 0xe354
   177f8:	movt	r0, #3
   177fc:	b	1769c <__assert_fail@plt+0x4198>
   17800:	movw	r0, #58264	; 0xe398
   17804:	movt	r0, #3
   17808:	b	1769c <__assert_fail@plt+0x4198>
   1780c:	movw	r0, #58384	; 0xe410
   17810:	movt	r0, #3
   17814:	b	1769c <__assert_fail@plt+0x4198>
   17818:	movw	r0, #58224	; 0xe370
   1781c:	movt	r0, #3
   17820:	b	1769c <__assert_fail@plt+0x4198>
   17824:	movw	r0, #58052	; 0xe2c4
   17828:	movt	r0, #3
   1782c:	b	1769c <__assert_fail@plt+0x4198>
   17830:	movw	r0, #58360	; 0xe3f8
   17834:	movt	r0, #3
   17838:	b	1769c <__assert_fail@plt+0x4198>
   1783c:	movw	r0, #58184	; 0xe348
   17840:	movt	r0, #3
   17844:	b	1769c <__assert_fail@plt+0x4198>
   17848:	movw	r0, #58140	; 0xe31c
   1784c:	movt	r0, #3
   17850:	b	1769c <__assert_fail@plt+0x4198>
   17854:	movw	r0, #58312	; 0xe3c8
   17858:	movt	r0, #3
   1785c:	b	1769c <__assert_fail@plt+0x4198>
   17860:	movw	r0, #58124	; 0xe30c
   17864:	movt	r0, #3
   17868:	b	1769c <__assert_fail@plt+0x4198>
   1786c:	cmp	r0, #46	; 0x2e
   17870:	mov	r1, r0
   17874:	push	{lr}		; (str lr, [sp, #-4]!)
   17878:	sub	sp, sp, #12
   1787c:	beq	17e7c <__assert_fail@plt+0x4978>
   17880:	bhi	178dc <__assert_fail@plt+0x43d8>
   17884:	cmp	r0, #26
   17888:	beq	17e88 <__assert_fail@plt+0x4984>
   1788c:	bhi	17930 <__assert_fail@plt+0x442c>
   17890:	cmp	r0, #15
   17894:	beq	17db0 <__assert_fail@plt+0x48ac>
   17898:	bhi	17a00 <__assert_fail@plt+0x44fc>
   1789c:	cmp	r0, #5
   178a0:	beq	17e58 <__assert_fail@plt+0x4954>
   178a4:	bhi	17bd0 <__assert_fail@plt+0x46cc>
   178a8:	cmp	r0, #2
   178ac:	beq	17c6c <__assert_fail@plt+0x4768>
   178b0:	bls	17d2c <__assert_fail@plt+0x4828>
   178b4:	cmp	r0, #3
   178b8:	movweq	r0, #58772	; 0xe594
   178bc:	movteq	r0, #3
   178c0:	beq	17a38 <__assert_fail@plt+0x4534>
   178c4:	cmp	r1, #4
   178c8:	movweq	r0, #58784	; 0xe5a0
   178cc:	movteq	r0, #3
   178d0:	beq	17a38 <__assert_fail@plt+0x4534>
   178d4:	mov	r0, #0
   178d8:	b	17a38 <__assert_fail@plt+0x4534>
   178dc:	cmp	r0, #67	; 0x43
   178e0:	beq	17eac <__assert_fail@plt+0x49a8>
   178e4:	bhi	17978 <__assert_fail@plt+0x4474>
   178e8:	cmp	r0, #56	; 0x38
   178ec:	beq	17dbc <__assert_fail@plt+0x48b8>
   178f0:	bhi	17aa0 <__assert_fail@plt+0x459c>
   178f4:	cmp	r0, #51	; 0x33
   178f8:	beq	17e40 <__assert_fail@plt+0x493c>
   178fc:	bhi	17ba0 <__assert_fail@plt+0x469c>
   17900:	cmp	r0, #48	; 0x30
   17904:	beq	17c90 <__assert_fail@plt+0x478c>
   17908:	bcc	17e4c <__assert_fail@plt+0x4948>
   1790c:	cmp	r0, #49	; 0x31
   17910:	movweq	r0, #59388	; 0xe7fc
   17914:	movteq	r0, #3
   17918:	beq	17a38 <__assert_fail@plt+0x4534>
   1791c:	cmp	r1, #50	; 0x32
   17920:	movweq	r0, #59400	; 0xe808
   17924:	movteq	r0, #3
   17928:	beq	17a38 <__assert_fail@plt+0x4534>
   1792c:	b	178d4 <__assert_fail@plt+0x43d0>
   17930:	cmp	r0, #36	; 0x24
   17934:	beq	17e94 <__assert_fail@plt+0x4990>
   17938:	bhi	179c4 <__assert_fail@plt+0x44c0>
   1793c:	cmp	r0, #31
   17940:	beq	17e34 <__assert_fail@plt+0x4930>
   17944:	bhi	17b3c <__assert_fail@plt+0x4638>
   17948:	cmp	r0, #28
   1794c:	beq	17c9c <__assert_fail@plt+0x4798>
   17950:	bcc	17d98 <__assert_fail@plt+0x4894>
   17954:	cmp	r0, #29
   17958:	movweq	r0, #58988	; 0xe66c
   1795c:	movteq	r0, #3
   17960:	beq	17a38 <__assert_fail@plt+0x4534>
   17964:	cmp	r1, #30
   17968:	movweq	r0, #59056	; 0xe6b0
   1796c:	movteq	r0, #3
   17970:	beq	17a38 <__assert_fail@plt+0x4534>
   17974:	b	178d4 <__assert_fail@plt+0x43d0>
   17978:	movw	r3, #16641	; 0x4101
   1797c:	cmp	r0, r3
   17980:	beq	17ea0 <__assert_fail@plt+0x499c>
   17984:	bhi	17a54 <__assert_fail@plt+0x4550>
   17988:	cmp	r0, #72	; 0x48
   1798c:	beq	17e70 <__assert_fail@plt+0x496c>
   17990:	bhi	17b6c <__assert_fail@plt+0x4668>
   17994:	cmp	r0, #69	; 0x45
   17998:	beq	17ca8 <__assert_fail@plt+0x47a4>
   1799c:	bcc	17d74 <__assert_fail@plt+0x4870>
   179a0:	cmp	r0, #70	; 0x46
   179a4:	movweq	r0, #58756	; 0xe584
   179a8:	movteq	r0, #3
   179ac:	beq	17a38 <__assert_fail@plt+0x4534>
   179b0:	cmp	r1, #71	; 0x47
   179b4:	movweq	r0, #58584	; 0xe4d8
   179b8:	movteq	r0, #3
   179bc:	beq	17a38 <__assert_fail@plt+0x4534>
   179c0:	b	178d4 <__assert_fail@plt+0x43d0>
   179c4:	cmp	r0, #41	; 0x29
   179c8:	beq	17e64 <__assert_fail@plt+0x4960>
   179cc:	bhi	17c00 <__assert_fail@plt+0x46fc>
   179d0:	cmp	r0, #38	; 0x26
   179d4:	beq	17c84 <__assert_fail@plt+0x4780>
   179d8:	bcc	17e28 <__assert_fail@plt+0x4924>
   179dc:	cmp	r0, #39	; 0x27
   179e0:	movweq	r0, #58728	; 0xe568
   179e4:	movteq	r0, #3
   179e8:	beq	17a38 <__assert_fail@plt+0x4534>
   179ec:	cmp	r1, #40	; 0x28
   179f0:	movweq	r0, #58804	; 0xe5b4
   179f4:	movteq	r0, #3
   179f8:	beq	17a38 <__assert_fail@plt+0x4534>
   179fc:	b	178d4 <__assert_fail@plt+0x43d0>
   17a00:	cmp	r0, #21
   17a04:	beq	17e1c <__assert_fail@plt+0x4918>
   17a08:	bhi	17adc <__assert_fail@plt+0x45d8>
   17a0c:	cmp	r0, #17
   17a10:	beq	17c78 <__assert_fail@plt+0x4774>
   17a14:	bcc	17e10 <__assert_fail@plt+0x490c>
   17a18:	cmp	r0, #18
   17a1c:	movweq	r0, #59248	; 0xe770
   17a20:	movteq	r0, #3
   17a24:	beq	17a38 <__assert_fail@plt+0x4534>
   17a28:	cmp	r1, #19
   17a2c:	movweq	r0, #59260	; 0xe77c
   17a30:	movteq	r0, #3
   17a34:	bne	178d4 <__assert_fail@plt+0x43d0>
   17a38:	mov	r3, #1
   17a3c:	movw	r2, #16512	; 0x4080
   17a40:	str	r3, [sp]
   17a44:	movw	r3, #65535	; 0xffff
   17a48:	bl	165c0 <__assert_fail@plt+0x30bc>
   17a4c:	add	sp, sp, #12
   17a50:	pop	{pc}		; (ldr pc, [sp], #4)
   17a54:	movw	r3, #16646	; 0x4106
   17a58:	cmp	r0, r3
   17a5c:	beq	17d68 <__assert_fail@plt+0x4864>
   17a60:	bhi	17c30 <__assert_fail@plt+0x472c>
   17a64:	movw	r3, #16643	; 0x4103
   17a68:	cmp	r0, r3
   17a6c:	beq	17cd8 <__assert_fail@plt+0x47d4>
   17a70:	bcc	17da4 <__assert_fail@plt+0x48a0>
   17a74:	add	r3, r3, #1
   17a78:	cmp	r0, r3
   17a7c:	movweq	r0, #58392	; 0xe418
   17a80:	movteq	r0, #3
   17a84:	beq	17a38 <__assert_fail@plt+0x4534>
   17a88:	add	r3, r3, #1
   17a8c:	cmp	r1, r3
   17a90:	movweq	r0, #58404	; 0xe424
   17a94:	movteq	r0, #3
   17a98:	beq	17a38 <__assert_fail@plt+0x4534>
   17a9c:	b	178d4 <__assert_fail@plt+0x43d0>
   17aa0:	cmp	r0, #61	; 0x3d
   17aa4:	beq	17de0 <__assert_fail@plt+0x48dc>
   17aa8:	bhi	17b0c <__assert_fail@plt+0x4608>
   17aac:	cmp	r0, #58	; 0x3a
   17ab0:	beq	17ce4 <__assert_fail@plt+0x47e0>
   17ab4:	bcc	17dec <__assert_fail@plt+0x48e8>
   17ab8:	cmp	r0, #59	; 0x3b
   17abc:	movweq	r0, #59468	; 0xe84c
   17ac0:	movteq	r0, #3
   17ac4:	beq	17a38 <__assert_fail@plt+0x4534>
   17ac8:	cmp	r1, #60	; 0x3c
   17acc:	movweq	r0, #59100	; 0xe6dc
   17ad0:	movteq	r0, #3
   17ad4:	beq	17a38 <__assert_fail@plt+0x4534>
   17ad8:	b	178d4 <__assert_fail@plt+0x43d0>
   17adc:	cmp	r0, #23
   17ae0:	beq	17cf0 <__assert_fail@plt+0x47ec>
   17ae4:	bcc	17dd4 <__assert_fail@plt+0x48d0>
   17ae8:	cmp	r0, #24
   17aec:	movweq	r0, #59444	; 0xe834
   17af0:	movteq	r0, #3
   17af4:	beq	17a38 <__assert_fail@plt+0x4534>
   17af8:	cmp	r1, #25
   17afc:	movweq	r0, #59500	; 0xe86c
   17b00:	movteq	r0, #3
   17b04:	beq	17a38 <__assert_fail@plt+0x4534>
   17b08:	b	178d4 <__assert_fail@plt+0x43d0>
   17b0c:	cmp	r0, #64	; 0x40
   17b10:	beq	17d20 <__assert_fail@plt+0x481c>
   17b14:	bls	17d54 <__assert_fail@plt+0x4850>
   17b18:	cmp	r0, #65	; 0x41
   17b1c:	movweq	r0, #59412	; 0xe814
   17b20:	movteq	r0, #3
   17b24:	beq	17a38 <__assert_fail@plt+0x4534>
   17b28:	cmp	r1, #66	; 0x42
   17b2c:	movweq	r0, #59184	; 0xe730
   17b30:	movteq	r0, #3
   17b34:	beq	17a38 <__assert_fail@plt+0x4534>
   17b38:	b	178d4 <__assert_fail@plt+0x43d0>
   17b3c:	cmp	r0, #33	; 0x21
   17b40:	beq	17d14 <__assert_fail@plt+0x4810>
   17b44:	bcc	17df8 <__assert_fail@plt+0x48f4>
   17b48:	cmp	r0, #34	; 0x22
   17b4c:	movweq	r0, #59540	; 0xe894
   17b50:	movteq	r0, #3
   17b54:	beq	17a38 <__assert_fail@plt+0x4534>
   17b58:	cmp	r1, #35	; 0x23
   17b5c:	movweq	r0, #58552	; 0xe4b8
   17b60:	movteq	r0, #3
   17b64:	beq	17a38 <__assert_fail@plt+0x4534>
   17b68:	b	178d4 <__assert_fail@plt+0x43d0>
   17b6c:	cmp	r0, #74	; 0x4a
   17b70:	beq	17d08 <__assert_fail@plt+0x4804>
   17b74:	bcc	17e04 <__assert_fail@plt+0x4900>
   17b78:	cmp	r0, #75	; 0x4b
   17b7c:	movweq	r0, #58904	; 0xe618
   17b80:	movteq	r0, #3
   17b84:	beq	17a38 <__assert_fail@plt+0x4534>
   17b88:	movw	r3, #16513	; 0x4081
   17b8c:	cmp	r1, r3
   17b90:	movweq	r0, #58540	; 0xe4ac
   17b94:	movteq	r0, #3
   17b98:	beq	17a38 <__assert_fail@plt+0x4534>
   17b9c:	b	178d4 <__assert_fail@plt+0x43d0>
   17ba0:	cmp	r0, #53	; 0x35
   17ba4:	beq	17cfc <__assert_fail@plt+0x47f8>
   17ba8:	bcc	17dc8 <__assert_fail@plt+0x48c4>
   17bac:	cmp	r0, #54	; 0x36
   17bb0:	movweq	r0, #58740	; 0xe574
   17bb4:	movteq	r0, #3
   17bb8:	beq	17a38 <__assert_fail@plt+0x4534>
   17bbc:	cmp	r1, #55	; 0x37
   17bc0:	movweq	r0, #59168	; 0xe720
   17bc4:	movteq	r0, #3
   17bc8:	beq	17a38 <__assert_fail@plt+0x4534>
   17bcc:	b	178d4 <__assert_fail@plt+0x43d0>
   17bd0:	cmp	r0, #10
   17bd4:	beq	17ccc <__assert_fail@plt+0x47c8>
   17bd8:	bls	17d40 <__assert_fail@plt+0x483c>
   17bdc:	cmp	r0, #11
   17be0:	movweq	r0, #59032	; 0xe698
   17be4:	movteq	r0, #3
   17be8:	beq	17a38 <__assert_fail@plt+0x4534>
   17bec:	cmp	r1, #13
   17bf0:	movweq	r0, #59048	; 0xe6a8
   17bf4:	movteq	r0, #3
   17bf8:	beq	17a38 <__assert_fail@plt+0x4534>
   17bfc:	b	178d4 <__assert_fail@plt+0x43d0>
   17c00:	cmp	r0, #43	; 0x2b
   17c04:	beq	17cc0 <__assert_fail@plt+0x47bc>
   17c08:	bcc	17d80 <__assert_fail@plt+0x487c>
   17c0c:	cmp	r0, #44	; 0x2c
   17c10:	movweq	r0, #57460	; 0xe074
   17c14:	movteq	r0, #3
   17c18:	beq	17a38 <__assert_fail@plt+0x4534>
   17c1c:	cmp	r1, #45	; 0x2d
   17c20:	movweq	r0, #59088	; 0xe6d0
   17c24:	movteq	r0, #3
   17c28:	beq	17a38 <__assert_fail@plt+0x4534>
   17c2c:	b	178d4 <__assert_fail@plt+0x43d0>
   17c30:	movw	r3, #16648	; 0x4108
   17c34:	cmp	r0, r3
   17c38:	beq	17cb4 <__assert_fail@plt+0x47b0>
   17c3c:	bcc	17d8c <__assert_fail@plt+0x4888>
   17c40:	add	r3, r3, #1
   17c44:	cmp	r0, r3
   17c48:	movweq	r0, #58416	; 0xe430
   17c4c:	movteq	r0, #3
   17c50:	beq	17a38 <__assert_fail@plt+0x4534>
   17c54:	add	r3, r3, #1
   17c58:	cmp	r1, r3
   17c5c:	movweq	r0, #58432	; 0xe440
   17c60:	movteq	r0, #3
   17c64:	beq	17a38 <__assert_fail@plt+0x4534>
   17c68:	b	178d4 <__assert_fail@plt+0x43d0>
   17c6c:	movw	r0, #58636	; 0xe50c
   17c70:	movt	r0, #3
   17c74:	b	17a38 <__assert_fail@plt+0x4534>
   17c78:	movw	r0, #58700	; 0xe54c
   17c7c:	movt	r0, #3
   17c80:	b	17a38 <__assert_fail@plt+0x4534>
   17c84:	movw	r0, #18640	; 0x48d0
   17c88:	movt	r0, #4
   17c8c:	b	17a38 <__assert_fail@plt+0x4534>
   17c90:	movw	r0, #59360	; 0xe7e0
   17c94:	movt	r0, #3
   17c98:	b	17a38 <__assert_fail@plt+0x4534>
   17c9c:	movw	r0, #58976	; 0xe660
   17ca0:	movt	r0, #3
   17ca4:	b	17a38 <__assert_fail@plt+0x4534>
   17ca8:	movw	r0, #58884	; 0xe604
   17cac:	movt	r0, #3
   17cb0:	b	17a38 <__assert_fail@plt+0x4534>
   17cb4:	movw	r0, #58456	; 0xe458
   17cb8:	movt	r0, #3
   17cbc:	b	17a38 <__assert_fail@plt+0x4534>
   17cc0:	movw	r0, #59064	; 0xe6b8
   17cc4:	movt	r0, #3
   17cc8:	b	17a38 <__assert_fail@plt+0x4534>
   17ccc:	movw	r0, #59024	; 0xe690
   17cd0:	movt	r0, #3
   17cd4:	b	17a38 <__assert_fail@plt+0x4534>
   17cd8:	movw	r0, #58620	; 0xe4fc
   17cdc:	movt	r0, #3
   17ce0:	b	17a38 <__assert_fail@plt+0x4534>
   17ce4:	movw	r0, #58944	; 0xe640
   17ce8:	movt	r0, #3
   17cec:	b	17a38 <__assert_fail@plt+0x4534>
   17cf0:	movw	r0, #59432	; 0xe828
   17cf4:	movt	r0, #3
   17cf8:	b	17a38 <__assert_fail@plt+0x4534>
   17cfc:	movw	r0, #59524	; 0xe884
   17d00:	movt	r0, #3
   17d04:	b	17a38 <__assert_fail@plt+0x4534>
   17d08:	movw	r0, #59232	; 0xe760
   17d0c:	movt	r0, #3
   17d10:	b	17a38 <__assert_fail@plt+0x4534>
   17d14:	movw	r0, #59288	; 0xe798
   17d18:	movt	r0, #3
   17d1c:	b	17a38 <__assert_fail@plt+0x4534>
   17d20:	movw	r0, #59220	; 0xe754
   17d24:	movt	r0, #3
   17d28:	b	17a38 <__assert_fail@plt+0x4534>
   17d2c:	cmp	r0, #1
   17d30:	movweq	r0, #58572	; 0xe4cc
   17d34:	movteq	r0, #3
   17d38:	beq	17a38 <__assert_fail@plt+0x4534>
   17d3c:	b	178d4 <__assert_fail@plt+0x43d0>
   17d40:	cmp	r0, #8
   17d44:	movweq	r0, #58920	; 0xe628
   17d48:	movteq	r0, #3
   17d4c:	beq	17a38 <__assert_fail@plt+0x4534>
   17d50:	b	178d4 <__assert_fail@plt+0x43d0>
   17d54:	cmp	r0, #63	; 0x3f
   17d58:	movweq	r0, #58716	; 0xe55c
   17d5c:	movteq	r0, #3
   17d60:	beq	17a38 <__assert_fail@plt+0x4534>
   17d64:	b	178d4 <__assert_fail@plt+0x43d0>
   17d68:	movw	r0, #58512	; 0xe490
   17d6c:	movt	r0, #3
   17d70:	b	17a38 <__assert_fail@plt+0x4534>
   17d74:	movw	r0, #58648	; 0xe518
   17d78:	movt	r0, #3
   17d7c:	b	17a38 <__assert_fail@plt+0x4534>
   17d80:	movw	r0, #57288	; 0xdfc8
   17d84:	movt	r0, #3
   17d88:	b	17a38 <__assert_fail@plt+0x4534>
   17d8c:	movw	r0, #58484	; 0xe474
   17d90:	movt	r0, #3
   17d94:	b	17a38 <__assert_fail@plt+0x4534>
   17d98:	movw	r0, #58680	; 0xe538
   17d9c:	movt	r0, #3
   17da0:	b	17a38 <__assert_fail@plt+0x4534>
   17da4:	movw	r0, #58864	; 0xe5f0
   17da8:	movt	r0, #3
   17dac:	b	17a38 <__assert_fail@plt+0x4534>
   17db0:	movw	r0, #59116	; 0xe6ec
   17db4:	movt	r0, #3
   17db8:	b	17a38 <__assert_fail@plt+0x4534>
   17dbc:	movw	r0, #59008	; 0xe680
   17dc0:	movt	r0, #3
   17dc4:	b	17a38 <__assert_fail@plt+0x4534>
   17dc8:	movw	r0, #59488	; 0xe860
   17dcc:	movt	r0, #3
   17dd0:	b	17a38 <__assert_fail@plt+0x4534>
   17dd4:	movw	r0, #59424	; 0xe820
   17dd8:	movt	r0, #3
   17ddc:	b	17a38 <__assert_fail@plt+0x4534>
   17de0:	movw	r0, #58960	; 0xe650
   17de4:	movt	r0, #3
   17de8:	b	17a38 <__assert_fail@plt+0x4534>
   17dec:	movw	r0, #59076	; 0xe6c4
   17df0:	movt	r0, #3
   17df4:	b	17a38 <__assert_fail@plt+0x4534>
   17df8:	movw	r0, #59208	; 0xe748
   17dfc:	movt	r0, #3
   17e00:	b	17a38 <__assert_fail@plt+0x4534>
   17e04:	movw	r0, #58436	; 0xe444
   17e08:	movt	r0, #3
   17e0c:	b	17a38 <__assert_fail@plt+0x4534>
   17e10:	movw	r0, #59152	; 0xe710
   17e14:	movt	r0, #3
   17e18:	b	17a38 <__assert_fail@plt+0x4534>
   17e1c:	movw	r0, #59304	; 0xe7a8
   17e20:	movt	r0, #3
   17e24:	b	17a38 <__assert_fail@plt+0x4534>
   17e28:	movw	r0, #58608	; 0xe4f0
   17e2c:	movt	r0, #3
   17e30:	b	17a38 <__assert_fail@plt+0x4534>
   17e34:	movw	r0, #59132	; 0xe6fc
   17e38:	movt	r0, #3
   17e3c:	b	17a38 <__assert_fail@plt+0x4534>
   17e40:	movw	r0, #59508	; 0xe874
   17e44:	movt	r0, #3
   17e48:	b	17a38 <__assert_fail@plt+0x4534>
   17e4c:	movw	r0, #59336	; 0xe7c8
   17e50:	movt	r0, #3
   17e54:	b	17a38 <__assert_fail@plt+0x4534>
   17e58:	movw	r0, #58828	; 0xe5cc
   17e5c:	movt	r0, #3
   17e60:	b	17a38 <__assert_fail@plt+0x4534>
   17e64:	movw	r0, #58816	; 0xe5c0
   17e68:	movt	r0, #3
   17e6c:	b	17a38 <__assert_fail@plt+0x4534>
   17e70:	movw	r0, #58420	; 0xe434
   17e74:	movt	r0, #3
   17e78:	b	17a38 <__assert_fail@plt+0x4534>
   17e7c:	movw	r0, #59276	; 0xe78c
   17e80:	movt	r0, #3
   17e84:	b	17a38 <__assert_fail@plt+0x4534>
   17e88:	movw	r0, #58664	; 0xe528
   17e8c:	movt	r0, #3
   17e90:	b	17a38 <__assert_fail@plt+0x4534>
   17e94:	movw	r0, #58596	; 0xe4e4
   17e98:	movt	r0, #3
   17e9c:	b	17a38 <__assert_fail@plt+0x4534>
   17ea0:	movw	r0, #58848	; 0xe5e0
   17ea4:	movt	r0, #3
   17ea8:	b	17a38 <__assert_fail@plt+0x4534>
   17eac:	movw	r0, #59320	; 0xe7b8
   17eb0:	movt	r0, #3
   17eb4:	b	17a38 <__assert_fail@plt+0x4534>
   17eb8:	sub	r3, r0, #1
   17ebc:	mov	r1, r0
   17ec0:	cmp	r3, #5
   17ec4:	push	{lr}		; (str lr, [sp, #-4]!)
   17ec8:	movwls	r2, #50660	; 0xc5e4
   17ecc:	movtls	r2, #3
   17ed0:	sub	sp, sp, #12
   17ed4:	addls	r3, r2, r3, lsl #2
   17ed8:	movhi	r0, #0
   17edc:	mov	r2, #128	; 0x80
   17ee0:	ldrls	r0, [r3, #48]	; 0x30
   17ee4:	mov	r3, #1
   17ee8:	str	r3, [sp]
   17eec:	mov	r3, #255	; 0xff
   17ef0:	bl	165c0 <__assert_fail@plt+0x30bc>
   17ef4:	add	sp, sp, #12
   17ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   17efc:	sub	r3, r0, #1
   17f00:	mov	r1, r0
   17f04:	cmp	r3, #4
   17f08:	push	{lr}		; (str lr, [sp, #-4]!)
   17f0c:	movwls	r2, #50660	; 0xc5e4
   17f10:	movtls	r2, #3
   17f14:	sub	sp, sp, #12
   17f18:	addls	r3, r2, r3, lsl #2
   17f1c:	movhi	r0, #0
   17f20:	mov	r2, #8192	; 0x2000
   17f24:	ldrls	r0, [r3, #72]	; 0x48
   17f28:	mov	r3, #0
   17f2c:	str	r3, [sp]
   17f30:	movw	r3, #16383	; 0x3fff
   17f34:	bl	165c0 <__assert_fail@plt+0x30bc>
   17f38:	add	sp, sp, #12
   17f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f44:	movw	r8, #37688	; 0x9338
   17f48:	movt	r8, #5
   17f4c:	sub	sp, sp, #592	; 0x250
   17f50:	movw	r7, #37704	; 0x9348
   17f54:	movt	r7, #5
   17f58:	ldr	r3, [r8]
   17f5c:	mov	r2, #5
   17f60:	mov	r6, r1
   17f64:	mov	r9, r0
   17f68:	movw	r1, #59636	; 0xe8f4
   17f6c:	mov	r0, #0
   17f70:	movt	r1, #3
   17f74:	str	r3, [sp, #588]	; 0x24c
   17f78:	bl	12d84 <dcgettext@plt>
   17f7c:	ldr	r1, [r7]
   17f80:	bl	12c58 <fputs_unlocked@plt>
   17f84:	mov	r4, #0
   17f88:	mov	r0, #1
   17f8c:	ldrb	r2, [r6, r4]
   17f90:	movw	r1, #59660	; 0xe90c
   17f94:	add	r4, r4, r0
   17f98:	movt	r1, #3
   17f9c:	bl	13204 <__printf_chk@plt>
   17fa0:	cmp	r4, #16
   17fa4:	bne	17f88 <__assert_fail@plt+0x4a84>
   17fa8:	movw	r1, #59668	; 0xe914
   17fac:	mov	r0, #0
   17fb0:	movt	r1, #3
   17fb4:	mov	r2, #5
   17fb8:	bl	12d84 <dcgettext@plt>
   17fbc:	ldrb	ip, [r6, #4]
   17fc0:	cmp	ip, #1
   17fc4:	mov	r1, r0
   17fc8:	beq	18488 <__assert_fail@plt+0x4f84>
   17fcc:	movw	r3, #59560	; 0xe8a8
   17fd0:	cmp	ip, #2
   17fd4:	movt	r3, #3
   17fd8:	movw	r2, #8172	; 0x1fec
   17fdc:	movt	r2, #4
   17fe0:	moveq	r2, r3
   17fe4:	mov	r0, #1
   17fe8:	bl	13204 <__printf_chk@plt>
   17fec:	movw	r1, #59712	; 0xe940
   17ff0:	mov	r0, #0
   17ff4:	movt	r1, #3
   17ff8:	mov	r2, #5
   17ffc:	bl	12d84 <dcgettext@plt>
   18000:	ldrb	ip, [r6, #5]
   18004:	cmp	ip, #1
   18008:	mov	r1, r0
   1800c:	beq	1847c <__assert_fail@plt+0x4f78>
   18010:	movw	r3, #59600	; 0xe8d0
   18014:	cmp	ip, #2
   18018:	movt	r3, #3
   1801c:	movw	r2, #8172	; 0x1fec
   18020:	movt	r2, #4
   18024:	moveq	r2, r3
   18028:	mov	r0, #1
   1802c:	bl	13204 <__printf_chk@plt>
   18030:	movw	r1, #59756	; 0xe96c
   18034:	mov	r0, #0
   18038:	movt	r1, #3
   1803c:	mov	r2, #5
   18040:	bl	12d84 <dcgettext@plt>
   18044:	ldrb	r4, [r6, #6]
   18048:	cmp	r4, #1
   1804c:	movwne	r3, #59628	; 0xe8ec
   18050:	mov	r5, r0
   18054:	movtne	r3, #3
   18058:	beq	18518 <__assert_fail@plt+0x5014>
   1805c:	mov	r2, r4
   18060:	mov	r1, r5
   18064:	mov	r0, #1
   18068:	bl	13204 <__printf_chk@plt>
   1806c:	mov	r2, #5
   18070:	movw	r1, #59816	; 0xe9a8
   18074:	mov	r0, #0
   18078:	movt	r1, #3
   1807c:	bl	12d84 <dcgettext@plt>
   18080:	mov	r3, #512	; 0x200
   18084:	add	r2, sp, #76	; 0x4c
   18088:	ldrb	r1, [r6, #7]
   1808c:	mov	r4, r0
   18090:	mov	r0, r9
   18094:	bl	39834 <__assert_fail@plt+0x26330>
   18098:	mov	r1, r4
   1809c:	mov	r2, r0
   180a0:	mov	r0, #1
   180a4:	bl	13204 <__printf_chk@plt>
   180a8:	mov	r2, #5
   180ac:	movw	r1, #59860	; 0xe9d4
   180b0:	mov	r0, #0
   180b4:	movt	r1, #3
   180b8:	bl	12d84 <dcgettext@plt>
   180bc:	ldrb	r2, [r6, #8]
   180c0:	mov	r1, r0
   180c4:	mov	r0, #1
   180c8:	bl	13204 <__printf_chk@plt>
   180cc:	mov	r2, #5
   180d0:	movw	r1, #59904	; 0xea00
   180d4:	mov	r0, #0
   180d8:	movt	r1, #3
   180dc:	bl	12d84 <dcgettext@plt>
   180e0:	ldr	r1, [r7]
   180e4:	bl	12c58 <fputs_unlocked@plt>
   180e8:	ldrh	r4, [r6, #16]
   180ec:	cmp	r4, #4
   180f0:	bhi	18570 <__assert_fail@plt+0x506c>
   180f4:	movw	r3, #50660	; 0xc5e4
   180f8:	movt	r3, #3
   180fc:	add	r3, r3, r4, lsl #2
   18100:	mov	r2, #5
   18104:	mov	r0, #0
   18108:	ldr	r1, [r3, #92]	; 0x5c
   1810c:	bl	12d84 <dcgettext@plt>
   18110:	bl	12fdc <puts@plt>
   18114:	ldrh	r0, [r6, #18]
   18118:	bl	3756c <__assert_fail@plt+0x24068>
   1811c:	subs	r4, r0, #0
   18120:	beq	18494 <__assert_fail@plt+0x4f90>
   18124:	mov	r2, #5
   18128:	movw	r1, #59992	; 0xea58
   1812c:	mov	r0, #0
   18130:	movt	r1, #3
   18134:	bl	12d84 <dcgettext@plt>
   18138:	mov	r2, r4
   1813c:	mov	r1, r0
   18140:	mov	r0, #1
   18144:	bl	13204 <__printf_chk@plt>
   18148:	movw	r1, #60092	; 0xeabc
   1814c:	mov	r0, #0
   18150:	movt	r1, #3
   18154:	mov	r2, #5
   18158:	bl	12d84 <dcgettext@plt>
   1815c:	ldr	r4, [r6, #20]
   18160:	cmp	r4, #1
   18164:	movwne	r3, #59628	; 0xe8ec
   18168:	mov	r5, r0
   1816c:	movtne	r3, #3
   18170:	beq	184b8 <__assert_fail@plt+0x4fb4>
   18174:	mov	r1, r5
   18178:	mov	r2, r4
   1817c:	mov	r0, #1
   18180:	bl	13204 <__printf_chk@plt>
   18184:	mov	r2, #5
   18188:	movw	r1, #60136	; 0xeae8
   1818c:	mov	r0, #0
   18190:	movt	r1, #3
   18194:	bl	12d84 <dcgettext@plt>
   18198:	ldrd	r2, [r6, #24]
   1819c:	mov	r1, r0
   181a0:	mov	r0, #1
   181a4:	bl	13204 <__printf_chk@plt>
   181a8:	mov	r2, #5
   181ac:	movw	r1, #60180	; 0xeb14
   181b0:	mov	r0, #0
   181b4:	movt	r1, #3
   181b8:	bl	12d84 <dcgettext@plt>
   181bc:	mov	r2, #5
   181c0:	movw	r1, #60228	; 0xeb44
   181c4:	movt	r1, #3
   181c8:	ldrd	r4, [r6, #32]
   181cc:	mov	sl, r0
   181d0:	mov	r0, #0
   181d4:	bl	12d84 <dcgettext@plt>
   181d8:	mov	r3, r5
   181dc:	mov	r1, sl
   181e0:	mov	r2, r4
   181e4:	str	r0, [sp]
   181e8:	mov	r0, #1
   181ec:	bl	13204 <__printf_chk@plt>
   181f0:	mov	r2, #5
   181f4:	movw	r1, #60248	; 0xeb58
   181f8:	mov	r0, #0
   181fc:	movt	r1, #3
   18200:	bl	12d84 <dcgettext@plt>
   18204:	mov	r2, #5
   18208:	movw	r1, #60228	; 0xeb44
   1820c:	movt	r1, #3
   18210:	ldrd	r4, [r6, #40]	; 0x28
   18214:	mov	sl, r0
   18218:	mov	r0, #0
   1821c:	bl	12d84 <dcgettext@plt>
   18220:	mov	r3, r5
   18224:	mov	r2, r4
   18228:	mov	r1, sl
   1822c:	str	r0, [sp]
   18230:	mov	r0, #1
   18234:	bl	13204 <__printf_chk@plt>
   18238:	mov	r2, #5
   1823c:	movw	r1, #60296	; 0xeb88
   18240:	mov	r0, #0
   18244:	movt	r1, #3
   18248:	bl	12d84 <dcgettext@plt>
   1824c:	mov	r3, #512	; 0x200
   18250:	ldr	r1, [r6, #48]	; 0x30
   18254:	add	r2, sp, #76	; 0x4c
   18258:	mov	r4, r0
   1825c:	mov	r0, r9
   18260:	bl	39114 <__assert_fail@plt+0x25c10>
   18264:	mov	r1, r4
   18268:	mov	r2, r0
   1826c:	mov	r0, #1
   18270:	bl	13204 <__printf_chk@plt>
   18274:	mov	r2, #5
   18278:	movw	r1, #60340	; 0xebb4
   1827c:	mov	r0, #0
   18280:	movt	r1, #3
   18284:	bl	12d84 <dcgettext@plt>
   18288:	mov	r2, #5
   1828c:	movw	r1, #60384	; 0xebe0
   18290:	movt	r1, #3
   18294:	ldrh	r4, [r6, #52]	; 0x34
   18298:	mov	r5, r0
   1829c:	mov	r0, #0
   182a0:	bl	12d84 <dcgettext@plt>
   182a4:	mov	r1, r5
   182a8:	mov	r2, r4
   182ac:	mov	r3, r0
   182b0:	mov	r0, #1
   182b4:	bl	13204 <__printf_chk@plt>
   182b8:	mov	r2, #5
   182bc:	movw	r1, #60392	; 0xebe8
   182c0:	mov	r0, #0
   182c4:	movt	r1, #3
   182c8:	bl	12d84 <dcgettext@plt>
   182cc:	mov	r2, #5
   182d0:	movw	r1, #60384	; 0xebe0
   182d4:	movt	r1, #3
   182d8:	ldrh	r4, [r6, #54]	; 0x36
   182dc:	mov	r5, r0
   182e0:	mov	r0, #0
   182e4:	bl	12d84 <dcgettext@plt>
   182e8:	mov	r1, r5
   182ec:	mov	r2, r4
   182f0:	mov	r3, r0
   182f4:	mov	r0, #1
   182f8:	bl	13204 <__printf_chk@plt>
   182fc:	mov	r2, #5
   18300:	movw	r1, #60436	; 0xec14
   18304:	mov	r0, #0
   18308:	movt	r1, #3
   1830c:	bl	12d84 <dcgettext@plt>
   18310:	ldrh	r2, [r6, #56]	; 0x38
   18314:	mov	r1, r0
   18318:	mov	r0, #1
   1831c:	bl	13204 <__printf_chk@plt>
   18320:	ldrh	r2, [r6, #56]	; 0x38
   18324:	movw	r3, #65535	; 0xffff
   18328:	cmp	r2, r3
   1832c:	beq	184d4 <__assert_fail@plt+0x4fd0>
   18330:	ldr	r0, [r7]
   18334:	ldr	r3, [r0, #20]
   18338:	ldr	r2, [r0, #24]
   1833c:	cmp	r3, r2
   18340:	addcc	r1, r3, #1
   18344:	strcc	r1, [r0, #20]
   18348:	movcc	r2, #10
   1834c:	strbcc	r2, [r3]
   18350:	bcs	18678 <__assert_fail@plt+0x5174>
   18354:	mov	r2, #5
   18358:	movw	r1, #60524	; 0xec6c
   1835c:	mov	r0, #0
   18360:	movt	r1, #3
   18364:	bl	12d84 <dcgettext@plt>
   18368:	mov	r2, #5
   1836c:	movw	r1, #60384	; 0xebe0
   18370:	movt	r1, #3
   18374:	ldrh	r4, [r6, #58]	; 0x3a
   18378:	mov	r5, r0
   1837c:	mov	r0, #0
   18380:	bl	12d84 <dcgettext@plt>
   18384:	mov	r2, r4
   18388:	mov	r1, r5
   1838c:	mov	r3, r0
   18390:	mov	r0, #1
   18394:	bl	13204 <__printf_chk@plt>
   18398:	mov	r2, #5
   1839c:	movw	r1, #60568	; 0xec98
   183a0:	mov	r0, #0
   183a4:	movt	r1, #3
   183a8:	bl	12d84 <dcgettext@plt>
   183ac:	ldrh	r2, [r6, #60]	; 0x3c
   183b0:	mov	r1, r0
   183b4:	mov	r0, #1
   183b8:	bl	13204 <__printf_chk@plt>
   183bc:	ldrh	r4, [r6, #60]	; 0x3c
   183c0:	cmp	r4, #0
   183c4:	beq	18438 <__assert_fail@plt+0x4f34>
   183c8:	ldr	r0, [r7]
   183cc:	ldr	r3, [r0, #20]
   183d0:	ldr	r2, [r0, #24]
   183d4:	cmp	r3, r2
   183d8:	addcc	r1, r3, #1
   183dc:	strcc	r1, [r0, #20]
   183e0:	movcc	r2, #10
   183e4:	strbcc	r2, [r3]
   183e8:	bcs	1866c <__assert_fail@plt+0x5168>
   183ec:	ldrh	r2, [r6, #62]	; 0x3e
   183f0:	movw	r3, #65535	; 0xffff
   183f4:	cmp	r2, r3
   183f8:	beq	185a4 <__assert_fail@plt+0x50a0>
   183fc:	mov	r2, #5
   18400:	movw	r1, #60704	; 0xed20
   18404:	mov	r0, #0
   18408:	movt	r1, #3
   1840c:	bl	12d84 <dcgettext@plt>
   18410:	ldrh	r2, [r6, #62]	; 0x3e
   18414:	mov	r1, r0
   18418:	mov	r0, #1
   1841c:	bl	13204 <__printf_chk@plt>
   18420:	ldr	r2, [sp, #588]	; 0x24c
   18424:	ldr	r3, [r8]
   18428:	cmp	r2, r3
   1842c:	bne	1856c <__assert_fail@plt+0x5068>
   18430:	add	sp, sp, #592	; 0x250
   18434:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18438:	mov	r1, r4
   1843c:	ldr	r0, [r9, #16]
   18440:	bl	133e4 <elf_getscn@plt>
   18444:	add	r1, sp, #8
   18448:	bl	12cc4 <gelf_getshdr@plt>
   1844c:	subs	r5, r0, #0
   18450:	beq	18534 <__assert_fail@plt+0x5030>
   18454:	mov	r0, r4
   18458:	mov	r2, #5
   1845c:	movw	r1, #60608	; 0xecc0
   18460:	movt	r1, #3
   18464:	bl	12d84 <dcgettext@plt>
   18468:	ldr	r2, [r5, #32]
   1846c:	mov	r1, r0
   18470:	mov	r0, #1
   18474:	bl	13204 <__printf_chk@plt>
   18478:	b	183c8 <__assert_fail@plt+0x4ec4>
   1847c:	movw	r2, #59568	; 0xe8b0
   18480:	movt	r2, #3
   18484:	b	18028 <__assert_fail@plt+0x4b24>
   18488:	movw	r2, #59552	; 0xe8a0
   1848c:	movt	r2, #3
   18490:	b	17fe4 <__assert_fail@plt+0x4ae0>
   18494:	mov	r2, #5
   18498:	movw	r1, #60036	; 0xea84
   1849c:	movt	r1, #3
   184a0:	bl	12d84 <dcgettext@plt>
   184a4:	ldrh	r2, [r6, #18]
   184a8:	mov	r1, r0
   184ac:	mov	r0, #1
   184b0:	bl	13204 <__printf_chk@plt>
   184b4:	b	18148 <__assert_fail@plt+0x4c44>
   184b8:	movw	r1, #59804	; 0xe99c
   184bc:	mov	r0, #0
   184c0:	movt	r1, #3
   184c4:	mov	r2, #5
   184c8:	bl	12d84 <dcgettext@plt>
   184cc:	mov	r3, r0
   184d0:	b	18174 <__assert_fail@plt+0x4c70>
   184d4:	mov	r1, #0
   184d8:	ldr	r0, [r9, #16]
   184dc:	bl	133e4 <elf_getscn@plt>
   184e0:	add	r1, sp, #8
   184e4:	bl	12cc4 <gelf_getshdr@plt>
   184e8:	subs	r4, r0, #0
   184ec:	beq	18550 <__assert_fail@plt+0x504c>
   184f0:	mov	r2, #5
   184f4:	movw	r1, #60476	; 0xec3c
   184f8:	mov	r0, #0
   184fc:	movt	r1, #3
   18500:	bl	12d84 <dcgettext@plt>
   18504:	ldr	r2, [r4, #44]	; 0x2c
   18508:	mov	r1, r0
   1850c:	mov	r0, #1
   18510:	bl	13204 <__printf_chk@plt>
   18514:	b	18330 <__assert_fail@plt+0x4e2c>
   18518:	movw	r1, #59804	; 0xe99c
   1851c:	mov	r0, #0
   18520:	movt	r1, #3
   18524:	mov	r2, #5
   18528:	bl	12d84 <dcgettext@plt>
   1852c:	mov	r3, r0
   18530:	b	1805c <__assert_fail@plt+0x4b58>
   18534:	mov	r2, #5
   18538:	movw	r1, #60500	; 0xec54
   1853c:	movt	r1, #3
   18540:	bl	12d84 <dcgettext@plt>
   18544:	ldr	r1, [r7]
   18548:	bl	12c58 <fputs_unlocked@plt>
   1854c:	b	183c8 <__assert_fail@plt+0x4ec4>
   18550:	mov	r2, #5
   18554:	movw	r1, #60500	; 0xec54
   18558:	movt	r1, #3
   1855c:	bl	12d84 <dcgettext@plt>
   18560:	ldr	r1, [r7]
   18564:	bl	12c58 <fputs_unlocked@plt>
   18568:	b	18330 <__assert_fail@plt+0x4e2c>
   1856c:	bl	12dc0 <__stack_chk_fail@plt>
   18570:	add	r3, r4, #512	; 0x200
   18574:	uxth	r3, r3
   18578:	cmp	r3, #255	; 0xff
   1857c:	movwls	r1, #59944	; 0xea28
   18580:	movls	r0, #0
   18584:	movtls	r1, #3
   18588:	bls	18628 <__assert_fail@plt+0x5124>
   1858c:	cmp	r4, #65280	; 0xff00
   18590:	bcs	1861c <__assert_fail@plt+0x5118>
   18594:	movw	r0, #8172	; 0x1fec
   18598:	movt	r0, #4
   1859c:	bl	12fdc <puts@plt>
   185a0:	b	18114 <__assert_fail@plt+0x4c10>
   185a4:	mov	r1, #0
   185a8:	ldr	r0, [r9, #16]
   185ac:	bl	133e4 <elf_getscn@plt>
   185b0:	add	r1, sp, #8
   185b4:	bl	12cc4 <gelf_getshdr@plt>
   185b8:	subs	r4, r0, #0
   185bc:	beq	18644 <__assert_fail@plt+0x5140>
   185c0:	mov	r2, #5
   185c4:	movw	r1, #60632	; 0xecd8
   185c8:	mov	r0, #0
   185cc:	movt	r1, #3
   185d0:	bl	12d84 <dcgettext@plt>
   185d4:	mov	r1, #512	; 0x200
   185d8:	mov	r3, r1
   185dc:	mov	r2, #1
   185e0:	str	r0, [sp]
   185e4:	add	r0, sp, #76	; 0x4c
   185e8:	ldr	ip, [r4, #40]	; 0x28
   185ec:	str	ip, [sp, #4]
   185f0:	bl	134ec <__snprintf_chk@plt>
   185f4:	mov	r2, #5
   185f8:	movw	r1, #60656	; 0xecf0
   185fc:	mov	r0, #0
   18600:	movt	r1, #3
   18604:	bl	12d84 <dcgettext@plt>
   18608:	add	r2, sp, #76	; 0x4c
   1860c:	mov	r1, r0
   18610:	mov	r0, #1
   18614:	bl	13204 <__printf_chk@plt>
   18618:	b	18420 <__assert_fail@plt+0x4f1c>
   1861c:	movw	r1, #59964	; 0xea3c
   18620:	movt	r1, #3
   18624:	mov	r0, #0
   18628:	mov	r2, #5
   1862c:	bl	12d84 <dcgettext@plt>
   18630:	mov	r2, r4
   18634:	mov	r1, r0
   18638:	mov	r0, #1
   1863c:	bl	13204 <__printf_chk@plt>
   18640:	b	18114 <__assert_fail@plt+0x4c10>
   18644:	mov	r2, #5
   18648:	movw	r1, #60500	; 0xec54
   1864c:	movt	r1, #3
   18650:	bl	12d84 <dcgettext@plt>
   18654:	mov	r2, #512	; 0x200
   18658:	mov	r1, r0
   1865c:	add	r0, sp, #76	; 0x4c
   18660:	bl	131c8 <strncpy@plt>
   18664:	strb	r4, [sp, #587]	; 0x24b
   18668:	b	185f4 <__assert_fail@plt+0x50f0>
   1866c:	mov	r1, #10
   18670:	bl	132dc <__overflow@plt>
   18674:	b	183ec <__assert_fail@plt+0x4ee8>
   18678:	mov	r1, #10
   1867c:	bl	132dc <__overflow@plt>
   18680:	b	18354 <__assert_fail@plt+0x4e50>
   18684:	push	{r3, r4, r5, lr}
   18688:	subs	r4, r0, #0
   1868c:	mov	r5, r1
   18690:	movw	r0, #60748	; 0xed4c
   18694:	beq	186f0 <__assert_fail@plt+0x51ec>
   18698:	mov	r2, #5
   1869c:	movw	r1, #60772	; 0xed64
   186a0:	movt	r0, #3
   186a4:	movt	r1, #3
   186a8:	bl	12d84 <dcgettext@plt>
   186ac:	mov	r2, r4
   186b0:	mov	r1, r0
   186b4:	mov	r0, #1
   186b8:	bl	13204 <__printf_chk@plt>
   186bc:	movw	r1, #60788	; 0xed74
   186c0:	mov	r0, #1
   186c4:	movt	r1, #3
   186c8:	ldrb	r2, [r5], #1
   186cc:	bl	13204 <__printf_chk@plt>
   186d0:	subs	r4, r4, #1
   186d4:	bne	186bc <__assert_fail@plt+0x51b8>
   186d8:	movw	r3, #37704	; 0x9348
   186dc:	movt	r3, #5
   186e0:	mov	r0, #10
   186e4:	ldr	r1, [r3]
   186e8:	pop	{r3, r4, r5, lr}
   186ec:	b	12ed4 <_IO_putc@plt>
   186f0:	movw	r1, #60760	; 0xed58
   186f4:	movt	r0, #3
   186f8:	movt	r1, #3
   186fc:	mov	r2, #5
   18700:	bl	12d84 <dcgettext@plt>
   18704:	pop	{r3, r4, r5, lr}
   18708:	b	12fdc <puts@plt>
   1870c:	push	{r4, r5, r6, lr}
   18710:	movw	r4, #37688	; 0x9338
   18714:	movt	r4, #5
   18718:	sub	sp, sp, #8
   1871c:	mov	r5, r0
   18720:	mov	r6, r1
   18724:	ldr	r3, [r4]
   18728:	mov	r1, sp
   1872c:	ldr	r0, [r0]
   18730:	str	r3, [sp, #4]
   18734:	bl	13498 <elf_getshdrstrndx@plt>
   18738:	cmp	r0, #0
   1873c:	blt	18778 <__assert_fail@plt+0x5274>
   18740:	ldr	r0, [r5]
   18744:	ldr	r2, [r6]
   18748:	ldr	r1, [sp]
   1874c:	bl	12e44 <elf_strptr@plt>
   18750:	movw	r3, #8172	; 0x1fec
   18754:	movt	r3, #4
   18758:	cmp	r0, #0
   1875c:	moveq	r0, r3
   18760:	ldr	r2, [sp, #4]
   18764:	ldr	r3, [r4]
   18768:	cmp	r2, r3
   1876c:	bne	18784 <__assert_fail@plt+0x5280>
   18770:	add	sp, sp, #8
   18774:	pop	{r4, r5, r6, pc}
   18778:	movw	r0, #8172	; 0x1fec
   1877c:	movt	r0, #4
   18780:	b	18760 <__assert_fail@plt+0x525c>
   18784:	bl	12dc0 <__stack_chk_fail@plt>
   18788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1878c:	sub	sp, sp, #44	; 0x2c
   18790:	mov	fp, r1
   18794:	mov	r0, r3
   18798:	mov	r1, #0
   1879c:	mov	r5, r3
   187a0:	ldr	r4, [sp, #80]	; 0x50
   187a4:	bl	131bc <elf_rawdata@plt>
   187a8:	subs	r8, r0, #0
   187ac:	beq	1891c <__assert_fail@plt+0x5418>
   187b0:	ldr	sl, [r8, #12]
   187b4:	mov	r1, #0
   187b8:	mov	r7, r1
   187bc:	mov	r6, sl
   187c0:	cmp	r7, #0
   187c4:	cmpeq	r6, #15
   187c8:	str	sl, [sp, #28]
   187cc:	movls	ip, #6
   187d0:	movls	r9, #4
   187d4:	bls	18814 <__assert_fail@plt+0x5310>
   187d8:	mov	r2, sl
   187dc:	mov	r3, r1
   187e0:	mov	r9, #1
   187e4:	lsr	r1, r2, #4
   187e8:	lsr	r0, r3, #4
   187ec:	orr	r1, r1, r3, lsl #28
   187f0:	add	r9, r9, #1
   187f4:	mov	r3, r0
   187f8:	mov	r2, r1
   187fc:	cmp	r3, #0
   18800:	cmpeq	r2, #15
   18804:	bhi	187e4 <__assert_fail@plt+0x52e0>
   18808:	cmp	r9, #4
   1880c:	movlt	r9, #4
   18810:	add	ip, r9, #2
   18814:	mov	r2, #5
   18818:	movw	r1, #60812	; 0xed8c
   1881c:	mov	r0, #0
   18820:	movt	r1, #3
   18824:	str	ip, [sp, #24]
   18828:	bl	12d84 <dcgettext@plt>
   1882c:	str	r0, [sp, #20]
   18830:	mov	r0, r5
   18834:	bl	133d8 <elf_ndxscn@plt>
   18838:	mov	r1, r4
   1883c:	mov	r5, r0
   18840:	add	r0, fp, #16
   18844:	bl	1870c <__assert_fail@plt+0x5208>
   18848:	ldrd	sl, [r4, #24]
   1884c:	mov	r2, #5
   18850:	movw	r1, #60796	; 0xed7c
   18854:	movt	r1, #3
   18858:	strd	sl, [sp, #32]
   1885c:	str	r0, [sp, #16]
   18860:	mov	r0, #0
   18864:	bl	12d84 <dcgettext@plt>
   18868:	mov	r1, #124	; 0x7c
   1886c:	bl	1330c <strrchr@plt>
   18870:	ldrd	sl, [sp, #32]
   18874:	ldr	ip, [sp, #24]
   18878:	mov	r2, r5
   1887c:	ldr	r1, [sp, #20]
   18880:	strd	sl, [sp]
   18884:	str	ip, [sp, #8]
   18888:	cmp	r0, #0
   1888c:	addne	r3, r0, #1
   18890:	mov	r0, #1
   18894:	movweq	r3, #60796	; 0xed7c
   18898:	movteq	r3, #3
   1889c:	str	r3, [sp, #12]
   188a0:	ldr	r3, [sp, #16]
   188a4:	bl	13204 <__printf_chk@plt>
   188a8:	orrs	fp, r6, r7
   188ac:	beq	18914 <__assert_fail@plt+0x5410>
   188b0:	mov	r4, #0
   188b4:	mov	r5, #0
   188b8:	ldr	sl, [r8]
   188bc:	mov	r1, #0
   188c0:	ldr	fp, [sp, #28]
   188c4:	add	sl, sl, r4
   188c8:	rsb	r2, r4, fp
   188cc:	mov	r0, sl
   188d0:	bl	13270 <memchr@plt>
   188d4:	movw	r1, #60912	; 0xedf0
   188d8:	mov	r2, r9
   188dc:	movt	r1, #3
   188e0:	subs	fp, r0, #0
   188e4:	beq	18934 <__assert_fail@plt+0x5430>
   188e8:	str	sl, [sp, #8]
   188ec:	rsb	sl, sl, fp
   188f0:	strd	r4, [sp]
   188f4:	mov	r0, #1
   188f8:	add	sl, sl, #1
   188fc:	bl	13204 <__printf_chk@plt>
   18900:	adds	r4, r4, sl
   18904:	adc	r5, r5, #0
   18908:	cmp	r5, r7
   1890c:	cmpeq	r4, r6
   18910:	bcc	188b8 <__assert_fail@plt+0x53b4>
   18914:	add	sp, sp, #44	; 0x2c
   18918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1891c:	mov	ip, #6
   18920:	mov	r9, #4
   18924:	mov	r6, #0
   18928:	mov	r7, #0
   1892c:	str	r8, [sp, #28]
   18930:	b	18814 <__assert_fail@plt+0x5310>
   18934:	mov	r2, #5
   18938:	movw	r1, #60872	; 0xedc8
   1893c:	movt	r1, #3
   18940:	bl	12d84 <dcgettext@plt>
   18944:	mov	r1, r0
   18948:	mov	r0, #1
   1894c:	add	sp, sp, #44	; 0x2c
   18950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18954:	b	13204 <__printf_chk@plt>
   18958:	movw	r0, #37688	; 0x9338
   1895c:	movt	r0, #5
   18960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18964:	sub	sp, sp, #100	; 0x64
   18968:	ldr	ip, [r0]
   1896c:	mov	r2, #5
   18970:	mov	r4, r1
   18974:	str	r0, [sp, #64]	; 0x40
   18978:	movw	r1, #60928	; 0xee00
   1897c:	mov	r0, #0
   18980:	movt	r1, #3
   18984:	mov	r6, r3
   18988:	ldr	r8, [sp, #136]	; 0x88
   1898c:	str	ip, [sp, #92]	; 0x5c
   18990:	ldr	r7, [sp, #140]	; 0x8c
   18994:	bl	12d84 <dcgettext@plt>
   18998:	mov	sl, r0
   1899c:	mov	r0, r6
   189a0:	bl	133d8 <elf_ndxscn@plt>
   189a4:	mov	r1, r8
   189a8:	mov	r9, r0
   189ac:	add	r0, r4, #16
   189b0:	bl	1870c <__assert_fail@plt+0x5208>
   189b4:	ldrd	r4, [r8, #24]
   189b8:	mov	r1, sl
   189bc:	mov	r2, r9
   189c0:	strd	r4, [sp]
   189c4:	mov	r3, r0
   189c8:	mov	r0, #1
   189cc:	bl	13204 <__printf_chk@plt>
   189d0:	ldrd	r2, [r8, #32]
   189d4:	orrs	r1, r2, r3
   189d8:	beq	18f34 <__assert_fail@plt+0x5a30>
   189dc:	ldr	r2, [r7, #60]	; 0x3c
   189e0:	cmp	r2, #0
   189e4:	str	r2, [sp, #48]	; 0x30
   189e8:	beq	18eec <__assert_fail@plt+0x59e8>
   189ec:	movw	r0, #37712	; 0x9350
   189f0:	movt	r0, #5
   189f4:	str	r0, [sp, #52]	; 0x34
   189f8:	ldr	r1, [r0, #104]	; 0x68
   189fc:	cmp	r1, #0
   18a00:	bne	18fa4 <__assert_fail@plt+0x5aa0>
   18a04:	ldr	r1, [sp, #48]	; 0x30
   18a08:	ldr	r2, [sp, #48]	; 0x30
   18a0c:	ldr	r1, [r1]
   18a10:	ldr	r3, [r2, #12]
   18a14:	add	r3, r1, r3
   18a18:	str	r1, [sp, #36]	; 0x24
   18a1c:	cmp	r1, r3
   18a20:	str	r3, [sp, #44]	; 0x2c
   18a24:	bcs	18f34 <__assert_fail@plt+0x5a30>
   18a28:	ldr	r2, [sp, #36]	; 0x24
   18a2c:	movw	r3, #37712	; 0x9350
   18a30:	movw	r0, #8172	; 0x1fec
   18a34:	movt	r3, #5
   18a38:	movt	r0, #4
   18a3c:	str	r3, [sp, #60]	; 0x3c
   18a40:	mov	r4, r2
   18a44:	movw	r1, #52429	; 0xcccd
   18a48:	mov	r3, #0
   18a4c:	movt	r1, #52428	; 0xcccc
   18a50:	str	r0, [sp, #32]
   18a54:	str	r1, [sp, #56]	; 0x38
   18a58:	str	r2, [sp, #68]	; 0x44
   18a5c:	str	r3, [sp, #40]	; 0x28
   18a60:	ldr	r0, [sp, #36]	; 0x24
   18a64:	movw	r1, #61036	; 0xee6c
   18a68:	movt	r1, #3
   18a6c:	rsb	r4, r4, r0
   18a70:	mov	r0, #1
   18a74:	asr	r5, r4, #31
   18a78:	mov	r2, r4
   18a7c:	mov	r3, r5
   18a80:	bl	13204 <__printf_chk@plt>
   18a84:	ldr	r1, [sp, #52]	; 0x34
   18a88:	ldr	r2, [sp, #40]	; 0x28
   18a8c:	ldr	r3, [r1, #104]	; 0x68
   18a90:	cmp	r2, r3
   18a94:	bcc	18c94 <__assert_fail@plt+0x5790>
   18a98:	mov	r6, #0
   18a9c:	add	r2, sp, #75	; 0x4b
   18aa0:	str	r6, [sp, #4]
   18aa4:	mov	r1, r6
   18aa8:	str	r2, [sp]
   18aac:	mov	r3, r6
   18ab0:	str	r6, [sp, #8]
   18ab4:	mov	r0, r7
   18ab8:	add	r2, sp, #76	; 0x4c
   18abc:	bl	12d0c <dwarf_get_units@plt>
   18ac0:	cmp	r0, r6
   18ac4:	bne	18f50 <__assert_fail@plt+0x5a4c>
   18ac8:	orrs	r1, r4, r5
   18acc:	bne	18ae0 <__assert_fail@plt+0x55dc>
   18ad0:	ldrb	r3, [sp, #75]	; 0x4b
   18ad4:	sub	r3, r3, #5
   18ad8:	cmp	r3, #1
   18adc:	bls	18af8 <__assert_fail@plt+0x55f4>
   18ae0:	mov	r0, #0
   18ae4:	movw	r2, #61100	; 0xeeac
   18ae8:	strd	r4, [sp]
   18aec:	mov	r1, r0
   18af0:	movt	r2, #3
   18af4:	bl	12f70 <error@plt>
   18af8:	ldr	r3, [sp, #76]	; 0x4c
   18afc:	mov	r0, #10
   18b00:	ldrh	r4, [r3, #26]
   18b04:	ldrb	r9, [r3, #25]
   18b08:	cmp	r4, #4
   18b0c:	movls	r4, #0
   18b10:	movhi	r4, #1
   18b14:	bl	131b0 <putchar@plt>
   18b18:	cmp	r4, #0
   18b1c:	bne	1904c <__assert_fail@plt+0x5b48>
   18b20:	ldr	r6, [sp, #36]	; 0x24
   18b24:	rsb	r8, r9, #0
   18b28:	ldr	r2, [sp, #44]	; 0x2c
   18b2c:	mov	fp, r9
   18b30:	mov	r4, r6
   18b34:	str	r2, [sp, #36]	; 0x24
   18b38:	ldr	r1, [sp, #36]	; 0x24
   18b3c:	mov	r5, #1
   18b40:	rsb	r0, r6, r1
   18b44:	mov	r1, fp
   18b48:	bl	3b5a8 <__assert_fail@plt+0x280a4>
   18b4c:	cmp	r0, #9
   18b50:	bls	18b6c <__assert_fail@plt+0x5668>
   18b54:	ldr	r3, [sp, #56]	; 0x38
   18b58:	umull	r2, r0, r3, r0
   18b5c:	add	r5, r5, #1
   18b60:	lsr	r0, r0, #3
   18b64:	cmp	r0, #9
   18b68:	bhi	18b58 <__assert_fail@plt+0x5654>
   18b6c:	ldr	r3, [sp, #48]	; 0x30
   18b70:	movw	r1, #61372	; 0xefbc
   18b74:	ldr	r0, [sp, #36]	; 0x24
   18b78:	movt	r1, #3
   18b7c:	ldr	r2, [r3]
   18b80:	add	r8, r0, r8
   18b84:	mov	r0, #1
   18b88:	rsb	r2, r2, r6
   18b8c:	bl	13204 <__printf_chk@plt>
   18b90:	cmp	r4, r8
   18b94:	bhi	18c40 <__assert_fail@plt+0x573c>
   18b98:	lsl	fp, fp, #1
   18b9c:	mov	r6, #0
   18ba0:	str	fp, [sp, #24]
   18ba4:	b	18c18 <__assert_fail@plt+0x5714>
   18ba8:	cmp	r3, #0
   18bac:	ldreq	fp, [r4]
   18bb0:	ldreq	sl, [r4, #4]
   18bb4:	bne	18fc8 <__assert_fail@plt+0x5ac4>
   18bb8:	add	r4, r4, #8
   18bbc:	mov	r1, #0
   18bc0:	mov	r2, fp
   18bc4:	str	r1, [sp]
   18bc8:	mov	r3, sl
   18bcc:	mov	r0, r7
   18bd0:	bl	133cc <dwarf_getstring@plt>
   18bd4:	ldr	r2, [sp, #24]
   18bd8:	ldr	lr, [sp, #32]
   18bdc:	mov	r3, r6
   18be0:	str	fp, [sp, #8]
   18be4:	movw	r1, #61400	; 0xefd8
   18be8:	str	r2, [sp]
   18bec:	movt	r1, #3
   18bf0:	str	sl, [sp, #12]
   18bf4:	mov	r2, r5
   18bf8:	add	r6, r6, #1
   18bfc:	cmp	r0, #0
   18c00:	movne	lr, r0
   18c04:	mov	r0, #1
   18c08:	str	lr, [sp, #16]
   18c0c:	bl	13204 <__printf_chk@plt>
   18c10:	cmp	r4, r8
   18c14:	bhi	18c40 <__assert_fail@plt+0x573c>
   18c18:	cmp	r9, #4
   18c1c:	ldrb	r3, [r7, #84]	; 0x54
   18c20:	bne	18ba8 <__assert_fail@plt+0x56a4>
   18c24:	cmp	r3, #0
   18c28:	ldr	r1, [r4]
   18c2c:	bne	18fdc <__assert_fail@plt+0x5ad8>
   18c30:	add	r4, r4, #4
   18c34:	mov	fp, r1
   18c38:	mov	sl, #0
   18c3c:	b	18bbc <__assert_fail@plt+0x56b8>
   18c40:	mov	r0, #10
   18c44:	bl	131b0 <putchar@plt>
   18c48:	ldr	r3, [sp, #36]	; 0x24
   18c4c:	cmp	r4, r3
   18c50:	beq	18c6c <__assert_fail@plt+0x5768>
   18c54:	mov	r0, #0
   18c58:	movw	r2, #61424	; 0xeff0
   18c5c:	rsb	r3, r4, r3
   18c60:	mov	r1, r0
   18c64:	movt	r2, #3
   18c68:	bl	12f70 <error@plt>
   18c6c:	ldr	r0, [sp, #36]	; 0x24
   18c70:	ldr	r1, [sp, #44]	; 0x2c
   18c74:	ldr	r2, [sp, #40]	; 0x28
   18c78:	cmp	r0, r1
   18c7c:	add	r3, r2, #1
   18c80:	bcs	18f34 <__assert_fail@plt+0x5a30>
   18c84:	str	r3, [sp, #40]	; 0x28
   18c88:	ldr	r3, [sp, #48]	; 0x30
   18c8c:	ldr	r4, [r3]
   18c90:	b	18a60 <__assert_fail@plt+0x555c>
   18c94:	ldr	r3, [sp, #60]	; 0x3c
   18c98:	ldr	r6, [r3, #112]	; 0x70
   18c9c:	adds	r6, r6, r2, lsl #4
   18ca0:	beq	18a98 <__assert_fail@plt+0x5594>
   18ca4:	mov	r1, #0
   18ca8:	ldr	r0, [r6, #8]
   18cac:	mov	r2, r1
   18cb0:	str	r1, [sp]
   18cb4:	mov	r3, r1
   18cb8:	str	r1, [sp, #4]
   18cbc:	str	r1, [sp, #8]
   18cc0:	str	r1, [sp, #12]
   18cc4:	add	r1, sp, #76	; 0x4c
   18cc8:	bl	131ec <dwarf_cu_die@plt>
   18ccc:	cmp	r0, #0
   18cd0:	beq	18eb8 <__assert_fail@plt+0x59b4>
   18cd4:	add	r0, sp, #76	; 0x4c
   18cd8:	bl	12f28 <dwarf_dieoffset@plt>
   18cdc:	mov	r2, r0
   18ce0:	mov	r3, r1
   18ce4:	mov	r0, #1
   18ce8:	movw	r1, #61176	; 0xeef8
   18cec:	movt	r1, #3
   18cf0:	bl	13204 <__printf_chk@plt>
   18cf4:	ldrb	r2, [r7, #84]	; 0x54
   18cf8:	cmp	r2, #0
   18cfc:	ldreq	r1, [sp, #36]	; 0x24
   18d00:	ldreq	r3, [r1]
   18d04:	bne	18fe8 <__assert_fail@plt+0x5ae4>
   18d08:	cmn	r3, #1
   18d0c:	ldr	r0, [sp, #36]	; 0x24
   18d10:	mov	r1, #0
   18d14:	movne	fp, #4
   18d18:	add	r4, r0, #4
   18d1c:	movne	r9, fp
   18d20:	mov	r0, r3
   18d24:	strd	r0, [sp, #24]
   18d28:	beq	18ff8 <__assert_fail@plt+0x5af4>
   18d2c:	mov	r0, #10
   18d30:	bl	131b0 <putchar@plt>
   18d34:	mov	r2, #5
   18d38:	movw	r1, #61212	; 0xef1c
   18d3c:	mov	r0, #0
   18d40:	movt	r1, #3
   18d44:	bl	12d84 <dcgettext@plt>
   18d48:	ldrd	r2, [sp, #24]
   18d4c:	mov	r1, r0
   18d50:	mov	r0, #1
   18d54:	bl	13204 <__printf_chk@plt>
   18d58:	mov	r2, #5
   18d5c:	movw	r1, #61236	; 0xef34
   18d60:	mov	r0, #0
   18d64:	movt	r1, #3
   18d68:	bl	12d84 <dcgettext@plt>
   18d6c:	mov	r2, fp
   18d70:	mov	r1, r0
   18d74:	mov	r0, #1
   18d78:	bl	13204 <__printf_chk@plt>
   18d7c:	ldr	r0, [sp, #44]	; 0x2c
   18d80:	sub	r3, r0, #4
   18d84:	cmp	r4, r3
   18d88:	bhi	18f8c <__assert_fail@plt+0x5a88>
   18d8c:	ldrd	r2, [sp, #24]
   18d90:	cmp	r3, #0
   18d94:	cmpeq	r2, #3
   18d98:	bls	18f8c <__assert_fail@plt+0x5a88>
   18d9c:	rsb	r2, r4, r0
   18da0:	ldrd	r0, [sp, #24]
   18da4:	asr	r3, r2, #31
   18da8:	cmp	r1, r3
   18dac:	cmpeq	r0, r2
   18db0:	bhi	18f8c <__assert_fail@plt+0x5a88>
   18db4:	ldrb	r3, [r7, #84]	; 0x54
   18db8:	add	r1, r4, r0
   18dbc:	mov	r0, #0
   18dc0:	str	r1, [sp, #36]	; 0x24
   18dc4:	cmp	r3, #0
   18dc8:	movw	r1, #61260	; 0xef4c
   18dcc:	movt	r1, #3
   18dd0:	ldrhne	r3, [r4]
   18dd4:	ldrheq	r5, [r4]
   18dd8:	lslne	r2, r3, #8
   18ddc:	orrne	r3, r2, r3, lsr #8
   18de0:	mov	r2, #5
   18de4:	uxthne	r5, r3
   18de8:	bl	12d84 <dcgettext@plt>
   18dec:	mov	r2, r5
   18df0:	mov	r1, r0
   18df4:	mov	r0, #1
   18df8:	bl	13204 <__printf_chk@plt>
   18dfc:	cmp	r5, #5
   18e00:	beq	18e2c <__assert_fail@plt+0x5928>
   18e04:	mov	r2, #5
   18e08:	movw	r1, #61284	; 0xef64
   18e0c:	mov	r0, #0
   18e10:	movt	r1, #3
   18e14:	bl	12d84 <dcgettext@plt>
   18e18:	mov	r2, r0
   18e1c:	mov	r0, #0
   18e20:	mov	r1, r0
   18e24:	bl	12f70 <error@plt>
   18e28:	b	18c6c <__assert_fail@plt+0x5768>
   18e2c:	ldrb	r2, [r7, #84]	; 0x54
   18e30:	add	r3, r4, #2
   18e34:	movw	r1, #61300	; 0xef74
   18e38:	mov	r0, #0
   18e3c:	cmp	r2, #0
   18e40:	movt	r1, #3
   18e44:	add	r4, r4, #4
   18e48:	ldrhne	r3, [r3]
   18e4c:	ldrheq	r5, [r3]
   18e50:	lslne	r2, r3, #8
   18e54:	orrne	r3, r2, r3, lsr #8
   18e58:	mov	r2, #5
   18e5c:	uxthne	r5, r3
   18e60:	bl	12d84 <dcgettext@plt>
   18e64:	mov	r2, r5
   18e68:	mov	r1, r0
   18e6c:	mov	r0, #1
   18e70:	bl	13204 <__printf_chk@plt>
   18e74:	cmp	r6, #0
   18e78:	beq	18ed8 <__assert_fail@plt+0x59d4>
   18e7c:	ldr	r3, [sp, #68]	; 0x44
   18e80:	ldr	ip, [r6, #4]
   18e84:	rsb	r2, r3, r4
   18e88:	ldr	r0, [r6]
   18e8c:	ubfx	r1, ip, #0, #29
   18e90:	asr	r3, r2, #31
   18e94:	cmp	r1, r3
   18e98:	cmpeq	r0, r2
   18e9c:	beq	18ed8 <__assert_fail@plt+0x59d4>
   18ea0:	mov	r0, #0
   18ea4:	movw	r2, #61324	; 0xef8c
   18ea8:	mov	r1, r0
   18eac:	movt	r2, #3
   18eb0:	bl	12f70 <error@plt>
   18eb4:	b	18c6c <__assert_fail@plt+0x5768>
   18eb8:	mvn	r0, #0
   18ebc:	bl	13078 <dwarf_errmsg@plt>
   18ec0:	movw	r1, #61156	; 0xeee4
   18ec4:	movt	r1, #3
   18ec8:	mov	r2, r0
   18ecc:	mov	r0, #1
   18ed0:	bl	13204 <__printf_chk@plt>
   18ed4:	b	18cf4 <__assert_fail@plt+0x57f0>
   18ed8:	mov	r0, #10
   18edc:	rsb	r8, r9, #0
   18ee0:	bl	131b0 <putchar@plt>
   18ee4:	mov	r6, r4
   18ee8:	b	18b38 <__assert_fail@plt+0x5634>
   18eec:	mov	r0, r6
   18ef0:	mov	r1, r2
   18ef4:	bl	131bc <elf_rawdata@plt>
   18ef8:	subs	r3, r0, #0
   18efc:	str	r3, [sp, #48]	; 0x30
   18f00:	bne	189ec <__assert_fail@plt+0x54e8>
   18f04:	mov	r2, #5
   18f08:	movw	r1, #60976	; 0xee30
   18f0c:	movt	r1, #3
   18f10:	bl	12d84 <dcgettext@plt>
   18f14:	mov	r4, r0
   18f18:	mvn	r0, #0
   18f1c:	bl	130a8 <elf_errmsg@plt>
   18f20:	mov	r2, r4
   18f24:	mov	r3, r0
   18f28:	ldr	r0, [sp, #48]	; 0x30
   18f2c:	mov	r1, r0
   18f30:	bl	12f70 <error@plt>
   18f34:	ldr	r0, [sp, #64]	; 0x40
   18f38:	ldr	r2, [sp, #92]	; 0x5c
   18f3c:	ldr	r3, [r0]
   18f40:	cmp	r2, r3
   18f44:	bne	18fe4 <__assert_fail@plt+0x5ae0>
   18f48:	add	sp, sp, #100	; 0x64
   18f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f50:	mov	r0, r6
   18f54:	mov	r1, r6
   18f58:	movw	r2, #61060	; 0xee84
   18f5c:	movt	r2, #3
   18f60:	ldr	r6, [sp, #36]	; 0x24
   18f64:	bl	12f70 <error@plt>
   18f68:	mov	r0, #10
   18f6c:	mov	fp, #4
   18f70:	bl	131b0 <putchar@plt>
   18f74:	ldr	r0, [sp, #44]	; 0x2c
   18f78:	mov	r4, r6
   18f7c:	mov	r9, fp
   18f80:	mvn	r8, #3
   18f84:	str	r0, [sp, #36]	; 0x24
   18f88:	b	18b38 <__assert_fail@plt+0x5634>
   18f8c:	mov	r0, #0
   18f90:	movw	r2, #61196	; 0xef0c
   18f94:	mov	r1, r0
   18f98:	movt	r2, #3
   18f9c:	bl	12f70 <error@plt>
   18fa0:	b	18f34 <__assert_fail@plt+0x5a30>
   18fa4:	ldr	r0, [r0, #112]	; 0x70
   18fa8:	movw	r2, #61024	; 0xee60
   18fac:	movw	r3, #57200	; 0xdf70
   18fb0:	movt	r2, #3
   18fb4:	movt	r3, #1
   18fb8:	str	r2, [sp]
   18fbc:	mov	r2, #16
   18fc0:	bl	130c0 <qsort_r@plt>
   18fc4:	b	18a04 <__assert_fail@plt+0x5500>
   18fc8:	ldr	sl, [r4]
   18fcc:	ldr	r1, [r4, #4]
   18fd0:	rev	sl, sl
   18fd4:	rev	fp, r1
   18fd8:	b	18bb8 <__assert_fail@plt+0x56b4>
   18fdc:	rev	r1, r1
   18fe0:	b	18c30 <__assert_fail@plt+0x572c>
   18fe4:	bl	12dc0 <__stack_chk_fail@plt>
   18fe8:	ldr	r0, [sp, #36]	; 0x24
   18fec:	ldr	r3, [r0]
   18ff0:	rev	r3, r3
   18ff4:	b	18d08 <__assert_fail@plt+0x5804>
   18ff8:	ldr	r1, [sp, #44]	; 0x2c
   18ffc:	sub	r3, r1, #8
   19000:	cmp	r4, r3
   19004:	bhi	18f8c <__assert_fail@plt+0x5a88>
   19008:	cmp	r2, #0
   1900c:	ldreq	r2, [r4]
   19010:	ldreq	r4, [r4, #4]
   19014:	streq	r2, [sp, #24]
   19018:	streq	r4, [sp, #28]
   1901c:	beq	19038 <__assert_fail@plt+0x5b34>
   19020:	ldr	r3, [r4]
   19024:	ldr	r2, [r4, #4]
   19028:	rev	r3, r3
   1902c:	str	r3, [sp, #28]
   19030:	rev	r2, r2
   19034:	str	r2, [sp, #24]
   19038:	ldr	r3, [sp, #36]	; 0x24
   1903c:	mov	fp, #8
   19040:	mov	r9, fp
   19044:	add	r4, r3, #12
   19048:	b	18d2c <__assert_fail@plt+0x5828>
   1904c:	mov	r6, #0
   19050:	b	18cf4 <__assert_fail@plt+0x57f0>
   19054:	push	{r4, r5, r6, r7, r8, r9, lr}
   19058:	movw	r6, #37688	; 0x9338
   1905c:	movt	r6, #5
   19060:	sub	sp, sp, #20
   19064:	mov	r2, #5
   19068:	mov	r5, r1
   1906c:	ldr	ip, [r6]
   19070:	movw	r1, #60928	; 0xee00
   19074:	mov	r0, #0
   19078:	movt	r1, #3
   1907c:	mov	r8, r3
   19080:	ldr	r4, [sp, #48]	; 0x30
   19084:	str	ip, [sp, #12]
   19088:	ldr	r7, [sp, #52]	; 0x34
   1908c:	bl	12d84 <dcgettext@plt>
   19090:	mov	r9, r0
   19094:	mov	r0, r8
   19098:	bl	133d8 <elf_ndxscn@plt>
   1909c:	mov	r1, r4
   190a0:	mov	r8, r0
   190a4:	add	r0, r5, #16
   190a8:	bl	1870c <__assert_fail@plt+0x5208>
   190ac:	ldrd	r4, [r4, #24]
   190b0:	mov	r1, r9
   190b4:	mov	r2, r8
   190b8:	strd	r4, [sp]
   190bc:	mov	r3, r0
   190c0:	mov	r0, #1
   190c4:	bl	13204 <__printf_chk@plt>
   190c8:	add	r2, sp, #16
   190cc:	mov	r3, #0
   190d0:	mov	r0, r7
   190d4:	str	r3, [r2, #-8]!
   190d8:	movw	r1, #16984	; 0x4258
   190dc:	movt	r1, #1
   190e0:	bl	13348 <dwarf_getpubnames@plt>
   190e4:	ldr	r2, [sp, #12]
   190e8:	ldr	r3, [r6]
   190ec:	cmp	r2, r3
   190f0:	bne	190fc <__assert_fail@plt+0x5bf8>
   190f4:	add	sp, sp, #20
   190f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   190fc:	bl	12dc0 <__stack_chk_fail@plt>
   19100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19104:	sub	sp, sp, #100	; 0x64
   19108:	movw	r8, #37688	; 0x9338
   1910c:	movt	r8, #5
   19110:	ldr	sl, [sp, #140]	; 0x8c
   19114:	mov	r6, r3
   19118:	ldr	r3, [r8]
   1911c:	mov	r5, r1
   19120:	str	r8, [sp, #36]	; 0x24
   19124:	ldr	ip, [sl, #20]
   19128:	ldr	r4, [sp, #136]	; 0x88
   1912c:	cmp	ip, #0
   19130:	str	r3, [sp, #92]	; 0x5c
   19134:	beq	1935c <__assert_fail@plt+0x5e58>
   19138:	mov	r2, #5
   1913c:	movw	r1, #61456	; 0xf010
   19140:	mov	r0, #0
   19144:	movt	r1, #3
   19148:	ldr	r7, [ip, #12]
   1914c:	bl	12d84 <dcgettext@plt>
   19150:	mov	r9, #0
   19154:	mov	r8, r0
   19158:	mov	r0, r6
   1915c:	bl	133d8 <elf_ndxscn@plt>
   19160:	mov	r1, r4
   19164:	mov	r6, r0
   19168:	add	r0, r5, #16
   1916c:	bl	1870c <__assert_fail@plt+0x5208>
   19170:	ldrd	r4, [r4, #24]
   19174:	mov	r1, r8
   19178:	mov	r2, r6
   1917c:	mov	r8, r7
   19180:	strd	r8, [sp, #24]
   19184:	strd	r4, [sp]
   19188:	mov	r3, r0
   1918c:	mov	r0, #1
   19190:	bl	13204 <__printf_chk@plt>
   19194:	orrs	r9, r8, r9
   19198:	beq	19340 <__assert_fail@plt+0x5e3c>
   1919c:	add	r7, sp, #72	; 0x48
   191a0:	mov	r4, #0
   191a4:	mov	r5, #0
   191a8:	movw	r8, #37712	; 0x9350
   191ac:	str	sl, [sp, #20]
   191b0:	movt	r8, #5
   191b4:	str	r8, [sp, #32]
   191b8:	mov	r2, #5
   191bc:	movw	r1, #61512	; 0xf048
   191c0:	mov	r0, #0
   191c4:	movt	r1, #3
   191c8:	bl	12d84 <dcgettext@plt>
   191cc:	mov	r2, r4
   191d0:	mov	r3, r5
   191d4:	mov	r1, r0
   191d8:	mov	r0, #1
   191dc:	bl	13204 <__printf_chk@plt>
   191e0:	add	r9, sp, #44	; 0x2c
   191e4:	ldr	r0, [sp, #20]
   191e8:	str	r9, [sp]
   191ec:	mov	r2, r4
   191f0:	str	r7, [sp, #4]
   191f4:	mov	r3, r5
   191f8:	bl	130b4 <dwarf_offabbrev@plt>
   191fc:	subs	r6, r0, #0
   19200:	bne	19324 <__assert_fail@plt+0x5e20>
   19204:	mov	r0, r7
   19208:	bl	1306c <dwarf_getabbrevcode@plt>
   1920c:	mov	r8, r0
   19210:	mov	r0, r7
   19214:	bl	12ec8 <dwarf_getabbrevtag@plt>
   19218:	mov	r9, r0
   1921c:	mov	r0, r7
   19220:	bl	12c94 <dwarf_abbrevhaschildren@plt>
   19224:	mov	r2, #5
   19228:	movw	r1, #61596	; 0xf09c
   1922c:	movt	r1, #3
   19230:	mov	sl, r0
   19234:	mov	r0, r6
   19238:	bl	12d84 <dcgettext@plt>
   1923c:	cmp	sl, #0
   19240:	mov	r6, #0
   19244:	ldrne	r1, [sp, #32]
   19248:	ldreq	r2, [sp, #32]
   1924c:	mov	fp, r0
   19250:	mov	r0, r9
   19254:	ldrne	sl, [r1, #116]	; 0x74
   19258:	add	r9, sp, #56	; 0x38
   1925c:	ldreq	sl, [r2, #120]	; 0x78
   19260:	bl	1786c <__assert_fail@plt+0x4368>
   19264:	mov	r2, r8
   19268:	strd	r4, [sp]
   1926c:	mov	r1, fp
   19270:	add	r8, sp, #64	; 0x40
   19274:	str	sl, [sp, #8]
   19278:	str	r0, [sp, #12]
   1927c:	mov	r0, #1
   19280:	bl	13204 <__printf_chk@plt>
   19284:	b	192a0 <__assert_fail@plt+0x5d9c>
   19288:	movw	r1, #61680	; 0xf0f0
   1928c:	mov	r0, #1
   19290:	movt	r1, #3
   19294:	ldrd	r2, [sp, #64]	; 0x40
   19298:	bl	13204 <__printf_chk@plt>
   1929c:	add	r6, r6, #1
   192a0:	str	r9, [sp]
   192a4:	mov	r0, r7
   192a8:	str	r8, [sp, #4]
   192ac:	mov	r1, r6
   192b0:	add	r2, sp, #48	; 0x30
   192b4:	add	r3, sp, #52	; 0x34
   192b8:	bl	12f88 <dwarf_getabbrevattr_data@plt>
   192bc:	cmp	r0, #0
   192c0:	bne	19314 <__assert_fail@plt+0x5e10>
   192c4:	ldr	r0, [sp, #48]	; 0x30
   192c8:	bl	16670 <__assert_fail@plt+0x316c>
   192cc:	mov	sl, r0
   192d0:	ldr	r0, [sp, #52]	; 0x34
   192d4:	bl	1748c <__assert_fail@plt+0x3f88>
   192d8:	mov	r2, sl
   192dc:	movw	r1, #61640	; 0xf0c8
   192e0:	movt	r1, #3
   192e4:	mov	r3, r0
   192e8:	mov	r0, #1
   192ec:	bl	13204 <__printf_chk@plt>
   192f0:	ldr	r3, [sp, #52]	; 0x34
   192f4:	cmp	r3, #33	; 0x21
   192f8:	bne	19288 <__assert_fail@plt+0x5d84>
   192fc:	movw	r1, #61672	; 0xf0e8
   19300:	ldrd	r2, [sp, #56]	; 0x38
   19304:	movt	r1, #3
   19308:	mov	r0, #1
   1930c:	bl	13204 <__printf_chk@plt>
   19310:	b	19288 <__assert_fail@plt+0x5d84>
   19314:	ldr	r3, [sp, #44]	; 0x2c
   19318:	adds	r4, r4, r3
   1931c:	adc	r5, r5, #0
   19320:	b	191e0 <__assert_fail@plt+0x5cdc>
   19324:	blt	193b0 <__assert_fail@plt+0x5eac>
   19328:	adds	r4, r4, #1
   1932c:	ldrd	r8, [sp, #24]
   19330:	adc	r5, r5, #0
   19334:	cmp	r5, r9
   19338:	cmpeq	r4, r8
   1933c:	bcc	191b8 <__assert_fail@plt+0x5cb4>
   19340:	ldr	r8, [sp, #36]	; 0x24
   19344:	ldr	r2, [sp, #92]	; 0x5c
   19348:	ldr	r3, [r8]
   1934c:	cmp	r2, r3
   19350:	bne	193ac <__assert_fail@plt+0x5ea8>
   19354:	add	sp, sp, #100	; 0x64
   19358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1935c:	mov	r0, ip
   19360:	mov	r2, #5
   19364:	movw	r1, #61456	; 0xf010
   19368:	movt	r1, #3
   1936c:	bl	12d84 <dcgettext@plt>
   19370:	mov	r7, r0
   19374:	mov	r0, r6
   19378:	bl	133d8 <elf_ndxscn@plt>
   1937c:	mov	r1, r4
   19380:	mov	r6, r0
   19384:	add	r0, r5, #16
   19388:	bl	1870c <__assert_fail@plt+0x5208>
   1938c:	ldrd	r4, [r4, #24]
   19390:	mov	r1, r7
   19394:	mov	r2, r6
   19398:	strd	r4, [sp]
   1939c:	mov	r3, r0
   193a0:	mov	r0, #1
   193a4:	bl	13204 <__printf_chk@plt>
   193a8:	b	19340 <__assert_fail@plt+0x5e3c>
   193ac:	bl	12dc0 <__stack_chk_fail@plt>
   193b0:	mov	r2, #5
   193b4:	movw	r1, #61552	; 0xf070
   193b8:	mov	r0, #0
   193bc:	movt	r1, #3
   193c0:	bl	12d84 <dcgettext@plt>
   193c4:	mov	r4, r0
   193c8:	mvn	r0, #0
   193cc:	bl	13078 <dwarf_errmsg@plt>
   193d0:	mov	r1, r4
   193d4:	mov	r2, r0
   193d8:	mov	r0, #1
   193dc:	bl	13204 <__printf_chk@plt>
   193e0:	b	19340 <__assert_fail@plt+0x5e3c>
   193e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193e8:	movw	r6, #37712	; 0x9350
   193ec:	movt	r6, #5
   193f0:	movw	r4, #37688	; 0x9338
   193f4:	movt	r4, #5
   193f8:	sub	sp, sp, #476	; 0x1dc
   193fc:	ldr	r3, [r6, #124]	; 0x7c
   19400:	mov	r9, r0
   19404:	ldr	r2, [r4]
   19408:	cmp	r3, #0
   1940c:	str	r4, [sp, #148]	; 0x94
   19410:	str	r1, [sp, #108]	; 0x6c
   19414:	str	r2, [sp, #468]	; 0x1d4
   19418:	bne	19438 <__assert_fail@plt+0x5f34>
   1941c:	ldr	r5, [sp, #148]	; 0x94
   19420:	ldr	r2, [sp, #468]	; 0x1d4
   19424:	ldr	r3, [r5]
   19428:	cmp	r2, r3
   1942c:	bne	19cd0 <__assert_fail@plt+0x67cc>
   19430:	add	sp, sp, #476	; 0x1dc
   19434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19438:	mov	r2, #5
   1943c:	movw	r1, #61700	; 0xf104
   19440:	mov	r0, #0
   19444:	movt	r1, #3
   19448:	bl	12d84 <dcgettext@plt>
   1944c:	bl	12fdc <puts@plt>
   19450:	ldr	r5, [sp, #108]	; 0x6c
   19454:	ldrb	r3, [r5]
   19458:	cmp	r3, #1
   1945c:	beq	19bbc <__assert_fail@plt+0x66b8>
   19460:	movw	r1, #61796	; 0xf164
   19464:	mov	r2, #5
   19468:	movt	r1, #3
   1946c:	mov	r0, #0
   19470:	bl	12d84 <dcgettext@plt>
   19474:	bl	12fdc <puts@plt>
   19478:	ldr	r3, [r6, #124]	; 0x7c
   1947c:	mov	r4, #0
   19480:	mov	r5, #0
   19484:	strd	r4, [sp, #120]	; 0x78
   19488:	cmp	r3, #0
   1948c:	strdeq	r4, [sp, #128]	; 0x80
   19490:	streq	r3, [sp, #112]	; 0x70
   19494:	beq	19614 <__assert_fail@plt+0x6110>
   19498:	mov	r5, #0
   1949c:	mov	r4, #0
   194a0:	str	r5, [sp, #112]	; 0x70
   194a4:	add	ip, sp, #216	; 0xd8
   194a8:	mov	r5, #0
   194ac:	str	ip, [sp, #116]	; 0x74
   194b0:	strd	r4, [sp, #128]	; 0x80
   194b4:	mov	r7, #0
   194b8:	movw	r5, #58706	; 0xe552
   194bc:	mov	fp, r9
   194c0:	movt	r5, #25716	; 0x6474
   194c4:	str	r5, [sp, #136]	; 0x88
   194c8:	b	19584 <__assert_fail@plt+0x6080>
   194cc:	ldrd	r4, [sl, #16]
   194d0:	mov	ip, #16
   194d4:	strd	r4, [sp, #96]	; 0x60
   194d8:	ldrd	r4, [sl, #32]
   194dc:	movw	r1, #61888	; 0xf1c0
   194e0:	ldr	r3, [sl, #4]
   194e4:	movt	r1, #3
   194e8:	ldrd	r8, [sl, #24]
   194ec:	strd	r4, [sp, #80]	; 0x50
   194f0:	tst	r3, #4
   194f4:	ldrd	r4, [sl, #40]	; 0x28
   194f8:	moveq	r0, #32
   194fc:	movne	r0, #82	; 0x52
   19500:	tst	r3, #2
   19504:	str	r0, [sp, #56]	; 0x38
   19508:	mov	r0, #1
   1950c:	strd	r4, [sp, #48]	; 0x30
   19510:	moveq	lr, #32
   19514:	movne	lr, #87	; 0x57
   19518:	ldrd	r4, [sp, #80]	; 0x50
   1951c:	tst	r3, #1
   19520:	strd	r8, [sp, #32]
   19524:	moveq	r3, #32
   19528:	movne	r3, #69	; 0x45
   1952c:	str	ip, [sp, #8]
   19530:	strd	r4, [sp, #40]	; 0x28
   19534:	ldrd	r4, [sp, #88]	; 0x58
   19538:	str	r3, [sp, #64]	; 0x40
   1953c:	str	ip, [sp, #24]
   19540:	strd	r4, [sp]
   19544:	ldrd	r4, [sp, #96]	; 0x60
   19548:	str	lr, [sp, #60]	; 0x3c
   1954c:	strd	r4, [sp, #16]
   19550:	ldrd	r4, [sl, #48]	; 0x30
   19554:	strd	r4, [sp, #72]	; 0x48
   19558:	bl	13204 <__printf_chk@plt>
   1955c:	ldr	r3, [sl]
   19560:	cmp	r3, #3
   19564:	beq	19954 <__assert_fail@plt+0x6450>
   19568:	ldr	r5, [sp, #136]	; 0x88
   1956c:	cmp	r3, r5
   19570:	beq	195dc <__assert_fail@plt+0x60d8>
   19574:	ldr	r3, [r6, #124]	; 0x7c
   19578:	add	r7, r7, #1
   1957c:	cmp	r7, r3
   19580:	bcs	19610 <__assert_fail@plt+0x610c>
   19584:	ldr	r0, [fp, #16]
   19588:	mov	r1, r7
   1958c:	ldr	r2, [sp, #116]	; 0x74
   19590:	bl	12dd8 <gelf_getphdr@plt>
   19594:	subs	sl, r0, #0
   19598:	beq	19cc0 <__assert_fail@plt+0x67bc>
   1959c:	add	r2, sp, #340	; 0x154
   195a0:	mov	r3, #128	; 0x80
   195a4:	mov	r0, fp
   195a8:	ldr	r1, [sl]
   195ac:	bl	38d9c <__assert_fail@plt+0x25898>
   195b0:	ldr	r4, [sp, #108]	; 0x6c
   195b4:	ldrb	r3, [r4]
   195b8:	ldrd	r4, [sl, #8]
   195bc:	cmp	r3, #1
   195c0:	strd	r4, [sp, #88]	; 0x58
   195c4:	mov	r2, r0
   195c8:	bne	194cc <__assert_fail@plt+0x5fc8>
   195cc:	ldrd	r4, [sl, #16]
   195d0:	mov	ip, #8
   195d4:	strd	r4, [sp, #96]	; 0x60
   195d8:	b	194d8 <__assert_fail@plt+0x5fd4>
   195dc:	ldrd	r4, [sl, #16]
   195e0:	add	r7, r7, #1
   195e4:	ldrd	r2, [sl, #40]	; 0x28
   195e8:	strd	r4, [sp, #128]	; 0x80
   195ec:	mov	r5, #1
   195f0:	str	r5, [sp, #112]	; 0x70
   195f4:	ldrd	r4, [sp, #128]	; 0x80
   195f8:	adds	r4, r4, r2
   195fc:	adc	r5, r5, r3
   19600:	ldr	r3, [r6, #124]	; 0x7c
   19604:	strd	r4, [sp, #120]	; 0x78
   19608:	cmp	r7, r3
   1960c:	bcc	19584 <__assert_fail@plt+0x6080>
   19610:	mov	r9, fp
   19614:	ldr	r0, [r9, #16]
   19618:	add	r1, sp, #152	; 0x98
   1961c:	bl	133f0 <elf_getshdrnum@plt>
   19620:	cmp	r0, #0
   19624:	blt	19c8c <__assert_fail@plt+0x6788>
   19628:	ldr	r3, [sp, #152]	; 0x98
   1962c:	cmp	r3, #0
   19630:	beq	1941c <__assert_fail@plt+0x5f18>
   19634:	ldr	r0, [r9, #16]
   19638:	add	r1, sp, #156	; 0x9c
   1963c:	bl	13498 <elf_getshdrstrndx@plt>
   19640:	cmp	r0, #0
   19644:	blt	19c68 <__assert_fail@plt+0x6764>
   19648:	mov	r2, #5
   1964c:	movw	r1, #62032	; 0xf250
   19650:	mov	r0, #0
   19654:	movt	r1, #3
   19658:	bl	12d84 <dcgettext@plt>
   1965c:	bl	12fdc <puts@plt>
   19660:	ldr	r3, [r6, #124]	; 0x7c
   19664:	cmp	r3, #0
   19668:	beq	1941c <__assert_fail@plt+0x5f18>
   1966c:	mov	r8, r9
   19670:	mov	r9, r6
   19674:	movw	r5, #37704	; 0x9348
   19678:	mov	ip, #0
   1967c:	movt	r5, #5
   19680:	str	ip, [sp, #144]	; 0x90
   19684:	str	r5, [sp, #140]	; 0x8c
   19688:	ldr	r2, [sp, #144]	; 0x90
   1968c:	movw	r1, #62084	; 0xf284
   19690:	mov	r0, #1
   19694:	movt	r1, #3
   19698:	bl	13204 <__printf_chk@plt>
   1969c:	ldr	r0, [r8, #16]
   196a0:	ldr	r1, [sp, #144]	; 0x90
   196a4:	add	r2, sp, #160	; 0xa0
   196a8:	bl	12dd8 <gelf_getphdr@plt>
   196ac:	subs	r4, r0, #0
   196b0:	str	r4, [sp, #88]	; 0x58
   196b4:	beq	19c38 <__assert_fail@plt+0x6734>
   196b8:	ldr	r3, [r9, #44]	; 0x2c
   196bc:	cmp	r3, #1
   196c0:	bls	1990c <__assert_fail@plt+0x6408>
   196c4:	mov	r7, #1
   196c8:	mov	r6, r9
   196cc:	mov	r9, r7
   196d0:	mov	r5, #0
   196d4:	str	r5, [sp, #136]	; 0x88
   196d8:	str	r5, [sp, #104]	; 0x68
   196dc:	ldr	r0, [r8, #16]
   196e0:	mov	r1, r9
   196e4:	bl	133e4 <elf_getscn@plt>
   196e8:	subs	r4, r0, #0
   196ec:	beq	19c08 <__assert_fail@plt+0x6704>
   196f0:	add	r1, sp, #272	; 0x110
   196f4:	bl	12cc4 <gelf_getshdr@plt>
   196f8:	subs	r7, r0, #0
   196fc:	beq	19bd8 <__assert_fail@plt+0x66d4>
   19700:	ldrd	r4, [r7, #32]
   19704:	orrs	ip, r4, r5
   19708:	beq	198e4 <__assert_fail@plt+0x63e0>
   1970c:	ldrd	r2, [r7, #8]
   19710:	mov	r0, #2
   19714:	mov	r1, #0
   19718:	and	r2, r2, r0
   1971c:	and	r3, r3, r1
   19720:	orrs	r0, r2, r3
   19724:	beq	19a14 <__assert_fail@plt+0x6510>
   19728:	ldr	ip, [sp, #88]	; 0x58
   1972c:	ldrd	r0, [r7, #16]
   19730:	ldrd	r2, [ip, #16]
   19734:	cmp	r1, r3
   19738:	cmpeq	r0, r2
   1973c:	bcc	19a0c <__assert_fail@plt+0x6508>
   19740:	ldrd	sl, [ip, #40]	; 0x28
   19744:	adds	r0, r0, r4
   19748:	adc	r1, r1, r5
   1974c:	adds	r2, r2, sl
   19750:	adc	r3, r3, fp
   19754:	cmp	r1, r3
   19758:	cmpeq	r0, r2
   1975c:	movhi	r3, #0
   19760:	movls	r3, #1
   19764:	cmp	r3, #0
   19768:	beq	198e4 <__assert_fail@plt+0x63e0>
   1976c:	ldr	ip, [sp, #104]	; 0x68
   19770:	eor	r3, ip, #1
   19774:	ldr	ip, [sp, #112]	; 0x70
   19778:	tst	ip, r3
   1977c:	beq	197ac <__assert_fail@plt+0x62a8>
   19780:	ldrd	r2, [r7, #16]
   19784:	ldrd	r0, [sp, #128]	; 0x80
   19788:	cmp	r1, r3
   1978c:	cmpeq	r0, r2
   19790:	bhi	197ac <__assert_fail@plt+0x62a8>
   19794:	adds	r2, r2, r4
   19798:	ldrd	r0, [sp, #120]	; 0x78
   1979c:	adc	r3, r3, r5
   197a0:	cmp	r1, r3
   197a4:	cmpeq	r0, r2
   197a8:	bcs	19b64 <__assert_fail@plt+0x6660>
   197ac:	ldr	ip, [sp, #104]	; 0x68
   197b0:	ldr	lr, [sp, #112]	; 0x70
   197b4:	ands	ip, ip, lr
   197b8:	str	ip, [sp, #116]	; 0x74
   197bc:	beq	197ec <__assert_fail@plt+0x62e8>
   197c0:	ldrd	r2, [r7, #16]
   197c4:	ldrd	r0, [sp, #120]	; 0x78
   197c8:	cmp	r1, r3
   197cc:	cmpeq	r0, r2
   197d0:	bls	19b24 <__assert_fail@plt+0x6620>
   197d4:	adds	r2, r2, r4
   197d8:	adc	r3, r3, r5
   197dc:	ldrd	r4, [sp, #120]	; 0x78
   197e0:	cmp	r5, r3
   197e4:	cmpeq	r4, r2
   197e8:	bcc	19a34 <__assert_fail@plt+0x6530>
   197ec:	ldr	r4, [sp, #88]	; 0x58
   197f0:	ldr	ip, [r4]
   197f4:	cmp	ip, #1
   197f8:	beq	19ab8 <__assert_fail@plt+0x65b4>
   197fc:	ldr	r3, [r6, #124]	; 0x7c
   19800:	cmp	r3, #0
   19804:	addne	fp, sp, #216	; 0xd8
   19808:	movne	sl, #0
   1980c:	bne	19824 <__assert_fail@plt+0x6320>
   19810:	b	198b4 <__assert_fail@plt+0x63b0>
   19814:	ldr	r3, [r6, #124]	; 0x7c
   19818:	add	sl, sl, #1
   1981c:	cmp	sl, r3
   19820:	bcs	198b4 <__assert_fail@plt+0x63b0>
   19824:	ldr	r0, [r8, #16]
   19828:	mov	r1, sl
   1982c:	mov	r2, fp
   19830:	bl	12dd8 <gelf_getphdr@plt>
   19834:	cmp	r0, #0
   19838:	beq	19814 <__assert_fail@plt+0x6310>
   1983c:	ldr	ip, [r0]
   19840:	cmp	ip, #1
   19844:	bne	19814 <__assert_fail@plt+0x6310>
   19848:	ldrd	r2, [r0, #16]
   1984c:	ldrd	r4, [r7, #16]
   19850:	cmp	r5, r3
   19854:	cmpeq	r4, r2
   19858:	strd	r2, [sp, #96]	; 0x60
   1985c:	bcc	19814 <__assert_fail@plt+0x6310>
   19860:	ldrd	r2, [r7, #32]
   19864:	adds	r2, r2, r4
   19868:	adc	r3, r3, r5
   1986c:	ldrd	r4, [r0, #40]	; 0x28
   19870:	strd	r2, [sp, #80]	; 0x50
   19874:	ldrd	r2, [sp, #96]	; 0x60
   19878:	adds	r2, r2, r4
   1987c:	adc	r3, r3, r5
   19880:	ldrd	r4, [sp, #80]	; 0x50
   19884:	cmp	r5, r3
   19888:	cmpeq	r4, r2
   1988c:	bhi	19814 <__assert_fail@plt+0x6310>
   19890:	ldr	r3, [r6, #124]	; 0x7c
   19894:	cmp	sl, r3
   19898:	bcs	198b4 <__assert_fail@plt+0x63b0>
   1989c:	ldr	r3, [r0, #4]
   198a0:	ldr	r5, [sp, #136]	; 0x88
   198a4:	tst	r3, #2
   198a8:	beq	19af8 <__assert_fail@plt+0x65f4>
   198ac:	cmp	r5, #0
   198b0:	bne	19b84 <__assert_fail@plt+0x6680>
   198b4:	ldr	r1, [sp, #156]	; 0x9c
   198b8:	ldr	r2, [r7]
   198bc:	ldr	r0, [r8, #16]
   198c0:	bl	12e44 <elf_strptr@plt>
   198c4:	movw	r1, #55180	; 0xd78c
   198c8:	movt	r1, #3
   198cc:	mov	r2, r0
   198d0:	mov	r0, #1
   198d4:	bl	13204 <__printf_chk@plt>
   198d8:	ldr	r5, [sp, #116]	; 0x74
   198dc:	cmp	r5, #0
   198e0:	bne	19a74 <__assert_fail@plt+0x6570>
   198e4:	ldr	r3, [r6, #44]	; 0x2c
   198e8:	add	r9, r9, #1
   198ec:	cmp	r9, r3
   198f0:	bcc	196dc <__assert_fail@plt+0x61d8>
   198f4:	ldr	r5, [sp, #104]	; 0x68
   198f8:	mov	r9, r6
   198fc:	ldr	ip, [sp, #136]	; 0x88
   19900:	orr	r3, r5, ip
   19904:	tst	r3, #255	; 0xff
   19908:	bne	19ba0 <__assert_fail@plt+0x669c>
   1990c:	movw	r4, #37704	; 0x9348
   19910:	movt	r4, #5
   19914:	ldr	r0, [r4]
   19918:	ldr	r2, [r0, #24]
   1991c:	ldr	r3, [r0, #20]
   19920:	cmp	r3, r2
   19924:	addcc	r2, r3, #1
   19928:	strcc	r2, [r0, #20]
   1992c:	movcc	r2, #10
   19930:	strbcc	r2, [r3]
   19934:	bcs	19cd4 <__assert_fail@plt+0x67d0>
   19938:	ldr	r5, [sp, #144]	; 0x90
   1993c:	ldr	r3, [r9, #124]	; 0x7c
   19940:	add	r5, r5, #1
   19944:	str	r5, [sp, #144]	; 0x90
   19948:	cmp	r5, r3
   1994c:	bcc	19688 <__assert_fail@plt+0x6184>
   19950:	b	1941c <__assert_fail@plt+0x5f18>
   19954:	ldrd	r2, [sl, #8]
   19958:	ldr	r0, [fp, #16]
   1995c:	bl	12fa0 <gelf_offscn@plt>
   19960:	add	r1, sp, #272	; 0x110
   19964:	bl	12cc4 <gelf_getshdr@plt>
   19968:	add	r1, sp, #160	; 0xa0
   1996c:	mov	r5, r0
   19970:	ldr	r0, [fp, #16]
   19974:	bl	13240 <elf_rawfile@plt>
   19978:	cmp	r5, #0
   1997c:	mov	r4, r0
   19980:	beq	19574 <__assert_fail@plt+0x6070>
   19984:	ldr	r5, [r5, #4]
   19988:	cmp	r5, #1
   1998c:	bne	19574 <__assert_fail@plt+0x6070>
   19990:	cmp	r0, #0
   19994:	beq	19574 <__assert_fail@plt+0x6070>
   19998:	ldr	r2, [sp, #160]	; 0xa0
   1999c:	mov	r3, #0
   199a0:	ldrd	r0, [sl, #8]
   199a4:	cmp	r1, r3
   199a8:	cmpeq	r0, r2
   199ac:	bcs	19574 <__assert_fail@plt+0x6070>
   199b0:	ldrd	r8, [sl, #32]
   199b4:	subs	r2, r2, r0
   199b8:	sbc	r3, r3, r1
   199bc:	cmp	r9, r3
   199c0:	cmpeq	r8, r2
   199c4:	bhi	19574 <__assert_fail@plt+0x6070>
   199c8:	add	r0, r4, r0
   199cc:	mov	r2, r8
   199d0:	mov	r1, #0
   199d4:	bl	13270 <memchr@plt>
   199d8:	cmp	r0, #0
   199dc:	beq	19574 <__assert_fail@plt+0x6070>
   199e0:	mov	r2, #5
   199e4:	movw	r1, #61956	; 0xf204
   199e8:	mov	r0, #0
   199ec:	movt	r1, #3
   199f0:	bl	12d84 <dcgettext@plt>
   199f4:	ldr	r2, [sl, #8]
   199f8:	add	r2, r4, r2
   199fc:	mov	r1, r0
   19a00:	mov	r0, r5
   19a04:	bl	13204 <__printf_chk@plt>
   19a08:	b	19574 <__assert_fail@plt+0x6070>
   19a0c:	mov	r3, #0
   19a10:	b	19764 <__assert_fail@plt+0x6260>
   19a14:	ldr	ip, [sp, #88]	; 0x58
   19a18:	ldrd	r0, [r7, #24]
   19a1c:	ldrd	r2, [ip, #8]
   19a20:	cmp	r1, r3
   19a24:	cmpeq	r0, r2
   19a28:	bcc	19a0c <__assert_fail@plt+0x6508>
   19a2c:	ldrd	sl, [ip, #32]
   19a30:	b	19744 <__assert_fail@plt+0x6240>
   19a34:	ldr	r5, [sp, #140]	; 0x8c
   19a38:	movw	r0, #62144	; 0xf2c0
   19a3c:	mov	r1, #1
   19a40:	movt	r0, #3
   19a44:	mov	r2, #9
   19a48:	ldr	r3, [r5]
   19a4c:	bl	12d24 <fwrite_unlocked@plt>
   19a50:	ldr	r1, [sp, #156]	; 0x9c
   19a54:	ldr	r2, [r7]
   19a58:	ldr	r0, [r8, #16]
   19a5c:	bl	12e44 <elf_strptr@plt>
   19a60:	movw	r1, #55180	; 0xd78c
   19a64:	movt	r1, #3
   19a68:	mov	r2, r0
   19a6c:	mov	r0, #1
   19a70:	bl	13204 <__printf_chk@plt>
   19a74:	ldrd	r0, [r7, #32]
   19a78:	ldrd	r2, [r7, #16]
   19a7c:	ldrd	r4, [sp, #120]	; 0x78
   19a80:	adds	r2, r2, r0
   19a84:	adc	r3, r3, r1
   19a88:	cmp	r5, r3
   19a8c:	cmpeq	r4, r2
   19a90:	movcs	r4, #1
   19a94:	strcs	r4, [sp, #104]	; 0x68
   19a98:	bcs	198e4 <__assert_fail@plt+0x63e0>
   19a9c:	ldr	r5, [sp, #140]	; 0x8c
   19aa0:	mov	r0, #62	; 0x3e
   19aa4:	ldr	r1, [r5]
   19aa8:	bl	12d54 <fputc_unlocked@plt>
   19aac:	mov	ip, #0
   19ab0:	str	ip, [sp, #104]	; 0x68
   19ab4:	b	198e4 <__assert_fail@plt+0x63e0>
   19ab8:	ldr	r5, [sp, #88]	; 0x58
   19abc:	ldr	r3, [r5, #4]
   19ac0:	tst	r3, #2
   19ac4:	bne	197fc <__assert_fail@plt+0x62f8>
   19ac8:	ldr	r4, [sp, #136]	; 0x88
   19acc:	cmp	r4, #0
   19ad0:	bne	198b4 <__assert_fail@plt+0x63b0>
   19ad4:	ldr	r5, [sp, #140]	; 0x8c
   19ad8:	movw	r0, #62156	; 0xf2cc
   19adc:	mov	r1, ip
   19ae0:	mov	r2, #5
   19ae4:	movt	r0, #3
   19ae8:	str	ip, [sp, #136]	; 0x88
   19aec:	ldr	r3, [r5]
   19af0:	bl	12d24 <fwrite_unlocked@plt>
   19af4:	b	198b4 <__assert_fail@plt+0x63b0>
   19af8:	cmp	r5, #0
   19afc:	bne	198b4 <__assert_fail@plt+0x63b0>
   19b00:	ldr	r4, [sp, #140]	; 0x8c
   19b04:	movw	r0, #62156	; 0xf2cc
   19b08:	mov	r1, ip
   19b0c:	mov	r2, #5
   19b10:	movt	r0, #3
   19b14:	str	ip, [sp, #136]	; 0x88
   19b18:	ldr	r3, [r4]
   19b1c:	bl	12d24 <fwrite_unlocked@plt>
   19b20:	b	198b4 <__assert_fail@plt+0x63b0>
   19b24:	ldr	r4, [sp, #140]	; 0x8c
   19b28:	mov	r0, #93	; 0x5d
   19b2c:	mov	r5, #0
   19b30:	ldr	r1, [r4]
   19b34:	bl	12d54 <fputc_unlocked@plt>
   19b38:	ldr	r2, [r7]
   19b3c:	ldr	r1, [sp, #156]	; 0x9c
   19b40:	ldr	r0, [r8, #16]
   19b44:	str	r5, [sp, #104]	; 0x68
   19b48:	bl	12e44 <elf_strptr@plt>
   19b4c:	movw	r1, #55180	; 0xd78c
   19b50:	movt	r1, #3
   19b54:	mov	r2, r0
   19b58:	mov	r0, #1
   19b5c:	bl	13204 <__printf_chk@plt>
   19b60:	b	198e4 <__assert_fail@plt+0x63e0>
   19b64:	ldr	r4, [sp, #140]	; 0x8c
   19b68:	movw	r0, #62132	; 0xf2b4
   19b6c:	mov	r1, #1
   19b70:	mov	r2, #8
   19b74:	movt	r0, #3
   19b78:	ldr	r3, [r4]
   19b7c:	bl	12d24 <fwrite_unlocked@plt>
   19b80:	b	19a50 <__assert_fail@plt+0x654c>
   19b84:	ldr	ip, [sp, #140]	; 0x8c
   19b88:	mov	r0, #93	; 0x5d
   19b8c:	mov	r4, #0
   19b90:	ldr	r1, [ip]
   19b94:	bl	12d54 <fputc_unlocked@plt>
   19b98:	str	r4, [sp, #136]	; 0x88
   19b9c:	b	198b4 <__assert_fail@plt+0x63b0>
   19ba0:	ldr	r4, [sp, #140]	; 0x8c
   19ba4:	mov	r0, #93	; 0x5d
   19ba8:	ldr	r1, [r4]
   19bac:	movw	r4, #37704	; 0x9348
   19bb0:	movt	r4, #5
   19bb4:	bl	12d54 <fputc_unlocked@plt>
   19bb8:	b	19914 <__assert_fail@plt+0x6410>
   19bbc:	mov	r2, #5
   19bc0:	movw	r1, #61720	; 0xf118
   19bc4:	mov	r0, #0
   19bc8:	movt	r1, #3
   19bcc:	bl	12d84 <dcgettext@plt>
   19bd0:	bl	12fdc <puts@plt>
   19bd4:	b	19478 <__assert_fail@plt+0x5f74>
   19bd8:	mov	r2, #5
   19bdc:	movw	r1, #54472	; 0xd4c8
   19be0:	movt	r1, #3
   19be4:	bl	12d84 <dcgettext@plt>
   19be8:	mov	r4, r0
   19bec:	mvn	r0, #0
   19bf0:	bl	130a8 <elf_errmsg@plt>
   19bf4:	mov	r2, r4
   19bf8:	mov	r1, r7
   19bfc:	mov	r3, r0
   19c00:	mov	r0, #1
   19c04:	bl	12f70 <error@plt>
   19c08:	mov	r2, #5
   19c0c:	movw	r1, #54828	; 0xd62c
   19c10:	movt	r1, #3
   19c14:	bl	12d84 <dcgettext@plt>
   19c18:	mov	r5, r0
   19c1c:	mvn	r0, #0
   19c20:	bl	130a8 <elf_errmsg@plt>
   19c24:	mov	r2, r5
   19c28:	mov	r1, r4
   19c2c:	mov	r3, r0
   19c30:	mov	r0, #1
   19c34:	bl	12f70 <error@plt>
   19c38:	mov	r2, #5
   19c3c:	movw	r1, #62100	; 0xf294
   19c40:	movt	r1, #3
   19c44:	bl	12d84 <dcgettext@plt>
   19c48:	mov	r4, r0
   19c4c:	mvn	r0, #0
   19c50:	bl	130a8 <elf_errmsg@plt>
   19c54:	mov	r2, r4
   19c58:	ldr	r1, [sp, #88]	; 0x58
   19c5c:	mov	r3, r0
   19c60:	mov	r0, #1
   19c64:	bl	12f70 <error@plt>
   19c68:	mov	r2, #5
   19c6c:	movw	r1, #53868	; 0xd26c
   19c70:	mov	r0, #0
   19c74:	movt	r1, #3
   19c78:	bl	12d84 <dcgettext@plt>
   19c7c:	mov	r1, #0
   19c80:	mov	r2, r0
   19c84:	mov	r0, #1
   19c88:	bl	12f70 <error@plt>
   19c8c:	mov	r2, #5
   19c90:	movw	r1, #61996	; 0xf22c
   19c94:	mov	r0, #0
   19c98:	movt	r1, #3
   19c9c:	bl	12d84 <dcgettext@plt>
   19ca0:	mov	r4, r0
   19ca4:	mvn	r0, #0
   19ca8:	bl	130a8 <elf_errmsg@plt>
   19cac:	mov	r2, r4
   19cb0:	mov	r1, #0
   19cb4:	mov	r3, r0
   19cb8:	mov	r0, #1
   19cbc:	bl	12f70 <error@plt>
   19cc0:	movw	r0, #11912	; 0x2e88
   19cc4:	movt	r0, #4
   19cc8:	bl	12fdc <puts@plt>
   19ccc:	b	19574 <__assert_fail@plt+0x6070>
   19cd0:	bl	12dc0 <__stack_chk_fail@plt>
   19cd4:	mov	r1, #10
   19cd8:	bl	132dc <__overflow@plt>
   19cdc:	b	19938 <__assert_fail@plt+0x6434>
   19ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ce4:	movw	r6, #37688	; 0x9338
   19ce8:	sub	sp, sp, #476	; 0x1dc
   19cec:	movt	r6, #5
   19cf0:	mov	sl, r0
   19cf4:	ldr	r0, [r0, #16]
   19cf8:	str	r1, [sp, #88]	; 0x58
   19cfc:	ldr	r1, [r6]
   19d00:	str	r6, [sp, #68]	; 0x44
   19d04:	mov	r6, r2
   19d08:	str	r3, [sp, #64]	; 0x40
   19d0c:	str	r1, [sp, #468]	; 0x1d4
   19d10:	bl	12e38 <gelf_getclass@plt>
   19d14:	mov	r2, #1
   19d18:	mov	r1, #8
   19d1c:	mov	r3, r2
   19d20:	mov	r9, r0
   19d24:	ldr	r0, [sl, #16]
   19d28:	bl	12f64 <gelf_fsize@plt>
   19d2c:	ldr	ip, [sp, #64]	; 0x40
   19d30:	mov	r1, #0
   19d34:	ldrd	r4, [ip, #32]
   19d38:	mov	r7, r0
   19d3c:	mov	r0, r6
   19d40:	bl	12f34 <elf_getdata@plt>
   19d44:	cmp	r0, #0
   19d48:	str	r0, [sp, #52]	; 0x34
   19d4c:	beq	1a098 <__assert_fail@plt+0x6b94>
   19d50:	ldr	ip, [sp, #64]	; 0x40
   19d54:	ldr	r0, [sl, #16]
   19d58:	ldr	r1, [ip, #40]	; 0x28
   19d5c:	bl	133e4 <elf_getscn@plt>
   19d60:	add	r1, sp, #144	; 0x90
   19d64:	mov	r8, r0
   19d68:	bl	12cc4 <gelf_getshdr@plt>
   19d6c:	mov	r1, #0
   19d70:	str	r0, [sp, #60]	; 0x3c
   19d74:	mov	r0, r8
   19d78:	bl	12f34 <elf_getdata@plt>
   19d7c:	ldr	ip, [sp, #64]	; 0x40
   19d80:	ldr	r1, [ip, #44]	; 0x2c
   19d84:	str	r0, [sp, #44]	; 0x2c
   19d88:	ldr	r0, [sl, #16]
   19d8c:	bl	133e4 <elf_getscn@plt>
   19d90:	add	r1, sp, #208	; 0xd0
   19d94:	bl	12cc4 <gelf_getshdr@plt>
   19d98:	ldr	ip, [sp, #60]	; 0x3c
   19d9c:	str	r0, [sp, #84]	; 0x54
   19da0:	ldr	r0, [sp, #44]	; 0x2c
   19da4:	cmp	r0, #0
   19da8:	cmpne	ip, #0
   19dac:	movne	r8, #0
   19db0:	moveq	r8, #1
   19db4:	beq	1a390 <__assert_fail@plt+0x6e8c>
   19db8:	ldr	ip, [sp, #84]	; 0x54
   19dbc:	cmp	ip, #0
   19dc0:	beq	1a390 <__assert_fail@plt+0x6e8c>
   19dc4:	mov	r0, r6
   19dc8:	bl	134c8 <elf_scnshndx@plt>
   19dcc:	cmp	r0, #0
   19dd0:	strle	r8, [sp, #56]	; 0x38
   19dd4:	bgt	1a43c <__assert_fail@plt+0x6f38>
   19dd8:	ldr	r0, [sl, #16]
   19ddc:	add	r1, sp, #96	; 0x60
   19de0:	bl	13498 <elf_getshdrstrndx@plt>
   19de4:	cmp	r0, #0
   19de8:	blt	1a418 <__assert_fail@plt+0x6f14>
   19dec:	mov	r0, r4
   19df0:	mov	r2, r7
   19df4:	mov	r3, #0
   19df8:	mov	r1, r5
   19dfc:	bl	3bba0 <__assert_fail@plt+0x2869c>
   19e00:	ldr	r7, [sp, #64]	; 0x40
   19e04:	mov	r3, #5
   19e08:	mov	r4, r0
   19e0c:	ldr	r0, [r7, #44]	; 0x2c
   19e10:	cmp	r0, #0
   19e14:	bne	1a0b4 <__assert_fail@plt+0x6bb0>
   19e18:	str	r3, [sp]
   19e1c:	movw	r1, #62392	; 0xf3b8
   19e20:	mov	r3, r4
   19e24:	movt	r1, #3
   19e28:	movw	r2, #62460	; 0xf3fc
   19e2c:	movt	r2, #3
   19e30:	bl	134a4 <dcngettext@plt>
   19e34:	mov	r7, r0
   19e38:	mov	r0, r6
   19e3c:	bl	133d8 <elf_ndxscn@plt>
   19e40:	ldr	r6, [sp, #64]	; 0x40
   19e44:	ldr	r1, [sp, #96]	; 0x60
   19e48:	ldr	r2, [r6]
   19e4c:	mov	r5, r0
   19e50:	ldr	r0, [sl, #16]
   19e54:	bl	12e44 <elf_strptr@plt>
   19e58:	ldr	r1, [sp, #64]	; 0x40
   19e5c:	mov	r2, r5
   19e60:	mov	r3, r0
   19e64:	ldrd	r0, [r1, #24]
   19e68:	str	r4, [sp, #8]
   19e6c:	strd	r0, [sp]
   19e70:	mov	r1, r7
   19e74:	mov	r0, #1
   19e78:	bl	13204 <__printf_chk@plt>
   19e7c:	cmp	r9, #1
   19e80:	mov	r2, #5
   19e84:	movweq	r1, #62532	; 0xf444
   19e88:	movwne	r1, #62588	; 0xf47c
   19e8c:	movteq	r1, #3
   19e90:	movtne	r1, #3
   19e94:	moveq	r0, #0
   19e98:	movne	r0, #0
   19e9c:	bl	12d84 <dcgettext@plt>
   19ea0:	movw	r3, #37704	; 0x9348
   19ea4:	movt	r3, #5
   19ea8:	ldr	r1, [r3]
   19eac:	bl	12c58 <fputs_unlocked@plt>
   19eb0:	cmp	r4, #0
   19eb4:	ble	1a098 <__assert_fail@plt+0x6b94>
   19eb8:	add	r4, r4, #1
   19ebc:	movw	r6, #15800	; 0x3db8
   19ec0:	mov	r7, #0
   19ec4:	movt	r6, #4
   19ec8:	str	r4, [sp, #48]	; 0x30
   19ecc:	mov	r8, #1
   19ed0:	str	r6, [sp, #80]	; 0x50
   19ed4:	mov	fp, r9
   19ed8:	str	r7, [sp, #92]	; 0x5c
   19edc:	b	19f88 <__assert_fail@plt+0x6a84>
   19ee0:	mov	r0, sl
   19ee4:	ldr	r1, [r5, #8]
   19ee8:	ldrd	r6, [r5]
   19eec:	bl	39a08 <__assert_fail@plt+0x26504>
   19ef0:	cmp	fp, #1
   19ef4:	movne	r9, #18
   19ef8:	moveq	r9, #10
   19efc:	cmp	r0, #0
   19f00:	beq	1a200 <__assert_fail@plt+0x6cfc>
   19f04:	mov	r3, #128	; 0x80
   19f08:	ldr	r1, [r5, #8]
   19f0c:	mov	r0, sl
   19f10:	add	r2, sp, #340	; 0x154
   19f14:	bl	38d60 <__assert_fail@plt+0x2585c>
   19f18:	add	r3, r0, #2
   19f1c:	ldr	r2, [sp, #60]	; 0x3c
   19f20:	cmp	fp, #1
   19f24:	ldr	r0, [sl, #16]
   19f28:	movne	ip, #18
   19f2c:	moveq	ip, #10
   19f30:	ldr	r1, [r2, #40]	; 0x28
   19f34:	ldr	r2, [r4]
   19f38:	ldrd	r4, [r4, #8]
   19f3c:	str	r3, [sp, #40]	; 0x28
   19f40:	str	ip, [sp, #36]	; 0x24
   19f44:	bl	12e44 <elf_strptr@plt>
   19f48:	ldr	r3, [sp, #40]	; 0x28
   19f4c:	movw	r1, #62748	; 0xf51c
   19f50:	ldr	ip, [sp, #36]	; 0x24
   19f54:	mov	r2, r9
   19f58:	strd	r6, [sp]
   19f5c:	movt	r1, #3
   19f60:	str	r3, [sp, #8]
   19f64:	strd	r4, [sp, #16]
   19f68:	str	ip, [sp, #12]
   19f6c:	str	r0, [sp, #24]
   19f70:	mov	r0, #1
   19f74:	bl	13204 <__printf_chk@plt>
   19f78:	ldr	r6, [sp, #48]	; 0x30
   19f7c:	add	r8, r8, #1
   19f80:	cmp	r8, r6
   19f84:	beq	1a098 <__assert_fail@plt+0x6b94>
   19f88:	ldr	r0, [sp, #52]	; 0x34
   19f8c:	sub	r1, r8, #1
   19f90:	add	r2, sp, #104	; 0x68
   19f94:	bl	13324 <gelf_getrel@plt>
   19f98:	subs	r5, r0, #0
   19f9c:	beq	19f78 <__assert_fail@plt+0x6a74>
   19fa0:	ldr	r2, [r5, #12]
   19fa4:	add	r3, sp, #100	; 0x64
   19fa8:	ldr	r0, [sp, #44]	; 0x2c
   19fac:	str	r3, [sp]
   19fb0:	add	r3, sp, #120	; 0x78
   19fb4:	ldr	r1, [sp, #56]	; 0x38
   19fb8:	bl	1342c <gelf_getsymshndx@plt>
   19fbc:	subs	r4, r0, #0
   19fc0:	beq	1a160 <__assert_fail@plt+0x6c5c>
   19fc4:	ldrb	r3, [r4, #4]
   19fc8:	and	r3, r3, #15
   19fcc:	cmp	r3, #3
   19fd0:	bne	19ee0 <__assert_fail@plt+0x69dc>
   19fd4:	ldrh	r1, [r4, #6]
   19fd8:	movw	r3, #65535	; 0xffff
   19fdc:	ldr	r0, [sl, #16]
   19fe0:	cmp	r1, r3
   19fe4:	ldreq	r1, [sp, #100]	; 0x64
   19fe8:	bl	133e4 <elf_getscn@plt>
   19fec:	add	r1, sp, #272	; 0x110
   19ff0:	bl	12cc4 <gelf_getshdr@plt>
   19ff4:	ldr	r1, [r5, #8]
   19ff8:	subs	r7, r0, #0
   19ffc:	mov	r0, sl
   1a000:	beq	1a2c0 <__assert_fail@plt+0x6dbc>
   1a004:	ldrd	r2, [r5]
   1a008:	strd	r2, [sp, #72]	; 0x48
   1a00c:	bl	39a08 <__assert_fail@plt+0x26504>
   1a010:	cmp	fp, #1
   1a014:	movne	r6, #18
   1a018:	moveq	r6, #10
   1a01c:	cmp	r0, #0
   1a020:	beq	1a148 <__assert_fail@plt+0x6c44>
   1a024:	ldr	r1, [r5, #8]
   1a028:	mov	r0, sl
   1a02c:	add	r2, sp, #340	; 0x154
   1a030:	mov	r3, #128	; 0x80
   1a034:	bl	38d60 <__assert_fail@plt+0x2585c>
   1a038:	add	r9, r0, #2
   1a03c:	cmp	fp, #1
   1a040:	ldr	r2, [r7]
   1a044:	ldr	r1, [sp, #96]	; 0x60
   1a048:	add	r8, r8, #1
   1a04c:	ldr	r0, [sl, #16]
   1a050:	movne	r7, #18
   1a054:	moveq	r7, #10
   1a058:	ldrd	r4, [r4, #8]
   1a05c:	bl	12e44 <elf_strptr@plt>
   1a060:	ldrd	r2, [sp, #72]	; 0x48
   1a064:	str	r9, [sp, #8]
   1a068:	movw	r1, #62748	; 0xf51c
   1a06c:	strd	r4, [sp, #16]
   1a070:	movt	r1, #3
   1a074:	strd	r2, [sp]
   1a078:	mov	r2, r6
   1a07c:	str	r7, [sp, #12]
   1a080:	str	r0, [sp, #24]
   1a084:	mov	r0, #1
   1a088:	bl	13204 <__printf_chk@plt>
   1a08c:	ldr	r6, [sp, #48]	; 0x30
   1a090:	cmp	r8, r6
   1a094:	bne	19f88 <__assert_fail@plt+0x6a84>
   1a098:	ldr	r6, [sp, #68]	; 0x44
   1a09c:	ldr	r2, [sp, #468]	; 0x1d4
   1a0a0:	ldr	r3, [r6]
   1a0a4:	cmp	r2, r3
   1a0a8:	bne	1a3bc <__assert_fail@plt+0x6eb8>
   1a0ac:	add	sp, sp, #476	; 0x1dc
   1a0b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0b4:	str	r3, [sp]
   1a0b8:	movw	r1, #62204	; 0xf2fc
   1a0bc:	mov	r3, r4
   1a0c0:	movt	r1, #3
   1a0c4:	movw	r2, #62296	; 0xf358
   1a0c8:	mov	r0, #0
   1a0cc:	movt	r2, #3
   1a0d0:	bl	134a4 <dcngettext@plt>
   1a0d4:	mov	r7, r0
   1a0d8:	mov	r0, r6
   1a0dc:	bl	133d8 <elf_ndxscn@plt>
   1a0e0:	ldr	ip, [sp, #64]	; 0x40
   1a0e4:	ldr	r1, [sp, #96]	; 0x60
   1a0e8:	ldr	r2, [ip]
   1a0ec:	mov	r8, r0
   1a0f0:	ldr	r0, [sl, #16]
   1a0f4:	bl	12e44 <elf_strptr@plt>
   1a0f8:	ldr	ip, [sp, #84]	; 0x54
   1a0fc:	ldr	r1, [sp, #96]	; 0x60
   1a100:	ldr	r2, [ip]
   1a104:	ldr	ip, [sp, #64]	; 0x40
   1a108:	ldr	r5, [ip, #44]	; 0x2c
   1a10c:	mov	r6, r0
   1a110:	ldr	r0, [sl, #16]
   1a114:	bl	12e44 <elf_strptr@plt>
   1a118:	ldr	ip, [sp, #64]	; 0x40
   1a11c:	mov	r1, r7
   1a120:	mov	r3, r6
   1a124:	str	r5, [sp]
   1a128:	mov	r2, r8
   1a12c:	str	r0, [sp, #4]
   1a130:	mov	r0, #1
   1a134:	ldrd	r6, [ip, #24]
   1a138:	str	r4, [sp, #16]
   1a13c:	strd	r6, [sp, #8]
   1a140:	bl	13204 <__printf_chk@plt>
   1a144:	b	19e7c <__assert_fail@plt+0x6978>
   1a148:	movw	r1, #62660	; 0xf4c4
   1a14c:	mov	r2, #5
   1a150:	movt	r1, #3
   1a154:	bl	12d84 <dcgettext@plt>
   1a158:	mov	r9, r0
   1a15c:	b	1a03c <__assert_fail@plt+0x6b38>
   1a160:	ldr	ip, [sp, #92]	; 0x5c
   1a164:	cmp	ip, #0
   1a168:	bne	1a218 <__assert_fail@plt+0x6d14>
   1a16c:	ldr	r6, [sp, #88]	; 0x58
   1a170:	ldrh	r3, [r6]
   1a174:	cmp	r3, #2
   1a178:	beq	1a3c0 <__assert_fail@plt+0x6ebc>
   1a17c:	mvn	r7, #0
   1a180:	str	r7, [sp, #92]	; 0x5c
   1a184:	mov	r0, sl
   1a188:	ldr	r1, [r5, #8]
   1a18c:	ldrd	r6, [r5]
   1a190:	bl	39a08 <__assert_fail@plt+0x26504>
   1a194:	cmp	fp, #1
   1a198:	movne	r4, #18
   1a19c:	moveq	r4, #10
   1a1a0:	cmp	r0, #0
   1a1a4:	beq	1a348 <__assert_fail@plt+0x6e44>
   1a1a8:	mov	r0, sl
   1a1ac:	ldr	r1, [r5, #8]
   1a1b0:	add	r2, sp, #340	; 0x154
   1a1b4:	mov	r3, #128	; 0x80
   1a1b8:	bl	38d60 <__assert_fail@plt+0x2585c>
   1a1bc:	add	r9, r0, #2
   1a1c0:	mov	r2, #5
   1a1c4:	movw	r1, #62704	; 0xf4f0
   1a1c8:	mov	r0, #0
   1a1cc:	movt	r1, #3
   1a1d0:	bl	12d84 <dcgettext@plt>
   1a1d4:	strd	r6, [sp]
   1a1d8:	str	r9, [sp, #8]
   1a1dc:	mov	r2, r4
   1a1e0:	movw	r1, #62720	; 0xf500
   1a1e4:	movt	r1, #3
   1a1e8:	str	r0, [sp, #12]
   1a1ec:	mov	r0, #1
   1a1f0:	ldr	r3, [r5, #12]
   1a1f4:	str	r3, [sp, #16]
   1a1f8:	bl	13204 <__printf_chk@plt>
   1a1fc:	b	19f78 <__assert_fail@plt+0x6a74>
   1a200:	movw	r1, #62660	; 0xf4c4
   1a204:	mov	r2, #5
   1a208:	movt	r1, #3
   1a20c:	bl	12d84 <dcgettext@plt>
   1a210:	mov	r3, r0
   1a214:	b	19f1c <__assert_fail@plt+0x6a18>
   1a218:	ble	1a184 <__assert_fail@plt+0x6c80>
   1a21c:	ldr	r7, [sp, #64]	; 0x40
   1a220:	ldr	r3, [r7, #40]	; 0x28
   1a224:	cmp	r3, #0
   1a228:	bne	1a184 <__assert_fail@plt+0x6c80>
   1a22c:	ldrd	r6, [r5]
   1a230:	mov	r0, sl
   1a234:	ldr	r1, [r5, #8]
   1a238:	strd	r6, [sp, #72]	; 0x48
   1a23c:	bl	39a08 <__assert_fail@plt+0x26504>
   1a240:	cmp	fp, #1
   1a244:	movne	r4, #18
   1a248:	moveq	r4, #10
   1a24c:	cmp	r0, #0
   1a250:	beq	1a360 <__assert_fail@plt+0x6e5c>
   1a254:	ldr	r1, [r5, #8]
   1a258:	mov	r0, sl
   1a25c:	add	r2, sp, #340	; 0x154
   1a260:	mov	r3, #128	; 0x80
   1a264:	bl	38d60 <__assert_fail@plt+0x2585c>
   1a268:	add	r5, r0, #2
   1a26c:	ldr	r7, [sp, #84]	; 0x54
   1a270:	cmp	fp, #1
   1a274:	ldr	r1, [sp, #96]	; 0x60
   1a278:	ldr	r0, [sl, #16]
   1a27c:	movne	r6, #18
   1a280:	ldr	r2, [r7]
   1a284:	moveq	r6, #10
   1a288:	bl	12e44 <elf_strptr@plt>
   1a28c:	ldrd	r2, [sp, #72]	; 0x48
   1a290:	ldr	r7, [sp, #80]	; 0x50
   1a294:	movw	r1, #62676	; 0xf4d4
   1a298:	str	r5, [sp, #8]
   1a29c:	movt	r1, #3
   1a2a0:	strd	r2, [sp]
   1a2a4:	mov	r2, r4
   1a2a8:	str	r7, [sp, #16]
   1a2ac:	str	r6, [sp, #12]
   1a2b0:	str	r0, [sp, #20]
   1a2b4:	mov	r0, #1
   1a2b8:	bl	13204 <__printf_chk@plt>
   1a2bc:	b	19f78 <__assert_fail@plt+0x6a74>
   1a2c0:	ldrd	r6, [r5]
   1a2c4:	strd	r6, [sp, #72]	; 0x48
   1a2c8:	bl	39a08 <__assert_fail@plt+0x26504>
   1a2cc:	cmp	fp, #1
   1a2d0:	movne	r9, #18
   1a2d4:	moveq	r9, #10
   1a2d8:	cmp	r0, #0
   1a2dc:	beq	1a378 <__assert_fail@plt+0x6e74>
   1a2e0:	ldr	r1, [r5, #8]
   1a2e4:	mov	r0, sl
   1a2e8:	add	r2, sp, #340	; 0x154
   1a2ec:	mov	r3, #128	; 0x80
   1a2f0:	bl	38d60 <__assert_fail@plt+0x2585c>
   1a2f4:	add	r5, r0, #2
   1a2f8:	mov	r2, #5
   1a2fc:	movw	r1, #62780	; 0xf53c
   1a300:	mov	r0, #0
   1a304:	movt	r1, #3
   1a308:	bl	12d84 <dcgettext@plt>
   1a30c:	ldrh	r3, [r4, #6]
   1a310:	movw	r2, #65535	; 0xffff
   1a314:	ldrd	r6, [sp, #72]	; 0x48
   1a318:	cmp	r3, r2
   1a31c:	str	r5, [sp, #8]
   1a320:	mov	r2, r9
   1a324:	movw	r1, #62720	; 0xf500
   1a328:	ldreq	r3, [sp, #100]	; 0x64
   1a32c:	movt	r1, #3
   1a330:	strd	r6, [sp]
   1a334:	str	r3, [sp, #16]
   1a338:	str	r0, [sp, #12]
   1a33c:	mov	r0, #1
   1a340:	bl	13204 <__printf_chk@plt>
   1a344:	b	19f78 <__assert_fail@plt+0x6a74>
   1a348:	movw	r1, #62660	; 0xf4c4
   1a34c:	mov	r2, #5
   1a350:	movt	r1, #3
   1a354:	bl	12d84 <dcgettext@plt>
   1a358:	mov	r9, r0
   1a35c:	b	1a1c0 <__assert_fail@plt+0x6cbc>
   1a360:	movw	r1, #62660	; 0xf4c4
   1a364:	mov	r2, #5
   1a368:	movt	r1, #3
   1a36c:	bl	12d84 <dcgettext@plt>
   1a370:	mov	r5, r0
   1a374:	b	1a26c <__assert_fail@plt+0x6d68>
   1a378:	movw	r1, #62660	; 0xf4c4
   1a37c:	mov	r2, #5
   1a380:	movt	r1, #3
   1a384:	bl	12d84 <dcgettext@plt>
   1a388:	mov	r5, r0
   1a38c:	b	1a2f8 <__assert_fail@plt+0x6df4>
   1a390:	mov	r2, #5
   1a394:	movw	r1, #62164	; 0xf2d4
   1a398:	mov	r0, #0
   1a39c:	movt	r1, #3
   1a3a0:	bl	12d84 <dcgettext@plt>
   1a3a4:	ldr	r6, [sp, #64]	; 0x40
   1a3a8:	ldrd	r2, [r6, #24]
   1a3ac:	mov	r1, r0
   1a3b0:	mov	r0, #1
   1a3b4:	bl	13204 <__printf_chk@plt>
   1a3b8:	b	1a098 <__assert_fail@plt+0x6b94>
   1a3bc:	bl	12dc0 <__stack_chk_fail@plt>
   1a3c0:	movw	r4, #37712	; 0x9350
   1a3c4:	movt	r4, #5
   1a3c8:	ldr	r3, [r4, #124]	; 0x7c
   1a3cc:	cmp	r3, #0
   1a3d0:	beq	1a40c <__assert_fail@plt+0x6f08>
   1a3d4:	mov	r6, ip
   1a3d8:	ldr	r0, [sl, #16]
   1a3dc:	mov	r1, r6
   1a3e0:	add	r2, sp, #272	; 0x110
   1a3e4:	bl	12dd8 <gelf_getphdr@plt>
   1a3e8:	cmp	r0, #0
   1a3ec:	beq	1a3fc <__assert_fail@plt+0x6ef8>
   1a3f0:	ldr	r3, [r0]
   1a3f4:	cmp	r3, #3
   1a3f8:	beq	1a17c <__assert_fail@plt+0x6c78>
   1a3fc:	ldr	r3, [r4, #124]	; 0x7c
   1a400:	add	r6, r6, #1
   1a404:	cmp	r6, r3
   1a408:	bcc	1a3d8 <__assert_fail@plt+0x6ed4>
   1a40c:	mov	ip, #1
   1a410:	str	ip, [sp, #92]	; 0x5c
   1a414:	b	1a21c <__assert_fail@plt+0x6d18>
   1a418:	mov	r2, #5
   1a41c:	movw	r1, #53868	; 0xd26c
   1a420:	mov	r0, #0
   1a424:	movt	r1, #3
   1a428:	bl	12d84 <dcgettext@plt>
   1a42c:	mov	r1, #0
   1a430:	mov	r2, r0
   1a434:	mov	r0, #1
   1a438:	bl	12f70 <error@plt>
   1a43c:	mov	r1, r0
   1a440:	ldr	r0, [sl, #16]
   1a444:	bl	133e4 <elf_getscn@plt>
   1a448:	mov	r1, r8
   1a44c:	bl	12f34 <elf_getdata@plt>
   1a450:	str	r0, [sp, #56]	; 0x38
   1a454:	b	19dd8 <__assert_fail@plt+0x68d4>
   1a458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a45c:	movw	r4, #37688	; 0x9338
   1a460:	sub	sp, sp, #436	; 0x1b4
   1a464:	movt	r4, #5
   1a468:	mov	r9, r0
   1a46c:	ldr	r0, [r0, #16]
   1a470:	str	r1, [sp, #104]	; 0x68
   1a474:	mov	r6, r2
   1a478:	ldr	r1, [r4]
   1a47c:	str	r4, [sp, #92]	; 0x5c
   1a480:	str	r3, [sp, #88]	; 0x58
   1a484:	str	r1, [sp, #428]	; 0x1ac
   1a488:	bl	12e38 <gelf_getclass@plt>
   1a48c:	mov	r2, #1
   1a490:	mov	r1, #7
   1a494:	mov	r3, r2
   1a498:	mov	fp, r0
   1a49c:	ldr	r0, [r9, #16]
   1a4a0:	bl	12f64 <gelf_fsize@plt>
   1a4a4:	ldr	r8, [sp, #88]	; 0x58
   1a4a8:	mov	r1, #0
   1a4ac:	ldrd	r4, [r8, #32]
   1a4b0:	mov	r7, r0
   1a4b4:	mov	r0, r6
   1a4b8:	bl	12f34 <elf_getdata@plt>
   1a4bc:	cmp	r0, #0
   1a4c0:	str	r0, [sp, #72]	; 0x48
   1a4c4:	beq	1a83c <__assert_fail@plt+0x7338>
   1a4c8:	ldr	r1, [r8, #40]	; 0x28
   1a4cc:	ldr	r0, [r9, #16]
   1a4d0:	bl	133e4 <elf_getscn@plt>
   1a4d4:	add	r1, sp, #168	; 0xa8
   1a4d8:	mov	r8, r0
   1a4dc:	bl	12cc4 <gelf_getshdr@plt>
   1a4e0:	mov	r1, #0
   1a4e4:	str	r0, [sp, #84]	; 0x54
   1a4e8:	mov	r0, r8
   1a4ec:	bl	12f34 <elf_getdata@plt>
   1a4f0:	ldr	ip, [sp, #88]	; 0x58
   1a4f4:	ldr	r1, [ip, #44]	; 0x2c
   1a4f8:	str	r0, [sp, #68]	; 0x44
   1a4fc:	ldr	r0, [r9, #16]
   1a500:	bl	133e4 <elf_getscn@plt>
   1a504:	add	r1, sp, #232	; 0xe8
   1a508:	bl	12cc4 <gelf_getshdr@plt>
   1a50c:	ldr	ip, [sp, #84]	; 0x54
   1a510:	str	r0, [sp, #100]	; 0x64
   1a514:	ldr	r0, [sp, #68]	; 0x44
   1a518:	cmp	r0, #0
   1a51c:	cmpne	ip, #0
   1a520:	movne	r8, #0
   1a524:	moveq	r8, #1
   1a528:	beq	1ab44 <__assert_fail@plt+0x7640>
   1a52c:	ldr	ip, [sp, #100]	; 0x64
   1a530:	cmp	ip, #0
   1a534:	beq	1ab44 <__assert_fail@plt+0x7640>
   1a538:	mov	r0, r6
   1a53c:	bl	134c8 <elf_scnshndx@plt>
   1a540:	cmp	r0, #0
   1a544:	strle	r8, [sp, #76]	; 0x4c
   1a548:	bgt	1abf0 <__assert_fail@plt+0x76ec>
   1a54c:	ldr	r0, [r9, #16]
   1a550:	add	r1, sp, #112	; 0x70
   1a554:	bl	13498 <elf_getshdrstrndx@plt>
   1a558:	cmp	r0, #0
   1a55c:	blt	1abcc <__assert_fail@plt+0x76c8>
   1a560:	mov	r0, r4
   1a564:	mov	r1, r5
   1a568:	mov	r3, #0
   1a56c:	mov	r2, r7
   1a570:	bl	3bba0 <__assert_fail@plt+0x2869c>
   1a574:	ldr	r5, [sp, #88]	; 0x58
   1a578:	mov	r3, #5
   1a57c:	mov	r4, r0
   1a580:	ldr	r0, [r5, #44]	; 0x2c
   1a584:	cmp	r0, #0
   1a588:	bne	1a858 <__assert_fail@plt+0x7354>
   1a58c:	str	r3, [sp]
   1a590:	movw	r1, #62392	; 0xf3b8
   1a594:	mov	r3, r4
   1a598:	movt	r1, #3
   1a59c:	movw	r2, #62460	; 0xf3fc
   1a5a0:	movt	r2, #3
   1a5a4:	bl	134a4 <dcngettext@plt>
   1a5a8:	mov	r7, r0
   1a5ac:	mov	r0, r6
   1a5b0:	bl	133d8 <elf_ndxscn@plt>
   1a5b4:	ldr	r6, [sp, #88]	; 0x58
   1a5b8:	ldr	r1, [sp, #112]	; 0x70
   1a5bc:	ldr	r2, [r6]
   1a5c0:	mov	r5, r0
   1a5c4:	ldr	r0, [r9, #16]
   1a5c8:	bl	12e44 <elf_strptr@plt>
   1a5cc:	ldr	r1, [sp, #88]	; 0x58
   1a5d0:	mov	r2, r5
   1a5d4:	mov	r3, r0
   1a5d8:	ldrd	r0, [r1, #24]
   1a5dc:	str	r4, [sp, #8]
   1a5e0:	strd	r0, [sp]
   1a5e4:	mov	r1, r7
   1a5e8:	mov	r0, #1
   1a5ec:	bl	13204 <__printf_chk@plt>
   1a5f0:	cmp	fp, #1
   1a5f4:	mov	r2, #5
   1a5f8:	movweq	r1, #62796	; 0xf54c
   1a5fc:	movwne	r1, #62852	; 0xf584
   1a600:	movteq	r1, #3
   1a604:	movtne	r1, #3
   1a608:	moveq	r0, #0
   1a60c:	movne	r0, #0
   1a610:	bl	12d84 <dcgettext@plt>
   1a614:	movw	r3, #37704	; 0x9348
   1a618:	movt	r3, #5
   1a61c:	ldr	r1, [r3]
   1a620:	bl	12c58 <fputs_unlocked@plt>
   1a624:	cmp	r4, #0
   1a628:	ble	1a83c <__assert_fail@plt+0x7338>
   1a62c:	add	r4, r4, #1
   1a630:	mov	r5, #0
   1a634:	str	r4, [sp, #80]	; 0x50
   1a638:	mov	sl, #1
   1a63c:	movw	r4, #15800	; 0x3db8
   1a640:	str	r5, [sp, #108]	; 0x6c
   1a644:	movt	r4, #4
   1a648:	mov	r7, r9
   1a64c:	str	r4, [sp, #96]	; 0x60
   1a650:	b	1a710 <__assert_fail@plt+0x720c>
   1a654:	ldrd	r8, [r4]
   1a658:	mov	r0, r7
   1a65c:	ldr	r1, [r4, #8]
   1a660:	strd	r8, [sp, #48]	; 0x30
   1a664:	bl	39a08 <__assert_fail@plt+0x26504>
   1a668:	cmp	fp, #1
   1a66c:	movne	r9, #18
   1a670:	moveq	r9, #10
   1a674:	str	r9, [sp, #40]	; 0x28
   1a678:	cmp	r0, #0
   1a67c:	beq	1a9a8 <__assert_fail@plt+0x74a4>
   1a680:	mov	r0, r7
   1a684:	ldr	r1, [r4, #8]
   1a688:	add	r2, sp, #364	; 0x16c
   1a68c:	mov	r3, #64	; 0x40
   1a690:	bl	38d60 <__assert_fail@plt+0x2585c>
   1a694:	add	ip, r0, #2
   1a698:	ldr	r8, [sp, #84]	; 0x54
   1a69c:	cmp	fp, #1
   1a6a0:	ldr	r2, [r5]
   1a6a4:	ldr	r0, [r7, #16]
   1a6a8:	movne	r6, #18
   1a6ac:	ldr	r1, [r8, #40]	; 0x28
   1a6b0:	moveq	r6, #10
   1a6b4:	ldrd	r8, [r5, #8]
   1a6b8:	ldrd	r4, [r4, #16]
   1a6bc:	str	ip, [sp, #44]	; 0x2c
   1a6c0:	strd	r8, [sp, #56]	; 0x38
   1a6c4:	bl	12e44 <elf_strptr@plt>
   1a6c8:	ldrd	r8, [sp, #48]	; 0x30
   1a6cc:	movw	r1, #62988	; 0xf60c
   1a6d0:	ldr	ip, [sp, #44]	; 0x2c
   1a6d4:	movt	r1, #3
   1a6d8:	ldr	r2, [sp, #40]	; 0x28
   1a6dc:	strd	r8, [sp]
   1a6e0:	ldrd	r8, [sp, #56]	; 0x38
   1a6e4:	strd	r4, [sp, #24]
   1a6e8:	str	ip, [sp, #8]
   1a6ec:	strd	r8, [sp, #16]
   1a6f0:	str	r6, [sp, #12]
   1a6f4:	str	r0, [sp, #32]
   1a6f8:	mov	r0, #1
   1a6fc:	bl	13204 <__printf_chk@plt>
   1a700:	ldr	r9, [sp, #80]	; 0x50
   1a704:	add	sl, sl, #1
   1a708:	cmp	sl, r9
   1a70c:	beq	1a83c <__assert_fail@plt+0x7338>
   1a710:	ldr	r0, [sp, #72]	; 0x48
   1a714:	sub	r1, sl, #1
   1a718:	add	r2, sp, #120	; 0x78
   1a71c:	bl	13120 <gelf_getrela@plt>
   1a720:	subs	r4, r0, #0
   1a724:	beq	1a700 <__assert_fail@plt+0x71fc>
   1a728:	ldr	r2, [r4, #12]
   1a72c:	add	r3, sp, #116	; 0x74
   1a730:	ldr	r0, [sp, #68]	; 0x44
   1a734:	str	r3, [sp]
   1a738:	add	r3, sp, #144	; 0x90
   1a73c:	ldr	r1, [sp, #76]	; 0x4c
   1a740:	bl	1342c <gelf_getsymshndx@plt>
   1a744:	subs	r5, r0, #0
   1a748:	beq	1a900 <__assert_fail@plt+0x73fc>
   1a74c:	ldrb	r3, [r5, #4]
   1a750:	and	r3, r3, #15
   1a754:	cmp	r3, #3
   1a758:	bne	1a654 <__assert_fail@plt+0x7150>
   1a75c:	ldrh	r1, [r5, #6]
   1a760:	movw	r3, #65535	; 0xffff
   1a764:	ldr	r0, [r7, #16]
   1a768:	cmp	r1, r3
   1a76c:	ldreq	r1, [sp, #116]	; 0x74
   1a770:	bl	133e4 <elf_getscn@plt>
   1a774:	add	r1, sp, #296	; 0x128
   1a778:	bl	12cc4 <gelf_getshdr@plt>
   1a77c:	ldr	r1, [r4, #8]
   1a780:	ldrd	r8, [r4]
   1a784:	subs	r6, r0, #0
   1a788:	mov	r0, r7
   1a78c:	beq	1aa80 <__assert_fail@plt+0x757c>
   1a790:	strd	r8, [sp, #48]	; 0x30
   1a794:	bl	39a08 <__assert_fail@plt+0x26504>
   1a798:	cmp	fp, #1
   1a79c:	movne	r9, #18
   1a7a0:	moveq	r9, #10
   1a7a4:	str	r9, [sp, #40]	; 0x28
   1a7a8:	cmp	r0, #0
   1a7ac:	beq	1a8e8 <__assert_fail@plt+0x73e4>
   1a7b0:	mov	r3, #64	; 0x40
   1a7b4:	mov	r0, r7
   1a7b8:	ldr	r1, [r4, #8]
   1a7bc:	add	r2, sp, #364	; 0x16c
   1a7c0:	bl	38d60 <__assert_fail@plt+0x2585c>
   1a7c4:	add	r3, r0, #2
   1a7c8:	ldrd	r8, [r5, #8]
   1a7cc:	cmp	fp, #1
   1a7d0:	ldr	r2, [r6]
   1a7d4:	add	sl, sl, #1
   1a7d8:	ldr	r0, [r7, #16]
   1a7dc:	movne	r6, #18
   1a7e0:	ldr	r1, [sp, #112]	; 0x70
   1a7e4:	moveq	r6, #10
   1a7e8:	ldrd	r4, [r4, #16]
   1a7ec:	strd	r8, [sp, #56]	; 0x38
   1a7f0:	str	r3, [sp, #44]	; 0x2c
   1a7f4:	bl	12e44 <elf_strptr@plt>
   1a7f8:	ldrd	r8, [sp, #48]	; 0x30
   1a7fc:	movw	r1, #62988	; 0xf60c
   1a800:	ldr	r3, [sp, #44]	; 0x2c
   1a804:	movt	r1, #3
   1a808:	ldr	r2, [sp, #40]	; 0x28
   1a80c:	strd	r8, [sp]
   1a810:	ldrd	r8, [sp, #56]	; 0x38
   1a814:	strd	r4, [sp, #24]
   1a818:	str	r3, [sp, #8]
   1a81c:	strd	r8, [sp, #16]
   1a820:	str	r6, [sp, #12]
   1a824:	str	r0, [sp, #32]
   1a828:	mov	r0, #1
   1a82c:	bl	13204 <__printf_chk@plt>
   1a830:	ldr	r9, [sp, #80]	; 0x50
   1a834:	cmp	sl, r9
   1a838:	bne	1a710 <__assert_fail@plt+0x720c>
   1a83c:	ldr	r6, [sp, #92]	; 0x5c
   1a840:	ldr	r2, [sp, #428]	; 0x1ac
   1a844:	ldr	r3, [r6]
   1a848:	cmp	r2, r3
   1a84c:	bne	1ab70 <__assert_fail@plt+0x766c>
   1a850:	add	sp, sp, #436	; 0x1b4
   1a854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a858:	str	r3, [sp]
   1a85c:	movw	r1, #62204	; 0xf2fc
   1a860:	mov	r3, r4
   1a864:	movt	r1, #3
   1a868:	movw	r2, #62296	; 0xf358
   1a86c:	mov	r0, #0
   1a870:	movt	r2, #3
   1a874:	bl	134a4 <dcngettext@plt>
   1a878:	mov	r7, r0
   1a87c:	mov	r0, r6
   1a880:	bl	133d8 <elf_ndxscn@plt>
   1a884:	ldr	r1, [sp, #112]	; 0x70
   1a888:	ldr	r2, [r5]
   1a88c:	mov	r8, r0
   1a890:	ldr	r0, [r9, #16]
   1a894:	bl	12e44 <elf_strptr@plt>
   1a898:	ldr	ip, [sp, #100]	; 0x64
   1a89c:	ldr	r1, [sp, #112]	; 0x70
   1a8a0:	ldr	r2, [ip]
   1a8a4:	ldr	ip, [sp, #88]	; 0x58
   1a8a8:	ldr	r5, [ip, #44]	; 0x2c
   1a8ac:	mov	r6, r0
   1a8b0:	ldr	r0, [r9, #16]
   1a8b4:	bl	12e44 <elf_strptr@plt>
   1a8b8:	str	r5, [sp]
   1a8bc:	ldr	r5, [sp, #88]	; 0x58
   1a8c0:	mov	r1, r7
   1a8c4:	mov	r3, r6
   1a8c8:	mov	r2, r8
   1a8cc:	str	r0, [sp, #4]
   1a8d0:	mov	r0, #1
   1a8d4:	ldrd	r6, [r5, #24]
   1a8d8:	str	r4, [sp, #16]
   1a8dc:	strd	r6, [sp, #8]
   1a8e0:	bl	13204 <__printf_chk@plt>
   1a8e4:	b	1a5f0 <__assert_fail@plt+0x70ec>
   1a8e8:	movw	r1, #62660	; 0xf4c4
   1a8ec:	mov	r2, #5
   1a8f0:	movt	r1, #3
   1a8f4:	bl	12d84 <dcgettext@plt>
   1a8f8:	mov	r3, r0
   1a8fc:	b	1a7c8 <__assert_fail@plt+0x72c4>
   1a900:	ldr	r6, [sp, #108]	; 0x6c
   1a904:	cmp	r6, #0
   1a908:	bne	1a9c0 <__assert_fail@plt+0x74bc>
   1a90c:	ldr	r8, [sp, #104]	; 0x68
   1a910:	ldrh	r3, [r8]
   1a914:	cmp	r3, #2
   1a918:	beq	1ab74 <__assert_fail@plt+0x7670>
   1a91c:	mvn	ip, #0
   1a920:	str	ip, [sp, #108]	; 0x6c
   1a924:	ldrd	r8, [r4]
   1a928:	mov	r0, r7
   1a92c:	ldr	r1, [r4, #8]
   1a930:	strd	r8, [sp, #48]	; 0x30
   1a934:	bl	39a08 <__assert_fail@plt+0x26504>
   1a938:	cmp	fp, #1
   1a93c:	movne	r5, #18
   1a940:	moveq	r5, #10
   1a944:	cmp	r0, #0
   1a948:	beq	1aafc <__assert_fail@plt+0x75f8>
   1a94c:	mov	r0, r7
   1a950:	ldr	r1, [r4, #8]
   1a954:	add	r2, sp, #364	; 0x16c
   1a958:	mov	r3, #64	; 0x40
   1a95c:	bl	38d60 <__assert_fail@plt+0x2585c>
   1a960:	add	r8, r0, #2
   1a964:	mov	r2, #5
   1a968:	movw	r1, #62704	; 0xf4f0
   1a96c:	mov	r0, #0
   1a970:	movt	r1, #3
   1a974:	bl	12d84 <dcgettext@plt>
   1a978:	ldrd	r2, [sp, #48]	; 0x30
   1a97c:	str	r8, [sp, #8]
   1a980:	movw	r1, #62960	; 0xf5f0
   1a984:	movt	r1, #3
   1a988:	strd	r2, [sp]
   1a98c:	mov	r2, r5
   1a990:	str	r0, [sp, #12]
   1a994:	mov	r0, #1
   1a998:	ldr	r3, [r4, #12]
   1a99c:	str	r3, [sp, #16]
   1a9a0:	bl	13204 <__printf_chk@plt>
   1a9a4:	b	1a700 <__assert_fail@plt+0x71fc>
   1a9a8:	movw	r1, #62660	; 0xf4c4
   1a9ac:	mov	r2, #5
   1a9b0:	movt	r1, #3
   1a9b4:	bl	12d84 <dcgettext@plt>
   1a9b8:	mov	ip, r0
   1a9bc:	b	1a698 <__assert_fail@plt+0x7194>
   1a9c0:	ble	1a924 <__assert_fail@plt+0x7420>
   1a9c4:	ldr	r9, [sp, #88]	; 0x58
   1a9c8:	ldr	r3, [r9, #40]	; 0x28
   1a9cc:	cmp	r3, #0
   1a9d0:	bne	1a924 <__assert_fail@plt+0x7420>
   1a9d4:	ldrd	r8, [r4]
   1a9d8:	mov	r0, r7
   1a9dc:	ldr	r1, [r4, #8]
   1a9e0:	strd	r8, [sp, #48]	; 0x30
   1a9e4:	bl	39a08 <__assert_fail@plt+0x26504>
   1a9e8:	cmp	fp, #1
   1a9ec:	movne	r5, #18
   1a9f0:	moveq	r5, #10
   1a9f4:	cmp	r0, #0
   1a9f8:	beq	1ab14 <__assert_fail@plt+0x7610>
   1a9fc:	mov	r3, #64	; 0x40
   1aa00:	mov	r0, r7
   1aa04:	ldr	r1, [r4, #8]
   1aa08:	add	r2, sp, #364	; 0x16c
   1aa0c:	bl	38d60 <__assert_fail@plt+0x2585c>
   1aa10:	add	r3, r0, #2
   1aa14:	ldr	r9, [sp, #100]	; 0x64
   1aa18:	cmp	fp, #1
   1aa1c:	ldr	r0, [r7, #16]
   1aa20:	ldr	r1, [sp, #112]	; 0x70
   1aa24:	movne	r6, #18
   1aa28:	ldr	r2, [r9]
   1aa2c:	moveq	r6, #10
   1aa30:	ldrd	r8, [r4, #16]
   1aa34:	str	r3, [sp, #44]	; 0x2c
   1aa38:	strd	r8, [sp, #56]	; 0x38
   1aa3c:	bl	12e44 <elf_strptr@plt>
   1aa40:	mov	r2, r5
   1aa44:	ldrd	r4, [sp, #56]	; 0x38
   1aa48:	ldrd	r8, [sp, #48]	; 0x30
   1aa4c:	movw	r1, #62924	; 0xf5cc
   1aa50:	ldr	r3, [sp, #44]	; 0x2c
   1aa54:	movt	r1, #3
   1aa58:	strd	r4, [sp, #24]
   1aa5c:	ldr	r5, [sp, #96]	; 0x60
   1aa60:	strd	r8, [sp]
   1aa64:	str	r3, [sp, #8]
   1aa68:	str	r5, [sp, #16]
   1aa6c:	str	r6, [sp, #12]
   1aa70:	str	r0, [sp, #32]
   1aa74:	mov	r0, #1
   1aa78:	bl	13204 <__printf_chk@plt>
   1aa7c:	b	1a700 <__assert_fail@plt+0x71fc>
   1aa80:	bl	39a08 <__assert_fail@plt+0x26504>
   1aa84:	cmp	fp, #1
   1aa88:	movne	r6, #18
   1aa8c:	moveq	r6, #10
   1aa90:	cmp	r0, #0
   1aa94:	beq	1ab2c <__assert_fail@plt+0x7628>
   1aa98:	ldr	r1, [r4, #8]
   1aa9c:	mov	r0, r7
   1aaa0:	add	r2, sp, #364	; 0x16c
   1aaa4:	mov	r3, #64	; 0x40
   1aaa8:	bl	38d60 <__assert_fail@plt+0x2585c>
   1aaac:	add	r4, r0, #2
   1aab0:	mov	r2, #5
   1aab4:	movw	r1, #62780	; 0xf53c
   1aab8:	mov	r0, #0
   1aabc:	movt	r1, #3
   1aac0:	bl	12d84 <dcgettext@plt>
   1aac4:	ldrh	r3, [r5, #6]
   1aac8:	movw	r2, #65535	; 0xffff
   1aacc:	strd	r8, [sp]
   1aad0:	cmp	r3, r2
   1aad4:	str	r4, [sp, #8]
   1aad8:	mov	r2, r6
   1aadc:	movw	r1, #62960	; 0xf5f0
   1aae0:	ldreq	r3, [sp, #116]	; 0x74
   1aae4:	movt	r1, #3
   1aae8:	str	r3, [sp, #16]
   1aaec:	str	r0, [sp, #12]
   1aaf0:	mov	r0, #1
   1aaf4:	bl	13204 <__printf_chk@plt>
   1aaf8:	b	1a700 <__assert_fail@plt+0x71fc>
   1aafc:	movw	r1, #62660	; 0xf4c4
   1ab00:	mov	r2, #5
   1ab04:	movt	r1, #3
   1ab08:	bl	12d84 <dcgettext@plt>
   1ab0c:	mov	r8, r0
   1ab10:	b	1a964 <__assert_fail@plt+0x7460>
   1ab14:	movw	r1, #62660	; 0xf4c4
   1ab18:	mov	r2, #5
   1ab1c:	movt	r1, #3
   1ab20:	bl	12d84 <dcgettext@plt>
   1ab24:	mov	r3, r0
   1ab28:	b	1aa14 <__assert_fail@plt+0x7510>
   1ab2c:	movw	r1, #62660	; 0xf4c4
   1ab30:	mov	r2, #5
   1ab34:	movt	r1, #3
   1ab38:	bl	12d84 <dcgettext@plt>
   1ab3c:	mov	r4, r0
   1ab40:	b	1aab0 <__assert_fail@plt+0x75ac>
   1ab44:	mov	r2, #5
   1ab48:	movw	r1, #62164	; 0xf2d4
   1ab4c:	mov	r0, #0
   1ab50:	movt	r1, #3
   1ab54:	bl	12d84 <dcgettext@plt>
   1ab58:	ldr	r4, [sp, #88]	; 0x58
   1ab5c:	ldrd	r2, [r4, #24]
   1ab60:	mov	r1, r0
   1ab64:	mov	r0, #1
   1ab68:	bl	13204 <__printf_chk@plt>
   1ab6c:	b	1a83c <__assert_fail@plt+0x7338>
   1ab70:	bl	12dc0 <__stack_chk_fail@plt>
   1ab74:	movw	r6, #37712	; 0x9350
   1ab78:	movt	r6, #5
   1ab7c:	ldr	r3, [r6, #124]	; 0x7c
   1ab80:	cmp	r3, #0
   1ab84:	beq	1abc0 <__assert_fail@plt+0x76bc>
   1ab88:	ldr	r5, [sp, #108]	; 0x6c
   1ab8c:	ldr	r0, [r7, #16]
   1ab90:	mov	r1, r5
   1ab94:	add	r2, sp, #296	; 0x128
   1ab98:	bl	12dd8 <gelf_getphdr@plt>
   1ab9c:	cmp	r0, #0
   1aba0:	beq	1abb0 <__assert_fail@plt+0x76ac>
   1aba4:	ldr	r3, [r0]
   1aba8:	cmp	r3, #3
   1abac:	beq	1a91c <__assert_fail@plt+0x7418>
   1abb0:	ldr	r3, [r6, #124]	; 0x7c
   1abb4:	add	r5, r5, #1
   1abb8:	cmp	r5, r3
   1abbc:	bcc	1ab8c <__assert_fail@plt+0x7688>
   1abc0:	mov	r5, #1
   1abc4:	str	r5, [sp, #108]	; 0x6c
   1abc8:	b	1a9c4 <__assert_fail@plt+0x74c0>
   1abcc:	mov	r2, #5
   1abd0:	movw	r1, #53868	; 0xd26c
   1abd4:	mov	r0, #0
   1abd8:	movt	r1, #3
   1abdc:	bl	12d84 <dcgettext@plt>
   1abe0:	mov	r1, #0
   1abe4:	mov	r2, r0
   1abe8:	mov	r0, #1
   1abec:	bl	12f70 <error@plt>
   1abf0:	mov	r1, r0
   1abf4:	ldr	r0, [r9, #16]
   1abf8:	bl	133e4 <elf_getscn@plt>
   1abfc:	mov	r1, r8
   1ac00:	bl	12f34 <elf_getdata@plt>
   1ac04:	str	r0, [sp, #76]	; 0x4c
   1ac08:	b	1a54c <__assert_fail@plt+0x7048>
   1ac0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac10:	vpush	{d8-d10}
   1ac14:	sub	sp, sp, #148	; 0x94
   1ac18:	vldr	s20, [sp, #216]	; 0xd8
   1ac1c:	movw	r8, #37688	; 0x9338
   1ac20:	movt	r8, #5
   1ac24:	str	r8, [sp, #48]	; 0x30
   1ac28:	mov	r8, r0
   1ac2c:	ldr	sl, [sp, #48]	; 0x30
   1ac30:	mov	r7, r2
   1ac34:	ldr	r4, [sp, #208]	; 0xd0
   1ac38:	ldr	r6, [sp, #212]	; 0xd4
   1ac3c:	ldr	ip, [sl]
   1ac40:	add	r9, r4, #1
   1ac44:	mov	sl, r1
   1ac48:	mov	r1, #4
   1ac4c:	mov	r0, r9
   1ac50:	str	r9, [sp, #52]	; 0x34
   1ac54:	str	ip, [sp, #140]	; 0x8c
   1ac58:	mov	r9, r3
   1ac5c:	ldr	ip, [sp, #224]	; 0xe0
   1ac60:	ldr	fp, [sp, #220]	; 0xdc
   1ac64:	str	ip, [sp, #44]	; 0x2c
   1ac68:	bl	3b2a4 <__assert_fail@plt+0x27da0>
   1ac6c:	cmp	r6, #0
   1ac70:	addne	r1, fp, r6, lsl #2
   1ac74:	mov	r5, r0
   1ac78:	beq	1ac94 <__assert_fail@plt+0x7790>
   1ac7c:	ldr	r3, [fp], #4
   1ac80:	cmp	fp, r1
   1ac84:	ldr	r2, [r5, r3, lsl #2]
   1ac88:	add	r2, r2, #1
   1ac8c:	str	r2, [r5, r3, lsl #2]
   1ac90:	bne	1ac7c <__assert_fail@plt+0x7778>
   1ac94:	ldr	r1, [r7, #40]	; 0x28
   1ac98:	ldr	r0, [r8]
   1ac9c:	bl	133e4 <elf_getscn@plt>
   1aca0:	add	r1, sp, #72	; 0x48
   1aca4:	bl	12cc4 <gelf_getshdr@plt>
   1aca8:	subs	fp, r0, #0
   1acac:	beq	1af44 <__assert_fail@plt+0x7a40>
   1acb0:	mov	r3, #5
   1acb4:	movw	r1, #63028	; 0xf634
   1acb8:	str	r3, [sp]
   1acbc:	movt	r1, #3
   1acc0:	mov	r3, r6
   1acc4:	movw	r2, #63168	; 0xf6c0
   1acc8:	mov	r0, #0
   1accc:	movt	r2, #3
   1acd0:	bl	134a4 <dcngettext@plt>
   1acd4:	mov	r3, r0
   1acd8:	mov	r0, sl
   1acdc:	str	r3, [sp, #36]	; 0x24
   1ace0:	bl	133d8 <elf_ndxscn@plt>
   1ace4:	mov	r1, r9
   1ace8:	ldr	r2, [r7]
   1acec:	mov	ip, r0
   1acf0:	ldr	r0, [r8]
   1acf4:	str	ip, [sp, #40]	; 0x28
   1acf8:	bl	12e44 <elf_strptr@plt>
   1acfc:	str	r0, [sp, #32]
   1ad00:	ldr	r0, [r8]
   1ad04:	bl	12e38 <gelf_getclass@plt>
   1ad08:	ldr	r2, [fp]
   1ad0c:	ldrd	sl, [r7, #16]
   1ad10:	mov	r1, r9
   1ad14:	strd	sl, [sp, #56]	; 0x38
   1ad18:	ldrd	sl, [r7, #24]
   1ad1c:	ldr	r7, [r7, #40]	; 0x28
   1ad20:	cmp	r0, #1
   1ad24:	ldr	r0, [r8]
   1ad28:	movne	r9, #18
   1ad2c:	moveq	r9, #10
   1ad30:	bl	12e44 <elf_strptr@plt>
   1ad34:	ldr	r3, [sp, #36]	; 0x24
   1ad38:	str	r9, [sp, #4]
   1ad3c:	ldr	ip, [sp, #40]	; 0x28
   1ad40:	ldrd	r8, [sp, #56]	; 0x38
   1ad44:	mov	r1, r3
   1ad48:	strd	sl, [sp, #16]
   1ad4c:	mov	r2, ip
   1ad50:	str	r7, [sp, #24]
   1ad54:	strd	r8, [sp, #8]
   1ad58:	ldr	r3, [sp, #32]
   1ad5c:	str	r6, [sp]
   1ad60:	str	r0, [sp, #28]
   1ad64:	mov	r0, #1
   1ad68:	bl	13204 <__printf_chk@plt>
   1ad6c:	ldr	r9, [sp, #44]	; 0x2c
   1ad70:	cmp	r9, #0
   1ad74:	beq	1ad8c <__assert_fail@plt+0x7888>
   1ad78:	movw	r3, #37704	; 0x9348
   1ad7c:	movt	r3, #5
   1ad80:	mov	r0, r9
   1ad84:	ldr	r1, [r3]
   1ad88:	bl	1345c <fputs@plt>
   1ad8c:	cmp	r6, #0
   1ad90:	beq	1af1c <__assert_fail@plt+0x7a18>
   1ad94:	mov	r2, #5
   1ad98:	movw	r1, #63312	; 0xf750
   1ad9c:	mov	r0, #0
   1ada0:	movt	r1, #3
   1ada4:	bl	12d84 <dcgettext@plt>
   1ada8:	movw	r3, #37704	; 0x9348
   1adac:	movt	r3, #5
   1adb0:	vldr	d8, [pc, #504]	; 1afb0 <__assert_fail@plt+0x7aac>
   1adb4:	ldr	r1, [r3]
   1adb8:	bl	12c58 <fputs_unlocked@plt>
   1adbc:	mov	r2, #5
   1adc0:	movw	r1, #63352	; 0xf778
   1adc4:	mov	r0, #0
   1adc8:	movt	r1, #3
   1adcc:	bl	12d84 <dcgettext@plt>
   1add0:	ldr	r2, [r5]
   1add4:	vmov	s12, r6
   1add8:	vmov	s13, r2
   1addc:	vcvt.f64.u32	d9, s12
   1ade0:	vcvt.f64.u32	d7, s13
   1ade4:	vmul.f64	d7, d7, d8
   1ade8:	mov	r1, r0
   1adec:	mov	r0, #1
   1adf0:	vdiv.f64	d7, d7, d9
   1adf4:	vstr	d7, [sp]
   1adf8:	bl	13204 <__printf_chk@plt>
   1adfc:	cmp	r4, #0
   1ae00:	beq	1af94 <__assert_fail@plt+0x7a90>
   1ae04:	vcvt.f64.u32	d10, s20
   1ae08:	mov	r6, #0
   1ae0c:	mov	r7, #0
   1ae10:	mov	sl, r5
   1ae14:	mov	r8, #1
   1ae18:	ldr	r9, [sl, #4]!
   1ae1c:	mov	r2, #5
   1ae20:	movw	r1, #63380	; 0xf794
   1ae24:	mov	r0, #0
   1ae28:	movt	r1, #3
   1ae2c:	mul	r3, r8, r9
   1ae30:	adds	r6, r6, r3
   1ae34:	adc	r7, r7, #0
   1ae38:	bl	12d84 <dcgettext@plt>
   1ae3c:	vmov	s12, r9
   1ae40:	mov	r1, r7
   1ae44:	vcvt.f64.u32	d7, s12
   1ae48:	vmul.f64	d7, d7, d8
   1ae4c:	vdiv.f64	d7, d7, d9
   1ae50:	mov	fp, r0
   1ae54:	mov	r0, r6
   1ae58:	vstr	d7, [sp]
   1ae5c:	bl	3bb2c <__assert_fail@plt+0x28628>
   1ae60:	mov	r2, r8
   1ae64:	mov	r3, r9
   1ae68:	add	r8, r8, #1
   1ae6c:	vmov	d6, r0, r1
   1ae70:	mov	r1, fp
   1ae74:	mov	r0, #1
   1ae78:	vmul.f64	d7, d6, d8
   1ae7c:	vdiv.f64	d7, d7, d10
   1ae80:	vstr	d7, [sp, #8]
   1ae84:	bl	13204 <__printf_chk@plt>
   1ae88:	cmp	r4, r8
   1ae8c:	bcs	1ae18 <__assert_fail@plt+0x7914>
   1ae90:	ldr	ip, [sp, #52]	; 0x34
   1ae94:	mov	r8, #0
   1ae98:	mov	r9, #0
   1ae9c:	mov	r1, r5
   1aea0:	mov	r3, #1
   1aea4:	mov	r2, #0
   1aea8:	ldr	r0, [r1, #4]!
   1aeac:	add	r2, r2, r3
   1aeb0:	add	r3, r3, #1
   1aeb4:	mul	r0, r2, r0
   1aeb8:	adds	r8, r8, r0
   1aebc:	adc	r9, r9, #0
   1aec0:	cmp	ip, r3
   1aec4:	bne	1aea8 <__assert_fail@plt+0x79a4>
   1aec8:	mov	r2, #5
   1aecc:	movw	r1, #63416	; 0xf7b8
   1aed0:	mov	r0, #0
   1aed4:	movt	r1, #3
   1aed8:	bl	12d84 <dcgettext@plt>
   1aedc:	mov	r1, r7
   1aee0:	mov	r4, r0
   1aee4:	mov	r0, r6
   1aee8:	bl	3bb2c <__assert_fail@plt+0x28628>
   1aeec:	vmov	d8, r0, r1
   1aef0:	mov	r0, r8
   1aef4:	mov	r1, r9
   1aef8:	bl	3bb2c <__assert_fail@plt+0x28628>
   1aefc:	vdiv.f64	d9, d8, d9
   1af00:	vmov	d7, r0, r1
   1af04:	mov	r1, r4
   1af08:	mov	r0, #1
   1af0c:	vdiv.f64	d8, d7, d8
   1af10:	vstr	d9, [sp]
   1af14:	vmov	r2, r3, d8
   1af18:	bl	13204 <__printf_chk@plt>
   1af1c:	ldr	r8, [sp, #48]	; 0x30
   1af20:	ldr	r2, [sp, #140]	; 0x8c
   1af24:	ldr	r3, [r8]
   1af28:	cmp	r2, r3
   1af2c:	bne	1afa8 <__assert_fail@plt+0x7aa4>
   1af30:	mov	r0, r5
   1af34:	add	sp, sp, #148	; 0x94
   1af38:	vpop	{d8-d10}
   1af3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af40:	b	12cf4 <free@plt>
   1af44:	mov	r2, #5
   1af48:	movw	r1, #54000	; 0xd2f0
   1af4c:	movt	r1, #3
   1af50:	bl	12d84 <dcgettext@plt>
   1af54:	mov	r4, r0
   1af58:	mov	r0, sl
   1af5c:	bl	133d8 <elf_ndxscn@plt>
   1af60:	mov	r2, r4
   1af64:	mov	r1, fp
   1af68:	mov	r3, r0
   1af6c:	mov	r0, fp
   1af70:	bl	12f70 <error@plt>
   1af74:	ldr	r8, [sp, #48]	; 0x30
   1af78:	ldr	r2, [sp, #140]	; 0x8c
   1af7c:	ldr	r3, [r8]
   1af80:	cmp	r2, r3
   1af84:	bne	1afa8 <__assert_fail@plt+0x7aa4>
   1af88:	add	sp, sp, #148	; 0x94
   1af8c:	vpop	{d8-d10}
   1af90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af94:	mov	r6, #0
   1af98:	mov	r7, #0
   1af9c:	mov	r8, r6
   1afa0:	mov	r9, r7
   1afa4:	b	1aec8 <__assert_fail@plt+0x79c4>
   1afa8:	bl	12dc0 <__stack_chk_fail@plt>
   1afac:	nop	{0}
   1afb0:	andeq	r0, r0, r0
   1afb4:	subsmi	r0, r9, r0
   1afb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afbc:	movw	r9, #37688	; 0x9338
   1afc0:	movt	r9, #5
   1afc4:	sub	sp, sp, #180	; 0xb4
   1afc8:	mov	r8, r0
   1afcc:	add	r1, sp, #96	; 0x60
   1afd0:	ldr	r3, [r9]
   1afd4:	ldr	r0, [r0, #16]
   1afd8:	str	r9, [sp, #64]	; 0x40
   1afdc:	str	r3, [sp, #172]	; 0xac
   1afe0:	bl	13498 <elf_getshdrstrndx@plt>
   1afe4:	cmp	r0, #0
   1afe8:	blt	1b93c <__assert_fail@plt+0x8438>
   1afec:	mov	r9, #0
   1aff0:	mov	r1, r9
   1aff4:	ldr	r0, [r8, #16]
   1aff8:	bl	13300 <elf_nextscn@plt>
   1affc:	subs	r9, r0, #0
   1b000:	beq	1b210 <__assert_fail@plt+0x7d0c>
   1b004:	add	r1, sp, #104	; 0x68
   1b008:	bl	12cc4 <gelf_getshdr@plt>
   1b00c:	subs	r7, r0, #0
   1b010:	beq	1aff0 <__assert_fail@plt+0x7aec>
   1b014:	ldr	ip, [r7, #4]
   1b018:	cmn	ip, #-1879048182	; 0x9000000a
   1b01c:	cmpne	ip, #5
   1b020:	bne	1b140 <__assert_fail@plt+0x7c3c>
   1b024:	ldrd	r2, [r7, #8]
   1b028:	mov	r0, #2048	; 0x800
   1b02c:	mov	r1, #0
   1b030:	and	r2, r2, r0
   1b034:	and	r3, r3, r1
   1b038:	orrs	sl, r2, r3
   1b03c:	moveq	r4, ip
   1b040:	bne	1b148 <__assert_fail@plt+0x7c44>
   1b044:	cmp	r4, #5
   1b048:	beq	1b180 <__assert_fail@plt+0x7c7c>
   1b04c:	cmn	r4, #-1879048182	; 0x9000000a
   1b050:	bne	1aff0 <__assert_fail@plt+0x7aec>
   1b054:	ldr	sl, [sp, #96]	; 0x60
   1b058:	mov	r0, r9
   1b05c:	mov	r1, #0
   1b060:	str	sl, [sp, #68]	; 0x44
   1b064:	bl	12f34 <elf_getdata@plt>
   1b068:	subs	r4, r0, #0
   1b06c:	beq	1b8f8 <__assert_fail@plt+0x83f4>
   1b070:	ldr	r3, [r4, #12]
   1b074:	cmp	r3, #15
   1b078:	bls	1b0fc <__assert_fail@plt+0x7bf8>
   1b07c:	ldr	r3, [r4]
   1b080:	ldr	r0, [r8, #16]
   1b084:	ldr	ip, [r3]
   1b088:	ldr	sl, [r3, #4]
   1b08c:	ldr	r6, [r3, #8]
   1b090:	str	ip, [sp, #24]
   1b094:	str	sl, [sp, #52]	; 0x34
   1b098:	bl	12e38 <gelf_getclass@plt>
   1b09c:	cmp	r0, #2
   1b0a0:	lsleq	r6, r6, #1
   1b0a4:	cmp	r6, #0
   1b0a8:	beq	1b0fc <__assert_fail@plt+0x7bf8>
   1b0ac:	ldr	r0, [sp, #24]
   1b0b0:	mov	r1, #0
   1b0b4:	ldr	sl, [r4, #12]
   1b0b8:	mov	fp, #0
   1b0bc:	adds	r2, r0, #4
   1b0c0:	adc	r3, r1, #0
   1b0c4:	ldr	r1, [r4]
   1b0c8:	adds	r2, r2, r6
   1b0cc:	adc	r3, r3, #0
   1b0d0:	ldr	r1, [r1, #12]
   1b0d4:	lsl	ip, r3, #2
   1b0d8:	orr	r0, ip, r2, lsr #30
   1b0dc:	str	r0, [sp, #44]	; 0x2c
   1b0e0:	str	r1, [sp, #56]	; 0x38
   1b0e4:	lsl	r1, r2, #2
   1b0e8:	str	r1, [sp, #40]	; 0x28
   1b0ec:	ldrd	r2, [sp, #40]	; 0x28
   1b0f0:	cmp	r3, fp
   1b0f4:	cmpeq	r2, sl
   1b0f8:	bls	1b3d0 <__assert_fail@plt+0x7ecc>
   1b0fc:	mov	r5, #0
   1b100:	mov	r0, r5
   1b104:	bl	12cf4 <free@plt>
   1b108:	movw	r1, #63692	; 0xf8cc
   1b10c:	movt	r1, #3
   1b110:	mov	r0, #0
   1b114:	mov	r2, #5
   1b118:	bl	12d84 <dcgettext@plt>
   1b11c:	mov	r4, r0
   1b120:	mov	r0, r9
   1b124:	bl	133d8 <elf_ndxscn@plt>
   1b128:	mov	r2, r4
   1b12c:	mov	r3, r0
   1b130:	mov	r0, #0
   1b134:	mov	r1, r0
   1b138:	bl	12f70 <error@plt>
   1b13c:	b	1aff0 <__assert_fail@plt+0x7aec>
   1b140:	mov	r4, ip
   1b144:	b	1b04c <__assert_fail@plt+0x7b48>
   1b148:	mov	r1, #0
   1b14c:	mov	r0, r9
   1b150:	mov	r2, r1
   1b154:	bl	12e8c <elf_compress@plt>
   1b158:	cmp	r0, #0
   1b15c:	blt	1b394 <__assert_fail@plt+0x7e90>
   1b160:	add	r1, sp, #104	; 0x68
   1b164:	mov	r0, r9
   1b168:	bl	12cc4 <gelf_getshdr@plt>
   1b16c:	subs	r7, r0, #0
   1b170:	beq	1b84c <__assert_fail@plt+0x8348>
   1b174:	ldr	r4, [r7, #4]
   1b178:	cmp	r4, #5
   1b17c:	bne	1b04c <__assert_fail@plt+0x7b48>
   1b180:	mov	r0, r8
   1b184:	bl	3b164 <__assert_fail@plt+0x27c60>
   1b188:	mov	r1, #0
   1b18c:	ldr	fp, [sp, #96]	; 0x60
   1b190:	cmp	r0, #8
   1b194:	mov	r0, r9
   1b198:	beq	1b2dc <__assert_fail@plt+0x7dd8>
   1b19c:	str	fp, [sp, #52]	; 0x34
   1b1a0:	bl	12f34 <elf_getdata@plt>
   1b1a4:	subs	r5, r0, #0
   1b1a8:	beq	1b8b4 <__assert_fail@plt+0x83b0>
   1b1ac:	ldr	r2, [r5, #12]
   1b1b0:	cmp	r2, #7
   1b1b4:	bls	1b200 <__assert_fail@plt+0x7cfc>
   1b1b8:	ldr	sl, [r5]
   1b1bc:	mov	r5, #0
   1b1c0:	mov	r3, #0
   1b1c4:	ldr	fp, [sl]
   1b1c8:	ldr	r6, [sl, #4]
   1b1cc:	adds	r4, fp, r6
   1b1d0:	adc	r5, r5, #0
   1b1d4:	adds	r4, r4, #2
   1b1d8:	adc	r5, r5, #0
   1b1dc:	lsl	r1, r4, #2
   1b1e0:	str	r1, [sp, #32]
   1b1e4:	lsl	ip, r5, #2
   1b1e8:	orr	r0, ip, r4, lsr #30
   1b1ec:	str	r0, [sp, #36]	; 0x24
   1b1f0:	ldrd	r0, [sp, #32]
   1b1f4:	cmp	r1, r3
   1b1f8:	cmpeq	r0, r2
   1b1fc:	bls	1b22c <__assert_fail@plt+0x7d28>
   1b200:	movw	r1, #63612	; 0xf87c
   1b204:	mov	r0, #0
   1b208:	movt	r1, #3
   1b20c:	b	1b114 <__assert_fail@plt+0x7c10>
   1b210:	ldr	r9, [sp, #64]	; 0x40
   1b214:	ldr	r2, [sp, #172]	; 0xac
   1b218:	ldr	r3, [r9]
   1b21c:	cmp	r2, r3
   1b220:	bne	1b8b0 <__assert_fail@plt+0x83ac>
   1b224:	add	sp, sp, #180	; 0xb4
   1b228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b22c:	mov	r0, fp
   1b230:	mov	r1, #4
   1b234:	bl	3b2a4 <__assert_fail@plt+0x27da0>
   1b238:	add	r5, fp, #2
   1b23c:	cmp	fp, #0
   1b240:	add	r5, sl, r5, lsl #2
   1b244:	mov	r4, r0
   1b248:	beq	1b7dc <__assert_fail@plt+0x82d8>
   1b24c:	add	sl, sl, #4
   1b250:	mov	r0, #0
   1b254:	str	r7, [sp, #68]	; 0x44
   1b258:	mov	lr, r0
   1b25c:	mov	r1, r0
   1b260:	mov	r7, sl
   1b264:	str	r0, [sp, #24]
   1b268:	ldr	r2, [r7, #4]!
   1b26c:	cmp	r2, #0
   1b270:	cmpne	r6, r2
   1b274:	bls	1b7d4 <__assert_fail@plt+0x82d0>
   1b278:	cmp	r6, #0
   1b27c:	beq	1b354 <__assert_fail@plt+0x7e50>
   1b280:	ldr	sl, [r4, r0]
   1b284:	mov	r3, #1
   1b288:	b	1b298 <__assert_fail@plt+0x7d94>
   1b28c:	add	r3, r3, #1
   1b290:	cmp	r6, r3
   1b294:	bcc	1b354 <__assert_fail@plt+0x7e50>
   1b298:	add	ip, r3, sl
   1b29c:	str	ip, [r4, r0]
   1b2a0:	ldr	r2, [r5, r2, lsl #2]
   1b2a4:	cmp	ip, r1
   1b2a8:	addhi	r1, r1, #1
   1b2ac:	add	ip, r3, lr
   1b2b0:	cmp	r2, #0
   1b2b4:	cmpne	r6, r2
   1b2b8:	bhi	1b28c <__assert_fail@plt+0x7d88>
   1b2bc:	ldr	r2, [sp, #24]
   1b2c0:	add	r0, r0, #4
   1b2c4:	add	r2, r2, #1
   1b2c8:	str	r2, [sp, #24]
   1b2cc:	cmp	r2, fp
   1b2d0:	beq	1b81c <__assert_fail@plt+0x8318>
   1b2d4:	mov	lr, ip
   1b2d8:	b	1b268 <__assert_fail@plt+0x7d64>
   1b2dc:	str	fp, [sp, #68]	; 0x44
   1b2e0:	bl	12f34 <elf_getdata@plt>
   1b2e4:	subs	r5, r0, #0
   1b2e8:	beq	1b8b4 <__assert_fail@plt+0x83b0>
   1b2ec:	ldr	r2, [r5, #12]
   1b2f0:	cmp	r2, #15
   1b2f4:	bls	1b344 <__assert_fail@plt+0x7e40>
   1b2f8:	ldr	r4, [r5]
   1b2fc:	lsr	r2, r2, #3
   1b300:	subs	r0, r2, #2
   1b304:	mov	r3, #0
   1b308:	sbc	r1, r3, #0
   1b30c:	ldrd	sl, [r4]
   1b310:	cmp	fp, r1
   1b314:	cmpeq	sl, r0
   1b318:	strd	sl, [sp, #24]
   1b31c:	ldrd	sl, [r4, #8]
   1b320:	bhi	1b344 <__assert_fail@plt+0x7e40>
   1b324:	ldrd	r0, [sp, #24]
   1b328:	subs	r2, r2, r0
   1b32c:	sbc	r3, r3, r1
   1b330:	subs	r2, r2, #2
   1b334:	sbc	r3, r3, #0
   1b338:	cmp	fp, r3
   1b33c:	cmpeq	sl, r2
   1b340:	bls	1b5f8 <__assert_fail@plt+0x80f4>
   1b344:	movw	r1, #63532	; 0xf82c
   1b348:	mov	r0, #0
   1b34c:	movt	r1, #3
   1b350:	b	1b114 <__assert_fail@plt+0x7c10>
   1b354:	mov	r2, #5
   1b358:	movw	r1, #63652	; 0xf8a4
   1b35c:	mov	r0, #0
   1b360:	movt	r1, #3
   1b364:	bl	12d84 <dcgettext@plt>
   1b368:	mov	r5, r0
   1b36c:	mov	r0, r9
   1b370:	bl	133d8 <elf_ndxscn@plt>
   1b374:	mov	r2, r5
   1b378:	mov	r3, r0
   1b37c:	mov	r0, #0
   1b380:	mov	r1, r0
   1b384:	bl	12f70 <error@plt>
   1b388:	mov	r0, r4
   1b38c:	bl	12cf4 <free@plt>
   1b390:	b	1aff0 <__assert_fail@plt+0x7aec>
   1b394:	mov	r2, #5
   1b398:	movw	r1, #53916	; 0xd29c
   1b39c:	mov	r0, #0
   1b3a0:	movt	r1, #3
   1b3a4:	bl	12d84 <dcgettext@plt>
   1b3a8:	mov	r4, r0
   1b3ac:	mov	r0, r9
   1b3b0:	bl	133d8 <elf_ndxscn@plt>
   1b3b4:	mov	r2, r4
   1b3b8:	movw	r1, #53944	; 0xd2b8
   1b3bc:	movt	r1, #3
   1b3c0:	mov	r3, r0
   1b3c4:	mov	r0, #1
   1b3c8:	bl	13204 <__printf_chk@plt>
   1b3cc:	b	1b160 <__assert_fail@plt+0x7c5c>
   1b3d0:	mov	r1, #4
   1b3d4:	ldr	r0, [sp, #24]
   1b3d8:	bl	3b2a4 <__assert_fail@plt+0x27da0>
   1b3dc:	ldr	ip, [sp, #24]
   1b3e0:	ldr	r4, [r4]
   1b3e4:	add	r2, r6, #4
   1b3e8:	add	r3, ip, #4
   1b3ec:	cmp	ip, #0
   1b3f0:	add	r3, r3, r6
   1b3f4:	lsl	r2, r2, #2
   1b3f8:	str	r4, [sp, #72]	; 0x48
   1b3fc:	add	r1, r4, r2
   1b400:	add	r3, r4, r3, lsl #2
   1b404:	str	r2, [sp, #80]	; 0x50
   1b408:	str	r3, [sp, #76]	; 0x4c
   1b40c:	mov	r5, r0
   1b410:	beq	1b824 <__assert_fail@plt+0x8320>
   1b414:	ldrd	r2, [sp, #40]	; 0x28
   1b418:	mov	ip, #0
   1b41c:	str	r6, [sp, #92]	; 0x5c
   1b420:	mov	r4, ip
   1b424:	subs	r2, sl, r2
   1b428:	sbc	r3, fp, r3
   1b42c:	ldr	r6, [sp, #24]
   1b430:	str	r7, [sp, #88]	; 0x58
   1b434:	mov	fp, ip
   1b438:	lsr	sl, r2, #2
   1b43c:	mov	r7, r1
   1b440:	orr	sl, sl, r3, lsl #30
   1b444:	mov	r3, ip
   1b448:	str	ip, [sp, #84]	; 0x54
   1b44c:	ldr	r2, [r7, ip]
   1b450:	cmp	r2, #0
   1b454:	beq	1b4a0 <__assert_fail@plt+0x7f9c>
   1b458:	ldr	r0, [sp, #52]	; 0x34
   1b45c:	ldr	lr, [r5, ip]
   1b460:	rsb	r2, r0, r2
   1b464:	ldr	r1, [sp, #76]	; 0x4c
   1b468:	sub	r0, r2, #-1073741823	; 0xc0000001
   1b46c:	rsb	lr, r3, lr
   1b470:	add	r0, r1, r0, lsl #2
   1b474:	add	r3, r3, #1
   1b478:	add	r1, lr, r3
   1b47c:	str	r1, [r5, ip]
   1b480:	cmp	r4, r1
   1b484:	addcc	r4, r4, #1
   1b488:	cmp	sl, r2
   1b48c:	bls	1b100 <__assert_fail@plt+0x7bfc>
   1b490:	ldr	r1, [r0, #4]!
   1b494:	add	r2, r2, #1
   1b498:	tst	r1, #1
   1b49c:	beq	1b474 <__assert_fail@plt+0x7f70>
   1b4a0:	add	fp, fp, #1
   1b4a4:	add	ip, ip, #4
   1b4a8:	cmp	fp, r6
   1b4ac:	bne	1b44c <__assert_fail@plt+0x7f48>
   1b4b0:	ldr	r7, [sp, #88]	; 0x58
   1b4b4:	ldr	r6, [sp, #92]	; 0x5c
   1b4b8:	str	r3, [sp, #84]	; 0x54
   1b4bc:	ldr	r1, [sp, #72]	; 0x48
   1b4c0:	mov	fp, #0
   1b4c4:	mov	sl, fp
   1b4c8:	add	r0, r1, #12
   1b4cc:	ldr	r1, [r0, #4]!
   1b4d0:	movw	r2, #21845	; 0x5555
   1b4d4:	mov	r3, r2
   1b4d8:	movt	r2, #21845	; 0x5555
   1b4dc:	bfi	r3, r3, #16, #16
   1b4e0:	and	r2, r1, r2
   1b4e4:	and	r1, r3, r1, lsr #1
   1b4e8:	movw	r3, #13107	; 0x3333
   1b4ec:	add	r2, r1, r2
   1b4f0:	movt	r3, #13107	; 0x3333
   1b4f4:	movw	r1, #13107	; 0x3333
   1b4f8:	bfi	r1, r1, #16, #16
   1b4fc:	and	r3, r2, r3
   1b500:	and	r1, r1, r2, lsr #2
   1b504:	add	r1, r1, r3
   1b508:	movw	r3, #3855	; 0xf0f
   1b50c:	mov	r2, r3
   1b510:	movt	r3, #3855	; 0xf0f
   1b514:	bfi	r2, r2, #16, #16
   1b518:	and	r3, r1, r3
   1b51c:	and	r2, r2, r1, lsr #4
   1b520:	add	sl, sl, #1
   1b524:	add	r3, r2, r3
   1b528:	cmp	sl, r6
   1b52c:	bic	r2, r3, #-16777216	; 0xff000000
   1b530:	lsr	r3, r3, #8
   1b534:	bic	r2, r2, #65280	; 0xff00
   1b538:	bic	r3, r3, #65280	; 0xff00
   1b53c:	add	r3, r3, r2
   1b540:	uxth	r2, r3
   1b544:	add	r3, r2, r3, lsr #16
   1b548:	add	fp, fp, r3
   1b54c:	bne	1b4cc <__assert_fail@plt+0x7fc8>
   1b550:	mov	r2, #5
   1b554:	movw	r1, #63728	; 0xf8f0
   1b558:	mov	r0, #0
   1b55c:	movt	r1, #3
   1b560:	bl	12d84 <dcgettext@plt>
   1b564:	lsl	r1, sl, #5
   1b568:	ldr	sl, [sp, #80]	; 0x50
   1b56c:	sub	r3, sl, #16
   1b570:	str	r3, [sp]
   1b574:	mov	r6, r0
   1b578:	mov	r0, #100	; 0x64
   1b57c:	mul	r0, r0, fp
   1b580:	add	r0, r0, #50	; 0x32
   1b584:	bl	3b39c <__assert_fail@plt+0x27e98>
   1b588:	ldr	fp, [sp, #56]	; 0x38
   1b58c:	mov	r2, r6
   1b590:	ldr	r3, [sp, #52]	; 0x34
   1b594:	mov	r1, #1
   1b598:	str	fp, [sp, #8]
   1b59c:	str	r0, [sp, #4]
   1b5a0:	add	r0, sp, #100	; 0x64
   1b5a4:	bl	12fb8 <__asprintf_chk@plt>
   1b5a8:	cmn	r0, #1
   1b5ac:	beq	1b88c <__assert_fail@plt+0x8388>
   1b5b0:	ldr	sl, [sp, #24]
   1b5b4:	mov	r2, r7
   1b5b8:	ldr	ip, [sp, #100]	; 0x64
   1b5bc:	add	r0, r8, #16
   1b5c0:	ldr	r3, [sp, #68]	; 0x44
   1b5c4:	mov	r1, r9
   1b5c8:	str	sl, [sp, #4]
   1b5cc:	ldr	sl, [sp, #84]	; 0x54
   1b5d0:	str	ip, [sp, #16]
   1b5d4:	str	r4, [sp]
   1b5d8:	str	sl, [sp, #8]
   1b5dc:	str	r5, [sp, #12]
   1b5e0:	bl	1ac0c <__assert_fail@plt+0x7708>
   1b5e4:	ldr	r0, [sp, #100]	; 0x64
   1b5e8:	bl	12cf4 <free@plt>
   1b5ec:	mov	r0, r5
   1b5f0:	bl	12cf4 <free@plt>
   1b5f4:	b	1aff0 <__assert_fail@plt+0x7aec>
   1b5f8:	add	r3, r0, #2
   1b5fc:	mov	r1, #4
   1b600:	ldr	r0, [sp, #24]
   1b604:	add	r6, r4, r3, lsl #3
   1b608:	bl	3b2a4 <__assert_fail@plt+0x27da0>
   1b60c:	ldrd	r2, [sp, #24]
   1b610:	orrs	r3, r2, r3
   1b614:	str	r0, [sp, #52]	; 0x34
   1b618:	beq	1b840 <__assert_fail@plt+0x833c>
   1b61c:	ldr	ip, [sp, #52]	; 0x34
   1b620:	mov	r5, #0
   1b624:	str	r8, [sp, #84]	; 0x54
   1b628:	mov	lr, r5
   1b62c:	mov	r8, r6
   1b630:	add	r4, r4, #8
   1b634:	mov	r0, #0
   1b638:	mov	r1, #0
   1b63c:	str	r4, [sp, #72]	; 0x48
   1b640:	strd	r0, [sp, #56]	; 0x38
   1b644:	str	ip, [sp, #76]	; 0x4c
   1b648:	str	r9, [sp, #80]	; 0x50
   1b64c:	str	r7, [sp, #88]	; 0x58
   1b650:	ldr	r0, [sp, #72]	; 0x48
   1b654:	ldrd	r2, [r0, #8]!
   1b658:	orrs	r1, r2, r3
   1b65c:	str	r0, [sp, #72]	; 0x48
   1b660:	moveq	r1, #0
   1b664:	movne	r1, #1
   1b668:	cmp	fp, r3
   1b66c:	cmpeq	sl, r2
   1b670:	movls	r1, #0
   1b674:	andhi	r1, r1, #1
   1b678:	cmp	r1, #0
   1b67c:	beq	1b708 <__assert_fail@plt+0x8204>
   1b680:	orrs	r9, sl, fp
   1b684:	beq	1b834 <__assert_fail@plt+0x8330>
   1b688:	ldr	ip, [sp, #56]	; 0x38
   1b68c:	mov	r0, #1
   1b690:	mov	r1, #0
   1b694:	lsl	r9, ip, #2
   1b698:	ldr	ip, [sp, #52]	; 0x34
   1b69c:	str	r9, [sp, #92]	; 0x5c
   1b6a0:	ldr	r6, [ip, r9]
   1b6a4:	b	1b6bc <__assert_fail@plt+0x81b8>
   1b6a8:	adds	r0, r0, #1
   1b6ac:	adc	r1, r1, #0
   1b6b0:	cmp	fp, r1
   1b6b4:	cmpeq	sl, r0
   1b6b8:	bcc	1b784 <__assert_fail@plt+0x8280>
   1b6bc:	lsl	r2, r2, #3
   1b6c0:	add	ip, r6, r0
   1b6c4:	cmp	lr, ip
   1b6c8:	add	r7, r5, r0
   1b6cc:	ldrd	r2, [r2, r8]
   1b6d0:	addcc	lr, lr, #1
   1b6d4:	cmp	fp, r3
   1b6d8:	cmpeq	sl, r2
   1b6dc:	movls	r4, #0
   1b6e0:	movhi	r4, #1
   1b6e4:	orrs	r9, r2, r3
   1b6e8:	moveq	r4, #0
   1b6ec:	andne	r4, r4, #1
   1b6f0:	cmp	r4, #0
   1b6f4:	bne	1b6a8 <__assert_fail@plt+0x81a4>
   1b6f8:	ldr	r9, [sp, #92]	; 0x5c
   1b6fc:	mov	r5, r7
   1b700:	ldr	r0, [sp, #52]	; 0x34
   1b704:	str	ip, [r0, r9]
   1b708:	ldrd	r2, [sp, #56]	; 0x38
   1b70c:	adds	r2, r2, #1
   1b710:	adc	r3, r3, #0
   1b714:	strd	r2, [sp, #56]	; 0x38
   1b718:	ldr	r3, [sp, #76]	; 0x4c
   1b71c:	ldrd	r0, [sp, #56]	; 0x38
   1b720:	add	r3, r3, #4
   1b724:	str	r3, [sp, #76]	; 0x4c
   1b728:	ldrd	r2, [sp, #24]
   1b72c:	cmp	r1, r3
   1b730:	cmpeq	r0, r2
   1b734:	bne	1b650 <__assert_fail@plt+0x814c>
   1b738:	ldr	r9, [sp, #80]	; 0x50
   1b73c:	ldr	r7, [sp, #88]	; 0x58
   1b740:	ldr	r8, [sp, #84]	; 0x54
   1b744:	ldr	r3, [sp, #24]
   1b748:	add	r0, r8, #16
   1b74c:	ldr	sl, [sp, #52]	; 0x34
   1b750:	mov	r2, r7
   1b754:	str	lr, [sp]
   1b758:	mov	r1, #0
   1b75c:	str	r3, [sp, #4]
   1b760:	str	r1, [sp, #16]
   1b764:	mov	r1, r9
   1b768:	ldr	r3, [sp, #68]	; 0x44
   1b76c:	str	r5, [sp, #8]
   1b770:	str	sl, [sp, #12]
   1b774:	bl	1ac0c <__assert_fail@plt+0x7708>
   1b778:	ldr	r0, [sp, #52]	; 0x34
   1b77c:	bl	12cf4 <free@plt>
   1b780:	b	1aff0 <__assert_fail@plt+0x7aec>
   1b784:	ldr	sl, [sp, #76]	; 0x4c
   1b788:	ldr	r9, [sp, #80]	; 0x50
   1b78c:	ldr	r8, [sp, #84]	; 0x54
   1b790:	str	ip, [sl]
   1b794:	mov	r2, #5
   1b798:	movw	r1, #63572	; 0xf854
   1b79c:	mov	r0, #0
   1b7a0:	movt	r1, #3
   1b7a4:	bl	12d84 <dcgettext@plt>
   1b7a8:	mov	r4, r0
   1b7ac:	mov	r0, r9
   1b7b0:	bl	133d8 <elf_ndxscn@plt>
   1b7b4:	mov	r2, r4
   1b7b8:	mov	r3, r0
   1b7bc:	mov	r0, #0
   1b7c0:	mov	r1, r0
   1b7c4:	bl	12f70 <error@plt>
   1b7c8:	ldr	r0, [sp, #52]	; 0x34
   1b7cc:	bl	12cf4 <free@plt>
   1b7d0:	b	1aff0 <__assert_fail@plt+0x7aec>
   1b7d4:	mov	ip, lr
   1b7d8:	b	1b2bc <__assert_fail@plt+0x7db8>
   1b7dc:	mov	ip, fp
   1b7e0:	mov	r1, fp
   1b7e4:	str	r1, [sp]
   1b7e8:	add	r0, r8, #16
   1b7ec:	mov	r2, r7
   1b7f0:	str	fp, [sp, #4]
   1b7f4:	ldr	r3, [sp, #52]	; 0x34
   1b7f8:	mov	r1, #0
   1b7fc:	str	ip, [sp, #8]
   1b800:	str	r1, [sp, #16]
   1b804:	mov	r1, r9
   1b808:	str	r4, [sp, #12]
   1b80c:	bl	1ac0c <__assert_fail@plt+0x7708>
   1b810:	mov	r0, r4
   1b814:	bl	12cf4 <free@plt>
   1b818:	b	1aff0 <__assert_fail@plt+0x7aec>
   1b81c:	ldr	r7, [sp, #68]	; 0x44
   1b820:	b	1b7e4 <__assert_fail@plt+0x82e0>
   1b824:	ldr	ip, [sp, #24]
   1b828:	str	ip, [sp, #84]	; 0x54
   1b82c:	mov	r4, ip
   1b830:	b	1b4bc <__assert_fail@plt+0x7fb8>
   1b834:	ldr	r9, [sp, #80]	; 0x50
   1b838:	ldr	r8, [sp, #84]	; 0x54
   1b83c:	b	1b794 <__assert_fail@plt+0x8290>
   1b840:	mov	r5, #0
   1b844:	mov	lr, r5
   1b848:	b	1b744 <__assert_fail@plt+0x8240>
   1b84c:	mov	r2, #5
   1b850:	movw	r1, #53964	; 0xd2cc
   1b854:	movt	r1, #3
   1b858:	bl	12d84 <dcgettext@plt>
   1b85c:	mov	r5, r0
   1b860:	mov	r0, r9
   1b864:	bl	133d8 <elf_ndxscn@plt>
   1b868:	mov	r4, r0
   1b86c:	mvn	r0, #0
   1b870:	bl	130a8 <elf_errmsg@plt>
   1b874:	mov	r2, r5
   1b878:	mov	r3, r4
   1b87c:	mov	r1, r7
   1b880:	str	r0, [sp]
   1b884:	mov	r0, #1
   1b888:	bl	12f70 <error@plt>
   1b88c:	movw	r1, #63808	; 0xf940
   1b890:	movt	r1, #3
   1b894:	mov	r0, #0
   1b898:	mov	r2, #5
   1b89c:	bl	12d84 <dcgettext@plt>
   1b8a0:	mov	r1, #0
   1b8a4:	mov	r2, r0
   1b8a8:	mov	r0, #1
   1b8ac:	bl	12f70 <error@plt>
   1b8b0:	bl	12dc0 <__stack_chk_fail@plt>
   1b8b4:	mov	r2, r4
   1b8b8:	movw	r1, #63496	; 0xf808
   1b8bc:	movt	r1, #3
   1b8c0:	bl	12d84 <dcgettext@plt>
   1b8c4:	mov	r6, r0
   1b8c8:	mov	r0, r9
   1b8cc:	bl	133d8 <elf_ndxscn@plt>
   1b8d0:	mov	r4, r0
   1b8d4:	mvn	r0, #0
   1b8d8:	bl	130a8 <elf_errmsg@plt>
   1b8dc:	mov	r2, r6
   1b8e0:	mov	r3, r4
   1b8e4:	mov	r1, r5
   1b8e8:	str	r0, [sp]
   1b8ec:	mov	r0, r5
   1b8f0:	bl	12f70 <error@plt>
   1b8f4:	b	1aff0 <__assert_fail@plt+0x7aec>
   1b8f8:	mov	r2, #5
   1b8fc:	movw	r1, #63496	; 0xf808
   1b900:	movt	r1, #3
   1b904:	bl	12d84 <dcgettext@plt>
   1b908:	mov	r6, r0
   1b90c:	mov	r0, r9
   1b910:	bl	133d8 <elf_ndxscn@plt>
   1b914:	mov	r5, r0
   1b918:	mvn	r0, #0
   1b91c:	bl	130a8 <elf_errmsg@plt>
   1b920:	mov	r2, r6
   1b924:	mov	r3, r5
   1b928:	mov	r1, r4
   1b92c:	str	r0, [sp]
   1b930:	mov	r0, r4
   1b934:	bl	12f70 <error@plt>
   1b938:	b	1aff0 <__assert_fail@plt+0x7aec>
   1b93c:	movw	r1, #53868	; 0xd26c
   1b940:	mov	r0, #0
   1b944:	movt	r1, #3
   1b948:	b	1b898 <__assert_fail@plt+0x8394>
   1b94c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b950:	add	fp, sp, #32
   1b954:	sub	sp, sp, #220	; 0xdc
   1b958:	movw	r6, #37688	; 0x9338
   1b95c:	movt	r6, #5
   1b960:	mov	r7, r0
   1b964:	str	r1, [fp, #-200]	; 0xffffff38
   1b968:	ldr	r3, [r6]
   1b96c:	ldr	r0, [r0]
   1b970:	str	r2, [fp, #-188]	; 0xffffff44
   1b974:	str	r3, [fp, #-40]	; 0xffffffd8
   1b978:	str	r6, [fp, #-196]	; 0xffffff3c
   1b97c:	bl	12e38 <gelf_getclass@plt>
   1b980:	mov	r1, #0
   1b984:	str	r0, [fp, #-212]	; 0xffffff2c
   1b988:	ldr	r0, [fp, #-200]	; 0xffffff38
   1b98c:	bl	12f34 <elf_getdata@plt>
   1b990:	cmp	r0, #0
   1b994:	str	r0, [fp, #-216]	; 0xffffff28
   1b998:	beq	1ba2c <__assert_fail@plt+0x8528>
   1b99c:	ldr	r0, [r7]
   1b9a0:	sub	r1, fp, #148	; 0x94
   1b9a4:	bl	13498 <elf_getshdrstrndx@plt>
   1b9a8:	cmp	r0, #0
   1b9ac:	blt	1c1a4 <__assert_fail@plt+0x8ca0>
   1b9b0:	mov	r4, #0
   1b9b4:	str	r4, [fp, #-176]	; 0xffffff50
   1b9b8:	mov	r5, r4
   1b9bc:	str	r4, [fp, #-164]	; 0xffffff5c
   1b9c0:	mov	r1, r4
   1b9c4:	ldr	r0, [r7]
   1b9c8:	bl	13300 <elf_nextscn@plt>
   1b9cc:	subs	r4, r0, #0
   1b9d0:	beq	1ba48 <__assert_fail@plt+0x8544>
   1b9d4:	sub	r1, fp, #108	; 0x6c
   1b9d8:	bl	12cc4 <gelf_getshdr@plt>
   1b9dc:	cmp	r0, #0
   1b9e0:	beq	1b9c0 <__assert_fail@plt+0x84bc>
   1b9e4:	ldr	r3, [r0, #4]
   1b9e8:	cmn	r3, #-1879048189	; 0x90000003
   1b9ec:	streq	r4, [fp, #-164]	; 0xffffff5c
   1b9f0:	beq	1b9c0 <__assert_fail@plt+0x84bc>
   1b9f4:	cmn	r3, #-1879048190	; 0x90000002
   1b9f8:	moveq	r5, r4
   1b9fc:	b	1b9c0 <__assert_fail@plt+0x84bc>
   1ba00:	ldr	r0, [r6]
   1ba04:	ldr	r3, [r0, #20]
   1ba08:	ldr	r2, [r0, #24]
   1ba0c:	cmp	r3, r2
   1ba10:	addcc	r1, r3, #1
   1ba14:	strcc	r1, [r0, #20]
   1ba18:	movcc	r2, #10
   1ba1c:	strbcc	r2, [r3]
   1ba20:	bcc	1ba2c <__assert_fail@plt+0x8528>
   1ba24:	mov	r1, #10
   1ba28:	bl	132dc <__overflow@plt>
   1ba2c:	ldr	r6, [fp, #-196]	; 0xffffff3c
   1ba30:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1ba34:	ldr	r3, [r6]
   1ba38:	cmp	r2, r3
   1ba3c:	bne	1c1a0 <__assert_fail@plt+0x8c9c>
   1ba40:	sub	sp, fp, #32
   1ba44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba48:	ldr	ip, [fp, #-164]	; 0xffffff5c
   1ba4c:	str	r5, [fp, #-176]	; 0xffffff50
   1ba50:	adds	ip, ip, #0
   1ba54:	movne	ip, #1
   1ba58:	adds	r3, r5, #0
   1ba5c:	str	ip, [fp, #-180]	; 0xffffff4c
   1ba60:	movne	r3, #1
   1ba64:	str	r3, [fp, #-204]	; 0xffffff34
   1ba68:	orrs	r3, r3, ip
   1ba6c:	beq	1c150 <__assert_fail@plt+0x8c4c>
   1ba70:	cmp	ip, #0
   1ba74:	beq	1bb04 <__assert_fail@plt+0x8600>
   1ba78:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1ba7c:	mov	r1, r4
   1ba80:	bl	12f34 <elf_getdata@plt>
   1ba84:	subs	r6, r0, #0
   1ba88:	beq	1ba2c <__assert_fail@plt+0x8528>
   1ba8c:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1ba90:	sub	r1, fp, #108	; 0x6c
   1ba94:	bl	12cc4 <gelf_getshdr@plt>
   1ba98:	subs	sl, r0, #0
   1ba9c:	beq	1ba2c <__assert_fail@plt+0x8528>
   1baa0:	ldr	r3, [sl, #44]	; 0x2c
   1baa4:	cmp	r3, #0
   1baa8:	beq	1bb04 <__assert_fail@plt+0x8600>
   1baac:	mov	r5, r4
   1bab0:	sub	r9, fp, #128	; 0x80
   1bab4:	mov	r8, r4
   1bab8:	b	1bad0 <__assert_fail@plt+0x85cc>
   1babc:	ldr	r2, [sl, #44]	; 0x2c
   1bac0:	add	r5, r5, #1
   1bac4:	add	r8, r8, r3
   1bac8:	cmp	r5, r2
   1bacc:	bcs	1bb04 <__assert_fail@plt+0x8600>
   1bad0:	mov	r0, r6
   1bad4:	mov	r1, r8
   1bad8:	mov	r2, r9
   1badc:	bl	1327c <gelf_getverdef@plt>
   1bae0:	cmp	r0, #0
   1bae4:	beq	1bb04 <__assert_fail@plt+0x8600>
   1bae8:	ldrh	r2, [r0, #4]
   1baec:	ldr	r3, [r0, #16]
   1baf0:	ubfx	r2, r2, #0, #15
   1baf4:	cmp	r4, r2
   1baf8:	movcc	r4, r2
   1bafc:	cmp	r3, #0
   1bb00:	bne	1babc <__assert_fail@plt+0x85b8>
   1bb04:	ldr	r6, [fp, #-204]	; 0xffffff34
   1bb08:	cmp	r6, #0
   1bb0c:	beq	1bc00 <__assert_fail@plt+0x86fc>
   1bb10:	ldr	r0, [fp, #-176]	; 0xffffff50
   1bb14:	mov	r1, #0
   1bb18:	bl	12f34 <elf_getdata@plt>
   1bb1c:	subs	r5, r0, #0
   1bb20:	beq	1ba2c <__assert_fail@plt+0x8528>
   1bb24:	ldr	r0, [fp, #-176]	; 0xffffff50
   1bb28:	sub	r1, fp, #108	; 0x6c
   1bb2c:	bl	12cc4 <gelf_getshdr@plt>
   1bb30:	cmp	r0, #0
   1bb34:	str	r0, [fp, #-156]	; 0xffffff64
   1bb38:	beq	1ba2c <__assert_fail@plt+0x8528>
   1bb3c:	ldr	r3, [r0, #44]	; 0x2c
   1bb40:	cmp	r3, #0
   1bb44:	beq	1bc00 <__assert_fail@plt+0x86fc>
   1bb48:	mov	r3, #0
   1bb4c:	str	r7, [fp, #-168]	; 0xffffff58
   1bb50:	mov	r8, r3
   1bb54:	mov	r7, r3
   1bb58:	sub	ip, fp, #144	; 0x90
   1bb5c:	str	ip, [fp, #-184]	; 0xffffff48
   1bb60:	mov	r0, r5
   1bb64:	mov	r1, r8
   1bb68:	ldr	r2, [fp, #-184]	; 0xffffff48
   1bb6c:	bl	12d90 <gelf_getverneed@plt>
   1bb70:	subs	r6, r0, #0
   1bb74:	beq	1bbfc <__assert_fail@plt+0x86f8>
   1bb78:	ldrh	r3, [r6, #2]
   1bb7c:	ldr	ip, [r6, #8]
   1bb80:	sub	sl, r3, #1
   1bb84:	cmn	sl, #1
   1bb88:	add	r9, r8, ip
   1bb8c:	bne	1bba4 <__assert_fail@plt+0x86a0>
   1bb90:	b	1bbd8 <__assert_fail@plt+0x86d4>
   1bb94:	sub	sl, sl, #1
   1bb98:	add	r9, r9, r3
   1bb9c:	cmn	sl, #1
   1bba0:	beq	1bbd8 <__assert_fail@plt+0x86d4>
   1bba4:	mov	r0, r5
   1bba8:	mov	r1, r9
   1bbac:	sub	r2, fp, #128	; 0x80
   1bbb0:	bl	12ca0 <gelf_getvernaux@plt>
   1bbb4:	cmp	r0, #0
   1bbb8:	beq	1bbd8 <__assert_fail@plt+0x86d4>
   1bbbc:	ldrh	r2, [r0, #6]
   1bbc0:	ldr	r3, [r0, #12]
   1bbc4:	ubfx	r2, r2, #0, #15
   1bbc8:	cmp	r4, r2
   1bbcc:	movcc	r4, r2
   1bbd0:	cmp	r3, #0
   1bbd4:	bne	1bb94 <__assert_fail@plt+0x8690>
   1bbd8:	ldr	r3, [r6, #12]
   1bbdc:	cmp	r3, #0
   1bbe0:	beq	1bbfc <__assert_fail@plt+0x86f8>
   1bbe4:	ldr	r6, [fp, #-156]	; 0xffffff64
   1bbe8:	add	r7, r7, #1
   1bbec:	add	r8, r8, r3
   1bbf0:	ldr	r2, [r6, #44]	; 0x2c
   1bbf4:	cmp	r7, r2
   1bbf8:	bcc	1bb60 <__assert_fail@plt+0x865c>
   1bbfc:	ldr	r7, [fp, #-168]	; 0xffffff58
   1bc00:	add	r4, r4, #1
   1bc04:	str	r4, [fp, #-192]	; 0xffffff40
   1bc08:	mov	r1, #0
   1bc0c:	lsl	r4, r4, #2
   1bc10:	add	r5, r4, #14
   1bc14:	bic	r5, r5, #7
   1bc18:	mov	r2, r4
   1bc1c:	sub	sp, sp, r5
   1bc20:	add	ip, sp, #32
   1bc24:	str	ip, [fp, #-168]	; 0xffffff58
   1bc28:	mov	r0, ip
   1bc2c:	bl	13198 <memset@plt>
   1bc30:	sub	sp, sp, r5
   1bc34:	add	r6, sp, #32
   1bc38:	mov	r2, r4
   1bc3c:	mov	r1, #0
   1bc40:	str	r6, [fp, #-172]	; 0xffffff54
   1bc44:	mov	r0, r6
   1bc48:	bl	13198 <memset@plt>
   1bc4c:	ldr	ip, [fp, #-180]	; 0xffffff4c
   1bc50:	cmp	ip, #0
   1bc54:	subeq	r3, fp, #108	; 0x6c
   1bc58:	streq	r3, [fp, #-208]	; 0xffffff30
   1bc5c:	beq	1bd38 <__assert_fail@plt+0x8834>
   1bc60:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1bc64:	mov	r1, #0
   1bc68:	bl	12f34 <elf_getdata@plt>
   1bc6c:	subs	r8, r0, #0
   1bc70:	beq	1ba2c <__assert_fail@plt+0x8528>
   1bc74:	sub	r6, fp, #108	; 0x6c
   1bc78:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1bc7c:	str	r6, [fp, #-208]	; 0xffffff30
   1bc80:	mov	r1, r6
   1bc84:	bl	12cc4 <gelf_getshdr@plt>
   1bc88:	subs	r6, r0, #0
   1bc8c:	beq	1ba2c <__assert_fail@plt+0x8528>
   1bc90:	ldr	r3, [r6, #44]	; 0x2c
   1bc94:	cmp	r3, #0
   1bc98:	beq	1bd38 <__assert_fail@plt+0x8834>
   1bc9c:	mov	r5, #0
   1bca0:	sub	r9, fp, #128	; 0x80
   1bca4:	mov	r4, r5
   1bca8:	str	r9, [fp, #-156]	; 0xffffff64
   1bcac:	b	1bcc4 <__assert_fail@plt+0x87c0>
   1bcb0:	ldr	r2, [r6, #44]	; 0x2c
   1bcb4:	add	r5, r5, #1
   1bcb8:	add	r4, r4, r3
   1bcbc:	cmp	r5, r2
   1bcc0:	bcs	1bd38 <__assert_fail@plt+0x8834>
   1bcc4:	mov	r0, r8
   1bcc8:	mov	r1, r4
   1bccc:	ldr	r2, [fp, #-156]	; 0xffffff64
   1bcd0:	bl	1327c <gelf_getverdef@plt>
   1bcd4:	subs	r9, r0, #0
   1bcd8:	beq	1bd38 <__assert_fail@plt+0x8834>
   1bcdc:	ldr	r1, [r9, #12]
   1bce0:	mov	r0, r8
   1bce4:	sub	r2, fp, #144	; 0x90
   1bce8:	add	r1, r4, r1
   1bcec:	bl	130d8 <gelf_getverdaux@plt>
   1bcf0:	cmp	r0, #0
   1bcf4:	beq	1bd38 <__assert_fail@plt+0x8834>
   1bcf8:	ldrh	ip, [r9, #4]
   1bcfc:	ldr	r2, [r0]
   1bd00:	ldr	r1, [r6, #40]	; 0x28
   1bd04:	ubfx	sl, ip, #0, #15
   1bd08:	ldr	r0, [r7]
   1bd0c:	bl	12e44 <elf_strptr@plt>
   1bd10:	ldrh	r2, [r9, #4]
   1bd14:	ldr	ip, [fp, #-172]	; 0xffffff54
   1bd18:	mov	r1, #0
   1bd1c:	ubfx	r2, r2, #0, #15
   1bd20:	ldr	r3, [r9, #16]
   1bd24:	str	r1, [ip, r2, lsl #2]
   1bd28:	cmp	r3, #0
   1bd2c:	ldr	ip, [fp, #-168]	; 0xffffff58
   1bd30:	str	r0, [ip, sl, lsl #2]
   1bd34:	bne	1bcb0 <__assert_fail@plt+0x87ac>
   1bd38:	ldr	r3, [fp, #-204]	; 0xffffff34
   1bd3c:	cmp	r3, #0
   1bd40:	beq	1be80 <__assert_fail@plt+0x897c>
   1bd44:	mov	r1, #0
   1bd48:	ldr	r0, [fp, #-176]	; 0xffffff50
   1bd4c:	bl	12f34 <elf_getdata@plt>
   1bd50:	ldr	r1, [fp, #-208]	; 0xffffff30
   1bd54:	str	r0, [fp, #-164]	; 0xffffff5c
   1bd58:	ldr	r0, [fp, #-176]	; 0xffffff50
   1bd5c:	bl	12cc4 <gelf_getshdr@plt>
   1bd60:	ldr	r6, [fp, #-164]	; 0xffffff5c
   1bd64:	cmp	r6, #0
   1bd68:	cmpne	r0, #0
   1bd6c:	mov	r8, r0
   1bd70:	movne	r3, #0
   1bd74:	moveq	r3, #1
   1bd78:	beq	1ba2c <__assert_fail@plt+0x8528>
   1bd7c:	ldr	r2, [r0, #44]	; 0x2c
   1bd80:	cmp	r2, #0
   1bd84:	beq	1be80 <__assert_fail@plt+0x897c>
   1bd88:	sub	ip, fp, #144	; 0x90
   1bd8c:	str	r3, [fp, #-180]	; 0xffffff4c
   1bd90:	str	ip, [fp, #-184]	; 0xffffff48
   1bd94:	str	r3, [fp, #-176]	; 0xffffff50
   1bd98:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1bd9c:	ldr	r1, [fp, #-176]	; 0xffffff50
   1bda0:	ldr	r2, [fp, #-184]	; 0xffffff48
   1bda4:	bl	12d90 <gelf_getverneed@plt>
   1bda8:	cmp	r0, #0
   1bdac:	str	r0, [fp, #-156]	; 0xffffff64
   1bdb0:	beq	1be80 <__assert_fail@plt+0x897c>
   1bdb4:	ldrh	r5, [r0, #2]
   1bdb8:	ldr	r6, [r0, #8]
   1bdbc:	sub	r5, r5, #1
   1bdc0:	ldr	r3, [fp, #-176]	; 0xffffff50
   1bdc4:	cmn	r5, #1
   1bdc8:	add	r6, r3, r6
   1bdcc:	bne	1bde4 <__assert_fail@plt+0x88e0>
   1bdd0:	b	1be4c <__assert_fail@plt+0x8948>
   1bdd4:	sub	r5, r5, #1
   1bdd8:	add	r6, r6, r2
   1bddc:	cmn	r5, #1
   1bde0:	beq	1be4c <__assert_fail@plt+0x8948>
   1bde4:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1bde8:	mov	r1, r6
   1bdec:	sub	r2, fp, #128	; 0x80
   1bdf0:	bl	12ca0 <gelf_getvernaux@plt>
   1bdf4:	subs	r4, r0, #0
   1bdf8:	beq	1be4c <__assert_fail@plt+0x8948>
   1bdfc:	ldrh	ip, [r4, #6]
   1be00:	ldr	r1, [r8, #40]	; 0x28
   1be04:	ldr	r2, [r4, #8]
   1be08:	ubfx	r9, ip, #0, #15
   1be0c:	ldr	r0, [r7]
   1be10:	bl	12e44 <elf_strptr@plt>
   1be14:	ldr	ip, [fp, #-156]	; 0xffffff64
   1be18:	ldrh	r3, [r4, #6]
   1be1c:	ldr	r1, [r8, #40]	; 0x28
   1be20:	ldr	r2, [ip, #4]
   1be24:	ubfx	sl, r3, #0, #15
   1be28:	ldr	ip, [fp, #-168]	; 0xffffff58
   1be2c:	str	r0, [ip, r9, lsl #2]
   1be30:	ldr	r0, [r7]
   1be34:	bl	12e44 <elf_strptr@plt>
   1be38:	ldr	r2, [r4, #12]
   1be3c:	ldr	ip, [fp, #-172]	; 0xffffff54
   1be40:	cmp	r2, #0
   1be44:	str	r0, [ip, sl, lsl #2]
   1be48:	bne	1bdd4 <__assert_fail@plt+0x88d0>
   1be4c:	ldr	r6, [fp, #-156]	; 0xffffff64
   1be50:	ldr	r3, [r6, #12]
   1be54:	cmp	r3, #0
   1be58:	beq	1be80 <__assert_fail@plt+0x897c>
   1be5c:	ldr	ip, [fp, #-180]	; 0xffffff4c
   1be60:	ldr	r2, [r8, #44]	; 0x2c
   1be64:	add	ip, ip, #1
   1be68:	ldr	r6, [fp, #-176]	; 0xffffff50
   1be6c:	cmp	ip, r2
   1be70:	str	ip, [fp, #-180]	; 0xffffff4c
   1be74:	add	r6, r6, r3
   1be78:	str	r6, [fp, #-176]	; 0xffffff50
   1be7c:	bcc	1bd98 <__assert_fail@plt+0x8894>
   1be80:	ldr	ip, [fp, #-188]	; 0xffffff44
   1be84:	ldr	r0, [r7]
   1be88:	ldr	r1, [ip, #40]	; 0x28
   1be8c:	bl	133e4 <elf_getscn@plt>
   1be90:	ldr	r1, [fp, #-208]	; 0xffffff30
   1be94:	bl	12cc4 <gelf_getshdr@plt>
   1be98:	mov	r2, #1
   1be9c:	mov	r3, r2
   1bea0:	mov	r1, #4
   1bea4:	mov	r5, r0
   1bea8:	ldr	r0, [r7]
   1beac:	bl	12f64 <gelf_fsize@plt>
   1beb0:	cmp	r5, #0
   1beb4:	mov	r4, r0
   1beb8:	beq	1c16c <__assert_fail@plt+0x8c68>
   1bebc:	ldr	ip, [fp, #-212]	; 0xffffff2c
   1bec0:	mov	r2, r4
   1bec4:	ldr	r6, [fp, #-188]	; 0xffffff44
   1bec8:	mov	r3, #0
   1becc:	cmp	ip, #1
   1bed0:	ldrd	r0, [r6, #32]
   1bed4:	movne	sl, #18
   1bed8:	moveq	sl, #10
   1bedc:	bl	3bba0 <__assert_fail@plt+0x2869c>
   1bee0:	mov	r2, #5
   1bee4:	movw	r1, #63828	; 0xf954
   1bee8:	str	r2, [sp]
   1beec:	movt	r1, #3
   1bef0:	movw	r2, #63944	; 0xf9c8
   1bef4:	movt	r2, #3
   1bef8:	mov	r3, r0
   1befc:	mov	r0, #0
   1bf00:	bl	134a4 <dcngettext@plt>
   1bf04:	mov	r9, r0
   1bf08:	ldr	r0, [fp, #-200]	; 0xffffff38
   1bf0c:	bl	133d8 <elf_ndxscn@plt>
   1bf10:	ldr	r2, [r6]
   1bf14:	ldr	r1, [fp, #-148]	; 0xffffff6c
   1bf18:	mov	r8, r0
   1bf1c:	ldr	r0, [r7]
   1bf20:	bl	12e44 <elf_strptr@plt>
   1bf24:	mov	r2, r4
   1bf28:	mov	r3, #0
   1bf2c:	str	r0, [fp, #-176]	; 0xffffff50
   1bf30:	ldrd	r0, [r6, #32]
   1bf34:	bl	3bba0 <__assert_fail@plt+0x2869c>
   1bf38:	ldr	ip, [fp, #-188]	; 0xffffff44
   1bf3c:	ldr	r2, [r5]
   1bf40:	ldr	r1, [fp, #-148]	; 0xffffff6c
   1bf44:	ldr	r5, [ip, #40]	; 0x28
   1bf48:	mov	r3, r0
   1bf4c:	ldr	r0, [r7]
   1bf50:	ldr	r7, [fp, #-188]	; 0xffffff44
   1bf54:	ldrd	r6, [r7, #16]
   1bf58:	strd	r6, [fp, #-156]	; 0xffffff64
   1bf5c:	ldr	r7, [fp, #-188]	; 0xffffff44
   1bf60:	ldrd	r6, [r7, #24]
   1bf64:	str	r3, [fp, #-220]	; 0xffffff24
   1bf68:	strd	r6, [fp, #-164]	; 0xffffff5c
   1bf6c:	bl	12e44 <elf_strptr@plt>
   1bf70:	ldrd	r6, [fp, #-156]	; 0xffffff64
   1bf74:	mov	r1, r9
   1bf78:	ldr	r3, [fp, #-220]	; 0xffffff24
   1bf7c:	mov	r2, r8
   1bf80:	str	sl, [sp, #4]
   1bf84:	strd	r6, [sp, #8]
   1bf88:	ldrd	r6, [fp, #-164]	; 0xffffff5c
   1bf8c:	str	r3, [sp]
   1bf90:	str	r5, [sp, #24]
   1bf94:	strd	r6, [sp, #16]
   1bf98:	movw	r6, #37704	; 0x9348
   1bf9c:	ldr	r3, [fp, #-176]	; 0xffffff50
   1bfa0:	str	r0, [sp, #28]
   1bfa4:	mov	r0, #1
   1bfa8:	bl	13204 <__printf_chk@plt>
   1bfac:	ldr	r7, [fp, #-188]	; 0xffffff44
   1bfb0:	mov	r2, r4
   1bfb4:	mov	r3, #0
   1bfb8:	ldrd	r0, [r7, #32]
   1bfbc:	bl	3bba0 <__assert_fail@plt+0x2869c>
   1bfc0:	orrs	ip, r0, r1
   1bfc4:	movteq	r6, #5
   1bfc8:	beq	1ba00 <__assert_fail@plt+0x84fc>
   1bfcc:	sub	r9, fp, #128	; 0x80
   1bfd0:	movt	r6, #5
   1bfd4:	mov	r5, #0
   1bfd8:	ldr	r7, [fp, #-216]	; 0xffffff28
   1bfdc:	ldr	r8, [fp, #-188]	; 0xffffff44
   1bfe0:	b	1c030 <__assert_fail@plt+0x8b2c>
   1bfe4:	cmp	r0, #1
   1bfe8:	bne	1c078 <__assert_fail@plt+0x8b74>
   1bfec:	movw	r1, #64108	; 0xfa6c
   1bff0:	mov	r0, #0
   1bff4:	movt	r1, #3
   1bff8:	mov	r2, #5
   1bffc:	bl	12d84 <dcgettext@plt>
   1c000:	ldr	r1, [r6]
   1c004:	bl	12c58 <fputs_unlocked@plt>
   1c008:	mov	r2, r4
   1c00c:	mov	r3, #0
   1c010:	ldrd	r0, [r8, #32]
   1c014:	add	r5, r5, #1
   1c018:	bl	3bba0 <__assert_fail@plt+0x2869c>
   1c01c:	mov	r3, #0
   1c020:	mov	r2, r5
   1c024:	cmp	r3, r1
   1c028:	cmpeq	r2, r0
   1c02c:	bcs	1ba00 <__assert_fail@plt+0x84fc>
   1c030:	tst	r5, #1
   1c034:	beq	1c12c <__assert_fail@plt+0x8c28>
   1c038:	mov	r0, r7
   1c03c:	mov	r1, r5
   1c040:	mov	r2, r9
   1c044:	bl	12d78 <gelf_getversym@plt>
   1c048:	subs	sl, r0, #0
   1c04c:	beq	1ba00 <__assert_fail@plt+0x84fc>
   1c050:	ldrh	r0, [sl]
   1c054:	cmp	r0, #0
   1c058:	bne	1bfe4 <__assert_fail@plt+0x8ae0>
   1c05c:	mov	r2, #5
   1c060:	movw	r1, #64072	; 0xfa48
   1c064:	movt	r1, #3
   1c068:	bl	12d84 <dcgettext@plt>
   1c06c:	ldr	r1, [r6]
   1c070:	bl	12c58 <fputs_unlocked@plt>
   1c074:	b	1c008 <__assert_fail@plt+0x8b04>
   1c078:	tst	r0, #32768	; 0x8000
   1c07c:	ldr	ip, [fp, #-168]	; 0xffffff58
   1c080:	ubfx	r2, r0, #0, #15
   1c084:	moveq	r3, #32
   1c088:	movne	r3, #104	; 0x68
   1c08c:	cmp	ip, #0
   1c090:	beq	1c144 <__assert_fail@plt+0x8c40>
   1c094:	ldr	ip, [fp, #-192]	; 0xffffff40
   1c098:	cmp	r2, ip
   1c09c:	bcs	1c144 <__assert_fail@plt+0x8c40>
   1c0a0:	ldr	ip, [fp, #-168]	; 0xffffff58
   1c0a4:	ldr	r1, [ip, r2, lsl #2]
   1c0a8:	str	r1, [sp]
   1c0ac:	mov	r0, #1
   1c0b0:	movw	r1, #64144	; 0xfa90
   1c0b4:	movt	r1, #3
   1c0b8:	bl	13204 <__printf_chk@plt>
   1c0bc:	ldrh	r2, [sl]
   1c0c0:	ldr	ip, [fp, #-192]	; 0xffffff40
   1c0c4:	ubfx	r2, r2, #0, #15
   1c0c8:	cmp	ip, r2
   1c0cc:	mov	r3, r0
   1c0d0:	bls	1c108 <__assert_fail@plt+0x8c04>
   1c0d4:	ldr	ip, [fp, #-172]	; 0xffffff54
   1c0d8:	cmp	ip, #0
   1c0dc:	beq	1c108 <__assert_fail@plt+0x8c04>
   1c0e0:	ldr	r2, [ip, r2, lsl #2]
   1c0e4:	cmp	r2, #0
   1c0e8:	beq	1c108 <__assert_fail@plt+0x8c04>
   1c0ec:	movw	r1, #64152	; 0xfa98
   1c0f0:	mov	r0, #1
   1c0f4:	movt	r1, #3
   1c0f8:	str	r3, [fp, #-220]	; 0xffffff24
   1c0fc:	bl	13204 <__printf_chk@plt>
   1c100:	ldr	r3, [fp, #-220]	; 0xffffff24
   1c104:	add	r3, r3, r0
   1c108:	rsb	r2, r3, #33	; 0x21
   1c10c:	movw	r1, #64160	; 0xfaa0
   1c110:	bic	r2, r2, r2, asr #31
   1c114:	movt	r1, #3
   1c118:	movw	r3, #11956	; 0x2eb4
   1c11c:	mov	r0, #1
   1c120:	movt	r3, #4
   1c124:	bl	13204 <__printf_chk@plt>
   1c128:	b	1c008 <__assert_fail@plt+0x8b04>
   1c12c:	movw	r1, #64064	; 0xfa40
   1c130:	mov	r2, r5
   1c134:	movt	r1, #3
   1c138:	mov	r0, #1
   1c13c:	bl	13204 <__printf_chk@plt>
   1c140:	b	1c038 <__assert_fail@plt+0x8b34>
   1c144:	movw	r1, #8172	; 0x1fec
   1c148:	movt	r1, #4
   1c14c:	b	1c0a8 <__assert_fail@plt+0x8ba4>
   1c150:	sub	ip, fp, #108	; 0x6c
   1c154:	mov	r6, #1
   1c158:	str	r4, [fp, #-172]	; 0xffffff54
   1c15c:	str	ip, [fp, #-208]	; 0xffffff30
   1c160:	str	r4, [fp, #-168]	; 0xffffff58
   1c164:	str	r6, [fp, #-192]	; 0xffffff40
   1c168:	b	1be80 <__assert_fail@plt+0x897c>
   1c16c:	mov	r2, #5
   1c170:	movw	r1, #54000	; 0xd2f0
   1c174:	mov	r0, r5
   1c178:	movt	r1, #3
   1c17c:	bl	12d84 <dcgettext@plt>
   1c180:	mov	r4, r0
   1c184:	ldr	r0, [fp, #-200]	; 0xffffff38
   1c188:	bl	133d8 <elf_ndxscn@plt>
   1c18c:	mov	r2, r4
   1c190:	mov	r1, r5
   1c194:	mov	r3, r0
   1c198:	mov	r0, #1
   1c19c:	bl	12f70 <error@plt>
   1c1a0:	bl	12dc0 <__stack_chk_fail@plt>
   1c1a4:	mov	r2, #5
   1c1a8:	movw	r1, #53868	; 0xd26c
   1c1ac:	mov	r0, #0
   1c1b0:	movt	r1, #3
   1c1b4:	bl	12d84 <dcgettext@plt>
   1c1b8:	mov	r1, #0
   1c1bc:	mov	r2, r0
   1c1c0:	mov	r0, #1
   1c1c4:	bl	12f70 <error@plt>
   1c1c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c1cc:	mov	r8, r1
   1c1d0:	ldrd	r4, [r1, #32]
   1c1d4:	sub	sp, sp, #24
   1c1d8:	mov	r7, r2
   1c1dc:	mov	r9, r0
   1c1e0:	orrs	r1, r4, r5
   1c1e4:	beq	1c31c <__assert_fail@plt+0x8e18>
   1c1e8:	ldr	r3, [r8, #4]
   1c1ec:	cmp	r3, #8
   1c1f0:	beq	1c31c <__assert_fail@plt+0x8e18>
   1c1f4:	movw	r3, #37712	; 0x9350
   1c1f8:	movt	r3, #5
   1c1fc:	ldrb	r3, [r3, #34]	; 0x22
   1c200:	cmp	r3, #0
   1c204:	beq	1c240 <__assert_fail@plt+0x8d3c>
   1c208:	ldrd	r2, [r8, #8]
   1c20c:	mov	r4, #2048	; 0x800
   1c210:	mov	r5, #0
   1c214:	and	r2, r2, r4
   1c218:	and	r3, r3, r5
   1c21c:	orrs	r1, r2, r3
   1c220:	bne	1c3cc <__assert_fail@plt+0x8ec8>
   1c224:	movw	r1, #64212	; 0xfad4
   1c228:	mov	r0, r7
   1c22c:	movt	r1, #3
   1c230:	mov	r2, #7
   1c234:	bl	13468 <strncmp@plt>
   1c238:	subs	r4, r0, #0
   1c23c:	beq	1c3a0 <__assert_fail@plt+0x8e9c>
   1c240:	mov	r0, r9
   1c244:	mov	r1, #0
   1c248:	bl	131bc <elf_rawdata@plt>
   1c24c:	subs	r6, r0, #0
   1c250:	beq	1c41c <__assert_fail@plt+0x8f18>
   1c254:	ldr	r0, [r6, #12]
   1c258:	mov	r1, #0
   1c25c:	ldrd	r2, [r8, #32]
   1c260:	cmp	r1, r3
   1c264:	cmpeq	r0, r2
   1c268:	beq	1c358 <__assert_fail@plt+0x8e54>
   1c26c:	mov	r2, #5
   1c270:	movw	r1, #64332	; 0xfb4c
   1c274:	mov	r0, #0
   1c278:	movt	r1, #3
   1c27c:	bl	12d84 <dcgettext@plt>
   1c280:	mov	sl, r0
   1c284:	mov	r0, r9
   1c288:	bl	133d8 <elf_ndxscn@plt>
   1c28c:	ldrd	r4, [r8, #32]
   1c290:	mov	r1, sl
   1c294:	mov	r3, r7
   1c298:	strd	r4, [sp]
   1c29c:	ldr	ip, [r6, #12]
   1c2a0:	str	ip, [sp, #8]
   1c2a4:	ldrd	r4, [r8, #24]
   1c2a8:	strd	r4, [sp, #16]
   1c2ac:	mov	r2, r0
   1c2b0:	mov	r0, #1
   1c2b4:	bl	13204 <__printf_chk@plt>
   1c2b8:	ldr	r4, [r6]
   1c2bc:	ldr	r5, [r6, #12]
   1c2c0:	mov	r8, r4
   1c2c4:	add	r5, r4, r5
   1c2c8:	b	1c2d0 <__assert_fail@plt+0x8dcc>
   1c2cc:	ldr	r8, [r6]
   1c2d0:	rsb	r7, r4, r5
   1c2d4:	mov	r1, #0
   1c2d8:	mov	r0, r4
   1c2dc:	mov	r2, r7
   1c2e0:	bl	13270 <memchr@plt>
   1c2e4:	rsb	ip, r8, r4
   1c2e8:	movw	r1, #64436	; 0xfbb4
   1c2ec:	mov	r3, r4
   1c2f0:	movt	r1, #3
   1c2f4:	mov	r2, ip
   1c2f8:	subs	lr, r0, #0
   1c2fc:	mov	r0, #1
   1c300:	beq	1c464 <__assert_fail@plt+0x8f60>
   1c304:	add	r4, lr, #1
   1c308:	bl	13204 <__printf_chk@plt>
   1c30c:	cmp	r5, r4
   1c310:	bhi	1c2cc <__assert_fail@plt+0x8dc8>
   1c314:	add	sp, sp, #24
   1c318:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c31c:	mov	r2, #5
   1c320:	movw	r1, #64164	; 0xfaa4
   1c324:	mov	r0, #0
   1c328:	movt	r1, #3
   1c32c:	bl	12d84 <dcgettext@plt>
   1c330:	mov	r4, r0
   1c334:	mov	r0, r9
   1c338:	bl	133d8 <elf_ndxscn@plt>
   1c33c:	mov	r1, r4
   1c340:	mov	r3, r7
   1c344:	mov	r2, r0
   1c348:	mov	r0, #1
   1c34c:	add	sp, sp, #24
   1c350:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c354:	b	13204 <__printf_chk@plt>
   1c358:	mov	r2, #5
   1c35c:	movw	r1, #64264	; 0xfb08
   1c360:	mov	r0, #0
   1c364:	movt	r1, #3
   1c368:	bl	12d84 <dcgettext@plt>
   1c36c:	mov	sl, r0
   1c370:	mov	r0, r9
   1c374:	bl	133d8 <elf_ndxscn@plt>
   1c378:	ldrd	r4, [r8, #32]
   1c37c:	mov	r1, sl
   1c380:	mov	r3, r7
   1c384:	strd	r4, [sp]
   1c388:	ldrd	r4, [r8, #24]
   1c38c:	strd	r4, [sp, #8]
   1c390:	mov	r2, r0
   1c394:	mov	r0, #1
   1c398:	bl	13204 <__printf_chk@plt>
   1c39c:	b	1c2b8 <__assert_fail@plt+0x8db4>
   1c3a0:	mov	r0, r9
   1c3a4:	mov	r1, r4
   1c3a8:	mov	r2, r4
   1c3ac:	bl	13420 <elf_compress_gnu@plt>
   1c3b0:	cmp	r0, #0
   1c3b4:	bge	1c240 <__assert_fail@plt+0x8d3c>
   1c3b8:	movw	r1, #53916	; 0xd29c
   1c3bc:	mov	r0, r4
   1c3c0:	mov	r2, #5
   1c3c4:	movt	r1, #3
   1c3c8:	b	1c3f0 <__assert_fail@plt+0x8eec>
   1c3cc:	mov	r1, #0
   1c3d0:	mov	r2, r1
   1c3d4:	bl	12e8c <elf_compress@plt>
   1c3d8:	cmp	r0, #0
   1c3dc:	bge	1c240 <__assert_fail@plt+0x8d3c>
   1c3e0:	movw	r1, #53916	; 0xd29c
   1c3e4:	movt	r1, #3
   1c3e8:	mov	r0, #0
   1c3ec:	mov	r2, #5
   1c3f0:	bl	12d84 <dcgettext@plt>
   1c3f4:	mov	r4, r0
   1c3f8:	mov	r0, r9
   1c3fc:	bl	133d8 <elf_ndxscn@plt>
   1c400:	mov	r2, r4
   1c404:	movw	r1, #53944	; 0xd2b8
   1c408:	movt	r1, #3
   1c40c:	mov	r3, r0
   1c410:	mov	r0, #1
   1c414:	bl	13204 <__printf_chk@plt>
   1c418:	b	1c240 <__assert_fail@plt+0x8d3c>
   1c41c:	mov	r2, #5
   1c420:	movw	r1, #64220	; 0xfadc
   1c424:	movt	r1, #3
   1c428:	bl	12d84 <dcgettext@plt>
   1c42c:	mov	r5, r0
   1c430:	mov	r0, r9
   1c434:	bl	133d8 <elf_ndxscn@plt>
   1c438:	mov	r4, r0
   1c43c:	mvn	r0, #0
   1c440:	bl	130a8 <elf_errmsg@plt>
   1c444:	mov	r2, r5
   1c448:	mov	r3, r4
   1c44c:	str	r7, [sp]
   1c450:	mov	r1, r6
   1c454:	str	r0, [sp, #4]
   1c458:	mov	r0, r6
   1c45c:	bl	12f70 <error@plt>
   1c460:	b	1c314 <__assert_fail@plt+0x8e10>
   1c464:	str	r4, [sp]
   1c468:	mov	r3, r7
   1c46c:	movw	r1, #64420	; 0xfba4
   1c470:	movt	r1, #3
   1c474:	bl	13204 <__printf_chk@plt>
   1c478:	b	1c314 <__assert_fail@plt+0x8e10>
   1c47c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c480:	mov	r6, r1
   1c484:	ldrd	r4, [r1, #32]
   1c488:	sub	sp, sp, #28
   1c48c:	mov	r7, r2
   1c490:	mov	r9, r0
   1c494:	orrs	r1, r4, r5
   1c498:	beq	1c67c <__assert_fail@plt+0x9178>
   1c49c:	ldr	r3, [r6, #4]
   1c4a0:	cmp	r3, #8
   1c4a4:	beq	1c67c <__assert_fail@plt+0x9178>
   1c4a8:	movw	r3, #37712	; 0x9350
   1c4ac:	movt	r3, #5
   1c4b0:	ldrb	r3, [r3, #34]	; 0x22
   1c4b4:	cmp	r3, #0
   1c4b8:	beq	1c4f4 <__assert_fail@plt+0x8ff0>
   1c4bc:	ldrd	r2, [r6, #8]
   1c4c0:	mov	r4, #2048	; 0x800
   1c4c4:	mov	r5, #0
   1c4c8:	and	r2, r2, r4
   1c4cc:	and	r3, r3, r5
   1c4d0:	orrs	r1, r2, r3
   1c4d4:	bne	1c72c <__assert_fail@plt+0x9228>
   1c4d8:	movw	r1, #64212	; 0xfad4
   1c4dc:	mov	r0, r7
   1c4e0:	movt	r1, #3
   1c4e4:	mov	r2, #7
   1c4e8:	bl	13468 <strncmp@plt>
   1c4ec:	subs	r4, r0, #0
   1c4f0:	beq	1c700 <__assert_fail@plt+0x91fc>
   1c4f4:	mov	r0, r9
   1c4f8:	mov	r1, #0
   1c4fc:	bl	131bc <elf_rawdata@plt>
   1c500:	subs	r8, r0, #0
   1c504:	beq	1c77c <__assert_fail@plt+0x9278>
   1c508:	ldr	r2, [r8, #12]
   1c50c:	mov	r3, #0
   1c510:	ldrd	r4, [r6, #32]
   1c514:	cmp	r3, r5
   1c518:	cmpeq	r2, r4
   1c51c:	beq	1c6b8 <__assert_fail@plt+0x91b4>
   1c520:	mov	r2, #5
   1c524:	movw	r1, #64560	; 0xfc30
   1c528:	mov	r0, #0
   1c52c:	movt	r1, #3
   1c530:	bl	12d84 <dcgettext@plt>
   1c534:	mov	sl, r0
   1c538:	mov	r0, r9
   1c53c:	bl	133d8 <elf_ndxscn@plt>
   1c540:	ldrd	r4, [r6, #32]
   1c544:	mov	r1, sl
   1c548:	mov	r3, r7
   1c54c:	strd	r4, [sp]
   1c550:	ldr	ip, [r8, #12]
   1c554:	str	ip, [sp, #8]
   1c558:	ldrd	r4, [r6, #24]
   1c55c:	strd	r4, [sp, #16]
   1c560:	mov	r2, r0
   1c564:	mov	r0, #1
   1c568:	bl	13204 <__printf_chk@plt>
   1c56c:	ldr	r7, [r8, #12]
   1c570:	ldr	r9, [r8]
   1c574:	cmp	r7, #0
   1c578:	beq	1c63c <__assert_fail@plt+0x9138>
   1c57c:	movw	r8, #37704	; 0x9348
   1c580:	movt	r8, #5
   1c584:	mov	r6, #0
   1c588:	rsb	r5, r6, r7
   1c58c:	movw	r1, #64644	; 0xfc84
   1c590:	mov	r0, #1
   1c594:	movt	r1, #3
   1c598:	mov	r2, r6
   1c59c:	cmp	r5, #16
   1c5a0:	movcs	r5, #16
   1c5a4:	bl	13204 <__printf_chk@plt>
   1c5a8:	cmp	r5, #0
   1c5ac:	addne	sl, r9, r6
   1c5b0:	movne	r4, #0
   1c5b4:	beq	1c644 <__assert_fail@plt+0x9140>
   1c5b8:	and	r3, r4, #3
   1c5bc:	movw	r1, #53780	; 0xd214
   1c5c0:	cmp	r3, #3
   1c5c4:	movt	r1, #3
   1c5c8:	ldrb	r2, [sl, r4]
   1c5cc:	mov	r0, #1
   1c5d0:	movweq	r1, #64656	; 0xfc90
   1c5d4:	add	r4, r4, #1
   1c5d8:	movteq	r1, #3
   1c5dc:	bl	13204 <__printf_chk@plt>
   1c5e0:	cmp	r4, r5
   1c5e4:	bne	1c5b8 <__assert_fail@plt+0x90b4>
   1c5e8:	cmp	r5, #16
   1c5ec:	bne	1c644 <__assert_fail@plt+0x9140>
   1c5f0:	bl	13048 <__ctype_b_loc@plt>
   1c5f4:	mov	r4, sl
   1c5f8:	add	sl, sl, r5
   1c5fc:	mov	fp, r0
   1c600:	ldrb	r0, [r4], #1
   1c604:	ldr	r1, [fp]
   1c608:	lsl	r2, r0, #1
   1c60c:	ldrh	r2, [r1, r2]
   1c610:	tst	r2, #16384	; 0x4000
   1c614:	moveq	r0, #46	; 0x2e
   1c618:	bl	131b0 <putchar@plt>
   1c61c:	cmp	r4, sl
   1c620:	bne	1c600 <__assert_fail@plt+0x90fc>
   1c624:	add	r6, r6, r5
   1c628:	mov	r0, #10
   1c62c:	ldr	r1, [r8]
   1c630:	bl	12ed4 <_IO_putc@plt>
   1c634:	cmp	r7, r6
   1c638:	bhi	1c588 <__assert_fail@plt+0x9084>
   1c63c:	add	sp, sp, #28
   1c640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c644:	lsl	r3, r5, #1
   1c648:	rsb	r2, r5, #19
   1c64c:	rsb	r3, r3, #32
   1c650:	movw	r1, #64160	; 0xfaa0
   1c654:	add	r2, r3, r2, lsr #2
   1c658:	movt	r1, #3
   1c65c:	movw	r3, #15800	; 0x3db8
   1c660:	mov	r0, #1
   1c664:	movt	r3, #4
   1c668:	bl	13204 <__printf_chk@plt>
   1c66c:	cmp	r5, #0
   1c670:	addne	sl, r9, r6
   1c674:	bne	1c5f0 <__assert_fail@plt+0x90ec>
   1c678:	b	1c624 <__assert_fail@plt+0x9120>
   1c67c:	mov	r2, #5
   1c680:	movw	r1, #64452	; 0xfbc4
   1c684:	mov	r0, #0
   1c688:	movt	r1, #3
   1c68c:	bl	12d84 <dcgettext@plt>
   1c690:	mov	r4, r0
   1c694:	mov	r0, r9
   1c698:	bl	133d8 <elf_ndxscn@plt>
   1c69c:	mov	r1, r4
   1c6a0:	mov	r3, r7
   1c6a4:	mov	r2, r0
   1c6a8:	mov	r0, #1
   1c6ac:	add	sp, sp, #28
   1c6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6b4:	b	13204 <__printf_chk@plt>
   1c6b8:	mov	r2, #5
   1c6bc:	movw	r1, #64496	; 0xfbf0
   1c6c0:	mov	r0, #0
   1c6c4:	movt	r1, #3
   1c6c8:	bl	12d84 <dcgettext@plt>
   1c6cc:	mov	sl, r0
   1c6d0:	mov	r0, r9
   1c6d4:	bl	133d8 <elf_ndxscn@plt>
   1c6d8:	ldrd	r4, [r6, #32]
   1c6dc:	mov	r1, sl
   1c6e0:	mov	r3, r7
   1c6e4:	strd	r4, [sp]
   1c6e8:	ldrd	r4, [r6, #24]
   1c6ec:	strd	r4, [sp, #8]
   1c6f0:	mov	r2, r0
   1c6f4:	mov	r0, #1
   1c6f8:	bl	13204 <__printf_chk@plt>
   1c6fc:	b	1c56c <__assert_fail@plt+0x9068>
   1c700:	mov	r0, r9
   1c704:	mov	r1, r4
   1c708:	mov	r2, r4
   1c70c:	bl	13420 <elf_compress_gnu@plt>
   1c710:	cmp	r0, #0
   1c714:	bge	1c4f4 <__assert_fail@plt+0x8ff0>
   1c718:	movw	r1, #53916	; 0xd29c
   1c71c:	mov	r0, r4
   1c720:	mov	r2, #5
   1c724:	movt	r1, #3
   1c728:	b	1c750 <__assert_fail@plt+0x924c>
   1c72c:	mov	r1, #0
   1c730:	mov	r2, r1
   1c734:	bl	12e8c <elf_compress@plt>
   1c738:	cmp	r0, #0
   1c73c:	bge	1c4f4 <__assert_fail@plt+0x8ff0>
   1c740:	movw	r1, #53916	; 0xd29c
   1c744:	movt	r1, #3
   1c748:	mov	r0, #0
   1c74c:	mov	r2, #5
   1c750:	bl	12d84 <dcgettext@plt>
   1c754:	mov	r4, r0
   1c758:	mov	r0, r9
   1c75c:	bl	133d8 <elf_ndxscn@plt>
   1c760:	mov	r2, r4
   1c764:	movw	r1, #53944	; 0xd2b8
   1c768:	movt	r1, #3
   1c76c:	mov	r3, r0
   1c770:	mov	r0, #1
   1c774:	bl	13204 <__printf_chk@plt>
   1c778:	b	1c4f4 <__assert_fail@plt+0x8ff0>
   1c77c:	mov	r2, #5
   1c780:	movw	r1, #64220	; 0xfadc
   1c784:	movt	r1, #3
   1c788:	bl	12d84 <dcgettext@plt>
   1c78c:	mov	r5, r0
   1c790:	mov	r0, r9
   1c794:	bl	133d8 <elf_ndxscn@plt>
   1c798:	mov	r4, r0
   1c79c:	mvn	r0, #0
   1c7a0:	bl	130a8 <elf_errmsg@plt>
   1c7a4:	mov	r2, r5
   1c7a8:	mov	r3, r4
   1c7ac:	str	r7, [sp]
   1c7b0:	mov	r1, r8
   1c7b4:	str	r0, [sp, #4]
   1c7b8:	mov	r0, r8
   1c7bc:	bl	12f70 <error@plt>
   1c7c0:	b	1c63c <__assert_fail@plt+0x9138>
   1c7c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7c8:	mov	r6, r1
   1c7cc:	ldr	r9, [r0]
   1c7d0:	sub	sp, sp, #12
   1c7d4:	ldr	r1, [r0, #4]
   1c7d8:	mov	r8, r0
   1c7dc:	ldrd	r4, [sp, #48]	; 0x30
   1c7e0:	cmp	r9, r1
   1c7e4:	beq	1c86c <__assert_fail@plt+0x9368>
   1c7e8:	ldr	fp, [r0, #8]
   1c7ec:	subs	r0, r6, #8
   1c7f0:	add	ip, fp, r9, lsl #4
   1c7f4:	rsbs	r1, r0, #0
   1c7f8:	mov	sl, #0
   1c7fc:	adcs	r1, r1, r0
   1c800:	bfi	sl, r5, #0, #29
   1c804:	cmp	r2, #8
   1c808:	mvn	r6, #0
   1c80c:	mvn	r7, #-536870912	; 0xe0000000
   1c810:	and	r6, r6, r4
   1c814:	and	r7, r7, r5
   1c818:	movne	r2, #0
   1c81c:	moveq	r2, #1
   1c820:	lsr	r0, sl, #24
   1c824:	cmp	r5, r7
   1c828:	cmpeq	r4, r6
   1c82c:	add	r5, r9, #1
   1c830:	str	r5, [r8]
   1c834:	bfi	r0, r1, #5, #1
   1c838:	str	r4, [fp, r9, lsl #4]
   1c83c:	bfi	r0, r2, #6, #1
   1c840:	str	r3, [ip, #8]
   1c844:	mov	r2, #0
   1c848:	ldr	r3, [sp, #56]	; 0x38
   1c84c:	str	sl, [ip, #4]
   1c850:	strb	r0, [ip, #7]
   1c854:	movne	r0, r2
   1c858:	str	r3, [ip, #12]
   1c85c:	moveq	r0, #1
   1c860:	strne	r9, [r8]
   1c864:	add	sp, sp, #12
   1c868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c86c:	cmp	r9, #0
   1c870:	lslne	r1, r9, #5
   1c874:	lslne	r9, r9, #1
   1c878:	moveq	r0, #128	; 0x80
   1c87c:	strne	r9, [r8, #4]
   1c880:	streq	r0, [r8, #4]
   1c884:	moveq	r1, #2048	; 0x800
   1c888:	ldr	r0, [r8, #8]
   1c88c:	str	r2, [sp, #4]
   1c890:	str	r3, [sp]
   1c894:	bl	3b2d8 <__assert_fail@plt+0x27dd4>
   1c898:	ldr	r9, [r8]
   1c89c:	ldr	r3, [sp]
   1c8a0:	ldr	r2, [sp, #4]
   1c8a4:	mov	fp, r0
   1c8a8:	str	r0, [r8, #8]
   1c8ac:	b	1c7ec <__assert_fail@plt+0x92e8>
   1c8b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8b4:	movw	r5, #37712	; 0x9350
   1c8b8:	movt	r5, #5
   1c8bc:	sub	sp, sp, #388	; 0x184
   1c8c0:	movw	r6, #37688	; 0x9338
   1c8c4:	movt	r6, #5
   1c8c8:	ldr	ip, [r5, #20]
   1c8cc:	mov	r4, r2
   1c8d0:	ldr	lr, [r6]
   1c8d4:	ldr	r7, [sp, #424]	; 0x1a8
   1c8d8:	tst	ip, #8
   1c8dc:	ldrb	r8, [sp, #428]	; 0x1ac
   1c8e0:	str	r6, [sp, #84]	; 0x54
   1c8e4:	mov	r6, r3
   1c8e8:	str	r5, [sp, #72]	; 0x48
   1c8ec:	str	r0, [sp, #88]	; 0x58
   1c8f0:	str	r7, [sp, #80]	; 0x50
   1c8f4:	str	lr, [sp, #380]	; 0x17c
   1c8f8:	str	r8, [sp, #76]	; 0x4c
   1c8fc:	bne	1c934 <__assert_fail@plt+0x9430>
   1c900:	cmp	r8, #0
   1c904:	bne	1c934 <__assert_fail@plt+0x9430>
   1c908:	add	r0, r1, #16
   1c90c:	mov	r1, r3
   1c910:	bl	1870c <__assert_fail@plt+0x5208>
   1c914:	mov	sl, #1
   1c918:	str	r0, [sp, #92]	; 0x5c
   1c91c:	mov	r0, #320	; 0x140
   1c920:	bl	3b270 <__assert_fail@plt+0x27d6c>
   1c924:	mov	r9, r0
   1c928:	mov	r1, #0
   1c92c:	str	r1, [sp, #108]	; 0x6c
   1c930:	b	1c9d4 <__assert_fail@plt+0x94d0>
   1c934:	add	r0, r1, #16
   1c938:	mov	r1, r6
   1c93c:	bl	1870c <__assert_fail@plt+0x5208>
   1c940:	mov	r2, #5
   1c944:	movw	r1, #65460	; 0xffb4
   1c948:	movt	r1, #3
   1c94c:	str	r0, [sp, #92]	; 0x5c
   1c950:	mov	r0, #0
   1c954:	bl	12d84 <dcgettext@plt>
   1c958:	mov	r7, r0
   1c95c:	mov	r0, r4
   1c960:	bl	133d8 <elf_ndxscn@plt>
   1c964:	ldrd	r4, [r6, #24]
   1c968:	ldr	r3, [sp, #92]	; 0x5c
   1c96c:	mov	r1, r7
   1c970:	strd	r4, [sp]
   1c974:	mov	r2, r0
   1c978:	mov	r0, #1
   1c97c:	bl	13204 <__printf_chk@plt>
   1c980:	ldrd	r2, [r6, #32]
   1c984:	orrs	r6, r2, r3
   1c988:	beq	1ccac <__assert_fail@plt+0x97a8>
   1c98c:	mov	r0, #320	; 0x140
   1c990:	bl	3b270 <__assert_fail@plt+0x27d6c>
   1c994:	ldr	ip, [sp, #76]	; 0x4c
   1c998:	cmp	ip, #0
   1c99c:	mov	r9, r0
   1c9a0:	beq	1d1a4 <__assert_fail@plt+0x9ca0>
   1c9a4:	ldr	r5, [sp, #80]	; 0x50
   1c9a8:	add	r2, sp, #240	; 0xf0
   1c9ac:	mov	r3, #0
   1c9b0:	str	r2, [sp, #108]	; 0x6c
   1c9b4:	mov	r1, r2
   1c9b8:	mov	sl, r3
   1c9bc:	ldr	r0, [r5, #12]
   1c9c0:	str	r5, [sp, #240]	; 0xf0
   1c9c4:	ldr	r0, [r0, #12]
   1c9c8:	str	r3, [sp, #260]	; 0x104
   1c9cc:	str	r3, [sp, #268]	; 0x10c
   1c9d0:	str	r0, [sp, #256]	; 0x100
   1c9d4:	mov	fp, #20
   1c9d8:	add	r6, sp, #156	; 0x9c
   1c9dc:	str	r6, [sp, #64]	; 0x40
   1c9e0:	add	r7, sp, #105	; 0x69
   1c9e4:	add	r8, sp, #156	; 0x9c
   1c9e8:	str	r7, [sp]
   1c9ec:	mov	r4, #0
   1c9f0:	str	r8, [sp, #4]
   1c9f4:	add	r2, sp, #108	; 0x6c
   1c9f8:	ldr	r0, [sp, #80]	; 0x50
   1c9fc:	add	r3, sp, #106	; 0x6a
   1ca00:	str	r4, [sp, #8]
   1ca04:	bl	12d0c <dwarf_get_units@plt>
   1ca08:	cmp	r0, #1
   1ca0c:	beq	1d180 <__assert_fail@plt+0x9c7c>
   1ca10:	cmn	r0, #1
   1ca14:	beq	1d140 <__assert_fail@plt+0x9c3c>
   1ca18:	ldr	r0, [sp, #108]	; 0x6c
   1ca1c:	ldr	ip, [sp, #76]	; 0x4c
   1ca20:	ldr	r3, [r0, #28]
   1ca24:	cmp	r3, ip
   1ca28:	bne	1d180 <__assert_fail@plt+0x9c7c>
   1ca2c:	add	lr, sp, #104	; 0x68
   1ca30:	add	r3, sp, #103	; 0x67
   1ca34:	mov	r2, r4
   1ca38:	str	r3, [sp]
   1ca3c:	str	lr, [sp, #4]
   1ca40:	add	r1, sp, #140	; 0x8c
   1ca44:	add	r3, sp, #112	; 0x70
   1ca48:	add	r5, sp, #120	; 0x78
   1ca4c:	add	r6, sp, #128	; 0x80
   1ca50:	str	r5, [sp, #8]
   1ca54:	str	r6, [sp, #12]
   1ca58:	bl	131ec <dwarf_cu_die@plt>
   1ca5c:	cmp	sl, #0
   1ca60:	beq	1ce1c <__assert_fail@plt+0x9918>
   1ca64:	movw	r3, #65258	; 0xfeea
   1ca68:	add	r7, sp, #384	; 0x180
   1ca6c:	movt	r3, #65535	; 0xffff
   1ca70:	ldrh	r3, [r7, r3]
   1ca74:	uxth	ip, r3
   1ca78:	sub	r3, ip, #2
   1ca7c:	cmp	r3, #3
   1ca80:	bhi	1cdb0 <__assert_fail@plt+0x98ac>
   1ca84:	ldrb	r3, [sp, #105]	; 0x69
   1ca88:	sub	r3, r3, #1
   1ca8c:	cmp	r3, #5
   1ca90:	bhi	1cdb0 <__assert_fail@plt+0x98ac>
   1ca94:	ldr	r5, [sp, #64]	; 0x40
   1ca98:	mov	r4, #0
   1ca9c:	ldrb	lr, [sp, #103]	; 0x67
   1caa0:	mov	r7, r4
   1caa4:	ldr	r6, [sp, #88]	; 0x58
   1caa8:	ldm	r5, {r0, r1, r2, r3}
   1caac:	str	ip, [sp, #224]	; 0xe0
   1cab0:	ldr	r8, [sp, #80]	; 0x50
   1cab4:	ldrb	ip, [sp, #104]	; 0x68
   1cab8:	str	r4, [sp, #220]	; 0xdc
   1cabc:	str	r6, [sp, #204]	; 0xcc
   1cac0:	str	r8, [sp, #208]	; 0xd0
   1cac4:	str	r4, [sp, #212]	; 0xd4
   1cac8:	str	r4, [sp, #216]	; 0xd8
   1cacc:	str	r4, [sp, #68]	; 0x44
   1cad0:	strb	sl, [sp, #220]	; 0xdc
   1cad4:	stm	r9, {r0, r1, r2, r3}
   1cad8:	str	r1, [sp, #236]	; 0xec
   1cadc:	str	lr, [sp, #228]	; 0xe4
   1cae0:	str	ip, [sp, #232]	; 0xe8
   1cae4:	lsl	r8, r7, #4
   1cae8:	add	r6, r9, r8
   1caec:	mov	r0, r6
   1caf0:	bl	12f28 <dwarf_dieoffset@plt>
   1caf4:	mvn	r2, #0
   1caf8:	mvn	r3, #0
   1cafc:	mov	r4, r0
   1cb00:	mov	r5, r1
   1cb04:	cmp	r5, r3
   1cb08:	cmpeq	r4, r2
   1cb0c:	beq	1d1d4 <__assert_fail@plt+0x9cd0>
   1cb10:	mov	r0, r6
   1cb14:	bl	12cac <dwarf_tag@plt>
   1cb18:	subs	ip, r0, #0
   1cb1c:	beq	1d1fc <__assert_fail@plt+0x9cf8>
   1cb20:	cmp	sl, #0
   1cb24:	beq	1ccc8 <__assert_fail@plt+0x97c4>
   1cb28:	movw	r1, #37840	; 0x93d0
   1cb2c:	mov	r0, r6
   1cb30:	movt	r1, #2
   1cb34:	add	r2, sp, #204	; 0xcc
   1cb38:	mov	r3, #0
   1cb3c:	add	r4, r7, #1
   1cb40:	str	r7, [sp, #216]	; 0xd8
   1cb44:	str	r6, [sp, #212]	; 0xd4
   1cb48:	bl	12e5c <dwarf_getattrs@plt>
   1cb4c:	cmp	r4, fp
   1cb50:	beq	1ce00 <__assert_fail@plt+0x98fc>
   1cb54:	add	r1, r8, #16
   1cb58:	mov	r0, r6
   1cb5c:	add	r1, r9, r1
   1cb60:	bl	13210 <dwarf_child@plt>
   1cb64:	cmp	r0, #0
   1cb68:	bgt	1cb80 <__assert_fail@plt+0x967c>
   1cb6c:	b	1cd44 <__assert_fail@plt+0x9840>
   1cb70:	sub	r7, r7, #1
   1cb74:	sub	r6, r6, #16
   1cb78:	cmn	r7, #1
   1cb7c:	beq	1cba4 <__assert_fail@plt+0x96a0>
   1cb80:	mov	r0, r6
   1cb84:	mov	r1, r6
   1cb88:	bl	132b8 <dwarf_siblingof@plt>
   1cb8c:	cmp	r0, #1
   1cb90:	beq	1cb70 <__assert_fail@plt+0x966c>
   1cb94:	cmn	r0, #1
   1cb98:	beq	1d24c <__assert_fail@plt+0x9d48>
   1cb9c:	cmp	r7, #0
   1cba0:	bge	1cae4 <__assert_fail@plt+0x95e0>
   1cba4:	ldrb	r3, [sp, #105]	; 0x69
   1cba8:	cmp	r3, #4
   1cbac:	bne	1cda8 <__assert_fail@plt+0x98a4>
   1cbb0:	cmp	sl, #0
   1cbb4:	bne	1cbc8 <__assert_fail@plt+0x96c4>
   1cbb8:	ldr	r6, [sp, #72]	; 0x48
   1cbbc:	ldrb	r3, [r6, #29]
   1cbc0:	cmp	r3, #0
   1cbc4:	bne	1cbf4 <__assert_fail@plt+0x96f0>
   1cbc8:	movw	r3, #65258	; 0xfeea
   1cbcc:	add	r7, sp, #384	; 0x180
   1cbd0:	movt	r3, #65535	; 0xffff
   1cbd4:	ldrh	r3, [r7, r3]
   1cbd8:	uxth	r3, r3
   1cbdc:	cmp	r3, #4
   1cbe0:	bhi	1cda8 <__assert_fail@plt+0x98a4>
   1cbe4:	ldr	r8, [sp, #72]	; 0x48
   1cbe8:	ldr	r3, [r8, #20]
   1cbec:	tst	r3, #512	; 0x200
   1cbf0:	beq	1cda8 <__assert_fail@plt+0x98a4>
   1cbf4:	mov	r3, #0
   1cbf8:	ldr	r0, [sp, #108]	; 0x6c
   1cbfc:	mov	r1, r3
   1cc00:	str	r3, [sp, #4]
   1cc04:	str	r3, [sp, #8]
   1cc08:	mov	r2, r3
   1cc0c:	str	r3, [sp, #12]
   1cc10:	add	r6, sp, #172	; 0xac
   1cc14:	str	r6, [sp]
   1cc18:	bl	12e98 <dwarf_cu_info@plt>
   1cc1c:	subs	r4, r0, #0
   1cc20:	bne	1cd50 <__assert_fail@plt+0x984c>
   1cc24:	mov	r0, r6
   1cc28:	bl	12cac <dwarf_tag@plt>
   1cc2c:	cmp	r0, #0
   1cc30:	beq	1cd50 <__assert_fail@plt+0x984c>
   1cc34:	ldr	r7, [sp, #176]	; 0xb0
   1cc38:	mov	r2, r4
   1cc3c:	add	r0, sp, #103	; 0x67
   1cc40:	add	r3, sp, #104	; 0x68
   1cc44:	str	r0, [sp]
   1cc48:	add	r5, sp, #120	; 0x78
   1cc4c:	str	r3, [sp, #4]
   1cc50:	add	r1, sp, #140	; 0x8c
   1cc54:	add	r3, sp, #112	; 0x70
   1cc58:	str	r5, [sp, #8]
   1cc5c:	mov	r0, r7
   1cc60:	add	r8, sp, #128	; 0x80
   1cc64:	str	r8, [sp, #12]
   1cc68:	bl	131ec <dwarf_cu_die@plt>
   1cc6c:	ldr	r3, [sp, #108]	; 0x6c
   1cc70:	cmp	sl, #0
   1cc74:	ldrd	r4, [r3, #8]
   1cc78:	beq	1cf6c <__assert_fail@plt+0x9a68>
   1cc7c:	ldm	r6, {r0, r1, r2, r3}
   1cc80:	mov	ip, #5
   1cc84:	strb	ip, [sp, #105]	; 0x69
   1cc88:	mov	ip, #1
   1cc8c:	ldr	lr, [r7]
   1cc90:	mov	r7, #0
   1cc94:	strb	ip, [sp, #221]	; 0xdd
   1cc98:	str	ip, [sp, #68]	; 0x44
   1cc9c:	stm	r9, {r0, r1, r2, r3}
   1cca0:	str	lr, [sp, #208]	; 0xd0
   1cca4:	str	r1, [sp, #236]	; 0xec
   1cca8:	b	1cae4 <__assert_fail@plt+0x95e0>
   1ccac:	ldr	r7, [sp, #84]	; 0x54
   1ccb0:	ldr	r2, [sp, #380]	; 0x17c
   1ccb4:	ldr	r3, [r7]
   1ccb8:	cmp	r2, r3
   1ccbc:	bne	1d278 <__assert_fail@plt+0x9d74>
   1ccc0:	add	sp, sp, #388	; 0x184
   1ccc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccc8:	ldr	r0, [r6, #8]
   1cccc:	str	ip, [sp, #52]	; 0x34
   1ccd0:	bl	1306c <dwarf_getabbrevcode@plt>
   1ccd4:	ldr	lr, [sp, #68]	; 0x44
   1ccd8:	mov	r2, r4
   1ccdc:	ldr	ip, [sp, #52]	; 0x34
   1cce0:	mov	r3, r5
   1cce4:	cmp	lr, #0
   1cce8:	movwne	r1, #65192	; 0xfea8
   1ccec:	movweq	r1, #65204	; 0xfeb4
   1ccf0:	streq	ip, [sp, #52]	; 0x34
   1ccf4:	str	r0, [sp, #56]	; 0x38
   1ccf8:	movtne	r1, #3
   1ccfc:	movteq	r1, #3
   1cd00:	movne	r0, #1
   1cd04:	moveq	r0, #1
   1cd08:	bl	13204 <__printf_chk@plt>
   1cd0c:	ldr	ip, [sp, #52]	; 0x34
   1cd10:	mov	r0, ip
   1cd14:	bl	1786c <__assert_fail@plt+0x4368>
   1cd18:	ldr	r5, [sp, #56]	; 0x38
   1cd1c:	movw	r1, #65216	; 0xfec0
   1cd20:	movw	r3, #15800	; 0x3db8
   1cd24:	movt	r1, #3
   1cd28:	movt	r3, #4
   1cd2c:	str	r5, [sp, #4]
   1cd30:	lsl	r2, r7, #1
   1cd34:	str	r0, [sp]
   1cd38:	mov	r0, #1
   1cd3c:	bl	13204 <__printf_chk@plt>
   1cd40:	b	1cb28 <__assert_fail@plt+0x9624>
   1cd44:	bne	1d27c <__assert_fail@plt+0x9d78>
   1cd48:	mov	r7, r4
   1cd4c:	b	1cae4 <__assert_fail@plt+0x95e0>
   1cd50:	cmp	sl, #0
   1cd54:	bne	1cda8 <__assert_fail@plt+0x98a4>
   1cd58:	mov	r1, #118	; 0x76
   1cd5c:	add	r2, sp, #188	; 0xbc
   1cd60:	add	r0, sp, #156	; 0x9c
   1cd64:	bl	13114 <dwarf_attr@plt>
   1cd68:	bl	12d18 <dwarf_formstring@plt>
   1cd6c:	cmp	r0, #0
   1cd70:	beq	1d1ac <__assert_fail@plt+0x9ca8>
   1cd74:	movw	ip, #65272	; 0xfef8
   1cd78:	add	lr, sp, #384	; 0x180
   1cd7c:	movt	ip, #65535	; 0xffff
   1cd80:	movw	r1, #37692	; 0x933c
   1cd84:	movt	r1, #5
   1cd88:	mov	r3, r0
   1cd8c:	ldrd	r4, [lr, ip]
   1cd90:	movw	r2, #65292	; 0xff0c
   1cd94:	ldr	r0, [r1]
   1cd98:	movt	r2, #3
   1cd9c:	mov	r1, #1
   1cda0:	strd	r4, [sp]
   1cda4:	bl	13258 <__fprintf_chk@plt>
   1cda8:	ldr	r1, [sp, #108]	; 0x6c
   1cdac:	b	1c9e0 <__assert_fail@plt+0x94dc>
   1cdb0:	cmp	sl, #0
   1cdb4:	bne	1cda8 <__assert_fail@plt+0x98a4>
   1cdb8:	mov	r2, #5
   1cdbc:	movw	r1, #65064	; 0xfe28
   1cdc0:	mov	r0, sl
   1cdc4:	movt	r1, #3
   1cdc8:	bl	12d84 <dcgettext@plt>
   1cdcc:	movw	r3, #65258	; 0xfeea
   1cdd0:	movt	r3, #65535	; 0xffff
   1cdd4:	ldrb	ip, [sp, #105]	; 0x69
   1cdd8:	mov	r1, sl
   1cddc:	mov	r2, r0
   1cde0:	add	r0, sp, #384	; 0x180
   1cde4:	ldrh	r3, [r0, r3]
   1cde8:	mov	r0, sl
   1cdec:	str	ip, [sp]
   1cdf0:	uxth	r3, r3
   1cdf4:	bl	12f70 <error@plt>
   1cdf8:	ldr	r1, [sp, #108]	; 0x6c
   1cdfc:	b	1c9e0 <__assert_fail@plt+0x94dc>
   1ce00:	mov	r0, r9
   1ce04:	add	r1, r8, #176	; 0xb0
   1ce08:	bl	3b2d8 <__assert_fail@plt+0x27dd4>
   1ce0c:	add	fp, r7, #11
   1ce10:	mov	r9, r0
   1ce14:	add	r6, r0, r8
   1ce18:	b	1cb54 <__assert_fail@plt+0x9650>
   1ce1c:	ldr	r8, [sp, #76]	; 0x4c
   1ce20:	ldr	r3, [sp, #108]	; 0x6c
   1ce24:	cmp	r8, #0
   1ce28:	ldrd	r6, [r3, #8]
   1ce2c:	beq	1ce4c <__assert_fail@plt+0x9948>
   1ce30:	movw	r4, #65258	; 0xfeea
   1ce34:	add	ip, sp, #384	; 0x180
   1ce38:	movt	r4, #65535	; 0xffff
   1ce3c:	ldrh	ip, [ip, r4]
   1ce40:	uxth	r3, ip
   1ce44:	cmp	r3, #4
   1ce48:	bls	1d030 <__assert_fail@plt+0x9b2c>
   1ce4c:	mov	r2, #5
   1ce50:	movw	r1, #64868	; 0xfd64
   1ce54:	mov	r0, #0
   1ce58:	movt	r1, #3
   1ce5c:	bl	12d84 <dcgettext@plt>
   1ce60:	movw	r4, #65258	; 0xfeea
   1ce64:	add	r2, sp, #384	; 0x180
   1ce68:	movt	r4, #65535	; 0xffff
   1ce6c:	movw	ip, #65264	; 0xfef0
   1ce70:	add	r5, sp, #384	; 0x180
   1ce74:	ldrh	r2, [r2, r4]
   1ce78:	movt	ip, #65535	; 0xffff
   1ce7c:	mov	r3, r7
   1ce80:	ldrb	lr, [sp, #103]	; 0x67
   1ce84:	mov	r1, r0
   1ce88:	uxth	r0, r2
   1ce8c:	mov	r2, r6
   1ce90:	ldrd	r6, [r5, ip]
   1ce94:	ldrb	ip, [sp, #104]	; 0x68
   1ce98:	str	r0, [sp]
   1ce9c:	mov	r0, #1
   1cea0:	strd	r6, [sp, #8]
   1cea4:	add	r6, sp, #384	; 0x180
   1cea8:	str	ip, [sp, #20]
   1ceac:	str	lr, [sp, #16]
   1ceb0:	bl	13204 <__printf_chk@plt>
   1ceb4:	ldrh	r4, [r6, r4]
   1ceb8:	uxth	ip, r4
   1cebc:	cmp	ip, #4
   1cec0:	bhi	1ced4 <__assert_fail@plt+0x99d0>
   1cec4:	ldrb	r3, [sp, #105]	; 0x69
   1cec8:	and	r3, r3, #253	; 0xfd
   1cecc:	cmp	r3, #1
   1ced0:	beq	1ca78 <__assert_fail@plt+0x9574>
   1ced4:	mov	r2, #5
   1ced8:	movw	r1, #64988	; 0xfddc
   1cedc:	mov	r0, #0
   1cee0:	movt	r1, #3
   1cee4:	bl	12d84 <dcgettext@plt>
   1cee8:	mov	r4, r0
   1ceec:	ldrb	r0, [sp, #105]	; 0x69
   1cef0:	bl	17eb8 <__assert_fail@plt+0x49b4>
   1cef4:	ldrb	r3, [sp, #105]	; 0x69
   1cef8:	mov	r1, r4
   1cefc:	mov	r2, r0
   1cf00:	mov	r0, #1
   1cf04:	bl	13204 <__printf_chk@plt>
   1cf08:	ldrb	r3, [sp, #105]	; 0x69
   1cf0c:	sub	r2, r3, #4
   1cf10:	cmp	r3, #2
   1cf14:	cmpne	r2, #2
   1cf18:	bhi	1cf40 <__assert_fail@plt+0x9a3c>
   1cf1c:	movw	r3, #65272	; 0xfef8
   1cf20:	add	r7, sp, #384	; 0x180
   1cf24:	movt	r3, #65535	; 0xffff
   1cf28:	movw	r1, #65008	; 0xfdf0
   1cf2c:	mov	r0, #1
   1cf30:	movt	r1, #3
   1cf34:	ldrd	r2, [r3, r7]
   1cf38:	bl	13204 <__printf_chk@plt>
   1cf3c:	ldrb	r3, [sp, #105]	; 0x69
   1cf40:	and	r3, r3, #251	; 0xfb
   1cf44:	cmp	r3, #2
   1cf48:	beq	1d0ec <__assert_fail@plt+0x9be8>
   1cf4c:	mov	r0, #10
   1cf50:	bl	131b0 <putchar@plt>
   1cf54:	movw	r3, #65258	; 0xfeea
   1cf58:	add	lr, sp, #384	; 0x180
   1cf5c:	movt	r3, #65535	; 0xffff
   1cf60:	ldrh	r3, [lr, r3]
   1cf64:	uxth	ip, r3
   1cf68:	b	1ca78 <__assert_fail@plt+0x9574>
   1cf6c:	mov	r0, sl
   1cf70:	mov	r2, #5
   1cf74:	movw	r1, #65336	; 0xff38
   1cf78:	movt	r1, #3
   1cf7c:	bl	12d84 <dcgettext@plt>
   1cf80:	add	r2, sp, #384	; 0x180
   1cf84:	movw	r3, #65258	; 0xfeea
   1cf88:	movt	r3, #65535	; 0xffff
   1cf8c:	ldrb	ip, [sp, #103]	; 0x67
   1cf90:	add	r8, sp, #384	; 0x180
   1cf94:	ldrh	r3, [r2, r3]
   1cf98:	movw	lr, #65264	; 0xfef0
   1cf9c:	movt	lr, #65535	; 0xffff
   1cfa0:	mov	r2, r4
   1cfa4:	mov	r1, r0
   1cfa8:	uxth	r0, r3
   1cfac:	mov	r3, r5
   1cfb0:	ldrd	r4, [r8, lr]
   1cfb4:	str	ip, [sp, #16]
   1cfb8:	ldrb	ip, [sp, #104]	; 0x68
   1cfbc:	str	r0, [sp]
   1cfc0:	mov	r0, #1
   1cfc4:	strd	r4, [sp, #8]
   1cfc8:	str	ip, [sp, #20]
   1cfcc:	bl	13204 <__printf_chk@plt>
   1cfd0:	mov	r2, #5
   1cfd4:	mov	r0, sl
   1cfd8:	movw	r1, #64988	; 0xfddc
   1cfdc:	movt	r1, #3
   1cfe0:	bl	12d84 <dcgettext@plt>
   1cfe4:	mov	r4, r0
   1cfe8:	ldrb	r0, [sp, #105]	; 0x69
   1cfec:	bl	17eb8 <__assert_fail@plt+0x49b4>
   1cff0:	mov	r1, r4
   1cff4:	ldrb	r3, [sp, #105]	; 0x69
   1cff8:	mov	r2, r0
   1cffc:	mov	r0, #1
   1d000:	bl	13204 <__printf_chk@plt>
   1d004:	add	ip, sp, #384	; 0x180
   1d008:	movw	r3, #65272	; 0xfef8
   1d00c:	movt	r3, #65535	; 0xffff
   1d010:	movw	r1, #65008	; 0xfdf0
   1d014:	mov	r0, #1
   1d018:	movt	r1, #3
   1d01c:	ldrd	r2, [r3, ip]
   1d020:	bl	13204 <__printf_chk@plt>
   1d024:	mov	r0, #10
   1d028:	bl	131b0 <putchar@plt>
   1d02c:	b	1cc7c <__assert_fail@plt+0x9778>
   1d030:	add	lr, sp, #384	; 0x180
   1d034:	mvn	r5, #255	; 0xff
   1d038:	add	r1, sp, #188	; 0xbc
   1d03c:	ldr	r0, [sp, #80]	; 0x50
   1d040:	ldrd	r2, [lr, r5]
   1d044:	add	r8, sp, #384	; 0x180
   1d048:	str	r1, [sp]
   1d04c:	bl	13144 <dwarf_offdie_types@plt>
   1d050:	bl	12f28 <dwarf_dieoffset@plt>
   1d054:	mov	r2, #5
   1d058:	strd	r0, [sp, #56]	; 0x38
   1d05c:	mov	r0, sl
   1d060:	movw	r1, #64704	; 0xfcc0
   1d064:	movt	r1, #3
   1d068:	bl	12d84 <dcgettext@plt>
   1d06c:	add	r1, sp, #384	; 0x180
   1d070:	movw	lr, #65264	; 0xfef0
   1d074:	movt	lr, #65535	; 0xffff
   1d078:	movw	ip, #65272	; 0xfef8
   1d07c:	movt	ip, #65535	; 0xffff
   1d080:	mov	r3, r0
   1d084:	ldrd	r0, [r1, r5]
   1d088:	strd	r0, [sp, #32]
   1d08c:	mov	r1, r3
   1d090:	add	r3, sp, #384	; 0x180
   1d094:	mov	r0, #1
   1d098:	ldrd	r2, [r3, lr]
   1d09c:	ldrb	lr, [sp, #103]	; 0x67
   1d0a0:	strd	r2, [sp, #8]
   1d0a4:	mov	r2, r6
   1d0a8:	mov	r3, r7
   1d0ac:	ldrd	r6, [sp, #56]	; 0x38
   1d0b0:	strd	r6, [sp, #40]	; 0x28
   1d0b4:	add	r7, sp, #384	; 0x180
   1d0b8:	ldrd	r6, [r7, ip]
   1d0bc:	ldrb	ip, [sp, #104]	; 0x68
   1d0c0:	strd	r6, [sp, #24]
   1d0c4:	ldrh	r8, [r8, r4]
   1d0c8:	str	lr, [sp, #16]
   1d0cc:	str	ip, [sp, #20]
   1d0d0:	uxth	r5, r8
   1d0d4:	str	r5, [sp]
   1d0d8:	bl	13204 <__printf_chk@plt>
   1d0dc:	add	lr, sp, #384	; 0x180
   1d0e0:	ldrh	r4, [lr, r4]
   1d0e4:	uxth	ip, r4
   1d0e8:	b	1ca78 <__assert_fail@plt+0x9574>
   1d0ec:	mov	r3, #0
   1d0f0:	add	r4, sp, #188	; 0xbc
   1d0f4:	str	r3, [sp, #4]
   1d0f8:	mov	r2, r3
   1d0fc:	str	r3, [sp, #8]
   1d100:	mov	r1, r3
   1d104:	str	r3, [sp, #12]
   1d108:	add	r8, sp, #384	; 0x180
   1d10c:	ldr	r0, [sp, #108]	; 0x6c
   1d110:	str	r4, [sp]
   1d114:	bl	12e98 <dwarf_cu_info@plt>
   1d118:	mov	r0, r4
   1d11c:	bl	12f28 <dwarf_dieoffset@plt>
   1d120:	mvn	r3, #255	; 0xff
   1d124:	ldrd	r2, [r3, r8]
   1d128:	strd	r0, [sp]
   1d12c:	movw	r1, #65032	; 0xfe08
   1d130:	mov	r0, #1
   1d134:	movt	r1, #3
   1d138:	bl	13204 <__printf_chk@plt>
   1d13c:	b	1cf4c <__assert_fail@plt+0x9a48>
   1d140:	cmp	sl, r4
   1d144:	mov	r5, r0
   1d148:	bne	1d180 <__assert_fail@plt+0x9c7c>
   1d14c:	movw	r1, #64676	; 0xfca4
   1d150:	mov	r0, sl
   1d154:	movt	r1, #3
   1d158:	mov	r2, #5
   1d15c:	bl	12d84 <dcgettext@plt>
   1d160:	mov	r4, r0
   1d164:	mov	r0, r5
   1d168:	bl	13078 <dwarf_errmsg@plt>
   1d16c:	mov	r1, sl
   1d170:	mov	r2, r4
   1d174:	mov	r3, r0
   1d178:	mov	r0, sl
   1d17c:	bl	12f70 <error@plt>
   1d180:	ldr	r5, [sp, #84]	; 0x54
   1d184:	ldr	r2, [sp, #380]	; 0x17c
   1d188:	ldr	r3, [r5]
   1d18c:	cmp	r2, r3
   1d190:	bne	1d278 <__assert_fail@plt+0x9d74>
   1d194:	mov	r0, r9
   1d198:	add	sp, sp, #388	; 0x184
   1d19c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1a0:	b	12cf4 <free@plt>
   1d1a4:	ldr	sl, [sp, #76]	; 0x4c
   1d1a8:	b	1c928 <__assert_fail@plt+0x9424>
   1d1ac:	add	r2, sp, #188	; 0xbc
   1d1b0:	movw	r1, #8496	; 0x2130
   1d1b4:	add	r0, sp, #156	; 0x9c
   1d1b8:	bl	13114 <dwarf_attr@plt>
   1d1bc:	bl	12d18 <dwarf_formstring@plt>
   1d1c0:	movw	r3, #64664	; 0xfc98
   1d1c4:	movt	r3, #3
   1d1c8:	cmp	r0, #0
   1d1cc:	moveq	r0, r3
   1d1d0:	b	1cd74 <__assert_fail@plt+0x9870>
   1d1d4:	cmp	sl, #0
   1d1d8:	bne	1d180 <__assert_fail@plt+0x9c7c>
   1d1dc:	movw	r1, #65104	; 0xfe50
   1d1e0:	movt	r1, #3
   1d1e4:	mov	r0, sl
   1d1e8:	mov	r2, #5
   1d1ec:	bl	12d84 <dcgettext@plt>
   1d1f0:	mov	r4, r0
   1d1f4:	mvn	r0, #0
   1d1f8:	b	1d168 <__assert_fail@plt+0x9c64>
   1d1fc:	cmp	sl, #0
   1d200:	mov	r6, r4
   1d204:	mov	r7, r5
   1d208:	bne	1d180 <__assert_fail@plt+0x9c7c>
   1d20c:	mov	r2, #5
   1d210:	movw	r1, #65132	; 0xfe6c
   1d214:	movt	r1, #3
   1d218:	bl	12d84 <dcgettext@plt>
   1d21c:	mov	r4, r0
   1d220:	mvn	r0, #0
   1d224:	bl	13078 <dwarf_errmsg@plt>
   1d228:	ldr	ip, [sp, #92]	; 0x5c
   1d22c:	mov	r2, r4
   1d230:	strd	r6, [sp]
   1d234:	mov	r1, sl
   1d238:	str	ip, [sp, #8]
   1d23c:	str	r0, [sp, #12]
   1d240:	mov	r0, sl
   1d244:	bl	12f70 <error@plt>
   1d248:	b	1d180 <__assert_fail@plt+0x9c7c>
   1d24c:	cmp	sl, #0
   1d250:	mov	r6, r0
   1d254:	bne	1d180 <__assert_fail@plt+0x9c7c>
   1d258:	movw	r1, #65240	; 0xfed8
   1d25c:	mov	r0, sl
   1d260:	movt	r1, #3
   1d264:	mov	r2, #5
   1d268:	bl	12d84 <dcgettext@plt>
   1d26c:	mov	r4, r0
   1d270:	mov	r0, r6
   1d274:	b	1d168 <__assert_fail@plt+0x9c64>
   1d278:	bl	12dc0 <__stack_chk_fail@plt>
   1d27c:	cmp	sl, #0
   1d280:	bne	1d180 <__assert_fail@plt+0x9c7c>
   1d284:	movw	r1, #65268	; 0xfef4
   1d288:	mov	r0, sl
   1d28c:	movt	r1, #3
   1d290:	b	1d1e8 <__assert_fail@plt+0x9ce4>
   1d294:	push	{r4}		; (str r4, [sp, #-4]!)
   1d298:	mov	r2, r3
   1d29c:	ldr	r4, [sp, #4]
   1d2a0:	mov	r3, #0
   1d2a4:	ldr	ip, [sp, #8]
   1d2a8:	str	r3, [sp, #8]
   1d2ac:	mov	r3, r4
   1d2b0:	str	ip, [sp, #4]
   1d2b4:	pop	{r4}		; (ldr r4, [sp], #4)
   1d2b8:	b	1c8b0 <__assert_fail@plt+0x93ac>
   1d2bc:	push	{r4}		; (str r4, [sp, #-4]!)
   1d2c0:	mov	r2, r3
   1d2c4:	ldr	r4, [sp, #4]
   1d2c8:	mov	r3, #1
   1d2cc:	ldr	ip, [sp, #8]
   1d2d0:	str	r3, [sp, #8]
   1d2d4:	mov	r3, r4
   1d2d8:	str	ip, [sp, #4]
   1d2dc:	pop	{r4}		; (ldr r4, [sp], #4)
   1d2e0:	b	1c8b0 <__assert_fail@plt+0x93ac>
   1d2e4:	push	{r4, r5, r6, r7, lr}
   1d2e8:	movw	r4, #37688	; 0x9338
   1d2ec:	movt	r4, #5
   1d2f0:	sub	sp, sp, #52	; 0x34
   1d2f4:	mov	r5, r1
   1d2f8:	mov	r7, r2
   1d2fc:	ldr	r3, [r4]
   1d300:	mov	r2, r1
   1d304:	add	r1, sp, #16
   1d308:	str	r3, [sp, #44]	; 0x2c
   1d30c:	bl	1507c <__assert_fail@plt+0x1b78>
   1d310:	subs	r6, r0, #0
   1d314:	bne	1d334 <__assert_fail@plt+0x9e30>
   1d318:	ldr	r2, [sp, #44]	; 0x2c
   1d31c:	mov	r0, r6
   1d320:	ldr	r3, [r4]
   1d324:	cmp	r2, r3
   1d328:	bne	1d378 <__assert_fail@plt+0x9e74>
   1d32c:	add	sp, sp, #52	; 0x34
   1d330:	pop	{r4, r5, r6, r7, pc}
   1d334:	ldr	r0, [r5]
   1d338:	mov	r5, #0
   1d33c:	add	r3, sp, #28
   1d340:	str	r5, [sp]
   1d344:	str	r5, [sp, #4]
   1d348:	mov	r1, r5
   1d34c:	str	r5, [sp, #8]
   1d350:	mov	r2, r5
   1d354:	str	r5, [sp, #12]
   1d358:	bl	12e98 <dwarf_cu_info@plt>
   1d35c:	cmp	r0, r5
   1d360:	movne	r6, r5
   1d364:	bne	1d318 <__assert_fail@plt+0x9e14>
   1d368:	add	r0, sp, #28
   1d36c:	bl	154b8 <__assert_fail@plt+0x1fb4>
   1d370:	strd	r0, [r7]
   1d374:	b	1d318 <__assert_fail@plt+0x9e14>
   1d378:	bl	12dc0 <__stack_chk_fail@plt>
   1d37c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d380:	sub	sp, sp, #24
   1d384:	movw	r4, #37688	; 0x9338
   1d388:	movt	r4, #5
   1d38c:	ldr	r7, [sp, #56]	; 0x38
   1d390:	mov	r5, r0
   1d394:	ldr	r2, [r4]
   1d398:	mov	r8, r3
   1d39c:	mov	r9, r1
   1d3a0:	ldr	sl, [sp, #60]	; 0x3c
   1d3a4:	mov	r0, r7
   1d3a8:	str	r2, [sp, #20]
   1d3ac:	bl	13090 <strlen@plt>
   1d3b0:	add	ip, sp, #64	; 0x40
   1d3b4:	mov	r2, sl
   1d3b8:	mov	r1, #1
   1d3bc:	str	ip, [sp, #16]
   1d3c0:	mov	r3, ip
   1d3c4:	mov	r6, r0
   1d3c8:	add	r0, sp, #12
   1d3cc:	bl	13168 <__vasprintf_chk@plt>
   1d3d0:	cmp	r6, r8
   1d3d4:	movcs	r8, r6
   1d3d8:	cmn	r0, #1
   1d3dc:	beq	1d4ac <__assert_fail@plt+0x9fa8>
   1d3e0:	cmp	r5, #0
   1d3e4:	add	sl, r8, r0
   1d3e8:	beq	1d484 <__assert_fail@plt+0x9f80>
   1d3ec:	add	r5, r5, #4
   1d3f0:	add	r5, r5, sl
   1d3f4:	cmp	r5, #74	; 0x4a
   1d3f8:	bls	1d46c <__assert_fail@plt+0x9f68>
   1d3fc:	movw	r1, #65520	; 0xfff0
   1d400:	movw	r3, #15800	; 0x3db8
   1d404:	movt	r1, #3
   1d408:	movt	r3, #4
   1d40c:	mov	r0, #1
   1d410:	mov	r2, #4
   1d414:	bl	13204 <__printf_chk@plt>
   1d418:	add	r5, sl, #6
   1d41c:	ldr	r0, [sp, #12]
   1d420:	mov	r2, r7
   1d424:	rsb	r3, r6, r8
   1d428:	movw	ip, #15800	; 0x3db8
   1d42c:	movw	r1, #65528	; 0xfff8
   1d430:	movt	ip, #4
   1d434:	str	r0, [sp, #4]
   1d438:	movt	r1, #3
   1d43c:	str	ip, [sp]
   1d440:	mov	r0, #1
   1d444:	bl	13204 <__printf_chk@plt>
   1d448:	ldr	r0, [sp, #12]
   1d44c:	bl	12cf4 <free@plt>
   1d450:	ldr	r2, [sp, #20]
   1d454:	ldr	r3, [r4]
   1d458:	mov	r0, r5
   1d45c:	cmp	r2, r3
   1d460:	bne	1d4a8 <__assert_fail@plt+0x9fa4>
   1d464:	add	sp, sp, #24
   1d468:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d46c:	mov	r2, r9
   1d470:	movw	r1, #65516	; 0xffec
   1d474:	mov	r0, #1
   1d478:	movt	r1, #3
   1d47c:	bl	13204 <__printf_chk@plt>
   1d480:	b	1d41c <__assert_fail@plt+0x9f18>
   1d484:	movw	r1, #64160	; 0xfaa0
   1d488:	movw	r3, #15800	; 0x3db8
   1d48c:	movt	r1, #3
   1d490:	movt	r3, #4
   1d494:	mov	r2, #4
   1d498:	mov	r0, #1
   1d49c:	add	r5, sl, #6
   1d4a0:	bl	13204 <__printf_chk@plt>
   1d4a4:	b	1d41c <__assert_fail@plt+0x9f18>
   1d4a8:	bl	12dc0 <__stack_chk_fail@plt>
   1d4ac:	mov	r2, #5
   1d4b0:	movw	r0, #60748	; 0xed4c
   1d4b4:	movw	r1, #63808	; 0xf940
   1d4b8:	movt	r0, #3
   1d4bc:	movt	r1, #3
   1d4c0:	bl	12d84 <dcgettext@plt>
   1d4c4:	mov	r1, #0
   1d4c8:	mov	r2, r0
   1d4cc:	mov	r0, #1
   1d4d0:	bl	12f70 <error@plt>
   1d4d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4d8:	add	fp, sp, #32
   1d4dc:	sub	sp, sp, #140	; 0x8c
   1d4e0:	movw	r6, #37688	; 0x9338
   1d4e4:	movt	r6, #5
   1d4e8:	str	r2, [fp, #-124]	; 0xffffff84
   1d4ec:	mov	r8, r1
   1d4f0:	ldrh	r4, [r1, #10]
   1d4f4:	mov	r7, r0
   1d4f8:	ldr	r2, [r6]
   1d4fc:	cmp	r4, #0
   1d500:	str	r6, [fp, #-112]	; 0xffffff90
   1d504:	str	r3, [fp, #-116]	; 0xffffff8c
   1d508:	ldr	r6, [fp, #4]
   1d50c:	str	r2, [fp, #-40]	; 0xffffffd8
   1d510:	beq	1d610 <__assert_fail@plt+0xa10c>
   1d514:	cmp	r4, #127	; 0x7f
   1d518:	bhi	1dd7c <__assert_fail@plt+0xa878>
   1d51c:	lsl	r3, r4, #3
   1d520:	add	r3, r3, #8
   1d524:	mov	r0, r7
   1d528:	sub	sp, sp, r3
   1d52c:	ldr	r1, [r8, #12]
   1d530:	mov	r2, r4
   1d534:	mov	r3, #1
   1d538:	bl	12f64 <gelf_fsize@plt>
   1d53c:	cmp	r6, #0
   1d540:	add	r5, sp, #24
   1d544:	mov	ip, r0
   1d548:	beq	1d628 <__assert_fail@plt+0xa124>
   1d54c:	ldr	sl, [r6]
   1d550:	cmp	r0, sl
   1d554:	bcs	1d568 <__assert_fail@plt+0xa064>
   1d558:	ldrb	r3, [r8, #16]
   1d55c:	and	r3, r3, #223	; 0xdf
   1d560:	cmp	r3, #66	; 0x42
   1d564:	beq	1d944 <__assert_fail@plt+0xa440>
   1d568:	ldrh	r3, [r8, #10]
   1d56c:	cmp	r3, #0
   1d570:	beq	1d61c <__assert_fail@plt+0xa118>
   1d574:	mov	r3, ip
   1d578:	mov	r9, r5
   1d57c:	rsb	sl, ip, sl
   1d580:	str	sl, [r6]
   1d584:	ldrh	lr, [r8, #8]
   1d588:	mov	r0, r7
   1d58c:	ldr	r1, [r8, #12]
   1d590:	mov	r2, r4
   1d594:	str	r3, [sp, #4]
   1d598:	mov	r3, r9
   1d59c:	ldr	sl, [fp, #-124]	; 0xffffff84
   1d5a0:	add	lr, sl, lr
   1d5a4:	str	lr, [sp]
   1d5a8:	str	ip, [fp, #-148]	; 0xffffff6c
   1d5ac:	bl	15530 <__assert_fail@plt+0x202c>
   1d5b0:	ldr	r0, [r8, #12]
   1d5b4:	ldr	ip, [fp, #-148]	; 0xffffff6c
   1d5b8:	cmp	r0, #1
   1d5bc:	beq	1da90 <__assert_fail@plt+0xa58c>
   1d5c0:	ldrb	sl, [r8, #16]
   1d5c4:	cmp	sl, #99	; 0x63
   1d5c8:	beq	1dab4 <__assert_fail@plt+0xa5b0>
   1d5cc:	bls	1d634 <__assert_fail@plt+0xa130>
   1d5d0:	cmp	sl, #115	; 0x73
   1d5d4:	beq	1d97c <__assert_fail@plt+0xa478>
   1d5d8:	bhi	1da38 <__assert_fail@plt+0xa534>
   1d5dc:	cmp	sl, #100	; 0x64
   1d5e0:	beq	1d9b4 <__assert_fail@plt+0xa4b0>
   1d5e4:	cmp	sl, #104	; 0x68
   1d5e8:	beq	1d710 <__assert_fail@plt+0xa20c>
   1d5ec:	ldr	ip, [r8]
   1d5f0:	mov	r0, #0
   1d5f4:	mov	r3, sl
   1d5f8:	mov	r1, r0
   1d5fc:	movw	r2, #272	; 0x110
   1d600:	movt	r2, #4
   1d604:	str	ip, [sp]
   1d608:	bl	12f70 <error@plt>
   1d60c:	b	1d710 <__assert_fail@plt+0xa20c>
   1d610:	mov	r3, #8
   1d614:	mov	r4, #1
   1d618:	b	1d520 <__assert_fail@plt+0xa01c>
   1d61c:	ldrb	r3, [r8, #16]
   1d620:	cmp	r3, #10
   1d624:	bne	1d574 <__assert_fail@plt+0xa070>
   1d628:	mov	r3, ip
   1d62c:	mov	r9, r5
   1d630:	b	1d584 <__assert_fail@plt+0xa080>
   1d634:	cmp	sl, #66	; 0x42
   1d638:	beq	1d740 <__assert_fail@plt+0xa23c>
   1d63c:	bhi	1d730 <__assert_fail@plt+0xa22c>
   1d640:	cmp	sl, #10
   1d644:	bne	1d5ec <__assert_fail@plt+0xa0e8>
   1d648:	ldrh	r3, [r8, #10]
   1d64c:	cmp	r3, #0
   1d650:	bne	1dd60 <__assert_fail@plt+0xa85c>
   1d654:	cmp	r6, #0
   1d658:	beq	1ddec <__assert_fail@plt+0xa8e8>
   1d65c:	ldr	r2, [r8]
   1d660:	cmp	r2, #0
   1d664:	bne	1ddd0 <__assert_fail@plt+0xa8cc>
   1d668:	ldrh	r3, [r8, #8]
   1d66c:	ldr	r4, [r6]
   1d670:	cmp	r3, r4
   1d674:	bcs	1d710 <__assert_fail@plt+0xa20c>
   1d678:	ldr	sl, [fp, #-124]	; 0xffffff84
   1d67c:	subs	r4, r4, r3
   1d680:	str	r2, [r6]
   1d684:	add	r7, sl, r3
   1d688:	bne	1d6cc <__assert_fail@plt+0xa1c8>
   1d68c:	b	1db4c <__assert_fail@plt+0xa648>
   1d690:	rsb	r3, r7, r0
   1d694:	mov	r5, r7
   1d698:	str	r7, [sp, #4]
   1d69c:	add	r7, r0, #1
   1d6a0:	str	r3, [sp]
   1d6a4:	movw	r1, #260	; 0x104
   1d6a8:	movw	r3, #15800	; 0x3db8
   1d6ac:	movt	r1, #4
   1d6b0:	mov	r0, #1
   1d6b4:	movt	r3, #4
   1d6b8:	mov	r2, #4
   1d6bc:	rsb	r5, r7, r5
   1d6c0:	bl	13204 <__printf_chk@plt>
   1d6c4:	adds	r4, r4, r5
   1d6c8:	beq	1db4c <__assert_fail@plt+0xa648>
   1d6cc:	mov	r0, r7
   1d6d0:	mov	r1, #10
   1d6d4:	mov	r2, r4
   1d6d8:	bl	13270 <memchr@plt>
   1d6dc:	cmp	r0, #0
   1d6e0:	bne	1d690 <__assert_fail@plt+0xa18c>
   1d6e4:	str	r4, [sp]
   1d6e8:	movw	r1, #260	; 0x104
   1d6ec:	str	r7, [sp, #4]
   1d6f0:	movt	r1, #4
   1d6f4:	movw	r3, #15800	; 0x3db8
   1d6f8:	mov	r0, #1
   1d6fc:	movt	r3, #4
   1d700:	mov	r2, #4
   1d704:	bl	13204 <__printf_chk@plt>
   1d708:	mov	sl, #75	; 0x4b
   1d70c:	str	sl, [fp, #-116]	; 0xffffff8c
   1d710:	ldr	r7, [fp, #-112]	; 0xffffff90
   1d714:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1d718:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1d71c:	ldr	r3, [r7]
   1d720:	cmp	r2, r3
   1d724:	bne	1dd5c <__assert_fail@plt+0xa858>
   1d728:	sub	sp, fp, #32
   1d72c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d730:	cmp	sl, #84	; 0x54
   1d734:	beq	1dafc <__assert_fail@plt+0xa5f8>
   1d738:	cmp	sl, #98	; 0x62
   1d73c:	bne	1d5ec <__assert_fail@plt+0xa0e8>
   1d740:	ands	r5, ip, #3
   1d744:	bne	1ddb4 <__assert_fail@plt+0xa8b0>
   1d748:	mul	ip, ip, r4
   1d74c:	add	r6, r9, ip
   1d750:	str	r6, [fp, #-124]	; 0xffffff84
   1d754:	cmp	r9, r6
   1d758:	lsl	ip, ip, #3
   1d75c:	str	ip, [fp, #-136]	; 0xffffff78
   1d760:	bcs	1dd44 <__assert_fail@plt+0xa840>
   1d764:	mov	r4, r9
   1d768:	ldr	r0, [r4], #4
   1d76c:	bl	3bbec <__assert_fail@plt+0x286e8>
   1d770:	cmp	r4, r6
   1d774:	add	r5, r5, r0
   1d778:	bcc	1d768 <__assert_fail@plt+0xa264>
   1d77c:	ldr	r7, [fp, #-136]	; 0xffffff78
   1d780:	subs	r2, sl, #98	; 0x62
   1d784:	rsbs	sl, r2, #0
   1d788:	str	sp, [fp, #-140]	; 0xffffff74
   1d78c:	adcs	sl, sl, r2
   1d790:	cmp	r5, r7, lsr #1
   1d794:	bls	1dd0c <__assert_fail@plt+0xa808>
   1d798:	rsb	r2, r5, r7
   1d79c:	mov	r3, #0
   1d7a0:	mov	r6, #1
   1d7a4:	str	r6, [fp, #-128]	; 0xffffff80
   1d7a8:	lsl	r2, r2, #4
   1d7ac:	add	r2, r2, #8
   1d7b0:	sub	sp, sp, r2
   1d7b4:	add	r7, sp, #24
   1d7b8:	str	r7, [fp, #-132]	; 0xffffff7c
   1d7bc:	strb	r3, [sp, #24]
   1d7c0:	ldr	r7, [fp, #-132]	; 0xffffff7c
   1d7c4:	mov	r6, #0
   1d7c8:	str	r8, [fp, #-144]	; 0xffffff70
   1d7cc:	mov	r5, r6
   1d7d0:	mov	r8, r9
   1d7d4:	ldr	r0, [fp, #-128]	; 0xffffff80
   1d7d8:	rsb	r3, r8, r9
   1d7dc:	ldr	r4, [r9]
   1d7e0:	cmp	r0, #0
   1d7e4:	lsl	r3, r3, #3
   1d7e8:	mvnne	r4, r4
   1d7ec:	cmp	r4, #0
   1d7f0:	movne	lr, r5
   1d7f4:	movne	r5, r3
   1d7f8:	bne	1d834 <__assert_fail@plt+0xa330>
   1d7fc:	b	1d8a4 <__assert_fail@plt+0xa3a0>
   1d800:	rsb	r2, sl, r5
   1d804:	mov	r0, r7
   1d808:	str	r2, [sp]
   1d80c:	movw	r3, #28016	; 0x6d70
   1d810:	mov	r1, #1
   1d814:	movt	r3, #4
   1d818:	mvn	r2, #0
   1d81c:	mov	r6, lr
   1d820:	bl	13150 <__sprintf_chk@plt>
   1d824:	add	r7, r7, r0
   1d828:	cmp	r4, #0
   1d82c:	beq	1d8a4 <__assert_fail@plt+0xa3a0>
   1d830:	mov	lr, r5
   1d834:	rbit	r3, r4
   1d838:	cmp	r4, #0
   1d83c:	clz	r3, r3
   1d840:	mvneq	r3, #0
   1d844:	add	r3, r3, #1
   1d848:	cmp	r3, #31
   1d84c:	add	r5, r5, r3
   1d850:	lsrls	r4, r4, r3
   1d854:	movhi	r4, #0
   1d858:	cmp	lr, #0
   1d85c:	beq	1d800 <__assert_fail@plt+0xa2fc>
   1d860:	add	r3, lr, #1
   1d864:	cmp	r3, r5
   1d868:	addeq	r6, r6, #1
   1d86c:	beq	1d828 <__assert_fail@plt+0xa324>
   1d870:	cmp	r6, #0
   1d874:	bne	1da04 <__assert_fail@plt+0xa500>
   1d878:	rsb	r2, sl, r5
   1d87c:	mov	r0, r7
   1d880:	str	r2, [sp]
   1d884:	movw	r3, #128	; 0x80
   1d888:	mov	r1, #1
   1d88c:	movt	r3, #4
   1d890:	mvn	r2, #0
   1d894:	bl	13150 <__sprintf_chk@plt>
   1d898:	cmp	r4, #0
   1d89c:	add	r7, r7, r0
   1d8a0:	bne	1d830 <__assert_fail@plt+0xa32c>
   1d8a4:	ldr	r1, [fp, #-124]	; 0xffffff84
   1d8a8:	add	r9, r9, #4
   1d8ac:	cmp	r9, r1
   1d8b0:	bcc	1d7d4 <__assert_fail@plt+0xa2d0>
   1d8b4:	cmp	r5, #0
   1d8b8:	cmpne	r6, #0
   1d8bc:	ldr	r8, [fp, #-144]	; 0xffffff70
   1d8c0:	beq	1d8f4 <__assert_fail@plt+0xa3f0>
   1d8c4:	ldr	r6, [fp, #-136]	; 0xffffff78
   1d8c8:	add	r3, r5, #1
   1d8cc:	cmp	r3, r6
   1d8d0:	beq	1d8f4 <__assert_fail@plt+0xa3f0>
   1d8d4:	rsb	r5, sl, r5
   1d8d8:	movw	r3, #140	; 0x8c
   1d8dc:	mov	r0, r7
   1d8e0:	str	r5, [sp]
   1d8e4:	mov	r1, #1
   1d8e8:	movt	r3, #4
   1d8ec:	mvn	r2, #0
   1d8f0:	bl	13150 <__sprintf_chk@plt>
   1d8f4:	ldr	r1, [r8]
   1d8f8:	movw	r2, #9016	; 0x2338
   1d8fc:	ldr	r7, [fp, #-132]	; 0xffffff7c
   1d900:	movt	r2, #4
   1d904:	movw	r3, #4
   1d908:	movt	r3, #4
   1d90c:	str	r1, [sp]
   1d910:	mov	r1, #44	; 0x2c
   1d914:	str	r7, [sp, #8]
   1d918:	ldr	sl, [fp, #-128]	; 0xffffff80
   1d91c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1d920:	cmp	sl, #0
   1d924:	moveq	r3, r2
   1d928:	mov	r2, #75	; 0x4b
   1d92c:	str	r3, [sp, #4]
   1d930:	mov	r3, #0
   1d934:	bl	1d37c <__assert_fail@plt+0x9e78>
   1d938:	str	r0, [fp, #-116]	; 0xffffff8c
   1d93c:	ldr	sp, [fp, #-140]	; 0xffffff74
   1d940:	b	1d710 <__assert_fail@plt+0xa20c>
   1d944:	add	r3, sl, #14
   1d948:	mov	r0, sl
   1d94c:	bic	r3, r3, #7
   1d950:	mov	r1, ip
   1d954:	sub	sp, sp, r3
   1d958:	str	ip, [fp, #-148]	; 0xffffff6c
   1d95c:	bl	3b39c <__assert_fail@plt+0x27e98>
   1d960:	ldr	ip, [fp, #-148]	; 0xffffff6c
   1d964:	add	r9, sp, #24
   1d968:	mul	r4, r0, r4
   1d96c:	mul	r3, ip, r4
   1d970:	rsb	sl, r3, sl
   1d974:	str	sl, [r6]
   1d978:	b	1d584 <__assert_fail@plt+0xa080>
   1d97c:	ldr	r2, [r8]
   1d980:	movw	r3, #172	; 0xac
   1d984:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1d988:	movt	r3, #4
   1d98c:	str	r4, [sp, #8]
   1d990:	mov	r1, #44	; 0x2c
   1d994:	str	r2, [sp]
   1d998:	mov	r2, #75	; 0x4b
   1d99c:	str	r3, [sp, #4]
   1d9a0:	mov	r3, #0
   1d9a4:	str	r5, [sp, #12]
   1d9a8:	bl	1d37c <__assert_fail@plt+0x9e78>
   1d9ac:	str	r0, [fp, #-116]	; 0xffffff8c
   1d9b0:	b	1d710 <__assert_fail@plt+0xa20c>
   1d9b4:	cmp	r4, #1
   1d9b8:	bne	1dd98 <__assert_fail@plt+0xa894>
   1d9bc:	cmp	r0, #14
   1d9c0:	ldrls	pc, [pc, r0, lsl #2]
   1d9c4:	b	1dd08 <__assert_fail@plt+0xa804>
   1d9c8:	andeq	sp, r1, r8, lsl ip
   1d9cc:	andeq	sp, r1, r8, lsl #26
   1d9d0:	andeq	sp, r1, r8, lsl #26
   1d9d4:	andeq	sp, r1, r8, lsl #26
   1d9d8:	andeq	sp, r1, r8, lsr #24
   1d9dc:	andeq	sp, r1, r8, lsl #26
   1d9e0:	andeq	sp, r1, r8, lsl #26
   1d9e4:	andeq	sp, r1, r8, lsl #26
   1d9e8:	andeq	sp, r1, r8, lsl #26
   1d9ec:	andeq	sp, r1, r8, lsl #26
   1d9f0:	muleq	r1, r0, fp
   1d9f4:	andeq	sp, r1, r8, lsl #26
   1d9f8:	muleq	r1, r0, fp
   1d9fc:	andeq	sp, r1, r8, asr fp
   1da00:	andeq	sp, r1, r8, asr fp
   1da04:	rsb	lr, sl, lr
   1da08:	rsb	r2, sl, r5
   1da0c:	mov	r0, r7
   1da10:	str	r2, [sp, #4]
   1da14:	str	lr, [sp]
   1da18:	movw	r3, #132	; 0x84
   1da1c:	mov	r1, #1
   1da20:	movt	r3, #4
   1da24:	mvn	r2, #0
   1da28:	mov	r6, #0
   1da2c:	bl	13150 <__sprintf_chk@plt>
   1da30:	add	r7, r7, r0
   1da34:	b	1d828 <__assert_fail@plt+0xa324>
   1da38:	cmp	sl, #120	; 0x78
   1da3c:	bne	1daf4 <__assert_fail@plt+0xa5f0>
   1da40:	cmp	r4, #1
   1da44:	bne	1de64 <__assert_fail@plt+0xa960>
   1da48:	cmp	r0, #14
   1da4c:	ldrls	pc, [pc, r0, lsl #2]
   1da50:	b	1dd08 <__assert_fail@plt+0xa804>
   1da54:	strdeq	sp, [r1], -r8
   1da58:	andeq	sp, r1, r8, lsl #26
   1da5c:	andeq	sp, r1, r8, lsl #26
   1da60:	andeq	sp, r1, r8, lsl #26
   1da64:	andeq	sp, r1, r8, ror #25
   1da68:	andeq	sp, r1, r8, lsl #26
   1da6c:	andeq	sp, r1, r8, lsl #26
   1da70:	andeq	sp, r1, r8, lsl #26
   1da74:	andeq	sp, r1, r8, lsl #26
   1da78:	andeq	sp, r1, r8, lsl #26
   1da7c:	muleq	r1, r0, fp
   1da80:	andeq	sp, r1, r8, lsl #26
   1da84:	ldrdeq	sp, [r1], -r8
   1da88:	andeq	sp, r1, r8, asr #25
   1da8c:	andeq	sp, r1, r8, asr fp
   1da90:	mov	r0, r7
   1da94:	bl	12e38 <gelf_getclass@plt>
   1da98:	ldrb	sl, [r8, #16]
   1da9c:	ldr	ip, [fp, #-148]	; 0xffffff6c
   1daa0:	cmp	r0, #1
   1daa4:	movne	r0, #13
   1daa8:	moveq	r0, #12
   1daac:	cmp	sl, #99	; 0x63
   1dab0:	bne	1d5cc <__assert_fail@plt+0xa0c8>
   1dab4:	cmp	r4, #1
   1dab8:	bne	1de08 <__assert_fail@plt+0xa904>
   1dabc:	ldr	r2, [r8]
   1dac0:	movw	r3, #168	; 0xa8
   1dac4:	movt	r3, #4
   1dac8:	str	r3, [sp, #4]
   1dacc:	mov	r1, #44	; 0x2c
   1dad0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1dad4:	mov	r3, #0
   1dad8:	str	r2, [sp]
   1dadc:	mov	r2, #75	; 0x4b
   1dae0:	ldrb	ip, [r5]
   1dae4:	str	ip, [sp, #8]
   1dae8:	bl	1d37c <__assert_fail@plt+0x9e78>
   1daec:	str	r0, [fp, #-116]	; 0xffffff8c
   1daf0:	b	1d710 <__assert_fail@plt+0xa20c>
   1daf4:	cmp	sl, #212	; 0xd4
   1daf8:	bne	1d5ec <__assert_fail@plt+0xa0e8>
   1dafc:	cmp	r4, #2
   1db00:	bne	1de48 <__assert_fail@plt+0xa944>
   1db04:	cmp	r0, #14
   1db08:	ldrls	pc, [pc, r0, lsl #2]
   1db0c:	b	1dd08 <__assert_fail@plt+0xa804>
   1db10:			; <UNDEFINED> instruction: 0x0001dcb0
   1db14:	andeq	sp, r1, r8, lsl #26
   1db18:	andeq	sp, r1, r8, lsl #26
   1db1c:	andeq	sp, r1, r8, lsl #26
   1db20:	muleq	r1, r8, ip
   1db24:	andeq	sp, r1, r8, lsl #26
   1db28:	andeq	sp, r1, r8, lsl #26
   1db2c:	andeq	sp, r1, r8, lsl #26
   1db30:	andeq	sp, r1, r8, lsl #26
   1db34:	andeq	sp, r1, r8, lsl #26
   1db38:	andeq	sp, r1, ip, ror ip
   1db3c:	andeq	sp, r1, r8, lsl #26
   1db40:	andeq	sp, r1, r0, ror #24
   1db44:	andeq	sp, r1, r8, asr #23
   1db48:	andeq	sp, r1, r8, asr #23
   1db4c:	mov	r6, #75	; 0x4b
   1db50:	str	r6, [fp, #-116]	; 0xffffff8c
   1db54:	b	1d710 <__assert_fail@plt+0xa20c>
   1db58:	ldr	r2, [r8]
   1db5c:	movw	r3, #48	; 0x30
   1db60:	movt	r3, #4
   1db64:	str	r3, [sp, #4]
   1db68:	mov	r1, #44	; 0x2c
   1db6c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1db70:	mov	r3, #0
   1db74:	str	r2, [sp]
   1db78:	mov	r2, #75	; 0x4b
   1db7c:	ldrd	r4, [r5]
   1db80:	strd	r4, [sp, #8]
   1db84:	bl	1d37c <__assert_fail@plt+0x9e78>
   1db88:	str	r0, [fp, #-116]	; 0xffffff8c
   1db8c:	b	1d710 <__assert_fail@plt+0xa20c>
   1db90:	ldr	r2, [r8]
   1db94:	movw	r3, #26624	; 0x6800
   1db98:	movt	r3, #4
   1db9c:	str	r3, [sp, #4]
   1dba0:	mov	r1, #44	; 0x2c
   1dba4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1dba8:	mov	r3, #0
   1dbac:	str	r2, [sp]
   1dbb0:	mov	r2, #75	; 0x4b
   1dbb4:	ldr	ip, [r5]
   1dbb8:	str	ip, [sp, #8]
   1dbbc:	bl	1d37c <__assert_fail@plt+0x9e78>
   1dbc0:	str	r0, [fp, #-116]	; 0xffffff8c
   1dbc4:	b	1d710 <__assert_fail@plt+0xa20c>
   1dbc8:	ldrd	r2, [r5]
   1dbcc:	ldrd	r4, [r5, #8]
   1dbd0:	strd	r2, [fp, #-124]	; 0xffffff84
   1dbd4:	cmp	sl, #212	; 0xd4
   1dbd8:	beq	1de24 <__assert_fail@plt+0xa920>
   1dbdc:	ldr	r2, [r8]
   1dbe0:	movw	r3, #156	; 0x9c
   1dbe4:	ldrd	r6, [fp, #-124]	; 0xffffff84
   1dbe8:	movt	r3, #4
   1dbec:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1dbf0:	mov	r1, #44	; 0x2c
   1dbf4:	str	r2, [sp]
   1dbf8:	mov	r2, #75	; 0x4b
   1dbfc:	str	r3, [sp, #4]
   1dc00:	mov	r3, #0
   1dc04:	strd	r6, [sp, #8]
   1dc08:	strd	r4, [sp, #16]
   1dc0c:	bl	1d37c <__assert_fail@plt+0x9e78>
   1dc10:	str	r0, [fp, #-116]	; 0xffffff8c
   1dc14:	b	1d710 <__assert_fail@plt+0xa20c>
   1dc18:	movw	r3, #26624	; 0x6800
   1dc1c:	ldr	r2, [r8]
   1dc20:	movt	r3, #4
   1dc24:	b	1dac8 <__assert_fail@plt+0xa5c4>
   1dc28:	ldr	r2, [r8]
   1dc2c:	movw	r3, #26624	; 0x6800
   1dc30:	movt	r3, #4
   1dc34:	str	r3, [sp, #4]
   1dc38:	mov	r1, #44	; 0x2c
   1dc3c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1dc40:	mov	r3, #0
   1dc44:	str	r2, [sp]
   1dc48:	mov	r2, #75	; 0x4b
   1dc4c:	ldrh	ip, [r5]
   1dc50:	str	ip, [sp, #8]
   1dc54:	bl	1d37c <__assert_fail@plt+0x9e78>
   1dc58:	str	r0, [fp, #-116]	; 0xffffff8c
   1dc5c:	b	1d710 <__assert_fail@plt+0xa20c>
   1dc60:	ldr	r6, [r5]
   1dc64:	mov	r3, #0
   1dc68:	ldr	r4, [r5, #4]
   1dc6c:	mov	r5, #0
   1dc70:	mov	r2, r6
   1dc74:	strd	r2, [fp, #-124]	; 0xffffff84
   1dc78:	b	1dbd4 <__assert_fail@plt+0xa6d0>
   1dc7c:	ldr	r6, [r5]
   1dc80:	ldr	r4, [r5, #4]
   1dc84:	mov	r2, r6
   1dc88:	asr	r3, r6, #31
   1dc8c:	asr	r5, r4, #31
   1dc90:	strd	r2, [fp, #-124]	; 0xffffff84
   1dc94:	b	1dbd4 <__assert_fail@plt+0xa6d0>
   1dc98:	ldrh	r2, [r5]
   1dc9c:	mov	r3, #0
   1dca0:	ldrh	r4, [r5, #2]
   1dca4:	mov	r5, #0
   1dca8:	strd	r2, [fp, #-124]	; 0xffffff84
   1dcac:	b	1dbd4 <__assert_fail@plt+0xa6d0>
   1dcb0:	ldrb	r2, [r5]
   1dcb4:	mov	r3, #0
   1dcb8:	ldrb	r4, [r5, #1]
   1dcbc:	mov	r5, #0
   1dcc0:	strd	r2, [fp, #-124]	; 0xffffff84
   1dcc4:	b	1dbd4 <__assert_fail@plt+0xa6d0>
   1dcc8:	movw	r3, #80	; 0x50
   1dccc:	ldr	r2, [r8]
   1dcd0:	movt	r3, #4
   1dcd4:	b	1db64 <__assert_fail@plt+0xa660>
   1dcd8:	movw	r3, #72	; 0x48
   1dcdc:	ldr	r2, [r8]
   1dce0:	movt	r3, #4
   1dce4:	b	1db9c <__assert_fail@plt+0xa698>
   1dce8:	movw	r3, #64	; 0x40
   1dcec:	ldr	r2, [r8]
   1dcf0:	movt	r3, #4
   1dcf4:	b	1dc34 <__assert_fail@plt+0xa730>
   1dcf8:	movw	r3, #56	; 0x38
   1dcfc:	ldr	r2, [r8]
   1dd00:	movt	r3, #4
   1dd04:	b	1dac8 <__assert_fail@plt+0xa5c4>
   1dd08:	bl	13474 <abort@plt>
   1dd0c:	lsl	r3, r5, #4
   1dd10:	add	r3, r3, #1
   1dd14:	add	r3, r3, #7
   1dd18:	ldr	r6, [fp, #-124]	; 0xffffff84
   1dd1c:	bic	r2, r3, #7
   1dd20:	mov	r3, #0
   1dd24:	sub	sp, sp, r2
   1dd28:	cmp	r9, r6
   1dd2c:	add	r7, sp, #24
   1dd30:	str	r3, [fp, #-128]	; 0xffffff80
   1dd34:	str	r7, [fp, #-132]	; 0xffffff7c
   1dd38:	strb	r3, [sp, #24]
   1dd3c:	bcc	1d7c0 <__assert_fail@plt+0xa2bc>
   1dd40:	b	1d8f4 <__assert_fail@plt+0xa3f0>
   1dd44:	subs	r3, sl, #98	; 0x62
   1dd48:	str	sp, [fp, #-140]	; 0xffffff74
   1dd4c:	rsbs	sl, r3, #0
   1dd50:	adcs	sl, sl, r3
   1dd54:	mov	r3, #1
   1dd58:	b	1dd14 <__assert_fail@plt+0xa810>
   1dd5c:	bl	12dc0 <__stack_chk_fail@plt>
   1dd60:	movw	r0, #180	; 0xb4
   1dd64:	movw	r1, #24
   1dd68:	movt	r0, #4
   1dd6c:	movt	r1, #4
   1dd70:	movw	r2, #11543	; 0x2d17
   1dd74:	ldr	r3, [pc, #260]	; 1de80 <__assert_fail@plt+0xa97c>
   1dd78:	bl	13504 <__assert_fail@plt>
   1dd7c:	movw	r0, #12
   1dd80:	movw	r1, #24
   1dd84:	movt	r0, #4
   1dd88:	movt	r1, #4
   1dd8c:	movw	r2, #11346	; 0x2c52
   1dd90:	ldr	r3, [pc, #232]	; 1de80 <__assert_fail@plt+0xa97c>
   1dd94:	bl	13504 <__assert_fail@plt>
   1dd98:	movw	r0, #36	; 0x24
   1dd9c:	movw	r1, #24
   1dda0:	movt	r0, #4
   1dda4:	movt	r1, #4
   1dda8:	movw	r2, #11390	; 0x2c7e
   1ddac:	ldr	r3, [pc, #204]	; 1de80 <__assert_fail@plt+0xa97c>
   1ddb0:	bl	13504 <__assert_fail@plt>
   1ddb4:	movw	r0, #92	; 0x5c
   1ddb8:	movw	r1, #24
   1ddbc:	movt	r0, #4
   1ddc0:	movt	r1, #4
   1ddc4:	movw	r2, #11423	; 0x2c9f
   1ddc8:	ldr	r3, [pc, #176]	; 1de80 <__assert_fail@plt+0xa97c>
   1ddcc:	bl	13504 <__assert_fail@plt>
   1ddd0:	movw	r0, #232	; 0xe8
   1ddd4:	movw	r1, #24
   1ddd8:	movt	r0, #4
   1dddc:	movt	r1, #4
   1dde0:	movw	r2, #11545	; 0x2d19
   1dde4:	ldr	r3, [pc, #148]	; 1de80 <__assert_fail@plt+0xa97c>
   1dde8:	bl	13504 <__assert_fail@plt>
   1ddec:	movw	r0, #200	; 0xc8
   1ddf0:	movw	r1, #24
   1ddf4:	movt	r0, #4
   1ddf8:	movt	r1, #4
   1ddfc:	movw	r2, #11544	; 0x2d18
   1de00:	ldr	r3, [pc, #120]	; 1de80 <__assert_fail@plt+0xa97c>
   1de04:	bl	13504 <__assert_fail@plt>
   1de08:	movw	r0, #36	; 0x24
   1de0c:	movw	r1, #24
   1de10:	movt	r0, #4
   1de14:	movt	r1, #4
   1de18:	movw	r2, #11531	; 0x2d0b
   1de1c:	ldr	r3, [pc, #92]	; 1de80 <__assert_fail@plt+0xa97c>
   1de20:	bl	13504 <__assert_fail@plt>
   1de24:	mov	r0, r7
   1de28:	sub	r1, fp, #108	; 0x6c
   1de2c:	bl	12c70 <gelf_getehdr@plt>
   1de30:	ldrb	r3, [r0, #5]
   1de34:	cmp	r3, #2
   1de38:	moveq	r3, r5
   1de3c:	mov	r5, #0
   1de40:	moveq	r4, r3
   1de44:	b	1dbdc <__assert_fail@plt+0xa6d8>
   1de48:	movw	r0, #144	; 0x90
   1de4c:	movw	r1, #24
   1de50:	movt	r0, #4
   1de54:	movt	r1, #4
   1de58:	movw	r2, #11495	; 0x2ce7
   1de5c:	ldr	r3, [pc, #28]	; 1de80 <__assert_fail@plt+0xa97c>
   1de60:	bl	13504 <__assert_fail@plt>
   1de64:	movw	r0, #36	; 0x24
   1de68:	movw	r1, #24
   1de6c:	movt	r0, #4
   1de70:	movt	r1, #4
   1de74:	movw	r2, #11406	; 0x2c8e
   1de78:	ldr	r3, [pc]	; 1de80 <__assert_fail@plt+0xa97c>
   1de7c:	bl	13504 <__assert_fail@plt>
   1de80:	andeq	ip, r3, r4, asr r6
   1de84:	push	{r4, r5, r6, lr}
   1de88:	mov	r1, r0
   1de8c:	ldr	ip, [r0, #28]
   1de90:	movw	r6, #37688	; 0x9338
   1de94:	ldr	r2, [r0]
   1de98:	movt	r6, #5
   1de9c:	ldrh	r3, [r1, #26]
   1dea0:	sub	sp, sp, #24
   1dea4:	add	ip, r2, ip, lsl #2
   1dea8:	ldr	lr, [r6]
   1deac:	cmp	r3, #4
   1deb0:	mov	r0, #0
   1deb4:	ldr	ip, [ip, #12]
   1deb8:	str	lr, [sp, #20]
   1debc:	ldrd	r2, [r1, #8]
   1dec0:	ldr	lr, [ip]
   1dec4:	ldrb	r4, [r1, #25]
   1dec8:	ldrb	ip, [r1, #32]
   1decc:	str	r0, [sp, #4]
   1ded0:	str	r0, [sp, #8]
   1ded4:	str	r0, [sp, #12]
   1ded8:	str	r0, [sp, #16]
   1dedc:	bhi	1df28 <__assert_fail@plt+0xaa24>
   1dee0:	cmp	ip, #2
   1dee4:	lsleq	r4, r4, #2
   1dee8:	movne	ip, #3
   1deec:	mvnne	r0, #0
   1def0:	smlabbne	r4, ip, r4, r0
   1def4:	addeq	r4, r4, #7
   1def8:	adds	r2, r2, r4
   1defc:	add	r0, sp, #4
   1df00:	add	r2, lr, r2
   1df04:	str	r1, [sp, #8]
   1df08:	str	r2, [sp, #4]
   1df0c:	bl	154b8 <__assert_fail@plt+0x1fb4>
   1df10:	ldr	r2, [sp, #20]
   1df14:	ldr	r3, [r6]
   1df18:	cmp	r2, r3
   1df1c:	bne	1df6c <__assert_fail@plt+0xaa68>
   1df20:	add	sp, sp, #24
   1df24:	pop	{r4, r5, r6, pc}
   1df28:	sub	r5, ip, #4
   1df2c:	mov	r0, #3
   1df30:	cmp	ip, #2
   1df34:	cmpne	r5, #1
   1df38:	smlalbb	r2, r3, r0, r4
   1df3c:	bhi	1df5c <__assert_fail@plt+0xaa58>
   1df40:	and	ip, ip, #251	; 0xfb
   1df44:	adds	r2, r2, #8
   1df48:	cmp	ip, #2
   1df4c:	bne	1defc <__assert_fail@plt+0xa9f8>
   1df50:	uxtb	r4, r4
   1df54:	adds	r2, r2, r4
   1df58:	b	1defc <__assert_fail@plt+0xa9f8>
   1df5c:	cmp	ip, #6
   1df60:	bne	1defc <__assert_fail@plt+0xa9f8>
   1df64:	adds	r2, r2, #8
   1df68:	b	1df50 <__assert_fail@plt+0xaa4c>
   1df6c:	bl	12dc0 <__stack_chk_fail@plt>
   1df70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1df74:	mov	r9, r2
   1df78:	ldr	r3, [r1, #4]
   1df7c:	sub	sp, sp, #16
   1df80:	ldr	r2, [r0, #4]
   1df84:	mov	r8, r0
   1df88:	ldr	r6, [r0]
   1df8c:	ubfx	r5, r3, #0, #29
   1df90:	ldr	r4, [r1]
   1df94:	ubfx	r7, r2, #0, #29
   1df98:	mov	sl, r1
   1df9c:	cmp	r7, r5
   1dfa0:	cmpeq	r6, r4
   1dfa4:	bcc	1e194 <__assert_fail@plt+0xac90>
   1dfa8:	movhi	r0, #1
   1dfac:	bhi	1e18c <__assert_fail@plt+0xac88>
   1dfb0:	ldrb	r2, [r8, #7]
   1dfb4:	lsrs	r3, r2, #7
   1dfb8:	bne	1e188 <__assert_fail@plt+0xac84>
   1dfbc:	ldrb	r3, [r1, #7]
   1dfc0:	lsrs	r4, r3, #7
   1dfc4:	bne	1e188 <__assert_fail@plt+0xac84>
   1dfc8:	ubfx	r0, r2, #5, #1
   1dfcc:	ubfx	r1, r3, #5, #1
   1dfd0:	cmp	r0, r1
   1dfd4:	beq	1e030 <__assert_fail@plt+0xab2c>
   1dfd8:	orr	r3, r3, #128	; 0x80
   1dfdc:	strb	r3, [sl, #7]
   1dfe0:	ldrb	r3, [r8, #7]
   1dfe4:	mov	r2, #5
   1dfe8:	movw	r1, #308	; 0x134
   1dfec:	mov	r0, r4
   1dff0:	orr	r3, r3, #128	; 0x80
   1dff4:	movt	r1, #4
   1dff8:	strb	r3, [r8, #7]
   1dffc:	bl	12d84 <dcgettext@plt>
   1e000:	ldr	lr, [r8]
   1e004:	ldr	ip, [r8, #4]
   1e008:	mov	r3, r9
   1e00c:	mov	r1, r4
   1e010:	ubfx	ip, ip, #0, #29
   1e014:	str	lr, [sp]
   1e018:	str	ip, [sp, #4]
   1e01c:	mov	r2, r0
   1e020:	mov	r0, r4
   1e024:	bl	12f70 <error@plt>
   1e028:	ldrb	r2, [r8, #7]
   1e02c:	ldrb	r3, [sl, #7]
   1e030:	ubfx	r2, r2, #6, #1
   1e034:	ubfx	r1, r3, #6, #1
   1e038:	cmp	r2, r1
   1e03c:	beq	1e090 <__assert_fail@plt+0xab8c>
   1e040:	orr	r3, r3, #128	; 0x80
   1e044:	strb	r3, [sl, #7]
   1e048:	ldrb	r3, [r8, #7]
   1e04c:	mov	r2, #5
   1e050:	movw	r1, #352	; 0x160
   1e054:	mov	r0, #0
   1e058:	orr	r3, r3, #128	; 0x80
   1e05c:	movt	r1, #4
   1e060:	strb	r3, [r8, #7]
   1e064:	bl	12d84 <dcgettext@plt>
   1e068:	ldr	lr, [r8]
   1e06c:	ldr	ip, [r8, #4]
   1e070:	mov	r3, r9
   1e074:	ubfx	ip, ip, #0, #29
   1e078:	str	lr, [sp]
   1e07c:	str	ip, [sp, #4]
   1e080:	mov	r2, r0
   1e084:	mov	r0, #0
   1e088:	mov	r1, r0
   1e08c:	bl	12f70 <error@plt>
   1e090:	ldr	r0, [r8, #8]
   1e094:	bl	1de84 <__assert_fail@plt+0xa980>
   1e098:	mov	r4, r0
   1e09c:	ldr	r0, [sl, #8]
   1e0a0:	mov	r5, r1
   1e0a4:	bl	1de84 <__assert_fail@plt+0xa980>
   1e0a8:	cmp	r5, r1
   1e0ac:	cmpeq	r4, r0
   1e0b0:	beq	1e108 <__assert_fail@plt+0xac04>
   1e0b4:	ldrb	r3, [sl, #7]
   1e0b8:	mov	r2, #5
   1e0bc:	movw	r1, #396	; 0x18c
   1e0c0:	mov	r0, #0
   1e0c4:	orr	r3, r3, #128	; 0x80
   1e0c8:	strb	r3, [sl, #7]
   1e0cc:	ldrb	r3, [r8, #7]
   1e0d0:	movt	r1, #4
   1e0d4:	orr	r3, r3, #128	; 0x80
   1e0d8:	strb	r3, [r8, #7]
   1e0dc:	bl	12d84 <dcgettext@plt>
   1e0e0:	ldr	lr, [r8]
   1e0e4:	ldr	ip, [r8, #4]
   1e0e8:	mov	r3, r9
   1e0ec:	ubfx	ip, ip, #0, #29
   1e0f0:	str	lr, [sp]
   1e0f4:	str	ip, [sp, #4]
   1e0f8:	mov	r2, r0
   1e0fc:	mov	r0, #0
   1e100:	mov	r1, r0
   1e104:	bl	12f70 <error@plt>
   1e108:	ldr	r2, [r8, #12]
   1e10c:	ldr	r3, [sl, #12]
   1e110:	cmp	r2, r3
   1e114:	beq	1e188 <__assert_fail@plt+0xac84>
   1e118:	ldrb	r3, [sl, #7]
   1e11c:	mov	r2, #5
   1e120:	movw	r1, #440	; 0x1b8
   1e124:	mov	r0, #0
   1e128:	orr	r3, r3, #128	; 0x80
   1e12c:	strb	r3, [sl, #7]
   1e130:	ldrb	r3, [r8, #7]
   1e134:	movt	r1, #4
   1e138:	orr	r3, r3, #128	; 0x80
   1e13c:	strb	r3, [r8, #7]
   1e140:	bl	12d84 <dcgettext@plt>
   1e144:	ldr	r7, [r8, #4]
   1e148:	ldr	r6, [r8]
   1e14c:	ubfx	r7, r7, #0, #29
   1e150:	mov	r5, r0
   1e154:	ldr	r0, [sl, #12]
   1e158:	bl	16670 <__assert_fail@plt+0x316c>
   1e15c:	mov	r4, r0
   1e160:	ldr	r0, [sl, #12]
   1e164:	bl	16670 <__assert_fail@plt+0x316c>
   1e168:	stm	sp, {r6, r7}
   1e16c:	mov	r2, r5
   1e170:	str	r4, [sp, #8]
   1e174:	mov	r3, r9
   1e178:	str	r0, [sp, #12]
   1e17c:	mov	r0, #0
   1e180:	mov	r1, r0
   1e184:	bl	12f70 <error@plt>
   1e188:	mov	r0, #0
   1e18c:	add	sp, sp, #16
   1e190:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e194:	mvn	r0, #0
   1e198:	b	1e18c <__assert_fail@plt+0xac88>
   1e19c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1a0:	sub	sp, sp, #20
   1e1a4:	ldr	ip, [r2]
   1e1a8:	mov	fp, r3
   1e1ac:	ldr	sl, [r0]
   1e1b0:	ldr	r9, [sp, #68]	; 0x44
   1e1b4:	cmp	sl, ip
   1e1b8:	ldrls	r8, [r1]
   1e1bc:	addls	r8, r8, ip, lsl #4
   1e1c0:	bls	1e244 <__assert_fail@plt+0xad40>
   1e1c4:	ldr	r3, [r1]
   1e1c8:	lsl	r1, ip, #4
   1e1cc:	str	r1, [sp, #12]
   1e1d0:	asr	r7, r9, #31
   1e1d4:	add	r8, r3, r1
   1e1d8:	mov	r6, r9
   1e1dc:	ldr	r4, [r3, ip, lsl #4]
   1e1e0:	ldr	r1, [r8, #4]
   1e1e4:	ubfx	r5, r1, #0, #29
   1e1e8:	cmp	r7, r5
   1e1ec:	cmpeq	r6, r4
   1e1f0:	bls	1e244 <__assert_fail@plt+0xad40>
   1e1f4:	ldr	r4, [sp, #12]
   1e1f8:	str	r3, [sp, #12]
   1e1fc:	add	r1, r4, #16
   1e200:	add	r1, r3, r1
   1e204:	b	1e220 <__assert_fail@plt+0xad1c>
   1e208:	ldr	r3, [r8, #4]
   1e20c:	ldr	r4, [r8]
   1e210:	ubfx	r5, r3, #0, #29
   1e214:	cmp	r5, r7
   1e218:	cmpeq	r4, r6
   1e21c:	bcs	1e244 <__assert_fail@plt+0xad40>
   1e220:	add	ip, ip, #1
   1e224:	str	ip, [r2]
   1e228:	ldr	sl, [r0]
   1e22c:	mov	r8, r1
   1e230:	add	r1, r1, #16
   1e234:	cmp	ip, sl
   1e238:	bcc	1e208 <__assert_fail@plt+0xad04>
   1e23c:	ldr	r3, [sp, #12]
   1e240:	add	r8, r3, ip, lsl #4
   1e244:	cmp	ip, sl
   1e248:	beq	1e37c <__assert_fail@plt+0xae78>
   1e24c:	ldr	r4, [sp, #72]	; 0x48
   1e250:	ldr	r1, [sp, #76]	; 0x4c
   1e254:	ldr	r6, [r8]
   1e258:	ldr	ip, [r4]
   1e25c:	ldr	r4, [r8, #4]
   1e260:	rsb	r0, ip, r1
   1e264:	mov	r2, r6
   1e268:	add	r0, r9, r0
   1e26c:	bic	r3, r4, #-536870912	; 0xe0000000
   1e270:	asr	r1, r0, #31
   1e274:	cmp	r3, r1
   1e278:	cmpeq	r2, r0
   1e27c:	bcs	1e37c <__assert_fail@plt+0xae78>
   1e280:	asr	r5, r9, #31
   1e284:	mov	r4, r9
   1e288:	cmp	r3, r5
   1e28c:	cmpeq	r2, r4
   1e290:	bne	1e324 <__assert_fail@plt+0xae20>
   1e294:	cmp	fp, #0
   1e298:	beq	1e2b0 <__assert_fail@plt+0xadac>
   1e29c:	ldrb	r3, [r8, #7]
   1e2a0:	tst	r3, #32
   1e2a4:	moveq	r3, #4
   1e2a8:	movne	r3, #8
   1e2ac:	strb	r3, [fp]
   1e2b0:	ldr	r3, [sp, #56]	; 0x38
   1e2b4:	cmp	r3, #0
   1e2b8:	beq	1e2d4 <__assert_fail@plt+0xadd0>
   1e2bc:	ldrb	r3, [r8, #7]
   1e2c0:	ldr	r4, [sp, #56]	; 0x38
   1e2c4:	tst	r3, #64	; 0x40
   1e2c8:	moveq	r3, #4
   1e2cc:	movne	r3, #8
   1e2d0:	strb	r3, [r4]
   1e2d4:	ldr	r1, [sp, #60]	; 0x3c
   1e2d8:	cmp	r1, #0
   1e2dc:	beq	1e2f0 <__assert_fail@plt+0xadec>
   1e2e0:	ldr	r0, [r8, #8]
   1e2e4:	bl	1de84 <__assert_fail@plt+0xa980>
   1e2e8:	ldr	r2, [sp, #60]	; 0x3c
   1e2ec:	strd	r0, [r2]
   1e2f0:	ldr	r3, [sp, #64]	; 0x40
   1e2f4:	ldr	r1, [sp, #80]	; 0x50
   1e2f8:	cmp	r3, #0
   1e2fc:	ldrne	r3, [r8, #8]
   1e300:	ldrne	r4, [sp, #64]	; 0x40
   1e304:	strne	r3, [r4]
   1e308:	cmp	r1, #0
   1e30c:	ldrne	r3, [r8, #12]
   1e310:	movne	r0, #0
   1e314:	ldreq	r0, [sp, #80]	; 0x50
   1e318:	strne	r3, [r1]
   1e31c:	add	sp, sp, #20
   1e320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e324:	ldr	r2, [sp, #72]	; 0x48
   1e328:	rsb	r6, r9, r6
   1e32c:	add	ip, ip, r6
   1e330:	movw	r1, #540	; 0x21c
   1e334:	mov	r0, #0
   1e338:	movt	r1, #4
   1e33c:	str	ip, [r2]
   1e340:	mov	r2, #5
   1e344:	bl	12d84 <dcgettext@plt>
   1e348:	ldr	r3, [r8, #4]
   1e34c:	ldr	r6, [r8]
   1e350:	mov	r2, r9
   1e354:	ubfx	r7, r3, #0, #29
   1e358:	subs	r4, r6, r4
   1e35c:	sbc	r5, r7, r5
   1e360:	strd	r4, [sp]
   1e364:	mov	r1, r0
   1e368:	mov	r0, #1
   1e36c:	bl	13204 <__printf_chk@plt>
   1e370:	mov	r0, #1
   1e374:	add	sp, sp, #20
   1e378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e37c:	ldr	r2, [sp, #76]	; 0x4c
   1e380:	movw	r1, #492	; 0x1ec
   1e384:	ldr	r3, [sp, #72]	; 0x48
   1e388:	movt	r1, #4
   1e38c:	mov	r0, #0
   1e390:	str	r2, [r3]
   1e394:	mov	r2, #5
   1e398:	bl	12d84 <dcgettext@plt>
   1e39c:	mov	r2, r9
   1e3a0:	mov	r1, r0
   1e3a4:	mov	r0, #1
   1e3a8:	bl	13204 <__printf_chk@plt>
   1e3ac:	mov	r0, #1
   1e3b0:	add	sp, sp, #20
   1e3b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3b8:	ldr	ip, [r2]
   1e3bc:	ldr	r3, [r0]
   1e3c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1e3c4:	cmp	ip, r3
   1e3c8:	sub	sp, sp, #12
   1e3cc:	ldrd	r6, [sp, #40]	; 0x28
   1e3d0:	bcs	1e438 <__assert_fail@plt+0xaf34>
   1e3d4:	ldr	r1, [r1]
   1e3d8:	lsl	r3, ip, #4
   1e3dc:	add	r8, r1, r3
   1e3e0:	ldr	r4, [r1, ip, lsl #4]
   1e3e4:	ldr	r9, [r8, #4]
   1e3e8:	ubfx	r5, r9, #0, #29
   1e3ec:	cmp	r7, r5
   1e3f0:	cmpeq	r6, r4
   1e3f4:	bls	1e448 <__assert_fail@plt+0xaf44>
   1e3f8:	add	r3, r3, #16
   1e3fc:	add	r3, r1, r3
   1e400:	b	1e420 <__assert_fail@plt+0xaf1c>
   1e404:	ldr	r1, [r3, #4]
   1e408:	add	r3, r3, #16
   1e40c:	ldr	r4, [r3, #-16]
   1e410:	ubfx	r5, r1, #0, #29
   1e414:	cmp	r5, r7
   1e418:	cmpeq	r4, r6
   1e41c:	bcs	1e448 <__assert_fail@plt+0xaf44>
   1e420:	add	ip, ip, #1
   1e424:	str	ip, [r2]
   1e428:	ldr	r1, [r0]
   1e42c:	mov	r8, r3
   1e430:	cmp	ip, r1
   1e434:	bcc	1e404 <__assert_fail@plt+0xaf00>
   1e438:	mov	r3, #0
   1e43c:	mov	r0, r3
   1e440:	add	sp, sp, #12
   1e444:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e448:	ldrd	r0, [sp, #48]	; 0x30
   1e44c:	cmp	r1, r5
   1e450:	cmpeq	r0, r4
   1e454:	bls	1e438 <__assert_fail@plt+0xaf34>
   1e458:	ldr	r0, [r8, #8]
   1e45c:	str	r2, [sp, #4]
   1e460:	bl	1de84 <__assert_fail@plt+0xa980>
   1e464:	ldr	r2, [sp, #4]
   1e468:	mov	r3, #1
   1e46c:	ldr	r5, [sp, #56]	; 0x38
   1e470:	ldr	r4, [r8, #8]
   1e474:	ldr	ip, [r2]
   1e478:	add	ip, ip, r3
   1e47c:	strd	r0, [r5]
   1e480:	ldr	r0, [sp, #60]	; 0x3c
   1e484:	str	r4, [r0]
   1e488:	mov	r0, r3
   1e48c:	str	ip, [r2]
   1e490:	add	sp, sp, #12
   1e494:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e49c:	movw	r6, #37688	; 0x9338
   1e4a0:	movt	r6, #5
   1e4a4:	sub	sp, sp, #412	; 0x19c
   1e4a8:	mov	fp, r1
   1e4ac:	add	r1, sp, #88	; 0x58
   1e4b0:	ldr	r3, [r6]
   1e4b4:	mov	r4, #0
   1e4b8:	str	r2, [sp, #52]	; 0x34
   1e4bc:	str	r6, [sp, #32]
   1e4c0:	str	r3, [sp, #404]	; 0x194
   1e4c4:	str	r4, [sp, #76]	; 0x4c
   1e4c8:	str	r0, [sp, #68]	; 0x44
   1e4cc:	str	r4, [sp, #80]	; 0x50
   1e4d0:	bl	1336c <dwfl_module_getdwarf@plt>
   1e4d4:	mov	r1, r4
   1e4d8:	mov	r2, #184	; 0xb8
   1e4dc:	str	r0, [sp, #40]	; 0x28
   1e4e0:	add	r0, sp, #216	; 0xd8
   1e4e4:	bl	13198 <memset@plt>
   1e4e8:	ldr	r7, [sp, #52]	; 0x34
   1e4ec:	ldr	ip, [sp, #40]	; 0x28
   1e4f0:	ldr	r0, [fp, #16]
   1e4f4:	ldrb	r3, [r7, #5]
   1e4f8:	subs	r3, r3, #1
   1e4fc:	str	r0, [sp, #216]	; 0xd8
   1e500:	movne	r3, #1
   1e504:	cmp	ip, r4
   1e508:	strb	r3, [sp, #300]	; 0x12c
   1e50c:	beq	1eaa0 <__assert_fail@plt+0xb59c>
   1e510:	ldr	r0, [sp, #40]	; 0x28
   1e514:	add	r1, sp, #96	; 0x60
   1e518:	add	r2, sp, #80	; 0x50
   1e51c:	movw	sl, #37712	; 0x9350
   1e520:	bl	1507c <__assert_fail@plt+0x1b78>
   1e524:	movt	sl, #5
   1e528:	cmp	r0, #0
   1e52c:	bne	1e7d4 <__assert_fail@plt+0xb2d0>
   1e530:	ldr	r3, [sl, #40]	; 0x28
   1e534:	cmp	r3, #0
   1e538:	beq	1eb34 <__assert_fail@plt+0xb630>
   1e53c:	movw	r3, #37692	; 0x933c
   1e540:	movt	r3, #5
   1e544:	str	r0, [sp, #36]	; 0x24
   1e548:	mov	r1, #1
   1e54c:	movw	r0, #920	; 0x398
   1e550:	ldr	r3, [r3]
   1e554:	movt	r0, #4
   1e558:	mov	r2, #58	; 0x3a
   1e55c:	bl	12ee0 <fwrite@plt>
   1e560:	ldr	r6, [sp, #36]	; 0x24
   1e564:	str	r6, [sp, #60]	; 0x3c
   1e568:	add	r4, sp, #136	; 0x88
   1e56c:	ldr	r0, [fp, #16]
   1e570:	mov	r1, r4
   1e574:	bl	13498 <elf_getshdrstrndx@plt>
   1e578:	cmp	r0, #0
   1e57c:	blt	1edc8 <__assert_fail@plt+0xb8c4>
   1e580:	ldr	r2, [sl, #12]
   1e584:	ldr	r3, [sl, #20]
   1e588:	ubfx	r2, r2, #3, #1
   1e58c:	str	r2, [sp, #44]	; 0x2c
   1e590:	cmp	r2, #0
   1e594:	and	r3, r3, #8
   1e598:	str	r3, [sp, #56]	; 0x38
   1e59c:	movne	r4, #0
   1e5a0:	bne	1e7a0 <__assert_fail@plt+0xb29c>
   1e5a4:	mov	r6, #0
   1e5a8:	str	sl, [sp, #48]	; 0x30
   1e5ac:	str	r6, [sp, #28]
   1e5b0:	ldr	r1, [sp, #28]
   1e5b4:	ldr	r0, [fp, #16]
   1e5b8:	bl	13300 <elf_nextscn@plt>
   1e5bc:	subs	r7, r0, #0
   1e5c0:	str	r7, [sp, #28]
   1e5c4:	beq	1e98c <__assert_fail@plt+0xb488>
   1e5c8:	add	r1, sp, #152	; 0x98
   1e5cc:	bl	12cc4 <gelf_getshdr@plt>
   1e5d0:	subs	r8, r0, #0
   1e5d4:	beq	1e5b0 <__assert_fail@plt+0xb0ac>
   1e5d8:	ldr	r3, [r8, #4]
   1e5dc:	cmp	r3, #1
   1e5e0:	bne	1e5b0 <__assert_fail@plt+0xb0ac>
   1e5e4:	ldr	r0, [fp, #16]
   1e5e8:	ldr	r1, [sp, #136]	; 0x88
   1e5ec:	ldr	r2, [r8]
   1e5f0:	bl	12e44 <elf_strptr@plt>
   1e5f4:	subs	r5, r0, #0
   1e5f8:	beq	1e5b0 <__assert_fail@plt+0xb0ac>
   1e5fc:	add	ip, r5, #2
   1e600:	str	ip, [sp, #64]	; 0x40
   1e604:	bl	13090 <strlen@plt>
   1e608:	mov	r7, #0
   1e60c:	mov	r6, r7
   1e610:	mov	r9, r0
   1e614:	b	1e628 <__assert_fail@plt+0xb124>
   1e618:	add	r7, r7, #12
   1e61c:	add	r6, r6, #1
   1e620:	cmp	r7, #252	; 0xfc
   1e624:	beq	1e5b0 <__assert_fail@plt+0xb0ac>
   1e628:	ldr	r0, [pc, #2404]	; 1ef94 <__assert_fail@plt+0xba90>
   1e62c:	ldr	sl, [r0, r7]
   1e630:	mov	r0, sl
   1e634:	bl	13090 <strlen@plt>
   1e638:	mov	r1, sl
   1e63c:	mov	r4, r0
   1e640:	mov	r0, r5
   1e644:	mov	r2, r4
   1e648:	bl	13468 <strncmp@plt>
   1e64c:	cmp	r0, #0
   1e650:	bne	1e668 <__assert_fail@plt+0xb164>
   1e654:	cmp	r4, r9
   1e658:	beq	1e6d8 <__assert_fail@plt+0xb1d4>
   1e65c:	add	r3, r4, #4
   1e660:	cmp	r3, r9
   1e664:	beq	1e96c <__assert_fail@plt+0xb468>
   1e668:	ldrb	r3, [r5]
   1e66c:	cmp	r3, #46	; 0x2e
   1e670:	bne	1e618 <__assert_fail@plt+0xb114>
   1e674:	ldrb	r3, [r5, #1]
   1e678:	cmp	r3, #122	; 0x7a
   1e67c:	bne	1e618 <__assert_fail@plt+0xb114>
   1e680:	ldrb	r3, [sl, #1]
   1e684:	cmp	r3, #100	; 0x64
   1e688:	bne	1e618 <__assert_fail@plt+0xb114>
   1e68c:	add	r1, sl, #1
   1e690:	ldr	r0, [sp, #64]	; 0x40
   1e694:	sub	r2, r4, #1
   1e698:	bl	13468 <strncmp@plt>
   1e69c:	cmp	r0, #0
   1e6a0:	bne	1e618 <__assert_fail@plt+0xb114>
   1e6a4:	add	sl, r4, #1
   1e6a8:	cmp	sl, r9
   1e6ac:	beq	1e6d8 <__assert_fail@plt+0xb1d4>
   1e6b0:	add	r4, r4, #5
   1e6b4:	cmp	r4, r9
   1e6b8:	bne	1e618 <__assert_fail@plt+0xb114>
   1e6bc:	movw	r1, #1036	; 0x40c
   1e6c0:	mov	r0, r5
   1e6c4:	movt	r1, #4
   1e6c8:	add	sl, r5, sl
   1e6cc:	bl	12c64 <strstr@plt>
   1e6d0:	cmp	r0, sl
   1e6d4:	bne	1e618 <__assert_fail@plt+0xb114>
   1e6d8:	ldr	r7, [sp, #48]	; 0x30
   1e6dc:	add	r6, r6, r6, lsl #1
   1e6e0:	movw	ip, #50660	; 0xc5e4
   1e6e4:	movt	ip, #3
   1e6e8:	add	r3, ip, r6, lsl #2
   1e6ec:	ldr	r2, [r7, #20]
   1e6f0:	ldr	r1, [r7, #12]
   1e6f4:	orr	r1, r1, r2
   1e6f8:	ldr	r2, [r3, #136]	; 0x88
   1e6fc:	tst	r1, r2
   1e700:	beq	1e5b0 <__assert_fail@plt+0xb0ac>
   1e704:	ldr	r6, [sp, #40]	; 0x28
   1e708:	mov	r1, fp
   1e70c:	ldr	ip, [r3, #140]	; 0x8c
   1e710:	str	r8, [sp]
   1e714:	ldr	r0, [sp, #68]	; 0x44
   1e718:	str	r6, [sp, #4]
   1e71c:	ldr	r2, [sp, #52]	; 0x34
   1e720:	ldr	r3, [sp, #28]
   1e724:	blx	ip
   1e728:	b	1e5b0 <__assert_fail@plt+0xb0ac>
   1e72c:	ldr	r0, [fp, #16]
   1e730:	ldr	r1, [sp, #136]	; 0x88
   1e734:	ldr	r2, [r6]
   1e738:	bl	12e44 <elf_strptr@plt>
   1e73c:	subs	r5, r0, #0
   1e740:	beq	1e7a0 <__assert_fail@plt+0xb29c>
   1e744:	movw	r1, #980	; 0x3d4
   1e748:	movt	r1, #4
   1e74c:	bl	12cd0 <strcmp@plt>
   1e750:	cmp	r0, #0
   1e754:	beq	1ea60 <__assert_fail@plt+0xb55c>
   1e758:	movw	r1, #992	; 0x3e0
   1e75c:	mov	r0, r5
   1e760:	movt	r1, #4
   1e764:	bl	12cd0 <strcmp@plt>
   1e768:	cmp	r0, #0
   1e76c:	beq	1ea60 <__assert_fail@plt+0xb55c>
   1e770:	movw	r1, #1008	; 0x3f0
   1e774:	mov	r0, r5
   1e778:	movt	r1, #4
   1e77c:	bl	12cd0 <strcmp@plt>
   1e780:	cmp	r0, #0
   1e784:	beq	1ea60 <__assert_fail@plt+0xb55c>
   1e788:	mov	r0, r5
   1e78c:	movw	r1, #1024	; 0x400
   1e790:	movt	r1, #4
   1e794:	bl	12cd0 <strcmp@plt>
   1e798:	cmp	r0, #0
   1e79c:	beq	1ea60 <__assert_fail@plt+0xb55c>
   1e7a0:	mov	r1, r4
   1e7a4:	ldr	r0, [fp, #16]
   1e7a8:	bl	13300 <elf_nextscn@plt>
   1e7ac:	subs	r4, r0, #0
   1e7b0:	beq	1ea84 <__assert_fail@plt+0xb580>
   1e7b4:	add	r1, sp, #152	; 0x98
   1e7b8:	bl	12cc4 <gelf_getshdr@plt>
   1e7bc:	subs	r6, r0, #0
   1e7c0:	beq	1e7a0 <__assert_fail@plt+0xb29c>
   1e7c4:	ldr	r3, [r6, #4]
   1e7c8:	cmp	r3, #1
   1e7cc:	bne	1e7a0 <__assert_fail@plt+0xb29c>
   1e7d0:	b	1e72c <__assert_fail@plt+0xb228>
   1e7d4:	ldr	r4, [sl, #40]	; 0x28
   1e7d8:	cmp	r4, #0
   1e7dc:	beq	1eb44 <__assert_fail@plt+0xb640>
   1e7e0:	mov	r0, r4
   1e7e4:	bl	13174 <__strdup@plt>
   1e7e8:	str	r0, [sp, #36]	; 0x24
   1e7ec:	ldr	r7, [sp, #36]	; 0x24
   1e7f0:	cmp	r7, #0
   1e7f4:	beq	1ebac <__assert_fail@plt+0xb6a8>
   1e7f8:	mov	r0, r7
   1e7fc:	mov	r1, #0
   1e800:	bl	12fac <open64@plt>
   1e804:	cmn	r0, #1
   1e808:	beq	1eacc <__assert_fail@plt+0xb5c8>
   1e80c:	ldr	r1, [sp, #36]	; 0x24
   1e810:	bl	15d24 <__assert_fail@plt+0x2820>
   1e814:	subs	r6, r0, #0
   1e818:	str	r6, [sp, #60]	; 0x3c
   1e81c:	beq	1ed60 <__assert_fail@plt+0xb85c>
   1e820:	movw	r1, #14444	; 0x386c
   1e824:	add	r2, sp, #76	; 0x4c
   1e828:	movt	r1, #1
   1e82c:	mov	r3, #0
   1e830:	bl	1321c <dwfl_getmodules@plt>
   1e834:	cmp	r0, #0
   1e838:	bne	1ec30 <__assert_fail@plt+0xb72c>
   1e83c:	ldr	r0, [sp, #76]	; 0x4c
   1e840:	cmp	r0, #0
   1e844:	beq	1e568 <__assert_fail@plt+0xb064>
   1e848:	add	r1, sp, #88	; 0x58
   1e84c:	bl	1336c <dwfl_module_getdwarf@plt>
   1e850:	subs	r5, r0, #0
   1e854:	beq	1ed04 <__assert_fail@plt+0xb800>
   1e858:	add	r4, sp, #408	; 0x198
   1e85c:	mov	r1, #0
   1e860:	movw	r6, #65224	; 0xfec8
   1e864:	movw	r7, #37692	; 0x933c
   1e868:	str	r1, [r4, #-324]!	; 0xfffffebc
   1e86c:	movt	r6, #65535	; 0xffff
   1e870:	movt	r7, #5
   1e874:	b	1e87c <__assert_fail@plt+0xb378>
   1e878:	ldr	r1, [sp, #84]	; 0x54
   1e87c:	mov	r2, #0
   1e880:	mov	r0, r5
   1e884:	str	r2, [sp]
   1e888:	mov	r3, r2
   1e88c:	str	r2, [sp, #4]
   1e890:	str	r2, [sp, #8]
   1e894:	mov	r2, r4
   1e898:	bl	12d0c <dwarf_get_units@plt>
   1e89c:	subs	r2, r0, #0
   1e8a0:	bne	1eaf8 <__assert_fail@plt+0xb5f4>
   1e8a4:	mov	r1, r2
   1e8a8:	str	r2, [sp]
   1e8ac:	mov	r3, r2
   1e8b0:	str	r2, [sp, #8]
   1e8b4:	add	ip, sp, #104	; 0x68
   1e8b8:	str	r2, [sp, #12]
   1e8bc:	ldr	r0, [sp, #84]	; 0x54
   1e8c0:	add	r2, sp, #75	; 0x4b
   1e8c4:	str	ip, [sp, #4]
   1e8c8:	bl	12e98 <dwarf_cu_info@plt>
   1e8cc:	cmp	r0, #0
   1e8d0:	bne	1e878 <__assert_fail@plt+0xb374>
   1e8d4:	ldrb	r3, [sp, #75]	; 0x4b
   1e8d8:	cmp	r3, #4
   1e8dc:	bne	1e878 <__assert_fail@plt+0xb374>
   1e8e0:	add	ip, sp, #408	; 0x198
   1e8e4:	movw	r3, #65232	; 0xfed0
   1e8e8:	movt	r3, #65535	; 0xffff
   1e8ec:	ldrd	r8, [ip, r6]
   1e8f0:	ldrd	r2, [r3, ip]
   1e8f4:	cmp	r9, r3
   1e8f8:	cmpeq	r8, r2
   1e8fc:	bne	1e878 <__assert_fail@plt+0xb374>
   1e900:	ldr	ip, [sp, #84]	; 0x54
   1e904:	mov	r1, r0
   1e908:	str	r0, [sp, #4]
   1e90c:	mov	r2, r0
   1e910:	str	r0, [sp, #8]
   1e914:	mov	r3, r0
   1e918:	str	r0, [sp, #12]
   1e91c:	add	r8, sp, #120	; 0x78
   1e920:	mov	r0, ip
   1e924:	str	r8, [sp]
   1e928:	bl	12e98 <dwarf_cu_info@plt>
   1e92c:	cmp	r0, #0
   1e930:	beq	1ec70 <__assert_fail@plt+0xb76c>
   1e934:	ldr	r8, [sp, #84]	; 0x54
   1e938:	ldr	r3, [r8, #48]	; 0x30
   1e93c:	cmp	r3, #0
   1e940:	beq	1eca4 <__assert_fail@plt+0xb7a0>
   1e944:	mvn	r0, #0
   1e948:	ldr	r8, [r7]
   1e94c:	bl	13078 <dwarf_errmsg@plt>
   1e950:	movw	r2, #772	; 0x304
   1e954:	mov	r1, #1
   1e958:	movt	r2, #4
   1e95c:	mov	r3, r0
   1e960:	mov	r0, r8
   1e964:	bl	13258 <__fprintf_chk@plt>
   1e968:	b	1e878 <__assert_fail@plt+0xb374>
   1e96c:	movw	r1, #1036	; 0x40c
   1e970:	mov	r0, r5
   1e974:	movt	r1, #4
   1e978:	bl	12c64 <strstr@plt>
   1e97c:	add	r3, r5, r4
   1e980:	cmp	r0, r3
   1e984:	bne	1e668 <__assert_fail@plt+0xb164>
   1e988:	b	1e6d8 <__assert_fail@plt+0xb1d4>
   1e98c:	ldr	r0, [sp, #60]	; 0x3c
   1e990:	mov	r4, #0
   1e994:	ldr	sl, [sp, #48]	; 0x30
   1e998:	bl	132c4 <dwfl_end@plt>
   1e99c:	ldr	r0, [sp, #36]	; 0x24
   1e9a0:	bl	12cf4 <free@plt>
   1e9a4:	ldr	ip, [sp, #44]	; 0x2c
   1e9a8:	ldr	r6, [sp, #56]	; 0x38
   1e9ac:	cmp	ip, #0
   1e9b0:	ldr	r0, [sl, #136]	; 0x88
   1e9b4:	ldrne	r3, [sl, #12]
   1e9b8:	orrne	r3, r3, #8
   1e9bc:	strne	r3, [sl, #12]
   1e9c0:	cmp	r6, #0
   1e9c4:	ldrne	r3, [sl, #20]
   1e9c8:	orrne	r3, r3, #8
   1e9cc:	strne	r3, [sl, #20]
   1e9d0:	bl	12cf4 <free@plt>
   1e9d4:	ldr	r0, [sl, #148]	; 0x94
   1e9d8:	str	r4, [sl, #136]	; 0x88
   1e9dc:	str	r4, [sl, #132]	; 0x84
   1e9e0:	str	r4, [sl, #128]	; 0x80
   1e9e4:	bl	12cf4 <free@plt>
   1e9e8:	ldr	r0, [sl, #160]	; 0xa0
   1e9ec:	str	r4, [sl, #148]	; 0x94
   1e9f0:	str	r4, [sl, #144]	; 0x90
   1e9f4:	str	r4, [sl, #140]	; 0x8c
   1e9f8:	bl	12cf4 <free@plt>
   1e9fc:	ldr	r0, [sl, #172]	; 0xac
   1ea00:	str	r4, [sl, #160]	; 0xa0
   1ea04:	str	r4, [sl, #156]	; 0x9c
   1ea08:	str	r4, [sl, #152]	; 0x98
   1ea0c:	bl	12cf4 <free@plt>
   1ea10:	ldr	r0, [sl, #184]	; 0xb8
   1ea14:	str	r4, [sl, #172]	; 0xac
   1ea18:	str	r4, [sl, #168]	; 0xa8
   1ea1c:	str	r4, [sl, #164]	; 0xa4
   1ea20:	bl	12cf4 <free@plt>
   1ea24:	ldr	r0, [sl, #112]	; 0x70
   1ea28:	str	r4, [sl, #184]	; 0xb8
   1ea2c:	str	r4, [sl, #180]	; 0xb4
   1ea30:	str	r4, [sl, #176]	; 0xb0
   1ea34:	bl	12cf4 <free@plt>
   1ea38:	ldr	r7, [sp, #32]
   1ea3c:	ldr	r2, [sp, #404]	; 0x194
   1ea40:	str	r4, [sl, #112]	; 0x70
   1ea44:	ldr	r3, [r7]
   1ea48:	str	r4, [sl, #108]	; 0x6c
   1ea4c:	cmp	r2, r3
   1ea50:	str	r4, [sl, #104]	; 0x68
   1ea54:	bne	1edec <__assert_fail@plt+0xb8e8>
   1ea58:	add	sp, sp, #412	; 0x19c
   1ea5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea60:	ldr	ip, [sp, #40]	; 0x28
   1ea64:	mov	r1, #0
   1ea68:	mov	r2, r4
   1ea6c:	str	r1, [sp, #4]
   1ea70:	mov	r3, r6
   1ea74:	ldr	r0, [sp, #68]	; 0x44
   1ea78:	str	ip, [sp]
   1ea7c:	mov	r1, fp
   1ea80:	bl	1c8b0 <__assert_fail@plt+0x93ac>
   1ea84:	ldr	r2, [sl, #20]
   1ea88:	ldr	r3, [sl, #12]
   1ea8c:	bic	r2, r2, #8
   1ea90:	str	r2, [sl, #20]
   1ea94:	bic	r3, r3, #8
   1ea98:	str	r3, [sl, #12]
   1ea9c:	b	1e5a4 <__assert_fail@plt+0xb0a0>
   1eaa0:	movw	sl, #37712	; 0x9350
   1eaa4:	movt	sl, #5
   1eaa8:	ldr	r3, [sl, #20]
   1eaac:	bics	r3, r3, #1024	; 0x400
   1eab0:	bne	1ebdc <__assert_fail@plt+0xb6d8>
   1eab4:	add	r7, sp, #216	; 0xd8
   1eab8:	str	r3, [sp, #36]	; 0x24
   1eabc:	add	r4, sp, #136	; 0x88
   1eac0:	str	r7, [sp, #40]	; 0x28
   1eac4:	str	r3, [sp, #60]	; 0x3c
   1eac8:	b	1e570 <__assert_fail@plt+0xb06c>
   1eacc:	movw	r5, #37692	; 0x933c
   1ead0:	movt	r5, #5
   1ead4:	movw	r2, #628	; 0x274
   1ead8:	mov	r1, #1
   1eadc:	ldr	r0, [r5]
   1eae0:	movt	r2, #4
   1eae4:	ldr	r3, [sp, #36]	; 0x24
   1eae8:	mov	ip, #0
   1eaec:	str	ip, [sp, #60]	; 0x3c
   1eaf0:	bl	13258 <__fprintf_chk@plt>
   1eaf4:	b	1e83c <__assert_fail@plt+0xb338>
   1eaf8:	movw	r5, #37692	; 0x933c
   1eafc:	add	r4, sp, #136	; 0x88
   1eb00:	movt	r5, #5
   1eb04:	add	r1, sp, #408	; 0x198
   1eb08:	movw	r3, #65224	; 0xfec8
   1eb0c:	movt	r3, #65535	; 0xffff
   1eb10:	ldr	r0, [r5]
   1eb14:	movw	r2, #816	; 0x330
   1eb18:	movt	r2, #4
   1eb1c:	ldrd	r6, [r1, r3]
   1eb20:	mov	r1, #1
   1eb24:	ldr	r3, [sp, #36]	; 0x24
   1eb28:	strd	r6, [sp]
   1eb2c:	bl	13258 <__fprintf_chk@plt>
   1eb30:	b	1e56c <__assert_fail@plt+0xb068>
   1eb34:	str	r3, [sp, #36]	; 0x24
   1eb38:	add	r4, sp, #136	; 0x88
   1eb3c:	str	r3, [sp, #60]	; 0x3c
   1eb40:	b	1e56c <__assert_fail@plt+0xb068>
   1eb44:	add	r3, sp, #152	; 0x98
   1eb48:	str	r4, [sp]
   1eb4c:	str	r3, [sp, #8]
   1eb50:	mov	r1, r4
   1eb54:	str	r4, [sp, #4]
   1eb58:	mov	r2, r4
   1eb5c:	ldr	r0, [sp, #68]	; 0x44
   1eb60:	mov	r3, r4
   1eb64:	str	r4, [sp, #12]
   1eb68:	bl	133a8 <dwfl_module_info@plt>
   1eb6c:	ldr	r5, [sp, #152]	; 0x98
   1eb70:	cmp	r5, #0
   1eb74:	beq	1ec68 <__assert_fail@plt+0xb764>
   1eb78:	mov	r0, r5
   1eb7c:	bl	13090 <strlen@plt>
   1eb80:	cmp	r0, #4
   1eb84:	mov	r6, r0
   1eb88:	bls	1eba8 <__assert_fail@plt+0xb6a4>
   1eb8c:	sub	r1, r0, #4
   1eb90:	movw	r0, #1036	; 0x40c
   1eb94:	add	r1, r5, r1
   1eb98:	movt	r0, #4
   1eb9c:	bl	12cd0 <strcmp@plt>
   1eba0:	subs	r7, r0, #0
   1eba4:	beq	1ed38 <__assert_fail@plt+0xb834>
   1eba8:	str	r4, [sp, #36]	; 0x24
   1ebac:	movw	r3, #37692	; 0x933c
   1ebb0:	movt	r3, #5
   1ebb4:	movw	r0, #1100	; 0x44c
   1ebb8:	mov	r1, #1
   1ebbc:	ldr	r3, [r3]
   1ebc0:	movt	r0, #4
   1ebc4:	mov	r2, #50	; 0x32
   1ebc8:	mov	r6, #0
   1ebcc:	add	r4, sp, #136	; 0x88
   1ebd0:	str	r6, [sp, #60]	; 0x3c
   1ebd4:	bl	12ee0 <fwrite@plt>
   1ebd8:	b	1e56c <__assert_fail@plt+0xb068>
   1ebdc:	mov	r0, ip
   1ebe0:	mov	r2, #5
   1ebe4:	movw	r1, #588	; 0x24c
   1ebe8:	movt	r1, #4
   1ebec:	bl	12d84 <dcgettext@plt>
   1ebf0:	str	r4, [sp, #36]	; 0x24
   1ebf4:	add	r6, sp, #216	; 0xd8
   1ebf8:	mov	r5, r0
   1ebfc:	mvn	r0, #0
   1ec00:	bl	132d0 <dwfl_errmsg@plt>
   1ec04:	mov	r2, r5
   1ec08:	mov	r3, r0
   1ec0c:	ldr	r0, [sp, #40]	; 0x28
   1ec10:	str	r6, [sp, #40]	; 0x28
   1ec14:	mov	r1, r0
   1ec18:	bl	12f70 <error@plt>
   1ec1c:	ldr	r4, [sp, #36]	; 0x24
   1ec20:	ldr	r0, [fp, #16]
   1ec24:	str	r4, [sp, #60]	; 0x3c
   1ec28:	add	r4, sp, #136	; 0x88
   1ec2c:	b	1e570 <__assert_fail@plt+0xb06c>
   1ec30:	movw	r3, #37692	; 0x933c
   1ec34:	movt	r3, #5
   1ec38:	mov	r1, #1
   1ec3c:	movw	r2, #680	; 0x2a8
   1ec40:	ldr	r0, [r3]
   1ec44:	movt	r2, #4
   1ec48:	ldr	r3, [sp, #36]	; 0x24
   1ec4c:	add	r4, sp, #136	; 0x88
   1ec50:	bl	13258 <__fprintf_chk@plt>
   1ec54:	ldr	r0, [sp, #60]	; 0x3c
   1ec58:	bl	132c4 <dwfl_end@plt>
   1ec5c:	mov	r3, #0
   1ec60:	str	r3, [sp, #76]	; 0x4c
   1ec64:	b	1e56c <__assert_fail@plt+0xb068>
   1ec68:	str	r5, [sp, #36]	; 0x24
   1ec6c:	b	1ebac <__assert_fail@plt+0xb6a8>
   1ec70:	mov	r0, r8
   1ec74:	bl	12cac <dwarf_tag@plt>
   1ec78:	cmp	r0, #0
   1ec7c:	beq	1e934 <__assert_fail@plt+0xb430>
   1ec80:	ldr	r0, [sp, #124]	; 0x7c
   1ec84:	bl	12d3c <dwarf_cu_getdwarf@plt>
   1ec88:	cmp	r0, #0
   1ec8c:	beq	1ed94 <__assert_fail@plt+0xb890>
   1ec90:	add	r4, sp, #136	; 0x88
   1ec94:	ldr	ip, [sp, #76]	; 0x4c
   1ec98:	str	r0, [sp, #40]	; 0x28
   1ec9c:	str	ip, [sp, #68]	; 0x44
   1eca0:	b	1e56c <__assert_fail@plt+0xb068>
   1eca4:	ldr	r2, [sl, #40]	; 0x28
   1eca8:	movw	r3, #37712	; 0x9350
   1ecac:	movt	r3, #5
   1ecb0:	cmp	r2, #0
   1ecb4:	beq	1e944 <__assert_fail@plt+0xb440>
   1ecb8:	ldr	r5, [sp, #80]	; 0x50
   1ecbc:	mov	r2, #1
   1ecc0:	strb	r2, [r3, #48]	; 0x30
   1ecc4:	ldr	r3, [r8]
   1ecc8:	ldr	r9, [r5]
   1eccc:	str	r5, [r8, #48]	; 0x30
   1ecd0:	str	r3, [sp, #28]
   1ecd4:	ldr	r1, [r9, #28]
   1ecd8:	str	r8, [r5, #48]	; 0x30
   1ecdc:	cmp	r1, #0
   1ece0:	addne	r4, sp, #136	; 0x88
   1ece4:	movne	r0, r5
   1ece8:	beq	1edf0 <__assert_fail@plt+0xb8ec>
   1ecec:	bl	12d3c <dwarf_cu_getdwarf@plt>
   1ecf0:	cmp	r0, #0
   1ecf4:	movweq	r5, #37692	; 0x933c
   1ecf8:	movteq	r5, #5
   1ecfc:	bne	1ec94 <__assert_fail@plt+0xb790>
   1ed00:	b	1eb04 <__assert_fail@plt+0xb600>
   1ed04:	movw	r3, #37692	; 0x933c
   1ed08:	movt	r3, #5
   1ed0c:	mvn	r0, #0
   1ed10:	add	r4, sp, #136	; 0x88
   1ed14:	ldr	r5, [r3]
   1ed18:	bl	132d0 <dwfl_errmsg@plt>
   1ed1c:	movw	r2, #876	; 0x36c
   1ed20:	mov	r1, #1
   1ed24:	movt	r2, #4
   1ed28:	mov	r3, r0
   1ed2c:	mov	r0, r5
   1ed30:	bl	13258 <__fprintf_chk@plt>
   1ed34:	b	1e56c <__assert_fail@plt+0xb068>
   1ed38:	mov	r0, r5
   1ed3c:	bl	13174 <__strdup@plt>
   1ed40:	cmp	r0, #0
   1ed44:	str	r0, [sp, #36]	; 0x24
   1ed48:	beq	1ebac <__assert_fail@plt+0xb6a8>
   1ed4c:	add	r6, r0, r6
   1ed50:	mov	r3, #111	; 0x6f
   1ed54:	strb	r7, [r6, #-2]
   1ed58:	strb	r3, [r6, #-3]
   1ed5c:	b	1e7ec <__assert_fail@plt+0xb2e8>
   1ed60:	movw	r5, #37692	; 0x933c
   1ed64:	movt	r5, #5
   1ed68:	mvn	r0, #0
   1ed6c:	ldr	r4, [r5]
   1ed70:	bl	132d0 <dwfl_errmsg@plt>
   1ed74:	movw	r2, #1044	; 0x414
   1ed78:	mov	r1, #1
   1ed7c:	movt	r2, #4
   1ed80:	ldr	r3, [sp, #36]	; 0x24
   1ed84:	str	r0, [sp]
   1ed88:	mov	r0, r4
   1ed8c:	bl	13258 <__fprintf_chk@plt>
   1ed90:	b	1e83c <__assert_fail@plt+0xb338>
   1ed94:	movw	r5, #37692	; 0x933c
   1ed98:	movt	r5, #5
   1ed9c:	mvn	r0, #0
   1eda0:	add	r4, sp, #136	; 0x88
   1eda4:	ldr	r6, [r5]
   1eda8:	bl	13078 <dwarf_errmsg@plt>
   1edac:	movw	r2, #732	; 0x2dc
   1edb0:	mov	r1, #1
   1edb4:	movt	r2, #4
   1edb8:	mov	r3, r0
   1edbc:	mov	r0, r6
   1edc0:	bl	13258 <__fprintf_chk@plt>
   1edc4:	b	1eb04 <__assert_fail@plt+0xb600>
   1edc8:	mov	r2, #5
   1edcc:	movw	r1, #53868	; 0xd26c
   1edd0:	mov	r0, #0
   1edd4:	movt	r1, #3
   1edd8:	bl	12d84 <dcgettext@plt>
   1eddc:	mov	r1, #0
   1ede0:	mov	r2, r0
   1ede4:	mov	r0, #1
   1ede8:	bl	12f70 <error@plt>
   1edec:	bl	12dc0 <__stack_chk_fail@plt>
   1edf0:	ldr	r0, [r3, #28]
   1edf4:	cmp	r0, #0
   1edf8:	beq	1ee40 <__assert_fail@plt+0xb93c>
   1edfc:	ldrd	r6, [r8, #96]	; 0x60
   1ee00:	mvn	r2, #0
   1ee04:	mvn	r3, #0
   1ee08:	str	r0, [r9, #28]
   1ee0c:	cmp	r7, r3
   1ee10:	cmpeq	r6, r2
   1ee14:	beq	1ee4c <__assert_fail@plt+0xb948>
   1ee18:	add	r4, sp, #136	; 0x88
   1ee1c:	mov	r0, r5
   1ee20:	mov	r2, r6
   1ee24:	mov	r3, r7
   1ee28:	ldr	ip, [sp, #28]
   1ee2c:	ldr	r1, [ip, #168]	; 0xa8
   1ee30:	str	r2, [r5, #96]	; 0x60
   1ee34:	str	r3, [r5, #100]	; 0x64
   1ee38:	str	r1, [r9, #168]	; 0xa8
   1ee3c:	b	1ecec <__assert_fail@plt+0xb7e8>
   1ee40:	add	r4, sp, #136	; 0x88
   1ee44:	mov	r0, r5
   1ee48:	b	1ecec <__assert_fail@plt+0xb7e8>
   1ee4c:	str	r1, [sp, #136]	; 0x88
   1ee50:	str	r1, [sp, #140]	; 0x8c
   1ee54:	str	r1, [sp, #144]	; 0x90
   1ee58:	str	r1, [sp, #148]	; 0x94
   1ee5c:	ldr	r2, [r8, #28]
   1ee60:	ldr	r6, [sp, #28]
   1ee64:	ldrh	r3, [r8, #26]
   1ee68:	add	r2, r6, r2, lsl #2
   1ee6c:	ldrd	r0, [r8, #8]
   1ee70:	cmp	r3, #4
   1ee74:	ldrb	ip, [r8, #25]
   1ee78:	ldr	r2, [r2, #12]
   1ee7c:	ldrb	r3, [r8, #32]
   1ee80:	strd	r0, [sp, #16]
   1ee84:	ldr	lr, [r2]
   1ee88:	bhi	1ef10 <__assert_fail@plt+0xba0c>
   1ee8c:	cmp	r3, #2
   1ee90:	beq	1ef80 <__assert_fail@plt+0xba7c>
   1ee94:	mov	r2, #3
   1ee98:	mvn	r3, #0
   1ee9c:	smlabb	ip, r2, ip, r3
   1eea0:	adds	r0, r0, ip
   1eea4:	add	r4, sp, #136	; 0x88
   1eea8:	add	lr, lr, r0
   1eeac:	movw	r1, #8499	; 0x2133
   1eeb0:	add	r2, sp, #152	; 0x98
   1eeb4:	mov	r0, r4
   1eeb8:	str	lr, [sp, #136]	; 0x88
   1eebc:	str	r8, [sp, #140]	; 0x8c
   1eec0:	bl	13114 <dwarf_attr@plt>
   1eec4:	cmp	r0, #0
   1eec8:	beq	1ef4c <__assert_fail@plt+0xba48>
   1eecc:	add	r0, sp, #152	; 0x98
   1eed0:	add	r1, sp, #112	; 0x70
   1eed4:	bl	132a0 <dwarf_formudata@plt>
   1eed8:	cmp	r0, #0
   1eedc:	bne	1ef64 <__assert_fail@plt+0xba60>
   1eee0:	add	r7, sp, #408	; 0x198
   1eee4:	movw	r3, #65240	; 0xfed8
   1eee8:	movt	r3, #65535	; 0xffff
   1eeec:	mov	r2, #4
   1eef0:	add	r1, r7, r3
   1eef4:	add	r1, r1, r2
   1eef8:	ldr	r2, [r7, r3]
   1eefc:	ldr	r3, [r1]
   1ef00:	str	r2, [r8, #96]	; 0x60
   1ef04:	str	r3, [r8, #100]	; 0x64
   1ef08:	ldr	r0, [sp, #80]	; 0x50
   1ef0c:	b	1ee28 <__assert_fail@plt+0xb924>
   1ef10:	ldrd	r6, [sp, #16]
   1ef14:	mov	r1, #3
   1ef18:	sub	r2, r3, #4
   1ef1c:	cmp	r3, #2
   1ef20:	cmpne	r2, #1
   1ef24:	and	r2, r3, #251	; 0xfb
   1ef28:	smlalbb	r6, r7, r1, ip
   1ef2c:	mov	r0, r6
   1ef30:	bls	1ef70 <__assert_fail@plt+0xba6c>
   1ef34:	cmp	r3, #6
   1ef38:	bne	1eea4 <__assert_fail@plt+0xb9a0>
   1ef3c:	adds	r0, r6, #8
   1ef40:	uxtb	r2, ip
   1ef44:	adds	r0, r0, r2
   1ef48:	b	1eea4 <__assert_fail@plt+0xb9a0>
   1ef4c:	mov	r0, r4
   1ef50:	mov	r1, #115	; 0x73
   1ef54:	add	r2, sp, #152	; 0x98
   1ef58:	bl	13114 <dwarf_attr@plt>
   1ef5c:	cmp	r0, #0
   1ef60:	bne	1eecc <__assert_fail@plt+0xb9c8>
   1ef64:	mov	r2, #0
   1ef68:	mov	r3, r2
   1ef6c:	b	1ef00 <__assert_fail@plt+0xb9fc>
   1ef70:	adds	r0, r6, #8
   1ef74:	cmp	r2, #2
   1ef78:	beq	1ef40 <__assert_fail@plt+0xba3c>
   1ef7c:	b	1eea4 <__assert_fail@plt+0xb9a0>
   1ef80:	lsl	r3, ip, #2
   1ef84:	ldrd	r0, [sp, #16]
   1ef88:	add	r3, r3, #7
   1ef8c:	adds	r0, r0, r3
   1ef90:	b	1eea4 <__assert_fail@plt+0xb9a0>
   1ef94:	andeq	ip, r3, r8, ror #12
   1ef98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef9c:	add	fp, sp, #32
   1efa0:	sub	sp, sp, #196	; 0xc4
   1efa4:	movw	r4, #37688	; 0x9338
   1efa8:	movt	r4, #5
   1efac:	str	r0, [fp, #-136]	; 0xffffff78
   1efb0:	sub	lr, fp, #92	; 0x5c
   1efb4:	ldr	r8, [r4]
   1efb8:	sub	ip, fp, #88	; 0x58
   1efbc:	str	r4, [fp, #-140]	; 0xffffff74
   1efc0:	sub	r7, fp, #104	; 0x68
   1efc4:	str	r3, [fp, #-152]	; 0xffffff68
   1efc8:	sub	r6, fp, #100	; 0x64
   1efcc:	str	r8, [fp, #-40]	; 0xffffffd8
   1efd0:	sub	r5, fp, #96	; 0x60
   1efd4:	str	r7, [sp]
   1efd8:	mov	r4, r1
   1efdc:	str	r6, [sp, #4]
   1efe0:	str	r5, [sp, #8]
   1efe4:	str	lr, [sp, #12]
   1efe8:	str	ip, [sp, #16]
   1efec:	bl	39f94 <__assert_fail@plt+0x26a90>
   1eff0:	cmp	r0, #0
   1eff4:	beq	1f324 <__assert_fail@plt+0xbe20>
   1eff8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1effc:	ldr	r6, [fp, #-92]	; 0xffffffa4
   1f000:	cmp	r3, #0
   1f004:	ldr	r5, [fp, #-136]	; 0xffffff78
   1f008:	ldreq	r4, [r4, #4]
   1f00c:	movne	ip, #0
   1f010:	strne	ip, [fp, #-120]	; 0xffffff88
   1f014:	ldr	sl, [r5, #16]
   1f018:	streq	r4, [fp, #-120]	; 0xffffff88
   1f01c:	cmp	r6, #0
   1f020:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1f024:	beq	1f340 <__assert_fail@plt+0xbe3c>
   1f028:	cmp	r6, #1
   1f02c:	ldrb	r3, [r4, #16]
   1f030:	beq	1f6e4 <__assert_fail@plt+0xc1e0>
   1f034:	cmp	r3, #10
   1f038:	beq	1fcd8 <__assert_fail@plt+0xc7d4>
   1f03c:	mov	r2, r4
   1f040:	mov	r3, #0
   1f044:	b	1f058 <__assert_fail@plt+0xbb54>
   1f048:	add	r2, r2, #20
   1f04c:	ldrb	r1, [r2, #16]
   1f050:	cmp	r1, #10
   1f054:	beq	1fcd8 <__assert_fail@plt+0xc7d4>
   1f058:	add	r3, r3, #1
   1f05c:	cmp	r3, r6
   1f060:	bne	1f048 <__assert_fail@plt+0xbb44>
   1f064:	lsl	r5, r6, #2
   1f068:	str	sp, [fp, #-144]	; 0xffffff70
   1f06c:	add	r7, r5, #10
   1f070:	mov	r2, r4
   1f074:	bic	r3, r7, #7
   1f078:	sub	sp, sp, r3
   1f07c:	add	r8, sp, #24
   1f080:	add	r1, r8, r5
   1f084:	mov	r3, r8
   1f088:	str	r2, [r3], #4
   1f08c:	cmp	r3, r1
   1f090:	add	r2, r2, #20
   1f094:	bne	1f088 <__assert_fail@plt+0xbb84>
   1f098:	movw	r3, #14504	; 0x38a8
   1f09c:	mov	r0, r8
   1f0a0:	movt	r3, #1
   1f0a4:	mov	r1, r6
   1f0a8:	mov	r2, #4
   1f0ac:	bic	r7, r7, #7
   1f0b0:	bl	13390 <qsort@plt>
   1f0b4:	sub	sp, sp, r7
   1f0b8:	cmp	r6, #1
   1f0bc:	add	ip, sp, #24
   1f0c0:	str	r8, [sp, #24]
   1f0c4:	str	ip, [fp, #-132]	; 0xffffff7c
   1f0c8:	beq	1fc90 <__assert_fail@plt+0xc78c>
   1f0cc:	mov	ip, #1
   1f0d0:	mov	r3, r5
   1f0d4:	str	r4, [fp, #-112]	; 0xffffff90
   1f0d8:	mov	r7, r8
   1f0dc:	mov	r4, ip
   1f0e0:	mov	r5, ip
   1f0e4:	mov	r9, r3
   1f0e8:	str	ip, [fp, #-116]	; 0xffffff8c
   1f0ec:	ldr	r0, [r7, #4]
   1f0f0:	ldr	r1, [r7], #4
   1f0f4:	ldr	r0, [r0, #4]
   1f0f8:	ldr	r1, [r1, #4]
   1f0fc:	cmp	r0, r1
   1f100:	beq	1f118 <__assert_fail@plt+0xbc14>
   1f104:	bl	12cd0 <strcmp@plt>
   1f108:	cmp	r0, #0
   1f10c:	ldrne	ip, [fp, #-132]	; 0xffffff7c
   1f110:	strne	r7, [ip, r4, lsl #2]
   1f114:	addne	r4, r4, #1
   1f118:	add	r5, r5, #1
   1f11c:	cmp	r5, r6
   1f120:	bne	1f0ec <__assert_fail@plt+0xbbe8>
   1f124:	str	r4, [fp, #-116]	; 0xffffff8c
   1f128:	mov	r5, r9
   1f12c:	ldr	r4, [fp, #-112]	; 0xffffff90
   1f130:	movw	r3, #14472	; 0x3888
   1f134:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1f138:	movt	r3, #1
   1f13c:	ldr	r1, [fp, #-116]	; 0xffffff8c
   1f140:	mov	r2, #4
   1f144:	add	r6, r5, r6
   1f148:	bl	13390 <qsort@plt>
   1f14c:	ldr	r7, [fp, #-152]	; 0xffffff68
   1f150:	add	r8, r8, r5
   1f154:	add	r4, r4, r6, lsl #2
   1f158:	mov	r5, #0
   1f15c:	sub	r4, r4, #20
   1f160:	str	r4, [fp, #-124]	; 0xffffff84
   1f164:	ldr	r4, [fp, #-116]	; 0xffffff8c
   1f168:	cmp	r4, #0
   1f16c:	beq	1f1fc <__assert_fail@plt+0xbcf8>
   1f170:	ldr	r6, [fp, #-132]	; 0xffffff7c
   1f174:	mov	ip, #0
   1f178:	str	ip, [fp, #-112]	; 0xffffff90
   1f17c:	ldr	r4, [r6], #4
   1f180:	cmp	r4, r8
   1f184:	movcc	r2, r4
   1f188:	bcc	1f194 <__assert_fail@plt+0xbc90>
   1f18c:	b	1f1e0 <__assert_fail@plt+0xbcdc>
   1f190:	ldr	r2, [r6, #-4]
   1f194:	ldr	r2, [r2]
   1f198:	ldr	r9, [r4], #4
   1f19c:	ldr	r1, [r2, #4]
   1f1a0:	ldr	r0, [r9, #4]
   1f1a4:	cmp	r0, r1
   1f1a8:	beq	1f1b8 <__assert_fail@plt+0xbcb4>
   1f1ac:	bl	12cd0 <strcmp@plt>
   1f1b0:	cmp	r0, #0
   1f1b4:	bne	1f1e0 <__assert_fail@plt+0xbcdc>
   1f1b8:	mov	ip, #0
   1f1bc:	mov	r3, r5
   1f1c0:	str	ip, [sp]
   1f1c4:	mov	r1, r9
   1f1c8:	mov	r0, sl
   1f1cc:	mov	r2, r7
   1f1d0:	bl	1d4d4 <__assert_fail@plt+0x9fd0>
   1f1d4:	cmp	r8, r4
   1f1d8:	mov	r5, r0
   1f1dc:	bhi	1f190 <__assert_fail@plt+0xbc8c>
   1f1e0:	ldr	r4, [fp, #-112]	; 0xffffff90
   1f1e4:	ldr	r5, [fp, #-116]	; 0xffffff8c
   1f1e8:	add	r4, r4, #1
   1f1ec:	str	r4, [fp, #-112]	; 0xffffff90
   1f1f0:	cmp	r4, r5
   1f1f4:	mov	r5, #75	; 0x4b
   1f1f8:	bne	1f17c <__assert_fail@plt+0xbc78>
   1f1fc:	ldr	r4, [fp, #-120]	; 0xffffff88
   1f200:	cmp	r4, #0
   1f204:	beq	1f63c <__assert_fail@plt+0xc138>
   1f208:	ldr	ip, [fp, #-124]	; 0xffffff84
   1f20c:	mov	r3, #1
   1f210:	mov	r0, sl
   1f214:	mov	r6, r7
   1f218:	mov	r9, r7
   1f21c:	ldrh	r2, [ip, #10]
   1f220:	ldr	r1, [ip, #12]
   1f224:	cmp	r2, #0
   1f228:	ldrh	r4, [ip, #8]
   1f22c:	moveq	r2, r3
   1f230:	bl	12f64 <gelf_fsize@plt>
   1f234:	mvn	r3, #0
   1f238:	str	r5, [fp, #-112]	; 0xffffff90
   1f23c:	mov	r5, r3
   1f240:	ldr	r7, [fp, #-120]	; 0xffffff88
   1f244:	str	r8, [fp, #-128]	; 0xffffff80
   1f248:	add	r4, r0, r4
   1f24c:	b	1f26c <__assert_fail@plt+0xbd68>
   1f250:	mov	r0, r6
   1f254:	mov	r1, r9
   1f258:	mov	r2, r4
   1f25c:	bl	12d30 <memcmp@plt>
   1f260:	cmp	r0, #0
   1f264:	bne	1f280 <__assert_fail@plt+0xbd7c>
   1f268:	mov	r7, r8
   1f26c:	rsb	r8, r4, r7
   1f270:	add	r5, r5, #1
   1f274:	cmp	r4, r8
   1f278:	add	r6, r6, r4
   1f27c:	bls	1f250 <__assert_fail@plt+0xbd4c>
   1f280:	mov	r3, r5
   1f284:	cmp	r3, #1
   1f288:	mov	r9, r8
   1f28c:	ldr	r5, [fp, #-112]	; 0xffffff90
   1f290:	str	r7, [fp, #-120]	; 0xffffff88
   1f294:	ldr	r8, [fp, #-128]	; 0xffffff80
   1f298:	beq	1f62c <__assert_fail@plt+0xc128>
   1f29c:	ble	1f2d8 <__assert_fail@plt+0xbdd4>
   1f2a0:	mov	r2, #5
   1f2a4:	movw	r1, #1200	; 0x4b0
   1f2a8:	mov	r0, #0
   1f2ac:	movt	r1, #4
   1f2b0:	str	r3, [fp, #-196]	; 0xffffff3c
   1f2b4:	bl	12d84 <dcgettext@plt>
   1f2b8:	ldr	r3, [fp, #-196]	; 0xffffff3c
   1f2bc:	mov	r2, #4
   1f2c0:	str	r3, [sp]
   1f2c4:	movw	r3, #15800	; 0x3db8
   1f2c8:	movt	r3, #4
   1f2cc:	mov	r1, r0
   1f2d0:	mov	r0, #1
   1f2d4:	bl	13204 <__printf_chk@plt>
   1f2d8:	cmp	r9, #0
   1f2dc:	beq	1f63c <__assert_fail@plt+0xc138>
   1f2e0:	str	r9, [fp, #-120]	; 0xffffff88
   1f2e4:	mov	r7, r6
   1f2e8:	b	1f164 <__assert_fail@plt+0xbc60>
   1f2ec:	movw	r3, #37704	; 0x9348
   1f2f0:	movt	r3, #5
   1f2f4:	ldr	sp, [fp, #-176]	; 0xffffff50
   1f2f8:	ldr	r0, [r3]
   1f2fc:	ldr	r3, [r0, #20]
   1f300:	ldr	r2, [r0, #24]
   1f304:	cmp	r3, r2
   1f308:	addcc	r1, r3, #1
   1f30c:	strcc	r1, [r0, #20]
   1f310:	movcc	r2, #10
   1f314:	strbcc	r2, [r3]
   1f318:	bcc	1f324 <__assert_fail@plt+0xbe20>
   1f31c:	mov	r1, #10
   1f320:	bl	132dc <__overflow@plt>
   1f324:	ldr	r4, [fp, #-140]	; 0xffffff74
   1f328:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1f32c:	ldr	r3, [r4]
   1f330:	cmp	r2, r3
   1f334:	bne	1fcd4 <__assert_fail@plt+0xc7d0>
   1f338:	sub	sp, fp, #32
   1f33c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f340:	str	r3, [fp, #-112]	; 0xffffff90
   1f344:	ldr	r4, [fp, #-112]	; 0xffffff90
   1f348:	ldr	r5, [fp, #-104]	; 0xffffff98
   1f34c:	cmp	r4, #0
   1f350:	ldr	r6, [fp, #-96]	; 0xffffffa0
   1f354:	str	r5, [fp, #-188]	; 0xffffff44
   1f358:	beq	1f324 <__assert_fail@plt+0xbe20>
   1f35c:	mov	r4, #0
   1f360:	ldr	r0, [fp, #-136]	; 0xffffff78
   1f364:	mov	r1, r4
   1f368:	str	r4, [sp]
   1f36c:	str	r4, [sp, #4]
   1f370:	mov	r2, r4
   1f374:	str	r4, [sp, #8]
   1f378:	mov	r3, r4
   1f37c:	str	r4, [sp, #12]
   1f380:	bl	3b11c <__assert_fail@plt+0x27c18>
   1f384:	cmp	r0, #0
   1f388:	movgt	r7, r0
   1f38c:	ble	1f68c <__assert_fail@plt+0xc188>
   1f390:	lsl	r4, r7, #3
   1f394:	str	sp, [fp, #-176]	; 0xffffff50
   1f398:	add	r2, r4, r7
   1f39c:	mov	r1, #0
   1f3a0:	str	r4, [fp, #-120]	; 0xffffff88
   1f3a4:	mov	r9, r1
   1f3a8:	lsl	r2, r2, #2
   1f3ac:	mov	r8, r1
   1f3b0:	add	r3, r2, #10
   1f3b4:	bic	r3, r3, #7
   1f3b8:	sub	sp, sp, r3
   1f3bc:	add	r5, sp, #24
   1f3c0:	str	r5, [fp, #-116]	; 0xffffff8c
   1f3c4:	mov	r0, r5
   1f3c8:	bl	13198 <memset@plt>
   1f3cc:	str	sl, [fp, #-124]	; 0xffffff84
   1f3d0:	ldr	sl, [fp, #-136]	; 0xffffff78
   1f3d4:	ldrh	r5, [r6, #2]
   1f3d8:	ldrh	r3, [r6, #6]
   1f3dc:	add	r3, r5, r3
   1f3e0:	cmp	r5, r3
   1f3e4:	bge	1f460 <__assert_fail@plt+0xbf5c>
   1f3e8:	cmp	r5, r7
   1f3ec:	bge	1fc74 <__assert_fail@plt+0xc770>
   1f3f0:	add	r4, r5, r5, lsl #3
   1f3f4:	ldr	ip, [fp, #-116]	; 0xffffff8c
   1f3f8:	add	r4, ip, r4, lsl #2
   1f3fc:	add	r4, r4, #8
   1f400:	b	1f410 <__assert_fail@plt+0xbf0c>
   1f404:	cmp	r5, r7
   1f408:	add	r4, r4, #36	; 0x24
   1f40c:	bge	1fc74 <__assert_fail@plt+0xc770>
   1f410:	str	r5, [r4, #16]
   1f414:	add	r2, r4, #20
   1f418:	str	r6, [r4, #-8]
   1f41c:	add	r3, r4, #24
   1f420:	str	r2, [sp]
   1f424:	mov	r1, r5
   1f428:	str	r3, [sp, #4]
   1f42c:	mov	r2, r6
   1f430:	mov	r3, r4
   1f434:	mov	r0, sl
   1f438:	bl	1577c <__assert_fail@plt+0x2278>
   1f43c:	cmp	r9, r5
   1f440:	movlt	r9, r5
   1f444:	add	r5, r5, #1
   1f448:	str	r0, [r4, #-4]
   1f44c:	ldrh	r2, [r6, #2]
   1f450:	ldrh	r3, [r6, #6]
   1f454:	add	r3, r2, r3
   1f458:	cmp	r5, r3
   1f45c:	blt	1f404 <__assert_fail@plt+0xbf00>
   1f460:	ldr	r4, [fp, #-112]	; 0xffffff90
   1f464:	add	r8, r8, #1
   1f468:	add	r6, r6, #10
   1f46c:	cmp	r8, r4
   1f470:	bne	1f3d4 <__assert_fail@plt+0xbed0>
   1f474:	add	ip, r9, #1
   1f478:	movw	r3, #25664	; 0x6440
   1f47c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1f480:	movt	r3, #1
   1f484:	mov	r1, ip
   1f488:	mov	r2, #36	; 0x24
   1f48c:	str	ip, [fp, #-196]	; 0xffffff3c
   1f490:	ldr	sl, [fp, #-124]	; 0xffffff84
   1f494:	bl	13390 <qsort@plt>
   1f498:	ldr	ip, [fp, #-196]	; 0xffffff3c
   1f49c:	cmp	r9, #0
   1f4a0:	ldr	r5, [fp, #-116]	; 0xffffff8c
   1f4a4:	lsl	r3, ip, #2
   1f4a8:	add	r3, r3, #10
   1f4ac:	bic	r3, r3, #7
   1f4b0:	sub	sp, sp, r3
   1f4b4:	add	r4, sp, #24
   1f4b8:	str	r5, [r4]
   1f4bc:	ble	1fc98 <__assert_fail@plt+0xc794>
   1f4c0:	ldr	r5, [fp, #-120]	; 0xffffff88
   1f4c4:	mov	r8, #1
   1f4c8:	ldr	r1, [fp, #-116]	; 0xffffff8c
   1f4cc:	mov	r2, sl
   1f4d0:	add	r9, r5, r7
   1f4d4:	mov	r5, #1
   1f4d8:	str	r5, [fp, #-144]	; 0xffffff70
   1f4dc:	add	r5, r1, #36	; 0x24
   1f4e0:	add	r9, r1, r9, lsl #2
   1f4e4:	mov	sl, r4
   1f4e8:	str	r7, [fp, #-112]	; 0xffffff90
   1f4ec:	mov	r6, r1
   1f4f0:	mov	r4, r8
   1f4f4:	mov	r7, ip
   1f4f8:	ldr	r3, [r6, #36]	; 0x24
   1f4fc:	cmp	r3, #0
   1f500:	beq	1f538 <__assert_fail@plt+0xc034>
   1f504:	cmp	r5, r9
   1f508:	bcs	1f530 <__assert_fail@plt+0xc02c>
   1f50c:	cmp	r9, r6
   1f510:	bls	1f530 <__assert_fail@plt+0xc02c>
   1f514:	ldr	r3, [r5, #-36]	; 0xffffffdc
   1f518:	cmp	r3, #0
   1f51c:	beq	1f530 <__assert_fail@plt+0xc02c>
   1f520:	ldr	r1, [r5, #28]
   1f524:	ldr	r3, [r5, #-8]
   1f528:	cmp	r1, r3
   1f52c:	beq	1fc38 <__assert_fail@plt+0xc734>
   1f530:	str	r5, [sl, r4, lsl #2]
   1f534:	add	r4, r4, #1
   1f538:	add	r8, r8, #1
   1f53c:	add	r6, r6, #36	; 0x24
   1f540:	cmp	r8, r7
   1f544:	add	r5, r5, #36	; 0x24
   1f548:	bne	1f4f8 <__assert_fail@plt+0xbff4>
   1f54c:	str	r4, [fp, #-144]	; 0xffffff70
   1f550:	mov	r4, sl
   1f554:	movw	r3, #25628	; 0x641c
   1f558:	mov	sl, r2
   1f55c:	mov	r0, r4
   1f560:	movt	r3, #1
   1f564:	ldr	r1, [fp, #-144]	; 0xffffff70
   1f568:	mov	r2, #4
   1f56c:	ldr	r7, [fp, #-112]	; 0xffffff90
   1f570:	bl	13390 <qsort@plt>
   1f574:	ldr	r5, [fp, #-144]	; 0xffffff70
   1f578:	cmp	r5, #0
   1f57c:	beq	1fd48 <__assert_fail@plt+0xc844>
   1f580:	ldr	r5, [fp, #-120]	; 0xffffff88
   1f584:	mov	r8, #0
   1f588:	ldr	ip, [fp, #-116]	; 0xffffff8c
   1f58c:	movw	r9, #1376	; 0x560
   1f590:	add	r7, r5, r7
   1f594:	movt	r9, #4
   1f598:	str	sl, [fp, #-124]	; 0xffffff84
   1f59c:	mov	sl, r8
   1f5a0:	sub	r4, r4, #4
   1f5a4:	add	r7, ip, r7, lsl #2
   1f5a8:	str	r4, [fp, #-184]	; 0xffffff48
   1f5ac:	movw	r5, #1280	; 0x500
   1f5b0:	movw	r4, #1368	; 0x558
   1f5b4:	movt	r5, #4
   1f5b8:	movt	r4, #4
   1f5bc:	movw	ip, #1272	; 0x4f8
   1f5c0:	str	r4, [fp, #-132]	; 0xffffff7c
   1f5c4:	movt	ip, #4
   1f5c8:	str	r5, [fp, #-160]	; 0xffffff60
   1f5cc:	movw	r4, #1296	; 0x510
   1f5d0:	movw	r5, #1288	; 0x508
   1f5d4:	movt	r4, #4
   1f5d8:	movt	r5, #4
   1f5dc:	str	r8, [fp, #-156]	; 0xffffff64
   1f5e0:	str	r7, [fp, #-180]	; 0xffffff4c
   1f5e4:	str	ip, [fp, #-164]	; 0xffffff5c
   1f5e8:	str	r4, [fp, #-168]	; 0xffffff58
   1f5ec:	str	r5, [fp, #-172]	; 0xffffff54
   1f5f0:	ldr	r4, [fp, #-184]	; 0xffffff48
   1f5f4:	ldr	r5, [fp, #-180]	; 0xffffff4c
   1f5f8:	ldr	ip, [r4, #4]!
   1f5fc:	cmp	ip, r5
   1f600:	str	r4, [fp, #-184]	; 0xffffff48
   1f604:	str	ip, [fp, #-116]	; 0xffffff8c
   1f608:	bcc	1f728 <__assert_fail@plt+0xc224>
   1f60c:	ldr	ip, [fp, #-156]	; 0xffffff64
   1f610:	ldr	r4, [fp, #-144]	; 0xffffff70
   1f614:	add	ip, ip, #1
   1f618:	str	ip, [fp, #-156]	; 0xffffff64
   1f61c:	cmp	r4, ip
   1f620:	bls	1f2ec <__assert_fail@plt+0xbde8>
   1f624:	mov	sl, #75	; 0x4b
   1f628:	b	1f5f0 <__assert_fail@plt+0xc0ec>
   1f62c:	ldr	r9, [fp, #-120]	; 0xffffff88
   1f630:	rsb	r6, r4, r6
   1f634:	cmp	r9, #0
   1f638:	bne	1f2e0 <__assert_fail@plt+0xbddc>
   1f63c:	ldr	sp, [fp, #-144]	; 0xffffff70
   1f640:	mov	r0, r5
   1f644:	cmp	r0, #0
   1f648:	beq	1fc60 <__assert_fail@plt+0xc75c>
   1f64c:	movw	r3, #37704	; 0x9348
   1f650:	movt	r3, #5
   1f654:	ldr	r0, [r3]
   1f658:	ldr	r3, [r0, #20]
   1f65c:	ldr	r2, [r0, #24]
   1f660:	cmp	r3, r2
   1f664:	bcs	1fcb8 <__assert_fail@plt+0xc7b4>
   1f668:	add	r1, r3, #1
   1f66c:	mov	r2, #10
   1f670:	str	r1, [r0, #20]
   1f674:	strb	r2, [r3]
   1f678:	ldr	r5, [fp, #-100]	; 0xffffff9c
   1f67c:	ldr	ip, [fp, #-136]	; 0xffffff78
   1f680:	str	r5, [fp, #-112]	; 0xffffff90
   1f684:	ldr	sl, [ip, #16]
   1f688:	b	1f344 <__assert_fail@plt+0xbe40>
   1f68c:	ldr	ip, [fp, #-112]	; 0xffffff90
   1f690:	mov	r7, r0
   1f694:	add	r2, ip, ip, lsl #2
   1f698:	lsl	r2, r2, #1
   1f69c:	add	r3, r6, r4
   1f6a0:	add	r4, r4, #10
   1f6a4:	ldrh	r1, [r3, #2]
   1f6a8:	ldrh	r3, [r3, #6]
   1f6ac:	add	r3, r1, r3
   1f6b0:	cmp	r7, r3
   1f6b4:	movlt	r7, r3
   1f6b8:	cmp	r4, r2
   1f6bc:	bne	1f69c <__assert_fail@plt+0xc198>
   1f6c0:	cmp	r7, #0
   1f6c4:	bne	1f390 <__assert_fail@plt+0xbe8c>
   1f6c8:	movw	r0, #1236	; 0x4d4
   1f6cc:	movw	r1, #24
   1f6d0:	movt	r0, #4
   1f6d4:	movt	r1, #4
   1f6d8:	movw	r2, #11879	; 0x2e67
   1f6dc:	ldr	r3, [pc, #1644]	; 1fd50 <__assert_fail@plt+0xc84c>
   1f6e0:	bl	13504 <__assert_fail@plt>
   1f6e4:	cmp	r3, #10
   1f6e8:	beq	1f6f8 <__assert_fail@plt+0xc1f4>
   1f6ec:	and	r3, r3, #223	; 0xdf
   1f6f0:	cmp	r3, #66	; 0x42
   1f6f4:	bne	1f03c <__assert_fail@plt+0xbb38>
   1f6f8:	ldrh	r3, [r4, #8]
   1f6fc:	cmp	r3, #0
   1f700:	bne	1fcf4 <__assert_fail@plt+0xc7f0>
   1f704:	mov	r1, r4
   1f708:	ldr	r4, [fp, #-120]	; 0xffffff88
   1f70c:	sub	ip, fp, #36	; 0x24
   1f710:	ldr	r2, [fp, #-152]	; 0xffffff68
   1f714:	mov	r0, sl
   1f718:	str	r4, [ip, #-44]!	; 0xffffffd4
   1f71c:	str	ip, [sp]
   1f720:	bl	1d4d4 <__assert_fail@plt+0x9fd0>
   1f724:	b	1f644 <__assert_fail@plt+0xc140>
   1f728:	ldr	r5, [fp, #-116]	; 0xffffff8c
   1f72c:	ldr	r8, [r5]
   1f730:	cmp	r8, #0
   1f734:	beq	1f60c <__assert_fail@plt+0xc108>
   1f738:	ldr	ip, [fp, #-116]	; 0xffffff8c
   1f73c:	mov	r3, r8
   1f740:	ldr	r5, [r5, #28]
   1f744:	ldr	r4, [ip, #4]
   1f748:	mov	r7, ip
   1f74c:	add	r6, r7, #36	; 0x24
   1f750:	str	ip, [fp, #-148]	; 0xffffff6c
   1f754:	mov	ip, #0
   1f758:	str	ip, [fp, #-112]	; 0xffffff90
   1f75c:	mov	r8, r4
   1f760:	mov	r4, r7
   1f764:	add	r0, r4, #8
   1f768:	str	r3, [fp, #-196]	; 0xffffff3c
   1f76c:	bl	13090 <strlen@plt>
   1f770:	ldr	ip, [fp, #-112]	; 0xffffff90
   1f774:	add	r4, r4, #36	; 0x24
   1f778:	ldr	r3, [fp, #-196]	; 0xffffff3c
   1f77c:	cmp	ip, r0
   1f780:	movcc	ip, r0
   1f784:	str	ip, [fp, #-112]	; 0xffffff90
   1f788:	ldr	ip, [fp, #-180]	; 0xffffff4c
   1f78c:	cmp	r4, ip
   1f790:	bcs	1f7ac <__assert_fail@plt+0xc2a8>
   1f794:	ldr	r2, [r7, #36]	; 0x24
   1f798:	cmp	r2, #0
   1f79c:	beq	1f7ac <__assert_fail@plt+0xc2a8>
   1f7a0:	ldr	r2, [r4, #28]
   1f7a4:	cmp	r2, r5
   1f7a8:	beq	1fc00 <__assert_fail@plt+0xc6fc>
   1f7ac:	str	r4, [fp, #-148]	; 0xffffff6c
   1f7b0:	mov	r8, r3
   1f7b4:	ldr	r4, [fp, #-116]	; 0xffffff8c
   1f7b8:	ldr	r5, [fp, #-148]	; 0xffffff6c
   1f7bc:	cmp	r4, r5
   1f7c0:	bcs	1f60c <__assert_fail@plt+0xc108>
   1f7c4:	ldrb	r3, [r3, #4]
   1f7c8:	tst	r3, #7
   1f7cc:	bne	1fbb0 <__assert_fail@plt+0xc6ac>
   1f7d0:	ldr	r5, [fp, #-152]	; 0xffffff68
   1f7d4:	ldr	ip, [fp, #-188]	; 0xffffff44
   1f7d8:	add	r5, r5, ip
   1f7dc:	str	r5, [fp, #-192]	; 0xffffff40
   1f7e0:	ldrh	r5, [r8, #2]
   1f7e4:	ldrh	r3, [r8, #6]
   1f7e8:	ldrh	r4, [r8]
   1f7ec:	add	r3, r3, r5
   1f7f0:	ldr	ip, [fp, #-192]	; 0xffffff40
   1f7f4:	cmp	r3, r5
   1f7f8:	add	r4, ip, r4
   1f7fc:	ble	1fb68 <__assert_fail@plt+0xc664>
   1f800:	sub	ip, fp, #80	; 0x50
   1f804:	sub	r6, fp, #56	; 0x38
   1f808:	str	ip, [fp, #-128]	; 0xffffff80
   1f80c:	str	r5, [fp, #-200]	; 0xffffff38
   1f810:	b	1f8d4 <__assert_fail@plt+0xc3d0>
   1f814:	mov	r2, #1
   1f818:	lsl	r3, r2, r3
   1f81c:	tst	r3, #81	; 0x51
   1f820:	beq	1f908 <__assert_fail@plt+0xc404>
   1f824:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f828:	cmp	ip, #32
   1f82c:	beq	1fab4 <__assert_fail@plt+0xc5b0>
   1f830:	bgt	1fa10 <__assert_fail@plt+0xc50c>
   1f834:	cmp	ip, #8
   1f838:	beq	1fbb4 <__assert_fail@plt+0xc6b0>
   1f83c:	cmp	ip, #16
   1f840:	bne	1fbb0 <__assert_fail@plt+0xc6ac>
   1f844:	str	r4, [sp]
   1f848:	mov	r3, #0
   1f84c:	ldr	r0, [fp, #-124]	; 0xffffff84
   1f850:	mov	r1, #4
   1f854:	str	r3, [sp, #4]
   1f858:	sub	r3, fp, #76	; 0x4c
   1f85c:	bl	15530 <__assert_fail@plt+0x202c>
   1f860:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1f864:	str	r6, [sp]
   1f868:	cmp	r3, #5
   1f86c:	movweq	r3, #1268	; 0x4f4
   1f870:	movwne	r3, #64	; 0x40
   1f874:	movteq	r3, #4
   1f878:	movtne	r3, #4
   1f87c:	streq	r3, [sp, #4]
   1f880:	strne	r3, [sp, #4]
   1f884:	ldrsheq	lr, [fp, #-76]	; 0xffffffb4
   1f888:	ldrhne	lr, [fp, #-76]	; 0xffffffb4
   1f88c:	mov	r7, r0
   1f890:	mov	r0, sl
   1f894:	mov	r1, #32
   1f898:	ldr	r3, [fp, #-112]	; 0xffffff90
   1f89c:	mov	r2, #75	; 0x4b
   1f8a0:	str	lr, [sp, #8]
   1f8a4:	bl	1d37c <__assert_fail@plt+0x9e78>
   1f8a8:	mov	sl, r0
   1f8ac:	ldr	ip, [fp, #-200]	; 0xffffff38
   1f8b0:	ldrh	r2, [r8, #2]
   1f8b4:	ldrh	r3, [r8, #6]
   1f8b8:	add	ip, ip, #1
   1f8bc:	ldrb	r4, [r8, #5]
   1f8c0:	add	r3, r2, r3
   1f8c4:	str	ip, [fp, #-200]	; 0xffffff38
   1f8c8:	cmp	ip, r3
   1f8cc:	add	r4, r7, r4
   1f8d0:	bge	1fb68 <__assert_fail@plt+0xc664>
   1f8d4:	sub	r1, fp, #84	; 0x54
   1f8d8:	str	r1, [sp]
   1f8dc:	ldr	r5, [fp, #-128]	; 0xffffff80
   1f8e0:	mov	r3, r6
   1f8e4:	ldr	r0, [fp, #-136]	; 0xffffff78
   1f8e8:	mov	r2, r8
   1f8ec:	str	r5, [sp, #4]
   1f8f0:	ldr	r1, [fp, #-200]	; 0xffffff38
   1f8f4:	bl	1577c <__assert_fail@plt+0x2278>
   1f8f8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1f8fc:	sub	r3, r1, #1
   1f900:	cmp	r3, #6
   1f904:	bls	1f814 <__assert_fail@plt+0xc310>
   1f908:	ldr	r2, [fp, #-84]	; 0xffffffac
   1f90c:	ands	lr, r2, #7
   1f910:	bne	1fd2c <__assert_fail@plt+0xc828>
   1f914:	cmp	r2, #0
   1f918:	add	r3, r2, #3
   1f91c:	add	r7, r2, #7
   1f920:	str	sp, [fp, #-120]	; 0xffffff88
   1f924:	movge	r3, r2
   1f928:	ldr	r0, [fp, #-124]	; 0xffffff84
   1f92c:	asr	r1, r3, #2
   1f930:	movge	r7, r2
   1f934:	add	r2, r1, #8
   1f938:	mov	r1, lr
   1f93c:	bic	r2, r2, #7
   1f940:	add	r7, r4, r7, asr #3
   1f944:	sub	sp, sp, r2
   1f948:	add	r2, sp, #24
   1f94c:	strb	lr, [r2, r3, asr #2]
   1f950:	str	r2, [fp, #-196]	; 0xffffff3c
   1f954:	bl	12d60 <elf_getident@plt>
   1f958:	ldr	r2, [fp, #-196]	; 0xffffff3c
   1f95c:	ldrb	r3, [r0, #5]
   1f960:	cmp	r3, #1
   1f964:	ldr	r3, [fp, #-84]	; 0xffffffac
   1f968:	movne	lr, #1
   1f96c:	beq	1f9f0 <__assert_fail@plt+0xc4ec>
   1f970:	cmp	r3, #0
   1f974:	ble	1f9c0 <__assert_fail@plt+0xc4bc>
   1f978:	ldr	r5, [fp, #-200]	; 0xffffff38
   1f97c:	mov	r1, r2
   1f980:	mov	r3, #0
   1f984:	ldrb	r0, [r4, r3]
   1f988:	add	r1, r1, #2
   1f98c:	ldrb	r0, [r9, r0, lsr #4]
   1f990:	strb	r0, [r1, #-2]
   1f994:	ldrb	r0, [r4, r3]
   1f998:	add	r3, r3, lr
   1f99c:	and	r0, r0, #15
   1f9a0:	ldrb	r0, [r9, r0]
   1f9a4:	strb	r0, [r1, #-1]
   1f9a8:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f9ac:	sub	r0, r0, #8
   1f9b0:	str	r0, [fp, #-84]	; 0xffffffac
   1f9b4:	cmp	r0, #0
   1f9b8:	bgt	1f984 <__assert_fail@plt+0xc480>
   1f9bc:	str	r5, [fp, #-200]	; 0xffffff38
   1f9c0:	str	r6, [sp]
   1f9c4:	mov	r0, sl
   1f9c8:	ldr	r5, [fp, #-132]	; 0xffffff7c
   1f9cc:	mov	r1, #32
   1f9d0:	str	r2, [sp, #8]
   1f9d4:	mov	r2, #75	; 0x4b
   1f9d8:	str	r5, [sp, #4]
   1f9dc:	ldr	r3, [fp, #-112]	; 0xffffff90
   1f9e0:	bl	1d37c <__assert_fail@plt+0x9e78>
   1f9e4:	ldr	sp, [fp, #-120]	; 0xffffff88
   1f9e8:	mov	sl, r0
   1f9ec:	b	1f8ac <__assert_fail@plt+0xc3a8>
   1f9f0:	cmp	r3, #0
   1f9f4:	add	r1, r3, #7
   1f9f8:	mvn	lr, #0
   1f9fc:	movge	r1, r3
   1fa00:	asr	r1, r1, #3
   1fa04:	add	r1, r1, lr
   1fa08:	add	r4, r4, r1
   1fa0c:	b	1f970 <__assert_fail@plt+0xc46c>
   1fa10:	cmp	ip, #64	; 0x40
   1fa14:	beq	1fb08 <__assert_fail@plt+0xc604>
   1fa18:	cmp	ip, #128	; 0x80
   1fa1c:	bne	1fbb0 <__assert_fail@plt+0xc6ac>
   1fa20:	cmp	r1, #7
   1fa24:	bne	1fd10 <__assert_fail@plt+0xc80c>
   1fa28:	str	r4, [sp]
   1fa2c:	mov	r2, #2
   1fa30:	mov	r4, #0
   1fa34:	sub	r3, fp, #76	; 0x4c
   1fa38:	ldr	r0, [fp, #-124]	; 0xffffff84
   1fa3c:	mov	r1, #13
   1fa40:	str	r4, [sp, #4]
   1fa44:	sub	r5, fp, #36	; 0x24
   1fa48:	bl	15530 <__assert_fail@plt+0x202c>
   1fa4c:	mov	r1, r4
   1fa50:	mov	r7, r0
   1fa54:	ldr	r0, [fp, #-124]	; 0xffffff84
   1fa58:	bl	12d60 <elf_getident@plt>
   1fa5c:	ldr	r3, [fp, #-112]	; 0xffffff90
   1fa60:	movw	lr, #1332	; 0x534
   1fa64:	movt	lr, #4
   1fa68:	mov	r1, #32
   1fa6c:	mov	r2, #75	; 0x4b
   1fa70:	ldrb	r4, [r0, #5]
   1fa74:	mov	r0, sl
   1fa78:	str	lr, [sp, #4]
   1fa7c:	subs	ip, r4, #2
   1fa80:	str	r6, [sp]
   1fa84:	rsbs	r4, ip, #0
   1fa88:	adcs	r4, r4, ip
   1fa8c:	eor	lr, r4, #1
   1fa90:	add	sl, r5, r4, lsl #3
   1fa94:	add	lr, r5, lr, lsl #3
   1fa98:	ldrd	r4, [lr, #-40]	; 0xffffffd8
   1fa9c:	strd	r4, [sp, #8]
   1faa0:	ldrd	r4, [sl, #-40]	; 0xffffffd8
   1faa4:	strd	r4, [sp, #16]
   1faa8:	bl	1d37c <__assert_fail@plt+0x9e78>
   1faac:	mov	sl, r0
   1fab0:	b	1f8ac <__assert_fail@plt+0xc3a8>
   1fab4:	str	r4, [sp]
   1fab8:	mov	r3, #0
   1fabc:	ldr	r0, [fp, #-124]	; 0xffffff84
   1fac0:	mov	r1, #12
   1fac4:	str	r3, [sp, #4]
   1fac8:	sub	r3, fp, #76	; 0x4c
   1facc:	str	ip, [fp, #-196]	; 0xffffff3c
   1fad0:	bl	15530 <__assert_fail@plt+0x202c>
   1fad4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1fad8:	ldr	ip, [fp, #-196]	; 0xffffff3c
   1fadc:	cmp	r3, #5
   1fae0:	str	r6, [sp]
   1fae4:	ldreq	r4, [fp, #-164]	; 0xffffff5c
   1fae8:	mov	r1, ip
   1faec:	ldrne	r5, [fp, #-160]	; 0xffffff60
   1faf0:	streq	r4, [sp, #4]
   1faf4:	strne	r5, [sp, #4]
   1faf8:	ldr	lr, [fp, #-76]	; 0xffffffb4
   1fafc:	mov	r7, r0
   1fb00:	mov	r0, sl
   1fb04:	b	1f898 <__assert_fail@plt+0xc394>
   1fb08:	str	r4, [sp]
   1fb0c:	mov	r3, #0
   1fb10:	ldr	r0, [fp, #-124]	; 0xffffff84
   1fb14:	mov	r1, #13
   1fb18:	str	r3, [sp, #4]
   1fb1c:	sub	r3, fp, #76	; 0x4c
   1fb20:	bl	15530 <__assert_fail@plt+0x202c>
   1fb24:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1fb28:	str	r6, [sp]
   1fb2c:	mov	r1, #32
   1fb30:	cmp	r3, #5
   1fb34:	mov	r2, #75	; 0x4b
   1fb38:	ldrne	r5, [fp, #-168]	; 0xffffff58
   1fb3c:	ldreq	ip, [fp, #-172]	; 0xffffff54
   1fb40:	strne	r5, [sp, #4]
   1fb44:	streq	ip, [sp, #4]
   1fb48:	mov	r7, r0
   1fb4c:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   1fb50:	mov	r0, sl
   1fb54:	ldr	r3, [fp, #-112]	; 0xffffff90
   1fb58:	strd	r4, [sp, #8]
   1fb5c:	bl	1d37c <__assert_fail@plt+0x9e78>
   1fb60:	mov	sl, r0
   1fb64:	b	1f8ac <__assert_fail@plt+0xc3a8>
   1fb68:	ldr	r4, [fp, #-116]	; 0xffffff8c
   1fb6c:	ldr	r5, [fp, #-116]	; 0xffffff8c
   1fb70:	ldr	ip, [fp, #-148]	; 0xffffff6c
   1fb74:	ldr	r3, [r4]
   1fb78:	ldrh	r3, [r3, #6]
   1fb7c:	cmp	r3, #0
   1fb80:	addne	r3, r3, r3, lsl #3
   1fb84:	moveq	r3, #36	; 0x24
   1fb88:	lslne	r3, r3, #2
   1fb8c:	add	r5, r5, r3
   1fb90:	str	r5, [fp, #-116]	; 0xffffff8c
   1fb94:	cmp	r5, ip
   1fb98:	bcs	1f60c <__assert_fail@plt+0xc108>
   1fb9c:	ldr	r4, [fp, #-116]	; 0xffffff8c
   1fba0:	ldr	r8, [r4]
   1fba4:	ldrb	r3, [r8, #4]
   1fba8:	tst	r3, #7
   1fbac:	beq	1f7e0 <__assert_fail@plt+0xc2dc>
   1fbb0:	bl	13474 <abort@plt>
   1fbb4:	mov	r1, #0
   1fbb8:	str	r4, [sp]
   1fbbc:	str	r1, [sp, #4]
   1fbc0:	sub	r3, fp, #76	; 0x4c
   1fbc4:	ldr	r0, [fp, #-124]	; 0xffffff84
   1fbc8:	bl	15530 <__assert_fail@plt+0x202c>
   1fbcc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1fbd0:	str	r6, [sp]
   1fbd4:	cmp	r3, #5
   1fbd8:	movweq	r3, #1264	; 0x4f0
   1fbdc:	movwne	r3, #56	; 0x38
   1fbe0:	movteq	r3, #4
   1fbe4:	movtne	r3, #4
   1fbe8:	streq	r3, [sp, #4]
   1fbec:	strne	r3, [sp, #4]
   1fbf0:	ldrsbeq	lr, [fp, #-76]	; 0xffffffb4
   1fbf4:	ldrbne	lr, [fp, #-76]	; 0xffffffb4
   1fbf8:	mov	r7, r0
   1fbfc:	b	1f890 <__assert_fail@plt+0xc38c>
   1fc00:	ldr	ip, [fp, #-116]	; 0xffffff8c
   1fc04:	rsb	r2, ip, r7
   1fc08:	add	r7, r7, #36	; 0x24
   1fc0c:	add	r2, r2, r6
   1fc10:	ldr	r1, [r2, #4]
   1fc14:	cmp	r8, r1
   1fc18:	beq	1f764 <__assert_fail@plt+0xc260>
   1fc1c:	mov	r0, r8
   1fc20:	str	r3, [fp, #-196]	; 0xffffff3c
   1fc24:	bl	12cd0 <strcmp@plt>
   1fc28:	ldr	r3, [fp, #-196]	; 0xffffff3c
   1fc2c:	cmp	r0, #0
   1fc30:	bne	1f7ac <__assert_fail@plt+0xc2a8>
   1fc34:	b	1f764 <__assert_fail@plt+0xc260>
   1fc38:	ldr	r0, [r6, #40]	; 0x28
   1fc3c:	ldr	r1, [r5, #-32]	; 0xffffffe0
   1fc40:	cmp	r0, r1
   1fc44:	beq	1f538 <__assert_fail@plt+0xc034>
   1fc48:	str	r2, [fp, #-196]	; 0xffffff3c
   1fc4c:	bl	12cd0 <strcmp@plt>
   1fc50:	ldr	r2, [fp, #-196]	; 0xffffff3c
   1fc54:	cmp	r0, #0
   1fc58:	bne	1f530 <__assert_fail@plt+0xc02c>
   1fc5c:	b	1f538 <__assert_fail@plt+0xc034>
   1fc60:	ldr	r4, [fp, #-136]	; 0xffffff78
   1fc64:	ldr	r5, [fp, #-100]	; 0xffffff9c
   1fc68:	ldr	sl, [r4, #16]
   1fc6c:	str	r5, [fp, #-112]	; 0xffffff90
   1fc70:	b	1f344 <__assert_fail@plt+0xbe40>
   1fc74:	movw	r0, #1248	; 0x4e0
   1fc78:	movw	r1, #24
   1fc7c:	movt	r0, #4
   1fc80:	movt	r1, #4
   1fc84:	movw	r2, #11892	; 0x2e74
   1fc88:	ldr	r3, [pc, #192]	; 1fd50 <__assert_fail@plt+0xc84c>
   1fc8c:	bl	13504 <__assert_fail@plt>
   1fc90:	str	r6, [fp, #-116]	; 0xffffff8c
   1fc94:	b	1f130 <__assert_fail@plt+0xbc2c>
   1fc98:	mov	r1, #1
   1fc9c:	movw	r3, #25628	; 0x641c
   1fca0:	mov	r0, r4
   1fca4:	movt	r3, #1
   1fca8:	mov	r2, #4
   1fcac:	str	r1, [fp, #-144]	; 0xffffff70
   1fcb0:	bl	13390 <qsort@plt>
   1fcb4:	b	1f580 <__assert_fail@plt+0xc07c>
   1fcb8:	mov	r1, #10
   1fcbc:	bl	132dc <__overflow@plt>
   1fcc0:	ldr	ip, [fp, #-136]	; 0xffffff78
   1fcc4:	ldr	r4, [fp, #-100]	; 0xffffff9c
   1fcc8:	ldr	sl, [ip, #16]
   1fccc:	str	r4, [fp, #-112]	; 0xffffff90
   1fcd0:	b	1f344 <__assert_fail@plt+0xbe40>
   1fcd4:	bl	12dc0 <__stack_chk_fail@plt>
   1fcd8:	movw	r0, #1176	; 0x498
   1fcdc:	movw	r1, #24
   1fce0:	movt	r0, #4
   1fce4:	movt	r1, #4
   1fce8:	movw	r2, #11634	; 0x2d72
   1fcec:	ldr	r3, [pc, #96]	; 1fd54 <__assert_fail@plt+0xc850>
   1fcf0:	bl	13504 <__assert_fail@plt>
   1fcf4:	movw	r0, #1152	; 0x480
   1fcf8:	movw	r1, #24
   1fcfc:	movt	r0, #4
   1fd00:	movt	r1, #4
   1fd04:	movw	r2, #11626	; 0x2d6a
   1fd08:	ldr	r3, [pc, #68]	; 1fd54 <__assert_fail@plt+0xc850>
   1fd0c:	bl	13504 <__assert_fail@plt>
   1fd10:	movw	r0, #1308	; 0x51c
   1fd14:	movw	r1, #24
   1fd18:	movt	r0, #4
   1fd1c:	movt	r1, #4
   1fd20:	movw	r2, #11767	; 0x2df7
   1fd24:	ldr	r3, [pc, #44]	; 1fd58 <__assert_fail@plt+0xc854>
   1fd28:	bl	13504 <__assert_fail@plt>
   1fd2c:	movw	r0, #1352	; 0x548
   1fd30:	movw	r1, #24
   1fd34:	movt	r0, #4
   1fd38:	movt	r1, #4
   1fd3c:	movw	r2, #11784	; 0x2e08
   1fd40:	ldr	r3, [pc, #16]	; 1fd58 <__assert_fail@plt+0xc854>
   1fd44:	bl	13504 <__assert_fail@plt>
   1fd48:	ldr	sp, [fp, #-176]	; 0xffffff50
   1fd4c:	b	1f324 <__assert_fail@plt+0xbe20>
   1fd50:	andeq	ip, r3, r8, ror r7
   1fd54:	andeq	ip, r3, r4, ror #14
   1fd58:	muleq	r3, r0, r7
   1fd5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd60:	movw	r4, #37688	; 0x9338
   1fd64:	movt	r4, #5
   1fd68:	sub	sp, sp, #372	; 0x174
   1fd6c:	mov	r7, r0
   1fd70:	mov	r0, #0
   1fd74:	ldr	ip, [r4]
   1fd78:	strd	r2, [sp, #48]	; 0x30
   1fd7c:	mov	r2, #5
   1fd80:	str	r1, [sp, #32]
   1fd84:	movw	r1, #1420	; 0x58c
   1fd88:	movt	r1, #4
   1fd8c:	str	ip, [sp, #364]	; 0x16c
   1fd90:	ldr	fp, [sp, #408]	; 0x198
   1fd94:	str	r4, [sp, #40]	; 0x28
   1fd98:	bl	12d84 <dcgettext@plt>
   1fd9c:	movw	r3, #37704	; 0x9348
   1fda0:	movt	r3, #5
   1fda4:	ldr	r1, [r3]
   1fda8:	bl	12c58 <fputs_unlocked@plt>
   1fdac:	cmp	fp, #0
   1fdb0:	beq	20668 <__assert_fail@plt+0xd164>
   1fdb4:	ldr	r3, [fp, #12]
   1fdb8:	cmp	r3, #0
   1fdbc:	beq	1ffdc <__assert_fail@plt+0xcad8>
   1fdc0:	mov	sl, #0
   1fdc4:	movw	r5, #19525	; 0x4c45
   1fdc8:	movw	r8, #18249	; 0x4749
   1fdcc:	movt	r5, #17993	; 0x4649
   1fdd0:	movt	r8, #21321	; 0x5349
   1fdd4:	str	r5, [sp, #44]	; 0x2c
   1fdd8:	str	r8, [sp, #64]	; 0x40
   1fddc:	mov	r1, sl
   1fde0:	add	r8, sp, #88	; 0x58
   1fde4:	mov	r0, fp
   1fde8:	str	r8, [sp]
   1fdec:	add	r2, sp, #132	; 0x84
   1fdf0:	add	r3, sp, #84	; 0x54
   1fdf4:	bl	12da8 <gelf_getnote@plt>
   1fdf8:	subs	sl, r0, #0
   1fdfc:	beq	201cc <__assert_fail@plt+0xccc8>
   1fe00:	ldr	r8, [sp, #132]	; 0x84
   1fe04:	cmp	r8, #0
   1fe08:	beq	20054 <__assert_fail@plt+0xcb50>
   1fe0c:	ldr	r3, [fp]
   1fe10:	movw	r1, #1396	; 0x574
   1fe14:	ldr	r5, [sp, #84]	; 0x54
   1fe18:	movt	r1, #4
   1fe1c:	ldr	r9, [sp, #88]	; 0x58
   1fe20:	mov	r2, #2
   1fe24:	add	r5, r3, r5
   1fe28:	add	r9, r3, r9
   1fe2c:	str	r9, [sp, #36]	; 0x24
   1fe30:	mov	r0, r5
   1fe34:	bl	13468 <strncmp@plt>
   1fe38:	cmp	r0, #0
   1fe3c:	bne	20770 <__assert_fail@plt+0xd26c>
   1fe40:	movw	r4, #1396	; 0x574
   1fe44:	movt	r4, #4
   1fe48:	mov	r8, #2
   1fe4c:	movw	r1, #1456	; 0x5b0
   1fe50:	mov	r0, #0
   1fe54:	movt	r1, #4
   1fe58:	mov	r2, #5
   1fe5c:	bl	12d84 <dcgettext@plt>
   1fe60:	ldr	ip, [sp, #32]
   1fe64:	ldr	r6, [sp, #136]	; 0x88
   1fe68:	ldrh	r3, [ip]
   1fe6c:	cmp	r3, #4
   1fe70:	mov	r9, r0
   1fe74:	beq	20074 <__assert_fail@plt+0xcb70>
   1fe78:	add	r1, sp, #264	; 0x108
   1fe7c:	mov	r3, #100	; 0x64
   1fe80:	ldr	r2, [sp, #140]	; 0x8c
   1fe84:	mov	r0, r7
   1fe88:	stm	sp, {r1, r3}
   1fe8c:	mov	r1, r5
   1fe90:	mov	r3, r6
   1fe94:	bl	39d40 <__assert_fail@plt+0x2683c>
   1fe98:	mov	r3, r4
   1fe9c:	str	r0, [sp, #4]
   1fea0:	str	r6, [sp]
   1fea4:	mov	r1, r9
   1fea8:	mov	r2, r8
   1feac:	mov	r0, #1
   1feb0:	bl	13204 <__printf_chk@plt>
   1feb4:	ldr	r4, [sp, #32]
   1feb8:	ldrh	r3, [r4]
   1febc:	cmp	r3, #4
   1fec0:	bne	2002c <__assert_fail@plt+0xcb28>
   1fec4:	ldr	r8, [sp, #140]	; 0x8c
   1fec8:	ldr	r4, [sp, #132]	; 0x84
   1fecc:	cmp	r8, #6
   1fed0:	beq	1fff8 <__assert_fail@plt+0xcaf4>
   1fed4:	cmp	r4, #5
   1fed8:	bne	20008 <__assert_fail@plt+0xcb04>
   1fedc:	movw	r1, #1476	; 0x5c4
   1fee0:	mov	r0, r5
   1fee4:	movt	r1, #4
   1fee8:	bl	12cd0 <strcmp@plt>
   1feec:	cmp	r0, #0
   1fef0:	bne	20008 <__assert_fail@plt+0xcb04>
   1fef4:	ldr	r9, [sp, #44]	; 0x2c
   1fef8:	cmp	r8, r9
   1fefc:	beq	201d4 <__assert_fail@plt+0xccd0>
   1ff00:	ldr	ip, [sp, #64]	; 0x40
   1ff04:	cmp	r8, ip
   1ff08:	bne	20008 <__assert_fail@plt+0xcb04>
   1ff0c:	ldr	r2, [sp, #88]	; 0x58
   1ff10:	ldrd	r8, [sp, #48]	; 0x30
   1ff14:	ldr	r5, [r7, #16]
   1ff18:	adds	r8, r8, r2
   1ff1c:	ldr	r3, [sp, #136]	; 0x88
   1ff20:	adc	r9, r9, #0
   1ff24:	str	r0, [sp, #4]
   1ff28:	mov	r2, r8
   1ff2c:	mov	r0, r5
   1ff30:	str	r3, [sp]
   1ff34:	mov	r3, r9
   1ff38:	bl	13318 <elf_getdata_rawchunk@plt>
   1ff3c:	subs	r6, r0, #0
   1ff40:	beq	20778 <__assert_fail@plt+0xd274>
   1ff44:	ldr	r2, [r6]
   1ff48:	add	r8, sp, #368	; 0x170
   1ff4c:	ldr	r4, [r6, #12]
   1ff50:	mov	r0, r5
   1ff54:	add	r3, sp, #96	; 0x60
   1ff58:	add	r4, r2, r4
   1ff5c:	str	r2, [r8, #-276]!	; 0xfffffeec
   1ff60:	mov	r1, r8
   1ff64:	mov	r2, r4
   1ff68:	bl	1571c <__assert_fail@plt+0x2218>
   1ff6c:	cmp	r0, #0
   1ff70:	beq	1ff90 <__assert_fail@plt+0xca8c>
   1ff74:	mov	r0, r5
   1ff78:	mov	r1, r8
   1ff7c:	mov	r2, r4
   1ff80:	add	r3, sp, #104	; 0x68
   1ff84:	bl	1571c <__assert_fail@plt+0x2218>
   1ff88:	cmp	r0, #0
   1ff8c:	bne	20434 <__assert_fail@plt+0xcf30>
   1ff90:	movw	r0, #1588	; 0x634
   1ff94:	movt	r0, #4
   1ff98:	bl	12fdc <puts@plt>
   1ff9c:	ldr	r3, [fp, #12]
   1ffa0:	cmp	r3, sl
   1ffa4:	bhi	1fddc <__assert_fail@plt+0xc8d8>
   1ffa8:	cmp	sl, r3
   1ffac:	beq	1ffdc <__assert_fail@plt+0xcad8>
   1ffb0:	mov	r2, #5
   1ffb4:	movw	r1, #1840	; 0x730
   1ffb8:	mov	r0, #0
   1ffbc:	movt	r1, #4
   1ffc0:	bl	12d84 <dcgettext@plt>
   1ffc4:	movw	r3, #1404	; 0x57c
   1ffc8:	movt	r3, #4
   1ffcc:	mov	r2, r0
   1ffd0:	mov	r0, #0
   1ffd4:	mov	r1, r0
   1ffd8:	bl	12f70 <error@plt>
   1ffdc:	ldr	r9, [sp, #40]	; 0x28
   1ffe0:	ldr	r2, [sp, #364]	; 0x16c
   1ffe4:	ldr	r3, [r9]
   1ffe8:	cmp	r2, r3
   1ffec:	bne	207a8 <__assert_fail@plt+0xd2a4>
   1fff0:	add	sp, sp, #372	; 0x174
   1fff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fff8:	cmp	r4, #4
   1fffc:	beq	20098 <__assert_fail@plt+0xcb94>
   20000:	cmp	r4, #5
   20004:	beq	2008c <__assert_fail@plt+0xcb88>
   20008:	mov	r2, r5
   2000c:	ldr	r3, [sp, #36]	; 0x24
   20010:	mov	r0, r7
   20014:	add	r1, sp, #132	; 0x84
   20018:	bl	1ef98 <__assert_fail@plt+0xba94>
   2001c:	ldr	r3, [fp, #12]
   20020:	cmp	r3, sl
   20024:	bhi	1fddc <__assert_fail@plt+0xc8d8>
   20028:	b	1ffa8 <__assert_fail@plt+0xcaa4>
   2002c:	mov	r2, r5
   20030:	ldr	ip, [sp, #136]	; 0x88
   20034:	ldr	r5, [sp, #36]	; 0x24
   20038:	mov	r0, r7
   2003c:	ldr	r1, [sp, #132]	; 0x84
   20040:	ldr	r3, [sp, #140]	; 0x8c
   20044:	str	r5, [sp, #4]
   20048:	str	ip, [sp]
   2004c:	bl	3a048 <__assert_fail@plt+0x26b44>
   20050:	b	2001c <__assert_fail@plt+0xcb18>
   20054:	ldr	r9, [fp]
   20058:	movw	r4, #15800	; 0x3db8
   2005c:	ldr	r3, [sp, #88]	; 0x58
   20060:	movt	r4, #4
   20064:	add	r3, r9, r3
   20068:	str	r3, [sp, #36]	; 0x24
   2006c:	mov	r5, r4
   20070:	b	1fe4c <__assert_fail@plt+0xc948>
   20074:	mov	r0, r7
   20078:	ldr	r1, [sp, #140]	; 0x8c
   2007c:	add	r2, sp, #164	; 0xa4
   20080:	mov	r3, #100	; 0x64
   20084:	bl	39a24 <__assert_fail@plt+0x26520>
   20088:	b	1fe98 <__assert_fail@plt+0xc994>
   2008c:	ldrb	r3, [r5, #4]
   20090:	cmp	r3, #0
   20094:	bne	20008 <__assert_fail@plt+0xcb04>
   20098:	movw	r1, #1476	; 0x5c4
   2009c:	mov	r0, r5
   200a0:	movt	r1, #4
   200a4:	mov	r2, #4
   200a8:	bl	12d30 <memcmp@plt>
   200ac:	subs	r6, r0, #0
   200b0:	bne	1fed4 <__assert_fail@plt+0xc9d0>
   200b4:	ldr	r2, [sp, #88]	; 0x58
   200b8:	mov	r5, #24
   200bc:	ldrd	r8, [sp, #48]	; 0x30
   200c0:	ldr	r1, [r7, #16]
   200c4:	adds	r8, r8, r2
   200c8:	ldr	r4, [sp, #136]	; 0x88
   200cc:	adc	r9, r9, #0
   200d0:	mov	r0, r1
   200d4:	mov	r2, r8
   200d8:	mov	r3, r9
   200dc:	stm	sp, {r4, r5}
   200e0:	str	r1, [sp, #28]
   200e4:	bl	13318 <elf_getdata_rawchunk@plt>
   200e8:	ldr	r1, [sp, #28]
   200ec:	subs	r9, r0, #0
   200f0:	beq	2070c <__assert_fail@plt+0xd208>
   200f4:	mov	r2, #1
   200f8:	mov	r0, r1
   200fc:	mov	r3, r2
   20100:	mov	r1, r5
   20104:	bl	12f64 <gelf_fsize@plt>
   20108:	mov	r1, r0
   2010c:	mov	r0, r4
   20110:	bl	3b39c <__assert_fail@plt+0x27e98>
   20114:	subs	ip, r0, #0
   20118:	beq	2001c <__assert_fail@plt+0xcb18>
   2011c:	str	sl, [sp, #56]	; 0x38
   20120:	mov	r8, r6
   20124:	str	fp, [sp, #68]	; 0x44
   20128:	mov	sl, r9
   2012c:	mov	fp, ip
   20130:	b	20160 <__assert_fail@plt+0xcc5c>
   20134:	ldrd	r4, [r6, #8]
   20138:	orrs	r9, r4, r5
   2013c:	bne	204e8 <__assert_fail@plt+0xcfe4>
   20140:	movw	r1, #1484	; 0x5cc
   20144:	mov	r0, #1
   20148:	movt	r1, #4
   2014c:	ldrd	r2, [r6]
   20150:	bl	13204 <__printf_chk@plt>
   20154:	add	r8, r8, #1
   20158:	cmp	r8, fp
   2015c:	beq	20698 <__assert_fail@plt+0xd194>
   20160:	mov	r0, sl
   20164:	mov	r1, r8
   20168:	add	r2, sp, #144	; 0x90
   2016c:	bl	13060 <gelf_getauxv@plt>
   20170:	subs	r6, r0, #0
   20174:	beq	2070c <__assert_fail@plt+0xd208>
   20178:	ldrd	r2, [r6]
   2017c:	add	r1, sp, #112	; 0x70
   20180:	mov	r0, r7
   20184:	str	r1, [sp]
   20188:	add	r1, sp, #120	; 0x78
   2018c:	str	r1, [sp, #4]
   20190:	bl	3b16c <__assert_fail@plt+0x27c68>
   20194:	cmp	r0, #0
   20198:	beq	20134 <__assert_fail@plt+0xcc30>
   2019c:	ldr	r3, [sp, #120]	; 0x78
   201a0:	ldrb	r3, [r3]
   201a4:	cmp	r3, #112	; 0x70
   201a8:	beq	2051c <__assert_fail@plt+0xd018>
   201ac:	bhi	20504 <__assert_fail@plt+0xd000>
   201b0:	cmp	r3, #98	; 0x62
   201b4:	beq	20584 <__assert_fail@plt+0xd080>
   201b8:	cmp	r3, #100	; 0x64
   201bc:	beq	20564 <__assert_fail@plt+0xd060>
   201c0:	cmp	r3, #0
   201c4:	beq	20640 <__assert_fail@plt+0xd13c>
   201c8:	bl	13474 <abort@plt>
   201cc:	ldr	r3, [fp, #12]
   201d0:	b	1ffa8 <__assert_fail@plt+0xcaa4>
   201d4:	ldr	r9, [r7, #16]
   201d8:	ldr	r2, [sp, #88]	; 0x58
   201dc:	str	r0, [sp, #4]
   201e0:	str	r9, [sp, #68]	; 0x44
   201e4:	mov	r0, r9
   201e8:	ldrd	r8, [sp, #48]	; 0x30
   201ec:	ldr	r3, [sp, #136]	; 0x88
   201f0:	adds	r8, r8, r2
   201f4:	adc	r9, r9, #0
   201f8:	str	r3, [sp]
   201fc:	mov	r2, r8
   20200:	mov	r3, r9
   20204:	bl	13318 <elf_getdata_rawchunk@plt>
   20208:	subs	r5, r0, #0
   2020c:	beq	20740 <__assert_fail@plt+0xd23c>
   20210:	ldr	r2, [r5]
   20214:	add	r8, sp, #368	; 0x170
   20218:	ldr	r1, [r5, #12]
   2021c:	add	r3, sp, #96	; 0x60
   20220:	ldr	r0, [sp, #68]	; 0x44
   20224:	add	r1, r2, r1
   20228:	str	r1, [sp, #36]	; 0x24
   2022c:	str	r2, [r8, #-276]!	; 0xfffffeec
   20230:	mov	r1, r8
   20234:	ldr	r2, [sp, #36]	; 0x24
   20238:	bl	1565c <__assert_fail@plt+0x2158>
   2023c:	cmp	r0, #0
   20240:	beq	20260 <__assert_fail@plt+0xcd5c>
   20244:	ldr	r0, [sp, #68]	; 0x44
   20248:	mov	r1, r8
   2024c:	ldr	r2, [sp, #36]	; 0x24
   20250:	add	r3, sp, #104	; 0x68
   20254:	bl	1565c <__assert_fail@plt+0x2158>
   20258:	cmp	r0, #0
   2025c:	bne	20270 <__assert_fail@plt+0xcd6c>
   20260:	movw	r0, #1740	; 0x6cc
   20264:	movt	r0, #4
   20268:	bl	12fdc <puts@plt>
   2026c:	b	2001c <__assert_fail@plt+0xcb18>
   20270:	mov	r1, #1
   20274:	ldr	r0, [sp, #68]	; 0x44
   20278:	mov	r2, r1
   2027c:	mov	r3, r1
   20280:	bl	12f64 <gelf_fsize@plt>
   20284:	ldr	r6, [sp, #92]	; 0x5c
   20288:	ldr	r9, [sp, #36]	; 0x24
   2028c:	movw	r4, #65264	; 0xfef0
   20290:	movt	r4, #65535	; 0xffff
   20294:	add	r1, r0, r0, lsl #1
   20298:	mov	r5, r0
   2029c:	rsb	r0, r6, r9
   202a0:	bl	3b39c <__assert_fail@plt+0x27e98>
   202a4:	add	ip, sp, #368	; 0x170
   202a8:	mov	r1, #0
   202ac:	ldrd	r2, [ip, r4]
   202b0:	cmp	r1, r3
   202b4:	cmpeq	r0, r2
   202b8:	bcc	20260 <__assert_fail@plt+0xcd5c>
   202bc:	add	r0, r2, r2, lsl #1
   202c0:	movw	r1, #1780	; 0x6f4
   202c4:	movt	r1, #4
   202c8:	mla	r5, r5, r0, r6
   202cc:	mov	r0, #1
   202d0:	bl	13204 <__printf_chk@plt>
   202d4:	add	r0, sp, #368	; 0x170
   202d8:	ldrd	r2, [r0, r4]
   202dc:	orrs	r1, r2, r3
   202e0:	beq	2001c <__assert_fail@plt+0xcb18>
   202e4:	add	ip, sp, #112	; 0x70
   202e8:	mov	r2, #0
   202ec:	mov	r3, #0
   202f0:	ldr	r9, [sp, #68]	; 0x44
   202f4:	str	fp, [sp, #76]	; 0x4c
   202f8:	mov	r6, r5
   202fc:	str	sl, [sp, #68]	; 0x44
   20300:	mov	fp, ip
   20304:	strd	r2, [sp, #56]	; 0x38
   20308:	mov	sl, r5
   2030c:	str	r7, [sp, #72]	; 0x48
   20310:	b	20408 <__assert_fail@plt+0xcf04>
   20314:	mov	r0, r9
   20318:	mov	r1, r8
   2031c:	mov	r2, sl
   20320:	add	r3, sp, #120	; 0x78
   20324:	bl	1565c <__assert_fail@plt+0x2158>
   20328:	cmp	r0, #0
   2032c:	beq	20424 <__assert_fail@plt+0xcf20>
   20330:	mov	r0, r9
   20334:	mov	r1, r8
   20338:	mov	r2, sl
   2033c:	add	r3, sp, #144	; 0x90
   20340:	bl	1565c <__assert_fail@plt+0x2158>
   20344:	cmp	r0, #0
   20348:	beq	20424 <__assert_fail@plt+0xcf20>
   2034c:	ldr	r4, [sp, #36]	; 0x24
   20350:	mov	r0, r6
   20354:	mov	r1, #0
   20358:	rsb	r2, r6, r4
   2035c:	bl	13270 <memchr@plt>
   20360:	subs	r7, r0, #0
   20364:	beq	20424 <__assert_fail@plt+0xcf20>
   20368:	ldr	r4, [sp, #104]	; 0x68
   2036c:	add	r5, sp, #368	; 0x170
   20370:	ldr	ip, [sp, #148]	; 0x94
   20374:	mvn	r3, #255	; 0xff
   20378:	ldr	r1, [sp, #144]	; 0x90
   2037c:	ldr	r2, [sp, #108]	; 0x6c
   20380:	mul	ip, r4, ip
   20384:	mla	ip, r1, r2, ip
   20388:	ldrd	r2, [r3, r5]
   2038c:	umull	r4, r5, r4, r1
   20390:	ldrd	r0, [sp, #120]	; 0x78
   20394:	add	r5, ip, r5
   20398:	strd	r0, [sp]
   2039c:	subs	r0, r0, r2
   203a0:	sbc	r1, r1, r3
   203a4:	strd	r0, [sp, #16]
   203a8:	movw	r1, #1800	; 0x708
   203ac:	strd	r4, [sp, #8]
   203b0:	movt	r1, #4
   203b4:	mov	r0, #1
   203b8:	bl	13204 <__printf_chk@plt>
   203bc:	ldrd	r4, [sp, #56]	; 0x38
   203c0:	str	r6, [sp]
   203c4:	movw	r1, #1832	; 0x728
   203c8:	movw	r3, #15800	; 0x3db8
   203cc:	movt	r1, #4
   203d0:	movt	r3, #4
   203d4:	add	r6, r7, #1
   203d8:	cmp	r0, #50	; 0x32
   203dc:	rsble	r2, r0, #53	; 0x35
   203e0:	mov	r0, #1
   203e4:	movgt	r2, #3
   203e8:	adds	r4, r4, #1
   203ec:	adc	r5, r5, #0
   203f0:	strd	r4, [sp, #56]	; 0x38
   203f4:	bl	13204 <__printf_chk@plt>
   203f8:	ldrd	r2, [sp, #96]	; 0x60
   203fc:	cmp	r5, r3
   20400:	cmpeq	r4, r2
   20404:	bcs	206fc <__assert_fail@plt+0xd1f8>
   20408:	mov	r0, r9
   2040c:	mov	r1, r8
   20410:	mov	r2, sl
   20414:	mov	r3, fp
   20418:	bl	1565c <__assert_fail@plt+0x2158>
   2041c:	cmp	r0, #0
   20420:	bne	20314 <__assert_fail@plt+0xce10>
   20424:	ldr	sl, [sp, #68]	; 0x44
   20428:	ldr	r7, [sp, #72]	; 0x48
   2042c:	ldr	fp, [sp, #76]	; 0x4c
   20430:	b	20260 <__assert_fail@plt+0xcd5c>
   20434:	mov	r0, r5
   20438:	mov	r1, r8
   2043c:	mov	r2, r4
   20440:	add	r3, sp, #112	; 0x70
   20444:	bl	1571c <__assert_fail@plt+0x2218>
   20448:	cmp	r0, #0
   2044c:	beq	1ff90 <__assert_fail@plt+0xca8c>
   20450:	mov	r0, r5
   20454:	bl	12e38 <gelf_getclass@plt>
   20458:	ldr	ip, [sp, #112]	; 0x70
   2045c:	ldr	r2, [sp, #96]	; 0x60
   20460:	movw	r1, #1628	; 0x65c
   20464:	movt	r1, #4
   20468:	str	ip, [sp]
   2046c:	cmp	r0, #2
   20470:	mov	r0, #1
   20474:	ldreq	r3, [sp, #92]	; 0x5c
   20478:	addeq	r3, r3, #4
   2047c:	streq	r3, [sp, #92]	; 0x5c
   20480:	ldr	r3, [sp, #104]	; 0x68
   20484:	bl	13204 <__printf_chk@plt>
   20488:	ldr	r3, [sp, #112]	; 0x70
   2048c:	cmp	r3, #0
   20490:	ble	206a4 <__assert_fail@plt+0xd1a0>
   20494:	ldr	r3, [sp, #96]	; 0x60
   20498:	sub	r3, r3, #4
   2049c:	cmp	r3, #7
   204a0:	bhi	2001c <__assert_fail@plt+0xcb18>
   204a4:	mov	r6, #1
   204a8:	lsl	r3, r6, r3
   204ac:	tst	r3, #153	; 0x99
   204b0:	beq	2001c <__assert_fail@plt+0xcb18>
   204b4:	mov	r0, r5
   204b8:	mov	r1, r8
   204bc:	mov	r2, r4
   204c0:	add	r3, sp, #144	; 0x90
   204c4:	bl	1565c <__assert_fail@plt+0x2158>
   204c8:	cmp	r0, #0
   204cc:	beq	1ff90 <__assert_fail@plt+0xca8c>
   204d0:	mov	r0, r6
   204d4:	movw	r1, #1676	; 0x68c
   204d8:	ldrd	r2, [sp, #144]	; 0x90
   204dc:	movt	r1, #4
   204e0:	bl	13204 <__printf_chk@plt>
   204e4:	b	2001c <__assert_fail@plt+0xcb18>
   204e8:	ldrd	r2, [r6]
   204ec:	movw	r1, #1496	; 0x5d8
   204f0:	strd	r4, [sp]
   204f4:	movt	r1, #4
   204f8:	mov	r0, #1
   204fc:	bl	13204 <__printf_chk@plt>
   20500:	b	20154 <__assert_fail@plt+0xcc50>
   20504:	cmp	r3, #117	; 0x75
   20508:	beq	20544 <__assert_fail@plt+0xd040>
   2050c:	cmp	r3, #120	; 0x78
   20510:	beq	2051c <__assert_fail@plt+0xd018>
   20514:	cmp	r3, #115	; 0x73
   20518:	bne	201c8 <__assert_fail@plt+0xccc4>
   2051c:	ldr	r0, [r6, #8]
   20520:	ldr	r3, [r6, #12]
   20524:	str	r0, [sp]
   20528:	movw	r1, #1524	; 0x5f4
   2052c:	ldr	r2, [sp, #112]	; 0x70
   20530:	movt	r1, #4
   20534:	str	r3, [sp, #4]
   20538:	mov	r0, #1
   2053c:	bl	13204 <__printf_chk@plt>
   20540:	b	20154 <__assert_fail@plt+0xcc50>
   20544:	ldrd	r4, [r6, #8]
   20548:	movw	r1, #1540	; 0x604
   2054c:	ldr	r2, [sp, #112]	; 0x70
   20550:	movt	r1, #4
   20554:	mov	r0, #1
   20558:	strd	r4, [sp]
   2055c:	bl	13204 <__printf_chk@plt>
   20560:	b	20154 <__assert_fail@plt+0xcc50>
   20564:	ldrd	r4, [r6, #8]
   20568:	movw	r1, #1556	; 0x614
   2056c:	ldr	r2, [sp, #112]	; 0x70
   20570:	movt	r1, #4
   20574:	mov	r0, #1
   20578:	strd	r4, [sp]
   2057c:	bl	13204 <__printf_chk@plt>
   20580:	b	20154 <__assert_fail@plt+0xcc50>
   20584:	ldrd	r4, [r6, #8]
   20588:	movw	r1, #1572	; 0x624
   2058c:	ldr	r2, [sp, #112]	; 0x70
   20590:	movt	r1, #4
   20594:	mov	r0, #1
   20598:	strd	r4, [sp]
   2059c:	bl	13204 <__printf_chk@plt>
   205a0:	ldr	r3, [sp, #120]	; 0x78
   205a4:	add	ip, r3, #1
   205a8:	ldrb	r3, [r3, #1]
   205ac:	cmp	r3, #0
   205b0:	beq	20630 <__assert_fail@plt+0xd12c>
   205b4:	movw	r9, #1400	; 0x578
   205b8:	str	r7, [sp, #36]	; 0x24
   205bc:	mov	r4, #1
   205c0:	mov	r5, #0
   205c4:	movt	r9, #4
   205c8:	mov	r7, ip
   205cc:	b	205f4 <__assert_fail@plt+0xd0f0>
   205d0:	mov	r0, r7
   205d4:	mov	r1, #0
   205d8:	bl	12e74 <__rawmemchr@plt>
   205dc:	adds	r4, r4, r4
   205e0:	adc	r5, r5, r5
   205e4:	ldrb	r3, [r0, #1]
   205e8:	add	r7, r0, #1
   205ec:	cmp	r3, #0
   205f0:	beq	2062c <__assert_fail@plt+0xd128>
   205f4:	ldrd	r2, [r6, #8]
   205f8:	and	r2, r2, r4
   205fc:	and	r3, r3, r5
   20600:	orrs	lr, r2, r3
   20604:	beq	205d0 <__assert_fail@plt+0xd0cc>
   20608:	mov	r2, r9
   2060c:	movw	r1, #54912	; 0xd680
   20610:	mov	r0, #1
   20614:	movt	r1, #3
   20618:	mov	r3, r7
   2061c:	movw	r9, #11956	; 0x2eb4
   20620:	bl	13204 <__printf_chk@plt>
   20624:	movt	r9, #4
   20628:	b	205d0 <__assert_fail@plt+0xd0cc>
   2062c:	ldr	r7, [sp, #36]	; 0x24
   20630:	movw	r0, #3624	; 0xe28
   20634:	movt	r0, #4
   20638:	bl	12fdc <puts@plt>
   2063c:	b	20154 <__assert_fail@plt+0xcc50>
   20640:	ldrd	r2, [r6, #8]
   20644:	orrs	ip, r2, r3
   20648:	movne	r0, r2
   2064c:	bne	20524 <__assert_fail@plt+0xd020>
   20650:	movw	r1, #1516	; 0x5ec
   20654:	ldr	r2, [sp, #112]	; 0x70
   20658:	movt	r1, #4
   2065c:	mov	r0, #1
   20660:	bl	13204 <__printf_chk@plt>
   20664:	b	20154 <__assert_fail@plt+0xcc50>
   20668:	mov	r2, #5
   2066c:	mov	r0, fp
   20670:	movw	r1, #1840	; 0x730
   20674:	movt	r1, #4
   20678:	bl	12d84 <dcgettext@plt>
   2067c:	mov	r2, r0
   20680:	mvn	r0, #0
   20684:	str	r2, [sp, #28]
   20688:	bl	130a8 <elf_errmsg@plt>
   2068c:	ldr	r2, [sp, #28]
   20690:	mov	r3, r0
   20694:	b	1ffd0 <__assert_fail@plt+0xcacc>
   20698:	ldr	sl, [sp, #56]	; 0x38
   2069c:	ldr	fp, [sp, #68]	; 0x44
   206a0:	b	2001c <__assert_fail@plt+0xcb18>
   206a4:	bne	2001c <__assert_fail@plt+0xcb18>
   206a8:	mov	r0, r5
   206ac:	mov	r1, r8
   206b0:	mov	r2, r4
   206b4:	add	r3, sp, #120	; 0x78
   206b8:	bl	1571c <__assert_fail@plt+0x2218>
   206bc:	cmp	r0, #0
   206c0:	beq	1ff90 <__assert_fail@plt+0xca8c>
   206c4:	mov	r0, r5
   206c8:	mov	r1, r8
   206cc:	mov	r2, r4
   206d0:	add	r3, sp, #144	; 0x90
   206d4:	bl	1571c <__assert_fail@plt+0x2218>
   206d8:	cmp	r0, #0
   206dc:	beq	1ff90 <__assert_fail@plt+0xca8c>
   206e0:	movw	r1, #1704	; 0x6a8
   206e4:	ldr	r2, [sp, #120]	; 0x78
   206e8:	movt	r1, #4
   206ec:	ldr	r3, [sp, #144]	; 0x90
   206f0:	mov	r0, #1
   206f4:	bl	13204 <__printf_chk@plt>
   206f8:	b	2001c <__assert_fail@plt+0xcb18>
   206fc:	ldr	sl, [sp, #68]	; 0x44
   20700:	ldr	r7, [sp, #72]	; 0x48
   20704:	ldr	fp, [sp, #76]	; 0x4c
   20708:	b	2001c <__assert_fail@plt+0xcb18>
   2070c:	mov	r2, #5
   20710:	movw	r1, #54668	; 0xd58c
   20714:	mov	r0, #0
   20718:	movt	r1, #3
   2071c:	bl	12d84 <dcgettext@plt>
   20720:	mov	r4, r0
   20724:	mvn	r0, #0
   20728:	bl	130a8 <elf_errmsg@plt>
   2072c:	mov	r2, r4
   20730:	mov	r1, #0
   20734:	mov	r3, r0
   20738:	mov	r0, #1
   2073c:	bl	12f70 <error@plt>
   20740:	mov	r2, r4
   20744:	movw	r1, #54668	; 0xd58c
   20748:	movt	r1, #3
   2074c:	bl	12d84 <dcgettext@plt>
   20750:	mov	r4, r0
   20754:	mvn	r0, #0
   20758:	bl	130a8 <elf_errmsg@plt>
   2075c:	mov	r2, r4
   20760:	mov	r1, r5
   20764:	mov	r3, r0
   20768:	mov	r0, #1
   2076c:	bl	12f70 <error@plt>
   20770:	mov	r4, r5
   20774:	b	2006c <__assert_fail@plt+0xcb68>
   20778:	mov	r2, r4
   2077c:	movw	r1, #54668	; 0xd58c
   20780:	movt	r1, #3
   20784:	bl	12d84 <dcgettext@plt>
   20788:	mov	r4, r0
   2078c:	mvn	r0, #0
   20790:	bl	130a8 <elf_errmsg@plt>
   20794:	mov	r2, r4
   20798:	mov	r1, r6
   2079c:	mov	r3, r0
   207a0:	mov	r0, #1
   207a4:	bl	12f70 <error@plt>
   207a8:	bl	12dc0 <__stack_chk_fail@plt>
   207ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207b0:	movw	r9, #37688	; 0x9338
   207b4:	movt	r9, #5
   207b8:	mov	sl, r2
   207bc:	sub	sp, sp, #68	; 0x44
   207c0:	subs	r8, r0, #0
   207c4:	ldr	r2, [r9]
   207c8:	str	r3, [sp, #12]
   207cc:	ldr	ip, [sp, #104]	; 0x68
   207d0:	str	r2, [sp, #60]	; 0x3c
   207d4:	beq	20990 <__assert_fail@plt+0xd48c>
   207d8:	ldr	r3, [r8]
   207dc:	ldr	fp, [r3, #28]
   207e0:	cmp	fp, #0
   207e4:	beq	20990 <__assert_fail@plt+0xd48c>
   207e8:	ldrd	r4, [r8, #96]	; 0x60
   207ec:	mvn	r6, #0
   207f0:	mvn	r7, #0
   207f4:	cmp	r5, r7
   207f8:	cmpeq	r4, r6
   207fc:	movne	r6, r4
   20800:	movne	r7, r5
   20804:	beq	208d4 <__assert_fail@plt+0xd3d0>
   20808:	ldrb	r3, [r8, #24]
   2080c:	mov	r5, #0
   20810:	mov	r1, r5
   20814:	ldr	r2, [fp, #12]
   20818:	uxtb	r4, r3
   2081c:	str	r3, [sp, #8]
   20820:	mov	r3, #0
   20824:	cmp	r3, r7
   20828:	cmpeq	r2, r6
   2082c:	mov	r0, r4
   20830:	umull	r4, r5, sl, r4
   20834:	ldr	sl, [sp, #12]
   20838:	mla	r5, sl, r0, r5
   2083c:	bcc	20990 <__assert_fail@plt+0xd48c>
   20840:	subs	r2, r2, r6
   20844:	sbc	r3, r3, r7
   20848:	cmp	r5, r3
   2084c:	cmpeq	r4, r2
   20850:	bhi	20990 <__assert_fail@plt+0xd48c>
   20854:	subs	r2, r2, r4
   20858:	sbc	r3, r3, r5
   2085c:	cmp	r1, r3
   20860:	cmpeq	r0, r2
   20864:	bhi	20990 <__assert_fail@plt+0xd48c>
   20868:	ldr	r3, [sp, #8]
   2086c:	add	r4, r6, r4
   20870:	ldr	sl, [fp]
   20874:	cmp	r3, #4
   20878:	ldr	r3, [r8]
   2087c:	add	r4, sl, r4
   20880:	ldrb	r3, [r3, #84]	; 0x54
   20884:	beq	208b8 <__assert_fail@plt+0xd3b4>
   20888:	cmp	r3, #0
   2088c:	ldreq	r2, [r4]
   20890:	ldreq	r3, [r4, #4]
   20894:	bne	20a0c <__assert_fail@plt+0xd508>
   20898:	mov	r0, #0
   2089c:	stm	ip, {r2, r3}
   208a0:	ldr	r2, [sp, #60]	; 0x3c
   208a4:	ldr	r3, [r9]
   208a8:	cmp	r2, r3
   208ac:	bne	20a08 <__assert_fail@plt+0xd504>
   208b0:	add	sp, sp, #68	; 0x44
   208b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208b8:	cmp	r3, #0
   208bc:	ldr	r3, [r4]
   208c0:	bne	20a20 <__assert_fail@plt+0xd51c>
   208c4:	mov	r0, #0
   208c8:	str	r3, [ip]
   208cc:	str	r0, [ip, #4]
   208d0:	b	208a0 <__assert_fail@plt+0xd39c>
   208d4:	ldr	r0, [r8, #28]
   208d8:	mov	r2, #0
   208dc:	ldrh	r1, [r8, #26]
   208e0:	str	r2, [sp, #28]
   208e4:	add	r3, r3, r0, lsl #2
   208e8:	cmp	r1, #4
   208ec:	str	r2, [sp, #32]
   208f0:	ldr	r3, [r3, #12]
   208f4:	ldrd	r6, [r8, #8]
   208f8:	str	r2, [sp, #36]	; 0x24
   208fc:	str	r2, [sp, #40]	; 0x28
   20900:	ldr	r0, [r3]
   20904:	ldrb	r2, [r8, #25]
   20908:	ldrb	r3, [r8, #32]
   2090c:	bhi	209c4 <__assert_fail@plt+0xd4c0>
   20910:	cmp	r3, #2
   20914:	lsleq	r2, r2, #2
   20918:	movne	r1, #3
   2091c:	mvnne	r3, #0
   20920:	smlabbne	r2, r1, r2, r3
   20924:	addeq	r2, r2, #7
   20928:	adds	r6, r6, r2
   2092c:	add	r6, r0, r6
   20930:	movw	r1, #8499	; 0x2133
   20934:	add	r0, sp, #28
   20938:	add	r2, sp, #44	; 0x2c
   2093c:	str	ip, [sp, #4]
   20940:	str	r6, [sp, #28]
   20944:	str	r8, [sp, #32]
   20948:	bl	13114 <dwarf_attr@plt>
   2094c:	ldr	ip, [sp, #4]
   20950:	cmp	r0, #0
   20954:	beq	20998 <__assert_fail@plt+0xd494>
   20958:	add	r0, sp, #44	; 0x2c
   2095c:	add	r1, sp, #16
   20960:	str	ip, [sp, #4]
   20964:	bl	132a0 <dwarf_formudata@plt>
   20968:	ldr	ip, [sp, #4]
   2096c:	cmp	r0, #0
   20970:	bne	209b8 <__assert_fail@plt+0xd4b4>
   20974:	ldr	r2, [sp, #16]
   20978:	ldr	r3, [sp, #20]
   2097c:	mov	r6, r2
   20980:	str	r2, [r8, #96]	; 0x60
   20984:	mov	r7, r3
   20988:	str	r3, [r8, #100]	; 0x64
   2098c:	b	20808 <__assert_fail@plt+0xd304>
   20990:	mvn	r0, #0
   20994:	b	208a0 <__assert_fail@plt+0xd39c>
   20998:	add	r0, sp, #28
   2099c:	mov	r1, #115	; 0x73
   209a0:	add	r2, sp, #44	; 0x2c
   209a4:	str	ip, [sp, #4]
   209a8:	bl	13114 <dwarf_attr@plt>
   209ac:	ldr	ip, [sp, #4]
   209b0:	cmp	r0, #0
   209b4:	bne	20958 <__assert_fail@plt+0xd454>
   209b8:	mov	r2, #0
   209bc:	mov	r3, r2
   209c0:	b	2097c <__assert_fail@plt+0xd478>
   209c4:	sub	lr, r3, #4
   209c8:	mov	r1, #3
   209cc:	cmp	r3, #2
   209d0:	cmpne	lr, #1
   209d4:	smlalbb	r6, r7, r1, r2
   209d8:	bhi	209f8 <__assert_fail@plt+0xd4f4>
   209dc:	and	r3, r3, #251	; 0xfb
   209e0:	adds	r6, r6, #8
   209e4:	cmp	r3, #2
   209e8:	bne	2092c <__assert_fail@plt+0xd428>
   209ec:	uxtb	r2, r2
   209f0:	adds	r6, r6, r2
   209f4:	b	2092c <__assert_fail@plt+0xd428>
   209f8:	cmp	r3, #6
   209fc:	bne	2092c <__assert_fail@plt+0xd428>
   20a00:	adds	r6, r6, #8
   20a04:	b	209ec <__assert_fail@plt+0xd4e8>
   20a08:	bl	12dc0 <__stack_chk_fail@plt>
   20a0c:	ldr	r3, [r4]
   20a10:	ldr	r2, [r4, #4]
   20a14:	rev	r3, r3
   20a18:	rev	r2, r2
   20a1c:	b	20898 <__assert_fail@plt+0xd394>
   20a20:	rev	r3, r3
   20a24:	b	208c4 <__assert_fail@plt+0xd3c0>
   20a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a2c:	add	fp, sp, #32
   20a30:	sub	sp, sp, #164	; 0xa4
   20a34:	movw	r8, #37688	; 0x9338
   20a38:	movt	r8, #5
   20a3c:	mov	r2, #5
   20a40:	mov	r6, r1
   20a44:	ldr	ip, [r8]
   20a48:	movw	r1, #60928	; 0xee00
   20a4c:	mov	r0, #0
   20a50:	movt	r1, #3
   20a54:	mov	r5, r3
   20a58:	ldr	r4, [fp, #4]
   20a5c:	str	ip, [fp, #-40]	; 0xffffffd8
   20a60:	str	r8, [fp, #-116]	; 0xffffff8c
   20a64:	ldr	r7, [fp, #8]
   20a68:	bl	12d84 <dcgettext@plt>
   20a6c:	mov	r9, r0
   20a70:	mov	r0, r5
   20a74:	bl	133d8 <elf_ndxscn@plt>
   20a78:	mov	r1, r4
   20a7c:	mov	r8, r0
   20a80:	add	r0, r6, #16
   20a84:	bl	1870c <__assert_fail@plt+0x5208>
   20a88:	mov	r2, r8
   20a8c:	mov	r3, r0
   20a90:	ldrd	r0, [r4, #24]
   20a94:	strd	r0, [sp]
   20a98:	mov	r1, r9
   20a9c:	mov	r0, #1
   20aa0:	bl	13204 <__printf_chk@plt>
   20aa4:	movw	r3, #37704	; 0x9348
   20aa8:	movt	r3, #5
   20aac:	ldr	r0, [r3]
   20ab0:	ldr	r3, [r0, #20]
   20ab4:	ldr	r2, [r0, #24]
   20ab8:	cmp	r3, r2
   20abc:	addcc	r1, r3, #1
   20ac0:	movcc	r2, #10
   20ac4:	strcc	r1, [r0, #20]
   20ac8:	strbcc	r2, [r3]
   20acc:	bcs	21200 <__assert_fail@plt+0xdcfc>
   20ad0:	ldr	r8, [r7, #64]	; 0x40
   20ad4:	cmp	r8, #0
   20ad8:	str	r8, [fp, #-112]	; 0xffffff90
   20adc:	beq	20fb0 <__assert_fail@plt+0xdaac>
   20ae0:	sub	r8, fp, #36	; 0x24
   20ae4:	mov	r0, #0
   20ae8:	mov	r2, r0
   20aec:	mov	r3, r0
   20af0:	str	r0, [fp, #-124]	; 0xffffff84
   20af4:	mov	r5, r0
   20af8:	strd	r2, [r8, #-56]!	; 0xffffffc8
   20afc:	sub	sl, fp, #96	; 0x60
   20b00:	str	r0, [fp, #-120]	; 0xffffff88
   20b04:	sub	r6, fp, #72	; 0x48
   20b08:	str	r0, [fp, #-104]	; 0xffffff98
   20b0c:	mov	r4, r8
   20b10:	str	r0, [fp, #-108]	; 0xffffff94
   20b14:	b	20b20 <__assert_fail@plt+0xd61c>
   20b18:	ldrd	r8, [fp, #-92]	; 0xffffffa4
   20b1c:	strd	r8, [fp, #-124]	; 0xffffff84
   20b20:	str	r4, [sp]
   20b24:	mov	r0, r7
   20b28:	str	sl, [sp, #4]
   20b2c:	mov	r8, #0
   20b30:	ldrd	r2, [fp, #-124]	; 0xffffff84
   20b34:	str	r5, [sp, #8]
   20b38:	str	r5, [sp, #12]
   20b3c:	str	r5, [sp, #16]
   20b40:	bl	12c7c <dwarf_nextcu@plt>
   20b44:	cmp	r0, r8
   20b48:	bne	20bdc <__assert_fail@plt+0xd6d8>
   20b4c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   20b50:	mov	r0, r7
   20b54:	ldrd	r8, [fp, #-124]	; 0xffffff84
   20b58:	str	r6, [sp]
   20b5c:	adds	r8, r8, r2
   20b60:	adc	r9, r9, #0
   20b64:	mov	r2, r8
   20b68:	mov	r3, r9
   20b6c:	bl	1309c <dwarf_offdie@plt>
   20b70:	cmp	r0, #0
   20b74:	beq	20b18 <__assert_fail@plt+0xd614>
   20b78:	mov	r0, r6
   20b7c:	mov	r1, #67	; 0x43
   20b80:	sub	r2, fp, #56	; 0x38
   20b84:	bl	13114 <dwarf_attr@plt>
   20b88:	cmp	r0, #0
   20b8c:	beq	20b18 <__assert_fail@plt+0xd614>
   20b90:	sub	r0, fp, #56	; 0x38
   20b94:	sub	r1, fp, #84	; 0x54
   20b98:	bl	132a0 <dwarf_formudata@plt>
   20b9c:	subs	lr, r0, #0
   20ba0:	bne	20b18 <__assert_fail@plt+0xd614>
   20ba4:	ldm	r6, {r0, r1, r2, r3}
   20ba8:	sub	sp, sp, #40	; 0x28
   20bac:	ldr	r8, [fp, #-104]	; 0xffffff98
   20bb0:	add	ip, sp, #24
   20bb4:	str	lr, [sp, #48]	; 0x30
   20bb8:	ldr	r9, [fp, #-108]	; 0xffffff94
   20bbc:	str	r8, [sp, #52]	; 0x34
   20bc0:	stm	ip, {r0, r1, r2, r3}
   20bc4:	add	r9, r9, #1
   20bc8:	ldrd	r2, [fp, #-84]	; 0xffffffac
   20bcc:	str	r9, [fp, #-108]	; 0xffffff94
   20bd0:	str	ip, [fp, #-104]	; 0xffffff98
   20bd4:	strd	r2, [ip, #16]
   20bd8:	b	20b18 <__assert_fail@plt+0xd614>
   20bdc:	ldr	r9, [fp, #-108]	; 0xffffff94
   20be0:	mvn	r2, #0
   20be4:	ldr	ip, [fp, #-112]	; 0xffffff90
   20be8:	add	r6, r9, #1
   20bec:	cmp	r9, r8
   20bf0:	ldr	r4, [fp, #-104]	; 0xffffff98
   20bf4:	lsl	r6, r6, #5
   20bf8:	ldr	r3, [ip, #12]
   20bfc:	add	r1, r6, #8
   20c00:	sub	r6, r6, #32
   20c04:	sub	sp, sp, r1
   20c08:	add	sl, sp, #24
   20c0c:	add	r6, sl, r6
   20c10:	str	r8, [r6, #20]
   20c14:	str	r3, [r6, #16]
   20c18:	str	r2, [r6, #24]
   20c1c:	beq	20c80 <__assert_fail@plt+0xd77c>
   20c20:	cmp	r4, r8
   20c24:	add	r5, r9, r2
   20c28:	beq	20c60 <__assert_fail@plt+0xd75c>
   20c2c:	cmp	r5, r9
   20c30:	bcs	21094 <__assert_fail@plt+0xdb90>
   20c34:	mov	lr, r4
   20c38:	sub	r6, r6, #32
   20c3c:	ldm	lr!, {r0, r1, r2, r3}
   20c40:	mov	ip, r6
   20c44:	sub	r5, r5, #1
   20c48:	stmia	ip!, {r0, r1, r2, r3}
   20c4c:	ldm	lr, {r0, r1, r2, r3}
   20c50:	stm	ip, {r0, r1, r2, r3}
   20c54:	ldr	r4, [r4, #28]
   20c58:	cmp	r4, #0
   20c5c:	bne	20c2c <__assert_fail@plt+0xd728>
   20c60:	mov	r1, r9
   20c64:	movw	r3, #14404	; 0x3844
   20c68:	mov	r0, sl
   20c6c:	movt	r3, #1
   20c70:	mov	r2, #32
   20c74:	bl	13390 <qsort@plt>
   20c78:	ldr	r8, [fp, #-112]	; 0xffffff90
   20c7c:	ldr	r3, [r8, #12]
   20c80:	ldr	r9, [fp, #-112]	; 0xffffff90
   20c84:	ldr	r8, [r9]
   20c88:	add	r3, r8, r3
   20c8c:	str	r3, [fp, #-104]	; 0xffffff98
   20c90:	cmp	r8, r3
   20c94:	bcs	20e9c <__assert_fail@plt+0xd998>
   20c98:	ldrb	r6, [r8]
   20c9c:	movw	ip, #8172	; 0x1fec
   20ca0:	mov	r9, #1
   20ca4:	movt	ip, #4
   20ca8:	cmp	r6, #3
   20cac:	str	ip, [fp, #-124]	; 0xffffff84
   20cb0:	add	ip, r8, #1
   20cb4:	beq	20d50 <__assert_fail@plt+0xd84c>
   20cb8:	bls	20e80 <__assert_fail@plt+0xd97c>
   20cbc:	cmp	r6, #4
   20cc0:	beq	20eb8 <__assert_fail@plt+0xd9b4>
   20cc4:	cmp	r6, #255	; 0xff
   20cc8:	bne	20e88 <__assert_fail@plt+0xd984>
   20ccc:	ldrb	r1, [r8, #1]
   20cd0:	add	r7, r8, #2
   20cd4:	mov	r3, #0
   20cd8:	tst	r1, #128	; 0x80
   20cdc:	and	r1, r1, #127	; 0x7f
   20ce0:	uxtb	r2, r1
   20ce4:	bne	21150 <__assert_fail@plt+0xdc4c>
   20ce8:	mov	r4, r1
   20cec:	ldr	r8, [fp, #-104]	; 0xffffff98
   20cf0:	mov	r0, r7
   20cf4:	mov	r1, #0
   20cf8:	rsb	r2, r7, r8
   20cfc:	bl	13270 <memchr@plt>
   20d00:	subs	r8, r0, #0
   20d04:	beq	21084 <__assert_fail@plt+0xdb80>
   20d08:	cmp	r6, #1
   20d0c:	beq	20f50 <__assert_fail@plt+0xda4c>
   20d10:	cmp	r6, #2
   20d14:	beq	20eec <__assert_fail@plt+0xd9e8>
   20d18:	movw	r1, #2032	; 0x7f0
   20d1c:	mov	r2, r7
   20d20:	mov	r3, r4
   20d24:	mov	r0, #1
   20d28:	movt	r1, #4
   20d2c:	bl	13204 <__printf_chk@plt>
   20d30:	add	r8, r8, #1
   20d34:	ldr	ip, [fp, #-104]	; 0xffffff98
   20d38:	cmp	r8, ip
   20d3c:	bcs	20e9c <__assert_fail@plt+0xd998>
   20d40:	ldrb	r6, [r8]
   20d44:	add	ip, r8, #1
   20d48:	cmp	r6, #3
   20d4c:	bne	20cb8 <__assert_fail@plt+0xd7b4>
   20d50:	ldrb	r1, [r8, #1]
   20d54:	add	lr, r8, #2
   20d58:	mov	r3, #0
   20d5c:	tst	r1, #128	; 0x80
   20d60:	and	r1, r1, #127	; 0x7f
   20d64:	uxtb	r2, r1
   20d68:	bne	21024 <__assert_fail@plt+0xdb20>
   20d6c:	str	r1, [fp, #-108]	; 0xffffff94
   20d70:	ldr	r8, [fp, #-104]	; 0xffffff98
   20d74:	rsb	r5, lr, r8
   20d78:	cmp	r5, #0
   20d7c:	ble	20f80 <__assert_fail@plt+0xda7c>
   20d80:	ldrb	r6, [lr]
   20d84:	add	r8, lr, #1
   20d88:	mov	r3, #0
   20d8c:	tst	r6, #128	; 0x80
   20d90:	and	r6, r6, #127	; 0x7f
   20d94:	uxtb	r2, r6
   20d98:	bne	210b0 <__assert_fail@plt+0xdbac>
   20d9c:	ldr	ip, [fp, #-112]	; 0xffffff90
   20da0:	mov	r1, #0
   20da4:	ldrd	r2, [sl, #16]
   20da8:	ldr	r0, [ip]
   20dac:	rsb	r0, r0, r8
   20db0:	cmp	r1, r3
   20db4:	cmpeq	r0, r2
   20db8:	bcc	20ee0 <__assert_fail@plt+0xd9dc>
   20dbc:	ldrd	r2, [sl, #48]	; 0x30
   20dc0:	cmp	r3, r1
   20dc4:	cmpeq	r2, r0
   20dc8:	bhi	20e1c <__assert_fail@plt+0xd918>
   20dcc:	ldr	r4, [ip, #12]
   20dd0:	mov	r5, #0
   20dd4:	cmp	r3, r5
   20dd8:	cmpeq	r2, r4
   20ddc:	beq	20e1c <__assert_fail@plt+0xd918>
   20de0:	add	ip, sl, #32
   20de4:	add	lr, sl, #64	; 0x40
   20de8:	b	20dfc <__assert_fail@plt+0xd8f8>
   20dec:	cmp	r3, r5
   20df0:	cmpeq	r2, r4
   20df4:	add	ip, ip, #32
   20df8:	beq	20f14 <__assert_fail@plt+0xda10>
   20dfc:	rsb	r3, sl, ip
   20e00:	mov	r7, ip
   20e04:	add	r3, lr, r3
   20e08:	ldrd	r2, [r3, #-16]
   20e0c:	cmp	r1, r3
   20e10:	cmpeq	r0, r2
   20e14:	bcs	20dec <__assert_fail@plt+0xd8e8>
   20e18:	mov	sl, ip
   20e1c:	ldr	r0, [sl, #24]
   20e20:	cmp	r0, #0
   20e24:	beq	20f24 <__assert_fail@plt+0xda20>
   20e28:	cmn	r0, #1
   20e2c:	beq	20ee0 <__assert_fail@plt+0xd9dc>
   20e30:	mov	r2, #0
   20e34:	mov	r1, r6
   20e38:	mov	r3, r2
   20e3c:	bl	13234 <dwarf_filesrc@plt>
   20e40:	ldr	ip, [fp, #-124]	; 0xffffff84
   20e44:	cmp	r0, #0
   20e48:	moveq	r0, ip
   20e4c:	ldr	ip, [fp, #-108]	; 0xffffff94
   20e50:	mov	r2, r9
   20e54:	str	r0, [sp, #8]
   20e58:	movw	r1, #2124	; 0x84c
   20e5c:	str	r6, [sp, #4]
   20e60:	movt	r1, #4
   20e64:	str	ip, [sp]
   20e68:	movw	r3, #15800	; 0x3db8
   20e6c:	mov	r0, #1
   20e70:	movt	r3, #4
   20e74:	add	r9, r9, r0
   20e78:	bl	13204 <__printf_chk@plt>
   20e7c:	b	20d34 <__assert_fail@plt+0xd830>
   20e80:	cmp	r6, #1
   20e84:	bcs	20ccc <__assert_fail@plt+0xd7c8>
   20e88:	cmp	r6, #0
   20e8c:	bne	20ffc <__assert_fail@plt+0xdaf8>
   20e90:	ldr	r8, [fp, #-104]	; 0xffffff98
   20e94:	cmp	r8, ip
   20e98:	bne	20ffc <__assert_fail@plt+0xdaf8>
   20e9c:	ldr	r8, [fp, #-116]	; 0xffffff8c
   20ea0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   20ea4:	ldr	r3, [r8]
   20ea8:	cmp	r2, r3
   20eac:	bne	21240 <__assert_fail@plt+0xdd3c>
   20eb0:	sub	sp, fp, #32
   20eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20eb8:	sub	r9, r9, #1
   20ebc:	movw	r1, #2152	; 0x868
   20ec0:	movw	r3, #15800	; 0x3db8
   20ec4:	movt	r1, #4
   20ec8:	mov	r2, r9
   20ecc:	movt	r3, #4
   20ed0:	mov	r0, #1
   20ed4:	mov	r8, ip
   20ed8:	bl	13204 <__printf_chk@plt>
   20edc:	b	20d34 <__assert_fail@plt+0xd830>
   20ee0:	movw	r0, #8172	; 0x1fec
   20ee4:	movt	r0, #4
   20ee8:	b	20e4c <__assert_fail@plt+0xd948>
   20eec:	str	r7, [sp]
   20ef0:	movw	r1, #2008	; 0x7d8
   20ef4:	str	r4, [sp, #4]
   20ef8:	movt	r1, #4
   20efc:	movw	r3, #15800	; 0x3db8
   20f00:	mov	r2, r9
   20f04:	movt	r3, #4
   20f08:	mov	r0, #1
   20f0c:	bl	13204 <__printf_chk@plt>
   20f10:	b	20d30 <__assert_fail@plt+0xd82c>
   20f14:	mov	sl, r7
   20f18:	ldr	r0, [sl, #24]
   20f1c:	cmp	r0, #0
   20f20:	bne	20e28 <__assert_fail@plt+0xd924>
   20f24:	mov	r2, r0
   20f28:	add	r1, sl, #24
   20f2c:	mov	r0, sl
   20f30:	bl	133b4 <dwarf_getsrcfiles@plt>
   20f34:	cmp	r0, #0
   20f38:	beq	20f78 <__assert_fail@plt+0xda74>
   20f3c:	mvn	r3, #0
   20f40:	movw	r0, #8172	; 0x1fec
   20f44:	str	r3, [sl, #24]
   20f48:	movt	r0, #4
   20f4c:	b	20e4c <__assert_fail@plt+0xd948>
   20f50:	str	r7, [sp]
   20f54:	mov	r0, r6
   20f58:	str	r4, [sp, #4]
   20f5c:	movw	r1, #1984	; 0x7c0
   20f60:	movw	r3, #15800	; 0x3db8
   20f64:	movt	r1, #4
   20f68:	movt	r3, #4
   20f6c:	mov	r2, r9
   20f70:	bl	13204 <__printf_chk@plt>
   20f74:	b	20d30 <__assert_fail@plt+0xd82c>
   20f78:	ldr	r0, [sl, #24]
   20f7c:	b	20e28 <__assert_fail@plt+0xd924>
   20f80:	movw	r1, #2060	; 0x80c
   20f84:	movt	r1, #4
   20f88:	mov	r0, #0
   20f8c:	mov	r2, #5
   20f90:	bl	12d84 <dcgettext@plt>
   20f94:	mov	r2, r9
   20f98:	movw	r3, #15800	; 0x3db8
   20f9c:	movt	r3, #4
   20fa0:	mov	r1, r0
   20fa4:	mov	r0, #1
   20fa8:	bl	13204 <__printf_chk@plt>
   20fac:	b	20e9c <__assert_fail@plt+0xd998>
   20fb0:	mov	r0, r5
   20fb4:	mov	r1, r8
   20fb8:	bl	131bc <elf_rawdata@plt>
   20fbc:	subs	r9, r0, #0
   20fc0:	str	r9, [fp, #-112]	; 0xffffff90
   20fc4:	bne	20ae0 <__assert_fail@plt+0xd5dc>
   20fc8:	mov	r2, #5
   20fcc:	movw	r1, #1872	; 0x750
   20fd0:	movt	r1, #4
   20fd4:	bl	12d84 <dcgettext@plt>
   20fd8:	mov	r4, r0
   20fdc:	mvn	r0, #0
   20fe0:	bl	130a8 <elf_errmsg@plt>
   20fe4:	mov	r2, r4
   20fe8:	mov	r3, r0
   20fec:	ldr	r0, [fp, #-112]	; 0xffffff90
   20ff0:	mov	r1, r0
   20ff4:	bl	12f70 <error@plt>
   20ff8:	b	20e9c <__assert_fail@plt+0xd998>
   20ffc:	str	r6, [sp]
   21000:	movw	r1, #2168	; 0x878
   21004:	movw	r3, #15800	; 0x3db8
   21008:	movt	r1, #4
   2100c:	movt	r3, #4
   21010:	mov	r2, r9
   21014:	mov	r0, #1
   21018:	mov	r8, ip
   2101c:	bl	13204 <__printf_chk@plt>
   21020:	b	20d34 <__assert_fail@plt+0xd830>
   21024:	ldr	r0, [fp, #-104]	; 0xffffff98
   21028:	cmp	r0, ip
   2102c:	bls	21224 <__assert_fail@plt+0xdd20>
   21030:	ldr	r0, [fp, #-104]	; 0xffffff98
   21034:	rsb	ip, ip, r0
   21038:	cmp	ip, #9
   2103c:	movhi	r4, #10
   21040:	bls	2120c <__assert_fail@plt+0xdd08>
   21044:	ldrb	r1, [r8, #2]
   21048:	add	lr, r8, #3
   2104c:	and	r0, r1, #127	; 0x7f
   21050:	tst	r1, #128	; 0x80
   21054:	uxtb	r0, r0
   21058:	movne	r1, #1
   2105c:	lsr	r8, r0, #25
   21060:	lsl	ip, r0, #7
   21064:	str	r8, [fp, #-160]	; 0xffffff60
   21068:	str	ip, [fp, #-164]	; 0xffffff5c
   2106c:	ldrd	r6, [fp, #-164]	; 0xffffff5c
   21070:	orr	r6, r6, r2
   21074:	orr	r7, r7, r3
   21078:	bne	21244 <__assert_fail@plt+0xdd40>
   2107c:	str	r6, [fp, #-108]	; 0xffffff94
   21080:	b	20d70 <__assert_fail@plt+0xd86c>
   21084:	movw	r1, #1936	; 0x790
   21088:	mov	r2, #5
   2108c:	movt	r1, #4
   21090:	b	20f90 <__assert_fail@plt+0xda8c>
   21094:	movw	r0, #1920	; 0x780
   21098:	movw	r1, #24
   2109c:	movt	r0, #4
   210a0:	movt	r1, #4
   210a4:	movw	r2, #9629	; 0x259d
   210a8:	ldr	r3, [pc, #504]	; 212a8 <__assert_fail@plt+0xdda4>
   210ac:	bl	13504 <__assert_fail@plt>
   210b0:	ldr	ip, [fp, #-104]	; 0xffffff98
   210b4:	cmp	ip, lr
   210b8:	bls	21238 <__assert_fail@plt+0xdd34>
   210bc:	cmp	r5, #9
   210c0:	movhi	r5, #10
   210c4:	bls	21230 <__assert_fail@plt+0xdd2c>
   210c8:	ldrb	r1, [lr, #1]
   210cc:	add	r8, lr, #2
   210d0:	and	r0, r1, #127	; 0x7f
   210d4:	tst	r1, #128	; 0x80
   210d8:	uxtb	r0, r0
   210dc:	movne	r1, #1
   210e0:	lsr	ip, r0, #25
   210e4:	str	ip, [fp, #-168]	; 0xffffff58
   210e8:	lsl	ip, r0, #7
   210ec:	str	ip, [fp, #-172]	; 0xffffff54
   210f0:	ldrd	r6, [fp, #-172]	; 0xffffff54
   210f4:	orr	r6, r6, r2
   210f8:	orr	r7, r7, r3
   210fc:	beq	20d9c <__assert_fail@plt+0xd898>
   21100:	add	r1, r1, #1
   21104:	cmp	r1, r5
   21108:	bcs	21238 <__assert_fail@plt+0xdd34>
   2110c:	ldrb	ip, [r8], #1
   21110:	rsb	r0, r1, r1, lsl #3
   21114:	sub	r4, r0, #32
   21118:	rsb	lr, r0, #32
   2111c:	and	r2, ip, #127	; 0x7f
   21120:	tst	ip, #128	; 0x80
   21124:	uxtb	r2, r2
   21128:	lsl	r4, r2, r4
   2112c:	lsl	r0, r2, r0
   21130:	orr	lr, r4, r2, lsr lr
   21134:	str	r0, [fp, #-148]	; 0xffffff6c
   21138:	str	lr, [fp, #-144]	; 0xffffff70
   2113c:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   21140:	orr	r6, r6, r2
   21144:	orr	r7, r7, r3
   21148:	beq	20d9c <__assert_fail@plt+0xd898>
   2114c:	b	21100 <__assert_fail@plt+0xdbfc>
   21150:	ldr	r0, [fp, #-104]	; 0xffffff98
   21154:	cmp	r0, ip
   21158:	bls	212a0 <__assert_fail@plt+0xdd9c>
   2115c:	ldr	r1, [fp, #-104]	; 0xffffff98
   21160:	rsb	ip, ip, r1
   21164:	cmp	ip, #9
   21168:	movhi	lr, #10
   2116c:	bls	21294 <__assert_fail@plt+0xdd90>
   21170:	ldrb	r1, [r8, #2]
   21174:	add	r7, r8, #3
   21178:	and	r4, r1, #127	; 0x7f
   2117c:	tst	r1, #128	; 0x80
   21180:	uxtb	r4, r4
   21184:	lsl	r1, r4, #7
   21188:	lsr	r0, r4, #25
   2118c:	str	r1, [fp, #-156]	; 0xffffff64
   21190:	movne	r1, #1
   21194:	str	r0, [fp, #-152]	; 0xffffff68
   21198:	ldrd	r4, [fp, #-156]	; 0xffffff64
   2119c:	orr	r4, r4, r2
   211a0:	orr	r5, r5, r3
   211a4:	beq	20cec <__assert_fail@plt+0xd7e8>
   211a8:	add	r1, r1, #1
   211ac:	cmp	lr, r1
   211b0:	bls	212a0 <__assert_fail@plt+0xdd9c>
   211b4:	ldrb	ip, [r7], #1
   211b8:	rsb	r0, r1, r1, lsl #3
   211bc:	rsb	r3, r0, #32
   211c0:	str	r3, [fp, #-108]	; 0xffffff94
   211c4:	and	r2, ip, #127	; 0x7f
   211c8:	sub	r8, r0, #32
   211cc:	tst	ip, #128	; 0x80
   211d0:	ldr	ip, [fp, #-108]	; 0xffffff94
   211d4:	uxtb	r2, r2
   211d8:	lsl	r8, r2, r8
   211dc:	lsl	r0, r2, r0
   211e0:	orr	r8, r8, r2, lsr ip
   211e4:	str	r0, [fp, #-132]	; 0xffffff7c
   211e8:	str	r8, [fp, #-128]	; 0xffffff80
   211ec:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   211f0:	orr	r4, r4, r2
   211f4:	orr	r5, r5, r3
   211f8:	beq	20cec <__assert_fail@plt+0xd7e8>
   211fc:	b	211a8 <__assert_fail@plt+0xdca4>
   21200:	mov	r1, #10
   21204:	bl	132dc <__overflow@plt>
   21208:	b	20ad0 <__assert_fail@plt+0xd5cc>
   2120c:	cmp	ip, #1
   21210:	movhi	r4, ip
   21214:	bhi	21044 <__assert_fail@plt+0xdb40>
   21218:	mvn	ip, #0
   2121c:	str	ip, [fp, #-108]	; 0xffffff94
   21220:	b	20d70 <__assert_fail@plt+0xd86c>
   21224:	mvn	r8, #0
   21228:	str	r8, [fp, #-108]	; 0xffffff94
   2122c:	b	20d70 <__assert_fail@plt+0xd86c>
   21230:	cmp	r5, #1
   21234:	bne	210c8 <__assert_fail@plt+0xdbc4>
   21238:	mvn	r6, #0
   2123c:	b	20d9c <__assert_fail@plt+0xd898>
   21240:	bl	12dc0 <__stack_chk_fail@plt>
   21244:	add	r1, r1, #1
   21248:	cmp	r4, r1
   2124c:	bls	21224 <__assert_fail@plt+0xdd20>
   21250:	ldrb	ip, [lr], #1
   21254:	rsb	r0, r1, r1, lsl #3
   21258:	sub	r8, r0, #32
   2125c:	rsb	r5, r0, #32
   21260:	and	r2, ip, #127	; 0x7f
   21264:	tst	ip, #128	; 0x80
   21268:	uxtb	r2, r2
   2126c:	lsl	r8, r2, r8
   21270:	lsl	r0, r2, r0
   21274:	orr	r5, r8, r2, lsr r5
   21278:	str	r0, [fp, #-140]	; 0xffffff74
   2127c:	str	r5, [fp, #-136]	; 0xffffff78
   21280:	ldrd	r2, [fp, #-140]	; 0xffffff74
   21284:	orr	r6, r6, r2
   21288:	orr	r7, r7, r3
   2128c:	beq	2107c <__assert_fail@plt+0xdb78>
   21290:	b	21244 <__assert_fail@plt+0xdd40>
   21294:	cmp	ip, #1
   21298:	movhi	lr, ip
   2129c:	bhi	21170 <__assert_fail@plt+0xdc6c>
   212a0:	mvn	r4, #0
   212a4:	b	20cec <__assert_fail@plt+0xd7e8>
   212a8:	andeq	ip, r3, r8, lsr #15
   212ac:	ands	r0, r0, #15
   212b0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212b4:	mov	r7, r1
   212b8:	mov	sl, r2
   212bc:	mov	r6, r3
   212c0:	beq	21304 <__assert_fail@plt+0xde00>
   212c4:	sub	r0, r0, #1
   212c8:	cmp	r0, #11
   212cc:	ldrls	pc, [pc, r0, lsl #2]
   212d0:	b	2146c <__assert_fail@plt+0xdf68>
   212d4:	andeq	r1, r2, r0, lsl r4
   212d8:	andeq	r1, r2, r4, asr #6
   212dc:	andeq	r1, r2, ip, lsr r4
   212e0:	andeq	r1, r2, r8, lsl r3
   212e4:	andeq	r1, r2, ip, ror #8
   212e8:	andeq	r1, r2, ip, ror #8
   212ec:	andeq	r1, r2, ip, ror #8
   212f0:	andeq	r1, r2, ip, ror #8
   212f4:	andeq	r1, r2, r0, lsl #7
   212f8:	andeq	r1, r2, r8, lsr #7
   212fc:	andeq	r1, r2, r4, ror #7
   21300:	andeq	r1, r2, r8, lsl r3
   21304:	ldr	r2, [sp, #40]	; 0x28
   21308:	ldr	r0, [r2]
   2130c:	bl	12e38 <gelf_getclass@plt>
   21310:	cmp	r0, #1
   21314:	beq	2143c <__assert_fail@plt+0xdf38>
   21318:	add	r0, r7, #8
   2131c:	cmp	sl, r0
   21320:	bcc	2146c <__assert_fail@plt+0xdf68>
   21324:	ldr	r2, [sp, #44]	; 0x2c
   21328:	ldrb	r3, [r2]
   2132c:	cmp	r3, #0
   21330:	ldreq	r2, [r7]
   21334:	ldreq	r3, [r7, #4]
   21338:	bne	21508 <__assert_fail@plt+0xe004>
   2133c:	stm	r6, {r2, r3}
   21340:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21344:	add	r0, r1, #2
   21348:	cmp	r2, r0
   2134c:	bcc	2146c <__assert_fail@plt+0xdf68>
   21350:	ldr	r2, [sp, #44]	; 0x2c
   21354:	ldrb	r3, [r2]
   21358:	cmp	r3, #0
   2135c:	ldrhne	r3, [r1]
   21360:	ldrheq	r2, [r1]
   21364:	lslne	r2, r3, #8
   21368:	orrne	r3, r2, r3, lsr #8
   2136c:	uxthne	r2, r3
   21370:	mov	r3, #0
   21374:	uxth	r2, r2
   21378:	strd	r2, [r6]
   2137c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21380:	ldrb	r3, [r1]
   21384:	add	r0, r1, #1
   21388:	uxtb	r2, r3
   2138c:	tst	r2, #128	; 0x80
   21390:	bne	21490 <__assert_fail@plt+0xdf8c>
   21394:	sbfx	r2, r2, #0, #7
   21398:	sxtb	r2, r2
   2139c:	asr	r3, r2, #31
   213a0:	strd	r2, [r6]
   213a4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213a8:	add	r0, r1, #2
   213ac:	cmp	r2, r0
   213b0:	bcc	2146c <__assert_fail@plt+0xdf68>
   213b4:	ldr	r2, [sp, #44]	; 0x2c
   213b8:	ldrb	r3, [r2]
   213bc:	cmp	r3, #0
   213c0:	ldrhne	r3, [r1]
   213c4:	ldrheq	r2, [r1]
   213c8:	lslne	r2, r3, #8
   213cc:	orrne	r3, r2, r3, lsr #8
   213d0:	uxthne	r2, r3
   213d4:	sxth	r2, r2
   213d8:	asr	r3, r2, #31
   213dc:	strd	r2, [r6]
   213e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213e4:	add	r0, r1, #4
   213e8:	cmp	r2, r0
   213ec:	bcc	2146c <__assert_fail@plt+0xdf68>
   213f0:	ldr	r2, [sp, #44]	; 0x2c
   213f4:	ldrb	r3, [r2]
   213f8:	ldr	r2, [r1]
   213fc:	cmp	r3, #0
   21400:	bne	21580 <__assert_fail@plt+0xe07c>
   21404:	asr	r3, r2, #31
   21408:	strd	r2, [r6]
   2140c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21410:	ldrb	r4, [r1]
   21414:	add	r0, r1, #1
   21418:	mov	r5, #0
   2141c:	tst	r4, #128	; 0x80
   21420:	and	r4, r4, #127	; 0x7f
   21424:	uxtb	r4, r4
   21428:	bne	2151c <__assert_fail@plt+0xe018>
   2142c:	mov	r2, r4
   21430:	mov	r3, r5
   21434:	stm	r6, {r2, r3}
   21438:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2143c:	add	r0, r7, #4
   21440:	cmp	sl, r0
   21444:	bcc	2146c <__assert_fail@plt+0xdf68>
   21448:	ldr	r2, [sp, #44]	; 0x2c
   2144c:	ldrb	r3, [r2]
   21450:	cmp	r3, #0
   21454:	ldr	r3, [r7]
   21458:	bne	2159c <__assert_fail@plt+0xe098>
   2145c:	str	r3, [r6]
   21460:	mov	r3, #0
   21464:	str	r3, [r6, #4]
   21468:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2146c:	mov	r2, #5
   21470:	movw	r1, #2196	; 0x894
   21474:	mov	r0, #0
   21478:	movt	r1, #4
   2147c:	bl	12d84 <dcgettext@plt>
   21480:	mov	r1, #0
   21484:	mov	r2, r0
   21488:	mov	r0, #1
   2148c:	bl	12f70 <error@plt>
   21490:	and	r3, r3, #127	; 0x7f
   21494:	cmp	sl, r1
   21498:	uxtb	r2, r3
   2149c:	mov	r3, #0
   214a0:	bls	215e0 <__assert_fail@plt+0xe0dc>
   214a4:	rsb	r7, r1, sl
   214a8:	cmp	r7, #9
   214ac:	movcs	r7, #9
   214b0:	mov	r1, #1
   214b4:	mov	sl, #7
   214b8:	cmp	r1, r7
   214bc:	bcs	215d4 <__assert_fail@plt+0xe0d0>
   214c0:	ldrb	r8, [r0], #1
   214c4:	uxtb	ip, r8
   214c8:	tst	ip, #128	; 0x80
   214cc:	bne	215a4 <__assert_fail@plt+0xe0a0>
   214d0:	sbfx	ip, ip, #0, #7
   214d4:	mov	r4, #7
   214d8:	mul	r1, r4, r1
   214dc:	sxtb	r8, ip
   214e0:	asr	r9, r8, #31
   214e4:	sub	ip, r1, #32
   214e8:	lsl	r4, r8, r1
   214ec:	lsl	r5, r9, r1
   214f0:	orr	r2, r2, r4
   214f4:	orr	r5, r5, r8, lsl ip
   214f8:	rsb	ip, r1, #32
   214fc:	orr	r5, r5, r8, lsr ip
   21500:	orr	r3, r3, r5
   21504:	b	213a0 <__assert_fail@plt+0xde9c>
   21508:	ldr	r3, [r7]
   2150c:	ldr	r2, [r7, #4]
   21510:	rev	r3, r3
   21514:	rev	r2, r2
   21518:	b	2133c <__assert_fail@plt+0xde38>
   2151c:	cmp	r2, r1
   21520:	bls	21594 <__assert_fail@plt+0xe090>
   21524:	rsb	ip, r1, r2
   21528:	cmp	ip, #10
   2152c:	movcs	ip, #10
   21530:	mov	r1, #1
   21534:	mov	sl, #7
   21538:	cmp	r1, ip
   2153c:	bcs	21588 <__assert_fail@plt+0xe084>
   21540:	mul	fp, sl, r1
   21544:	ldrb	r7, [r0], #1
   21548:	and	r2, r7, #127	; 0x7f
   2154c:	tst	r7, #128	; 0x80
   21550:	uxtb	r2, r2
   21554:	mov	r3, fp
   21558:	sub	fp, fp, #32
   2155c:	rsb	r7, r3, #32
   21560:	lsl	r9, r2, fp
   21564:	orr	r9, r9, r2, lsr r7
   21568:	lsl	r8, r2, r3
   2156c:	orr	r4, r4, r8
   21570:	orr	r5, r5, r9
   21574:	beq	2142c <__assert_fail@plt+0xdf28>
   21578:	add	r1, r1, #1
   2157c:	b	21538 <__assert_fail@plt+0xe034>
   21580:	rev	r2, r2
   21584:	b	21404 <__assert_fail@plt+0xdf00>
   21588:	mvn	r2, #0
   2158c:	mov	r3, r2
   21590:	b	2133c <__assert_fail@plt+0xde38>
   21594:	mov	ip, #0
   21598:	b	21530 <__assert_fail@plt+0xe02c>
   2159c:	rev	r3, r3
   215a0:	b	2145c <__assert_fail@plt+0xdf58>
   215a4:	mul	ip, sl, r1
   215a8:	and	r8, r8, #127	; 0x7f
   215ac:	add	r1, r1, #1
   215b0:	uxtb	r8, r8
   215b4:	sub	fp, ip, #32
   215b8:	rsb	r9, ip, #32
   215bc:	lsl	r5, r8, fp
   215c0:	lsl	r4, r8, ip
   215c4:	orr	r5, r5, r8, lsr r9
   215c8:	orr	r2, r2, r4
   215cc:	orr	r3, r3, r5
   215d0:	b	214b8 <__assert_fail@plt+0xdfb4>
   215d4:	mvn	r2, #0
   215d8:	mvn	r3, #-2147483648	; 0x80000000
   215dc:	b	213a0 <__assert_fail@plt+0xde9c>
   215e0:	mov	r7, #0
   215e4:	b	214b0 <__assert_fail@plt+0xdfac>
   215e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215ec:	sub	sp, sp, #68	; 0x44
   215f0:	movw	r4, #37688	; 0x9338
   215f4:	movt	r4, #5
   215f8:	str	r4, [sp, #28]
   215fc:	mov	r4, r3
   21600:	ldr	r5, [sp, #28]
   21604:	mov	r2, #5
   21608:	movw	r1, #2216	; 0x8a8
   2160c:	mov	r0, #0
   21610:	movt	r1, #4
   21614:	ldr	r7, [sp, #104]	; 0x68
   21618:	ldr	r3, [r5]
   2161c:	ldr	fp, [sp, #108]	; 0x6c
   21620:	str	r3, [sp, #60]	; 0x3c
   21624:	bl	12d84 <dcgettext@plt>
   21628:	mov	r5, r0
   2162c:	mov	r0, r4
   21630:	bl	133d8 <elf_ndxscn@plt>
   21634:	mov	r1, r5
   21638:	mov	r2, r0
   2163c:	mov	r0, #1
   21640:	bl	13204 <__printf_chk@plt>
   21644:	mov	r0, r4
   21648:	mov	r1, #0
   2164c:	bl	131bc <elf_rawdata@plt>
   21650:	subs	r4, r0, #0
   21654:	beq	21918 <__assert_fail@plt+0xe414>
   21658:	ldr	ip, [r4]
   2165c:	ldr	sl, [r4, #12]
   21660:	add	lr, ip, #4
   21664:	add	sl, ip, sl
   21668:	cmp	sl, lr
   2166c:	bcc	218d4 <__assert_fail@plt+0xe3d0>
   21670:	ldrb	r4, [ip, #1]
   21674:	movw	r1, #2308	; 0x904
   21678:	ldrb	r9, [ip, #2]
   2167c:	movt	r1, #4
   21680:	ldrb	r2, [ip]
   21684:	mov	r0, #1
   21688:	mov	r3, r4
   2168c:	ldrb	r8, [ip, #3]
   21690:	mov	r6, lr
   21694:	bl	13204 <__printf_chk@plt>
   21698:	mov	r1, r4
   2169c:	movw	r0, #15800	; 0x3db8
   216a0:	movt	r0, #4
   216a4:	bl	1530c <__assert_fail@plt+0x1e08>
   216a8:	mov	r2, r9
   216ac:	movw	r1, #2356	; 0x934
   216b0:	mov	r0, #1
   216b4:	movt	r1, #4
   216b8:	bl	13204 <__printf_chk@plt>
   216bc:	mov	r1, r9
   216c0:	movw	r0, #15800	; 0x3db8
   216c4:	movt	r0, #4
   216c8:	bl	1530c <__assert_fail@plt+0x1e08>
   216cc:	mov	r2, r8
   216d0:	movw	r1, #2380	; 0x94c
   216d4:	mov	r0, #1
   216d8:	movt	r1, #4
   216dc:	bl	13204 <__printf_chk@plt>
   216e0:	mov	r1, r8
   216e4:	movw	r0, #15800	; 0x3db8
   216e8:	movt	r0, #4
   216ec:	bl	1530c <__assert_fail@plt+0x1e08>
   216f0:	cmp	r4, #255	; 0xff
   216f4:	mov	r2, #0
   216f8:	mov	r3, #0
   216fc:	strd	r2, [sp, #40]	; 0x28
   21700:	beq	21778 <__assert_fail@plt+0xe274>
   21704:	mov	r1, r6
   21708:	add	r3, fp, #84	; 0x54
   2170c:	str	fp, [sp]
   21710:	mov	r0, r4
   21714:	str	r3, [sp, #4]
   21718:	mov	r2, sl
   2171c:	add	r3, sp, #40	; 0x28
   21720:	bl	212ac <__assert_fail@plt+0xdda8>
   21724:	subs	r6, r0, #0
   21728:	beq	218d4 <__assert_fail@plt+0xe3d0>
   2172c:	movw	r1, #2404	; 0x964
   21730:	mov	r0, #1
   21734:	movt	r1, #4
   21738:	ldrd	r2, [sp, #40]	; 0x28
   2173c:	and	r4, r4, #112	; 0x70
   21740:	bl	13204 <__printf_chk@plt>
   21744:	cmp	r4, #16
   21748:	beq	218a4 <__assert_fail@plt+0xe3a0>
   2174c:	movw	r3, #37704	; 0x9348
   21750:	movt	r3, #5
   21754:	ldr	r0, [r3]
   21758:	ldr	r3, [r0, #20]
   2175c:	ldr	r2, [r0, #24]
   21760:	cmp	r3, r2
   21764:	addcc	r1, r3, #1
   21768:	strcc	r1, [r0, #20]
   2176c:	movcc	r2, #10
   21770:	strbcc	r2, [r3]
   21774:	bcs	21958 <__assert_fail@plt+0xe454>
   21778:	cmp	r9, #255	; 0xff
   2177c:	mov	r2, #0
   21780:	mov	r3, #0
   21784:	strd	r2, [sp, #48]	; 0x30
   21788:	beq	217f0 <__assert_fail@plt+0xe2ec>
   2178c:	add	r3, fp, #84	; 0x54
   21790:	str	fp, [sp]
   21794:	str	r3, [sp, #4]
   21798:	mov	r0, r9
   2179c:	mov	r1, r6
   217a0:	mov	r2, sl
   217a4:	add	r3, sp, #48	; 0x30
   217a8:	bl	212ac <__assert_fail@plt+0xdda8>
   217ac:	subs	r4, r0, #0
   217b0:	beq	218d4 <__assert_fail@plt+0xe3d0>
   217b4:	ldrd	r2, [sp, #48]	; 0x30
   217b8:	movw	r1, #2452	; 0x994
   217bc:	mov	r0, #1
   217c0:	movt	r1, #4
   217c4:	bl	13204 <__printf_chk@plt>
   217c8:	ldrd	r2, [sp, #48]	; 0x30
   217cc:	orrs	r5, r2, r3
   217d0:	beq	217f0 <__assert_fail@plt+0xe2ec>
   217d4:	cmp	r8, #255	; 0xff
   217d8:	beq	217f0 <__assert_fail@plt+0xe2ec>
   217dc:	movw	r0, #2480	; 0x9b0
   217e0:	movt	r0, #4
   217e4:	bl	12fdc <puts@plt>
   217e8:	cmp	r8, #59	; 0x3b
   217ec:	beq	2180c <__assert_fail@plt+0xe308>
   217f0:	ldr	r4, [sp, #28]
   217f4:	ldr	r2, [sp, #60]	; 0x3c
   217f8:	ldr	r3, [r4]
   217fc:	cmp	r2, r3
   21800:	bne	21954 <__assert_fail@plt+0xe450>
   21804:	add	sp, sp, #68	; 0x44
   21808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2180c:	ldrd	r2, [sp, #48]	; 0x30
   21810:	orrs	r8, r2, r3
   21814:	beq	217f0 <__assert_fail@plt+0xe2ec>
   21818:	add	r6, r4, #8
   2181c:	cmp	sl, r6
   21820:	bcs	21834 <__assert_fail@plt+0xe330>
   21824:	b	217f0 <__assert_fail@plt+0xe2ec>
   21828:	add	r6, r6, #8
   2182c:	cmp	sl, r6
   21830:	bcc	217f0 <__assert_fail@plt+0xe2ec>
   21834:	ldrb	r3, [fp, #84]	; 0x54
   21838:	ldr	r2, [r4]
   2183c:	cmp	r3, #0
   21840:	bne	218fc <__assert_fail@plt+0xe3f8>
   21844:	ldrd	r0, [r7, #24]
   21848:	ldr	r3, [r4, #4]
   2184c:	adds	r0, r0, r2
   21850:	adc	r1, r1, r2, asr #31
   21854:	ldrd	r8, [sp, #40]	; 0x28
   21858:	mvn	r4, #3
   2185c:	mvn	r5, #0
   21860:	strd	r0, [sp]
   21864:	subs	r4, r4, r8
   21868:	sbc	r5, r5, r9
   2186c:	strd	r4, [sp, #32]
   21870:	adds	r4, r4, r3
   21874:	str	r3, [sp, #8]
   21878:	adc	r5, r5, r3, asr #31
   2187c:	movw	r1, #2488	; 0x9b8
   21880:	strd	r4, [sp, #16]
   21884:	movt	r1, #4
   21888:	mov	r0, #1
   2188c:	mov	r4, r6
   21890:	bl	13204 <__printf_chk@plt>
   21894:	ldrd	r2, [sp, #48]	; 0x30
   21898:	orrs	r9, r2, r3
   2189c:	bne	21828 <__assert_fail@plt+0xe324>
   218a0:	b	217f0 <__assert_fail@plt+0xe2ec>
   218a4:	ldrd	r2, [sp, #40]	; 0x28
   218a8:	movw	r1, #2432	; 0x980
   218ac:	ldrd	r4, [r7, #24]
   218b0:	movt	r1, #4
   218b4:	mov	r0, #1
   218b8:	adds	r2, r2, r4
   218bc:	adc	r3, r3, r5
   218c0:	strd	r2, [sp, #32]
   218c4:	adds	r2, r2, #4
   218c8:	adc	r3, r3, #0
   218cc:	bl	13204 <__printf_chk@plt>
   218d0:	b	2174c <__assert_fail@plt+0xe248>
   218d4:	mov	r2, #5
   218d8:	movw	r1, #2292	; 0x8f4
   218dc:	mov	r0, #0
   218e0:	movt	r1, #4
   218e4:	bl	12d84 <dcgettext@plt>
   218e8:	mov	r2, r0
   218ec:	mov	r0, #0
   218f0:	mov	r1, r0
   218f4:	bl	12f70 <error@plt>
   218f8:	b	217f0 <__assert_fail@plt+0xe2ec>
   218fc:	ldrd	r0, [r7, #24]
   21900:	rev	r2, r2
   21904:	ldr	r3, [r4, #4]
   21908:	adds	r0, r0, r2
   2190c:	rev	r3, r3
   21910:	adc	r1, r1, r2, asr #31
   21914:	b	21854 <__assert_fail@plt+0xe350>
   21918:	mov	r2, #5
   2191c:	movw	r1, #54876	; 0xd65c
   21920:	movt	r1, #3
   21924:	bl	12d84 <dcgettext@plt>
   21928:	mov	r5, r0
   2192c:	mvn	r0, #0
   21930:	bl	130a8 <elf_errmsg@plt>
   21934:	mov	r2, r5
   21938:	movw	r3, #2276	; 0x8e4
   2193c:	mov	r1, r4
   21940:	movt	r3, #4
   21944:	str	r0, [sp]
   21948:	mov	r0, r4
   2194c:	bl	12f70 <error@plt>
   21950:	b	217f0 <__assert_fail@plt+0xe2ec>
   21954:	bl	12dc0 <__stack_chk_fail@plt>
   21958:	mov	r1, #10
   2195c:	bl	132dc <__overflow@plt>
   21960:	b	21778 <__assert_fail@plt+0xe274>
   21964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21968:	movw	r4, #37688	; 0x9338
   2196c:	movt	r4, #5
   21970:	sub	sp, sp, #676	; 0x2a4
   21974:	mov	r5, r1
   21978:	add	r1, sp, #232	; 0xe8
   2197c:	ldr	r3, [r4]
   21980:	str	r4, [sp, #200]	; 0xc8
   21984:	str	r0, [sp, #216]	; 0xd8
   21988:	str	r3, [sp, #668]	; 0x29c
   2198c:	bl	12db4 <dwfl_module_getelf@plt>
   21990:	add	r1, sp, #264	; 0x108
   21994:	mov	r4, r0
   21998:	bl	12c70 <gelf_getehdr@plt>
   2199c:	subs	r6, r0, #0
   219a0:	str	r6, [sp, #108]	; 0x6c
   219a4:	beq	23090 <__assert_fail@plt+0xfb8c>
   219a8:	mov	r0, r4
   219ac:	bl	38ca0 <__assert_fail@plt+0x2579c>
   219b0:	subs	fp, r0, #0
   219b4:	beq	21c98 <__assert_fail@plt+0xe794>
   219b8:	movw	r7, #37712	; 0x9350
   219bc:	movt	r7, #5
   219c0:	add	r1, r7, #44	; 0x2c
   219c4:	ldr	r0, [fp, #16]
   219c8:	str	r7, [sp, #136]	; 0x88
   219cc:	bl	133f0 <elf_getshdrnum@plt>
   219d0:	cmp	r0, #0
   219d4:	movwlt	r1, #54788	; 0xd604
   219d8:	movlt	r0, #0
   219dc:	movtlt	r1, #3
   219e0:	blt	21c00 <__assert_fail@plt+0xe6fc>
   219e4:	ldr	r8, [sp, #136]	; 0x88
   219e8:	ldr	r0, [fp, #16]
   219ec:	add	r1, r8, #124	; 0x7c
   219f0:	bl	13180 <elf_getphdrnum@plt>
   219f4:	cmp	r0, #0
   219f8:	blt	21bf4 <__assert_fail@plt+0xe6f0>
   219fc:	ldr	r9, [sp, #136]	; 0x88
   21a00:	ldrb	r3, [r9, #3]
   21a04:	cmp	r3, #0
   21a08:	bne	21a24 <__assert_fail@plt+0xe520>
   21a0c:	ldrb	r3, [r9, #2]
   21a10:	cmp	r3, #0
   21a14:	bne	21a24 <__assert_fail@plt+0xe520>
   21a18:	ldr	r3, [r9, #188]	; 0xbc
   21a1c:	cmp	r3, #0
   21a20:	beq	230c4 <__assert_fail@plt+0xfbc0>
   21a24:	ldr	sl, [sp, #108]	; 0x6c
   21a28:	ldrh	r3, [sl, #16]
   21a2c:	cmp	r3, #1
   21a30:	beq	21c28 <__assert_fail@plt+0xe724>
   21a34:	ldr	r6, [fp, #16]
   21a38:	mov	r7, #0
   21a3c:	mov	r8, #2048	; 0x800
   21a40:	mov	r9, #0
   21a44:	b	21a6c <__assert_fail@plt+0xe568>
   21a48:	add	r1, sp, #456	; 0x1c8
   21a4c:	bl	12cc4 <gelf_getshdr@plt>
   21a50:	cmp	r0, #0
   21a54:	beq	21a6c <__assert_fail@plt+0xe568>
   21a58:	ldrd	r2, [r0, #8]
   21a5c:	and	r2, r2, r8
   21a60:	and	r3, r3, r9
   21a64:	orrs	ip, r2, r3
   21a68:	bne	21c28 <__assert_fail@plt+0xe724>
   21a6c:	mov	r1, r7
   21a70:	mov	r0, r6
   21a74:	bl	13300 <elf_nextscn@plt>
   21a78:	subs	r7, r0, #0
   21a7c:	bne	21a48 <__assert_fail@plt+0xe544>
   21a80:	mov	r5, #0
   21a84:	str	fp, [sp, #140]	; 0x8c
   21a88:	str	r5, [sp, #144]	; 0x90
   21a8c:	ldr	r5, [sp, #136]	; 0x88
   21a90:	ldrb	r3, [r5]
   21a94:	cmp	r3, #0
   21a98:	bne	23760 <__assert_fail@plt+0x1025c>
   21a9c:	ldr	r6, [sp, #136]	; 0x88
   21aa0:	movw	r3, #37712	; 0x9350
   21aa4:	movt	r3, #5
   21aa8:	ldrb	r2, [r6, #3]
   21aac:	cmp	r2, #0
   21ab0:	bne	23110 <__assert_fail@plt+0xfc0c>
   21ab4:	ldr	r5, [sp, #136]	; 0x88
   21ab8:	ldrb	r3, [r5, #1]
   21abc:	cmp	r3, #0
   21ac0:	bne	2371c <__assert_fail@plt+0x10218>
   21ac4:	ldr	r7, [sp, #136]	; 0x88
   21ac8:	ldrb	r3, [r7, #7]
   21acc:	cmp	r3, #0
   21ad0:	bne	229e0 <__assert_fail@plt+0xf4dc>
   21ad4:	ldr	r8, [sp, #136]	; 0x88
   21ad8:	movw	r3, #37712	; 0x9350
   21adc:	movt	r3, #5
   21ae0:	ldrb	r2, [r8, #6]
   21ae4:	cmp	r2, #0
   21ae8:	bne	22d88 <__assert_fail@plt+0xf884>
   21aec:	ldr	r4, [sp, #136]	; 0x88
   21af0:	ldrb	r3, [r4, #2]
   21af4:	cmp	r3, #0
   21af8:	bne	22d2c <__assert_fail@plt+0xf828>
   21afc:	ldr	r5, [sp, #136]	; 0x88
   21b00:	ldrb	r3, [r5, #8]
   21b04:	cmp	r3, #0
   21b08:	bne	22d20 <__assert_fail@plt+0xf81c>
   21b0c:	ldr	r7, [sp, #136]	; 0x88
   21b10:	ldrb	r3, [r7, #4]
   21b14:	cmp	r3, #0
   21b18:	bne	22ca4 <__assert_fail@plt+0xf7a0>
   21b1c:	ldr	r8, [sp, #136]	; 0x88
   21b20:	ldrb	r3, [r8, #5]
   21b24:	cmp	r3, #0
   21b28:	bne	22cc0 <__assert_fail@plt+0xf7bc>
   21b2c:	ldr	r9, [sp, #136]	; 0x88
   21b30:	ldrb	r3, [r9, #4]
   21b34:	cmp	r3, #0
   21b38:	bne	237a4 <__assert_fail@plt+0x102a0>
   21b3c:	ldr	r7, [sp, #136]	; 0x88
   21b40:	ldrb	r3, [r7, #9]
   21b44:	cmp	r3, #0
   21b48:	bne	21ce0 <__assert_fail@plt+0xe7dc>
   21b4c:	ldr	r9, [sp, #136]	; 0x88
   21b50:	ldr	r1, [r9, #188]	; 0xbc
   21b54:	cmp	r1, #0
   21b58:	beq	21b70 <__assert_fail@plt+0xe66c>
   21b5c:	ldr	sl, [sp, #140]	; 0x8c
   21b60:	movw	r2, #50300	; 0xc47c
   21b64:	movt	r2, #1
   21b68:	ldr	r0, [sl, #16]
   21b6c:	bl	14e84 <__assert_fail@plt+0x1980>
   21b70:	ldr	ip, [sp, #136]	; 0x88
   21b74:	ldr	r1, [ip, #192]	; 0xc0
   21b78:	cmp	r1, #0
   21b7c:	beq	21b90 <__assert_fail@plt+0xe68c>
   21b80:	movw	r2, #49608	; 0xc1c8
   21b84:	ldr	r0, [fp, #16]
   21b88:	movt	r2, #1
   21b8c:	bl	14e84 <__assert_fail@plt+0x1980>
   21b90:	ldr	r4, [sp, #136]	; 0x88
   21b94:	ldr	r2, [r4, #12]
   21b98:	ldr	r3, [r4, #20]
   21b9c:	orrs	r3, r2, r3
   21ba0:	bne	237b4 <__assert_fail@plt+0x102b0>
   21ba4:	ldr	r5, [sp, #136]	; 0x88
   21ba8:	movw	r3, #37712	; 0x9350
   21bac:	movt	r3, #5
   21bb0:	ldrb	r2, [r5, #10]
   21bb4:	cmp	r2, #0
   21bb8:	bne	22820 <__assert_fail@plt+0xf31c>
   21bbc:	ldr	sl, [sp, #136]	; 0x88
   21bc0:	ldrb	r3, [sl, #32]
   21bc4:	cmp	r3, #0
   21bc8:	bne	22668 <__assert_fail@plt+0xf164>
   21bcc:	mov	r0, fp
   21bd0:	bl	38d30 <__assert_fail@plt+0x2582c>
   21bd4:	ldr	r4, [sp, #140]	; 0x8c
   21bd8:	cmp	r4, fp
   21bdc:	beq	21cc4 <__assert_fail@plt+0xe7c0>
   21be0:	mov	r0, r4
   21be4:	bl	38d30 <__assert_fail@plt+0x2582c>
   21be8:	ldr	r0, [sp, #144]	; 0x90
   21bec:	bl	1303c <elf_end@plt>
   21bf0:	b	21cc4 <__assert_fail@plt+0xe7c0>
   21bf4:	movw	r1, #2624	; 0xa40
   21bf8:	movt	r1, #4
   21bfc:	mov	r0, #0
   21c00:	mov	r2, #5
   21c04:	bl	12d84 <dcgettext@plt>
   21c08:	mov	r4, r0
   21c0c:	mvn	r0, #0
   21c10:	bl	130a8 <elf_errmsg@plt>
   21c14:	mov	r2, r4
   21c18:	mov	r1, #0
   21c1c:	mov	r3, r0
   21c20:	mov	r0, #1
   21c24:	bl	12f70 <error@plt>
   21c28:	mov	r0, r4
   21c2c:	bl	133fc <elf_getaroff@plt>
   21c30:	mov	r6, r0
   21c34:	mov	r0, r5
   21c38:	mov	r7, r1
   21c3c:	bl	12d6c <dwelf_elf_begin@plt>
   21c40:	cmp	r6, #1
   21c44:	sbcs	r8, r7, #0
   21c48:	str	r0, [sp, #144]	; 0x90
   21c4c:	blt	21c78 <__assert_fail@plt+0xe774>
   21c50:	mov	r1, r6
   21c54:	bl	130f0 <elf_rand@plt>
   21c58:	mvn	r0, #0
   21c5c:	mov	r1, #8
   21c60:	ldr	r2, [sp, #144]	; 0x90
   21c64:	bl	13264 <elf_begin@plt>
   21c68:	mov	r3, r0
   21c6c:	ldr	r0, [sp, #144]	; 0x90
   21c70:	str	r3, [sp, #144]	; 0x90
   21c74:	bl	1303c <elf_end@plt>
   21c78:	ldr	r4, [sp, #144]	; 0x90
   21c7c:	cmp	r4, #0
   21c80:	beq	230d8 <__assert_fail@plt+0xfbd4>
   21c84:	ldr	r0, [sp, #144]	; 0x90
   21c88:	bl	38ca0 <__assert_fail@plt+0x2579c>
   21c8c:	cmp	r0, #0
   21c90:	str	r0, [sp, #140]	; 0x8c
   21c94:	bne	21a8c <__assert_fail@plt+0xe588>
   21c98:	bl	1312c <__errno_location@plt>
   21c9c:	mov	r2, #5
   21ca0:	movw	r1, #2596	; 0xa24
   21ca4:	movt	r1, #4
   21ca8:	ldr	r4, [r0]
   21cac:	mov	r0, #0
   21cb0:	bl	12d84 <dcgettext@plt>
   21cb4:	mov	r1, r4
   21cb8:	mov	r2, r0
   21cbc:	mov	r0, #0
   21cc0:	bl	12f70 <error@plt>
   21cc4:	ldr	r4, [sp, #200]	; 0xc8
   21cc8:	ldr	r2, [sp, #668]	; 0x29c
   21ccc:	ldr	r3, [r4]
   21cd0:	cmp	r2, r3
   21cd4:	bne	230d4 <__assert_fail@plt+0xfbd0>
   21cd8:	add	sp, sp, #676	; 0x2a4
   21cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ce0:	add	r8, sp, #240	; 0xf0
   21ce4:	ldr	r0, [fp, #16]
   21ce8:	str	r8, [sp, #112]	; 0x70
   21cec:	mov	r1, r8
   21cf0:	bl	13498 <elf_getshdrstrndx@plt>
   21cf4:	cmp	r0, #0
   21cf8:	movge	sl, #0
   21cfc:	blt	22644 <__assert_fail@plt+0xf140>
   21d00:	mov	r1, sl
   21d04:	ldr	r0, [fp, #16]
   21d08:	bl	13300 <elf_nextscn@plt>
   21d0c:	subs	sl, r0, #0
   21d10:	beq	21eb4 <__assert_fail@plt+0xe9b0>
   21d14:	add	r1, sp, #456	; 0x1c8
   21d18:	bl	12cc4 <gelf_getshdr@plt>
   21d1c:	subs	r6, r0, #0
   21d20:	beq	21d00 <__assert_fail@plt+0xe7fc>
   21d24:	ldr	r3, [r6, #4]
   21d28:	cmn	r3, #-1879048183	; 0x90000009
   21d2c:	bne	21d00 <__assert_fail@plt+0xe7fc>
   21d30:	mov	r2, #1
   21d34:	mov	r1, #22
   21d38:	mov	r3, r2
   21d3c:	ldr	r0, [fp, #16]
   21d40:	bl	12f64 <gelf_fsize@plt>
   21d44:	mov	r3, #0
   21d48:	mov	r9, #5
   21d4c:	mov	r2, r0
   21d50:	ldrd	r0, [r6, #32]
   21d54:	bl	3bba0 <__assert_fail@plt+0x2869c>
   21d58:	str	r9, [sp]
   21d5c:	movw	r1, #4668	; 0x123c
   21d60:	movw	r2, #4740	; 0x1284
   21d64:	movt	r1, #4
   21d68:	movt	r2, #4
   21d6c:	mov	r3, r0
   21d70:	mov	r7, r0
   21d74:	mov	r0, #0
   21d78:	mov	r8, r7
   21d7c:	bl	134a4 <dcngettext@plt>
   21d80:	mov	r5, r0
   21d84:	mov	r0, sl
   21d88:	bl	133d8 <elf_ndxscn@plt>
   21d8c:	ldr	r1, [sp, #240]	; 0xf0
   21d90:	ldr	r2, [r6]
   21d94:	mov	r4, r0
   21d98:	ldr	r0, [fp, #16]
   21d9c:	bl	12e44 <elf_strptr@plt>
   21da0:	mov	r2, r4
   21da4:	mov	r3, r0
   21da8:	ldrd	r0, [r6, #24]
   21dac:	str	r7, [sp, #8]
   21db0:	strd	r0, [sp]
   21db4:	mov	r1, r5
   21db8:	mov	r0, #1
   21dbc:	bl	13204 <__printf_chk@plt>
   21dc0:	mov	r0, sl
   21dc4:	mov	r1, #0
   21dc8:	bl	12f34 <elf_getdata@plt>
   21dcc:	subs	r5, r0, #0
   21dd0:	beq	21eb4 <__assert_fail@plt+0xe9b0>
   21dd4:	mov	r2, r9
   21dd8:	movw	r1, #4816	; 0x12d0
   21ddc:	mov	r0, #0
   21de0:	movt	r1, #4
   21de4:	bl	12d84 <dcgettext@plt>
   21de8:	bl	12fdc <puts@plt>
   21dec:	cmp	r7, #0
   21df0:	ble	21d00 <__assert_fail@plt+0xe7fc>
   21df4:	mov	r7, #0
   21df8:	mov	r0, r5
   21dfc:	mov	r1, r7
   21e00:	add	r2, sp, #392	; 0x188
   21e04:	bl	134e0 <gelf_getlib@plt>
   21e08:	subs	r9, r0, #0
   21e0c:	beq	21ea4 <__assert_fail@plt+0xe9a0>
   21e10:	ldr	r3, [r9, #4]
   21e14:	add	r0, sp, #328	; 0x148
   21e18:	str	r3, [sp, #328]	; 0x148
   21e1c:	bl	131f8 <gmtime@plt>
   21e20:	subs	r4, r0, #0
   21e24:	beq	21ea4 <__assert_fail@plt+0xe9a0>
   21e28:	ldr	r1, [r6, #40]	; 0x28
   21e2c:	ldr	r2, [r9]
   21e30:	ldr	r0, [fp, #16]
   21e34:	bl	12e44 <elf_strptr@plt>
   21e38:	ldr	r2, [r4, #20]
   21e3c:	movw	r1, #4896	; 0x1320
   21e40:	movt	r1, #4
   21e44:	add	r2, r2, #1888	; 0x760
   21e48:	add	r2, r2, #12
   21e4c:	str	r2, [sp]
   21e50:	ldr	ip, [r4, #16]
   21e54:	mov	r2, r7
   21e58:	mov	r3, r0
   21e5c:	mov	r0, #1
   21e60:	add	ip, ip, r0
   21e64:	str	ip, [sp, #4]
   21e68:	ldr	ip, [r4, #12]
   21e6c:	str	ip, [sp, #8]
   21e70:	ldr	ip, [r4, #8]
   21e74:	str	ip, [sp, #12]
   21e78:	ldr	ip, [r4, #4]
   21e7c:	str	ip, [sp, #16]
   21e80:	ldr	ip, [r4]
   21e84:	str	ip, [sp, #20]
   21e88:	ldr	ip, [r9, #8]
   21e8c:	str	ip, [sp, #24]
   21e90:	ldr	ip, [r9, #12]
   21e94:	str	ip, [sp, #28]
   21e98:	ldr	ip, [r9, #16]
   21e9c:	str	ip, [sp, #32]
   21ea0:	bl	13204 <__printf_chk@plt>
   21ea4:	add	r7, r7, #1
   21ea8:	cmp	r8, r7
   21eac:	bgt	21df8 <__assert_fail@plt+0xe8f4>
   21eb0:	b	21d00 <__assert_fail@plt+0xe7fc>
   21eb4:	ldr	r4, [sp, #136]	; 0x88
   21eb8:	ldrb	r3, [r4, #9]
   21ebc:	cmp	r3, #0
   21ec0:	beq	21b4c <__assert_fail@plt+0xe648>
   21ec4:	ldr	r0, [fp, #16]
   21ec8:	add	r1, sp, #224	; 0xe0
   21ecc:	bl	13498 <elf_getshdrstrndx@plt>
   21ed0:	cmp	r0, #0
   21ed4:	blt	22644 <__assert_fail@plt+0xf140>
   21ed8:	movw	r5, #37704	; 0x9348
   21edc:	mov	r6, #0
   21ee0:	movt	r5, #5
   21ee4:	str	r6, [sp, #172]	; 0xac
   21ee8:	str	r5, [sp, #204]	; 0xcc
   21eec:	str	fp, [sp, #128]	; 0x80
   21ef0:	ldr	r7, [sp, #128]	; 0x80
   21ef4:	ldr	r1, [sp, #172]	; 0xac
   21ef8:	ldr	r0, [r7, #16]
   21efc:	bl	13300 <elf_nextscn@plt>
   21f00:	subs	r8, r0, #0
   21f04:	str	r8, [sp, #172]	; 0xac
   21f08:	beq	226f8 <__assert_fail@plt+0xf1f4>
   21f0c:	add	r1, sp, #456	; 0x1c8
   21f10:	bl	12cc4 <gelf_getshdr@plt>
   21f14:	cmp	r0, #0
   21f18:	str	r0, [sp, #168]	; 0xa8
   21f1c:	beq	21ef0 <__assert_fail@plt+0xe9ec>
   21f20:	ldr	r3, [r0, #4]
   21f24:	cmn	r3, #-1879048181	; 0x9000000b
   21f28:	beq	21f44 <__assert_fail@plt+0xea40>
   21f2c:	cmp	r3, #1879048195	; 0x70000003
   21f30:	bne	21ef0 <__assert_fail@plt+0xe9ec>
   21f34:	ldr	r7, [sp, #108]	; 0x6c
   21f38:	ldrh	r3, [r7, #18]
   21f3c:	cmp	r3, #40	; 0x28
   21f40:	bne	21ef0 <__assert_fail@plt+0xe9ec>
   21f44:	mov	r2, #5
   21f48:	movw	r1, #4956	; 0x135c
   21f4c:	mov	r0, #0
   21f50:	movt	r1, #4
   21f54:	bl	12d84 <dcgettext@plt>
   21f58:	mov	r5, r0
   21f5c:	ldr	r0, [sp, #172]	; 0xac
   21f60:	bl	133d8 <elf_ndxscn@plt>
   21f64:	ldr	r9, [sp, #168]	; 0xa8
   21f68:	ldr	r8, [sp, #128]	; 0x80
   21f6c:	ldr	r1, [sp, #224]	; 0xe0
   21f70:	ldr	r2, [r9]
   21f74:	mov	r4, r0
   21f78:	ldr	r0, [r8, #16]
   21f7c:	bl	12e44 <elf_strptr@plt>
   21f80:	ldrd	r6, [r9, #32]
   21f84:	mov	r1, r5
   21f88:	mov	r2, r4
   21f8c:	strd	r6, [sp]
   21f90:	ldrd	r4, [r9, #24]
   21f94:	strd	r4, [sp, #8]
   21f98:	mov	r3, r0
   21f9c:	mov	r0, #1
   21fa0:	bl	13204 <__printf_chk@plt>
   21fa4:	ldr	r0, [sp, #172]	; 0xac
   21fa8:	mov	r1, #0
   21fac:	bl	131bc <elf_rawdata@plt>
   21fb0:	cmp	r0, #0
   21fb4:	str	r0, [sp, #148]	; 0x94
   21fb8:	beq	226f8 <__assert_fail@plt+0xf1f4>
   21fbc:	ldr	r3, [r0, #12]
   21fc0:	cmp	r3, #0
   21fc4:	beq	226f8 <__assert_fail@plt+0xf1f4>
   21fc8:	ldr	r3, [r0]
   21fcc:	add	r4, r3, #1
   21fd0:	ldrb	r3, [r3]
   21fd4:	cmp	r3, #65	; 0x41
   21fd8:	bne	226f8 <__assert_fail@plt+0xf1f4>
   21fdc:	mov	r2, #5
   21fe0:	movw	r1, #5028	; 0x13a4
   21fe4:	mov	r0, #0
   21fe8:	movt	r1, #4
   21fec:	bl	12d84 <dcgettext@plt>
   21ff0:	ldr	sl, [sp, #204]	; 0xcc
   21ff4:	ldr	r1, [sl]
   21ff8:	bl	12c58 <fputs_unlocked@plt>
   21ffc:	ldr	ip, [sp, #148]	; 0x94
   22000:	ldr	r2, [ip]
   22004:	ldr	r3, [ip, #12]
   22008:	add	r3, r2, r3
   2200c:	rsb	r3, r4, r3
   22010:	cmp	r3, #3
   22014:	bls	21ef0 <__assert_fail@plt+0xe9ec>
   22018:	str	r4, [sp, #120]	; 0x78
   2201c:	ldr	r4, [sp, #120]	; 0x78
   22020:	ldr	r5, [sp, #108]	; 0x6c
   22024:	ldr	r0, [r4]
   22028:	str	r0, [sp, #228]	; 0xe4
   2202c:	ldrb	r2, [r5, #5]
   22030:	ldr	r4, [sp, #228]	; 0xe4
   22034:	cmp	r2, #1
   22038:	revne	r4, r4
   2203c:	strne	r4, [sp, #228]	; 0xe4
   22040:	cmp	r4, r3
   22044:	bhi	21ef0 <__assert_fail@plt+0xe9ec>
   22048:	ldr	r6, [sp, #120]	; 0x78
   2204c:	mov	r1, #0
   22050:	ldr	r7, [sp, #120]	; 0x78
   22054:	mov	r2, r4
   22058:	add	r6, r6, #4
   2205c:	str	r6, [sp, #124]	; 0x7c
   22060:	add	r7, r7, r4
   22064:	str	r7, [sp, #96]	; 0x60
   22068:	mov	r0, r6
   2206c:	bl	13270 <memchr@plt>
   22070:	subs	fp, r0, #0
   22074:	beq	21ef0 <__assert_fail@plt+0xe9ec>
   22078:	mov	r2, #5
   2207c:	movw	r1, #5052	; 0x13bc
   22080:	mov	r0, #0
   22084:	movt	r1, #4
   22088:	bl	12d84 <dcgettext@plt>
   2208c:	add	fp, fp, #1
   22090:	ldr	r2, [sp, #124]	; 0x7c
   22094:	mov	r3, r4
   22098:	mov	r1, r0
   2209c:	mov	r0, #1
   220a0:	bl	13204 <__printf_chk@plt>
   220a4:	rsb	r2, r6, fp
   220a8:	cmp	r2, #4
   220ac:	beq	224b4 <__assert_fail@plt+0xefb0>
   220b0:	ldr	r9, [sp, #168]	; 0xa8
   220b4:	ldr	r3, [r9, #4]
   220b8:	cmn	r3, #-1879048181	; 0x9000000b
   220bc:	movne	r9, #0
   220c0:	strne	r9, [sp, #132]	; 0x84
   220c4:	beq	2248c <__assert_fail@plt+0xef88>
   220c8:	ldr	sl, [sp, #96]	; 0x60
   220cc:	cmp	sl, fp
   220d0:	bhi	2210c <__assert_fail@plt+0xec08>
   220d4:	b	2248c <__assert_fail@plt+0xef88>
   220d8:	mov	r2, #5
   220dc:	movw	r1, #5072	; 0x13d0
   220e0:	mov	r0, #0
   220e4:	movt	r1, #4
   220e8:	bl	12d84 <dcgettext@plt>
   220ec:	mov	r2, r5
   220f0:	mov	r3, r4
   220f4:	mov	r1, r0
   220f8:	mov	r0, #1
   220fc:	bl	13204 <__printf_chk@plt>
   22100:	ldr	r4, [sp, #96]	; 0x60
   22104:	cmp	r4, fp
   22108:	bls	2248c <__assert_fail@plt+0xef88>
   2210c:	ldrb	r3, [fp]
   22110:	add	r6, fp, #1
   22114:	mov	r5, #0
   22118:	tst	r3, #128	; 0x80
   2211c:	and	r3, r3, #127	; 0x7f
   22120:	uxtb	r4, r3
   22124:	bne	22700 <__assert_fail@plt+0xf1fc>
   22128:	mov	r5, r3
   2212c:	ldr	r9, [sp, #96]	; 0x60
   22130:	cmp	r9, r6
   22134:	bls	2248c <__assert_fail@plt+0xef88>
   22138:	rsb	r3, fp, r9
   2213c:	cmp	r3, #3
   22140:	ble	2248c <__assert_fail@plt+0xef88>
   22144:	ldr	r0, [r6]
   22148:	ldr	sl, [sp, #112]	; 0x70
   2214c:	ldr	ip, [sp, #108]	; 0x6c
   22150:	str	r0, [sl]
   22154:	ldrb	r2, [ip, #5]
   22158:	ldr	r4, [sp, #240]	; 0xf0
   2215c:	cmp	r2, #1
   22160:	revne	r4, r4
   22164:	strne	r4, [sp, #240]	; 0xf0
   22168:	sub	r2, r4, #1
   2216c:	cmn	r2, #-2147483645	; 0x80000003
   22170:	bhi	2248c <__assert_fail@plt+0xef88>
   22174:	cmp	r3, r4
   22178:	blt	2248c <__assert_fail@plt+0xef88>
   2217c:	cmp	r5, #1
   22180:	add	fp, fp, r4
   22184:	bne	220d8 <__assert_fail@plt+0xebd4>
   22188:	mov	r2, #5
   2218c:	movw	r1, #5088	; 0x13e0
   22190:	mov	r0, #0
   22194:	movt	r1, #4
   22198:	bl	12d84 <dcgettext@plt>
   2219c:	add	r6, r6, #4
   221a0:	mov	r2, r4
   221a4:	mov	r1, r0
   221a8:	mov	r0, r5
   221ac:	bl	13204 <__printf_chk@plt>
   221b0:	cmp	fp, r6
   221b4:	bls	22100 <__assert_fail@plt+0xebfc>
   221b8:	ldr	r7, [sp, #128]	; 0x80
   221bc:	ldr	r9, [sp, #132]	; 0x84
   221c0:	ldr	r8, [sp, #124]	; 0x7c
   221c4:	b	222a8 <__assert_fail@plt+0xeda4>
   221c8:	ldrb	r3, [sl]
   221cc:	add	r2, sl, #1
   221d0:	mov	r1, #0
   221d4:	tst	r3, #128	; 0x80
   221d8:	and	r3, r3, #127	; 0x7f
   221dc:	moveq	sl, r2
   221e0:	uxtb	r0, r3
   221e4:	strd	r0, [sp, #88]	; 0x58
   221e8:	bne	2258c <__assert_fail@plt+0xf088>
   221ec:	cmp	fp, sl
   221f0:	bcc	22100 <__assert_fail@plt+0xebfc>
   221f4:	cmp	r5, #32
   221f8:	beq	2230c <__assert_fail@plt+0xee08>
   221fc:	tst	r5, #1
   22200:	bne	22424 <__assert_fail@plt+0xef20>
   22204:	sub	r3, r5, #4
   22208:	eor	r2, r9, #1
   2220c:	cmp	r3, #1
   22210:	movhi	r3, #0
   22214:	andls	r3, r2, #1
   22218:	cmp	r3, #0
   2221c:	bne	2230c <__assert_fail@plt+0xee08>
   22220:	mov	r6, sl
   22224:	mov	sl, r3
   22228:	ldrd	r0, [sp, #88]	; 0x58
   2222c:	add	r3, sp, #392	; 0x188
   22230:	mov	r2, r4
   22234:	str	r3, [sp, #12]
   22238:	mov	r4, #0
   2223c:	str	r4, [sp, #328]	; 0x148
   22240:	strd	r0, [sp]
   22244:	add	r1, sp, #328	; 0x148
   22248:	mov	r0, r7
   2224c:	str	r1, [sp, #8]
   22250:	mov	r1, r8
   22254:	str	r4, [sp, #392]	; 0x188
   22258:	bl	3b1e8 <__assert_fail@plt+0x27ce4>
   2225c:	ldr	r3, [sp, #328]	; 0x148
   22260:	cmp	r3, r4
   22264:	beq	2236c <__assert_fail@plt+0xee68>
   22268:	cmp	r5, #32
   2226c:	beq	223a0 <__assert_fail@plt+0xee9c>
   22270:	cmp	sl, #0
   22274:	beq	2233c <__assert_fail@plt+0xee38>
   22278:	mov	r2, #5
   2227c:	mov	r0, r4
   22280:	movw	r1, #7676	; 0x1dfc
   22284:	movt	r1, #4
   22288:	bl	12d84 <dcgettext@plt>
   2228c:	ldr	r2, [sp, #328]	; 0x148
   22290:	mov	r3, sl
   22294:	mov	r1, r0
   22298:	mov	r0, #1
   2229c:	bl	13204 <__printf_chk@plt>
   222a0:	cmp	fp, r6
   222a4:	bls	22100 <__assert_fail@plt+0xebfc>
   222a8:	ldrb	r2, [r6]
   222ac:	add	sl, r6, #1
   222b0:	mov	r3, #0
   222b4:	tst	r2, #128	; 0x80
   222b8:	and	r2, r2, #127	; 0x7f
   222bc:	uxtb	r2, r2
   222c0:	moveq	r4, r2
   222c4:	bne	224d8 <__assert_fail@plt+0xefd4>
   222c8:	cmp	fp, sl
   222cc:	mov	r5, r4
   222d0:	bls	22100 <__assert_fail@plt+0xebfc>
   222d4:	cmp	r4, #32
   222d8:	beq	221c8 <__assert_fail@plt+0xecc4>
   222dc:	tst	r4, #1
   222e0:	beq	221c8 <__assert_fail@plt+0xecc4>
   222e4:	cmp	r9, #0
   222e8:	bne	2232c <__assert_fail@plt+0xee28>
   222ec:	sub	r3, r5, #6
   222f0:	cmp	r3, #25
   222f4:	bls	221c8 <__assert_fail@plt+0xecc4>
   222f8:	mov	r0, #0
   222fc:	mov	r1, #0
   22300:	strd	r0, [sp, #88]	; 0x58
   22304:	cmp	r5, #32
   22308:	bls	22204 <__assert_fail@plt+0xed00>
   2230c:	mov	r0, sl
   22310:	mov	r1, #0
   22314:	rsb	r2, sl, fp
   22318:	bl	13270 <memchr@plt>
   2231c:	cmp	r0, #0
   22320:	beq	22100 <__assert_fail@plt+0xebfc>
   22324:	add	r6, r0, #1
   22328:	b	22228 <__assert_fail@plt+0xed24>
   2232c:	mov	r2, #0
   22330:	mov	r3, #0
   22334:	strd	r2, [sp, #88]	; 0x58
   22338:	b	2230c <__assert_fail@plt+0xee08>
   2233c:	ldr	r3, [sp, #392]	; 0x188
   22340:	mov	r0, sl
   22344:	cmp	r3, #0
   22348:	beq	22460 <__assert_fail@plt+0xef5c>
   2234c:	mov	r2, #5
   22350:	movw	r1, #7676	; 0x1dfc
   22354:	movt	r1, #4
   22358:	bl	12d84 <dcgettext@plt>
   2235c:	ldr	r2, [sp, #328]	; 0x148
   22360:	ldr	r3, [sp, #392]	; 0x188
   22364:	mov	r1, r0
   22368:	b	22298 <__assert_fail@plt+0xed94>
   2236c:	cmp	r5, #32
   22370:	beq	223d4 <__assert_fail@plt+0xeed0>
   22374:	cmp	sl, #0
   22378:	beq	22430 <__assert_fail@plt+0xef2c>
   2237c:	mov	r2, #5
   22380:	movw	r1, #7552	; 0x1d80
   22384:	mov	r0, #0
   22388:	movt	r1, #4
   2238c:	bl	12d84 <dcgettext@plt>
   22390:	mov	r2, r5
   22394:	mov	r3, sl
   22398:	mov	r1, r0
   2239c:	b	22298 <__assert_fail@plt+0xed94>
   223a0:	mov	r0, r4
   223a4:	mov	r2, #5
   223a8:	movw	r1, #5104	; 0x13f0
   223ac:	movt	r1, #4
   223b0:	bl	12d84 <dcgettext@plt>
   223b4:	ldrd	r4, [sp, #88]	; 0x58
   223b8:	ldr	r2, [sp, #328]	; 0x148
   223bc:	str	sl, [sp, #8]
   223c0:	strd	r4, [sp]
   223c4:	mov	r1, r0
   223c8:	mov	r0, #1
   223cc:	bl	13204 <__printf_chk@plt>
   223d0:	b	222a0 <__assert_fail@plt+0xed9c>
   223d4:	ldr	ip, [sp, #120]	; 0x78
   223d8:	ldrb	r3, [ip, #4]
   223dc:	cmp	r3, #103	; 0x67
   223e0:	bne	22374 <__assert_fail@plt+0xee70>
   223e4:	ldrb	r3, [ip, #5]
   223e8:	cmp	r3, #110	; 0x6e
   223ec:	bne	22374 <__assert_fail@plt+0xee70>
   223f0:	ldrb	r3, [ip, #6]
   223f4:	cmp	r3, #117	; 0x75
   223f8:	bne	22374 <__assert_fail@plt+0xee70>
   223fc:	ldrb	r3, [ip, #7]
   22400:	cmp	r3, #0
   22404:	bne	22374 <__assert_fail@plt+0xee70>
   22408:	movw	r0, #5140	; 0x1414
   2240c:	movw	r1, #24
   22410:	movt	r0, #4
   22414:	movt	r1, #4
   22418:	movw	r2, #3718	; 0xe86
   2241c:	ldr	r3, [pc, #3604]	; 23238 <__assert_fail@plt+0xfd34>
   22420:	bl	13504 <__assert_fail@plt>
   22424:	cmp	r9, #0
   22428:	beq	22304 <__assert_fail@plt+0xee00>
   2242c:	b	2230c <__assert_fail@plt+0xee08>
   22430:	mov	r0, sl
   22434:	mov	r2, #5
   22438:	movw	r1, #7536	; 0x1d70
   2243c:	movt	r1, #4
   22440:	bl	12d84 <dcgettext@plt>
   22444:	ldrd	r2, [sp, #88]	; 0x58
   22448:	strd	r2, [sp]
   2244c:	mov	r2, r5
   22450:	mov	r1, r0
   22454:	mov	r0, #1
   22458:	bl	13204 <__printf_chk@plt>
   2245c:	b	222a0 <__assert_fail@plt+0xed9c>
   22460:	mov	r2, #5
   22464:	movw	r1, #5124	; 0x1404
   22468:	movt	r1, #4
   2246c:	bl	12d84 <dcgettext@plt>
   22470:	ldrd	r4, [sp, #88]	; 0x58
   22474:	ldr	r2, [sp, #328]	; 0x148
   22478:	strd	r4, [sp]
   2247c:	mov	r1, r0
   22480:	mov	r0, #1
   22484:	bl	13204 <__printf_chk@plt>
   22488:	b	222a0 <__assert_fail@plt+0xed9c>
   2248c:	ldr	r5, [sp, #148]	; 0x94
   22490:	ldr	r6, [sp, #96]	; 0x60
   22494:	ldr	r2, [r5]
   22498:	ldr	r3, [r5, #12]
   2249c:	add	r3, r2, r3
   224a0:	rsb	r3, r6, r3
   224a4:	cmp	r3, #3
   224a8:	bls	21ef0 <__assert_fail@plt+0xe9ec>
   224ac:	str	r6, [sp, #120]	; 0x78
   224b0:	b	2201c <__assert_fail@plt+0xeb18>
   224b4:	movw	r1, #5068	; 0x13cc
   224b8:	ldr	r0, [sp, #124]	; 0x7c
   224bc:	movt	r1, #4
   224c0:	bl	12d30 <memcmp@plt>
   224c4:	cmp	r0, #0
   224c8:	moveq	r8, #1
   224cc:	streq	r8, [sp, #132]	; 0x84
   224d0:	beq	220c8 <__assert_fail@plt+0xebc4>
   224d4:	b	220b0 <__assert_fail@plt+0xebac>
   224d8:	cmp	fp, r6
   224dc:	bls	22784 <__assert_fail@plt+0xf280>
   224e0:	rsb	r1, r6, fp
   224e4:	cmp	r1, #9
   224e8:	movhi	lr, #10
   224ec:	bls	22778 <__assert_fail@plt+0xf274>
   224f0:	ldrb	r1, [r6, #1]
   224f4:	add	sl, r6, #2
   224f8:	and	r4, r1, #127	; 0x7f
   224fc:	tst	r1, #128	; 0x80
   22500:	strne	r7, [sp, #88]	; 0x58
   22504:	uxtb	r4, r4
   22508:	lsr	r1, r4, #25
   2250c:	lsl	r6, r4, #7
   22510:	str	r1, [sp, #188]	; 0xbc
   22514:	movne	r1, #1
   22518:	str	r6, [sp, #184]	; 0xb8
   2251c:	ldrd	r4, [sp, #184]	; 0xb8
   22520:	orr	r4, r4, r2
   22524:	orr	r5, r5, r3
   22528:	movne	r6, r4
   2252c:	movne	r7, r5
   22530:	beq	222c8 <__assert_fail@plt+0xedc4>
   22534:	add	r1, r1, #1
   22538:	cmp	lr, r1
   2253c:	bls	22798 <__assert_fail@plt+0xf294>
   22540:	ldrb	ip, [sl], #1
   22544:	rsb	r0, r1, r1, lsl #3
   22548:	sub	r5, r0, #32
   2254c:	rsb	r4, r0, #32
   22550:	and	r2, ip, #127	; 0x7f
   22554:	tst	ip, #128	; 0x80
   22558:	uxtb	r2, r2
   2255c:	lsl	r5, r2, r5
   22560:	lsl	r0, r2, r0
   22564:	orr	r4, r5, r2, lsr r4
   22568:	str	r0, [sp, #152]	; 0x98
   2256c:	str	r4, [sp, #156]	; 0x9c
   22570:	ldrd	r4, [sp, #152]	; 0x98
   22574:	orr	r6, r6, r4
   22578:	orr	r7, r7, r5
   2257c:	bne	22534 <__assert_fail@plt+0xf030>
   22580:	mov	r4, r6
   22584:	ldr	r7, [sp, #88]	; 0x58
   22588:	b	222c8 <__assert_fail@plt+0xedc4>
   2258c:	rsb	r3, sl, fp
   22590:	cmp	r3, #9
   22594:	movhi	ip, #10
   22598:	bls	22758 <__assert_fail@plt+0xf254>
   2259c:	ldrb	r3, [sl, #1]
   225a0:	add	sl, sl, #2
   225a4:	and	r2, r3, #127	; 0x7f
   225a8:	tst	r3, #128	; 0x80
   225ac:	uxtb	r2, r2
   225b0:	movne	lr, sl
   225b4:	lsr	r6, r2, #25
   225b8:	lsl	r0, r2, #7
   225bc:	str	r6, [sp, #196]	; 0xc4
   225c0:	movne	r6, #1
   225c4:	str	r0, [sp, #192]	; 0xc0
   225c8:	ldrd	r2, [sp, #88]	; 0x58
   225cc:	ldrd	r0, [sp, #192]	; 0xc0
   225d0:	orr	r2, r2, r0
   225d4:	orr	r3, r3, r1
   225d8:	strd	r2, [sp, #88]	; 0x58
   225dc:	beq	221ec <__assert_fail@plt+0xece8>
   225e0:	add	r6, r6, #1
   225e4:	cmp	ip, r6
   225e8:	bls	22800 <__assert_fail@plt+0xf2fc>
   225ec:	ldrb	r0, [lr], #1
   225f0:	rsb	r1, r6, r6, lsl #3
   225f4:	rsb	r3, r1, #32
   225f8:	str	r3, [sp, #220]	; 0xdc
   225fc:	and	r2, r0, #127	; 0x7f
   22600:	sub	sl, r1, #32
   22604:	tst	r0, #128	; 0x80
   22608:	ldr	r0, [sp, #220]	; 0xdc
   2260c:	uxtb	r2, r2
   22610:	lsl	sl, r2, sl
   22614:	lsl	r1, r2, r1
   22618:	orr	sl, sl, r2, lsr r0
   2261c:	str	r1, [sp, #160]	; 0xa0
   22620:	str	sl, [sp, #164]	; 0xa4
   22624:	ldrd	r2, [sp, #88]	; 0x58
   22628:	ldrd	r0, [sp, #160]	; 0xa0
   2262c:	orr	r2, r2, r0
   22630:	orr	r3, r3, r1
   22634:	strd	r2, [sp, #88]	; 0x58
   22638:	bne	225e0 <__assert_fail@plt+0xf0dc>
   2263c:	mov	sl, lr
   22640:	b	221ec <__assert_fail@plt+0xece8>
   22644:	mov	r2, #5
   22648:	movw	r1, #53868	; 0xd26c
   2264c:	mov	r0, #0
   22650:	movt	r1, #3
   22654:	bl	12d84 <dcgettext@plt>
   22658:	mov	r1, #0
   2265c:	mov	r2, r0
   22660:	mov	r0, #1
   22664:	bl	12f70 <error@plt>
   22668:	ldr	r0, [fp, #16]
   2266c:	add	r1, sp, #392	; 0x188
   22670:	bl	13498 <elf_getshdrstrndx@plt>
   22674:	cmp	r0, #0
   22678:	blt	22644 <__assert_fail@plt+0xf140>
   2267c:	mov	r6, #0
   22680:	mov	r4, #32
   22684:	mov	r5, #0
   22688:	mov	r1, r6
   2268c:	ldr	r0, [fp, #16]
   22690:	bl	13300 <elf_nextscn@plt>
   22694:	subs	r6, r0, #0
   22698:	beq	21bcc <__assert_fail@plt+0xe6c8>
   2269c:	add	r1, sp, #456	; 0x1c8
   226a0:	bl	12cc4 <gelf_getshdr@plt>
   226a4:	cmp	r0, #0
   226a8:	beq	22688 <__assert_fail@plt+0xf184>
   226ac:	ldr	r3, [sp, #460]	; 0x1cc
   226b0:	cmp	r3, #1
   226b4:	bne	22688 <__assert_fail@plt+0xf184>
   226b8:	add	ip, sp, #512	; 0x200
   226bc:	ldrd	r2, [ip, #-48]	; 0xffffffd0
   226c0:	and	r2, r2, r4
   226c4:	and	r3, r3, r5
   226c8:	orrs	r0, r2, r3
   226cc:	beq	22688 <__assert_fail@plt+0xf184>
   226d0:	ldr	r2, [sp, #456]	; 0x1c8
   226d4:	ldr	r0, [fp, #16]
   226d8:	ldr	r1, [sp, #392]	; 0x188
   226dc:	bl	12e44 <elf_strptr@plt>
   226e0:	subs	r2, r0, #0
   226e4:	beq	22688 <__assert_fail@plt+0xf184>
   226e8:	mov	r0, r6
   226ec:	add	r1, sp, #456	; 0x1c8
   226f0:	bl	1c1c8 <__assert_fail@plt+0x8cc4>
   226f4:	b	22688 <__assert_fail@plt+0xf184>
   226f8:	ldr	fp, [sp, #128]	; 0x80
   226fc:	b	21b4c <__assert_fail@plt+0xe648>
   22700:	ldr	ip, [sp, #96]	; 0x60
   22704:	cmp	fp, ip
   22708:	bcs	227a8 <__assert_fail@plt+0xf2a4>
   2270c:	rsb	r7, fp, ip
   22710:	cmp	r7, #9
   22714:	movhi	r7, #10
   22718:	bls	227a0 <__assert_fail@plt+0xf29c>
   2271c:	ldrb	r3, [fp, #1]
   22720:	add	r6, fp, #2
   22724:	and	r2, r3, #127	; 0x7f
   22728:	tst	r3, #128	; 0x80
   2272c:	uxtb	r2, r2
   22730:	lsl	r8, r2, #7
   22734:	lsr	r1, r2, #25
   22738:	str	r8, [sp, #176]	; 0xb0
   2273c:	str	r1, [sp, #180]	; 0xb4
   22740:	ldrd	r8, [sp, #176]	; 0xb0
   22744:	orr	r8, r8, r4
   22748:	orr	r9, r9, r5
   2274c:	bne	227b0 <__assert_fail@plt+0xf2ac>
   22750:	mov	r5, r8
   22754:	b	2212c <__assert_fail@plt+0xec28>
   22758:	cmp	r3, #1
   2275c:	movhi	ip, r3
   22760:	bhi	2259c <__assert_fail@plt+0xf098>
   22764:	mvn	r0, #0
   22768:	mvn	r1, #0
   2276c:	mov	sl, r2
   22770:	strd	r0, [sp, #88]	; 0x58
   22774:	b	221ec <__assert_fail@plt+0xece8>
   22778:	cmp	r1, #1
   2277c:	movhi	lr, r1
   22780:	bhi	224f0 <__assert_fail@plt+0xefec>
   22784:	cmp	fp, sl
   22788:	bls	22100 <__assert_fail@plt+0xebfc>
   2278c:	mvn	r4, #0
   22790:	mov	r5, r4
   22794:	b	222e4 <__assert_fail@plt+0xede0>
   22798:	ldr	r7, [sp, #88]	; 0x58
   2279c:	b	22784 <__assert_fail@plt+0xf280>
   227a0:	cmp	r7, #1
   227a4:	bhi	2271c <__assert_fail@plt+0xf218>
   227a8:	mvn	r5, #0
   227ac:	b	2212c <__assert_fail@plt+0xec28>
   227b0:	ldrd	r2, [sp, #208]	; 0xd0
   227b4:	mov	r4, #1
   227b8:	add	r4, r4, #1
   227bc:	cmp	r4, r7
   227c0:	bcs	22814 <__assert_fail@plt+0xf310>
   227c4:	ldrb	lr, [r6], #1
   227c8:	rsb	ip, r4, r4, lsl #3
   227cc:	sub	sl, ip, #32
   227d0:	rsb	r5, ip, #32
   227d4:	and	r0, lr, #127	; 0x7f
   227d8:	tst	lr, #128	; 0x80
   227dc:	uxtb	r0, r0
   227e0:	lsl	r3, r0, sl
   227e4:	lsl	r2, r0, ip
   227e8:	orr	r3, r3, r0, lsr r5
   227ec:	orr	r8, r8, r2
   227f0:	orr	r9, r9, r3
   227f4:	bne	227b8 <__assert_fail@plt+0xf2b4>
   227f8:	strd	r2, [sp, #208]	; 0xd0
   227fc:	b	22750 <__assert_fail@plt+0xf24c>
   22800:	mvn	r2, #0
   22804:	mvn	r3, #0
   22808:	mov	sl, lr
   2280c:	strd	r2, [sp, #88]	; 0x58
   22810:	b	221ec <__assert_fail@plt+0xece8>
   22814:	strd	r2, [sp, #208]	; 0xd0
   22818:	mvn	r5, #0
   2281c:	b	2212c <__assert_fail@plt+0xec28>
   22820:	ldr	r8, [r3, #44]	; 0x2c
   22824:	cmp	r8, #0
   22828:	bne	22900 <__assert_fail@plt+0xf3fc>
   2282c:	ldr	r3, [r3, #124]	; 0x7c
   22830:	cmp	r3, #0
   22834:	beq	21bbc <__assert_fail@plt+0xe6b8>
   22838:	ldr	r5, [sp, #108]	; 0x6c
   2283c:	add	r6, sp, #456	; 0x1c8
   22840:	ldr	sl, [sp, #140]	; 0x8c
   22844:	add	r7, r5, #16
   22848:	b	22860 <__assert_fail@plt+0xf35c>
   2284c:	ldr	r9, [sp, #136]	; 0x88
   22850:	add	r8, r8, #1
   22854:	ldr	r3, [r9, #124]	; 0x7c
   22858:	cmp	r8, r3
   2285c:	bcs	21bbc <__assert_fail@plt+0xe6b8>
   22860:	ldr	r0, [sl, #16]
   22864:	mov	r1, r8
   22868:	mov	r2, r6
   2286c:	bl	12dd8 <gelf_getphdr@plt>
   22870:	subs	r9, r0, #0
   22874:	beq	2284c <__assert_fail@plt+0xf348>
   22878:	ldr	r3, [r9]
   2287c:	cmp	r3, #4
   22880:	bne	2284c <__assert_fail@plt+0xf348>
   22884:	mov	r2, #5
   22888:	movw	r1, #7628	; 0x1dcc
   2288c:	mov	r0, #0
   22890:	movt	r1, #4
   22894:	bl	12d84 <dcgettext@plt>
   22898:	ldrd	r4, [r9, #8]
   2289c:	ldrd	r2, [r9, #32]
   228a0:	strd	r4, [sp]
   228a4:	mov	r1, r0
   228a8:	mov	r0, #1
   228ac:	bl	13204 <__printf_chk@plt>
   228b0:	ldrd	r2, [r9, #48]	; 0x30
   228b4:	ldrd	r4, [r9, #8]
   228b8:	ldr	r1, [r9, #32]
   228bc:	cmp	r3, #0
   228c0:	cmpeq	r2, #8
   228c4:	ldr	r0, [sl, #16]
   228c8:	movne	r3, #19
   228cc:	moveq	r3, #26
   228d0:	mov	r2, r4
   228d4:	str	r3, [sp, #4]
   228d8:	mov	r3, r5
   228dc:	str	r1, [sp]
   228e0:	bl	13318 <elf_getdata_rawchunk@plt>
   228e4:	mov	r2, r4
   228e8:	mov	r3, r5
   228ec:	mov	r1, r7
   228f0:	str	r0, [sp]
   228f4:	mov	r0, sl
   228f8:	bl	1fd5c <__assert_fail@plt+0xc858>
   228fc:	b	2284c <__assert_fail@plt+0xf348>
   22900:	ldr	r6, [sp, #140]	; 0x8c
   22904:	add	r1, sp, #392	; 0x188
   22908:	ldr	r0, [r6, #16]
   2290c:	bl	13498 <elf_getshdrstrndx@plt>
   22910:	cmp	r0, #0
   22914:	blt	22644 <__assert_fail@plt+0xf140>
   22918:	ldr	r7, [sp, #108]	; 0x6c
   2291c:	mov	r5, #0
   22920:	ldr	r8, [sp, #140]	; 0x8c
   22924:	add	r6, r7, #16
   22928:	mov	r7, r5
   2292c:	mov	r1, r7
   22930:	ldr	r0, [r8, #16]
   22934:	bl	13300 <elf_nextscn@plt>
   22938:	subs	r7, r0, #0
   2293c:	beq	21bbc <__assert_fail@plt+0xe6b8>
   22940:	add	r1, sp, #456	; 0x1c8
   22944:	bl	12cc4 <gelf_getshdr@plt>
   22948:	subs	r9, r0, #0
   2294c:	beq	2292c <__assert_fail@plt+0xf428>
   22950:	ldr	r3, [r9, #4]
   22954:	cmp	r3, #7
   22958:	bne	2292c <__assert_fail@plt+0xf428>
   2295c:	mov	r2, #5
   22960:	movw	r1, #7568	; 0x1d90
   22964:	mov	r0, #0
   22968:	movt	r1, #4
   2296c:	bl	12d84 <dcgettext@plt>
   22970:	mov	r4, r0
   22974:	mov	r0, r7
   22978:	bl	133d8 <elf_ndxscn@plt>
   2297c:	ldr	r1, [sp, #392]	; 0x188
   22980:	ldr	r2, [r9]
   22984:	mov	sl, r0
   22988:	ldr	r0, [r8, #16]
   2298c:	bl	12e44 <elf_strptr@plt>
   22990:	mov	r1, r4
   22994:	ldrd	r4, [r9, #32]
   22998:	mov	r2, sl
   2299c:	strd	r4, [sp]
   229a0:	ldrd	r4, [r9, #24]
   229a4:	strd	r4, [sp, #8]
   229a8:	mov	r3, r0
   229ac:	mov	r0, #1
   229b0:	bl	13204 <__printf_chk@plt>
   229b4:	mov	r0, r7
   229b8:	mov	r1, #0
   229bc:	ldrd	r4, [r9, #24]
   229c0:	bl	12f34 <elf_getdata@plt>
   229c4:	mov	r1, r6
   229c8:	mov	r2, r4
   229cc:	mov	r3, r5
   229d0:	str	r0, [sp]
   229d4:	mov	r0, r8
   229d8:	bl	1fd5c <__assert_fail@plt+0xc858>
   229dc:	b	2292c <__assert_fail@plt+0xf428>
   229e0:	mov	sl, #0
   229e4:	mov	r1, sl
   229e8:	ldr	r0, [fp, #16]
   229ec:	bl	13300 <elf_nextscn@plt>
   229f0:	subs	sl, r0, #0
   229f4:	beq	21ad4 <__assert_fail@plt+0xe5d0>
   229f8:	add	r4, sp, #328	; 0x148
   229fc:	mov	r1, r4
   22a00:	bl	12cc4 <gelf_getshdr@plt>
   22a04:	subs	r9, r0, #0
   22a08:	beq	229e4 <__assert_fail@plt+0xf4e0>
   22a0c:	ldr	r3, [r9, #4]
   22a10:	cmp	r3, #17
   22a14:	bne	229e4 <__assert_fail@plt+0xf4e0>
   22a18:	ldrd	r2, [r9, #8]
   22a1c:	mov	r0, #2048	; 0x800
   22a20:	mov	r1, #0
   22a24:	and	r2, r2, r0
   22a28:	and	r3, r3, r1
   22a2c:	orrs	ip, r2, r3
   22a30:	beq	22a60 <__assert_fail@plt+0xf55c>
   22a34:	mov	r1, #0
   22a38:	mov	r0, sl
   22a3c:	mov	r2, r1
   22a40:	bl	12e8c <elf_compress@plt>
   22a44:	cmp	r0, #0
   22a48:	blt	22c68 <__assert_fail@plt+0xf764>
   22a4c:	mov	r1, r4
   22a50:	mov	r0, sl
   22a54:	bl	12cc4 <gelf_getshdr@plt>
   22a58:	subs	r9, r0, #0
   22a5c:	beq	22c28 <__assert_fail@plt+0xf724>
   22a60:	mov	r1, #0
   22a64:	mov	r0, sl
   22a68:	bl	12f34 <elf_getdata@plt>
   22a6c:	ldr	r1, [r9, #40]	; 0x28
   22a70:	mov	r4, r0
   22a74:	ldr	r0, [fp, #16]
   22a78:	bl	133e4 <elf_getscn@plt>
   22a7c:	add	r1, sp, #392	; 0x188
   22a80:	mov	r6, r0
   22a84:	bl	12cc4 <gelf_getshdr@plt>
   22a88:	mov	r1, #0
   22a8c:	mov	r5, r0
   22a90:	mov	r0, r6
   22a94:	bl	12f34 <elf_getdata@plt>
   22a98:	cmp	r4, #0
   22a9c:	mov	r8, r0
   22aa0:	beq	229e4 <__assert_fail@plt+0xf4e0>
   22aa4:	ldr	r3, [r4, #12]
   22aa8:	cmp	r3, #3
   22aac:	bls	229e4 <__assert_fail@plt+0xf4e0>
   22ab0:	cmp	r0, #0
   22ab4:	cmpne	r5, #0
   22ab8:	movne	r7, #0
   22abc:	moveq	r7, #1
   22ac0:	beq	229e4 <__assert_fail@plt+0xf4e0>
   22ac4:	ldr	r0, [fp, #16]
   22ac8:	add	r1, sp, #228	; 0xe4
   22acc:	bl	13498 <elf_getshdrstrndx@plt>
   22ad0:	cmp	r0, #0
   22ad4:	blt	23d8c <__assert_fail@plt+0x10888>
   22ad8:	mov	r0, r8
   22adc:	ldr	r1, [r9, #44]	; 0x2c
   22ae0:	add	r2, sp, #240	; 0xf0
   22ae4:	ldr	r6, [r4]
   22ae8:	bl	12e14 <gelf_getsym@plt>
   22aec:	ldr	r3, [r6]
   22af0:	mov	r8, r0
   22af4:	ands	r0, r3, #1
   22af8:	ldr	r3, [r4, #12]
   22afc:	beq	23d60 <__assert_fail@plt+0x1085c>
   22b00:	lsr	r3, r3, #2
   22b04:	mov	r0, r7
   22b08:	mov	r2, #5
   22b0c:	movw	r1, #3292	; 0xcdc
   22b10:	str	r2, [sp]
   22b14:	movt	r1, #4
   22b18:	movw	r2, #3368	; 0xd28
   22b1c:	sub	r3, r3, #1
   22b20:	movt	r2, #4
   22b24:	bl	134a4 <dcngettext@plt>
   22b28:	mov	r7, r0
   22b2c:	mov	r0, sl
   22b30:	bl	133d8 <elf_ndxscn@plt>
   22b34:	ldr	r2, [r9]
   22b38:	ldr	r1, [sp, #228]	; 0xe4
   22b3c:	str	r0, [sp, #88]	; 0x58
   22b40:	ldr	r0, [fp, #16]
   22b44:	bl	12e44 <elf_strptr@plt>
   22b48:	cmp	r8, #0
   22b4c:	mov	r9, r0
   22b50:	beq	23d48 <__assert_fail@plt+0x10844>
   22b54:	ldr	r1, [r5, #40]	; 0x28
   22b58:	ldr	r2, [r8]
   22b5c:	ldr	r0, [fp, #16]
   22b60:	bl	12e44 <elf_strptr@plt>
   22b64:	cmp	r0, #0
   22b68:	beq	23d48 <__assert_fail@plt+0x10844>
   22b6c:	str	r0, [sp]
   22b70:	mov	r3, r9
   22b74:	ldr	ip, [r4, #12]
   22b78:	mov	r1, r7
   22b7c:	ldr	r2, [sp, #88]	; 0x58
   22b80:	mov	r0, #1
   22b84:	lsr	ip, ip, #2
   22b88:	sub	ip, ip, #1
   22b8c:	str	ip, [sp, #4]
   22b90:	bl	13204 <__printf_chk@plt>
   22b94:	ldr	r3, [r4, #12]
   22b98:	cmp	r3, #7
   22b9c:	bls	229e4 <__assert_fail@plt+0xf4e0>
   22ba0:	add	r7, sp, #456	; 0x1c8
   22ba4:	mov	r5, #1
   22ba8:	b	22bec <__assert_fail@plt+0xf6e8>
   22bac:	ldr	r2, [r0]
   22bb0:	ldr	r1, [sp, #228]	; 0xe4
   22bb4:	ldr	r0, [fp, #16]
   22bb8:	bl	12e44 <elf_strptr@plt>
   22bbc:	cmp	r0, #0
   22bc0:	beq	22c0c <__assert_fail@plt+0xf708>
   22bc4:	mov	r3, r0
   22bc8:	mov	r0, #1
   22bcc:	mov	r2, r8
   22bd0:	movw	r1, #3628	; 0xe2c
   22bd4:	movt	r1, #4
   22bd8:	add	r5, r5, r0
   22bdc:	bl	13204 <__printf_chk@plt>
   22be0:	ldr	r3, [r4, #12]
   22be4:	cmp	r5, r3, lsr #2
   22be8:	bcs	229e4 <__assert_fail@plt+0xf4e0>
   22bec:	ldr	r1, [r6, #4]
   22bf0:	ldr	r0, [fp, #16]
   22bf4:	bl	133e4 <elf_getscn@plt>
   22bf8:	mov	r1, r7
   22bfc:	bl	12cc4 <gelf_getshdr@plt>
   22c00:	ldr	r8, [r6, #4]!
   22c04:	cmp	r0, #0
   22c08:	bne	22bac <__assert_fail@plt+0xf6a8>
   22c0c:	movw	r1, #3608	; 0xe18
   22c10:	mov	r0, #0
   22c14:	movt	r1, #4
   22c18:	mov	r2, #5
   22c1c:	bl	12d84 <dcgettext@plt>
   22c20:	mov	r3, r0
   22c24:	b	22bc8 <__assert_fail@plt+0xf6c4>
   22c28:	mov	r2, #5
   22c2c:	movw	r1, #53964	; 0xd2cc
   22c30:	movt	r1, #3
   22c34:	bl	12d84 <dcgettext@plt>
   22c38:	mov	r5, r0
   22c3c:	mov	r0, sl
   22c40:	bl	133d8 <elf_ndxscn@plt>
   22c44:	mov	r4, r0
   22c48:	mvn	r0, #0
   22c4c:	bl	130a8 <elf_errmsg@plt>
   22c50:	mov	r2, r5
   22c54:	mov	r3, r4
   22c58:	mov	r1, r9
   22c5c:	str	r0, [sp]
   22c60:	mov	r0, #1
   22c64:	bl	12f70 <error@plt>
   22c68:	mov	r2, #5
   22c6c:	movw	r1, #53916	; 0xd29c
   22c70:	mov	r0, #0
   22c74:	movt	r1, #3
   22c78:	bl	12d84 <dcgettext@plt>
   22c7c:	mov	r5, r0
   22c80:	mov	r0, sl
   22c84:	bl	133d8 <elf_ndxscn@plt>
   22c88:	mov	r2, r5
   22c8c:	movw	r1, #53944	; 0xd2b8
   22c90:	movt	r1, #3
   22c94:	mov	r3, r0
   22c98:	mov	r0, #1
   22c9c:	bl	13204 <__printf_chk@plt>
   22ca0:	b	22a4c <__assert_fail@plt+0xf548>
   22ca4:	mov	r0, fp
   22ca8:	mov	r1, #11
   22cac:	bl	14510 <__assert_fail@plt+0x100c>
   22cb0:	ldr	r8, [sp, #136]	; 0x88
   22cb4:	ldrb	r3, [r8, #5]
   22cb8:	cmp	r3, #0
   22cbc:	beq	21b2c <__assert_fail@plt+0xe628>
   22cc0:	mov	sl, #0
   22cc4:	str	sl, [sp, #88]	; 0x58
   22cc8:	ldr	r1, [sp, #88]	; 0x58
   22ccc:	ldr	r0, [fp, #16]
   22cd0:	bl	13300 <elf_nextscn@plt>
   22cd4:	subs	r6, r0, #0
   22cd8:	str	r6, [sp, #88]	; 0x58
   22cdc:	beq	21b2c <__assert_fail@plt+0xe628>
   22ce0:	add	r1, sp, #392	; 0x188
   22ce4:	bl	12cc4 <gelf_getshdr@plt>
   22ce8:	subs	r4, r0, #0
   22cec:	beq	22cc8 <__assert_fail@plt+0xf7c4>
   22cf0:	ldr	r3, [r4, #4]
   22cf4:	cmn	r3, #-1879048190	; 0x90000002
   22cf8:	beq	23aa4 <__assert_fail@plt+0x105a0>
   22cfc:	cmn	r3, #-1879048189	; 0x90000003
   22d00:	beq	237c8 <__assert_fail@plt+0x102c4>
   22d04:	cmn	r3, #-1879048191	; 0x90000001
   22d08:	bne	22cc8 <__assert_fail@plt+0xf7c4>
   22d0c:	mov	r2, r4
   22d10:	add	r0, fp, #16
   22d14:	ldr	r1, [sp, #88]	; 0x58
   22d18:	bl	1b94c <__assert_fail@plt+0x8448>
   22d1c:	b	22cc8 <__assert_fail@plt+0xf7c4>
   22d20:	mov	r0, fp
   22d24:	bl	1afb8 <__assert_fail@plt+0x7ab4>
   22d28:	b	21b0c <__assert_fail@plt+0xe608>
   22d2c:	ldr	r6, [sp, #108]	; 0x6c
   22d30:	mov	r4, #0
   22d34:	add	r5, r6, #16
   22d38:	ldr	r6, [sp, #140]	; 0x8c
   22d3c:	mov	r1, r4
   22d40:	ldr	r0, [r6, #16]
   22d44:	bl	13300 <elf_nextscn@plt>
   22d48:	subs	r4, r0, #0
   22d4c:	beq	21afc <__assert_fail@plt+0xe5f8>
   22d50:	add	r1, sp, #456	; 0x1c8
   22d54:	bl	12cc4 <gelf_getshdr@plt>
   22d58:	subs	r3, r0, #0
   22d5c:	beq	22d3c <__assert_fail@plt+0xf838>
   22d60:	ldr	r2, [r3, #4]
   22d64:	cmp	r2, #9
   22d68:	beq	2307c <__assert_fail@plt+0xfb78>
   22d6c:	cmp	r2, #4
   22d70:	bne	22d3c <__assert_fail@plt+0xf838>
   22d74:	mov	r0, r6
   22d78:	mov	r1, r5
   22d7c:	mov	r2, r4
   22d80:	bl	1a458 <__assert_fail@plt+0x6f54>
   22d84:	b	22d3c <__assert_fail@plt+0xf838>
   22d88:	ldr	r3, [r3, #124]	; 0x7c
   22d8c:	cmp	r3, #0
   22d90:	beq	21aec <__assert_fail@plt+0xe5e8>
   22d94:	add	r5, sp, #328	; 0x148
   22d98:	mov	r4, #0
   22d9c:	ldr	r6, [sp, #136]	; 0x88
   22da0:	b	22db4 <__assert_fail@plt+0xf8b0>
   22da4:	ldr	r3, [r6, #124]	; 0x7c
   22da8:	add	r4, r4, #1
   22dac:	cmp	r4, r3
   22db0:	bcs	21aec <__assert_fail@plt+0xe5e8>
   22db4:	ldr	r0, [fp, #16]
   22db8:	mov	r1, r4
   22dbc:	mov	r2, r5
   22dc0:	bl	12dd8 <gelf_getphdr@plt>
   22dc4:	cmp	r0, #0
   22dc8:	beq	22da4 <__assert_fail@plt+0xf8a0>
   22dcc:	ldr	r7, [r0]
   22dd0:	cmp	r7, #2
   22dd4:	bne	22da4 <__assert_fail@plt+0xf8a0>
   22dd8:	mov	r3, r0
   22ddc:	ldr	r0, [fp, #16]
   22de0:	ldrd	r2, [r3, #8]
   22de4:	bl	12fa0 <gelf_offscn@plt>
   22de8:	add	r1, sp, #392	; 0x188
   22dec:	mov	r6, r0
   22df0:	bl	12cc4 <gelf_getshdr@plt>
   22df4:	subs	r4, r0, #0
   22df8:	beq	21aec <__assert_fail@plt+0xe5e8>
   22dfc:	ldr	r3, [r4, #4]
   22e00:	cmp	r3, #6
   22e04:	bne	21aec <__assert_fail@plt+0xe5e8>
   22e08:	ldr	r0, [fp, #16]
   22e0c:	bl	12e38 <gelf_getclass@plt>
   22e10:	mov	r1, #0
   22e14:	mov	r5, r0
   22e18:	mov	r0, r6
   22e1c:	bl	12f34 <elf_getdata@plt>
   22e20:	cmp	r0, #0
   22e24:	str	r0, [sp, #88]	; 0x58
   22e28:	beq	21aec <__assert_fail@plt+0xe5e8>
   22e2c:	ldr	r0, [fp, #16]
   22e30:	add	r1, sp, #228	; 0xe4
   22e34:	bl	13498 <elf_getshdrstrndx@plt>
   22e38:	cmp	r0, #0
   22e3c:	blt	22644 <__assert_fail@plt+0xf140>
   22e40:	mov	r2, #1
   22e44:	mov	r1, r7
   22e48:	mov	r3, r2
   22e4c:	ldr	r0, [fp, #16]
   22e50:	bl	12f64 <gelf_fsize@plt>
   22e54:	ldr	r1, [r4, #40]	; 0x28
   22e58:	mov	r7, r0
   22e5c:	ldr	r0, [fp, #16]
   22e60:	bl	133e4 <elf_getscn@plt>
   22e64:	add	r1, sp, #456	; 0x1c8
   22e68:	bl	12cc4 <gelf_getshdr@plt>
   22e6c:	subs	r8, r0, #0
   22e70:	beq	23fbc <__assert_fail@plt+0x10ab8>
   22e74:	ldrd	r0, [r4, #32]
   22e78:	mov	r2, r7
   22e7c:	mov	r3, #0
   22e80:	mov	r6, #5
   22e84:	bl	3bba0 <__assert_fail@plt+0x2869c>
   22e88:	cmp	r5, #1
   22e8c:	str	r6, [sp]
   22e90:	movw	r1, #3640	; 0xe38
   22e94:	movw	r2, #3740	; 0xe9c
   22e98:	movt	r1, #4
   22e9c:	movt	r2, #4
   22ea0:	movne	ip, #18
   22ea4:	moveq	ip, #10
   22ea8:	mov	r3, r0
   22eac:	mov	r0, #0
   22eb0:	str	ip, [sp, #84]	; 0x54
   22eb4:	bl	134a4 <dcngettext@plt>
   22eb8:	mov	r3, #0
   22ebc:	mov	r2, r7
   22ec0:	str	r0, [sp, #120]	; 0x78
   22ec4:	ldrd	r0, [r4, #32]
   22ec8:	bl	3bba0 <__assert_fail@plt+0x2869c>
   22ecc:	ldr	r2, [r8]
   22ed0:	ldrd	r8, [r4, #16]
   22ed4:	ldr	r1, [sp, #228]	; 0xe4
   22ed8:	ldr	sl, [r4, #40]	; 0x28
   22edc:	strd	r8, [sp, #96]	; 0x60
   22ee0:	ldrd	r8, [r4, #24]
   22ee4:	strd	r8, [sp, #112]	; 0x70
   22ee8:	movw	r8, #37704	; 0x9348
   22eec:	movt	r8, #5
   22ef0:	str	r0, [sp, #124]	; 0x7c
   22ef4:	ldr	r0, [fp, #16]
   22ef8:	bl	12e44 <elf_strptr@plt>
   22efc:	ldrd	r2, [sp, #96]	; 0x60
   22f00:	ldr	ip, [sp, #84]	; 0x54
   22f04:	ldr	r1, [sp, #120]	; 0x78
   22f08:	strd	r2, [sp]
   22f0c:	ldrd	r2, [sp, #112]	; 0x70
   22f10:	str	sl, [sp, #16]
   22f14:	strd	r2, [sp, #8]
   22f18:	mov	r3, ip
   22f1c:	ldr	r2, [sp, #124]	; 0x7c
   22f20:	str	r0, [sp, #20]
   22f24:	mov	r0, #1
   22f28:	bl	13204 <__printf_chk@plt>
   22f2c:	mov	r2, r6
   22f30:	movw	r1, #3844	; 0xf04
   22f34:	mov	r0, #0
   22f38:	movt	r1, #4
   22f3c:	bl	12d84 <dcgettext@plt>
   22f40:	ldr	r1, [r8]
   22f44:	bl	12c58 <fputs_unlocked@plt>
   22f48:	mov	r3, #0
   22f4c:	ldrd	r0, [r4, #32]
   22f50:	mov	r2, r7
   22f54:	bl	3bba0 <__assert_fail@plt+0x2869c>
   22f58:	orrs	r3, r0, r1
   22f5c:	beq	21aec <__assert_fail@plt+0xe5e8>
   22f60:	ldr	sl, [pc, #724]	; 2323c <__assert_fail@plt+0xfd38>
   22f64:	mov	r9, #0
   22f68:	add	r6, sp, #240	; 0xf0
   22f6c:	str	r6, [sp, #112]	; 0x70
   22f70:	ldr	r0, [sp, #88]	; 0x58
   22f74:	mov	r1, r9
   22f78:	ldr	r2, [sp, #112]	; 0x70
   22f7c:	bl	13360 <gelf_getdyn@plt>
   22f80:	subs	r6, r0, #0
   22f84:	beq	21aec <__assert_fail@plt+0xe5e8>
   22f88:	ldrd	r2, [r6]
   22f8c:	add	r1, sp, #540	; 0x21c
   22f90:	mov	r0, fp
   22f94:	str	r1, [sp]
   22f98:	mov	r1, #64	; 0x40
   22f9c:	str	r1, [sp, #4]
   22fa0:	bl	39338 <__assert_fail@plt+0x25e34>
   22fa4:	movw	r1, #3872	; 0xf20
   22fa8:	movt	r1, #4
   22fac:	mov	r2, r0
   22fb0:	mov	r0, #1
   22fb4:	bl	13204 <__printf_chk@plt>
   22fb8:	ldrd	r2, [r6]
   22fbc:	cmp	r2, #29
   22fc0:	sbcs	ip, r3, #0
   22fc4:	blt	23f5c <__assert_fail@plt+0x10a58>
   22fc8:	movw	r0, #65021	; 0xfdfd
   22fcc:	movt	r0, #28671	; 0x6fff
   22fd0:	mov	r1, #0
   22fd4:	cmp	r3, r1
   22fd8:	cmpeq	r2, r0
   22fdc:	beq	23f28 <__assert_fail@plt+0x10a24>
   22fe0:	cmp	r0, r2
   22fe4:	sbcs	ip, r1, r3
   22fe8:	blt	23eb8 <__assert_fail@plt+0x109b4>
   22fec:	movw	r0, #65015	; 0xfdf7
   22ff0:	movt	r0, #28671	; 0x6fff
   22ff4:	mov	r1, #0
   22ff8:	cmp	r0, r2
   22ffc:	sbcs	ip, r1, r3
   23000:	blt	23e7c <__assert_fail@plt+0x10978>
   23004:	movw	r0, #65014	; 0xfdf6
   23008:	movt	r0, #28671	; 0x6fff
   2300c:	mov	r1, #0
   23010:	cmp	r2, r0
   23014:	sbcs	ip, r3, r1
   23018:	bge	23e54 <__assert_fail@plt+0x10950>
   2301c:	cmp	r3, #0
   23020:	cmpeq	r2, #29
   23024:	beq	23e04 <__assert_fail@plt+0x10900>
   23028:	cmp	r3, #0
   2302c:	cmpeq	r2, #30
   23030:	ldreq	r1, [pc, #520]	; 23240 <__assert_fail@plt+0xfd3c>
   23034:	moveq	r0, #5
   23038:	bne	23ddc <__assert_fail@plt+0x108d8>
   2303c:	ldrd	r2, [r6, #8]
   23040:	str	r0, [sp, #4]
   23044:	mov	r0, r5
   23048:	str	r1, [sp]
   2304c:	bl	14394 <__assert_fail@plt+0xe90>
   23050:	mov	r2, r7
   23054:	mov	r3, #0
   23058:	ldrd	r0, [r4, #32]
   2305c:	add	r9, r9, #1
   23060:	bl	3bba0 <__assert_fail@plt+0x2869c>
   23064:	mov	r3, #0
   23068:	mov	r2, r9
   2306c:	cmp	r3, r1
   23070:	cmpeq	r2, r0
   23074:	bcc	22f70 <__assert_fail@plt+0xfa6c>
   23078:	b	21aec <__assert_fail@plt+0xe5e8>
   2307c:	mov	r0, r6
   23080:	mov	r1, r5
   23084:	mov	r2, r4
   23088:	bl	19ce0 <__assert_fail@plt+0x67dc>
   2308c:	b	22d3c <__assert_fail@plt+0xf838>
   23090:	mov	r2, #5
   23094:	movw	r1, #2568	; 0xa08
   23098:	movt	r1, #4
   2309c:	bl	12d84 <dcgettext@plt>
   230a0:	mov	r4, r0
   230a4:	mvn	r0, #0
   230a8:	bl	130a8 <elf_errmsg@plt>
   230ac:	mov	r2, r4
   230b0:	mov	r3, r0
   230b4:	ldr	r0, [sp, #108]	; 0x6c
   230b8:	mov	r1, r0
   230bc:	bl	12f70 <error@plt>
   230c0:	b	21cc4 <__assert_fail@plt+0xe7c0>
   230c4:	ldrb	r3, [r9, #10]
   230c8:	cmp	r3, #0
   230cc:	beq	21a80 <__assert_fail@plt+0xe57c>
   230d0:	b	21a24 <__assert_fail@plt+0xe520>
   230d4:	bl	12dc0 <__stack_chk_fail@plt>
   230d8:	mov	r2, #5
   230dc:	mov	r0, r4
   230e0:	movw	r1, #2672	; 0xa70
   230e4:	movt	r1, #4
   230e8:	bl	12d84 <dcgettext@plt>
   230ec:	mov	r4, r0
   230f0:	mvn	r0, #0
   230f4:	bl	130a8 <elf_errmsg@plt>
   230f8:	mov	r2, r4
   230fc:	mov	r3, r0
   23100:	ldr	r0, [sp, #144]	; 0x90
   23104:	mov	r1, r0
   23108:	bl	12f70 <error@plt>
   2310c:	b	21cc4 <__assert_fail@plt+0xe7c0>
   23110:	ldrb	r4, [r3]
   23114:	cmp	r4, #0
   23118:	bne	23164 <__assert_fail@plt+0xfc60>
   2311c:	ldr	r7, [sp, #140]	; 0x8c
   23120:	add	r1, sp, #456	; 0x1c8
   23124:	ldr	r0, [r7, #16]
   23128:	bl	133f0 <elf_getshdrnum@plt>
   2312c:	cmp	r0, #0
   23130:	blt	23770 <__assert_fail@plt+0x1026c>
   23134:	mov	r0, r4
   23138:	mov	r2, #5
   2313c:	movw	r1, #2692	; 0xa84
   23140:	movt	r1, #4
   23144:	bl	12d84 <dcgettext@plt>
   23148:	ldr	r8, [sp, #108]	; 0x6c
   2314c:	ldr	r2, [sp, #456]	; 0x1c8
   23150:	ldrd	r4, [r8, #40]	; 0x28
   23154:	strd	r4, [sp]
   23158:	mov	r1, r0
   2315c:	mov	r0, #1
   23160:	bl	13204 <__printf_chk@plt>
   23164:	ldr	r9, [sp, #140]	; 0x8c
   23168:	add	r1, sp, #328	; 0x148
   2316c:	ldr	r0, [r9, #16]
   23170:	bl	13498 <elf_getshdrstrndx@plt>
   23174:	cmp	r0, #0
   23178:	movwlt	r1, #2752	; 0xac0
   2317c:	movlt	r0, #0
   23180:	movtlt	r1, #4
   23184:	blt	21c00 <__assert_fail@plt+0xe6fc>
   23188:	mov	r2, #5
   2318c:	movw	r1, #2804	; 0xaf4
   23190:	mov	r0, #0
   23194:	movt	r1, #4
   23198:	bl	12d84 <dcgettext@plt>
   2319c:	bl	12fdc <puts@plt>
   231a0:	ldr	sl, [sp, #108]	; 0x6c
   231a4:	mov	r2, #5
   231a8:	ldrb	r3, [sl, #4]
   231ac:	cmp	r3, #1
   231b0:	movweq	r1, #2824	; 0xb08
   231b4:	movwne	r1, #2908	; 0xb5c
   231b8:	moveq	r0, #0
   231bc:	movne	r0, #0
   231c0:	movteq	r1, #4
   231c4:	movtne	r1, #4
   231c8:	bl	12d84 <dcgettext@plt>
   231cc:	bl	12fdc <puts@plt>
   231d0:	ldr	ip, [sp, #136]	; 0x88
   231d4:	ldrb	r3, [ip, #34]	; 0x22
   231d8:	cmp	r3, #0
   231dc:	beq	23210 <__assert_fail@plt+0xfd0c>
   231e0:	ldr	r4, [sp, #108]	; 0x6c
   231e4:	mov	r2, #5
   231e8:	ldrb	r3, [r4, #4]
   231ec:	cmp	r3, #1
   231f0:	movweq	r1, #3004	; 0xbbc
   231f4:	movwne	r1, #3036	; 0xbdc
   231f8:	moveq	r0, #0
   231fc:	movteq	r1, #4
   23200:	movne	r0, #0
   23204:	movtne	r1, #4
   23208:	bl	12d84 <dcgettext@plt>
   2320c:	bl	12fdc <puts@plt>
   23210:	ldr	r5, [sp, #136]	; 0x88
   23214:	ldr	r3, [r5, #44]	; 0x2c
   23218:	cmp	r3, #0
   2321c:	beq	236d8 <__assert_fail@plt+0x101d4>
   23220:	movw	r8, #2532	; 0x9e4
   23224:	movt	r8, #4
   23228:	str	fp, [sp, #88]	; 0x58
   2322c:	mov	sl, #0
   23230:	mov	fp, r8
   23234:	b	23314 <__assert_fail@plt+0xfe10>
   23238:	muleq	r3, r4, r8
   2323c:	andeq	ip, r3, r4, lsl #17
   23240:	andeq	ip, r3, r4, asr #15
   23244:	andeq	ip, r3, r4, ror r8
   23248:	andeq	ip, r3, ip, ror #15
   2324c:	ldrd	r2, [r9, #16]
   23250:	mov	r5, #16
   23254:	ldrd	r6, [r9, #24]
   23258:	mov	lr, #8
   2325c:	strd	r2, [sp, #8]
   23260:	movw	r1, #3068	; 0xbfc
   23264:	str	r0, [sp]
   23268:	mov	r3, r4
   2326c:	str	r5, [sp, #4]
   23270:	movt	r1, #4
   23274:	str	lr, [sp, #16]
   23278:	mov	r0, #1
   2327c:	strd	r6, [sp, #24]
   23280:	mov	r2, sl
   23284:	str	lr, [sp, #32]
   23288:	ldrd	r6, [r9, #32]
   2328c:	strd	r6, [sp, #40]	; 0x28
   23290:	ldrd	r6, [r9, #56]	; 0x38
   23294:	str	ip, [sp, #56]	; 0x38
   23298:	strd	r6, [sp, #48]	; 0x30
   2329c:	ldr	ip, [r9, #40]	; 0x28
   232a0:	str	ip, [sp, #60]	; 0x3c
   232a4:	ldr	ip, [r9, #44]	; 0x2c
   232a8:	str	ip, [sp, #64]	; 0x40
   232ac:	ldrd	r6, [r9, #48]	; 0x30
   232b0:	strd	r6, [sp, #72]	; 0x48
   232b4:	bl	13204 <__printf_chk@plt>
   232b8:	ldr	r6, [sp, #136]	; 0x88
   232bc:	ldrb	r3, [r6, #34]	; 0x22
   232c0:	cmp	r3, #0
   232c4:	beq	23300 <__assert_fail@plt+0xfdfc>
   232c8:	ldrd	r0, [r9, #8]
   232cc:	mov	r2, #2048	; 0x800
   232d0:	mov	r3, #0
   232d4:	and	r2, r2, r0
   232d8:	and	r3, r3, r1
   232dc:	orrs	r7, r2, r3
   232e0:	bne	235bc <__assert_fail@plt+0x100b8>
   232e4:	mov	r1, r4
   232e8:	movw	r0, #64212	; 0xfad4
   232ec:	mov	r2, #7
   232f0:	movt	r0, #3
   232f4:	bl	13468 <strncmp@plt>
   232f8:	subs	r4, r0, #0
   232fc:	beq	23584 <__assert_fail@plt+0x10080>
   23300:	ldr	r4, [sp, #136]	; 0x88
   23304:	add	sl, sl, #1
   23308:	ldr	r3, [r4, #44]	; 0x2c
   2330c:	cmp	sl, r3
   23310:	bcs	236d4 <__assert_fail@plt+0x101d0>
   23314:	ldr	r6, [sp, #140]	; 0x8c
   23318:	mov	r1, sl
   2331c:	ldr	r0, [r6, #16]
   23320:	bl	133e4 <elf_getscn@plt>
   23324:	subs	r8, r0, #0
   23328:	beq	23730 <__assert_fail@plt+0x1022c>
   2332c:	add	r1, sp, #456	; 0x1c8
   23330:	bl	12cc4 <gelf_getshdr@plt>
   23334:	subs	r9, r0, #0
   23338:	beq	236a4 <__assert_fail@plt+0x101a0>
   2333c:	ldrd	r4, [r9, #8]
   23340:	mov	r2, #1
   23344:	mov	r3, #0
   23348:	and	r2, r2, r4
   2334c:	and	r3, r3, r5
   23350:	orrs	r7, r2, r3
   23354:	mov	r2, #2
   23358:	addeq	ip, sp, #520	; 0x208
   2335c:	addne	r1, sp, #520	; 0x208
   23360:	and	r2, r2, r4
   23364:	movne	r3, #87	; 0x57
   23368:	strbne	r3, [sp, #520]	; 0x208
   2336c:	mov	r3, #0
   23370:	and	r3, r3, r5
   23374:	addne	r1, r1, #1
   23378:	moveq	r1, ip
   2337c:	addne	ip, sp, #520	; 0x208
   23380:	orrs	r0, r2, r3
   23384:	mov	r2, #4
   23388:	movne	r3, #65	; 0x41
   2338c:	strbne	r3, [r1]
   23390:	ldrdne	r4, [r9, #8]
   23394:	mov	r3, #0
   23398:	addne	r1, r1, #1
   2339c:	and	r3, r3, r5
   233a0:	and	r2, r2, r4
   233a4:	orrs	r6, r2, r3
   233a8:	mov	r2, #16
   233ac:	movne	r3, #88	; 0x58
   233b0:	strbne	r3, [r1]
   233b4:	ldrdne	r4, [r9, #8]
   233b8:	mov	r3, #0
   233bc:	addne	r1, r1, #1
   233c0:	and	r3, r3, r5
   233c4:	and	r2, r2, r4
   233c8:	orrs	r7, r2, r3
   233cc:	mov	r2, #32
   233d0:	movne	r3, #77	; 0x4d
   233d4:	strbne	r3, [r1]
   233d8:	ldrdne	r4, [r9, #8]
   233dc:	mov	r3, #0
   233e0:	addne	r1, r1, #1
   233e4:	and	r3, r3, r5
   233e8:	and	r2, r2, r4
   233ec:	orrs	r0, r2, r3
   233f0:	mov	r2, #64	; 0x40
   233f4:	movne	r3, #83	; 0x53
   233f8:	strbne	r3, [r1]
   233fc:	ldrdne	r4, [r9, #8]
   23400:	mov	r3, #0
   23404:	addne	r1, r1, #1
   23408:	and	r3, r3, r5
   2340c:	and	r2, r2, r4
   23410:	orrs	r6, r2, r3
   23414:	mov	r2, #128	; 0x80
   23418:	movne	r3, #73	; 0x49
   2341c:	strbne	r3, [r1]
   23420:	ldrdne	r4, [r9, #8]
   23424:	mov	r3, #0
   23428:	addne	r1, r1, #1
   2342c:	and	r3, r3, r5
   23430:	and	r2, r2, r4
   23434:	orrs	r7, r2, r3
   23438:	mov	r2, #256	; 0x100
   2343c:	movne	r3, #76	; 0x4c
   23440:	strbne	r3, [r1]
   23444:	ldrdne	r4, [r9, #8]
   23448:	mov	r3, #0
   2344c:	addne	r1, r1, #1
   23450:	and	r3, r3, r5
   23454:	and	r2, r2, r4
   23458:	orrs	r0, r2, r3
   2345c:	mov	r2, #512	; 0x200
   23460:	movne	r3, #78	; 0x4e
   23464:	strbne	r3, [r1]
   23468:	ldrdne	r4, [r9, #8]
   2346c:	mov	r3, #0
   23470:	addne	r1, r1, #1
   23474:	and	r3, r3, r5
   23478:	and	r2, r2, r4
   2347c:	orrs	r6, r2, r3
   23480:	mov	r2, #1024	; 0x400
   23484:	mov	r6, #1073741824	; 0x40000000
   23488:	movne	r3, #71	; 0x47
   2348c:	strbne	r3, [r1]
   23490:	ldrdne	r4, [r9, #8]
   23494:	mov	r3, #0
   23498:	addne	r1, r1, #1
   2349c:	and	r3, r3, r5
   234a0:	and	r2, r2, r4
   234a4:	orrs	r7, r2, r3
   234a8:	mov	r2, #2048	; 0x800
   234ac:	mov	r7, #0
   234b0:	movne	r3, #84	; 0x54
   234b4:	strbne	r3, [r1]
   234b8:	ldrdne	r4, [r9, #8]
   234bc:	mov	r3, #0
   234c0:	addne	r1, r1, #1
   234c4:	and	r3, r3, r5
   234c8:	and	r2, r2, r4
   234cc:	orrs	r0, r2, r3
   234d0:	movne	r3, #67	; 0x43
   234d4:	strbne	r3, [r1]
   234d8:	ldrdne	r4, [r9, #8]
   234dc:	addne	r1, r1, #1
   234e0:	and	r6, r6, r4
   234e4:	and	r7, r7, r5
   234e8:	orrs	r2, r6, r7
   234ec:	mov	r6, #-2147483648	; 0x80000000
   234f0:	mov	r7, #0
   234f4:	movne	r3, #79	; 0x4f
   234f8:	strbne	r3, [r1]
   234fc:	ldrdne	r4, [r9, #8]
   23500:	addne	r1, r1, #1
   23504:	and	r4, r4, r6
   23508:	and	r5, r5, r7
   2350c:	orrs	r3, r4, r5
   23510:	ldr	r4, [sp, #140]	; 0x8c
   23514:	movne	r3, #69	; 0x45
   23518:	strbne	r3, [r1]
   2351c:	addne	r1, r1, #1
   23520:	mov	r3, #0
   23524:	strb	r3, [r1]
   23528:	ldr	r1, [sp, #328]	; 0x148
   2352c:	ldr	r0, [r4, #16]
   23530:	ldr	r2, [r9]
   23534:	str	ip, [sp, #84]	; 0x54
   23538:	bl	12e44 <elf_strptr@plt>
   2353c:	mov	r3, #128	; 0x80
   23540:	ldr	r1, [r9, #4]
   23544:	add	r2, sp, #540	; 0x21c
   23548:	cmp	r0, #0
   2354c:	movne	r4, r0
   23550:	ldr	r0, [sp, #140]	; 0x8c
   23554:	moveq	r4, fp
   23558:	bl	38f4c <__assert_fail@plt+0x25a48>
   2355c:	ldr	r5, [sp, #108]	; 0x6c
   23560:	ldr	ip, [sp, #84]	; 0x54
   23564:	ldrb	r3, [r5, #4]
   23568:	cmp	r3, #1
   2356c:	bne	2324c <__assert_fail@plt+0xfd48>
   23570:	ldrd	r2, [r9, #16]
   23574:	mov	r5, #8
   23578:	ldrd	r6, [r9, #24]
   2357c:	mov	lr, #6
   23580:	b	2325c <__assert_fail@plt+0xfd58>
   23584:	mov	r0, r8
   23588:	bl	12cb8 <dwelf_scn_gnu_compressed_size@plt>
   2358c:	subs	r3, r0, #0
   23590:	blt	23690 <__assert_fail@plt+0x1018c>
   23594:	ldr	ip, [sp, #108]	; 0x6c
   23598:	mov	r0, #1
   2359c:	movw	r1, #3216	; 0xc90
   235a0:	movt	r1, #4
   235a4:	ldrb	r2, [ip, #4]
   235a8:	cmp	r2, r0
   235ac:	movne	r2, #8
   235b0:	moveq	r2, #6
   235b4:	bl	13204 <__printf_chk@plt>
   235b8:	b	23300 <__assert_fail@plt+0xfdfc>
   235bc:	mov	r0, r8
   235c0:	add	r1, sp, #392	; 0x188
   235c4:	bl	133c0 <gelf_getchdr@plt>
   235c8:	subs	r4, r0, #0
   235cc:	beq	2364c <__assert_fail@plt+0x10148>
   235d0:	ldr	r3, [sp, #392]	; 0x188
   235d4:	cmp	r3, #0
   235d8:	movweq	r2, #2544	; 0x9f0
   235dc:	movteq	r2, #4
   235e0:	beq	235fc <__assert_fail@plt+0x100f8>
   235e4:	movw	r1, #2560	; 0xa00
   235e8:	cmp	r3, #1
   235ec:	movt	r1, #4
   235f0:	movw	r2, #2552	; 0x9f8
   235f4:	movt	r2, #4
   235f8:	movne	r2, r1
   235fc:	ldr	r9, [sp, #108]	; 0x6c
   23600:	add	r8, sp, #672	; 0x2a0
   23604:	movw	r1, #65264	; 0xfef0
   23608:	movw	lr, #65272	; 0xfef8
   2360c:	movt	r1, #65535	; 0xffff
   23610:	movt	lr, #65535	; 0xffff
   23614:	ldrb	ip, [r9, #4]
   23618:	ldrd	r0, [r1, r8]
   2361c:	ldrd	r4, [r8, lr]
   23620:	cmp	ip, #1
   23624:	strd	r0, [sp, #8]
   23628:	movne	ip, #8
   2362c:	moveq	ip, #6
   23630:	movw	r1, #3136	; 0xc40
   23634:	str	ip, [sp]
   23638:	movt	r1, #4
   2363c:	strd	r4, [sp, #16]
   23640:	mov	r0, #1
   23644:	bl	13204 <__printf_chk@plt>
   23648:	b	23300 <__assert_fail@plt+0xfdfc>
   2364c:	movw	r1, #3172	; 0xc64
   23650:	movt	r1, #4
   23654:	mov	r2, #5
   23658:	bl	12d84 <dcgettext@plt>
   2365c:	mov	r6, r0
   23660:	mov	r0, r8
   23664:	bl	133d8 <elf_ndxscn@plt>
   23668:	mov	r5, r0
   2366c:	mvn	r0, #0
   23670:	bl	130a8 <elf_errmsg@plt>
   23674:	mov	r2, r6
   23678:	mov	r3, r5
   2367c:	mov	r1, r4
   23680:	str	r0, [sp]
   23684:	mov	r0, r4
   23688:	bl	12f70 <error@plt>
   2368c:	b	23300 <__assert_fail@plt+0xfdfc>
   23690:	movw	r1, #3248	; 0xcb0
   23694:	mov	r0, r4
   23698:	movt	r1, #4
   2369c:	mov	r2, #5
   236a0:	b	23658 <__assert_fail@plt+0x10154>
   236a4:	mov	r2, #5
   236a8:	movw	r1, #54472	; 0xd4c8
   236ac:	movt	r1, #3
   236b0:	bl	12d84 <dcgettext@plt>
   236b4:	mov	r4, r0
   236b8:	mvn	r0, #0
   236bc:	bl	130a8 <elf_errmsg@plt>
   236c0:	mov	r2, r4
   236c4:	mov	r1, r9
   236c8:	mov	r3, r0
   236cc:	mov	r0, #1
   236d0:	bl	12f70 <error@plt>
   236d4:	ldr	fp, [sp, #88]	; 0x58
   236d8:	movw	r3, #37704	; 0x9348
   236dc:	movt	r3, #5
   236e0:	ldr	r0, [r3]
   236e4:	ldr	r3, [r0, #20]
   236e8:	ldr	r2, [r0, #24]
   236ec:	cmp	r3, r2
   236f0:	addcc	r1, r3, #1
   236f4:	strcc	r1, [r0, #20]
   236f8:	movcc	r2, #10
   236fc:	strbcc	r2, [r3]
   23700:	bcc	21ab4 <__assert_fail@plt+0xe5b0>
   23704:	mov	r1, #10
   23708:	bl	132dc <__overflow@plt>
   2370c:	ldr	r5, [sp, #136]	; 0x88
   23710:	ldrb	r3, [r5, #1]
   23714:	cmp	r3, #0
   23718:	beq	21ac4 <__assert_fail@plt+0xe5c0>
   2371c:	ldr	r6, [sp, #108]	; 0x6c
   23720:	mov	r0, fp
   23724:	add	r1, r6, #4
   23728:	bl	193e4 <__assert_fail@plt+0x5ee0>
   2372c:	b	21ac4 <__assert_fail@plt+0xe5c0>
   23730:	mov	r2, #5
   23734:	movw	r1, #54828	; 0xd62c
   23738:	movt	r1, #3
   2373c:	bl	12d84 <dcgettext@plt>
   23740:	mov	r4, r0
   23744:	mvn	r0, #0
   23748:	bl	130a8 <elf_errmsg@plt>
   2374c:	mov	r2, r4
   23750:	mov	r1, r8
   23754:	mov	r3, r0
   23758:	mov	r0, #1
   2375c:	bl	12f70 <error@plt>
   23760:	mov	r0, fp
   23764:	ldr	r1, [sp, #108]	; 0x6c
   23768:	bl	17f40 <__assert_fail@plt+0x4a3c>
   2376c:	b	21a9c <__assert_fail@plt+0xe598>
   23770:	mov	r2, #5
   23774:	movw	r1, #61996	; 0xf22c
   23778:	mov	r0, r4
   2377c:	movt	r1, #3
   23780:	bl	12d84 <dcgettext@plt>
   23784:	mov	r5, r0
   23788:	mvn	r0, #0
   2378c:	bl	130a8 <elf_errmsg@plt>
   23790:	mov	r2, r5
   23794:	mov	r1, r4
   23798:	mov	r3, r0
   2379c:	mov	r0, #1
   237a0:	bl	12f70 <error@plt>
   237a4:	mov	r0, fp
   237a8:	mov	r1, #2
   237ac:	bl	14510 <__assert_fail@plt+0x100c>
   237b0:	b	21b3c <__assert_fail@plt+0xe638>
   237b4:	ldr	r0, [sp, #216]	; 0xd8
   237b8:	mov	r1, fp
   237bc:	ldr	r2, [sp, #108]	; 0x6c
   237c0:	bl	1e498 <__assert_fail@plt+0xaf94>
   237c4:	b	21ba4 <__assert_fail@plt+0xe6a0>
   237c8:	ldr	r0, [sp, #88]	; 0x58
   237cc:	mov	r1, #0
   237d0:	bl	12f34 <elf_getdata@plt>
   237d4:	subs	sl, r0, #0
   237d8:	beq	22cc8 <__assert_fail@plt+0xf7c4>
   237dc:	ldr	r0, [fp, #16]
   237e0:	add	r1, sp, #228	; 0xe4
   237e4:	bl	13498 <elf_getshdrstrndx@plt>
   237e8:	cmp	r0, #0
   237ec:	blt	22644 <__assert_fail@plt+0xf140>
   237f0:	ldr	r1, [r4, #40]	; 0x28
   237f4:	ldr	r0, [fp, #16]
   237f8:	bl	133e4 <elf_getscn@plt>
   237fc:	add	r1, sp, #456	; 0x1c8
   23800:	bl	12cc4 <gelf_getshdr@plt>
   23804:	subs	r8, r0, #0
   23808:	beq	23a74 <__assert_fail@plt+0x10570>
   2380c:	ldr	r0, [fp, #16]
   23810:	bl	12e38 <gelf_getclass@plt>
   23814:	ldr	r3, [r4, #44]	; 0x2c
   23818:	mov	r2, #5
   2381c:	movw	r1, #4332	; 0x10ec
   23820:	str	r2, [sp]
   23824:	movt	r1, #4
   23828:	movw	r2, #4452	; 0x1164
   2382c:	movt	r2, #4
   23830:	mov	r6, r0
   23834:	cmp	r6, #1
   23838:	mov	r0, #0
   2383c:	movne	r6, #18
   23840:	moveq	r6, #10
   23844:	str	r6, [sp, #120]	; 0x78
   23848:	bl	134a4 <dcngettext@plt>
   2384c:	mov	r3, r0
   23850:	ldr	r0, [sp, #88]	; 0x58
   23854:	str	r3, [sp, #80]	; 0x50
   23858:	bl	133d8 <elf_ndxscn@plt>
   2385c:	ldr	r1, [sp, #228]	; 0xe4
   23860:	ldr	r2, [r4]
   23864:	mov	r9, r0
   23868:	ldr	r0, [fp, #16]
   2386c:	bl	12e44 <elf_strptr@plt>
   23870:	ldrd	r6, [r4, #16]
   23874:	ldr	r2, [r8]
   23878:	ldr	r1, [sp, #228]	; 0xe4
   2387c:	strd	r6, [sp, #96]	; 0x60
   23880:	ldrd	r6, [r4, #24]
   23884:	ldr	r8, [r4, #44]	; 0x2c
   23888:	ldr	r5, [r4, #40]	; 0x28
   2388c:	strd	r6, [sp, #112]	; 0x70
   23890:	mov	ip, r0
   23894:	ldr	r0, [fp, #16]
   23898:	str	ip, [sp, #84]	; 0x54
   2389c:	bl	12e44 <elf_strptr@plt>
   238a0:	ldr	r7, [sp, #120]	; 0x78
   238a4:	mov	r2, r9
   238a8:	ldr	r3, [sp, #80]	; 0x50
   238ac:	str	r8, [sp]
   238b0:	str	r7, [sp, #4]
   238b4:	ldrd	r8, [sp, #96]	; 0x60
   238b8:	mov	r1, r3
   238bc:	ldr	ip, [sp, #84]	; 0x54
   238c0:	ldrd	r6, [sp, #112]	; 0x70
   238c4:	strd	r8, [sp, #8]
   238c8:	mov	r3, ip
   238cc:	str	r5, [sp, #24]
   238d0:	strd	r6, [sp, #16]
   238d4:	str	r0, [sp, #28]
   238d8:	mov	r0, #1
   238dc:	bl	13204 <__printf_chk@plt>
   238e0:	ldr	r3, [r4, #44]	; 0x2c
   238e4:	subs	r3, r3, #1
   238e8:	str	r3, [sp, #112]	; 0x70
   238ec:	bmi	22cc8 <__assert_fail@plt+0xf7c4>
   238f0:	add	r7, sp, #328	; 0x148
   238f4:	mov	r8, #0
   238f8:	str	r7, [sp, #124]	; 0x7c
   238fc:	str	r8, [sp, #96]	; 0x60
   23900:	mov	r0, sl
   23904:	ldr	r1, [sp, #96]	; 0x60
   23908:	ldr	r2, [sp, #124]	; 0x7c
   2390c:	bl	1327c <gelf_getverdef@plt>
   23910:	subs	r5, r0, #0
   23914:	beq	22cc8 <__assert_fail@plt+0xf7c4>
   23918:	ldr	r6, [r5, #12]
   2391c:	mov	r0, sl
   23920:	ldr	r9, [sp, #96]	; 0x60
   23924:	add	r2, sp, #240	; 0xf0
   23928:	add	r6, r9, r6
   2392c:	mov	r1, r6
   23930:	bl	130d8 <gelf_getverdaux@plt>
   23934:	subs	r7, r0, #0
   23938:	beq	22cc8 <__assert_fail@plt+0xf7c4>
   2393c:	mov	r2, #5
   23940:	movw	r1, #4576	; 0x11e0
   23944:	mov	r0, #0
   23948:	movt	r1, #4
   2394c:	bl	12d84 <dcgettext@plt>
   23950:	ldrh	r9, [r5]
   23954:	str	r0, [sp, #120]	; 0x78
   23958:	ldrh	r0, [r5, #2]
   2395c:	bl	164c0 <__assert_fail@plt+0x2fbc>
   23960:	ldrh	r3, [r5, #4]
   23964:	ldr	r2, [r7]
   23968:	ldr	r1, [r4, #40]	; 0x28
   2396c:	ldrh	r8, [r5, #6]
   23970:	mov	ip, r0
   23974:	ldr	r0, [fp, #16]
   23978:	str	r3, [sp, #80]	; 0x50
   2397c:	str	ip, [sp, #84]	; 0x54
   23980:	bl	12e44 <elf_strptr@plt>
   23984:	ldr	r3, [sp, #80]	; 0x50
   23988:	ldr	ip, [sp, #84]	; 0x54
   2398c:	ldr	r2, [sp, #96]	; 0x60
   23990:	str	r3, [sp, #4]
   23994:	mov	r3, r9
   23998:	str	ip, [sp]
   2399c:	ldr	r1, [sp, #120]	; 0x78
   239a0:	str	r8, [sp, #8]
   239a4:	str	r0, [sp, #12]
   239a8:	mov	r0, #1
   239ac:	bl	13204 <__printf_chk@plt>
   239b0:	ldrh	r2, [r5, #6]
   239b4:	ldr	r3, [r7, #4]
   239b8:	cmp	r2, #1
   239bc:	add	r6, r6, r3
   239c0:	movgt	r7, #1
   239c4:	bgt	239e0 <__assert_fail@plt+0x104dc>
   239c8:	b	23a44 <__assert_fail@plt+0x10540>
   239cc:	ldrh	r2, [r5, #6]
   239d0:	add	r7, r7, #1
   239d4:	add	r6, r6, r3
   239d8:	cmp	r7, r2
   239dc:	bge	23a44 <__assert_fail@plt+0x10540>
   239e0:	mov	r0, sl
   239e4:	mov	r1, r6
   239e8:	add	r2, sp, #240	; 0xf0
   239ec:	bl	130d8 <gelf_getverdaux@plt>
   239f0:	subs	r8, r0, #0
   239f4:	beq	23a44 <__assert_fail@plt+0x10540>
   239f8:	mov	r2, #5
   239fc:	movw	r1, #4644	; 0x1224
   23a00:	mov	r0, #0
   23a04:	movt	r1, #4
   23a08:	bl	12d84 <dcgettext@plt>
   23a0c:	ldr	r1, [r4, #40]	; 0x28
   23a10:	ldr	r2, [r8]
   23a14:	mov	r9, r0
   23a18:	ldr	r0, [fp, #16]
   23a1c:	bl	12e44 <elf_strptr@plt>
   23a20:	mov	r3, r7
   23a24:	mov	r1, r9
   23a28:	mov	r2, r6
   23a2c:	str	r0, [sp]
   23a30:	mov	r0, #1
   23a34:	bl	13204 <__printf_chk@plt>
   23a38:	ldr	r3, [r8, #4]
   23a3c:	cmp	r3, #0
   23a40:	bne	239cc <__assert_fail@plt+0x104c8>
   23a44:	ldr	r3, [r5, #16]
   23a48:	cmp	r3, #0
   23a4c:	beq	22cc8 <__assert_fail@plt+0xf7c4>
   23a50:	ldr	ip, [sp, #112]	; 0x70
   23a54:	ldr	r5, [sp, #96]	; 0x60
   23a58:	sub	ip, ip, #1
   23a5c:	str	ip, [sp, #112]	; 0x70
   23a60:	cmn	ip, #1
   23a64:	add	r5, r5, r3
   23a68:	str	r5, [sp, #96]	; 0x60
   23a6c:	bne	23900 <__assert_fail@plt+0x103fc>
   23a70:	b	22cc8 <__assert_fail@plt+0xf7c4>
   23a74:	movw	r1, #54000	; 0xd2f0
   23a78:	mov	r2, #5
   23a7c:	movt	r1, #3
   23a80:	bl	12d84 <dcgettext@plt>
   23a84:	mov	r4, r0
   23a88:	ldr	r0, [sp, #88]	; 0x58
   23a8c:	bl	133d8 <elf_ndxscn@plt>
   23a90:	mov	r2, r4
   23a94:	mov	r1, r8
   23a98:	mov	r3, r0
   23a9c:	mov	r0, #1
   23aa0:	bl	12f70 <error@plt>
   23aa4:	ldr	r0, [fp, #16]
   23aa8:	bl	12e38 <gelf_getclass@plt>
   23aac:	mov	r1, #0
   23ab0:	mov	r7, r0
   23ab4:	ldr	r0, [sp, #88]	; 0x58
   23ab8:	bl	12f34 <elf_getdata@plt>
   23abc:	cmp	r0, #0
   23ac0:	str	r0, [sp, #124]	; 0x7c
   23ac4:	beq	22cc8 <__assert_fail@plt+0xf7c4>
   23ac8:	ldr	r0, [fp, #16]
   23acc:	add	r1, sp, #228	; 0xe4
   23ad0:	bl	13498 <elf_getshdrstrndx@plt>
   23ad4:	cmp	r0, #0
   23ad8:	blt	22644 <__assert_fail@plt+0xf140>
   23adc:	ldr	r1, [r4, #40]	; 0x28
   23ae0:	ldr	r0, [fp, #16]
   23ae4:	bl	133e4 <elf_getscn@plt>
   23ae8:	add	r1, sp, #456	; 0x1c8
   23aec:	bl	12cc4 <gelf_getshdr@plt>
   23af0:	subs	r6, r0, #0
   23af4:	beq	23d18 <__assert_fail@plt+0x10814>
   23af8:	cmp	r7, #1
   23afc:	ldr	r3, [r4, #44]	; 0x2c
   23b00:	mov	r2, #5
   23b04:	movw	r1, #4008	; 0xfa8
   23b08:	str	r2, [sp]
   23b0c:	movt	r1, #4
   23b10:	movw	r2, #4124	; 0x101c
   23b14:	mov	r0, #0
   23b18:	movt	r2, #4
   23b1c:	movne	r7, #18
   23b20:	moveq	r7, #10
   23b24:	bl	134a4 <dcngettext@plt>
   23b28:	mov	r3, r0
   23b2c:	ldr	r0, [sp, #88]	; 0x58
   23b30:	str	r3, [sp, #80]	; 0x50
   23b34:	bl	133d8 <elf_ndxscn@plt>
   23b38:	ldr	r1, [sp, #228]	; 0xe4
   23b3c:	ldr	r2, [r4]
   23b40:	mov	sl, r0
   23b44:	ldr	r0, [fp, #16]
   23b48:	bl	12e44 <elf_strptr@plt>
   23b4c:	ldrd	r8, [r4, #16]
   23b50:	ldr	r2, [r6]
   23b54:	ldr	r1, [sp, #228]	; 0xe4
   23b58:	ldr	r6, [r4, #44]	; 0x2c
   23b5c:	ldr	r5, [r4, #40]	; 0x28
   23b60:	strd	r8, [sp, #96]	; 0x60
   23b64:	ldrd	r8, [r4, #24]
   23b68:	mov	ip, r0
   23b6c:	ldr	r0, [fp, #16]
   23b70:	str	ip, [sp, #84]	; 0x54
   23b74:	bl	12e44 <elf_strptr@plt>
   23b78:	ldr	r3, [sp, #80]	; 0x50
   23b7c:	mov	r2, sl
   23b80:	str	r7, [sp, #4]
   23b84:	str	r6, [sp]
   23b88:	ldr	ip, [sp, #84]	; 0x54
   23b8c:	mov	r1, r3
   23b90:	ldrd	r6, [sp, #96]	; 0x60
   23b94:	strd	r8, [sp, #16]
   23b98:	mov	r3, ip
   23b9c:	str	r5, [sp, #24]
   23ba0:	strd	r6, [sp, #8]
   23ba4:	str	r0, [sp, #28]
   23ba8:	mov	r0, #1
   23bac:	bl	13204 <__printf_chk@plt>
   23bb0:	ldr	r3, [r4, #44]	; 0x2c
   23bb4:	subs	r3, r3, #1
   23bb8:	str	r3, [sp, #112]	; 0x70
   23bbc:	bmi	22cc8 <__assert_fail@plt+0xf7c4>
   23bc0:	add	r7, sp, #240	; 0xf0
   23bc4:	mov	r8, #0
   23bc8:	str	r7, [sp, #128]	; 0x80
   23bcc:	str	r8, [sp, #96]	; 0x60
   23bd0:	ldr	r0, [sp, #124]	; 0x7c
   23bd4:	ldr	r1, [sp, #96]	; 0x60
   23bd8:	ldr	r2, [sp, #128]	; 0x80
   23bdc:	bl	12d90 <gelf_getverneed@plt>
   23be0:	subs	r9, r0, #0
   23be4:	beq	22cc8 <__assert_fail@plt+0xf7c4>
   23be8:	mov	r2, #5
   23bec:	movw	r1, #4244	; 0x1094
   23bf0:	mov	r0, #0
   23bf4:	movt	r1, #4
   23bf8:	bl	12d84 <dcgettext@plt>
   23bfc:	ldr	r1, [r4, #40]	; 0x28
   23c00:	ldr	r2, [r9, #4]
   23c04:	ldrh	r5, [r9]
   23c08:	mov	r6, r0
   23c0c:	ldr	r0, [fp, #16]
   23c10:	bl	12e44 <elf_strptr@plt>
   23c14:	mov	r1, r6
   23c18:	ldr	r2, [sp, #96]	; 0x60
   23c1c:	mov	r3, r5
   23c20:	str	r0, [sp]
   23c24:	mov	r0, #1
   23c28:	ldrh	ip, [r9, #2]
   23c2c:	str	ip, [sp, #4]
   23c30:	bl	13204 <__printf_chk@plt>
   23c34:	ldrh	r7, [r9, #2]
   23c38:	ldr	r6, [r9, #8]
   23c3c:	sub	r7, r7, #1
   23c40:	ldr	sl, [sp, #96]	; 0x60
   23c44:	cmn	r7, #1
   23c48:	add	r6, sl, r6
   23c4c:	beq	23ce8 <__assert_fail@plt+0x107e4>
   23c50:	ldr	r8, [sp, #124]	; 0x7c
   23c54:	str	r9, [sp, #120]	; 0x78
   23c58:	b	23c6c <__assert_fail@plt+0x10768>
   23c5c:	sub	r7, r7, #1
   23c60:	add	r6, r6, r3
   23c64:	cmn	r7, #1
   23c68:	beq	23ce4 <__assert_fail@plt+0x107e0>
   23c6c:	mov	r0, r8
   23c70:	mov	r1, r6
   23c74:	add	r2, sp, #328	; 0x148
   23c78:	bl	12ca0 <gelf_getvernaux@plt>
   23c7c:	subs	r5, r0, #0
   23c80:	beq	23ce4 <__assert_fail@plt+0x107e0>
   23c84:	mov	r2, #5
   23c88:	movw	r1, #4288	; 0x10c0
   23c8c:	mov	r0, #0
   23c90:	movt	r1, #4
   23c94:	bl	12d84 <dcgettext@plt>
   23c98:	ldr	r1, [r4, #40]	; 0x28
   23c9c:	ldr	r2, [r5, #8]
   23ca0:	mov	sl, r0
   23ca4:	ldr	r0, [fp, #16]
   23ca8:	bl	12e44 <elf_strptr@plt>
   23cac:	mov	r9, r0
   23cb0:	ldrh	r0, [r5, #4]
   23cb4:	bl	164c0 <__assert_fail@plt+0x2fbc>
   23cb8:	mov	r3, r9
   23cbc:	mov	r1, sl
   23cc0:	mov	r2, r6
   23cc4:	str	r0, [sp]
   23cc8:	mov	r0, #1
   23ccc:	ldrh	ip, [r5, #6]
   23cd0:	str	ip, [sp, #4]
   23cd4:	bl	13204 <__printf_chk@plt>
   23cd8:	ldr	r3, [r5, #12]
   23cdc:	cmp	r3, #0
   23ce0:	bne	23c5c <__assert_fail@plt+0x10758>
   23ce4:	ldr	r9, [sp, #120]	; 0x78
   23ce8:	ldr	r3, [r9, #12]
   23cec:	cmp	r3, #0
   23cf0:	beq	22cc8 <__assert_fail@plt+0xf7c4>
   23cf4:	ldr	ip, [sp, #112]	; 0x70
   23cf8:	ldr	r5, [sp, #96]	; 0x60
   23cfc:	sub	ip, ip, #1
   23d00:	str	ip, [sp, #112]	; 0x70
   23d04:	cmn	ip, #1
   23d08:	add	r5, r5, r3
   23d0c:	str	r5, [sp, #96]	; 0x60
   23d10:	bne	23bd0 <__assert_fail@plt+0x106cc>
   23d14:	b	22cc8 <__assert_fail@plt+0xf7c4>
   23d18:	mov	r2, #5
   23d1c:	movw	r1, #54000	; 0xd2f0
   23d20:	movt	r1, #3
   23d24:	bl	12d84 <dcgettext@plt>
   23d28:	mov	r4, r0
   23d2c:	ldr	r0, [sp, #88]	; 0x58
   23d30:	bl	133d8 <elf_ndxscn@plt>
   23d34:	mov	r2, r4
   23d38:	mov	r1, r6
   23d3c:	mov	r3, r0
   23d40:	mov	r0, #1
   23d44:	bl	12f70 <error@plt>
   23d48:	movw	r1, #3588	; 0xe04
   23d4c:	mov	r2, #5
   23d50:	movt	r1, #4
   23d54:	mov	r0, #0
   23d58:	bl	12d84 <dcgettext@plt>
   23d5c:	b	22b6c <__assert_fail@plt+0xf668>
   23d60:	lsr	r3, r3, #2
   23d64:	mov	r2, #5
   23d68:	movw	r1, #3448	; 0xd78
   23d6c:	str	r2, [sp]
   23d70:	movt	r1, #4
   23d74:	movw	r2, #3516	; 0xdbc
   23d78:	sub	r3, r3, #1
   23d7c:	movt	r2, #4
   23d80:	bl	134a4 <dcngettext@plt>
   23d84:	mov	r7, r0
   23d88:	b	22b2c <__assert_fail@plt+0xf628>
   23d8c:	mov	r2, #5
   23d90:	movw	r1, #53868	; 0xd26c
   23d94:	mov	r0, r7
   23d98:	movt	r1, #3
   23d9c:	bl	12d84 <dcgettext@plt>
   23da0:	mov	r1, r7
   23da4:	mov	r2, r0
   23da8:	mov	r0, #1
   23dac:	bl	12f70 <error@plt>
   23db0:	mvn	r0, #-1879048186	; 0x90000006
   23db4:	mov	r1, #0
   23db8:	cmp	r2, r0
   23dbc:	sbcs	ip, r3, r1
   23dc0:	bge	23f44 <__assert_fail@plt+0x10a40>
   23dc4:	movw	r0, #65023	; 0xfdff
   23dc8:	movt	r0, #28671	; 0x6fff
   23dcc:	mov	r1, #0
   23dd0:	cmp	r0, r2
   23dd4:	sbcs	ip, r1, r3
   23dd8:	bge	23e54 <__assert_fail@plt+0x10950>
   23ddc:	ldrd	r2, [r6, #8]
   23de0:	mov	r0, #1
   23de4:	cmp	r5, r0
   23de8:	movw	r1, #3996	; 0xf9c
   23dec:	movt	r1, #4
   23df0:	strd	r2, [sp]
   23df4:	movne	r2, #18
   23df8:	moveq	r2, #10
   23dfc:	bl	13204 <__printf_chk@plt>
   23e00:	b	23050 <__assert_fail@plt+0xfb4c>
   23e04:	movw	r1, #3956	; 0xf74
   23e08:	movt	r1, #4
   23e0c:	mov	r0, #0
   23e10:	mov	r2, #5
   23e14:	bl	12d84 <dcgettext@plt>
   23e18:	ldr	r2, [r6, #8]
   23e1c:	ldr	r1, [r4, #40]	; 0x28
   23e20:	mov	r3, r0
   23e24:	ldr	r0, [fp, #16]
   23e28:	str	r3, [sp, #80]	; 0x50
   23e2c:	bl	12e44 <elf_strptr@plt>
   23e30:	ldr	r3, [sp, #80]	; 0x50
   23e34:	mov	r1, r3
   23e38:	mov	r2, r0
   23e3c:	mov	r0, #1
   23e40:	bl	13204 <__printf_chk@plt>
   23e44:	b	23050 <__assert_fail@plt+0xfb4c>
   23e48:	cmp	r2, #18
   23e4c:	sbcs	r1, r3, #0
   23e50:	blt	23ddc <__assert_fail@plt+0x108d8>
   23e54:	mov	r2, #5
   23e58:	movw	r1, #3980	; 0xf8c
   23e5c:	mov	r0, #0
   23e60:	movt	r1, #4
   23e64:	bl	12d84 <dcgettext@plt>
   23e68:	ldrd	r2, [r6, #8]
   23e6c:	mov	r1, r0
   23e70:	mov	r0, #1
   23e74:	bl	13204 <__printf_chk@plt>
   23e78:	b	23050 <__assert_fail@plt+0xfb4c>
   23e7c:	movw	r0, #65017	; 0xfdf9
   23e80:	movt	r0, #28671	; 0x6fff
   23e84:	mov	r1, #0
   23e88:	cmp	r2, r0
   23e8c:	sbcs	ip, r3, r1
   23e90:	blt	23ddc <__assert_fail@plt+0x108d8>
   23e94:	movw	r0, #65019	; 0xfdfb
   23e98:	movt	r0, #28671	; 0x6fff
   23e9c:	mov	r1, #0
   23ea0:	cmp	r0, r2
   23ea4:	sbcs	ip, r1, r3
   23ea8:	ldrlt	r1, [pc, #-3180]	; 23244 <__assert_fail@plt+0xfd40>
   23eac:	movlt	r0, #2
   23eb0:	blt	2303c <__assert_fail@plt+0xfb38>
   23eb4:	b	23e54 <__assert_fail@plt+0x10950>
   23eb8:	mvn	r0, #-1879048187	; 0x90000005
   23ebc:	mov	r1, #0
   23ec0:	cmp	r0, r2
   23ec4:	sbcs	ip, r1, r3
   23ec8:	bge	23db0 <__assert_fail@plt+0x108ac>
   23ecc:	mvn	r0, #-1879048190	; 0x90000002
   23ed0:	mov	r1, #0
   23ed4:	cmp	r3, r1
   23ed8:	cmpeq	r2, r0
   23edc:	beq	23f44 <__assert_fail@plt+0x10a40>
   23ee0:	mvn	r0, #-1879048192	; 0x90000000
   23ee4:	mov	r1, #0
   23ee8:	cmp	r3, r1
   23eec:	cmpeq	r2, r0
   23ef0:	beq	23f44 <__assert_fail@plt+0x10a40>
   23ef4:	mvn	r0, #-1879048188	; 0x90000004
   23ef8:	mov	r1, #0
   23efc:	cmp	r3, r1
   23f00:	cmpeq	r2, r0
   23f04:	bne	23ddc <__assert_fail@plt+0x108d8>
   23f08:	ldr	r0, [pc, #-3272]	; 23248 <__assert_fail@plt+0xfd44>
   23f0c:	mov	r1, #17
   23f10:	ldrd	r2, [r6, #8]
   23f14:	str	r1, [sp, #4]
   23f18:	str	r0, [sp]
   23f1c:	mov	r0, r5
   23f20:	bl	14394 <__assert_fail@plt+0xe90>
   23f24:	b	23050 <__assert_fail@plt+0xfb4c>
   23f28:	ldrd	r2, [r6, #8]
   23f2c:	mov	r1, #2
   23f30:	str	sl, [sp]
   23f34:	mov	r0, r5
   23f38:	str	r1, [sp, #4]
   23f3c:	bl	14394 <__assert_fail@plt+0xe90>
   23f40:	b	23050 <__assert_fail@plt+0xfb4c>
   23f44:	movw	r1, #12396	; 0x306c
   23f48:	ldrd	r2, [r6, #8]
   23f4c:	movt	r1, #4
   23f50:	mov	r0, #1
   23f54:	bl	13204 <__printf_chk@plt>
   23f58:	b	23050 <__assert_fail@plt+0xfb4c>
   23f5c:	cmp	r2, #27
   23f60:	sbcs	r0, r3, #0
   23f64:	bge	23e54 <__assert_fail@plt+0x10950>
   23f68:	cmp	r3, #0
   23f6c:	cmpeq	r2, #15
   23f70:	beq	2406c <__assert_fail@plt+0x10b68>
   23f74:	cmp	r2, #16
   23f78:	sbcs	r1, r3, #0
   23f7c:	bge	23fd8 <__assert_fail@plt+0x10ad4>
   23f80:	cmp	r3, #0
   23f84:	cmpeq	r2, #2
   23f88:	beq	23e54 <__assert_fail@plt+0x10950>
   23f8c:	cmp	r2, #3
   23f90:	sbcs	ip, r3, #0
   23f94:	bge	24038 <__assert_fail@plt+0x10b34>
   23f98:	orrs	r0, r2, r3
   23f9c:	beq	24008 <__assert_fail@plt+0x10b04>
   23fa0:	cmp	r3, #0
   23fa4:	cmpeq	r2, #1
   23fa8:	movweq	r1, #3884	; 0xf2c
   23fac:	moveq	r0, #0
   23fb0:	movteq	r1, #4
   23fb4:	beq	23e10 <__assert_fail@plt+0x1090c>
   23fb8:	b	23ddc <__assert_fail@plt+0x108d8>
   23fbc:	movw	r1, #54000	; 0xd2f0
   23fc0:	mov	r2, #5
   23fc4:	movt	r1, #3
   23fc8:	bl	12d84 <dcgettext@plt>
   23fcc:	mov	r4, r0
   23fd0:	mov	r0, r6
   23fd4:	b	23a8c <__assert_fail@plt+0x10588>
   23fd8:	cmp	r3, #0
   23fdc:	cmpeq	r2, #20
   23fe0:	beq	2407c <__assert_fail@plt+0x10b78>
   23fe4:	cmp	r2, #21
   23fe8:	sbcs	r0, r3, #0
   23fec:	blt	23e48 <__assert_fail@plt+0x10944>
   23ff0:	cmp	r2, #23
   23ff4:	sbcs	ip, r3, #0
   23ff8:	blt	24008 <__assert_fail@plt+0x10b04>
   23ffc:	cmp	r3, #0
   24000:	cmpeq	r2, #24
   24004:	bne	23ddc <__assert_fail@plt+0x108d8>
   24008:	ldr	r0, [r8]
   2400c:	ldr	r2, [r0, #24]
   24010:	ldr	r3, [r0, #20]
   24014:	cmp	r3, r2
   24018:	addcc	r2, r3, #1
   2401c:	strcc	r2, [r0, #20]
   24020:	movcc	r2, #10
   24024:	strbcc	r2, [r3]
   24028:	bcc	23050 <__assert_fail@plt+0xfb4c>
   2402c:	mov	r1, #10
   24030:	bl	132dc <__overflow@plt>
   24034:	b	23050 <__assert_fail@plt+0xfb4c>
   24038:	cmp	r2, #8
   2403c:	sbcs	r1, r3, #0
   24040:	blt	23ddc <__assert_fail@plt+0x108d8>
   24044:	cmp	r2, #12
   24048:	sbcs	ip, r3, #0
   2404c:	blt	23e54 <__assert_fail@plt+0x10950>
   24050:	cmp	r3, #0
   24054:	cmpeq	r2, #14
   24058:	movweq	r1, #3908	; 0xf44
   2405c:	moveq	r0, #0
   24060:	movteq	r1, #4
   24064:	beq	23e10 <__assert_fail@plt+0x1090c>
   24068:	b	23ddc <__assert_fail@plt+0x108d8>
   2406c:	movw	r1, #3932	; 0xf5c
   24070:	mov	r0, #0
   24074:	movt	r1, #4
   24078:	b	23e10 <__assert_fail@plt+0x1090c>
   2407c:	ldrd	r2, [r6, #8]
   24080:	mov	r1, #0
   24084:	mov	r0, fp
   24088:	str	r1, [sp]
   2408c:	str	r1, [sp, #4]
   24090:	bl	39338 <__assert_fail@plt+0x25e34>
   24094:	movw	r3, #8172	; 0x1fec
   24098:	movt	r3, #4
   2409c:	cmp	r0, #0
   240a0:	moveq	r0, r3
   240a4:	bl	12fdc <puts@plt>
   240a8:	b	23050 <__assert_fail@plt+0xfb4c>
   240ac:	push	{r4, r5, r6, lr}
   240b0:	sub	sp, sp, #24
   240b4:	movw	r4, #37688	; 0x9338
   240b8:	movt	r4, #5
   240bc:	ldr	r5, [sp, #48]	; 0x30
   240c0:	mov	r6, r0
   240c4:	ldr	r2, [r4]
   240c8:	ldrb	r3, [r5, #4]
   240cc:	str	r2, [sp, #20]
   240d0:	cmp	r3, #0
   240d4:	bne	2410c <__assert_fail@plt+0x10c08>
   240d8:	mov	r1, r3
   240dc:	mov	r2, r3
   240e0:	add	ip, sp, #16
   240e4:	str	r3, [sp]
   240e8:	str	r3, [sp, #4]
   240ec:	str	r3, [sp, #12]
   240f0:	str	ip, [sp, #8]
   240f4:	bl	133a8 <dwfl_module_info@plt>
   240f8:	movw	r1, #55132	; 0xd75c
   240fc:	mov	r0, #1
   24100:	movt	r1, #3
   24104:	ldr	r2, [sp, #16]
   24108:	bl	13204 <__printf_chk@plt>
   2410c:	mov	r0, r6
   24110:	ldr	r1, [r5]
   24114:	bl	21964 <__assert_fail@plt+0xe460>
   24118:	ldr	r2, [sp, #20]
   2411c:	ldr	r3, [r4]
   24120:	mov	r0, #0
   24124:	cmp	r2, r3
   24128:	bne	24134 <__assert_fail@plt+0x10c30>
   2412c:	add	sp, sp, #24
   24130:	pop	{r4, r5, r6, pc}
   24134:	bl	12dc0 <__stack_chk_fail@plt>
   24138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2413c:	sub	sp, sp, #148	; 0x94
   24140:	movw	r4, #37688	; 0x9338
   24144:	movt	r4, #5
   24148:	str	r4, [sp, #56]	; 0x38
   2414c:	mov	r4, r3
   24150:	ldr	r5, [sp, #56]	; 0x38
   24154:	mov	r2, #5
   24158:	movw	r1, #7692	; 0x1e0c
   2415c:	mov	r0, #0
   24160:	movt	r1, #4
   24164:	ldr	r8, [sp, #188]	; 0xbc
   24168:	ldr	r3, [r5]
   2416c:	str	r3, [sp, #140]	; 0x8c
   24170:	bl	12d84 <dcgettext@plt>
   24174:	mov	r5, r0
   24178:	mov	r0, r4
   2417c:	bl	133d8 <elf_ndxscn@plt>
   24180:	mov	r1, r5
   24184:	mov	r2, r0
   24188:	mov	r0, #1
   2418c:	bl	13204 <__printf_chk@plt>
   24190:	mov	r0, r4
   24194:	mov	r1, #0
   24198:	bl	131bc <elf_rawdata@plt>
   2419c:	subs	r6, r0, #0
   241a0:	str	r6, [sp, #64]	; 0x40
   241a4:	beq	24844 <__assert_fail@plt+0x11340>
   241a8:	ldr	r7, [sp, #64]	; 0x40
   241ac:	ldr	r3, [r7]
   241b0:	ldr	sl, [r7, #12]
   241b4:	add	r5, r3, #1
   241b8:	add	sl, r3, sl
   241bc:	cmp	sl, r5
   241c0:	bcc	24470 <__assert_fail@plt+0x10f6c>
   241c4:	mov	r2, #5
   241c8:	movw	r1, #7776	; 0x1e60
   241cc:	mov	r0, #0
   241d0:	movt	r1, #4
   241d4:	ldrb	r4, [r3]
   241d8:	bl	12d84 <dcgettext@plt>
   241dc:	mov	r2, r4
   241e0:	mov	r1, r0
   241e4:	mov	r0, #1
   241e8:	bl	13204 <__printf_chk@plt>
   241ec:	mov	r1, r4
   241f0:	movw	r0, #15800	; 0x3db8
   241f4:	movt	r0, #4
   241f8:	bl	1530c <__assert_fail@plt+0x1e08>
   241fc:	cmp	r4, #255	; 0xff
   24200:	beq	2423c <__assert_fail@plt+0x10d38>
   24204:	mov	r1, r5
   24208:	add	r3, r8, #84	; 0x54
   2420c:	mov	r2, sl
   24210:	str	r3, [sp, #4]
   24214:	str	r8, [sp]
   24218:	add	r3, sp, #128	; 0x80
   2421c:	mov	r0, r4
   24220:	bl	212ac <__assert_fail@plt+0xdda8>
   24224:	movw	r1, #7804	; 0x1e7c
   24228:	ldrd	r2, [sp, #128]	; 0x80
   2422c:	movt	r1, #4
   24230:	mov	r5, r0
   24234:	mov	r0, #1
   24238:	bl	13204 <__printf_chk@plt>
   2423c:	add	r4, r5, #1
   24240:	cmp	sl, r4
   24244:	bcc	24470 <__assert_fail@plt+0x10f6c>
   24248:	ldrb	ip, [r5]
   2424c:	mov	r2, #5
   24250:	movw	r1, #7836	; 0x1e9c
   24254:	mov	r0, #0
   24258:	movt	r1, #4
   2425c:	str	ip, [sp, #60]	; 0x3c
   24260:	bl	12d84 <dcgettext@plt>
   24264:	ldr	r2, [sp, #60]	; 0x3c
   24268:	mov	r1, r0
   2426c:	mov	r0, #1
   24270:	bl	13204 <__printf_chk@plt>
   24274:	ldr	r1, [sp, #60]	; 0x3c
   24278:	movw	r0, #15800	; 0x3db8
   2427c:	movt	r0, #4
   24280:	bl	1530c <__assert_fail@plt+0x1e08>
   24284:	ldr	r6, [sp, #60]	; 0x3c
   24288:	cmp	r6, #255	; 0xff
   2428c:	moveq	r5, #0
   24290:	streq	r5, [sp, #68]	; 0x44
   24294:	beq	242e8 <__assert_fail@plt+0x10de4>
   24298:	ldrb	r2, [r5, #1]
   2429c:	add	ip, r5, #2
   242a0:	mov	r3, #0
   242a4:	tst	r2, #128	; 0x80
   242a8:	and	r2, r2, #127	; 0x7f
   242ac:	uxtb	r2, r2
   242b0:	moveq	r4, ip
   242b4:	moveq	r5, r2
   242b8:	bne	248e4 <__assert_fail@plt+0x113e0>
   242bc:	mov	r2, r5
   242c0:	movw	r1, #7864	; 0x1eb8
   242c4:	mov	r0, #1
   242c8:	movt	r1, #4
   242cc:	bl	13204 <__printf_chk@plt>
   242d0:	rsb	r3, r4, sl
   242d4:	cmp	r5, r3
   242d8:	addcc	r5, r4, r5
   242dc:	strcc	r5, [sp, #68]	; 0x44
   242e0:	movcs	r6, #0
   242e4:	strcs	r6, [sp, #68]	; 0x44
   242e8:	add	r5, r4, #1
   242ec:	cmp	sl, r5
   242f0:	bcc	24470 <__assert_fail@plt+0x10f6c>
   242f4:	mov	r2, #5
   242f8:	mov	r9, r4
   242fc:	movw	r1, #7892	; 0x1ed4
   24300:	mov	r0, #0
   24304:	movt	r1, #4
   24308:	ldrb	r7, [r9], #2
   2430c:	bl	12d84 <dcgettext@plt>
   24310:	mov	r2, r7
   24314:	mov	r1, r0
   24318:	mov	r0, #1
   2431c:	bl	13204 <__printf_chk@plt>
   24320:	mov	r1, r7
   24324:	movw	r0, #15800	; 0x3db8
   24328:	movt	r0, #4
   2432c:	bl	1530c <__assert_fail@plt+0x1e08>
   24330:	ldrb	r1, [r4, #1]
   24334:	mov	r3, #0
   24338:	tst	r1, #128	; 0x80
   2433c:	and	r1, r1, #127	; 0x7f
   24340:	uxtb	r2, r1
   24344:	bne	24884 <__assert_fail@plt+0x11380>
   24348:	add	r1, r9, r1
   2434c:	str	r1, [sp, #52]	; 0x34
   24350:	cmp	sl, r1
   24354:	bcc	24470 <__assert_fail@plt+0x10f6c>
   24358:	cmp	r1, r9
   2435c:	bls	24774 <__assert_fail@plt+0x11270>
   24360:	mov	r5, #0
   24364:	mov	r3, r9
   24368:	add	fp, r8, #84	; 0x54
   2436c:	mov	r6, r5
   24370:	mov	r9, r5
   24374:	str	r3, [sp, #32]
   24378:	b	24448 <__assert_fail@plt+0x10f44>
   2437c:	ldr	r1, [sp, #32]
   24380:	mov	r2, sl
   24384:	add	r3, sp, #112	; 0x70
   24388:	str	r8, [sp]
   2438c:	str	fp, [sp, #4]
   24390:	mov	r0, r7
   24394:	bl	212ac <__assert_fail@plt+0xdda8>
   24398:	mov	r2, sl
   2439c:	add	r3, sp, #120	; 0x78
   243a0:	stm	sp, {r8, fp}
   243a4:	mov	r1, r0
   243a8:	mov	r0, r7
   243ac:	bl	212ac <__assert_fail@plt+0xdda8>
   243b0:	mov	r2, sl
   243b4:	add	r3, sp, #128	; 0x80
   243b8:	stm	sp, {r8, fp}
   243bc:	mov	r1, r0
   243c0:	mov	r0, r7
   243c4:	bl	212ac <__assert_fail@plt+0xdda8>
   243c8:	mov	r1, #0
   243cc:	ldrb	r4, [r0]
   243d0:	add	r3, r0, #1
   243d4:	mov	r2, r0
   243d8:	str	r3, [sp, #32]
   243dc:	tst	r4, #128	; 0x80
   243e0:	and	r4, r4, #127	; 0x7f
   243e4:	uxtb	r0, r4
   243e8:	bne	24710 <__assert_fail@plt+0x1120c>
   243ec:	cmp	r4, r9
   243f0:	movcs	r9, r4
   243f4:	mov	r2, #5
   243f8:	movw	r1, #7940	; 0x1f04
   243fc:	mov	r0, #0
   24400:	movt	r1, #4
   24404:	bl	12d84 <dcgettext@plt>
   24408:	str	r4, [sp, #24]
   2440c:	ldrd	r4, [sp, #112]	; 0x70
   24410:	ldrd	r2, [sp, #120]	; 0x78
   24414:	strd	r4, [sp]
   24418:	ldrd	r4, [sp, #128]	; 0x80
   2441c:	strd	r2, [sp, #8]
   24420:	mov	r2, r6
   24424:	strd	r4, [sp, #16]
   24428:	mov	r1, r0
   2442c:	mov	r0, #1
   24430:	add	r6, r6, r0
   24434:	bl	13204 <__printf_chk@plt>
   24438:	ldr	r5, [sp, #52]	; 0x34
   2443c:	ldr	ip, [sp, #32]
   24440:	cmp	r5, ip
   24444:	bls	2446c <__assert_fail@plt+0x10f68>
   24448:	cmp	r6, #0
   2444c:	bne	2437c <__assert_fail@plt+0x10e78>
   24450:	mov	r2, #5
   24454:	movw	r1, #7920	; 0x1ef0
   24458:	mov	r0, r6
   2445c:	movt	r1, #4
   24460:	bl	12d84 <dcgettext@plt>
   24464:	bl	12fdc <puts@plt>
   24468:	b	2437c <__assert_fail@plt+0x10e78>
   2446c:	beq	244b0 <__assert_fail@plt+0x10fac>
   24470:	mov	r2, #5
   24474:	movw	r1, #2292	; 0x8f4
   24478:	mov	r0, #0
   2447c:	movt	r1, #4
   24480:	bl	12d84 <dcgettext@plt>
   24484:	mov	r2, r0
   24488:	mov	r0, #0
   2448c:	mov	r1, r0
   24490:	bl	12f70 <error@plt>
   24494:	ldr	r4, [sp, #56]	; 0x38
   24498:	ldr	r2, [sp, #140]	; 0x8c
   2449c:	ldr	r3, [r4]
   244a0:	cmp	r2, r3
   244a4:	bne	24880 <__assert_fail@plt+0x1137c>
   244a8:	add	sp, sp, #148	; 0x94
   244ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244b0:	cmp	r9, #0
   244b4:	beq	24494 <__assert_fail@plt+0x10f90>
   244b8:	movw	r0, #8068	; 0x1f84
   244bc:	movt	r0, #4
   244c0:	bl	12fdc <puts@plt>
   244c4:	ldr	r4, [sp, #52]	; 0x34
   244c8:	rsb	sl, r4, sl
   244cc:	cmp	sl, r9
   244d0:	bls	245e0 <__assert_fail@plt+0x110dc>
   244d4:	ldr	r5, [sp, #52]	; 0x34
   244d8:	add	r3, r9, #1
   244dc:	mov	r4, #0
   244e0:	movw	sl, #37704	; 0x9348
   244e4:	add	r9, r5, r3
   244e8:	movt	sl, #5
   244ec:	mov	r7, r4
   244f0:	b	2452c <__assert_fail@plt+0x11028>
   244f4:	cmp	r6, #0
   244f8:	bne	245d0 <__assert_fail@plt+0x110cc>
   244fc:	ldr	r0, [sl]
   24500:	ldr	r2, [r0, #24]
   24504:	ldr	r3, [r0, #20]
   24508:	cmp	r3, r2
   2450c:	addcc	r2, r3, #1
   24510:	strcc	r2, [r0, #20]
   24514:	movcc	r2, #10
   24518:	strbcc	r2, [r3]
   2451c:	bcs	24838 <__assert_fail@plt+0x11334>
   24520:	cmp	r9, r5
   24524:	add	r7, r7, #1
   24528:	bls	24608 <__assert_fail@plt+0x11104>
   2452c:	ldrb	r3, [r5]
   24530:	add	ip, r5, #1
   24534:	uxtb	r0, r3
   24538:	tst	r0, #128	; 0x80
   2453c:	bne	24a84 <__assert_fail@plt+0x11580>
   24540:	sbfx	r0, r0, #0, #7
   24544:	cmp	r0, r4
   24548:	movls	r3, #0
   2454c:	movhi	r3, #1
   24550:	cmp	r0, #0
   24554:	movle	r3, #0
   24558:	cmp	r3, #0
   2455c:	movne	r4, r0
   24560:	cmp	ip, r9
   24564:	bcs	245e0 <__assert_fail@plt+0x110dc>
   24568:	ldrb	r3, [ip]
   2456c:	add	r5, ip, #1
   24570:	uxtb	r6, r3
   24574:	tst	r6, #128	; 0x80
   24578:	bne	24a34 <__assert_fail@plt+0x11530>
   2457c:	sbfx	r6, r6, #0, #7
   24580:	mov	r3, r0
   24584:	str	r6, [sp]
   24588:	movw	r1, #8104	; 0x1fa8
   2458c:	mov	r0, #1
   24590:	movt	r1, #4
   24594:	mov	r2, r7
   24598:	bl	13204 <__printf_chk@plt>
   2459c:	eor	r3, r6, r6, asr #31
   245a0:	sub	r3, r3, r6, asr #31
   245a4:	tst	r3, #1
   245a8:	beq	244f4 <__assert_fail@plt+0x10ff0>
   245ac:	add	r6, r6, #1
   245b0:	add	r6, r6, r6, lsr #31
   245b4:	asr	r2, r6, #1
   245b8:	add	r2, r2, r7
   245bc:	movw	r1, #8156	; 0x1fdc
   245c0:	mov	r0, #1
   245c4:	movt	r1, #4
   245c8:	bl	13204 <__printf_chk@plt>
   245cc:	b	24520 <__assert_fail@plt+0x1101c>
   245d0:	movw	r0, #8168	; 0x1fe8
   245d4:	movt	r0, #4
   245d8:	bl	12fdc <puts@plt>
   245dc:	b	24520 <__assert_fail@plt+0x1101c>
   245e0:	mov	r2, #5
   245e4:	movw	r1, #8084	; 0x1f94
   245e8:	mov	r0, #0
   245ec:	movt	r1, #4
   245f0:	bl	12d84 <dcgettext@plt>
   245f4:	movw	r3, #37704	; 0x9348
   245f8:	movt	r3, #5
   245fc:	ldr	r1, [r3]
   24600:	bl	1345c <fputs@plt>
   24604:	b	24494 <__assert_fail@plt+0x10f90>
   24608:	ldr	r5, [sp, #68]	; 0x44
   2460c:	cmp	r4, #0
   24610:	cmpne	r5, #0
   24614:	beq	24494 <__assert_fail@plt+0x10f90>
   24618:	movw	r0, #8176	; 0x1ff0
   2461c:	movt	r0, #4
   24620:	bl	12fdc <puts@plt>
   24624:	ldr	r6, [sp, #60]	; 0x3c
   24628:	and	r2, r6, #7
   2462c:	sub	r2, r2, #2
   24630:	uxtb	r2, r2
   24634:	cmp	r2, #10
   24638:	bhi	24814 <__assert_fail@plt+0x11310>
   2463c:	mov	r1, #1
   24640:	movw	r3, #257	; 0x101
   24644:	lsl	r2, r1, r2
   24648:	and	r3, r2, r3
   2464c:	cmp	r3, #0
   24650:	bne	24700 <__assert_fail@plt+0x111fc>
   24654:	movw	r3, #1028	; 0x404
   24658:	and	r3, r2, r3
   2465c:	cmp	r3, #0
   24660:	bne	24708 <__assert_fail@plt+0x11204>
   24664:	movw	r3, #514	; 0x202
   24668:	and	r3, r2, r3
   2466c:	cmp	r3, #0
   24670:	movne	r5, #4
   24674:	beq	24814 <__assert_fail@plt+0x11310>
   24678:	ldr	r7, [sp, #64]	; 0x40
   2467c:	mov	r1, r5
   24680:	ldr	sl, [sp, #68]	; 0x44
   24684:	ldr	r0, [r7]
   24688:	rsb	r0, r0, sl
   2468c:	bl	3b39c <__assert_fail@plt+0x27e98>
   24690:	cmp	r0, r4
   24694:	bcc	24470 <__assert_fail@plt+0x10f6c>
   24698:	mls	r6, r4, r5, sl
   2469c:	ldr	r9, [sp, #60]	; 0x3c
   246a0:	mov	sl, r4
   246a4:	ldr	r5, [sp, #68]	; 0x44
   246a8:	mov	r4, fp
   246ac:	b	246b4 <__assert_fail@plt+0x111b0>
   246b0:	mov	sl, r7
   246b4:	mov	r1, r6
   246b8:	mov	r2, r5
   246bc:	add	r3, sp, #128	; 0x80
   246c0:	str	r8, [sp]
   246c4:	str	r4, [sp, #4]
   246c8:	mov	r0, r9
   246cc:	bl	212ac <__assert_fail@plt+0xdda8>
   246d0:	sub	r7, sl, #1
   246d4:	mov	r2, sl
   246d8:	ldrd	sl, [sp, #128]	; 0x80
   246dc:	movw	r1, #8216	; 0x2018
   246e0:	movt	r1, #4
   246e4:	strd	sl, [sp]
   246e8:	mov	r6, r0
   246ec:	mov	r0, #1
   246f0:	bl	13204 <__printf_chk@plt>
   246f4:	cmp	r5, r6
   246f8:	bhi	246b0 <__assert_fail@plt+0x111ac>
   246fc:	b	24494 <__assert_fail@plt+0x10f90>
   24700:	mov	r5, #2
   24704:	b	24678 <__assert_fail@plt+0x11174>
   24708:	mov	r5, #8
   2470c:	b	24678 <__assert_fail@plt+0x11174>
   24710:	cmp	sl, r2
   24714:	bls	247f8 <__assert_fail@plt+0x112f4>
   24718:	rsb	ip, r2, sl
   2471c:	cmp	ip, #9
   24720:	movhi	r4, #10
   24724:	strhi	r4, [sp, #96]	; 0x60
   24728:	bls	247ec <__assert_fail@plt+0x112e8>
   2472c:	ldrb	ip, [r2, #1]
   24730:	add	r2, r2, #2
   24734:	str	r2, [sp, #32]
   24738:	and	r4, ip, #127	; 0x7f
   2473c:	tst	ip, #128	; 0x80
   24740:	uxtb	r2, r4
   24744:	lsr	ip, r2, #25
   24748:	lsl	r4, r2, #7
   2474c:	str	ip, [sp, #92]	; 0x5c
   24750:	str	r4, [sp, #88]	; 0x58
   24754:	ldrd	r2, [sp, #88]	; 0x58
   24758:	orr	r2, r2, r0
   2475c:	orr	r3, r3, r1
   24760:	bne	2477c <__assert_fail@plt+0x11278>
   24764:	cmp	r9, r2
   24768:	movcc	r9, r2
   2476c:	mov	r4, r2
   24770:	b	243f4 <__assert_fail@plt+0x10ef0>
   24774:	bne	24470 <__assert_fail@plt+0x10f6c>
   24778:	b	24494 <__assert_fail@plt+0x10f90>
   2477c:	ldr	r5, [sp, #32]
   24780:	mov	lr, #1
   24784:	strd	r2, [sp, #40]	; 0x28
   24788:	ldr	r3, [sp, #96]	; 0x60
   2478c:	add	lr, lr, #1
   24790:	cmp	r3, lr
   24794:	bls	24804 <__assert_fail@plt+0x11300>
   24798:	ldrb	r0, [r5], #1
   2479c:	rsb	r1, lr, lr, lsl #3
   247a0:	sub	r4, r1, #32
   247a4:	rsb	ip, r1, #32
   247a8:	and	r2, r0, #127	; 0x7f
   247ac:	tst	r0, #128	; 0x80
   247b0:	uxtb	r2, r2
   247b4:	lsl	r4, r2, r4
   247b8:	lsl	r1, r2, r1
   247bc:	orr	ip, r4, r2, lsr ip
   247c0:	str	r1, [sp, #72]	; 0x48
   247c4:	str	ip, [sp, #76]	; 0x4c
   247c8:	ldrd	r0, [sp, #40]	; 0x28
   247cc:	ldrd	r2, [sp, #72]	; 0x48
   247d0:	orr	r0, r0, r2
   247d4:	orr	r1, r1, r3
   247d8:	strd	r0, [sp, #40]	; 0x28
   247dc:	bne	24788 <__assert_fail@plt+0x11284>
   247e0:	mov	r2, r0
   247e4:	str	r5, [sp, #32]
   247e8:	b	24764 <__assert_fail@plt+0x11260>
   247ec:	cmp	ip, #1
   247f0:	strhi	ip, [sp, #96]	; 0x60
   247f4:	bhi	2472c <__assert_fail@plt+0x11228>
   247f8:	mvn	r9, #0
   247fc:	mov	r4, r9
   24800:	b	243f4 <__assert_fail@plt+0x10ef0>
   24804:	mvn	r9, #0
   24808:	str	r5, [sp, #32]
   2480c:	mov	r4, r9
   24810:	b	243f4 <__assert_fail@plt+0x10ef0>
   24814:	mov	r2, #5
   24818:	movw	r1, #8192	; 0x2000
   2481c:	mov	r0, #0
   24820:	movt	r1, #4
   24824:	bl	12d84 <dcgettext@plt>
   24828:	mov	r1, #0
   2482c:	mov	r2, r0
   24830:	mov	r0, #1
   24834:	bl	12f70 <error@plt>
   24838:	mov	r1, #10
   2483c:	bl	132dc <__overflow@plt>
   24840:	b	24520 <__assert_fail@plt+0x1101c>
   24844:	mov	r2, #5
   24848:	movw	r1, #54876	; 0xd65c
   2484c:	movt	r1, #3
   24850:	bl	12d84 <dcgettext@plt>
   24854:	mov	r4, r0
   24858:	mvn	r0, #0
   2485c:	bl	130a8 <elf_errmsg@plt>
   24860:	mov	r2, r4
   24864:	movw	r3, #7756	; 0x1e4c
   24868:	movt	r3, #4
   2486c:	str	r0, [sp]
   24870:	ldr	r0, [sp, #64]	; 0x40
   24874:	mov	r1, r0
   24878:	bl	12f70 <error@plt>
   2487c:	b	24494 <__assert_fail@plt+0x10f90>
   24880:	bl	12dc0 <__stack_chk_fail@plt>
   24884:	cmp	sl, r5
   24888:	bls	24a2c <__assert_fail@plt+0x11528>
   2488c:	rsb	r5, r5, sl
   24890:	cmp	r5, #9
   24894:	movhi	r6, #10
   24898:	bls	24a20 <__assert_fail@plt+0x1151c>
   2489c:	ldrb	ip, [r4, #2]
   248a0:	add	r9, r4, #3
   248a4:	and	r0, ip, #127	; 0x7f
   248a8:	tst	ip, #128	; 0x80
   248ac:	strne	sl, [sp, #52]	; 0x34
   248b0:	uxtb	r0, r0
   248b4:	lsl	r5, r0, #7
   248b8:	lsr	r4, r0, #25
   248bc:	str	r5, [sp, #40]	; 0x28
   248c0:	movne	r5, #1
   248c4:	str	r4, [sp, #44]	; 0x2c
   248c8:	ldrd	r0, [sp, #40]	; 0x28
   248cc:	orr	r0, r0, r2
   248d0:	orr	r1, r1, r3
   248d4:	strd	r0, [sp, #40]	; 0x28
   248d8:	bne	24944 <__assert_fail@plt+0x11440>
   248dc:	ldr	r1, [sp, #40]	; 0x28
   248e0:	b	24348 <__assert_fail@plt+0x10e44>
   248e4:	cmp	sl, r4
   248e8:	bls	249fc <__assert_fail@plt+0x114f8>
   248ec:	rsb	r4, r4, sl
   248f0:	cmp	r4, #9
   248f4:	movhi	fp, #10
   248f8:	bls	249f0 <__assert_fail@plt+0x114ec>
   248fc:	ldrb	r1, [r5, #2]
   24900:	add	r4, r5, #3
   24904:	and	r0, r1, #127	; 0x7f
   24908:	tst	r1, #128	; 0x80
   2490c:	uxtb	r0, r0
   24910:	lsl	ip, r0, #7
   24914:	lsr	r7, r0, #25
   24918:	str	ip, [sp, #40]	; 0x28
   2491c:	movne	ip, r4
   24920:	str	r7, [sp, #44]	; 0x2c
   24924:	ldrd	r0, [sp, #40]	; 0x28
   24928:	orr	r1, r1, r3
   2492c:	orr	r0, r0, r2
   24930:	strd	r0, [sp, #40]	; 0x28
   24934:	movne	r1, #1
   24938:	bne	24994 <__assert_fail@plt+0x11490>
   2493c:	ldr	r5, [sp, #40]	; 0x28
   24940:	b	242bc <__assert_fail@plt+0x10db8>
   24944:	add	r5, r5, #1
   24948:	cmp	r5, r6
   2494c:	bcs	249e4 <__assert_fail@plt+0x114e0>
   24950:	ldrb	r0, [r9], #1
   24954:	rsb	r1, r5, r5, lsl #3
   24958:	sub	r4, r1, #32
   2495c:	rsb	ip, r1, #32
   24960:	and	r2, r0, #127	; 0x7f
   24964:	tst	r0, #128	; 0x80
   24968:	uxtb	r2, r2
   2496c:	lsl	fp, r2, r4
   24970:	lsl	sl, r2, r1
   24974:	orr	fp, fp, r2, lsr ip
   24978:	ldrd	r2, [sp, #40]	; 0x28
   2497c:	orr	r2, r2, sl
   24980:	orr	r3, r3, fp
   24984:	strd	r2, [sp, #40]	; 0x28
   24988:	bne	24944 <__assert_fail@plt+0x11440>
   2498c:	ldr	sl, [sp, #52]	; 0x34
   24990:	b	248dc <__assert_fail@plt+0x113d8>
   24994:	add	r1, r1, #1
   24998:	cmp	r1, fp
   2499c:	bcs	249fc <__assert_fail@plt+0x114f8>
   249a0:	ldrb	ip, [r4], #1
   249a4:	rsb	r0, r1, r1, lsl #3
   249a8:	sub	r5, r0, #32
   249ac:	rsb	lr, r0, #32
   249b0:	and	r2, ip, #127	; 0x7f
   249b4:	tst	ip, #128	; 0x80
   249b8:	uxtb	r2, r2
   249bc:	lsl	r7, r2, r5
   249c0:	lsl	r6, r2, r0
   249c4:	orr	r7, r7, r2, lsr lr
   249c8:	ldrd	r2, [sp, #40]	; 0x28
   249cc:	orr	r2, r2, r6
   249d0:	orr	r3, r3, r7
   249d4:	strd	r2, [sp, #40]	; 0x28
   249d8:	beq	2493c <__assert_fail@plt+0x11438>
   249dc:	mov	ip, r4
   249e0:	b	24994 <__assert_fail@plt+0x11490>
   249e4:	ldr	sl, [sp, #52]	; 0x34
   249e8:	mvn	r1, #0
   249ec:	b	24348 <__assert_fail@plt+0x10e44>
   249f0:	cmp	r4, #1
   249f4:	movhi	fp, r4
   249f8:	bhi	248fc <__assert_fail@plt+0x113f8>
   249fc:	movw	r1, #7864	; 0x1eb8
   24a00:	mov	r0, #1
   24a04:	movt	r1, #4
   24a08:	mvn	r2, #0
   24a0c:	mov	r4, ip
   24a10:	bl	13204 <__printf_chk@plt>
   24a14:	mov	ip, #0
   24a18:	str	ip, [sp, #68]	; 0x44
   24a1c:	b	242e8 <__assert_fail@plt+0x10de4>
   24a20:	cmp	r5, #1
   24a24:	movhi	r6, r5
   24a28:	bhi	2489c <__assert_fail@plt+0x11398>
   24a2c:	mvn	r1, #0
   24a30:	b	24348 <__assert_fail@plt+0x10e44>
   24a34:	rsb	lr, ip, r9
   24a38:	and	r1, r3, #127	; 0x7f
   24a3c:	cmp	lr, #8
   24a40:	mov	r3, #0
   24a44:	uxtb	r2, r1
   24a48:	strd	r2, [sp, #40]	; 0x28
   24a4c:	movhi	lr, #9
   24a50:	bls	24b3c <__assert_fail@plt+0x11638>
   24a54:	ldrb	r3, [ip, #1]
   24a58:	add	r5, ip, #2
   24a5c:	uxtb	r2, r3
   24a60:	tst	r2, #128	; 0x80
   24a64:	moveq	r1, #7
   24a68:	bne	24ad8 <__assert_fail@plt+0x115d4>
   24a6c:	sbfx	r2, r2, #0, #7
   24a70:	ldr	r3, [sp, #40]	; 0x28
   24a74:	sxtb	r2, r2
   24a78:	lsl	r2, r2, r1
   24a7c:	orr	r6, r2, r3
   24a80:	b	24580 <__assert_fail@plt+0x1107c>
   24a84:	and	r3, r3, #127	; 0x7f
   24a88:	cmp	r9, r5
   24a8c:	mov	r1, #0
   24a90:	uxtb	r0, r3
   24a94:	bls	24b74 <__assert_fail@plt+0x11670>
   24a98:	rsb	r6, r5, r9
   24a9c:	cmp	r6, #8
   24aa0:	movhi	r6, #9
   24aa4:	bls	24b6c <__assert_fail@plt+0x11668>
   24aa8:	ldrb	r3, [r5, #1]
   24aac:	add	ip, r5, #2
   24ab0:	uxtb	r2, r3
   24ab4:	tst	r2, #128	; 0x80
   24ab8:	moveq	lr, #7
   24abc:	bne	24b7c <__assert_fail@plt+0x11678>
   24ac0:	sbfx	r2, r2, #0, #7
   24ac4:	sxtb	r2, r2
   24ac8:	asr	r3, r2, #31
   24acc:	lsl	r2, r2, lr
   24ad0:	orr	r0, r2, r0
   24ad4:	b	24544 <__assert_fail@plt+0x11040>
   24ad8:	mov	r1, #1
   24adc:	str	r7, [sp, #52]	; 0x34
   24ae0:	and	r3, r3, #127	; 0x7f
   24ae4:	rsb	ip, r1, r1, lsl #3
   24ae8:	add	r1, r1, #1
   24aec:	uxtb	r2, r3
   24af0:	sub	r3, ip, #32
   24af4:	cmp	r1, lr
   24af8:	lsl	r7, r2, r3
   24afc:	rsb	r3, ip, #32
   24b00:	orr	r7, r7, r2, lsr r3
   24b04:	lsl	r6, r2, ip
   24b08:	ldrd	r2, [sp, #40]	; 0x28
   24b0c:	orr	r2, r2, r6
   24b10:	orr	r3, r3, r7
   24b14:	strd	r2, [sp, #40]	; 0x28
   24b18:	bcs	24be8 <__assert_fail@plt+0x116e4>
   24b1c:	ldrb	r3, [r5], #1
   24b20:	uxtb	r2, r3
   24b24:	tst	r2, #128	; 0x80
   24b28:	bne	24ae0 <__assert_fail@plt+0x115dc>
   24b2c:	strd	r6, [sp, #104]	; 0x68
   24b30:	rsb	r1, r1, r1, lsl #3
   24b34:	ldr	r7, [sp, #52]	; 0x34
   24b38:	b	24a6c <__assert_fail@plt+0x11568>
   24b3c:	cmp	lr, #1
   24b40:	bhi	24a54 <__assert_fail@plt+0x11550>
   24b44:	mvn	r1, #0
   24b48:	mov	r3, r0
   24b4c:	str	r1, [sp]
   24b50:	mov	r2, r7
   24b54:	movw	r1, #8104	; 0x1fa8
   24b58:	mov	r0, #1
   24b5c:	movt	r1, #4
   24b60:	bl	13204 <__printf_chk@plt>
   24b64:	mov	r2, #0
   24b68:	b	245b8 <__assert_fail@plt+0x110b4>
   24b6c:	cmp	r6, #1
   24b70:	bhi	24aa8 <__assert_fail@plt+0x115a4>
   24b74:	mvn	r0, #0
   24b78:	b	24560 <__assert_fail@plt+0x1105c>
   24b7c:	mov	lr, #1
   24b80:	str	r6, [sp, #40]	; 0x28
   24b84:	and	r3, r3, #127	; 0x7f
   24b88:	rsb	r5, lr, lr, lsl #3
   24b8c:	ldr	r6, [sp, #40]	; 0x28
   24b90:	add	lr, lr, #1
   24b94:	uxtb	r2, r3
   24b98:	sub	r3, r5, #32
   24b9c:	cmp	r6, lr
   24ba0:	lsl	r3, r2, r3
   24ba4:	str	r3, [sp, #84]	; 0x54
   24ba8:	ldr	r6, [sp, #84]	; 0x54
   24bac:	rsb	r3, r5, #32
   24bb0:	lsl	r5, r2, r5
   24bb4:	str	r5, [sp, #80]	; 0x50
   24bb8:	orr	r3, r6, r2, lsr r3
   24bbc:	str	r3, [sp, #84]	; 0x54
   24bc0:	ldrd	r2, [sp, #80]	; 0x50
   24bc4:	orr	r0, r0, r2
   24bc8:	orr	r1, r1, r3
   24bcc:	bls	24b74 <__assert_fail@plt+0x11670>
   24bd0:	ldrb	r3, [ip], #1
   24bd4:	uxtb	r2, r3
   24bd8:	tst	r2, #128	; 0x80
   24bdc:	bne	24b84 <__assert_fail@plt+0x11680>
   24be0:	rsb	lr, lr, lr, lsl #3
   24be4:	b	24ac0 <__assert_fail@plt+0x115bc>
   24be8:	strd	r6, [sp, #104]	; 0x68
   24bec:	ldr	r7, [sp, #52]	; 0x34
   24bf0:	b	24b44 <__assert_fail@plt+0x11640>
   24bf4:	cmp	r1, #14
   24bf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bfc:	mov	sl, r1
   24c00:	sub	sp, sp, #28
   24c04:	mov	fp, r2
   24c08:	mov	r5, r3
   24c0c:	beq	250dc <__assert_fail@plt+0x11bd8>
   24c10:	bgt	24cf8 <__assert_fail@plt+0x117f4>
   24c14:	cmp	r1, #8
   24c18:	beq	250a8 <__assert_fail@plt+0x11ba4>
   24c1c:	ble	24c8c <__assert_fail@plt+0x11788>
   24c20:	cmp	r1, #11
   24c24:	beq	25198 <__assert_fail@plt+0x11c94>
   24c28:	bgt	24d58 <__assert_fail@plt+0x11854>
   24c2c:	cmp	r1, #9
   24c30:	beq	25200 <__assert_fail@plt+0x11cfc>
   24c34:	cmp	r1, #10
   24c38:	bne	25060 <__assert_fail@plt+0x11b5c>
   24c3c:	rsb	r3, r2, r3
   24c40:	cmp	r3, #0
   24c44:	ble	24c6c <__assert_fail@plt+0x11768>
   24c48:	ldrb	lr, [r2]
   24c4c:	add	r4, r2, #1
   24c50:	rsb	r2, r4, r5
   24c54:	mov	r3, #0
   24c58:	mov	r7, #0
   24c5c:	uxtb	r6, lr
   24c60:	cmp	r7, r3
   24c64:	cmpeq	r6, r2
   24c68:	bls	25360 <__assert_fail@plt+0x11e5c>
   24c6c:	mov	r0, #0
   24c70:	movw	r2, #2292	; 0x8f4
   24c74:	mov	r1, r0
   24c78:	movt	r2, #4
   24c7c:	bl	12f70 <error@plt>
   24c80:	mov	r0, r5
   24c84:	add	sp, sp, #28
   24c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c8c:	cmp	r1, #5
   24c90:	beq	251c0 <__assert_fail@plt+0x11cbc>
   24c94:	bgt	24da8 <__assert_fail@plt+0x118a4>
   24c98:	cmp	r1, #3
   24c9c:	beq	25284 <__assert_fail@plt+0x11d80>
   24ca0:	cmp	r1, #4
   24ca4:	bne	25060 <__assert_fail@plt+0x11b5c>
   24ca8:	rsb	r3, r2, r3
   24cac:	cmp	r3, #3
   24cb0:	ble	24c6c <__assert_fail@plt+0x11768>
   24cb4:	ldrb	r3, [r0, #84]	; 0x54
   24cb8:	ldr	lr, [r2]
   24cbc:	cmp	r3, #0
   24cc0:	bne	255d4 <__assert_fail@plt+0x120d0>
   24cc4:	add	fp, fp, #4
   24cc8:	mov	r3, #0
   24ccc:	rsb	r2, fp, r5
   24cd0:	mov	r6, lr
   24cd4:	mov	r7, #0
   24cd8:	cmp	r7, r3
   24cdc:	cmpeq	r6, r2
   24ce0:	bhi	24c6c <__assert_fail@plt+0x11768>
   24ce4:	mov	r0, lr
   24ce8:	mov	r1, fp
   24cec:	add	r4, fp, lr
   24cf0:	bl	14210 <__assert_fail@plt+0xd0c>
   24cf4:	b	24f44 <__assert_fail@plt+0x11a40>
   24cf8:	cmp	r1, #31
   24cfc:	beq	250dc <__assert_fail@plt+0x11bd8>
   24d00:	ble	24df0 <__assert_fail@plt+0x118ec>
   24d04:	cmp	r1, #39	; 0x27
   24d08:	beq	24f80 <__assert_fail@plt+0x11a7c>
   24d0c:	bgt	24e50 <__assert_fail@plt+0x1194c>
   24d10:	cmp	r1, #37	; 0x25
   24d14:	beq	2517c <__assert_fail@plt+0x11c78>
   24d18:	cmp	r1, #38	; 0x26
   24d1c:	bne	25060 <__assert_fail@plt+0x11b5c>
   24d20:	rsb	r3, r2, r3
   24d24:	cmp	r3, #1
   24d28:	ble	24c6c <__assert_fail@plt+0x11768>
   24d2c:	ldrb	r3, [r0, #84]	; 0x54
   24d30:	add	r4, fp, #2
   24d34:	mov	r7, #0
   24d38:	cmp	r3, #0
   24d3c:	ldrhne	r3, [r2]
   24d40:	ldrheq	r6, [fp]
   24d44:	lslne	r2, r3, #8
   24d48:	orrne	r3, r2, r3, lsr #8
   24d4c:	uxthne	r6, r3
   24d50:	uxth	r6, r6
   24d54:	b	24e7c <__assert_fail@plt+0x11978>
   24d58:	cmp	r1, #12
   24d5c:	beq	25304 <__assert_fail@plt+0x11e00>
   24d60:	cmp	r1, #13
   24d64:	bne	25060 <__assert_fail@plt+0x11b5c>
   24d68:	rsb	r3, r2, r3
   24d6c:	cmp	r3, #0
   24d70:	ble	24c6c <__assert_fail@plt+0x11768>
   24d74:	ldrb	r1, [r2]
   24d78:	add	r4, r2, #1
   24d7c:	uxtb	r2, r1
   24d80:	tst	r2, #128	; 0x80
   24d84:	bne	25508 <__assert_fail@plt+0x12004>
   24d88:	sbfx	r2, r2, #0, #7
   24d8c:	sxtb	r2, r2
   24d90:	asr	r3, r2, #31
   24d94:	movw	r1, #8236	; 0x202c
   24d98:	mov	r0, #1
   24d9c:	movt	r1, #4
   24da0:	bl	13204 <__printf_chk@plt>
   24da4:	b	24f44 <__assert_fail@plt+0x11a40>
   24da8:	cmp	r1, #6
   24dac:	beq	252d0 <__assert_fail@plt+0x11dcc>
   24db0:	cmp	r1, #7
   24db4:	bne	25060 <__assert_fail@plt+0x11b5c>
   24db8:	rsb	r3, r2, r3
   24dbc:	cmp	r3, #7
   24dc0:	ble	24c6c <__assert_fail@plt+0x11768>
   24dc4:	ldrb	r3, [r0, #84]	; 0x54
   24dc8:	cmp	r3, #0
   24dcc:	ldreq	r2, [r2]
   24dd0:	ldreq	r3, [fp, #4]
   24dd4:	bne	254f4 <__assert_fail@plt+0x11ff0>
   24dd8:	movw	r1, #8236	; 0x202c
   24ddc:	mov	r0, #1
   24de0:	movt	r1, #4
   24de4:	add	r4, fp, #8
   24de8:	bl	13204 <__printf_chk@plt>
   24dec:	b	24f44 <__assert_fail@plt+0x11a40>
   24df0:	cmp	r1, #26
   24df4:	beq	24fc4 <__assert_fail@plt+0x11ac0>
   24df8:	bgt	24f50 <__assert_fail@plt+0x11a4c>
   24dfc:	cmp	r1, #15
   24e00:	beq	25250 <__assert_fail@plt+0x11d4c>
   24e04:	cmp	r1, #23
   24e08:	bne	25060 <__assert_fail@plt+0x11b5c>
   24e0c:	ldr	r9, [sp, #64]	; 0x40
   24e10:	rsb	r3, r2, r3
   24e14:	cmp	r9, r3
   24e18:	bhi	24c6c <__assert_fail@plt+0x11768>
   24e1c:	cmp	r9, #8
   24e20:	ldrb	r3, [r0, #84]	; 0x54
   24e24:	beq	25394 <__assert_fail@plt+0x11e90>
   24e28:	cmp	r3, #0
   24e2c:	ldr	r2, [r2]
   24e30:	bne	253c4 <__assert_fail@plt+0x11ec0>
   24e34:	add	r4, fp, #4
   24e38:	mov	r3, #0
   24e3c:	movw	r1, #8256	; 0x2040
   24e40:	mov	r0, #1
   24e44:	movt	r1, #4
   24e48:	bl	13204 <__printf_chk@plt>
   24e4c:	b	24f44 <__assert_fail@plt+0x11a40>
   24e50:	cmp	r1, #40	; 0x28
   24e54:	bne	24fb8 <__assert_fail@plt+0x11ab4>
   24e58:	rsb	r3, r2, r3
   24e5c:	cmp	r3, #3
   24e60:	ble	24c6c <__assert_fail@plt+0x11768>
   24e64:	ldrb	r3, [r0, #84]	; 0x54
   24e68:	ldr	r6, [r2]
   24e6c:	cmp	r3, #0
   24e70:	bne	25478 <__assert_fail@plt+0x11f74>
   24e74:	add	r4, fp, #4
   24e78:	mov	r7, #0
   24e7c:	ldr	r1, [r0, #60]	; 0x3c
   24e80:	cmp	r1, #0
   24e84:	beq	2509c <__assert_fail@plt+0x11b98>
   24e88:	ldr	ip, [r1, #12]
   24e8c:	ldrd	r2, [sp, #72]	; 0x48
   24e90:	rsbs	r2, r2, ip
   24e94:	rsc	r3, r3, #0
   24e98:	cmp	r7, r3
   24e9c:	cmpeq	r6, r2
   24ea0:	bhi	2509c <__assert_fail@plt+0x11b98>
   24ea4:	ldr	r9, [sp, #72]	; 0x48
   24ea8:	ldr	r2, [r1]
   24eac:	add	r3, r6, r9
   24eb0:	ldr	r1, [sp, #64]	; 0x40
   24eb4:	rsb	ip, r3, ip
   24eb8:	add	r3, r2, r3
   24ebc:	cmp	r1, ip
   24ec0:	bhi	2509c <__assert_fail@plt+0x11b98>
   24ec4:	cmp	r1, #8
   24ec8:	ldrb	r2, [r0, #84]	; 0x54
   24ecc:	beq	25374 <__assert_fail@plt+0x11e70>
   24ed0:	cmp	r2, #0
   24ed4:	ldr	r8, [r3]
   24ed8:	bne	255cc <__assert_fail@plt+0x120c8>
   24edc:	mov	r9, #0
   24ee0:	ldr	r3, [r0, #56]	; 0x38
   24ee4:	cmp	r3, #0
   24ee8:	beq	2509c <__assert_fail@plt+0x11b98>
   24eec:	ldr	r2, [r3, #12]
   24ef0:	mov	r1, #0
   24ef4:	mov	r0, r2
   24ef8:	cmp	r9, r1
   24efc:	cmpeq	r8, r0
   24f00:	bcs	2509c <__assert_fail@plt+0x11b98>
   24f04:	ldr	r3, [r3]
   24f08:	rsb	r2, r8, r2
   24f0c:	mov	r1, #0
   24f10:	add	r8, r3, r8
   24f14:	mov	r0, r8
   24f18:	bl	13270 <memchr@plt>
   24f1c:	movw	r3, #8172	; 0x1fec
   24f20:	movt	r3, #4
   24f24:	cmp	r0, #0
   24f28:	moveq	r8, r3
   24f2c:	movw	r1, #8244	; 0x2034
   24f30:	strd	r6, [sp]
   24f34:	mov	r2, r8
   24f38:	mov	r0, #1
   24f3c:	movt	r1, #4
   24f40:	bl	13204 <__printf_chk@plt>
   24f44:	mov	r0, r4
   24f48:	add	sp, sp, #28
   24f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f50:	cmp	r1, #29
   24f54:	beq	250dc <__assert_fail@plt+0x11bd8>
   24f58:	cmp	r1, #30
   24f5c:	bne	25060 <__assert_fail@plt+0x11b5c>
   24f60:	rsb	r3, r2, r3
   24f64:	cmp	r3, #15
   24f68:	ble	24c6c <__assert_fail@plt+0x11768>
   24f6c:	mov	r0, #16
   24f70:	mov	r1, r2
   24f74:	bl	14210 <__assert_fail@plt+0xd0c>
   24f78:	add	r4, fp, #16
   24f7c:	b	24f44 <__assert_fail@plt+0x11a40>
   24f80:	rsb	r3, r2, r3
   24f84:	cmp	r3, #2
   24f88:	ble	24c6c <__assert_fail@plt+0x11768>
   24f8c:	ldrb	r3, [r0, #84]	; 0x54
   24f90:	add	r4, fp, #3
   24f94:	mov	r7, #0
   24f98:	cmp	r3, #0
   24f9c:	ldrhne	r3, [r2]
   24fa0:	ldrheq	r6, [fp]
   24fa4:	lslne	r2, r3, #8
   24fa8:	orrne	r3, r2, r3, lsr #8
   24fac:	uxthne	r6, r3
   24fb0:	uxth	r6, r6
   24fb4:	b	24e7c <__assert_fail@plt+0x11978>
   24fb8:	movw	r3, #7938	; 0x1f02
   24fbc:	cmp	r1, r3
   24fc0:	bne	25060 <__assert_fail@plt+0x11b5c>
   24fc4:	rsb	r3, fp, r5
   24fc8:	cmp	r3, #0
   24fcc:	ble	24c6c <__assert_fail@plt+0x11768>
   24fd0:	ldrb	r6, [fp]
   24fd4:	add	r4, fp, #1
   24fd8:	mov	r7, #0
   24fdc:	tst	r6, #128	; 0x80
   24fe0:	and	r6, r6, #127	; 0x7f
   24fe4:	uxtb	r6, r6
   24fe8:	beq	24e7c <__assert_fail@plt+0x11978>
   24fec:	cmp	r5, fp
   24ff0:	bls	255e8 <__assert_fail@plt+0x120e4>
   24ff4:	cmp	r3, #10
   24ff8:	movcc	lr, r3
   24ffc:	movcs	lr, #10
   25000:	mov	r1, #1
   25004:	mov	r5, #7
   25008:	mul	ip, r5, r1
   2500c:	cmp	r1, lr
   25010:	mov	r3, #0
   25014:	str	r3, [sp, #20]
   25018:	sub	r9, ip, #32
   2501c:	rsb	r8, ip, #32
   25020:	bcs	255dc <__assert_fail@plt+0x120d8>
   25024:	ldrb	r3, [r4], #1
   25028:	and	r2, r3, #127	; 0x7f
   2502c:	tst	r3, #128	; 0x80
   25030:	uxtb	r2, r2
   25034:	lsl	r9, r2, r9
   25038:	lsl	ip, r2, ip
   2503c:	orr	r8, r9, r2, lsr r8
   25040:	str	ip, [sp, #16]
   25044:	str	r8, [sp, #20]
   25048:	ldrd	r2, [sp, #16]
   2504c:	orr	r6, r6, r2
   25050:	orr	r7, r7, r3
   25054:	beq	24e7c <__assert_fail@plt+0x11978>
   25058:	add	r1, r1, #1
   2505c:	b	25008 <__assert_fail@plt+0x11b04>
   25060:	mov	r2, #5
   25064:	movw	r1, #8264	; 0x2048
   25068:	mov	r0, #0
   2506c:	movt	r1, #4
   25070:	bl	12d84 <dcgettext@plt>
   25074:	mov	r4, r0
   25078:	mov	r0, sl
   2507c:	bl	1748c <__assert_fail@plt+0x3f88>
   25080:	mov	r2, r4
   25084:	mov	r3, r0
   25088:	mov	r0, #0
   2508c:	mov	r1, r0
   25090:	bl	12f70 <error@plt>
   25094:	mov	r0, r5
   25098:	b	24f48 <__assert_fail@plt+0x11a44>
   2509c:	movw	r8, #8172	; 0x1fec
   250a0:	movt	r8, #4
   250a4:	b	24f2c <__assert_fail@plt+0x11a28>
   250a8:	mov	r0, r2
   250ac:	mov	r1, #0
   250b0:	rsb	r2, r2, r3
   250b4:	bl	13270 <memchr@plt>
   250b8:	subs	r4, r0, #0
   250bc:	beq	24c6c <__assert_fail@plt+0x11768>
   250c0:	mov	r2, fp
   250c4:	movw	r1, #11880	; 0x2e68
   250c8:	mov	r0, #1
   250cc:	movt	r1, #4
   250d0:	add	r4, r4, r0
   250d4:	bl	13204 <__printf_chk@plt>
   250d8:	b	24f44 <__assert_fail@plt+0x11a40>
   250dc:	ldr	r2, [sp, #64]	; 0x40
   250e0:	rsb	r3, fp, r5
   250e4:	cmp	r3, r2
   250e8:	bcc	24c6c <__assert_fail@plt+0x11768>
   250ec:	cmp	r2, #8
   250f0:	ldrb	r3, [r0, #84]	; 0x54
   250f4:	beq	253ac <__assert_fail@plt+0x11ea8>
   250f8:	cmp	r3, #0
   250fc:	ldr	r6, [fp]
   25100:	bne	2545c <__assert_fail@plt+0x11f58>
   25104:	add	r4, fp, #4
   25108:	mov	r7, #0
   2510c:	cmp	sl, #14
   25110:	beq	25358 <__assert_fail@plt+0x11e54>
   25114:	cmp	sl, #31
   25118:	bne	25340 <__assert_fail@plt+0x11e3c>
   2511c:	ldr	r3, [r0, #36]	; 0x24
   25120:	cmp	r3, #0
   25124:	beq	2534c <__assert_fail@plt+0x11e48>
   25128:	ldr	r2, [r3, #12]
   2512c:	mov	r1, #0
   25130:	mov	r0, r2
   25134:	cmp	r7, r1
   25138:	cmpeq	r6, r0
   2513c:	bcs	2534c <__assert_fail@plt+0x11e48>
   25140:	ldr	r5, [r3]
   25144:	rsb	r2, r6, r2
   25148:	mov	r1, #0
   2514c:	add	r5, r5, r6
   25150:	mov	r0, r5
   25154:	bl	13270 <memchr@plt>
   25158:	cmp	r0, #0
   2515c:	beq	2534c <__assert_fail@plt+0x11e48>
   25160:	strd	r6, [sp]
   25164:	mov	r2, r5
   25168:	movw	r1, #8244	; 0x2034
   2516c:	mov	r0, #1
   25170:	movt	r1, #4
   25174:	bl	13204 <__printf_chk@plt>
   25178:	b	24f44 <__assert_fail@plt+0x11a40>
   2517c:	rsb	r3, r2, r3
   25180:	cmp	r3, #0
   25184:	ble	24c6c <__assert_fail@plt+0x11768>
   25188:	add	r4, r2, #1
   2518c:	ldrb	r6, [r2]
   25190:	mov	r7, #0
   25194:	b	24e7c <__assert_fail@plt+0x11978>
   25198:	rsb	r3, r2, r3
   2519c:	cmp	r3, #0
   251a0:	ble	24c6c <__assert_fail@plt+0x11768>
   251a4:	movw	r1, #8232	; 0x2028
   251a8:	mov	r0, #1
   251ac:	movt	r1, #4
   251b0:	ldrb	r2, [r2]
   251b4:	add	r4, fp, r0
   251b8:	bl	13204 <__printf_chk@plt>
   251bc:	b	24f44 <__assert_fail@plt+0x11a40>
   251c0:	rsb	r3, r2, r3
   251c4:	cmp	r3, #1
   251c8:	ble	24c6c <__assert_fail@plt+0x11768>
   251cc:	ldrb	r3, [r0, #84]	; 0x54
   251d0:	movw	r1, #8232	; 0x2028
   251d4:	mov	r0, #1
   251d8:	movt	r1, #4
   251dc:	cmp	r3, #0
   251e0:	add	r4, fp, #2
   251e4:	ldrhne	r3, [r2]
   251e8:	ldrheq	r2, [fp]
   251ec:	lslne	r2, r3, #8
   251f0:	orrne	r3, r2, r3, lsr #8
   251f4:	uxthne	r2, r3
   251f8:	bl	13204 <__printf_chk@plt>
   251fc:	b	24f44 <__assert_fail@plt+0x11a40>
   25200:	rsb	r0, r2, r3
   25204:	cmp	r0, #0
   25208:	ble	24c6c <__assert_fail@plt+0x11768>
   2520c:	ldrb	r2, [r2]
   25210:	add	lr, fp, #1
   25214:	mov	r3, #0
   25218:	tst	r2, #128	; 0x80
   2521c:	and	r2, r2, #127	; 0x7f
   25220:	uxtb	r2, r2
   25224:	bne	25480 <__assert_fail@plt+0x11f7c>
   25228:	rsb	r0, lr, r5
   2522c:	mov	r1, #0
   25230:	cmp	r1, r3
   25234:	cmpeq	r0, r2
   25238:	bcc	24c6c <__assert_fail@plt+0x11768>
   2523c:	mov	r0, r2
   25240:	mov	r1, lr
   25244:	add	r4, lr, r2
   25248:	bl	14210 <__assert_fail@plt+0xd0c>
   2524c:	b	24f44 <__assert_fail@plt+0x11a40>
   25250:	rsb	r3, r2, r3
   25254:	cmp	r3, #0
   25258:	ble	24c6c <__assert_fail@plt+0x11768>
   2525c:	ldrb	r0, [r2]
   25260:	add	r4, r2, #1
   25264:	mov	r1, #0
   25268:	tst	r0, #128	; 0x80
   2526c:	and	r0, r0, #127	; 0x7f
   25270:	uxtb	r0, r0
   25274:	bne	253e0 <__assert_fail@plt+0x11edc>
   25278:	mov	r2, r0
   2527c:	mov	r3, r1
   25280:	b	24d94 <__assert_fail@plt+0x11890>
   25284:	rsb	r3, r2, r3
   25288:	cmp	r3, #1
   2528c:	ble	24c6c <__assert_fail@plt+0x11768>
   25290:	ldrb	r3, [r0, #84]	; 0x54
   25294:	add	fp, fp, #2
   25298:	mov	r7, #0
   2529c:	cmp	r3, #0
   252a0:	ldrhne	r3, [r2]
   252a4:	ldrheq	lr, [fp, #-2]
   252a8:	lslne	r2, r3, #8
   252ac:	orrne	r3, r2, r3, lsr #8
   252b0:	rsb	r2, fp, r5
   252b4:	uxthne	lr, r3
   252b8:	mov	r3, #0
   252bc:	uxth	r6, lr
   252c0:	cmp	r7, r3
   252c4:	cmpeq	r6, r2
   252c8:	bhi	24c6c <__assert_fail@plt+0x11768>
   252cc:	b	24ce4 <__assert_fail@plt+0x117e0>
   252d0:	rsb	r3, r2, r3
   252d4:	cmp	r3, #3
   252d8:	ble	24c6c <__assert_fail@plt+0x11768>
   252dc:	ldrb	r3, [r0, #84]	; 0x54
   252e0:	ldr	r2, [r2]
   252e4:	cmp	r3, #0
   252e8:	bne	25440 <__assert_fail@plt+0x11f3c>
   252ec:	movw	r1, #8232	; 0x2028
   252f0:	mov	r0, #1
   252f4:	movt	r1, #4
   252f8:	add	r4, fp, #4
   252fc:	bl	13204 <__printf_chk@plt>
   25300:	b	24f44 <__assert_fail@plt+0x11a40>
   25304:	rsb	r3, r2, r3
   25308:	cmp	r3, #0
   2530c:	ble	24c6c <__assert_fail@plt+0x11768>
   25310:	ldrb	r3, [r2]
   25314:	add	r4, r2, #1
   25318:	movw	r1, #11880	; 0x2e68
   2531c:	mov	r0, #1
   25320:	cmp	r3, #0
   25324:	movw	r3, #37712	; 0x9350
   25328:	movt	r3, #5
   2532c:	movt	r1, #4
   25330:	ldrne	r2, [r3, #116]	; 0x74
   25334:	ldreq	r2, [r3, #120]	; 0x78
   25338:	bl	13204 <__printf_chk@plt>
   2533c:	b	24f44 <__assert_fail@plt+0x11a40>
   25340:	bl	13444 <dwarf_getalt@plt>
   25344:	cmp	r0, #0
   25348:	bne	25358 <__assert_fail@plt+0x11e54>
   2534c:	movw	r5, #8172	; 0x1fec
   25350:	movt	r5, #4
   25354:	b	25160 <__assert_fail@plt+0x11c5c>
   25358:	ldr	r3, [r0, #56]	; 0x38
   2535c:	b	25120 <__assert_fail@plt+0x11c1c>
   25360:	mov	r1, r4
   25364:	mov	r0, lr
   25368:	add	r4, r4, lr
   2536c:	bl	14210 <__assert_fail@plt+0xd0c>
   25370:	b	24f44 <__assert_fail@plt+0x11a40>
   25374:	cmp	r2, #0
   25378:	ldreq	r8, [r3]
   2537c:	ldreq	r9, [r3, #4]
   25380:	ldrne	r2, [r3]
   25384:	ldrne	r3, [r3, #4]
   25388:	revne	r9, r2
   2538c:	revne	r8, r3
   25390:	b	24ee0 <__assert_fail@plt+0x119dc>
   25394:	cmp	r3, #0
   25398:	ldreq	r2, [r2]
   2539c:	ldreq	r3, [fp, #4]
   253a0:	bne	25464 <__assert_fail@plt+0x11f60>
   253a4:	add	r4, fp, #8
   253a8:	b	24e3c <__assert_fail@plt+0x11938>
   253ac:	cmp	r3, #0
   253b0:	ldreq	r6, [fp]
   253b4:	ldreq	r7, [fp, #4]
   253b8:	bne	253cc <__assert_fail@plt+0x11ec8>
   253bc:	add	r4, fp, #8
   253c0:	b	2510c <__assert_fail@plt+0x11c08>
   253c4:	rev	r2, r2
   253c8:	b	24e34 <__assert_fail@plt+0x11930>
   253cc:	ldr	r3, [fp]
   253d0:	ldr	r2, [fp, #4]
   253d4:	rev	r7, r3
   253d8:	rev	r6, r2
   253dc:	b	253bc <__assert_fail@plt+0x11eb8>
   253e0:	cmp	r5, r2
   253e4:	bls	25454 <__assert_fail@plt+0x11f50>
   253e8:	cmp	r3, #10
   253ec:	movcc	r5, r3
   253f0:	movcs	r5, #10
   253f4:	mov	ip, #1
   253f8:	mov	r8, #7
   253fc:	mul	lr, r8, ip
   25400:	cmp	ip, r5
   25404:	sub	sl, lr, #32
   25408:	rsb	r9, lr, #32
   2540c:	bcs	25448 <__assert_fail@plt+0x11f44>
   25410:	ldrb	r3, [r4], #1
   25414:	and	r2, r3, #127	; 0x7f
   25418:	tst	r3, #128	; 0x80
   2541c:	uxtb	r2, r2
   25420:	lsl	r7, r2, sl
   25424:	lsl	r6, r2, lr
   25428:	orr	r7, r7, r2, lsr r9
   2542c:	orr	r0, r0, r6
   25430:	orr	r1, r1, r7
   25434:	beq	25278 <__assert_fail@plt+0x11d74>
   25438:	add	ip, ip, #1
   2543c:	b	253fc <__assert_fail@plt+0x11ef8>
   25440:	rev	r2, r2
   25444:	b	252ec <__assert_fail@plt+0x11de8>
   25448:	mvn	r2, #0
   2544c:	mov	r3, r2
   25450:	b	24d94 <__assert_fail@plt+0x11890>
   25454:	mov	r5, #0
   25458:	b	253f4 <__assert_fail@plt+0x11ef0>
   2545c:	rev	r6, r6
   25460:	b	25104 <__assert_fail@plt+0x11c00>
   25464:	ldr	r3, [fp]
   25468:	ldr	r2, [fp, #4]
   2546c:	rev	r3, r3
   25470:	rev	r2, r2
   25474:	b	253a4 <__assert_fail@plt+0x11ea0>
   25478:	rev	r6, r6
   2547c:	b	24e74 <__assert_fail@plt+0x11970>
   25480:	cmp	r5, fp
   25484:	bls	25580 <__assert_fail@plt+0x1207c>
   25488:	cmp	r0, #10
   2548c:	movcc	r8, r0
   25490:	movcs	r8, #10
   25494:	mov	r6, #1
   25498:	mov	r9, #7
   2549c:	mul	r7, r9, r6
   254a0:	cmp	r6, r8
   254a4:	mov	r1, #0
   254a8:	str	r1, [sp, #12]
   254ac:	sub	fp, r7, #32
   254b0:	rsb	sl, r7, #32
   254b4:	bcs	24c6c <__assert_fail@plt+0x11768>
   254b8:	ldrb	r1, [lr], #1
   254bc:	and	r0, r1, #127	; 0x7f
   254c0:	tst	r1, #128	; 0x80
   254c4:	uxtb	r0, r0
   254c8:	lsl	fp, r0, fp
   254cc:	lsl	r7, r0, r7
   254d0:	orr	sl, fp, r0, lsr sl
   254d4:	str	r7, [sp, #8]
   254d8:	str	sl, [sp, #12]
   254dc:	ldrd	r0, [sp, #8]
   254e0:	orr	r2, r2, r0
   254e4:	orr	r3, r3, r1
   254e8:	beq	25228 <__assert_fail@plt+0x11d24>
   254ec:	add	r6, r6, #1
   254f0:	b	2549c <__assert_fail@plt+0x11f98>
   254f4:	ldr	r3, [fp]
   254f8:	ldr	r2, [fp, #4]
   254fc:	rev	r3, r3
   25500:	rev	r2, r2
   25504:	b	24dd8 <__assert_fail@plt+0x118d4>
   25508:	and	r1, r1, #127	; 0x7f
   2550c:	cmp	r5, fp
   25510:	mov	r7, #0
   25514:	uxtb	r6, r1
   25518:	bls	255c4 <__assert_fail@plt+0x120c0>
   2551c:	cmp	r3, #9
   25520:	movcc	ip, r3
   25524:	movcs	ip, #9
   25528:	mov	r1, #1
   2552c:	mov	lr, #7
   25530:	cmp	r1, ip
   25534:	bcs	255b8 <__assert_fail@plt+0x120b4>
   25538:	ldrb	r3, [r4], #1
   2553c:	uxtb	r2, r3
   25540:	tst	r2, #128	; 0x80
   25544:	bne	25588 <__assert_fail@plt+0x12084>
   25548:	sbfx	r2, r2, #0, #7
   2554c:	mov	ip, #7
   25550:	mul	ip, ip, r1
   25554:	sxtb	r0, r2
   25558:	asr	r1, r0, #31
   2555c:	lsl	r2, r0, ip
   25560:	lsl	r3, r1, ip
   25564:	sub	r1, ip, #32
   25568:	orr	r3, r3, r0, lsl r1
   2556c:	rsb	r1, ip, #32
   25570:	orr	r3, r3, r0, lsr r1
   25574:	orr	r2, r2, r6
   25578:	orr	r3, r3, r7
   2557c:	b	24d94 <__assert_fail@plt+0x11890>
   25580:	mov	r8, #0
   25584:	b	25494 <__assert_fail@plt+0x11f90>
   25588:	mul	r0, lr, r1
   2558c:	and	r3, r3, #127	; 0x7f
   25590:	add	r1, r1, #1
   25594:	uxtb	r2, r3
   25598:	sub	r5, r0, #32
   2559c:	rsb	r3, r0, #32
   255a0:	lsl	r9, r2, r5
   255a4:	lsl	r8, r2, r0
   255a8:	orr	r9, r9, r2, lsr r3
   255ac:	orr	r6, r6, r8
   255b0:	orr	r7, r7, r9
   255b4:	b	25530 <__assert_fail@plt+0x1202c>
   255b8:	mvn	r2, #0
   255bc:	mvn	r3, #-2147483648	; 0x80000000
   255c0:	b	24d94 <__assert_fail@plt+0x11890>
   255c4:	mov	ip, #0
   255c8:	b	25528 <__assert_fail@plt+0x12024>
   255cc:	rev	r8, r8
   255d0:	b	24edc <__assert_fail@plt+0x119d8>
   255d4:	rev	lr, lr
   255d8:	b	24cc4 <__assert_fail@plt+0x117c0>
   255dc:	mvn	r6, #0
   255e0:	mvn	r7, #0
   255e4:	b	24e7c <__assert_fail@plt+0x11978>
   255e8:	mov	lr, #0
   255ec:	b	25000 <__assert_fail@plt+0x11afc>
   255f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255f4:	add	fp, sp, #32
   255f8:	sub	sp, sp, #436	; 0x1b4
   255fc:	movw	r4, #37688	; 0x9338
   25600:	movt	r4, #5
   25604:	mov	r2, #5
   25608:	mov	r6, r1
   2560c:	ldr	ip, [r4]
   25610:	movw	r1, #60928	; 0xee00
   25614:	mov	r0, #0
   25618:	movt	r1, #3
   2561c:	ldr	r5, [fp, #4]
   25620:	movw	r7, #37704	; 0x9348
   25624:	str	ip, [fp, #-40]	; 0xffffffd8
   25628:	ldr	ip, [fp, #8]
   2562c:	str	r4, [fp, #-252]	; 0xffffff04
   25630:	mov	r4, r3
   25634:	str	r7, [fp, #-244]	; 0xffffff0c
   25638:	str	ip, [fp, #-240]	; 0xffffff10
   2563c:	bl	12d84 <dcgettext@plt>
   25640:	mov	r8, r0
   25644:	mov	r0, r4
   25648:	bl	133d8 <elf_ndxscn@plt>
   2564c:	mov	r1, r5
   25650:	mov	r7, r0
   25654:	add	r0, r6, #16
   25658:	bl	1870c <__assert_fail@plt+0x5208>
   2565c:	mov	r2, r7
   25660:	mov	r3, r0
   25664:	ldrd	r0, [r5, #24]
   25668:	ldr	r5, [fp, #-244]	; 0xffffff0c
   2566c:	strd	r0, [sp]
   25670:	mov	r1, r8
   25674:	mov	r0, #1
   25678:	movt	r5, #5
   2567c:	str	r5, [fp, #-244]	; 0xffffff0c
   25680:	bl	13204 <__printf_chk@plt>
   25684:	ldr	r0, [r5]
   25688:	ldr	r3, [r0, #20]
   2568c:	ldr	r2, [r0, #24]
   25690:	cmp	r3, r2
   25694:	addcc	r1, r3, #1
   25698:	movcc	r2, #10
   2569c:	strcc	r1, [r0, #20]
   256a0:	strbcc	r2, [r3]
   256a4:	bcs	267c0 <__assert_fail@plt+0x132bc>
   256a8:	mov	r0, r4
   256ac:	mov	r1, #0
   256b0:	bl	12f34 <elf_getdata@plt>
   256b4:	subs	r6, r0, #0
   256b8:	str	r6, [fp, #-260]	; 0xfffffefc
   256bc:	beq	26d00 <__assert_fail@plt+0x137fc>
   256c0:	sub	r6, fp, #36	; 0x24
   256c4:	mov	r0, #0
   256c8:	mov	r2, r0
   256cc:	mov	r3, r0
   256d0:	mov	r8, r0
   256d4:	strd	r2, [r6, #-184]!	; 0xffffff48
   256d8:	str	r0, [fp, #-248]	; 0xffffff08
   256dc:	mov	r9, r0
   256e0:	mov	r4, r0
   256e4:	sub	r5, fp, #200	; 0xc8
   256e8:	ldr	sl, [fp, #-240]	; 0xffffff10
   256ec:	str	r6, [fp, #-236]	; 0xffffff14
   256f0:	b	256f8 <__assert_fail@plt+0x121f4>
   256f4:	ldrd	r8, [fp, #-220]	; 0xffffff24
   256f8:	ldr	ip, [fp, #-236]	; 0xffffff14
   256fc:	sub	lr, fp, #224	; 0xe0
   25700:	mov	r0, sl
   25704:	str	lr, [sp, #4]
   25708:	mov	r2, r8
   2570c:	mov	r3, r9
   25710:	str	ip, [sp]
   25714:	str	r4, [sp, #8]
   25718:	str	r4, [sp, #12]
   2571c:	str	r4, [sp, #16]
   25720:	bl	12c7c <dwarf_nextcu@plt>
   25724:	cmp	r0, #0
   25728:	bne	257ac <__assert_fail@plt+0x122a8>
   2572c:	ldr	r2, [fp, #-224]	; 0xffffff20
   25730:	mov	r0, sl
   25734:	str	r5, [sp]
   25738:	adds	r6, r8, r2
   2573c:	adc	r7, r9, #0
   25740:	mov	r2, r6
   25744:	mov	r3, r7
   25748:	bl	1309c <dwarf_offdie@plt>
   2574c:	cmp	r0, #0
   25750:	beq	256f4 <__assert_fail@plt+0x121f0>
   25754:	mov	r0, r5
   25758:	mov	r1, #16
   2575c:	sub	r2, fp, #184	; 0xb8
   25760:	bl	13114 <dwarf_attr@plt>
   25764:	cmp	r0, #0
   25768:	beq	256f4 <__assert_fail@plt+0x121f0>
   2576c:	sub	r0, fp, #184	; 0xb8
   25770:	sub	r1, fp, #212	; 0xd4
   25774:	bl	132a0 <dwarf_formudata@plt>
   25778:	subs	lr, r0, #0
   2577c:	bne	256f4 <__assert_fail@plt+0x121f0>
   25780:	ldm	r5, {r0, r1, r2, r3}
   25784:	sub	sp, sp, #40	; 0x28
   25788:	ldr	r7, [fp, #-248]	; 0xffffff08
   2578c:	add	ip, sp, #24
   25790:	ldrd	r8, [fp, #-212]	; 0xffffff2c
   25794:	str	lr, [sp, #48]	; 0x30
   25798:	str	r7, [sp, #52]	; 0x34
   2579c:	str	ip, [fp, #-248]	; 0xffffff08
   257a0:	stm	ip, {r0, r1, r2, r3}
   257a4:	strd	r8, [ip, #16]
   257a8:	b	256f4 <__assert_fail@plt+0x121f0>
   257ac:	ldr	r4, [fp, #-260]	; 0xfffffefc
   257b0:	ldr	r8, [r4]
   257b4:	ldr	r3, [r4, #12]
   257b8:	add	r7, r8, r3
   257bc:	cmp	r8, r7
   257c0:	bcs	25b0c <__assert_fail@plt+0x12608>
   257c4:	mov	r2, #5
   257c8:	movw	r1, #8284	; 0x205c
   257cc:	mov	r0, #0
   257d0:	movt	r1, #4
   257d4:	bl	12d84 <dcgettext@plt>
   257d8:	ldr	r5, [fp, #-260]	; 0xfffffefc
   257dc:	add	r9, r8, #2
   257e0:	ldr	r2, [r5]
   257e4:	rsb	r2, r2, r8
   257e8:	asr	r3, r2, #31
   257ec:	mov	r1, r0
   257f0:	mov	r0, #1
   257f4:	bl	13204 <__printf_chk@plt>
   257f8:	cmp	r7, r9
   257fc:	bcc	25b8c <__assert_fail@plt+0x12688>
   25800:	ldr	r6, [fp, #-240]	; 0xffffff10
   25804:	movw	r1, #8316	; 0x207c
   25808:	mov	r0, #0
   2580c:	movt	r1, #4
   25810:	ldrb	r3, [r6, #84]	; 0x54
   25814:	cmp	r3, #0
   25818:	ldrhne	r3, [r8]
   2581c:	ldrheq	r4, [r8]
   25820:	lslne	r2, r3, #8
   25824:	orrne	r3, r2, r3, lsr #8
   25828:	mov	r2, #5
   2582c:	uxthne	r4, r3
   25830:	bl	12d84 <dcgettext@plt>
   25834:	mov	r2, r4
   25838:	sub	r4, r4, #4
   2583c:	mov	r1, r0
   25840:	mov	r0, #1
   25844:	bl	13204 <__printf_chk@plt>
   25848:	cmp	r4, #1
   2584c:	bhi	25aec <__assert_fail@plt+0x125e8>
   25850:	add	r6, r8, #3
   25854:	cmp	r7, r6
   25858:	bcc	25b8c <__assert_fail@plt+0x12688>
   2585c:	mov	r2, #5
   25860:	movw	r1, #8388	; 0x20c4
   25864:	mov	r0, #0
   25868:	movt	r1, #4
   2586c:	ldrb	r4, [r9]
   25870:	bl	12d84 <dcgettext@plt>
   25874:	mov	r2, r4
   25878:	mov	r1, r0
   2587c:	mov	r0, #1
   25880:	bl	13204 <__printf_chk@plt>
   25884:	cmp	r4, #0
   25888:	bne	25cec <__assert_fail@plt+0x127e8>
   2588c:	mov	r0, #10
   25890:	mov	r5, #4
   25894:	bl	131b0 <putchar@plt>
   25898:	mov	r2, #5
   2589c:	mov	r0, r4
   258a0:	movw	r1, #8820	; 0x2274
   258a4:	movt	r1, #4
   258a8:	str	r5, [fp, #-268]	; 0xfffffef4
   258ac:	bl	12d84 <dcgettext@plt>
   258b0:	mov	r2, r5
   258b4:	mov	r8, r4
   258b8:	mov	r1, r0
   258bc:	mov	r0, #1
   258c0:	bl	13204 <__printf_chk@plt>
   258c4:	mov	r9, #0
   258c8:	mov	r4, #0
   258cc:	ldr	r0, [fp, #-240]	; 0xffffff10
   258d0:	str	r4, [sp]
   258d4:	mov	r1, r4
   258d8:	str	r4, [sp, #4]
   258dc:	mov	r3, r4
   258e0:	str	r4, [sp, #8]
   258e4:	sub	r2, fp, #184	; 0xb8
   258e8:	bl	12d0c <dwarf_get_units@plt>
   258ec:	cmp	r0, r4
   258f0:	bne	25c64 <__assert_fail@plt+0x12760>
   258f4:	ldr	r4, [fp, #-184]	; 0xffffff48
   258f8:	cmp	r4, #0
   258fc:	beq	25c64 <__assert_fail@plt+0x12760>
   25900:	ldrd	r2, [r4, #104]	; 0x68
   25904:	mvn	r0, #0
   25908:	mvn	r1, #0
   2590c:	cmp	r3, r1
   25910:	cmpeq	r2, r0
   25914:	beq	25bb4 <__assert_fail@plt+0x126b0>
   25918:	str	r2, [fp, #-236]	; 0xffffff14
   2591c:	str	r3, [fp, #-272]	; 0xfffffef0
   25920:	sub	r0, fp, #168	; 0xa8
   25924:	mov	r1, #0
   25928:	mov	r2, #128	; 0x80
   2592c:	bl	13198 <memset@plt>
   25930:	cmp	r8, #0
   25934:	beq	25e88 <__assert_fail@plt+0x12984>
   25938:	add	r5, r6, #1
   2593c:	cmp	r7, r5
   25940:	bcc	25b8c <__assert_fail@plt+0x12688>
   25944:	ldrb	r3, [r6]
   25948:	mov	r2, #5
   2594c:	movw	r1, #8512	; 0x2140
   25950:	mov	r0, #0
   25954:	movt	r1, #4
   25958:	str	r3, [fp, #-256]	; 0xffffff00
   2595c:	bl	12d84 <dcgettext@plt>
   25960:	ldr	r2, [fp, #-256]	; 0xffffff00
   25964:	mov	r1, r0
   25968:	mov	r0, #1
   2596c:	bl	13204 <__printf_chk@plt>
   25970:	ldr	r4, [fp, #-256]	; 0xffffff00
   25974:	cmp	r4, #0
   25978:	beq	25e84 <__assert_fail@plt+0x12980>
   2597c:	add	r6, r6, #2
   25980:	cmp	r7, r6
   25984:	bcc	25b8c <__assert_fail@plt+0x12688>
   25988:	ldr	sl, [fp, #-244]	; 0xffffff0c
   2598c:	mov	r8, #0
   25990:	str	r9, [fp, #-276]	; 0xfffffeec
   25994:	mov	r2, #5
   25998:	movw	r1, #8552	; 0x2168
   2599c:	mov	r0, #0
   259a0:	movt	r1, #4
   259a4:	ldrb	r4, [r5]
   259a8:	bl	12d84 <dcgettext@plt>
   259ac:	mov	r2, r4
   259b0:	sub	r4, r4, #224	; 0xe0
   259b4:	mov	r1, r0
   259b8:	mov	r0, #1
   259bc:	bl	13204 <__printf_chk@plt>
   259c0:	cmp	r4, #31
   259c4:	bhi	25b8c <__assert_fail@plt+0x12688>
   259c8:	add	r6, r5, #2
   259cc:	sub	ip, fp, #36	; 0x24
   259d0:	add	r4, ip, r4, lsl #2
   259d4:	cmp	r7, r6
   259d8:	add	r2, r5, #1
   259dc:	str	r2, [r4, #-132]	; 0xffffff7c
   259e0:	bcc	25b8c <__assert_fail@plt+0x12688>
   259e4:	ldrb	r4, [r5, #1]
   259e8:	cmp	r4, #0
   259ec:	beq	25b28 <__assert_fail@plt+0x12624>
   259f0:	mov	r2, #5
   259f4:	movw	r1, #8564	; 0x2174
   259f8:	mov	r0, #0
   259fc:	movt	r1, #4
   25a00:	bl	12d84 <dcgettext@plt>
   25a04:	mov	r2, r4
   25a08:	mov	r5, #44	; 0x2c
   25a0c:	mov	r1, r0
   25a10:	mov	r0, #1
   25a14:	bl	13204 <__printf_chk@plt>
   25a18:	add	r6, r6, #1
   25a1c:	cmp	r7, r6
   25a20:	bcc	25b8c <__assert_fail@plt+0x12688>
   25a24:	ldrb	r9, [r6, #-1]
   25a28:	mov	r0, r9
   25a2c:	sub	r9, r9, #3
   25a30:	bl	1748c <__assert_fail@plt+0x3f88>
   25a34:	movw	r1, #55180	; 0xd78c
   25a38:	movt	r1, #3
   25a3c:	mov	r2, r0
   25a40:	mov	r0, #1
   25a44:	bl	13204 <__printf_chk@plt>
   25a48:	cmp	r9, #37	; 0x25
   25a4c:	ldrls	pc, [pc, r9, lsl #2]
   25a50:	b	25b8c <__assert_fail@plt+0x12688>
   25a54:	andeq	r5, r2, r4, lsl lr
   25a58:	andeq	r5, r2, r4, lsl lr
   25a5c:	andeq	r5, r2, r4, lsl lr
   25a60:	andeq	r5, r2, r4, lsl lr
   25a64:	andeq	r5, r2, r4, lsl lr
   25a68:	andeq	r5, r2, r4, lsl lr
   25a6c:	andeq	r5, r2, r4, lsl lr
   25a70:	andeq	r5, r2, r4, lsl lr
   25a74:	andeq	r5, r2, r4, lsl lr
   25a78:	andeq	r5, r2, r4, lsl lr
   25a7c:	andeq	r5, r2, r4, lsl lr
   25a80:	andeq	r5, r2, r4, lsl lr
   25a84:	andeq	r5, r2, r4, lsl lr
   25a88:	andeq	r5, r2, ip, lsl #23
   25a8c:	andeq	r5, r2, ip, lsl #23
   25a90:	andeq	r5, r2, ip, lsl #23
   25a94:	andeq	r5, r2, ip, lsl #23
   25a98:	andeq	r5, r2, ip, lsl #23
   25a9c:	andeq	r5, r2, ip, lsl #23
   25aa0:	andeq	r5, r2, ip, lsl #23
   25aa4:	andeq	r5, r2, r4, lsl lr
   25aa8:	andeq	r5, r2, ip, lsl #23
   25aac:	andeq	r5, r2, ip, lsl #23
   25ab0:	andeq	r5, r2, r4, lsl lr
   25ab4:	andeq	r5, r2, ip, lsl #23
   25ab8:	andeq	r5, r2, ip, lsl #23
   25abc:	andeq	r5, r2, r4, lsl lr
   25ac0:	andeq	r5, r2, r4, lsl lr
   25ac4:	andeq	r5, r2, r4, lsl lr
   25ac8:	andeq	r5, r2, ip, lsl #23
   25acc:	andeq	r5, r2, ip, lsl #23
   25ad0:	andeq	r5, r2, ip, lsl #23
   25ad4:	andeq	r5, r2, ip, lsl #23
   25ad8:	andeq	r5, r2, ip, lsl #23
   25adc:	andeq	r5, r2, r4, lsl lr
   25ae0:	andeq	r5, r2, r4, lsl lr
   25ae4:	andeq	r5, r2, r4, lsl lr
   25ae8:	andeq	r5, r2, r4, lsl lr
   25aec:	movw	r1, #8344	; 0x2098
   25af0:	mov	r0, #0
   25af4:	movt	r1, #4
   25af8:	mov	r2, #5
   25afc:	bl	12d84 <dcgettext@plt>
   25b00:	mov	r1, r0
   25b04:	mov	r0, #1
   25b08:	bl	13204 <__printf_chk@plt>
   25b0c:	ldr	r4, [fp, #-252]	; 0xffffff04
   25b10:	ldr	r2, [fp, #-40]	; 0xffffffd8
   25b14:	ldr	r3, [r4]
   25b18:	cmp	r2, r3
   25b1c:	bne	26c6c <__assert_fail@plt+0x13768>
   25b20:	sub	sp, fp, #32
   25b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b28:	mov	r0, r4
   25b2c:	movw	r1, #8580	; 0x2184
   25b30:	mov	r2, #5
   25b34:	movt	r1, #4
   25b38:	bl	12d84 <dcgettext@plt>
   25b3c:	mov	r1, r0
   25b40:	mov	r0, #1
   25b44:	bl	13204 <__printf_chk@plt>
   25b48:	ldr	r0, [sl]
   25b4c:	mov	r5, r6
   25b50:	ldr	r1, [r0, #24]
   25b54:	ldr	r2, [r0, #20]
   25b58:	cmp	r2, r1
   25b5c:	addcc	r1, r2, #1
   25b60:	strcc	r1, [r0, #20]
   25b64:	movcc	r1, #10
   25b68:	strbcc	r1, [r2]
   25b6c:	bcs	267a8 <__assert_fail@plt+0x132a4>
   25b70:	ldr	r3, [fp, #-256]	; 0xffffff00
   25b74:	add	r8, r8, #1
   25b78:	cmp	r3, r8
   25b7c:	bls	26734 <__assert_fail@plt+0x13230>
   25b80:	add	r3, r6, #1
   25b84:	cmp	r7, r3
   25b88:	bcs	25994 <__assert_fail@plt+0x12490>
   25b8c:	mov	r2, #5
   25b90:	movw	r1, #2292	; 0x8f4
   25b94:	mov	r0, #0
   25b98:	movt	r1, #4
   25b9c:	bl	12d84 <dcgettext@plt>
   25ba0:	mov	r2, r0
   25ba4:	mov	r0, #0
   25ba8:	mov	r1, r0
   25bac:	bl	12f70 <error@plt>
   25bb0:	b	25b0c <__assert_fail@plt+0x12608>
   25bb4:	mov	r3, #0
   25bb8:	str	r3, [fp, #-200]	; 0xffffff38
   25bbc:	str	r3, [fp, #-196]	; 0xffffff3c
   25bc0:	str	r3, [fp, #-192]	; 0xffffff40
   25bc4:	str	r3, [fp, #-188]	; 0xffffff44
   25bc8:	ldr	r1, [r4, #28]
   25bcc:	ldr	r2, [r4]
   25bd0:	ldrh	r3, [r4, #26]
   25bd4:	add	r1, r2, r1, lsl #2
   25bd8:	ldrb	r2, [r4, #25]
   25bdc:	cmp	r3, #4
   25be0:	ldrb	r3, [r4, #32]
   25be4:	ldr	ip, [r1, #12]
   25be8:	ldrd	r0, [r4, #8]
   25bec:	ldr	lr, [ip]
   25bf0:	strd	r0, [fp, #-236]	; 0xffffff14
   25bf4:	bhi	26588 <__assert_fail@plt+0x13084>
   25bf8:	cmp	r3, #2
   25bfc:	beq	26718 <__assert_fail@plt+0x13214>
   25c00:	mvn	r3, #0
   25c04:	mov	r0, #3
   25c08:	smlabb	r0, r0, r2, r3
   25c0c:	ldrd	r2, [fp, #-236]	; 0xffffff14
   25c10:	adds	r2, r2, r0
   25c14:	adc	r3, r3, r0, asr #31
   25c18:	strd	r2, [fp, #-236]	; 0xffffff14
   25c1c:	ldr	r1, [fp, #-236]	; 0xffffff14
   25c20:	sub	r0, fp, #200	; 0xc8
   25c24:	sub	r2, fp, #184	; 0xb8
   25c28:	str	r4, [fp, #-196]	; 0xffffff3c
   25c2c:	add	r3, lr, r1
   25c30:	mov	r1, #114	; 0x72
   25c34:	str	r3, [fp, #-200]	; 0xffffff38
   25c38:	bl	13114 <dwarf_attr@plt>
   25c3c:	cmp	r0, #0
   25c40:	beq	25c58 <__assert_fail@plt+0x12754>
   25c44:	sub	r0, fp, #184	; 0xb8
   25c48:	sub	r1, fp, #212	; 0xd4
   25c4c:	bl	132a0 <dwarf_formudata@plt>
   25c50:	cmp	r0, #0
   25c54:	beq	26634 <__assert_fail@plt+0x13130>
   25c58:	ldrh	r3, [r4, #26]
   25c5c:	cmp	r3, #4
   25c60:	bls	26658 <__assert_fail@plt+0x13154>
   25c64:	ldr	r5, [fp, #-240]	; 0xffffff10
   25c68:	ldr	r3, [r5, #60]	; 0x3c
   25c6c:	cmp	r3, #0
   25c70:	beq	25ccc <__assert_fail@plt+0x127c8>
   25c74:	ldrb	ip, [r5, #84]	; 0x54
   25c78:	ldr	sl, [r3]
   25c7c:	cmp	ip, #0
   25c80:	ldr	r2, [r3, #12]
   25c84:	ldreq	lr, [sl]
   25c88:	add	r5, sl, r2
   25c8c:	bne	267b4 <__assert_fail@plt+0x132b0>
   25c90:	cmn	lr, #1
   25c94:	add	r0, sl, #4
   25c98:	mov	r2, lr
   25c9c:	mov	r3, #0
   25ca0:	str	r0, [fp, #-256]	; 0xffffff00
   25ca4:	strd	r2, [fp, #-236]	; 0xffffff14
   25ca8:	beq	267cc <__assert_fail@plt+0x132c8>
   25cac:	ldr	r1, [fp, #-256]	; 0xffffff00
   25cb0:	rsb	lr, r1, r5
   25cb4:	cmp	lr, #3
   25cb8:	ble	25ccc <__assert_fail@plt+0x127c8>
   25cbc:	ldrd	r2, [fp, #-236]	; 0xffffff14
   25cc0:	cmp	r3, #0
   25cc4:	cmpeq	r2, #3
   25cc8:	bhi	26690 <__assert_fail@plt+0x1318c>
   25ccc:	mov	r2, #0
   25cd0:	mov	r3, #0
   25cd4:	cmp	r4, #0
   25cd8:	beq	25918 <__assert_fail@plt+0x12414>
   25cdc:	strd	r2, [r4, #104]	; 0x68
   25ce0:	str	r2, [fp, #-236]	; 0xffffff14
   25ce4:	str	r3, [fp, #-272]	; 0xfffffef0
   25ce8:	b	25920 <__assert_fail@plt+0x1241c>
   25cec:	movw	r1, #8416	; 0x20e0
   25cf0:	mov	r0, #1
   25cf4:	movt	r1, #4
   25cf8:	bl	13204 <__printf_chk@plt>
   25cfc:	ands	r5, r4, #1
   25d00:	bne	265dc <__assert_fail@plt+0x130d8>
   25d04:	and	sl, r4, #2
   25d08:	ands	sl, sl, #255	; 0xff
   25d0c:	bne	26608 <__assert_fail@plt+0x13104>
   25d10:	and	r8, r4, #4
   25d14:	ands	r8, r8, #255	; 0xff
   25d18:	bne	25e48 <__assert_fail@plt+0x12944>
   25d1c:	tst	r4, #248	; 0xf8
   25d20:	bne	25e70 <__assert_fail@plt+0x1296c>
   25d24:	mov	r0, #41	; 0x29
   25d28:	bl	131b0 <putchar@plt>
   25d2c:	mov	r0, #10
   25d30:	bl	131b0 <putchar@plt>
   25d34:	cmp	r5, #0
   25d38:	beq	26c7c <__assert_fail@plt+0x13778>
   25d3c:	mov	r2, #5
   25d40:	movw	r1, #8820	; 0x2274
   25d44:	mov	r0, #0
   25d48:	movt	r1, #4
   25d4c:	bl	12d84 <dcgettext@plt>
   25d50:	mov	r2, #8
   25d54:	mov	r1, r0
   25d58:	mov	r0, #1
   25d5c:	bl	13204 <__printf_chk@plt>
   25d60:	cmp	sl, #0
   25d64:	beq	26c70 <__assert_fail@plt+0x1376c>
   25d68:	ldr	ip, [fp, #-240]	; 0xffffff10
   25d6c:	ldrb	r3, [ip, #84]	; 0x54
   25d70:	cmp	r3, #0
   25d74:	ldreq	r4, [r9, #1]
   25d78:	ldreq	r5, [r9, #5]
   25d7c:	bne	268ec <__assert_fail@plt+0x133e8>
   25d80:	mov	r2, #5
   25d84:	movw	r1, #8480	; 0x2120
   25d88:	mov	r0, #0
   25d8c:	movt	r1, #4
   25d90:	bl	12d84 <dcgettext@plt>
   25d94:	mov	r2, r4
   25d98:	mov	r3, r5
   25d9c:	add	r6, r6, #8
   25da0:	mov	r1, r0
   25da4:	mov	r0, #1
   25da8:	bl	13204 <__printf_chk@plt>
   25dac:	mvn	r2, #0
   25db0:	mvn	r3, #0
   25db4:	cmp	r5, r3
   25db8:	cmpeq	r4, r2
   25dbc:	movne	ip, #8
   25dc0:	strne	ip, [fp, #-268]	; 0xfffffef4
   25dc4:	beq	26c70 <__assert_fail@plt+0x1376c>
   25dc8:	ldr	ip, [fp, #-248]	; 0xffffff08
   25dcc:	cmp	ip, #0
   25dd0:	beq	258c4 <__assert_fail@plt+0x123c0>
   25dd4:	ldrd	r2, [ip, #16]
   25dd8:	cmp	r5, r3
   25ddc:	cmpeq	r4, r2
   25de0:	beq	26710 <__assert_fail@plt+0x1320c>
   25de4:	mov	r9, ip
   25de8:	ldr	r9, [r9, #28]
   25dec:	cmp	r9, #0
   25df0:	beq	258c4 <__assert_fail@plt+0x123c0>
   25df4:	ldrd	r2, [r9, #16]
   25df8:	cmp	r5, r3
   25dfc:	cmpeq	r4, r2
   25e00:	bne	25de8 <__assert_fail@plt+0x128e4>
   25e04:	ldr	r4, [r9, #4]
   25e08:	cmp	r4, #0
   25e0c:	bne	25900 <__assert_fail@plt+0x123fc>
   25e10:	b	258c8 <__assert_fail@plt+0x123c4>
   25e14:	subs	r4, r4, #1
   25e18:	beq	25b48 <__assert_fail@plt+0x12644>
   25e1c:	ldr	r0, [sl]
   25e20:	ldr	r3, [r0, #20]
   25e24:	ldr	r2, [r0, #24]
   25e28:	cmp	r3, r2
   25e2c:	addcc	r2, r3, #1
   25e30:	strcc	r2, [r0, #20]
   25e34:	strbcc	r5, [r3]
   25e38:	bcc	25a18 <__assert_fail@plt+0x12514>
   25e3c:	mov	r1, #44	; 0x2c
   25e40:	bl	132dc <__overflow@plt>
   25e44:	b	25a18 <__assert_fail@plt+0x12514>
   25e48:	movw	r1, #8456	; 0x2108
   25e4c:	mov	r0, #1
   25e50:	movt	r1, #4
   25e54:	bl	13204 <__printf_chk@plt>
   25e58:	tst	r4, #248	; 0xf8
   25e5c:	beq	25d24 <__assert_fail@plt+0x12820>
   25e60:	movw	r1, #8432	; 0x20f0
   25e64:	mov	r0, #1
   25e68:	movt	r1, #4
   25e6c:	bl	13204 <__printf_chk@plt>
   25e70:	movw	r1, #8472	; 0x2118
   25e74:	mov	r0, #1
   25e78:	movt	r1, #4
   25e7c:	bl	13204 <__printf_chk@plt>
   25e80:	b	25d24 <__assert_fail@plt+0x12820>
   25e84:	mov	r6, r5
   25e88:	ldr	r4, [fp, #-244]	; 0xffffff0c
   25e8c:	ldr	r0, [r4]
   25e90:	ldr	r2, [r0, #24]
   25e94:	ldr	r3, [r0, #20]
   25e98:	cmp	r3, r2
   25e9c:	addcc	r2, r3, #1
   25ea0:	strcc	r2, [r0, #20]
   25ea4:	movcc	r2, #10
   25ea8:	strbcc	r2, [r3]
   25eac:	bcs	26bf0 <__assert_fail@plt+0x136ec>
   25eb0:	add	r8, r6, #1
   25eb4:	cmp	r7, r8
   25eb8:	bcc	25b8c <__assert_fail@plt+0x12688>
   25ebc:	ldrb	r4, [r6]
   25ec0:	cmp	r4, #0
   25ec4:	beq	25fdc <__assert_fail@plt+0x12ad8>
   25ec8:	ldr	r5, [fp, #-268]	; 0xfffffef4
   25ecc:	mov	sl, #1
   25ed0:	ldr	r6, [fp, #-272]	; 0xfffffef0
   25ed4:	str	r9, [fp, #-256]	; 0xffffff00
   25ed8:	sub	r3, r4, #1
   25edc:	cmp	r3, #11
   25ee0:	ldrls	pc, [pc, r3, lsl #2]
   25ee4:	b	26410 <__assert_fail@plt+0x12f0c>
   25ee8:	andeq	r6, r2, r4, lsl #2
   25eec:	andeq	r6, r2, r0, lsr #1
   25ef0:	andeq	r5, r2, r8, ror #31
   25ef4:	andeq	r6, r2, r8, ror #7
   25ef8:	andeq	r6, r2, r4, ror r3
   25efc:	andeq	r6, r2, ip, ror #5
   25f00:	andeq	r6, r2, r8, lsr #5
   25f04:	andeq	r6, r2, ip, ror #4
   25f08:	andeq	r6, r2, r4, ror #3
   25f0c:	andeq	r6, r2, ip, lsl #3
   25f10:	andeq	r6, r2, r0, asr r1
   25f14:	andeq	r5, r2, r8, lsl pc
   25f18:	ldrb	r1, [r8]
   25f1c:	add	r4, r8, #1
   25f20:	mov	r3, #0
   25f24:	tst	r1, #128	; 0x80
   25f28:	and	r1, r1, #127	; 0x7f
   25f2c:	uxtb	r2, r1
   25f30:	bne	26b90 <__assert_fail@plt+0x1368c>
   25f34:	mov	r8, r1
   25f38:	add	r3, r4, r5
   25f3c:	cmp	r7, r3
   25f40:	bcc	25b8c <__assert_fail@plt+0x12688>
   25f44:	movw	r1, #8728	; 0x2218
   25f48:	movt	r1, #4
   25f4c:	movw	r3, #15800	; 0x3db8
   25f50:	movt	r3, #4
   25f54:	mov	r2, sl
   25f58:	mov	r0, #1
   25f5c:	bl	13204 <__printf_chk@plt>
   25f60:	ldr	ip, [fp, #-236]	; 0xffffff14
   25f64:	mov	r2, r4
   25f68:	mov	r1, #26
   25f6c:	str	r5, [sp]
   25f70:	mov	r3, r7
   25f74:	str	ip, [sp, #8]
   25f78:	str	r6, [sp, #12]
   25f7c:	ldr	r0, [fp, #-240]	; 0xffffff10
   25f80:	bl	24bf4 <__assert_fail@plt+0x116f0>
   25f84:	movw	r1, #8776	; 0x2248
   25f88:	mov	r2, r8
   25f8c:	movt	r1, #4
   25f90:	mov	r4, r0
   25f94:	mov	r0, #1
   25f98:	bl	13204 <__printf_chk@plt>
   25f9c:	add	r8, r4, #1
   25fa0:	cmp	r7, r8
   25fa4:	bcc	25b8c <__assert_fail@plt+0x12688>
   25fa8:	ldrb	r4, [r4]
   25fac:	cmp	r4, #0
   25fb0:	bne	25ed8 <__assert_fail@plt+0x129d4>
   25fb4:	ldr	r4, [fp, #-244]	; 0xffffff0c
   25fb8:	ldr	r0, [r4]
   25fbc:	ldr	r2, [r0, #24]
   25fc0:	ldr	r3, [r0, #20]
   25fc4:	cmp	r3, r2
   25fc8:	addcc	r2, r3, #1
   25fcc:	strcc	r2, [r0, #20]
   25fd0:	movcc	r2, #10
   25fd4:	strbcc	r2, [r3]
   25fd8:	bcs	2673c <__assert_fail@plt+0x13238>
   25fdc:	cmp	r7, r8
   25fe0:	bhi	257c4 <__assert_fail@plt+0x122c0>
   25fe4:	b	25b0c <__assert_fail@plt+0x12608>
   25fe8:	ldrb	r1, [r8]
   25fec:	add	ip, r8, #1
   25ff0:	mov	r3, #0
   25ff4:	tst	r1, #128	; 0x80
   25ff8:	and	r1, r1, #127	; 0x7f
   25ffc:	uxtb	r2, r1
   26000:	bne	26748 <__assert_fail@plt+0x13244>
   26004:	mov	r8, r1
   26008:	cmp	r7, ip
   2600c:	bls	25b8c <__assert_fail@plt+0x12688>
   26010:	ldrb	r9, [ip]
   26014:	add	r4, ip, #1
   26018:	mov	r3, #0
   2601c:	tst	r9, #128	; 0x80
   26020:	and	r9, r9, #127	; 0x7f
   26024:	uxtb	r2, r9
   26028:	bne	26890 <__assert_fail@plt+0x1338c>
   2602c:	ldr	ip, [fp, #-256]	; 0xffffff00
   26030:	cmp	ip, #0
   26034:	beq	2650c <__assert_fail@plt+0x13008>
   26038:	ldr	ip, [fp, #-256]	; 0xffffff00
   2603c:	ldr	r0, [ip, #24]
   26040:	cmp	r0, #0
   26044:	beq	266ec <__assert_fail@plt+0x131e8>
   26048:	cmn	r0, #1
   2604c:	beq	2650c <__assert_fail@plt+0x13008>
   26050:	mov	r2, #0
   26054:	mov	r1, r9
   26058:	mov	r3, r2
   2605c:	bl	13234 <dwarf_filesrc@plt>
   26060:	movw	r3, #8172	; 0x1fec
   26064:	movt	r3, #4
   26068:	cmp	r0, #0
   2606c:	moveq	r0, r3
   26070:	str	r0, [sp, #8]
   26074:	mov	r2, sl
   26078:	str	r8, [sp]
   2607c:	movw	r1, #2124	; 0x84c
   26080:	str	r9, [sp, #4]
   26084:	movt	r1, #4
   26088:	movw	r3, #15800	; 0x3db8
   2608c:	mov	r0, #1
   26090:	movt	r3, #4
   26094:	add	sl, sl, r0
   26098:	bl	13204 <__printf_chk@plt>
   2609c:	b	25f9c <__assert_fail@plt+0x12a98>
   260a0:	ldrb	r3, [r8]
   260a4:	add	r9, r8, #1
   260a8:	mov	r1, #0
   260ac:	tst	r3, #128	; 0x80
   260b0:	and	r3, r3, #127	; 0x7f
   260b4:	uxtb	r0, r3
   260b8:	bne	26a48 <__assert_fail@plt+0x13544>
   260bc:	mov	r8, r3
   260c0:	mov	r0, r9
   260c4:	mov	r1, #0
   260c8:	rsb	r2, r9, r7
   260cc:	bl	13270 <memchr@plt>
   260d0:	subs	r4, r0, #0
   260d4:	beq	25b8c <__assert_fail@plt+0x12688>
   260d8:	movw	r1, #2008	; 0x7d8
   260dc:	movt	r1, #4
   260e0:	str	r9, [sp]
   260e4:	str	r8, [sp, #4]
   260e8:	movw	r3, #15800	; 0x3db8
   260ec:	mov	r0, #1
   260f0:	movt	r3, #4
   260f4:	mov	r2, sl
   260f8:	add	r4, r4, r0
   260fc:	bl	13204 <__printf_chk@plt>
   26100:	b	25f9c <__assert_fail@plt+0x12a98>
   26104:	ldrb	r3, [r8]
   26108:	add	r9, r8, #1
   2610c:	mov	r1, #0
   26110:	tst	r3, #128	; 0x80
   26114:	and	r3, r3, #127	; 0x7f
   26118:	uxtb	r0, r3
   2611c:	bne	269e8 <__assert_fail@plt+0x134e4>
   26120:	mov	r8, r3
   26124:	mov	r0, r9
   26128:	mov	r1, #0
   2612c:	rsb	r2, r9, r7
   26130:	bl	13270 <memchr@plt>
   26134:	subs	r4, r0, #0
   26138:	beq	25b8c <__assert_fail@plt+0x12688>
   2613c:	movw	r1, #1984	; 0x7c0
   26140:	str	r9, [sp]
   26144:	str	r8, [sp, #4]
   26148:	movt	r1, #4
   2614c:	b	260e8 <__assert_fail@plt+0x12be4>
   26150:	ldrb	r1, [r8]
   26154:	add	r4, r8, #1
   26158:	mov	r3, #0
   2615c:	tst	r1, #128	; 0x80
   26160:	and	r1, r1, #127	; 0x7f
   26164:	uxtb	r2, r1
   26168:	bne	27094 <__assert_fail@plt+0x13b90>
   2616c:	mov	r8, r1
   26170:	add	r3, r4, r5
   26174:	cmp	r7, r3
   26178:	bcc	25b8c <__assert_fail@plt+0x12688>
   2617c:	movw	r1, #8696	; 0x21f8
   26180:	movw	r3, #15800	; 0x3db8
   26184:	movt	r1, #4
   26188:	b	25f50 <__assert_fail@plt+0x12a4c>
   2618c:	add	r3, r8, r5
   26190:	cmp	r7, r3
   26194:	bcc	25b8c <__assert_fail@plt+0x12688>
   26198:	cmp	r5, #8
   2619c:	beq	26538 <__assert_fail@plt+0x13034>
   261a0:	ldr	ip, [fp, #-240]	; 0xffffff10
   261a4:	ldr	r2, [r8]
   261a8:	ldrb	r3, [ip, #84]	; 0x54
   261ac:	cmp	r3, #0
   261b0:	bne	2708c <__assert_fail@plt+0x13b88>
   261b4:	add	r4, r8, #4
   261b8:	mov	r3, #0
   261bc:	movw	r1, #8740	; 0x2224
   261c0:	movt	r1, #4
   261c4:	str	r2, [sp]
   261c8:	str	r3, [sp, #4]
   261cc:	movw	r3, #15800	; 0x3db8
   261d0:	mov	r2, sl
   261d4:	movt	r3, #4
   261d8:	mov	r0, #1
   261dc:	bl	13204 <__printf_chk@plt>
   261e0:	b	25f9c <__assert_fail@plt+0x12a98>
   261e4:	ldrb	r1, [r8]
   261e8:	add	r4, r8, #1
   261ec:	mov	r3, #0
   261f0:	tst	r1, #128	; 0x80
   261f4:	and	r1, r1, #127	; 0x7f
   261f8:	uxtb	r2, r1
   261fc:	bne	26f4c <__assert_fail@plt+0x13a48>
   26200:	mov	r8, r1
   26204:	add	r3, r4, r5
   26208:	cmp	r7, r3
   2620c:	bcc	25b8c <__assert_fail@plt+0x12688>
   26210:	movw	r1, #8728	; 0x2218
   26214:	movt	r1, #4
   26218:	movw	r3, #15800	; 0x3db8
   2621c:	mov	r2, sl
   26220:	movt	r3, #4
   26224:	mov	r0, #1
   26228:	bl	13204 <__printf_chk@plt>
   2622c:	ldr	ip, [fp, #-236]	; 0xffffff14
   26230:	mov	r2, r4
   26234:	str	r5, [sp]
   26238:	str	r6, [sp, #12]
   2623c:	mov	r1, #29
   26240:	str	ip, [sp, #8]
   26244:	mov	r3, r7
   26248:	ldr	r0, [fp, #-240]	; 0xffffff10
   2624c:	bl	24bf4 <__assert_fail@plt+0x116f0>
   26250:	mov	r2, r8
   26254:	movw	r1, #8708	; 0x2204
   26258:	movt	r1, #4
   2625c:	mov	r4, r0
   26260:	mov	r0, #1
   26264:	bl	13204 <__printf_chk@plt>
   26268:	b	25f9c <__assert_fail@plt+0x12a98>
   2626c:	ldrb	r1, [r8]
   26270:	add	r4, r8, #1
   26274:	mov	r3, #0
   26278:	tst	r1, #128	; 0x80
   2627c:	and	r1, r1, #127	; 0x7f
   26280:	uxtb	r2, r1
   26284:	bne	26eec <__assert_fail@plt+0x139e8>
   26288:	mov	r8, r1
   2628c:	add	r3, r4, r5
   26290:	cmp	r7, r3
   26294:	bcc	25b8c <__assert_fail@plt+0x12688>
   26298:	movw	r1, #8696	; 0x21f8
   2629c:	movw	r3, #15800	; 0x3db8
   262a0:	movt	r1, #4
   262a4:	b	2621c <__assert_fail@plt+0x12d18>
   262a8:	add	r3, r8, r5
   262ac:	cmp	r7, r3
   262b0:	bcc	25b8c <__assert_fail@plt+0x12688>
   262b4:	cmp	r5, #8
   262b8:	beq	26518 <__assert_fail@plt+0x13014>
   262bc:	ldr	ip, [fp, #-240]	; 0xffffff10
   262c0:	ldr	r2, [r8]
   262c4:	ldrb	r3, [ip, #84]	; 0x54
   262c8:	cmp	r3, #0
   262cc:	bne	26e74 <__assert_fail@plt+0x13970>
   262d0:	add	r4, r8, #4
   262d4:	mov	r3, #0
   262d8:	movw	r1, #8668	; 0x21dc
   262dc:	str	r2, [sp]
   262e0:	str	r3, [sp, #4]
   262e4:	movt	r1, #4
   262e8:	b	261cc <__assert_fail@plt+0x12cc8>
   262ec:	ldrb	r1, [r8]
   262f0:	add	r4, r8, #1
   262f4:	mov	r3, #0
   262f8:	tst	r1, #128	; 0x80
   262fc:	and	r1, r1, #127	; 0x7f
   26300:	uxtb	r2, r1
   26304:	bne	26e14 <__assert_fail@plt+0x13910>
   26308:	mov	r8, r1
   2630c:	add	r3, r4, r5
   26310:	cmp	r7, r3
   26314:	bcc	25b8c <__assert_fail@plt+0x12688>
   26318:	ldr	ip, [fp, #-240]	; 0xffffff10
   2631c:	cmp	r5, #8
   26320:	ldrb	r3, [ip, #84]	; 0x54
   26324:	beq	26558 <__assert_fail@plt+0x13054>
   26328:	cmp	r3, #0
   2632c:	ldr	r2, [r4]
   26330:	bne	26d9c <__assert_fail@plt+0x13898>
   26334:	add	r4, r4, #4
   26338:	mov	r3, #0
   2633c:	mov	r1, #0
   26340:	ldr	r0, [fp, #-240]	; 0xffffff10
   26344:	str	r1, [sp]
   26348:	bl	133cc <dwarf_getstring@plt>
   2634c:	movw	r1, #8632	; 0x21b8
   26350:	movt	r1, #4
   26354:	movw	r3, #15800	; 0x3db8
   26358:	str	r8, [sp, #4]
   2635c:	str	r0, [sp]
   26360:	movt	r3, #4
   26364:	mov	r2, sl
   26368:	mov	r0, #1
   2636c:	bl	13204 <__printf_chk@plt>
   26370:	b	25f9c <__assert_fail@plt+0x12a98>
   26374:	ldrb	r1, [r8]
   26378:	add	r4, r8, #1
   2637c:	mov	r3, #0
   26380:	tst	r1, #128	; 0x80
   26384:	and	r1, r1, #127	; 0x7f
   26388:	uxtb	r2, r1
   2638c:	bne	26d3c <__assert_fail@plt+0x13838>
   26390:	mov	r8, r1
   26394:	add	r3, r4, r5
   26398:	cmp	r7, r3
   2639c:	bcc	25b8c <__assert_fail@plt+0x12688>
   263a0:	ldr	ip, [fp, #-240]	; 0xffffff10
   263a4:	cmp	r5, #8
   263a8:	ldrb	r3, [ip, #84]	; 0x54
   263ac:	beq	26570 <__assert_fail@plt+0x1306c>
   263b0:	cmp	r3, #0
   263b4:	ldr	r2, [r4]
   263b8:	bne	269e0 <__assert_fail@plt+0x134dc>
   263bc:	add	r4, r4, #4
   263c0:	mov	r3, #0
   263c4:	mov	r1, #0
   263c8:	ldr	r0, [fp, #-240]	; 0xffffff10
   263cc:	str	r1, [sp]
   263d0:	bl	133cc <dwarf_getstring@plt>
   263d4:	movw	r1, #8596	; 0x2194
   263d8:	str	r8, [sp, #4]
   263dc:	movw	r3, #15800	; 0x3db8
   263e0:	movt	r1, #4
   263e4:	b	2635c <__assert_fail@plt+0x12e58>
   263e8:	sub	sl, sl, #1
   263ec:	movw	r1, #2152	; 0x868
   263f0:	movw	r3, #15800	; 0x3db8
   263f4:	movt	r1, #4
   263f8:	mov	r2, sl
   263fc:	movt	r3, #4
   26400:	mov	r0, #1
   26404:	mov	r4, r8
   26408:	bl	13204 <__printf_chk@plt>
   2640c:	b	25f9c <__assert_fail@plt+0x12a98>
   26410:	str	r4, [sp]
   26414:	movw	r1, #8796	; 0x225c
   26418:	movw	r3, #15800	; 0x3db8
   2641c:	movt	r1, #4
   26420:	movt	r3, #4
   26424:	mov	r0, #1
   26428:	mov	r2, sl
   2642c:	bl	13204 <__printf_chk@plt>
   26430:	cmp	r4, #224	; 0xe0
   26434:	bne	25b8c <__assert_fail@plt+0x12688>
   26438:	ldr	ip, [fp, #-168]	; 0xffffff58
   2643c:	cmp	ip, #0
   26440:	beq	25b8c <__assert_fail@plt+0x12688>
   26444:	ldrb	r3, [ip]
   26448:	cmp	r3, #0
   2644c:	beq	26650 <__assert_fail@plt+0x1314c>
   26450:	cmp	r7, r8
   26454:	bls	26650 <__assert_fail@plt+0x1314c>
   26458:	add	r9, ip, #2
   2645c:	add	r2, ip, #1
   26460:	add	ip, r3, r2
   26464:	str	sl, [fp, #-268]	; 0xfffffef4
   26468:	mov	r4, r9
   2646c:	ldr	r9, [fp, #-240]	; 0xffffff10
   26470:	mov	sl, r8
   26474:	mov	r8, ip
   26478:	ldr	ip, [fp, #-236]	; 0xffffff14
   2647c:	mov	r2, sl
   26480:	ldrb	r1, [r4, #-1]
   26484:	mov	r0, r9
   26488:	str	r5, [sp]
   2648c:	mov	r3, r7
   26490:	str	ip, [sp, #8]
   26494:	str	r6, [sp, #12]
   26498:	bl	24bf4 <__assert_fail@plt+0x116f0>
   2649c:	cmp	r4, r8
   264a0:	mov	sl, r0
   264a4:	beq	264c4 <__assert_fail@plt+0x12fc0>
   264a8:	mov	r0, #1
   264ac:	movw	r1, #8432	; 0x20f0
   264b0:	movt	r1, #4
   264b4:	add	r4, r4, r0
   264b8:	bl	13204 <__printf_chk@plt>
   264bc:	cmp	r7, sl
   264c0:	bhi	26478 <__assert_fail@plt+0x12f74>
   264c4:	mov	r4, sl
   264c8:	ldr	sl, [fp, #-268]	; 0xfffffef4
   264cc:	ldr	ip, [fp, #-244]	; 0xffffff0c
   264d0:	ldr	r0, [ip]
   264d4:	ldr	r2, [r0, #24]
   264d8:	ldr	r3, [r0, #20]
   264dc:	cmp	r3, r2
   264e0:	addcc	r2, r3, #1
   264e4:	strcc	r2, [r0, #20]
   264e8:	movcc	r2, #10
   264ec:	strbcc	r2, [r3]
   264f0:	bcc	25f9c <__assert_fail@plt+0x12a98>
   264f4:	mov	r1, #10
   264f8:	bl	132dc <__overflow@plt>
   264fc:	b	25f9c <__assert_fail@plt+0x12a98>
   26500:	ldr	ip, [fp, #-256]	; 0xffffff00
   26504:	mvn	r3, #0
   26508:	str	r3, [ip, #24]
   2650c:	movw	r0, #8172	; 0x1fec
   26510:	movt	r0, #4
   26514:	b	26070 <__assert_fail@plt+0x12b6c>
   26518:	ldr	r4, [fp, #-240]	; 0xffffff10
   2651c:	ldrb	r3, [r4, #84]	; 0x54
   26520:	cmp	r3, #0
   26524:	ldreq	r2, [r8]
   26528:	ldreq	r3, [r8, #4]
   2652c:	bne	269cc <__assert_fail@plt+0x134c8>
   26530:	add	r4, r8, #8
   26534:	b	262d8 <__assert_fail@plt+0x12dd4>
   26538:	ldr	r4, [fp, #-240]	; 0xffffff10
   2653c:	ldrb	r3, [r4, #84]	; 0x54
   26540:	cmp	r3, #0
   26544:	ldreq	r2, [r8]
   26548:	ldreq	r3, [r8, #4]
   2654c:	bne	269b8 <__assert_fail@plt+0x134b4>
   26550:	add	r4, r8, #8
   26554:	b	261bc <__assert_fail@plt+0x12cb8>
   26558:	cmp	r3, #0
   2655c:	ldreq	r2, [r4]
   26560:	ldreq	r3, [r4, #4]
   26564:	bne	269a4 <__assert_fail@plt+0x134a0>
   26568:	add	r4, r4, #8
   2656c:	b	2633c <__assert_fail@plt+0x12e38>
   26570:	cmp	r3, #0
   26574:	ldreq	r2, [r4]
   26578:	ldreq	r3, [r4, #4]
   2657c:	bne	26990 <__assert_fail@plt+0x1348c>
   26580:	add	r4, r4, #8
   26584:	b	263c4 <__assert_fail@plt+0x12ec0>
   26588:	ldrd	r0, [fp, #-236]	; 0xffffff14
   2658c:	mov	r5, #3
   26590:	sub	ip, r3, #4
   26594:	cmp	r3, #2
   26598:	cmpne	ip, #1
   2659c:	smlalbb	r0, r1, r5, r2
   265a0:	strd	r0, [fp, #-236]	; 0xffffff14
   265a4:	bls	26670 <__assert_fail@plt+0x1316c>
   265a8:	cmp	r3, #6
   265ac:	bne	25c1c <__assert_fail@plt+0x12718>
   265b0:	ldrd	r0, [fp, #-236]	; 0xffffff14
   265b4:	adds	r0, r0, #8
   265b8:	adc	r1, r1, #0
   265bc:	strd	r0, [fp, #-236]	; 0xffffff14
   265c0:	ldrd	r0, [fp, #-236]	; 0xffffff14
   265c4:	uxtb	r2, r2
   265c8:	mov	r3, #0
   265cc:	adds	r0, r0, r2
   265d0:	adc	r1, r1, r3
   265d4:	strd	r0, [fp, #-236]	; 0xffffff14
   265d8:	b	25c1c <__assert_fail@plt+0x12718>
   265dc:	movw	r1, #8420	; 0x20e4
   265e0:	mov	r0, #1
   265e4:	movt	r1, #4
   265e8:	bl	13204 <__printf_chk@plt>
   265ec:	tst	r4, #254	; 0xfe
   265f0:	beq	25d04 <__assert_fail@plt+0x12800>
   265f4:	movw	r1, #8432	; 0x20f0
   265f8:	mov	r0, #1
   265fc:	movt	r1, #4
   26600:	bl	13204 <__printf_chk@plt>
   26604:	b	25d04 <__assert_fail@plt+0x12800>
   26608:	movw	r1, #8436	; 0x20f4
   2660c:	mov	r0, #1
   26610:	movt	r1, #4
   26614:	bl	13204 <__printf_chk@plt>
   26618:	tst	r4, #252	; 0xfc
   2661c:	beq	25d10 <__assert_fail@plt+0x1280c>
   26620:	movw	r1, #8432	; 0x20f0
   26624:	mov	r0, #1
   26628:	movt	r1, #4
   2662c:	bl	13204 <__printf_chk@plt>
   26630:	b	25d10 <__assert_fail@plt+0x1280c>
   26634:	ldr	r2, [fp, #-212]	; 0xffffff2c
   26638:	ldr	r3, [fp, #-208]	; 0xffffff30
   2663c:	str	r2, [fp, #-236]	; 0xffffff14
   26640:	str	r2, [r4, #104]	; 0x68
   26644:	str	r3, [r4, #108]	; 0x6c
   26648:	str	r3, [fp, #-272]	; 0xfffffef0
   2664c:	b	25920 <__assert_fail@plt+0x1241c>
   26650:	mov	r4, r8
   26654:	b	264cc <__assert_fail@plt+0x12fc8>
   26658:	mov	r2, #0
   2665c:	str	r2, [r4, #104]	; 0x68
   26660:	str	r2, [fp, #-236]	; 0xffffff14
   26664:	str	r2, [r4, #108]	; 0x6c
   26668:	str	r2, [fp, #-272]	; 0xfffffef0
   2666c:	b	25920 <__assert_fail@plt+0x1241c>
   26670:	ldrd	r0, [fp, #-236]	; 0xffffff14
   26674:	and	r3, r3, #251	; 0xfb
   26678:	adds	r0, r0, #8
   2667c:	adc	r1, r1, #0
   26680:	cmp	r3, #2
   26684:	strd	r0, [fp, #-236]	; 0xffffff14
   26688:	bne	25c1c <__assert_fail@plt+0x12718>
   2668c:	b	265c0 <__assert_fail@plt+0x130bc>
   26690:	sub	r2, fp, #512	; 0x200
   26694:	mov	r0, lr
   26698:	asr	r1, lr, #31
   2669c:	strd	r0, [r2, #68]	; 0x44
   266a0:	ldrd	r2, [fp, #-236]	; 0xffffff14
   266a4:	cmp	r3, r1
   266a8:	cmpeq	r2, r0
   266ac:	bhi	25ccc <__assert_fail@plt+0x127c8>
   266b0:	cmp	ip, #0
   266b4:	ldrne	ip, [fp, #-256]	; 0xffffff00
   266b8:	ldreq	lr, [fp, #-256]	; 0xffffff00
   266bc:	ldrhne	r3, [ip]
   266c0:	ldrheq	r3, [lr]
   266c4:	lslne	r2, r3, #8
   266c8:	orrne	r3, r2, r3, lsr #8
   266cc:	uxthne	r3, r3
   266d0:	cmp	r3, #5
   266d4:	bne	25ccc <__assert_fail@plt+0x127c8>
   266d8:	ldr	r0, [fp, #-256]	; 0xffffff00
   266dc:	add	r2, r0, #4
   266e0:	rsb	r2, sl, r2
   266e4:	asr	r3, r2, #31
   266e8:	b	25cd4 <__assert_fail@plt+0x127d0>
   266ec:	mov	r2, r0
   266f0:	add	r1, ip, #24
   266f4:	mov	r0, ip
   266f8:	bl	133b4 <dwarf_getsrcfiles@plt>
   266fc:	cmp	r0, #0
   26700:	bne	26500 <__assert_fail@plt+0x12ffc>
   26704:	ldr	ip, [fp, #-256]	; 0xffffff00
   26708:	ldr	r0, [ip, #24]
   2670c:	b	26048 <__assert_fail@plt+0x12b44>
   26710:	ldr	r9, [fp, #-248]	; 0xffffff08
   26714:	b	25e04 <__assert_fail@plt+0x12900>
   26718:	lsl	r3, r2, #2
   2671c:	add	r1, r3, #7
   26720:	ldrd	r2, [fp, #-236]	; 0xffffff14
   26724:	adds	r2, r2, r1
   26728:	adc	r3, r3, r1, asr #31
   2672c:	strd	r2, [fp, #-236]	; 0xffffff14
   26730:	b	25c1c <__assert_fail@plt+0x12718>
   26734:	ldr	r9, [fp, #-276]	; 0xfffffeec
   26738:	b	25e88 <__assert_fail@plt+0x12984>
   2673c:	mov	r1, #10
   26740:	bl	132dc <__overflow@plt>
   26744:	b	25fdc <__assert_fail@plt+0x12ad8>
   26748:	cmp	r7, r8
   2674c:	bls	26888 <__assert_fail@plt+0x13384>
   26750:	rsb	r9, r8, r7
   26754:	cmp	r9, #9
   26758:	movhi	r9, #10
   2675c:	bls	26880 <__assert_fail@plt+0x1337c>
   26760:	ldrb	r1, [r8, #1]
   26764:	add	ip, r8, #2
   26768:	and	r0, r1, #127	; 0x7f
   2676c:	tst	r1, #128	; 0x80
   26770:	uxtb	r0, r0
   26774:	movne	r8, #1
   26778:	lsl	r4, r0, #7
   2677c:	str	r4, [fp, #-364]	; 0xfffffe94
   26780:	sub	r4, fp, #512	; 0x200
   26784:	lsr	lr, r0, #25
   26788:	str	lr, [fp, #-360]	; 0xfffffe98
   2678c:	ldrd	r0, [r4, #148]	; 0x94
   26790:	orr	r0, r0, r2
   26794:	orr	r1, r1, r3
   26798:	strd	r0, [r4, #244]	; 0xf4
   2679c:	bne	26804 <__assert_fail@plt+0x13300>
   267a0:	ldr	r8, [fp, #-268]	; 0xfffffef4
   267a4:	b	26008 <__assert_fail@plt+0x12b04>
   267a8:	mov	r1, #10
   267ac:	bl	132dc <__overflow@plt>
   267b0:	b	25b70 <__assert_fail@plt+0x1266c>
   267b4:	ldr	r3, [sl]
   267b8:	rev	lr, r3
   267bc:	b	25c90 <__assert_fail@plt+0x1278c>
   267c0:	mov	r1, #10
   267c4:	bl	132dc <__overflow@plt>
   267c8:	b	256a8 <__assert_fail@plt+0x121a4>
   267cc:	rsb	r3, r0, r5
   267d0:	cmp	r3, #7
   267d4:	ble	25ccc <__assert_fail@plt+0x127c8>
   267d8:	cmp	ip, #0
   267dc:	bne	26864 <__assert_fail@plt+0x13360>
   267e0:	ldr	r3, [fp, #-256]	; 0xffffff00
   267e4:	ldr	lr, [fp, #-256]	; 0xffffff00
   267e8:	ldr	r3, [r3]
   267ec:	ldr	lr, [lr, #4]
   267f0:	str	r3, [fp, #-236]	; 0xffffff14
   267f4:	str	lr, [fp, #-232]	; 0xffffff18
   267f8:	add	r0, sl, #12
   267fc:	str	r0, [fp, #-256]	; 0xffffff00
   26800:	b	25cac <__assert_fail@plt+0x127a8>
   26804:	add	r8, r8, #1
   26808:	cmp	r8, r9
   2680c:	bcs	26888 <__assert_fail@plt+0x13384>
   26810:	ldrb	r0, [ip], #1
   26814:	rsb	r1, r8, r8, lsl #3
   26818:	sub	r4, r1, #32
   2681c:	rsb	lr, r1, #32
   26820:	and	r2, r0, #127	; 0x7f
   26824:	tst	r0, #128	; 0x80
   26828:	uxtb	r2, r2
   2682c:	lsl	r4, r2, r4
   26830:	lsl	r1, r2, r1
   26834:	orr	lr, r4, r2, lsr lr
   26838:	sub	r2, fp, #512	; 0x200
   2683c:	str	r1, [fp, #-284]	; 0xfffffee4
   26840:	str	lr, [fp, #-280]	; 0xfffffee8
   26844:	ldrd	r0, [r2, #244]	; 0xf4
   26848:	ldrd	r2, [r2, #228]	; 0xe4
   2684c:	orr	r1, r1, r3
   26850:	sub	r3, fp, #512	; 0x200
   26854:	orr	r0, r0, r2
   26858:	strd	r0, [r3, #244]	; 0xf4
   2685c:	beq	267a0 <__assert_fail@plt+0x1329c>
   26860:	b	26804 <__assert_fail@plt+0x13300>
   26864:	ldr	r3, [sl, #4]
   26868:	ldr	r0, [r0, #4]
   2686c:	rev	r3, r3
   26870:	str	r3, [fp, #-232]	; 0xffffff18
   26874:	rev	r0, r0
   26878:	str	r0, [fp, #-236]	; 0xffffff14
   2687c:	b	267f8 <__assert_fail@plt+0x132f4>
   26880:	cmp	r9, #1
   26884:	bhi	26760 <__assert_fail@plt+0x1325c>
   26888:	mvn	r8, #0
   2688c:	b	26008 <__assert_fail@plt+0x12b04>
   26890:	rsb	r1, ip, r7
   26894:	cmp	r1, #9
   26898:	movhi	lr, #10
   2689c:	bls	2696c <__assert_fail@plt+0x13468>
   268a0:	ldrb	r1, [ip, #1]
   268a4:	add	r4, ip, #2
   268a8:	and	r0, r1, #127	; 0x7f
   268ac:	tst	r1, #128	; 0x80
   268b0:	uxtb	r0, r0
   268b4:	movne	r9, #1
   268b8:	lsr	ip, r0, #25
   268bc:	str	ip, [fp, #-368]	; 0xfffffe90
   268c0:	lsl	ip, r0, #7
   268c4:	str	ip, [fp, #-372]	; 0xfffffe8c
   268c8:	sub	ip, fp, #512	; 0x200
   268cc:	ldrd	r0, [ip, #140]	; 0x8c
   268d0:	orr	r0, r0, r2
   268d4:	orr	r1, r1, r3
   268d8:	strd	r0, [ip, #244]	; 0xf4
   268dc:	movne	ip, r4
   268e0:	bne	26900 <__assert_fail@plt+0x133fc>
   268e4:	ldr	r9, [fp, #-268]	; 0xfffffef4
   268e8:	b	2602c <__assert_fail@plt+0x12b28>
   268ec:	ldr	r3, [r9, #1]
   268f0:	ldr	r2, [r9, #5]
   268f4:	rev	r5, r3
   268f8:	rev	r4, r2
   268fc:	b	25d80 <__assert_fail@plt+0x1287c>
   26900:	add	r9, r9, #1
   26904:	cmp	lr, r9
   26908:	bls	2697c <__assert_fail@plt+0x13478>
   2690c:	ldrb	r0, [ip], #1
   26910:	rsb	r1, r9, r9, lsl #3
   26914:	rsb	r3, r1, #32
   26918:	str	r3, [fp, #-272]	; 0xfffffef0
   2691c:	and	r2, r0, #127	; 0x7f
   26920:	sub	r4, r1, #32
   26924:	tst	r0, #128	; 0x80
   26928:	ldr	r0, [fp, #-272]	; 0xfffffef0
   2692c:	uxtb	r2, r2
   26930:	lsl	r4, r2, r4
   26934:	lsl	r1, r2, r1
   26938:	orr	r4, r4, r2, lsr r0
   2693c:	sub	r0, fp, #512	; 0x200
   26940:	str	r4, [fp, #-288]	; 0xfffffee0
   26944:	ldrd	r2, [r0, #244]	; 0xf4
   26948:	str	r1, [fp, #-292]	; 0xfffffedc
   2694c:	ldrd	r0, [r0, #220]	; 0xdc
   26950:	orr	r3, r3, r1
   26954:	sub	r1, fp, #512	; 0x200
   26958:	orr	r2, r2, r0
   2695c:	strd	r2, [r1, #244]	; 0xf4
   26960:	bne	26900 <__assert_fail@plt+0x133fc>
   26964:	mov	r4, ip
   26968:	b	268e4 <__assert_fail@plt+0x133e0>
   2696c:	cmp	r1, #1
   26970:	bls	26988 <__assert_fail@plt+0x13484>
   26974:	mov	lr, r1
   26978:	b	268a0 <__assert_fail@plt+0x1339c>
   2697c:	mov	r4, ip
   26980:	mvn	r9, #0
   26984:	b	2602c <__assert_fail@plt+0x12b28>
   26988:	mvn	r9, #0
   2698c:	b	2602c <__assert_fail@plt+0x12b28>
   26990:	ldr	r3, [r4]
   26994:	ldr	r2, [r4, #4]
   26998:	rev	r3, r3
   2699c:	rev	r2, r2
   269a0:	b	26580 <__assert_fail@plt+0x1307c>
   269a4:	ldr	r3, [r4]
   269a8:	ldr	r2, [r4, #4]
   269ac:	rev	r3, r3
   269b0:	rev	r2, r2
   269b4:	b	26568 <__assert_fail@plt+0x13064>
   269b8:	ldr	r3, [r8]
   269bc:	ldr	r2, [r8, #4]
   269c0:	rev	r3, r3
   269c4:	rev	r2, r2
   269c8:	b	26550 <__assert_fail@plt+0x1304c>
   269cc:	ldr	r3, [r8]
   269d0:	ldr	r2, [r8, #4]
   269d4:	rev	r3, r3
   269d8:	rev	r2, r2
   269dc:	b	26530 <__assert_fail@plt+0x1302c>
   269e0:	rev	r2, r2
   269e4:	b	263bc <__assert_fail@plt+0x12eb8>
   269e8:	cmp	r7, r8
   269ec:	bls	26b88 <__assert_fail@plt+0x13684>
   269f0:	rsb	r3, r8, r7
   269f4:	cmp	r3, #9
   269f8:	movhi	ip, #10
   269fc:	bls	26b7c <__assert_fail@plt+0x13678>
   26a00:	ldrb	r3, [r8, #1]
   26a04:	add	r9, r8, #2
   26a08:	and	r2, r3, #127	; 0x7f
   26a0c:	tst	r3, #128	; 0x80
   26a10:	uxtb	r2, r2
   26a14:	lsr	r4, r2, #25
   26a18:	str	r4, [fp, #-376]	; 0xfffffe88
   26a1c:	sub	r4, fp, #512	; 0x200
   26a20:	lsl	lr, r2, #7
   26a24:	str	lr, [fp, #-380]	; 0xfffffe84
   26a28:	ldrd	r2, [r4, #132]	; 0x84
   26a2c:	orr	r2, r2, r0
   26a30:	orr	r3, r3, r1
   26a34:	strd	r2, [r4, #244]	; 0xf4
   26a38:	movne	r4, #1
   26a3c:	bne	26aa8 <__assert_fail@plt+0x135a4>
   26a40:	ldr	r8, [fp, #-268]	; 0xfffffef4
   26a44:	b	26124 <__assert_fail@plt+0x12c20>
   26a48:	cmp	r7, r8
   26a4c:	bls	26b74 <__assert_fail@plt+0x13670>
   26a50:	rsb	r3, r8, r7
   26a54:	cmp	r3, #9
   26a58:	movhi	ip, #10
   26a5c:	bls	26b68 <__assert_fail@plt+0x13664>
   26a60:	ldrb	r3, [r8, #1]
   26a64:	add	r9, r8, #2
   26a68:	and	r2, r3, #127	; 0x7f
   26a6c:	tst	r3, #128	; 0x80
   26a70:	uxtb	r2, r2
   26a74:	lsl	r4, r2, #7
   26a78:	str	r4, [fp, #-388]	; 0xfffffe7c
   26a7c:	sub	r4, fp, #512	; 0x200
   26a80:	lsr	lr, r2, #25
   26a84:	str	lr, [fp, #-384]	; 0xfffffe80
   26a88:	ldrd	r2, [r4, #124]	; 0x7c
   26a8c:	orr	r2, r2, r0
   26a90:	orr	r3, r3, r1
   26a94:	strd	r2, [r4, #244]	; 0xf4
   26a98:	movne	r4, #1
   26a9c:	bne	26b08 <__assert_fail@plt+0x13604>
   26aa0:	ldr	r8, [fp, #-268]	; 0xfffffef4
   26aa4:	b	260c0 <__assert_fail@plt+0x12bbc>
   26aa8:	add	r4, r4, #1
   26aac:	cmp	ip, r4
   26ab0:	bls	26b88 <__assert_fail@plt+0x13684>
   26ab4:	ldrb	r0, [r9], #1
   26ab8:	rsb	r1, r4, r4, lsl #3
   26abc:	sub	r8, r1, #32
   26ac0:	rsb	lr, r1, #32
   26ac4:	and	r2, r0, #127	; 0x7f
   26ac8:	tst	r0, #128	; 0x80
   26acc:	uxtb	r2, r2
   26ad0:	lsl	r8, r2, r8
   26ad4:	lsl	r1, r2, r1
   26ad8:	orr	lr, r8, r2, lsr lr
   26adc:	sub	r2, fp, #512	; 0x200
   26ae0:	str	r1, [fp, #-300]	; 0xfffffed4
   26ae4:	str	lr, [fp, #-296]	; 0xfffffed8
   26ae8:	ldrd	r0, [r2, #244]	; 0xf4
   26aec:	ldrd	r2, [r2, #212]	; 0xd4
   26af0:	orr	r1, r1, r3
   26af4:	sub	r3, fp, #512	; 0x200
   26af8:	orr	r0, r0, r2
   26afc:	strd	r0, [r3, #244]	; 0xf4
   26b00:	beq	26a40 <__assert_fail@plt+0x1353c>
   26b04:	b	26aa8 <__assert_fail@plt+0x135a4>
   26b08:	add	r4, r4, #1
   26b0c:	cmp	ip, r4
   26b10:	bls	26b74 <__assert_fail@plt+0x13670>
   26b14:	ldrb	r0, [r9], #1
   26b18:	rsb	r1, r4, r4, lsl #3
   26b1c:	sub	r8, r1, #32
   26b20:	rsb	lr, r1, #32
   26b24:	and	r2, r0, #127	; 0x7f
   26b28:	tst	r0, #128	; 0x80
   26b2c:	uxtb	r2, r2
   26b30:	lsl	r8, r2, r8
   26b34:	lsl	r1, r2, r1
   26b38:	orr	lr, r8, r2, lsr lr
   26b3c:	sub	r2, fp, #512	; 0x200
   26b40:	str	r1, [fp, #-308]	; 0xfffffecc
   26b44:	str	lr, [fp, #-304]	; 0xfffffed0
   26b48:	ldrd	r0, [r2, #244]	; 0xf4
   26b4c:	ldrd	r2, [r2, #204]	; 0xcc
   26b50:	orr	r1, r1, r3
   26b54:	sub	r3, fp, #512	; 0x200
   26b58:	orr	r0, r0, r2
   26b5c:	strd	r0, [r3, #244]	; 0xf4
   26b60:	beq	26aa0 <__assert_fail@plt+0x1359c>
   26b64:	b	26b08 <__assert_fail@plt+0x13604>
   26b68:	cmp	r3, #1
   26b6c:	movhi	ip, r3
   26b70:	bhi	26a60 <__assert_fail@plt+0x1355c>
   26b74:	mvn	r8, #0
   26b78:	b	260c0 <__assert_fail@plt+0x12bbc>
   26b7c:	cmp	r3, #1
   26b80:	movhi	ip, r3
   26b84:	bhi	26a00 <__assert_fail@plt+0x134fc>
   26b88:	mvn	r8, #0
   26b8c:	b	26124 <__assert_fail@plt+0x12c20>
   26b90:	cmp	r7, r8
   26b94:	bls	26c64 <__assert_fail@plt+0x13760>
   26b98:	rsb	r9, r8, r7
   26b9c:	cmp	r9, #9
   26ba0:	movhi	r9, #10
   26ba4:	bls	26c5c <__assert_fail@plt+0x13758>
   26ba8:	ldrb	r1, [r8, #1]
   26bac:	add	r4, r8, #2
   26bb0:	and	r0, r1, #127	; 0x7f
   26bb4:	tst	r1, #128	; 0x80
   26bb8:	uxtb	r0, r0
   26bbc:	movne	r8, #1
   26bc0:	lsr	ip, r0, #25
   26bc4:	str	ip, [fp, #-432]	; 0xfffffe50
   26bc8:	sub	ip, fp, #512	; 0x200
   26bcc:	lsl	lr, r0, #7
   26bd0:	str	lr, [fp, #-436]	; 0xfffffe4c
   26bd4:	ldrd	r0, [ip, #76]	; 0x4c
   26bd8:	orr	r0, r0, r2
   26bdc:	orr	r1, r1, r3
   26be0:	strd	r0, [ip, #244]	; 0xf4
   26be4:	bne	26bfc <__assert_fail@plt+0x136f8>
   26be8:	ldr	r8, [fp, #-268]	; 0xfffffef4
   26bec:	b	25f38 <__assert_fail@plt+0x12a34>
   26bf0:	mov	r1, #10
   26bf4:	bl	132dc <__overflow@plt>
   26bf8:	b	25eb0 <__assert_fail@plt+0x129ac>
   26bfc:	add	r8, r8, #1
   26c00:	cmp	r9, r8
   26c04:	bls	26c64 <__assert_fail@plt+0x13760>
   26c08:	ldrb	r0, [r4], #1
   26c0c:	rsb	r1, r8, r8, lsl #3
   26c10:	sub	lr, r1, #32
   26c14:	rsb	ip, r1, #32
   26c18:	and	r2, r0, #127	; 0x7f
   26c1c:	tst	r0, #128	; 0x80
   26c20:	uxtb	r2, r2
   26c24:	lsl	lr, r2, lr
   26c28:	lsl	r1, r2, r1
   26c2c:	orr	ip, lr, r2, lsr ip
   26c30:	sub	r2, fp, #512	; 0x200
   26c34:	str	r1, [fp, #-356]	; 0xfffffe9c
   26c38:	str	ip, [fp, #-352]	; 0xfffffea0
   26c3c:	ldrd	r0, [r2, #244]	; 0xf4
   26c40:	ldrd	r2, [r2, #156]	; 0x9c
   26c44:	orr	r1, r1, r3
   26c48:	sub	r3, fp, #512	; 0x200
   26c4c:	orr	r0, r0, r2
   26c50:	strd	r0, [r3, #244]	; 0xf4
   26c54:	beq	26be8 <__assert_fail@plt+0x136e4>
   26c58:	b	26bfc <__assert_fail@plt+0x136f8>
   26c5c:	cmp	r9, #1
   26c60:	bhi	26ba8 <__assert_fail@plt+0x136a4>
   26c64:	mvn	r8, #0
   26c68:	b	25f38 <__assert_fail@plt+0x12a34>
   26c6c:	bl	12dc0 <__stack_chk_fail@plt>
   26c70:	mov	r4, #8
   26c74:	str	r4, [fp, #-268]	; 0xfffffef4
   26c78:	b	258c4 <__assert_fail@plt+0x123c0>
   26c7c:	mov	r2, #5
   26c80:	mov	r0, r5
   26c84:	movw	r1, #8820	; 0x2274
   26c88:	movt	r1, #4
   26c8c:	bl	12d84 <dcgettext@plt>
   26c90:	mov	r2, #4
   26c94:	mov	r1, r0
   26c98:	mov	r0, #1
   26c9c:	bl	13204 <__printf_chk@plt>
   26ca0:	cmp	sl, #0
   26ca4:	moveq	ip, #4
   26ca8:	streq	ip, [fp, #-268]	; 0xfffffef4
   26cac:	beq	258c4 <__assert_fail@plt+0x123c0>
   26cb0:	ldr	r5, [fp, #-240]	; 0xffffff10
   26cb4:	ldr	r4, [r9, #1]
   26cb8:	ldrb	r3, [r5, #84]	; 0x54
   26cbc:	cmp	r3, #0
   26cc0:	bne	26d34 <__assert_fail@plt+0x13830>
   26cc4:	mov	r2, #5
   26cc8:	movw	r1, #8480	; 0x2120
   26ccc:	mov	r0, #0
   26cd0:	movt	r1, #4
   26cd4:	bl	12d84 <dcgettext@plt>
   26cd8:	mov	r5, #0
   26cdc:	mov	r2, r4
   26ce0:	mov	r3, r5
   26ce4:	add	r6, r6, #4
   26ce8:	mov	r1, r0
   26cec:	mov	r0, #1
   26cf0:	bl	13204 <__printf_chk@plt>
   26cf4:	mov	ip, #4
   26cf8:	str	ip, [fp, #-268]	; 0xfffffef4
   26cfc:	b	25dc8 <__assert_fail@plt+0x128c4>
   26d00:	mov	r2, #5
   26d04:	movw	r1, #1872	; 0x750
   26d08:	movt	r1, #4
   26d0c:	bl	12d84 <dcgettext@plt>
   26d10:	mov	r4, r0
   26d14:	mvn	r0, #0
   26d18:	bl	130a8 <elf_errmsg@plt>
   26d1c:	mov	r2, r4
   26d20:	mov	r3, r0
   26d24:	ldr	r0, [fp, #-260]	; 0xfffffefc
   26d28:	mov	r1, r0
   26d2c:	bl	12f70 <error@plt>
   26d30:	b	25b0c <__assert_fail@plt+0x12608>
   26d34:	rev	r4, r4
   26d38:	b	26cc4 <__assert_fail@plt+0x137c0>
   26d3c:	cmp	r7, r8
   26d40:	bls	26e0c <__assert_fail@plt+0x13908>
   26d44:	rsb	r9, r8, r7
   26d48:	cmp	r9, #9
   26d4c:	movhi	r9, #10
   26d50:	bls	26e04 <__assert_fail@plt+0x13900>
   26d54:	ldrb	r1, [r8, #1]
   26d58:	add	r4, r8, #2
   26d5c:	and	r0, r1, #127	; 0x7f
   26d60:	tst	r1, #128	; 0x80
   26d64:	uxtb	r0, r0
   26d68:	movne	r8, #1
   26d6c:	lsr	ip, r0, #25
   26d70:	str	ip, [fp, #-392]	; 0xfffffe78
   26d74:	sub	ip, fp, #512	; 0x200
   26d78:	lsl	lr, r0, #7
   26d7c:	str	lr, [fp, #-396]	; 0xfffffe74
   26d80:	ldrd	r0, [ip, #116]	; 0x74
   26d84:	orr	r0, r0, r2
   26d88:	orr	r1, r1, r3
   26d8c:	strd	r0, [ip, #244]	; 0xf4
   26d90:	bne	26da4 <__assert_fail@plt+0x138a0>
   26d94:	ldr	r8, [fp, #-268]	; 0xfffffef4
   26d98:	b	26394 <__assert_fail@plt+0x12e90>
   26d9c:	rev	r2, r2
   26da0:	b	26334 <__assert_fail@plt+0x12e30>
   26da4:	add	r8, r8, #1
   26da8:	cmp	r9, r8
   26dac:	bls	26e0c <__assert_fail@plt+0x13908>
   26db0:	ldrb	r0, [r4], #1
   26db4:	rsb	r1, r8, r8, lsl #3
   26db8:	sub	lr, r1, #32
   26dbc:	rsb	ip, r1, #32
   26dc0:	and	r2, r0, #127	; 0x7f
   26dc4:	tst	r0, #128	; 0x80
   26dc8:	uxtb	r2, r2
   26dcc:	lsl	lr, r2, lr
   26dd0:	lsl	r1, r2, r1
   26dd4:	orr	ip, lr, r2, lsr ip
   26dd8:	sub	r2, fp, #512	; 0x200
   26ddc:	str	r1, [fp, #-316]	; 0xfffffec4
   26de0:	str	ip, [fp, #-312]	; 0xfffffec8
   26de4:	ldrd	r0, [r2, #244]	; 0xf4
   26de8:	ldrd	r2, [r2, #196]	; 0xc4
   26dec:	orr	r1, r1, r3
   26df0:	sub	r3, fp, #512	; 0x200
   26df4:	orr	r0, r0, r2
   26df8:	strd	r0, [r3, #244]	; 0xf4
   26dfc:	beq	26d94 <__assert_fail@plt+0x13890>
   26e00:	b	26da4 <__assert_fail@plt+0x138a0>
   26e04:	cmp	r9, #1
   26e08:	bhi	26d54 <__assert_fail@plt+0x13850>
   26e0c:	mvn	r8, #0
   26e10:	b	26394 <__assert_fail@plt+0x12e90>
   26e14:	cmp	r7, r8
   26e18:	bls	26ee4 <__assert_fail@plt+0x139e0>
   26e1c:	rsb	r9, r8, r7
   26e20:	cmp	r9, #9
   26e24:	movhi	r9, #10
   26e28:	bls	26edc <__assert_fail@plt+0x139d8>
   26e2c:	ldrb	r1, [r8, #1]
   26e30:	add	r4, r8, #2
   26e34:	and	r0, r1, #127	; 0x7f
   26e38:	tst	r1, #128	; 0x80
   26e3c:	uxtb	r0, r0
   26e40:	movne	r8, #1
   26e44:	lsr	ip, r0, #25
   26e48:	str	ip, [fp, #-400]	; 0xfffffe70
   26e4c:	sub	ip, fp, #512	; 0x200
   26e50:	lsl	lr, r0, #7
   26e54:	str	lr, [fp, #-404]	; 0xfffffe6c
   26e58:	ldrd	r0, [ip, #108]	; 0x6c
   26e5c:	orr	r0, r0, r2
   26e60:	orr	r1, r1, r3
   26e64:	strd	r0, [ip, #244]	; 0xf4
   26e68:	bne	26e7c <__assert_fail@plt+0x13978>
   26e6c:	ldr	r8, [fp, #-268]	; 0xfffffef4
   26e70:	b	2630c <__assert_fail@plt+0x12e08>
   26e74:	rev	r2, r2
   26e78:	b	262d0 <__assert_fail@plt+0x12dcc>
   26e7c:	add	r8, r8, #1
   26e80:	cmp	r8, r9
   26e84:	bcs	26ee4 <__assert_fail@plt+0x139e0>
   26e88:	ldrb	r0, [r4], #1
   26e8c:	rsb	r1, r8, r8, lsl #3
   26e90:	sub	lr, r1, #32
   26e94:	rsb	ip, r1, #32
   26e98:	and	r2, r0, #127	; 0x7f
   26e9c:	tst	r0, #128	; 0x80
   26ea0:	uxtb	r2, r2
   26ea4:	lsl	lr, r2, lr
   26ea8:	lsl	r1, r2, r1
   26eac:	orr	ip, lr, r2, lsr ip
   26eb0:	sub	r2, fp, #512	; 0x200
   26eb4:	str	r1, [fp, #-324]	; 0xfffffebc
   26eb8:	str	ip, [fp, #-320]	; 0xfffffec0
   26ebc:	ldrd	r0, [r2, #244]	; 0xf4
   26ec0:	ldrd	r2, [r2, #188]	; 0xbc
   26ec4:	orr	r1, r1, r3
   26ec8:	sub	r3, fp, #512	; 0x200
   26ecc:	orr	r0, r0, r2
   26ed0:	strd	r0, [r3, #244]	; 0xf4
   26ed4:	beq	26e6c <__assert_fail@plt+0x13968>
   26ed8:	b	26e7c <__assert_fail@plt+0x13978>
   26edc:	cmp	r9, #1
   26ee0:	bhi	26e2c <__assert_fail@plt+0x13928>
   26ee4:	mvn	r8, #0
   26ee8:	b	2630c <__assert_fail@plt+0x12e08>
   26eec:	cmp	r7, r8
   26ef0:	bls	27084 <__assert_fail@plt+0x13b80>
   26ef4:	rsb	r9, r8, r7
   26ef8:	cmp	r9, #9
   26efc:	movhi	r9, #10
   26f00:	bls	2707c <__assert_fail@plt+0x13b78>
   26f04:	ldrb	r1, [r8, #1]
   26f08:	add	r4, r8, #2
   26f0c:	and	r0, r1, #127	; 0x7f
   26f10:	tst	r1, #128	; 0x80
   26f14:	uxtb	r0, r0
   26f18:	movne	r8, #1
   26f1c:	lsr	ip, r0, #25
   26f20:	str	ip, [fp, #-408]	; 0xfffffe68
   26f24:	sub	ip, fp, #512	; 0x200
   26f28:	lsl	lr, r0, #7
   26f2c:	str	lr, [fp, #-412]	; 0xfffffe64
   26f30:	ldrd	r0, [ip, #100]	; 0x64
   26f34:	orr	r0, r0, r2
   26f38:	orr	r1, r1, r3
   26f3c:	strd	r0, [ip, #244]	; 0xf4
   26f40:	bne	26fac <__assert_fail@plt+0x13aa8>
   26f44:	ldr	r8, [fp, #-268]	; 0xfffffef4
   26f48:	b	2628c <__assert_fail@plt+0x12d88>
   26f4c:	cmp	r7, r8
   26f50:	bls	27074 <__assert_fail@plt+0x13b70>
   26f54:	rsb	r9, r8, r7
   26f58:	cmp	r9, #9
   26f5c:	movhi	r9, #10
   26f60:	bls	2706c <__assert_fail@plt+0x13b68>
   26f64:	ldrb	r1, [r8, #1]
   26f68:	add	r4, r8, #2
   26f6c:	and	r0, r1, #127	; 0x7f
   26f70:	tst	r1, #128	; 0x80
   26f74:	uxtb	r0, r0
   26f78:	movne	r8, #1
   26f7c:	lsr	ip, r0, #25
   26f80:	str	ip, [fp, #-416]	; 0xfffffe60
   26f84:	sub	ip, fp, #512	; 0x200
   26f88:	lsl	lr, r0, #7
   26f8c:	str	lr, [fp, #-420]	; 0xfffffe5c
   26f90:	ldrd	r0, [ip, #92]	; 0x5c
   26f94:	orr	r0, r0, r2
   26f98:	orr	r1, r1, r3
   26f9c:	strd	r0, [ip, #244]	; 0xf4
   26fa0:	bne	2700c <__assert_fail@plt+0x13b08>
   26fa4:	ldr	r8, [fp, #-268]	; 0xfffffef4
   26fa8:	b	26204 <__assert_fail@plt+0x12d00>
   26fac:	add	r8, r8, #1
   26fb0:	cmp	r8, r9
   26fb4:	bcs	27084 <__assert_fail@plt+0x13b80>
   26fb8:	ldrb	r0, [r4], #1
   26fbc:	rsb	r1, r8, r8, lsl #3
   26fc0:	sub	lr, r1, #32
   26fc4:	rsb	ip, r1, #32
   26fc8:	and	r2, r0, #127	; 0x7f
   26fcc:	tst	r0, #128	; 0x80
   26fd0:	uxtb	r2, r2
   26fd4:	lsl	lr, r2, lr
   26fd8:	lsl	r1, r2, r1
   26fdc:	orr	ip, lr, r2, lsr ip
   26fe0:	sub	r2, fp, #512	; 0x200
   26fe4:	str	r1, [fp, #-332]	; 0xfffffeb4
   26fe8:	str	ip, [fp, #-328]	; 0xfffffeb8
   26fec:	ldrd	r0, [r2, #244]	; 0xf4
   26ff0:	ldrd	r2, [r2, #180]	; 0xb4
   26ff4:	orr	r1, r1, r3
   26ff8:	sub	r3, fp, #512	; 0x200
   26ffc:	orr	r0, r0, r2
   27000:	strd	r0, [r3, #244]	; 0xf4
   27004:	beq	26f44 <__assert_fail@plt+0x13a40>
   27008:	b	26fac <__assert_fail@plt+0x13aa8>
   2700c:	add	r8, r8, #1
   27010:	cmp	r9, r8
   27014:	bls	27074 <__assert_fail@plt+0x13b70>
   27018:	ldrb	r0, [r4], #1
   2701c:	rsb	r1, r8, r8, lsl #3
   27020:	sub	lr, r1, #32
   27024:	rsb	ip, r1, #32
   27028:	and	r2, r0, #127	; 0x7f
   2702c:	tst	r0, #128	; 0x80
   27030:	uxtb	r2, r2
   27034:	lsl	lr, r2, lr
   27038:	lsl	r1, r2, r1
   2703c:	orr	ip, lr, r2, lsr ip
   27040:	sub	r2, fp, #512	; 0x200
   27044:	str	r1, [fp, #-340]	; 0xfffffeac
   27048:	str	ip, [fp, #-336]	; 0xfffffeb0
   2704c:	ldrd	r0, [r2, #244]	; 0xf4
   27050:	ldrd	r2, [r2, #172]	; 0xac
   27054:	orr	r1, r1, r3
   27058:	sub	r3, fp, #512	; 0x200
   2705c:	orr	r0, r0, r2
   27060:	strd	r0, [r3, #244]	; 0xf4
   27064:	beq	26fa4 <__assert_fail@plt+0x13aa0>
   27068:	b	2700c <__assert_fail@plt+0x13b08>
   2706c:	cmp	r9, #1
   27070:	bhi	26f64 <__assert_fail@plt+0x13a60>
   27074:	mvn	r8, #0
   27078:	b	26204 <__assert_fail@plt+0x12d00>
   2707c:	cmp	r9, #1
   27080:	bhi	26f04 <__assert_fail@plt+0x13a00>
   27084:	mvn	r8, #0
   27088:	b	2628c <__assert_fail@plt+0x12d88>
   2708c:	rev	r2, r2
   27090:	b	261b4 <__assert_fail@plt+0x12cb0>
   27094:	cmp	r7, r8
   27098:	bls	270fc <__assert_fail@plt+0x13bf8>
   2709c:	rsb	r9, r8, r7
   270a0:	cmp	r9, #9
   270a4:	movhi	r9, #10
   270a8:	bls	270f4 <__assert_fail@plt+0x13bf0>
   270ac:	ldrb	r1, [r8, #1]
   270b0:	add	r4, r8, #2
   270b4:	and	r0, r1, #127	; 0x7f
   270b8:	tst	r1, #128	; 0x80
   270bc:	uxtb	r0, r0
   270c0:	movne	r8, #1
   270c4:	lsr	ip, r0, #25
   270c8:	str	ip, [fp, #-424]	; 0xfffffe58
   270cc:	sub	ip, fp, #512	; 0x200
   270d0:	lsl	lr, r0, #7
   270d4:	str	lr, [fp, #-428]	; 0xfffffe54
   270d8:	ldrd	r0, [ip, #84]	; 0x54
   270dc:	orr	r0, r0, r2
   270e0:	orr	r1, r1, r3
   270e4:	strd	r0, [ip, #244]	; 0xf4
   270e8:	bne	27104 <__assert_fail@plt+0x13c00>
   270ec:	ldr	r8, [fp, #-268]	; 0xfffffef4
   270f0:	b	26170 <__assert_fail@plt+0x12c6c>
   270f4:	cmp	r9, #1
   270f8:	bhi	270ac <__assert_fail@plt+0x13ba8>
   270fc:	mvn	r8, #0
   27100:	b	26170 <__assert_fail@plt+0x12c6c>
   27104:	add	r8, r8, #1
   27108:	cmp	r9, r8
   2710c:	bls	270fc <__assert_fail@plt+0x13bf8>
   27110:	ldrb	r0, [r4], #1
   27114:	rsb	r1, r8, r8, lsl #3
   27118:	sub	lr, r1, #32
   2711c:	rsb	ip, r1, #32
   27120:	and	r2, r0, #127	; 0x7f
   27124:	tst	r0, #128	; 0x80
   27128:	uxtb	r2, r2
   2712c:	lsl	lr, r2, lr
   27130:	lsl	r1, r2, r1
   27134:	orr	ip, lr, r2, lsr ip
   27138:	sub	r2, fp, #512	; 0x200
   2713c:	str	r1, [fp, #-348]	; 0xfffffea4
   27140:	str	ip, [fp, #-344]	; 0xfffffea8
   27144:	ldrd	r0, [r2, #244]	; 0xf4
   27148:	ldrd	r2, [r2, #164]	; 0xa4
   2714c:	orr	r1, r1, r3
   27150:	sub	r3, fp, #512	; 0x200
   27154:	orr	r0, r0, r2
   27158:	strd	r0, [r3, #244]	; 0xf4
   2715c:	beq	270ec <__assert_fail@plt+0x13be8>
   27160:	b	27104 <__assert_fail@plt+0x13c00>
   27164:	movw	ip, #37640	; 0x9308
   27168:	movt	ip, #5
   2716c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27170:	movw	r8, #37688	; 0x9338
   27174:	movt	r8, #5
   27178:	ldrb	r9, [ip, #36]	; 0x24
   2717c:	mov	sl, r1
   27180:	sub	sp, sp, #72	; 0x48
   27184:	ldr	r1, [r8]
   27188:	cmp	r9, #0
   2718c:	mov	r4, #0
   27190:	mov	r5, #0
   27194:	strd	r2, [sp, #24]
   27198:	mov	r6, r0
   2719c:	strd	r4, [sp, #32]
   271a0:	movw	r4, #37712	; 0x9350
   271a4:	str	r1, [sp, #68]	; 0x44
   271a8:	movt	r4, #5
   271ac:	beq	2722c <__assert_fail@plt+0x13d28>
   271b0:	ldrb	r1, [r4, #33]	; 0x21
   271b4:	cmp	r1, #0
   271b8:	movne	r9, #0
   271bc:	beq	27208 <__assert_fail@plt+0x13d04>
   271c0:	ldrd	r2, [sp, #104]	; 0x68
   271c4:	strd	r2, [sp, #24]
   271c8:	cmp	r9, #0
   271cc:	beq	27434 <__assert_fail@plt+0x13f30>
   271d0:	ldrd	r4, [sp, #32]
   271d4:	orrs	r6, r4, r5
   271d8:	beq	2738c <__assert_fail@plt+0x13e88>
   271dc:	cmp	sl, #0
   271e0:	bne	273d8 <__assert_fail@plt+0x13ed4>
   271e4:	ldrd	r2, [sp, #24]
   271e8:	movw	r1, #8924	; 0x22dc
   271ec:	str	r9, [sp]
   271f0:	movt	r1, #4
   271f4:	strd	r4, [sp, #8]
   271f8:	mov	r0, #1
   271fc:	bl	13204 <__printf_chk@plt>
   27200:	lsr	r0, r0, #31
   27204:	b	272b4 <__assert_fail@plt+0x13db0>
   27208:	add	lr, sp, #32
   2720c:	add	ip, sp, #40	; 0x28
   27210:	str	r1, [sp, #8]
   27214:	str	r1, [sp, #12]
   27218:	str	r1, [sp, #16]
   2721c:	str	lr, [sp]
   27220:	str	ip, [sp, #4]
   27224:	bl	13408 <dwfl_module_addrinfo@plt>
   27228:	mov	r9, r0
   2722c:	ldrb	r4, [r4, #33]	; 0x21
   27230:	cmp	r4, #0
   27234:	bne	271c0 <__assert_fail@plt+0x13cbc>
   27238:	mov	r0, r6
   2723c:	bl	12ebc <dwfl_module_relocations@plt>
   27240:	cmp	r0, #0
   27244:	ble	271c8 <__assert_fail@plt+0x13cc4>
   27248:	add	r1, sp, #24
   2724c:	mov	r0, r6
   27250:	bl	13000 <dwfl_module_relocate_address@plt>
   27254:	subs	r1, r0, #0
   27258:	blt	271c8 <__assert_fail@plt+0x13cc4>
   2725c:	mov	r2, r4
   27260:	mov	r0, r6
   27264:	bl	13288 <dwfl_module_relocation_info@plt>
   27268:	cmp	r9, #0
   2726c:	mov	r2, r0
   27270:	beq	2735c <__assert_fail@plt+0x13e58>
   27274:	ldrd	r4, [sp, #32]
   27278:	orrs	r3, r4, r5
   2727c:	beq	272d4 <__assert_fail@plt+0x13dd0>
   27280:	cmp	r0, #0
   27284:	beq	271dc <__assert_fail@plt+0x13cd8>
   27288:	cmp	sl, #0
   2728c:	ldrd	r6, [sp, #24]
   27290:	bne	27308 <__assert_fail@plt+0x13e04>
   27294:	str	r9, [sp, #8]
   27298:	movw	r1, #8880	; 0x22b0
   2729c:	strd	r4, [sp, #16]
   272a0:	movt	r1, #4
   272a4:	strd	r6, [sp]
   272a8:	mov	r0, #1
   272ac:	bl	13204 <__printf_chk@plt>
   272b0:	lsr	r0, r0, #31
   272b4:	cmp	r0, #0
   272b8:	bne	27484 <__assert_fail@plt+0x13f80>
   272bc:	ldr	r2, [sp, #68]	; 0x44
   272c0:	ldr	r3, [r8]
   272c4:	cmp	r2, r3
   272c8:	bne	27480 <__assert_fail@plt+0x13f7c>
   272cc:	add	sp, sp, #72	; 0x48
   272d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   272d4:	cmp	r0, #0
   272d8:	beq	2738c <__assert_fail@plt+0x13e88>
   272dc:	cmp	sl, #0
   272e0:	ldrd	r4, [sp, #24]
   272e4:	bne	27334 <__assert_fail@plt+0x13e30>
   272e8:	str	r9, [sp, #8]
   272ec:	movw	r1, #8964	; 0x2304
   272f0:	mov	r0, #1
   272f4:	movt	r1, #4
   272f8:	strd	r4, [sp]
   272fc:	bl	13204 <__printf_chk@plt>
   27300:	lsr	r0, r0, #31
   27304:	b	272b4 <__assert_fail@plt+0x13db0>
   27308:	add	r3, sl, #1
   2730c:	str	r9, [sp, #8]
   27310:	strd	r4, [sp, #16]
   27314:	movw	r1, #8900	; 0x22c4
   27318:	lsl	r3, r3, #1
   2731c:	strd	r6, [sp]
   27320:	mov	r0, #1
   27324:	movt	r1, #4
   27328:	bl	13204 <__printf_chk@plt>
   2732c:	lsr	r0, r0, #31
   27330:	b	272b4 <__assert_fail@plt+0x13db0>
   27334:	add	r3, sl, #1
   27338:	str	r9, [sp, #8]
   2733c:	movw	r1, #8980	; 0x2314
   27340:	strd	r4, [sp]
   27344:	lsl	r3, r3, #1
   27348:	movt	r1, #4
   2734c:	mov	r0, #1
   27350:	bl	13204 <__printf_chk@plt>
   27354:	lsr	r0, r0, #31
   27358:	b	272b4 <__assert_fail@plt+0x13db0>
   2735c:	cmp	r0, #0
   27360:	beq	27434 <__assert_fail@plt+0x13f30>
   27364:	cmp	sl, #0
   27368:	ldrd	r4, [sp, #24]
   2736c:	bne	273b4 <__assert_fail@plt+0x13eb0>
   27370:	movw	r1, #9024	; 0x2340
   27374:	mov	r0, #1
   27378:	movt	r1, #4
   2737c:	strd	r4, [sp]
   27380:	bl	13204 <__printf_chk@plt>
   27384:	lsr	r0, r0, #31
   27388:	b	272b4 <__assert_fail@plt+0x13db0>
   2738c:	cmp	sl, #0
   27390:	bne	27408 <__assert_fail@plt+0x13f04>
   27394:	ldrd	r2, [sp, #24]
   27398:	movw	r1, #8996	; 0x2324
   2739c:	str	r9, [sp]
   273a0:	movt	r1, #4
   273a4:	mov	r0, #1
   273a8:	bl	13204 <__printf_chk@plt>
   273ac:	lsr	r0, r0, #31
   273b0:	b	272b4 <__assert_fail@plt+0x13db0>
   273b4:	add	r3, sl, #1
   273b8:	movw	r1, #9036	; 0x234c
   273bc:	strd	r4, [sp]
   273c0:	movt	r1, #4
   273c4:	lsl	r3, r3, #1
   273c8:	mov	r0, #1
   273cc:	bl	13204 <__printf_chk@plt>
   273d0:	lsr	r0, r0, #31
   273d4:	b	272b4 <__assert_fail@plt+0x13db0>
   273d8:	ldrd	r6, [sp, #24]
   273dc:	add	r2, sl, #1
   273e0:	str	r9, [sp, #8]
   273e4:	movw	r1, #8944	; 0x22f0
   273e8:	lsl	r2, r2, #1
   273ec:	strd	r4, [sp, #16]
   273f0:	strd	r6, [sp]
   273f4:	movt	r1, #4
   273f8:	mov	r0, #1
   273fc:	bl	13204 <__printf_chk@plt>
   27400:	lsr	r0, r0, #31
   27404:	b	272b4 <__assert_fail@plt+0x13db0>
   27408:	ldrd	r4, [sp, #24]
   2740c:	add	r2, sl, #1
   27410:	str	r9, [sp, #8]
   27414:	movw	r1, #9008	; 0x2330
   27418:	lsl	r2, r2, #1
   2741c:	movt	r1, #4
   27420:	strd	r4, [sp]
   27424:	mov	r0, #1
   27428:	bl	13204 <__printf_chk@plt>
   2742c:	lsr	r0, r0, #31
   27430:	b	272b4 <__assert_fail@plt+0x13db0>
   27434:	cmp	sl, #0
   27438:	bne	27458 <__assert_fail@plt+0x13f54>
   2743c:	movw	r1, #9048	; 0x2358
   27440:	mov	r0, #1
   27444:	movt	r1, #4
   27448:	ldrd	r2, [sp, #24]
   2744c:	bl	13204 <__printf_chk@plt>
   27450:	lsr	r0, r0, #31
   27454:	b	272b4 <__assert_fail@plt+0x13db0>
   27458:	ldrd	r4, [sp, #24]
   2745c:	add	r2, sl, #1
   27460:	mov	r0, #1
   27464:	movw	r1, #53848	; 0xd258
   27468:	lsl	r2, r2, r0
   2746c:	movt	r1, #3
   27470:	strd	r4, [sp]
   27474:	bl	13204 <__printf_chk@plt>
   27478:	lsr	r0, r0, #31
   2747c:	b	272b4 <__assert_fail@plt+0x13db0>
   27480:	bl	12dc0 <__stack_chk_fail@plt>
   27484:	mov	r2, #5
   27488:	movw	r0, #60748	; 0xed4c
   2748c:	movw	r1, #9056	; 0x2360
   27490:	movt	r0, #3
   27494:	movt	r1, #4
   27498:	bl	12d84 <dcgettext@plt>
   2749c:	mov	r1, #0
   274a0:	mov	r2, r0
   274a4:	mov	r0, #1
   274a8:	bl	12f70 <error@plt>
   274ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   274b0:	sub	sp, sp, #268	; 0x10c
   274b4:	movw	r9, #37688	; 0x9338
   274b8:	movt	r9, #5
   274bc:	ldr	ip, [sp, #304]	; 0x130
   274c0:	mov	r5, r2
   274c4:	ldr	r4, [sp, #312]	; 0x138
   274c8:	ldr	r8, [sp, #308]	; 0x134
   274cc:	cmp	ip, #2
   274d0:	str	r0, [sp, #240]	; 0xf0
   274d4:	add	r0, sp, #512	; 0x200
   274d8:	str	r3, [sp, #60]	; 0x3c
   274dc:	ldrd	sl, [r0, #-192]	; 0xffffff40
   274e0:	movls	r4, r8
   274e4:	ldr	r3, [r9]
   274e8:	str	r4, [sp, #68]	; 0x44
   274ec:	orrs	lr, sl, fp
   274f0:	ldr	r4, [sp, #316]	; 0x13c
   274f4:	str	r1, [sp, #64]	; 0x40
   274f8:	ldr	r8, [sp, #328]	; 0x148
   274fc:	str	r4, [sp, #72]	; 0x48
   27500:	str	r3, [sp, #260]	; 0x104
   27504:	beq	2796c <__assert_fail@plt+0x14468>
   27508:	subs	r0, sl, #1
   2750c:	mov	r7, r5
   27510:	movw	ip, #55496	; 0xd8c8
   27514:	movw	r4, #55484	; 0xd8bc
   27518:	movt	ip, #3
   2751c:	movt	r4, #3
   27520:	str	ip, [sp, #52]	; 0x34
   27524:	sbc	r1, fp, #0
   27528:	movw	ip, #50660	; 0xc5e4
   2752c:	mov	r2, #0
   27530:	movt	ip, #3
   27534:	mov	r3, #0
   27538:	str	r4, [sp, #56]	; 0x38
   2753c:	strd	r0, [sp, #40]	; 0x28
   27540:	str	ip, [sp, #48]	; 0x30
   27544:	strd	r2, [sp, #32]
   27548:	str	r9, [sp, #76]	; 0x4c
   2754c:	ldrb	r4, [r8]
   27550:	add	r9, r8, #1
   27554:	cmp	r4, #253	; 0xfd
   27558:	bhi	28890 <__assert_fail@plt+0x1538c>
   2755c:	ldr	r5, [sp, #48]	; 0x30
   27560:	add	r3, r5, r4, lsl #2
   27564:	ldr	r6, [r3, #708]	; 0x2c4
   27568:	cmp	r6, #0
   2756c:	beq	28890 <__assert_fail@plt+0x1538c>
   27570:	sub	r4, r4, #3
   27574:	cmp	r4, #250	; 0xfa
   27578:	ldrls	pc, [pc, r4, lsl #2]
   2757c:	b	28798 <__assert_fail@plt+0x15294>
   27580:	andeq	r7, r2, ip, lsr sl
   27584:	muleq	r2, r8, r7
   27588:	muleq	r2, r8, r7
   2758c:	muleq	r2, r8, r7
   27590:	muleq	r2, r8, r7
   27594:	andeq	r7, r2, r0, lsl fp
   27598:	andeq	r7, r2, r0, ror #22
   2759c:	andeq	r7, r2, r0, asr lr
   275a0:	muleq	r2, r4, sp
   275a4:	andeq	r7, r2, ip, lsl #28
   275a8:			; <UNDEFINED> instruction: 0x00027bb8
   275ac:	andeq	r7, r2, ip, lsr ip
   275b0:			; <UNDEFINED> instruction: 0x00027cb0
   275b4:	strdeq	r7, [r2], -r8
   275b8:	andeq	r7, r2, r8, lsr #29
   275bc:	muleq	r2, r8, r7
   275c0:	muleq	r2, r8, r7
   275c4:	muleq	r2, r8, r7
   275c8:	andeq	r7, r2, r0, lsl fp
   275cc:	muleq	r2, r8, r7
   275d0:	muleq	r2, r8, r7
   275d4:	muleq	r2, r8, r7
   275d8:	muleq	r2, r8, r7
   275dc:	muleq	r2, r8, r7
   275e0:	muleq	r2, r8, r7
   275e4:	muleq	r2, r8, r7
   275e8:	muleq	r2, r8, r7
   275ec:	muleq	r2, r8, r7
   275f0:	muleq	r2, r8, r7
   275f4:	muleq	r2, r8, r7
   275f8:	muleq	r2, r8, r7
   275fc:	muleq	r2, r8, r7
   27600:	strdeq	r7, [r2], -r8
   27604:	muleq	r2, r8, r7
   27608:	muleq	r2, r8, r7
   2760c:	muleq	r2, r8, r7
   27610:	muleq	r2, r8, r7
   27614:	strdeq	r7, [r2], -ip
   27618:	muleq	r2, r8, r7
   2761c:	muleq	r2, r8, r7
   27620:	muleq	r2, r8, r7
   27624:	muleq	r2, r8, r7
   27628:	muleq	r2, r8, r7
   2762c:	muleq	r2, r8, r7
   27630:	strdeq	r7, [r2], -ip
   27634:	muleq	r2, r8, r7
   27638:	muleq	r2, r8, r7
   2763c:	muleq	r2, r8, r7
   27640:	muleq	r2, r8, r7
   27644:	muleq	r2, r8, r7
   27648:	muleq	r2, r8, r7
   2764c:	muleq	r2, r8, r7
   27650:	muleq	r2, r8, r7
   27654:	muleq	r2, r8, r7
   27658:	muleq	r2, r8, r7
   2765c:	muleq	r2, r8, r7
   27660:	muleq	r2, r8, r7
   27664:	muleq	r2, r8, r7
   27668:	muleq	r2, r8, r7
   2766c:	muleq	r2, r8, r7
   27670:	muleq	r2, r8, r7
   27674:	muleq	r2, r8, r7
   27678:	muleq	r2, r8, r7
   2767c:	muleq	r2, r8, r7
   27680:	muleq	r2, r8, r7
   27684:	muleq	r2, r8, r7
   27688:	muleq	r2, r8, r7
   2768c:	muleq	r2, r8, r7
   27690:	muleq	r2, r8, r7
   27694:	muleq	r2, r8, r7
   27698:	muleq	r2, r8, r7
   2769c:	muleq	r2, r8, r7
   276a0:	muleq	r2, r8, r7
   276a4:	muleq	r2, r8, r7
   276a8:	muleq	r2, r8, r7
   276ac:	muleq	r2, r8, r7
   276b0:	muleq	r2, r8, r7
   276b4:	muleq	r2, r8, r7
   276b8:	muleq	r2, r8, r7
   276bc:	muleq	r2, r8, r7
   276c0:	muleq	r2, r8, r7
   276c4:	muleq	r2, r8, r7
   276c8:	muleq	r2, r8, r7
   276cc:	muleq	r2, r8, r7
   276d0:	muleq	r2, r8, r7
   276d4:	muleq	r2, r8, r7
   276d8:	muleq	r2, r8, r7
   276dc:	muleq	r2, r8, r7
   276e0:	muleq	r2, r8, r7
   276e4:	muleq	r2, r8, r7
   276e8:	muleq	r2, r8, r7
   276ec:	muleq	r2, r8, r7
   276f0:	muleq	r2, r8, r7
   276f4:	muleq	r2, r8, r7
   276f8:	muleq	r2, r8, r7
   276fc:	muleq	r2, r8, r7
   27700:	muleq	r2, r8, r7
   27704:	muleq	r2, r8, r7
   27708:	muleq	r2, r8, r7
   2770c:	muleq	r2, r8, r7
   27710:	muleq	r2, r8, r7
   27714:	muleq	r2, r8, r7
   27718:	muleq	r2, r8, r7
   2771c:	muleq	r2, r8, r7
   27720:	muleq	r2, r8, r7
   27724:	muleq	r2, r8, r7
   27728:	muleq	r2, r8, r7
   2772c:	muleq	r2, r8, r7
   27730:	muleq	r2, r8, r7
   27734:	andeq	r7, r2, r8, lsr #29
   27738:	andeq	r7, r2, r8, lsr #29
   2773c:	andeq	r7, r2, r8, lsr #29
   27740:	andeq	r7, r2, r8, lsr #29
   27744:	andeq	r7, r2, r8, lsr #29
   27748:	andeq	r7, r2, r8, lsr #29
   2774c:	andeq	r7, r2, r8, lsr #29
   27750:	andeq	r7, r2, r8, lsr #29
   27754:	andeq	r7, r2, r8, lsr #29
   27758:	andeq	r7, r2, r8, lsr #29
   2775c:	andeq	r7, r2, r8, lsr #29
   27760:	andeq	r7, r2, r8, lsr #29
   27764:	andeq	r7, r2, r8, lsr #29
   27768:	andeq	r7, r2, r8, lsr #29
   2776c:	andeq	r7, r2, r8, lsr #29
   27770:	andeq	r7, r2, r8, lsr #29
   27774:	andeq	r7, r2, r8, lsr #29
   27778:	andeq	r7, r2, r8, lsr #29
   2777c:	andeq	r7, r2, r8, lsr #29
   27780:	andeq	r7, r2, r8, lsr #29
   27784:	andeq	r7, r2, r8, lsr #29
   27788:	andeq	r7, r2, r8, lsr #29
   2778c:	andeq	r7, r2, r8, lsr #29
   27790:	andeq	r7, r2, r8, lsr #29
   27794:	andeq	r7, r2, r8, lsr #29
   27798:	andeq	r7, r2, r8, lsr #29
   2779c:	andeq	r7, r2, r8, lsr #29
   277a0:	andeq	r7, r2, r8, lsr #29
   277a4:	andeq	r7, r2, r8, lsr #29
   277a8:	andeq	r7, r2, r8, lsr #29
   277ac:	andeq	r7, r2, r8, lsr #29
   277b0:	andeq	r7, r2, r8, lsr #29
   277b4:	strdeq	r7, [r2], -r8
   277b8:	andeq	r7, r2, r8, lsr #29
   277bc:	andeq	r7, r2, r4, lsl #31
   277c0:	strdeq	r7, [r2], -r8
   277c4:	andeq	r7, r2, r0, lsl fp
   277c8:	andeq	r7, r2, r0, lsl fp
   277cc:	muleq	r2, r8, r7
   277d0:	muleq	r2, r8, r7
   277d4:	andeq	r8, r2, r0, lsl r0
   277d8:	andeq	r8, r2, r8, rrx
   277dc:	andeq	r8, r2, ip, lsr #1
   277e0:	muleq	r2, r8, r7
   277e4:	muleq	r2, r8, r7
   277e8:	andeq	r8, r2, ip, asr r1
   277ec:	strdeq	r8, [r2], -r0
   277f0:	muleq	r2, r8, r7
   277f4:	andeq	r8, r2, r4, ror #4
   277f8:	andeq	r8, r2, r8, lsr #6
   277fc:	andeq	r8, r2, r8, lsr #6
   27800:	strdeq	r8, [r2], -r4
   27804:	muleq	r2, r8, r4
   27808:	andeq	r8, r2, ip, asr #10
   2780c:	andeq	r8, r2, r4, lsr #13
   27810:	andeq	r8, r2, r0, lsl #12
   27814:	andeq	r8, r2, r4, lsr #14
   27818:	andeq	r8, r2, r4, lsr #14
   2781c:	muleq	r2, r8, r7
   27820:	muleq	r2, r8, r7
   27824:	muleq	r2, r8, r7
   27828:	muleq	r2, r8, r7
   2782c:	muleq	r2, r8, r7
   27830:	muleq	r2, r8, r7
   27834:	muleq	r2, r8, r7
   27838:	muleq	r2, r8, r7
   2783c:	muleq	r2, r8, r7
   27840:	muleq	r2, r8, r7
   27844:	muleq	r2, r8, r7
   27848:	muleq	r2, r8, r7
   2784c:	muleq	r2, r8, r7
   27850:	muleq	r2, r8, r7
   27854:	muleq	r2, r8, r7
   27858:	muleq	r2, r8, r7
   2785c:	muleq	r2, r8, r7
   27860:	muleq	r2, r8, r7
   27864:	muleq	r2, r8, r7
   27868:	muleq	r2, r8, r7
   2786c:	muleq	r2, r8, r7
   27870:	muleq	r2, r8, r7
   27874:	muleq	r2, r8, r7
   27878:	muleq	r2, r8, r7
   2787c:	muleq	r2, r8, r7
   27880:	muleq	r2, r8, r7
   27884:	muleq	r2, r8, r7
   27888:	muleq	r2, r8, r7
   2788c:	muleq	r2, r8, r7
   27890:	muleq	r2, r8, r7
   27894:	muleq	r2, r8, r7
   27898:	muleq	r2, r8, r7
   2789c:	muleq	r2, r8, r7
   278a0:	muleq	r2, r8, r7
   278a4:	muleq	r2, r8, r7
   278a8:	muleq	r2, r8, r7
   278ac:	muleq	r2, r8, r7
   278b0:	muleq	r2, r8, r7
   278b4:	muleq	r2, r8, r7
   278b8:	muleq	r2, r8, r7
   278bc:	muleq	r2, r8, r7
   278c0:	muleq	r2, r8, r7
   278c4:	muleq	r2, r8, r7
   278c8:	muleq	r2, r8, r7
   278cc:	muleq	r2, r8, r7
   278d0:	muleq	r2, r8, r7
   278d4:	muleq	r2, r8, r7
   278d8:	muleq	r2, r8, r7
   278dc:	muleq	r2, r8, r7
   278e0:	muleq	r2, r8, r7
   278e4:	muleq	r2, r8, r7
   278e8:	muleq	r2, r8, r7
   278ec:	muleq	r2, r8, r7
   278f0:	muleq	r2, r8, r7
   278f4:	muleq	r2, r8, r7
   278f8:	muleq	r2, r8, r7
   278fc:	muleq	r2, r8, r7
   27900:	muleq	r2, r8, r7
   27904:	muleq	r2, r8, r7
   27908:	muleq	r2, r8, r7
   2790c:	muleq	r2, r8, r7
   27910:	muleq	r2, r8, r7
   27914:	muleq	r2, r8, r7
   27918:	muleq	r2, r8, r7
   2791c:	muleq	r2, r8, r7
   27920:	muleq	r2, r8, r7
   27924:	muleq	r2, r8, r7
   27928:	muleq	r2, r8, r7
   2792c:	muleq	r2, r8, r7
   27930:	muleq	r2, r8, r7
   27934:	muleq	r2, r8, r7
   27938:	muleq	r2, r8, r7
   2793c:	andeq	r8, r2, r4, ror #4
   27940:	strdeq	r8, [r2], -r4
   27944:	muleq	r2, r8, r4
   27948:	andeq	r8, r2, ip, asr #10
   2794c:	andeq	r8, r2, r4, lsr #13
   27950:	andeq	r8, r2, r4, lsr #14
   27954:	muleq	r2, r8, r7
   27958:	andeq	r8, r2, r4, lsr #14
   2795c:	muleq	r2, ip, r9
   27960:	andeq	r8, r2, r8, lsr #6
   27964:	andeq	r8, r2, r8, lsr #6
   27968:	andeq	r8, r2, ip, lsr #1
   2796c:	movw	r1, #9072	; 0x2370
   27970:	movw	r3, #15800	; 0x3db8
   27974:	movt	r1, #4
   27978:	movt	r3, #4
   2797c:	mov	r0, #1
   27980:	bl	13204 <__printf_chk@plt>
   27984:	ldr	r2, [sp, #260]	; 0x104
   27988:	ldr	r3, [r9]
   2798c:	cmp	r2, r3
   27990:	bne	288c4 <__assert_fail@plt+0x153c0>
   27994:	add	sp, sp, #268	; 0x10c
   27998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2799c:	ldrd	r4, [sp, #40]	; 0x28
   279a0:	cmp	r5, #0
   279a4:	cmpeq	r4, #3
   279a8:	bls	27b1c <__assert_fail@plt+0x14618>
   279ac:	ldr	r5, [sp, #64]	; 0x40
   279b0:	ldr	r4, [r8, #1]
   279b4:	ldrb	r3, [r5, #84]	; 0x54
   279b8:	cmp	r3, #0
   279bc:	bne	28c6c <__assert_fail@plt+0x15768>
   279c0:	movw	r3, #37712	; 0x9350
   279c4:	movt	r3, #5
   279c8:	mov	r5, #0
   279cc:	ldrb	r3, [r3, #33]	; 0x21
   279d0:	cmp	r3, #0
   279d4:	bne	279f0 <__assert_fail@plt+0x144ec>
   279d8:	ldr	ip, [sp, #72]	; 0x48
   279dc:	cmp	ip, #0
   279e0:	beq	279f0 <__assert_fail@plt+0x144ec>
   279e4:	ldrd	r0, [ip, #8]
   279e8:	adds	r4, r4, r0
   279ec:	adc	r5, r5, r1
   279f0:	ldrd	r0, [sp, #32]
   279f4:	subs	sl, sl, #5
   279f8:	strd	r4, [sp, #16]
   279fc:	sbc	fp, fp, #0
   27a00:	ldrd	r4, [sp, #32]
   27a04:	mov	r2, r7
   27a08:	strd	r0, [sp]
   27a0c:	movw	r3, #15800	; 0x3db8
   27a10:	adds	r4, r4, #5
   27a14:	str	r6, [sp, #8]
   27a18:	movw	r1, #9440	; 0x24e0
   27a1c:	movt	r3, #4
   27a20:	movt	r1, #4
   27a24:	mov	r0, #1
   27a28:	adc	r5, r5, #0
   27a2c:	add	r8, r8, #5
   27a30:	strd	r4, [sp, #32]
   27a34:	bl	13204 <__printf_chk@plt>
   27a38:	b	27c20 <__assert_fail@plt+0x1471c>
   27a3c:	ldr	r4, [sp, #308]	; 0x134
   27a40:	mov	r5, #0
   27a44:	mov	fp, r5
   27a48:	mov	sl, r4
   27a4c:	ldrd	r4, [sp, #40]	; 0x28
   27a50:	cmp	fp, r5
   27a54:	cmpeq	sl, r4
   27a58:	bhi	27b1c <__assert_fail@plt+0x14618>
   27a5c:	ldr	r5, [sp, #308]	; 0x134
   27a60:	cmp	r5, #4
   27a64:	beq	287f8 <__assert_fail@plt+0x152f4>
   27a68:	ldr	r4, [sp, #308]	; 0x134
   27a6c:	cmp	r4, #8
   27a70:	bne	27b1c <__assert_fail@plt+0x14618>
   27a74:	ldr	r5, [sp, #64]	; 0x40
   27a78:	ldrb	r3, [r5, #84]	; 0x54
   27a7c:	cmp	r3, #0
   27a80:	ldreq	r2, [r8, #1]
   27a84:	ldreq	r3, [r8, #5]
   27a88:	bne	28968 <__assert_fail@plt+0x15464>
   27a8c:	str	r2, [sp, #248]	; 0xf8
   27a90:	str	r3, [sp, #252]	; 0xfc
   27a94:	ldrd	r4, [sp, #32]
   27a98:	mov	r2, r7
   27a9c:	str	r6, [sp, #8]
   27aa0:	movw	r1, #9508	; 0x2524
   27aa4:	movw	r3, #15800	; 0x3db8
   27aa8:	movt	r1, #4
   27aac:	strd	r4, [sp]
   27ab0:	movt	r3, #4
   27ab4:	ldrd	r4, [sp, #40]	; 0x28
   27ab8:	mov	r0, #1
   27abc:	subs	sl, r4, sl
   27ac0:	sbc	fp, r5, fp
   27ac4:	ldr	r5, [sp, #308]	; 0x134
   27ac8:	bl	13204 <__printf_chk@plt>
   27acc:	ldr	r0, [sp, #240]	; 0xf0
   27ad0:	add	r8, r9, r5
   27ad4:	ldrd	r4, [sp, #248]	; 0xf8
   27ad8:	mov	r1, #0
   27adc:	mov	r3, r5
   27ae0:	mov	r2, r4
   27ae4:	strd	r4, [sp]
   27ae8:	bl	27164 <__assert_fail@plt+0x13c60>
   27aec:	mov	r0, #10
   27af0:	bl	131b0 <putchar@plt>
   27af4:	ldr	ip, [sp, #308]	; 0x134
   27af8:	ldrd	r4, [sp, #32]
   27afc:	add	r3, ip, #1
   27b00:	adds	r4, r4, r3
   27b04:	adc	r5, r5, #0
   27b08:	strd	r4, [sp, #32]
   27b0c:	b	27c20 <__assert_fail@plt+0x1471c>
   27b10:	ldrd	r4, [sp, #40]	; 0x28
   27b14:	orrs	r5, r4, r5
   27b18:	bne	287d8 <__assert_fail@plt+0x152d4>
   27b1c:	ldr	r9, [sp, #76]	; 0x4c
   27b20:	mov	r5, r7
   27b24:	mov	r2, #5
   27b28:	movw	r1, #9480	; 0x2508
   27b2c:	mov	r0, #0
   27b30:	movt	r1, #4
   27b34:	bl	12d84 <dcgettext@plt>
   27b38:	ldrd	sl, [sp, #32]
   27b3c:	str	r6, [sp, #8]
   27b40:	mov	r2, r5
   27b44:	movw	r3, #15800	; 0x3db8
   27b48:	movt	r3, #4
   27b4c:	strd	sl, [sp]
   27b50:	mov	r1, r0
   27b54:	mov	r0, #1
   27b58:	bl	13204 <__printf_chk@plt>
   27b5c:	b	27984 <__assert_fail@plt+0x14480>
   27b60:	ldrd	r4, [sp, #40]	; 0x28
   27b64:	orrs	r5, r4, r5
   27b68:	beq	27b1c <__assert_fail@plt+0x14618>
   27b6c:	ldrd	r4, [sp, #32]
   27b70:	movw	r1, #9124	; 0x23a4
   27b74:	str	r6, [sp, #8]
   27b78:	movt	r1, #4
   27b7c:	mov	r2, r7
   27b80:	strd	r4, [sp]
   27b84:	ldrsb	ip, [r8, #1]
   27b88:	subs	sl, sl, #2
   27b8c:	movw	r3, #15800	; 0x3db8
   27b90:	sbc	fp, fp, #0
   27b94:	movt	r3, #4
   27b98:	adds	r4, r4, #2
   27b9c:	str	ip, [sp, #12]
   27ba0:	mov	r0, #1
   27ba4:	adc	r5, r5, #0
   27ba8:	add	r8, r8, #2
   27bac:	strd	r4, [sp, #32]
   27bb0:	bl	13204 <__printf_chk@plt>
   27bb4:	b	27c20 <__assert_fail@plt+0x1471c>
   27bb8:	ldrd	r4, [sp, #40]	; 0x28
   27bbc:	cmp	r5, #0
   27bc0:	cmpeq	r4, #3
   27bc4:	bls	27b1c <__assert_fail@plt+0x14618>
   27bc8:	ldr	r5, [sp, #64]	; 0x40
   27bcc:	ldrb	r3, [r5, #84]	; 0x54
   27bd0:	cmp	r3, #0
   27bd4:	ldr	r3, [r8, #1]
   27bd8:	bne	28e74 <__assert_fail@plt+0x15970>
   27bdc:	ldrd	r4, [sp, #32]
   27be0:	movw	r1, #9124	; 0x23a4
   27be4:	movt	r1, #4
   27be8:	mov	r2, r7
   27bec:	str	r6, [sp, #8]
   27bf0:	strd	r4, [sp]
   27bf4:	str	r3, [sp, #12]
   27bf8:	subs	sl, sl, #5
   27bfc:	movw	r3, #15800	; 0x3db8
   27c00:	sbc	fp, fp, #0
   27c04:	mov	r0, #1
   27c08:	adds	r4, r4, #5
   27c0c:	movt	r3, #4
   27c10:	adc	r5, r5, #0
   27c14:	add	r8, r8, #5
   27c18:	strd	r4, [sp, #32]
   27c1c:	bl	13204 <__printf_chk@plt>
   27c20:	subs	r4, sl, #1
   27c24:	sbc	r5, fp, #0
   27c28:	strd	r4, [sp, #40]	; 0x28
   27c2c:	orrs	r5, sl, fp
   27c30:	beq	28864 <__assert_fail@plt+0x15360>
   27c34:	ldr	r7, [sp, #60]	; 0x3c
   27c38:	b	2754c <__assert_fail@plt+0x14048>
   27c3c:	ldrd	r4, [sp, #40]	; 0x28
   27c40:	cmp	r5, #0
   27c44:	cmpeq	r4, #7
   27c48:	bls	27b1c <__assert_fail@plt+0x14618>
   27c4c:	ldr	r5, [sp, #64]	; 0x40
   27c50:	ldrb	r3, [r5, #84]	; 0x54
   27c54:	cmp	r3, #0
   27c58:	ldreq	r0, [r8, #1]
   27c5c:	ldreq	r3, [r8, #5]
   27c60:	bne	28f1c <__assert_fail@plt+0x15a18>
   27c64:	ldrd	r4, [sp, #32]
   27c68:	movw	r1, #9104	; 0x2390
   27c6c:	movt	r1, #4
   27c70:	mov	r2, r7
   27c74:	str	r6, [sp, #8]
   27c78:	strd	r4, [sp]
   27c7c:	str	r0, [sp, #16]
   27c80:	subs	sl, sl, #9
   27c84:	str	r3, [sp, #20]
   27c88:	sbc	fp, fp, #0
   27c8c:	movw	r3, #15800	; 0x3db8
   27c90:	adds	r4, r4, #9
   27c94:	movt	r3, #4
   27c98:	mov	r0, #1
   27c9c:	adc	r5, r5, #0
   27ca0:	add	r8, r8, #9
   27ca4:	strd	r4, [sp, #32]
   27ca8:	bl	13204 <__printf_chk@plt>
   27cac:	b	27c20 <__assert_fail@plt+0x1471c>
   27cb0:	ldrd	r4, [sp, #40]	; 0x28
   27cb4:	cmp	r5, #0
   27cb8:	cmpeq	r4, #7
   27cbc:	bls	27b1c <__assert_fail@plt+0x14618>
   27cc0:	ldr	r5, [sp, #64]	; 0x40
   27cc4:	ldrb	r3, [r5, #84]	; 0x54
   27cc8:	cmp	r3, #0
   27ccc:	ldreq	r0, [r8, #1]
   27cd0:	ldreq	r3, [r8, #5]
   27cd4:	bne	28f08 <__assert_fail@plt+0x15a04>
   27cd8:	ldrd	r4, [sp, #32]
   27cdc:	movw	r1, #9144	; 0x23b8
   27ce0:	mov	r2, r7
   27ce4:	str	r6, [sp, #8]
   27ce8:	str	r0, [sp, #16]
   27cec:	movt	r1, #4
   27cf0:	strd	r4, [sp]
   27cf4:	b	27c80 <__assert_fail@plt+0x1477c>
   27cf8:	ldrd	sl, [sp, #40]	; 0x28
   27cfc:	orrs	fp, sl, fp
   27d00:	beq	27b1c <__assert_fail@plt+0x14618>
   27d04:	ldrb	r2, [r8, #1]
   27d08:	mov	r3, #0
   27d0c:	add	r8, r8, #2
   27d10:	tst	r2, #128	; 0x80
   27d14:	and	r2, r2, #127	; 0x7f
   27d18:	uxtb	r2, r2
   27d1c:	bne	28e8c <__assert_fail@plt+0x15988>
   27d20:	mov	r0, r2
   27d24:	mov	r2, r3
   27d28:	ldrd	sl, [sp, #32]
   27d2c:	movw	r1, #9104	; 0x2390
   27d30:	movw	r3, #15800	; 0x3db8
   27d34:	movt	r1, #4
   27d38:	movt	r3, #4
   27d3c:	str	r0, [sp, #16]
   27d40:	mov	r0, #1
   27d44:	strd	sl, [sp]
   27d48:	str	r6, [sp, #8]
   27d4c:	str	r2, [sp, #20]
   27d50:	mov	r2, r7
   27d54:	bl	13204 <__printf_chk@plt>
   27d58:	rsb	ip, r9, r8
   27d5c:	ldrd	r4, [sp, #40]	; 0x28
   27d60:	asr	fp, ip, #31
   27d64:	mov	sl, ip
   27d68:	cmp	fp, r5
   27d6c:	cmpeq	sl, r4
   27d70:	bhi	27b1c <__assert_fail@plt+0x14618>
   27d74:	subs	sl, r4, sl
   27d78:	sbc	fp, r5, fp
   27d7c:	ldrd	r4, [sp, #32]
   27d80:	add	ip, ip, #1
   27d84:	adds	r4, r4, ip
   27d88:	adc	r5, r5, ip, asr #31
   27d8c:	strd	r4, [sp, #32]
   27d90:	b	27c20 <__assert_fail@plt+0x1471c>
   27d94:	ldrd	r4, [sp, #40]	; 0x28
   27d98:	cmp	r5, #0
   27d9c:	cmpeq	r4, #1
   27da0:	bls	27b1c <__assert_fail@plt+0x14618>
   27da4:	ldr	r5, [sp, #64]	; 0x40
   27da8:	movw	r1, #9124	; 0x23a4
   27dac:	movt	r1, #4
   27db0:	mov	r0, #1
   27db4:	ldrb	r3, [r5, #84]	; 0x54
   27db8:	ldrd	r4, [sp, #32]
   27dbc:	cmp	r3, #0
   27dc0:	ldrh	r3, [r8, #1]
   27dc4:	str	r6, [sp, #8]
   27dc8:	strd	r4, [sp]
   27dcc:	lslne	r2, r3, #8
   27dd0:	orrne	r3, r2, r3, lsr #8
   27dd4:	mov	r2, r7
   27dd8:	uxthne	r3, r3
   27ddc:	sxth	r3, r3
   27de0:	str	r3, [sp, #12]
   27de4:	movw	r3, #15800	; 0x3db8
   27de8:	movt	r3, #4
   27dec:	subs	sl, sl, #3
   27df0:	add	r8, r8, #3
   27df4:	sbc	fp, fp, #0
   27df8:	adds	r4, r4, #3
   27dfc:	adc	r5, r5, #0
   27e00:	strd	r4, [sp, #32]
   27e04:	bl	13204 <__printf_chk@plt>
   27e08:	b	27c20 <__assert_fail@plt+0x1471c>
   27e0c:	ldrd	r4, [sp, #40]	; 0x28
   27e10:	cmp	r5, #0
   27e14:	cmpeq	r4, #3
   27e18:	bls	27b1c <__assert_fail@plt+0x14618>
   27e1c:	ldr	r5, [sp, #64]	; 0x40
   27e20:	ldrb	r3, [r5, #84]	; 0x54
   27e24:	cmp	r3, #0
   27e28:	ldr	r3, [r8, #1]
   27e2c:	bne	28e84 <__assert_fail@plt+0x15980>
   27e30:	ldrd	r4, [sp, #32]
   27e34:	movw	r1, #9084	; 0x237c
   27e38:	mov	r2, r7
   27e3c:	str	r6, [sp, #8]
   27e40:	str	r3, [sp, #12]
   27e44:	movt	r1, #4
   27e48:	strd	r4, [sp]
   27e4c:	b	27bf8 <__assert_fail@plt+0x146f4>
   27e50:	ldrd	r4, [sp, #40]	; 0x28
   27e54:	cmp	r5, #0
   27e58:	cmpeq	r4, #1
   27e5c:	bls	27b1c <__assert_fail@plt+0x14618>
   27e60:	ldr	r5, [sp, #64]	; 0x40
   27e64:	movw	r1, #9084	; 0x237c
   27e68:	mov	r0, #1
   27e6c:	movt	r1, #4
   27e70:	ldrb	r3, [r5, #84]	; 0x54
   27e74:	ldrd	r4, [sp, #32]
   27e78:	cmp	r3, #0
   27e7c:	ldrh	r3, [r8, #1]
   27e80:	str	r6, [sp, #8]
   27e84:	strd	r4, [sp]
   27e88:	lslne	r2, r3, #8
   27e8c:	orrne	r3, r2, r3, lsr #8
   27e90:	mov	r2, r7
   27e94:	uxthne	r3, r3
   27e98:	str	r3, [sp, #12]
   27e9c:	movw	r3, #15800	; 0x3db8
   27ea0:	movt	r3, #4
   27ea4:	b	27dec <__assert_fail@plt+0x148e8>
   27ea8:	ldrd	sl, [sp, #40]	; 0x28
   27eac:	orrs	fp, sl, fp
   27eb0:	beq	27b1c <__assert_fail@plt+0x14618>
   27eb4:	ldrb	r3, [r8, #1]
   27eb8:	add	r8, r8, #2
   27ebc:	uxtb	r4, r3
   27ec0:	tst	r4, #128	; 0x80
   27ec4:	bne	29068 <__assert_fail@plt+0x15b64>
   27ec8:	sbfx	r4, r4, #0, #7
   27ecc:	sxtb	r4, r4
   27ed0:	asr	r5, r4, #31
   27ed4:	ldrd	sl, [sp, #32]
   27ed8:	movw	r1, #9144	; 0x23b8
   27edc:	movt	r1, #4
   27ee0:	str	r6, [sp, #8]
   27ee4:	strd	sl, [sp]
   27ee8:	movw	r3, #15800	; 0x3db8
   27eec:	strd	r4, [sp, #16]
   27ef0:	mov	r0, #1
   27ef4:	movt	r3, #4
   27ef8:	b	27d50 <__assert_fail@plt+0x1484c>
   27efc:	ldrd	r4, [sp, #40]	; 0x28
   27f00:	cmp	r5, #0
   27f04:	cmpeq	r4, #1
   27f08:	bls	27b1c <__assert_fail@plt+0x14618>
   27f0c:	ldr	r5, [sp, #64]	; 0x40
   27f10:	add	r8, r8, #3
   27f14:	ldrb	r3, [r5, #84]	; 0x54
   27f18:	ldrd	r4, [sp, #32]
   27f1c:	cmp	r3, #0
   27f20:	ldrhne	r3, [r8, #-2]
   27f24:	ldrheq	r0, [r8, #-2]
   27f28:	strd	r4, [sp]
   27f2c:	lslne	r2, r3, #8
   27f30:	str	r6, [sp, #8]
   27f34:	orrne	r3, r2, r3, lsr #8
   27f38:	mov	r2, r7
   27f3c:	uxthne	r0, r3
   27f40:	adds	r4, r4, #3
   27f44:	adc	r5, r5, #0
   27f48:	movw	r3, #15800	; 0x3db8
   27f4c:	sxth	r0, r0
   27f50:	movt	r3, #4
   27f54:	adds	r6, r0, r4
   27f58:	strd	r4, [sp, #32]
   27f5c:	asr	r1, r0, #31
   27f60:	mov	r0, #1
   27f64:	adc	r7, r1, r5
   27f68:	subs	sl, sl, #3
   27f6c:	movw	r1, #9104	; 0x2390
   27f70:	strd	r6, [sp, #16]
   27f74:	movt	r1, #4
   27f78:	sbc	fp, fp, #0
   27f7c:	bl	13204 <__printf_chk@plt>
   27f80:	b	27c20 <__assert_fail@plt+0x1471c>
   27f84:	ldrd	sl, [sp, #40]	; 0x28
   27f88:	orrs	fp, sl, fp
   27f8c:	beq	27b1c <__assert_fail@plt+0x14618>
   27f90:	ldrb	r2, [r8, #1]
   27f94:	add	lr, r8, #2
   27f98:	ldr	r5, [sp, #40]	; 0x28
   27f9c:	mov	r3, #0
   27fa0:	tst	r2, #128	; 0x80
   27fa4:	and	r2, r2, #127	; 0x7f
   27fa8:	uxtb	r2, r2
   27fac:	bne	28ff0 <__assert_fail@plt+0x15aec>
   27fb0:	mov	sl, r2
   27fb4:	mov	r0, r3
   27fb8:	ldrb	r3, [lr]
   27fbc:	add	r8, lr, #1
   27fc0:	uxtb	r4, r3
   27fc4:	tst	r4, #128	; 0x80
   27fc8:	bne	28f4c <__assert_fail@plt+0x15a48>
   27fcc:	sbfx	r4, r4, #0, #7
   27fd0:	sxtb	r4, r4
   27fd4:	asr	r5, r4, #31
   27fd8:	ldrd	r2, [sp, #32]
   27fdc:	movw	r1, #9216	; 0x2400
   27fe0:	str	r0, [sp, #20]
   27fe4:	movt	r1, #4
   27fe8:	str	r6, [sp, #8]
   27fec:	mov	r0, #1
   27ff0:	strd	r2, [sp]
   27ff4:	movw	r3, #15800	; 0x3db8
   27ff8:	str	sl, [sp, #16]
   27ffc:	movt	r3, #4
   28000:	strd	r4, [sp, #24]
   28004:	mov	r2, r7
   28008:	bl	13204 <__printf_chk@plt>
   2800c:	b	27d58 <__assert_fail@plt+0x14854>
   28010:	ldrd	r4, [sp, #40]	; 0x28
   28014:	cmp	r5, #0
   28018:	cmpeq	r4, #1
   2801c:	bls	27b1c <__assert_fail@plt+0x14618>
   28020:	ldr	r5, [sp, #64]	; 0x40
   28024:	movw	r1, #9244	; 0x241c
   28028:	mov	r0, #1
   2802c:	movt	r1, #4
   28030:	ldrb	r3, [r5, #84]	; 0x54
   28034:	ldrd	r4, [sp, #32]
   28038:	cmp	r3, #0
   2803c:	ldrh	r3, [r8, #1]
   28040:	str	r6, [sp, #8]
   28044:	strd	r4, [sp]
   28048:	lslne	r2, r3, #8
   2804c:	orrne	r3, r2, r3, lsr #8
   28050:	mov	r2, r7
   28054:	uxthne	r3, r3
   28058:	str	r3, [sp, #12]
   2805c:	movw	r3, #15800	; 0x3db8
   28060:	movt	r3, #4
   28064:	b	27dec <__assert_fail@plt+0x148e8>
   28068:	ldrd	r4, [sp, #40]	; 0x28
   2806c:	cmp	r5, #0
   28070:	cmpeq	r4, #3
   28074:	bls	27b1c <__assert_fail@plt+0x14618>
   28078:	ldr	r5, [sp, #64]	; 0x40
   2807c:	ldrb	r3, [r5, #84]	; 0x54
   28080:	cmp	r3, #0
   28084:	ldr	r3, [r8, #1]
   28088:	bne	28f44 <__assert_fail@plt+0x15a40>
   2808c:	ldrd	r4, [sp, #32]
   28090:	movw	r1, #9244	; 0x241c
   28094:	mov	r2, r7
   28098:	str	r6, [sp, #8]
   2809c:	str	r3, [sp, #12]
   280a0:	movt	r1, #4
   280a4:	strd	r4, [sp]
   280a8:	b	27bf8 <__assert_fail@plt+0x146f4>
   280ac:	ldr	sl, [sp, #68]	; 0x44
   280b0:	cmp	sl, #8
   280b4:	cmpne	sl, #4
   280b8:	bne	27b1c <__assert_fail@plt+0x14618>
   280bc:	mov	r5, #0
   280c0:	mov	fp, r5
   280c4:	ldrd	r4, [sp, #40]	; 0x28
   280c8:	cmp	fp, r5
   280cc:	cmpeq	sl, r4
   280d0:	bhi	27b1c <__assert_fail@plt+0x14618>
   280d4:	ldr	r5, [sp, #68]	; 0x44
   280d8:	cmp	r5, #4
   280dc:	beq	28840 <__assert_fail@plt+0x1533c>
   280e0:	ldr	r4, [sp, #64]	; 0x40
   280e4:	ldrb	r3, [r4, #84]	; 0x54
   280e8:	cmp	r3, #0
   280ec:	ldreq	r0, [r8, #1]
   280f0:	ldreq	r3, [r8, #5]
   280f4:	bne	28c74 <__assert_fail@plt+0x15770>
   280f8:	str	r0, [sp, #248]	; 0xf8
   280fc:	str	r3, [sp, #252]	; 0xfc
   28100:	ldrd	r4, [sp, #32]
   28104:	mov	r2, r7
   28108:	str	r0, [sp, #16]
   2810c:	movw	r1, #9440	; 0x24e0
   28110:	str	r3, [sp, #20]
   28114:	movt	r1, #4
   28118:	strd	r4, [sp]
   2811c:	movw	r3, #15800	; 0x3db8
   28120:	ldrd	r4, [sp, #40]	; 0x28
   28124:	movt	r3, #4
   28128:	str	r6, [sp, #8]
   2812c:	mov	r0, #1
   28130:	bl	13204 <__printf_chk@plt>
   28134:	subs	sl, r4, sl
   28138:	sbc	fp, r5, fp
   2813c:	ldr	r5, [sp, #68]	; 0x44
   28140:	add	r3, r5, #1
   28144:	add	r8, r9, r5
   28148:	ldrd	r4, [sp, #32]
   2814c:	adds	r4, r4, r3
   28150:	adc	r5, r5, #0
   28154:	strd	r4, [sp, #32]
   28158:	b	27c20 <__assert_fail@plt+0x1471c>
   2815c:	ldrd	sl, [sp, #40]	; 0x28
   28160:	orrs	fp, sl, fp
   28164:	beq	27b1c <__assert_fail@plt+0x14618>
   28168:	ldrb	r2, [r8, #1]
   2816c:	add	lr, r8, #2
   28170:	ldr	sl, [sp, #40]	; 0x28
   28174:	mov	r3, #0
   28178:	tst	r2, #128	; 0x80
   2817c:	and	r2, r2, #127	; 0x7f
   28180:	uxtb	r2, r2
   28184:	bne	29204 <__assert_fail@plt+0x15d00>
   28188:	mov	r5, r2
   2818c:	mov	r4, r3
   28190:	ldrb	r2, [lr]
   28194:	add	r8, lr, #1
   28198:	mov	r3, #0
   2819c:	tst	r2, #128	; 0x80
   281a0:	and	r2, r2, #127	; 0x7f
   281a4:	uxtb	r2, r2
   281a8:	bne	2918c <__assert_fail@plt+0x15c88>
   281ac:	mov	r0, r2
   281b0:	mov	r2, r3
   281b4:	ldrd	sl, [sp, #32]
   281b8:	movw	r1, #9188	; 0x23e4
   281bc:	str	r0, [sp, #24]
   281c0:	movt	r1, #4
   281c4:	str	r2, [sp, #28]
   281c8:	movw	r3, #15800	; 0x3db8
   281cc:	strd	sl, [sp]
   281d0:	movt	r3, #4
   281d4:	str	r6, [sp, #8]
   281d8:	mov	r2, r7
   281dc:	str	r5, [sp, #16]
   281e0:	mov	r0, #1
   281e4:	str	r4, [sp, #20]
   281e8:	bl	13204 <__printf_chk@plt>
   281ec:	b	27d58 <__assert_fail@plt+0x14854>
   281f0:	ldrd	sl, [sp, #40]	; 0x28
   281f4:	orrs	fp, sl, fp
   281f8:	beq	27b1c <__assert_fail@plt+0x14618>
   281fc:	ldrb	r4, [r8, #1]
   28200:	add	sl, r8, #2
   28204:	mov	r5, #0
   28208:	tst	r4, #128	; 0x80
   2820c:	and	r4, r4, #127	; 0x7f
   28210:	uxtb	r4, r4
   28214:	bne	28990 <__assert_fail@plt+0x1548c>
   28218:	ldrd	r0, [sp, #32]
   2821c:	mov	r2, r7
   28220:	str	r6, [sp, #8]
   28224:	movw	r3, #15800	; 0x3db8
   28228:	movt	r3, #4
   2822c:	strd	r0, [sp]
   28230:	movw	r1, #9268	; 0x2434
   28234:	mov	r0, #1
   28238:	movt	r1, #4
   2823c:	bl	13204 <__printf_chk@plt>
   28240:	ldrd	r2, [sp, #40]	; 0x28
   28244:	cmp	r3, r5
   28248:	cmpeq	r2, r4
   2824c:	bcc	27b1c <__assert_fail@plt+0x14618>
   28250:	mov	r0, r4
   28254:	mov	r1, sl
   28258:	add	r8, sl, r4
   2825c:	bl	18684 <__assert_fail@plt+0x5180>
   28260:	b	27d58 <__assert_fail@plt+0x14854>
   28264:	ldr	sl, [sp, #68]	; 0x44
   28268:	mov	fp, #0
   2826c:	ldrd	r4, [sp, #40]	; 0x28
   28270:	mov	r3, fp
   28274:	mov	r2, sl
   28278:	cmp	r3, r5
   2827c:	cmpeq	r2, r4
   28280:	bhi	27b1c <__assert_fail@plt+0x14618>
   28284:	ldr	r5, [sp, #68]	; 0x44
   28288:	cmp	r5, #8
   2828c:	cmpne	r5, #4
   28290:	bne	27b1c <__assert_fail@plt+0x14618>
   28294:	cmp	r5, #4
   28298:	beq	2881c <__assert_fail@plt+0x15318>
   2829c:	ldr	fp, [sp, #64]	; 0x40
   282a0:	ldrb	r3, [fp, #84]	; 0x54
   282a4:	cmp	r3, #0
   282a8:	ldreq	r2, [r8, #1]
   282ac:	ldreq	r3, [r8, #5]
   282b0:	bne	29350 <__assert_fail@plt+0x15e4c>
   282b4:	str	r2, [sp, #248]	; 0xf8
   282b8:	str	r3, [sp, #252]	; 0xfc
   282bc:	ldrd	r4, [sp, #40]	; 0x28
   282c0:	ldr	r8, [sp, #68]	; 0x44
   282c4:	orrs	r5, r4, r5
   282c8:	add	r3, r9, r8
   282cc:	beq	27b1c <__assert_fail@plt+0x14618>
   282d0:	ldrb	r2, [r9, r8]
   282d4:	add	r8, r3, #1
   282d8:	uxtb	r4, r2
   282dc:	tst	r4, #128	; 0x80
   282e0:	bne	292c0 <__assert_fail@plt+0x15dbc>
   282e4:	sbfx	r4, r4, #0, #7
   282e8:	sxtb	r4, r4
   282ec:	asr	r5, r4, #31
   282f0:	ldrd	r2, [sp, #32]
   282f4:	movw	r1, #9284	; 0x2444
   282f8:	ldrd	sl, [sp, #248]	; 0xf8
   282fc:	movt	r1, #4
   28300:	str	r6, [sp, #8]
   28304:	mov	r0, #1
   28308:	strd	r2, [sp]
   2830c:	movw	r3, #15800	; 0x3db8
   28310:	strd	r4, [sp, #24]
   28314:	movt	r3, #4
   28318:	strd	sl, [sp, #16]
   2831c:	mov	r2, r7
   28320:	bl	13204 <__printf_chk@plt>
   28324:	b	27d58 <__assert_fail@plt+0x14854>
   28328:	ldrd	sl, [sp, #40]	; 0x28
   2832c:	orrs	fp, sl, fp
   28330:	beq	27b1c <__assert_fail@plt+0x14618>
   28334:	ldrb	r0, [r8, #1]
   28338:	mov	r1, #0
   2833c:	add	r8, r8, #2
   28340:	tst	r0, #128	; 0x80
   28344:	and	r0, r0, #127	; 0x7f
   28348:	uxtb	r0, r0
   2834c:	bne	288ec <__assert_fail@plt+0x153e8>
   28350:	mov	r4, r0
   28354:	mov	r5, r1
   28358:	ldrd	sl, [sp, #32]
   2835c:	movw	r1, #9164	; 0x23cc
   28360:	str	r6, [sp, #8]
   28364:	movt	r1, #4
   28368:	str	r4, [sp, #16]
   2836c:	movw	r3, #15800	; 0x3db8
   28370:	strd	sl, [sp]
   28374:	movt	r3, #4
   28378:	str	r5, [sp, #20]
   2837c:	mov	r0, #1
   28380:	mov	r2, r7
   28384:	bl	13204 <__printf_chk@plt>
   28388:	rsb	ip, r9, r8
   2838c:	ldrd	r0, [sp, #40]	; 0x28
   28390:	asr	fp, ip, #31
   28394:	mov	sl, ip
   28398:	cmp	fp, r1
   2839c:	cmpeq	sl, r0
   283a0:	bhi	27b1c <__assert_fail@plt+0x14618>
   283a4:	mov	r2, r4
   283a8:	mov	r3, r5
   283ac:	ldrd	r4, [sp, #32]
   283b0:	add	r1, ip, #1
   283b4:	add	r0, sp, #248	; 0xf8
   283b8:	str	r0, [sp]
   283bc:	adds	r4, r4, r1
   283c0:	ldr	r0, [sp, #72]	; 0x48
   283c4:	adc	r5, r5, r1, asr #31
   283c8:	strd	r4, [sp, #32]
   283cc:	ldrd	r4, [sp, #40]	; 0x28
   283d0:	bl	207ac <__assert_fail@plt+0xd2a8>
   283d4:	subs	sl, r4, sl
   283d8:	sbc	fp, r5, fp
   283dc:	subs	r1, r0, #0
   283e0:	beq	2886c <__assert_fail@plt+0x15368>
   283e4:	movw	r0, #8172	; 0x1fec
   283e8:	movt	r0, #4
   283ec:	bl	12fdc <puts@plt>
   283f0:	b	27c20 <__assert_fail@plt+0x1471c>
   283f4:	ldrd	sl, [sp, #40]	; 0x28
   283f8:	orrs	fp, sl, fp
   283fc:	beq	27b1c <__assert_fail@plt+0x14618>
   28400:	ldrb	r4, [r8, #1]
   28404:	add	sl, r8, #2
   28408:	mov	r5, #0
   2840c:	tst	r4, #128	; 0x80
   28410:	and	r4, r4, #127	; 0x7f
   28414:	uxtb	r4, r4
   28418:	bne	28dc8 <__assert_fail@plt+0x158c4>
   2841c:	ldrd	r0, [sp, #32]
   28420:	mov	r2, r7
   28424:	str	r6, [sp, #8]
   28428:	movw	r3, #15800	; 0x3db8
   2842c:	movt	r3, #4
   28430:	strd	r0, [sp]
   28434:	movw	r1, #9316	; 0x2464
   28438:	mov	r0, #1
   2843c:	movt	r1, #4
   28440:	bl	13204 <__printf_chk@plt>
   28444:	ldrd	r2, [sp, #40]	; 0x28
   28448:	cmp	r3, r5
   2844c:	cmpeq	r2, r4
   28450:	bcc	27b1c <__assert_fail@plt+0x14618>
   28454:	ldr	fp, [sp, #308]	; 0x134
   28458:	add	r2, r7, #5
   2845c:	ldr	r8, [sp, #304]	; 0x130
   28460:	ldr	ip, [sp, #312]	; 0x138
   28464:	mov	r3, r2
   28468:	str	fp, [sp, #4]
   2846c:	ldr	fp, [sp, #72]	; 0x48
   28470:	str	r8, [sp]
   28474:	add	r8, sl, r4
   28478:	str	ip, [sp, #8]
   2847c:	str	fp, [sp, #12]
   28480:	strd	r4, [sp, #16]
   28484:	ldr	r0, [sp, #240]	; 0xf0
   28488:	str	sl, [sp, #24]
   2848c:	ldr	r1, [sp, #64]	; 0x40
   28490:	bl	274ac <__assert_fail@plt+0x13fa8>
   28494:	b	27d58 <__assert_fail@plt+0x14854>
   28498:	ldrd	sl, [sp, #40]	; 0x28
   2849c:	orrs	fp, sl, fp
   284a0:	beq	27b1c <__assert_fail@plt+0x14618>
   284a4:	ldrb	sl, [r8, #1]
   284a8:	add	r5, r8, #2
   284ac:	mov	fp, #0
   284b0:	tst	sl, #128	; 0x80
   284b4:	and	sl, sl, #127	; 0x7f
   284b8:	uxtb	sl, sl
   284bc:	bne	28acc <__assert_fail@plt+0x155c8>
   284c0:	movw	r3, #37712	; 0x9350
   284c4:	movt	r3, #5
   284c8:	ldrb	r3, [r3, #33]	; 0x21
   284cc:	cmp	r3, #0
   284d0:	bne	284ec <__assert_fail@plt+0x14fe8>
   284d4:	ldr	r4, [sp, #72]	; 0x48
   284d8:	cmp	r4, #0
   284dc:	beq	284ec <__assert_fail@plt+0x14fe8>
   284e0:	ldrd	r2, [r4, #8]
   284e4:	adds	sl, sl, r2
   284e8:	adc	fp, fp, r3
   284ec:	ldrb	r4, [r5]
   284f0:	mov	r3, #0
   284f4:	ldrd	r0, [sp, #40]	; 0x28
   284f8:	add	r5, r5, #1
   284fc:	uxtb	r2, r4
   28500:	cmp	r3, r1
   28504:	cmpeq	r2, r0
   28508:	bhi	27b1c <__assert_fail@plt+0x14618>
   2850c:	ldrd	r2, [sp, #32]
   28510:	movw	r1, #9332	; 0x2474
   28514:	str	r6, [sp, #8]
   28518:	movt	r1, #4
   2851c:	strd	sl, [sp, #16]
   28520:	mov	r0, #1
   28524:	strd	r2, [sp]
   28528:	mov	r2, r7
   2852c:	movw	r3, #15800	; 0x3db8
   28530:	movt	r3, #4
   28534:	bl	13204 <__printf_chk@plt>
   28538:	mov	r0, r4
   2853c:	mov	r1, r5
   28540:	add	r8, r5, r4
   28544:	bl	18684 <__assert_fail@plt+0x5180>
   28548:	b	27d58 <__assert_fail@plt+0x14854>
   2854c:	ldrd	sl, [sp, #40]	; 0x28
   28550:	orrs	fp, sl, fp
   28554:	beq	27b1c <__assert_fail@plt+0x14618>
   28558:	ldrb	r2, [r8, #1]
   2855c:	add	lr, r8, #2
   28560:	ldr	r5, [sp, #40]	; 0x28
   28564:	mov	r3, #0
   28568:	tst	r2, #128	; 0x80
   2856c:	and	r2, r2, #127	; 0x7f
   28570:	uxtb	r2, r2
   28574:	bne	28d14 <__assert_fail@plt+0x15810>
   28578:	mov	r4, r2
   2857c:	mov	r0, r3
   28580:	ldrb	sl, [lr]
   28584:	add	r8, lr, #1
   28588:	mov	fp, #0
   2858c:	tst	sl, #128	; 0x80
   28590:	and	sl, sl, #127	; 0x7f
   28594:	uxtb	sl, sl
   28598:	bne	28c9c <__assert_fail@plt+0x15798>
   2859c:	movw	r3, #37712	; 0x9350
   285a0:	movt	r3, #5
   285a4:	ldrb	r3, [r3, #33]	; 0x21
   285a8:	cmp	r3, #0
   285ac:	bne	285c8 <__assert_fail@plt+0x150c4>
   285b0:	ldr	r5, [sp, #72]	; 0x48
   285b4:	cmp	r5, #0
   285b8:	beq	285c8 <__assert_fail@plt+0x150c4>
   285bc:	ldrd	r2, [r5, #8]
   285c0:	adds	sl, sl, r2
   285c4:	adc	fp, fp, r3
   285c8:	ldrd	r2, [sp, #32]
   285cc:	movw	r1, #9356	; 0x248c
   285d0:	str	r0, [sp, #20]
   285d4:	movt	r1, #4
   285d8:	str	r6, [sp, #8]
   285dc:	mov	r0, #1
   285e0:	strd	r2, [sp]
   285e4:	movw	r3, #15800	; 0x3db8
   285e8:	str	r4, [sp, #16]
   285ec:	movt	r3, #4
   285f0:	strd	sl, [sp, #24]
   285f4:	mov	r2, r7
   285f8:	bl	13204 <__printf_chk@plt>
   285fc:	b	27d58 <__assert_fail@plt+0x14854>
   28600:	ldrd	r4, [sp, #40]	; 0x28
   28604:	orrs	r5, r4, r5
   28608:	beq	27b1c <__assert_fail@plt+0x14618>
   2860c:	ldrb	r2, [r8, #2]
   28610:	add	r4, r8, #3
   28614:	ldrb	lr, [r8, #1]
   28618:	mov	r3, #0
   2861c:	tst	r2, #128	; 0x80
   28620:	and	r2, r2, #127	; 0x7f
   28624:	uxtb	r2, r2
   28628:	bne	28bd8 <__assert_fail@plt+0x156d4>
   2862c:	mov	r0, r3
   28630:	ldrd	sl, [sp, #32]
   28634:	movw	r1, #9412	; 0x24c4
   28638:	movw	r3, #15800	; 0x3db8
   2863c:	movt	r1, #4
   28640:	movt	r3, #4
   28644:	str	r6, [sp, #8]
   28648:	strd	sl, [sp]
   2864c:	str	lr, [sp, #12]
   28650:	str	r2, [sp, #16]
   28654:	str	r0, [sp, #20]
   28658:	mov	r0, #1
   2865c:	mov	r2, r7
   28660:	bl	13204 <__printf_chk@plt>
   28664:	rsb	ip, r9, r4
   28668:	ldrd	r0, [sp, #40]	; 0x28
   2866c:	asr	fp, ip, #31
   28670:	mov	sl, ip
   28674:	cmp	fp, r1
   28678:	cmpeq	sl, r0
   2867c:	bhi	27b1c <__assert_fail@plt+0x14618>
   28680:	ldrd	r2, [sp, #32]
   28684:	add	ip, ip, #1
   28688:	subs	sl, r0, sl
   2868c:	sbc	fp, r1, fp
   28690:	mov	r8, r4
   28694:	adds	r2, r2, ip
   28698:	adc	r3, r3, ip, asr #31
   2869c:	strd	r2, [sp, #32]
   286a0:	b	27c20 <__assert_fail@plt+0x1471c>
   286a4:	ldrd	sl, [sp, #40]	; 0x28
   286a8:	orrs	fp, sl, fp
   286ac:	beq	27b1c <__assert_fail@plt+0x14618>
   286b0:	ldrb	sl, [r8, #2]
   286b4:	add	r4, r8, #3
   286b8:	ldrb	r0, [r8, #1]
   286bc:	mov	fp, #0
   286c0:	tst	sl, #128	; 0x80
   286c4:	and	sl, sl, #127	; 0x7f
   286c8:	uxtb	sl, sl
   286cc:	bne	28b5c <__assert_fail@plt+0x15658>
   286d0:	movw	r3, #37712	; 0x9350
   286d4:	movt	r3, #5
   286d8:	ldrb	r3, [r3, #33]	; 0x21
   286dc:	cmp	r3, #0
   286e0:	bne	286fc <__assert_fail@plt+0x151f8>
   286e4:	ldr	r5, [sp, #72]	; 0x48
   286e8:	cmp	r5, #0
   286ec:	beq	286fc <__assert_fail@plt+0x151f8>
   286f0:	ldrd	r2, [r5, #8]
   286f4:	adds	sl, sl, r2
   286f8:	adc	fp, fp, r3
   286fc:	ldrd	r2, [sp, #32]
   28700:	movw	r1, #9384	; 0x24a8
   28704:	str	r6, [sp, #8]
   28708:	movt	r1, #4
   2870c:	str	r0, [sp, #12]
   28710:	strd	r2, [sp]
   28714:	movw	r3, #15800	; 0x3db8
   28718:	strd	sl, [sp, #16]
   2871c:	movt	r3, #4
   28720:	b	28658 <__assert_fail@plt+0x15154>
   28724:	ldrd	r4, [sp, #40]	; 0x28
   28728:	orrs	r5, r4, r5
   2872c:	beq	27b1c <__assert_fail@plt+0x14618>
   28730:	ldrb	r4, [r8, #1]
   28734:	mov	r5, #0
   28738:	add	r8, r8, #2
   2873c:	tst	r4, #128	; 0x80
   28740:	and	r4, r4, #127	; 0x7f
   28744:	uxtb	r4, r4
   28748:	bne	28a50 <__assert_fail@plt+0x1554c>
   2874c:	orrs	r3, r4, r5
   28750:	beq	28780 <__assert_fail@plt+0x1527c>
   28754:	movw	r3, #37712	; 0x9350
   28758:	movt	r3, #5
   2875c:	ldrb	r3, [r3, #33]	; 0x21
   28760:	cmp	r3, #0
   28764:	bne	28780 <__assert_fail@plt+0x1527c>
   28768:	ldr	sl, [sp, #72]	; 0x48
   2876c:	cmp	sl, #0
   28770:	beq	28780 <__assert_fail@plt+0x1527c>
   28774:	ldrd	r2, [sl, #8]
   28778:	adds	r4, r4, r2
   2877c:	adc	r5, r5, r3
   28780:	ldrd	sl, [sp, #32]
   28784:	movw	r1, #9440	; 0x24e0
   28788:	str	r6, [sp, #8]
   2878c:	movt	r1, #4
   28790:	strd	sl, [sp]
   28794:	b	27ee8 <__assert_fail@plt+0x149e4>
   28798:	ldrd	sl, [sp, #32]
   2879c:	mov	r2, r7
   287a0:	str	r6, [sp, #8]
   287a4:	movw	r1, #9464	; 0x24f8
   287a8:	movw	r3, #15800	; 0x3db8
   287ac:	movt	r1, #4
   287b0:	strd	sl, [sp]
   287b4:	movt	r3, #4
   287b8:	adds	sl, sl, #1
   287bc:	mov	r0, #1
   287c0:	adc	fp, fp, #0
   287c4:	mov	r8, r9
   287c8:	strd	sl, [sp, #32]
   287cc:	ldrd	sl, [sp, #40]	; 0x28
   287d0:	bl	13204 <__printf_chk@plt>
   287d4:	b	27c20 <__assert_fail@plt+0x1471c>
   287d8:	ldrd	r4, [sp, #32]
   287dc:	movw	r1, #9084	; 0x237c
   287e0:	str	r6, [sp, #8]
   287e4:	mov	r2, r7
   287e8:	movt	r1, #4
   287ec:	strd	r4, [sp]
   287f0:	ldrb	ip, [r8, #1]
   287f4:	b	27b88 <__assert_fail@plt+0x14684>
   287f8:	ldr	ip, [sp, #64]	; 0x40
   287fc:	ldrb	r3, [ip, #84]	; 0x54
   28800:	cmp	r3, #0
   28804:	ldr	r3, [r8, #1]
   28808:	bne	28a0c <__assert_fail@plt+0x15508>
   2880c:	str	r3, [sp, #248]	; 0xf8
   28810:	mov	r3, #0
   28814:	str	r3, [sp, #252]	; 0xfc
   28818:	b	27a94 <__assert_fail@plt+0x14590>
   2881c:	ldr	sl, [sp, #64]	; 0x40
   28820:	ldrb	r3, [sl, #84]	; 0x54
   28824:	cmp	r3, #0
   28828:	ldr	r3, [r8, #1]
   2882c:	bne	28e44 <__assert_fail@plt+0x15940>
   28830:	str	r3, [sp, #248]	; 0xf8
   28834:	mov	r3, #0
   28838:	str	r3, [sp, #252]	; 0xfc
   2883c:	b	282bc <__assert_fail@plt+0x14db8>
   28840:	ldr	ip, [sp, #64]	; 0x40
   28844:	ldr	r0, [r8, #1]
   28848:	ldrb	r3, [ip, #84]	; 0x54
   2884c:	cmp	r3, #0
   28850:	bne	28e7c <__assert_fail@plt+0x15978>
   28854:	mov	r3, #0
   28858:	str	r0, [sp, #248]	; 0xf8
   2885c:	str	r3, [sp, #252]	; 0xfc
   28860:	b	28100 <__assert_fail@plt+0x14bfc>
   28864:	ldr	r9, [sp, #76]	; 0x4c
   28868:	b	27984 <__assert_fail@plt+0x14480>
   2886c:	ldrd	r4, [sp, #248]	; 0xf8
   28870:	ldr	r0, [sp, #240]	; 0xf0
   28874:	mov	r2, r4
   28878:	mov	r3, r5
   2887c:	strd	r4, [sp]
   28880:	bl	27164 <__assert_fail@plt+0x13c60>
   28884:	mov	r0, #10
   28888:	bl	131b0 <putchar@plt>
   2888c:	b	27c20 <__assert_fail@plt+0x1471c>
   28890:	cmp	r4, #223	; 0xdf
   28894:	mov	r1, #20
   28898:	bls	288c8 <__assert_fail@plt+0x153c4>
   2889c:	ldr	ip, [sp, #56]	; 0x38
   288a0:	sub	lr, r4, #224	; 0xe0
   288a4:	mov	r3, r1
   288a8:	ldr	r0, [pc, #2844]	; 293cc <__assert_fail@plt+0x15ec8>
   288ac:	mov	r2, #1
   288b0:	str	lr, [sp, #4]
   288b4:	str	ip, [sp]
   288b8:	bl	134ec <__snprintf_chk@plt>
   288bc:	ldr	r6, [pc, #2824]	; 293cc <__assert_fail@plt+0x15ec8>
   288c0:	b	27570 <__assert_fail@plt+0x1406c>
   288c4:	bl	12dc0 <__stack_chk_fail@plt>
   288c8:	ldr	r5, [sp, #52]	; 0x34
   288cc:	mov	r3, r1
   288d0:	str	r4, [sp, #4]
   288d4:	mov	r2, #1
   288d8:	ldr	r0, [pc, #2796]	; 293cc <__assert_fail@plt+0x15ec8>
   288dc:	str	r5, [sp]
   288e0:	bl	134ec <__snprintf_chk@plt>
   288e4:	ldr	r6, [pc, #2784]	; 293cc <__assert_fail@plt+0x15ec8>
   288e8:	b	27570 <__assert_fail@plt+0x1406c>
   288ec:	ldr	ip, [sp, #40]	; 0x28
   288f0:	add	r3, r9, ip
   288f4:	cmp	r3, r9
   288f8:	bls	28988 <__assert_fail@plt+0x15484>
   288fc:	rsb	r3, r9, r3
   28900:	cmp	r3, #10
   28904:	movcc	sl, r3
   28908:	movcs	sl, #10
   2890c:	mov	lr, #1
   28910:	mov	fp, #7
   28914:	cmp	lr, sl
   28918:	bcs	2897c <__assert_fail@plt+0x15478>
   2891c:	mul	r4, fp, lr
   28920:	ldrb	ip, [r8], #1
   28924:	and	r2, ip, #127	; 0x7f
   28928:	tst	ip, #128	; 0x80
   2892c:	uxtb	r2, r2
   28930:	mov	r3, r4
   28934:	sub	r4, r4, #32
   28938:	rsb	ip, r3, #32
   2893c:	lsl	r4, r2, r4
   28940:	orr	ip, r4, r2, lsr ip
   28944:	lsl	r3, r2, r3
   28948:	str	ip, [sp, #116]	; 0x74
   2894c:	str	r3, [sp, #112]	; 0x70
   28950:	ldrd	r4, [sp, #112]	; 0x70
   28954:	orr	r0, r0, r4
   28958:	orr	r1, r1, r5
   2895c:	beq	28350 <__assert_fail@plt+0x14e4c>
   28960:	add	lr, lr, #1
   28964:	b	28914 <__assert_fail@plt+0x15410>
   28968:	ldr	r3, [r8, #1]
   2896c:	ldr	r2, [r8, #5]
   28970:	rev	r3, r3
   28974:	rev	r2, r2
   28978:	b	27a8c <__assert_fail@plt+0x14588>
   2897c:	mvn	r4, #0
   28980:	mov	r5, r4
   28984:	b	28358 <__assert_fail@plt+0x14e54>
   28988:	mov	sl, #0
   2898c:	b	2890c <__assert_fail@plt+0x15408>
   28990:	ldr	ip, [sp, #40]	; 0x28
   28994:	add	r3, r9, ip
   28998:	cmp	r3, r9
   2899c:	bls	28a48 <__assert_fail@plt+0x15544>
   289a0:	rsb	r3, r9, r3
   289a4:	cmp	r3, #10
   289a8:	movcc	r8, r3
   289ac:	movcs	r8, #10
   289b0:	mov	r1, #1
   289b4:	mov	fp, #7
   289b8:	cmp	r1, r8
   289bc:	bcs	28a14 <__assert_fail@plt+0x15510>
   289c0:	mul	ip, fp, r1
   289c4:	ldrb	r0, [sl], #1
   289c8:	and	r2, r0, #127	; 0x7f
   289cc:	tst	r0, #128	; 0x80
   289d0:	uxtb	r2, r2
   289d4:	mov	r3, ip
   289d8:	sub	ip, ip, #32
   289dc:	rsb	r0, r3, #32
   289e0:	lsl	ip, r2, ip
   289e4:	orr	r0, ip, r2, lsr r0
   289e8:	lsl	r3, r2, r3
   289ec:	str	r0, [sp, #156]	; 0x9c
   289f0:	str	r3, [sp, #152]	; 0x98
   289f4:	ldrd	r2, [sp, #152]	; 0x98
   289f8:	orr	r4, r4, r2
   289fc:	orr	r5, r5, r3
   28a00:	beq	28218 <__assert_fail@plt+0x14d14>
   28a04:	add	r1, r1, #1
   28a08:	b	289b8 <__assert_fail@plt+0x154b4>
   28a0c:	rev	r3, r3
   28a10:	b	2880c <__assert_fail@plt+0x15308>
   28a14:	ldrd	sl, [sp, #32]
   28a18:	movw	r1, #9268	; 0x2434
   28a1c:	ldr	r9, [sp, #76]	; 0x4c
   28a20:	movt	r1, #4
   28a24:	mov	r5, r7
   28a28:	str	r6, [sp, #8]
   28a2c:	strd	sl, [sp]
   28a30:	movw	r3, #15800	; 0x3db8
   28a34:	mov	r2, r5
   28a38:	movt	r3, #4
   28a3c:	mov	r0, #1
   28a40:	bl	13204 <__printf_chk@plt>
   28a44:	b	27b24 <__assert_fail@plt+0x14620>
   28a48:	mov	r8, #0
   28a4c:	b	289b0 <__assert_fail@plt+0x154ac>
   28a50:	ldr	sl, [sp, #40]	; 0x28
   28a54:	add	r3, r9, sl
   28a58:	cmp	r3, r9
   28a5c:	bls	28b54 <__assert_fail@plt+0x15650>
   28a60:	rsb	r3, r9, r3
   28a64:	cmp	r3, #10
   28a68:	movcc	sl, r3
   28a6c:	movcs	sl, #10
   28a70:	mov	r1, #1
   28a74:	mov	fp, #7
   28a78:	cmp	r1, sl
   28a7c:	bcs	28b48 <__assert_fail@plt+0x15644>
   28a80:	mul	ip, fp, r1
   28a84:	ldrb	r0, [r8], #1
   28a88:	and	r2, r0, #127	; 0x7f
   28a8c:	tst	r0, #128	; 0x80
   28a90:	uxtb	r2, r2
   28a94:	mov	r3, ip
   28a98:	sub	ip, ip, #32
   28a9c:	rsb	r0, r3, #32
   28aa0:	lsl	ip, r2, ip
   28aa4:	orr	r0, ip, r2, lsr r0
   28aa8:	lsl	r3, r2, r3
   28aac:	str	r0, [sp, #220]	; 0xdc
   28ab0:	str	r3, [sp, #216]	; 0xd8
   28ab4:	ldrd	r2, [sp, #216]	; 0xd8
   28ab8:	orr	r4, r4, r2
   28abc:	orr	r5, r5, r3
   28ac0:	beq	2874c <__assert_fail@plt+0x15248>
   28ac4:	add	r1, r1, #1
   28ac8:	b	28a78 <__assert_fail@plt+0x15574>
   28acc:	ldr	ip, [sp, #40]	; 0x28
   28ad0:	add	r3, r9, ip
   28ad4:	cmp	r3, r9
   28ad8:	bls	28c94 <__assert_fail@plt+0x15790>
   28adc:	rsb	r3, r9, r3
   28ae0:	cmp	r3, #10
   28ae4:	movcc	r4, r3
   28ae8:	movcs	r4, #10
   28aec:	mov	r1, #1
   28af0:	mov	r8, #7
   28af4:	cmp	r1, r4
   28af8:	bcs	28c88 <__assert_fail@plt+0x15784>
   28afc:	mul	ip, r8, r1
   28b00:	ldrb	r0, [r5], #1
   28b04:	and	r2, r0, #127	; 0x7f
   28b08:	tst	r0, #128	; 0x80
   28b0c:	uxtb	r2, r2
   28b10:	mov	r3, ip
   28b14:	sub	ip, ip, #32
   28b18:	rsb	r0, r3, #32
   28b1c:	lsl	ip, r2, ip
   28b20:	orr	r0, ip, r2, lsr r0
   28b24:	lsl	r3, r2, r3
   28b28:	str	r0, [sp, #180]	; 0xb4
   28b2c:	str	r3, [sp, #176]	; 0xb0
   28b30:	ldrd	r2, [sp, #176]	; 0xb0
   28b34:	orr	sl, sl, r2
   28b38:	orr	fp, fp, r3
   28b3c:	beq	284c0 <__assert_fail@plt+0x14fbc>
   28b40:	add	r1, r1, #1
   28b44:	b	28af4 <__assert_fail@plt+0x155f0>
   28b48:	mvn	r4, #0
   28b4c:	mvn	r5, #0
   28b50:	b	28754 <__assert_fail@plt+0x15250>
   28b54:	mov	sl, #0
   28b58:	b	28a70 <__assert_fail@plt+0x1556c>
   28b5c:	ldr	ip, [sp, #40]	; 0x28
   28b60:	add	r8, r8, #2
   28b64:	add	r3, r8, ip
   28b68:	cmp	r8, r3
   28b6c:	bcs	28c64 <__assert_fail@plt+0x15760>
   28b70:	rsb	r8, r8, r3
   28b74:	cmp	r8, #10
   28b78:	movcs	r8, #10
   28b7c:	mov	r5, #1
   28b80:	mov	ip, #7
   28b84:	cmp	r5, r8
   28b88:	bcs	28c58 <__assert_fail@plt+0x15754>
   28b8c:	mul	lr, ip, r5
   28b90:	ldrb	r1, [r4], #1
   28b94:	and	r2, r1, #127	; 0x7f
   28b98:	tst	r1, #128	; 0x80
   28b9c:	uxtb	r2, r2
   28ba0:	mov	r3, lr
   28ba4:	sub	lr, lr, #32
   28ba8:	rsb	r1, r3, #32
   28bac:	lsl	lr, r2, lr
   28bb0:	orr	r1, lr, r2, lsr r1
   28bb4:	lsl	r3, r2, r3
   28bb8:	str	r1, [sp, #204]	; 0xcc
   28bbc:	str	r3, [sp, #200]	; 0xc8
   28bc0:	ldrd	r2, [sp, #200]	; 0xc8
   28bc4:	orr	sl, sl, r2
   28bc8:	orr	fp, fp, r3
   28bcc:	beq	286d0 <__assert_fail@plt+0x151cc>
   28bd0:	add	r5, r5, #1
   28bd4:	b	28b84 <__assert_fail@plt+0x15680>
   28bd8:	ldr	sl, [sp, #40]	; 0x28
   28bdc:	add	r8, r8, #2
   28be0:	add	r1, r8, sl
   28be4:	cmp	r8, r1
   28be8:	bcs	28dac <__assert_fail@plt+0x158a8>
   28bec:	rsb	r1, r8, r1
   28bf0:	cmp	r1, #10
   28bf4:	movcc	fp, r1
   28bf8:	movcs	fp, #10
   28bfc:	mov	sl, #1
   28c00:	mov	ip, #7
   28c04:	cmp	sl, fp
   28c08:	bcs	28da0 <__assert_fail@plt+0x1589c>
   28c0c:	mul	r8, ip, sl
   28c10:	ldrb	r5, [r4], #1
   28c14:	and	r0, r5, #127	; 0x7f
   28c18:	tst	r5, #128	; 0x80
   28c1c:	uxtb	r0, r0
   28c20:	mov	r1, r8
   28c24:	sub	r8, r8, #32
   28c28:	rsb	r5, r1, #32
   28c2c:	lsl	r8, r0, r8
   28c30:	orr	r5, r8, r0, lsr r5
   28c34:	lsl	r1, r0, r1
   28c38:	str	r5, [sp, #212]	; 0xd4
   28c3c:	str	r1, [sp, #208]	; 0xd0
   28c40:	ldrd	r0, [sp, #208]	; 0xd0
   28c44:	orr	r2, r2, r0
   28c48:	orr	r3, r3, r1
   28c4c:	beq	2862c <__assert_fail@plt+0x15128>
   28c50:	add	sl, sl, #1
   28c54:	b	28c04 <__assert_fail@plt+0x15700>
   28c58:	mvn	sl, #0
   28c5c:	mvn	fp, #0
   28c60:	b	286d0 <__assert_fail@plt+0x151cc>
   28c64:	mov	r8, #0
   28c68:	b	28b7c <__assert_fail@plt+0x15678>
   28c6c:	rev	r4, r4
   28c70:	b	279c0 <__assert_fail@plt+0x144bc>
   28c74:	ldr	r3, [r8, #1]
   28c78:	ldr	r0, [r8, #5]
   28c7c:	rev	r3, r3
   28c80:	rev	r0, r0
   28c84:	b	280f8 <__assert_fail@plt+0x14bf4>
   28c88:	mvn	sl, #0
   28c8c:	mvn	fp, #0
   28c90:	b	284c0 <__assert_fail@plt+0x14fbc>
   28c94:	mov	r4, #0
   28c98:	b	28aec <__assert_fail@plt+0x155e8>
   28c9c:	add	r5, lr, r5
   28ca0:	cmp	lr, r5
   28ca4:	bcs	28d98 <__assert_fail@plt+0x15894>
   28ca8:	rsb	lr, lr, r5
   28cac:	cmp	lr, #10
   28cb0:	movcc	ip, lr
   28cb4:	movcs	ip, #10
   28cb8:	mov	r5, #1
   28cbc:	cmp	r5, ip
   28cc0:	bcs	28d8c <__assert_fail@plt+0x15888>
   28cc4:	mov	r3, #7
   28cc8:	ldrb	r1, [r8], #1
   28ccc:	mul	lr, r3, r5
   28cd0:	and	r2, r1, #127	; 0x7f
   28cd4:	tst	r1, #128	; 0x80
   28cd8:	uxtb	r2, r2
   28cdc:	mov	r3, lr
   28ce0:	sub	lr, lr, #32
   28ce4:	rsb	r1, r3, #32
   28ce8:	lsl	lr, r2, lr
   28cec:	orr	r1, lr, r2, lsr r1
   28cf0:	lsl	r3, r2, r3
   28cf4:	str	r1, [sp, #196]	; 0xc4
   28cf8:	str	r3, [sp, #192]	; 0xc0
   28cfc:	ldrd	r2, [sp, #192]	; 0xc0
   28d00:	orr	sl, sl, r2
   28d04:	orr	fp, fp, r3
   28d08:	beq	2859c <__assert_fail@plt+0x15098>
   28d0c:	add	r5, r5, #1
   28d10:	b	28cbc <__assert_fail@plt+0x157b8>
   28d14:	add	r1, r9, r5
   28d18:	cmp	r1, r9
   28d1c:	bls	28dc0 <__assert_fail@plt+0x158bc>
   28d20:	rsb	r1, r9, r1
   28d24:	cmp	r1, #10
   28d28:	movcc	fp, r1
   28d2c:	movcs	fp, #10
   28d30:	mov	sl, #1
   28d34:	mov	ip, #7
   28d38:	cmp	sl, fp
   28d3c:	bcs	28db4 <__assert_fail@plt+0x158b0>
   28d40:	mul	r8, ip, sl
   28d44:	ldrb	r4, [lr], #1
   28d48:	and	r0, r4, #127	; 0x7f
   28d4c:	tst	r4, #128	; 0x80
   28d50:	uxtb	r0, r0
   28d54:	mov	r1, r8
   28d58:	sub	r8, r8, #32
   28d5c:	rsb	r4, r1, #32
   28d60:	lsl	r8, r0, r8
   28d64:	orr	r4, r8, r0, lsr r4
   28d68:	lsl	r1, r0, r1
   28d6c:	str	r4, [sp, #188]	; 0xbc
   28d70:	str	r1, [sp, #184]	; 0xb8
   28d74:	ldrd	r0, [sp, #184]	; 0xb8
   28d78:	orr	r2, r2, r0
   28d7c:	orr	r3, r3, r1
   28d80:	beq	28578 <__assert_fail@plt+0x15074>
   28d84:	add	sl, sl, #1
   28d88:	b	28d38 <__assert_fail@plt+0x15834>
   28d8c:	mvn	sl, #0
   28d90:	mvn	fp, #0
   28d94:	b	2859c <__assert_fail@plt+0x15098>
   28d98:	mov	ip, #0
   28d9c:	b	28cb8 <__assert_fail@plt+0x157b4>
   28da0:	mvn	r2, #0
   28da4:	mov	r0, r2
   28da8:	b	28630 <__assert_fail@plt+0x1512c>
   28dac:	mov	fp, #0
   28db0:	b	28bfc <__assert_fail@plt+0x156f8>
   28db4:	mvn	r4, #0
   28db8:	mov	r0, r4
   28dbc:	b	28580 <__assert_fail@plt+0x1507c>
   28dc0:	mov	fp, #0
   28dc4:	b	28d30 <__assert_fail@plt+0x1582c>
   28dc8:	ldr	ip, [sp, #40]	; 0x28
   28dcc:	add	r3, r9, ip
   28dd0:	cmp	r3, r9
   28dd4:	bls	28e6c <__assert_fail@plt+0x15968>
   28dd8:	rsb	r3, r9, r3
   28ddc:	cmp	r3, #10
   28de0:	movcc	r8, r3
   28de4:	movcs	r8, #10
   28de8:	mov	r1, #1
   28dec:	mov	fp, #7
   28df0:	cmp	r1, r8
   28df4:	bcs	28e4c <__assert_fail@plt+0x15948>
   28df8:	mul	ip, fp, r1
   28dfc:	ldrb	r0, [sl], #1
   28e00:	and	r2, r0, #127	; 0x7f
   28e04:	tst	r0, #128	; 0x80
   28e08:	uxtb	r2, r2
   28e0c:	mov	r3, ip
   28e10:	sub	ip, ip, #32
   28e14:	rsb	r0, r3, #32
   28e18:	lsl	ip, r2, ip
   28e1c:	orr	r0, ip, r2, lsr r0
   28e20:	lsl	r3, r2, r3
   28e24:	str	r0, [sp, #172]	; 0xac
   28e28:	str	r3, [sp, #168]	; 0xa8
   28e2c:	ldrd	r2, [sp, #168]	; 0xa8
   28e30:	orr	r4, r4, r2
   28e34:	orr	r5, r5, r3
   28e38:	beq	2841c <__assert_fail@plt+0x14f18>
   28e3c:	add	r1, r1, #1
   28e40:	b	28df0 <__assert_fail@plt+0x158ec>
   28e44:	rev	r3, r3
   28e48:	b	28830 <__assert_fail@plt+0x1532c>
   28e4c:	ldrd	sl, [sp, #32]
   28e50:	movw	r1, #9316	; 0x2464
   28e54:	mov	r5, r7
   28e58:	ldr	r9, [sp, #76]	; 0x4c
   28e5c:	str	r6, [sp, #8]
   28e60:	movt	r1, #4
   28e64:	strd	sl, [sp]
   28e68:	b	28a30 <__assert_fail@plt+0x1552c>
   28e6c:	mov	r8, #0
   28e70:	b	28de8 <__assert_fail@plt+0x158e4>
   28e74:	rev	r3, r3
   28e78:	b	27bdc <__assert_fail@plt+0x146d8>
   28e7c:	rev	r0, r0
   28e80:	b	28854 <__assert_fail@plt+0x15350>
   28e84:	rev	r3, r3
   28e88:	b	27e30 <__assert_fail@plt+0x1492c>
   28e8c:	ldr	ip, [sp, #40]	; 0x28
   28e90:	add	r1, r9, ip
   28e94:	cmp	r1, r9
   28e98:	bls	28f3c <__assert_fail@plt+0x15a38>
   28e9c:	rsb	r1, r9, r1
   28ea0:	cmp	r1, #10
   28ea4:	movcc	sl, r1
   28ea8:	movcs	sl, #10
   28eac:	mov	lr, #1
   28eb0:	mov	fp, #7
   28eb4:	cmp	lr, sl
   28eb8:	bcs	28f30 <__assert_fail@plt+0x15a2c>
   28ebc:	mul	r4, fp, lr
   28ec0:	ldrb	ip, [r8], #1
   28ec4:	and	r0, ip, #127	; 0x7f
   28ec8:	tst	ip, #128	; 0x80
   28ecc:	uxtb	r0, r0
   28ed0:	mov	r1, r4
   28ed4:	sub	r4, r4, #32
   28ed8:	rsb	ip, r1, #32
   28edc:	lsl	r4, r0, r4
   28ee0:	orr	ip, r4, r0, lsr ip
   28ee4:	lsl	r1, r0, r1
   28ee8:	str	ip, [sp, #108]	; 0x6c
   28eec:	str	r1, [sp, #104]	; 0x68
   28ef0:	ldrd	r4, [sp, #104]	; 0x68
   28ef4:	orr	r2, r2, r4
   28ef8:	orr	r3, r3, r5
   28efc:	beq	27d20 <__assert_fail@plt+0x1481c>
   28f00:	add	lr, lr, #1
   28f04:	b	28eb4 <__assert_fail@plt+0x159b0>
   28f08:	ldr	r3, [r8, #1]
   28f0c:	ldr	r0, [r8, #5]
   28f10:	rev	r3, r3
   28f14:	rev	r0, r0
   28f18:	b	27cd8 <__assert_fail@plt+0x147d4>
   28f1c:	ldr	r3, [r8, #1]
   28f20:	ldr	r0, [r8, #5]
   28f24:	rev	r3, r3
   28f28:	rev	r0, r0
   28f2c:	b	27c64 <__assert_fail@plt+0x14760>
   28f30:	mvn	r0, #0
   28f34:	mov	r2, r0
   28f38:	b	27d28 <__assert_fail@plt+0x14824>
   28f3c:	mov	sl, #0
   28f40:	b	28eac <__assert_fail@plt+0x159a8>
   28f44:	rev	r3, r3
   28f48:	b	2808c <__assert_fail@plt+0x14b88>
   28f4c:	add	r5, lr, r5
   28f50:	and	r1, r3, #127	; 0x7f
   28f54:	cmp	r5, lr
   28f58:	mov	r3, #0
   28f5c:	uxtb	r2, r1
   28f60:	strd	r2, [sp, #224]	; 0xe0
   28f64:	bls	292a4 <__assert_fail@plt+0x15da0>
   28f68:	rsb	r5, lr, r5
   28f6c:	cmp	r5, #9
   28f70:	movcs	r5, #9
   28f74:	mov	fp, #7
   28f78:	mov	lr, sl
   28f7c:	str	fp, [sp, #244]	; 0xf4
   28f80:	mov	r4, #1
   28f84:	ldrd	sl, [sp, #232]	; 0xe8
   28f88:	cmp	r4, r5
   28f8c:	bcs	29290 <__assert_fail@plt+0x15d8c>
   28f90:	ldrb	r2, [r8], #1
   28f94:	uxtb	r3, r2
   28f98:	tst	r3, #128	; 0x80
   28f9c:	bne	290f8 <__assert_fail@plt+0x15bf4>
   28fa0:	sbfx	r3, r3, #0, #7
   28fa4:	mov	r1, #7
   28fa8:	mul	r1, r1, r4
   28fac:	sxtb	r2, r3
   28fb0:	strd	sl, [sp, #232]	; 0xe8
   28fb4:	mov	sl, lr
   28fb8:	asr	r3, r2, #31
   28fbc:	sub	lr, r1, #32
   28fc0:	lsl	r4, r3, r1
   28fc4:	rsb	r3, r1, #32
   28fc8:	orr	lr, r4, r2, lsl lr
   28fcc:	lsl	r1, r2, r1
   28fd0:	orr	r3, lr, r2, lsr r3
   28fd4:	str	r1, [sp, #88]	; 0x58
   28fd8:	str	r3, [sp, #92]	; 0x5c
   28fdc:	ldrd	r4, [sp, #88]	; 0x58
   28fe0:	ldrd	r2, [sp, #224]	; 0xe0
   28fe4:	orr	r4, r4, r2
   28fe8:	orr	r5, r5, r3
   28fec:	b	27fd8 <__assert_fail@plt+0x14ad4>
   28ff0:	add	r1, r9, r5
   28ff4:	cmp	r1, r9
   28ff8:	bls	292b8 <__assert_fail@plt+0x15db4>
   28ffc:	rsb	r1, r9, r1
   29000:	cmp	r1, #10
   29004:	movcc	fp, r1
   29008:	movcs	fp, #10
   2900c:	mov	sl, #1
   29010:	mov	ip, #7
   29014:	cmp	sl, fp
   29018:	bcs	292ac <__assert_fail@plt+0x15da8>
   2901c:	mul	r8, ip, sl
   29020:	ldrb	r4, [lr], #1
   29024:	and	r0, r4, #127	; 0x7f
   29028:	tst	r4, #128	; 0x80
   2902c:	uxtb	r0, r0
   29030:	mov	r1, r8
   29034:	sub	r8, r8, #32
   29038:	rsb	r4, r1, #32
   2903c:	lsl	r8, r0, r8
   29040:	orr	r4, r8, r0, lsr r4
   29044:	lsl	r1, r0, r1
   29048:	str	r4, [sp, #148]	; 0x94
   2904c:	str	r1, [sp, #144]	; 0x90
   29050:	ldrd	r0, [sp, #144]	; 0x90
   29054:	orr	r2, r2, r0
   29058:	orr	r3, r3, r1
   2905c:	beq	27fb0 <__assert_fail@plt+0x14aac>
   29060:	add	sl, sl, #1
   29064:	b	29014 <__assert_fail@plt+0x15b10>
   29068:	ldr	ip, [sp, #40]	; 0x28
   2906c:	and	r3, r3, #127	; 0x7f
   29070:	mov	r5, #0
   29074:	add	r2, r9, ip
   29078:	uxtb	r4, r3
   2907c:	cmp	r2, r9
   29080:	bls	29184 <__assert_fail@plt+0x15c80>
   29084:	rsb	r2, r9, r2
   29088:	cmp	r2, #9
   2908c:	movcc	sl, r2
   29090:	movcs	sl, #9
   29094:	mov	r1, #1
   29098:	mov	fp, #7
   2909c:	cmp	r1, sl
   290a0:	bcs	29178 <__assert_fail@plt+0x15c74>
   290a4:	ldrb	r2, [r8], #1
   290a8:	uxtb	r3, r2
   290ac:	tst	r3, #128	; 0x80
   290b0:	bne	29138 <__assert_fail@plt+0x15c34>
   290b4:	sbfx	r3, r3, #0, #7
   290b8:	mov	r2, #7
   290bc:	mul	r1, r2, r1
   290c0:	sxtb	r2, r3
   290c4:	asr	r3, r2, #31
   290c8:	sub	r0, r1, #32
   290cc:	lsl	lr, r3, r1
   290d0:	rsb	r3, r1, #32
   290d4:	orr	r0, lr, r2, lsl r0
   290d8:	lsl	r1, r2, r1
   290dc:	orr	r3, r0, r2, lsr r3
   290e0:	str	r1, [sp, #80]	; 0x50
   290e4:	str	r3, [sp, #84]	; 0x54
   290e8:	ldrd	sl, [sp, #80]	; 0x50
   290ec:	orr	r4, r4, sl
   290f0:	orr	r5, r5, fp
   290f4:	b	27ed4 <__assert_fail@plt+0x149d0>
   290f8:	ldr	r3, [sp, #244]	; 0xf4
   290fc:	and	r2, r2, #127	; 0x7f
   29100:	uxtb	r2, r2
   29104:	mul	r1, r3, r4
   29108:	add	r4, r4, #1
   2910c:	sub	ip, r1, #32
   29110:	lsl	fp, r2, ip
   29114:	mov	r3, r1
   29118:	rsb	r1, r1, #32
   2911c:	orr	fp, fp, r2, lsr r1
   29120:	lsl	sl, r2, r3
   29124:	ldrd	r2, [sp, #224]	; 0xe0
   29128:	orr	r2, r2, sl
   2912c:	orr	r3, r3, fp
   29130:	strd	r2, [sp, #224]	; 0xe0
   29134:	b	28f88 <__assert_fail@plt+0x15a84>
   29138:	mul	r0, fp, r1
   2913c:	and	r2, r2, #127	; 0x7f
   29140:	add	r1, r1, #1
   29144:	uxtb	r2, r2
   29148:	sub	ip, r0, #32
   2914c:	lsl	ip, r2, ip
   29150:	mov	r3, r0
   29154:	rsb	r0, r0, #32
   29158:	orr	r0, ip, r2, lsr r0
   2915c:	lsl	r3, r2, r3
   29160:	str	r0, [sp, #140]	; 0x8c
   29164:	str	r3, [sp, #136]	; 0x88
   29168:	ldrd	r2, [sp, #136]	; 0x88
   2916c:	orr	r4, r4, r2
   29170:	orr	r5, r5, r3
   29174:	b	2909c <__assert_fail@plt+0x15b98>
   29178:	mvn	r4, #0
   2917c:	mvn	r5, #-2147483648	; 0x80000000
   29180:	b	27ed4 <__assert_fail@plt+0x149d0>
   29184:	mov	sl, #0
   29188:	b	29094 <__assert_fail@plt+0x15b90>
   2918c:	add	sl, lr, sl
   29190:	cmp	sl, lr
   29194:	bls	29288 <__assert_fail@plt+0x15d84>
   29198:	rsb	lr, lr, sl
   2919c:	cmp	lr, #10
   291a0:	movcc	ip, lr
   291a4:	movcs	ip, #10
   291a8:	mov	fp, #1
   291ac:	cmp	fp, ip
   291b0:	bcs	2927c <__assert_fail@plt+0x15d78>
   291b4:	mov	r0, #7
   291b8:	ldrb	lr, [r8], #1
   291bc:	mul	sl, r0, fp
   291c0:	and	r0, lr, #127	; 0x7f
   291c4:	tst	lr, #128	; 0x80
   291c8:	uxtb	r0, r0
   291cc:	mov	r1, sl
   291d0:	sub	sl, sl, #32
   291d4:	rsb	lr, r1, #32
   291d8:	lsl	sl, r0, sl
   291dc:	orr	lr, sl, r0, lsr lr
   291e0:	lsl	r1, r0, r1
   291e4:	str	lr, [sp, #132]	; 0x84
   291e8:	str	r1, [sp, #128]	; 0x80
   291ec:	ldrd	r0, [sp, #128]	; 0x80
   291f0:	orr	r2, r2, r0
   291f4:	orr	r3, r3, r1
   291f8:	beq	281ac <__assert_fail@plt+0x14ca8>
   291fc:	add	fp, fp, #1
   29200:	b	291ac <__assert_fail@plt+0x15ca8>
   29204:	add	r1, r9, sl
   29208:	cmp	r1, r9
   2920c:	bls	293c4 <__assert_fail@plt+0x15ec0>
   29210:	rsb	r1, r9, r1
   29214:	cmp	r1, #10
   29218:	movcc	fp, r1
   2921c:	movcs	fp, #10
   29220:	mov	r8, #1
   29224:	mov	ip, #7
   29228:	cmp	r8, fp
   2922c:	bcs	293b8 <__assert_fail@plt+0x15eb4>
   29230:	mul	r5, ip, r8
   29234:	ldrb	r4, [lr], #1
   29238:	and	r0, r4, #127	; 0x7f
   2923c:	tst	r4, #128	; 0x80
   29240:	uxtb	r0, r0
   29244:	mov	r1, r5
   29248:	sub	r5, r5, #32
   2924c:	rsb	r4, r1, #32
   29250:	lsl	r5, r0, r5
   29254:	orr	r4, r5, r0, lsr r4
   29258:	lsl	r1, r0, r1
   2925c:	str	r4, [sp, #124]	; 0x7c
   29260:	str	r1, [sp, #120]	; 0x78
   29264:	ldrd	r4, [sp, #120]	; 0x78
   29268:	orr	r2, r2, r4
   2926c:	orr	r3, r3, r5
   29270:	beq	28188 <__assert_fail@plt+0x14c84>
   29274:	add	r8, r8, #1
   29278:	b	29228 <__assert_fail@plt+0x15d24>
   2927c:	mvn	r0, #0
   29280:	mov	r2, r0
   29284:	b	281b4 <__assert_fail@plt+0x14cb0>
   29288:	mov	ip, #0
   2928c:	b	291a8 <__assert_fail@plt+0x15ca4>
   29290:	strd	sl, [sp, #232]	; 0xe8
   29294:	mvn	r4, #0
   29298:	mov	sl, lr
   2929c:	mvn	r5, #-2147483648	; 0x80000000
   292a0:	b	27fd8 <__assert_fail@plt+0x14ad4>
   292a4:	mov	r5, #0
   292a8:	b	28f74 <__assert_fail@plt+0x15a70>
   292ac:	mvn	sl, #0
   292b0:	mov	r0, sl
   292b4:	b	27fb8 <__assert_fail@plt+0x14ab4>
   292b8:	mov	fp, #0
   292bc:	b	2900c <__assert_fail@plt+0x15b08>
   292c0:	ldr	sl, [sp, #40]	; 0x28
   292c4:	and	r2, r2, #127	; 0x7f
   292c8:	mov	r5, #0
   292cc:	add	r1, r3, sl
   292d0:	uxtb	r4, r2
   292d4:	cmp	r3, r1
   292d8:	bcs	293b0 <__assert_fail@plt+0x15eac>
   292dc:	rsb	r3, r3, r1
   292e0:	cmp	r3, #9
   292e4:	movcc	sl, r3
   292e8:	movcs	sl, #9
   292ec:	mov	r1, #1
   292f0:	mov	fp, #7
   292f4:	cmp	r1, sl
   292f8:	bcs	293a4 <__assert_fail@plt+0x15ea0>
   292fc:	ldrb	r2, [r8], #1
   29300:	uxtb	r3, r2
   29304:	tst	r3, #128	; 0x80
   29308:	bne	29364 <__assert_fail@plt+0x15e60>
   2930c:	sbfx	r3, r3, #0, #7
   29310:	mov	r2, #7
   29314:	mul	r1, r2, r1
   29318:	sxtb	r2, r3
   2931c:	asr	r3, r2, #31
   29320:	sub	r0, r1, #32
   29324:	lsl	fp, r3, r1
   29328:	rsb	r3, r1, #32
   2932c:	orr	r0, fp, r2, lsl r0
   29330:	lsl	r1, r2, r1
   29334:	orr	r3, r0, r2, lsr r3
   29338:	str	r1, [sp, #96]	; 0x60
   2933c:	str	r3, [sp, #100]	; 0x64
   29340:	ldrd	sl, [sp, #96]	; 0x60
   29344:	orr	r4, r4, sl
   29348:	orr	r5, r5, fp
   2934c:	b	282f0 <__assert_fail@plt+0x14dec>
   29350:	ldr	r3, [r8, #1]
   29354:	ldr	r2, [r8, #5]
   29358:	rev	r3, r3
   2935c:	rev	r2, r2
   29360:	b	282b4 <__assert_fail@plt+0x14db0>
   29364:	mul	r0, fp, r1
   29368:	and	r2, r2, #127	; 0x7f
   2936c:	add	r1, r1, #1
   29370:	uxtb	r2, r2
   29374:	sub	ip, r0, #32
   29378:	lsl	ip, r2, ip
   2937c:	mov	r3, r0
   29380:	rsb	r0, r0, #32
   29384:	orr	r0, ip, r2, lsr r0
   29388:	lsl	r3, r2, r3
   2938c:	str	r0, [sp, #164]	; 0xa4
   29390:	str	r3, [sp, #160]	; 0xa0
   29394:	ldrd	r2, [sp, #160]	; 0xa0
   29398:	orr	r4, r4, r2
   2939c:	orr	r5, r5, r3
   293a0:	b	292f4 <__assert_fail@plt+0x15df0>
   293a4:	mvn	r4, #0
   293a8:	mvn	r5, #-2147483648	; 0x80000000
   293ac:	b	282f0 <__assert_fail@plt+0x14dec>
   293b0:	mov	sl, #0
   293b4:	b	292ec <__assert_fail@plt+0x15de8>
   293b8:	mvn	r5, #0
   293bc:	mov	r4, r5
   293c0:	b	28190 <__assert_fail@plt+0x14c8c>
   293c4:	mov	fp, #0
   293c8:	b	29220 <__assert_fail@plt+0x15d1c>
   293cc:	andeq	r9, r5, r4, lsl r4
   293d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293d4:	movw	r6, #37688	; 0x9338
   293d8:	movt	r6, #5
   293dc:	ldr	sl, [r1, #8]
   293e0:	sub	sp, sp, #140	; 0x8c
   293e4:	subs	r7, r0, #0
   293e8:	ldr	r3, [r6]
   293ec:	mov	r5, r1
   293f0:	str	sl, [sp, #56]	; 0x38
   293f4:	ldr	r9, [r1, #12]
   293f8:	str	r3, [sp, #132]	; 0x84
   293fc:	ldrb	sl, [r1, #17]
   29400:	beq	2a8a8 <__assert_fail@plt+0x173a4>
   29404:	ldr	r8, [r7]
   29408:	cmp	r8, #0
   2940c:	beq	2a8a8 <__assert_fail@plt+0x173a4>
   29410:	ldr	r4, [r7, #4]
   29414:	cmp	r4, #0
   29418:	beq	2a874 <__assert_fail@plt+0x17370>
   2941c:	cmp	r4, #24
   29420:	beq	297dc <__assert_fail@plt+0x162d8>
   29424:	bls	29478 <__assert_fail@plt+0x15f74>
   29428:	cmp	r4, #35	; 0x23
   2942c:	bhi	29518 <__assert_fail@plt+0x16014>
   29430:	cmp	r4, #33	; 0x21
   29434:	bcs	296a0 <__assert_fail@plt+0x1619c>
   29438:	cmp	r4, #28
   2943c:	beq	2961c <__assert_fail@plt+0x16118>
   29440:	bhi	29590 <__assert_fail@plt+0x1608c>
   29444:	cmp	r4, #26
   29448:	beq	29950 <__assert_fail@plt+0x1644c>
   2944c:	bhi	2988c <__assert_fail@plt+0x16388>
   29450:	ldrb	r3, [r1, #16]
   29454:	cmp	r3, #0
   29458:	beq	29c44 <__assert_fail@plt+0x16740>
   2945c:	mov	r0, #0
   29460:	ldr	r2, [sp, #132]	; 0x84
   29464:	ldr	r3, [r6]
   29468:	cmp	r2, r3
   2946c:	bne	2a7ac <__assert_fail@plt+0x172a8>
   29470:	add	sp, sp, #140	; 0x8c
   29474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29478:	cmp	r4, #11
   2947c:	beq	296a0 <__assert_fail@plt+0x1619c>
   29480:	bls	297b8 <__assert_fail@plt+0x162b4>
   29484:	cmp	r4, #15
   29488:	beq	296a0 <__assert_fail@plt+0x1619c>
   2948c:	bhi	29610 <__assert_fail@plt+0x1610c>
   29490:	cmp	r4, #13
   29494:	beq	296a0 <__assert_fail@plt+0x1619c>
   29498:	bhi	29950 <__assert_fail@plt+0x1644c>
   2949c:	ldrb	r3, [r1, #16]
   294a0:	cmp	r3, #0
   294a4:	bne	2945c <__assert_fail@plt+0x15f58>
   294a8:	mov	r0, r7
   294ac:	add	r1, sp, #80	; 0x50
   294b0:	bl	131a4 <dwarf_formflag@plt>
   294b4:	cmp	r0, #0
   294b8:	bne	298c8 <__assert_fail@plt+0x163c4>
   294bc:	mov	r0, r8
   294c0:	lsl	r9, r9, #1
   294c4:	bl	16670 <__assert_fail@plt+0x316c>
   294c8:	mov	r4, r0
   294cc:	mov	r0, #12
   294d0:	bl	1748c <__assert_fail@plt+0x3f88>
   294d4:	ldrb	r3, [sp, #80]	; 0x50
   294d8:	mov	r2, r9
   294dc:	movw	r1, #10696	; 0x29c8
   294e0:	cmp	r3, #0
   294e4:	movw	r3, #37712	; 0x9350
   294e8:	movt	r3, #5
   294ec:	movt	r1, #4
   294f0:	ldrne	r3, [r3, #116]	; 0x74
   294f4:	ldreq	r3, [r3, #120]	; 0x78
   294f8:	str	r4, [sp]
   294fc:	str	r3, [sp, #8]
   29500:	movw	r3, #15800	; 0x3db8
   29504:	movt	r3, #4
   29508:	str	r0, [sp, #4]
   2950c:	mov	r0, #1
   29510:	bl	13204 <__printf_chk@plt>
   29514:	b	2945c <__assert_fail@plt+0x15f58>
   29518:	cmp	r4, #44	; 0x2c
   2951c:	bls	29940 <__assert_fail@plt+0x1643c>
   29520:	movw	r3, #7938	; 0x1f02
   29524:	cmp	r4, r3
   29528:	beq	29950 <__assert_fail@plt+0x1644c>
   2952c:	bls	29880 <__assert_fail@plt+0x1637c>
   29530:	movw	r3, #7968	; 0x1f20
   29534:	cmp	r4, r3
   29538:	beq	2961c <__assert_fail@plt+0x16118>
   2953c:	add	r3, r3, #1
   29540:	cmp	r4, r3
   29544:	beq	29950 <__assert_fail@plt+0x1644c>
   29548:	ldrb	r3, [r5, #16]
   2954c:	cmp	r3, #0
   29550:	bne	2945c <__assert_fail@plt+0x15f58>
   29554:	mov	r0, r8
   29558:	bl	16670 <__assert_fail@plt+0x316c>
   2955c:	mov	r5, r0
   29560:	mov	r0, r4
   29564:	bl	1748c <__assert_fail@plt+0x3f88>
   29568:	str	r5, [sp]
   2956c:	lsl	r2, r9, #1
   29570:	movw	r1, #10728	; 0x29e8
   29574:	movw	r3, #15800	; 0x3db8
   29578:	movt	r1, #4
   2957c:	movt	r3, #4
   29580:	str	r0, [sp, #4]
   29584:	mov	r0, #1
   29588:	bl	13204 <__printf_chk@plt>
   2958c:	b	2945c <__assert_fail@plt+0x15f58>
   29590:	cmp	r4, #31
   29594:	beq	29950 <__assert_fail@plt+0x1644c>
   29598:	bls	29c38 <__assert_fail@plt+0x16734>
   2959c:	ldrb	r3, [r1, #16]
   295a0:	cmp	r3, #0
   295a4:	bne	2945c <__assert_fail@plt+0x15f58>
   295a8:	mov	r0, r8
   295ac:	lsl	r9, r9, #1
   295b0:	bl	16670 <__assert_fail@plt+0x316c>
   295b4:	mov	r4, r0
   295b8:	mov	r0, #32
   295bc:	bl	1748c <__assert_fail@plt+0x3f88>
   295c0:	ldr	r2, [r7, #12]
   295c4:	ldr	r3, [r7, #8]
   295c8:	ldr	r2, [r2]
   295cc:	ldrb	r2, [r2, #84]	; 0x54
   295d0:	cmp	r2, #0
   295d4:	ldreq	ip, [r3]
   295d8:	ldreq	r3, [r3, #4]
   295dc:	bne	2aad0 <__assert_fail@plt+0x175cc>
   295e0:	str	r0, [sp, #4]
   295e4:	mov	r2, r9
   295e8:	str	r3, [sp, #12]
   295ec:	movw	r1, #10132	; 0x2794
   295f0:	str	r4, [sp]
   295f4:	movt	r1, #4
   295f8:	str	ip, [sp, #8]
   295fc:	movw	r3, #15800	; 0x3db8
   29600:	mov	r0, #1
   29604:	movt	r3, #4
   29608:	bl	13204 <__printf_chk@plt>
   2960c:	b	2945c <__assert_fail@plt+0x15f58>
   29610:	cmp	r4, #22
   29614:	beq	29950 <__assert_fail@plt+0x1644c>
   29618:	bhi	296a0 <__assert_fail@plt+0x1619c>
   2961c:	ldrb	r3, [r5, #16]
   29620:	cmp	r3, #0
   29624:	bne	2945c <__assert_fail@plt+0x15f58>
   29628:	mov	r0, r7
   2962c:	add	r1, sp, #112	; 0x70
   29630:	bl	12f7c <dwarf_formref_die@plt>
   29634:	cmp	r0, #0
   29638:	beq	298c8 <__assert_fail@plt+0x163c4>
   2963c:	mov	r0, r8
   29640:	bl	16670 <__assert_fail@plt+0x316c>
   29644:	mov	r5, r0
   29648:	mov	r0, r4
   2964c:	bl	1748c <__assert_fail@plt+0x3f88>
   29650:	str	r5, [sp]
   29654:	lsl	r2, r9, #1
   29658:	movw	r1, #10060	; 0x274c
   2965c:	movw	r3, #15800	; 0x3db8
   29660:	movt	r1, #4
   29664:	movt	r3, #4
   29668:	str	r0, [sp, #4]
   2966c:	mov	r0, #1
   29670:	bl	13204 <__printf_chk@plt>
   29674:	cmp	sl, #0
   29678:	add	r0, sp, #112	; 0x70
   2967c:	beq	29e04 <__assert_fail@plt+0x16900>
   29680:	bl	12f28 <dwarf_dieoffset@plt>
   29684:	mov	r2, r0
   29688:	mov	r3, r1
   2968c:	mov	r0, #1
   29690:	movw	r1, #10120	; 0x2788
   29694:	movt	r1, #4
   29698:	bl	13204 <__printf_chk@plt>
   2969c:	b	2945c <__assert_fail@plt+0x15f58>
   296a0:	mov	r0, r7
   296a4:	add	r1, sp, #64	; 0x40
   296a8:	bl	132a0 <dwarf_formudata@plt>
   296ac:	cmp	r0, #0
   296b0:	bne	298c8 <__assert_fail@plt+0x163c4>
   296b4:	cmp	r8, #70	; 0x46
   296b8:	beq	29ee8 <__assert_fail@plt+0x169e4>
   296bc:	bhi	29b6c <__assert_fail@plt+0x16668>
   296c0:	cmp	r8, #44	; 0x2c
   296c4:	beq	2a2b8 <__assert_fail@plt+0x16db4>
   296c8:	bls	299b8 <__assert_fail@plt+0x164b4>
   296cc:	cmp	r8, #58	; 0x3a
   296d0:	beq	2a0b8 <__assert_fail@plt+0x16bb4>
   296d4:	bhi	29dc0 <__assert_fail@plt+0x168bc>
   296d8:	cmp	r8, #54	; 0x36
   296dc:	beq	2a3ec <__assert_fail@plt+0x16ee8>
   296e0:	cmp	r8, #56	; 0x38
   296e4:	beq	2a37c <__assert_fail@plt+0x16e78>
   296e8:	cmp	r8, #50	; 0x32
   296ec:	beq	2a35c <__assert_fail@plt+0x16e58>
   296f0:	ldrb	r3, [r5, #16]
   296f4:	mov	fp, #0
   296f8:	str	fp, [sp, #36]	; 0x24
   296fc:	cmp	r3, #0
   29700:	bne	2945c <__assert_fail@plt+0x15f58>
   29704:	cmp	r8, #18
   29708:	beq	2a450 <__assert_fail@plt+0x16f4c>
   2970c:	cmp	r8, #28
   29710:	mov	r2, #0
   29714:	mov	r3, #0
   29718:	strd	r2, [sp, #80]	; 0x50
   2971c:	beq	2a560 <__assert_fail@plt+0x1705c>
   29720:	cmp	r4, #13
   29724:	cmpne	r4, #33	; 0x21
   29728:	movne	sl, #0
   2972c:	moveq	sl, #1
   29730:	mov	fp, #0
   29734:	cmp	sl, #0
   29738:	bne	29f98 <__assert_fail@plt+0x16a94>
   2973c:	ldr	r2, [sp, #36]	; 0x24
   29740:	cmp	r2, #0
   29744:	beq	2a4dc <__assert_fail@plt+0x16fd8>
   29748:	mov	r0, r8
   2974c:	bl	16670 <__assert_fail@plt+0x316c>
   29750:	mov	r5, r0
   29754:	mov	r0, r4
   29758:	bl	1748c <__assert_fail@plt+0x3f88>
   2975c:	ldr	r3, [sp, #36]	; 0x24
   29760:	movw	r1, #10656	; 0x29a0
   29764:	str	r5, [sp]
   29768:	lsl	r2, r9, #1
   2976c:	movt	r1, #4
   29770:	str	r3, [sp, #8]
   29774:	movw	r3, #15800	; 0x3db8
   29778:	movt	r3, #4
   2977c:	str	r0, [sp, #4]
   29780:	mov	r0, #1
   29784:	bl	13204 <__printf_chk@plt>
   29788:	sub	r3, fp, #1
   2978c:	cmp	r3, #7
   29790:	ldrls	pc, [pc, r3, lsl #2]
   29794:	b	29a9c <__assert_fail@plt+0x16598>
   29798:	andeq	r9, r2, r0, asr #22
   2979c:	andeq	r9, r2, r4, lsl fp
   297a0:	muleq	r2, ip, sl
   297a4:	andeq	r9, r2, r8, ror #21
   297a8:	muleq	r2, ip, sl
   297ac:	muleq	r2, ip, sl
   297b0:	muleq	r2, ip, sl
   297b4:	muleq	r2, ip, sl
   297b8:	cmp	r4, #7
   297bc:	bhi	299ac <__assert_fail@plt+0x164a8>
   297c0:	cmp	r4, #5
   297c4:	bcs	296a0 <__assert_fail@plt+0x1619c>
   297c8:	cmp	r4, #1
   297cc:	beq	2988c <__assert_fail@plt+0x16388>
   297d0:	bcc	29548 <__assert_fail@plt+0x16044>
   297d4:	cmp	r4, #3
   297d8:	bcc	29548 <__assert_fail@plt+0x16044>
   297dc:	ldrb	r3, [r5, #16]
   297e0:	cmp	r3, #0
   297e4:	bne	2945c <__assert_fail@plt+0x15f58>
   297e8:	mov	r0, r7
   297ec:	add	r1, sp, #96	; 0x60
   297f0:	bl	12dfc <dwarf_formblock@plt>
   297f4:	cmp	r0, #0
   297f8:	bne	298c8 <__assert_fail@plt+0x163c4>
   297fc:	mov	r0, r8
   29800:	lsl	r9, r9, #1
   29804:	bl	16670 <__assert_fail@plt+0x316c>
   29808:	mov	sl, r0
   2980c:	mov	r0, r4
   29810:	bl	1748c <__assert_fail@plt+0x3f88>
   29814:	str	sl, [sp]
   29818:	mov	r2, r9
   2981c:	movw	r1, #10060	; 0x274c
   29820:	movw	r3, #15800	; 0x3db8
   29824:	movt	r1, #4
   29828:	movt	r3, #4
   2982c:	str	r0, [sp, #4]
   29830:	mov	r0, #1
   29834:	bl	13204 <__printf_chk@plt>
   29838:	cmp	r8, #56	; 0x38
   2983c:	bhi	29e24 <__assert_fail@plt+0x16920>
   29840:	cmp	r8, #55	; 0x37
   29844:	bcs	29d5c <__assert_fail@plt+0x16858>
   29848:	cmp	r8, #25
   2984c:	beq	29d5c <__assert_fail@plt+0x16858>
   29850:	bls	29d44 <__assert_fail@plt+0x16840>
   29854:	cmp	r8, #42	; 0x2a
   29858:	beq	29d5c <__assert_fail@plt+0x16858>
   2985c:	bhi	2a5f4 <__assert_fail@plt+0x170f0>
   29860:	cmp	r8, #34	; 0x22
   29864:	beq	29d5c <__assert_fail@plt+0x16858>
   29868:	cmp	r4, #24
   2986c:	beq	29d64 <__assert_fail@plt+0x16860>
   29870:	ldr	r0, [sp, #96]	; 0x60
   29874:	ldr	r1, [sp, #104]	; 0x68
   29878:	bl	18684 <__assert_fail@plt+0x5180>
   2987c:	b	2945c <__assert_fail@plt+0x15f58>
   29880:	movw	r3, #7937	; 0x1f01
   29884:	cmp	r4, r3
   29888:	bne	29548 <__assert_fail@plt+0x16044>
   2988c:	ldrb	r3, [r5, #16]
   29890:	cmp	r3, #0
   29894:	bne	2945c <__assert_fail@plt+0x15f58>
   29898:	mov	r0, r7
   2989c:	add	r1, sp, #88	; 0x58
   298a0:	bl	12d00 <dwarf_formaddr@plt>
   298a4:	cmp	r0, #0
   298a8:	bne	298c8 <__assert_fail@plt+0x163c4>
   298ac:	cmp	r4, #1
   298b0:	beq	29e80 <__assert_fail@plt+0x1697c>
   298b4:	mov	r0, r7
   298b8:	add	r1, sp, #112	; 0x70
   298bc:	bl	132a0 <dwarf_formudata@plt>
   298c0:	cmp	r0, #0
   298c4:	beq	2a030 <__assert_fail@plt+0x16b2c>
   298c8:	ldrb	r5, [r5, #16]
   298cc:	cmp	r5, #0
   298d0:	bne	2945c <__assert_fail@plt+0x15f58>
   298d4:	mov	r2, #5
   298d8:	mov	r0, r5
   298dc:	movw	r1, #9972	; 0x26f4
   298e0:	movt	r1, #4
   298e4:	bl	12d84 <dcgettext@plt>
   298e8:	mov	r7, r0
   298ec:	ldr	r0, [sp, #56]	; 0x38
   298f0:	bl	12f28 <dwarf_dieoffset@plt>
   298f4:	mov	sl, r0
   298f8:	mov	r0, r8
   298fc:	mov	fp, r1
   29900:	bl	16670 <__assert_fail@plt+0x316c>
   29904:	mov	r8, r0
   29908:	mov	r0, r4
   2990c:	bl	1748c <__assert_fail@plt+0x3f88>
   29910:	mov	r4, r0
   29914:	mvn	r0, #0
   29918:	bl	13078 <dwarf_errmsg@plt>
   2991c:	strd	sl, [sp]
   29920:	str	r8, [sp, #8]
   29924:	mov	r2, r7
   29928:	str	r4, [sp, #12]
   2992c:	mov	r1, r5
   29930:	str	r0, [sp, #16]
   29934:	mov	r0, r5
   29938:	bl	12f70 <error@plt>
   2993c:	b	2945c <__assert_fail@plt+0x15f58>
   29940:	cmp	r4, #41	; 0x29
   29944:	bcs	2988c <__assert_fail@plt+0x16388>
   29948:	cmp	r4, #36	; 0x24
   2994c:	beq	2961c <__assert_fail@plt+0x16118>
   29950:	ldrb	r3, [r5, #16]
   29954:	cmp	r3, #0
   29958:	bne	2945c <__assert_fail@plt+0x15f58>
   2995c:	mov	r0, r7
   29960:	bl	12d18 <dwarf_formstring@plt>
   29964:	subs	r7, r0, #0
   29968:	beq	298c8 <__assert_fail@plt+0x163c4>
   2996c:	mov	r0, r8
   29970:	bl	16670 <__assert_fail@plt+0x316c>
   29974:	mov	r5, r0
   29978:	mov	r0, r4
   2997c:	bl	1748c <__assert_fail@plt+0x3f88>
   29980:	str	r5, [sp]
   29984:	str	r7, [sp, #8]
   29988:	lsl	r2, r9, #1
   2998c:	movw	r1, #10088	; 0x2768
   29990:	movw	r3, #15800	; 0x3db8
   29994:	movt	r1, #4
   29998:	movt	r3, #4
   2999c:	str	r0, [sp, #4]
   299a0:	mov	r0, #1
   299a4:	bl	13204 <__printf_chk@plt>
   299a8:	b	2945c <__assert_fail@plt+0x15f58>
   299ac:	cmp	r4, #8
   299b0:	bne	297dc <__assert_fail@plt+0x162d8>
   299b4:	b	29950 <__assert_fail@plt+0x1644c>
   299b8:	cmp	r8, #23
   299bc:	beq	2a434 <__assert_fail@plt+0x16f30>
   299c0:	bhi	2a00c <__assert_fail@plt+0x16b08>
   299c4:	cmp	r8, #9
   299c8:	beq	2a418 <__assert_fail@plt+0x16f14>
   299cc:	cmp	r8, #19
   299d0:	bne	2a7a0 <__assert_fail@plt+0x1729c>
   299d4:	ldr	r1, [sp, #64]	; 0x40
   299d8:	cmp	r1, #19
   299dc:	beq	2a9c8 <__assert_fail@plt+0x174c4>
   299e0:	bhi	2a604 <__assert_fail@plt+0x17100>
   299e4:	cmp	r1, #9
   299e8:	beq	2a98c <__assert_fail@plt+0x17488>
   299ec:	bls	2a760 <__assert_fail@plt+0x1725c>
   299f0:	cmp	r1, #14
   299f4:	beq	2aa68 <__assert_fail@plt+0x17564>
   299f8:	bhi	2a84c <__assert_fail@plt+0x17348>
   299fc:	cmp	r1, #11
   29a00:	beq	2aaa4 <__assert_fail@plt+0x175a0>
   29a04:	bcc	2aa98 <__assert_fail@plt+0x17594>
   29a08:	cmp	r1, #12
   29a0c:	beq	2a9e0 <__assert_fail@plt+0x174dc>
   29a10:	cmp	r1, #13
   29a14:	movweq	r0, #9560	; 0x2558
   29a18:	movteq	r0, #4
   29a1c:	bne	2a640 <__assert_fail@plt+0x1713c>
   29a20:	mov	r2, #32768	; 0x8000
   29a24:	movw	r3, #65535	; 0xffff
   29a28:	mov	ip, #0
   29a2c:	str	ip, [sp]
   29a30:	str	ip, [sp, #40]	; 0x28
   29a34:	bl	165c0 <__assert_fail@plt+0x30bc>
   29a38:	ldr	ip, [sp, #40]	; 0x28
   29a3c:	mov	r3, ip
   29a40:	str	r0, [sp, #36]	; 0x24
   29a44:	ldrb	r2, [r5, #16]
   29a48:	cmp	r2, #0
   29a4c:	bne	2945c <__assert_fail@plt+0x15f58>
   29a50:	cmp	r3, #0
   29a54:	beq	2970c <__assert_fail@plt+0x16208>
   29a58:	mov	r0, r8
   29a5c:	bl	16670 <__assert_fail@plt+0x316c>
   29a60:	mov	r7, r0
   29a64:	mov	r0, r4
   29a68:	bl	1748c <__assert_fail@plt+0x3f88>
   29a6c:	ldrd	r4, [sp, #64]	; 0x40
   29a70:	str	r7, [sp]
   29a74:	lsl	r2, r9, #1
   29a78:	movw	r1, #10620	; 0x297c
   29a7c:	movw	r3, #15800	; 0x3db8
   29a80:	strd	r4, [sp, #8]
   29a84:	movt	r1, #4
   29a88:	movt	r3, #4
   29a8c:	str	r0, [sp, #4]
   29a90:	mov	r0, #1
   29a94:	bl	13204 <__printf_chk@plt>
   29a98:	b	2945c <__assert_fail@plt+0x15f58>
   29a9c:	cmp	sl, #0
   29aa0:	movwne	r1, #48	; 0x30
   29aa4:	movweq	r1, #10688	; 0x29c0
   29aa8:	movne	r0, #1
   29aac:	movtne	r1, #4
   29ab0:	ldrdne	r2, [sp, #80]	; 0x50
   29ab4:	moveq	r0, #1
   29ab8:	movteq	r1, #4
   29abc:	ldrdeq	r2, [sp, #64]	; 0x40
   29ac0:	bl	13204 <__printf_chk@plt>
   29ac4:	cmp	r8, #28
   29ac8:	beq	29fb0 <__assert_fail@plt+0x16aac>
   29acc:	ldr	sl, [sp, #36]	; 0x24
   29ad0:	cmp	sl, #0
   29ad4:	beq	2a4d0 <__assert_fail@plt+0x16fcc>
   29ad8:	movw	r0, #256	; 0x100
   29adc:	movt	r0, #4
   29ae0:	bl	12fdc <puts@plt>
   29ae4:	b	2945c <__assert_fail@plt+0x15f58>
   29ae8:	cmp	sl, #0
   29aec:	movwne	r1, #26624	; 0x6800
   29af0:	movweq	r1, #28016	; 0x6d70
   29af4:	movne	r0, #1
   29af8:	movtne	r1, #4
   29afc:	ldrne	r2, [sp, #80]	; 0x50
   29b00:	moveq	r0, #1
   29b04:	movteq	r1, #4
   29b08:	ldreq	r2, [sp, #64]	; 0x40
   29b0c:	bl	13204 <__printf_chk@plt>
   29b10:	b	29ac4 <__assert_fail@plt+0x165c0>
   29b14:	cmp	sl, #0
   29b18:	movwne	r1, #26624	; 0x6800
   29b1c:	movweq	r1, #28016	; 0x6d70
   29b20:	movne	r0, #1
   29b24:	movtne	r1, #4
   29b28:	ldrshne	r2, [sp, #80]	; 0x50
   29b2c:	moveq	r0, #1
   29b30:	movteq	r1, #4
   29b34:	ldrheq	r2, [sp, #64]	; 0x40
   29b38:	bl	13204 <__printf_chk@plt>
   29b3c:	b	29ac4 <__assert_fail@plt+0x165c0>
   29b40:	cmp	sl, #0
   29b44:	movwne	r1, #26624	; 0x6800
   29b48:	movweq	r1, #28016	; 0x6d70
   29b4c:	movne	r0, #1
   29b50:	movtne	r1, #4
   29b54:	ldrsbne	r2, [sp, #80]	; 0x50
   29b58:	moveq	r0, #1
   29b5c:	movteq	r1, #4
   29b60:	ldrbeq	r2, [sp, #64]	; 0x40
   29b64:	bl	13204 <__printf_chk@plt>
   29b68:	b	29ac4 <__assert_fail@plt+0x165c0>
   29b6c:	cmp	r8, #115	; 0x73
   29b70:	beq	2a198 <__assert_fail@plt+0x16c94>
   29b74:	bls	29c8c <__assert_fail@plt+0x16788>
   29b78:	movw	r3, #8468	; 0x2114
   29b7c:	cmp	r8, r3
   29b80:	bhi	29e50 <__assert_fail@plt+0x1694c>
   29b84:	movw	r3, #8465	; 0x2111
   29b88:	cmp	r8, r3
   29b8c:	bcs	29ee8 <__assert_fail@plt+0x169e4>
   29b90:	cmp	r8, #139	; 0x8b
   29b94:	beq	2a17c <__assert_fail@plt+0x16c78>
   29b98:	cmp	r8, #140	; 0x8c
   29b9c:	beq	2a228 <__assert_fail@plt+0x16d24>
   29ba0:	cmp	r8, #116	; 0x74
   29ba4:	bne	296f0 <__assert_fail@plt+0x161ec>
   29ba8:	movw	r0, #37712	; 0x9350
   29bac:	movt	r0, #5
   29bb0:	ldr	r1, [r5, #24]
   29bb4:	ldr	r3, [r0, #20]
   29bb8:	ldr	r2, [r5, #28]
   29bbc:	tst	r3, #512	; 0x200
   29bc0:	ldrd	sl, [sp, #64]	; 0x40
   29bc4:	ldr	r3, [r5, #32]
   29bc8:	moveq	r7, #1
   29bcc:	bne	2a6c4 <__assert_fail@plt+0x171c0>
   29bd0:	ldrb	r3, [r5, #16]
   29bd4:	cmp	r3, #0
   29bd8:	bne	2945c <__assert_fail@plt+0x15f58>
   29bdc:	mov	r0, #116	; 0x74
   29be0:	bl	16670 <__assert_fail@plt+0x316c>
   29be4:	lsl	r9, r9, #1
   29be8:	mov	r8, r0
   29bec:	mov	r0, r4
   29bf0:	bl	1748c <__assert_fail@plt+0x3f88>
   29bf4:	ldrd	r4, [sp, #64]	; 0x40
   29bf8:	cmp	r7, #0
   29bfc:	movw	r3, #15800	; 0x3db8
   29c00:	movt	r3, #4
   29c04:	movw	r1, #9524	; 0x2534
   29c08:	str	r8, [sp]
   29c0c:	movt	r1, #4
   29c10:	mov	r2, r9
   29c14:	movne	r1, r3
   29c18:	strd	r4, [sp, #8]
   29c1c:	str	r1, [sp, #16]
   29c20:	movw	r1, #10304	; 0x2840
   29c24:	movt	r1, #4
   29c28:	str	r0, [sp, #4]
   29c2c:	mov	r0, #1
   29c30:	bl	13204 <__printf_chk@plt>
   29c34:	b	2945c <__assert_fail@plt+0x15f58>
   29c38:	cmp	r4, #30
   29c3c:	beq	297dc <__assert_fail@plt+0x162d8>
   29c40:	b	29548 <__assert_fail@plt+0x16044>
   29c44:	mov	r0, r8
   29c48:	bl	16670 <__assert_fail@plt+0x316c>
   29c4c:	mov	r4, r0
   29c50:	mov	r0, #25
   29c54:	bl	1748c <__assert_fail@plt+0x3f88>
   29c58:	movw	r3, #37712	; 0x9350
   29c5c:	movt	r3, #5
   29c60:	str	r4, [sp]
   29c64:	lsl	r2, r9, #1
   29c68:	movw	r1, #10696	; 0x29c8
   29c6c:	ldr	ip, [r3, #116]	; 0x74
   29c70:	movt	r1, #4
   29c74:	movw	r3, #15800	; 0x3db8
   29c78:	movt	r3, #4
   29c7c:	stmib	sp, {r0, ip}
   29c80:	mov	r0, #1
   29c84:	bl	13204 <__printf_chk@plt>
   29c88:	b	2945c <__assert_fail@plt+0x15f58>
   29c8c:	cmp	r8, #77	; 0x4d
   29c90:	beq	29ee8 <__assert_fail@plt+0x169e4>
   29c94:	bls	29fdc <__assert_fail@plt+0x16ad8>
   29c98:	cmp	r8, #85	; 0x55
   29c9c:	beq	2a2b8 <__assert_fail@plt+0x16db4>
   29ca0:	bls	29ee0 <__assert_fail@plt+0x169dc>
   29ca4:	cmp	r8, #88	; 0x58
   29ca8:	beq	2a0b8 <__assert_fail@plt+0x16bb4>
   29cac:	cmp	r8, #114	; 0x72
   29cb0:	bne	296f0 <__assert_fail@plt+0x161ec>
   29cb4:	movw	r0, #37712	; 0x9350
   29cb8:	movt	r0, #5
   29cbc:	ldr	r1, [r5, #24]
   29cc0:	ldr	r3, [r0, #20]
   29cc4:	ldr	r2, [r5, #28]
   29cc8:	tst	r3, #128	; 0x80
   29ccc:	ldrd	sl, [sp, #64]	; 0x40
   29cd0:	ldr	r3, [r5, #32]
   29cd4:	moveq	r7, #1
   29cd8:	bne	2a6a4 <__assert_fail@plt+0x171a0>
   29cdc:	ldrb	r3, [r5, #16]
   29ce0:	cmp	r3, #0
   29ce4:	bne	2945c <__assert_fail@plt+0x15f58>
   29ce8:	mov	r0, #114	; 0x72
   29cec:	lsl	r9, r9, #1
   29cf0:	bl	16670 <__assert_fail@plt+0x316c>
   29cf4:	mov	r8, r0
   29cf8:	mov	r0, r4
   29cfc:	bl	1748c <__assert_fail@plt+0x3f88>
   29d00:	ldrd	r4, [sp, #64]	; 0x40
   29d04:	cmp	r7, #0
   29d08:	movw	r3, #15800	; 0x3db8
   29d0c:	movt	r3, #4
   29d10:	movw	r1, #9524	; 0x2534
   29d14:	str	r8, [sp]
   29d18:	movt	r1, #4
   29d1c:	mov	r2, r9
   29d20:	movne	r1, r3
   29d24:	strd	r4, [sp, #8]
   29d28:	str	r1, [sp, #16]
   29d2c:	movw	r1, #10452	; 0x28d4
   29d30:	movt	r1, #4
   29d34:	str	r0, [sp, #4]
   29d38:	mov	r0, #1
   29d3c:	bl	13204 <__printf_chk@plt>
   29d40:	b	2945c <__assert_fail@plt+0x15f58>
   29d44:	cmp	r8, #2
   29d48:	beq	29d5c <__assert_fail@plt+0x16858>
   29d4c:	bcc	29868 <__assert_fail@plt+0x16364>
   29d50:	sub	r8, r8, #11
   29d54:	cmp	r8, #2
   29d58:	bhi	29868 <__assert_fail@plt+0x16364>
   29d5c:	cmp	r4, #30
   29d60:	beq	29870 <__assert_fail@plt+0x1636c>
   29d64:	movw	r3, #37704	; 0x9348
   29d68:	movt	r3, #5
   29d6c:	mov	r0, #10
   29d70:	ldr	r1, [r3]
   29d74:	bl	12ed4 <_IO_putc@plt>
   29d78:	ldr	r3, [r5, #20]
   29d7c:	ldr	r1, [r5, #4]
   29d80:	add	r2, r9, #12
   29d84:	ldr	r0, [r5]
   29d88:	str	r3, [sp]
   29d8c:	mov	r3, r2
   29d90:	ldr	ip, [r5, #24]
   29d94:	ldrd	r8, [sp, #96]	; 0x60
   29d98:	ldr	lr, [sp, #104]	; 0x68
   29d9c:	str	ip, [sp, #4]
   29da0:	ldr	ip, [r5, #28]
   29da4:	str	ip, [sp, #8]
   29da8:	ldr	ip, [r7, #12]
   29dac:	strd	r8, [sp, #16]
   29db0:	str	lr, [sp, #24]
   29db4:	str	ip, [sp, #12]
   29db8:	bl	274ac <__assert_fail@plt+0x13fa8>
   29dbc:	b	2945c <__assert_fail@plt+0x15f58>
   29dc0:	cmp	r8, #62	; 0x3e
   29dc4:	beq	2a150 <__assert_fail@plt+0x16c4c>
   29dc8:	bhi	2a074 <__assert_fail@plt+0x16b70>
   29dcc:	cmp	r8, #61	; 0x3d
   29dd0:	bne	296f0 <__assert_fail@plt+0x161ec>
   29dd4:	ldr	r1, [sp, #64]	; 0x40
   29dd8:	cmp	r1, #1
   29ddc:	bhi	2aac8 <__assert_fail@plt+0x175c4>
   29de0:	movw	r3, #50660	; 0xc5e4
   29de4:	movt	r3, #3
   29de8:	add	r3, r3, r1, lsl #2
   29dec:	ldr	r0, [r3, #1920]	; 0x780
   29df0:	mov	ip, #0
   29df4:	str	ip, [sp]
   29df8:	mov	r2, ip
   29dfc:	mov	r3, ip
   29e00:	b	29a30 <__assert_fail@plt+0x1652c>
   29e04:	bl	12f28 <dwarf_dieoffset@plt>
   29e08:	mov	r2, r0
   29e0c:	mov	r3, r1
   29e10:	mov	r0, #1
   29e14:	movw	r1, #10292	; 0x2834
   29e18:	movt	r1, #4
   29e1c:	bl	13204 <__printf_chk@plt>
   29e20:	b	2945c <__assert_fail@plt+0x15f58>
   29e24:	cmp	r8, #81	; 0x51
   29e28:	bhi	2a0a4 <__assert_fail@plt+0x16ba0>
   29e2c:	cmp	r8, #77	; 0x4d
   29e30:	bcs	29d5c <__assert_fail@plt+0x16858>
   29e34:	cmp	r8, #72	; 0x48
   29e38:	beq	29d5c <__assert_fail@plt+0x16858>
   29e3c:	cmp	r8, #74	; 0x4a
   29e40:	beq	29d5c <__assert_fail@plt+0x16858>
   29e44:	cmp	r8, #64	; 0x40
   29e48:	bne	29868 <__assert_fail@plt+0x16364>
   29e4c:	b	29d5c <__assert_fail@plt+0x16858>
   29e50:	movw	r3, #8499	; 0x2133
   29e54:	cmp	r8, r3
   29e58:	beq	2a198 <__assert_fail@plt+0x16c94>
   29e5c:	add	r3, r3, #4
   29e60:	cmp	r8, r3
   29e64:	beq	29ee8 <__assert_fail@plt+0x169e4>
   29e68:	movw	r3, #8497	; 0x2131
   29e6c:	cmp	r8, r3
   29e70:	streq	r0, [sp, #36]	; 0x24
   29e74:	moveq	r3, #1
   29e78:	beq	29a44 <__assert_fail@plt+0x16540>
   29e7c:	b	296f0 <__assert_fail@plt+0x161ec>
   29e80:	mov	r0, r8
   29e84:	bl	16670 <__assert_fail@plt+0x316c>
   29e88:	mov	r7, r0
   29e8c:	mov	r0, r4
   29e90:	bl	1748c <__assert_fail@plt+0x3f88>
   29e94:	movw	r1, #10060	; 0x274c
   29e98:	movw	r3, #15800	; 0x3db8
   29e9c:	str	r7, [sp]
   29ea0:	lsl	r2, r9, #1
   29ea4:	movt	r1, #4
   29ea8:	movt	r3, #4
   29eac:	str	r0, [sp, #4]
   29eb0:	mov	r0, r4
   29eb4:	bl	13204 <__printf_chk@plt>
   29eb8:	ldrd	r8, [sp, #88]	; 0x58
   29ebc:	ldr	r0, [r5]
   29ec0:	ldr	r1, [r5, #24]
   29ec4:	mov	r2, r8
   29ec8:	mov	r3, r9
   29ecc:	strd	r8, [sp]
   29ed0:	bl	27164 <__assert_fail@plt+0x13c60>
   29ed4:	mov	r0, #10
   29ed8:	bl	131b0 <putchar@plt>
   29edc:	b	2945c <__assert_fail@plt+0x15f58>
   29ee0:	cmp	r8, #80	; 0x50
   29ee4:	bne	296f0 <__assert_fail@plt+0x161ec>
   29ee8:	ldr	r3, [r5, #32]
   29eec:	ldrh	r2, [r3, #26]
   29ef0:	cmp	r2, #4
   29ef4:	bhi	2a518 <__assert_fail@plt+0x17014>
   29ef8:	ldrb	r2, [r5, #17]
   29efc:	cmp	r2, #0
   29f00:	bne	29f2c <__assert_fail@plt+0x16a28>
   29f04:	movw	r0, #37712	; 0x9350
   29f08:	movt	r0, #5
   29f0c:	ldrd	sl, [sp, #64]	; 0x40
   29f10:	ldr	ip, [r0, #20]
   29f14:	ldr	r1, [r5, #24]
   29f18:	tst	ip, #32
   29f1c:	ldr	r2, [r5, #28]
   29f20:	addne	r0, r0, #128	; 0x80
   29f24:	strdne	sl, [sp]
   29f28:	bne	2a548 <__assert_fail@plt+0x17044>
   29f2c:	mov	r7, #1
   29f30:	ldrb	r3, [r5, #16]
   29f34:	cmp	r3, #0
   29f38:	bne	2945c <__assert_fail@plt+0x15f58>
   29f3c:	ldr	r3, [r5, #32]
   29f40:	mov	r0, r8
   29f44:	ldrh	r3, [r3, #26]
   29f48:	cmp	r3, #4
   29f4c:	bls	2a260 <__assert_fail@plt+0x16d5c>
   29f50:	cmp	r4, #23
   29f54:	beq	2a260 <__assert_fail@plt+0x16d5c>
   29f58:	bl	16670 <__assert_fail@plt+0x316c>
   29f5c:	mov	r7, r0
   29f60:	mov	r0, r4
   29f64:	bl	1748c <__assert_fail@plt+0x3f88>
   29f68:	ldrd	r4, [sp, #64]	; 0x40
   29f6c:	str	r7, [sp]
   29f70:	lsl	r2, r9, #1
   29f74:	movw	r1, #10252	; 0x280c
   29f78:	movw	r3, #15800	; 0x3db8
   29f7c:	strd	r4, [sp, #8]
   29f80:	movt	r1, #4
   29f84:	movt	r3, #4
   29f88:	str	r0, [sp, #4]
   29f8c:	mov	r0, #1
   29f90:	bl	13204 <__printf_chk@plt>
   29f94:	b	2945c <__assert_fail@plt+0x15f58>
   29f98:	mov	r0, r7
   29f9c:	add	r1, sp, #80	; 0x50
   29fa0:	bl	13108 <dwarf_formsdata@plt>
   29fa4:	cmp	r0, #0
   29fa8:	beq	2973c <__assert_fail@plt+0x16238>
   29fac:	b	298c8 <__assert_fail@plt+0x163c4>
   29fb0:	cmp	r4, #13
   29fb4:	cmpne	r4, #33	; 0x21
   29fb8:	bne	29acc <__assert_fail@plt+0x165c8>
   29fbc:	cmp	sl, #0
   29fc0:	bne	29acc <__assert_fail@plt+0x165c8>
   29fc4:	movw	r1, #61672	; 0xf0e8
   29fc8:	ldrd	r2, [sp, #64]	; 0x40
   29fcc:	movt	r1, #3
   29fd0:	mov	r0, #1
   29fd4:	bl	13204 <__printf_chk@plt>
   29fd8:	b	29acc <__assert_fail@plt+0x165c8>
   29fdc:	cmp	r8, #74	; 0x4a
   29fe0:	beq	29ee8 <__assert_fail@plt+0x169e4>
   29fe4:	cmp	r8, #76	; 0x4c
   29fe8:	bne	2a794 <__assert_fail@plt+0x17290>
   29fec:	ldr	r1, [sp, #64]	; 0x40
   29ff0:	cmp	r1, #2
   29ff4:	bhi	2aac8 <__assert_fail@plt+0x175c4>
   29ff8:	movw	r3, #50660	; 0xc5e4
   29ffc:	movt	r3, #3
   2a000:	add	r3, r3, r1, lsl #2
   2a004:	ldr	r0, [r3, #1844]	; 0x734
   2a008:	b	29df0 <__assert_fail@plt+0x168ec>
   2a00c:	cmp	r8, #32
   2a010:	bne	2a690 <__assert_fail@plt+0x1718c>
   2a014:	ldr	r1, [sp, #64]	; 0x40
   2a018:	cmp	r1, #3
   2a01c:	movwls	r3, #50660	; 0xc5e4
   2a020:	movtls	r3, #3
   2a024:	addls	r3, r3, r1, lsl #2
   2a028:	ldrls	r0, [r3, #1896]	; 0x768
   2a02c:	b	29df0 <__assert_fail@plt+0x168ec>
   2a030:	mov	r0, r8
   2a034:	bl	16670 <__assert_fail@plt+0x316c>
   2a038:	mov	r7, r0
   2a03c:	mov	r0, r4
   2a040:	bl	1748c <__assert_fail@plt+0x3f88>
   2a044:	ldrd	sl, [sp, #112]	; 0x70
   2a048:	str	r7, [sp]
   2a04c:	lsl	r2, r9, #1
   2a050:	movw	r1, #10024	; 0x2728
   2a054:	movw	r3, #15800	; 0x3db8
   2a058:	strd	sl, [sp, #8]
   2a05c:	movt	r1, #4
   2a060:	movt	r3, #4
   2a064:	str	r0, [sp, #4]
   2a068:	mov	r0, #1
   2a06c:	bl	13204 <__printf_chk@plt>
   2a070:	b	29eb8 <__assert_fail@plt+0x169b4>
   2a074:	cmp	r8, #64	; 0x40
   2a078:	beq	29ee8 <__assert_fail@plt+0x169e4>
   2a07c:	cmp	r8, #66	; 0x42
   2a080:	bne	296f0 <__assert_fail@plt+0x161ec>
   2a084:	ldr	r1, [sp, #64]	; 0x40
   2a088:	cmp	r1, #3
   2a08c:	bhi	2aac8 <__assert_fail@plt+0x175c4>
   2a090:	movw	r3, #50660	; 0xc5e4
   2a094:	movt	r3, #3
   2a098:	add	r3, r3, r1, lsl #2
   2a09c:	ldr	r0, [r3, #1856]	; 0x740
   2a0a0:	b	29df0 <__assert_fail@plt+0x168ec>
   2a0a4:	sub	r3, r8, #8448	; 0x2100
   2a0a8:	sub	r3, r3, #17
   2a0ac:	cmp	r3, #3
   2a0b0:	bhi	29868 <__assert_fail@plt+0x16364>
   2a0b4:	b	29d5c <__assert_fail@plt+0x16858>
   2a0b8:	ldrb	sl, [r5, #16]
   2a0bc:	cmp	sl, #0
   2a0c0:	bne	2945c <__assert_fail@plt+0x15f58>
   2a0c4:	ldr	r0, [r5, #32]
   2a0c8:	mov	r2, sl
   2a0cc:	str	sl, [sp]
   2a0d0:	add	r1, sp, #112	; 0x70
   2a0d4:	str	sl, [sp, #4]
   2a0d8:	mov	r3, sl
   2a0dc:	str	sl, [sp, #8]
   2a0e0:	str	sl, [sp, #12]
   2a0e4:	bl	131ec <dwarf_cu_die@plt>
   2a0e8:	subs	ip, r0, #0
   2a0ec:	beq	2a904 <__assert_fail@plt+0x17400>
   2a0f0:	add	r2, sp, #96	; 0x60
   2a0f4:	add	r0, sp, #112	; 0x70
   2a0f8:	add	r1, sp, #88	; 0x58
   2a0fc:	bl	133b4 <dwarf_getsrcfiles@plt>
   2a100:	subs	r2, r0, #0
   2a104:	bne	2a7b0 <__assert_fail@plt+0x172ac>
   2a108:	ldr	r0, [sp, #88]	; 0x58
   2a10c:	mov	r3, r2
   2a110:	ldr	r1, [sp, #64]	; 0x40
   2a114:	bl	13234 <dwarf_filesrc@plt>
   2a118:	subs	sl, r0, #0
   2a11c:	str	sl, [sp, #36]	; 0x24
   2a120:	beq	2aae4 <__assert_fail@plt+0x175e0>
   2a124:	mov	r1, #47	; 0x2f
   2a128:	bl	1330c <strrchr@plt>
   2a12c:	cmp	r0, #0
   2a130:	beq	2a148 <__assert_fail@plt+0x16c44>
   2a134:	cmn	r0, #1
   2a138:	movw	sl, #8172	; 0x1fec
   2a13c:	movt	sl, #4
   2a140:	addne	sl, r0, #1
   2a144:	str	sl, [sp, #36]	; 0x24
   2a148:	ldrb	r3, [r5, #16]
   2a14c:	b	296fc <__assert_fail@plt+0x161f8>
   2a150:	ldr	r1, [sp, #64]	; 0x40
   2a154:	mov	ip, #0
   2a158:	mov	r2, #128	; 0x80
   2a15c:	str	ip, [sp]
   2a160:	cmp	r1, #18
   2a164:	movwls	r3, #50660	; 0xc5e4
   2a168:	movtls	r3, #3
   2a16c:	addls	r3, r3, r1, lsl #2
   2a170:	ldrls	r0, [r3, #1724]	; 0x6bc
   2a174:	mov	r3, #255	; 0xff
   2a178:	b	29a30 <__assert_fail@plt+0x1652c>
   2a17c:	ldr	r1, [sp, #64]	; 0x40
   2a180:	cmp	r1, #2
   2a184:	movwls	r3, #50660	; 0xc5e4
   2a188:	movtls	r3, #3
   2a18c:	addls	r3, r3, r1, lsl #2
   2a190:	ldrls	r0, [r3, #1816]	; 0x718
   2a194:	b	29df0 <__assert_fail@plt+0x168ec>
   2a198:	movw	r0, #37712	; 0x9350
   2a19c:	movt	r0, #5
   2a1a0:	ldr	r1, [r5, #24]
   2a1a4:	ldr	r3, [r0, #20]
   2a1a8:	ldr	r2, [r5, #28]
   2a1ac:	tst	r3, #8192	; 0x2000
   2a1b0:	ldrd	sl, [sp, #64]	; 0x40
   2a1b4:	ldr	r3, [r5, #32]
   2a1b8:	moveq	r7, #1
   2a1bc:	bne	2a6e8 <__assert_fail@plt+0x171e4>
   2a1c0:	ldrb	r3, [r5, #16]
   2a1c4:	cmp	r3, #0
   2a1c8:	bne	2945c <__assert_fail@plt+0x15f58>
   2a1cc:	mov	r0, r8
   2a1d0:	lsl	r9, r9, #1
   2a1d4:	bl	16670 <__assert_fail@plt+0x316c>
   2a1d8:	mov	r8, r0
   2a1dc:	mov	r0, r4
   2a1e0:	bl	1748c <__assert_fail@plt+0x3f88>
   2a1e4:	ldrd	r4, [sp, #64]	; 0x40
   2a1e8:	cmp	r7, #0
   2a1ec:	movw	r3, #15800	; 0x3db8
   2a1f0:	movt	r3, #4
   2a1f4:	movw	r1, #9524	; 0x2534
   2a1f8:	str	r8, [sp]
   2a1fc:	movt	r1, #4
   2a200:	mov	r2, r9
   2a204:	movne	r1, r3
   2a208:	strd	r4, [sp, #8]
   2a20c:	str	r1, [sp, #16]
   2a210:	movw	r1, #10400	; 0x28a0
   2a214:	movt	r1, #4
   2a218:	str	r0, [sp, #4]
   2a21c:	mov	r0, #1
   2a220:	bl	13204 <__printf_chk@plt>
   2a224:	b	2945c <__assert_fail@plt+0x15f58>
   2a228:	movw	r3, #37712	; 0x9350
   2a22c:	movt	r3, #5
   2a230:	ldr	ip, [r5, #24]
   2a234:	ldr	r3, [r3, #20]
   2a238:	ldr	r2, [r5, #28]
   2a23c:	tst	r3, #32
   2a240:	ldrd	r0, [sp, #64]	; 0x40
   2a244:	ldr	r3, [r5, #32]
   2a248:	moveq	r7, #1
   2a24c:	bne	2a708 <__assert_fail@plt+0x17204>
   2a250:	ldrb	r3, [r5, #16]
   2a254:	cmp	r3, #0
   2a258:	bne	2945c <__assert_fail@plt+0x15f58>
   2a25c:	mov	r0, #140	; 0x8c
   2a260:	bl	16670 <__assert_fail@plt+0x316c>
   2a264:	lsl	r9, r9, #1
   2a268:	mov	r8, r0
   2a26c:	mov	r0, r4
   2a270:	bl	1748c <__assert_fail@plt+0x3f88>
   2a274:	ldrd	r4, [sp, #64]	; 0x40
   2a278:	cmp	r7, #0
   2a27c:	movw	r3, #15800	; 0x3db8
   2a280:	movt	r3, #4
   2a284:	movw	r1, #9524	; 0x2534
   2a288:	str	r8, [sp]
   2a28c:	movt	r1, #4
   2a290:	mov	r2, r9
   2a294:	movne	r1, r3
   2a298:	strd	r4, [sp, #8]
   2a29c:	str	r1, [sp, #16]
   2a2a0:	movw	r1, #10200	; 0x27d8
   2a2a4:	movt	r1, #4
   2a2a8:	str	r0, [sp, #4]
   2a2ac:	mov	r0, #1
   2a2b0:	bl	13204 <__printf_chk@plt>
   2a2b4:	b	2945c <__assert_fail@plt+0x15f58>
   2a2b8:	ldr	r3, [r5, #32]
   2a2bc:	ldrh	r2, [r3, #26]
   2a2c0:	cmp	r2, #4
   2a2c4:	bhi	2a648 <__assert_fail@plt+0x17144>
   2a2c8:	movw	r0, #37712	; 0x9350
   2a2cc:	movt	r0, #5
   2a2d0:	ldrd	sl, [sp, #64]	; 0x40
   2a2d4:	ldr	ip, [r0, #20]
   2a2d8:	ldr	r1, [r5, #24]
   2a2dc:	tst	ip, #512	; 0x200
   2a2e0:	ldr	r2, [r5, #28]
   2a2e4:	addne	r0, r0, #152	; 0x98
   2a2e8:	strdne	sl, [sp]
   2a2ec:	bne	2a678 <__assert_fail@plt+0x17174>
   2a2f0:	mov	r7, #1
   2a2f4:	ldrb	r3, [r5, #16]
   2a2f8:	cmp	r3, #0
   2a2fc:	bne	2945c <__assert_fail@plt+0x15f58>
   2a300:	ldr	r3, [r5, #32]
   2a304:	mov	r0, r8
   2a308:	ldrh	r3, [r3, #26]
   2a30c:	cmp	r3, #4
   2a310:	bls	29be0 <__assert_fail@plt+0x166dc>
   2a314:	cmp	r4, #23
   2a318:	beq	29be0 <__assert_fail@plt+0x166dc>
   2a31c:	bl	16670 <__assert_fail@plt+0x316c>
   2a320:	mov	r7, r0
   2a324:	mov	r0, r4
   2a328:	bl	1748c <__assert_fail@plt+0x3f88>
   2a32c:	ldrd	r4, [sp, #64]	; 0x40
   2a330:	str	r7, [sp]
   2a334:	lsl	r2, r9, #1
   2a338:	movw	r1, #10352	; 0x2870
   2a33c:	movw	r3, #15800	; 0x3db8
   2a340:	strd	r4, [sp, #8]
   2a344:	movt	r1, #4
   2a348:	movt	r3, #4
   2a34c:	str	r0, [sp, #4]
   2a350:	mov	r0, #1
   2a354:	bl	13204 <__printf_chk@plt>
   2a358:	b	2945c <__assert_fail@plt+0x15f58>
   2a35c:	ldr	r1, [sp, #64]	; 0x40
   2a360:	cmp	r1, #3
   2a364:	bhi	2aac8 <__assert_fail@plt+0x175c4>
   2a368:	movw	r3, #50660	; 0xc5e4
   2a36c:	movt	r3, #3
   2a370:	add	r3, r3, r1, lsl #2
   2a374:	ldr	r0, [r3, #1800]	; 0x708
   2a378:	b	29df0 <__assert_fail@plt+0x168ec>
   2a37c:	cmp	r4, #23
   2a380:	beq	2ab28 <__assert_fail@plt+0x17624>
   2a384:	ldr	r3, [r5, #20]
   2a388:	cmp	r3, #3
   2a38c:	bhi	2a39c <__assert_fail@plt+0x16e98>
   2a390:	sub	r3, r4, #6
   2a394:	cmp	r3, #1
   2a398:	bls	2ab3c <__assert_fail@plt+0x17638>
   2a39c:	ldrb	r3, [r5, #16]
   2a3a0:	cmp	r3, #0
   2a3a4:	bne	2945c <__assert_fail@plt+0x15f58>
   2a3a8:	mov	r0, #56	; 0x38
   2a3ac:	bl	16670 <__assert_fail@plt+0x316c>
   2a3b0:	mov	r7, r0
   2a3b4:	mov	r0, r4
   2a3b8:	bl	1748c <__assert_fail@plt+0x3f88>
   2a3bc:	ldrd	r4, [sp, #64]	; 0x40
   2a3c0:	str	r7, [sp]
   2a3c4:	lsl	r2, r9, #1
   2a3c8:	movw	r1, #10168	; 0x27b8
   2a3cc:	movw	r3, #15800	; 0x3db8
   2a3d0:	strd	r4, [sp, #8]
   2a3d4:	movt	r1, #4
   2a3d8:	movt	r3, #4
   2a3dc:	str	r0, [sp, #4]
   2a3e0:	mov	r0, #1
   2a3e4:	bl	13204 <__printf_chk@plt>
   2a3e8:	b	2945c <__assert_fail@plt+0x15f58>
   2a3ec:	ldr	r1, [sp, #64]	; 0x40
   2a3f0:	mov	ip, #0
   2a3f4:	mov	r2, #64	; 0x40
   2a3f8:	str	ip, [sp]
   2a3fc:	cmp	r1, #5
   2a400:	movwls	r3, #50660	; 0xc5e4
   2a404:	movtls	r3, #3
   2a408:	addls	r3, r3, r1, lsl #2
   2a40c:	ldrls	r0, [r3, #1872]	; 0x750
   2a410:	mov	r3, #255	; 0xff
   2a414:	b	29a30 <__assert_fail@plt+0x1652c>
   2a418:	ldr	r1, [sp, #64]	; 0x40
   2a41c:	cmp	r1, #1
   2a420:	movwls	r3, #50660	; 0xc5e4
   2a424:	movtls	r3, #3
   2a428:	addls	r3, r3, r1, lsl #2
   2a42c:	ldrls	r0, [r3, #1912]	; 0x778
   2a430:	b	29df0 <__assert_fail@plt+0x168ec>
   2a434:	ldr	r1, [sp, #64]	; 0x40
   2a438:	cmp	r1, #3
   2a43c:	movwls	r3, #50660	; 0xc5e4
   2a440:	movtls	r3, #3
   2a444:	addls	r3, r3, r1, lsl #2
   2a448:	ldrls	r0, [r3, #1828]	; 0x724
   2a44c:	b	29df0 <__assert_fail@plt+0x168ec>
   2a450:	ldr	r0, [r5, #8]
   2a454:	add	r1, sp, #72	; 0x48
   2a458:	bl	132ac <dwarf_highpc@plt>
   2a45c:	cmp	r0, #0
   2a460:	bne	2970c <__assert_fail@plt+0x16208>
   2a464:	mov	r0, r8
   2a468:	bl	16670 <__assert_fail@plt+0x316c>
   2a46c:	mov	r7, r0
   2a470:	mov	r0, r4
   2a474:	bl	1748c <__assert_fail@plt+0x3f88>
   2a478:	ldrd	sl, [sp, #64]	; 0x40
   2a47c:	lsl	r2, r9, #1
   2a480:	str	r7, [sp]
   2a484:	movw	r1, #10588	; 0x295c
   2a488:	movw	r3, #15800	; 0x3db8
   2a48c:	strd	sl, [sp, #8]
   2a490:	movt	r1, #4
   2a494:	movt	r3, #4
   2a498:	str	r0, [sp, #4]
   2a49c:	mov	r0, #1
   2a4a0:	bl	13204 <__printf_chk@plt>
   2a4a4:	ldrd	r8, [sp, #72]	; 0x48
   2a4a8:	ldr	r0, [r5]
   2a4ac:	ldr	r1, [r5, #24]
   2a4b0:	mov	r2, r8
   2a4b4:	mov	r3, r9
   2a4b8:	strd	r8, [sp]
   2a4bc:	bl	27164 <__assert_fail@plt+0x13c60>
   2a4c0:	movw	r0, #256	; 0x100
   2a4c4:	movt	r0, #4
   2a4c8:	bl	12fdc <puts@plt>
   2a4cc:	b	2945c <__assert_fail@plt+0x15f58>
   2a4d0:	mov	r0, #10
   2a4d4:	bl	131b0 <putchar@plt>
   2a4d8:	b	2945c <__assert_fail@plt+0x15f58>
   2a4dc:	mov	r0, r8
   2a4e0:	bl	16670 <__assert_fail@plt+0x316c>
   2a4e4:	mov	r5, r0
   2a4e8:	mov	r0, r4
   2a4ec:	bl	1748c <__assert_fail@plt+0x3f88>
   2a4f0:	str	r5, [sp]
   2a4f4:	lsl	r2, r9, #1
   2a4f8:	movw	r1, #10060	; 0x274c
   2a4fc:	movw	r3, #15800	; 0x3db8
   2a500:	movt	r1, #4
   2a504:	movt	r3, #4
   2a508:	str	r0, [sp, #4]
   2a50c:	mov	r0, #1
   2a510:	bl	13204 <__printf_chk@plt>
   2a514:	b	29788 <__assert_fail@plt+0x16284>
   2a518:	cmp	r4, #23
   2a51c:	bne	29f2c <__assert_fail@plt+0x16a28>
   2a520:	movw	r0, #37712	; 0x9350
   2a524:	movt	r0, #5
   2a528:	ldr	r1, [r5, #24]
   2a52c:	ldr	ip, [r0, #20]
   2a530:	ldr	r2, [r5, #28]
   2a534:	tst	ip, #32
   2a538:	ldrd	sl, [sp, #64]	; 0x40
   2a53c:	beq	29f2c <__assert_fail@plt+0x16a28>
   2a540:	add	r0, r0, #140	; 0x8c
   2a544:	strd	sl, [sp]
   2a548:	str	r8, [sp, #8]
   2a54c:	uxtb	r1, r1
   2a550:	uxtb	r2, r2
   2a554:	bl	1c7c4 <__assert_fail@plt+0x92c0>
   2a558:	mov	r7, r0
   2a55c:	b	29f30 <__assert_fail@plt+0x16a2c>
   2a560:	add	r2, sp, #96	; 0x60
   2a564:	mov	r1, #73	; 0x49
   2a568:	ldr	r0, [r5, #8]
   2a56c:	bl	13378 <dwarf_attr_integrate@plt>
   2a570:	add	r1, sp, #112	; 0x70
   2a574:	bl	12f7c <dwarf_formref_die@plt>
   2a578:	add	r1, sp, #112	; 0x70
   2a57c:	bl	13384 <dwarf_peel_type@plt>
   2a580:	subs	r3, r0, #0
   2a584:	movne	fp, #0
   2a588:	movne	sl, fp
   2a58c:	bne	2973c <__assert_fail@plt+0x16238>
   2a590:	add	r2, sp, #96	; 0x60
   2a594:	mov	r1, #62	; 0x3e
   2a598:	add	r0, sp, #112	; 0x70
   2a59c:	str	r3, [sp, #44]	; 0x2c
   2a5a0:	bl	13114 <dwarf_attr@plt>
   2a5a4:	add	r1, sp, #88	; 0x58
   2a5a8:	bl	132a0 <dwarf_formudata@plt>
   2a5ac:	ldr	r3, [sp, #44]	; 0x2c
   2a5b0:	cmp	r0, #0
   2a5b4:	movne	sl, r3
   2a5b8:	bne	2a5d8 <__assert_fail@plt+0x170d4>
   2a5bc:	ldrd	r2, [sp, #88]	; 0x58
   2a5c0:	subs	r2, r2, #5
   2a5c4:	sbc	r3, r3, #0
   2a5c8:	cmp	r3, #0
   2a5cc:	cmpeq	r2, #1
   2a5d0:	movhi	sl, #0
   2a5d4:	movls	sl, #1
   2a5d8:	add	r0, sp, #112	; 0x70
   2a5dc:	add	r1, sp, #88	; 0x58
   2a5e0:	bl	1318c <dwarf_aggregate_size@plt>
   2a5e4:	cmp	r0, #0
   2a5e8:	ldreq	fp, [sp, #88]	; 0x58
   2a5ec:	beq	29734 <__assert_fail@plt+0x16230>
   2a5f0:	b	29730 <__assert_fail@plt+0x1622c>
   2a5f4:	sub	r8, r8, #46	; 0x2e
   2a5f8:	cmp	r8, #1
   2a5fc:	bhi	29868 <__assert_fail@plt+0x16364>
   2a600:	b	29d5c <__assert_fail@plt+0x16858>
   2a604:	cmp	r1, #29
   2a608:	beq	2a9d4 <__assert_fail@plt+0x174d0>
   2a60c:	bhi	2a72c <__assert_fail@plt+0x17228>
   2a610:	cmp	r1, #24
   2a614:	beq	2a950 <__assert_fail@plt+0x1744c>
   2a618:	bhi	2a824 <__assert_fail@plt+0x17320>
   2a61c:	cmp	r1, #21
   2a620:	beq	2a9ec <__assert_fail@plt+0x174e8>
   2a624:	bcc	2aa28 <__assert_fail@plt+0x17524>
   2a628:	cmp	r1, #22
   2a62c:	beq	2aa1c <__assert_fail@plt+0x17518>
   2a630:	cmp	r1, #23
   2a634:	movweq	r0, #9776	; 0x2630
   2a638:	movteq	r0, #4
   2a63c:	beq	29a20 <__assert_fail@plt+0x1651c>
   2a640:	mov	r0, #0
   2a644:	b	29a20 <__assert_fail@plt+0x1651c>
   2a648:	cmp	r4, #23
   2a64c:	bne	2a2f0 <__assert_fail@plt+0x16dec>
   2a650:	movw	r0, #37712	; 0x9350
   2a654:	movt	r0, #5
   2a658:	ldr	r1, [r5, #24]
   2a65c:	ldr	ip, [r0, #20]
   2a660:	ldr	r2, [r5, #28]
   2a664:	tst	ip, #512	; 0x200
   2a668:	ldrd	sl, [sp, #64]	; 0x40
   2a66c:	beq	2a2f0 <__assert_fail@plt+0x16dec>
   2a670:	add	r0, r0, #164	; 0xa4
   2a674:	strd	sl, [sp]
   2a678:	str	r8, [sp, #8]
   2a67c:	uxtb	r1, r1
   2a680:	uxtb	r2, r2
   2a684:	bl	1c7c4 <__assert_fail@plt+0x92c0>
   2a688:	mov	r7, r0
   2a68c:	b	2a2f4 <__assert_fail@plt+0x16df0>
   2a690:	cmp	r8, #42	; 0x2a
   2a694:	beq	29ee8 <__assert_fail@plt+0x169e4>
   2a698:	cmp	r8, #25
   2a69c:	bne	296f0 <__assert_fail@plt+0x161ec>
   2a6a0:	b	29ee8 <__assert_fail@plt+0x169e4>
   2a6a4:	strd	sl, [sp]
   2a6a8:	add	r0, r0, #104	; 0x68
   2a6ac:	str	r8, [sp, #8]
   2a6b0:	uxtb	r1, r1
   2a6b4:	uxtb	r2, r2
   2a6b8:	bl	1c7c4 <__assert_fail@plt+0x92c0>
   2a6bc:	mov	r7, r0
   2a6c0:	b	29cdc <__assert_fail@plt+0x167d8>
   2a6c4:	mov	ip, #116	; 0x74
   2a6c8:	strd	sl, [sp]
   2a6cc:	add	r0, r0, #164	; 0xa4
   2a6d0:	uxtb	r1, r1
   2a6d4:	uxtb	r2, r2
   2a6d8:	str	ip, [sp, #8]
   2a6dc:	bl	1c7c4 <__assert_fail@plt+0x92c0>
   2a6e0:	mov	r7, r0
   2a6e4:	b	29bd0 <__assert_fail@plt+0x166cc>
   2a6e8:	strd	sl, [sp]
   2a6ec:	add	r0, r0, #176	; 0xb0
   2a6f0:	str	r8, [sp, #8]
   2a6f4:	uxtb	r1, r1
   2a6f8:	uxtb	r2, r2
   2a6fc:	bl	1c7c4 <__assert_fail@plt+0x92c0>
   2a700:	mov	r7, r0
   2a704:	b	2a1c0 <__assert_fail@plt+0x16cbc>
   2a708:	strd	r0, [sp]
   2a70c:	uxtb	r2, r2
   2a710:	uxtb	r1, ip
   2a714:	ldr	r0, [pc, #1076]	; 2ab50 <__assert_fail@plt+0x1764c>
   2a718:	mov	ip, #140	; 0x8c
   2a71c:	str	ip, [sp, #8]
   2a720:	bl	1c7c4 <__assert_fail@plt+0x92c0>
   2a724:	mov	r7, r0
   2a728:	b	2a250 <__assert_fail@plt+0x16d4c>
   2a72c:	cmp	r1, #34	; 0x22
   2a730:	beq	2a9a4 <__assert_fail@plt+0x174a0>
   2a734:	bhi	2a7f8 <__assert_fail@plt+0x172f4>
   2a738:	cmp	r1, #31
   2a73c:	beq	2a9bc <__assert_fail@plt+0x174b8>
   2a740:	bcc	2a9b0 <__assert_fail@plt+0x174ac>
   2a744:	cmp	r1, #32
   2a748:	beq	2a998 <__assert_fail@plt+0x17494>
   2a74c:	cmp	r1, #33	; 0x21
   2a750:	movweq	r0, #9632	; 0x25a0
   2a754:	movteq	r0, #4
   2a758:	beq	29a20 <__assert_fail@plt+0x1651c>
   2a75c:	b	2a640 <__assert_fail@plt+0x1713c>
   2a760:	cmp	r1, #4
   2a764:	beq	2aa4c <__assert_fail@plt+0x17548>
   2a768:	bls	2a888 <__assert_fail@plt+0x17384>
   2a76c:	cmp	r1, #6
   2a770:	beq	2aa40 <__assert_fail@plt+0x1753c>
   2a774:	bcc	2aa34 <__assert_fail@plt+0x17530>
   2a778:	cmp	r1, #7
   2a77c:	beq	2a980 <__assert_fail@plt+0x1747c>
   2a780:	cmp	r1, #8
   2a784:	movweq	r0, #9708	; 0x25ec
   2a788:	movteq	r0, #4
   2a78c:	beq	29a20 <__assert_fail@plt+0x1651c>
   2a790:	b	2a640 <__assert_fail@plt+0x1713c>
   2a794:	cmp	r8, #72	; 0x48
   2a798:	bne	296f0 <__assert_fail@plt+0x161ec>
   2a79c:	b	29ee8 <__assert_fail@plt+0x169e4>
   2a7a0:	cmp	r8, #2
   2a7a4:	bne	296f0 <__assert_fail@plt+0x161ec>
   2a7a8:	b	29ee8 <__assert_fail@plt+0x169e4>
   2a7ac:	bl	12dc0 <__stack_chk_fail@plt>
   2a7b0:	mov	r2, #5
   2a7b4:	movw	r1, #10532	; 0x2924
   2a7b8:	mov	r0, sl
   2a7bc:	movt	r1, #4
   2a7c0:	bl	12d84 <dcgettext@plt>
   2a7c4:	mov	r2, r0
   2a7c8:	add	r0, sp, #112	; 0x70
   2a7cc:	str	r2, [sp, #44]	; 0x2c
   2a7d0:	bl	12f28 <dwarf_dieoffset@plt>
   2a7d4:	ldr	r2, [sp, #44]	; 0x2c
   2a7d8:	strd	r0, [sp]
   2a7dc:	mov	r0, sl
   2a7e0:	mov	r1, sl
   2a7e4:	bl	12f70 <error@plt>
   2a7e8:	movw	fp, #8172	; 0x1fec
   2a7ec:	movt	fp, #4
   2a7f0:	str	fp, [sp, #36]	; 0x24
   2a7f4:	b	2a148 <__assert_fail@plt+0x16c44>
   2a7f8:	cmp	r1, #36	; 0x24
   2a7fc:	beq	2aa10 <__assert_fail@plt+0x1750c>
   2a800:	bcc	2aa04 <__assert_fail@plt+0x17500>
   2a804:	cmp	r1, #37	; 0x25
   2a808:	beq	2a9f8 <__assert_fail@plt+0x174f4>
   2a80c:	movw	r3, #32769	; 0x8001
   2a810:	cmp	r1, r3
   2a814:	movweq	r0, #9752	; 0x2618
   2a818:	movteq	r0, #4
   2a81c:	beq	29a20 <__assert_fail@plt+0x1651c>
   2a820:	b	2a640 <__assert_fail@plt+0x1713c>
   2a824:	cmp	r1, #26
   2a828:	beq	2aa8c <__assert_fail@plt+0x17588>
   2a82c:	bcc	2aa80 <__assert_fail@plt+0x1757c>
   2a830:	cmp	r1, #27
   2a834:	beq	2aa74 <__assert_fail@plt+0x17570>
   2a838:	cmp	r1, #28
   2a83c:	movweq	r0, #9864	; 0x2688
   2a840:	movteq	r0, #4
   2a844:	beq	29a20 <__assert_fail@plt+0x1651c>
   2a848:	b	2a640 <__assert_fail@plt+0x1713c>
   2a84c:	cmp	r1, #16
   2a850:	beq	2a974 <__assert_fail@plt+0x17470>
   2a854:	bcc	2a968 <__assert_fail@plt+0x17464>
   2a858:	cmp	r1, #17
   2a85c:	beq	2a95c <__assert_fail@plt+0x17458>
   2a860:	cmp	r1, #18
   2a864:	movweq	r0, #9880	; 0x2698
   2a868:	movteq	r0, #4
   2a86c:	beq	29a20 <__assert_fail@plt+0x1651c>
   2a870:	b	2a640 <__assert_fail@plt+0x1713c>
   2a874:	ldrb	r7, [r1, #16]
   2a878:	cmp	r7, #0
   2a87c:	beq	2aa58 <__assert_fail@plt+0x17554>
   2a880:	mov	r0, #1
   2a884:	b	29460 <__assert_fail@plt+0x15f5c>
   2a888:	cmp	r1, #2
   2a88c:	beq	2aabc <__assert_fail@plt+0x175b8>
   2a890:	bhi	2aab0 <__assert_fail@plt+0x175ac>
   2a894:	cmp	r1, #1
   2a898:	movweq	r0, #9580	; 0x256c
   2a89c:	movteq	r0, #4
   2a8a0:	beq	29a20 <__assert_fail@plt+0x1651c>
   2a8a4:	b	2a640 <__assert_fail@plt+0x1713c>
   2a8a8:	ldrb	r7, [r5, #16]
   2a8ac:	cmp	r7, #0
   2a8b0:	bne	2a880 <__assert_fail@plt+0x1737c>
   2a8b4:	movw	r1, #9884	; 0x269c
   2a8b8:	movt	r1, #4
   2a8bc:	mov	r0, r7
   2a8c0:	mov	r2, #5
   2a8c4:	bl	12d84 <dcgettext@plt>
   2a8c8:	mov	r8, r0
   2a8cc:	ldr	r0, [sp, #56]	; 0x38
   2a8d0:	bl	12f28 <dwarf_dieoffset@plt>
   2a8d4:	mov	r4, r0
   2a8d8:	mvn	r0, #0
   2a8dc:	mov	r5, r1
   2a8e0:	bl	13078 <dwarf_errmsg@plt>
   2a8e4:	strd	r4, [sp]
   2a8e8:	mov	r2, r8
   2a8ec:	mov	r1, r7
   2a8f0:	str	r0, [sp, #8]
   2a8f4:	mov	r0, r7
   2a8f8:	bl	12f70 <error@plt>
   2a8fc:	mov	r0, #1
   2a900:	b	29460 <__assert_fail@plt+0x15f5c>
   2a904:	mov	r2, #5
   2a908:	movw	r1, #10560	; 0x2940
   2a90c:	movt	r1, #4
   2a910:	str	ip, [sp, #40]	; 0x28
   2a914:	bl	12d84 <dcgettext@plt>
   2a918:	movw	fp, #8172	; 0x1fec
   2a91c:	movt	fp, #4
   2a920:	str	fp, [sp, #36]	; 0x24
   2a924:	mov	r2, r0
   2a928:	mvn	r0, #0
   2a92c:	str	r2, [sp, #44]	; 0x2c
   2a930:	bl	13078 <dwarf_errmsg@plt>
   2a934:	ldr	ip, [sp, #40]	; 0x28
   2a938:	ldr	r2, [sp, #44]	; 0x2c
   2a93c:	mov	r1, ip
   2a940:	mov	r3, r0
   2a944:	mov	r0, ip
   2a948:	bl	12f70 <error@plt>
   2a94c:	b	2a148 <__assert_fail@plt+0x16c44>
   2a950:	movw	r0, #9736	; 0x2608
   2a954:	movt	r0, #4
   2a958:	b	29a20 <__assert_fail@plt+0x1651c>
   2a95c:	movw	r0, #9800	; 0x2648
   2a960:	movt	r0, #4
   2a964:	b	29a20 <__assert_fail@plt+0x1651c>
   2a968:	movw	r0, #9824	; 0x2660
   2a96c:	movt	r0, #4
   2a970:	b	29a20 <__assert_fail@plt+0x1651c>
   2a974:	movw	r0, #9792	; 0x2640
   2a978:	movt	r0, #4
   2a97c:	b	29a20 <__assert_fail@plt+0x1651c>
   2a980:	movw	r0, #9696	; 0x25e0
   2a984:	movt	r0, #4
   2a988:	b	29a20 <__assert_fail@plt+0x1651c>
   2a98c:	movw	r0, #9828	; 0x2664
   2a990:	movt	r0, #4
   2a994:	b	29a20 <__assert_fail@plt+0x1651c>
   2a998:	movw	r0, #9664	; 0x25c0
   2a99c:	movt	r0, #4
   2a9a0:	b	29a20 <__assert_fail@plt+0x1651c>
   2a9a4:	movw	r0, #9672	; 0x25c8
   2a9a8:	movt	r0, #4
   2a9ac:	b	29a20 <__assert_fail@plt+0x1651c>
   2a9b0:	movw	r0, #9872	; 0x2690
   2a9b4:	movt	r0, #4
   2a9b8:	b	29a20 <__assert_fail@plt+0x1651c>
   2a9bc:	movw	r0, #9744	; 0x2610
   2a9c0:	movt	r0, #4
   2a9c4:	b	29a20 <__assert_fail@plt+0x1651c>
   2a9c8:	movw	r0, #27240	; 0x6a68
   2a9cc:	movt	r0, #4
   2a9d0:	b	29a20 <__assert_fail@plt+0x1651c>
   2a9d4:	movw	r0, #9576	; 0x2568
   2a9d8:	movt	r0, #4
   2a9dc:	b	29a20 <__assert_fail@plt+0x1651c>
   2a9e0:	movw	r0, #9584	; 0x2570
   2a9e4:	movt	r0, #4
   2a9e8:	b	29a20 <__assert_fail@plt+0x1651c>
   2a9ec:	movw	r0, #9816	; 0x2658
   2a9f0:	movt	r0, #4
   2a9f4:	b	29a20 <__assert_fail@plt+0x1651c>
   2a9f8:	movw	r0, #9568	; 0x2560
   2a9fc:	movt	r0, #4
   2aa00:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa04:	movw	r0, #9684	; 0x25d4
   2aa08:	movt	r0, #4
   2aa0c:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa10:	movw	r0, #9848	; 0x2678
   2aa14:	movt	r0, #4
   2aa18:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa1c:	movw	r0, #9732	; 0x2604
   2aa20:	movt	r0, #4
   2aa24:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa28:	movw	r0, #9840	; 0x2670
   2aa2c:	movt	r0, #4
   2aa30:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa34:	movw	r0, #9648	; 0x25b0
   2aa38:	movt	r0, #4
   2aa3c:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa40:	movw	r0, #9656	; 0x25b8
   2aa44:	movt	r0, #4
   2aa48:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa4c:	movw	r0, #9588	; 0x2574
   2aa50:	movt	r0, #4
   2aa54:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa58:	movw	r1, #9928	; 0x26c8
   2aa5c:	mov	r0, r7
   2aa60:	movt	r1, #4
   2aa64:	b	2a8c0 <__assert_fail@plt+0x173bc>
   2aa68:	movw	r0, #9720	; 0x25f8
   2aa6c:	movt	r0, #4
   2aa70:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa74:	movw	r0, #9784	; 0x2638
   2aa78:	movt	r0, #4
   2aa7c:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa80:	movw	r0, #9600	; 0x2580
   2aa84:	movt	r0, #4
   2aa88:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa8c:	movw	r0, #9616	; 0x2590
   2aa90:	movt	r0, #4
   2aa94:	b	29a20 <__assert_fail@plt+0x1651c>
   2aa98:	movw	r0, #9768	; 0x2628
   2aa9c:	movt	r0, #4
   2aaa0:	b	29a20 <__assert_fail@plt+0x1651c>
   2aaa4:	movw	r0, #23012	; 0x59e4
   2aaa8:	movt	r0, #4
   2aaac:	b	29a20 <__assert_fail@plt+0x1651c>
   2aab0:	movw	r0, #9552	; 0x2550
   2aab4:	movt	r0, #4
   2aab8:	b	29a20 <__assert_fail@plt+0x1651c>
   2aabc:	movw	r0, #26964	; 0x6954
   2aac0:	movt	r0, #4
   2aac4:	b	29a20 <__assert_fail@plt+0x1651c>
   2aac8:	mov	r0, #0
   2aacc:	b	29df0 <__assert_fail@plt+0x168ec>
   2aad0:	ldr	ip, [r3, #4]
   2aad4:	ldr	r2, [r3]
   2aad8:	rev	ip, ip
   2aadc:	rev	r3, r2
   2aae0:	b	295e0 <__assert_fail@plt+0x160dc>
   2aae4:	mov	r2, #5
   2aae8:	movw	r1, #10508	; 0x290c
   2aaec:	movt	r1, #4
   2aaf0:	bl	12d84 <dcgettext@plt>
   2aaf4:	ldrd	r2, [sp, #64]	; 0x40
   2aaf8:	strd	r2, [sp, #48]	; 0x30
   2aafc:	mov	sl, r0
   2ab00:	mvn	r0, #0
   2ab04:	bl	13078 <dwarf_errmsg@plt>
   2ab08:	mov	r2, sl
   2ab0c:	ldrd	sl, [sp, #48]	; 0x30
   2ab10:	strd	sl, [sp]
   2ab14:	str	r0, [sp, #8]
   2ab18:	ldr	r0, [sp, #36]	; 0x24
   2ab1c:	mov	r1, r0
   2ab20:	bl	12f70 <error@plt>
   2ab24:	b	2a7e8 <__assert_fail@plt+0x172e4>
   2ab28:	ldr	r3, [r5, #32]
   2ab2c:	ldrh	r2, [r3, #26]
   2ab30:	cmp	r2, #4
   2ab34:	bls	29ef8 <__assert_fail@plt+0x169f4>
   2ab38:	b	2a520 <__assert_fail@plt+0x1701c>
   2ab3c:	ldr	r3, [r5, #32]
   2ab40:	ldrh	r2, [r3, #26]
   2ab44:	cmp	r2, #4
   2ab48:	bls	29ef8 <__assert_fail@plt+0x169f4>
   2ab4c:	b	29f2c <__assert_fail@plt+0x16a28>
   2ab50:	ldrdeq	r9, [r5], -ip
   2ab54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ab58:	sub	sp, sp, #60	; 0x3c
   2ab5c:	mov	r2, #5
   2ab60:	mov	r4, r1
   2ab64:	str	r0, [sp, #32]
   2ab68:	movw	r1, #10760	; 0x2a08
   2ab6c:	mov	r0, #0
   2ab70:	movt	r1, #4
   2ab74:	mov	r7, r3
   2ab78:	ldr	r6, [sp, #96]	; 0x60
   2ab7c:	bl	12d84 <dcgettext@plt>
   2ab80:	mov	r9, r0
   2ab84:	mov	r0, r7
   2ab88:	bl	133d8 <elf_ndxscn@plt>
   2ab8c:	mov	r1, r6
   2ab90:	mov	r8, r0
   2ab94:	add	r0, r4, #16
   2ab98:	bl	1870c <__assert_fail@plt+0x5208>
   2ab9c:	ldrd	r4, [r6, #24]
   2aba0:	mov	r2, r8
   2aba4:	mov	r1, r9
   2aba8:	strd	r4, [sp]
   2abac:	ldrd	r4, [r6, #32]
   2abb0:	strd	r4, [sp, #8]
   2abb4:	mov	r3, r0
   2abb8:	mov	r0, #1
   2abbc:	bl	13204 <__printf_chk@plt>
   2abc0:	mov	r0, r7
   2abc4:	mov	r1, #0
   2abc8:	bl	131bc <elf_rawdata@plt>
   2abcc:	subs	r8, r0, #0
   2abd0:	beq	2b2c0 <__assert_fail@plt+0x17dbc>
   2abd4:	ldr	r7, [r8]
   2abd8:	ldr	r4, [r8, #12]
   2abdc:	add	r3, r7, #4
   2abe0:	add	r4, r7, r4
   2abe4:	cmp	r4, r3
   2abe8:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2abec:	mov	r2, #5
   2abf0:	movw	r1, #10836	; 0x2a54
   2abf4:	mov	r0, #0
   2abf8:	movt	r1, #4
   2abfc:	ldr	r5, [r7]
   2ac00:	bl	12d84 <dcgettext@plt>
   2ac04:	mov	r2, r5
   2ac08:	sub	r5, r5, #4
   2ac0c:	mov	r1, r0
   2ac10:	mov	r0, #1
   2ac14:	bl	13204 <__printf_chk@plt>
   2ac18:	cmp	r5, #4
   2ac1c:	bhi	2ad74 <__assert_fail@plt+0x17870>
   2ac20:	add	r3, r7, #8
   2ac24:	cmp	r4, r3
   2ac28:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2ac2c:	mov	r2, #5
   2ac30:	movw	r1, #10860	; 0x2a6c
   2ac34:	mov	r0, #0
   2ac38:	movt	r1, #4
   2ac3c:	ldr	r5, [r7, #4]
   2ac40:	bl	12d84 <dcgettext@plt>
   2ac44:	mov	r2, r5
   2ac48:	mov	r1, r0
   2ac4c:	mov	r0, #1
   2ac50:	bl	13204 <__printf_chk@plt>
   2ac54:	add	r3, r7, #12
   2ac58:	cmp	r4, r3
   2ac5c:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2ac60:	mov	r2, #5
   2ac64:	movw	r1, #10884	; 0x2a84
   2ac68:	mov	r0, #0
   2ac6c:	movt	r1, #4
   2ac70:	ldr	r6, [r7, #8]
   2ac74:	bl	12d84 <dcgettext@plt>
   2ac78:	mov	r2, r6
   2ac7c:	mov	r1, r0
   2ac80:	mov	r0, #1
   2ac84:	bl	13204 <__printf_chk@plt>
   2ac88:	add	r3, r7, #16
   2ac8c:	cmp	r4, r3
   2ac90:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2ac94:	ldr	r0, [r7, #12]
   2ac98:	mov	r2, #5
   2ac9c:	movw	r1, #10908	; 0x2a9c
   2aca0:	movt	r1, #4
   2aca4:	str	r0, [sp, #24]
   2aca8:	mov	r0, #0
   2acac:	bl	12d84 <dcgettext@plt>
   2acb0:	ldr	r2, [sp, #24]
   2acb4:	mov	r1, r0
   2acb8:	mov	r0, #1
   2acbc:	bl	13204 <__printf_chk@plt>
   2acc0:	add	r3, r7, #20
   2acc4:	cmp	r4, r3
   2acc8:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2accc:	ldr	r1, [r7, #16]
   2acd0:	mov	r2, #5
   2acd4:	mov	r0, #0
   2acd8:	str	r1, [sp, #28]
   2acdc:	movw	r1, #10932	; 0x2ab4
   2ace0:	movt	r1, #4
   2ace4:	bl	12d84 <dcgettext@plt>
   2ace8:	ldr	r2, [sp, #28]
   2acec:	mov	r1, r0
   2acf0:	mov	r0, #1
   2acf4:	bl	13204 <__printf_chk@plt>
   2acf8:	add	r3, r7, #24
   2acfc:	cmp	r4, r3
   2ad00:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2ad04:	mov	r2, #5
   2ad08:	movw	r1, #10956	; 0x2acc
   2ad0c:	mov	r0, #0
   2ad10:	movt	r1, #4
   2ad14:	ldr	sl, [r7, #20]
   2ad18:	bl	12d84 <dcgettext@plt>
   2ad1c:	mov	r2, sl
   2ad20:	mov	r1, r0
   2ad24:	mov	r0, #1
   2ad28:	bl	13204 <__printf_chk@plt>
   2ad2c:	ldr	r7, [r8]
   2ad30:	rsb	r3, r7, r4
   2ad34:	cmp	r3, sl
   2ad38:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2ad3c:	ldr	r3, [r8, #12]
   2ad40:	cmp	r3, r6
   2ad44:	bhi	2ad9c <__assert_fail@plt+0x17898>
   2ad48:	mov	r2, #5
   2ad4c:	movw	r1, #2292	; 0x8f4
   2ad50:	mov	r0, #0
   2ad54:	movt	r1, #4
   2ad58:	bl	12d84 <dcgettext@plt>
   2ad5c:	mov	r2, r0
   2ad60:	mov	r0, #0
   2ad64:	mov	r1, r0
   2ad68:	add	sp, sp, #60	; 0x3c
   2ad6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad70:	b	12f70 <error@plt>
   2ad74:	mov	r2, #5
   2ad78:	movw	r1, #8344	; 0x2098
   2ad7c:	mov	r0, #0
   2ad80:	movt	r1, #4
   2ad84:	bl	12d84 <dcgettext@plt>
   2ad88:	mov	r1, r0
   2ad8c:	mov	r0, #1
   2ad90:	add	sp, sp, #60	; 0x3c
   2ad94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad98:	b	13204 <__printf_chk@plt>
   2ad9c:	rsb	r3, r5, r6
   2ada0:	movw	r1, #10980	; 0x2ae4
   2ada4:	cmp	r3, #0
   2ada8:	add	r2, r3, #15
   2adac:	movt	r1, #4
   2adb0:	mov	r0, #0
   2adb4:	movlt	r3, r2
   2adb8:	mov	r2, #5
   2adbc:	asr	fp, r3, #4
   2adc0:	bl	12d84 <dcgettext@plt>
   2adc4:	add	r7, r7, r5
   2adc8:	mov	r2, r5
   2adcc:	mov	r3, fp
   2add0:	mov	r1, r0
   2add4:	mov	r0, #1
   2add8:	bl	13204 <__printf_chk@plt>
   2addc:	rsb	r3, r7, r4
   2ade0:	cmp	r3, #15
   2ade4:	ble	2ae48 <__assert_fail@plt+0x17944>
   2ade8:	cmp	fp, #0
   2adec:	beq	2ae48 <__assert_fail@plt+0x17944>
   2adf0:	mov	r5, #0
   2adf4:	b	2ae00 <__assert_fail@plt+0x178fc>
   2adf8:	cmp	fp, r5
   2adfc:	beq	2ae48 <__assert_fail@plt+0x17944>
   2ae00:	ldr	r0, [r7]
   2ae04:	movw	r1, #11028	; 0x2b14
   2ae08:	ldr	r2, [r7, #4]
   2ae0c:	movt	r1, #4
   2ae10:	ldr	ip, [r7, #8]
   2ae14:	add	r7, r7, #16
   2ae18:	ldr	r3, [r7, #-4]
   2ae1c:	str	r0, [sp]
   2ae20:	mov	r0, #1
   2ae24:	str	r2, [sp, #4]
   2ae28:	mov	r2, r5
   2ae2c:	str	r3, [sp, #12]
   2ae30:	add	r5, r5, r0
   2ae34:	str	ip, [sp, #8]
   2ae38:	bl	13204 <__printf_chk@plt>
   2ae3c:	rsb	r3, r7, r4
   2ae40:	cmp	r3, #15
   2ae44:	bgt	2adf8 <__assert_fail@plt+0x178f4>
   2ae48:	ldr	r3, [r8, #12]
   2ae4c:	ldr	r2, [sp, #24]
   2ae50:	ldr	r5, [r8]
   2ae54:	cmp	r3, r2
   2ae58:	bls	2ad48 <__assert_fail@plt+0x17844>
   2ae5c:	ldr	r3, [sp, #24]
   2ae60:	movw	r2, #43691	; 0xaaab
   2ae64:	movt	r2, #10922	; 0x2aaa
   2ae68:	movw	r1, #11068	; 0x2b3c
   2ae6c:	rsb	r7, r6, r3
   2ae70:	movt	r1, #4
   2ae74:	mov	r0, #0
   2ae78:	add	r5, r5, r6
   2ae7c:	asr	r3, r7, #31
   2ae80:	smull	lr, r7, r2, r7
   2ae84:	mov	r2, #5
   2ae88:	rsb	r7, r3, r7, asr #2
   2ae8c:	bl	12d84 <dcgettext@plt>
   2ae90:	mov	r2, r6
   2ae94:	mov	r3, r7
   2ae98:	mov	r1, r0
   2ae9c:	mov	r0, #1
   2aea0:	bl	13204 <__printf_chk@plt>
   2aea4:	rsb	r3, r5, r4
   2aea8:	cmp	r3, #23
   2aeac:	ble	2af20 <__assert_fail@plt+0x17a1c>
   2aeb0:	cmp	r7, #0
   2aeb4:	beq	2af20 <__assert_fail@plt+0x17a1c>
   2aeb8:	mov	r6, #0
   2aebc:	b	2aec8 <__assert_fail@plt+0x179c4>
   2aec0:	cmp	r7, r6
   2aec4:	beq	2af20 <__assert_fail@plt+0x17a1c>
   2aec8:	ldr	r0, [r5]
   2aecc:	movw	r1, #11116	; 0x2b6c
   2aed0:	ldr	r2, [r5, #4]
   2aed4:	movt	r1, #4
   2aed8:	ldr	r9, [r5, #8]
   2aedc:	add	r5, r5, #24
   2aee0:	ldr	lr, [r5, #-12]
   2aee4:	ldr	ip, [r5, #-8]
   2aee8:	ldr	r3, [r5, #-4]
   2aeec:	str	r0, [sp]
   2aef0:	mov	r0, #1
   2aef4:	str	r2, [sp, #4]
   2aef8:	mov	r2, r6
   2aefc:	str	r3, [sp, #20]
   2af00:	add	r6, r6, r0
   2af04:	str	r9, [sp, #8]
   2af08:	str	lr, [sp, #12]
   2af0c:	str	ip, [sp, #16]
   2af10:	bl	13204 <__printf_chk@plt>
   2af14:	rsb	r3, r5, r4
   2af18:	cmp	r3, #23
   2af1c:	bgt	2aec0 <__assert_fail@plt+0x179bc>
   2af20:	ldr	r3, [r8, #12]
   2af24:	ldr	r0, [sp, #28]
   2af28:	ldr	r5, [r8]
   2af2c:	cmp	r3, r0
   2af30:	bls	2ad48 <__assert_fail@plt+0x17844>
   2af34:	ldr	lr, [sp, #24]
   2af38:	movw	r3, #26215	; 0x6667
   2af3c:	ldr	r1, [sp, #28]
   2af40:	movt	r3, #26214	; 0x6666
   2af44:	add	r5, r5, lr
   2af48:	rsb	r2, lr, r1
   2af4c:	movw	r1, #11184	; 0x2bb0
   2af50:	movt	r1, #4
   2af54:	smull	r0, r3, r3, r2
   2af58:	asr	ip, r2, #31
   2af5c:	mov	r0, #0
   2af60:	mov	r2, #5
   2af64:	rsb	ip, ip, r3, asr #3
   2af68:	str	ip, [sp, #36]	; 0x24
   2af6c:	bl	12d84 <dcgettext@plt>
   2af70:	ldr	r3, [sp, #36]	; 0x24
   2af74:	ldr	r2, [sp, #24]
   2af78:	mov	r1, r0
   2af7c:	mov	r0, #1
   2af80:	bl	13204 <__printf_chk@plt>
   2af84:	rsb	r3, r5, r4
   2af88:	cmp	r3, #19
   2af8c:	ble	2b068 <__assert_fail@plt+0x17b64>
   2af90:	ldr	r1, [sp, #36]	; 0x24
   2af94:	cmp	r1, #0
   2af98:	beq	2b068 <__assert_fail@plt+0x17b64>
   2af9c:	str	sl, [sp, #52]	; 0x34
   2afa0:	mov	r9, #0
   2afa4:	str	r8, [sp, #44]	; 0x2c
   2afa8:	str	r4, [sp, #40]	; 0x28
   2afac:	str	fp, [sp, #48]	; 0x30
   2afb0:	ldr	sl, [sp, #32]
   2afb4:	b	2afc4 <__assert_fail@plt+0x17ac0>
   2afb8:	ldr	r3, [sp, #36]	; 0x24
   2afbc:	cmp	r3, r9
   2afc0:	beq	2b2ac <__assert_fail@plt+0x17da8>
   2afc4:	ldr	r4, [r5]
   2afc8:	mov	r2, r9
   2afcc:	ldr	r8, [r5, #4]
   2afd0:	movw	r1, #11236	; 0x2be4
   2afd4:	mov	r0, #1
   2afd8:	movt	r1, #4
   2afdc:	ldr	r6, [r5, #8]
   2afe0:	add	r5, r5, #20
   2afe4:	ldr	r7, [r5, #-8]
   2afe8:	ldr	fp, [r5, #-4]
   2afec:	bl	13204 <__printf_chk@plt>
   2aff0:	mov	r2, r4
   2aff4:	mov	r3, r8
   2aff8:	mov	r0, sl
   2affc:	mov	r1, #8
   2b000:	str	r4, [sp]
   2b004:	str	r8, [sp, #4]
   2b008:	bl	27164 <__assert_fail@plt+0x13c60>
   2b00c:	movw	r1, #11248	; 0x2bf0
   2b010:	mov	r0, #1
   2b014:	movt	r1, #4
   2b018:	bl	13204 <__printf_chk@plt>
   2b01c:	subs	r2, r6, #1
   2b020:	sbc	r3, r7, #0
   2b024:	mov	r0, sl
   2b028:	mov	r1, #8
   2b02c:	strd	r6, [sp]
   2b030:	bl	27164 <__assert_fail@plt+0x13c60>
   2b034:	mov	r2, fp
   2b038:	mov	r0, #1
   2b03c:	movw	r1, #11252	; 0x2bf4
   2b040:	movt	r1, #4
   2b044:	add	r9, r9, r0
   2b048:	bl	13204 <__printf_chk@plt>
   2b04c:	ldr	r2, [sp, #40]	; 0x28
   2b050:	rsb	r3, r5, r2
   2b054:	cmp	r3, #19
   2b058:	bgt	2afb8 <__assert_fail@plt+0x17ab4>
   2b05c:	add	r4, sp, #40	; 0x28
   2b060:	ldr	sl, [sp, #52]	; 0x34
   2b064:	ldm	r4, {r4, r8, fp}
   2b068:	ldr	r3, [r8, #12]
   2b06c:	ldr	r8, [r8]
   2b070:	cmp	r3, sl
   2b074:	bls	2ad48 <__assert_fail@plt+0x17844>
   2b078:	ldr	lr, [sp, #28]
   2b07c:	add	sl, r8, sl
   2b080:	movw	r1, #11272	; 0x2c08
   2b084:	mov	r0, #0
   2b088:	add	r8, r8, lr
   2b08c:	movt	r1, #4
   2b090:	rsb	r2, r8, sl
   2b094:	str	sl, [sp, #32]
   2b098:	cmp	r2, #0
   2b09c:	add	r3, r2, #7
   2b0a0:	movge	r3, r2
   2b0a4:	mov	r2, #5
   2b0a8:	asr	r3, r3, #3
   2b0ac:	str	r3, [sp, #28]
   2b0b0:	bl	12d84 <dcgettext@plt>
   2b0b4:	ldr	r3, [sp, #28]
   2b0b8:	ldr	r2, [sp, #24]
   2b0bc:	mov	r1, r0
   2b0c0:	mov	r0, #1
   2b0c4:	bl	13204 <__printf_chk@plt>
   2b0c8:	rsb	r3, r8, r4
   2b0cc:	cmp	r3, #7
   2b0d0:	ble	2b28c <__assert_fail@plt+0x17d88>
   2b0d4:	ldr	r0, [sp, #28]
   2b0d8:	cmp	r0, #0
   2b0dc:	beq	2b28c <__assert_fail@plt+0x17d88>
   2b0e0:	mov	r9, #0
   2b0e4:	ldr	r2, [r8]
   2b0e8:	add	r8, r8, #8
   2b0ec:	ldr	r5, [r8, #-4]
   2b0f0:	orrs	r1, r5, r2
   2b0f4:	beq	2b270 <__assert_fail@plt+0x17d6c>
   2b0f8:	ldr	r3, [sp, #32]
   2b0fc:	rsb	r6, r3, r4
   2b100:	add	r7, r3, r2
   2b104:	cmp	r6, r2
   2b108:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2b10c:	mov	r0, r7
   2b110:	mov	r1, #0
   2b114:	rsb	r2, r7, r4
   2b118:	bl	13270 <memchr@plt>
   2b11c:	cmp	r0, #0
   2b120:	beq	2ad48 <__assert_fail@plt+0x17844>
   2b124:	mov	r3, r7
   2b128:	movw	r1, #11324	; 0x2c3c
   2b12c:	mov	r0, #1
   2b130:	movt	r1, #4
   2b134:	mov	r2, r9
   2b138:	bl	13204 <__printf_chk@plt>
   2b13c:	ldr	lr, [sp, #32]
   2b140:	cmp	r6, r5
   2b144:	add	r3, lr, r5
   2b148:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2b14c:	ldr	r5, [r3]
   2b150:	sub	r5, r5, #1
   2b154:	b	2b178 <__assert_fail@plt+0x17c74>
   2b158:	cmp	r5, #0
   2b15c:	beq	2b170 <__assert_fail@plt+0x17c6c>
   2b160:	movw	r1, #8432	; 0x20f0
   2b164:	mov	r0, #1
   2b168:	movt	r1, #4
   2b16c:	bl	13204 <__printf_chk@plt>
   2b170:	sub	r5, r5, #1
   2b174:	mov	r3, r6
   2b178:	cmn	r5, #1
   2b17c:	beq	2b268 <__assert_fail@plt+0x17d64>
   2b180:	add	r6, r3, #4
   2b184:	add	r2, r6, #4
   2b188:	cmp	r4, r2
   2b18c:	bcc	2ad48 <__assert_fail@plt+0x17844>
   2b190:	ldr	sl, [r3, #4]
   2b194:	sub	r1, fp, #1
   2b198:	bic	r2, sl, #-16777216	; 0xff000000
   2b19c:	ubfx	r7, sl, #28, #3
   2b1a0:	cmp	r2, r1
   2b1a4:	rsbhi	r2, fp, r2
   2b1a8:	movwhi	r1, #11352	; 0x2c58
   2b1ac:	movwls	r1, #26624	; 0x6800
   2b1b0:	movhi	r0, #1
   2b1b4:	movthi	r1, #4
   2b1b8:	movls	r0, #1
   2b1bc:	movtls	r1, #4
   2b1c0:	bl	13204 <__printf_chk@plt>
   2b1c4:	cmp	r7, #0
   2b1c8:	beq	2b158 <__assert_fail@plt+0x17c54>
   2b1cc:	movw	r1, #8416	; 0x20e0
   2b1d0:	mov	r0, #1
   2b1d4:	movt	r1, #4
   2b1d8:	bl	13204 <__printf_chk@plt>
   2b1dc:	sub	r2, r7, #1
   2b1e0:	cmp	r2, #3
   2b1e4:	ldrls	pc, [pc, r2, lsl #2]
   2b1e8:	b	2b294 <__assert_fail@plt+0x17d90>
   2b1ec:	andeq	fp, r2, r4, asr r2
   2b1f0:	andeq	fp, r2, r0, asr #4
   2b1f4:	andeq	fp, r2, ip, lsr #4
   2b1f8:	strdeq	fp, [r2], -ip
   2b1fc:	movw	r1, #11368	; 0x2c68
   2b200:	mov	r0, #1
   2b204:	movt	r1, #4
   2b208:	bl	13204 <__printf_chk@plt>
   2b20c:	cmp	sl, #0
   2b210:	movw	r1, #11392	; 0x2c80
   2b214:	mov	r0, #1
   2b218:	movt	r1, #4
   2b21c:	movge	r2, #71	; 0x47
   2b220:	movlt	r2, #83	; 0x53
   2b224:	bl	13204 <__printf_chk@plt>
   2b228:	b	2b158 <__assert_fail@plt+0x17c54>
   2b22c:	movw	r1, #11360	; 0x2c60
   2b230:	mov	r0, #1
   2b234:	movt	r1, #4
   2b238:	bl	13204 <__printf_chk@plt>
   2b23c:	b	2b20c <__assert_fail@plt+0x17d08>
   2b240:	movw	r1, #11356	; 0x2c5c
   2b244:	mov	r0, #1
   2b248:	movt	r1, #4
   2b24c:	bl	13204 <__printf_chk@plt>
   2b250:	b	2b20c <__assert_fail@plt+0x17d08>
   2b254:	movw	r1, #58764	; 0xe58c
   2b258:	mov	r0, #1
   2b25c:	movt	r1, #3
   2b260:	bl	13204 <__printf_chk@plt>
   2b264:	b	2b20c <__assert_fail@plt+0x17d08>
   2b268:	mov	r0, #10
   2b26c:	bl	131b0 <putchar@plt>
   2b270:	rsb	r3, r8, r4
   2b274:	add	r9, r9, #1
   2b278:	cmp	r3, #7
   2b27c:	ble	2b28c <__assert_fail@plt+0x17d88>
   2b280:	ldr	r0, [sp, #28]
   2b284:	cmp	r0, r9
   2b288:	bne	2b0e4 <__assert_fail@plt+0x17be0>
   2b28c:	add	sp, sp, #60	; 0x3c
   2b290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b294:	mov	r2, r7
   2b298:	movw	r1, #11376	; 0x2c70
   2b29c:	mov	r0, #1
   2b2a0:	movt	r1, #4
   2b2a4:	bl	13204 <__printf_chk@plt>
   2b2a8:	b	2b20c <__assert_fail@plt+0x17d08>
   2b2ac:	ldr	r8, [sp, #44]	; 0x2c
   2b2b0:	mov	r4, r2
   2b2b4:	ldr	fp, [sp, #48]	; 0x30
   2b2b8:	ldr	sl, [sp, #52]	; 0x34
   2b2bc:	b	2b068 <__assert_fail@plt+0x17b64>
   2b2c0:	mov	r2, #5
   2b2c4:	movw	r1, #54876	; 0xd65c
   2b2c8:	movt	r1, #3
   2b2cc:	bl	12d84 <dcgettext@plt>
   2b2d0:	mov	r4, r0
   2b2d4:	mvn	r0, #0
   2b2d8:	bl	130a8 <elf_errmsg@plt>
   2b2dc:	mov	r2, r4
   2b2e0:	movw	r3, #10824	; 0x2a48
   2b2e4:	mov	r1, r8
   2b2e8:	movt	r3, #4
   2b2ec:	str	r0, [sp, #96]	; 0x60
   2b2f0:	mov	r0, r8
   2b2f4:	add	sp, sp, #60	; 0x3c
   2b2f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2fc:	b	12f70 <error@plt>
   2b300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b304:	movw	r4, #37688	; 0x9338
   2b308:	sub	sp, sp, #284	; 0x11c
   2b30c:	movt	r4, #5
   2b310:	mov	r2, #5
   2b314:	add	r1, r1, #16
   2b318:	ldr	ip, [r4]
   2b31c:	ldr	r5, [sp, #320]	; 0x140
   2b320:	str	r0, [sp, #80]	; 0x50
   2b324:	mov	r0, #0
   2b328:	str	r1, [sp, #100]	; 0x64
   2b32c:	movw	r1, #60928	; 0xee00
   2b330:	movt	r1, #3
   2b334:	str	r3, [sp, #96]	; 0x60
   2b338:	str	ip, [sp, #276]	; 0x114
   2b33c:	str	r4, [sp, #76]	; 0x4c
   2b340:	str	r5, [sp, #84]	; 0x54
   2b344:	ldr	sl, [sp, #324]	; 0x144
   2b348:	bl	12d84 <dcgettext@plt>
   2b34c:	mov	r5, r0
   2b350:	ldr	r0, [sp, #96]	; 0x60
   2b354:	bl	133d8 <elf_ndxscn@plt>
   2b358:	ldr	r1, [sp, #84]	; 0x54
   2b35c:	mov	r4, r0
   2b360:	ldr	r0, [sp, #100]	; 0x64
   2b364:	bl	1870c <__assert_fail@plt+0x5208>
   2b368:	ldr	r8, [sp, #84]	; 0x54
   2b36c:	mov	r1, r5
   2b370:	mov	r2, r4
   2b374:	ldrd	r6, [r8, #24]
   2b378:	strd	r6, [sp]
   2b37c:	mov	r3, r0
   2b380:	mov	r0, #1
   2b384:	bl	13204 <__printf_chk@plt>
   2b388:	ldr	r9, [sl, #76]	; 0x4c
   2b38c:	cmp	r9, #0
   2b390:	str	r9, [sp, #56]	; 0x38
   2b394:	beq	2c250 <__assert_fail@plt+0x18d4c>
   2b398:	movw	ip, #37712	; 0x9350
   2b39c:	movt	ip, #5
   2b3a0:	str	ip, [sp, #68]	; 0x44
   2b3a4:	ldr	r1, [ip, #164]	; 0xa4
   2b3a8:	cmp	r1, #0
   2b3ac:	bne	2bfa0 <__assert_fail@plt+0x18a9c>
   2b3b0:	ldr	r4, [sp, #56]	; 0x38
   2b3b4:	mov	r2, #0
   2b3b8:	ldr	fp, [r4]
   2b3bc:	ldr	r3, [r4, #12]
   2b3c0:	str	r2, [sp, #232]	; 0xe8
   2b3c4:	add	r3, fp, r3
   2b3c8:	str	r3, [sp, #48]	; 0x30
   2b3cc:	cmp	fp, r3
   2b3d0:	bcs	2bf84 <__assert_fail@plt+0x18a80>
   2b3d4:	sub	r5, r3, #4
   2b3d8:	str	r5, [sp, #64]	; 0x40
   2b3dc:	cmp	fp, r5
   2b3e0:	bhi	2bf3c <__assert_fail@plt+0x18a38>
   2b3e4:	ldr	r9, [sp, #48]	; 0x30
   2b3e8:	mov	r6, fp
   2b3ec:	sub	r9, r9, #8
   2b3f0:	str	r9, [sp, #60]	; 0x3c
   2b3f4:	b	2b468 <__assert_fail@plt+0x17f64>
   2b3f8:	movw	r1, #61284	; 0xef64
   2b3fc:	movt	r1, #3
   2b400:	mov	r0, #0
   2b404:	mov	r2, #5
   2b408:	bl	12d84 <dcgettext@plt>
   2b40c:	mov	r2, r0
   2b410:	mov	r0, #0
   2b414:	mov	r1, r0
   2b418:	bl	12f70 <error@plt>
   2b41c:	cmp	fp, r6
   2b420:	beq	2b448 <__assert_fail@plt+0x17f44>
   2b424:	mov	r2, #5
   2b428:	movw	r1, #11996	; 0x2edc
   2b42c:	mov	r0, #0
   2b430:	movt	r1, #4
   2b434:	bl	12d84 <dcgettext@plt>
   2b438:	rsb	r2, r6, fp
   2b43c:	mov	r1, r0
   2b440:	mov	r0, #1
   2b444:	bl	13204 <__printf_chk@plt>
   2b448:	ldr	r4, [sp, #48]	; 0x30
   2b44c:	cmp	r4, fp
   2b450:	bls	2bf84 <__assert_fail@plt+0x18a80>
   2b454:	ldr	r6, [sp, #64]	; 0x40
   2b458:	cmp	fp, r6
   2b45c:	bhi	2bf3c <__assert_fail@plt+0x18a38>
   2b460:	ldr	r8, [sp, #56]	; 0x38
   2b464:	ldr	r6, [r8]
   2b468:	mov	r2, #5
   2b46c:	movw	r1, #11488	; 0x2ce0
   2b470:	mov	r0, #0
   2b474:	movt	r1, #4
   2b478:	bl	12d84 <dcgettext@plt>
   2b47c:	rsb	r6, r6, fp
   2b480:	asr	r5, r6, #31
   2b484:	mov	r2, r6
   2b488:	mov	r4, r6
   2b48c:	strd	r4, [sp, #40]	; 0x28
   2b490:	mov	r3, r5
   2b494:	mov	r1, r0
   2b498:	mov	r0, #1
   2b49c:	bl	13204 <__printf_chk@plt>
   2b4a0:	ldrb	r3, [sl, #84]	; 0x54
   2b4a4:	ldr	r4, [fp]
   2b4a8:	cmp	r3, #0
   2b4ac:	bne	2c2c0 <__assert_fail@plt+0x18dbc>
   2b4b0:	cmn	r4, #1
   2b4b4:	mov	r0, r4
   2b4b8:	mov	r1, #0
   2b4bc:	add	r9, fp, #4
   2b4c0:	strd	r0, [sp, #24]
   2b4c4:	movne	r8, #4
   2b4c8:	beq	2c2c8 <__assert_fail@plt+0x18dc4>
   2b4cc:	mov	r2, #5
   2b4d0:	movw	r1, #11516	; 0x2cfc
   2b4d4:	mov	r0, #0
   2b4d8:	movt	r1, #4
   2b4dc:	bl	12d84 <dcgettext@plt>
   2b4e0:	ldrd	r2, [sp, #24]
   2b4e4:	mov	r1, r0
   2b4e8:	mov	r0, #1
   2b4ec:	bl	13204 <__printf_chk@plt>
   2b4f0:	ldr	r6, [sp, #60]	; 0x3c
   2b4f4:	cmp	r9, r6
   2b4f8:	bhi	2bf3c <__assert_fail@plt+0x18a38>
   2b4fc:	ldrd	r4, [sp, #24]
   2b500:	cmp	r5, #0
   2b504:	cmpeq	r4, #7
   2b508:	bls	2bf3c <__assert_fail@plt+0x18a38>
   2b50c:	ldr	r5, [sp, #48]	; 0x30
   2b510:	rsb	r2, r9, r5
   2b514:	ldrd	r4, [sp, #24]
   2b518:	asr	r3, r2, #31
   2b51c:	cmp	r5, r3
   2b520:	cmpeq	r4, r2
   2b524:	bhi	2bf3c <__assert_fail@plt+0x18a38>
   2b528:	ldrb	r3, [sl, #84]	; 0x54
   2b52c:	movw	r1, #11540	; 0x2d14
   2b530:	mov	r0, #0
   2b534:	movt	r1, #4
   2b538:	cmp	r3, #0
   2b53c:	add	fp, r9, r4
   2b540:	add	r6, r9, #2
   2b544:	ldrhne	r3, [r9]
   2b548:	ldrheq	r7, [r9]
   2b54c:	lslne	r2, r3, #8
   2b550:	orrne	r3, r2, r3, lsr #8
   2b554:	mov	r2, #5
   2b558:	uxthne	r7, r3
   2b55c:	bl	12d84 <dcgettext@plt>
   2b560:	mov	r2, r7
   2b564:	mov	r1, r0
   2b568:	mov	r0, #1
   2b56c:	bl	13204 <__printf_chk@plt>
   2b570:	cmp	r7, #5
   2b574:	bne	2b3f8 <__assert_fail@plt+0x17ef4>
   2b578:	ldrb	r5, [r9, #2]
   2b57c:	mov	r2, r7
   2b580:	movw	r1, #11564	; 0x2d2c
   2b584:	mov	r0, #0
   2b588:	movt	r1, #4
   2b58c:	str	r5, [sp, #52]	; 0x34
   2b590:	bl	12d84 <dcgettext@plt>
   2b594:	ldr	r4, [sp, #52]	; 0x34
   2b598:	mov	r5, #0
   2b59c:	mov	r3, r5
   2b5a0:	uxtb	r4, r4
   2b5a4:	mov	r2, r4
   2b5a8:	mov	r1, r0
   2b5ac:	mov	r0, #1
   2b5b0:	bl	13204 <__printf_chk@plt>
   2b5b4:	ldr	r5, [sp, #52]	; 0x34
   2b5b8:	cmp	r5, #8
   2b5bc:	cmpne	r5, #4
   2b5c0:	moveq	ip, #0
   2b5c4:	movne	ip, #1
   2b5c8:	beq	2b5f8 <__assert_fail@plt+0x180f4>
   2b5cc:	mov	r2, r7
   2b5d0:	movw	r1, #11588	; 0x2d44
   2b5d4:	mov	r0, #0
   2b5d8:	movt	r1, #4
   2b5dc:	bl	12d84 <dcgettext@plt>
   2b5e0:	add	r6, r9, #3
   2b5e4:	mov	r2, r0
   2b5e8:	mov	r0, #0
   2b5ec:	mov	r1, r0
   2b5f0:	bl	12f70 <error@plt>
   2b5f4:	b	2b41c <__assert_fail@plt+0x17f18>
   2b5f8:	mov	r0, ip
   2b5fc:	mov	r2, r7
   2b600:	movw	r1, #11616	; 0x2d60
   2b604:	movt	r1, #4
   2b608:	ldrb	r9, [r6, #1]
   2b60c:	add	r4, r6, #2
   2b610:	str	ip, [sp, #36]	; 0x24
   2b614:	str	r4, [sp, #72]	; 0x48
   2b618:	bl	12d84 <dcgettext@plt>
   2b61c:	uxtb	r2, r9
   2b620:	mov	r3, #0
   2b624:	mov	r1, r0
   2b628:	mov	r0, #1
   2b62c:	bl	13204 <__printf_chk@plt>
   2b630:	tst	r9, #251	; 0xfb
   2b634:	ldr	ip, [sp, #36]	; 0x24
   2b638:	beq	2b674 <__assert_fail@plt+0x18170>
   2b63c:	cmp	r9, #8
   2b640:	beq	2b674 <__assert_fail@plt+0x18170>
   2b644:	mov	r2, r7
   2b648:	mov	r0, ip
   2b64c:	movw	r1, #11640	; 0x2d78
   2b650:	movt	r1, #4
   2b654:	bl	12d84 <dcgettext@plt>
   2b658:	ldr	ip, [sp, #36]	; 0x24
   2b65c:	ldr	r6, [sp, #72]	; 0x48
   2b660:	mov	r1, ip
   2b664:	mov	r2, r0
   2b668:	mov	r0, ip
   2b66c:	bl	12f70 <error@plt>
   2b670:	b	2b41c <__assert_fail@plt+0x17f18>
   2b674:	ldrb	r3, [sl, #84]	; 0x54
   2b678:	cmp	r3, #0
   2b67c:	ldreq	r7, [r6, #2]
   2b680:	bne	2c440 <__assert_fail@plt+0x18f3c>
   2b684:	mov	r2, #5
   2b688:	movw	r1, #11668	; 0x2d94
   2b68c:	mov	r0, #0
   2b690:	movt	r1, #4
   2b694:	bl	12d84 <dcgettext@plt>
   2b698:	mov	r5, #0
   2b69c:	mov	r3, r5
   2b6a0:	mov	r2, r7
   2b6a4:	mov	r4, r7
   2b6a8:	strd	r4, [sp, #88]	; 0x58
   2b6ac:	add	r9, sp, #236	; 0xec
   2b6b0:	add	r6, sp, #240	; 0xf0
   2b6b4:	mov	r1, r0
   2b6b8:	mov	r0, #1
   2b6bc:	bl	13204 <__printf_chk@plt>
   2b6c0:	ldrd	r4, [sp, #40]	; 0x28
   2b6c4:	ldr	r0, [pc, #4000]	; 2c66c <__assert_fail@plt+0x19168>
   2b6c8:	mov	ip, #0
   2b6cc:	strd	r4, [sp]
   2b6d0:	add	r1, r0, #8
   2b6d4:	ldr	r5, [sp, #56]	; 0x38
   2b6d8:	mov	r4, #0
   2b6dc:	ldr	r3, [r5]
   2b6e0:	mov	r5, #0
   2b6e4:	str	r9, [sp, #20]
   2b6e8:	rsb	r3, r3, fp
   2b6ec:	str	r6, [sp, #16]
   2b6f0:	strd	r4, [sp, #240]	; 0xf0
   2b6f4:	mov	r2, r3
   2b6f8:	asr	r3, r3, #31
   2b6fc:	strd	r2, [sp, #8]
   2b700:	add	r2, sp, #232	; 0xe8
   2b704:	str	ip, [sp, #236]	; 0xec
   2b708:	bl	1e3b8 <__assert_fail@plt+0xaeb4>
   2b70c:	ldr	r5, [sp, #72]	; 0x48
   2b710:	add	r5, r5, #4
   2b714:	str	r5, [sp, #72]	; 0x48
   2b718:	mov	r9, r5
   2b71c:	cmp	r0, #0
   2b720:	bne	2b73c <__assert_fail@plt+0x18238>
   2b724:	add	r1, sp, #236	; 0xec
   2b728:	mov	r2, r6
   2b72c:	mov	r0, sl
   2b730:	bl	1d2e4 <__assert_fail@plt+0x9de0>
   2b734:	cmp	r0, #0
   2b738:	beq	2c148 <__assert_fail@plt+0x18c44>
   2b73c:	mov	r6, #0
   2b740:	ldr	r0, [sp, #236]	; 0xec
   2b744:	str	r6, [sp]
   2b748:	add	r1, sp, #256	; 0x100
   2b74c:	str	r6, [sp, #4]
   2b750:	mov	r2, r6
   2b754:	str	r6, [sp, #8]
   2b758:	mov	r3, r6
   2b75c:	str	r6, [sp, #12]
   2b760:	bl	131ec <dwarf_cu_die@plt>
   2b764:	cmp	r0, r6
   2b768:	beq	2c218 <__assert_fail@plt+0x18d14>
   2b76c:	mov	r2, #5
   2b770:	mov	r0, r6
   2b774:	movw	r1, #11712	; 0x2dc0
   2b778:	movt	r1, #4
   2b77c:	bl	12d84 <dcgettext@plt>
   2b780:	mov	r6, r0
   2b784:	add	r0, sp, #256	; 0x100
   2b788:	bl	12f28 <dwarf_dieoffset@plt>
   2b78c:	mov	r2, r0
   2b790:	mov	r3, r1
   2b794:	mov	r0, #1
   2b798:	mov	r1, r6
   2b79c:	bl	13204 <__printf_chk@plt>
   2b7a0:	ldrd	r2, [sp, #240]	; 0xf0
   2b7a4:	ldr	r0, [sp, #80]	; 0x50
   2b7a8:	ldr	r1, [sp, #52]	; 0x34
   2b7ac:	strd	r2, [sp]
   2b7b0:	bl	27164 <__assert_fail@plt+0x13c60>
   2b7b4:	mov	r0, #10
   2b7b8:	bl	131b0 <putchar@plt>
   2b7bc:	mov	r0, #10
   2b7c0:	bl	131b0 <putchar@plt>
   2b7c4:	cmp	r7, #0
   2b7c8:	beq	2b8bc <__assert_fail@plt+0x183b8>
   2b7cc:	ldrd	r0, [sp, #24]
   2b7d0:	mov	r2, r8
   2b7d4:	mov	r3, #0
   2b7d8:	subs	r0, r0, #8
   2b7dc:	sbc	r1, r1, #0
   2b7e0:	bl	3bba0 <__assert_fail@plt+0x2869c>
   2b7e4:	mov	r4, r0
   2b7e8:	mov	r5, r1
   2b7ec:	ldrd	r0, [sp, #88]	; 0x58
   2b7f0:	cmp	r1, r5
   2b7f4:	cmpeq	r0, r4
   2b7f8:	bhi	2c0e0 <__assert_fail@plt+0x18bdc>
   2b7fc:	mov	r2, #5
   2b800:	movw	r1, #11800	; 0x2e18
   2b804:	mov	r0, #0
   2b808:	movt	r1, #4
   2b80c:	bl	12d84 <dcgettext@plt>
   2b810:	ldr	r5, [sp, #56]	; 0x38
   2b814:	ldr	r6, [sp, #72]	; 0x48
   2b818:	ldr	r2, [r5]
   2b81c:	rsb	r2, r2, r6
   2b820:	asr	r3, r2, #31
   2b824:	mov	r1, r0
   2b828:	mov	r0, #1
   2b82c:	bl	13204 <__printf_chk@plt>
   2b830:	mov	r4, #0
   2b834:	b	2b868 <__assert_fail@plt+0x18364>
   2b838:	cmp	r3, #0
   2b83c:	ldreq	r2, [r9]
   2b840:	ldreq	r3, [r9, #4]
   2b844:	bne	2c2f8 <__assert_fail@plt+0x18df4>
   2b848:	movw	r1, #61948	; 0xf1fc
   2b84c:	mov	r0, #1
   2b850:	movt	r1, #3
   2b854:	add	r4, r4, #1
   2b858:	bl	13204 <__printf_chk@plt>
   2b85c:	cmp	r7, r4
   2b860:	add	r9, r9, #8
   2b864:	bls	2b8b4 <__assert_fail@plt+0x183b0>
   2b868:	movw	r1, #11832	; 0x2e38
   2b86c:	mov	r0, #1
   2b870:	movt	r1, #4
   2b874:	mov	r2, r4
   2b878:	bl	13204 <__printf_chk@plt>
   2b87c:	cmp	r8, #4
   2b880:	ldrb	r3, [sl, #84]	; 0x54
   2b884:	bne	2b838 <__assert_fail@plt+0x18334>
   2b888:	cmp	r3, #0
   2b88c:	ldr	r2, [r9]
   2b890:	bne	2cac4 <__assert_fail@plt+0x195c0>
   2b894:	movw	r1, #60084	; 0xeab4
   2b898:	mov	r0, #1
   2b89c:	movt	r1, #3
   2b8a0:	add	r4, r4, #1
   2b8a4:	bl	13204 <__printf_chk@plt>
   2b8a8:	cmp	r7, r4
   2b8ac:	add	r9, r9, #4
   2b8b0:	bhi	2b868 <__assert_fail@plt+0x18364>
   2b8b4:	mov	r0, #10
   2b8b8:	bl	131b0 <putchar@plt>
   2b8bc:	ldrd	r4, [sp, #240]	; 0xf0
   2b8c0:	cmp	fp, r9
   2b8c4:	strd	r4, [sp, #40]	; 0x28
   2b8c8:	bls	2c2ac <__assert_fail@plt+0x18da8>
   2b8cc:	mov	r7, #1
   2b8d0:	str	fp, [sp, #24]
   2b8d4:	str	sl, [sp, #32]
   2b8d8:	ldrb	r4, [r9]
   2b8dc:	add	r6, r9, #1
   2b8e0:	cmp	r4, #0
   2b8e4:	movne	r3, #0
   2b8e8:	andeq	r3, r7, #1
   2b8ec:	cmp	r3, #0
   2b8f0:	bne	2beec <__assert_fail@plt+0x189e8>
   2b8f4:	cmp	r7, #0
   2b8f8:	bne	2bef4 <__assert_fail@plt+0x189f0>
   2b8fc:	cmp	r4, #7
   2b900:	mov	r1, r4
   2b904:	movwls	r3, #50660	; 0xc5e4
   2b908:	movtls	r3, #3
   2b90c:	addls	r3, r3, r4, lsl #2
   2b910:	movhi	r0, #0
   2b914:	ldrls	r0, [r3, #1928]	; 0x788
   2b918:	mov	r3, #0
   2b91c:	mov	r2, r3
   2b920:	str	r3, [sp]
   2b924:	bl	165c0 <__assert_fail@plt+0x30bc>
   2b928:	movw	r1, #11876	; 0x2e64
   2b92c:	movt	r1, #4
   2b930:	mov	r2, r0
   2b934:	mov	r0, #1
   2b938:	bl	13204 <__printf_chk@plt>
   2b93c:	cmp	r4, #7
   2b940:	ldrls	pc, [pc, r4, lsl #2]
   2b944:	b	2c238 <__assert_fail@plt+0x18d34>
   2b948:	ldrdeq	fp, [r2], -r8
   2b94c:	andeq	fp, r2, r4, ror lr
   2b950:	andeq	fp, r2, ip, lsr sp
   2b954:	andeq	fp, r2, ip, ror ip
   2b958:	andeq	fp, r2, r8, lsl #23
   2b95c:	andeq	fp, r2, ip, ror #21
   2b960:	andeq	fp, r2, ip, lsl #20
   2b964:	andeq	fp, r2, r8, ror #18
   2b968:	ldr	fp, [sp, #52]	; 0x34
   2b96c:	cmp	fp, #4
   2b970:	beq	2c044 <__assert_fail@plt+0x18b40>
   2b974:	ldr	r5, [sp, #24]
   2b978:	rsb	r3, r6, r5
   2b97c:	cmp	r3, #7
   2b980:	bls	2c238 <__assert_fail@plt+0x18d34>
   2b984:	ldr	r8, [sp, #32]
   2b988:	ldrb	r3, [r8, #84]	; 0x54
   2b98c:	cmp	r3, #0
   2b990:	ldreq	r4, [r9, #1]
   2b994:	ldreq	r5, [r9, #5]
   2b998:	bne	2c44c <__assert_fail@plt+0x18f48>
   2b99c:	add	r3, r6, #8
   2b9a0:	ldr	r9, [sp, #24]
   2b9a4:	cmp	r9, r3
   2b9a8:	beq	2c29c <__assert_fail@plt+0x18d98>
   2b9ac:	ldrb	r8, [r3]
   2b9b0:	add	r6, r3, #1
   2b9b4:	mov	r9, #0
   2b9b8:	tst	r8, #128	; 0x80
   2b9bc:	and	r8, r8, #127	; 0x7f
   2b9c0:	uxtb	r8, r8
   2b9c4:	bne	2c8f8 <__assert_fail@plt+0x193f4>
   2b9c8:	strd	r8, [sp]
   2b9cc:	movw	r1, #11980	; 0x2ecc
   2b9d0:	mov	r0, #1
   2b9d4:	movt	r1, #4
   2b9d8:	mov	r2, r4
   2b9dc:	mov	r3, r5
   2b9e0:	bl	13204 <__printf_chk@plt>
   2b9e4:	ldr	sl, [sp, #68]	; 0x44
   2b9e8:	ldrb	r7, [sl, #33]	; 0x21
   2b9ec:	cmp	r7, #0
   2b9f0:	beq	2bff4 <__assert_fail@plt+0x18af0>
   2b9f4:	mov	r7, #0
   2b9f8:	ldr	ip, [sp, #24]
   2b9fc:	cmp	ip, r6
   2ba00:	bls	2bae0 <__assert_fail@plt+0x185dc>
   2ba04:	mov	r9, r6
   2ba08:	b	2b8d8 <__assert_fail@plt+0x183d4>
   2ba0c:	ldr	sl, [sp, #52]	; 0x34
   2ba10:	cmp	sl, #4
   2ba14:	beq	2c0ac <__assert_fail@plt+0x18ba8>
   2ba18:	ldr	r5, [sp, #24]
   2ba1c:	rsb	r3, r6, r5
   2ba20:	cmp	r3, #15
   2ba24:	bls	2c238 <__assert_fail@plt+0x18d34>
   2ba28:	ldr	r8, [sp, #32]
   2ba2c:	ldrb	r3, [r8, #84]	; 0x54
   2ba30:	cmp	r3, #0
   2ba34:	ldreq	r4, [r6, #8]
   2ba38:	ldreq	r7, [r9, #1]
   2ba3c:	ldreq	r8, [r9, #5]
   2ba40:	ldreq	r5, [r6, #12]
   2ba44:	bne	2c41c <__assert_fail@plt+0x18f18>
   2ba48:	add	r6, r6, #16
   2ba4c:	strd	r4, [sp]
   2ba50:	movw	r1, #11960	; 0x2eb8
   2ba54:	mov	r0, #1
   2ba58:	movt	r1, #4
   2ba5c:	mov	r2, r7
   2ba60:	mov	r3, r8
   2ba64:	bl	13204 <__printf_chk@plt>
   2ba68:	ldr	sl, [sp, #68]	; 0x44
   2ba6c:	ldrb	r9, [sl, #33]	; 0x21
   2ba70:	cmp	r9, #0
   2ba74:	bne	2b9f4 <__assert_fail@plt+0x184f0>
   2ba78:	movw	r1, #12212	; 0x2fb4
   2ba7c:	mov	r0, #1
   2ba80:	movt	r1, #4
   2ba84:	bl	13204 <__printf_chk@plt>
   2ba88:	mov	r2, r7
   2ba8c:	mov	r3, r8
   2ba90:	stm	sp, {r7, r8}
   2ba94:	ldr	r0, [sp, #80]	; 0x50
   2ba98:	mov	r7, r9
   2ba9c:	ldr	r1, [sp, #52]	; 0x34
   2baa0:	bl	27164 <__assert_fail@plt+0x13c60>
   2baa4:	movw	r1, #11948	; 0x2eac
   2baa8:	mov	r0, #1
   2baac:	movt	r1, #4
   2bab0:	bl	13204 <__printf_chk@plt>
   2bab4:	subs	r2, r4, #1
   2bab8:	sbc	r3, r5, #0
   2babc:	ldr	r0, [sp, #80]	; 0x50
   2bac0:	ldr	r1, [sp, #52]	; 0x34
   2bac4:	strd	r4, [sp]
   2bac8:	bl	27164 <__assert_fail@plt+0x13c60>
   2bacc:	mov	r0, #10
   2bad0:	bl	131b0 <putchar@plt>
   2bad4:	ldr	ip, [sp, #24]
   2bad8:	cmp	ip, r6
   2badc:	bhi	2ba04 <__assert_fail@plt+0x18500>
   2bae0:	ldr	fp, [sp, #24]
   2bae4:	ldr	sl, [sp, #32]
   2bae8:	b	2b41c <__assert_fail@plt+0x17f18>
   2baec:	ldr	fp, [sp, #52]	; 0x34
   2baf0:	cmp	fp, #4
   2baf4:	beq	2c074 <__assert_fail@plt+0x18b70>
   2baf8:	ldr	sl, [sp, #24]
   2bafc:	rsb	r3, r6, sl
   2bb00:	cmp	r3, #7
   2bb04:	bls	2c238 <__assert_fail@plt+0x18d34>
   2bb08:	ldr	ip, [sp, #32]
   2bb0c:	ldrb	r3, [ip, #84]	; 0x54
   2bb10:	cmp	r3, #0
   2bb14:	ldreq	lr, [r9, #1]
   2bb18:	ldreq	r9, [r9, #5]
   2bb1c:	streq	lr, [sp, #40]	; 0x28
   2bb20:	streq	r9, [sp, #44]	; 0x2c
   2bb24:	bne	2c460 <__assert_fail@plt+0x18f5c>
   2bb28:	add	r6, r6, #8
   2bb2c:	movw	r1, #8304	; 0x2070
   2bb30:	mov	r0, #1
   2bb34:	movt	r1, #4
   2bb38:	ldrd	r2, [sp, #40]	; 0x28
   2bb3c:	bl	13204 <__printf_chk@plt>
   2bb40:	ldr	r4, [sp, #68]	; 0x44
   2bb44:	ldrb	r7, [r4, #33]	; 0x21
   2bb48:	cmp	r7, #0
   2bb4c:	bne	2b9f4 <__assert_fail@plt+0x184f0>
   2bb50:	movw	r1, #12212	; 0x2fb4
   2bb54:	mov	r0, #1
   2bb58:	movt	r1, #4
   2bb5c:	bl	13204 <__printf_chk@plt>
   2bb60:	ldrd	r8, [sp, #40]	; 0x28
   2bb64:	ldr	r0, [sp, #80]	; 0x50
   2bb68:	ldr	r1, [sp, #52]	; 0x34
   2bb6c:	strd	r8, [sp]
   2bb70:	mov	r2, r8
   2bb74:	mov	r3, r9
   2bb78:	bl	27164 <__assert_fail@plt+0x13c60>
   2bb7c:	mov	r0, #10
   2bb80:	bl	131b0 <putchar@plt>
   2bb84:	b	2b9f8 <__assert_fail@plt+0x184f4>
   2bb88:	ldr	ip, [sp, #24]
   2bb8c:	cmp	ip, r6
   2bb90:	beq	2c238 <__assert_fail@plt+0x18d34>
   2bb94:	ldrb	r2, [r9, #1]
   2bb98:	mov	r3, #0
   2bb9c:	add	ip, r9, #2
   2bba0:	tst	r2, #128	; 0x80
   2bba4:	and	r2, r2, #127	; 0x7f
   2bba8:	uxtb	r2, r2
   2bbac:	moveq	r9, r3
   2bbb0:	moveq	r8, r2
   2bbb4:	bne	2c670 <__assert_fail@plt+0x1916c>
   2bbb8:	ldr	r4, [sp, #24]
   2bbbc:	cmp	r4, ip
   2bbc0:	beq	2c29c <__assert_fail@plt+0x18d98>
   2bbc4:	ldrb	r4, [ip]
   2bbc8:	add	r6, ip, #1
   2bbcc:	mov	r5, #0
   2bbd0:	tst	r4, #128	; 0x80
   2bbd4:	and	r4, r4, #127	; 0x7f
   2bbd8:	uxtb	r4, r4
   2bbdc:	bne	2c328 <__assert_fail@plt+0x18e24>
   2bbe0:	strd	r4, [sp]
   2bbe4:	movw	r1, #11920	; 0x2e90
   2bbe8:	mov	r0, #1
   2bbec:	movt	r1, #4
   2bbf0:	mov	r2, r8
   2bbf4:	mov	r3, r9
   2bbf8:	bl	13204 <__printf_chk@plt>
   2bbfc:	ldr	sl, [sp, #68]	; 0x44
   2bc00:	ldrb	r7, [sl, #33]	; 0x21
   2bc04:	cmp	r7, #0
   2bc08:	bne	2b9f4 <__assert_fail@plt+0x184f0>
   2bc0c:	ldrd	sl, [sp, #40]	; 0x28
   2bc10:	movw	r1, #12212	; 0x2fb4
   2bc14:	mov	r0, #1
   2bc18:	movt	r1, #4
   2bc1c:	adds	r8, r8, sl
   2bc20:	adc	r9, r9, fp
   2bc24:	bl	13204 <__printf_chk@plt>
   2bc28:	adds	r4, r4, sl
   2bc2c:	mov	r2, r8
   2bc30:	mov	r3, r9
   2bc34:	ldr	r0, [sp, #80]	; 0x50
   2bc38:	ldr	r1, [sp, #52]	; 0x34
   2bc3c:	adc	r5, r5, fp
   2bc40:	strd	r8, [sp]
   2bc44:	bl	27164 <__assert_fail@plt+0x13c60>
   2bc48:	movw	r1, #11948	; 0x2eac
   2bc4c:	mov	r0, #1
   2bc50:	movt	r1, #4
   2bc54:	bl	13204 <__printf_chk@plt>
   2bc58:	subs	r2, r4, #1
   2bc5c:	sbc	r3, r5, #0
   2bc60:	strd	r4, [sp]
   2bc64:	ldr	r0, [sp, #80]	; 0x50
   2bc68:	ldr	r1, [sp, #52]	; 0x34
   2bc6c:	bl	27164 <__assert_fail@plt+0x13c60>
   2bc70:	mov	r0, #10
   2bc74:	bl	131b0 <putchar@plt>
   2bc78:	b	2b9f8 <__assert_fail@plt+0x184f4>
   2bc7c:	ldr	ip, [sp, #24]
   2bc80:	cmp	ip, r6
   2bc84:	beq	2c238 <__assert_fail@plt+0x18d34>
   2bc88:	ldrb	r2, [r9, #1]
   2bc8c:	mov	r3, #0
   2bc90:	add	ip, r9, #2
   2bc94:	tst	r2, #128	; 0x80
   2bc98:	and	r2, r2, #127	; 0x7f
   2bc9c:	uxtb	r2, r2
   2bca0:	moveq	r7, r3
   2bca4:	moveq	r8, r2
   2bca8:	bne	2c754 <__assert_fail@plt+0x19250>
   2bcac:	ldr	r4, [sp, #24]
   2bcb0:	cmp	r4, ip
   2bcb4:	beq	2c29c <__assert_fail@plt+0x18d98>
   2bcb8:	ldrb	r4, [ip]
   2bcbc:	add	r6, ip, #1
   2bcc0:	mov	r5, #0
   2bcc4:	tst	r4, #128	; 0x80
   2bcc8:	and	r4, r4, #127	; 0x7f
   2bccc:	uxtb	r4, r4
   2bcd0:	bne	2c834 <__assert_fail@plt+0x19330>
   2bcd4:	mov	r3, r7
   2bcd8:	strd	r4, [sp]
   2bcdc:	movw	r1, #11920	; 0x2e90
   2bce0:	mov	r0, #1
   2bce4:	movt	r1, #4
   2bce8:	mov	r2, r8
   2bcec:	bl	13204 <__printf_chk@plt>
   2bcf0:	ldr	r9, [sp, #68]	; 0x44
   2bcf4:	ldrb	r3, [r9, #33]	; 0x21
   2bcf8:	cmp	r3, #0
   2bcfc:	bne	2b9f4 <__assert_fail@plt+0x184f0>
   2bd00:	add	r1, sp, #256	; 0x100
   2bd04:	ldr	r0, [sp, #236]	; 0xec
   2bd08:	mov	r2, r8
   2bd0c:	mov	r3, r7
   2bd10:	str	r1, [sp]
   2bd14:	bl	207ac <__assert_fail@plt+0xd2a8>
   2bd18:	cmp	r0, #0
   2bd1c:	beq	2c1a4 <__assert_fail@plt+0x18ca0>
   2bd20:	movw	r0, #11936	; 0x2ea0
   2bd24:	movt	r0, #4
   2bd28:	bl	12fdc <puts@plt>
   2bd2c:	movw	r0, #11908	; 0x2e84
   2bd30:	movt	r0, #4
   2bd34:	bl	12fdc <puts@plt>
   2bd38:	b	2b9f4 <__assert_fail@plt+0x184f0>
   2bd3c:	ldr	sl, [sp, #24]
   2bd40:	cmp	sl, r6
   2bd44:	beq	2c238 <__assert_fail@plt+0x18d34>
   2bd48:	ldrb	r2, [r9, #1]
   2bd4c:	mov	r3, #0
   2bd50:	add	ip, r9, #2
   2bd54:	tst	r2, #128	; 0x80
   2bd58:	and	r2, r2, #127	; 0x7f
   2bd5c:	uxtb	r2, r2
   2bd60:	moveq	r4, r3
   2bd64:	moveq	r8, r2
   2bd68:	bne	2c550 <__assert_fail@plt+0x1904c>
   2bd6c:	ldr	r6, [sp, #24]
   2bd70:	cmp	r6, ip
   2bd74:	beq	2c29c <__assert_fail@plt+0x18d98>
   2bd78:	ldrb	r2, [ip]
   2bd7c:	add	r6, ip, #1
   2bd80:	mov	r3, #0
   2bd84:	tst	r2, #128	; 0x80
   2bd88:	and	r2, r2, #127	; 0x7f
   2bd8c:	uxtb	r2, r2
   2bd90:	bne	2c47c <__assert_fail@plt+0x18f78>
   2bd94:	mov	r7, r2
   2bd98:	mov	r5, r3
   2bd9c:	mov	r3, r4
   2bda0:	str	r7, [sp]
   2bda4:	movw	r1, #11920	; 0x2e90
   2bda8:	str	r5, [sp, #4]
   2bdac:	movt	r1, #4
   2bdb0:	mov	r0, #1
   2bdb4:	mov	r2, r8
   2bdb8:	bl	13204 <__printf_chk@plt>
   2bdbc:	ldr	r9, [sp, #68]	; 0x44
   2bdc0:	ldrb	r3, [r9, #33]	; 0x21
   2bdc4:	cmp	r3, #0
   2bdc8:	bne	2b9f4 <__assert_fail@plt+0x184f0>
   2bdcc:	add	r1, sp, #248	; 0xf8
   2bdd0:	ldr	r0, [sp, #236]	; 0xec
   2bdd4:	mov	r2, r8
   2bdd8:	mov	r3, r4
   2bddc:	str	r1, [sp]
   2bde0:	bl	207ac <__assert_fail@plt+0xd2a8>
   2bde4:	cmp	r0, #0
   2bde8:	bne	2bd20 <__assert_fail@plt+0x1881c>
   2bdec:	add	r1, sp, #256	; 0x100
   2bdf0:	ldr	r0, [sp, #236]	; 0xec
   2bdf4:	mov	r2, r7
   2bdf8:	mov	r3, r5
   2bdfc:	str	r1, [sp]
   2be00:	bl	207ac <__assert_fail@plt+0xd2a8>
   2be04:	cmp	r0, #0
   2be08:	bne	2bd20 <__assert_fail@plt+0x1881c>
   2be0c:	movw	r1, #12212	; 0x2fb4
   2be10:	mov	r0, #1
   2be14:	movt	r1, #4
   2be18:	add	sl, sp, #256	; 0x100
   2be1c:	bl	13204 <__printf_chk@plt>
   2be20:	ldrd	r4, [sp, #248]	; 0xf8
   2be24:	ldr	r0, [sp, #80]	; 0x50
   2be28:	ldr	r1, [sp, #52]	; 0x34
   2be2c:	mov	r2, r4
   2be30:	mov	r3, r5
   2be34:	strd	r4, [sp]
   2be38:	bl	27164 <__assert_fail@plt+0x13c60>
   2be3c:	movw	r1, #11948	; 0x2eac
   2be40:	mov	r0, #1
   2be44:	movt	r1, #4
   2be48:	bl	13204 <__printf_chk@plt>
   2be4c:	ldrd	r4, [sl]
   2be50:	ldr	r0, [sp, #80]	; 0x50
   2be54:	subs	r2, r4, #1
   2be58:	ldr	r1, [sp, #52]	; 0x34
   2be5c:	sbc	r3, r5, #0
   2be60:	strd	r4, [sp]
   2be64:	bl	27164 <__assert_fail@plt+0x13c60>
   2be68:	mov	r0, #10
   2be6c:	bl	131b0 <putchar@plt>
   2be70:	b	2b9f4 <__assert_fail@plt+0x184f0>
   2be74:	ldr	ip, [sp, #24]
   2be78:	cmp	ip, r6
   2be7c:	beq	2c2b4 <__assert_fail@plt+0x18db0>
   2be80:	ldrb	r2, [r9, #1]
   2be84:	mov	r3, #0
   2be88:	add	r7, r9, #2
   2be8c:	tst	r2, #128	; 0x80
   2be90:	and	r2, r2, #127	; 0x7f
   2be94:	uxtb	r2, r2
   2be98:	moveq	r4, r3
   2be9c:	moveq	r5, r2
   2bea0:	bne	2c9b4 <__assert_fail@plt+0x194b0>
   2bea4:	mov	r3, r4
   2bea8:	movw	r1, #10192	; 0x27d0
   2beac:	mov	r0, #1
   2beb0:	movt	r1, #4
   2beb4:	mov	r2, r5
   2beb8:	bl	13204 <__printf_chk@plt>
   2bebc:	ldr	r6, [sp, #68]	; 0x44
   2bec0:	ldrb	r3, [r6, #33]	; 0x21
   2bec4:	cmp	r3, #0
   2bec8:	beq	2bfc4 <__assert_fail@plt+0x18ac0>
   2becc:	mov	r6, r7
   2bed0:	mov	r7, #0
   2bed4:	b	2b9f8 <__assert_fail@plt+0x184f4>
   2bed8:	movw	r0, #12448	; 0x30a0
   2bedc:	movt	r0, #4
   2bee0:	bl	12fdc <puts@plt>
   2bee4:	mov	r7, #1
   2bee8:	b	2b9f8 <__assert_fail@plt+0x184f4>
   2beec:	mov	r7, #1
   2bef0:	b	2b9f8 <__assert_fail@plt+0x184f4>
   2bef4:	ldr	r5, [sp, #56]	; 0x38
   2bef8:	movw	r1, #11844	; 0x2e44
   2befc:	ldr	r8, [sp, #72]	; 0x48
   2bf00:	movt	r1, #4
   2bf04:	ldrd	sl, [sp, #240]	; 0xf0
   2bf08:	ldr	r0, [r5]
   2bf0c:	rsb	r2, r8, r6
   2bf10:	sub	r2, r2, #1
   2bf14:	rsb	r0, r0, r6
   2bf18:	strd	sl, [sp, #40]	; 0x28
   2bf1c:	sub	r0, r0, #1
   2bf20:	asr	r3, r2, #31
   2bf24:	strd	r2, [sp]
   2bf28:	mov	r2, r0
   2bf2c:	asr	r3, r0, #31
   2bf30:	mov	r0, #1
   2bf34:	bl	13204 <__printf_chk@plt>
   2bf38:	b	2b8fc <__assert_fail@plt+0x183f8>
   2bf3c:	mov	r2, #5
   2bf40:	movw	r1, #11452	; 0x2cbc
   2bf44:	mov	r0, #0
   2bf48:	movt	r1, #4
   2bf4c:	bl	12d84 <dcgettext@plt>
   2bf50:	mov	r5, r0
   2bf54:	ldr	r0, [sp, #96]	; 0x60
   2bf58:	bl	133d8 <elf_ndxscn@plt>
   2bf5c:	ldr	r1, [sp, #84]	; 0x54
   2bf60:	mov	r4, r0
   2bf64:	ldr	r0, [sp, #100]	; 0x64
   2bf68:	bl	1870c <__assert_fail@plt+0x5208>
   2bf6c:	mov	r2, r5
   2bf70:	mov	r3, r4
   2bf74:	str	r0, [sp]
   2bf78:	mov	r0, #0
   2bf7c:	mov	r1, r0
   2bf80:	bl	12f70 <error@plt>
   2bf84:	ldr	r8, [sp, #76]	; 0x4c
   2bf88:	ldr	r2, [sp, #276]	; 0x114
   2bf8c:	ldr	r3, [r8]
   2bf90:	cmp	r2, r3
   2bf94:	bne	2c3e8 <__assert_fail@plt+0x18ee4>
   2bf98:	add	sp, sp, #284	; 0x11c
   2bf9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bfa0:	ldr	r0, [ip, #172]	; 0xac
   2bfa4:	movw	r2, #11440	; 0x2cb0
   2bfa8:	movw	r3, #57200	; 0xdf70
   2bfac:	movt	r2, #4
   2bfb0:	movt	r3, #1
   2bfb4:	str	r2, [sp]
   2bfb8:	mov	r2, #16
   2bfbc:	bl	130c0 <qsort_r@plt>
   2bfc0:	b	2b3b0 <__assert_fail@plt+0x17eac>
   2bfc4:	add	r1, sp, #256	; 0x100
   2bfc8:	ldr	r0, [sp, #236]	; 0xec
   2bfcc:	mov	r2, r5
   2bfd0:	mov	r3, r4
   2bfd4:	str	r1, [sp]
   2bfd8:	bl	207ac <__assert_fail@plt+0xd2a8>
   2bfdc:	cmp	r0, #0
   2bfe0:	beq	2c168 <__assert_fail@plt+0x18c64>
   2bfe4:	movw	r0, #11908	; 0x2e84
   2bfe8:	movt	r0, #4
   2bfec:	bl	12fdc <puts@plt>
   2bff0:	b	2becc <__assert_fail@plt+0x189c8>
   2bff4:	adds	r8, r8, r4
   2bff8:	movw	r1, #12212	; 0x2fb4
   2bffc:	mov	r0, #1
   2c000:	movt	r1, #4
   2c004:	adc	r9, r9, r5
   2c008:	bl	13204 <__printf_chk@plt>
   2c00c:	mov	r2, r4
   2c010:	mov	r3, r5
   2c014:	ldr	r0, [sp, #80]	; 0x50
   2c018:	ldr	r1, [sp, #52]	; 0x34
   2c01c:	strd	r4, [sp]
   2c020:	bl	27164 <__assert_fail@plt+0x13c60>
   2c024:	movw	r1, #11948	; 0x2eac
   2c028:	mov	r0, #1
   2c02c:	movt	r1, #4
   2c030:	bl	13204 <__printf_chk@plt>
   2c034:	subs	r2, r8, #1
   2c038:	strd	r8, [sp]
   2c03c:	sbc	r3, r9, #0
   2c040:	b	2bc64 <__assert_fail@plt+0x18760>
   2c044:	ldr	ip, [sp, #24]
   2c048:	rsb	r3, r6, ip
   2c04c:	cmp	r3, #3
   2c050:	bls	2c238 <__assert_fail@plt+0x18d34>
   2c054:	ldr	r4, [sp, #32]
   2c058:	ldrb	r3, [r4, #84]	; 0x54
   2c05c:	ldr	r4, [r9, #1]
   2c060:	cmp	r3, #0
   2c064:	bne	2c82c <__assert_fail@plt+0x19328>
   2c068:	add	r3, r6, #4
   2c06c:	mov	r5, #0
   2c070:	b	2b9a0 <__assert_fail@plt+0x1849c>
   2c074:	ldr	ip, [sp, #24]
   2c078:	rsb	r3, r6, ip
   2c07c:	cmp	r3, #3
   2c080:	bls	2c238 <__assert_fail@plt+0x18d34>
   2c084:	ldr	r4, [sp, #32]
   2c088:	ldrb	r3, [r4, #84]	; 0x54
   2c08c:	cmp	r3, #0
   2c090:	ldr	r3, [r9, #1]
   2c094:	bne	2c7ac <__assert_fail@plt+0x192a8>
   2c098:	mov	r8, r3
   2c09c:	mov	r9, #0
   2c0a0:	add	r6, r6, #4
   2c0a4:	strd	r8, [sp, #40]	; 0x28
   2c0a8:	b	2bb2c <__assert_fail@plt+0x18628>
   2c0ac:	ldr	ip, [sp, #24]
   2c0b0:	rsb	r3, r6, ip
   2c0b4:	cmp	r3, #7
   2c0b8:	bls	2c238 <__assert_fail@plt+0x18d34>
   2c0bc:	ldr	r4, [sp, #32]
   2c0c0:	ldr	r7, [r9, #1]
   2c0c4:	ldrb	r8, [r4, #84]	; 0x54
   2c0c8:	cmp	r8, #0
   2c0cc:	ldreq	r4, [r6, #4]
   2c0d0:	bne	2cab0 <__assert_fail@plt+0x195ac>
   2c0d4:	add	r6, r6, #8
   2c0d8:	mov	r5, #0
   2c0dc:	b	2ba4c <__assert_fail@plt+0x18548>
   2c0e0:	mov	r2, #5
   2c0e4:	movw	r1, #11760	; 0x2df0
   2c0e8:	mov	r0, #0
   2c0ec:	movt	r1, #4
   2c0f0:	bl	12d84 <dcgettext@plt>
   2c0f4:	mov	r7, r4
   2c0f8:	mov	r2, r0
   2c0fc:	mov	r0, #0
   2c100:	mov	r1, r0
   2c104:	bl	12f70 <error@plt>
   2c108:	mov	r2, #5
   2c10c:	movw	r1, #11800	; 0x2e18
   2c110:	mov	r0, #0
   2c114:	movt	r1, #4
   2c118:	bl	12d84 <dcgettext@plt>
   2c11c:	ldr	r6, [sp, #56]	; 0x38
   2c120:	ldr	ip, [sp, #72]	; 0x48
   2c124:	ldr	r2, [r6]
   2c128:	rsb	r2, r2, ip
   2c12c:	asr	r3, r2, #31
   2c130:	mov	r1, r0
   2c134:	mov	r0, #1
   2c138:	bl	13204 <__printf_chk@plt>
   2c13c:	cmp	r4, #0
   2c140:	bne	2b830 <__assert_fail@plt+0x1832c>
   2c144:	b	2b8b4 <__assert_fail@plt+0x183b0>
   2c148:	mov	r2, #5
   2c14c:	movw	r1, #11732	; 0x2dd4
   2c150:	movt	r1, #4
   2c154:	bl	12d84 <dcgettext@plt>
   2c158:	mov	r1, r0
   2c15c:	mov	r0, #1
   2c160:	bl	13204 <__printf_chk@plt>
   2c164:	b	2b7bc <__assert_fail@plt+0x182b8>
   2c168:	add	r8, sp, #256	; 0x100
   2c16c:	movw	r1, #12212	; 0x2fb4
   2c170:	mov	r0, #1
   2c174:	movt	r1, #4
   2c178:	bl	13204 <__printf_chk@plt>
   2c17c:	ldrd	r4, [r8]
   2c180:	ldr	r0, [sp, #80]	; 0x50
   2c184:	ldr	r1, [sp, #52]	; 0x34
   2c188:	mov	r2, r4
   2c18c:	mov	r3, r5
   2c190:	strd	r4, [sp]
   2c194:	bl	27164 <__assert_fail@plt+0x13c60>
   2c198:	mov	r0, #10
   2c19c:	bl	131b0 <putchar@plt>
   2c1a0:	b	2becc <__assert_fail@plt+0x189c8>
   2c1a4:	add	sl, sp, #256	; 0x100
   2c1a8:	add	fp, sp, #256	; 0x100
   2c1ac:	movw	r1, #12212	; 0x2fb4
   2c1b0:	mov	r0, #1
   2c1b4:	ldrd	r2, [sl]
   2c1b8:	movt	r1, #4
   2c1bc:	adds	r4, r4, r2
   2c1c0:	adc	r5, r5, r3
   2c1c4:	bl	13204 <__printf_chk@plt>
   2c1c8:	ldrd	r8, [fp]
   2c1cc:	ldr	r0, [sp, #80]	; 0x50
   2c1d0:	ldr	r1, [sp, #52]	; 0x34
   2c1d4:	mov	r2, r8
   2c1d8:	mov	r3, r9
   2c1dc:	strd	r8, [sp]
   2c1e0:	bl	27164 <__assert_fail@plt+0x13c60>
   2c1e4:	movw	r1, #11948	; 0x2eac
   2c1e8:	mov	r0, #1
   2c1ec:	movt	r1, #4
   2c1f0:	bl	13204 <__printf_chk@plt>
   2c1f4:	subs	r2, r4, #1
   2c1f8:	ldr	r0, [sp, #80]	; 0x50
   2c1fc:	sbc	r3, r5, #0
   2c200:	strd	r4, [sp]
   2c204:	ldr	r1, [sp, #52]	; 0x34
   2c208:	bl	27164 <__assert_fail@plt+0x13c60>
   2c20c:	mov	r0, #10
   2c210:	bl	131b0 <putchar@plt>
   2c214:	b	2b9f4 <__assert_fail@plt+0x184f0>
   2c218:	mov	r2, #5
   2c21c:	movw	r1, #11692	; 0x2dac
   2c220:	movt	r1, #4
   2c224:	bl	12d84 <dcgettext@plt>
   2c228:	mov	r1, r0
   2c22c:	mov	r0, #1
   2c230:	bl	13204 <__printf_chk@plt>
   2c234:	b	2b7a0 <__assert_fail@plt+0x1829c>
   2c238:	ldr	fp, [sp, #24]
   2c23c:	ldr	sl, [sp, #32]
   2c240:	movw	r1, #11884	; 0x2e6c
   2c244:	mov	r0, #0
   2c248:	movt	r1, #4
   2c24c:	b	2b404 <__assert_fail@plt+0x17f00>
   2c250:	mov	r1, r9
   2c254:	ldr	r0, [sp, #96]	; 0x60
   2c258:	bl	131bc <elf_rawdata@plt>
   2c25c:	subs	fp, r0, #0
   2c260:	str	fp, [sp, #56]	; 0x38
   2c264:	bne	2b398 <__assert_fail@plt+0x17e94>
   2c268:	mov	r2, #5
   2c26c:	movw	r1, #11400	; 0x2c88
   2c270:	movt	r1, #4
   2c274:	bl	12d84 <dcgettext@plt>
   2c278:	mov	r4, r0
   2c27c:	mvn	r0, #0
   2c280:	bl	130a8 <elf_errmsg@plt>
   2c284:	mov	r2, r4
   2c288:	mov	r3, r0
   2c28c:	ldr	r0, [sp, #56]	; 0x38
   2c290:	mov	r1, r0
   2c294:	bl	12f70 <error@plt>
   2c298:	b	2bf84 <__assert_fail@plt+0x18a80>
   2c29c:	ldr	fp, [sp, #24]
   2c2a0:	ldr	sl, [sp, #32]
   2c2a4:	mov	r6, fp
   2c2a8:	b	2c240 <__assert_fail@plt+0x18d3c>
   2c2ac:	mov	r6, r9
   2c2b0:	b	2b41c <__assert_fail@plt+0x17f18>
   2c2b4:	mov	fp, ip
   2c2b8:	ldr	sl, [sp, #32]
   2c2bc:	b	2c240 <__assert_fail@plt+0x18d3c>
   2c2c0:	rev	r4, r4
   2c2c4:	b	2b4b0 <__assert_fail@plt+0x17fac>
   2c2c8:	ldr	r4, [sp, #60]	; 0x3c
   2c2cc:	cmp	r9, r4
   2c2d0:	bhi	2bf3c <__assert_fail@plt+0x18a38>
   2c2d4:	cmp	r3, #0
   2c2d8:	ldreq	r5, [r9]
   2c2dc:	ldreq	r9, [r9, #4]
   2c2e0:	streq	r5, [sp, #24]
   2c2e4:	streq	r9, [sp, #28]
   2c2e8:	bne	2c30c <__assert_fail@plt+0x18e08>
   2c2ec:	add	r9, fp, #12
   2c2f0:	mov	r8, #8
   2c2f4:	b	2b4cc <__assert_fail@plt+0x17fc8>
   2c2f8:	ldr	r3, [r9]
   2c2fc:	ldr	r2, [r9, #4]
   2c300:	rev	r3, r3
   2c304:	rev	r2, r2
   2c308:	b	2b848 <__assert_fail@plt+0x18344>
   2c30c:	ldr	r3, [r9]
   2c310:	ldr	r2, [r9, #4]
   2c314:	rev	r3, r3
   2c318:	str	r3, [sp, #28]
   2c31c:	rev	r2, r2
   2c320:	str	r2, [sp, #24]
   2c324:	b	2c2ec <__assert_fail@plt+0x18de8>
   2c328:	ldr	sl, [sp, #24]
   2c32c:	cmp	sl, ip
   2c330:	bls	2c410 <__assert_fail@plt+0x18f0c>
   2c334:	rsb	r7, ip, sl
   2c338:	cmp	r7, #9
   2c33c:	movhi	r7, #10
   2c340:	bls	2c408 <__assert_fail@plt+0x18f04>
   2c344:	ldrb	r3, [ip, #1]
   2c348:	add	r6, ip, #2
   2c34c:	and	r2, r3, #127	; 0x7f
   2c350:	tst	r3, #128	; 0x80
   2c354:	uxtb	r2, r2
   2c358:	lsr	ip, r2, #25
   2c35c:	lsl	lr, r2, #7
   2c360:	str	ip, [sp, #196]	; 0xc4
   2c364:	str	lr, [sp, #192]	; 0xc0
   2c368:	ldrd	sl, [sp, #192]	; 0xc0
   2c36c:	orr	r4, r4, sl
   2c370:	orr	r5, r5, fp
   2c374:	beq	2bbe0 <__assert_fail@plt+0x186dc>
   2c378:	strd	r8, [sp, #88]	; 0x58
   2c37c:	mov	r1, #1
   2c380:	ldr	fp, [sp, #24]
   2c384:	ldr	sl, [sp, #32]
   2c388:	ldrd	r8, [sp, #136]	; 0x88
   2c38c:	add	r1, r1, #1
   2c390:	cmp	r7, r1
   2c394:	bls	2c3ec <__assert_fail@plt+0x18ee8>
   2c398:	ldrb	ip, [r6], #1
   2c39c:	rsb	r0, r1, r1, lsl #3
   2c3a0:	sub	lr, r0, #32
   2c3a4:	str	lr, [sp, #136]	; 0x88
   2c3a8:	and	r2, ip, #127	; 0x7f
   2c3ac:	tst	ip, #128	; 0x80
   2c3b0:	ldr	ip, [sp, #136]	; 0x88
   2c3b4:	rsb	lr, r0, #32
   2c3b8:	uxtb	r2, r2
   2c3bc:	lsl	r9, r2, ip
   2c3c0:	lsl	r8, r2, r0
   2c3c4:	orr	r9, r9, r2, lsr lr
   2c3c8:	orr	r4, r4, r8
   2c3cc:	orr	r5, r5, r9
   2c3d0:	bne	2c38c <__assert_fail@plt+0x18e88>
   2c3d4:	strd	r8, [sp, #136]	; 0x88
   2c3d8:	str	fp, [sp, #24]
   2c3dc:	str	sl, [sp, #32]
   2c3e0:	ldrd	r8, [sp, #88]	; 0x58
   2c3e4:	b	2bbe0 <__assert_fail@plt+0x186dc>
   2c3e8:	bl	12dc0 <__stack_chk_fail@plt>
   2c3ec:	strd	r8, [sp, #136]	; 0x88
   2c3f0:	mvn	r4, #0
   2c3f4:	str	fp, [sp, #24]
   2c3f8:	mvn	r5, #0
   2c3fc:	str	sl, [sp, #32]
   2c400:	ldrd	r8, [sp, #88]	; 0x58
   2c404:	b	2bbe0 <__assert_fail@plt+0x186dc>
   2c408:	cmp	r7, #1
   2c40c:	bhi	2c344 <__assert_fail@plt+0x18e40>
   2c410:	mvn	r4, #0
   2c414:	mvn	r5, #0
   2c418:	b	2bbe0 <__assert_fail@plt+0x186dc>
   2c41c:	ldr	r3, [r6, #8]
   2c420:	ldr	r8, [r9, #1]
   2c424:	ldr	r7, [r9, #5]
   2c428:	rev	r5, r3
   2c42c:	ldr	r2, [r6, #12]
   2c430:	rev	r8, r8
   2c434:	rev	r7, r7
   2c438:	rev	r4, r2
   2c43c:	b	2ba48 <__assert_fail@plt+0x18544>
   2c440:	ldr	r3, [r6, #2]
   2c444:	rev	r7, r3
   2c448:	b	2b684 <__assert_fail@plt+0x18180>
   2c44c:	ldr	r3, [r9, #1]
   2c450:	ldr	r2, [r9, #5]
   2c454:	rev	r5, r3
   2c458:	rev	r4, r2
   2c45c:	b	2b99c <__assert_fail@plt+0x18498>
   2c460:	ldr	r3, [r9, #1]
   2c464:	ldr	r2, [r9, #5]
   2c468:	rev	r3, r3
   2c46c:	str	r3, [sp, #44]	; 0x2c
   2c470:	rev	r2, r2
   2c474:	str	r2, [sp, #40]	; 0x28
   2c478:	b	2bb28 <__assert_fail@plt+0x18624>
   2c47c:	ldr	r9, [sp, #24]
   2c480:	cmp	r9, ip
   2c484:	bls	2c660 <__assert_fail@plt+0x1915c>
   2c488:	rsb	r7, ip, r9
   2c48c:	cmp	r7, #9
   2c490:	movhi	r7, #10
   2c494:	bls	2c658 <__assert_fail@plt+0x19154>
   2c498:	ldrb	r1, [ip, #1]
   2c49c:	add	r6, ip, #2
   2c4a0:	and	r0, r1, #127	; 0x7f
   2c4a4:	tst	r1, #128	; 0x80
   2c4a8:	uxtb	r0, r0
   2c4ac:	lsr	fp, r0, #25
   2c4b0:	lsl	ip, r0, #7
   2c4b4:	str	fp, [sp, #164]	; 0xa4
   2c4b8:	str	ip, [sp, #160]	; 0xa0
   2c4bc:	ldrd	sl, [sp, #160]	; 0xa0
   2c4c0:	orr	r2, r2, sl
   2c4c4:	orr	r3, r3, fp
   2c4c8:	beq	2bd94 <__assert_fail@plt+0x18890>
   2c4cc:	ldr	fp, [sp, #24]
   2c4d0:	mov	lr, r8
   2c4d4:	ldr	sl, [sp, #32]
   2c4d8:	mov	r1, #1
   2c4dc:	mov	r8, r2
   2c4e0:	mov	r9, r3
   2c4e4:	add	r1, r1, #1
   2c4e8:	cmp	r7, r1
   2c4ec:	bls	2c5a8 <__assert_fail@plt+0x190a4>
   2c4f0:	ldrb	ip, [r6], #1
   2c4f4:	rsb	r0, r1, r1, lsl #3
   2c4f8:	rsb	r3, r0, #32
   2c4fc:	str	r3, [sp, #88]	; 0x58
   2c500:	and	r2, ip, #127	; 0x7f
   2c504:	sub	r5, r0, #32
   2c508:	tst	ip, #128	; 0x80
   2c50c:	ldr	ip, [sp, #88]	; 0x58
   2c510:	uxtb	r2, r2
   2c514:	lsl	r5, r2, r5
   2c518:	lsl	r0, r2, r0
   2c51c:	orr	r5, r5, r2, lsr ip
   2c520:	str	r0, [sp, #112]	; 0x70
   2c524:	str	r5, [sp, #116]	; 0x74
   2c528:	ldrd	r2, [sp, #112]	; 0x70
   2c52c:	orr	r8, r8, r2
   2c530:	orr	r9, r9, r3
   2c534:	bne	2c4e4 <__assert_fail@plt+0x18fe0>
   2c538:	mov	r2, r8
   2c53c:	str	fp, [sp, #24]
   2c540:	mov	r3, r9
   2c544:	str	sl, [sp, #32]
   2c548:	mov	r8, lr
   2c54c:	b	2bd94 <__assert_fail@plt+0x18890>
   2c550:	cmp	sl, r6
   2c554:	bls	2c634 <__assert_fail@plt+0x19130>
   2c558:	rsb	r6, r6, sl
   2c55c:	cmp	r6, #9
   2c560:	movhi	r8, #10
   2c564:	bls	2c628 <__assert_fail@plt+0x19124>
   2c568:	ldrb	r1, [r9, #2]
   2c56c:	add	ip, r9, #3
   2c570:	and	r0, r1, #127	; 0x7f
   2c574:	tst	r1, #128	; 0x80
   2c578:	uxtb	r0, r0
   2c57c:	lsr	lr, r0, #25
   2c580:	lsl	r4, r0, #7
   2c584:	str	lr, [sp, #156]	; 0x9c
   2c588:	str	r4, [sp, #152]	; 0x98
   2c58c:	ldrd	r6, [sp, #152]	; 0x98
   2c590:	orr	r6, r6, r2
   2c594:	orr	r7, r7, r3
   2c598:	bne	2c5c0 <__assert_fail@plt+0x190bc>
   2c59c:	mov	r8, r6
   2c5a0:	mov	r4, r7
   2c5a4:	b	2bd6c <__assert_fail@plt+0x18868>
   2c5a8:	mvn	r7, #0
   2c5ac:	str	fp, [sp, #24]
   2c5b0:	str	sl, [sp, #32]
   2c5b4:	mov	r8, lr
   2c5b8:	mov	r5, r7
   2c5bc:	b	2bd9c <__assert_fail@plt+0x18898>
   2c5c0:	str	r8, [sp, #88]	; 0x58
   2c5c4:	mov	r1, #1
   2c5c8:	ldr	fp, [sp, #24]
   2c5cc:	ldr	sl, [sp, #32]
   2c5d0:	ldrd	r8, [sp, #208]	; 0xd0
   2c5d4:	ldr	r5, [sp, #88]	; 0x58
   2c5d8:	add	r1, r1, #1
   2c5dc:	cmp	r1, r5
   2c5e0:	bcs	2c640 <__assert_fail@plt+0x1913c>
   2c5e4:	ldrb	lr, [ip], #1
   2c5e8:	rsb	r0, r1, r1, lsl #3
   2c5ec:	sub	r5, r0, #32
   2c5f0:	rsb	r4, r0, #32
   2c5f4:	and	r2, lr, #127	; 0x7f
   2c5f8:	tst	lr, #128	; 0x80
   2c5fc:	uxtb	r2, r2
   2c600:	lsl	r9, r2, r5
   2c604:	lsl	r8, r2, r0
   2c608:	orr	r9, r9, r2, lsr r4
   2c60c:	orr	r6, r6, r8
   2c610:	orr	r7, r7, r9
   2c614:	bne	2c5d4 <__assert_fail@plt+0x190d0>
   2c618:	str	fp, [sp, #24]
   2c61c:	str	sl, [sp, #32]
   2c620:	strd	r8, [sp, #208]	; 0xd0
   2c624:	b	2c59c <__assert_fail@plt+0x19098>
   2c628:	cmp	r6, #1
   2c62c:	movhi	r8, r6
   2c630:	bhi	2c568 <__assert_fail@plt+0x19064>
   2c634:	mvn	r8, #0
   2c638:	mov	r4, r8
   2c63c:	b	2bd6c <__assert_fail@plt+0x18868>
   2c640:	strd	r8, [sp, #208]	; 0xd0
   2c644:	mvn	r8, #0
   2c648:	str	fp, [sp, #24]
   2c64c:	mov	r4, r8
   2c650:	str	sl, [sp, #32]
   2c654:	b	2bd6c <__assert_fail@plt+0x18868>
   2c658:	cmp	r7, #1
   2c65c:	bhi	2c498 <__assert_fail@plt+0x18f94>
   2c660:	mvn	r7, #0
   2c664:	mov	r5, r7
   2c668:	b	2bd9c <__assert_fail@plt+0x18898>
   2c66c:	strdeq	r9, [r5], -r4
   2c670:	ldr	r4, [sp, #24]
   2c674:	cmp	r4, r6
   2c678:	bls	2c748 <__assert_fail@plt+0x19244>
   2c67c:	rsb	r6, r6, r4
   2c680:	cmp	r6, #9
   2c684:	movhi	r6, #10
   2c688:	bls	2c740 <__assert_fail@plt+0x1923c>
   2c68c:	ldrb	r1, [r9, #2]
   2c690:	add	ip, r9, #3
   2c694:	and	r0, r1, #127	; 0x7f
   2c698:	tst	r1, #128	; 0x80
   2c69c:	uxtb	r0, r0
   2c6a0:	lsr	r8, r0, #25
   2c6a4:	lsl	r9, r0, #7
   2c6a8:	str	r8, [sp, #188]	; 0xbc
   2c6ac:	str	r9, [sp, #184]	; 0xb8
   2c6b0:	ldrd	r8, [sp, #184]	; 0xb8
   2c6b4:	orr	r8, r8, r2
   2c6b8:	orr	r9, r9, r3
   2c6bc:	beq	2bbb8 <__assert_fail@plt+0x186b4>
   2c6c0:	str	r6, [sp, #88]	; 0x58
   2c6c4:	mov	r1, #1
   2c6c8:	ldr	fp, [sp, #24]
   2c6cc:	ldr	sl, [sp, #32]
   2c6d0:	ldrd	r6, [sp, #224]	; 0xe0
   2c6d4:	ldr	lr, [sp, #88]	; 0x58
   2c6d8:	add	r1, r1, #1
   2c6dc:	cmp	lr, r1
   2c6e0:	bls	2c728 <__assert_fail@plt+0x19224>
   2c6e4:	ldrb	lr, [ip], #1
   2c6e8:	rsb	r0, r1, r1, lsl #3
   2c6ec:	sub	r5, r0, #32
   2c6f0:	rsb	r4, r0, #32
   2c6f4:	and	r2, lr, #127	; 0x7f
   2c6f8:	tst	lr, #128	; 0x80
   2c6fc:	uxtb	r2, r2
   2c700:	lsl	r7, r2, r5
   2c704:	lsl	r6, r2, r0
   2c708:	orr	r7, r7, r2, lsr r4
   2c70c:	orr	r8, r8, r6
   2c710:	orr	r9, r9, r7
   2c714:	bne	2c6d4 <__assert_fail@plt+0x191d0>
   2c718:	str	fp, [sp, #24]
   2c71c:	str	sl, [sp, #32]
   2c720:	strd	r6, [sp, #224]	; 0xe0
   2c724:	b	2bbb8 <__assert_fail@plt+0x186b4>
   2c728:	str	fp, [sp, #24]
   2c72c:	mvn	r8, #0
   2c730:	str	sl, [sp, #32]
   2c734:	mvn	r9, #0
   2c738:	strd	r6, [sp, #224]	; 0xe0
   2c73c:	b	2bbb8 <__assert_fail@plt+0x186b4>
   2c740:	cmp	r6, #1
   2c744:	bhi	2c68c <__assert_fail@plt+0x19188>
   2c748:	mvn	r8, #0
   2c74c:	mvn	r9, #0
   2c750:	b	2bbb8 <__assert_fail@plt+0x186b4>
   2c754:	ldr	r4, [sp, #24]
   2c758:	cmp	r4, r6
   2c75c:	bls	2cacc <__assert_fail@plt+0x195c8>
   2c760:	rsb	r6, r6, r4
   2c764:	cmp	r6, #9
   2c768:	movhi	r8, #10
   2c76c:	bls	2c81c <__assert_fail@plt+0x19318>
   2c770:	ldrb	r1, [r9, #2]
   2c774:	add	ip, r9, #3
   2c778:	and	r0, r1, #127	; 0x7f
   2c77c:	tst	r1, #128	; 0x80
   2c780:	uxtb	r0, r0
   2c784:	lsr	r6, r0, #25
   2c788:	lsl	r9, r0, #7
   2c78c:	str	r6, [sp, #172]	; 0xac
   2c790:	str	r9, [sp, #168]	; 0xa8
   2c794:	ldrd	r6, [sp, #168]	; 0xa8
   2c798:	orr	r6, r6, r2
   2c79c:	orr	r7, r7, r3
   2c7a0:	bne	2c7b4 <__assert_fail@plt+0x192b0>
   2c7a4:	mov	r8, r6
   2c7a8:	b	2bcac <__assert_fail@plt+0x187a8>
   2c7ac:	rev	r3, r3
   2c7b0:	b	2c098 <__assert_fail@plt+0x18b94>
   2c7b4:	str	r8, [sp, #88]	; 0x58
   2c7b8:	mov	r1, #1
   2c7bc:	ldr	fp, [sp, #24]
   2c7c0:	ldr	sl, [sp, #32]
   2c7c4:	ldrd	r8, [sp, #216]	; 0xd8
   2c7c8:	ldr	lr, [sp, #88]	; 0x58
   2c7cc:	add	r1, r1, #1
   2c7d0:	cmp	r1, lr
   2c7d4:	bcs	2cad8 <__assert_fail@plt+0x195d4>
   2c7d8:	ldrb	lr, [ip], #1
   2c7dc:	rsb	r0, r1, r1, lsl #3
   2c7e0:	sub	r5, r0, #32
   2c7e4:	rsb	r4, r0, #32
   2c7e8:	and	r2, lr, #127	; 0x7f
   2c7ec:	tst	lr, #128	; 0x80
   2c7f0:	uxtb	r2, r2
   2c7f4:	lsl	r9, r2, r5
   2c7f8:	lsl	r8, r2, r0
   2c7fc:	orr	r9, r9, r2, lsr r4
   2c800:	orr	r6, r6, r8
   2c804:	orr	r7, r7, r9
   2c808:	bne	2c7c8 <__assert_fail@plt+0x192c4>
   2c80c:	str	fp, [sp, #24]
   2c810:	str	sl, [sp, #32]
   2c814:	strd	r8, [sp, #216]	; 0xd8
   2c818:	b	2c7a4 <__assert_fail@plt+0x192a0>
   2c81c:	cmp	r6, #1
   2c820:	bls	2cacc <__assert_fail@plt+0x195c8>
   2c824:	mov	r8, r6
   2c828:	b	2c770 <__assert_fail@plt+0x1926c>
   2c82c:	rev	r4, r4
   2c830:	b	2c068 <__assert_fail@plt+0x18b64>
   2c834:	ldr	r9, [sp, #24]
   2c838:	cmp	r9, ip
   2c83c:	bls	2ca18 <__assert_fail@plt+0x19514>
   2c840:	rsb	r9, ip, r9
   2c844:	cmp	r9, #9
   2c848:	movhi	r9, #10
   2c84c:	bls	2ca10 <__assert_fail@plt+0x1950c>
   2c850:	ldrb	r3, [ip, #1]
   2c854:	add	r6, ip, #2
   2c858:	and	r2, r3, #127	; 0x7f
   2c85c:	tst	r3, #128	; 0x80
   2c860:	uxtb	r2, r2
   2c864:	lsr	fp, r2, #25
   2c868:	lsl	ip, r2, #7
   2c86c:	str	fp, [sp, #180]	; 0xb4
   2c870:	str	ip, [sp, #176]	; 0xb0
   2c874:	ldrd	sl, [sp, #176]	; 0xb0
   2c878:	orr	r4, r4, sl
   2c87c:	orr	r5, r5, fp
   2c880:	beq	2bcd4 <__assert_fail@plt+0x187d0>
   2c884:	ldr	fp, [sp, #24]
   2c888:	mov	r1, #1
   2c88c:	ldr	sl, [sp, #32]
   2c890:	mov	lr, r6
   2c894:	add	r1, r1, #1
   2c898:	cmp	r1, r9
   2c89c:	bcs	2caf0 <__assert_fail@plt+0x195ec>
   2c8a0:	ldrb	ip, [lr], #1
   2c8a4:	rsb	r0, r1, r1, lsl #3
   2c8a8:	rsb	r3, r0, #32
   2c8ac:	str	r3, [sp, #88]	; 0x58
   2c8b0:	and	r2, ip, #127	; 0x7f
   2c8b4:	sub	r6, r0, #32
   2c8b8:	tst	ip, #128	; 0x80
   2c8bc:	ldr	ip, [sp, #88]	; 0x58
   2c8c0:	uxtb	r2, r2
   2c8c4:	lsl	r6, r2, r6
   2c8c8:	lsl	r0, r2, r0
   2c8cc:	orr	r6, r6, r2, lsr ip
   2c8d0:	str	r0, [sp, #120]	; 0x78
   2c8d4:	str	r6, [sp, #124]	; 0x7c
   2c8d8:	ldrd	r2, [sp, #120]	; 0x78
   2c8dc:	orr	r4, r4, r2
   2c8e0:	orr	r5, r5, r3
   2c8e4:	bne	2c894 <__assert_fail@plt+0x19390>
   2c8e8:	str	fp, [sp, #24]
   2c8ec:	mov	r6, lr
   2c8f0:	str	sl, [sp, #32]
   2c8f4:	b	2bcd4 <__assert_fail@plt+0x187d0>
   2c8f8:	ldr	sl, [sp, #24]
   2c8fc:	cmp	sl, r3
   2c900:	bls	2cb2c <__assert_fail@plt+0x19628>
   2c904:	rsb	r2, r3, sl
   2c908:	cmp	r2, #9
   2c90c:	movhi	lr, #10
   2c910:	bls	2cb20 <__assert_fail@plt+0x1961c>
   2c914:	ldrb	r1, [r3, #1]
   2c918:	add	r6, r3, #2
   2c91c:	and	r2, r1, #127	; 0x7f
   2c920:	tst	r1, #128	; 0x80
   2c924:	uxtb	r2, r2
   2c928:	lsr	ip, r2, #25
   2c92c:	lsl	r0, r2, #7
   2c930:	str	ip, [sp, #204]	; 0xcc
   2c934:	str	r0, [sp, #200]	; 0xc8
   2c938:	ldrd	sl, [sp, #200]	; 0xc8
   2c93c:	orr	r8, r8, sl
   2c940:	orr	r9, r9, fp
   2c944:	beq	2b9c8 <__assert_fail@plt+0x184c4>
   2c948:	ldr	fp, [sp, #24]
   2c94c:	mov	r1, #1
   2c950:	ldr	sl, [sp, #32]
   2c954:	strd	r4, [sp, #88]	; 0x58
   2c958:	add	r1, r1, #1
   2c95c:	cmp	lr, r1
   2c960:	bls	2cb08 <__assert_fail@plt+0x19604>
   2c964:	ldrb	ip, [r6], #1
   2c968:	rsb	r0, r1, r1, lsl #3
   2c96c:	sub	r5, r0, #32
   2c970:	rsb	r4, r0, #32
   2c974:	and	r2, ip, #127	; 0x7f
   2c978:	tst	ip, #128	; 0x80
   2c97c:	uxtb	r2, r2
   2c980:	lsl	r5, r2, r5
   2c984:	lsl	r0, r2, r0
   2c988:	orr	r4, r5, r2, lsr r4
   2c98c:	str	r0, [sp, #128]	; 0x80
   2c990:	str	r4, [sp, #132]	; 0x84
   2c994:	ldrd	r4, [sp, #128]	; 0x80
   2c998:	orr	r8, r8, r4
   2c99c:	orr	r9, r9, r5
   2c9a0:	bne	2c958 <__assert_fail@plt+0x19454>
   2c9a4:	ldrd	r4, [sp, #88]	; 0x58
   2c9a8:	str	fp, [sp, #24]
   2c9ac:	str	sl, [sp, #32]
   2c9b0:	b	2b9c8 <__assert_fail@plt+0x184c4>
   2c9b4:	ldr	r4, [sp, #24]
   2c9b8:	cmp	r4, r6
   2c9bc:	bls	2ca90 <__assert_fail@plt+0x1958c>
   2c9c0:	rsb	r5, r6, r4
   2c9c4:	cmp	r5, #9
   2c9c8:	movhi	r5, #10
   2c9cc:	bls	2ca88 <__assert_fail@plt+0x19584>
   2c9d0:	ldrb	r1, [r9, #2]
   2c9d4:	add	r7, r9, #3
   2c9d8:	and	r0, r1, #127	; 0x7f
   2c9dc:	tst	r1, #128	; 0x80
   2c9e0:	uxtb	r0, r0
   2c9e4:	lsr	r8, r0, #25
   2c9e8:	lsl	r9, r0, #7
   2c9ec:	str	r8, [sp, #148]	; 0x94
   2c9f0:	str	r9, [sp, #144]	; 0x90
   2c9f4:	ldrd	r8, [sp, #144]	; 0x90
   2c9f8:	orr	r8, r8, r2
   2c9fc:	orr	r9, r9, r3
   2ca00:	bne	2ca24 <__assert_fail@plt+0x19520>
   2ca04:	mov	r5, r8
   2ca08:	mov	r4, r9
   2ca0c:	b	2bea4 <__assert_fail@plt+0x189a0>
   2ca10:	cmp	r9, #1
   2ca14:	bhi	2c850 <__assert_fail@plt+0x1934c>
   2ca18:	mvn	r4, #0
   2ca1c:	mvn	r5, #0
   2ca20:	b	2bcd4 <__assert_fail@plt+0x187d0>
   2ca24:	ldr	fp, [sp, #24]
   2ca28:	mov	r1, #1
   2ca2c:	ldr	sl, [sp, #32]
   2ca30:	add	r1, r1, #1
   2ca34:	cmp	r1, r5
   2ca38:	bcs	2ca9c <__assert_fail@plt+0x19598>
   2ca3c:	ldrb	ip, [r7], #1
   2ca40:	rsb	r0, r1, r1, lsl #3
   2ca44:	sub	r4, r0, #32
   2ca48:	rsb	lr, r0, #32
   2ca4c:	and	r2, ip, #127	; 0x7f
   2ca50:	tst	ip, #128	; 0x80
   2ca54:	uxtb	r2, r2
   2ca58:	lsl	r4, r2, r4
   2ca5c:	lsl	r0, r2, r0
   2ca60:	orr	lr, r4, r2, lsr lr
   2ca64:	str	r0, [sp, #104]	; 0x68
   2ca68:	str	lr, [sp, #108]	; 0x6c
   2ca6c:	ldrd	r2, [sp, #104]	; 0x68
   2ca70:	orr	r8, r8, r2
   2ca74:	orr	r9, r9, r3
   2ca78:	bne	2ca30 <__assert_fail@plt+0x1952c>
   2ca7c:	str	fp, [sp, #24]
   2ca80:	str	sl, [sp, #32]
   2ca84:	b	2ca04 <__assert_fail@plt+0x19500>
   2ca88:	cmp	r5, #1
   2ca8c:	bhi	2c9d0 <__assert_fail@plt+0x194cc>
   2ca90:	mvn	r5, #0
   2ca94:	mov	r4, r5
   2ca98:	b	2bea4 <__assert_fail@plt+0x189a0>
   2ca9c:	mvn	r5, #0
   2caa0:	str	fp, [sp, #24]
   2caa4:	str	sl, [sp, #32]
   2caa8:	mov	r4, r5
   2caac:	b	2bea4 <__assert_fail@plt+0x189a0>
   2cab0:	ldr	r4, [r6, #4]
   2cab4:	mov	r8, #0
   2cab8:	rev	r7, r7
   2cabc:	rev	r4, r4
   2cac0:	b	2c0d4 <__assert_fail@plt+0x18bd0>
   2cac4:	rev	r2, r2
   2cac8:	b	2b894 <__assert_fail@plt+0x18390>
   2cacc:	mvn	r8, #0
   2cad0:	mov	r7, r8
   2cad4:	b	2bcac <__assert_fail@plt+0x187a8>
   2cad8:	strd	r8, [sp, #216]	; 0xd8
   2cadc:	mvn	r8, #0
   2cae0:	str	fp, [sp, #24]
   2cae4:	mov	r7, r8
   2cae8:	str	sl, [sp, #32]
   2caec:	b	2bcac <__assert_fail@plt+0x187a8>
   2caf0:	str	fp, [sp, #24]
   2caf4:	mov	r6, lr
   2caf8:	str	sl, [sp, #32]
   2cafc:	mvn	r4, #0
   2cb00:	mvn	r5, #0
   2cb04:	b	2bcd4 <__assert_fail@plt+0x187d0>
   2cb08:	ldrd	r4, [sp, #88]	; 0x58
   2cb0c:	mvn	r8, #0
   2cb10:	str	fp, [sp, #24]
   2cb14:	mvn	r9, #0
   2cb18:	str	sl, [sp, #32]
   2cb1c:	b	2b9c8 <__assert_fail@plt+0x184c4>
   2cb20:	cmp	r2, #1
   2cb24:	movhi	lr, r2
   2cb28:	bhi	2c914 <__assert_fail@plt+0x19410>
   2cb2c:	mvn	r8, #0
   2cb30:	mvn	r9, #0
   2cb34:	b	2b9c8 <__assert_fail@plt+0x184c4>
   2cb38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb3c:	sub	sp, sp, #108	; 0x6c
   2cb40:	movw	r5, #37688	; 0x9338
   2cb44:	movt	r5, #5
   2cb48:	ldr	r4, [sp, #148]	; 0x94
   2cb4c:	mov	r7, r3
   2cb50:	str	r5, [sp, #52]	; 0x34
   2cb54:	mov	r6, r1
   2cb58:	ldr	ip, [sp, #52]	; 0x34
   2cb5c:	mov	r5, r2
   2cb60:	ldr	sl, [r4, #72]	; 0x48
   2cb64:	str	r4, [sp, #48]	; 0x30
   2cb68:	ldr	r3, [ip]
   2cb6c:	cmp	sl, #0
   2cb70:	str	r0, [sp, #44]	; 0x2c
   2cb74:	ldr	r4, [sp, #144]	; 0x90
   2cb78:	str	r3, [sp, #100]	; 0x64
   2cb7c:	beq	2cf38 <__assert_fail@plt+0x19a34>
   2cb80:	mov	r2, #5
   2cb84:	movw	r1, #60928	; 0xee00
   2cb88:	mov	r0, #0
   2cb8c:	movt	r1, #3
   2cb90:	bl	12d84 <dcgettext@plt>
   2cb94:	mov	r8, r0
   2cb98:	mov	r0, r7
   2cb9c:	bl	133d8 <elf_ndxscn@plt>
   2cba0:	mov	r1, r4
   2cba4:	mov	r7, r0
   2cba8:	add	r0, r6, #16
   2cbac:	bl	1870c <__assert_fail@plt+0x5208>
   2cbb0:	mov	r2, r7
   2cbb4:	mov	r3, r0
   2cbb8:	ldrd	r0, [r4, #24]
   2cbbc:	movw	r4, #37712	; 0x9350
   2cbc0:	movt	r4, #5
   2cbc4:	strd	r0, [sp]
   2cbc8:	mov	r1, r8
   2cbcc:	mov	r0, #1
   2cbd0:	bl	13204 <__printf_chk@plt>
   2cbd4:	ldr	r1, [r4, #152]	; 0x98
   2cbd8:	cmp	r1, #0
   2cbdc:	bne	2cf98 <__assert_fail@plt+0x19a94>
   2cbe0:	ldrb	r3, [r5, #4]
   2cbe4:	mov	r1, #0
   2cbe8:	ldr	r0, [sl, #12]
   2cbec:	mov	r2, #0
   2cbf0:	cmp	r3, #1
   2cbf4:	mov	fp, r1
   2cbf8:	mov	r9, #1
   2cbfc:	mov	r7, r4
   2cc00:	movne	r3, #8
   2cc04:	moveq	r3, #4
   2cc08:	strb	r3, [sp, #59]	; 0x3b
   2cc0c:	mov	r3, #0
   2cc10:	ldr	r8, [sl]
   2cc14:	str	r1, [sp, #60]	; 0x3c
   2cc18:	add	r6, r8, r0
   2cc1c:	strd	r2, [sp, #72]	; 0x48
   2cc20:	str	r8, [sp, #64]	; 0x40
   2cc24:	b	2cc38 <__assert_fail@plt+0x19734>
   2cc28:	cmp	r9, #0
   2cc2c:	moveq	r9, #1
   2cc30:	bne	2cf10 <__assert_fail@plt+0x19a0c>
   2cc34:	ldr	r8, [sp, #64]	; 0x40
   2cc38:	cmp	r8, r6
   2cc3c:	bcs	2cf7c <__assert_fail@plt+0x19a78>
   2cc40:	ldr	r3, [sl]
   2cc44:	cmp	r9, #0
   2cc48:	str	fp, [sp, #68]	; 0x44
   2cc4c:	rsb	r8, r3, r8
   2cc50:	beq	2cc60 <__assert_fail@plt+0x1975c>
   2cc54:	ldr	r3, [r7, #152]	; 0x98
   2cc58:	cmp	r3, #0
   2cc5c:	bne	2ce34 <__assert_fail@plt+0x19930>
   2cc60:	ldr	r2, [sl, #12]
   2cc64:	ldrb	r3, [sp, #59]	; 0x3b
   2cc68:	rsb	r2, r8, r2
   2cc6c:	cmp	r2, r3, lsl #1
   2cc70:	bcc	2cfbc <__assert_fail@plt+0x19ab8>
   2cc74:	ldr	r4, [sp, #48]	; 0x30
   2cc78:	cmp	r3, #8
   2cc7c:	ldr	r1, [sp, #64]	; 0x40
   2cc80:	ldrb	r3, [r4, #84]	; 0x54
   2cc84:	beq	2cd94 <__assert_fail@plt+0x19890>
   2cc88:	cmp	r3, #0
   2cc8c:	ldr	r4, [r1]
   2cc90:	ldr	r0, [r1, #4]
   2cc94:	moveq	r5, #0
   2cc98:	bne	2cfe4 <__assert_fail@plt+0x19ae0>
   2cc9c:	mvn	r2, #0
   2cca0:	mov	r3, #0
   2cca4:	cmp	r5, r3
   2cca8:	cmpeq	r4, r2
   2ccac:	add	r1, r1, #8
   2ccb0:	mov	r2, r0
   2ccb4:	mov	r3, #0
   2ccb8:	str	r1, [sp, #64]	; 0x40
   2ccbc:	strd	r2, [sp, #32]
   2ccc0:	beq	2cdd0 <__assert_fail@plt+0x198cc>
   2ccc4:	ldrd	r2, [sp, #32]
   2ccc8:	orr	r2, r2, r4
   2cccc:	orr	r3, r3, r5
   2ccd0:	orrs	ip, r2, r3
   2ccd4:	beq	2cc28 <__assert_fail@plt+0x19724>
   2ccd8:	cmp	r9, #0
   2ccdc:	beq	2ce20 <__assert_fail@plt+0x1991c>
   2cce0:	movw	r1, #12196	; 0x2fa4
   2cce4:	mov	r2, r8
   2cce8:	mov	r0, #1
   2ccec:	movt	r1, #4
   2ccf0:	bl	13204 <__printf_chk@plt>
   2ccf4:	ldrd	r0, [sp, #32]
   2ccf8:	mov	r2, r4
   2ccfc:	mov	r3, r5
   2cd00:	strd	r0, [sp]
   2cd04:	movw	r1, #12220	; 0x2fbc
   2cd08:	mov	r0, #1
   2cd0c:	movt	r1, #4
   2cd10:	bl	13204 <__printf_chk@plt>
   2cd14:	ldrb	r9, [r7, #33]	; 0x21
   2cd18:	cmp	r9, #0
   2cd1c:	movne	r9, #0
   2cd20:	bne	2cc34 <__assert_fail@plt+0x19730>
   2cd24:	movw	r1, #12208	; 0x2fb0
   2cd28:	mov	r0, #1
   2cd2c:	movt	r1, #4
   2cd30:	bl	13204 <__printf_chk@plt>
   2cd34:	ldrd	r2, [sp, #72]	; 0x48
   2cd38:	ldrb	r1, [sp, #59]	; 0x3b
   2cd3c:	adds	r2, r2, r4
   2cd40:	ldr	r0, [sp, #44]	; 0x2c
   2cd44:	adc	r3, r3, r5
   2cd48:	strd	r2, [sp]
   2cd4c:	bl	27164 <__assert_fail@plt+0x13c60>
   2cd50:	movw	r1, #12240	; 0x2fd0
   2cd54:	mov	r0, #1
   2cd58:	movt	r1, #4
   2cd5c:	bl	13204 <__printf_chk@plt>
   2cd60:	ldrd	r2, [sp, #72]	; 0x48
   2cd64:	ldrd	r4, [sp, #32]
   2cd68:	ldr	r0, [sp, #44]	; 0x2c
   2cd6c:	adds	r2, r2, r4
   2cd70:	ldrb	r1, [sp, #59]	; 0x3b
   2cd74:	adc	r3, r3, r5
   2cd78:	strd	r2, [sp]
   2cd7c:	subs	r2, r2, #1
   2cd80:	sbc	r3, r3, #0
   2cd84:	bl	27164 <__assert_fail@plt+0x13c60>
   2cd88:	mov	r0, #10
   2cd8c:	bl	131b0 <putchar@plt>
   2cd90:	b	2cc34 <__assert_fail@plt+0x19730>
   2cd94:	cmp	r3, #0
   2cd98:	bne	2cff4 <__assert_fail@plt+0x19af0>
   2cd9c:	ldr	ip, [r1, #8]
   2cda0:	ldr	r0, [r1, #12]
   2cda4:	ldr	r4, [r1]
   2cda8:	ldr	r5, [r1, #4]
   2cdac:	str	ip, [sp, #32]
   2cdb0:	str	r0, [sp, #36]	; 0x24
   2cdb4:	mvn	r2, #0
   2cdb8:	mvn	r3, #0
   2cdbc:	cmp	r5, r3
   2cdc0:	cmpeq	r4, r2
   2cdc4:	add	r1, r1, #16
   2cdc8:	str	r1, [sp, #64]	; 0x40
   2cdcc:	bne	2ccc4 <__assert_fail@plt+0x197c0>
   2cdd0:	mov	r2, #5
   2cdd4:	movw	r1, #12144	; 0x2f70
   2cdd8:	mov	r0, #0
   2cddc:	movt	r1, #4
   2cde0:	bl	12d84 <dcgettext@plt>
   2cde4:	mov	r2, r8
   2cde8:	mov	r1, r0
   2cdec:	mov	r0, #1
   2cdf0:	bl	13204 <__printf_chk@plt>
   2cdf4:	ldrd	r4, [sp, #32]
   2cdf8:	ldrb	r1, [sp, #59]	; 0x3b
   2cdfc:	ldr	r0, [sp, #44]	; 0x2c
   2ce00:	mov	r2, r4
   2ce04:	mov	r3, r5
   2ce08:	strd	r4, [sp]
   2ce0c:	bl	27164 <__assert_fail@plt+0x13c60>
   2ce10:	mov	r0, #10
   2ce14:	bl	131b0 <putchar@plt>
   2ce18:	strd	r4, [sp, #72]	; 0x48
   2ce1c:	b	2cc34 <__assert_fail@plt+0x19730>
   2ce20:	movw	r1, #12208	; 0x2fb0
   2ce24:	mov	r0, #1
   2ce28:	movt	r1, #4
   2ce2c:	bl	13204 <__printf_chk@plt>
   2ce30:	b	2ccf4 <__assert_fail@plt+0x197f0>
   2ce34:	ldr	r0, [pc, #520]	; 2d044 <__assert_fail@plt+0x19b40>
   2ce38:	mov	r3, #0
   2ce3c:	add	r2, sp, #72	; 0x48
   2ce40:	str	r3, [sp]
   2ce44:	add	lr, sp, #68	; 0x44
   2ce48:	str	r3, [sp, #24]
   2ce4c:	add	ip, sp, #64	; 0x40
   2ce50:	str	r2, [sp, #4]
   2ce54:	str	r8, [sp, #12]
   2ce58:	add	r1, r0, #8
   2ce5c:	str	r6, [sp, #20]
   2ce60:	add	r2, sp, #60	; 0x3c
   2ce64:	str	lr, [sp, #8]
   2ce68:	add	r3, sp, #59	; 0x3b
   2ce6c:	str	ip, [sp, #16]
   2ce70:	bl	1e19c <__assert_fail@plt+0xac98>
   2ce74:	subs	r4, r0, #0
   2ce78:	bne	2cc34 <__assert_fail@plt+0x19730>
   2ce7c:	ldr	r0, [sp, #68]	; 0x44
   2ce80:	cmp	fp, r0
   2ce84:	beq	2cc60 <__assert_fail@plt+0x1975c>
   2ce88:	str	r4, [sp]
   2ce8c:	add	r1, sp, #84	; 0x54
   2ce90:	str	r4, [sp, #4]
   2ce94:	mov	r2, r4
   2ce98:	str	r4, [sp, #8]
   2ce9c:	mov	r3, r4
   2cea0:	str	r4, [sp, #12]
   2cea4:	bl	131ec <dwarf_cu_die@plt>
   2cea8:	cmp	r0, #0
   2ceac:	beq	2d024 <__assert_fail@plt+0x19b20>
   2ceb0:	mov	r2, #5
   2ceb4:	mov	r0, r4
   2ceb8:	movw	r1, #12096	; 0x2f40
   2cebc:	movt	r1, #4
   2cec0:	bl	12d84 <dcgettext@plt>
   2cec4:	mov	r4, r0
   2cec8:	add	r0, sp, #84	; 0x54
   2cecc:	bl	12f28 <dwarf_dieoffset@plt>
   2ced0:	mov	r2, r0
   2ced4:	mov	r3, r1
   2ced8:	mov	r0, #1
   2cedc:	mov	r1, r4
   2cee0:	bl	13204 <__printf_chk@plt>
   2cee4:	ldrd	r4, [sp, #72]	; 0x48
   2cee8:	ldr	r0, [sp, #44]	; 0x2c
   2ceec:	ldrb	r1, [sp, #59]	; 0x3b
   2cef0:	mov	r2, r4
   2cef4:	mov	r3, r5
   2cef8:	strd	r4, [sp]
   2cefc:	bl	27164 <__assert_fail@plt+0x13c60>
   2cf00:	mov	r0, #10
   2cf04:	bl	131b0 <putchar@plt>
   2cf08:	ldr	fp, [sp, #68]	; 0x44
   2cf0c:	b	2cc60 <__assert_fail@plt+0x1975c>
   2cf10:	mov	r2, #5
   2cf14:	movw	r1, #12176	; 0x2f90
   2cf18:	mov	r0, #0
   2cf1c:	movt	r1, #4
   2cf20:	bl	12d84 <dcgettext@plt>
   2cf24:	mov	r2, r8
   2cf28:	mov	r1, r0
   2cf2c:	mov	r0, #1
   2cf30:	bl	13204 <__printf_chk@plt>
   2cf34:	b	2cc34 <__assert_fail@plt+0x19730>
   2cf38:	mov	r1, sl
   2cf3c:	mov	r0, r7
   2cf40:	bl	131bc <elf_rawdata@plt>
   2cf44:	subs	sl, r0, #0
   2cf48:	bne	2cb80 <__assert_fail@plt+0x1967c>
   2cf4c:	mov	r2, #5
   2cf50:	movw	r1, #12020	; 0x2ef4
   2cf54:	movt	r1, #4
   2cf58:	bl	12d84 <dcgettext@plt>
   2cf5c:	mov	r4, r0
   2cf60:	mvn	r0, #0
   2cf64:	bl	130a8 <elf_errmsg@plt>
   2cf68:	mov	r1, sl
   2cf6c:	mov	r2, r4
   2cf70:	mov	r3, r0
   2cf74:	mov	r0, sl
   2cf78:	bl	12f70 <error@plt>
   2cf7c:	ldr	r5, [sp, #52]	; 0x34
   2cf80:	ldr	r2, [sp, #100]	; 0x64
   2cf84:	ldr	r3, [r5]
   2cf88:	cmp	r2, r3
   2cf8c:	bne	2d020 <__assert_fail@plt+0x19b1c>
   2cf90:	add	sp, sp, #108	; 0x6c
   2cf94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf98:	ldr	r0, [r4, #160]	; 0xa0
   2cf9c:	movw	r2, #12060	; 0x2f1c
   2cfa0:	movw	r3, #57200	; 0xdf70
   2cfa4:	movt	r2, #4
   2cfa8:	movt	r3, #1
   2cfac:	str	r2, [sp]
   2cfb0:	mov	r2, #16
   2cfb4:	bl	130c0 <qsort_r@plt>
   2cfb8:	b	2cbe0 <__assert_fail@plt+0x196dc>
   2cfbc:	mov	r2, #5
   2cfc0:	movw	r1, #12116	; 0x2f54
   2cfc4:	mov	r0, #0
   2cfc8:	movt	r1, #4
   2cfcc:	bl	12d84 <dcgettext@plt>
   2cfd0:	mov	r2, r8
   2cfd4:	mov	r1, r0
   2cfd8:	mov	r0, #1
   2cfdc:	bl	13204 <__printf_chk@plt>
   2cfe0:	b	2cf7c <__assert_fail@plt+0x19a78>
   2cfe4:	rev	r4, r4
   2cfe8:	mov	r5, #0
   2cfec:	rev	r0, r0
   2cff0:	b	2cc9c <__assert_fail@plt+0x19798>
   2cff4:	ldr	r0, [r1, #4]
   2cff8:	ldr	r2, [r1]
   2cffc:	ldr	r3, [r1, #8]
   2d000:	rev	r4, r0
   2d004:	ldr	r0, [r1, #12]
   2d008:	rev	r5, r2
   2d00c:	rev	r3, r3
   2d010:	str	r3, [sp, #36]	; 0x24
   2d014:	rev	r0, r0
   2d018:	str	r0, [sp, #32]
   2d01c:	b	2cdb4 <__assert_fail@plt+0x198b0>
   2d020:	bl	12dc0 <__stack_chk_fail@plt>
   2d024:	mov	r2, #5
   2d028:	movw	r1, #12076	; 0x2f2c
   2d02c:	movt	r1, #4
   2d030:	bl	12d84 <dcgettext@plt>
   2d034:	mov	r1, r0
   2d038:	mov	r0, #1
   2d03c:	bl	13204 <__printf_chk@plt>
   2d040:	b	2cee4 <__assert_fail@plt+0x199e0>
   2d044:	andeq	r9, r5, r8, ror #7
   2d048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d04c:	movw	r4, #37688	; 0x9338
   2d050:	sub	sp, sp, #396	; 0x18c
   2d054:	movt	r4, #5
   2d058:	mov	r2, #5
   2d05c:	add	r1, r1, #16
   2d060:	ldr	ip, [r4]
   2d064:	ldr	r5, [sp, #432]	; 0x1b0
   2d068:	str	r0, [sp, #88]	; 0x58
   2d06c:	mov	r0, #0
   2d070:	str	r1, [sp, #336]	; 0x150
   2d074:	movw	r1, #60928	; 0xee00
   2d078:	movt	r1, #3
   2d07c:	str	r3, [sp, #108]	; 0x6c
   2d080:	str	ip, [sp, #388]	; 0x184
   2d084:	str	r4, [sp, #92]	; 0x5c
   2d088:	str	r5, [sp, #104]	; 0x68
   2d08c:	ldr	r7, [sp, #436]	; 0x1b4
   2d090:	bl	12d84 <dcgettext@plt>
   2d094:	mov	r5, r0
   2d098:	ldr	r0, [sp, #108]	; 0x6c
   2d09c:	bl	133d8 <elf_ndxscn@plt>
   2d0a0:	ldr	r1, [sp, #104]	; 0x68
   2d0a4:	mov	r4, r0
   2d0a8:	ldr	r0, [sp, #336]	; 0x150
   2d0ac:	bl	1870c <__assert_fail@plt+0x5208>
   2d0b0:	ldr	r6, [sp, #104]	; 0x68
   2d0b4:	mov	r1, r5
   2d0b8:	mov	r2, r4
   2d0bc:	ldrd	r8, [r6, #24]
   2d0c0:	strd	r8, [sp]
   2d0c4:	mov	r3, r0
   2d0c8:	mov	r0, #1
   2d0cc:	bl	13204 <__printf_chk@plt>
   2d0d0:	ldr	r8, [r7, #48]	; 0x30
   2d0d4:	cmp	r8, #0
   2d0d8:	str	r8, [sp, #64]	; 0x40
   2d0dc:	beq	2e2ac <__assert_fail@plt+0x1ada8>
   2d0e0:	movw	ip, #37712	; 0x9350
   2d0e4:	movt	ip, #5
   2d0e8:	str	ip, [sp, #80]	; 0x50
   2d0ec:	ldr	r1, [ip, #140]	; 0x8c
   2d0f0:	cmp	r1, #0
   2d0f4:	bne	2de90 <__assert_fail@plt+0x1a98c>
   2d0f8:	ldr	r4, [sp, #64]	; 0x40
   2d0fc:	mov	r2, #0
   2d100:	ldr	fp, [r4]
   2d104:	ldr	r3, [r4, #12]
   2d108:	str	r2, [sp, #344]	; 0x158
   2d10c:	add	sl, fp, r3
   2d110:	cmp	fp, sl
   2d114:	bcs	2de44 <__assert_fail@plt+0x1a940>
   2d118:	sub	r5, sl, #4
   2d11c:	str	r5, [sp, #76]	; 0x4c
   2d120:	cmp	fp, r5
   2d124:	subls	r8, sl, #8
   2d128:	strls	r8, [sp, #72]	; 0x48
   2d12c:	movls	r6, fp
   2d130:	movls	r9, r7
   2d134:	bls	2d1a8 <__assert_fail@plt+0x19ca4>
   2d138:	b	2ddfc <__assert_fail@plt+0x1a8f8>
   2d13c:	movw	r1, #61284	; 0xef64
   2d140:	movt	r1, #3
   2d144:	mov	r0, #0
   2d148:	mov	r2, #5
   2d14c:	bl	12d84 <dcgettext@plt>
   2d150:	mov	r2, r0
   2d154:	mov	r0, #0
   2d158:	mov	r1, r0
   2d15c:	bl	12f70 <error@plt>
   2d160:	cmp	fp, r6
   2d164:	beq	2d18c <__assert_fail@plt+0x19c88>
   2d168:	mov	r2, #5
   2d16c:	movw	r1, #11996	; 0x2edc
   2d170:	mov	r0, #0
   2d174:	movt	r1, #4
   2d178:	bl	12d84 <dcgettext@plt>
   2d17c:	rsb	r2, r6, fp
   2d180:	mov	r1, r0
   2d184:	mov	r0, #1
   2d188:	bl	13204 <__printf_chk@plt>
   2d18c:	cmp	sl, fp
   2d190:	bls	2de44 <__assert_fail@plt+0x1a940>
   2d194:	ldr	r6, [sp, #76]	; 0x4c
   2d198:	cmp	fp, r6
   2d19c:	bhi	2ddfc <__assert_fail@plt+0x1a8f8>
   2d1a0:	ldr	r7, [sp, #64]	; 0x40
   2d1a4:	ldr	r6, [r7]
   2d1a8:	mov	r2, #5
   2d1ac:	movw	r1, #11488	; 0x2ce0
   2d1b0:	mov	r0, #0
   2d1b4:	movt	r1, #4
   2d1b8:	bl	12d84 <dcgettext@plt>
   2d1bc:	rsb	r6, r6, fp
   2d1c0:	asr	r5, r6, #31
   2d1c4:	mov	r2, r6
   2d1c8:	mov	r4, r6
   2d1cc:	strd	r4, [sp, #48]	; 0x30
   2d1d0:	mov	r3, r5
   2d1d4:	mov	r1, r0
   2d1d8:	mov	r0, #1
   2d1dc:	bl	13204 <__printf_chk@plt>
   2d1e0:	ldrb	r3, [r9, #84]	; 0x54
   2d1e4:	ldr	r4, [fp]
   2d1e8:	cmp	r3, #0
   2d1ec:	bne	2e38c <__assert_fail@plt+0x1ae88>
   2d1f0:	cmn	r4, #1
   2d1f4:	mov	r0, r4
   2d1f8:	mov	r1, #0
   2d1fc:	add	r7, fp, #4
   2d200:	movne	r8, #4
   2d204:	strd	r0, [sp, #32]
   2d208:	strne	r8, [sp, #68]	; 0x44
   2d20c:	beq	2e398 <__assert_fail@plt+0x1ae94>
   2d210:	mov	r2, #5
   2d214:	movw	r1, #11516	; 0x2cfc
   2d218:	mov	r0, #0
   2d21c:	movt	r1, #4
   2d220:	bl	12d84 <dcgettext@plt>
   2d224:	ldrd	r2, [sp, #32]
   2d228:	mov	r1, r0
   2d22c:	mov	r0, #1
   2d230:	bl	13204 <__printf_chk@plt>
   2d234:	ldr	ip, [sp, #72]	; 0x48
   2d238:	cmp	r7, ip
   2d23c:	bhi	2ddfc <__assert_fail@plt+0x1a8f8>
   2d240:	ldrd	r4, [sp, #32]
   2d244:	cmp	r5, #0
   2d248:	cmpeq	r4, #7
   2d24c:	bls	2ddfc <__assert_fail@plt+0x1a8f8>
   2d250:	rsb	r2, r7, sl
   2d254:	asr	r3, r2, #31
   2d258:	cmp	r5, r3
   2d25c:	cmpeq	r4, r2
   2d260:	bhi	2ddfc <__assert_fail@plt+0x1a8f8>
   2d264:	ldrb	r3, [r9, #84]	; 0x54
   2d268:	movw	r1, #11540	; 0x2d14
   2d26c:	mov	r0, #0
   2d270:	movt	r1, #4
   2d274:	cmp	r3, #0
   2d278:	add	fp, r7, r4
   2d27c:	add	r6, r7, #2
   2d280:	ldrhne	r3, [r7]
   2d284:	ldrheq	r8, [r7]
   2d288:	lslne	r2, r3, #8
   2d28c:	orrne	r3, r2, r3, lsr #8
   2d290:	mov	r2, #5
   2d294:	uxthne	r8, r3
   2d298:	bl	12d84 <dcgettext@plt>
   2d29c:	mov	r2, r8
   2d2a0:	mov	r1, r0
   2d2a4:	mov	r0, #1
   2d2a8:	bl	13204 <__printf_chk@plt>
   2d2ac:	cmp	r8, #5
   2d2b0:	bne	2d13c <__assert_fail@plt+0x19c38>
   2d2b4:	ldrb	r5, [r7, #2]
   2d2b8:	mov	r2, r8
   2d2bc:	movw	r1, #11564	; 0x2d2c
   2d2c0:	mov	r0, #0
   2d2c4:	movt	r1, #4
   2d2c8:	str	r5, [sp, #56]	; 0x38
   2d2cc:	bl	12d84 <dcgettext@plt>
   2d2d0:	ldr	r4, [sp, #56]	; 0x38
   2d2d4:	mov	r5, #0
   2d2d8:	mov	r3, r5
   2d2dc:	uxtb	r4, r4
   2d2e0:	mov	r2, r4
   2d2e4:	mov	r1, r0
   2d2e8:	mov	r0, #1
   2d2ec:	bl	13204 <__printf_chk@plt>
   2d2f0:	ldr	r5, [sp, #56]	; 0x38
   2d2f4:	cmp	r5, #8
   2d2f8:	cmpne	r5, #4
   2d2fc:	moveq	ip, #0
   2d300:	movne	ip, #1
   2d304:	beq	2d334 <__assert_fail@plt+0x19e30>
   2d308:	mov	r2, r8
   2d30c:	movw	r1, #11588	; 0x2d44
   2d310:	mov	r0, #0
   2d314:	movt	r1, #4
   2d318:	bl	12d84 <dcgettext@plt>
   2d31c:	add	r6, r7, #3
   2d320:	mov	r2, r0
   2d324:	mov	r0, #0
   2d328:	mov	r1, r0
   2d32c:	bl	12f70 <error@plt>
   2d330:	b	2d160 <__assert_fail@plt+0x19c5c>
   2d334:	mov	r0, ip
   2d338:	mov	r2, r8
   2d33c:	movw	r1, #11616	; 0x2d60
   2d340:	movt	r1, #4
   2d344:	ldrb	r7, [r6, #1]
   2d348:	add	r4, r6, #2
   2d34c:	str	ip, [sp, #44]	; 0x2c
   2d350:	str	r4, [sp, #84]	; 0x54
   2d354:	bl	12d84 <dcgettext@plt>
   2d358:	uxtb	r2, r7
   2d35c:	mov	r3, #0
   2d360:	mov	r1, r0
   2d364:	mov	r0, #1
   2d368:	bl	13204 <__printf_chk@plt>
   2d36c:	cmp	r7, #0
   2d370:	ldr	ip, [sp, #44]	; 0x2c
   2d374:	bne	2de60 <__assert_fail@plt+0x1a95c>
   2d378:	ldrb	r3, [r9, #84]	; 0x54
   2d37c:	ldr	r6, [r6, #2]
   2d380:	cmp	r3, #0
   2d384:	bne	2edec <__assert_fail@plt+0x1b8e8>
   2d388:	mov	r2, #5
   2d38c:	movw	r1, #11668	; 0x2d94
   2d390:	mov	r0, #0
   2d394:	movt	r1, #4
   2d398:	bl	12d84 <dcgettext@plt>
   2d39c:	mov	r5, #0
   2d3a0:	mov	r3, r5
   2d3a4:	mov	r2, r6
   2d3a8:	mov	r4, r6
   2d3ac:	strd	r4, [sp, #96]	; 0x60
   2d3b0:	add	r7, sp, #352	; 0x160
   2d3b4:	mov	r1, r0
   2d3b8:	mov	r0, #1
   2d3bc:	bl	13204 <__printf_chk@plt>
   2d3c0:	ldrd	r4, [sp, #48]	; 0x30
   2d3c4:	ldr	r0, [pc, #4040]	; 2e394 <__assert_fail@plt+0x1ae90>
   2d3c8:	add	ip, sp, #348	; 0x15c
   2d3cc:	mov	lr, #0
   2d3d0:	strd	r4, [sp]
   2d3d4:	add	r1, r0, #8
   2d3d8:	ldr	r5, [sp, #64]	; 0x40
   2d3dc:	mov	r4, #0
   2d3e0:	ldr	r8, [r5]
   2d3e4:	mov	r5, #0
   2d3e8:	str	r7, [sp, #16]
   2d3ec:	add	r7, sp, #512	; 0x200
   2d3f0:	rsb	r8, r8, fp
   2d3f4:	str	ip, [sp, #20]
   2d3f8:	str	lr, [sp, #348]	; 0x15c
   2d3fc:	mov	r2, r8
   2d400:	asr	r3, r8, #31
   2d404:	strd	r2, [sp, #8]
   2d408:	add	r2, sp, #344	; 0x158
   2d40c:	strd	r4, [r7, #-160]	; 0xffffff60
   2d410:	str	ip, [sp, #44]	; 0x2c
   2d414:	bl	1e3b8 <__assert_fail@plt+0xaeb4>
   2d418:	ldr	r8, [sp, #84]	; 0x54
   2d41c:	ldr	ip, [sp, #44]	; 0x2c
   2d420:	add	r8, r8, #4
   2d424:	str	r8, [sp, #84]	; 0x54
   2d428:	mov	r7, r8
   2d42c:	cmp	r0, #0
   2d430:	bne	2d44c <__assert_fail@plt+0x19f48>
   2d434:	mov	r1, ip
   2d438:	add	r2, sp, #352	; 0x160
   2d43c:	mov	r0, r9
   2d440:	bl	1d2e4 <__assert_fail@plt+0x9de0>
   2d444:	cmp	r0, #0
   2d448:	beq	2e074 <__assert_fail@plt+0x1ab70>
   2d44c:	mov	r8, #0
   2d450:	ldr	r0, [sp, #348]	; 0x15c
   2d454:	str	r8, [sp]
   2d458:	add	r1, sp, #368	; 0x170
   2d45c:	str	r8, [sp, #4]
   2d460:	mov	r2, r8
   2d464:	str	r8, [sp, #8]
   2d468:	mov	r3, r8
   2d46c:	str	r8, [sp, #12]
   2d470:	bl	131ec <dwarf_cu_die@plt>
   2d474:	cmp	r0, r8
   2d478:	beq	2e1dc <__assert_fail@plt+0x1acd8>
   2d47c:	mov	r2, #5
   2d480:	mov	r0, r8
   2d484:	movw	r1, #11712	; 0x2dc0
   2d488:	movt	r1, #4
   2d48c:	bl	12d84 <dcgettext@plt>
   2d490:	mov	r8, r0
   2d494:	add	r0, sp, #368	; 0x170
   2d498:	bl	12f28 <dwarf_dieoffset@plt>
   2d49c:	mov	r2, r0
   2d4a0:	mov	r3, r1
   2d4a4:	mov	r0, #1
   2d4a8:	mov	r1, r8
   2d4ac:	bl	13204 <__printf_chk@plt>
   2d4b0:	add	ip, sp, #512	; 0x200
   2d4b4:	ldr	r0, [sp, #88]	; 0x58
   2d4b8:	ldr	r1, [sp, #56]	; 0x38
   2d4bc:	ldrd	r2, [ip, #-160]	; 0xffffff60
   2d4c0:	mov	r4, r2
   2d4c4:	mov	r5, r3
   2d4c8:	strd	r4, [sp]
   2d4cc:	bl	27164 <__assert_fail@plt+0x13c60>
   2d4d0:	mov	r0, #10
   2d4d4:	bl	131b0 <putchar@plt>
   2d4d8:	mov	r0, #10
   2d4dc:	bl	131b0 <putchar@plt>
   2d4e0:	cmp	r6, #0
   2d4e4:	beq	2d5dc <__assert_fail@plt+0x1a0d8>
   2d4e8:	ldrd	r0, [sp, #32]
   2d4ec:	mov	r3, #0
   2d4f0:	ldr	r2, [sp, #68]	; 0x44
   2d4f4:	subs	r0, r0, #8
   2d4f8:	sbc	r1, r1, #0
   2d4fc:	bl	3bba0 <__assert_fail@plt+0x2869c>
   2d500:	mov	r4, r0
   2d504:	mov	r5, r1
   2d508:	ldrd	r0, [sp, #96]	; 0x60
   2d50c:	cmp	r1, r5
   2d510:	cmpeq	r0, r4
   2d514:	bhi	2e094 <__assert_fail@plt+0x1ab90>
   2d518:	mov	r2, #5
   2d51c:	movw	r1, #11800	; 0x2e18
   2d520:	mov	r0, #0
   2d524:	movt	r1, #4
   2d528:	bl	12d84 <dcgettext@plt>
   2d52c:	ldr	r8, [sp, #64]	; 0x40
   2d530:	ldr	ip, [sp, #84]	; 0x54
   2d534:	ldr	r2, [r8]
   2d538:	rsb	r2, r2, ip
   2d53c:	asr	r3, r2, #31
   2d540:	mov	r1, r0
   2d544:	mov	r0, #1
   2d548:	bl	13204 <__printf_chk@plt>
   2d54c:	mov	r4, #0
   2d550:	ldr	r5, [sp, #68]	; 0x44
   2d554:	b	2d588 <__assert_fail@plt+0x1a084>
   2d558:	cmp	r3, #0
   2d55c:	ldreq	r2, [r7]
   2d560:	ldreq	r3, [r7, #4]
   2d564:	bne	2e3d4 <__assert_fail@plt+0x1aed0>
   2d568:	movw	r1, #61948	; 0xf1fc
   2d56c:	mov	r0, #1
   2d570:	movt	r1, #3
   2d574:	add	r4, r4, #1
   2d578:	bl	13204 <__printf_chk@plt>
   2d57c:	cmp	r4, r6
   2d580:	add	r7, r7, #8
   2d584:	bcs	2d5d4 <__assert_fail@plt+0x1a0d0>
   2d588:	movw	r1, #11832	; 0x2e38
   2d58c:	mov	r0, #1
   2d590:	movt	r1, #4
   2d594:	mov	r2, r4
   2d598:	bl	13204 <__printf_chk@plt>
   2d59c:	cmp	r5, #4
   2d5a0:	ldrb	r3, [r9, #84]	; 0x54
   2d5a4:	bne	2d558 <__assert_fail@plt+0x1a054>
   2d5a8:	cmp	r3, #0
   2d5ac:	ldr	r2, [r7]
   2d5b0:	bne	2e3cc <__assert_fail@plt+0x1aec8>
   2d5b4:	movw	r1, #60084	; 0xeab4
   2d5b8:	mov	r0, #1
   2d5bc:	movt	r1, #3
   2d5c0:	add	r4, r4, #1
   2d5c4:	bl	13204 <__printf_chk@plt>
   2d5c8:	cmp	r4, r6
   2d5cc:	add	r7, r7, #4
   2d5d0:	bcc	2d588 <__assert_fail@plt+0x1a084>
   2d5d4:	mov	r0, #10
   2d5d8:	bl	131b0 <putchar@plt>
   2d5dc:	add	r5, sp, #512	; 0x200
   2d5e0:	cmp	fp, r7
   2d5e4:	ldrd	r4, [r5, #-160]	; 0xffffff60
   2d5e8:	strd	r4, [sp, #48]	; 0x30
   2d5ec:	bls	2e384 <__assert_fail@plt+0x1ae80>
   2d5f0:	ldr	r6, [sp, #56]	; 0x38
   2d5f4:	mov	r3, #1
   2d5f8:	str	sl, [sp, #96]	; 0x60
   2d5fc:	str	r9, [sp, #32]
   2d600:	str	r6, [sp, #340]	; 0x154
   2d604:	ldrb	r4, [r7]
   2d608:	add	sl, r7, #1
   2d60c:	cmp	r4, #0
   2d610:	movne	r2, #0
   2d614:	andeq	r2, r3, #1
   2d618:	cmp	r2, #0
   2d61c:	bne	2dda8 <__assert_fail@plt+0x1a8a4>
   2d620:	cmp	r3, #0
   2d624:	bne	2ddb0 <__assert_fail@plt+0x1a8ac>
   2d628:	cmp	r4, #8
   2d62c:	mov	r1, r4
   2d630:	movwls	r3, #50660	; 0xc5e4
   2d634:	movtls	r3, #3
   2d638:	addls	r3, r3, r4, lsl #2
   2d63c:	movhi	r0, #0
   2d640:	ldrls	r0, [r3, #1960]	; 0x7a8
   2d644:	mov	r3, #0
   2d648:	mov	r2, r3
   2d64c:	str	r3, [sp]
   2d650:	bl	165c0 <__assert_fail@plt+0x30bc>
   2d654:	movw	r1, #11876	; 0x2e64
   2d658:	movt	r1, #4
   2d65c:	mov	r2, r0
   2d660:	mov	r0, #1
   2d664:	bl	13204 <__printf_chk@plt>
   2d668:	cmp	r4, #8
   2d66c:	ldrls	pc, [pc, r4, lsl #2]
   2d670:	b	2e1c0 <__assert_fail@plt+0x1acbc>
   2d674:	muleq	r2, r4, sp
   2d678:	andeq	sp, r2, r0, lsr ip
   2d67c:	muleq	r2, r0, ip
   2d680:	andeq	sp, r2, r0, asr #22
   2d684:	andeq	sp, r2, ip, ror #20
   2d688:	andeq	sp, r2, r0, ror #19
   2d68c:	andeq	sp, r2, ip, lsr #18
   2d690:	strdeq	sp, [r2], -r4
   2d694:	muleq	r2, r8, r6
   2d698:	ldr	r6, [sp, #340]	; 0x154
   2d69c:	rsb	r3, sl, fp
   2d6a0:	cmp	r6, #4
   2d6a4:	beq	2df44 <__assert_fail@plt+0x1aa40>
   2d6a8:	cmp	r3, #7
   2d6ac:	bls	2e1c0 <__assert_fail@plt+0x1acbc>
   2d6b0:	ldr	r9, [sp, #32]
   2d6b4:	ldrb	r3, [r9, #84]	; 0x54
   2d6b8:	cmp	r3, #0
   2d6bc:	ldreq	r4, [r7, #1]
   2d6c0:	ldreq	r5, [r7, #5]
   2d6c4:	bne	2eebc <__assert_fail@plt+0x1b9b8>
   2d6c8:	add	sl, sl, #8
   2d6cc:	cmp	fp, sl
   2d6d0:	beq	2e1c0 <__assert_fail@plt+0x1acbc>
   2d6d4:	ldrb	r6, [sl]
   2d6d8:	add	ip, sl, #1
   2d6dc:	mov	r7, #0
   2d6e0:	tst	r6, #128	; 0x80
   2d6e4:	and	r6, r6, #127	; 0x7f
   2d6e8:	uxtb	r6, r6
   2d6ec:	bne	2e938 <__assert_fail@plt+0x1b434>
   2d6f0:	mov	r3, r5
   2d6f4:	strd	r6, [sp]
   2d6f8:	movw	r1, #11980	; 0x2ecc
   2d6fc:	mov	r0, #1
   2d700:	movt	r1, #4
   2d704:	mov	r2, r4
   2d708:	str	ip, [sp, #44]	; 0x2c
   2d70c:	bl	13204 <__printf_chk@plt>
   2d710:	ldr	r8, [sp, #80]	; 0x50
   2d714:	ldr	ip, [sp, #44]	; 0x2c
   2d718:	ldrb	r3, [r8, #33]	; 0x21
   2d71c:	cmp	r3, #0
   2d720:	beq	2e158 <__assert_fail@plt+0x1ac54>
   2d724:	cmp	fp, ip
   2d728:	beq	2e2f8 <__assert_fail@plt+0x1adf4>
   2d72c:	ldrb	r6, [ip]
   2d730:	add	sl, ip, #1
   2d734:	mov	r7, #0
   2d738:	tst	r6, #128	; 0x80
   2d73c:	and	r6, r6, #127	; 0x7f
   2d740:	uxtb	r6, r6
   2d744:	beq	2dbe8 <__assert_fail@plt+0x1a6e4>
   2d748:	cmp	fp, ip
   2d74c:	bls	2e910 <__assert_fail@plt+0x1b40c>
   2d750:	rsb	r5, ip, fp
   2d754:	cmp	r5, #9
   2d758:	movhi	r5, #10
   2d75c:	bls	2ea18 <__assert_fail@plt+0x1b514>
   2d760:	ldrb	r3, [ip, #1]
   2d764:	add	r1, sp, #512	; 0x200
   2d768:	add	sl, ip, #2
   2d76c:	and	r2, r3, #127	; 0x7f
   2d770:	tst	r3, #128	; 0x80
   2d774:	uxtb	r2, r2
   2d778:	lsr	ip, r2, #25
   2d77c:	lsl	lr, r2, #7
   2d780:	str	ip, [sp, #332]	; 0x14c
   2d784:	str	lr, [sp, #328]	; 0x148
   2d788:	ldrd	r0, [r1, #-184]	; 0xffffff48
   2d78c:	orr	r6, r6, r0
   2d790:	orr	r7, r7, r1
   2d794:	beq	2dbe8 <__assert_fail@plt+0x1a6e4>
   2d798:	ldr	r8, [sp, #340]	; 0x154
   2d79c:	mov	r1, #1
   2d7a0:	ldr	r9, [sp, #32]
   2d7a4:	add	r1, r1, #1
   2d7a8:	cmp	r5, r1
   2d7ac:	bls	2e8e0 <__assert_fail@plt+0x1b3dc>
   2d7b0:	ldrb	ip, [sl], #1
   2d7b4:	rsb	r0, r1, r1, lsl #3
   2d7b8:	sub	r4, r0, #32
   2d7bc:	rsb	lr, r0, #32
   2d7c0:	and	r2, ip, #127	; 0x7f
   2d7c4:	tst	ip, #128	; 0x80
   2d7c8:	uxtb	r2, r2
   2d7cc:	lsl	r4, r2, r4
   2d7d0:	lsl	r0, r2, r0
   2d7d4:	orr	lr, r4, r2, lsr lr
   2d7d8:	str	r0, [sp, #216]	; 0xd8
   2d7dc:	str	lr, [sp, #220]	; 0xdc
   2d7e0:	ldrd	r2, [sp, #216]	; 0xd8
   2d7e4:	orr	r6, r6, r2
   2d7e8:	orr	r7, r7, r3
   2d7ec:	beq	2e83c <__assert_fail@plt+0x1b338>
   2d7f0:	b	2d7a4 <__assert_fail@plt+0x1a2a0>
   2d7f4:	ldr	r9, [sp, #340]	; 0x154
   2d7f8:	rsb	r3, sl, fp
   2d7fc:	cmp	r9, #4
   2d800:	beq	2dee4 <__assert_fail@plt+0x1a9e0>
   2d804:	cmp	r3, #15
   2d808:	bls	2e1c0 <__assert_fail@plt+0x1acbc>
   2d80c:	ldr	r4, [sp, #32]
   2d810:	ldrb	r3, [r4, #84]	; 0x54
   2d814:	cmp	r3, #0
   2d818:	ldreq	r6, [r7, #1]
   2d81c:	ldreq	r4, [sl, #8]
   2d820:	ldreq	r7, [r7, #5]
   2d824:	ldreq	r5, [sl, #12]
   2d828:	bne	2e9f4 <__assert_fail@plt+0x1b4f0>
   2d82c:	add	sl, sl, #16
   2d830:	mov	r3, r7
   2d834:	strd	r4, [sp]
   2d838:	movw	r1, #11960	; 0x2eb8
   2d83c:	mov	r0, #1
   2d840:	movt	r1, #4
   2d844:	mov	r2, r6
   2d848:	bl	13204 <__printf_chk@plt>
   2d84c:	ldr	r8, [sp, #80]	; 0x50
   2d850:	ldrb	r3, [r8, #33]	; 0x21
   2d854:	cmp	r3, #0
   2d858:	beq	2e0fc <__assert_fail@plt+0x1abf8>
   2d85c:	cmp	fp, sl
   2d860:	beq	2e1c0 <__assert_fail@plt+0x1acbc>
   2d864:	ldrb	r0, [sl]
   2d868:	add	ip, sl, #1
   2d86c:	mov	r1, #0
   2d870:	tst	r0, #128	; 0x80
   2d874:	and	r0, r0, #127	; 0x7f
   2d878:	uxtb	r0, r0
   2d87c:	beq	2db0c <__assert_fail@plt+0x1a608>
   2d880:	cmp	fp, sl
   2d884:	bls	2e870 <__assert_fail@plt+0x1b36c>
   2d888:	rsb	r3, sl, fp
   2d88c:	cmp	r3, #9
   2d890:	movhi	r4, #10
   2d894:	bls	2eef8 <__assert_fail@plt+0x1b9f4>
   2d898:	ldrb	r3, [sl, #1]
   2d89c:	add	r8, sp, #512	; 0x200
   2d8a0:	add	ip, sl, #2
   2d8a4:	and	r2, r3, #127	; 0x7f
   2d8a8:	tst	r3, #128	; 0x80
   2d8ac:	uxtb	r2, r2
   2d8b0:	lsr	lr, r2, #25
   2d8b4:	lsl	r5, r2, #7
   2d8b8:	str	lr, [sp, #316]	; 0x13c
   2d8bc:	str	r5, [sp, #312]	; 0x138
   2d8c0:	ldrd	r6, [r8, #-200]	; 0xffffff38
   2d8c4:	orr	r6, r6, r0
   2d8c8:	orr	r7, r7, r1
   2d8cc:	beq	2dd88 <__assert_fail@plt+0x1a884>
   2d8d0:	ldr	r8, [sp, #340]	; 0x154
   2d8d4:	mov	r1, #1
   2d8d8:	ldr	r9, [sp, #32]
   2d8dc:	add	r1, r1, #1
   2d8e0:	cmp	r4, r1
   2d8e4:	bls	2e8f4 <__assert_fail@plt+0x1b3f0>
   2d8e8:	ldrb	lr, [ip], #1
   2d8ec:	rsb	r0, r1, r1, lsl #3
   2d8f0:	sub	sl, r0, #32
   2d8f4:	rsb	r5, r0, #32
   2d8f8:	and	r2, lr, #127	; 0x7f
   2d8fc:	tst	lr, #128	; 0x80
   2d900:	uxtb	r2, r2
   2d904:	lsl	sl, r2, sl
   2d908:	lsl	r0, r2, r0
   2d90c:	orr	r5, sl, r2, lsr r5
   2d910:	str	r0, [sp, #200]	; 0xc8
   2d914:	str	r5, [sp, #204]	; 0xcc
   2d918:	ldrd	r2, [sp, #200]	; 0xc8
   2d91c:	orr	r6, r6, r2
   2d920:	orr	r7, r7, r3
   2d924:	beq	2e8d4 <__assert_fail@plt+0x1b3d0>
   2d928:	b	2d8dc <__assert_fail@plt+0x1a3d8>
   2d92c:	ldr	r8, [sp, #340]	; 0x154
   2d930:	rsb	r3, sl, fp
   2d934:	cmp	r8, #4
   2d938:	beq	2df14 <__assert_fail@plt+0x1aa10>
   2d93c:	cmp	r3, #7
   2d940:	bls	2e1c0 <__assert_fail@plt+0x1acbc>
   2d944:	ldr	r5, [sp, #32]
   2d948:	ldrb	r3, [r5, #84]	; 0x54
   2d94c:	cmp	r3, #0
   2d950:	ldreq	r6, [r7, #1]
   2d954:	ldreq	r7, [r7, #5]
   2d958:	streq	r6, [sp, #48]	; 0x30
   2d95c:	streq	r7, [sp, #52]	; 0x34
   2d960:	bne	2e848 <__assert_fail@plt+0x1b344>
   2d964:	add	sl, sl, #8
   2d968:	ldrd	r2, [sp, #48]	; 0x30
   2d96c:	movw	r1, #8304	; 0x2070
   2d970:	mov	r0, #1
   2d974:	movt	r1, #4
   2d978:	bl	13204 <__printf_chk@plt>
   2d97c:	ldr	r7, [sp, #80]	; 0x50
   2d980:	ldrb	r4, [r7, #33]	; 0x21
   2d984:	cmp	r4, #0
   2d988:	movne	r3, #0
   2d98c:	bne	2da5c <__assert_fail@plt+0x1a558>
   2d990:	movw	r1, #12212	; 0x2fb4
   2d994:	mov	r0, #1
   2d998:	movt	r1, #4
   2d99c:	bl	13204 <__printf_chk@plt>
   2d9a0:	ldrd	r8, [sp, #48]	; 0x30
   2d9a4:	ldr	r0, [sp, #88]	; 0x58
   2d9a8:	ldr	r1, [sp, #340]	; 0x154
   2d9ac:	mov	r3, r9
   2d9b0:	mov	r2, r8
   2d9b4:	strd	r8, [sp]
   2d9b8:	bl	27164 <__assert_fail@plt+0x13c60>
   2d9bc:	mov	r0, #10
   2d9c0:	bl	131b0 <putchar@plt>
   2d9c4:	cmp	fp, sl
   2d9c8:	mov	r3, r4
   2d9cc:	bhi	2da64 <__assert_fail@plt+0x1a560>
   2d9d0:	mov	r6, sl
   2d9d4:	ldr	r9, [sp, #32]
   2d9d8:	ldr	sl, [sp, #96]	; 0x60
   2d9dc:	b	2d160 <__assert_fail@plt+0x19c5c>
   2d9e0:	cmp	fp, sl
   2d9e4:	beq	2e1c0 <__assert_fail@plt+0x1acbc>
   2d9e8:	ldrb	r0, [r7, #1]
   2d9ec:	add	ip, r7, #2
   2d9f0:	mov	r1, #0
   2d9f4:	tst	r0, #128	; 0x80
   2d9f8:	and	r0, r0, #127	; 0x7f
   2d9fc:	uxtb	r0, r0
   2da00:	bne	2e5b8 <__assert_fail@plt+0x1b0b4>
   2da04:	rsb	r2, ip, fp
   2da08:	asr	r3, r2, #31
   2da0c:	cmp	r3, r1
   2da10:	cmpeq	r2, r0
   2da14:	bcc	2e308 <__assert_fail@plt+0x1ae04>
   2da18:	ldr	r5, [sp, #340]	; 0x154
   2da1c:	mov	r2, #8
   2da20:	ldr	r6, [sp, #68]	; 0x44
   2da24:	mov	r3, r2
   2da28:	ldr	lr, [sp, #348]	; 0x15c
   2da2c:	str	r5, [sp, #4]
   2da30:	str	r6, [sp, #8]
   2da34:	add	sl, ip, r0
   2da38:	strd	r0, [sp, #16]
   2da3c:	mov	r1, #5
   2da40:	str	ip, [sp, #24]
   2da44:	str	lr, [sp, #12]
   2da48:	str	r1, [sp]
   2da4c:	ldr	r0, [sp, #88]	; 0x58
   2da50:	ldr	r1, [sp, #32]
   2da54:	bl	274ac <__assert_fail@plt+0x13fa8>
   2da58:	mov	r3, #0
   2da5c:	cmp	fp, sl
   2da60:	bls	2d9d0 <__assert_fail@plt+0x1a4cc>
   2da64:	mov	r7, sl
   2da68:	b	2d604 <__assert_fail@plt+0x1a100>
   2da6c:	cmp	fp, sl
   2da70:	beq	2e1c0 <__assert_fail@plt+0x1acbc>
   2da74:	ldrb	r2, [r7, #1]
   2da78:	mov	r3, #0
   2da7c:	add	ip, r7, #2
   2da80:	tst	r2, #128	; 0x80
   2da84:	and	r2, r2, #127	; 0x7f
   2da88:	uxtb	r2, r2
   2da8c:	moveq	r7, r3
   2da90:	moveq	r6, r2
   2da94:	bne	2ec80 <__assert_fail@plt+0x1b77c>
   2da98:	cmp	fp, ip
   2da9c:	beq	2e2f8 <__assert_fail@plt+0x1adf4>
   2daa0:	ldrb	r4, [ip]
   2daa4:	add	sl, ip, #1
   2daa8:	mov	r5, #0
   2daac:	tst	r4, #128	; 0x80
   2dab0:	and	r4, r4, #127	; 0x7f
   2dab4:	uxtb	r4, r4
   2dab8:	bne	2e43c <__assert_fail@plt+0x1af38>
   2dabc:	mov	r3, r7
   2dac0:	strd	r4, [sp]
   2dac4:	movw	r1, #11920	; 0x2e90
   2dac8:	mov	r0, #1
   2dacc:	movt	r1, #4
   2dad0:	mov	r2, r6
   2dad4:	bl	13204 <__printf_chk@plt>
   2dad8:	ldr	r8, [sp, #80]	; 0x50
   2dadc:	ldrb	r3, [r8, #33]	; 0x21
   2dae0:	cmp	r3, #0
   2dae4:	beq	2dfa8 <__assert_fail@plt+0x1aaa4>
   2dae8:	cmp	fp, sl
   2daec:	beq	2e1c0 <__assert_fail@plt+0x1acbc>
   2daf0:	ldrb	r0, [sl]
   2daf4:	add	ip, sl, #1
   2daf8:	mov	r1, #0
   2dafc:	tst	r0, #128	; 0x80
   2db00:	and	r0, r0, #127	; 0x7f
   2db04:	uxtb	r0, r0
   2db08:	bne	2ea78 <__assert_fail@plt+0x1b574>
   2db0c:	rsb	r2, ip, fp
   2db10:	asr	r3, r2, #31
   2db14:	cmp	r3, r1
   2db18:	cmpeq	r2, r0
   2db1c:	bcc	2e308 <__assert_fail@plt+0x1ae04>
   2db20:	ldr	r4, [sp, #340]	; 0x154
   2db24:	mov	r2, #8
   2db28:	ldr	r5, [sp, #68]	; 0x44
   2db2c:	mov	r3, r2
   2db30:	ldr	lr, [sp, #348]	; 0x15c
   2db34:	str	r4, [sp, #4]
   2db38:	str	r5, [sp, #8]
   2db3c:	b	2da34 <__assert_fail@plt+0x1a530>
   2db40:	cmp	fp, sl
   2db44:	beq	2e1c0 <__assert_fail@plt+0x1acbc>
   2db48:	ldrb	r2, [r7, #1]
   2db4c:	mov	r3, #0
   2db50:	add	ip, r7, #2
   2db54:	tst	r2, #128	; 0x80
   2db58:	and	r2, r2, #127	; 0x7f
   2db5c:	uxtb	r2, r2
   2db60:	moveq	r6, r3
   2db64:	moveq	r7, r2
   2db68:	bne	2e614 <__assert_fail@plt+0x1b110>
   2db6c:	cmp	fp, ip
   2db70:	beq	2e2f8 <__assert_fail@plt+0x1adf4>
   2db74:	ldrb	r4, [ip]
   2db78:	add	r5, ip, #1
   2db7c:	str	r5, [sp, #56]	; 0x38
   2db80:	mov	r5, #0
   2db84:	tst	r4, #128	; 0x80
   2db88:	and	r4, r4, #127	; 0x7f
   2db8c:	uxtb	r4, r4
   2db90:	bne	2edf4 <__assert_fail@plt+0x1b8f0>
   2db94:	mov	r3, r6
   2db98:	strd	r4, [sp]
   2db9c:	movw	r1, #11920	; 0x2e90
   2dba0:	mov	r0, #1
   2dba4:	movt	r1, #4
   2dba8:	mov	r2, r7
   2dbac:	bl	13204 <__printf_chk@plt>
   2dbb0:	ldr	r8, [sp, #80]	; 0x50
   2dbb4:	ldrb	r3, [r8, #33]	; 0x21
   2dbb8:	cmp	r3, #0
   2dbbc:	beq	2df6c <__assert_fail@plt+0x1aa68>
   2dbc0:	ldr	r4, [sp, #56]	; 0x38
   2dbc4:	cmp	fp, r4
   2dbc8:	beq	2e2f8 <__assert_fail@plt+0x1adf4>
   2dbcc:	ldrb	r6, [r4]
   2dbd0:	add	sl, r4, #1
   2dbd4:	mov	r7, #0
   2dbd8:	tst	r6, #128	; 0x80
   2dbdc:	and	r6, r6, #127	; 0x7f
   2dbe0:	uxtb	r6, r6
   2dbe4:	bne	2e790 <__assert_fail@plt+0x1b28c>
   2dbe8:	rsb	r2, sl, fp
   2dbec:	asr	r3, r2, #31
   2dbf0:	cmp	r3, r7
   2dbf4:	cmpeq	r2, r6
   2dbf8:	bcc	2e1c0 <__assert_fail@plt+0x1acbc>
   2dbfc:	ldr	r1, [sp, #348]	; 0x15c
   2dc00:	mov	r2, #8
   2dc04:	ldr	r4, [sp, #340]	; 0x154
   2dc08:	mov	r3, r2
   2dc0c:	ldr	r5, [sp, #68]	; 0x44
   2dc10:	str	sl, [sp, #24]
   2dc14:	add	sl, sl, r6
   2dc18:	str	r1, [sp, #12]
   2dc1c:	mov	r1, #5
   2dc20:	str	r4, [sp, #4]
   2dc24:	str	r5, [sp, #8]
   2dc28:	strd	r6, [sp, #16]
   2dc2c:	b	2da48 <__assert_fail@plt+0x1a544>
   2dc30:	cmp	fp, sl
   2dc34:	beq	2e1c0 <__assert_fail@plt+0x1acbc>
   2dc38:	ldrb	r2, [r7, #1]
   2dc3c:	mov	r3, #0
   2dc40:	add	r4, r7, #2
   2dc44:	tst	r2, #128	; 0x80
   2dc48:	and	r2, r2, #127	; 0x7f
   2dc4c:	uxtb	r2, r2
   2dc50:	moveq	r5, r3
   2dc54:	moveq	r6, r2
   2dc58:	bne	2e3e8 <__assert_fail@plt+0x1aee4>
   2dc5c:	mov	r3, r5
   2dc60:	movw	r1, #10192	; 0x27d0
   2dc64:	mov	r0, #1
   2dc68:	movt	r1, #4
   2dc6c:	mov	r2, r6
   2dc70:	bl	13204 <__printf_chk@plt>
   2dc74:	ldr	r7, [sp, #80]	; 0x50
   2dc78:	ldrb	r3, [r7, #33]	; 0x21
   2dc7c:	cmp	r3, #0
   2dc80:	beq	2deb4 <__assert_fail@plt+0x1a9b0>
   2dc84:	mov	sl, r4
   2dc88:	mov	r3, #0
   2dc8c:	b	2da5c <__assert_fail@plt+0x1a558>
   2dc90:	cmp	fp, sl
   2dc94:	beq	2e1c0 <__assert_fail@plt+0x1acbc>
   2dc98:	ldrb	r2, [r7, #1]
   2dc9c:	mov	r3, #0
   2dca0:	add	ip, r7, #2
   2dca4:	tst	r2, #128	; 0x80
   2dca8:	and	r2, r2, #127	; 0x7f
   2dcac:	uxtb	r2, r2
   2dcb0:	moveq	r4, r3
   2dcb4:	moveq	r7, r2
   2dcb8:	bne	2ec28 <__assert_fail@plt+0x1b724>
   2dcbc:	cmp	fp, ip
   2dcc0:	beq	2e2f8 <__assert_fail@plt+0x1adf4>
   2dcc4:	ldrb	r2, [ip]
   2dcc8:	add	sl, ip, #1
   2dccc:	mov	r3, #0
   2dcd0:	tst	r2, #128	; 0x80
   2dcd4:	and	r2, r2, #127	; 0x7f
   2dcd8:	uxtb	r2, r2
   2dcdc:	bne	2eb24 <__assert_fail@plt+0x1b620>
   2dce0:	mov	r6, r2
   2dce4:	mov	r5, r3
   2dce8:	mov	r3, r4
   2dcec:	str	r6, [sp]
   2dcf0:	movw	r1, #11920	; 0x2e90
   2dcf4:	str	r5, [sp, #4]
   2dcf8:	movt	r1, #4
   2dcfc:	mov	r0, #1
   2dd00:	mov	r2, r7
   2dd04:	bl	13204 <__printf_chk@plt>
   2dd08:	ldr	r8, [sp, #80]	; 0x50
   2dd0c:	ldrb	r3, [r8, #33]	; 0x21
   2dd10:	cmp	r3, #0
   2dd14:	beq	2e018 <__assert_fail@plt+0x1ab14>
   2dd18:	cmp	fp, sl
   2dd1c:	beq	2e1c0 <__assert_fail@plt+0x1acbc>
   2dd20:	ldrb	r0, [sl]
   2dd24:	add	ip, sl, #1
   2dd28:	mov	r1, #0
   2dd2c:	tst	r0, #128	; 0x80
   2dd30:	and	r0, r0, #127	; 0x7f
   2dd34:	uxtb	r0, r0
   2dd38:	beq	2db0c <__assert_fail@plt+0x1a608>
   2dd3c:	cmp	fp, sl
   2dd40:	bls	2e870 <__assert_fail@plt+0x1b36c>
   2dd44:	rsb	r3, sl, fp
   2dd48:	cmp	r3, #9
   2dd4c:	movhi	r4, #10
   2dd50:	bls	2e864 <__assert_fail@plt+0x1b360>
   2dd54:	ldrb	r3, [sl, #1]
   2dd58:	add	ip, sl, #2
   2dd5c:	and	r2, r3, #127	; 0x7f
   2dd60:	tst	r3, #128	; 0x80
   2dd64:	uxtb	r2, r2
   2dd68:	lsl	r6, r2, #7
   2dd6c:	lsr	r5, r2, #25
   2dd70:	str	r6, [sp, #248]	; 0xf8
   2dd74:	str	r5, [sp, #252]	; 0xfc
   2dd78:	ldrd	r6, [sp, #248]	; 0xf8
   2dd7c:	orr	r6, r6, r0
   2dd80:	orr	r7, r7, r1
   2dd84:	bne	2e87c <__assert_fail@plt+0x1b378>
   2dd88:	mov	r0, r6
   2dd8c:	mov	r1, r7
   2dd90:	b	2db0c <__assert_fail@plt+0x1a608>
   2dd94:	movw	r0, #12448	; 0x30a0
   2dd98:	movt	r0, #4
   2dd9c:	bl	12fdc <puts@plt>
   2dda0:	mov	r3, #1
   2dda4:	b	2da5c <__assert_fail@plt+0x1a558>
   2dda8:	mov	r3, #1
   2ddac:	b	2da5c <__assert_fail@plt+0x1a558>
   2ddb0:	ldr	r8, [sp, #64]	; 0x40
   2ddb4:	movw	r1, #11844	; 0x2e44
   2ddb8:	ldr	r9, [sp, #84]	; 0x54
   2ddbc:	movt	r1, #4
   2ddc0:	ldr	r0, [r8]
   2ddc4:	rsb	r2, r9, sl
   2ddc8:	sub	r2, r2, #1
   2ddcc:	add	r9, sp, #512	; 0x200
   2ddd0:	rsb	r0, r0, sl
   2ddd4:	asr	r3, r2, #31
   2ddd8:	sub	r0, r0, #1
   2dddc:	strd	r2, [sp]
   2dde0:	ldrd	r8, [r9, #-160]	; 0xffffff60
   2dde4:	mov	r2, r0
   2dde8:	asr	r3, r0, #31
   2ddec:	mov	r0, #1
   2ddf0:	strd	r8, [sp, #48]	; 0x30
   2ddf4:	bl	13204 <__printf_chk@plt>
   2ddf8:	b	2d628 <__assert_fail@plt+0x1a124>
   2ddfc:	mov	r2, #5
   2de00:	movw	r1, #11452	; 0x2cbc
   2de04:	mov	r0, #0
   2de08:	movt	r1, #4
   2de0c:	bl	12d84 <dcgettext@plt>
   2de10:	mov	r5, r0
   2de14:	ldr	r0, [sp, #108]	; 0x6c
   2de18:	bl	133d8 <elf_ndxscn@plt>
   2de1c:	ldr	r1, [sp, #104]	; 0x68
   2de20:	mov	r4, r0
   2de24:	ldr	r0, [sp, #336]	; 0x150
   2de28:	bl	1870c <__assert_fail@plt+0x5208>
   2de2c:	mov	r2, r5
   2de30:	mov	r3, r4
   2de34:	str	r0, [sp]
   2de38:	mov	r0, #0
   2de3c:	mov	r1, r0
   2de40:	bl	12f70 <error@plt>
   2de44:	ldr	r4, [sp, #92]	; 0x5c
   2de48:	ldr	r2, [sp, #388]	; 0x184
   2de4c:	ldr	r3, [r4]
   2de50:	cmp	r2, r3
   2de54:	bne	2e78c <__assert_fail@plt+0x1b288>
   2de58:	add	sp, sp, #396	; 0x18c
   2de5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2de60:	mov	r2, r8
   2de64:	mov	r0, ip
   2de68:	movw	r1, #11640	; 0x2d78
   2de6c:	movt	r1, #4
   2de70:	bl	12d84 <dcgettext@plt>
   2de74:	ldr	ip, [sp, #44]	; 0x2c
   2de78:	ldr	r6, [sp, #84]	; 0x54
   2de7c:	mov	r1, ip
   2de80:	mov	r2, r0
   2de84:	mov	r0, ip
   2de88:	bl	12f70 <error@plt>
   2de8c:	b	2d160 <__assert_fail@plt+0x19c5c>
   2de90:	ldr	r0, [ip, #148]	; 0x94
   2de94:	movw	r2, #12296	; 0x3008
   2de98:	movw	r3, #57200	; 0xdf70
   2de9c:	movt	r2, #4
   2dea0:	movt	r3, #1
   2dea4:	str	r2, [sp]
   2dea8:	mov	r2, #16
   2deac:	bl	130c0 <qsort_r@plt>
   2deb0:	b	2d0f8 <__assert_fail@plt+0x19bf4>
   2deb4:	add	r1, sp, #368	; 0x170
   2deb8:	ldr	r0, [sp, #348]	; 0x15c
   2debc:	mov	r2, r6
   2dec0:	mov	r3, r5
   2dec4:	str	r1, [sp]
   2dec8:	bl	207ac <__assert_fail@plt+0xd2a8>
   2decc:	cmp	r0, #0
   2ded0:	beq	2e1fc <__assert_fail@plt+0x1acf8>
   2ded4:	movw	r0, #11908	; 0x2e84
   2ded8:	movt	r0, #4
   2dedc:	bl	12fdc <puts@plt>
   2dee0:	b	2dc84 <__assert_fail@plt+0x1a780>
   2dee4:	cmp	r3, #7
   2dee8:	bls	2e1c0 <__assert_fail@plt+0x1acbc>
   2deec:	ldr	ip, [sp, #32]
   2def0:	ldr	r6, [r7, #1]
   2def4:	ldrb	r3, [ip, #84]	; 0x54
   2def8:	cmp	r3, #0
   2defc:	moveq	r7, r3
   2df00:	ldreq	r4, [sl, #4]
   2df04:	bne	2ea64 <__assert_fail@plt+0x1b560>
   2df08:	add	sl, sl, #8
   2df0c:	mov	r5, #0
   2df10:	b	2d830 <__assert_fail@plt+0x1a32c>
   2df14:	cmp	r3, #3
   2df18:	bls	2e1c0 <__assert_fail@plt+0x1acbc>
   2df1c:	ldr	r9, [sp, #32]
   2df20:	ldrb	r3, [r9, #84]	; 0x54
   2df24:	cmp	r3, #0
   2df28:	ldr	r3, [r7, #1]
   2df2c:	bne	2ea5c <__assert_fail@plt+0x1b558>
   2df30:	mov	r4, r3
   2df34:	mov	r5, #0
   2df38:	add	sl, sl, #4
   2df3c:	strd	r4, [sp, #48]	; 0x30
   2df40:	b	2d968 <__assert_fail@plt+0x1a464>
   2df44:	cmp	r3, #3
   2df48:	bls	2e1c0 <__assert_fail@plt+0x1acbc>
   2df4c:	ldr	r8, [sp, #32]
   2df50:	ldr	r4, [r7, #1]
   2df54:	ldrb	r3, [r8, #84]	; 0x54
   2df58:	cmp	r3, #0
   2df5c:	bne	2ea54 <__assert_fail@plt+0x1b550>
   2df60:	add	sl, sl, #4
   2df64:	mov	r5, #0
   2df68:	b	2d6cc <__assert_fail@plt+0x1a1c8>
   2df6c:	add	r1, sp, #368	; 0x170
   2df70:	ldr	r0, [sp, #348]	; 0x15c
   2df74:	mov	r2, r7
   2df78:	mov	r3, r6
   2df7c:	str	r1, [sp]
   2df80:	bl	207ac <__assert_fail@plt+0xd2a8>
   2df84:	cmp	r0, #0
   2df88:	beq	2e238 <__assert_fail@plt+0x1ad34>
   2df8c:	movw	r0, #11936	; 0x2ea0
   2df90:	movt	r0, #4
   2df94:	bl	12fdc <puts@plt>
   2df98:	movw	r0, #11908	; 0x2e84
   2df9c:	movt	r0, #4
   2dfa0:	bl	12fdc <puts@plt>
   2dfa4:	b	2dbc0 <__assert_fail@plt+0x1a6bc>
   2dfa8:	ldrd	r8, [sp, #48]	; 0x30
   2dfac:	movw	r1, #12212	; 0x2fb4
   2dfb0:	mov	r0, #1
   2dfb4:	movt	r1, #4
   2dfb8:	adds	r6, r6, r8
   2dfbc:	adc	r7, r7, r9
   2dfc0:	bl	13204 <__printf_chk@plt>
   2dfc4:	adds	r4, r4, r8
   2dfc8:	mov	r2, r6
   2dfcc:	mov	r3, r7
   2dfd0:	ldr	r0, [sp, #88]	; 0x58
   2dfd4:	ldr	r1, [sp, #340]	; 0x154
   2dfd8:	adc	r5, r5, r9
   2dfdc:	strd	r6, [sp]
   2dfe0:	bl	27164 <__assert_fail@plt+0x13c60>
   2dfe4:	movw	r1, #11948	; 0x2eac
   2dfe8:	mov	r0, #1
   2dfec:	movt	r1, #4
   2dff0:	bl	13204 <__printf_chk@plt>
   2dff4:	subs	r2, r4, #1
   2dff8:	ldr	r0, [sp, #88]	; 0x58
   2dffc:	sbc	r3, r5, #0
   2e000:	strd	r4, [sp]
   2e004:	ldr	r1, [sp, #340]	; 0x154
   2e008:	bl	27164 <__assert_fail@plt+0x13c60>
   2e00c:	mov	r0, #10
   2e010:	bl	131b0 <putchar@plt>
   2e014:	b	2dae8 <__assert_fail@plt+0x1a5e4>
   2e018:	add	r1, sp, #360	; 0x168
   2e01c:	ldr	r0, [sp, #348]	; 0x15c
   2e020:	mov	r2, r7
   2e024:	mov	r3, r4
   2e028:	str	r1, [sp]
   2e02c:	bl	207ac <__assert_fail@plt+0xd2a8>
   2e030:	cmp	r0, #0
   2e034:	bne	2e058 <__assert_fail@plt+0x1ab54>
   2e038:	add	r1, sp, #368	; 0x170
   2e03c:	ldr	r0, [sp, #348]	; 0x15c
   2e040:	mov	r2, r6
   2e044:	mov	r3, r5
   2e048:	str	r1, [sp]
   2e04c:	bl	207ac <__assert_fail@plt+0xd2a8>
   2e050:	cmp	r0, #0
   2e054:	beq	2e318 <__assert_fail@plt+0x1ae14>
   2e058:	movw	r0, #11936	; 0x2ea0
   2e05c:	movt	r0, #4
   2e060:	bl	12fdc <puts@plt>
   2e064:	movw	r0, #11908	; 0x2e84
   2e068:	movt	r0, #4
   2e06c:	bl	12fdc <puts@plt>
   2e070:	b	2dd18 <__assert_fail@plt+0x1a814>
   2e074:	mov	r2, #5
   2e078:	movw	r1, #11732	; 0x2dd4
   2e07c:	movt	r1, #4
   2e080:	bl	12d84 <dcgettext@plt>
   2e084:	mov	r1, r0
   2e088:	mov	r0, #1
   2e08c:	bl	13204 <__printf_chk@plt>
   2e090:	b	2d4d8 <__assert_fail@plt+0x19fd4>
   2e094:	mov	r2, #5
   2e098:	movw	r1, #11760	; 0x2df0
   2e09c:	mov	r0, #0
   2e0a0:	movt	r1, #4
   2e0a4:	bl	12d84 <dcgettext@plt>
   2e0a8:	mov	r6, r4
   2e0ac:	mov	r2, r0
   2e0b0:	mov	r0, #0
   2e0b4:	mov	r1, r0
   2e0b8:	bl	12f70 <error@plt>
   2e0bc:	mov	r2, #5
   2e0c0:	movw	r1, #11800	; 0x2e18
   2e0c4:	mov	r0, #0
   2e0c8:	movt	r1, #4
   2e0cc:	bl	12d84 <dcgettext@plt>
   2e0d0:	ldr	r8, [sp, #64]	; 0x40
   2e0d4:	ldr	ip, [sp, #84]	; 0x54
   2e0d8:	ldr	r2, [r8]
   2e0dc:	rsb	r2, r2, ip
   2e0e0:	asr	r3, r2, #31
   2e0e4:	mov	r1, r0
   2e0e8:	mov	r0, #1
   2e0ec:	bl	13204 <__printf_chk@plt>
   2e0f0:	cmp	r4, #0
   2e0f4:	bne	2d54c <__assert_fail@plt+0x1a048>
   2e0f8:	b	2d5d4 <__assert_fail@plt+0x1a0d0>
   2e0fc:	movw	r1, #12212	; 0x2fb4
   2e100:	mov	r0, #1
   2e104:	movt	r1, #4
   2e108:	bl	13204 <__printf_chk@plt>
   2e10c:	mov	r2, r6
   2e110:	mov	r3, r7
   2e114:	ldr	r0, [sp, #88]	; 0x58
   2e118:	ldr	r1, [sp, #340]	; 0x154
   2e11c:	stm	sp, {r6, r7}
   2e120:	bl	27164 <__assert_fail@plt+0x13c60>
   2e124:	movw	r1, #11948	; 0x2eac
   2e128:	mov	r0, #1
   2e12c:	movt	r1, #4
   2e130:	bl	13204 <__printf_chk@plt>
   2e134:	subs	r2, r4, #1
   2e138:	ldr	r0, [sp, #88]	; 0x58
   2e13c:	sbc	r3, r5, #0
   2e140:	strd	r4, [sp]
   2e144:	ldr	r1, [sp, #340]	; 0x154
   2e148:	bl	27164 <__assert_fail@plt+0x13c60>
   2e14c:	mov	r0, #10
   2e150:	bl	131b0 <putchar@plt>
   2e154:	b	2d85c <__assert_fail@plt+0x1a358>
   2e158:	adds	r6, r6, r4
   2e15c:	movw	r1, #12212	; 0x2fb4
   2e160:	mov	r0, #1
   2e164:	movt	r1, #4
   2e168:	adc	r7, r7, r5
   2e16c:	bl	13204 <__printf_chk@plt>
   2e170:	mov	r2, r4
   2e174:	mov	r3, r5
   2e178:	ldr	r0, [sp, #88]	; 0x58
   2e17c:	ldr	r1, [sp, #340]	; 0x154
   2e180:	strd	r4, [sp]
   2e184:	bl	27164 <__assert_fail@plt+0x13c60>
   2e188:	movw	r1, #11948	; 0x2eac
   2e18c:	mov	r0, #1
   2e190:	movt	r1, #4
   2e194:	bl	13204 <__printf_chk@plt>
   2e198:	subs	r2, r6, #1
   2e19c:	sbc	r3, r7, #0
   2e1a0:	ldr	r0, [sp, #88]	; 0x58
   2e1a4:	ldr	r1, [sp, #340]	; 0x154
   2e1a8:	strd	r6, [sp]
   2e1ac:	bl	27164 <__assert_fail@plt+0x13c60>
   2e1b0:	mov	r0, #10
   2e1b4:	bl	131b0 <putchar@plt>
   2e1b8:	ldr	ip, [sp, #44]	; 0x2c
   2e1bc:	b	2d724 <__assert_fail@plt+0x1a220>
   2e1c0:	mov	r6, sl
   2e1c4:	ldr	r9, [sp, #32]
   2e1c8:	ldr	sl, [sp, #96]	; 0x60
   2e1cc:	movw	r1, #12308	; 0x3014
   2e1d0:	mov	r0, #0
   2e1d4:	movt	r1, #4
   2e1d8:	b	2d148 <__assert_fail@plt+0x19c44>
   2e1dc:	mov	r2, #5
   2e1e0:	movw	r1, #11692	; 0x2dac
   2e1e4:	movt	r1, #4
   2e1e8:	bl	12d84 <dcgettext@plt>
   2e1ec:	mov	r1, r0
   2e1f0:	mov	r0, #1
   2e1f4:	bl	13204 <__printf_chk@plt>
   2e1f8:	b	2d4b0 <__assert_fail@plt+0x19fac>
   2e1fc:	add	r8, sp, #512	; 0x200
   2e200:	movw	r1, #12212	; 0x2fb4
   2e204:	mov	r0, #1
   2e208:	movt	r1, #4
   2e20c:	bl	13204 <__printf_chk@plt>
   2e210:	ldrd	r6, [r8, #-144]	; 0xffffff70
   2e214:	ldr	r0, [sp, #88]	; 0x58
   2e218:	ldr	r1, [sp, #340]	; 0x154
   2e21c:	mov	r2, r6
   2e220:	mov	r3, r7
   2e224:	strd	r6, [sp]
   2e228:	bl	27164 <__assert_fail@plt+0x13c60>
   2e22c:	mov	r0, #10
   2e230:	bl	131b0 <putchar@plt>
   2e234:	b	2dc84 <__assert_fail@plt+0x1a780>
   2e238:	add	r9, sp, #512	; 0x200
   2e23c:	movw	r1, #12212	; 0x2fb4
   2e240:	mov	r0, #1
   2e244:	movt	r1, #4
   2e248:	ldrd	r2, [r9, #-144]	; 0xffffff70
   2e24c:	adds	r4, r4, r2
   2e250:	adc	r5, r5, r3
   2e254:	bl	13204 <__printf_chk@plt>
   2e258:	add	ip, sp, #512	; 0x200
   2e25c:	ldr	r0, [sp, #88]	; 0x58
   2e260:	ldr	r1, [sp, #340]	; 0x154
   2e264:	ldrd	r6, [ip, #-144]	; 0xffffff70
   2e268:	mov	r2, r6
   2e26c:	mov	r3, r7
   2e270:	strd	r6, [sp]
   2e274:	bl	27164 <__assert_fail@plt+0x13c60>
   2e278:	movw	r1, #11948	; 0x2eac
   2e27c:	mov	r0, #1
   2e280:	movt	r1, #4
   2e284:	bl	13204 <__printf_chk@plt>
   2e288:	subs	r2, r4, #1
   2e28c:	ldr	r0, [sp, #88]	; 0x58
   2e290:	sbc	r3, r5, #0
   2e294:	strd	r4, [sp]
   2e298:	ldr	r1, [sp, #340]	; 0x154
   2e29c:	bl	27164 <__assert_fail@plt+0x13c60>
   2e2a0:	mov	r0, #10
   2e2a4:	bl	131b0 <putchar@plt>
   2e2a8:	b	2dbc0 <__assert_fail@plt+0x1a6bc>
   2e2ac:	mov	r1, r8
   2e2b0:	ldr	r0, [sp, #108]	; 0x6c
   2e2b4:	bl	131bc <elf_rawdata@plt>
   2e2b8:	subs	r9, r0, #0
   2e2bc:	str	r9, [sp, #64]	; 0x40
   2e2c0:	bne	2d0e0 <__assert_fail@plt+0x19bdc>
   2e2c4:	mov	r2, #5
   2e2c8:	movw	r1, #12256	; 0x2fe0
   2e2cc:	movt	r1, #4
   2e2d0:	bl	12d84 <dcgettext@plt>
   2e2d4:	mov	r4, r0
   2e2d8:	mvn	r0, #0
   2e2dc:	bl	130a8 <elf_errmsg@plt>
   2e2e0:	mov	r2, r4
   2e2e4:	mov	r3, r0
   2e2e8:	ldr	r0, [sp, #64]	; 0x40
   2e2ec:	mov	r1, r0
   2e2f0:	bl	12f70 <error@plt>
   2e2f4:	b	2de44 <__assert_fail@plt+0x1a940>
   2e2f8:	ldr	sl, [sp, #96]	; 0x60
   2e2fc:	mov	r6, fp
   2e300:	ldr	r9, [sp, #32]
   2e304:	b	2e1cc <__assert_fail@plt+0x1acc8>
   2e308:	ldr	sl, [sp, #96]	; 0x60
   2e30c:	mov	r6, ip
   2e310:	ldr	r9, [sp, #32]
   2e314:	b	2e1cc <__assert_fail@plt+0x1acc8>
   2e318:	add	r9, sp, #512	; 0x200
   2e31c:	movw	r1, #12212	; 0x2fb4
   2e320:	mov	r0, #1
   2e324:	movt	r1, #4
   2e328:	bl	13204 <__printf_chk@plt>
   2e32c:	ldrd	r4, [r9, #-152]	; 0xffffff68
   2e330:	ldr	r0, [sp, #88]	; 0x58
   2e334:	ldr	r1, [sp, #340]	; 0x154
   2e338:	mov	r2, r4
   2e33c:	mov	r3, r5
   2e340:	strd	r4, [sp]
   2e344:	bl	27164 <__assert_fail@plt+0x13c60>
   2e348:	movw	r1, #11948	; 0x2eac
   2e34c:	mov	r0, #1
   2e350:	movt	r1, #4
   2e354:	bl	13204 <__printf_chk@plt>
   2e358:	add	ip, sp, #512	; 0x200
   2e35c:	ldr	r0, [sp, #88]	; 0x58
   2e360:	ldrd	r4, [ip, #-144]	; 0xffffff70
   2e364:	ldr	r1, [sp, #340]	; 0x154
   2e368:	subs	r2, r4, #1
   2e36c:	sbc	r3, r5, #0
   2e370:	strd	r4, [sp]
   2e374:	bl	27164 <__assert_fail@plt+0x13c60>
   2e378:	mov	r0, #10
   2e37c:	bl	131b0 <putchar@plt>
   2e380:	b	2dd18 <__assert_fail@plt+0x1a814>
   2e384:	mov	r6, r7
   2e388:	b	2d160 <__assert_fail@plt+0x19c5c>
   2e38c:	rev	r4, r4
   2e390:	b	2d1f0 <__assert_fail@plt+0x19cec>
   2e394:	ldrdeq	r9, [r5], -ip
   2e398:	ldr	r4, [sp, #72]	; 0x48
   2e39c:	cmp	r7, r4
   2e3a0:	bhi	2ddfc <__assert_fail@plt+0x1a8f8>
   2e3a4:	cmp	r3, #0
   2e3a8:	ldreq	r5, [r7]
   2e3ac:	ldreq	r7, [r7, #4]
   2e3b0:	streq	r5, [sp, #32]
   2e3b4:	streq	r7, [sp, #36]	; 0x24
   2e3b8:	bne	2e91c <__assert_fail@plt+0x1b418>
   2e3bc:	mov	r6, #8
   2e3c0:	add	r7, fp, #12
   2e3c4:	str	r6, [sp, #68]	; 0x44
   2e3c8:	b	2d210 <__assert_fail@plt+0x19d0c>
   2e3cc:	rev	r2, r2
   2e3d0:	b	2d5b4 <__assert_fail@plt+0x1a0b0>
   2e3d4:	ldr	r3, [r7]
   2e3d8:	ldr	r2, [r7, #4]
   2e3dc:	rev	r3, r3
   2e3e0:	rev	r2, r2
   2e3e4:	b	2d568 <__assert_fail@plt+0x1a064>
   2e3e8:	cmp	fp, sl
   2e3ec:	bls	2e5ac <__assert_fail@plt+0x1b0a8>
   2e3f0:	rsb	r1, sl, fp
   2e3f4:	cmp	r1, #9
   2e3f8:	movhi	sl, #10
   2e3fc:	bls	2e5a0 <__assert_fail@plt+0x1b09c>
   2e400:	ldrb	r1, [r7, #2]
   2e404:	add	r4, r7, #3
   2e408:	and	r0, r1, #127	; 0x7f
   2e40c:	tst	r1, #128	; 0x80
   2e410:	uxtb	r0, r0
   2e414:	lsr	lr, r0, #25
   2e418:	lsl	r5, r0, #7
   2e41c:	str	lr, [sp, #228]	; 0xe4
   2e420:	str	r5, [sp, #224]	; 0xe0
   2e424:	ldrd	r6, [sp, #224]	; 0xe0
   2e428:	orr	r6, r6, r2
   2e42c:	orr	r7, r7, r3
   2e430:	bne	2e4f8 <__assert_fail@plt+0x1aff4>
   2e434:	mov	r5, r7
   2e438:	b	2dc5c <__assert_fail@plt+0x1a758>
   2e43c:	cmp	fp, ip
   2e440:	bls	2e594 <__assert_fail@plt+0x1b090>
   2e444:	rsb	r3, ip, fp
   2e448:	cmp	r3, #9
   2e44c:	movhi	lr, #10
   2e450:	bls	2e588 <__assert_fail@plt+0x1b084>
   2e454:	ldrb	r3, [ip, #1]
   2e458:	add	r1, sp, #512	; 0x200
   2e45c:	add	sl, ip, #2
   2e460:	and	r2, r3, #127	; 0x7f
   2e464:	tst	r3, #128	; 0x80
   2e468:	uxtb	r2, r2
   2e46c:	lsr	r9, r2, #25
   2e470:	lsl	ip, r2, #7
   2e474:	str	r9, [sp, #292]	; 0x124
   2e478:	str	ip, [sp, #288]	; 0x120
   2e47c:	ldrd	r0, [r1, #-224]	; 0xffffff20
   2e480:	orr	r4, r4, r0
   2e484:	orr	r5, r5, r1
   2e488:	beq	2dabc <__assert_fail@plt+0x1a5b8>
   2e48c:	ldr	r8, [sp, #340]	; 0x154
   2e490:	mov	r1, #1
   2e494:	ldr	r9, [sp, #32]
   2e498:	strd	r6, [sp, #56]	; 0x38
   2e49c:	add	r1, r1, #1
   2e4a0:	cmp	r1, lr
   2e4a4:	bcs	2e55c <__assert_fail@plt+0x1b058>
   2e4a8:	ldrb	ip, [sl], #1
   2e4ac:	rsb	r0, r1, r1, lsl #3
   2e4b0:	sub	r7, r0, #32
   2e4b4:	rsb	r6, r0, #32
   2e4b8:	and	r2, ip, #127	; 0x7f
   2e4bc:	tst	ip, #128	; 0x80
   2e4c0:	uxtb	r2, r2
   2e4c4:	lsl	r7, r2, r7
   2e4c8:	lsl	r0, r2, r0
   2e4cc:	orr	r6, r7, r2, lsr r6
   2e4d0:	str	r0, [sp, #176]	; 0xb0
   2e4d4:	str	r6, [sp, #180]	; 0xb4
   2e4d8:	ldrd	r6, [sp, #176]	; 0xb0
   2e4dc:	orr	r4, r4, r6
   2e4e0:	orr	r5, r5, r7
   2e4e4:	bne	2e49c <__assert_fail@plt+0x1af98>
   2e4e8:	str	r8, [sp, #340]	; 0x154
   2e4ec:	ldrd	r6, [sp, #56]	; 0x38
   2e4f0:	str	r9, [sp, #32]
   2e4f4:	b	2dabc <__assert_fail@plt+0x1a5b8>
   2e4f8:	ldr	r8, [sp, #340]	; 0x154
   2e4fc:	mov	r1, #1
   2e500:	ldr	r9, [sp, #32]
   2e504:	add	r1, r1, #1
   2e508:	cmp	r1, sl
   2e50c:	bcs	2e574 <__assert_fail@plt+0x1b070>
   2e510:	ldrb	ip, [r4], #1
   2e514:	rsb	r0, r1, r1, lsl #3
   2e518:	sub	r5, r0, #32
   2e51c:	rsb	lr, r0, #32
   2e520:	and	r2, ip, #127	; 0x7f
   2e524:	tst	ip, #128	; 0x80
   2e528:	uxtb	r2, r2
   2e52c:	lsl	r5, r2, r5
   2e530:	lsl	r0, r2, r0
   2e534:	orr	lr, r5, r2, lsr lr
   2e538:	str	r0, [sp, #112]	; 0x70
   2e53c:	str	lr, [sp, #116]	; 0x74
   2e540:	ldrd	r2, [sp, #112]	; 0x70
   2e544:	orr	r6, r6, r2
   2e548:	orr	r7, r7, r3
   2e54c:	bne	2e504 <__assert_fail@plt+0x1b000>
   2e550:	str	r8, [sp, #340]	; 0x154
   2e554:	str	r9, [sp, #32]
   2e558:	b	2e434 <__assert_fail@plt+0x1af30>
   2e55c:	str	r8, [sp, #340]	; 0x154
   2e560:	mvn	r4, #0
   2e564:	ldrd	r6, [sp, #56]	; 0x38
   2e568:	mvn	r5, #0
   2e56c:	str	r9, [sp, #32]
   2e570:	b	2dabc <__assert_fail@plt+0x1a5b8>
   2e574:	mvn	r6, #0
   2e578:	str	r8, [sp, #340]	; 0x154
   2e57c:	str	r9, [sp, #32]
   2e580:	mov	r5, r6
   2e584:	b	2dc5c <__assert_fail@plt+0x1a758>
   2e588:	cmp	r3, #1
   2e58c:	movhi	lr, r3
   2e590:	bhi	2e454 <__assert_fail@plt+0x1af50>
   2e594:	mvn	r4, #0
   2e598:	mvn	r5, #0
   2e59c:	b	2dabc <__assert_fail@plt+0x1a5b8>
   2e5a0:	cmp	r1, #1
   2e5a4:	movhi	sl, r1
   2e5a8:	bhi	2e400 <__assert_fail@plt+0x1aefc>
   2e5ac:	mvn	r6, #0
   2e5b0:	mov	r5, r6
   2e5b4:	b	2dc5c <__assert_fail@plt+0x1a758>
   2e5b8:	cmp	fp, sl
   2e5bc:	bls	2e780 <__assert_fail@plt+0x1b27c>
   2e5c0:	rsb	r3, sl, fp
   2e5c4:	cmp	r3, #9
   2e5c8:	movhi	sl, #10
   2e5cc:	bls	2e774 <__assert_fail@plt+0x1b270>
   2e5d0:	ldrb	r3, [r7, #2]
   2e5d4:	add	r9, sp, #512	; 0x200
   2e5d8:	add	ip, r7, #3
   2e5dc:	and	r2, r3, #127	; 0x7f
   2e5e0:	tst	r3, #128	; 0x80
   2e5e4:	uxtb	r2, r2
   2e5e8:	lsr	r7, r2, #25
   2e5ec:	lsl	r8, r2, #7
   2e5f0:	str	r7, [sp, #308]	; 0x134
   2e5f4:	str	r8, [sp, #304]	; 0x130
   2e5f8:	ldrd	r6, [r9, #-208]	; 0xffffff30
   2e5fc:	orr	r6, r6, r0
   2e600:	orr	r7, r7, r1
   2e604:	bne	2e670 <__assert_fail@plt+0x1b16c>
   2e608:	mov	r0, r6
   2e60c:	mov	r1, r7
   2e610:	b	2da04 <__assert_fail@plt+0x1a500>
   2e614:	cmp	fp, sl
   2e618:	bls	2e768 <__assert_fail@plt+0x1b264>
   2e61c:	rsb	r6, sl, fp
   2e620:	cmp	r6, #9
   2e624:	movhi	r6, #10
   2e628:	bls	2e760 <__assert_fail@plt+0x1b25c>
   2e62c:	ldrb	r1, [r7, #2]
   2e630:	add	ip, r7, #3
   2e634:	and	r0, r1, #127	; 0x7f
   2e638:	tst	r1, #128	; 0x80
   2e63c:	uxtb	r0, r0
   2e640:	lsr	r9, r0, #25
   2e644:	lsl	lr, r0, #7
   2e648:	add	r0, sp, #256	; 0x100
   2e64c:	str	r9, [sp, #260]	; 0x104
   2e650:	str	lr, [sp, #256]	; 0x100
   2e654:	ldrd	r4, [r0]
   2e658:	orr	r4, r4, r2
   2e65c:	orr	r5, r5, r3
   2e660:	bne	2e6d4 <__assert_fail@plt+0x1b1d0>
   2e664:	mov	r7, r4
   2e668:	mov	r6, r5
   2e66c:	b	2db6c <__assert_fail@plt+0x1a668>
   2e670:	ldr	r8, [sp, #340]	; 0x154
   2e674:	mov	r1, #1
   2e678:	ldr	r9, [sp, #32]
   2e67c:	add	r1, r1, #1
   2e680:	cmp	sl, r1
   2e684:	bls	2e738 <__assert_fail@plt+0x1b234>
   2e688:	ldrb	lr, [ip], #1
   2e68c:	rsb	r0, r1, r1, lsl #3
   2e690:	sub	r5, r0, #32
   2e694:	rsb	r4, r0, #32
   2e698:	and	r2, lr, #127	; 0x7f
   2e69c:	tst	lr, #128	; 0x80
   2e6a0:	uxtb	r2, r2
   2e6a4:	lsl	r5, r2, r5
   2e6a8:	lsl	r0, r2, r0
   2e6ac:	orr	r4, r5, r2, lsr r4
   2e6b0:	str	r0, [sp, #192]	; 0xc0
   2e6b4:	str	r4, [sp, #196]	; 0xc4
   2e6b8:	ldrd	r4, [sp, #192]	; 0xc0
   2e6bc:	orr	r6, r6, r4
   2e6c0:	orr	r7, r7, r5
   2e6c4:	bne	2e67c <__assert_fail@plt+0x1b178>
   2e6c8:	str	r8, [sp, #340]	; 0x154
   2e6cc:	str	r9, [sp, #32]
   2e6d0:	b	2e608 <__assert_fail@plt+0x1b104>
   2e6d4:	ldr	r8, [sp, #340]	; 0x154
   2e6d8:	mov	r1, #1
   2e6dc:	ldr	r9, [sp, #32]
   2e6e0:	add	r1, r1, #1
   2e6e4:	cmp	r6, r1
   2e6e8:	bls	2e74c <__assert_fail@plt+0x1b248>
   2e6ec:	ldrb	lr, [ip], #1
   2e6f0:	rsb	r0, r1, r1, lsl #3
   2e6f4:	sub	sl, r0, #32
   2e6f8:	rsb	r7, r0, #32
   2e6fc:	and	r2, lr, #127	; 0x7f
   2e700:	tst	lr, #128	; 0x80
   2e704:	uxtb	r2, r2
   2e708:	lsl	sl, r2, sl
   2e70c:	lsl	r0, r2, r0
   2e710:	orr	r7, sl, r2, lsr r7
   2e714:	str	r0, [sp, #144]	; 0x90
   2e718:	str	r7, [sp, #148]	; 0x94
   2e71c:	ldrd	r2, [sp, #144]	; 0x90
   2e720:	orr	r4, r4, r2
   2e724:	orr	r5, r5, r3
   2e728:	bne	2e6e0 <__assert_fail@plt+0x1b1dc>
   2e72c:	str	r8, [sp, #340]	; 0x154
   2e730:	str	r9, [sp, #32]
   2e734:	b	2e664 <__assert_fail@plt+0x1b160>
   2e738:	str	r8, [sp, #340]	; 0x154
   2e73c:	mvn	r0, #0
   2e740:	str	r9, [sp, #32]
   2e744:	mvn	r1, #0
   2e748:	b	2da04 <__assert_fail@plt+0x1a500>
   2e74c:	mvn	r7, #0
   2e750:	str	r8, [sp, #340]	; 0x154
   2e754:	str	r9, [sp, #32]
   2e758:	mov	r6, r7
   2e75c:	b	2db6c <__assert_fail@plt+0x1a668>
   2e760:	cmp	r6, #1
   2e764:	bhi	2e62c <__assert_fail@plt+0x1b128>
   2e768:	mvn	r7, #0
   2e76c:	mov	r6, r7
   2e770:	b	2db6c <__assert_fail@plt+0x1a668>
   2e774:	cmp	r3, #1
   2e778:	movhi	sl, r3
   2e77c:	bhi	2e5d0 <__assert_fail@plt+0x1b0cc>
   2e780:	mvn	r0, #0
   2e784:	mvn	r1, #0
   2e788:	b	2da04 <__assert_fail@plt+0x1a500>
   2e78c:	bl	12dc0 <__stack_chk_fail@plt>
   2e790:	cmp	fp, r4
   2e794:	bls	2e910 <__assert_fail@plt+0x1b40c>
   2e798:	rsb	r5, r4, fp
   2e79c:	cmp	r5, #9
   2e7a0:	movhi	r5, #10
   2e7a4:	bls	2e908 <__assert_fail@plt+0x1b404>
   2e7a8:	ldr	r8, [sp, #56]	; 0x38
   2e7ac:	add	r1, sp, #512	; 0x200
   2e7b0:	add	sl, r8, #2
   2e7b4:	ldrb	r3, [r8, #1]
   2e7b8:	and	r2, r3, #127	; 0x7f
   2e7bc:	tst	r3, #128	; 0x80
   2e7c0:	uxtb	r2, r2
   2e7c4:	lsr	ip, r2, #25
   2e7c8:	lsl	lr, r2, #7
   2e7cc:	str	ip, [sp, #276]	; 0x114
   2e7d0:	str	lr, [sp, #272]	; 0x110
   2e7d4:	ldrd	r0, [r1, #-240]	; 0xffffff10
   2e7d8:	orr	r6, r6, r0
   2e7dc:	orr	r7, r7, r1
   2e7e0:	beq	2dbe8 <__assert_fail@plt+0x1a6e4>
   2e7e4:	ldr	r8, [sp, #340]	; 0x154
   2e7e8:	mov	r1, #1
   2e7ec:	ldr	r9, [sp, #32]
   2e7f0:	add	r1, r1, #1
   2e7f4:	cmp	r5, r1
   2e7f8:	bls	2e8e0 <__assert_fail@plt+0x1b3dc>
   2e7fc:	ldrb	ip, [sl], #1
   2e800:	rsb	r0, r1, r1, lsl #3
   2e804:	sub	r4, r0, #32
   2e808:	rsb	lr, r0, #32
   2e80c:	and	r2, ip, #127	; 0x7f
   2e810:	tst	ip, #128	; 0x80
   2e814:	uxtb	r2, r2
   2e818:	lsl	r4, r2, r4
   2e81c:	lsl	r0, r2, r0
   2e820:	orr	lr, r4, r2, lsr lr
   2e824:	str	r0, [sp, #160]	; 0xa0
   2e828:	str	lr, [sp, #164]	; 0xa4
   2e82c:	ldrd	r2, [sp, #160]	; 0xa0
   2e830:	orr	r6, r6, r2
   2e834:	orr	r7, r7, r3
   2e838:	bne	2e7f0 <__assert_fail@plt+0x1b2ec>
   2e83c:	str	r8, [sp, #340]	; 0x154
   2e840:	str	r9, [sp, #32]
   2e844:	b	2dbe8 <__assert_fail@plt+0x1a6e4>
   2e848:	ldr	r3, [r7, #1]
   2e84c:	ldr	r2, [r7, #5]
   2e850:	rev	r3, r3
   2e854:	str	r3, [sp, #52]	; 0x34
   2e858:	rev	r2, r2
   2e85c:	str	r2, [sp, #48]	; 0x30
   2e860:	b	2d964 <__assert_fail@plt+0x1a460>
   2e864:	cmp	r3, #1
   2e868:	movhi	r4, r3
   2e86c:	bhi	2dd54 <__assert_fail@plt+0x1a850>
   2e870:	mvn	r0, #0
   2e874:	mvn	r1, #0
   2e878:	b	2db0c <__assert_fail@plt+0x1a608>
   2e87c:	ldr	r8, [sp, #340]	; 0x154
   2e880:	mov	r1, #1
   2e884:	ldr	r9, [sp, #32]
   2e888:	add	r1, r1, #1
   2e88c:	cmp	r1, r4
   2e890:	bcs	2e8f4 <__assert_fail@plt+0x1b3f0>
   2e894:	ldrb	lr, [ip], #1
   2e898:	rsb	r0, r1, r1, lsl #3
   2e89c:	sub	sl, r0, #32
   2e8a0:	rsb	r5, r0, #32
   2e8a4:	and	r2, lr, #127	; 0x7f
   2e8a8:	tst	lr, #128	; 0x80
   2e8ac:	uxtb	r2, r2
   2e8b0:	lsl	sl, r2, sl
   2e8b4:	lsl	r0, r2, r0
   2e8b8:	orr	r5, sl, r2, lsr r5
   2e8bc:	str	r0, [sp, #136]	; 0x88
   2e8c0:	str	r5, [sp, #140]	; 0x8c
   2e8c4:	ldrd	r2, [sp, #136]	; 0x88
   2e8c8:	orr	r6, r6, r2
   2e8cc:	orr	r7, r7, r3
   2e8d0:	bne	2e888 <__assert_fail@plt+0x1b384>
   2e8d4:	str	r8, [sp, #340]	; 0x154
   2e8d8:	str	r9, [sp, #32]
   2e8dc:	b	2dd88 <__assert_fail@plt+0x1a884>
   2e8e0:	str	r8, [sp, #340]	; 0x154
   2e8e4:	mvn	r6, #0
   2e8e8:	str	r9, [sp, #32]
   2e8ec:	mvn	r7, #0
   2e8f0:	b	2dbe8 <__assert_fail@plt+0x1a6e4>
   2e8f4:	str	r8, [sp, #340]	; 0x154
   2e8f8:	mvn	r0, #0
   2e8fc:	str	r9, [sp, #32]
   2e900:	mvn	r1, #0
   2e904:	b	2db0c <__assert_fail@plt+0x1a608>
   2e908:	cmp	r5, #1
   2e90c:	bhi	2e7a8 <__assert_fail@plt+0x1b2a4>
   2e910:	mvn	r6, #0
   2e914:	mvn	r7, #0
   2e918:	b	2dbe8 <__assert_fail@plt+0x1a6e4>
   2e91c:	ldr	r3, [r7]
   2e920:	ldr	r2, [r7, #4]
   2e924:	rev	r3, r3
   2e928:	str	r3, [sp, #36]	; 0x24
   2e92c:	rev	r2, r2
   2e930:	str	r2, [sp, #32]
   2e934:	b	2e3bc <__assert_fail@plt+0x1aeb8>
   2e938:	cmp	fp, sl
   2e93c:	bls	2ea48 <__assert_fail@plt+0x1b544>
   2e940:	rsb	r3, sl, fp
   2e944:	cmp	r3, #9
   2e948:	movhi	lr, #10
   2e94c:	bls	2ea3c <__assert_fail@plt+0x1b538>
   2e950:	ldrb	r3, [sl, #1]
   2e954:	add	ip, sl, #2
   2e958:	and	r2, r3, #127	; 0x7f
   2e95c:	tst	r3, #128	; 0x80
   2e960:	add	r3, sp, #512	; 0x200
   2e964:	uxtb	r2, r2
   2e968:	lsr	r0, r2, #25
   2e96c:	lsl	r1, r2, #7
   2e970:	str	r0, [sp, #324]	; 0x144
   2e974:	str	r1, [sp, #320]	; 0x140
   2e978:	ldrd	r2, [r3, #-192]	; 0xffffff40
   2e97c:	orr	r6, r6, r2
   2e980:	orr	r7, r7, r3
   2e984:	beq	2d6f0 <__assert_fail@plt+0x1a1ec>
   2e988:	ldr	r8, [sp, #340]	; 0x154
   2e98c:	mov	r1, #1
   2e990:	ldr	r9, [sp, #32]
   2e994:	strd	r4, [sp, #56]	; 0x38
   2e998:	add	r1, r1, #1
   2e99c:	cmp	lr, r1
   2e9a0:	bls	2ea24 <__assert_fail@plt+0x1b520>
   2e9a4:	ldrb	r4, [ip], #1
   2e9a8:	rsb	r0, r1, r1, lsl #3
   2e9ac:	sub	sl, r0, #32
   2e9b0:	rsb	r5, r0, #32
   2e9b4:	and	r2, r4, #127	; 0x7f
   2e9b8:	tst	r4, #128	; 0x80
   2e9bc:	uxtb	r2, r2
   2e9c0:	lsl	sl, r2, sl
   2e9c4:	lsl	r0, r2, r0
   2e9c8:	orr	r5, sl, r2, lsr r5
   2e9cc:	str	r0, [sp, #208]	; 0xd0
   2e9d0:	str	r5, [sp, #212]	; 0xd4
   2e9d4:	ldrd	r4, [sp, #208]	; 0xd0
   2e9d8:	orr	r6, r6, r4
   2e9dc:	orr	r7, r7, r5
   2e9e0:	bne	2e998 <__assert_fail@plt+0x1b494>
   2e9e4:	ldrd	r4, [sp, #56]	; 0x38
   2e9e8:	str	r8, [sp, #340]	; 0x154
   2e9ec:	str	r9, [sp, #32]
   2e9f0:	b	2d6f0 <__assert_fail@plt+0x1a1ec>
   2e9f4:	ldr	r6, [r7, #5]
   2e9f8:	ldr	r2, [sl, #8]
   2e9fc:	ldr	r3, [r7, #1]
   2ea00:	rev	r6, r6
   2ea04:	ldr	r1, [sl, #12]
   2ea08:	rev	r5, r2
   2ea0c:	rev	r7, r3
   2ea10:	rev	r4, r1
   2ea14:	b	2d82c <__assert_fail@plt+0x1a328>
   2ea18:	cmp	r5, #1
   2ea1c:	bhi	2d760 <__assert_fail@plt+0x1a25c>
   2ea20:	b	2e910 <__assert_fail@plt+0x1b40c>
   2ea24:	ldrd	r4, [sp, #56]	; 0x38
   2ea28:	mvn	r6, #0
   2ea2c:	str	r8, [sp, #340]	; 0x154
   2ea30:	mvn	r7, #0
   2ea34:	str	r9, [sp, #32]
   2ea38:	b	2d6f0 <__assert_fail@plt+0x1a1ec>
   2ea3c:	cmp	r3, #1
   2ea40:	movhi	lr, r3
   2ea44:	bhi	2e950 <__assert_fail@plt+0x1b44c>
   2ea48:	mvn	r6, #0
   2ea4c:	mvn	r7, #0
   2ea50:	b	2d6f0 <__assert_fail@plt+0x1a1ec>
   2ea54:	rev	r4, r4
   2ea58:	b	2df60 <__assert_fail@plt+0x1aa5c>
   2ea5c:	rev	r3, r3
   2ea60:	b	2df30 <__assert_fail@plt+0x1aa2c>
   2ea64:	ldr	r4, [sl, #4]
   2ea68:	mov	r7, #0
   2ea6c:	rev	r6, r6
   2ea70:	rev	r4, r4
   2ea74:	b	2df08 <__assert_fail@plt+0x1aa04>
   2ea78:	cmp	fp, sl
   2ea7c:	bls	2e870 <__assert_fail@plt+0x1b36c>
   2ea80:	rsb	r3, sl, fp
   2ea84:	cmp	r3, #9
   2ea88:	movhi	r4, #10
   2ea8c:	bls	2ebec <__assert_fail@plt+0x1b6e8>
   2ea90:	ldrb	r3, [sl, #1]
   2ea94:	add	r8, sp, #512	; 0x200
   2ea98:	add	ip, sl, #2
   2ea9c:	and	r2, r3, #127	; 0x7f
   2eaa0:	tst	r3, #128	; 0x80
   2eaa4:	uxtb	r2, r2
   2eaa8:	lsr	lr, r2, #25
   2eaac:	lsl	r5, r2, #7
   2eab0:	str	lr, [sp, #300]	; 0x12c
   2eab4:	str	r5, [sp, #296]	; 0x128
   2eab8:	ldrd	r6, [r8, #-216]	; 0xffffff28
   2eabc:	orr	r6, r6, r0
   2eac0:	orr	r7, r7, r1
   2eac4:	beq	2dd88 <__assert_fail@plt+0x1a884>
   2eac8:	ldr	r8, [sp, #340]	; 0x154
   2eacc:	mov	r1, #1
   2ead0:	ldr	r9, [sp, #32]
   2ead4:	add	r1, r1, #1
   2ead8:	cmp	r4, r1
   2eadc:	bls	2e8f4 <__assert_fail@plt+0x1b3f0>
   2eae0:	ldrb	lr, [ip], #1
   2eae4:	rsb	r0, r1, r1, lsl #3
   2eae8:	sub	sl, r0, #32
   2eaec:	rsb	r5, r0, #32
   2eaf0:	and	r2, lr, #127	; 0x7f
   2eaf4:	tst	lr, #128	; 0x80
   2eaf8:	uxtb	r2, r2
   2eafc:	lsl	sl, r2, sl
   2eb00:	lsl	r0, r2, r0
   2eb04:	orr	r5, sl, r2, lsr r5
   2eb08:	str	r0, [sp, #184]	; 0xb8
   2eb0c:	str	r5, [sp, #188]	; 0xbc
   2eb10:	ldrd	r2, [sp, #184]	; 0xb8
   2eb14:	orr	r6, r6, r2
   2eb18:	orr	r7, r7, r3
   2eb1c:	beq	2e8d4 <__assert_fail@plt+0x1b3d0>
   2eb20:	b	2ead4 <__assert_fail@plt+0x1b5d0>
   2eb24:	cmp	fp, ip
   2eb28:	bls	2ec1c <__assert_fail@plt+0x1b718>
   2eb2c:	rsb	r6, ip, fp
   2eb30:	cmp	r6, #9
   2eb34:	movhi	r6, #10
   2eb38:	bls	2ec14 <__assert_fail@plt+0x1b710>
   2eb3c:	ldrb	r1, [ip, #1]
   2eb40:	add	sl, ip, #2
   2eb44:	and	r0, r1, #127	; 0x7f
   2eb48:	tst	r1, #128	; 0x80
   2eb4c:	uxtb	r0, r0
   2eb50:	lsr	r8, r0, #25
   2eb54:	lsl	r9, r0, #7
   2eb58:	str	r8, [sp, #244]	; 0xf4
   2eb5c:	str	r9, [sp, #240]	; 0xf0
   2eb60:	ldrd	r8, [sp, #240]	; 0xf0
   2eb64:	orr	r2, r2, r8
   2eb68:	orr	r3, r3, r9
   2eb6c:	beq	2dce0 <__assert_fail@plt+0x1a7dc>
   2eb70:	ldr	r8, [sp, #340]	; 0x154
   2eb74:	mov	r1, #1
   2eb78:	ldr	r9, [sp, #32]
   2eb7c:	strd	r2, [sp, #56]	; 0x38
   2eb80:	str	r4, [sp, #40]	; 0x28
   2eb84:	add	r1, r1, #1
   2eb88:	cmp	r1, r6
   2eb8c:	bcs	2ebfc <__assert_fail@plt+0x1b6f8>
   2eb90:	ldrb	ip, [sl], #1
   2eb94:	rsb	r0, r1, r1, lsl #3
   2eb98:	sub	r5, r0, #32
   2eb9c:	rsb	lr, r0, #32
   2eba0:	and	r2, ip, #127	; 0x7f
   2eba4:	tst	ip, #128	; 0x80
   2eba8:	uxtb	r2, r2
   2ebac:	lsl	r5, r2, r5
   2ebb0:	lsl	r0, r2, r0
   2ebb4:	orr	lr, r5, r2, lsr lr
   2ebb8:	str	r0, [sp, #128]	; 0x80
   2ebbc:	str	lr, [sp, #132]	; 0x84
   2ebc0:	ldrd	r2, [sp, #56]	; 0x38
   2ebc4:	ldrd	r4, [sp, #128]	; 0x80
   2ebc8:	orr	r2, r2, r4
   2ebcc:	orr	r3, r3, r5
   2ebd0:	strd	r2, [sp, #56]	; 0x38
   2ebd4:	bne	2eb84 <__assert_fail@plt+0x1b680>
   2ebd8:	str	r8, [sp, #340]	; 0x154
   2ebdc:	ldrd	r2, [sp, #56]	; 0x38
   2ebe0:	str	r9, [sp, #32]
   2ebe4:	ldr	r4, [sp, #40]	; 0x28
   2ebe8:	b	2dce0 <__assert_fail@plt+0x1a7dc>
   2ebec:	cmp	r3, #1
   2ebf0:	bls	2e870 <__assert_fail@plt+0x1b36c>
   2ebf4:	mov	r4, r3
   2ebf8:	b	2ea90 <__assert_fail@plt+0x1b58c>
   2ebfc:	mvn	r6, #0
   2ec00:	str	r8, [sp, #340]	; 0x154
   2ec04:	str	r9, [sp, #32]
   2ec08:	mov	r5, r6
   2ec0c:	ldr	r4, [sp, #40]	; 0x28
   2ec10:	b	2dce8 <__assert_fail@plt+0x1a7e4>
   2ec14:	cmp	r6, #1
   2ec18:	bhi	2eb3c <__assert_fail@plt+0x1b638>
   2ec1c:	mvn	r6, #0
   2ec20:	mov	r5, r6
   2ec24:	b	2dce8 <__assert_fail@plt+0x1a7e4>
   2ec28:	cmp	fp, sl
   2ec2c:	bls	2ede0 <__assert_fail@plt+0x1b8dc>
   2ec30:	rsb	r6, sl, fp
   2ec34:	cmp	r6, #9
   2ec38:	movhi	r6, #10
   2ec3c:	bls	2edd8 <__assert_fail@plt+0x1b8d4>
   2ec40:	ldrb	r1, [r7, #2]
   2ec44:	add	ip, r7, #3
   2ec48:	and	r0, r1, #127	; 0x7f
   2ec4c:	tst	r1, #128	; 0x80
   2ec50:	uxtb	r0, r0
   2ec54:	lsl	r4, r0, #7
   2ec58:	lsr	lr, r0, #25
   2ec5c:	str	r4, [sp, #232]	; 0xe8
   2ec60:	str	lr, [sp, #236]	; 0xec
   2ec64:	ldrd	r4, [sp, #232]	; 0xe8
   2ec68:	orr	r4, r4, r2
   2ec6c:	orr	r5, r5, r3
   2ec70:	bne	2ed34 <__assert_fail@plt+0x1b830>
   2ec74:	mov	r7, r4
   2ec78:	mov	r4, r5
   2ec7c:	b	2dcbc <__assert_fail@plt+0x1a7b8>
   2ec80:	cmp	fp, sl
   2ec84:	bls	2edcc <__assert_fail@plt+0x1b8c8>
   2ec88:	rsb	r1, sl, fp
   2ec8c:	cmp	r1, #9
   2ec90:	movhi	sl, #10
   2ec94:	bls	2edc0 <__assert_fail@plt+0x1b8bc>
   2ec98:	ldrb	r1, [r7, #2]
   2ec9c:	add	r9, sp, #512	; 0x200
   2eca0:	add	ip, r7, #3
   2eca4:	and	r0, r1, #127	; 0x7f
   2eca8:	tst	r1, #128	; 0x80
   2ecac:	uxtb	r0, r0
   2ecb0:	lsr	r7, r0, #25
   2ecb4:	lsl	r8, r0, #7
   2ecb8:	str	r7, [sp, #284]	; 0x11c
   2ecbc:	str	r8, [sp, #280]	; 0x118
   2ecc0:	ldrd	r6, [r9, #-232]	; 0xffffff18
   2ecc4:	orr	r6, r6, r2
   2ecc8:	orr	r7, r7, r3
   2eccc:	beq	2da98 <__assert_fail@plt+0x1a594>
   2ecd0:	ldr	r8, [sp, #340]	; 0x154
   2ecd4:	mov	r1, #1
   2ecd8:	ldr	r9, [sp, #32]
   2ecdc:	add	r1, r1, #1
   2ece0:	cmp	r1, sl
   2ece4:	bcs	2ed98 <__assert_fail@plt+0x1b894>
   2ece8:	ldrb	lr, [ip], #1
   2ecec:	rsb	r0, r1, r1, lsl #3
   2ecf0:	sub	r5, r0, #32
   2ecf4:	rsb	r4, r0, #32
   2ecf8:	and	r2, lr, #127	; 0x7f
   2ecfc:	tst	lr, #128	; 0x80
   2ed00:	uxtb	r2, r2
   2ed04:	lsl	r5, r2, r5
   2ed08:	lsl	r0, r2, r0
   2ed0c:	orr	r4, r5, r2, lsr r4
   2ed10:	str	r0, [sp, #168]	; 0xa8
   2ed14:	str	r4, [sp, #172]	; 0xac
   2ed18:	ldrd	r4, [sp, #168]	; 0xa8
   2ed1c:	orr	r6, r6, r4
   2ed20:	orr	r7, r7, r5
   2ed24:	bne	2ecdc <__assert_fail@plt+0x1b7d8>
   2ed28:	str	r8, [sp, #340]	; 0x154
   2ed2c:	str	r9, [sp, #32]
   2ed30:	b	2da98 <__assert_fail@plt+0x1a594>
   2ed34:	ldr	r8, [sp, #340]	; 0x154
   2ed38:	mov	r1, #1
   2ed3c:	ldr	r9, [sp, #32]
   2ed40:	add	r1, r1, #1
   2ed44:	cmp	r1, r6
   2ed48:	bcs	2edac <__assert_fail@plt+0x1b8a8>
   2ed4c:	ldrb	lr, [ip], #1
   2ed50:	rsb	r0, r1, r1, lsl #3
   2ed54:	sub	sl, r0, #32
   2ed58:	rsb	r7, r0, #32
   2ed5c:	and	r2, lr, #127	; 0x7f
   2ed60:	tst	lr, #128	; 0x80
   2ed64:	uxtb	r2, r2
   2ed68:	lsl	sl, r2, sl
   2ed6c:	lsl	r0, r2, r0
   2ed70:	orr	r7, sl, r2, lsr r7
   2ed74:	str	r0, [sp, #120]	; 0x78
   2ed78:	str	r7, [sp, #124]	; 0x7c
   2ed7c:	ldrd	r2, [sp, #120]	; 0x78
   2ed80:	orr	r4, r4, r2
   2ed84:	orr	r5, r5, r3
   2ed88:	bne	2ed40 <__assert_fail@plt+0x1b83c>
   2ed8c:	str	r8, [sp, #340]	; 0x154
   2ed90:	str	r9, [sp, #32]
   2ed94:	b	2ec74 <__assert_fail@plt+0x1b770>
   2ed98:	str	r8, [sp, #340]	; 0x154
   2ed9c:	mvn	r6, #0
   2eda0:	str	r9, [sp, #32]
   2eda4:	mvn	r7, #0
   2eda8:	b	2da98 <__assert_fail@plt+0x1a594>
   2edac:	mvn	r7, #0
   2edb0:	str	r8, [sp, #340]	; 0x154
   2edb4:	str	r9, [sp, #32]
   2edb8:	mov	r4, r7
   2edbc:	b	2dcbc <__assert_fail@plt+0x1a7b8>
   2edc0:	cmp	r1, #1
   2edc4:	movhi	sl, r1
   2edc8:	bhi	2ec98 <__assert_fail@plt+0x1b794>
   2edcc:	mvn	r6, #0
   2edd0:	mvn	r7, #0
   2edd4:	b	2da98 <__assert_fail@plt+0x1a594>
   2edd8:	cmp	r6, #1
   2eddc:	bhi	2ec40 <__assert_fail@plt+0x1b73c>
   2ede0:	mvn	r7, #0
   2ede4:	mov	r4, r7
   2ede8:	b	2dcbc <__assert_fail@plt+0x1a7b8>
   2edec:	rev	r6, r6
   2edf0:	b	2d388 <__assert_fail@plt+0x19e84>
   2edf4:	cmp	fp, ip
   2edf8:	bls	2eed8 <__assert_fail@plt+0x1b9d4>
   2edfc:	rsb	sl, ip, fp
   2ee00:	cmp	sl, #9
   2ee04:	movhi	sl, #10
   2ee08:	bls	2eed0 <__assert_fail@plt+0x1b9cc>
   2ee0c:	ldrb	r3, [ip, #1]
   2ee10:	add	r1, sp, #512	; 0x200
   2ee14:	add	ip, ip, #2
   2ee18:	str	ip, [sp, #56]	; 0x38
   2ee1c:	and	r2, r3, #127	; 0x7f
   2ee20:	tst	r3, #128	; 0x80
   2ee24:	uxtb	r2, r2
   2ee28:	lsr	r9, r2, #25
   2ee2c:	lsl	ip, r2, #7
   2ee30:	str	r9, [sp, #268]	; 0x10c
   2ee34:	str	ip, [sp, #264]	; 0x108
   2ee38:	ldrd	r0, [r1, #-248]	; 0xffffff08
   2ee3c:	orr	r4, r4, r0
   2ee40:	orr	r5, r5, r1
   2ee44:	beq	2db94 <__assert_fail@plt+0x1a690>
   2ee48:	ldr	r8, [sp, #340]	; 0x154
   2ee4c:	mov	r1, #1
   2ee50:	ldr	r9, [sp, #32]
   2ee54:	add	r1, r1, #1
   2ee58:	cmp	r1, sl
   2ee5c:	bcs	2eee4 <__assert_fail@plt+0x1b9e0>
   2ee60:	ldr	r2, [sp, #56]	; 0x38
   2ee64:	rsb	r0, r1, r1, lsl #3
   2ee68:	sub	r3, r0, #32
   2ee6c:	str	r3, [sp, #340]	; 0x154
   2ee70:	rsb	lr, r0, #32
   2ee74:	ldrb	ip, [r2], #1
   2ee78:	tst	ip, #128	; 0x80
   2ee7c:	str	r2, [sp, #56]	; 0x38
   2ee80:	and	r2, ip, #127	; 0x7f
   2ee84:	ldr	ip, [sp, #340]	; 0x154
   2ee88:	uxtb	r2, r2
   2ee8c:	lsl	ip, r2, ip
   2ee90:	lsl	r0, r2, r0
   2ee94:	orr	lr, ip, r2, lsr lr
   2ee98:	str	r0, [sp, #152]	; 0x98
   2ee9c:	str	lr, [sp, #156]	; 0x9c
   2eea0:	ldrd	r2, [sp, #152]	; 0x98
   2eea4:	orr	r4, r4, r2
   2eea8:	orr	r5, r5, r3
   2eeac:	bne	2ee54 <__assert_fail@plt+0x1b950>
   2eeb0:	str	r8, [sp, #340]	; 0x154
   2eeb4:	str	r9, [sp, #32]
   2eeb8:	b	2db94 <__assert_fail@plt+0x1a690>
   2eebc:	ldr	r3, [r7, #1]
   2eec0:	ldr	r2, [r7, #5]
   2eec4:	rev	r5, r3
   2eec8:	rev	r4, r2
   2eecc:	b	2d6c8 <__assert_fail@plt+0x1a1c4>
   2eed0:	cmp	sl, #1
   2eed4:	bhi	2ee0c <__assert_fail@plt+0x1b908>
   2eed8:	mvn	r4, #0
   2eedc:	mvn	r5, #0
   2eee0:	b	2db94 <__assert_fail@plt+0x1a690>
   2eee4:	str	r8, [sp, #340]	; 0x154
   2eee8:	mvn	r4, #0
   2eeec:	str	r9, [sp, #32]
   2eef0:	mvn	r5, #0
   2eef4:	b	2db94 <__assert_fail@plt+0x1a690>
   2eef8:	cmp	r3, #1
   2eefc:	bls	2e870 <__assert_fail@plt+0x1b36c>
   2ef00:	mov	r4, r3
   2ef04:	b	2d898 <__assert_fail@plt+0x1a394>
   2ef08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ef0c:	sub	sp, sp, #236	; 0xec
   2ef10:	movw	r5, #37688	; 0x9338
   2ef14:	movt	r5, #5
   2ef18:	ldr	r4, [sp, #276]	; 0x114
   2ef1c:	mov	r7, r3
   2ef20:	str	r5, [sp, #160]	; 0xa0
   2ef24:	mov	r6, r1
   2ef28:	ldr	ip, [sp, #160]	; 0xa0
   2ef2c:	mov	r5, r2
   2ef30:	ldr	r9, [r4, #44]	; 0x2c
   2ef34:	str	r4, [sp, #52]	; 0x34
   2ef38:	ldr	r3, [ip]
   2ef3c:	cmp	r9, #0
   2ef40:	str	r0, [sp, #48]	; 0x30
   2ef44:	str	r9, [sp, #36]	; 0x24
   2ef48:	ldr	r4, [sp, #272]	; 0x110
   2ef4c:	str	r3, [sp, #228]	; 0xe4
   2ef50:	beq	2f854 <__assert_fail@plt+0x1c350>
   2ef54:	mov	r2, #5
   2ef58:	movw	r1, #60928	; 0xee00
   2ef5c:	mov	r0, #0
   2ef60:	movt	r1, #3
   2ef64:	bl	12d84 <dcgettext@plt>
   2ef68:	mov	r8, r0
   2ef6c:	mov	r0, r7
   2ef70:	bl	133d8 <elf_ndxscn@plt>
   2ef74:	mov	r1, r4
   2ef78:	mov	r7, r0
   2ef7c:	add	r0, r6, #16
   2ef80:	bl	1870c <__assert_fail@plt+0x5208>
   2ef84:	ldrd	sl, [r4, #24]
   2ef88:	mov	r1, r8
   2ef8c:	mov	r2, r7
   2ef90:	movw	ip, #37712	; 0x9350
   2ef94:	movt	ip, #5
   2ef98:	strd	sl, [sp]
   2ef9c:	str	ip, [sp, #44]	; 0x2c
   2efa0:	mov	r3, r0
   2efa4:	mov	r0, #1
   2efa8:	bl	13204 <__printf_chk@plt>
   2efac:	ldr	r4, [sp, #44]	; 0x2c
   2efb0:	ldr	r1, [r4, #128]	; 0x80
   2efb4:	cmp	r1, #0
   2efb8:	bne	2f7e0 <__assert_fail@plt+0x1c2dc>
   2efbc:	ldrb	r3, [r5, #4]
   2efc0:	mov	r2, #4
   2efc4:	ldr	r5, [sp, #36]	; 0x24
   2efc8:	mov	r1, #0
   2efcc:	cmp	r3, #1
   2efd0:	strb	r2, [sp, #175]	; 0xaf
   2efd4:	mov	sl, r1
   2efd8:	mov	r9, #1
   2efdc:	moveq	r3, r2
   2efe0:	movne	r3, #8
   2efe4:	strb	r3, [sp, #174]	; 0xae
   2efe8:	mov	r2, #0
   2efec:	ldr	r7, [r5]
   2eff0:	mov	r3, #0
   2eff4:	ldr	r0, [r5, #12]
   2eff8:	str	r1, [sp, #176]	; 0xb0
   2effc:	add	r0, r7, r0
   2f000:	str	r9, [sp, #32]
   2f004:	str	r7, [sp, #180]	; 0xb4
   2f008:	str	r0, [sp, #40]	; 0x28
   2f00c:	strd	r2, [sp, #192]	; 0xc0
   2f010:	ldr	r9, [sp, #40]	; 0x28
   2f014:	cmp	r9, r7
   2f018:	bls	2f140 <__assert_fail@plt+0x1bc3c>
   2f01c:	ldr	r4, [sp, #36]	; 0x24
   2f020:	mov	r3, #0
   2f024:	ldr	ip, [sp, #32]
   2f028:	ldr	r2, [r4]
   2f02c:	cmp	ip, #0
   2f030:	str	sl, [sp, #184]	; 0xb8
   2f034:	rsb	fp, r2, r7
   2f038:	str	r3, [sp, #188]	; 0xbc
   2f03c:	beq	2f050 <__assert_fail@plt+0x1bb4c>
   2f040:	ldr	r5, [sp, #44]	; 0x2c
   2f044:	ldr	r3, [r5, #128]	; 0x80
   2f048:	cmp	r3, #0
   2f04c:	bne	2f2dc <__assert_fail@plt+0x1bdd8>
   2f050:	cmp	sl, #0
   2f054:	movne	r0, sl
   2f058:	beq	2f794 <__assert_fail@plt+0x1c290>
   2f05c:	ldrh	r3, [r0, #26]
   2f060:	cmp	r3, #4
   2f064:	bhi	2f074 <__assert_fail@plt+0x1bb70>
   2f068:	ldrb	r3, [r0, #32]
   2f06c:	cmp	r3, #5
   2f070:	beq	2f548 <__assert_fail@plt+0x1c044>
   2f074:	ldr	r9, [sp, #36]	; 0x24
   2f078:	ldrb	r3, [sp, #174]	; 0xae
   2f07c:	ldr	r2, [r9, #12]
   2f080:	rsb	r2, fp, r2
   2f084:	cmp	r2, r3, lsl #1
   2f088:	bcc	2f804 <__assert_fail@plt+0x1c300>
   2f08c:	cmp	r3, #8
   2f090:	beq	2f4fc <__assert_fail@plt+0x1bff8>
   2f094:	ldr	ip, [sp, #52]	; 0x34
   2f098:	ldrb	r3, [ip, #84]	; 0x54
   2f09c:	ldr	ip, [sp, #180]	; 0xb4
   2f0a0:	cmp	r3, #0
   2f0a4:	ldr	r2, [ip]
   2f0a8:	moveq	r3, #0
   2f0ac:	strdeq	r2, [sp, #200]	; 0xc8
   2f0b0:	ldreq	r4, [ip, #4]
   2f0b4:	bne	2fc88 <__assert_fail@plt+0x1c784>
   2f0b8:	mvn	r0, #0
   2f0bc:	mov	r1, #0
   2f0c0:	cmp	r3, r1
   2f0c4:	cmpeq	r2, r0
   2f0c8:	add	ip, ip, #8
   2f0cc:	mov	r3, #0
   2f0d0:	str	ip, [sp, #180]	; 0xb4
   2f0d4:	str	r3, [sp, #212]	; 0xd4
   2f0d8:	mvneq	r2, #0
   2f0dc:	mvneq	r3, #0
   2f0e0:	str	r4, [sp, #208]	; 0xd0
   2f0e4:	strdeq	r2, [sp, #200]	; 0xc8
   2f0e8:	beq	2f73c <__assert_fail@plt+0x1c238>
   2f0ec:	ldrd	r2, [sp, #200]	; 0xc8
   2f0f0:	mov	r4, #1
   2f0f4:	mvn	r0, #0
   2f0f8:	mvn	r1, #0
   2f0fc:	cmp	r3, r1
   2f100:	cmpeq	r2, r0
   2f104:	beq	2f73c <__assert_fail@plt+0x1c238>
   2f108:	orrs	r1, r2, r3
   2f10c:	bne	2f15c <__assert_fail@plt+0x1bc58>
   2f110:	ldrd	r2, [sp, #208]	; 0xd0
   2f114:	orrs	r5, r2, r3
   2f118:	bne	2f15c <__assert_fail@plt+0x1bc58>
   2f11c:	ldr	r9, [sp, #32]
   2f120:	cmp	r9, #0
   2f124:	bne	2f7b4 <__assert_fail@plt+0x1c2b0>
   2f128:	ldr	r7, [sp, #180]	; 0xb4
   2f12c:	mov	ip, #1
   2f130:	ldr	r9, [sp, #40]	; 0x28
   2f134:	str	ip, [sp, #32]
   2f138:	cmp	r9, r7
   2f13c:	bhi	2f01c <__assert_fail@plt+0x1bb18>
   2f140:	ldr	r4, [sp, #160]	; 0xa0
   2f144:	ldr	r2, [sp, #228]	; 0xe4
   2f148:	ldr	r3, [r4]
   2f14c:	cmp	r2, r3
   2f150:	bne	2fc0c <__assert_fail@plt+0x1c708>
   2f154:	add	sp, sp, #236	; 0xec
   2f158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f15c:	ldr	r5, [sp, #52]	; 0x34
   2f160:	ldr	r3, [sp, #180]	; 0xb4
   2f164:	ldr	r9, [sp, #32]
   2f168:	ldrb	r2, [r5, #84]	; 0x54
   2f16c:	add	r3, r3, #2
   2f170:	cmp	r2, #0
   2f174:	ldrhne	r2, [r3, #-2]
   2f178:	ldrheq	r6, [r3, #-2]
   2f17c:	str	r3, [sp, #180]	; 0xb4
   2f180:	lslne	r1, r2, #8
   2f184:	orrne	r2, r1, r2, lsr #8
   2f188:	uxthne	r6, r2
   2f18c:	cmp	r9, #0
   2f190:	beq	2f2c8 <__assert_fail@plt+0x1bdc4>
   2f194:	movw	r1, #12196	; 0x2fa4
   2f198:	mov	r2, fp
   2f19c:	mov	r0, #1
   2f1a0:	movt	r1, #4
   2f1a4:	bl	13204 <__printf_chk@plt>
   2f1a8:	ldrd	r8, [sp, #208]	; 0xd0
   2f1ac:	movw	r1, #12220	; 0x2fbc
   2f1b0:	ldrd	r2, [sp, #200]	; 0xc8
   2f1b4:	movt	r1, #4
   2f1b8:	mov	r0, #1
   2f1bc:	strd	r8, [sp]
   2f1c0:	bl	13204 <__printf_chk@plt>
   2f1c4:	ldr	ip, [sp, #44]	; 0x2c
   2f1c8:	ldrb	r3, [ip, #33]	; 0x21
   2f1cc:	cmp	r3, #0
   2f1d0:	bne	2f250 <__assert_fail@plt+0x1bd4c>
   2f1d4:	cmp	r4, #0
   2f1d8:	beq	2f4f0 <__assert_fail@plt+0x1bfec>
   2f1dc:	ldrd	r4, [sp, #192]	; 0xc0
   2f1e0:	ldrd	r8, [sp, #200]	; 0xc8
   2f1e4:	ldrd	r2, [sp, #208]	; 0xd0
   2f1e8:	adds	r8, r8, r4
   2f1ec:	adc	r9, r9, r5
   2f1f0:	adds	r4, r4, r2
   2f1f4:	adc	r5, r5, r3
   2f1f8:	movw	r1, #12208	; 0x2fb0
   2f1fc:	mov	r0, #1
   2f200:	movt	r1, #4
   2f204:	bl	13204 <__printf_chk@plt>
   2f208:	mov	r2, r8
   2f20c:	mov	r3, r9
   2f210:	ldrb	r1, [sp, #174]	; 0xae
   2f214:	ldr	r0, [sp, #48]	; 0x30
   2f218:	strd	r8, [sp]
   2f21c:	bl	27164 <__assert_fail@plt+0x13c60>
   2f220:	movw	r1, #12240	; 0x2fd0
   2f224:	mov	r0, #1
   2f228:	movt	r1, #4
   2f22c:	bl	13204 <__printf_chk@plt>
   2f230:	subs	r2, r4, #1
   2f234:	ldr	r0, [sp, #48]	; 0x30
   2f238:	sbc	r3, r5, #0
   2f23c:	ldrb	r1, [sp, #174]	; 0xae
   2f240:	strd	r4, [sp]
   2f244:	bl	27164 <__assert_fail@plt+0x13c60>
   2f248:	mov	r0, #10
   2f24c:	bl	131b0 <putchar@plt>
   2f250:	ldr	r0, [sp, #180]	; 0xb4
   2f254:	ldr	r4, [sp, #40]	; 0x28
   2f258:	rsb	r3, r0, r4
   2f25c:	cmp	r3, r6
   2f260:	ble	2f82c <__assert_fail@plt+0x1c328>
   2f264:	ldr	r3, [sp, #184]	; 0xb8
   2f268:	mov	r2, #11
   2f26c:	ldrb	r1, [sp, #175]	; 0xaf
   2f270:	mov	r5, #0
   2f274:	cmp	r3, #0
   2f278:	ldrb	ip, [sp, #174]	; 0xae
   2f27c:	uxth	r4, r6
   2f280:	ldrhne	lr, [r3, #26]
   2f284:	moveq	lr, #3
   2f288:	str	r3, [sp, #12]
   2f28c:	mov	r3, r2
   2f290:	str	r0, [sp, #24]
   2f294:	str	r1, [sp, #8]
   2f298:	strd	r4, [sp, #16]
   2f29c:	mov	r5, #0
   2f2a0:	str	lr, [sp]
   2f2a4:	ldr	r0, [sp, #48]	; 0x30
   2f2a8:	str	ip, [sp, #4]
   2f2ac:	ldr	r1, [sp, #52]	; 0x34
   2f2b0:	bl	274ac <__assert_fail@plt+0x13fa8>
   2f2b4:	ldr	r7, [sp, #180]	; 0xb4
   2f2b8:	str	r5, [sp, #32]
   2f2bc:	add	r7, r7, r6
   2f2c0:	str	r7, [sp, #180]	; 0xb4
   2f2c4:	b	2f010 <__assert_fail@plt+0x1bb0c>
   2f2c8:	movw	r1, #12208	; 0x2fb0
   2f2cc:	mov	r0, #1
   2f2d0:	movt	r1, #4
   2f2d4:	bl	13204 <__printf_chk@plt>
   2f2d8:	b	2f1a8 <__assert_fail@plt+0x1bca4>
   2f2dc:	ldr	r9, [sp, #40]	; 0x28
   2f2e0:	add	r3, sp, #175	; 0xaf
   2f2e4:	ldr	r0, [pc, #2876]	; 2fe28 <__assert_fail@plt+0x1c924>
   2f2e8:	add	r2, sp, #192	; 0xc0
   2f2ec:	str	r3, [sp]
   2f2f0:	add	r3, sp, #184	; 0xb8
   2f2f4:	str	r2, [sp, #4]
   2f2f8:	add	r1, r0, #8
   2f2fc:	add	r2, sp, #180	; 0xb4
   2f300:	str	r3, [sp, #8]
   2f304:	str	r2, [sp, #16]
   2f308:	add	r3, sp, #188	; 0xbc
   2f30c:	str	fp, [sp, #12]
   2f310:	add	r2, sp, #176	; 0xb0
   2f314:	str	r3, [sp, #24]
   2f318:	add	r3, sp, #174	; 0xae
   2f31c:	str	r9, [sp, #20]
   2f320:	bl	1e19c <__assert_fail@plt+0xac98>
   2f324:	subs	r4, r0, #0
   2f328:	ldrne	r7, [sp, #180]	; 0xb4
   2f32c:	bne	2f010 <__assert_fail@plt+0x1bb0c>
   2f330:	ldr	r0, [sp, #184]	; 0xb8
   2f334:	cmp	sl, r0
   2f338:	beq	2f3c0 <__assert_fail@plt+0x1bebc>
   2f33c:	str	r4, [sp]
   2f340:	add	r1, sp, #208	; 0xd0
   2f344:	str	r4, [sp, #4]
   2f348:	mov	r2, r4
   2f34c:	str	r4, [sp, #8]
   2f350:	mov	r3, r4
   2f354:	str	r4, [sp, #12]
   2f358:	bl	131ec <dwarf_cu_die@plt>
   2f35c:	cmp	r0, #0
   2f360:	beq	2f8f4 <__assert_fail@plt+0x1c3f0>
   2f364:	mov	r2, #5
   2f368:	mov	r0, r4
   2f36c:	movw	r1, #12096	; 0x2f40
   2f370:	movt	r1, #4
   2f374:	bl	12d84 <dcgettext@plt>
   2f378:	mov	r4, r0
   2f37c:	add	r0, sp, #208	; 0xd0
   2f380:	bl	12f28 <dwarf_dieoffset@plt>
   2f384:	mov	r2, r0
   2f388:	mov	r3, r1
   2f38c:	mov	r0, #1
   2f390:	mov	r1, r4
   2f394:	bl	13204 <__printf_chk@plt>
   2f398:	ldrd	r4, [sp, #192]	; 0xc0
   2f39c:	ldr	r0, [sp, #48]	; 0x30
   2f3a0:	ldrb	r1, [sp, #174]	; 0xae
   2f3a4:	mov	r2, r4
   2f3a8:	mov	r3, r5
   2f3ac:	strd	r4, [sp]
   2f3b0:	bl	27164 <__assert_fail@plt+0x13c60>
   2f3b4:	mov	r0, #10
   2f3b8:	bl	131b0 <putchar@plt>
   2f3bc:	ldr	sl, [sp, #184]	; 0xb8
   2f3c0:	ldr	r2, [sp, #188]	; 0xbc
   2f3c4:	movw	r3, #8503	; 0x2137
   2f3c8:	cmp	r2, r3
   2f3cc:	bne	2f050 <__assert_fail@plt+0x1bb4c>
   2f3d0:	ldr	ip, [sp, #44]	; 0x2c
   2f3d4:	ldr	r5, [sp, #176]	; 0xb0
   2f3d8:	ldr	r4, [sp, #44]	; 0x2c
   2f3dc:	ldr	r3, [ip, #136]	; 0x88
   2f3e0:	lsl	ip, r5, #4
   2f3e4:	add	r2, r3, ip
   2f3e8:	add	ip, ip, #16
   2f3ec:	ldr	r0, [r3, r5, lsl #4]
   2f3f0:	add	ip, r3, ip
   2f3f4:	ldr	r3, [r2, #4]
   2f3f8:	ldr	r7, [r4, #128]	; 0x80
   2f3fc:	ubfx	r1, r3, #0, #29
   2f400:	b	2f420 <__assert_fail@plt+0x1bf1c>
   2f404:	ldm	ip, {r4, r6}
   2f408:	add	ip, ip, #16
   2f40c:	bic	r3, r6, #-536870912	; 0xe0000000
   2f410:	mov	r2, r4
   2f414:	cmp	r1, r3
   2f418:	cmpeq	r0, r2
   2f41c:	bcc	2f8c8 <__assert_fail@plt+0x1c3c4>
   2f420:	add	r5, r5, #1
   2f424:	cmp	r7, r5
   2f428:	bhi	2f404 <__assert_fail@plt+0x1bf00>
   2f42c:	ldr	r6, [sp, #180]	; 0xb4
   2f430:	ldr	r7, [sp, #40]	; 0x28
   2f434:	cmp	r7, r6
   2f438:	ldrhi	ip, [sp, #32]
   2f43c:	bhi	2f484 <__assert_fail@plt+0x1bf80>
   2f440:	b	2f2c0 <__assert_fail@plt+0x1bdbc>
   2f444:	movw	r1, #12196	; 0x2fa4
   2f448:	mov	r0, #1
   2f44c:	movt	r1, #4
   2f450:	mov	r2, fp
   2f454:	bl	13204 <__printf_chk@plt>
   2f458:	str	r4, [sp]
   2f45c:	mov	r2, r8
   2f460:	str	r5, [sp, #4]
   2f464:	mov	r3, r9
   2f468:	movw	r1, #12380	; 0x305c
   2f46c:	mov	r0, #1
   2f470:	movt	r1, #4
   2f474:	bl	13204 <__printf_chk@plt>
   2f478:	cmp	r7, r6
   2f47c:	bls	2f2c0 <__assert_fail@plt+0x1bdbc>
   2f480:	mov	ip, #0
   2f484:	ldrb	r0, [r6]
   2f488:	add	lr, r6, #1
   2f48c:	mov	r1, #0
   2f490:	tst	r0, #128	; 0x80
   2f494:	and	r0, r0, #127	; 0x7f
   2f498:	uxtb	r0, r0
   2f49c:	bne	2f978 <__assert_fail@plt+0x1c474>
   2f4a0:	mov	r8, r0
   2f4a4:	mov	r9, r1
   2f4a8:	cmp	lr, r7
   2f4ac:	bcs	2f8a0 <__assert_fail@plt+0x1c39c>
   2f4b0:	ldrb	r0, [lr]
   2f4b4:	mov	r1, #0
   2f4b8:	add	r6, lr, #1
   2f4bc:	tst	r0, #128	; 0x80
   2f4c0:	and	r0, r0, #127	; 0x7f
   2f4c4:	uxtb	r0, r0
   2f4c8:	moveq	r5, r1
   2f4cc:	moveq	r4, r0
   2f4d0:	bne	2f91c <__assert_fail@plt+0x1c418>
   2f4d4:	cmp	ip, #0
   2f4d8:	bne	2f444 <__assert_fail@plt+0x1bf40>
   2f4dc:	movw	r1, #12208	; 0x2fb0
   2f4e0:	mov	r0, #1
   2f4e4:	movt	r1, #4
   2f4e8:	bl	13204 <__printf_chk@plt>
   2f4ec:	b	2f458 <__assert_fail@plt+0x1bf54>
   2f4f0:	ldrd	r8, [sp, #200]	; 0xc8
   2f4f4:	ldrd	r4, [sp, #208]	; 0xd0
   2f4f8:	b	2f1f8 <__assert_fail@plt+0x1bcf4>
   2f4fc:	ldr	r9, [sp, #52]	; 0x34
   2f500:	ldr	r1, [sp, #180]	; 0xb4
   2f504:	ldrb	r3, [r9, #84]	; 0x54
   2f508:	cmp	r3, #0
   2f50c:	bne	2fb18 <__assert_fail@plt+0x1c614>
   2f510:	ldr	ip, [r1]
   2f514:	ldr	r0, [r1, #4]
   2f518:	mov	r2, ip
   2f51c:	str	ip, [sp, #200]	; 0xc8
   2f520:	str	r0, [sp, #204]	; 0xcc
   2f524:	mov	r3, r0
   2f528:	ldr	ip, [r1, #8]
   2f52c:	ldr	r0, [r1, #12]
   2f530:	add	r1, r1, #16
   2f534:	str	ip, [sp, #208]	; 0xd0
   2f538:	str	r1, [sp, #180]	; 0xb4
   2f53c:	mov	r4, #1
   2f540:	str	r0, [sp, #212]	; 0xd4
   2f544:	b	2f0f4 <__assert_fail@plt+0x1bbf0>
   2f548:	ldr	ip, [sp, #36]	; 0x24
   2f54c:	ldr	r3, [sp, #180]	; 0xb4
   2f550:	ldr	r7, [ip, #12]
   2f554:	add	r7, r3, r7
   2f558:	cmp	r3, r7
   2f55c:	bcs	2f804 <__assert_fail@plt+0x1c300>
   2f560:	ldrb	r2, [r3]
   2f564:	add	r6, r3, #1
   2f568:	cmp	r2, #3
   2f56c:	ldrls	pc, [pc, r2, lsl #2]
   2f570:	b	2f804 <__assert_fail@plt+0x1c300>
   2f574:	andeq	pc, r2, r8, lsl r7	; <UNPREDICTABLE>
   2f578:	andeq	pc, r2, ip, lsr #13
   2f57c:	andeq	pc, r2, r8, lsl #12
   2f580:	andeq	pc, r2, r4, lsl #11
   2f584:	cmp	r7, r6
   2f588:	bls	2f804 <__assert_fail@plt+0x1c300>
   2f58c:	ldrb	r4, [r3, #1]
   2f590:	add	r8, r3, #2
   2f594:	mov	r5, #0
   2f598:	tst	r4, #128	; 0x80
   2f59c:	and	r4, r4, #127	; 0x7f
   2f5a0:	uxtb	r4, r4
   2f5a4:	bne	2fac4 <__assert_fail@plt+0x1c5c0>
   2f5a8:	add	r3, sp, #200	; 0xc8
   2f5ac:	mov	r2, r4
   2f5b0:	str	r3, [sp]
   2f5b4:	mov	r3, r5
   2f5b8:	bl	207ac <__assert_fail@plt+0xd2a8>
   2f5bc:	rsb	r7, r8, r7
   2f5c0:	cmp	r0, #0
   2f5c4:	strne	r4, [sp, #200]	; 0xc8
   2f5c8:	strne	r5, [sp, #204]	; 0xcc
   2f5cc:	cmp	r7, #3
   2f5d0:	ble	2f804 <__assert_fail@plt+0x1c300>
   2f5d4:	ldr	r5, [sp, #52]	; 0x34
   2f5d8:	ldr	ip, [r8]
   2f5dc:	ldrb	r3, [r5, #84]	; 0x54
   2f5e0:	cmp	r3, #0
   2f5e4:	bne	2fd4c <__assert_fail@plt+0x1c848>
   2f5e8:	ldrd	r2, [sp, #200]	; 0xc8
   2f5ec:	add	r6, r8, #4
   2f5f0:	mov	r4, #0
   2f5f4:	adds	r0, r2, ip
   2f5f8:	adc	r1, r3, #0
   2f5fc:	strd	r0, [sp, #208]	; 0xd0
   2f600:	str	r6, [sp, #180]	; 0xb4
   2f604:	b	2f0f4 <__assert_fail@plt+0x1bbf0>
   2f608:	cmp	r7, r6
   2f60c:	bls	2f804 <__assert_fail@plt+0x1c300>
   2f610:	ldrb	r4, [r3, #1]
   2f614:	add	r8, r3, #2
   2f618:	mov	r5, #0
   2f61c:	tst	r4, #128	; 0x80
   2f620:	and	r4, r4, #127	; 0x7f
   2f624:	uxtb	r4, r4
   2f628:	bne	2fcf4 <__assert_fail@plt+0x1c7f0>
   2f62c:	add	r3, sp, #200	; 0xc8
   2f630:	mov	r2, r4
   2f634:	str	r3, [sp]
   2f638:	mov	r3, r5
   2f63c:	bl	207ac <__assert_fail@plt+0xd2a8>
   2f640:	cmp	r0, #0
   2f644:	strne	r4, [sp, #200]	; 0xc8
   2f648:	strne	r5, [sp, #204]	; 0xcc
   2f64c:	cmp	r7, r8
   2f650:	bls	2f804 <__assert_fail@plt+0x1c300>
   2f654:	ldrb	r0, [r8]
   2f658:	mov	r1, #0
   2f65c:	add	r6, r8, #1
   2f660:	tst	r0, #128	; 0x80
   2f664:	and	r0, r0, #127	; 0x7f
   2f668:	uxtb	r0, r0
   2f66c:	moveq	r7, r1
   2f670:	moveq	r5, r0
   2f674:	bne	2fca0 <__assert_fail@plt+0x1c79c>
   2f678:	add	r3, sp, #208	; 0xd0
   2f67c:	mov	r2, r5
   2f680:	str	r3, [sp]
   2f684:	mov	r3, r7
   2f688:	ldr	r0, [sp, #184]	; 0xb8
   2f68c:	bl	207ac <__assert_fail@plt+0xd2a8>
   2f690:	ldrd	r2, [sp, #200]	; 0xc8
   2f694:	cmp	r0, #0
   2f698:	strne	r5, [sp, #208]	; 0xd0
   2f69c:	strne	r7, [sp, #212]	; 0xd4
   2f6a0:	moveq	r4, r0
   2f6a4:	movne	r4, #0
   2f6a8:	b	2f600 <__assert_fail@plt+0x1c0fc>
   2f6ac:	cmp	r7, r6
   2f6b0:	bls	2f804 <__assert_fail@plt+0x1c300>
   2f6b4:	mvn	r1, #0
   2f6b8:	str	r1, [sp, #200]	; 0xc8
   2f6bc:	str	r1, [sp, #204]	; 0xcc
   2f6c0:	add	r8, r3, #2
   2f6c4:	ldrb	r4, [r3, #1]
   2f6c8:	mov	r5, #0
   2f6cc:	tst	r4, #128	; 0x80
   2f6d0:	and	r4, r4, #127	; 0x7f
   2f6d4:	uxtb	r4, r4
   2f6d8:	bne	2fbb8 <__assert_fail@plt+0x1c6b4>
   2f6dc:	mov	r2, r4
   2f6e0:	add	r3, sp, #208	; 0xd0
   2f6e4:	str	r3, [sp]
   2f6e8:	mov	r3, r5
   2f6ec:	bl	207ac <__assert_fail@plt+0xd2a8>
   2f6f0:	cmp	r0, #0
   2f6f4:	strne	r4, [sp, #208]	; 0xd0
   2f6f8:	strne	r5, [sp, #212]	; 0xd4
   2f6fc:	moveq	r6, r8
   2f700:	ldrdeq	r2, [sp, #200]	; 0xc8
   2f704:	moveq	r4, #1
   2f708:	movne	r6, r8
   2f70c:	movne	r4, #1
   2f710:	ldrdne	r2, [sp, #200]	; 0xc8
   2f714:	b	2f600 <__assert_fail@plt+0x1c0fc>
   2f718:	mov	r0, #0
   2f71c:	mov	r4, #1
   2f720:	mov	r2, r0
   2f724:	str	r0, [sp, #200]	; 0xc8
   2f728:	str	r0, [sp, #208]	; 0xd0
   2f72c:	mov	r3, r0
   2f730:	str	r0, [sp, #204]	; 0xcc
   2f734:	str	r0, [sp, #212]	; 0xd4
   2f738:	b	2f600 <__assert_fail@plt+0x1c0fc>
   2f73c:	mov	r2, #5
   2f740:	movw	r1, #12144	; 0x2f70
   2f744:	mov	r0, #0
   2f748:	movt	r1, #4
   2f74c:	bl	12d84 <dcgettext@plt>
   2f750:	mov	r2, fp
   2f754:	mov	r1, r0
   2f758:	mov	r0, #1
   2f75c:	bl	13204 <__printf_chk@plt>
   2f760:	ldrd	r4, [sp, #208]	; 0xd0
   2f764:	ldrb	r1, [sp, #174]	; 0xae
   2f768:	ldr	r0, [sp, #48]	; 0x30
   2f76c:	mov	r2, r4
   2f770:	mov	r3, r5
   2f774:	strd	r4, [sp]
   2f778:	bl	27164 <__assert_fail@plt+0x13c60>
   2f77c:	mov	r0, #10
   2f780:	bl	131b0 <putchar@plt>
   2f784:	ldrd	r2, [sp, #208]	; 0xd0
   2f788:	ldr	r7, [sp, #180]	; 0xb4
   2f78c:	strd	r2, [sp, #192]	; 0xc0
   2f790:	b	2f010 <__assert_fail@plt+0x1bb0c>
   2f794:	ldr	r0, [sp, #52]	; 0x34
   2f798:	add	r1, sp, #184	; 0xb8
   2f79c:	add	r2, sp, #192	; 0xc0
   2f7a0:	bl	1d2e4 <__assert_fail@plt+0x9de0>
   2f7a4:	cmp	r0, #0
   2f7a8:	beq	2f074 <__assert_fail@plt+0x1bb70>
   2f7ac:	ldr	r0, [sp, #184]	; 0xb8
   2f7b0:	b	2f05c <__assert_fail@plt+0x1bb58>
   2f7b4:	mov	r2, #5
   2f7b8:	movw	r1, #12176	; 0x2f90
   2f7bc:	mov	r0, #0
   2f7c0:	movt	r1, #4
   2f7c4:	bl	12d84 <dcgettext@plt>
   2f7c8:	mov	r2, fp
   2f7cc:	mov	r1, r0
   2f7d0:	mov	r0, #1
   2f7d4:	bl	13204 <__printf_chk@plt>
   2f7d8:	ldr	r7, [sp, #180]	; 0xb4
   2f7dc:	b	2f010 <__assert_fail@plt+0x1bb0c>
   2f7e0:	ldr	r0, [r4, #136]	; 0x88
   2f7e4:	movw	r2, #12368	; 0x3050
   2f7e8:	movw	r3, #57200	; 0xdf70
   2f7ec:	movt	r2, #4
   2f7f0:	movt	r3, #1
   2f7f4:	str	r2, [sp]
   2f7f8:	mov	r2, #16
   2f7fc:	bl	130c0 <qsort_r@plt>
   2f800:	b	2efbc <__assert_fail@plt+0x1bab8>
   2f804:	mov	r2, #5
   2f808:	movw	r1, #12116	; 0x2f54
   2f80c:	mov	r0, #0
   2f810:	movt	r1, #4
   2f814:	bl	12d84 <dcgettext@plt>
   2f818:	mov	r2, fp
   2f81c:	mov	r1, r0
   2f820:	mov	r0, #1
   2f824:	bl	13204 <__printf_chk@plt>
   2f828:	b	2f140 <__assert_fail@plt+0x1bc3c>
   2f82c:	mov	r2, #5
   2f830:	movw	r1, #8084	; 0x1f94
   2f834:	mov	r0, #0
   2f838:	movt	r1, #4
   2f83c:	bl	12d84 <dcgettext@plt>
   2f840:	movw	r3, #37704	; 0x9348
   2f844:	movt	r3, #5
   2f848:	ldr	r1, [r3]
   2f84c:	bl	1345c <fputs@plt>
   2f850:	b	2f140 <__assert_fail@plt+0x1bc3c>
   2f854:	mov	r1, r9
   2f858:	mov	r0, r7
   2f85c:	bl	131bc <elf_rawdata@plt>
   2f860:	subs	r9, r0, #0
   2f864:	str	r9, [sp, #36]	; 0x24
   2f868:	bne	2ef54 <__assert_fail@plt+0x1ba50>
   2f86c:	mov	r2, #5
   2f870:	movw	r1, #12332	; 0x302c
   2f874:	movt	r1, #4
   2f878:	bl	12d84 <dcgettext@plt>
   2f87c:	mov	r4, r0
   2f880:	mvn	r0, #0
   2f884:	bl	130a8 <elf_errmsg@plt>
   2f888:	mov	r2, r4
   2f88c:	mov	r3, r0
   2f890:	ldr	r0, [sp, #36]	; 0x24
   2f894:	mov	r1, r0
   2f898:	bl	12f70 <error@plt>
   2f89c:	b	2f140 <__assert_fail@plt+0x1bc3c>
   2f8a0:	mov	r2, #5
   2f8a4:	movw	r1, #12116	; 0x2f54
   2f8a8:	mov	r0, #0
   2f8ac:	movt	r1, #4
   2f8b0:	bl	12d84 <dcgettext@plt>
   2f8b4:	mov	r2, fp
   2f8b8:	mov	r1, r0
   2f8bc:	mov	r0, #1
   2f8c0:	bl	13204 <__printf_chk@plt>
   2f8c4:	b	2f2c0 <__assert_fail@plt+0x1bdbc>
   2f8c8:	ldr	ip, [sp, #36]	; 0x24
   2f8cc:	mov	r1, #0
   2f8d0:	ldr	r5, [sp, #40]	; 0x28
   2f8d4:	ldr	r6, [sp, #180]	; 0xb4
   2f8d8:	ldr	r7, [ip]
   2f8dc:	rsb	r0, r7, r5
   2f8e0:	cmp	r1, r3
   2f8e4:	cmpeq	r0, r2
   2f8e8:	bcs	2f914 <__assert_fail@plt+0x1c410>
   2f8ec:	ldr	r7, [sp, #40]	; 0x28
   2f8f0:	b	2f434 <__assert_fail@plt+0x1bf30>
   2f8f4:	mov	r2, #5
   2f8f8:	movw	r1, #12076	; 0x2f2c
   2f8fc:	movt	r1, #4
   2f900:	bl	12d84 <dcgettext@plt>
   2f904:	mov	r1, r0
   2f908:	mov	r0, #1
   2f90c:	bl	13204 <__printf_chk@plt>
   2f910:	b	2f398 <__assert_fail@plt+0x1be94>
   2f914:	add	r7, r7, r4
   2f918:	b	2f434 <__assert_fail@plt+0x1bf30>
   2f91c:	rsb	r3, lr, r7
   2f920:	cmp	r3, #9
   2f924:	movhi	r3, #10
   2f928:	bls	2fa88 <__assert_fail@plt+0x1c584>
   2f92c:	str	r3, [sp, #164]	; 0xa4
   2f930:	add	r6, lr, #2
   2f934:	ldrb	r3, [lr, #1]
   2f938:	and	r4, r3, #127	; 0x7f
   2f93c:	tst	r3, #128	; 0x80
   2f940:	uxtb	r4, r4
   2f944:	lsl	r2, r4, #7
   2f948:	lsr	lr, r4, #25
   2f94c:	str	r2, [sp, #120]	; 0x78
   2f950:	str	lr, [sp, #124]	; 0x7c
   2f954:	ldrd	r2, [sp, #120]	; 0x78
   2f958:	orr	r3, r3, r1
   2f95c:	orr	r2, r2, r0
   2f960:	movne	r1, #1
   2f964:	strdne	r2, [sp, #56]	; 0x38
   2f968:	bne	2fa28 <__assert_fail@plt+0x1c524>
   2f96c:	mov	r4, r2
   2f970:	mov	r5, r3
   2f974:	b	2f4d4 <__assert_fail@plt+0x1bfd0>
   2f978:	cmp	r7, r6
   2f97c:	bls	2faa8 <__assert_fail@plt+0x1c5a4>
   2f980:	rsb	r3, r6, r7
   2f984:	cmp	r3, #9
   2f988:	movhi	r8, #10
   2f98c:	bls	2fa9c <__assert_fail@plt+0x1c598>
   2f990:	ldrb	r3, [r6, #1]
   2f994:	add	lr, r6, #2
   2f998:	and	r2, r3, #127	; 0x7f
   2f99c:	tst	r3, #128	; 0x80
   2f9a0:	uxtb	r2, r2
   2f9a4:	movne	r6, lr
   2f9a8:	lsl	r4, r2, #7
   2f9ac:	lsr	r9, r2, #25
   2f9b0:	str	r4, [sp, #112]	; 0x70
   2f9b4:	str	r9, [sp, #116]	; 0x74
   2f9b8:	ldrd	r4, [sp, #112]	; 0x70
   2f9bc:	orr	r0, r0, r4
   2f9c0:	orr	r1, r1, r5
   2f9c4:	movne	r4, #1
   2f9c8:	beq	2f4a0 <__assert_fail@plt+0x1bf9c>
   2f9cc:	add	r4, r4, #1
   2f9d0:	cmp	r4, r8
   2f9d4:	bcs	2fab4 <__assert_fail@plt+0x1c5b0>
   2f9d8:	ldrb	r5, [r6], #1
   2f9dc:	rsb	lr, r4, r4, lsl #3
   2f9e0:	rsb	r3, lr, #32
   2f9e4:	str	r3, [sp, #56]	; 0x38
   2f9e8:	and	r2, r5, #127	; 0x7f
   2f9ec:	sub	r9, lr, #32
   2f9f0:	tst	r5, #128	; 0x80
   2f9f4:	ldr	r5, [sp, #56]	; 0x38
   2f9f8:	uxtb	r2, r2
   2f9fc:	lsl	r9, r2, r9
   2fa00:	lsl	lr, r2, lr
   2fa04:	orr	r5, r9, r2, lsr r5
   2fa08:	str	lr, [sp, #64]	; 0x40
   2fa0c:	str	r5, [sp, #68]	; 0x44
   2fa10:	ldrd	r2, [sp, #64]	; 0x40
   2fa14:	orr	r0, r0, r2
   2fa18:	orr	r1, r1, r3
   2fa1c:	bne	2f9cc <__assert_fail@plt+0x1c4c8>
   2fa20:	mov	lr, r6
   2fa24:	b	2f4a0 <__assert_fail@plt+0x1bf9c>
   2fa28:	ldr	r3, [sp, #164]	; 0xa4
   2fa2c:	add	r1, r1, #1
   2fa30:	cmp	r1, r3
   2fa34:	bcs	2fa90 <__assert_fail@plt+0x1c58c>
   2fa38:	ldrb	lr, [r6], #1
   2fa3c:	rsb	r0, r1, r1, lsl #3
   2fa40:	sub	r5, r0, #32
   2fa44:	rsb	r4, r0, #32
   2fa48:	and	r2, lr, #127	; 0x7f
   2fa4c:	tst	lr, #128	; 0x80
   2fa50:	uxtb	r2, r2
   2fa54:	lsl	r5, r2, r5
   2fa58:	lsl	r0, r2, r0
   2fa5c:	orr	r4, r5, r2, lsr r4
   2fa60:	str	r0, [sp, #72]	; 0x48
   2fa64:	str	r4, [sp, #76]	; 0x4c
   2fa68:	ldrd	r2, [sp, #72]	; 0x48
   2fa6c:	ldrd	r4, [sp, #56]	; 0x38
   2fa70:	orr	r4, r4, r2
   2fa74:	orr	r5, r5, r3
   2fa78:	strd	r4, [sp, #56]	; 0x38
   2fa7c:	bne	2fa28 <__assert_fail@plt+0x1c524>
   2fa80:	ldrd	r2, [sp, #56]	; 0x38
   2fa84:	b	2f96c <__assert_fail@plt+0x1c468>
   2fa88:	cmp	r3, #1
   2fa8c:	bhi	2f92c <__assert_fail@plt+0x1c428>
   2fa90:	mvn	r4, #0
   2fa94:	mov	r5, r4
   2fa98:	b	2f4d4 <__assert_fail@plt+0x1bfd0>
   2fa9c:	cmp	r3, #1
   2faa0:	movhi	r8, r3
   2faa4:	bhi	2f990 <__assert_fail@plt+0x1c48c>
   2faa8:	mvn	r8, #0
   2faac:	mov	r9, r8
   2fab0:	b	2f4a8 <__assert_fail@plt+0x1bfa4>
   2fab4:	mvn	r8, #0
   2fab8:	mov	lr, r6
   2fabc:	mov	r9, r8
   2fac0:	b	2f4a8 <__assert_fail@plt+0x1bfa4>
   2fac4:	rsb	r6, r6, r7
   2fac8:	cmp	r6, #9
   2facc:	movhi	r6, #10
   2fad0:	bls	2fba4 <__assert_fail@plt+0x1c6a0>
   2fad4:	ldrb	r1, [r3, #2]
   2fad8:	add	r8, r3, #3
   2fadc:	and	r2, r1, #127	; 0x7f
   2fae0:	tst	r1, #128	; 0x80
   2fae4:	uxtb	r2, r2
   2fae8:	movne	r1, #1
   2faec:	lsr	ip, r2, #25
   2faf0:	lsl	lr, r2, #7
   2faf4:	str	ip, [sp, #156]	; 0x9c
   2faf8:	str	lr, [sp, #152]	; 0x98
   2fafc:	ldrd	r2, [sp, #152]	; 0x98
   2fb00:	orr	r2, r2, r4
   2fb04:	orr	r3, r3, r5
   2fb08:	bne	2fb4c <__assert_fail@plt+0x1c648>
   2fb0c:	mov	r4, r2
   2fb10:	mov	r5, r3
   2fb14:	b	2f5a8 <__assert_fail@plt+0x1c0a4>
   2fb18:	ldr	ip, [r1, #4]
   2fb1c:	ldr	r0, [r1]
   2fb20:	rev	ip, ip
   2fb24:	str	ip, [sp, #200]	; 0xc8
   2fb28:	rev	r0, r0
   2fb2c:	str	r0, [sp, #204]	; 0xcc
   2fb30:	mov	r2, ip
   2fb34:	ldr	r4, [r1, #8]
   2fb38:	ldr	ip, [r1, #12]
   2fb3c:	mov	r3, r0
   2fb40:	rev	r0, r4
   2fb44:	rev	ip, ip
   2fb48:	b	2f530 <__assert_fail@plt+0x1c02c>
   2fb4c:	add	r1, r1, #1
   2fb50:	cmp	r1, r6
   2fb54:	bcs	2fbac <__assert_fail@plt+0x1c6a8>
   2fb58:	ldrb	lr, [r8], #1
   2fb5c:	rsb	ip, r1, r1, lsl #3
   2fb60:	rsb	r5, ip, #32
   2fb64:	str	r5, [sp, #56]	; 0x38
   2fb68:	and	r4, lr, #127	; 0x7f
   2fb6c:	sub	r9, ip, #32
   2fb70:	tst	lr, #128	; 0x80
   2fb74:	ldr	lr, [sp, #56]	; 0x38
   2fb78:	uxtb	r4, r4
   2fb7c:	lsl	r9, r4, r9
   2fb80:	lsl	ip, r4, ip
   2fb84:	orr	r9, r9, r4, lsr lr
   2fb88:	str	ip, [sp, #104]	; 0x68
   2fb8c:	str	r9, [sp, #108]	; 0x6c
   2fb90:	ldrd	r4, [sp, #104]	; 0x68
   2fb94:	orr	r2, r2, r4
   2fb98:	orr	r3, r3, r5
   2fb9c:	beq	2fb0c <__assert_fail@plt+0x1c608>
   2fba0:	b	2fb4c <__assert_fail@plt+0x1c648>
   2fba4:	cmp	r6, #1
   2fba8:	bhi	2fad4 <__assert_fail@plt+0x1c5d0>
   2fbac:	mvn	r4, #0
   2fbb0:	mov	r5, r4
   2fbb4:	b	2f5a8 <__assert_fail@plt+0x1c0a4>
   2fbb8:	rsb	r6, r6, r7
   2fbbc:	cmp	r6, #9
   2fbc0:	movhi	r9, #10
   2fbc4:	bls	2fc60 <__assert_fail@plt+0x1c75c>
   2fbc8:	ldrb	r1, [r3, #2]
   2fbcc:	add	r8, r3, #3
   2fbd0:	and	r2, r1, #127	; 0x7f
   2fbd4:	tst	r1, #128	; 0x80
   2fbd8:	uxtb	r2, r2
   2fbdc:	lsl	r1, r2, #7
   2fbe0:	lsr	lr, r2, #25
   2fbe4:	str	r1, [sp, #128]	; 0x80
   2fbe8:	movne	r1, #1
   2fbec:	str	lr, [sp, #132]	; 0x84
   2fbf0:	ldrd	r6, [sp, #128]	; 0x80
   2fbf4:	orr	r6, r6, r4
   2fbf8:	orr	r7, r7, r5
   2fbfc:	bne	2fc10 <__assert_fail@plt+0x1c70c>
   2fc00:	mov	r4, r6
   2fc04:	mov	r5, r7
   2fc08:	b	2f6dc <__assert_fail@plt+0x1c1d8>
   2fc0c:	bl	12dc0 <__stack_chk_fail@plt>
   2fc10:	add	r1, r1, #1
   2fc14:	cmp	r1, r9
   2fc18:	bcs	2fc70 <__assert_fail@plt+0x1c76c>
   2fc1c:	ldrb	lr, [r8], #1
   2fc20:	rsb	ip, r1, r1, lsl #3
   2fc24:	sub	r5, ip, #32
   2fc28:	rsb	r4, ip, #32
   2fc2c:	and	r2, lr, #127	; 0x7f
   2fc30:	tst	lr, #128	; 0x80
   2fc34:	uxtb	r2, r2
   2fc38:	lsl	r5, r2, r5
   2fc3c:	lsl	ip, r2, ip
   2fc40:	orr	r4, r5, r2, lsr r4
   2fc44:	str	ip, [sp, #80]	; 0x50
   2fc48:	str	r4, [sp, #84]	; 0x54
   2fc4c:	ldrd	r4, [sp, #80]	; 0x50
   2fc50:	orr	r6, r6, r4
   2fc54:	orr	r7, r7, r5
   2fc58:	beq	2fc00 <__assert_fail@plt+0x1c6fc>
   2fc5c:	b	2fc10 <__assert_fail@plt+0x1c70c>
   2fc60:	cmp	r6, #1
   2fc64:	bls	2fc7c <__assert_fail@plt+0x1c778>
   2fc68:	mov	r9, r6
   2fc6c:	b	2fbc8 <__assert_fail@plt+0x1c6c4>
   2fc70:	mvn	r4, #0
   2fc74:	mov	r5, r4
   2fc78:	b	2f6dc <__assert_fail@plt+0x1c1d8>
   2fc7c:	mov	r4, r1
   2fc80:	mov	r5, r1
   2fc84:	b	2f6dc <__assert_fail@plt+0x1c1d8>
   2fc88:	rev	r2, r2
   2fc8c:	mov	r3, #0
   2fc90:	strd	r2, [sp, #200]	; 0xc8
   2fc94:	ldr	r4, [ip, #4]
   2fc98:	rev	r4, r4
   2fc9c:	b	2f0b8 <__assert_fail@plt+0x1bbb4>
   2fca0:	rsb	r5, r8, r7
   2fca4:	cmp	r5, #9
   2fca8:	movhi	r5, #10
   2fcac:	bls	2fe14 <__assert_fail@plt+0x1c910>
   2fcb0:	ldrb	r3, [r8, #1]
   2fcb4:	add	r6, r8, #2
   2fcb8:	and	r2, r3, #127	; 0x7f
   2fcbc:	tst	r3, #128	; 0x80
   2fcc0:	uxtb	r2, r2
   2fcc4:	lsr	r9, r2, #25
   2fcc8:	lsl	ip, r2, #7
   2fccc:	str	r9, [sp, #148]	; 0x94
   2fcd0:	str	ip, [sp, #144]	; 0x90
   2fcd4:	ldrd	r8, [sp, #144]	; 0x90
   2fcd8:	orr	r9, r9, r1
   2fcdc:	orr	r8, r8, r0
   2fce0:	movne	r1, #1
   2fce4:	bne	2fdc4 <__assert_fail@plt+0x1c8c0>
   2fce8:	mov	r5, r8
   2fcec:	mov	r7, r9
   2fcf0:	b	2f678 <__assert_fail@plt+0x1c174>
   2fcf4:	rsb	r6, r6, r7
   2fcf8:	cmp	r6, #9
   2fcfc:	movhi	r6, #10
   2fd00:	bls	2fdb0 <__assert_fail@plt+0x1c8ac>
   2fd04:	ldrb	r1, [r3, #2]
   2fd08:	add	r8, r3, #3
   2fd0c:	and	r2, r1, #127	; 0x7f
   2fd10:	tst	r1, #128	; 0x80
   2fd14:	uxtb	r2, r2
   2fd18:	movne	r1, #1
   2fd1c:	lsr	ip, r2, #25
   2fd20:	lsl	lr, r2, #7
   2fd24:	str	ip, [sp, #140]	; 0x8c
   2fd28:	str	lr, [sp, #136]	; 0x88
   2fd2c:	ldrd	r2, [sp, #136]	; 0x88
   2fd30:	orr	r2, r2, r4
   2fd34:	orr	r3, r3, r5
   2fd38:	strdne	r2, [sp, #56]	; 0x38
   2fd3c:	bne	2fd54 <__assert_fail@plt+0x1c850>
   2fd40:	mov	r4, r2
   2fd44:	mov	r5, r3
   2fd48:	b	2f62c <__assert_fail@plt+0x1c128>
   2fd4c:	rev	ip, ip
   2fd50:	b	2f5e8 <__assert_fail@plt+0x1c0e4>
   2fd54:	add	r1, r1, #1
   2fd58:	cmp	r6, r1
   2fd5c:	bls	2fdb8 <__assert_fail@plt+0x1c8b4>
   2fd60:	ldrb	lr, [r8], #1
   2fd64:	rsb	ip, r1, r1, lsl #3
   2fd68:	sub	r5, ip, #32
   2fd6c:	rsb	r4, ip, #32
   2fd70:	and	r2, lr, #127	; 0x7f
   2fd74:	tst	lr, #128	; 0x80
   2fd78:	uxtb	r2, r2
   2fd7c:	lsl	r5, r2, r5
   2fd80:	lsl	ip, r2, ip
   2fd84:	orr	r4, r5, r2, lsr r4
   2fd88:	str	ip, [sp, #88]	; 0x58
   2fd8c:	str	r4, [sp, #92]	; 0x5c
   2fd90:	ldrd	r2, [sp, #88]	; 0x58
   2fd94:	ldrd	r4, [sp, #56]	; 0x38
   2fd98:	orr	r4, r4, r2
   2fd9c:	orr	r5, r5, r3
   2fda0:	strd	r4, [sp, #56]	; 0x38
   2fda4:	bne	2fd54 <__assert_fail@plt+0x1c850>
   2fda8:	ldrd	r2, [sp, #56]	; 0x38
   2fdac:	b	2fd40 <__assert_fail@plt+0x1c83c>
   2fdb0:	cmp	r6, #1
   2fdb4:	bhi	2fd04 <__assert_fail@plt+0x1c800>
   2fdb8:	mvn	r4, #0
   2fdbc:	mov	r5, r4
   2fdc0:	b	2f62c <__assert_fail@plt+0x1c128>
   2fdc4:	add	r1, r1, #1
   2fdc8:	cmp	r5, r1
   2fdcc:	bls	2fe1c <__assert_fail@plt+0x1c918>
   2fdd0:	ldrb	ip, [r6], #1
   2fdd4:	rsb	r0, r1, r1, lsl #3
   2fdd8:	sub	r4, r0, #32
   2fddc:	rsb	lr, r0, #32
   2fde0:	and	r2, ip, #127	; 0x7f
   2fde4:	tst	ip, #128	; 0x80
   2fde8:	uxtb	r2, r2
   2fdec:	lsl	r4, r2, r4
   2fdf0:	lsl	r0, r2, r0
   2fdf4:	orr	lr, r4, r2, lsr lr
   2fdf8:	str	r0, [sp, #96]	; 0x60
   2fdfc:	str	lr, [sp, #100]	; 0x64
   2fe00:	ldrd	r2, [sp, #96]	; 0x60
   2fe04:	orr	r8, r8, r2
   2fe08:	orr	r9, r9, r3
   2fe0c:	beq	2fce8 <__assert_fail@plt+0x1c7e4>
   2fe10:	b	2fdc4 <__assert_fail@plt+0x1c8c0>
   2fe14:	cmp	r5, #1
   2fe18:	bhi	2fcb0 <__assert_fail@plt+0x1c7ac>
   2fe1c:	mvn	r5, #0
   2fe20:	mov	r7, r5
   2fe24:	b	2f678 <__assert_fail@plt+0x1c174>
   2fe28:	ldrdeq	r9, [r5], -r0
   2fe2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe30:	movw	r2, #37712	; 0x9350
   2fe34:	sub	sp, sp, #1488	; 0x5d0
   2fe38:	movt	r2, #5
   2fe3c:	sub	sp, sp, #4
   2fe40:	movw	r6, #37688	; 0x9338
   2fe44:	movt	r6, #5
   2fe48:	ldrb	r2, [r2, #31]
   2fe4c:	str	r0, [sp, #108]	; 0x6c
   2fe50:	ldr	r7, [sp, #1528]	; 0x5f8
   2fe54:	cmp	r2, #0
   2fe58:	ldr	r0, [r6]
   2fe5c:	str	r6, [sp, #112]	; 0x70
   2fe60:	str	r1, [sp, #128]	; 0x80
   2fe64:	str	r3, [sp, #136]	; 0x88
   2fe68:	str	r7, [sp, #104]	; 0x68
   2fe6c:	str	r0, [sp, #1484]	; 0x5cc
   2fe70:	ldr	r8, [sp, #1532]	; 0x5fc
   2fe74:	beq	303fc <__assert_fail@plt+0x1cef8>
   2fe78:	mov	r2, #5
   2fe7c:	movw	r1, #12404	; 0x3074
   2fe80:	mov	r0, #0
   2fe84:	movt	r1, #4
   2fe88:	bl	12d84 <dcgettext@plt>
   2fe8c:	add	fp, sp, #1488	; 0x5d0
   2fe90:	mov	r7, r0
   2fe94:	ldr	r0, [sp, #136]	; 0x88
   2fe98:	bl	133d8 <elf_ndxscn@plt>
   2fe9c:	ldr	r9, [sp, #128]	; 0x80
   2fea0:	ldr	r1, [sp, #104]	; 0x68
   2fea4:	mov	r6, r0
   2fea8:	add	r0, r9, #16
   2feac:	bl	1870c <__assert_fail@plt+0x5208>
   2feb0:	ldr	sl, [sp, #104]	; 0x68
   2feb4:	mov	r2, r6
   2feb8:	mov	r1, r7
   2febc:	add	r6, sp, #384	; 0x180
   2fec0:	ldrd	r4, [sl, #24]
   2fec4:	strd	r4, [sp]
   2fec8:	add	r4, sp, #352	; 0x160
   2fecc:	mov	r3, r0
   2fed0:	mov	r0, #1
   2fed4:	bl	13204 <__printf_chk@plt>
   2fed8:	mov	r1, #0
   2fedc:	ldr	r0, [r9, #16]
   2fee0:	bl	12d60 <elf_getident@plt>
   2fee4:	movw	r3, #64432	; 0xfbb0
   2fee8:	movt	r3, #65535	; 0xffff
   2feec:	mov	r2, #4
   2fef0:	add	ip, fp, r3
   2fef4:	mov	r1, #0
   2fef8:	add	ip, ip, r2
   2fefc:	str	r1, [sp, #88]	; 0x58
   2ff00:	str	r1, [sp, #92]	; 0x5c
   2ff04:	str	r1, [sp, #360]	; 0x168
   2ff08:	ldrb	r0, [r0, #4]
   2ff0c:	str	r1, [ip]
   2ff10:	cmp	r0, #1
   2ff14:	str	r1, [fp, r3]
   2ff18:	movne	r0, #8
   2ff1c:	moveq	r0, #4
   2ff20:	str	r0, [sp, #96]	; 0x60
   2ff24:	mov	r1, #0
   2ff28:	add	ip, sp, #360	; 0x168
   2ff2c:	add	lr, sp, #356	; 0x164
   2ff30:	str	ip, [sp, #4]
   2ff34:	str	r6, [sp]
   2ff38:	mov	r0, r8
   2ff3c:	str	r4, [sp, #16]
   2ff40:	ldrd	r2, [sp, #88]	; 0x58
   2ff44:	str	lr, [sp, #20]
   2ff48:	str	r1, [sp, #8]
   2ff4c:	str	r1, [sp, #12]
   2ff50:	bl	1348c <dwarf_next_lines@plt>
   2ff54:	subs	ip, r0, #0
   2ff58:	bne	303b8 <__assert_fail@plt+0x1ceb4>
   2ff5c:	ldr	r0, [sp, #360]	; 0x168
   2ff60:	cmp	r0, #0
   2ff64:	beq	2ff90 <__assert_fail@plt+0x1ca8c>
   2ff68:	mov	r1, ip
   2ff6c:	str	ip, [sp]
   2ff70:	str	ip, [sp, #4]
   2ff74:	mov	r2, ip
   2ff78:	str	ip, [sp, #8]
   2ff7c:	add	r3, sp, #416	; 0x1a0
   2ff80:	str	ip, [sp, #12]
   2ff84:	bl	12e98 <dwarf_cu_info@plt>
   2ff88:	cmp	r0, #0
   2ff8c:	beq	3009c <__assert_fail@plt+0x1cb98>
   2ff90:	add	ip, sp, #1488	; 0x5d0
   2ff94:	movw	r9, #64440	; 0xfbb8
   2ff98:	movt	r9, #65535	; 0xffff
   2ff9c:	mov	r3, #4
   2ffa0:	add	r1, ip, r9
   2ffa4:	mov	r2, #0
   2ffa8:	add	r1, r1, r3
   2ffac:	str	r2, [ip, r9]
   2ffb0:	movw	r7, #64448	; 0xfbc0
   2ffb4:	add	ip, sp, #400	; 0x190
   2ffb8:	movt	r7, #65535	; 0xffff
   2ffbc:	mov	sl, r2
   2ffc0:	str	r2, [r1]
   2ffc4:	mov	fp, r2
   2ffc8:	str	r7, [sp, #100]	; 0x64
   2ffcc:	mov	r5, r2
   2ffd0:	str	r6, [sp, #104]	; 0x68
   2ffd4:	str	ip, [sp, #116]	; 0x74
   2ffd8:	b	30058 <__assert_fail@plt+0x1cb54>
   2ffdc:	ldr	r2, [sp, #380]	; 0x17c
   2ffe0:	add	ip, sp, #416	; 0x1a0
   2ffe4:	mov	r0, r8
   2ffe8:	str	ip, [sp]
   2ffec:	adds	r6, sl, r2
   2fff0:	adc	r7, fp, #0
   2fff4:	mov	r2, r6
   2fff8:	mov	r3, r7
   2fffc:	bl	1309c <dwarf_offdie@plt>
   30000:	cmp	r0, #0
   30004:	beq	30050 <__assert_fail@plt+0x1cb4c>
   30008:	add	r0, sp, #416	; 0x1a0
   3000c:	mov	r1, #16
   30010:	add	r2, sp, #432	; 0x1b0
   30014:	bl	13114 <dwarf_attr@plt>
   30018:	cmp	r0, #0
   3001c:	beq	30050 <__assert_fail@plt+0x1cb4c>
   30020:	add	r0, sp, #432	; 0x1b0
   30024:	ldr	r1, [sp, #116]	; 0x74
   30028:	bl	132a0 <dwarf_formudata@plt>
   3002c:	cmp	r0, #0
   30030:	bne	30050 <__assert_fail@plt+0x1cb4c>
   30034:	ldr	r7, [sp, #100]	; 0x64
   30038:	add	sl, sp, #1488	; 0x5d0
   3003c:	ldrd	r2, [sl, r7]
   30040:	ldrd	r6, [sp, #88]	; 0x58
   30044:	cmp	r3, r7
   30048:	cmpeq	r2, r6
   3004c:	beq	303d8 <__assert_fail@plt+0x1ced4>
   30050:	add	r7, sp, #1488	; 0x5d0
   30054:	ldrd	sl, [r7, r9]
   30058:	add	ip, sp, #392	; 0x188
   3005c:	add	lr, sp, #380	; 0x17c
   30060:	str	ip, [sp]
   30064:	mov	r0, r8
   30068:	str	lr, [sp, #4]
   3006c:	mov	r2, sl
   30070:	mov	r3, fp
   30074:	str	r5, [sp, #8]
   30078:	str	r5, [sp, #12]
   3007c:	str	r5, [sp, #16]
   30080:	bl	12c7c <dwarf_nextcu@plt>
   30084:	cmp	r0, #0
   30088:	beq	2ffdc <__assert_fail@plt+0x1cad8>
   3008c:	ldr	r3, [sp, #360]	; 0x168
   30090:	ldr	r6, [sp, #104]	; 0x68
   30094:	cmp	r3, #0
   30098:	beq	303ec <__assert_fail@plt+0x1cee8>
   3009c:	add	r0, sp, #416	; 0x1a0
   300a0:	bl	12f28 <dwarf_dieoffset@plt>
   300a4:	mov	sl, r0
   300a8:	add	r0, sp, #416	; 0x1a0
   300ac:	mov	fp, r1
   300b0:	bl	12f58 <dwarf_diename@plt>
   300b4:	movw	r1, #12452	; 0x30a4
   300b8:	mov	r2, sl
   300bc:	mov	r3, fp
   300c0:	movt	r1, #4
   300c4:	str	r0, [sp]
   300c8:	mov	r0, #1
   300cc:	bl	13204 <__printf_chk@plt>
   300d0:	movw	r0, #12476	; 0x30bc
   300d4:	movt	r0, #4
   300d8:	bl	12fdc <puts@plt>
   300dc:	ldr	r3, [sp, #356]	; 0x164
   300e0:	cmp	r3, #0
   300e4:	beq	302c8 <__assert_fail@plt+0x1cdc4>
   300e8:	movw	r9, #15800	; 0x3db8
   300ec:	movw	sl, #64480	; 0xfbe0
   300f0:	movt	r9, #4
   300f4:	movt	sl, #65535	; 0xffff
   300f8:	mov	r7, #0
   300fc:	str	r9, [sp, #88]	; 0x58
   30100:	ldr	fp, [sp, #108]	; 0x6c
   30104:	str	r8, [sp, #100]	; 0x64
   30108:	b	3011c <__assert_fail@plt+0x1cc18>
   3010c:	ldr	r3, [sp, #356]	; 0x164
   30110:	add	r7, r7, #1
   30114:	cmp	r7, r3
   30118:	bcs	302c4 <__assert_fail@plt+0x1cdc0>
   3011c:	ldr	r0, [sp, #352]	; 0x160
   30120:	mov	r1, r7
   30124:	bl	13018 <dwarf_onesrcline@plt>
   30128:	subs	r5, r0, #0
   3012c:	beq	30324 <__assert_fail@plt+0x1ce20>
   30130:	add	r2, sp, #400	; 0x190
   30134:	sub	r1, r2, #8
   30138:	bl	1339c <dwarf_linesrc@plt>
   3013c:	subs	r8, r0, #0
   30140:	beq	30344 <__assert_fail@plt+0x1ce40>
   30144:	ldr	r0, [sp, #88]	; 0x58
   30148:	mov	r1, r8
   3014c:	bl	12cd0 <strcmp@plt>
   30150:	cmp	r0, #0
   30154:	bne	302e0 <__assert_fail@plt+0x1cddc>
   30158:	add	r1, sp, #432	; 0x1b0
   3015c:	mov	r0, r5
   30160:	bl	12e68 <dwarf_lineaddr@plt>
   30164:	add	r1, sp, #364	; 0x16c
   30168:	mov	r0, r5
   3016c:	add	r9, sp, #1488	; 0x5d0
   30170:	bl	12f04 <dwarf_lineno@plt>
   30174:	add	r1, sp, #368	; 0x170
   30178:	mov	r0, r5
   3017c:	bl	12ea4 <dwarf_linecol@plt>
   30180:	sub	r1, r6, #12
   30184:	mov	r0, r5
   30188:	bl	130fc <dwarf_lineop_index@plt>
   3018c:	sub	r1, r4, #5
   30190:	mov	r0, r5
   30194:	bl	134b0 <dwarf_linebeginstatement@plt>
   30198:	sub	r1, r4, #4
   3019c:	mov	r0, r5
   301a0:	bl	132f4 <dwarf_lineendsequence@plt>
   301a4:	sub	r1, r4, #3
   301a8:	mov	r0, r5
   301ac:	bl	12e2c <dwarf_lineblock@plt>
   301b0:	sub	r1, r4, #2
   301b4:	mov	r0, r5
   301b8:	bl	13354 <dwarf_lineprologueend@plt>
   301bc:	sub	r1, r4, #1
   301c0:	mov	r0, r5
   301c4:	bl	13294 <dwarf_lineepiloguebegin@plt>
   301c8:	sub	r1, r6, #8
   301cc:	mov	r0, r5
   301d0:	bl	12d48 <dwarf_lineisa@plt>
   301d4:	sub	r1, r6, #4
   301d8:	mov	r0, r5
   301dc:	bl	1333c <dwarf_linediscriminator@plt>
   301e0:	ldrb	r0, [sp, #347]	; 0x15b
   301e4:	ldr	ip, [sp, #380]	; 0x17c
   301e8:	movw	r1, #12648	; 0x3168
   301ec:	cmp	r0, #0
   301f0:	ldr	lr, [sp, #376]	; 0x178
   301f4:	ldr	r2, [sp, #364]	; 0x16c
   301f8:	movt	r1, #4
   301fc:	str	ip, [sp, #20]
   30200:	moveq	r0, #32
   30204:	ldr	ip, [sp, #372]	; 0x174
   30208:	movne	r0, #83	; 0x53
   3020c:	str	r0, [sp]
   30210:	ldrb	r0, [sp, #349]	; 0x15d
   30214:	str	ip, [sp, #28]
   30218:	cmp	r0, #0
   3021c:	ldrb	ip, [sp, #350]	; 0x15e
   30220:	str	lr, [sp, #24]
   30224:	moveq	r0, #32
   30228:	ldrb	lr, [sp, #351]	; 0x15f
   3022c:	movne	r0, #66	; 0x42
   30230:	cmp	ip, #0
   30234:	ldr	r3, [sp, #368]	; 0x170
   30238:	moveq	ip, #32
   3023c:	movne	ip, #80	; 0x50
   30240:	cmp	lr, #0
   30244:	str	ip, [sp, #8]
   30248:	ldrb	ip, [sp, #348]	; 0x15c
   3024c:	moveq	lr, #32
   30250:	movne	lr, #69	; 0x45
   30254:	cmp	ip, #0
   30258:	str	lr, [sp, #12]
   3025c:	str	r0, [sp, #4]
   30260:	mov	r0, #1
   30264:	moveq	ip, #32
   30268:	movne	ip, #42	; 0x2a
   3026c:	str	ip, [sp, #16]
   30270:	bl	13204 <__printf_chk@plt>
   30274:	ldrd	r8, [r9, sl]
   30278:	ldrb	r2, [sp, #348]	; 0x15c
   3027c:	mov	r0, fp
   30280:	ldr	r1, [sp, #96]	; 0x60
   30284:	mov	r3, #0
   30288:	strd	r8, [sp]
   3028c:	subs	r2, r8, r2
   30290:	sbc	r3, r9, r3
   30294:	bl	27164 <__assert_fail@plt+0x13c60>
   30298:	mov	r0, #10
   3029c:	bl	131b0 <putchar@plt>
   302a0:	ldrb	r3, [sp, #348]	; 0x15c
   302a4:	cmp	r3, #0
   302a8:	beq	3010c <__assert_fail@plt+0x1cc08>
   302ac:	mov	r0, #10
   302b0:	add	r7, r7, #1
   302b4:	bl	131b0 <putchar@plt>
   302b8:	ldr	r3, [sp, #356]	; 0x164
   302bc:	cmp	r7, r3
   302c0:	bcc	3011c <__assert_fail@plt+0x1cc18>
   302c4:	ldr	r8, [sp, #100]	; 0x64
   302c8:	movw	r3, #64432	; 0xfbb0
   302cc:	add	fp, sp, #1488	; 0x5d0
   302d0:	movt	r3, #65535	; 0xffff
   302d4:	ldrd	sl, [fp, r3]
   302d8:	strd	sl, [sp, #88]	; 0x58
   302dc:	b	2ff24 <__assert_fail@plt+0x1ca20>
   302e0:	movw	r0, #64440	; 0xfbb8
   302e4:	add	r3, sp, #1488	; 0x5d0
   302e8:	movt	r0, #65535	; 0xffff
   302ec:	movw	lr, #64448	; 0xfbc0
   302f0:	movt	lr, #65535	; 0xffff
   302f4:	movw	r1, #12612	; 0x3144
   302f8:	ldrd	r2, [r3, r0]
   302fc:	movt	r1, #4
   30300:	mov	r0, #1
   30304:	strd	r2, [sp]
   30308:	add	r3, sp, #1488	; 0x5d0
   3030c:	ldrd	r2, [r3, lr]
   30310:	strd	r2, [sp, #8]
   30314:	mov	r2, r8
   30318:	bl	13204 <__printf_chk@plt>
   3031c:	str	r8, [sp, #88]	; 0x58
   30320:	b	30158 <__assert_fail@plt+0x1cc54>
   30324:	mvn	r0, #0
   30328:	bl	13078 <dwarf_errmsg@plt>
   3032c:	movw	r1, #12556	; 0x310c
   30330:	movt	r1, #4
   30334:	mov	r2, r0
   30338:	mov	r0, #1
   3033c:	bl	13204 <__printf_chk@plt>
   30340:	b	3010c <__assert_fail@plt+0x1cc08>
   30344:	mvn	r0, #0
   30348:	movw	r8, #15800	; 0x3db8
   3034c:	bl	13078 <dwarf_errmsg@plt>
   30350:	movw	r1, #12580	; 0x3124
   30354:	movt	r1, #4
   30358:	movt	r8, #4
   3035c:	mov	r2, r0
   30360:	mov	r0, #1
   30364:	bl	13204 <__printf_chk@plt>
   30368:	str	r8, [sp, #88]	; 0x58
   3036c:	b	30158 <__assert_fail@plt+0x1cc54>
   30370:	mov	r1, fp
   30374:	ldr	r0, [sp, #136]	; 0x88
   30378:	bl	131bc <elf_rawdata@plt>
   3037c:	subs	r6, r0, #0
   30380:	str	r6, [sp, #116]	; 0x74
   30384:	bne	30474 <__assert_fail@plt+0x1cf70>
   30388:	mov	r2, #5
   3038c:	movw	r1, #12684	; 0x318c
   30390:	movt	r1, #4
   30394:	bl	12d84 <dcgettext@plt>
   30398:	mov	r4, r0
   3039c:	mvn	r0, #0
   303a0:	bl	130a8 <elf_errmsg@plt>
   303a4:	mov	r2, r4
   303a8:	mov	r3, r0
   303ac:	ldr	r0, [sp, #116]	; 0x74
   303b0:	mov	r1, r0
   303b4:	bl	12f70 <error@plt>
   303b8:	ldr	r8, [sp, #112]	; 0x70
   303bc:	ldr	r2, [sp, #1484]	; 0x5cc
   303c0:	ldr	r3, [r8]
   303c4:	cmp	r2, r3
   303c8:	bne	32430 <__assert_fail@plt+0x1ef2c>
   303cc:	add	sp, sp, #1488	; 0x5d0
   303d0:	add	sp, sp, #4
   303d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   303d8:	ldr	r3, [sp, #420]	; 0x1a4
   303dc:	ldr	r6, [sp, #104]	; 0x68
   303e0:	cmp	r3, #0
   303e4:	str	r3, [sp, #360]	; 0x168
   303e8:	bne	3009c <__assert_fail@plt+0x1cb98>
   303ec:	movw	r0, #12468	; 0x30b4
   303f0:	movt	r0, #4
   303f4:	bl	12fdc <puts@plt>
   303f8:	b	300d0 <__assert_fail@plt+0x1cbcc>
   303fc:	ldr	r6, [sp, #128]	; 0x80
   30400:	mov	r0, r2
   30404:	movw	r1, #60928	; 0xee00
   30408:	mov	r2, #5
   3040c:	movt	r1, #3
   30410:	add	r6, r6, #16
   30414:	str	r6, [sp, #148]	; 0x94
   30418:	bl	12d84 <dcgettext@plt>
   3041c:	mov	r5, r0
   30420:	ldr	r0, [sp, #136]	; 0x88
   30424:	bl	133d8 <elf_ndxscn@plt>
   30428:	ldr	r1, [sp, #104]	; 0x68
   3042c:	mov	r4, r0
   30430:	ldr	r0, [sp, #148]	; 0x94
   30434:	bl	1870c <__assert_fail@plt+0x5208>
   30438:	ldr	r9, [sp, #104]	; 0x68
   3043c:	mov	r2, r4
   30440:	mov	r1, r5
   30444:	ldrd	r6, [r9, #24]
   30448:	strd	r6, [sp]
   3044c:	mov	r3, r0
   30450:	mov	r0, #1
   30454:	bl	13204 <__printf_chk@plt>
   30458:	ldrd	r2, [r9, #32]
   3045c:	orrs	sl, r2, r3
   30460:	beq	303b8 <__assert_fail@plt+0x1ceb4>
   30464:	ldr	fp, [r8, #32]
   30468:	cmp	fp, #0
   3046c:	str	fp, [sp, #116]	; 0x74
   30470:	beq	30370 <__assert_fail@plt+0x1ce6c>
   30474:	ldr	r7, [sp, #116]	; 0x74
   30478:	mov	fp, r8
   3047c:	movw	r9, #52429	; 0xcccd
   30480:	movt	r9, #52428	; 0xcccc
   30484:	str	r9, [sp, #164]	; 0xa4
   30488:	ldr	r3, [r7]
   3048c:	mov	sl, r3
   30490:	mov	r5, r3
   30494:	str	r3, [sp, #384]	; 0x180
   30498:	ldr	r7, [sp, #116]	; 0x74
   3049c:	ldr	r4, [r7, #12]
   304a0:	add	r4, r5, r4
   304a4:	cmp	r4, sl
   304a8:	bls	311ac <__assert_fail@plt+0x1dca8>
   304ac:	mov	r2, #5
   304b0:	movw	r1, #12724	; 0x31b4
   304b4:	mov	r0, #0
   304b8:	movt	r1, #4
   304bc:	bl	12d84 <dcgettext@plt>
   304c0:	rsb	r2, r5, sl
   304c4:	mov	r1, r0
   304c8:	mov	r0, #1
   304cc:	bl	13204 <__printf_chk@plt>
   304d0:	ldr	r1, [sp, #384]	; 0x180
   304d4:	add	r3, r1, #4
   304d8:	cmp	r4, r3
   304dc:	bcc	309f4 <__assert_fail@plt+0x1d4f0>
   304e0:	ldrb	r2, [fp, #84]	; 0x54
   304e4:	ldr	sl, [r1]
   304e8:	cmp	r2, #0
   304ec:	bne	32434 <__assert_fail@plt+0x1ef30>
   304f0:	cmn	sl, #1
   304f4:	mov	r8, sl
   304f8:	str	r3, [sp, #384]	; 0x180
   304fc:	mov	r9, #0
   30500:	movne	sl, #4
   30504:	beq	3243c <__assert_fail@plt+0x1ef38>
   30508:	rsb	r4, r3, r4
   3050c:	mov	r5, #0
   30510:	cmp	r9, r5
   30514:	cmpeq	r8, r4
   30518:	bhi	309f4 <__assert_fail@plt+0x1d4f0>
   3051c:	cmp	r8, #1
   30520:	add	r4, r3, r8
   30524:	bls	309f4 <__assert_fail@plt+0x1d4f0>
   30528:	cmp	r2, #0
   3052c:	ldr	r6, [sp, #128]	; 0x80
   30530:	add	r3, r3, #2
   30534:	ldrhne	r2, [r3, #-2]
   30538:	ldrheq	ip, [r3, #-2]
   3053c:	ldr	r0, [r6, #16]
   30540:	lslne	r1, r2, #8
   30544:	str	r3, [sp, #384]	; 0x180
   30548:	orrne	r2, r1, r2, lsr #8
   3054c:	mov	r1, #0
   30550:	streq	ip, [sp, #88]	; 0x58
   30554:	uxthne	r2, r2
   30558:	strne	r2, [sp, #88]	; 0x58
   3055c:	bl	12d60 <elf_getident@plt>
   30560:	ldr	r7, [sp, #88]	; 0x58
   30564:	ldrb	r3, [r0, #4]
   30568:	cmp	r3, #1
   3056c:	movne	r3, #8
   30570:	moveq	r3, #4
   30574:	cmp	r7, #4
   30578:	str	r3, [sp, #96]	; 0x60
   3057c:	bhi	30924 <__assert_fail@plt+0x1d420>
   30580:	ldr	r3, [sp, #384]	; 0x180
   30584:	cmp	sl, #4
   30588:	mov	r5, #0
   3058c:	rsb	r2, r3, r4
   30590:	beq	3095c <__assert_fail@plt+0x1d458>
   30594:	cmp	r2, #7
   30598:	bls	309f4 <__assert_fail@plt+0x1d4f0>
   3059c:	ldrb	r2, [fp, #84]	; 0x54
   305a0:	cmp	r2, #0
   305a4:	ldreq	r7, [r3]
   305a8:	ldreq	r6, [r3, #4]
   305ac:	bne	31640 <__assert_fail@plt+0x1e13c>
   305b0:	add	r3, r3, #8
   305b4:	str	r3, [sp, #384]	; 0x180
   305b8:	cmp	r3, r4
   305bc:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   305c0:	ldr	lr, [sp, #88]	; 0x58
   305c4:	add	ip, r3, #1
   305c8:	str	ip, [sp, #384]	; 0x180
   305cc:	ldrb	r2, [r3]
   305d0:	cmp	lr, #3
   305d4:	movls	r3, #1
   305d8:	strbls	r3, [sp, #449]	; 0x1c1
   305dc:	strb	r2, [sp, #450]	; 0x1c2
   305e0:	bls	305fc <__assert_fail@plt+0x1d0f8>
   305e4:	cmp	ip, r4
   305e8:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   305ec:	add	ip, r3, #2
   305f0:	str	ip, [sp, #384]	; 0x180
   305f4:	ldrb	r3, [r3, #1]
   305f8:	strb	r3, [sp, #449]	; 0x1c1
   305fc:	rsb	r3, ip, r4
   30600:	cmp	r3, #3
   30604:	bls	309f4 <__assert_fail@plt+0x1d4f0>
   30608:	mov	r3, ip
   3060c:	add	lr, ip, #3
   30610:	str	lr, [sp, #100]	; 0x64
   30614:	add	r2, ip, #1
   30618:	add	lr, ip, #4
   3061c:	str	r2, [sp, #384]	; 0x180
   30620:	str	lr, [sp, #120]	; 0x78
   30624:	mov	r2, #5
   30628:	ldrb	r0, [r3], #2
   3062c:	movw	r1, #12748	; 0x31cc
   30630:	ldr	lr, [sp, #100]	; 0x64
   30634:	movt	r1, #4
   30638:	str	r3, [sp, #384]	; 0x180
   3063c:	ldrb	r3, [ip, #1]
   30640:	str	lr, [sp, #384]	; 0x180
   30644:	ldrb	lr, [ip, #2]
   30648:	str	r0, [sp, #140]	; 0x8c
   3064c:	mov	r0, #0
   30650:	sxtb	r3, r3
   30654:	str	r3, [sp, #144]	; 0x90
   30658:	str	lr, [sp, #132]	; 0x84
   3065c:	ldr	lr, [sp, #120]	; 0x78
   30660:	str	lr, [sp, #384]	; 0x180
   30664:	ldrb	ip, [ip, #3]
   30668:	str	ip, [sp, #100]	; 0x64
   3066c:	bl	12d84 <dcgettext@plt>
   30670:	mov	r3, r9
   30674:	mov	r2, r8
   30678:	ldr	r9, [sp, #132]	; 0x84
   3067c:	ldr	r8, [sp, #144]	; 0x90
   30680:	ldrb	lr, [sp, #450]	; 0x1c2
   30684:	str	r9, [sp, #40]	; 0x28
   30688:	str	r8, [sp, #36]	; 0x24
   3068c:	ldr	r9, [sp, #140]	; 0x8c
   30690:	ldr	r8, [sp, #100]	; 0x64
   30694:	ldrb	ip, [sp, #449]	; 0x1c1
   30698:	str	r9, [sp, #32]
   3069c:	str	r8, [sp, #44]	; 0x2c
   306a0:	ldr	r9, [sp, #96]	; 0x60
   306a4:	ldr	r8, [sp, #88]	; 0x58
   306a8:	str	r7, [sp, #8]
   306ac:	str	r6, [sp, #12]
   306b0:	str	r8, [sp]
   306b4:	str	r9, [sp, #16]
   306b8:	str	r5, [sp, #20]
   306bc:	str	lr, [sp, #24]
   306c0:	str	ip, [sp, #28]
   306c4:	mov	r1, r0
   306c8:	mov	r0, #1
   306cc:	bl	13204 <__printf_chk@plt>
   306d0:	sub	r3, r8, #2
   306d4:	cmp	r3, #3
   306d8:	bhi	30984 <__assert_fail@plt+0x1d480>
   306dc:	ldr	r7, [sp, #96]	; 0x60
   306e0:	cmp	r7, #8
   306e4:	cmpne	r7, #4
   306e8:	moveq	r6, #0
   306ec:	movne	r6, #1
   306f0:	bne	309c0 <__assert_fail@plt+0x1d4bc>
   306f4:	cmp	r5, #0
   306f8:	bne	30ae8 <__assert_fail@plt+0x1d5e4>
   306fc:	ldr	r8, [sp, #384]	; 0x180
   30700:	ldr	r9, [sp, #100]	; 0x64
   30704:	str	r8, [sp, #160]	; 0xa0
   30708:	sub	r8, r9, #1
   3070c:	ldr	ip, [sp, #160]	; 0xa0
   30710:	add	r2, ip, r8
   30714:	cmp	r4, r2
   30718:	bls	308bc <__assert_fail@plt+0x1d3b8>
   3071c:	cmp	r9, #10
   30720:	movls	r6, #1
   30724:	bls	30748 <__assert_fail@plt+0x1d244>
   30728:	ldr	r3, [sp, #100]	; 0x64
   3072c:	mov	r6, #1
   30730:	ldr	r1, [sp, #164]	; 0xa4
   30734:	umull	r9, r3, r1, r3
   30738:	add	r6, r6, #1
   3073c:	lsr	r3, r3, #3
   30740:	cmp	r3, #10
   30744:	bhi	30734 <__assert_fail@plt+0x1d230>
   30748:	ldr	r7, [sp, #100]	; 0x64
   3074c:	cmp	r7, #1
   30750:	bls	31170 <__assert_fail@plt+0x1dc6c>
   30754:	ldr	r3, [sp, #160]	; 0xa0
   30758:	mov	r5, #1
   3075c:	mov	r7, #5
   30760:	str	r4, [sp, #120]	; 0x78
   30764:	ldr	r9, [sp, #100]	; 0x64
   30768:	b	30770 <__assert_fail@plt+0x1d26c>
   3076c:	ldr	r3, [sp, #384]	; 0x180
   30770:	sub	r4, r5, #1
   30774:	movw	r1, #13332	; 0x3414
   30778:	movw	r2, #13356	; 0x342c
   3077c:	movt	r1, #4
   30780:	ldrb	r3, [r3, r4]
   30784:	movt	r2, #4
   30788:	str	r7, [sp]
   3078c:	mov	r0, #0
   30790:	bl	134a4 <dcngettext@plt>
   30794:	ldr	lr, [sp, #384]	; 0x180
   30798:	mov	r3, r5
   3079c:	add	r5, r5, #1
   307a0:	mov	r2, r6
   307a4:	ldrb	ip, [lr, r4]
   307a8:	str	ip, [sp]
   307ac:	mov	r1, r0
   307b0:	mov	r0, #1
   307b4:	bl	13204 <__printf_chk@plt>
   307b8:	uxtb	r3, r5
   307bc:	cmp	r9, r3
   307c0:	bhi	3076c <__assert_fail@plt+0x1d268>
   307c4:	ldr	r3, [sp, #384]	; 0x180
   307c8:	ldr	r4, [sp, #120]	; 0x78
   307cc:	add	r8, r3, r8
   307d0:	str	r8, [sp, #384]	; 0x180
   307d4:	cmp	r4, r8
   307d8:	bls	308bc <__assert_fail@plt+0x1d3b8>
   307dc:	mov	r5, #0
   307e0:	add	r2, sp, #416	; 0x1a0
   307e4:	mov	r1, r5
   307e8:	str	r5, [sp]
   307ec:	str	r5, [sp, #4]
   307f0:	mov	r3, r5
   307f4:	str	r5, [sp, #8]
   307f8:	mov	r0, fp
   307fc:	bl	12d0c <dwarf_get_units@plt>
   30800:	cmp	r0, #0
   30804:	bne	30a40 <__assert_fail@plt+0x1d53c>
   30808:	ldr	r5, [sp, #416]	; 0x1a0
   3080c:	cmp	r5, #0
   30810:	beq	30a40 <__assert_fail@plt+0x1d53c>
   30814:	ldrd	r2, [r5, #104]	; 0x68
   30818:	mvn	r6, #0
   3081c:	mvn	r7, #0
   30820:	cmp	r3, r7
   30824:	cmpeq	r2, r6
   30828:	beq	30d9c <__assert_fail@plt+0x1d898>
   3082c:	mov	r9, r2
   30830:	mov	r8, r3
   30834:	mov	r2, #5
   30838:	movw	r1, #13384	; 0x3448
   3083c:	mov	r0, #0
   30840:	movt	r1, #4
   30844:	bl	12d84 <dcgettext@plt>
   30848:	bl	12fdc <puts@plt>
   3084c:	ldr	ip, [sp, #88]	; 0x58
   30850:	cmp	ip, #5
   30854:	beq	30c80 <__assert_fail@plt+0x1d77c>
   30858:	ldr	r5, [sp, #384]	; 0x180
   3085c:	cmp	r4, r5
   30860:	bls	308bc <__assert_fail@plt+0x1d3b8>
   30864:	ldrb	r3, [r5]
   30868:	cmp	r3, #0
   3086c:	bne	30880 <__assert_fail@plt+0x1d37c>
   30870:	b	30b1c <__assert_fail@plt+0x1d618>
   30874:	ldrb	r3, [r6, #1]
   30878:	cmp	r3, #0
   3087c:	beq	30b1c <__assert_fail@plt+0x1d618>
   30880:	mov	r0, r5
   30884:	mov	r1, #0
   30888:	rsb	r2, r5, r4
   3088c:	bl	13270 <memchr@plt>
   30890:	subs	r6, r0, #0
   30894:	beq	308bc <__assert_fail@plt+0x1d3b8>
   30898:	mov	r2, r5
   3089c:	movw	r1, #59748	; 0xe964
   308a0:	add	r5, r6, #1
   308a4:	mov	r0, #1
   308a8:	movt	r1, #3
   308ac:	bl	13204 <__printf_chk@plt>
   308b0:	cmp	r4, r5
   308b4:	str	r5, [sp, #384]	; 0x180
   308b8:	bhi	30874 <__assert_fail@plt+0x1d370>
   308bc:	mov	r2, #5
   308c0:	movw	r1, #13280	; 0x33e0
   308c4:	mov	r0, #0
   308c8:	movt	r1, #4
   308cc:	bl	12d84 <dcgettext@plt>
   308d0:	ldr	r7, [sp, #116]	; 0x74
   308d4:	ldr	r6, [sp, #384]	; 0x180
   308d8:	mov	sl, r4
   308dc:	ldr	r3, [r7]
   308e0:	rsb	r6, r3, r6
   308e4:	mov	r5, r0
   308e8:	ldr	r0, [sp, #136]	; 0x88
   308ec:	bl	133d8 <elf_ndxscn@plt>
   308f0:	ldr	r1, [sp, #104]	; 0x68
   308f4:	mov	r7, r0
   308f8:	ldr	r0, [sp, #148]	; 0x94
   308fc:	bl	1870c <__assert_fail@plt+0x5208>
   30900:	str	r7, [sp]
   30904:	mov	r3, r6
   30908:	mov	r2, r5
   3090c:	str	r0, [sp, #4]
   30910:	mov	r0, #0
   30914:	mov	r1, r0
   30918:	bl	12f70 <error@plt>
   3091c:	str	r4, [sp, #384]	; 0x180
   30920:	b	309b4 <__assert_fail@plt+0x1d4b0>
   30924:	ldr	r2, [sp, #384]	; 0x180
   30928:	rsb	r3, r2, r4
   3092c:	cmp	r3, #1
   30930:	bls	309f4 <__assert_fail@plt+0x1d4f0>
   30934:	mov	r3, r2
   30938:	add	r1, r2, #1
   3093c:	str	r1, [sp, #384]	; 0x180
   30940:	cmp	sl, #4
   30944:	ldrb	r6, [r3], #2
   30948:	str	r3, [sp, #384]	; 0x180
   3094c:	str	r6, [sp, #96]	; 0x60
   30950:	ldrb	r5, [r2, #1]
   30954:	rsb	r2, r3, r4
   30958:	bne	30594 <__assert_fail@plt+0x1d090>
   3095c:	cmp	r2, #3
   30960:	bls	309f4 <__assert_fail@plt+0x1d4f0>
   30964:	ldrb	r2, [fp, #84]	; 0x54
   30968:	ldr	r7, [r3]
   3096c:	cmp	r2, #0
   30970:	bne	32428 <__assert_fail@plt+0x1ef24>
   30974:	add	r3, r3, #4
   30978:	mov	r6, #0
   3097c:	str	r3, [sp, #384]	; 0x180
   30980:	b	305b8 <__assert_fail@plt+0x1d0b4>
   30984:	mov	r2, #5
   30988:	movw	r1, #13164	; 0x336c
   3098c:	mov	r0, #0
   30990:	movt	r1, #4
   30994:	bl	12d84 <dcgettext@plt>
   30998:	mov	sl, r4
   3099c:	ldr	r3, [sp, #88]	; 0x58
   309a0:	mov	r2, r0
   309a4:	mov	r0, #0
   309a8:	mov	r1, r0
   309ac:	bl	12f70 <error@plt>
   309b0:	str	r4, [sp, #384]	; 0x180
   309b4:	ldr	r6, [sp, #116]	; 0x74
   309b8:	ldr	r5, [r6]
   309bc:	b	30498 <__assert_fail@plt+0x1cf94>
   309c0:	mov	r2, #5
   309c4:	movw	r1, #13204	; 0x3394
   309c8:	mov	r0, #0
   309cc:	movt	r1, #4
   309d0:	bl	12d84 <dcgettext@plt>
   309d4:	ldr	r3, [sp, #96]	; 0x60
   309d8:	mov	sl, r4
   309dc:	mov	r2, r0
   309e0:	mov	r0, #0
   309e4:	mov	r1, r0
   309e8:	bl	12f70 <error@plt>
   309ec:	str	r4, [sp, #384]	; 0x180
   309f0:	b	309b4 <__assert_fail@plt+0x1d4b0>
   309f4:	mov	r2, #5
   309f8:	movw	r1, #11452	; 0x2cbc
   309fc:	mov	r0, #0
   30a00:	movt	r1, #4
   30a04:	bl	12d84 <dcgettext@plt>
   30a08:	mov	r5, r0
   30a0c:	ldr	r0, [sp, #136]	; 0x88
   30a10:	bl	133d8 <elf_ndxscn@plt>
   30a14:	ldr	r1, [sp, #104]	; 0x68
   30a18:	mov	r4, r0
   30a1c:	ldr	r0, [sp, #148]	; 0x94
   30a20:	bl	1870c <__assert_fail@plt+0x5208>
   30a24:	mov	r2, r5
   30a28:	mov	r3, r4
   30a2c:	str	r0, [sp]
   30a30:	mov	r0, #0
   30a34:	mov	r1, r0
   30a38:	bl	12f70 <error@plt>
   30a3c:	b	303b8 <__assert_fail@plt+0x1ceb4>
   30a40:	ldr	r3, [fp, #60]	; 0x3c
   30a44:	cmp	r3, #0
   30a48:	beq	30ac8 <__assert_fail@plt+0x1d5c4>
   30a4c:	ldrb	r6, [fp, #84]	; 0x54
   30a50:	ldr	lr, [r3]
   30a54:	ldr	r7, [r3, #12]
   30a58:	cmp	r6, #0
   30a5c:	add	r7, lr, r7
   30a60:	ldr	r0, [lr]
   30a64:	bne	32638 <__assert_fail@plt+0x1f134>
   30a68:	cmn	r0, #1
   30a6c:	add	ip, lr, #4
   30a70:	mov	r1, #0
   30a74:	beq	32608 <__assert_fail@plt+0x1f104>
   30a78:	rsb	r2, ip, r7
   30a7c:	cmp	r2, #3
   30a80:	ble	30ac8 <__assert_fail@plt+0x1d5c4>
   30a84:	cmp	r1, #0
   30a88:	cmpeq	r0, #3
   30a8c:	bls	30ac8 <__assert_fail@plt+0x1d5c4>
   30a90:	asr	r3, r2, #31
   30a94:	cmp	r1, r3
   30a98:	cmpeq	r0, r2
   30a9c:	bhi	30ac8 <__assert_fail@plt+0x1d5c4>
   30aa0:	ldrh	r3, [ip]
   30aa4:	cmp	r6, #0
   30aa8:	lslne	r2, r3, #8
   30aac:	orrne	r3, r2, r3, lsr #8
   30ab0:	uxthne	r3, r3
   30ab4:	cmp	r3, #5
   30ab8:	addeq	r2, ip, #4
   30abc:	rsbeq	r2, lr, r2
   30ac0:	asreq	r3, r2, #31
   30ac4:	beq	30ad0 <__assert_fail@plt+0x1d5cc>
   30ac8:	mov	r2, #0
   30acc:	mov	r3, #0
   30ad0:	cmp	r5, #0
   30ad4:	beq	3082c <__assert_fail@plt+0x1d328>
   30ad8:	strd	r2, [r5, #104]	; 0x68
   30adc:	mov	r9, r2
   30ae0:	mov	r8, r3
   30ae4:	b	30834 <__assert_fail@plt+0x1d330>
   30ae8:	mov	r2, #5
   30aec:	movw	r1, #13236	; 0x33b4
   30af0:	mov	r0, r6
   30af4:	movt	r1, #4
   30af8:	bl	12d84 <dcgettext@plt>
   30afc:	mov	r1, r6
   30b00:	mov	r3, r5
   30b04:	mov	sl, r4
   30b08:	mov	r2, r0
   30b0c:	mov	r0, r6
   30b10:	bl	12f70 <error@plt>
   30b14:	str	r4, [sp, #384]	; 0x180
   30b18:	b	309b4 <__assert_fail@plt+0x1d4b0>
   30b1c:	add	r3, r5, #1
   30b20:	str	r3, [sp, #384]	; 0x180
   30b24:	cmp	r4, r3
   30b28:	bls	308bc <__assert_fail@plt+0x1d3b8>
   30b2c:	mov	r2, #5
   30b30:	movw	r1, #13432	; 0x3478
   30b34:	mov	r0, #0
   30b38:	movt	r1, #4
   30b3c:	bl	12d84 <dcgettext@plt>
   30b40:	bl	12fdc <puts@plt>
   30b44:	ldr	r6, [sp, #88]	; 0x58
   30b48:	cmp	r6, #5
   30b4c:	beq	30e78 <__assert_fail@plt+0x1d974>
   30b50:	mov	r2, #5
   30b54:	movw	r1, #13452	; 0x348c
   30b58:	mov	r0, #0
   30b5c:	movt	r1, #4
   30b60:	bl	12d84 <dcgettext@plt>
   30b64:	bl	12fdc <puts@plt>
   30b68:	ldr	sl, [sp, #384]	; 0x180
   30b6c:	cmp	r4, sl
   30b70:	bls	308bc <__assert_fail@plt+0x1d3b8>
   30b74:	ldrb	r3, [sl]
   30b78:	cmp	r3, #0
   30b7c:	beq	30c74 <__assert_fail@plt+0x1d770>
   30b80:	mov	r6, #1
   30b84:	str	r6, [sp, #88]	; 0x58
   30b88:	mov	r0, sl
   30b8c:	mov	r1, #0
   30b90:	rsb	r2, sl, r4
   30b94:	bl	13270 <memchr@plt>
   30b98:	cmp	r0, #0
   30b9c:	beq	308bc <__assert_fail@plt+0x1d3b8>
   30ba0:	add	lr, r0, #1
   30ba4:	rsb	r1, lr, r4
   30ba8:	cmp	r1, #0
   30bac:	ble	311dc <__assert_fail@plt+0x1dcd8>
   30bb0:	add	r6, r0, #2
   30bb4:	str	r6, [sp, #384]	; 0x180
   30bb8:	ldrb	ip, [r0, #1]
   30bbc:	mov	r3, #0
   30bc0:	tst	ip, #128	; 0x80
   30bc4:	and	ip, ip, #127	; 0x7f
   30bc8:	uxtb	r2, ip
   30bcc:	bne	317d4 <__assert_fail@plt+0x1e2d0>
   30bd0:	rsb	r1, r6, r4
   30bd4:	cmp	r1, #0
   30bd8:	ble	308bc <__assert_fail@plt+0x1d3b8>
   30bdc:	add	lr, r6, #1
   30be0:	str	lr, [sp, #384]	; 0x180
   30be4:	ldrb	r5, [r6]
   30be8:	mov	r3, #0
   30bec:	tst	r5, #128	; 0x80
   30bf0:	and	r5, r5, #127	; 0x7f
   30bf4:	uxtb	r2, r5
   30bf8:	bne	31778 <__assert_fail@plt+0x1e274>
   30bfc:	rsb	r8, lr, r4
   30c00:	cmp	r8, #0
   30c04:	ble	308bc <__assert_fail@plt+0x1d3b8>
   30c08:	add	r3, lr, #1
   30c0c:	str	r3, [sp, #384]	; 0x180
   30c10:	ldrb	r1, [lr]
   30c14:	mov	r3, #0
   30c18:	tst	r1, #128	; 0x80
   30c1c:	and	r1, r1, #127	; 0x7f
   30c20:	uxtb	r2, r1
   30c24:	bne	316c4 <__assert_fail@plt+0x1e1c0>
   30c28:	mov	r2, r1
   30c2c:	str	r2, [sp, #4]
   30c30:	mov	r3, ip
   30c34:	str	sl, [sp, #8]
   30c38:	movw	r1, #13492	; 0x34b4
   30c3c:	str	r5, [sp]
   30c40:	movt	r1, #4
   30c44:	mov	r0, #1
   30c48:	ldr	r2, [sp, #88]	; 0x58
   30c4c:	bl	13204 <__printf_chk@plt>
   30c50:	ldr	sl, [sp, #384]	; 0x180
   30c54:	ldr	r7, [sp, #88]	; 0x58
   30c58:	cmp	r4, sl
   30c5c:	add	r7, r7, #1
   30c60:	str	r7, [sp, #88]	; 0x58
   30c64:	bls	308bc <__assert_fail@plt+0x1d3b8>
   30c68:	ldrb	r3, [sl]
   30c6c:	cmp	r3, #0
   30c70:	bne	30b88 <__assert_fail@plt+0x1d684>
   30c74:	add	sl, sl, #1
   30c78:	str	sl, [sp, #384]	; 0x180
   30c7c:	b	3132c <__assert_fail@plt+0x1de28>
   30c80:	ldr	r2, [sp, #88]	; 0x58
   30c84:	movw	r1, #13404	; 0x345c
   30c88:	mov	r0, #0
   30c8c:	movt	r1, #4
   30c90:	bl	12d84 <dcgettext@plt>
   30c94:	mov	r1, r0
   30c98:	mov	r0, #1
   30c9c:	bl	13204 <__printf_chk@plt>
   30ca0:	ldr	r3, [sp, #384]	; 0x180
   30ca4:	cmp	r3, r4
   30ca8:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   30cac:	add	ip, sp, #460	; 0x1cc
   30cb0:	mov	r6, #0
   30cb4:	add	r2, r3, #1
   30cb8:	str	r8, [sp, #336]	; 0x150
   30cbc:	str	r2, [sp, #384]	; 0x180
   30cc0:	mov	r7, r6
   30cc4:	ldrb	r5, [r3]
   30cc8:	mov	r8, ip
   30ccc:	str	sl, [sp, #152]	; 0x98
   30cd0:	str	fp, [sp, #312]	; 0x138
   30cd4:	str	r9, [sp, #316]	; 0x13c
   30cd8:	b	30ce0 <__assert_fail@plt+0x1d7dc>
   30cdc:	add	r6, r6, #4
   30ce0:	cmp	r7, r5
   30ce4:	beq	31044 <__assert_fail@plt+0x1db40>
   30ce8:	ldr	r0, [sp, #384]	; 0x180
   30cec:	cmp	r4, r0
   30cf0:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   30cf4:	add	ip, r0, #1
   30cf8:	str	ip, [sp, #384]	; 0x180
   30cfc:	ldrb	r1, [r0]
   30d00:	mov	r3, #0
   30d04:	tst	r1, #128	; 0x80
   30d08:	and	r1, r1, #127	; 0x7f
   30d0c:	uxtb	r2, r1
   30d10:	bne	31cf0 <__assert_fail@plt+0x1e7ec>
   30d14:	cmp	r4, ip
   30d18:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   30d1c:	add	r3, ip, #1
   30d20:	str	r3, [sp, #384]	; 0x180
   30d24:	ldrb	r0, [ip]
   30d28:	mov	r3, #0
   30d2c:	tst	r0, #128	; 0x80
   30d30:	and	r0, r0, #127	; 0x7f
   30d34:	uxtb	r2, r0
   30d38:	bne	31c90 <__assert_fail@plt+0x1e78c>
   30d3c:	mov	r3, r0
   30d40:	mov	sl, r0
   30d44:	mov	r2, r8
   30d48:	mov	r0, r1
   30d4c:	strh	r1, [r2, r6]!
   30d50:	add	r7, r7, #1
   30d54:	strh	r3, [r2, #2]
   30d58:	bl	17efc <__assert_fail@plt+0x49f8>
   30d5c:	mov	r9, r0
   30d60:	mov	r0, sl
   30d64:	bl	1748c <__assert_fail@plt+0x3f88>
   30d68:	mov	r2, r9
   30d6c:	movw	r1, #13412	; 0x3464
   30d70:	movt	r1, #4
   30d74:	mov	r3, r0
   30d78:	mov	r0, #1
   30d7c:	bl	13204 <__printf_chk@plt>
   30d80:	cmp	r7, r5
   30d84:	bge	30cdc <__assert_fail@plt+0x1d7d8>
   30d88:	movw	r1, #8432	; 0x20f0
   30d8c:	mov	r0, #1
   30d90:	movt	r1, #4
   30d94:	bl	13204 <__printf_chk@plt>
   30d98:	b	30cdc <__assert_fail@plt+0x1d7d8>
   30d9c:	add	r8, sp, #400	; 0x190
   30da0:	str	r0, [sp, #400]	; 0x190
   30da4:	add	r3, r8, #8
   30da8:	str	r0, [sp, #404]	; 0x194
   30dac:	ldrh	r2, [r5, #26]
   30db0:	str	r0, [r3], #4
   30db4:	str	r0, [r3]
   30db8:	cmp	r2, #4
   30dbc:	ldr	r1, [r5, #28]
   30dc0:	ldr	r3, [r5]
   30dc4:	ldrb	r2, [r5, #25]
   30dc8:	add	r1, r3, r1, lsl #2
   30dcc:	ldrd	r6, [r5, #8]
   30dd0:	ldrb	r3, [r5, #32]
   30dd4:	ldr	r1, [r1, #12]
   30dd8:	ldr	ip, [r1]
   30ddc:	bls	30e5c <__assert_fail@plt+0x1d958>
   30de0:	sub	r0, r3, #4
   30de4:	mov	r1, #3
   30de8:	cmp	r3, #2
   30dec:	cmpne	r0, #1
   30df0:	smlalbb	r6, r7, r1, r2
   30df4:	bls	311e4 <__assert_fail@plt+0x1dce0>
   30df8:	cmp	r3, #6
   30dfc:	beq	31558 <__assert_fail@plt+0x1e054>
   30e00:	mov	r0, r8
   30e04:	mov	r1, #114	; 0x72
   30e08:	add	r2, sp, #416	; 0x1a0
   30e0c:	add	ip, ip, r6
   30e10:	str	r5, [sp, #404]	; 0x194
   30e14:	str	ip, [sp, #400]	; 0x190
   30e18:	bl	13114 <dwarf_attr@plt>
   30e1c:	cmp	r0, #0
   30e20:	beq	30e38 <__assert_fail@plt+0x1d934>
   30e24:	add	r0, sp, #416	; 0x1a0
   30e28:	sub	r1, r8, #8
   30e2c:	bl	132a0 <dwarf_formudata@plt>
   30e30:	cmp	r0, #0
   30e34:	beq	31178 <__assert_fail@plt+0x1dc74>
   30e38:	ldrh	r3, [r5, #26]
   30e3c:	cmp	r3, #4
   30e40:	bhi	30a40 <__assert_fail@plt+0x1d53c>
   30e44:	mov	r2, #0
   30e48:	str	r2, [r5, #104]	; 0x68
   30e4c:	mov	r9, r2
   30e50:	str	r2, [r5, #108]	; 0x6c
   30e54:	mov	r8, r2
   30e58:	b	30834 <__assert_fail@plt+0x1d330>
   30e5c:	cmp	r3, #2
   30e60:	beq	31548 <__assert_fail@plt+0x1e044>
   30e64:	mov	r1, #3
   30e68:	mvn	r3, #0
   30e6c:	smlabb	r2, r1, r2, r3
   30e70:	adds	r6, r6, r2
   30e74:	b	30e00 <__assert_fail@plt+0x1d8fc>
   30e78:	mov	r2, r6
   30e7c:	movw	r1, #13404	; 0x345c
   30e80:	mov	r0, #0
   30e84:	movt	r1, #4
   30e88:	bl	12d84 <dcgettext@plt>
   30e8c:	mov	r1, r0
   30e90:	mov	r0, #1
   30e94:	bl	13204 <__printf_chk@plt>
   30e98:	ldr	r3, [sp, #384]	; 0x180
   30e9c:	cmp	r3, r4
   30ea0:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   30ea4:	add	r2, r3, #1
   30ea8:	str	r2, [sp, #384]	; 0x180
   30eac:	ldrb	r3, [r3]
   30eb0:	mov	r7, #0
   30eb4:	str	r9, [sp, #336]	; 0x150
   30eb8:	mov	r5, r7
   30ebc:	str	r8, [sp, #340]	; 0x154
   30ec0:	mov	r8, r7
   30ec4:	mov	r9, r3
   30ec8:	add	ip, sp, #460	; 0x1cc
   30ecc:	str	r3, [sp, #88]	; 0x58
   30ed0:	str	ip, [sp, #152]	; 0x98
   30ed4:	str	sl, [sp, #312]	; 0x138
   30ed8:	str	fp, [sp, #316]	; 0x13c
   30edc:	cmp	r5, r9
   30ee0:	beq	31200 <__assert_fail@plt+0x1dcfc>
   30ee4:	ldr	r1, [sp, #384]	; 0x180
   30ee8:	cmp	r4, r1
   30eec:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   30ef0:	add	ip, r1, #1
   30ef4:	str	ip, [sp, #384]	; 0x180
   30ef8:	ldrb	r3, [r1]
   30efc:	tst	r3, #128	; 0x80
   30f00:	and	r3, r3, #127	; 0x7f
   30f04:	uxtb	r2, r3
   30f08:	mov	r3, #0
   30f0c:	bne	32538 <__assert_fail@plt+0x1f034>
   30f10:	mov	r1, r2
   30f14:	cmp	r4, ip
   30f18:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   30f1c:	add	r3, ip, #1
   30f20:	str	r3, [sp, #384]	; 0x180
   30f24:	ldrb	r3, [ip]
   30f28:	tst	r3, #128	; 0x80
   30f2c:	and	r3, r3, #127	; 0x7f
   30f30:	uxtb	r2, r3
   30f34:	mov	r3, #0
   30f38:	moveq	r6, r2
   30f3c:	bne	32474 <__assert_fail@plt+0x1ef70>
   30f40:	sub	r3, r6, #3
   30f44:	cmp	r3, #37	; 0x25
   30f48:	ldrls	pc, [pc, r3, lsl #2]
   30f4c:	b	309f4 <__assert_fail@plt+0x1d4f0>
   30f50:	andeq	r0, r3, r8, ror #31
   30f54:	andeq	r0, r3, r8, ror #31
   30f58:	andeq	r0, r3, r8, ror #31
   30f5c:	andeq	r0, r3, r8, ror #31
   30f60:	andeq	r0, r3, r8, ror #31
   30f64:	andeq	r0, r3, r8, ror #31
   30f68:	andeq	r0, r3, r8, ror #31
   30f6c:	andeq	r0, r3, r8, ror #31
   30f70:	andeq	r0, r3, r8, ror #31
   30f74:	andeq	r0, r3, r8, ror #31
   30f78:	andeq	r0, r3, r8, ror #31
   30f7c:	andeq	r0, r3, r8, ror #31
   30f80:	andeq	r0, r3, r8, ror #31
   30f84:	strdeq	r0, [r3], -r4
   30f88:	strdeq	r0, [r3], -r4
   30f8c:	strdeq	r0, [r3], -r4
   30f90:	strdeq	r0, [r3], -r4
   30f94:	strdeq	r0, [r3], -r4
   30f98:	strdeq	r0, [r3], -r4
   30f9c:	strdeq	r0, [r3], -r4
   30fa0:	andeq	r0, r3, r8, ror #31
   30fa4:	strdeq	r0, [r3], -r4
   30fa8:	strdeq	r0, [r3], -r4
   30fac:	andeq	r0, r3, r8, ror #31
   30fb0:	strdeq	r0, [r3], -r4
   30fb4:	strdeq	r0, [r3], -r4
   30fb8:	andeq	r0, r3, r8, ror #31
   30fbc:	andeq	r0, r3, r8, ror #31
   30fc0:	andeq	r0, r3, r8, ror #31
   30fc4:	strdeq	r0, [r3], -r4
   30fc8:	strdeq	r0, [r3], -r4
   30fcc:	strdeq	r0, [r3], -r4
   30fd0:	strdeq	r0, [r3], -r4
   30fd4:	strdeq	r0, [r3], -r4
   30fd8:	andeq	r0, r3, r8, ror #31
   30fdc:	andeq	r0, r3, r8, ror #31
   30fe0:	andeq	r0, r3, r8, ror #31
   30fe4:	andeq	r0, r3, r8, ror #31
   30fe8:	ldr	r3, [sp, #152]	; 0x98
   30fec:	mov	r0, r1
   30ff0:	add	r5, r5, #1
   30ff4:	strh	r1, [r3, r8]!
   30ff8:	strh	r6, [r3, #2]
   30ffc:	bl	17efc <__assert_fail@plt+0x49f8>
   31000:	mov	r7, r0
   31004:	mov	r0, r6
   31008:	bl	1748c <__assert_fail@plt+0x3f88>
   3100c:	mov	r2, r7
   31010:	movw	r1, #13412	; 0x3464
   31014:	movt	r1, #4
   31018:	mov	r3, r0
   3101c:	mov	r0, #1
   31020:	bl	13204 <__printf_chk@plt>
   31024:	cmp	r5, r9
   31028:	bge	3103c <__assert_fail@plt+0x1db38>
   3102c:	movw	r1, #8432	; 0x20f0
   31030:	mov	r0, #1
   31034:	movt	r1, #4
   31038:	bl	13204 <__printf_chk@plt>
   3103c:	add	r8, r8, #4
   31040:	b	30edc <__assert_fail@plt+0x1d9d8>
   31044:	movw	r0, #3032	; 0xbd8
   31048:	movt	r0, #4
   3104c:	ldr	sl, [sp, #152]	; 0x98
   31050:	ldr	fp, [sp, #312]	; 0x138
   31054:	ldr	r9, [sp, #316]	; 0x13c
   31058:	ldr	r8, [sp, #336]	; 0x150
   3105c:	bl	12fdc <puts@plt>
   31060:	ldr	r3, [sp, #384]	; 0x180
   31064:	cmp	r4, r3
   31068:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   3106c:	add	r2, r3, #1
   31070:	str	r2, [sp, #384]	; 0x180
   31074:	ldrb	r2, [r3]
   31078:	mov	r7, #0
   3107c:	tst	r2, #128	; 0x80
   31080:	and	r2, r2, #127	; 0x7f
   31084:	uxtb	r6, r2
   31088:	bne	31654 <__assert_fail@plt+0x1e150>
   3108c:	orrs	ip, r6, r7
   31090:	strd	r6, [sp, #152]	; 0x98
   31094:	moveq	r3, #0
   31098:	movne	r3, #1
   3109c:	cmp	r5, #0
   310a0:	movne	r2, #0
   310a4:	andeq	r2, r3, #1
   310a8:	cmp	r2, #0
   310ac:	bne	309f4 <__assert_fail@plt+0x1d4f0>
   310b0:	cmp	r3, #0
   310b4:	ldreq	r3, [sp, #384]	; 0x180
   310b8:	beq	30b24 <__assert_fail@plt+0x1d620>
   310bc:	mov	r6, #0
   310c0:	mov	r7, #0
   310c4:	strd	r6, [sp, #120]	; 0x78
   310c8:	movw	r1, #13420	; 0x346c
   310cc:	mov	r0, #1
   310d0:	movt	r1, #4
   310d4:	ldrd	r2, [sp, #120]	; 0x78
   310d8:	bl	13204 <__printf_chk@plt>
   310dc:	cmp	r5, #0
   310e0:	movne	r6, #0
   310e4:	bne	310fc <__assert_fail@plt+0x1dbf8>
   310e8:	b	31138 <__assert_fail@plt+0x1dc34>
   310ec:	movw	r1, #8432	; 0x20f0
   310f0:	mov	r0, #1
   310f4:	movt	r1, #4
   310f8:	bl	13204 <__printf_chk@plt>
   310fc:	add	r7, sp, #460	; 0x1cc
   31100:	str	sl, [sp]
   31104:	add	r3, r7, r6, lsl #2
   31108:	ldr	r2, [sp, #384]	; 0x180
   3110c:	mov	r0, fp
   31110:	add	r6, r6, #1
   31114:	ldrh	r1, [r3, #2]
   31118:	mov	r3, r4
   3111c:	str	r9, [sp, #8]
   31120:	str	r8, [sp, #12]
   31124:	bl	24bf4 <__assert_fail@plt+0x116f0>
   31128:	cmp	r6, r5
   3112c:	str	r0, [sp, #384]	; 0x180
   31130:	blt	310ec <__assert_fail@plt+0x1dbe8>
   31134:	bne	310fc <__assert_fail@plt+0x1dbf8>
   31138:	mov	r0, #10
   3113c:	bl	131b0 <putchar@plt>
   31140:	ldr	r3, [sp, #384]	; 0x180
   31144:	cmp	r4, r3
   31148:	bls	308bc <__assert_fail@plt+0x1d3b8>
   3114c:	ldrd	r6, [sp, #120]	; 0x78
   31150:	ldrd	r0, [sp, #152]	; 0x98
   31154:	adds	r6, r6, #1
   31158:	adc	r7, r7, #0
   3115c:	strd	r6, [sp, #120]	; 0x78
   31160:	cmp	r7, r1
   31164:	cmpeq	r6, r0
   31168:	bcc	310c8 <__assert_fail@plt+0x1dbc4>
   3116c:	b	30b24 <__assert_fail@plt+0x1d620>
   31170:	str	r2, [sp, #384]	; 0x180
   31174:	b	307dc <__assert_fail@plt+0x1d2d8>
   31178:	add	r8, sp, #1488	; 0x5d0
   3117c:	movw	r3, #64440	; 0xfbb8
   31180:	movt	r3, #65535	; 0xffff
   31184:	mov	r2, #4
   31188:	add	r1, r8, r3
   3118c:	add	r1, r1, r2
   31190:	ldr	r2, [r8, r3]
   31194:	ldr	r3, [r1]
   31198:	mov	r9, r2
   3119c:	str	r2, [r5, #104]	; 0x68
   311a0:	str	r3, [r5, #108]	; 0x6c
   311a4:	mov	r8, r3
   311a8:	b	30834 <__assert_fail@plt+0x1d330>
   311ac:	ldr	r0, [sp, #136]	; 0x88
   311b0:	mov	r1, r7
   311b4:	bl	12f34 <elf_getdata@plt>
   311b8:	cmp	r0, #0
   311bc:	beq	303b8 <__assert_fail@plt+0x1ceb4>
   311c0:	movw	r0, #14276	; 0x37c4
   311c4:	movw	r1, #24
   311c8:	movt	r0, #4
   311cc:	movt	r1, #4
   311d0:	movw	r2, #8881	; 0x22b1
   311d4:	ldr	r3, [pc, #3956]	; 32150 <__assert_fail@plt+0x1ec4c>
   311d8:	bl	13504 <__assert_fail@plt>
   311dc:	str	lr, [sp, #384]	; 0x180
   311e0:	b	308bc <__assert_fail@plt+0x1d3b8>
   311e4:	and	r3, r3, #251	; 0xfb
   311e8:	adds	r6, r6, #8
   311ec:	cmp	r3, #2
   311f0:	bne	30e00 <__assert_fail@plt+0x1d8fc>
   311f4:	uxtb	r2, r2
   311f8:	adds	r6, r6, r2
   311fc:	b	30e00 <__assert_fail@plt+0x1d8fc>
   31200:	movw	r0, #3032	; 0xbd8
   31204:	movt	r0, #4
   31208:	ldr	sl, [sp, #312]	; 0x138
   3120c:	ldr	fp, [sp, #316]	; 0x13c
   31210:	ldr	r9, [sp, #336]	; 0x150
   31214:	ldr	r8, [sp, #340]	; 0x154
   31218:	bl	12fdc <puts@plt>
   3121c:	ldr	r3, [sp, #384]	; 0x180
   31220:	cmp	r4, r3
   31224:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   31228:	add	r2, r3, #1
   3122c:	str	r2, [sp, #384]	; 0x180
   31230:	ldrb	r2, [r3]
   31234:	mov	r7, #0
   31238:	tst	r2, #128	; 0x80
   3123c:	and	r2, r2, #127	; 0x7f
   31240:	uxtb	r6, r2
   31244:	bne	31560 <__assert_fail@plt+0x1e05c>
   31248:	orrs	ip, r6, r7
   3124c:	moveq	r3, #0
   31250:	movne	r3, #1
   31254:	ldr	ip, [sp, #88]	; 0x58
   31258:	cmp	ip, #0
   3125c:	movne	r2, #0
   31260:	andeq	r2, r3, #1
   31264:	cmp	r2, #0
   31268:	bne	309f4 <__assert_fail@plt+0x1d4f0>
   3126c:	cmp	r3, #0
   31270:	beq	3132c <__assert_fail@plt+0x1de28>
   31274:	ldr	r5, [sp, #88]	; 0x58
   31278:	mov	r0, #0
   3127c:	mov	r1, #0
   31280:	strd	r6, [sp, #152]	; 0x98
   31284:	strd	r0, [sp, #120]	; 0x78
   31288:	movw	r1, #13420	; 0x346c
   3128c:	mov	r0, #1
   31290:	movt	r1, #4
   31294:	ldrd	r2, [sp, #120]	; 0x78
   31298:	bl	13204 <__printf_chk@plt>
   3129c:	cmp	r5, #0
   312a0:	movne	r6, #0
   312a4:	bne	312bc <__assert_fail@plt+0x1ddb8>
   312a8:	b	312f8 <__assert_fail@plt+0x1ddf4>
   312ac:	movw	r1, #8432	; 0x20f0
   312b0:	mov	r0, #1
   312b4:	movt	r1, #4
   312b8:	bl	13204 <__printf_chk@plt>
   312bc:	add	r1, sp, #460	; 0x1cc
   312c0:	str	sl, [sp]
   312c4:	add	r3, r1, r6, lsl #2
   312c8:	ldr	r2, [sp, #384]	; 0x180
   312cc:	mov	r0, fp
   312d0:	add	r6, r6, #1
   312d4:	ldrh	r1, [r3, #2]
   312d8:	mov	r3, r4
   312dc:	str	r9, [sp, #8]
   312e0:	str	r8, [sp, #12]
   312e4:	bl	24bf4 <__assert_fail@plt+0x116f0>
   312e8:	cmp	r6, r5
   312ec:	str	r0, [sp, #384]	; 0x180
   312f0:	blt	312ac <__assert_fail@plt+0x1dda8>
   312f4:	bne	312bc <__assert_fail@plt+0x1ddb8>
   312f8:	mov	r0, #10
   312fc:	bl	131b0 <putchar@plt>
   31300:	ldr	r3, [sp, #384]	; 0x180
   31304:	cmp	r4, r3
   31308:	bls	308bc <__assert_fail@plt+0x1d3b8>
   3130c:	ldrd	r6, [sp, #120]	; 0x78
   31310:	ldrd	r0, [sp, #152]	; 0x98
   31314:	adds	r6, r6, #1
   31318:	adc	r7, r7, #0
   3131c:	strd	r6, [sp, #120]	; 0x78
   31320:	cmp	r7, r1
   31324:	cmpeq	r6, r0
   31328:	bcc	31288 <__assert_fail@plt+0x1dd84>
   3132c:	mov	r2, #5
   31330:	movw	r1, #13520	; 0x34d0
   31334:	mov	r0, #0
   31338:	movt	r1, #4
   3133c:	bl	12d84 <dcgettext@plt>
   31340:	add	r8, sp, #1488	; 0x5d0
   31344:	bl	12fdc <puts@plt>
   31348:	ldrb	r5, [sp, #449]	; 0x1c1
   3134c:	movw	r1, #64480	; 0xfbe0
   31350:	movt	r1, #65535	; 0xffff
   31354:	cmp	r5, #0
   31358:	mov	r3, #0
   3135c:	mov	r2, #0
   31360:	strd	r2, [r8, r1]
   31364:	mov	r3, #0
   31368:	str	r3, [sp, #444]	; 0x1bc
   3136c:	beq	319b4 <__assert_fail@plt+0x1e4b0>
   31370:	ldr	r9, [sp, #160]	; 0xa0
   31374:	mov	r5, #1
   31378:	ldr	r7, [sp, #140]	; 0x8c
   3137c:	movw	r6, #37704	; 0x9348
   31380:	ldr	sl, [sp, #384]	; 0x180
   31384:	sub	r8, r9, #1
   31388:	movt	r6, #5
   3138c:	str	r6, [sp, #160]	; 0xa0
   31390:	str	r7, [sp, #88]	; 0x58
   31394:	cmp	r4, sl
   31398:	bls	309b4 <__assert_fail@plt+0x1d4b0>
   3139c:	ldr	r9, [sp, #116]	; 0x74
   313a0:	add	r3, sl, #1
   313a4:	movw	r1, #13600	; 0x3520
   313a8:	mov	r0, #1
   313ac:	movt	r1, #4
   313b0:	ldr	r2, [r9]
   313b4:	str	r3, [sp, #384]	; 0x180
   313b8:	mov	r3, #0
   313bc:	rsb	r2, r2, sl
   313c0:	ldrb	r7, [sl]
   313c4:	bl	13204 <__printf_chk@plt>
   313c8:	ldr	sl, [sp, #100]	; 0x64
   313cc:	cmp	sl, r7
   313d0:	bhi	31938 <__assert_fail@plt+0x1e434>
   313d4:	ldr	r6, [sp, #132]	; 0x84
   313d8:	cmp	r6, #0
   313dc:	beq	308bc <__assert_fail@plt+0x1d3b8>
   313e0:	rsb	r6, sl, r7
   313e4:	ldr	r1, [sp, #132]	; 0x84
   313e8:	mov	r0, r6
   313ec:	bl	3b588 <__assert_fail@plt+0x28084>
   313f0:	mov	r0, r6
   313f4:	ldr	r6, [sp, #144]	; 0x90
   313f8:	ldr	sl, [sp, #444]	; 0x1bc
   313fc:	add	r9, r1, r6
   31400:	ldr	r1, [sp, #132]	; 0x84
   31404:	bl	3b39c <__assert_fail@plt+0x27e98>
   31408:	ldrb	r6, [sp, #449]	; 0x1c1
   3140c:	add	r5, r5, r9
   31410:	mov	r1, r6
   31414:	add	r0, r0, sl
   31418:	str	r0, [sp, #120]	; 0x78
   3141c:	bl	3b39c <__assert_fail@plt+0x27e98>
   31420:	ldrb	lr, [sp, #450]	; 0x1c2
   31424:	movw	r1, #64480	; 0xfbe0
   31428:	add	r3, sp, #1488	; 0x5d0
   3142c:	movt	r1, #65535	; 0xffff
   31430:	ldrd	r2, [r3, r1]
   31434:	mul	r0, lr, r0
   31438:	adds	r2, r2, r0
   3143c:	adc	r3, r3, #0
   31440:	cmp	sl, #0
   31444:	add	sl, sp, #1488	; 0x5d0
   31448:	str	r0, [sp, #440]	; 0x1b8
   3144c:	ldr	r0, [sp, #120]	; 0x78
   31450:	strd	r2, [sl, r1]
   31454:	mov	r1, r6
   31458:	bne	3150c <__assert_fail@plt+0x1e008>
   3145c:	bl	3b588 <__assert_fail@plt+0x28084>
   31460:	adds	r2, r1, #0
   31464:	mov	r3, r1
   31468:	movne	r2, #1
   3146c:	strb	r2, [sp, #448]	; 0x1c0
   31470:	movw	r1, #13612	; 0x352c
   31474:	mov	r2, #5
   31478:	movt	r1, #4
   3147c:	mov	r0, #0
   31480:	str	r3, [sp, #444]	; 0x1bc
   31484:	bl	12d84 <dcgettext@plt>
   31488:	mov	r2, r7
   3148c:	ldr	r3, [sp, #440]	; 0x1b8
   31490:	mov	r1, r0
   31494:	mov	r0, #1
   31498:	bl	13204 <__printf_chk@plt>
   3149c:	add	ip, sp, #1488	; 0x5d0
   314a0:	movw	r3, #64480	; 0xfbe0
   314a4:	movt	r3, #65535	; 0xffff
   314a8:	ldr	r0, [sp, #108]	; 0x6c
   314ac:	mov	r1, #0
   314b0:	ldrd	r6, [ip, r3]
   314b4:	mov	r2, r6
   314b8:	mov	r3, r7
   314bc:	strd	r6, [sp]
   314c0:	bl	27164 <__assert_fail@plt+0x13c60>
   314c4:	ldrb	r0, [sp, #448]	; 0x1c0
   314c8:	cmp	r0, #0
   314cc:	beq	3151c <__assert_fail@plt+0x1e018>
   314d0:	mov	r2, #5
   314d4:	movw	r1, #13648	; 0x3550
   314d8:	mov	r0, #0
   314dc:	movt	r1, #4
   314e0:	bl	12d84 <dcgettext@plt>
   314e4:	ldr	r2, [sp, #444]	; 0x1bc
   314e8:	str	r5, [sp]
   314ec:	mov	r3, r9
   314f0:	mov	r1, r0
   314f4:	mov	r0, #1
   314f8:	bl	13204 <__printf_chk@plt>
   314fc:	ldr	sl, [sp, #384]	; 0x180
   31500:	cmp	r4, sl
   31504:	bhi	3139c <__assert_fail@plt+0x1de98>
   31508:	b	309b4 <__assert_fail@plt+0x1d4b0>
   3150c:	bl	3b588 <__assert_fail@plt+0x28084>
   31510:	mov	r2, #1
   31514:	mov	r3, r1
   31518:	b	3146c <__assert_fail@plt+0x1df68>
   3151c:	mov	r2, #5
   31520:	movw	r1, #13680	; 0x3570
   31524:	movt	r1, #4
   31528:	bl	12d84 <dcgettext@plt>
   3152c:	mov	r2, r9
   31530:	mov	r3, r5
   31534:	mov	r1, r0
   31538:	mov	r0, #1
   3153c:	bl	13204 <__printf_chk@plt>
   31540:	ldr	sl, [sp, #384]	; 0x180
   31544:	b	31394 <__assert_fail@plt+0x1de90>
   31548:	lsl	r3, r2, #2
   3154c:	add	r3, r3, #7
   31550:	adds	r6, r6, r3
   31554:	b	30e00 <__assert_fail@plt+0x1d8fc>
   31558:	adds	r6, r6, #8
   3155c:	b	311f4 <__assert_fail@plt+0x1dcf0>
   31560:	cmp	r4, r3
   31564:	bls	31628 <__assert_fail@plt+0x1e124>
   31568:	rsb	r5, r3, r4
   3156c:	cmp	r5, #9
   31570:	movhi	r5, #10
   31574:	bls	31620 <__assert_fail@plt+0x1e11c>
   31578:	add	r2, r3, #2
   3157c:	str	r2, [sp, #384]	; 0x180
   31580:	ldrb	r3, [r3, #1]
   31584:	and	r2, r3, #127	; 0x7f
   31588:	tst	r3, #128	; 0x80
   3158c:	add	r3, sp, #512	; 0x200
   31590:	uxtb	r2, r2
   31594:	movne	r1, #1
   31598:	lsr	lr, r2, #25
   3159c:	lsl	r0, r2, #7
   315a0:	str	lr, [sp, #276]	; 0x114
   315a4:	str	r0, [sp, #272]	; 0x110
   315a8:	ldrd	r2, [r3, #-240]	; 0xffffff10
   315ac:	orr	r6, r6, r2
   315b0:	orr	r7, r7, r3
   315b4:	beq	31248 <__assert_fail@plt+0x1dd44>
   315b8:	add	r1, r1, #1
   315bc:	cmp	r5, r1
   315c0:	bls	31628 <__assert_fail@plt+0x1e124>
   315c4:	ldr	r3, [sp, #384]	; 0x180
   315c8:	rsb	r0, r1, r1, lsl #3
   315cc:	sub	lr, r0, #32
   315d0:	rsb	ip, r0, #32
   315d4:	add	r2, r3, #1
   315d8:	str	r2, [sp, #384]	; 0x180
   315dc:	ldrb	r3, [r3]
   315e0:	and	r2, r3, #127	; 0x7f
   315e4:	tst	r3, #128	; 0x80
   315e8:	uxtb	r2, r2
   315ec:	lsl	lr, r2, lr
   315f0:	lsl	r0, r2, r0
   315f4:	orr	ip, lr, r2, lsr ip
   315f8:	str	r0, [sp, #208]	; 0xd0
   315fc:	str	ip, [sp, #212]	; 0xd4
   31600:	ldrd	r2, [sp, #208]	; 0xd0
   31604:	orr	r6, r6, r2
   31608:	orr	r7, r7, r3
   3160c:	bne	315b8 <__assert_fail@plt+0x1e0b4>
   31610:	orrs	r3, r7, r6
   31614:	moveq	r3, #0
   31618:	movne	r3, #1
   3161c:	b	31254 <__assert_fail@plt+0x1dd50>
   31620:	cmp	r5, #1
   31624:	bhi	31578 <__assert_fail@plt+0x1e074>
   31628:	ldr	r6, [sp, #88]	; 0x58
   3162c:	cmp	r6, #0
   31630:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   31634:	mvn	r6, #0
   31638:	mvn	r7, #0
   3163c:	b	31274 <__assert_fail@plt+0x1dd70>
   31640:	ldr	r6, [r3]
   31644:	ldr	r7, [r3, #4]
   31648:	rev	r6, r6
   3164c:	rev	r7, r7
   31650:	b	305b0 <__assert_fail@plt+0x1d0ac>
   31654:	cmp	r4, r3
   31658:	bls	326c0 <__assert_fail@plt+0x1f1bc>
   3165c:	rsb	r2, r3, r4
   31660:	cmp	r2, #9
   31664:	movhi	ip, #10
   31668:	bls	326ac <__assert_fail@plt+0x1f1a8>
   3166c:	add	r2, r3, #2
   31670:	str	r2, [sp, #384]	; 0x180
   31674:	ldrb	r3, [r3, #1]
   31678:	and	r2, r3, #127	; 0x7f
   3167c:	tst	r3, #128	; 0x80
   31680:	strne	ip, [sp, #152]	; 0x98
   31684:	uxtb	r2, r2
   31688:	movne	lr, sl
   3168c:	lsl	r1, r2, #7
   31690:	lsr	r0, r2, #25
   31694:	str	r1, [sp, #248]	; 0xf8
   31698:	movne	r1, #1
   3169c:	str	r0, [sp, #252]	; 0xfc
   316a0:	ldrd	r2, [sp, #248]	; 0xf8
   316a4:	orr	r6, r6, r2
   316a8:	orr	r7, r7, r3
   316ac:	bne	32640 <__assert_fail@plt+0x1f13c>
   316b0:	orrs	r3, r7, r6
   316b4:	strd	r6, [sp, #152]	; 0x98
   316b8:	moveq	r3, #0
   316bc:	movne	r3, #1
   316c0:	b	3109c <__assert_fail@plt+0x1db98>
   316c4:	cmp	r4, lr
   316c8:	bls	31930 <__assert_fail@plt+0x1e42c>
   316cc:	cmp	r8, #9
   316d0:	movhi	r8, #10
   316d4:	bls	31928 <__assert_fail@plt+0x1e424>
   316d8:	add	r1, lr, #2
   316dc:	str	r1, [sp, #384]	; 0x180
   316e0:	ldrb	r1, [lr, #1]
   316e4:	and	r0, r1, #127	; 0x7f
   316e8:	tst	r1, #128	; 0x80
   316ec:	add	r1, sp, #512	; 0x200
   316f0:	uxtb	r0, r0
   316f4:	lsr	lr, r0, #25
   316f8:	lsl	r6, r0, #7
   316fc:	str	lr, [sp, #300]	; 0x12c
   31700:	str	r6, [sp, #296]	; 0x128
   31704:	ldrd	r0, [r1, #-216]	; 0xffffff28
   31708:	orr	r3, r3, r1
   3170c:	movne	r1, #1
   31710:	orr	r2, r2, r0
   31714:	movne	lr, r1
   31718:	beq	30c2c <__assert_fail@plt+0x1d728>
   3171c:	add	lr, lr, #1
   31720:	cmp	r8, lr
   31724:	bls	31930 <__assert_fail@plt+0x1e42c>
   31728:	ldr	r1, [sp, #384]	; 0x180
   3172c:	rsb	r6, lr, lr, lsl #3
   31730:	sub	r9, r6, #32
   31734:	rsb	r7, r6, #32
   31738:	add	r0, r1, #1
   3173c:	str	r0, [sp, #384]	; 0x180
   31740:	ldrb	r1, [r1]
   31744:	and	r0, r1, #127	; 0x7f
   31748:	tst	r1, #128	; 0x80
   3174c:	uxtb	r0, r0
   31750:	lsl	r9, r0, r9
   31754:	lsl	r6, r0, r6
   31758:	orr	r7, r9, r0, lsr r7
   3175c:	str	r6, [sp, #224]	; 0xe0
   31760:	str	r7, [sp, #228]	; 0xe4
   31764:	ldrd	r6, [sp, #224]	; 0xe0
   31768:	orr	r2, r2, r6
   3176c:	orr	r3, r3, r7
   31770:	beq	30c2c <__assert_fail@plt+0x1d728>
   31774:	b	3171c <__assert_fail@plt+0x1e218>
   31778:	cmp	r4, r6
   3177c:	bls	31920 <__assert_fail@plt+0x1e41c>
   31780:	cmp	r1, #9
   31784:	movhi	r5, #10
   31788:	bls	31914 <__assert_fail@plt+0x1e410>
   3178c:	add	lr, r6, #2
   31790:	str	lr, [sp, #384]	; 0x180
   31794:	ldrb	r1, [r6, #1]
   31798:	and	r0, r1, #127	; 0x7f
   3179c:	tst	r1, #128	; 0x80
   317a0:	add	r1, sp, #512	; 0x200
   317a4:	uxtb	r0, r0
   317a8:	movne	r6, #1
   317ac:	lsr	r7, r0, #25
   317b0:	lsl	r8, r0, #7
   317b4:	str	r7, [sp, #292]	; 0x124
   317b8:	str	r8, [sp, #288]	; 0x120
   317bc:	ldrd	r0, [r1, #-224]	; 0xffffff20
   317c0:	orr	r2, r2, r0
   317c4:	orr	r3, r3, r1
   317c8:	bne	3182c <__assert_fail@plt+0x1e328>
   317cc:	mov	r5, r2
   317d0:	b	30bfc <__assert_fail@plt+0x1d6f8>
   317d4:	cmp	r4, lr
   317d8:	bls	318fc <__assert_fail@plt+0x1e3f8>
   317dc:	cmp	r1, #9
   317e0:	movhi	lr, #10
   317e4:	bls	318f0 <__assert_fail@plt+0x1e3ec>
   317e8:	add	r6, r0, #3
   317ec:	str	r6, [sp, #384]	; 0x180
   317f0:	ldrb	r1, [r0, #2]
   317f4:	and	r0, r1, #127	; 0x7f
   317f8:	tst	r1, #128	; 0x80
   317fc:	add	r1, sp, #512	; 0x200
   31800:	uxtb	r0, r0
   31804:	lsr	r8, r0, #25
   31808:	lsl	r9, r0, #7
   3180c:	str	r8, [sp, #284]	; 0x11c
   31810:	str	r9, [sp, #280]	; 0x118
   31814:	ldrd	r0, [r1, #-232]	; 0xffffff18
   31818:	orr	r2, r2, r0
   3181c:	orr	r3, r3, r1
   31820:	bne	31884 <__assert_fail@plt+0x1e380>
   31824:	mov	ip, r2
   31828:	b	30bd0 <__assert_fail@plt+0x1d6cc>
   3182c:	add	r6, r6, #1
   31830:	cmp	r5, r6
   31834:	bls	31920 <__assert_fail@plt+0x1e41c>
   31838:	add	lr, lr, #1
   3183c:	str	lr, [sp, #384]	; 0x180
   31840:	rsb	r7, r6, r6, lsl #3
   31844:	ldrb	r1, [lr, #-1]
   31848:	sub	r9, r7, #32
   3184c:	rsb	r8, r7, #32
   31850:	and	r0, r1, #127	; 0x7f
   31854:	tst	r1, #128	; 0x80
   31858:	uxtb	r0, r0
   3185c:	lsl	r9, r0, r9
   31860:	lsl	r7, r0, r7
   31864:	orr	r8, r9, r0, lsr r8
   31868:	str	r7, [sp, #216]	; 0xd8
   3186c:	str	r8, [sp, #220]	; 0xdc
   31870:	ldrd	r8, [sp, #216]	; 0xd8
   31874:	orr	r2, r2, r8
   31878:	orr	r3, r3, r9
   3187c:	beq	317cc <__assert_fail@plt+0x1e2c8>
   31880:	b	3182c <__assert_fail@plt+0x1e328>
   31884:	add	r7, sp, #512	; 0x200
   31888:	mov	ip, #1
   3188c:	str	lr, [sp, #152]	; 0x98
   31890:	ldrd	r8, [r7, #-192]	; 0xffffff40
   31894:	ldr	lr, [sp, #152]	; 0x98
   31898:	add	ip, ip, #1
   3189c:	cmp	ip, lr
   318a0:	bcs	31904 <__assert_fail@plt+0x1e400>
   318a4:	add	r6, r6, #1
   318a8:	str	r6, [sp, #384]	; 0x180
   318ac:	rsb	r5, ip, ip, lsl #3
   318b0:	ldrb	r1, [r6, #-1]
   318b4:	sub	r8, r5, #32
   318b8:	rsb	r7, r5, #32
   318bc:	str	r8, [sp, #120]	; 0x78
   318c0:	and	r0, r1, #127	; 0x7f
   318c4:	tst	r1, #128	; 0x80
   318c8:	uxtb	r0, r0
   318cc:	lsl	r9, r0, r8
   318d0:	lsl	r8, r0, r5
   318d4:	orr	r9, r9, r0, lsr r7
   318d8:	orr	r2, r2, r8
   318dc:	orr	r3, r3, r9
   318e0:	bne	31894 <__assert_fail@plt+0x1e390>
   318e4:	add	ip, sp, #512	; 0x200
   318e8:	strd	r8, [ip, #-192]	; 0xffffff40
   318ec:	b	31824 <__assert_fail@plt+0x1e320>
   318f0:	cmp	r1, #1
   318f4:	movne	lr, r1
   318f8:	bne	317e8 <__assert_fail@plt+0x1e2e4>
   318fc:	mvn	ip, #0
   31900:	b	30bd0 <__assert_fail@plt+0x1d6cc>
   31904:	add	r0, sp, #512	; 0x200
   31908:	mvn	ip, #0
   3190c:	strd	r8, [r0, #-192]	; 0xffffff40
   31910:	b	30bd0 <__assert_fail@plt+0x1d6cc>
   31914:	cmp	r1, #1
   31918:	movne	r5, r1
   3191c:	bne	3178c <__assert_fail@plt+0x1e288>
   31920:	mvn	r5, #0
   31924:	b	30bfc <__assert_fail@plt+0x1d6f8>
   31928:	cmp	r8, #1
   3192c:	bne	316d8 <__assert_fail@plt+0x1e1d4>
   31930:	mvn	r2, #0
   31934:	b	30c2c <__assert_fail@plt+0x1d728>
   31938:	cmp	r7, #0
   3193c:	bne	31c48 <__assert_fail@plt+0x1e744>
   31940:	ldr	r3, [sp, #384]	; 0x180
   31944:	add	r2, r3, #2
   31948:	cmp	r4, r2
   3194c:	bcc	308bc <__assert_fail@plt+0x1d3b8>
   31950:	add	r1, r3, #1
   31954:	str	r1, [sp, #384]	; 0x180
   31958:	ldrb	r6, [r3]
   3195c:	add	r1, r1, r6
   31960:	cmp	r4, r1
   31964:	bcc	308bc <__assert_fail@plt+0x1d3b8>
   31968:	str	r2, [sp, #384]	; 0x180
   3196c:	mov	r0, r7
   31970:	mov	r2, #5
   31974:	movw	r1, #13700	; 0x3584
   31978:	movt	r1, #4
   3197c:	ldrb	r7, [r3, #1]
   31980:	bl	12d84 <dcgettext@plt>
   31984:	mov	r2, r7
   31988:	mov	r1, r0
   3198c:	mov	r0, #1
   31990:	bl	13204 <__printf_chk@plt>
   31994:	sub	r3, r7, #1
   31998:	cmp	r3, #3
   3199c:	ldrls	pc, [pc, r3, lsl #2]
   319a0:	b	31c1c <__assert_fail@plt+0x1e718>
   319a4:	ldrdeq	r1, [r3], -r0
   319a8:	andeq	r1, r3, r0, lsl #22
   319ac:	andeq	r1, r3, ip, lsr sl
   319b0:	andeq	r1, r3, r4, ror #19
   319b4:	mov	r2, #5
   319b8:	movw	r1, #13548	; 0x34ec
   319bc:	mov	r0, r5
   319c0:	movt	r1, #4
   319c4:	bl	12d84 <dcgettext@plt>
   319c8:	mov	r1, r5
   319cc:	mov	sl, r4
   319d0:	mov	r2, r0
   319d4:	mov	r0, r5
   319d8:	bl	12f70 <error@plt>
   319dc:	str	r4, [sp, #384]	; 0x180
   319e0:	b	309b4 <__assert_fail@plt+0x1d4b0>
   319e4:	ldrb	r6, [r8, r7]
   319e8:	cmp	r6, #1
   319ec:	bne	308bc <__assert_fail@plt+0x1d3b8>
   319f0:	ldr	r3, [sp, #384]	; 0x180
   319f4:	rsb	r3, r3, r4
   319f8:	cmp	r3, #0
   319fc:	ble	308bc <__assert_fail@plt+0x1d3b8>
   31a00:	add	r0, sp, #384	; 0x180
   31a04:	mov	r1, r4
   31a08:	bl	142b8 <__assert_fail@plt+0xdb4>
   31a0c:	movw	r1, #13824	; 0x3600
   31a10:	movt	r1, #4
   31a14:	mov	r7, r0
   31a18:	mov	r0, #0
   31a1c:	mov	r2, #5
   31a20:	bl	12d84 <dcgettext@plt>
   31a24:	mov	r2, r7
   31a28:	mov	r1, r0
   31a2c:	mov	r0, r6
   31a30:	bl	13204 <__printf_chk@plt>
   31a34:	ldr	sl, [sp, #384]	; 0x180
   31a38:	b	31394 <__assert_fail@plt+0x1de90>
   31a3c:	ldr	r6, [sp, #384]	; 0x180
   31a40:	mov	r1, #0
   31a44:	rsb	r2, r6, r4
   31a48:	mov	r0, r6
   31a4c:	bl	13270 <memchr@plt>
   31a50:	cmp	r0, #0
   31a54:	beq	308bc <__assert_fail@plt+0x1d3b8>
   31a58:	add	r3, r0, #1
   31a5c:	str	r3, [sp, #384]	; 0x180
   31a60:	rsb	r3, r3, r4
   31a64:	cmp	r3, #0
   31a68:	ble	308bc <__assert_fail@plt+0x1d3b8>
   31a6c:	add	r7, sp, #384	; 0x180
   31a70:	mov	r1, r4
   31a74:	mov	r0, r7
   31a78:	bl	142b8 <__assert_fail@plt+0xdb4>
   31a7c:	ldr	r3, [sp, #384]	; 0x180
   31a80:	rsb	r3, r3, r4
   31a84:	cmp	r3, #0
   31a88:	mov	r9, r0
   31a8c:	ble	308bc <__assert_fail@plt+0x1d3b8>
   31a90:	mov	r0, r7
   31a94:	mov	r1, r4
   31a98:	bl	142b8 <__assert_fail@plt+0xdb4>
   31a9c:	ldr	r3, [sp, #384]	; 0x180
   31aa0:	rsb	r3, r3, r4
   31aa4:	cmp	r3, #0
   31aa8:	strd	r0, [sp, #120]	; 0x78
   31aac:	ble	308bc <__assert_fail@plt+0x1d3b8>
   31ab0:	mov	r0, r7
   31ab4:	mov	r1, r4
   31ab8:	bl	142b8 <__assert_fail@plt+0xdb4>
   31abc:	mov	r2, #5
   31ac0:	strd	r0, [sp, #152]	; 0x98
   31ac4:	movw	r1, #13764	; 0x35c4
   31ac8:	mov	r0, #0
   31acc:	movt	r1, #4
   31ad0:	bl	12d84 <dcgettext@plt>
   31ad4:	ldrd	r2, [sp, #152]	; 0x98
   31ad8:	str	r6, [sp, #16]
   31adc:	strd	r2, [sp, #8]
   31ae0:	ldrd	r2, [sp, #120]	; 0x78
   31ae4:	strd	r2, [sp]
   31ae8:	mov	r2, r9
   31aec:	mov	r1, r0
   31af0:	mov	r0, #1
   31af4:	bl	13204 <__printf_chk@plt>
   31af8:	ldr	sl, [sp, #384]	; 0x180
   31afc:	b	31394 <__assert_fail@plt+0x1de90>
   31b00:	ldr	r3, [sp, #384]	; 0x180
   31b04:	mov	r2, #0
   31b08:	ldr	r9, [sp, #96]	; 0x60
   31b0c:	str	r2, [sp, #444]	; 0x1bc
   31b10:	rsb	r2, r3, r4
   31b14:	cmp	r9, r2
   31b18:	bhi	308bc <__assert_fail@plt+0x1d3b8>
   31b1c:	cmp	r9, #4
   31b20:	ldrb	r2, [fp, #84]	; 0x54
   31b24:	beq	31bac <__assert_fail@plt+0x1e6a8>
   31b28:	cmp	r2, #0
   31b2c:	ldreq	r1, [r3]
   31b30:	ldreq	r2, [r3, #4]
   31b34:	ldrne	r2, [r3]
   31b38:	ldrne	r1, [r3, #4]
   31b3c:	revne	r2, r2
   31b40:	revne	r1, r1
   31b44:	add	r3, r3, #8
   31b48:	str	r1, [sp, #432]	; 0x1b0
   31b4c:	str	r3, [sp, #384]	; 0x180
   31b50:	str	r2, [sp, #436]	; 0x1b4
   31b54:	mov	r2, #5
   31b58:	movw	r1, #13744	; 0x35b0
   31b5c:	mov	r0, #0
   31b60:	movt	r1, #4
   31b64:	bl	12d84 <dcgettext@plt>
   31b68:	add	sl, sp, #1488	; 0x5d0
   31b6c:	mov	r1, r0
   31b70:	mov	r0, #1
   31b74:	bl	13204 <__printf_chk@plt>
   31b78:	movw	r3, #64480	; 0xfbe0
   31b7c:	movt	r3, #65535	; 0xffff
   31b80:	ldr	r0, [sp, #108]	; 0x6c
   31b84:	mov	r1, #0
   31b88:	ldrd	r6, [sl, r3]
   31b8c:	mov	r2, r6
   31b90:	mov	r3, r7
   31b94:	strd	r6, [sp]
   31b98:	bl	27164 <__assert_fail@plt+0x13c60>
   31b9c:	mov	r0, #10
   31ba0:	bl	131b0 <putchar@plt>
   31ba4:	ldr	sl, [sp, #384]	; 0x180
   31ba8:	b	31394 <__assert_fail@plt+0x1de90>
   31bac:	cmp	r2, #0
   31bb0:	ldr	r2, [r3]
   31bb4:	revne	r2, r2
   31bb8:	add	r3, r3, #4
   31bbc:	str	r2, [sp, #432]	; 0x1b0
   31bc0:	str	r3, [sp, #384]	; 0x180
   31bc4:	mov	r3, #0
   31bc8:	str	r3, [sp, #436]	; 0x1b4
   31bcc:	b	31b54 <__assert_fail@plt+0x1e650>
   31bd0:	mov	r2, #5
   31bd4:	movw	r1, #13724	; 0x359c
   31bd8:	mov	r0, #0
   31bdc:	movt	r1, #4
   31be0:	bl	12d84 <dcgettext@plt>
   31be4:	ldr	r6, [sp, #140]	; 0x8c
   31be8:	add	r7, sp, #1488	; 0x5d0
   31bec:	mov	r5, #1
   31bf0:	str	r6, [sp, #88]	; 0x58
   31bf4:	bl	12fdc <puts@plt>
   31bf8:	movw	r1, #64480	; 0xfbe0
   31bfc:	movt	r1, #65535	; 0xffff
   31c00:	mov	r3, #0
   31c04:	mov	r2, #0
   31c08:	ldr	sl, [sp, #384]	; 0x180
   31c0c:	strd	r2, [r7, r1]
   31c10:	mov	r3, #0
   31c14:	str	r3, [sp, #444]	; 0x1bc
   31c18:	b	31394 <__assert_fail@plt+0x1de90>
   31c1c:	mov	r2, #5
   31c20:	movw	r1, #13852	; 0x361c
   31c24:	mov	r0, #0
   31c28:	movt	r1, #4
   31c2c:	bl	12d84 <dcgettext@plt>
   31c30:	sub	r6, r6, #1
   31c34:	bl	12fdc <puts@plt>
   31c38:	ldr	sl, [sp, #384]	; 0x180
   31c3c:	add	sl, sl, r6
   31c40:	str	sl, [sp, #384]	; 0x180
   31c44:	b	31394 <__assert_fail@plt+0x1de90>
   31c48:	cmp	r7, #12
   31c4c:	bhi	322bc <__assert_fail@plt+0x1edb8>
   31c50:	sub	r3, r7, #1
   31c54:	cmp	r3, #11
   31c58:	ldrls	pc, [pc, r3, lsl #2]
   31c5c:	b	31a34 <__assert_fail@plt+0x1e530>
   31c60:	andeq	r2, r3, r0, lsr #5
   31c64:	andeq	r2, r3, r0, asr #3
   31c68:	andeq	r2, r3, r4, asr r1
   31c6c:	andeq	r2, r3, r0, lsl #2
   31c70:	andeq	r2, r3, r4, lsr #1
   31c74:	andeq	r2, r3, r0, rrx
   31c78:	andeq	r2, r3, r0, asr #32
   31c7c:	muleq	r3, ip, pc	; <UNPREDICTABLE>
   31c80:	ldrdeq	r1, [r3], -r0
   31c84:			; <UNDEFINED> instruction: 0x00031eb0
   31c88:	muleq	r3, r0, lr
   31c8c:	andeq	r1, r3, r4, asr sp
   31c90:	cmp	r4, ip
   31c94:	bls	31d9c <__assert_fail@plt+0x1e898>
   31c98:	rsb	r0, ip, r4
   31c9c:	cmp	r0, #9
   31ca0:	movhi	lr, #10
   31ca4:	bls	31d90 <__assert_fail@plt+0x1e88c>
   31ca8:	add	r0, ip, #2
   31cac:	str	r0, [sp, #384]	; 0x180
   31cb0:	ldrb	r0, [ip, #1]
   31cb4:	and	sl, r0, #127	; 0x7f
   31cb8:	tst	r0, #128	; 0x80
   31cbc:	strne	lr, [sp, #340]	; 0x154
   31cc0:	uxtb	sl, sl
   31cc4:	lsl	r0, sl, #7
   31cc8:	lsr	ip, sl, #25
   31ccc:	str	r0, [sp, #240]	; 0xf0
   31cd0:	movne	r0, #1
   31cd4:	str	ip, [sp, #244]	; 0xf4
   31cd8:	ldrd	sl, [sp, #240]	; 0xf0
   31cdc:	orr	sl, sl, r2
   31ce0:	orr	fp, fp, r3
   31ce4:	bne	31da8 <__assert_fail@plt+0x1e8a4>
   31ce8:	uxth	r3, sl
   31cec:	b	30d44 <__assert_fail@plt+0x1d840>
   31cf0:	cmp	r4, r0
   31cf4:	bls	31e7c <__assert_fail@plt+0x1e978>
   31cf8:	rsb	r1, r0, r4
   31cfc:	cmp	r1, #9
   31d00:	movhi	sl, #10
   31d04:	bls	31e70 <__assert_fail@plt+0x1e96c>
   31d08:	add	ip, r0, #2
   31d0c:	str	ip, [sp, #384]	; 0x180
   31d10:	ldrb	r1, [r0, #1]
   31d14:	and	r0, r1, #127	; 0x7f
   31d18:	tst	r1, #128	; 0x80
   31d1c:	strne	sl, [sp, #340]	; 0x154
   31d20:	uxtb	r0, r0
   31d24:	movne	lr, #1
   31d28:	lsr	r9, r0, #25
   31d2c:	lsl	fp, r0, #7
   31d30:	str	r9, [sp, #236]	; 0xec
   31d34:	movne	r9, r7
   31d38:	str	fp, [sp, #232]	; 0xe8
   31d3c:	ldrd	r0, [sp, #232]	; 0xe8
   31d40:	orr	r0, r0, r2
   31d44:	orr	r1, r1, r3
   31d48:	bne	31e10 <__assert_fail@plt+0x1e90c>
   31d4c:	uxth	r1, r0
   31d50:	b	30d14 <__assert_fail@plt+0x1d810>
   31d54:	ldrb	r6, [r8, r7]
   31d58:	cmp	r6, #1
   31d5c:	bne	308bc <__assert_fail@plt+0x1d3b8>
   31d60:	ldr	r3, [sp, #384]	; 0x180
   31d64:	rsb	r3, r3, r4
   31d68:	cmp	r3, #0
   31d6c:	ble	308bc <__assert_fail@plt+0x1d3b8>
   31d70:	add	r0, sp, #384	; 0x180
   31d74:	mov	r1, r4
   31d78:	bl	142b8 <__assert_fail@plt+0xdb4>
   31d7c:	movw	r1, #14188	; 0x376c
   31d80:	movt	r1, #4
   31d84:	mov	r7, r0
   31d88:	mov	r0, #0
   31d8c:	b	31a1c <__assert_fail@plt+0x1e518>
   31d90:	cmp	r0, #1
   31d94:	movhi	lr, r0
   31d98:	bhi	31ca8 <__assert_fail@plt+0x1e7a4>
   31d9c:	movw	sl, #65535	; 0xffff
   31da0:	mov	r3, sl
   31da4:	b	30d44 <__assert_fail@plt+0x1d840>
   31da8:	ldr	r3, [sp, #340]	; 0x154
   31dac:	add	r0, r0, #1
   31db0:	cmp	r0, r3
   31db4:	bcs	31d9c <__assert_fail@plt+0x1e898>
   31db8:	ldr	r3, [sp, #384]	; 0x180
   31dbc:	rsb	ip, r0, r0, lsl #3
   31dc0:	sub	r9, ip, #32
   31dc4:	rsb	lr, ip, #32
   31dc8:	add	r2, r3, #1
   31dcc:	str	r2, [sp, #384]	; 0x180
   31dd0:	ldrb	r3, [r3]
   31dd4:	and	r2, r3, #127	; 0x7f
   31dd8:	tst	r3, #128	; 0x80
   31ddc:	uxtb	r2, r2
   31de0:	lsl	r9, r2, r9
   31de4:	lsl	ip, r2, ip
   31de8:	orr	r9, r9, r2, lsr lr
   31dec:	str	ip, [sp, #184]	; 0xb8
   31df0:	str	r9, [sp, #188]	; 0xbc
   31df4:	ldrd	r2, [sp, #184]	; 0xb8
   31df8:	orr	sl, sl, r2
   31dfc:	orr	fp, fp, r3
   31e00:	bne	31da8 <__assert_fail@plt+0x1e8a4>
   31e04:	uxth	r3, sl
   31e08:	mov	sl, r3
   31e0c:	b	30d44 <__assert_fail@plt+0x1d840>
   31e10:	ldr	r2, [sp, #340]	; 0x154
   31e14:	add	lr, lr, #1
   31e18:	cmp	lr, r2
   31e1c:	bcs	31e84 <__assert_fail@plt+0x1e980>
   31e20:	add	ip, ip, #1
   31e24:	str	ip, [sp, #384]	; 0x180
   31e28:	rsb	r7, lr, lr, lsl #3
   31e2c:	ldrb	r3, [ip, #-1]
   31e30:	sub	fp, r7, #32
   31e34:	rsb	sl, r7, #32
   31e38:	and	r2, r3, #127	; 0x7f
   31e3c:	tst	r3, #128	; 0x80
   31e40:	uxtb	r2, r2
   31e44:	lsl	fp, r2, fp
   31e48:	lsl	r7, r2, r7
   31e4c:	orr	fp, fp, r2, lsr sl
   31e50:	str	r7, [sp, #176]	; 0xb0
   31e54:	str	fp, [sp, #180]	; 0xb4
   31e58:	ldrd	sl, [sp, #176]	; 0xb0
   31e5c:	orr	r0, r0, sl
   31e60:	orr	r1, r1, fp
   31e64:	bne	31e10 <__assert_fail@plt+0x1e90c>
   31e68:	mov	r7, r9
   31e6c:	b	31d4c <__assert_fail@plt+0x1e848>
   31e70:	cmp	r1, #1
   31e74:	movhi	sl, r1
   31e78:	bhi	31d08 <__assert_fail@plt+0x1e804>
   31e7c:	movw	r1, #65535	; 0xffff
   31e80:	b	30d14 <__assert_fail@plt+0x1d810>
   31e84:	mov	r7, r9
   31e88:	movw	r1, #65535	; 0xffff
   31e8c:	b	30d14 <__assert_fail@plt+0x1d810>
   31e90:	mov	r2, #5
   31e94:	movw	r1, #14160	; 0x3750
   31e98:	mov	r0, #0
   31e9c:	movt	r1, #4
   31ea0:	bl	12d84 <dcgettext@plt>
   31ea4:	bl	12fdc <puts@plt>
   31ea8:	ldr	sl, [sp, #384]	; 0x180
   31eac:	b	31394 <__assert_fail@plt+0x1de90>
   31eb0:	mov	r2, #5
   31eb4:	movw	r1, #14136	; 0x3738
   31eb8:	mov	r0, #0
   31ebc:	movt	r1, #4
   31ec0:	bl	12d84 <dcgettext@plt>
   31ec4:	bl	12fdc <puts@plt>
   31ec8:	ldr	sl, [sp, #384]	; 0x180
   31ecc:	b	31394 <__assert_fail@plt+0x1de90>
   31ed0:	ldrb	r3, [r8, r7]
   31ed4:	cmp	r3, #1
   31ed8:	bne	308bc <__assert_fail@plt+0x1d3b8>
   31edc:	ldr	r1, [sp, #384]	; 0x180
   31ee0:	rsb	r3, r1, r4
   31ee4:	cmp	r3, #1
   31ee8:	ble	308bc <__assert_fail@plt+0x1d3b8>
   31eec:	ldrb	r3, [fp, #84]	; 0x54
   31ef0:	movw	r6, #64480	; 0xfbe0
   31ef4:	movt	r6, #65535	; 0xffff
   31ef8:	add	r1, r1, #2
   31efc:	cmp	r3, #0
   31f00:	add	sl, sp, #1488	; 0x5d0
   31f04:	mov	r7, #0
   31f08:	ldrhne	r3, [r1, #-2]
   31f0c:	ldrheq	r9, [r1, #-2]
   31f10:	str	r1, [sp, #384]	; 0x180
   31f14:	lslne	r2, r3, #8
   31f18:	str	r7, [sp, #444]	; 0x1bc
   31f1c:	orrne	r3, r2, r3, lsr #8
   31f20:	uxthne	r9, r3
   31f24:	mov	r3, #0
   31f28:	uxth	r2, r9
   31f2c:	strd	r2, [sp, #120]	; 0x78
   31f30:	add	r3, sp, #1488	; 0x5d0
   31f34:	ldrd	r2, [r3, r6]
   31f38:	strd	r2, [sp, #56]	; 0x38
   31f3c:	ldrd	r0, [sp, #56]	; 0x38
   31f40:	ldrd	r2, [sp, #120]	; 0x78
   31f44:	adds	r2, r2, r0
   31f48:	mov	r0, r7
   31f4c:	adc	r3, r3, r1
   31f50:	movw	r1, #14096	; 0x3710
   31f54:	strd	r2, [sl, r6]
   31f58:	movt	r1, #4
   31f5c:	mov	r2, #5
   31f60:	bl	12d84 <dcgettext@plt>
   31f64:	mov	r2, r9
   31f68:	mov	r1, r0
   31f6c:	mov	r0, #1
   31f70:	bl	13204 <__printf_chk@plt>
   31f74:	add	r1, sp, #1488	; 0x5d0
   31f78:	ldrd	r0, [r1, r6]
   31f7c:	strd	r0, [sp]
   31f80:	mov	r1, r7
   31f84:	ldr	r0, [sp, #108]	; 0x6c
   31f88:	ldrd	r2, [sp]
   31f8c:	bl	27164 <__assert_fail@plt+0x13c60>
   31f90:	mov	r0, #10
   31f94:	bl	131b0 <putchar@plt>
   31f98:	b	31a34 <__assert_fail@plt+0x1e530>
   31f9c:	ldr	r7, [sp, #132]	; 0x84
   31fa0:	cmp	r7, #0
   31fa4:	beq	308bc <__assert_fail@plt+0x1d3b8>
   31fa8:	ldr	r9, [sp, #100]	; 0x64
   31fac:	mov	r1, r7
   31fb0:	add	sl, sp, #1488	; 0x5d0
   31fb4:	rsb	r0, r9, #255	; 0xff
   31fb8:	bl	3b5a8 <__assert_fail@plt+0x280a4>
   31fbc:	add	ip, sp, #432	; 0x1b0
   31fc0:	bl	137d4 <__assert_fail@plt+0x2d0>
   31fc4:	mov	r2, #5
   31fc8:	movw	r1, #14060	; 0x36ec
   31fcc:	mov	r0, #0
   31fd0:	movt	r1, #4
   31fd4:	bl	12d84 <dcgettext@plt>
   31fd8:	ldr	r2, [sp, #440]	; 0x1b8
   31fdc:	mov	r1, r0
   31fe0:	mov	r0, #1
   31fe4:	bl	13204 <__printf_chk@plt>
   31fe8:	movw	r3, #64480	; 0xfbe0
   31fec:	movt	r3, #65535	; 0xffff
   31ff0:	ldr	r0, [sp, #108]	; 0x6c
   31ff4:	mov	r1, #0
   31ff8:	ldrd	r6, [sl, r3]
   31ffc:	mov	r3, r7
   32000:	mov	r2, r6
   32004:	strd	r6, [sp]
   32008:	bl	27164 <__assert_fail@plt+0x13c60>
   3200c:	ldrb	r3, [sp, #448]	; 0x1c0
   32010:	cmp	r3, #0
   32014:	beq	31f90 <__assert_fail@plt+0x1ea8c>
   32018:	mov	r2, #5
   3201c:	movw	r1, #13904	; 0x3650
   32020:	mov	r0, #0
   32024:	movt	r1, #4
   32028:	bl	12d84 <dcgettext@plt>
   3202c:	ldr	r2, [sp, #444]	; 0x1bc
   32030:	mov	r1, r0
   32034:	mov	r0, #1
   32038:	bl	13204 <__printf_chk@plt>
   3203c:	b	31f90 <__assert_fail@plt+0x1ea8c>
   32040:	mov	r2, #5
   32044:	movw	r1, #14036	; 0x36d4
   32048:	mov	r0, #0
   3204c:	movt	r1, #4
   32050:	bl	12d84 <dcgettext@plt>
   32054:	bl	12fdc <puts@plt>
   32058:	ldr	sl, [sp, #384]	; 0x180
   3205c:	b	31394 <__assert_fail@plt+0x1de90>
   32060:	ldr	r6, [sp, #88]	; 0x58
   32064:	mov	r2, #5
   32068:	movw	r1, #14008	; 0x36b8
   3206c:	mov	r0, #0
   32070:	rsb	r3, r6, #1
   32074:	movt	r1, #4
   32078:	uxtb	r3, r3
   3207c:	str	r3, [sp, #88]	; 0x58
   32080:	bl	12d84 <dcgettext@plt>
   32084:	ldr	r3, [sp, #88]	; 0x58
   32088:	movw	r2, #14028	; 0x36cc
   3208c:	movt	r2, #4
   32090:	mov	r1, r0
   32094:	mov	r0, #1
   32098:	bl	13204 <__printf_chk@plt>
   3209c:	ldr	sl, [sp, #384]	; 0x180
   320a0:	b	31394 <__assert_fail@plt+0x1de90>
   320a4:	ldrb	r6, [r8, r7]
   320a8:	cmp	r6, #1
   320ac:	bne	308bc <__assert_fail@plt+0x1d3b8>
   320b0:	ldr	r3, [sp, #384]	; 0x180
   320b4:	rsb	r3, r3, r4
   320b8:	cmp	r3, #0
   320bc:	ble	308bc <__assert_fail@plt+0x1d3b8>
   320c0:	add	r0, sp, #384	; 0x180
   320c4:	mov	r1, r4
   320c8:	bl	142b8 <__assert_fail@plt+0xdb4>
   320cc:	mov	r2, #5
   320d0:	movw	r1, #13984	; 0x36a0
   320d4:	movt	r1, #4
   320d8:	mov	r7, r0
   320dc:	mov	r0, #0
   320e0:	bl	12d84 <dcgettext@plt>
   320e4:	mov	r2, r7
   320e8:	mov	r3, #0
   320ec:	mov	r1, r0
   320f0:	mov	r0, r6
   320f4:	bl	13204 <__printf_chk@plt>
   320f8:	ldr	sl, [sp, #384]	; 0x180
   320fc:	b	31394 <__assert_fail@plt+0x1de90>
   32100:	ldr	r3, [sp, #384]	; 0x180
   32104:	rsb	r3, r3, r4
   32108:	cmp	r3, #0
   3210c:	ble	308bc <__assert_fail@plt+0x1d3b8>
   32110:	add	r0, sp, #384	; 0x180
   32114:	mov	r1, r4
   32118:	bl	142b8 <__assert_fail@plt+0xdb4>
   3211c:	mov	r2, #5
   32120:	movw	r1, #13964	; 0x368c
   32124:	movt	r1, #4
   32128:	mov	r6, r0
   3212c:	mov	r0, #0
   32130:	bl	12d84 <dcgettext@plt>
   32134:	mov	r2, r6
   32138:	mov	r3, #0
   3213c:	mov	r1, r0
   32140:	mov	r0, #1
   32144:	bl	13204 <__printf_chk@plt>
   32148:	ldr	sl, [sp, #384]	; 0x180
   3214c:	b	31394 <__assert_fail@plt+0x1de90>
   32150:			; <UNDEFINED> instruction: 0x0003cdb0
   32154:	ldr	r3, [sp, #384]	; 0x180
   32158:	rsb	r2, r3, r4
   3215c:	cmp	r2, #0
   32160:	ble	308bc <__assert_fail@plt+0x1d3b8>
   32164:	add	r1, r3, #1
   32168:	str	r1, [sp, #384]	; 0x180
   3216c:	ldrb	r1, [r3]
   32170:	uxtb	r6, r1
   32174:	tst	r6, #128	; 0x80
   32178:	bne	32224 <__assert_fail@plt+0x1ed20>
   3217c:	sbfx	r6, r6, #0, #7
   32180:	mov	r3, r6
   32184:	mov	r2, #5
   32188:	movw	r1, #13924	; 0x3664
   3218c:	mov	r0, #0
   32190:	movt	r1, #4
   32194:	add	r5, r5, r3
   32198:	bl	12d84 <dcgettext@plt>
   3219c:	mov	r3, #0
   321a0:	str	r5, [sp]
   321a4:	mov	r2, r6
   321a8:	str	r3, [sp, #4]
   321ac:	mov	r1, r0
   321b0:	mov	r0, #1
   321b4:	bl	13204 <__printf_chk@plt>
   321b8:	ldr	sl, [sp, #384]	; 0x180
   321bc:	b	31394 <__assert_fail@plt+0x1de90>
   321c0:	ldr	r3, [sp, #384]	; 0x180
   321c4:	rsb	r3, r3, r4
   321c8:	cmp	r3, #0
   321cc:	ble	308bc <__assert_fail@plt+0x1d3b8>
   321d0:	add	r0, sp, #384	; 0x180
   321d4:	mov	r1, r4
   321d8:	bl	142b8 <__assert_fail@plt+0xdb4>
   321dc:	add	ip, sp, #432	; 0x1b0
   321e0:	bl	137d4 <__assert_fail@plt+0x2d0>
   321e4:	mov	r2, #5
   321e8:	movw	r1, #13876	; 0x3634
   321ec:	mov	r0, #0
   321f0:	movt	r1, #4
   321f4:	add	r9, sp, #1488	; 0x5d0
   321f8:	bl	12d84 <dcgettext@plt>
   321fc:	ldr	r2, [sp, #440]	; 0x1b8
   32200:	mov	r1, r0
   32204:	mov	r0, #1
   32208:	bl	13204 <__printf_chk@plt>
   3220c:	movw	r3, #64480	; 0xfbe0
   32210:	movt	r3, #65535	; 0xffff
   32214:	ldr	r0, [sp, #108]	; 0x6c
   32218:	mov	r1, #0
   3221c:	ldrd	r6, [r9, r3]
   32220:	b	31ffc <__assert_fail@plt+0x1eaf8>
   32224:	and	r1, r1, #127	; 0x7f
   32228:	cmp	r4, r3
   3222c:	uxtb	r0, r1
   32230:	mov	r1, #0
   32234:	bls	3240c <__assert_fail@plt+0x1ef08>
   32238:	cmp	r2, #8
   3223c:	movhi	r6, #9
   32240:	bls	32418 <__assert_fail@plt+0x1ef14>
   32244:	add	r2, r3, #2
   32248:	str	r2, [sp, #384]	; 0x180
   3224c:	ldrb	r2, [r3, #1]
   32250:	uxtb	r3, r2
   32254:	tst	r3, #128	; 0x80
   32258:	moveq	ip, #7
   3225c:	bne	32394 <__assert_fail@plt+0x1ee90>
   32260:	sbfx	r3, r3, #0, #7
   32264:	sub	r6, ip, #32
   32268:	rsb	lr, ip, #32
   3226c:	sxtb	r2, r3
   32270:	asr	r3, r2, #31
   32274:	lsl	r7, r3, ip
   32278:	lsl	ip, r2, ip
   3227c:	orr	r6, r7, r2, lsl r6
   32280:	str	ip, [sp, #168]	; 0xa8
   32284:	orr	lr, r6, r2, lsr lr
   32288:	str	lr, [sp, #172]	; 0xac
   3228c:	ldrd	r6, [sp, #168]	; 0xa8
   32290:	orr	r0, r0, r6
   32294:	mov	r6, r0
   32298:	mov	r3, r0
   3229c:	b	32184 <__assert_fail@plt+0x1ec80>
   322a0:	mov	r2, #5
   322a4:	movw	r1, #13868	; 0x362c
   322a8:	mov	r0, #0
   322ac:	movt	r1, #4
   322b0:	bl	12d84 <dcgettext@plt>
   322b4:	bl	12fdc <puts@plt>
   322b8:	b	31a34 <__assert_fail@plt+0x1e530>
   322bc:	ldrb	r3, [r8, r7]
   322c0:	mov	r2, #5
   322c4:	movw	r1, #14204	; 0x377c
   322c8:	str	r2, [sp]
   322cc:	movt	r1, #4
   322d0:	movw	r2, #14240	; 0x37a0
   322d4:	mov	r0, #0
   322d8:	movt	r2, #4
   322dc:	bl	134a4 <dcngettext@plt>
   322e0:	ldrb	r2, [r8, r7]
   322e4:	add	r9, r8, r7
   322e8:	mov	r1, r0
   322ec:	mov	r0, #1
   322f0:	bl	13204 <__printf_chk@plt>
   322f4:	ldrb	r6, [r8, r7]
   322f8:	ldr	sl, [sp, #384]	; 0x180
   322fc:	cmp	r6, #0
   32300:	beq	31394 <__assert_fail@plt+0x1de90>
   32304:	cmp	r4, sl
   32308:	bls	31394 <__assert_fail@plt+0x1de90>
   3230c:	add	r7, sp, #384	; 0x180
   32310:	mov	sl, #44	; 0x2c
   32314:	mov	r0, r7
   32318:	mov	r1, r4
   3231c:	bl	142b8 <__assert_fail@plt+0xdb4>
   32320:	ldrb	r3, [r9]
   32324:	cmp	r3, r6
   32328:	mov	r2, r0
   3232c:	beq	32368 <__assert_fail@plt+0x1ee64>
   32330:	ldr	ip, [sp, #160]	; 0xa0
   32334:	ldr	r3, [ip]
   32338:	ldr	r1, [r3, #20]
   3233c:	ldr	r0, [r3, #24]
   32340:	cmp	r1, r0
   32344:	addcc	r0, r1, #1
   32348:	strcc	r0, [r3, #20]
   3234c:	strbcc	sl, [r1]
   32350:	bcc	32368 <__assert_fail@plt+0x1ee64>
   32354:	mov	r0, r3
   32358:	mov	r1, #44	; 0x2c
   3235c:	str	r2, [sp, #52]	; 0x34
   32360:	bl	132dc <__overflow@plt>
   32364:	ldr	r2, [sp, #52]	; 0x34
   32368:	movw	r1, #28200	; 0x6e28
   3236c:	mov	r0, #1
   32370:	movt	r1, #4
   32374:	bl	13204 <__printf_chk@plt>
   32378:	subs	r6, r6, #1
   3237c:	beq	31a34 <__assert_fail@plt+0x1e530>
   32380:	ldr	r3, [sp, #384]	; 0x180
   32384:	cmp	r4, r3
   32388:	bhi	32314 <__assert_fail@plt+0x1ee10>
   3238c:	mov	sl, r3
   32390:	b	31394 <__assert_fail@plt+0x1de90>
   32394:	mov	ip, #1
   32398:	mov	r7, fp
   3239c:	and	r2, r2, #127	; 0x7f
   323a0:	rsb	lr, ip, ip, lsl #3
   323a4:	sub	r3, lr, #32
   323a8:	add	ip, ip, #1
   323ac:	uxtb	r2, r2
   323b0:	cmp	r6, ip
   323b4:	lsl	fp, r2, r3
   323b8:	rsb	r3, lr, #32
   323bc:	orr	fp, fp, r2, lsr r3
   323c0:	lsl	sl, r2, lr
   323c4:	orr	r0, r0, sl
   323c8:	orr	r1, r1, fp
   323cc:	bls	32400 <__assert_fail@plt+0x1eefc>
   323d0:	ldr	r3, [sp, #384]	; 0x180
   323d4:	add	r2, r3, #1
   323d8:	str	r2, [sp, #384]	; 0x180
   323dc:	ldrb	r2, [r3]
   323e0:	uxtb	r3, r2
   323e4:	tst	r3, #128	; 0x80
   323e8:	bne	3239c <__assert_fail@plt+0x1ee98>
   323ec:	add	lr, sp, #512	; 0x200
   323f0:	rsb	ip, ip, ip, lsl #3
   323f4:	strd	sl, [lr, #-184]	; 0xffffff48
   323f8:	mov	fp, r7
   323fc:	b	32260 <__assert_fail@plt+0x1ed5c>
   32400:	add	ip, sp, #512	; 0x200
   32404:	strd	sl, [ip, #-184]	; 0xffffff48
   32408:	mov	fp, r7
   3240c:	mvn	r3, #0
   32410:	mov	r6, r3
   32414:	b	32184 <__assert_fail@plt+0x1ec80>
   32418:	cmp	r2, #1
   3241c:	beq	3240c <__assert_fail@plt+0x1ef08>
   32420:	mov	r6, r2
   32424:	b	32244 <__assert_fail@plt+0x1ed40>
   32428:	rev	r7, r7
   3242c:	b	30974 <__assert_fail@plt+0x1d470>
   32430:	bl	12dc0 <__stack_chk_fail@plt>
   32434:	rev	sl, sl
   32438:	b	304f0 <__assert_fail@plt+0x1cfec>
   3243c:	add	r1, r1, #12
   32440:	cmp	r4, r1
   32444:	bcc	309f4 <__assert_fail@plt+0x1d4f0>
   32448:	cmp	r2, #0
   3244c:	ldreq	r8, [r3]
   32450:	ldreq	r9, [r3, #4]
   32454:	ldrne	r0, [r3]
   32458:	ldrne	r3, [r3, #4]
   3245c:	revne	r9, r0
   32460:	revne	r8, r3
   32464:	str	r1, [sp, #384]	; 0x180
   32468:	mov	r3, r1
   3246c:	mov	sl, #8
   32470:	b	30508 <__assert_fail@plt+0x1d004>
   32474:	cmp	r4, ip
   32478:	bls	309f4 <__assert_fail@plt+0x1d4f0>
   3247c:	rsb	r0, ip, r4
   32480:	cmp	r0, #9
   32484:	movhi	r7, #10
   32488:	strhi	r7, [sp, #120]	; 0x78
   3248c:	bls	325e8 <__assert_fail@plt+0x1f0e4>
   32490:	add	r0, ip, #2
   32494:	str	r0, [sp, #384]	; 0x180
   32498:	ldrb	r0, [ip, #1]
   3249c:	add	lr, sp, #512	; 0x200
   324a0:	and	r6, r0, #127	; 0x7f
   324a4:	tst	r0, #128	; 0x80
   324a8:	strne	r1, [sp, #48]	; 0x30
   324ac:	uxtb	r6, r6
   324b0:	lsr	fp, r6, #25
   324b4:	lsl	ip, r6, #7
   324b8:	str	fp, [sp, #268]	; 0x10c
   324bc:	str	ip, [sp, #264]	; 0x108
   324c0:	ldrd	r6, [lr, #-248]	; 0xffffff08
   324c4:	orr	r7, r7, r3
   324c8:	movne	r3, #1
   324cc:	orr	r6, r6, r2
   324d0:	movne	r0, r3
   324d4:	beq	30f40 <__assert_fail@plt+0x1da3c>
   324d8:	ldr	r2, [sp, #120]	; 0x78
   324dc:	add	r0, r0, #1
   324e0:	cmp	r2, r0
   324e4:	bls	309f4 <__assert_fail@plt+0x1d4f0>
   324e8:	ldr	r3, [sp, #384]	; 0x180
   324ec:	rsb	ip, r0, r0, lsl #3
   324f0:	sub	r1, ip, #32
   324f4:	rsb	lr, ip, #32
   324f8:	add	r2, r3, #1
   324fc:	str	r2, [sp, #384]	; 0x180
   32500:	ldrb	r3, [r3]
   32504:	and	r2, r3, #127	; 0x7f
   32508:	tst	r3, #128	; 0x80
   3250c:	uxtb	r2, r2
   32510:	lsl	fp, r2, r1
   32514:	lsl	sl, r2, ip
   32518:	orr	fp, fp, r2, lsr lr
   3251c:	orr	r6, r6, sl
   32520:	orr	r7, r7, fp
   32524:	bne	324d8 <__assert_fail@plt+0x1efd4>
   32528:	add	r3, sp, #512	; 0x200
   3252c:	ldr	r1, [sp, #48]	; 0x30
   32530:	strd	sl, [r3, #-208]	; 0xffffff30
   32534:	b	30f40 <__assert_fail@plt+0x1da3c>
   32538:	cmp	r4, r1
   3253c:	bls	32600 <__assert_fail@plt+0x1f0fc>
   32540:	rsb	fp, r1, r4
   32544:	cmp	fp, #9
   32548:	movhi	fp, #10
   3254c:	bls	325f8 <__assert_fail@plt+0x1f0f4>
   32550:	add	ip, r1, #2
   32554:	str	ip, [sp, #384]	; 0x180
   32558:	ldrb	r1, [r1, #1]
   3255c:	and	r0, r1, #127	; 0x7f
   32560:	tst	r1, #128	; 0x80
   32564:	add	r1, sp, #256	; 0x100
   32568:	uxtb	r0, r0
   3256c:	movne	lr, #1
   32570:	lsr	r6, r0, #25
   32574:	lsl	r7, r0, #7
   32578:	str	r6, [sp, #260]	; 0x104
   3257c:	str	r7, [sp, #256]	; 0x100
   32580:	ldrd	r0, [r1]
   32584:	orr	r2, r2, r0
   32588:	orr	r3, r3, r1
   3258c:	beq	30f10 <__assert_fail@plt+0x1da0c>
   32590:	add	lr, lr, #1
   32594:	cmp	fp, lr
   32598:	bls	32600 <__assert_fail@plt+0x1f0fc>
   3259c:	add	ip, ip, #1
   325a0:	str	ip, [sp, #384]	; 0x180
   325a4:	rsb	r6, lr, lr, lsl #3
   325a8:	ldrb	r1, [ip, #-1]
   325ac:	sub	sl, r6, #32
   325b0:	rsb	r7, r6, #32
   325b4:	and	r0, r1, #127	; 0x7f
   325b8:	tst	r1, #128	; 0x80
   325bc:	uxtb	r0, r0
   325c0:	lsl	sl, r0, sl
   325c4:	lsl	r6, r0, r6
   325c8:	orr	r7, sl, r0, lsr r7
   325cc:	str	r6, [sp, #200]	; 0xc8
   325d0:	str	r7, [sp, #204]	; 0xcc
   325d4:	ldrd	r6, [sp, #200]	; 0xc8
   325d8:	orr	r2, r2, r6
   325dc:	orr	r3, r3, r7
   325e0:	beq	30f10 <__assert_fail@plt+0x1da0c>
   325e4:	b	32590 <__assert_fail@plt+0x1f08c>
   325e8:	cmp	r0, #1
   325ec:	bls	309f4 <__assert_fail@plt+0x1d4f0>
   325f0:	str	r0, [sp, #120]	; 0x78
   325f4:	b	32490 <__assert_fail@plt+0x1ef8c>
   325f8:	cmp	fp, #1
   325fc:	bhi	32550 <__assert_fail@plt+0x1f04c>
   32600:	mvn	r1, #0
   32604:	b	30f14 <__assert_fail@plt+0x1da10>
   32608:	rsb	r3, ip, r7
   3260c:	cmp	r3, #7
   32610:	ble	30ac8 <__assert_fail@plt+0x1d5c4>
   32614:	cmp	r6, #0
   32618:	ldreq	r0, [ip]
   3261c:	ldreq	r1, [ip, #4]
   32620:	ldrne	r3, [ip]
   32624:	ldrne	r2, [ip, #4]
   32628:	revne	r1, r3
   3262c:	revne	r0, r2
   32630:	add	ip, lr, #12
   32634:	b	30a78 <__assert_fail@plt+0x1d574>
   32638:	rev	r0, r0
   3263c:	b	30a68 <__assert_fail@plt+0x1d564>
   32640:	ldr	sl, [sp, #152]	; 0x98
   32644:	add	r1, r1, #1
   32648:	cmp	r1, sl
   3264c:	bcs	326bc <__assert_fail@plt+0x1f1b8>
   32650:	ldr	r3, [sp, #384]	; 0x180
   32654:	rsb	r0, r1, r1, lsl #3
   32658:	sub	sl, r0, #32
   3265c:	add	r2, r3, #1
   32660:	str	r2, [sp, #384]	; 0x180
   32664:	ldrb	r3, [r3]
   32668:	rsb	r2, r0, #32
   3266c:	str	r2, [sp, #120]	; 0x78
   32670:	and	r2, r3, #127	; 0x7f
   32674:	ldr	ip, [sp, #120]	; 0x78
   32678:	tst	r3, #128	; 0x80
   3267c:	uxtb	r2, r2
   32680:	lsl	sl, r2, sl
   32684:	lsl	r0, r2, r0
   32688:	orr	sl, sl, r2, lsr ip
   3268c:	str	r0, [sp, #192]	; 0xc0
   32690:	str	sl, [sp, #196]	; 0xc4
   32694:	ldrd	r2, [sp, #192]	; 0xc0
   32698:	orr	r6, r6, r2
   3269c:	orr	r7, r7, r3
   326a0:	bne	32640 <__assert_fail@plt+0x1f13c>
   326a4:	mov	sl, lr
   326a8:	b	316b0 <__assert_fail@plt+0x1e1ac>
   326ac:	cmp	r2, #1
   326b0:	bls	326c0 <__assert_fail@plt+0x1f1bc>
   326b4:	mov	ip, r2
   326b8:	b	3166c <__assert_fail@plt+0x1e168>
   326bc:	mov	sl, lr
   326c0:	cmp	r5, #0
   326c4:	beq	309f4 <__assert_fail@plt+0x1d4f0>
   326c8:	mvn	r6, #0
   326cc:	mvn	r7, #0
   326d0:	strd	r6, [sp, #152]	; 0x98
   326d4:	b	310bc <__assert_fail@plt+0x1dbb8>
   326d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   326dc:	add	fp, sp, #32
   326e0:	sub	sp, sp, #732	; 0x2dc
   326e4:	movw	r4, #37688	; 0x9338
   326e8:	movt	r4, #5
   326ec:	str	r1, [fp, #-184]	; 0xffffff48
   326f0:	sub	r1, fp, #80	; 0x50
   326f4:	ldr	r6, [fp, #-184]	; 0xffffff48
   326f8:	ldr	ip, [r4]
   326fc:	ldr	r5, [fp, #4]
   32700:	ldr	r7, [fp, #8]
   32704:	str	r0, [fp, #-168]	; 0xffffff58
   32708:	ldr	r0, [r6, #16]
   3270c:	str	r3, [fp, #-204]	; 0xffffff34
   32710:	str	ip, [fp, #-40]	; 0xffffffd8
   32714:	str	r4, [fp, #-196]	; 0xffffff3c
   32718:	str	r2, [fp, #-172]	; 0xffffff54
   3271c:	str	r5, [fp, #-188]	; 0xffffff44
   32720:	str	r7, [fp, #-132]	; 0xffffff7c
   32724:	bl	13498 <elf_getshdrstrndx@plt>
   32728:	ldr	r2, [r5]
   3272c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   32730:	ldr	r0, [r6, #16]
   32734:	bl	12e44 <elf_strptr@plt>
   32738:	sub	r1, fp, #76	; 0x4c
   3273c:	str	r0, [fp, #-200]	; 0xffffff38
   32740:	ldr	r0, [fp, #-168]	; 0xffffff58
   32744:	bl	12db4 <dwfl_module_getelf@plt>
   32748:	subs	r4, r0, #0
   3274c:	beq	342e0 <__assert_fail@plt+0x20ddc>
   32750:	movw	r1, #14356	; 0x3814
   32754:	ldr	r0, [fp, #-200]	; 0xffffff38
   32758:	movt	r1, #4
   3275c:	bl	12cd0 <strcmp@plt>
   32760:	rsbs	r0, r0, #1
   32764:	movcc	r0, #0
   32768:	cmp	r0, #0
   3276c:	str	r0, [fp, #-160]	; 0xffffff60
   32770:	bne	34380 <__assert_fail@plt+0x20e7c>
   32774:	ldr	r8, [fp, #-132]	; 0xffffff7c
   32778:	ldr	r8, [r8, #40]	; 0x28
   3277c:	cmp	r8, #0
   32780:	str	r8, [fp, #-164]	; 0xffffff5c
   32784:	beq	34e7c <__assert_fail@plt+0x21978>
   32788:	mov	r2, #5
   3278c:	movw	r1, #60928	; 0xee00
   32790:	mov	r0, #0
   32794:	movt	r1, #3
   32798:	bl	12d84 <dcgettext@plt>
   3279c:	mov	r6, r0
   327a0:	ldr	r0, [fp, #-204]	; 0xffffff34
   327a4:	bl	133d8 <elf_ndxscn@plt>
   327a8:	ldr	ip, [fp, #-188]	; 0xffffff44
   327ac:	ldrd	r4, [ip, #24]
   327b0:	mov	r2, r0
   327b4:	strd	r4, [sp]
   327b8:	mov	r1, r6
   327bc:	ldr	r3, [fp, #-200]	; 0xffffff38
   327c0:	mov	r0, #1
   327c4:	bl	13204 <__printf_chk@plt>
   327c8:	ldr	r4, [fp, #-164]	; 0xffffff5c
   327cc:	ldr	sl, [r4]
   327d0:	ldr	r3, [r4, #12]
   327d4:	add	r3, sl, r3
   327d8:	str	r3, [fp, #-128]	; 0xffffff80
   327dc:	cmp	sl, r3
   327e0:	bcs	32b38 <__assert_fail@plt+0x1f634>
   327e4:	ldr	r5, [fp, #-128]	; 0xffffff80
   327e8:	add	r3, sl, #4
   327ec:	cmp	r5, r3
   327f0:	movcs	r9, #0
   327f4:	movcs	r1, sl
   327f8:	strcs	r9, [fp, #-148]	; 0xffffff6c
   327fc:	bcc	33f58 <__assert_fail@plt+0x20a54>
   32800:	ldr	r4, [fp, #-132]	; 0xffffff7c
   32804:	rsb	r5, r1, sl
   32808:	ldr	r2, [sl]
   3280c:	str	r5, [fp, #-144]	; 0xffffff70
   32810:	ldrb	ip, [r4, #84]	; 0x54
   32814:	cmp	ip, #0
   32818:	bne	34860 <__assert_fail@plt+0x2135c>
   3281c:	cmn	r2, #1
   32820:	mov	r8, r2
   32824:	mov	r9, #0
   32828:	mov	r6, r3
   3282c:	strd	r8, [fp, #-92]	; 0xffffffa4
   32830:	movne	r0, #4
   32834:	beq	360a0 <__assert_fail@plt+0x22b9c>
   32838:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   3283c:	orrs	r5, r4, r5
   32840:	beq	36074 <__assert_fail@plt+0x22b70>
   32844:	ldr	r7, [fp, #-128]	; 0xffffff80
   32848:	ldrd	r8, [fp, #-92]	; 0xffffffa4
   3284c:	rsb	r2, r6, r7
   32850:	asr	r3, r2, #31
   32854:	cmp	r9, r3
   32858:	cmpeq	r8, r2
   3285c:	bhi	33f58 <__assert_fail@plt+0x20a54>
   32860:	ldr	r9, [fp, #-172]	; 0xffffff54
   32864:	ldr	lr, [fp, #-92]	; 0xffffffa4
   32868:	ldrb	r8, [r9, #4]
   3286c:	add	sl, r6, lr
   32870:	cmp	r8, #1
   32874:	movne	r4, #8
   32878:	moveq	r4, #4
   3287c:	cmp	r7, sl
   32880:	str	r4, [fp, #-100]	; 0xffffff9c
   32884:	bcc	33f58 <__assert_fail@plt+0x20a54>
   32888:	cmp	r0, #4
   3288c:	rsb	r3, r6, sl
   32890:	beq	339a4 <__assert_fail@plt+0x204a0>
   32894:	cmp	r3, #7
   32898:	ble	33f58 <__assert_fail@plt+0x20a54>
   3289c:	cmp	ip, #0
   328a0:	ldreq	r9, [r6]
   328a4:	ldreq	lr, [r6, #4]
   328a8:	streq	r9, [fp, #-732]	; 0xfffffd24
   328ac:	streq	lr, [fp, #-728]	; 0xfffffd28
   328b0:	bne	36058 <__assert_fail@plt+0x22b54>
   328b4:	ldr	r5, [fp, #-160]	; 0xffffff60
   328b8:	add	r4, r6, #8
   328bc:	str	r4, [fp, #-724]	; 0xfffffd2c
   328c0:	eor	r2, r5, #1
   328c4:	sub	r5, fp, #512	; 0x200
   328c8:	uxtb	r2, r2
   328cc:	mov	r3, #0
   328d0:	rsbs	r2, r2, #0
   328d4:	rsc	r3, r3, #0
   328d8:	ldrd	r4, [r5, #-220]	; 0xffffff24
   328dc:	cmp	r5, r3
   328e0:	cmpeq	r4, r2
   328e4:	beq	33f98 <__assert_fail@plt+0x20a94>
   328e8:	ldr	r8, [fp, #-148]	; 0xffffff6c
   328ec:	cmp	r8, #0
   328f0:	beq	32b2c <__assert_fail@plt+0x1f628>
   328f4:	sub	r8, fp, #512	; 0x200
   328f8:	rsb	r6, r1, r6
   328fc:	ldr	r9, [fp, #-148]	; 0xffffff6c
   32900:	ldrd	r0, [r8, #-220]	; 0xffffff24
   32904:	ldrd	r4, [r8, #-220]	; 0xffffff24
   32908:	rsbs	r0, r0, r6
   3290c:	rsc	r1, r1, r6, asr #31
   32910:	ldr	lr, [fp, #-160]	; 0xffffff60
   32914:	ldr	r7, [fp, #-724]	; 0xfffffd2c
   32918:	b	32940 <__assert_fail@plt+0x1f43c>
   3291c:	cmp	r1, r3
   32920:	cmpeq	r0, r2
   32924:	movne	r3, #0
   32928:	moveq	r3, #1
   3292c:	cmp	r3, #0
   32930:	bne	32968 <__assert_fail@plt+0x1f464>
   32934:	ldr	r9, [r9, #20]
   32938:	cmp	r9, #0
   3293c:	beq	32b2c <__assert_fail@plt+0x1f628>
   32940:	ldr	r2, [r9]
   32944:	cmp	lr, #0
   32948:	asr	r3, r2, #31
   3294c:	bne	3291c <__assert_fail@plt+0x1f418>
   32950:	cmp	r5, r3
   32954:	cmpeq	r4, r2
   32958:	movne	r3, #0
   3295c:	moveq	r3, #1
   32960:	cmp	r3, #0
   32964:	beq	32934 <__assert_fail@plt+0x1f430>
   32968:	sub	r6, fp, #512	; 0x200
   3296c:	str	r7, [fp, #-724]	; 0xfffffd2c
   32970:	ldrb	r8, [r9, #16]
   32974:	strd	r4, [r6, #-220]	; 0xffffff24
   32978:	ldrb	r6, [r9, #17]
   3297c:	ldrb	r7, [r9, #18]
   32980:	and	r3, r6, #7
   32984:	str	r8, [fp, #-100]	; 0xffffff9c
   32988:	cmp	r3, #3
   3298c:	str	r6, [fp, #-180]	; 0xffffff4c
   32990:	str	r7, [fp, #-192]	; 0xffffff40
   32994:	beq	33fc4 <__assert_fail@plt+0x20ac0>
   32998:	cmp	r3, #4
   3299c:	beq	33fa8 <__assert_fail@plt+0x20aa4>
   329a0:	cmp	r3, #0
   329a4:	beq	329d0 <__assert_fail@plt+0x1f4cc>
   329a8:	ldr	r4, [fp, #-100]	; 0xffffff9c
   329ac:	movw	r3, #37692	; 0x933c
   329b0:	movt	r3, #5
   329b4:	movw	r2, #14864	; 0x3a10
   329b8:	mov	r1, #1
   329bc:	movt	r2, #4
   329c0:	str	r4, [sp]
   329c4:	ldr	r0, [r3]
   329c8:	mov	r3, r6
   329cc:	bl	13258 <__fprintf_chk@plt>
   329d0:	ldr	r5, [fp, #-100]	; 0xffffff9c
   329d4:	ldr	r7, [r9, #8]
   329d8:	ldr	r8, [r9, #12]
   329dc:	cmp	r5, #8
   329e0:	cmpne	r5, #4
   329e4:	str	r7, [fp, #-124]	; 0xffffff84
   329e8:	str	r8, [fp, #-96]	; 0xffffffa0
   329ec:	bne	36220 <__assert_fail@plt+0x22d1c>
   329f0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   329f4:	ldrb	ip, [r4, #84]	; 0x54
   329f8:	ldr	r5, [fp, #-100]	; 0xffffff9c
   329fc:	cmp	r5, #4
   32a00:	beq	33f00 <__assert_fail@plt+0x209fc>
   32a04:	cmp	ip, #0
   32a08:	ldr	r8, [fp, #-724]	; 0xfffffd2c
   32a0c:	bne	361e8 <__assert_fail@plt+0x22ce4>
   32a10:	ldr	r7, [r8]
   32a14:	ldr	lr, [fp, #-724]	; 0xfffffd2c
   32a18:	ldr	ip, [r8, #8]!
   32a1c:	str	r7, [fp, #-108]	; 0xffffff94
   32a20:	ldr	lr, [lr, #4]
   32a24:	ldr	r0, [r8, #4]
   32a28:	str	ip, [fp, #-116]	; 0xffffff8c
   32a2c:	str	lr, [fp, #-104]	; 0xffffff98
   32a30:	str	r0, [fp, #-112]	; 0xffffff90
   32a34:	ldrd	r4, [fp, #-108]	; 0xffffff94
   32a38:	add	r8, r8, #8
   32a3c:	strd	r4, [fp, #-156]	; 0xffffff64
   32a40:	and	r6, r6, #112	; 0x70
   32a44:	cmp	r6, #16
   32a48:	beq	33dbc <__assert_fail@plt+0x208b8>
   32a4c:	ldrd	r6, [fp, #-92]	; 0xffffffa4
   32a50:	sub	r5, fp, #512	; 0x200
   32a54:	ldr	r2, [fp, #-144]	; 0xffffff70
   32a58:	movw	r1, #14968	; 0x3a78
   32a5c:	mov	r0, #1
   32a60:	movt	r1, #4
   32a64:	strd	r6, [sp]
   32a68:	mov	r6, #0
   32a6c:	ldr	r3, [r9]
   32a70:	mov	r7, #0
   32a74:	ldrd	r4, [r5, #-220]	; 0xffffff24
   32a78:	strd	r6, [fp, #-140]	; 0xffffff74
   32a7c:	str	r3, [sp, #8]
   32a80:	strd	r4, [sp, #16]
   32a84:	bl	13204 <__printf_chk@plt>
   32a88:	ldrd	r4, [fp, #-156]	; 0xffffff64
   32a8c:	ldrb	r1, [r9, #16]
   32a90:	ldrd	r2, [fp, #-108]	; 0xffffff94
   32a94:	ldr	r0, [fp, #-168]	; 0xffffff58
   32a98:	strd	r4, [sp]
   32a9c:	bl	27164 <__assert_fail@plt+0x13c60>
   32aa0:	movw	r1, #15068	; 0x3adc
   32aa4:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   32aa8:	mov	r0, #1
   32aac:	movt	r1, #4
   32ab0:	bl	13204 <__printf_chk@plt>
   32ab4:	movw	r3, #37704	; 0x9348
   32ab8:	movt	r3, #5
   32abc:	mov	r0, #10
   32ac0:	ldr	r1, [r3]
   32ac4:	bl	12ed4 <_IO_putc@plt>
   32ac8:	ldr	r5, [r9, #4]
   32acc:	ldrb	r3, [r5]
   32ad0:	cmp	r3, #122	; 0x7a
   32ad4:	movne	r5, #2
   32ad8:	strne	r5, [fp, #-116]	; 0xffffff8c
   32adc:	beq	33c1c <__assert_fail@plt+0x20718>
   32ae0:	ldr	r6, [fp, #-100]	; 0xffffff9c
   32ae4:	cmp	r6, #8
   32ae8:	cmpne	r6, #4
   32aec:	beq	32b54 <__assert_fail@plt+0x1f650>
   32af0:	movw	r1, #15176	; 0x3b48
   32af4:	mov	r2, r6
   32af8:	mov	r0, #1
   32afc:	movt	r1, #4
   32b00:	bl	13204 <__printf_chk@plt>
   32b04:	ldr	r4, [fp, #-128]	; 0xffffff80
   32b08:	cmp	r4, sl
   32b0c:	bls	32b38 <__assert_fail@plt+0x1f634>
   32b10:	ldr	r7, [fp, #-128]	; 0xffffff80
   32b14:	add	r3, sl, #4
   32b18:	cmp	r7, r3
   32b1c:	bcc	33f58 <__assert_fail@plt+0x20a54>
   32b20:	ldr	r8, [fp, #-164]	; 0xffffff5c
   32b24:	ldr	r1, [r8]
   32b28:	b	32800 <__assert_fail@plt+0x1f2fc>
   32b2c:	movw	r0, #16236	; 0x3f6c
   32b30:	movt	r0, #4
   32b34:	bl	12fdc <puts@plt>
   32b38:	ldr	r7, [fp, #-196]	; 0xffffff3c
   32b3c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   32b40:	ldr	r3, [r7]
   32b44:	cmp	r2, r3
   32b48:	bne	36054 <__assert_fail@plt+0x22b50>
   32b4c:	sub	sp, fp, #32
   32b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32b54:	ldr	r7, [fp, #-184]	; 0xffffff48
   32b58:	movw	r0, #15224	; 0x3b78
   32b5c:	movt	r0, #4
   32b60:	str	r7, [fp, #-60]	; 0xffffffc4
   32b64:	bl	12fdc <puts@plt>
   32b68:	cmp	sl, r8
   32b6c:	bls	32b04 <__assert_fail@plt+0x1f600>
   32b70:	ldrb	r2, [r8]
   32b74:	add	r6, r8, #1
   32b78:	ldrd	r4, [fp, #-140]	; 0xffffff74
   32b7c:	cmp	r2, #63	; 0x3f
   32b80:	strd	r4, [fp, #-92]	; 0xffffffa4
   32b84:	bhi	32cb4 <__assert_fail@plt+0x1f7b0>
   32b88:	cmp	r2, #46	; 0x2e
   32b8c:	ldrls	pc, [pc, r2, lsl #2]
   32b90:	b	33914 <__assert_fail@plt+0x20410>
   32b94:	andeq	r3, r3, r0, lsl #18
   32b98:	andeq	r3, r3, r4, lsr #17
   32b9c:	andeq	r3, r3, r4, ror #16
   32ba0:	strdeq	r3, [r3], -r4
   32ba4:	muleq	r3, r0, r7
   32ba8:	andeq	r3, r3, r8, asr #13
   32bac:	andeq	r3, r3, r4, asr r6
   32bb0:	andeq	r3, r3, r0, ror #11
   32bb4:	andeq	r3, r3, ip, ror #10
   32bb8:	muleq	r3, r8, r4
   32bbc:	andeq	r3, r3, r4, lsl #9
   32bc0:	andeq	r3, r3, r0, ror r4
   32bc4:	andeq	r3, r3, r8, asr #7
   32bc8:	andeq	r3, r3, r4, asr r3
   32bcc:	andeq	r3, r3, r8, lsl r3
   32bd0:	andeq	r3, r3, r4, ror r2
   32bd4:	ldrdeq	r3, [r3], -r4
   32bd8:	andeq	r3, r3, r4, lsl r1
   32bdc:	andeq	r3, r3, r4, asr r0
   32be0:	andeq	r2, r3, ip, ror #31
   32be4:	andeq	r2, r3, r4, asr pc
   32be8:	andeq	r2, r3, r4, asr #29
   32bec:	ldrdeq	r2, [r3], -r4
   32bf0:	andeq	r3, r3, r4, lsl r9
   32bf4:	andeq	r3, r3, r4, lsl r9
   32bf8:	andeq	r3, r3, r4, lsl r9
   32bfc:	andeq	r3, r3, r4, lsl r9
   32c00:	andeq	r3, r3, r4, lsl r9
   32c04:	andeq	r3, r3, r4, lsl r9
   32c08:	andeq	r2, r3, r8, ror #26
   32c0c:	andeq	r3, r3, r4, lsl r9
   32c10:	andeq	r3, r3, r4, lsl r9
   32c14:	andeq	r3, r3, r4, lsl r9
   32c18:	andeq	r3, r3, r4, lsl r9
   32c1c:	andeq	r3, r3, r4, lsl r9
   32c20:	andeq	r3, r3, r4, lsl r9
   32c24:	andeq	r3, r3, r4, lsl r9
   32c28:	andeq	r3, r3, r4, lsl r9
   32c2c:	andeq	r3, r3, r4, lsl r9
   32c30:	andeq	r3, r3, r4, lsl r9
   32c34:	andeq	r3, r3, r4, lsl r9
   32c38:	andeq	r3, r3, r4, lsl r9
   32c3c:	andeq	r3, r3, r4, lsl r9
   32c40:	andeq	r3, r3, r4, lsl r9
   32c44:	andeq	r3, r3, r4, lsl r9
   32c48:	andeq	r2, r3, r4, asr sp
   32c4c:	andeq	r2, r3, r0, asr ip
   32c50:	cmp	sl, r6
   32c54:	beq	33bf4 <__assert_fail@plt+0x206f0>
   32c58:	ldrb	r0, [r8, #1]
   32c5c:	mov	r1, #0
   32c60:	add	ip, r8, #2
   32c64:	tst	r0, #128	; 0x80
   32c68:	and	r0, r0, #127	; 0x7f
   32c6c:	moveq	lr, r1
   32c70:	uxtb	r0, r0
   32c74:	bne	3618c <__assert_fail@plt+0x22c88>
   32c78:	movw	r1, #16104	; 0x3ee8
   32c7c:	movt	r1, #4
   32c80:	mov	r2, r0
   32c84:	mov	r3, lr
   32c88:	str	r0, [fp, #-68]	; 0xffffffbc
   32c8c:	mov	r0, #1
   32c90:	str	lr, [fp, #-64]	; 0xffffffc0
   32c94:	mov	r8, ip
   32c98:	bl	13204 <__printf_chk@plt>
   32c9c:	cmp	sl, r8
   32ca0:	bls	32b04 <__assert_fail@plt+0x1f600>
   32ca4:	ldrb	r2, [r8]
   32ca8:	add	r6, r8, #1
   32cac:	cmp	r2, #63	; 0x3f
   32cb0:	bls	32b88 <__assert_fail@plt+0x1f684>
   32cb4:	cmp	r2, #127	; 0x7f
   32cb8:	bls	3392c <__assert_fail@plt+0x20428>
   32cbc:	cmp	r2, #191	; 0xbf
   32cc0:	bhi	33964 <__assert_fail@plt+0x20460>
   32cc4:	cmp	sl, r6
   32cc8:	beq	33bf4 <__assert_fail@plt+0x206f0>
   32ccc:	ldrb	r0, [r8, #1]
   32cd0:	mov	r1, #0
   32cd4:	add	r7, r8, #2
   32cd8:	tst	r0, #128	; 0x80
   32cdc:	and	r0, r0, #127	; 0x7f
   32ce0:	uxtb	r0, r0
   32ce4:	moveq	r9, r1
   32ce8:	moveq	r6, r0
   32cec:	bne	34324 <__assert_fail@plt+0x20e20>
   32cf0:	and	r8, r2, #63	; 0x3f
   32cf4:	sub	r3, fp, #56	; 0x38
   32cf8:	mov	r2, #0
   32cfc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   32d00:	mov	r1, r8
   32d04:	str	r2, [sp]
   32d08:	str	r2, [sp, #4]
   32d0c:	bl	1577c <__assert_fail@plt+0x2278>
   32d10:	ldr	ip, [fp, #-96]	; 0xffffffa0
   32d14:	mov	r2, r8
   32d18:	sub	r3, fp, #56	; 0x38
   32d1c:	mov	r8, r7
   32d20:	umull	r4, r5, r6, ip
   32d24:	asr	r1, ip, #31
   32d28:	mov	r0, ip
   32d2c:	strd	r0, [fp, #-108]	; 0xffffff94
   32d30:	mul	r6, r6, r1
   32d34:	mov	r0, #1
   32d38:	mla	r9, ip, r9, r6
   32d3c:	movw	r1, #16176	; 0x3f30
   32d40:	movt	r1, #4
   32d44:	add	r5, r9, r5
   32d48:	strd	r4, [sp]
   32d4c:	bl	13204 <__printf_chk@plt>
   32d50:	b	32c9c <__assert_fail@plt+0x1f798>
   32d54:	movw	r0, #16080	; 0x3ed0
   32d58:	movt	r0, #4
   32d5c:	mov	r8, r6
   32d60:	bl	12fdc <puts@plt>
   32d64:	b	32c9c <__assert_fail@plt+0x1f798>
   32d68:	rsb	r3, r6, sl
   32d6c:	cmp	r3, #7
   32d70:	bls	33bf4 <__assert_fail@plt+0x206f0>
   32d74:	ldr	r9, [fp, #-132]	; 0xffffff7c
   32d78:	ldrb	r3, [r9, #84]	; 0x54
   32d7c:	cmp	r3, #0
   32d80:	ldreq	r3, [r8, #1]
   32d84:	ldreq	r0, [r8, #5]
   32d88:	bne	36178 <__assert_fail@plt+0x22c74>
   32d8c:	ldr	ip, [fp, #-124]	; 0xffffff84
   32d90:	add	r8, r6, #8
   32d94:	ldrd	r6, [fp, #-92]	; 0xffffffa4
   32d98:	mov	r2, r3
   32d9c:	str	r3, [fp, #-68]	; 0xffffffbc
   32da0:	movw	r1, #16040	; 0x3ea8
   32da4:	umull	r4, r5, r3, ip
   32da8:	str	r0, [fp, #-64]	; 0xffffffc0
   32dac:	mov	r3, r0
   32db0:	movt	r1, #4
   32db4:	adds	r6, r6, r4
   32db8:	mla	r5, ip, r0, r5
   32dbc:	mov	r0, #1
   32dc0:	adc	r7, r7, r5
   32dc4:	strd	r6, [sp]
   32dc8:	strd	r6, [fp, #-92]	; 0xffffffa4
   32dcc:	bl	13204 <__printf_chk@plt>
   32dd0:	b	32c9c <__assert_fail@plt+0x1f798>
   32dd4:	cmp	sl, r6
   32dd8:	beq	33bf4 <__assert_fail@plt+0x206f0>
   32ddc:	ldrb	r2, [r8, #1]
   32de0:	mov	r3, #0
   32de4:	add	ip, r8, #2
   32de8:	tst	r2, #128	; 0x80
   32dec:	and	r2, r2, #127	; 0x7f
   32df0:	uxtb	r2, r2
   32df4:	moveq	r7, r3
   32df8:	moveq	r5, r2
   32dfc:	bne	3534c <__assert_fail@plt+0x21e48>
   32e00:	cmp	sl, ip
   32e04:	str	r5, [fp, #-68]	; 0xffffffbc
   32e08:	str	r7, [fp, #-64]	; 0xffffffc0
   32e0c:	beq	33bf4 <__assert_fail@plt+0x206f0>
   32e10:	ldrb	r8, [ip]
   32e14:	add	r6, ip, #1
   32e18:	mov	r9, #0
   32e1c:	tst	r8, #128	; 0x80
   32e20:	and	r8, r8, #127	; 0x7f
   32e24:	uxtb	r8, r8
   32e28:	bne	35294 <__assert_fail@plt+0x21d90>
   32e2c:	sub	ip, fp, #56	; 0x38
   32e30:	mov	r4, #0
   32e34:	mov	r1, r5
   32e38:	mov	r2, r4
   32e3c:	mov	r3, ip
   32e40:	ldr	r0, [fp, #-60]	; 0xffffffc4
   32e44:	str	r4, [sp]
   32e48:	str	r4, [sp, #4]
   32e4c:	str	ip, [fp, #-720]	; 0xfffffd30
   32e50:	bl	1577c <__assert_fail@plt+0x2278>
   32e54:	ldr	ip, [fp, #-720]	; 0xfffffd30
   32e58:	movw	r1, #16008	; 0x3e88
   32e5c:	movt	r1, #4
   32e60:	mov	r2, r5
   32e64:	mov	r3, r7
   32e68:	mov	r0, #1
   32e6c:	str	ip, [sp]
   32e70:	bl	13204 <__printf_chk@plt>
   32e74:	rsb	r2, r6, sl
   32e78:	asr	r3, r2, #31
   32e7c:	cmp	r3, r9
   32e80:	cmpeq	r2, r8
   32e84:	bcc	33bf4 <__assert_fail@plt+0x206f0>
   32e88:	ldr	r5, [fp, #-116]	; 0xffffff8c
   32e8c:	mov	r2, #10
   32e90:	ldr	r7, [fp, #-100]	; 0xffffff9c
   32e94:	mov	r3, r2
   32e98:	strd	r8, [sp, #16]
   32e9c:	add	r8, r6, r8
   32ea0:	str	r5, [sp]
   32ea4:	str	r7, [sp, #4]
   32ea8:	str	r4, [sp, #8]
   32eac:	str	r4, [sp, #12]
   32eb0:	ldr	r0, [fp, #-168]	; 0xffffff58
   32eb4:	str	r6, [sp, #24]
   32eb8:	ldr	r1, [fp, #-132]	; 0xffffff7c
   32ebc:	bl	274ac <__assert_fail@plt+0x13fa8>
   32ec0:	b	32c9c <__assert_fail@plt+0x1f798>
   32ec4:	cmp	sl, r6
   32ec8:	beq	33bf4 <__assert_fail@plt+0x206f0>
   32ecc:	ldrb	r2, [r8, #1]
   32ed0:	add	ip, r8, #2
   32ed4:	mov	r3, #0
   32ed8:	tst	r2, #128	; 0x80
   32edc:	and	r2, r2, #127	; 0x7f
   32ee0:	uxtb	r2, r2
   32ee4:	bne	35118 <__assert_fail@plt+0x21c14>
   32ee8:	cmp	sl, ip
   32eec:	str	r2, [fp, #-68]	; 0xffffffbc
   32ef0:	str	r3, [fp, #-64]	; 0xffffffc0
   32ef4:	beq	33bf4 <__assert_fail@plt+0x206f0>
   32ef8:	ldrb	r1, [ip]
   32efc:	add	r8, ip, #1
   32f00:	uxtb	r0, r1
   32f04:	tst	r0, #128	; 0x80
   32f08:	bne	35098 <__assert_fail@plt+0x21b94>
   32f0c:	sbfx	r0, r0, #0, #7
   32f10:	sxtb	r0, r0
   32f14:	asr	r1, r0, #31
   32f18:	mov	r4, r0
   32f1c:	mov	ip, r1
   32f20:	ldr	r5, [fp, #-96]	; 0xffffffa0
   32f24:	movw	r1, #15968	; 0x3e60
   32f28:	mov	r0, #1
   32f2c:	movt	r1, #4
   32f30:	asr	r7, r5, #31
   32f34:	mul	ip, r5, ip
   32f38:	mla	ip, r4, r7, ip
   32f3c:	mov	r7, r5
   32f40:	umull	r4, r5, r5, r4
   32f44:	add	r5, ip, r5
   32f48:	strd	r4, [sp]
   32f4c:	bl	13204 <__printf_chk@plt>
   32f50:	b	32c9c <__assert_fail@plt+0x1f798>
   32f54:	cmp	sl, r6
   32f58:	beq	33bf4 <__assert_fail@plt+0x206f0>
   32f5c:	ldrb	r0, [r8, #1]
   32f60:	mov	r1, #0
   32f64:	add	ip, r8, #2
   32f68:	tst	r0, #128	; 0x80
   32f6c:	and	r0, r0, #127	; 0x7f
   32f70:	uxtb	r0, r0
   32f74:	moveq	r3, r1
   32f78:	moveq	r2, r0
   32f7c:	bne	35a70 <__assert_fail@plt+0x2256c>
   32f80:	cmp	sl, ip
   32f84:	str	r2, [fp, #-68]	; 0xffffffbc
   32f88:	str	r3, [fp, #-64]	; 0xffffffc0
   32f8c:	beq	33bf4 <__assert_fail@plt+0x206f0>
   32f90:	ldrb	r0, [ip]
   32f94:	mov	r1, #0
   32f98:	add	r8, ip, #1
   32f9c:	tst	r0, #128	; 0x80
   32fa0:	and	r0, r0, #127	; 0x7f
   32fa4:	uxtb	r0, r0
   32fa8:	moveq	r4, r0
   32fac:	moveq	r0, r1
   32fb0:	bne	35a0c <__assert_fail@plt+0x22508>
   32fb4:	ldr	r6, [fp, #-96]	; 0xffffffa0
   32fb8:	movw	r1, #15928	; 0x3e38
   32fbc:	movt	r1, #4
   32fc0:	asr	r7, r6, #31
   32fc4:	strd	r6, [fp, #-108]	; 0xffffff94
   32fc8:	mul	ip, r4, r7
   32fcc:	ldr	r7, [fp, #-96]	; 0xffffffa0
   32fd0:	umull	r4, r5, r4, r7
   32fd4:	mla	ip, r7, r0, ip
   32fd8:	mov	r0, #1
   32fdc:	add	r5, ip, r5
   32fe0:	strd	r4, [sp]
   32fe4:	bl	13204 <__printf_chk@plt>
   32fe8:	b	32c9c <__assert_fail@plt+0x1f798>
   32fec:	cmp	sl, r6
   32ff0:	beq	33bf4 <__assert_fail@plt+0x206f0>
   32ff4:	ldrb	r3, [r8, #1]
   32ff8:	add	r1, r8, #2
   32ffc:	uxtb	r4, r3
   33000:	tst	r4, #128	; 0x80
   33004:	bne	35884 <__assert_fail@plt+0x22380>
   33008:	sbfx	r4, r4, #0, #7
   3300c:	sxtb	r4, r4
   33010:	asr	r5, r4, #31
   33014:	mov	r2, r4
   33018:	mov	ip, r5
   3301c:	ldr	r4, [fp, #-96]	; 0xffffffa0
   33020:	mov	r8, r1
   33024:	mov	r0, #1
   33028:	movw	r1, #15896	; 0x3e18
   3302c:	movt	r1, #4
   33030:	asr	r7, r4, #31
   33034:	mul	ip, r4, ip
   33038:	mov	r5, r7
   3303c:	mla	ip, r2, r7, ip
   33040:	ldr	r7, [fp, #-96]	; 0xffffffa0
   33044:	umull	r2, r3, r7, r2
   33048:	add	r3, ip, r3
   3304c:	bl	13204 <__printf_chk@plt>
   33050:	b	32c9c <__assert_fail@plt+0x1f798>
   33054:	cmp	sl, r6
   33058:	beq	33bf4 <__assert_fail@plt+0x206f0>
   3305c:	ldrb	r2, [r8, #1]
   33060:	mov	r3, #0
   33064:	add	ip, r8, #2
   33068:	tst	r2, #128	; 0x80
   3306c:	and	r2, r2, #127	; 0x7f
   33070:	uxtb	r2, r2
   33074:	moveq	r6, r3
   33078:	moveq	r5, r2
   3307c:	bne	35828 <__assert_fail@plt+0x22324>
   33080:	cmp	sl, ip
   33084:	str	r5, [fp, #-68]	; 0xffffffbc
   33088:	str	r6, [fp, #-64]	; 0xffffffc0
   3308c:	beq	33bf4 <__assert_fail@plt+0x206f0>
   33090:	ldrb	r3, [ip]
   33094:	add	r8, ip, #1
   33098:	uxtb	r2, r3
   3309c:	tst	r2, #128	; 0x80
   330a0:	bne	35680 <__assert_fail@plt+0x2217c>
   330a4:	sbfx	r2, r2, #0, #7
   330a8:	sxtb	r2, r2
   330ac:	asr	r3, r2, #31
   330b0:	mov	r4, r2
   330b4:	mov	r9, r3
   330b8:	sub	r7, fp, #56	; 0x38
   330bc:	mov	r2, #0
   330c0:	mov	r1, r5
   330c4:	str	r2, [sp]
   330c8:	mov	r3, r7
   330cc:	str	r2, [sp, #4]
   330d0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   330d4:	bl	1577c <__assert_fail@plt+0x2278>
   330d8:	ldr	ip, [fp, #-96]	; 0xffffffa0
   330dc:	mov	r2, r5
   330e0:	str	r7, [sp]
   330e4:	mov	r3, r6
   330e8:	mov	r0, #1
   330ec:	asr	r1, ip, #31
   330f0:	mul	r9, ip, r9
   330f4:	mla	r9, r4, r1, r9
   330f8:	movw	r1, #15852	; 0x3dec
   330fc:	umull	r4, r5, ip, r4
   33100:	movt	r1, #4
   33104:	add	r5, r9, r5
   33108:	strd	r4, [sp, #8]
   3310c:	bl	13204 <__printf_chk@plt>
   33110:	b	32c9c <__assert_fail@plt+0x1f798>
   33114:	cmp	sl, r6
   33118:	beq	33bf4 <__assert_fail@plt+0x206f0>
   3311c:	ldrb	r2, [r8, #1]
   33120:	mov	r3, #0
   33124:	add	ip, r8, #2
   33128:	tst	r2, #128	; 0x80
   3312c:	and	r2, r2, #127	; 0x7f
   33130:	uxtb	r2, r2
   33134:	moveq	r6, r3
   33138:	moveq	r5, r2
   3313c:	bne	35624 <__assert_fail@plt+0x22120>
   33140:	cmp	sl, ip
   33144:	str	r5, [fp, #-68]	; 0xffffffbc
   33148:	str	r6, [fp, #-64]	; 0xffffffc0
   3314c:	beq	33bf4 <__assert_fail@plt+0x206f0>
   33150:	ldrb	r3, [ip]
   33154:	add	r8, ip, #1
   33158:	uxtb	r2, r3
   3315c:	tst	r2, #128	; 0x80
   33160:	bne	3547c <__assert_fail@plt+0x21f78>
   33164:	sbfx	r2, r2, #0, #7
   33168:	sxtb	r2, r2
   3316c:	asr	r3, r2, #31
   33170:	mov	r4, r2
   33174:	mov	r9, r3
   33178:	sub	r7, fp, #56	; 0x38
   3317c:	mov	r2, #0
   33180:	mov	r1, r5
   33184:	str	r2, [sp]
   33188:	mov	r3, r7
   3318c:	str	r2, [sp, #4]
   33190:	ldr	r0, [fp, #-60]	; 0xffffffc4
   33194:	bl	1577c <__assert_fail@plt+0x2278>
   33198:	ldr	ip, [fp, #-96]	; 0xffffffa0
   3319c:	mov	r2, r5
   331a0:	str	r7, [sp]
   331a4:	mov	r3, r6
   331a8:	mov	r0, #1
   331ac:	asr	r1, ip, #31
   331b0:	mul	r9, ip, r9
   331b4:	mla	r9, r4, r1, r9
   331b8:	movw	r1, #15804	; 0x3dbc
   331bc:	umull	r4, r5, ip, r4
   331c0:	movt	r1, #4
   331c4:	add	r5, r9, r5
   331c8:	strd	r4, [sp, #8]
   331cc:	bl	13204 <__printf_chk@plt>
   331d0:	b	32c9c <__assert_fail@plt+0x1f798>
   331d4:	cmp	sl, r6
   331d8:	beq	33bf4 <__assert_fail@plt+0x206f0>
   331dc:	ldrb	r2, [r8, #1]
   331e0:	mov	r3, #0
   331e4:	add	ip, r8, #2
   331e8:	tst	r2, #128	; 0x80
   331ec:	and	r2, r2, #127	; 0x7f
   331f0:	uxtb	r2, r2
   331f4:	moveq	r7, r3
   331f8:	moveq	r5, r2
   331fc:	bne	35424 <__assert_fail@plt+0x21f20>
   33200:	cmp	sl, ip
   33204:	str	r5, [fp, #-68]	; 0xffffffbc
   33208:	str	r7, [fp, #-64]	; 0xffffffc0
   3320c:	beq	33bf4 <__assert_fail@plt+0x206f0>
   33210:	ldrb	r8, [ip]
   33214:	add	r6, ip, #1
   33218:	mov	r9, #0
   3321c:	tst	r8, #128	; 0x80
   33220:	and	r8, r8, #127	; 0x7f
   33224:	uxtb	r8, r8
   33228:	bne	35e08 <__assert_fail@plt+0x22904>
   3322c:	sub	ip, fp, #56	; 0x38
   33230:	mov	r4, #0
   33234:	mov	r1, r5
   33238:	mov	r2, r4
   3323c:	mov	r3, ip
   33240:	ldr	r0, [fp, #-60]	; 0xffffffc4
   33244:	str	r4, [sp]
   33248:	str	r4, [sp, #4]
   3324c:	str	ip, [fp, #-720]	; 0xfffffd30
   33250:	bl	1577c <__assert_fail@plt+0x2278>
   33254:	ldr	ip, [fp, #-720]	; 0xfffffd30
   33258:	movw	r1, #15772	; 0x3d9c
   3325c:	mov	r2, r5
   33260:	mov	r3, r7
   33264:	mov	r0, #1
   33268:	movt	r1, #4
   3326c:	str	ip, [sp]
   33270:	b	32e70 <__assert_fail@plt+0x1f96c>
   33274:	cmp	sl, r6
   33278:	beq	33bf4 <__assert_fail@plt+0x206f0>
   3327c:	ldrb	r0, [r8, #1]
   33280:	mov	r1, #0
   33284:	add	r4, r8, #2
   33288:	tst	r0, #128	; 0x80
   3328c:	and	r0, r0, #127	; 0x7f
   33290:	moveq	ip, r1
   33294:	uxtb	r0, r0
   33298:	bne	35dac <__assert_fail@plt+0x228a8>
   3329c:	mov	r2, r0
   332a0:	mov	r3, ip
   332a4:	str	r0, [fp, #-68]	; 0xffffffbc
   332a8:	movw	r1, #15740	; 0x3d7c
   332ac:	mov	r0, #1
   332b0:	movt	r1, #4
   332b4:	str	ip, [fp, #-64]	; 0xffffffc0
   332b8:	bl	13204 <__printf_chk@plt>
   332bc:	rsb	r2, r4, sl
   332c0:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   332c4:	asr	r3, r2, #31
   332c8:	cmp	r3, r1
   332cc:	cmpeq	r2, r0
   332d0:	bcc	33bf4 <__assert_fail@plt+0x206f0>
   332d4:	ldr	r5, [fp, #-116]	; 0xffffff8c
   332d8:	mov	r2, #10
   332dc:	ldr	r6, [fp, #-100]	; 0xffffff9c
   332e0:	mov	ip, #0
   332e4:	strd	r0, [sp, #16]
   332e8:	mov	r3, r2
   332ec:	str	r5, [sp]
   332f0:	str	r6, [sp, #4]
   332f4:	str	r4, [sp, #24]
   332f8:	ldr	r0, [fp, #-168]	; 0xffffff58
   332fc:	str	ip, [sp, #8]
   33300:	ldr	r1, [fp, #-132]	; 0xffffff7c
   33304:	str	ip, [sp, #12]
   33308:	bl	274ac <__assert_fail@plt+0x13fa8>
   3330c:	ldr	r8, [fp, #-68]	; 0xffffffbc
   33310:	add	r8, r4, r8
   33314:	b	32c9c <__assert_fail@plt+0x1f798>
   33318:	cmp	sl, r6
   3331c:	beq	33bf4 <__assert_fail@plt+0x206f0>
   33320:	ldrb	r0, [r8, #1]
   33324:	mov	r1, #0
   33328:	add	ip, r8, #2
   3332c:	tst	r0, #128	; 0x80
   33330:	and	r0, r0, #127	; 0x7f
   33334:	moveq	lr, r1
   33338:	uxtb	r0, r0
   3333c:	bne	35c38 <__assert_fail@plt+0x22734>
   33340:	movw	r1, #15712	; 0x3d60
   33344:	mov	r2, r0
   33348:	mov	r3, lr
   3334c:	movt	r1, #4
   33350:	b	32c88 <__assert_fail@plt+0x1f784>
   33354:	cmp	sl, r6
   33358:	beq	33bf4 <__assert_fail@plt+0x206f0>
   3335c:	ldrb	r1, [r8, #1]
   33360:	add	r5, r8, #2
   33364:	mov	r3, #0
   33368:	tst	r1, #128	; 0x80
   3336c:	and	r1, r1, #127	; 0x7f
   33370:	uxtb	r2, r1
   33374:	bne	35bdc <__assert_fail@plt+0x226d8>
   33378:	mov	r6, r2
   3337c:	mov	r4, r3
   33380:	sub	r7, fp, #56	; 0x38
   33384:	mov	r2, #0
   33388:	ldr	r0, [fp, #-60]	; 0xffffffc4
   3338c:	mov	r8, r5
   33390:	mov	r3, r7
   33394:	str	r2, [sp]
   33398:	str	r2, [sp, #4]
   3339c:	str	r6, [fp, #-68]	; 0xffffffbc
   333a0:	str	r4, [fp, #-64]	; 0xffffffc0
   333a4:	bl	1577c <__assert_fail@plt+0x2278>
   333a8:	str	r7, [sp]
   333ac:	mov	r2, r6
   333b0:	mov	r3, r4
   333b4:	movw	r1, #15676	; 0x3d3c
   333b8:	mov	r0, #1
   333bc:	movt	r1, #4
   333c0:	bl	13204 <__printf_chk@plt>
   333c4:	b	32c9c <__assert_fail@plt+0x1f798>
   333c8:	cmp	sl, r6
   333cc:	beq	33bf4 <__assert_fail@plt+0x206f0>
   333d0:	ldrb	r2, [r8, #1]
   333d4:	mov	r3, #0
   333d8:	add	ip, r8, #2
   333dc:	tst	r2, #128	; 0x80
   333e0:	and	r2, r2, #127	; 0x7f
   333e4:	uxtb	r2, r2
   333e8:	moveq	r5, r3
   333ec:	moveq	r4, r2
   333f0:	bne	34f9c <__assert_fail@plt+0x21a98>
   333f4:	cmp	sl, ip
   333f8:	str	r4, [fp, #-68]	; 0xffffffbc
   333fc:	str	r5, [fp, #-64]	; 0xffffffc0
   33400:	beq	33bf4 <__assert_fail@plt+0x206f0>
   33404:	ldrb	r2, [ip]
   33408:	mov	r3, #0
   3340c:	add	r8, ip, #1
   33410:	tst	r2, #128	; 0x80
   33414:	and	r2, r2, #127	; 0x7f
   33418:	uxtb	r2, r2
   3341c:	moveq	r7, r3
   33420:	moveq	r9, r2
   33424:	bne	34f38 <__assert_fail@plt+0x21a34>
   33428:	sub	r6, fp, #56	; 0x38
   3342c:	mov	r2, #0
   33430:	mov	r1, r4
   33434:	str	r2, [sp]
   33438:	mov	r3, r6
   3343c:	str	r2, [sp, #4]
   33440:	ldr	r0, [fp, #-60]	; 0xffffffc4
   33444:	bl	1577c <__assert_fail@plt+0x2278>
   33448:	str	r6, [sp]
   3344c:	str	r9, [sp, #8]
   33450:	mov	r2, r4
   33454:	str	r7, [sp, #12]
   33458:	mov	r3, r5
   3345c:	movw	r1, #15636	; 0x3d14
   33460:	mov	r0, #1
   33464:	movt	r1, #4
   33468:	bl	13204 <__printf_chk@plt>
   3346c:	b	32c9c <__assert_fail@plt+0x1f798>
   33470:	movw	r0, #15616	; 0x3d00
   33474:	movt	r0, #4
   33478:	mov	r8, r6
   3347c:	bl	12fdc <puts@plt>
   33480:	b	32c9c <__assert_fail@plt+0x1f798>
   33484:	movw	r0, #15596	; 0x3cec
   33488:	movt	r0, #4
   3348c:	mov	r8, r6
   33490:	bl	12fdc <puts@plt>
   33494:	b	32c9c <__assert_fail@plt+0x1f798>
   33498:	cmp	sl, r6
   3349c:	beq	33bf4 <__assert_fail@plt+0x206f0>
   334a0:	ldrb	r2, [r8, #1]
   334a4:	mov	r3, #0
   334a8:	add	lr, r8, #2
   334ac:	tst	r2, #128	; 0x80
   334b0:	and	r2, r2, #127	; 0x7f
   334b4:	uxtb	r2, r2
   334b8:	moveq	r6, r3
   334bc:	moveq	r5, r2
   334c0:	bne	34edc <__assert_fail@plt+0x219d8>
   334c4:	cmp	sl, lr
   334c8:	str	r5, [fp, #-68]	; 0xffffffbc
   334cc:	str	r6, [fp, #-64]	; 0xffffffc0
   334d0:	beq	33bf4 <__assert_fail@plt+0x206f0>
   334d4:	ldrb	ip, [lr]
   334d8:	add	r8, lr, #1
   334dc:	mov	r3, #0
   334e0:	tst	ip, #128	; 0x80
   334e4:	and	ip, ip, #127	; 0x7f
   334e8:	uxtb	r2, ip
   334ec:	bne	343c8 <__assert_fail@plt+0x20ec4>
   334f0:	mov	r9, r2
   334f4:	mov	r7, r3
   334f8:	mov	r4, #0
   334fc:	mov	r1, r5
   33500:	sub	r3, fp, #56	; 0x38
   33504:	mov	r2, r4
   33508:	ldr	r0, [fp, #-60]	; 0xffffffc4
   3350c:	str	r4, [sp]
   33510:	str	r4, [sp, #4]
   33514:	str	ip, [fp, #-720]	; 0xfffffd30
   33518:	bl	1577c <__assert_fail@plt+0x2278>
   3351c:	ldr	ip, [fp, #-720]	; 0xfffffd30
   33520:	mov	r2, r4
   33524:	sub	r3, fp, #56	; 0x38
   33528:	ldr	r0, [fp, #-60]	; 0xffffffc4
   3352c:	str	r4, [sp]
   33530:	mov	r1, ip
   33534:	str	r4, [sp, #4]
   33538:	bl	1577c <__assert_fail@plt+0x2278>
   3353c:	sub	r2, fp, #56	; 0x38
   33540:	str	r9, [sp, #8]
   33544:	mov	r3, r6
   33548:	str	r2, [sp]
   3354c:	movw	r1, #15556	; 0x3cc4
   33550:	str	r2, [sp, #16]
   33554:	movt	r1, #4
   33558:	mov	r2, r5
   3355c:	str	r7, [sp, #12]
   33560:	mov	r0, #1
   33564:	bl	13204 <__printf_chk@plt>
   33568:	b	32c9c <__assert_fail@plt+0x1f798>
   3356c:	cmp	sl, r6
   33570:	beq	33bf4 <__assert_fail@plt+0x206f0>
   33574:	ldrb	r1, [r8, #1]
   33578:	add	r5, r8, #2
   3357c:	mov	r3, #0
   33580:	tst	r1, #128	; 0x80
   33584:	and	r1, r1, #127	; 0x7f
   33588:	uxtb	r2, r1
   3358c:	bne	344dc <__assert_fail@plt+0x20fd8>
   33590:	mov	r6, r2
   33594:	mov	r4, r3
   33598:	sub	r7, fp, #56	; 0x38
   3359c:	mov	r2, #0
   335a0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   335a4:	mov	r8, r5
   335a8:	mov	r3, r7
   335ac:	str	r2, [sp]
   335b0:	str	r2, [sp, #4]
   335b4:	str	r6, [fp, #-68]	; 0xffffffbc
   335b8:	str	r4, [fp, #-64]	; 0xffffffc0
   335bc:	bl	1577c <__assert_fail@plt+0x2278>
   335c0:	str	r7, [sp]
   335c4:	mov	r2, r6
   335c8:	mov	r3, r4
   335cc:	movw	r1, #15528	; 0x3ca8
   335d0:	mov	r0, #1
   335d4:	movt	r1, #4
   335d8:	bl	13204 <__printf_chk@plt>
   335dc:	b	32c9c <__assert_fail@plt+0x1f798>
   335e0:	cmp	sl, r6
   335e4:	beq	33bf4 <__assert_fail@plt+0x206f0>
   335e8:	ldrb	r1, [r8, #1]
   335ec:	add	r5, r8, #2
   335f0:	mov	r3, #0
   335f4:	tst	r1, #128	; 0x80
   335f8:	and	r1, r1, #127	; 0x7f
   335fc:	uxtb	r2, r1
   33600:	bne	34480 <__assert_fail@plt+0x20f7c>
   33604:	mov	r6, r2
   33608:	mov	r4, r3
   3360c:	sub	r7, fp, #56	; 0x38
   33610:	mov	r2, #0
   33614:	ldr	r0, [fp, #-60]	; 0xffffffc4
   33618:	mov	r8, r5
   3361c:	mov	r3, r7
   33620:	str	r2, [sp]
   33624:	str	r2, [sp, #4]
   33628:	str	r6, [fp, #-68]	; 0xffffffbc
   3362c:	str	r4, [fp, #-64]	; 0xffffffc0
   33630:	bl	1577c <__assert_fail@plt+0x2278>
   33634:	str	r7, [sp]
   33638:	mov	r2, r6
   3363c:	mov	r3, r4
   33640:	movw	r1, #15500	; 0x3c8c
   33644:	mov	r0, #1
   33648:	movt	r1, #4
   3364c:	bl	13204 <__printf_chk@plt>
   33650:	b	32c9c <__assert_fail@plt+0x1f798>
   33654:	cmp	sl, r6
   33658:	beq	33bf4 <__assert_fail@plt+0x206f0>
   3365c:	ldrb	r1, [r8, #1]
   33660:	add	r5, r8, #2
   33664:	mov	r3, #0
   33668:	tst	r1, #128	; 0x80
   3366c:	and	r1, r1, #127	; 0x7f
   33670:	uxtb	r2, r1
   33674:	bne	349f0 <__assert_fail@plt+0x214ec>
   33678:	mov	r6, r2
   3367c:	mov	r4, r3
   33680:	sub	r7, fp, #56	; 0x38
   33684:	mov	r2, #0
   33688:	ldr	r0, [fp, #-60]	; 0xffffffc4
   3368c:	mov	r8, r5
   33690:	mov	r3, r7
   33694:	str	r2, [sp]
   33698:	str	r2, [sp, #4]
   3369c:	str	r6, [fp, #-68]	; 0xffffffbc
   336a0:	str	r4, [fp, #-64]	; 0xffffffc0
   336a4:	bl	1577c <__assert_fail@plt+0x2278>
   336a8:	str	r7, [sp]
   336ac:	mov	r2, r6
   336b0:	mov	r3, r4
   336b4:	movw	r1, #15464	; 0x3c68
   336b8:	mov	r0, #1
   336bc:	movt	r1, #4
   336c0:	bl	13204 <__printf_chk@plt>
   336c4:	b	32c9c <__assert_fail@plt+0x1f798>
   336c8:	cmp	sl, r6
   336cc:	beq	33bf4 <__assert_fail@plt+0x206f0>
   336d0:	ldrb	r2, [r8, #1]
   336d4:	mov	r3, #0
   336d8:	add	ip, r8, #2
   336dc:	tst	r2, #128	; 0x80
   336e0:	and	r2, r2, #127	; 0x7f
   336e4:	uxtb	r2, r2
   336e8:	moveq	r9, r3
   336ec:	moveq	r6, r2
   336f0:	bne	34428 <__assert_fail@plt+0x20f24>
   336f4:	cmp	sl, ip
   336f8:	str	r6, [fp, #-68]	; 0xffffffbc
   336fc:	str	r9, [fp, #-64]	; 0xffffffc0
   33700:	beq	33bf4 <__assert_fail@plt+0x206f0>
   33704:	ldrb	r2, [ip]
   33708:	mov	r3, #0
   3370c:	add	r8, ip, #1
   33710:	tst	r2, #128	; 0x80
   33714:	and	r2, r2, #127	; 0x7f
   33718:	streq	r3, [fp, #-108]	; 0xffffff94
   3371c:	uxtb	r2, r2
   33720:	moveq	r7, r2
   33724:	bne	347fc <__assert_fail@plt+0x212f8>
   33728:	sub	ip, fp, #56	; 0x38
   3372c:	mov	r2, #0
   33730:	mov	r1, r6
   33734:	str	r2, [sp]
   33738:	mov	r3, ip
   3373c:	str	r2, [sp, #4]
   33740:	ldr	r0, [fp, #-60]	; 0xffffffc4
   33744:	str	ip, [fp, #-720]	; 0xfffffd30
   33748:	bl	1577c <__assert_fail@plt+0x2278>
   3374c:	ldr	lr, [fp, #-96]	; 0xffffffa0
   33750:	mov	r2, r6
   33754:	ldr	ip, [fp, #-720]	; 0xfffffd30
   33758:	mov	r3, r9
   3375c:	ldr	r6, [fp, #-108]	; 0xffffff94
   33760:	mov	r0, #1
   33764:	umull	r4, r5, r7, lr
   33768:	asr	r1, lr, #31
   3376c:	str	ip, [sp]
   33770:	mul	r7, r7, r1
   33774:	movw	r1, #15416	; 0x3c38
   33778:	mla	ip, lr, r6, r7
   3377c:	movt	r1, #4
   33780:	add	r5, ip, r5
   33784:	strd	r4, [sp, #8]
   33788:	bl	13204 <__printf_chk@plt>
   3378c:	b	32c9c <__assert_fail@plt+0x1f798>
   33790:	rsb	r3, r6, sl
   33794:	cmp	r3, #3
   33798:	bls	33bf4 <__assert_fail@plt+0x206f0>
   3379c:	ldr	r5, [fp, #-132]	; 0xffffff7c
   337a0:	ldr	r0, [r8, #1]
   337a4:	ldrb	r3, [r5, #84]	; 0x54
   337a8:	cmp	r3, #0
   337ac:	bne	347f4 <__assert_fail@plt+0x212f0>
   337b0:	ldrd	r8, [fp, #-92]	; 0xffffffa4
   337b4:	mov	r2, r0
   337b8:	ldr	ip, [fp, #-124]	; 0xffffff84
   337bc:	movw	r1, #15380	; 0x3c14
   337c0:	str	r0, [fp, #-68]	; 0xffffffbc
   337c4:	movt	r1, #4
   337c8:	umlal	r8, r9, ip, r0
   337cc:	mov	ip, #0
   337d0:	mov	r3, ip
   337d4:	mov	r0, #1
   337d8:	str	ip, [fp, #-64]	; 0xffffffc0
   337dc:	strd	r8, [fp, #-92]	; 0xffffffa4
   337e0:	add	r8, r6, #4
   337e4:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   337e8:	strd	r4, [sp]
   337ec:	bl	13204 <__printf_chk@plt>
   337f0:	b	32c9c <__assert_fail@plt+0x1f798>
   337f4:	rsb	r3, r6, sl
   337f8:	cmp	r3, #1
   337fc:	bls	33bf4 <__assert_fail@plt+0x206f0>
   33800:	ldr	r5, [fp, #-132]	; 0xffffff7c
   33804:	movw	r1, #15344	; 0x3bf0
   33808:	ldr	ip, [fp, #-124]	; 0xffffff84
   3380c:	movt	r1, #4
   33810:	mov	r0, #1
   33814:	ldrb	r3, [r5, #84]	; 0x54
   33818:	mov	r5, #0
   3381c:	cmp	r3, #0
   33820:	ldrhne	r3, [r8, #1]
   33824:	ldrheq	r4, [r8, #1]
   33828:	ldrd	r8, [fp, #-92]	; 0xffffffa4
   3382c:	lslne	r2, r3, #8
   33830:	orrne	r3, r2, r3, lsr #8
   33834:	uxthne	r4, r3
   33838:	mov	r3, r5
   3383c:	umlal	r8, r9, r4, ip
   33840:	uxth	r4, r4
   33844:	strd	r4, [fp, #-68]	; 0xffffffbc
   33848:	mov	r2, r4
   3384c:	strd	r8, [fp, #-92]	; 0xffffffa4
   33850:	add	r8, r6, #2
   33854:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   33858:	strd	r4, [sp]
   3385c:	bl	13204 <__printf_chk@plt>
   33860:	b	32c9c <__assert_fail@plt+0x1f798>
   33864:	cmp	sl, r6
   33868:	beq	33bf4 <__assert_fail@plt+0x206f0>
   3386c:	ldrb	r2, [r8, #1]
   33870:	movw	r1, #15312	; 0x3bd0
   33874:	ldr	r7, [fp, #-124]	; 0xffffff84
   33878:	movt	r1, #4
   3387c:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   33880:	mov	r0, #1
   33884:	add	r8, r8, #2
   33888:	mul	r3, r7, r2
   3388c:	adds	r4, r4, r3
   33890:	adc	r5, r5, #0
   33894:	strd	r4, [sp]
   33898:	strd	r4, [fp, #-92]	; 0xffffffa4
   3389c:	bl	13204 <__printf_chk@plt>
   338a0:	b	32c9c <__assert_fail@plt+0x1f798>
   338a4:	cmp	sl, r6
   338a8:	beq	33bf4 <__assert_fail@plt+0x206f0>
   338ac:	ldr	r5, [fp, #-132]	; 0xffffff7c
   338b0:	mov	r1, r6
   338b4:	mov	r2, sl
   338b8:	ldr	r0, [fp, #-180]	; 0xffffff4c
   338bc:	add	r3, r5, #84	; 0x54
   338c0:	str	r3, [sp, #4]
   338c4:	str	r5, [sp]
   338c8:	sub	r3, fp, #68	; 0x44
   338cc:	bl	212ac <__assert_fail@plt+0xdda8>
   338d0:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   338d4:	ldrd	r6, [fp, #-140]	; 0xffffff74
   338d8:	movw	r1, #15280	; 0x3bb0
   338dc:	movt	r1, #4
   338e0:	adds	r6, r6, r2
   338e4:	adc	r7, r7, r3
   338e8:	strd	r6, [sp]
   338ec:	strd	r6, [fp, #-92]	; 0xffffffa4
   338f0:	mov	r8, r0
   338f4:	mov	r0, #1
   338f8:	bl	13204 <__printf_chk@plt>
   338fc:	b	32c9c <__assert_fail@plt+0x1f798>
   33900:	movw	r0, #15240	; 0x3b88
   33904:	movt	r0, #4
   33908:	mov	r8, r6
   3390c:	bl	12fdc <puts@plt>
   33910:	b	32c9c <__assert_fail@plt+0x1f798>
   33914:	movw	r1, #16128	; 0x3f00
   33918:	mov	r0, #1
   3391c:	movt	r1, #4
   33920:	mov	r8, r6
   33924:	bl	13204 <__printf_chk@plt>
   33928:	b	32c9c <__assert_fail@plt+0x1f798>
   3392c:	ldr	r4, [fp, #-124]	; 0xffffff84
   33930:	and	r2, r2, #63	; 0x3f
   33934:	mov	r8, r6
   33938:	ldrd	r6, [fp, #-92]	; 0xffffffa4
   3393c:	movw	r1, #16144	; 0x3f10
   33940:	mov	r0, #1
   33944:	mul	r3, r4, r2
   33948:	movt	r1, #4
   3394c:	adds	r6, r6, r3
   33950:	adc	r7, r7, #0
   33954:	strd	r6, [sp]
   33958:	strd	r6, [fp, #-92]	; 0xffffffa4
   3395c:	bl	13204 <__printf_chk@plt>
   33960:	b	32c9c <__assert_fail@plt+0x1f798>
   33964:	and	r8, r2, #63	; 0x3f
   33968:	sub	r3, fp, #56	; 0x38
   3396c:	mov	r2, #0
   33970:	ldr	r0, [fp, #-60]	; 0xffffffc4
   33974:	mov	r1, r8
   33978:	str	r2, [sp]
   3397c:	str	r2, [sp, #4]
   33980:	bl	1577c <__assert_fail@plt+0x2278>
   33984:	mov	r2, r8
   33988:	sub	r3, fp, #56	; 0x38
   3398c:	movw	r1, #16212	; 0x3f54
   33990:	mov	r0, #1
   33994:	movt	r1, #4
   33998:	bl	13204 <__printf_chk@plt>
   3399c:	mov	r8, r6
   339a0:	b	32c9c <__assert_fail@plt+0x1f798>
   339a4:	cmp	r3, #3
   339a8:	ble	33f58 <__assert_fail@plt+0x20a54>
   339ac:	cmp	ip, #0
   339b0:	ldreq	r0, [r6]
   339b4:	bne	34ed0 <__assert_fail@plt+0x219cc>
   339b8:	ldr	r5, [fp, #-160]	; 0xffffff60
   339bc:	cmn	r0, #1
   339c0:	add	r7, r6, #4
   339c4:	str	r7, [fp, #-724]	; 0xfffffd2c
   339c8:	eor	r2, r5, #1
   339cc:	movne	r3, #0
   339d0:	moveq	r3, #1
   339d4:	sub	r7, fp, #512	; 0x200
   339d8:	tst	r2, r3
   339dc:	mov	r4, r0
   339e0:	mov	r5, #0
   339e4:	strd	r4, [r7, #-220]	; 0xffffff24
   339e8:	beq	328c4 <__assert_fail@plt+0x1f3c0>
   339ec:	mvn	r6, #0
   339f0:	str	r6, [fp, #-140]	; 0xffffff74
   339f4:	ldr	ip, [fp, #-724]	; 0xfffffd2c
   339f8:	rsb	r3, ip, sl
   339fc:	cmp	r3, #1
   33a00:	ble	33f58 <__assert_fail@plt+0x20a54>
   33a04:	add	r9, ip, #1
   33a08:	ldrb	r4, [ip]
   33a0c:	mov	r1, #0
   33a10:	rsb	r2, r9, sl
   33a14:	mov	r0, r9
   33a18:	str	r4, [fp, #-116]	; 0xffffff8c
   33a1c:	bl	13270 <memchr@plt>
   33a20:	cmp	r0, #0
   33a24:	beq	33f58 <__assert_fail@plt+0x20a54>
   33a28:	cmp	r4, #3
   33a2c:	add	r3, r0, #1
   33a30:	bls	33f44 <__assert_fail@plt+0x20a40>
   33a34:	rsb	r3, r3, sl
   33a38:	cmp	r3, #4
   33a3c:	ble	33f58 <__assert_fail@plt+0x20a54>
   33a40:	ldrb	r5, [r0, #1]
   33a44:	add	r3, r0, #3
   33a48:	ldrb	r0, [r0, #2]
   33a4c:	str	r5, [fp, #-100]	; 0xffffff9c
   33a50:	str	r0, [fp, #-156]	; 0xffffff64
   33a54:	rsb	r0, r3, sl
   33a58:	cmp	r0, #0
   33a5c:	ble	33f58 <__assert_fail@plt+0x20a54>
   33a60:	ldrb	r2, [r3]
   33a64:	add	r1, r3, #1
   33a68:	mov	r5, #0
   33a6c:	tst	r2, #128	; 0x80
   33a70:	and	r2, r2, #127	; 0x7f
   33a74:	uxtb	r4, r2
   33a78:	bne	34cc0 <__assert_fail@plt+0x217bc>
   33a7c:	str	r2, [fp, #-124]	; 0xffffff84
   33a80:	rsb	r2, r1, sl
   33a84:	cmp	r2, #0
   33a88:	ble	33f58 <__assert_fail@plt+0x20a54>
   33a8c:	ldrb	r0, [r1]
   33a90:	add	ip, r1, #1
   33a94:	uxtb	r3, r0
   33a98:	tst	r3, #128	; 0x80
   33a9c:	bne	34c48 <__assert_fail@plt+0x21744>
   33aa0:	sbfx	r3, r3, #0, #7
   33aa4:	uxtb	r3, r3
   33aa8:	sxtb	r4, r3
   33aac:	str	r4, [fp, #-96]	; 0xffffffa0
   33ab0:	str	r4, [fp, #-108]	; 0xffffff94
   33ab4:	ldr	r4, [fp, #-724]	; 0xfffffd2c
   33ab8:	ldrb	r3, [r4, #1]
   33abc:	cmp	r3, #101	; 0x65
   33ac0:	bne	33aec <__assert_fail@plt+0x205e8>
   33ac4:	ldrb	r3, [r4, #2]
   33ac8:	cmp	r3, #104	; 0x68
   33acc:	bne	33aec <__assert_fail@plt+0x205e8>
   33ad0:	ldrb	r3, [r4, #3]
   33ad4:	cmp	r3, #0
   33ad8:	bne	33aec <__assert_fail@plt+0x205e8>
   33adc:	cmp	r8, #1
   33ae0:	movne	r3, #8
   33ae4:	moveq	r3, #4
   33ae8:	add	ip, ip, r3
   33aec:	rsb	r5, ip, sl
   33af0:	cmp	r5, #0
   33af4:	ble	33f58 <__assert_fail@plt+0x20a54>
   33af8:	ldr	r7, [fp, #-116]	; 0xffffff8c
   33afc:	ldrb	r4, [ip]
   33b00:	cmp	r7, #1
   33b04:	beq	34740 <__assert_fail@plt+0x2123c>
   33b08:	tst	r4, #128	; 0x80
   33b0c:	and	r4, r4, #127	; 0x7f
   33b10:	add	r8, ip, #1
   33b14:	mov	r3, #0
   33b18:	uxtb	r2, r4
   33b1c:	bne	346e0 <__assert_fail@plt+0x211dc>
   33b20:	ldrd	r0, [fp, #-92]	; 0xffffffa4
   33b24:	ldr	r5, [fp, #-116]	; 0xffffff8c
   33b28:	ldr	r3, [fp, #-140]	; 0xffffff74
   33b2c:	strd	r0, [sp]
   33b30:	movw	r1, #14460	; 0x387c
   33b34:	str	r6, [sp, #8]
   33b38:	movt	r1, #4
   33b3c:	str	r3, [sp, #12]
   33b40:	mov	r0, #1
   33b44:	str	r5, [sp, #16]
   33b48:	ldr	r2, [fp, #-144]	; 0xffffff70
   33b4c:	str	r9, [sp, #20]
   33b50:	bl	13204 <__printf_chk@plt>
   33b54:	cmp	r5, #3
   33b58:	bhi	33fd0 <__assert_fail@plt+0x20acc>
   33b5c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   33b60:	movw	r1, #14656	; 0x3940
   33b64:	str	r4, [sp]
   33b68:	mov	r0, #1
   33b6c:	movt	r1, #4
   33b70:	ldr	r2, [fp, #-124]	; 0xffffff84
   33b74:	bl	13204 <__printf_chk@plt>
   33b78:	ldr	r6, [fp, #-724]	; 0xfffffd2c
   33b7c:	ldrb	r3, [r6, #1]
   33b80:	cmp	r3, #122	; 0x7a
   33b84:	movne	r5, #0
   33b88:	strne	r5, [fp, #-180]	; 0xffffff4c
   33b8c:	beq	33fec <__assert_fail@plt+0x20ae8>
   33b90:	ldr	r6, [fp, #-100]	; 0xffffff9c
   33b94:	cmp	r6, #4
   33b98:	cmpne	r6, #8
   33b9c:	bne	34bac <__assert_fail@plt+0x216a8>
   33ba0:	mov	r6, #0
   33ba4:	mov	r7, #0
   33ba8:	strd	r6, [fp, #-140]	; 0xffffff74
   33bac:	sub	sp, sp, #32
   33bb0:	ldr	r7, [fp, #-148]	; 0xffffff6c
   33bb4:	add	r3, sp, #32
   33bb8:	ldr	ip, [fp, #-144]	; 0xffffff70
   33bbc:	ldr	r4, [fp, #-180]	; 0xffffff4c
   33bc0:	str	r7, [sp, #52]	; 0x34
   33bc4:	strb	r5, [sp, #50]	; 0x32
   33bc8:	ldr	r6, [fp, #-124]	; 0xffffff84
   33bcc:	ldr	r5, [fp, #-100]	; 0xffffff9c
   33bd0:	ldr	r7, [fp, #-108]	; 0xffffff94
   33bd4:	str	ip, [sp, #32]
   33bd8:	str	r3, [fp, #-148]	; 0xffffff6c
   33bdc:	str	r9, [sp, #36]	; 0x24
   33be0:	strb	r4, [sp, #49]	; 0x31
   33be4:	strb	r5, [sp, #48]	; 0x30
   33be8:	str	r6, [sp, #40]	; 0x28
   33bec:	str	r7, [sp, #44]	; 0x2c
   33bf0:	b	32ae0 <__assert_fail@plt+0x1f5dc>
   33bf4:	mov	r2, #5
   33bf8:	movw	r1, #15252	; 0x3b94
   33bfc:	mov	r0, #0
   33c00:	movt	r1, #4
   33c04:	bl	12d84 <dcgettext@plt>
   33c08:	movw	r3, #37704	; 0x9348
   33c0c:	movt	r3, #5
   33c10:	ldr	r1, [r3]
   33c14:	bl	1345c <fputs@plt>
   33c18:	b	32b04 <__assert_fail@plt+0x1f600>
   33c1c:	rsb	r7, r8, sl
   33c20:	cmp	r7, #0
   33c24:	ble	33f58 <__assert_fail@plt+0x20a54>
   33c28:	ldrb	r2, [r8]
   33c2c:	add	r6, r8, #1
   33c30:	mov	r3, #0
   33c34:	tst	r2, #128	; 0x80
   33c38:	and	r2, r2, #127	; 0x7f
   33c3c:	uxtb	r2, r2
   33c40:	bne	34b54 <__assert_fail@plt+0x21650>
   33c44:	rsb	r3, r6, sl
   33c48:	mov	r7, r2
   33c4c:	cmp	r2, r3
   33c50:	bhi	3401c <__assert_fail@plt+0x20b18>
   33c54:	cmp	r2, #0
   33c58:	moveq	r8, r6
   33c5c:	beq	33db0 <__assert_fail@plt+0x208ac>
   33c60:	ldrb	r2, [r5, #1]
   33c64:	add	r1, r5, #1
   33c68:	cmp	r2, #0
   33c6c:	addeq	r5, r6, r7
   33c70:	streq	r5, [fp, #-92]	; 0xffffffa4
   33c74:	beq	342d0 <__assert_fail@plt+0x20dcc>
   33c78:	add	r8, r7, #1
   33c7c:	add	r3, r5, r8
   33c80:	cmp	r1, r3
   33c84:	addcs	r8, r6, r7
   33c88:	strcs	r8, [fp, #-92]	; 0xffffffa4
   33c8c:	bcs	342d0 <__assert_fail@plt+0x20dcc>
   33c90:	add	ip, r6, r7
   33c94:	str	ip, [fp, #-92]	; 0xffffffa4
   33c98:	ldr	ip, [fp, #-132]	; 0xffffff7c
   33c9c:	mov	r3, #0
   33ca0:	movw	r4, #14316	; 0x37ec
   33ca4:	add	r5, r5, #2
   33ca8:	add	ip, ip, #84	; 0x54
   33cac:	movt	r4, #4
   33cb0:	str	ip, [fp, #-116]	; 0xffffff8c
   33cb4:	mov	ip, r3
   33cb8:	str	r7, [fp, #-144]	; 0xffffff70
   33cbc:	str	r6, [fp, #-108]	; 0xffffff94
   33cc0:	b	33ce4 <__assert_fail@plt+0x207e0>
   33cc4:	mov	r1, r5
   33cc8:	ldrb	r2, [r5], #1
   33ccc:	cmp	r2, #0
   33cd0:	beq	33d64 <__assert_fail@plt+0x20860>
   33cd4:	ldr	r0, [r9, #4]
   33cd8:	add	r0, r0, r8
   33cdc:	cmp	r1, r0
   33ce0:	bcs	33d64 <__assert_fail@plt+0x20860>
   33ce4:	cmp	r2, #76	; 0x4c
   33ce8:	bne	33cc4 <__assert_fail@plt+0x207c0>
   33cec:	ldr	r7, [fp, #-108]	; 0xffffff94
   33cf0:	sub	r3, fp, #68	; 0x44
   33cf4:	ldr	r6, [fp, #-132]	; 0xffffff7c
   33cf8:	add	r1, r7, ip
   33cfc:	ldr	ip, [fp, #-116]	; 0xffffff8c
   33d00:	ldr	r2, [fp, #-92]	; 0xffffffa4
   33d04:	str	r6, [sp]
   33d08:	str	ip, [sp, #4]
   33d0c:	ldr	r0, [fp, #-192]	; 0xffffff40
   33d10:	bl	212ac <__assert_fail@plt+0xdda8>
   33d14:	mov	r2, #5
   33d18:	movw	r1, #15128	; 0x3b18
   33d1c:	movt	r1, #4
   33d20:	rsb	ip, r7, r0
   33d24:	mov	r0, #0
   33d28:	str	ip, [fp, #-720]	; 0xfffffd30
   33d2c:	bl	12d84 <dcgettext@plt>
   33d30:	ldrd	r6, [fp, #-68]	; 0xffffffbc
   33d34:	mov	r2, r4
   33d38:	movw	r4, #15800	; 0x3db8
   33d3c:	movt	r4, #4
   33d40:	strd	r6, [sp]
   33d44:	mov	r1, r0
   33d48:	mov	r0, #1
   33d4c:	bl	13204 <__printf_chk@plt>
   33d50:	mov	r1, r5
   33d54:	ldrb	r2, [r5], #1
   33d58:	ldr	ip, [fp, #-720]	; 0xfffffd30
   33d5c:	cmp	r2, #0
   33d60:	bne	33cd4 <__assert_fail@plt+0x207d0>
   33d64:	ldr	r7, [fp, #-144]	; 0xffffff70
   33d68:	mov	r3, ip
   33d6c:	ldr	r6, [fp, #-108]	; 0xffffff94
   33d70:	cmp	ip, r7
   33d74:	bcs	33dac <__assert_fail@plt+0x208a8>
   33d78:	mov	r5, r3
   33d7c:	mov	r2, r4
   33d80:	b	33d8c <__assert_fail@plt+0x20888>
   33d84:	movw	r2, #15800	; 0x3db8
   33d88:	movt	r2, #4
   33d8c:	mov	r0, #1
   33d90:	ldrb	r3, [r6, r5]
   33d94:	movw	r1, #15160	; 0x3b38
   33d98:	add	r5, r5, r0
   33d9c:	movt	r1, #4
   33da0:	bl	13204 <__printf_chk@plt>
   33da4:	cmp	r5, r7
   33da8:	bcc	33d84 <__assert_fail@plt+0x20880>
   33dac:	ldr	r8, [fp, #-92]	; 0xffffffa4
   33db0:	mov	r7, #2
   33db4:	str	r7, [fp, #-116]	; 0xffffff8c
   33db8:	b	32ae0 <__assert_fail@plt+0x1f5dc>
   33dbc:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   33dc0:	movw	r1, #14968	; 0x3a78
   33dc4:	ldr	ip, [fp, #-164]	; 0xffffff5c
   33dc8:	movt	r1, #4
   33dcc:	ldr	r7, [fp, #-188]	; 0xffffff44
   33dd0:	mov	r0, #1
   33dd4:	ldr	r2, [fp, #-144]	; 0xffffff70
   33dd8:	ldr	r3, [ip]
   33ddc:	ldrd	r6, [r7, #16]
   33de0:	strd	r4, [sp]
   33de4:	ldrd	r4, [fp, #-76]	; 0xffffffb4
   33de8:	ldr	ip, [r9]
   33dec:	subs	r6, r6, r4
   33df0:	sbc	r7, r7, r5
   33df4:	ldr	r5, [fp, #-724]	; 0xfffffd2c
   33df8:	rsb	r3, r3, r5
   33dfc:	adds	r6, r6, r3
   33e00:	adc	r7, r7, r3, asr #31
   33e04:	strd	r6, [fp, #-92]	; 0xffffffa4
   33e08:	sub	r7, fp, #512	; 0x200
   33e0c:	ldrd	r4, [fp, #-92]	; 0xffffffa4
   33e10:	ldrd	r6, [r7, #-220]	; 0xffffff24
   33e14:	str	ip, [sp, #8]
   33e18:	strd	r6, [sp, #16]
   33e1c:	ldrd	r6, [fp, #-108]	; 0xffffff94
   33e20:	adds	r4, r4, r6
   33e24:	adc	r5, r5, r7
   33e28:	bl	13204 <__printf_chk@plt>
   33e2c:	mov	r2, r4
   33e30:	ldrb	r1, [r9, #16]
   33e34:	mov	r3, r5
   33e38:	ldrd	r4, [fp, #-156]	; 0xffffff64
   33e3c:	ldr	r0, [fp, #-168]	; 0xffffff58
   33e40:	strd	r4, [sp]
   33e44:	bl	27164 <__assert_fail@plt+0x13c60>
   33e48:	ldr	r5, [fp, #-164]	; 0xffffff5c
   33e4c:	ldr	r6, [fp, #-188]	; 0xffffff44
   33e50:	ldr	r7, [fp, #-724]	; 0xfffffd2c
   33e54:	ldr	r1, [r5]
   33e58:	ldrd	r2, [r6, #24]
   33e5c:	rsb	r1, r1, r7
   33e60:	ldrd	r4, [fp, #-156]	; 0xffffff64
   33e64:	adds	r2, r2, r1
   33e68:	adc	r3, r3, r1, asr #31
   33e6c:	adds	r4, r4, r2
   33e70:	adc	r5, r5, r3
   33e74:	strd	r4, [fp, #-140]	; 0xffffff74
   33e78:	ldr	r5, [fp, #-100]	; 0xffffff9c
   33e7c:	cmp	r5, #4
   33e80:	beq	34044 <__assert_fail@plt+0x20b40>
   33e84:	mov	r2, #5
   33e88:	movw	r1, #2432	; 0x980
   33e8c:	mov	r0, #0
   33e90:	movt	r1, #4
   33e94:	bl	12d84 <dcgettext@plt>
   33e98:	ldrd	r2, [fp, #-140]	; 0xffffff74
   33e9c:	mov	r1, r0
   33ea0:	mov	r0, #1
   33ea4:	bl	13204 <__printf_chk@plt>
   33ea8:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   33eac:	movw	r1, #15068	; 0x3adc
   33eb0:	mov	r0, #1
   33eb4:	movt	r1, #4
   33eb8:	bl	13204 <__printf_chk@plt>
   33ebc:	mov	r2, #5
   33ec0:	movw	r1, #15104	; 0x3b00
   33ec4:	mov	r0, #0
   33ec8:	movt	r1, #4
   33ecc:	bl	12d84 <dcgettext@plt>
   33ed0:	mvn	r2, #0
   33ed4:	mvn	r3, #0
   33ed8:	ldrd	r4, [fp, #-140]	; 0xffffff74
   33edc:	mov	r1, r0
   33ee0:	ldrd	r6, [fp, #-116]	; 0xffffff8c
   33ee4:	mov	r0, #1
   33ee8:	adds	r4, r4, r6
   33eec:	adc	r5, r5, r7
   33ef0:	and	r2, r2, r4
   33ef4:	and	r3, r3, r5
   33ef8:	bl	13204 <__printf_chk@plt>
   33efc:	b	32ab4 <__assert_fail@plt+0x1f5b0>
   33f00:	cmp	ip, #0
   33f04:	bne	360e8 <__assert_fail@plt+0x22be4>
   33f08:	ldr	r5, [fp, #-724]	; 0xfffffd2c
   33f0c:	mov	r8, r5
   33f10:	ldr	r3, [r5]
   33f14:	ldr	r2, [r8, #4]!
   33f18:	mov	r5, #0
   33f1c:	mov	r4, r3
   33f20:	strd	r4, [fp, #-156]	; 0xffffff64
   33f24:	mov	r4, r2
   33f28:	mov	r5, #0
   33f2c:	add	r8, r8, #4
   33f30:	strd	r4, [fp, #-116]	; 0xffffff8c
   33f34:	mov	r4, r3
   33f38:	asr	r5, r3, #31
   33f3c:	strd	r4, [fp, #-108]	; 0xffffff94
   33f40:	b	32a40 <__assert_fail@plt+0x1f53c>
   33f44:	rsb	r0, r3, sl
   33f48:	mov	r7, #0
   33f4c:	cmp	r0, #0
   33f50:	str	r7, [fp, #-156]	; 0xffffff64
   33f54:	bgt	33a60 <__assert_fail@plt+0x2055c>
   33f58:	mov	r2, #5
   33f5c:	movw	r1, #11452	; 0x2cbc
   33f60:	mov	r0, #0
   33f64:	movt	r1, #4
   33f68:	bl	12d84 <dcgettext@plt>
   33f6c:	mov	r4, r0
   33f70:	ldr	r0, [fp, #-204]	; 0xffffff34
   33f74:	bl	133d8 <elf_ndxscn@plt>
   33f78:	ldr	r6, [fp, #-200]	; 0xffffff38
   33f7c:	mov	r2, r4
   33f80:	str	r6, [sp]
   33f84:	mov	r3, r0
   33f88:	mov	r0, #0
   33f8c:	mov	r1, r0
   33f90:	bl	12f70 <error@plt>
   33f94:	b	32b38 <__assert_fail@plt+0x1f634>
   33f98:	ldr	r7, [fp, #-728]	; 0xfffffd28
   33f9c:	ldr	r6, [fp, #-732]	; 0xfffffd24
   33fa0:	str	r7, [fp, #-140]	; 0xffffff74
   33fa4:	b	339f4 <__assert_fail@plt+0x204f0>
   33fa8:	mov	r5, #8
   33fac:	str	r5, [fp, #-100]	; 0xffffff9c
   33fb0:	ldr	r7, [r9, #8]
   33fb4:	ldr	r8, [r9, #12]
   33fb8:	str	r7, [fp, #-124]	; 0xffffff84
   33fbc:	str	r8, [fp, #-96]	; 0xffffffa0
   33fc0:	b	329f8 <__assert_fail@plt+0x1f4f4>
   33fc4:	mov	r4, #4
   33fc8:	str	r4, [fp, #-100]	; 0xffffff9c
   33fcc:	b	33fb0 <__assert_fail@plt+0x20aac>
   33fd0:	ldr	r3, [fp, #-156]	; 0xffffff64
   33fd4:	movw	r1, #14588	; 0x38fc
   33fd8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   33fdc:	movt	r1, #4
   33fe0:	mov	r0, #1
   33fe4:	bl	13204 <__printf_chk@plt>
   33fe8:	b	33b5c <__assert_fail@plt+0x20658>
   33fec:	ldrb	r3, [r8]
   33ff0:	add	r6, r8, #1
   33ff4:	mov	r1, #0
   33ff8:	tst	r3, #128	; 0x80
   33ffc:	and	r3, r3, #127	; 0x7f
   34000:	uxtb	r0, r3
   34004:	bne	34868 <__assert_fail@plt+0x21364>
   34008:	str	r3, [fp, #-92]	; 0xffffffa4
   3400c:	ldr	r4, [fp, #-92]	; 0xffffffa4
   34010:	rsb	r3, r6, sl
   34014:	cmp	r3, r4
   34018:	bcs	340b8 <__assert_fail@plt+0x20bb4>
   3401c:	mov	r2, #5
   34020:	movw	r1, #14756	; 0x39a4
   34024:	mov	r0, #0
   34028:	movt	r1, #4
   3402c:	bl	12d84 <dcgettext@plt>
   34030:	mov	r2, r0
   34034:	mov	r0, #0
   34038:	mov	r1, r0
   3403c:	bl	12f70 <error@plt>
   34040:	b	32b04 <__assert_fail@plt+0x1f600>
   34044:	mov	r2, #5
   34048:	movw	r1, #2432	; 0x980
   3404c:	mov	r0, #0
   34050:	movt	r1, #4
   34054:	bl	12d84 <dcgettext@plt>
   34058:	ldrd	r6, [fp, #-140]	; 0xffffff74
   3405c:	mvn	r4, #0
   34060:	mov	r5, #0
   34064:	and	r6, r6, r4
   34068:	and	r7, r7, r5
   3406c:	strd	r6, [fp, #-140]	; 0xffffff74
   34070:	mov	r2, r6
   34074:	mov	r3, r7
   34078:	mov	r1, r0
   3407c:	mov	r0, #1
   34080:	bl	13204 <__printf_chk@plt>
   34084:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   34088:	movw	r1, #15068	; 0x3adc
   3408c:	mov	r0, #1
   34090:	movt	r1, #4
   34094:	bl	13204 <__printf_chk@plt>
   34098:	mov	r2, #5
   3409c:	movw	r1, #15104	; 0x3b00
   340a0:	mov	r0, #0
   340a4:	movt	r1, #4
   340a8:	bl	12d84 <dcgettext@plt>
   340ac:	mov	r2, r4
   340b0:	mov	r3, r5
   340b4:	b	33ed8 <__assert_fail@plt+0x209d4>
   340b8:	ldr	r7, [fp, #-724]	; 0xfffffd2c
   340bc:	add	r2, r7, #2
   340c0:	ldrb	r5, [r7, #2]
   340c4:	cmp	r5, #0
   340c8:	beq	34318 <__assert_fail@plt+0x20e14>
   340cc:	ldr	r8, [fp, #-92]	; 0xffffffa4
   340d0:	add	r3, r8, #1
   340d4:	add	r3, r9, r3
   340d8:	cmp	r2, r3
   340dc:	bcs	34314 <__assert_fail@plt+0x20e10>
   340e0:	mov	r5, #0
   340e4:	movw	r2, #14316	; 0x37ec
   340e8:	movw	ip, #37704	; 0x9348
   340ec:	str	r5, [fp, #-180]	; 0xffffff4c
   340f0:	movt	ip, #5
   340f4:	mov	r8, r5
   340f8:	sub	r7, r3, #1
   340fc:	movt	r2, #4
   34100:	str	ip, [fp, #-140]	; 0xffffff74
   34104:	mov	r4, r9
   34108:	str	sl, [fp, #-156]	; 0xffffff64
   3410c:	mov	r5, r6
   34110:	str	r9, [fp, #-192]	; 0xffffff40
   34114:	b	34150 <__assert_fail@plt+0x20c4c>
   34118:	ldrb	r2, [r5]
   3411c:	movw	r1, #59984	; 0xea50
   34120:	mov	r0, #1
   34124:	movt	r1, #3
   34128:	bl	13204 <__printf_chk@plt>
   3412c:	add	ip, r5, #1
   34130:	mov	r5, ip
   34134:	ldrb	r3, [r4, #1]
   34138:	cmp	r3, #0
   3413c:	beq	34244 <__assert_fail@plt+0x20d40>
   34140:	cmp	r4, r7
   34144:	beq	34244 <__assert_fail@plt+0x20d40>
   34148:	movw	r2, #15800	; 0x3db8
   3414c:	movt	r2, #4
   34150:	ldrb	r3, [r5]
   34154:	movw	r1, #14784	; 0x39c0
   34158:	mov	r0, #1
   3415c:	movt	r1, #4
   34160:	bl	13204 <__printf_chk@plt>
   34164:	ldrb	r3, [r4, #1]!
   34168:	cmp	r3, #82	; 0x52
   3416c:	beq	3425c <__assert_fail@plt+0x20d58>
   34170:	cmp	r3, #76	; 0x4c
   34174:	beq	3428c <__assert_fail@plt+0x20d88>
   34178:	cmp	r3, #80	; 0x50
   3417c:	bne	34118 <__assert_fail@plt+0x20c14>
   34180:	ldrb	sl, [r5]
   34184:	add	r6, r5, #1
   34188:	ldr	r9, [fp, #-132]	; 0xffffff7c
   3418c:	sub	lr, fp, #36	; 0x24
   34190:	ldr	ip, [fp, #-92]	; 0xffffffa4
   34194:	mov	r2, #0
   34198:	mov	r3, #0
   3419c:	mov	r1, r6
   341a0:	str	r9, [sp]
   341a4:	mov	r0, sl
   341a8:	strd	r2, [lr, #-32]!	; 0xffffffe0
   341ac:	add	r2, r9, #84	; 0x54
   341b0:	mov	r3, lr
   341b4:	str	r2, [sp, #4]
   341b8:	add	r2, r5, ip
   341bc:	bl	212ac <__assert_fail@plt+0xdda8>
   341c0:	cmp	r6, r0
   341c4:	mov	r9, r0
   341c8:	subcc	r6, r0, #1
   341cc:	bcs	341ec <__assert_fail@plt+0x20ce8>
   341d0:	ldrb	r2, [r5, #1]!
   341d4:	movw	r1, #14792	; 0x39c8
   341d8:	mov	r0, #1
   341dc:	movt	r1, #4
   341e0:	bl	13204 <__printf_chk@plt>
   341e4:	cmp	r5, r6
   341e8:	bne	341d0 <__assert_fail@plt+0x20ccc>
   341ec:	ldr	r5, [fp, #-140]	; 0xffffff74
   341f0:	mov	r0, #40	; 0x28
   341f4:	ldr	r1, [r5]
   341f8:	bl	12ed4 <_IO_putc@plt>
   341fc:	mov	r0, sl
   34200:	bl	15154 <__assert_fail@plt+0x1c50>
   34204:	mov	r0, #32
   34208:	ldr	r1, [r5]
   3420c:	bl	12ed4 <_IO_putc@plt>
   34210:	and	r3, sl, #15
   34214:	sub	r3, r3, #9
   34218:	cmp	r3, #2
   3421c:	bls	342b8 <__assert_fail@plt+0x20db4>
   34220:	movw	r1, #14856	; 0x3a08
   34224:	mov	r0, #1
   34228:	movt	r1, #4
   3422c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   34230:	bl	13204 <__printf_chk@plt>
   34234:	ldrb	r3, [r4, #1]
   34238:	mov	r5, r9
   3423c:	cmp	r3, #0
   34240:	bne	34140 <__assert_fail@plt+0x20c3c>
   34244:	mov	r3, r5
   34248:	ldr	sl, [fp, #-156]	; 0xffffff64
   3424c:	mov	r5, r8
   34250:	ldr	r9, [fp, #-192]	; 0xffffff40
   34254:	mov	r8, r3
   34258:	b	33b90 <__assert_fail@plt+0x2068c>
   3425c:	ldrb	r6, [r5]
   34260:	mov	r2, #5
   34264:	movw	r1, #14800	; 0x39d0
   34268:	mov	r0, #0
   3426c:	movt	r1, #4
   34270:	str	r6, [fp, #-180]	; 0xffffff4c
   34274:	add	r6, r5, #1
   34278:	bl	12d84 <dcgettext@plt>
   3427c:	ldr	r1, [fp, #-180]	; 0xffffff4c
   34280:	mov	r5, r6
   34284:	bl	1530c <__assert_fail@plt+0x1e08>
   34288:	b	34134 <__assert_fail@plt+0x20c30>
   3428c:	ldrb	r8, [r5]
   34290:	add	r6, r5, #1
   34294:	mov	r2, #5
   34298:	movw	r1, #14824	; 0x39e8
   3429c:	mov	r0, #0
   342a0:	movt	r1, #4
   342a4:	bl	12d84 <dcgettext@plt>
   342a8:	mov	r1, r8
   342ac:	mov	r5, r6
   342b0:	bl	1530c <__assert_fail@plt+0x1e08>
   342b4:	b	34134 <__assert_fail@plt+0x20c30>
   342b8:	movw	r1, #14848	; 0x3a00
   342bc:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   342c0:	movt	r1, #4
   342c4:	mov	r0, #1
   342c8:	bl	13204 <__printf_chk@plt>
   342cc:	b	34234 <__assert_fail@plt+0x20d30>
   342d0:	movw	r4, #14316	; 0x37ec
   342d4:	mov	r3, #0
   342d8:	movt	r4, #4
   342dc:	b	33d78 <__assert_fail@plt+0x20874>
   342e0:	mov	r2, #5
   342e4:	movw	r1, #14336	; 0x3800
   342e8:	movt	r1, #4
   342ec:	bl	12d84 <dcgettext@plt>
   342f0:	mov	r5, r0
   342f4:	mvn	r0, #0
   342f8:	bl	132d0 <dwfl_errmsg@plt>
   342fc:	mov	r1, r4
   34300:	mov	r2, r5
   34304:	mov	r3, r0
   34308:	mov	r0, r4
   3430c:	bl	12f70 <error@plt>
   34310:	b	32b38 <__assert_fail@plt+0x1f634>
   34314:	mov	r5, #0
   34318:	mov	r8, r6
   3431c:	str	r5, [fp, #-180]	; 0xffffff4c
   34320:	b	33b90 <__assert_fail@plt+0x2068c>
   34324:	cmp	sl, r6
   34328:	bls	3616c <__assert_fail@plt+0x22c68>
   3432c:	rsb	r6, r6, sl
   34330:	cmp	r6, #9
   34334:	movhi	r6, #10
   34338:	bls	36164 <__assert_fail@plt+0x22c60>
   3433c:	ldrb	r3, [r8, #2]
   34340:	sub	ip, fp, #512	; 0x200
   34344:	add	r7, r8, #3
   34348:	and	r4, r3, #127	; 0x7f
   3434c:	tst	r3, #128	; 0x80
   34350:	uxtb	r4, r4
   34354:	movne	r3, #1
   34358:	lsr	r8, r4, #25
   3435c:	lsl	r9, r4, #7
   34360:	str	r8, [fp, #-536]	; 0xfffffde8
   34364:	str	r9, [fp, #-540]	; 0xfffffde4
   34368:	ldrd	r8, [ip, #-28]	; 0xffffffe4
   3436c:	orr	r8, r8, r0
   34370:	orr	r9, r9, r1
   34374:	bne	36110 <__assert_fail@plt+0x22c0c>
   34378:	mov	r6, r8
   3437c:	b	32cf0 <__assert_fail@plt+0x1f7ec>
   34380:	ldr	r0, [fp, #-204]	; 0xffffff34
   34384:	mov	r1, #0
   34388:	bl	131bc <elf_rawdata@plt>
   3438c:	cmp	r0, #0
   34390:	str	r0, [fp, #-164]	; 0xffffff5c
   34394:	beq	34e94 <__assert_fail@plt+0x21990>
   34398:	mov	r2, #5
   3439c:	movw	r1, #14368	; 0x3820
   343a0:	mov	r0, #0
   343a4:	movt	r1, #4
   343a8:	bl	12d84 <dcgettext@plt>
   343ac:	mov	r6, r0
   343b0:	ldr	r0, [fp, #-204]	; 0xffffff34
   343b4:	bl	133d8 <elf_ndxscn@plt>
   343b8:	ldr	r9, [fp, #-188]	; 0xffffff44
   343bc:	ldrd	r4, [r9, #24]
   343c0:	mov	r2, r0
   343c4:	b	327b4 <__assert_fail@plt+0x1f2b0>
   343c8:	cmp	sl, lr
   343cc:	bls	34b1c <__assert_fail@plt+0x21618>
   343d0:	rsb	r7, lr, sl
   343d4:	cmp	r7, #9
   343d8:	movhi	r7, #10
   343dc:	bls	34b14 <__assert_fail@plt+0x21610>
   343e0:	ldrb	r1, [lr, #1]
   343e4:	add	r8, lr, #2
   343e8:	and	r0, r1, #127	; 0x7f
   343ec:	tst	r1, #128	; 0x80
   343f0:	sub	r1, fp, #512	; 0x200
   343f4:	uxtb	r0, r0
   343f8:	lsl	ip, r0, #7
   343fc:	lsr	r9, r0, #25
   34400:	str	ip, [fp, #-412]	; 0xfffffe64
   34404:	str	r9, [fp, #-408]	; 0xfffffe68
   34408:	ldrd	r0, [r1, #100]	; 0x64
   3440c:	orr	r3, r3, r1
   34410:	movne	r1, #1
   34414:	orr	r2, r2, r0
   34418:	movne	ip, r1
   3441c:	bne	34a4c <__assert_fail@plt+0x21548>
   34420:	mov	ip, r2
   34424:	b	334f0 <__assert_fail@plt+0x1ffec>
   34428:	cmp	sl, r6
   3442c:	bls	34544 <__assert_fail@plt+0x21040>
   34430:	rsb	r6, r6, sl
   34434:	cmp	r6, #9
   34438:	movhi	r9, #10
   3443c:	bls	34538 <__assert_fail@plt+0x21034>
   34440:	ldrb	r1, [r8, #2]
   34444:	add	ip, r8, #3
   34448:	sub	r8, fp, #512	; 0x200
   3444c:	and	r0, r1, #127	; 0x7f
   34450:	tst	r1, #128	; 0x80
   34454:	uxtb	r0, r0
   34458:	lsr	r6, r0, #25
   3445c:	lsl	r7, r0, #7
   34460:	str	r6, [fp, #-360]	; 0xfffffe98
   34464:	str	r7, [fp, #-364]	; 0xfffffe94
   34468:	ldrd	r6, [r8, #148]	; 0x94
   3446c:	orr	r6, r6, r2
   34470:	orr	r7, r7, r3
   34474:	bne	345e0 <__assert_fail@plt+0x210dc>
   34478:	mov	r9, r7
   3447c:	b	336f4 <__assert_fail@plt+0x201f0>
   34480:	cmp	sl, r6
   34484:	bls	346d0 <__assert_fail@plt+0x211cc>
   34488:	rsb	r6, r6, sl
   3448c:	cmp	r6, #9
   34490:	movhi	r9, #10
   34494:	bls	346c4 <__assert_fail@plt+0x211c0>
   34498:	ldrb	r1, [r8, #2]
   3449c:	add	r5, r8, #3
   344a0:	sub	r8, fp, #512	; 0x200
   344a4:	and	r0, r1, #127	; 0x7f
   344a8:	tst	r1, #128	; 0x80
   344ac:	uxtb	r0, r0
   344b0:	lsr	r6, r0, #25
   344b4:	lsl	r7, r0, #7
   344b8:	str	r6, [fp, #-384]	; 0xfffffe80
   344bc:	str	r7, [fp, #-388]	; 0xfffffe7c
   344c0:	ldrd	r6, [r8, #124]	; 0x7c
   344c4:	orr	r6, r6, r2
   344c8:	orr	r7, r7, r3
   344cc:	bne	3463c <__assert_fail@plt+0x21138>
   344d0:	mov	r1, r6
   344d4:	mov	r4, r7
   344d8:	b	3360c <__assert_fail@plt+0x20108>
   344dc:	cmp	sl, r6
   344e0:	bls	345b8 <__assert_fail@plt+0x210b4>
   344e4:	rsb	r6, r6, sl
   344e8:	cmp	r6, #9
   344ec:	movhi	r9, #10
   344f0:	bls	345ac <__assert_fail@plt+0x210a8>
   344f4:	ldrb	r1, [r8, #2]
   344f8:	add	r5, r8, #3
   344fc:	sub	r8, fp, #512	; 0x200
   34500:	and	r0, r1, #127	; 0x7f
   34504:	tst	r1, #128	; 0x80
   34508:	uxtb	r0, r0
   3450c:	lsr	r6, r0, #25
   34510:	lsl	r7, r0, #7
   34514:	str	r6, [fp, #-392]	; 0xfffffe78
   34518:	str	r7, [fp, #-396]	; 0xfffffe74
   3451c:	ldrd	r6, [r8, #116]	; 0x74
   34520:	orr	r6, r6, r2
   34524:	orr	r7, r7, r3
   34528:	bne	34550 <__assert_fail@plt+0x2104c>
   3452c:	mov	r1, r6
   34530:	mov	r4, r7
   34534:	b	33598 <__assert_fail@plt+0x20094>
   34538:	cmp	r6, #1
   3453c:	movhi	r9, r6
   34540:	bhi	34440 <__assert_fail@plt+0x20f3c>
   34544:	mvn	r6, #0
   34548:	mov	r9, r6
   3454c:	b	336f4 <__assert_fail@plt+0x201f0>
   34550:	str	r9, [fp, #-108]	; 0xffffff94
   34554:	mov	r1, #1
   34558:	ldrd	r8, [r8, #-76]	; 0xffffffb4
   3455c:	ldr	r0, [fp, #-108]	; 0xffffff94
   34560:	add	r1, r1, #1
   34564:	cmp	r1, r0
   34568:	bcs	345c8 <__assert_fail@plt+0x210c4>
   3456c:	ldrb	ip, [r5], #1
   34570:	rsb	r0, r1, r1, lsl #3
   34574:	sub	r4, r0, #32
   34578:	rsb	lr, r0, #32
   3457c:	and	r2, ip, #127	; 0x7f
   34580:	tst	ip, #128	; 0x80
   34584:	uxtb	r2, r2
   34588:	lsl	r9, r2, r4
   3458c:	lsl	r8, r2, r0
   34590:	orr	r9, r9, r2, lsr lr
   34594:	orr	r6, r6, r8
   34598:	orr	r7, r7, r9
   3459c:	bne	3455c <__assert_fail@plt+0x21058>
   345a0:	sub	lr, fp, #512	; 0x200
   345a4:	strd	r8, [lr, #-76]	; 0xffffffb4
   345a8:	b	3452c <__assert_fail@plt+0x21028>
   345ac:	cmp	r6, #1
   345b0:	movhi	r9, r6
   345b4:	bhi	344f4 <__assert_fail@plt+0x20ff0>
   345b8:	mvn	r1, #0
   345bc:	mov	r6, r1
   345c0:	mov	r4, r1
   345c4:	b	33598 <__assert_fail@plt+0x20094>
   345c8:	sub	r1, fp, #512	; 0x200
   345cc:	strd	r8, [r1, #-76]	; 0xffffffb4
   345d0:	mvn	r1, #0
   345d4:	mov	r6, r1
   345d8:	mov	r4, r1
   345dc:	b	33598 <__assert_fail@plt+0x20094>
   345e0:	str	r9, [fp, #-108]	; 0xffffff94
   345e4:	mov	r1, #1
   345e8:	ldrd	r8, [r8, #-52]	; 0xffffffcc
   345ec:	ldr	r0, [fp, #-108]	; 0xffffff94
   345f0:	add	r1, r1, #1
   345f4:	cmp	r1, r0
   345f8:	bcs	34698 <__assert_fail@plt+0x21194>
   345fc:	ldrb	lr, [ip], #1
   34600:	rsb	r0, r1, r1, lsl #3
   34604:	sub	r5, r0, #32
   34608:	rsb	r4, r0, #32
   3460c:	and	r2, lr, #127	; 0x7f
   34610:	tst	lr, #128	; 0x80
   34614:	uxtb	r2, r2
   34618:	lsl	r9, r2, r5
   3461c:	lsl	r8, r2, r0
   34620:	orr	r9, r9, r2, lsr r4
   34624:	orr	r6, r6, r8
   34628:	orr	r7, r7, r9
   3462c:	bne	345ec <__assert_fail@plt+0x210e8>
   34630:	sub	r2, fp, #512	; 0x200
   34634:	strd	r8, [r2, #-52]	; 0xffffffcc
   34638:	b	34478 <__assert_fail@plt+0x20f74>
   3463c:	str	r9, [fp, #-108]	; 0xffffff94
   34640:	mov	r1, #1
   34644:	ldrd	r8, [r8, #-68]	; 0xffffffbc
   34648:	ldr	r0, [fp, #-108]	; 0xffffff94
   3464c:	add	r1, r1, #1
   34650:	cmp	r1, r0
   34654:	bcs	346ac <__assert_fail@plt+0x211a8>
   34658:	ldrb	ip, [r5], #1
   3465c:	rsb	r0, r1, r1, lsl #3
   34660:	sub	r4, r0, #32
   34664:	rsb	lr, r0, #32
   34668:	and	r2, ip, #127	; 0x7f
   3466c:	tst	ip, #128	; 0x80
   34670:	uxtb	r2, r2
   34674:	lsl	r9, r2, r4
   34678:	lsl	r8, r2, r0
   3467c:	orr	r9, r9, r2, lsr lr
   34680:	orr	r6, r6, r8
   34684:	orr	r7, r7, r9
   34688:	bne	34648 <__assert_fail@plt+0x21144>
   3468c:	sub	lr, fp, #512	; 0x200
   34690:	strd	r8, [lr, #-68]	; 0xffffffbc
   34694:	b	344d0 <__assert_fail@plt+0x20fcc>
   34698:	sub	r1, fp, #512	; 0x200
   3469c:	mvn	r6, #0
   346a0:	strd	r8, [r1, #-52]	; 0xffffffcc
   346a4:	mov	r9, r6
   346a8:	b	336f4 <__assert_fail@plt+0x201f0>
   346ac:	sub	r1, fp, #512	; 0x200
   346b0:	strd	r8, [r1, #-68]	; 0xffffffbc
   346b4:	mvn	r1, #0
   346b8:	mov	r6, r1
   346bc:	mov	r4, r1
   346c0:	b	3360c <__assert_fail@plt+0x20108>
   346c4:	cmp	r6, #1
   346c8:	movhi	r9, r6
   346cc:	bhi	34498 <__assert_fail@plt+0x20f94>
   346d0:	mvn	r1, #0
   346d4:	mov	r6, r1
   346d8:	mov	r4, r1
   346dc:	b	3360c <__assert_fail@plt+0x20108>
   346e0:	cmp	sl, ip
   346e4:	bls	347e0 <__assert_fail@plt+0x212dc>
   346e8:	cmp	r5, #9
   346ec:	movhi	r5, #10
   346f0:	bls	347d8 <__assert_fail@plt+0x212d4>
   346f4:	ldrb	r1, [ip, #1]
   346f8:	sub	r4, fp, #512	; 0x200
   346fc:	add	r8, ip, #2
   34700:	and	r0, r1, #127	; 0x7f
   34704:	tst	r1, #128	; 0x80
   34708:	uxtb	r0, r0
   3470c:	lsr	r7, r0, #25
   34710:	lsl	ip, r0, #7
   34714:	str	r7, [fp, #-336]	; 0xfffffeb0
   34718:	str	ip, [fp, #-340]	; 0xfffffeac
   3471c:	ldrd	r0, [r4, #172]	; 0xac
   34720:	movne	r4, #1
   34724:	ldrne	r7, [fp, #-724]	; 0xfffffd2c
   34728:	orr	r0, r0, r2
   3472c:	orr	r1, r1, r3
   34730:	strd	r0, [fp, #-180]	; 0xffffff4c
   34734:	bne	34778 <__assert_fail@plt+0x21274>
   34738:	ldr	r4, [fp, #-180]	; 0xffffff4c
   3473c:	b	33b20 <__assert_fail@plt+0x2061c>
   34740:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   34744:	movw	r1, #14460	; 0x387c
   34748:	str	r6, [sp, #8]
   3474c:	movt	r1, #4
   34750:	mov	r0, r7
   34754:	str	r7, [sp, #16]
   34758:	strd	r2, [sp]
   3475c:	add	r8, ip, #1
   34760:	ldr	r3, [fp, #-140]	; 0xffffff74
   34764:	ldr	r2, [fp, #-144]	; 0xffffff70
   34768:	str	r9, [sp, #20]
   3476c:	str	r3, [sp, #12]
   34770:	bl	13204 <__printf_chk@plt>
   34774:	b	33b5c <__assert_fail@plt+0x20658>
   34778:	add	r4, r4, #1
   3477c:	cmp	r4, r5
   34780:	bcs	347e8 <__assert_fail@plt+0x212e4>
   34784:	ldrb	r0, [r8], #1
   34788:	rsb	r1, r4, r4, lsl #3
   3478c:	sub	lr, r1, #32
   34790:	sub	r3, fp, #512	; 0x200
   34794:	and	r2, r0, #127	; 0x7f
   34798:	rsb	ip, r1, #32
   3479c:	tst	r0, #128	; 0x80
   347a0:	uxtb	r2, r2
   347a4:	lsl	lr, r2, lr
   347a8:	lsl	r1, r2, r1
   347ac:	orr	ip, lr, r2, lsr ip
   347b0:	str	r1, [fp, #-268]	; 0xfffffef4
   347b4:	str	ip, [fp, #-264]	; 0xfffffef8
   347b8:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   347bc:	ldrd	r2, [r3, #244]	; 0xf4
   347c0:	orr	r0, r0, r2
   347c4:	orr	r1, r1, r3
   347c8:	strd	r0, [fp, #-180]	; 0xffffff4c
   347cc:	bne	34778 <__assert_fail@plt+0x21274>
   347d0:	str	r7, [fp, #-724]	; 0xfffffd2c
   347d4:	b	34738 <__assert_fail@plt+0x21234>
   347d8:	cmp	r5, #1
   347dc:	bne	346f4 <__assert_fail@plt+0x211f0>
   347e0:	mvn	r4, #0
   347e4:	b	33b20 <__assert_fail@plt+0x2061c>
   347e8:	str	r7, [fp, #-724]	; 0xfffffd2c
   347ec:	mvn	r4, #0
   347f0:	b	33b20 <__assert_fail@plt+0x2061c>
   347f4:	rev	r0, r0
   347f8:	b	337b0 <__assert_fail@plt+0x202ac>
   347fc:	cmp	sl, ip
   34800:	bls	349e4 <__assert_fail@plt+0x214e0>
   34804:	rsb	r5, ip, sl
   34808:	cmp	r5, #9
   3480c:	movhi	r7, #10
   34810:	bls	349d8 <__assert_fail@plt+0x214d4>
   34814:	ldrb	r1, [ip, #1]
   34818:	sub	lr, fp, #512	; 0x200
   3481c:	add	r8, ip, #2
   34820:	and	r0, r1, #127	; 0x7f
   34824:	tst	r1, #128	; 0x80
   34828:	uxtb	r0, r0
   3482c:	movne	r1, #1
   34830:	lsr	r5, r0, #25
   34834:	lsl	ip, r0, #7
   34838:	str	r5, [fp, #-368]	; 0xfffffe90
   3483c:	str	ip, [fp, #-372]	; 0xfffffe8c
   34840:	ldrd	r4, [lr, #140]	; 0x8c
   34844:	movne	lr, r8
   34848:	orr	r4, r4, r2
   3484c:	orr	r5, r5, r3
   34850:	bne	3492c <__assert_fail@plt+0x21428>
   34854:	mov	r7, r4
   34858:	str	r5, [fp, #-108]	; 0xffffff94
   3485c:	b	33728 <__assert_fail@plt+0x20224>
   34860:	rev	r2, r2
   34864:	b	3281c <__assert_fail@plt+0x1f318>
   34868:	cmp	sl, r8
   3486c:	bls	349cc <__assert_fail@plt+0x214c8>
   34870:	rsb	r5, r8, sl
   34874:	cmp	r5, #9
   34878:	movhi	r5, #10
   3487c:	bls	349b8 <__assert_fail@plt+0x214b4>
   34880:	ldrb	r3, [r8, #1]
   34884:	sub	r4, fp, #512	; 0x200
   34888:	add	r6, r8, #2
   3488c:	and	r2, r3, #127	; 0x7f
   34890:	tst	r3, #128	; 0x80
   34894:	uxtb	r2, r2
   34898:	lsr	r8, r2, #25
   3489c:	lsl	ip, r2, #7
   348a0:	str	r8, [fp, #-344]	; 0xfffffea8
   348a4:	str	ip, [fp, #-348]	; 0xfffffea4
   348a8:	ldrd	r2, [r4, #164]	; 0xa4
   348ac:	orr	r2, r2, r0
   348b0:	orr	r3, r3, r1
   348b4:	strd	r2, [fp, #-92]	; 0xffffffa4
   348b8:	beq	3400c <__assert_fail@plt+0x20b08>
   348bc:	mov	lr, r9
   348c0:	ldr	r7, [fp, #-724]	; 0xfffffd2c
   348c4:	ldrd	r8, [r4, #-36]	; 0xffffffdc
   348c8:	mov	r1, #1
   348cc:	add	r1, r1, #1
   348d0:	cmp	r1, r5
   348d4:	bcs	3498c <__assert_fail@plt+0x21488>
   348d8:	ldrb	ip, [r6], #1
   348dc:	rsb	r0, r1, r1, lsl #3
   348e0:	sub	r4, r0, #32
   348e4:	rsb	r8, r0, #32
   348e8:	and	r2, ip, #127	; 0x7f
   348ec:	str	r8, [fp, #-140]	; 0xffffff74
   348f0:	tst	ip, #128	; 0x80
   348f4:	uxtb	r2, r2
   348f8:	lsl	r9, r2, r4
   348fc:	orr	r9, r9, r2, lsr r8
   34900:	lsl	r8, r2, r0
   34904:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   34908:	orr	r2, r2, r8
   3490c:	orr	r3, r3, r9
   34910:	strd	r2, [fp, #-92]	; 0xffffffa4
   34914:	bne	348cc <__assert_fail@plt+0x213c8>
   34918:	sub	r3, fp, #512	; 0x200
   3491c:	str	r7, [fp, #-724]	; 0xfffffd2c
   34920:	strd	r8, [r3, #-36]	; 0xffffffdc
   34924:	mov	r9, lr
   34928:	b	3400c <__assert_fail@plt+0x20b08>
   3492c:	add	r1, r1, #1
   34930:	cmp	r1, r7
   34934:	bcs	349a8 <__assert_fail@plt+0x214a4>
   34938:	ldrb	ip, [lr], #1
   3493c:	rsb	r0, r1, r1, lsl #3
   34940:	rsb	r3, r0, #32
   34944:	str	r3, [fp, #-108]	; 0xffffff94
   34948:	and	r2, ip, #127	; 0x7f
   3494c:	sub	r8, r0, #32
   34950:	tst	ip, #128	; 0x80
   34954:	sub	r3, fp, #512	; 0x200
   34958:	uxtb	r2, r2
   3495c:	ldr	ip, [fp, #-108]	; 0xffffff94
   34960:	lsl	r8, r2, r8
   34964:	lsl	r0, r2, r0
   34968:	orr	r8, r8, r2, lsr ip
   3496c:	str	r0, [fp, #-276]	; 0xfffffeec
   34970:	str	r8, [fp, #-272]	; 0xfffffef0
   34974:	ldrd	r2, [r3, #236]	; 0xec
   34978:	orr	r4, r4, r2
   3497c:	orr	r5, r5, r3
   34980:	bne	3492c <__assert_fail@plt+0x21428>
   34984:	mov	r8, lr
   34988:	b	34854 <__assert_fail@plt+0x21350>
   3498c:	sub	r5, fp, #512	; 0x200
   34990:	str	r7, [fp, #-724]	; 0xfffffd2c
   34994:	mvn	r7, #0
   34998:	str	r7, [fp, #-92]	; 0xffffffa4
   3499c:	strd	r8, [r5, #-36]	; 0xffffffdc
   349a0:	mov	r9, lr
   349a4:	b	3400c <__assert_fail@plt+0x20b08>
   349a8:	mvn	r7, #0
   349ac:	mov	r8, lr
   349b0:	str	r7, [fp, #-108]	; 0xffffff94
   349b4:	b	33728 <__assert_fail@plt+0x20224>
   349b8:	cmp	r5, #1
   349bc:	bhi	34880 <__assert_fail@plt+0x2137c>
   349c0:	mvn	ip, #0
   349c4:	str	ip, [fp, #-92]	; 0xffffffa4
   349c8:	b	3400c <__assert_fail@plt+0x20b08>
   349cc:	mvn	r8, #0
   349d0:	str	r8, [fp, #-92]	; 0xffffffa4
   349d4:	b	3400c <__assert_fail@plt+0x20b08>
   349d8:	cmp	r5, #1
   349dc:	movhi	r7, r5
   349e0:	bhi	34814 <__assert_fail@plt+0x21310>
   349e4:	mvn	r7, #0
   349e8:	str	r7, [fp, #-108]	; 0xffffff94
   349ec:	b	33728 <__assert_fail@plt+0x20224>
   349f0:	cmp	sl, r6
   349f4:	bls	34b2c <__assert_fail@plt+0x21628>
   349f8:	rsb	r6, r6, sl
   349fc:	cmp	r6, #9
   34a00:	movhi	r9, #10
   34a04:	bls	34b04 <__assert_fail@plt+0x21600>
   34a08:	ldrb	r1, [r8, #2]
   34a0c:	sub	lr, fp, #512	; 0x200
   34a10:	add	r5, r8, #3
   34a14:	and	r0, r1, #127	; 0x7f
   34a18:	tst	r1, #128	; 0x80
   34a1c:	uxtb	r0, r0
   34a20:	lsr	r8, r0, #25
   34a24:	lsl	ip, r0, #7
   34a28:	str	r8, [fp, #-376]	; 0xfffffe88
   34a2c:	str	ip, [fp, #-380]	; 0xfffffe84
   34a30:	ldrd	r6, [lr, #132]	; 0x84
   34a34:	orr	r6, r6, r2
   34a38:	orr	r7, r7, r3
   34a3c:	bne	34aa8 <__assert_fail@plt+0x215a4>
   34a40:	mov	r1, r6
   34a44:	mov	r4, r7
   34a48:	b	33680 <__assert_fail@plt+0x2017c>
   34a4c:	add	ip, ip, #1
   34a50:	cmp	ip, r7
   34a54:	bcs	34b1c <__assert_fail@plt+0x21618>
   34a58:	ldrb	r4, [r8], #1
   34a5c:	rsb	lr, ip, ip, lsl #3
   34a60:	rsb	r1, lr, #32
   34a64:	str	r1, [fp, #-108]	; 0xffffff94
   34a68:	and	r0, r4, #127	; 0x7f
   34a6c:	sub	r9, lr, #32
   34a70:	tst	r4, #128	; 0x80
   34a74:	sub	r1, fp, #512	; 0x200
   34a78:	uxtb	r0, r0
   34a7c:	ldr	r4, [fp, #-108]	; 0xffffff94
   34a80:	lsl	r9, r0, r9
   34a84:	lsl	lr, r0, lr
   34a88:	orr	r4, r9, r0, lsr r4
   34a8c:	str	lr, [fp, #-284]	; 0xfffffee4
   34a90:	str	r4, [fp, #-280]	; 0xfffffee8
   34a94:	ldrd	r0, [r1, #228]	; 0xe4
   34a98:	orr	r2, r2, r0
   34a9c:	orr	r3, r3, r1
   34aa0:	beq	34420 <__assert_fail@plt+0x20f1c>
   34aa4:	b	34a4c <__assert_fail@plt+0x21548>
   34aa8:	str	r9, [fp, #-108]	; 0xffffff94
   34aac:	mov	r1, #1
   34ab0:	ldrd	r8, [lr, #-60]	; 0xffffffc4
   34ab4:	ldr	r2, [fp, #-108]	; 0xffffff94
   34ab8:	add	r1, r1, #1
   34abc:	cmp	r1, r2
   34ac0:	bcs	34b3c <__assert_fail@plt+0x21638>
   34ac4:	ldrb	ip, [r5], #1
   34ac8:	rsb	r0, r1, r1, lsl #3
   34acc:	sub	r4, r0, #32
   34ad0:	rsb	lr, r0, #32
   34ad4:	and	r2, ip, #127	; 0x7f
   34ad8:	tst	ip, #128	; 0x80
   34adc:	uxtb	r2, r2
   34ae0:	lsl	r9, r2, r4
   34ae4:	lsl	r8, r2, r0
   34ae8:	orr	r9, r9, r2, lsr lr
   34aec:	orr	r6, r6, r8
   34af0:	orr	r7, r7, r9
   34af4:	bne	34ab4 <__assert_fail@plt+0x215b0>
   34af8:	sub	r1, fp, #512	; 0x200
   34afc:	strd	r8, [r1, #-60]	; 0xffffffc4
   34b00:	b	34a40 <__assert_fail@plt+0x2153c>
   34b04:	cmp	r6, #1
   34b08:	bls	34b2c <__assert_fail@plt+0x21628>
   34b0c:	mov	r9, r6
   34b10:	b	34a08 <__assert_fail@plt+0x21504>
   34b14:	cmp	r7, #1
   34b18:	bhi	343e0 <__assert_fail@plt+0x20edc>
   34b1c:	mvn	ip, #0
   34b20:	mov	r9, ip
   34b24:	mov	r7, ip
   34b28:	b	334f8 <__assert_fail@plt+0x1fff4>
   34b2c:	mvn	r1, #0
   34b30:	mov	r6, r1
   34b34:	mov	r4, r1
   34b38:	b	33680 <__assert_fail@plt+0x2017c>
   34b3c:	sub	r3, fp, #512	; 0x200
   34b40:	mvn	r1, #0
   34b44:	mov	r6, r1
   34b48:	mov	r4, r1
   34b4c:	strd	r8, [r3, #-60]	; 0xffffffc4
   34b50:	b	33680 <__assert_fail@plt+0x2017c>
   34b54:	cmp	sl, r8
   34b58:	bls	34c28 <__assert_fail@plt+0x21724>
   34b5c:	cmp	r7, #9
   34b60:	movhi	r7, #10
   34b64:	bls	34c20 <__assert_fail@plt+0x2171c>
   34b68:	ldrb	r1, [r8, #1]
   34b6c:	add	r6, r8, #2
   34b70:	and	r0, r1, #127	; 0x7f
   34b74:	tst	r1, #128	; 0x80
   34b78:	uxtb	r0, r0
   34b7c:	lsl	r4, r0, #7
   34b80:	str	r4, [fp, #-356]	; 0xfffffe9c
   34b84:	sub	r4, fp, #512	; 0x200
   34b88:	lsr	lr, r0, #25
   34b8c:	str	lr, [fp, #-352]	; 0xfffffea0
   34b90:	ldrd	r0, [r4, #156]	; 0x9c
   34b94:	orr	r0, r0, r2
   34b98:	orr	r1, r1, r3
   34b9c:	strd	r0, [fp, #-92]	; 0xffffffa4
   34ba0:	bne	34bbc <__assert_fail@plt+0x216b8>
   34ba4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   34ba8:	b	33c44 <__assert_fail@plt+0x20740>
   34bac:	mov	r4, #0
   34bb0:	mov	r5, #0
   34bb4:	strd	r4, [fp, #-140]	; 0xffffff74
   34bb8:	b	32ae0 <__assert_fail@plt+0x1f5dc>
   34bbc:	str	r9, [fp, #-108]	; 0xffffff94
   34bc0:	mov	r1, #1
   34bc4:	ldrd	r8, [r4, #-44]	; 0xffffffd4
   34bc8:	add	r1, r1, #1
   34bcc:	cmp	r1, r7
   34bd0:	bcs	34c38 <__assert_fail@plt+0x21734>
   34bd4:	ldrb	ip, [r6], #1
   34bd8:	rsb	r0, r1, r1, lsl #3
   34bdc:	sub	r4, r0, #32
   34be0:	rsb	lr, r0, #32
   34be4:	and	r2, ip, #127	; 0x7f
   34be8:	tst	ip, #128	; 0x80
   34bec:	uxtb	r2, r2
   34bf0:	lsl	r9, r2, r4
   34bf4:	lsl	r8, r2, r0
   34bf8:	orr	r9, r9, r2, lsr lr
   34bfc:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   34c00:	orr	r2, r2, r8
   34c04:	orr	r3, r3, r9
   34c08:	strd	r2, [fp, #-92]	; 0xffffffa4
   34c0c:	bne	34bc8 <__assert_fail@plt+0x216c4>
   34c10:	sub	r4, fp, #512	; 0x200
   34c14:	strd	r8, [r4, #-44]	; 0xffffffd4
   34c18:	ldr	r9, [fp, #-108]	; 0xffffff94
   34c1c:	b	34ba4 <__assert_fail@plt+0x216a0>
   34c20:	cmp	r7, #1
   34c24:	bne	34b68 <__assert_fail@plt+0x21664>
   34c28:	rsb	r7, r6, sl
   34c2c:	cmn	r7, #1
   34c30:	beq	33c60 <__assert_fail@plt+0x2075c>
   34c34:	b	3401c <__assert_fail@plt+0x20b18>
   34c38:	sub	r3, fp, #512	; 0x200
   34c3c:	strd	r8, [r3, #-44]	; 0xffffffd4
   34c40:	ldr	r9, [fp, #-108]	; 0xffffff94
   34c44:	b	34c28 <__assert_fail@plt+0x21724>
   34c48:	and	r0, r0, #127	; 0x7f
   34c4c:	cmp	sl, r1
   34c50:	mov	r5, #0
   34c54:	uxtb	r4, r0
   34c58:	bls	34e5c <__assert_fail@plt+0x21958>
   34c5c:	cmp	r2, #8
   34c60:	movhi	lr, #9
   34c64:	bls	34e4c <__assert_fail@plt+0x21948>
   34c68:	ldrb	r3, [r1, #1]
   34c6c:	add	ip, r1, #2
   34c70:	uxtb	r2, r3
   34c74:	tst	r2, #128	; 0x80
   34c78:	moveq	r1, #7
   34c7c:	bne	34d84 <__assert_fail@plt+0x21880>
   34c80:	sbfx	r2, r2, #0, #7
   34c84:	sub	r7, r1, #32
   34c88:	rsb	r0, r1, #32
   34c8c:	sxtb	r2, r2
   34c90:	asr	r3, r2, #31
   34c94:	lsl	lr, r3, r1
   34c98:	lsl	r1, r2, r1
   34c9c:	orr	r7, lr, r2, lsl r7
   34ca0:	str	r1, [fp, #-212]	; 0xffffff2c
   34ca4:	orr	r0, r7, r2, lsr r0
   34ca8:	str	r0, [fp, #-208]	; 0xffffff30
   34cac:	ldrd	r2, [fp, #-212]	; 0xffffff2c
   34cb0:	orr	r2, r2, r4
   34cb4:	str	r2, [fp, #-96]	; 0xffffffa0
   34cb8:	str	r2, [fp, #-108]	; 0xffffff94
   34cbc:	b	33ab4 <__assert_fail@plt+0x205b0>
   34cc0:	cmp	sl, r3
   34cc4:	bls	34e34 <__assert_fail@plt+0x21930>
   34cc8:	cmp	r0, #9
   34ccc:	movhi	lr, #10
   34cd0:	bls	34e24 <__assert_fail@plt+0x21920>
   34cd4:	ldrb	r0, [r3, #1]
   34cd8:	add	r1, r3, #2
   34cdc:	and	r2, r0, #127	; 0x7f
   34ce0:	tst	r0, #128	; 0x80
   34ce4:	uxtb	r2, r2
   34ce8:	lsl	r7, r2, #7
   34cec:	str	r7, [fp, #-332]	; 0xfffffeb4
   34cf0:	sub	r7, fp, #512	; 0x200
   34cf4:	lsr	r0, r2, #25
   34cf8:	str	r0, [fp, #-328]	; 0xfffffeb8
   34cfc:	ldrd	r2, [r7, #180]	; 0xb4
   34d00:	orr	r2, r2, r4
   34d04:	orr	r3, r3, r5
   34d08:	strd	r2, [fp, #-124]	; 0xffffff84
   34d0c:	beq	33a80 <__assert_fail@plt+0x2057c>
   34d10:	ldr	r7, [fp, #-724]	; 0xfffffd2c
   34d14:	mov	r5, #1
   34d18:	mov	ip, r1
   34d1c:	add	r5, r5, #1
   34d20:	cmp	r5, lr
   34d24:	bcs	34dfc <__assert_fail@plt+0x218f8>
   34d28:	ldrb	r0, [ip], #1
   34d2c:	rsb	r1, r5, r5, lsl #3
   34d30:	rsb	r3, r1, #32
   34d34:	str	r3, [fp, #-96]	; 0xffffffa0
   34d38:	and	r2, r0, #127	; 0x7f
   34d3c:	sub	r4, r1, #32
   34d40:	tst	r0, #128	; 0x80
   34d44:	ldr	r0, [fp, #-96]	; 0xffffffa0
   34d48:	uxtb	r2, r2
   34d4c:	lsl	r4, r2, r4
   34d50:	lsl	r1, r2, r1
   34d54:	orr	r4, r4, r2, lsr r0
   34d58:	str	r1, [fp, #-252]	; 0xffffff04
   34d5c:	str	r4, [fp, #-248]	; 0xffffff08
   34d60:	ldrd	r2, [fp, #-124]	; 0xffffff84
   34d64:	ldrd	r0, [fp, #-252]	; 0xffffff04
   34d68:	orr	r2, r2, r0
   34d6c:	orr	r3, r3, r1
   34d70:	strd	r2, [fp, #-124]	; 0xffffff84
   34d74:	bne	34d1c <__assert_fail@plt+0x21818>
   34d78:	mov	r1, ip
   34d7c:	str	r7, [fp, #-724]	; 0xfffffd2c
   34d80:	b	33a80 <__assert_fail@plt+0x2057c>
   34d84:	ldr	r7, [fp, #-724]	; 0xfffffd2c
   34d88:	mov	r1, #1
   34d8c:	str	lr, [fp, #-96]	; 0xffffffa0
   34d90:	and	r3, r3, #127	; 0x7f
   34d94:	rsb	r0, r1, r1, lsl #3
   34d98:	ldr	lr, [fp, #-96]	; 0xffffffa0
   34d9c:	add	r1, r1, #1
   34da0:	uxtb	r2, r3
   34da4:	sub	r3, r0, #32
   34da8:	cmp	r1, lr
   34dac:	lsl	r3, r2, r3
   34db0:	str	r3, [fp, #-256]	; 0xffffff00
   34db4:	ldr	lr, [fp, #-256]	; 0xffffff00
   34db8:	rsb	r3, r0, #32
   34dbc:	lsl	r0, r2, r0
   34dc0:	str	r0, [fp, #-260]	; 0xfffffefc
   34dc4:	orr	r3, lr, r2, lsr r3
   34dc8:	str	r3, [fp, #-256]	; 0xffffff00
   34dcc:	sub	r3, fp, #512	; 0x200
   34dd0:	ldrd	r2, [r3, #252]	; 0xfc
   34dd4:	orr	r4, r4, r2
   34dd8:	orr	r5, r5, r3
   34ddc:	bcs	34e10 <__assert_fail@plt+0x2190c>
   34de0:	ldrb	r3, [ip], #1
   34de4:	uxtb	r2, r3
   34de8:	tst	r2, #128	; 0x80
   34dec:	bne	34d90 <__assert_fail@plt+0x2188c>
   34df0:	str	r7, [fp, #-724]	; 0xfffffd2c
   34df4:	rsb	r1, r1, r1, lsl #3
   34df8:	b	34c80 <__assert_fail@plt+0x2177c>
   34dfc:	mvn	r5, #0
   34e00:	mov	r1, ip
   34e04:	str	r7, [fp, #-724]	; 0xfffffd2c
   34e08:	str	r5, [fp, #-124]	; 0xffffff84
   34e0c:	b	33a80 <__assert_fail@plt+0x2057c>
   34e10:	mvn	r4, #0
   34e14:	str	r7, [fp, #-724]	; 0xfffffd2c
   34e18:	str	r4, [fp, #-96]	; 0xffffffa0
   34e1c:	str	r4, [fp, #-108]	; 0xffffff94
   34e20:	b	33ab4 <__assert_fail@plt+0x205b0>
   34e24:	cmp	r0, #1
   34e28:	beq	34e40 <__assert_fail@plt+0x2193c>
   34e2c:	mov	lr, r0
   34e30:	b	34cd4 <__assert_fail@plt+0x217d0>
   34e34:	mvn	r7, #0
   34e38:	str	r7, [fp, #-124]	; 0xffffff84
   34e3c:	b	33a80 <__assert_fail@plt+0x2057c>
   34e40:	mvn	ip, #0
   34e44:	str	ip, [fp, #-124]	; 0xffffff84
   34e48:	b	33a80 <__assert_fail@plt+0x2057c>
   34e4c:	cmp	r2, #1
   34e50:	beq	34e6c <__assert_fail@plt+0x21968>
   34e54:	mov	lr, r2
   34e58:	b	34c68 <__assert_fail@plt+0x21764>
   34e5c:	mvn	r5, #0
   34e60:	str	r5, [fp, #-96]	; 0xffffffa0
   34e64:	str	r5, [fp, #-108]	; 0xffffff94
   34e68:	b	33ab4 <__assert_fail@plt+0x205b0>
   34e6c:	mvn	r7, #0
   34e70:	str	r7, [fp, #-96]	; 0xffffffa0
   34e74:	str	r7, [fp, #-108]	; 0xffffff94
   34e78:	b	33ab4 <__assert_fail@plt+0x205b0>
   34e7c:	ldr	r1, [fp, #-164]	; 0xffffff5c
   34e80:	ldr	r0, [fp, #-204]	; 0xffffff34
   34e84:	bl	131bc <elf_rawdata@plt>
   34e88:	cmp	r0, #0
   34e8c:	str	r0, [fp, #-164]	; 0xffffff5c
   34e90:	bne	32788 <__assert_fail@plt+0x1f284>
   34e94:	mov	r2, #5
   34e98:	movw	r1, #54876	; 0xd65c
   34e9c:	mov	r0, #0
   34ea0:	movt	r1, #3
   34ea4:	bl	12d84 <dcgettext@plt>
   34ea8:	mov	r4, r0
   34eac:	mvn	r0, #0
   34eb0:	bl	130a8 <elf_errmsg@plt>
   34eb4:	mov	r2, r4
   34eb8:	ldr	r3, [fp, #-200]	; 0xffffff38
   34ebc:	str	r0, [sp]
   34ec0:	mov	r0, #0
   34ec4:	mov	r1, r0
   34ec8:	bl	12f70 <error@plt>
   34ecc:	b	32b38 <__assert_fail@plt+0x1f634>
   34ed0:	ldr	r4, [r6]
   34ed4:	rev	r0, r4
   34ed8:	b	339b8 <__assert_fail@plt+0x204b4>
   34edc:	cmp	sl, r6
   34ee0:	bls	35004 <__assert_fail@plt+0x21b00>
   34ee4:	rsb	r6, r6, sl
   34ee8:	cmp	r6, #9
   34eec:	movhi	r9, #10
   34ef0:	bls	34ff8 <__assert_fail@plt+0x21af4>
   34ef4:	ldrb	r1, [r8, #2]
   34ef8:	add	lr, r8, #3
   34efc:	sub	r8, fp, #512	; 0x200
   34f00:	and	r0, r1, #127	; 0x7f
   34f04:	tst	r1, #128	; 0x80
   34f08:	uxtb	r0, r0
   34f0c:	lsl	r6, r0, #7
   34f10:	lsr	r5, r0, #25
   34f14:	str	r6, [fp, #-404]	; 0xfffffe6c
   34f18:	str	r5, [fp, #-400]	; 0xfffffe70
   34f1c:	ldrd	r6, [r8, #108]	; 0x6c
   34f20:	orr	r6, r6, r2
   34f24:	orr	r7, r7, r3
   34f28:	bne	35f24 <__assert_fail@plt+0x22a20>
   34f2c:	mov	r5, r6
   34f30:	mov	r6, r7
   34f34:	b	334c4 <__assert_fail@plt+0x1ffc0>
   34f38:	cmp	sl, ip
   34f3c:	bls	36010 <__assert_fail@plt+0x22b0c>
   34f40:	rsb	r7, ip, sl
   34f44:	cmp	r7, #9
   34f48:	movhi	r9, #10
   34f4c:	bls	36004 <__assert_fail@plt+0x22b00>
   34f50:	ldrb	r1, [ip, #1]
   34f54:	sub	lr, fp, #512	; 0x200
   34f58:	add	r8, ip, #2
   34f5c:	and	r0, r1, #127	; 0x7f
   34f60:	tst	r1, #128	; 0x80
   34f64:	uxtb	r0, r0
   34f68:	lsr	r7, r0, #25
   34f6c:	lsl	ip, r0, #7
   34f70:	str	r7, [fp, #-424]	; 0xfffffe58
   34f74:	str	ip, [fp, #-428]	; 0xfffffe54
   34f78:	ldrd	r6, [lr, #84]	; 0x54
   34f7c:	movne	lr, r8
   34f80:	orr	r7, r7, r3
   34f84:	movne	r3, #1
   34f88:	orr	r6, r6, r2
   34f8c:	movne	r1, r3
   34f90:	bne	35f80 <__assert_fail@plt+0x22a7c>
   34f94:	mov	r9, r6
   34f98:	b	33428 <__assert_fail@plt+0x1ff24>
   34f9c:	cmp	sl, r6
   34fa0:	bls	35078 <__assert_fail@plt+0x21b74>
   34fa4:	rsb	r6, r6, sl
   34fa8:	cmp	r6, #9
   34fac:	movhi	r9, #10
   34fb0:	bls	3506c <__assert_fail@plt+0x21b68>
   34fb4:	ldrb	r1, [r8, #2]
   34fb8:	add	ip, r8, #3
   34fbc:	sub	r8, fp, #512	; 0x200
   34fc0:	and	r0, r1, #127	; 0x7f
   34fc4:	tst	r1, #128	; 0x80
   34fc8:	uxtb	r0, r0
   34fcc:	lsl	r6, r0, #7
   34fd0:	lsr	r5, r0, #25
   34fd4:	str	r6, [fp, #-420]	; 0xfffffe5c
   34fd8:	str	r5, [fp, #-416]	; 0xfffffe60
   34fdc:	ldrd	r6, [r8, #92]	; 0x5c
   34fe0:	orr	r6, r6, r2
   34fe4:	orr	r7, r7, r3
   34fe8:	bne	35010 <__assert_fail@plt+0x21b0c>
   34fec:	mov	r4, r6
   34ff0:	mov	r5, r7
   34ff4:	b	333f4 <__assert_fail@plt+0x1fef0>
   34ff8:	cmp	r6, #1
   34ffc:	movhi	r9, r6
   35000:	bhi	34ef4 <__assert_fail@plt+0x219f0>
   35004:	mvn	r5, #0
   35008:	mov	r6, r5
   3500c:	b	334c4 <__assert_fail@plt+0x1ffc0>
   35010:	str	r9, [fp, #-108]	; 0xffffff94
   35014:	mov	r1, #1
   35018:	ldrd	r8, [r8, #-92]	; 0xffffffa4
   3501c:	ldr	r0, [fp, #-108]	; 0xffffff94
   35020:	add	r1, r1, #1
   35024:	cmp	r1, r0
   35028:	bcs	35084 <__assert_fail@plt+0x21b80>
   3502c:	ldrb	lr, [ip], #1
   35030:	rsb	r0, r1, r1, lsl #3
   35034:	sub	r5, r0, #32
   35038:	rsb	r4, r0, #32
   3503c:	and	r2, lr, #127	; 0x7f
   35040:	tst	lr, #128	; 0x80
   35044:	uxtb	r2, r2
   35048:	lsl	r9, r2, r5
   3504c:	lsl	r8, r2, r0
   35050:	orr	r9, r9, r2, lsr r4
   35054:	orr	r6, r6, r8
   35058:	orr	r7, r7, r9
   3505c:	bne	3501c <__assert_fail@plt+0x21b18>
   35060:	sub	r2, fp, #512	; 0x200
   35064:	strd	r8, [r2, #-92]	; 0xffffffa4
   35068:	b	34fec <__assert_fail@plt+0x21ae8>
   3506c:	cmp	r6, #1
   35070:	movhi	r9, r6
   35074:	bhi	34fb4 <__assert_fail@plt+0x21ab0>
   35078:	mvn	r4, #0
   3507c:	mov	r5, r4
   35080:	b	333f4 <__assert_fail@plt+0x1fef0>
   35084:	sub	r1, fp, #512	; 0x200
   35088:	mvn	r4, #0
   3508c:	mov	r5, r4
   35090:	strd	r8, [r1, #-92]	; 0xffffffa4
   35094:	b	333f4 <__assert_fail@plt+0x1fef0>
   35098:	and	r1, r1, #127	; 0x7f
   3509c:	cmp	sl, ip
   350a0:	mov	r7, #0
   350a4:	uxtb	r6, r1
   350a8:	bls	35288 <__assert_fail@plt+0x21d84>
   350ac:	rsb	r4, ip, sl
   350b0:	cmp	r4, #8
   350b4:	movhi	r4, #9
   350b8:	bls	35280 <__assert_fail@plt+0x21d7c>
   350bc:	ldrb	r1, [ip, #1]
   350c0:	add	r8, ip, #2
   350c4:	uxtb	r0, r1
   350c8:	tst	r0, #128	; 0x80
   350cc:	moveq	ip, #7
   350d0:	bne	35174 <__assert_fail@plt+0x21c70>
   350d4:	sbfx	r0, r0, #0, #7
   350d8:	sub	r4, ip, #32
   350dc:	rsb	lr, ip, #32
   350e0:	sxtb	r0, r0
   350e4:	asr	r1, r0, #31
   350e8:	lsl	r5, r1, ip
   350ec:	lsl	ip, r0, ip
   350f0:	orr	r4, r5, r0, lsl r4
   350f4:	str	ip, [fp, #-244]	; 0xffffff0c
   350f8:	orr	lr, r4, r0, lsr lr
   350fc:	str	lr, [fp, #-240]	; 0xffffff10
   35100:	ldrd	r0, [fp, #-244]	; 0xffffff0c
   35104:	orr	r0, r0, r6
   35108:	orr	r1, r1, r7
   3510c:	mov	r4, r0
   35110:	mov	ip, r1
   35114:	b	32f20 <__assert_fail@plt+0x1fa1c>
   35118:	cmp	sl, r6
   3511c:	bls	35274 <__assert_fail@plt+0x21d70>
   35120:	rsb	r6, r6, sl
   35124:	cmp	r6, #9
   35128:	movhi	r9, #10
   3512c:	bls	35268 <__assert_fail@plt+0x21d64>
   35130:	ldrb	r1, [r8, #2]
   35134:	sub	r5, fp, #512	; 0x200
   35138:	add	ip, r8, #3
   3513c:	and	r0, r1, #127	; 0x7f
   35140:	tst	r1, #128	; 0x80
   35144:	uxtb	r0, r0
   35148:	lsr	lr, r0, #25
   3514c:	lsl	r4, r0, #7
   35150:	str	lr, [fp, #-504]	; 0xfffffe08
   35154:	str	r4, [fp, #-508]	; 0xfffffe04
   35158:	ldrd	r6, [r5, #4]
   3515c:	orr	r6, r6, r2
   35160:	orr	r7, r7, r3
   35164:	bne	351dc <__assert_fail@plt+0x21cd8>
   35168:	mov	r2, r6
   3516c:	mov	r3, r7
   35170:	b	32ee8 <__assert_fail@plt+0x1f9e4>
   35174:	mov	ip, #1
   35178:	mov	r5, r2
   3517c:	mov	r9, r3
   35180:	and	r1, r1, #127	; 0x7f
   35184:	rsb	lr, ip, ip, lsl #3
   35188:	add	ip, ip, #1
   3518c:	uxtb	r0, r1
   35190:	sub	r1, lr, #32
   35194:	cmp	ip, r4
   35198:	lsl	r3, r0, r1
   3519c:	rsb	r1, lr, #32
   351a0:	orr	r3, r3, r0, lsr r1
   351a4:	lsl	r2, r0, lr
   351a8:	orr	r6, r6, r2
   351ac:	orr	r7, r7, r3
   351b0:	bcs	35238 <__assert_fail@plt+0x21d34>
   351b4:	ldrb	r1, [r8], #1
   351b8:	uxtb	r0, r1
   351bc:	tst	r0, #128	; 0x80
   351c0:	bne	35180 <__assert_fail@plt+0x21c7c>
   351c4:	sub	r4, fp, #512	; 0x200
   351c8:	rsb	ip, ip, ip, lsl #3
   351cc:	strd	r2, [r4, #-188]	; 0xffffff44
   351d0:	mov	r2, r5
   351d4:	mov	r3, r9
   351d8:	b	350d4 <__assert_fail@plt+0x21bd0>
   351dc:	str	r9, [fp, #-108]	; 0xffffff94
   351e0:	mov	r1, #1
   351e4:	ldrd	r8, [r5, #-180]	; 0xffffff4c
   351e8:	ldr	r0, [fp, #-108]	; 0xffffff94
   351ec:	add	r1, r1, #1
   351f0:	cmp	r0, r1
   351f4:	bls	35254 <__assert_fail@plt+0x21d50>
   351f8:	ldrb	lr, [ip], #1
   351fc:	rsb	r0, r1, r1, lsl #3
   35200:	sub	r5, r0, #32
   35204:	rsb	r4, r0, #32
   35208:	and	r2, lr, #127	; 0x7f
   3520c:	tst	lr, #128	; 0x80
   35210:	uxtb	r2, r2
   35214:	lsl	r9, r2, r5
   35218:	lsl	r8, r2, r0
   3521c:	orr	r9, r9, r2, lsr r4
   35220:	orr	r6, r6, r8
   35224:	orr	r7, r7, r9
   35228:	bne	351e8 <__assert_fail@plt+0x21ce4>
   3522c:	sub	r2, fp, #512	; 0x200
   35230:	strd	r8, [r2, #-180]	; 0xffffff4c
   35234:	b	35168 <__assert_fail@plt+0x21c64>
   35238:	sub	r0, fp, #512	; 0x200
   3523c:	mvn	r4, #0
   35240:	mvn	ip, #-2147483648	; 0x80000000
   35244:	strd	r2, [r0, #-188]	; 0xffffff44
   35248:	mov	r2, r5
   3524c:	mov	r3, r9
   35250:	b	32f20 <__assert_fail@plt+0x1fa1c>
   35254:	sub	r1, fp, #512	; 0x200
   35258:	mvn	r2, #0
   3525c:	mov	r3, r2
   35260:	strd	r8, [r1, #-180]	; 0xffffff4c
   35264:	b	32ee8 <__assert_fail@plt+0x1f9e4>
   35268:	cmp	r6, #1
   3526c:	movhi	r9, r6
   35270:	bhi	35130 <__assert_fail@plt+0x21c2c>
   35274:	mvn	r2, #0
   35278:	mov	r3, r2
   3527c:	b	32ee8 <__assert_fail@plt+0x1f9e4>
   35280:	cmp	r4, #1
   35284:	bhi	350bc <__assert_fail@plt+0x21bb8>
   35288:	mvn	r4, #0
   3528c:	mvn	ip, #-2147483648	; 0x80000000
   35290:	b	32f20 <__assert_fail@plt+0x1fa1c>
   35294:	cmp	sl, ip
   35298:	bls	362d0 <__assert_fail@plt+0x22dcc>
   3529c:	rsb	r3, ip, sl
   352a0:	cmp	r3, #9
   352a4:	movhi	lr, #10
   352a8:	bls	362c4 <__assert_fail@plt+0x22dc0>
   352ac:	ldrb	r3, [ip, #1]
   352b0:	add	r6, ip, #2
   352b4:	and	r2, r3, #127	; 0x7f
   352b8:	tst	r3, #128	; 0x80
   352bc:	sub	r3, fp, #512	; 0x200
   352c0:	uxtb	r2, r2
   352c4:	movne	r1, #1
   352c8:	movne	r4, r6
   352cc:	lsr	ip, r2, #25
   352d0:	lsl	r0, r2, #7
   352d4:	str	ip, [fp, #-520]	; 0xfffffdf8
   352d8:	str	r0, [fp, #-524]	; 0xfffffdf4
   352dc:	ldrd	r2, [r3, #-12]
   352e0:	orr	r8, r8, r2
   352e4:	orr	r9, r9, r3
   352e8:	beq	32e2c <__assert_fail@plt+0x1f928>
   352ec:	add	r1, r1, #1
   352f0:	cmp	lr, r1
   352f4:	bls	353a4 <__assert_fail@plt+0x21ea0>
   352f8:	ldrb	ip, [r4], #1
   352fc:	rsb	r0, r1, r1, lsl #3
   35300:	rsb	r3, r0, #32
   35304:	str	r3, [fp, #-108]	; 0xffffff94
   35308:	and	r2, ip, #127	; 0x7f
   3530c:	sub	r6, r0, #32
   35310:	tst	ip, #128	; 0x80
   35314:	sub	r3, fp, #512	; 0x200
   35318:	uxtb	r2, r2
   3531c:	ldr	ip, [fp, #-108]	; 0xffffff94
   35320:	lsl	r6, r2, r6
   35324:	lsl	r0, r2, r0
   35328:	orr	r6, r6, r2, lsr ip
   3532c:	str	r0, [fp, #-316]	; 0xfffffec4
   35330:	str	r6, [fp, #-312]	; 0xfffffec8
   35334:	ldrd	r2, [r3, #196]	; 0xc4
   35338:	orr	r8, r8, r2
   3533c:	orr	r9, r9, r3
   35340:	bne	352ec <__assert_fail@plt+0x21de8>
   35344:	mov	r6, r4
   35348:	b	32e2c <__assert_fail@plt+0x1f928>
   3534c:	cmp	sl, r6
   35350:	bls	362dc <__assert_fail@plt+0x22dd8>
   35354:	rsb	r6, r6, sl
   35358:	cmp	r6, #9
   3535c:	movhi	r9, #10
   35360:	bls	35414 <__assert_fail@plt+0x21f10>
   35364:	ldrb	r1, [r8, #2]
   35368:	sub	r5, fp, #512	; 0x200
   3536c:	add	ip, r8, #3
   35370:	and	r0, r1, #127	; 0x7f
   35374:	tst	r1, #128	; 0x80
   35378:	uxtb	r0, r0
   3537c:	lsr	lr, r0, #25
   35380:	lsl	r4, r0, #7
   35384:	str	lr, [fp, #-512]	; 0xfffffe00
   35388:	str	r4, [fp, #-516]	; 0xfffffdfc
   3538c:	ldrd	r6, [r5, #-4]
   35390:	orr	r6, r6, r2
   35394:	orr	r7, r7, r3
   35398:	bne	353b4 <__assert_fail@plt+0x21eb0>
   3539c:	mov	r5, r6
   353a0:	b	32e00 <__assert_fail@plt+0x1f8fc>
   353a4:	mov	r6, r4
   353a8:	mvn	r8, #0
   353ac:	mvn	r9, #0
   353b0:	b	32e2c <__assert_fail@plt+0x1f928>
   353b4:	str	r9, [fp, #-108]	; 0xffffff94
   353b8:	mov	r1, #1
   353bc:	ldrd	r8, [r5, #-196]	; 0xffffff3c
   353c0:	mov	lr, r5
   353c4:	ldr	r0, [fp, #-108]	; 0xffffff94
   353c8:	add	r1, r1, #1
   353cc:	cmp	r1, r0
   353d0:	bcs	362e8 <__assert_fail@plt+0x22de4>
   353d4:	ldrb	lr, [ip], #1
   353d8:	rsb	r0, r1, r1, lsl #3
   353dc:	sub	r5, r0, #32
   353e0:	rsb	r4, r0, #32
   353e4:	and	r2, lr, #127	; 0x7f
   353e8:	tst	lr, #128	; 0x80
   353ec:	uxtb	r2, r2
   353f0:	lsl	r9, r2, r5
   353f4:	lsl	r8, r2, r0
   353f8:	orr	r9, r9, r2, lsr r4
   353fc:	orr	r6, r6, r8
   35400:	orr	r7, r7, r9
   35404:	bne	353c4 <__assert_fail@plt+0x21ec0>
   35408:	sub	r2, fp, #512	; 0x200
   3540c:	strd	r8, [r2, #-196]	; 0xffffff3c
   35410:	b	3539c <__assert_fail@plt+0x21e98>
   35414:	cmp	r6, #1
   35418:	bls	362dc <__assert_fail@plt+0x22dd8>
   3541c:	mov	r9, r6
   35420:	b	35364 <__assert_fail@plt+0x21e60>
   35424:	cmp	sl, r6
   35428:	bls	35618 <__assert_fail@plt+0x22114>
   3542c:	rsb	r6, r6, sl
   35430:	cmp	r6, #9
   35434:	movhi	r9, #10
   35438:	bls	3560c <__assert_fail@plt+0x22108>
   3543c:	ldrb	r1, [r8, #2]
   35440:	add	ip, r8, #3
   35444:	and	r0, r1, #127	; 0x7f
   35448:	tst	r1, #128	; 0x80
   3544c:	uxtb	r0, r0
   35450:	lsr	r8, r0, #25
   35454:	lsl	lr, r0, #7
   35458:	sub	r0, fp, #512	; 0x200
   3545c:	str	r8, [fp, #-456]	; 0xfffffe38
   35460:	str	lr, [fp, #-460]	; 0xfffffe34
   35464:	ldrd	r6, [r0, #52]	; 0x34
   35468:	orr	r6, r6, r2
   3546c:	orr	r7, r7, r3
   35470:	bne	35504 <__assert_fail@plt+0x22000>
   35474:	mov	r5, r6
   35478:	b	33200 <__assert_fail@plt+0x1fcfc>
   3547c:	and	r3, r3, #127	; 0x7f
   35480:	cmp	sl, ip
   35484:	mov	r1, #0
   35488:	uxtb	r0, r3
   3548c:	strd	r0, [fp, #-108]	; 0xffffff94
   35490:	bls	35600 <__assert_fail@plt+0x220fc>
   35494:	rsb	lr, ip, sl
   35498:	cmp	lr, #8
   3549c:	movhi	lr, #9
   354a0:	bls	355f8 <__assert_fail@plt+0x220f4>
   354a4:	ldrb	r3, [ip, #1]
   354a8:	add	r8, ip, #2
   354ac:	uxtb	r2, r3
   354b0:	tst	r2, #128	; 0x80
   354b4:	moveq	r1, #7
   354b8:	bne	35560 <__assert_fail@plt+0x2205c>
   354bc:	sbfx	r2, r2, #0, #7
   354c0:	sub	ip, r1, #32
   354c4:	rsb	r0, r1, #32
   354c8:	sxtb	r2, r2
   354cc:	asr	r3, r2, #31
   354d0:	lsl	r4, r3, r1
   354d4:	lsl	r1, r2, r1
   354d8:	orr	ip, r4, r2, lsl ip
   354dc:	str	r1, [fp, #-220]	; 0xffffff24
   354e0:	orr	r0, ip, r2, lsr r0
   354e4:	str	r0, [fp, #-216]	; 0xffffff28
   354e8:	ldrd	r2, [fp, #-220]	; 0xffffff24
   354ec:	ldrd	r0, [fp, #-108]	; 0xffffff94
   354f0:	orr	r2, r2, r0
   354f4:	orr	r3, r3, r1
   354f8:	mov	r4, r2
   354fc:	mov	r9, r3
   35500:	b	33178 <__assert_fail@plt+0x1fc74>
   35504:	str	r9, [fp, #-108]	; 0xffffff94
   35508:	mov	r1, #1
   3550c:	ldrd	r8, [r0, #-124]	; 0xffffff84
   35510:	ldr	r3, [fp, #-108]	; 0xffffff94
   35514:	add	r1, r1, #1
   35518:	cmp	r1, r3
   3551c:	bcs	355cc <__assert_fail@plt+0x220c8>
   35520:	ldrb	lr, [ip], #1
   35524:	rsb	r0, r1, r1, lsl #3
   35528:	sub	r5, r0, #32
   3552c:	rsb	r4, r0, #32
   35530:	and	r2, lr, #127	; 0x7f
   35534:	tst	lr, #128	; 0x80
   35538:	uxtb	r2, r2
   3553c:	lsl	r9, r2, r5
   35540:	lsl	r8, r2, r0
   35544:	orr	r9, r9, r2, lsr r4
   35548:	orr	r6, r6, r8
   3554c:	orr	r7, r7, r9
   35550:	bne	35510 <__assert_fail@plt+0x2200c>
   35554:	sub	r5, fp, #512	; 0x200
   35558:	strd	r8, [r5, #-124]	; 0xffffff84
   3555c:	b	35474 <__assert_fail@plt+0x21f70>
   35560:	mov	r9, r5
   35564:	ldrd	r4, [fp, #-108]	; 0xffffff94
   35568:	mov	r1, #1
   3556c:	mov	ip, r1
   35570:	and	r3, r3, #127	; 0x7f
   35574:	rsb	r7, ip, ip, lsl #3
   35578:	add	ip, ip, #1
   3557c:	uxtb	r2, r3
   35580:	sub	r3, r7, #32
   35584:	cmp	ip, lr
   35588:	lsl	r1, r2, r3
   3558c:	rsb	r3, r7, #32
   35590:	orr	r1, r1, r2, lsr r3
   35594:	lsl	r0, r2, r7
   35598:	orr	r4, r4, r0
   3559c:	orr	r5, r5, r1
   355a0:	bcs	355e0 <__assert_fail@plt+0x220dc>
   355a4:	ldrb	r3, [r8], #1
   355a8:	uxtb	r2, r3
   355ac:	tst	r2, #128	; 0x80
   355b0:	bne	35570 <__assert_fail@plt+0x2206c>
   355b4:	sub	r3, fp, #512	; 0x200
   355b8:	strd	r4, [fp, #-108]	; 0xffffff94
   355bc:	mov	r5, r9
   355c0:	strd	r0, [r3, #-140]	; 0xffffff74
   355c4:	rsb	r1, ip, ip, lsl #3
   355c8:	b	354bc <__assert_fail@plt+0x21fb8>
   355cc:	sub	r4, fp, #512	; 0x200
   355d0:	mvn	r5, #0
   355d4:	mov	r7, r5
   355d8:	strd	r8, [r4, #-124]	; 0xffffff84
   355dc:	b	33200 <__assert_fail@plt+0x1fcfc>
   355e0:	sub	r3, fp, #512	; 0x200
   355e4:	mov	r5, r9
   355e8:	mvn	r4, #0
   355ec:	mvn	r9, #-2147483648	; 0x80000000
   355f0:	strd	r0, [r3, #-140]	; 0xffffff74
   355f4:	b	33178 <__assert_fail@plt+0x1fc74>
   355f8:	cmp	lr, #1
   355fc:	bhi	354a4 <__assert_fail@plt+0x21fa0>
   35600:	mvn	r4, #0
   35604:	mvn	r9, #-2147483648	; 0x80000000
   35608:	b	33178 <__assert_fail@plt+0x1fc74>
   3560c:	cmp	r6, #1
   35610:	movhi	r9, r6
   35614:	bhi	3543c <__assert_fail@plt+0x21f38>
   35618:	mvn	r5, #0
   3561c:	mov	r7, r5
   35620:	b	33200 <__assert_fail@plt+0x1fcfc>
   35624:	cmp	sl, r6
   35628:	bls	3581c <__assert_fail@plt+0x22318>
   3562c:	rsb	r6, r6, sl
   35630:	cmp	r6, #9
   35634:	movhi	r9, #10
   35638:	bls	35810 <__assert_fail@plt+0x2230c>
   3563c:	ldrb	r1, [r8, #2]
   35640:	sub	r5, fp, #512	; 0x200
   35644:	add	ip, r8, #3
   35648:	and	r0, r1, #127	; 0x7f
   3564c:	tst	r1, #128	; 0x80
   35650:	uxtb	r0, r0
   35654:	lsr	lr, r0, #25
   35658:	lsl	r4, r0, #7
   3565c:	str	lr, [fp, #-472]	; 0xfffffe28
   35660:	str	r4, [fp, #-476]	; 0xfffffe24
   35664:	ldrd	r6, [r5, #36]	; 0x24
   35668:	orr	r6, r6, r2
   3566c:	orr	r7, r7, r3
   35670:	bne	35708 <__assert_fail@plt+0x22204>
   35674:	mov	r5, r6
   35678:	mov	r6, r7
   3567c:	b	33140 <__assert_fail@plt+0x1fc3c>
   35680:	and	r3, r3, #127	; 0x7f
   35684:	cmp	sl, ip
   35688:	mov	r1, #0
   3568c:	uxtb	r0, r3
   35690:	strd	r0, [fp, #-108]	; 0xffffff94
   35694:	bls	35804 <__assert_fail@plt+0x22300>
   35698:	rsb	lr, ip, sl
   3569c:	cmp	lr, #8
   356a0:	movhi	lr, #9
   356a4:	bls	357fc <__assert_fail@plt+0x222f8>
   356a8:	ldrb	r3, [ip, #1]
   356ac:	add	r8, ip, #2
   356b0:	uxtb	r2, r3
   356b4:	tst	r2, #128	; 0x80
   356b8:	moveq	r1, #7
   356bc:	bne	35764 <__assert_fail@plt+0x22260>
   356c0:	sbfx	r2, r2, #0, #7
   356c4:	sub	ip, r1, #32
   356c8:	rsb	r0, r1, #32
   356cc:	sxtb	r2, r2
   356d0:	asr	r3, r2, #31
   356d4:	lsl	r4, r3, r1
   356d8:	lsl	r1, r2, r1
   356dc:	orr	ip, r4, r2, lsl ip
   356e0:	str	r1, [fp, #-228]	; 0xffffff1c
   356e4:	orr	r0, ip, r2, lsr r0
   356e8:	str	r0, [fp, #-224]	; 0xffffff20
   356ec:	ldrd	r2, [fp, #-228]	; 0xffffff1c
   356f0:	ldrd	r0, [fp, #-108]	; 0xffffff94
   356f4:	orr	r2, r2, r0
   356f8:	orr	r3, r3, r1
   356fc:	mov	r4, r2
   35700:	mov	r9, r3
   35704:	b	330b8 <__assert_fail@plt+0x1fbb4>
   35708:	str	r9, [fp, #-108]	; 0xffffff94
   3570c:	mov	r1, #1
   35710:	ldrd	r8, [r5, #-132]	; 0xffffff7c
   35714:	ldr	r0, [fp, #-108]	; 0xffffff94
   35718:	add	r1, r1, #1
   3571c:	cmp	r1, r0
   35720:	bcs	357d0 <__assert_fail@plt+0x222cc>
   35724:	ldrb	lr, [ip], #1
   35728:	rsb	r0, r1, r1, lsl #3
   3572c:	sub	r5, r0, #32
   35730:	rsb	r4, r0, #32
   35734:	and	r2, lr, #127	; 0x7f
   35738:	tst	lr, #128	; 0x80
   3573c:	uxtb	r2, r2
   35740:	lsl	r9, r2, r5
   35744:	lsl	r8, r2, r0
   35748:	orr	r9, r9, r2, lsr r4
   3574c:	orr	r6, r6, r8
   35750:	orr	r7, r7, r9
   35754:	bne	35714 <__assert_fail@plt+0x22210>
   35758:	sub	r2, fp, #512	; 0x200
   3575c:	strd	r8, [r2, #-132]	; 0xffffff7c
   35760:	b	35674 <__assert_fail@plt+0x22170>
   35764:	mov	r9, r5
   35768:	ldrd	r4, [fp, #-108]	; 0xffffff94
   3576c:	mov	r1, #1
   35770:	mov	ip, r1
   35774:	and	r3, r3, #127	; 0x7f
   35778:	rsb	r7, ip, ip, lsl #3
   3577c:	add	ip, ip, #1
   35780:	uxtb	r2, r3
   35784:	sub	r3, r7, #32
   35788:	cmp	lr, ip
   3578c:	lsl	r1, r2, r3
   35790:	rsb	r3, r7, #32
   35794:	orr	r1, r1, r2, lsr r3
   35798:	lsl	r0, r2, r7
   3579c:	orr	r4, r4, r0
   357a0:	orr	r5, r5, r1
   357a4:	bls	357e4 <__assert_fail@plt+0x222e0>
   357a8:	ldrb	r3, [r8], #1
   357ac:	uxtb	r2, r3
   357b0:	tst	r2, #128	; 0x80
   357b4:	bne	35774 <__assert_fail@plt+0x22270>
   357b8:	sub	r3, fp, #512	; 0x200
   357bc:	strd	r4, [fp, #-108]	; 0xffffff94
   357c0:	mov	r5, r9
   357c4:	strd	r0, [r3, #-156]	; 0xffffff64
   357c8:	rsb	r1, ip, ip, lsl #3
   357cc:	b	356c0 <__assert_fail@plt+0x221bc>
   357d0:	sub	r1, fp, #512	; 0x200
   357d4:	mvn	r5, #0
   357d8:	mov	r6, r5
   357dc:	strd	r8, [r1, #-132]	; 0xffffff7c
   357e0:	b	33140 <__assert_fail@plt+0x1fc3c>
   357e4:	sub	r3, fp, #512	; 0x200
   357e8:	mov	r5, r9
   357ec:	mvn	r4, #0
   357f0:	mvn	r9, #-2147483648	; 0x80000000
   357f4:	strd	r0, [r3, #-156]	; 0xffffff64
   357f8:	b	330b8 <__assert_fail@plt+0x1fbb4>
   357fc:	cmp	lr, #1
   35800:	bhi	356a8 <__assert_fail@plt+0x221a4>
   35804:	mvn	r4, #0
   35808:	mvn	r9, #-2147483648	; 0x80000000
   3580c:	b	330b8 <__assert_fail@plt+0x1fbb4>
   35810:	cmp	r6, #1
   35814:	movhi	r9, r6
   35818:	bhi	3563c <__assert_fail@plt+0x22138>
   3581c:	mvn	r5, #0
   35820:	mov	r6, r5
   35824:	b	33140 <__assert_fail@plt+0x1fc3c>
   35828:	cmp	sl, r6
   3582c:	bls	35a00 <__assert_fail@plt+0x224fc>
   35830:	rsb	r6, r6, sl
   35834:	cmp	r6, #9
   35838:	movhi	r9, #10
   3583c:	bls	359f4 <__assert_fail@plt+0x224f0>
   35840:	ldrb	r1, [r8, #2]
   35844:	add	ip, r8, #3
   35848:	sub	r8, fp, #512	; 0x200
   3584c:	and	r0, r1, #127	; 0x7f
   35850:	tst	r1, #128	; 0x80
   35854:	uxtb	r0, r0
   35858:	lsl	r6, r0, #7
   3585c:	lsr	r5, r0, #25
   35860:	str	r6, [fp, #-484]	; 0xfffffe1c
   35864:	str	r5, [fp, #-480]	; 0xfffffe20
   35868:	ldrd	r6, [r8, #28]
   3586c:	orr	r6, r6, r2
   35870:	orr	r7, r7, r3
   35874:	bne	35904 <__assert_fail@plt+0x22400>
   35878:	mov	r5, r6
   3587c:	mov	r6, r7
   35880:	b	33080 <__assert_fail@plt+0x1fb7c>
   35884:	and	r3, r3, #127	; 0x7f
   35888:	cmp	sl, r6
   3588c:	mov	r5, #0
   35890:	uxtb	r4, r3
   35894:	bls	359e8 <__assert_fail@plt+0x224e4>
   35898:	rsb	ip, r6, sl
   3589c:	cmp	ip, #8
   358a0:	movhi	ip, #9
   358a4:	bls	359e0 <__assert_fail@plt+0x224dc>
   358a8:	ldrb	r3, [r8, #2]
   358ac:	add	r1, r8, #3
   358b0:	uxtb	r2, r3
   358b4:	tst	r2, #128	; 0x80
   358b8:	moveq	r0, #7
   358bc:	bne	35960 <__assert_fail@plt+0x2245c>
   358c0:	sbfx	r2, r2, #0, #7
   358c4:	sub	lr, r0, #32
   358c8:	rsb	ip, r0, #32
   358cc:	sxtb	r2, r2
   358d0:	asr	r3, r2, #31
   358d4:	lsl	r6, r3, r0
   358d8:	lsl	r0, r2, r0
   358dc:	orr	lr, r6, r2, lsl lr
   358e0:	str	r0, [fp, #-236]	; 0xffffff14
   358e4:	orr	ip, lr, r2, lsr ip
   358e8:	str	ip, [fp, #-232]	; 0xffffff18
   358ec:	ldrd	r8, [fp, #-236]	; 0xffffff14
   358f0:	orr	r4, r4, r8
   358f4:	orr	r5, r5, r9
   358f8:	mov	r2, r4
   358fc:	mov	ip, r5
   35900:	b	3301c <__assert_fail@plt+0x1fb18>
   35904:	str	r9, [fp, #-108]	; 0xffffff94
   35908:	mov	r1, #1
   3590c:	ldrd	r8, [r8, #-148]	; 0xffffff6c
   35910:	ldr	r0, [fp, #-108]	; 0xffffff94
   35914:	add	r1, r1, #1
   35918:	cmp	r0, r1
   3591c:	bls	359b8 <__assert_fail@plt+0x224b4>
   35920:	ldrb	lr, [ip], #1
   35924:	rsb	r0, r1, r1, lsl #3
   35928:	sub	r5, r0, #32
   3592c:	rsb	r4, r0, #32
   35930:	and	r2, lr, #127	; 0x7f
   35934:	tst	lr, #128	; 0x80
   35938:	uxtb	r2, r2
   3593c:	lsl	r9, r2, r5
   35940:	lsl	r8, r2, r0
   35944:	orr	r9, r9, r2, lsr r4
   35948:	orr	r6, r6, r8
   3594c:	orr	r7, r7, r9
   35950:	bne	35910 <__assert_fail@plt+0x2240c>
   35954:	sub	r2, fp, #512	; 0x200
   35958:	strd	r8, [r2, #-148]	; 0xffffff6c
   3595c:	b	35878 <__assert_fail@plt+0x22374>
   35960:	mov	r0, #1
   35964:	and	r3, r3, #127	; 0x7f
   35968:	rsb	lr, r0, r0, lsl #3
   3596c:	add	r0, r0, #1
   35970:	uxtb	r2, r3
   35974:	sub	r3, lr, #32
   35978:	cmp	ip, r0
   3597c:	lsl	r7, r2, r3
   35980:	rsb	r3, lr, #32
   35984:	orr	r7, r7, r2, lsr r3
   35988:	lsl	r6, r2, lr
   3598c:	orr	r4, r4, r6
   35990:	orr	r5, r5, r7
   35994:	bls	359cc <__assert_fail@plt+0x224c8>
   35998:	ldrb	r3, [r1], #1
   3599c:	uxtb	r2, r3
   359a0:	tst	r2, #128	; 0x80
   359a4:	bne	35964 <__assert_fail@plt+0x22460>
   359a8:	sub	r3, fp, #512	; 0x200
   359ac:	rsb	r0, r0, r0, lsl #3
   359b0:	strd	r6, [r3, #-164]	; 0xffffff5c
   359b4:	b	358c0 <__assert_fail@plt+0x223bc>
   359b8:	sub	r1, fp, #512	; 0x200
   359bc:	mvn	r5, #0
   359c0:	mov	r6, r5
   359c4:	strd	r8, [r1, #-148]	; 0xffffff6c
   359c8:	b	33080 <__assert_fail@plt+0x1fb7c>
   359cc:	sub	ip, fp, #512	; 0x200
   359d0:	mvn	r2, #0
   359d4:	strd	r6, [ip, #-164]	; 0xffffff5c
   359d8:	mvn	ip, #-2147483648	; 0x80000000
   359dc:	b	3301c <__assert_fail@plt+0x1fb18>
   359e0:	cmp	ip, #1
   359e4:	bhi	358a8 <__assert_fail@plt+0x223a4>
   359e8:	mvn	r2, #0
   359ec:	mvn	ip, #-2147483648	; 0x80000000
   359f0:	b	3301c <__assert_fail@plt+0x1fb18>
   359f4:	cmp	r6, #1
   359f8:	movhi	r9, r6
   359fc:	bhi	35840 <__assert_fail@plt+0x2233c>
   35a00:	mvn	r5, #0
   35a04:	mov	r6, r5
   35a08:	b	33080 <__assert_fail@plt+0x1fb7c>
   35a0c:	cmp	sl, ip
   35a10:	bls	35bd0 <__assert_fail@plt+0x226cc>
   35a14:	rsb	r7, ip, sl
   35a18:	cmp	r7, #9
   35a1c:	movhi	r9, #10
   35a20:	bls	35bc4 <__assert_fail@plt+0x226c0>
   35a24:	ldrb	lr, [ip, #1]
   35a28:	add	r8, ip, #2
   35a2c:	sub	ip, fp, #512	; 0x200
   35a30:	and	r4, lr, #127	; 0x7f
   35a34:	tst	lr, #128	; 0x80
   35a38:	uxtb	r4, r4
   35a3c:	movne	r5, r8
   35a40:	lsr	r6, r4, #25
   35a44:	lsl	r7, r4, #7
   35a48:	str	r6, [fp, #-496]	; 0xfffffe10
   35a4c:	str	r7, [fp, #-500]	; 0xfffffe0c
   35a50:	ldrd	r6, [ip, #12]
   35a54:	movne	ip, #1
   35a58:	orr	r6, r6, r0
   35a5c:	orr	r7, r7, r1
   35a60:	bne	35acc <__assert_fail@plt+0x225c8>
   35a64:	mov	r4, r6
   35a68:	mov	r0, r7
   35a6c:	b	32fb4 <__assert_fail@plt+0x1fab0>
   35a70:	cmp	sl, r6
   35a74:	bls	35bb8 <__assert_fail@plt+0x226b4>
   35a78:	rsb	r6, r6, sl
   35a7c:	cmp	r6, #9
   35a80:	movhi	r9, #10
   35a84:	bls	35bac <__assert_fail@plt+0x226a8>
   35a88:	ldrb	r3, [r8, #2]
   35a8c:	sub	r5, fp, #512	; 0x200
   35a90:	add	ip, r8, #3
   35a94:	and	r2, r3, #127	; 0x7f
   35a98:	tst	r3, #128	; 0x80
   35a9c:	uxtb	r2, r2
   35aa0:	lsr	lr, r2, #25
   35aa4:	lsl	r4, r2, #7
   35aa8:	str	lr, [fp, #-488]	; 0xfffffe18
   35aac:	str	r4, [fp, #-492]	; 0xfffffe14
   35ab0:	ldrd	r6, [r5, #20]
   35ab4:	orr	r6, r6, r0
   35ab8:	orr	r7, r7, r1
   35abc:	bne	35b2c <__assert_fail@plt+0x22628>
   35ac0:	mov	r2, r6
   35ac4:	mov	r3, r7
   35ac8:	b	32f80 <__assert_fail@plt+0x1fa7c>
   35acc:	add	ip, ip, #1
   35ad0:	cmp	r9, ip
   35ad4:	bls	35b88 <__assert_fail@plt+0x22684>
   35ad8:	ldrb	r4, [r5], #1
   35adc:	rsb	lr, ip, ip, lsl #3
   35ae0:	rsb	r1, lr, #32
   35ae4:	str	r1, [fp, #-108]	; 0xffffff94
   35ae8:	and	r0, r4, #127	; 0x7f
   35aec:	sub	r8, lr, #32
   35af0:	tst	r4, #128	; 0x80
   35af4:	sub	r1, fp, #512	; 0x200
   35af8:	uxtb	r0, r0
   35afc:	ldr	r4, [fp, #-108]	; 0xffffff94
   35b00:	lsl	r8, r0, r8
   35b04:	lsl	lr, r0, lr
   35b08:	orr	r4, r8, r0, lsr r4
   35b0c:	str	lr, [fp, #-308]	; 0xfffffecc
   35b10:	str	r4, [fp, #-304]	; 0xfffffed0
   35b14:	ldrd	r0, [r1, #204]	; 0xcc
   35b18:	orr	r6, r6, r0
   35b1c:	orr	r7, r7, r1
   35b20:	bne	35acc <__assert_fail@plt+0x225c8>
   35b24:	mov	r8, r5
   35b28:	b	35a64 <__assert_fail@plt+0x22560>
   35b2c:	str	r9, [fp, #-108]	; 0xffffff94
   35b30:	mov	r1, #1
   35b34:	ldrd	r8, [r5, #-172]	; 0xffffff54
   35b38:	ldr	r0, [fp, #-108]	; 0xffffff94
   35b3c:	add	r1, r1, #1
   35b40:	cmp	r0, r1
   35b44:	bls	35b98 <__assert_fail@plt+0x22694>
   35b48:	ldrb	lr, [ip], #1
   35b4c:	rsb	r0, r1, r1, lsl #3
   35b50:	sub	r5, r0, #32
   35b54:	rsb	r4, r0, #32
   35b58:	and	r2, lr, #127	; 0x7f
   35b5c:	tst	lr, #128	; 0x80
   35b60:	uxtb	r2, r2
   35b64:	lsl	r9, r2, r5
   35b68:	lsl	r8, r2, r0
   35b6c:	orr	r9, r9, r2, lsr r4
   35b70:	orr	r6, r6, r8
   35b74:	orr	r7, r7, r9
   35b78:	bne	35b38 <__assert_fail@plt+0x22634>
   35b7c:	sub	r2, fp, #512	; 0x200
   35b80:	strd	r8, [r2, #-172]	; 0xffffff54
   35b84:	b	35ac0 <__assert_fail@plt+0x225bc>
   35b88:	mvn	r4, #0
   35b8c:	mov	r8, r5
   35b90:	mov	r0, r4
   35b94:	b	32fb4 <__assert_fail@plt+0x1fab0>
   35b98:	sub	r1, fp, #512	; 0x200
   35b9c:	mvn	r2, #0
   35ba0:	mov	r3, r2
   35ba4:	strd	r8, [r1, #-172]	; 0xffffff54
   35ba8:	b	32f80 <__assert_fail@plt+0x1fa7c>
   35bac:	cmp	r6, #1
   35bb0:	movhi	r9, r6
   35bb4:	bhi	35a88 <__assert_fail@plt+0x22584>
   35bb8:	mvn	r2, #0
   35bbc:	mov	r3, r2
   35bc0:	b	32f80 <__assert_fail@plt+0x1fa7c>
   35bc4:	cmp	r7, #1
   35bc8:	movhi	r9, r7
   35bcc:	bhi	35a24 <__assert_fail@plt+0x22520>
   35bd0:	mvn	r4, #0
   35bd4:	mov	r0, r4
   35bd8:	b	32fb4 <__assert_fail@plt+0x1fab0>
   35bdc:	cmp	sl, r6
   35be0:	bls	35d9c <__assert_fail@plt+0x22898>
   35be4:	rsb	r6, r6, sl
   35be8:	cmp	r6, #9
   35bec:	movhi	r9, #10
   35bf0:	bls	35d90 <__assert_fail@plt+0x2288c>
   35bf4:	ldrb	r1, [r8, #2]
   35bf8:	add	r5, r8, #3
   35bfc:	sub	r8, fp, #512	; 0x200
   35c00:	and	r0, r1, #127	; 0x7f
   35c04:	tst	r1, #128	; 0x80
   35c08:	uxtb	r0, r0
   35c0c:	lsr	r6, r0, #25
   35c10:	lsl	r7, r0, #7
   35c14:	str	r6, [fp, #-432]	; 0xfffffe50
   35c18:	str	r7, [fp, #-436]	; 0xfffffe4c
   35c1c:	ldrd	r6, [r8, #76]	; 0x4c
   35c20:	orr	r6, r6, r2
   35c24:	orr	r7, r7, r3
   35c28:	bne	35c94 <__assert_fail@plt+0x22790>
   35c2c:	mov	r1, r6
   35c30:	mov	r4, r7
   35c34:	b	33380 <__assert_fail@plt+0x1fe7c>
   35c38:	cmp	sl, r6
   35c3c:	bls	35d84 <__assert_fail@plt+0x22880>
   35c40:	rsb	r6, r6, sl
   35c44:	cmp	r6, #9
   35c48:	movhi	r9, #10
   35c4c:	bls	35d78 <__assert_fail@plt+0x22874>
   35c50:	ldrb	r3, [r8, #2]
   35c54:	add	ip, r8, #3
   35c58:	sub	r8, fp, #512	; 0x200
   35c5c:	and	r2, r3, #127	; 0x7f
   35c60:	tst	r3, #128	; 0x80
   35c64:	uxtb	r2, r2
   35c68:	lsr	r4, r2, #25
   35c6c:	lsl	r5, r2, #7
   35c70:	str	r4, [fp, #-440]	; 0xfffffe48
   35c74:	str	r5, [fp, #-444]	; 0xfffffe44
   35c78:	ldrd	r6, [r8, #68]	; 0x44
   35c7c:	orr	r6, r6, r0
   35c80:	orr	r7, r7, r1
   35c84:	bne	35cf0 <__assert_fail@plt+0x227ec>
   35c88:	mov	r0, r6
   35c8c:	mov	lr, r7
   35c90:	b	33340 <__assert_fail@plt+0x1fe3c>
   35c94:	str	r9, [fp, #-108]	; 0xffffff94
   35c98:	mov	r1, #1
   35c9c:	ldrd	r8, [r8, #-100]	; 0xffffff9c
   35ca0:	ldr	r0, [fp, #-108]	; 0xffffff94
   35ca4:	add	r1, r1, #1
   35ca8:	cmp	r1, r0
   35cac:	bcs	35d4c <__assert_fail@plt+0x22848>
   35cb0:	ldrb	ip, [r5], #1
   35cb4:	rsb	r0, r1, r1, lsl #3
   35cb8:	sub	r4, r0, #32
   35cbc:	rsb	lr, r0, #32
   35cc0:	and	r2, ip, #127	; 0x7f
   35cc4:	tst	ip, #128	; 0x80
   35cc8:	uxtb	r2, r2
   35ccc:	lsl	r9, r2, r4
   35cd0:	lsl	r8, r2, r0
   35cd4:	orr	r9, r9, r2, lsr lr
   35cd8:	orr	r6, r6, r8
   35cdc:	orr	r7, r7, r9
   35ce0:	bne	35ca0 <__assert_fail@plt+0x2279c>
   35ce4:	sub	lr, fp, #512	; 0x200
   35ce8:	strd	r8, [lr, #-100]	; 0xffffff9c
   35cec:	b	35c2c <__assert_fail@plt+0x22728>
   35cf0:	str	r9, [fp, #-108]	; 0xffffff94
   35cf4:	mov	r1, #1
   35cf8:	ldrd	r8, [r8, #-108]	; 0xffffff94
   35cfc:	ldr	r0, [fp, #-108]	; 0xffffff94
   35d00:	add	r1, r1, #1
   35d04:	cmp	r1, r0
   35d08:	bcs	35d64 <__assert_fail@plt+0x22860>
   35d0c:	ldrb	lr, [ip], #1
   35d10:	rsb	r0, r1, r1, lsl #3
   35d14:	sub	r5, r0, #32
   35d18:	rsb	r4, r0, #32
   35d1c:	and	r2, lr, #127	; 0x7f
   35d20:	tst	lr, #128	; 0x80
   35d24:	uxtb	r2, r2
   35d28:	lsl	r9, r2, r5
   35d2c:	lsl	r8, r2, r0
   35d30:	orr	r9, r9, r2, lsr r4
   35d34:	orr	r6, r6, r8
   35d38:	orr	r7, r7, r9
   35d3c:	bne	35cfc <__assert_fail@plt+0x227f8>
   35d40:	sub	r2, fp, #512	; 0x200
   35d44:	strd	r8, [r2, #-108]	; 0xffffff94
   35d48:	b	35c88 <__assert_fail@plt+0x22784>
   35d4c:	sub	r1, fp, #512	; 0x200
   35d50:	strd	r8, [r1, #-100]	; 0xffffff9c
   35d54:	mvn	r1, #0
   35d58:	mov	r6, r1
   35d5c:	mov	r4, r1
   35d60:	b	33380 <__assert_fail@plt+0x1fe7c>
   35d64:	sub	r1, fp, #512	; 0x200
   35d68:	mvn	r0, #0
   35d6c:	mov	lr, r0
   35d70:	strd	r8, [r1, #-108]	; 0xffffff94
   35d74:	b	33340 <__assert_fail@plt+0x1fe3c>
   35d78:	cmp	r6, #1
   35d7c:	movhi	r9, r6
   35d80:	bhi	35c50 <__assert_fail@plt+0x2274c>
   35d84:	mvn	r0, #0
   35d88:	mov	lr, r0
   35d8c:	b	33340 <__assert_fail@plt+0x1fe3c>
   35d90:	cmp	r6, #1
   35d94:	movhi	r9, r6
   35d98:	bhi	35bf4 <__assert_fail@plt+0x226f0>
   35d9c:	mvn	r1, #0
   35da0:	mov	r6, r1
   35da4:	mov	r4, r1
   35da8:	b	33380 <__assert_fail@plt+0x1fe7c>
   35dac:	cmp	sl, r6
   35db0:	bls	36028 <__assert_fail@plt+0x22b24>
   35db4:	rsb	r6, r6, sl
   35db8:	cmp	r6, #9
   35dbc:	movhi	r9, #10
   35dc0:	bls	3601c <__assert_fail@plt+0x22b18>
   35dc4:	ldrb	r3, [r8, #2]
   35dc8:	add	r4, r8, #3
   35dcc:	sub	r8, fp, #512	; 0x200
   35dd0:	and	r2, r3, #127	; 0x7f
   35dd4:	tst	r3, #128	; 0x80
   35dd8:	uxtb	r2, r2
   35ddc:	lsl	r6, r2, #7
   35de0:	lsr	r5, r2, #25
   35de4:	str	r6, [fp, #-452]	; 0xfffffe3c
   35de8:	str	r5, [fp, #-448]	; 0xfffffe40
   35dec:	ldrd	r6, [r8, #60]	; 0x3c
   35df0:	orr	r6, r6, r0
   35df4:	orr	r7, r7, r1
   35df8:	bne	35eb8 <__assert_fail@plt+0x229b4>
   35dfc:	mov	r0, r6
   35e00:	mov	ip, r7
   35e04:	b	3329c <__assert_fail@plt+0x1fd98>
   35e08:	cmp	sl, ip
   35e0c:	bls	36034 <__assert_fail@plt+0x22b30>
   35e10:	rsb	r3, ip, sl
   35e14:	cmp	r3, #9
   35e18:	movhi	lr, #10
   35e1c:	bls	35f14 <__assert_fail@plt+0x22a10>
   35e20:	ldrb	r3, [ip, #1]
   35e24:	add	r6, ip, #2
   35e28:	and	r2, r3, #127	; 0x7f
   35e2c:	tst	r3, #128	; 0x80
   35e30:	sub	r3, fp, #512	; 0x200
   35e34:	uxtb	r2, r2
   35e38:	movne	r1, #1
   35e3c:	lsr	ip, r2, #25
   35e40:	lsl	r0, r2, #7
   35e44:	str	ip, [fp, #-464]	; 0xfffffe30
   35e48:	str	r0, [fp, #-468]	; 0xfffffe2c
   35e4c:	ldrd	r2, [r3, #44]	; 0x2c
   35e50:	orr	r8, r8, r2
   35e54:	orr	r9, r9, r3
   35e58:	beq	3322c <__assert_fail@plt+0x1fd28>
   35e5c:	add	r1, r1, #1
   35e60:	cmp	r1, lr
   35e64:	bcs	36034 <__assert_fail@plt+0x22b30>
   35e68:	ldrb	ip, [r6], #1
   35e6c:	rsb	r0, r1, r1, lsl #3
   35e70:	sub	r4, r0, #32
   35e74:	str	r4, [fp, #-108]	; 0xffffff94
   35e78:	and	r2, ip, #127	; 0x7f
   35e7c:	tst	ip, #128	; 0x80
   35e80:	ldr	ip, [fp, #-108]	; 0xffffff94
   35e84:	sub	r3, fp, #512	; 0x200
   35e88:	uxtb	r2, r2
   35e8c:	rsb	r4, r0, #32
   35e90:	lsl	ip, r2, ip
   35e94:	lsl	r0, r2, r0
   35e98:	orr	r4, ip, r2, lsr r4
   35e9c:	str	r0, [fp, #-300]	; 0xfffffed4
   35ea0:	str	r4, [fp, #-296]	; 0xfffffed8
   35ea4:	ldrd	r2, [r3, #212]	; 0xd4
   35ea8:	orr	r8, r8, r2
   35eac:	orr	r9, r9, r3
   35eb0:	beq	3322c <__assert_fail@plt+0x1fd28>
   35eb4:	b	35e5c <__assert_fail@plt+0x22958>
   35eb8:	str	r9, [fp, #-108]	; 0xffffff94
   35ebc:	mov	r1, #1
   35ec0:	ldrd	r8, [r8, #-116]	; 0xffffff8c
   35ec4:	ldr	lr, [fp, #-108]	; 0xffffff94
   35ec8:	add	r1, r1, #1
   35ecc:	cmp	r1, lr
   35ed0:	bcs	36040 <__assert_fail@plt+0x22b3c>
   35ed4:	ldrb	ip, [r4], #1
   35ed8:	rsb	r0, r1, r1, lsl #3
   35edc:	sub	r5, r0, #32
   35ee0:	rsb	lr, r0, #32
   35ee4:	and	r2, ip, #127	; 0x7f
   35ee8:	tst	ip, #128	; 0x80
   35eec:	uxtb	r2, r2
   35ef0:	lsl	r9, r2, r5
   35ef4:	lsl	r8, r2, r0
   35ef8:	orr	r9, r9, r2, lsr lr
   35efc:	orr	r6, r6, r8
   35f00:	orr	r7, r7, r9
   35f04:	bne	35ec4 <__assert_fail@plt+0x229c0>
   35f08:	sub	r1, fp, #512	; 0x200
   35f0c:	strd	r8, [r1, #-116]	; 0xffffff8c
   35f10:	b	35dfc <__assert_fail@plt+0x228f8>
   35f14:	cmp	r3, #1
   35f18:	bls	36034 <__assert_fail@plt+0x22b30>
   35f1c:	mov	lr, r3
   35f20:	b	35e20 <__assert_fail@plt+0x2291c>
   35f24:	str	r9, [fp, #-108]	; 0xffffff94
   35f28:	mov	r1, #1
   35f2c:	ldrd	r8, [r8, #-84]	; 0xffffffac
   35f30:	ldr	r0, [fp, #-108]	; 0xffffff94
   35f34:	add	r1, r1, #1
   35f38:	cmp	r1, r0
   35f3c:	bcs	35fe0 <__assert_fail@plt+0x22adc>
   35f40:	ldrb	ip, [lr], #1
   35f44:	rsb	r0, r1, r1, lsl #3
   35f48:	sub	r5, r0, #32
   35f4c:	rsb	r4, r0, #32
   35f50:	and	r2, ip, #127	; 0x7f
   35f54:	tst	ip, #128	; 0x80
   35f58:	uxtb	r2, r2
   35f5c:	lsl	r9, r2, r5
   35f60:	lsl	r8, r2, r0
   35f64:	orr	r9, r9, r2, lsr r4
   35f68:	orr	r6, r6, r8
   35f6c:	orr	r7, r7, r9
   35f70:	bne	35f30 <__assert_fail@plt+0x22a2c>
   35f74:	sub	r2, fp, #512	; 0x200
   35f78:	strd	r8, [r2, #-84]	; 0xffffffac
   35f7c:	b	34f2c <__assert_fail@plt+0x21a28>
   35f80:	add	r1, r1, #1
   35f84:	cmp	r1, r9
   35f88:	bcs	35ff4 <__assert_fail@plt+0x22af0>
   35f8c:	ldrb	ip, [lr], #1
   35f90:	rsb	r0, r1, r1, lsl #3
   35f94:	rsb	r3, r0, #32
   35f98:	str	r3, [fp, #-108]	; 0xffffff94
   35f9c:	and	r2, ip, #127	; 0x7f
   35fa0:	sub	r8, r0, #32
   35fa4:	tst	ip, #128	; 0x80
   35fa8:	sub	r3, fp, #512	; 0x200
   35fac:	uxtb	r2, r2
   35fb0:	ldr	ip, [fp, #-108]	; 0xffffff94
   35fb4:	lsl	r8, r2, r8
   35fb8:	lsl	r0, r2, r0
   35fbc:	orr	r8, r8, r2, lsr ip
   35fc0:	str	r0, [fp, #-292]	; 0xfffffedc
   35fc4:	str	r8, [fp, #-288]	; 0xfffffee0
   35fc8:	ldrd	r2, [r3, #220]	; 0xdc
   35fcc:	orr	r6, r6, r2
   35fd0:	orr	r7, r7, r3
   35fd4:	bne	35f80 <__assert_fail@plt+0x22a7c>
   35fd8:	mov	r8, lr
   35fdc:	b	34f94 <__assert_fail@plt+0x21a90>
   35fe0:	sub	r1, fp, #512	; 0x200
   35fe4:	mvn	r5, #0
   35fe8:	mov	r6, r5
   35fec:	strd	r8, [r1, #-84]	; 0xffffffac
   35ff0:	b	334c4 <__assert_fail@plt+0x1ffc0>
   35ff4:	mvn	r9, #0
   35ff8:	mov	r8, lr
   35ffc:	mov	r7, r9
   36000:	b	33428 <__assert_fail@plt+0x1ff24>
   36004:	cmp	r7, #1
   36008:	movhi	r9, r7
   3600c:	bhi	34f50 <__assert_fail@plt+0x21a4c>
   36010:	mvn	r9, #0
   36014:	mov	r7, r9
   36018:	b	33428 <__assert_fail@plt+0x1ff24>
   3601c:	cmp	r6, #1
   36020:	movhi	r9, r6
   36024:	bhi	35dc4 <__assert_fail@plt+0x228c0>
   36028:	mvn	r0, #0
   3602c:	mov	ip, r0
   36030:	b	3329c <__assert_fail@plt+0x1fd98>
   36034:	mvn	r8, #0
   36038:	mvn	r9, #0
   3603c:	b	3322c <__assert_fail@plt+0x1fd28>
   36040:	sub	r0, fp, #512	; 0x200
   36044:	strd	r8, [r0, #-116]	; 0xffffff8c
   36048:	mvn	r0, #0
   3604c:	mov	ip, r0
   36050:	b	3329c <__assert_fail@plt+0x1fd98>
   36054:	bl	12dc0 <__stack_chk_fail@plt>
   36058:	ldr	r3, [r6]
   3605c:	ldr	r2, [r6, #4]
   36060:	rev	r3, r3
   36064:	str	r3, [fp, #-728]	; 0xfffffd28
   36068:	rev	r2, r2
   3606c:	str	r2, [fp, #-732]	; 0xfffffd24
   36070:	b	328b4 <__assert_fail@plt+0x1f3b0>
   36074:	mov	r2, #5
   36078:	movw	r1, #14432	; 0x3860
   3607c:	mov	r0, #0
   36080:	movt	r1, #4
   36084:	bl	12d84 <dcgettext@plt>
   36088:	ldr	r2, [fp, #-144]	; 0xffffff70
   3608c:	mov	sl, r6
   36090:	mov	r1, r0
   36094:	mov	r0, #1
   36098:	bl	13204 <__printf_chk@plt>
   3609c:	b	32b04 <__assert_fail@plt+0x1f600>
   360a0:	ldr	r9, [fp, #-128]	; 0xffffff80
   360a4:	add	r6, sl, #12
   360a8:	cmp	r9, r6
   360ac:	bcc	33f58 <__assert_fail@plt+0x20a54>
   360b0:	cmp	ip, #0
   360b4:	ldreq	lr, [r3]
   360b8:	ldreq	r3, [r3, #4]
   360bc:	streq	lr, [fp, #-92]	; 0xffffffa4
   360c0:	streq	r3, [fp, #-88]	; 0xffffffa8
   360c4:	beq	360e0 <__assert_fail@plt+0x22bdc>
   360c8:	ldr	r2, [r3]
   360cc:	ldr	r3, [r3, #4]
   360d0:	rev	r2, r2
   360d4:	str	r2, [fp, #-88]	; 0xffffffa8
   360d8:	rev	r3, r3
   360dc:	str	r3, [fp, #-92]	; 0xffffffa4
   360e0:	mov	r0, #8
   360e4:	b	32838 <__assert_fail@plt+0x1f334>
   360e8:	ldr	r7, [fp, #-724]	; 0xfffffd2c
   360ec:	mov	r5, #0
   360f0:	ldr	r3, [r7]
   360f4:	mov	r8, r7
   360f8:	ldr	r2, [r8, #4]!
   360fc:	rev	r3, r3
   36100:	rev	r2, r2
   36104:	mov	r4, r3
   36108:	strd	r4, [fp, #-156]	; 0xffffff64
   3610c:	b	33f24 <__assert_fail@plt+0x20a20>
   36110:	add	r3, r3, #1
   36114:	cmp	r6, r3
   36118:	bls	3616c <__assert_fail@plt+0x22c68>
   3611c:	ldrb	lr, [r7], #1
   36120:	rsb	ip, r3, r3, lsl #3
   36124:	sub	r5, ip, #32
   36128:	rsb	r4, ip, #32
   3612c:	and	r0, lr, #127	; 0x7f
   36130:	tst	lr, #128	; 0x80
   36134:	uxtb	r0, r0
   36138:	lsl	r5, r0, r5
   3613c:	lsl	ip, r0, ip
   36140:	orr	r4, r5, r0, lsr r4
   36144:	sub	r5, fp, #512	; 0x200
   36148:	str	r4, [fp, #-320]	; 0xfffffec0
   3614c:	str	ip, [fp, #-324]	; 0xfffffebc
   36150:	ldrd	r4, [r5, #188]	; 0xbc
   36154:	orr	r8, r8, r4
   36158:	orr	r9, r9, r5
   3615c:	beq	34378 <__assert_fail@plt+0x20e74>
   36160:	b	36110 <__assert_fail@plt+0x22c0c>
   36164:	cmp	r6, #1
   36168:	bhi	3433c <__assert_fail@plt+0x20e38>
   3616c:	mvn	r6, #0
   36170:	mov	r9, r6
   36174:	b	32cf0 <__assert_fail@plt+0x1f7ec>
   36178:	ldr	r0, [r8, #1]
   3617c:	ldr	r3, [r8, #5]
   36180:	rev	r0, r0
   36184:	rev	r3, r3
   36188:	b	32d8c <__assert_fail@plt+0x1f888>
   3618c:	cmp	sl, r6
   36190:	bls	362a4 <__assert_fail@plt+0x22da0>
   36194:	rsb	r6, r6, sl
   36198:	cmp	r6, #9
   3619c:	movhi	r9, #10
   361a0:	bls	36298 <__assert_fail@plt+0x22d94>
   361a4:	ldrb	r3, [r8, #2]
   361a8:	add	ip, r8, #3
   361ac:	and	r2, r3, #127	; 0x7f
   361b0:	tst	r3, #128	; 0x80
   361b4:	uxtb	r2, r2
   361b8:	lsr	r8, r2, #25
   361bc:	lsl	lr, r2, #7
   361c0:	sub	r2, fp, #512	; 0x200
   361c4:	str	r8, [fp, #-528]	; 0xfffffdf0
   361c8:	str	lr, [fp, #-532]	; 0xfffffdec
   361cc:	ldrd	r6, [r2, #-20]	; 0xffffffec
   361d0:	orr	r6, r6, r0
   361d4:	orr	r7, r7, r1
   361d8:	bne	3623c <__assert_fail@plt+0x22d38>
   361dc:	mov	r0, r6
   361e0:	mov	lr, r7
   361e4:	b	32c78 <__assert_fail@plt+0x1f774>
   361e8:	ldr	r3, [r8]
   361ec:	ldr	r5, [fp, #-724]	; 0xfffffd2c
   361f0:	ldr	r1, [r8, #8]!
   361f4:	rev	r3, r3
   361f8:	str	r3, [fp, #-104]	; 0xffffff98
   361fc:	ldr	r2, [r5, #4]
   36200:	rev	r1, r1
   36204:	ldr	r3, [r8, #4]
   36208:	rev	r2, r2
   3620c:	str	r1, [fp, #-112]	; 0xffffff90
   36210:	rev	r3, r3
   36214:	str	r2, [fp, #-108]	; 0xffffff94
   36218:	str	r3, [fp, #-116]	; 0xffffff8c
   3621c:	b	32a34 <__assert_fail@plt+0x1f530>
   36220:	movw	r0, #14932	; 0x3a54
   36224:	movw	r1, #24
   36228:	movt	r0, #4
   3622c:	movt	r1, #4
   36230:	movw	r2, #6802	; 0x1a92
   36234:	ldr	r3, [pc, #192]	; 362fc <__assert_fail@plt+0x22df8>
   36238:	bl	13504 <__assert_fail@plt>
   3623c:	str	r9, [fp, #-108]	; 0xffffff94
   36240:	mov	r1, #1
   36244:	ldrd	r8, [r2, #-204]	; 0xffffff34
   36248:	ldr	r4, [fp, #-108]	; 0xffffff94
   3624c:	add	r1, r1, #1
   36250:	cmp	r4, r1
   36254:	bls	362b0 <__assert_fail@plt+0x22dac>
   36258:	ldrb	lr, [ip], #1
   3625c:	rsb	r0, r1, r1, lsl #3
   36260:	sub	r5, r0, #32
   36264:	rsb	r4, r0, #32
   36268:	and	r2, lr, #127	; 0x7f
   3626c:	tst	lr, #128	; 0x80
   36270:	uxtb	r2, r2
   36274:	lsl	r9, r2, r5
   36278:	lsl	r8, r2, r0
   3627c:	orr	r9, r9, r2, lsr r4
   36280:	orr	r6, r6, r8
   36284:	orr	r7, r7, r9
   36288:	bne	36248 <__assert_fail@plt+0x22d44>
   3628c:	sub	lr, fp, #512	; 0x200
   36290:	strd	r8, [lr, #-204]	; 0xffffff34
   36294:	b	361dc <__assert_fail@plt+0x22cd8>
   36298:	cmp	r6, #1
   3629c:	movhi	r9, r6
   362a0:	bhi	361a4 <__assert_fail@plt+0x22ca0>
   362a4:	mvn	r0, #0
   362a8:	mov	lr, r0
   362ac:	b	32c78 <__assert_fail@plt+0x1f774>
   362b0:	sub	r5, fp, #512	; 0x200
   362b4:	mvn	r0, #0
   362b8:	mov	lr, r0
   362bc:	strd	r8, [r5, #-204]	; 0xffffff34
   362c0:	b	32c78 <__assert_fail@plt+0x1f774>
   362c4:	cmp	r3, #1
   362c8:	movhi	lr, r3
   362cc:	bhi	352ac <__assert_fail@plt+0x21da8>
   362d0:	mvn	r8, #0
   362d4:	mvn	r9, #0
   362d8:	b	32e2c <__assert_fail@plt+0x1f928>
   362dc:	mvn	r5, #0
   362e0:	mov	r7, r5
   362e4:	b	32e00 <__assert_fail@plt+0x1f8fc>
   362e8:	sub	r1, fp, #512	; 0x200
   362ec:	mvn	r5, #0
   362f0:	mov	r7, r5
   362f4:	strd	r8, [r1, #-196]	; 0xffffff3c
   362f8:	b	32e00 <__assert_fail@plt+0x1f8fc>
   362fc:	andeq	ip, r3, ip, asr #27
   36300:	movw	ip, #37712	; 0x9350
   36304:	movt	ip, #5
   36308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3630c:	movw	r8, #37688	; 0x9338
   36310:	sub	sp, sp, #196	; 0xc4
   36314:	movt	r8, #5
   36318:	ldrb	ip, [ip, #30]
   3631c:	mov	r4, r1
   36320:	str	r8, [sp, #68]	; 0x44
   36324:	mov	r6, r2
   36328:	str	r0, [sp, #84]	; 0x54
   3632c:	cmp	ip, #0
   36330:	ldr	r0, [r8]
   36334:	ldr	r9, [sp, #232]	; 0xe8
   36338:	ldr	r8, [sp, #236]	; 0xec
   3633c:	str	r3, [sp, #76]	; 0x4c
   36340:	str	r9, [sp, #72]	; 0x48
   36344:	str	r0, [sp, #188]	; 0xbc
   36348:	str	r8, [sp, #44]	; 0x2c
   3634c:	bne	36920 <__assert_fail@plt+0x2341c>
   36350:	ldr	r8, [sp, #44]	; 0x2c
   36354:	ldr	r8, [r8, #24]
   36358:	cmp	r8, #0
   3635c:	str	r8, [sp, #64]	; 0x40
   36360:	beq	36a74 <__assert_fail@plt+0x23570>
   36364:	mov	r2, #5
   36368:	movw	r1, #60928	; 0xee00
   3636c:	mov	r0, #0
   36370:	movt	r1, #3
   36374:	add	r4, r4, #16
   36378:	str	r4, [sp, #80]	; 0x50
   3637c:	bl	12d84 <dcgettext@plt>
   36380:	mov	r7, r0
   36384:	ldr	r0, [sp, #76]	; 0x4c
   36388:	bl	133d8 <elf_ndxscn@plt>
   3638c:	ldr	r1, [sp, #72]	; 0x48
   36390:	mov	r6, r0
   36394:	ldr	r0, [sp, #80]	; 0x50
   36398:	bl	1870c <__assert_fail@plt+0x5208>
   3639c:	ldr	r8, [sp, #72]	; 0x48
   363a0:	mov	r1, r7
   363a4:	mov	r2, r6
   363a8:	ldrd	r4, [r8, #24]
   363ac:	strd	r4, [sp]
   363b0:	mov	r3, r0
   363b4:	mov	r0, #1
   363b8:	bl	13204 <__printf_chk@plt>
   363bc:	ldr	r9, [sp, #64]	; 0x40
   363c0:	ldr	fp, [r9]
   363c4:	ldr	r3, [r9, #12]
   363c8:	add	sl, fp, r3
   363cc:	cmp	sl, fp
   363d0:	bls	36588 <__assert_fail@plt+0x23084>
   363d4:	ldr	r6, [sp, #64]	; 0x40
   363d8:	mvn	r8, #0
   363dc:	mov	r9, #0
   363e0:	strd	r8, [sp, #32]
   363e4:	mov	r2, #5
   363e8:	movw	r1, #12724	; 0x31b4
   363ec:	mov	r0, #0
   363f0:	movt	r1, #4
   363f4:	ldr	r4, [r6]
   363f8:	bl	12d84 <dcgettext@plt>
   363fc:	mov	r7, fp
   36400:	rsb	r4, r4, fp
   36404:	mov	r2, r4
   36408:	mov	r1, r0
   3640c:	mov	r0, #1
   36410:	bl	13204 <__printf_chk@plt>
   36414:	add	r3, fp, #4
   36418:	cmp	sl, r3
   3641c:	bcc	368ac <__assert_fail@plt+0x233a8>
   36420:	ldr	r8, [sp, #44]	; 0x2c
   36424:	ldr	r4, [fp]
   36428:	ldrb	r2, [r8, #84]	; 0x54
   3642c:	cmp	r2, #0
   36430:	bne	36b28 <__assert_fail@plt+0x23624>
   36434:	ldrd	r8, [sp, #32]
   36438:	mov	r5, #0
   3643c:	mov	r1, fp
   36440:	mov	fp, r3
   36444:	cmp	r5, r9
   36448:	cmpeq	r4, r8
   3644c:	movne	r9, #4
   36450:	bne	36474 <__assert_fail@plt+0x22f70>
   36454:	add	fp, r1, #12
   36458:	cmp	sl, fp
   3645c:	bcc	368ac <__assert_fail@plt+0x233a8>
   36460:	cmp	r2, #0
   36464:	ldreq	r4, [r3]
   36468:	ldreq	r5, [r3, #4]
   3646c:	bne	36b80 <__assert_fail@plt+0x2367c>
   36470:	mov	r9, #8
   36474:	mov	r2, #5
   36478:	movw	r1, #16548	; 0x40a4
   3647c:	mov	r0, #0
   36480:	movt	r1, #4
   36484:	bl	12d84 <dcgettext@plt>
   36488:	mov	r2, r4
   3648c:	mov	r3, r5
   36490:	mov	r1, r0
   36494:	mov	r0, #1
   36498:	bl	13204 <__printf_chk@plt>
   3649c:	rsb	r2, fp, sl
   364a0:	mov	r3, #0
   364a4:	cmp	r5, r3
   364a8:	cmpeq	r4, r2
   364ac:	bhi	368ac <__assert_fail@plt+0x233a8>
   364b0:	orrs	r0, r4, r5
   364b4:	beq	365a4 <__assert_fail@plt+0x230a0>
   364b8:	mov	r6, r7
   364bc:	mov	r7, r9
   364c0:	add	r9, fp, #2
   364c4:	cmp	sl, r9
   364c8:	bcc	368ac <__assert_fail@plt+0x233a8>
   364cc:	ldr	r8, [sp, #44]	; 0x2c
   364d0:	movw	r1, #16572	; 0x40bc
   364d4:	mov	r0, #0
   364d8:	movt	r1, #4
   364dc:	mov	r5, fp
   364e0:	ldrb	r3, [r8, #84]	; 0x54
   364e4:	cmp	r3, #0
   364e8:	ldrhne	r3, [fp]
   364ec:	ldrheq	r8, [fp]
   364f0:	lslne	r2, r3, #8
   364f4:	orrne	r3, r2, r3, lsr #8
   364f8:	mov	r2, #5
   364fc:	uxthne	r8, r3
   36500:	bl	12d84 <dcgettext@plt>
   36504:	add	lr, fp, r4
   36508:	str	lr, [sp, #48]	; 0x30
   3650c:	mov	r2, r8
   36510:	mov	fp, r9
   36514:	mov	r1, r0
   36518:	mov	r0, #1
   3651c:	bl	13204 <__printf_chk@plt>
   36520:	cmp	r8, #2
   36524:	beq	365b0 <__assert_fail@plt+0x230ac>
   36528:	movw	r1, #16596	; 0x40d4
   3652c:	movt	r1, #4
   36530:	mov	r0, #0
   36534:	mov	r2, #5
   36538:	bl	12d84 <dcgettext@plt>
   3653c:	mov	r2, r0
   36540:	mov	r0, #0
   36544:	mov	r1, r0
   36548:	bl	12f70 <error@plt>
   3654c:	ldr	r8, [sp, #48]	; 0x30
   36550:	cmp	fp, r8
   36554:	beq	363cc <__assert_fail@plt+0x22ec8>
   36558:	mov	r2, #5
   3655c:	movw	r1, #16708	; 0x4144
   36560:	mov	r0, #0
   36564:	movt	r1, #4
   36568:	bl	12d84 <dcgettext@plt>
   3656c:	rsb	r2, fp, r8
   36570:	ldr	fp, [sp, #48]	; 0x30
   36574:	mov	r1, r0
   36578:	mov	r0, #1
   3657c:	bl	13204 <__printf_chk@plt>
   36580:	cmp	sl, fp
   36584:	bhi	363d4 <__assert_fail@plt+0x22ed0>
   36588:	ldr	r9, [sp, #68]	; 0x44
   3658c:	ldr	r2, [sp, #188]	; 0xbc
   36590:	ldr	r3, [r9]
   36594:	cmp	r2, r3
   36598:	bne	36c1c <__assert_fail@plt+0x23718>
   3659c:	add	sp, sp, #196	; 0xc4
   365a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   365a4:	cmp	fp, sl
   365a8:	bcc	363e4 <__assert_fail@plt+0x22ee0>
   365ac:	b	36588 <__assert_fail@plt+0x23084>
   365b0:	add	r3, r9, r7
   365b4:	cmp	sl, r3
   365b8:	bcc	368ac <__assert_fail@plt+0x233a8>
   365bc:	ldr	r8, [sp, #44]	; 0x2c
   365c0:	cmp	r7, #8
   365c4:	ldrb	r3, [r8, #84]	; 0x54
   365c8:	beq	36908 <__assert_fail@plt+0x23404>
   365cc:	cmp	r3, #0
   365d0:	ldr	r4, [r9]
   365d4:	bne	36bdc <__assert_fail@plt+0x236d8>
   365d8:	add	r5, r5, #6
   365dc:	mov	r7, #0
   365e0:	mov	r2, #5
   365e4:	movw	r1, #16624	; 0x40f0
   365e8:	mov	r0, #0
   365ec:	movt	r1, #4
   365f0:	bl	12d84 <dcgettext@plt>
   365f4:	mov	r2, r4
   365f8:	mov	r3, r7
   365fc:	mov	r1, r0
   36600:	mov	r0, #1
   36604:	add	fp, r5, r0
   36608:	bl	13204 <__printf_chk@plt>
   3660c:	cmp	sl, fp
   36610:	bcc	368ac <__assert_fail@plt+0x233a8>
   36614:	mov	r2, #5
   36618:	movw	r1, #16648	; 0x4108
   3661c:	mov	r0, #0
   36620:	movt	r1, #4
   36624:	ldrb	r9, [r5]
   36628:	bl	12d84 <dcgettext@plt>
   3662c:	mov	r3, #0
   36630:	uxtb	r2, r9
   36634:	mov	r1, r0
   36638:	mov	r0, #1
   3663c:	bl	13204 <__printf_chk@plt>
   36640:	cmp	r9, #8
   36644:	cmpne	r9, #4
   36648:	moveq	r4, #0
   3664c:	movne	r4, #1
   36650:	bne	368f8 <__assert_fail@plt+0x233f4>
   36654:	add	fp, r5, #2
   36658:	cmp	sl, fp
   3665c:	bcc	368ac <__assert_fail@plt+0x233a8>
   36660:	ldrb	r7, [r5, #1]
   36664:	mov	r2, #5
   36668:	movw	r1, #16672	; 0x4120
   3666c:	mov	r0, r4
   36670:	adds	r8, r7, #0
   36674:	movt	r1, #4
   36678:	movne	r8, #1
   3667c:	bl	12d84 <dcgettext@plt>
   36680:	uxtb	r2, r7
   36684:	mov	r3, #0
   36688:	mov	r1, r0
   3668c:	mov	r0, #1
   36690:	bl	13204 <__printf_chk@plt>
   36694:	cmp	r7, #4
   36698:	cmpne	r7, #0
   3669c:	beq	366d0 <__assert_fail@plt+0x231cc>
   366a0:	cmp	r7, #8
   366a4:	beq	366d0 <__assert_fail@plt+0x231cc>
   366a8:	mov	r0, r4
   366ac:	mov	r2, #5
   366b0:	movw	r1, #11640	; 0x2d78
   366b4:	movt	r1, #4
   366b8:	bl	12d84 <dcgettext@plt>
   366bc:	mov	r1, r4
   366c0:	mov	r2, r0
   366c4:	mov	r0, r4
   366c8:	bl	12f70 <error@plt>
   366cc:	b	3654c <__assert_fail@plt+0x23048>
   366d0:	mov	r5, #2
   366d4:	rsb	r0, r6, fp
   366d8:	smulbb	r4, r9, r5
   366dc:	mov	r1, r4
   366e0:	bl	3b588 <__assert_fail@plt+0x28084>
   366e4:	rsb	r0, r1, r4
   366e8:	mov	r1, r4
   366ec:	bl	3b588 <__assert_fail@plt+0x28084>
   366f0:	ldr	r0, [sp, #48]	; 0x30
   366f4:	add	fp, fp, r1
   366f8:	cmp	r0, fp
   366fc:	bls	3654c <__assert_fail@plt+0x23048>
   36700:	smlabb	r5, r5, r9, r7
   36704:	add	r3, fp, r5
   36708:	cmp	sl, r3
   3670c:	str	r5, [sp, #52]	; 0x34
   36710:	bcc	368ac <__assert_fail@plt+0x233a8>
   36714:	str	sl, [sp, #56]	; 0x38
   36718:	mov	sl, r7
   3671c:	str	r8, [sp, #60]	; 0x3c
   36720:	ldr	r8, [sp, #84]	; 0x54
   36724:	b	3675c <__assert_fail@plt+0x23258>
   36728:	ldrd	r2, [sp, #32]
   3672c:	movw	r1, #16696	; 0x4138
   36730:	mov	r0, #1
   36734:	movt	r1, #4
   36738:	bl	13204 <__printf_chk@plt>
   3673c:	ldr	r3, [sp, #48]	; 0x30
   36740:	cmp	fp, r3
   36744:	bcs	36838 <__assert_fail@plt+0x23334>
   36748:	ldr	r1, [sp, #52]	; 0x34
   3674c:	ldr	r2, [sp, #56]	; 0x38
   36750:	add	r3, fp, r1
   36754:	cmp	r2, r3
   36758:	bcc	368ac <__assert_fail@plt+0x233a8>
   3675c:	cmp	r9, #4
   36760:	beq	36860 <__assert_fail@plt+0x2335c>
   36764:	ldr	r1, [sp, #44]	; 0x2c
   36768:	ldrb	r3, [r1, #84]	; 0x54
   3676c:	cmp	r3, #0
   36770:	ldreq	r4, [fp]
   36774:	ldreq	r6, [fp, #8]
   36778:	ldreq	r5, [fp, #4]
   3677c:	ldreq	r7, [fp, #12]
   36780:	bne	36b04 <__assert_fail@plt+0x23600>
   36784:	add	fp, fp, #16
   36788:	cmp	sl, #4
   3678c:	beq	36840 <__assert_fail@plt+0x2333c>
   36790:	cmp	sl, #8
   36794:	movne	r0, #0
   36798:	movne	r1, #0
   3679c:	strdne	r0, [sp, #32]
   367a0:	beq	3688c <__assert_fail@plt+0x23388>
   367a4:	ldrd	r0, [sp, #32]
   367a8:	orr	r2, r6, r4
   367ac:	orr	r3, r7, r5
   367b0:	orr	r2, r2, r0
   367b4:	orr	r3, r3, r1
   367b8:	orrs	r1, r2, r3
   367bc:	beq	36838 <__assert_fail@plt+0x23334>
   367c0:	movw	r1, #12172	; 0x2f8c
   367c4:	mov	r0, #1
   367c8:	movt	r1, #4
   367cc:	bl	13204 <__printf_chk@plt>
   367d0:	mov	r2, r4
   367d4:	mov	r3, r5
   367d8:	mov	r0, r8
   367dc:	mov	r1, r9
   367e0:	strd	r4, [sp]
   367e4:	bl	27164 <__assert_fail@plt+0x13c60>
   367e8:	movw	r1, #11248	; 0x2bf0
   367ec:	mov	r0, #1
   367f0:	movt	r1, #4
   367f4:	bl	13204 <__printf_chk@plt>
   367f8:	adds	r2, r4, r6
   367fc:	adc	r3, r5, r7
   36800:	subs	r2, r2, #1
   36804:	sbc	r3, r3, #0
   36808:	strd	r6, [sp]
   3680c:	mov	r0, r8
   36810:	mov	r1, r9
   36814:	bl	27164 <__assert_fail@plt+0x13c60>
   36818:	ldr	r2, [sp, #60]	; 0x3c
   3681c:	cmp	r2, #0
   36820:	bne	36728 <__assert_fail@plt+0x23224>
   36824:	mov	r0, #10
   36828:	bl	131b0 <putchar@plt>
   3682c:	ldr	r3, [sp, #48]	; 0x30
   36830:	cmp	fp, r3
   36834:	bcc	36748 <__assert_fail@plt+0x23244>
   36838:	ldr	sl, [sp, #56]	; 0x38
   3683c:	b	3654c <__assert_fail@plt+0x23048>
   36840:	cmp	r3, #0
   36844:	ldr	r3, [fp]
   36848:	bne	36b94 <__assert_fail@plt+0x23690>
   3684c:	mov	r0, r3
   36850:	mov	r1, #0
   36854:	add	fp, fp, #4
   36858:	strd	r0, [sp, #32]
   3685c:	b	367a4 <__assert_fail@plt+0x232a0>
   36860:	ldr	r0, [sp, #44]	; 0x2c
   36864:	ldr	r4, [fp]
   36868:	ldr	r2, [fp, #4]
   3686c:	ldrb	r3, [r0, #84]	; 0x54
   36870:	cmp	r3, #0
   36874:	moveq	r5, #0
   36878:	bne	36bb8 <__assert_fail@plt+0x236b4>
   3687c:	add	fp, fp, #8
   36880:	mov	r6, r2
   36884:	mov	r7, #0
   36888:	b	36788 <__assert_fail@plt+0x23284>
   3688c:	cmp	r3, #0
   36890:	ldreq	r1, [fp]
   36894:	ldreq	r2, [fp, #4]
   36898:	streq	r1, [sp, #32]
   3689c:	streq	r2, [sp, #36]	; 0x24
   368a0:	bne	36b9c <__assert_fail@plt+0x23698>
   368a4:	add	fp, fp, #8
   368a8:	b	367a4 <__assert_fail@plt+0x232a0>
   368ac:	mov	r2, #5
   368b0:	movw	r1, #11452	; 0x2cbc
   368b4:	mov	r0, #0
   368b8:	movt	r1, #4
   368bc:	bl	12d84 <dcgettext@plt>
   368c0:	mov	r5, r0
   368c4:	ldr	r0, [sp, #76]	; 0x4c
   368c8:	bl	133d8 <elf_ndxscn@plt>
   368cc:	ldr	r1, [sp, #72]	; 0x48
   368d0:	mov	r4, r0
   368d4:	ldr	r0, [sp, #80]	; 0x50
   368d8:	bl	1870c <__assert_fail@plt+0x5208>
   368dc:	mov	r2, r5
   368e0:	mov	r3, r4
   368e4:	str	r0, [sp]
   368e8:	mov	r0, #0
   368ec:	mov	r1, r0
   368f0:	bl	12f70 <error@plt>
   368f4:	b	36588 <__assert_fail@plt+0x23084>
   368f8:	movw	r1, #11588	; 0x2d44
   368fc:	mov	r0, #0
   36900:	movt	r1, #4
   36904:	b	36534 <__assert_fail@plt+0x23030>
   36908:	cmp	r3, #0
   3690c:	ldreq	r4, [r9]
   36910:	ldreq	r7, [r9, #4]
   36914:	bne	36bc8 <__assert_fail@plt+0x236c4>
   36918:	add	r5, r5, #10
   3691c:	b	365e0 <__assert_fail@plt+0x230dc>
   36920:	mov	r0, r8
   36924:	add	r1, sp, #88	; 0x58
   36928:	add	r2, sp, #92	; 0x5c
   3692c:	bl	12f40 <dwarf_getaranges@plt>
   36930:	subs	r5, r0, #0
   36934:	bne	36be4 <__assert_fail@plt+0x236e0>
   36938:	ldr	r9, [sp, #72]	; 0x48
   3693c:	ldr	r0, [r4, #16]
   36940:	ldr	r1, [r9, #40]	; 0x28
   36944:	bl	133e4 <elf_getscn@plt>
   36948:	add	r1, sp, #120	; 0x78
   3694c:	bl	12cc4 <gelf_getshdr@plt>
   36950:	subs	r7, r0, #0
   36954:	beq	36ac0 <__assert_fail@plt+0x235bc>
   36958:	ldr	r3, [sp, #92]	; 0x5c
   3695c:	mov	r0, r5
   36960:	mov	r2, #5
   36964:	movw	r1, #16308	; 0x3fb4
   36968:	str	r2, [sp]
   3696c:	movt	r1, #4
   36970:	movw	r2, #16372	; 0x3ff4
   36974:	movt	r2, #4
   36978:	bl	134a4 <dcngettext@plt>
   3697c:	mov	r8, r0
   36980:	ldr	r0, [sp, #76]	; 0x4c
   36984:	bl	133d8 <elf_ndxscn@plt>
   36988:	ldr	r1, [sp, #72]	; 0x48
   3698c:	mov	r7, r0
   36990:	add	r0, r4, #16
   36994:	bl	1870c <__assert_fail@plt+0x5208>
   36998:	ldr	r9, [sp, #72]	; 0x48
   3699c:	ldr	ip, [sp, #92]	; 0x5c
   369a0:	mov	r1, r8
   369a4:	mov	r2, r7
   369a8:	ldrd	r4, [r9, #24]
   369ac:	str	ip, [sp, #8]
   369b0:	strd	r4, [sp]
   369b4:	mov	r3, r0
   369b8:	mov	r0, #1
   369bc:	bl	13204 <__printf_chk@plt>
   369c0:	ldr	r3, [sp, #92]	; 0x5c
   369c4:	cmp	r3, #15
   369c8:	bls	36af4 <__assert_fail@plt+0x235f0>
   369cc:	mov	sl, #1
   369d0:	lsr	r3, r3, #4
   369d4:	add	sl, sl, #1
   369d8:	cmp	r3, #15
   369dc:	bhi	369d0 <__assert_fail@plt+0x234cc>
   369e0:	mov	r7, #0
   369e4:	ldr	r0, [sp, #88]	; 0x58
   369e8:	mov	r1, r7
   369ec:	bl	130e4 <dwarf_onearange@plt>
   369f0:	cmp	r0, #0
   369f4:	beq	36b5c <__assert_fail@plt+0x23658>
   369f8:	add	r1, sp, #96	; 0x60
   369fc:	add	r2, sp, #104	; 0x68
   36a00:	add	r3, sp, #112	; 0x70
   36a04:	bl	12f4c <dwarf_getarangeinfo@plt>
   36a08:	cmp	r0, #0
   36a0c:	bne	36b30 <__assert_fail@plt+0x2362c>
   36a10:	mov	r2, #5
   36a14:	movw	r1, #16484	; 0x4064
   36a18:	movt	r1, #4
   36a1c:	bl	12d84 <dcgettext@plt>
   36a20:	ldrd	r8, [sp, #96]	; 0x60
   36a24:	ldrb	ip, [r6, #4]
   36a28:	mov	r2, sl
   36a2c:	ldrd	r4, [sp, #104]	; 0x68
   36a30:	mov	r3, r7
   36a34:	strd	r8, [sp, #8]
   36a38:	ldrd	r8, [sp, #112]	; 0x70
   36a3c:	strd	r4, [sp, #16]
   36a40:	strd	r8, [sp, #24]
   36a44:	mov	r1, r0
   36a48:	mov	r0, #1
   36a4c:	cmp	ip, r0
   36a50:	movne	ip, #18
   36a54:	moveq	ip, #10
   36a58:	str	ip, [sp]
   36a5c:	bl	13204 <__printf_chk@plt>
   36a60:	ldr	r3, [sp, #92]	; 0x5c
   36a64:	add	r7, r7, #1
   36a68:	cmp	r7, r3
   36a6c:	bcc	369e4 <__assert_fail@plt+0x234e0>
   36a70:	b	36588 <__assert_fail@plt+0x23084>
   36a74:	mov	r1, r8
   36a78:	ldr	r0, [sp, #76]	; 0x4c
   36a7c:	bl	131bc <elf_rawdata@plt>
   36a80:	subs	r9, r0, #0
   36a84:	str	r9, [sp, #64]	; 0x40
   36a88:	bne	36364 <__assert_fail@plt+0x22e60>
   36a8c:	mov	r2, #5
   36a90:	movw	r1, #16268	; 0x3f8c
   36a94:	movt	r1, #4
   36a98:	bl	12d84 <dcgettext@plt>
   36a9c:	mov	r4, r0
   36aa0:	mvn	r0, #0
   36aa4:	bl	130a8 <elf_errmsg@plt>
   36aa8:	mov	r2, r4
   36aac:	mov	r3, r0
   36ab0:	ldr	r0, [sp, #64]	; 0x40
   36ab4:	mov	r1, r0
   36ab8:	bl	12f70 <error@plt>
   36abc:	b	36588 <__assert_fail@plt+0x23084>
   36ac0:	mov	r2, #5
   36ac4:	movw	r1, #54000	; 0xd2f0
   36ac8:	movt	r1, #3
   36acc:	bl	12d84 <dcgettext@plt>
   36ad0:	mov	r4, r0
   36ad4:	ldr	r0, [sp, #76]	; 0x4c
   36ad8:	bl	133d8 <elf_ndxscn@plt>
   36adc:	mov	r1, r7
   36ae0:	mov	r2, r4
   36ae4:	mov	r3, r0
   36ae8:	mov	r0, r7
   36aec:	bl	12f70 <error@plt>
   36af0:	b	36588 <__assert_fail@plt+0x23084>
   36af4:	cmp	r3, #0
   36af8:	beq	36588 <__assert_fail@plt+0x23084>
   36afc:	mov	sl, #1
   36b00:	b	369e0 <__assert_fail@plt+0x234dc>
   36b04:	ldr	r0, [fp, #4]
   36b08:	ldr	r1, [fp]
   36b0c:	ldr	r2, [fp, #8]
   36b10:	rev	r4, r0
   36b14:	ldr	r0, [fp, #12]
   36b18:	rev	r5, r1
   36b1c:	rev	r7, r2
   36b20:	rev	r6, r0
   36b24:	b	36784 <__assert_fail@plt+0x23280>
   36b28:	rev	r4, r4
   36b2c:	b	36434 <__assert_fail@plt+0x22f30>
   36b30:	mov	r2, #5
   36b34:	movw	r1, #16468	; 0x4054
   36b38:	mov	r0, #0
   36b3c:	movt	r1, #4
   36b40:	bl	12d84 <dcgettext@plt>
   36b44:	mov	r2, sl
   36b48:	mov	r3, r7
   36b4c:	mov	r1, r0
   36b50:	mov	r0, #1
   36b54:	bl	13204 <__printf_chk@plt>
   36b58:	b	36a60 <__assert_fail@plt+0x2355c>
   36b5c:	mvn	r0, #0
   36b60:	bl	13078 <dwarf_errmsg@plt>
   36b64:	mov	r2, r7
   36b68:	movw	r1, #16440	; 0x4038
   36b6c:	movt	r1, #4
   36b70:	mov	r3, r0
   36b74:	mov	r0, #1
   36b78:	bl	13204 <__printf_chk@plt>
   36b7c:	b	36588 <__assert_fail@plt+0x23084>
   36b80:	ldr	r2, [r3]
   36b84:	ldr	r3, [r3, #4]
   36b88:	rev	r5, r2
   36b8c:	rev	r4, r3
   36b90:	b	36470 <__assert_fail@plt+0x22f6c>
   36b94:	rev	r3, r3
   36b98:	b	3684c <__assert_fail@plt+0x23348>
   36b9c:	ldr	r3, [fp]
   36ba0:	ldr	r2, [fp, #4]
   36ba4:	rev	r3, r3
   36ba8:	str	r3, [sp, #36]	; 0x24
   36bac:	rev	r2, r2
   36bb0:	str	r2, [sp, #32]
   36bb4:	b	368a4 <__assert_fail@plt+0x233a0>
   36bb8:	rev	r4, r4
   36bbc:	mov	r5, #0
   36bc0:	rev	r2, r2
   36bc4:	b	3687c <__assert_fail@plt+0x23378>
   36bc8:	ldr	r7, [r9]
   36bcc:	ldr	r4, [r9, #4]
   36bd0:	rev	r7, r7
   36bd4:	rev	r4, r4
   36bd8:	b	36918 <__assert_fail@plt+0x23414>
   36bdc:	rev	r4, r4
   36be0:	b	365d8 <__assert_fail@plt+0x230d4>
   36be4:	mov	r2, #5
   36be8:	movw	r1, #16268	; 0x3f8c
   36bec:	mov	r0, #0
   36bf0:	movt	r1, #4
   36bf4:	bl	12d84 <dcgettext@plt>
   36bf8:	mov	r4, r0
   36bfc:	mvn	r0, #0
   36c00:	bl	13078 <dwarf_errmsg@plt>
   36c04:	mov	r2, r4
   36c08:	mov	r3, r0
   36c0c:	mov	r0, #0
   36c10:	mov	r1, r0
   36c14:	bl	12f70 <error@plt>
   36c18:	b	36588 <__assert_fail@plt+0x23084>
   36c1c:	bl	12dc0 <__stack_chk_fail@plt>
   36c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36c24:	sub	sp, sp, #116	; 0x74
   36c28:	movw	r4, #37688	; 0x9338
   36c2c:	movt	r4, #5
   36c30:	str	r4, [sp, #76]	; 0x4c
   36c34:	mov	r4, r1
   36c38:	ldr	r5, [sp, #76]	; 0x4c
   36c3c:	movw	r1, #60928	; 0xee00
   36c40:	str	r0, [sp, #36]	; 0x24
   36c44:	movt	r1, #3
   36c48:	str	r2, [sp, #84]	; 0x54
   36c4c:	mov	r0, #0
   36c50:	ldr	ip, [r5]
   36c54:	mov	r2, #5
   36c58:	mov	r6, r3
   36c5c:	ldr	r7, [sp, #152]	; 0x98
   36c60:	ldr	r8, [sp, #156]	; 0x9c
   36c64:	str	ip, [sp, #108]	; 0x6c
   36c68:	bl	12d84 <dcgettext@plt>
   36c6c:	mov	r9, r0
   36c70:	mov	r0, r6
   36c74:	bl	133d8 <elf_ndxscn@plt>
   36c78:	mov	r1, r7
   36c7c:	mov	r5, r0
   36c80:	add	r0, r4, #16
   36c84:	bl	1870c <__assert_fail@plt+0x5208>
   36c88:	ldrd	sl, [r7, #24]
   36c8c:	mov	r2, r5
   36c90:	mov	r1, r9
   36c94:	strd	sl, [sp]
   36c98:	mov	r3, r0
   36c9c:	mov	r0, #1
   36ca0:	bl	13204 <__printf_chk@plt>
   36ca4:	ldrd	r2, [r7, #32]
   36ca8:	orrs	ip, r2, r3
   36cac:	beq	370a0 <__assert_fail@plt+0x23b9c>
   36cb0:	ldr	r4, [r8, #28]
   36cb4:	cmp	r4, #0
   36cb8:	str	r4, [sp, #52]	; 0x34
   36cbc:	beq	37498 <__assert_fail@plt+0x23f94>
   36cc0:	movw	ip, #37712	; 0x9350
   36cc4:	movt	ip, #5
   36cc8:	str	ip, [sp, #64]	; 0x40
   36ccc:	ldr	r1, [ip, #176]	; 0xb0
   36cd0:	cmp	r1, #0
   36cd4:	bne	37474 <__assert_fail@plt+0x23f70>
   36cd8:	ldr	r4, [sp, #52]	; 0x34
   36cdc:	ldr	r5, [sp, #52]	; 0x34
   36ce0:	ldr	r4, [r4]
   36ce4:	ldr	r3, [r5, #12]
   36ce8:	add	r3, r4, r3
   36cec:	str	r4, [sp, #80]	; 0x50
   36cf0:	cmp	r4, r3
   36cf4:	str	r3, [sp, #44]	; 0x2c
   36cf8:	bcs	370a0 <__assert_fail@plt+0x23b9c>
   36cfc:	movw	r4, #52429	; 0xcccd
   36d00:	movt	r4, #52428	; 0xcccc
   36d04:	str	r4, [sp, #72]	; 0x48
   36d08:	mov	r9, #0
   36d0c:	ldr	r4, [sp, #80]	; 0x50
   36d10:	movw	ip, #37712	; 0x9350
   36d14:	movt	ip, #5
   36d18:	str	ip, [sp, #68]	; 0x44
   36d1c:	mov	r6, r4
   36d20:	str	r4, [sp, #40]	; 0x28
   36d24:	ldr	r5, [sp, #40]	; 0x28
   36d28:	movw	r1, #61036	; 0xee6c
   36d2c:	mov	r0, #1
   36d30:	movt	r1, #3
   36d34:	rsb	r6, r6, r5
   36d38:	add	r4, r9, #1
   36d3c:	asr	r7, r6, #31
   36d40:	mov	r2, r6
   36d44:	mov	r3, r7
   36d48:	bl	13204 <__printf_chk@plt>
   36d4c:	ldr	ip, [sp, #64]	; 0x40
   36d50:	str	r4, [sp, #48]	; 0x30
   36d54:	ldr	r3, [ip, #176]	; 0xb0
   36d58:	cmp	r3, r9
   36d5c:	bhi	36ec4 <__assert_fail@plt+0x239c0>
   36d60:	mov	r0, #0
   36d64:	strd	r6, [sp]
   36d68:	mov	r1, r0
   36d6c:	movw	r2, #16772	; 0x4184
   36d70:	movt	r2, #4
   36d74:	bl	12f70 <error@plt>
   36d78:	ldr	ip, [sp, #84]	; 0x54
   36d7c:	ldr	r5, [sp, #40]	; 0x28
   36d80:	movw	r0, #16824	; 0x41b8
   36d84:	movt	r0, #4
   36d88:	ldr	r4, [sp, #44]	; 0x2c
   36d8c:	ldrb	r3, [ip, #4]
   36d90:	rsb	r6, r5, r4
   36d94:	mov	r4, r5
   36d98:	cmp	r3, #1
   36d9c:	moveq	sl, #4
   36da0:	movne	sl, #8
   36da4:	mvneq	fp, #3
   36da8:	mvnne	fp, #7
   36dac:	bl	12fdc <puts@plt>
   36db0:	ldr	ip, [sp, #44]	; 0x2c
   36db4:	mov	r9, sl
   36db8:	str	ip, [sp, #56]	; 0x38
   36dbc:	str	ip, [sp, #40]	; 0x28
   36dc0:	mov	r0, r6
   36dc4:	mov	r1, sl
   36dc8:	bl	3b5a8 <__assert_fail@plt+0x280a4>
   36dcc:	mov	r6, #1
   36dd0:	cmp	r0, #9
   36dd4:	bls	36df0 <__assert_fail@plt+0x238ec>
   36dd8:	ldr	r3, [sp, #72]	; 0x48
   36ddc:	umull	r1, r0, r3, r0
   36de0:	add	r6, r6, #1
   36de4:	lsr	r0, r0, #3
   36de8:	cmp	r0, #9
   36dec:	bhi	36ddc <__assert_fail@plt+0x238d8>
   36df0:	ldr	ip, [sp, #52]	; 0x34
   36df4:	movw	r1, #16992	; 0x4260
   36df8:	mov	r0, #1
   36dfc:	movt	r1, #4
   36e00:	ldr	r2, [ip]
   36e04:	ldr	ip, [sp, #40]	; 0x28
   36e08:	rsb	r2, r2, r5
   36e0c:	add	fp, ip, fp
   36e10:	str	fp, [sp, #24]
   36e14:	bl	13204 <__printf_chk@plt>
   36e18:	ldr	fp, [sp, #24]
   36e1c:	cmp	r4, fp
   36e20:	bhi	37060 <__assert_fail@plt+0x23b5c>
   36e24:	cmp	r9, #4
   36e28:	cmpne	r9, #8
   36e2c:	moveq	r7, #0
   36e30:	movne	r7, #1
   36e34:	beq	36e9c <__assert_fail@plt+0x23998>
   36e38:	b	374e4 <__assert_fail@plt+0x23fe0>
   36e3c:	cmp	r3, #0
   36e40:	ldreq	fp, [r4]
   36e44:	ldreq	r5, [r4, #4]
   36e48:	bne	37500 <__assert_fail@plt+0x23ffc>
   36e4c:	add	r4, r4, #8
   36e50:	mov	r3, r7
   36e54:	mov	r0, #1
   36e58:	mov	r2, r6
   36e5c:	movw	r1, #17072	; 0x42b0
   36e60:	movt	r1, #4
   36e64:	add	r7, r7, r0
   36e68:	bl	13204 <__printf_chk@plt>
   36e6c:	mov	r3, r5
   36e70:	str	r5, [sp, #4]
   36e74:	mov	r2, fp
   36e78:	ldr	r0, [sp, #36]	; 0x24
   36e7c:	mov	r1, sl
   36e80:	str	fp, [sp]
   36e84:	bl	27164 <__assert_fail@plt+0x13c60>
   36e88:	mov	r0, #10
   36e8c:	bl	131b0 <putchar@plt>
   36e90:	ldr	r5, [sp, #24]
   36e94:	cmp	r4, r5
   36e98:	bhi	37060 <__assert_fail@plt+0x23b5c>
   36e9c:	cmp	r9, #4
   36ea0:	ldrb	r3, [r8, #84]	; 0x54
   36ea4:	bne	36e3c <__assert_fail@plt+0x23938>
   36ea8:	cmp	r3, #0
   36eac:	ldr	ip, [r4]
   36eb0:	bne	37514 <__assert_fail@plt+0x24010>
   36eb4:	add	r4, r4, #4
   36eb8:	mov	fp, ip
   36ebc:	mov	r5, #0
   36ec0:	b	36e50 <__assert_fail@plt+0x2394c>
   36ec4:	ldr	r5, [sp, #68]	; 0x44
   36ec8:	add	sl, r9, #268435456	; 0x10000000
   36ecc:	lsl	r4, sl, #4
   36ed0:	ldr	fp, [r5, #184]	; 0xb8
   36ed4:	adds	r5, fp, r4
   36ed8:	beq	36d60 <__assert_fail@plt+0x2385c>
   36edc:	mov	ip, #0
   36ee0:	ldr	r0, [r5, #8]
   36ee4:	mov	r2, ip
   36ee8:	mov	r3, ip
   36eec:	str	ip, [sp]
   36ef0:	add	r1, sp, #92	; 0x5c
   36ef4:	str	ip, [sp, #4]
   36ef8:	str	ip, [sp, #8]
   36efc:	str	ip, [sp, #12]
   36f00:	bl	131ec <dwarf_cu_die@plt>
   36f04:	cmp	r0, #0
   36f08:	beq	37284 <__assert_fail@plt+0x23d80>
   36f0c:	add	r0, sp, #92	; 0x5c
   36f10:	bl	12f28 <dwarf_dieoffset@plt>
   36f14:	mov	r2, r0
   36f18:	mov	r3, r1
   36f1c:	mov	r0, #1
   36f20:	movw	r1, #61176	; 0xeef8
   36f24:	movt	r1, #3
   36f28:	bl	13204 <__printf_chk@plt>
   36f2c:	ldr	r1, [r5, #4]
   36f30:	ldr	r2, [fp, sl, lsl #4]
   36f34:	ubfx	r3, r1, #0, #29
   36f38:	cmp	r7, r3
   36f3c:	cmpeq	r6, r2
   36f40:	beq	370bc <__assert_fail@plt+0x23bb8>
   36f44:	ldrb	r3, [r8, #84]	; 0x54
   36f48:	cmp	r3, #0
   36f4c:	ldreq	ip, [sp, #40]	; 0x28
   36f50:	ldreq	r6, [ip]
   36f54:	bne	37520 <__assert_fail@plt+0x2401c>
   36f58:	ldr	ip, [sp, #40]	; 0x28
   36f5c:	cmn	r6, #1
   36f60:	mov	r7, #0
   36f64:	add	r4, ip, #4
   36f68:	beq	37530 <__assert_fail@plt+0x2402c>
   36f6c:	mov	r0, #10
   36f70:	bl	131b0 <putchar@plt>
   36f74:	mov	r2, #5
   36f78:	movw	r1, #11516	; 0x2cfc
   36f7c:	mov	r0, #0
   36f80:	movt	r1, #4
   36f84:	bl	12d84 <dcgettext@plt>
   36f88:	mov	r3, r7
   36f8c:	mov	r2, r6
   36f90:	mov	r1, r0
   36f94:	mov	r0, #1
   36f98:	bl	13204 <__printf_chk@plt>
   36f9c:	ldr	ip, [sp, #44]	; 0x2c
   36fa0:	sub	r3, ip, #4
   36fa4:	cmp	r4, r3
   36fa8:	bhi	37430 <__assert_fail@plt+0x23f2c>
   36fac:	cmp	r7, #0
   36fb0:	cmpeq	r6, #3
   36fb4:	bls	37430 <__assert_fail@plt+0x23f2c>
   36fb8:	rsb	r2, r4, ip
   36fbc:	asr	r3, r2, #31
   36fc0:	cmp	r7, r3
   36fc4:	cmpeq	r6, r2
   36fc8:	bhi	37430 <__assert_fail@plt+0x23f2c>
   36fcc:	ldrb	r3, [r8, #84]	; 0x54
   36fd0:	movw	r1, #11540	; 0x2d14
   36fd4:	mov	r0, #0
   36fd8:	movt	r1, #4
   36fdc:	cmp	r3, #0
   36fe0:	add	ip, r4, r6
   36fe4:	str	ip, [sp, #40]	; 0x28
   36fe8:	ldrhne	r3, [r4]
   36fec:	ldrheq	r6, [r4]
   36ff0:	lslne	r2, r3, #8
   36ff4:	orrne	r3, r2, r3, lsr #8
   36ff8:	mov	r2, #5
   36ffc:	uxthne	r6, r3
   37000:	bl	12d84 <dcgettext@plt>
   37004:	mov	r2, r6
   37008:	mov	r1, r0
   3700c:	mov	r0, #1
   37010:	bl	13204 <__printf_chk@plt>
   37014:	cmp	r6, #5
   37018:	beq	3722c <__assert_fail@plt+0x23d28>
   3701c:	movw	r1, #61284	; 0xef64
   37020:	movt	r1, #3
   37024:	mov	r0, #0
   37028:	mov	r2, #5
   3702c:	bl	12d84 <dcgettext@plt>
   37030:	mov	r2, r0
   37034:	mov	r0, #0
   37038:	mov	r1, r0
   3703c:	bl	12f70 <error@plt>
   37040:	ldr	ip, [sp, #44]	; 0x2c
   37044:	ldr	r4, [sp, #40]	; 0x28
   37048:	cmp	ip, r4
   3704c:	bls	370a0 <__assert_fail@plt+0x23b9c>
   37050:	ldr	r5, [sp, #52]	; 0x34
   37054:	ldr	r9, [sp, #48]	; 0x30
   37058:	ldr	r6, [r5]
   3705c:	b	36d24 <__assert_fail@plt+0x23820>
   37060:	mov	r0, #10
   37064:	bl	131b0 <putchar@plt>
   37068:	ldr	ip, [sp, #40]	; 0x28
   3706c:	cmp	ip, r4
   37070:	beq	37040 <__assert_fail@plt+0x23b3c>
   37074:	ldr	r5, [sp, #56]	; 0x38
   37078:	mov	r0, #0
   3707c:	mov	r1, r0
   37080:	movw	r2, #61424	; 0xeff0
   37084:	rsb	r3, r4, r5
   37088:	movt	r2, #3
   3708c:	bl	12f70 <error@plt>
   37090:	ldr	ip, [sp, #44]	; 0x2c
   37094:	ldr	r4, [sp, #40]	; 0x28
   37098:	cmp	ip, r4
   3709c:	bhi	37050 <__assert_fail@plt+0x23b4c>
   370a0:	ldr	r4, [sp, #76]	; 0x4c
   370a4:	ldr	r2, [sp, #108]	; 0x6c
   370a8:	ldr	r3, [r4]
   370ac:	cmp	r2, r3
   370b0:	bne	3751c <__assert_fail@plt+0x24018>
   370b4:	add	sp, sp, #116	; 0x74
   370b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   370bc:	ldrb	r3, [r5, #7]
   370c0:	tst	r3, #32
   370c4:	beq	372ac <__assert_fail@plt+0x23da8>
   370c8:	mov	sl, #8
   370cc:	mvn	fp, #7
   370d0:	mov	r9, sl
   370d4:	mov	r2, #8
   370d8:	mov	r3, #0
   370dc:	strd	r2, [sp, #24]
   370e0:	ldr	r5, [sp, #64]	; 0x40
   370e4:	ldr	ip, [sp, #48]	; 0x30
   370e8:	ldr	r3, [r5, #176]	; 0xb0
   370ec:	cmp	ip, r3
   370f0:	bcs	372a4 <__assert_fail@plt+0x23da0>
   370f4:	ldr	r5, [sp, #68]	; 0x44
   370f8:	add	r4, r4, #16
   370fc:	ldr	r0, [r5, #184]	; 0xb8
   37100:	adds	r1, r0, r4
   37104:	beq	372a4 <__assert_fail@plt+0x23da0>
   37108:	ldr	r3, [r1, #8]
   3710c:	ldrh	r3, [r3, #26]
   37110:	cmp	r3, #4
   37114:	bhi	372c8 <__assert_fail@plt+0x23dc4>
   37118:	ldr	r1, [r1, #4]
   3711c:	ldr	r2, [r0, r4]
   37120:	ubfx	r3, r1, #0, #29
   37124:	cmp	r7, r3
   37128:	cmpeq	r6, r2
   3712c:	bhi	37148 <__assert_fail@plt+0x23c44>
   37130:	ldr	ip, [sp, #52]	; 0x34
   37134:	mov	r1, #0
   37138:	ldr	r0, [ip, #12]
   3713c:	cmp	r3, r1
   37140:	cmpeq	r2, r0
   37144:	bls	37408 <__assert_fail@plt+0x23f04>
   37148:	mov	r0, #0
   3714c:	movw	r2, #16836	; 0x41c4
   37150:	strd	r6, [sp]
   37154:	mov	r1, r0
   37158:	movt	r2, #4
   3715c:	ldr	r4, [sp, #44]	; 0x2c
   37160:	bl	12f70 <error@plt>
   37164:	ldr	r5, [sp, #40]	; 0x28
   37168:	mov	r0, #10
   3716c:	bl	131b0 <putchar@plt>
   37170:	mov	r2, #5
   37174:	movw	r1, #11516	; 0x2cfc
   37178:	mov	r0, #0
   3717c:	movt	r1, #4
   37180:	rsb	r6, r5, r4
   37184:	ldr	r5, [sp, #40]	; 0x28
   37188:	bl	12d84 <dcgettext@plt>
   3718c:	asr	r3, r6, #31
   37190:	mov	r2, r6
   37194:	str	r4, [sp, #56]	; 0x38
   37198:	mov	r4, r5
   3719c:	mov	r1, r0
   371a0:	mov	r0, #1
   371a4:	bl	13204 <__printf_chk@plt>
   371a8:	mov	r2, #5
   371ac:	movw	r1, #11540	; 0x2d14
   371b0:	mov	r0, #0
   371b4:	movt	r1, #4
   371b8:	bl	12d84 <dcgettext@plt>
   371bc:	ldr	ip, [sp, #56]	; 0x38
   371c0:	mov	r2, #4
   371c4:	str	ip, [sp, #40]	; 0x28
   371c8:	mov	r1, r0
   371cc:	mov	r0, #1
   371d0:	bl	13204 <__printf_chk@plt>
   371d4:	mov	r2, #5
   371d8:	movw	r1, #11564	; 0x2d2c
   371dc:	mov	r0, #0
   371e0:	movt	r1, #4
   371e4:	bl	12d84 <dcgettext@plt>
   371e8:	ldrd	r2, [sp, #24]
   371ec:	mov	r1, r0
   371f0:	mov	r0, #1
   371f4:	bl	13204 <__printf_chk@plt>
   371f8:	mov	r2, #5
   371fc:	movw	r1, #11616	; 0x2d60
   37200:	mov	r0, #0
   37204:	movt	r1, #4
   37208:	bl	12d84 <dcgettext@plt>
   3720c:	mov	r2, #0
   37210:	mov	r3, #0
   37214:	mov	r1, r0
   37218:	mov	r0, #1
   3721c:	bl	13204 <__printf_chk@plt>
   37220:	mov	r0, #10
   37224:	bl	131b0 <putchar@plt>
   37228:	b	36dc0 <__assert_fail@plt+0x238bc>
   3722c:	mov	r2, r6
   37230:	movw	r1, #11564	; 0x2d2c
   37234:	mov	r0, #0
   37238:	movt	r1, #4
   3723c:	ldrb	r9, [r4, #2]
   37240:	bl	12d84 <dcgettext@plt>
   37244:	mov	r3, #0
   37248:	add	r4, r4, #2
   3724c:	uxtb	r2, r9
   37250:	mov	r1, r0
   37254:	mov	r0, #1
   37258:	bl	13204 <__printf_chk@plt>
   3725c:	cmp	r9, #8
   37260:	cmpne	r9, #4
   37264:	moveq	ip, #0
   37268:	movne	ip, #1
   3726c:	beq	3735c <__assert_fail@plt+0x23e58>
   37270:	movw	r1, #11588	; 0x2d44
   37274:	mov	r2, r6
   37278:	mov	r0, #0
   3727c:	movt	r1, #4
   37280:	b	3702c <__assert_fail@plt+0x23b28>
   37284:	mvn	r0, #0
   37288:	bl	13078 <dwarf_errmsg@plt>
   3728c:	movw	r1, #61156	; 0xeee4
   37290:	movt	r1, #3
   37294:	mov	r2, r0
   37298:	mov	r0, #1
   3729c:	bl	13204 <__printf_chk@plt>
   372a0:	b	36f2c <__assert_fail@plt+0x23a28>
   372a4:	ldr	r4, [sp, #44]	; 0x2c
   372a8:	b	37164 <__assert_fail@plt+0x23c60>
   372ac:	mov	sl, #4
   372b0:	mov	r2, #4
   372b4:	mov	r3, #0
   372b8:	mov	r9, sl
   372bc:	strd	r2, [sp, #24]
   372c0:	mvn	fp, #3
   372c4:	b	370e0 <__assert_fail@plt+0x23bdc>
   372c8:	ldrb	r3, [r1, #7]
   372cc:	tst	r3, #64	; 0x40
   372d0:	beq	373e0 <__assert_fail@plt+0x23edc>
   372d4:	ldr	r1, [r1, #4]
   372d8:	mov	r2, #12
   372dc:	mov	r3, #0
   372e0:	strd	r2, [sp, #56]	; 0x38
   372e4:	ldr	r2, [r0, r4]
   372e8:	ubfx	r3, r1, #0, #29
   372ec:	subs	r2, r2, #4
   372f0:	ldrd	r4, [sp, #56]	; 0x38
   372f4:	sbc	r3, r3, #-536870912	; 0xe0000000
   372f8:	mvn	r0, #0
   372fc:	mvn	r1, #-536870912	; 0xe0000000
   37300:	and	r2, r2, r0
   37304:	and	r3, r3, r1
   37308:	subs	r2, r2, r4
   3730c:	sbc	r3, r3, r5
   37310:	and	r2, r2, r0
   37314:	and	r3, r3, r1
   37318:	cmp	r7, r3
   3731c:	cmpeq	r6, r2
   37320:	bhi	3733c <__assert_fail@plt+0x23e38>
   37324:	ldr	r5, [sp, #52]	; 0x34
   37328:	mov	r1, #0
   3732c:	ldr	r0, [r5, #12]
   37330:	cmp	r3, r1
   37334:	cmpeq	r2, r0
   37338:	bls	373fc <__assert_fail@plt+0x23ef8>
   3733c:	mov	r0, #0
   37340:	strd	r6, [sp]
   37344:	mov	r1, r0
   37348:	movw	r2, #16884	; 0x41f4
   3734c:	movt	r2, #4
   37350:	ldr	r4, [sp, #44]	; 0x2c
   37354:	bl	12f70 <error@plt>
   37358:	b	37164 <__assert_fail@plt+0x23c60>
   3735c:	mov	r0, ip
   37360:	mov	r2, r6
   37364:	movw	r1, #11616	; 0x2d60
   37368:	movt	r1, #4
   3736c:	ldrb	r7, [r4, #1]
   37370:	str	ip, [sp, #20]
   37374:	bl	12d84 <dcgettext@plt>
   37378:	mov	r3, #0
   3737c:	uxtb	r2, r7
   37380:	mov	r1, r0
   37384:	mov	r0, #1
   37388:	bl	13204 <__printf_chk@plt>
   3738c:	mov	r0, #10
   37390:	bl	131b0 <putchar@plt>
   37394:	cmp	r7, #0
   37398:	ldr	ip, [sp, #20]
   3739c:	bne	37448 <__assert_fail@plt+0x23f44>
   373a0:	ldr	ip, [r5, #4]
   373a4:	add	r4, r4, #2
   373a8:	ldr	r5, [sp, #80]	; 0x50
   373ac:	ldr	r2, [fp, sl, lsl #4]
   373b0:	ubfx	r3, ip, #0, #29
   373b4:	rsb	r0, r5, r4
   373b8:	asr	r1, r0, #31
   373bc:	cmp	r3, r1
   373c0:	cmpeq	r2, r0
   373c4:	beq	37414 <__assert_fail@plt+0x23f10>
   373c8:	mov	r0, r7
   373cc:	movw	r2, #16948	; 0x4234
   373d0:	mov	r1, r7
   373d4:	movt	r2, #4
   373d8:	bl	12f70 <error@plt>
   373dc:	b	37040 <__assert_fail@plt+0x23b3c>
   373e0:	ldr	r1, [r1, #4]
   373e4:	mov	r2, #4
   373e8:	mov	r3, #0
   373ec:	strd	r2, [sp, #56]	; 0x38
   373f0:	ldr	r2, [r0, r4]
   373f4:	ubfx	r3, r1, #0, #29
   373f8:	b	372ec <__assert_fail@plt+0x23de8>
   373fc:	ldr	ip, [sp, #80]	; 0x50
   37400:	add	r4, ip, r2
   37404:	b	37164 <__assert_fail@plt+0x23c60>
   37408:	ldr	r5, [sp, #80]	; 0x50
   3740c:	add	r4, r5, r2
   37410:	b	37164 <__assert_fail@plt+0x23c60>
   37414:	ldr	ip, [sp, #40]	; 0x28
   37418:	rsb	fp, r9, #0
   3741c:	mov	sl, r9
   37420:	mov	r5, r4
   37424:	rsb	r6, r4, ip
   37428:	str	ip, [sp, #56]	; 0x38
   3742c:	b	36dc0 <__assert_fail@plt+0x238bc>
   37430:	mov	r0, #0
   37434:	movw	r2, #61196	; 0xef0c
   37438:	mov	r1, r0
   3743c:	movt	r2, #3
   37440:	bl	12f70 <error@plt>
   37444:	b	370a0 <__assert_fail@plt+0x23b9c>
   37448:	mov	r2, r6
   3744c:	mov	r0, ip
   37450:	movw	r1, #11640	; 0x2d78
   37454:	movt	r1, #4
   37458:	bl	12d84 <dcgettext@plt>
   3745c:	ldr	ip, [sp, #20]
   37460:	mov	r1, ip
   37464:	mov	r2, r0
   37468:	mov	r0, ip
   3746c:	bl	12f70 <error@plt>
   37470:	b	37040 <__assert_fail@plt+0x23b3c>
   37474:	ldr	r0, [ip, #184]	; 0xb8
   37478:	movw	r2, #55512	; 0xd8d8
   3747c:	movw	r3, #57200	; 0xdf70
   37480:	movt	r2, #3
   37484:	movt	r3, #1
   37488:	str	r2, [sp]
   3748c:	mov	r2, #16
   37490:	bl	130c0 <qsort_r@plt>
   37494:	b	36cd8 <__assert_fail@plt+0x237d4>
   37498:	mov	r0, r6
   3749c:	mov	r1, r4
   374a0:	bl	131bc <elf_rawdata@plt>
   374a4:	subs	r5, r0, #0
   374a8:	str	r5, [sp, #52]	; 0x34
   374ac:	bne	36cc0 <__assert_fail@plt+0x237bc>
   374b0:	mov	r2, #5
   374b4:	movw	r1, #16732	; 0x415c
   374b8:	movt	r1, #4
   374bc:	bl	12d84 <dcgettext@plt>
   374c0:	mov	r4, r0
   374c4:	mvn	r0, #0
   374c8:	bl	130a8 <elf_errmsg@plt>
   374cc:	mov	r2, r4
   374d0:	mov	r3, r0
   374d4:	ldr	r0, [sp, #52]	; 0x34
   374d8:	mov	r1, r0
   374dc:	bl	12f70 <error@plt>
   374e0:	b	370a0 <__assert_fail@plt+0x23b9c>
   374e4:	movw	r0, #17028	; 0x4284
   374e8:	movw	r1, #24
   374ec:	movt	r0, #4
   374f0:	movt	r1, #4
   374f4:	movw	r2, #5297	; 0x14b1
   374f8:	ldr	r3, [pc, #104]	; 37568 <__assert_fail@plt+0x24064>
   374fc:	bl	13504 <__assert_fail@plt>
   37500:	ldr	r5, [r4]
   37504:	ldr	ip, [r4, #4]
   37508:	rev	r5, r5
   3750c:	rev	fp, ip
   37510:	b	36e4c <__assert_fail@plt+0x23948>
   37514:	rev	ip, ip
   37518:	b	36eb4 <__assert_fail@plt+0x239b0>
   3751c:	bl	12dc0 <__stack_chk_fail@plt>
   37520:	ldr	r4, [sp, #40]	; 0x28
   37524:	ldr	r6, [r4]
   37528:	rev	r6, r6
   3752c:	b	36f58 <__assert_fail@plt+0x23a54>
   37530:	ldr	ip, [sp, #44]	; 0x2c
   37534:	sub	r2, ip, #8
   37538:	cmp	r4, r2
   3753c:	bhi	37430 <__assert_fail@plt+0x23f2c>
   37540:	cmp	r3, #0
   37544:	ldreq	r6, [r4]
   37548:	ldreq	r7, [r4, #4]
   3754c:	ldrne	r3, [r4]
   37550:	ldrne	r2, [r4, #4]
   37554:	revne	r7, r3
   37558:	revne	r6, r2
   3755c:	ldr	ip, [sp, #40]	; 0x28
   37560:	add	r4, ip, #12
   37564:	b	36f6c <__assert_fail@plt+0x23a68>
   37568:	andeq	ip, r3, r8, ror #27
   3756c:	cmp	r0, #106	; 0x6a
   37570:	beq	38148 <__assert_fail@plt+0x24c44>
   37574:	ble	375d0 <__assert_fail@plt+0x240cc>
   37578:	cmp	r0, #176	; 0xb0
   3757c:	beq	381f0 <__assert_fail@plt+0x24cec>
   37580:	bgt	37674 <__assert_fail@plt+0x24170>
   37584:	cmp	r0, #138	; 0x8a
   37588:	beq	381fc <__assert_fail@plt+0x24cf8>
   3758c:	ble	37700 <__assert_fail@plt+0x241fc>
   37590:	cmp	r0, #164	; 0xa4
   37594:	beq	37fcc <__assert_fail@plt+0x24ac8>
   37598:	bgt	3785c <__assert_fail@plt+0x24358>
   3759c:	cmp	r0, #143	; 0x8f
   375a0:	beq	38244 <__assert_fail@plt+0x24d40>
   375a4:	ble	37a28 <__assert_fail@plt+0x24524>
   375a8:	cmp	r0, #161	; 0xa1
   375ac:	beq	38378 <__assert_fail@plt+0x24e74>
   375b0:	bgt	37cdc <__assert_fail@plt+0x247d8>
   375b4:	cmp	r0, #144	; 0x90
   375b8:	beq	3836c <__assert_fail@plt+0x24e68>
   375bc:	cmp	r0, #160	; 0xa0
   375c0:	bne	382a4 <__assert_fail@plt+0x24da0>
   375c4:	movw	r0, #24140	; 0x5e4c
   375c8:	movt	r0, #4
   375cc:	bx	lr
   375d0:	cmp	r0, #61	; 0x3d
   375d4:	beq	38130 <__assert_fail@plt+0x24c2c>
   375d8:	bgt	37628 <__assert_fail@plt+0x24124>
   375dc:	cmp	r0, #38	; 0x26
   375e0:	beq	3813c <__assert_fail@plt+0x24c38>
   375e4:	ble	37780 <__assert_fail@plt+0x2427c>
   375e8:	cmp	r0, #49	; 0x31
   375ec:	beq	38064 <__assert_fail@plt+0x24b60>
   375f0:	bgt	377c0 <__assert_fail@plt+0x242bc>
   375f4:	cmp	r0, #43	; 0x2b
   375f8:	beq	383f0 <__assert_fail@plt+0x24eec>
   375fc:	ble	37a00 <__assert_fail@plt+0x244fc>
   37600:	cmp	r0, #46	; 0x2e
   37604:	beq	37f84 <__assert_fail@plt+0x24a80>
   37608:	bgt	37c50 <__assert_fail@plt+0x2474c>
   3760c:	cmp	r0, #44	; 0x2c
   37610:	beq	37f78 <__assert_fail@plt+0x24a74>
   37614:	cmp	r0, #45	; 0x2d
   37618:	bne	382a4 <__assert_fail@plt+0x24da0>
   3761c:	movw	r0, #25088	; 0x6200
   37620:	movt	r0, #4
   37624:	bx	lr
   37628:	cmp	r0, #83	; 0x53
   3762c:	beq	38124 <__assert_fail@plt+0x24c20>
   37630:	ble	376c0 <__assert_fail@plt+0x241bc>
   37634:	cmp	r0, #94	; 0x5e
   37638:	beq	37ed4 <__assert_fail@plt+0x249d0>
   3763c:	bgt	37828 <__assert_fail@plt+0x24324>
   37640:	cmp	r0, #88	; 0x58
   37644:	beq	38274 <__assert_fail@plt+0x24d70>
   37648:	ble	37af0 <__assert_fail@plt+0x245ec>
   3764c:	cmp	r0, #91	; 0x5b
   37650:	beq	383a8 <__assert_fail@plt+0x24ea4>
   37654:	bgt	37dc0 <__assert_fail@plt+0x248bc>
   37658:	cmp	r0, #89	; 0x59
   3765c:	beq	3839c <__assert_fail@plt+0x24e98>
   37660:	cmp	r0, #90	; 0x5a
   37664:	bne	382a4 <__assert_fail@plt+0x24da0>
   37668:	movw	r0, #22988	; 0x59cc
   3766c:	movt	r0, #4
   37670:	bx	lr
   37674:	cmp	r0, #200	; 0xc8
   37678:	beq	38208 <__assert_fail@plt+0x24d04>
   3767c:	ble	37740 <__assert_fail@plt+0x2423c>
   37680:	cmp	r0, #216	; 0xd8
   37684:	beq	381e4 <__assert_fail@plt+0x24ce0>
   37688:	bgt	377f4 <__assert_fail@plt+0x242f0>
   3768c:	cmp	r0, #210	; 0xd2
   37690:	beq	38214 <__assert_fail@plt+0x24d10>
   37694:	ble	37a78 <__assert_fail@plt+0x24574>
   37698:	cmp	r0, #213	; 0xd5
   3769c:	beq	383d8 <__assert_fail@plt+0x24ed4>
   376a0:	bgt	37d50 <__assert_fail@plt+0x2484c>
   376a4:	cmp	r0, #211	; 0xd3
   376a8:	beq	383cc <__assert_fail@plt+0x24ec8>
   376ac:	cmp	r0, #212	; 0xd4
   376b0:	bne	382a4 <__assert_fail@plt+0x24da0>
   376b4:	movw	r0, #25056	; 0x61e0
   376b8:	movt	r0, #4
   376bc:	bx	lr
   376c0:	cmp	r0, #72	; 0x48
   376c4:	beq	37f6c <__assert_fail@plt+0x24a68>
   376c8:	bgt	378c4 <__assert_fail@plt+0x243c0>
   376cc:	cmp	r0, #66	; 0x42
   376d0:	beq	383c0 <__assert_fail@plt+0x24ebc>
   376d4:	ble	37ac8 <__assert_fail@plt+0x245c4>
   376d8:	cmp	r0, #69	; 0x45
   376dc:	beq	3819c <__assert_fail@plt+0x24c98>
   376e0:	bgt	37cf8 <__assert_fail@plt+0x247f4>
   376e4:	cmp	r0, #67	; 0x43
   376e8:	beq	38190 <__assert_fail@plt+0x24c8c>
   376ec:	cmp	r0, #68	; 0x44
   376f0:	bne	382a4 <__assert_fail@plt+0x24da0>
   376f4:	movw	r0, #22364	; 0x575c
   376f8:	movt	r0, #4
   376fc:	bx	lr
   37700:	cmp	r0, #117	; 0x75
   37704:	beq	37f9c <__assert_fail@plt+0x24a98>
   37708:	bgt	3792c <__assert_fail@plt+0x24428>
   3770c:	cmp	r0, #111	; 0x6f
   37710:	beq	38390 <__assert_fail@plt+0x24e8c>
   37714:	ble	37b18 <__assert_fail@plt+0x24614>
   37718:	cmp	r0, #114	; 0x72
   3771c:	beq	381cc <__assert_fail@plt+0x24cc8>
   37720:	bgt	37d6c <__assert_fail@plt+0x24868>
   37724:	cmp	r0, #112	; 0x70
   37728:	beq	381c0 <__assert_fail@plt+0x24cbc>
   3772c:	cmp	r0, #113	; 0x71
   37730:	bne	382a4 <__assert_fail@plt+0x24da0>
   37734:	movw	r0, #23544	; 0x5bf8
   37738:	movt	r0, #4
   3773c:	bx	lr
   37740:	cmp	r0, #189	; 0xbd
   37744:	beq	37e74 <__assert_fail@plt+0x24970>
   37748:	bgt	37890 <__assert_fail@plt+0x2438c>
   3774c:	cmp	r0, #181	; 0xb5
   37750:	beq	38360 <__assert_fail@plt+0x24e5c>
   37754:	ble	37aa0 <__assert_fail@plt+0x2459c>
   37758:	cmp	r0, #186	; 0xba
   3775c:	beq	37e2c <__assert_fail@plt+0x24928>
   37760:	bgt	37bfc <__assert_fail@plt+0x246f8>
   37764:	cmp	r0, #183	; 0xb7
   37768:	beq	38154 <__assert_fail@plt+0x24c50>
   3776c:	cmp	r0, #185	; 0xb9
   37770:	bne	382a4 <__assert_fail@plt+0x24da0>
   37774:	movw	r0, #24676	; 0x6064
   37778:	movt	r0, #4
   3777c:	bx	lr
   37780:	cmp	r0, #10
   37784:	beq	38094 <__assert_fail@plt+0x24b90>
   37788:	bgt	378f8 <__assert_fail@plt+0x243f4>
   3778c:	cmp	r0, #4
   37790:	beq	38300 <__assert_fail@plt+0x24dfc>
   37794:	ble	37a50 <__assert_fail@plt+0x2454c>
   37798:	cmp	r0, #7
   3779c:	beq	3822c <__assert_fail@plt+0x24d28>
   377a0:	bgt	37cc0 <__assert_fail@plt+0x247bc>
   377a4:	cmp	r0, #5
   377a8:	beq	38220 <__assert_fail@plt+0x24d1c>
   377ac:	cmp	r0, #6
   377b0:	bne	382a4 <__assert_fail@plt+0x24da0>
   377b4:	movw	r0, #21680	; 0x54b0
   377b8:	movt	r0, #4
   377bc:	bx	lr
   377c0:	cmp	r0, #55	; 0x37
   377c4:	beq	37ffc <__assert_fail@plt+0x24af8>
   377c8:	bgt	379d8 <__assert_fail@plt+0x244d4>
   377cc:	cmp	r0, #52	; 0x34
   377d0:	beq	37ea4 <__assert_fail@plt+0x249a0>
   377d4:	bgt	37c18 <__assert_fail@plt+0x24714>
   377d8:	cmp	r0, #50	; 0x32
   377dc:	beq	37e14 <__assert_fail@plt+0x24910>
   377e0:	cmp	r0, #51	; 0x33
   377e4:	bne	382a4 <__assert_fail@plt+0x24da0>
   377e8:	movw	r0, #21972	; 0x55d4
   377ec:	movt	r0, #4
   377f0:	bx	lr
   377f4:	cmp	r0, #222	; 0xde
   377f8:	beq	380f4 <__assert_fail@plt+0x24bf0>
   377fc:	bgt	379b0 <__assert_fail@plt+0x244ac>
   37800:	cmp	r0, #219	; 0xdb
   37804:	beq	37ebc <__assert_fail@plt+0x249b8>
   37808:	bgt	37c34 <__assert_fail@plt+0x24730>
   3780c:	cmp	r0, #217	; 0xd9
   37810:	beq	38330 <__assert_fail@plt+0x24e2c>
   37814:	cmp	r0, #218	; 0xda
   37818:	bne	382a4 <__assert_fail@plt+0x24da0>
   3781c:	movw	r0, #25160	; 0x6248
   37820:	movt	r0, #4
   37824:	bx	lr
   37828:	cmp	r0, #100	; 0x64
   3782c:	beq	382d0 <__assert_fail@plt+0x24dcc>
   37830:	bgt	37960 <__assert_fail@plt+0x2445c>
   37834:	cmp	r0, #97	; 0x61
   37838:	beq	382e8 <__assert_fail@plt+0x24de4>
   3783c:	bgt	37d88 <__assert_fail@plt+0x24884>
   37840:	cmp	r0, #95	; 0x5f
   37844:	beq	382dc <__assert_fail@plt+0x24dd8>
   37848:	cmp	r0, #96	; 0x60
   3784c:	bne	382a4 <__assert_fail@plt+0x24da0>
   37850:	movw	r0, #23116	; 0x5a4c
   37854:	movt	r0, #4
   37858:	bx	lr
   3785c:	cmp	r0, #170	; 0xaa
   37860:	beq	380c4 <__assert_fail@plt+0x24bc0>
   37864:	bgt	37988 <__assert_fail@plt+0x24484>
   37868:	cmp	r0, #167	; 0xa7
   3786c:	beq	382b8 <__assert_fail@plt+0x24db4>
   37870:	bgt	37ca4 <__assert_fail@plt+0x247a0>
   37874:	cmp	r0, #165	; 0xa5
   37878:	beq	382ac <__assert_fail@plt+0x24da8>
   3787c:	cmp	r0, #166	; 0xa6
   37880:	bne	382a4 <__assert_fail@plt+0x24da0>
   37884:	movw	r0, #24272	; 0x5ed0
   37888:	movt	r0, #4
   3788c:	bx	lr
   37890:	cmp	r0, #194	; 0xc2
   37894:	beq	381b4 <__assert_fail@plt+0x24cb0>
   37898:	ble	37b40 <__assert_fail@plt+0x2463c>
   3789c:	cmp	r0, #197	; 0xc5
   378a0:	beq	38408 <__assert_fail@plt+0x24f04>
   378a4:	bgt	37df8 <__assert_fail@plt+0x248f4>
   378a8:	cmp	r0, #195	; 0xc3
   378ac:	beq	383fc <__assert_fail@plt+0x24ef8>
   378b0:	cmp	r0, #196	; 0xc4
   378b4:	bne	382a4 <__assert_fail@plt+0x24da0>
   378b8:	movw	r0, #24884	; 0x6134
   378bc:	movt	r0, #4
   378c0:	bx	lr
   378c4:	cmp	r0, #77	; 0x4d
   378c8:	beq	37f3c <__assert_fail@plt+0x24a38>
   378cc:	ble	37b90 <__assert_fail@plt+0x2468c>
   378d0:	cmp	r0, #80	; 0x50
   378d4:	beq	38348 <__assert_fail@plt+0x24e44>
   378d8:	bgt	37ddc <__assert_fail@plt+0x248d8>
   378dc:	cmp	r0, #78	; 0x4e
   378e0:	beq	3833c <__assert_fail@plt+0x24e38>
   378e4:	cmp	r0, #79	; 0x4f
   378e8:	bne	382a4 <__assert_fail@plt+0x24da0>
   378ec:	movw	r0, #22720	; 0x58c0
   378f0:	movt	r0, #4
   378f4:	bx	lr
   378f8:	cmp	r0, #20
   378fc:	beq	38184 <__assert_fail@plt+0x24c80>
   37900:	ble	37b68 <__assert_fail@plt+0x24664>
   37904:	cmp	r0, #23
   37908:	beq	37e44 <__assert_fail@plt+0x24940>
   3790c:	bgt	37be0 <__assert_fail@plt+0x246dc>
   37910:	cmp	r0, #21
   37914:	beq	3802c <__assert_fail@plt+0x24b28>
   37918:	cmp	r0, #22
   3791c:	bne	382a4 <__assert_fail@plt+0x24da0>
   37920:	movw	r0, #21800	; 0x5528
   37924:	movt	r0, #4
   37928:	bx	lr
   3792c:	cmp	r0, #132	; 0x84
   37930:	beq	37f0c <__assert_fail@plt+0x24a08>
   37934:	ble	37bb8 <__assert_fail@plt+0x246b4>
   37938:	cmp	r0, #135	; 0x87
   3793c:	beq	38318 <__assert_fail@plt+0x24e14>
   37940:	bgt	37d14 <__assert_fail@plt+0x24810>
   37944:	cmp	r0, #133	; 0x85
   37948:	beq	3830c <__assert_fail@plt+0x24e08>
   3794c:	cmp	r0, #134	; 0x86
   37950:	bne	382a4 <__assert_fail@plt+0x24da0>
   37954:	movw	r0, #23792	; 0x5cf0
   37958:	movt	r0, #4
   3795c:	bx	lr
   37960:	cmp	r0, #103	; 0x67
   37964:	beq	380dc <__assert_fail@plt+0x24bd8>
   37968:	bgt	37c6c <__assert_fail@plt+0x24768>
   3796c:	cmp	r0, #101	; 0x65
   37970:	beq	380d0 <__assert_fail@plt+0x24bcc>
   37974:	cmp	r0, #102	; 0x66
   37978:	bne	382a4 <__assert_fail@plt+0x24da0>
   3797c:	movw	r0, #23276	; 0x5aec
   37980:	movt	r0, #4
   37984:	bx	lr
   37988:	cmp	r0, #173	; 0xad
   3798c:	beq	3810c <__assert_fail@plt+0x24c08>
   37990:	bgt	37c88 <__assert_fail@plt+0x24784>
   37994:	cmp	r0, #171	; 0xab
   37998:	beq	38100 <__assert_fail@plt+0x24bfc>
   3799c:	cmp	r0, #172	; 0xac
   379a0:	bne	382a4 <__assert_fail@plt+0x24da0>
   379a4:	movw	r0, #24464	; 0x5f90
   379a8:	movt	r0, #4
   379ac:	bx	lr
   379b0:	cmp	r0, #243	; 0xf3
   379b4:	beq	3825c <__assert_fail@plt+0x24d58>
   379b8:	bgt	37d30 <__assert_fail@plt+0x2482c>
   379bc:	cmp	r0, #223	; 0xdf
   379c0:	beq	38250 <__assert_fail@plt+0x24d4c>
   379c4:	cmp	r0, #224	; 0xe0
   379c8:	bne	382a4 <__assert_fail@plt+0x24da0>
   379cc:	movw	r0, #25252	; 0x62a4
   379d0:	movt	r0, #4
   379d4:	bx	lr
   379d8:	cmp	r0, #58	; 0x3a
   379dc:	beq	3828c <__assert_fail@plt+0x24d88>
   379e0:	bgt	37da4 <__assert_fail@plt+0x248a0>
   379e4:	cmp	r0, #56	; 0x38
   379e8:	beq	38280 <__assert_fail@plt+0x24d7c>
   379ec:	cmp	r0, #57	; 0x39
   379f0:	bne	382a4 <__assert_fail@plt+0x24da0>
   379f4:	movw	r0, #22100	; 0x5654
   379f8:	movt	r0, #4
   379fc:	bx	lr
   37a00:	cmp	r0, #40	; 0x28
   37a04:	beq	38088 <__assert_fail@plt+0x24b84>
   37a08:	blt	3807c <__assert_fail@plt+0x24b78>
   37a0c:	cmp	r0, #41	; 0x29
   37a10:	beq	38070 <__assert_fail@plt+0x24b6c>
   37a14:	cmp	r0, #42	; 0x2a
   37a18:	bne	382a4 <__assert_fail@plt+0x24da0>
   37a1c:	movw	r0, #21900	; 0x558c
   37a20:	movt	r0, #4
   37a24:	bx	lr
   37a28:	cmp	r0, #140	; 0x8c
   37a2c:	beq	38020 <__assert_fail@plt+0x24b1c>
   37a30:	blt	38014 <__assert_fail@plt+0x24b10>
   37a34:	cmp	r0, #141	; 0x8d
   37a38:	beq	38008 <__assert_fail@plt+0x24b04>
   37a3c:	cmp	r0, #142	; 0x8e
   37a40:	bne	382a4 <__assert_fail@plt+0x24da0>
   37a44:	movw	r0, #24012	; 0x5dcc
   37a48:	movt	r0, #4
   37a4c:	bx	lr
   37a50:	cmp	r0, #1
   37a54:	beq	37f00 <__assert_fail@plt+0x249fc>
   37a58:	ble	37eec <__assert_fail@plt+0x249e8>
   37a5c:	cmp	r0, #2
   37a60:	beq	37ee0 <__assert_fail@plt+0x249dc>
   37a64:	cmp	r0, #3
   37a68:	bne	382a4 <__assert_fail@plt+0x24da0>
   37a6c:	movw	r0, #21652	; 0x5494
   37a70:	movt	r0, #4
   37a74:	bx	lr
   37a78:	cmp	r0, #202	; 0xca
   37a7c:	beq	380b8 <__assert_fail@plt+0x24bb4>
   37a80:	blt	380ac <__assert_fail@plt+0x24ba8>
   37a84:	cmp	r0, #203	; 0xcb
   37a88:	beq	380a0 <__assert_fail@plt+0x24b9c>
   37a8c:	cmp	r0, #204	; 0xcc
   37a90:	bne	382a4 <__assert_fail@plt+0x24da0>
   37a94:	movw	r0, #25012	; 0x61b4
   37a98:	movt	r0, #4
   37a9c:	bx	lr
   37aa0:	cmp	r0, #178	; 0xb2
   37aa4:	beq	37fc0 <__assert_fail@plt+0x24abc>
   37aa8:	blt	37fb4 <__assert_fail@plt+0x24ab0>
   37aac:	cmp	r0, #179	; 0xb3
   37ab0:	beq	37fa8 <__assert_fail@plt+0x24aa4>
   37ab4:	cmp	r0, #180	; 0xb4
   37ab8:	bne	382a4 <__assert_fail@plt+0x24da0>
   37abc:	movw	r0, #24644	; 0x6044
   37ac0:	movt	r0, #4
   37ac4:	bx	lr
   37ac8:	cmp	r0, #63	; 0x3f
   37acc:	beq	37ff0 <__assert_fail@plt+0x24aec>
   37ad0:	blt	37fe4 <__assert_fail@plt+0x24ae0>
   37ad4:	cmp	r0, #64	; 0x40
   37ad8:	beq	37fd8 <__assert_fail@plt+0x24ad4>
   37adc:	cmp	r0, #65	; 0x41
   37ae0:	bne	382a4 <__assert_fail@plt+0x24da0>
   37ae4:	movw	r0, #22292	; 0x5714
   37ae8:	movt	r0, #4
   37aec:	bx	lr
   37af0:	cmp	r0, #85	; 0x55
   37af4:	beq	37e98 <__assert_fail@plt+0x24994>
   37af8:	blt	37e8c <__assert_fail@plt+0x24988>
   37afc:	cmp	r0, #86	; 0x56
   37b00:	beq	37e80 <__assert_fail@plt+0x2497c>
   37b04:	cmp	r0, #87	; 0x57
   37b08:	bne	382a4 <__assert_fail@plt+0x24da0>
   37b0c:	movw	r0, #22940	; 0x599c
   37b10:	movt	r0, #4
   37b14:	bx	lr
   37b18:	cmp	r0, #108	; 0x6c
   37b1c:	beq	37f60 <__assert_fail@plt+0x24a5c>
   37b20:	blt	37f54 <__assert_fail@plt+0x24a50>
   37b24:	cmp	r0, #109	; 0x6d
   37b28:	beq	37f48 <__assert_fail@plt+0x24a44>
   37b2c:	cmp	r0, #110	; 0x6e
   37b30:	bne	382a4 <__assert_fail@plt+0x24da0>
   37b34:	movw	r0, #23464	; 0x5ba8
   37b38:	movt	r0, #4
   37b3c:	bx	lr
   37b40:	cmp	r0, #191	; 0xbf
   37b44:	beq	37f30 <__assert_fail@plt+0x24a2c>
   37b48:	blt	37f24 <__assert_fail@plt+0x24a20>
   37b4c:	cmp	r0, #192	; 0xc0
   37b50:	beq	37f18 <__assert_fail@plt+0x24a14>
   37b54:	cmp	r0, #193	; 0xc1
   37b58:	bne	382a4 <__assert_fail@plt+0x24da0>
   37b5c:	movw	r0, #24804	; 0x60e4
   37b60:	movt	r0, #4
   37b64:	bx	lr
   37b68:	cmp	r0, #17
   37b6c:	beq	38058 <__assert_fail@plt+0x24b54>
   37b70:	ble	38044 <__assert_fail@plt+0x24b40>
   37b74:	cmp	r0, #18
   37b78:	beq	38038 <__assert_fail@plt+0x24b34>
   37b7c:	cmp	r0, #19
   37b80:	bne	382a4 <__assert_fail@plt+0x24da0>
   37b84:	movw	r0, #21768	; 0x5508
   37b88:	movt	r0, #4
   37b8c:	bx	lr
   37b90:	cmp	r0, #74	; 0x4a
   37b94:	beq	38178 <__assert_fail@plt+0x24c74>
   37b98:	blt	3816c <__assert_fail@plt+0x24c68>
   37b9c:	cmp	r0, #75	; 0x4b
   37ba0:	beq	38160 <__assert_fail@plt+0x24c5c>
   37ba4:	cmp	r0, #76	; 0x4c
   37ba8:	bne	382a4 <__assert_fail@plt+0x24da0>
   37bac:	movw	r0, #22592	; 0x5840
   37bb0:	movt	r0, #4
   37bb4:	bx	lr
   37bb8:	cmp	r0, #119	; 0x77
   37bbc:	beq	37e68 <__assert_fail@plt+0x24964>
   37bc0:	blt	37e5c <__assert_fail@plt+0x24958>
   37bc4:	cmp	r0, #120	; 0x78
   37bc8:	beq	37e50 <__assert_fail@plt+0x2494c>
   37bcc:	cmp	r0, #131	; 0x83
   37bd0:	bne	382a4 <__assert_fail@plt+0x24da0>
   37bd4:	movw	r0, #23736	; 0x5cb8
   37bd8:	movt	r0, #4
   37bdc:	bx	lr
   37be0:	cmp	r0, #36	; 0x24
   37be4:	beq	37e38 <__assert_fail@plt+0x24934>
   37be8:	cmp	r0, #37	; 0x25
   37bec:	bne	382a4 <__assert_fail@plt+0x24da0>
   37bf0:	movw	r0, #21836	; 0x554c
   37bf4:	movt	r0, #4
   37bf8:	bx	lr
   37bfc:	cmp	r0, #187	; 0xbb
   37c00:	beq	37eb0 <__assert_fail@plt+0x249ac>
   37c04:	cmp	r0, #188	; 0xbc
   37c08:	bne	382a4 <__assert_fail@plt+0x24da0>
   37c0c:	movw	r0, #24728	; 0x6098
   37c10:	movt	r0, #4
   37c14:	bx	lr
   37c18:	cmp	r0, #53	; 0x35
   37c1c:	beq	37ec8 <__assert_fail@plt+0x249c4>
   37c20:	cmp	r0, #54	; 0x36
   37c24:	bne	382a4 <__assert_fail@plt+0x24da0>
   37c28:	movw	r0, #22028	; 0x560c
   37c2c:	movt	r0, #4
   37c30:	bx	lr
   37c34:	cmp	r0, #220	; 0xdc
   37c38:	beq	37f90 <__assert_fail@plt+0x24a8c>
   37c3c:	cmp	r0, #221	; 0xdd
   37c40:	bne	382a4 <__assert_fail@plt+0x24da0>
   37c44:	movw	r0, #25212	; 0x627c
   37c48:	movt	r0, #4
   37c4c:	bx	lr
   37c50:	cmp	r0, #47	; 0x2f
   37c54:	beq	380e8 <__assert_fail@plt+0x24be4>
   37c58:	cmp	r0, #48	; 0x30
   37c5c:	bne	382a4 <__assert_fail@plt+0x24da0>
   37c60:	movw	r0, #21948	; 0x55bc
   37c64:	movt	r0, #4
   37c68:	bx	lr
   37c6c:	cmp	r0, #104	; 0x68
   37c70:	beq	38118 <__assert_fail@plt+0x24c14>
   37c74:	cmp	r0, #105	; 0x69
   37c78:	bne	382a4 <__assert_fail@plt+0x24da0>
   37c7c:	movw	r0, #23344	; 0x5b30
   37c80:	movt	r0, #4
   37c84:	bx	lr
   37c88:	cmp	r0, #174	; 0xae
   37c8c:	beq	382c4 <__assert_fail@plt+0x24dc0>
   37c90:	cmp	r0, #175	; 0xaf
   37c94:	bne	382a4 <__assert_fail@plt+0x24da0>
   37c98:	movw	r0, #24540	; 0x5fdc
   37c9c:	movt	r0, #4
   37ca0:	bx	lr
   37ca4:	cmp	r0, #168	; 0xa8
   37ca8:	beq	38238 <__assert_fail@plt+0x24d34>
   37cac:	cmp	r0, #169	; 0xa9
   37cb0:	bne	382a4 <__assert_fail@plt+0x24da0>
   37cb4:	movw	r0, #24372	; 0x5f34
   37cb8:	movt	r0, #4
   37cbc:	bx	lr
   37cc0:	cmp	r0, #8
   37cc4:	beq	38384 <__assert_fail@plt+0x24e80>
   37cc8:	cmp	r0, #9
   37ccc:	bne	382a4 <__assert_fail@plt+0x24da0>
   37cd0:	movw	r0, #21716	; 0x54d4
   37cd4:	movt	r0, #4
   37cd8:	bx	lr
   37cdc:	cmp	r0, #162	; 0xa2
   37ce0:	beq	381a8 <__assert_fail@plt+0x24ca4>
   37ce4:	cmp	r0, #163	; 0xa3
   37ce8:	bne	382a4 <__assert_fail@plt+0x24da0>
   37cec:	movw	r0, #24204	; 0x5e8c
   37cf0:	movt	r0, #4
   37cf4:	bx	lr
   37cf8:	cmp	r0, #70	; 0x46
   37cfc:	beq	38324 <__assert_fail@plt+0x24e20>
   37d00:	cmp	r0, #71	; 0x47
   37d04:	bne	382a4 <__assert_fail@plt+0x24da0>
   37d08:	movw	r0, #22460	; 0x57bc
   37d0c:	movt	r0, #4
   37d10:	bx	lr
   37d14:	cmp	r0, #136	; 0x88
   37d18:	beq	38268 <__assert_fail@plt+0x24d64>
   37d1c:	cmp	r0, #137	; 0x89
   37d20:	bne	382a4 <__assert_fail@plt+0x24da0>
   37d24:	movw	r0, #23876	; 0x5d44
   37d28:	movt	r0, #4
   37d2c:	bx	lr
   37d30:	cmp	r0, #247	; 0xf7
   37d34:	beq	383e4 <__assert_fail@plt+0x24ee0>
   37d38:	movw	r3, #36902	; 0x9026
   37d3c:	cmp	r0, r3
   37d40:	bne	382a4 <__assert_fail@plt+0x24da0>
   37d44:	movw	r0, #21892	; 0x5584
   37d48:	movt	r0, #4
   37d4c:	bx	lr
   37d50:	cmp	r0, #214	; 0xd6
   37d54:	beq	381d8 <__assert_fail@plt+0x24cd4>
   37d58:	cmp	r0, #215	; 0xd7
   37d5c:	bne	382a4 <__assert_fail@plt+0x24da0>
   37d60:	movw	r0, #25092	; 0x6204
   37d64:	movt	r0, #4
   37d68:	bx	lr
   37d6c:	cmp	r0, #115	; 0x73
   37d70:	beq	382f4 <__assert_fail@plt+0x24df0>
   37d74:	cmp	r0, #116	; 0x74
   37d78:	bne	382a4 <__assert_fail@plt+0x24da0>
   37d7c:	movw	r0, #23616	; 0x5c40
   37d80:	movt	r0, #4
   37d84:	bx	lr
   37d88:	cmp	r0, #98	; 0x62
   37d8c:	beq	38298 <__assert_fail@plt+0x24d94>
   37d90:	cmp	r0, #99	; 0x63
   37d94:	bne	382a4 <__assert_fail@plt+0x24da0>
   37d98:	movw	r0, #23216	; 0x5ab0
   37d9c:	movt	r0, #4
   37da0:	bx	lr
   37da4:	cmp	r0, #59	; 0x3b
   37da8:	beq	383b4 <__assert_fail@plt+0x24eb0>
   37dac:	cmp	r0, #60	; 0x3c
   37db0:	bne	382a4 <__assert_fail@plt+0x24da0>
   37db4:	movw	r0, #22184	; 0x56a8
   37db8:	movt	r0, #4
   37dbc:	bx	lr
   37dc0:	cmp	r0, #92	; 0x5c
   37dc4:	beq	38354 <__assert_fail@plt+0x24e50>
   37dc8:	cmp	r0, #93	; 0x5d
   37dcc:	bne	382a4 <__assert_fail@plt+0x24da0>
   37dd0:	movw	r0, #23032	; 0x59f8
   37dd4:	movt	r0, #4
   37dd8:	bx	lr
   37ddc:	cmp	r0, #81	; 0x51
   37de0:	beq	38414 <__assert_fail@plt+0x24f10>
   37de4:	cmp	r0, #82	; 0x52
   37de8:	bne	382a4 <__assert_fail@plt+0x24da0>
   37dec:	movw	r0, #22844	; 0x593c
   37df0:	movt	r0, #4
   37df4:	bx	lr
   37df8:	cmp	r0, #198	; 0xc6
   37dfc:	beq	37e20 <__assert_fail@plt+0x2491c>
   37e00:	cmp	r0, #199	; 0xc7
   37e04:	bne	382a4 <__assert_fail@plt+0x24da0>
   37e08:	movw	r0, #24936	; 0x6168
   37e0c:	movt	r0, #4
   37e10:	bx	lr
   37e14:	movw	r0, #21960	; 0x55c8
   37e18:	movt	r0, #4
   37e1c:	bx	lr
   37e20:	movw	r0, #24912	; 0x6150
   37e24:	movt	r0, #4
   37e28:	bx	lr
   37e2c:	movw	r0, #24688	; 0x6070
   37e30:	movt	r0, #4
   37e34:	bx	lr
   37e38:	movw	r0, #21824	; 0x5540
   37e3c:	movt	r0, #4
   37e40:	bx	lr
   37e44:	movw	r0, #21812	; 0x5534
   37e48:	movt	r0, #4
   37e4c:	bx	lr
   37e50:	movw	r0, #23720	; 0x5ca8
   37e54:	movt	r0, #4
   37e58:	bx	lr
   37e5c:	movw	r0, #23652	; 0x5c64
   37e60:	movt	r0, #4
   37e64:	bx	lr
   37e68:	movw	r0, #23684	; 0x5c84
   37e6c:	movt	r0, #4
   37e70:	bx	lr
   37e74:	movw	r0, #24744	; 0x60a8
   37e78:	movt	r0, #4
   37e7c:	bx	lr
   37e80:	movw	r0, #22924	; 0x598c
   37e84:	movt	r0, #4
   37e88:	bx	lr
   37e8c:	movw	r0, #22892	; 0x596c
   37e90:	movt	r0, #4
   37e94:	bx	lr
   37e98:	movw	r0, #22908	; 0x597c
   37e9c:	movt	r0, #4
   37ea0:	bx	lr
   37ea4:	movw	r0, #21988	; 0x55e4
   37ea8:	movt	r0, #4
   37eac:	bx	lr
   37eb0:	movw	r0, #24712	; 0x6088
   37eb4:	movt	r0, #4
   37eb8:	bx	lr
   37ebc:	movw	r0, #25188	; 0x6264
   37ec0:	movt	r0, #4
   37ec4:	bx	lr
   37ec8:	movw	r0, #22008	; 0x55f8
   37ecc:	movt	r0, #4
   37ed0:	bx	lr
   37ed4:	movw	r0, #23060	; 0x5a14
   37ed8:	movt	r0, #4
   37edc:	bx	lr
   37ee0:	movw	r0, #21644	; 0x548c
   37ee4:	movt	r0, #4
   37ee8:	bx	lr
   37eec:	cmp	r0, #0
   37ef0:	bne	382a4 <__assert_fail@plt+0x24da0>
   37ef4:	movw	r0, #21628	; 0x547c
   37ef8:	movt	r0, #4
   37efc:	bx	lr
   37f00:	movw	r0, #21636	; 0x5484
   37f04:	movt	r0, #4
   37f08:	bx	lr
   37f0c:	movw	r0, #23752	; 0x5cc8
   37f10:	movt	r0, #4
   37f14:	bx	lr
   37f18:	movw	r0, #24792	; 0x60d8
   37f1c:	movt	r0, #4
   37f20:	bx	lr
   37f24:	movw	r0, #24764	; 0x60bc
   37f28:	movt	r0, #4
   37f2c:	bx	lr
   37f30:	movw	r0, #24776	; 0x60c8
   37f34:	movt	r0, #4
   37f38:	bx	lr
   37f3c:	movw	r0, #22640	; 0x5870
   37f40:	movt	r0, #4
   37f44:	bx	lr
   37f48:	movw	r0, #23452	; 0x5b9c
   37f4c:	movt	r0, #4
   37f50:	bx	lr
   37f54:	movw	r0, #23400	; 0x5b68
   37f58:	movt	r0, #4
   37f5c:	bx	lr
   37f60:	movw	r0, #23420	; 0x5b7c
   37f64:	movt	r0, #4
   37f68:	bx	lr
   37f6c:	movw	r0, #22496	; 0x57e0
   37f70:	movt	r0, #4
   37f74:	bx	lr
   37f78:	movw	r0, #21916	; 0x559c
   37f7c:	movt	r0, #4
   37f80:	bx	lr
   37f84:	movw	r0, #21932	; 0x55ac
   37f88:	movt	r0, #4
   37f8c:	bx	lr
   37f90:	movw	r0, #25200	; 0x6270
   37f94:	movt	r0, #4
   37f98:	bx	lr
   37f9c:	movw	r0, #23636	; 0x5c54
   37fa0:	movt	r0, #4
   37fa4:	bx	lr
   37fa8:	movw	r0, #24616	; 0x6028
   37fac:	movt	r0, #4
   37fb0:	bx	lr
   37fb4:	movw	r0, #23292	; 0x5afc
   37fb8:	movt	r0, #4
   37fbc:	bx	lr
   37fc0:	movw	r0, #24576	; 0x6000
   37fc4:	movt	r0, #4
   37fc8:	bx	lr
   37fcc:	movw	r0, #24232	; 0x5ea8
   37fd0:	movt	r0, #4
   37fd4:	bx	lr
   37fd8:	movw	r0, #22276	; 0x5704
   37fdc:	movt	r0, #4
   37fe0:	bx	lr
   37fe4:	movw	r0, #22244	; 0x56e4
   37fe8:	movt	r0, #4
   37fec:	bx	lr
   37ff0:	movw	r0, #22256	; 0x56f0
   37ff4:	movt	r0, #4
   37ff8:	bx	lr
   37ffc:	movw	r0, #22064	; 0x5630
   38000:	movt	r0, #4
   38004:	bx	lr
   38008:	movw	r0, #23976	; 0x5da8
   3800c:	movt	r0, #4
   38010:	bx	lr
   38014:	movw	r0, #23924	; 0x5d74
   38018:	movt	r0, #4
   3801c:	bx	lr
   38020:	movw	r0, #23940	; 0x5d84
   38024:	movt	r0, #4
   38028:	bx	lr
   3802c:	movw	r0, #21788	; 0x551c
   38030:	movt	r0, #4
   38034:	bx	lr
   38038:	movw	r0, #21756	; 0x54fc
   3803c:	movt	r0, #4
   38040:	bx	lr
   38044:	cmp	r0, #15
   38048:	bne	382a4 <__assert_fail@plt+0x24da0>
   3804c:	movw	r0, #21732	; 0x54e4
   38050:	movt	r0, #4
   38054:	bx	lr
   38058:	movw	r0, #21740	; 0x54ec
   3805c:	movt	r0, #4
   38060:	bx	lr
   38064:	movw	r0, #21952	; 0x55c0
   38068:	movt	r0, #4
   3806c:	bx	lr
   38070:	movw	r0, #21884	; 0x557c
   38074:	movt	r0, #4
   38078:	bx	lr
   3807c:	movw	r0, #21864	; 0x5568
   38080:	movt	r0, #4
   38084:	bx	lr
   38088:	movw	r0, #21880	; 0x5578
   3808c:	movt	r0, #4
   38090:	bx	lr
   38094:	movw	r0, #21704	; 0x54c8
   38098:	movt	r0, #4
   3809c:	bx	lr
   380a0:	movw	r0, #25000	; 0x61a8
   380a4:	movt	r0, #4
   380a8:	bx	lr
   380ac:	movw	r0, #24976	; 0x6190
   380b0:	movt	r0, #4
   380b4:	bx	lr
   380b8:	movw	r0, #24988	; 0x619c
   380bc:	movt	r0, #4
   380c0:	bx	lr
   380c4:	movw	r0, #24400	; 0x5f50
   380c8:	movt	r0, #4
   380cc:	bx	lr
   380d0:	movw	r0, #23260	; 0x5adc
   380d4:	movt	r0, #4
   380d8:	bx	lr
   380dc:	movw	r0, #23292	; 0x5afc
   380e0:	movt	r0, #4
   380e4:	bx	lr
   380e8:	movw	r0, #21940	; 0x55b4
   380ec:	movt	r0, #4
   380f0:	bx	lr
   380f4:	movw	r0, #25228	; 0x628c
   380f8:	movt	r0, #4
   380fc:	bx	lr
   38100:	movw	r0, #24436	; 0x5f74
   38104:	movt	r0, #4
   38108:	bx	lr
   3810c:	movw	r0, #24496	; 0x5fb0
   38110:	movt	r0, #4
   38114:	bx	lr
   38118:	movw	r0, #23328	; 0x5b20
   3811c:	movt	r0, #4
   38120:	bx	lr
   38124:	movw	r0, #22860	; 0x594c
   38128:	movt	r0, #4
   3812c:	bx	lr
   38130:	movw	r0, #22208	; 0x56c0
   38134:	movt	r0, #4
   38138:	bx	lr
   3813c:	movw	r0, #21852	; 0x555c
   38140:	movt	r0, #4
   38144:	bx	lr
   38148:	movw	r0, #23372	; 0x5b4c
   3814c:	movt	r0, #4
   38150:	bx	lr
   38154:	movw	r0, #24668	; 0x605c
   38158:	movt	r0, #4
   3815c:	bx	lr
   38160:	movw	r0, #22580	; 0x5834
   38164:	movt	r0, #4
   38168:	bx	lr
   3816c:	movw	r0, #22532	; 0x5804
   38170:	movt	r0, #4
   38174:	bx	lr
   38178:	movw	r0, #22556	; 0x581c
   3817c:	movt	r0, #4
   38180:	bx	lr
   38184:	movw	r0, #21780	; 0x5514
   38188:	movt	r0, #4
   3818c:	bx	lr
   38190:	movw	r0, #22340	; 0x5744
   38194:	movt	r0, #4
   38198:	bx	lr
   3819c:	movw	r0, #22388	; 0x5774
   381a0:	movt	r0, #4
   381a4:	bx	lr
   381a8:	movw	r0, #24188	; 0x5e7c
   381ac:	movt	r0, #4
   381b0:	bx	lr
   381b4:	movw	r0, #24832	; 0x6100
   381b8:	movt	r0, #4
   381bc:	bx	lr
   381c0:	movw	r0, #23496	; 0x5bc8
   381c4:	movt	r0, #4
   381c8:	bx	lr
   381cc:	movw	r0, #23560	; 0x5c08
   381d0:	movt	r0, #4
   381d4:	bx	lr
   381d8:	movw	r0, #25080	; 0x61f8
   381dc:	movt	r0, #4
   381e0:	bx	lr
   381e4:	movw	r0, #25104	; 0x6210
   381e8:	movt	r0, #4
   381ec:	bx	lr
   381f0:	movw	r0, #24552	; 0x5fe8
   381f4:	movt	r0, #4
   381f8:	bx	lr
   381fc:	movw	r0, #23900	; 0x5d5c
   38200:	movt	r0, #4
   38204:	bx	lr
   38208:	movw	r0, #24952	; 0x6178
   3820c:	movt	r0, #4
   38210:	bx	lr
   38214:	movw	r0, #25032	; 0x61c8
   38218:	movt	r0, #4
   3821c:	bx	lr
   38220:	movw	r0, #21672	; 0x54a8
   38224:	movt	r0, #4
   38228:	bx	lr
   3822c:	movw	r0, #21692	; 0x54bc
   38230:	movt	r0, #4
   38234:	bx	lr
   38238:	movw	r0, #24348	; 0x5f1c
   3823c:	movt	r0, #4
   38240:	bx	lr
   38244:	movw	r0, #24048	; 0x5df0
   38248:	movt	r0, #4
   3824c:	bx	lr
   38250:	movw	r0, #25244	; 0x629c
   38254:	movt	r0, #4
   38258:	bx	lr
   3825c:	movw	r0, #25260	; 0x62ac
   38260:	movt	r0, #4
   38264:	bx	lr
   38268:	movw	r0, #23840	; 0x5d20
   3826c:	movt	r0, #4
   38270:	bx	lr
   38274:	movw	r0, #22952	; 0x59a8
   38278:	movt	r0, #4
   3827c:	bx	lr
   38280:	movw	r0, #22076	; 0x563c
   38284:	movt	r0, #4
   38288:	bx	lr
   3828c:	movw	r0, #22128	; 0x5670
   38290:	movt	r0, #4
   38294:	bx	lr
   38298:	movw	r0, #23196	; 0x5a9c
   3829c:	movt	r0, #4
   382a0:	bx	lr
   382a4:	mov	r0, #0
   382a8:	bx	lr
   382ac:	movw	r0, #24248	; 0x5eb8
   382b0:	movt	r0, #4
   382b4:	bx	lr
   382b8:	movw	r0, #24300	; 0x5eec
   382bc:	movt	r0, #4
   382c0:	bx	lr
   382c4:	movw	r0, #24508	; 0x5fbc
   382c8:	movt	r0, #4
   382cc:	bx	lr
   382d0:	movw	r0, #23232	; 0x5ac0
   382d4:	movt	r0, #4
   382d8:	bx	lr
   382dc:	movw	r0, #23092	; 0x5a34
   382e0:	movt	r0, #4
   382e4:	bx	lr
   382e8:	movw	r0, #23164	; 0x5a7c
   382ec:	movt	r0, #4
   382f0:	bx	lr
   382f4:	movw	r0, #23600	; 0x5c30
   382f8:	movt	r0, #4
   382fc:	bx	lr
   38300:	movw	r0, #21664	; 0x54a0
   38304:	movt	r0, #4
   38308:	bx	lr
   3830c:	movw	r0, #23768	; 0x5cd8
   38310:	movt	r0, #4
   38314:	bx	lr
   38318:	movw	r0, #23816	; 0x5d08
   3831c:	movt	r0, #4
   38320:	bx	lr
   38324:	movw	r0, #22424	; 0x5798
   38328:	movt	r0, #4
   3832c:	bx	lr
   38330:	movw	r0, #25140	; 0x6234
   38334:	movt	r0, #4
   38338:	bx	lr
   3833c:	movw	r0, #22688	; 0x58a0
   38340:	movt	r0, #4
   38344:	bx	lr
   38348:	movw	r0, #22752	; 0x58e0
   3834c:	movt	r0, #4
   38350:	bx	lr
   38354:	movw	r0, #23020	; 0x59ec
   38358:	movt	r0, #4
   3835c:	bx	lr
   38360:	movw	r0, #24656	; 0x6050
   38364:	movt	r0, #4
   38368:	bx	lr
   3836c:	movw	r0, #24092	; 0x5e1c
   38370:	movt	r0, #4
   38374:	bx	lr
   38378:	movw	r0, #24176	; 0x5e70
   3837c:	movt	r0, #4
   38380:	bx	lr
   38384:	movw	r0, #21704	; 0x54c8
   38388:	movt	r0, #4
   3838c:	bx	lr
   38390:	movw	r0, #23472	; 0x5bb0
   38394:	movt	r0, #4
   38398:	bx	lr
   3839c:	movw	r0, #22968	; 0x59b8
   383a0:	movt	r0, #4
   383a4:	bx	lr
   383a8:	movw	r0, #23008	; 0x59e0
   383ac:	movt	r0, #4
   383b0:	bx	lr
   383b4:	movw	r0, #22160	; 0x5690
   383b8:	movt	r0, #4
   383bc:	bx	lr
   383c0:	movw	r0, #22308	; 0x5724
   383c4:	movt	r0, #4
   383c8:	bx	lr
   383cc:	movw	r0, #25044	; 0x61d4
   383d0:	movt	r0, #4
   383d4:	bx	lr
   383d8:	movw	r0, #25068	; 0x61ec
   383dc:	movt	r0, #4
   383e0:	bx	lr
   383e4:	movw	r0, #25268	; 0x62b4
   383e8:	movt	r0, #4
   383ec:	bx	lr
   383f0:	movw	r0, #21904	; 0x5590
   383f4:	movt	r0, #4
   383f8:	bx	lr
   383fc:	movw	r0, #24860	; 0x611c
   38400:	movt	r0, #4
   38404:	bx	lr
   38408:	movw	r0, #24896	; 0x6140
   3840c:	movt	r0, #4
   38410:	bx	lr
   38414:	movw	r0, #22796	; 0x590c
   38418:	movt	r0, #4
   3841c:	bx	lr
   38420:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   38424:	mov	r2, #0
   38428:	ldr	r3, [pc, #456]	; 385f8 <__assert_fail@plt+0x250f4>
   3842c:	ldr	fp, [pc, #456]	; 385fc <__assert_fail@plt+0x250f8>
   38430:	ldr	sl, [pc, #456]	; 38600 <__assert_fail@plt+0x250fc>
   38434:	add	r3, pc, r3
   38438:	ldr	r9, [pc, #452]	; 38604 <__assert_fail@plt+0x25100>
   3843c:	add	fp, pc, fp
   38440:	add	sl, pc, sl
   38444:	str	r3, [r0, #20]
   38448:	add	r9, pc, r9
   3844c:	str	fp, [r0, #24]
   38450:	str	sl, [r0, #32]
   38454:	str	r9, [r0, #28]
   38458:	ldr	r8, [pc, #424]	; 38608 <__assert_fail@plt+0x25104>
   3845c:	ldr	r7, [pc, #424]	; 3860c <__assert_fail@plt+0x25108>
   38460:	ldr	r6, [pc, #424]	; 38610 <__assert_fail@plt+0x2510c>
   38464:	add	r8, pc, r8
   38468:	ldr	r5, [pc, #420]	; 38614 <__assert_fail@plt+0x25110>
   3846c:	add	r7, pc, r7
   38470:	ldr	r4, [pc, #416]	; 38618 <__assert_fail@plt+0x25114>
   38474:	add	r6, pc, r6
   38478:	ldr	ip, [pc, #412]	; 3861c <__assert_fail@plt+0x25118>
   3847c:	add	r5, pc, r5
   38480:	ldr	r1, [pc, #408]	; 38620 <__assert_fail@plt+0x2511c>
   38484:	add	r4, pc, r4
   38488:	ldr	r3, [pc, #404]	; 38624 <__assert_fail@plt+0x25120>
   3848c:	add	ip, pc, ip
   38490:	ldr	fp, [pc, #400]	; 38628 <__assert_fail@plt+0x25124>
   38494:	add	r1, pc, r1
   38498:	ldr	sl, [pc, #396]	; 3862c <__assert_fail@plt+0x25128>
   3849c:	add	r3, pc, r3
   384a0:	ldr	r9, [pc, #392]	; 38630 <__assert_fail@plt+0x2512c>
   384a4:	add	fp, pc, fp
   384a8:	add	sl, pc, sl
   384ac:	str	r8, [r0, #36]	; 0x24
   384b0:	add	r9, pc, r9
   384b4:	str	r7, [r0, #40]	; 0x28
   384b8:	str	r6, [r0, #44]	; 0x2c
   384bc:	str	r5, [r0, #48]	; 0x30
   384c0:	str	r4, [r0, #52]	; 0x34
   384c4:	str	ip, [r0, #56]	; 0x38
   384c8:	str	r1, [r0, #60]	; 0x3c
   384cc:	str	r3, [r0, #64]	; 0x40
   384d0:	str	fp, [r0, #68]	; 0x44
   384d4:	str	sl, [r0, #72]	; 0x48
   384d8:	str	r9, [r0, #76]	; 0x4c
   384dc:	ldr	r8, [pc, #336]	; 38634 <__assert_fail@plt+0x25130>
   384e0:	ldr	r7, [pc, #336]	; 38638 <__assert_fail@plt+0x25134>
   384e4:	ldr	r6, [pc, #336]	; 3863c <__assert_fail@plt+0x25138>
   384e8:	add	r8, pc, r8
   384ec:	ldr	r5, [pc, #332]	; 38640 <__assert_fail@plt+0x2513c>
   384f0:	add	r7, pc, r7
   384f4:	ldr	r4, [pc, #328]	; 38644 <__assert_fail@plt+0x25140>
   384f8:	add	r6, pc, r6
   384fc:	ldr	ip, [pc, #324]	; 38648 <__assert_fail@plt+0x25144>
   38500:	add	r5, pc, r5
   38504:	ldr	r1, [pc, #320]	; 3864c <__assert_fail@plt+0x25148>
   38508:	add	r4, pc, r4
   3850c:	ldr	r3, [pc, #316]	; 38650 <__assert_fail@plt+0x2514c>
   38510:	add	ip, pc, ip
   38514:	ldr	fp, [pc, #312]	; 38654 <__assert_fail@plt+0x25150>
   38518:	add	r1, pc, r1
   3851c:	ldr	sl, [pc, #308]	; 38658 <__assert_fail@plt+0x25154>
   38520:	add	r3, pc, r3
   38524:	ldr	r9, [pc, #304]	; 3865c <__assert_fail@plt+0x25158>
   38528:	add	fp, pc, fp
   3852c:	add	sl, pc, sl
   38530:	str	r8, [r0, #80]	; 0x50
   38534:	add	r9, pc, r9
   38538:	str	r7, [r0, #84]	; 0x54
   3853c:	str	r6, [r0, #88]	; 0x58
   38540:	str	r5, [r0, #92]	; 0x5c
   38544:	str	r4, [r0, #96]	; 0x60
   38548:	str	ip, [r0, #112]	; 0x70
   3854c:	str	r1, [r0, #100]	; 0x64
   38550:	str	r3, [r0, #116]	; 0x74
   38554:	str	fp, [r0, #120]	; 0x78
   38558:	str	sl, [r0, #124]	; 0x7c
   3855c:	str	r9, [r0, #128]	; 0x80
   38560:	ldr	r8, [pc, #248]	; 38660 <__assert_fail@plt+0x2515c>
   38564:	ldr	r7, [pc, #248]	; 38664 <__assert_fail@plt+0x25160>
   38568:	ldr	r6, [pc, #248]	; 38668 <__assert_fail@plt+0x25164>
   3856c:	add	r8, pc, r8
   38570:	ldr	r5, [pc, #244]	; 3866c <__assert_fail@plt+0x25168>
   38574:	add	r7, pc, r7
   38578:	ldr	r4, [pc, #240]	; 38670 <__assert_fail@plt+0x2516c>
   3857c:	add	r6, pc, r6
   38580:	ldr	ip, [pc, #236]	; 38674 <__assert_fail@plt+0x25170>
   38584:	add	r5, pc, r5
   38588:	ldr	r1, [pc, #232]	; 38678 <__assert_fail@plt+0x25174>
   3858c:	add	r4, pc, r4
   38590:	ldr	r3, [pc, #228]	; 3867c <__assert_fail@plt+0x25178>
   38594:	add	ip, pc, ip
   38598:	ldr	fp, [pc, #224]	; 38680 <__assert_fail@plt+0x2517c>
   3859c:	add	r1, pc, r1
   385a0:	ldr	sl, [pc, #220]	; 38684 <__assert_fail@plt+0x25180>
   385a4:	add	r3, pc, r3
   385a8:	ldr	r9, [pc, #216]	; 38688 <__assert_fail@plt+0x25184>
   385ac:	add	fp, pc, fp
   385b0:	add	sl, pc, sl
   385b4:	str	r8, [r0, #132]	; 0x84
   385b8:	add	r9, pc, r9
   385bc:	str	r7, [r0, #136]	; 0x88
   385c0:	str	r6, [r0, #140]	; 0x8c
   385c4:	str	r5, [r0, #144]	; 0x90
   385c8:	str	r4, [r0, #148]	; 0x94
   385cc:	str	ip, [r0, #152]	; 0x98
   385d0:	str	r1, [r0, #156]	; 0x9c
   385d4:	str	r3, [r0, #104]	; 0x68
   385d8:	mov	r3, #4
   385dc:	str	fp, [r0, #108]	; 0x6c
   385e0:	str	sl, [r0, #164]	; 0xa4
   385e4:	str	r9, [r0, #188]	; 0xbc
   385e8:	str	r2, [r0, #160]	; 0xa0
   385ec:	str	r3, [r0, #192]	; 0xc0
   385f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   385f4:	bx	lr
   385f8:	andeq	r0, r0, r0, asr r2
   385fc:	andeq	r0, r0, r0, asr r2
   38600:	andeq	r0, r0, r4, asr r2
   38604:	andeq	r0, r0, r4, asr r2
   38608:	andeq	r0, r0, r0, asr #4
   3860c:	andeq	r0, r0, r0, asr #4
   38610:	andeq	r0, r0, r0, asr #4
   38614:	andeq	r0, r0, r0, asr #4
   38618:	andeq	r0, r0, r0, asr #4
   3861c:	andeq	r0, r0, r0, asr #4
   38620:	andeq	r0, r0, r4, asr #4
   38624:	andeq	r0, r0, ip, asr #4
   38628:	andeq	r0, r0, ip, asr #4
   3862c:	andeq	r0, r0, r0, asr r2
   38630:	andeq	r0, r0, r0, asr r2
   38634:	andeq	r0, r0, r0, lsr #4
   38638:	andeq	r0, r0, r4, lsr #4
   3863c:	andeq	r0, r0, r4, lsr #4
   38640:	andeq	r0, r0, r4, lsr r2
   38644:	andeq	r0, r0, r4, lsr #4
   38648:	andeq	r0, r0, r4, lsl r2
   3864c:	andeq	r0, r0, r4, lsr #4
   38650:	andeq	r0, r0, ip, lsr r3
   38654:	andeq	r0, r0, ip, lsl r2
   38658:	andeq	r0, r0, r8, lsl r2
   3865c:	andeq	r0, r0, r0, lsl r2
   38660:	andeq	r0, r0, r0, ror #3
   38664:	andeq	r0, r0, r0, ror #3
   38668:	andeq	r0, r0, r0, ror #3
   3866c:	andeq	r0, r0, r0, ror #3
   38670:	andeq	r0, r0, r0, ror #3
   38674:	andeq	r0, r0, r8, asr #4
   38678:	ldrdeq	r0, [r0], -r8
   3867c:	andeq	r0, r0, ip, lsl #4
   38680:	andeq	r0, r0, r0, lsr #4
   38684:	andeq	r0, r0, r4, lsr #4
   38688:	andeq	r0, r0, r8, asr r1
   3868c:	mov	r0, #0
   38690:	bx	lr
   38694:	mov	r0, #0
   38698:	bx	lr
   3869c:	mov	r0, #0
   386a0:	bx	lr
   386a4:	mov	r0, #27
   386a8:	bx	lr
   386ac:	mov	r0, #0
   386b0:	bx	lr
   386b4:	mov	r0, #0
   386b8:	bx	lr
   386bc:	mov	r0, #0
   386c0:	bx	lr
   386c4:	mov	r0, #0
   386c8:	bx	lr
   386cc:	mov	r0, #0
   386d0:	bx	lr
   386d4:	rsbs	r0, r0, #1
   386d8:	movcc	r0, #0
   386dc:	bx	lr
   386e0:	orrs	r1, r0, r1
   386e4:	movne	r0, #0
   386e8:	moveq	r0, #1
   386ec:	bx	lr
   386f0:	mov	r0, #0
   386f4:	bx	lr
   386f8:	mov	r0, #0
   386fc:	bx	lr
   38700:	mov	r0, #0
   38704:	bx	lr
   38708:	mov	r0, #0
   3870c:	bx	lr
   38710:	mov	r0, #0
   38714:	bx	lr
   38718:	bx	lr
   3871c:	mov	r0, #0
   38720:	bx	lr
   38724:	mov	r0, #0
   38728:	bx	lr
   3872c:	mov	r0, #0
   38730:	bx	lr
   38734:	mov	r0, #0
   38738:	bx	lr
   3873c:	mov	r0, #0
   38740:	bx	lr
   38744:	mov	r0, #0
   38748:	bx	lr
   3874c:	mov	r0, #0
   38750:	bx	lr
   38754:	mov	r0, #0
   38758:	bx	lr
   3875c:	mov	r0, #0
   38760:	bx	lr
   38764:	mov	r0, #0
   38768:	bx	lr
   3876c:	mov	r0, #0
   38770:	bx	lr
   38774:	mvn	r0, #1
   38778:	bx	lr
   3877c:	push	{r4}		; (str r4, [sp, #-4]!)
   38780:	mvn	ip, #0
   38784:	ldr	r4, [sp, #4]
   38788:	mov	r0, ip
   3878c:	str	ip, [r3]
   38790:	str	ip, [r2]
   38794:	str	ip, [r1]
   38798:	str	ip, [r4]
   3879c:	str	ip, [r4, #4]
   387a0:	str	ip, [r4, #8]
   387a4:	str	ip, [r4, #12]
   387a8:	str	ip, [r4, #16]
   387ac:	str	ip, [r4, #20]
   387b0:	pop	{r4}		; (ldr r4, [sp], #4)
   387b4:	bx	lr
   387b8:	ldr	r1, [sp, #8]
   387bc:	mov	r3, #0
   387c0:	ldr	r2, [sp, #12]
   387c4:	mov	r0, r3
   387c8:	str	r3, [r1]
   387cc:	str	r3, [r2]
   387d0:	bx	lr
   387d4:	mov	r0, #0
   387d8:	bx	lr
   387dc:	mvn	r0, #0
   387e0:	bx	lr
   387e4:	subs	r0, r2, #0
   387e8:	push	{r4, r5, r6, r7, r8, r9, sl}
   387ec:	mov	r7, r1
   387f0:	ldr	r2, [sp, #28]
   387f4:	ldr	r6, [sp, #32]
   387f8:	ldr	r5, [sp, #36]	; 0x24
   387fc:	ldr	r4, [sp, #40]	; 0x28
   38800:	beq	38850 <__assert_fail@plt+0x2534c>
   38804:	ldr	sl, [pc, #76]	; 38858 <__assert_fail@plt+0x25354>
   38808:	mvn	ip, #0
   3880c:	ldr	r9, [pc, #72]	; 3885c <__assert_fail@plt+0x25358>
   38810:	mov	r1, r3
   38814:	ldr	r8, [pc, #68]	; 38860 <__assert_fail@plt+0x2535c>
   38818:	add	sl, pc, sl
   3881c:	str	r7, [sp, #32]
   38820:	add	r9, pc, r9
   38824:	str	sl, [r6]
   38828:	add	r8, pc, r8
   3882c:	str	r9, [r2]
   38830:	mov	r6, #0
   38834:	str	ip, [r5]
   38838:	mov	r3, ip
   3883c:	str	r8, [sp, #28]
   38840:	mov	r2, #1
   38844:	str	r6, [r4]
   38848:	pop	{r4, r5, r6, r7, r8, r9, sl}
   3884c:	b	134ec <__snprintf_chk@plt>
   38850:	pop	{r4, r5, r6, r7, r8, r9, sl}
   38854:	bx	lr
   38858:	andeq	r9, r0, ip, asr #15
   3885c:	muleq	r0, r0, r5
   38860:	andeq	sp, r0, r4, asr #21
   38864:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   38868:	add	r8, r0, #2
   3886c:	ldr	r9, [pc, #112]	; 388e4 <__assert_fail@plt+0x253e0>
   38870:	mov	r6, r0
   38874:	ldr	r7, [pc, #108]	; 388e8 <__assert_fail@plt+0x253e4>
   38878:	add	r9, pc, r9
   3887c:	sub	r4, r9, #4
   38880:	add	r7, pc, r7
   38884:	add	r9, r9, #108	; 0x6c
   38888:	ldr	r5, [r4, #4]!
   3888c:	mov	r0, r6
   38890:	mov	r1, r5
   38894:	bl	12cd0 <strcmp@plt>
   38898:	mov	r1, r7
   3889c:	mov	r2, #7
   388a0:	cmp	r0, #0
   388a4:	mov	r0, r6
   388a8:	beq	388dc <__assert_fail@plt+0x253d8>
   388ac:	bl	13468 <strncmp@plt>
   388b0:	add	r1, r5, #1
   388b4:	cmp	r0, #0
   388b8:	mov	r0, r8
   388bc:	bne	388cc <__assert_fail@plt+0x253c8>
   388c0:	bl	12cd0 <strcmp@plt>
   388c4:	cmp	r0, #0
   388c8:	beq	388dc <__assert_fail@plt+0x253d8>
   388cc:	cmp	r4, r9
   388d0:	bne	38888 <__assert_fail@plt+0x25384>
   388d4:	mov	r0, #0
   388d8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   388dc:	mov	r0, #1
   388e0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   388e4:	andeq	pc, r1, r0, asr #20
   388e8:	andeq	r7, r0, ip, asr #4
   388ec:	ldr	r3, [pc, #860]	; 38c50 <__assert_fail@plt+0x2574c>
   388f0:	ldr	ip, [pc, #860]	; 38c54 <__assert_fail@plt+0x25750>
   388f4:	add	r3, pc, r3
   388f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   388fc:	sub	sp, sp, #148	; 0x94
   38900:	ldr	ip, [r3, ip]
   38904:	mov	r6, r0
   38908:	mov	r9, r1
   3890c:	mov	r0, #1
   38910:	mov	r1, #232	; 0xe8
   38914:	mov	r7, r2
   38918:	ldr	r3, [ip]
   3891c:	str	ip, [sp, #8]
   38920:	str	r3, [sp, #140]	; 0x8c
   38924:	bl	12c4c <calloc@plt>
   38928:	subs	r5, r0, #0
   3892c:	beq	38b00 <__assert_fail@plt+0x255fc>
   38930:	ldr	r8, [pc, #800]	; 38c58 <__assert_fail@plt+0x25754>
   38934:	bl	38420 <__assert_fail@plt+0x24f1c>
   38938:	mov	r4, #0
   3893c:	add	r8, pc, r8
   38940:	add	r8, r8, #128	; 0x80
   38944:	b	38970 <__assert_fail@plt+0x2546c>
   38948:	ldr	sl, [r8, #-12]
   3894c:	mov	r0, r9
   38950:	mov	r1, sl
   38954:	bl	12cd0 <strcmp@plt>
   38958:	cmp	r0, #0
   3895c:	beq	389a0 <__assert_fail@plt+0x2549c>
   38960:	add	r4, r4, #1
   38964:	add	r8, r8, #28
   38968:	cmp	r4, #76	; 0x4c
   3896c:	beq	38b74 <__assert_fail@plt+0x25670>
   38970:	cmp	r9, #0
   38974:	bne	38948 <__assert_fail@plt+0x25444>
   38978:	ldr	r3, [r8]
   3897c:	cmp	r3, r7
   38980:	bne	38960 <__assert_fail@plt+0x2545c>
   38984:	lsl	r9, r4, #3
   38988:	ldr	r3, [pc, #716]	; 38c5c <__assert_fail@plt+0x25758>
   3898c:	rsb	r2, r4, r9
   38990:	add	r3, pc, r3
   38994:	add	r3, r3, r2, lsl #2
   38998:	ldr	sl, [r3, #116]	; 0x74
   3899c:	b	389a4 <__assert_fail@plt+0x254a0>
   389a0:	lsl	r9, r4, #3
   389a4:	cmp	r6, #0
   389a8:	str	sl, [r5, #4]
   389ac:	beq	38b9c <__assert_fail@plt+0x25698>
   389b0:	ldr	r3, [r6, #56]	; 0x38
   389b4:	ldrh	r3, [r3, #18]
   389b8:	str	r3, [r5, #8]
   389bc:	ldr	r3, [r6, #56]	; 0x38
   389c0:	ldrb	r3, [r3, #4]
   389c4:	strb	r3, [r5, #12]
   389c8:	ldr	r3, [r6, #56]	; 0x38
   389cc:	ldrb	r3, [r3, #5]
   389d0:	strb	r3, [r5, #13]
   389d4:	ldr	sl, [pc, #644]	; 38c60 <__assert_fail@plt+0x2575c>
   389d8:	add	r8, sp, #40	; 0x28
   389dc:	ldr	ip, [pc, #640]	; 38c64 <__assert_fail@plt+0x25760>
   389e0:	rsb	fp, r4, r9
   389e4:	add	sl, pc, sl
   389e8:	mov	lr, r8
   389ec:	add	ip, pc, ip
   389f0:	ldm	sl!, {r0, r1, r2, r3}
   389f4:	add	fp, ip, fp, lsl #2
   389f8:	str	fp, [sp, #12]
   389fc:	ldr	fp, [pc, #612]	; 38c68 <__assert_fail@plt+0x25764>
   38a00:	stmia	lr!, {r0, r1, r2, r3}
   38a04:	add	fp, pc, fp
   38a08:	ldm	sl!, {r0, r1, r2, r3}
   38a0c:	str	fp, [sp]
   38a10:	ldr	fp, [sp, #12]
   38a14:	ldr	sl, [sl]
   38a18:	ldr	ip, [fp, #112]	; 0x70
   38a1c:	stmia	lr!, {r0, r1, r2, r3}
   38a20:	mov	r2, #68	; 0x44
   38a24:	mov	r1, ip
   38a28:	strb	sl, [lr]
   38a2c:	add	r0, sp, #72	; 0x48
   38a30:	str	ip, [sp, #4]
   38a34:	bl	12f10 <__stpcpy_chk@plt>
   38a38:	ldr	fp, [sp]
   38a3c:	mov	r1, #1
   38a40:	mov	r3, r0
   38a44:	ldr	r0, [fp]
   38a48:	str	r0, [r3]
   38a4c:	mov	r0, r8
   38a50:	bl	12f1c <dlopen@plt>
   38a54:	ldr	ip, [sp, #4]
   38a58:	subs	sl, r0, #0
   38a5c:	beq	38bc4 <__assert_fail@plt+0x256c0>
   38a60:	ldr	r3, [pc, #516]	; 38c6c <__assert_fail@plt+0x25768>
   38a64:	rsb	r4, r4, r9
   38a68:	add	r3, pc, r3
   38a6c:	add	r4, r3, r4, lsl #2
   38a70:	ldr	r2, [r4, #124]	; 0x7c
   38a74:	cmp	r2, #16
   38a78:	bgt	38c14 <__assert_fail@plt+0x25710>
   38a7c:	ldr	r8, [r4, #120]	; 0x78
   38a80:	add	r4, sp, #16
   38a84:	mov	r3, #22
   38a88:	mov	r0, r4
   38a8c:	mov	r1, r8
   38a90:	bl	134f8 <__mempcpy_chk@plt>
   38a94:	ldr	r2, [pc, #468]	; 38c70 <__assert_fail@plt+0x2576c>
   38a98:	mov	r1, r4
   38a9c:	add	r2, pc, r2
   38aa0:	mov	r3, r0
   38aa4:	ldr	r0, [r2]
   38aa8:	ldrh	r2, [r2, #4]
   38aac:	str	r0, [r3]
   38ab0:	mov	r0, sl
   38ab4:	strh	r2, [r3, #4]
   38ab8:	bl	134bc <dlsym@plt>
   38abc:	subs	ip, r0, #0
   38ac0:	beq	38ae0 <__assert_fail@plt+0x255dc>
   38ac4:	mov	r1, r7
   38ac8:	mov	r0, r6
   38acc:	mov	r2, r5
   38ad0:	mov	r3, #232	; 0xe8
   38ad4:	blx	ip
   38ad8:	subs	r1, r0, #0
   38adc:	bne	38b20 <__assert_fail@plt+0x2561c>
   38ae0:	mov	r0, sl
   38ae4:	bl	12dcc <dlclose@plt>
   38ae8:	mov	r3, #0
   38aec:	str	r6, [r5, #16]
   38af0:	str	r8, [r5]
   38af4:	mov	r0, r5
   38af8:	str	r3, [r5, #228]	; 0xe4
   38afc:	bl	38420 <__assert_fail@plt+0x24f1c>
   38b00:	ldr	fp, [sp, #8]
   38b04:	mov	r0, r5
   38b08:	ldr	r2, [sp, #140]	; 0x8c
   38b0c:	ldr	r3, [fp]
   38b10:	cmp	r2, r3
   38b14:	bne	38c10 <__assert_fail@plt+0x2570c>
   38b18:	add	sp, sp, #148	; 0x94
   38b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38b20:	ldr	r4, [pc, #332]	; 38c74 <__assert_fail@plt+0x25770>
   38b24:	add	r4, pc, r4
   38b28:	add	r0, r4, #12
   38b2c:	bl	12cd0 <strcmp@plt>
   38b30:	cmp	r0, #0
   38b34:	bne	38ae0 <__assert_fail@plt+0x255dc>
   38b38:	ldr	r3, [r5]
   38b3c:	str	sl, [r5, #228]	; 0xe4
   38b40:	cmp	r3, #0
   38b44:	str	r6, [r5, #16]
   38b48:	beq	38c34 <__assert_fail@plt+0x25730>
   38b4c:	ldr	r3, [r5, #188]	; 0xbc
   38b50:	cmp	r3, #0
   38b54:	bne	38b00 <__assert_fail@plt+0x255fc>
   38b58:	ldr	r0, [pc, #280]	; 38c78 <__assert_fail@plt+0x25774>
   38b5c:	mov	r3, r4
   38b60:	ldr	r1, [pc, #276]	; 38c7c <__assert_fail@plt+0x25778>
   38b64:	movw	r2, #365	; 0x16d
   38b68:	add	r0, pc, r0
   38b6c:	add	r1, pc, r1
   38b70:	bl	13504 <__assert_fail@plt>
   38b74:	ldr	r3, [pc, #260]	; 38c80 <__assert_fail@plt+0x2577c>
   38b78:	mov	r2, #0
   38b7c:	str	r6, [r5, #16]
   38b80:	mov	r0, r5
   38b84:	add	r3, pc, r3
   38b88:	str	r2, [r5, #228]	; 0xe4
   38b8c:	str	r3, [r5, #4]
   38b90:	str	r3, [r5]
   38b94:	bl	38420 <__assert_fail@plt+0x24f1c>
   38b98:	b	38b00 <__assert_fail@plt+0x255fc>
   38b9c:	ldr	r3, [pc, #224]	; 38c84 <__assert_fail@plt+0x25780>
   38ba0:	rsb	r2, r4, r9
   38ba4:	add	r3, pc, r3
   38ba8:	add	r3, r3, r2, lsl #2
   38bac:	add	r1, r3, #128	; 0x80
   38bb0:	ldm	r1, {r1, r2, r3}
   38bb4:	str	r1, [r5, #8]
   38bb8:	strb	r2, [r5, #12]
   38bbc:	strb	r3, [r5, #13]
   38bc0:	b	389d4 <__assert_fail@plt+0x254d0>
   38bc4:	ldr	r3, [pc, #188]	; 38c88 <__assert_fail@plt+0x25784>
   38bc8:	mov	r2, #93	; 0x5d
   38bcc:	add	r3, pc, r3
   38bd0:	ldm	r3, {r0, r1}
   38bd4:	stm	r8, {r0, r1}
   38bd8:	mov	r1, ip
   38bdc:	add	r0, sp, #47	; 0x2f
   38be0:	bl	12f10 <__stpcpy_chk@plt>
   38be4:	mov	r1, #1
   38be8:	mov	r3, r0
   38bec:	ldr	r0, [fp]
   38bf0:	str	r0, [r3]
   38bf4:	mov	r0, r8
   38bf8:	bl	12f1c <dlopen@plt>
   38bfc:	subs	sl, r0, #0
   38c00:	bne	38a60 <__assert_fail@plt+0x2555c>
   38c04:	ldr	ip, [sp, #12]
   38c08:	ldr	r8, [ip, #120]	; 0x78
   38c0c:	b	38ae8 <__assert_fail@plt+0x255e4>
   38c10:	bl	12dc0 <__stack_chk_fail@plt>
   38c14:	ldr	r0, [pc, #112]	; 38c8c <__assert_fail@plt+0x25788>
   38c18:	mov	r2, #348	; 0x15c
   38c1c:	ldr	r1, [pc, #108]	; 38c90 <__assert_fail@plt+0x2578c>
   38c20:	ldr	r3, [pc, #108]	; 38c94 <__assert_fail@plt+0x25790>
   38c24:	add	r0, pc, r0
   38c28:	add	r1, pc, r1
   38c2c:	add	r3, pc, r3
   38c30:	bl	13504 <__assert_fail@plt>
   38c34:	ldr	r0, [pc, #92]	; 38c98 <__assert_fail@plt+0x25794>
   38c38:	mov	r3, r4
   38c3c:	ldr	r1, [pc, #88]	; 38c9c <__assert_fail@plt+0x25798>
   38c40:	mov	r2, #364	; 0x16c
   38c44:	add	r0, pc, r0
   38c48:	add	r1, pc, r1
   38c4c:	bl	13504 <__assert_fail@plt>
   38c50:	andeq	r0, r2, r4, lsl #14
   38c54:	strdeq	r0, [r0], -r8
   38c58:	andeq	pc, r1, ip, ror r9	; <UNPREDICTABLE>
   38c5c:	andeq	pc, r1, r8, lsr #18
   38c60:	andeq	sp, r0, r0, lsl r9
   38c64:	andeq	pc, r1, ip, asr #17
   38c68:	andeq	sp, r0, r4, lsl r9
   38c6c:	andeq	pc, r1, r0, asr r8	; <UNPREDICTABLE>
   38c70:			; <UNDEFINED> instruction: 0x0000d8bc
   38c74:	andeq	sp, r0, ip, lsl #15
   38c78:	andeq	sp, r0, r4, lsl r8
   38c7c:	ldrdeq	sp, [r0], -r8
   38c80:	andeq	r7, r0, ip, lsl #2
   38c84:	andeq	pc, r1, r4, lsl r7	; <UNPREDICTABLE>
   38c88:	andeq	sp, r0, r0, asr r7
   38c8c:	andeq	sp, r0, r0, lsl #14
   38c90:	andeq	sp, r0, ip, lsl r7
   38c94:	andeq	sp, r0, r4, lsl #13
   38c98:	andeq	sp, r0, ip, lsl r7
   38c9c:	strdeq	sp, [r0], -ip
   38ca0:	ldr	r3, [pc, #96]	; 38d08 <__assert_fail@plt+0x25804>
   38ca4:	ldr	r2, [pc, #96]	; 38d0c <__assert_fail@plt+0x25808>
   38ca8:	add	r3, pc, r3
   38cac:	push	{r4, r5, lr}
   38cb0:	sub	sp, sp, #76	; 0x4c
   38cb4:	ldr	r4, [r3, r2]
   38cb8:	mov	r5, r0
   38cbc:	mov	r1, sp
   38cc0:	ldr	r3, [r4]
   38cc4:	str	r3, [sp, #68]	; 0x44
   38cc8:	bl	12c70 <gelf_getehdr@plt>
   38ccc:	subs	r3, r0, #0
   38cd0:	beq	38cfc <__assert_fail@plt+0x257f8>
   38cd4:	mov	r0, r5
   38cd8:	ldrh	r2, [r3, #18]
   38cdc:	mov	r1, #0
   38ce0:	bl	388ec <__assert_fail@plt+0x253e8>
   38ce4:	ldr	r2, [sp, #68]	; 0x44
   38ce8:	ldr	r3, [r4]
   38cec:	cmp	r2, r3
   38cf0:	bne	38d04 <__assert_fail@plt+0x25800>
   38cf4:	add	sp, sp, #76	; 0x4c
   38cf8:	pop	{r4, r5, pc}
   38cfc:	mov	r0, r3
   38d00:	b	38ce4 <__assert_fail@plt+0x257e0>
   38d04:	bl	12dc0 <__stack_chk_fail@plt>
   38d08:	andeq	r0, r2, r0, asr r3
   38d0c:	strdeq	r0, [r0], -r8
   38d10:	mov	r2, r0
   38d14:	mov	r0, #0
   38d18:	mov	r1, r0
   38d1c:	b	388ec <__assert_fail@plt+0x253e8>
   38d20:	mov	r1, r0
   38d24:	mov	r0, #0
   38d28:	mov	r2, r0
   38d2c:	b	388ec <__assert_fail@plt+0x253e8>
   38d30:	push	{r4, lr}
   38d34:	subs	r4, r0, #0
   38d38:	popeq	{r4, pc}
   38d3c:	ldr	r3, [r4, #188]	; 0xbc
   38d40:	blx	r3
   38d44:	ldr	r0, [r4, #228]	; 0xe4
   38d48:	cmp	r0, #0
   38d4c:	beq	38d54 <__assert_fail@plt+0x25850>
   38d50:	bl	12dcc <dlclose@plt>
   38d54:	mov	r0, r4
   38d58:	pop	{r4, lr}
   38d5c:	b	12cf4 <free@plt>
   38d60:	cmp	r0, #0
   38d64:	push	{r3, lr}
   38d68:	beq	38d8c <__assert_fail@plt+0x25888>
   38d6c:	ldr	ip, [r0, #20]
   38d70:	mov	r0, r1
   38d74:	mov	r1, r2
   38d78:	mov	r2, r3
   38d7c:	blx	ip
   38d80:	cmp	r0, #0
   38d84:	beq	38d8c <__assert_fail@plt+0x25888>
   38d88:	pop	{r3, pc}
   38d8c:	ldr	r0, [pc, #4]	; 38d98 <__assert_fail@plt+0x25894>
   38d90:	add	r0, pc, r0
   38d94:	pop	{r3, pc}
   38d98:	andeq	r6, r0, ip, lsr #14
   38d9c:	cmp	r0, #0
   38da0:	push	{r4, r5, r6, lr}
   38da4:	mov	r4, r1
   38da8:	sub	sp, sp, #16
   38dac:	mov	r5, r2
   38db0:	mov	r6, r3
   38db4:	beq	38ddc <__assert_fail@plt+0x258d8>
   38db8:	ldr	r3, [r0, #40]	; 0x28
   38dbc:	mov	r0, r1
   38dc0:	mov	r1, r2
   38dc4:	mov	r2, r6
   38dc8:	blx	r3
   38dcc:	cmp	r0, #0
   38dd0:	beq	38ddc <__assert_fail@plt+0x258d8>
   38dd4:	add	sp, sp, #16
   38dd8:	pop	{r4, r5, r6, pc}
   38ddc:	cmp	r4, #7
   38de0:	bls	38e68 <__assert_fail@plt+0x25964>
   38de4:	movw	r3, #58704	; 0xe550
   38de8:	movt	r3, #25716	; 0x6474
   38dec:	cmp	r4, r3
   38df0:	beq	38e84 <__assert_fail@plt+0x25980>
   38df4:	movw	r3, #58705	; 0xe551
   38df8:	movt	r3, #25716	; 0x6474
   38dfc:	cmp	r4, r3
   38e00:	beq	38e90 <__assert_fail@plt+0x2598c>
   38e04:	movw	r3, #58706	; 0xe552
   38e08:	movt	r3, #25716	; 0x6474
   38e0c:	cmp	r4, r3
   38e10:	beq	38e9c <__assert_fail@plt+0x25998>
   38e14:	cmn	r4, #-1879048186	; 0x90000006
   38e18:	beq	38eec <__assert_fail@plt+0x259e8>
   38e1c:	cmn	r4, #-1879048187	; 0x90000005
   38e20:	beq	38e78 <__assert_fail@plt+0x25974>
   38e24:	add	r3, r4, #-1610612736	; 0xa0000000
   38e28:	cmn	r3, #-268435455	; 0xf0000001
   38e2c:	bls	38ef8 <__assert_fail@plt+0x259f4>
   38e30:	cmn	r4, #-1879048191	; 0x90000001
   38e34:	ble	38ea8 <__assert_fail@plt+0x259a4>
   38e38:	ldr	r3, [pc, #228]	; 38f24 <__assert_fail@plt+0x25a20>
   38e3c:	add	r4, r4, #-1879048192	; 0x90000000
   38e40:	mov	r1, r6
   38e44:	str	r4, [sp, #4]
   38e48:	add	r3, pc, r3
   38e4c:	mov	r0, r5
   38e50:	str	r3, [sp]
   38e54:	mov	r2, #1
   38e58:	mvn	r3, #0
   38e5c:	bl	134ec <__snprintf_chk@plt>
   38e60:	mov	r0, r5
   38e64:	b	38dd4 <__assert_fail@plt+0x258d0>
   38e68:	ldr	r3, [pc, #184]	; 38f28 <__assert_fail@plt+0x25a24>
   38e6c:	add	r3, pc, r3
   38e70:	ldr	r0, [r3, r4, lsl #2]
   38e74:	b	38dd4 <__assert_fail@plt+0x258d0>
   38e78:	ldr	r0, [pc, #172]	; 38f2c <__assert_fail@plt+0x25a28>
   38e7c:	add	r0, pc, r0
   38e80:	b	38dd4 <__assert_fail@plt+0x258d0>
   38e84:	ldr	r0, [pc, #164]	; 38f30 <__assert_fail@plt+0x25a2c>
   38e88:	add	r0, pc, r0
   38e8c:	b	38dd4 <__assert_fail@plt+0x258d0>
   38e90:	ldr	r0, [pc, #156]	; 38f34 <__assert_fail@plt+0x25a30>
   38e94:	add	r0, pc, r0
   38e98:	b	38dd4 <__assert_fail@plt+0x258d0>
   38e9c:	ldr	r0, [pc, #148]	; 38f38 <__assert_fail@plt+0x25a34>
   38ea0:	add	r0, pc, r0
   38ea4:	b	38dd4 <__assert_fail@plt+0x258d0>
   38ea8:	ldr	r1, [pc, #140]	; 38f3c <__assert_fail@plt+0x25a38>
   38eac:	mov	r2, #5
   38eb0:	mov	r0, #0
   38eb4:	add	r1, pc, r1
   38eb8:	bl	12d84 <dcgettext@plt>
   38ebc:	ldr	ip, [pc, #124]	; 38f40 <__assert_fail@plt+0x25a3c>
   38ec0:	str	r4, [sp, #8]
   38ec4:	mov	r1, r6
   38ec8:	add	ip, pc, ip
   38ecc:	mov	r2, #1
   38ed0:	mvn	r3, #0
   38ed4:	str	ip, [sp]
   38ed8:	str	r0, [sp, #4]
   38edc:	mov	r0, r5
   38ee0:	bl	134ec <__snprintf_chk@plt>
   38ee4:	mov	r0, r5
   38ee8:	b	38dd4 <__assert_fail@plt+0x258d0>
   38eec:	ldr	r0, [pc, #80]	; 38f44 <__assert_fail@plt+0x25a40>
   38ef0:	add	r0, pc, r0
   38ef4:	b	38dd4 <__assert_fail@plt+0x258d0>
   38ef8:	ldr	ip, [pc, #72]	; 38f48 <__assert_fail@plt+0x25a44>
   38efc:	mov	r1, r6
   38f00:	str	r3, [sp, #4]
   38f04:	mov	r0, r5
   38f08:	add	ip, pc, ip
   38f0c:	mov	r2, #1
   38f10:	mvn	r3, #0
   38f14:	str	ip, [sp]
   38f18:	bl	134ec <__snprintf_chk@plt>
   38f1c:	mov	r0, r5
   38f20:	b	38dd4 <__assert_fail@plt+0x258d0>
   38f24:	andeq	sp, r0, r0, lsr #19
   38f28:	andeq	pc, r1, ip, lsl #26
   38f2c:	andeq	sp, r0, r8, asr r9
   38f30:	andeq	sp, r0, ip, lsl r9
   38f34:	andeq	sp, r0, r0, lsr #18
   38f38:	andeq	sp, r0, r0, lsr #18
   38f3c:	ldrdeq	r6, [r0], -ip
   38f40:	andeq	sp, r0, ip, lsr #18
   38f44:	ldrdeq	sp, [r0], -ip
   38f48:	ldrdeq	sp, [r0], -r8
   38f4c:	push	{r4, r5, r6, lr}
   38f50:	mov	r4, r1
   38f54:	mov	r6, r3
   38f58:	mov	r1, r2
   38f5c:	ldr	r3, [r0, #44]	; 0x2c
   38f60:	sub	sp, sp, #16
   38f64:	mov	r5, r2
   38f68:	mov	r0, r4
   38f6c:	mov	r2, r6
   38f70:	blx	r3
   38f74:	cmp	r0, #0
   38f78:	beq	38f84 <__assert_fail@plt+0x25a80>
   38f7c:	add	sp, sp, #16
   38f80:	pop	{r4, r5, r6, pc}
   38f84:	cmp	r4, #18
   38f88:	bls	38fb8 <__assert_fail@plt+0x25ab4>
   38f8c:	add	r3, r4, #-1879048186	; 0x90000006
   38f90:	cmp	r3, #5
   38f94:	bls	38fd0 <__assert_fail@plt+0x25acc>
   38f98:	add	r3, r4, #-1879048181	; 0x9000000b
   38f9c:	cmp	r3, #3
   38fa0:	addls	pc, pc, r3, lsl #2
   38fa4:	b	39014 <__assert_fail@plt+0x25b10>
   38fa8:	b	38ffc <__assert_fail@plt+0x25af8>
   38fac:	b	38ff0 <__assert_fail@plt+0x25aec>
   38fb0:	b	38fe4 <__assert_fail@plt+0x25ae0>
   38fb4:	b	39008 <__assert_fail@plt+0x25b04>
   38fb8:	ldr	r3, [pc, #296]	; 390e8 <__assert_fail@plt+0x25be4>
   38fbc:	add	r3, pc, r3
   38fc0:	ldr	r0, [r3, r4, lsl #2]
   38fc4:	cmp	r0, #0
   38fc8:	bne	38f7c <__assert_fail@plt+0x25a78>
   38fcc:	b	38f8c <__assert_fail@plt+0x25a88>
   38fd0:	ldr	r2, [pc, #276]	; 390ec <__assert_fail@plt+0x25be8>
   38fd4:	add	r2, pc, r2
   38fd8:	add	r3, r2, r3, lsl #2
   38fdc:	ldr	r0, [r3, #76]	; 0x4c
   38fe0:	b	38f7c <__assert_fail@plt+0x25a78>
   38fe4:	ldr	r0, [pc, #260]	; 390f0 <__assert_fail@plt+0x25bec>
   38fe8:	add	r0, pc, r0
   38fec:	b	38f7c <__assert_fail@plt+0x25a78>
   38ff0:	ldr	r0, [pc, #252]	; 390f4 <__assert_fail@plt+0x25bf0>
   38ff4:	add	r0, pc, r0
   38ff8:	b	38f7c <__assert_fail@plt+0x25a78>
   38ffc:	ldr	r0, [pc, #244]	; 390f8 <__assert_fail@plt+0x25bf4>
   39000:	add	r0, pc, r0
   39004:	b	38f7c <__assert_fail@plt+0x25a78>
   39008:	ldr	r0, [pc, #236]	; 390fc <__assert_fail@plt+0x25bf8>
   3900c:	add	r0, pc, r0
   39010:	b	38f7c <__assert_fail@plt+0x25a78>
   39014:	add	r3, r4, #-1610612736	; 0xa0000000
   39018:	cmn	r3, #-268435455	; 0xf0000001
   3901c:	bls	3906c <__assert_fail@plt+0x25b68>
   39020:	cmn	r4, #-1879048191	; 0x90000001
   39024:	bgt	390d8 <__assert_fail@plt+0x25bd4>
   39028:	cmn	r4, #1879048193	; 0x70000001
   3902c:	movhi	r3, #0
   39030:	movls	r3, #1
   39034:	ands	r0, r3, r4, lsr #31
   39038:	beq	39098 <__assert_fail@plt+0x25b94>
   3903c:	ldr	r3, [pc, #188]	; 39100 <__assert_fail@plt+0x25bfc>
   39040:	add	r4, r4, #-2147483648	; 0x80000000
   39044:	add	r3, pc, r3
   39048:	str	r3, [sp]
   3904c:	mov	r1, r6
   39050:	str	r4, [sp, #4]
   39054:	mov	r0, r5
   39058:	mov	r2, #1
   3905c:	mvn	r3, #0
   39060:	bl	134ec <__snprintf_chk@plt>
   39064:	mov	r0, r5
   39068:	b	38f7c <__assert_fail@plt+0x25a78>
   3906c:	ldr	ip, [pc, #144]	; 39104 <__assert_fail@plt+0x25c00>
   39070:	mov	r1, r6
   39074:	str	r3, [sp, #4]
   39078:	mov	r0, r5
   3907c:	add	ip, pc, ip
   39080:	mov	r2, #1
   39084:	mvn	r3, #0
   39088:	str	ip, [sp]
   3908c:	bl	134ec <__snprintf_chk@plt>
   39090:	mov	r0, r5
   39094:	b	38f7c <__assert_fail@plt+0x25a78>
   39098:	ldr	r1, [pc, #104]	; 39108 <__assert_fail@plt+0x25c04>
   3909c:	mov	r2, #5
   390a0:	add	r1, pc, r1
   390a4:	bl	12d84 <dcgettext@plt>
   390a8:	ldr	ip, [pc, #92]	; 3910c <__assert_fail@plt+0x25c08>
   390ac:	str	r4, [sp, #8]
   390b0:	mov	r1, r6
   390b4:	add	ip, pc, ip
   390b8:	mov	r2, #1
   390bc:	mvn	r3, #0
   390c0:	str	ip, [sp]
   390c4:	str	r0, [sp, #4]
   390c8:	mov	r0, r5
   390cc:	bl	134ec <__snprintf_chk@plt>
   390d0:	mov	r0, r5
   390d4:	b	38f7c <__assert_fail@plt+0x25a78>
   390d8:	ldr	r3, [pc, #48]	; 39110 <__assert_fail@plt+0x25c0c>
   390dc:	add	r4, r4, #-1879048192	; 0x90000000
   390e0:	add	r3, pc, r3
   390e4:	b	39048 <__assert_fail@plt+0x25b44>
   390e8:	ldrdeq	pc, [r1], -ip
   390ec:	andeq	pc, r1, r4, asr #23
   390f0:	andeq	sp, r0, r0, asr r8
   390f4:	andeq	sp, r0, r0, asr r8
   390f8:	andeq	sp, r0, r0, asr r8
   390fc:	andeq	sp, r0, r0, lsr #16
   39100:	andeq	sp, r0, r8, lsr r8
   39104:	andeq	sp, r0, r4, ror #15
   39108:	strdeq	r6, [r0], -r0
   3910c:	andeq	sp, r0, r0, asr #14
   39110:	andeq	sp, r0, ip, lsl #15
   39114:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39118:	subs	ip, r1, #0
   3911c:	sub	sp, sp, #16
   39120:	mov	r6, r0
   39124:	mov	r8, r2
   39128:	str	r1, [sp, #12]
   3912c:	beq	391d4 <__assert_fail@plt+0x25cd0>
   39130:	cmp	r0, #0
   39134:	add	r5, r2, r3
   39138:	beq	3919c <__assert_fail@plt+0x25c98>
   3913c:	add	r7, sp, #12
   39140:	mov	r4, r2
   39144:	mov	r9, #44	; 0x2c
   39148:	ldr	r3, [r6, #52]	; 0x34
   3914c:	mov	r0, r7
   39150:	blx	r3
   39154:	subs	sl, r0, #0
   39158:	beq	39204 <__assert_fail@plt+0x25d00>
   3915c:	bl	13090 <strlen@plt>
   39160:	rsb	r3, r4, r5
   39164:	mov	r1, sl
   39168:	add	r2, r0, #1
   3916c:	mov	r0, r4
   39170:	cmp	r2, r3
   39174:	bhi	391e8 <__assert_fail@plt+0x25ce4>
   39178:	bl	13030 <mempcpy@plt>
   3917c:	ldr	r3, [sp, #12]
   39180:	cmp	r3, #0
   39184:	add	r4, r0, #1
   39188:	beq	391c8 <__assert_fail@plt+0x25cc4>
   3918c:	cmp	r5, r4
   39190:	bls	391c8 <__assert_fail@plt+0x25cc4>
   39194:	strb	r9, [r0]
   39198:	b	39148 <__assert_fail@plt+0x25c44>
   3919c:	mov	r3, ip
   391a0:	mov	r4, r8
   391a4:	ldr	ip, [pc, #96]	; 3920c <__assert_fail@plt+0x25d08>
   391a8:	mov	r0, r4
   391ac:	str	r3, [sp, #4]
   391b0:	rsb	r1, r4, r5
   391b4:	add	ip, pc, ip
   391b8:	mov	r2, #1
   391bc:	mvn	r3, #0
   391c0:	str	ip, [sp]
   391c4:	bl	134ec <__snprintf_chk@plt>
   391c8:	mov	r0, r8
   391cc:	add	sp, sp, #16
   391d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   391d4:	ldr	r8, [pc, #52]	; 39210 <__assert_fail@plt+0x25d0c>
   391d8:	add	r8, pc, r8
   391dc:	mov	r0, r8
   391e0:	add	sp, sp, #16
   391e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   391e8:	sub	r2, r3, #1
   391ec:	bl	13030 <mempcpy@plt>
   391f0:	mov	r3, #0
   391f4:	strb	r3, [r0]
   391f8:	mov	r0, r8
   391fc:	add	sp, sp, #16
   39200:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39204:	ldr	r3, [sp, #12]
   39208:	b	391a4 <__assert_fail@plt+0x25ca0>
   3920c:	andeq	r4, r0, r8, lsl #14
   39210:	ldrdeq	sl, [r0], -r8
   39214:	push	{r4, r5, r6, r7, lr}
   39218:	subs	r7, r0, #0
   3921c:	sub	sp, sp, #12
   39220:	mov	r4, r1
   39224:	mov	r5, r2
   39228:	mov	r6, r3
   3922c:	beq	39254 <__assert_fail@plt+0x25d50>
   39230:	mov	r0, r1
   39234:	ldr	r3, [r7, #68]	; 0x44
   39238:	mov	r1, r2
   3923c:	mov	r2, r6
   39240:	blx	r3
   39244:	cmp	r0, #0
   39248:	beq	39254 <__assert_fail@plt+0x25d50>
   3924c:	add	sp, sp, #12
   39250:	pop	{r4, r5, r6, r7, pc}
   39254:	cmp	r4, #6
   39258:	ble	392b0 <__assert_fail@plt+0x25dac>
   3925c:	sub	r3, r4, #13
   39260:	ldr	ip, [pc, #188]	; 39324 <__assert_fail@plt+0x25e20>
   39264:	cmp	r3, #2
   39268:	add	ip, pc, ip
   3926c:	bls	3928c <__assert_fail@plt+0x25d88>
   39270:	cmp	r4, #10
   39274:	beq	392f8 <__assert_fail@plt+0x25df4>
   39278:	sub	r3, r4, #10
   3927c:	cmp	r3, #2
   39280:	bhi	392c0 <__assert_fail@plt+0x25dbc>
   39284:	ldr	ip, [pc, #156]	; 39328 <__assert_fail@plt+0x25e24>
   39288:	add	ip, pc, ip
   3928c:	str	r3, [sp, #4]
   39290:	mov	r1, r6
   39294:	mov	r0, r5
   39298:	mov	r2, #1
   3929c:	mvn	r3, #0
   392a0:	str	ip, [sp]
   392a4:	bl	134ec <__snprintf_chk@plt>
   392a8:	mov	r0, r5
   392ac:	b	3924c <__assert_fail@plt+0x25d48>
   392b0:	ldr	r3, [pc, #116]	; 3932c <__assert_fail@plt+0x25e28>
   392b4:	add	r3, pc, r3
   392b8:	ldr	r0, [r3, r4, lsl #2]
   392bc:	b	3924c <__assert_fail@plt+0x25d48>
   392c0:	ldr	r1, [pc, #104]	; 39330 <__assert_fail@plt+0x25e2c>
   392c4:	mov	r2, #5
   392c8:	mov	r0, #0
   392cc:	add	r1, pc, r1
   392d0:	bl	12d84 <dcgettext@plt>
   392d4:	str	r4, [sp, #4]
   392d8:	mov	r1, r6
   392dc:	mov	r2, #1
   392e0:	mvn	r3, #0
   392e4:	str	r0, [sp]
   392e8:	mov	r0, r5
   392ec:	bl	134ec <__snprintf_chk@plt>
   392f0:	mov	r0, r5
   392f4:	b	3924c <__assert_fail@plt+0x25d48>
   392f8:	ldr	r0, [r7, #16]
   392fc:	mov	r1, #0
   39300:	bl	12d60 <elf_getident@plt>
   39304:	cmp	r0, #0
   39308:	beq	39278 <__assert_fail@plt+0x25d74>
   3930c:	ldrb	r3, [r0, #7]
   39310:	cmp	r3, #3
   39314:	bne	39278 <__assert_fail@plt+0x25d74>
   39318:	ldr	r0, [pc, #20]	; 39334 <__assert_fail@plt+0x25e30>
   3931c:	add	r0, pc, r0
   39320:	b	3924c <__assert_fail@plt+0x25d48>
   39324:	andeq	sp, r0, r0, lsl #11
   39328:	andeq	sp, r0, r8, asr r5
   3932c:	andeq	pc, r1, r8, asr #18
   39330:	andeq	sp, r0, r4, lsl #13
   39334:	andeq	sp, r0, r8, lsr #12
   39338:	cmp	r0, #0
   3933c:	push	{r4, r5, lr}
   39340:	mov	r4, r2
   39344:	sub	sp, sp, #20
   39348:	mov	r5, r3
   3934c:	beq	39378 <__assert_fail@plt+0x25e74>
   39350:	ldr	ip, [r0, #76]	; 0x4c
   39354:	mov	r1, r3
   39358:	mov	r0, r2
   3935c:	ldr	r3, [sp, #36]	; 0x24
   39360:	ldr	r2, [sp, #32]
   39364:	blx	ip
   39368:	cmp	r0, #0
   3936c:	beq	39378 <__assert_fail@plt+0x25e74>
   39370:	add	sp, sp, #20
   39374:	pop	{r4, r5, pc}
   39378:	cmp	r5, #0
   3937c:	cmpeq	r4, #34	; 0x22
   39380:	bls	39454 <__assert_fail@plt+0x25f50>
   39384:	mvn	r2, #-1879048177	; 0x9000000f
   39388:	mov	r3, #0
   3938c:	cmp	r5, r3
   39390:	cmpeq	r4, r2
   39394:	beq	3948c <__assert_fail@plt+0x25f88>
   39398:	movw	r2, #523	; 0x20b
   3939c:	movt	r2, #36864	; 0x9000
   393a0:	adds	r2, r2, r4
   393a4:	mvn	r3, #0
   393a8:	adc	r3, r3, r5
   393ac:	cmp	r3, #0
   393b0:	cmpeq	r2, #10
   393b4:	bls	39478 <__assert_fail@plt+0x25f74>
   393b8:	movw	r2, #267	; 0x10b
   393bc:	movt	r2, #36864	; 0x9000
   393c0:	adds	r2, r2, r4
   393c4:	mvn	r3, #0
   393c8:	adc	r3, r3, r5
   393cc:	cmp	r3, #0
   393d0:	cmpeq	r2, #10
   393d4:	bls	39464 <__assert_fail@plt+0x25f60>
   393d8:	adds	r2, r4, #-1879048185	; 0x90000007
   393dc:	sbc	r3, r5, #0
   393e0:	cmp	r3, #0
   393e4:	cmpeq	r2, #6
   393e8:	bls	39498 <__assert_fail@plt+0x25f94>
   393ec:	mvn	r2, #-2147483646	; 0x80000002
   393f0:	mov	r3, #0
   393f4:	cmp	r5, r3
   393f8:	cmpeq	r4, r2
   393fc:	beq	394ac <__assert_fail@plt+0x25fa8>
   39400:	mvn	r2, #-2147483648	; 0x80000000
   39404:	mov	r3, #0
   39408:	ldr	r0, [pc, #168]	; 394b8 <__assert_fail@plt+0x25fb4>
   3940c:	cmp	r5, r3
   39410:	cmpeq	r4, r2
   39414:	add	r0, pc, r0
   39418:	beq	39370 <__assert_fail@plt+0x25e6c>
   3941c:	ldr	r1, [pc, #152]	; 394bc <__assert_fail@plt+0x25fb8>
   39420:	mov	r2, #5
   39424:	mov	r0, #0
   39428:	add	r1, pc, r1
   3942c:	bl	12d84 <dcgettext@plt>
   39430:	strd	r4, [sp, #8]
   39434:	ldr	r1, [sp, #36]	; 0x24
   39438:	mov	r2, #1
   3943c:	mvn	r3, #0
   39440:	str	r0, [sp]
   39444:	ldr	r0, [sp, #32]
   39448:	bl	134ec <__snprintf_chk@plt>
   3944c:	ldr	r0, [sp, #32]
   39450:	b	39370 <__assert_fail@plt+0x25e6c>
   39454:	ldr	r3, [pc, #100]	; 394c0 <__assert_fail@plt+0x25fbc>
   39458:	add	r3, pc, r3
   3945c:	ldr	r0, [r3, r4, lsl #2]
   39460:	b	39370 <__assert_fail@plt+0x25e6c>
   39464:	ldr	r3, [pc, #88]	; 394c4 <__assert_fail@plt+0x25fc0>
   39468:	add	r3, pc, r3
   3946c:	add	r2, r3, r2, lsl #2
   39470:	ldr	r0, [r2, #184]	; 0xb8
   39474:	b	39370 <__assert_fail@plt+0x25e6c>
   39478:	ldr	r3, [pc, #72]	; 394c8 <__assert_fail@plt+0x25fc4>
   3947c:	add	r3, pc, r3
   39480:	add	r2, r3, r2, lsl #2
   39484:	ldr	r0, [r2, #140]	; 0x8c
   39488:	b	39370 <__assert_fail@plt+0x25e6c>
   3948c:	ldr	r0, [pc, #56]	; 394cc <__assert_fail@plt+0x25fc8>
   39490:	add	r0, pc, r0
   39494:	b	39370 <__assert_fail@plt+0x25e6c>
   39498:	ldr	r3, [pc, #48]	; 394d0 <__assert_fail@plt+0x25fcc>
   3949c:	add	r3, pc, r3
   394a0:	add	r2, r3, r2, lsl #2
   394a4:	ldr	r0, [r2, #228]	; 0xe4
   394a8:	b	39370 <__assert_fail@plt+0x25e6c>
   394ac:	ldr	r0, [pc, #32]	; 394d4 <__assert_fail@plt+0x25fd0>
   394b0:	add	r0, pc, r0
   394b4:	b	39370 <__assert_fail@plt+0x25e6c>
   394b8:	andeq	sp, r0, r0, lsl #11
   394bc:	andeq	sp, r0, r4, ror r5
   394c0:	andeq	pc, r1, r0, asr #15
   394c4:			; <UNDEFINED> instruction: 0x0001f7b0
   394c8:	muleq	r1, ip, r7
   394cc:	strdeq	sp, [r0], -r0
   394d0:	andeq	pc, r1, ip, ror r7	; <UNPREDICTABLE>
   394d4:	ldrdeq	sp, [r0], -r8
   394d8:	cmp	r0, #0
   394dc:	push	{r4, r5, r6, lr}
   394e0:	mov	r4, r1
   394e4:	sub	sp, sp, #16
   394e8:	mov	r6, r2
   394ec:	mov	r5, r3
   394f0:	beq	3951c <__assert_fail@plt+0x26018>
   394f4:	ldr	ip, [r0, #48]	; 0x30
   394f8:	mov	r0, r1
   394fc:	mov	r1, r2
   39500:	mov	r2, r3
   39504:	ldr	r3, [sp, #32]
   39508:	blx	ip
   3950c:	cmp	r0, #0
   39510:	beq	3951c <__assert_fail@plt+0x26018>
   39514:	add	sp, sp, #16
   39518:	pop	{r4, r5, r6, pc}
   3951c:	cmp	r4, #0
   39520:	beq	395c8 <__assert_fail@plt+0x260c4>
   39524:	movw	r3, #65521	; 0xfff1
   39528:	cmp	r4, r3
   3952c:	beq	39600 <__assert_fail@plt+0x260fc>
   39530:	add	r3, r3, #1
   39534:	cmp	r4, r3
   39538:	beq	3960c <__assert_fail@plt+0x26108>
   3953c:	cmp	r4, #65280	; 0xff00
   39540:	beq	39618 <__assert_fail@plt+0x26114>
   39544:	movw	r3, #65281	; 0xff01
   39548:	cmp	r4, r3
   3954c:	beq	39624 <__assert_fail@plt+0x26120>
   39550:	movw	r2, #65535	; 0xffff
   39554:	subs	r1, r4, r2
   39558:	rsbs	r3, r1, #0
   3955c:	adcs	r3, r3, r1
   39560:	cmp	r4, #65280	; 0xff00
   39564:	movge	r1, r3
   39568:	orrlt	r1, r3, #1
   3956c:	cmp	r1, #0
   39570:	bne	395d8 <__assert_fail@plt+0x260d4>
   39574:	sub	r3, r4, #65280	; 0xff00
   39578:	sub	r2, r3, #32
   3957c:	cmp	r2, #31
   39580:	bls	39670 <__assert_fail@plt+0x2616c>
   39584:	ldr	ip, [pc, #336]	; 396dc <__assert_fail@plt+0x261d8>
   39588:	cmp	r3, #31
   3958c:	add	ip, pc, ip
   39590:	bls	395a4 <__assert_fail@plt+0x260a0>
   39594:	cmp	r3, #255	; 0xff
   39598:	bhi	39684 <__assert_fail@plt+0x26180>
   3959c:	ldr	ip, [pc, #316]	; 396e0 <__assert_fail@plt+0x261dc>
   395a0:	add	ip, pc, ip
   395a4:	mov	r0, r5
   395a8:	str	r3, [sp, #4]
   395ac:	ldr	r1, [sp, #32]
   395b0:	mov	r2, #1
   395b4:	mvn	r3, #0
   395b8:	str	ip, [sp]
   395bc:	bl	134ec <__snprintf_chk@plt>
   395c0:	mov	r0, r5
   395c4:	b	39514 <__assert_fail@plt+0x26010>
   395c8:	ldr	r0, [pc, #276]	; 396e4 <__assert_fail@plt+0x261e0>
   395cc:	add	r0, pc, r0
   395d0:	add	sp, sp, #16
   395d4:	pop	{r4, r5, r6, pc}
   395d8:	ldr	r1, [sp, #40]	; 0x28
   395dc:	cmp	r4, r1
   395e0:	bcs	39630 <__assert_fail@plt+0x2612c>
   395e4:	cmp	r4, r2
   395e8:	ldr	r3, [sp, #36]	; 0x24
   395ec:	moveq	r4, r6
   395f0:	cmp	r3, #0
   395f4:	beq	396c8 <__assert_fail@plt+0x261c4>
   395f8:	ldr	r0, [r3, r4, lsl #2]
   395fc:	b	39514 <__assert_fail@plt+0x26010>
   39600:	ldr	r0, [pc, #224]	; 396e8 <__assert_fail@plt+0x261e4>
   39604:	add	r0, pc, r0
   39608:	b	39514 <__assert_fail@plt+0x26010>
   3960c:	ldr	r0, [pc, #216]	; 396ec <__assert_fail@plt+0x261e8>
   39610:	add	r0, pc, r0
   39614:	b	39514 <__assert_fail@plt+0x26010>
   39618:	ldr	r0, [pc, #208]	; 396f0 <__assert_fail@plt+0x261ec>
   3961c:	add	r0, pc, r0
   39620:	b	39514 <__assert_fail@plt+0x26010>
   39624:	ldr	r0, [pc, #200]	; 396f4 <__assert_fail@plt+0x261f0>
   39628:	add	r0, pc, r0
   3962c:	b	39514 <__assert_fail@plt+0x26010>
   39630:	cmp	r3, #0
   39634:	beq	39574 <__assert_fail@plt+0x26070>
   39638:	ldr	r3, [pc, #184]	; 396f8 <__assert_fail@plt+0x261f4>
   3963c:	mov	r0, r5
   39640:	ldr	ip, [pc, #180]	; 396fc <__assert_fail@plt+0x261f8>
   39644:	mov	r2, #1
   39648:	add	r3, pc, r3
   3964c:	ldr	r1, [sp, #32]
   39650:	add	ip, pc, ip
   39654:	str	r3, [sp]
   39658:	str	r6, [sp, #8]
   3965c:	mvn	r3, #0
   39660:	str	ip, [sp, #4]
   39664:	bl	134ec <__snprintf_chk@plt>
   39668:	mov	r0, r5
   3966c:	b	39514 <__assert_fail@plt+0x26010>
   39670:	ldr	ip, [pc, #136]	; 39700 <__assert_fail@plt+0x261fc>
   39674:	mov	r0, r5
   39678:	str	r2, [sp, #4]
   3967c:	add	ip, pc, ip
   39680:	b	395ac <__assert_fail@plt+0x260a8>
   39684:	ldr	r1, [pc, #120]	; 39704 <__assert_fail@plt+0x26200>
   39688:	mov	r2, #5
   3968c:	mov	r0, #0
   39690:	add	r1, pc, r1
   39694:	bl	12d84 <dcgettext@plt>
   39698:	ldr	ip, [pc, #104]	; 39708 <__assert_fail@plt+0x26204>
   3969c:	str	r4, [sp, #8]
   396a0:	mov	r2, #1
   396a4:	add	ip, pc, ip
   396a8:	ldr	r1, [sp, #32]
   396ac:	mvn	r3, #0
   396b0:	str	ip, [sp]
   396b4:	str	r0, [sp, #4]
   396b8:	mov	r0, r5
   396bc:	bl	134ec <__snprintf_chk@plt>
   396c0:	mov	r0, r5
   396c4:	b	39514 <__assert_fail@plt+0x26010>
   396c8:	ldr	ip, [pc, #60]	; 3970c <__assert_fail@plt+0x26208>
   396cc:	mov	r0, r5
   396d0:	str	r4, [sp, #4]
   396d4:	add	ip, pc, ip
   396d8:	b	395ac <__assert_fail@plt+0x260a8>
   396dc:	andeq	sp, r0, r4, ror #5
   396e0:	andeq	sp, r0, r0, lsr #12
   396e4:	ldrdeq	sp, [r0], -r0
   396e8:	andeq	sp, r0, r0, lsr #11
   396ec:	andeq	sp, r0, r8, ror #6
   396f0:	andeq	sp, r0, ip, lsl #11
   396f4:	andeq	sp, r0, r8, lsl #11
   396f8:	andeq	sp, r0, ip, lsr #3
   396fc:	andeq	sp, r0, r8, ror #10
   39700:	andeq	sp, r0, r8, ror #3
   39704:	andeq	r6, r0, r0, lsl #12
   39708:	andeq	sp, r0, r0, asr r1
   3970c:	andeq	sp, r0, r4, lsr #2
   39710:	push	{r4, r5, r6, r7, lr}
   39714:	subs	r7, r0, #0
   39718:	sub	sp, sp, #12
   3971c:	mov	r4, r1
   39720:	mov	r5, r2
   39724:	mov	r6, r3
   39728:	beq	39750 <__assert_fail@plt+0x2624c>
   3972c:	mov	r0, r1
   39730:	ldr	r3, [r7, #68]	; 0x44
   39734:	mov	r1, r2
   39738:	mov	r2, r6
   3973c:	blx	r3
   39740:	cmp	r0, #0
   39744:	beq	39750 <__assert_fail@plt+0x2624c>
   39748:	add	sp, sp, #12
   3974c:	pop	{r4, r5, r6, r7, pc}
   39750:	cmp	r4, #2
   39754:	ble	397ac <__assert_fail@plt+0x262a8>
   39758:	sub	r3, r4, #13
   3975c:	ldr	ip, [pc, #188]	; 39820 <__assert_fail@plt+0x2631c>
   39760:	cmp	r3, #2
   39764:	add	ip, pc, ip
   39768:	bls	39788 <__assert_fail@plt+0x26284>
   3976c:	cmp	r4, #10
   39770:	beq	397f4 <__assert_fail@plt+0x262f0>
   39774:	sub	r3, r4, #10
   39778:	cmp	r3, #2
   3977c:	bhi	397bc <__assert_fail@plt+0x262b8>
   39780:	ldr	ip, [pc, #156]	; 39824 <__assert_fail@plt+0x26320>
   39784:	add	ip, pc, ip
   39788:	str	r3, [sp, #4]
   3978c:	mov	r1, r6
   39790:	mov	r0, r5
   39794:	mov	r2, #1
   39798:	mvn	r3, #0
   3979c:	str	ip, [sp]
   397a0:	bl	134ec <__snprintf_chk@plt>
   397a4:	mov	r0, r5
   397a8:	b	39748 <__assert_fail@plt+0x26244>
   397ac:	ldr	r3, [pc, #116]	; 39828 <__assert_fail@plt+0x26324>
   397b0:	add	r3, pc, r3
   397b4:	ldr	r0, [r3, r4, lsl #2]
   397b8:	b	39748 <__assert_fail@plt+0x26244>
   397bc:	ldr	r1, [pc, #104]	; 3982c <__assert_fail@plt+0x26328>
   397c0:	mov	r2, #5
   397c4:	mov	r0, #0
   397c8:	add	r1, pc, r1
   397cc:	bl	12d84 <dcgettext@plt>
   397d0:	str	r4, [sp, #4]
   397d4:	mov	r1, r6
   397d8:	mov	r2, #1
   397dc:	mvn	r3, #0
   397e0:	str	r0, [sp]
   397e4:	mov	r0, r5
   397e8:	bl	134ec <__snprintf_chk@plt>
   397ec:	mov	r0, r5
   397f0:	b	39748 <__assert_fail@plt+0x26244>
   397f4:	ldr	r0, [r7, #16]
   397f8:	mov	r1, #0
   397fc:	bl	12d60 <elf_getident@plt>
   39800:	cmp	r0, #0
   39804:	beq	39774 <__assert_fail@plt+0x26270>
   39808:	ldrb	r3, [r0, #7]
   3980c:	cmp	r3, #3
   39810:	bne	39774 <__assert_fail@plt+0x26270>
   39814:	ldr	r0, [pc, #20]	; 39830 <__assert_fail@plt+0x2632c>
   39818:	add	r0, pc, r0
   3981c:	b	39748 <__assert_fail@plt+0x26244>
   39820:	andeq	sp, r0, r4, lsl #1
   39824:	andeq	sp, r0, ip, asr r0
   39828:	andeq	pc, r1, r8, ror #10
   3982c:	andeq	sp, r0, r8, lsl #3
   39830:			; <UNDEFINED> instruction: 0x0000d3b8
   39834:	cmp	r0, #0
   39838:	push	{r4, r5, r6, lr}
   3983c:	mov	r4, r1
   39840:	sub	sp, sp, #16
   39844:	mov	r5, r2
   39848:	mov	r6, r3
   3984c:	beq	39874 <__assert_fail@plt+0x26370>
   39850:	ldr	r3, [r0, #84]	; 0x54
   39854:	mov	r0, r1
   39858:	mov	r1, r2
   3985c:	mov	r2, r6
   39860:	blx	r3
   39864:	cmp	r0, #0
   39868:	beq	39874 <__assert_fail@plt+0x26370>
   3986c:	add	sp, sp, #16
   39870:	pop	{r4, r5, r6, pc}
   39874:	cmp	r4, #0
   39878:	beq	39920 <__assert_fail@plt+0x2641c>
   3987c:	cmp	r4, #1
   39880:	beq	3993c <__assert_fail@plt+0x26438>
   39884:	cmp	r4, #2
   39888:	beq	39948 <__assert_fail@plt+0x26444>
   3988c:	cmp	r4, #3
   39890:	beq	39954 <__assert_fail@plt+0x26450>
   39894:	cmp	r4, #6
   39898:	beq	39960 <__assert_fail@plt+0x2645c>
   3989c:	cmp	r4, #7
   398a0:	beq	39930 <__assert_fail@plt+0x2642c>
   398a4:	cmp	r4, #8
   398a8:	beq	3996c <__assert_fail@plt+0x26468>
   398ac:	cmp	r4, #9
   398b0:	beq	39978 <__assert_fail@plt+0x26474>
   398b4:	cmp	r4, #10
   398b8:	beq	39984 <__assert_fail@plt+0x26480>
   398bc:	cmp	r4, #11
   398c0:	beq	39990 <__assert_fail@plt+0x2648c>
   398c4:	cmp	r4, #12
   398c8:	beq	3999c <__assert_fail@plt+0x26498>
   398cc:	cmp	r4, #97	; 0x61
   398d0:	beq	399a8 <__assert_fail@plt+0x264a4>
   398d4:	cmp	r4, #255	; 0xff
   398d8:	mov	r0, #0
   398dc:	beq	399b4 <__assert_fail@plt+0x264b0>
   398e0:	ldr	r1, [pc, #228]	; 399cc <__assert_fail@plt+0x264c8>
   398e4:	mov	r2, #5
   398e8:	add	r1, pc, r1
   398ec:	bl	12d84 <dcgettext@plt>
   398f0:	ldr	ip, [pc, #216]	; 399d0 <__assert_fail@plt+0x264cc>
   398f4:	str	r4, [sp, #8]
   398f8:	mov	r1, r6
   398fc:	add	ip, pc, ip
   39900:	mov	r2, #1
   39904:	mvn	r3, #0
   39908:	str	ip, [sp]
   3990c:	str	r0, [sp, #4]
   39910:	mov	r0, r5
   39914:	bl	134ec <__snprintf_chk@plt>
   39918:	mov	r0, r5
   3991c:	b	3986c <__assert_fail@plt+0x26368>
   39920:	ldr	r0, [pc, #172]	; 399d4 <__assert_fail@plt+0x264d0>
   39924:	add	r0, pc, r0
   39928:	add	sp, sp, #16
   3992c:	pop	{r4, r5, r6, pc}
   39930:	ldr	r0, [pc, #160]	; 399d8 <__assert_fail@plt+0x264d4>
   39934:	add	r0, pc, r0
   39938:	b	3986c <__assert_fail@plt+0x26368>
   3993c:	ldr	r0, [pc, #152]	; 399dc <__assert_fail@plt+0x264d8>
   39940:	add	r0, pc, r0
   39944:	b	3986c <__assert_fail@plt+0x26368>
   39948:	ldr	r0, [pc, #144]	; 399e0 <__assert_fail@plt+0x264dc>
   3994c:	add	r0, pc, r0
   39950:	b	3986c <__assert_fail@plt+0x26368>
   39954:	ldr	r0, [pc, #136]	; 399e4 <__assert_fail@plt+0x264e0>
   39958:	add	r0, pc, r0
   3995c:	b	3986c <__assert_fail@plt+0x26368>
   39960:	ldr	r0, [pc, #128]	; 399e8 <__assert_fail@plt+0x264e4>
   39964:	add	r0, pc, r0
   39968:	b	3986c <__assert_fail@plt+0x26368>
   3996c:	ldr	r0, [pc, #120]	; 399ec <__assert_fail@plt+0x264e8>
   39970:	add	r0, pc, r0
   39974:	b	3986c <__assert_fail@plt+0x26368>
   39978:	ldr	r0, [pc, #112]	; 399f0 <__assert_fail@plt+0x264ec>
   3997c:	add	r0, pc, r0
   39980:	b	3986c <__assert_fail@plt+0x26368>
   39984:	ldr	r0, [pc, #104]	; 399f4 <__assert_fail@plt+0x264f0>
   39988:	add	r0, pc, r0
   3998c:	b	3986c <__assert_fail@plt+0x26368>
   39990:	ldr	r0, [pc, #96]	; 399f8 <__assert_fail@plt+0x264f4>
   39994:	add	r0, pc, r0
   39998:	b	3986c <__assert_fail@plt+0x26368>
   3999c:	ldr	r0, [pc, #88]	; 399fc <__assert_fail@plt+0x264f8>
   399a0:	add	r0, pc, r0
   399a4:	b	3986c <__assert_fail@plt+0x26368>
   399a8:	ldr	r0, [pc, #80]	; 39a00 <__assert_fail@plt+0x264fc>
   399ac:	add	r0, pc, r0
   399b0:	b	3986c <__assert_fail@plt+0x26368>
   399b4:	ldr	r1, [pc, #72]	; 39a04 <__assert_fail@plt+0x26500>
   399b8:	mov	r2, #5
   399bc:	add	r1, pc, r1
   399c0:	add	sp, sp, #16
   399c4:	pop	{r4, r5, r6, lr}
   399c8:	b	12d84 <dcgettext@plt>
   399cc:	andeq	r6, r0, r8, lsr #7
   399d0:	strdeq	ip, [r0], -r8
   399d4:	andeq	sp, r0, r8, asr #5
   399d8:	andeq	sp, r0, r8, ror #5
   399dc:			; <UNDEFINED> instruction: 0x0000d2bc
   399e0:			; <UNDEFINED> instruction: 0x0000d2b8
   399e4:			; <UNDEFINED> instruction: 0x0000d2b4
   399e8:			; <UNDEFINED> instruction: 0x0000d2b0
   399ec:			; <UNDEFINED> instruction: 0x0000d2b0
   399f0:	andeq	sp, r0, ip, lsr #5
   399f4:	andeq	sp, r0, r8, lsr #5
   399f8:	andeq	sp, r0, r4, lsr #5
   399fc:	andeq	sp, r0, r0, lsr #5
   39a00:	muleq	r0, ip, r2
   39a04:	muleq	r0, r0, r2
   39a08:	cmp	r0, #0
   39a0c:	push	{r3, lr}
   39a10:	popeq	{r3, pc}
   39a14:	ldr	r3, [r0, #24]
   39a18:	mov	r0, r1
   39a1c:	blx	r3
   39a20:	pop	{r3, pc}
   39a24:	push	{r4, r5, r6, lr}
   39a28:	mov	r4, r1
   39a2c:	mov	r6, r3
   39a30:	mov	r1, r2
   39a34:	ldr	r3, [r0, #88]	; 0x58
   39a38:	sub	sp, sp, #16
   39a3c:	mov	r5, r2
   39a40:	mov	r0, r4
   39a44:	mov	r2, r6
   39a48:	blx	r3
   39a4c:	cmp	r0, #0
   39a50:	beq	39a5c <__assert_fail@plt+0x26558>
   39a54:	add	sp, sp, #16
   39a58:	pop	{r4, r5, r6, pc}
   39a5c:	cmp	r4, #20
   39a60:	bls	39ab8 <__assert_fail@plt+0x265b4>
   39a64:	cmp	r4, #772	; 0x304
   39a68:	beq	39c9c <__assert_fail@plt+0x26798>
   39a6c:	bhi	39ad0 <__assert_fail@plt+0x265cc>
   39a70:	movw	r3, #513	; 0x201
   39a74:	cmp	r4, r3
   39a78:	beq	39c90 <__assert_fail@plt+0x2678c>
   39a7c:	bls	39ba0 <__assert_fail@plt+0x2669c>
   39a80:	movw	r3, #769	; 0x301
   39a84:	cmp	r4, r3
   39a88:	beq	39c84 <__assert_fail@plt+0x26780>
   39a8c:	bhi	39c58 <__assert_fail@plt+0x26754>
   39a90:	movw	r3, #514	; 0x202
   39a94:	ldr	r0, [pc, #572]	; 39cd8 <__assert_fail@plt+0x267d4>
   39a98:	cmp	r4, r3
   39a9c:	add	r0, pc, r0
   39aa0:	beq	39a54 <__assert_fail@plt+0x26550>
   39aa4:	ldr	r0, [pc, #560]	; 39cdc <__assert_fail@plt+0x267d8>
   39aa8:	cmp	r4, #768	; 0x300
   39aac:	add	r0, pc, r0
   39ab0:	beq	39a54 <__assert_fail@plt+0x26550>
   39ab4:	b	39b1c <__assert_fail@plt+0x26618>
   39ab8:	ldr	r3, [pc, #544]	; 39ce0 <__assert_fail@plt+0x267dc>
   39abc:	add	r3, pc, r3
   39ac0:	ldr	r0, [r3, r4, lsl #2]
   39ac4:	cmp	r0, #0
   39ac8:	bne	39a54 <__assert_fail@plt+0x26550>
   39acc:	b	39a64 <__assert_fail@plt+0x26560>
   39ad0:	movw	r3, #1026	; 0x402
   39ad4:	cmp	r4, r3
   39ad8:	beq	39cc0 <__assert_fail@plt+0x267bc>
   39adc:	bhi	39b60 <__assert_fail@plt+0x2665c>
   39ae0:	movw	r3, #775	; 0x307
   39ae4:	cmp	r4, r3
   39ae8:	beq	39ca8 <__assert_fail@plt+0x267a4>
   39aec:	cmp	r4, #776	; 0x308
   39af0:	bcs	39c0c <__assert_fail@plt+0x26708>
   39af4:	movw	r3, #773	; 0x305
   39af8:	ldr	r0, [pc, #484]	; 39ce4 <__assert_fail@plt+0x267e0>
   39afc:	cmp	r4, r3
   39b00:	add	r0, pc, r0
   39b04:	beq	39a54 <__assert_fail@plt+0x26550>
   39b08:	add	r3, r3, #1
   39b0c:	ldr	r0, [pc, #468]	; 39ce8 <__assert_fail@plt+0x267e4>
   39b10:	cmp	r4, r3
   39b14:	add	r0, pc, r0
   39b18:	beq	39a54 <__assert_fail@plt+0x26550>
   39b1c:	ldr	r1, [pc, #456]	; 39cec <__assert_fail@plt+0x267e8>
   39b20:	mov	r2, #5
   39b24:	mov	r0, #0
   39b28:	add	r1, pc, r1
   39b2c:	bl	12d84 <dcgettext@plt>
   39b30:	ldr	ip, [pc, #440]	; 39cf0 <__assert_fail@plt+0x267ec>
   39b34:	str	r4, [sp, #8]
   39b38:	mov	r1, r6
   39b3c:	add	ip, pc, ip
   39b40:	mov	r2, #1
   39b44:	mvn	r3, #0
   39b48:	str	ip, [sp]
   39b4c:	str	r0, [sp, #4]
   39b50:	mov	r0, r5
   39b54:	bl	134ec <__snprintf_chk@plt>
   39b58:	mov	r0, r5
   39b5c:	b	39a54 <__assert_fail@plt+0x26550>
   39b60:	movw	r3, #19525	; 0x4c45
   39b64:	movt	r3, #17993	; 0x4649
   39b68:	cmp	r4, r3
   39b6c:	beq	39ccc <__assert_fail@plt+0x267c8>
   39b70:	bhi	39bd8 <__assert_fail@plt+0x266d4>
   39b74:	movw	r3, #1027	; 0x403
   39b78:	ldr	r0, [pc, #372]	; 39cf4 <__assert_fail@plt+0x267f0>
   39b7c:	cmp	r4, r3
   39b80:	add	r0, pc, r0
   39b84:	beq	39a54 <__assert_fail@plt+0x26550>
   39b88:	add	r3, r3, #1
   39b8c:	ldr	r0, [pc, #356]	; 39cf8 <__assert_fail@plt+0x267f4>
   39b90:	cmp	r4, r3
   39b94:	add	r0, pc, r0
   39b98:	beq	39a54 <__assert_fail@plt+0x26550>
   39b9c:	b	39b1c <__assert_fail@plt+0x26618>
   39ba0:	movw	r3, #258	; 0x102
   39ba4:	cmp	r4, r3
   39ba8:	beq	39cb4 <__assert_fail@plt+0x267b0>
   39bac:	bhi	39c34 <__assert_fail@plt+0x26730>
   39bb0:	ldr	r0, [pc, #324]	; 39cfc <__assert_fail@plt+0x267f8>
   39bb4:	cmp	r4, #256	; 0x100
   39bb8:	add	r0, pc, r0
   39bbc:	beq	39a54 <__assert_fail@plt+0x26550>
   39bc0:	movw	r3, #257	; 0x101
   39bc4:	ldr	r0, [pc, #308]	; 39d00 <__assert_fail@plt+0x267fc>
   39bc8:	cmp	r4, r3
   39bcc:	add	r0, pc, r0
   39bd0:	beq	39a54 <__assert_fail@plt+0x26550>
   39bd4:	b	39b1c <__assert_fail@plt+0x26618>
   39bd8:	movw	r3, #11135	; 0x2b7f
   39bdc:	movt	r3, #18150	; 0x46e6
   39be0:	ldr	r0, [pc, #284]	; 39d04 <__assert_fail@plt+0x26800>
   39be4:	cmp	r4, r3
   39be8:	add	r0, pc, r0
   39bec:	beq	39a54 <__assert_fail@plt+0x26550>
   39bf0:	movw	r3, #18249	; 0x4749
   39bf4:	movt	r3, #21321	; 0x5349
   39bf8:	ldr	r0, [pc, #264]	; 39d08 <__assert_fail@plt+0x26804>
   39bfc:	cmp	r4, r3
   39c00:	add	r0, pc, r0
   39c04:	beq	39a54 <__assert_fail@plt+0x26550>
   39c08:	b	39b1c <__assert_fail@plt+0x26618>
   39c0c:	ldr	r0, [pc, #248]	; 39d0c <__assert_fail@plt+0x26808>
   39c10:	cmp	r4, #1024	; 0x400
   39c14:	add	r0, pc, r0
   39c18:	beq	39a54 <__assert_fail@plt+0x26550>
   39c1c:	movw	r3, #1025	; 0x401
   39c20:	ldr	r0, [pc, #232]	; 39d10 <__assert_fail@plt+0x2680c>
   39c24:	cmp	r4, r3
   39c28:	add	r0, pc, r0
   39c2c:	beq	39a54 <__assert_fail@plt+0x26550>
   39c30:	b	39b1c <__assert_fail@plt+0x26618>
   39c34:	ldr	r0, [pc, #216]	; 39d14 <__assert_fail@plt+0x26810>
   39c38:	cmp	r4, #268	; 0x10c
   39c3c:	add	r0, pc, r0
   39c40:	beq	39a54 <__assert_fail@plt+0x26550>
   39c44:	ldr	r0, [pc, #204]	; 39d18 <__assert_fail@plt+0x26814>
   39c48:	cmp	r4, #512	; 0x200
   39c4c:	add	r0, pc, r0
   39c50:	beq	39a54 <__assert_fail@plt+0x26550>
   39c54:	b	39b1c <__assert_fail@plt+0x26618>
   39c58:	movw	r3, #770	; 0x302
   39c5c:	ldr	r0, [pc, #184]	; 39d1c <__assert_fail@plt+0x26818>
   39c60:	cmp	r4, r3
   39c64:	add	r0, pc, r0
   39c68:	beq	39a54 <__assert_fail@plt+0x26550>
   39c6c:	add	r3, r3, #1
   39c70:	ldr	r0, [pc, #168]	; 39d20 <__assert_fail@plt+0x2681c>
   39c74:	cmp	r4, r3
   39c78:	add	r0, pc, r0
   39c7c:	beq	39a54 <__assert_fail@plt+0x26550>
   39c80:	b	39b1c <__assert_fail@plt+0x26618>
   39c84:	ldr	r0, [pc, #152]	; 39d24 <__assert_fail@plt+0x26820>
   39c88:	add	r0, pc, r0
   39c8c:	b	39a54 <__assert_fail@plt+0x26550>
   39c90:	ldr	r0, [pc, #144]	; 39d28 <__assert_fail@plt+0x26824>
   39c94:	add	r0, pc, r0
   39c98:	b	39a54 <__assert_fail@plt+0x26550>
   39c9c:	ldr	r0, [pc, #136]	; 39d2c <__assert_fail@plt+0x26828>
   39ca0:	add	r0, pc, r0
   39ca4:	b	39a54 <__assert_fail@plt+0x26550>
   39ca8:	ldr	r0, [pc, #128]	; 39d30 <__assert_fail@plt+0x2682c>
   39cac:	add	r0, pc, r0
   39cb0:	b	39a54 <__assert_fail@plt+0x26550>
   39cb4:	ldr	r0, [pc, #120]	; 39d34 <__assert_fail@plt+0x26830>
   39cb8:	add	r0, pc, r0
   39cbc:	b	39a54 <__assert_fail@plt+0x26550>
   39cc0:	ldr	r0, [pc, #112]	; 39d38 <__assert_fail@plt+0x26834>
   39cc4:	add	r0, pc, r0
   39cc8:	b	39a54 <__assert_fail@plt+0x26550>
   39ccc:	ldr	r0, [pc, #104]	; 39d3c <__assert_fail@plt+0x26838>
   39cd0:	add	r0, pc, r0
   39cd4:	b	39a54 <__assert_fail@plt+0x26550>
   39cd8:	andeq	sp, r0, r0, lsl #4
   39cdc:	strdeq	sp, [r0], -ip
   39ce0:	andeq	pc, r1, r8, ror #4
   39ce4:	andeq	sp, r0, ip, ror #3
   39ce8:	andeq	sp, r0, r4, ror #3
   39cec:	andeq	r6, r0, r8, ror #2
   39cf0:	andeq	sp, r0, r8, lsr #4
   39cf4:			; <UNDEFINED> instruction: 0x0000d1bc
   39cf8:			; <UNDEFINED> instruction: 0x0000d1b8
   39cfc:	andeq	sp, r0, ip, lsr #1
   39d00:	andeq	sp, r0, r0, lsr #1
   39d04:	andeq	sp, r0, r0, ror r0
   39d08:	andeq	sp, r0, ip, asr r1
   39d0c:	andeq	sp, r0, r8, lsl #2
   39d10:	strdeq	sp, [r0], -ip
   39d14:	andeq	sp, r0, r0, asr #32
   39d18:	andeq	sp, r0, ip, lsr r0
   39d1c:	andeq	sp, r0, r0, rrx
   39d20:	andeq	sp, r0, r8, asr r0
   39d24:	andeq	sp, r0, r0, lsr r0
   39d28:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   39d2c:	andeq	sp, r0, r0, asr #32
   39d30:	andeq	sp, r0, ip, asr r0
   39d34:			; <UNDEFINED> instruction: 0x0000cfbc
   39d38:	andeq	sp, r0, r8, rrx
   39d3c:	andeq	fp, r0, r0, asr r1
   39d40:	push	{r4, r5, r6, r7, r8, r9, lr}
   39d44:	sub	sp, sp, #20
   39d48:	mov	r4, r1
   39d4c:	ldr	ip, [r0, #92]	; 0x5c
   39d50:	ldr	r6, [sp, #48]	; 0x30
   39d54:	mov	r1, r2
   39d58:	ldr	r7, [sp, #52]	; 0x34
   39d5c:	mov	r5, r2
   39d60:	mov	r8, r3
   39d64:	mov	r0, r4
   39d68:	mov	r2, r6
   39d6c:	mov	r3, r7
   39d70:	blx	ip
   39d74:	cmp	r0, #0
   39d78:	beq	39d84 <__assert_fail@plt+0x26880>
   39d7c:	add	sp, sp, #20
   39d80:	pop	{r4, r5, r6, r7, r8, r9, pc}
   39d84:	ldr	r1, [pc, #464]	; 39f5c <__assert_fail@plt+0x26a58>
   39d88:	mov	r0, r4
   39d8c:	add	r1, pc, r1
   39d90:	bl	12cd0 <strcmp@plt>
   39d94:	cmp	r0, #0
   39d98:	beq	39eb4 <__assert_fail@plt+0x269b0>
   39d9c:	ldrb	r3, [r4]
   39da0:	cmp	r3, #71	; 0x47
   39da4:	beq	39ddc <__assert_fail@plt+0x268d8>
   39da8:	ldr	r1, [pc, #432]	; 39f60 <__assert_fail@plt+0x26a5c>
   39dac:	mov	r0, r4
   39db0:	mov	r2, #2
   39db4:	add	r1, pc, r1
   39db8:	bl	13468 <strncmp@plt>
   39dbc:	cmp	r0, #0
   39dc0:	beq	39ee0 <__assert_fail@plt+0x269dc>
   39dc4:	ldr	r0, [pc, #408]	; 39f64 <__assert_fail@plt+0x26a60>
   39dc8:	cmp	r5, #1
   39dcc:	cmpeq	r8, #0
   39dd0:	add	r0, pc, r0
   39dd4:	beq	39d7c <__assert_fail@plt+0x26878>
   39dd8:	b	39e70 <__assert_fail@plt+0x2696c>
   39ddc:	ldrb	r9, [r4, #1]
   39de0:	cmp	r9, #111	; 0x6f
   39de4:	beq	39e48 <__assert_fail@plt+0x26944>
   39de8:	ldr	r1, [pc, #376]	; 39f68 <__assert_fail@plt+0x26a64>
   39dec:	mov	r0, r4
   39df0:	mov	r2, #2
   39df4:	add	r1, pc, r1
   39df8:	bl	13468 <strncmp@plt>
   39dfc:	cmp	r0, #0
   39e00:	beq	39ee0 <__assert_fail@plt+0x269dc>
   39e04:	cmp	r9, #78	; 0x4e
   39e08:	bne	39dc4 <__assert_fail@plt+0x268c0>
   39e0c:	ldrb	r3, [r4, #2]
   39e10:	cmp	r3, #85	; 0x55
   39e14:	bne	39dc4 <__assert_fail@plt+0x268c0>
   39e18:	ldrb	r3, [r4, #3]
   39e1c:	cmp	r3, #0
   39e20:	bne	39dc4 <__assert_fail@plt+0x268c0>
   39e24:	cmp	r5, #5
   39e28:	bhi	39e70 <__assert_fail@plt+0x2696c>
   39e2c:	ldr	r3, [pc, #312]	; 39f6c <__assert_fail@plt+0x26a68>
   39e30:	add	r3, pc, r3
   39e34:	add	r3, r3, r5, lsl #2
   39e38:	ldr	r0, [r3, #20]
   39e3c:	cmp	r0, #0
   39e40:	bne	39d7c <__assert_fail@plt+0x26878>
   39e44:	b	39e70 <__assert_fail@plt+0x2696c>
   39e48:	ldrb	r3, [r4, #2]
   39e4c:	cmp	r3, #0
   39e50:	bne	39de8 <__assert_fail@plt+0x268e4>
   39e54:	cmp	r5, #4
   39e58:	bhi	39e70 <__assert_fail@plt+0x2696c>
   39e5c:	ldr	r3, [pc, #268]	; 39f70 <__assert_fail@plt+0x26a6c>
   39e60:	add	r3, pc, r3
   39e64:	ldr	r0, [r3, r5, lsl #2]
   39e68:	cmp	r0, #0
   39e6c:	bne	39d7c <__assert_fail@plt+0x26878>
   39e70:	ldr	r1, [pc, #252]	; 39f74 <__assert_fail@plt+0x26a70>
   39e74:	mov	r2, #5
   39e78:	mov	r0, #0
   39e7c:	add	r1, pc, r1
   39e80:	bl	12d84 <dcgettext@plt>
   39e84:	ldr	ip, [pc, #236]	; 39f78 <__assert_fail@plt+0x26a74>
   39e88:	str	r5, [sp, #8]
   39e8c:	mov	r1, r7
   39e90:	add	ip, pc, ip
   39e94:	mov	r2, #1
   39e98:	mvn	r3, #0
   39e9c:	str	ip, [sp]
   39ea0:	str	r0, [sp, #4]
   39ea4:	mov	r0, r6
   39ea8:	bl	134ec <__snprintf_chk@plt>
   39eac:	mov	r0, r6
   39eb0:	b	39d7c <__assert_fail@plt+0x26878>
   39eb4:	ldr	ip, [pc, #192]	; 39f7c <__assert_fail@plt+0x26a78>
   39eb8:	mov	r1, r7
   39ebc:	mov	r0, r6
   39ec0:	str	r5, [sp, #4]
   39ec4:	add	ip, pc, ip
   39ec8:	mov	r2, #1
   39ecc:	mvn	r3, #0
   39ed0:	str	ip, [sp]
   39ed4:	bl	134ec <__snprintf_chk@plt>
   39ed8:	mov	r0, r6
   39edc:	b	39d7c <__assert_fail@plt+0x26878>
   39ee0:	ldr	lr, [pc, #152]	; 39f80 <__assert_fail@plt+0x26a7c>
   39ee4:	mov	r1, r7
   39ee8:	ldr	ip, [pc, #148]	; 39f84 <__assert_fail@plt+0x26a80>
   39eec:	mov	r0, r6
   39ef0:	add	lr, pc, lr
   39ef4:	mov	r2, #1
   39ef8:	add	ip, pc, ip
   39efc:	mvn	r3, #0
   39f00:	str	lr, [sp]
   39f04:	str	ip, [sp, #4]
   39f08:	bl	134ec <__snprintf_chk@plt>
   39f0c:	cmp	r5, #256	; 0x100
   39f10:	rsb	r1, r0, r7
   39f14:	add	r0, r6, r0
   39f18:	beq	39f48 <__assert_fail@plt+0x26a44>
   39f1c:	movw	r3, #257	; 0x101
   39f20:	cmp	r5, r3
   39f24:	ldrne	ip, [pc, #92]	; 39f88 <__assert_fail@plt+0x26a84>
   39f28:	strne	r5, [sp, #4]
   39f2c:	addne	ip, pc, ip
   39f30:	bne	39ec8 <__assert_fail@plt+0x269c4>
   39f34:	ldr	r2, [pc, #80]	; 39f8c <__assert_fail@plt+0x26a88>
   39f38:	add	r2, pc, r2
   39f3c:	bl	1315c <snprintf@plt>
   39f40:	mov	r0, r6
   39f44:	b	39d7c <__assert_fail@plt+0x26878>
   39f48:	ldr	r2, [pc, #64]	; 39f90 <__assert_fail@plt+0x26a8c>
   39f4c:	add	r2, pc, r2
   39f50:	bl	1315c <snprintf@plt>
   39f54:	mov	r0, r6
   39f58:	b	39d7c <__assert_fail@plt+0x26878>
   39f5c:	andeq	sp, r0, r4, lsl #1
   39f60:			; <UNDEFINED> instruction: 0x000067b8
   39f64:	andeq	sp, r0, r8, lsr r0
   39f68:	andeq	r6, r0, r8, ror r7
   39f6c:	andeq	lr, r1, r8, asr #30
   39f70:	andeq	lr, r1, r8, lsl pc
   39f74:	andeq	r5, r0, r4, lsl lr
   39f78:	ldrdeq	ip, [r0], -r4
   39f7c:	andeq	ip, r0, r4, asr pc
   39f80:	andeq	ip, r0, r4, lsr pc
   39f84:	andeq	ip, r0, r0, lsr pc
   39f88:	andeq	ip, r0, r8, lsl pc
   39f8c:	andeq	ip, r0, r8, lsr sl
   39f90:	strdeq	ip, [r0], -r0
   39f94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f98:	sub	sp, sp, #20
   39f9c:	mov	r5, r1
   39fa0:	mov	fp, r3
   39fa4:	ldr	r8, [sp, #64]	; 0x40
   39fa8:	mov	r1, r2
   39fac:	ldr	r6, [sp, #68]	; 0x44
   39fb0:	ldr	r7, [sp, #72]	; 0x48
   39fb4:	ldr	sl, [sp, #56]	; 0x38
   39fb8:	ldr	r9, [sp, #60]	; 0x3c
   39fbc:	str	r8, [sp]
   39fc0:	str	r6, [sp, #4]
   39fc4:	mov	r2, sl
   39fc8:	str	r7, [sp, #8]
   39fcc:	mov	r3, r9
   39fd0:	ldr	ip, [r0, #96]	; 0x60
   39fd4:	mov	r0, r5
   39fd8:	blx	ip
   39fdc:	subs	r4, r0, #0
   39fe0:	bne	39ff0 <__assert_fail@plt+0x26aec>
   39fe4:	ldr	r3, [r5, #8]
   39fe8:	cmp	r3, #5
   39fec:	beq	39ffc <__assert_fail@plt+0x26af8>
   39ff0:	mov	r0, r4
   39ff4:	add	sp, sp, #20
   39ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39ffc:	mov	r0, fp
   3a000:	ldr	r2, [r5, #4]
   3a004:	mov	r1, r4
   3a008:	bl	13270 <memchr@plt>
   3a00c:	cmp	r0, #0
   3a010:	beq	39ff0 <__assert_fail@plt+0x26aec>
   3a014:	mov	r3, #1
   3a018:	ldr	r2, [pc, #36]	; 3a044 <__assert_fail@plt+0x26b40>
   3a01c:	str	r4, [sl]
   3a020:	str	r4, [r9]
   3a024:	add	r2, pc, r2
   3a028:	str	r4, [r8]
   3a02c:	mov	r4, r3
   3a030:	str	r2, [r7]
   3a034:	mov	r0, r4
   3a038:	str	r3, [r6]
   3a03c:	add	sp, sp, #20
   3a040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a044:	andeq	lr, r1, r0, lsl #27
   3a048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a04c:	mov	r4, r0
   3a050:	ldr	sl, [pc, #3996]	; 3aff4 <__assert_fail@plt+0x27af0>
   3a054:	sub	sp, sp, #252	; 0xfc
   3a058:	ldr	r0, [pc, #3992]	; 3aff8 <__assert_fail@plt+0x27af4>
   3a05c:	mov	r6, r2
   3a060:	add	sl, pc, sl
   3a064:	ldr	r7, [sp, #288]	; 0x120
   3a068:	ldr	r5, [sp, #292]	; 0x124
   3a06c:	mov	r9, r3
   3a070:	ldr	r0, [sl, r0]
   3a074:	mov	r8, r1
   3a078:	ldr	ip, [r4, #100]	; 0x64
   3a07c:	mov	r1, r3
   3a080:	mov	r3, r5
   3a084:	str	r0, [sp, #20]
   3a088:	mov	r0, r2
   3a08c:	ldr	fp, [sp, #20]
   3a090:	mov	r2, r7
   3a094:	ldr	lr, [fp]
   3a098:	str	lr, [sp, #244]	; 0xf4
   3a09c:	blx	ip
   3a0a0:	cmp	r0, #0
   3a0a4:	bne	3a0e8 <__assert_fail@plt+0x26be4>
   3a0a8:	ldr	r0, [pc, #3916]	; 3affc <__assert_fail@plt+0x27af8>
   3a0ac:	mov	r1, r6
   3a0b0:	add	r0, pc, r0
   3a0b4:	bl	12cd0 <strcmp@plt>
   3a0b8:	subs	fp, r0, #0
   3a0bc:	bne	3a104 <__assert_fail@plt+0x26c00>
   3a0c0:	cmp	r9, #3
   3a0c4:	beq	3a18c <__assert_fail@plt+0x26c88>
   3a0c8:	ldr	r1, [pc, #3888]	; 3b000 <__assert_fail@plt+0x27afc>
   3a0cc:	mov	r2, #5
   3a0d0:	add	r1, pc, r1
   3a0d4:	bl	12d84 <dcgettext@plt>
   3a0d8:	mov	r2, r9
   3a0dc:	mov	r1, r0
   3a0e0:	mov	r0, #1
   3a0e4:	bl	13204 <__printf_chk@plt>
   3a0e8:	ldr	ip, [sp, #20]
   3a0ec:	ldr	r2, [sp, #244]	; 0xf4
   3a0f0:	ldr	r3, [ip]
   3a0f4:	cmp	r2, r3
   3a0f8:	bne	3af6c <__assert_fail@plt+0x27a68>
   3a0fc:	add	sp, sp, #252	; 0xfc
   3a100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a104:	ldr	r1, [pc, #3832]	; 3b004 <__assert_fail@plt+0x27b00>
   3a108:	mov	r0, r6
   3a10c:	mov	r2, #2
   3a110:	add	r1, pc, r1
   3a114:	bl	13468 <strncmp@plt>
   3a118:	subs	fp, r0, #0
   3a11c:	bne	3a12c <__assert_fail@plt+0x26c28>
   3a120:	sub	r3, r9, #256	; 0x100
   3a124:	cmp	r3, #1
   3a128:	bls	3a428 <__assert_fail@plt+0x26f24>
   3a12c:	cmp	r9, #1
   3a130:	cmpeq	r7, #0
   3a134:	beq	3a0e8 <__assert_fail@plt+0x26be4>
   3a138:	ldrb	r3, [r6]
   3a13c:	cmp	r3, #71	; 0x47
   3a140:	bne	3a0e8 <__assert_fail@plt+0x26be4>
   3a144:	ldrb	r3, [r6, #1]
   3a148:	cmp	r3, #78	; 0x4e
   3a14c:	bne	3a0e8 <__assert_fail@plt+0x26be4>
   3a150:	ldrb	r3, [r6, #2]
   3a154:	cmp	r3, #85	; 0x55
   3a158:	bne	3a0e8 <__assert_fail@plt+0x26be4>
   3a15c:	ldrb	r3, [r6, #3]
   3a160:	cmp	r3, #0
   3a164:	bne	3a0e8 <__assert_fail@plt+0x26be4>
   3a168:	sub	r9, r9, #1
   3a16c:	cmp	r9, #4
   3a170:	addls	pc, pc, r9, lsl #2
   3a174:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3a178:	b	3a4c8 <__assert_fail@plt+0x26fc4>
   3a17c:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3a180:	b	3a7b0 <__assert_fail@plt+0x272ac>
   3a184:	b	3a77c <__assert_fail@plt+0x27278>
   3a188:	b	3a570 <__assert_fail@plt+0x2706c>
   3a18c:	mov	r1, #1
   3a190:	mov	r2, r9
   3a194:	mov	r3, r1
   3a198:	ldr	r0, [r4, #16]
   3a19c:	bl	12f64 <gelf_fsize@plt>
   3a1a0:	add	r3, r0, #3
   3a1a4:	mov	r6, r0
   3a1a8:	cmp	r7, r3
   3a1ac:	bcc	3a404 <__assert_fail@plt+0x26f00>
   3a1b0:	ldr	r8, [r4, #16]
   3a1b4:	mov	r1, fp
   3a1b8:	mov	r3, #1
   3a1bc:	str	fp, [sp, #128]	; 0x80
   3a1c0:	str	r3, [sp, #116]	; 0x74
   3a1c4:	mov	r0, r8
   3a1c8:	str	r3, [sp, #120]	; 0x78
   3a1cc:	str	r3, [sp, #148]	; 0x94
   3a1d0:	str	r3, [sp, #152]	; 0x98
   3a1d4:	add	r3, sp, #176	; 0xb0
   3a1d8:	str	fp, [sp, #132]	; 0x84
   3a1dc:	str	r3, [sp, #144]	; 0x90
   3a1e0:	str	fp, [sp, #136]	; 0x88
   3a1e4:	str	fp, [sp, #140]	; 0x8c
   3a1e8:	str	r5, [sp, #112]	; 0x70
   3a1ec:	str	r6, [sp, #124]	; 0x7c
   3a1f0:	str	fp, [sp, #160]	; 0xa0
   3a1f4:	str	fp, [sp, #164]	; 0xa4
   3a1f8:	str	fp, [sp, #168]	; 0xa8
   3a1fc:	str	fp, [sp, #172]	; 0xac
   3a200:	str	r6, [sp, #156]	; 0x9c
   3a204:	bl	12d60 <elf_getident@plt>
   3a208:	add	r1, sp, #144	; 0x90
   3a20c:	add	r2, sp, #112	; 0x70
   3a210:	ldrb	r3, [r0, #5]
   3a214:	mov	r0, r8
   3a218:	bl	12f94 <gelf_xlatetom@plt>
   3a21c:	cmp	r0, #0
   3a220:	beq	3ac7c <__assert_fail@plt+0x27778>
   3a224:	add	r6, r5, r6
   3a228:	add	r9, r5, r7
   3a22c:	rsb	r2, r6, r9
   3a230:	mov	r1, fp
   3a234:	mov	r0, r6
   3a238:	bl	13270 <memchr@plt>
   3a23c:	cmp	r0, #0
   3a240:	beq	3a404 <__assert_fail@plt+0x26f00>
   3a244:	add	r8, r0, #1
   3a248:	mov	r1, fp
   3a24c:	rsb	sl, r8, r9
   3a250:	mov	r0, r8
   3a254:	mov	r2, sl
   3a258:	bl	13270 <memchr@plt>
   3a25c:	cmp	r0, #0
   3a260:	beq	3a404 <__assert_fail@plt+0x26f00>
   3a264:	add	r9, r0, #1
   3a268:	mov	r2, sl
   3a26c:	mov	r1, fp
   3a270:	sub	r7, r7, #1
   3a274:	mov	r0, r9
   3a278:	add	r5, r5, r7
   3a27c:	bl	13270 <memchr@plt>
   3a280:	cmp	r0, r5
   3a284:	bne	3a404 <__assert_fail@plt+0x26f00>
   3a288:	ldr	r0, [r4, #16]
   3a28c:	bl	12e38 <gelf_getclass@plt>
   3a290:	cmp	r0, #1
   3a294:	beq	3af50 <__assert_fail@plt+0x27a4c>
   3a298:	add	r3, sp, #176	; 0xb0
   3a29c:	ldr	r7, [sp, #188]	; 0xbc
   3a2a0:	ldr	r5, [sp, #192]	; 0xc0
   3a2a4:	ldm	r3, {r3, r4, sl}
   3a2a8:	ldr	ip, [sp, #196]	; 0xc4
   3a2ac:	ldr	r1, [pc, #3412]	; 3b008 <__assert_fail@plt+0x27b04>
   3a2b0:	mov	r2, #5
   3a2b4:	mov	r0, #0
   3a2b8:	str	ip, [sp, #12]
   3a2bc:	add	r1, pc, r1
   3a2c0:	str	r3, [sp, #16]
   3a2c4:	bl	12d84 <dcgettext@plt>
   3a2c8:	ldr	fp, [pc, #3388]	; 3b00c <__assert_fail@plt+0x27b08>
   3a2cc:	add	fp, pc, fp
   3a2d0:	mov	r1, r0
   3a2d4:	mov	r0, #1
   3a2d8:	bl	13204 <__printf_chk@plt>
   3a2dc:	ldr	r3, [sp, #16]
   3a2e0:	mov	r1, fp
   3a2e4:	mov	r0, #1
   3a2e8:	mov	r2, r3
   3a2ec:	mov	r3, r4
   3a2f0:	bl	13204 <__printf_chk@plt>
   3a2f4:	ldr	r1, [pc, #3348]	; 3b010 <__assert_fail@plt+0x27b0c>
   3a2f8:	mov	r2, #5
   3a2fc:	mov	r0, #0
   3a300:	add	r1, pc, r1
   3a304:	ldr	r4, [pc, #3336]	; 3b014 <__assert_fail@plt+0x27b10>
   3a308:	bl	12d84 <dcgettext@plt>
   3a30c:	add	r4, pc, r4
   3a310:	mov	r1, r0
   3a314:	mov	r0, #1
   3a318:	bl	13204 <__printf_chk@plt>
   3a31c:	mov	r3, r7
   3a320:	mov	r1, fp
   3a324:	mov	r2, sl
   3a328:	mov	r0, #1
   3a32c:	bl	13204 <__printf_chk@plt>
   3a330:	ldr	r1, [pc, #3296]	; 3b018 <__assert_fail@plt+0x27b14>
   3a334:	mov	r2, #5
   3a338:	mov	r0, #0
   3a33c:	add	r1, pc, r1
   3a340:	bl	12d84 <dcgettext@plt>
   3a344:	mov	r1, r0
   3a348:	mov	r0, #1
   3a34c:	bl	13204 <__printf_chk@plt>
   3a350:	ldr	ip, [sp, #12]
   3a354:	ldr	r1, [pc, #3264]	; 3b01c <__assert_fail@plt+0x27b18>
   3a358:	mov	r2, r5
   3a35c:	mov	r0, #1
   3a360:	mov	r3, ip
   3a364:	add	r1, pc, r1
   3a368:	bl	13204 <__printf_chk@plt>
   3a36c:	ldr	r1, [pc, #3244]	; 3b020 <__assert_fail@plt+0x27b1c>
   3a370:	mov	r2, #5
   3a374:	mov	r0, #0
   3a378:	add	r1, pc, r1
   3a37c:	bl	12d84 <dcgettext@plt>
   3a380:	mov	r1, r0
   3a384:	mov	r0, #1
   3a388:	bl	13204 <__printf_chk@plt>
   3a38c:	mov	r2, r6
   3a390:	mov	r1, r4
   3a394:	mov	r0, #1
   3a398:	bl	13204 <__printf_chk@plt>
   3a39c:	ldr	r1, [pc, #3200]	; 3b024 <__assert_fail@plt+0x27b20>
   3a3a0:	mov	r2, #5
   3a3a4:	mov	r0, #0
   3a3a8:	add	r1, pc, r1
   3a3ac:	bl	12d84 <dcgettext@plt>
   3a3b0:	mov	r1, r0
   3a3b4:	mov	r0, #1
   3a3b8:	bl	13204 <__printf_chk@plt>
   3a3bc:	mov	r1, r4
   3a3c0:	mov	r2, r8
   3a3c4:	mov	r0, #1
   3a3c8:	bl	13204 <__printf_chk@plt>
   3a3cc:	ldr	r1, [pc, #3156]	; 3b028 <__assert_fail@plt+0x27b24>
   3a3d0:	mov	r2, #5
   3a3d4:	mov	r0, #0
   3a3d8:	add	r1, pc, r1
   3a3dc:	bl	12d84 <dcgettext@plt>
   3a3e0:	mov	r1, r0
   3a3e4:	mov	r0, #1
   3a3e8:	bl	13204 <__printf_chk@plt>
   3a3ec:	ldr	r1, [pc, #3128]	; 3b02c <__assert_fail@plt+0x27b28>
   3a3f0:	mov	r2, r9
   3a3f4:	mov	r0, #1
   3a3f8:	add	r1, pc, r1
   3a3fc:	bl	13204 <__printf_chk@plt>
   3a400:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3a404:	ldr	r1, [pc, #3108]	; 3b030 <__assert_fail@plt+0x27b2c>
   3a408:	mov	r2, #5
   3a40c:	mov	r0, #0
   3a410:	add	r1, pc, r1
   3a414:	bl	12d84 <dcgettext@plt>
   3a418:	mov	r1, r0
   3a41c:	mov	r0, #1
   3a420:	bl	13204 <__printf_chk@plt>
   3a424:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3a428:	cmp	r7, #0
   3a42c:	bne	3ab68 <__assert_fail@plt+0x27664>
   3a430:	cmp	r8, #1
   3a434:	bls	3ac2c <__assert_fail@plt+0x27728>
   3a438:	ldr	r1, [pc, #3060]	; 3b034 <__assert_fail@plt+0x27b30>
   3a43c:	mov	r0, #1
   3a440:	add	r4, r6, #4
   3a444:	add	r1, pc, r1
   3a448:	bl	13204 <__printf_chk@plt>
   3a44c:	ldrb	r0, [r6, #3]
   3a450:	cmp	r0, #5
   3a454:	beq	3ada4 <__assert_fail@plt+0x278a0>
   3a458:	bhi	3aa68 <__assert_fail@plt+0x27564>
   3a45c:	cmp	r0, #2
   3a460:	beq	3adb8 <__assert_fail@plt+0x278b4>
   3a464:	bls	3ad10 <__assert_fail@plt+0x2780c>
   3a468:	cmp	r0, #3
   3a46c:	beq	3ae90 <__assert_fail@plt+0x2798c>
   3a470:	cmp	r0, #4
   3a474:	bne	3ad90 <__assert_fail@plt+0x2788c>
   3a478:	ldr	r1, [pc, #3000]	; 3b038 <__assert_fail@plt+0x27b34>
   3a47c:	mov	r0, #1
   3a480:	add	r1, pc, r1
   3a484:	bl	13204 <__printf_chk@plt>
   3a488:	ldrb	r3, [r6, #2]
   3a48c:	sub	r3, r3, #33	; 0x21
   3a490:	cmp	r3, #10
   3a494:	addls	pc, pc, r3, lsl #2
   3a498:	b	3a87c <__assert_fail@plt+0x27378>
   3a49c:	b	3a8a8 <__assert_fail@plt+0x273a4>
   3a4a0:	b	3a87c <__assert_fail@plt+0x27378>
   3a4a4:	b	3a87c <__assert_fail@plt+0x27378>
   3a4a8:	b	3a890 <__assert_fail@plt+0x2738c>
   3a4ac:	b	3a87c <__assert_fail@plt+0x27378>
   3a4b0:	b	3a87c <__assert_fail@plt+0x27378>
   3a4b4:	b	3a87c <__assert_fail@plt+0x27378>
   3a4b8:	b	3a87c <__assert_fail@plt+0x27378>
   3a4bc:	b	3a87c <__assert_fail@plt+0x27378>
   3a4c0:	b	3a83c <__assert_fail@plt+0x27338>
   3a4c4:	b	3a820 <__assert_fail@plt+0x2731c>
   3a4c8:	cmp	r7, #7
   3a4cc:	bls	3a0e8 <__assert_fail@plt+0x26be4>
   3a4d0:	ands	r3, r7, #3
   3a4d4:	bne	3a0e8 <__assert_fail@plt+0x26be4>
   3a4d8:	cmp	r7, #67	; 0x43
   3a4dc:	mov	r1, #12
   3a4e0:	mov	r2, #1
   3a4e4:	str	r3, [sp, #128]	; 0x80
   3a4e8:	str	r3, [sp, #132]	; 0x84
   3a4ec:	addls	r8, sp, #176	; 0xb0
   3a4f0:	str	r3, [sp, #136]	; 0x88
   3a4f4:	str	r3, [sp, #140]	; 0x8c
   3a4f8:	str	r5, [sp, #112]	; 0x70
   3a4fc:	str	r7, [sp, #124]	; 0x7c
   3a500:	str	r1, [sp, #116]	; 0x74
   3a504:	str	r2, [sp, #120]	; 0x78
   3a508:	bhi	3afe0 <__assert_fail@plt+0x27adc>
   3a50c:	ldrb	r2, [r4, #13]
   3a510:	add	r0, sp, #144	; 0x90
   3a514:	add	r1, sp, #112	; 0x70
   3a518:	mov	r3, #0
   3a51c:	mov	lr, #12
   3a520:	mov	ip, #1
   3a524:	str	r8, [sp, #144]	; 0x90
   3a528:	str	r7, [sp, #156]	; 0x9c
   3a52c:	str	r3, [sp, #160]	; 0xa0
   3a530:	str	r3, [sp, #164]	; 0xa4
   3a534:	str	r3, [sp, #168]	; 0xa8
   3a538:	str	r3, [sp, #172]	; 0xac
   3a53c:	str	lr, [sp, #148]	; 0x94
   3a540:	str	ip, [sp, #152]	; 0x98
   3a544:	bl	13024 <elf32_xlatetom@plt>
   3a548:	cmp	r0, #0
   3a54c:	beq	3ac68 <__assert_fail@plt+0x27764>
   3a550:	ldr	r3, [r8]
   3a554:	cmp	r3, #3
   3a558:	addls	pc, pc, r3, lsl #2
   3a55c:	b	3af28 <__assert_fail@plt+0x27a24>
   3a560:	b	3a970 <__assert_fail@plt+0x2746c>
   3a564:	b	3a8bc <__assert_fail@plt+0x273b8>
   3a568:	b	3a958 <__assert_fail@plt+0x27454>
   3a56c:	b	3a964 <__assert_fail@plt+0x27460>
   3a570:	cmp	r7, #7
   3a574:	bls	3a0e8 <__assert_fail@plt+0x26be4>
   3a578:	add	fp, sp, #144	; 0x90
   3a57c:	str	fp, [sp, #24]
   3a580:	ldr	fp, [pc, #2740]	; 3b03c <__assert_fail@plt+0x27b38>
   3a584:	add	sl, sp, #112	; 0x70
   3a588:	ldr	ip, [pc, #2736]	; 3b040 <__assert_fail@plt+0x27b3c>
   3a58c:	add	fp, pc, fp
   3a590:	str	fp, [sp, #80]	; 0x50
   3a594:	ldr	fp, [pc, #2728]	; 3b044 <__assert_fail@plt+0x27b40>
   3a598:	add	ip, pc, ip
   3a59c:	str	ip, [sp, #68]	; 0x44
   3a5a0:	add	fp, pc, fp
   3a5a4:	str	fp, [sp, #84]	; 0x54
   3a5a8:	ldr	fp, [pc, #2712]	; 3b048 <__assert_fail@plt+0x27b44>
   3a5ac:	ldr	ip, [pc, #2712]	; 3b04c <__assert_fail@plt+0x27b48>
   3a5b0:	add	fp, pc, fp
   3a5b4:	str	fp, [sp, #88]	; 0x58
   3a5b8:	ldr	fp, [pc, #2704]	; 3b050 <__assert_fail@plt+0x27b4c>
   3a5bc:	add	ip, pc, ip
   3a5c0:	str	ip, [sp, #76]	; 0x4c
   3a5c4:	add	ip, sp, #128	; 0x80
   3a5c8:	add	fp, pc, fp
   3a5cc:	str	ip, [sp, #32]
   3a5d0:	str	fp, [sp, #92]	; 0x5c
   3a5d4:	add	ip, sp, #132	; 0x84
   3a5d8:	add	fp, sp, #160	; 0xa0
   3a5dc:	str	ip, [sp, #36]	; 0x24
   3a5e0:	str	fp, [sp, #48]	; 0x30
   3a5e4:	add	ip, sp, #136	; 0x88
   3a5e8:	add	fp, sp, #168	; 0xa8
   3a5ec:	str	ip, [sp, #40]	; 0x28
   3a5f0:	str	fp, [sp, #56]	; 0x38
   3a5f4:	add	ip, sp, #140	; 0x8c
   3a5f8:	add	fp, sp, #104	; 0x68
   3a5fc:	str	ip, [sp, #44]	; 0x2c
   3a600:	str	fp, [sp, #64]	; 0x40
   3a604:	add	ip, sp, #164	; 0xa4
   3a608:	str	ip, [sp, #52]	; 0x34
   3a60c:	add	ip, sp, #172	; 0xac
   3a610:	str	ip, [sp, #60]	; 0x3c
   3a614:	ldr	r9, [r4, #16]
   3a618:	mov	r6, #0
   3a61c:	ldr	ip, [sp, #24]
   3a620:	mov	r1, r6
   3a624:	str	r6, [sl]
   3a628:	mov	r3, #8
   3a62c:	mov	r0, r9
   3a630:	add	lr, sp, #104	; 0x68
   3a634:	str	r6, [ip]
   3a638:	mov	r8, #12
   3a63c:	add	ip, sp, #144	; 0x90
   3a640:	mov	fp, #1
   3a644:	str	ip, [sp, #24]
   3a648:	add	sl, sp, #112	; 0x70
   3a64c:	str	lr, [sp, #144]	; 0x90
   3a650:	str	r3, [sp, #124]	; 0x7c
   3a654:	str	r7, [sp, #156]	; 0x9c
   3a658:	str	r6, [sp, #128]	; 0x80
   3a65c:	str	r6, [sp, #132]	; 0x84
   3a660:	str	r6, [sp, #136]	; 0x88
   3a664:	str	r6, [sp, #140]	; 0x8c
   3a668:	str	r6, [sp, #160]	; 0xa0
   3a66c:	str	r6, [sp, #164]	; 0xa4
   3a670:	str	r6, [sp, #168]	; 0xa8
   3a674:	str	r6, [sp, #172]	; 0xac
   3a678:	str	r5, [sp, #112]	; 0x70
   3a67c:	str	r8, [sp, #116]	; 0x74
   3a680:	str	r8, [sp, #148]	; 0x94
   3a684:	str	fp, [sp, #120]	; 0x78
   3a688:	str	fp, [sp, #152]	; 0x98
   3a68c:	bl	12d60 <elf_getident@plt>
   3a690:	ldr	r1, [sp, #24]
   3a694:	mov	r2, sl
   3a698:	ldrb	r3, [r0, #5]
   3a69c:	mov	r0, r9
   3a6a0:	bl	12f94 <gelf_xlatetom@plt>
   3a6a4:	cmp	r0, r6
   3a6a8:	beq	3ac7c <__assert_fail@plt+0x27778>
   3a6ac:	ldr	r2, [sp, #108]	; 0x6c
   3a6b0:	sub	r7, r7, #8
   3a6b4:	add	r9, r5, #8
   3a6b8:	cmp	r7, r2
   3a6bc:	bcc	3aea4 <__assert_fail@plt+0x279a0>
   3a6c0:	ldr	r0, [r4, #16]
   3a6c4:	bl	12e38 <gelf_getclass@plt>
   3a6c8:	mov	r1, r6
   3a6cc:	str	r0, [sp, #28]
   3a6d0:	ldr	r0, [r4, #16]
   3a6d4:	bl	12d60 <elf_getident@plt>
   3a6d8:	add	r1, sp, #176	; 0xb0
   3a6dc:	str	r0, [sp, #72]	; 0x48
   3a6e0:	ldr	r0, [r4, #16]
   3a6e4:	bl	12c70 <gelf_getehdr@plt>
   3a6e8:	mov	r0, fp
   3a6ec:	ldr	r1, [sp, #68]	; 0x44
   3a6f0:	bl	13204 <__printf_chk@plt>
   3a6f4:	ldr	ip, [sp, #104]	; 0x68
   3a6f8:	cmp	ip, #1
   3a6fc:	beq	3aa14 <__assert_fail@plt+0x27510>
   3a700:	cmp	ip, #2
   3a704:	beq	3aa98 <__assert_fail@plt+0x27594>
   3a708:	add	r3, ip, #1073741824	; 0x40000000
   3a70c:	cmn	r3, #-536870911	; 0xe0000001
   3a710:	bhi	3a97c <__assert_fail@plt+0x27478>
   3a714:	ldrh	r3, [sp, #194]	; 0xc2
   3a718:	mov	r0, fp
   3a71c:	cmp	r3, #3
   3a720:	cmpne	r3, #62	; 0x3e
   3a724:	beq	3aacc <__assert_fail@plt+0x275c8>
   3a728:	ldr	r1, [pc, #2340]	; 3b054 <__assert_fail@plt+0x27b50>
   3a72c:	mov	r2, ip
   3a730:	add	r1, pc, r1
   3a734:	bl	13204 <__printf_chk@plt>
   3a738:	ldr	r3, [sp, #108]	; 0x6c
   3a73c:	cmp	r3, #0
   3a740:	bne	3a9ac <__assert_fail@plt+0x274a8>
   3a744:	ldr	fp, [sp, #28]
   3a748:	cmp	fp, #1
   3a74c:	addeq	r3, r3, #3
   3a750:	addne	r3, r3, #7
   3a754:	biceq	r3, r3, #3
   3a758:	bicne	r3, r3, #7
   3a75c:	cmp	r7, r3
   3a760:	str	r3, [sp, #108]	; 0x6c
   3a764:	add	r5, r9, r3
   3a768:	bls	3a0e8 <__assert_fail@plt+0x26be4>
   3a76c:	rsb	r7, r3, r7
   3a770:	cmp	r7, #7
   3a774:	bhi	3a614 <__assert_fail@plt+0x27110>
   3a778:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3a77c:	cmp	r7, #0
   3a780:	beq	3a0e8 <__assert_fail@plt+0x26be4>
   3a784:	ldr	r1, [pc, #2252]	; 3b058 <__assert_fail@plt+0x27b54>
   3a788:	mov	r2, #5
   3a78c:	mov	r0, #0
   3a790:	add	r1, pc, r1
   3a794:	bl	12d84 <dcgettext@plt>
   3a798:	mov	r2, r7
   3a79c:	mov	r3, r5
   3a7a0:	mov	r1, r0
   3a7a4:	mov	r0, #1
   3a7a8:	bl	13204 <__printf_chk@plt>
   3a7ac:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3a7b0:	cmp	r7, #0
   3a7b4:	beq	3a0e8 <__assert_fail@plt+0x26be4>
   3a7b8:	ldr	r1, [pc, #2204]	; 3b05c <__assert_fail@plt+0x27b58>
   3a7bc:	mov	r2, #5
   3a7c0:	mov	r0, #0
   3a7c4:	add	r1, pc, r1
   3a7c8:	bl	12d84 <dcgettext@plt>
   3a7cc:	mov	r1, r0
   3a7d0:	mov	r0, #1
   3a7d4:	bl	13204 <__printf_chk@plt>
   3a7d8:	subs	r7, r7, #1
   3a7dc:	beq	3a808 <__assert_fail@plt+0x27304>
   3a7e0:	ldr	r6, [pc, #2168]	; 3b060 <__assert_fail@plt+0x27b5c>
   3a7e4:	mov	r4, #0
   3a7e8:	add	r6, pc, r6
   3a7ec:	mov	r0, #1
   3a7f0:	ldrb	r2, [r5, r4]
   3a7f4:	mov	r1, r6
   3a7f8:	add	r4, r4, r0
   3a7fc:	bl	13204 <__printf_chk@plt>
   3a800:	cmp	r4, r7
   3a804:	bne	3a7ec <__assert_fail@plt+0x272e8>
   3a808:	ldr	r1, [pc, #2132]	; 3b064 <__assert_fail@plt+0x27b60>
   3a80c:	mov	r0, #1
   3a810:	ldrb	r2, [r5, r7]
   3a814:	add	r1, pc, r1
   3a818:	bl	13204 <__printf_chk@plt>
   3a81c:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3a820:	ldr	r1, [pc, #2112]	; 3b068 <__assert_fail@plt+0x27b64>
   3a824:	mov	r0, #1
   3a828:	add	r1, pc, r1
   3a82c:	bl	13204 <__printf_chk@plt>
   3a830:	mov	r0, #10
   3a834:	bl	131b0 <putchar@plt>
   3a838:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3a83c:	rsb	r6, r4, r6
   3a840:	add	r8, r6, r8
   3a844:	cmp	r8, #1
   3a848:	beq	3af1c <__assert_fail@plt+0x27a18>
   3a84c:	cmp	r8, #2
   3a850:	ldrheq	r0, [r4]
   3a854:	moveq	r3, #0
   3a858:	uxtheq	r2, r0
   3a85c:	beq	3ac94 <__assert_fail@plt+0x27790>
   3a860:	cmp	r8, #4
   3a864:	ldreq	r0, [r4]
   3a868:	moveq	r3, #0
   3a86c:	moveq	r2, r0
   3a870:	beq	3ac94 <__assert_fail@plt+0x27790>
   3a874:	cmp	r8, #8
   3a878:	beq	3ac8c <__assert_fail@plt+0x27788>
   3a87c:	ldr	r1, [pc, #2024]	; 3b06c <__assert_fail@plt+0x27b68>
   3a880:	mov	r0, #1
   3a884:	add	r1, pc, r1
   3a888:	bl	13204 <__printf_chk@plt>
   3a88c:	b	3a830 <__assert_fail@plt+0x2732c>
   3a890:	ldr	r1, [pc, #2008]	; 3b070 <__assert_fail@plt+0x27b6c>
   3a894:	mov	r2, r4
   3a898:	mov	r0, #1
   3a89c:	add	r1, pc, r1
   3a8a0:	bl	13204 <__printf_chk@plt>
   3a8a4:	b	3a830 <__assert_fail@plt+0x2732c>
   3a8a8:	ldr	r1, [pc, #1988]	; 3b074 <__assert_fail@plt+0x27b70>
   3a8ac:	mov	r0, #1
   3a8b0:	add	r1, pc, r1
   3a8b4:	bl	13204 <__printf_chk@plt>
   3a8b8:	b	3a830 <__assert_fail@plt+0x2732c>
   3a8bc:	ldr	r4, [pc, #1972]	; 3b078 <__assert_fail@plt+0x27b74>
   3a8c0:	add	r4, pc, r4
   3a8c4:	ldr	r1, [pc, #1968]	; 3b07c <__assert_fail@plt+0x27b78>
   3a8c8:	mov	r2, #5
   3a8cc:	mov	r0, #0
   3a8d0:	ldr	r5, [pc, #1960]	; 3b080 <__assert_fail@plt+0x27b7c>
   3a8d4:	add	r1, pc, r1
   3a8d8:	lsr	r6, r7, #2
   3a8dc:	bl	12d84 <dcgettext@plt>
   3a8e0:	mov	r2, r4
   3a8e4:	add	r5, pc, r5
   3a8e8:	mov	r4, r8
   3a8ec:	mov	fp, #1
   3a8f0:	mov	r9, #46	; 0x2e
   3a8f4:	mov	r1, r0
   3a8f8:	mov	r0, #1
   3a8fc:	bl	13204 <__printf_chk@plt>
   3a900:	ldr	r3, [pc, #1916]	; 3b084 <__assert_fail@plt+0x27b80>
   3a904:	ldr	sl, [sl, r3]
   3a908:	add	fp, fp, #1
   3a90c:	mov	r0, #1
   3a910:	mov	r1, r5
   3a914:	ldr	r2, [r4, #4]!
   3a918:	bl	13204 <__printf_chk@plt>
   3a91c:	cmp	fp, r6
   3a920:	beq	3ac3c <__assert_fail@plt+0x27738>
   3a924:	cmp	fp, #1
   3a928:	beq	3a908 <__assert_fail@plt+0x27404>
   3a92c:	ldr	r0, [sl]
   3a930:	ldr	r3, [r0, #20]
   3a934:	ldr	r2, [r0, #24]
   3a938:	cmp	r3, r2
   3a93c:	addcc	r2, r3, #1
   3a940:	strcc	r2, [r0, #20]
   3a944:	strbcc	r9, [r3]
   3a948:	bcc	3a908 <__assert_fail@plt+0x27404>
   3a94c:	mov	r1, #46	; 0x2e
   3a950:	bl	132dc <__overflow@plt>
   3a954:	b	3a908 <__assert_fail@plt+0x27404>
   3a958:	ldr	r4, [pc, #1832]	; 3b088 <__assert_fail@plt+0x27b84>
   3a95c:	add	r4, pc, r4
   3a960:	b	3a8c4 <__assert_fail@plt+0x273c0>
   3a964:	ldr	r4, [pc, #1824]	; 3b08c <__assert_fail@plt+0x27b88>
   3a968:	add	r4, pc, r4
   3a96c:	b	3a8c4 <__assert_fail@plt+0x273c0>
   3a970:	ldr	r4, [pc, #1816]	; 3b090 <__assert_fail@plt+0x27b8c>
   3a974:	add	r4, pc, r4
   3a978:	b	3a8c4 <__assert_fail@plt+0x273c0>
   3a97c:	cmn	ip, #536870913	; 0x20000001
   3a980:	mov	r0, fp
   3a984:	mov	r2, ip
   3a988:	bls	3a99c <__assert_fail@plt+0x27498>
   3a98c:	ldr	r1, [pc, #1792]	; 3b094 <__assert_fail@plt+0x27b90>
   3a990:	add	r1, pc, r1
   3a994:	bl	13204 <__printf_chk@plt>
   3a998:	b	3a738 <__assert_fail@plt+0x27234>
   3a99c:	ldr	r1, [pc, #1780]	; 3b098 <__assert_fail@plt+0x27b94>
   3a9a0:	add	r1, pc, r1
   3a9a4:	bl	13204 <__printf_chk@plt>
   3a9a8:	b	3a738 <__assert_fail@plt+0x27234>
   3a9ac:	mov	r0, #1
   3a9b0:	ldr	r1, [sp, #76]	; 0x4c
   3a9b4:	bl	13204 <__printf_chk@plt>
   3a9b8:	ldr	r3, [sp, #108]	; 0x6c
   3a9bc:	cmp	r3, #1
   3a9c0:	beq	3af14 <__assert_fail@plt+0x27a10>
   3a9c4:	ldr	r6, [pc, #1744]	; 3b09c <__assert_fail@plt+0x27b98>
   3a9c8:	add	r5, r5, #7
   3a9cc:	mov	r8, #0
   3a9d0:	add	r6, pc, r6
   3a9d4:	mov	r0, #1
   3a9d8:	mov	r1, r6
   3a9dc:	ldrb	r2, [r5, #1]!
   3a9e0:	add	r8, r8, r0
   3a9e4:	bl	13204 <__printf_chk@plt>
   3a9e8:	ldr	r3, [sp, #108]	; 0x6c
   3a9ec:	sub	r3, r3, #1
   3a9f0:	cmp	r3, r8
   3a9f4:	bhi	3a9d4 <__assert_fail@plt+0x274d0>
   3a9f8:	ldr	r1, [pc, #1696]	; 3b0a0 <__assert_fail@plt+0x27b9c>
   3a9fc:	mov	r0, #1
   3aa00:	ldrb	r2, [r9, r8]
   3aa04:	add	r1, pc, r1
   3aa08:	bl	13204 <__printf_chk@plt>
   3aa0c:	ldr	r3, [sp, #108]	; 0x6c
   3aa10:	b	3a744 <__assert_fail@plt+0x27240>
   3aa14:	ldr	r1, [pc, #1672]	; 3b0a4 <__assert_fail@plt+0x27ba0>
   3aa18:	mov	r0, ip
   3aa1c:	str	ip, [sp, #12]
   3aa20:	add	r1, pc, r1
   3aa24:	bl	13204 <__printf_chk@plt>
   3aa28:	ldr	fp, [sp, #28]
   3aa2c:	ldr	ip, [sp, #12]
   3aa30:	cmp	fp, #1
   3aa34:	beq	3aca8 <__assert_fail@plt+0x277a4>
   3aa38:	ldr	fp, [sp, #28]
   3aa3c:	cmp	fp, #2
   3aa40:	bne	3ad08 <__assert_fail@plt+0x27804>
   3aa44:	ldr	r3, [sp, #108]	; 0x6c
   3aa48:	cmp	r3, #8
   3aa4c:	beq	3aeb8 <__assert_fail@plt+0x279b4>
   3aa50:	mov	r2, r3
   3aa54:	ldr	r1, [pc, #1612]	; 3b0a8 <__assert_fail@plt+0x27ba4>
   3aa58:	mov	r0, #1
   3aa5c:	add	r1, pc, r1
   3aa60:	bl	13204 <__printf_chk@plt>
   3aa64:	b	3aa0c <__assert_fail@plt+0x27508>
   3aa68:	cmp	r0, #8
   3aa6c:	beq	3adcc <__assert_fail@plt+0x278c8>
   3aa70:	bhi	3ad28 <__assert_fail@plt+0x27824>
   3aa74:	cmp	r0, #6
   3aa78:	beq	3ade0 <__assert_fail@plt+0x278dc>
   3aa7c:	cmp	r0, #7
   3aa80:	bne	3ad90 <__assert_fail@plt+0x2788c>
   3aa84:	ldr	r1, [pc, #1568]	; 3b0ac <__assert_fail@plt+0x27ba8>
   3aa88:	mov	r0, #1
   3aa8c:	add	r1, pc, r1
   3aa90:	bl	13204 <__printf_chk@plt>
   3aa94:	b	3a488 <__assert_fail@plt+0x26f84>
   3aa98:	ldr	r1, [pc, #1552]	; 3b0b0 <__assert_fail@plt+0x27bac>
   3aa9c:	mov	r0, fp
   3aaa0:	add	r1, pc, r1
   3aaa4:	bl	13204 <__printf_chk@plt>
   3aaa8:	ldr	r2, [sp, #108]	; 0x6c
   3aaac:	cmp	r2, #0
   3aab0:	beq	3ac1c <__assert_fail@plt+0x27718>
   3aab4:	ldr	r1, [pc, #1528]	; 3b0b4 <__assert_fail@plt+0x27bb0>
   3aab8:	mov	r0, fp
   3aabc:	add	r1, pc, r1
   3aac0:	bl	13204 <__printf_chk@plt>
   3aac4:	ldr	r3, [sp, #108]	; 0x6c
   3aac8:	b	3a744 <__assert_fail@plt+0x27240>
   3aacc:	ldr	r1, [pc, #1508]	; 3b0b8 <__assert_fail@plt+0x27bb4>
   3aad0:	add	r1, pc, r1
   3aad4:	bl	13204 <__printf_chk@plt>
   3aad8:	ldr	r2, [sp, #104]	; 0x68
   3aadc:	mov	r0, fp
   3aae0:	cmp	r2, #-1073741822	; 0xc0000002
   3aae4:	beq	3ad60 <__assert_fail@plt+0x2785c>
   3aae8:	ldr	r1, [pc, #1484]	; 3b0bc <__assert_fail@plt+0x27bb8>
   3aaec:	add	r1, pc, r1
   3aaf0:	bl	13204 <__printf_chk@plt>
   3aaf4:	ldr	r3, [sp, #108]	; 0x6c
   3aaf8:	cmp	r3, #0
   3aafc:	beq	3a744 <__assert_fail@plt+0x27240>
   3ab00:	ldr	r1, [pc, #1464]	; 3b0c0 <__assert_fail@plt+0x27bbc>
   3ab04:	mov	r0, fp
   3ab08:	add	r1, pc, r1
   3ab0c:	bl	13204 <__printf_chk@plt>
   3ab10:	ldr	r3, [sp, #108]	; 0x6c
   3ab14:	cmp	r3, #1
   3ab18:	beq	3ab4c <__assert_fail@plt+0x27648>
   3ab1c:	ldr	r8, [pc, #1440]	; 3b0c4 <__assert_fail@plt+0x27bc0>
   3ab20:	add	r5, r5, #7
   3ab24:	add	r8, pc, r8
   3ab28:	mov	r0, #1
   3ab2c:	mov	r1, r8
   3ab30:	ldrb	r2, [r5, #1]!
   3ab34:	add	r6, r6, r0
   3ab38:	bl	13204 <__printf_chk@plt>
   3ab3c:	ldr	r3, [sp, #108]	; 0x6c
   3ab40:	sub	r3, r3, #1
   3ab44:	cmp	r3, r6
   3ab48:	bhi	3ab28 <__assert_fail@plt+0x27624>
   3ab4c:	ldr	r1, [pc, #1396]	; 3b0c8 <__assert_fail@plt+0x27bc4>
   3ab50:	mov	r0, #1
   3ab54:	ldrb	r2, [r9, r6]
   3ab58:	add	r1, pc, r1
   3ab5c:	bl	13204 <__printf_chk@plt>
   3ab60:	ldr	r3, [sp, #108]	; 0x6c
   3ab64:	b	3a744 <__assert_fail@plt+0x27240>
   3ab68:	ldr	r1, [pc, #1372]	; 3b0cc <__assert_fail@plt+0x27bc8>
   3ab6c:	mov	r0, #1
   3ab70:	add	r1, pc, r1
   3ab74:	bl	13204 <__printf_chk@plt>
   3ab78:	mov	r1, #1
   3ab7c:	mov	r3, r1
   3ab80:	ldr	r0, [r4, #16]
   3ab84:	mov	r2, #2
   3ab88:	bl	12f64 <gelf_fsize@plt>
   3ab8c:	cmp	r7, r0
   3ab90:	beq	3adf4 <__assert_fail@plt+0x278f0>
   3ab94:	ldr	r0, [pc, #1332]	; 3b0d0 <__assert_fail@plt+0x27bcc>
   3ab98:	add	r0, pc, r0
   3ab9c:	bl	12fdc <puts@plt>
   3aba0:	b	3a430 <__assert_fail@plt+0x26f2c>
   3aba4:	ldr	ip, [sp, #72]	; 0x48
   3aba8:	mov	r2, sl
   3abac:	str	r3, [sp, #124]	; 0x7c
   3abb0:	str	r3, [sp, #156]	; 0x9c
   3abb4:	add	r3, sp, #96	; 0x60
   3abb8:	str	r8, [sp, #116]	; 0x74
   3abbc:	str	r8, [sp, #148]	; 0x94
   3abc0:	str	r9, [sp, #112]	; 0x70
   3abc4:	str	r3, [sp, #144]	; 0x90
   3abc8:	ldr	r1, [sp, #24]
   3abcc:	ldr	r0, [r4, #16]
   3abd0:	ldrb	r3, [ip, #5]
   3abd4:	bl	12f94 <gelf_xlatetom@plt>
   3abd8:	cmp	r0, #0
   3abdc:	beq	3ac7c <__assert_fail@plt+0x27778>
   3abe0:	ldr	r1, [pc, #1260]	; 3b0d4 <__assert_fail@plt+0x27bd0>
   3abe4:	mov	r0, fp
   3abe8:	ldr	r2, [sp, #96]	; 0x60
   3abec:	add	r1, pc, r1
   3abf0:	bl	13204 <__printf_chk@plt>
   3abf4:	ldr	r3, [sp, #96]	; 0x60
   3abf8:	tst	r3, #1
   3abfc:	bne	3afa0 <__assert_fail@plt+0x27a9c>
   3ac00:	tst	r3, #2
   3ac04:	bne	3af70 <__assert_fail@plt+0x27a6c>
   3ac08:	cmp	r3, #0
   3ac0c:	beq	3ac1c <__assert_fail@plt+0x27718>
   3ac10:	mov	r0, #1
   3ac14:	ldr	r1, [sp, #80]	; 0x50
   3ac18:	bl	13204 <__printf_chk@plt>
   3ac1c:	mov	r0, #10
   3ac20:	bl	131b0 <putchar@plt>
   3ac24:	ldr	r3, [sp, #108]	; 0x6c
   3ac28:	b	3a744 <__assert_fail@plt+0x27240>
   3ac2c:	ldr	r0, [pc, #1188]	; 3b0d8 <__assert_fail@plt+0x27bd4>
   3ac30:	add	r0, pc, r0
   3ac34:	bl	12fdc <puts@plt>
   3ac38:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3ac3c:	ldr	r0, [sl]
   3ac40:	ldr	r3, [r0, #20]
   3ac44:	ldr	r2, [r0, #24]
   3ac48:	cmp	r3, r2
   3ac4c:	addcc	r1, r3, #1
   3ac50:	strcc	r1, [r0, #20]
   3ac54:	movcc	r2, #10
   3ac58:	strbcc	r2, [r3]
   3ac5c:	bcc	3ac68 <__assert_fail@plt+0x27764>
   3ac60:	mov	r1, #10
   3ac64:	bl	132dc <__overflow@plt>
   3ac68:	cmp	r7, #67	; 0x43
   3ac6c:	bls	3a0e8 <__assert_fail@plt+0x26be4>
   3ac70:	mov	r0, r8
   3ac74:	bl	12cf4 <free@plt>
   3ac78:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3ac7c:	mvn	r0, #0
   3ac80:	bl	130a8 <elf_errmsg@plt>
   3ac84:	bl	12fdc <puts@plt>
   3ac88:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3ac8c:	ldr	r2, [r4]
   3ac90:	ldr	r3, [r4, #4]
   3ac94:	ldr	r1, [pc, #1088]	; 3b0dc <__assert_fail@plt+0x27bd8>
   3ac98:	mov	r0, #1
   3ac9c:	add	r1, pc, r1
   3aca0:	bl	13204 <__printf_chk@plt>
   3aca4:	b	3a830 <__assert_fail@plt+0x2732c>
   3aca8:	ldr	r3, [sp, #108]	; 0x6c
   3acac:	cmp	r3, #4
   3acb0:	bne	3aa50 <__assert_fail@plt+0x2754c>
   3acb4:	ldr	ip, [sp, #28]
   3acb8:	mov	r2, sl
   3acbc:	ldr	fp, [sp, #72]	; 0x48
   3acc0:	str	r3, [sp, #124]	; 0x7c
   3acc4:	str	r3, [sp, #156]	; 0x9c
   3acc8:	add	r3, sp, #96	; 0x60
   3accc:	str	ip, [sp, #116]	; 0x74
   3acd0:	str	ip, [sp, #148]	; 0x94
   3acd4:	str	r9, [sp, #112]	; 0x70
   3acd8:	str	r3, [sp, #144]	; 0x90
   3acdc:	ldr	r1, [sp, #24]
   3ace0:	ldr	r0, [r4, #16]
   3ace4:	ldrb	r3, [fp, #5]
   3ace8:	bl	12f94 <gelf_xlatetom@plt>
   3acec:	cmp	r0, #0
   3acf0:	beq	3ac7c <__assert_fail@plt+0x27778>
   3acf4:	ldr	r0, [sp, #28]
   3acf8:	ldr	r1, [sp, #92]	; 0x5c
   3acfc:	ldr	r2, [sp, #96]	; 0x60
   3ad00:	bl	13204 <__printf_chk@plt>
   3ad04:	b	3aa0c <__assert_fail@plt+0x27508>
   3ad08:	ldr	r2, [sp, #108]	; 0x6c
   3ad0c:	b	3aa54 <__assert_fail@plt+0x27550>
   3ad10:	cmp	r0, #1
   3ad14:	bne	3ad90 <__assert_fail@plt+0x2788c>
   3ad18:	ldr	r1, [pc, #960]	; 3b0e0 <__assert_fail@plt+0x27bdc>
   3ad1c:	add	r1, pc, r1
   3ad20:	bl	13204 <__printf_chk@plt>
   3ad24:	b	3a488 <__assert_fail@plt+0x26f84>
   3ad28:	sub	r0, r0, #32
   3ad2c:	cmp	r0, #94	; 0x5e
   3ad30:	bhi	3ad90 <__assert_fail@plt+0x2788c>
   3ad34:	add	r5, r6, #3
   3ad38:	ldr	r1, [pc, #932]	; 3b0e4 <__assert_fail@plt+0x27be0>
   3ad3c:	mov	r0, #1
   3ad40:	add	r1, pc, r1
   3ad44:	mov	r2, r5
   3ad48:	bl	13204 <__printf_chk@plt>
   3ad4c:	mov	r0, r5
   3ad50:	bl	13090 <strlen@plt>
   3ad54:	add	r0, r0, #1
   3ad58:	add	r4, r4, r0
   3ad5c:	b	3a488 <__assert_fail@plt+0x26f84>
   3ad60:	ldr	r1, [pc, #896]	; 3b0e8 <__assert_fail@plt+0x27be4>
   3ad64:	add	r1, pc, r1
   3ad68:	bl	13204 <__printf_chk@plt>
   3ad6c:	ldr	r3, [sp, #108]	; 0x6c
   3ad70:	cmp	r3, #4
   3ad74:	beq	3aba4 <__assert_fail@plt+0x276a0>
   3ad78:	ldr	r1, [pc, #876]	; 3b0ec <__assert_fail@plt+0x27be8>
   3ad7c:	mov	r0, fp
   3ad80:	mov	r2, r3
   3ad84:	add	r1, pc, r1
   3ad88:	bl	13204 <__printf_chk@plt>
   3ad8c:	b	3ac1c <__assert_fail@plt+0x27718>
   3ad90:	ldr	r1, [pc, #856]	; 3b0f0 <__assert_fail@plt+0x27bec>
   3ad94:	mov	r0, #1
   3ad98:	add	r1, pc, r1
   3ad9c:	bl	13204 <__printf_chk@plt>
   3ada0:	b	3a488 <__assert_fail@plt+0x26f84>
   3ada4:	ldr	r1, [pc, #840]	; 3b0f4 <__assert_fail@plt+0x27bf0>
   3ada8:	mov	r0, #1
   3adac:	add	r1, pc, r1
   3adb0:	bl	13204 <__printf_chk@plt>
   3adb4:	b	3a488 <__assert_fail@plt+0x26f84>
   3adb8:	ldr	r1, [pc, #824]	; 3b0f8 <__assert_fail@plt+0x27bf4>
   3adbc:	mov	r0, #1
   3adc0:	add	r1, pc, r1
   3adc4:	bl	13204 <__printf_chk@plt>
   3adc8:	b	3a488 <__assert_fail@plt+0x26f84>
   3adcc:	ldr	r1, [pc, #808]	; 3b0fc <__assert_fail@plt+0x27bf8>
   3add0:	mov	r0, #1
   3add4:	add	r1, pc, r1
   3add8:	bl	13204 <__printf_chk@plt>
   3addc:	b	3a488 <__assert_fail@plt+0x26f84>
   3ade0:	ldr	r1, [pc, #792]	; 3b100 <__assert_fail@plt+0x27bfc>
   3ade4:	mov	r0, #1
   3ade8:	add	r1, pc, r1
   3adec:	bl	13204 <__printf_chk@plt>
   3adf0:	b	3a488 <__assert_fail@plt+0x26f84>
   3adf4:	ldr	r9, [r4, #16]
   3adf8:	mov	r1, fp
   3adfc:	mov	r4, #1
   3ae00:	add	r3, sp, #176	; 0xb0
   3ae04:	str	fp, [sp, #128]	; 0x80
   3ae08:	mov	r0, r9
   3ae0c:	str	r3, [sp, #144]	; 0x90
   3ae10:	str	fp, [sp, #132]	; 0x84
   3ae14:	str	fp, [sp, #136]	; 0x88
   3ae18:	str	fp, [sp, #140]	; 0x8c
   3ae1c:	str	r5, [sp, #112]	; 0x70
   3ae20:	str	r7, [sp, #124]	; 0x7c
   3ae24:	str	fp, [sp, #160]	; 0xa0
   3ae28:	str	fp, [sp, #164]	; 0xa4
   3ae2c:	str	fp, [sp, #168]	; 0xa8
   3ae30:	str	fp, [sp, #172]	; 0xac
   3ae34:	str	r7, [sp, #156]	; 0x9c
   3ae38:	str	r4, [sp, #116]	; 0x74
   3ae3c:	str	r4, [sp, #120]	; 0x78
   3ae40:	str	r4, [sp, #148]	; 0x94
   3ae44:	str	r4, [sp, #152]	; 0x98
   3ae48:	bl	12d60 <elf_getident@plt>
   3ae4c:	add	r1, sp, #144	; 0x90
   3ae50:	add	r2, sp, #112	; 0x70
   3ae54:	ldrb	r3, [r0, #5]
   3ae58:	mov	r0, r9
   3ae5c:	bl	12f94 <gelf_xlatetom@plt>
   3ae60:	cmp	r0, #0
   3ae64:	beq	3afd0 <__assert_fail@plt+0x27acc>
   3ae68:	cmp	r7, #4
   3ae6c:	beq	3af34 <__assert_fail@plt+0x27a30>
   3ae70:	ldrd	sl, [sp, #184]	; 0xb8
   3ae74:	mov	r0, r4
   3ae78:	ldr	r1, [pc, #644]	; 3b104 <__assert_fail@plt+0x27c00>
   3ae7c:	ldrd	r2, [sp, #176]	; 0xb0
   3ae80:	add	r1, pc, r1
   3ae84:	strd	sl, [sp]
   3ae88:	bl	13204 <__printf_chk@plt>
   3ae8c:	b	3a430 <__assert_fail@plt+0x26f2c>
   3ae90:	ldr	r1, [pc, #624]	; 3b108 <__assert_fail@plt+0x27c04>
   3ae94:	mov	r0, #1
   3ae98:	add	r1, pc, r1
   3ae9c:	bl	13204 <__printf_chk@plt>
   3aea0:	b	3a488 <__assert_fail@plt+0x26f84>
   3aea4:	ldr	r1, [pc, #608]	; 3b10c <__assert_fail@plt+0x27c08>
   3aea8:	mov	r0, fp
   3aeac:	add	r1, pc, r1
   3aeb0:	bl	13204 <__printf_chk@plt>
   3aeb4:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3aeb8:	ldr	fp, [sp, #72]	; 0x48
   3aebc:	mov	r2, sl
   3aec0:	str	ip, [sp, #116]	; 0x74
   3aec4:	str	ip, [sp, #148]	; 0x94
   3aec8:	str	r3, [sp, #124]	; 0x7c
   3aecc:	str	r3, [sp, #156]	; 0x9c
   3aed0:	add	r3, sp, #96	; 0x60
   3aed4:	str	r9, [sp, #112]	; 0x70
   3aed8:	str	r3, [sp, #144]	; 0x90
   3aedc:	ldr	r0, [r4, #16]
   3aee0:	ldrb	r3, [fp, #5]
   3aee4:	ldr	r1, [sp, #24]
   3aee8:	str	ip, [sp, #12]
   3aeec:	bl	12f94 <gelf_xlatetom@plt>
   3aef0:	ldr	ip, [sp, #12]
   3aef4:	cmp	r0, #0
   3aef8:	beq	3ac7c <__assert_fail@plt+0x27778>
   3aefc:	ldr	r1, [pc, #524]	; 3b110 <__assert_fail@plt+0x27c0c>
   3af00:	mov	r0, ip
   3af04:	ldrd	r2, [sp, #96]	; 0x60
   3af08:	add	r1, pc, r1
   3af0c:	bl	13204 <__printf_chk@plt>
   3af10:	b	3aa0c <__assert_fail@plt+0x27508>
   3af14:	mov	r8, #0
   3af18:	b	3a9f8 <__assert_fail@plt+0x274f4>
   3af1c:	ldrb	r2, [r4]
   3af20:	mov	r3, #0
   3af24:	b	3ac94 <__assert_fail@plt+0x27790>
   3af28:	ldr	r4, [pc, #484]	; 3b114 <__assert_fail@plt+0x27c10>
   3af2c:	add	r4, pc, r4
   3af30:	b	3a8c4 <__assert_fail@plt+0x273c0>
   3af34:	ldr	r1, [pc, #476]	; 3b118 <__assert_fail@plt+0x27c14>
   3af38:	mov	r0, r4
   3af3c:	ldr	r2, [sp, #176]	; 0xb0
   3af40:	add	r1, pc, r1
   3af44:	ldr	r3, [sp, #180]	; 0xb4
   3af48:	bl	13204 <__printf_chk@plt>
   3af4c:	b	3a430 <__assert_fail@plt+0x26f2c>
   3af50:	mov	r4, fp
   3af54:	ldr	r3, [sp, #176]	; 0xb0
   3af58:	mov	r7, fp
   3af5c:	mov	ip, fp
   3af60:	ldr	sl, [sp, #180]	; 0xb4
   3af64:	ldr	r5, [sp, #184]	; 0xb8
   3af68:	b	3a2ac <__assert_fail@plt+0x26da8>
   3af6c:	bl	12dc0 <__stack_chk_fail@plt>
   3af70:	mov	r0, #1
   3af74:	ldr	r1, [sp, #84]	; 0x54
   3af78:	bl	13204 <__printf_chk@plt>
   3af7c:	ldr	r3, [sp, #96]	; 0x60
   3af80:	bic	r3, r3, #2
   3af84:	str	r3, [sp, #96]	; 0x60
   3af88:	cmp	r3, #0
   3af8c:	beq	3ac1c <__assert_fail@plt+0x27718>
   3af90:	mov	r0, #32
   3af94:	bl	131b0 <putchar@plt>
   3af98:	ldr	r3, [sp, #96]	; 0x60
   3af9c:	b	3ac08 <__assert_fail@plt+0x27704>
   3afa0:	mov	r0, #1
   3afa4:	ldr	r1, [sp, #88]	; 0x58
   3afa8:	bl	13204 <__printf_chk@plt>
   3afac:	ldr	r3, [sp, #96]	; 0x60
   3afb0:	bic	r3, r3, #1
   3afb4:	str	r3, [sp, #96]	; 0x60
   3afb8:	cmp	r3, #0
   3afbc:	beq	3ac1c <__assert_fail@plt+0x27718>
   3afc0:	mov	r0, #32
   3afc4:	bl	131b0 <putchar@plt>
   3afc8:	ldr	r3, [sp, #96]	; 0x60
   3afcc:	b	3ac00 <__assert_fail@plt+0x276fc>
   3afd0:	mvn	r0, #0
   3afd4:	bl	130a8 <elf_errmsg@plt>
   3afd8:	bl	12fdc <puts@plt>
   3afdc:	b	3a430 <__assert_fail@plt+0x26f2c>
   3afe0:	mov	r0, r7
   3afe4:	bl	12fe8 <malloc@plt>
   3afe8:	subs	r8, r0, #0
   3afec:	bne	3a50c <__assert_fail@plt+0x27008>
   3aff0:	b	3a0e8 <__assert_fail@plt+0x26be4>
   3aff4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   3aff8:	strdeq	r0, [r0], -r8
   3affc:	andeq	ip, r0, r0, ror #26
   3b000:	strdeq	ip, [r0], -r8
   3b004:	andeq	r6, r0, ip, asr r4
   3b008:	andeq	ip, r0, r4, asr #24
   3b00c:	andeq	ip, r0, r0, asr #24
   3b010:	andeq	ip, r0, r4, lsl ip
   3b014:	andeq	ip, r0, r0, lsr ip
   3b018:	andeq	ip, r0, r0, ror #23
   3b01c:	andeq	ip, r0, r4, lsr #24
   3b020:			; <UNDEFINED> instruction: 0x0000cbb4
   3b024:	muleq	r0, r8, fp
   3b028:	andeq	ip, r0, r0, ror fp
   3b02c:	ldrdeq	r2, [r0], -r0
   3b030:	ldrdeq	ip, [r0], -r0
   3b034:	andeq	ip, r0, r0, ror #22
   3b038:	andeq	ip, r0, r0, asr fp
   3b03c:	andeq	r6, r0, ip, ror #8
   3b040:	andeq	ip, r0, ip, lsl #20
   3b044:	andeq	ip, r0, ip, lsr fp
   3b048:	andeq	ip, r0, r8, lsr #22
   3b04c:	andeq	ip, r0, ip, lsr fp
   3b050:	andeq	r9, r0, r0, ror r5
   3b054:	ldrdeq	ip, [r0], -r0
   3b058:			; <UNDEFINED> instruction: 0x0000c8b4
   3b05c:	andeq	ip, r0, r8, ror #16
   3b060:	andeq	r2, r0, r4, lsr #20
   3b064:	andeq	ip, r0, r8, lsr #16
   3b068:	strdeq	ip, [r0], -r4
   3b06c:	andeq	r5, r0, ip, lsl #8
   3b070:	andeq	ip, r0, r8, ror r7
   3b074:	andeq	ip, r0, r4, ror r7
   3b078:	andeq	ip, r0, r4, lsl #12
   3b07c:	andeq	ip, r0, r0, ror #16
   3b080:	andeq	ip, r0, r4, lsl #9
   3b084:	andeq	r0, r0, r0, lsl #6
   3b088:			; <UNDEFINED> instruction: 0x0000c2b8
   3b08c:	andeq	ip, r0, r0, asr #5
   3b090:	muleq	r0, r8, r2
   3b094:	andeq	ip, r0, r0, lsl #15
   3b098:	andeq	ip, r0, r0, lsl #15
   3b09c:			; <UNDEFINED> instruction: 0x000052b8
   3b0a0:	andeq	ip, r0, r8, lsr r6
   3b0a4:	andeq	ip, r0, ip, asr r6
   3b0a8:	andeq	ip, r0, ip, lsr #12
   3b0ac:	andeq	ip, r0, ip, asr r5
   3b0b0:	andeq	ip, r0, r0, lsl #12
   3b0b4:	andeq	ip, r0, ip, asr #11
   3b0b8:	andeq	ip, r0, r8, ror #11
   3b0bc:	ldrdeq	r2, [r0], -r0
   3b0c0:	strdeq	ip, [r0], -r0
   3b0c4:	andeq	r5, r0, r4, ror #2
   3b0c8:	andeq	ip, r0, r4, ror #9
   3b0cc:	andeq	ip, r0, r0, ror #7
   3b0d0:	andeq	ip, r0, ip, asr #7
   3b0d4:	andeq	ip, r0, r4, ror #9
   3b0d8:	andeq	ip, r0, r0, ror #6
   3b0dc:	andeq	r9, r0, ip, lsl #10
   3b0e0:	muleq	r0, r0, r2
   3b0e4:	andeq	ip, r0, r0, asr #5
   3b0e8:	andeq	ip, r0, ip, asr r3
   3b0ec:	andeq	ip, r0, r0, ror #6
   3b0f0:	andeq	ip, r0, r0, ror r2
   3b0f4:	andeq	ip, r0, r4, lsr r2
   3b0f8:	strdeq	ip, [r0], -r8
   3b0fc:	andeq	ip, r0, ip, lsl r2
   3b100:	andeq	ip, r0, r8, asr r3
   3b104:	andeq	ip, r0, r0, lsl #2
   3b108:	andeq	ip, r0, r0, lsr r1
   3b10c:			; <UNDEFINED> instruction: 0x0000c1b4
   3b110:	andeq	ip, r0, r0, lsl #1
   3b114:	strheq	r7, [r0], -r8
   3b118:	andeq	ip, r0, r4, lsr r0
   3b11c:	subs	ip, r0, #0
   3b120:	push	{r4, lr}
   3b124:	sub	sp, sp, #16
   3b128:	beq	3b15c <__assert_fail@plt+0x27c58>
   3b12c:	ldr	r4, [sp, #24]
   3b130:	ldr	lr, [sp, #28]
   3b134:	str	r4, [sp]
   3b138:	str	lr, [sp, #4]
   3b13c:	ldr	r4, [sp, #32]
   3b140:	ldr	lr, [sp, #36]	; 0x24
   3b144:	str	r4, [sp, #8]
   3b148:	str	lr, [sp, #12]
   3b14c:	ldr	ip, [ip, #152]	; 0x98
   3b150:	blx	ip
   3b154:	add	sp, sp, #16
   3b158:	pop	{r4, pc}
   3b15c:	mvn	r0, #0
   3b160:	b	3b154 <__assert_fail@plt+0x27c50>
   3b164:	ldr	r0, [r0, #192]	; 0xc0
   3b168:	bx	lr
   3b16c:	push	{r3, r4, r5, r6, r7, lr}
   3b170:	mov	r1, r3
   3b174:	ldr	r7, [sp, #24]
   3b178:	mov	r4, r2
   3b17c:	ldr	r6, [sp, #28]
   3b180:	mov	r5, r3
   3b184:	ldr	ip, [r0, #112]	; 0x70
   3b188:	mov	r0, r2
   3b18c:	mov	r2, r7
   3b190:	mov	r3, r6
   3b194:	blx	ip
   3b198:	cmp	r5, #0
   3b19c:	cmpeq	r4, #37	; 0x25
   3b1a0:	movhi	r3, #0
   3b1a4:	movls	r3, #1
   3b1a8:	cmp	r0, #0
   3b1ac:	movne	r3, #0
   3b1b0:	andeq	r3, r3, #1
   3b1b4:	cmp	r3, #0
   3b1b8:	popeq	{r3, r4, r5, r6, r7, pc}
   3b1bc:	ldr	r3, [pc, #32]	; 3b1e4 <__assert_fail@plt+0x27ce0>
   3b1c0:	add	r3, pc, r3
   3b1c4:	ldr	r0, [r3, r4, lsl #3]
   3b1c8:	cmp	r0, #0
   3b1cc:	addne	r4, r3, r4, lsl #3
   3b1d0:	strne	r0, [r7]
   3b1d4:	movne	r0, #1
   3b1d8:	ldrne	r3, [r4, #4]
   3b1dc:	strne	r3, [r6]
   3b1e0:	pop	{r3, r4, r5, r6, r7, pc}
   3b1e4:	strdeq	sp, [r1], -r8
   3b1e8:	push	{r4, r5, r6, r7, r8, lr}
   3b1ec:	sub	sp, sp, #16
   3b1f0:	mov	r6, r1
   3b1f4:	mov	r8, r2
   3b1f8:	ldr	r3, [sp, #52]	; 0x34
   3b1fc:	ldrd	r4, [sp, #40]	; 0x28
   3b200:	ldr	r7, [sp, #48]	; 0x30
   3b204:	str	r3, [sp, #12]
   3b208:	strd	r4, [sp]
   3b20c:	str	r7, [sp, #8]
   3b210:	ldr	r3, [r0, #104]	; 0x68
   3b214:	blx	r3
   3b218:	cmp	r0, #0
   3b21c:	bne	3b264 <__assert_fail@plt+0x27d60>
   3b220:	ldrb	r3, [r6]
   3b224:	cmp	r3, #103	; 0x67
   3b228:	bne	3b264 <__assert_fail@plt+0x27d60>
   3b22c:	ldrb	r3, [r6, #1]
   3b230:	cmp	r3, #110	; 0x6e
   3b234:	bne	3b264 <__assert_fail@plt+0x27d60>
   3b238:	ldrb	r3, [r6, #2]
   3b23c:	cmp	r3, #117	; 0x75
   3b240:	bne	3b264 <__assert_fail@plt+0x27d60>
   3b244:	ldrb	r3, [r6, #3]
   3b248:	cmp	r3, #0
   3b24c:	bne	3b264 <__assert_fail@plt+0x27d60>
   3b250:	cmp	r8, #32
   3b254:	ldreq	r3, [pc, #16]	; 3b26c <__assert_fail@plt+0x27d68>
   3b258:	moveq	r0, #1
   3b25c:	addeq	r3, pc, r3
   3b260:	streq	r3, [r7]
   3b264:	add	sp, sp, #16
   3b268:	pop	{r4, r5, r6, r7, r8, pc}
   3b26c:	andeq	ip, r0, r4
   3b270:	push	{r4, lr}
   3b274:	bl	12fe8 <malloc@plt>
   3b278:	subs	r4, r0, #0
   3b27c:	popne	{r4, pc}
   3b280:	ldr	r1, [pc, #24]	; 3b2a0 <__assert_fail@plt+0x27d9c>
   3b284:	mov	r2, #5
   3b288:	add	r1, pc, r1
   3b28c:	bl	12d84 <dcgettext@plt>
   3b290:	mov	r1, r4
   3b294:	mov	r2, r0
   3b298:	mov	r0, #1
   3b29c:	bl	12f70 <error@plt>
   3b2a0:			; <UNDEFINED> instruction: 0x000046b0
   3b2a4:	push	{r4, lr}
   3b2a8:	bl	12c4c <calloc@plt>
   3b2ac:	subs	r4, r0, #0
   3b2b0:	popne	{r4, pc}
   3b2b4:	ldr	r1, [pc, #24]	; 3b2d4 <__assert_fail@plt+0x27dd0>
   3b2b8:	mov	r2, #5
   3b2bc:	add	r1, pc, r1
   3b2c0:	bl	12d84 <dcgettext@plt>
   3b2c4:	mov	r1, r4
   3b2c8:	mov	r2, r0
   3b2cc:	mov	r0, #1
   3b2d0:	bl	12f70 <error@plt>
   3b2d4:	andeq	r4, r0, ip, ror r6
   3b2d8:	push	{r4, lr}
   3b2dc:	bl	12df0 <realloc@plt>
   3b2e0:	subs	r4, r0, #0
   3b2e4:	popne	{r4, pc}
   3b2e8:	ldr	r1, [pc, #24]	; 3b308 <__assert_fail@plt+0x27e04>
   3b2ec:	mov	r2, #5
   3b2f0:	add	r1, pc, r1
   3b2f4:	bl	12d84 <dcgettext@plt>
   3b2f8:	mov	r1, r4
   3b2fc:	mov	r2, r0
   3b300:	mov	r0, #1
   3b304:	bl	12f70 <error@plt>
   3b308:	andeq	r4, r0, r8, asr #12
   3b30c:	push	{r4, lr}
   3b310:	sub	sp, sp, #8
   3b314:	ldr	lr, [pc, #104]	; 3b384 <__assert_fail@plt+0x27e80>
   3b318:	mov	r4, r0
   3b31c:	ldr	ip, [pc, #100]	; 3b388 <__assert_fail@plt+0x27e84>
   3b320:	ldr	r2, [pc, #100]	; 3b38c <__assert_fail@plt+0x27e88>
   3b324:	add	lr, pc, lr
   3b328:	ldr	r3, [r1, #40]	; 0x28
   3b32c:	add	ip, pc, ip
   3b330:	str	lr, [sp]
   3b334:	mov	r1, #1
   3b338:	str	ip, [sp, #4]
   3b33c:	add	r2, pc, r2
   3b340:	bl	13258 <__fprintf_chk@plt>
   3b344:	ldr	r1, [pc, #68]	; 3b390 <__assert_fail@plt+0x27e8c>
   3b348:	mov	r2, #5
   3b34c:	mov	r0, #0
   3b350:	add	r1, pc, r1
   3b354:	bl	12d84 <dcgettext@plt>
   3b358:	ldr	ip, [pc, #52]	; 3b394 <__assert_fail@plt+0x27e90>
   3b35c:	ldr	r3, [pc, #52]	; 3b398 <__assert_fail@plt+0x27e94>
   3b360:	mov	r1, #1
   3b364:	add	ip, pc, ip
   3b368:	str	ip, [sp]
   3b36c:	add	r3, pc, r3
   3b370:	mov	r2, r0
   3b374:	mov	r0, r4
   3b378:	bl	13258 <__fprintf_chk@plt>
   3b37c:	add	sp, sp, #8
   3b380:	pop	{r4, pc}
   3b384:	andeq	r3, r0, r0, lsr #20
   3b388:	andeq	fp, r0, r0, asr pc
   3b38c:	andeq	fp, r0, r4, lsr pc
   3b390:	andeq	fp, r0, r4, lsr pc
   3b394:	strdeq	fp, [r0], -r0
   3b398:	andeq	fp, r0, r0, ror #31
   3b39c:	subs	r2, r1, #1
   3b3a0:	bxeq	lr
   3b3a4:	bcc	3b57c <__assert_fail@plt+0x28078>
   3b3a8:	cmp	r0, r1
   3b3ac:	bls	3b560 <__assert_fail@plt+0x2805c>
   3b3b0:	tst	r1, r2
   3b3b4:	beq	3b56c <__assert_fail@plt+0x28068>
   3b3b8:	clz	r3, r0
   3b3bc:	clz	r2, r1
   3b3c0:	sub	r3, r2, r3
   3b3c4:	rsbs	r3, r3, #31
   3b3c8:	addne	r3, r3, r3, lsl #1
   3b3cc:	mov	r2, #0
   3b3d0:	addne	pc, pc, r3, lsl #2
   3b3d4:	nop	{0}
   3b3d8:	cmp	r0, r1, lsl #31
   3b3dc:	adc	r2, r2, r2
   3b3e0:	subcs	r0, r0, r1, lsl #31
   3b3e4:	cmp	r0, r1, lsl #30
   3b3e8:	adc	r2, r2, r2
   3b3ec:	subcs	r0, r0, r1, lsl #30
   3b3f0:	cmp	r0, r1, lsl #29
   3b3f4:	adc	r2, r2, r2
   3b3f8:	subcs	r0, r0, r1, lsl #29
   3b3fc:	cmp	r0, r1, lsl #28
   3b400:	adc	r2, r2, r2
   3b404:	subcs	r0, r0, r1, lsl #28
   3b408:	cmp	r0, r1, lsl #27
   3b40c:	adc	r2, r2, r2
   3b410:	subcs	r0, r0, r1, lsl #27
   3b414:	cmp	r0, r1, lsl #26
   3b418:	adc	r2, r2, r2
   3b41c:	subcs	r0, r0, r1, lsl #26
   3b420:	cmp	r0, r1, lsl #25
   3b424:	adc	r2, r2, r2
   3b428:	subcs	r0, r0, r1, lsl #25
   3b42c:	cmp	r0, r1, lsl #24
   3b430:	adc	r2, r2, r2
   3b434:	subcs	r0, r0, r1, lsl #24
   3b438:	cmp	r0, r1, lsl #23
   3b43c:	adc	r2, r2, r2
   3b440:	subcs	r0, r0, r1, lsl #23
   3b444:	cmp	r0, r1, lsl #22
   3b448:	adc	r2, r2, r2
   3b44c:	subcs	r0, r0, r1, lsl #22
   3b450:	cmp	r0, r1, lsl #21
   3b454:	adc	r2, r2, r2
   3b458:	subcs	r0, r0, r1, lsl #21
   3b45c:	cmp	r0, r1, lsl #20
   3b460:	adc	r2, r2, r2
   3b464:	subcs	r0, r0, r1, lsl #20
   3b468:	cmp	r0, r1, lsl #19
   3b46c:	adc	r2, r2, r2
   3b470:	subcs	r0, r0, r1, lsl #19
   3b474:	cmp	r0, r1, lsl #18
   3b478:	adc	r2, r2, r2
   3b47c:	subcs	r0, r0, r1, lsl #18
   3b480:	cmp	r0, r1, lsl #17
   3b484:	adc	r2, r2, r2
   3b488:	subcs	r0, r0, r1, lsl #17
   3b48c:	cmp	r0, r1, lsl #16
   3b490:	adc	r2, r2, r2
   3b494:	subcs	r0, r0, r1, lsl #16
   3b498:	cmp	r0, r1, lsl #15
   3b49c:	adc	r2, r2, r2
   3b4a0:	subcs	r0, r0, r1, lsl #15
   3b4a4:	cmp	r0, r1, lsl #14
   3b4a8:	adc	r2, r2, r2
   3b4ac:	subcs	r0, r0, r1, lsl #14
   3b4b0:	cmp	r0, r1, lsl #13
   3b4b4:	adc	r2, r2, r2
   3b4b8:	subcs	r0, r0, r1, lsl #13
   3b4bc:	cmp	r0, r1, lsl #12
   3b4c0:	adc	r2, r2, r2
   3b4c4:	subcs	r0, r0, r1, lsl #12
   3b4c8:	cmp	r0, r1, lsl #11
   3b4cc:	adc	r2, r2, r2
   3b4d0:	subcs	r0, r0, r1, lsl #11
   3b4d4:	cmp	r0, r1, lsl #10
   3b4d8:	adc	r2, r2, r2
   3b4dc:	subcs	r0, r0, r1, lsl #10
   3b4e0:	cmp	r0, r1, lsl #9
   3b4e4:	adc	r2, r2, r2
   3b4e8:	subcs	r0, r0, r1, lsl #9
   3b4ec:	cmp	r0, r1, lsl #8
   3b4f0:	adc	r2, r2, r2
   3b4f4:	subcs	r0, r0, r1, lsl #8
   3b4f8:	cmp	r0, r1, lsl #7
   3b4fc:	adc	r2, r2, r2
   3b500:	subcs	r0, r0, r1, lsl #7
   3b504:	cmp	r0, r1, lsl #6
   3b508:	adc	r2, r2, r2
   3b50c:	subcs	r0, r0, r1, lsl #6
   3b510:	cmp	r0, r1, lsl #5
   3b514:	adc	r2, r2, r2
   3b518:	subcs	r0, r0, r1, lsl #5
   3b51c:	cmp	r0, r1, lsl #4
   3b520:	adc	r2, r2, r2
   3b524:	subcs	r0, r0, r1, lsl #4
   3b528:	cmp	r0, r1, lsl #3
   3b52c:	adc	r2, r2, r2
   3b530:	subcs	r0, r0, r1, lsl #3
   3b534:	cmp	r0, r1, lsl #2
   3b538:	adc	r2, r2, r2
   3b53c:	subcs	r0, r0, r1, lsl #2
   3b540:	cmp	r0, r1, lsl #1
   3b544:	adc	r2, r2, r2
   3b548:	subcs	r0, r0, r1, lsl #1
   3b54c:	cmp	r0, r1
   3b550:	adc	r2, r2, r2
   3b554:	subcs	r0, r0, r1
   3b558:	mov	r0, r2
   3b55c:	bx	lr
   3b560:	moveq	r0, #1
   3b564:	movne	r0, #0
   3b568:	bx	lr
   3b56c:	clz	r2, r1
   3b570:	rsb	r2, r2, #31
   3b574:	lsr	r0, r0, r2
   3b578:	bx	lr
   3b57c:	cmp	r0, #0
   3b580:	mvnne	r0, #0
   3b584:	b	3bbdc <__assert_fail@plt+0x286d8>
   3b588:	cmp	r1, #0
   3b58c:	beq	3b57c <__assert_fail@plt+0x28078>
   3b590:	push	{r0, r1, lr}
   3b594:	bl	3b39c <__assert_fail@plt+0x27e98>
   3b598:	pop	{r1, r2, lr}
   3b59c:	mul	r3, r2, r0
   3b5a0:	sub	r1, r1, r3
   3b5a4:	bx	lr
   3b5a8:	cmp	r1, #0
   3b5ac:	beq	3b7b8 <__assert_fail@plt+0x282b4>
   3b5b0:	eor	ip, r0, r1
   3b5b4:	rsbmi	r1, r1, #0
   3b5b8:	subs	r2, r1, #1
   3b5bc:	beq	3b784 <__assert_fail@plt+0x28280>
   3b5c0:	movs	r3, r0
   3b5c4:	rsbmi	r3, r0, #0
   3b5c8:	cmp	r3, r1
   3b5cc:	bls	3b790 <__assert_fail@plt+0x2828c>
   3b5d0:	tst	r1, r2
   3b5d4:	beq	3b7a0 <__assert_fail@plt+0x2829c>
   3b5d8:	clz	r2, r3
   3b5dc:	clz	r0, r1
   3b5e0:	sub	r2, r0, r2
   3b5e4:	rsbs	r2, r2, #31
   3b5e8:	addne	r2, r2, r2, lsl #1
   3b5ec:	mov	r0, #0
   3b5f0:	addne	pc, pc, r2, lsl #2
   3b5f4:	nop	{0}
   3b5f8:	cmp	r3, r1, lsl #31
   3b5fc:	adc	r0, r0, r0
   3b600:	subcs	r3, r3, r1, lsl #31
   3b604:	cmp	r3, r1, lsl #30
   3b608:	adc	r0, r0, r0
   3b60c:	subcs	r3, r3, r1, lsl #30
   3b610:	cmp	r3, r1, lsl #29
   3b614:	adc	r0, r0, r0
   3b618:	subcs	r3, r3, r1, lsl #29
   3b61c:	cmp	r3, r1, lsl #28
   3b620:	adc	r0, r0, r0
   3b624:	subcs	r3, r3, r1, lsl #28
   3b628:	cmp	r3, r1, lsl #27
   3b62c:	adc	r0, r0, r0
   3b630:	subcs	r3, r3, r1, lsl #27
   3b634:	cmp	r3, r1, lsl #26
   3b638:	adc	r0, r0, r0
   3b63c:	subcs	r3, r3, r1, lsl #26
   3b640:	cmp	r3, r1, lsl #25
   3b644:	adc	r0, r0, r0
   3b648:	subcs	r3, r3, r1, lsl #25
   3b64c:	cmp	r3, r1, lsl #24
   3b650:	adc	r0, r0, r0
   3b654:	subcs	r3, r3, r1, lsl #24
   3b658:	cmp	r3, r1, lsl #23
   3b65c:	adc	r0, r0, r0
   3b660:	subcs	r3, r3, r1, lsl #23
   3b664:	cmp	r3, r1, lsl #22
   3b668:	adc	r0, r0, r0
   3b66c:	subcs	r3, r3, r1, lsl #22
   3b670:	cmp	r3, r1, lsl #21
   3b674:	adc	r0, r0, r0
   3b678:	subcs	r3, r3, r1, lsl #21
   3b67c:	cmp	r3, r1, lsl #20
   3b680:	adc	r0, r0, r0
   3b684:	subcs	r3, r3, r1, lsl #20
   3b688:	cmp	r3, r1, lsl #19
   3b68c:	adc	r0, r0, r0
   3b690:	subcs	r3, r3, r1, lsl #19
   3b694:	cmp	r3, r1, lsl #18
   3b698:	adc	r0, r0, r0
   3b69c:	subcs	r3, r3, r1, lsl #18
   3b6a0:	cmp	r3, r1, lsl #17
   3b6a4:	adc	r0, r0, r0
   3b6a8:	subcs	r3, r3, r1, lsl #17
   3b6ac:	cmp	r3, r1, lsl #16
   3b6b0:	adc	r0, r0, r0
   3b6b4:	subcs	r3, r3, r1, lsl #16
   3b6b8:	cmp	r3, r1, lsl #15
   3b6bc:	adc	r0, r0, r0
   3b6c0:	subcs	r3, r3, r1, lsl #15
   3b6c4:	cmp	r3, r1, lsl #14
   3b6c8:	adc	r0, r0, r0
   3b6cc:	subcs	r3, r3, r1, lsl #14
   3b6d0:	cmp	r3, r1, lsl #13
   3b6d4:	adc	r0, r0, r0
   3b6d8:	subcs	r3, r3, r1, lsl #13
   3b6dc:	cmp	r3, r1, lsl #12
   3b6e0:	adc	r0, r0, r0
   3b6e4:	subcs	r3, r3, r1, lsl #12
   3b6e8:	cmp	r3, r1, lsl #11
   3b6ec:	adc	r0, r0, r0
   3b6f0:	subcs	r3, r3, r1, lsl #11
   3b6f4:	cmp	r3, r1, lsl #10
   3b6f8:	adc	r0, r0, r0
   3b6fc:	subcs	r3, r3, r1, lsl #10
   3b700:	cmp	r3, r1, lsl #9
   3b704:	adc	r0, r0, r0
   3b708:	subcs	r3, r3, r1, lsl #9
   3b70c:	cmp	r3, r1, lsl #8
   3b710:	adc	r0, r0, r0
   3b714:	subcs	r3, r3, r1, lsl #8
   3b718:	cmp	r3, r1, lsl #7
   3b71c:	adc	r0, r0, r0
   3b720:	subcs	r3, r3, r1, lsl #7
   3b724:	cmp	r3, r1, lsl #6
   3b728:	adc	r0, r0, r0
   3b72c:	subcs	r3, r3, r1, lsl #6
   3b730:	cmp	r3, r1, lsl #5
   3b734:	adc	r0, r0, r0
   3b738:	subcs	r3, r3, r1, lsl #5
   3b73c:	cmp	r3, r1, lsl #4
   3b740:	adc	r0, r0, r0
   3b744:	subcs	r3, r3, r1, lsl #4
   3b748:	cmp	r3, r1, lsl #3
   3b74c:	adc	r0, r0, r0
   3b750:	subcs	r3, r3, r1, lsl #3
   3b754:	cmp	r3, r1, lsl #2
   3b758:	adc	r0, r0, r0
   3b75c:	subcs	r3, r3, r1, lsl #2
   3b760:	cmp	r3, r1, lsl #1
   3b764:	adc	r0, r0, r0
   3b768:	subcs	r3, r3, r1, lsl #1
   3b76c:	cmp	r3, r1
   3b770:	adc	r0, r0, r0
   3b774:	subcs	r3, r3, r1
   3b778:	cmp	ip, #0
   3b77c:	rsbmi	r0, r0, #0
   3b780:	bx	lr
   3b784:	teq	ip, r0
   3b788:	rsbmi	r0, r0, #0
   3b78c:	bx	lr
   3b790:	movcc	r0, #0
   3b794:	asreq	r0, ip, #31
   3b798:	orreq	r0, r0, #1
   3b79c:	bx	lr
   3b7a0:	clz	r2, r1
   3b7a4:	rsb	r2, r2, #31
   3b7a8:	cmp	ip, #0
   3b7ac:	lsr	r0, r3, r2
   3b7b0:	rsbmi	r0, r0, #0
   3b7b4:	bx	lr
   3b7b8:	cmp	r0, #0
   3b7bc:	mvngt	r0, #-2147483648	; 0x80000000
   3b7c0:	movlt	r0, #-2147483648	; 0x80000000
   3b7c4:	b	3bbdc <__assert_fail@plt+0x286d8>
   3b7c8:	cmp	r1, #0
   3b7cc:	beq	3b7b8 <__assert_fail@plt+0x282b4>
   3b7d0:	push	{r0, r1, lr}
   3b7d4:	bl	3b5b0 <__assert_fail@plt+0x280ac>
   3b7d8:	pop	{r1, r2, lr}
   3b7dc:	mul	r3, r2, r0
   3b7e0:	sub	r1, r1, r3
   3b7e4:	bx	lr
   3b7e8:	eor	r1, r1, #-2147483648	; 0x80000000
   3b7ec:	b	3b7f4 <__assert_fail@plt+0x282f0>
   3b7f0:	eor	r3, r3, #-2147483648	; 0x80000000
   3b7f4:	push	{r4, r5, lr}
   3b7f8:	lsl	r4, r1, #1
   3b7fc:	lsl	r5, r3, #1
   3b800:	teq	r4, r5
   3b804:	teqeq	r0, r2
   3b808:	orrsne	ip, r4, r0
   3b80c:	orrsne	ip, r5, r2
   3b810:	mvnsne	ip, r4, asr #21
   3b814:	mvnsne	ip, r5, asr #21
   3b818:	beq	3ba04 <__assert_fail@plt+0x28500>
   3b81c:	lsr	r4, r4, #21
   3b820:	rsbs	r5, r4, r5, lsr #21
   3b824:	rsblt	r5, r5, #0
   3b828:	ble	3b848 <__assert_fail@plt+0x28344>
   3b82c:	add	r4, r4, r5
   3b830:	eor	r2, r0, r2
   3b834:	eor	r3, r1, r3
   3b838:	eor	r0, r2, r0
   3b83c:	eor	r1, r3, r1
   3b840:	eor	r2, r0, r2
   3b844:	eor	r3, r1, r3
   3b848:	cmp	r5, #54	; 0x36
   3b84c:	pophi	{r4, r5, pc}
   3b850:	tst	r1, #-2147483648	; 0x80000000
   3b854:	lsl	r1, r1, #12
   3b858:	mov	ip, #1048576	; 0x100000
   3b85c:	orr	r1, ip, r1, lsr #12
   3b860:	beq	3b86c <__assert_fail@plt+0x28368>
   3b864:	rsbs	r0, r0, #0
   3b868:	rsc	r1, r1, #0
   3b86c:	tst	r3, #-2147483648	; 0x80000000
   3b870:	lsl	r3, r3, #12
   3b874:	orr	r3, ip, r3, lsr #12
   3b878:	beq	3b884 <__assert_fail@plt+0x28380>
   3b87c:	rsbs	r2, r2, #0
   3b880:	rsc	r3, r3, #0
   3b884:	teq	r4, r5
   3b888:	beq	3b9ec <__assert_fail@plt+0x284e8>
   3b88c:	sub	r4, r4, #1
   3b890:	rsbs	lr, r5, #32
   3b894:	blt	3b8b0 <__assert_fail@plt+0x283ac>
   3b898:	lsl	ip, r2, lr
   3b89c:	adds	r0, r0, r2, lsr r5
   3b8a0:	adc	r1, r1, #0
   3b8a4:	adds	r0, r0, r3, lsl lr
   3b8a8:	adcs	r1, r1, r3, asr r5
   3b8ac:	b	3b8cc <__assert_fail@plt+0x283c8>
   3b8b0:	sub	r5, r5, #32
   3b8b4:	add	lr, lr, #32
   3b8b8:	cmp	r2, #1
   3b8bc:	lsl	ip, r3, lr
   3b8c0:	orrcs	ip, ip, #2
   3b8c4:	adds	r0, r0, r3, asr r5
   3b8c8:	adcs	r1, r1, r3, asr #31
   3b8cc:	and	r5, r1, #-2147483648	; 0x80000000
   3b8d0:	bpl	3b8e0 <__assert_fail@plt+0x283dc>
   3b8d4:	rsbs	ip, ip, #0
   3b8d8:	rscs	r0, r0, #0
   3b8dc:	rsc	r1, r1, #0
   3b8e0:	cmp	r1, #1048576	; 0x100000
   3b8e4:	bcc	3b924 <__assert_fail@plt+0x28420>
   3b8e8:	cmp	r1, #2097152	; 0x200000
   3b8ec:	bcc	3b90c <__assert_fail@plt+0x28408>
   3b8f0:	lsrs	r1, r1, #1
   3b8f4:	rrxs	r0, r0
   3b8f8:	rrx	ip, ip
   3b8fc:	add	r4, r4, #1
   3b900:	lsl	r2, r4, #21
   3b904:	cmn	r2, #4194304	; 0x400000
   3b908:	bcs	3ba64 <__assert_fail@plt+0x28560>
   3b90c:	cmp	ip, #-2147483648	; 0x80000000
   3b910:	lsrseq	ip, r0, #1
   3b914:	adcs	r0, r0, #0
   3b918:	adc	r1, r1, r4, lsl #20
   3b91c:	orr	r1, r1, r5
   3b920:	pop	{r4, r5, pc}
   3b924:	lsls	ip, ip, #1
   3b928:	adcs	r0, r0, r0
   3b92c:	adc	r1, r1, r1
   3b930:	tst	r1, #1048576	; 0x100000
   3b934:	sub	r4, r4, #1
   3b938:	bne	3b90c <__assert_fail@plt+0x28408>
   3b93c:	teq	r1, #0
   3b940:	moveq	r1, r0
   3b944:	moveq	r0, #0
   3b948:	clz	r3, r1
   3b94c:	addeq	r3, r3, #32
   3b950:	sub	r3, r3, #11
   3b954:	subs	r2, r3, #32
   3b958:	bge	3b97c <__assert_fail@plt+0x28478>
   3b95c:	adds	r2, r2, #12
   3b960:	ble	3b978 <__assert_fail@plt+0x28474>
   3b964:	add	ip, r2, #20
   3b968:	rsb	r2, r2, #12
   3b96c:	lsl	r0, r1, ip
   3b970:	lsr	r1, r1, r2
   3b974:	b	3b98c <__assert_fail@plt+0x28488>
   3b978:	add	r2, r2, #20
   3b97c:	rsble	ip, r2, #32
   3b980:	lsl	r1, r1, r2
   3b984:	orrle	r1, r1, r0, lsr ip
   3b988:	lslle	r0, r0, r2
   3b98c:	subs	r4, r4, r3
   3b990:	addge	r1, r1, r4, lsl #20
   3b994:	orrge	r1, r1, r5
   3b998:	popge	{r4, r5, pc}
   3b99c:	mvn	r4, r4
   3b9a0:	subs	r4, r4, #31
   3b9a4:	bge	3b9e0 <__assert_fail@plt+0x284dc>
   3b9a8:	adds	r4, r4, #12
   3b9ac:	bgt	3b9c8 <__assert_fail@plt+0x284c4>
   3b9b0:	add	r4, r4, #20
   3b9b4:	rsb	r2, r4, #32
   3b9b8:	lsr	r0, r0, r4
   3b9bc:	orr	r0, r0, r1, lsl r2
   3b9c0:	orr	r1, r5, r1, lsr r4
   3b9c4:	pop	{r4, r5, pc}
   3b9c8:	rsb	r4, r4, #12
   3b9cc:	rsb	r2, r4, #32
   3b9d0:	lsr	r0, r0, r2
   3b9d4:	orr	r0, r0, r1, lsl r4
   3b9d8:	mov	r1, r5
   3b9dc:	pop	{r4, r5, pc}
   3b9e0:	lsr	r0, r1, r4
   3b9e4:	mov	r1, r5
   3b9e8:	pop	{r4, r5, pc}
   3b9ec:	teq	r4, #0
   3b9f0:	eor	r3, r3, #1048576	; 0x100000
   3b9f4:	eoreq	r1, r1, #1048576	; 0x100000
   3b9f8:	addeq	r4, r4, #1
   3b9fc:	subne	r5, r5, #1
   3ba00:	b	3b88c <__assert_fail@plt+0x28388>
   3ba04:	mvns	ip, r4, asr #21
   3ba08:	mvnsne	ip, r5, asr #21
   3ba0c:	beq	3ba74 <__assert_fail@plt+0x28570>
   3ba10:	teq	r4, r5
   3ba14:	teqeq	r0, r2
   3ba18:	beq	3ba2c <__assert_fail@plt+0x28528>
   3ba1c:	orrs	ip, r4, r0
   3ba20:	moveq	r1, r3
   3ba24:	moveq	r0, r2
   3ba28:	pop	{r4, r5, pc}
   3ba2c:	teq	r1, r3
   3ba30:	movne	r1, #0
   3ba34:	movne	r0, #0
   3ba38:	popne	{r4, r5, pc}
   3ba3c:	lsrs	ip, r4, #21
   3ba40:	bne	3ba54 <__assert_fail@plt+0x28550>
   3ba44:	lsls	r0, r0, #1
   3ba48:	adcs	r1, r1, r1
   3ba4c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3ba50:	pop	{r4, r5, pc}
   3ba54:	adds	r4, r4, #4194304	; 0x400000
   3ba58:	addcc	r1, r1, #1048576	; 0x100000
   3ba5c:	popcc	{r4, r5, pc}
   3ba60:	and	r5, r1, #-2147483648	; 0x80000000
   3ba64:	orr	r1, r5, #2130706432	; 0x7f000000
   3ba68:	orr	r1, r1, #15728640	; 0xf00000
   3ba6c:	mov	r0, #0
   3ba70:	pop	{r4, r5, pc}
   3ba74:	mvns	ip, r4, asr #21
   3ba78:	movne	r1, r3
   3ba7c:	movne	r0, r2
   3ba80:	mvnseq	ip, r5, asr #21
   3ba84:	movne	r3, r1
   3ba88:	movne	r2, r0
   3ba8c:	orrs	r4, r0, r1, lsl #12
   3ba90:	orrseq	r5, r2, r3, lsl #12
   3ba94:	teqeq	r1, r3
   3ba98:	orrne	r1, r1, #524288	; 0x80000
   3ba9c:	pop	{r4, r5, pc}
   3baa0:	teq	r0, #0
   3baa4:	moveq	r1, #0
   3baa8:	bxeq	lr
   3baac:	push	{r4, r5, lr}
   3bab0:	mov	r4, #1024	; 0x400
   3bab4:	add	r4, r4, #50	; 0x32
   3bab8:	mov	r5, #0
   3babc:	mov	r1, #0
   3bac0:	b	3b93c <__assert_fail@plt+0x28438>
   3bac4:	teq	r0, #0
   3bac8:	moveq	r1, #0
   3bacc:	bxeq	lr
   3bad0:	push	{r4, r5, lr}
   3bad4:	mov	r4, #1024	; 0x400
   3bad8:	add	r4, r4, #50	; 0x32
   3badc:	ands	r5, r0, #-2147483648	; 0x80000000
   3bae0:	rsbmi	r0, r0, #0
   3bae4:	mov	r1, #0
   3bae8:	b	3b93c <__assert_fail@plt+0x28438>
   3baec:	lsls	r2, r0, #1
   3baf0:	asr	r1, r2, #3
   3baf4:	rrx	r1, r1
   3baf8:	lsl	r0, r2, #28
   3bafc:	andsne	r3, r2, #-16777216	; 0xff000000
   3bb00:	teqne	r3, #-16777216	; 0xff000000
   3bb04:	eorne	r1, r1, #939524096	; 0x38000000
   3bb08:	bxne	lr
   3bb0c:	teq	r2, #0
   3bb10:	teqne	r3, #-16777216	; 0xff000000
   3bb14:	bxeq	lr
   3bb18:	push	{r4, r5, lr}
   3bb1c:	mov	r4, #896	; 0x380
   3bb20:	and	r5, r1, #-2147483648	; 0x80000000
   3bb24:	bic	r1, r1, #-2147483648	; 0x80000000
   3bb28:	b	3b93c <__assert_fail@plt+0x28438>
   3bb2c:	orrs	r2, r0, r1
   3bb30:	bxeq	lr
   3bb34:	push	{r4, r5, lr}
   3bb38:	mov	r5, #0
   3bb3c:	b	3bb5c <__assert_fail@plt+0x28658>
   3bb40:	orrs	r2, r0, r1
   3bb44:	bxeq	lr
   3bb48:	push	{r4, r5, lr}
   3bb4c:	ands	r5, r1, #-2147483648	; 0x80000000
   3bb50:	bpl	3bb5c <__assert_fail@plt+0x28658>
   3bb54:	rsbs	r0, r0, #0
   3bb58:	rsc	r1, r1, #0
   3bb5c:	mov	r4, #1024	; 0x400
   3bb60:	add	r4, r4, #50	; 0x32
   3bb64:	lsrs	ip, r1, #22
   3bb68:	beq	3b8e0 <__assert_fail@plt+0x283dc>
   3bb6c:	mov	r2, #3
   3bb70:	lsrs	ip, ip, #3
   3bb74:	addne	r2, r2, #3
   3bb78:	lsrs	ip, ip, #3
   3bb7c:	addne	r2, r2, #3
   3bb80:	add	r2, r2, ip, lsr #3
   3bb84:	rsb	r3, r2, #32
   3bb88:	lsl	ip, r0, r3
   3bb8c:	lsr	r0, r0, r2
   3bb90:	orr	r0, r0, r1, lsl r3
   3bb94:	lsr	r1, r1, r2
   3bb98:	add	r4, r4, r2
   3bb9c:	b	3b8e0 <__assert_fail@plt+0x283dc>
   3bba0:	cmp	r3, #0
   3bba4:	cmpeq	r2, #0
   3bba8:	bne	3bbc0 <__assert_fail@plt+0x286bc>
   3bbac:	cmp	r1, #0
   3bbb0:	cmpeq	r0, #0
   3bbb4:	mvnne	r1, #0
   3bbb8:	mvnne	r0, #0
   3bbbc:	b	3bbdc <__assert_fail@plt+0x286d8>
   3bbc0:	sub	sp, sp, #8
   3bbc4:	push	{sp, lr}
   3bbc8:	bl	3bc74 <__assert_fail@plt+0x28770>
   3bbcc:	ldr	lr, [sp, #4]
   3bbd0:	add	sp, sp, #8
   3bbd4:	pop	{r2, r3}
   3bbd8:	bx	lr
   3bbdc:	push	{r1, lr}
   3bbe0:	mov	r0, #8
   3bbe4:	bl	12c88 <raise@plt>
   3bbe8:	pop	{r1, pc}
   3bbec:	movw	r1, #21845	; 0x5555
   3bbf0:	bfi	r1, r1, #16, #16
   3bbf4:	and	r1, r1, r0, lsr #1
   3bbf8:	movw	r2, #13107	; 0x3333
   3bbfc:	rsb	r1, r1, r0
   3bc00:	movt	r2, #13107	; 0x3333
   3bc04:	movw	r3, #13107	; 0x3333
   3bc08:	bfi	r3, r3, #16, #16
   3bc0c:	and	r2, r1, r2
   3bc10:	and	r1, r3, r1, lsr #2
   3bc14:	add	r2, r1, r2
   3bc18:	movw	r3, #3855	; 0xf0f
   3bc1c:	movt	r3, #3855	; 0xf0f
   3bc20:	add	r2, r2, r2, lsr #4
   3bc24:	and	r3, r2, r3
   3bc28:	add	r3, r3, r3, lsl #8
   3bc2c:	add	r0, r3, r3, lsl #16
   3bc30:	lsr	r0, r0, #24
   3bc34:	bx	lr
   3bc38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3bc3c:	mov	r8, r2
   3bc40:	mov	r6, r0
   3bc44:	mov	r7, r1
   3bc48:	mov	sl, r3
   3bc4c:	ldr	r9, [sp, #32]
   3bc50:	bl	3bcb0 <__assert_fail@plt+0x287ac>
   3bc54:	umull	r4, r5, r8, r0
   3bc58:	mul	r8, r8, r1
   3bc5c:	mla	r2, r0, sl, r8
   3bc60:	add	r5, r2, r5
   3bc64:	subs	r4, r6, r4
   3bc68:	sbc	r5, r7, r5
   3bc6c:	strd	r4, [r9]
   3bc70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bc74:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   3bc78:	mov	r8, r2
   3bc7c:	mov	r6, r0
   3bc80:	mov	r7, r1
   3bc84:	mov	r5, r3
   3bc88:	ldr	r9, [sp, #32]
   3bc8c:	bl	3c13c <__assert_fail@plt+0x28c38>
   3bc90:	mul	r3, r0, r5
   3bc94:	umull	r4, r5, r0, r8
   3bc98:	mla	r8, r8, r1, r3
   3bc9c:	add	r5, r8, r5
   3bca0:	subs	r4, r6, r4
   3bca4:	sbc	r5, r7, r5
   3bca8:	strd	r4, [r9]
   3bcac:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   3bcb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bcb4:	rsbs	r4, r0, #0
   3bcb8:	rsc	r5, r1, #0
   3bcbc:	cmp	r1, #0
   3bcc0:	mvn	r6, #0
   3bcc4:	sub	sp, sp, #12
   3bcc8:	movge	r4, r0
   3bccc:	movge	r5, r1
   3bcd0:	movge	r6, #0
   3bcd4:	cmp	r3, #0
   3bcd8:	blt	3bf10 <__assert_fail@plt+0x28a0c>
   3bcdc:	cmp	r3, #0
   3bce0:	mov	sl, r4
   3bce4:	mov	ip, r5
   3bce8:	mov	r0, r2
   3bcec:	mov	r1, r3
   3bcf0:	mov	r8, r2
   3bcf4:	mov	r7, r4
   3bcf8:	mov	r9, r5
   3bcfc:	bne	3bdf4 <__assert_fail@plt+0x288f0>
   3bd00:	cmp	r2, r5
   3bd04:	bls	3be30 <__assert_fail@plt+0x2892c>
   3bd08:	clz	r3, r2
   3bd0c:	cmp	r3, #0
   3bd10:	rsbne	r2, r3, #32
   3bd14:	lslne	r8, r0, r3
   3bd18:	lsrne	r2, r4, r2
   3bd1c:	lslne	r7, r4, r3
   3bd20:	orrne	r9, r2, r5, lsl r3
   3bd24:	lsr	r4, r8, #16
   3bd28:	uxth	sl, r8
   3bd2c:	mov	r1, r4
   3bd30:	mov	r0, r9
   3bd34:	bl	3b39c <__assert_fail@plt+0x27e98>
   3bd38:	mov	r1, r4
   3bd3c:	mov	fp, r0
   3bd40:	mov	r0, r9
   3bd44:	bl	3b588 <__assert_fail@plt+0x28084>
   3bd48:	mul	r0, sl, fp
   3bd4c:	lsr	r2, r7, #16
   3bd50:	orr	r1, r2, r1, lsl #16
   3bd54:	cmp	r0, r1
   3bd58:	bls	3bd7c <__assert_fail@plt+0x28878>
   3bd5c:	adds	r1, r1, r8
   3bd60:	sub	r3, fp, #1
   3bd64:	bcs	3bd78 <__assert_fail@plt+0x28874>
   3bd68:	cmp	r0, r1
   3bd6c:	subhi	fp, fp, #2
   3bd70:	addhi	r1, r1, r8
   3bd74:	bhi	3bd7c <__assert_fail@plt+0x28878>
   3bd78:	mov	fp, r3
   3bd7c:	rsb	r9, r0, r1
   3bd80:	mov	r1, r4
   3bd84:	uxth	r7, r7
   3bd88:	mov	r0, r9
   3bd8c:	bl	3b39c <__assert_fail@plt+0x27e98>
   3bd90:	mov	r1, r4
   3bd94:	mov	r5, r0
   3bd98:	mov	r0, r9
   3bd9c:	bl	3b588 <__assert_fail@plt+0x28084>
   3bda0:	mul	sl, sl, r5
   3bda4:	orr	r1, r7, r1, lsl #16
   3bda8:	cmp	sl, r1
   3bdac:	bls	3bdcc <__assert_fail@plt+0x288c8>
   3bdb0:	adds	r8, r1, r8
   3bdb4:	sub	r3, r5, #1
   3bdb8:	bcs	3bdc8 <__assert_fail@plt+0x288c4>
   3bdbc:	cmp	sl, r8
   3bdc0:	subhi	r5, r5, #2
   3bdc4:	bhi	3bdcc <__assert_fail@plt+0x288c8>
   3bdc8:	mov	r5, r3
   3bdcc:	orr	r3, r5, fp, lsl #16
   3bdd0:	mov	r4, #0
   3bdd4:	cmp	r6, #0
   3bdd8:	mov	r0, r3
   3bddc:	mov	r1, r4
   3bde0:	beq	3bdec <__assert_fail@plt+0x288e8>
   3bde4:	rsbs	r0, r0, #0
   3bde8:	rsc	r1, r1, #0
   3bdec:	add	sp, sp, #12
   3bdf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bdf4:	cmp	r3, r5
   3bdf8:	movhi	r4, #0
   3bdfc:	movhi	r3, r4
   3be00:	bhi	3bdd4 <__assert_fail@plt+0x288d0>
   3be04:	clz	r5, r1
   3be08:	cmp	r5, #0
   3be0c:	bne	3bffc <__assert_fail@plt+0x28af8>
   3be10:	cmp	r1, ip
   3be14:	cmpcs	r2, sl
   3be18:	movhi	r4, #0
   3be1c:	movls	r4, #1
   3be20:	movls	r3, #1
   3be24:	movls	r4, r5
   3be28:	movhi	r3, r4
   3be2c:	b	3bdd4 <__assert_fail@plt+0x288d0>
   3be30:	cmp	r2, #0
   3be34:	bne	3be48 <__assert_fail@plt+0x28944>
   3be38:	mov	r1, r2
   3be3c:	mov	r0, #1
   3be40:	bl	3b39c <__assert_fail@plt+0x27e98>
   3be44:	mov	r8, r0
   3be48:	clz	r3, r8
   3be4c:	cmp	r3, #0
   3be50:	bne	3bf20 <__assert_fail@plt+0x28a1c>
   3be54:	rsb	r9, r8, r9
   3be58:	lsr	r5, r8, #16
   3be5c:	uxth	sl, r8
   3be60:	mov	r4, #1
   3be64:	mov	r1, r5
   3be68:	mov	r0, r9
   3be6c:	bl	3b39c <__assert_fail@plt+0x27e98>
   3be70:	mov	r1, r5
   3be74:	mov	fp, r0
   3be78:	mov	r0, r9
   3be7c:	bl	3b588 <__assert_fail@plt+0x28084>
   3be80:	mul	r0, sl, fp
   3be84:	lsr	r2, r7, #16
   3be88:	orr	r1, r2, r1, lsl #16
   3be8c:	cmp	r0, r1
   3be90:	bls	3beb0 <__assert_fail@plt+0x289ac>
   3be94:	adds	r1, r1, r8
   3be98:	sub	r3, fp, #1
   3be9c:	bcs	3c11c <__assert_fail@plt+0x28c18>
   3bea0:	cmp	r0, r1
   3bea4:	subhi	fp, fp, #2
   3bea8:	addhi	r1, r1, r8
   3beac:	bls	3c11c <__assert_fail@plt+0x28c18>
   3beb0:	rsb	r2, r0, r1
   3beb4:	mov	r1, r5
   3beb8:	str	r2, [sp]
   3bebc:	uxth	r7, r7
   3bec0:	mov	r0, r2
   3bec4:	bl	3b39c <__assert_fail@plt+0x27e98>
   3bec8:	ldr	r2, [sp]
   3becc:	mov	r1, r5
   3bed0:	mov	r9, r0
   3bed4:	mov	r0, r2
   3bed8:	bl	3b588 <__assert_fail@plt+0x28084>
   3bedc:	mul	sl, sl, r9
   3bee0:	orr	r1, r7, r1, lsl #16
   3bee4:	cmp	sl, r1
   3bee8:	bls	3bf08 <__assert_fail@plt+0x28a04>
   3beec:	adds	r8, r1, r8
   3bef0:	sub	r3, r9, #1
   3bef4:	bcs	3bf04 <__assert_fail@plt+0x28a00>
   3bef8:	cmp	sl, r8
   3befc:	subhi	r9, r9, #2
   3bf00:	bhi	3bf08 <__assert_fail@plt+0x28a04>
   3bf04:	mov	r9, r3
   3bf08:	orr	r3, r9, fp, lsl #16
   3bf0c:	b	3bdd4 <__assert_fail@plt+0x288d0>
   3bf10:	mvn	r6, r6
   3bf14:	rsbs	r2, r2, #0
   3bf18:	rsc	r3, r3, #0
   3bf1c:	b	3bcdc <__assert_fail@plt+0x287d8>
   3bf20:	lsl	r8, r8, r3
   3bf24:	rsb	fp, r3, #32
   3bf28:	lsr	r4, r9, fp
   3bf2c:	lsr	fp, r7, fp
   3bf30:	lsr	r5, r8, #16
   3bf34:	orr	fp, fp, r9, lsl r3
   3bf38:	mov	r0, r4
   3bf3c:	lsl	r7, r7, r3
   3bf40:	mov	r1, r5
   3bf44:	uxth	sl, r8
   3bf48:	bl	3b39c <__assert_fail@plt+0x27e98>
   3bf4c:	mov	r1, r5
   3bf50:	mov	r3, r0
   3bf54:	mov	r0, r4
   3bf58:	str	r3, [sp]
   3bf5c:	bl	3b588 <__assert_fail@plt+0x28084>
   3bf60:	ldr	r3, [sp]
   3bf64:	lsr	r2, fp, #16
   3bf68:	mul	r0, sl, r3
   3bf6c:	orr	r1, r2, r1, lsl #16
   3bf70:	cmp	r0, r1
   3bf74:	bls	3bf94 <__assert_fail@plt+0x28a90>
   3bf78:	adds	r1, r1, r8
   3bf7c:	sub	r2, r3, #1
   3bf80:	bcs	3c134 <__assert_fail@plt+0x28c30>
   3bf84:	cmp	r0, r1
   3bf88:	subhi	r3, r3, #2
   3bf8c:	addhi	r1, r1, r8
   3bf90:	bls	3c134 <__assert_fail@plt+0x28c30>
   3bf94:	rsb	r9, r0, r1
   3bf98:	mov	r1, r5
   3bf9c:	str	r3, [sp]
   3bfa0:	uxth	fp, fp
   3bfa4:	mov	r0, r9
   3bfa8:	bl	3b39c <__assert_fail@plt+0x27e98>
   3bfac:	mov	r1, r5
   3bfb0:	mov	r4, r0
   3bfb4:	mov	r0, r9
   3bfb8:	bl	3b588 <__assert_fail@plt+0x28084>
   3bfbc:	mul	r9, sl, r4
   3bfc0:	ldr	r3, [sp]
   3bfc4:	orr	r1, fp, r1, lsl #16
   3bfc8:	cmp	r9, r1
   3bfcc:	bls	3bff0 <__assert_fail@plt+0x28aec>
   3bfd0:	adds	r1, r1, r8
   3bfd4:	sub	r2, r4, #1
   3bfd8:	bcs	3bfec <__assert_fail@plt+0x28ae8>
   3bfdc:	cmp	r9, r1
   3bfe0:	subhi	r4, r4, #2
   3bfe4:	addhi	r1, r1, r8
   3bfe8:	bhi	3bff0 <__assert_fail@plt+0x28aec>
   3bfec:	mov	r4, r2
   3bff0:	rsb	r9, r9, r1
   3bff4:	orr	r4, r4, r3, lsl #16
   3bff8:	b	3be64 <__assert_fail@plt+0x28960>
   3bffc:	rsb	sl, r5, #32
   3c000:	lsl	r3, r2, r5
   3c004:	lsr	r0, r2, sl
   3c008:	lsr	r2, ip, sl
   3c00c:	orr	r4, r0, r1, lsl r5
   3c010:	lsr	sl, r7, sl
   3c014:	mov	r0, r2
   3c018:	orr	sl, sl, ip, lsl r5
   3c01c:	lsr	r9, r4, #16
   3c020:	str	r3, [sp, #4]
   3c024:	str	r2, [sp]
   3c028:	uxth	fp, r4
   3c02c:	mov	r1, r9
   3c030:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c034:	ldr	r2, [sp]
   3c038:	mov	r1, r9
   3c03c:	mov	r8, r0
   3c040:	mov	r0, r2
   3c044:	bl	3b588 <__assert_fail@plt+0x28084>
   3c048:	mul	r0, fp, r8
   3c04c:	lsr	r2, sl, #16
   3c050:	orr	r1, r2, r1, lsl #16
   3c054:	cmp	r0, r1
   3c058:	bls	3c078 <__assert_fail@plt+0x28b74>
   3c05c:	adds	r1, r1, r4
   3c060:	sub	r2, r8, #1
   3c064:	bcs	3c12c <__assert_fail@plt+0x28c28>
   3c068:	cmp	r0, r1
   3c06c:	subhi	r8, r8, #2
   3c070:	addhi	r1, r1, r4
   3c074:	bls	3c12c <__assert_fail@plt+0x28c28>
   3c078:	rsb	ip, r0, r1
   3c07c:	mov	r1, r9
   3c080:	str	ip, [sp]
   3c084:	mov	r0, ip
   3c088:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c08c:	ldr	ip, [sp]
   3c090:	mov	r1, r9
   3c094:	mov	r2, r0
   3c098:	mov	r0, ip
   3c09c:	str	r2, [sp]
   3c0a0:	bl	3b588 <__assert_fail@plt+0x28084>
   3c0a4:	ldr	r2, [sp]
   3c0a8:	uxth	ip, sl
   3c0ac:	mul	fp, fp, r2
   3c0b0:	orr	ip, ip, r1, lsl #16
   3c0b4:	cmp	fp, ip
   3c0b8:	bls	3c0d8 <__assert_fail@plt+0x28bd4>
   3c0bc:	adds	ip, ip, r4
   3c0c0:	sub	r1, r2, #1
   3c0c4:	bcs	3c124 <__assert_fail@plt+0x28c20>
   3c0c8:	cmp	fp, ip
   3c0cc:	subhi	r2, r2, #2
   3c0d0:	addhi	ip, ip, r4
   3c0d4:	bls	3c124 <__assert_fail@plt+0x28c20>
   3c0d8:	ldr	r0, [sp, #4]
   3c0dc:	orr	r1, r2, r8, lsl #16
   3c0e0:	rsb	fp, fp, ip
   3c0e4:	umull	r2, r3, r1, r0
   3c0e8:	cmp	fp, r3
   3c0ec:	bcc	3c110 <__assert_fail@plt+0x28c0c>
   3c0f0:	movne	r4, #0
   3c0f4:	moveq	r4, #1
   3c0f8:	cmp	r2, r7, lsl r5
   3c0fc:	movls	r4, #0
   3c100:	andhi	r4, r4, #1
   3c104:	cmp	r4, #0
   3c108:	moveq	r3, r1
   3c10c:	beq	3bdd4 <__assert_fail@plt+0x288d0>
   3c110:	sub	r3, r1, #1
   3c114:	mov	r4, #0
   3c118:	b	3bdd4 <__assert_fail@plt+0x288d0>
   3c11c:	mov	fp, r3
   3c120:	b	3beb0 <__assert_fail@plt+0x289ac>
   3c124:	mov	r2, r1
   3c128:	b	3c0d8 <__assert_fail@plt+0x28bd4>
   3c12c:	mov	r8, r2
   3c130:	b	3c078 <__assert_fail@plt+0x28b74>
   3c134:	mov	r3, r2
   3c138:	b	3bf94 <__assert_fail@plt+0x28a90>
   3c13c:	cmp	r3, #0
   3c140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c144:	mov	r6, r0
   3c148:	sub	sp, sp, #12
   3c14c:	mov	r5, r1
   3c150:	mov	r7, r0
   3c154:	mov	r4, r2
   3c158:	mov	r8, r1
   3c15c:	bne	3c23c <__assert_fail@plt+0x28d38>
   3c160:	cmp	r2, r1
   3c164:	bls	3c278 <__assert_fail@plt+0x28d74>
   3c168:	clz	r3, r2
   3c16c:	cmp	r3, #0
   3c170:	rsbne	r8, r3, #32
   3c174:	lslne	r4, r2, r3
   3c178:	lsrne	r8, r0, r8
   3c17c:	lslne	r7, r0, r3
   3c180:	orrne	r8, r8, r1, lsl r3
   3c184:	lsr	r5, r4, #16
   3c188:	uxth	sl, r4
   3c18c:	mov	r1, r5
   3c190:	mov	r0, r8
   3c194:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c198:	mov	r1, r5
   3c19c:	mov	r9, r0
   3c1a0:	mov	r0, r8
   3c1a4:	bl	3b588 <__assert_fail@plt+0x28084>
   3c1a8:	mul	r0, sl, r9
   3c1ac:	lsr	r3, r7, #16
   3c1b0:	orr	r1, r3, r1, lsl #16
   3c1b4:	cmp	r0, r1
   3c1b8:	bls	3c1dc <__assert_fail@plt+0x28cd8>
   3c1bc:	adds	r1, r1, r4
   3c1c0:	sub	r2, r9, #1
   3c1c4:	bcs	3c1d8 <__assert_fail@plt+0x28cd4>
   3c1c8:	cmp	r0, r1
   3c1cc:	subhi	r9, r9, #2
   3c1d0:	addhi	r1, r1, r4
   3c1d4:	bhi	3c1dc <__assert_fail@plt+0x28cd8>
   3c1d8:	mov	r9, r2
   3c1dc:	rsb	r8, r0, r1
   3c1e0:	mov	r1, r5
   3c1e4:	uxth	r7, r7
   3c1e8:	mov	r0, r8
   3c1ec:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c1f0:	mov	r1, r5
   3c1f4:	mov	r6, r0
   3c1f8:	mov	r0, r8
   3c1fc:	bl	3b588 <__assert_fail@plt+0x28084>
   3c200:	mul	sl, sl, r6
   3c204:	orr	r1, r7, r1, lsl #16
   3c208:	cmp	sl, r1
   3c20c:	bls	3c228 <__assert_fail@plt+0x28d24>
   3c210:	adds	r4, r1, r4
   3c214:	sub	r3, r6, #1
   3c218:	bcs	3c524 <__assert_fail@plt+0x29020>
   3c21c:	cmp	sl, r4
   3c220:	subhi	r6, r6, #2
   3c224:	bls	3c524 <__assert_fail@plt+0x29020>
   3c228:	orr	r0, r6, r9, lsl #16
   3c22c:	mov	r6, #0
   3c230:	mov	r1, r6
   3c234:	add	sp, sp, #12
   3c238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c23c:	cmp	r3, r1
   3c240:	movhi	r6, #0
   3c244:	movhi	r0, r6
   3c248:	bhi	3c230 <__assert_fail@plt+0x28d2c>
   3c24c:	clz	r7, r3
   3c250:	cmp	r7, #0
   3c254:	bne	3c354 <__assert_fail@plt+0x28e50>
   3c258:	cmp	r3, r1
   3c25c:	cmpcs	r2, r6
   3c260:	movhi	r6, #0
   3c264:	movls	r6, #1
   3c268:	movls	r0, #1
   3c26c:	movls	r6, r7
   3c270:	movhi	r0, r6
   3c274:	b	3c230 <__assert_fail@plt+0x28d2c>
   3c278:	cmp	r2, #0
   3c27c:	bne	3c290 <__assert_fail@plt+0x28d8c>
   3c280:	mov	r1, r2
   3c284:	mov	r0, #1
   3c288:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c28c:	mov	r4, r0
   3c290:	clz	r3, r4
   3c294:	cmp	r3, #0
   3c298:	bne	3c450 <__assert_fail@plt+0x28f4c>
   3c29c:	rsb	r5, r4, r5
   3c2a0:	lsr	r8, r4, #16
   3c2a4:	uxth	sl, r4
   3c2a8:	mov	r6, #1
   3c2ac:	mov	r1, r8
   3c2b0:	mov	r0, r5
   3c2b4:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c2b8:	mov	r1, r8
   3c2bc:	mov	r9, r0
   3c2c0:	mov	r0, r5
   3c2c4:	bl	3b588 <__assert_fail@plt+0x28084>
   3c2c8:	mul	r0, sl, r9
   3c2cc:	lsr	r3, r7, #16
   3c2d0:	orr	r1, r3, r1, lsl #16
   3c2d4:	cmp	r0, r1
   3c2d8:	bls	3c2f8 <__assert_fail@plt+0x28df4>
   3c2dc:	adds	r1, r1, r4
   3c2e0:	sub	r2, r9, #1
   3c2e4:	bcs	3c52c <__assert_fail@plt+0x29028>
   3c2e8:	cmp	r0, r1
   3c2ec:	subhi	r9, r9, #2
   3c2f0:	addhi	r1, r1, r4
   3c2f4:	bls	3c52c <__assert_fail@plt+0x29028>
   3c2f8:	rsb	fp, r0, r1
   3c2fc:	mov	r1, r8
   3c300:	uxth	r7, r7
   3c304:	mov	r0, fp
   3c308:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c30c:	mov	r1, r8
   3c310:	mov	r5, r0
   3c314:	mov	r0, fp
   3c318:	bl	3b588 <__assert_fail@plt+0x28084>
   3c31c:	mul	sl, sl, r5
   3c320:	orr	r1, r7, r1, lsl #16
   3c324:	cmp	sl, r1
   3c328:	bls	3c344 <__assert_fail@plt+0x28e40>
   3c32c:	adds	r4, r1, r4
   3c330:	sub	r3, r5, #1
   3c334:	bcs	3c534 <__assert_fail@plt+0x29030>
   3c338:	cmp	sl, r4
   3c33c:	subhi	r5, r5, #2
   3c340:	bls	3c534 <__assert_fail@plt+0x29030>
   3c344:	orr	r0, r5, r9, lsl #16
   3c348:	mov	r1, r6
   3c34c:	add	sp, sp, #12
   3c350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c354:	rsb	r1, r7, #32
   3c358:	lsl	r0, r2, r7
   3c35c:	lsr	r2, r2, r1
   3c360:	lsr	fp, r5, r1
   3c364:	orr	r8, r2, r3, lsl r7
   3c368:	lsr	r1, r6, r1
   3c36c:	str	r0, [sp, #4]
   3c370:	orr	r5, r1, r5, lsl r7
   3c374:	lsr	r9, r8, #16
   3c378:	mov	r0, fp
   3c37c:	uxth	sl, r8
   3c380:	mov	r1, r9
   3c384:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c388:	mov	r1, r9
   3c38c:	mov	r4, r0
   3c390:	mov	r0, fp
   3c394:	bl	3b588 <__assert_fail@plt+0x28084>
   3c398:	mul	r0, sl, r4
   3c39c:	lsr	ip, r5, #16
   3c3a0:	orr	r1, ip, r1, lsl #16
   3c3a4:	cmp	r0, r1
   3c3a8:	bls	3c3bc <__assert_fail@plt+0x28eb8>
   3c3ac:	adds	r1, r1, r8
   3c3b0:	sub	r2, r4, #1
   3c3b4:	bcc	3c550 <__assert_fail@plt+0x2904c>
   3c3b8:	mov	r4, r2
   3c3bc:	rsb	ip, r0, r1
   3c3c0:	mov	r1, r9
   3c3c4:	str	ip, [sp]
   3c3c8:	uxth	r5, r5
   3c3cc:	mov	r0, ip
   3c3d0:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c3d4:	ldr	ip, [sp]
   3c3d8:	mov	r1, r9
   3c3dc:	mov	fp, r0
   3c3e0:	mov	r0, ip
   3c3e4:	bl	3b588 <__assert_fail@plt+0x28084>
   3c3e8:	mul	sl, sl, fp
   3c3ec:	orr	r1, r5, r1, lsl #16
   3c3f0:	cmp	sl, r1
   3c3f4:	bls	3c408 <__assert_fail@plt+0x28f04>
   3c3f8:	adds	r1, r1, r8
   3c3fc:	sub	r2, fp, #1
   3c400:	bcc	3c53c <__assert_fail@plt+0x29038>
   3c404:	mov	fp, r2
   3c408:	ldr	r3, [sp, #4]
   3c40c:	orr	r0, fp, r4, lsl #16
   3c410:	rsb	sl, sl, r1
   3c414:	umull	r4, r5, r0, r3
   3c418:	cmp	sl, r5
   3c41c:	bcc	3c43c <__assert_fail@plt+0x28f38>
   3c420:	movne	r3, #0
   3c424:	moveq	r3, #1
   3c428:	cmp	r4, r6, lsl r7
   3c42c:	movls	r6, #0
   3c430:	andhi	r6, r3, #1
   3c434:	cmp	r6, #0
   3c438:	beq	3c230 <__assert_fail@plt+0x28d2c>
   3c43c:	mov	r6, #0
   3c440:	sub	r0, r0, #1
   3c444:	mov	r1, r6
   3c448:	add	sp, sp, #12
   3c44c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c450:	lsl	r4, r4, r3
   3c454:	rsb	r9, r3, #32
   3c458:	lsr	r2, r5, r9
   3c45c:	lsr	r9, r6, r9
   3c460:	lsr	r8, r4, #16
   3c464:	orr	r9, r9, r5, lsl r3
   3c468:	mov	r0, r2
   3c46c:	lsl	r7, r6, r3
   3c470:	mov	r1, r8
   3c474:	str	r2, [sp]
   3c478:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c47c:	ldr	r2, [sp]
   3c480:	mov	r1, r8
   3c484:	uxth	sl, r4
   3c488:	mov	fp, r0
   3c48c:	mov	r0, r2
   3c490:	bl	3b588 <__assert_fail@plt+0x28084>
   3c494:	mul	r0, sl, fp
   3c498:	lsr	r3, r9, #16
   3c49c:	orr	r1, r3, r1, lsl #16
   3c4a0:	cmp	r0, r1
   3c4a4:	bls	3c4c4 <__assert_fail@plt+0x28fc0>
   3c4a8:	adds	r1, r1, r4
   3c4ac:	sub	r3, fp, #1
   3c4b0:	bcs	3c564 <__assert_fail@plt+0x29060>
   3c4b4:	cmp	r0, r1
   3c4b8:	subhi	fp, fp, #2
   3c4bc:	addhi	r1, r1, r4
   3c4c0:	bls	3c564 <__assert_fail@plt+0x29060>
   3c4c4:	rsb	r5, r0, r1
   3c4c8:	mov	r1, r8
   3c4cc:	uxth	r9, r9
   3c4d0:	mov	r0, r5
   3c4d4:	bl	3b39c <__assert_fail@plt+0x27e98>
   3c4d8:	mov	r1, r8
   3c4dc:	mov	r6, r0
   3c4e0:	mov	r0, r5
   3c4e4:	bl	3b588 <__assert_fail@plt+0x28084>
   3c4e8:	mul	r5, sl, r6
   3c4ec:	orr	r1, r9, r1, lsl #16
   3c4f0:	cmp	r5, r1
   3c4f4:	bls	3c518 <__assert_fail@plt+0x29014>
   3c4f8:	adds	r1, r1, r4
   3c4fc:	sub	r3, r6, #1
   3c500:	bcs	3c514 <__assert_fail@plt+0x29010>
   3c504:	cmp	r5, r1
   3c508:	subhi	r6, r6, #2
   3c50c:	addhi	r1, r1, r4
   3c510:	bhi	3c518 <__assert_fail@plt+0x29014>
   3c514:	mov	r6, r3
   3c518:	rsb	r5, r5, r1
   3c51c:	orr	r6, r6, fp, lsl #16
   3c520:	b	3c2ac <__assert_fail@plt+0x28da8>
   3c524:	mov	r6, r3
   3c528:	b	3c228 <__assert_fail@plt+0x28d24>
   3c52c:	mov	r9, r2
   3c530:	b	3c2f8 <__assert_fail@plt+0x28df4>
   3c534:	mov	r5, r3
   3c538:	b	3c344 <__assert_fail@plt+0x28e40>
   3c53c:	cmp	sl, r1
   3c540:	subhi	fp, fp, #2
   3c544:	addhi	r1, r1, r8
   3c548:	bhi	3c408 <__assert_fail@plt+0x28f04>
   3c54c:	b	3c404 <__assert_fail@plt+0x28f00>
   3c550:	cmp	r0, r1
   3c554:	subhi	r4, r4, #2
   3c558:	addhi	r1, r1, r8
   3c55c:	bhi	3c3bc <__assert_fail@plt+0x28eb8>
   3c560:	b	3c3b8 <__assert_fail@plt+0x28eb4>
   3c564:	mov	fp, r3
   3c568:	b	3c4c4 <__assert_fail@plt+0x28fc0>
   3c56c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   3c570:	mov	r7, r0
   3c574:	ldr	r6, [pc, #76]	; 3c5c8 <__assert_fail@plt+0x290c4>
   3c578:	mov	r8, r1
   3c57c:	ldr	r5, [pc, #72]	; 3c5cc <__assert_fail@plt+0x290c8>
   3c580:	mov	r9, r2
   3c584:	add	r6, pc, r6
   3c588:	bl	12c2c <_init@@Base>
   3c58c:	add	r5, pc, r5
   3c590:	rsb	r6, r5, r6
   3c594:	asrs	r6, r6, #2
   3c598:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   3c59c:	sub	r5, r5, #4
   3c5a0:	mov	r4, #0
   3c5a4:	add	r4, r4, #1
   3c5a8:	ldr	r3, [r5, #4]!
   3c5ac:	mov	r0, r7
   3c5b0:	mov	r1, r8
   3c5b4:	mov	r2, r9
   3c5b8:	blx	r3
   3c5bc:	cmp	r4, r6
   3c5c0:	bne	3c5a4 <__assert_fail@plt+0x290a0>
   3c5c4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   3c5c8:	andeq	fp, r1, ip, lsr #26
   3c5cc:	andeq	fp, r1, r0, lsr #26
   3c5d0:	bx	lr

Disassembly of section .fini:

0003c5d4 <_fini@@Base>:
   3c5d4:	push	{r3, lr}
   3c5d8:	pop	{r3, pc}
