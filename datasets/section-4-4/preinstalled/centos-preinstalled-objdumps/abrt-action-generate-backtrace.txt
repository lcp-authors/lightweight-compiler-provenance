
centos-preinstalled/abrt-action-generate-backtrace:     file format elf32-littlearm


Disassembly of section .init:

00000a38 <_init@@Base>:
 a38:	push	{r3, lr}
 a3c:	bl	1068 <main@@Base+0x4cc>
 a40:	pop	{r3, pc}

Disassembly of section .plt:

00000a44 <abrt_get_backtrace@plt-0x14>:
 a44:	push	{lr}		; (str lr, [sp, #-4]!)
 a48:	ldr	lr, [pc, #4]	; a54 <_init@@Base+0x1c>
 a4c:	add	lr, pc, lr
 a50:	ldr	pc, [lr, #8]!
 a54:	andeq	r1, r1, ip, lsl #10

00000a58 <abrt_get_backtrace@plt>:
 a58:	add	ip, pc, #0, 12
 a5c:	add	ip, ip, #69632	; 0x11000
 a60:	ldr	pc, [ip, #1292]!	; 0x50c

00000a64 <dd_opendir@plt>:
 a64:	add	ip, pc, #0, 12
 a68:	add	ip, ip, #69632	; 0x11000
 a6c:	ldr	pc, [ip, #1284]!	; 0x504

00000a70 <free@plt>:
 a70:	add	ip, pc, #0, 12
 a74:	add	ip, ip, #69632	; 0x11000
 a78:	ldr	pc, [ip, #1276]!	; 0x4fc

00000a7c <libreport_xstrdup@plt>:
 a7c:	add	ip, pc, #0, 12
 a80:	add	ip, ip, #69632	; 0x11000
 a84:	ldr	pc, [ip, #1268]!	; 0x4f4

00000a88 <dd_close@plt>:
 a88:	add	ip, pc, #0, 12
 a8c:	add	ip, ip, #69632	; 0x11000
 a90:	ldr	pc, [ip, #1260]!	; 0x4ec

00000a94 <libreport_parse_opts@plt>:
 a94:	add	ip, pc, #0, 12
 a98:	add	ip, ip, #69632	; 0x11000
 a9c:	ldr	pc, [ip, #1252]!	; 0x4e4

00000aa0 <libreport_export_abrt_envvars@plt>:
 aa0:	add	ip, pc, #0, 12
 aa4:	add	ip, ip, #69632	; 0x11000
 aa8:	ldr	pc, [ip, #1244]!	; 0x4dc

00000aac <textdomain@plt>:
 aac:	add	ip, pc, #0, 12
 ab0:	add	ip, ip, #69632	; 0x11000
 ab4:	ldr	pc, [ip, #1236]!	; 0x4d4

00000ab8 <memset@plt>:
 ab8:	add	ip, pc, #0, 12
 abc:	add	ip, ip, #69632	; 0x11000
 ac0:	ldr	pc, [ip, #1228]!	; 0x4cc

00000ac4 <libreport_xasprintf@plt>:
 ac4:	add	ip, pc, #0, 12
 ac8:	add	ip, ip, #69632	; 0x11000
 acc:	ldr	pc, [ip, #1220]!	; 0x4c4

00000ad0 <abrt_load_abrt_plugin_conf_file@plt>:
 ad0:	add	ip, pc, #0, 12
 ad4:	add	ip, ip, #69632	; 0x11000
 ad8:	ldr	pc, [ip, #1212]!	; 0x4bc

00000adc <abort@plt>:
 adc:	add	ip, pc, #0, 12
 ae0:	add	ip, ip, #69632	; 0x11000
 ae4:	ldr	pc, [ip, #1204]!	; 0x4b4

00000ae8 <libreport_new_map_string@plt>:
 ae8:	add	ip, pc, #0, 12
 aec:	add	ip, ip, #69632	; 0x11000
 af0:	ldr	pc, [ip, #1196]!	; 0x4ac

00000af4 <g_hash_table_lookup@plt>:
 af4:	add	ip, pc, #0, 12
 af8:	add	ip, ip, #69632	; 0x11000
 afc:	ldr	pc, [ip, #1188]!	; 0x4a4

00000b00 <__stack_chk_fail@plt>:
 b00:	add	ip, pc, #0, 12
 b04:	add	ip, ip, #69632	; 0x11000
 b08:	ldr	pc, [ip, #1180]!	; 0x49c

00000b0c <abrt_free_abrt_conf_data@plt>:
 b0c:	add	ip, pc, #0, 12
 b10:	add	ip, ip, #69632	; 0x11000
 b14:	ldr	pc, [ip, #1172]!	; 0x494

00000b18 <dcgettext@plt>:
 b18:	add	ip, pc, #0, 12
 b1c:	add	ip, ip, #69632	; 0x11000
 b20:	ldr	pc, [ip, #1164]!	; 0x48c

00000b24 <log_wrapper@plt>:
 b24:	add	ip, pc, #0, 12
 b28:	add	ip, ip, #69632	; 0x11000
 b2c:	ldr	pc, [ip, #1156]!	; 0x484

00000b30 <bindtextdomain@plt>:
 b30:	add	ip, pc, #0, 12
 b34:	add	ip, ip, #69632	; 0x11000
 b38:	ldr	pc, [ip, #1148]!	; 0x47c

00000b3c <libreport_free_map_string@plt>:
 b3c:	add	ip, pc, #0, 12
 b40:	add	ip, ip, #69632	; 0x11000
 b44:	ldr	pc, [ip, #1140]!	; 0x474

00000b48 <setlocale@plt>:
 b48:	add	ip, pc, #0, 12
 b4c:	add	ip, ip, #69632	; 0x11000
 b50:	ldr	pc, [ip, #1132]!	; 0x46c

00000b54 <strlen@plt>:
 b54:	add	ip, pc, #0, 12
 b58:	add	ip, ip, #69632	; 0x11000
 b5c:	ldr	pc, [ip, #1124]!	; 0x464

00000b60 <abrt_init@plt>:
 b60:	add	ip, pc, #0, 12
 b64:	add	ip, ip, #69632	; 0x11000
 b68:	ldr	pc, [ip, #1116]!	; 0x45c

00000b6c <dd_save_text@plt>:
 b6c:	add	ip, pc, #0, 12
 b70:	add	ip, ip, #69632	; 0x11000
 b74:	ldr	pc, [ip, #1108]!	; 0x454

00000b78 <__libc_start_main@plt>:
 b78:	add	ip, pc, #0, 12
 b7c:	add	ip, ip, #69632	; 0x11000
 b80:	ldr	pc, [ip, #1100]!	; 0x44c

00000b84 <__gmon_start__@plt>:
 b84:	add	ip, pc, #0, 12
 b88:	add	ip, ip, #69632	; 0x11000
 b8c:	ldr	pc, [ip, #1092]!	; 0x444

00000b90 <__cxa_finalize@plt>:
 b90:	add	ip, pc, #0, 12
 b94:	add	ip, ip, #69632	; 0x11000
 b98:	ldr	pc, [ip, #1084]!	; 0x43c

Disassembly of section .text:

00000b9c <main@@Base>:
     b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ba0:	sub	sp, sp, #164	; 0xa4
     ba4:	ldr	r6, [pc, #972]	; f78 <main@@Base+0x3dc>
     ba8:	mov	r7, r1
     bac:	ldr	r3, [pc, #968]	; f7c <main@@Base+0x3e0>
     bb0:	mov	ip, r0
     bb4:	add	r6, pc, r6
     bb8:	ldr	r1, [pc, #960]	; f80 <main@@Base+0x3e4>
     bbc:	ldr	r4, [pc, #960]	; f84 <main@@Base+0x3e8>
     bc0:	mov	r0, #6
     bc4:	ldr	r3, [r6, r3]
     bc8:	add	r1, pc, r1
     bcc:	add	r4, pc, r4
     bd0:	mov	r5, #0
     bd4:	add	r9, sp, #36	; 0x24
     bd8:	mov	r8, #2
     bdc:	str	r3, [sp, #28]
     be0:	mov	fp, #3
     be4:	ldr	r3, [r3]
     be8:	str	ip, [sp, #20]
     bec:	ldr	sl, [pc, #916]	; f88 <main@@Base+0x3ec>
     bf0:	str	r3, [sp, #156]	; 0x9c
     bf4:	bl	b48 <setlocale@plt>
     bf8:	ldr	r1, [pc, #908]	; f8c <main@@Base+0x3f0>
     bfc:	mov	r0, r4
     c00:	add	sl, pc, sl
     c04:	add	r1, pc, r1
     c08:	bl	b30 <bindtextdomain@plt>
     c0c:	mov	r0, r4
     c10:	bl	aac <textdomain@plt>
     c14:	mov	r0, r7
     c18:	bl	b60 <abrt_init@plt>
     c1c:	ldr	r1, [pc, #876]	; f90 <main@@Base+0x3f4>
     c20:	mov	r0, r4
     c24:	mov	r2, #5
     c28:	add	r1, pc, r1
     c2c:	str	r5, [sp, #32]
     c30:	bl	b18 <dcgettext@plt>
     c34:	mov	r1, r5
     c38:	mov	r2, #120	; 0x78
     c3c:	mov	r3, r0
     c40:	mov	r0, r9
     c44:	str	r3, [sp, #24]
     c48:	bl	ab8 <memset@plt>
     c4c:	ldr	r1, [pc, #832]	; f94 <main@@Base+0x3f8>
     c50:	mov	r0, #118	; 0x76
     c54:	ldr	r2, [pc, #828]	; f98 <main@@Base+0x3fc>
     c58:	str	r0, [sp, #40]	; 0x28
     c5c:	mov	r0, r4
     c60:	add	r2, pc, r2
     c64:	str	r2, [sp, #44]	; 0x2c
     c68:	ldr	lr, [r6, r1]
     c6c:	mov	r2, #5
     c70:	ldr	r1, [pc, #804]	; f9c <main@@Base+0x400>
     c74:	ldr	r6, [pc, #804]	; fa0 <main@@Base+0x404>
     c78:	add	r1, pc, r1
     c7c:	str	lr, [sp, #48]	; 0x30
     c80:	bl	b18 <dcgettext@plt>
     c84:	ldr	r1, [pc, #792]	; fa4 <main@@Base+0x408>
     c88:	mov	r2, #5
     c8c:	mov	lr, #100	; 0x64
     c90:	add	r1, pc, r1
     c94:	str	r1, [sp, #76]	; 0x4c
     c98:	ldr	r1, [pc, #776]	; fa8 <main@@Base+0x40c>
     c9c:	add	r6, pc, r6
     ca0:	str	lr, [sp, #64]	; 0x40
     ca4:	add	r1, pc, r1
     ca8:	str	r6, [sp, #72]	; 0x48
     cac:	str	r8, [sp, #60]	; 0x3c
     cb0:	mov	r6, #105	; 0x69
     cb4:	str	r0, [sp, #56]	; 0x38
     cb8:	mov	r0, r4
     cbc:	bl	b18 <dcgettext@plt>
     cc0:	ldr	r1, [pc, #740]	; fac <main@@Base+0x410>
     cc4:	ldr	lr, [pc, #740]	; fb0 <main@@Base+0x414>
     cc8:	mov	r2, #5
     ccc:	add	r1, pc, r1
     cd0:	str	r6, [sp, #88]	; 0x58
     cd4:	add	lr, pc, lr
     cd8:	str	r8, [sp, #84]	; 0x54
     cdc:	str	lr, [sp, #100]	; 0x64
     ce0:	add	lr, sp, #32
     ce4:	str	lr, [sp, #96]	; 0x60
     ce8:	ldr	r6, [pc, #708]	; fb4 <main@@Base+0x418>
     cec:	add	r6, pc, r6
     cf0:	str	r0, [sp, #80]	; 0x50
     cf4:	mov	r0, r4
     cf8:	bl	b18 <dcgettext@plt>
     cfc:	ldr	r1, [pc, #692]	; fb8 <main@@Base+0x41c>
     d00:	ldr	lr, [pc, #692]	; fbc <main@@Base+0x420>
     d04:	mov	r2, #5
     d08:	add	r1, pc, r1
     d0c:	str	r6, [sp, #124]	; 0x7c
     d10:	add	lr, pc, lr
     d14:	str	fp, [sp, #108]	; 0x6c
     d18:	str	lr, [sp, #120]	; 0x78
     d1c:	mov	lr, #116	; 0x74
     d20:	str	lr, [sp, #112]	; 0x70
     d24:	str	r0, [sp, #104]	; 0x68
     d28:	mov	r0, r4
     d2c:	bl	b18 <dcgettext@plt>
     d30:	ldr	ip, [sp, #20]
     d34:	ldr	r3, [sp, #24]
     d38:	mov	r1, r7
     d3c:	mov	r2, r9
     d40:	mov	lr, #6
     d44:	str	lr, [sp, #132]	; 0x84
     d48:	str	r0, [sp, #128]	; 0x80
     d4c:	mov	r0, ip
     d50:	bl	a94 <libreport_parse_opts@plt>
     d54:	mov	r0, r5
     d58:	bl	aa0 <libreport_export_abrt_envvars@plt>
     d5c:	bl	ae8 <libreport_new_map_string@plt>
     d60:	mov	r1, r0
     d64:	mov	r4, r0
     d68:	mov	r0, sl
     d6c:	bl	ad0 <abrt_load_abrt_plugin_conf_file@plt>
     d70:	subs	r3, r0, #0
     d74:	beq	ee4 <main@@Base+0x348>
     d78:	ldr	r1, [pc, #576]	; fc0 <main@@Base+0x424>
     d7c:	mov	r0, r4
     d80:	add	r1, pc, r1
     d84:	bl	af4 <g_hash_table_lookup@plt>
     d88:	cmp	r0, #0
     d8c:	beq	f20 <main@@Base+0x384>
     d90:	bl	a7c <libreport_xstrdup@plt>
     d94:	mov	r5, r0
     d98:	mov	r0, r4
     d9c:	bl	b3c <libreport_free_map_string@plt>
     da0:	ldr	r2, [sp, #32]
     da4:	cmp	r2, #0
     da8:	beq	ec0 <main@@Base+0x324>
     dac:	ldr	r0, [pc, #528]	; fc4 <main@@Base+0x428>
     db0:	mov	r1, r5
     db4:	add	r0, pc, r0
     db8:	bl	ac4 <libreport_xasprintf@plt>
     dbc:	ldr	r3, [pc, #516]	; fc8 <main@@Base+0x42c>
     dc0:	ldr	r2, [pc, #516]	; fcc <main@@Base+0x430>
     dc4:	add	r3, pc, r3
     dc8:	add	r2, pc, r2
     dcc:	ldr	r3, [r3]
     dd0:	ldr	r1, [r2]
     dd4:	cmp	r0, #0
     dd8:	mov	r6, r0
     ddc:	movne	r2, r0
     de0:	moveq	r2, r5
     de4:	mov	r0, r3
     de8:	bl	a58 <abrt_get_backtrace@plt>
     dec:	mov	r4, r0
     df0:	mov	r0, r5
     df4:	bl	a70 <free@plt>
     df8:	cmp	r4, #0
     dfc:	beq	f2c <main@@Base+0x390>
     e00:	mov	r0, r6
     e04:	bl	a70 <free@plt>
     e08:	bl	b0c <abrt_free_abrt_conf_data@plt>
     e0c:	ldr	r3, [pc, #444]	; fd0 <main@@Base+0x434>
     e10:	mov	r1, #0
     e14:	add	r3, pc, r3
     e18:	ldr	r0, [r3]
     e1c:	bl	a64 <dd_opendir@plt>
     e20:	subs	r5, r0, #0
     e24:	moveq	r0, #1
     e28:	beq	ea4 <main@@Base+0x308>
     e2c:	ldr	r1, [pc, #416]	; fd4 <main@@Base+0x438>
     e30:	mov	r2, r4
     e34:	add	r1, pc, r1
     e38:	bl	b6c <dd_save_text@plt>
     e3c:	mov	r0, r5
     e40:	bl	a88 <dd_close@plt>
     e44:	ldr	r0, [pc, #396]	; fd8 <main@@Base+0x43c>
     e48:	ldr	r1, [pc, #396]	; fdc <main@@Base+0x440>
     e4c:	mov	r2, #5
     e50:	add	r0, pc, r0
     e54:	mov	r5, #0
     e58:	add	r1, pc, r1
     e5c:	bl	b18 <dcgettext@plt>
     e60:	mov	r6, r0
     e64:	mov	r0, r4
     e68:	bl	b54 <strlen@plt>
     e6c:	ldr	r1, [pc, #364]	; fe0 <main@@Base+0x444>
     e70:	ldr	r3, [pc, #364]	; fe4 <main@@Base+0x448>
     e74:	mov	r2, #103	; 0x67
     e78:	add	r1, pc, r1
     e7c:	str	r6, [sp, #8]
     e80:	add	r3, pc, r3
     e84:	str	r5, [sp]
     e88:	str	r5, [sp, #4]
     e8c:	str	r0, [sp, #12]
     e90:	mov	r0, #4
     e94:	bl	b24 <log_wrapper@plt>
     e98:	mov	r0, r4
     e9c:	bl	a70 <free@plt>
     ea0:	mov	r0, r5
     ea4:	ldr	r1, [sp, #28]
     ea8:	ldr	r2, [sp, #156]	; 0x9c
     eac:	ldr	r3, [r1]
     eb0:	cmp	r2, r3
     eb4:	bne	f74 <main@@Base+0x3d8>
     eb8:	add	sp, sp, #164	; 0xa4
     ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ec0:	ldr	r3, [pc, #288]	; fe8 <main@@Base+0x44c>
     ec4:	mov	r6, r2
     ec8:	ldr	r1, [pc, #284]	; fec <main@@Base+0x450>
     ecc:	mov	r2, r5
     ed0:	add	r3, pc, r3
     ed4:	add	r1, pc, r1
     ed8:	ldr	r3, [r3]
     edc:	ldr	r1, [r1]
     ee0:	b	de4 <main@@Base+0x248>
     ee4:	ldr	r1, [pc, #260]	; ff0 <main@@Base+0x454>
     ee8:	mov	r0, fp
     eec:	str	r3, [sp]
     ef0:	mov	r3, #1
     ef4:	add	r1, pc, r1
     ef8:	str	r3, [sp, #4]
     efc:	str	r1, [sp, #8]
     f00:	mov	r2, #66	; 0x42
     f04:	ldr	r1, [pc, #232]	; ff4 <main@@Base+0x458>
     f08:	ldr	r3, [pc, #232]	; ff8 <main@@Base+0x45c>
     f0c:	str	sl, [sp, #12]
     f10:	add	r1, pc, r1
     f14:	add	r3, pc, r3
     f18:	bl	b24 <log_wrapper@plt>
     f1c:	b	d78 <main@@Base+0x1dc>
     f20:	ldr	r0, [pc, #212]	; ffc <main@@Base+0x460>
     f24:	add	r0, pc, r0
     f28:	b	d90 <main@@Base+0x1f4>
     f2c:	ldr	r0, [pc, #204]	; 1000 <main@@Base+0x464>
     f30:	add	r0, pc, r0
     f34:	bl	a7c <libreport_xstrdup@plt>
     f38:	ldr	r1, [pc, #196]	; 1004 <main@@Base+0x468>
     f3c:	mov	r3, #0
     f40:	str	r3, [sp]
     f44:	add	r1, pc, r1
     f48:	str	r3, [sp, #4]
     f4c:	str	r1, [sp, #8]
     f50:	mov	r2, #87	; 0x57
     f54:	ldr	r1, [pc, #172]	; 1008 <main@@Base+0x46c>
     f58:	ldr	r3, [pc, #172]	; 100c <main@@Base+0x470>
     f5c:	add	r1, pc, r1
     f60:	add	r3, pc, r3
     f64:	mov	r4, r0
     f68:	mov	r0, #4
     f6c:	bl	b24 <log_wrapper@plt>
     f70:	b	e00 <main@@Base+0x264>
     f74:	bl	b00 <__stack_chk_fail@plt>
     f78:	andeq	r1, r1, r4, lsr #7
     f7c:	andeq	r0, r0, r8, ror r0
     f80:	ldrdeq	r0, [r0], -r4
     f84:	muleq	r0, r4, r6
     f88:	andeq	r0, r0, r0, ror r7
     f8c:	andeq	r0, r0, r4, ror #12
     f90:	andeq	r0, r0, r4, asr r6
     f94:	andeq	r0, r0, r4, lsl #1
     f98:	andeq	r0, r0, ip, ror r6
     f9c:	andeq	r0, r0, ip, ror #12
     fa0:	andeq	r1, r1, r4, ror #6
     fa4:	andeq	r0, r0, r0, ror #12
     fa8:	andeq	r0, r0, r0, asr r6
     fac:	andeq	r0, r0, ip, asr #12
     fb0:	andeq	r0, r0, r4, lsr r6
     fb4:	andeq	r0, r0, r0, asr r6
     fb8:	andeq	r0, r0, r8, lsr r6
     fbc:	andeq	r1, r1, ip, ror #5
     fc0:	andeq	r0, r0, r0, lsr r6
     fc4:	andeq	r0, r0, r4, lsr #12
     fc8:	andeq	r1, r1, ip, lsr r2
     fcc:	andeq	r1, r1, r4, lsr r2
     fd0:	andeq	r1, r1, ip, ror #3
     fd4:	muleq	r0, ip, r4
     fd8:	andeq	r0, r0, r0, lsl r4
     fdc:			; <UNDEFINED> instruction: 0x000005b8
     fe0:	andeq	r0, r0, r4, lsl #10
     fe4:	ldrdeq	r0, [r0], -r8
     fe8:	andeq	r1, r1, r0, lsr r1
     fec:	andeq	r1, r1, r8, lsr #2
     ff0:	andeq	r0, r0, ip, lsr #9
     ff4:	andeq	r0, r0, ip, ror #8
     ff8:	andeq	r0, r0, r4, asr #6
     ffc:	andeq	r0, r0, r0, lsr #9
    1000:	andeq	r0, r0, ip, ror #8
    1004:	muleq	r0, ip, r4
    1008:	andeq	r0, r0, r0, lsr #8
    100c:	strdeq	r0, [r0], -r8
    1010:	mov	fp, #0
    1014:	mov	lr, #0
    1018:	pop	{r1}		; (ldr r1, [sp], #4)
    101c:	mov	r2, sp
    1020:	push	{r2}		; (str r2, [sp, #-4]!)
    1024:	push	{r0}		; (str r0, [sp, #-4]!)
    1028:	ldr	sl, [pc, #40]	; 1058 <main@@Base+0x4bc>
    102c:	add	r3, pc, #36	; 0x24
    1030:	add	sl, sl, r3
    1034:	ldr	ip, [pc, #32]	; 105c <main@@Base+0x4c0>
    1038:	ldr	ip, [sl, ip]
    103c:	push	{ip}		; (str ip, [sp, #-4]!)
    1040:	ldr	r3, [pc, #24]	; 1060 <main@@Base+0x4c4>
    1044:	ldr	r3, [sl, r3]
    1048:	ldr	r0, [pc, #20]	; 1064 <main@@Base+0x4c8>
    104c:	ldr	r0, [sl, r0]
    1050:	bl	b78 <__libc_start_main@plt>
    1054:	bl	adc <abort@plt>
    1058:	andeq	r0, r1, r8, lsl #30
    105c:	muleq	r0, r0, r0
    1060:	andeq	r0, r0, r8, lsl #1
    1064:	andeq	r0, r0, ip, ror r0
    1068:	ldr	r3, [pc, #20]	; 1084 <main@@Base+0x4e8>
    106c:	ldr	r2, [pc, #20]	; 1088 <main@@Base+0x4ec>
    1070:	add	r3, pc, r3
    1074:	ldr	r2, [r3, r2]
    1078:	cmp	r2, #0
    107c:	bxeq	lr
    1080:	b	b84 <__gmon_start__@plt>
    1084:	andeq	r0, r1, r8, ror #29
    1088:	muleq	r0, r4, r0
    108c:	ldr	r2, [pc, #60]	; 10d0 <main@@Base+0x534>
    1090:	ldr	r0, [pc, #60]	; 10d4 <main@@Base+0x538>
    1094:	add	r2, pc, r2
    1098:	add	r0, pc, r0
    109c:	add	r2, r2, #3
    10a0:	rsb	r2, r0, r2
    10a4:	push	{r3, lr}
    10a8:	cmp	r2, #6
    10ac:	ldr	r3, [pc, #36]	; 10d8 <main@@Base+0x53c>
    10b0:	add	r3, pc, r3
    10b4:	popls	{r3, pc}
    10b8:	ldr	r2, [pc, #28]	; 10dc <main@@Base+0x540>
    10bc:	ldr	r3, [r3, r2]
    10c0:	cmp	r3, #0
    10c4:	popeq	{r3, pc}
    10c8:	blx	r3
    10cc:	pop	{r3, pc}
    10d0:	andeq	r0, r1, r0, ror pc
    10d4:	andeq	r0, r1, ip, ror #30
    10d8:	andeq	r0, r1, r8, lsr #29
    10dc:	andeq	r0, r0, ip, lsl #1
    10e0:	push	{r3, lr}
    10e4:	ldr	r0, [pc, #64]	; 112c <main@@Base+0x590>
    10e8:	ldr	r3, [pc, #64]	; 1130 <main@@Base+0x594>
    10ec:	add	r0, pc, r0
    10f0:	ldr	r2, [pc, #60]	; 1134 <main@@Base+0x598>
    10f4:	add	r3, pc, r3
    10f8:	rsb	r3, r0, r3
    10fc:	add	r2, pc, r2
    1100:	asr	r3, r3, #2
    1104:	add	r3, r3, r3, lsr #31
    1108:	asrs	r3, r3, #1
    110c:	popeq	{r3, pc}
    1110:	ldr	r1, [pc, #32]	; 1138 <main@@Base+0x59c>
    1114:	ldr	r2, [r2, r1]
    1118:	cmp	r2, #0
    111c:	popeq	{r3, pc}
    1120:	mov	r1, r3
    1124:	blx	r2
    1128:	pop	{r3, pc}
    112c:	andeq	r0, r1, r8, lsl pc
    1130:	andeq	r0, r1, r0, lsl pc
    1134:	andeq	r0, r1, ip, asr lr
    1138:	muleq	r0, r8, r0
    113c:	ldr	r2, [pc, #76]	; 1190 <main@@Base+0x5f4>
    1140:	push	{r3, lr}
    1144:	add	r2, pc, r2
    1148:	ldr	r3, [pc, #68]	; 1194 <main@@Base+0x5f8>
    114c:	ldrb	r2, [r2]
    1150:	add	r3, pc, r3
    1154:	cmp	r2, #0
    1158:	popne	{r3, pc}
    115c:	ldr	r2, [pc, #52]	; 1198 <main@@Base+0x5fc>
    1160:	ldr	r3, [r3, r2]
    1164:	cmp	r3, #0
    1168:	beq	1178 <main@@Base+0x5dc>
    116c:	ldr	r0, [pc, #40]	; 119c <main@@Base+0x600>
    1170:	add	r0, pc, r0
    1174:	bl	b90 <__cxa_finalize@plt>
    1178:	bl	108c <main@@Base+0x4f0>
    117c:	ldr	r3, [pc, #28]	; 11a0 <main@@Base+0x604>
    1180:	mov	r2, #1
    1184:	add	r3, pc, r3
    1188:	strb	r2, [r3]
    118c:	pop	{r3, pc}
    1190:	andeq	r0, r1, r0, asr #29
    1194:	andeq	r0, r1, r8, lsl #28
    1198:	muleq	r0, ip, r0
    119c:	andeq	r0, r1, ip, lsr #25
    11a0:	andeq	r0, r1, r0, lsl #29
    11a4:	ldr	r0, [pc, #52]	; 11e0 <main@@Base+0x644>
    11a8:	push	{r3, lr}
    11ac:	add	r0, pc, r0
    11b0:	ldr	r3, [pc, #44]	; 11e4 <main@@Base+0x648>
    11b4:	ldr	r2, [r0]
    11b8:	add	r3, pc, r3
    11bc:	cmp	r2, #0
    11c0:	beq	11d8 <main@@Base+0x63c>
    11c4:	ldr	r2, [pc, #28]	; 11e8 <main@@Base+0x64c>
    11c8:	ldr	r3, [r3, r2]
    11cc:	cmp	r3, #0
    11d0:	beq	11d8 <main@@Base+0x63c>
    11d4:	blx	r3
    11d8:	pop	{r3, lr}
    11dc:	b	10e0 <main@@Base+0x544>
    11e0:	andeq	r0, r1, ip, ror #24
    11e4:	andeq	r0, r1, r0, lsr #27
    11e8:	andeq	r0, r0, r0, lsl #1

000011ec <__libc_csu_init@@Base>:
    11ec:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    11f0:	mov	r7, r0
    11f4:	ldr	r6, [pc, #76]	; 1248 <__libc_csu_init@@Base+0x5c>
    11f8:	mov	r8, r1
    11fc:	ldr	r5, [pc, #72]	; 124c <__libc_csu_init@@Base+0x60>
    1200:	mov	r9, r2
    1204:	add	r6, pc, r6
    1208:	bl	a38 <_init@@Base>
    120c:	add	r5, pc, r5
    1210:	rsb	r6, r5, r6
    1214:	asrs	r6, r6, #2
    1218:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    121c:	sub	r5, r5, #4
    1220:	mov	r4, #0
    1224:	add	r4, r4, #1
    1228:	ldr	r3, [r5, #4]!
    122c:	mov	r0, r7
    1230:	mov	r1, r8
    1234:	mov	r2, r9
    1238:	blx	r3
    123c:	cmp	r4, r6
    1240:	bne	1224 <__libc_csu_init@@Base+0x38>
    1244:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    1248:	andeq	r0, r1, r0, lsl ip
    124c:	andeq	r0, r1, r4, lsl #24

00001250 <__libc_csu_fini@@Base>:
    1250:	bx	lr

Disassembly of section .fini:

00001254 <_fini@@Base>:
    1254:	push	{r3, lr}
    1258:	pop	{r3, pc}
