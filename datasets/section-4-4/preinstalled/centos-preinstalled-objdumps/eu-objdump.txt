
centos-preinstalled/eu-objdump:     file format elf32-littlearm


Disassembly of section .init:

000113b8 <_init@@Base>:
   113b8:	push	{r3, lr}
   113bc:	bl	11890 <__assert_fail@plt+0x17c>
   113c0:	pop	{r3, pc}

Disassembly of section .plt:

000113c4 <calloc@plt-0x14>:
   113c4:	push	{lr}		; (str lr, [sp, #-4]!)
   113c8:	ldr	lr, [pc, #4]	; 113d4 <_init@@Base+0x1c>
   113cc:	add	lr, pc, lr
   113d0:	ldr	pc, [lr, #8]!
   113d4:	andeq	r5, r1, ip, lsr #24

000113d8 <calloc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #86016	; 0x15000
   113e0:	ldr	pc, [ip, #3116]!	; 0xc2c

000113e4 <fputs_unlocked@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #86016	; 0x15000
   113ec:	ldr	pc, [ip, #3108]!	; 0xc24

000113f0 <gelf_getehdr@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #86016	; 0x15000
   113f8:	ldr	pc, [ip, #3100]!	; 0xc1c

000113fc <raise@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #86016	; 0x15000
   11404:	ldr	pc, [ip, #3092]!	; 0xc14

00011408 <gelf_getshdr@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #86016	; 0x15000
   11410:	ldr	pc, [ip, #3084]!	; 0xc0c

00011414 <strcmp@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #86016	; 0x15000
   1141c:	ldr	pc, [ip, #3076]!	; 0xc04

00011420 <elf_version@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #86016	; 0x15000
   11428:	ldr	pc, [ip, #3068]!	; 0xbfc

0001142c <strchrnul@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #86016	; 0x15000
   11434:	ldr	pc, [ip, #3060]!	; 0xbf4

00011438 <free@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #86016	; 0x15000
   11440:	ldr	pc, [ip, #3052]!	; 0xbec

00011444 <memcpy@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #86016	; 0x15000
   1144c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011450 <memcmp@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #86016	; 0x15000
   11458:	ldr	pc, [ip, #3036]!	; 0xbdc

0001145c <stpcpy@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #86016	; 0x15000
   11464:	ldr	pc, [ip, #3028]!	; 0xbd4

00011468 <dcgettext@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #86016	; 0x15000
   11470:	ldr	pc, [ip, #3020]!	; 0xbcc

00011474 <disasm_cb@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #86016	; 0x15000
   1147c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011480 <disasm_begin@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #86016	; 0x15000
   11488:	ldr	pc, [ip, #3004]!	; 0xbbc

0001148c <__stack_chk_fail@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #86016	; 0x15000
   11494:	ldr	pc, [ip, #2996]!	; 0xbb4

00011498 <dlclose@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #86016	; 0x15000
   114a0:	ldr	pc, [ip, #2988]!	; 0xbac

000114a4 <realloc@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #86016	; 0x15000
   114ac:	ldr	pc, [ip, #2980]!	; 0xba4

000114b0 <gelf_getclass@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #86016	; 0x15000
   114b8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114bc <elf_strptr@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #86016	; 0x15000
   114c4:	ldr	pc, [ip, #2964]!	; 0xb94

000114c8 <textdomain@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #86016	; 0x15000
   114d0:	ldr	pc, [ip, #2956]!	; 0xb8c

000114d4 <_IO_putc@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #86016	; 0x15000
   114dc:	ldr	pc, [ip, #2948]!	; 0xb84

000114e0 <__stpcpy_chk@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #86016	; 0x15000
   114e8:	ldr	pc, [ip, #2940]!	; 0xb7c

000114ec <dlopen@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #86016	; 0x15000
   114f4:	ldr	pc, [ip, #2932]!	; 0xb74

000114f8 <elf_getdata@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #86016	; 0x15000
   11500:	ldr	pc, [ip, #2924]!	; 0xb6c

00011504 <gelf_fsize@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #86016	; 0x15000
   1150c:	ldr	pc, [ip, #2916]!	; 0xb64

00011510 <error@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #86016	; 0x15000
   11518:	ldr	pc, [ip, #2908]!	; 0xb5c

0001151c <open64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #86016	; 0x15000
   11524:	ldr	pc, [ip, #2900]!	; 0xb54

00011528 <__asprintf_chk@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #86016	; 0x15000
   11530:	ldr	pc, [ip, #2892]!	; 0xb4c

00011534 <getenv@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #86016	; 0x15000
   1153c:	ldr	pc, [ip, #2884]!	; 0xb44

00011540 <malloc@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #86016	; 0x15000
   11548:	ldr	pc, [ip, #2876]!	; 0xb3c

0001154c <__libc_start_main@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #86016	; 0x15000
   11554:	ldr	pc, [ip, #2868]!	; 0xb34

00011558 <__gmon_start__@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #86016	; 0x15000
   11560:	ldr	pc, [ip, #2860]!	; 0xb2c

00011564 <mempcpy@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #86016	; 0x15000
   1156c:	ldr	pc, [ip, #2852]!	; 0xb24

00011570 <elf_end@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #86016	; 0x15000
   11578:	ldr	pc, [ip, #2844]!	; 0xb1c

0001157c <__ctype_b_loc@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #86016	; 0x15000
   11584:	ldr	pc, [ip, #2836]!	; 0xb14

00011588 <exit@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #86016	; 0x15000
   11590:	ldr	pc, [ip, #2828]!	; 0xb0c

00011594 <strtoul@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #86016	; 0x15000
   1159c:	ldr	pc, [ip, #2820]!	; 0xb04

000115a0 <strlen@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #86016	; 0x15000
   115a8:	ldr	pc, [ip, #2812]!	; 0xafc

000115ac <elf_errmsg@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #86016	; 0x15000
   115b4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115b8 <gelf_getrela@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #86016	; 0x15000
   115c0:	ldr	pc, [ip, #2796]!	; 0xaec

000115c4 <__errno_location@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #86016	; 0x15000
   115cc:	ldr	pc, [ip, #2788]!	; 0xae4

000115d0 <argp_help@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #86016	; 0x15000
   115d8:	ldr	pc, [ip, #2780]!	; 0xadc

000115dc <__fsetlocking@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #86016	; 0x15000
   115e4:	ldr	pc, [ip, #2772]!	; 0xad4

000115e8 <argp_parse@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #86016	; 0x15000
   115f0:	ldr	pc, [ip, #2764]!	; 0xacc

000115f4 <__printf_chk@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #86016	; 0x15000
   115fc:	ldr	pc, [ip, #2756]!	; 0xac4

00011600 <disasm_end@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #86016	; 0x15000
   11608:	ldr	pc, [ip, #2748]!	; 0xabc

0001160c <__fprintf_chk@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #86016	; 0x15000
   11614:	ldr	pc, [ip, #2740]!	; 0xab4

00011618 <elf_begin@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #86016	; 0x15000
   11620:	ldr	pc, [ip, #2732]!	; 0xaac

00011624 <__overflow@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #86016	; 0x15000
   1162c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011630 <setlocale@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #86016	; 0x15000
   11638:	ldr	pc, [ip, #2716]!	; 0xa9c

0001163c <elf_nextscn@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #86016	; 0x15000
   11644:	ldr	pc, [ip, #2708]!	; 0xa94

00011648 <gelf_getrel@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #86016	; 0x15000
   11650:	ldr	pc, [ip, #2700]!	; 0xa8c

00011654 <elf_next@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #86016	; 0x15000
   1165c:	ldr	pc, [ip, #2692]!	; 0xa84

00011660 <elf_ndxscn@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #86016	; 0x15000
   11668:	ldr	pc, [ip, #2684]!	; 0xa7c

0001166c <elf_getscn@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #86016	; 0x15000
   11674:	ldr	pc, [ip, #2676]!	; 0xa74

00011678 <bindtextdomain@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #86016	; 0x15000
   11680:	ldr	pc, [ip, #2668]!	; 0xa6c

00011684 <elf_getarhdr@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #86016	; 0x15000
   1168c:	ldr	pc, [ip, #2660]!	; 0xa64

00011690 <gelf_getsymshndx@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #86016	; 0x15000
   11698:	ldr	pc, [ip, #2652]!	; 0xa5c

0001169c <isatty@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #86016	; 0x15000
   116a4:	ldr	pc, [ip, #2644]!	; 0xa54

000116a8 <fputs@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #86016	; 0x15000
   116b0:	ldr	pc, [ip, #2636]!	; 0xa4c

000116b4 <strncmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #86016	; 0x15000
   116bc:	ldr	pc, [ip, #2628]!	; 0xa44

000116c0 <abort@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #86016	; 0x15000
   116c8:	ldr	pc, [ip, #2620]!	; 0xa3c

000116cc <close@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #86016	; 0x15000
   116d4:	ldr	pc, [ip, #2612]!	; 0xa34

000116d8 <elf_getshdrstrndx@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #86016	; 0x15000
   116e0:	ldr	pc, [ip, #2604]!	; 0xa2c

000116e4 <dlsym@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #86016	; 0x15000
   116ec:	ldr	pc, [ip, #2596]!	; 0xa24

000116f0 <elf_kind@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #86016	; 0x15000
   116f8:	ldr	pc, [ip, #2588]!	; 0xa1c

000116fc <__snprintf_chk@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #86016	; 0x15000
   11704:	ldr	pc, [ip, #2580]!	; 0xa14

00011708 <__mempcpy_chk@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #86016	; 0x15000
   11710:	ldr	pc, [ip, #2572]!	; 0xa0c

00011714 <__assert_fail@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #86016	; 0x15000
   1171c:	ldr	pc, [ip, #2564]!	; 0xa04

Disassembly of section .text:

00011720 <.text>:
   11720:	push	{r4, r5, r6, r7, r8, lr}
   11724:	movw	r8, #29104	; 0x71b0
   11728:	movt	r8, #2
   1172c:	movw	r3, #29112	; 0x71b8
   11730:	movt	r3, #2
   11734:	sub	sp, sp, #16
   11738:	ldr	r2, [r8]
   1173c:	mov	r5, r0
   11740:	mov	r6, r1
   11744:	ldr	r0, [r3]
   11748:	mov	r1, #2
   1174c:	mov	r4, #0
   11750:	str	r2, [sp, #12]
   11754:	bl	115dc <__fsetlocking@plt>
   11758:	movw	r3, #29120	; 0x71c0
   1175c:	movt	r3, #2
   11760:	mov	r1, #2
   11764:	ldr	r0, [r3]
   11768:	bl	115dc <__fsetlocking@plt>
   1176c:	movw	r3, #29108	; 0x71b4
   11770:	movt	r3, #2
   11774:	mov	r1, #2
   11778:	ldr	r0, [r3]
   1177c:	bl	115dc <__fsetlocking@plt>
   11780:	movw	r1, #20104	; 0x4e88
   11784:	mov	r0, #6
   11788:	movt	r1, #1
   1178c:	bl	11630 <setlocale@plt>
   11790:	movw	r0, #20152	; 0x4eb8
   11794:	movw	r1, #20372	; 0x4f94
   11798:	movt	r0, #1
   1179c:	movt	r1, #1
   117a0:	bl	11678 <bindtextdomain@plt>
   117a4:	movw	r0, #20152	; 0x4eb8
   117a8:	movt	r0, #1
   117ac:	bl	114c8 <textdomain@plt>
   117b0:	add	ip, sp, #8
   117b4:	mov	r1, r5
   117b8:	str	ip, [sp]
   117bc:	mov	r2, r6
   117c0:	mov	r3, r4
   117c4:	str	r4, [sp, #4]
   117c8:	movw	r0, #19444	; 0x4bf4
   117cc:	movt	r0, #1
   117d0:	bl	115e8 <argp_parse@plt>
   117d4:	mov	r0, #1
   117d8:	bl	11420 <elf_version@plt>
   117dc:	ldr	ip, [sp, #8]
   117e0:	cmp	ip, r5
   117e4:	beq	11838 <__assert_fail@plt+0x124>
   117e8:	add	r7, ip, #1
   117ec:	cmp	r7, r5
   117f0:	movge	r7, #0
   117f4:	movlt	r7, #1
   117f8:	ldr	r0, [r6, ip, lsl #2]
   117fc:	mov	r1, r7
   11800:	bl	12f68 <__assert_fail@plt+0x1854>
   11804:	ldr	ip, [sp, #8]
   11808:	add	ip, ip, #1
   1180c:	str	ip, [sp, #8]
   11810:	cmp	r5, ip
   11814:	orr	r4, r4, r0
   11818:	bgt	117f8 <__assert_fail@plt+0xe4>
   1181c:	ldr	r2, [sp, #12]
   11820:	mov	r0, r4
   11824:	ldr	r3, [r8]
   11828:	cmp	r2, r3
   1182c:	bne	11850 <__assert_fail@plt+0x13c>
   11830:	add	sp, sp, #16
   11834:	pop	{r4, r5, r6, r7, r8, pc}
   11838:	mov	r1, r4
   1183c:	movw	r0, #20392	; 0x4fa8
   11840:	movt	r0, #1
   11844:	bl	12f68 <__assert_fail@plt+0x1854>
   11848:	mov	r4, r0
   1184c:	b	1181c <__assert_fail@plt+0x108>
   11850:	bl	1148c <__stack_chk_fail@plt>
   11854:	mov	fp, #0
   11858:	mov	lr, #0
   1185c:	pop	{r1}		; (ldr r1, [sp], #4)
   11860:	mov	r2, sp
   11864:	push	{r2}		; (str r2, [sp, #-4]!)
   11868:	push	{r0}		; (str r0, [sp, #-4]!)
   1186c:	ldr	ip, [pc, #16]	; 11884 <__assert_fail@plt+0x170>
   11870:	push	{ip}		; (str ip, [sp, #-4]!)
   11874:	ldr	r0, [pc, #12]	; 11888 <__assert_fail@plt+0x174>
   11878:	ldr	r3, [pc, #12]	; 1188c <__assert_fail@plt+0x178>
   1187c:	bl	1154c <__libc_start_main@plt>
   11880:	bl	116c0 <abort@plt>
   11884:	andeq	r4, r1, r0, ror #23
   11888:	andeq	r1, r1, r0, lsr #14
   1188c:	andeq	r4, r1, ip, ror fp
   11890:	ldr	r3, [pc, #20]	; 118ac <__assert_fail@plt+0x198>
   11894:	ldr	r2, [pc, #20]	; 118b0 <__assert_fail@plt+0x19c>
   11898:	add	r3, pc, r3
   1189c:	ldr	r2, [r3, r2]
   118a0:	cmp	r2, #0
   118a4:	bxeq	lr
   118a8:	b	11558 <__gmon_start__@plt>
   118ac:	andeq	r5, r1, r0, ror #14
   118b0:	andeq	r0, r0, r8, lsr r1
   118b4:	push	{r3, lr}
   118b8:	movw	r0, #29092	; 0x71a4
   118bc:	ldr	r3, [pc, #36]	; 118e8 <__assert_fail@plt+0x1d4>
   118c0:	movt	r0, #2
   118c4:	rsb	r3, r0, r3
   118c8:	cmp	r3, #6
   118cc:	popls	{r3, pc}
   118d0:	movw	r3, #0
   118d4:	movt	r3, #0
   118d8:	cmp	r3, #0
   118dc:	popeq	{r3, pc}
   118e0:	blx	r3
   118e4:	pop	{r3, pc}
   118e8:	andeq	r7, r2, r7, lsr #3
   118ec:	push	{r3, lr}
   118f0:	movw	r0, #29092	; 0x71a4
   118f4:	movw	r3, #29092	; 0x71a4
   118f8:	movt	r0, #2
   118fc:	movt	r3, #2
   11900:	rsb	r3, r0, r3
   11904:	asr	r3, r3, #2
   11908:	add	r3, r3, r3, lsr #31
   1190c:	asrs	r1, r3, #1
   11910:	popeq	{r3, pc}
   11914:	movw	r2, #0
   11918:	movt	r2, #0
   1191c:	cmp	r2, #0
   11920:	popeq	{r3, pc}
   11924:	blx	r2
   11928:	pop	{r3, pc}
   1192c:	push	{r4, lr}
   11930:	movw	r4, #29124	; 0x71c4
   11934:	movt	r4, #2
   11938:	ldrb	r3, [r4]
   1193c:	cmp	r3, #0
   11940:	popne	{r4, pc}
   11944:	bl	118b4 <__assert_fail@plt+0x1a0>
   11948:	mov	r3, #1
   1194c:	strb	r3, [r4]
   11950:	pop	{r4, pc}
   11954:	movw	r0, #25968	; 0x6570
   11958:	movt	r0, #2
   1195c:	push	{r3, lr}
   11960:	ldr	r3, [r0]
   11964:	cmp	r3, #0
   11968:	beq	11980 <__assert_fail@plt+0x26c>
   1196c:	movw	r3, #0
   11970:	movt	r3, #0
   11974:	cmp	r3, #0
   11978:	beq	11980 <__assert_fail@plt+0x26c>
   1197c:	blx	r3
   11980:	pop	{r3, lr}
   11984:	b	118ec <__assert_fail@plt+0x1d8>
   11988:	push	{r4, r5, r6, lr}
   1198c:	movw	r4, #29104	; 0x71b0
   11990:	movt	r4, #2
   11994:	sub	sp, sp, #8
   11998:	cmp	r0, #114	; 0x72
   1199c:	mov	r5, r1
   119a0:	ldr	r3, [r4]
   119a4:	str	r3, [sp, #4]
   119a8:	beq	11a9c <__assert_fail@plt+0x388>
   119ac:	bgt	11a1c <__assert_fail@plt+0x308>
   119b0:	cmp	r0, #100	; 0x64
   119b4:	beq	11a64 <__assert_fail@plt+0x350>
   119b8:	cmp	r0, #106	; 0x6a
   119bc:	bne	11a48 <__assert_fail@plt+0x334>
   119c0:	mov	r0, #12
   119c4:	bl	13b90 <__assert_fail@plt+0x247c>
   119c8:	mov	r1, sp
   119cc:	mov	r2, #0
   119d0:	mov	r6, r0
   119d4:	mov	r0, r5
   119d8:	bl	11594 <strtoul@plt>
   119dc:	ldr	r3, [sp]
   119e0:	mov	r1, #1
   119e4:	str	r0, [r6, #4]
   119e8:	mov	r0, #0
   119ec:	ldrb	r3, [r3]
   119f0:	cmp	r3, #0
   119f4:	strne	r5, [r6, #4]
   119f8:	movne	r3, #1
   119fc:	strb	r3, [r6]
   11a00:	movw	r3, #29128	; 0x71c8
   11a04:	movt	r3, #2
   11a08:	ldr	r2, [r3]
   11a0c:	strb	r1, [r3, #4]
   11a10:	str	r6, [r3]
   11a14:	str	r2, [r6, #8]
   11a18:	b	11a4c <__assert_fail@plt+0x338>
   11a1c:	cmp	r0, #115	; 0x73
   11a20:	beq	11a80 <__assert_fail@plt+0x36c>
   11a24:	mov	r3, #7
   11a28:	movt	r3, #256	; 0x100
   11a2c:	cmp	r0, r3
   11a30:	bne	11a48 <__assert_fail@plt+0x334>
   11a34:	movw	r3, #29128	; 0x71c8
   11a38:	movt	r3, #2
   11a3c:	ldrb	r0, [r3, #4]
   11a40:	cmp	r0, #0
   11a44:	beq	11ab8 <__assert_fail@plt+0x3a4>
   11a48:	mov	r0, #7
   11a4c:	ldr	r2, [sp, #4]
   11a50:	ldr	r3, [r4]
   11a54:	cmp	r2, r3
   11a58:	bne	11b00 <__assert_fail@plt+0x3ec>
   11a5c:	add	sp, sp, #8
   11a60:	pop	{r4, r5, r6, pc}
   11a64:	movw	r3, #29128	; 0x71c8
   11a68:	movt	r3, #2
   11a6c:	mov	r2, #1
   11a70:	mov	r0, #0
   11a74:	strb	r2, [r3, #5]
   11a78:	strb	r2, [r3, #4]
   11a7c:	b	11a4c <__assert_fail@plt+0x338>
   11a80:	movw	r3, #29128	; 0x71c8
   11a84:	movt	r3, #2
   11a88:	mov	r2, #1
   11a8c:	mov	r0, #0
   11a90:	strb	r2, [r3, #7]
   11a94:	strb	r2, [r3, #4]
   11a98:	b	11a4c <__assert_fail@plt+0x338>
   11a9c:	movw	r3, #29128	; 0x71c8
   11aa0:	movt	r3, #2
   11aa4:	mov	r2, #1
   11aa8:	mov	r0, #0
   11aac:	strb	r2, [r3, #6]
   11ab0:	strb	r2, [r3, #4]
   11ab4:	b	11a4c <__assert_fail@plt+0x338>
   11ab8:	movw	r4, #29108	; 0x71b4
   11abc:	movt	r4, #2
   11ac0:	mov	r2, #5
   11ac4:	movw	r1, #19708	; 0x4cfc
   11ac8:	movt	r1, #1
   11acc:	bl	11468 <dcgettext@plt>
   11ad0:	ldr	r1, [r4]
   11ad4:	bl	116a8 <fputs@plt>
   11ad8:	movw	r3, #29096	; 0x71a8
   11adc:	movt	r3, #2
   11ae0:	ldr	r1, [r4]
   11ae4:	movw	r0, #19444	; 0x4bf4
   11ae8:	mov	r2, #4
   11aec:	movt	r0, #1
   11af0:	ldr	r3, [r3]
   11af4:	bl	115d0 <argp_help@plt>
   11af8:	mov	r0, #1
   11afc:	bl	11588 <exit@plt>
   11b00:	bl	1148c <__stack_chk_fail@plt>
   11b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b08:	mov	r6, r2
   11b0c:	ldr	r2, [r2, #16]
   11b10:	sub	sp, sp, #20
   11b14:	mov	r8, r0
   11b18:	mov	r9, r1
   11b1c:	cmp	r2, #0
   11b20:	beq	11d20 <__assert_fail@plt+0x60c>
   11b24:	ldrd	r4, [r6]
   11b28:	movw	r3, #22404	; 0x5784
   11b2c:	movw	r1, #19736	; 0x4d18
   11b30:	movt	r3, #1
   11b34:	movt	r1, #1
   11b38:	str	r3, [sp, #8]
   11b3c:	mov	r0, #1
   11b40:	strd	r4, [sp]
   11b44:	bl	115f4 <__printf_chk@plt>
   11b48:	ldr	r0, [r6, #20]
   11b4c:	cmp	r0, #0
   11b50:	beq	11b64 <__assert_fail@plt+0x450>
   11b54:	movw	sl, #29120	; 0x71c0
   11b58:	movt	sl, #2
   11b5c:	ldr	r1, [sl]
   11b60:	bl	113e4 <fputs_unlocked@plt>
   11b64:	ldr	r2, [r6, #12]
   11b68:	ldr	r3, [r6, #8]
   11b6c:	cmp	r2, r3
   11b70:	beq	11d54 <__assert_fail@plt+0x640>
   11b74:	mov	r7, #0
   11b78:	ldrb	r2, [r2, r7]
   11b7c:	movw	r1, #19764	; 0x4d34
   11b80:	mov	r0, #1
   11b84:	movt	r1, #1
   11b88:	bl	115f4 <__printf_chk@plt>
   11b8c:	ldr	r2, [r6, #12]
   11b90:	ldr	r3, [r6, #8]
   11b94:	add	r7, r7, #1
   11b98:	rsb	r3, r2, r3
   11b9c:	cmp	r3, #8
   11ba0:	movge	r3, #8
   11ba4:	cmp	r3, r7
   11ba8:	bhi	11b78 <__assert_fail@plt+0x464>
   11bac:	sub	fp, r7, r7, lsl #2
   11bb0:	mov	r4, r7
   11bb4:	add	fp, fp, #25
   11bb8:	mov	r5, #0
   11bbc:	ldr	r3, [r6, #20]
   11bc0:	cmp	r3, #0
   11bc4:	beq	11be0 <__assert_fail@plt+0x4cc>
   11bc8:	movw	sl, #29120	; 0x71c0
   11bcc:	movt	sl, #2
   11bd0:	movw	r0, #22404	; 0x5784
   11bd4:	movt	r0, #1
   11bd8:	ldr	r1, [sl]
   11bdc:	bl	113e4 <fputs_unlocked@plt>
   11be0:	str	r9, [sp]
   11be4:	mov	r2, fp
   11be8:	str	r8, [sp, #4]
   11bec:	movw	r1, #19772	; 0x4d3c
   11bf0:	movw	r3, #20104	; 0x4e88
   11bf4:	movt	r1, #1
   11bf8:	movt	r3, #1
   11bfc:	mov	r0, #1
   11c00:	bl	115f4 <__printf_chk@plt>
   11c04:	ldrd	r0, [r6]
   11c08:	ldr	ip, [r6, #8]
   11c0c:	ldr	r3, [r6, #12]
   11c10:	adds	r0, r0, r4
   11c14:	adc	r1, r1, r5
   11c18:	strd	r0, [r6]
   11c1c:	rsb	r3, r3, ip
   11c20:	cmp	r3, #8
   11c24:	ble	11d10 <__assert_fail@plt+0x5fc>
   11c28:	ldr	r2, [r6, #16]
   11c2c:	cmp	r2, #0
   11c30:	beq	11d38 <__assert_fail@plt+0x624>
   11c34:	strd	r0, [sp]
   11c38:	movw	r3, #22404	; 0x5784
   11c3c:	movw	r1, #19736	; 0x4d18
   11c40:	movt	r3, #1
   11c44:	movt	r1, #1
   11c48:	str	r3, [sp, #8]
   11c4c:	mov	r0, #1
   11c50:	bl	115f4 <__printf_chk@plt>
   11c54:	ldr	r0, [r6, #20]
   11c58:	movw	sl, #29120	; 0x71c0
   11c5c:	movt	sl, #2
   11c60:	cmp	r0, #0
   11c64:	beq	11c70 <__assert_fail@plt+0x55c>
   11c68:	ldr	r1, [sl]
   11c6c:	bl	113e4 <fputs_unlocked@plt>
   11c70:	ldr	r3, [r6, #12]
   11c74:	ldr	r2, [r6, #8]
   11c78:	rsb	r2, r3, r2
   11c7c:	cmp	r7, r2
   11c80:	bcs	11cb0 <__assert_fail@plt+0x59c>
   11c84:	ldrb	r2, [r3, r7]
   11c88:	movw	r1, #19764	; 0x4d34
   11c8c:	mov	r0, #1
   11c90:	movt	r1, #1
   11c94:	bl	115f4 <__printf_chk@plt>
   11c98:	ldr	r3, [r6, #12]
   11c9c:	ldr	r2, [r6, #8]
   11ca0:	add	r7, r7, #1
   11ca4:	rsb	r2, r3, r2
   11ca8:	cmp	r2, r7
   11cac:	bhi	11c84 <__assert_fail@plt+0x570>
   11cb0:	ldr	r3, [r6, #20]
   11cb4:	cmp	r3, #0
   11cb8:	beq	11ccc <__assert_fail@plt+0x5b8>
   11cbc:	movw	r0, #22404	; 0x5784
   11cc0:	ldr	r1, [sl]
   11cc4:	movt	r0, #1
   11cc8:	bl	113e4 <fputs_unlocked@plt>
   11ccc:	ldr	r0, [sl]
   11cd0:	ldr	r3, [r0, #20]
   11cd4:	ldr	r2, [r0, #24]
   11cd8:	cmp	r3, r2
   11cdc:	addcc	r1, r3, #1
   11ce0:	strcc	r1, [r0, #20]
   11ce4:	movcc	r2, #10
   11ce8:	strbcc	r2, [r3]
   11cec:	bcs	11d68 <__assert_fail@plt+0x654>
   11cf0:	ldr	ip, [r6, #8]
   11cf4:	ldr	r1, [r6, #12]
   11cf8:	ldrd	r2, [r6]
   11cfc:	rsb	r1, r1, ip
   11d00:	sub	r1, r1, #8
   11d04:	adds	r2, r2, r1
   11d08:	adc	r3, r3, r1, asr #31
   11d0c:	strd	r2, [r6]
   11d10:	mov	r0, #0
   11d14:	str	ip, [r6, #12]
   11d18:	add	sp, sp, #20
   11d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d20:	movw	r1, #19752	; 0x4d28
   11d24:	ldrd	r2, [r6]
   11d28:	movt	r1, #1
   11d2c:	mov	r0, #1
   11d30:	bl	115f4 <__printf_chk@plt>
   11d34:	b	11b48 <__assert_fail@plt+0x434>
   11d38:	mov	r2, r0
   11d3c:	mov	r3, r1
   11d40:	mov	r0, #1
   11d44:	movw	r1, #19752	; 0x4d28
   11d48:	movt	r1, #1
   11d4c:	bl	115f4 <__printf_chk@plt>
   11d50:	b	11c54 <__assert_fail@plt+0x540>
   11d54:	mov	r4, #0
   11d58:	mov	r5, #0
   11d5c:	mov	fp, #25
   11d60:	mov	r7, #0
   11d64:	b	11bbc <__assert_fail@plt+0x4a8>
   11d68:	mov	r1, #10
   11d6c:	bl	11624 <__overflow@plt>
   11d70:	b	11cf0 <__assert_fail@plt+0x5dc>
   11d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d78:	movw	r6, #29104	; 0x71b0
   11d7c:	sub	sp, sp, #260	; 0x104
   11d80:	movt	r6, #2
   11d84:	mov	r7, r0
   11d88:	ldr	r0, [r0, #16]
   11d8c:	str	r1, [sp, #20]
   11d90:	mov	r9, r3
   11d94:	ldr	r1, [r6]
   11d98:	mov	sl, r2
   11d9c:	ldr	fp, [sp, #312]	; 0x138
   11da0:	ldr	r8, [sp, #316]	; 0x13c
   11da4:	str	r1, [sp, #252]	; 0xfc
   11da8:	add	r1, sp, #512	; 0x200
   11dac:	ldrd	r4, [r1, #-192]	; 0xffffff40
   11db0:	bl	114b0 <gelf_getclass@plt>
   11db4:	mov	r1, fp
   11db8:	add	r2, sp, #124	; 0x7c
   11dbc:	mov	r3, #128	; 0x80
   11dc0:	cmp	r0, #1
   11dc4:	mov	r0, r7
   11dc8:	movne	fp, #16
   11dcc:	moveq	fp, #8
   11dd0:	bl	13b30 <__assert_fail@plt+0x241c>
   11dd4:	add	r3, sp, #512	; 0x200
   11dd8:	movw	r1, #19784	; 0x4d48
   11ddc:	movt	r1, #1
   11de0:	ldrd	r2, [r3, #-208]	; 0xffffff30
   11de4:	strd	r2, [sp]
   11de8:	mov	r2, fp
   11dec:	str	r0, [sp, #8]
   11df0:	mov	r0, #1
   11df4:	bl	115f4 <__printf_chk@plt>
   11df8:	mov	r1, r9
   11dfc:	add	ip, sp, #28
   11e00:	mov	r0, sl
   11e04:	mov	r2, r8
   11e08:	add	r3, sp, #32
   11e0c:	str	ip, [sp]
   11e10:	bl	11690 <gelf_getsymshndx@plt>
   11e14:	subs	r9, r0, #0
   11e18:	beq	11f38 <__assert_fail@plt+0x824>
   11e1c:	ldrb	r3, [r9, #4]
   11e20:	and	r3, r3, #15
   11e24:	cmp	r3, #3
   11e28:	beq	11ea8 <__assert_fail@plt+0x794>
   11e2c:	ldr	r0, [r7, #16]
   11e30:	ldr	r1, [sp, #296]	; 0x128
   11e34:	ldr	r2, [r9]
   11e38:	bl	114bc <elf_strptr@plt>
   11e3c:	movw	r1, #19880	; 0x4da8
   11e40:	movt	r1, #1
   11e44:	mov	r2, r0
   11e48:	mov	r0, #1
   11e4c:	bl	115f4 <__printf_chk@plt>
   11e50:	orrs	r2, r4, r5
   11e54:	beq	11e7c <__assert_fail@plt+0x768>
   11e58:	cmp	r4, #0
   11e5c:	sbcs	r3, r5, #0
   11e60:	movge	r2, #43	; 0x2b
   11e64:	blt	11f28 <__assert_fail@plt+0x814>
   11e68:	movw	r1, #19844	; 0x4d84
   11e6c:	strd	r4, [sp]
   11e70:	mov	r0, #1
   11e74:	movt	r1, #1
   11e78:	bl	115f4 <__printf_chk@plt>
   11e7c:	movw	r3, #29120	; 0x71c0
   11e80:	movt	r3, #2
   11e84:	mov	r0, #10
   11e88:	ldr	r1, [r3]
   11e8c:	bl	114d4 <_IO_putc@plt>
   11e90:	ldr	r2, [sp, #252]	; 0xfc
   11e94:	ldr	r3, [r6]
   11e98:	cmp	r2, r3
   11e9c:	bne	11f64 <__assert_fail@plt+0x850>
   11ea0:	add	sp, sp, #260	; 0x104
   11ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ea8:	ldrh	r1, [r9, #6]
   11eac:	movw	r3, #65535	; 0xffff
   11eb0:	ldr	r0, [r7, #16]
   11eb4:	cmp	r1, r3
   11eb8:	ldreq	r1, [sp, #28]
   11ebc:	bl	1166c <elf_getscn@plt>
   11ec0:	add	r1, sp, #56	; 0x38
   11ec4:	bl	11408 <gelf_getshdr@plt>
   11ec8:	ldr	r1, [sp, #20]
   11ecc:	cmp	r1, #0
   11ed0:	cmpne	r0, #0
   11ed4:	mov	r3, r0
   11ed8:	bne	11f18 <__assert_fail@plt+0x804>
   11edc:	mov	r2, #5
   11ee0:	movw	r1, #19828	; 0x4d74
   11ee4:	mov	r0, #0
   11ee8:	movt	r1, #1
   11eec:	bl	11468 <dcgettext@plt>
   11ef0:	ldrh	r3, [r9, #6]
   11ef4:	movw	r1, #65535	; 0xffff
   11ef8:	cmp	r3, r1
   11efc:	movw	r1, #19816	; 0x4d68
   11f00:	movt	r1, #1
   11f04:	ldreq	r3, [sp, #28]
   11f08:	mov	r2, r0
   11f0c:	mov	r0, #1
   11f10:	bl	115f4 <__printf_chk@plt>
   11f14:	b	11e50 <__assert_fail@plt+0x73c>
   11f18:	ldr	r0, [r7, #16]
   11f1c:	ldr	r1, [sp, #300]	; 0x12c
   11f20:	ldr	r2, [r3]
   11f24:	b	11e38 <__assert_fail@plt+0x724>
   11f28:	rsbs	r4, r4, #0
   11f2c:	rsc	r5, r5, #0
   11f30:	mov	r2, #45	; 0x2d
   11f34:	b	11e68 <__assert_fail@plt+0x754>
   11f38:	mov	r2, #5
   11f3c:	movw	r1, #19800	; 0x4d58
   11f40:	movt	r1, #1
   11f44:	bl	11468 <dcgettext@plt>
   11f48:	mov	r3, r8
   11f4c:	movw	r1, #19816	; 0x4d68
   11f50:	movt	r1, #1
   11f54:	mov	r2, r0
   11f58:	mov	r0, #1
   11f5c:	bl	115f4 <__printf_chk@plt>
   11f60:	b	11e50 <__assert_fail@plt+0x73c>
   11f64:	bl	1148c <__stack_chk_fail@plt>
   11f68:	movw	ip, #29128	; 0x71c8
   11f6c:	movt	ip, #2
   11f70:	push	{r4, r5, r6, lr}
   11f74:	mov	r6, r1
   11f78:	ldr	r4, [ip]
   11f7c:	cmp	r4, #0
   11f80:	beq	11fd8 <__assert_fail@plt+0x8c4>
   11f84:	mov	r1, r3
   11f88:	ldr	r2, [r2]
   11f8c:	bl	114bc <elf_strptr@plt>
   11f90:	mov	r5, r0
   11f94:	b	11fbc <__assert_fail@plt+0x8a8>
   11f98:	cmp	r5, #0
   11f9c:	beq	11fb0 <__assert_fail@plt+0x89c>
   11fa0:	ldr	r0, [r4, #4]
   11fa4:	bl	11414 <strcmp@plt>
   11fa8:	cmp	r0, #0
   11fac:	beq	11fd8 <__assert_fail@plt+0x8c4>
   11fb0:	ldr	r4, [r4, #8]
   11fb4:	cmp	r4, #0
   11fb8:	beq	11fe0 <__assert_fail@plt+0x8cc>
   11fbc:	ldrb	r3, [r4]
   11fc0:	mov	r1, r5
   11fc4:	cmp	r3, #0
   11fc8:	bne	11f98 <__assert_fail@plt+0x884>
   11fcc:	ldr	r3, [r4, #4]
   11fd0:	cmp	r3, r6
   11fd4:	bne	11fb0 <__assert_fail@plt+0x89c>
   11fd8:	mov	r0, #1
   11fdc:	pop	{r4, r5, r6, pc}
   11fe0:	mov	r0, r4
   11fe4:	pop	{r4, r5, r6, pc}
   11fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fec:	movw	sl, #29104	; 0x71b0
   11ff0:	movt	sl, #2
   11ff4:	sub	sp, sp, #340	; 0x154
   11ff8:	mov	r6, r0
   11ffc:	ldr	r0, [r0, #16]
   12000:	ldr	r3, [sl]
   12004:	movw	fp, #29120	; 0x71c0
   12008:	str	sl, [sp, #52]	; 0x34
   1200c:	movt	fp, #2
   12010:	str	r1, [sp, #68]	; 0x44
   12014:	mov	r8, #0
   12018:	str	r2, [sp, #44]	; 0x2c
   1201c:	str	fp, [sp, #56]	; 0x38
   12020:	str	r3, [sp, #332]	; 0x14c
   12024:	bl	114b0 <gelf_getclass@plt>
   12028:	str	r0, [sp, #60]	; 0x3c
   1202c:	mov	r1, r8
   12030:	ldr	r0, [r6, #16]
   12034:	bl	1163c <elf_nextscn@plt>
   12038:	subs	r8, r0, #0
   1203c:	beq	12294 <__assert_fail@plt+0xb80>
   12040:	add	r1, sp, #72	; 0x48
   12044:	bl	11408 <gelf_getshdr@plt>
   12048:	subs	fp, r0, #0
   1204c:	beq	1235c <__assert_fail@plt+0xc48>
   12050:	ldr	r3, [fp, #4]
   12054:	cmp	r3, #9
   12058:	cmpne	r3, #4
   1205c:	bne	1202c <__assert_fail@plt+0x918>
   12060:	mov	r0, r8
   12064:	ldr	r4, [r6, #16]
   12068:	bl	11660 <elf_ndxscn@plt>
   1206c:	mov	r2, fp
   12070:	ldr	r3, [sp, #44]	; 0x2c
   12074:	mov	r1, r0
   12078:	mov	r0, r4
   1207c:	bl	11f68 <__assert_fail@plt+0x854>
   12080:	cmp	r0, #0
   12084:	beq	1202c <__assert_fail@plt+0x918>
   12088:	ldr	r1, [fp, #44]	; 0x2c
   1208c:	ldr	r0, [r6, #16]
   12090:	bl	1166c <elf_getscn@plt>
   12094:	add	r1, sp, #136	; 0x88
   12098:	bl	11408 <gelf_getshdr@plt>
   1209c:	subs	r4, r0, #0
   120a0:	beq	1202c <__assert_fail@plt+0x918>
   120a4:	mov	r2, #5
   120a8:	movw	r1, #19892	; 0x4db4
   120ac:	mov	r0, #0
   120b0:	movt	r1, #1
   120b4:	bl	11468 <dcgettext@plt>
   120b8:	ldr	ip, [sp, #60]	; 0x3c
   120bc:	ldr	r2, [r4]
   120c0:	cmp	ip, #1
   120c4:	ldr	r1, [sp, #44]	; 0x2c
   120c8:	movne	r4, #16
   120cc:	moveq	r4, #8
   120d0:	mov	r7, r0
   120d4:	ldr	r0, [r6, #16]
   120d8:	bl	114bc <elf_strptr@plt>
   120dc:	mov	r2, #5
   120e0:	movw	r1, #19956	; 0x4df4
   120e4:	movt	r1, #1
   120e8:	mov	r5, r0
   120ec:	mov	r0, #0
   120f0:	bl	11468 <dcgettext@plt>
   120f4:	mov	r3, r4
   120f8:	mov	r1, r7
   120fc:	mov	r2, r5
   12100:	str	r0, [sp]
   12104:	mov	r0, #1
   12108:	bl	115f4 <__printf_chk@plt>
   1210c:	mov	r0, r8
   12110:	mov	r1, #0
   12114:	bl	114f8 <elf_getdata@plt>
   12118:	subs	r4, r0, #0
   1211c:	beq	1202c <__assert_fail@plt+0x918>
   12120:	ldr	r1, [fp, #40]	; 0x28
   12124:	ldr	r0, [r6, #16]
   12128:	bl	1166c <elf_getscn@plt>
   1212c:	add	r1, sp, #200	; 0xc8
   12130:	mov	sl, r0
   12134:	bl	11408 <gelf_getshdr@plt>
   12138:	mov	r1, #0
   1213c:	str	r0, [sp, #40]	; 0x28
   12140:	mov	r0, sl
   12144:	bl	114f8 <elf_getdata@plt>
   12148:	ldr	ip, [sp, #40]	; 0x28
   1214c:	cmp	ip, #0
   12150:	cmpne	r0, #0
   12154:	mov	r7, r0
   12158:	movne	r5, #0
   1215c:	moveq	r5, #1
   12160:	beq	1202c <__assert_fail@plt+0x918>
   12164:	mov	r1, r5
   12168:	ldr	r0, [r6, #16]
   1216c:	bl	1163c <elf_nextscn@plt>
   12170:	subs	r5, r0, #0
   12174:	beq	121bc <__assert_fail@plt+0xaa8>
   12178:	add	r1, sp, #264	; 0x108
   1217c:	bl	11408 <gelf_getshdr@plt>
   12180:	subs	r3, r0, #0
   12184:	beq	12164 <__assert_fail@plt+0xa50>
   12188:	ldr	r2, [r3, #4]
   1218c:	cmp	r2, #18
   12190:	bne	12164 <__assert_fail@plt+0xa50>
   12194:	mov	r0, sl
   12198:	ldr	r9, [r3, #40]	; 0x28
   1219c:	bl	11660 <elf_ndxscn@plt>
   121a0:	cmp	r9, r0
   121a4:	bne	12164 <__assert_fail@plt+0xa50>
   121a8:	mov	r0, r5
   121ac:	mov	r1, #0
   121b0:	bl	114f8 <elf_getdata@plt>
   121b4:	str	r0, [sp, #48]	; 0x30
   121b8:	b	121c0 <__assert_fail@plt+0xaac>
   121bc:	str	r5, [sp, #48]	; 0x30
   121c0:	ldr	r3, [fp, #4]
   121c4:	mov	r2, #1
   121c8:	ldr	r0, [r6, #16]
   121cc:	cmp	r3, #9
   121d0:	mov	r3, r2
   121d4:	beq	122b0 <__assert_fail@plt+0xb9c>
   121d8:	ldr	ip, [sp, #40]	; 0x28
   121dc:	mov	r1, #7
   121e0:	ldr	ip, [ip, #40]	; 0x28
   121e4:	str	ip, [sp, #40]	; 0x28
   121e8:	bl	11504 <gelf_fsize@plt>
   121ec:	mov	r3, #0
   121f0:	mov	r2, r0
   121f4:	ldrd	r0, [fp, #32]
   121f8:	bl	13ff0 <__assert_fail@plt+0x28dc>
   121fc:	cmp	r0, #0
   12200:	ble	12280 <__assert_fail@plt+0xb6c>
   12204:	mov	sl, #1
   12208:	add	r9, r0, #1
   1220c:	add	r5, sp, #264	; 0x108
   12210:	str	r8, [sp, #64]	; 0x40
   12214:	mov	r8, sl
   12218:	str	fp, [sp, #36]	; 0x24
   1221c:	mov	r0, r4
   12220:	sub	r1, r8, #1
   12224:	mov	r2, r5
   12228:	bl	115b8 <gelf_getrela@plt>
   1222c:	subs	lr, r0, #0
   12230:	beq	12270 <__assert_fail@plt+0xb5c>
   12234:	ldr	sl, [sp, #40]	; 0x28
   12238:	mov	r0, r6
   1223c:	ldr	fp, [sp, #44]	; 0x2c
   12240:	mov	r2, r7
   12244:	ldr	r1, [sp, #36]	; 0x24
   12248:	str	sl, [sp]
   1224c:	str	fp, [sp, #4]
   12250:	ldrd	sl, [lr]
   12254:	ldr	r3, [sp, #48]	; 0x30
   12258:	strd	sl, [sp, #8]
   1225c:	ldrd	sl, [lr, #8]
   12260:	strd	sl, [sp, #16]
   12264:	ldrd	sl, [lr, #16]
   12268:	strd	sl, [sp, #24]
   1226c:	bl	11d74 <__assert_fail@plt+0x660>
   12270:	add	r8, r8, #1
   12274:	cmp	r8, r9
   12278:	bne	1221c <__assert_fail@plt+0xb08>
   1227c:	ldr	r8, [sp, #64]	; 0x40
   12280:	ldr	fp, [sp, #56]	; 0x38
   12284:	mov	r0, #10
   12288:	ldr	r1, [fp]
   1228c:	bl	114d4 <_IO_putc@plt>
   12290:	b	1202c <__assert_fail@plt+0x918>
   12294:	ldr	fp, [sp, #52]	; 0x34
   12298:	ldr	r2, [sp, #332]	; 0x14c
   1229c:	ldr	r3, [fp]
   122a0:	cmp	r2, r3
   122a4:	bne	123a4 <__assert_fail@plt+0xc90>
   122a8:	add	sp, sp, #340	; 0x154
   122ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122b0:	ldr	sl, [sp, #40]	; 0x28
   122b4:	mov	r1, #8
   122b8:	ldr	sl, [sl, #40]	; 0x28
   122bc:	str	sl, [sp, #40]	; 0x28
   122c0:	bl	11504 <gelf_fsize@plt>
   122c4:	mov	r3, #0
   122c8:	mov	r2, r0
   122cc:	ldrd	r0, [fp, #32]
   122d0:	bl	13ff0 <__assert_fail@plt+0x28dc>
   122d4:	cmp	r0, #0
   122d8:	ble	12280 <__assert_fail@plt+0xb6c>
   122dc:	mov	sl, #1
   122e0:	add	r9, r0, #1
   122e4:	add	r5, sp, #264	; 0x108
   122e8:	str	r8, [sp, #64]	; 0x40
   122ec:	mov	r8, sl
   122f0:	str	fp, [sp, #36]	; 0x24
   122f4:	mov	r0, r4
   122f8:	sub	r1, r8, #1
   122fc:	mov	r2, r5
   12300:	bl	11648 <gelf_getrel@plt>
   12304:	subs	r3, r0, #0
   12308:	beq	1234c <__assert_fail@plt+0xc38>
   1230c:	ldr	sl, [sp, #44]	; 0x2c
   12310:	mov	r0, r6
   12314:	ldr	ip, [sp, #40]	; 0x28
   12318:	mov	r2, r7
   1231c:	ldr	r1, [sp, #36]	; 0x24
   12320:	str	sl, [sp, #4]
   12324:	str	ip, [sp]
   12328:	ldrd	sl, [r3]
   1232c:	strd	sl, [sp, #8]
   12330:	ldrd	sl, [r3, #8]
   12334:	ldr	r3, [sp, #48]	; 0x30
   12338:	strd	sl, [sp, #16]
   1233c:	mov	sl, #0
   12340:	mov	fp, #0
   12344:	strd	sl, [sp, #24]
   12348:	bl	11d74 <__assert_fail@plt+0x660>
   1234c:	add	r8, r8, #1
   12350:	cmp	r8, r9
   12354:	bne	122f4 <__assert_fail@plt+0xbe0>
   12358:	b	1227c <__assert_fail@plt+0xb68>
   1235c:	mov	r2, #5
   12360:	movw	r1, #19852	; 0x4d8c
   12364:	movt	r1, #1
   12368:	bl	11468 <dcgettext@plt>
   1236c:	mov	r4, r0
   12370:	mvn	r0, #0
   12374:	bl	115ac <elf_errmsg@plt>
   12378:	movw	ip, #19884	; 0x4dac
   1237c:	mov	lr, #484	; 0x1e4
   12380:	movt	ip, #1
   12384:	mov	r2, r4
   12388:	mov	r1, fp
   1238c:	ldr	r3, [sp, #68]	; 0x44
   12390:	str	lr, [sp]
   12394:	str	ip, [sp, #4]
   12398:	str	r0, [sp, #8]
   1239c:	mov	r0, #1
   123a0:	bl	11510 <error@plt>
   123a4:	bl	1148c <__stack_chk_fail@plt>
   123a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123ac:	add	fp, sp, #32
   123b0:	sub	sp, sp, #172	; 0xac
   123b4:	movw	ip, #29104	; 0x71b0
   123b8:	movt	ip, #2
   123bc:	mov	r5, r1
   123c0:	mov	r7, r0
   123c4:	ldr	r1, [ip]
   123c8:	mov	r6, r2
   123cc:	str	ip, [fp, #-144]	; 0xffffff70
   123d0:	mov	r4, r3
   123d4:	str	r1, [fp, #-40]	; 0xffffffd8
   123d8:	bl	13a70 <__assert_fail@plt+0x235c>
   123dc:	mov	sl, r0
   123e0:	mov	r0, r7
   123e4:	bl	114b0 <gelf_getclass@plt>
   123e8:	cmp	r0, #1
   123ec:	mov	r0, sl
   123f0:	movne	r7, #64	; 0x40
   123f4:	moveq	r7, #32
   123f8:	bl	13b6c <__assert_fail@plt+0x2458>
   123fc:	mov	r2, r6
   12400:	mov	r3, r7
   12404:	movw	r1, #19992	; 0x4e18
   12408:	movt	r1, #1
   1240c:	str	r0, [sp]
   12410:	mov	r0, #1
   12414:	bl	115f4 <__printf_chk@plt>
   12418:	cmp	r5, #0
   1241c:	beq	12930 <__assert_fail@plt+0x121c>
   12420:	mov	r0, r5
   12424:	bl	115a0 <strlen@plt>
   12428:	add	r9, r0, #1
   1242c:	mov	r8, r0
   12430:	cmp	r4, #0
   12434:	moveq	r7, r4
   12438:	beq	12448 <__assert_fail@plt+0xd34>
   1243c:	mov	r0, r4
   12440:	bl	115a0 <strlen@plt>
   12444:	mov	r7, r0
   12448:	mov	r0, r6
   1244c:	add	r9, r7, r9
   12450:	bl	115a0 <strlen@plt>
   12454:	cmp	r5, #0
   12458:	add	ip, r0, #1
   1245c:	add	r3, r9, ip
   12460:	add	r3, r3, #7
   12464:	bic	r3, r3, #7
   12468:	sub	sp, sp, r3
   1246c:	add	r0, sp, #24
   12470:	str	r0, [fp, #-148]	; 0xffffff6c
   12474:	beq	1276c <__assert_fail@plt+0x1058>
   12478:	mov	r1, r5
   1247c:	mov	r2, r8
   12480:	str	ip, [fp, #-176]	; 0xffffff50
   12484:	bl	11564 <mempcpy@plt>
   12488:	ldr	ip, [fp, #-176]	; 0xffffff50
   1248c:	mov	r1, r6
   12490:	mov	r2, ip
   12494:	bl	11564 <mempcpy@plt>
   12498:	cmp	r4, #0
   1249c:	beq	124b0 <__assert_fail@plt+0xd9c>
   124a0:	sub	r0, r0, #1
   124a4:	mov	r1, r4
   124a8:	add	r2, r7, #1
   124ac:	bl	11444 <memcpy@plt>
   124b0:	ldr	r0, [sl, #16]
   124b4:	sub	r1, fp, #140	; 0x8c
   124b8:	bl	116d8 <elf_getshdrstrndx@plt>
   124bc:	cmp	r0, #0
   124c0:	blt	12c70 <__assert_fail@plt+0x155c>
   124c4:	movw	r7, #29128	; 0x71c8
   124c8:	movt	r7, #2
   124cc:	ldrb	r3, [r7, #5]
   124d0:	cmp	r3, #0
   124d4:	bne	12774 <__assert_fail@plt+0x1060>
   124d8:	ldrb	r0, [r7, #6]
   124dc:	movw	r3, #29128	; 0x71c8
   124e0:	movt	r3, #2
   124e4:	cmp	r0, #0
   124e8:	moveq	r4, r0
   124ec:	bne	12524 <__assert_fail@plt+0xe10>
   124f0:	ldrb	r3, [r7, #7]
   124f4:	cmp	r3, #0
   124f8:	bne	12554 <__assert_fail@plt+0xe40>
   124fc:	mov	r0, sl
   12500:	bl	13b00 <__assert_fail@plt+0x23ec>
   12504:	ldr	ip, [fp, #-144]	; 0xffffff70
   12508:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1250c:	mov	r0, r4
   12510:	ldr	r3, [ip]
   12514:	cmp	r2, r3
   12518:	bne	12c94 <__assert_fail@plt+0x1580>
   1251c:	sub	sp, fp, #32
   12520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12524:	ldrb	r3, [r3, #5]
   12528:	cmp	r3, #0
   1252c:	movne	r4, #0
   12530:	bne	124f0 <__assert_fail@plt+0xddc>
   12534:	mov	r0, sl
   12538:	ldr	r1, [fp, #-148]	; 0xffffff6c
   1253c:	ldr	r2, [fp, #-140]	; 0xffffff74
   12540:	bl	11fe8 <__assert_fail@plt+0x8d4>
   12544:	ldrb	r3, [r7, #7]
   12548:	cmp	r3, #0
   1254c:	mov	r4, r0
   12550:	beq	124fc <__assert_fail@plt+0xde8>
   12554:	ldr	ip, [fp, #-140]	; 0xffffff74
   12558:	movw	r7, #29120	; 0x71c0
   1255c:	movt	r7, #2
   12560:	mov	r9, #0
   12564:	str	ip, [fp, #-152]	; 0xffffff68
   12568:	mov	r1, r9
   1256c:	ldr	r0, [sl, #16]
   12570:	bl	1163c <elf_nextscn@plt>
   12574:	subs	r9, r0, #0
   12578:	beq	12764 <__assert_fail@plt+0x1050>
   1257c:	sub	r1, fp, #108	; 0x6c
   12580:	bl	11408 <gelf_getshdr@plt>
   12584:	subs	r4, r0, #0
   12588:	beq	12c1c <__assert_fail@plt+0x1508>
   1258c:	ldr	r5, [r4, #4]
   12590:	cmp	r5, #1
   12594:	bne	12568 <__assert_fail@plt+0xe54>
   12598:	ldrd	r2, [r4, #32]
   1259c:	orrs	r0, r2, r3
   125a0:	beq	12568 <__assert_fail@plt+0xe54>
   125a4:	mov	r0, r9
   125a8:	ldr	r6, [sl, #16]
   125ac:	bl	11660 <elf_ndxscn@plt>
   125b0:	mov	r2, r4
   125b4:	ldr	r3, [fp, #-152]	; 0xffffff68
   125b8:	mov	r1, r0
   125bc:	mov	r0, r6
   125c0:	bl	11f68 <__assert_fail@plt+0x854>
   125c4:	cmp	r0, #0
   125c8:	beq	12568 <__assert_fail@plt+0xe54>
   125cc:	mov	r2, #5
   125d0:	movw	r1, #20188	; 0x4edc
   125d4:	mov	r0, #0
   125d8:	movt	r1, #1
   125dc:	bl	11468 <dcgettext@plt>
   125e0:	ldr	r2, [r4]
   125e4:	ldr	r1, [fp, #-152]	; 0xffffff68
   125e8:	mov	r6, r0
   125ec:	ldr	r0, [sl, #16]
   125f0:	bl	114bc <elf_strptr@plt>
   125f4:	mov	r1, r6
   125f8:	mov	r2, r0
   125fc:	mov	r0, r5
   12600:	bl	115f4 <__printf_chk@plt>
   12604:	mov	r0, r9
   12608:	mov	r1, #0
   1260c:	bl	114f8 <elf_getdata@plt>
   12610:	cmp	r0, #0
   12614:	str	r0, [fp, #-160]	; 0xffffff60
   12618:	beq	12568 <__assert_fail@plt+0xe54>
   1261c:	ldr	r3, [r0, #12]
   12620:	ldr	ip, [r0]
   12624:	cmp	r3, #16
   12628:	bls	12bac <__assert_fail@plt+0x1498>
   1262c:	str	sl, [fp, #-164]	; 0xffffff5c
   12630:	mov	r4, ip
   12634:	mov	r6, #16
   12638:	mov	r2, #0
   1263c:	mov	r8, r0
   12640:	mov	sl, ip
   12644:	movw	r1, #29120	; 0x71c0
   12648:	str	r9, [fp, #-168]	; 0xffffff58
   1264c:	movt	r1, #2
   12650:	str	r1, [fp, #-156]	; 0xffffff64
   12654:	movw	r1, #20216	; 0x4ef8
   12658:	mov	r0, #1
   1265c:	movt	r1, #1
   12660:	add	r5, sl, r6
   12664:	bl	115f4 <__printf_chk@plt>
   12668:	mov	r9, r4
   1266c:	ldrb	ip, [r9, #2]
   12670:	movw	r1, #20224	; 0x4f00
   12674:	ldrb	r2, [r9]
   12678:	movt	r1, #1
   1267c:	ldrb	r3, [r9, #1]
   12680:	mov	r0, #1
   12684:	str	ip, [sp]
   12688:	add	r9, r9, #4
   1268c:	ldrb	ip, [r9, #-1]
   12690:	str	ip, [sp, #4]
   12694:	bl	115f4 <__printf_chk@plt>
   12698:	cmp	r5, r9
   1269c:	bne	1266c <__assert_fail@plt+0xf58>
   126a0:	ldr	r0, [r7]
   126a4:	ldr	r2, [r0, #24]
   126a8:	ldr	r3, [r0, #20]
   126ac:	cmp	r3, r2
   126b0:	addcc	r2, r3, #1
   126b4:	strcc	r2, [r0, #20]
   126b8:	movcc	r2, #32
   126bc:	strbcc	r2, [r3]
   126c0:	bcs	12c98 <__assert_fail@plt+0x1584>
   126c4:	mov	r5, #0
   126c8:	ldrb	r9, [r4, r5]
   126cc:	tst	r9, #128	; 0x80
   126d0:	movne	r1, #46	; 0x2e
   126d4:	bne	126f4 <__assert_fail@plt+0xfe0>
   126d8:	bl	1157c <__ctype_b_loc@plt>
   126dc:	lsl	r3, r9, #1
   126e0:	ldr	r2, [r0]
   126e4:	ldrh	r3, [r2, r3]
   126e8:	tst	r3, #16384	; 0x4000
   126ec:	movne	r1, r9
   126f0:	moveq	r1, #46	; 0x2e
   126f4:	ldr	r0, [r7]
   126f8:	ldr	r3, [r0, #20]
   126fc:	ldr	r2, [r0, #24]
   12700:	cmp	r3, r2
   12704:	addcc	r2, r3, #1
   12708:	strcc	r2, [r0, #20]
   1270c:	strbcc	r1, [r3]
   12710:	bcs	12bcc <__assert_fail@plt+0x14b8>
   12714:	add	r5, r5, #1
   12718:	cmp	r5, #16
   1271c:	bne	126c8 <__assert_fail@plt+0xfb4>
   12720:	ldr	r0, [r7]
   12724:	ldr	r2, [r0, #24]
   12728:	ldr	r3, [r0, #20]
   1272c:	cmp	r3, r2
   12730:	addcc	r2, r3, #1
   12734:	strcc	r2, [r0, #20]
   12738:	movcc	r2, #10
   1273c:	strbcc	r2, [r3]
   12740:	bcs	12ce8 <__assert_fail@plt+0x15d4>
   12744:	ldr	r2, [r8, #12]
   12748:	add	r3, r6, #16
   1274c:	add	r4, r4, #16
   12750:	cmp	r3, r2
   12754:	bcs	1293c <__assert_fail@plt+0x1228>
   12758:	mov	r2, r6
   1275c:	mov	r6, r3
   12760:	b	12654 <__assert_fail@plt+0xf40>
   12764:	mov	r4, r9
   12768:	b	124fc <__assert_fail@plt+0xde8>
   1276c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   12770:	b	1248c <__assert_fail@plt+0xd78>
   12774:	ldr	ip, [fp, #-140]	; 0xffffff74
   12778:	mov	r0, sl
   1277c:	ldr	r1, [sl, #16]
   12780:	mov	r2, #0
   12784:	str	ip, [fp, #-168]	; 0xffffff58
   12788:	bl	11480 <disasm_begin@plt>
   1278c:	subs	ip, r0, #0
   12790:	str	ip, [fp, #-172]	; 0xffffff54
   12794:	beq	12c50 <__assert_fail@plt+0x153c>
   12798:	movw	r9, #29140	; 0x71d4
   1279c:	movt	r9, #2
   127a0:	mov	r5, #0
   127a4:	movw	ip, #6916	; 0x1b04
   127a8:	mov	r6, r9
   127ac:	movt	ip, #1
   127b0:	str	ip, [fp, #-152]	; 0xffffff68
   127b4:	movw	ip, #19964	; 0x4dfc
   127b8:	movt	ip, #1
   127bc:	str	ip, [fp, #-156]	; 0xffffff64
   127c0:	movw	ip, #29088	; 0x71a0
   127c4:	movt	ip, #2
   127c8:	str	ip, [fp, #-160]	; 0xffffff60
   127cc:	movw	ip, #29084	; 0x719c
   127d0:	movt	ip, #2
   127d4:	str	ip, [fp, #-164]	; 0xffffff5c
   127d8:	mov	r1, r5
   127dc:	ldr	r0, [sl, #16]
   127e0:	bl	1163c <elf_nextscn@plt>
   127e4:	subs	r5, r0, #0
   127e8:	beq	12924 <__assert_fail@plt+0x1210>
   127ec:	sub	r1, fp, #108	; 0x6c
   127f0:	bl	11408 <gelf_getshdr@plt>
   127f4:	subs	r4, r0, #0
   127f8:	beq	12bd4 <__assert_fail@plt+0x14c0>
   127fc:	ldr	r9, [r4, #4]
   12800:	cmp	r9, #1
   12804:	bne	127d8 <__assert_fail@plt+0x10c4>
   12808:	ldrd	r2, [r4, #32]
   1280c:	orrs	r0, r2, r3
   12810:	beq	127d8 <__assert_fail@plt+0x10c4>
   12814:	ldrd	r2, [r4, #8]
   12818:	mov	r1, #0
   1281c:	mov	r0, #4
   12820:	and	r3, r3, r1
   12824:	and	r2, r2, r0
   12828:	orrs	r1, r2, r3
   1282c:	beq	127d8 <__assert_fail@plt+0x10c4>
   12830:	mov	r0, r5
   12834:	ldr	r8, [sl, #16]
   12838:	bl	11660 <elf_ndxscn@plt>
   1283c:	mov	r2, r4
   12840:	ldr	r3, [fp, #-168]	; 0xffffff58
   12844:	mov	r1, r0
   12848:	mov	r0, r8
   1284c:	bl	11f68 <__assert_fail@plt+0x854>
   12850:	cmp	r0, #0
   12854:	beq	127d8 <__assert_fail@plt+0x10c4>
   12858:	mov	r0, r5
   1285c:	mov	r1, #0
   12860:	bl	114f8 <elf_getdata@plt>
   12864:	subs	r8, r0, #0
   12868:	beq	127d8 <__assert_fail@plt+0x10c4>
   1286c:	ldr	r1, [fp, #-168]	; 0xffffff58
   12870:	ldr	r2, [r4]
   12874:	ldr	r0, [sl, #16]
   12878:	bl	114bc <elf_strptr@plt>
   1287c:	movw	r1, #20076	; 0x4e6c
   12880:	movt	r1, #1
   12884:	mov	r2, r0
   12888:	mov	r0, r9
   1288c:	bl	115f4 <__printf_chk@plt>
   12890:	ldrb	r0, [r6]
   12894:	ldr	r3, [r8]
   12898:	ldr	lr, [r4, #16]
   1289c:	cmp	r0, #0
   128a0:	ldr	r2, [r4, #20]
   128a4:	str	r3, [fp, #-124]	; 0xffffff84
   128a8:	str	lr, [fp, #-132]	; 0xffffff7c
   128ac:	str	r2, [fp, #-128]	; 0xffffff80
   128b0:	str	r3, [fp, #-120]	; 0xffffff88
   128b4:	bne	12ae8 <__assert_fail@plt+0x13d4>
   128b8:	ldr	ip, [fp, #-156]	; 0xffffff64
   128bc:	movw	r1, #19964	; 0x4dfc
   128c0:	movt	r1, #1
   128c4:	mov	r9, r2
   128c8:	str	r0, [fp, #-112]	; 0xffffff90
   128cc:	str	r0, [fp, #-116]	; 0xffffff8c
   128d0:	str	ip, [fp, #-136]	; 0xffffff78
   128d4:	ldr	r2, [r8, #12]
   128d8:	mov	ip, #0
   128dc:	str	r1, [sp, #8]
   128e0:	sub	r4, fp, #132	; 0x84
   128e4:	ldr	r1, [fp, #-152]	; 0xffffff68
   128e8:	add	r2, r3, r2
   128ec:	str	lr, [sp]
   128f0:	str	r9, [sp, #4]
   128f4:	str	r1, [sp, #12]
   128f8:	sub	r1, fp, #124	; 0x7c
   128fc:	ldr	r0, [fp, #-172]	; 0xffffff54
   12900:	str	r4, [sp, #16]
   12904:	str	ip, [sp, #20]
   12908:	bl	11474 <disasm_cb@plt>
   1290c:	ldrb	r3, [r6]
   12910:	cmp	r3, #0
   12914:	beq	127d8 <__assert_fail@plt+0x10c4>
   12918:	ldr	r0, [fp, #-136]	; 0xffffff78
   1291c:	bl	11438 <free@plt>
   12920:	b	127d8 <__assert_fail@plt+0x10c4>
   12924:	ldr	r0, [fp, #-172]	; 0xffffff54
   12928:	bl	11600 <disasm_end@plt>
   1292c:	b	124d8 <__assert_fail@plt+0xdc4>
   12930:	mov	r9, #1
   12934:	mov	r8, r5
   12938:	b	12430 <__assert_fail@plt+0xd1c>
   1293c:	ldr	sl, [fp, #-164]	; 0xffffff5c
   12940:	ldr	r9, [fp, #-168]	; 0xffffff58
   12944:	mov	r2, r6
   12948:	movw	r1, #20216	; 0x4ef8
   1294c:	mov	r0, #1
   12950:	movt	r1, #1
   12954:	bl	115f4 <__printf_chk@plt>
   12958:	ldr	ip, [fp, #-160]	; 0xffffff60
   1295c:	ldr	r3, [ip, #12]
   12960:	rsb	r6, r6, r3
   12964:	cmp	r6, #3
   12968:	bls	12bc4 <__assert_fail@plt+0x14b0>
   1296c:	mov	r5, #4
   12970:	mov	r2, #0
   12974:	b	12980 <__assert_fail@plt+0x126c>
   12978:	mov	r2, r5
   1297c:	mov	r5, r3
   12980:	mov	ip, r4
   12984:	movw	r1, #20224	; 0x4f00
   12988:	ldrb	r2, [ip, r2]!
   1298c:	movt	r1, #1
   12990:	mov	r0, #1
   12994:	ldrb	lr, [ip, #2]
   12998:	ldrb	r3, [ip, #1]
   1299c:	str	lr, [sp]
   129a0:	ldrb	ip, [ip, #3]
   129a4:	str	ip, [sp, #4]
   129a8:	bl	115f4 <__printf_chk@plt>
   129ac:	add	r3, r5, #4
   129b0:	cmp	r6, r3
   129b4:	bcs	12978 <__assert_fail@plt+0x1264>
   129b8:	cmp	r5, r6
   129bc:	bcs	129e4 <__assert_fail@plt+0x12d0>
   129c0:	mov	r0, #1
   129c4:	ldrb	r2, [r4, r5]
   129c8:	movw	r1, #20252	; 0x4f1c
   129cc:	add	r5, r5, r0
   129d0:	movt	r1, #1
   129d4:	bl	115f4 <__printf_chk@plt>
   129d8:	cmp	r6, r5
   129dc:	bhi	129c0 <__assert_fail@plt+0x12ac>
   129e0:	mov	r5, r6
   129e4:	lsl	r3, r5, #1
   129e8:	rsb	r5, r5, #19
   129ec:	rsb	r3, r3, #33	; 0x21
   129f0:	adds	r5, r3, r5, lsr #2
   129f4:	movne	r8, #32
   129f8:	ldrne	r2, [fp, #-156]	; 0xffffff64
   129fc:	beq	12a28 <__assert_fail@plt+0x1314>
   12a00:	ldr	r0, [r2]
   12a04:	ldr	r3, [r0, #20]
   12a08:	ldr	r1, [r0, #24]
   12a0c:	cmp	r3, r1
   12a10:	addcc	r1, r3, #1
   12a14:	strcc	r1, [r0, #20]
   12a18:	strbcc	r8, [r3]
   12a1c:	bcs	12cd4 <__assert_fail@plt+0x15c0>
   12a20:	subs	r5, r5, #1
   12a24:	bne	12a00 <__assert_fail@plt+0x12ec>
   12a28:	cmp	r6, #0
   12a2c:	addne	r6, r4, r6
   12a30:	ldrne	r5, [fp, #-156]	; 0xffffff64
   12a34:	beq	12a8c <__assert_fail@plt+0x1378>
   12a38:	ldrb	r8, [r4], #1
   12a3c:	tst	r8, #128	; 0x80
   12a40:	movne	r1, #46	; 0x2e
   12a44:	bne	12a64 <__assert_fail@plt+0x1350>
   12a48:	bl	1157c <__ctype_b_loc@plt>
   12a4c:	lsl	r3, r8, #1
   12a50:	ldr	r2, [r0]
   12a54:	ldrh	r3, [r2, r3]
   12a58:	tst	r3, #16384	; 0x4000
   12a5c:	movne	r1, r8
   12a60:	moveq	r1, #46	; 0x2e
   12a64:	ldr	r0, [r5]
   12a68:	ldr	r3, [r0, #20]
   12a6c:	ldr	r2, [r0, #24]
   12a70:	cmp	r3, r2
   12a74:	addcc	r2, r3, #1
   12a78:	strcc	r2, [r0, #20]
   12a7c:	strbcc	r1, [r3]
   12a80:	bcs	12d00 <__assert_fail@plt+0x15ec>
   12a84:	cmp	r4, r6
   12a88:	bne	12a38 <__assert_fail@plt+0x1324>
   12a8c:	ldr	ip, [fp, #-156]	; 0xffffff64
   12a90:	ldr	r0, [ip]
   12a94:	ldr	r3, [r0, #20]
   12a98:	ldr	r2, [r0, #24]
   12a9c:	cmp	r3, r2
   12aa0:	addcc	r1, r3, #1
   12aa4:	strcc	r1, [r0, #20]
   12aa8:	movcc	r2, #10
   12aac:	strbcc	r2, [r3]
   12ab0:	bcs	12cf4 <__assert_fail@plt+0x15e0>
   12ab4:	ldr	ip, [fp, #-156]	; 0xffffff64
   12ab8:	ldr	r0, [ip]
   12abc:	ldr	r3, [r0, #20]
   12ac0:	ldr	r2, [r0, #24]
   12ac4:	cmp	r3, r2
   12ac8:	addcc	r1, r3, #1
   12acc:	strcc	r1, [r0, #20]
   12ad0:	movcc	r2, #10
   12ad4:	strbcc	r2, [r3]
   12ad8:	bcc	12568 <__assert_fail@plt+0xe54>
   12adc:	mov	r1, #10
   12ae0:	bl	11624 <__overflow@plt>
   12ae4:	b	12568 <__assert_fail@plt+0xe54>
   12ae8:	movw	r2, #29076	; 0x7194
   12aec:	movt	r2, #2
   12af0:	movw	lr, #29072	; 0x7190
   12af4:	movt	lr, #2
   12af8:	ldr	r4, [r2]
   12afc:	movw	r0, #29068	; 0x718c
   12b00:	ldr	lr, [lr]
   12b04:	movt	r0, #2
   12b08:	cmp	r4, #0
   12b0c:	movw	r2, #20104	; 0x4e88
   12b10:	movt	r2, #1
   12b14:	ldr	r0, [r0]
   12b18:	ldr	ip, [fp, #-160]	; 0xffffff60
   12b1c:	movw	r1, #29064	; 0x7188
   12b20:	moveq	r4, r2
   12b24:	movt	r1, #2
   12b28:	cmp	lr, #0
   12b2c:	movw	r3, #29080	; 0x7198
   12b30:	movt	r3, #2
   12b34:	ldr	r1, [r1]
   12b38:	moveq	lr, r2
   12b3c:	cmp	r0, #0
   12b40:	ldr	r3, [r3]
   12b44:	str	r4, [sp]
   12b48:	moveq	r0, r2
   12b4c:	str	lr, [sp, #4]
   12b50:	cmp	r1, #0
   12b54:	ldr	r4, [ip]
   12b58:	ldr	ip, [fp, #-164]	; 0xffffff5c
   12b5c:	moveq	r1, r2
   12b60:	str	r0, [sp, #8]
   12b64:	cmp	r3, #0
   12b68:	sub	r0, fp, #136	; 0x88
   12b6c:	str	r4, [fp, #-116]	; 0xffffff8c
   12b70:	ldr	lr, [ip]
   12b74:	moveq	r3, r2
   12b78:	str	r1, [sp, #12]
   12b7c:	movw	r2, #20108	; 0x4e8c
   12b80:	mov	r1, r9
   12b84:	movt	r2, #1
   12b88:	str	lr, [fp, #-112]	; 0xffffff90
   12b8c:	bl	11528 <__asprintf_chk@plt>
   12b90:	cmp	r0, #0
   12b94:	blt	12ca4 <__assert_fail@plt+0x1590>
   12b98:	ldr	r3, [fp, #-124]	; 0xffffff84
   12b9c:	ldr	lr, [fp, #-132]	; 0xffffff7c
   12ba0:	ldr	r9, [fp, #-128]	; 0xffffff80
   12ba4:	ldr	r1, [fp, #-136]	; 0xffffff78
   12ba8:	b	128d4 <__assert_fail@plt+0x11c0>
   12bac:	movw	r3, #29120	; 0x71c0
   12bb0:	mov	r4, ip
   12bb4:	movt	r3, #2
   12bb8:	mov	r6, #0
   12bbc:	str	r3, [fp, #-156]	; 0xffffff64
   12bc0:	b	12944 <__assert_fail@plt+0x1230>
   12bc4:	mov	r5, #0
   12bc8:	b	129b8 <__assert_fail@plt+0x12a4>
   12bcc:	bl	11624 <__overflow@plt>
   12bd0:	b	12714 <__assert_fail@plt+0x1000>
   12bd4:	mov	r2, #5
   12bd8:	movw	r1, #19852	; 0x4d8c
   12bdc:	movt	r1, #1
   12be0:	bl	11468 <dcgettext@plt>
   12be4:	mov	r5, r0
   12be8:	mvn	r0, #0
   12bec:	bl	115ac <elf_errmsg@plt>
   12bf0:	ldr	r3, [fp, #-148]	; 0xffffff6c
   12bf4:	mov	r2, r5
   12bf8:	mov	r1, r4
   12bfc:	movw	ip, #19884	; 0x4dac
   12c00:	mov	lr, #696	; 0x2b8
   12c04:	movt	ip, #1
   12c08:	str	r0, [sp, #8]
   12c0c:	str	lr, [sp]
   12c10:	mov	r0, #1
   12c14:	str	ip, [sp, #4]
   12c18:	bl	11510 <error@plt>
   12c1c:	mov	r2, #5
   12c20:	movw	r1, #19852	; 0x4d8c
   12c24:	movt	r1, #1
   12c28:	bl	11468 <dcgettext@plt>
   12c2c:	mov	r5, r0
   12c30:	mvn	r0, #0
   12c34:	bl	115ac <elf_errmsg@plt>
   12c38:	mov	r2, r5
   12c3c:	mov	r1, r4
   12c40:	ldr	r3, [fp, #-148]	; 0xffffff6c
   12c44:	movw	ip, #19884	; 0x4dac
   12c48:	movw	lr, #559	; 0x22f
   12c4c:	b	12c04 <__assert_fail@plt+0x14f0>
   12c50:	mov	r2, #5
   12c54:	movw	r1, #20056	; 0x4e58
   12c58:	movt	r1, #1
   12c5c:	bl	11468 <dcgettext@plt>
   12c60:	ldr	r1, [fp, #-172]	; 0xffffff54
   12c64:	mov	r2, r0
   12c68:	mov	r0, #1
   12c6c:	bl	11510 <error@plt>
   12c70:	mov	r2, #5
   12c74:	movw	r1, #20008	; 0x4e28
   12c78:	mov	r0, #0
   12c7c:	movt	r1, #1
   12c80:	bl	11468 <dcgettext@plt>
   12c84:	mov	r1, #0
   12c88:	mov	r2, r0
   12c8c:	mov	r0, #1
   12c90:	bl	11510 <error@plt>
   12c94:	bl	1148c <__stack_chk_fail@plt>
   12c98:	mov	r1, #32
   12c9c:	bl	11624 <__overflow@plt>
   12ca0:	b	126c4 <__assert_fail@plt+0xfb0>
   12ca4:	bl	115c4 <__errno_location@plt>
   12ca8:	mov	r2, #5
   12cac:	movw	r1, #20164	; 0x4ec4
   12cb0:	movt	r1, #1
   12cb4:	ldr	r4, [r0]
   12cb8:	movw	r0, #20152	; 0x4eb8
   12cbc:	movt	r0, #1
   12cc0:	bl	11468 <dcgettext@plt>
   12cc4:	mov	r1, r4
   12cc8:	mov	r2, r0
   12ccc:	mov	r0, r9
   12cd0:	bl	11510 <error@plt>
   12cd4:	mov	r1, #32
   12cd8:	str	r2, [fp, #-176]	; 0xffffff50
   12cdc:	bl	11624 <__overflow@plt>
   12ce0:	ldr	r2, [fp, #-176]	; 0xffffff50
   12ce4:	b	12a20 <__assert_fail@plt+0x130c>
   12ce8:	mov	r1, #10
   12cec:	bl	11624 <__overflow@plt>
   12cf0:	b	12744 <__assert_fail@plt+0x1030>
   12cf4:	mov	r1, #10
   12cf8:	bl	11624 <__overflow@plt>
   12cfc:	b	12ab4 <__assert_fail@plt+0x13a0>
   12d00:	bl	11624 <__overflow@plt>
   12d04:	b	12a84 <__assert_fail@plt+0x1370>
   12d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d0c:	add	fp, sp, #32
   12d10:	sub	sp, sp, #44	; 0x2c
   12d14:	movw	ip, #29104	; 0x71b0
   12d18:	movt	ip, #2
   12d1c:	str	r3, [fp, #-56]	; 0xffffffc8
   12d20:	mov	r5, r0
   12d24:	ldr	r3, [ip]
   12d28:	mov	r4, r2
   12d2c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12d30:	mov	r6, r1
   12d34:	str	ip, [fp, #-52]	; 0xffffffcc
   12d38:	str	r3, [fp, #-40]	; 0xffffffd8
   12d3c:	bl	115a0 <strlen@plt>
   12d40:	ldr	r7, [fp, #4]
   12d44:	mov	r8, r0
   12d48:	subs	r0, r4, #0
   12d4c:	beq	12d54 <__assert_fail@plt+0x1640>
   12d50:	bl	115a0 <strlen@plt>
   12d54:	add	r3, r0, r8
   12d58:	cmp	r7, #0
   12d5c:	add	r3, r3, #10
   12d60:	bic	r3, r3, #7
   12d64:	moveq	r0, #2
   12d68:	sub	sp, sp, r3
   12d6c:	add	ip, sp, #16
   12d70:	str	ip, [fp, #-48]	; 0xffffffd0
   12d74:	beq	12d84 <__assert_fail@plt+0x1670>
   12d78:	mov	r0, r7
   12d7c:	bl	115a0 <strlen@plt>
   12d80:	add	r0, r0, #2
   12d84:	add	r3, r0, #7
   12d88:	cmp	r4, #0
   12d8c:	bic	r3, r3, #7
   12d90:	sub	sp, sp, r3
   12d94:	add	r9, sp, #16
   12d98:	beq	12f10 <__assert_fail@plt+0x17fc>
   12d9c:	mov	r1, r4
   12da0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12da4:	bl	1145c <stpcpy@plt>
   12da8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12dac:	bl	1145c <stpcpy@plt>
   12db0:	movw	r3, #20260	; 0x4f24
   12db4:	movt	r3, #1
   12db8:	cmp	r7, #0
   12dbc:	ldrh	r3, [r3]
   12dc0:	strh	r3, [r0]
   12dc4:	moveq	r0, r9
   12dc8:	beq	12dd8 <__assert_fail@plt+0x16c4>
   12dcc:	mov	r1, r7
   12dd0:	mov	r0, r9
   12dd4:	bl	1145c <stpcpy@plt>
   12dd8:	movw	r3, #20264	; 0x4f28
   12ddc:	movt	r3, #1
   12de0:	mov	r7, #0
   12de4:	mov	sl, #8
   12de8:	ldrh	r3, [r3]
   12dec:	strh	r3, [r0]
   12df0:	b	12e60 <__assert_fail@plt+0x174c>
   12df4:	mov	r0, r4
   12df8:	bl	116f0 <elf_kind@plt>
   12dfc:	cmp	r0, #3
   12e00:	beq	12ef4 <__assert_fail@plt+0x17e0>
   12e04:	cmp	r0, #1
   12e08:	beq	12eb4 <__assert_fail@plt+0x17a0>
   12e0c:	mov	r2, #5
   12e10:	movw	r1, #20268	; 0x4f2c
   12e14:	mov	r0, #0
   12e18:	movt	r1, #1
   12e1c:	bl	11468 <dcgettext@plt>
   12e20:	ldr	ip, [sl]
   12e24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e28:	mov	r7, #1
   12e2c:	str	r9, [sp, #4]
   12e30:	str	ip, [sp]
   12e34:	mov	r2, r0
   12e38:	mov	r0, #0
   12e3c:	mov	r1, r0
   12e40:	bl	11510 <error@plt>
   12e44:	mov	r0, r4
   12e48:	bl	11654 <elf_next@plt>
   12e4c:	mov	sl, r0
   12e50:	mov	r0, r4
   12e54:	bl	11570 <elf_end@plt>
   12e58:	cmp	r0, #0
   12e5c:	bne	12f18 <__assert_fail@plt+0x1804>
   12e60:	mov	r1, sl
   12e64:	mov	r0, r5
   12e68:	mov	r2, r6
   12e6c:	bl	11618 <elf_begin@plt>
   12e70:	subs	r4, r0, #0
   12e74:	beq	12ed4 <__assert_fail@plt+0x17c0>
   12e78:	bl	11684 <elf_getarhdr@plt>
   12e7c:	ldr	r8, [r0]
   12e80:	mov	sl, r0
   12e84:	ldrb	r2, [r8]
   12e88:	cmp	r2, #47	; 0x2f
   12e8c:	bne	12df4 <__assert_fail@plt+0x16e0>
   12e90:	ldrb	r2, [r8, #1]
   12e94:	cmp	r2, #0
   12e98:	beq	12e44 <__assert_fail@plt+0x1730>
   12e9c:	cmp	r2, #47	; 0x2f
   12ea0:	bne	12df4 <__assert_fail@plt+0x16e0>
   12ea4:	ldrb	r2, [r8, #2]
   12ea8:	cmp	r2, #0
   12eac:	beq	12e44 <__assert_fail@plt+0x1730>
   12eb0:	b	12df4 <__assert_fail@plt+0x16e0>
   12eb4:	str	r9, [sp]
   12eb8:	mov	r3, r8
   12ebc:	mov	r0, r5
   12ec0:	mov	r1, r4
   12ec4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ec8:	bl	12d08 <__assert_fail@plt+0x15f4>
   12ecc:	orr	r7, r7, r0
   12ed0:	b	12e44 <__assert_fail@plt+0x1730>
   12ed4:	ldr	ip, [fp, #-52]	; 0xffffffcc
   12ed8:	mov	r0, r7
   12edc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12ee0:	ldr	r3, [ip]
   12ee4:	cmp	r2, r3
   12ee8:	bne	12f64 <__assert_fail@plt+0x1850>
   12eec:	sub	sp, fp, #32
   12ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ef4:	mov	r2, r8
   12ef8:	mov	r0, r4
   12efc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12f00:	mov	r3, r9
   12f04:	bl	123a8 <__assert_fail@plt+0xc94>
   12f08:	orr	r7, r7, r0
   12f0c:	b	12e44 <__assert_fail@plt+0x1730>
   12f10:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12f14:	b	12da8 <__assert_fail@plt+0x1694>
   12f18:	mov	r2, #5
   12f1c:	movw	r1, #19852	; 0x4d8c
   12f20:	mov	r0, #0
   12f24:	movt	r1, #1
   12f28:	bl	11468 <dcgettext@plt>
   12f2c:	mov	r4, r0
   12f30:	mvn	r0, #0
   12f34:	bl	115ac <elf_errmsg@plt>
   12f38:	movw	r1, #337	; 0x151
   12f3c:	movw	ip, #19884	; 0x4dac
   12f40:	str	r1, [sp]
   12f44:	movt	ip, #1
   12f48:	mov	r2, r4
   12f4c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12f50:	mov	r1, #0
   12f54:	str	ip, [sp, #4]
   12f58:	str	r0, [sp, #8]
   12f5c:	mov	r0, #1
   12f60:	bl	11510 <error@plt>
   12f64:	bl	1148c <__stack_chk_fail@plt>
   12f68:	push	{r4, r5, r6, r7, r8, r9, lr}
   12f6c:	mov	r8, r1
   12f70:	sub	sp, sp, #20
   12f74:	mov	r1, #0
   12f78:	mov	r6, r0
   12f7c:	bl	1151c <open64@plt>
   12f80:	cmn	r0, #1
   12f84:	mov	r4, r0
   12f88:	beq	130e8 <__assert_fail@plt+0x19d4>
   12f8c:	mov	r1, #8
   12f90:	mov	r2, #0
   12f94:	bl	11618 <elf_begin@plt>
   12f98:	subs	r7, r0, #0
   12f9c:	beq	12fc8 <__assert_fail@plt+0x18b4>
   12fa0:	bl	116f0 <elf_kind@plt>
   12fa4:	cmp	r0, #3
   12fa8:	mov	r5, r0
   12fac:	beq	12ffc <__assert_fail@plt+0x18e8>
   12fb0:	cmp	r0, #1
   12fb4:	beq	13074 <__assert_fail@plt+0x1960>
   12fb8:	mov	r0, r7
   12fbc:	bl	11570 <elf_end@plt>
   12fc0:	cmp	r0, #0
   12fc4:	bne	13124 <__assert_fail@plt+0x1a10>
   12fc8:	mov	r2, #5
   12fcc:	movw	r1, #20340	; 0x4f74
   12fd0:	mov	r0, #0
   12fd4:	movt	r1, #1
   12fd8:	bl	11468 <dcgettext@plt>
   12fdc:	mov	r3, r6
   12fe0:	mov	r2, r0
   12fe4:	mov	r0, #0
   12fe8:	mov	r1, r0
   12fec:	bl	11510 <error@plt>
   12ff0:	mov	r0, #1
   12ff4:	add	sp, sp, #20
   12ff8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12ffc:	cmp	r8, #0
   13000:	mov	r0, r7
   13004:	mov	r2, r6
   13008:	mov	r3, #0
   1300c:	movw	r1, #20104	; 0x4e88
   13010:	movt	r1, #1
   13014:	moveq	r1, #0
   13018:	bl	123a8 <__assert_fail@plt+0xc94>
   1301c:	mov	r5, r0
   13020:	mov	r0, r7
   13024:	bl	11570 <elf_end@plt>
   13028:	subs	r7, r0, #0
   1302c:	bne	131bc <__assert_fail@plt+0x1aa8>
   13030:	mov	r0, r4
   13034:	bl	116cc <close@plt>
   13038:	cmp	r0, #0
   1303c:	moveq	r0, r5
   13040:	beq	12ff4 <__assert_fail@plt+0x18e0>
   13044:	bl	115c4 <__errno_location@plt>
   13048:	mov	r2, #5
   1304c:	movw	r1, #20320	; 0x4f60
   13050:	movt	r1, #1
   13054:	ldr	r4, [r0]
   13058:	mov	r0, r7
   1305c:	bl	11468 <dcgettext@plt>
   13060:	mov	r3, r6
   13064:	mov	r1, r4
   13068:	mov	r2, r0
   1306c:	mov	r0, #1
   13070:	bl	11510 <error@plt>
   13074:	mov	r8, #0
   13078:	mov	r1, r7
   1307c:	mov	r2, r8
   13080:	mov	r3, r6
   13084:	mov	r0, r4
   13088:	str	r8, [sp]
   1308c:	bl	12d08 <__assert_fail@plt+0x15f4>
   13090:	mov	r9, r0
   13094:	mov	r0, r7
   13098:	bl	11570 <elf_end@plt>
   1309c:	subs	r7, r0, #0
   130a0:	bne	13170 <__assert_fail@plt+0x1a5c>
   130a4:	mov	r0, r4
   130a8:	bl	116cc <close@plt>
   130ac:	cmp	r0, #0
   130b0:	moveq	r0, r9
   130b4:	beq	12ff4 <__assert_fail@plt+0x18e0>
   130b8:	bl	115c4 <__errno_location@plt>
   130bc:	mov	r2, #5
   130c0:	movw	r1, #20320	; 0x4f60
   130c4:	movt	r1, #1
   130c8:	ldr	r4, [r0]
   130cc:	mov	r0, r7
   130d0:	bl	11468 <dcgettext@plt>
   130d4:	mov	r3, r6
   130d8:	mov	r1, r4
   130dc:	mov	r2, r0
   130e0:	mov	r0, r5
   130e4:	bl	11510 <error@plt>
   130e8:	bl	115c4 <__errno_location@plt>
   130ec:	mov	r2, #5
   130f0:	movw	r1, #20304	; 0x4f50
   130f4:	movt	r1, #1
   130f8:	ldr	r4, [r0]
   130fc:	mov	r0, #0
   13100:	bl	11468 <dcgettext@plt>
   13104:	mov	r3, r6
   13108:	mov	r1, r4
   1310c:	mov	r2, r0
   13110:	mov	r0, #0
   13114:	bl	11510 <error@plt>
   13118:	mov	r0, #1
   1311c:	add	sp, sp, #20
   13120:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13124:	mov	r2, #5
   13128:	movw	r1, #19852	; 0x4d8c
   1312c:	mov	r0, #0
   13130:	movt	r1, #1
   13134:	bl	11468 <dcgettext@plt>
   13138:	mov	r4, r0
   1313c:	mvn	r0, #0
   13140:	bl	115ac <elf_errmsg@plt>
   13144:	mov	r2, r4
   13148:	mov	r3, r6
   1314c:	movw	ip, #19884	; 0x4dac
   13150:	movw	r1, #277	; 0x115
   13154:	movt	ip, #1
   13158:	str	r1, [sp]
   1315c:	str	r0, [sp, #8]
   13160:	mov	r1, #0
   13164:	str	ip, [sp, #4]
   13168:	mov	r0, #1
   1316c:	bl	11510 <error@plt>
   13170:	mov	r2, #5
   13174:	movw	r1, #19852	; 0x4d8c
   13178:	mov	r0, r8
   1317c:	movt	r1, #1
   13180:	bl	11468 <dcgettext@plt>
   13184:	mov	r4, r0
   13188:	mvn	r0, #0
   1318c:	bl	115ac <elf_errmsg@plt>
   13190:	movw	ip, #19884	; 0x4dac
   13194:	movw	lr, #267	; 0x10b
   13198:	movt	ip, #1
   1319c:	mov	r2, r4
   131a0:	mov	r1, r8
   131a4:	mov	r3, r6
   131a8:	str	lr, [sp]
   131ac:	str	ip, [sp, #4]
   131b0:	str	r0, [sp, #8]
   131b4:	mov	r0, r5
   131b8:	bl	11510 <error@plt>
   131bc:	mov	r2, #5
   131c0:	movw	r1, #19852	; 0x4d8c
   131c4:	mov	r0, #0
   131c8:	movt	r1, #1
   131cc:	bl	11468 <dcgettext@plt>
   131d0:	mov	r4, r0
   131d4:	mvn	r0, #0
   131d8:	bl	115ac <elf_errmsg@plt>
   131dc:	mov	r2, r4
   131e0:	mov	r3, r6
   131e4:	movw	ip, #19884	; 0x4dac
   131e8:	mov	r1, #255	; 0xff
   131ec:	b	13154 <__assert_fail@plt+0x1a40>
   131f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   131f4:	mov	r2, #0
   131f8:	ldr	r3, [pc, #456]	; 133c8 <__assert_fail@plt+0x1cb4>
   131fc:	ldr	fp, [pc, #456]	; 133cc <__assert_fail@plt+0x1cb8>
   13200:	ldr	sl, [pc, #456]	; 133d0 <__assert_fail@plt+0x1cbc>
   13204:	add	r3, pc, r3
   13208:	ldr	r9, [pc, #452]	; 133d4 <__assert_fail@plt+0x1cc0>
   1320c:	add	fp, pc, fp
   13210:	add	sl, pc, sl
   13214:	str	r3, [r0, #20]
   13218:	add	r9, pc, r9
   1321c:	str	fp, [r0, #24]
   13220:	str	sl, [r0, #32]
   13224:	str	r9, [r0, #28]
   13228:	ldr	r8, [pc, #424]	; 133d8 <__assert_fail@plt+0x1cc4>
   1322c:	ldr	r7, [pc, #424]	; 133dc <__assert_fail@plt+0x1cc8>
   13230:	ldr	r6, [pc, #424]	; 133e0 <__assert_fail@plt+0x1ccc>
   13234:	add	r8, pc, r8
   13238:	ldr	r5, [pc, #420]	; 133e4 <__assert_fail@plt+0x1cd0>
   1323c:	add	r7, pc, r7
   13240:	ldr	r4, [pc, #416]	; 133e8 <__assert_fail@plt+0x1cd4>
   13244:	add	r6, pc, r6
   13248:	ldr	ip, [pc, #412]	; 133ec <__assert_fail@plt+0x1cd8>
   1324c:	add	r5, pc, r5
   13250:	ldr	r1, [pc, #408]	; 133f0 <__assert_fail@plt+0x1cdc>
   13254:	add	r4, pc, r4
   13258:	ldr	r3, [pc, #404]	; 133f4 <__assert_fail@plt+0x1ce0>
   1325c:	add	ip, pc, ip
   13260:	ldr	fp, [pc, #400]	; 133f8 <__assert_fail@plt+0x1ce4>
   13264:	add	r1, pc, r1
   13268:	ldr	sl, [pc, #396]	; 133fc <__assert_fail@plt+0x1ce8>
   1326c:	add	r3, pc, r3
   13270:	ldr	r9, [pc, #392]	; 13400 <__assert_fail@plt+0x1cec>
   13274:	add	fp, pc, fp
   13278:	add	sl, pc, sl
   1327c:	str	r8, [r0, #36]	; 0x24
   13280:	add	r9, pc, r9
   13284:	str	r7, [r0, #40]	; 0x28
   13288:	str	r6, [r0, #44]	; 0x2c
   1328c:	str	r5, [r0, #48]	; 0x30
   13290:	str	r4, [r0, #52]	; 0x34
   13294:	str	ip, [r0, #56]	; 0x38
   13298:	str	r1, [r0, #60]	; 0x3c
   1329c:	str	r3, [r0, #64]	; 0x40
   132a0:	str	fp, [r0, #68]	; 0x44
   132a4:	str	sl, [r0, #72]	; 0x48
   132a8:	str	r9, [r0, #76]	; 0x4c
   132ac:	ldr	r8, [pc, #336]	; 13404 <__assert_fail@plt+0x1cf0>
   132b0:	ldr	r7, [pc, #336]	; 13408 <__assert_fail@plt+0x1cf4>
   132b4:	ldr	r6, [pc, #336]	; 1340c <__assert_fail@plt+0x1cf8>
   132b8:	add	r8, pc, r8
   132bc:	ldr	r5, [pc, #332]	; 13410 <__assert_fail@plt+0x1cfc>
   132c0:	add	r7, pc, r7
   132c4:	ldr	r4, [pc, #328]	; 13414 <__assert_fail@plt+0x1d00>
   132c8:	add	r6, pc, r6
   132cc:	ldr	ip, [pc, #324]	; 13418 <__assert_fail@plt+0x1d04>
   132d0:	add	r5, pc, r5
   132d4:	ldr	r1, [pc, #320]	; 1341c <__assert_fail@plt+0x1d08>
   132d8:	add	r4, pc, r4
   132dc:	ldr	r3, [pc, #316]	; 13420 <__assert_fail@plt+0x1d0c>
   132e0:	add	ip, pc, ip
   132e4:	ldr	fp, [pc, #312]	; 13424 <__assert_fail@plt+0x1d10>
   132e8:	add	r1, pc, r1
   132ec:	ldr	sl, [pc, #308]	; 13428 <__assert_fail@plt+0x1d14>
   132f0:	add	r3, pc, r3
   132f4:	ldr	r9, [pc, #304]	; 1342c <__assert_fail@plt+0x1d18>
   132f8:	add	fp, pc, fp
   132fc:	add	sl, pc, sl
   13300:	str	r8, [r0, #80]	; 0x50
   13304:	add	r9, pc, r9
   13308:	str	r7, [r0, #84]	; 0x54
   1330c:	str	r6, [r0, #88]	; 0x58
   13310:	str	r5, [r0, #92]	; 0x5c
   13314:	str	r4, [r0, #96]	; 0x60
   13318:	str	ip, [r0, #112]	; 0x70
   1331c:	str	r1, [r0, #100]	; 0x64
   13320:	str	r3, [r0, #116]	; 0x74
   13324:	str	fp, [r0, #120]	; 0x78
   13328:	str	sl, [r0, #124]	; 0x7c
   1332c:	str	r9, [r0, #128]	; 0x80
   13330:	ldr	r8, [pc, #248]	; 13430 <__assert_fail@plt+0x1d1c>
   13334:	ldr	r7, [pc, #248]	; 13434 <__assert_fail@plt+0x1d20>
   13338:	ldr	r6, [pc, #248]	; 13438 <__assert_fail@plt+0x1d24>
   1333c:	add	r8, pc, r8
   13340:	ldr	r5, [pc, #244]	; 1343c <__assert_fail@plt+0x1d28>
   13344:	add	r7, pc, r7
   13348:	ldr	r4, [pc, #240]	; 13440 <__assert_fail@plt+0x1d2c>
   1334c:	add	r6, pc, r6
   13350:	ldr	ip, [pc, #236]	; 13444 <__assert_fail@plt+0x1d30>
   13354:	add	r5, pc, r5
   13358:	ldr	r1, [pc, #232]	; 13448 <__assert_fail@plt+0x1d34>
   1335c:	add	r4, pc, r4
   13360:	ldr	r3, [pc, #228]	; 1344c <__assert_fail@plt+0x1d38>
   13364:	add	ip, pc, ip
   13368:	ldr	fp, [pc, #224]	; 13450 <__assert_fail@plt+0x1d3c>
   1336c:	add	r1, pc, r1
   13370:	ldr	sl, [pc, #220]	; 13454 <__assert_fail@plt+0x1d40>
   13374:	add	r3, pc, r3
   13378:	ldr	r9, [pc, #216]	; 13458 <__assert_fail@plt+0x1d44>
   1337c:	add	fp, pc, fp
   13380:	add	sl, pc, sl
   13384:	str	r8, [r0, #132]	; 0x84
   13388:	add	r9, pc, r9
   1338c:	str	r7, [r0, #136]	; 0x88
   13390:	str	r6, [r0, #140]	; 0x8c
   13394:	str	r5, [r0, #144]	; 0x90
   13398:	str	r4, [r0, #148]	; 0x94
   1339c:	str	ip, [r0, #152]	; 0x98
   133a0:	str	r1, [r0, #156]	; 0x9c
   133a4:	str	r3, [r0, #104]	; 0x68
   133a8:	mov	r3, #4
   133ac:	str	fp, [r0, #108]	; 0x6c
   133b0:	str	sl, [r0, #164]	; 0xa4
   133b4:	str	r9, [r0, #188]	; 0xbc
   133b8:	str	r2, [r0, #160]	; 0xa0
   133bc:	str	r3, [r0, #192]	; 0xc0
   133c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   133c4:	bx	lr
   133c8:	andeq	r0, r0, r0, asr r2
   133cc:	andeq	r0, r0, r0, asr r2
   133d0:	andeq	r0, r0, r4, asr r2
   133d4:	andeq	r0, r0, r4, asr r2
   133d8:	andeq	r0, r0, r0, asr #4
   133dc:	andeq	r0, r0, r0, asr #4
   133e0:	andeq	r0, r0, r0, asr #4
   133e4:	andeq	r0, r0, r0, asr #4
   133e8:	andeq	r0, r0, r0, asr #4
   133ec:	andeq	r0, r0, r0, asr #4
   133f0:	andeq	r0, r0, r4, asr #4
   133f4:	andeq	r0, r0, ip, asr #4
   133f8:	andeq	r0, r0, ip, asr #4
   133fc:	andeq	r0, r0, r0, asr r2
   13400:	andeq	r0, r0, r0, asr r2
   13404:	andeq	r0, r0, r0, lsr #4
   13408:	andeq	r0, r0, r4, lsr #4
   1340c:	andeq	r0, r0, r4, lsr #4
   13410:	andeq	r0, r0, r4, lsr r2
   13414:	andeq	r0, r0, r4, lsr #4
   13418:	andeq	r0, r0, r4, lsl r2
   1341c:	andeq	r0, r0, r4, lsr #4
   13420:	andeq	r0, r0, ip, lsr r3
   13424:	andeq	r0, r0, ip, lsl r2
   13428:	andeq	r0, r0, r8, lsl r2
   1342c:	andeq	r0, r0, r0, lsl r2
   13430:	andeq	r0, r0, r0, ror #3
   13434:	andeq	r0, r0, r0, ror #3
   13438:	andeq	r0, r0, r0, ror #3
   1343c:	andeq	r0, r0, r0, ror #3
   13440:	andeq	r0, r0, r0, ror #3
   13444:	andeq	r0, r0, r8, asr #4
   13448:	ldrdeq	r0, [r0], -r8
   1344c:	andeq	r0, r0, ip, lsl #4
   13450:	andeq	r0, r0, r0, lsr #4
   13454:	andeq	r0, r0, r4, lsr #4
   13458:	andeq	r0, r0, r8, asr r1
   1345c:	mov	r0, #0
   13460:	bx	lr
   13464:	mov	r0, #0
   13468:	bx	lr
   1346c:	mov	r0, #0
   13470:	bx	lr
   13474:	mov	r0, #27
   13478:	bx	lr
   1347c:	mov	r0, #0
   13480:	bx	lr
   13484:	mov	r0, #0
   13488:	bx	lr
   1348c:	mov	r0, #0
   13490:	bx	lr
   13494:	mov	r0, #0
   13498:	bx	lr
   1349c:	mov	r0, #0
   134a0:	bx	lr
   134a4:	rsbs	r0, r0, #1
   134a8:	movcc	r0, #0
   134ac:	bx	lr
   134b0:	orrs	r1, r0, r1
   134b4:	movne	r0, #0
   134b8:	moveq	r0, #1
   134bc:	bx	lr
   134c0:	mov	r0, #0
   134c4:	bx	lr
   134c8:	mov	r0, #0
   134cc:	bx	lr
   134d0:	mov	r0, #0
   134d4:	bx	lr
   134d8:	mov	r0, #0
   134dc:	bx	lr
   134e0:	mov	r0, #0
   134e4:	bx	lr
   134e8:	bx	lr
   134ec:	mov	r0, #0
   134f0:	bx	lr
   134f4:	mov	r0, #0
   134f8:	bx	lr
   134fc:	mov	r0, #0
   13500:	bx	lr
   13504:	mov	r0, #0
   13508:	bx	lr
   1350c:	mov	r0, #0
   13510:	bx	lr
   13514:	mov	r0, #0
   13518:	bx	lr
   1351c:	mov	r0, #0
   13520:	bx	lr
   13524:	mov	r0, #0
   13528:	bx	lr
   1352c:	mov	r0, #0
   13530:	bx	lr
   13534:	mov	r0, #0
   13538:	bx	lr
   1353c:	mov	r0, #0
   13540:	bx	lr
   13544:	mvn	r0, #1
   13548:	bx	lr
   1354c:	push	{r4}		; (str r4, [sp, #-4]!)
   13550:	mvn	ip, #0
   13554:	ldr	r4, [sp, #4]
   13558:	mov	r0, ip
   1355c:	str	ip, [r3]
   13560:	str	ip, [r2]
   13564:	str	ip, [r1]
   13568:	str	ip, [r4]
   1356c:	str	ip, [r4, #4]
   13570:	str	ip, [r4, #8]
   13574:	str	ip, [r4, #12]
   13578:	str	ip, [r4, #16]
   1357c:	str	ip, [r4, #20]
   13580:	pop	{r4}		; (ldr r4, [sp], #4)
   13584:	bx	lr
   13588:	ldr	r1, [sp, #8]
   1358c:	mov	r3, #0
   13590:	ldr	r2, [sp, #12]
   13594:	mov	r0, r3
   13598:	str	r3, [r1]
   1359c:	str	r3, [r2]
   135a0:	bx	lr
   135a4:	mov	r0, #0
   135a8:	bx	lr
   135ac:	mvn	r0, #0
   135b0:	bx	lr
   135b4:	subs	r0, r2, #0
   135b8:	push	{r4, r5, r6, r7, r8, r9, sl}
   135bc:	mov	r7, r1
   135c0:	ldr	r2, [sp, #28]
   135c4:	ldr	r6, [sp, #32]
   135c8:	ldr	r5, [sp, #36]	; 0x24
   135cc:	ldr	r4, [sp, #40]	; 0x28
   135d0:	beq	13620 <__assert_fail@plt+0x1f0c>
   135d4:	ldr	sl, [pc, #76]	; 13628 <__assert_fail@plt+0x1f14>
   135d8:	mvn	ip, #0
   135dc:	ldr	r9, [pc, #72]	; 1362c <__assert_fail@plt+0x1f18>
   135e0:	mov	r1, r3
   135e4:	ldr	r8, [pc, #68]	; 13630 <__assert_fail@plt+0x1f1c>
   135e8:	add	sl, pc, sl
   135ec:	str	r7, [sp, #32]
   135f0:	add	r9, pc, r9
   135f4:	str	sl, [r6]
   135f8:	add	r8, pc, r8
   135fc:	str	r9, [r2]
   13600:	mov	r6, #0
   13604:	str	ip, [r5]
   13608:	mov	r3, ip
   1360c:	str	r8, [sp, #28]
   13610:	mov	r2, #1
   13614:	str	r6, [r4]
   13618:	pop	{r4, r5, r6, r7, r8, r9, sl}
   1361c:	b	116fc <__snprintf_chk@plt>
   13620:	pop	{r4, r5, r6, r7, r8, r9, sl}
   13624:	bx	lr
   13628:	andeq	r1, r0, r0, asr #22
   1362c:	muleq	r0, r0, r8
   13630:	andeq	r1, r0, r4, lsr fp
   13634:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13638:	add	r8, r0, #2
   1363c:	ldr	r9, [pc, #112]	; 136b4 <__assert_fail@plt+0x1fa0>
   13640:	mov	r6, r0
   13644:	ldr	r7, [pc, #108]	; 136b8 <__assert_fail@plt+0x1fa4>
   13648:	add	r9, pc, r9
   1364c:	sub	r4, r9, #4
   13650:	add	r7, pc, r7
   13654:	add	r9, r9, #108	; 0x6c
   13658:	ldr	r5, [r4, #4]!
   1365c:	mov	r0, r6
   13660:	mov	r1, r5
   13664:	bl	11414 <strcmp@plt>
   13668:	mov	r1, r7
   1366c:	mov	r2, #7
   13670:	cmp	r0, #0
   13674:	mov	r0, r6
   13678:	beq	136ac <__assert_fail@plt+0x1f98>
   1367c:	bl	116b4 <strncmp@plt>
   13680:	add	r1, r5, #1
   13684:	cmp	r0, #0
   13688:	mov	r0, r8
   1368c:	bne	1369c <__assert_fail@plt+0x1f88>
   13690:	bl	11414 <strcmp@plt>
   13694:	cmp	r0, #0
   13698:	beq	136ac <__assert_fail@plt+0x1f98>
   1369c:	cmp	r4, r9
   136a0:	bne	13658 <__assert_fail@plt+0x1f44>
   136a4:	mov	r0, #0
   136a8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   136ac:	mov	r0, #1
   136b0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   136b4:	andeq	r2, r1, r4, lsr #30
   136b8:	andeq	r1, r0, r4, ror #21
   136bc:	ldr	r3, [pc, #860]	; 13a20 <__assert_fail@plt+0x230c>
   136c0:	ldr	ip, [pc, #860]	; 13a24 <__assert_fail@plt+0x2310>
   136c4:	add	r3, pc, r3
   136c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136cc:	sub	sp, sp, #148	; 0x94
   136d0:	ldr	ip, [r3, ip]
   136d4:	mov	r6, r0
   136d8:	mov	r9, r1
   136dc:	mov	r0, #1
   136e0:	mov	r1, #232	; 0xe8
   136e4:	mov	r7, r2
   136e8:	ldr	r3, [ip]
   136ec:	str	ip, [sp, #8]
   136f0:	str	r3, [sp, #140]	; 0x8c
   136f4:	bl	113d8 <calloc@plt>
   136f8:	subs	r5, r0, #0
   136fc:	beq	138d0 <__assert_fail@plt+0x21bc>
   13700:	ldr	r8, [pc, #800]	; 13a28 <__assert_fail@plt+0x2314>
   13704:	bl	131f0 <__assert_fail@plt+0x1adc>
   13708:	mov	r4, #0
   1370c:	add	r8, pc, r8
   13710:	add	r8, r8, #128	; 0x80
   13714:	b	13740 <__assert_fail@plt+0x202c>
   13718:	ldr	sl, [r8, #-12]
   1371c:	mov	r0, r9
   13720:	mov	r1, sl
   13724:	bl	11414 <strcmp@plt>
   13728:	cmp	r0, #0
   1372c:	beq	13770 <__assert_fail@plt+0x205c>
   13730:	add	r4, r4, #1
   13734:	add	r8, r8, #28
   13738:	cmp	r4, #76	; 0x4c
   1373c:	beq	13944 <__assert_fail@plt+0x2230>
   13740:	cmp	r9, #0
   13744:	bne	13718 <__assert_fail@plt+0x2004>
   13748:	ldr	r3, [r8]
   1374c:	cmp	r3, r7
   13750:	bne	13730 <__assert_fail@plt+0x201c>
   13754:	lsl	r9, r4, #3
   13758:	ldr	r3, [pc, #716]	; 13a2c <__assert_fail@plt+0x2318>
   1375c:	rsb	r2, r4, r9
   13760:	add	r3, pc, r3
   13764:	add	r3, r3, r2, lsl #2
   13768:	ldr	sl, [r3, #116]	; 0x74
   1376c:	b	13774 <__assert_fail@plt+0x2060>
   13770:	lsl	r9, r4, #3
   13774:	cmp	r6, #0
   13778:	str	sl, [r5, #4]
   1377c:	beq	1396c <__assert_fail@plt+0x2258>
   13780:	ldr	r3, [r6, #56]	; 0x38
   13784:	ldrh	r3, [r3, #18]
   13788:	str	r3, [r5, #8]
   1378c:	ldr	r3, [r6, #56]	; 0x38
   13790:	ldrb	r3, [r3, #4]
   13794:	strb	r3, [r5, #12]
   13798:	ldr	r3, [r6, #56]	; 0x38
   1379c:	ldrb	r3, [r3, #5]
   137a0:	strb	r3, [r5, #13]
   137a4:	ldr	sl, [pc, #644]	; 13a30 <__assert_fail@plt+0x231c>
   137a8:	add	r8, sp, #40	; 0x28
   137ac:	ldr	ip, [pc, #640]	; 13a34 <__assert_fail@plt+0x2320>
   137b0:	rsb	fp, r4, r9
   137b4:	add	sl, pc, sl
   137b8:	mov	lr, r8
   137bc:	add	ip, pc, ip
   137c0:	ldm	sl!, {r0, r1, r2, r3}
   137c4:	add	fp, ip, fp, lsl #2
   137c8:	str	fp, [sp, #12]
   137cc:	ldr	fp, [pc, #612]	; 13a38 <__assert_fail@plt+0x2324>
   137d0:	stmia	lr!, {r0, r1, r2, r3}
   137d4:	add	fp, pc, fp
   137d8:	ldm	sl!, {r0, r1, r2, r3}
   137dc:	str	fp, [sp]
   137e0:	ldr	fp, [sp, #12]
   137e4:	ldr	sl, [sl]
   137e8:	ldr	ip, [fp, #112]	; 0x70
   137ec:	stmia	lr!, {r0, r1, r2, r3}
   137f0:	mov	r2, #68	; 0x44
   137f4:	mov	r1, ip
   137f8:	strb	sl, [lr]
   137fc:	add	r0, sp, #72	; 0x48
   13800:	str	ip, [sp, #4]
   13804:	bl	114e0 <__stpcpy_chk@plt>
   13808:	ldr	fp, [sp]
   1380c:	mov	r1, #1
   13810:	mov	r3, r0
   13814:	ldr	r0, [fp]
   13818:	str	r0, [r3]
   1381c:	mov	r0, r8
   13820:	bl	114ec <dlopen@plt>
   13824:	ldr	ip, [sp, #4]
   13828:	subs	sl, r0, #0
   1382c:	beq	13994 <__assert_fail@plt+0x2280>
   13830:	ldr	r3, [pc, #516]	; 13a3c <__assert_fail@plt+0x2328>
   13834:	rsb	r4, r4, r9
   13838:	add	r3, pc, r3
   1383c:	add	r4, r3, r4, lsl #2
   13840:	ldr	r2, [r4, #124]	; 0x7c
   13844:	cmp	r2, #16
   13848:	bgt	139e4 <__assert_fail@plt+0x22d0>
   1384c:	ldr	r8, [r4, #120]	; 0x78
   13850:	add	r4, sp, #16
   13854:	mov	r3, #22
   13858:	mov	r0, r4
   1385c:	mov	r1, r8
   13860:	bl	11708 <__mempcpy_chk@plt>
   13864:	ldr	r2, [pc, #468]	; 13a40 <__assert_fail@plt+0x232c>
   13868:	mov	r1, r4
   1386c:	add	r2, pc, r2
   13870:	mov	r3, r0
   13874:	ldr	r0, [r2]
   13878:	ldrh	r2, [r2, #4]
   1387c:	str	r0, [r3]
   13880:	mov	r0, sl
   13884:	strh	r2, [r3, #4]
   13888:	bl	116e4 <dlsym@plt>
   1388c:	subs	ip, r0, #0
   13890:	beq	138b0 <__assert_fail@plt+0x219c>
   13894:	mov	r1, r7
   13898:	mov	r0, r6
   1389c:	mov	r2, r5
   138a0:	mov	r3, #232	; 0xe8
   138a4:	blx	ip
   138a8:	subs	r1, r0, #0
   138ac:	bne	138f0 <__assert_fail@plt+0x21dc>
   138b0:	mov	r0, sl
   138b4:	bl	11498 <dlclose@plt>
   138b8:	mov	r3, #0
   138bc:	str	r6, [r5, #16]
   138c0:	str	r8, [r5]
   138c4:	mov	r0, r5
   138c8:	str	r3, [r5, #228]	; 0xe4
   138cc:	bl	131f0 <__assert_fail@plt+0x1adc>
   138d0:	ldr	fp, [sp, #8]
   138d4:	mov	r0, r5
   138d8:	ldr	r2, [sp, #140]	; 0x8c
   138dc:	ldr	r3, [fp]
   138e0:	cmp	r2, r3
   138e4:	bne	139e0 <__assert_fail@plt+0x22cc>
   138e8:	add	sp, sp, #148	; 0x94
   138ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f0:	ldr	r4, [pc, #332]	; 13a44 <__assert_fail@plt+0x2330>
   138f4:	add	r4, pc, r4
   138f8:	add	r0, r4, #12
   138fc:	bl	11414 <strcmp@plt>
   13900:	cmp	r0, #0
   13904:	bne	138b0 <__assert_fail@plt+0x219c>
   13908:	ldr	r3, [r5]
   1390c:	str	sl, [r5, #228]	; 0xe4
   13910:	cmp	r3, #0
   13914:	str	r6, [r5, #16]
   13918:	beq	13a04 <__assert_fail@plt+0x22f0>
   1391c:	ldr	r3, [r5, #188]	; 0xbc
   13920:	cmp	r3, #0
   13924:	bne	138d0 <__assert_fail@plt+0x21bc>
   13928:	ldr	r0, [pc, #280]	; 13a48 <__assert_fail@plt+0x2334>
   1392c:	mov	r3, r4
   13930:	ldr	r1, [pc, #276]	; 13a4c <__assert_fail@plt+0x2338>
   13934:	movw	r2, #365	; 0x16d
   13938:	add	r0, pc, r0
   1393c:	add	r1, pc, r1
   13940:	bl	11714 <__assert_fail@plt>
   13944:	ldr	r3, [pc, #260]	; 13a50 <__assert_fail@plt+0x233c>
   13948:	mov	r2, #0
   1394c:	str	r6, [r5, #16]
   13950:	mov	r0, r5
   13954:	add	r3, pc, r3
   13958:	str	r2, [r5, #228]	; 0xe4
   1395c:	str	r3, [r5, #4]
   13960:	str	r3, [r5]
   13964:	bl	131f0 <__assert_fail@plt+0x1adc>
   13968:	b	138d0 <__assert_fail@plt+0x21bc>
   1396c:	ldr	r3, [pc, #224]	; 13a54 <__assert_fail@plt+0x2340>
   13970:	rsb	r2, r4, r9
   13974:	add	r3, pc, r3
   13978:	add	r3, r3, r2, lsl #2
   1397c:	add	r1, r3, #128	; 0x80
   13980:	ldm	r1, {r1, r2, r3}
   13984:	str	r1, [r5, #8]
   13988:	strb	r2, [r5, #12]
   1398c:	strb	r3, [r5, #13]
   13990:	b	137a4 <__assert_fail@plt+0x2090>
   13994:	ldr	r3, [pc, #188]	; 13a58 <__assert_fail@plt+0x2344>
   13998:	mov	r2, #93	; 0x5d
   1399c:	add	r3, pc, r3
   139a0:	ldm	r3, {r0, r1}
   139a4:	stm	r8, {r0, r1}
   139a8:	mov	r1, ip
   139ac:	add	r0, sp, #47	; 0x2f
   139b0:	bl	114e0 <__stpcpy_chk@plt>
   139b4:	mov	r1, #1
   139b8:	mov	r3, r0
   139bc:	ldr	r0, [fp]
   139c0:	str	r0, [r3]
   139c4:	mov	r0, r8
   139c8:	bl	114ec <dlopen@plt>
   139cc:	subs	sl, r0, #0
   139d0:	bne	13830 <__assert_fail@plt+0x211c>
   139d4:	ldr	ip, [sp, #12]
   139d8:	ldr	r8, [ip, #120]	; 0x78
   139dc:	b	138b8 <__assert_fail@plt+0x21a4>
   139e0:	bl	1148c <__stack_chk_fail@plt>
   139e4:	ldr	r0, [pc, #112]	; 13a5c <__assert_fail@plt+0x2348>
   139e8:	mov	r2, #348	; 0x15c
   139ec:	ldr	r1, [pc, #108]	; 13a60 <__assert_fail@plt+0x234c>
   139f0:	ldr	r3, [pc, #108]	; 13a64 <__assert_fail@plt+0x2350>
   139f4:	add	r0, pc, r0
   139f8:	add	r1, pc, r1
   139fc:	add	r3, pc, r3
   13a00:	bl	11714 <__assert_fail@plt>
   13a04:	ldr	r0, [pc, #92]	; 13a68 <__assert_fail@plt+0x2354>
   13a08:	mov	r3, r4
   13a0c:	ldr	r1, [pc, #88]	; 13a6c <__assert_fail@plt+0x2358>
   13a10:	mov	r2, #364	; 0x16c
   13a14:	add	r0, pc, r0
   13a18:	add	r1, pc, r1
   13a1c:	bl	11714 <__assert_fail@plt>
   13a20:	andeq	r3, r1, r4, lsr r9
   13a24:	andeq	r0, r0, r4, lsr #2
   13a28:	andeq	r2, r1, r0, ror #28
   13a2c:	andeq	r2, r1, ip, lsl #28
   13a30:	andeq	r1, r0, r8, lsl #19
   13a34:			; <UNDEFINED> instruction: 0x00012db0
   13a38:	andeq	r1, r0, ip, lsl #19
   13a3c:	andeq	r2, r1, r4, lsr sp
   13a40:	andeq	r1, r0, r4, lsr r9
   13a44:	strdeq	r1, [r0], -r8
   13a48:	andeq	r1, r0, ip, lsl #17
   13a4c:	andeq	r1, r0, r0, asr r8
   13a50:	muleq	r0, r0, r8
   13a54:	strdeq	r2, [r1], -r8
   13a58:	andeq	r1, r0, r8, asr #15
   13a5c:	andeq	r1, r0, r8, ror r7
   13a60:	muleq	r0, r4, r7
   13a64:	strdeq	r1, [r0], -r0
   13a68:	muleq	r0, r4, r7
   13a6c:	andeq	r1, r0, r4, ror r7
   13a70:	ldr	r3, [pc, #96]	; 13ad8 <__assert_fail@plt+0x23c4>
   13a74:	ldr	r2, [pc, #96]	; 13adc <__assert_fail@plt+0x23c8>
   13a78:	add	r3, pc, r3
   13a7c:	push	{r4, r5, lr}
   13a80:	sub	sp, sp, #76	; 0x4c
   13a84:	ldr	r4, [r3, r2]
   13a88:	mov	r5, r0
   13a8c:	mov	r1, sp
   13a90:	ldr	r3, [r4]
   13a94:	str	r3, [sp, #68]	; 0x44
   13a98:	bl	113f0 <gelf_getehdr@plt>
   13a9c:	subs	r3, r0, #0
   13aa0:	beq	13acc <__assert_fail@plt+0x23b8>
   13aa4:	mov	r0, r5
   13aa8:	ldrh	r2, [r3, #18]
   13aac:	mov	r1, #0
   13ab0:	bl	136bc <__assert_fail@plt+0x1fa8>
   13ab4:	ldr	r2, [sp, #68]	; 0x44
   13ab8:	ldr	r3, [r4]
   13abc:	cmp	r2, r3
   13ac0:	bne	13ad4 <__assert_fail@plt+0x23c0>
   13ac4:	add	sp, sp, #76	; 0x4c
   13ac8:	pop	{r4, r5, pc}
   13acc:	mov	r0, r3
   13ad0:	b	13ab4 <__assert_fail@plt+0x23a0>
   13ad4:	bl	1148c <__stack_chk_fail@plt>
   13ad8:	andeq	r3, r1, r0, lsl #11
   13adc:	andeq	r0, r0, r4, lsr #2
   13ae0:	mov	r2, r0
   13ae4:	mov	r0, #0
   13ae8:	mov	r1, r0
   13aec:	b	136bc <__assert_fail@plt+0x1fa8>
   13af0:	mov	r1, r0
   13af4:	mov	r0, #0
   13af8:	mov	r2, r0
   13afc:	b	136bc <__assert_fail@plt+0x1fa8>
   13b00:	push	{r4, lr}
   13b04:	subs	r4, r0, #0
   13b08:	popeq	{r4, pc}
   13b0c:	ldr	r3, [r4, #188]	; 0xbc
   13b10:	blx	r3
   13b14:	ldr	r0, [r4, #228]	; 0xe4
   13b18:	cmp	r0, #0
   13b1c:	beq	13b24 <__assert_fail@plt+0x2410>
   13b20:	bl	11498 <dlclose@plt>
   13b24:	mov	r0, r4
   13b28:	pop	{r4, lr}
   13b2c:	b	11438 <free@plt>
   13b30:	cmp	r0, #0
   13b34:	push	{r3, lr}
   13b38:	beq	13b5c <__assert_fail@plt+0x2448>
   13b3c:	ldr	ip, [r0, #20]
   13b40:	mov	r0, r1
   13b44:	mov	r1, r2
   13b48:	mov	r2, r3
   13b4c:	blx	ip
   13b50:	cmp	r0, #0
   13b54:	beq	13b5c <__assert_fail@plt+0x2448>
   13b58:	pop	{r3, pc}
   13b5c:	ldr	r0, [pc, #4]	; 13b68 <__assert_fail@plt+0x2454>
   13b60:	add	r0, pc, r0
   13b64:	pop	{r3, pc}
   13b68:	andeq	r1, r0, r4, lsr #23
   13b6c:	subs	r3, r0, #0
   13b70:	beq	13b7c <__assert_fail@plt+0x2468>
   13b74:	ldr	r0, [r3, #4]
   13b78:	bx	lr
   13b7c:	ldr	r1, [pc, #8]	; 13b8c <__assert_fail@plt+0x2478>
   13b80:	mov	r2, #5
   13b84:	add	r1, pc, r1
   13b88:	b	11468 <dcgettext@plt>
   13b8c:	muleq	r0, r0, fp
   13b90:	push	{r4, lr}
   13b94:	bl	11540 <malloc@plt>
   13b98:	subs	r4, r0, #0
   13b9c:	popne	{r4, pc}
   13ba0:	ldr	r1, [pc, #24]	; 13bc0 <__assert_fail@plt+0x24ac>
   13ba4:	mov	r2, #5
   13ba8:	add	r1, pc, r1
   13bac:	bl	11468 <dcgettext@plt>
   13bb0:	mov	r1, r4
   13bb4:	mov	r2, r0
   13bb8:	mov	r0, #1
   13bbc:	bl	11510 <error@plt>
   13bc0:	andeq	r1, r0, r8, ror fp
   13bc4:	push	{r4, lr}
   13bc8:	bl	113d8 <calloc@plt>
   13bcc:	subs	r4, r0, #0
   13bd0:	popne	{r4, pc}
   13bd4:	ldr	r1, [pc, #24]	; 13bf4 <__assert_fail@plt+0x24e0>
   13bd8:	mov	r2, #5
   13bdc:	add	r1, pc, r1
   13be0:	bl	11468 <dcgettext@plt>
   13be4:	mov	r1, r4
   13be8:	mov	r2, r0
   13bec:	mov	r0, #1
   13bf0:	bl	11510 <error@plt>
   13bf4:	andeq	r1, r0, r4, asr #22
   13bf8:	push	{r4, lr}
   13bfc:	bl	114a4 <realloc@plt>
   13c00:	subs	r4, r0, #0
   13c04:	popne	{r4, pc}
   13c08:	ldr	r1, [pc, #24]	; 13c28 <__assert_fail@plt+0x2514>
   13c0c:	mov	r2, #5
   13c10:	add	r1, pc, r1
   13c14:	bl	11468 <dcgettext@plt>
   13c18:	mov	r1, r4
   13c1c:	mov	r2, r0
   13c20:	mov	r0, #1
   13c24:	bl	11510 <error@plt>
   13c28:	andeq	r1, r0, r0, lsl fp
   13c2c:	mov	r3, #256	; 0x100
   13c30:	movt	r3, #16
   13c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c38:	cmp	r0, r3
   13c3c:	ldr	r9, [pc, #724]	; 13f18 <__assert_fail@plt+0x2804>
   13c40:	sub	sp, sp, #28
   13c44:	mov	r6, r1
   13c48:	movne	r0, #7
   13c4c:	add	r9, pc, r9
   13c50:	beq	13c5c <__assert_fail@plt+0x2548>
   13c54:	add	sp, sp, #28
   13c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c5c:	ldr	r4, [pc, #696]	; 13f1c <__assert_fail@plt+0x2808>
   13c60:	cmp	r1, #0
   13c64:	mov	r5, #0
   13c68:	add	r4, pc, r4
   13c6c:	beq	13d2c <__assert_fail@plt+0x2618>
   13c70:	mov	r0, r6
   13c74:	mov	r1, r4
   13c78:	bl	11414 <strcmp@plt>
   13c7c:	cmp	r0, #0
   13c80:	beq	13cf4 <__assert_fail@plt+0x25e0>
   13c84:	add	r5, r5, #1
   13c88:	add	r4, r4, #8
   13c8c:	cmp	r5, #9
   13c90:	bne	13c70 <__assert_fail@plt+0x255c>
   13c94:	ldr	r0, [pc, #644]	; 13f20 <__assert_fail@plt+0x280c>
   13c98:	mov	r2, #5
   13c9c:	ldr	r1, [pc, #640]	; 13f24 <__assert_fail@plt+0x2810>
   13ca0:	add	r0, pc, r0
   13ca4:	add	r1, pc, r1
   13ca8:	bl	11468 <dcgettext@plt>
   13cac:	ldr	r3, [pc, #628]	; 13f28 <__assert_fail@plt+0x2814>
   13cb0:	ldr	r4, [r9, r3]
   13cb4:	str	r6, [sp]
   13cb8:	ldr	r3, [r4]
   13cbc:	mov	r2, r0
   13cc0:	mov	r0, #0
   13cc4:	mov	r1, r0
   13cc8:	bl	11510 <error@plt>
   13ccc:	ldr	r1, [pc, #600]	; 13f2c <__assert_fail@plt+0x2818>
   13cd0:	ldr	r0, [pc, #600]	; 13f30 <__assert_fail@plt+0x281c>
   13cd4:	mov	r2, #4
   13cd8:	ldr	r3, [r4]
   13cdc:	ldr	r1, [r9, r1]
   13ce0:	ldr	r0, [r9, r0]
   13ce4:	ldr	r1, [r1]
   13ce8:	bl	115d0 <argp_help@plt>
   13cec:	mov	r0, #1
   13cf0:	bl	11588 <exit@plt>
   13cf4:	ldr	r3, [pc, #568]	; 13f34 <__assert_fail@plt+0x2820>
   13cf8:	ldr	r2, [pc, #568]	; 13f38 <__assert_fail@plt+0x2824>
   13cfc:	add	r3, pc, r3
   13d00:	add	r5, r3, r5, lsl #3
   13d04:	ldr	r4, [r9, r2]
   13d08:	ldrb	r3, [r5, #7]
   13d0c:	cmp	r3, #2
   13d10:	strb	r3, [r4]
   13d14:	beq	13efc <__assert_fail@plt+0x27e8>
   13d18:	cmp	r3, #1
   13d1c:	beq	13d3c <__assert_fail@plt+0x2628>
   13d20:	mov	r0, #0
   13d24:	add	sp, sp, #28
   13d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d2c:	ldr	r3, [pc, #516]	; 13f38 <__assert_fail@plt+0x2824>
   13d30:	mov	r2, #1
   13d34:	ldr	r3, [r9, r3]
   13d38:	strb	r2, [r3]
   13d3c:	ldr	r0, [pc, #504]	; 13f3c <__assert_fail@plt+0x2828>
   13d40:	add	r0, pc, r0
   13d44:	bl	11534 <getenv@plt>
   13d48:	subs	fp, r0, #0
   13d4c:	beq	13d20 <__assert_fail@plt+0x260c>
   13d50:	ldrb	r2, [fp]
   13d54:	ldr	r3, [pc, #484]	; 13f40 <__assert_fail@plt+0x282c>
   13d58:	ldr	sl, [pc, #484]	; 13f44 <__assert_fail@plt+0x2830>
   13d5c:	cmp	r2, #61	; 0x3d
   13d60:	cmpne	r2, #0
   13d64:	add	r3, pc, r3
   13d68:	str	r3, [sp, #16]
   13d6c:	ldr	r3, [pc, #468]	; 13f48 <__assert_fail@plt+0x2834>
   13d70:	add	sl, pc, sl
   13d74:	add	r3, pc, r3
   13d78:	str	r3, [sp, #20]
   13d7c:	beq	13dc0 <__assert_fail@plt+0x26ac>
   13d80:	add	r4, fp, #1
   13d84:	mov	r5, r4
   13d88:	ldrb	r2, [r4], #1
   13d8c:	cmp	r2, #0
   13d90:	cmpne	r2, #61	; 0x3d
   13d94:	moveq	r7, #0
   13d98:	movne	r7, #1
   13d9c:	bne	13d84 <__assert_fail@plt+0x2670>
   13da0:	cmp	r2, #61	; 0x3d
   13da4:	beq	13dc8 <__assert_fail@plt+0x26b4>
   13da8:	cmp	r2, #0
   13dac:	beq	13e98 <__assert_fail@plt+0x2784>
   13db0:	cmp	r2, #61	; 0x3d
   13db4:	cmpne	r2, #0
   13db8:	mov	fp, r5
   13dbc:	bne	13d80 <__assert_fail@plt+0x266c>
   13dc0:	mov	r5, fp
   13dc4:	b	13da8 <__assert_fail@plt+0x2694>
   13dc8:	cmp	r5, fp
   13dcc:	beq	13db0 <__assert_fail@plt+0x269c>
   13dd0:	mov	r0, r4
   13dd4:	mov	r1, #58	; 0x3a
   13dd8:	bl	1142c <strchrnul@plt>
   13ddc:	rsb	r8, fp, r5
   13de0:	cmp	r4, r0
   13de4:	mov	r5, r0
   13de8:	addne	r6, sl, #1
   13dec:	bne	13e04 <__assert_fail@plt+0x26f0>
   13df0:	b	13e84 <__assert_fail@plt+0x2770>
   13df4:	add	r7, r7, #1
   13df8:	add	r6, r6, #8
   13dfc:	cmp	r7, #14
   13e00:	beq	13e84 <__assert_fail@plt+0x2770>
   13e04:	ldrb	r2, [r6, #-1]
   13e08:	cmp	r8, r2
   13e0c:	bne	13df4 <__assert_fail@plt+0x26e0>
   13e10:	mov	r0, fp
   13e14:	mov	r1, r6
   13e18:	mov	r2, r8
   13e1c:	bl	11450 <memcmp@plt>
   13e20:	subs	ip, r0, #0
   13e24:	bne	13df4 <__assert_fail@plt+0x26e0>
   13e28:	ldr	r3, [sp, #16]
   13e2c:	mov	r1, #1
   13e30:	str	r4, [sp]
   13e34:	add	r7, r3, r7, lsl #3
   13e38:	ldr	r2, [sp, #20]
   13e3c:	rsb	r3, r4, r5
   13e40:	str	ip, [sp, #12]
   13e44:	ldr	r0, [r7, #4]
   13e48:	bl	11528 <__asprintf_chk@plt>
   13e4c:	cmp	r0, #0
   13e50:	bge	13e84 <__assert_fail@plt+0x2770>
   13e54:	bl	115c4 <__errno_location@plt>
   13e58:	ldr	ip, [sp, #12]
   13e5c:	ldr	r1, [pc, #232]	; 13f4c <__assert_fail@plt+0x2838>
   13e60:	mov	r2, #5
   13e64:	add	r1, pc, r1
   13e68:	ldr	r4, [r0]
   13e6c:	mov	r0, ip
   13e70:	bl	11468 <dcgettext@plt>
   13e74:	mov	r1, r4
   13e78:	mov	r2, r0
   13e7c:	mov	r0, #1
   13e80:	bl	11510 <error@plt>
   13e84:	ldrb	r2, [r5]
   13e88:	cmp	r2, #58	; 0x3a
   13e8c:	ldrbeq	r2, [r5, #1]
   13e90:	addeq	r5, r5, #1
   13e94:	b	13da8 <__assert_fail@plt+0x2694>
   13e98:	ldr	r3, [pc, #176]	; 13f50 <__assert_fail@plt+0x283c>
   13e9c:	ldr	r3, [r9, r3]
   13ea0:	ldr	r3, [r3]
   13ea4:	cmp	r3, #0
   13ea8:	beq	13d20 <__assert_fail@plt+0x260c>
   13eac:	ldr	r2, [pc, #160]	; 13f54 <__assert_fail@plt+0x2840>
   13eb0:	ldr	r2, [r9, r2]
   13eb4:	ldr	r1, [r2]
   13eb8:	ldrb	r1, [r1]
   13ebc:	cmp	r1, #0
   13ec0:	streq	r3, [r2]
   13ec4:	ldr	r2, [pc, #140]	; 13f58 <__assert_fail@plt+0x2844>
   13ec8:	ldr	r2, [r9, r2]
   13ecc:	ldr	r1, [r2]
   13ed0:	ldrb	r1, [r1]
   13ed4:	cmp	r1, #0
   13ed8:	streq	r3, [r2]
   13edc:	ldr	r2, [pc, #120]	; 13f5c <__assert_fail@plt+0x2848>
   13ee0:	ldr	r2, [r9, r2]
   13ee4:	ldr	r1, [r2]
   13ee8:	ldrb	r0, [r1]
   13eec:	cmp	r0, #0
   13ef0:	streq	r3, [r2]
   13ef4:	beq	13c54 <__assert_fail@plt+0x2540>
   13ef8:	b	13d20 <__assert_fail@plt+0x260c>
   13efc:	mov	r0, #1
   13f00:	bl	1169c <isatty@plt>
   13f04:	adds	r0, r0, #0
   13f08:	movne	r0, #1
   13f0c:	strb	r0, [r4]
   13f10:	mov	r3, r0
   13f14:	b	13d18 <__assert_fail@plt+0x2604>
   13f18:	andeq	r3, r1, ip, lsr #7
   13f1c:	andeq	r1, r0, ip, asr #21
   13f20:	andeq	r1, r0, r0, lsl r2
   13f24:	strdeq	r1, [r0], -r8
   13f28:	andeq	r0, r0, r8, asr #2
   13f2c:	andeq	r0, r0, r4, lsr r1
   13f30:	andeq	r0, r0, r4, asr #2
   13f34:	andeq	r1, r0, r8, lsr sl
   13f38:	andeq	r0, r0, r8, lsr #2
   13f3c:	andeq	r1, r0, r4, asr #20
   13f40:	andeq	r3, r1, r4, lsl r1
   13f44:	andeq	r3, r1, r8, lsl #2
   13f48:	andeq	r1, r0, r0, lsr #20
   13f4c:	andeq	r1, r0, r8, asr r0
   13f50:	andeq	r0, r0, ip, lsr r1
   13f54:	andeq	r0, r0, r0, lsr r1
   13f58:	andeq	r0, r0, r0, asr #2
   13f5c:	andeq	r0, r0, ip, lsr #2
   13f60:	push	{r4, lr}
   13f64:	sub	sp, sp, #8
   13f68:	ldr	lr, [pc, #104]	; 13fd8 <__assert_fail@plt+0x28c4>
   13f6c:	mov	r4, r0
   13f70:	ldr	ip, [pc, #100]	; 13fdc <__assert_fail@plt+0x28c8>
   13f74:	ldr	r2, [pc, #100]	; 13fe0 <__assert_fail@plt+0x28cc>
   13f78:	add	lr, pc, lr
   13f7c:	ldr	r3, [r1, #40]	; 0x28
   13f80:	add	ip, pc, ip
   13f84:	str	lr, [sp]
   13f88:	mov	r1, #1
   13f8c:	str	ip, [sp, #4]
   13f90:	add	r2, pc, r2
   13f94:	bl	1160c <__fprintf_chk@plt>
   13f98:	ldr	r1, [pc, #68]	; 13fe4 <__assert_fail@plt+0x28d0>
   13f9c:	mov	r2, #5
   13fa0:	mov	r0, #0
   13fa4:	add	r1, pc, r1
   13fa8:	bl	11468 <dcgettext@plt>
   13fac:	ldr	ip, [pc, #52]	; 13fe8 <__assert_fail@plt+0x28d4>
   13fb0:	ldr	r3, [pc, #52]	; 13fec <__assert_fail@plt+0x28d8>
   13fb4:	mov	r1, #1
   13fb8:	add	ip, pc, ip
   13fbc:	str	ip, [sp]
   13fc0:	add	r3, pc, r3
   13fc4:	mov	r2, r0
   13fc8:	mov	r0, r4
   13fcc:	bl	1160c <__fprintf_chk@plt>
   13fd0:	add	sp, sp, #8
   13fd4:	pop	{r4, pc}
   13fd8:	andeq	r0, r0, r8, lsr pc
   13fdc:	andeq	r0, r0, r4, lsr #28
   13fe0:	strdeq	r1, [r0], -ip
   13fe4:	strdeq	r1, [r0], -r4
   13fe8:			; <UNDEFINED> instruction: 0x000019b0
   13fec:	andeq	r1, r0, r0, lsr #19
   13ff0:	cmp	r3, #0
   13ff4:	cmpeq	r2, #0
   13ff8:	bne	14010 <__assert_fail@plt+0x28fc>
   13ffc:	cmp	r1, #0
   14000:	cmpeq	r0, #0
   14004:	mvnne	r1, #0
   14008:	mvnne	r0, #0
   1400c:	b	1402c <__assert_fail@plt+0x2918>
   14010:	sub	sp, sp, #8
   14014:	push	{sp, lr}
   14018:	bl	14078 <__assert_fail@plt+0x2964>
   1401c:	ldr	lr, [sp, #4]
   14020:	add	sp, sp, #8
   14024:	pop	{r2, r3}
   14028:	bx	lr
   1402c:	push	{r1, lr}
   14030:	mov	r0, #8
   14034:	bl	113fc <raise@plt>
   14038:	pop	{r1, pc}
   1403c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14040:	mov	r8, r2
   14044:	mov	r6, r0
   14048:	mov	r7, r1
   1404c:	mov	sl, r3
   14050:	ldr	r9, [sp, #32]
   14054:	bl	140b4 <__assert_fail@plt+0x29a0>
   14058:	umull	r4, r5, r8, r0
   1405c:	mul	r8, r8, r1
   14060:	mla	r2, r0, sl, r8
   14064:	add	r5, r2, r5
   14068:	subs	r4, r6, r4
   1406c:	sbc	r5, r7, r5
   14070:	strd	r4, [r9]
   14074:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14078:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1407c:	mov	r8, r2
   14080:	mov	r6, r0
   14084:	mov	r7, r1
   14088:	mov	r5, r3
   1408c:	ldr	r9, [sp, #32]
   14090:	bl	14540 <__assert_fail@plt+0x2e2c>
   14094:	mul	r3, r0, r5
   14098:	umull	r4, r5, r0, r8
   1409c:	mla	r8, r8, r1, r3
   140a0:	add	r5, r8, r5
   140a4:	subs	r4, r6, r4
   140a8:	sbc	r5, r7, r5
   140ac:	strd	r4, [r9]
   140b0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   140b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140b8:	rsbs	r4, r0, #0
   140bc:	rsc	r5, r1, #0
   140c0:	cmp	r1, #0
   140c4:	mvn	r6, #0
   140c8:	sub	sp, sp, #12
   140cc:	movge	r4, r0
   140d0:	movge	r5, r1
   140d4:	movge	r6, #0
   140d8:	cmp	r3, #0
   140dc:	blt	14314 <__assert_fail@plt+0x2c00>
   140e0:	cmp	r3, #0
   140e4:	mov	sl, r4
   140e8:	mov	ip, r5
   140ec:	mov	r0, r2
   140f0:	mov	r1, r3
   140f4:	mov	r8, r2
   140f8:	mov	r7, r4
   140fc:	mov	r9, r5
   14100:	bne	141f8 <__assert_fail@plt+0x2ae4>
   14104:	cmp	r2, r5
   14108:	bls	14234 <__assert_fail@plt+0x2b20>
   1410c:	clz	r3, r2
   14110:	cmp	r3, #0
   14114:	rsbne	r2, r3, #32
   14118:	lslne	r8, r0, r3
   1411c:	lsrne	r2, r4, r2
   14120:	lslne	r7, r4, r3
   14124:	orrne	r9, r2, r5, lsl r3
   14128:	lsr	r4, r8, #16
   1412c:	uxth	sl, r8
   14130:	mov	r1, r4
   14134:	mov	r0, r9
   14138:	bl	14970 <__assert_fail@plt+0x325c>
   1413c:	mov	r1, r4
   14140:	mov	fp, r0
   14144:	mov	r0, r9
   14148:	bl	14b5c <__assert_fail@plt+0x3448>
   1414c:	mul	r0, sl, fp
   14150:	lsr	r2, r7, #16
   14154:	orr	r1, r2, r1, lsl #16
   14158:	cmp	r0, r1
   1415c:	bls	14180 <__assert_fail@plt+0x2a6c>
   14160:	adds	r1, r1, r8
   14164:	sub	r3, fp, #1
   14168:	bcs	1417c <__assert_fail@plt+0x2a68>
   1416c:	cmp	r0, r1
   14170:	subhi	fp, fp, #2
   14174:	addhi	r1, r1, r8
   14178:	bhi	14180 <__assert_fail@plt+0x2a6c>
   1417c:	mov	fp, r3
   14180:	rsb	r9, r0, r1
   14184:	mov	r1, r4
   14188:	uxth	r7, r7
   1418c:	mov	r0, r9
   14190:	bl	14970 <__assert_fail@plt+0x325c>
   14194:	mov	r1, r4
   14198:	mov	r5, r0
   1419c:	mov	r0, r9
   141a0:	bl	14b5c <__assert_fail@plt+0x3448>
   141a4:	mul	sl, sl, r5
   141a8:	orr	r1, r7, r1, lsl #16
   141ac:	cmp	sl, r1
   141b0:	bls	141d0 <__assert_fail@plt+0x2abc>
   141b4:	adds	r8, r1, r8
   141b8:	sub	r3, r5, #1
   141bc:	bcs	141cc <__assert_fail@plt+0x2ab8>
   141c0:	cmp	sl, r8
   141c4:	subhi	r5, r5, #2
   141c8:	bhi	141d0 <__assert_fail@plt+0x2abc>
   141cc:	mov	r5, r3
   141d0:	orr	r3, r5, fp, lsl #16
   141d4:	mov	r4, #0
   141d8:	cmp	r6, #0
   141dc:	mov	r0, r3
   141e0:	mov	r1, r4
   141e4:	beq	141f0 <__assert_fail@plt+0x2adc>
   141e8:	rsbs	r0, r0, #0
   141ec:	rsc	r1, r1, #0
   141f0:	add	sp, sp, #12
   141f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141f8:	cmp	r3, r5
   141fc:	movhi	r4, #0
   14200:	movhi	r3, r4
   14204:	bhi	141d8 <__assert_fail@plt+0x2ac4>
   14208:	clz	r5, r1
   1420c:	cmp	r5, #0
   14210:	bne	14400 <__assert_fail@plt+0x2cec>
   14214:	cmp	r1, ip
   14218:	cmpcs	r2, sl
   1421c:	movhi	r4, #0
   14220:	movls	r4, #1
   14224:	movls	r3, #1
   14228:	movls	r4, r5
   1422c:	movhi	r3, r4
   14230:	b	141d8 <__assert_fail@plt+0x2ac4>
   14234:	cmp	r2, #0
   14238:	bne	1424c <__assert_fail@plt+0x2b38>
   1423c:	mov	r1, r2
   14240:	mov	r0, #1
   14244:	bl	14970 <__assert_fail@plt+0x325c>
   14248:	mov	r8, r0
   1424c:	clz	r3, r8
   14250:	cmp	r3, #0
   14254:	bne	14324 <__assert_fail@plt+0x2c10>
   14258:	rsb	r9, r8, r9
   1425c:	lsr	r5, r8, #16
   14260:	uxth	sl, r8
   14264:	mov	r4, #1
   14268:	mov	r1, r5
   1426c:	mov	r0, r9
   14270:	bl	14970 <__assert_fail@plt+0x325c>
   14274:	mov	r1, r5
   14278:	mov	fp, r0
   1427c:	mov	r0, r9
   14280:	bl	14b5c <__assert_fail@plt+0x3448>
   14284:	mul	r0, sl, fp
   14288:	lsr	r2, r7, #16
   1428c:	orr	r1, r2, r1, lsl #16
   14290:	cmp	r0, r1
   14294:	bls	142b4 <__assert_fail@plt+0x2ba0>
   14298:	adds	r1, r1, r8
   1429c:	sub	r3, fp, #1
   142a0:	bcs	14520 <__assert_fail@plt+0x2e0c>
   142a4:	cmp	r0, r1
   142a8:	subhi	fp, fp, #2
   142ac:	addhi	r1, r1, r8
   142b0:	bls	14520 <__assert_fail@plt+0x2e0c>
   142b4:	rsb	r2, r0, r1
   142b8:	mov	r1, r5
   142bc:	str	r2, [sp]
   142c0:	uxth	r7, r7
   142c4:	mov	r0, r2
   142c8:	bl	14970 <__assert_fail@plt+0x325c>
   142cc:	ldr	r2, [sp]
   142d0:	mov	r1, r5
   142d4:	mov	r9, r0
   142d8:	mov	r0, r2
   142dc:	bl	14b5c <__assert_fail@plt+0x3448>
   142e0:	mul	sl, sl, r9
   142e4:	orr	r1, r7, r1, lsl #16
   142e8:	cmp	sl, r1
   142ec:	bls	1430c <__assert_fail@plt+0x2bf8>
   142f0:	adds	r8, r1, r8
   142f4:	sub	r3, r9, #1
   142f8:	bcs	14308 <__assert_fail@plt+0x2bf4>
   142fc:	cmp	sl, r8
   14300:	subhi	r9, r9, #2
   14304:	bhi	1430c <__assert_fail@plt+0x2bf8>
   14308:	mov	r9, r3
   1430c:	orr	r3, r9, fp, lsl #16
   14310:	b	141d8 <__assert_fail@plt+0x2ac4>
   14314:	mvn	r6, r6
   14318:	rsbs	r2, r2, #0
   1431c:	rsc	r3, r3, #0
   14320:	b	140e0 <__assert_fail@plt+0x29cc>
   14324:	lsl	r8, r8, r3
   14328:	rsb	fp, r3, #32
   1432c:	lsr	r4, r9, fp
   14330:	lsr	fp, r7, fp
   14334:	lsr	r5, r8, #16
   14338:	orr	fp, fp, r9, lsl r3
   1433c:	mov	r0, r4
   14340:	lsl	r7, r7, r3
   14344:	mov	r1, r5
   14348:	uxth	sl, r8
   1434c:	bl	14970 <__assert_fail@plt+0x325c>
   14350:	mov	r1, r5
   14354:	mov	r3, r0
   14358:	mov	r0, r4
   1435c:	str	r3, [sp]
   14360:	bl	14b5c <__assert_fail@plt+0x3448>
   14364:	ldr	r3, [sp]
   14368:	lsr	r2, fp, #16
   1436c:	mul	r0, sl, r3
   14370:	orr	r1, r2, r1, lsl #16
   14374:	cmp	r0, r1
   14378:	bls	14398 <__assert_fail@plt+0x2c84>
   1437c:	adds	r1, r1, r8
   14380:	sub	r2, r3, #1
   14384:	bcs	14538 <__assert_fail@plt+0x2e24>
   14388:	cmp	r0, r1
   1438c:	subhi	r3, r3, #2
   14390:	addhi	r1, r1, r8
   14394:	bls	14538 <__assert_fail@plt+0x2e24>
   14398:	rsb	r9, r0, r1
   1439c:	mov	r1, r5
   143a0:	str	r3, [sp]
   143a4:	uxth	fp, fp
   143a8:	mov	r0, r9
   143ac:	bl	14970 <__assert_fail@plt+0x325c>
   143b0:	mov	r1, r5
   143b4:	mov	r4, r0
   143b8:	mov	r0, r9
   143bc:	bl	14b5c <__assert_fail@plt+0x3448>
   143c0:	mul	r9, sl, r4
   143c4:	ldr	r3, [sp]
   143c8:	orr	r1, fp, r1, lsl #16
   143cc:	cmp	r9, r1
   143d0:	bls	143f4 <__assert_fail@plt+0x2ce0>
   143d4:	adds	r1, r1, r8
   143d8:	sub	r2, r4, #1
   143dc:	bcs	143f0 <__assert_fail@plt+0x2cdc>
   143e0:	cmp	r9, r1
   143e4:	subhi	r4, r4, #2
   143e8:	addhi	r1, r1, r8
   143ec:	bhi	143f4 <__assert_fail@plt+0x2ce0>
   143f0:	mov	r4, r2
   143f4:	rsb	r9, r9, r1
   143f8:	orr	r4, r4, r3, lsl #16
   143fc:	b	14268 <__assert_fail@plt+0x2b54>
   14400:	rsb	sl, r5, #32
   14404:	lsl	r3, r2, r5
   14408:	lsr	r0, r2, sl
   1440c:	lsr	r2, ip, sl
   14410:	orr	r4, r0, r1, lsl r5
   14414:	lsr	sl, r7, sl
   14418:	mov	r0, r2
   1441c:	orr	sl, sl, ip, lsl r5
   14420:	lsr	r9, r4, #16
   14424:	str	r3, [sp, #4]
   14428:	str	r2, [sp]
   1442c:	uxth	fp, r4
   14430:	mov	r1, r9
   14434:	bl	14970 <__assert_fail@plt+0x325c>
   14438:	ldr	r2, [sp]
   1443c:	mov	r1, r9
   14440:	mov	r8, r0
   14444:	mov	r0, r2
   14448:	bl	14b5c <__assert_fail@plt+0x3448>
   1444c:	mul	r0, fp, r8
   14450:	lsr	r2, sl, #16
   14454:	orr	r1, r2, r1, lsl #16
   14458:	cmp	r0, r1
   1445c:	bls	1447c <__assert_fail@plt+0x2d68>
   14460:	adds	r1, r1, r4
   14464:	sub	r2, r8, #1
   14468:	bcs	14530 <__assert_fail@plt+0x2e1c>
   1446c:	cmp	r0, r1
   14470:	subhi	r8, r8, #2
   14474:	addhi	r1, r1, r4
   14478:	bls	14530 <__assert_fail@plt+0x2e1c>
   1447c:	rsb	ip, r0, r1
   14480:	mov	r1, r9
   14484:	str	ip, [sp]
   14488:	mov	r0, ip
   1448c:	bl	14970 <__assert_fail@plt+0x325c>
   14490:	ldr	ip, [sp]
   14494:	mov	r1, r9
   14498:	mov	r2, r0
   1449c:	mov	r0, ip
   144a0:	str	r2, [sp]
   144a4:	bl	14b5c <__assert_fail@plt+0x3448>
   144a8:	ldr	r2, [sp]
   144ac:	uxth	ip, sl
   144b0:	mul	fp, fp, r2
   144b4:	orr	ip, ip, r1, lsl #16
   144b8:	cmp	fp, ip
   144bc:	bls	144dc <__assert_fail@plt+0x2dc8>
   144c0:	adds	ip, ip, r4
   144c4:	sub	r1, r2, #1
   144c8:	bcs	14528 <__assert_fail@plt+0x2e14>
   144cc:	cmp	fp, ip
   144d0:	subhi	r2, r2, #2
   144d4:	addhi	ip, ip, r4
   144d8:	bls	14528 <__assert_fail@plt+0x2e14>
   144dc:	ldr	r0, [sp, #4]
   144e0:	orr	r1, r2, r8, lsl #16
   144e4:	rsb	fp, fp, ip
   144e8:	umull	r2, r3, r1, r0
   144ec:	cmp	fp, r3
   144f0:	bcc	14514 <__assert_fail@plt+0x2e00>
   144f4:	movne	r4, #0
   144f8:	moveq	r4, #1
   144fc:	cmp	r2, r7, lsl r5
   14500:	movls	r4, #0
   14504:	andhi	r4, r4, #1
   14508:	cmp	r4, #0
   1450c:	moveq	r3, r1
   14510:	beq	141d8 <__assert_fail@plt+0x2ac4>
   14514:	sub	r3, r1, #1
   14518:	mov	r4, #0
   1451c:	b	141d8 <__assert_fail@plt+0x2ac4>
   14520:	mov	fp, r3
   14524:	b	142b4 <__assert_fail@plt+0x2ba0>
   14528:	mov	r2, r1
   1452c:	b	144dc <__assert_fail@plt+0x2dc8>
   14530:	mov	r8, r2
   14534:	b	1447c <__assert_fail@plt+0x2d68>
   14538:	mov	r3, r2
   1453c:	b	14398 <__assert_fail@plt+0x2c84>
   14540:	cmp	r3, #0
   14544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14548:	mov	r6, r0
   1454c:	sub	sp, sp, #12
   14550:	mov	r5, r1
   14554:	mov	r7, r0
   14558:	mov	r4, r2
   1455c:	mov	r8, r1
   14560:	bne	14640 <__assert_fail@plt+0x2f2c>
   14564:	cmp	r2, r1
   14568:	bls	1467c <__assert_fail@plt+0x2f68>
   1456c:	clz	r3, r2
   14570:	cmp	r3, #0
   14574:	rsbne	r8, r3, #32
   14578:	lslne	r4, r2, r3
   1457c:	lsrne	r8, r0, r8
   14580:	lslne	r7, r0, r3
   14584:	orrne	r8, r8, r1, lsl r3
   14588:	lsr	r5, r4, #16
   1458c:	uxth	sl, r4
   14590:	mov	r1, r5
   14594:	mov	r0, r8
   14598:	bl	14970 <__assert_fail@plt+0x325c>
   1459c:	mov	r1, r5
   145a0:	mov	r9, r0
   145a4:	mov	r0, r8
   145a8:	bl	14b5c <__assert_fail@plt+0x3448>
   145ac:	mul	r0, sl, r9
   145b0:	lsr	r3, r7, #16
   145b4:	orr	r1, r3, r1, lsl #16
   145b8:	cmp	r0, r1
   145bc:	bls	145e0 <__assert_fail@plt+0x2ecc>
   145c0:	adds	r1, r1, r4
   145c4:	sub	r2, r9, #1
   145c8:	bcs	145dc <__assert_fail@plt+0x2ec8>
   145cc:	cmp	r0, r1
   145d0:	subhi	r9, r9, #2
   145d4:	addhi	r1, r1, r4
   145d8:	bhi	145e0 <__assert_fail@plt+0x2ecc>
   145dc:	mov	r9, r2
   145e0:	rsb	r8, r0, r1
   145e4:	mov	r1, r5
   145e8:	uxth	r7, r7
   145ec:	mov	r0, r8
   145f0:	bl	14970 <__assert_fail@plt+0x325c>
   145f4:	mov	r1, r5
   145f8:	mov	r6, r0
   145fc:	mov	r0, r8
   14600:	bl	14b5c <__assert_fail@plt+0x3448>
   14604:	mul	sl, sl, r6
   14608:	orr	r1, r7, r1, lsl #16
   1460c:	cmp	sl, r1
   14610:	bls	1462c <__assert_fail@plt+0x2f18>
   14614:	adds	r4, r1, r4
   14618:	sub	r3, r6, #1
   1461c:	bcs	14928 <__assert_fail@plt+0x3214>
   14620:	cmp	sl, r4
   14624:	subhi	r6, r6, #2
   14628:	bls	14928 <__assert_fail@plt+0x3214>
   1462c:	orr	r0, r6, r9, lsl #16
   14630:	mov	r6, #0
   14634:	mov	r1, r6
   14638:	add	sp, sp, #12
   1463c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14640:	cmp	r3, r1
   14644:	movhi	r6, #0
   14648:	movhi	r0, r6
   1464c:	bhi	14634 <__assert_fail@plt+0x2f20>
   14650:	clz	r7, r3
   14654:	cmp	r7, #0
   14658:	bne	14758 <__assert_fail@plt+0x3044>
   1465c:	cmp	r3, r1
   14660:	cmpcs	r2, r6
   14664:	movhi	r6, #0
   14668:	movls	r6, #1
   1466c:	movls	r0, #1
   14670:	movls	r6, r7
   14674:	movhi	r0, r6
   14678:	b	14634 <__assert_fail@plt+0x2f20>
   1467c:	cmp	r2, #0
   14680:	bne	14694 <__assert_fail@plt+0x2f80>
   14684:	mov	r1, r2
   14688:	mov	r0, #1
   1468c:	bl	14970 <__assert_fail@plt+0x325c>
   14690:	mov	r4, r0
   14694:	clz	r3, r4
   14698:	cmp	r3, #0
   1469c:	bne	14854 <__assert_fail@plt+0x3140>
   146a0:	rsb	r5, r4, r5
   146a4:	lsr	r8, r4, #16
   146a8:	uxth	sl, r4
   146ac:	mov	r6, #1
   146b0:	mov	r1, r8
   146b4:	mov	r0, r5
   146b8:	bl	14970 <__assert_fail@plt+0x325c>
   146bc:	mov	r1, r8
   146c0:	mov	r9, r0
   146c4:	mov	r0, r5
   146c8:	bl	14b5c <__assert_fail@plt+0x3448>
   146cc:	mul	r0, sl, r9
   146d0:	lsr	r3, r7, #16
   146d4:	orr	r1, r3, r1, lsl #16
   146d8:	cmp	r0, r1
   146dc:	bls	146fc <__assert_fail@plt+0x2fe8>
   146e0:	adds	r1, r1, r4
   146e4:	sub	r2, r9, #1
   146e8:	bcs	14930 <__assert_fail@plt+0x321c>
   146ec:	cmp	r0, r1
   146f0:	subhi	r9, r9, #2
   146f4:	addhi	r1, r1, r4
   146f8:	bls	14930 <__assert_fail@plt+0x321c>
   146fc:	rsb	fp, r0, r1
   14700:	mov	r1, r8
   14704:	uxth	r7, r7
   14708:	mov	r0, fp
   1470c:	bl	14970 <__assert_fail@plt+0x325c>
   14710:	mov	r1, r8
   14714:	mov	r5, r0
   14718:	mov	r0, fp
   1471c:	bl	14b5c <__assert_fail@plt+0x3448>
   14720:	mul	sl, sl, r5
   14724:	orr	r1, r7, r1, lsl #16
   14728:	cmp	sl, r1
   1472c:	bls	14748 <__assert_fail@plt+0x3034>
   14730:	adds	r4, r1, r4
   14734:	sub	r3, r5, #1
   14738:	bcs	14938 <__assert_fail@plt+0x3224>
   1473c:	cmp	sl, r4
   14740:	subhi	r5, r5, #2
   14744:	bls	14938 <__assert_fail@plt+0x3224>
   14748:	orr	r0, r5, r9, lsl #16
   1474c:	mov	r1, r6
   14750:	add	sp, sp, #12
   14754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14758:	rsb	r1, r7, #32
   1475c:	lsl	r0, r2, r7
   14760:	lsr	r2, r2, r1
   14764:	lsr	fp, r5, r1
   14768:	orr	r8, r2, r3, lsl r7
   1476c:	lsr	r1, r6, r1
   14770:	str	r0, [sp, #4]
   14774:	orr	r5, r1, r5, lsl r7
   14778:	lsr	r9, r8, #16
   1477c:	mov	r0, fp
   14780:	uxth	sl, r8
   14784:	mov	r1, r9
   14788:	bl	14970 <__assert_fail@plt+0x325c>
   1478c:	mov	r1, r9
   14790:	mov	r4, r0
   14794:	mov	r0, fp
   14798:	bl	14b5c <__assert_fail@plt+0x3448>
   1479c:	mul	r0, sl, r4
   147a0:	lsr	ip, r5, #16
   147a4:	orr	r1, ip, r1, lsl #16
   147a8:	cmp	r0, r1
   147ac:	bls	147c0 <__assert_fail@plt+0x30ac>
   147b0:	adds	r1, r1, r8
   147b4:	sub	r2, r4, #1
   147b8:	bcc	14954 <__assert_fail@plt+0x3240>
   147bc:	mov	r4, r2
   147c0:	rsb	ip, r0, r1
   147c4:	mov	r1, r9
   147c8:	str	ip, [sp]
   147cc:	uxth	r5, r5
   147d0:	mov	r0, ip
   147d4:	bl	14970 <__assert_fail@plt+0x325c>
   147d8:	ldr	ip, [sp]
   147dc:	mov	r1, r9
   147e0:	mov	fp, r0
   147e4:	mov	r0, ip
   147e8:	bl	14b5c <__assert_fail@plt+0x3448>
   147ec:	mul	sl, sl, fp
   147f0:	orr	r1, r5, r1, lsl #16
   147f4:	cmp	sl, r1
   147f8:	bls	1480c <__assert_fail@plt+0x30f8>
   147fc:	adds	r1, r1, r8
   14800:	sub	r2, fp, #1
   14804:	bcc	14940 <__assert_fail@plt+0x322c>
   14808:	mov	fp, r2
   1480c:	ldr	r3, [sp, #4]
   14810:	orr	r0, fp, r4, lsl #16
   14814:	rsb	sl, sl, r1
   14818:	umull	r4, r5, r0, r3
   1481c:	cmp	sl, r5
   14820:	bcc	14840 <__assert_fail@plt+0x312c>
   14824:	movne	r3, #0
   14828:	moveq	r3, #1
   1482c:	cmp	r4, r6, lsl r7
   14830:	movls	r6, #0
   14834:	andhi	r6, r3, #1
   14838:	cmp	r6, #0
   1483c:	beq	14634 <__assert_fail@plt+0x2f20>
   14840:	mov	r6, #0
   14844:	sub	r0, r0, #1
   14848:	mov	r1, r6
   1484c:	add	sp, sp, #12
   14850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14854:	lsl	r4, r4, r3
   14858:	rsb	r9, r3, #32
   1485c:	lsr	r2, r5, r9
   14860:	lsr	r9, r6, r9
   14864:	lsr	r8, r4, #16
   14868:	orr	r9, r9, r5, lsl r3
   1486c:	mov	r0, r2
   14870:	lsl	r7, r6, r3
   14874:	mov	r1, r8
   14878:	str	r2, [sp]
   1487c:	bl	14970 <__assert_fail@plt+0x325c>
   14880:	ldr	r2, [sp]
   14884:	mov	r1, r8
   14888:	uxth	sl, r4
   1488c:	mov	fp, r0
   14890:	mov	r0, r2
   14894:	bl	14b5c <__assert_fail@plt+0x3448>
   14898:	mul	r0, sl, fp
   1489c:	lsr	r3, r9, #16
   148a0:	orr	r1, r3, r1, lsl #16
   148a4:	cmp	r0, r1
   148a8:	bls	148c8 <__assert_fail@plt+0x31b4>
   148ac:	adds	r1, r1, r4
   148b0:	sub	r3, fp, #1
   148b4:	bcs	14968 <__assert_fail@plt+0x3254>
   148b8:	cmp	r0, r1
   148bc:	subhi	fp, fp, #2
   148c0:	addhi	r1, r1, r4
   148c4:	bls	14968 <__assert_fail@plt+0x3254>
   148c8:	rsb	r5, r0, r1
   148cc:	mov	r1, r8
   148d0:	uxth	r9, r9
   148d4:	mov	r0, r5
   148d8:	bl	14970 <__assert_fail@plt+0x325c>
   148dc:	mov	r1, r8
   148e0:	mov	r6, r0
   148e4:	mov	r0, r5
   148e8:	bl	14b5c <__assert_fail@plt+0x3448>
   148ec:	mul	r5, sl, r6
   148f0:	orr	r1, r9, r1, lsl #16
   148f4:	cmp	r5, r1
   148f8:	bls	1491c <__assert_fail@plt+0x3208>
   148fc:	adds	r1, r1, r4
   14900:	sub	r3, r6, #1
   14904:	bcs	14918 <__assert_fail@plt+0x3204>
   14908:	cmp	r5, r1
   1490c:	subhi	r6, r6, #2
   14910:	addhi	r1, r1, r4
   14914:	bhi	1491c <__assert_fail@plt+0x3208>
   14918:	mov	r6, r3
   1491c:	rsb	r5, r5, r1
   14920:	orr	r6, r6, fp, lsl #16
   14924:	b	146b0 <__assert_fail@plt+0x2f9c>
   14928:	mov	r6, r3
   1492c:	b	1462c <__assert_fail@plt+0x2f18>
   14930:	mov	r9, r2
   14934:	b	146fc <__assert_fail@plt+0x2fe8>
   14938:	mov	r5, r3
   1493c:	b	14748 <__assert_fail@plt+0x3034>
   14940:	cmp	sl, r1
   14944:	subhi	fp, fp, #2
   14948:	addhi	r1, r1, r8
   1494c:	bhi	1480c <__assert_fail@plt+0x30f8>
   14950:	b	14808 <__assert_fail@plt+0x30f4>
   14954:	cmp	r0, r1
   14958:	subhi	r4, r4, #2
   1495c:	addhi	r1, r1, r8
   14960:	bhi	147c0 <__assert_fail@plt+0x30ac>
   14964:	b	147bc <__assert_fail@plt+0x30a8>
   14968:	mov	fp, r3
   1496c:	b	148c8 <__assert_fail@plt+0x31b4>
   14970:	subs	r2, r1, #1
   14974:	bxeq	lr
   14978:	bcc	14b50 <__assert_fail@plt+0x343c>
   1497c:	cmp	r0, r1
   14980:	bls	14b34 <__assert_fail@plt+0x3420>
   14984:	tst	r1, r2
   14988:	beq	14b40 <__assert_fail@plt+0x342c>
   1498c:	clz	r3, r0
   14990:	clz	r2, r1
   14994:	sub	r3, r2, r3
   14998:	rsbs	r3, r3, #31
   1499c:	addne	r3, r3, r3, lsl #1
   149a0:	mov	r2, #0
   149a4:	addne	pc, pc, r3, lsl #2
   149a8:	nop	{0}
   149ac:	cmp	r0, r1, lsl #31
   149b0:	adc	r2, r2, r2
   149b4:	subcs	r0, r0, r1, lsl #31
   149b8:	cmp	r0, r1, lsl #30
   149bc:	adc	r2, r2, r2
   149c0:	subcs	r0, r0, r1, lsl #30
   149c4:	cmp	r0, r1, lsl #29
   149c8:	adc	r2, r2, r2
   149cc:	subcs	r0, r0, r1, lsl #29
   149d0:	cmp	r0, r1, lsl #28
   149d4:	adc	r2, r2, r2
   149d8:	subcs	r0, r0, r1, lsl #28
   149dc:	cmp	r0, r1, lsl #27
   149e0:	adc	r2, r2, r2
   149e4:	subcs	r0, r0, r1, lsl #27
   149e8:	cmp	r0, r1, lsl #26
   149ec:	adc	r2, r2, r2
   149f0:	subcs	r0, r0, r1, lsl #26
   149f4:	cmp	r0, r1, lsl #25
   149f8:	adc	r2, r2, r2
   149fc:	subcs	r0, r0, r1, lsl #25
   14a00:	cmp	r0, r1, lsl #24
   14a04:	adc	r2, r2, r2
   14a08:	subcs	r0, r0, r1, lsl #24
   14a0c:	cmp	r0, r1, lsl #23
   14a10:	adc	r2, r2, r2
   14a14:	subcs	r0, r0, r1, lsl #23
   14a18:	cmp	r0, r1, lsl #22
   14a1c:	adc	r2, r2, r2
   14a20:	subcs	r0, r0, r1, lsl #22
   14a24:	cmp	r0, r1, lsl #21
   14a28:	adc	r2, r2, r2
   14a2c:	subcs	r0, r0, r1, lsl #21
   14a30:	cmp	r0, r1, lsl #20
   14a34:	adc	r2, r2, r2
   14a38:	subcs	r0, r0, r1, lsl #20
   14a3c:	cmp	r0, r1, lsl #19
   14a40:	adc	r2, r2, r2
   14a44:	subcs	r0, r0, r1, lsl #19
   14a48:	cmp	r0, r1, lsl #18
   14a4c:	adc	r2, r2, r2
   14a50:	subcs	r0, r0, r1, lsl #18
   14a54:	cmp	r0, r1, lsl #17
   14a58:	adc	r2, r2, r2
   14a5c:	subcs	r0, r0, r1, lsl #17
   14a60:	cmp	r0, r1, lsl #16
   14a64:	adc	r2, r2, r2
   14a68:	subcs	r0, r0, r1, lsl #16
   14a6c:	cmp	r0, r1, lsl #15
   14a70:	adc	r2, r2, r2
   14a74:	subcs	r0, r0, r1, lsl #15
   14a78:	cmp	r0, r1, lsl #14
   14a7c:	adc	r2, r2, r2
   14a80:	subcs	r0, r0, r1, lsl #14
   14a84:	cmp	r0, r1, lsl #13
   14a88:	adc	r2, r2, r2
   14a8c:	subcs	r0, r0, r1, lsl #13
   14a90:	cmp	r0, r1, lsl #12
   14a94:	adc	r2, r2, r2
   14a98:	subcs	r0, r0, r1, lsl #12
   14a9c:	cmp	r0, r1, lsl #11
   14aa0:	adc	r2, r2, r2
   14aa4:	subcs	r0, r0, r1, lsl #11
   14aa8:	cmp	r0, r1, lsl #10
   14aac:	adc	r2, r2, r2
   14ab0:	subcs	r0, r0, r1, lsl #10
   14ab4:	cmp	r0, r1, lsl #9
   14ab8:	adc	r2, r2, r2
   14abc:	subcs	r0, r0, r1, lsl #9
   14ac0:	cmp	r0, r1, lsl #8
   14ac4:	adc	r2, r2, r2
   14ac8:	subcs	r0, r0, r1, lsl #8
   14acc:	cmp	r0, r1, lsl #7
   14ad0:	adc	r2, r2, r2
   14ad4:	subcs	r0, r0, r1, lsl #7
   14ad8:	cmp	r0, r1, lsl #6
   14adc:	adc	r2, r2, r2
   14ae0:	subcs	r0, r0, r1, lsl #6
   14ae4:	cmp	r0, r1, lsl #5
   14ae8:	adc	r2, r2, r2
   14aec:	subcs	r0, r0, r1, lsl #5
   14af0:	cmp	r0, r1, lsl #4
   14af4:	adc	r2, r2, r2
   14af8:	subcs	r0, r0, r1, lsl #4
   14afc:	cmp	r0, r1, lsl #3
   14b00:	adc	r2, r2, r2
   14b04:	subcs	r0, r0, r1, lsl #3
   14b08:	cmp	r0, r1, lsl #2
   14b0c:	adc	r2, r2, r2
   14b10:	subcs	r0, r0, r1, lsl #2
   14b14:	cmp	r0, r1, lsl #1
   14b18:	adc	r2, r2, r2
   14b1c:	subcs	r0, r0, r1, lsl #1
   14b20:	cmp	r0, r1
   14b24:	adc	r2, r2, r2
   14b28:	subcs	r0, r0, r1
   14b2c:	mov	r0, r2
   14b30:	bx	lr
   14b34:	moveq	r0, #1
   14b38:	movne	r0, #0
   14b3c:	bx	lr
   14b40:	clz	r2, r1
   14b44:	rsb	r2, r2, #31
   14b48:	lsr	r0, r0, r2
   14b4c:	bx	lr
   14b50:	cmp	r0, #0
   14b54:	mvnne	r0, #0
   14b58:	b	1402c <__assert_fail@plt+0x2918>
   14b5c:	cmp	r1, #0
   14b60:	beq	14b50 <__assert_fail@plt+0x343c>
   14b64:	push	{r0, r1, lr}
   14b68:	bl	14970 <__assert_fail@plt+0x325c>
   14b6c:	pop	{r1, r2, lr}
   14b70:	mul	r3, r2, r0
   14b74:	sub	r1, r1, r3
   14b78:	bx	lr
   14b7c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14b80:	mov	r7, r0
   14b84:	ldr	r6, [pc, #76]	; 14bd8 <__assert_fail@plt+0x34c4>
   14b88:	mov	r8, r1
   14b8c:	ldr	r5, [pc, #72]	; 14bdc <__assert_fail@plt+0x34c8>
   14b90:	mov	r9, r2
   14b94:	add	r6, pc, r6
   14b98:	bl	113b8 <_init@@Base>
   14b9c:	add	r5, pc, r5
   14ba0:	rsb	r6, r5, r6
   14ba4:	asrs	r6, r6, #2
   14ba8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14bac:	sub	r5, r5, #4
   14bb0:	mov	r4, #0
   14bb4:	add	r4, r4, #1
   14bb8:	ldr	r3, [r5, #4]!
   14bbc:	mov	r0, r7
   14bc0:	mov	r1, r8
   14bc4:	mov	r2, r9
   14bc8:	blx	r3
   14bcc:	cmp	r4, r6
   14bd0:	bne	14bb4 <__assert_fail@plt+0x34a0>
   14bd4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14bd8:	ldrdeq	r1, [r1], -r0
   14bdc:	andeq	r1, r1, r4, asr #19
   14be0:	bx	lr

Disassembly of section .fini:

00014be4 <_fini@@Base>:
   14be4:	push	{r3, lr}
   14be8:	pop	{r3, pc}
