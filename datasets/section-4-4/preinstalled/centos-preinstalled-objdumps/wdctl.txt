
centos-preinstalled/wdctl:     file format elf32-littlearm


Disassembly of section .init:

000110cc <.init>:
   110cc:	push	{r3, lr}
   110d0:	bl	12310 <__assert_fail@plt+0xedc>
   110d4:	pop	{r3, pc}

Disassembly of section .plt:

000110d8 <calloc@plt-0x14>:
   110d8:	push	{lr}		; (str lr, [sp, #-4]!)
   110dc:	ldr	lr, [pc, #4]	; 110e8 <calloc@plt-0x4>
   110e0:	add	lr, pc, lr
   110e4:	ldr	pc, [lr, #8]!
   110e8:	andeq	r6, r1, r8, lsl pc

000110ec <calloc@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3864]!	; 0xf18

000110f8 <raise@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3856]!	; 0xf10

00011104 <strcmp@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3848]!	; 0xf08

00011110 <strtol@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3840]!	; 0xf00

0001111c <strcspn@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3832]!	; 0xef8

00011128 <wcwidth@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3824]!	; 0xef0

00011134 <sigprocmask@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3816]!	; 0xee8

00011140 <free@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3808]!	; 0xee0

0001114c <ferror@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3800]!	; 0xed8

00011158 <_exit@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3792]!	; 0xed0

00011164 <memcpy@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3784]!	; 0xec8

00011170 <__strtoull_internal@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3776]!	; 0xec0

0001117c <dcgettext@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3768]!	; 0xeb8

00011188 <__stack_chk_fail@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3760]!	; 0xeb0

00011194 <textdomain@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3752]!	; 0xea8

000111a0 <__strndup@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3744]!	; 0xea0

000111ac <err@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3736]!	; 0xe98

000111b8 <iswprint@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3728]!	; 0xe90

000111c4 <ioctl@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3720]!	; 0xe88

000111d0 <__ctype_get_mb_cur_max@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3712]!	; 0xe80

000111dc <__fpending@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3704]!	; 0xe78

000111e8 <mbrtowc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3696]!	; 0xe70

000111f4 <wcstombs@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3688]!	; 0xe68

00011200 <open64@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3680]!	; 0xe60

0001120c <getenv@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3672]!	; 0xe58

00011218 <malloc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3664]!	; 0xe50

00011224 <__libc_start_main@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3656]!	; 0xe48

00011230 <__gmon_start__@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3648]!	; 0xe40

0001123c <mempcpy@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3640]!	; 0xe38

00011248 <getopt_long@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3632]!	; 0xe30

00011254 <__ctype_b_loc@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3624]!	; 0xe28

00011260 <exit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3616]!	; 0xe20

0001126c <strtoul@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3608]!	; 0xe18

00011278 <ttyname@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3600]!	; 0xe10

00011284 <strlen@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3592]!	; 0xe08

00011290 <strchr@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3584]!	; 0xe00

0001129c <warnx@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #90112	; 0x16000
   112a4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112a8 <sigfillset@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #90112	; 0x16000
   112b0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112b4 <__errno_location@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #90112	; 0x16000
   112bc:	ldr	pc, [ip, #3560]!	; 0xde8

000112c0 <strncasecmp@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #90112	; 0x16000
   112c8:	ldr	pc, [ip, #3552]!	; 0xde0

000112cc <__sprintf_chk@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112d8 <snprintf@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112e4 <__cxa_atexit@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3528]!	; 0xdc8

000112f0 <__vasprintf_chk@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3520]!	; 0xdc0

000112fc <__strdup@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3512]!	; 0xdb8

00011308 <memset@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3504]!	; 0xdb0

00011314 <strncpy@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3496]!	; 0xda8

00011320 <fgetc@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3488]!	; 0xda0

0001132c <__printf_chk@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3480]!	; 0xd98

00011338 <strtod@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3472]!	; 0xd90

00011344 <write@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3464]!	; 0xd88

00011350 <__fprintf_chk@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3456]!	; 0xd80

0001135c <fclose@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3448]!	; 0xd78

00011368 <setlocale@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3440]!	; 0xd70

00011374 <sigemptyset@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3432]!	; 0xd68

00011380 <errx@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #3424]!	; 0xd60

0001138c <warn@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #90112	; 0x16000
   11394:	ldr	pc, [ip, #3416]!	; 0xd58

00011398 <nl_langinfo@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #90112	; 0x16000
   113a0:	ldr	pc, [ip, #3408]!	; 0xd50

000113a4 <fputc@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #90112	; 0x16000
   113ac:	ldr	pc, [ip, #3400]!	; 0xd48

000113b0 <localeconv@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #90112	; 0x16000
   113b8:	ldr	pc, [ip, #3392]!	; 0xd40

000113bc <mbstowcs@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #90112	; 0x16000
   113c4:	ldr	pc, [ip, #3384]!	; 0xd38

000113c8 <__strtoll_internal@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #90112	; 0x16000
   113d0:	ldr	pc, [ip, #3376]!	; 0xd30

000113d4 <bindtextdomain@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #90112	; 0x16000
   113dc:	ldr	pc, [ip, #3368]!	; 0xd28

000113e0 <isatty@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #90112	; 0x16000
   113e8:	ldr	pc, [ip, #3360]!	; 0xd20

000113ec <fputs@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #90112	; 0x16000
   113f4:	ldr	pc, [ip, #3352]!	; 0xd18

000113f8 <strncmp@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #90112	; 0x16000
   11400:	ldr	pc, [ip, #3344]!	; 0xd10

00011404 <abort@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #90112	; 0x16000
   1140c:	ldr	pc, [ip, #3336]!	; 0xd08

00011410 <close@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #90112	; 0x16000
   11418:	ldr	pc, [ip, #3328]!	; 0xd00

0001141c <__snprintf_chk@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #90112	; 0x16000
   11424:	ldr	pc, [ip, #3320]!	; 0xcf8

00011428 <strspn@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #90112	; 0x16000
   11430:	ldr	pc, [ip, #3312]!	; 0xcf0

00011434 <__assert_fail@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #90112	; 0x16000
   1143c:	ldr	pc, [ip, #3304]!	; 0xce8

Disassembly of section .text:

00011440 <.text>:
   11440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11444:	movw	r2, #33216	; 0x81c0
   11448:	sub	sp, sp, #428	; 0x1ac
   1144c:	movt	r2, #2
   11450:	mov	r3, #0
   11454:	mov	sl, r1
   11458:	str	r2, [sp, #16]
   1145c:	mov	r4, r0
   11460:	ldr	r2, [r2]
   11464:	movw	r1, #28860	; 0x70bc
   11468:	mov	r0, #6
   1146c:	movt	r1, #1
   11470:	mov	r9, r3
   11474:	str	r3, [sp, #80]	; 0x50
   11478:	str	r3, [sp, #88]	; 0x58
   1147c:	movw	r5, #33240	; 0x81d8
   11480:	str	r3, [sp, #44]	; 0x2c
   11484:	movw	r6, #33248	; 0x81e0
   11488:	str	r3, [sp, #92]	; 0x5c
   1148c:	movt	r5, #2
   11490:	str	r2, [sp, #420]	; 0x1a4
   11494:	bl	11368 <setlocale@plt>
   11498:	movw	r0, #29924	; 0x74e4
   1149c:	movw	r1, #29936	; 0x74f0
   114a0:	movt	r0, #1
   114a4:	movt	r1, #1
   114a8:	bl	113d4 <bindtextdomain@plt>
   114ac:	movt	r6, #2
   114b0:	movw	r0, #29924	; 0x74e4
   114b4:	movt	r0, #1
   114b8:	str	r9, [sp, #28]
   114bc:	bl	11194 <textdomain@plt>
   114c0:	movw	r0, #10096	; 0x2770
   114c4:	movt	r0, #1
   114c8:	str	r9, [sp, #24]
   114cc:	str	r9, [sp, #40]	; 0x28
   114d0:	str	r9, [sp, #36]	; 0x24
   114d4:	bl	16e40 <__assert_fail@plt+0x5a0c>
   114d8:	movw	r3, #28284	; 0x6e7c
   114dc:	movt	r3, #1
   114e0:	str	r3, [sp, #20]
   114e4:	mov	r7, #0
   114e8:	movw	r2, #30056	; 0x7568
   114ec:	str	r7, [sp]
   114f0:	movt	r2, #1
   114f4:	mov	r0, r4
   114f8:	mov	r1, sl
   114fc:	ldr	r3, [pc, #3500]	; 122b0 <__assert_fail@plt+0xe7c>
   11500:	bl	11248 <getopt_long@plt>
   11504:	cmn	r0, #1
   11508:	beq	117b8 <__assert_fail@plt+0x384>
   1150c:	cmp	r0, #69	; 0x45
   11510:	ble	11590 <__assert_fail@plt+0x15c>
   11514:	ldr	r1, [pc, #3480]	; 122b4 <__assert_fail@plt+0xe80>
   11518:	mov	ip, r7
   1151c:	mov	lr, r7
   11520:	add	r8, sp, #88	; 0x58
   11524:	sub	r7, r1, #64	; 0x40
   11528:	mov	r3, #70	; 0x46
   1152c:	cmp	r0, r3
   11530:	blt	1156c <__assert_fail@plt+0x138>
   11534:	movne	r2, r7
   11538:	beq	11554 <__assert_fail@plt+0x120>
   1153c:	ldr	r3, [r2, #4]!
   11540:	cmp	r3, #0
   11544:	beq	1156c <__assert_fail@plt+0x138>
   11548:	cmp	r0, r3
   1154c:	blt	1156c <__assert_fail@plt+0x138>
   11550:	bne	1153c <__assert_fail@plt+0x108>
   11554:	ldr	r3, [r8, lr, lsl #2]
   11558:	cmp	r3, #0
   1155c:	streq	r0, [r8, lr, lsl #2]
   11560:	beq	1156c <__assert_fail@plt+0x138>
   11564:	cmp	r0, r3
   11568:	bne	120e0 <__assert_fail@plt+0xcac>
   1156c:	ldr	r3, [r1]
   11570:	add	ip, ip, #1
   11574:	mov	r7, r1
   11578:	cmp	r3, #0
   1157c:	mov	lr, ip
   11580:	beq	11590 <__assert_fail@plt+0x15c>
   11584:	cmp	r0, r3
   11588:	add	r1, r1, #64	; 0x40
   1158c:	bge	1152c <__assert_fail@plt+0xf8>
   11590:	sub	r0, r0, #70	; 0x46
   11594:	cmp	r0, #50	; 0x32
   11598:	ldrls	pc, [pc, r0, lsl #2]
   1159c:	b	117a8 <__assert_fail@plt+0x374>
   115a0:	muleq	r1, ip, r7
   115a4:	andeq	r1, r1, r8, lsr #15
   115a8:	andeq	r1, r1, r8, lsr #15
   115ac:	muleq	r1, r0, r7
   115b0:	andeq	r1, r1, r8, lsr #15
   115b4:	andeq	r1, r1, r8, lsr #15
   115b8:	andeq	r1, r1, r8, lsr #15
   115bc:	andeq	r1, r1, r8, lsr #15
   115c0:	andeq	r1, r1, r8, lsr #15
   115c4:	andeq	r1, r1, r4, lsl #15
   115c8:	andeq	r1, r1, r8, lsr #15
   115cc:	andeq	r1, r1, r8, lsr #15
   115d0:	andeq	r1, r1, r8, lsr #15
   115d4:	andeq	r1, r1, r8, lsr #15
   115d8:	andeq	r1, r1, r8, ror r7
   115dc:	andeq	r1, r1, r8, lsr #15
   115e0:	andeq	r1, r1, r4, lsr #14
   115e4:	andeq	r1, r1, r8, lsr #15
   115e8:	andeq	r1, r1, r8, lsr #15
   115ec:	andeq	r1, r1, r8, lsr #15
   115f0:	andeq	r1, r1, r8, lsr #15
   115f4:	andeq	r1, r1, r8, lsr #15
   115f8:	andeq	r1, r1, r8, lsr #15
   115fc:	andeq	r1, r1, r8, lsr #15
   11600:	andeq	r1, r1, r8, lsr #15
   11604:	andeq	r1, r1, r8, lsr #15
   11608:	andeq	r1, r1, r8, lsr #15
   1160c:	andeq	r1, r1, r8, lsr #15
   11610:	andeq	r1, r1, r8, lsr #15
   11614:	andeq	r1, r1, r8, lsr #15
   11618:	andeq	r1, r1, r8, lsr #15
   1161c:	andeq	r1, r1, r8, lsr #15
   11620:	andeq	r1, r1, r4, lsl #14
   11624:	andeq	r1, r1, r8, lsr #15
   11628:	strdeq	r1, [r1], -r4
   1162c:	andeq	r1, r1, r8, lsr #15
   11630:	andeq	r1, r1, r8, lsr #15
   11634:	andeq	r1, r1, r8, lsr #15
   11638:	andeq	r1, r1, r8, lsr #15
   1163c:	andeq	r1, r1, r8, lsr #15
   11640:	andeq	r1, r1, r4, ror #13
   11644:			; <UNDEFINED> instruction: 0x000116b8
   11648:	andeq	r1, r1, r8, lsr #15
   1164c:	andeq	r1, r1, r8, lsr #15
   11650:	andeq	r1, r1, r8, lsr #13
   11654:	andeq	r1, r1, ip, ror r6
   11658:	andeq	r1, r1, r8, lsr #15
   1165c:	andeq	r1, r1, r8, lsr #15
   11660:	andeq	r1, r1, r8, lsr #15
   11664:	andeq	r1, r1, r8, lsr #15
   11668:	andeq	r1, r1, ip, ror #12
   1166c:	mov	lr, #1
   11670:	str	lr, [sp, #28]
   11674:	str	lr, [sp, #24]
   11678:	b	114e4 <__assert_fail@plt+0xb0>
   1167c:	mov	r2, #5
   11680:	movw	r1, #29996	; 0x752c
   11684:	mov	r0, #0
   11688:	movt	r1, #1
   1168c:	ldr	r7, [r5]
   11690:	bl	1117c <dcgettext@plt>
   11694:	mov	r1, r0
   11698:	mov	r0, r7
   1169c:	bl	12f64 <__assert_fail@plt+0x1b30>
   116a0:	mov	r9, r0
   116a4:	b	114e4 <__assert_fail@plt+0xb0>
   116a8:	ldr	r2, [sp, #36]	; 0x24
   116ac:	orr	r2, r2, #2
   116b0:	str	r2, [sp, #36]	; 0x24
   116b4:	b	114e4 <__assert_fail@plt+0xb0>
   116b8:	movw	r3, #9368	; 0x2498
   116bc:	ldr	r0, [r5]
   116c0:	movt	r3, #1
   116c4:	ldr	r1, [pc, #3052]	; 122b8 <__assert_fail@plt+0xe84>
   116c8:	mov	r2, #5
   116cc:	bl	1383c <__assert_fail@plt+0x2408>
   116d0:	cmp	r0, #0
   116d4:	str	r0, [r6]
   116d8:	bge	114e4 <__assert_fail@plt+0xb0>
   116dc:	mov	r0, #1
   116e0:	b	1175c <__assert_fail@plt+0x328>
   116e4:	ldr	r1, [sp, #36]	; 0x24
   116e8:	orr	r1, r1, #8
   116ec:	str	r1, [sp, #36]	; 0x24
   116f0:	b	114e4 <__assert_fail@plt+0xb0>
   116f4:	movw	r3, #33232	; 0x81d0
   116f8:	movt	r3, #2
   116fc:	ldr	r0, [r3]
   11700:	bl	12518 <__assert_fail@plt+0x10e4>
   11704:	movw	r2, #9224	; 0x2408
   11708:	ldr	r0, [r5]
   1170c:	movt	r2, #1
   11710:	add	r1, sp, #80	; 0x50
   11714:	bl	13a74 <__assert_fail@plt+0x2640>
   11718:	cmp	r0, #0
   1171c:	beq	114e4 <__assert_fail@plt+0xb0>
   11720:	b	116dc <__assert_fail@plt+0x2a8>
   11724:	mov	r2, #5
   11728:	movw	r1, #30024	; 0x7548
   1172c:	mov	r0, #0
   11730:	movt	r1, #1
   11734:	bl	1117c <dcgettext@plt>
   11738:	movw	r2, #33208	; 0x81b8
   1173c:	movt	r2, #2
   11740:	movw	r3, #30036	; 0x7554
   11744:	movt	r3, #1
   11748:	ldr	r2, [r2]
   1174c:	mov	r1, r0
   11750:	mov	r0, #1
   11754:	bl	1132c <__printf_chk@plt>
   11758:	mov	r0, #0
   1175c:	ldr	r1, [sp, #16]
   11760:	ldr	r2, [sp, #420]	; 0x1a4
   11764:	ldr	r3, [r1]
   11768:	cmp	r2, r3
   1176c:	bne	12210 <__assert_fail@plt+0xddc>
   11770:	add	sp, sp, #428	; 0x1ac
   11774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11778:	mov	lr, #1
   1177c:	str	lr, [sp, #28]
   11780:	b	114e4 <__assert_fail@plt+0xb0>
   11784:	mov	r3, #1
   11788:	str	r3, [sp, #44]	; 0x2c
   1178c:	b	114e4 <__assert_fail@plt+0xb0>
   11790:	mov	r2, #1
   11794:	str	r2, [sp, #24]
   11798:	b	114e4 <__assert_fail@plt+0xb0>
   1179c:	mov	r1, #1
   117a0:	str	r1, [sp, #40]	; 0x28
   117a4:	b	114e4 <__assert_fail@plt+0xb0>
   117a8:	movw	r3, #33228	; 0x81cc
   117ac:	movt	r3, #2
   117b0:	ldr	r0, [r3]
   117b4:	bl	12518 <__assert_fail@plt+0x10e4>
   117b8:	movw	r8, #33248	; 0x81e0
   117bc:	movt	r8, #2
   117c0:	ldr	r3, [r8]
   117c4:	cmp	r3, #0
   117c8:	bne	117f0 <__assert_fail@plt+0x3bc>
   117cc:	mov	r2, #1
   117d0:	str	r3, [r8, #4]
   117d4:	str	r2, [r8, #8]
   117d8:	mov	r3, #2
   117dc:	mov	r2, #4
   117e0:	str	r3, [r8, #12]
   117e4:	str	r2, [r8]
   117e8:	mov	r3, #3
   117ec:	str	r3, [r8, #16]
   117f0:	movw	r3, #33224	; 0x81c8
   117f4:	movt	r3, #2
   117f8:	mov	ip, #0
   117fc:	str	r9, [sp, #60]	; 0x3c
   11800:	ldr	r5, [r3]
   11804:	mov	r9, ip
   11808:	movw	lr, #29608	; 0x73a8
   1180c:	movw	r1, #29908	; 0x74d4
   11810:	movt	lr, #1
   11814:	movt	r1, #1
   11818:	str	r3, [sp, #32]
   1181c:	str	lr, [sp, #68]	; 0x44
   11820:	str	r1, [sp, #56]	; 0x38
   11824:	str	ip, [sp, #64]	; 0x40
   11828:	mov	r2, #68	; 0x44
   1182c:	add	r0, sp, #96	; 0x60
   11830:	mov	r1, #0
   11834:	bl	11308 <memset@plt>
   11838:	cmp	r4, r5
   1183c:	ldrne	r3, [sl, r5, lsl #2]
   11840:	addne	r5, r5, #1
   11844:	ldreq	r2, [sp, #68]	; 0x44
   11848:	ldrne	lr, [sp, #32]
   1184c:	streq	r2, [sp, #96]	; 0x60
   11850:	strne	r5, [lr]
   11854:	strne	r3, [sp, #96]	; 0x60
   11858:	cmp	r9, #0
   1185c:	bne	11ad4 <__assert_fail@plt+0x6a0>
   11860:	ldr	r1, [sp, #60]	; 0x3c
   11864:	add	r9, r9, #1
   11868:	cmp	r1, #0
   1186c:	bne	11a10 <__assert_fail@plt+0x5dc>
   11870:	ldr	r3, [sp, #96]	; 0x60
   11874:	cmp	r3, #0
   11878:	beq	12294 <__assert_fail@plt+0xe60>
   1187c:	add	r6, sp, #292	; 0x124
   11880:	mov	r0, r6
   11884:	bl	11374 <sigemptyset@plt>
   11888:	add	r0, sp, #164	; 0xa4
   1188c:	bl	112a8 <sigfillset@plt>
   11890:	add	r1, sp, #164	; 0xa4
   11894:	mov	r2, r6
   11898:	mov	r0, #0
   1189c:	bl	11134 <sigprocmask@plt>
   118a0:	mov	r1, #1
   118a4:	ldr	r0, [sp, #96]	; 0x60
   118a8:	movt	r1, #8
   118ac:	bl	11200 <open64@plt>
   118b0:	subs	r5, r0, #0
   118b4:	blt	11fb8 <__assert_fail@plt+0xb84>
   118b8:	mov	r1, #22272	; 0x5700
   118bc:	add	r2, sp, #120	; 0x78
   118c0:	movt	r1, #32808	; 0x8028
   118c4:	bl	111c4 <ioctl@plt>
   118c8:	cmp	r0, #0
   118cc:	blt	11aec <__assert_fail@plt+0x6b8>
   118d0:	add	r2, sp, #112	; 0x70
   118d4:	movw	r1, #22273	; 0x5701
   118d8:	mov	r0, r5
   118dc:	movt	r1, #32772	; 0x8004
   118e0:	bl	111c4 <ioctl@plt>
   118e4:	add	r2, sp, #116	; 0x74
   118e8:	mov	r0, r5
   118ec:	movw	r1, #22274	; 0x5702
   118f0:	movt	r1, #32772	; 0x8004
   118f4:	bl	111c4 <ioctl@plt>
   118f8:	add	r2, sp, #100	; 0x64
   118fc:	mov	r0, r5
   11900:	movw	r1, #22279	; 0x5707
   11904:	movt	r1, #32772	; 0x8004
   11908:	bl	111c4 <ioctl@plt>
   1190c:	add	r2, sp, #108	; 0x6c
   11910:	movw	r1, #22281	; 0x5709
   11914:	movt	r1, #32772	; 0x8004
   11918:	cmp	r0, #0
   1191c:	mov	r0, r5
   11920:	ldrbge	r3, [sp, #160]	; 0xa0
   11924:	orrge	r3, r3, #1
   11928:	strbge	r3, [sp, #160]	; 0xa0
   1192c:	bl	111c4 <ioctl@plt>
   11930:	movw	r1, #22282	; 0x570a
   11934:	add	r2, sp, #104	; 0x68
   11938:	movt	r1, #32772	; 0x8004
   1193c:	cmp	r0, #0
   11940:	mov	r0, r5
   11944:	ldrbge	r3, [sp, #160]	; 0xa0
   11948:	orrge	r3, r3, #4
   1194c:	strbge	r3, [sp, #160]	; 0xa0
   11950:	bl	111c4 <ioctl@plt>
   11954:	cmp	r0, #0
   11958:	ldrbge	r3, [sp, #160]	; 0xa0
   1195c:	orrge	r3, r3, #2
   11960:	strbge	r3, [sp, #160]	; 0xa0
   11964:	b	11978 <__assert_fail@plt+0x544>
   11968:	bl	112b4 <__errno_location@plt>
   1196c:	ldr	r3, [r0]
   11970:	cmp	r3, #4
   11974:	bne	119f0 <__assert_fail@plt+0x5bc>
   11978:	mov	r0, r5
   1197c:	ldr	r1, [pc, #2360]	; 122bc <__assert_fail@plt+0xe88>
   11980:	mov	r2, #1
   11984:	bl	11344 <write@plt>
   11988:	cmp	r0, #0
   1198c:	blt	11968 <__assert_fail@plt+0x534>
   11990:	mov	r0, r5
   11994:	bl	11410 <close@plt>
   11998:	mov	r1, r6
   1199c:	mov	r0, #2
   119a0:	mov	r2, #0
   119a4:	bl	11134 <sigprocmask@plt>
   119a8:	ldr	r1, [sp, #44]	; 0x2c
   119ac:	cmp	r1, #0
   119b0:	bne	11b0c <__assert_fail@plt+0x6d8>
   119b4:	ldr	r1, [sp, #24]
   119b8:	cmp	r1, #0
   119bc:	beq	11cb4 <__assert_fail@plt+0x880>
   119c0:	ldr	r2, [sp, #28]
   119c4:	cmp	r2, #0
   119c8:	beq	11dc0 <__assert_fail@plt+0x98c>
   119cc:	ldr	r3, [sp, #40]	; 0x28
   119d0:	cmp	r3, #0
   119d4:	beq	11d30 <__assert_fail@plt+0x8fc>
   119d8:	ldr	r1, [sp, #32]
   119dc:	ldr	r5, [r1]
   119e0:	cmp	r4, r5
   119e4:	bgt	11828 <__assert_fail@plt+0x3f4>
   119e8:	ldr	r0, [sp, #64]	; 0x40
   119ec:	b	1175c <__assert_fail@plt+0x328>
   119f0:	mov	r2, #5
   119f4:	movw	r1, #30148	; 0x75c4
   119f8:	mov	r0, #0
   119fc:	movt	r1, #1
   11a00:	bl	1117c <dcgettext@plt>
   11a04:	ldr	r1, [sp, #96]	; 0x60
   11a08:	bl	1138c <warn@plt>
   11a0c:	b	11990 <__assert_fail@plt+0x55c>
   11a10:	ldr	r3, [sp, #96]	; 0x60
   11a14:	str	r1, [sp, #84]	; 0x54
   11a18:	cmp	r3, #0
   11a1c:	beq	12278 <__assert_fail@plt+0xe44>
   11a20:	add	r6, sp, #292	; 0x124
   11a24:	mov	r0, r6
   11a28:	bl	11374 <sigemptyset@plt>
   11a2c:	add	r0, sp, #164	; 0xa4
   11a30:	bl	112a8 <sigfillset@plt>
   11a34:	add	r1, sp, #164	; 0xa4
   11a38:	mov	r2, r6
   11a3c:	mov	r0, #0
   11a40:	bl	11134 <sigprocmask@plt>
   11a44:	mov	r1, #1
   11a48:	ldr	r0, [sp, #96]	; 0x60
   11a4c:	movt	r1, #8
   11a50:	bl	11200 <open64@plt>
   11a54:	subs	r5, r0, #0
   11a58:	bge	11a70 <__assert_fail@plt+0x63c>
   11a5c:	b	1222c <__assert_fail@plt+0xdf8>
   11a60:	bl	112b4 <__errno_location@plt>
   11a64:	ldr	r3, [r0]
   11a68:	cmp	r3, #4
   11a6c:	bne	11c94 <__assert_fail@plt+0x860>
   11a70:	mov	r0, r5
   11a74:	ldr	r1, [pc, #2116]	; 122c0 <__assert_fail@plt+0xe8c>
   11a78:	mov	r2, #1
   11a7c:	bl	11344 <write@plt>
   11a80:	cmp	r0, #0
   11a84:	blt	11a60 <__assert_fail@plt+0x62c>
   11a88:	movw	r1, #22278	; 0x5706
   11a8c:	mov	r0, r5
   11a90:	movt	r1, #49156	; 0xc004
   11a94:	add	r2, sp, #84	; 0x54
   11a98:	bl	111c4 <ioctl@plt>
   11a9c:	subs	r7, r0, #0
   11aa0:	bne	11e20 <__assert_fail@plt+0x9ec>
   11aa4:	mov	r0, r5
   11aa8:	bl	11410 <close@plt>
   11aac:	mov	r1, r6
   11ab0:	mov	r2, r7
   11ab4:	mov	r0, #2
   11ab8:	bl	11134 <sigprocmask@plt>
   11abc:	movw	r1, #30208	; 0x7600
   11ac0:	ldr	r2, [sp, #84]	; 0x54
   11ac4:	movt	r1, #1
   11ac8:	mov	r0, #1
   11acc:	bl	1132c <__printf_chk@plt>
   11ad0:	b	11870 <__assert_fail@plt+0x43c>
   11ad4:	movw	r6, #33232	; 0x81d0
   11ad8:	movt	r6, #2
   11adc:	mov	r0, #10
   11ae0:	ldr	r1, [r6]
   11ae4:	bl	113a4 <fputc@plt>
   11ae8:	b	11860 <__assert_fail@plt+0x42c>
   11aec:	mov	r2, #5
   11af0:	movw	r1, #30236	; 0x761c
   11af4:	mov	r0, #0
   11af8:	movt	r1, #1
   11afc:	bl	1117c <dcgettext@plt>
   11b00:	ldr	r1, [sp, #96]	; 0x60
   11b04:	bl	1138c <warn@plt>
   11b08:	b	11978 <__assert_fail@plt+0x544>
   11b0c:	ldr	r2, [sp, #96]	; 0x60
   11b10:	movw	r1, #30284	; 0x764c
   11b14:	mov	r0, #1
   11b18:	movt	r1, #1
   11b1c:	ldr	fp, [sp, #80]	; 0x50
   11b20:	bl	1132c <__printf_chk@plt>
   11b24:	ldr	r2, [sp, #24]
   11b28:	cmp	r2, #0
   11b2c:	beq	11ff0 <__assert_fail@plt+0xbbc>
   11b30:	movw	r6, #33232	; 0x81d0
   11b34:	movt	r6, #2
   11b38:	ldr	r3, [sp, #28]
   11b3c:	cmp	r3, #0
   11b40:	bne	11ba4 <__assert_fail@plt+0x770>
   11b44:	ldrb	r3, [sp, #160]	; 0xa0
   11b48:	tst	r3, #1
   11b4c:	beq	11b68 <__assert_fail@plt+0x734>
   11b50:	movw	r1, #30316	; 0x766c
   11b54:	mov	r0, #1
   11b58:	movt	r1, #1
   11b5c:	ldr	r2, [sp, #100]	; 0x64
   11b60:	bl	1132c <__printf_chk@plt>
   11b64:	ldrb	r3, [sp, #160]	; 0xa0
   11b68:	tst	r3, #4
   11b6c:	beq	11b88 <__assert_fail@plt+0x754>
   11b70:	movw	r1, #30332	; 0x767c
   11b74:	mov	r0, #1
   11b78:	movt	r1, #1
   11b7c:	ldr	r2, [sp, #108]	; 0x6c
   11b80:	bl	1132c <__printf_chk@plt>
   11b84:	ldrb	r3, [sp, #160]	; 0xa0
   11b88:	tst	r3, #2
   11b8c:	beq	11ba4 <__assert_fail@plt+0x770>
   11b90:	movw	r1, #30352	; 0x7690
   11b94:	mov	r0, #1
   11b98:	movt	r1, #1
   11b9c:	ldr	r2, [sp, #104]	; 0x68
   11ba0:	bl	1132c <__printf_chk@plt>
   11ba4:	ldr	lr, [sp, #40]	; 0x28
   11ba8:	cmp	lr, #0
   11bac:	bne	11c84 <__assert_fail@plt+0x850>
   11bb0:	movw	ip, #28284	; 0x6e7c
   11bb4:	movt	ip, #1
   11bb8:	ldr	r1, [sp, #120]	; 0x78
   11bbc:	movw	r2, #29912	; 0x74d8
   11bc0:	str	r8, [sp, #76]	; 0x4c
   11bc4:	mov	r8, r6
   11bc8:	ldr	r5, [sp, #40]	; 0x28
   11bcc:	mov	r6, r4
   11bd0:	mov	r4, ip
   11bd4:	ldr	ip, [sp, #20]
   11bd8:	movt	r2, #1
   11bdc:	str	r1, [sp, #52]	; 0x34
   11be0:	str	r2, [sp, #48]	; 0x30
   11be4:	str	r9, [sp, #72]	; 0x48
   11be8:	cmp	fp, #0
   11bec:	beq	11bfc <__assert_fail@plt+0x7c8>
   11bf0:	ldr	r3, [ip, r5]
   11bf4:	tst	fp, r3
   11bf8:	beq	11c68 <__assert_fail@plt+0x834>
   11bfc:	ldr	r7, [ip, r5]
   11c00:	ldr	r3, [sp, #52]	; 0x34
   11c04:	tst	r3, r7
   11c08:	beq	11c68 <__assert_fail@plt+0x834>
   11c0c:	ldr	r3, [sp, #112]	; 0x70
   11c10:	add	r9, r4, r5
   11c14:	ldr	lr, [sp, #56]	; 0x38
   11c18:	movw	r1, #30368	; 0x76a0
   11c1c:	tst	r7, r3
   11c20:	ldr	r3, [sp, #48]	; 0x30
   11c24:	ldr	r2, [r9, #4]
   11c28:	movt	r1, #1
   11c2c:	mov	r0, #1
   11c30:	str	ip, [sp, #12]
   11c34:	movne	r3, lr
   11c38:	bl	1132c <__printf_chk@plt>
   11c3c:	ldr	r3, [sp, #116]	; 0x74
   11c40:	ldr	lr, [sp, #56]	; 0x38
   11c44:	movw	r1, #30380	; 0x76ac
   11c48:	tst	r7, r3
   11c4c:	ldr	r3, [sp, #48]	; 0x30
   11c50:	ldr	r2, [r9, #4]
   11c54:	movt	r1, #1
   11c58:	mov	r0, #1
   11c5c:	movne	r3, lr
   11c60:	bl	1132c <__printf_chk@plt>
   11c64:	ldr	ip, [sp, #12]
   11c68:	add	r5, r5, #12
   11c6c:	cmp	r5, #144	; 0x90
   11c70:	bne	11be8 <__assert_fail@plt+0x7b4>
   11c74:	mov	r4, r6
   11c78:	ldr	r9, [sp, #72]	; 0x48
   11c7c:	mov	r6, r8
   11c80:	ldr	r8, [sp, #76]	; 0x4c
   11c84:	ldr	r1, [r6]
   11c88:	mov	r0, #10
   11c8c:	bl	113a4 <fputc@plt>
   11c90:	b	119d8 <__assert_fail@plt+0x5a4>
   11c94:	mov	r2, #5
   11c98:	movw	r1, #30148	; 0x75c4
   11c9c:	mov	r0, #0
   11ca0:	movt	r1, #1
   11ca4:	bl	1117c <dcgettext@plt>
   11ca8:	ldr	r1, [sp, #96]	; 0x60
   11cac:	bl	1138c <warn@plt>
   11cb0:	b	11a88 <__assert_fail@plt+0x654>
   11cb4:	ldr	r0, [sp, #24]
   11cb8:	mov	r2, #5
   11cbc:	movw	r1, #30396	; 0x76bc
   11cc0:	movt	r1, #1
   11cc4:	bl	1117c <dcgettext@plt>
   11cc8:	ldr	r3, [sp, #96]	; 0x60
   11ccc:	movw	r1, #30404	; 0x76c4
   11cd0:	movt	r1, #1
   11cd4:	mov	r2, r0
   11cd8:	mov	r0, #1
   11cdc:	bl	1132c <__printf_chk@plt>
   11ce0:	ldr	r0, [sp, #24]
   11ce4:	mov	r2, #5
   11ce8:	movw	r1, #30416	; 0x76d0
   11cec:	movt	r1, #1
   11cf0:	bl	1117c <dcgettext@plt>
   11cf4:	mov	r2, #5
   11cf8:	movw	r1, #30428	; 0x76dc
   11cfc:	movt	r1, #1
   11d00:	mov	r5, r0
   11d04:	ldr	r0, [sp, #24]
   11d08:	bl	1117c <dcgettext@plt>
   11d0c:	ldr	ip, [sp, #124]	; 0x7c
   11d10:	mov	r2, r5
   11d14:	movw	r1, #30436	; 0x76e4
   11d18:	add	r3, sp, #128	; 0x80
   11d1c:	movt	r1, #1
   11d20:	stm	sp, {r0, ip}
   11d24:	mov	r0, #1
   11d28:	bl	1132c <__printf_chk@plt>
   11d2c:	b	119c0 <__assert_fail@plt+0x58c>
   11d30:	ldr	r3, [sp, #80]	; 0x50
   11d34:	ldr	r0, [sp, #36]	; 0x24
   11d38:	str	r3, [sp, #52]	; 0x34
   11d3c:	bl	14524 <__assert_fail@plt+0x30f0>
   11d40:	subs	r6, r0, #0
   11d44:	beq	12214 <__assert_fail@plt+0xde0>
   11d48:	ldr	r3, [r8]
   11d4c:	cmp	r3, #0
   11d50:	movwgt	r5, #33088	; 0x8140
   11d54:	ldrgt	r7, [sp, #40]	; 0x28
   11d58:	movtgt	r5, #2
   11d5c:	bgt	11d74 <__assert_fail@plt+0x940>
   11d60:	b	11e84 <__assert_fail@plt+0xa50>
   11d64:	ldr	r3, [r8]
   11d68:	add	r7, r7, #1
   11d6c:	cmp	r7, r3
   11d70:	bge	11e84 <__assert_fail@plt+0xa50>
   11d74:	mov	r0, r7
   11d78:	bl	1270c <__assert_fail@plt+0x12d8>
   11d7c:	add	r2, r0, r0, lsl #1
   11d80:	mov	r0, r6
   11d84:	add	r3, r5, r2, lsl #3
   11d88:	ldr	r1, [r5, r2, lsl #3]
   11d8c:	vldr	d0, [r3, #8]
   11d90:	ldr	r2, [r3, #16]
   11d94:	bl	14654 <__assert_fail@plt+0x3220>
   11d98:	cmp	r0, #0
   11d9c:	bne	11d64 <__assert_fail@plt+0x930>
   11da0:	movw	r1, #30552	; 0x7758
   11da4:	mov	r2, #5
   11da8:	movt	r1, #1
   11dac:	bl	1117c <dcgettext@plt>
   11db0:	bl	1129c <warnx@plt>
   11db4:	mov	r0, r6
   11db8:	bl	14604 <__assert_fail@plt+0x31d0>
   11dbc:	b	119d8 <__assert_fail@plt+0x5a4>
   11dc0:	ldrb	r3, [sp, #160]	; 0xa0
   11dc4:	tst	r3, #1
   11dc8:	bne	12098 <__assert_fail@plt+0xc64>
   11dcc:	tst	r3, #4
   11dd0:	bne	12050 <__assert_fail@plt+0xc1c>
   11dd4:	tst	r3, #2
   11dd8:	beq	119cc <__assert_fail@plt+0x598>
   11ddc:	mov	r2, #5
   11de0:	movw	r1, #30456	; 0x76f8
   11de4:	mov	r0, #0
   11de8:	movt	r1, #1
   11dec:	bl	1117c <dcgettext@plt>
   11df0:	mov	r2, #5
   11df4:	movw	r1, #30504	; 0x7728
   11df8:	movt	r1, #1
   11dfc:	mov	r5, r0
   11e00:	mov	r0, #0
   11e04:	bl	1117c <dcgettext@plt>
   11e08:	mov	r1, r5
   11e0c:	ldr	r3, [sp, #104]	; 0x68
   11e10:	mov	r2, r0
   11e14:	mov	r0, #1
   11e18:	bl	1132c <__printf_chk@plt>
   11e1c:	b	119cc <__assert_fail@plt+0x598>
   11e20:	bl	112b4 <__errno_location@plt>
   11e24:	mov	r2, #5
   11e28:	movw	r1, #30180	; 0x75e4
   11e2c:	movt	r1, #1
   11e30:	ldr	r7, [r0]
   11e34:	mov	r0, #0
   11e38:	bl	1117c <dcgettext@plt>
   11e3c:	ldr	r1, [sp, #96]	; 0x60
   11e40:	bl	1138c <warn@plt>
   11e44:	mov	r0, r5
   11e48:	bl	11410 <close@plt>
   11e4c:	mov	r1, r6
   11e50:	mov	r2, #0
   11e54:	mov	r0, #2
   11e58:	bl	11134 <sigprocmask@plt>
   11e5c:	movw	r1, #30208	; 0x7600
   11e60:	mov	r0, #1
   11e64:	movt	r1, #1
   11e68:	ldr	r2, [sp, #84]	; 0x54
   11e6c:	bl	1132c <__printf_chk@plt>
   11e70:	cmp	r7, #0
   11e74:	beq	11870 <__assert_fail@plt+0x43c>
   11e78:	mov	r2, #1
   11e7c:	str	r2, [sp, #64]	; 0x40
   11e80:	b	11870 <__assert_fail@plt+0x43c>
   11e84:	movw	r3, #29912	; 0x74d8
   11e88:	ldr	r7, [sp, #120]	; 0x78
   11e8c:	movt	r3, #1
   11e90:	ldr	r5, [pc, #1068]	; 122c4 <__assert_fail@plt+0xe90>
   11e94:	str	r3, [sp, #48]	; 0x30
   11e98:	str	r4, [sp, #72]	; 0x48
   11e9c:	b	11eb8 <__assert_fail@plt+0xa84>
   11ea0:	ldr	lr, [pc, #1056]	; 122c8 <__assert_fail@plt+0xe94>
   11ea4:	add	r5, r5, #12
   11ea8:	ldr	r3, [r5, #-20]	; 0xffffffec
   11eac:	cmp	r5, lr
   11eb0:	bic	r7, r7, r3
   11eb4:	beq	11fa0 <__assert_fail@plt+0xb6c>
   11eb8:	ldr	r3, [sp, #52]	; 0x34
   11ebc:	cmp	r3, #0
   11ec0:	beq	11ed4 <__assert_fail@plt+0xaa0>
   11ec4:	ldr	r3, [r5, #-8]
   11ec8:	ldr	lr, [sp, #52]	; 0x34
   11ecc:	tst	lr, r3
   11ed0:	beq	11ea0 <__assert_fail@plt+0xa6c>
   11ed4:	ldr	r3, [r5, #-8]
   11ed8:	tst	r7, r3
   11edc:	beq	11ea0 <__assert_fail@plt+0xa6c>
   11ee0:	mov	r0, r6
   11ee4:	mov	r1, #0
   11ee8:	bl	146e4 <__assert_fail@plt+0x32b0>
   11eec:	subs	fp, r0, #0
   11ef0:	beq	121d8 <__assert_fail@plt+0xda4>
   11ef4:	ldr	r3, [r8]
   11ef8:	cmp	r3, #0
   11efc:	movgt	r4, #0
   11f00:	ble	11ea0 <__assert_fail@plt+0xa6c>
   11f04:	mov	r0, r4
   11f08:	bl	1270c <__assert_fail@plt+0x12d8>
   11f0c:	cmp	r0, #4
   11f10:	ldrls	pc, [pc, r0, lsl #2]
   11f14:	b	11f44 <__assert_fail@plt+0xb10>
   11f18:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11f1c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11f20:	andeq	r1, r1, r4, ror pc
   11f24:	andeq	r1, r1, r8, asr pc
   11f28:	andeq	r1, r1, ip, lsr #30
   11f2c:	ldr	r2, [sp, #96]	; 0x60
   11f30:	cmp	r2, #0
   11f34:	beq	11f44 <__assert_fail@plt+0xb10>
   11f38:	mov	r0, fp
   11f3c:	mov	r1, r4
   11f40:	bl	147f0 <__assert_fail@plt+0x33bc>
   11f44:	ldr	r3, [r8]
   11f48:	add	r4, r4, #1
   11f4c:	cmp	r4, r3
   11f50:	blt	11f04 <__assert_fail@plt+0xad0>
   11f54:	b	11ea0 <__assert_fail@plt+0xa6c>
   11f58:	ldr	r2, [r5, #-8]
   11f5c:	ldr	r3, [sp, #116]	; 0x74
   11f60:	tst	r2, r3
   11f64:	ldr	r2, [sp, #56]	; 0x38
   11f68:	ldr	r3, [sp, #48]	; 0x30
   11f6c:	moveq	r2, r3
   11f70:	b	11f38 <__assert_fail@plt+0xb04>
   11f74:	ldr	r2, [r5, #-8]
   11f78:	ldr	r3, [sp, #112]	; 0x70
   11f7c:	tst	r2, r3
   11f80:	ldr	r2, [sp, #56]	; 0x38
   11f84:	ldr	r3, [sp, #48]	; 0x30
   11f88:	moveq	r2, r3
   11f8c:	b	11f38 <__assert_fail@plt+0xb04>
   11f90:	ldr	r2, [r5]
   11f94:	b	11f30 <__assert_fail@plt+0xafc>
   11f98:	ldr	r2, [r5, #-4]
   11f9c:	b	11f30 <__assert_fail@plt+0xafc>
   11fa0:	cmp	r7, #0
   11fa4:	ldr	r4, [sp, #72]	; 0x48
   11fa8:	bne	1202c <__assert_fail@plt+0xbf8>
   11fac:	mov	r0, r6
   11fb0:	bl	14e8c <__assert_fail@plt+0x3a58>
   11fb4:	b	11db4 <__assert_fail@plt+0x980>
   11fb8:	bl	112b4 <__errno_location@plt>
   11fbc:	ldr	r3, [r0]
   11fc0:	cmp	r3, #16
   11fc4:	beq	121f0 <__assert_fail@plt+0xdbc>
   11fc8:	mov	r2, #5
   11fcc:	movw	r1, #30132	; 0x75b4
   11fd0:	mov	r0, #0
   11fd4:	movt	r1, #1
   11fd8:	bl	1117c <dcgettext@plt>
   11fdc:	ldr	r1, [sp, #96]	; 0x60
   11fe0:	bl	1138c <warn@plt>
   11fe4:	mov	r3, #1
   11fe8:	str	r3, [sp, #64]	; 0x40
   11fec:	b	119d8 <__assert_fail@plt+0x5a4>
   11ff0:	ldr	r2, [sp, #124]	; 0x7c
   11ff4:	movw	r1, #30288	; 0x7650
   11ff8:	mov	r0, #1
   11ffc:	movt	r1, #1
   12000:	movw	r6, #33232	; 0x81d0
   12004:	movt	r6, #2
   12008:	bl	1132c <__printf_chk@plt>
   1200c:	movw	r1, #30304	; 0x7660
   12010:	mov	r0, #1
   12014:	movt	r1, #1
   12018:	bl	1132c <__printf_chk@plt>
   1201c:	ldr	r1, [r6]
   12020:	add	r0, sp, #128	; 0x80
   12024:	bl	14884 <__assert_fail@plt+0x3450>
   12028:	b	11b38 <__assert_fail@plt+0x704>
   1202c:	mov	r2, #5
   12030:	movw	r1, #30620	; 0x779c
   12034:	mov	r0, #0
   12038:	movt	r1, #1
   1203c:	bl	1117c <dcgettext@plt>
   12040:	mov	r2, r7
   12044:	ldr	r1, [sp, #96]	; 0x60
   12048:	bl	1129c <warnx@plt>
   1204c:	b	11fac <__assert_fail@plt+0xb78>
   12050:	mov	r2, #5
   12054:	movw	r1, #30456	; 0x76f8
   12058:	mov	r0, #0
   1205c:	movt	r1, #1
   12060:	bl	1117c <dcgettext@plt>
   12064:	mov	r2, #5
   12068:	movw	r1, #30488	; 0x7718
   1206c:	movt	r1, #1
   12070:	mov	r5, r0
   12074:	mov	r0, #0
   12078:	bl	1117c <dcgettext@plt>
   1207c:	ldr	r3, [sp, #108]	; 0x6c
   12080:	mov	r1, r5
   12084:	mov	r2, r0
   12088:	mov	r0, #1
   1208c:	bl	1132c <__printf_chk@plt>
   12090:	ldrb	r3, [sp, #160]	; 0xa0
   12094:	b	11dd4 <__assert_fail@plt+0x9a0>
   12098:	mov	r0, r2
   1209c:	movw	r1, #30456	; 0x76f8
   120a0:	mov	r2, #5
   120a4:	movt	r1, #1
   120a8:	bl	1117c <dcgettext@plt>
   120ac:	mov	r2, #5
   120b0:	movw	r1, #30476	; 0x770c
   120b4:	movt	r1, #1
   120b8:	mov	r5, r0
   120bc:	ldr	r0, [sp, #28]
   120c0:	bl	1117c <dcgettext@plt>
   120c4:	ldr	r3, [sp, #100]	; 0x64
   120c8:	mov	r1, r5
   120cc:	mov	r2, r0
   120d0:	mov	r0, #1
   120d4:	bl	1132c <__printf_chk@plt>
   120d8:	ldrb	r3, [sp, #160]	; 0xa0
   120dc:	b	11dcc <__assert_fail@plt+0x998>
   120e0:	movw	r4, #33228	; 0x81cc
   120e4:	movt	r4, #2
   120e8:	mov	r0, #0
   120ec:	mov	r2, #5
   120f0:	movw	r1, #29956	; 0x7504
   120f4:	movt	r1, #1
   120f8:	ldr	r6, [r4]
   120fc:	mov	r5, r0
   12100:	bl	1117c <dcgettext@plt>
   12104:	movw	r3, #33208	; 0x81b8
   12108:	movt	r3, #2
   1210c:	mov	r1, #1
   12110:	ldr	r3, [r3]
   12114:	mov	r2, r0
   12118:	mov	r0, r6
   1211c:	bl	11350 <__fprintf_chk@plt>
   12120:	ldr	r1, [r7, r5]
   12124:	cmp	r1, #0
   12128:	beq	1217c <__assert_fail@plt+0xd48>
   1212c:	cmp	r1, #102	; 0x66
   12130:	beq	121b8 <__assert_fail@plt+0xd84>
   12134:	ldr	r2, [pc, #372]	; 122b0 <__assert_fail@plt+0xe7c>
   12138:	b	1214c <__assert_fail@plt+0xd18>
   1213c:	add	r2, r2, #16
   12140:	ldr	r0, [r2, #12]
   12144:	cmp	r0, r1
   12148:	beq	121c0 <__assert_fail@plt+0xd8c>
   1214c:	ldr	r3, [r2, #16]
   12150:	cmp	r3, #0
   12154:	bne	1213c <__assert_fail@plt+0xd08>
   12158:	mov	r3, r1
   1215c:	movw	r2, #30644	; 0x77b4
   12160:	ldr	r0, [r4]
   12164:	movt	r2, #1
   12168:	mov	r1, #1
   1216c:	bl	11350 <__fprintf_chk@plt>
   12170:	add	r5, r5, #4
   12174:	cmp	r5, #60	; 0x3c
   12178:	bne	12120 <__assert_fail@plt+0xcec>
   1217c:	mov	r2, #5
   12180:	movw	r1, #29972	; 0x7514
   12184:	mov	r0, #0
   12188:	movt	r1, #1
   1218c:	ldr	r5, [r4]
   12190:	bl	1117c <dcgettext@plt>
   12194:	mov	r1, #1
   12198:	mov	r2, r0
   1219c:	mov	r0, r5
   121a0:	bl	11350 <__fprintf_chk@plt>
   121a4:	ldr	r1, [r4]
   121a8:	mov	r0, #10
   121ac:	bl	113a4 <fputc@plt>
   121b0:	mov	r0, #1
   121b4:	bl	11260 <exit@plt>
   121b8:	movw	r3, #29916	; 0x74dc
   121bc:	movt	r3, #1
   121c0:	movw	r2, #30652	; 0x77bc
   121c4:	ldr	r0, [r4]
   121c8:	movt	r2, #1
   121cc:	mov	r1, #1
   121d0:	bl	11350 <__fprintf_chk@plt>
   121d4:	b	12170 <__assert_fail@plt+0xd3c>
   121d8:	mov	r2, #5
   121dc:	movw	r1, #30588	; 0x777c
   121e0:	movt	r1, #1
   121e4:	bl	1117c <dcgettext@plt>
   121e8:	bl	1138c <warn@plt>
   121ec:	b	11ea0 <__assert_fail@plt+0xa6c>
   121f0:	mov	r2, #5
   121f4:	movw	r1, #30088	; 0x7588
   121f8:	mov	r0, #0
   121fc:	movt	r1, #1
   12200:	bl	1117c <dcgettext@plt>
   12204:	ldr	r1, [sp, #96]	; 0x60
   12208:	bl	1129c <warnx@plt>
   1220c:	b	11fc8 <__assert_fail@plt+0xb94>
   12210:	bl	11188 <__stack_chk_fail@plt>
   12214:	mov	r2, #5
   12218:	movw	r1, #30516	; 0x7734
   1221c:	movt	r1, #1
   12220:	bl	1117c <dcgettext@plt>
   12224:	bl	1138c <warn@plt>
   12228:	b	119d8 <__assert_fail@plt+0x5a4>
   1222c:	bl	112b4 <__errno_location@plt>
   12230:	ldr	r3, [r0]
   12234:	cmp	r3, #16
   12238:	bne	12258 <__assert_fail@plt+0xe24>
   1223c:	movw	r1, #30088	; 0x7588
   12240:	mov	r0, #0
   12244:	movt	r1, #1
   12248:	mov	r2, #5
   1224c:	bl	1117c <dcgettext@plt>
   12250:	ldr	r1, [sp, #96]	; 0x60
   12254:	bl	1129c <warnx@plt>
   12258:	mov	r2, #5
   1225c:	movw	r1, #30132	; 0x75b4
   12260:	mov	r0, #0
   12264:	movt	r1, #1
   12268:	bl	1117c <dcgettext@plt>
   1226c:	ldr	r1, [sp, #96]	; 0x60
   12270:	bl	1138c <warn@plt>
   12274:	b	11e78 <__assert_fail@plt+0xa44>
   12278:	movw	r0, #30076	; 0x757c
   1227c:	movw	r1, #29712	; 0x7410
   12280:	movt	r0, #1
   12284:	movt	r1, #1
   12288:	movw	r2, #297	; 0x129
   1228c:	ldr	r3, [pc, #56]	; 122cc <__assert_fail@plt+0xe98>
   12290:	bl	11434 <__assert_fail@plt>
   12294:	movw	r0, #30076	; 0x757c
   12298:	movw	r1, #29712	; 0x7410
   1229c:	movt	r0, #1
   122a0:	movt	r1, #1
   122a4:	movw	r2, #351	; 0x15f
   122a8:	ldr	r3, [pc, #32]	; 122d0 <__assert_fail@plt+0xe9c>
   122ac:	bl	11434 <__assert_fail@plt>
   122b0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   122b4:	andeq	r6, r1, ip, asr pc
   122b8:	andeq	r8, r2, r4, ror #3
   122bc:	andeq	r7, r1, sl, lsl #1
   122c0:	andeq	r7, r1, r9, ror r0
   122c4:	andeq	r6, r1, r4, lsl #29
   122c8:	andeq	r6, r1, r4, lsl pc
   122cc:	andeq	r7, r1, ip, rrx
   122d0:	andeq	r7, r1, ip, ror r0
   122d4:	mov	fp, #0
   122d8:	mov	lr, #0
   122dc:	pop	{r1}		; (ldr r1, [sp], #4)
   122e0:	mov	r2, sp
   122e4:	push	{r2}		; (str r2, [sp, #-4]!)
   122e8:	push	{r0}		; (str r0, [sp, #-4]!)
   122ec:	ldr	ip, [pc, #16]	; 12304 <__assert_fail@plt+0xed0>
   122f0:	push	{ip}		; (str ip, [sp, #-4]!)
   122f4:	ldr	r0, [pc, #12]	; 12308 <__assert_fail@plt+0xed4>
   122f8:	ldr	r3, [pc, #12]	; 1230c <__assert_fail@plt+0xed8>
   122fc:	bl	11224 <__libc_start_main@plt>
   12300:	bl	11404 <abort@plt>
   12304:	andeq	r6, r1, ip, lsr lr
   12308:	andeq	r1, r1, r0, asr #8
   1230c:	ldrdeq	r6, [r1], -r8
   12310:	ldr	r3, [pc, #20]	; 1232c <__assert_fail@plt+0xef8>
   12314:	ldr	r2, [pc, #20]	; 12330 <__assert_fail@plt+0xefc>
   12318:	add	r3, pc, r3
   1231c:	ldr	r2, [r3, r2]
   12320:	cmp	r2, #0
   12324:	bxeq	lr
   12328:	b	11230 <__gmon_start__@plt>
   1232c:	andeq	r5, r1, r0, ror #25
   12330:	andeq	r0, r0, ip, lsr #2
   12334:	push	{r3, lr}
   12338:	movw	r0, #33208	; 0x81b8
   1233c:	ldr	r3, [pc, #36]	; 12368 <__assert_fail@plt+0xf34>
   12340:	movt	r0, #2
   12344:	rsb	r3, r0, r3
   12348:	cmp	r3, #6
   1234c:	popls	{r3, pc}
   12350:	movw	r3, #0
   12354:	movt	r3, #0
   12358:	cmp	r3, #0
   1235c:	popeq	{r3, pc}
   12360:	blx	r3
   12364:	pop	{r3, pc}
   12368:			; <UNDEFINED> instruction: 0x000281bb
   1236c:	push	{r3, lr}
   12370:	movw	r0, #33208	; 0x81b8
   12374:	movw	r3, #33208	; 0x81b8
   12378:	movt	r0, #2
   1237c:	movt	r3, #2
   12380:	rsb	r3, r0, r3
   12384:	asr	r3, r3, #2
   12388:	add	r3, r3, r3, lsr #31
   1238c:	asrs	r1, r3, #1
   12390:	popeq	{r3, pc}
   12394:	movw	r2, #0
   12398:	movt	r2, #0
   1239c:	cmp	r2, #0
   123a0:	popeq	{r3, pc}
   123a4:	blx	r2
   123a8:	pop	{r3, pc}
   123ac:	push	{r4, lr}
   123b0:	movw	r4, #33244	; 0x81dc
   123b4:	movt	r4, #2
   123b8:	ldrb	r3, [r4]
   123bc:	cmp	r3, #0
   123c0:	popne	{r4, pc}
   123c4:	bl	12334 <__assert_fail@plt+0xf00>
   123c8:	mov	r3, #1
   123cc:	strb	r3, [r4]
   123d0:	pop	{r4, pc}
   123d4:	movw	r0, #32492	; 0x7eec
   123d8:	movt	r0, #2
   123dc:	push	{r3, lr}
   123e0:	ldr	r3, [r0]
   123e4:	cmp	r3, #0
   123e8:	beq	12400 <__assert_fail@plt+0xfcc>
   123ec:	movw	r3, #0
   123f0:	movt	r3, #0
   123f4:	cmp	r3, #0
   123f8:	beq	12400 <__assert_fail@plt+0xfcc>
   123fc:	blx	r3
   12400:	pop	{r3, lr}
   12404:	b	1236c <__assert_fail@plt+0xf38>
   12408:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1240c:	mov	r4, #0
   12410:	movw	r9, #28284	; 0x6e7c
   12414:	movt	r9, #1
   12418:	mov	sl, r0
   1241c:	mov	r8, r1
   12420:	mov	r7, r4
   12424:	add	r3, r9, r4
   12428:	mov	r0, sl
   1242c:	mov	r2, r8
   12430:	movw	r5, #28284	; 0x6e7c
   12434:	ldr	r6, [r3, #4]
   12438:	add	r4, r4, #12
   1243c:	movt	r5, #1
   12440:	mov	r1, r6
   12444:	bl	112c0 <strncasecmp@plt>
   12448:	cmp	r0, #0
   1244c:	bne	1245c <__assert_fail@plt+0x1028>
   12450:	ldrsb	r3, [r6, r8]
   12454:	cmp	r3, #0
   12458:	beq	1248c <__assert_fail@plt+0x1058>
   1245c:	cmp	r4, #144	; 0x90
   12460:	add	r7, r7, #1
   12464:	bne	12424 <__assert_fail@plt+0xff0>
   12468:	mov	r2, #5
   1246c:	movw	r1, #28812	; 0x708c
   12470:	mov	r0, #0
   12474:	movt	r1, #1
   12478:	bl	1117c <dcgettext@plt>
   1247c:	mov	r1, sl
   12480:	bl	1129c <warnx@plt>
   12484:	mvn	r0, #0
   12488:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1248c:	add	r7, r7, r7, lsl #1
   12490:	ldr	r0, [r5, r7, lsl #2]
   12494:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12498:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1249c:	mov	r4, #0
   124a0:	movw	r8, #33088	; 0x8140
   124a4:	movt	r8, #2
   124a8:	mov	r9, r0
   124ac:	mov	r7, r1
   124b0:	mov	r6, r4
   124b4:	ldr	r5, [r8, r4]
   124b8:	mov	r0, r9
   124bc:	mov	r2, r7
   124c0:	add	r4, r4, #24
   124c4:	mov	r1, r5
   124c8:	bl	112c0 <strncasecmp@plt>
   124cc:	cmp	r0, #0
   124d0:	bne	124e0 <__assert_fail@plt+0x10ac>
   124d4:	ldrsb	r3, [r5, r7]
   124d8:	cmp	r3, #0
   124dc:	beq	12510 <__assert_fail@plt+0x10dc>
   124e0:	cmp	r4, #120	; 0x78
   124e4:	add	r6, r6, #1
   124e8:	bne	124b4 <__assert_fail@plt+0x1080>
   124ec:	mov	r2, #5
   124f0:	movw	r1, #28832	; 0x70a0
   124f4:	mov	r0, #0
   124f8:	movt	r1, #1
   124fc:	bl	1117c <dcgettext@plt>
   12500:	mov	r1, r9
   12504:	bl	1129c <warnx@plt>
   12508:	mvn	r0, #0
   1250c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12510:	mov	r0, r6
   12514:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12518:	push	{r4, r5, r6, r7, lr}
   1251c:	mov	r2, #5
   12520:	sub	sp, sp, #12
   12524:	mov	r5, r0
   12528:	movw	r1, #28852	; 0x70b4
   1252c:	mov	r0, #0
   12530:	movt	r1, #1
   12534:	movw	r4, #33088	; 0x8140
   12538:	bl	1117c <dcgettext@plt>
   1253c:	mov	r1, r5
   12540:	bl	113ec <fputs@plt>
   12544:	mov	r2, #5
   12548:	movw	r1, #28864	; 0x70c0
   1254c:	mov	r0, #0
   12550:	movt	r1, #1
   12554:	movt	r4, #2
   12558:	bl	1117c <dcgettext@plt>
   1255c:	movw	r3, #33208	; 0x81b8
   12560:	movt	r3, #2
   12564:	mov	r1, #1
   12568:	add	r7, r4, #120	; 0x78
   1256c:	ldr	r3, [r3]
   12570:	mov	r2, r0
   12574:	mov	r0, r5
   12578:	bl	11350 <__fprintf_chk@plt>
   1257c:	mov	r2, #5
   12580:	movw	r1, #28896	; 0x70e0
   12584:	mov	r0, #0
   12588:	movt	r1, #1
   1258c:	bl	1117c <dcgettext@plt>
   12590:	mov	r1, r5
   12594:	bl	113ec <fputs@plt>
   12598:	mov	r2, #5
   1259c:	movw	r1, #28908	; 0x70ec
   125a0:	mov	r0, #0
   125a4:	movt	r1, #1
   125a8:	bl	1117c <dcgettext@plt>
   125ac:	mov	r1, r5
   125b0:	bl	113ec <fputs@plt>
   125b4:	mov	r2, #5
   125b8:	movw	r1, #28892	; 0x70dc
   125bc:	mov	r0, #0
   125c0:	movt	r1, #1
   125c4:	bl	1117c <dcgettext@plt>
   125c8:	mov	r1, r5
   125cc:	bl	113ec <fputs@plt>
   125d0:	mov	r2, #5
   125d4:	movw	r1, #29480	; 0x7328
   125d8:	mov	r0, #0
   125dc:	movt	r1, #1
   125e0:	bl	1117c <dcgettext@plt>
   125e4:	mov	r1, r5
   125e8:	bl	113ec <fputs@plt>
   125ec:	mov	r2, #5
   125f0:	movw	r1, #29524	; 0x7354
   125f4:	mov	r0, #0
   125f8:	movt	r1, #1
   125fc:	bl	1117c <dcgettext@plt>
   12600:	mov	r1, r5
   12604:	bl	113ec <fputs@plt>
   12608:	mov	r2, #5
   1260c:	movw	r1, #28892	; 0x70dc
   12610:	mov	r0, #0
   12614:	movt	r1, #1
   12618:	bl	1117c <dcgettext@plt>
   1261c:	mov	r1, r5
   12620:	bl	113ec <fputs@plt>
   12624:	mov	r2, #5
   12628:	movw	r1, #29580	; 0x738c
   1262c:	mov	r0, #0
   12630:	movt	r1, #1
   12634:	bl	1117c <dcgettext@plt>
   12638:	mov	r1, #1
   1263c:	movw	r3, #29608	; 0x73a8
   12640:	movt	r3, #1
   12644:	mov	r2, r0
   12648:	mov	r0, r5
   1264c:	bl	11350 <__fprintf_chk@plt>
   12650:	mov	r2, #5
   12654:	movw	r1, #28892	; 0x70dc
   12658:	mov	r0, #0
   1265c:	movt	r1, #1
   12660:	bl	1117c <dcgettext@plt>
   12664:	mov	r1, r5
   12668:	bl	113ec <fputs@plt>
   1266c:	movw	r1, #29624	; 0x73b8
   12670:	mov	r0, #0
   12674:	movt	r1, #1
   12678:	mov	r2, #5
   1267c:	bl	1117c <dcgettext@plt>
   12680:	mov	r1, r5
   12684:	bl	113ec <fputs@plt>
   12688:	ldr	r1, [r4, #20]
   1268c:	mov	r2, #5
   12690:	mov	r0, #0
   12694:	ldr	r6, [r4]
   12698:	bl	1117c <dcgettext@plt>
   1269c:	add	r4, r4, #24
   126a0:	movw	r2, #29644	; 0x73cc
   126a4:	mov	r1, #1
   126a8:	mov	r3, r6
   126ac:	movt	r2, #1
   126b0:	str	r0, [sp]
   126b4:	mov	r0, r5
   126b8:	bl	11350 <__fprintf_chk@plt>
   126bc:	cmp	r4, r7
   126c0:	bne	12688 <__assert_fail@plt+0x1254>
   126c4:	mov	r2, #5
   126c8:	movw	r1, #29656	; 0x73d8
   126cc:	mov	r0, #0
   126d0:	movt	r1, #1
   126d4:	bl	1117c <dcgettext@plt>
   126d8:	movw	r3, #29684	; 0x73f4
   126dc:	mov	r1, #1
   126e0:	movt	r3, #1
   126e4:	mov	r2, r0
   126e8:	mov	r0, r5
   126ec:	bl	11350 <__fprintf_chk@plt>
   126f0:	movw	r3, #33228	; 0x81cc
   126f4:	movt	r3, #2
   126f8:	ldr	r0, [r3]
   126fc:	subs	r3, r5, r0
   12700:	rsbs	r0, r3, #0
   12704:	adcs	r0, r0, r3
   12708:	bl	11260 <exit@plt>
   1270c:	push	{r3, lr}
   12710:	movw	r3, #33248	; 0x81e0
   12714:	movt	r3, #2
   12718:	ldr	r2, [r3]
   1271c:	cmp	r2, r0
   12720:	ble	12750 <__assert_fail@plt+0x131c>
   12724:	add	r3, r3, r0, lsl #2
   12728:	ldr	r0, [r3, #4]
   1272c:	cmp	r0, #4
   12730:	pople	{r3, pc}
   12734:	movw	r0, #29732	; 0x7424
   12738:	movw	r1, #29712	; 0x7410
   1273c:	movt	r0, #1
   12740:	movt	r1, #1
   12744:	mov	r2, #152	; 0x98
   12748:	ldr	r3, [pc, #28]	; 1276c <__assert_fail@plt+0x1338>
   1274c:	bl	11434 <__assert_fail@plt>
   12750:	movw	r0, #29696	; 0x7400
   12754:	movw	r1, #29712	; 0x7410
   12758:	movt	r0, #1
   1275c:	movt	r1, #1
   12760:	mov	r2, #151	; 0x97
   12764:	ldr	r3, [pc]	; 1276c <__assert_fail@plt+0x1338>
   12768:	bl	11434 <__assert_fail@plt>
   1276c:	andeq	r6, r1, ip, lsl #30
   12770:	movw	r3, #33232	; 0x81d0
   12774:	movt	r3, #2
   12778:	push	{r4, r5, r6, lr}
   1277c:	ldr	r4, [r3]
   12780:	mov	r0, r4
   12784:	bl	111dc <__fpending@plt>
   12788:	mov	r6, r0
   1278c:	mov	r0, r4
   12790:	bl	1114c <ferror@plt>
   12794:	mov	r5, r0
   12798:	mov	r0, r4
   1279c:	bl	1135c <fclose@plt>
   127a0:	adds	r4, r0, #0
   127a4:	movne	r4, #1
   127a8:	cmp	r5, #0
   127ac:	bne	12824 <__assert_fail@plt+0x13f0>
   127b0:	cmp	r4, #0
   127b4:	beq	127d0 <__assert_fail@plt+0x139c>
   127b8:	cmp	r6, #0
   127bc:	beq	12874 <__assert_fail@plt+0x1440>
   127c0:	bl	112b4 <__errno_location@plt>
   127c4:	ldr	r3, [r0]
   127c8:	cmp	r3, #32
   127cc:	bne	12888 <__assert_fail@plt+0x1454>
   127d0:	movw	r3, #33228	; 0x81cc
   127d4:	movt	r3, #2
   127d8:	ldr	r4, [r3]
   127dc:	mov	r0, r4
   127e0:	bl	111dc <__fpending@plt>
   127e4:	mov	r6, r0
   127e8:	mov	r0, r4
   127ec:	bl	1114c <ferror@plt>
   127f0:	mov	r5, r0
   127f4:	mov	r0, r4
   127f8:	bl	1135c <fclose@plt>
   127fc:	adds	r4, r0, #0
   12800:	movne	r4, #1
   12804:	cmp	r5, #0
   12808:	beq	12850 <__assert_fail@plt+0x141c>
   1280c:	cmp	r4, #0
   12810:	bne	1281c <__assert_fail@plt+0x13e8>
   12814:	bl	112b4 <__errno_location@plt>
   12818:	str	r4, [r0]
   1281c:	mov	r0, #1
   12820:	bl	11158 <_exit@plt>
   12824:	cmp	r4, #0
   12828:	bne	127c0 <__assert_fail@plt+0x138c>
   1282c:	bl	112b4 <__errno_location@plt>
   12830:	str	r4, [r0]
   12834:	mov	r2, #5
   12838:	movw	r1, #29896	; 0x74c8
   1283c:	mov	r0, #0
   12840:	movt	r1, #1
   12844:	bl	1117c <dcgettext@plt>
   12848:	bl	1129c <warnx@plt>
   1284c:	b	1281c <__assert_fail@plt+0x13e8>
   12850:	cmp	r4, #0
   12854:	popeq	{r4, r5, r6, pc}
   12858:	cmp	r6, #0
   1285c:	bne	1281c <__assert_fail@plt+0x13e8>
   12860:	bl	112b4 <__errno_location@plt>
   12864:	ldr	r3, [r0]
   12868:	cmp	r3, #9
   1286c:	bne	1281c <__assert_fail@plt+0x13e8>
   12870:	pop	{r4, r5, r6, pc}
   12874:	bl	112b4 <__errno_location@plt>
   12878:	ldr	r3, [r0]
   1287c:	cmp	r3, #9
   12880:	bne	127c8 <__assert_fail@plt+0x1394>
   12884:	b	127d0 <__assert_fail@plt+0x139c>
   12888:	cmp	r3, #0
   1288c:	beq	12834 <__assert_fail@plt+0x1400>
   12890:	mov	r2, #5
   12894:	movw	r1, #29896	; 0x74c8
   12898:	mov	r0, #0
   1289c:	movt	r1, #1
   128a0:	bl	1117c <dcgettext@plt>
   128a4:	bl	1138c <warn@plt>
   128a8:	b	1281c <__assert_fail@plt+0x13e8>
   128ac:	andeq	r0, r0, r0
   128b0:	cmp	r0, #0
   128b4:	mov	r3, #0
   128b8:	str	r3, [r1]
   128bc:	bxeq	lr
   128c0:	ldrb	r2, [r0]
   128c4:	cmp	r2, #47	; 0x2f
   128c8:	bne	12910 <__assert_fail@plt+0x14dc>
   128cc:	ldrsb	r3, [r0, #1]
   128d0:	cmp	r3, #47	; 0x2f
   128d4:	bne	12918 <__assert_fail@plt+0x14e4>
   128d8:	mov	r3, r0
   128dc:	b	128fc <__assert_fail@plt+0x14c8>
   128e0:	ldrb	r2, [r3, #1]
   128e4:	mov	r3, r0
   128e8:	cmp	r2, #47	; 0x2f
   128ec:	bne	12910 <__assert_fail@plt+0x14dc>
   128f0:	ldrsb	r2, [r0, #1]
   128f4:	cmp	r2, #47	; 0x2f
   128f8:	bne	12918 <__assert_fail@plt+0x14e4>
   128fc:	cmn	r3, #1
   12900:	add	r0, r0, #1
   12904:	bne	128e0 <__assert_fail@plt+0x14ac>
   12908:	mov	r0, #0
   1290c:	bx	lr
   12910:	cmp	r2, #0
   12914:	beq	12908 <__assert_fail@plt+0x14d4>
   12918:	mov	r3, #1
   1291c:	str	r3, [r1]
   12920:	ldrsb	r3, [r0, #1]
   12924:	cmp	r3, #47	; 0x2f
   12928:	cmpne	r3, #0
   1292c:	bxeq	lr
   12930:	mov	r3, #2
   12934:	str	r3, [r1]
   12938:	ldrb	r2, [r0, r3]
   1293c:	add	r3, r3, #1
   12940:	cmp	r2, #47	; 0x2f
   12944:	cmpne	r2, #0
   12948:	bne	12934 <__assert_fail@plt+0x1500>
   1294c:	bx	lr
   12950:	push	{r3, r4, r5, r6, r7, lr}
   12954:	mov	r7, r1
   12958:	ldrb	r3, [r0]
   1295c:	cmp	r3, #0
   12960:	beq	129d8 <__assert_fail@plt+0x15a4>
   12964:	mov	r4, #0
   12968:	mov	r5, r0
   1296c:	mov	r6, r4
   12970:	b	129a0 <__assert_fail@plt+0x156c>
   12974:	cmp	r3, #92	; 0x5c
   12978:	mov	r0, r7
   1297c:	mov	r1, r3
   12980:	beq	129c8 <__assert_fail@plt+0x1594>
   12984:	bl	11290 <strchr@plt>
   12988:	cmp	r0, #0
   1298c:	bne	129d0 <__assert_fail@plt+0x159c>
   12990:	ldrb	r3, [r5, #1]!
   12994:	add	r4, r4, #1
   12998:	cmp	r3, #0
   1299c:	beq	129c0 <__assert_fail@plt+0x158c>
   129a0:	cmp	r6, #0
   129a4:	sxtb	r3, r3
   129a8:	beq	12974 <__assert_fail@plt+0x1540>
   129ac:	ldrb	r3, [r5, #1]!
   129b0:	mov	r6, #0
   129b4:	add	r4, r4, #1
   129b8:	cmp	r3, #0
   129bc:	bne	129a0 <__assert_fail@plt+0x156c>
   129c0:	rsb	r0, r6, r4
   129c4:	pop	{r3, r4, r5, r6, r7, pc}
   129c8:	mov	r6, #1
   129cc:	b	12990 <__assert_fail@plt+0x155c>
   129d0:	mov	r0, r4
   129d4:	pop	{r3, r4, r5, r6, r7, pc}
   129d8:	mov	r0, r3
   129dc:	pop	{r3, r4, r5, r6, r7, pc}
   129e0:	ldr	r3, [pc, #224]	; 12ac8 <__assert_fail@plt+0x1694>
   129e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   129e8:	mov	r6, r0
   129ec:	ldr	r0, [pc, #216]	; 12acc <__assert_fail@plt+0x1698>
   129f0:	add	r3, pc, r3
   129f4:	sub	sp, sp, #12
   129f8:	mov	r4, #0
   129fc:	mov	r9, r1
   12a00:	mov	r5, r2
   12a04:	ldr	r8, [r3, r0]
   12a08:	str	r4, [sp]
   12a0c:	ldr	r3, [r8]
   12a10:	str	r3, [sp, #4]
   12a14:	bl	112b4 <__errno_location@plt>
   12a18:	cmp	r6, r4
   12a1c:	mov	r7, r0
   12a20:	str	r4, [r0]
   12a24:	beq	12a34 <__assert_fail@plt+0x1600>
   12a28:	ldrsb	r3, [r6]
   12a2c:	cmp	r3, r4
   12a30:	bne	12a4c <__assert_fail@plt+0x1618>
   12a34:	ldr	r1, [pc, #148]	; 12ad0 <__assert_fail@plt+0x169c>
   12a38:	mov	r2, r9
   12a3c:	mov	r3, r6
   12a40:	mov	r0, #1
   12a44:	add	r1, pc, r1
   12a48:	bl	11380 <errx@plt>
   12a4c:	mov	r3, r4
   12a50:	mov	r2, r5
   12a54:	mov	r0, r6
   12a58:	mov	r1, sp
   12a5c:	bl	11170 <__strtoull_internal@plt>
   12a60:	ldr	r3, [r7]
   12a64:	cmp	r3, r4
   12a68:	bne	12aa4 <__assert_fail@plt+0x1670>
   12a6c:	ldr	r3, [sp]
   12a70:	cmp	r6, r3
   12a74:	beq	12a34 <__assert_fail@plt+0x1600>
   12a78:	cmp	r3, r4
   12a7c:	beq	12a8c <__assert_fail@plt+0x1658>
   12a80:	ldrsb	r3, [r3]
   12a84:	cmp	r3, r4
   12a88:	bne	12a34 <__assert_fail@plt+0x1600>
   12a8c:	ldr	r2, [sp, #4]
   12a90:	ldr	r3, [r8]
   12a94:	cmp	r2, r3
   12a98:	bne	12ac4 <__assert_fail@plt+0x1690>
   12a9c:	add	sp, sp, #12
   12aa0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12aa4:	cmp	r3, #34	; 0x22
   12aa8:	bne	12a34 <__assert_fail@plt+0x1600>
   12aac:	ldr	r1, [pc, #32]	; 12ad4 <__assert_fail@plt+0x16a0>
   12ab0:	mov	r2, r9
   12ab4:	mov	r3, r6
   12ab8:	mov	r0, #1
   12abc:	add	r1, pc, r1
   12ac0:	bl	111ac <err@plt>
   12ac4:	bl	11188 <__stack_chk_fail@plt>
   12ac8:	andeq	r5, r1, r8, lsl #12
   12acc:	andeq	r0, r0, r8, lsr #2
   12ad0:	andeq	r5, r0, r0
   12ad4:	andeq	r4, r0, r8, lsl #31
   12ad8:	ldr	r3, [pc, #596]	; 12d34 <__assert_fail@plt+0x1900>
   12adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae0:	add	r3, pc, r3
   12ae4:	subs	r6, r0, #0
   12ae8:	ldr	r0, [pc, #584]	; 12d38 <__assert_fail@plt+0x1904>
   12aec:	mov	r8, r1
   12af0:	mov	r1, r3
   12af4:	sub	sp, sp, #20
   12af8:	mov	r9, r2
   12afc:	ldr	sl, [r1, r0]
   12b00:	mov	r2, #0
   12b04:	mov	r3, #0
   12b08:	ldr	r1, [sl]
   12b0c:	strd	r2, [r8]
   12b10:	str	r1, [sp, #12]
   12b14:	beq	12bfc <__assert_fail@plt+0x17c8>
   12b18:	ldrb	r5, [r6]
   12b1c:	cmp	r5, #0
   12b20:	beq	12bfc <__assert_fail@plt+0x17c8>
   12b24:	str	r6, [sp, #8]
   12b28:	bl	11254 <__ctype_b_loc@plt>
   12b2c:	mov	r3, r6
   12b30:	ldr	r1, [r0]
   12b34:	b	12b48 <__assert_fail@plt+0x1714>
   12b38:	add	r2, r3, #1
   12b3c:	str	r2, [sp, #8]
   12b40:	ldrb	r5, [r3, #1]
   12b44:	mov	r3, r2
   12b48:	lsl	r2, r5, #1
   12b4c:	ldrh	r4, [r1, r2]
   12b50:	and	r4, r4, #8192	; 0x2000
   12b54:	uxth	r4, r4
   12b58:	cmp	r4, #0
   12b5c:	bne	12b38 <__assert_fail@plt+0x1704>
   12b60:	cmp	r5, #45	; 0x2d
   12b64:	beq	12bfc <__assert_fail@plt+0x17c8>
   12b68:	add	r5, sp, #16
   12b6c:	str	r4, [r5, #-8]!
   12b70:	bl	112b4 <__errno_location@plt>
   12b74:	mov	r2, r4
   12b78:	mov	r1, r5
   12b7c:	mov	r3, r4
   12b80:	mov	r7, r0
   12b84:	mov	r0, r6
   12b88:	str	r4, [r7]
   12b8c:	bl	11170 <__strtoull_internal@plt>
   12b90:	mov	r5, r1
   12b94:	ldr	r1, [sp, #8]
   12b98:	mov	r4, r0
   12b9c:	cmp	r1, r6
   12ba0:	beq	12bfc <__assert_fail@plt+0x17c8>
   12ba4:	ldr	r3, [r7]
   12ba8:	cmp	r3, #0
   12bac:	bne	12be0 <__assert_fail@plt+0x17ac>
   12bb0:	cmp	r1, #0
   12bb4:	beq	12ce4 <__assert_fail@plt+0x18b0>
   12bb8:	ldrb	r0, [r1]
   12bbc:	cmp	r0, #0
   12bc0:	bne	12c04 <__assert_fail@plt+0x17d0>
   12bc4:	strd	r4, [r8]
   12bc8:	ldr	r2, [sp, #12]
   12bcc:	ldr	r3, [sl]
   12bd0:	cmp	r2, r3
   12bd4:	bne	12d30 <__assert_fail@plt+0x18fc>
   12bd8:	add	sp, sp, #20
   12bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be0:	subs	r2, r4, #1
   12be4:	mvn	r6, #2
   12be8:	sbc	r3, r5, #0
   12bec:	mvn	r7, #0
   12bf0:	cmp	r3, r7
   12bf4:	cmpeq	r2, r6
   12bf8:	bls	12bb0 <__assert_fail@plt+0x177c>
   12bfc:	mvn	r0, #0
   12c00:	b	12bc8 <__assert_fail@plt+0x1794>
   12c04:	ldrb	r2, [r1, #1]
   12c08:	sxtb	r3, r2
   12c0c:	cmp	r3, #105	; 0x69
   12c10:	beq	12cec <__assert_fail@plt+0x18b8>
   12c14:	cmp	r3, #66	; 0x42
   12c18:	beq	12cc8 <__assert_fail@plt+0x1894>
   12c1c:	cmp	r2, #0
   12c20:	bne	12bfc <__assert_fail@plt+0x17c8>
   12c24:	mov	r6, #1024	; 0x400
   12c28:	ldr	r7, [pc, #268]	; 12d3c <__assert_fail@plt+0x1908>
   12c2c:	sxtb	r3, r0
   12c30:	str	r3, [sp, #4]
   12c34:	add	r7, pc, r7
   12c38:	mov	r1, r3
   12c3c:	mov	r0, r7
   12c40:	bl	11290 <strchr@plt>
   12c44:	ldr	r3, [sp, #4]
   12c48:	cmp	r0, #0
   12c4c:	rsbne	fp, r7, r0
   12c50:	addne	fp, fp, #1
   12c54:	beq	12d08 <__assert_fail@plt+0x18d4>
   12c58:	cmp	fp, #0
   12c5c:	beq	12cb8 <__assert_fail@plt+0x1884>
   12c60:	asr	r7, r6, #31
   12c64:	mvn	r0, #0
   12c68:	mvn	r1, #0
   12c6c:	mov	r2, r6
   12c70:	mov	r3, r7
   12c74:	bl	16458 <__assert_fail@plt+0x5024>
   12c78:	cmp	r1, r5
   12c7c:	cmpeq	r0, r4
   12c80:	bcc	12cdc <__assert_fail@plt+0x18a8>
   12c84:	sub	ip, fp, #1
   12c88:	mov	r3, #0
   12c8c:	b	12ca0 <__assert_fail@plt+0x186c>
   12c90:	cmp	r1, r5
   12c94:	cmpeq	r0, r4
   12c98:	add	r3, r3, #1
   12c9c:	bcc	12cdc <__assert_fail@plt+0x18a8>
   12ca0:	mul	r2, r4, r7
   12ca4:	cmp	r3, ip
   12ca8:	mla	r2, r6, r5, r2
   12cac:	umull	r4, r5, r4, r6
   12cb0:	add	r5, r2, r5
   12cb4:	bne	12c90 <__assert_fail@plt+0x185c>
   12cb8:	mov	r0, #0
   12cbc:	cmp	r9, #0
   12cc0:	strne	fp, [r9]
   12cc4:	b	12bc4 <__assert_fail@plt+0x1790>
   12cc8:	ldrsb	r3, [r1, #2]
   12ccc:	cmp	r3, #0
   12cd0:	bne	12bfc <__assert_fail@plt+0x17c8>
   12cd4:	mov	r6, #1000	; 0x3e8
   12cd8:	b	12c28 <__assert_fail@plt+0x17f4>
   12cdc:	mvn	r0, #1
   12ce0:	b	12cbc <__assert_fail@plt+0x1888>
   12ce4:	mov	r0, r1
   12ce8:	b	12bc4 <__assert_fail@plt+0x1790>
   12cec:	ldrsb	r3, [r1, #2]
   12cf0:	cmp	r3, #66	; 0x42
   12cf4:	bne	12bfc <__assert_fail@plt+0x17c8>
   12cf8:	ldrsb	r3, [r1, #3]
   12cfc:	cmp	r3, #0
   12d00:	beq	12c24 <__assert_fail@plt+0x17f0>
   12d04:	b	12bfc <__assert_fail@plt+0x17c8>
   12d08:	ldr	r7, [pc, #48]	; 12d40 <__assert_fail@plt+0x190c>
   12d0c:	mov	r1, r3
   12d10:	add	r7, pc, r7
   12d14:	mov	r0, r7
   12d18:	bl	11290 <strchr@plt>
   12d1c:	cmp	r0, #0
   12d20:	beq	12bfc <__assert_fail@plt+0x17c8>
   12d24:	rsb	r7, r7, r0
   12d28:	add	fp, r7, #1
   12d2c:	b	12c58 <__assert_fail@plt+0x1824>
   12d30:	bl	11188 <__stack_chk_fail@plt>
   12d34:	andeq	r5, r1, r8, lsl r5
   12d38:	andeq	r0, r0, r8, lsr #2
   12d3c:	andeq	r4, r0, ip, lsl lr
   12d40:	andeq	r4, r0, ip, asr #26
   12d44:	mov	r2, #0
   12d48:	b	12ad8 <__assert_fail@plt+0x16a4>
   12d4c:	push	{r4, r5, r6, lr}
   12d50:	subs	r6, r0, #0
   12d54:	beq	12dd8 <__assert_fail@plt+0x19a4>
   12d58:	ldrb	r4, [r6]
   12d5c:	cmp	r4, #0
   12d60:	beq	12de0 <__assert_fail@plt+0x19ac>
   12d64:	bl	11254 <__ctype_b_loc@plt>
   12d68:	mov	r3, r6
   12d6c:	ldr	r5, [r0]
   12d70:	b	12d8c <__assert_fail@plt+0x1958>
   12d74:	cmn	r3, #1
   12d78:	beq	12dc8 <__assert_fail@plt+0x1994>
   12d7c:	ldrb	r4, [r3, #1]
   12d80:	mov	r3, r1
   12d84:	cmp	r4, #0
   12d88:	beq	12dd0 <__assert_fail@plt+0x199c>
   12d8c:	lsl	r4, r4, #1
   12d90:	mov	ip, r3
   12d94:	add	r1, r3, #1
   12d98:	ldrh	r2, [r5, r4]
   12d9c:	tst	r2, #2048	; 0x800
   12da0:	bne	12d74 <__assert_fail@plt+0x1940>
   12da4:	cmp	ip, #0
   12da8:	cmpne	ip, r6
   12dac:	movls	r0, #0
   12db0:	movhi	r0, #1
   12db4:	popls	{r4, r5, r6, pc}
   12db8:	ldrsb	r0, [ip]
   12dbc:	rsbs	r0, r0, #1
   12dc0:	movcc	r0, #0
   12dc4:	pop	{r4, r5, r6, pc}
   12dc8:	mov	r0, #0
   12dcc:	pop	{r4, r5, r6, pc}
   12dd0:	mov	ip, r1
   12dd4:	b	12da4 <__assert_fail@plt+0x1970>
   12dd8:	mov	r0, r6
   12ddc:	pop	{r4, r5, r6, pc}
   12de0:	mov	r0, r4
   12de4:	pop	{r4, r5, r6, pc}
   12de8:	cmp	r1, #0
   12dec:	push	{r4, r5}
   12df0:	sub	r4, r1, #1
   12df4:	beq	12e60 <__assert_fail@plt+0x1a2c>
   12df8:	ldrb	r1, [r0]
   12dfc:	cmp	r1, #0
   12e00:	beq	12e60 <__assert_fail@plt+0x1a2c>
   12e04:	sxtb	r1, r1
   12e08:	sxtb	r2, r2
   12e0c:	cmp	r1, r2
   12e10:	beq	12e4c <__assert_fail@plt+0x1a18>
   12e14:	add	r1, r0, #1
   12e18:	mov	r3, #0
   12e1c:	b	12e38 <__assert_fail@plt+0x1a04>
   12e20:	ldrb	r0, [r1], #1
   12e24:	cmp	r0, #0
   12e28:	sxtb	ip, r0
   12e2c:	beq	12e4c <__assert_fail@plt+0x1a18>
   12e30:	cmp	ip, r2
   12e34:	beq	12e54 <__assert_fail@plt+0x1a20>
   12e38:	cmp	r3, r4
   12e3c:	mov	r5, r1
   12e40:	add	r3, r3, #1
   12e44:	bne	12e20 <__assert_fail@plt+0x19ec>
   12e48:	mov	r0, #0
   12e4c:	pop	{r4, r5}
   12e50:	bx	lr
   12e54:	mov	r0, r5
   12e58:	pop	{r4, r5}
   12e5c:	bx	lr
   12e60:	mov	r0, r1
   12e64:	b	12e4c <__assert_fail@plt+0x1a18>
   12e68:	ldr	r3, [pc, #228]	; 12f54 <__assert_fail@plt+0x1b20>
   12e6c:	ldr	r2, [pc, #228]	; 12f58 <__assert_fail@plt+0x1b24>
   12e70:	add	r3, pc, r3
   12e74:	push	{r4, r6, r7, r8, r9, lr}
   12e78:	subs	r6, r0, #0
   12e7c:	ldr	r7, [r3, r2]
   12e80:	mov	r0, r3
   12e84:	sub	sp, sp, #8
   12e88:	mov	r4, #0
   12e8c:	mov	r8, r1
   12e90:	ldr	r3, [r7]
   12e94:	str	r4, [sp]
   12e98:	str	r3, [sp, #4]
   12e9c:	beq	12eac <__assert_fail@plt+0x1a78>
   12ea0:	ldrsb	r3, [r6]
   12ea4:	cmp	r3, r4
   12ea8:	bne	12ed4 <__assert_fail@plt+0x1aa0>
   12eac:	bl	112b4 <__errno_location@plt>
   12eb0:	ldr	r3, [r0]
   12eb4:	cmp	r3, #0
   12eb8:	bne	12f00 <__assert_fail@plt+0x1acc>
   12ebc:	ldr	r1, [pc, #152]	; 12f5c <__assert_fail@plt+0x1b28>
   12ec0:	mov	r2, r8
   12ec4:	mov	r3, r6
   12ec8:	mov	r0, #1
   12ecc:	add	r1, pc, r1
   12ed0:	bl	11380 <errx@plt>
   12ed4:	bl	112b4 <__errno_location@plt>
   12ed8:	mov	r3, r4
   12edc:	mov	r1, sp
   12ee0:	mov	r2, #10
   12ee4:	mov	r9, r0
   12ee8:	str	r4, [r0]
   12eec:	mov	r0, r6
   12ef0:	bl	113c8 <__strtoll_internal@plt>
   12ef4:	ldr	r3, [r9]
   12ef8:	cmp	r3, r4
   12efc:	beq	12f18 <__assert_fail@plt+0x1ae4>
   12f00:	ldr	r1, [pc, #88]	; 12f60 <__assert_fail@plt+0x1b2c>
   12f04:	mov	r2, r8
   12f08:	mov	r3, r6
   12f0c:	mov	r0, #1
   12f10:	add	r1, pc, r1
   12f14:	bl	111ac <err@plt>
   12f18:	ldr	r3, [sp]
   12f1c:	cmp	r6, r3
   12f20:	beq	12ebc <__assert_fail@plt+0x1a88>
   12f24:	cmp	r3, #0
   12f28:	beq	12f38 <__assert_fail@plt+0x1b04>
   12f2c:	ldrsb	r3, [r3]
   12f30:	cmp	r3, #0
   12f34:	bne	12ebc <__assert_fail@plt+0x1a88>
   12f38:	ldr	r2, [sp, #4]
   12f3c:	ldr	r3, [r7]
   12f40:	cmp	r2, r3
   12f44:	bne	12f50 <__assert_fail@plt+0x1b1c>
   12f48:	add	sp, sp, #8
   12f4c:	pop	{r4, r6, r7, r8, r9, pc}
   12f50:	bl	11188 <__stack_chk_fail@plt>
   12f54:	andeq	r5, r1, r8, lsl #3
   12f58:	andeq	r0, r0, r8, lsr #2
   12f5c:	andeq	r4, r0, r8, ror fp
   12f60:	andeq	r4, r0, r4, lsr fp
   12f64:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12f68:	mov	r8, r0
   12f6c:	mov	r9, r1
   12f70:	bl	12e68 <__assert_fail@plt+0x1a34>
   12f74:	mvn	r4, #0
   12f78:	mov	r5, #0
   12f7c:	adds	r6, r0, #-2147483648	; 0x80000000
   12f80:	adc	r7, r1, #0
   12f84:	cmp	r7, r5
   12f88:	cmpeq	r6, r4
   12f8c:	popls	{r3, r4, r5, r6, r7, r8, r9, pc}
   12f90:	ldr	r1, [pc, #16]	; 12fa8 <__assert_fail@plt+0x1b74>
   12f94:	mov	r2, r9
   12f98:	mov	r3, r8
   12f9c:	mov	r0, #1
   12fa0:	add	r1, pc, r1
   12fa4:	bl	11380 <errx@plt>
   12fa8:	andeq	r4, r0, r4, lsr #21
   12fac:	push	{r3, r4, r5, lr}
   12fb0:	mov	r4, r0
   12fb4:	mov	r5, r1
   12fb8:	bl	12f64 <__assert_fail@plt+0x1b30>
   12fbc:	add	ip, r0, #32768	; 0x8000
   12fc0:	cmp	ip, #65536	; 0x10000
   12fc4:	bcs	12fd0 <__assert_fail@plt+0x1b9c>
   12fc8:	sxth	r0, r0
   12fcc:	pop	{r3, r4, r5, pc}
   12fd0:	ldr	r1, [pc, #16]	; 12fe8 <__assert_fail@plt+0x1bb4>
   12fd4:	mov	r2, r5
   12fd8:	mov	r3, r4
   12fdc:	mov	r0, #1
   12fe0:	add	r1, pc, r1
   12fe4:	bl	11380 <errx@plt>
   12fe8:	andeq	r4, r0, r4, ror #20
   12fec:	mov	r2, #10
   12ff0:	b	129e0 <__assert_fail@plt+0x15ac>
   12ff4:	push	{r3, r4, r5, r6, r7, lr}
   12ff8:	mov	r6, r0
   12ffc:	mov	r7, r1
   13000:	bl	12fec <__assert_fail@plt+0x1bb8>
   13004:	mvn	r4, #0
   13008:	mov	r5, #0
   1300c:	cmp	r1, r5
   13010:	cmpeq	r0, r4
   13014:	popls	{r3, r4, r5, r6, r7, pc}
   13018:	ldr	r1, [pc, #16]	; 13030 <__assert_fail@plt+0x1bfc>
   1301c:	mov	r2, r7
   13020:	mov	r3, r6
   13024:	mov	r0, #1
   13028:	add	r1, pc, r1
   1302c:	bl	11380 <errx@plt>
   13030:	andeq	r4, r0, ip, lsl sl
   13034:	push	{r3, r4, r5, lr}
   13038:	mov	r4, r0
   1303c:	mov	r5, r1
   13040:	bl	12ff4 <__assert_fail@plt+0x1bc0>
   13044:	cmp	r0, #65536	; 0x10000
   13048:	bcs	13054 <__assert_fail@plt+0x1c20>
   1304c:	uxth	r0, r0
   13050:	pop	{r3, r4, r5, pc}
   13054:	ldr	r1, [pc, #16]	; 1306c <__assert_fail@plt+0x1c38>
   13058:	mov	r2, r5
   1305c:	mov	r3, r4
   13060:	mov	r0, #1
   13064:	add	r1, pc, r1
   13068:	bl	11380 <errx@plt>
   1306c:	andeq	r4, r0, r0, ror #19
   13070:	mov	r2, #16
   13074:	b	129e0 <__assert_fail@plt+0x15ac>
   13078:	ldr	r3, [pc, #216]	; 13158 <__assert_fail@plt+0x1d24>
   1307c:	push	{r4, r5, r6, r7, r8, lr}
   13080:	subs	r4, r0, #0
   13084:	ldr	r0, [pc, #208]	; 1315c <__assert_fail@plt+0x1d28>
   13088:	add	r3, pc, r3
   1308c:	sub	sp, sp, #8
   13090:	mov	r5, #0
   13094:	mov	r7, r1
   13098:	ldr	r6, [r3, r0]
   1309c:	str	r5, [sp]
   130a0:	ldr	r3, [r6]
   130a4:	str	r3, [sp, #4]
   130a8:	beq	130b8 <__assert_fail@plt+0x1c84>
   130ac:	ldrsb	r3, [r4]
   130b0:	cmp	r3, r5
   130b4:	bne	130e0 <__assert_fail@plt+0x1cac>
   130b8:	bl	112b4 <__errno_location@plt>
   130bc:	ldr	r3, [r0]
   130c0:	cmp	r3, #0
   130c4:	bne	13104 <__assert_fail@plt+0x1cd0>
   130c8:	ldr	r1, [pc, #144]	; 13160 <__assert_fail@plt+0x1d2c>
   130cc:	mov	r2, r7
   130d0:	mov	r3, r4
   130d4:	mov	r0, #1
   130d8:	add	r1, pc, r1
   130dc:	bl	11380 <errx@plt>
   130e0:	bl	112b4 <__errno_location@plt>
   130e4:	mov	r1, sp
   130e8:	mov	r8, r0
   130ec:	str	r5, [r0]
   130f0:	mov	r0, r4
   130f4:	bl	11338 <strtod@plt>
   130f8:	ldr	r3, [r8]
   130fc:	cmp	r3, r5
   13100:	beq	1311c <__assert_fail@plt+0x1ce8>
   13104:	ldr	r1, [pc, #88]	; 13164 <__assert_fail@plt+0x1d30>
   13108:	mov	r2, r7
   1310c:	mov	r3, r4
   13110:	mov	r0, #1
   13114:	add	r1, pc, r1
   13118:	bl	111ac <err@plt>
   1311c:	ldr	r3, [sp]
   13120:	cmp	r4, r3
   13124:	beq	130c8 <__assert_fail@plt+0x1c94>
   13128:	cmp	r3, #0
   1312c:	beq	1313c <__assert_fail@plt+0x1d08>
   13130:	ldrsb	r3, [r3]
   13134:	cmp	r3, #0
   13138:	bne	130c8 <__assert_fail@plt+0x1c94>
   1313c:	ldr	r2, [sp, #4]
   13140:	ldr	r3, [r6]
   13144:	cmp	r2, r3
   13148:	bne	13154 <__assert_fail@plt+0x1d20>
   1314c:	add	sp, sp, #8
   13150:	pop	{r4, r5, r6, r7, r8, pc}
   13154:	bl	11188 <__stack_chk_fail@plt>
   13158:	andeq	r4, r1, r0, ror pc
   1315c:	andeq	r0, r0, r8, lsr #2
   13160:	andeq	r4, r0, ip, ror #18
   13164:	andeq	r4, r0, r0, lsr r9
   13168:	ldr	r3, [pc, #220]	; 1324c <__assert_fail@plt+0x1e18>
   1316c:	push	{r4, r5, r6, r7, r8, lr}
   13170:	subs	r4, r0, #0
   13174:	ldr	r0, [pc, #212]	; 13250 <__assert_fail@plt+0x1e1c>
   13178:	add	r3, pc, r3
   1317c:	sub	sp, sp, #8
   13180:	mov	r5, #0
   13184:	mov	r7, r1
   13188:	ldr	r6, [r3, r0]
   1318c:	str	r5, [sp]
   13190:	ldr	r3, [r6]
   13194:	str	r3, [sp, #4]
   13198:	beq	131a8 <__assert_fail@plt+0x1d74>
   1319c:	ldrsb	r3, [r4]
   131a0:	cmp	r3, r5
   131a4:	bne	131d0 <__assert_fail@plt+0x1d9c>
   131a8:	bl	112b4 <__errno_location@plt>
   131ac:	ldr	r3, [r0]
   131b0:	cmp	r3, #0
   131b4:	bne	131f8 <__assert_fail@plt+0x1dc4>
   131b8:	ldr	r1, [pc, #148]	; 13254 <__assert_fail@plt+0x1e20>
   131bc:	mov	r2, r7
   131c0:	mov	r3, r4
   131c4:	mov	r0, #1
   131c8:	add	r1, pc, r1
   131cc:	bl	11380 <errx@plt>
   131d0:	bl	112b4 <__errno_location@plt>
   131d4:	mov	r1, sp
   131d8:	mov	r2, #10
   131dc:	mov	r8, r0
   131e0:	str	r5, [r0]
   131e4:	mov	r0, r4
   131e8:	bl	11110 <strtol@plt>
   131ec:	ldr	r3, [r8]
   131f0:	cmp	r3, r5
   131f4:	beq	13210 <__assert_fail@plt+0x1ddc>
   131f8:	ldr	r1, [pc, #88]	; 13258 <__assert_fail@plt+0x1e24>
   131fc:	mov	r2, r7
   13200:	mov	r3, r4
   13204:	mov	r0, #1
   13208:	add	r1, pc, r1
   1320c:	bl	111ac <err@plt>
   13210:	ldr	r3, [sp]
   13214:	cmp	r4, r3
   13218:	beq	131b8 <__assert_fail@plt+0x1d84>
   1321c:	cmp	r3, #0
   13220:	beq	13230 <__assert_fail@plt+0x1dfc>
   13224:	ldrsb	r3, [r3]
   13228:	cmp	r3, #0
   1322c:	bne	131b8 <__assert_fail@plt+0x1d84>
   13230:	ldr	r2, [sp, #4]
   13234:	ldr	r3, [r6]
   13238:	cmp	r2, r3
   1323c:	bne	13248 <__assert_fail@plt+0x1e14>
   13240:	add	sp, sp, #8
   13244:	pop	{r4, r5, r6, r7, r8, pc}
   13248:	bl	11188 <__stack_chk_fail@plt>
   1324c:	andeq	r4, r1, r0, lsl #29
   13250:	andeq	r0, r0, r8, lsr #2
   13254:	andeq	r4, r0, ip, ror r8
   13258:	andeq	r4, r0, ip, lsr r8
   1325c:	ldr	r3, [pc, #220]	; 13340 <__assert_fail@plt+0x1f0c>
   13260:	push	{r4, r5, r6, r7, r8, lr}
   13264:	subs	r4, r0, #0
   13268:	ldr	r0, [pc, #212]	; 13344 <__assert_fail@plt+0x1f10>
   1326c:	add	r3, pc, r3
   13270:	sub	sp, sp, #8
   13274:	mov	r5, #0
   13278:	mov	r7, r1
   1327c:	ldr	r6, [r3, r0]
   13280:	str	r5, [sp]
   13284:	ldr	r3, [r6]
   13288:	str	r3, [sp, #4]
   1328c:	beq	1329c <__assert_fail@plt+0x1e68>
   13290:	ldrsb	r3, [r4]
   13294:	cmp	r3, r5
   13298:	bne	132c4 <__assert_fail@plt+0x1e90>
   1329c:	bl	112b4 <__errno_location@plt>
   132a0:	ldr	r3, [r0]
   132a4:	cmp	r3, #0
   132a8:	bne	132ec <__assert_fail@plt+0x1eb8>
   132ac:	ldr	r1, [pc, #148]	; 13348 <__assert_fail@plt+0x1f14>
   132b0:	mov	r2, r7
   132b4:	mov	r3, r4
   132b8:	mov	r0, #1
   132bc:	add	r1, pc, r1
   132c0:	bl	11380 <errx@plt>
   132c4:	bl	112b4 <__errno_location@plt>
   132c8:	mov	r1, sp
   132cc:	mov	r2, #10
   132d0:	mov	r8, r0
   132d4:	str	r5, [r0]
   132d8:	mov	r0, r4
   132dc:	bl	1126c <strtoul@plt>
   132e0:	ldr	r3, [r8]
   132e4:	cmp	r3, r5
   132e8:	beq	13304 <__assert_fail@plt+0x1ed0>
   132ec:	ldr	r1, [pc, #88]	; 1334c <__assert_fail@plt+0x1f18>
   132f0:	mov	r2, r7
   132f4:	mov	r3, r4
   132f8:	mov	r0, #1
   132fc:	add	r1, pc, r1
   13300:	bl	111ac <err@plt>
   13304:	ldr	r3, [sp]
   13308:	cmp	r4, r3
   1330c:	beq	132ac <__assert_fail@plt+0x1e78>
   13310:	cmp	r3, #0
   13314:	beq	13324 <__assert_fail@plt+0x1ef0>
   13318:	ldrsb	r3, [r3]
   1331c:	cmp	r3, #0
   13320:	bne	132ac <__assert_fail@plt+0x1e78>
   13324:	ldr	r2, [sp, #4]
   13328:	ldr	r3, [r6]
   1332c:	cmp	r2, r3
   13330:	bne	1333c <__assert_fail@plt+0x1f08>
   13334:	add	sp, sp, #8
   13338:	pop	{r4, r5, r6, r7, r8, pc}
   1333c:	bl	11188 <__stack_chk_fail@plt>
   13340:	andeq	r4, r1, ip, lsl #27
   13344:	andeq	r0, r0, r8, lsr #2
   13348:	andeq	r4, r0, r8, lsl #15
   1334c:	andeq	r4, r0, r8, asr #14
   13350:	ldr	ip, [pc, #132]	; 133dc <__assert_fail@plt+0x1fa8>
   13354:	push	{r4, r5, r6, lr}
   13358:	add	ip, pc, ip
   1335c:	ldr	lr, [pc, #124]	; 133e0 <__assert_fail@plt+0x1fac>
   13360:	sub	sp, sp, #16
   13364:	mov	r6, r1
   13368:	mov	r5, r0
   1336c:	mov	r1, sp
   13370:	ldr	r4, [ip, lr]
   13374:	ldr	ip, [r4]
   13378:	str	ip, [sp, #12]
   1337c:	bl	12d44 <__assert_fail@plt+0x1910>
   13380:	cmp	r0, #0
   13384:	bne	133a4 <__assert_fail@plt+0x1f70>
   13388:	ldr	r2, [sp, #12]
   1338c:	ldr	r3, [r4]
   13390:	ldrd	r0, [sp]
   13394:	cmp	r2, r3
   13398:	bne	133d8 <__assert_fail@plt+0x1fa4>
   1339c:	add	sp, sp, #16
   133a0:	pop	{r4, r5, r6, pc}
   133a4:	bl	112b4 <__errno_location@plt>
   133a8:	mov	r2, r6
   133ac:	ldr	r3, [r0]
   133b0:	mov	r0, #1
   133b4:	cmp	r3, #0
   133b8:	mov	r3, r5
   133bc:	beq	133cc <__assert_fail@plt+0x1f98>
   133c0:	ldr	r1, [pc, #28]	; 133e4 <__assert_fail@plt+0x1fb0>
   133c4:	add	r1, pc, r1
   133c8:	bl	111ac <err@plt>
   133cc:	ldr	r1, [pc, #20]	; 133e8 <__assert_fail@plt+0x1fb4>
   133d0:	add	r1, pc, r1
   133d4:	bl	11380 <errx@plt>
   133d8:	bl	11188 <__stack_chk_fail@plt>
   133dc:	andeq	r4, r1, r0, lsr #25
   133e0:	andeq	r0, r0, r8, lsr #2
   133e4:	andeq	r4, r0, r0, lsl #13
   133e8:	andeq	r4, r0, r4, ror r6
   133ec:	push	{r4, lr}
   133f0:	mov	r4, r1
   133f4:	mov	r1, r2
   133f8:	bl	13078 <__assert_fail@plt+0x1c44>
   133fc:	vldr	d7, [pc, #28]	; 13420 <__assert_fail@plt+0x1fec>
   13400:	vcvt.s32.f64	s11, d0
   13404:	vcvt.f64.s32	d6, s11
   13408:	vstr	s11, [r4]
   1340c:	vsub.f64	d0, d0, d6
   13410:	vmul.f64	d0, d0, d7
   13414:	vcvt.s32.f64	s0, d0
   13418:	vstr	s0, [r4, #4]
   1341c:	pop	{r4, pc}
   13420:	andeq	r0, r0, r0
   13424:	smlawbmi	lr, r0, r4, r8
   13428:	and	r3, r0, #61440	; 0xf000
   1342c:	cmp	r3, #16384	; 0x4000
   13430:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   13434:	moveq	r3, #100	; 0x64
   13438:	beq	134b0 <__assert_fail@plt+0x207c>
   1343c:	cmp	r3, #40960	; 0xa000
   13440:	moveq	r3, #108	; 0x6c
   13444:	beq	134b0 <__assert_fail@plt+0x207c>
   13448:	cmp	r3, #8192	; 0x2000
   1344c:	moveq	r3, #99	; 0x63
   13450:	beq	134b0 <__assert_fail@plt+0x207c>
   13454:	cmp	r3, #24576	; 0x6000
   13458:	moveq	r3, #98	; 0x62
   1345c:	beq	134b0 <__assert_fail@plt+0x207c>
   13460:	cmp	r3, #49152	; 0xc000
   13464:	moveq	r3, #115	; 0x73
   13468:	beq	134b0 <__assert_fail@plt+0x207c>
   1346c:	cmp	r3, #4096	; 0x1000
   13470:	moveq	r3, #112	; 0x70
   13474:	beq	134b0 <__assert_fail@plt+0x207c>
   13478:	cmp	r3, #32768	; 0x8000
   1347c:	beq	134ac <__assert_fail@plt+0x2078>
   13480:	mov	r4, #9
   13484:	mov	r3, #8
   13488:	mov	r6, #7
   1348c:	mov	r7, #6
   13490:	mov	r2, #5
   13494:	mov	r8, #4
   13498:	mov	r9, #3
   1349c:	mov	ip, #2
   134a0:	mov	sl, #1
   134a4:	mov	fp, #0
   134a8:	b	134dc <__assert_fail@plt+0x20a8>
   134ac:	mov	r3, #45	; 0x2d
   134b0:	strb	r3, [r1]
   134b4:	mov	r4, #10
   134b8:	mov	r3, #9
   134bc:	mov	r6, #8
   134c0:	mov	r7, #7
   134c4:	mov	r2, #6
   134c8:	mov	r8, #5
   134cc:	mov	r9, #4
   134d0:	mov	ip, #3
   134d4:	mov	sl, #2
   134d8:	mov	fp, #1
   134dc:	tst	r0, #256	; 0x100
   134e0:	add	ip, r1, ip
   134e4:	moveq	r5, #45	; 0x2d
   134e8:	movne	r5, #114	; 0x72
   134ec:	tst	r0, #128	; 0x80
   134f0:	strb	r5, [r1, fp]
   134f4:	moveq	r5, #45	; 0x2d
   134f8:	movne	r5, #119	; 0x77
   134fc:	tst	r0, #2048	; 0x800
   13500:	strb	r5, [r1, sl]
   13504:	beq	135a0 <__assert_fail@plt+0x216c>
   13508:	tst	r0, #64	; 0x40
   1350c:	moveq	r5, #83	; 0x53
   13510:	movne	r5, #115	; 0x73
   13514:	tst	r0, #32
   13518:	strb	r5, [ip]
   1351c:	add	r2, r1, r2
   13520:	moveq	ip, #45	; 0x2d
   13524:	movne	ip, #114	; 0x72
   13528:	tst	r0, #16
   1352c:	strb	ip, [r1, r9]
   13530:	moveq	ip, #45	; 0x2d
   13534:	movne	ip, #119	; 0x77
   13538:	tst	r0, #1024	; 0x400
   1353c:	strb	ip, [r1, r8]
   13540:	beq	135c0 <__assert_fail@plt+0x218c>
   13544:	tst	r0, #8
   13548:	moveq	ip, #83	; 0x53
   1354c:	movne	ip, #115	; 0x73
   13550:	tst	r0, #4
   13554:	strb	ip, [r2]
   13558:	add	r3, r1, r3
   1355c:	moveq	r2, #45	; 0x2d
   13560:	movne	r2, #114	; 0x72
   13564:	tst	r0, #2
   13568:	strb	r2, [r1, r7]
   1356c:	moveq	r2, #45	; 0x2d
   13570:	movne	r2, #119	; 0x77
   13574:	tst	r0, #512	; 0x200
   13578:	strb	r2, [r1, r6]
   1357c:	beq	135b0 <__assert_fail@plt+0x217c>
   13580:	tst	r0, #1
   13584:	moveq	r2, #84	; 0x54
   13588:	movne	r2, #116	; 0x74
   1358c:	strb	r2, [r3]
   13590:	mov	r3, #0
   13594:	strb	r3, [r1, r4]
   13598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1359c:	bx	lr
   135a0:	tst	r0, #64	; 0x40
   135a4:	moveq	r5, #45	; 0x2d
   135a8:	movne	r5, #120	; 0x78
   135ac:	b	13514 <__assert_fail@plt+0x20e0>
   135b0:	tst	r0, #1
   135b4:	moveq	r2, #45	; 0x2d
   135b8:	movne	r2, #120	; 0x78
   135bc:	b	1358c <__assert_fail@plt+0x2158>
   135c0:	tst	r0, #8
   135c4:	moveq	ip, #45	; 0x2d
   135c8:	movne	ip, #120	; 0x78
   135cc:	b	13550 <__assert_fail@plt+0x211c>
   135d0:	ldr	r1, [pc, #580]	; 1381c <__assert_fail@plt+0x23e8>
   135d4:	tst	r0, #2
   135d8:	ldr	ip, [pc, #576]	; 13820 <__assert_fail@plt+0x23ec>
   135dc:	add	r1, pc, r1
   135e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e4:	sub	sp, sp, #100	; 0x64
   135e8:	ldr	r6, [r1, ip]
   135ec:	addeq	r7, sp, #52	; 0x34
   135f0:	addne	lr, sp, #53	; 0x35
   135f4:	addne	r7, sp, #52	; 0x34
   135f8:	moveq	lr, r7
   135fc:	mov	ip, #10
   13600:	ldr	r1, [r6]
   13604:	str	r1, [sp, #92]	; 0x5c
   13608:	movne	r1, #32
   1360c:	strbne	r1, [sp, #52]	; 0x34
   13610:	mov	r1, #1
   13614:	sub	r9, ip, #32
   13618:	rsb	r8, ip, #32
   1361c:	lsl	r5, r1, r9
   13620:	lsl	r4, r1, ip
   13624:	orr	r5, r5, r1, lsr r8
   13628:	cmp	r3, r5
   1362c:	cmpeq	r2, r4
   13630:	bcc	1379c <__assert_fail@plt+0x2368>
   13634:	add	ip, ip, #10
   13638:	cmp	ip, #70	; 0x46
   1363c:	bne	13614 <__assert_fail@plt+0x21e0>
   13640:	mov	r1, #60	; 0x3c
   13644:	movw	r5, #26215	; 0x6667
   13648:	movt	r5, #26214	; 0x6666
   1364c:	ldr	r8, [pc, #464]	; 13824 <__assert_fail@plt+0x23f0>
   13650:	mov	fp, #1
   13654:	smull	sl, r9, r5, r1
   13658:	add	r8, pc, r8
   1365c:	str	r8, [sp, #36]	; 0x24
   13660:	sub	r8, r1, #32
   13664:	asr	r4, r1, #31
   13668:	lsl	r5, fp, r8
   1366c:	str	r4, [sp, #44]	; 0x2c
   13670:	lsl	r4, fp, r1
   13674:	subs	r4, r4, #1
   13678:	str	r9, [sp, #40]	; 0x28
   1367c:	rsb	r9, r1, #32
   13680:	ldr	sl, [sp, #40]	; 0x28
   13684:	orr	r5, r5, fp, lsr r9
   13688:	ldr	fp, [sp, #44]	; 0x2c
   1368c:	sbc	r5, r5, #0
   13690:	tst	r0, #1
   13694:	lsr	r1, r2, r1
   13698:	rsb	fp, fp, sl, asr #2
   1369c:	ldr	sl, [sp, #36]	; 0x24
   136a0:	orr	r1, r1, r3, lsl r9
   136a4:	and	r5, r5, r3
   136a8:	orr	r8, r1, r3, lsr r8
   136ac:	and	r4, r4, r2
   136b0:	ldrb	r0, [sl, fp]
   136b4:	add	r3, lr, #1
   136b8:	strb	r0, [lr]
   136bc:	bne	13780 <__assert_fail@plt+0x234c>
   136c0:	orrs	fp, r4, r5
   136c4:	mov	r2, #0
   136c8:	strb	r2, [r3]
   136cc:	beq	137b4 <__assert_fail@plt+0x2380>
   136d0:	sub	lr, ip, #20
   136d4:	sub	ip, ip, #52	; 0x34
   136d8:	rsb	r3, lr, #32
   136dc:	lsr	r0, r4, lr
   136e0:	orr	r0, r0, r5, lsl r3
   136e4:	lsr	r1, r5, lr
   136e8:	orr	r0, r0, r5, lsr ip
   136ec:	mov	r2, #100	; 0x64
   136f0:	adds	r0, r0, #50	; 0x32
   136f4:	mov	r3, #0
   136f8:	adc	r1, r1, #0
   136fc:	bl	16458 <__assert_fail@plt+0x5024>
   13700:	mov	r4, r0
   13704:	mov	r5, r1
   13708:	cmp	r5, #0
   1370c:	cmpeq	r4, #10
   13710:	addeq	r8, r8, #1
   13714:	beq	137b4 <__assert_fail@plt+0x2380>
   13718:	orrs	r2, r4, r5
   1371c:	beq	137b4 <__assert_fail@plt+0x2380>
   13720:	bl	113b0 <localeconv@plt>
   13724:	cmp	r0, #0
   13728:	beq	13800 <__assert_fail@plt+0x23cc>
   1372c:	ldr	r3, [r0]
   13730:	cmp	r3, #0
   13734:	beq	13810 <__assert_fail@plt+0x23dc>
   13738:	ldrsb	r2, [r3]
   1373c:	cmp	r2, #0
   13740:	ldreq	r3, [pc, #224]	; 13828 <__assert_fail@plt+0x23f4>
   13744:	addeq	r3, pc, r3
   13748:	add	r9, sp, #60	; 0x3c
   1374c:	ldr	ip, [pc, #216]	; 1382c <__assert_fail@plt+0x23f8>
   13750:	mov	r1, #32
   13754:	str	r3, [sp, #8]
   13758:	add	ip, pc, ip
   1375c:	str	r8, [sp, #4]
   13760:	mov	r0, r9
   13764:	strd	r4, [sp, #16]
   13768:	mov	r3, r1
   1376c:	str	r7, [sp, #24]
   13770:	mov	r2, #1
   13774:	str	ip, [sp]
   13778:	bl	1141c <__snprintf_chk@plt>
   1377c:	b	137e0 <__assert_fail@plt+0x23ac>
   13780:	cmp	r0, #66	; 0x42
   13784:	addne	r3, lr, #3
   13788:	movne	r1, #105	; 0x69
   1378c:	movne	r2, #66	; 0x42
   13790:	strbne	r1, [lr, #1]
   13794:	strbne	r2, [lr, #2]
   13798:	b	136c0 <__assert_fail@plt+0x228c>
   1379c:	subs	r1, ip, #10
   137a0:	strbeq	r1, [lr, #1]
   137a4:	moveq	r3, #66	; 0x42
   137a8:	moveq	r8, r2
   137ac:	strbeq	r3, [lr]
   137b0:	bne	13644 <__assert_fail@plt+0x2210>
   137b4:	ldr	r3, [pc, #116]	; 13830 <__assert_fail@plt+0x23fc>
   137b8:	add	r9, sp, #60	; 0x3c
   137bc:	mov	r1, #32
   137c0:	str	r8, [sp, #4]
   137c4:	add	r3, pc, r3
   137c8:	str	r7, [sp, #8]
   137cc:	str	r3, [sp]
   137d0:	mov	r0, r9
   137d4:	mov	r3, r1
   137d8:	mov	r2, #1
   137dc:	bl	1141c <__snprintf_chk@plt>
   137e0:	mov	r0, r9
   137e4:	bl	112fc <__strdup@plt>
   137e8:	ldr	r2, [sp, #92]	; 0x5c
   137ec:	ldr	r3, [r6]
   137f0:	cmp	r2, r3
   137f4:	bne	1380c <__assert_fail@plt+0x23d8>
   137f8:	add	sp, sp, #100	; 0x64
   137fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13800:	ldr	r3, [pc, #44]	; 13834 <__assert_fail@plt+0x2400>
   13804:	add	r3, pc, r3
   13808:	b	13748 <__assert_fail@plt+0x2314>
   1380c:	bl	11188 <__stack_chk_fail@plt>
   13810:	ldr	r3, [pc, #32]	; 13838 <__assert_fail@plt+0x2404>
   13814:	add	r3, pc, r3
   13818:	b	13748 <__assert_fail@plt+0x2314>
   1381c:	andeq	r4, r1, ip, lsl sl
   13820:	andeq	r0, r0, r8, lsr #2
   13824:	andeq	r4, r0, r0, lsl r4
   13828:	andeq	r3, r0, r4, ror #28
   1382c:	andeq	r4, r0, r8, lsl r3
   13830:			; <UNDEFINED> instruction: 0x000042b8
   13834:	andeq	r3, r0, r4, lsr #27
   13838:	muleq	r0, r4, sp
   1383c:	cmp	r0, #0
   13840:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13844:	mov	r8, r1
   13848:	mov	sl, r2
   1384c:	mov	r9, r3
   13850:	beq	1390c <__assert_fail@plt+0x24d8>
   13854:	ldrb	r5, [r0]
   13858:	cmp	r5, #0
   1385c:	beq	1390c <__assert_fail@plt+0x24d8>
   13860:	cmp	r2, #0
   13864:	cmpne	r1, #0
   13868:	movne	ip, #0
   1386c:	moveq	ip, #1
   13870:	beq	1390c <__assert_fail@plt+0x24d8>
   13874:	cmp	r3, #0
   13878:	movne	r4, r0
   1387c:	movne	r6, ip
   13880:	bne	13894 <__assert_fail@plt+0x2460>
   13884:	b	1390c <__assert_fail@plt+0x24d8>
   13888:	ldrb	r5, [r4, #1]!
   1388c:	cmp	r5, #0
   13890:	beq	13904 <__assert_fail@plt+0x24d0>
   13894:	cmp	sl, r6
   13898:	bls	13914 <__assert_fail@plt+0x24e0>
   1389c:	cmp	ip, #0
   138a0:	ldrsb	r7, [r4, #1]
   138a4:	moveq	ip, r4
   138a8:	cmp	r5, #44	; 0x2c
   138ac:	mov	r0, ip
   138b0:	moveq	r5, r4
   138b4:	movne	r5, #0
   138b8:	cmp	r7, #0
   138bc:	addeq	r5, r4, #1
   138c0:	cmp	r5, #0
   138c4:	rsb	r1, ip, r5
   138c8:	beq	138fc <__assert_fail@plt+0x24c8>
   138cc:	cmp	ip, r5
   138d0:	bcs	1390c <__assert_fail@plt+0x24d8>
   138d4:	blx	r9
   138d8:	mov	ip, #0
   138dc:	add	r3, r6, #1
   138e0:	cmn	r0, #1
   138e4:	beq	1390c <__assert_fail@plt+0x24d8>
   138e8:	str	r0, [r8, r6, lsl #2]
   138ec:	mov	r6, r3
   138f0:	ldrsb	r2, [r5]
   138f4:	cmp	r2, ip
   138f8:	beq	1391c <__assert_fail@plt+0x24e8>
   138fc:	cmn	r4, #1
   13900:	bne	13888 <__assert_fail@plt+0x2454>
   13904:	mov	r0, r6
   13908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1390c:	mvn	r0, #0
   13910:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13914:	mvn	r0, #1
   13918:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1391c:	mov	r6, r3
   13920:	b	13904 <__assert_fail@plt+0x24d0>
   13924:	cmp	r0, #0
   13928:	push	{r4, lr}
   1392c:	mov	r4, r3
   13930:	beq	139a8 <__assert_fail@plt+0x2574>
   13934:	ldrb	ip, [r0]
   13938:	cmp	ip, #0
   1393c:	beq	139a8 <__assert_fail@plt+0x2574>
   13940:	cmp	r3, #0
   13944:	beq	139a8 <__assert_fail@plt+0x2574>
   13948:	ldr	r3, [r3]
   1394c:	cmp	r3, #0
   13950:	blt	139a8 <__assert_fail@plt+0x2574>
   13954:	cmp	r3, r2
   13958:	bhi	139a8 <__assert_fail@plt+0x2574>
   1395c:	cmp	ip, #43	; 0x2b
   13960:	lsleq	ip, r3, #2
   13964:	addeq	r0, r0, #1
   13968:	movne	ip, #0
   1396c:	strne	ip, [r4]
   13970:	movne	r3, ip
   13974:	add	r1, r1, ip
   13978:	rsb	r2, r3, r2
   1397c:	ldr	r3, [sp, #8]
   13980:	bl	1383c <__assert_fail@plt+0x2408>
   13984:	subs	r3, r0, #0
   13988:	ble	139a0 <__assert_fail@plt+0x256c>
   1398c:	ldr	r2, [r4]
   13990:	mov	r0, r3
   13994:	add	r3, r2, r3
   13998:	str	r3, [r4]
   1399c:	pop	{r4, pc}
   139a0:	mov	r0, r3
   139a4:	pop	{r4, pc}
   139a8:	mvn	r0, #0
   139ac:	pop	{r4, pc}
   139b0:	cmp	r2, #0
   139b4:	cmpne	r0, #0
   139b8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   139bc:	mov	r4, r0
   139c0:	mov	r7, r2
   139c4:	movne	r3, #0
   139c8:	moveq	r3, #1
   139cc:	mov	r9, r1
   139d0:	beq	13a6c <__assert_fail@plt+0x2638>
   139d4:	cmp	r1, #0
   139d8:	beq	13a6c <__assert_fail@plt+0x2638>
   139dc:	mov	r6, r0
   139e0:	mov	r8, #1
   139e4:	ldrb	r5, [r6], #1
   139e8:	cmp	r5, #0
   139ec:	beq	13a5c <__assert_fail@plt+0x2628>
   139f0:	cmp	r5, #44	; 0x2c
   139f4:	ldrsb	r0, [r4, #1]
   139f8:	moveq	r5, r4
   139fc:	movne	r5, #0
   13a00:	cmp	r3, #0
   13a04:	moveq	r3, r4
   13a08:	cmp	r0, #0
   13a0c:	mov	r0, r3
   13a10:	moveq	r5, r6
   13a14:	cmp	r5, #0
   13a18:	rsb	r1, r3, r5
   13a1c:	beq	13a54 <__assert_fail@plt+0x2620>
   13a20:	cmp	r3, r5
   13a24:	bcs	13a64 <__assert_fail@plt+0x2630>
   13a28:	blx	r7
   13a2c:	mov	r3, #0
   13a30:	cmp	r0, #0
   13a34:	and	r2, r0, #7
   13a38:	poplt	{r3, r4, r5, r6, r7, r8, r9, pc}
   13a3c:	ldrb	r1, [r9, r0, asr #3]
   13a40:	orr	r2, r1, r8, lsl r2
   13a44:	strb	r2, [r9, r0, asr #3]
   13a48:	ldrsb	r2, [r5]
   13a4c:	cmp	r2, r3
   13a50:	beq	13a5c <__assert_fail@plt+0x2628>
   13a54:	adds	r4, r4, #1
   13a58:	bne	139e4 <__assert_fail@plt+0x25b0>
   13a5c:	mov	r0, #0
   13a60:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13a64:	mvn	r0, #0
   13a68:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13a6c:	mvn	r0, #21
   13a70:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13a74:	cmp	r2, #0
   13a78:	cmpne	r0, #0
   13a7c:	push	{r4, r5, r6, r7, r8, lr}
   13a80:	movne	r3, #0
   13a84:	moveq	r3, #1
   13a88:	mov	r4, r0
   13a8c:	mov	r8, r2
   13a90:	mov	r7, r1
   13a94:	beq	13b28 <__assert_fail@plt+0x26f4>
   13a98:	cmp	r1, #0
   13a9c:	beq	13b28 <__assert_fail@plt+0x26f4>
   13aa0:	mov	r6, r0
   13aa4:	ldrb	r5, [r6], #1
   13aa8:	cmp	r5, #0
   13aac:	beq	13b18 <__assert_fail@plt+0x26e4>
   13ab0:	cmp	r5, #44	; 0x2c
   13ab4:	ldrsb	r0, [r4, #1]
   13ab8:	moveq	r5, r4
   13abc:	movne	r5, #0
   13ac0:	cmp	r3, #0
   13ac4:	moveq	r3, r4
   13ac8:	cmp	r0, #0
   13acc:	mov	r0, r3
   13ad0:	moveq	r5, r6
   13ad4:	cmp	r5, #0
   13ad8:	rsb	r1, r3, r5
   13adc:	beq	13b10 <__assert_fail@plt+0x26dc>
   13ae0:	cmp	r3, r5
   13ae4:	bcs	13b20 <__assert_fail@plt+0x26ec>
   13ae8:	blx	r8
   13aec:	mov	r3, #0
   13af0:	cmp	r0, #0
   13af4:	poplt	{r4, r5, r6, r7, r8, pc}
   13af8:	ldr	r2, [r7]
   13afc:	orr	r0, r2, r0
   13b00:	str	r0, [r7]
   13b04:	ldrsb	r2, [r5]
   13b08:	cmp	r2, r3
   13b0c:	beq	13b18 <__assert_fail@plt+0x26e4>
   13b10:	adds	r4, r4, #1
   13b14:	bne	13aa4 <__assert_fail@plt+0x2670>
   13b18:	mov	r0, #0
   13b1c:	pop	{r4, r5, r6, r7, r8, pc}
   13b20:	mvn	r0, #0
   13b24:	pop	{r4, r5, r6, r7, r8, pc}
   13b28:	mvn	r0, #21
   13b2c:	pop	{r4, r5, r6, r7, r8, pc}
   13b30:	ldr	ip, [pc, #380]	; 13cb4 <__assert_fail@plt+0x2880>
   13b34:	push	{r4, r5, r6, r7, r8, r9, lr}
   13b38:	subs	r4, r0, #0
   13b3c:	ldr	r0, [pc, #372]	; 13cb8 <__assert_fail@plt+0x2884>
   13b40:	add	ip, pc, ip
   13b44:	mov	r6, r2
   13b48:	sub	sp, sp, #12
   13b4c:	mov	r2, ip
   13b50:	mov	r8, #0
   13b54:	ldr	r7, [ip, r0]
   13b58:	mov	r9, r1
   13b5c:	str	r8, [sp]
   13b60:	ldr	r2, [r7]
   13b64:	str	r2, [sp, #4]
   13b68:	beq	13bd8 <__assert_fail@plt+0x27a4>
   13b6c:	str	r3, [r1]
   13b70:	str	r3, [r6]
   13b74:	bl	112b4 <__errno_location@plt>
   13b78:	str	r8, [r0]
   13b7c:	mov	r5, r0
   13b80:	ldrsb	r3, [r4]
   13b84:	cmp	r3, #58	; 0x3a
   13b88:	beq	13bf4 <__assert_fail@plt+0x27c0>
   13b8c:	mov	r0, r4
   13b90:	mov	r2, #10
   13b94:	mov	r1, sp
   13b98:	bl	11110 <strtol@plt>
   13b9c:	str	r0, [r9]
   13ba0:	str	r0, [r6]
   13ba4:	ldr	r0, [r5]
   13ba8:	cmp	r0, #0
   13bac:	bne	13ca8 <__assert_fail@plt+0x2874>
   13bb0:	ldr	r3, [sp]
   13bb4:	cmp	r3, #0
   13bb8:	beq	13ca8 <__assert_fail@plt+0x2874>
   13bbc:	cmp	r4, r3
   13bc0:	beq	13ca8 <__assert_fail@plt+0x2874>
   13bc4:	ldrsb	r2, [r3]
   13bc8:	cmp	r2, #58	; 0x3a
   13bcc:	beq	13c40 <__assert_fail@plt+0x280c>
   13bd0:	cmp	r2, #45	; 0x2d
   13bd4:	beq	13c50 <__assert_fail@plt+0x281c>
   13bd8:	mov	r0, #0
   13bdc:	ldr	r2, [sp, #4]
   13be0:	ldr	r3, [r7]
   13be4:	cmp	r2, r3
   13be8:	bne	13cb0 <__assert_fail@plt+0x287c>
   13bec:	add	sp, sp, #12
   13bf0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13bf4:	add	r4, r4, #1
   13bf8:	mov	r1, sp
   13bfc:	mov	r2, #10
   13c00:	mov	r0, r4
   13c04:	bl	11110 <strtol@plt>
   13c08:	str	r0, [r6]
   13c0c:	ldr	r3, [r5]
   13c10:	cmp	r3, #0
   13c14:	bne	13ca8 <__assert_fail@plt+0x2874>
   13c18:	ldr	r3, [sp]
   13c1c:	cmp	r3, #0
   13c20:	beq	13ca8 <__assert_fail@plt+0x2874>
   13c24:	ldrsb	r2, [r3]
   13c28:	cmp	r2, #0
   13c2c:	bne	13ca8 <__assert_fail@plt+0x2874>
   13c30:	cmp	r4, r3
   13c34:	movne	r0, #0
   13c38:	mvneq	r0, #0
   13c3c:	b	13bdc <__assert_fail@plt+0x27a8>
   13c40:	ldrsb	r2, [r3, #1]
   13c44:	cmp	r2, #0
   13c48:	streq	r0, [r6]
   13c4c:	beq	13bdc <__assert_fail@plt+0x27a8>
   13c50:	add	r4, r3, #1
   13c54:	mov	ip, #0
   13c58:	mov	r1, sp
   13c5c:	mov	r2, #10
   13c60:	mov	r0, r4
   13c64:	str	ip, [r5]
   13c68:	str	ip, [sp]
   13c6c:	bl	11110 <strtol@plt>
   13c70:	str	r0, [r6]
   13c74:	ldr	r3, [r5]
   13c78:	cmp	r3, #0
   13c7c:	bne	13ca8 <__assert_fail@plt+0x2874>
   13c80:	ldr	r2, [sp]
   13c84:	cmp	r2, #0
   13c88:	beq	13ca8 <__assert_fail@plt+0x2874>
   13c8c:	ldrsb	r3, [r2]
   13c90:	cmp	r3, #0
   13c94:	bne	13ca8 <__assert_fail@plt+0x2874>
   13c98:	cmp	r4, r2
   13c9c:	movne	r0, #0
   13ca0:	mvneq	r0, #0
   13ca4:	b	13bdc <__assert_fail@plt+0x27a8>
   13ca8:	mvn	r0, #0
   13cac:	b	13bdc <__assert_fail@plt+0x27a8>
   13cb0:	bl	11188 <__stack_chk_fail@plt>
   13cb4:			; <UNDEFINED> instruction: 0x000144b8
   13cb8:	andeq	r0, r0, r8, lsr #2
   13cbc:	rsbs	r2, r0, #1
   13cc0:	push	{r4, r5, r6, lr}
   13cc4:	movcc	r2, #0
   13cc8:	rsbs	r3, r1, #1
   13ccc:	mov	r5, r0
   13cd0:	mov	r4, r1
   13cd4:	movcc	r3, #0
   13cd8:	ands	ip, r2, r3
   13cdc:	bne	13d48 <__assert_fail@plt+0x2914>
   13ce0:	orrs	r3, r2, r3
   13ce4:	bne	13d50 <__assert_fail@plt+0x291c>
   13ce8:	bl	11104 <strcmp@plt>
   13cec:	cmp	r0, #0
   13cf0:	beq	13d48 <__assert_fail@plt+0x2914>
   13cf4:	mov	r0, r5
   13cf8:	bl	11284 <strlen@plt>
   13cfc:	mov	r6, r0
   13d00:	mov	r0, r4
   13d04:	bl	11284 <strlen@plt>
   13d08:	cmp	r6, #0
   13d0c:	beq	13d20 <__assert_fail@plt+0x28ec>
   13d10:	sub	r3, r6, #1
   13d14:	ldrsb	r2, [r5, r3]
   13d18:	cmp	r2, #47	; 0x2f
   13d1c:	moveq	r6, r3
   13d20:	cmp	r0, #0
   13d24:	beq	13d38 <__assert_fail@plt+0x2904>
   13d28:	sub	r3, r0, #1
   13d2c:	ldrsb	r2, [r4, r3]
   13d30:	cmp	r2, #47	; 0x2f
   13d34:	moveq	r0, r3
   13d38:	cmp	r6, r0
   13d3c:	beq	13d58 <__assert_fail@plt+0x2924>
   13d40:	mov	r0, #0
   13d44:	pop	{r4, r5, r6, pc}
   13d48:	mov	r0, #1
   13d4c:	pop	{r4, r5, r6, pc}
   13d50:	mov	r0, ip
   13d54:	pop	{r4, r5, r6, pc}
   13d58:	mov	r0, r5
   13d5c:	mov	r1, r4
   13d60:	mov	r2, r6
   13d64:	bl	113f8 <strncmp@plt>
   13d68:	rsbs	r0, r0, #1
   13d6c:	movcc	r0, #0
   13d70:	pop	{r4, r5, r6, pc}
   13d74:	ldr	r3, [pc, #248]	; 13e74 <__assert_fail@plt+0x2a40>
   13d78:	cmp	r0, #0
   13d7c:	cmpne	r1, #0
   13d80:	ldr	r2, [pc, #240]	; 13e78 <__assert_fail@plt+0x2a44>
   13d84:	add	r3, pc, r3
   13d88:	push	{r4, r5, r6, r7, r8, r9, lr}
   13d8c:	sub	sp, sp, #20
   13d90:	ldr	r9, [r3, r2]
   13d94:	mov	r6, r1
   13d98:	addne	r8, sp, #4
   13d9c:	addne	r7, sp, #8
   13da0:	ldr	r3, [r9]
   13da4:	str	r3, [sp, #12]
   13da8:	bne	13df0 <__assert_fail@plt+0x29bc>
   13dac:	b	13e68 <__assert_fail@plt+0x2a34>
   13db0:	cmp	r4, r3
   13db4:	bne	13e68 <__assert_fail@plt+0x2a34>
   13db8:	mov	r0, r5
   13dbc:	mov	r1, r6
   13dc0:	mov	r2, r4
   13dc4:	bl	113f8 <strncmp@plt>
   13dc8:	cmp	r0, #0
   13dcc:	bne	13e68 <__assert_fail@plt+0x2a34>
   13dd0:	adds	r6, r6, r4
   13dd4:	moveq	r3, #0
   13dd8:	movne	r3, #1
   13ddc:	adds	r0, r5, r4
   13de0:	moveq	r3, #0
   13de4:	andne	r3, r3, #1
   13de8:	cmp	r3, #0
   13dec:	beq	13e68 <__assert_fail@plt+0x2a34>
   13df0:	mov	r1, r8
   13df4:	bl	128b0 <__assert_fail@plt+0x147c>
   13df8:	mov	r1, r7
   13dfc:	mov	r5, r0
   13e00:	mov	r0, r6
   13e04:	bl	128b0 <__assert_fail@plt+0x147c>
   13e08:	ldr	r4, [sp, #4]
   13e0c:	ldr	r3, [sp, #8]
   13e10:	mov	r6, r0
   13e14:	adds	r0, r3, r4
   13e18:	beq	13e4c <__assert_fail@plt+0x2a18>
   13e1c:	cmp	r0, #1
   13e20:	bne	13db0 <__assert_fail@plt+0x297c>
   13e24:	cmp	r5, #0
   13e28:	beq	13e38 <__assert_fail@plt+0x2a04>
   13e2c:	ldrsb	r2, [r5]
   13e30:	cmp	r2, #47	; 0x2f
   13e34:	beq	13e50 <__assert_fail@plt+0x2a1c>
   13e38:	cmp	r6, #0
   13e3c:	beq	13db0 <__assert_fail@plt+0x297c>
   13e40:	ldrsb	r2, [r6]
   13e44:	cmp	r2, #47	; 0x2f
   13e48:	bne	13db0 <__assert_fail@plt+0x297c>
   13e4c:	mov	r0, #1
   13e50:	ldr	r2, [sp, #12]
   13e54:	ldr	r3, [r9]
   13e58:	cmp	r2, r3
   13e5c:	bne	13e70 <__assert_fail@plt+0x2a3c>
   13e60:	add	sp, sp, #20
   13e64:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13e68:	mov	r0, #0
   13e6c:	b	13e50 <__assert_fail@plt+0x2a1c>
   13e70:	bl	11188 <__stack_chk_fail@plt>
   13e74:	andeq	r4, r1, r4, ror r2
   13e78:	andeq	r0, r0, r8, lsr #2
   13e7c:	rsbs	r3, r0, #1
   13e80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13e84:	movcc	r3, #0
   13e88:	rsbs	r4, r1, #1
   13e8c:	mov	r7, r1
   13e90:	mov	r6, r2
   13e94:	mov	sl, r0
   13e98:	movcc	r4, #0
   13e9c:	tst	r3, r4
   13ea0:	bne	13f04 <__assert_fail@plt+0x2ad0>
   13ea4:	cmp	r3, #0
   13ea8:	bne	13f1c <__assert_fail@plt+0x2ae8>
   13eac:	cmp	r4, #0
   13eb0:	bne	13f2c <__assert_fail@plt+0x2af8>
   13eb4:	bl	11284 <strlen@plt>
   13eb8:	mvn	r3, r0
   13ebc:	cmp	r6, r3
   13ec0:	mov	r5, r0
   13ec4:	bhi	13f14 <__assert_fail@plt+0x2ae0>
   13ec8:	add	r9, r0, r6
   13ecc:	add	r0, r9, #1
   13ed0:	bl	11218 <malloc@plt>
   13ed4:	subs	r8, r0, #0
   13ed8:	beq	13f34 <__assert_fail@plt+0x2b00>
   13edc:	mov	r1, sl
   13ee0:	mov	r2, r5
   13ee4:	bl	11164 <memcpy@plt>
   13ee8:	add	r0, r8, r5
   13eec:	mov	r1, r7
   13ef0:	mov	r2, r6
   13ef4:	bl	11164 <memcpy@plt>
   13ef8:	strb	r4, [r8, r9]
   13efc:	mov	r0, r8
   13f00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f04:	mov	r0, #1
   13f08:	mov	r1, r0
   13f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f10:	b	110ec <calloc@plt>
   13f14:	mov	r0, r4
   13f18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f1c:	mov	r0, r1
   13f20:	mov	r1, r2
   13f24:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f28:	b	111a0 <__strndup@plt>
   13f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f30:	b	112fc <__strdup@plt>
   13f34:	mov	r0, r8
   13f38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f3c:	push	{r3, r4, r5, lr}
   13f40:	subs	r4, r1, #0
   13f44:	mov	r5, r0
   13f48:	beq	13f68 <__assert_fail@plt+0x2b34>
   13f4c:	mov	r0, r4
   13f50:	bl	11284 <strlen@plt>
   13f54:	mov	r1, r4
   13f58:	mov	r2, r0
   13f5c:	mov	r0, r5
   13f60:	pop	{r3, r4, r5, lr}
   13f64:	b	13e7c <__assert_fail@plt+0x2a48>
   13f68:	mov	r2, r4
   13f6c:	mov	r0, r5
   13f70:	mov	r1, r4
   13f74:	pop	{r3, r4, r5, lr}
   13f78:	b	13e7c <__assert_fail@plt+0x2a48>
   13f7c:	push	{r1, r2, r3}
   13f80:	mov	r1, #1
   13f84:	push	{r4, r5, lr}
   13f88:	sub	sp, sp, #16
   13f8c:	ldr	lr, [pc, #124]	; 14010 <__assert_fail@plt+0x2bdc>
   13f90:	add	ip, sp, #32
   13f94:	ldr	r4, [pc, #120]	; 14014 <__assert_fail@plt+0x2be0>
   13f98:	mov	r5, r0
   13f9c:	add	lr, pc, lr
   13fa0:	mov	r3, ip
   13fa4:	ldr	r2, [sp, #28]
   13fa8:	add	r0, sp, #8
   13fac:	ldr	r4, [lr, r4]
   13fb0:	str	ip, [sp, #4]
   13fb4:	ldr	ip, [r4]
   13fb8:	str	ip, [sp, #12]
   13fbc:	bl	112f0 <__vasprintf_chk@plt>
   13fc0:	subs	r2, r0, #0
   13fc4:	blt	14004 <__assert_fail@plt+0x2bd0>
   13fc8:	mov	r0, r5
   13fcc:	ldr	r1, [sp, #8]
   13fd0:	bl	13e7c <__assert_fail@plt+0x2a48>
   13fd4:	mov	r5, r0
   13fd8:	ldr	r0, [sp, #8]
   13fdc:	bl	11140 <free@plt>
   13fe0:	mov	r0, r5
   13fe4:	ldr	r2, [sp, #12]
   13fe8:	ldr	r3, [r4]
   13fec:	cmp	r2, r3
   13ff0:	bne	1400c <__assert_fail@plt+0x2bd8>
   13ff4:	add	sp, sp, #16
   13ff8:	pop	{r4, r5, lr}
   13ffc:	add	sp, sp, #12
   14000:	bx	lr
   14004:	mov	r0, #0
   14008:	b	13fe4 <__assert_fail@plt+0x2bb0>
   1400c:	bl	11188 <__stack_chk_fail@plt>
   14010:	andeq	r4, r1, ip, asr r0
   14014:	andeq	r0, r0, r8, lsr #2
   14018:	ldr	ip, [pc, #372]	; 14194 <__assert_fail@plt+0x2d60>
   1401c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14020:	mov	r6, r0
   14024:	ldr	r0, [pc, #364]	; 14198 <__assert_fail@plt+0x2d64>
   14028:	add	ip, pc, ip
   1402c:	ldr	r4, [r6]
   14030:	mov	r9, r3
   14034:	sub	sp, sp, #12
   14038:	mov	r7, r1
   1403c:	ldr	r5, [ip, r0]
   14040:	mov	r8, r2
   14044:	ldrsb	ip, [r4]
   14048:	ldr	r3, [r5]
   1404c:	cmp	ip, #0
   14050:	moveq	r0, ip
   14054:	str	r3, [sp, #4]
   14058:	beq	14108 <__assert_fail@plt+0x2cd4>
   1405c:	mov	r0, r4
   14060:	mov	r1, r2
   14064:	bl	11428 <strspn@plt>
   14068:	ldrb	sl, [r4, r0]
   1406c:	add	r4, r4, r0
   14070:	cmp	sl, #0
   14074:	beq	14184 <__assert_fail@plt+0x2d50>
   14078:	cmp	r9, #0
   1407c:	beq	14120 <__assert_fail@plt+0x2cec>
   14080:	sxtb	r9, sl
   14084:	ldr	r0, [pc, #272]	; 1419c <__assert_fail@plt+0x2d68>
   14088:	mov	r1, r9
   1408c:	add	r0, pc, r0
   14090:	bl	11290 <strchr@plt>
   14094:	cmp	r0, #0
   14098:	beq	14144 <__assert_fail@plt+0x2d10>
   1409c:	add	fp, r4, #1
   140a0:	mov	r1, sp
   140a4:	mov	r3, #0
   140a8:	strb	sl, [sp]
   140ac:	mov	r0, fp
   140b0:	strb	r3, [sp, #1]
   140b4:	bl	12950 <__assert_fail@plt+0x151c>
   140b8:	add	r3, r4, r0
   140bc:	str	r0, [r7]
   140c0:	ldrb	r3, [r3, #1]
   140c4:	cmp	r3, #0
   140c8:	beq	14184 <__assert_fail@plt+0x2d50>
   140cc:	sxtb	r3, r3
   140d0:	cmp	r9, r3
   140d4:	bne	14184 <__assert_fail@plt+0x2d50>
   140d8:	add	r0, r0, #2
   140dc:	add	r7, r4, r0
   140e0:	ldrb	r1, [r4, r0]
   140e4:	cmp	r1, #0
   140e8:	beq	14100 <__assert_fail@plt+0x2ccc>
   140ec:	mov	r0, r8
   140f0:	sxtb	r1, r1
   140f4:	bl	11290 <strchr@plt>
   140f8:	cmp	r0, #0
   140fc:	beq	14184 <__assert_fail@plt+0x2d50>
   14100:	mov	r0, fp
   14104:	str	r7, [r6]
   14108:	ldr	r2, [sp, #4]
   1410c:	ldr	r3, [r5]
   14110:	cmp	r2, r3
   14114:	bne	14190 <__assert_fail@plt+0x2d5c>
   14118:	add	sp, sp, #12
   1411c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14120:	mov	r0, r4
   14124:	mov	r1, r8
   14128:	bl	1111c <strcspn@plt>
   1412c:	mov	r3, r0
   14130:	mov	r0, r4
   14134:	add	r4, r4, r3
   14138:	str	r3, [r7]
   1413c:	str	r4, [r6]
   14140:	b	14108 <__assert_fail@plt+0x2cd4>
   14144:	mov	r1, r8
   14148:	mov	r0, r4
   1414c:	bl	12950 <__assert_fail@plt+0x151c>
   14150:	str	r0, [r7]
   14154:	add	r7, r4, r0
   14158:	ldrb	r1, [r4, r0]
   1415c:	cmp	r1, #0
   14160:	beq	14178 <__assert_fail@plt+0x2d44>
   14164:	mov	r0, r8
   14168:	sxtb	r1, r1
   1416c:	bl	11290 <strchr@plt>
   14170:	cmp	r0, #0
   14174:	beq	1413c <__assert_fail@plt+0x2d08>
   14178:	str	r7, [r6]
   1417c:	mov	r0, r4
   14180:	b	14108 <__assert_fail@plt+0x2cd4>
   14184:	str	r4, [r6]
   14188:	mov	r0, #0
   1418c:	b	14108 <__assert_fail@plt+0x2cd4>
   14190:	bl	11188 <__stack_chk_fail@plt>
   14194:	ldrdeq	r3, [r1], -r0
   14198:	andeq	r0, r0, r8, lsr #2
   1419c:	strdeq	r3, [r0], -r8
   141a0:	push	{r4, lr}
   141a4:	mov	r4, r0
   141a8:	b	141b4 <__assert_fail@plt+0x2d80>
   141ac:	cmp	r0, #10
   141b0:	beq	141cc <__assert_fail@plt+0x2d98>
   141b4:	mov	r0, r4
   141b8:	bl	11320 <fgetc@plt>
   141bc:	cmn	r0, #1
   141c0:	bne	141ac <__assert_fail@plt+0x2d78>
   141c4:	mov	r0, #1
   141c8:	pop	{r4, pc}
   141cc:	mov	r0, #0
   141d0:	pop	{r4, pc}
   141d4:	push	{r3, r4, r5, r6, r7, lr}
   141d8:	mov	r4, r0
   141dc:	ldr	r0, [r0, #40]	; 0x28
   141e0:	mov	r7, r1
   141e4:	mov	r5, r2
   141e8:	cmp	r0, #0
   141ec:	beq	14258 <__assert_fail@plt+0x2e24>
   141f0:	bl	141d4 <__assert_fail@plt+0x2da0>
   141f4:	subs	r7, r0, #0
   141f8:	beq	14258 <__assert_fail@plt+0x2e24>
   141fc:	ldr	r2, [r4, #40]	; 0x28
   14200:	add	r3, r4, #32
   14204:	ldr	r2, [r2, #28]
   14208:	cmp	r2, r3
   1420c:	beq	14268 <__assert_fail@plt+0x2e34>
   14210:	ldr	r3, [r4]
   14214:	ldr	r3, [r3, #36]	; 0x24
   14218:	ldr	r6, [r3, #4]
   1421c:	mov	r0, r6
   14220:	bl	11284 <strlen@plt>
   14224:	mov	r4, r0
   14228:	ldr	r3, [r5]
   1422c:	cmp	r3, r4
   14230:	bcc	14260 <__assert_fail@plt+0x2e2c>
   14234:	mov	r2, r4
   14238:	mov	r1, r6
   1423c:	mov	r0, r7
   14240:	bl	11164 <memcpy@plt>
   14244:	ldr	r3, [r5]
   14248:	add	r0, r7, r4
   1424c:	rsb	r4, r4, r3
   14250:	str	r4, [r5]
   14254:	pop	{r3, r4, r5, r6, r7, pc}
   14258:	mov	r0, r7
   1425c:	pop	{r3, r4, r5, r6, r7, pc}
   14260:	mov	r0, #0
   14264:	pop	{r3, r4, r5, r6, r7, pc}
   14268:	ldr	r6, [pc, #8]	; 14278 <__assert_fail@plt+0x2e44>
   1426c:	mov	r4, #2
   14270:	add	r6, pc, r6
   14274:	b	14228 <__assert_fail@plt+0x2df4>
   14278:	andeq	r3, r0, r8, lsl r8
   1427c:	push	{r4, r5, r6, r7, r8, lr}
   14280:	sub	sp, sp, #16
   14284:	ldr	ip, [r0, #4]
   14288:	mov	r4, r0
   1428c:	ldr	r7, [sp, #40]	; 0x28
   14290:	mov	r8, r2
   14294:	mov	r0, r3
   14298:	mov	r5, r3
   1429c:	ldr	r6, [ip, r1, lsl #2]
   142a0:	mov	r1, #0
   142a4:	mov	r2, r7
   142a8:	bl	11308 <memset@plt>
   142ac:	cmp	r6, #0
   142b0:	beq	143b8 <__assert_fail@plt+0x2f84>
   142b4:	ldr	r3, [r8]
   142b8:	ands	r8, r3, #64	; 0x40
   142bc:	beq	14360 <__assert_fail@plt+0x2f2c>
   142c0:	ldr	r0, [r4, #40]	; 0x28
   142c4:	cmp	r0, #0
   142c8:	beq	1433c <__assert_fail@plt+0x2f08>
   142cc:	mov	r1, r5
   142d0:	add	r2, sp, #40	; 0x28
   142d4:	bl	141d4 <__assert_fail@plt+0x2da0>
   142d8:	subs	r8, r0, #0
   142dc:	beq	143b8 <__assert_fail@plt+0x2f84>
   142e0:	ldr	r3, [r4, #40]	; 0x28
   142e4:	ldr	r2, [r4]
   142e8:	cmp	r3, #0
   142ec:	ldr	ip, [r2, #36]	; 0x24
   142f0:	ldreq	r1, [sp, #40]	; 0x28
   142f4:	beq	14344 <__assert_fail@plt+0x2f10>
   142f8:	ldr	r3, [r3, #28]
   142fc:	add	r4, r4, #32
   14300:	cmp	r3, r4
   14304:	beq	14384 <__assert_fail@plt+0x2f50>
   14308:	ldr	lr, [pc, #176]	; 143c0 <__assert_fail@plt+0x2f8c>
   1430c:	mov	r2, #1
   14310:	ldr	r1, [sp, #40]	; 0x28
   14314:	mvn	r3, #0
   14318:	add	lr, pc, lr
   1431c:	str	lr, [sp]
   14320:	ldr	ip, [ip]
   14324:	str	r6, [sp, #8]
   14328:	str	ip, [sp, #4]
   1432c:	bl	1141c <__snprintf_chk@plt>
   14330:	mov	r0, r5
   14334:	add	sp, sp, #16
   14338:	pop	{r4, r5, r6, r7, r8, pc}
   1433c:	mov	r1, r7
   14340:	mov	r8, r5
   14344:	ldr	r2, [pc, #120]	; 143c4 <__assert_fail@plt+0x2f90>
   14348:	mov	r0, r8
   1434c:	mov	r3, r6
   14350:	add	r2, pc, r2
   14354:	bl	112d8 <snprintf@plt>
   14358:	mov	r0, r5
   1435c:	b	14334 <__assert_fail@plt+0x2f00>
   14360:	mov	r2, r7
   14364:	mov	r1, r6
   14368:	mov	r0, r5
   1436c:	add	r7, r5, r7
   14370:	bl	11314 <strncpy@plt>
   14374:	mov	r0, r5
   14378:	strb	r8, [r7, #-1]
   1437c:	add	sp, sp, #16
   14380:	pop	{r4, r5, r6, r7, r8, pc}
   14384:	ldr	lr, [pc, #60]	; 143c8 <__assert_fail@plt+0x2f94>
   14388:	mov	r2, #1
   1438c:	ldr	r1, [sp, #40]	; 0x28
   14390:	mvn	r3, #0
   14394:	add	lr, pc, lr
   14398:	str	lr, [sp]
   1439c:	ldr	ip, [ip, #8]
   143a0:	str	r6, [sp, #8]
   143a4:	str	ip, [sp, #4]
   143a8:	bl	1141c <__snprintf_chk@plt>
   143ac:	mov	r0, r5
   143b0:	add	sp, sp, #16
   143b4:	pop	{r4, r5, r6, r7, r8, pc}
   143b8:	mov	r0, #0
   143bc:	b	14334 <__assert_fail@plt+0x2f00>
   143c0:	andeq	r3, r0, r4, ror r7
   143c4:	andeq	r2, r0, r8, asr sp
   143c8:	strdeq	r3, [r0], -r8
   143cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d0:	mov	r5, r0
   143d4:	ldr	fp, [r5, #28]!
   143d8:	mov	sl, #0
   143dc:	sub	sp, sp, #12
   143e0:	mov	r4, r1
   143e4:	cmp	fp, r5
   143e8:	mov	r6, r2
   143ec:	mov	r7, r3
   143f0:	str	sl, [r1, #8]
   143f4:	beq	144b8 <__assert_fail@plt+0x3084>
   143f8:	add	r8, r1, #32
   143fc:	mov	r9, sl
   14400:	b	1445c <__assert_fail@plt+0x3028>
   14404:	bl	15858 <__assert_fail@plt+0x4424>
   14408:	cmn	r0, #1
   1440c:	beq	1447c <__assert_fail@plt+0x3048>
   14410:	ldr	r3, [r4, #16]
   14414:	cmp	r0, r3
   14418:	strhi	r0, [r4, #16]
   1441c:	ldr	r3, [r4, #36]	; 0x24
   14420:	cmp	r3, #0
   14424:	beq	14434 <__assert_fail@plt+0x3000>
   14428:	ldr	r3, [r4, #20]
   1442c:	cmp	r0, r3, lsl #1
   14430:	bhi	14450 <__assert_fail@plt+0x301c>
   14434:	ldr	r3, [r4, #32]
   14438:	tst	r3, #512	; 0x200
   1443c:	ldr	r3, [r4, #8]
   14440:	addne	sl, sl, r0
   14444:	addne	r9, r9, #1
   14448:	cmp	r3, r0
   1444c:	strcc	r0, [r4, #8]
   14450:	ldr	fp, [fp]
   14454:	cmp	fp, r5
   14458:	beq	14484 <__assert_fail@plt+0x3050>
   1445c:	ldr	r1, [r4, #4]
   14460:	sub	r0, fp, #16
   14464:	str	r7, [sp]
   14468:	mov	r2, r8
   1446c:	mov	r3, r6
   14470:	bl	1427c <__assert_fail@plt+0x2e48>
   14474:	cmp	r0, #0
   14478:	bne	14404 <__assert_fail@plt+0x2fd0>
   1447c:	mov	r0, #0
   14480:	b	1441c <__assert_fail@plt+0x2fe8>
   14484:	cmp	r9, #0
   14488:	beq	144b8 <__assert_fail@plt+0x3084>
   1448c:	ldr	r3, [r4, #20]
   14490:	cmp	r3, #0
   14494:	bne	144b8 <__assert_fail@plt+0x3084>
   14498:	mov	r0, sl
   1449c:	mov	r1, r9
   144a0:	bl	1624c <__assert_fail@plt+0x4e18>
   144a4:	ldr	r3, [r4, #16]
   144a8:	cmp	r3, r0, lsl #1
   144ac:	str	r0, [r4, #20]
   144b0:	movhi	r3, #1
   144b4:	strhi	r3, [r4, #36]	; 0x24
   144b8:	ldr	r0, [r4]
   144bc:	cmp	r0, #0
   144c0:	ldreq	r2, [r4, #12]
   144c4:	beq	144d4 <__assert_fail@plt+0x30a0>
   144c8:	bl	15858 <__assert_fail@plt+0x4424>
   144cc:	mov	r2, r0
   144d0:	str	r0, [r4, #12]
   144d4:	ldr	r3, [r4, #8]
   144d8:	cmp	r2, r3
   144dc:	bls	144f0 <__assert_fail@plt+0x30bc>
   144e0:	ldr	r1, [r4, #32]
   144e4:	tst	r1, #256	; 0x100
   144e8:	streq	r2, [r4, #8]
   144ec:	beq	1451c <__assert_fail@plt+0x30e8>
   144f0:	vmov.f64	d6, #112	; 0x3f800000  1.0
   144f4:	vldr	d7, [r4, #24]
   144f8:	vcmpe.f64	d7, d6
   144fc:	vmrs	APSR_nzcv, fpscr
   14500:	blt	1451c <__assert_fail@plt+0x30e8>
   14504:	vcvt.u32.f64	s13, d7
   14508:	vmov	r1, s13
   1450c:	cmp	r3, r1
   14510:	bcs	1451c <__assert_fail@plt+0x30e8>
   14514:	cmp	r2, r1
   14518:	strcc	r1, [r4, #8]
   1451c:	add	sp, sp, #12
   14520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14524:	push	{r3, r4, r5, lr}
   14528:	mov	r1, #40	; 0x28
   1452c:	mov	r5, r0
   14530:	mov	r0, #1
   14534:	bl	110ec <calloc@plt>
   14538:	subs	r4, r0, #0
   1453c:	beq	1457c <__assert_fail@plt+0x3148>
   14540:	tst	r5, #4
   14544:	add	r2, r4, #28
   14548:	add	r3, r4, #20
   1454c:	str	r5, [r4, #12]
   14550:	str	r2, [r4, #28]
   14554:	str	r2, [r4, #32]
   14558:	str	r3, [r4, #20]
   1455c:	str	r3, [r4, #24]
   14560:	beq	14584 <__assert_fail@plt+0x3150>
   14564:	ldr	r3, [pc, #68]	; 145b0 <__assert_fail@plt+0x317c>
   14568:	add	r3, pc, r3
   1456c:	add	r3, r3, #12
   14570:	str	r3, [r4, #36]	; 0x24
   14574:	mov	r3, #1
   14578:	str	r3, [r4, #16]
   1457c:	mov	r0, r4
   14580:	pop	{r3, r4, r5, pc}
   14584:	mov	r0, #14
   14588:	bl	11398 <nl_langinfo@plt>
   1458c:	ldr	r1, [pc, #32]	; 145b4 <__assert_fail@plt+0x3180>
   14590:	add	r1, pc, r1
   14594:	bl	11104 <strcmp@plt>
   14598:	cmp	r0, #0
   1459c:	bne	14564 <__assert_fail@plt+0x3130>
   145a0:	ldr	r3, [pc, #16]	; 145b8 <__assert_fail@plt+0x3184>
   145a4:	add	r3, pc, r3
   145a8:	str	r3, [r4, #36]	; 0x24
   145ac:	b	14574 <__assert_fail@plt+0x3140>
   145b0:	andeq	r3, r1, r0, lsl #19
   145b4:	andeq	r3, r0, r4, lsl #10
   145b8:	andeq	r3, r1, r4, asr #18
   145bc:	push	{r4, r5, r6, lr}
   145c0:	subs	r5, r0, #0
   145c4:	popeq	{r4, r5, r6, pc}
   145c8:	ldr	r4, [r5, #28]
   145cc:	add	r6, r5, #28
   145d0:	cmp	r6, r4
   145d4:	popeq	{r4, r5, r6, pc}
   145d8:	ldm	r4, {r2, r3}
   145dc:	ldr	r0, [r4, #-12]
   145e0:	str	r3, [r2, #4]
   145e4:	str	r2, [r3]
   145e8:	bl	11140 <free@plt>
   145ec:	sub	r0, r4, #16
   145f0:	bl	11140 <free@plt>
   145f4:	ldr	r4, [r5, #28]
   145f8:	cmp	r4, r6
   145fc:	bne	145d8 <__assert_fail@plt+0x31a4>
   14600:	pop	{r4, r5, r6, pc}
   14604:	push	{r3, r4, r5, lr}
   14608:	subs	r4, r0, #0
   1460c:	popeq	{r3, r4, r5, pc}
   14610:	bl	145bc <__assert_fail@plt+0x3188>
   14614:	ldr	r3, [r4, #20]
   14618:	add	r5, r4, #20
   1461c:	cmp	r5, r3
   14620:	beq	14648 <__assert_fail@plt+0x3214>
   14624:	mov	r0, r3
   14628:	ldr	r3, [r3, #4]
   1462c:	ldr	r2, [r0], #-40	; 0xffffffd8
   14630:	str	r3, [r2, #4]
   14634:	str	r2, [r3]
   14638:	bl	11140 <free@plt>
   1463c:	ldr	r3, [r4, #20]
   14640:	cmp	r3, r5
   14644:	bne	14624 <__assert_fail@plt+0x31f0>
   14648:	mov	r0, r4
   1464c:	pop	{r3, r4, r5, lr}
   14650:	b	11140 <free@plt>
   14654:	push	{r4, r5, r6, lr}
   14658:	vpush	{d8}
   1465c:	subs	r4, r0, #0
   14660:	mov	r6, r1
   14664:	vmov.f64	d8, d0
   14668:	mov	r5, r2
   1466c:	beq	146dc <__assert_fail@plt+0x32a8>
   14670:	mov	r0, #1
   14674:	mov	r1, #48	; 0x30
   14678:	bl	110ec <calloc@plt>
   1467c:	subs	r3, r0, #0
   14680:	beq	146dc <__assert_fail@plt+0x32a8>
   14684:	ldr	r2, [r4]
   14688:	tst	r5, #64	; 0x40
   1468c:	str	r6, [r3]
   14690:	vstr	d8, [r3, #24]
   14694:	add	r1, r2, #1
   14698:	str	r5, [r3, #32]
   1469c:	str	r1, [r4]
   146a0:	mov	r0, r3
   146a4:	str	r2, [r3, #4]
   146a8:	add	r4, r4, #20
   146ac:	ldrne	r2, [r4, #-8]
   146b0:	orrne	r2, r2, #64	; 0x40
   146b4:	strne	r2, [r4, #-8]
   146b8:	add	r2, r3, #40	; 0x28
   146bc:	str	r2, [r3, #44]	; 0x2c
   146c0:	ldr	r1, [r4, #4]
   146c4:	str	r2, [r4, #4]
   146c8:	str	r4, [r3, #40]	; 0x28
   146cc:	str	r1, [r3, #44]	; 0x2c
   146d0:	str	r2, [r1]
   146d4:	vpop	{d8}
   146d8:	pop	{r4, r5, r6, pc}
   146dc:	mov	r0, #0
   146e0:	b	146d4 <__assert_fail@plt+0x32a0>
   146e4:	push	{r4, r5, r6, r7, r8, lr}
   146e8:	subs	r5, r0, #0
   146ec:	mov	r6, r1
   146f0:	beq	1479c <__assert_fail@plt+0x3368>
   146f4:	ldr	r7, [r5]
   146f8:	cmp	r7, #0
   146fc:	beq	1479c <__assert_fail@plt+0x3368>
   14700:	mov	r0, #1
   14704:	mov	r1, #44	; 0x2c
   14708:	bl	110ec <calloc@plt>
   1470c:	cmp	r0, #0
   14710:	mov	r4, r0
   14714:	mov	r8, r0
   14718:	beq	1479c <__assert_fail@plt+0x3368>
   1471c:	mov	r0, r7
   14720:	mov	r1, #4
   14724:	bl	110ec <calloc@plt>
   14728:	cmp	r0, #0
   1472c:	str	r0, [r4, #4]
   14730:	beq	147a0 <__assert_fail@plt+0x336c>
   14734:	add	r2, r4, #16
   14738:	add	r3, r4, #32
   1473c:	str	r2, [r4, #20]
   14740:	add	r0, r4, #24
   14744:	str	r3, [r4, #36]	; 0x24
   14748:	cmp	r6, #0
   1474c:	str	r0, [r4, #28]
   14750:	add	ip, r5, #28
   14754:	ldr	r1, [r5, #32]
   14758:	str	r5, [r4]
   1475c:	str	r6, [r4, #40]	; 0x28
   14760:	str	r3, [r4, #32]
   14764:	str	r0, [r4, #24]
   14768:	str	r2, [r5, #32]
   1476c:	str	r1, [r4, #20]
   14770:	str	ip, [r4, #16]
   14774:	str	r2, [r1]
   14778:	beq	147b0 <__assert_fail@plt+0x337c>
   1477c:	ldr	r2, [r6, #28]
   14780:	add	r1, r6, #24
   14784:	str	r3, [r6, #28]
   14788:	mov	r0, r4
   1478c:	str	r1, [r4, #32]
   14790:	str	r2, [r4, #36]	; 0x24
   14794:	str	r3, [r2]
   14798:	pop	{r4, r5, r6, r7, r8, pc}
   1479c:	mov	r8, #0
   147a0:	mov	r0, r8
   147a4:	bl	11140 <free@plt>
   147a8:	mov	r0, #0
   147ac:	pop	{r4, r5, r6, r7, r8, pc}
   147b0:	mov	r0, r4
   147b4:	pop	{r4, r5, r6, r7, r8, pc}
   147b8:	ldr	r3, [r0, #20]!
   147bc:	cmp	r3, r0
   147c0:	bne	147d4 <__assert_fail@plt+0x33a0>
   147c4:	b	147e8 <__assert_fail@plt+0x33b4>
   147c8:	ldr	r3, [r3]
   147cc:	cmp	r3, r0
   147d0:	beq	147e8 <__assert_fail@plt+0x33b4>
   147d4:	ldr	r2, [r3, #-36]	; 0xffffffdc
   147d8:	cmp	r2, r1
   147dc:	bne	147c8 <__assert_fail@plt+0x3394>
   147e0:	sub	r0, r3, #40	; 0x28
   147e4:	bx	lr
   147e8:	mov	r0, #0
   147ec:	bx	lr
   147f0:	push	{r3, r4, r5, r6, r7, lr}
   147f4:	subs	r4, r0, #0
   147f8:	mov	r5, r2
   147fc:	beq	14868 <__assert_fail@plt+0x3434>
   14800:	ldr	r0, [r4]
   14804:	bl	147b8 <__assert_fail@plt+0x3384>
   14808:	cmp	r0, #0
   1480c:	beq	14868 <__assert_fail@plt+0x3434>
   14810:	ldr	r7, [r0, #4]
   14814:	ldr	r6, [r4, #4]
   14818:	ldr	r0, [r6, r7, lsl #2]
   1481c:	cmp	r0, #0
   14820:	beq	1483c <__assert_fail@plt+0x3408>
   14824:	bl	11284 <strlen@plt>
   14828:	ldr	r3, [r4, #12]
   1482c:	cmp	r0, r3
   14830:	rsbcc	r0, r0, r3
   14834:	movcs	r0, #0
   14838:	str	r0, [r4, #12]
   1483c:	cmp	r5, #0
   14840:	str	r5, [r6, r7, lsl #2]
   14844:	beq	14860 <__assert_fail@plt+0x342c>
   14848:	mov	r0, r5
   1484c:	mov	r5, #0
   14850:	bl	11284 <strlen@plt>
   14854:	ldr	r3, [r4, #12]
   14858:	add	r0, r3, r0
   1485c:	str	r0, [r4, #12]
   14860:	mov	r0, r5
   14864:	pop	{r3, r4, r5, r6, r7, pc}
   14868:	mvn	r5, #0
   1486c:	b	14860 <__assert_fail@plt+0x342c>
   14870:	cmp	r0, #0
   14874:	strne	r1, [r0, #8]
   14878:	movne	r0, #0
   1487c:	mvneq	r0, #0
   14880:	bx	lr
   14884:	push	{r4, r5, r6, r7, r8, lr}
   14888:	mov	r6, r0
   1488c:	mov	r0, #34	; 0x22
   14890:	mov	r7, r1
   14894:	bl	113a4 <fputc@plt>
   14898:	cmp	r6, #0
   1489c:	beq	14928 <__assert_fail@plt+0x34f4>
   148a0:	ldrb	r4, [r6]
   148a4:	cmp	r4, #0
   148a8:	beq	14928 <__assert_fail@plt+0x34f4>
   148ac:	ldr	r8, [pc, #132]	; 14938 <__assert_fail@plt+0x3504>
   148b0:	add	r8, pc, r8
   148b4:	b	148dc <__assert_fail@plt+0x34a8>
   148b8:	mov	r1, #1
   148bc:	mov	r0, r7
   148c0:	mov	r2, r8
   148c4:	bl	11350 <__fprintf_chk@plt>
   148c8:	cmn	r6, #1
   148cc:	beq	14928 <__assert_fail@plt+0x34f4>
   148d0:	ldrb	r4, [r6, #1]!
   148d4:	cmp	r4, #0
   148d8:	beq	14928 <__assert_fail@plt+0x34f4>
   148dc:	sxtb	r5, r4
   148e0:	cmp	r5, #34	; 0x22
   148e4:	cmpne	r5, #92	; 0x5c
   148e8:	uxtbeq	r3, r4
   148ec:	beq	148b8 <__assert_fail@plt+0x3484>
   148f0:	bl	11254 <__ctype_b_loc@plt>
   148f4:	uxtb	r3, r4
   148f8:	movw	ip, #16386	; 0x4002
   148fc:	lsl	lr, r3, #1
   14900:	ldr	r2, [r0]
   14904:	ldrh	r2, [r2, lr]
   14908:	and	ip, r2, ip
   1490c:	cmp	ip, #16384	; 0x4000
   14910:	bne	148b8 <__assert_fail@plt+0x3484>
   14914:	mov	r0, r5
   14918:	mov	r1, r7
   1491c:	bl	113a4 <fputc@plt>
   14920:	cmn	r6, #1
   14924:	bne	148d0 <__assert_fail@plt+0x349c>
   14928:	mov	r1, r7
   1492c:	mov	r0, #34	; 0x22
   14930:	pop	{r4, r5, r6, r7, r8, lr}
   14934:	b	113a4 <fputc@plt>
   14938:	andeq	r3, r0, ip, ror #3
   1493c:	cmp	r0, #0
   14940:	push	{r4, r5, r6, r7, r8, lr}
   14944:	mov	r6, r1
   14948:	popeq	{r4, r5, r6, r7, r8, pc}
   1494c:	ldrb	r4, [r0]
   14950:	cmp	r4, #0
   14954:	popeq	{r4, r5, r6, r7, r8, pc}
   14958:	mov	r5, r0
   1495c:	bl	11254 <__ctype_b_loc@plt>
   14960:	ldr	r7, [pc, #124]	; 149e4 <__assert_fail@plt+0x35b0>
   14964:	add	r7, pc, r7
   14968:	mov	r8, r0
   1496c:	b	14988 <__assert_fail@plt+0x3554>
   14970:	bl	11350 <__fprintf_chk@plt>
   14974:	cmn	r5, #1
   14978:	popeq	{r4, r5, r6, r7, r8, pc}
   1497c:	ldrb	r4, [r5, #1]!
   14980:	cmp	r4, #0
   14984:	beq	149e0 <__assert_fail@plt+0x35ac>
   14988:	uxtb	r3, r4
   1498c:	ldr	lr, [r8]
   14990:	mov	r1, #1
   14994:	mov	r0, r6
   14998:	lsl	ip, r3, r1
   1499c:	mov	r2, r7
   149a0:	sxtb	r4, r4
   149a4:	ldrh	lr, [lr, ip]
   149a8:	movw	ip, #16386	; 0x4002
   149ac:	tst	lr, #1
   149b0:	and	ip, lr, ip
   149b4:	bne	14970 <__assert_fail@plt+0x353c>
   149b8:	cmp	r4, #92	; 0x5c
   149bc:	beq	14970 <__assert_fail@plt+0x353c>
   149c0:	cmp	ip, #16384	; 0x4000
   149c4:	bne	14970 <__assert_fail@plt+0x353c>
   149c8:	mov	r0, r4
   149cc:	mov	r1, r6
   149d0:	bl	113a4 <fputc@plt>
   149d4:	cmn	r5, #1
   149d8:	bne	1497c <__assert_fail@plt+0x3548>
   149dc:	pop	{r4, r5, r6, r7, r8, pc}
   149e0:	pop	{r4, r5, r6, r7, r8, pc}
   149e4:	andeq	r3, r0, r8, lsr r1
   149e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149ec:	subs	r4, r2, #0
   149f0:	ldr	r5, [pc, #728]	; 14cd0 <__assert_fail@plt+0x389c>
   149f4:	sub	sp, sp, #36	; 0x24
   149f8:	ldr	r3, [pc, #724]	; 14cd4 <__assert_fail@plt+0x38a0>
   149fc:	mov	r2, #0
   14a00:	add	r5, pc, r5
   14a04:	mov	r7, r0
   14a08:	mov	r8, r1
   14a0c:	ldr	r9, [r5, r3]
   14a10:	str	r2, [sp, #20]
   14a14:	ldr	r3, [r9]
   14a18:	str	r3, [sp, #28]
   14a1c:	beq	14cb4 <__assert_fail@plt+0x3880>
   14a20:	ldr	r3, [r7, #12]
   14a24:	tst	r3, #2
   14a28:	bne	14be0 <__assert_fail@plt+0x37ac>
   14a2c:	tst	r3, #16
   14a30:	beq	14a90 <__assert_fail@plt+0x365c>
   14a34:	ldr	r0, [pc, #668]	; 14cd8 <__assert_fail@plt+0x38a4>
   14a38:	mov	r1, #1
   14a3c:	ldr	r2, [pc, #664]	; 14cdc <__assert_fail@plt+0x38a8>
   14a40:	ldr	r3, [r8], #40	; 0x28
   14a44:	ldr	r5, [r5, r0]
   14a48:	add	r2, pc, r2
   14a4c:	ldr	r0, [r5]
   14a50:	bl	11350 <__fprintf_chk@plt>
   14a54:	mov	r0, r4
   14a58:	ldr	r1, [r5]
   14a5c:	bl	14884 <__assert_fail@plt+0x3450>
   14a60:	ldr	r3, [r7, #24]
   14a64:	cmp	r3, r8
   14a68:	beq	14a78 <__assert_fail@plt+0x3644>
   14a6c:	ldr	r1, [r5]
   14a70:	mov	r0, #32
   14a74:	bl	113a4 <fputc@plt>
   14a78:	ldr	r2, [sp, #28]
   14a7c:	ldr	r3, [r9]
   14a80:	cmp	r2, r3
   14a84:	bne	14ccc <__assert_fail@plt+0x3898>
   14a88:	add	sp, sp, #36	; 0x24
   14a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a90:	mov	r0, r4
   14a94:	add	r1, sp, #20
   14a98:	bl	15d5c <__assert_fail@plt+0x4928>
   14a9c:	subs	fp, r0, #0
   14aa0:	movne	r4, fp
   14aa4:	beq	14cc0 <__assert_fail@plt+0x388c>
   14aa8:	ldr	r3, [sp, #20]
   14aac:	add	sl, r8, #40	; 0x28
   14ab0:	ldr	r1, [r7, #24]
   14ab4:	sub	r2, r3, #1
   14ab8:	cmn	r2, #3
   14abc:	movhi	r4, #0
   14ac0:	movls	r2, r3
   14ac4:	ldr	r3, [r8, #8]
   14ac8:	movhi	r2, r4
   14acc:	strhi	r4, [sp, #20]
   14ad0:	cmp	sl, r1
   14ad4:	str	r3, [sp, #24]
   14ad8:	beq	14b20 <__assert_fail@plt+0x36ec>
   14adc:	cmp	r3, r2
   14ae0:	bcs	14b30 <__assert_fail@plt+0x36fc>
   14ae4:	ldr	r1, [r8, #32]
   14ae8:	tst	r1, #32
   14aec:	beq	14b30 <__assert_fail@plt+0x36fc>
   14af0:	cmp	r4, #0
   14af4:	beq	14b14 <__assert_fail@plt+0x36e0>
   14af8:	mov	r0, r4
   14afc:	add	r1, sp, #24
   14b00:	bl	15e10 <__assert_fail@plt+0x49dc>
   14b04:	cmn	r0, #1
   14b08:	str	r0, [sp, #20]
   14b0c:	bne	14b3c <__assert_fail@plt+0x3708>
   14b10:	ldr	r3, [sp, #24]
   14b14:	mov	r4, #0
   14b18:	str	r4, [sp, #20]
   14b1c:	b	14b70 <__assert_fail@plt+0x373c>
   14b20:	cmp	r3, r2
   14b24:	strhi	r2, [sp, #24]
   14b28:	movhi	r3, r2
   14b2c:	bls	14adc <__assert_fail@plt+0x36a8>
   14b30:	cmp	r4, #0
   14b34:	moveq	r4, r2
   14b38:	beq	14b70 <__assert_fail@plt+0x373c>
   14b3c:	ldr	r3, [r7, #12]
   14b40:	tst	r3, #2
   14b44:	bne	14b54 <__assert_fail@plt+0x3720>
   14b48:	ldr	r3, [r8, #32]
   14b4c:	tst	r3, #128	; 0x80
   14b50:	bne	14c6c <__assert_fail@plt+0x3838>
   14b54:	ldr	r3, [pc, #380]	; 14cd8 <__assert_fail@plt+0x38a4>
   14b58:	mov	r0, r4
   14b5c:	ldr	r6, [r5, r3]
   14b60:	ldr	r1, [r6]
   14b64:	bl	113ec <fputs@plt>
   14b68:	ldr	r3, [sp, #24]
   14b6c:	ldr	r4, [sp, #20]
   14b70:	cmp	r4, r3
   14b74:	bcs	14b9c <__assert_fail@plt+0x3768>
   14b78:	ldr	r3, [pc, #344]	; 14cd8 <__assert_fail@plt+0x38a4>
   14b7c:	ldr	r6, [r5, r3]
   14b80:	mov	r0, #32
   14b84:	ldr	r1, [r6]
   14b88:	bl	113a4 <fputc@plt>
   14b8c:	ldr	r3, [sp, #24]
   14b90:	add	r4, r4, #1
   14b94:	cmp	r3, r4
   14b98:	bhi	14b80 <__assert_fail@plt+0x374c>
   14b9c:	ldr	r2, [r7, #24]
   14ba0:	cmp	sl, r2
   14ba4:	beq	14bd4 <__assert_fail@plt+0x37a0>
   14ba8:	ldr	r2, [sp, #20]
   14bac:	cmp	r2, r3
   14bb0:	ldr	r3, [pc, #288]	; 14cd8 <__assert_fail@plt+0x38a4>
   14bb4:	bls	14bc4 <__assert_fail@plt+0x3790>
   14bb8:	ldr	r4, [r8, #32]
   14bbc:	ands	r4, r4, #32
   14bc0:	beq	14c14 <__assert_fail@plt+0x37e0>
   14bc4:	ldr	r3, [r5, r3]
   14bc8:	mov	r0, #32
   14bcc:	ldr	r1, [r3]
   14bd0:	bl	113a4 <fputc@plt>
   14bd4:	mov	r0, fp
   14bd8:	bl	11140 <free@plt>
   14bdc:	b	14a78 <__assert_fail@plt+0x3644>
   14be0:	ldr	r3, [pc, #240]	; 14cd8 <__assert_fail@plt+0x38a4>
   14be4:	mov	r0, r4
   14be8:	add	r8, r8, #40	; 0x28
   14bec:	ldr	r4, [r5, r3]
   14bf0:	ldr	r1, [r4]
   14bf4:	bl	1493c <__assert_fail@plt+0x3508>
   14bf8:	ldr	r3, [r7, #24]
   14bfc:	cmp	r3, r8
   14c00:	beq	14a78 <__assert_fail@plt+0x3644>
   14c04:	ldr	r1, [r4]
   14c08:	mov	r0, #32
   14c0c:	bl	113a4 <fputc@plt>
   14c10:	b	14a78 <__assert_fail@plt+0x3644>
   14c14:	ldr	r3, [r5, r3]
   14c18:	mov	r0, #10
   14c1c:	ldr	sl, [pc, #188]	; 14ce0 <__assert_fail@plt+0x38ac>
   14c20:	ldr	r6, [pc, #188]	; 14ce4 <__assert_fail@plt+0x38b0>
   14c24:	ldr	r1, [r3]
   14c28:	add	sl, pc, sl
   14c2c:	add	r6, pc, r6
   14c30:	bl	113a4 <fputc@plt>
   14c34:	mov	r1, r4
   14c38:	mov	r0, r7
   14c3c:	bl	147b8 <__assert_fail@plt+0x3384>
   14c40:	mov	r3, r6
   14c44:	mov	r1, sl
   14c48:	add	r4, r4, #1
   14c4c:	ldr	r2, [r0, #8]
   14c50:	mov	r0, #1
   14c54:	rsb	r2, r2, #0
   14c58:	bl	1132c <__printf_chk@plt>
   14c5c:	ldr	r3, [r8, #4]
   14c60:	cmp	r3, r4
   14c64:	bcs	14c34 <__assert_fail@plt+0x3800>
   14c68:	b	14bd4 <__assert_fail@plt+0x37a0>
   14c6c:	ldr	r3, [pc, #100]	; 14cd8 <__assert_fail@plt+0x38a4>
   14c70:	mov	r1, #1
   14c74:	ldr	ip, [r8, #8]
   14c78:	ldr	r2, [pc, #104]	; 14ce8 <__assert_fail@plt+0x38b4>
   14c7c:	ldr	r6, [r5, r3]
   14c80:	add	r2, pc, r2
   14c84:	mov	r3, ip
   14c88:	ldr	r0, [r6]
   14c8c:	str	r4, [sp]
   14c90:	str	ip, [sp, #12]
   14c94:	bl	11350 <__fprintf_chk@plt>
   14c98:	ldr	r4, [sp, #20]
   14c9c:	ldr	ip, [sp, #12]
   14ca0:	ldr	r3, [sp, #24]
   14ca4:	cmp	ip, r4
   14ca8:	strhi	ip, [sp, #20]
   14cac:	movhi	r4, ip
   14cb0:	b	14b70 <__assert_fail@plt+0x373c>
   14cb4:	ldr	r4, [pc, #48]	; 14cec <__assert_fail@plt+0x38b8>
   14cb8:	add	r4, pc, r4
   14cbc:	b	14a20 <__assert_fail@plt+0x35ec>
   14cc0:	ldr	r4, [pc, #40]	; 14cf0 <__assert_fail@plt+0x38bc>
   14cc4:	add	r4, pc, r4
   14cc8:	b	14aa8 <__assert_fail@plt+0x3674>
   14ccc:	bl	11188 <__stack_chk_fail@plt>
   14cd0:	strdeq	r3, [r1], -r8
   14cd4:	andeq	r0, r0, r8, lsr #2
   14cd8:	andeq	r0, r0, r4, lsr r1
   14cdc:	andeq	r3, r0, ip, asr r0
   14ce0:	andeq	r2, r0, r4, lsl #29
   14ce4:	andeq	r2, r0, ip, lsl #23
   14ce8:	andeq	r2, r0, r8, lsr #28
   14cec:	strdeq	r2, [r0], -ip
   14cf0:	strdeq	r2, [r0], -r0
   14cf4:	ldr	r3, [r0, #16]
   14cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cfc:	cmp	r3, #0
   14d00:	sub	sp, sp, #12
   14d04:	mov	r8, r2
   14d08:	ldr	r2, [pc, #160]	; 14db0 <__assert_fail@plt+0x397c>
   14d0c:	mov	r6, r0
   14d10:	mov	r5, r1
   14d14:	add	r2, pc, r2
   14d18:	str	r2, [sp, #4]
   14d1c:	beq	14da8 <__assert_fail@plt+0x3974>
   14d20:	ldr	sl, [r0, #12]
   14d24:	ands	sl, sl, #24
   14d28:	bne	14da8 <__assert_fail@plt+0x3974>
   14d2c:	ldr	r2, [r0, #28]
   14d30:	add	r3, r0, #28
   14d34:	cmp	r2, r3
   14d38:	beq	14da8 <__assert_fail@plt+0x3974>
   14d3c:	mov	r7, r0
   14d40:	ldr	r4, [r7, #20]!
   14d44:	cmp	r4, r7
   14d48:	subne	r9, r8, #1
   14d4c:	addne	r9, r1, r9
   14d50:	beq	14d88 <__assert_fail@plt+0x3954>
   14d54:	mov	fp, r4
   14d58:	mov	r2, r8
   14d5c:	ldr	r1, [fp, #-40]!	; 0xffffffd8
   14d60:	mov	r0, r5
   14d64:	bl	11314 <strncpy@plt>
   14d68:	strb	sl, [r9]
   14d6c:	mov	r0, r6
   14d70:	mov	r2, r5
   14d74:	mov	r1, fp
   14d78:	bl	149e8 <__assert_fail@plt+0x35b4>
   14d7c:	ldr	r4, [r4]
   14d80:	cmp	r7, r4
   14d84:	bne	14d54 <__assert_fail@plt+0x3920>
   14d88:	ldr	r2, [sp, #4]
   14d8c:	mov	r0, #10
   14d90:	ldr	r3, [pc, #28]	; 14db4 <__assert_fail@plt+0x3980>
   14d94:	ldr	r3, [r2, r3]
   14d98:	ldr	r1, [r3]
   14d9c:	add	sp, sp, #12
   14da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14da4:	b	113a4 <fputc@plt>
   14da8:	add	sp, sp, #12
   14dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db0:	andeq	r3, r1, r4, ror #5
   14db4:	andeq	r0, r0, r4, lsr r1
   14db8:	push	{r4, r5, r6, r7, r8, r9, lr}
   14dbc:	mov	r6, r0
   14dc0:	ldr	r5, [r0]
   14dc4:	sub	sp, sp, #12
   14dc8:	ldr	r9, [pc, #112]	; 14e40 <__assert_fail@plt+0x3a0c>
   14dcc:	mov	r8, r1
   14dd0:	mov	r7, r2
   14dd4:	mov	r3, r5
   14dd8:	add	r9, pc, r9
   14ddc:	ldr	r4, [r3, #20]!
   14de0:	cmp	r4, r3
   14de4:	beq	14e24 <__assert_fail@plt+0x39f0>
   14de8:	ldr	r1, [r4, #-36]	; 0xffffffdc
   14dec:	sub	r2, r4, #8
   14df0:	mov	r3, r8
   14df4:	mov	r0, r6
   14df8:	str	r7, [sp]
   14dfc:	bl	1427c <__assert_fail@plt+0x2e48>
   14e00:	sub	r1, r4, #40	; 0x28
   14e04:	mov	r2, r0
   14e08:	mov	r0, r5
   14e0c:	bl	149e8 <__assert_fail@plt+0x35b4>
   14e10:	ldr	r5, [r6]
   14e14:	ldr	r4, [r4]
   14e18:	add	r0, r5, #20
   14e1c:	cmp	r4, r0
   14e20:	bne	14de8 <__assert_fail@plt+0x39b4>
   14e24:	ldr	r3, [pc, #24]	; 14e44 <__assert_fail@plt+0x3a10>
   14e28:	mov	r0, #10
   14e2c:	ldr	r3, [r9, r3]
   14e30:	ldr	r1, [r3]
   14e34:	add	sp, sp, #12
   14e38:	pop	{r4, r5, r6, r7, r8, r9, lr}
   14e3c:	b	113a4 <fputc@plt>
   14e40:	andeq	r3, r1, r0, lsr #4
   14e44:	andeq	r0, r0, r4, lsr r1
   14e48:	push	{r3, r4, r5, r6, r7, lr}
   14e4c:	mov	r5, r0
   14e50:	mov	r7, r1
   14e54:	mov	r6, r2
   14e58:	bl	14db8 <__assert_fail@plt+0x3984>
   14e5c:	ldr	r4, [r5, #24]
   14e60:	add	r5, r5, #24
   14e64:	cmp	r5, r4
   14e68:	popeq	{r3, r4, r5, r6, r7, pc}
   14e6c:	sub	r0, r4, #32
   14e70:	mov	r1, r7
   14e74:	mov	r2, r6
   14e78:	bl	14e48 <__assert_fail@plt+0x3a14>
   14e7c:	ldr	r4, [r4]
   14e80:	cmp	r5, r4
   14e84:	bne	14e6c <__assert_fail@plt+0x3a38>
   14e88:	pop	{r3, r4, r5, r6, r7, pc}
   14e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e90:	subs	r6, r0, #0
   14e94:	sub	sp, sp, #12
   14e98:	beq	15280 <__assert_fail@plt+0x3e4c>
   14e9c:	ldr	r3, [r6, #16]
   14ea0:	cmp	r3, #0
   14ea4:	bne	14f9c <__assert_fail@plt+0x3b68>
   14ea8:	ldr	r2, [r6, #4]
   14eac:	mov	r4, r6
   14eb0:	ldr	r3, [r4, #28]!
   14eb4:	cmp	r3, r4
   14eb8:	beq	14ed0 <__assert_fail@plt+0x3a9c>
   14ebc:	ldmda	r3, {r1, r3}
   14ec0:	cmp	r2, r1
   14ec4:	movcc	r2, r1
   14ec8:	cmp	r3, r4
   14ecc:	bne	14ebc <__assert_fail@plt+0x3a88>
   14ed0:	add	r8, r2, #1
   14ed4:	mov	r0, r8
   14ed8:	bl	11218 <malloc@plt>
   14edc:	subs	r7, r0, #0
   14ee0:	beq	15280 <__assert_fail@plt+0x3e4c>
   14ee4:	ldr	r3, [r6, #16]
   14ee8:	cmp	r3, #0
   14eec:	beq	14efc <__assert_fail@plt+0x3ac8>
   14ef0:	ldr	fp, [r6, #12]
   14ef4:	ands	fp, fp, #18
   14ef8:	beq	14fd8 <__assert_fail@plt+0x3ba4>
   14efc:	ldr	r3, [r6, #12]
   14f00:	mov	r0, r6
   14f04:	mov	r1, r7
   14f08:	mov	r2, r8
   14f0c:	tst	r3, #64	; 0x40
   14f10:	beq	14f58 <__assert_fail@plt+0x3b24>
   14f14:	bl	14cf4 <__assert_fail@plt+0x38c0>
   14f18:	ldr	r5, [r6, #28]
   14f1c:	cmp	r5, r4
   14f20:	beq	14f3c <__assert_fail@plt+0x3b08>
   14f24:	ldr	r3, [r5, #24]
   14f28:	cmp	r3, #0
   14f2c:	beq	14f88 <__assert_fail@plt+0x3b54>
   14f30:	ldr	r5, [r5]
   14f34:	cmp	r5, r4
   14f38:	bne	14f24 <__assert_fail@plt+0x3af0>
   14f3c:	mov	r0, r7
   14f40:	bl	11140 <free@plt>
   14f44:	mov	r3, #0
   14f48:	mov	r0, r3
   14f4c:	str	r3, [r6, #16]
   14f50:	add	sp, sp, #12
   14f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f58:	bl	14cf4 <__assert_fail@plt+0x38c0>
   14f5c:	ldr	r5, [r6, #28]
   14f60:	cmp	r5, r4
   14f64:	beq	14f3c <__assert_fail@plt+0x3b08>
   14f68:	sub	r0, r5, #16
   14f6c:	mov	r1, r7
   14f70:	mov	r2, r8
   14f74:	bl	14db8 <__assert_fail@plt+0x3984>
   14f78:	ldr	r5, [r5]
   14f7c:	cmp	r5, r4
   14f80:	bne	14f68 <__assert_fail@plt+0x3b34>
   14f84:	b	14f3c <__assert_fail@plt+0x3b08>
   14f88:	sub	r0, r5, #16
   14f8c:	mov	r1, r7
   14f90:	mov	r2, r8
   14f94:	bl	14e48 <__assert_fail@plt+0x3a14>
   14f98:	b	14f30 <__assert_fail@plt+0x3afc>
   14f9c:	mov	r0, #1
   14fa0:	bl	113e0 <isatty@plt>
   14fa4:	ldr	r2, [r6, #4]
   14fa8:	cmp	r0, #0
   14fac:	str	r0, [r6, #8]
   14fb0:	beq	14fc8 <__assert_fail@plt+0x3b94>
   14fb4:	cmp	r2, #0
   14fb8:	bne	14eac <__assert_fail@plt+0x3a78>
   14fbc:	bl	15448 <__assert_fail@plt+0x4014>
   14fc0:	mov	r2, r0
   14fc4:	str	r0, [r6, #4]
   14fc8:	cmp	r2, #0
   14fcc:	moveq	r2, #80	; 0x50
   14fd0:	streq	r2, [r6, #4]
   14fd4:	b	14eac <__assert_fail@plt+0x3a78>
   14fd8:	mov	r9, r6
   14fdc:	mov	sl, fp
   14fe0:	ldr	r5, [r9, #20]!
   14fe4:	cmp	r5, r9
   14fe8:	beq	15028 <__assert_fail@plt+0x3bf4>
   14fec:	sub	r1, r5, #40	; 0x28
   14ff0:	mov	r2, r7
   14ff4:	mov	r3, r8
   14ff8:	mov	r0, r6
   14ffc:	bl	143cc <__assert_fail@plt+0x2f98>
   15000:	ldr	r2, [r5, #-32]	; 0xffffffe0
   15004:	ldr	r1, [r6, #24]
   15008:	ldr	r3, [r5, #-4]
   1500c:	cmp	r1, r5
   15010:	addne	r2, r2, #1
   15014:	ldr	r5, [r5]
   15018:	add	sl, sl, r2
   1501c:	add	fp, fp, r3
   15020:	cmp	r5, r9
   15024:	bne	14fec <__assert_fail@plt+0x3bb8>
   15028:	ldr	r3, [r6, #8]
   1502c:	cmp	r3, #0
   15030:	beq	14efc <__assert_fail@plt+0x3ac8>
   15034:	ldr	r3, [r6, #4]
   15038:	cmp	r3, sl
   1503c:	bcs	150b0 <__assert_fail@plt+0x3c7c>
   15040:	cmp	fp, #0
   15044:	ldr	r1, [r6, #20]
   15048:	beq	150c4 <__assert_fail@plt+0x3c90>
   1504c:	cmp	r1, r9
   15050:	mov	r5, r1
   15054:	bne	15068 <__assert_fail@plt+0x3c34>
   15058:	b	150c4 <__assert_fail@plt+0x3c90>
   1505c:	ldr	r5, [r5]
   15060:	cmp	r5, r9
   15064:	beq	150ac <__assert_fail@plt+0x3c78>
   15068:	ldr	r3, [r5, #-4]
   1506c:	cmp	r3, #0
   15070:	beq	1505c <__assert_fail@plt+0x3c28>
   15074:	ldr	ip, [r5, #-32]	; 0xffffffe0
   15078:	mov	r2, r7
   1507c:	mov	r3, r8
   15080:	mov	r0, r6
   15084:	sub	r1, r5, #40	; 0x28
   15088:	str	ip, [sp, #4]
   1508c:	bl	143cc <__assert_fail@plt+0x2f98>
   15090:	ldr	r3, [r5, #-32]	; 0xffffffe0
   15094:	ldr	ip, [sp, #4]
   15098:	cmp	ip, r3
   1509c:	rsb	r2, ip, r3
   150a0:	addhi	sl, sl, r2
   150a4:	subls	fp, fp, #1
   150a8:	b	1505c <__assert_fail@plt+0x3c28>
   150ac:	ldr	r3, [r6, #4]
   150b0:	cmp	sl, r3
   150b4:	bcc	151ec <__assert_fail@plt+0x3db8>
   150b8:	cmp	sl, r3
   150bc:	bls	14efc <__assert_fail@plt+0x3ac8>
   150c0:	ldr	r1, [r6, #20]
   150c4:	vmov.f64	d6, #112	; 0x3f800000  1.0
   150c8:	mov	r0, #1
   150cc:	cmp	r1, r9
   150d0:	beq	151d8 <__assert_fail@plt+0x3da4>
   150d4:	cmp	r3, sl
   150d8:	bcs	151d8 <__assert_fail@plt+0x3da4>
   150dc:	mov	ip, r1
   150e0:	mov	r5, sl
   150e4:	eor	fp, r0, #1
   150e8:	b	15134 <__assert_fail@plt+0x3d00>
   150ec:	vcmpe.f64	d7, d6
   150f0:	vmrs	APSR_nzcv, fpscr
   150f4:	ble	15120 <__assert_fail@plt+0x3cec>
   150f8:	ldr	r2, [ip, #-32]	; 0xffffffe0
   150fc:	cmp	r2, #0
   15100:	beq	15120 <__assert_fail@plt+0x3cec>
   15104:	cmp	r5, #0
   15108:	moveq	lr, #0
   1510c:	andne	lr, fp, #1
   15110:	cmp	lr, #0
   15114:	subne	r5, r5, #1
   15118:	subne	r2, r2, #1
   1511c:	strne	r2, [ip, #-32]	; 0xffffffe0
   15120:	ldr	ip, [ip]
   15124:	cmp	ip, r9
   15128:	beq	151c0 <__assert_fail@plt+0x3d8c>
   1512c:	cmp	r5, r3
   15130:	bls	151c0 <__assert_fail@plt+0x3d8c>
   15134:	vldr	d7, [ip, #-16]
   15138:	vcmpe.f64	d7, d6
   1513c:	ldr	lr, [ip, #-8]
   15140:	vmrs	APSR_nzcv, fpscr
   15144:	ble	15150 <__assert_fail@plt+0x3d1c>
   15148:	tst	lr, #32
   1514c:	beq	15120 <__assert_fail@plt+0x3cec>
   15150:	tst	lr, #64	; 0x40
   15154:	bne	15120 <__assert_fail@plt+0x3cec>
   15158:	cmp	r0, #0
   1515c:	beq	15168 <__assert_fail@plt+0x3d34>
   15160:	tst	lr, #32
   15164:	beq	15120 <__assert_fail@plt+0x3cec>
   15168:	ldr	r2, [ip, #-32]	; 0xffffffe0
   1516c:	ldr	lr, [ip, #-28]	; 0xffffffe4
   15170:	cmp	r2, lr
   15174:	beq	15120 <__assert_fail@plt+0x3cec>
   15178:	vcmpe.f64	d7, d6
   1517c:	vmrs	APSR_nzcv, fpscr
   15180:	bpl	150ec <__assert_fail@plt+0x3cb8>
   15184:	cmp	r2, #0
   15188:	beq	150ec <__assert_fail@plt+0x3cb8>
   1518c:	cmp	r5, #0
   15190:	beq	150ec <__assert_fail@plt+0x3cb8>
   15194:	vmov	s7, r3
   15198:	vcvt.f64.u32	d5, s7
   1519c:	vmov	s7, r2
   151a0:	vmul.f64	d5, d7, d5
   151a4:	vcvt.f64.u32	d4, s7
   151a8:	vcmpe.f64	d4, d5
   151ac:	vmrs	APSR_nzcv, fpscr
   151b0:	subgt	r2, r2, #1
   151b4:	subgt	r5, r5, #1
   151b8:	strgt	r2, [ip, #-32]	; 0xffffffe0
   151bc:	b	150ec <__assert_fail@plt+0x3cb8>
   151c0:	cmp	r5, sl
   151c4:	beq	151dc <__assert_fail@plt+0x3da8>
   151c8:	cmp	r5, r3
   151cc:	bls	14efc <__assert_fail@plt+0x3ac8>
   151d0:	mov	sl, r5
   151d4:	b	150cc <__assert_fail@plt+0x3c98>
   151d8:	mov	r5, sl
   151dc:	cmp	r0, #0
   151e0:	beq	14efc <__assert_fail@plt+0x3ac8>
   151e4:	mov	r0, #0
   151e8:	b	151c8 <__assert_fail@plt+0x3d94>
   151ec:	cmp	fp, #0
   151f0:	beq	1525c <__assert_fail@plt+0x3e28>
   151f4:	ldr	r2, [r6, #20]
   151f8:	cmp	r2, r9
   151fc:	bne	15224 <__assert_fail@plt+0x3df0>
   15200:	b	1525c <__assert_fail@plt+0x3e28>
   15204:	ldr	r0, [r2, #-32]	; 0xffffffe0
   15208:	add	sl, sl, r1
   1520c:	str	r0, [r2, #-32]	; 0xffffffe0
   15210:	cmp	sl, r3
   15214:	beq	14efc <__assert_fail@plt+0x3ac8>
   15218:	ldr	r2, [r2]
   1521c:	cmp	r2, r9
   15220:	beq	15254 <__assert_fail@plt+0x3e20>
   15224:	ldr	r1, [r2, #-4]
   15228:	cmp	r1, #0
   1522c:	beq	15218 <__assert_fail@plt+0x3de4>
   15230:	subs	r1, r3, sl
   15234:	beq	15204 <__assert_fail@plt+0x3dd0>
   15238:	ldr	lr, [r2, #-32]	; 0xffffffe0
   1523c:	ldr	ip, [r2, #-24]	; 0xffffffe8
   15240:	add	r0, r1, lr
   15244:	cmp	r0, ip
   15248:	rsbhi	r1, lr, ip
   1524c:	movhi	r0, ip
   15250:	b	15208 <__assert_fail@plt+0x3dd4>
   15254:	cmp	sl, r3
   15258:	bcs	150b8 <__assert_fail@plt+0x3c84>
   1525c:	ldr	r2, [r6, #24]
   15260:	ldr	r1, [r2, #-8]
   15264:	tst	r1, #128	; 0x80
   15268:	bne	150b8 <__assert_fail@plt+0x3c84>
   1526c:	ldr	r1, [r2, #-32]	; 0xffffffe0
   15270:	add	r3, r3, r1
   15274:	rsb	sl, sl, r3
   15278:	str	sl, [r2, #-32]	; 0xffffffe0
   1527c:	b	14efc <__assert_fail@plt+0x3ac8>
   15280:	mvn	r0, #0
   15284:	b	14f50 <__assert_fail@plt+0x3b1c>
   15288:	ldr	r3, [pc, #164]	; 15334 <__assert_fail@plt+0x3f00>
   1528c:	ldr	r2, [pc, #164]	; 15338 <__assert_fail@plt+0x3f04>
   15290:	add	r3, pc, r3
   15294:	push	{r4, r5, r6, r7, r8, lr}
   15298:	sub	sp, sp, #8
   1529c:	ldr	r5, [r3, r2]
   152a0:	ldr	r3, [r5]
   152a4:	str	r3, [sp, #4]
   152a8:	bl	1120c <getenv@plt>
   152ac:	subs	r8, r0, #0
   152b0:	beq	15328 <__assert_fail@plt+0x3ef4>
   152b4:	add	r4, sp, #8
   152b8:	mov	r7, #0
   152bc:	str	r7, [r4, #-8]!
   152c0:	bl	112b4 <__errno_location@plt>
   152c4:	mov	r1, sp
   152c8:	mov	r2, #10
   152cc:	mov	r6, r0
   152d0:	mov	r0, r8
   152d4:	str	r7, [r6]
   152d8:	bl	11110 <strtol@plt>
   152dc:	ldr	r3, [r6]
   152e0:	cmp	r3, r7
   152e4:	bne	15328 <__assert_fail@plt+0x3ef4>
   152e8:	ldr	r3, [sp]
   152ec:	cmp	r3, r7
   152f0:	beq	15328 <__assert_fail@plt+0x3ef4>
   152f4:	ldrsb	r2, [r3]
   152f8:	cmp	r2, r7
   152fc:	bne	15328 <__assert_fail@plt+0x3ef4>
   15300:	cmp	r8, r3
   15304:	bcs	15328 <__assert_fail@plt+0x3ef4>
   15308:	cmp	r0, r7
   1530c:	ble	15328 <__assert_fail@plt+0x3ef4>
   15310:	ldr	r2, [sp, #4]
   15314:	ldr	r3, [r5]
   15318:	cmp	r2, r3
   1531c:	bne	15330 <__assert_fail@plt+0x3efc>
   15320:	add	sp, sp, #8
   15324:	pop	{r4, r5, r6, r7, r8, pc}
   15328:	mvn	r0, #0
   1532c:	b	15310 <__assert_fail@plt+0x3edc>
   15330:	bl	11188 <__stack_chk_fail@plt>
   15334:	andeq	r2, r1, r8, ror #26
   15338:	andeq	r0, r0, r8, lsr #2
   1533c:	ldr	r3, [pc, #244]	; 15438 <__assert_fail@plt+0x4004>
   15340:	ldr	ip, [pc, #244]	; 1543c <__assert_fail@plt+0x4008>
   15344:	add	r3, pc, r3
   15348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1534c:	sub	sp, sp, #20
   15350:	ldr	r5, [r3, ip]
   15354:	mov	r9, r0
   15358:	mov	r8, r1
   1535c:	mov	r0, #1
   15360:	movw	r1, #21523	; 0x5413
   15364:	add	r2, sp, #4
   15368:	ldr	r3, [r5]
   1536c:	str	r3, [sp, #12]
   15370:	bl	111c4 <ioctl@plt>
   15374:	cmp	r0, #0
   15378:	bne	153e0 <__assert_fail@plt+0x3fac>
   1537c:	ldrh	sl, [sp, #6]
   15380:	ldrh	r4, [sp, #4]
   15384:	rsbs	r3, sl, #1
   15388:	movcc	r3, #0
   1538c:	rsbs	fp, r4, #1
   15390:	movcc	fp, #0
   15394:	adds	r7, r9, #0
   15398:	movne	r7, #1
   1539c:	tst	r3, r7
   153a0:	bne	15400 <__assert_fail@plt+0x3fcc>
   153a4:	adds	r6, r8, #0
   153a8:	movne	r6, #1
   153ac:	tst	fp, r6
   153b0:	bne	15420 <__assert_fail@plt+0x3fec>
   153b4:	ldr	r2, [sp, #12]
   153b8:	cmp	r7, #0
   153bc:	ldr	r3, [r5]
   153c0:	mov	r0, #0
   153c4:	strne	sl, [r9]
   153c8:	cmp	r6, #0
   153cc:	strne	r4, [r8]
   153d0:	cmp	r2, r3
   153d4:	bne	15434 <__assert_fail@plt+0x4000>
   153d8:	add	sp, sp, #20
   153dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153e0:	adds	r7, r9, #0
   153e4:	mov	fp, #1
   153e8:	mov	r3, fp
   153ec:	mov	r4, #0
   153f0:	movne	r7, #1
   153f4:	tst	r3, r7
   153f8:	mov	sl, r4
   153fc:	beq	153a4 <__assert_fail@plt+0x3f70>
   15400:	ldr	r0, [pc, #56]	; 15440 <__assert_fail@plt+0x400c>
   15404:	add	r0, pc, r0
   15408:	bl	15288 <__assert_fail@plt+0x3e54>
   1540c:	adds	r6, r8, #0
   15410:	movne	r6, #1
   15414:	tst	fp, r6
   15418:	mov	sl, r0
   1541c:	beq	153b4 <__assert_fail@plt+0x3f80>
   15420:	ldr	r0, [pc, #28]	; 15444 <__assert_fail@plt+0x4010>
   15424:	add	r0, pc, r0
   15428:	bl	15288 <__assert_fail@plt+0x3e54>
   1542c:	mov	r4, r0
   15430:	b	153b4 <__assert_fail@plt+0x3f80>
   15434:	bl	11188 <__stack_chk_fail@plt>
   15438:			; <UNDEFINED> instruction: 0x00012cb4
   1543c:	andeq	r0, r0, r8, lsr #2
   15440:	ldrdeq	r2, [r0], -r4
   15444:			; <UNDEFINED> instruction: 0x000026bc
   15448:	ldr	r3, [pc, #204]	; 1551c <__assert_fail@plt+0x40e8>
   1544c:	mov	r0, #0
   15450:	ldr	ip, [pc, #200]	; 15520 <__assert_fail@plt+0x40ec>
   15454:	movw	r1, #21523	; 0x5413
   15458:	add	r3, pc, r3
   1545c:	push	{r4, r5, r6, r7, r8, lr}
   15460:	sub	sp, sp, #16
   15464:	ldr	r4, [r3, ip]
   15468:	add	r2, sp, #4
   1546c:	ldr	r3, [r4]
   15470:	str	r3, [sp, #12]
   15474:	bl	111c4 <ioctl@plt>
   15478:	cmp	r0, #0
   1547c:	bne	1549c <__assert_fail@plt+0x4068>
   15480:	ldrh	r0, [sp, #6]
   15484:	ldr	r2, [sp, #12]
   15488:	ldr	r3, [r4]
   1548c:	cmp	r2, r3
   15490:	bne	15518 <__assert_fail@plt+0x40e4>
   15494:	add	sp, sp, #16
   15498:	pop	{r4, r5, r6, r7, r8, pc}
   1549c:	ldr	r0, [pc, #128]	; 15524 <__assert_fail@plt+0x40f0>
   154a0:	add	r0, pc, r0
   154a4:	bl	1120c <getenv@plt>
   154a8:	subs	r8, r0, #0
   154ac:	moveq	r0, r8
   154b0:	beq	15484 <__assert_fail@plt+0x4050>
   154b4:	add	r5, sp, #16
   154b8:	mov	r7, #0
   154bc:	str	r7, [r5, #-16]!
   154c0:	bl	112b4 <__errno_location@plt>
   154c4:	mov	r1, sp
   154c8:	mov	r2, #10
   154cc:	mov	r6, r0
   154d0:	mov	r0, r8
   154d4:	str	r7, [r6]
   154d8:	bl	11110 <strtol@plt>
   154dc:	ldr	r3, [r6]
   154e0:	cmp	r3, r7
   154e4:	bne	15510 <__assert_fail@plt+0x40dc>
   154e8:	ldr	r3, [sp]
   154ec:	cmp	r3, r7
   154f0:	beq	15510 <__assert_fail@plt+0x40dc>
   154f4:	ldrsb	r2, [r3]
   154f8:	cmp	r2, r7
   154fc:	bne	15510 <__assert_fail@plt+0x40dc>
   15500:	cmp	r8, r3
   15504:	bcs	15510 <__assert_fail@plt+0x40dc>
   15508:	cmp	r0, r7
   1550c:	bgt	15484 <__assert_fail@plt+0x4050>
   15510:	mov	r0, #0
   15514:	b	15484 <__assert_fail@plt+0x4050>
   15518:	bl	11188 <__stack_chk_fail@plt>
   1551c:	andeq	r2, r1, r0, lsr #23
   15520:	andeq	r0, r0, r8, lsr #2
   15524:	andeq	r2, r0, r8, lsr r6
   15528:	push	{r3, r4, r5, r6, r7, lr}
   1552c:	subs	r7, r2, #0
   15530:	mov	r5, r3
   15534:	mov	r4, r1
   15538:	movne	r3, #0
   1553c:	strne	r3, [r7]
   15540:	cmp	r1, #0
   15544:	movne	r3, #0
   15548:	strne	r3, [r1]
   1554c:	cmp	r5, #0
   15550:	movne	r3, #0
   15554:	strne	r3, [r5]
   15558:	bl	11278 <ttyname@plt>
   1555c:	subs	r6, r0, #0
   15560:	beq	155fc <__assert_fail@plt+0x41c8>
   15564:	ldr	r1, [pc, #152]	; 15604 <__assert_fail@plt+0x41d0>
   15568:	cmp	r4, #0
   1556c:	mov	r0, r6
   15570:	strne	r6, [r4]
   15574:	add	r1, pc, r1
   15578:	mov	r2, #5
   1557c:	bl	113f8 <strncmp@plt>
   15580:	cmp	r0, #0
   15584:	addeq	r6, r6, #5
   15588:	cmp	r7, #0
   1558c:	strne	r6, [r7]
   15590:	cmp	r5, #0
   15594:	beq	155f4 <__assert_fail@plt+0x41c0>
   15598:	cmp	r6, #0
   1559c:	beq	155f4 <__assert_fail@plt+0x41c0>
   155a0:	ldrb	r4, [r6]
   155a4:	cmp	r4, #0
   155a8:	beq	155f4 <__assert_fail@plt+0x41c0>
   155ac:	bl	11254 <__ctype_b_loc@plt>
   155b0:	mov	r2, r6
   155b4:	ldr	r3, [r0]
   155b8:	b	155d0 <__assert_fail@plt+0x419c>
   155bc:	cmn	r2, #1
   155c0:	beq	155f4 <__assert_fail@plt+0x41c0>
   155c4:	ldrb	r4, [r2, #1]!
   155c8:	cmp	r4, #0
   155cc:	beq	155f4 <__assert_fail@plt+0x41c0>
   155d0:	sxtb	r4, r4
   155d4:	sxth	r4, r4
   155d8:	lsl	r4, r4, #1
   155dc:	ldrh	r4, [r3, r4]
   155e0:	and	r4, r4, #2048	; 0x800
   155e4:	uxth	r4, r4
   155e8:	cmp	r4, #0
   155ec:	beq	155bc <__assert_fail@plt+0x4188>
   155f0:	str	r2, [r5]
   155f4:	mov	r0, #0
   155f8:	pop	{r3, r4, r5, r6, r7, pc}
   155fc:	mvn	r0, #0
   15600:	pop	{r3, r4, r5, r6, r7, pc}
   15604:	andeq	r2, r0, r4, ror r5
   15608:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1560c:	mov	r6, r0
   15610:	ldr	r0, [r0]
   15614:	mov	r7, r1
   15618:	cmp	r0, #0
   1561c:	beq	15688 <__assert_fail@plt+0x4254>
   15620:	add	r4, r6, #4
   15624:	mov	r5, r6
   15628:	mov	r9, #0
   1562c:	movw	r8, #65533	; 0xfffd
   15630:	b	15644 <__assert_fail@plt+0x4210>
   15634:	ldr	r0, [r5, #4]!
   15638:	mov	r9, r3
   1563c:	cmp	r0, #0
   15640:	beq	1567c <__assert_fail@plt+0x4248>
   15644:	bl	11128 <wcwidth@plt>
   15648:	mov	r6, r5
   1564c:	mov	r2, r4
   15650:	add	r4, r4, #4
   15654:	cmn	r0, #1
   15658:	streq	r8, [r4, #-8]
   1565c:	moveq	r0, #1
   15660:	add	r3, r0, r9
   15664:	cmp	r3, r7
   15668:	bls	15634 <__assert_fail@plt+0x4200>
   1566c:	mov	r3, #0
   15670:	mov	r0, r9
   15674:	str	r3, [r6]
   15678:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1567c:	mov	r9, r3
   15680:	mov	r6, r2
   15684:	b	1566c <__assert_fail@plt+0x4238>
   15688:	mov	r9, r0
   1568c:	b	1566c <__assert_fail@plt+0x4238>
   15690:	ldr	r3, [pc, #440]	; 15850 <__assert_fail@plt+0x441c>
   15694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15698:	subs	r4, r0, #0
   1569c:	ldr	r0, [pc, #432]	; 15854 <__assert_fail@plt+0x4420>
   156a0:	sub	sp, sp, #28
   156a4:	add	r3, pc, r3
   156a8:	add	r8, sp, #12
   156ac:	str	r2, [sp, #4]
   156b0:	mov	r5, #0
   156b4:	ldr	r0, [r3, r0]
   156b8:	str	r5, [r8, #4]
   156bc:	str	r5, [sp, #12]
   156c0:	ldr	r3, [r0]
   156c4:	str	r0, [sp]
   156c8:	str	r3, [sp, #20]
   156cc:	beq	15838 <__assert_fail@plt+0x4404>
   156d0:	ldrb	sl, [r4]
   156d4:	cmp	sl, r5
   156d8:	moveq	r5, sl
   156dc:	moveq	r6, r5
   156e0:	beq	157b4 <__assert_fail@plt+0x4380>
   156e4:	cmp	r1, r5
   156e8:	beq	15830 <__assert_fail@plt+0x43fc>
   156ec:	sub	r1, r1, #1
   156f0:	adds	r7, r4, r1
   156f4:	bcs	15844 <__assert_fail@plt+0x4410>
   156f8:	mov	r5, #0
   156fc:	add	r9, sp, #8
   15700:	mov	r6, r5
   15704:	b	15730 <__assert_fail@plt+0x42fc>
   15708:	add	r4, r4, #1
   1570c:	add	r6, r6, #4
   15710:	cmp	r4, #0
   15714:	add	r5, r5, #4
   15718:	beq	157b4 <__assert_fail@plt+0x4380>
   1571c:	ldrb	sl, [r4]
   15720:	cmp	sl, #0
   15724:	beq	157b4 <__assert_fail@plt+0x4380>
   15728:	cmp	r4, r7
   1572c:	bhi	157b4 <__assert_fail@plt+0x4380>
   15730:	cmp	r4, r7
   15734:	bcs	15740 <__assert_fail@plt+0x430c>
   15738:	cmp	sl, #92	; 0x5c
   1573c:	beq	157e0 <__assert_fail@plt+0x43ac>
   15740:	bl	11254 <__ctype_b_loc@plt>
   15744:	lsl	r3, sl, #1
   15748:	ldr	r2, [r0]
   1574c:	mov	fp, r0
   15750:	ldrh	r3, [r2, r3]
   15754:	tst	r3, #2
   15758:	bne	15708 <__assert_fail@plt+0x42d4>
   1575c:	bl	111d0 <__ctype_get_mb_cur_max@plt>
   15760:	mov	r1, r4
   15764:	mov	r3, r8
   15768:	mov	r2, r0
   1576c:	mov	r0, r9
   15770:	bl	111e8 <mbrtowc@plt>
   15774:	subs	sl, r0, #0
   15778:	beq	157b4 <__assert_fail@plt+0x4380>
   1577c:	add	r2, sl, #2
   15780:	cmp	r2, #1
   15784:	bls	157f0 <__assert_fail@plt+0x43bc>
   15788:	ldr	fp, [sp, #8]
   1578c:	mov	r0, fp
   15790:	bl	111b8 <iswprint@plt>
   15794:	cmp	r0, #0
   15798:	bne	1581c <__assert_fail@plt+0x43e8>
   1579c:	lsl	r2, sl, #2
   157a0:	add	r6, r6, r2
   157a4:	add	r5, r5, r2
   157a8:	add	r4, r4, sl
   157ac:	cmp	r4, #0
   157b0:	bne	1571c <__assert_fail@plt+0x42e8>
   157b4:	ldr	r3, [sp, #4]
   157b8:	mov	r0, r6
   157bc:	ldr	r1, [sp]
   157c0:	cmp	r3, #0
   157c4:	ldr	r2, [sp, #20]
   157c8:	strne	r5, [r3]
   157cc:	ldr	r3, [r1]
   157d0:	cmp	r2, r3
   157d4:	bne	1584c <__assert_fail@plt+0x4418>
   157d8:	add	sp, sp, #28
   157dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157e0:	ldrsb	r2, [r4, #1]
   157e4:	cmp	r2, #120	; 0x78
   157e8:	bne	15740 <__assert_fail@plt+0x430c>
   157ec:	b	15708 <__assert_fail@plt+0x42d4>
   157f0:	ldrb	r3, [r4]
   157f4:	mov	sl, #1
   157f8:	ldr	r2, [fp]
   157fc:	lsl	r3, r3, #1
   15800:	ldrh	r3, [r2, r3]
   15804:	tst	r3, #16384	; 0x4000
   15808:	addne	r6, r6, #1
   1580c:	addne	r5, r5, #1
   15810:	addeq	r6, r6, #4
   15814:	addeq	r5, r5, #4
   15818:	b	157a8 <__assert_fail@plt+0x4374>
   1581c:	mov	r0, fp
   15820:	add	r5, r5, sl
   15824:	bl	11128 <wcwidth@plt>
   15828:	add	r6, r6, r0
   1582c:	b	157a8 <__assert_fail@plt+0x4374>
   15830:	mov	r7, r4
   15834:	b	156f8 <__assert_fail@plt+0x42c4>
   15838:	mov	r5, r4
   1583c:	mov	r6, r4
   15840:	b	157b4 <__assert_fail@plt+0x4380>
   15844:	mov	r6, r5
   15848:	b	157b4 <__assert_fail@plt+0x4380>
   1584c:	bl	11188 <__stack_chk_fail@plt>
   15850:	andeq	r2, r1, r4, asr r9
   15854:	andeq	r0, r0, r8, lsr #2
   15858:	push	{r4, lr}
   1585c:	subs	r4, r0, #0
   15860:	beq	15870 <__assert_fail@plt+0x443c>
   15864:	ldrsb	r3, [r4]
   15868:	cmp	r3, #0
   1586c:	bne	15878 <__assert_fail@plt+0x4444>
   15870:	mov	r0, #0
   15874:	pop	{r4, pc}
   15878:	bl	11284 <strlen@plt>
   1587c:	mov	r2, #0
   15880:	mov	r1, r0
   15884:	mov	r0, r4
   15888:	pop	{r4, lr}
   1588c:	b	15690 <__assert_fail@plt+0x425c>
   15890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15894:	sub	sp, sp, #52	; 0x34
   15898:	ldr	r5, [pc, #664]	; 15b38 <__assert_fail@plt+0x4704>
   1589c:	mov	r8, r3
   158a0:	ldr	ip, [pc, #660]	; 15b3c <__assert_fail@plt+0x4708>
   158a4:	subs	r4, r0, #0
   158a8:	add	r5, pc, r5
   158ac:	str	r2, [sp, #12]
   158b0:	mov	r6, r1
   158b4:	ldr	ip, [r5, ip]
   158b8:	mov	r3, r5
   158bc:	ldr	r3, [ip]
   158c0:	str	ip, [sp, #20]
   158c4:	str	r3, [sp, #44]	; 0x2c
   158c8:	beq	15b1c <__assert_fail@plt+0x46e8>
   158cc:	bl	11284 <strlen@plt>
   158d0:	ldr	r2, [sp, #12]
   158d4:	mov	r3, #0
   158d8:	add	r1, sp, #36	; 0x24
   158dc:	str	r3, [sp, #36]	; 0x24
   158e0:	str	r1, [sp, #16]
   158e4:	str	r3, [sp, #40]	; 0x28
   158e8:	cmp	r2, r3
   158ec:	cmpne	r0, r3
   158f0:	movne	r0, #0
   158f4:	moveq	r0, #1
   158f8:	moveq	r0, r3
   158fc:	beq	159e8 <__assert_fail@plt+0x45b4>
   15900:	str	r0, [r6]
   15904:	ldrb	sl, [r4]
   15908:	cmp	sl, r3
   1590c:	beq	15b2c <__assert_fail@plt+0x46f8>
   15910:	ldr	r3, [pc, #552]	; 15b40 <__assert_fail@plt+0x470c>
   15914:	mov	r5, r2
   15918:	ldr	r9, [pc, #548]	; 15b44 <__assert_fail@plt+0x4710>
   1591c:	add	r1, sp, #32
   15920:	ldr	r2, [pc, #544]	; 15b48 <__assert_fail@plt+0x4714>
   15924:	add	r3, pc, r3
   15928:	str	r1, [sp, #24]
   1592c:	add	r9, pc, r9
   15930:	add	r2, pc, r2
   15934:	str	r3, [sp, #8]
   15938:	str	r2, [sp, #28]
   1593c:	b	15960 <__assert_fail@plt+0x452c>
   15940:	strb	sl, [r5]
   15944:	add	r4, r4, #1
   15948:	add	r5, r5, #1
   1594c:	cmp	r4, #0
   15950:	beq	159dc <__assert_fail@plt+0x45a8>
   15954:	ldrb	sl, [r4]
   15958:	cmp	sl, #0
   1595c:	beq	159dc <__assert_fail@plt+0x45a8>
   15960:	cmp	r8, #0
   15964:	sxtb	r7, sl
   15968:	beq	15980 <__assert_fail@plt+0x454c>
   1596c:	mov	r0, r8
   15970:	mov	r1, r7
   15974:	bl	11290 <strchr@plt>
   15978:	cmp	r0, #0
   1597c:	bne	15940 <__assert_fail@plt+0x450c>
   15980:	cmp	r7, #92	; 0x5c
   15984:	beq	15a04 <__assert_fail@plt+0x45d0>
   15988:	bl	11254 <__ctype_b_loc@plt>
   1598c:	uxtb	sl, sl
   15990:	lsl	r3, sl, #1
   15994:	ldr	r2, [r0]
   15998:	mov	r7, r0
   1599c:	ldrh	r3, [r2, r3]
   159a0:	tst	r3, #2
   159a4:	beq	15a18 <__assert_fail@plt+0x45e4>
   159a8:	ldr	r3, [sp, #8]
   159ac:	mov	r0, r5
   159b0:	mov	r1, #1
   159b4:	mvn	r2, #0
   159b8:	str	sl, [sp]
   159bc:	add	r4, r4, r1
   159c0:	bl	112cc <__sprintf_chk@plt>
   159c4:	ldr	r3, [r6]
   159c8:	cmp	r4, #0
   159cc:	add	r5, r5, #4
   159d0:	add	r3, r3, #4
   159d4:	str	r3, [r6]
   159d8:	bne	15954 <__assert_fail@plt+0x4520>
   159dc:	ldr	r0, [sp, #12]
   159e0:	mov	r3, #0
   159e4:	strb	r3, [r5]
   159e8:	ldr	r1, [sp, #20]
   159ec:	ldr	r2, [sp, #44]	; 0x2c
   159f0:	ldr	r3, [r1]
   159f4:	cmp	r2, r3
   159f8:	bne	15b34 <__assert_fail@plt+0x4700>
   159fc:	add	sp, sp, #52	; 0x34
   15a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a04:	ldrsb	r3, [r4, #1]
   15a08:	cmp	r3, #120	; 0x78
   15a0c:	bne	15988 <__assert_fail@plt+0x4554>
   15a10:	mov	sl, r7
   15a14:	b	159a8 <__assert_fail@plt+0x4574>
   15a18:	bl	111d0 <__ctype_get_mb_cur_max@plt>
   15a1c:	mov	r1, r4
   15a20:	add	r3, sp, #36	; 0x24
   15a24:	mov	r2, r0
   15a28:	add	r0, sp, #32
   15a2c:	bl	111e8 <mbrtowc@plt>
   15a30:	subs	sl, r0, #0
   15a34:	beq	159dc <__assert_fail@plt+0x45a8>
   15a38:	add	r3, sl, #2
   15a3c:	cmp	r3, #1
   15a40:	bls	15aa0 <__assert_fail@plt+0x466c>
   15a44:	ldr	r7, [sp, #32]
   15a48:	mov	r0, r7
   15a4c:	bl	111b8 <iswprint@plt>
   15a50:	cmp	r0, #0
   15a54:	bne	15ad4 <__assert_fail@plt+0x46a0>
   15a58:	mov	r7, r4
   15a5c:	add	r4, r4, sl
   15a60:	mov	fp, r5
   15a64:	ldrb	ip, [r7], #1
   15a68:	mov	r0, fp
   15a6c:	mov	r3, r9
   15a70:	mov	r1, #1
   15a74:	mvn	r2, #0
   15a78:	add	fp, fp, #4
   15a7c:	str	ip, [sp]
   15a80:	bl	112cc <__sprintf_chk@plt>
   15a84:	ldr	r3, [r6]
   15a88:	cmp	r7, r4
   15a8c:	add	r3, r3, #4
   15a90:	str	r3, [r6]
   15a94:	bne	15a64 <__assert_fail@plt+0x4630>
   15a98:	add	r5, r5, sl, lsl #2
   15a9c:	b	1594c <__assert_fail@plt+0x4518>
   15aa0:	ldrb	r3, [r4]
   15aa4:	ldr	r1, [r7]
   15aa8:	lsl	r2, r3, #1
   15aac:	ldrh	r2, [r1, r2]
   15ab0:	tst	r2, #16384	; 0x4000
   15ab4:	beq	15b04 <__assert_fail@plt+0x46d0>
   15ab8:	ldr	r3, [r6]
   15abc:	add	r5, r5, #1
   15ac0:	add	r3, r3, #1
   15ac4:	str	r3, [r6]
   15ac8:	ldrb	r3, [r4], #1
   15acc:	strb	r3, [r5, #-1]
   15ad0:	b	1594c <__assert_fail@plt+0x4518>
   15ad4:	mov	r1, r4
   15ad8:	mov	r0, r5
   15adc:	mov	r2, sl
   15ae0:	add	r5, r5, sl
   15ae4:	bl	11164 <memcpy@plt>
   15ae8:	mov	r0, r7
   15aec:	ldr	r7, [r6]
   15af0:	bl	11128 <wcwidth@plt>
   15af4:	add	r4, sl, r4
   15af8:	add	r0, r0, r7
   15afc:	str	r0, [r6]
   15b00:	b	1594c <__assert_fail@plt+0x4518>
   15b04:	str	r3, [sp]
   15b08:	mov	r0, r5
   15b0c:	mov	r1, #1
   15b10:	mvn	r2, #0
   15b14:	ldr	r3, [sp, #28]
   15b18:	b	159bc <__assert_fail@plt+0x4588>
   15b1c:	str	r4, [sp, #36]	; 0x24
   15b20:	mov	r0, r4
   15b24:	str	r4, [sp, #40]	; 0x28
   15b28:	b	159e8 <__assert_fail@plt+0x45b4>
   15b2c:	ldr	r5, [sp, #12]
   15b30:	b	159dc <__assert_fail@plt+0x45a8>
   15b34:	bl	11188 <__stack_chk_fail@plt>
   15b38:	andeq	r2, r1, r0, asr r7
   15b3c:	andeq	r0, r0, r8, lsr #2
   15b40:	andeq	r2, r0, r8, ror r1
   15b44:	andeq	r2, r0, r0, ror r1
   15b48:	andeq	r2, r0, ip, ror #2
   15b4c:	ldr	r3, [pc, #492]	; 15d40 <__assert_fail@plt+0x490c>
   15b50:	ldr	ip, [pc, #492]	; 15d44 <__assert_fail@plt+0x4910>
   15b54:	add	r3, pc, r3
   15b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b5c:	subs	r4, r0, #0
   15b60:	ldr	ip, [r3, ip]
   15b64:	sub	sp, sp, #44	; 0x2c
   15b68:	mov	r6, r1
   15b6c:	mov	r9, r2
   15b70:	ldr	r3, [ip]
   15b74:	str	ip, [sp, #12]
   15b78:	str	r3, [sp, #36]	; 0x24
   15b7c:	beq	15d24 <__assert_fail@plt+0x48f0>
   15b80:	bl	11284 <strlen@plt>
   15b84:	add	r7, sp, #28
   15b88:	mov	r3, #0
   15b8c:	str	r3, [sp, #28]
   15b90:	str	r3, [r7, #4]
   15b94:	cmp	r9, r3
   15b98:	cmpne	r0, r3
   15b9c:	movne	r0, #0
   15ba0:	moveq	r0, #1
   15ba4:	moveq	r0, r3
   15ba8:	beq	15cac <__assert_fail@plt+0x4878>
   15bac:	str	r0, [r6]
   15bb0:	ldrsb	r3, [r4]
   15bb4:	cmp	r3, #0
   15bb8:	beq	15d34 <__assert_fail@plt+0x4900>
   15bbc:	ldr	r1, [pc, #388]	; 15d48 <__assert_fail@plt+0x4914>
   15bc0:	add	r8, sp, #24
   15bc4:	ldr	r2, [pc, #384]	; 15d4c <__assert_fail@plt+0x4918>
   15bc8:	mov	r5, r9
   15bcc:	add	r1, pc, r1
   15bd0:	str	r1, [sp, #20]
   15bd4:	add	r2, pc, r2
   15bd8:	str	r2, [sp, #16]
   15bdc:	b	15c34 <__assert_fail@plt+0x4800>
   15be0:	ldrsb	r3, [r4]
   15be4:	cmp	r3, #92	; 0x5c
   15be8:	bne	15bf8 <__assert_fail@plt+0x47c4>
   15bec:	ldrsb	r2, [r4, #1]
   15bf0:	cmp	r2, #120	; 0x78
   15bf4:	beq	15cf8 <__assert_fail@plt+0x48c4>
   15bf8:	mov	r0, r5
   15bfc:	mov	r1, r4
   15c00:	mov	r2, sl
   15c04:	add	r5, r5, sl
   15c08:	bl	11164 <memcpy@plt>
   15c0c:	ldr	r0, [sp, #24]
   15c10:	ldr	fp, [r6]
   15c14:	bl	11128 <wcwidth@plt>
   15c18:	add	r0, r0, fp
   15c1c:	str	r0, [r6]
   15c20:	adds	r4, r4, sl
   15c24:	beq	15ca0 <__assert_fail@plt+0x486c>
   15c28:	ldrsb	r3, [r4]
   15c2c:	cmp	r3, #0
   15c30:	beq	15ca0 <__assert_fail@plt+0x486c>
   15c34:	bl	111d0 <__ctype_get_mb_cur_max@plt>
   15c38:	mov	r1, r4
   15c3c:	mov	r3, r7
   15c40:	mov	r2, r0
   15c44:	mov	r0, r8
   15c48:	bl	111e8 <mbrtowc@plt>
   15c4c:	subs	sl, r0, #0
   15c50:	beq	15ca0 <__assert_fail@plt+0x486c>
   15c54:	add	r3, sl, #2
   15c58:	cmp	r3, #1
   15c5c:	bhi	15be0 <__assert_fail@plt+0x47ac>
   15c60:	bl	11254 <__ctype_b_loc@plt>
   15c64:	ldrb	r3, [r4]
   15c68:	lsl	r2, r3, #1
   15c6c:	ldr	r1, [r0]
   15c70:	ldrh	r2, [r1, r2]
   15c74:	tst	r2, #16384	; 0x4000
   15c78:	beq	15cc8 <__assert_fail@plt+0x4894>
   15c7c:	ldr	r3, [r6]
   15c80:	mov	sl, #1
   15c84:	add	r3, r3, sl
   15c88:	str	r3, [r6]
   15c8c:	ldrb	r3, [r4]
   15c90:	adds	r4, r4, sl
   15c94:	strb	r3, [r5]
   15c98:	add	r5, r5, sl
   15c9c:	bne	15c28 <__assert_fail@plt+0x47f4>
   15ca0:	mov	r0, r9
   15ca4:	mov	r3, #0
   15ca8:	strb	r3, [r5]
   15cac:	ldr	r1, [sp, #12]
   15cb0:	ldr	r2, [sp, #36]	; 0x24
   15cb4:	ldr	r3, [r1]
   15cb8:	cmp	r2, r3
   15cbc:	bne	15d3c <__assert_fail@plt+0x4908>
   15cc0:	add	sp, sp, #44	; 0x2c
   15cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cc8:	str	r3, [sp]
   15ccc:	mov	r0, r5
   15cd0:	ldr	r3, [sp, #16]
   15cd4:	mov	r1, #1
   15cd8:	mvn	r2, #0
   15cdc:	add	r5, r5, #4
   15ce0:	bl	112cc <__sprintf_chk@plt>
   15ce4:	ldr	r3, [r6]
   15ce8:	mov	sl, #1
   15cec:	add	r3, r3, #4
   15cf0:	str	r3, [r6]
   15cf4:	b	15c20 <__assert_fail@plt+0x47ec>
   15cf8:	str	r3, [sp]
   15cfc:	mov	r0, r5
   15d00:	ldr	r3, [sp, #20]
   15d04:	mov	r1, #1
   15d08:	mvn	r2, #0
   15d0c:	add	r5, r5, #4
   15d10:	bl	112cc <__sprintf_chk@plt>
   15d14:	ldr	r3, [r6]
   15d18:	add	r3, r3, #4
   15d1c:	str	r3, [r6]
   15d20:	b	15c20 <__assert_fail@plt+0x47ec>
   15d24:	str	r4, [sp, #28]
   15d28:	mov	r0, r4
   15d2c:	str	r4, [sp, #32]
   15d30:	b	15cac <__assert_fail@plt+0x4878>
   15d34:	mov	r5, r9
   15d38:	b	15ca0 <__assert_fail@plt+0x486c>
   15d3c:	bl	11188 <__stack_chk_fail@plt>
   15d40:	andeq	r2, r1, r4, lsr #9
   15d44:	andeq	r0, r0, r8, lsr #2
   15d48:	ldrdeq	r1, [r0], -r0
   15d4c:	andeq	r1, r0, r8, asr #29
   15d50:	lsl	r0, r0, #2
   15d54:	add	r0, r0, #1
   15d58:	bx	lr
   15d5c:	push	{r4, r5, r6, lr}
   15d60:	subs	r4, r0, #0
   15d64:	mov	r6, r1
   15d68:	beq	15db0 <__assert_fail@plt+0x497c>
   15d6c:	bl	11284 <strlen@plt>
   15d70:	subs	r3, r0, #0
   15d74:	beq	15db0 <__assert_fail@plt+0x497c>
   15d78:	bl	15d50 <__assert_fail@plt+0x491c>
   15d7c:	bl	11218 <malloc@plt>
   15d80:	subs	r5, r0, #0
   15d84:	beq	15da8 <__assert_fail@plt+0x4974>
   15d88:	mov	r0, r4
   15d8c:	mov	r1, r6
   15d90:	mov	r2, r5
   15d94:	mov	r3, #0
   15d98:	bl	15890 <__assert_fail@plt+0x445c>
   15d9c:	cmp	r0, #0
   15da0:	beq	15da8 <__assert_fail@plt+0x4974>
   15da4:	pop	{r4, r5, r6, pc}
   15da8:	mov	r0, r5
   15dac:	bl	11140 <free@plt>
   15db0:	mov	r0, #0
   15db4:	pop	{r4, r5, r6, pc}
   15db8:	push	{r4, r5, r6, lr}
   15dbc:	subs	r4, r0, #0
   15dc0:	mov	r6, r1
   15dc4:	beq	15e08 <__assert_fail@plt+0x49d4>
   15dc8:	bl	11284 <strlen@plt>
   15dcc:	subs	r3, r0, #0
   15dd0:	beq	15e08 <__assert_fail@plt+0x49d4>
   15dd4:	bl	15d50 <__assert_fail@plt+0x491c>
   15dd8:	bl	11218 <malloc@plt>
   15ddc:	subs	r5, r0, #0
   15de0:	beq	15e00 <__assert_fail@plt+0x49cc>
   15de4:	mov	r0, r4
   15de8:	mov	r1, r6
   15dec:	mov	r2, r5
   15df0:	bl	15b4c <__assert_fail@plt+0x4718>
   15df4:	cmp	r0, #0
   15df8:	beq	15e00 <__assert_fail@plt+0x49cc>
   15dfc:	pop	{r4, r5, r6, pc}
   15e00:	mov	r0, r5
   15e04:	bl	11140 <free@plt>
   15e08:	mov	r0, #0
   15e0c:	pop	{r4, r5, r6, pc}
   15e10:	push	{r4, r5, r6, r7, r8, lr}
   15e14:	mov	r8, r1
   15e18:	mov	r5, r0
   15e1c:	bl	11284 <strlen@plt>
   15e20:	mov	r1, r5
   15e24:	mov	r4, r0
   15e28:	mov	r0, #0
   15e2c:	mov	r2, r0
   15e30:	bl	113bc <mbstowcs@plt>
   15e34:	cmn	r0, #1
   15e38:	mov	r6, r0
   15e3c:	moveq	r7, #0
   15e40:	beq	15e70 <__assert_fail@plt+0x4a3c>
   15e44:	add	r1, r0, #1
   15e48:	mov	r0, #1
   15e4c:	lsl	r1, r1, #2
   15e50:	bl	110ec <calloc@plt>
   15e54:	subs	r7, r0, #0
   15e58:	beq	15e70 <__assert_fail@plt+0x4a3c>
   15e5c:	mov	r2, r6
   15e60:	mov	r1, r5
   15e64:	bl	113bc <mbstowcs@plt>
   15e68:	cmp	r0, #0
   15e6c:	bne	15e8c <__assert_fail@plt+0x4a58>
   15e70:	mov	r0, r7
   15e74:	bl	11140 <free@plt>
   15e78:	cmp	r4, #0
   15e7c:	mov	r0, r4
   15e80:	movge	r3, #0
   15e84:	strbge	r3, [r5, r4]
   15e88:	pop	{r4, r5, r6, r7, r8, pc}
   15e8c:	ldr	r1, [r8]
   15e90:	mov	r0, r7
   15e94:	bl	15608 <__assert_fail@plt+0x41d4>
   15e98:	mov	r2, r4
   15e9c:	mov	r1, r7
   15ea0:	str	r0, [r8]
   15ea4:	mov	r0, r5
   15ea8:	bl	111f4 <wcstombs@plt>
   15eac:	mov	r4, r0
   15eb0:	b	15e70 <__assert_fail@plt+0x4a3c>
   15eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eb8:	sub	sp, sp, #12
   15ebc:	mov	r8, r1
   15ec0:	mov	r9, r2
   15ec4:	mov	r6, r3
   15ec8:	str	r0, [sp]
   15ecc:	bl	11284 <strlen@plt>
   15ed0:	mov	r7, r0
   15ed4:	bl	111d0 <__ctype_get_mb_cur_max@plt>
   15ed8:	cmp	r0, #1
   15edc:	bls	16070 <__assert_fail@plt+0x4c3c>
   15ee0:	mov	r0, #0
   15ee4:	ldr	r1, [sp]
   15ee8:	mov	r2, r0
   15eec:	bl	113bc <mbstowcs@plt>
   15ef0:	cmn	r0, #1
   15ef4:	mov	r4, r0
   15ef8:	beq	16054 <__assert_fail@plt+0x4c20>
   15efc:	add	fp, r0, #1
   15f00:	lsl	sl, fp, #2
   15f04:	mov	r0, sl
   15f08:	bl	11218 <malloc@plt>
   15f0c:	subs	r5, r0, #0
   15f10:	beq	161f0 <__assert_fail@plt+0x4dbc>
   15f14:	mov	r2, fp
   15f18:	ldr	r1, [sp]
   15f1c:	bl	113bc <mbstowcs@plt>
   15f20:	cmp	r0, #0
   15f24:	bne	160b8 <__assert_fail@plt+0x4c84>
   15f28:	mov	sl, r7
   15f2c:	mov	fp, #0
   15f30:	ldr	r2, [r6]
   15f34:	cmp	sl, r2
   15f38:	movhi	sl, r2
   15f3c:	movhi	r3, #0
   15f40:	bls	1608c <__assert_fail@plt+0x4c58>
   15f44:	cmp	r9, #0
   15f48:	str	sl, [r6]
   15f4c:	add	r6, r2, r3
   15f50:	beq	16038 <__assert_fail@plt+0x4c04>
   15f54:	ldr	r1, [sp, #48]	; 0x30
   15f58:	sub	r9, r9, #1
   15f5c:	add	r9, r8, r9
   15f60:	cmp	r1, #1
   15f64:	beq	161c0 <__assert_fail@plt+0x4d8c>
   15f68:	bcc	161b0 <__assert_fail@plt+0x4d7c>
   15f6c:	cmp	r1, #2
   15f70:	bne	160a4 <__assert_fail@plt+0x4c70>
   15f74:	lsr	r4, r3, #1
   15f78:	and	r3, r3, #1
   15f7c:	adds	r3, r3, r4
   15f80:	moveq	r1, #0
   15f84:	movne	r1, #1
   15f88:	adds	r7, r4, #0
   15f8c:	movne	r7, #1
   15f90:	cmp	r8, r9
   15f94:	movcs	r1, #0
   15f98:	andcc	r1, r1, #1
   15f9c:	cmp	r1, #0
   15fa0:	beq	15fd0 <__assert_fail@plt+0x4b9c>
   15fa4:	ldr	r1, [sp, #56]	; 0x38
   15fa8:	uxtb	r0, r1
   15fac:	subs	r3, r3, #1
   15fb0:	strb	r0, [r8], #1
   15fb4:	moveq	r1, #0
   15fb8:	movne	r1, #1
   15fbc:	cmp	r9, r8
   15fc0:	movls	r1, #0
   15fc4:	andhi	r1, r1, #1
   15fc8:	cmp	r1, #0
   15fcc:	bne	15fac <__assert_fail@plt+0x4b78>
   15fd0:	rsb	r3, r8, r9
   15fd4:	ldr	r1, [sp]
   15fd8:	cmp	r3, r2
   15fdc:	movcc	r2, r3
   15fe0:	mov	r0, r8
   15fe4:	mov	r3, #0
   15fe8:	strb	r3, [r8]
   15fec:	bl	1123c <mempcpy@plt>
   15ff0:	cmp	r9, r0
   15ff4:	movls	r7, #0
   15ff8:	andhi	r7, r7, #1
   15ffc:	cmp	r7, #0
   16000:	beq	16030 <__assert_fail@plt+0x4bfc>
   16004:	ldr	r3, [sp, #56]	; 0x38
   16008:	uxtb	r1, r3
   1600c:	subs	r4, r4, #1
   16010:	strb	r1, [r0], #1
   16014:	moveq	r2, #0
   16018:	movne	r2, #1
   1601c:	cmp	r9, r0
   16020:	movls	r2, #0
   16024:	andhi	r2, r2, #1
   16028:	cmp	r2, #0
   1602c:	bne	1600c <__assert_fail@plt+0x4bd8>
   16030:	mov	r2, #0
   16034:	strb	r2, [r0]
   16038:	mov	r0, r5
   1603c:	bl	11140 <free@plt>
   16040:	mov	r0, fp
   16044:	bl	11140 <free@plt>
   16048:	mov	r0, r6
   1604c:	add	sp, sp, #12
   16050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16054:	ldr	r1, [sp, #52]	; 0x34
   16058:	tst	r1, #1
   1605c:	bne	160a8 <__assert_fail@plt+0x4c74>
   16060:	mov	r5, #0
   16064:	mvn	r6, #0
   16068:	mov	fp, r5
   1606c:	b	16038 <__assert_fail@plt+0x4c04>
   16070:	mov	r5, #0
   16074:	b	15f28 <__assert_fail@plt+0x4af4>
   16078:	ldr	r2, [r6]
   1607c:	cmp	r2, sl
   16080:	addcc	r4, r7, #1
   16084:	bcc	16174 <__assert_fail@plt+0x4d40>
   16088:	ldr	fp, [sp, #4]
   1608c:	cmp	r2, sl
   16090:	rsbhi	r3, sl, r2
   16094:	movls	r2, r7
   16098:	movls	r3, #0
   1609c:	movhi	r2, r7
   160a0:	b	15f44 <__assert_fail@plt+0x4b10>
   160a4:	bl	11404 <abort@plt>
   160a8:	mov	r5, #0
   160ac:	mov	sl, r7
   160b0:	mov	fp, r5
   160b4:	b	15f30 <__assert_fail@plt+0x4afc>
   160b8:	add	sl, r5, sl
   160bc:	mov	r3, #0
   160c0:	str	r3, [sl, #-4]
   160c4:	ldr	r0, [r5]
   160c8:	cmp	r0, r3
   160cc:	beq	16218 <__assert_fail@plt+0x4de4>
   160d0:	add	fp, r5, #4
   160d4:	movw	sl, #65533	; 0xfffd
   160d8:	str	r3, [sp, #4]
   160dc:	bl	111b8 <iswprint@plt>
   160e0:	cmp	r0, #0
   160e4:	streq	sl, [fp, #-4]
   160e8:	ldr	r0, [fp], #4
   160ec:	moveq	r1, #1
   160f0:	streq	r1, [sp, #4]
   160f4:	cmp	r0, #0
   160f8:	bne	160dc <__assert_fail@plt+0x4ca8>
   160fc:	ldr	r0, [r5]
   16100:	cmp	r0, #0
   16104:	beq	16150 <__assert_fail@plt+0x4d1c>
   16108:	mov	sl, r5
   1610c:	mov	fp, #0
   16110:	b	16144 <__assert_fail@plt+0x4d10>
   16114:	movw	r3, #65535	; 0xffff
   16118:	movt	r3, #32767	; 0x7fff
   1611c:	rsb	r3, r0, r3
   16120:	cmp	r3, fp
   16124:	blt	16210 <__assert_fail@plt+0x4ddc>
   16128:	sub	r4, r4, #1
   1612c:	add	fp, fp, r0
   16130:	cmn	r4, #1
   16134:	beq	16208 <__assert_fail@plt+0x4dd4>
   16138:	ldr	r0, [sl, #4]!
   1613c:	cmp	r0, #0
   16140:	beq	16208 <__assert_fail@plt+0x4dd4>
   16144:	bl	11128 <wcwidth@plt>
   16148:	cmn	r0, #1
   1614c:	bne	16114 <__assert_fail@plt+0x4ce0>
   16150:	mov	sl, r0
   16154:	ldr	r3, [sp, #4]
   16158:	cmp	r3, #0
   1615c:	beq	16078 <__assert_fail@plt+0x4c44>
   16160:	mov	r0, #0
   16164:	mov	r1, r5
   16168:	mov	r2, r0
   1616c:	bl	111f4 <wcstombs@plt>
   16170:	add	r4, r0, #1
   16174:	mov	r0, r4
   16178:	bl	11218 <malloc@plt>
   1617c:	subs	fp, r0, #0
   16180:	beq	161dc <__assert_fail@plt+0x4da8>
   16184:	ldr	r1, [r6]
   16188:	mov	r0, r5
   1618c:	bl	15608 <__assert_fail@plt+0x41d4>
   16190:	mov	r1, r5
   16194:	mov	r2, r4
   16198:	mov	sl, r0
   1619c:	mov	r0, fp
   161a0:	bl	111f4 <wcstombs@plt>
   161a4:	str	fp, [sp]
   161a8:	mov	r7, r0
   161ac:	b	15f30 <__assert_fail@plt+0x4afc>
   161b0:	adds	r7, r3, #0
   161b4:	mov	r4, r3
   161b8:	movne	r7, #1
   161bc:	b	15fd0 <__assert_fail@plt+0x4b9c>
   161c0:	mov	r7, #0
   161c4:	cmp	r3, r7
   161c8:	cmpne	r8, r9
   161cc:	mov	r4, r7
   161d0:	movcs	r1, #0
   161d4:	movcc	r1, #1
   161d8:	b	15f9c <__assert_fail@plt+0x4b68>
   161dc:	ldr	r1, [sp, #52]	; 0x34
   161e0:	tst	r1, #1
   161e4:	mvneq	r6, #0
   161e8:	beq	16038 <__assert_fail@plt+0x4c04>
   161ec:	b	15f30 <__assert_fail@plt+0x4afc>
   161f0:	ldr	r3, [sp, #52]	; 0x34
   161f4:	tst	r3, #1
   161f8:	beq	16060 <__assert_fail@plt+0x4c2c>
   161fc:	mov	sl, r7
   16200:	mov	fp, r5
   16204:	b	15f30 <__assert_fail@plt+0x4afc>
   16208:	mov	sl, fp
   1620c:	b	16154 <__assert_fail@plt+0x4d20>
   16210:	mvn	sl, #0
   16214:	b	16154 <__assert_fail@plt+0x4d20>
   16218:	str	r0, [sp, #4]
   1621c:	b	160fc <__assert_fail@plt+0x4cc8>
   16220:	push	{r4, lr}
   16224:	sub	sp, sp, #16
   16228:	mov	r4, #32
   1622c:	ldr	lr, [sp, #24]
   16230:	ldr	ip, [sp, #28]
   16234:	str	r4, [sp, #8]
   16238:	str	lr, [sp]
   1623c:	str	ip, [sp, #4]
   16240:	bl	15eb4 <__assert_fail@plt+0x4a80>
   16244:	add	sp, sp, #16
   16248:	pop	{r4, pc}
   1624c:	subs	r2, r1, #1
   16250:	bxeq	lr
   16254:	bcc	1642c <__assert_fail@plt+0x4ff8>
   16258:	cmp	r0, r1
   1625c:	bls	16410 <__assert_fail@plt+0x4fdc>
   16260:	tst	r1, r2
   16264:	beq	1641c <__assert_fail@plt+0x4fe8>
   16268:	clz	r3, r0
   1626c:	clz	r2, r1
   16270:	sub	r3, r2, r3
   16274:	rsbs	r3, r3, #31
   16278:	addne	r3, r3, r3, lsl #1
   1627c:	mov	r2, #0
   16280:	addne	pc, pc, r3, lsl #2
   16284:	nop	{0}
   16288:	cmp	r0, r1, lsl #31
   1628c:	adc	r2, r2, r2
   16290:	subcs	r0, r0, r1, lsl #31
   16294:	cmp	r0, r1, lsl #30
   16298:	adc	r2, r2, r2
   1629c:	subcs	r0, r0, r1, lsl #30
   162a0:	cmp	r0, r1, lsl #29
   162a4:	adc	r2, r2, r2
   162a8:	subcs	r0, r0, r1, lsl #29
   162ac:	cmp	r0, r1, lsl #28
   162b0:	adc	r2, r2, r2
   162b4:	subcs	r0, r0, r1, lsl #28
   162b8:	cmp	r0, r1, lsl #27
   162bc:	adc	r2, r2, r2
   162c0:	subcs	r0, r0, r1, lsl #27
   162c4:	cmp	r0, r1, lsl #26
   162c8:	adc	r2, r2, r2
   162cc:	subcs	r0, r0, r1, lsl #26
   162d0:	cmp	r0, r1, lsl #25
   162d4:	adc	r2, r2, r2
   162d8:	subcs	r0, r0, r1, lsl #25
   162dc:	cmp	r0, r1, lsl #24
   162e0:	adc	r2, r2, r2
   162e4:	subcs	r0, r0, r1, lsl #24
   162e8:	cmp	r0, r1, lsl #23
   162ec:	adc	r2, r2, r2
   162f0:	subcs	r0, r0, r1, lsl #23
   162f4:	cmp	r0, r1, lsl #22
   162f8:	adc	r2, r2, r2
   162fc:	subcs	r0, r0, r1, lsl #22
   16300:	cmp	r0, r1, lsl #21
   16304:	adc	r2, r2, r2
   16308:	subcs	r0, r0, r1, lsl #21
   1630c:	cmp	r0, r1, lsl #20
   16310:	adc	r2, r2, r2
   16314:	subcs	r0, r0, r1, lsl #20
   16318:	cmp	r0, r1, lsl #19
   1631c:	adc	r2, r2, r2
   16320:	subcs	r0, r0, r1, lsl #19
   16324:	cmp	r0, r1, lsl #18
   16328:	adc	r2, r2, r2
   1632c:	subcs	r0, r0, r1, lsl #18
   16330:	cmp	r0, r1, lsl #17
   16334:	adc	r2, r2, r2
   16338:	subcs	r0, r0, r1, lsl #17
   1633c:	cmp	r0, r1, lsl #16
   16340:	adc	r2, r2, r2
   16344:	subcs	r0, r0, r1, lsl #16
   16348:	cmp	r0, r1, lsl #15
   1634c:	adc	r2, r2, r2
   16350:	subcs	r0, r0, r1, lsl #15
   16354:	cmp	r0, r1, lsl #14
   16358:	adc	r2, r2, r2
   1635c:	subcs	r0, r0, r1, lsl #14
   16360:	cmp	r0, r1, lsl #13
   16364:	adc	r2, r2, r2
   16368:	subcs	r0, r0, r1, lsl #13
   1636c:	cmp	r0, r1, lsl #12
   16370:	adc	r2, r2, r2
   16374:	subcs	r0, r0, r1, lsl #12
   16378:	cmp	r0, r1, lsl #11
   1637c:	adc	r2, r2, r2
   16380:	subcs	r0, r0, r1, lsl #11
   16384:	cmp	r0, r1, lsl #10
   16388:	adc	r2, r2, r2
   1638c:	subcs	r0, r0, r1, lsl #10
   16390:	cmp	r0, r1, lsl #9
   16394:	adc	r2, r2, r2
   16398:	subcs	r0, r0, r1, lsl #9
   1639c:	cmp	r0, r1, lsl #8
   163a0:	adc	r2, r2, r2
   163a4:	subcs	r0, r0, r1, lsl #8
   163a8:	cmp	r0, r1, lsl #7
   163ac:	adc	r2, r2, r2
   163b0:	subcs	r0, r0, r1, lsl #7
   163b4:	cmp	r0, r1, lsl #6
   163b8:	adc	r2, r2, r2
   163bc:	subcs	r0, r0, r1, lsl #6
   163c0:	cmp	r0, r1, lsl #5
   163c4:	adc	r2, r2, r2
   163c8:	subcs	r0, r0, r1, lsl #5
   163cc:	cmp	r0, r1, lsl #4
   163d0:	adc	r2, r2, r2
   163d4:	subcs	r0, r0, r1, lsl #4
   163d8:	cmp	r0, r1, lsl #3
   163dc:	adc	r2, r2, r2
   163e0:	subcs	r0, r0, r1, lsl #3
   163e4:	cmp	r0, r1, lsl #2
   163e8:	adc	r2, r2, r2
   163ec:	subcs	r0, r0, r1, lsl #2
   163f0:	cmp	r0, r1, lsl #1
   163f4:	adc	r2, r2, r2
   163f8:	subcs	r0, r0, r1, lsl #1
   163fc:	cmp	r0, r1
   16400:	adc	r2, r2, r2
   16404:	subcs	r0, r0, r1
   16408:	mov	r0, r2
   1640c:	bx	lr
   16410:	moveq	r0, #1
   16414:	movne	r0, #0
   16418:	bx	lr
   1641c:	clz	r2, r1
   16420:	rsb	r2, r2, #31
   16424:	lsr	r0, r0, r2
   16428:	bx	lr
   1642c:	cmp	r0, #0
   16430:	mvnne	r0, #0
   16434:	b	16494 <__assert_fail@plt+0x5060>
   16438:	cmp	r1, #0
   1643c:	beq	1642c <__assert_fail@plt+0x4ff8>
   16440:	push	{r0, r1, lr}
   16444:	bl	1624c <__assert_fail@plt+0x4e18>
   16448:	pop	{r1, r2, lr}
   1644c:	mul	r3, r2, r0
   16450:	sub	r1, r1, r3
   16454:	bx	lr
   16458:	cmp	r3, #0
   1645c:	cmpeq	r2, #0
   16460:	bne	16478 <__assert_fail@plt+0x5044>
   16464:	cmp	r1, #0
   16468:	cmpeq	r0, #0
   1646c:	mvnne	r1, #0
   16470:	mvnne	r0, #0
   16474:	b	16494 <__assert_fail@plt+0x5060>
   16478:	sub	sp, sp, #8
   1647c:	push	{sp, lr}
   16480:	bl	164e0 <__assert_fail@plt+0x50ac>
   16484:	ldr	lr, [sp, #4]
   16488:	add	sp, sp, #8
   1648c:	pop	{r2, r3}
   16490:	bx	lr
   16494:	push	{r1, lr}
   16498:	mov	r0, #8
   1649c:	bl	110f8 <raise@plt>
   164a0:	pop	{r1, pc}
   164a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164a8:	mov	r8, r2
   164ac:	mov	r6, r0
   164b0:	mov	r7, r1
   164b4:	mov	sl, r3
   164b8:	ldr	r9, [sp, #32]
   164bc:	bl	1651c <__assert_fail@plt+0x50e8>
   164c0:	umull	r4, r5, r8, r0
   164c4:	mul	r8, r8, r1
   164c8:	mla	r2, r0, sl, r8
   164cc:	add	r5, r2, r5
   164d0:	subs	r4, r6, r4
   164d4:	sbc	r5, r7, r5
   164d8:	strd	r4, [r9]
   164dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164e0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   164e4:	mov	r8, r2
   164e8:	mov	r6, r0
   164ec:	mov	r7, r1
   164f0:	mov	r5, r3
   164f4:	ldr	r9, [sp, #32]
   164f8:	bl	169a8 <__assert_fail@plt+0x5574>
   164fc:	mul	r3, r0, r5
   16500:	umull	r4, r5, r0, r8
   16504:	mla	r8, r8, r1, r3
   16508:	add	r5, r8, r5
   1650c:	subs	r4, r6, r4
   16510:	sbc	r5, r7, r5
   16514:	strd	r4, [r9]
   16518:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1651c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16520:	rsbs	r4, r0, #0
   16524:	rsc	r5, r1, #0
   16528:	cmp	r1, #0
   1652c:	mvn	r6, #0
   16530:	sub	sp, sp, #12
   16534:	movge	r4, r0
   16538:	movge	r5, r1
   1653c:	movge	r6, #0
   16540:	cmp	r3, #0
   16544:	blt	1677c <__assert_fail@plt+0x5348>
   16548:	cmp	r3, #0
   1654c:	mov	sl, r4
   16550:	mov	ip, r5
   16554:	mov	r0, r2
   16558:	mov	r1, r3
   1655c:	mov	r8, r2
   16560:	mov	r7, r4
   16564:	mov	r9, r5
   16568:	bne	16660 <__assert_fail@plt+0x522c>
   1656c:	cmp	r2, r5
   16570:	bls	1669c <__assert_fail@plt+0x5268>
   16574:	clz	r3, r2
   16578:	cmp	r3, #0
   1657c:	rsbne	r2, r3, #32
   16580:	lslne	r8, r0, r3
   16584:	lsrne	r2, r4, r2
   16588:	lslne	r7, r4, r3
   1658c:	orrne	r9, r2, r5, lsl r3
   16590:	lsr	r4, r8, #16
   16594:	uxth	sl, r8
   16598:	mov	r1, r4
   1659c:	mov	r0, r9
   165a0:	bl	1624c <__assert_fail@plt+0x4e18>
   165a4:	mov	r1, r4
   165a8:	mov	fp, r0
   165ac:	mov	r0, r9
   165b0:	bl	16438 <__assert_fail@plt+0x5004>
   165b4:	mul	r0, sl, fp
   165b8:	lsr	r2, r7, #16
   165bc:	orr	r1, r2, r1, lsl #16
   165c0:	cmp	r0, r1
   165c4:	bls	165e8 <__assert_fail@plt+0x51b4>
   165c8:	adds	r1, r1, r8
   165cc:	sub	r3, fp, #1
   165d0:	bcs	165e4 <__assert_fail@plt+0x51b0>
   165d4:	cmp	r0, r1
   165d8:	subhi	fp, fp, #2
   165dc:	addhi	r1, r1, r8
   165e0:	bhi	165e8 <__assert_fail@plt+0x51b4>
   165e4:	mov	fp, r3
   165e8:	rsb	r9, r0, r1
   165ec:	mov	r1, r4
   165f0:	uxth	r7, r7
   165f4:	mov	r0, r9
   165f8:	bl	1624c <__assert_fail@plt+0x4e18>
   165fc:	mov	r1, r4
   16600:	mov	r5, r0
   16604:	mov	r0, r9
   16608:	bl	16438 <__assert_fail@plt+0x5004>
   1660c:	mul	sl, sl, r5
   16610:	orr	r1, r7, r1, lsl #16
   16614:	cmp	sl, r1
   16618:	bls	16638 <__assert_fail@plt+0x5204>
   1661c:	adds	r8, r1, r8
   16620:	sub	r3, r5, #1
   16624:	bcs	16634 <__assert_fail@plt+0x5200>
   16628:	cmp	sl, r8
   1662c:	subhi	r5, r5, #2
   16630:	bhi	16638 <__assert_fail@plt+0x5204>
   16634:	mov	r5, r3
   16638:	orr	r3, r5, fp, lsl #16
   1663c:	mov	r4, #0
   16640:	cmp	r6, #0
   16644:	mov	r0, r3
   16648:	mov	r1, r4
   1664c:	beq	16658 <__assert_fail@plt+0x5224>
   16650:	rsbs	r0, r0, #0
   16654:	rsc	r1, r1, #0
   16658:	add	sp, sp, #12
   1665c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16660:	cmp	r3, r5
   16664:	movhi	r4, #0
   16668:	movhi	r3, r4
   1666c:	bhi	16640 <__assert_fail@plt+0x520c>
   16670:	clz	r5, r1
   16674:	cmp	r5, #0
   16678:	bne	16868 <__assert_fail@plt+0x5434>
   1667c:	cmp	r1, ip
   16680:	cmpcs	r2, sl
   16684:	movhi	r4, #0
   16688:	movls	r4, #1
   1668c:	movls	r3, #1
   16690:	movls	r4, r5
   16694:	movhi	r3, r4
   16698:	b	16640 <__assert_fail@plt+0x520c>
   1669c:	cmp	r2, #0
   166a0:	bne	166b4 <__assert_fail@plt+0x5280>
   166a4:	mov	r1, r2
   166a8:	mov	r0, #1
   166ac:	bl	1624c <__assert_fail@plt+0x4e18>
   166b0:	mov	r8, r0
   166b4:	clz	r3, r8
   166b8:	cmp	r3, #0
   166bc:	bne	1678c <__assert_fail@plt+0x5358>
   166c0:	rsb	r9, r8, r9
   166c4:	lsr	r5, r8, #16
   166c8:	uxth	sl, r8
   166cc:	mov	r4, #1
   166d0:	mov	r1, r5
   166d4:	mov	r0, r9
   166d8:	bl	1624c <__assert_fail@plt+0x4e18>
   166dc:	mov	r1, r5
   166e0:	mov	fp, r0
   166e4:	mov	r0, r9
   166e8:	bl	16438 <__assert_fail@plt+0x5004>
   166ec:	mul	r0, sl, fp
   166f0:	lsr	r2, r7, #16
   166f4:	orr	r1, r2, r1, lsl #16
   166f8:	cmp	r0, r1
   166fc:	bls	1671c <__assert_fail@plt+0x52e8>
   16700:	adds	r1, r1, r8
   16704:	sub	r3, fp, #1
   16708:	bcs	16988 <__assert_fail@plt+0x5554>
   1670c:	cmp	r0, r1
   16710:	subhi	fp, fp, #2
   16714:	addhi	r1, r1, r8
   16718:	bls	16988 <__assert_fail@plt+0x5554>
   1671c:	rsb	r2, r0, r1
   16720:	mov	r1, r5
   16724:	str	r2, [sp]
   16728:	uxth	r7, r7
   1672c:	mov	r0, r2
   16730:	bl	1624c <__assert_fail@plt+0x4e18>
   16734:	ldr	r2, [sp]
   16738:	mov	r1, r5
   1673c:	mov	r9, r0
   16740:	mov	r0, r2
   16744:	bl	16438 <__assert_fail@plt+0x5004>
   16748:	mul	sl, sl, r9
   1674c:	orr	r1, r7, r1, lsl #16
   16750:	cmp	sl, r1
   16754:	bls	16774 <__assert_fail@plt+0x5340>
   16758:	adds	r8, r1, r8
   1675c:	sub	r3, r9, #1
   16760:	bcs	16770 <__assert_fail@plt+0x533c>
   16764:	cmp	sl, r8
   16768:	subhi	r9, r9, #2
   1676c:	bhi	16774 <__assert_fail@plt+0x5340>
   16770:	mov	r9, r3
   16774:	orr	r3, r9, fp, lsl #16
   16778:	b	16640 <__assert_fail@plt+0x520c>
   1677c:	mvn	r6, r6
   16780:	rsbs	r2, r2, #0
   16784:	rsc	r3, r3, #0
   16788:	b	16548 <__assert_fail@plt+0x5114>
   1678c:	lsl	r8, r8, r3
   16790:	rsb	fp, r3, #32
   16794:	lsr	r4, r9, fp
   16798:	lsr	fp, r7, fp
   1679c:	lsr	r5, r8, #16
   167a0:	orr	fp, fp, r9, lsl r3
   167a4:	mov	r0, r4
   167a8:	lsl	r7, r7, r3
   167ac:	mov	r1, r5
   167b0:	uxth	sl, r8
   167b4:	bl	1624c <__assert_fail@plt+0x4e18>
   167b8:	mov	r1, r5
   167bc:	mov	r3, r0
   167c0:	mov	r0, r4
   167c4:	str	r3, [sp]
   167c8:	bl	16438 <__assert_fail@plt+0x5004>
   167cc:	ldr	r3, [sp]
   167d0:	lsr	r2, fp, #16
   167d4:	mul	r0, sl, r3
   167d8:	orr	r1, r2, r1, lsl #16
   167dc:	cmp	r0, r1
   167e0:	bls	16800 <__assert_fail@plt+0x53cc>
   167e4:	adds	r1, r1, r8
   167e8:	sub	r2, r3, #1
   167ec:	bcs	169a0 <__assert_fail@plt+0x556c>
   167f0:	cmp	r0, r1
   167f4:	subhi	r3, r3, #2
   167f8:	addhi	r1, r1, r8
   167fc:	bls	169a0 <__assert_fail@plt+0x556c>
   16800:	rsb	r9, r0, r1
   16804:	mov	r1, r5
   16808:	str	r3, [sp]
   1680c:	uxth	fp, fp
   16810:	mov	r0, r9
   16814:	bl	1624c <__assert_fail@plt+0x4e18>
   16818:	mov	r1, r5
   1681c:	mov	r4, r0
   16820:	mov	r0, r9
   16824:	bl	16438 <__assert_fail@plt+0x5004>
   16828:	mul	r9, sl, r4
   1682c:	ldr	r3, [sp]
   16830:	orr	r1, fp, r1, lsl #16
   16834:	cmp	r9, r1
   16838:	bls	1685c <__assert_fail@plt+0x5428>
   1683c:	adds	r1, r1, r8
   16840:	sub	r2, r4, #1
   16844:	bcs	16858 <__assert_fail@plt+0x5424>
   16848:	cmp	r9, r1
   1684c:	subhi	r4, r4, #2
   16850:	addhi	r1, r1, r8
   16854:	bhi	1685c <__assert_fail@plt+0x5428>
   16858:	mov	r4, r2
   1685c:	rsb	r9, r9, r1
   16860:	orr	r4, r4, r3, lsl #16
   16864:	b	166d0 <__assert_fail@plt+0x529c>
   16868:	rsb	sl, r5, #32
   1686c:	lsl	r3, r2, r5
   16870:	lsr	r0, r2, sl
   16874:	lsr	r2, ip, sl
   16878:	orr	r4, r0, r1, lsl r5
   1687c:	lsr	sl, r7, sl
   16880:	mov	r0, r2
   16884:	orr	sl, sl, ip, lsl r5
   16888:	lsr	r9, r4, #16
   1688c:	str	r3, [sp, #4]
   16890:	str	r2, [sp]
   16894:	uxth	fp, r4
   16898:	mov	r1, r9
   1689c:	bl	1624c <__assert_fail@plt+0x4e18>
   168a0:	ldr	r2, [sp]
   168a4:	mov	r1, r9
   168a8:	mov	r8, r0
   168ac:	mov	r0, r2
   168b0:	bl	16438 <__assert_fail@plt+0x5004>
   168b4:	mul	r0, fp, r8
   168b8:	lsr	r2, sl, #16
   168bc:	orr	r1, r2, r1, lsl #16
   168c0:	cmp	r0, r1
   168c4:	bls	168e4 <__assert_fail@plt+0x54b0>
   168c8:	adds	r1, r1, r4
   168cc:	sub	r2, r8, #1
   168d0:	bcs	16998 <__assert_fail@plt+0x5564>
   168d4:	cmp	r0, r1
   168d8:	subhi	r8, r8, #2
   168dc:	addhi	r1, r1, r4
   168e0:	bls	16998 <__assert_fail@plt+0x5564>
   168e4:	rsb	ip, r0, r1
   168e8:	mov	r1, r9
   168ec:	str	ip, [sp]
   168f0:	mov	r0, ip
   168f4:	bl	1624c <__assert_fail@plt+0x4e18>
   168f8:	ldr	ip, [sp]
   168fc:	mov	r1, r9
   16900:	mov	r2, r0
   16904:	mov	r0, ip
   16908:	str	r2, [sp]
   1690c:	bl	16438 <__assert_fail@plt+0x5004>
   16910:	ldr	r2, [sp]
   16914:	uxth	ip, sl
   16918:	mul	fp, fp, r2
   1691c:	orr	ip, ip, r1, lsl #16
   16920:	cmp	fp, ip
   16924:	bls	16944 <__assert_fail@plt+0x5510>
   16928:	adds	ip, ip, r4
   1692c:	sub	r1, r2, #1
   16930:	bcs	16990 <__assert_fail@plt+0x555c>
   16934:	cmp	fp, ip
   16938:	subhi	r2, r2, #2
   1693c:	addhi	ip, ip, r4
   16940:	bls	16990 <__assert_fail@plt+0x555c>
   16944:	ldr	r0, [sp, #4]
   16948:	orr	r1, r2, r8, lsl #16
   1694c:	rsb	fp, fp, ip
   16950:	umull	r2, r3, r1, r0
   16954:	cmp	fp, r3
   16958:	bcc	1697c <__assert_fail@plt+0x5548>
   1695c:	movne	r4, #0
   16960:	moveq	r4, #1
   16964:	cmp	r2, r7, lsl r5
   16968:	movls	r4, #0
   1696c:	andhi	r4, r4, #1
   16970:	cmp	r4, #0
   16974:	moveq	r3, r1
   16978:	beq	16640 <__assert_fail@plt+0x520c>
   1697c:	sub	r3, r1, #1
   16980:	mov	r4, #0
   16984:	b	16640 <__assert_fail@plt+0x520c>
   16988:	mov	fp, r3
   1698c:	b	1671c <__assert_fail@plt+0x52e8>
   16990:	mov	r2, r1
   16994:	b	16944 <__assert_fail@plt+0x5510>
   16998:	mov	r8, r2
   1699c:	b	168e4 <__assert_fail@plt+0x54b0>
   169a0:	mov	r3, r2
   169a4:	b	16800 <__assert_fail@plt+0x53cc>
   169a8:	cmp	r3, #0
   169ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169b0:	mov	r6, r0
   169b4:	sub	sp, sp, #12
   169b8:	mov	r5, r1
   169bc:	mov	r7, r0
   169c0:	mov	r4, r2
   169c4:	mov	r8, r1
   169c8:	bne	16aa8 <__assert_fail@plt+0x5674>
   169cc:	cmp	r2, r1
   169d0:	bls	16ae4 <__assert_fail@plt+0x56b0>
   169d4:	clz	r3, r2
   169d8:	cmp	r3, #0
   169dc:	rsbne	r8, r3, #32
   169e0:	lslne	r4, r2, r3
   169e4:	lsrne	r8, r0, r8
   169e8:	lslne	r7, r0, r3
   169ec:	orrne	r8, r8, r1, lsl r3
   169f0:	lsr	r5, r4, #16
   169f4:	uxth	sl, r4
   169f8:	mov	r1, r5
   169fc:	mov	r0, r8
   16a00:	bl	1624c <__assert_fail@plt+0x4e18>
   16a04:	mov	r1, r5
   16a08:	mov	r9, r0
   16a0c:	mov	r0, r8
   16a10:	bl	16438 <__assert_fail@plt+0x5004>
   16a14:	mul	r0, sl, r9
   16a18:	lsr	r3, r7, #16
   16a1c:	orr	r1, r3, r1, lsl #16
   16a20:	cmp	r0, r1
   16a24:	bls	16a48 <__assert_fail@plt+0x5614>
   16a28:	adds	r1, r1, r4
   16a2c:	sub	r2, r9, #1
   16a30:	bcs	16a44 <__assert_fail@plt+0x5610>
   16a34:	cmp	r0, r1
   16a38:	subhi	r9, r9, #2
   16a3c:	addhi	r1, r1, r4
   16a40:	bhi	16a48 <__assert_fail@plt+0x5614>
   16a44:	mov	r9, r2
   16a48:	rsb	r8, r0, r1
   16a4c:	mov	r1, r5
   16a50:	uxth	r7, r7
   16a54:	mov	r0, r8
   16a58:	bl	1624c <__assert_fail@plt+0x4e18>
   16a5c:	mov	r1, r5
   16a60:	mov	r6, r0
   16a64:	mov	r0, r8
   16a68:	bl	16438 <__assert_fail@plt+0x5004>
   16a6c:	mul	sl, sl, r6
   16a70:	orr	r1, r7, r1, lsl #16
   16a74:	cmp	sl, r1
   16a78:	bls	16a94 <__assert_fail@plt+0x5660>
   16a7c:	adds	r4, r1, r4
   16a80:	sub	r3, r6, #1
   16a84:	bcs	16d90 <__assert_fail@plt+0x595c>
   16a88:	cmp	sl, r4
   16a8c:	subhi	r6, r6, #2
   16a90:	bls	16d90 <__assert_fail@plt+0x595c>
   16a94:	orr	r0, r6, r9, lsl #16
   16a98:	mov	r6, #0
   16a9c:	mov	r1, r6
   16aa0:	add	sp, sp, #12
   16aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aa8:	cmp	r3, r1
   16aac:	movhi	r6, #0
   16ab0:	movhi	r0, r6
   16ab4:	bhi	16a9c <__assert_fail@plt+0x5668>
   16ab8:	clz	r7, r3
   16abc:	cmp	r7, #0
   16ac0:	bne	16bc0 <__assert_fail@plt+0x578c>
   16ac4:	cmp	r3, r1
   16ac8:	cmpcs	r2, r6
   16acc:	movhi	r6, #0
   16ad0:	movls	r6, #1
   16ad4:	movls	r0, #1
   16ad8:	movls	r6, r7
   16adc:	movhi	r0, r6
   16ae0:	b	16a9c <__assert_fail@plt+0x5668>
   16ae4:	cmp	r2, #0
   16ae8:	bne	16afc <__assert_fail@plt+0x56c8>
   16aec:	mov	r1, r2
   16af0:	mov	r0, #1
   16af4:	bl	1624c <__assert_fail@plt+0x4e18>
   16af8:	mov	r4, r0
   16afc:	clz	r3, r4
   16b00:	cmp	r3, #0
   16b04:	bne	16cbc <__assert_fail@plt+0x5888>
   16b08:	rsb	r5, r4, r5
   16b0c:	lsr	r8, r4, #16
   16b10:	uxth	sl, r4
   16b14:	mov	r6, #1
   16b18:	mov	r1, r8
   16b1c:	mov	r0, r5
   16b20:	bl	1624c <__assert_fail@plt+0x4e18>
   16b24:	mov	r1, r8
   16b28:	mov	r9, r0
   16b2c:	mov	r0, r5
   16b30:	bl	16438 <__assert_fail@plt+0x5004>
   16b34:	mul	r0, sl, r9
   16b38:	lsr	r3, r7, #16
   16b3c:	orr	r1, r3, r1, lsl #16
   16b40:	cmp	r0, r1
   16b44:	bls	16b64 <__assert_fail@plt+0x5730>
   16b48:	adds	r1, r1, r4
   16b4c:	sub	r2, r9, #1
   16b50:	bcs	16d98 <__assert_fail@plt+0x5964>
   16b54:	cmp	r0, r1
   16b58:	subhi	r9, r9, #2
   16b5c:	addhi	r1, r1, r4
   16b60:	bls	16d98 <__assert_fail@plt+0x5964>
   16b64:	rsb	fp, r0, r1
   16b68:	mov	r1, r8
   16b6c:	uxth	r7, r7
   16b70:	mov	r0, fp
   16b74:	bl	1624c <__assert_fail@plt+0x4e18>
   16b78:	mov	r1, r8
   16b7c:	mov	r5, r0
   16b80:	mov	r0, fp
   16b84:	bl	16438 <__assert_fail@plt+0x5004>
   16b88:	mul	sl, sl, r5
   16b8c:	orr	r1, r7, r1, lsl #16
   16b90:	cmp	sl, r1
   16b94:	bls	16bb0 <__assert_fail@plt+0x577c>
   16b98:	adds	r4, r1, r4
   16b9c:	sub	r3, r5, #1
   16ba0:	bcs	16da0 <__assert_fail@plt+0x596c>
   16ba4:	cmp	sl, r4
   16ba8:	subhi	r5, r5, #2
   16bac:	bls	16da0 <__assert_fail@plt+0x596c>
   16bb0:	orr	r0, r5, r9, lsl #16
   16bb4:	mov	r1, r6
   16bb8:	add	sp, sp, #12
   16bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bc0:	rsb	r1, r7, #32
   16bc4:	lsl	r0, r2, r7
   16bc8:	lsr	r2, r2, r1
   16bcc:	lsr	fp, r5, r1
   16bd0:	orr	r8, r2, r3, lsl r7
   16bd4:	lsr	r1, r6, r1
   16bd8:	str	r0, [sp, #4]
   16bdc:	orr	r5, r1, r5, lsl r7
   16be0:	lsr	r9, r8, #16
   16be4:	mov	r0, fp
   16be8:	uxth	sl, r8
   16bec:	mov	r1, r9
   16bf0:	bl	1624c <__assert_fail@plt+0x4e18>
   16bf4:	mov	r1, r9
   16bf8:	mov	r4, r0
   16bfc:	mov	r0, fp
   16c00:	bl	16438 <__assert_fail@plt+0x5004>
   16c04:	mul	r0, sl, r4
   16c08:	lsr	ip, r5, #16
   16c0c:	orr	r1, ip, r1, lsl #16
   16c10:	cmp	r0, r1
   16c14:	bls	16c28 <__assert_fail@plt+0x57f4>
   16c18:	adds	r1, r1, r8
   16c1c:	sub	r2, r4, #1
   16c20:	bcc	16dbc <__assert_fail@plt+0x5988>
   16c24:	mov	r4, r2
   16c28:	rsb	ip, r0, r1
   16c2c:	mov	r1, r9
   16c30:	str	ip, [sp]
   16c34:	uxth	r5, r5
   16c38:	mov	r0, ip
   16c3c:	bl	1624c <__assert_fail@plt+0x4e18>
   16c40:	ldr	ip, [sp]
   16c44:	mov	r1, r9
   16c48:	mov	fp, r0
   16c4c:	mov	r0, ip
   16c50:	bl	16438 <__assert_fail@plt+0x5004>
   16c54:	mul	sl, sl, fp
   16c58:	orr	r1, r5, r1, lsl #16
   16c5c:	cmp	sl, r1
   16c60:	bls	16c74 <__assert_fail@plt+0x5840>
   16c64:	adds	r1, r1, r8
   16c68:	sub	r2, fp, #1
   16c6c:	bcc	16da8 <__assert_fail@plt+0x5974>
   16c70:	mov	fp, r2
   16c74:	ldr	r3, [sp, #4]
   16c78:	orr	r0, fp, r4, lsl #16
   16c7c:	rsb	sl, sl, r1
   16c80:	umull	r4, r5, r0, r3
   16c84:	cmp	sl, r5
   16c88:	bcc	16ca8 <__assert_fail@plt+0x5874>
   16c8c:	movne	r3, #0
   16c90:	moveq	r3, #1
   16c94:	cmp	r4, r6, lsl r7
   16c98:	movls	r6, #0
   16c9c:	andhi	r6, r3, #1
   16ca0:	cmp	r6, #0
   16ca4:	beq	16a9c <__assert_fail@plt+0x5668>
   16ca8:	mov	r6, #0
   16cac:	sub	r0, r0, #1
   16cb0:	mov	r1, r6
   16cb4:	add	sp, sp, #12
   16cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cbc:	lsl	r4, r4, r3
   16cc0:	rsb	r9, r3, #32
   16cc4:	lsr	r2, r5, r9
   16cc8:	lsr	r9, r6, r9
   16ccc:	lsr	r8, r4, #16
   16cd0:	orr	r9, r9, r5, lsl r3
   16cd4:	mov	r0, r2
   16cd8:	lsl	r7, r6, r3
   16cdc:	mov	r1, r8
   16ce0:	str	r2, [sp]
   16ce4:	bl	1624c <__assert_fail@plt+0x4e18>
   16ce8:	ldr	r2, [sp]
   16cec:	mov	r1, r8
   16cf0:	uxth	sl, r4
   16cf4:	mov	fp, r0
   16cf8:	mov	r0, r2
   16cfc:	bl	16438 <__assert_fail@plt+0x5004>
   16d00:	mul	r0, sl, fp
   16d04:	lsr	r3, r9, #16
   16d08:	orr	r1, r3, r1, lsl #16
   16d0c:	cmp	r0, r1
   16d10:	bls	16d30 <__assert_fail@plt+0x58fc>
   16d14:	adds	r1, r1, r4
   16d18:	sub	r3, fp, #1
   16d1c:	bcs	16dd0 <__assert_fail@plt+0x599c>
   16d20:	cmp	r0, r1
   16d24:	subhi	fp, fp, #2
   16d28:	addhi	r1, r1, r4
   16d2c:	bls	16dd0 <__assert_fail@plt+0x599c>
   16d30:	rsb	r5, r0, r1
   16d34:	mov	r1, r8
   16d38:	uxth	r9, r9
   16d3c:	mov	r0, r5
   16d40:	bl	1624c <__assert_fail@plt+0x4e18>
   16d44:	mov	r1, r8
   16d48:	mov	r6, r0
   16d4c:	mov	r0, r5
   16d50:	bl	16438 <__assert_fail@plt+0x5004>
   16d54:	mul	r5, sl, r6
   16d58:	orr	r1, r9, r1, lsl #16
   16d5c:	cmp	r5, r1
   16d60:	bls	16d84 <__assert_fail@plt+0x5950>
   16d64:	adds	r1, r1, r4
   16d68:	sub	r3, r6, #1
   16d6c:	bcs	16d80 <__assert_fail@plt+0x594c>
   16d70:	cmp	r5, r1
   16d74:	subhi	r6, r6, #2
   16d78:	addhi	r1, r1, r4
   16d7c:	bhi	16d84 <__assert_fail@plt+0x5950>
   16d80:	mov	r6, r3
   16d84:	rsb	r5, r5, r1
   16d88:	orr	r6, r6, fp, lsl #16
   16d8c:	b	16b18 <__assert_fail@plt+0x56e4>
   16d90:	mov	r6, r3
   16d94:	b	16a94 <__assert_fail@plt+0x5660>
   16d98:	mov	r9, r2
   16d9c:	b	16b64 <__assert_fail@plt+0x5730>
   16da0:	mov	r5, r3
   16da4:	b	16bb0 <__assert_fail@plt+0x577c>
   16da8:	cmp	sl, r1
   16dac:	subhi	fp, fp, #2
   16db0:	addhi	r1, r1, r8
   16db4:	bhi	16c74 <__assert_fail@plt+0x5840>
   16db8:	b	16c70 <__assert_fail@plt+0x583c>
   16dbc:	cmp	r0, r1
   16dc0:	subhi	r4, r4, #2
   16dc4:	addhi	r1, r1, r8
   16dc8:	bhi	16c28 <__assert_fail@plt+0x57f4>
   16dcc:	b	16c24 <__assert_fail@plt+0x57f0>
   16dd0:	mov	fp, r3
   16dd4:	b	16d30 <__assert_fail@plt+0x58fc>
   16dd8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16ddc:	mov	r7, r0
   16de0:	ldr	r6, [pc, #76]	; 16e34 <__assert_fail@plt+0x5a00>
   16de4:	mov	r8, r1
   16de8:	ldr	r5, [pc, #72]	; 16e38 <__assert_fail@plt+0x5a04>
   16dec:	mov	r9, r2
   16df0:	add	r6, pc, r6
   16df4:	bl	110cc <calloc@plt-0x20>
   16df8:	add	r5, pc, r5
   16dfc:	rsb	r6, r5, r6
   16e00:	asrs	r6, r6, #2
   16e04:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   16e08:	sub	r5, r5, #4
   16e0c:	mov	r4, #0
   16e10:	add	r4, r4, #1
   16e14:	ldr	r3, [r5, #4]!
   16e18:	mov	r0, r7
   16e1c:	mov	r1, r8
   16e20:	mov	r2, r9
   16e24:	blx	r3
   16e28:	cmp	r4, r6
   16e2c:	bne	16e10 <__assert_fail@plt+0x59dc>
   16e30:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16e34:	strdeq	r1, [r1], -r0
   16e38:	andeq	r1, r1, r4, ror #1
   16e3c:	bx	lr
   16e40:	ldr	r3, [pc, #28]	; 16e64 <__assert_fail@plt+0x5a30>
   16e44:	mov	r1, #0
   16e48:	ldr	r2, [pc, #24]	; 16e68 <__assert_fail@plt+0x5a34>
   16e4c:	add	r3, pc, r3
   16e50:	ldr	r3, [r3, r2]
   16e54:	cmp	r3, #0
   16e58:	ldrne	r2, [r3]
   16e5c:	moveq	r2, r3
   16e60:	b	112e4 <__cxa_atexit@plt>
   16e64:	andeq	r1, r1, ip, lsr #3
   16e68:	andeq	r0, r0, r0, lsr r1

Disassembly of section .fini:

00016e6c <.fini>:
   16e6c:	push	{r3, lr}
   16e70:	pop	{r3, pc}
