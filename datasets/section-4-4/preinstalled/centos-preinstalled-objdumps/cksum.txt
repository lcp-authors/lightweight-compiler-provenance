
centos-preinstalled/cksum:     file format elf32-littlearm


Disassembly of section .init:

00010f14 <.init>:
   10f14:	push	{r3, lr}
   10f18:	bl	113fc <close@plt+0x240>
   10f1c:	pop	{r3, pc}

Disassembly of section .plt:

00010f20 <fdopen@plt-0x14>:
   10f20:	push	{lr}		; (str lr, [sp, #-4]!)
   10f24:	ldr	lr, [pc, #4]	; 10f30 <fdopen@plt-0x4>
   10f28:	add	lr, pc, lr
   10f2c:	ldr	pc, [lr, #8]!
   10f30:	ldrdeq	r5, [r1], -r0

00010f34 <fdopen@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #208]!	; 0xd0

00010f40 <calloc@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #200]!	; 0xc8

00010f4c <fputs_unlocked@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #192]!	; 0xc0

00010f58 <raise@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #184]!	; 0xb8

00010f64 <strcmp@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #176]!	; 0xb0

00010f70 <posix_fadvise64@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #168]!	; 0xa8

00010f7c <fflush@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #160]!	; 0xa0

00010f88 <free@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #152]!	; 0x98

00010f94 <_exit@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #144]!	; 0x90

00010fa0 <memcpy@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #136]!	; 0x88

00010fac <mbsinit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #128]!	; 0x80

00010fb8 <memcmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #120]!	; 0x78

00010fc4 <dcgettext@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #112]!	; 0x70

00010fd0 <__stack_chk_fail@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #104]!	; 0x68

00010fdc <realloc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #96]!	; 0x60

00010fe8 <textdomain@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #88]!	; 0x58

00010ff4 <iswprint@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #80]!	; 0x50

00011000 <fwrite@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #72]!	; 0x48

0001100c <lseek64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #64]!	; 0x40

00011018 <__ctype_get_mb_cur_max@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #56]!	; 0x38

00011024 <strcpy@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #48]!	; 0x30

00011030 <__fpending@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #40]!	; 0x28

0001103c <mbrtowc@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #32]!

00011048 <error@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #24]!

00011054 <open64@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #16]!

00011060 <getenv@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #8]!

0001106c <malloc@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #0]!

00011078 <__libc_start_main@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #20, 20	; 0x14000
   11080:	ldr	pc, [ip, #4088]!	; 0xff8

00011084 <__freading@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #20, 20	; 0x14000
   1108c:	ldr	pc, [ip, #4080]!	; 0xff0

00011090 <__gmon_start__@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #20, 20	; 0x14000
   11098:	ldr	pc, [ip, #4072]!	; 0xfe8

0001109c <getopt_long@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #20, 20	; 0x14000
   110a4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110a8 <__ctype_b_loc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #20, 20	; 0x14000
   110b0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110b4 <exit@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #20, 20	; 0x14000
   110bc:	ldr	pc, [ip, #4048]!	; 0xfd0

000110c0 <strlen@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #20, 20	; 0x14000
   110c8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110cc <ungetc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #20, 20	; 0x14000
   110d4:	ldr	pc, [ip, #4032]!	; 0xfc0

000110d8 <__errno_location@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #20, 20	; 0x14000
   110e0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110e4 <__cxa_atexit@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #20, 20	; 0x14000
   110ec:	ldr	pc, [ip, #4016]!	; 0xfb0

000110f0 <setvbuf@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #20, 20	; 0x14000
   110f8:	ldr	pc, [ip, #4008]!	; 0xfa8

000110fc <memset@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #20, 20	; 0x14000
   11104:	ldr	pc, [ip, #4000]!	; 0xfa0

00011108 <fscanf@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #20, 20	; 0x14000
   11110:	ldr	pc, [ip, #3992]!	; 0xf98

00011114 <__printf_chk@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #20, 20	; 0x14000
   1111c:	ldr	pc, [ip, #3984]!	; 0xf90

00011120 <fileno@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #20, 20	; 0x14000
   11128:	ldr	pc, [ip, #3976]!	; 0xf88

0001112c <__fprintf_chk@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #20, 20	; 0x14000
   11134:	ldr	pc, [ip, #3968]!	; 0xf80

00011138 <fclose@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #20, 20	; 0x14000
   11140:	ldr	pc, [ip, #3960]!	; 0xf78

00011144 <fseeko64@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #20, 20	; 0x14000
   1114c:	ldr	pc, [ip, #3952]!	; 0xf70

00011150 <__uflow@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #20, 20	; 0x14000
   11158:	ldr	pc, [ip, #3944]!	; 0xf68

0001115c <setlocale@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #20, 20	; 0x14000
   11164:	ldr	pc, [ip, #3936]!	; 0xf60

00011168 <strrchr@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #20, 20	; 0x14000
   11170:	ldr	pc, [ip, #3928]!	; 0xf58

00011174 <nl_langinfo@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #20, 20	; 0x14000
   1117c:	ldr	pc, [ip, #3920]!	; 0xf50

00011180 <__fread_unlocked_chk@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #20, 20	; 0x14000
   11188:	ldr	pc, [ip, #3912]!	; 0xf48

0001118c <fopen64@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #20, 20	; 0x14000
   11194:	ldr	pc, [ip, #3904]!	; 0xf40

00011198 <bindtextdomain@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #20, 20	; 0x14000
   111a0:	ldr	pc, [ip, #3896]!	; 0xf38

000111a4 <strncmp@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #20, 20	; 0x14000
   111ac:	ldr	pc, [ip, #3888]!	; 0xf30

000111b0 <abort@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #20, 20	; 0x14000
   111b8:	ldr	pc, [ip, #3880]!	; 0xf28

000111bc <close@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #20, 20	; 0x14000
   111c4:	ldr	pc, [ip, #3872]!	; 0xf20

Disassembly of section .text:

000111c8 <usage@@Base-0x32c>:
   111c8:	push	{r4, r5, r6, r7, r8, r9, lr}
   111cc:	mov	r7, r0
   111d0:	ldr	r6, [pc, #424]	; 11380 <close@plt+0x1c4>
   111d4:	sub	sp, sp, #20
   111d8:	ldr	r0, [r1]
   111dc:	mov	r9, r1
   111e0:	add	r6, pc, r6
   111e4:	ldr	r4, [pc, #408]	; 11384 <close@plt+0x1c8>
   111e8:	bl	11df4 <close_stdout@@Base+0x36c>
   111ec:	mov	r0, #6
   111f0:	mov	r1, r6
   111f4:	add	r4, pc, r4
   111f8:	bl	1115c <setlocale@plt>
   111fc:	ldr	r1, [pc, #388]	; 11388 <close@plt+0x1cc>
   11200:	mov	r0, r4
   11204:	ldr	r8, [pc, #384]	; 1138c <close@plt+0x1d0>
   11208:	add	r1, pc, r1
   1120c:	mov	r5, #0
   11210:	bl	11198 <bindtextdomain@plt>
   11214:	mov	r0, r4
   11218:	bl	10fe8 <textdomain@plt>
   1121c:	ldr	r3, [pc, #364]	; 11390 <close@plt+0x1d4>
   11220:	add	r8, pc, r8
   11224:	ldr	r0, [r8, r3]
   11228:	bl	15098 <close_stdout@@Base+0x3610>
   1122c:	ldr	r0, [pc, #352]	; 11394 <close@plt+0x1d8>
   11230:	mov	r1, r5
   11234:	mov	r2, #1
   11238:	mov	r3, r5
   1123c:	ldr	r0, [r8, r0]
   11240:	ldr	r0, [r0]
   11244:	bl	110f0 <setvbuf@plt>
   11248:	ldr	r2, [pc, #328]	; 11398 <close@plt+0x1dc>
   1124c:	mov	r3, r4
   11250:	ldr	ip, [pc, #324]	; 1139c <close@plt+0x1e0>
   11254:	ldr	lr, [pc, #324]	; 113a0 <close@plt+0x1e4>
   11258:	mov	r0, r7
   1125c:	ldr	r4, [r8, r2]
   11260:	mov	r1, r9
   11264:	ldr	r2, [pc, #312]	; 113a4 <close@plt+0x1e8>
   11268:	add	lr, pc, lr
   1126c:	ldr	r4, [r4]
   11270:	add	r2, pc, r2
   11274:	str	r4, [sp]
   11278:	ldr	ip, [r8, ip]
   1127c:	str	lr, [sp, #8]
   11280:	str	r5, [sp, #12]
   11284:	str	ip, [sp, #4]
   11288:	bl	11ce8 <close_stdout@@Base+0x260>
   1128c:	str	r5, [sp]
   11290:	mov	r2, r6
   11294:	mov	r0, r7
   11298:	mov	r1, r9
   1129c:	mov	r3, r5
   112a0:	bl	1109c <getopt_long@plt>
   112a4:	cmn	r0, #1
   112a8:	beq	112b4 <close@plt+0xf8>
   112ac:	mov	r0, #1
   112b0:	bl	114f4 <usage@@Base>
   112b4:	ldr	r2, [pc, #236]	; 113a8 <close@plt+0x1ec>
   112b8:	ldr	r3, [pc, #236]	; 113ac <close@plt+0x1f0>
   112bc:	add	r2, pc, r2
   112c0:	strb	r5, [r2]
   112c4:	ldr	r3, [r8, r3]
   112c8:	ldr	r4, [r3]
   112cc:	cmp	r4, r7
   112d0:	beq	11368 <close@plt+0x1ac>
   112d4:	cmp	r7, r4
   112d8:	subgt	r6, r4, #-1073741823	; 0xc0000001
   112dc:	movgt	r5, #1
   112e0:	addgt	r6, r9, r6, lsl #2
   112e4:	ble	1132c <close@plt+0x170>
   112e8:	ldr	r0, [r6, #4]!
   112ec:	mov	r1, #1
   112f0:	bl	116d4 <usage@@Base+0x1e0>
   112f4:	add	r4, r4, #1
   112f8:	cmp	r4, r7
   112fc:	and	r0, r5, r0
   11300:	uxtb	r5, r0
   11304:	bne	112e8 <close@plt+0x12c>
   11308:	ldr	r3, [pc, #160]	; 113b0 <close@plt+0x1f4>
   1130c:	add	r3, pc, r3
   11310:	ldrb	r3, [r3]
   11314:	cmp	r3, #0
   11318:	bne	11334 <close@plt+0x178>
   1131c:	cmp	r5, #0
   11320:	moveq	r0, #1
   11324:	bne	1132c <close@plt+0x170>
   11328:	bl	110b4 <exit@plt>
   1132c:	mov	r0, #0
   11330:	b	11328 <close@plt+0x16c>
   11334:	ldr	r3, [pc, #120]	; 113b4 <close@plt+0x1f8>
   11338:	ldr	r3, [r8, r3]
   1133c:	ldr	r0, [r3]
   11340:	bl	13e5c <close_stdout@@Base+0x23d4>
   11344:	cmn	r0, #1
   11348:	bne	1131c <close@plt+0x160>
   1134c:	bl	110d8 <__errno_location@plt>
   11350:	ldr	r2, [pc, #96]	; 113b8 <close@plt+0x1fc>
   11354:	add	r2, pc, r2
   11358:	ldr	r1, [r0]
   1135c:	mov	r0, #1
   11360:	bl	11048 <error@plt>
   11364:	b	1131c <close@plt+0x160>
   11368:	ldr	r0, [pc, #76]	; 113bc <close@plt+0x200>
   1136c:	mov	r1, r5
   11370:	add	r0, pc, r0
   11374:	bl	116d4 <usage@@Base+0x1e0>
   11378:	mov	r5, r0
   1137c:	b	11308 <close@plt+0x14c>
   11380:			; <UNDEFINED> instruction: 0x000044b4
   11384:	andeq	r4, r0, r0, ror #7
   11388:	ldrdeq	r4, [r0], -r0
   1138c:	ldrdeq	r4, [r1], -r8
   11390:	strdeq	r0, [r0], -ip
   11394:	andeq	r0, r0, ip, lsl #2
   11398:	strdeq	r0, [r0], -r4
   1139c:	andeq	r0, r0, r0, lsl r1
   113a0:	andeq	r4, r0, ip, lsl #9
   113a4:	andeq	r4, r0, ip, ror r4
   113a8:			; <UNDEFINED> instruction: 0x00014eb5
   113ac:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   113b0:	andeq	r4, r1, r5, ror #28
   113b4:	andeq	r0, r0, r8, lsl #2
   113b8:			; <UNDEFINED> instruction: 0x000043b0
   113bc:	muleq	r0, r4, r3
   113c0:	mov	fp, #0
   113c4:	mov	lr, #0
   113c8:	pop	{r1}		; (ldr r1, [sp], #4)
   113cc:	mov	r2, sp
   113d0:	push	{r2}		; (str r2, [sp, #-4]!)
   113d4:	push	{r0}		; (str r0, [sp, #-4]!)
   113d8:	ldr	ip, [pc, #16]	; 113f0 <close@plt+0x234>
   113dc:	push	{ip}		; (str ip, [sp, #-4]!)
   113e0:	ldr	r0, [pc, #12]	; 113f4 <close@plt+0x238>
   113e4:	ldr	r3, [pc, #12]	; 113f8 <close@plt+0x23c>
   113e8:	bl	11078 <__libc_start_main@plt>
   113ec:	bl	111b0 <abort@plt>
   113f0:	muleq	r1, r4, r0
   113f4:	andeq	r1, r1, r8, asr #3
   113f8:	andeq	r5, r1, r0, lsr r0
   113fc:	ldr	r3, [pc, #20]	; 11418 <close@plt+0x25c>
   11400:	ldr	r2, [pc, #20]	; 1141c <close@plt+0x260>
   11404:	add	r3, pc, r3
   11408:	ldr	r2, [r3, r2]
   1140c:	cmp	r2, #0
   11410:	bxeq	lr
   11414:	b	11090 <__gmon_start__@plt>
   11418:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1141c:	andeq	r0, r0, r0, lsl #2
   11420:	push	{r3, lr}
   11424:	movw	r0, #24952	; 0x6178
   11428:	ldr	r3, [pc, #36]	; 11454 <close@plt+0x298>
   1142c:	movt	r0, #2
   11430:	rsb	r3, r0, r3
   11434:	cmp	r3, #6
   11438:	popls	{r3, pc}
   1143c:	movw	r3, #0
   11440:	movt	r3, #0
   11444:	cmp	r3, #0
   11448:	popeq	{r3, pc}
   1144c:	blx	r3
   11450:	pop	{r3, pc}
   11454:	andeq	r6, r2, fp, ror r1
   11458:	push	{r3, lr}
   1145c:	movw	r0, #24952	; 0x6178
   11460:	movw	r3, #24952	; 0x6178
   11464:	movt	r0, #2
   11468:	movt	r3, #2
   1146c:	rsb	r3, r0, r3
   11470:	asr	r3, r3, #2
   11474:	add	r3, r3, r3, lsr #31
   11478:	asrs	r1, r3, #1
   1147c:	popeq	{r3, pc}
   11480:	movw	r2, #0
   11484:	movt	r2, #0
   11488:	cmp	r2, #0
   1148c:	popeq	{r3, pc}
   11490:	blx	r2
   11494:	pop	{r3, pc}
   11498:	push	{r4, lr}
   1149c:	movw	r4, #24952	; 0x6178
   114a0:	movt	r4, #2
   114a4:	ldrb	r3, [r4]
   114a8:	cmp	r3, #0
   114ac:	popne	{r4, pc}
   114b0:	bl	11420 <close@plt+0x264>
   114b4:	mov	r3, #1
   114b8:	strb	r3, [r4]
   114bc:	pop	{r4, pc}
   114c0:	movw	r0, #24240	; 0x5eb0
   114c4:	movt	r0, #2
   114c8:	push	{r3, lr}
   114cc:	ldr	r3, [r0]
   114d0:	cmp	r3, #0
   114d4:	beq	114ec <close@plt+0x330>
   114d8:	movw	r3, #0
   114dc:	movt	r3, #0
   114e0:	cmp	r3, #0
   114e4:	beq	114ec <close@plt+0x330>
   114e8:	blx	r3
   114ec:	pop	{r3, lr}
   114f0:	b	11458 <close@plt+0x29c>

000114f4 <usage@@Base>:
   114f4:	push	{r4, r5, r6, lr}
   114f8:	subs	r4, r0, #0
   114fc:	ldr	r5, [pc, #404]	; 11698 <usage@@Base+0x1a4>
   11500:	add	r5, pc, r5
   11504:	beq	1154c <usage@@Base+0x58>
   11508:	ldr	r3, [pc, #396]	; 1169c <usage@@Base+0x1a8>
   1150c:	mov	r2, #5
   11510:	ldr	r1, [pc, #392]	; 116a0 <usage@@Base+0x1ac>
   11514:	mov	r0, #0
   11518:	ldr	r3, [r5, r3]
   1151c:	add	r1, pc, r1
   11520:	ldr	r6, [r3]
   11524:	bl	10fc4 <dcgettext@plt>
   11528:	ldr	r3, [pc, #372]	; 116a4 <usage@@Base+0x1b0>
   1152c:	mov	r1, #1
   11530:	ldr	r3, [r5, r3]
   11534:	ldr	r3, [r3]
   11538:	mov	r2, r0
   1153c:	mov	r0, r6
   11540:	bl	1112c <__fprintf_chk@plt>
   11544:	mov	r0, r4
   11548:	bl	110b4 <exit@plt>
   1154c:	ldr	r1, [pc, #340]	; 116a8 <usage@@Base+0x1b4>
   11550:	mov	r2, #5
   11554:	add	r1, pc, r1
   11558:	bl	10fc4 <dcgettext@plt>
   1155c:	ldr	r3, [pc, #320]	; 116a4 <usage@@Base+0x1b0>
   11560:	ldr	r6, [r5, r3]
   11564:	ldr	r2, [r6]
   11568:	mov	r3, r2
   1156c:	mov	r1, r0
   11570:	mov	r0, #1
   11574:	bl	11114 <__printf_chk@plt>
   11578:	ldr	r1, [pc, #300]	; 116ac <usage@@Base+0x1b8>
   1157c:	mov	r2, #5
   11580:	mov	r0, r4
   11584:	add	r1, pc, r1
   11588:	bl	10fc4 <dcgettext@plt>
   1158c:	ldr	r3, [pc, #284]	; 116b0 <usage@@Base+0x1bc>
   11590:	ldr	r5, [r5, r3]
   11594:	ldr	r1, [r5]
   11598:	bl	10f4c <fputs_unlocked@plt>
   1159c:	ldr	r1, [pc, #272]	; 116b4 <usage@@Base+0x1c0>
   115a0:	mov	r2, #5
   115a4:	mov	r0, r4
   115a8:	add	r1, pc, r1
   115ac:	bl	10fc4 <dcgettext@plt>
   115b0:	ldr	r1, [r5]
   115b4:	bl	10f4c <fputs_unlocked@plt>
   115b8:	ldr	r1, [pc, #248]	; 116b8 <usage@@Base+0x1c4>
   115bc:	mov	r2, #5
   115c0:	mov	r0, r4
   115c4:	add	r1, pc, r1
   115c8:	bl	10fc4 <dcgettext@plt>
   115cc:	ldr	r1, [r5]
   115d0:	bl	10f4c <fputs_unlocked@plt>
   115d4:	ldr	r1, [pc, #224]	; 116bc <usage@@Base+0x1c8>
   115d8:	mov	r2, #5
   115dc:	mov	r0, r4
   115e0:	add	r1, pc, r1
   115e4:	bl	10fc4 <dcgettext@plt>
   115e8:	ldr	r2, [pc, #208]	; 116c0 <usage@@Base+0x1cc>
   115ec:	ldr	r3, [pc, #208]	; 116c4 <usage@@Base+0x1d0>
   115f0:	add	r2, pc, r2
   115f4:	add	r3, pc, r3
   115f8:	mov	r1, r0
   115fc:	mov	r0, #1
   11600:	bl	11114 <__printf_chk@plt>
   11604:	mov	r0, #5
   11608:	mov	r1, r4
   1160c:	bl	1115c <setlocale@plt>
   11610:	cmp	r0, #0
   11614:	beq	11630 <usage@@Base+0x13c>
   11618:	ldr	r1, [pc, #168]	; 116c8 <usage@@Base+0x1d4>
   1161c:	mov	r2, #3
   11620:	add	r1, pc, r1
   11624:	bl	111a4 <strncmp@plt>
   11628:	cmp	r0, #0
   1162c:	bne	11664 <usage@@Base+0x170>
   11630:	ldr	r1, [pc, #148]	; 116cc <usage@@Base+0x1d8>
   11634:	mov	r2, #5
   11638:	mov	r0, #0
   1163c:	add	r1, pc, r1
   11640:	bl	10fc4 <dcgettext@plt>
   11644:	mov	r5, r0
   11648:	ldr	r0, [r6]
   1164c:	bl	11ba0 <close_stdout@@Base+0x118>
   11650:	mov	r1, r5
   11654:	mov	r2, r0
   11658:	mov	r0, #1
   1165c:	bl	11114 <__printf_chk@plt>
   11660:	b	11544 <usage@@Base+0x50>
   11664:	ldr	r1, [pc, #100]	; 116d0 <usage@@Base+0x1dc>
   11668:	mov	r2, #5
   1166c:	mov	r0, r4
   11670:	add	r1, pc, r1
   11674:	bl	10fc4 <dcgettext@plt>
   11678:	mov	r5, r0
   1167c:	ldr	r0, [r6]
   11680:	bl	11ba0 <close_stdout@@Base+0x118>
   11684:	mov	r1, r5
   11688:	mov	r2, r0
   1168c:	mov	r0, #1
   11690:	bl	11114 <__printf_chk@plt>
   11694:	b	11630 <usage@@Base+0x13c>
   11698:	strdeq	r4, [r1], -r8
   1169c:	strdeq	r0, [r0], -r8
   116a0:			; <UNDEFINED> instruction: 0x00003fb0
   116a4:	andeq	r0, r0, ip, lsl r1
   116a8:	andeq	r3, r0, r0, lsr #31
   116ac:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   116b0:	andeq	r0, r0, ip, lsl #2
   116b4:	andeq	r3, r0, r8, lsr #31
   116b8:			; <UNDEFINED> instruction: 0x00003fbc
   116bc:	ldrdeq	r3, [r0], -r8
   116c0:	andeq	r3, r0, r0, ror #31
   116c4:	andeq	r3, r0, ip, ror #31
   116c8:	andeq	r3, r0, r8, ror #31
   116cc:	andeq	r4, r0, r8, lsl r0
   116d0:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   116d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116d8:	sub	sp, sp, #65536	; 0x10000
   116dc:	sub	sp, sp, #76	; 0x4c
   116e0:	ldr	r2, [pc, #824]	; 11a20 <usage@@Base+0x52c>
   116e4:	ldr	r3, [pc, #824]	; 11a24 <usage@@Base+0x530>
   116e8:	add	r2, pc, r2
   116ec:	str	r2, [sp, #24]
   116f0:	str	r0, [sp, #20]
   116f4:	ldrb	r2, [r0]
   116f8:	ldr	r0, [sp, #24]
   116fc:	str	r1, [sp, #36]	; 0x24
   11700:	cmp	r2, #45	; 0x2d
   11704:	add	r1, sp, #65536	; 0x10000
   11708:	ldr	r3, [r0, r3]
   1170c:	str	r3, [sp, #32]
   11710:	ldr	r3, [r3]
   11714:	str	r3, [r1, #68]	; 0x44
   11718:	beq	11934 <usage@@Base+0x440>
   1171c:	ldr	r1, [pc, #772]	; 11a28 <usage@@Base+0x534>
   11720:	ldr	r0, [sp, #20]
   11724:	add	r1, pc, r1
   11728:	bl	1118c <fopen64@plt>
   1172c:	subs	sl, r0, #0
   11730:	beq	119d4 <usage@@Base+0x4e0>
   11734:	ldr	r9, [pc, #752]	; 11a2c <usage@@Base+0x538>
   11738:	mov	r0, sl
   1173c:	mov	r1, #2
   11740:	add	fp, sp, #68	; 0x44
   11744:	bl	11c48 <close_stdout@@Base+0x1c0>
   11748:	add	r9, pc, r9
   1174c:	ldr	r0, [pc, #732]	; 11a30 <usage@@Base+0x53c>
   11750:	mov	r6, #0
   11754:	mov	r7, #0
   11758:	mov	r8, #0
   1175c:	add	r3, sp, #72	; 0x48
   11760:	add	r0, pc, r0
   11764:	str	r3, [sp, #16]
   11768:	str	r0, [sp, #28]
   1176c:	mov	r1, #65536	; 0x10000
   11770:	str	sl, [sp]
   11774:	mov	r3, r1
   11778:	mov	r0, fp
   1177c:	mov	r2, #1
   11780:	bl	11180 <__fread_unlocked_chk@plt>
   11784:	subs	ip, r0, #0
   11788:	beq	11808 <usage@@Base+0x314>
   1178c:	adds	r4, r6, ip
   11790:	adc	r5, r7, #0
   11794:	cmp	r7, r5
   11798:	cmpeq	r6, r4
   1179c:	bhi	117d8 <usage@@Base+0x2e4>
   117a0:	add	r3, sp, #67	; 0x43
   117a4:	add	ip, r3, ip
   117a8:	ldrb	r2, [r3, #1]!
   117ac:	eor	r2, r2, r8, lsr #24
   117b0:	cmp	r3, ip
   117b4:	ldr	r2, [r9, r2, lsl #2]
   117b8:	eor	r8, r2, r8, lsl #8
   117bc:	bne	117a8 <usage@@Base+0x2b4>
   117c0:	ldr	r3, [sl]
   117c4:	tst	r3, #16
   117c8:	bne	11814 <usage@@Base+0x320>
   117cc:	mov	r6, r4
   117d0:	mov	r7, r5
   117d4:	b	1176c <usage@@Base+0x278>
   117d8:	ldr	r1, [sp, #28]
   117dc:	mov	r2, #5
   117e0:	mov	r0, #0
   117e4:	str	ip, [sp, #12]
   117e8:	bl	10fc4 <dcgettext@plt>
   117ec:	mov	r1, #0
   117f0:	ldr	r3, [sp, #20]
   117f4:	mov	r2, r0
   117f8:	mov	r0, #1
   117fc:	bl	11048 <error@plt>
   11800:	ldr	ip, [sp, #12]
   11804:	b	117a0 <usage@@Base+0x2ac>
   11808:	ldr	r3, [sl]
   1180c:	mov	r4, r6
   11810:	mov	r5, r7
   11814:	tst	r3, #32
   11818:	bne	1198c <usage@@Base+0x498>
   1181c:	ldr	r2, [sp, #20]
   11820:	ldrb	r3, [r2]
   11824:	cmp	r3, #45	; 0x2d
   11828:	beq	11964 <usage@@Base+0x470>
   1182c:	mov	r0, sl
   11830:	bl	13e5c <close_stdout@@Base+0x23d4>
   11834:	cmn	r0, #1
   11838:	beq	119f8 <usage@@Base+0x504>
   1183c:	mov	r1, r5
   11840:	add	r2, sp, #44	; 0x2c
   11844:	mov	r0, r4
   11848:	bl	11c84 <close_stdout@@Base+0x1fc>
   1184c:	orrs	r1, r4, r5
   11850:	beq	1188c <usage@@Base+0x398>
   11854:	ldr	r3, [pc, #472]	; 11a34 <usage@@Base+0x540>
   11858:	mov	lr, #255	; 0xff
   1185c:	add	r3, pc, r3
   11860:	eor	ip, r4, r8, lsr #24
   11864:	lsr	r2, r4, #8
   11868:	orr	r2, r2, r5, lsl #24
   1186c:	lsr	r1, r5, #8
   11870:	and	ip, ip, lr
   11874:	mov	r4, r2
   11878:	mov	r5, r1
   1187c:	ldr	r2, [r3, ip, lsl #2]
   11880:	orrs	r1, r4, r5
   11884:	eor	r8, r2, r8, lsl #8
   11888:	bne	11860 <usage@@Base+0x36c>
   1188c:	ldr	r2, [sp, #36]	; 0x24
   11890:	cmp	r2, #0
   11894:	mvn	r2, r8
   11898:	beq	11974 <usage@@Base+0x480>
   1189c:	ldr	r3, [sp, #20]
   118a0:	ldr	r1, [pc, #400]	; 11a38 <usage@@Base+0x544>
   118a4:	str	r3, [sp]
   118a8:	add	r1, pc, r1
   118ac:	mov	r3, r0
   118b0:	mov	r0, #1
   118b4:	bl	11114 <__printf_chk@plt>
   118b8:	ldr	r0, [sp, #24]
   118bc:	ldr	r3, [pc, #376]	; 11a3c <usage@@Base+0x548>
   118c0:	ldr	r3, [r0, r3]
   118c4:	ldr	r3, [r3]
   118c8:	ldr	r3, [r3]
   118cc:	tst	r3, #32
   118d0:	moveq	r0, #1
   118d4:	beq	11910 <usage@@Base+0x41c>
   118d8:	bl	110d8 <__errno_location@plt>
   118dc:	ldr	r1, [pc, #348]	; 11a40 <usage@@Base+0x54c>
   118e0:	mov	r2, #5
   118e4:	add	r1, pc, r1
   118e8:	ldr	r4, [r0]
   118ec:	mov	r0, #0
   118f0:	bl	10fc4 <dcgettext@plt>
   118f4:	ldr	r2, [pc, #328]	; 11a44 <usage@@Base+0x550>
   118f8:	mov	r1, r4
   118fc:	add	r2, pc, r2
   11900:	mov	r3, r0
   11904:	mov	r0, #1
   11908:	bl	11048 <error@plt>
   1190c:	mov	r0, #1
   11910:	add	r1, sp, #65536	; 0x10000
   11914:	ldr	r2, [r1, #68]	; 0x44
   11918:	ldr	r1, [sp, #32]
   1191c:	ldr	r3, [r1]
   11920:	cmp	r2, r3
   11924:	bne	11a1c <usage@@Base+0x528>
   11928:	add	sp, sp, #65536	; 0x10000
   1192c:	add	sp, sp, #76	; 0x4c
   11930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11934:	ldr	r2, [sp, #20]
   11938:	ldrb	r3, [r2, #1]
   1193c:	cmp	r3, #0
   11940:	bne	1171c <usage@@Base+0x228>
   11944:	ldr	r3, [pc, #252]	; 11a48 <usage@@Base+0x554>
   11948:	mov	r1, #1
   1194c:	ldr	r2, [pc, #248]	; 11a4c <usage@@Base+0x558>
   11950:	ldr	r3, [r0, r3]
   11954:	add	r2, pc, r2
   11958:	strb	r1, [r2]
   1195c:	ldr	sl, [r3]
   11960:	b	11734 <usage@@Base+0x240>
   11964:	ldrb	r3, [r2, #1]
   11968:	cmp	r3, #0
   1196c:	beq	1183c <usage@@Base+0x348>
   11970:	b	1182c <usage@@Base+0x338>
   11974:	ldr	r1, [pc, #212]	; 11a50 <usage@@Base+0x55c>
   11978:	mov	r3, r0
   1197c:	mov	r0, #1
   11980:	add	r1, pc, r1
   11984:	bl	11114 <__printf_chk@plt>
   11988:	b	118b8 <usage@@Base+0x3c4>
   1198c:	bl	110d8 <__errno_location@plt>
   11990:	ldr	r2, [pc, #188]	; 11a54 <usage@@Base+0x560>
   11994:	ldr	r3, [sp, #20]
   11998:	add	r2, pc, r2
   1199c:	ldr	r1, [r0]
   119a0:	mov	r0, #0
   119a4:	bl	11048 <error@plt>
   119a8:	ldr	r1, [sp, #20]
   119ac:	ldrb	r3, [r1]
   119b0:	cmp	r3, #45	; 0x2d
   119b4:	bne	119c4 <usage@@Base+0x4d0>
   119b8:	ldrb	r0, [r1, #1]
   119bc:	cmp	r0, #0
   119c0:	beq	11910 <usage@@Base+0x41c>
   119c4:	mov	r0, sl
   119c8:	bl	13e5c <close_stdout@@Base+0x23d4>
   119cc:	mov	r0, #0
   119d0:	b	11910 <usage@@Base+0x41c>
   119d4:	bl	110d8 <__errno_location@plt>
   119d8:	ldr	r2, [pc, #120]	; 11a58 <usage@@Base+0x564>
   119dc:	ldr	r3, [sp, #20]
   119e0:	add	r2, pc, r2
   119e4:	ldr	r1, [r0]
   119e8:	mov	r0, sl
   119ec:	bl	11048 <error@plt>
   119f0:	mov	r0, sl
   119f4:	b	11910 <usage@@Base+0x41c>
   119f8:	bl	110d8 <__errno_location@plt>
   119fc:	ldr	r2, [pc, #88]	; 11a5c <usage@@Base+0x568>
   11a00:	ldr	r3, [sp, #20]
   11a04:	add	r2, pc, r2
   11a08:	ldr	r1, [r0]
   11a0c:	mov	r0, #0
   11a10:	bl	11048 <error@plt>
   11a14:	mov	r0, #0
   11a18:	b	11910 <usage@@Base+0x41c>
   11a1c:	bl	10fd0 <__stack_chk_fail@plt>
   11a20:	andeq	r4, r1, r0, lsl r9
   11a24:	andeq	r0, r0, ip, ror #1
   11a28:	andeq	r3, r0, r4, ror pc
   11a2c:	andeq	r3, r0, r4, lsl #19
   11a30:	andeq	r3, r0, ip, lsr pc
   11a34:	andeq	r3, r0, r0, ror r8
   11a38:	andeq	r3, r0, r8, lsl #28
   11a3c:	andeq	r0, r0, ip, lsl #2
   11a40:	andeq	r3, r0, r0, ror #27
   11a44:	ldrdeq	r3, [r0], -r4
   11a48:	andeq	r0, r0, r8, lsl #2
   11a4c:	andeq	r4, r1, sp, lsl r8
   11a50:	andeq	r3, r0, ip, lsr sp
   11a54:	andeq	r3, r0, ip, ror sp
   11a58:	andeq	r3, r0, r4, lsr sp
   11a5c:	andeq	r3, r0, r0, lsl sp
   11a60:	ldr	r3, [pc, #8]	; 11a70 <usage@@Base+0x57c>
   11a64:	add	r3, pc, r3
   11a68:	str	r0, [r3]
   11a6c:	bx	lr
   11a70:	andeq	r4, r1, r0, lsl r7
   11a74:	ldr	r3, [pc, #8]	; 11a84 <usage@@Base+0x590>
   11a78:	add	r3, pc, r3
   11a7c:	strb	r0, [r3, #4]
   11a80:	bx	lr
   11a84:	strdeq	r4, [r1], -ip

00011a88 <close_stdout@@Base>:
   11a88:	push	{r4, r5, r6, r7, lr}
   11a8c:	sub	sp, sp, #12
   11a90:	ldr	r4, [pc, #228]	; 11b7c <close_stdout@@Base+0xf4>
   11a94:	ldr	r3, [pc, #228]	; 11b80 <close_stdout@@Base+0xf8>
   11a98:	add	r4, pc, r4
   11a9c:	ldr	r3, [r4, r3]
   11aa0:	ldr	r0, [r3]
   11aa4:	bl	14004 <close_stdout@@Base+0x257c>
   11aa8:	cmp	r0, #0
   11aac:	beq	11ad4 <close_stdout@@Base+0x4c>
   11ab0:	ldr	r3, [pc, #204]	; 11b84 <close_stdout@@Base+0xfc>
   11ab4:	add	r3, pc, r3
   11ab8:	ldrb	r3, [r3, #4]
   11abc:	cmp	r3, #0
   11ac0:	beq	11af4 <close_stdout@@Base+0x6c>
   11ac4:	bl	110d8 <__errno_location@plt>
   11ac8:	ldr	r3, [r0]
   11acc:	cmp	r3, #32
   11ad0:	bne	11af4 <close_stdout@@Base+0x6c>
   11ad4:	ldr	r3, [pc, #172]	; 11b88 <close_stdout@@Base+0x100>
   11ad8:	ldr	r3, [r4, r3]
   11adc:	ldr	r0, [r3]
   11ae0:	bl	14004 <close_stdout@@Base+0x257c>
   11ae4:	cmp	r0, #0
   11ae8:	bne	11b48 <close_stdout@@Base+0xc0>
   11aec:	add	sp, sp, #12
   11af0:	pop	{r4, r5, r6, r7, pc}
   11af4:	ldr	r1, [pc, #144]	; 11b8c <close_stdout@@Base+0x104>
   11af8:	mov	r0, #0
   11afc:	mov	r2, #5
   11b00:	add	r1, pc, r1
   11b04:	bl	10fc4 <dcgettext@plt>
   11b08:	ldr	r3, [pc, #128]	; 11b90 <close_stdout@@Base+0x108>
   11b0c:	ldr	r5, [pc, r3]
   11b10:	cmp	r5, #0
   11b14:	mov	r6, r0
   11b18:	beq	11b58 <close_stdout@@Base+0xd0>
   11b1c:	bl	110d8 <__errno_location@plt>
   11b20:	ldr	r7, [r0]
   11b24:	mov	r0, r5
   11b28:	bl	134f0 <close_stdout@@Base+0x1a68>
   11b2c:	ldr	r2, [pc, #96]	; 11b94 <close_stdout@@Base+0x10c>
   11b30:	str	r6, [sp]
   11b34:	mov	r1, r7
   11b38:	add	r2, pc, r2
   11b3c:	mov	r3, r0
   11b40:	mov	r0, #0
   11b44:	bl	11048 <error@plt>
   11b48:	ldr	r3, [pc, #72]	; 11b98 <close_stdout@@Base+0x110>
   11b4c:	ldr	r3, [r4, r3]
   11b50:	ldr	r0, [r3]
   11b54:	bl	10f94 <_exit@plt>
   11b58:	bl	110d8 <__errno_location@plt>
   11b5c:	ldr	r2, [pc, #56]	; 11b9c <close_stdout@@Base+0x114>
   11b60:	add	r2, pc, r2
   11b64:	mov	r3, r0
   11b68:	mov	r0, r5
   11b6c:	ldr	r1, [r3]
   11b70:	mov	r3, r6
   11b74:	bl	11048 <error@plt>
   11b78:	b	11b48 <close_stdout@@Base+0xc0>
   11b7c:	andeq	r4, r1, r0, ror #10
   11b80:	andeq	r0, r0, ip, lsl #2
   11b84:	andeq	r4, r1, r0, asr #13
   11b88:	strdeq	r0, [r0], -r8
   11b8c:	andeq	r3, r0, r4, asr #23
   11b90:	andeq	r4, r1, r8, ror #12
   11b94:	ldrdeq	r3, [r0], -r8
   11b98:	andeq	r0, r0, r4, lsl r1
   11b9c:			; <UNDEFINED> instruction: 0x00003bb4
   11ba0:	ldrb	r3, [r0]
   11ba4:	cmp	r3, #47	; 0x2f
   11ba8:	bne	11bc4 <close_stdout@@Base+0x13c>
   11bac:	add	r2, r0, #1
   11bb0:	mov	r0, r2
   11bb4:	add	r2, r2, #1
   11bb8:	ldrb	r3, [r0]
   11bbc:	cmp	r3, #47	; 0x2f
   11bc0:	beq	11bb0 <close_stdout@@Base+0x128>
   11bc4:	cmp	r3, #0
   11bc8:	bxeq	lr
   11bcc:	mov	r2, r0
   11bd0:	mov	r1, #0
   11bd4:	cmp	r3, #47	; 0x2f
   11bd8:	moveq	r1, #1
   11bdc:	beq	11bec <close_stdout@@Base+0x164>
   11be0:	cmp	r1, #0
   11be4:	movne	r0, r2
   11be8:	movne	r1, #0
   11bec:	ldrb	r3, [r2, #1]!
   11bf0:	cmp	r3, #0
   11bf4:	bne	11bd4 <close_stdout@@Base+0x14c>
   11bf8:	bx	lr
   11bfc:	push	{r4, lr}
   11c00:	mov	r4, r0
   11c04:	bl	110c0 <strlen@plt>
   11c08:	cmp	r0, #1
   11c0c:	popls	{r4, pc}
   11c10:	sub	r3, r0, #1
   11c14:	ldrb	r2, [r4, r3]
   11c18:	cmp	r2, #47	; 0x2f
   11c1c:	popne	{r4, pc}
   11c20:	mov	r0, r3
   11c24:	cmp	r0, #1
   11c28:	sub	r3, r3, #1
   11c2c:	beq	11c40 <close_stdout@@Base+0x1b8>
   11c30:	ldrb	r2, [r4, r3]
   11c34:	cmp	r2, #47	; 0x2f
   11c38:	popne	{r4, pc}
   11c3c:	b	11c20 <close_stdout@@Base+0x198>
   11c40:	pop	{r4, pc}
   11c44:	b	10f70 <posix_fadvise64@plt>
   11c48:	cmp	r0, #0
   11c4c:	push	{r4, r5, r6, lr}
   11c50:	mov	r6, r1
   11c54:	sub	sp, sp, #16
   11c58:	beq	11c7c <close_stdout@@Base+0x1f4>
   11c5c:	mov	r4, #0
   11c60:	mov	r5, #0
   11c64:	bl	11120 <fileno@plt>
   11c68:	str	r6, [sp, #8]
   11c6c:	mov	r2, r4
   11c70:	mov	r3, r5
   11c74:	strd	r4, [sp]
   11c78:	bl	11c44 <close_stdout@@Base+0x1bc>
   11c7c:	add	sp, sp, #16
   11c80:	pop	{r4, r5, r6, pc}
   11c84:	push	{r3, r4, r5, r6, r7, lr}
   11c88:	add	r6, r2, #19
   11c8c:	mov	r4, r0
   11c90:	mov	r5, r1
   11c94:	mov	r3, #0
   11c98:	strb	r3, [r2, #20]
   11c9c:	mov	r0, r4
   11ca0:	mov	r1, r5
   11ca4:	mov	r2, #10
   11ca8:	mov	r3, #0
   11cac:	bl	146b0 <close_stdout@@Base+0x2c28>
   11cb0:	mov	r7, r6
   11cb4:	mov	r0, r4
   11cb8:	mov	r1, r5
   11cbc:	mov	r3, #0
   11cc0:	add	ip, r2, #48	; 0x30
   11cc4:	mov	r2, #10
   11cc8:	strb	ip, [r6], #-1
   11ccc:	bl	146b0 <close_stdout@@Base+0x2c28>
   11cd0:	mov	r4, r0
   11cd4:	mov	r5, r1
   11cd8:	orrs	r3, r4, r5
   11cdc:	bne	11c9c <close_stdout@@Base+0x214>
   11ce0:	mov	r0, r7
   11ce4:	pop	{r3, r4, r5, r6, r7, pc}
   11ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cec:	mov	r9, r3
   11cf0:	ldr	r4, [pc, #224]	; 11dd8 <close_stdout@@Base+0x350>
   11cf4:	sub	sp, sp, #28
   11cf8:	ldr	ip, [pc, #220]	; 11ddc <close_stdout@@Base+0x354>
   11cfc:	cmp	r0, #2
   11d00:	add	r4, pc, r4
   11d04:	ldr	r5, [pc, #212]	; 11de0 <close_stdout@@Base+0x358>
   11d08:	mov	r7, #0
   11d0c:	mov	sl, r2
   11d10:	ldr	r6, [r4, ip]
   11d14:	ldr	r8, [sp, #64]	; 0x40
   11d18:	ldr	fp, [sp, #68]	; 0x44
   11d1c:	ldr	r3, [r6]
   11d20:	str	r3, [sp, #20]
   11d24:	ldr	r5, [r4, r5]
   11d28:	ldr	ip, [r5]
   11d2c:	str	r7, [r5]
   11d30:	beq	11d60 <close_stdout@@Base+0x2d8>
   11d34:	ldr	r3, [pc, #168]	; 11de4 <close_stdout@@Base+0x35c>
   11d38:	mov	r2, #0
   11d3c:	ldr	r0, [sp, #20]
   11d40:	ldr	r1, [r6]
   11d44:	str	ip, [r5]
   11d48:	ldr	r3, [r4, r3]
   11d4c:	cmp	r0, r1
   11d50:	str	r2, [r3]
   11d54:	bne	11dd4 <close_stdout@@Base+0x34c>
   11d58:	add	sp, sp, #28
   11d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d60:	ldr	r2, [pc, #128]	; 11de8 <close_stdout@@Base+0x360>
   11d64:	ldr	r3, [pc, #128]	; 11dec <close_stdout@@Base+0x364>
   11d68:	str	r7, [sp]
   11d6c:	add	r2, pc, r2
   11d70:	add	r3, pc, r3
   11d74:	str	ip, [sp, #12]
   11d78:	bl	1109c <getopt_long@plt>
   11d7c:	ldr	ip, [sp, #12]
   11d80:	cmn	r0, #1
   11d84:	beq	11d34 <close_stdout@@Base+0x2ac>
   11d88:	cmp	r0, #104	; 0x68
   11d8c:	beq	11dc8 <close_stdout@@Base+0x340>
   11d90:	cmp	r0, #118	; 0x76
   11d94:	bne	11d34 <close_stdout@@Base+0x2ac>
   11d98:	ldr	ip, [pc, #80]	; 11df0 <close_stdout@@Base+0x368>
   11d9c:	add	r0, sp, #72	; 0x48
   11da0:	str	r0, [sp, #16]
   11da4:	mov	r1, sl
   11da8:	mov	r2, r9
   11dac:	mov	r3, r8
   11db0:	ldr	ip, [r4, ip]
   11db4:	str	r0, [sp]
   11db8:	ldr	r0, [ip]
   11dbc:	bl	13a64 <close_stdout@@Base+0x1fdc>
   11dc0:	mov	r0, #0
   11dc4:	bl	110b4 <exit@plt>
   11dc8:	mov	r0, r7
   11dcc:	blx	fp
   11dd0:	b	11d98 <close_stdout@@Base+0x310>
   11dd4:	bl	10fd0 <__stack_chk_fail@plt>
   11dd8:	strdeq	r4, [r1], -r8
   11ddc:	andeq	r0, r0, ip, ror #1
   11de0:	andeq	r0, r0, r4, lsr #2
   11de4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11de8:	andeq	r3, r0, ip, lsr #19
   11dec:	andeq	r4, r1, ip, lsr r1
   11df0:	andeq	r0, r0, ip, lsl #2
   11df4:	push	{r3, r4, r5, r6, r7, lr}
   11df8:	subs	r4, r0, #0
   11dfc:	ldr	r5, [pc, #172]	; 11eb0 <close_stdout@@Base+0x428>
   11e00:	add	r5, pc, r5
   11e04:	beq	11e8c <close_stdout@@Base+0x404>
   11e08:	mov	r1, #47	; 0x2f
   11e0c:	bl	11168 <strrchr@plt>
   11e10:	subs	r6, r0, #0
   11e14:	beq	11e70 <close_stdout@@Base+0x3e8>
   11e18:	add	r7, r6, #1
   11e1c:	rsb	r3, r4, r7
   11e20:	cmp	r3, #6
   11e24:	ble	11e70 <close_stdout@@Base+0x3e8>
   11e28:	ldr	r1, [pc, #132]	; 11eb4 <close_stdout@@Base+0x42c>
   11e2c:	sub	r0, r6, #6
   11e30:	mov	r2, #7
   11e34:	add	r1, pc, r1
   11e38:	bl	111a4 <strncmp@plt>
   11e3c:	cmp	r0, #0
   11e40:	bne	11e70 <close_stdout@@Base+0x3e8>
   11e44:	ldr	r1, [pc, #108]	; 11eb8 <close_stdout@@Base+0x430>
   11e48:	mov	r0, r7
   11e4c:	mov	r2, #3
   11e50:	add	r1, pc, r1
   11e54:	bl	111a4 <strncmp@plt>
   11e58:	cmp	r0, #0
   11e5c:	movne	r4, r7
   11e60:	ldreq	r3, [pc, #84]	; 11ebc <close_stdout@@Base+0x434>
   11e64:	addeq	r4, r6, #4
   11e68:	ldreq	r3, [r5, r3]
   11e6c:	streq	r4, [r3]
   11e70:	ldr	r2, [pc, #72]	; 11ec0 <close_stdout@@Base+0x438>
   11e74:	ldr	r3, [pc, #72]	; 11ec4 <close_stdout@@Base+0x43c>
   11e78:	ldr	r2, [r5, r2]
   11e7c:	str	r4, [r2]
   11e80:	ldr	r3, [r5, r3]
   11e84:	str	r4, [r3]
   11e88:	pop	{r3, r4, r5, r6, r7, pc}
   11e8c:	ldr	r3, [pc, #52]	; 11ec8 <close_stdout@@Base+0x440>
   11e90:	mov	r1, #1
   11e94:	ldr	r0, [pc, #48]	; 11ecc <close_stdout@@Base+0x444>
   11e98:	mov	r2, #55	; 0x37
   11e9c:	ldr	r3, [r5, r3]
   11ea0:	add	r0, pc, r0
   11ea4:	ldr	r3, [r3]
   11ea8:	bl	11000 <fwrite@plt>
   11eac:	bl	111b0 <abort@plt>
   11eb0:	strdeq	r4, [r1], -r8
   11eb4:	andeq	r3, r0, r0, lsr r9
   11eb8:	andeq	r3, r0, ip, lsl r9
   11ebc:	andeq	r0, r0, r8, lsr #2
   11ec0:	andeq	r0, r0, ip, lsl r1
   11ec4:	andeq	r0, r0, r8, lsl r1
   11ec8:	strdeq	r0, [r0], -r8
   11ecc:	andeq	r3, r0, ip, lsl #17
   11ed0:	push	{r3, lr}
   11ed4:	mov	r3, r0
   11ed8:	mov	r2, #0
   11edc:	cmp	r1, #8
   11ee0:	str	r2, [r3], #4
   11ee4:	add	r3, r3, #4
   11ee8:	str	r2, [r0, #4]
   11eec:	str	r2, [r3], #4
   11ef0:	str	r2, [r3], #4
   11ef4:	str	r2, [r3], #4
   11ef8:	str	r2, [r3], #4
   11efc:	str	r2, [r3], #4
   11f00:	str	r2, [r3], #4
   11f04:	str	r2, [r3], #4
   11f08:	str	r2, [r3], #4
   11f0c:	str	r2, [r3], #4
   11f10:	str	r2, [r3]
   11f14:	beq	11f20 <close_stdout@@Base+0x498>
   11f18:	str	r1, [r0]
   11f1c:	pop	{r3, pc}
   11f20:	bl	111b0 <abort@plt>
   11f24:	push	{r4, r5, r6, lr}
   11f28:	mov	r4, r0
   11f2c:	mov	r6, r1
   11f30:	mov	r0, #0
   11f34:	mov	r1, r4
   11f38:	mov	r2, #5
   11f3c:	bl	10fc4 <dcgettext@plt>
   11f40:	cmp	r0, r4
   11f44:	mov	r5, r0
   11f48:	beq	11f50 <close_stdout@@Base+0x4c8>
   11f4c:	pop	{r4, r5, r6, pc}
   11f50:	bl	14084 <close_stdout@@Base+0x25fc>
   11f54:	ldrb	r3, [r0]
   11f58:	bic	r3, r3, #32
   11f5c:	cmp	r3, #85	; 0x55
   11f60:	bne	11fd4 <close_stdout@@Base+0x54c>
   11f64:	ldrb	r3, [r0, #1]
   11f68:	bic	r3, r3, #32
   11f6c:	cmp	r3, #84	; 0x54
   11f70:	bne	11fc0 <close_stdout@@Base+0x538>
   11f74:	ldrb	r3, [r0, #2]
   11f78:	bic	r3, r3, #32
   11f7c:	cmp	r3, #70	; 0x46
   11f80:	bne	11fc0 <close_stdout@@Base+0x538>
   11f84:	ldrb	r3, [r0, #3]
   11f88:	cmp	r3, #45	; 0x2d
   11f8c:	bne	11fc0 <close_stdout@@Base+0x538>
   11f90:	ldrb	r3, [r0, #4]
   11f94:	cmp	r3, #56	; 0x38
   11f98:	bne	11fc0 <close_stdout@@Base+0x538>
   11f9c:	ldrb	r3, [r0, #5]
   11fa0:	cmp	r3, #0
   11fa4:	bne	11fc0 <close_stdout@@Base+0x538>
   11fa8:	ldrb	r3, [r5]
   11fac:	cmp	r3, #96	; 0x60
   11fb0:	beq	1204c <close_stdout@@Base+0x5c4>
   11fb4:	ldr	r0, [pc, #180]	; 12070 <close_stdout@@Base+0x5e8>
   11fb8:	add	r0, pc, r0
   11fbc:	pop	{r4, r5, r6, pc}
   11fc0:	cmp	r6, #7
   11fc4:	beq	12058 <close_stdout@@Base+0x5d0>
   11fc8:	ldr	r0, [pc, #164]	; 12074 <close_stdout@@Base+0x5ec>
   11fcc:	add	r0, pc, r0
   11fd0:	pop	{r4, r5, r6, pc}
   11fd4:	cmp	r3, #71	; 0x47
   11fd8:	bne	11fc0 <close_stdout@@Base+0x538>
   11fdc:	ldrb	r3, [r0, #1]
   11fe0:	bic	r3, r3, #32
   11fe4:	cmp	r3, #66	; 0x42
   11fe8:	bne	11fc0 <close_stdout@@Base+0x538>
   11fec:	ldrb	r3, [r0, #2]
   11ff0:	cmp	r3, #49	; 0x31
   11ff4:	bne	11fc0 <close_stdout@@Base+0x538>
   11ff8:	ldrb	r3, [r0, #3]
   11ffc:	cmp	r3, #56	; 0x38
   12000:	bne	11fc0 <close_stdout@@Base+0x538>
   12004:	ldrb	r3, [r0, #4]
   12008:	cmp	r3, #48	; 0x30
   1200c:	bne	11fc0 <close_stdout@@Base+0x538>
   12010:	ldrb	r3, [r0, #5]
   12014:	cmp	r3, #51	; 0x33
   12018:	bne	11fc0 <close_stdout@@Base+0x538>
   1201c:	ldrb	r3, [r0, #6]
   12020:	cmp	r3, #48	; 0x30
   12024:	bne	11fc0 <close_stdout@@Base+0x538>
   12028:	ldrb	r3, [r0, #7]
   1202c:	cmp	r3, #0
   12030:	bne	11fc0 <close_stdout@@Base+0x538>
   12034:	ldrb	r3, [r5]
   12038:	cmp	r3, #96	; 0x60
   1203c:	beq	12064 <close_stdout@@Base+0x5dc>
   12040:	ldr	r0, [pc, #48]	; 12078 <close_stdout@@Base+0x5f0>
   12044:	add	r0, pc, r0
   12048:	pop	{r4, r5, r6, pc}
   1204c:	ldr	r0, [pc, #40]	; 1207c <close_stdout@@Base+0x5f4>
   12050:	add	r0, pc, r0
   12054:	pop	{r4, r5, r6, pc}
   12058:	ldr	r0, [pc, #32]	; 12080 <close_stdout@@Base+0x5f8>
   1205c:	add	r0, pc, r0
   12060:	pop	{r4, r5, r6, pc}
   12064:	ldr	r0, [pc, #24]	; 12084 <close_stdout@@Base+0x5fc>
   12068:	add	r0, pc, r0
   1206c:	pop	{r4, r5, r6, pc}
   12070:	ldrdeq	r3, [r0], -r8
   12074:	andeq	r3, r0, ip, asr #15
   12078:	andeq	r3, r0, r0, asr r7
   1207c:	andeq	r3, r0, r4, asr r7
   12080:	andeq	r3, r0, r0, asr #14
   12084:	andeq	r3, r0, r8, lsr r7
   12088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1208c:	sub	sp, sp, #124	; 0x7c
   12090:	ldr	ip, [pc, #3304]	; 12d80 <close_stdout@@Base+0x12f8>
   12094:	mov	sl, r1
   12098:	str	r0, [sp, #40]	; 0x28
   1209c:	mov	r8, r3
   120a0:	ldr	r0, [pc, #3292]	; 12d84 <close_stdout@@Base+0x12fc>
   120a4:	add	ip, pc, ip
   120a8:	str	r2, [sp, #32]
   120ac:	ldr	r1, [sp, #164]	; 0xa4
   120b0:	mov	r3, ip
   120b4:	ldr	r0, [ip, r0]
   120b8:	ldr	r2, [sp, #172]	; 0xac
   120bc:	ubfx	r1, r1, #1, #1
   120c0:	str	r1, [sp, #36]	; 0x24
   120c4:	str	r0, [sp, #56]	; 0x38
   120c8:	ldr	r0, [sp, #168]	; 0xa8
   120cc:	ldr	r1, [sp, #176]	; 0xb0
   120d0:	str	r2, [sp, #72]	; 0x48
   120d4:	str	r0, [sp, #48]	; 0x30
   120d8:	ldr	r0, [sp, #56]	; 0x38
   120dc:	str	r1, [sp, #68]	; 0x44
   120e0:	ldr	r3, [r0]
   120e4:	str	r3, [sp, #116]	; 0x74
   120e8:	bl	11018 <__ctype_get_mb_cur_max@plt>
   120ec:	ldr	r2, [sp, #160]	; 0xa0
   120f0:	str	r0, [sp, #64]	; 0x40
   120f4:	cmp	r2, #8
   120f8:	addls	pc, pc, r2, lsl #2
   120fc:	b	12c5c <close_stdout@@Base+0x11d4>
   12100:	b	12124 <close_stdout@@Base+0x69c>
   12104:	b	12974 <close_stdout@@Base+0xeec>
   12108:	b	129a4 <close_stdout@@Base+0xf1c>
   1210c:	b	12854 <close_stdout@@Base+0xdcc>
   12110:	b	12894 <close_stdout@@Base+0xe0c>
   12114:	b	128c0 <close_stdout@@Base+0xe38>
   12118:	b	128e0 <close_stdout@@Base+0xe58>
   1211c:	b	128e0 <close_stdout@@Base+0xe58>
   12120:	b	128e0 <close_stdout@@Base+0xe58>
   12124:	mov	r2, #0
   12128:	str	r2, [sp, #36]	; 0x24
   1212c:	mov	r9, r2
   12130:	str	r2, [sp, #24]
   12134:	str	r2, [sp, #28]
   12138:	str	r2, [sp, #52]	; 0x34
   1213c:	ldr	r0, [sp, #36]	; 0x24
   12140:	mov	fp, #0
   12144:	ldr	r1, [sp, #24]
   12148:	eor	r2, r0, #1
   1214c:	eor	r3, r1, #1
   12150:	and	r3, r2, r3
   12154:	and	r2, r1, r0
   12158:	str	r3, [sp, #44]	; 0x2c
   1215c:	str	r2, [sp, #76]	; 0x4c
   12160:	cmn	r8, #1
   12164:	beq	124e4 <close_stdout@@Base+0xa5c>
   12168:	subs	r3, fp, r8
   1216c:	movne	r3, #1
   12170:	cmp	r3, #0
   12174:	beq	124fc <close_stdout@@Base+0xa74>
   12178:	ldr	r3, [sp, #28]
   1217c:	ldr	r0, [sp, #24]
   12180:	adds	r7, r3, #0
   12184:	movne	r7, #1
   12188:	ands	r6, r7, r0
   1218c:	bne	129e8 <close_stdout@@Base+0xf60>
   12190:	ldr	r1, [sp, #32]
   12194:	add	r5, r1, fp
   12198:	ldrb	r4, [r5]
   1219c:	cmp	r4, #126	; 0x7e
   121a0:	addls	pc, pc, r4, lsl #2
   121a4:	b	12768 <close_stdout@@Base+0xce0>
   121a8:	b	12674 <close_stdout@@Base+0xbec>
   121ac:	b	12768 <close_stdout@@Base+0xce0>
   121b0:	b	12768 <close_stdout@@Base+0xce0>
   121b4:	b	12768 <close_stdout@@Base+0xce0>
   121b8:	b	12768 <close_stdout@@Base+0xce0>
   121bc:	b	12768 <close_stdout@@Base+0xce0>
   121c0:	b	12768 <close_stdout@@Base+0xce0>
   121c4:	b	1265c <close_stdout@@Base+0xbd4>
   121c8:	b	12644 <close_stdout@@Base+0xbbc>
   121cc:	b	1266c <close_stdout@@Base+0xbe4>
   121d0:	b	12664 <close_stdout@@Base+0xbdc>
   121d4:	b	12654 <close_stdout@@Base+0xbcc>
   121d8:	b	1264c <close_stdout@@Base+0xbc4>
   121dc:	b	12610 <close_stdout@@Base+0xb88>
   121e0:	b	12768 <close_stdout@@Base+0xce0>
   121e4:	b	12768 <close_stdout@@Base+0xce0>
   121e8:	b	12768 <close_stdout@@Base+0xce0>
   121ec:	b	12768 <close_stdout@@Base+0xce0>
   121f0:	b	12768 <close_stdout@@Base+0xce0>
   121f4:	b	12768 <close_stdout@@Base+0xce0>
   121f8:	b	12768 <close_stdout@@Base+0xce0>
   121fc:	b	12768 <close_stdout@@Base+0xce0>
   12200:	b	12768 <close_stdout@@Base+0xce0>
   12204:	b	12768 <close_stdout@@Base+0xce0>
   12208:	b	12768 <close_stdout@@Base+0xce0>
   1220c:	b	12768 <close_stdout@@Base+0xce0>
   12210:	b	12768 <close_stdout@@Base+0xce0>
   12214:	b	12768 <close_stdout@@Base+0xce0>
   12218:	b	12768 <close_stdout@@Base+0xce0>
   1221c:	b	12768 <close_stdout@@Base+0xce0>
   12220:	b	12768 <close_stdout@@Base+0xce0>
   12224:	b	12768 <close_stdout@@Base+0xce0>
   12228:	b	1259c <close_stdout@@Base+0xb14>
   1222c:	b	1259c <close_stdout@@Base+0xb14>
   12230:	b	1259c <close_stdout@@Base+0xb14>
   12234:	b	12594 <close_stdout@@Base+0xb0c>
   12238:	b	1259c <close_stdout@@Base+0xb14>
   1223c:	b	12470 <close_stdout@@Base+0x9e8>
   12240:	b	1259c <close_stdout@@Base+0xb14>
   12244:	b	12710 <close_stdout@@Base+0xc88>
   12248:	b	1259c <close_stdout@@Base+0xb14>
   1224c:	b	1259c <close_stdout@@Base+0xb14>
   12250:	b	1259c <close_stdout@@Base+0xb14>
   12254:	b	12470 <close_stdout@@Base+0x9e8>
   12258:	b	12470 <close_stdout@@Base+0x9e8>
   1225c:	b	12470 <close_stdout@@Base+0x9e8>
   12260:	b	12470 <close_stdout@@Base+0x9e8>
   12264:	b	12470 <close_stdout@@Base+0x9e8>
   12268:	b	12470 <close_stdout@@Base+0x9e8>
   1226c:	b	12470 <close_stdout@@Base+0x9e8>
   12270:	b	12470 <close_stdout@@Base+0x9e8>
   12274:	b	12470 <close_stdout@@Base+0x9e8>
   12278:	b	12470 <close_stdout@@Base+0x9e8>
   1227c:	b	12470 <close_stdout@@Base+0x9e8>
   12280:	b	12470 <close_stdout@@Base+0x9e8>
   12284:	b	12470 <close_stdout@@Base+0x9e8>
   12288:	b	12470 <close_stdout@@Base+0x9e8>
   1228c:	b	12470 <close_stdout@@Base+0x9e8>
   12290:	b	12470 <close_stdout@@Base+0x9e8>
   12294:	b	1259c <close_stdout@@Base+0xb14>
   12298:	b	1259c <close_stdout@@Base+0xb14>
   1229c:	b	1259c <close_stdout@@Base+0xb14>
   122a0:	b	1259c <close_stdout@@Base+0xb14>
   122a4:	b	123a4 <close_stdout@@Base+0x91c>
   122a8:	b	12768 <close_stdout@@Base+0xce0>
   122ac:	b	12470 <close_stdout@@Base+0x9e8>
   122b0:	b	12470 <close_stdout@@Base+0x9e8>
   122b4:	b	12470 <close_stdout@@Base+0x9e8>
   122b8:	b	12470 <close_stdout@@Base+0x9e8>
   122bc:	b	12470 <close_stdout@@Base+0x9e8>
   122c0:	b	12470 <close_stdout@@Base+0x9e8>
   122c4:	b	12470 <close_stdout@@Base+0x9e8>
   122c8:	b	12470 <close_stdout@@Base+0x9e8>
   122cc:	b	12470 <close_stdout@@Base+0x9e8>
   122d0:	b	12470 <close_stdout@@Base+0x9e8>
   122d4:	b	12470 <close_stdout@@Base+0x9e8>
   122d8:	b	12470 <close_stdout@@Base+0x9e8>
   122dc:	b	12470 <close_stdout@@Base+0x9e8>
   122e0:	b	12470 <close_stdout@@Base+0x9e8>
   122e4:	b	12470 <close_stdout@@Base+0x9e8>
   122e8:	b	12470 <close_stdout@@Base+0x9e8>
   122ec:	b	12470 <close_stdout@@Base+0x9e8>
   122f0:	b	12470 <close_stdout@@Base+0x9e8>
   122f4:	b	12470 <close_stdout@@Base+0x9e8>
   122f8:	b	12470 <close_stdout@@Base+0x9e8>
   122fc:	b	12470 <close_stdout@@Base+0x9e8>
   12300:	b	12470 <close_stdout@@Base+0x9e8>
   12304:	b	12470 <close_stdout@@Base+0x9e8>
   12308:	b	12470 <close_stdout@@Base+0x9e8>
   1230c:	b	12470 <close_stdout@@Base+0x9e8>
   12310:	b	12470 <close_stdout@@Base+0x9e8>
   12314:	b	1259c <close_stdout@@Base+0xb14>
   12318:	b	126f4 <close_stdout@@Base+0xc6c>
   1231c:	b	12470 <close_stdout@@Base+0x9e8>
   12320:	b	1259c <close_stdout@@Base+0xb14>
   12324:	b	12470 <close_stdout@@Base+0x9e8>
   12328:	b	1259c <close_stdout@@Base+0xb14>
   1232c:	b	12470 <close_stdout@@Base+0x9e8>
   12330:	b	12470 <close_stdout@@Base+0x9e8>
   12334:	b	12470 <close_stdout@@Base+0x9e8>
   12338:	b	12470 <close_stdout@@Base+0x9e8>
   1233c:	b	12470 <close_stdout@@Base+0x9e8>
   12340:	b	12470 <close_stdout@@Base+0x9e8>
   12344:	b	12470 <close_stdout@@Base+0x9e8>
   12348:	b	12470 <close_stdout@@Base+0x9e8>
   1234c:	b	12470 <close_stdout@@Base+0x9e8>
   12350:	b	12470 <close_stdout@@Base+0x9e8>
   12354:	b	12470 <close_stdout@@Base+0x9e8>
   12358:	b	12470 <close_stdout@@Base+0x9e8>
   1235c:	b	12470 <close_stdout@@Base+0x9e8>
   12360:	b	12470 <close_stdout@@Base+0x9e8>
   12364:	b	12470 <close_stdout@@Base+0x9e8>
   12368:	b	12470 <close_stdout@@Base+0x9e8>
   1236c:	b	12470 <close_stdout@@Base+0x9e8>
   12370:	b	12470 <close_stdout@@Base+0x9e8>
   12374:	b	12470 <close_stdout@@Base+0x9e8>
   12378:	b	12470 <close_stdout@@Base+0x9e8>
   1237c:	b	12470 <close_stdout@@Base+0x9e8>
   12380:	b	12470 <close_stdout@@Base+0x9e8>
   12384:	b	12470 <close_stdout@@Base+0x9e8>
   12388:	b	12470 <close_stdout@@Base+0x9e8>
   1238c:	b	12470 <close_stdout@@Base+0x9e8>
   12390:	b	12470 <close_stdout@@Base+0x9e8>
   12394:	b	1257c <close_stdout@@Base+0xaf4>
   12398:	b	1259c <close_stdout@@Base+0xb14>
   1239c:	b	1257c <close_stdout@@Base+0xaf4>
   123a0:	b	12594 <close_stdout@@Base+0xb0c>
   123a4:	ldr	r3, [sp, #160]	; 0xa0
   123a8:	cmp	r3, #2
   123ac:	beq	12c38 <close_stdout@@Base+0x11b0>
   123b0:	cmp	r3, #3
   123b4:	bne	12470 <close_stdout@@Base+0x9e8>
   123b8:	ldr	r1, [sp, #164]	; 0xa4
   123bc:	tst	r1, #4
   123c0:	beq	12470 <close_stdout@@Base+0x9e8>
   123c4:	add	r3, fp, #2
   123c8:	cmp	r8, r3
   123cc:	bls	12470 <close_stdout@@Base+0x9e8>
   123d0:	ldrb	r2, [r5, #1]
   123d4:	mov	r1, #1
   123d8:	cmp	r2, #63	; 0x3f
   123dc:	bne	12470 <close_stdout@@Base+0x9e8>
   123e0:	ldr	r0, [sp, #32]
   123e4:	ldrb	ip, [r0, r3]
   123e8:	sub	r0, ip, #33	; 0x21
   123ec:	uxtb	r0, r0
   123f0:	cmp	r0, #29
   123f4:	bhi	12470 <close_stdout@@Base+0x9e8>
   123f8:	lsl	r1, r1, r0
   123fc:	movw	r0, #20929	; 0x51c1
   12400:	movt	r0, #14336	; 0x3800
   12404:	and	r0, r1, r0
   12408:	cmp	r0, #0
   1240c:	beq	12470 <close_stdout@@Base+0x9e8>
   12410:	ldr	r1, [sp, #36]	; 0x24
   12414:	cmp	r1, #0
   12418:	bne	125b8 <close_stdout@@Base+0xb30>
   1241c:	cmp	r9, sl
   12420:	mov	r4, ip
   12424:	mov	fp, r3
   12428:	ldrcc	r0, [sp, #40]	; 0x28
   1242c:	strbcc	r2, [r0, r9]
   12430:	add	r2, r9, #1
   12434:	cmp	sl, r2
   12438:	ldrhi	r0, [sp, #40]	; 0x28
   1243c:	movhi	r1, #34	; 0x22
   12440:	strbhi	r1, [r0, r2]
   12444:	add	r2, r9, #2
   12448:	cmp	sl, r2
   1244c:	ldrhi	r0, [sp, #40]	; 0x28
   12450:	movhi	r1, #34	; 0x22
   12454:	strbhi	r1, [r0, r2]
   12458:	add	r2, r9, #3
   1245c:	cmp	sl, r2
   12460:	add	r9, r9, #4
   12464:	ldrhi	r0, [sp, #40]	; 0x28
   12468:	movhi	r1, #63	; 0x3f
   1246c:	strbhi	r1, [r0, r2]
   12470:	ldr	r0, [sp, #44]	; 0x2c
   12474:	cmp	r0, #0
   12478:	bne	124a0 <close_stdout@@Base+0xa18>
   1247c:	ldr	r1, [sp, #48]	; 0x30
   12480:	cmp	r1, #0
   12484:	beq	124a0 <close_stdout@@Base+0xa18>
   12488:	ubfx	r2, r4, #5, #8
   1248c:	and	r3, r4, #31
   12490:	ldr	r2, [r1, r2, lsl #2]
   12494:	lsr	r3, r2, r3
   12498:	tst	r3, #1
   1249c:	bne	124a8 <close_stdout@@Base+0xa20>
   124a0:	cmp	r6, #0
   124a4:	beq	124c8 <close_stdout@@Base+0xa40>
   124a8:	ldr	r2, [sp, #36]	; 0x24
   124ac:	cmp	r2, #0
   124b0:	bne	125b8 <close_stdout@@Base+0xb30>
   124b4:	cmp	r9, sl
   124b8:	ldrcc	r0, [sp, #40]	; 0x28
   124bc:	movcc	r3, #92	; 0x5c
   124c0:	strbcc	r3, [r0, r9]
   124c4:	add	r9, r9, #1
   124c8:	add	fp, fp, #1
   124cc:	cmp	r9, sl
   124d0:	ldrcc	r1, [sp, #40]	; 0x28
   124d4:	strbcc	r4, [r1, r9]
   124d8:	cmn	r8, #1
   124dc:	add	r9, r9, #1
   124e0:	bne	12168 <close_stdout@@Base+0x6e0>
   124e4:	ldr	r2, [sp, #32]
   124e8:	ldrb	r3, [r2, fp]
   124ec:	adds	r3, r3, #0
   124f0:	movne	r3, #1
   124f4:	cmp	r3, #0
   124f8:	bne	12178 <close_stdout@@Base+0x6f0>
   124fc:	ldr	r3, [sp, #160]	; 0xa0
   12500:	cmp	r9, #0
   12504:	cmpeq	r3, #2
   12508:	bne	12518 <close_stdout@@Base+0xa90>
   1250c:	ldr	r0, [sp, #36]	; 0x24
   12510:	cmp	r0, #0
   12514:	bne	125b8 <close_stdout@@Base+0xb30>
   12518:	ldr	r1, [sp, #36]	; 0x24
   1251c:	ldr	r2, [sp, #52]	; 0x34
   12520:	eor	r3, r1, #1
   12524:	cmp	r2, #0
   12528:	moveq	r3, #0
   1252c:	andne	r3, r3, #1
   12530:	cmp	r3, #0
   12534:	beq	12560 <close_stdout@@Base+0xad8>
   12538:	ldrb	r3, [r2]
   1253c:	cmp	r3, #0
   12540:	beq	12560 <close_stdout@@Base+0xad8>
   12544:	ldr	r1, [sp, #40]	; 0x28
   12548:	cmp	sl, r9
   1254c:	strbhi	r3, [r1, r9]
   12550:	ldrb	r3, [r2, #1]!
   12554:	add	r9, r9, #1
   12558:	cmp	r3, #0
   1255c:	bne	12548 <close_stdout@@Base+0xac0>
   12560:	cmp	r9, sl
   12564:	movcs	r0, r9
   12568:	ldrcc	r1, [sp, #40]	; 0x28
   1256c:	movcc	r3, #0
   12570:	movcc	r0, r9
   12574:	strbcc	r3, [r1, r9]
   12578:	b	125f4 <close_stdout@@Base+0xb6c>
   1257c:	cmn	r8, #1
   12580:	beq	12c48 <close_stdout@@Base+0x11c0>
   12584:	subs	r3, r8, #1
   12588:	movne	r3, #1
   1258c:	cmp	r3, #0
   12590:	bne	12470 <close_stdout@@Base+0x9e8>
   12594:	cmp	fp, #0
   12598:	bne	12470 <close_stdout@@Base+0x9e8>
   1259c:	ldr	r3, [sp, #36]	; 0x24
   125a0:	ldr	r0, [sp, #160]	; 0xa0
   125a4:	cmp	r0, #2
   125a8:	movne	r3, #0
   125ac:	andeq	r3, r3, #1
   125b0:	cmp	r3, #0
   125b4:	beq	12470 <close_stdout@@Base+0x9e8>
   125b8:	ldr	r2, [sp, #164]	; 0xa4
   125bc:	mov	ip, #0
   125c0:	ldr	r0, [sp, #160]	; 0xa0
   125c4:	bic	r3, r2, #2
   125c8:	ldr	r1, [sp, #72]	; 0x48
   125cc:	ldr	r2, [sp, #68]	; 0x44
   125d0:	stm	sp, {r0, r3}
   125d4:	mov	r3, r8
   125d8:	str	r1, [sp, #12]
   125dc:	mov	r1, sl
   125e0:	str	r2, [sp, #16]
   125e4:	ldr	r0, [sp, #40]	; 0x28
   125e8:	ldr	r2, [sp, #32]
   125ec:	str	ip, [sp, #8]
   125f0:	bl	12088 <close_stdout@@Base+0x600>
   125f4:	ldr	r1, [sp, #56]	; 0x38
   125f8:	ldr	r2, [sp, #116]	; 0x74
   125fc:	ldr	r3, [r1]
   12600:	cmp	r2, r3
   12604:	bne	12d38 <close_stdout@@Base+0x12b0>
   12608:	add	sp, sp, #124	; 0x7c
   1260c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12610:	mov	r3, #114	; 0x72
   12614:	ldr	r2, [sp, #36]	; 0x24
   12618:	ldr	r0, [sp, #160]	; 0xa0
   1261c:	cmp	r0, #2
   12620:	movne	r2, #0
   12624:	andeq	r2, r2, #1
   12628:	cmp	r2, #0
   1262c:	bne	125b8 <close_stdout@@Base+0xb30>
   12630:	ldr	r1, [sp, #24]
   12634:	cmp	r1, #0
   12638:	beq	12470 <close_stdout@@Base+0x9e8>
   1263c:	mov	r4, r3
   12640:	b	124a8 <close_stdout@@Base+0xa20>
   12644:	mov	r3, #98	; 0x62
   12648:	b	12630 <close_stdout@@Base+0xba8>
   1264c:	mov	r3, #102	; 0x66
   12650:	b	12630 <close_stdout@@Base+0xba8>
   12654:	mov	r3, #118	; 0x76
   12658:	b	12630 <close_stdout@@Base+0xba8>
   1265c:	mov	r3, #97	; 0x61
   12660:	b	12630 <close_stdout@@Base+0xba8>
   12664:	mov	r3, #110	; 0x6e
   12668:	b	12614 <close_stdout@@Base+0xb8c>
   1266c:	mov	r3, #116	; 0x74
   12670:	b	12614 <close_stdout@@Base+0xb8c>
   12674:	ldr	r2, [sp, #24]
   12678:	cmp	r2, #0
   1267c:	beq	12c24 <close_stdout@@Base+0x119c>
   12680:	ldr	r3, [sp, #36]	; 0x24
   12684:	cmp	r3, #0
   12688:	bne	125b8 <close_stdout@@Base+0xb30>
   1268c:	cmp	r9, sl
   12690:	add	r2, r9, #1
   12694:	ldrcc	r0, [sp, #40]	; 0x28
   12698:	movcc	r3, #92	; 0x5c
   1269c:	strbcc	r3, [r0, r9]
   126a0:	add	r3, fp, #1
   126a4:	cmp	r8, r3
   126a8:	bls	126e8 <close_stdout@@Base+0xc60>
   126ac:	ldr	r1, [sp, #32]
   126b0:	ldrb	r3, [r1, r3]
   126b4:	sub	r3, r3, #48	; 0x30
   126b8:	cmp	r3, #9
   126bc:	bhi	126e8 <close_stdout@@Base+0xc60>
   126c0:	cmp	sl, r2
   126c4:	ldrhi	r0, [sp, #40]	; 0x28
   126c8:	movhi	r3, #48	; 0x30
   126cc:	strbhi	r3, [r0, r2]
   126d0:	add	r3, r9, #2
   126d4:	cmp	sl, r3
   126d8:	ldrhi	r1, [sp, #40]	; 0x28
   126dc:	movhi	r2, #48	; 0x30
   126e0:	strbhi	r2, [r1, r3]
   126e4:	add	r2, r9, #3
   126e8:	mov	r9, r2
   126ec:	mov	r4, #48	; 0x30
   126f0:	b	1247c <close_stdout@@Base+0x9f4>
   126f4:	ldr	r1, [sp, #76]	; 0x4c
   126f8:	cmp	r1, #0
   126fc:	beq	12708 <close_stdout@@Base+0xc80>
   12700:	cmp	r7, #0
   12704:	bne	124c8 <close_stdout@@Base+0xa40>
   12708:	mov	r3, r4
   1270c:	b	12614 <close_stdout@@Base+0xb8c>
   12710:	ldr	r1, [sp, #160]	; 0xa0
   12714:	cmp	r1, #2
   12718:	bne	12470 <close_stdout@@Base+0x9e8>
   1271c:	ldr	r2, [sp, #36]	; 0x24
   12720:	cmp	r2, #0
   12724:	bne	125b8 <close_stdout@@Base+0xb30>
   12728:	cmp	r9, sl
   1272c:	ldrcc	r0, [sp, #40]	; 0x28
   12730:	movcc	r3, #39	; 0x27
   12734:	strbcc	r3, [r0, r9]
   12738:	add	r3, r9, #1
   1273c:	cmp	sl, r3
   12740:	ldrhi	r1, [sp, #40]	; 0x28
   12744:	movhi	r2, #92	; 0x5c
   12748:	strbhi	r2, [r1, r3]
   1274c:	add	r3, r9, #2
   12750:	cmp	sl, r3
   12754:	add	r9, r9, #3
   12758:	ldrhi	r0, [sp, #40]	; 0x28
   1275c:	movhi	r2, #39	; 0x27
   12760:	strbhi	r2, [r0, r3]
   12764:	b	12470 <close_stdout@@Base+0x9e8>
   12768:	ldr	r1, [sp, #64]	; 0x40
   1276c:	cmp	r1, #1
   12770:	bne	12a68 <close_stdout@@Base+0xfe0>
   12774:	bl	110a8 <__ctype_b_loc@plt>
   12778:	ldr	r2, [sp, #64]	; 0x40
   1277c:	sxth	r3, r4
   12780:	str	r2, [sp, #60]	; 0x3c
   12784:	lsl	r3, r3, #1
   12788:	ldr	r2, [r0]
   1278c:	ldrh	r2, [r2, r3]
   12790:	eor	r2, r2, #16384	; 0x4000
   12794:	ubfx	r2, r2, #14, #1
   12798:	ldr	r1, [sp, #24]
   1279c:	ands	r2, r2, r1
   127a0:	beq	12470 <close_stdout@@Base+0x9e8>
   127a4:	ldr	r3, [sp, #60]	; 0x3c
   127a8:	mov	r0, #92	; 0x5c
   127ac:	ldr	r7, [sp, #36]	; 0x24
   127b0:	add	r1, r3, fp
   127b4:	str	r8, [sp, #60]	; 0x3c
   127b8:	ldr	r3, [sp, #40]	; 0x28
   127bc:	b	12820 <close_stdout@@Base+0xd98>
   127c0:	cmp	r7, #0
   127c4:	bne	12c60 <close_stdout@@Base+0x11d8>
   127c8:	add	ip, r9, #1
   127cc:	cmp	r9, sl
   127d0:	strbcc	r0, [r3, r9]
   127d4:	cmp	sl, ip
   127d8:	lsrhi	r8, r4, #6
   127dc:	addhi	r8, r8, #48	; 0x30
   127e0:	strbhi	r8, [r3, ip]
   127e4:	add	ip, r9, #2
   127e8:	add	r9, r9, #3
   127ec:	cmp	sl, ip
   127f0:	ubfxhi	r8, r4, #3, #3
   127f4:	and	r4, r4, #7
   127f8:	add	r4, r4, #48	; 0x30
   127fc:	addhi	r8, r8, #48	; 0x30
   12800:	strbhi	r8, [r3, ip]
   12804:	add	fp, fp, #1
   12808:	cmp	r1, fp
   1280c:	bls	1284c <close_stdout@@Base+0xdc4>
   12810:	cmp	r9, sl
   12814:	strbcc	r4, [r3, r9]
   12818:	ldrb	r4, [r5, #1]!
   1281c:	add	r9, r9, #1
   12820:	cmp	r2, #0
   12824:	bne	127c0 <close_stdout@@Base+0xd38>
   12828:	cmp	r6, #0
   1282c:	beq	12804 <close_stdout@@Base+0xd7c>
   12830:	add	fp, fp, #1
   12834:	cmp	r9, sl
   12838:	strbcc	r0, [r3, r9]
   1283c:	cmp	r1, fp
   12840:	add	r9, r9, #1
   12844:	mov	r6, #0
   12848:	bhi	12810 <close_stdout@@Base+0xd88>
   1284c:	ldr	r8, [sp, #60]	; 0x3c
   12850:	b	124cc <close_stdout@@Base+0xa44>
   12854:	ldr	r3, [sp, #36]	; 0x24
   12858:	cmp	r3, #0
   1285c:	bne	12d60 <close_stdout@@Base+0x12d8>
   12860:	cmp	sl, #0
   12864:	beq	12c78 <close_stdout@@Base+0x11f0>
   12868:	ldr	r1, [sp, #40]	; 0x28
   1286c:	mov	r0, #1
   12870:	ldr	r2, [pc, #1296]	; 12d88 <close_stdout@@Base+0x1300>
   12874:	mov	r3, #34	; 0x22
   12878:	str	r0, [sp, #24]
   1287c:	mov	r9, r0
   12880:	add	r2, pc, r2
   12884:	str	r0, [sp, #28]
   12888:	strb	r3, [r1]
   1288c:	str	r2, [sp, #52]	; 0x34
   12890:	b	1213c <close_stdout@@Base+0x6b4>
   12894:	ldr	r3, [pc, #1264]	; 12d8c <close_stdout@@Base+0x1304>
   12898:	mov	r2, #1
   1289c:	mov	r0, #3
   128a0:	str	r2, [sp, #36]	; 0x24
   128a4:	add	r3, pc, r3
   128a8:	str	r2, [sp, #24]
   128ac:	str	r3, [sp, #52]	; 0x34
   128b0:	mov	r9, #0
   128b4:	str	r2, [sp, #28]
   128b8:	str	r0, [sp, #160]	; 0xa0
   128bc:	b	1213c <close_stdout@@Base+0x6b4>
   128c0:	mov	r0, #0
   128c4:	mov	r1, #1
   128c8:	str	r0, [sp, #36]	; 0x24
   128cc:	mov	r9, r0
   128d0:	str	r1, [sp, #24]
   128d4:	str	r0, [sp, #28]
   128d8:	str	r0, [sp, #52]	; 0x34
   128dc:	b	1213c <close_stdout@@Base+0x6b4>
   128e0:	ldr	r3, [sp, #160]	; 0xa0
   128e4:	cmp	r3, #8
   128e8:	beq	12914 <close_stdout@@Base+0xe8c>
   128ec:	ldr	r0, [pc, #1180]	; 12d90 <close_stdout@@Base+0x1308>
   128f0:	mov	r1, r3
   128f4:	add	r0, pc, r0
   128f8:	bl	11f24 <close_stdout@@Base+0x49c>
   128fc:	ldr	r1, [sp, #160]	; 0xa0
   12900:	str	r0, [sp, #72]	; 0x48
   12904:	ldr	r0, [pc, #1160]	; 12d94 <close_stdout@@Base+0x130c>
   12908:	add	r0, pc, r0
   1290c:	bl	11f24 <close_stdout@@Base+0x49c>
   12910:	str	r0, [sp, #68]	; 0x44
   12914:	ldr	r0, [sp, #36]	; 0x24
   12918:	cmp	r0, #0
   1291c:	movne	r9, #0
   12920:	bne	12958 <close_stdout@@Base+0xed0>
   12924:	ldr	r1, [sp, #72]	; 0x48
   12928:	ldrb	r3, [r1]
   1292c:	cmp	r3, #0
   12930:	beq	12d30 <close_stdout@@Base+0x12a8>
   12934:	mov	r2, r1
   12938:	ldr	r1, [sp, #40]	; 0x28
   1293c:	mov	r9, r0
   12940:	cmp	r9, sl
   12944:	strbcc	r3, [r1, r9]
   12948:	ldrb	r3, [r2, #1]!
   1294c:	add	r9, r9, #1
   12950:	cmp	r3, #0
   12954:	bne	12940 <close_stdout@@Base+0xeb8>
   12958:	ldr	r0, [sp, #68]	; 0x44
   1295c:	str	r0, [sp, #52]	; 0x34
   12960:	bl	110c0 <strlen@plt>
   12964:	mov	r2, #1
   12968:	str	r2, [sp, #24]
   1296c:	str	r0, [sp, #28]
   12970:	b	1213c <close_stdout@@Base+0x6b4>
   12974:	ldr	r3, [pc, #1052]	; 12d98 <close_stdout@@Base+0x1310>
   12978:	mov	r2, #0
   1297c:	mov	r1, #1
   12980:	mov	r0, #2
   12984:	add	r3, pc, r3
   12988:	str	r1, [sp, #36]	; 0x24
   1298c:	str	r2, [sp, #24]
   12990:	mov	r9, r2
   12994:	str	r1, [sp, #28]
   12998:	str	r3, [sp, #52]	; 0x34
   1299c:	str	r0, [sp, #160]	; 0xa0
   129a0:	b	1213c <close_stdout@@Base+0x6b4>
   129a4:	ldr	r3, [sp, #36]	; 0x24
   129a8:	cmp	r3, #0
   129ac:	bne	12d3c <close_stdout@@Base+0x12b4>
   129b0:	cmp	sl, #0
   129b4:	beq	12c98 <close_stdout@@Base+0x1210>
   129b8:	ldr	r1, [sp, #40]	; 0x28
   129bc:	mov	r3, #39	; 0x27
   129c0:	ldr	r2, [sp, #36]	; 0x24
   129c4:	mov	r0, #1
   129c8:	mov	r9, r0
   129cc:	str	r0, [sp, #28]
   129d0:	strb	r3, [r1]
   129d4:	ldr	r3, [pc, #960]	; 12d9c <close_stdout@@Base+0x1314>
   129d8:	str	r2, [sp, #24]
   129dc:	add	r3, pc, r3
   129e0:	str	r3, [sp, #52]	; 0x34
   129e4:	b	1213c <close_stdout@@Base+0x6b4>
   129e8:	ldr	r2, [sp, #28]
   129ec:	cmp	r2, #1
   129f0:	add	r4, fp, r2
   129f4:	movls	r3, #0
   129f8:	movhi	r3, #1
   129fc:	cmn	r8, #1
   12a00:	movne	r3, #0
   12a04:	cmp	r3, #0
   12a08:	beq	12a18 <close_stdout@@Base+0xf90>
   12a0c:	ldr	r0, [sp, #32]
   12a10:	bl	110c0 <strlen@plt>
   12a14:	mov	r8, r0
   12a18:	cmp	r8, r4
   12a1c:	ldrcc	r3, [sp, #32]
   12a20:	movcc	r6, #0
   12a24:	addcc	r5, r3, fp
   12a28:	bcc	12198 <close_stdout@@Base+0x710>
   12a2c:	ldr	r0, [sp, #32]
   12a30:	ldr	r1, [sp, #52]	; 0x34
   12a34:	add	r5, r0, fp
   12a38:	ldr	r2, [sp, #28]
   12a3c:	mov	r0, r5
   12a40:	bl	10fb8 <memcmp@plt>
   12a44:	cmp	r0, #0
   12a48:	bne	12a60 <close_stdout@@Base+0xfd8>
   12a4c:	ldr	r1, [sp, #36]	; 0x24
   12a50:	cmp	r1, #0
   12a54:	bne	125b8 <close_stdout@@Base+0xb30>
   12a58:	mov	r6, #1
   12a5c:	b	12198 <close_stdout@@Base+0x710>
   12a60:	mov	r6, #0
   12a64:	b	12198 <close_stdout@@Base+0x710>
   12a68:	add	r7, sp, #108	; 0x6c
   12a6c:	cmn	r8, #1
   12a70:	mov	r3, #0
   12a74:	str	r3, [sp, #108]	; 0x6c
   12a78:	str	r3, [r7, #4]
   12a7c:	beq	12c68 <close_stdout@@Base+0x11e0>
   12a80:	mov	r1, #0
   12a84:	ldr	r0, [sp, #32]
   12a88:	mov	ip, #1
   12a8c:	str	r9, [sp, #88]	; 0x58
   12a90:	str	r6, [sp, #96]	; 0x60
   12a94:	mov	r9, r1
   12a98:	str	r5, [sp, #100]	; 0x64
   12a9c:	mov	r6, ip
   12aa0:	mov	r5, r7
   12aa4:	add	r3, sp, #104	; 0x68
   12aa8:	sub	r0, r0, #1
   12aac:	str	r3, [sp, #80]	; 0x50
   12ab0:	str	r0, [sp, #84]	; 0x54
   12ab4:	str	r1, [sp, #60]	; 0x3c
   12ab8:	str	r4, [sp, #92]	; 0x5c
   12abc:	ldr	r2, [sp, #32]
   12ac0:	add	r7, r9, fp
   12ac4:	add	r0, sp, #104	; 0x68
   12ac8:	mov	r3, r5
   12acc:	add	r4, r2, r7
   12ad0:	rsb	r2, r7, r8
   12ad4:	mov	r1, r4
   12ad8:	bl	1103c <mbrtowc@plt>
   12adc:	subs	r2, r0, #0
   12ae0:	beq	12bec <close_stdout@@Base+0x1164>
   12ae4:	cmn	r2, #1
   12ae8:	beq	12d14 <close_stdout@@Base+0x128c>
   12aec:	cmn	r2, #2
   12af0:	beq	12cb8 <close_stdout@@Base+0x1230>
   12af4:	ldr	r3, [sp, #36]	; 0x24
   12af8:	ldr	r0, [sp, #160]	; 0xa0
   12afc:	cmp	r0, #2
   12b00:	movne	r3, #0
   12b04:	andeq	r3, r3, #1
   12b08:	cmp	r3, #0
   12b0c:	beq	12bc8 <close_stdout@@Base+0x1140>
   12b10:	cmp	r2, #1
   12b14:	beq	12bc8 <close_stdout@@Base+0x1140>
   12b18:	ldr	r1, [sp, #84]	; 0x54
   12b1c:	add	r3, r1, r2
   12b20:	add	r7, r3, r7
   12b24:	ldrb	r3, [r4, #1]!
   12b28:	sub	r3, r3, #91	; 0x5b
   12b2c:	cmp	r3, #33	; 0x21
   12b30:	addls	pc, pc, r3, lsl #2
   12b34:	b	12bc0 <close_stdout@@Base+0x1138>
   12b38:	b	125b8 <close_stdout@@Base+0xb30>
   12b3c:	b	125b8 <close_stdout@@Base+0xb30>
   12b40:	b	12bc0 <close_stdout@@Base+0x1138>
   12b44:	b	125b8 <close_stdout@@Base+0xb30>
   12b48:	b	12bc0 <close_stdout@@Base+0x1138>
   12b4c:	b	125b8 <close_stdout@@Base+0xb30>
   12b50:	b	12bc0 <close_stdout@@Base+0x1138>
   12b54:	b	12bc0 <close_stdout@@Base+0x1138>
   12b58:	b	12bc0 <close_stdout@@Base+0x1138>
   12b5c:	b	12bc0 <close_stdout@@Base+0x1138>
   12b60:	b	12bc0 <close_stdout@@Base+0x1138>
   12b64:	b	12bc0 <close_stdout@@Base+0x1138>
   12b68:	b	12bc0 <close_stdout@@Base+0x1138>
   12b6c:	b	12bc0 <close_stdout@@Base+0x1138>
   12b70:	b	12bc0 <close_stdout@@Base+0x1138>
   12b74:	b	12bc0 <close_stdout@@Base+0x1138>
   12b78:	b	12bc0 <close_stdout@@Base+0x1138>
   12b7c:	b	12bc0 <close_stdout@@Base+0x1138>
   12b80:	b	12bc0 <close_stdout@@Base+0x1138>
   12b84:	b	12bc0 <close_stdout@@Base+0x1138>
   12b88:	b	12bc0 <close_stdout@@Base+0x1138>
   12b8c:	b	12bc0 <close_stdout@@Base+0x1138>
   12b90:	b	12bc0 <close_stdout@@Base+0x1138>
   12b94:	b	12bc0 <close_stdout@@Base+0x1138>
   12b98:	b	12bc0 <close_stdout@@Base+0x1138>
   12b9c:	b	12bc0 <close_stdout@@Base+0x1138>
   12ba0:	b	12bc0 <close_stdout@@Base+0x1138>
   12ba4:	b	12bc0 <close_stdout@@Base+0x1138>
   12ba8:	b	12bc0 <close_stdout@@Base+0x1138>
   12bac:	b	12bc0 <close_stdout@@Base+0x1138>
   12bb0:	b	12bc0 <close_stdout@@Base+0x1138>
   12bb4:	b	12bc0 <close_stdout@@Base+0x1138>
   12bb8:	b	12bc0 <close_stdout@@Base+0x1138>
   12bbc:	b	125b8 <close_stdout@@Base+0xb30>
   12bc0:	cmp	r4, r7
   12bc4:	bne	12b24 <close_stdout@@Base+0x109c>
   12bc8:	ldr	r0, [sp, #104]	; 0x68
   12bcc:	add	r9, r9, r2
   12bd0:	bl	10ff4 <iswprint@plt>
   12bd4:	cmp	r0, #0
   12bd8:	mov	r0, r5
   12bdc:	moveq	r6, #0
   12be0:	bl	10fac <mbsinit@plt>
   12be4:	cmp	r0, #0
   12be8:	beq	12abc <close_stdout@@Base+0x1034>
   12bec:	mov	ip, r6
   12bf0:	eor	r2, ip, #1
   12bf4:	str	r9, [sp, #60]	; 0x3c
   12bf8:	ldr	r4, [sp, #92]	; 0x5c
   12bfc:	uxtb	r2, r2
   12c00:	ldr	r9, [sp, #88]	; 0x58
   12c04:	ldr	r6, [sp, #96]	; 0x60
   12c08:	ldr	r5, [sp, #100]	; 0x64
   12c0c:	ldr	r3, [sp, #60]	; 0x3c
   12c10:	cmp	r3, #1
   12c14:	bls	12798 <close_stdout@@Base+0xd10>
   12c18:	ldr	r0, [sp, #24]
   12c1c:	and	r2, r2, r0
   12c20:	b	127a4 <close_stdout@@Base+0xd1c>
   12c24:	ldr	r2, [sp, #164]	; 0xa4
   12c28:	tst	r2, #1
   12c2c:	addne	fp, fp, #1
   12c30:	bne	12160 <close_stdout@@Base+0x6d8>
   12c34:	b	12470 <close_stdout@@Base+0x9e8>
   12c38:	ldr	r0, [sp, #36]	; 0x24
   12c3c:	cmp	r0, #0
   12c40:	beq	12470 <close_stdout@@Base+0x9e8>
   12c44:	b	125b8 <close_stdout@@Base+0xb30>
   12c48:	ldr	r2, [sp, #32]
   12c4c:	ldrb	r3, [r2, #1]
   12c50:	adds	r3, r3, #0
   12c54:	movne	r3, #1
   12c58:	b	1258c <close_stdout@@Base+0xb04>
   12c5c:	bl	111b0 <abort@plt>
   12c60:	ldr	r8, [sp, #60]	; 0x3c
   12c64:	b	125b8 <close_stdout@@Base+0xb30>
   12c68:	ldr	r0, [sp, #32]
   12c6c:	bl	110c0 <strlen@plt>
   12c70:	mov	r8, r0
   12c74:	b	12a80 <close_stdout@@Base+0xff8>
   12c78:	ldr	r2, [pc, #288]	; 12da0 <close_stdout@@Base+0x1318>
   12c7c:	mov	r1, #1
   12c80:	mov	r9, r1
   12c84:	str	r1, [sp, #24]
   12c88:	add	r2, pc, r2
   12c8c:	str	r1, [sp, #28]
   12c90:	str	r2, [sp, #52]	; 0x34
   12c94:	b	1213c <close_stdout@@Base+0x6b4>
   12c98:	ldr	r2, [pc, #260]	; 12da4 <close_stdout@@Base+0x131c>
   12c9c:	mov	r3, #1
   12ca0:	mov	r9, r3
   12ca4:	str	r3, [sp, #28]
   12ca8:	add	r2, pc, r2
   12cac:	str	sl, [sp, #24]
   12cb0:	str	r2, [sp, #52]	; 0x34
   12cb4:	b	1213c <close_stdout@@Base+0x6b4>
   12cb8:	cmp	r8, r7
   12cbc:	str	r9, [sp, #60]	; 0x3c
   12cc0:	mov	ip, r4
   12cc4:	ldr	r6, [sp, #96]	; 0x60
   12cc8:	ldr	r9, [sp, #88]	; 0x58
   12ccc:	ldr	r4, [sp, #92]	; 0x5c
   12cd0:	ldr	r5, [sp, #100]	; 0x64
   12cd4:	bls	12d0c <close_stdout@@Base+0x1284>
   12cd8:	ldrb	r3, [ip]
   12cdc:	cmp	r3, #0
   12ce0:	beq	12d0c <close_stdout@@Base+0x1284>
   12ce4:	ldr	r3, [sp, #60]	; 0x3c
   12ce8:	b	12cf8 <close_stdout@@Base+0x1270>
   12cec:	ldrb	r2, [r5, r3]
   12cf0:	cmp	r2, #0
   12cf4:	beq	12d08 <close_stdout@@Base+0x1280>
   12cf8:	add	r3, r3, #1
   12cfc:	add	r2, fp, r3
   12d00:	cmp	r8, r2
   12d04:	bhi	12cec <close_stdout@@Base+0x1264>
   12d08:	str	r3, [sp, #60]	; 0x3c
   12d0c:	mov	r2, #1
   12d10:	b	12c0c <close_stdout@@Base+0x1184>
   12d14:	str	r9, [sp, #60]	; 0x3c
   12d18:	mov	r2, #1
   12d1c:	ldr	r4, [sp, #92]	; 0x5c
   12d20:	ldr	r6, [sp, #96]	; 0x60
   12d24:	ldr	r9, [sp, #88]	; 0x58
   12d28:	ldr	r5, [sp, #100]	; 0x64
   12d2c:	b	12c0c <close_stdout@@Base+0x1184>
   12d30:	ldr	r9, [sp, #36]	; 0x24
   12d34:	b	12958 <close_stdout@@Base+0xed0>
   12d38:	bl	10fd0 <__stack_chk_fail@plt>
   12d3c:	ldr	r1, [pc, #100]	; 12da8 <close_stdout@@Base+0x1320>
   12d40:	mov	r3, #0
   12d44:	mov	r0, #1
   12d48:	str	r3, [sp, #24]
   12d4c:	add	r1, pc, r1
   12d50:	str	r0, [sp, #28]
   12d54:	mov	r9, r3
   12d58:	str	r1, [sp, #52]	; 0x34
   12d5c:	b	1213c <close_stdout@@Base+0x6b4>
   12d60:	ldr	r0, [pc, #68]	; 12dac <close_stdout@@Base+0x1324>
   12d64:	mov	r3, #1
   12d68:	mov	r9, #0
   12d6c:	str	r3, [sp, #24]
   12d70:	add	r0, pc, r0
   12d74:	str	r3, [sp, #28]
   12d78:	str	r0, [sp, #52]	; 0x34
   12d7c:	b	1213c <close_stdout@@Base+0x6b4>
   12d80:	andeq	r3, r1, r4, asr pc
   12d84:	andeq	r0, r0, ip, ror #1
   12d88:	andeq	r2, r0, ip, lsl pc
   12d8c:	strdeq	r2, [r0], -r8
   12d90:			; <UNDEFINED> instruction: 0x00002eb4
   12d94:	muleq	r0, r0, lr
   12d98:	andeq	r2, r0, r4, lsl lr
   12d9c:			; <UNDEFINED> instruction: 0x00002dbc
   12da0:	andeq	r2, r0, r4, lsl fp
   12da4:	strdeq	r2, [r0], -r0
   12da8:	andeq	r2, r0, ip, asr #20
   12dac:	andeq	r2, r0, ip, lsr #20
   12db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12db4:	sub	sp, sp, #44	; 0x2c
   12db8:	mov	r6, r0
   12dbc:	mov	r9, r1
   12dc0:	mov	sl, r2
   12dc4:	mov	r4, r3
   12dc8:	bl	110d8 <__errno_location@plt>
   12dcc:	ldr	fp, [pc, #412]	; 12f70 <close_stdout@@Base+0x14e8>
   12dd0:	cmp	r6, #0
   12dd4:	add	fp, pc, fp
   12dd8:	ldr	r5, [fp]
   12ddc:	ldr	r1, [r0]
   12de0:	mov	r8, r0
   12de4:	str	r1, [sp, #36]	; 0x24
   12de8:	blt	12f68 <close_stdout@@Base+0x14e0>
   12dec:	ldr	r3, [pc, #384]	; 12f74 <close_stdout@@Base+0x14ec>
   12df0:	add	r3, pc, r3
   12df4:	ldr	r3, [r3]
   12df8:	cmp	r6, r3
   12dfc:	bcc	12e50 <close_stdout@@Base+0x13c8>
   12e00:	add	r7, r6, #1
   12e04:	cmn	r7, #-536870911	; 0xe0000001
   12e08:	bhi	12f6c <close_stdout@@Base+0x14e4>
   12e0c:	add	r3, fp, #4
   12e10:	cmp	r5, r3
   12e14:	beq	12f40 <close_stdout@@Base+0x14b8>
   12e18:	mov	r0, r5
   12e1c:	lsl	r1, r7, #3
   12e20:	bl	13c48 <close_stdout@@Base+0x21c0>
   12e24:	mov	r5, r0
   12e28:	str	r0, [fp]
   12e2c:	ldr	fp, [pc, #324]	; 12f78 <close_stdout@@Base+0x14f0>
   12e30:	mov	r1, #0
   12e34:	add	fp, pc, fp
   12e38:	ldr	r0, [fp]
   12e3c:	rsb	r2, r0, r7
   12e40:	add	r0, r5, r0, lsl #3
   12e44:	lsl	r2, r2, #3
   12e48:	bl	110fc <memset@plt>
   12e4c:	str	r7, [fp]
   12e50:	add	r2, r4, #8
   12e54:	str	r2, [sp, #32]
   12e58:	ldr	r1, [r4]
   12e5c:	add	fp, r5, r6, lsl #3
   12e60:	ldr	lr, [sp, #32]
   12e64:	mov	r2, r9
   12e68:	ldr	r3, [r4, #4]
   12e6c:	ldr	ip, [r5, r6, lsl #3]
   12e70:	ldr	r7, [fp, #4]
   12e74:	orr	r3, r3, #1
   12e78:	str	r1, [sp]
   12e7c:	str	r3, [sp, #4]
   12e80:	mov	r1, ip
   12e84:	str	lr, [sp, #8]
   12e88:	mov	r0, r7
   12e8c:	ldr	lr, [r4, #40]	; 0x28
   12e90:	str	r3, [sp, #28]
   12e94:	mov	r3, sl
   12e98:	str	lr, [sp, #12]
   12e9c:	ldr	lr, [r4, #44]	; 0x2c
   12ea0:	str	ip, [sp, #24]
   12ea4:	str	lr, [sp, #16]
   12ea8:	bl	12088 <close_stdout@@Base+0x600>
   12eac:	ldr	ip, [sp, #24]
   12eb0:	cmp	ip, r0
   12eb4:	bhi	12f2c <close_stdout@@Base+0x14a4>
   12eb8:	ldr	r3, [pc, #188]	; 12f7c <close_stdout@@Base+0x14f4>
   12ebc:	add	r1, r0, #1
   12ec0:	str	r1, [r5, r6, lsl #3]
   12ec4:	add	r3, pc, r3
   12ec8:	cmp	r7, r3
   12ecc:	beq	12ee0 <close_stdout@@Base+0x1458>
   12ed0:	mov	r0, r7
   12ed4:	str	r1, [sp, #24]
   12ed8:	bl	10f88 <free@plt>
   12edc:	ldr	r1, [sp, #24]
   12ee0:	mov	r0, r1
   12ee4:	str	r1, [sp, #24]
   12ee8:	bl	13bf0 <close_stdout@@Base+0x2168>
   12eec:	ldr	r3, [sp, #28]
   12ef0:	ldr	lr, [sp, #32]
   12ef4:	mov	r2, r9
   12ef8:	str	r0, [fp, #4]
   12efc:	mov	r7, r0
   12f00:	ldr	ip, [r4]
   12f04:	str	r3, [sp, #4]
   12f08:	mov	r3, sl
   12f0c:	str	lr, [sp, #8]
   12f10:	str	ip, [sp]
   12f14:	ldr	ip, [r4, #40]	; 0x28
   12f18:	ldr	r1, [sp, #24]
   12f1c:	str	ip, [sp, #12]
   12f20:	ldr	ip, [r4, #44]	; 0x2c
   12f24:	str	ip, [sp, #16]
   12f28:	bl	12088 <close_stdout@@Base+0x600>
   12f2c:	ldr	r1, [sp, #36]	; 0x24
   12f30:	mov	r0, r7
   12f34:	str	r1, [r8]
   12f38:	add	sp, sp, #44	; 0x2c
   12f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f40:	lsl	r1, r7, #3
   12f44:	mov	r0, #0
   12f48:	str	r3, [sp, #24]
   12f4c:	bl	13c48 <close_stdout@@Base+0x21c0>
   12f50:	ldr	r3, [sp, #24]
   12f54:	mov	r5, r0
   12f58:	ldm	r3, {r0, r1}
   12f5c:	str	r5, [fp]
   12f60:	stm	r5, {r0, r1}
   12f64:	b	12e2c <close_stdout@@Base+0x13a4>
   12f68:	bl	111b0 <abort@plt>
   12f6c:	bl	13e04 <close_stdout@@Base+0x237c>
   12f70:	muleq	r1, r0, r3
   12f74:	andeq	r3, r1, r0, asr #6
   12f78:	strdeq	r3, [r1], -ip
   12f7c:			; <UNDEFINED> instruction: 0x000132bc
   12f80:	push	{r4, r5, r6, lr}
   12f84:	mov	r5, r0
   12f88:	bl	110d8 <__errno_location@plt>
   12f8c:	cmp	r5, #0
   12f90:	mov	r1, #48	; 0x30
   12f94:	mov	r4, r0
   12f98:	ldr	r0, [pc, #24]	; 12fb8 <close_stdout@@Base+0x1530>
   12f9c:	ldr	r6, [r4]
   12fa0:	add	r0, pc, r0
   12fa4:	add	r0, r0, #256	; 0x100
   12fa8:	movne	r0, r5
   12fac:	bl	13dc4 <close_stdout@@Base+0x233c>
   12fb0:	str	r6, [r4]
   12fb4:	pop	{r4, r5, r6, pc}
   12fb8:	andeq	r3, r1, r0, ror #3
   12fbc:	cmp	r0, #0
   12fc0:	beq	12fcc <close_stdout@@Base+0x1544>
   12fc4:	ldr	r0, [r0]
   12fc8:	bx	lr
   12fcc:	ldr	r0, [pc, #12]	; 12fe0 <close_stdout@@Base+0x1558>
   12fd0:	add	r0, pc, r0
   12fd4:	add	r0, r0, #256	; 0x100
   12fd8:	ldr	r0, [r0]
   12fdc:	bx	lr
   12fe0:			; <UNDEFINED> instruction: 0x000131b0
   12fe4:	cmp	r0, #0
   12fe8:	beq	12ff4 <close_stdout@@Base+0x156c>
   12fec:	str	r1, [r0]
   12ff0:	bx	lr
   12ff4:	ldr	r0, [pc, #12]	; 13008 <close_stdout@@Base+0x1580>
   12ff8:	add	r0, pc, r0
   12ffc:	add	r0, r0, #256	; 0x100
   13000:	str	r1, [r0]
   13004:	bx	lr
   13008:	andeq	r3, r1, r8, lsl #3
   1300c:	cmp	r0, #0
   13010:	movne	r3, r0
   13014:	beq	13044 <close_stdout@@Base+0x15bc>
   13018:	lsr	ip, r1, #5
   1301c:	and	r1, r1, #31
   13020:	add	r3, r3, ip, lsl #2
   13024:	ldr	ip, [r3, #8]
   13028:	lsr	r0, ip, r1
   1302c:	eor	r2, r0, r2
   13030:	and	r0, r0, #1
   13034:	and	r2, r2, #1
   13038:	eor	ip, ip, r2, lsl r1
   1303c:	str	ip, [r3, #8]
   13040:	bx	lr
   13044:	ldr	r3, [pc, #8]	; 13054 <close_stdout@@Base+0x15cc>
   13048:	add	r3, pc, r3
   1304c:	add	r3, r3, #256	; 0x100
   13050:	b	13018 <close_stdout@@Base+0x1590>
   13054:	andeq	r3, r1, r8, lsr r1
   13058:	subs	r3, r0, #0
   1305c:	beq	1306c <close_stdout@@Base+0x15e4>
   13060:	ldr	r0, [r3, #4]
   13064:	str	r1, [r3, #4]
   13068:	bx	lr
   1306c:	ldr	r3, [pc, #8]	; 1307c <close_stdout@@Base+0x15f4>
   13070:	add	r3, pc, r3
   13074:	add	r3, r3, #256	; 0x100
   13078:	b	13060 <close_stdout@@Base+0x15d8>
   1307c:	andeq	r3, r1, r0, lsl r1
   13080:	cmp	r0, #0
   13084:	push	{r3, lr}
   13088:	beq	130ac <close_stdout@@Base+0x1624>
   1308c:	cmp	r2, #0
   13090:	cmpne	r1, #0
   13094:	mov	r3, #8
   13098:	strne	r1, [r0, #40]	; 0x28
   1309c:	str	r3, [r0]
   130a0:	strne	r2, [r0, #44]	; 0x2c
   130a4:	popne	{r3, pc}
   130a8:	bl	111b0 <abort@plt>
   130ac:	ldr	r0, [pc, #8]	; 130bc <close_stdout@@Base+0x1634>
   130b0:	add	r0, pc, r0
   130b4:	add	r0, r0, #256	; 0x100
   130b8:	b	1308c <close_stdout@@Base+0x1604>
   130bc:	ldrdeq	r3, [r1], -r0
   130c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   130c4:	sub	sp, sp, #24
   130c8:	mov	r7, r0
   130cc:	mov	sl, r1
   130d0:	ldr	r4, [sp, #56]	; 0x38
   130d4:	mov	r9, r2
   130d8:	mov	r8, r3
   130dc:	cmp	r4, #0
   130e0:	beq	13134 <close_stdout@@Base+0x16ac>
   130e4:	bl	110d8 <__errno_location@plt>
   130e8:	ldr	r3, [r4]
   130ec:	add	lr, r4, #8
   130f0:	mov	r1, sl
   130f4:	mov	r2, r9
   130f8:	ldr	r6, [r0]
   130fc:	mov	r5, r0
   13100:	str	r3, [sp]
   13104:	mov	r0, r7
   13108:	ldr	ip, [r4, #4]
   1310c:	mov	r3, r8
   13110:	stmib	sp, {ip, lr}
   13114:	ldr	ip, [r4, #40]	; 0x28
   13118:	str	ip, [sp, #12]
   1311c:	ldr	ip, [r4, #44]	; 0x2c
   13120:	str	ip, [sp, #16]
   13124:	bl	12088 <close_stdout@@Base+0x600>
   13128:	str	r6, [r5]
   1312c:	add	sp, sp, #24
   13130:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13134:	ldr	r4, [pc, #8]	; 13144 <close_stdout@@Base+0x16bc>
   13138:	add	r4, pc, r4
   1313c:	add	r4, r4, #256	; 0x100
   13140:	b	130e4 <close_stdout@@Base+0x165c>
   13144:	andeq	r3, r1, r8, asr #32
   13148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1314c:	subs	r4, r3, #0
   13150:	sub	sp, sp, #36	; 0x24
   13154:	mov	r7, r0
   13158:	mov	r6, r1
   1315c:	mov	r5, r2
   13160:	beq	1321c <close_stdout@@Base+0x1794>
   13164:	bl	110d8 <__errno_location@plt>
   13168:	ldr	r3, [r4]
   1316c:	ldr	sl, [r4, #4]
   13170:	add	r9, r4, #8
   13174:	mov	r8, r0
   13178:	mov	r0, #0
   1317c:	ldr	r2, [r8]
   13180:	cmp	r5, r0
   13184:	orreq	sl, sl, #1
   13188:	str	r9, [sp, #8]
   1318c:	mov	r1, r0
   13190:	stm	sp, {r3, sl}
   13194:	mov	r3, r6
   13198:	ldr	ip, [r4, #40]	; 0x28
   1319c:	str	r2, [sp, #28]
   131a0:	mov	r2, r7
   131a4:	str	ip, [sp, #12]
   131a8:	ldr	ip, [r4, #44]	; 0x2c
   131ac:	str	ip, [sp, #16]
   131b0:	bl	12088 <close_stdout@@Base+0x600>
   131b4:	add	r1, r0, #1
   131b8:	mov	fp, r0
   131bc:	str	r1, [sp, #24]
   131c0:	mov	r0, r1
   131c4:	bl	13bf0 <close_stdout@@Base+0x2168>
   131c8:	ldr	lr, [r4]
   131cc:	str	sl, [sp, #4]
   131d0:	mov	r3, r6
   131d4:	str	r9, [sp, #8]
   131d8:	mov	r2, r7
   131dc:	str	lr, [sp]
   131e0:	ldr	lr, [r4, #40]	; 0x28
   131e4:	ldr	r1, [sp, #24]
   131e8:	str	lr, [sp, #12]
   131ec:	ldr	lr, [r4, #44]	; 0x2c
   131f0:	str	lr, [sp, #16]
   131f4:	str	r0, [sp, #24]
   131f8:	bl	12088 <close_stdout@@Base+0x600>
   131fc:	ldr	r3, [sp, #28]
   13200:	cmp	r5, #0
   13204:	str	r3, [r8]
   13208:	ldr	ip, [sp, #24]
   1320c:	strne	fp, [r5]
   13210:	mov	r0, ip
   13214:	add	sp, sp, #36	; 0x24
   13218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1321c:	ldr	r4, [pc, #8]	; 1322c <close_stdout@@Base+0x17a4>
   13220:	add	r4, pc, r4
   13224:	add	r4, r4, #256	; 0x100
   13228:	b	13164 <close_stdout@@Base+0x16dc>
   1322c:	andeq	r2, r1, r0, ror #30
   13230:	mov	r3, r2
   13234:	mov	r2, #0
   13238:	b	13148 <close_stdout@@Base+0x16c0>
   1323c:	ldr	r2, [pc, #152]	; 132dc <close_stdout@@Base+0x1854>
   13240:	push	{r3, r4, r5, r6, r7, lr}
   13244:	add	r2, pc, r2
   13248:	ldr	r3, [pc, #144]	; 132e0 <close_stdout@@Base+0x1858>
   1324c:	ldr	r6, [r2]
   13250:	add	r3, pc, r3
   13254:	cmp	r6, #1
   13258:	ldr	r7, [r3]
   1325c:	movhi	r4, #1
   13260:	movhi	r5, r7
   13264:	bls	13280 <close_stdout@@Base+0x17f8>
   13268:	ldr	r0, [r5, #12]
   1326c:	add	r4, r4, #1
   13270:	bl	10f88 <free@plt>
   13274:	cmp	r4, r6
   13278:	add	r5, r5, #8
   1327c:	bne	13268 <close_stdout@@Base+0x17e0>
   13280:	ldr	r4, [pc, #92]	; 132e4 <close_stdout@@Base+0x185c>
   13284:	ldr	r0, [r7, #4]
   13288:	add	r4, pc, r4
   1328c:	cmp	r0, r4
   13290:	beq	132a8 <close_stdout@@Base+0x1820>
   13294:	bl	10f88 <free@plt>
   13298:	ldr	r3, [pc, #72]	; 132e8 <close_stdout@@Base+0x1860>
   1329c:	mov	r2, #256	; 0x100
   132a0:	add	r3, pc, r3
   132a4:	stmib	r3, {r2, r4}
   132a8:	ldr	r4, [pc, #60]	; 132ec <close_stdout@@Base+0x1864>
   132ac:	add	r4, pc, r4
   132b0:	add	r5, r4, #4
   132b4:	cmp	r7, r5
   132b8:	beq	132c8 <close_stdout@@Base+0x1840>
   132bc:	mov	r0, r7
   132c0:	bl	10f88 <free@plt>
   132c4:	str	r5, [r4]
   132c8:	ldr	r3, [pc, #32]	; 132f0 <close_stdout@@Base+0x1868>
   132cc:	mov	r2, #1
   132d0:	add	r3, pc, r3
   132d4:	str	r2, [r3]
   132d8:	pop	{r3, r4, r5, r6, r7, pc}
   132dc:	andeq	r2, r1, ip, ror #29
   132e0:	andeq	r2, r1, r4, lsl pc
   132e4:	strdeq	r2, [r1], -r8
   132e8:	andeq	r2, r1, r4, asr #29
   132ec:			; <UNDEFINED> instruction: 0x00012eb8
   132f0:	andeq	r2, r1, r0, ror #28
   132f4:	ldr	r3, [pc, #12]	; 13308 <close_stdout@@Base+0x1880>
   132f8:	mvn	r2, #0
   132fc:	add	r3, pc, r3
   13300:	add	r3, r3, #256	; 0x100
   13304:	b	12db0 <close_stdout@@Base+0x1328>
   13308:	andeq	r2, r1, r4, lsl #29
   1330c:	ldr	r3, [pc, #8]	; 1331c <close_stdout@@Base+0x1894>
   13310:	add	r3, pc, r3
   13314:	add	r3, r3, #256	; 0x100
   13318:	b	12db0 <close_stdout@@Base+0x1328>
   1331c:	andeq	r2, r1, r0, ror lr
   13320:	mov	r1, r0
   13324:	mov	r0, #0
   13328:	b	132f4 <close_stdout@@Base+0x186c>
   1332c:	mov	r2, r1
   13330:	mov	r1, r0
   13334:	mov	r0, #0
   13338:	b	1330c <close_stdout@@Base+0x1884>
   1333c:	ldr	r3, [pc, #92]	; 133a0 <close_stdout@@Base+0x1918>
   13340:	ldr	ip, [pc, #92]	; 133a4 <close_stdout@@Base+0x191c>
   13344:	add	r3, pc, r3
   13348:	push	{r4, r5, r6, r7, lr}
   1334c:	sub	sp, sp, #60	; 0x3c
   13350:	ldr	r4, [r3, ip]
   13354:	add	r5, sp, #4
   13358:	mov	r7, r2
   1335c:	mov	r6, r0
   13360:	mov	r0, r5
   13364:	ldr	r3, [r4]
   13368:	str	r3, [sp, #52]	; 0x34
   1336c:	bl	11ed0 <close_stdout@@Base+0x448>
   13370:	mov	r3, r5
   13374:	mvn	r2, #0
   13378:	mov	r0, r6
   1337c:	mov	r1, r7
   13380:	bl	12db0 <close_stdout@@Base+0x1328>
   13384:	ldr	r2, [sp, #52]	; 0x34
   13388:	ldr	r3, [r4]
   1338c:	cmp	r2, r3
   13390:	bne	1339c <close_stdout@@Base+0x1914>
   13394:	add	sp, sp, #60	; 0x3c
   13398:	pop	{r4, r5, r6, r7, pc}
   1339c:	bl	10fd0 <__stack_chk_fail@plt>
   133a0:			; <UNDEFINED> instruction: 0x00012cb4
   133a4:	andeq	r0, r0, ip, ror #1
   133a8:	ldr	ip, [pc, #96]	; 13410 <close_stdout@@Base+0x1988>
   133ac:	push	{r4, r5, r6, r7, r8, lr}
   133b0:	add	ip, pc, ip
   133b4:	ldr	lr, [pc, #88]	; 13414 <close_stdout@@Base+0x198c>
   133b8:	sub	sp, sp, #56	; 0x38
   133bc:	mov	r8, r3
   133c0:	add	r5, sp, #4
   133c4:	mov	r7, r2
   133c8:	mov	r6, r0
   133cc:	ldr	r4, [ip, lr]
   133d0:	mov	r0, r5
   133d4:	ldr	r3, [r4]
   133d8:	str	r3, [sp, #52]	; 0x34
   133dc:	bl	11ed0 <close_stdout@@Base+0x448>
   133e0:	mov	r2, r8
   133e4:	mov	r3, r5
   133e8:	mov	r0, r6
   133ec:	mov	r1, r7
   133f0:	bl	12db0 <close_stdout@@Base+0x1328>
   133f4:	ldr	r2, [sp, #52]	; 0x34
   133f8:	ldr	r3, [r4]
   133fc:	cmp	r2, r3
   13400:	bne	1340c <close_stdout@@Base+0x1984>
   13404:	add	sp, sp, #56	; 0x38
   13408:	pop	{r4, r5, r6, r7, r8, pc}
   1340c:	bl	10fd0 <__stack_chk_fail@plt>
   13410:	andeq	r2, r1, r8, asr #24
   13414:	andeq	r0, r0, ip, ror #1
   13418:	mov	r2, r1
   1341c:	mov	r1, r0
   13420:	mov	r0, #0
   13424:	b	1333c <close_stdout@@Base+0x18b4>
   13428:	mov	ip, r1
   1342c:	mov	r3, r2
   13430:	mov	r1, r0
   13434:	mov	r2, ip
   13438:	mov	r0, #0
   1343c:	b	133a8 <close_stdout@@Base+0x1920>
   13440:	push	{r4, r5, r6, r7, r8, lr}
   13444:	mov	r5, r2
   13448:	ldr	lr, [pc, #136]	; 134d8 <close_stdout@@Base+0x1a50>
   1344c:	mov	r7, r0
   13450:	mov	r6, r1
   13454:	ldr	r4, [pc, #128]	; 134dc <close_stdout@@Base+0x1a54>
   13458:	add	lr, pc, lr
   1345c:	sub	sp, sp, #56	; 0x38
   13460:	add	lr, lr, #256	; 0x100
   13464:	ldr	r8, [pc, #116]	; 134e0 <close_stdout@@Base+0x1a58>
   13468:	add	r4, pc, r4
   1346c:	add	ip, sp, #4
   13470:	ldm	lr!, {r0, r1, r2, r3}
   13474:	ldr	r4, [r4, r8]
   13478:	stmia	ip!, {r0, r1, r2, r3}
   1347c:	ldm	lr!, {r0, r1, r2, r3}
   13480:	ldr	r8, [r4]
   13484:	stmia	ip!, {r0, r1, r2, r3}
   13488:	ldm	lr, {r0, r1, r2, r3}
   1348c:	str	r8, [sp, #52]	; 0x34
   13490:	stm	ip, {r0, r1, r2, r3}
   13494:	mov	r1, r5
   13498:	add	r5, sp, #4
   1349c:	mov	r2, #1
   134a0:	mov	r0, r5
   134a4:	bl	1300c <close_stdout@@Base+0x1584>
   134a8:	mov	r2, r6
   134ac:	mov	r3, r5
   134b0:	mov	r1, r7
   134b4:	mov	r0, #0
   134b8:	bl	12db0 <close_stdout@@Base+0x1328>
   134bc:	ldr	r2, [sp, #52]	; 0x34
   134c0:	ldr	r3, [r4]
   134c4:	cmp	r2, r3
   134c8:	bne	134d4 <close_stdout@@Base+0x1a4c>
   134cc:	add	sp, sp, #56	; 0x38
   134d0:	pop	{r4, r5, r6, r7, r8, pc}
   134d4:	bl	10fd0 <__stack_chk_fail@plt>
   134d8:	andeq	r2, r1, r8, lsr #26
   134dc:	muleq	r1, r0, fp
   134e0:	andeq	r0, r0, ip, ror #1
   134e4:	mov	r2, r1
   134e8:	mvn	r1, #0
   134ec:	b	13440 <close_stdout@@Base+0x19b8>
   134f0:	mov	r1, #58	; 0x3a
   134f4:	b	134e4 <close_stdout@@Base+0x1a5c>
   134f8:	mov	r2, #58	; 0x3a
   134fc:	b	13440 <close_stdout@@Base+0x19b8>
   13500:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13504:	mov	r5, r2
   13508:	ldr	lr, [pc, #144]	; 135a0 <close_stdout@@Base+0x1b18>
   1350c:	mov	r8, r0
   13510:	mov	r9, r1
   13514:	mov	r7, r3
   13518:	add	lr, pc, lr
   1351c:	ldr	r4, [pc, #128]	; 135a4 <close_stdout@@Base+0x1b1c>
   13520:	add	lr, lr, #256	; 0x100
   13524:	sub	sp, sp, #56	; 0x38
   13528:	ldr	sl, [pc, #120]	; 135a8 <close_stdout@@Base+0x1b20>
   1352c:	add	r4, pc, r4
   13530:	ldm	lr!, {r0, r1, r2, r3}
   13534:	add	ip, sp, #4
   13538:	ldr	r4, [r4, sl]
   1353c:	ldr	r6, [sp, #88]	; 0x58
   13540:	stmia	ip!, {r0, r1, r2, r3}
   13544:	ldm	lr!, {r0, r1, r2, r3}
   13548:	ldr	sl, [r4]
   1354c:	stmia	ip!, {r0, r1, r2, r3}
   13550:	ldm	lr, {r0, r1, r2, r3}
   13554:	str	sl, [sp, #52]	; 0x34
   13558:	stm	ip, {r0, r1, r2, r3}
   1355c:	mov	r2, r5
   13560:	add	r5, sp, #4
   13564:	mov	r1, r9
   13568:	mov	r0, r5
   1356c:	bl	13080 <close_stdout@@Base+0x15f8>
   13570:	mov	r2, r6
   13574:	mov	r3, r5
   13578:	mov	r0, r8
   1357c:	mov	r1, r7
   13580:	bl	12db0 <close_stdout@@Base+0x1328>
   13584:	ldr	r2, [sp, #52]	; 0x34
   13588:	ldr	r3, [r4]
   1358c:	cmp	r2, r3
   13590:	bne	1359c <close_stdout@@Base+0x1b14>
   13594:	add	sp, sp, #56	; 0x38
   13598:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1359c:	bl	10fd0 <__stack_chk_fail@plt>
   135a0:	andeq	r2, r1, r8, ror #24
   135a4:	andeq	r2, r1, ip, asr #21
   135a8:	andeq	r0, r0, ip, ror #1
   135ac:	push	{lr}		; (str lr, [sp, #-4]!)
   135b0:	sub	sp, sp, #12
   135b4:	mvn	ip, #0
   135b8:	str	ip, [sp]
   135bc:	bl	13500 <close_stdout@@Base+0x1a78>
   135c0:	add	sp, sp, #12
   135c4:	pop	{pc}		; (ldr pc, [sp], #4)
   135c8:	mov	ip, r1
   135cc:	mov	r3, r2
   135d0:	mov	r1, r0
   135d4:	mov	r2, ip
   135d8:	mov	r0, #0
   135dc:	b	135ac <close_stdout@@Base+0x1b24>
   135e0:	push	{lr}		; (str lr, [sp, #-4]!)
   135e4:	sub	sp, sp, #12
   135e8:	mov	lr, r1
   135ec:	mov	ip, r2
   135f0:	mov	r1, r0
   135f4:	str	r3, [sp]
   135f8:	mov	r2, lr
   135fc:	mov	r3, ip
   13600:	mov	r0, #0
   13604:	bl	13500 <close_stdout@@Base+0x1a78>
   13608:	add	sp, sp, #12
   1360c:	pop	{pc}		; (ldr pc, [sp], #4)
   13610:	ldr	r3, [pc, #12]	; 13624 <close_stdout@@Base+0x1b9c>
   13614:	ldr	ip, [pc, #12]	; 13628 <close_stdout@@Base+0x1ba0>
   13618:	add	r3, pc, r3
   1361c:	ldr	r3, [r3, ip]
   13620:	b	12db0 <close_stdout@@Base+0x1328>
   13624:	andeq	r2, r1, r0, ror #19
   13628:	andeq	r0, r0, r8, ror #1
   1362c:	mov	r2, r1
   13630:	mov	r1, r0
   13634:	mov	r0, #0
   13638:	b	13610 <close_stdout@@Base+0x1b88>
   1363c:	mvn	r2, #0
   13640:	b	13610 <close_stdout@@Base+0x1b88>
   13644:	mov	r1, r0
   13648:	mov	r0, #0
   1364c:	b	1363c <close_stdout@@Base+0x1bb4>
   13650:	push	{r4, r5, r6, r7, lr}
   13654:	cmp	r1, #0
   13658:	sub	sp, sp, #36	; 0x24
   1365c:	ldr	r7, [pc, #896]	; 139e4 <close_stdout@@Base+0x1f5c>
   13660:	mov	ip, r3
   13664:	mov	r5, r0
   13668:	add	r7, pc, r7
   1366c:	ldr	r4, [sp, #56]	; 0x38
   13670:	ldr	r6, [sp, #60]	; 0x3c
   13674:	beq	139b8 <close_stdout@@Base+0x1f30>
   13678:	str	r2, [sp]
   1367c:	mov	r3, r1
   13680:	ldr	r2, [pc, #864]	; 139e8 <close_stdout@@Base+0x1f60>
   13684:	mov	r1, #1
   13688:	str	ip, [sp, #4]
   1368c:	add	r2, pc, r2
   13690:	bl	1112c <__fprintf_chk@plt>
   13694:	ldr	r1, [pc, #848]	; 139ec <close_stdout@@Base+0x1f64>
   13698:	mov	r2, #5
   1369c:	mov	r0, #0
   136a0:	add	r1, pc, r1
   136a4:	bl	10fc4 <dcgettext@plt>
   136a8:	ldr	r2, [pc, #832]	; 139f0 <close_stdout@@Base+0x1f68>
   136ac:	movw	ip, #2013	; 0x7dd
   136b0:	mov	r1, #1
   136b4:	ldr	r2, [r7, r2]
   136b8:	str	ip, [sp]
   136bc:	mov	r3, r0
   136c0:	mov	r0, r5
   136c4:	bl	1112c <__fprintf_chk@plt>
   136c8:	ldr	r1, [pc, #804]	; 139f4 <close_stdout@@Base+0x1f6c>
   136cc:	mov	r0, #0
   136d0:	mov	r2, #5
   136d4:	add	r1, pc, r1
   136d8:	bl	10fc4 <dcgettext@plt>
   136dc:	mov	r1, r5
   136e0:	bl	10f4c <fputs_unlocked@plt>
   136e4:	cmp	r6, #9
   136e8:	addls	pc, pc, r6, lsl #2
   136ec:	b	139d4 <close_stdout@@Base+0x1f4c>
   136f0:	b	13784 <close_stdout@@Base+0x1cfc>
   136f4:	b	13788 <close_stdout@@Base+0x1d00>
   136f8:	b	137b8 <close_stdout@@Base+0x1d30>
   136fc:	b	137ec <close_stdout@@Base+0x1d64>
   13700:	b	13828 <close_stdout@@Base+0x1da0>
   13704:	b	13868 <close_stdout@@Base+0x1de0>
   13708:	b	138b0 <close_stdout@@Base+0x1e28>
   1370c:	b	13900 <close_stdout@@Base+0x1e78>
   13710:	b	13958 <close_stdout@@Base+0x1ed0>
   13714:	b	13718 <close_stdout@@Base+0x1c90>
   13718:	ldr	r1, [pc, #728]	; 139f8 <close_stdout@@Base+0x1f70>
   1371c:	mov	r0, #0
   13720:	add	r1, pc, r1
   13724:	mov	r2, #5
   13728:	bl	10fc4 <dcgettext@plt>
   1372c:	ldm	r4, {r3, ip}
   13730:	mov	r1, #1
   13734:	str	ip, [sp]
   13738:	ldr	ip, [r4, #8]
   1373c:	str	ip, [sp, #4]
   13740:	ldr	ip, [r4, #12]
   13744:	str	ip, [sp, #8]
   13748:	ldr	ip, [r4, #16]
   1374c:	str	ip, [sp, #12]
   13750:	ldr	ip, [r4, #20]
   13754:	str	ip, [sp, #16]
   13758:	ldr	ip, [r4, #24]
   1375c:	str	ip, [sp, #20]
   13760:	ldr	ip, [r4, #28]
   13764:	str	ip, [sp, #24]
   13768:	ldr	ip, [r4, #32]
   1376c:	str	ip, [sp, #28]
   13770:	mov	r2, r0
   13774:	mov	r0, r5
   13778:	bl	1112c <__fprintf_chk@plt>
   1377c:	add	sp, sp, #36	; 0x24
   13780:	pop	{r4, r5, r6, r7, pc}
   13784:	bl	111b0 <abort@plt>
   13788:	ldr	r1, [pc, #620]	; 139fc <close_stdout@@Base+0x1f74>
   1378c:	mov	r2, #5
   13790:	mov	r0, #0
   13794:	add	r1, pc, r1
   13798:	bl	10fc4 <dcgettext@plt>
   1379c:	ldr	r3, [r4]
   137a0:	mov	r1, #1
   137a4:	mov	r2, r0
   137a8:	mov	r0, r5
   137ac:	add	sp, sp, #36	; 0x24
   137b0:	pop	{r4, r5, r6, r7, lr}
   137b4:	b	1112c <__fprintf_chk@plt>
   137b8:	ldr	r1, [pc, #576]	; 13a00 <close_stdout@@Base+0x1f78>
   137bc:	mov	r2, #5
   137c0:	mov	r0, #0
   137c4:	add	r1, pc, r1
   137c8:	bl	10fc4 <dcgettext@plt>
   137cc:	ldm	r4, {r3, ip}
   137d0:	mov	r1, #1
   137d4:	str	ip, [sp, #56]	; 0x38
   137d8:	mov	r2, r0
   137dc:	mov	r0, r5
   137e0:	add	sp, sp, #36	; 0x24
   137e4:	pop	{r4, r5, r6, r7, lr}
   137e8:	b	1112c <__fprintf_chk@plt>
   137ec:	ldr	r1, [pc, #528]	; 13a04 <close_stdout@@Base+0x1f7c>
   137f0:	mov	r2, #5
   137f4:	mov	r0, #0
   137f8:	add	r1, pc, r1
   137fc:	bl	10fc4 <dcgettext@plt>
   13800:	ldm	r4, {r3, ip}
   13804:	mov	r1, #1
   13808:	str	ip, [sp, #56]	; 0x38
   1380c:	ldr	ip, [r4, #8]
   13810:	str	ip, [sp, #60]	; 0x3c
   13814:	mov	r2, r0
   13818:	mov	r0, r5
   1381c:	add	sp, sp, #36	; 0x24
   13820:	pop	{r4, r5, r6, r7, lr}
   13824:	b	1112c <__fprintf_chk@plt>
   13828:	ldr	r1, [pc, #472]	; 13a08 <close_stdout@@Base+0x1f80>
   1382c:	mov	r2, #5
   13830:	mov	r0, #0
   13834:	add	r1, pc, r1
   13838:	bl	10fc4 <dcgettext@plt>
   1383c:	ldm	r4, {r3, ip}
   13840:	mov	r1, #1
   13844:	str	ip, [sp]
   13848:	ldr	ip, [r4, #8]
   1384c:	str	ip, [sp, #4]
   13850:	ldr	ip, [r4, #12]
   13854:	str	ip, [sp, #8]
   13858:	mov	r2, r0
   1385c:	mov	r0, r5
   13860:	bl	1112c <__fprintf_chk@plt>
   13864:	b	1377c <close_stdout@@Base+0x1cf4>
   13868:	ldr	r1, [pc, #412]	; 13a0c <close_stdout@@Base+0x1f84>
   1386c:	mov	r2, #5
   13870:	mov	r0, #0
   13874:	add	r1, pc, r1
   13878:	bl	10fc4 <dcgettext@plt>
   1387c:	ldm	r4, {r3, ip}
   13880:	mov	r1, #1
   13884:	str	ip, [sp]
   13888:	ldr	ip, [r4, #8]
   1388c:	str	ip, [sp, #4]
   13890:	ldr	ip, [r4, #12]
   13894:	str	ip, [sp, #8]
   13898:	ldr	ip, [r4, #16]
   1389c:	str	ip, [sp, #12]
   138a0:	mov	r2, r0
   138a4:	mov	r0, r5
   138a8:	bl	1112c <__fprintf_chk@plt>
   138ac:	b	1377c <close_stdout@@Base+0x1cf4>
   138b0:	ldr	r1, [pc, #344]	; 13a10 <close_stdout@@Base+0x1f88>
   138b4:	mov	r2, #5
   138b8:	mov	r0, #0
   138bc:	add	r1, pc, r1
   138c0:	bl	10fc4 <dcgettext@plt>
   138c4:	ldm	r4, {r3, ip}
   138c8:	mov	r1, #1
   138cc:	str	ip, [sp]
   138d0:	ldr	ip, [r4, #8]
   138d4:	str	ip, [sp, #4]
   138d8:	ldr	ip, [r4, #12]
   138dc:	str	ip, [sp, #8]
   138e0:	ldr	ip, [r4, #16]
   138e4:	str	ip, [sp, #12]
   138e8:	ldr	ip, [r4, #20]
   138ec:	str	ip, [sp, #16]
   138f0:	mov	r2, r0
   138f4:	mov	r0, r5
   138f8:	bl	1112c <__fprintf_chk@plt>
   138fc:	b	1377c <close_stdout@@Base+0x1cf4>
   13900:	ldr	r1, [pc, #268]	; 13a14 <close_stdout@@Base+0x1f8c>
   13904:	mov	r2, #5
   13908:	mov	r0, #0
   1390c:	add	r1, pc, r1
   13910:	bl	10fc4 <dcgettext@plt>
   13914:	ldm	r4, {r3, ip}
   13918:	mov	r1, #1
   1391c:	str	ip, [sp]
   13920:	ldr	ip, [r4, #8]
   13924:	str	ip, [sp, #4]
   13928:	ldr	ip, [r4, #12]
   1392c:	str	ip, [sp, #8]
   13930:	ldr	ip, [r4, #16]
   13934:	str	ip, [sp, #12]
   13938:	ldr	ip, [r4, #20]
   1393c:	str	ip, [sp, #16]
   13940:	ldr	ip, [r4, #24]
   13944:	str	ip, [sp, #20]
   13948:	mov	r2, r0
   1394c:	mov	r0, r5
   13950:	bl	1112c <__fprintf_chk@plt>
   13954:	b	1377c <close_stdout@@Base+0x1cf4>
   13958:	ldr	r1, [pc, #184]	; 13a18 <close_stdout@@Base+0x1f90>
   1395c:	mov	r2, #5
   13960:	mov	r0, #0
   13964:	add	r1, pc, r1
   13968:	bl	10fc4 <dcgettext@plt>
   1396c:	ldm	r4, {r3, ip}
   13970:	mov	r1, #1
   13974:	str	ip, [sp]
   13978:	ldr	ip, [r4, #8]
   1397c:	str	ip, [sp, #4]
   13980:	ldr	ip, [r4, #12]
   13984:	str	ip, [sp, #8]
   13988:	ldr	ip, [r4, #16]
   1398c:	str	ip, [sp, #12]
   13990:	ldr	ip, [r4, #20]
   13994:	str	ip, [sp, #16]
   13998:	ldr	ip, [r4, #24]
   1399c:	str	ip, [sp, #20]
   139a0:	ldr	ip, [r4, #28]
   139a4:	str	ip, [sp, #24]
   139a8:	mov	r2, r0
   139ac:	mov	r0, r5
   139b0:	bl	1112c <__fprintf_chk@plt>
   139b4:	b	1377c <close_stdout@@Base+0x1cf4>
   139b8:	str	r3, [sp]
   139bc:	mov	r3, r2
   139c0:	ldr	r2, [pc, #84]	; 13a1c <close_stdout@@Base+0x1f94>
   139c4:	mov	r1, #1
   139c8:	add	r2, pc, r2
   139cc:	bl	1112c <__fprintf_chk@plt>
   139d0:	b	13694 <close_stdout@@Base+0x1c0c>
   139d4:	ldr	r1, [pc, #68]	; 13a20 <close_stdout@@Base+0x1f98>
   139d8:	mov	r0, #0
   139dc:	add	r1, pc, r1
   139e0:	b	13724 <close_stdout@@Base+0x1c9c>
   139e4:	muleq	r1, r0, r9
   139e8:	andeq	r2, r0, r4, ror #2
   139ec:	andeq	r2, r0, r4, ror #2
   139f0:	andeq	r0, r0, r0, lsr #2
   139f4:	andeq	r2, r0, r4, lsr r1
   139f8:	andeq	r2, r0, r0, asr #5
   139fc:	andeq	r2, r0, r0, asr #2
   13a00:	andeq	r2, r0, r0, lsr #2
   13a04:	andeq	r2, r0, r4, lsl #2
   13a08:	andeq	r2, r0, r4, ror #1
   13a0c:	andeq	r2, r0, r4, asr #1
   13a10:	andeq	r2, r0, r0, lsr #1
   13a14:	andeq	r2, r0, r8, ror r0
   13a18:	andeq	r2, r0, ip, asr #32
   13a1c:	andeq	r1, r0, r4, lsr lr
   13a20:	andeq	r2, r0, r8, lsr r0
   13a24:	push	{r4, r5, lr}
   13a28:	sub	sp, sp, #12
   13a2c:	ldr	r5, [sp, #24]
   13a30:	ldr	ip, [r5]
   13a34:	cmp	ip, #0
   13a38:	beq	13a54 <close_stdout@@Base+0x1fcc>
   13a3c:	mov	lr, r5
   13a40:	mov	ip, #0
   13a44:	ldr	r4, [lr, #4]!
   13a48:	add	ip, ip, #1
   13a4c:	cmp	r4, #0
   13a50:	bne	13a44 <close_stdout@@Base+0x1fbc>
   13a54:	stm	sp, {r5, ip}
   13a58:	bl	13650 <close_stdout@@Base+0x1bc8>
   13a5c:	add	sp, sp, #12
   13a60:	pop	{r4, r5, pc}
   13a64:	push	{r4, r5, r6, r7, lr}
   13a68:	sub	sp, sp, #60	; 0x3c
   13a6c:	ldr	r4, [pc, #100]	; 13ad8 <close_stdout@@Base+0x2050>
   13a70:	mov	ip, #0
   13a74:	ldr	r5, [pc, #96]	; 13adc <close_stdout@@Base+0x2054>
   13a78:	mov	lr, ip
   13a7c:	add	r4, pc, r4
   13a80:	ldr	r6, [sp, #80]	; 0x50
   13a84:	ldr	r7, [r4, r5]
   13a88:	add	r5, sp, #12
   13a8c:	ldr	r4, [r7]
   13a90:	str	r4, [sp, #52]	; 0x34
   13a94:	ldr	r4, [r6, ip]
   13a98:	cmp	r4, #0
   13a9c:	str	r4, [r5, ip]
   13aa0:	beq	13ab4 <close_stdout@@Base+0x202c>
   13aa4:	add	lr, lr, #1
   13aa8:	add	ip, ip, #4
   13aac:	cmp	lr, #10
   13ab0:	bne	13a94 <close_stdout@@Base+0x200c>
   13ab4:	stm	sp, {r5, lr}
   13ab8:	bl	13650 <close_stdout@@Base+0x1bc8>
   13abc:	ldr	r2, [sp, #52]	; 0x34
   13ac0:	ldr	r3, [r7]
   13ac4:	cmp	r2, r3
   13ac8:	bne	13ad4 <close_stdout@@Base+0x204c>
   13acc:	add	sp, sp, #60	; 0x3c
   13ad0:	pop	{r4, r5, r6, r7, pc}
   13ad4:	bl	10fd0 <__stack_chk_fail@plt>
   13ad8:	andeq	r2, r1, ip, ror r5
   13adc:	andeq	r0, r0, ip, ror #1
   13ae0:	push	{r3}		; (str r3, [sp, #-4]!)
   13ae4:	push	{r4, lr}
   13ae8:	sub	sp, sp, #20
   13aec:	ldr	lr, [pc, #72]	; 13b3c <close_stdout@@Base+0x20b4>
   13af0:	add	ip, sp, #32
   13af4:	ldr	r4, [pc, #68]	; 13b40 <close_stdout@@Base+0x20b8>
   13af8:	add	lr, pc, lr
   13afc:	ldr	r3, [sp, #28]
   13b00:	ldr	r4, [lr, r4]
   13b04:	str	ip, [sp]
   13b08:	str	ip, [sp, #8]
   13b0c:	ldr	ip, [r4]
   13b10:	str	ip, [sp, #12]
   13b14:	bl	13a64 <close_stdout@@Base+0x1fdc>
   13b18:	ldr	r2, [sp, #12]
   13b1c:	ldr	r3, [r4]
   13b20:	cmp	r2, r3
   13b24:	bne	13b38 <close_stdout@@Base+0x20b0>
   13b28:	add	sp, sp, #20
   13b2c:	pop	{r4, lr}
   13b30:	add	sp, sp, #4
   13b34:	bx	lr
   13b38:	bl	10fd0 <__stack_chk_fail@plt>
   13b3c:	andeq	r2, r1, r0, lsl #10
   13b40:	andeq	r0, r0, ip, ror #1
   13b44:	ldr	r1, [pc, #132]	; 13bd0 <close_stdout@@Base+0x2148>
   13b48:	mov	r2, #5
   13b4c:	push	{r4, lr}
   13b50:	add	r1, pc, r1
   13b54:	mov	r0, #0
   13b58:	ldr	r4, [pc, #116]	; 13bd4 <close_stdout@@Base+0x214c>
   13b5c:	bl	10fc4 <dcgettext@plt>
   13b60:	ldr	r2, [pc, #112]	; 13bd8 <close_stdout@@Base+0x2150>
   13b64:	add	r4, pc, r4
   13b68:	add	r2, pc, r2
   13b6c:	mov	r1, r0
   13b70:	mov	r0, #1
   13b74:	bl	11114 <__printf_chk@plt>
   13b78:	ldr	r1, [pc, #92]	; 13bdc <close_stdout@@Base+0x2154>
   13b7c:	mov	r2, #5
   13b80:	mov	r0, #0
   13b84:	add	r1, pc, r1
   13b88:	bl	10fc4 <dcgettext@plt>
   13b8c:	ldr	r2, [pc, #76]	; 13be0 <close_stdout@@Base+0x2158>
   13b90:	ldr	r3, [pc, #76]	; 13be4 <close_stdout@@Base+0x215c>
   13b94:	add	r2, pc, r2
   13b98:	add	r3, pc, r3
   13b9c:	mov	r1, r0
   13ba0:	mov	r0, #1
   13ba4:	bl	11114 <__printf_chk@plt>
   13ba8:	ldr	r1, [pc, #56]	; 13be8 <close_stdout@@Base+0x2160>
   13bac:	mov	r0, #0
   13bb0:	mov	r2, #5
   13bb4:	add	r1, pc, r1
   13bb8:	bl	10fc4 <dcgettext@plt>
   13bbc:	ldr	r3, [pc, #40]	; 13bec <close_stdout@@Base+0x2164>
   13bc0:	ldr	r3, [r4, r3]
   13bc4:	pop	{r4, lr}
   13bc8:	ldr	r1, [r3]
   13bcc:	b	10f4c <fputs_unlocked@plt>
   13bd0:	andeq	r1, r0, r0, lsl #30
   13bd4:	muleq	r1, r4, r4
   13bd8:	andeq	r1, r0, r0, lsl #30
   13bdc:	strdeq	r1, [r0], -ip
   13be0:	andeq	r1, r0, ip, lsr sl
   13be4:	andeq	r1, r0, r8, asr #20
   13be8:	andeq	r1, r0, r0, ror #29
   13bec:	andeq	r0, r0, ip, lsl #2
   13bf0:	push	{r4, lr}
   13bf4:	mov	r4, r0
   13bf8:	bl	1106c <malloc@plt>
   13bfc:	rsbs	r3, r0, #1
   13c00:	movcc	r3, #0
   13c04:	cmp	r4, #0
   13c08:	moveq	r3, #0
   13c0c:	cmp	r3, #0
   13c10:	popeq	{r4, pc}
   13c14:	bl	13e04 <close_stdout@@Base+0x237c>
   13c18:	push	{r3, r4, r5, lr}
   13c1c:	mov	r4, r0
   13c20:	mvn	r0, #0
   13c24:	mov	r5, r1
   13c28:	bl	144a4 <close_stdout@@Base+0x2a1c>
   13c2c:	cmp	r0, r4
   13c30:	bcc	13c40 <close_stdout@@Base+0x21b8>
   13c34:	mul	r0, r4, r5
   13c38:	pop	{r3, r4, r5, lr}
   13c3c:	b	13bf0 <close_stdout@@Base+0x2168>
   13c40:	bl	13e04 <close_stdout@@Base+0x237c>
   13c44:	b	13bf0 <close_stdout@@Base+0x2168>
   13c48:	rsbs	r3, r1, #1
   13c4c:	push	{r4, lr}
   13c50:	movcc	r3, #0
   13c54:	cmp	r0, #0
   13c58:	mov	r4, r1
   13c5c:	moveq	r3, #0
   13c60:	cmp	r3, #0
   13c64:	bne	13c88 <close_stdout@@Base+0x2200>
   13c68:	bl	10fdc <realloc@plt>
   13c6c:	rsbs	r3, r0, #1
   13c70:	movcc	r3, #0
   13c74:	cmp	r4, #0
   13c78:	moveq	r3, #0
   13c7c:	cmp	r3, #0
   13c80:	popeq	{r4, pc}
   13c84:	bl	13e04 <close_stdout@@Base+0x237c>
   13c88:	bl	10f88 <free@plt>
   13c8c:	mov	r0, #0
   13c90:	pop	{r4, pc}
   13c94:	push	{r4, r5, r6, lr}
   13c98:	mov	r5, r1
   13c9c:	mov	r6, r0
   13ca0:	mov	r1, r2
   13ca4:	mvn	r0, #0
   13ca8:	mov	r4, r2
   13cac:	bl	144a4 <close_stdout@@Base+0x2a1c>
   13cb0:	cmp	r0, r5
   13cb4:	bcc	13cc8 <close_stdout@@Base+0x2240>
   13cb8:	mov	r0, r6
   13cbc:	mul	r1, r5, r4
   13cc0:	pop	{r4, r5, r6, lr}
   13cc4:	b	13c48 <close_stdout@@Base+0x21c0>
   13cc8:	bl	13e04 <close_stdout@@Base+0x237c>
   13ccc:	push	{r3, r4, r5, r6, r7, lr}
   13cd0:	subs	r7, r0, #0
   13cd4:	mov	r5, r1
   13cd8:	mov	r6, r2
   13cdc:	ldr	r4, [r1]
   13ce0:	beq	13d18 <close_stdout@@Base+0x2290>
   13ce4:	movw	r0, #43690	; 0xaaaa
   13ce8:	mov	r1, r2
   13cec:	bfi	r0, r0, #16, #16
   13cf0:	bl	144a4 <close_stdout@@Base+0x2a1c>
   13cf4:	cmp	r4, r0
   13cf8:	addcc	r3, r4, #1
   13cfc:	addcc	r4, r4, r3, lsr #1
   13d00:	bcs	13d3c <close_stdout@@Base+0x22b4>
   13d04:	str	r4, [r5]
   13d08:	mov	r0, r7
   13d0c:	mul	r1, r6, r4
   13d10:	pop	{r3, r4, r5, r6, r7, lr}
   13d14:	b	13c48 <close_stdout@@Base+0x21c0>
   13d18:	cmp	r4, #0
   13d1c:	bne	13d04 <close_stdout@@Base+0x227c>
   13d20:	mov	r0, #64	; 0x40
   13d24:	mov	r1, r2
   13d28:	bl	144a4 <close_stdout@@Base+0x2a1c>
   13d2c:	cmp	r0, #0
   13d30:	movne	r4, r0
   13d34:	addeq	r4, r0, #1
   13d38:	b	13d04 <close_stdout@@Base+0x227c>
   13d3c:	bl	13e04 <close_stdout@@Base+0x237c>
   13d40:	cmp	r0, #0
   13d44:	push	{r3, lr}
   13d48:	ldr	r3, [r1]
   13d4c:	beq	13d78 <close_stdout@@Base+0x22f0>
   13d50:	movw	r2, #43689	; 0xaaa9
   13d54:	movt	r2, #43690	; 0xaaaa
   13d58:	cmp	r3, r2
   13d5c:	addls	r2, r3, #1
   13d60:	addls	r3, r3, r2, lsr #1
   13d64:	bhi	13d90 <close_stdout@@Base+0x2308>
   13d68:	str	r3, [r1]
   13d6c:	mov	r1, r3
   13d70:	pop	{r3, lr}
   13d74:	b	13c48 <close_stdout@@Base+0x21c0>
   13d78:	cmp	r3, #0
   13d7c:	moveq	r3, #64	; 0x40
   13d80:	str	r3, [r1]
   13d84:	mov	r1, r3
   13d88:	pop	{r3, lr}
   13d8c:	b	13c48 <close_stdout@@Base+0x21c0>
   13d90:	bl	13e04 <close_stdout@@Base+0x237c>
   13d94:	push	{r4, lr}
   13d98:	mov	r4, r0
   13d9c:	bl	13bf0 <close_stdout@@Base+0x2168>
   13da0:	mov	r2, r4
   13da4:	mov	r1, #0
   13da8:	pop	{r4, lr}
   13dac:	b	110fc <memset@plt>
   13db0:	push	{r3, lr}
   13db4:	bl	10f40 <calloc@plt>
   13db8:	cmp	r0, #0
   13dbc:	popne	{r3, pc}
   13dc0:	bl	13e04 <close_stdout@@Base+0x237c>
   13dc4:	push	{r3, r4, r5, lr}
   13dc8:	mov	r4, r1
   13dcc:	mov	r5, r0
   13dd0:	mov	r0, r1
   13dd4:	bl	13bf0 <close_stdout@@Base+0x2168>
   13dd8:	mov	r1, r5
   13ddc:	mov	r2, r4
   13de0:	pop	{r3, r4, r5, lr}
   13de4:	b	10fa0 <memcpy@plt>
   13de8:	push	{r4, lr}
   13dec:	mov	r4, r0
   13df0:	bl	110c0 <strlen@plt>
   13df4:	add	r1, r0, #1
   13df8:	mov	r0, r4
   13dfc:	pop	{r4, lr}
   13e00:	b	13dc4 <close_stdout@@Base+0x233c>
   13e04:	ldr	r3, [pc, #64]	; 13e4c <close_stdout@@Base+0x23c4>
   13e08:	mov	r2, #5
   13e0c:	ldr	ip, [pc, #60]	; 13e50 <close_stdout@@Base+0x23c8>
   13e10:	mov	r0, #0
   13e14:	add	r3, pc, r3
   13e18:	ldr	r1, [pc, #52]	; 13e54 <close_stdout@@Base+0x23cc>
   13e1c:	push	{r4, lr}
   13e20:	add	r1, pc, r1
   13e24:	ldr	r3, [r3, ip]
   13e28:	ldr	r4, [r3]
   13e2c:	bl	10fc4 <dcgettext@plt>
   13e30:	ldr	r2, [pc, #32]	; 13e58 <close_stdout@@Base+0x23d0>
   13e34:	mov	r1, #0
   13e38:	add	r2, pc, r2
   13e3c:	mov	r3, r0
   13e40:	mov	r0, r4
   13e44:	bl	11048 <error@plt>
   13e48:	bl	111b0 <abort@plt>
   13e4c:	andeq	r2, r1, r4, ror #3
   13e50:	andeq	r0, r0, r4, lsl r1
   13e54:	andeq	r1, r0, r4, ror #25
   13e58:	ldrdeq	r1, [r0], -ip
   13e5c:	push	{r4, r5, r6, lr}
   13e60:	sub	sp, sp, #8
   13e64:	mov	r4, r0
   13e68:	bl	11120 <fileno@plt>
   13e6c:	cmp	r0, #0
   13e70:	mov	r0, r4
   13e74:	blt	13ef0 <close_stdout@@Base+0x2468>
   13e78:	bl	11084 <__freading@plt>
   13e7c:	cmp	r0, #0
   13e80:	bne	13ebc <close_stdout@@Base+0x2434>
   13e84:	mov	r0, r4
   13e88:	bl	13efc <close_stdout@@Base+0x2474>
   13e8c:	cmp	r0, #0
   13e90:	beq	13eec <close_stdout@@Base+0x2464>
   13e94:	bl	110d8 <__errno_location@plt>
   13e98:	ldr	r6, [r0]
   13e9c:	mov	r5, r0
   13ea0:	mov	r0, r4
   13ea4:	bl	11138 <fclose@plt>
   13ea8:	cmp	r6, #0
   13eac:	mvnne	r0, #0
   13eb0:	strne	r6, [r5]
   13eb4:	add	sp, sp, #8
   13eb8:	pop	{r4, r5, r6, pc}
   13ebc:	mov	r0, r4
   13ec0:	bl	11120 <fileno@plt>
   13ec4:	mov	r1, #1
   13ec8:	mov	r2, #0
   13ecc:	mov	r3, #0
   13ed0:	str	r1, [sp]
   13ed4:	bl	1100c <lseek64@plt>
   13ed8:	mvn	r2, #0
   13edc:	mvn	r3, #0
   13ee0:	cmp	r1, r3
   13ee4:	cmpeq	r0, r2
   13ee8:	bne	13e84 <close_stdout@@Base+0x23fc>
   13eec:	mov	r0, r4
   13ef0:	add	sp, sp, #8
   13ef4:	pop	{r4, r5, r6, lr}
   13ef8:	b	11138 <fclose@plt>
   13efc:	push	{r4, lr}
   13f00:	subs	r4, r0, #0
   13f04:	sub	sp, sp, #8
   13f08:	beq	13f18 <close_stdout@@Base+0x2490>
   13f0c:	bl	11084 <__freading@plt>
   13f10:	cmp	r0, #0
   13f14:	bne	13f28 <close_stdout@@Base+0x24a0>
   13f18:	mov	r0, r4
   13f1c:	add	sp, sp, #8
   13f20:	pop	{r4, lr}
   13f24:	b	10f7c <fflush@plt>
   13f28:	ldr	r3, [r4]
   13f2c:	tst	r3, #256	; 0x100
   13f30:	beq	13f18 <close_stdout@@Base+0x2490>
   13f34:	mov	r3, #1
   13f38:	mov	r0, r4
   13f3c:	str	r3, [sp]
   13f40:	mov	r2, #0
   13f44:	mov	r3, #0
   13f48:	bl	13f5c <close_stdout@@Base+0x24d4>
   13f4c:	mov	r0, r4
   13f50:	add	sp, sp, #8
   13f54:	pop	{r4, lr}
   13f58:	b	10f7c <fflush@plt>
   13f5c:	push	{r4, r5, r6, r7, lr}
   13f60:	sub	sp, sp, #20
   13f64:	ldmib	r0, {r1, ip}
   13f68:	mov	r6, r0
   13f6c:	ldr	r4, [sp, #40]	; 0x28
   13f70:	cmp	ip, r1
   13f74:	beq	13f8c <close_stdout@@Base+0x2504>
   13f78:	str	r4, [sp, #40]	; 0x28
   13f7c:	mov	r0, r6
   13f80:	add	sp, sp, #20
   13f84:	pop	{r4, r5, r6, r7, lr}
   13f88:	b	11144 <fseeko64@plt>
   13f8c:	ldr	ip, [r0, #20]
   13f90:	ldr	r1, [r0, #16]
   13f94:	cmp	ip, r1
   13f98:	bne	13f78 <close_stdout@@Base+0x24f0>
   13f9c:	ldr	r7, [r0, #36]	; 0x24
   13fa0:	cmp	r7, #0
   13fa4:	bne	13f78 <close_stdout@@Base+0x24f0>
   13fa8:	str	r2, [sp, #12]
   13fac:	mvn	r5, #0
   13fb0:	str	r3, [sp, #8]
   13fb4:	bl	11120 <fileno@plt>
   13fb8:	str	r4, [sp]
   13fbc:	mvn	r4, #0
   13fc0:	ldr	r2, [sp, #12]
   13fc4:	ldr	r3, [sp, #8]
   13fc8:	bl	1100c <lseek64@plt>
   13fcc:	mov	r2, r0
   13fd0:	mov	r3, r1
   13fd4:	cmp	r3, r5
   13fd8:	cmpeq	r2, r4
   13fdc:	beq	13ffc <close_stdout@@Base+0x2574>
   13fe0:	ldr	r1, [r6]
   13fe4:	mov	r0, r7
   13fe8:	strd	r2, [r6, #80]	; 0x50
   13fec:	bic	r3, r1, #16
   13ff0:	str	r3, [r6]
   13ff4:	add	sp, sp, #20
   13ff8:	pop	{r4, r5, r6, r7, pc}
   13ffc:	mvn	r0, #0
   14000:	b	13ff4 <close_stdout@@Base+0x256c>
   14004:	push	{r4, r5, r6, lr}
   14008:	mov	r4, r0
   1400c:	bl	11030 <__fpending@plt>
   14010:	mov	r6, r0
   14014:	mov	r0, r4
   14018:	ldr	r4, [r4]
   1401c:	bl	13e5c <close_stdout@@Base+0x23d4>
   14020:	and	r4, r4, #32
   14024:	adds	r5, r0, #0
   14028:	movne	r5, #1
   1402c:	cmp	r4, #0
   14030:	bne	14050 <close_stdout@@Base+0x25c8>
   14034:	cmp	r5, #0
   14038:	beq	14048 <close_stdout@@Base+0x25c0>
   1403c:	cmp	r6, #0
   14040:	beq	1406c <close_stdout@@Base+0x25e4>
   14044:	mvn	r4, #0
   14048:	mov	r0, r4
   1404c:	pop	{r4, r5, r6, pc}
   14050:	cmp	r5, #0
   14054:	bne	14044 <close_stdout@@Base+0x25bc>
   14058:	bl	110d8 <__errno_location@plt>
   1405c:	mvn	r4, #0
   14060:	str	r5, [r0]
   14064:	mov	r0, r4
   14068:	pop	{r4, r5, r6, pc}
   1406c:	bl	110d8 <__errno_location@plt>
   14070:	ldr	r4, [r0]
   14074:	subs	r4, r4, #9
   14078:	mvnne	r4, #0
   1407c:	mov	r0, r4
   14080:	pop	{r4, r5, r6, pc}
   14084:	ldr	r3, [pc, #984]	; 14464 <close_stdout@@Base+0x29dc>
   14088:	mov	r0, #14
   1408c:	ldr	r2, [pc, #980]	; 14468 <close_stdout@@Base+0x29e0>
   14090:	add	r3, pc, r3
   14094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14098:	sub	sp, sp, #132	; 0x84
   1409c:	ldr	r6, [r3, r2]
   140a0:	ldr	r3, [r6]
   140a4:	str	r3, [sp, #124]	; 0x7c
   140a8:	bl	11174 <nl_langinfo@plt>
   140ac:	subs	r5, r0, #0
   140b0:	beq	14164 <close_stdout@@Base+0x26dc>
   140b4:	ldr	r3, [pc, #944]	; 1446c <close_stdout@@Base+0x29e4>
   140b8:	ldr	r4, [pc, r3]
   140bc:	cmp	r4, #0
   140c0:	beq	14170 <close_stdout@@Base+0x26e8>
   140c4:	ldrb	r7, [r4]
   140c8:	cmp	r7, #0
   140cc:	bne	14100 <close_stdout@@Base+0x2678>
   140d0:	b	14138 <close_stdout@@Base+0x26b0>
   140d4:	mov	r0, r4
   140d8:	bl	110c0 <strlen@plt>
   140dc:	add	r0, r0, #1
   140e0:	add	r7, r4, r0
   140e4:	mov	r0, r7
   140e8:	bl	110c0 <strlen@plt>
   140ec:	add	r0, r0, #1
   140f0:	add	r4, r7, r0
   140f4:	ldrb	r7, [r7, r0]
   140f8:	cmp	r7, #0
   140fc:	beq	14138 <close_stdout@@Base+0x26b0>
   14100:	mov	r0, r5
   14104:	mov	r1, r4
   14108:	bl	10f64 <strcmp@plt>
   1410c:	cmp	r0, #0
   14110:	beq	14128 <close_stdout@@Base+0x26a0>
   14114:	cmp	r7, #42	; 0x2a
   14118:	bne	140d4 <close_stdout@@Base+0x264c>
   1411c:	ldrb	r3, [r4, #1]
   14120:	cmp	r3, #0
   14124:	bne	140d4 <close_stdout@@Base+0x264c>
   14128:	mov	r0, r4
   1412c:	bl	110c0 <strlen@plt>
   14130:	add	r0, r0, #1
   14134:	add	r5, r4, r0
   14138:	ldrb	r3, [r5]
   1413c:	cmp	r3, #0
   14140:	ldreq	r5, [pc, #808]	; 14470 <close_stdout@@Base+0x29e8>
   14144:	addeq	r5, pc, r5
   14148:	ldr	r2, [sp, #124]	; 0x7c
   1414c:	mov	r0, r5
   14150:	ldr	r3, [r6]
   14154:	cmp	r2, r3
   14158:	bne	14438 <close_stdout@@Base+0x29b0>
   1415c:	add	sp, sp, #132	; 0x84
   14160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14164:	ldr	r5, [pc, #776]	; 14474 <close_stdout@@Base+0x29ec>
   14168:	add	r5, pc, r5
   1416c:	b	140b4 <close_stdout@@Base+0x262c>
   14170:	ldr	r0, [pc, #768]	; 14478 <close_stdout@@Base+0x29f0>
   14174:	add	r0, pc, r0
   14178:	bl	11060 <getenv@plt>
   1417c:	subs	r8, r0, #0
   14180:	beq	14410 <close_stdout@@Base+0x2988>
   14184:	ldrb	r3, [r8]
   14188:	cmp	r3, #0
   1418c:	beq	143a4 <close_stdout@@Base+0x291c>
   14190:	bl	110c0 <strlen@plt>
   14194:	subs	sl, r0, #0
   14198:	subne	r3, sl, #1
   1419c:	bne	143b4 <close_stdout@@Base+0x292c>
   141a0:	mov	r9, #0
   141a4:	mov	fp, r9
   141a8:	add	r9, sl, r9
   141ac:	add	r0, r9, #14
   141b0:	bl	1106c <malloc@plt>
   141b4:	subs	r7, r0, #0
   141b8:	beq	14404 <close_stdout@@Base+0x297c>
   141bc:	mov	r1, r8
   141c0:	mov	r2, sl
   141c4:	bl	10fa0 <memcpy@plt>
   141c8:	cmp	fp, #0
   141cc:	add	ip, r7, r9
   141d0:	movne	r3, #47	; 0x2f
   141d4:	strbne	r3, [r7, sl]
   141d8:	ldr	r3, [pc, #668]	; 1447c <close_stdout@@Base+0x29f4>
   141dc:	add	r3, pc, r3
   141e0:	ldm	r3!, {r0, r1, r2}
   141e4:	ldrh	r3, [r3]
   141e8:	str	r0, [r7, r9]
   141ec:	mov	r0, r7
   141f0:	str	r1, [ip, #4]
   141f4:	mov	r1, #32768	; 0x8000
   141f8:	strh	r3, [ip, #12]
   141fc:	str	r2, [ip, #8]
   14200:	bl	11054 <open64@plt>
   14204:	subs	r8, r0, #0
   14208:	blt	143cc <close_stdout@@Base+0x2944>
   1420c:	ldr	r1, [pc, #620]	; 14480 <close_stdout@@Base+0x29f8>
   14210:	add	r1, pc, r1
   14214:	bl	10f34 <fdopen@plt>
   14218:	subs	fp, r0, #0
   1421c:	beq	14424 <close_stdout@@Base+0x299c>
   14220:	ldr	r0, [pc, #604]	; 14484 <close_stdout@@Base+0x29fc>
   14224:	add	sl, sp, #20
   14228:	add	r9, sp, #72	; 0x48
   1422c:	mov	r8, #0
   14230:	add	r0, pc, r0
   14234:	str	r0, [sp, #12]
   14238:	ldr	r3, [fp, #4]
   1423c:	ldr	r2, [fp, #8]
   14240:	cmp	r3, r2
   14244:	bcs	14330 <close_stdout@@Base+0x28a8>
   14248:	add	r2, r3, #1
   1424c:	str	r2, [fp, #4]
   14250:	ldrb	r0, [r3]
   14254:	cmp	r0, #32
   14258:	beq	14238 <close_stdout@@Base+0x27b0>
   1425c:	sub	r3, r0, #9
   14260:	cmp	r3, #1
   14264:	bls	14238 <close_stdout@@Base+0x27b0>
   14268:	cmp	r0, #35	; 0x23
   1426c:	beq	14344 <close_stdout@@Base+0x28bc>
   14270:	mov	r1, fp
   14274:	bl	110cc <ungetc@plt>
   14278:	mov	r0, fp
   1427c:	ldr	r1, [sp, #12]
   14280:	mov	r2, sl
   14284:	mov	r3, r9
   14288:	bl	11108 <fscanf@plt>
   1428c:	cmp	r0, #1
   14290:	ble	14374 <close_stdout@@Base+0x28ec>
   14294:	mov	r0, sl
   14298:	bl	110c0 <strlen@plt>
   1429c:	str	r0, [sp, #8]
   142a0:	mov	r0, r9
   142a4:	bl	110c0 <strlen@plt>
   142a8:	cmp	r8, #0
   142ac:	mov	r2, r0
   142b0:	bne	143d8 <close_stdout@@Base+0x2950>
   142b4:	ldr	r3, [sp, #8]
   142b8:	str	r2, [sp]
   142bc:	add	r8, r0, r3
   142c0:	add	r0, r8, #3
   142c4:	add	r8, r8, #2
   142c8:	bl	1106c <malloc@plt>
   142cc:	ldr	r2, [sp]
   142d0:	mov	r3, r0
   142d4:	cmp	r3, #0
   142d8:	beq	1443c <close_stdout@@Base+0x29b4>
   142dc:	ldr	r0, [sp, #8]
   142e0:	movw	r1, #65534	; 0xfffe
   142e4:	movt	r1, #65535	; 0xffff
   142e8:	rsb	r2, r2, r8
   142ec:	rsb	r1, r0, r1
   142f0:	stm	sp, {r2, r3}
   142f4:	add	r0, r1, r2
   142f8:	mov	r1, sl
   142fc:	add	r0, r3, r0
   14300:	mov	r4, r3
   14304:	bl	11024 <strcpy@plt>
   14308:	ldr	r2, [sp]
   1430c:	ldr	r3, [sp, #4]
   14310:	mov	r1, r9
   14314:	sub	r0, r2, #1
   14318:	add	r0, r3, r0
   1431c:	bl	11024 <strcpy@plt>
   14320:	ldr	r3, [fp, #4]
   14324:	ldr	r2, [fp, #8]
   14328:	cmp	r3, r2
   1432c:	bcc	14248 <close_stdout@@Base+0x27c0>
   14330:	mov	r0, fp
   14334:	bl	11150 <__uflow@plt>
   14338:	cmn	r0, #1
   1433c:	beq	14374 <close_stdout@@Base+0x28ec>
   14340:	b	14254 <close_stdout@@Base+0x27cc>
   14344:	ldr	r3, [fp, #4]
   14348:	ldr	r2, [fp, #8]
   1434c:	cmp	r3, r2
   14350:	bcs	14458 <close_stdout@@Base+0x29d0>
   14354:	add	r2, r3, #1
   14358:	str	r2, [fp, #4]
   1435c:	ldrb	r0, [r3]
   14360:	cmp	r0, #10
   14364:	cmnne	r0, #1
   14368:	bne	14344 <close_stdout@@Base+0x28bc>
   1436c:	cmn	r0, #1
   14370:	bne	14238 <close_stdout@@Base+0x27b0>
   14374:	mov	r0, fp
   14378:	bl	13e5c <close_stdout@@Base+0x23d4>
   1437c:	cmp	r8, #0
   14380:	beq	143cc <close_stdout@@Base+0x2944>
   14384:	mov	r3, #0
   14388:	strb	r3, [r4, r8]
   1438c:	mov	r0, r7
   14390:	bl	10f88 <free@plt>
   14394:	ldr	r3, [pc, #236]	; 14488 <close_stdout@@Base+0x2a00>
   14398:	add	r3, pc, r3
   1439c:	str	r4, [r3]
   143a0:	b	140c4 <close_stdout@@Base+0x263c>
   143a4:	ldr	r8, [pc, #224]	; 1448c <close_stdout@@Base+0x2a04>
   143a8:	mov	r3, #7
   143ac:	mov	sl, #8
   143b0:	add	r8, pc, r8
   143b4:	ldrb	r3, [r8, r3]
   143b8:	cmp	r3, #47	; 0x2f
   143bc:	movne	r9, #1
   143c0:	movne	fp, r9
   143c4:	bne	141a8 <close_stdout@@Base+0x2720>
   143c8:	b	141a0 <close_stdout@@Base+0x2718>
   143cc:	ldr	r4, [pc, #188]	; 14490 <close_stdout@@Base+0x2a08>
   143d0:	add	r4, pc, r4
   143d4:	b	1438c <close_stdout@@Base+0x2904>
   143d8:	ldr	r0, [sp, #8]
   143dc:	str	r2, [sp]
   143e0:	add	r3, r0, r2
   143e4:	mov	r0, r4
   143e8:	add	r8, r3, r8
   143ec:	add	r1, r8, #3
   143f0:	add	r8, r8, #2
   143f4:	bl	10fdc <realloc@plt>
   143f8:	ldr	r2, [sp]
   143fc:	mov	r3, r0
   14400:	b	142d4 <close_stdout@@Base+0x284c>
   14404:	ldr	r4, [pc, #136]	; 14494 <close_stdout@@Base+0x2a0c>
   14408:	add	r4, pc, r4
   1440c:	b	14394 <close_stdout@@Base+0x290c>
   14410:	ldr	r8, [pc, #128]	; 14498 <close_stdout@@Base+0x2a10>
   14414:	mov	r3, #7
   14418:	mov	sl, #8
   1441c:	add	r8, pc, r8
   14420:	b	143b4 <close_stdout@@Base+0x292c>
   14424:	ldr	r4, [pc, #112]	; 1449c <close_stdout@@Base+0x2a14>
   14428:	mov	r0, r8
   1442c:	add	r4, pc, r4
   14430:	bl	111bc <close@plt>
   14434:	b	1438c <close_stdout@@Base+0x2904>
   14438:	bl	10fd0 <__stack_chk_fail@plt>
   1443c:	mov	r0, r4
   14440:	ldr	r4, [pc, #88]	; 144a0 <close_stdout@@Base+0x2a18>
   14444:	bl	10f88 <free@plt>
   14448:	mov	r0, fp
   1444c:	add	r4, pc, r4
   14450:	bl	13e5c <close_stdout@@Base+0x23d4>
   14454:	b	1438c <close_stdout@@Base+0x2904>
   14458:	mov	r0, fp
   1445c:	bl	11150 <__uflow@plt>
   14460:	b	14360 <close_stdout@@Base+0x28d8>
   14464:	andeq	r1, r1, r8, ror #30
   14468:	andeq	r0, r0, ip, ror #1
   1446c:	strdeq	r2, [r1], -r8
   14470:	andeq	r1, r0, r0, ror #19
   14474:	andeq	r1, r0, ip, lsr #10
   14478:			; <UNDEFINED> instruction: 0x000019b8
   1447c:	andeq	r1, r0, r0, ror #18
   14480:	andeq	r1, r0, r8, lsl #9
   14484:	andeq	r1, r0, ip, lsl r9
   14488:	andeq	r1, r1, r8, lsl pc
   1448c:	andeq	r1, r0, r8, ror #14
   14490:	andeq	r1, r0, r4, asr #5
   14494:	andeq	r1, r0, ip, lsl #5
   14498:	strdeq	r1, [r0], -ip
   1449c:	andeq	r1, r0, r8, ror #4
   144a0:	andeq	r1, r0, r8, asr #4
   144a4:	subs	r2, r1, #1
   144a8:	bxeq	lr
   144ac:	bcc	14684 <close_stdout@@Base+0x2bfc>
   144b0:	cmp	r0, r1
   144b4:	bls	14668 <close_stdout@@Base+0x2be0>
   144b8:	tst	r1, r2
   144bc:	beq	14674 <close_stdout@@Base+0x2bec>
   144c0:	clz	r3, r0
   144c4:	clz	r2, r1
   144c8:	sub	r3, r2, r3
   144cc:	rsbs	r3, r3, #31
   144d0:	addne	r3, r3, r3, lsl #1
   144d4:	mov	r2, #0
   144d8:	addne	pc, pc, r3, lsl #2
   144dc:	nop	{0}
   144e0:	cmp	r0, r1, lsl #31
   144e4:	adc	r2, r2, r2
   144e8:	subcs	r0, r0, r1, lsl #31
   144ec:	cmp	r0, r1, lsl #30
   144f0:	adc	r2, r2, r2
   144f4:	subcs	r0, r0, r1, lsl #30
   144f8:	cmp	r0, r1, lsl #29
   144fc:	adc	r2, r2, r2
   14500:	subcs	r0, r0, r1, lsl #29
   14504:	cmp	r0, r1, lsl #28
   14508:	adc	r2, r2, r2
   1450c:	subcs	r0, r0, r1, lsl #28
   14510:	cmp	r0, r1, lsl #27
   14514:	adc	r2, r2, r2
   14518:	subcs	r0, r0, r1, lsl #27
   1451c:	cmp	r0, r1, lsl #26
   14520:	adc	r2, r2, r2
   14524:	subcs	r0, r0, r1, lsl #26
   14528:	cmp	r0, r1, lsl #25
   1452c:	adc	r2, r2, r2
   14530:	subcs	r0, r0, r1, lsl #25
   14534:	cmp	r0, r1, lsl #24
   14538:	adc	r2, r2, r2
   1453c:	subcs	r0, r0, r1, lsl #24
   14540:	cmp	r0, r1, lsl #23
   14544:	adc	r2, r2, r2
   14548:	subcs	r0, r0, r1, lsl #23
   1454c:	cmp	r0, r1, lsl #22
   14550:	adc	r2, r2, r2
   14554:	subcs	r0, r0, r1, lsl #22
   14558:	cmp	r0, r1, lsl #21
   1455c:	adc	r2, r2, r2
   14560:	subcs	r0, r0, r1, lsl #21
   14564:	cmp	r0, r1, lsl #20
   14568:	adc	r2, r2, r2
   1456c:	subcs	r0, r0, r1, lsl #20
   14570:	cmp	r0, r1, lsl #19
   14574:	adc	r2, r2, r2
   14578:	subcs	r0, r0, r1, lsl #19
   1457c:	cmp	r0, r1, lsl #18
   14580:	adc	r2, r2, r2
   14584:	subcs	r0, r0, r1, lsl #18
   14588:	cmp	r0, r1, lsl #17
   1458c:	adc	r2, r2, r2
   14590:	subcs	r0, r0, r1, lsl #17
   14594:	cmp	r0, r1, lsl #16
   14598:	adc	r2, r2, r2
   1459c:	subcs	r0, r0, r1, lsl #16
   145a0:	cmp	r0, r1, lsl #15
   145a4:	adc	r2, r2, r2
   145a8:	subcs	r0, r0, r1, lsl #15
   145ac:	cmp	r0, r1, lsl #14
   145b0:	adc	r2, r2, r2
   145b4:	subcs	r0, r0, r1, lsl #14
   145b8:	cmp	r0, r1, lsl #13
   145bc:	adc	r2, r2, r2
   145c0:	subcs	r0, r0, r1, lsl #13
   145c4:	cmp	r0, r1, lsl #12
   145c8:	adc	r2, r2, r2
   145cc:	subcs	r0, r0, r1, lsl #12
   145d0:	cmp	r0, r1, lsl #11
   145d4:	adc	r2, r2, r2
   145d8:	subcs	r0, r0, r1, lsl #11
   145dc:	cmp	r0, r1, lsl #10
   145e0:	adc	r2, r2, r2
   145e4:	subcs	r0, r0, r1, lsl #10
   145e8:	cmp	r0, r1, lsl #9
   145ec:	adc	r2, r2, r2
   145f0:	subcs	r0, r0, r1, lsl #9
   145f4:	cmp	r0, r1, lsl #8
   145f8:	adc	r2, r2, r2
   145fc:	subcs	r0, r0, r1, lsl #8
   14600:	cmp	r0, r1, lsl #7
   14604:	adc	r2, r2, r2
   14608:	subcs	r0, r0, r1, lsl #7
   1460c:	cmp	r0, r1, lsl #6
   14610:	adc	r2, r2, r2
   14614:	subcs	r0, r0, r1, lsl #6
   14618:	cmp	r0, r1, lsl #5
   1461c:	adc	r2, r2, r2
   14620:	subcs	r0, r0, r1, lsl #5
   14624:	cmp	r0, r1, lsl #4
   14628:	adc	r2, r2, r2
   1462c:	subcs	r0, r0, r1, lsl #4
   14630:	cmp	r0, r1, lsl #3
   14634:	adc	r2, r2, r2
   14638:	subcs	r0, r0, r1, lsl #3
   1463c:	cmp	r0, r1, lsl #2
   14640:	adc	r2, r2, r2
   14644:	subcs	r0, r0, r1, lsl #2
   14648:	cmp	r0, r1, lsl #1
   1464c:	adc	r2, r2, r2
   14650:	subcs	r0, r0, r1, lsl #1
   14654:	cmp	r0, r1
   14658:	adc	r2, r2, r2
   1465c:	subcs	r0, r0, r1
   14660:	mov	r0, r2
   14664:	bx	lr
   14668:	moveq	r0, #1
   1466c:	movne	r0, #0
   14670:	bx	lr
   14674:	clz	r2, r1
   14678:	rsb	r2, r2, #31
   1467c:	lsr	r0, r0, r2
   14680:	bx	lr
   14684:	cmp	r0, #0
   14688:	mvnne	r0, #0
   1468c:	b	146ec <close_stdout@@Base+0x2c64>
   14690:	cmp	r1, #0
   14694:	beq	14684 <close_stdout@@Base+0x2bfc>
   14698:	push	{r0, r1, lr}
   1469c:	bl	144a4 <close_stdout@@Base+0x2a1c>
   146a0:	pop	{r1, r2, lr}
   146a4:	mul	r3, r2, r0
   146a8:	sub	r1, r1, r3
   146ac:	bx	lr
   146b0:	cmp	r3, #0
   146b4:	cmpeq	r2, #0
   146b8:	bne	146d0 <close_stdout@@Base+0x2c48>
   146bc:	cmp	r1, #0
   146c0:	cmpeq	r0, #0
   146c4:	mvnne	r1, #0
   146c8:	mvnne	r0, #0
   146cc:	b	146ec <close_stdout@@Base+0x2c64>
   146d0:	sub	sp, sp, #8
   146d4:	push	{sp, lr}
   146d8:	bl	14738 <close_stdout@@Base+0x2cb0>
   146dc:	ldr	lr, [sp, #4]
   146e0:	add	sp, sp, #8
   146e4:	pop	{r2, r3}
   146e8:	bx	lr
   146ec:	push	{r1, lr}
   146f0:	mov	r0, #8
   146f4:	bl	10f58 <raise@plt>
   146f8:	pop	{r1, pc}
   146fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14700:	mov	r8, r2
   14704:	mov	r6, r0
   14708:	mov	r7, r1
   1470c:	mov	sl, r3
   14710:	ldr	r9, [sp, #32]
   14714:	bl	14774 <close_stdout@@Base+0x2cec>
   14718:	umull	r4, r5, r8, r0
   1471c:	mul	r8, r8, r1
   14720:	mla	r2, r0, sl, r8
   14724:	add	r5, r2, r5
   14728:	subs	r4, r6, r4
   1472c:	sbc	r5, r7, r5
   14730:	strd	r4, [r9]
   14734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14738:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1473c:	mov	r8, r2
   14740:	mov	r6, r0
   14744:	mov	r7, r1
   14748:	mov	r5, r3
   1474c:	ldr	r9, [sp, #32]
   14750:	bl	14c00 <close_stdout@@Base+0x3178>
   14754:	mul	r3, r0, r5
   14758:	umull	r4, r5, r0, r8
   1475c:	mla	r8, r8, r1, r3
   14760:	add	r5, r8, r5
   14764:	subs	r4, r6, r4
   14768:	sbc	r5, r7, r5
   1476c:	strd	r4, [r9]
   14770:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14778:	rsbs	r4, r0, #0
   1477c:	rsc	r5, r1, #0
   14780:	cmp	r1, #0
   14784:	mvn	r6, #0
   14788:	sub	sp, sp, #12
   1478c:	movge	r4, r0
   14790:	movge	r5, r1
   14794:	movge	r6, #0
   14798:	cmp	r3, #0
   1479c:	blt	149d4 <close_stdout@@Base+0x2f4c>
   147a0:	cmp	r3, #0
   147a4:	mov	sl, r4
   147a8:	mov	ip, r5
   147ac:	mov	r0, r2
   147b0:	mov	r1, r3
   147b4:	mov	r8, r2
   147b8:	mov	r7, r4
   147bc:	mov	r9, r5
   147c0:	bne	148b8 <close_stdout@@Base+0x2e30>
   147c4:	cmp	r2, r5
   147c8:	bls	148f4 <close_stdout@@Base+0x2e6c>
   147cc:	clz	r3, r2
   147d0:	cmp	r3, #0
   147d4:	rsbne	r2, r3, #32
   147d8:	lslne	r8, r0, r3
   147dc:	lsrne	r2, r4, r2
   147e0:	lslne	r7, r4, r3
   147e4:	orrne	r9, r2, r5, lsl r3
   147e8:	lsr	r4, r8, #16
   147ec:	uxth	sl, r8
   147f0:	mov	r1, r4
   147f4:	mov	r0, r9
   147f8:	bl	144a4 <close_stdout@@Base+0x2a1c>
   147fc:	mov	r1, r4
   14800:	mov	fp, r0
   14804:	mov	r0, r9
   14808:	bl	14690 <close_stdout@@Base+0x2c08>
   1480c:	mul	r0, sl, fp
   14810:	lsr	r2, r7, #16
   14814:	orr	r1, r2, r1, lsl #16
   14818:	cmp	r0, r1
   1481c:	bls	14840 <close_stdout@@Base+0x2db8>
   14820:	adds	r1, r1, r8
   14824:	sub	r3, fp, #1
   14828:	bcs	1483c <close_stdout@@Base+0x2db4>
   1482c:	cmp	r0, r1
   14830:	subhi	fp, fp, #2
   14834:	addhi	r1, r1, r8
   14838:	bhi	14840 <close_stdout@@Base+0x2db8>
   1483c:	mov	fp, r3
   14840:	rsb	r9, r0, r1
   14844:	mov	r1, r4
   14848:	uxth	r7, r7
   1484c:	mov	r0, r9
   14850:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14854:	mov	r1, r4
   14858:	mov	r5, r0
   1485c:	mov	r0, r9
   14860:	bl	14690 <close_stdout@@Base+0x2c08>
   14864:	mul	sl, sl, r5
   14868:	orr	r1, r7, r1, lsl #16
   1486c:	cmp	sl, r1
   14870:	bls	14890 <close_stdout@@Base+0x2e08>
   14874:	adds	r8, r1, r8
   14878:	sub	r3, r5, #1
   1487c:	bcs	1488c <close_stdout@@Base+0x2e04>
   14880:	cmp	sl, r8
   14884:	subhi	r5, r5, #2
   14888:	bhi	14890 <close_stdout@@Base+0x2e08>
   1488c:	mov	r5, r3
   14890:	orr	r3, r5, fp, lsl #16
   14894:	mov	r4, #0
   14898:	cmp	r6, #0
   1489c:	mov	r0, r3
   148a0:	mov	r1, r4
   148a4:	beq	148b0 <close_stdout@@Base+0x2e28>
   148a8:	rsbs	r0, r0, #0
   148ac:	rsc	r1, r1, #0
   148b0:	add	sp, sp, #12
   148b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148b8:	cmp	r3, r5
   148bc:	movhi	r4, #0
   148c0:	movhi	r3, r4
   148c4:	bhi	14898 <close_stdout@@Base+0x2e10>
   148c8:	clz	r5, r1
   148cc:	cmp	r5, #0
   148d0:	bne	14ac0 <close_stdout@@Base+0x3038>
   148d4:	cmp	r1, ip
   148d8:	cmpcs	r2, sl
   148dc:	movhi	r4, #0
   148e0:	movls	r4, #1
   148e4:	movls	r3, #1
   148e8:	movls	r4, r5
   148ec:	movhi	r3, r4
   148f0:	b	14898 <close_stdout@@Base+0x2e10>
   148f4:	cmp	r2, #0
   148f8:	bne	1490c <close_stdout@@Base+0x2e84>
   148fc:	mov	r1, r2
   14900:	mov	r0, #1
   14904:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14908:	mov	r8, r0
   1490c:	clz	r3, r8
   14910:	cmp	r3, #0
   14914:	bne	149e4 <close_stdout@@Base+0x2f5c>
   14918:	rsb	r9, r8, r9
   1491c:	lsr	r5, r8, #16
   14920:	uxth	sl, r8
   14924:	mov	r4, #1
   14928:	mov	r1, r5
   1492c:	mov	r0, r9
   14930:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14934:	mov	r1, r5
   14938:	mov	fp, r0
   1493c:	mov	r0, r9
   14940:	bl	14690 <close_stdout@@Base+0x2c08>
   14944:	mul	r0, sl, fp
   14948:	lsr	r2, r7, #16
   1494c:	orr	r1, r2, r1, lsl #16
   14950:	cmp	r0, r1
   14954:	bls	14974 <close_stdout@@Base+0x2eec>
   14958:	adds	r1, r1, r8
   1495c:	sub	r3, fp, #1
   14960:	bcs	14be0 <close_stdout@@Base+0x3158>
   14964:	cmp	r0, r1
   14968:	subhi	fp, fp, #2
   1496c:	addhi	r1, r1, r8
   14970:	bls	14be0 <close_stdout@@Base+0x3158>
   14974:	rsb	r2, r0, r1
   14978:	mov	r1, r5
   1497c:	str	r2, [sp]
   14980:	uxth	r7, r7
   14984:	mov	r0, r2
   14988:	bl	144a4 <close_stdout@@Base+0x2a1c>
   1498c:	ldr	r2, [sp]
   14990:	mov	r1, r5
   14994:	mov	r9, r0
   14998:	mov	r0, r2
   1499c:	bl	14690 <close_stdout@@Base+0x2c08>
   149a0:	mul	sl, sl, r9
   149a4:	orr	r1, r7, r1, lsl #16
   149a8:	cmp	sl, r1
   149ac:	bls	149cc <close_stdout@@Base+0x2f44>
   149b0:	adds	r8, r1, r8
   149b4:	sub	r3, r9, #1
   149b8:	bcs	149c8 <close_stdout@@Base+0x2f40>
   149bc:	cmp	sl, r8
   149c0:	subhi	r9, r9, #2
   149c4:	bhi	149cc <close_stdout@@Base+0x2f44>
   149c8:	mov	r9, r3
   149cc:	orr	r3, r9, fp, lsl #16
   149d0:	b	14898 <close_stdout@@Base+0x2e10>
   149d4:	mvn	r6, r6
   149d8:	rsbs	r2, r2, #0
   149dc:	rsc	r3, r3, #0
   149e0:	b	147a0 <close_stdout@@Base+0x2d18>
   149e4:	lsl	r8, r8, r3
   149e8:	rsb	fp, r3, #32
   149ec:	lsr	r4, r9, fp
   149f0:	lsr	fp, r7, fp
   149f4:	lsr	r5, r8, #16
   149f8:	orr	fp, fp, r9, lsl r3
   149fc:	mov	r0, r4
   14a00:	lsl	r7, r7, r3
   14a04:	mov	r1, r5
   14a08:	uxth	sl, r8
   14a0c:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14a10:	mov	r1, r5
   14a14:	mov	r3, r0
   14a18:	mov	r0, r4
   14a1c:	str	r3, [sp]
   14a20:	bl	14690 <close_stdout@@Base+0x2c08>
   14a24:	ldr	r3, [sp]
   14a28:	lsr	r2, fp, #16
   14a2c:	mul	r0, sl, r3
   14a30:	orr	r1, r2, r1, lsl #16
   14a34:	cmp	r0, r1
   14a38:	bls	14a58 <close_stdout@@Base+0x2fd0>
   14a3c:	adds	r1, r1, r8
   14a40:	sub	r2, r3, #1
   14a44:	bcs	14bf8 <close_stdout@@Base+0x3170>
   14a48:	cmp	r0, r1
   14a4c:	subhi	r3, r3, #2
   14a50:	addhi	r1, r1, r8
   14a54:	bls	14bf8 <close_stdout@@Base+0x3170>
   14a58:	rsb	r9, r0, r1
   14a5c:	mov	r1, r5
   14a60:	str	r3, [sp]
   14a64:	uxth	fp, fp
   14a68:	mov	r0, r9
   14a6c:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14a70:	mov	r1, r5
   14a74:	mov	r4, r0
   14a78:	mov	r0, r9
   14a7c:	bl	14690 <close_stdout@@Base+0x2c08>
   14a80:	mul	r9, sl, r4
   14a84:	ldr	r3, [sp]
   14a88:	orr	r1, fp, r1, lsl #16
   14a8c:	cmp	r9, r1
   14a90:	bls	14ab4 <close_stdout@@Base+0x302c>
   14a94:	adds	r1, r1, r8
   14a98:	sub	r2, r4, #1
   14a9c:	bcs	14ab0 <close_stdout@@Base+0x3028>
   14aa0:	cmp	r9, r1
   14aa4:	subhi	r4, r4, #2
   14aa8:	addhi	r1, r1, r8
   14aac:	bhi	14ab4 <close_stdout@@Base+0x302c>
   14ab0:	mov	r4, r2
   14ab4:	rsb	r9, r9, r1
   14ab8:	orr	r4, r4, r3, lsl #16
   14abc:	b	14928 <close_stdout@@Base+0x2ea0>
   14ac0:	rsb	sl, r5, #32
   14ac4:	lsl	r3, r2, r5
   14ac8:	lsr	r0, r2, sl
   14acc:	lsr	r2, ip, sl
   14ad0:	orr	r4, r0, r1, lsl r5
   14ad4:	lsr	sl, r7, sl
   14ad8:	mov	r0, r2
   14adc:	orr	sl, sl, ip, lsl r5
   14ae0:	lsr	r9, r4, #16
   14ae4:	str	r3, [sp, #4]
   14ae8:	str	r2, [sp]
   14aec:	uxth	fp, r4
   14af0:	mov	r1, r9
   14af4:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14af8:	ldr	r2, [sp]
   14afc:	mov	r1, r9
   14b00:	mov	r8, r0
   14b04:	mov	r0, r2
   14b08:	bl	14690 <close_stdout@@Base+0x2c08>
   14b0c:	mul	r0, fp, r8
   14b10:	lsr	r2, sl, #16
   14b14:	orr	r1, r2, r1, lsl #16
   14b18:	cmp	r0, r1
   14b1c:	bls	14b3c <close_stdout@@Base+0x30b4>
   14b20:	adds	r1, r1, r4
   14b24:	sub	r2, r8, #1
   14b28:	bcs	14bf0 <close_stdout@@Base+0x3168>
   14b2c:	cmp	r0, r1
   14b30:	subhi	r8, r8, #2
   14b34:	addhi	r1, r1, r4
   14b38:	bls	14bf0 <close_stdout@@Base+0x3168>
   14b3c:	rsb	ip, r0, r1
   14b40:	mov	r1, r9
   14b44:	str	ip, [sp]
   14b48:	mov	r0, ip
   14b4c:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14b50:	ldr	ip, [sp]
   14b54:	mov	r1, r9
   14b58:	mov	r2, r0
   14b5c:	mov	r0, ip
   14b60:	str	r2, [sp]
   14b64:	bl	14690 <close_stdout@@Base+0x2c08>
   14b68:	ldr	r2, [sp]
   14b6c:	uxth	ip, sl
   14b70:	mul	fp, fp, r2
   14b74:	orr	ip, ip, r1, lsl #16
   14b78:	cmp	fp, ip
   14b7c:	bls	14b9c <close_stdout@@Base+0x3114>
   14b80:	adds	ip, ip, r4
   14b84:	sub	r1, r2, #1
   14b88:	bcs	14be8 <close_stdout@@Base+0x3160>
   14b8c:	cmp	fp, ip
   14b90:	subhi	r2, r2, #2
   14b94:	addhi	ip, ip, r4
   14b98:	bls	14be8 <close_stdout@@Base+0x3160>
   14b9c:	ldr	r0, [sp, #4]
   14ba0:	orr	r1, r2, r8, lsl #16
   14ba4:	rsb	fp, fp, ip
   14ba8:	umull	r2, r3, r1, r0
   14bac:	cmp	fp, r3
   14bb0:	bcc	14bd4 <close_stdout@@Base+0x314c>
   14bb4:	movne	r4, #0
   14bb8:	moveq	r4, #1
   14bbc:	cmp	r2, r7, lsl r5
   14bc0:	movls	r4, #0
   14bc4:	andhi	r4, r4, #1
   14bc8:	cmp	r4, #0
   14bcc:	moveq	r3, r1
   14bd0:	beq	14898 <close_stdout@@Base+0x2e10>
   14bd4:	sub	r3, r1, #1
   14bd8:	mov	r4, #0
   14bdc:	b	14898 <close_stdout@@Base+0x2e10>
   14be0:	mov	fp, r3
   14be4:	b	14974 <close_stdout@@Base+0x2eec>
   14be8:	mov	r2, r1
   14bec:	b	14b9c <close_stdout@@Base+0x3114>
   14bf0:	mov	r8, r2
   14bf4:	b	14b3c <close_stdout@@Base+0x30b4>
   14bf8:	mov	r3, r2
   14bfc:	b	14a58 <close_stdout@@Base+0x2fd0>
   14c00:	cmp	r3, #0
   14c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c08:	mov	r6, r0
   14c0c:	sub	sp, sp, #12
   14c10:	mov	r5, r1
   14c14:	mov	r7, r0
   14c18:	mov	r4, r2
   14c1c:	mov	r8, r1
   14c20:	bne	14d00 <close_stdout@@Base+0x3278>
   14c24:	cmp	r2, r1
   14c28:	bls	14d3c <close_stdout@@Base+0x32b4>
   14c2c:	clz	r3, r2
   14c30:	cmp	r3, #0
   14c34:	rsbne	r8, r3, #32
   14c38:	lslne	r4, r2, r3
   14c3c:	lsrne	r8, r0, r8
   14c40:	lslne	r7, r0, r3
   14c44:	orrne	r8, r8, r1, lsl r3
   14c48:	lsr	r5, r4, #16
   14c4c:	uxth	sl, r4
   14c50:	mov	r1, r5
   14c54:	mov	r0, r8
   14c58:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14c5c:	mov	r1, r5
   14c60:	mov	r9, r0
   14c64:	mov	r0, r8
   14c68:	bl	14690 <close_stdout@@Base+0x2c08>
   14c6c:	mul	r0, sl, r9
   14c70:	lsr	r3, r7, #16
   14c74:	orr	r1, r3, r1, lsl #16
   14c78:	cmp	r0, r1
   14c7c:	bls	14ca0 <close_stdout@@Base+0x3218>
   14c80:	adds	r1, r1, r4
   14c84:	sub	r2, r9, #1
   14c88:	bcs	14c9c <close_stdout@@Base+0x3214>
   14c8c:	cmp	r0, r1
   14c90:	subhi	r9, r9, #2
   14c94:	addhi	r1, r1, r4
   14c98:	bhi	14ca0 <close_stdout@@Base+0x3218>
   14c9c:	mov	r9, r2
   14ca0:	rsb	r8, r0, r1
   14ca4:	mov	r1, r5
   14ca8:	uxth	r7, r7
   14cac:	mov	r0, r8
   14cb0:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14cb4:	mov	r1, r5
   14cb8:	mov	r6, r0
   14cbc:	mov	r0, r8
   14cc0:	bl	14690 <close_stdout@@Base+0x2c08>
   14cc4:	mul	sl, sl, r6
   14cc8:	orr	r1, r7, r1, lsl #16
   14ccc:	cmp	sl, r1
   14cd0:	bls	14cec <close_stdout@@Base+0x3264>
   14cd4:	adds	r4, r1, r4
   14cd8:	sub	r3, r6, #1
   14cdc:	bcs	14fe8 <close_stdout@@Base+0x3560>
   14ce0:	cmp	sl, r4
   14ce4:	subhi	r6, r6, #2
   14ce8:	bls	14fe8 <close_stdout@@Base+0x3560>
   14cec:	orr	r0, r6, r9, lsl #16
   14cf0:	mov	r6, #0
   14cf4:	mov	r1, r6
   14cf8:	add	sp, sp, #12
   14cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d00:	cmp	r3, r1
   14d04:	movhi	r6, #0
   14d08:	movhi	r0, r6
   14d0c:	bhi	14cf4 <close_stdout@@Base+0x326c>
   14d10:	clz	r7, r3
   14d14:	cmp	r7, #0
   14d18:	bne	14e18 <close_stdout@@Base+0x3390>
   14d1c:	cmp	r3, r1
   14d20:	cmpcs	r2, r6
   14d24:	movhi	r6, #0
   14d28:	movls	r6, #1
   14d2c:	movls	r0, #1
   14d30:	movls	r6, r7
   14d34:	movhi	r0, r6
   14d38:	b	14cf4 <close_stdout@@Base+0x326c>
   14d3c:	cmp	r2, #0
   14d40:	bne	14d54 <close_stdout@@Base+0x32cc>
   14d44:	mov	r1, r2
   14d48:	mov	r0, #1
   14d4c:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14d50:	mov	r4, r0
   14d54:	clz	r3, r4
   14d58:	cmp	r3, #0
   14d5c:	bne	14f14 <close_stdout@@Base+0x348c>
   14d60:	rsb	r5, r4, r5
   14d64:	lsr	r8, r4, #16
   14d68:	uxth	sl, r4
   14d6c:	mov	r6, #1
   14d70:	mov	r1, r8
   14d74:	mov	r0, r5
   14d78:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14d7c:	mov	r1, r8
   14d80:	mov	r9, r0
   14d84:	mov	r0, r5
   14d88:	bl	14690 <close_stdout@@Base+0x2c08>
   14d8c:	mul	r0, sl, r9
   14d90:	lsr	r3, r7, #16
   14d94:	orr	r1, r3, r1, lsl #16
   14d98:	cmp	r0, r1
   14d9c:	bls	14dbc <close_stdout@@Base+0x3334>
   14da0:	adds	r1, r1, r4
   14da4:	sub	r2, r9, #1
   14da8:	bcs	14ff0 <close_stdout@@Base+0x3568>
   14dac:	cmp	r0, r1
   14db0:	subhi	r9, r9, #2
   14db4:	addhi	r1, r1, r4
   14db8:	bls	14ff0 <close_stdout@@Base+0x3568>
   14dbc:	rsb	fp, r0, r1
   14dc0:	mov	r1, r8
   14dc4:	uxth	r7, r7
   14dc8:	mov	r0, fp
   14dcc:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14dd0:	mov	r1, r8
   14dd4:	mov	r5, r0
   14dd8:	mov	r0, fp
   14ddc:	bl	14690 <close_stdout@@Base+0x2c08>
   14de0:	mul	sl, sl, r5
   14de4:	orr	r1, r7, r1, lsl #16
   14de8:	cmp	sl, r1
   14dec:	bls	14e08 <close_stdout@@Base+0x3380>
   14df0:	adds	r4, r1, r4
   14df4:	sub	r3, r5, #1
   14df8:	bcs	14ff8 <close_stdout@@Base+0x3570>
   14dfc:	cmp	sl, r4
   14e00:	subhi	r5, r5, #2
   14e04:	bls	14ff8 <close_stdout@@Base+0x3570>
   14e08:	orr	r0, r5, r9, lsl #16
   14e0c:	mov	r1, r6
   14e10:	add	sp, sp, #12
   14e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e18:	rsb	r1, r7, #32
   14e1c:	lsl	r0, r2, r7
   14e20:	lsr	r2, r2, r1
   14e24:	lsr	fp, r5, r1
   14e28:	orr	r8, r2, r3, lsl r7
   14e2c:	lsr	r1, r6, r1
   14e30:	str	r0, [sp, #4]
   14e34:	orr	r5, r1, r5, lsl r7
   14e38:	lsr	r9, r8, #16
   14e3c:	mov	r0, fp
   14e40:	uxth	sl, r8
   14e44:	mov	r1, r9
   14e48:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14e4c:	mov	r1, r9
   14e50:	mov	r4, r0
   14e54:	mov	r0, fp
   14e58:	bl	14690 <close_stdout@@Base+0x2c08>
   14e5c:	mul	r0, sl, r4
   14e60:	lsr	ip, r5, #16
   14e64:	orr	r1, ip, r1, lsl #16
   14e68:	cmp	r0, r1
   14e6c:	bls	14e80 <close_stdout@@Base+0x33f8>
   14e70:	adds	r1, r1, r8
   14e74:	sub	r2, r4, #1
   14e78:	bcc	15014 <close_stdout@@Base+0x358c>
   14e7c:	mov	r4, r2
   14e80:	rsb	ip, r0, r1
   14e84:	mov	r1, r9
   14e88:	str	ip, [sp]
   14e8c:	uxth	r5, r5
   14e90:	mov	r0, ip
   14e94:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14e98:	ldr	ip, [sp]
   14e9c:	mov	r1, r9
   14ea0:	mov	fp, r0
   14ea4:	mov	r0, ip
   14ea8:	bl	14690 <close_stdout@@Base+0x2c08>
   14eac:	mul	sl, sl, fp
   14eb0:	orr	r1, r5, r1, lsl #16
   14eb4:	cmp	sl, r1
   14eb8:	bls	14ecc <close_stdout@@Base+0x3444>
   14ebc:	adds	r1, r1, r8
   14ec0:	sub	r2, fp, #1
   14ec4:	bcc	15000 <close_stdout@@Base+0x3578>
   14ec8:	mov	fp, r2
   14ecc:	ldr	r3, [sp, #4]
   14ed0:	orr	r0, fp, r4, lsl #16
   14ed4:	rsb	sl, sl, r1
   14ed8:	umull	r4, r5, r0, r3
   14edc:	cmp	sl, r5
   14ee0:	bcc	14f00 <close_stdout@@Base+0x3478>
   14ee4:	movne	r3, #0
   14ee8:	moveq	r3, #1
   14eec:	cmp	r4, r6, lsl r7
   14ef0:	movls	r6, #0
   14ef4:	andhi	r6, r3, #1
   14ef8:	cmp	r6, #0
   14efc:	beq	14cf4 <close_stdout@@Base+0x326c>
   14f00:	mov	r6, #0
   14f04:	sub	r0, r0, #1
   14f08:	mov	r1, r6
   14f0c:	add	sp, sp, #12
   14f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f14:	lsl	r4, r4, r3
   14f18:	rsb	r9, r3, #32
   14f1c:	lsr	r2, r5, r9
   14f20:	lsr	r9, r6, r9
   14f24:	lsr	r8, r4, #16
   14f28:	orr	r9, r9, r5, lsl r3
   14f2c:	mov	r0, r2
   14f30:	lsl	r7, r6, r3
   14f34:	mov	r1, r8
   14f38:	str	r2, [sp]
   14f3c:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14f40:	ldr	r2, [sp]
   14f44:	mov	r1, r8
   14f48:	uxth	sl, r4
   14f4c:	mov	fp, r0
   14f50:	mov	r0, r2
   14f54:	bl	14690 <close_stdout@@Base+0x2c08>
   14f58:	mul	r0, sl, fp
   14f5c:	lsr	r3, r9, #16
   14f60:	orr	r1, r3, r1, lsl #16
   14f64:	cmp	r0, r1
   14f68:	bls	14f88 <close_stdout@@Base+0x3500>
   14f6c:	adds	r1, r1, r4
   14f70:	sub	r3, fp, #1
   14f74:	bcs	15028 <close_stdout@@Base+0x35a0>
   14f78:	cmp	r0, r1
   14f7c:	subhi	fp, fp, #2
   14f80:	addhi	r1, r1, r4
   14f84:	bls	15028 <close_stdout@@Base+0x35a0>
   14f88:	rsb	r5, r0, r1
   14f8c:	mov	r1, r8
   14f90:	uxth	r9, r9
   14f94:	mov	r0, r5
   14f98:	bl	144a4 <close_stdout@@Base+0x2a1c>
   14f9c:	mov	r1, r8
   14fa0:	mov	r6, r0
   14fa4:	mov	r0, r5
   14fa8:	bl	14690 <close_stdout@@Base+0x2c08>
   14fac:	mul	r5, sl, r6
   14fb0:	orr	r1, r9, r1, lsl #16
   14fb4:	cmp	r5, r1
   14fb8:	bls	14fdc <close_stdout@@Base+0x3554>
   14fbc:	adds	r1, r1, r4
   14fc0:	sub	r3, r6, #1
   14fc4:	bcs	14fd8 <close_stdout@@Base+0x3550>
   14fc8:	cmp	r5, r1
   14fcc:	subhi	r6, r6, #2
   14fd0:	addhi	r1, r1, r4
   14fd4:	bhi	14fdc <close_stdout@@Base+0x3554>
   14fd8:	mov	r6, r3
   14fdc:	rsb	r5, r5, r1
   14fe0:	orr	r6, r6, fp, lsl #16
   14fe4:	b	14d70 <close_stdout@@Base+0x32e8>
   14fe8:	mov	r6, r3
   14fec:	b	14cec <close_stdout@@Base+0x3264>
   14ff0:	mov	r9, r2
   14ff4:	b	14dbc <close_stdout@@Base+0x3334>
   14ff8:	mov	r5, r3
   14ffc:	b	14e08 <close_stdout@@Base+0x3380>
   15000:	cmp	sl, r1
   15004:	subhi	fp, fp, #2
   15008:	addhi	r1, r1, r8
   1500c:	bhi	14ecc <close_stdout@@Base+0x3444>
   15010:	b	14ec8 <close_stdout@@Base+0x3440>
   15014:	cmp	r0, r1
   15018:	subhi	r4, r4, #2
   1501c:	addhi	r1, r1, r8
   15020:	bhi	14e80 <close_stdout@@Base+0x33f8>
   15024:	b	14e7c <close_stdout@@Base+0x33f4>
   15028:	mov	fp, r3
   1502c:	b	14f88 <close_stdout@@Base+0x3500>
   15030:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15034:	mov	r7, r0
   15038:	ldr	r6, [pc, #76]	; 1508c <close_stdout@@Base+0x3604>
   1503c:	mov	r8, r1
   15040:	ldr	r5, [pc, #72]	; 15090 <close_stdout@@Base+0x3608>
   15044:	mov	r9, r2
   15048:	add	r6, pc, r6
   1504c:	bl	10f14 <fdopen@plt-0x20>
   15050:	add	r5, pc, r5
   15054:	rsb	r6, r5, r6
   15058:	asrs	r6, r6, #2
   1505c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   15060:	sub	r5, r5, #4
   15064:	mov	r4, #0
   15068:	add	r4, r4, #1
   1506c:	ldr	r3, [r5, #4]!
   15070:	mov	r0, r7
   15074:	mov	r1, r8
   15078:	mov	r2, r9
   1507c:	blx	r3
   15080:	cmp	r4, r6
   15084:	bne	15068 <close_stdout@@Base+0x35e0>
   15088:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1508c:	andeq	r0, r1, ip, asr lr
   15090:	andeq	r0, r1, r0, asr lr
   15094:	bx	lr
   15098:	ldr	r3, [pc, #28]	; 150bc <close_stdout@@Base+0x3634>
   1509c:	mov	r1, #0
   150a0:	ldr	r2, [pc, #24]	; 150c0 <close_stdout@@Base+0x3638>
   150a4:	add	r3, pc, r3
   150a8:	ldr	r3, [r3, r2]
   150ac:	cmp	r3, #0
   150b0:	ldrne	r2, [r3]
   150b4:	moveq	r2, r3
   150b8:	b	110e4 <__cxa_atexit@plt>
   150bc:	andeq	r0, r1, r4, asr pc
   150c0:	andeq	r0, r0, r4, lsl #2

Disassembly of section .fini:

000150c4 <.fini>:
   150c4:	push	{r3, lr}
   150c8:	pop	{r3, pc}
