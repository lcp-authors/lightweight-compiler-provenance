
centos-preinstalled/logname:     file format elf32-littlearm


Disassembly of section .init:

00010e80 <.init>:
   10e80:	push	{r3, lr}
   10e84:	bl	112f0 <close@plt+0x1e0>
   10e88:	pop	{r3, pc}

Disassembly of section .plt:

00010e8c <fdopen@plt-0x14>:
   10e8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e90:	ldr	lr, [pc, #4]	; 10e9c <fdopen@plt-0x4>
   10e94:	add	lr, pc, lr
   10e98:	ldr	pc, [lr, #8]!
   10e9c:	andeq	r4, r1, r4, ror #2

00010ea0 <fdopen@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #356]!	; 0x164

00010eac <calloc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #348]!	; 0x15c

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #340]!	; 0x154

00010ec4 <raise@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #20, 20	; 0x14000
   10ecc:	ldr	pc, [ip, #332]!	; 0x14c

00010ed0 <strcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #20, 20	; 0x14000
   10ed8:	ldr	pc, [ip, #324]!	; 0x144

00010edc <getlogin@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #20, 20	; 0x14000
   10ee4:	ldr	pc, [ip, #316]!	; 0x13c

00010ee8 <fflush@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #20, 20	; 0x14000
   10ef0:	ldr	pc, [ip, #308]!	; 0x134

00010ef4 <free@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #20, 20	; 0x14000
   10efc:	ldr	pc, [ip, #300]!	; 0x12c

00010f00 <_exit@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #20, 20	; 0x14000
   10f08:	ldr	pc, [ip, #292]!	; 0x124

00010f0c <memcpy@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #20, 20	; 0x14000
   10f14:	ldr	pc, [ip, #284]!	; 0x11c

00010f18 <mbsinit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #20, 20	; 0x14000
   10f20:	ldr	pc, [ip, #276]!	; 0x114

00010f24 <memcmp@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #20, 20	; 0x14000
   10f2c:	ldr	pc, [ip, #268]!	; 0x10c

00010f30 <dcgettext@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #20, 20	; 0x14000
   10f38:	ldr	pc, [ip, #260]!	; 0x104

00010f3c <__stack_chk_fail@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #20, 20	; 0x14000
   10f44:	ldr	pc, [ip, #252]!	; 0xfc

00010f48 <realloc@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #20, 20	; 0x14000
   10f50:	ldr	pc, [ip, #244]!	; 0xf4

00010f54 <textdomain@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #20, 20	; 0x14000
   10f5c:	ldr	pc, [ip, #236]!	; 0xec

00010f60 <iswprint@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #20, 20	; 0x14000
   10f68:	ldr	pc, [ip, #228]!	; 0xe4

00010f6c <fwrite@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #20, 20	; 0x14000
   10f74:	ldr	pc, [ip, #220]!	; 0xdc

00010f78 <lseek64@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #20, 20	; 0x14000
   10f80:	ldr	pc, [ip, #212]!	; 0xd4

00010f84 <__ctype_get_mb_cur_max@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #20, 20	; 0x14000
   10f8c:	ldr	pc, [ip, #204]!	; 0xcc

00010f90 <strcpy@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #20, 20	; 0x14000
   10f98:	ldr	pc, [ip, #196]!	; 0xc4

00010f9c <__fpending@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #20, 20	; 0x14000
   10fa4:	ldr	pc, [ip, #188]!	; 0xbc

00010fa8 <mbrtowc@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #20, 20	; 0x14000
   10fb0:	ldr	pc, [ip, #180]!	; 0xb4

00010fb4 <error@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #20, 20	; 0x14000
   10fbc:	ldr	pc, [ip, #172]!	; 0xac

00010fc0 <open64@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #164]!	; 0xa4

00010fcc <getenv@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #156]!	; 0x9c

00010fd8 <puts@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #148]!	; 0x94

00010fe4 <malloc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #140]!	; 0x8c

00010ff0 <__libc_start_main@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #132]!	; 0x84

00010ffc <__freading@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #124]!	; 0x7c

00011008 <__gmon_start__@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #116]!	; 0x74

00011014 <getopt_long@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #20, 20	; 0x14000
   1101c:	ldr	pc, [ip, #108]!	; 0x6c

00011020 <__ctype_b_loc@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #20, 20	; 0x14000
   11028:	ldr	pc, [ip, #100]!	; 0x64

0001102c <exit@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #20, 20	; 0x14000
   11034:	ldr	pc, [ip, #92]!	; 0x5c

00011038 <strlen@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #20, 20	; 0x14000
   11040:	ldr	pc, [ip, #84]!	; 0x54

00011044 <ungetc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #20, 20	; 0x14000
   1104c:	ldr	pc, [ip, #76]!	; 0x4c

00011050 <__errno_location@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #20, 20	; 0x14000
   11058:	ldr	pc, [ip, #68]!	; 0x44

0001105c <__cxa_atexit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #20, 20	; 0x14000
   11064:	ldr	pc, [ip, #60]!	; 0x3c

00011068 <memset@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #20, 20	; 0x14000
   11070:	ldr	pc, [ip, #52]!	; 0x34

00011074 <fscanf@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #20, 20	; 0x14000
   1107c:	ldr	pc, [ip, #44]!	; 0x2c

00011080 <__printf_chk@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #20, 20	; 0x14000
   11088:	ldr	pc, [ip, #36]!	; 0x24

0001108c <fileno@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #20, 20	; 0x14000
   11094:	ldr	pc, [ip, #28]!

00011098 <__fprintf_chk@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #20, 20	; 0x14000
   110a0:	ldr	pc, [ip, #20]!

000110a4 <fclose@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #20, 20	; 0x14000
   110ac:	ldr	pc, [ip, #12]!

000110b0 <fseeko64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #20, 20	; 0x14000
   110b8:	ldr	pc, [ip, #4]!

000110bc <__uflow@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #77824	; 0x13000
   110c4:	ldr	pc, [ip, #4092]!	; 0xffc

000110c8 <setlocale@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #77824	; 0x13000
   110d0:	ldr	pc, [ip, #4084]!	; 0xff4

000110d4 <strrchr@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #77824	; 0x13000
   110dc:	ldr	pc, [ip, #4076]!	; 0xfec

000110e0 <nl_langinfo@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #77824	; 0x13000
   110e8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110ec <bindtextdomain@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #77824	; 0x13000
   110f4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f8 <strncmp@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #77824	; 0x13000
   11100:	ldr	pc, [ip, #4052]!	; 0xfd4

00011104 <abort@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #77824	; 0x13000
   1110c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011110 <close@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #77824	; 0x13000
   11118:	ldr	pc, [ip, #4036]!	; 0xfc4

Disassembly of section .text:

0001111c <usage@@Base-0x2cc>:
   1111c:	push	{r4, r5, r6, r7, r8, r9, lr}
   11120:	mov	r7, r0
   11124:	ldr	r8, [pc, #340]	; 11280 <close@plt+0x170>
   11128:	sub	sp, sp, #20
   1112c:	ldr	r0, [r1]
   11130:	mov	r6, r1
   11134:	add	r8, pc, r8
   11138:	ldr	r9, [pc, #324]	; 11284 <close@plt+0x174>
   1113c:	bl	118b4 <close_stdout@@Base+0x2c8>
   11140:	mov	r0, #6
   11144:	mov	r1, r8
   11148:	add	r9, pc, r9
   1114c:	bl	110c8 <setlocale@plt>
   11150:	ldr	r1, [pc, #304]	; 11288 <close@plt+0x178>
   11154:	mov	r0, r9
   11158:	ldr	r4, [pc, #300]	; 1128c <close@plt+0x17c>
   1115c:	add	r1, pc, r1
   11160:	mov	r5, #0
   11164:	bl	110ec <bindtextdomain@plt>
   11168:	mov	r0, r9
   1116c:	bl	10f54 <textdomain@plt>
   11170:	ldr	r3, [pc, #280]	; 11290 <close@plt+0x180>
   11174:	add	r4, pc, r4
   11178:	ldr	r0, [r4, r3]
   1117c:	bl	141e8 <close_stdout@@Base+0x2bfc>
   11180:	ldr	r3, [pc, #268]	; 11294 <close@plt+0x184>
   11184:	ldr	ip, [pc, #268]	; 11298 <close@plt+0x188>
   11188:	mov	r0, r7
   1118c:	ldr	lr, [pc, #264]	; 1129c <close@plt+0x18c>
   11190:	mov	r1, r6
   11194:	ldr	r9, [r4, r3]
   11198:	ldr	r2, [pc, #256]	; 112a0 <close@plt+0x190>
   1119c:	add	lr, pc, lr
   111a0:	ldr	r3, [pc, #252]	; 112a4 <close@plt+0x194>
   111a4:	ldr	r9, [r9]
   111a8:	add	r2, pc, r2
   111ac:	add	r3, pc, r3
   111b0:	str	r9, [sp]
   111b4:	ldr	ip, [r4, ip]
   111b8:	str	lr, [sp, #8]
   111bc:	str	r5, [sp, #12]
   111c0:	str	ip, [sp, #4]
   111c4:	bl	117a8 <close_stdout@@Base+0x1bc>
   111c8:	str	r5, [sp]
   111cc:	mov	r2, r8
   111d0:	mov	r0, r7
   111d4:	mov	r1, r6
   111d8:	mov	r3, r5
   111dc:	bl	11014 <getopt_long@plt>
   111e0:	cmn	r0, #1
   111e4:	beq	111f0 <close@plt+0xe0>
   111e8:	mov	r0, #1
   111ec:	bl	113e8 <usage@@Base>
   111f0:	ldr	r3, [pc, #176]	; 112a8 <close@plt+0x198>
   111f4:	ldr	r4, [r4, r3]
   111f8:	ldr	r3, [r4]
   111fc:	cmp	r7, r3
   11200:	ble	11240 <close@plt+0x130>
   11204:	ldr	r1, [pc, #160]	; 112ac <close@plt+0x19c>
   11208:	mov	r2, #5
   1120c:	mov	r0, r5
   11210:	add	r1, pc, r1
   11214:	bl	10f30 <dcgettext@plt>
   11218:	ldr	r3, [r4]
   1121c:	mov	r7, r0
   11220:	ldr	r0, [r6, r3, lsl #2]
   11224:	bl	13104 <close_stdout@@Base+0x1b18>
   11228:	mov	r1, r5
   1122c:	mov	r2, r7
   11230:	mov	r3, r0
   11234:	mov	r0, r5
   11238:	bl	10fb4 <error@plt>
   1123c:	b	111e8 <close@plt+0xd8>
   11240:	bl	10edc <getlogin@plt>
   11244:	subs	r4, r0, #0
   11248:	beq	11258 <close@plt+0x148>
   1124c:	bl	10fd8 <puts@plt>
   11250:	mov	r0, r5
   11254:	bl	1102c <exit@plt>
   11258:	ldr	r1, [pc, #80]	; 112b0 <close@plt+0x1a0>
   1125c:	mov	r2, #5
   11260:	add	r1, pc, r1
   11264:	bl	10f30 <dcgettext@plt>
   11268:	mov	r1, r4
   1126c:	mov	r2, r0
   11270:	mov	r0, r4
   11274:	bl	10fb4 <error@plt>
   11278:	mov	r0, #1
   1127c:	bl	1102c <exit@plt>
   11280:	muleq	r0, r0, r2
   11284:			; <UNDEFINED> instruction: 0x000031bc
   11288:	andeq	r3, r0, ip, ror #4
   1128c:	andeq	r3, r1, r4, lsl #29
   11290:	strdeq	r0, [r0], -r4
   11294:	andeq	r0, r0, ip, ror #1
   11298:	andeq	r0, r0, r4, lsl #2
   1129c:	andeq	r3, r0, r8, asr #4
   112a0:	andeq	r3, r0, r4, lsr r2
   112a4:	andeq	r3, r0, r4, asr r1
   112a8:	andeq	r0, r0, r8, ror #1
   112ac:	andeq	r3, r0, r4, ror #3
   112b0:	andeq	r3, r0, r8, lsr #3
   112b4:	mov	fp, #0
   112b8:	mov	lr, #0
   112bc:	pop	{r1}		; (ldr r1, [sp], #4)
   112c0:	mov	r2, sp
   112c4:	push	{r2}		; (str r2, [sp, #-4]!)
   112c8:	push	{r0}		; (str r0, [sp, #-4]!)
   112cc:	ldr	ip, [pc, #16]	; 112e4 <close@plt+0x1d4>
   112d0:	push	{ip}		; (str ip, [sp, #-4]!)
   112d4:	ldr	r0, [pc, #12]	; 112e8 <close@plt+0x1d8>
   112d8:	ldr	r3, [pc, #12]	; 112ec <close@plt+0x1dc>
   112dc:	bl	10ff0 <__libc_start_main@plt>
   112e0:	bl	11104 <abort@plt>
   112e4:	andeq	r4, r1, r4, ror #3
   112e8:	andeq	r1, r1, ip, lsl r1
   112ec:	andeq	r4, r1, r0, lsl #3
   112f0:	ldr	r3, [pc, #20]	; 1130c <close@plt+0x1fc>
   112f4:	ldr	r2, [pc, #20]	; 11310 <close@plt+0x200>
   112f8:	add	r3, pc, r3
   112fc:	ldr	r2, [r3, r2]
   11300:	cmp	r2, #0
   11304:	bxeq	lr
   11308:	b	11008 <__gmon_start__@plt>
   1130c:	andeq	r3, r1, r0, lsl #26
   11310:	strdeq	r0, [r0], -r8
   11314:	push	{r3, lr}
   11318:	movw	r0, #20844	; 0x516c
   1131c:	ldr	r3, [pc, #36]	; 11348 <close@plt+0x238>
   11320:	movt	r0, #2
   11324:	rsb	r3, r0, r3
   11328:	cmp	r3, #6
   1132c:	popls	{r3, pc}
   11330:	movw	r3, #0
   11334:	movt	r3, #0
   11338:	cmp	r3, #0
   1133c:	popeq	{r3, pc}
   11340:	blx	r3
   11344:	pop	{r3, pc}
   11348:	andeq	r5, r2, pc, ror #2
   1134c:	push	{r3, lr}
   11350:	movw	r0, #20844	; 0x516c
   11354:	movw	r3, #20844	; 0x516c
   11358:	movt	r0, #2
   1135c:	movt	r3, #2
   11360:	rsb	r3, r0, r3
   11364:	asr	r3, r3, #2
   11368:	add	r3, r3, r3, lsr #31
   1136c:	asrs	r1, r3, #1
   11370:	popeq	{r3, pc}
   11374:	movw	r2, #0
   11378:	movt	r2, #0
   1137c:	cmp	r2, #0
   11380:	popeq	{r3, pc}
   11384:	blx	r2
   11388:	pop	{r3, pc}
   1138c:	push	{r4, lr}
   11390:	movw	r4, #20844	; 0x516c
   11394:	movt	r4, #2
   11398:	ldrb	r3, [r4]
   1139c:	cmp	r3, #0
   113a0:	popne	{r4, pc}
   113a4:	bl	11314 <close@plt+0x204>
   113a8:	mov	r3, #1
   113ac:	strb	r3, [r4]
   113b0:	pop	{r4, pc}
   113b4:	movw	r0, #20144	; 0x4eb0
   113b8:	movt	r0, #2
   113bc:	push	{r3, lr}
   113c0:	ldr	r3, [r0]
   113c4:	cmp	r3, #0
   113c8:	beq	113e0 <close@plt+0x2d0>
   113cc:	movw	r3, #0
   113d0:	movt	r3, #0
   113d4:	cmp	r3, #0
   113d8:	beq	113e0 <close@plt+0x2d0>
   113dc:	blx	r3
   113e0:	pop	{r3, lr}
   113e4:	b	1134c <close@plt+0x23c>

000113e8 <usage@@Base>:
   113e8:	push	{r4, r5, r6, lr}
   113ec:	subs	r4, r0, #0
   113f0:	ldr	r5, [pc, #400]	; 11588 <usage@@Base+0x1a0>
   113f4:	add	r5, pc, r5
   113f8:	beq	11440 <usage@@Base+0x58>
   113fc:	ldr	r3, [pc, #392]	; 1158c <usage@@Base+0x1a4>
   11400:	mov	r2, #5
   11404:	ldr	r1, [pc, #388]	; 11590 <usage@@Base+0x1a8>
   11408:	mov	r0, #0
   1140c:	ldr	r3, [r5, r3]
   11410:	add	r1, pc, r1
   11414:	ldr	r6, [r3]
   11418:	bl	10f30 <dcgettext@plt>
   1141c:	ldr	r3, [pc, #368]	; 11594 <usage@@Base+0x1ac>
   11420:	mov	r1, #1
   11424:	ldr	r3, [r5, r3]
   11428:	ldr	r3, [r3]
   1142c:	mov	r2, r0
   11430:	mov	r0, r6
   11434:	bl	11098 <__fprintf_chk@plt>
   11438:	mov	r0, r4
   1143c:	bl	1102c <exit@plt>
   11440:	ldr	r1, [pc, #336]	; 11598 <usage@@Base+0x1b0>
   11444:	mov	r2, #5
   11448:	add	r1, pc, r1
   1144c:	bl	10f30 <dcgettext@plt>
   11450:	ldr	r3, [pc, #316]	; 11594 <usage@@Base+0x1ac>
   11454:	ldr	r6, [r5, r3]
   11458:	ldr	r2, [r6]
   1145c:	mov	r1, r0
   11460:	mov	r0, #1
   11464:	bl	11080 <__printf_chk@plt>
   11468:	ldr	r1, [pc, #300]	; 1159c <usage@@Base+0x1b4>
   1146c:	mov	r2, #5
   11470:	mov	r0, r4
   11474:	add	r1, pc, r1
   11478:	bl	10f30 <dcgettext@plt>
   1147c:	ldr	r3, [pc, #284]	; 115a0 <usage@@Base+0x1b8>
   11480:	ldr	r5, [r5, r3]
   11484:	ldr	r1, [r5]
   11488:	bl	10eb8 <fputs_unlocked@plt>
   1148c:	ldr	r1, [pc, #272]	; 115a4 <usage@@Base+0x1bc>
   11490:	mov	r2, #5
   11494:	mov	r0, r4
   11498:	add	r1, pc, r1
   1149c:	bl	10f30 <dcgettext@plt>
   114a0:	ldr	r1, [r5]
   114a4:	bl	10eb8 <fputs_unlocked@plt>
   114a8:	ldr	r1, [pc, #248]	; 115a8 <usage@@Base+0x1c0>
   114ac:	mov	r2, #5
   114b0:	mov	r0, r4
   114b4:	add	r1, pc, r1
   114b8:	bl	10f30 <dcgettext@plt>
   114bc:	ldr	r1, [r5]
   114c0:	bl	10eb8 <fputs_unlocked@plt>
   114c4:	ldr	r1, [pc, #224]	; 115ac <usage@@Base+0x1c4>
   114c8:	mov	r2, #5
   114cc:	mov	r0, r4
   114d0:	add	r1, pc, r1
   114d4:	bl	10f30 <dcgettext@plt>
   114d8:	ldr	r2, [pc, #208]	; 115b0 <usage@@Base+0x1c8>
   114dc:	ldr	r3, [pc, #208]	; 115b4 <usage@@Base+0x1cc>
   114e0:	add	r2, pc, r2
   114e4:	add	r3, pc, r3
   114e8:	mov	r1, r0
   114ec:	mov	r0, #1
   114f0:	bl	11080 <__printf_chk@plt>
   114f4:	mov	r0, #5
   114f8:	mov	r1, r4
   114fc:	bl	110c8 <setlocale@plt>
   11500:	cmp	r0, #0
   11504:	beq	11520 <usage@@Base+0x138>
   11508:	ldr	r1, [pc, #168]	; 115b8 <usage@@Base+0x1d0>
   1150c:	mov	r2, #3
   11510:	add	r1, pc, r1
   11514:	bl	110f8 <strncmp@plt>
   11518:	cmp	r0, #0
   1151c:	bne	11554 <usage@@Base+0x16c>
   11520:	ldr	r1, [pc, #148]	; 115bc <usage@@Base+0x1d4>
   11524:	mov	r2, #5
   11528:	mov	r0, #0
   1152c:	add	r1, pc, r1
   11530:	bl	10f30 <dcgettext@plt>
   11534:	mov	r5, r0
   11538:	ldr	r0, [r6]
   1153c:	bl	11704 <close_stdout@@Base+0x118>
   11540:	mov	r1, r5
   11544:	mov	r2, r0
   11548:	mov	r0, #1
   1154c:	bl	11080 <__printf_chk@plt>
   11550:	b	11438 <usage@@Base+0x50>
   11554:	ldr	r1, [pc, #100]	; 115c0 <usage@@Base+0x1d8>
   11558:	mov	r2, #5
   1155c:	mov	r0, r4
   11560:	add	r1, pc, r1
   11564:	bl	10f30 <dcgettext@plt>
   11568:	mov	r5, r0
   1156c:	ldr	r0, [r6]
   11570:	bl	11704 <close_stdout@@Base+0x118>
   11574:	mov	r1, r5
   11578:	mov	r2, r0
   1157c:	mov	r0, #1
   11580:	bl	11080 <__printf_chk@plt>
   11584:	b	11520 <usage@@Base+0x138>
   11588:	andeq	r3, r1, r4, lsl #24
   1158c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11590:	andeq	r2, r0, ip, lsl #28
   11594:	andeq	r0, r0, r0, lsl r1
   11598:	strdeq	r2, [r0], -ip
   1159c:	andeq	r2, r0, r4, ror #27
   115a0:	andeq	r0, r0, r0, lsl #2
   115a4:	andeq	r2, r0, r8, ror #27
   115a8:	strdeq	r2, [r0], -ip
   115ac:	andeq	r2, r0, r8, lsl lr
   115b0:	andeq	r2, r0, r0, lsr #28
   115b4:	andeq	r2, r0, ip, lsr #28
   115b8:	andeq	r2, r0, r8, lsr #28
   115bc:	andeq	r2, r0, r8, asr lr
   115c0:	ldrdeq	r2, [r0], -ip
   115c4:	ldr	r3, [pc, #8]	; 115d4 <usage@@Base+0x1ec>
   115c8:	add	r3, pc, r3
   115cc:	str	r0, [r3]
   115d0:	bx	lr
   115d4:	andeq	r3, r1, r0, lsr #23
   115d8:	ldr	r3, [pc, #8]	; 115e8 <usage@@Base+0x200>
   115dc:	add	r3, pc, r3
   115e0:	strb	r0, [r3, #4]
   115e4:	bx	lr
   115e8:	andeq	r3, r1, ip, lsl #23

000115ec <close_stdout@@Base>:
   115ec:	push	{r4, r5, r6, r7, lr}
   115f0:	sub	sp, sp, #12
   115f4:	ldr	r4, [pc, #228]	; 116e0 <close_stdout@@Base+0xf4>
   115f8:	ldr	r3, [pc, #228]	; 116e4 <close_stdout@@Base+0xf8>
   115fc:	add	r4, pc, r4
   11600:	ldr	r3, [r4, r3]
   11604:	ldr	r0, [r3]
   11608:	bl	1391c <close_stdout@@Base+0x2330>
   1160c:	cmp	r0, #0
   11610:	beq	11638 <close_stdout@@Base+0x4c>
   11614:	ldr	r3, [pc, #204]	; 116e8 <close_stdout@@Base+0xfc>
   11618:	add	r3, pc, r3
   1161c:	ldrb	r3, [r3, #4]
   11620:	cmp	r3, #0
   11624:	beq	11658 <close_stdout@@Base+0x6c>
   11628:	bl	11050 <__errno_location@plt>
   1162c:	ldr	r3, [r0]
   11630:	cmp	r3, #32
   11634:	bne	11658 <close_stdout@@Base+0x6c>
   11638:	ldr	r3, [pc, #172]	; 116ec <close_stdout@@Base+0x100>
   1163c:	ldr	r3, [r4, r3]
   11640:	ldr	r0, [r3]
   11644:	bl	1391c <close_stdout@@Base+0x2330>
   11648:	cmp	r0, #0
   1164c:	bne	116ac <close_stdout@@Base+0xc0>
   11650:	add	sp, sp, #12
   11654:	pop	{r4, r5, r6, r7, pc}
   11658:	ldr	r1, [pc, #144]	; 116f0 <close_stdout@@Base+0x104>
   1165c:	mov	r0, #0
   11660:	mov	r2, #5
   11664:	add	r1, pc, r1
   11668:	bl	10f30 <dcgettext@plt>
   1166c:	ldr	r3, [pc, #128]	; 116f4 <close_stdout@@Base+0x108>
   11670:	ldr	r5, [pc, r3]
   11674:	cmp	r5, #0
   11678:	mov	r6, r0
   1167c:	beq	116bc <close_stdout@@Base+0xd0>
   11680:	bl	11050 <__errno_location@plt>
   11684:	ldr	r7, [r0]
   11688:	mov	r0, r5
   1168c:	bl	12fb0 <close_stdout@@Base+0x19c4>
   11690:	ldr	r2, [pc, #96]	; 116f8 <close_stdout@@Base+0x10c>
   11694:	str	r6, [sp]
   11698:	mov	r1, r7
   1169c:	add	r2, pc, r2
   116a0:	mov	r3, r0
   116a4:	mov	r0, #0
   116a8:	bl	10fb4 <error@plt>
   116ac:	ldr	r3, [pc, #72]	; 116fc <close_stdout@@Base+0x110>
   116b0:	ldr	r3, [r4, r3]
   116b4:	ldr	r0, [r3]
   116b8:	bl	10f00 <_exit@plt>
   116bc:	bl	11050 <__errno_location@plt>
   116c0:	ldr	r2, [pc, #56]	; 11700 <close_stdout@@Base+0x114>
   116c4:	add	r2, pc, r2
   116c8:	mov	r3, r0
   116cc:	mov	r0, r5
   116d0:	ldr	r1, [r3]
   116d4:	mov	r3, r6
   116d8:	bl	10fb4 <error@plt>
   116dc:	b	116ac <close_stdout@@Base+0xc0>
   116e0:	strdeq	r3, [r1], -ip
   116e4:	andeq	r0, r0, r0, lsl #2
   116e8:	andeq	r3, r1, r0, asr fp
   116ec:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   116f0:			; <UNDEFINED> instruction: 0x00002dbc
   116f4:	strdeq	r3, [r1], -r8
   116f8:	muleq	r0, r0, sp
   116fc:	andeq	r0, r0, r8, lsl #2
   11700:	andeq	r2, r0, ip, ror #26
   11704:	ldrb	r3, [r0]
   11708:	cmp	r3, #47	; 0x2f
   1170c:	bne	11728 <close_stdout@@Base+0x13c>
   11710:	add	r2, r0, #1
   11714:	mov	r0, r2
   11718:	add	r2, r2, #1
   1171c:	ldrb	r3, [r0]
   11720:	cmp	r3, #47	; 0x2f
   11724:	beq	11714 <close_stdout@@Base+0x128>
   11728:	cmp	r3, #0
   1172c:	bxeq	lr
   11730:	mov	r2, r0
   11734:	mov	r1, #0
   11738:	cmp	r3, #47	; 0x2f
   1173c:	moveq	r1, #1
   11740:	beq	11750 <close_stdout@@Base+0x164>
   11744:	cmp	r1, #0
   11748:	movne	r0, r2
   1174c:	movne	r1, #0
   11750:	ldrb	r3, [r2, #1]!
   11754:	cmp	r3, #0
   11758:	bne	11738 <close_stdout@@Base+0x14c>
   1175c:	bx	lr
   11760:	push	{r4, lr}
   11764:	mov	r4, r0
   11768:	bl	11038 <strlen@plt>
   1176c:	cmp	r0, #1
   11770:	popls	{r4, pc}
   11774:	sub	r3, r0, #1
   11778:	ldrb	r2, [r4, r3]
   1177c:	cmp	r2, #47	; 0x2f
   11780:	popne	{r4, pc}
   11784:	mov	r0, r3
   11788:	cmp	r0, #1
   1178c:	sub	r3, r3, #1
   11790:	beq	117a4 <close_stdout@@Base+0x1b8>
   11794:	ldrb	r2, [r4, r3]
   11798:	cmp	r2, #47	; 0x2f
   1179c:	popne	{r4, pc}
   117a0:	b	11784 <close_stdout@@Base+0x198>
   117a4:	pop	{r4, pc}
   117a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117ac:	mov	r9, r3
   117b0:	ldr	r4, [pc, #224]	; 11898 <close_stdout@@Base+0x2ac>
   117b4:	sub	sp, sp, #28
   117b8:	ldr	ip, [pc, #220]	; 1189c <close_stdout@@Base+0x2b0>
   117bc:	cmp	r0, #2
   117c0:	add	r4, pc, r4
   117c4:	ldr	r5, [pc, #212]	; 118a0 <close_stdout@@Base+0x2b4>
   117c8:	mov	r7, #0
   117cc:	mov	sl, r2
   117d0:	ldr	r6, [r4, ip]
   117d4:	ldr	r8, [sp, #64]	; 0x40
   117d8:	ldr	fp, [sp, #68]	; 0x44
   117dc:	ldr	r3, [r6]
   117e0:	str	r3, [sp, #20]
   117e4:	ldr	r5, [r4, r5]
   117e8:	ldr	ip, [r5]
   117ec:	str	r7, [r5]
   117f0:	beq	11820 <close_stdout@@Base+0x234>
   117f4:	ldr	r3, [pc, #168]	; 118a4 <close_stdout@@Base+0x2b8>
   117f8:	mov	r2, #0
   117fc:	ldr	r0, [sp, #20]
   11800:	ldr	r1, [r6]
   11804:	str	ip, [r5]
   11808:	ldr	r3, [r4, r3]
   1180c:	cmp	r0, r1
   11810:	str	r2, [r3]
   11814:	bne	11894 <close_stdout@@Base+0x2a8>
   11818:	add	sp, sp, #28
   1181c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11820:	ldr	r2, [pc, #128]	; 118a8 <close_stdout@@Base+0x2bc>
   11824:	ldr	r3, [pc, #128]	; 118ac <close_stdout@@Base+0x2c0>
   11828:	str	r7, [sp]
   1182c:	add	r2, pc, r2
   11830:	add	r3, pc, r3
   11834:	str	ip, [sp, #12]
   11838:	bl	11014 <getopt_long@plt>
   1183c:	ldr	ip, [sp, #12]
   11840:	cmn	r0, #1
   11844:	beq	117f4 <close_stdout@@Base+0x208>
   11848:	cmp	r0, #104	; 0x68
   1184c:	beq	11888 <close_stdout@@Base+0x29c>
   11850:	cmp	r0, #118	; 0x76
   11854:	bne	117f4 <close_stdout@@Base+0x208>
   11858:	ldr	ip, [pc, #80]	; 118b0 <close_stdout@@Base+0x2c4>
   1185c:	add	r0, sp, #72	; 0x48
   11860:	str	r0, [sp, #16]
   11864:	mov	r1, sl
   11868:	mov	r2, r9
   1186c:	mov	r3, r8
   11870:	ldr	ip, [r4, ip]
   11874:	str	r0, [sp]
   11878:	ldr	r0, [ip]
   1187c:	bl	13524 <close_stdout@@Base+0x1f38>
   11880:	mov	r0, #0
   11884:	bl	1102c <exit@plt>
   11888:	mov	r0, r7
   1188c:	blx	fp
   11890:	b	11858 <close_stdout@@Base+0x26c>
   11894:	bl	10f3c <__stack_chk_fail@plt>
   11898:	andeq	r3, r1, r8, lsr r8
   1189c:	andeq	r0, r0, r4, ror #1
   118a0:	andeq	r0, r0, r8, lsl r1
   118a4:	andeq	r0, r0, r8, ror #1
   118a8:	andeq	r2, r0, r8, lsl #24
   118ac:	andeq	r3, r1, ip, ror r6
   118b0:	andeq	r0, r0, r0, lsl #2
   118b4:	push	{r3, r4, r5, r6, r7, lr}
   118b8:	subs	r4, r0, #0
   118bc:	ldr	r5, [pc, #172]	; 11970 <close_stdout@@Base+0x384>
   118c0:	add	r5, pc, r5
   118c4:	beq	1194c <close_stdout@@Base+0x360>
   118c8:	mov	r1, #47	; 0x2f
   118cc:	bl	110d4 <strrchr@plt>
   118d0:	subs	r6, r0, #0
   118d4:	beq	11930 <close_stdout@@Base+0x344>
   118d8:	add	r7, r6, #1
   118dc:	rsb	r3, r4, r7
   118e0:	cmp	r3, #6
   118e4:	ble	11930 <close_stdout@@Base+0x344>
   118e8:	ldr	r1, [pc, #132]	; 11974 <close_stdout@@Base+0x388>
   118ec:	sub	r0, r6, #6
   118f0:	mov	r2, #7
   118f4:	add	r1, pc, r1
   118f8:	bl	110f8 <strncmp@plt>
   118fc:	cmp	r0, #0
   11900:	bne	11930 <close_stdout@@Base+0x344>
   11904:	ldr	r1, [pc, #108]	; 11978 <close_stdout@@Base+0x38c>
   11908:	mov	r0, r7
   1190c:	mov	r2, #3
   11910:	add	r1, pc, r1
   11914:	bl	110f8 <strncmp@plt>
   11918:	cmp	r0, #0
   1191c:	movne	r4, r7
   11920:	ldreq	r3, [pc, #84]	; 1197c <close_stdout@@Base+0x390>
   11924:	addeq	r4, r6, #4
   11928:	ldreq	r3, [r5, r3]
   1192c:	streq	r4, [r3]
   11930:	ldr	r2, [pc, #72]	; 11980 <close_stdout@@Base+0x394>
   11934:	ldr	r3, [pc, #72]	; 11984 <close_stdout@@Base+0x398>
   11938:	ldr	r2, [r5, r2]
   1193c:	str	r4, [r2]
   11940:	ldr	r3, [r5, r3]
   11944:	str	r4, [r3]
   11948:	pop	{r3, r4, r5, r6, r7, pc}
   1194c:	ldr	r3, [pc, #52]	; 11988 <close_stdout@@Base+0x39c>
   11950:	mov	r1, #1
   11954:	ldr	r0, [pc, #48]	; 1198c <close_stdout@@Base+0x3a0>
   11958:	mov	r2, #55	; 0x37
   1195c:	ldr	r3, [r5, r3]
   11960:	add	r0, pc, r0
   11964:	ldr	r3, [r3]
   11968:	bl	10f6c <fwrite@plt>
   1196c:	bl	11104 <abort@plt>
   11970:	andeq	r3, r1, r8, lsr r7
   11974:	andeq	r2, r0, ip, lsl #23
   11978:	andeq	r2, r0, r8, ror fp
   1197c:	andeq	r0, r0, ip, lsl r1
   11980:	andeq	r0, r0, r0, lsl r1
   11984:	andeq	r0, r0, ip, lsl #2
   11988:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1198c:	andeq	r2, r0, r8, ror #21
   11990:	push	{r3, lr}
   11994:	mov	r3, r0
   11998:	mov	r2, #0
   1199c:	cmp	r1, #8
   119a0:	str	r2, [r3], #4
   119a4:	add	r3, r3, #4
   119a8:	str	r2, [r0, #4]
   119ac:	str	r2, [r3], #4
   119b0:	str	r2, [r3], #4
   119b4:	str	r2, [r3], #4
   119b8:	str	r2, [r3], #4
   119bc:	str	r2, [r3], #4
   119c0:	str	r2, [r3], #4
   119c4:	str	r2, [r3], #4
   119c8:	str	r2, [r3], #4
   119cc:	str	r2, [r3], #4
   119d0:	str	r2, [r3]
   119d4:	beq	119e0 <close_stdout@@Base+0x3f4>
   119d8:	str	r1, [r0]
   119dc:	pop	{r3, pc}
   119e0:	bl	11104 <abort@plt>
   119e4:	push	{r4, r5, r6, lr}
   119e8:	mov	r4, r0
   119ec:	mov	r6, r1
   119f0:	mov	r0, #0
   119f4:	mov	r1, r4
   119f8:	mov	r2, #5
   119fc:	bl	10f30 <dcgettext@plt>
   11a00:	cmp	r0, r4
   11a04:	mov	r5, r0
   11a08:	beq	11a10 <close_stdout@@Base+0x424>
   11a0c:	pop	{r4, r5, r6, pc}
   11a10:	bl	1399c <close_stdout@@Base+0x23b0>
   11a14:	ldrb	r3, [r0]
   11a18:	bic	r3, r3, #32
   11a1c:	cmp	r3, #85	; 0x55
   11a20:	bne	11a94 <close_stdout@@Base+0x4a8>
   11a24:	ldrb	r3, [r0, #1]
   11a28:	bic	r3, r3, #32
   11a2c:	cmp	r3, #84	; 0x54
   11a30:	bne	11a80 <close_stdout@@Base+0x494>
   11a34:	ldrb	r3, [r0, #2]
   11a38:	bic	r3, r3, #32
   11a3c:	cmp	r3, #70	; 0x46
   11a40:	bne	11a80 <close_stdout@@Base+0x494>
   11a44:	ldrb	r3, [r0, #3]
   11a48:	cmp	r3, #45	; 0x2d
   11a4c:	bne	11a80 <close_stdout@@Base+0x494>
   11a50:	ldrb	r3, [r0, #4]
   11a54:	cmp	r3, #56	; 0x38
   11a58:	bne	11a80 <close_stdout@@Base+0x494>
   11a5c:	ldrb	r3, [r0, #5]
   11a60:	cmp	r3, #0
   11a64:	bne	11a80 <close_stdout@@Base+0x494>
   11a68:	ldrb	r3, [r5]
   11a6c:	cmp	r3, #96	; 0x60
   11a70:	beq	11b0c <close_stdout@@Base+0x520>
   11a74:	ldr	r0, [pc, #180]	; 11b30 <close_stdout@@Base+0x544>
   11a78:	add	r0, pc, r0
   11a7c:	pop	{r4, r5, r6, pc}
   11a80:	cmp	r6, #7
   11a84:	beq	11b18 <close_stdout@@Base+0x52c>
   11a88:	ldr	r0, [pc, #164]	; 11b34 <close_stdout@@Base+0x548>
   11a8c:	add	r0, pc, r0
   11a90:	pop	{r4, r5, r6, pc}
   11a94:	cmp	r3, #71	; 0x47
   11a98:	bne	11a80 <close_stdout@@Base+0x494>
   11a9c:	ldrb	r3, [r0, #1]
   11aa0:	bic	r3, r3, #32
   11aa4:	cmp	r3, #66	; 0x42
   11aa8:	bne	11a80 <close_stdout@@Base+0x494>
   11aac:	ldrb	r3, [r0, #2]
   11ab0:	cmp	r3, #49	; 0x31
   11ab4:	bne	11a80 <close_stdout@@Base+0x494>
   11ab8:	ldrb	r3, [r0, #3]
   11abc:	cmp	r3, #56	; 0x38
   11ac0:	bne	11a80 <close_stdout@@Base+0x494>
   11ac4:	ldrb	r3, [r0, #4]
   11ac8:	cmp	r3, #48	; 0x30
   11acc:	bne	11a80 <close_stdout@@Base+0x494>
   11ad0:	ldrb	r3, [r0, #5]
   11ad4:	cmp	r3, #51	; 0x33
   11ad8:	bne	11a80 <close_stdout@@Base+0x494>
   11adc:	ldrb	r3, [r0, #6]
   11ae0:	cmp	r3, #48	; 0x30
   11ae4:	bne	11a80 <close_stdout@@Base+0x494>
   11ae8:	ldrb	r3, [r0, #7]
   11aec:	cmp	r3, #0
   11af0:	bne	11a80 <close_stdout@@Base+0x494>
   11af4:	ldrb	r3, [r5]
   11af8:	cmp	r3, #96	; 0x60
   11afc:	beq	11b24 <close_stdout@@Base+0x538>
   11b00:	ldr	r0, [pc, #48]	; 11b38 <close_stdout@@Base+0x54c>
   11b04:	add	r0, pc, r0
   11b08:	pop	{r4, r5, r6, pc}
   11b0c:	ldr	r0, [pc, #40]	; 11b3c <close_stdout@@Base+0x550>
   11b10:	add	r0, pc, r0
   11b14:	pop	{r4, r5, r6, pc}
   11b18:	ldr	r0, [pc, #32]	; 11b40 <close_stdout@@Base+0x554>
   11b1c:	add	r0, pc, r0
   11b20:	pop	{r4, r5, r6, pc}
   11b24:	ldr	r0, [pc, #24]	; 11b44 <close_stdout@@Base+0x558>
   11b28:	add	r0, pc, r0
   11b2c:	pop	{r4, r5, r6, pc}
   11b30:	andeq	r2, r0, r4, lsr sl
   11b34:	andeq	r2, r0, r8, lsr #20
   11b38:	andeq	r2, r0, ip, lsr #19
   11b3c:			; <UNDEFINED> instruction: 0x000029b0
   11b40:	muleq	r0, ip, r9
   11b44:	muleq	r0, r4, r9
   11b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b4c:	sub	sp, sp, #124	; 0x7c
   11b50:	ldr	ip, [pc, #3304]	; 12840 <close_stdout@@Base+0x1254>
   11b54:	mov	sl, r1
   11b58:	str	r0, [sp, #40]	; 0x28
   11b5c:	mov	r8, r3
   11b60:	ldr	r0, [pc, #3292]	; 12844 <close_stdout@@Base+0x1258>
   11b64:	add	ip, pc, ip
   11b68:	str	r2, [sp, #32]
   11b6c:	ldr	r1, [sp, #164]	; 0xa4
   11b70:	mov	r3, ip
   11b74:	ldr	r0, [ip, r0]
   11b78:	ldr	r2, [sp, #172]	; 0xac
   11b7c:	ubfx	r1, r1, #1, #1
   11b80:	str	r1, [sp, #36]	; 0x24
   11b84:	str	r0, [sp, #56]	; 0x38
   11b88:	ldr	r0, [sp, #168]	; 0xa8
   11b8c:	ldr	r1, [sp, #176]	; 0xb0
   11b90:	str	r2, [sp, #72]	; 0x48
   11b94:	str	r0, [sp, #48]	; 0x30
   11b98:	ldr	r0, [sp, #56]	; 0x38
   11b9c:	str	r1, [sp, #68]	; 0x44
   11ba0:	ldr	r3, [r0]
   11ba4:	str	r3, [sp, #116]	; 0x74
   11ba8:	bl	10f84 <__ctype_get_mb_cur_max@plt>
   11bac:	ldr	r2, [sp, #160]	; 0xa0
   11bb0:	str	r0, [sp, #64]	; 0x40
   11bb4:	cmp	r2, #8
   11bb8:	addls	pc, pc, r2, lsl #2
   11bbc:	b	1271c <close_stdout@@Base+0x1130>
   11bc0:	b	11be4 <close_stdout@@Base+0x5f8>
   11bc4:	b	12434 <close_stdout@@Base+0xe48>
   11bc8:	b	12464 <close_stdout@@Base+0xe78>
   11bcc:	b	12314 <close_stdout@@Base+0xd28>
   11bd0:	b	12354 <close_stdout@@Base+0xd68>
   11bd4:	b	12380 <close_stdout@@Base+0xd94>
   11bd8:	b	123a0 <close_stdout@@Base+0xdb4>
   11bdc:	b	123a0 <close_stdout@@Base+0xdb4>
   11be0:	b	123a0 <close_stdout@@Base+0xdb4>
   11be4:	mov	r2, #0
   11be8:	str	r2, [sp, #36]	; 0x24
   11bec:	mov	r9, r2
   11bf0:	str	r2, [sp, #24]
   11bf4:	str	r2, [sp, #28]
   11bf8:	str	r2, [sp, #52]	; 0x34
   11bfc:	ldr	r0, [sp, #36]	; 0x24
   11c00:	mov	fp, #0
   11c04:	ldr	r1, [sp, #24]
   11c08:	eor	r2, r0, #1
   11c0c:	eor	r3, r1, #1
   11c10:	and	r3, r2, r3
   11c14:	and	r2, r1, r0
   11c18:	str	r3, [sp, #44]	; 0x2c
   11c1c:	str	r2, [sp, #76]	; 0x4c
   11c20:	cmn	r8, #1
   11c24:	beq	11fa4 <close_stdout@@Base+0x9b8>
   11c28:	subs	r3, fp, r8
   11c2c:	movne	r3, #1
   11c30:	cmp	r3, #0
   11c34:	beq	11fbc <close_stdout@@Base+0x9d0>
   11c38:	ldr	r3, [sp, #28]
   11c3c:	ldr	r0, [sp, #24]
   11c40:	adds	r7, r3, #0
   11c44:	movne	r7, #1
   11c48:	ands	r6, r7, r0
   11c4c:	bne	124a8 <close_stdout@@Base+0xebc>
   11c50:	ldr	r1, [sp, #32]
   11c54:	add	r5, r1, fp
   11c58:	ldrb	r4, [r5]
   11c5c:	cmp	r4, #126	; 0x7e
   11c60:	addls	pc, pc, r4, lsl #2
   11c64:	b	12228 <close_stdout@@Base+0xc3c>
   11c68:	b	12134 <close_stdout@@Base+0xb48>
   11c6c:	b	12228 <close_stdout@@Base+0xc3c>
   11c70:	b	12228 <close_stdout@@Base+0xc3c>
   11c74:	b	12228 <close_stdout@@Base+0xc3c>
   11c78:	b	12228 <close_stdout@@Base+0xc3c>
   11c7c:	b	12228 <close_stdout@@Base+0xc3c>
   11c80:	b	12228 <close_stdout@@Base+0xc3c>
   11c84:	b	1211c <close_stdout@@Base+0xb30>
   11c88:	b	12104 <close_stdout@@Base+0xb18>
   11c8c:	b	1212c <close_stdout@@Base+0xb40>
   11c90:	b	12124 <close_stdout@@Base+0xb38>
   11c94:	b	12114 <close_stdout@@Base+0xb28>
   11c98:	b	1210c <close_stdout@@Base+0xb20>
   11c9c:	b	120d0 <close_stdout@@Base+0xae4>
   11ca0:	b	12228 <close_stdout@@Base+0xc3c>
   11ca4:	b	12228 <close_stdout@@Base+0xc3c>
   11ca8:	b	12228 <close_stdout@@Base+0xc3c>
   11cac:	b	12228 <close_stdout@@Base+0xc3c>
   11cb0:	b	12228 <close_stdout@@Base+0xc3c>
   11cb4:	b	12228 <close_stdout@@Base+0xc3c>
   11cb8:	b	12228 <close_stdout@@Base+0xc3c>
   11cbc:	b	12228 <close_stdout@@Base+0xc3c>
   11cc0:	b	12228 <close_stdout@@Base+0xc3c>
   11cc4:	b	12228 <close_stdout@@Base+0xc3c>
   11cc8:	b	12228 <close_stdout@@Base+0xc3c>
   11ccc:	b	12228 <close_stdout@@Base+0xc3c>
   11cd0:	b	12228 <close_stdout@@Base+0xc3c>
   11cd4:	b	12228 <close_stdout@@Base+0xc3c>
   11cd8:	b	12228 <close_stdout@@Base+0xc3c>
   11cdc:	b	12228 <close_stdout@@Base+0xc3c>
   11ce0:	b	12228 <close_stdout@@Base+0xc3c>
   11ce4:	b	12228 <close_stdout@@Base+0xc3c>
   11ce8:	b	1205c <close_stdout@@Base+0xa70>
   11cec:	b	1205c <close_stdout@@Base+0xa70>
   11cf0:	b	1205c <close_stdout@@Base+0xa70>
   11cf4:	b	12054 <close_stdout@@Base+0xa68>
   11cf8:	b	1205c <close_stdout@@Base+0xa70>
   11cfc:	b	11f30 <close_stdout@@Base+0x944>
   11d00:	b	1205c <close_stdout@@Base+0xa70>
   11d04:	b	121d0 <close_stdout@@Base+0xbe4>
   11d08:	b	1205c <close_stdout@@Base+0xa70>
   11d0c:	b	1205c <close_stdout@@Base+0xa70>
   11d10:	b	1205c <close_stdout@@Base+0xa70>
   11d14:	b	11f30 <close_stdout@@Base+0x944>
   11d18:	b	11f30 <close_stdout@@Base+0x944>
   11d1c:	b	11f30 <close_stdout@@Base+0x944>
   11d20:	b	11f30 <close_stdout@@Base+0x944>
   11d24:	b	11f30 <close_stdout@@Base+0x944>
   11d28:	b	11f30 <close_stdout@@Base+0x944>
   11d2c:	b	11f30 <close_stdout@@Base+0x944>
   11d30:	b	11f30 <close_stdout@@Base+0x944>
   11d34:	b	11f30 <close_stdout@@Base+0x944>
   11d38:	b	11f30 <close_stdout@@Base+0x944>
   11d3c:	b	11f30 <close_stdout@@Base+0x944>
   11d40:	b	11f30 <close_stdout@@Base+0x944>
   11d44:	b	11f30 <close_stdout@@Base+0x944>
   11d48:	b	11f30 <close_stdout@@Base+0x944>
   11d4c:	b	11f30 <close_stdout@@Base+0x944>
   11d50:	b	11f30 <close_stdout@@Base+0x944>
   11d54:	b	1205c <close_stdout@@Base+0xa70>
   11d58:	b	1205c <close_stdout@@Base+0xa70>
   11d5c:	b	1205c <close_stdout@@Base+0xa70>
   11d60:	b	1205c <close_stdout@@Base+0xa70>
   11d64:	b	11e64 <close_stdout@@Base+0x878>
   11d68:	b	12228 <close_stdout@@Base+0xc3c>
   11d6c:	b	11f30 <close_stdout@@Base+0x944>
   11d70:	b	11f30 <close_stdout@@Base+0x944>
   11d74:	b	11f30 <close_stdout@@Base+0x944>
   11d78:	b	11f30 <close_stdout@@Base+0x944>
   11d7c:	b	11f30 <close_stdout@@Base+0x944>
   11d80:	b	11f30 <close_stdout@@Base+0x944>
   11d84:	b	11f30 <close_stdout@@Base+0x944>
   11d88:	b	11f30 <close_stdout@@Base+0x944>
   11d8c:	b	11f30 <close_stdout@@Base+0x944>
   11d90:	b	11f30 <close_stdout@@Base+0x944>
   11d94:	b	11f30 <close_stdout@@Base+0x944>
   11d98:	b	11f30 <close_stdout@@Base+0x944>
   11d9c:	b	11f30 <close_stdout@@Base+0x944>
   11da0:	b	11f30 <close_stdout@@Base+0x944>
   11da4:	b	11f30 <close_stdout@@Base+0x944>
   11da8:	b	11f30 <close_stdout@@Base+0x944>
   11dac:	b	11f30 <close_stdout@@Base+0x944>
   11db0:	b	11f30 <close_stdout@@Base+0x944>
   11db4:	b	11f30 <close_stdout@@Base+0x944>
   11db8:	b	11f30 <close_stdout@@Base+0x944>
   11dbc:	b	11f30 <close_stdout@@Base+0x944>
   11dc0:	b	11f30 <close_stdout@@Base+0x944>
   11dc4:	b	11f30 <close_stdout@@Base+0x944>
   11dc8:	b	11f30 <close_stdout@@Base+0x944>
   11dcc:	b	11f30 <close_stdout@@Base+0x944>
   11dd0:	b	11f30 <close_stdout@@Base+0x944>
   11dd4:	b	1205c <close_stdout@@Base+0xa70>
   11dd8:	b	121b4 <close_stdout@@Base+0xbc8>
   11ddc:	b	11f30 <close_stdout@@Base+0x944>
   11de0:	b	1205c <close_stdout@@Base+0xa70>
   11de4:	b	11f30 <close_stdout@@Base+0x944>
   11de8:	b	1205c <close_stdout@@Base+0xa70>
   11dec:	b	11f30 <close_stdout@@Base+0x944>
   11df0:	b	11f30 <close_stdout@@Base+0x944>
   11df4:	b	11f30 <close_stdout@@Base+0x944>
   11df8:	b	11f30 <close_stdout@@Base+0x944>
   11dfc:	b	11f30 <close_stdout@@Base+0x944>
   11e00:	b	11f30 <close_stdout@@Base+0x944>
   11e04:	b	11f30 <close_stdout@@Base+0x944>
   11e08:	b	11f30 <close_stdout@@Base+0x944>
   11e0c:	b	11f30 <close_stdout@@Base+0x944>
   11e10:	b	11f30 <close_stdout@@Base+0x944>
   11e14:	b	11f30 <close_stdout@@Base+0x944>
   11e18:	b	11f30 <close_stdout@@Base+0x944>
   11e1c:	b	11f30 <close_stdout@@Base+0x944>
   11e20:	b	11f30 <close_stdout@@Base+0x944>
   11e24:	b	11f30 <close_stdout@@Base+0x944>
   11e28:	b	11f30 <close_stdout@@Base+0x944>
   11e2c:	b	11f30 <close_stdout@@Base+0x944>
   11e30:	b	11f30 <close_stdout@@Base+0x944>
   11e34:	b	11f30 <close_stdout@@Base+0x944>
   11e38:	b	11f30 <close_stdout@@Base+0x944>
   11e3c:	b	11f30 <close_stdout@@Base+0x944>
   11e40:	b	11f30 <close_stdout@@Base+0x944>
   11e44:	b	11f30 <close_stdout@@Base+0x944>
   11e48:	b	11f30 <close_stdout@@Base+0x944>
   11e4c:	b	11f30 <close_stdout@@Base+0x944>
   11e50:	b	11f30 <close_stdout@@Base+0x944>
   11e54:	b	1203c <close_stdout@@Base+0xa50>
   11e58:	b	1205c <close_stdout@@Base+0xa70>
   11e5c:	b	1203c <close_stdout@@Base+0xa50>
   11e60:	b	12054 <close_stdout@@Base+0xa68>
   11e64:	ldr	r3, [sp, #160]	; 0xa0
   11e68:	cmp	r3, #2
   11e6c:	beq	126f8 <close_stdout@@Base+0x110c>
   11e70:	cmp	r3, #3
   11e74:	bne	11f30 <close_stdout@@Base+0x944>
   11e78:	ldr	r1, [sp, #164]	; 0xa4
   11e7c:	tst	r1, #4
   11e80:	beq	11f30 <close_stdout@@Base+0x944>
   11e84:	add	r3, fp, #2
   11e88:	cmp	r8, r3
   11e8c:	bls	11f30 <close_stdout@@Base+0x944>
   11e90:	ldrb	r2, [r5, #1]
   11e94:	mov	r1, #1
   11e98:	cmp	r2, #63	; 0x3f
   11e9c:	bne	11f30 <close_stdout@@Base+0x944>
   11ea0:	ldr	r0, [sp, #32]
   11ea4:	ldrb	ip, [r0, r3]
   11ea8:	sub	r0, ip, #33	; 0x21
   11eac:	uxtb	r0, r0
   11eb0:	cmp	r0, #29
   11eb4:	bhi	11f30 <close_stdout@@Base+0x944>
   11eb8:	lsl	r1, r1, r0
   11ebc:	movw	r0, #20929	; 0x51c1
   11ec0:	movt	r0, #14336	; 0x3800
   11ec4:	and	r0, r1, r0
   11ec8:	cmp	r0, #0
   11ecc:	beq	11f30 <close_stdout@@Base+0x944>
   11ed0:	ldr	r1, [sp, #36]	; 0x24
   11ed4:	cmp	r1, #0
   11ed8:	bne	12078 <close_stdout@@Base+0xa8c>
   11edc:	cmp	r9, sl
   11ee0:	mov	r4, ip
   11ee4:	mov	fp, r3
   11ee8:	ldrcc	r0, [sp, #40]	; 0x28
   11eec:	strbcc	r2, [r0, r9]
   11ef0:	add	r2, r9, #1
   11ef4:	cmp	sl, r2
   11ef8:	ldrhi	r0, [sp, #40]	; 0x28
   11efc:	movhi	r1, #34	; 0x22
   11f00:	strbhi	r1, [r0, r2]
   11f04:	add	r2, r9, #2
   11f08:	cmp	sl, r2
   11f0c:	ldrhi	r0, [sp, #40]	; 0x28
   11f10:	movhi	r1, #34	; 0x22
   11f14:	strbhi	r1, [r0, r2]
   11f18:	add	r2, r9, #3
   11f1c:	cmp	sl, r2
   11f20:	add	r9, r9, #4
   11f24:	ldrhi	r0, [sp, #40]	; 0x28
   11f28:	movhi	r1, #63	; 0x3f
   11f2c:	strbhi	r1, [r0, r2]
   11f30:	ldr	r0, [sp, #44]	; 0x2c
   11f34:	cmp	r0, #0
   11f38:	bne	11f60 <close_stdout@@Base+0x974>
   11f3c:	ldr	r1, [sp, #48]	; 0x30
   11f40:	cmp	r1, #0
   11f44:	beq	11f60 <close_stdout@@Base+0x974>
   11f48:	ubfx	r2, r4, #5, #8
   11f4c:	and	r3, r4, #31
   11f50:	ldr	r2, [r1, r2, lsl #2]
   11f54:	lsr	r3, r2, r3
   11f58:	tst	r3, #1
   11f5c:	bne	11f68 <close_stdout@@Base+0x97c>
   11f60:	cmp	r6, #0
   11f64:	beq	11f88 <close_stdout@@Base+0x99c>
   11f68:	ldr	r2, [sp, #36]	; 0x24
   11f6c:	cmp	r2, #0
   11f70:	bne	12078 <close_stdout@@Base+0xa8c>
   11f74:	cmp	r9, sl
   11f78:	ldrcc	r0, [sp, #40]	; 0x28
   11f7c:	movcc	r3, #92	; 0x5c
   11f80:	strbcc	r3, [r0, r9]
   11f84:	add	r9, r9, #1
   11f88:	add	fp, fp, #1
   11f8c:	cmp	r9, sl
   11f90:	ldrcc	r1, [sp, #40]	; 0x28
   11f94:	strbcc	r4, [r1, r9]
   11f98:	cmn	r8, #1
   11f9c:	add	r9, r9, #1
   11fa0:	bne	11c28 <close_stdout@@Base+0x63c>
   11fa4:	ldr	r2, [sp, #32]
   11fa8:	ldrb	r3, [r2, fp]
   11fac:	adds	r3, r3, #0
   11fb0:	movne	r3, #1
   11fb4:	cmp	r3, #0
   11fb8:	bne	11c38 <close_stdout@@Base+0x64c>
   11fbc:	ldr	r3, [sp, #160]	; 0xa0
   11fc0:	cmp	r9, #0
   11fc4:	cmpeq	r3, #2
   11fc8:	bne	11fd8 <close_stdout@@Base+0x9ec>
   11fcc:	ldr	r0, [sp, #36]	; 0x24
   11fd0:	cmp	r0, #0
   11fd4:	bne	12078 <close_stdout@@Base+0xa8c>
   11fd8:	ldr	r1, [sp, #36]	; 0x24
   11fdc:	ldr	r2, [sp, #52]	; 0x34
   11fe0:	eor	r3, r1, #1
   11fe4:	cmp	r2, #0
   11fe8:	moveq	r3, #0
   11fec:	andne	r3, r3, #1
   11ff0:	cmp	r3, #0
   11ff4:	beq	12020 <close_stdout@@Base+0xa34>
   11ff8:	ldrb	r3, [r2]
   11ffc:	cmp	r3, #0
   12000:	beq	12020 <close_stdout@@Base+0xa34>
   12004:	ldr	r1, [sp, #40]	; 0x28
   12008:	cmp	sl, r9
   1200c:	strbhi	r3, [r1, r9]
   12010:	ldrb	r3, [r2, #1]!
   12014:	add	r9, r9, #1
   12018:	cmp	r3, #0
   1201c:	bne	12008 <close_stdout@@Base+0xa1c>
   12020:	cmp	r9, sl
   12024:	movcs	r0, r9
   12028:	ldrcc	r1, [sp, #40]	; 0x28
   1202c:	movcc	r3, #0
   12030:	movcc	r0, r9
   12034:	strbcc	r3, [r1, r9]
   12038:	b	120b4 <close_stdout@@Base+0xac8>
   1203c:	cmn	r8, #1
   12040:	beq	12708 <close_stdout@@Base+0x111c>
   12044:	subs	r3, r8, #1
   12048:	movne	r3, #1
   1204c:	cmp	r3, #0
   12050:	bne	11f30 <close_stdout@@Base+0x944>
   12054:	cmp	fp, #0
   12058:	bne	11f30 <close_stdout@@Base+0x944>
   1205c:	ldr	r3, [sp, #36]	; 0x24
   12060:	ldr	r0, [sp, #160]	; 0xa0
   12064:	cmp	r0, #2
   12068:	movne	r3, #0
   1206c:	andeq	r3, r3, #1
   12070:	cmp	r3, #0
   12074:	beq	11f30 <close_stdout@@Base+0x944>
   12078:	ldr	r2, [sp, #164]	; 0xa4
   1207c:	mov	ip, #0
   12080:	ldr	r0, [sp, #160]	; 0xa0
   12084:	bic	r3, r2, #2
   12088:	ldr	r1, [sp, #72]	; 0x48
   1208c:	ldr	r2, [sp, #68]	; 0x44
   12090:	stm	sp, {r0, r3}
   12094:	mov	r3, r8
   12098:	str	r1, [sp, #12]
   1209c:	mov	r1, sl
   120a0:	str	r2, [sp, #16]
   120a4:	ldr	r0, [sp, #40]	; 0x28
   120a8:	ldr	r2, [sp, #32]
   120ac:	str	ip, [sp, #8]
   120b0:	bl	11b48 <close_stdout@@Base+0x55c>
   120b4:	ldr	r1, [sp, #56]	; 0x38
   120b8:	ldr	r2, [sp, #116]	; 0x74
   120bc:	ldr	r3, [r1]
   120c0:	cmp	r2, r3
   120c4:	bne	127f8 <close_stdout@@Base+0x120c>
   120c8:	add	sp, sp, #124	; 0x7c
   120cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120d0:	mov	r3, #114	; 0x72
   120d4:	ldr	r2, [sp, #36]	; 0x24
   120d8:	ldr	r0, [sp, #160]	; 0xa0
   120dc:	cmp	r0, #2
   120e0:	movne	r2, #0
   120e4:	andeq	r2, r2, #1
   120e8:	cmp	r2, #0
   120ec:	bne	12078 <close_stdout@@Base+0xa8c>
   120f0:	ldr	r1, [sp, #24]
   120f4:	cmp	r1, #0
   120f8:	beq	11f30 <close_stdout@@Base+0x944>
   120fc:	mov	r4, r3
   12100:	b	11f68 <close_stdout@@Base+0x97c>
   12104:	mov	r3, #98	; 0x62
   12108:	b	120f0 <close_stdout@@Base+0xb04>
   1210c:	mov	r3, #102	; 0x66
   12110:	b	120f0 <close_stdout@@Base+0xb04>
   12114:	mov	r3, #118	; 0x76
   12118:	b	120f0 <close_stdout@@Base+0xb04>
   1211c:	mov	r3, #97	; 0x61
   12120:	b	120f0 <close_stdout@@Base+0xb04>
   12124:	mov	r3, #110	; 0x6e
   12128:	b	120d4 <close_stdout@@Base+0xae8>
   1212c:	mov	r3, #116	; 0x74
   12130:	b	120d4 <close_stdout@@Base+0xae8>
   12134:	ldr	r2, [sp, #24]
   12138:	cmp	r2, #0
   1213c:	beq	126e4 <close_stdout@@Base+0x10f8>
   12140:	ldr	r3, [sp, #36]	; 0x24
   12144:	cmp	r3, #0
   12148:	bne	12078 <close_stdout@@Base+0xa8c>
   1214c:	cmp	r9, sl
   12150:	add	r2, r9, #1
   12154:	ldrcc	r0, [sp, #40]	; 0x28
   12158:	movcc	r3, #92	; 0x5c
   1215c:	strbcc	r3, [r0, r9]
   12160:	add	r3, fp, #1
   12164:	cmp	r8, r3
   12168:	bls	121a8 <close_stdout@@Base+0xbbc>
   1216c:	ldr	r1, [sp, #32]
   12170:	ldrb	r3, [r1, r3]
   12174:	sub	r3, r3, #48	; 0x30
   12178:	cmp	r3, #9
   1217c:	bhi	121a8 <close_stdout@@Base+0xbbc>
   12180:	cmp	sl, r2
   12184:	ldrhi	r0, [sp, #40]	; 0x28
   12188:	movhi	r3, #48	; 0x30
   1218c:	strbhi	r3, [r0, r2]
   12190:	add	r3, r9, #2
   12194:	cmp	sl, r3
   12198:	ldrhi	r1, [sp, #40]	; 0x28
   1219c:	movhi	r2, #48	; 0x30
   121a0:	strbhi	r2, [r1, r3]
   121a4:	add	r2, r9, #3
   121a8:	mov	r9, r2
   121ac:	mov	r4, #48	; 0x30
   121b0:	b	11f3c <close_stdout@@Base+0x950>
   121b4:	ldr	r1, [sp, #76]	; 0x4c
   121b8:	cmp	r1, #0
   121bc:	beq	121c8 <close_stdout@@Base+0xbdc>
   121c0:	cmp	r7, #0
   121c4:	bne	11f88 <close_stdout@@Base+0x99c>
   121c8:	mov	r3, r4
   121cc:	b	120d4 <close_stdout@@Base+0xae8>
   121d0:	ldr	r1, [sp, #160]	; 0xa0
   121d4:	cmp	r1, #2
   121d8:	bne	11f30 <close_stdout@@Base+0x944>
   121dc:	ldr	r2, [sp, #36]	; 0x24
   121e0:	cmp	r2, #0
   121e4:	bne	12078 <close_stdout@@Base+0xa8c>
   121e8:	cmp	r9, sl
   121ec:	ldrcc	r0, [sp, #40]	; 0x28
   121f0:	movcc	r3, #39	; 0x27
   121f4:	strbcc	r3, [r0, r9]
   121f8:	add	r3, r9, #1
   121fc:	cmp	sl, r3
   12200:	ldrhi	r1, [sp, #40]	; 0x28
   12204:	movhi	r2, #92	; 0x5c
   12208:	strbhi	r2, [r1, r3]
   1220c:	add	r3, r9, #2
   12210:	cmp	sl, r3
   12214:	add	r9, r9, #3
   12218:	ldrhi	r0, [sp, #40]	; 0x28
   1221c:	movhi	r2, #39	; 0x27
   12220:	strbhi	r2, [r0, r3]
   12224:	b	11f30 <close_stdout@@Base+0x944>
   12228:	ldr	r1, [sp, #64]	; 0x40
   1222c:	cmp	r1, #1
   12230:	bne	12528 <close_stdout@@Base+0xf3c>
   12234:	bl	11020 <__ctype_b_loc@plt>
   12238:	ldr	r2, [sp, #64]	; 0x40
   1223c:	sxth	r3, r4
   12240:	str	r2, [sp, #60]	; 0x3c
   12244:	lsl	r3, r3, #1
   12248:	ldr	r2, [r0]
   1224c:	ldrh	r2, [r2, r3]
   12250:	eor	r2, r2, #16384	; 0x4000
   12254:	ubfx	r2, r2, #14, #1
   12258:	ldr	r1, [sp, #24]
   1225c:	ands	r2, r2, r1
   12260:	beq	11f30 <close_stdout@@Base+0x944>
   12264:	ldr	r3, [sp, #60]	; 0x3c
   12268:	mov	r0, #92	; 0x5c
   1226c:	ldr	r7, [sp, #36]	; 0x24
   12270:	add	r1, r3, fp
   12274:	str	r8, [sp, #60]	; 0x3c
   12278:	ldr	r3, [sp, #40]	; 0x28
   1227c:	b	122e0 <close_stdout@@Base+0xcf4>
   12280:	cmp	r7, #0
   12284:	bne	12720 <close_stdout@@Base+0x1134>
   12288:	add	ip, r9, #1
   1228c:	cmp	r9, sl
   12290:	strbcc	r0, [r3, r9]
   12294:	cmp	sl, ip
   12298:	lsrhi	r8, r4, #6
   1229c:	addhi	r8, r8, #48	; 0x30
   122a0:	strbhi	r8, [r3, ip]
   122a4:	add	ip, r9, #2
   122a8:	add	r9, r9, #3
   122ac:	cmp	sl, ip
   122b0:	ubfxhi	r8, r4, #3, #3
   122b4:	and	r4, r4, #7
   122b8:	add	r4, r4, #48	; 0x30
   122bc:	addhi	r8, r8, #48	; 0x30
   122c0:	strbhi	r8, [r3, ip]
   122c4:	add	fp, fp, #1
   122c8:	cmp	r1, fp
   122cc:	bls	1230c <close_stdout@@Base+0xd20>
   122d0:	cmp	r9, sl
   122d4:	strbcc	r4, [r3, r9]
   122d8:	ldrb	r4, [r5, #1]!
   122dc:	add	r9, r9, #1
   122e0:	cmp	r2, #0
   122e4:	bne	12280 <close_stdout@@Base+0xc94>
   122e8:	cmp	r6, #0
   122ec:	beq	122c4 <close_stdout@@Base+0xcd8>
   122f0:	add	fp, fp, #1
   122f4:	cmp	r9, sl
   122f8:	strbcc	r0, [r3, r9]
   122fc:	cmp	r1, fp
   12300:	add	r9, r9, #1
   12304:	mov	r6, #0
   12308:	bhi	122d0 <close_stdout@@Base+0xce4>
   1230c:	ldr	r8, [sp, #60]	; 0x3c
   12310:	b	11f8c <close_stdout@@Base+0x9a0>
   12314:	ldr	r3, [sp, #36]	; 0x24
   12318:	cmp	r3, #0
   1231c:	bne	12820 <close_stdout@@Base+0x1234>
   12320:	cmp	sl, #0
   12324:	beq	12738 <close_stdout@@Base+0x114c>
   12328:	ldr	r1, [sp, #40]	; 0x28
   1232c:	mov	r0, #1
   12330:	ldr	r2, [pc, #1296]	; 12848 <close_stdout@@Base+0x125c>
   12334:	mov	r3, #34	; 0x22
   12338:	str	r0, [sp, #24]
   1233c:	mov	r9, r0
   12340:	add	r2, pc, r2
   12344:	str	r0, [sp, #28]
   12348:	strb	r3, [r1]
   1234c:	str	r2, [sp, #52]	; 0x34
   12350:	b	11bfc <close_stdout@@Base+0x610>
   12354:	ldr	r3, [pc, #1264]	; 1284c <close_stdout@@Base+0x1260>
   12358:	mov	r2, #1
   1235c:	mov	r0, #3
   12360:	str	r2, [sp, #36]	; 0x24
   12364:	add	r3, pc, r3
   12368:	str	r2, [sp, #24]
   1236c:	str	r3, [sp, #52]	; 0x34
   12370:	mov	r9, #0
   12374:	str	r2, [sp, #28]
   12378:	str	r0, [sp, #160]	; 0xa0
   1237c:	b	11bfc <close_stdout@@Base+0x610>
   12380:	mov	r0, #0
   12384:	mov	r1, #1
   12388:	str	r0, [sp, #36]	; 0x24
   1238c:	mov	r9, r0
   12390:	str	r1, [sp, #24]
   12394:	str	r0, [sp, #28]
   12398:	str	r0, [sp, #52]	; 0x34
   1239c:	b	11bfc <close_stdout@@Base+0x610>
   123a0:	ldr	r3, [sp, #160]	; 0xa0
   123a4:	cmp	r3, #8
   123a8:	beq	123d4 <close_stdout@@Base+0xde8>
   123ac:	ldr	r0, [pc, #1180]	; 12850 <close_stdout@@Base+0x1264>
   123b0:	mov	r1, r3
   123b4:	add	r0, pc, r0
   123b8:	bl	119e4 <close_stdout@@Base+0x3f8>
   123bc:	ldr	r1, [sp, #160]	; 0xa0
   123c0:	str	r0, [sp, #72]	; 0x48
   123c4:	ldr	r0, [pc, #1160]	; 12854 <close_stdout@@Base+0x1268>
   123c8:	add	r0, pc, r0
   123cc:	bl	119e4 <close_stdout@@Base+0x3f8>
   123d0:	str	r0, [sp, #68]	; 0x44
   123d4:	ldr	r0, [sp, #36]	; 0x24
   123d8:	cmp	r0, #0
   123dc:	movne	r9, #0
   123e0:	bne	12418 <close_stdout@@Base+0xe2c>
   123e4:	ldr	r1, [sp, #72]	; 0x48
   123e8:	ldrb	r3, [r1]
   123ec:	cmp	r3, #0
   123f0:	beq	127f0 <close_stdout@@Base+0x1204>
   123f4:	mov	r2, r1
   123f8:	ldr	r1, [sp, #40]	; 0x28
   123fc:	mov	r9, r0
   12400:	cmp	r9, sl
   12404:	strbcc	r3, [r1, r9]
   12408:	ldrb	r3, [r2, #1]!
   1240c:	add	r9, r9, #1
   12410:	cmp	r3, #0
   12414:	bne	12400 <close_stdout@@Base+0xe14>
   12418:	ldr	r0, [sp, #68]	; 0x44
   1241c:	str	r0, [sp, #52]	; 0x34
   12420:	bl	11038 <strlen@plt>
   12424:	mov	r2, #1
   12428:	str	r2, [sp, #24]
   1242c:	str	r0, [sp, #28]
   12430:	b	11bfc <close_stdout@@Base+0x610>
   12434:	ldr	r3, [pc, #1052]	; 12858 <close_stdout@@Base+0x126c>
   12438:	mov	r2, #0
   1243c:	mov	r1, #1
   12440:	mov	r0, #2
   12444:	add	r3, pc, r3
   12448:	str	r1, [sp, #36]	; 0x24
   1244c:	str	r2, [sp, #24]
   12450:	mov	r9, r2
   12454:	str	r1, [sp, #28]
   12458:	str	r3, [sp, #52]	; 0x34
   1245c:	str	r0, [sp, #160]	; 0xa0
   12460:	b	11bfc <close_stdout@@Base+0x610>
   12464:	ldr	r3, [sp, #36]	; 0x24
   12468:	cmp	r3, #0
   1246c:	bne	127fc <close_stdout@@Base+0x1210>
   12470:	cmp	sl, #0
   12474:	beq	12758 <close_stdout@@Base+0x116c>
   12478:	ldr	r1, [sp, #40]	; 0x28
   1247c:	mov	r3, #39	; 0x27
   12480:	ldr	r2, [sp, #36]	; 0x24
   12484:	mov	r0, #1
   12488:	mov	r9, r0
   1248c:	str	r0, [sp, #28]
   12490:	strb	r3, [r1]
   12494:	ldr	r3, [pc, #960]	; 1285c <close_stdout@@Base+0x1270>
   12498:	str	r2, [sp, #24]
   1249c:	add	r3, pc, r3
   124a0:	str	r3, [sp, #52]	; 0x34
   124a4:	b	11bfc <close_stdout@@Base+0x610>
   124a8:	ldr	r2, [sp, #28]
   124ac:	cmp	r2, #1
   124b0:	add	r4, fp, r2
   124b4:	movls	r3, #0
   124b8:	movhi	r3, #1
   124bc:	cmn	r8, #1
   124c0:	movne	r3, #0
   124c4:	cmp	r3, #0
   124c8:	beq	124d8 <close_stdout@@Base+0xeec>
   124cc:	ldr	r0, [sp, #32]
   124d0:	bl	11038 <strlen@plt>
   124d4:	mov	r8, r0
   124d8:	cmp	r8, r4
   124dc:	ldrcc	r3, [sp, #32]
   124e0:	movcc	r6, #0
   124e4:	addcc	r5, r3, fp
   124e8:	bcc	11c58 <close_stdout@@Base+0x66c>
   124ec:	ldr	r0, [sp, #32]
   124f0:	ldr	r1, [sp, #52]	; 0x34
   124f4:	add	r5, r0, fp
   124f8:	ldr	r2, [sp, #28]
   124fc:	mov	r0, r5
   12500:	bl	10f24 <memcmp@plt>
   12504:	cmp	r0, #0
   12508:	bne	12520 <close_stdout@@Base+0xf34>
   1250c:	ldr	r1, [sp, #36]	; 0x24
   12510:	cmp	r1, #0
   12514:	bne	12078 <close_stdout@@Base+0xa8c>
   12518:	mov	r6, #1
   1251c:	b	11c58 <close_stdout@@Base+0x66c>
   12520:	mov	r6, #0
   12524:	b	11c58 <close_stdout@@Base+0x66c>
   12528:	add	r7, sp, #108	; 0x6c
   1252c:	cmn	r8, #1
   12530:	mov	r3, #0
   12534:	str	r3, [sp, #108]	; 0x6c
   12538:	str	r3, [r7, #4]
   1253c:	beq	12728 <close_stdout@@Base+0x113c>
   12540:	mov	r1, #0
   12544:	ldr	r0, [sp, #32]
   12548:	mov	ip, #1
   1254c:	str	r9, [sp, #88]	; 0x58
   12550:	str	r6, [sp, #96]	; 0x60
   12554:	mov	r9, r1
   12558:	str	r5, [sp, #100]	; 0x64
   1255c:	mov	r6, ip
   12560:	mov	r5, r7
   12564:	add	r3, sp, #104	; 0x68
   12568:	sub	r0, r0, #1
   1256c:	str	r3, [sp, #80]	; 0x50
   12570:	str	r0, [sp, #84]	; 0x54
   12574:	str	r1, [sp, #60]	; 0x3c
   12578:	str	r4, [sp, #92]	; 0x5c
   1257c:	ldr	r2, [sp, #32]
   12580:	add	r7, r9, fp
   12584:	add	r0, sp, #104	; 0x68
   12588:	mov	r3, r5
   1258c:	add	r4, r2, r7
   12590:	rsb	r2, r7, r8
   12594:	mov	r1, r4
   12598:	bl	10fa8 <mbrtowc@plt>
   1259c:	subs	r2, r0, #0
   125a0:	beq	126ac <close_stdout@@Base+0x10c0>
   125a4:	cmn	r2, #1
   125a8:	beq	127d4 <close_stdout@@Base+0x11e8>
   125ac:	cmn	r2, #2
   125b0:	beq	12778 <close_stdout@@Base+0x118c>
   125b4:	ldr	r3, [sp, #36]	; 0x24
   125b8:	ldr	r0, [sp, #160]	; 0xa0
   125bc:	cmp	r0, #2
   125c0:	movne	r3, #0
   125c4:	andeq	r3, r3, #1
   125c8:	cmp	r3, #0
   125cc:	beq	12688 <close_stdout@@Base+0x109c>
   125d0:	cmp	r2, #1
   125d4:	beq	12688 <close_stdout@@Base+0x109c>
   125d8:	ldr	r1, [sp, #84]	; 0x54
   125dc:	add	r3, r1, r2
   125e0:	add	r7, r3, r7
   125e4:	ldrb	r3, [r4, #1]!
   125e8:	sub	r3, r3, #91	; 0x5b
   125ec:	cmp	r3, #33	; 0x21
   125f0:	addls	pc, pc, r3, lsl #2
   125f4:	b	12680 <close_stdout@@Base+0x1094>
   125f8:	b	12078 <close_stdout@@Base+0xa8c>
   125fc:	b	12078 <close_stdout@@Base+0xa8c>
   12600:	b	12680 <close_stdout@@Base+0x1094>
   12604:	b	12078 <close_stdout@@Base+0xa8c>
   12608:	b	12680 <close_stdout@@Base+0x1094>
   1260c:	b	12078 <close_stdout@@Base+0xa8c>
   12610:	b	12680 <close_stdout@@Base+0x1094>
   12614:	b	12680 <close_stdout@@Base+0x1094>
   12618:	b	12680 <close_stdout@@Base+0x1094>
   1261c:	b	12680 <close_stdout@@Base+0x1094>
   12620:	b	12680 <close_stdout@@Base+0x1094>
   12624:	b	12680 <close_stdout@@Base+0x1094>
   12628:	b	12680 <close_stdout@@Base+0x1094>
   1262c:	b	12680 <close_stdout@@Base+0x1094>
   12630:	b	12680 <close_stdout@@Base+0x1094>
   12634:	b	12680 <close_stdout@@Base+0x1094>
   12638:	b	12680 <close_stdout@@Base+0x1094>
   1263c:	b	12680 <close_stdout@@Base+0x1094>
   12640:	b	12680 <close_stdout@@Base+0x1094>
   12644:	b	12680 <close_stdout@@Base+0x1094>
   12648:	b	12680 <close_stdout@@Base+0x1094>
   1264c:	b	12680 <close_stdout@@Base+0x1094>
   12650:	b	12680 <close_stdout@@Base+0x1094>
   12654:	b	12680 <close_stdout@@Base+0x1094>
   12658:	b	12680 <close_stdout@@Base+0x1094>
   1265c:	b	12680 <close_stdout@@Base+0x1094>
   12660:	b	12680 <close_stdout@@Base+0x1094>
   12664:	b	12680 <close_stdout@@Base+0x1094>
   12668:	b	12680 <close_stdout@@Base+0x1094>
   1266c:	b	12680 <close_stdout@@Base+0x1094>
   12670:	b	12680 <close_stdout@@Base+0x1094>
   12674:	b	12680 <close_stdout@@Base+0x1094>
   12678:	b	12680 <close_stdout@@Base+0x1094>
   1267c:	b	12078 <close_stdout@@Base+0xa8c>
   12680:	cmp	r4, r7
   12684:	bne	125e4 <close_stdout@@Base+0xff8>
   12688:	ldr	r0, [sp, #104]	; 0x68
   1268c:	add	r9, r9, r2
   12690:	bl	10f60 <iswprint@plt>
   12694:	cmp	r0, #0
   12698:	mov	r0, r5
   1269c:	moveq	r6, #0
   126a0:	bl	10f18 <mbsinit@plt>
   126a4:	cmp	r0, #0
   126a8:	beq	1257c <close_stdout@@Base+0xf90>
   126ac:	mov	ip, r6
   126b0:	eor	r2, ip, #1
   126b4:	str	r9, [sp, #60]	; 0x3c
   126b8:	ldr	r4, [sp, #92]	; 0x5c
   126bc:	uxtb	r2, r2
   126c0:	ldr	r9, [sp, #88]	; 0x58
   126c4:	ldr	r6, [sp, #96]	; 0x60
   126c8:	ldr	r5, [sp, #100]	; 0x64
   126cc:	ldr	r3, [sp, #60]	; 0x3c
   126d0:	cmp	r3, #1
   126d4:	bls	12258 <close_stdout@@Base+0xc6c>
   126d8:	ldr	r0, [sp, #24]
   126dc:	and	r2, r2, r0
   126e0:	b	12264 <close_stdout@@Base+0xc78>
   126e4:	ldr	r2, [sp, #164]	; 0xa4
   126e8:	tst	r2, #1
   126ec:	addne	fp, fp, #1
   126f0:	bne	11c20 <close_stdout@@Base+0x634>
   126f4:	b	11f30 <close_stdout@@Base+0x944>
   126f8:	ldr	r0, [sp, #36]	; 0x24
   126fc:	cmp	r0, #0
   12700:	beq	11f30 <close_stdout@@Base+0x944>
   12704:	b	12078 <close_stdout@@Base+0xa8c>
   12708:	ldr	r2, [sp, #32]
   1270c:	ldrb	r3, [r2, #1]
   12710:	adds	r3, r3, #0
   12714:	movne	r3, #1
   12718:	b	1204c <close_stdout@@Base+0xa60>
   1271c:	bl	11104 <abort@plt>
   12720:	ldr	r8, [sp, #60]	; 0x3c
   12724:	b	12078 <close_stdout@@Base+0xa8c>
   12728:	ldr	r0, [sp, #32]
   1272c:	bl	11038 <strlen@plt>
   12730:	mov	r8, r0
   12734:	b	12540 <close_stdout@@Base+0xf54>
   12738:	ldr	r2, [pc, #288]	; 12860 <close_stdout@@Base+0x1274>
   1273c:	mov	r1, #1
   12740:	mov	r9, r1
   12744:	str	r1, [sp, #24]
   12748:	add	r2, pc, r2
   1274c:	str	r1, [sp, #28]
   12750:	str	r2, [sp, #52]	; 0x34
   12754:	b	11bfc <close_stdout@@Base+0x610>
   12758:	ldr	r2, [pc, #260]	; 12864 <close_stdout@@Base+0x1278>
   1275c:	mov	r3, #1
   12760:	mov	r9, r3
   12764:	str	r3, [sp, #28]
   12768:	add	r2, pc, r2
   1276c:	str	sl, [sp, #24]
   12770:	str	r2, [sp, #52]	; 0x34
   12774:	b	11bfc <close_stdout@@Base+0x610>
   12778:	cmp	r8, r7
   1277c:	str	r9, [sp, #60]	; 0x3c
   12780:	mov	ip, r4
   12784:	ldr	r6, [sp, #96]	; 0x60
   12788:	ldr	r9, [sp, #88]	; 0x58
   1278c:	ldr	r4, [sp, #92]	; 0x5c
   12790:	ldr	r5, [sp, #100]	; 0x64
   12794:	bls	127cc <close_stdout@@Base+0x11e0>
   12798:	ldrb	r3, [ip]
   1279c:	cmp	r3, #0
   127a0:	beq	127cc <close_stdout@@Base+0x11e0>
   127a4:	ldr	r3, [sp, #60]	; 0x3c
   127a8:	b	127b8 <close_stdout@@Base+0x11cc>
   127ac:	ldrb	r2, [r5, r3]
   127b0:	cmp	r2, #0
   127b4:	beq	127c8 <close_stdout@@Base+0x11dc>
   127b8:	add	r3, r3, #1
   127bc:	add	r2, fp, r3
   127c0:	cmp	r8, r2
   127c4:	bhi	127ac <close_stdout@@Base+0x11c0>
   127c8:	str	r3, [sp, #60]	; 0x3c
   127cc:	mov	r2, #1
   127d0:	b	126cc <close_stdout@@Base+0x10e0>
   127d4:	str	r9, [sp, #60]	; 0x3c
   127d8:	mov	r2, #1
   127dc:	ldr	r4, [sp, #92]	; 0x5c
   127e0:	ldr	r6, [sp, #96]	; 0x60
   127e4:	ldr	r9, [sp, #88]	; 0x58
   127e8:	ldr	r5, [sp, #100]	; 0x64
   127ec:	b	126cc <close_stdout@@Base+0x10e0>
   127f0:	ldr	r9, [sp, #36]	; 0x24
   127f4:	b	12418 <close_stdout@@Base+0xe2c>
   127f8:	bl	10f3c <__stack_chk_fail@plt>
   127fc:	ldr	r1, [pc, #100]	; 12868 <close_stdout@@Base+0x127c>
   12800:	mov	r3, #0
   12804:	mov	r0, #1
   12808:	str	r3, [sp, #24]
   1280c:	add	r1, pc, r1
   12810:	str	r0, [sp, #28]
   12814:	mov	r9, r3
   12818:	str	r1, [sp, #52]	; 0x34
   1281c:	b	11bfc <close_stdout@@Base+0x610>
   12820:	ldr	r0, [pc, #68]	; 1286c <close_stdout@@Base+0x1280>
   12824:	mov	r3, #1
   12828:	mov	r9, #0
   1282c:	str	r3, [sp, #24]
   12830:	add	r0, pc, r0
   12834:	str	r3, [sp, #28]
   12838:	str	r0, [sp, #52]	; 0x34
   1283c:	b	11bfc <close_stdout@@Base+0x610>
   12840:	muleq	r1, r4, r4
   12844:	andeq	r0, r0, r4, ror #1
   12848:	andeq	r2, r0, r8, ror r1
   1284c:	andeq	r2, r0, r4, asr r1
   12850:	andeq	r2, r0, r0, lsl r1
   12854:	andeq	r2, r0, ip, ror #1
   12858:	andeq	r2, r0, r0, ror r0
   1285c:	andeq	r2, r0, r8, lsl r0
   12860:	andeq	r1, r0, r0, ror sp
   12864:	andeq	r1, r0, ip, asr #26
   12868:	andeq	r1, r0, r8, lsr #25
   1286c:	andeq	r1, r0, r8, lsl #25
   12870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12874:	sub	sp, sp, #44	; 0x2c
   12878:	mov	r6, r0
   1287c:	mov	r9, r1
   12880:	mov	sl, r2
   12884:	mov	r4, r3
   12888:	bl	11050 <__errno_location@plt>
   1288c:	ldr	fp, [pc, #412]	; 12a30 <close_stdout@@Base+0x1444>
   12890:	cmp	r6, #0
   12894:	add	fp, pc, fp
   12898:	ldr	r5, [fp]
   1289c:	ldr	r1, [r0]
   128a0:	mov	r8, r0
   128a4:	str	r1, [sp, #36]	; 0x24
   128a8:	blt	12a28 <close_stdout@@Base+0x143c>
   128ac:	ldr	r3, [pc, #384]	; 12a34 <close_stdout@@Base+0x1448>
   128b0:	add	r3, pc, r3
   128b4:	ldr	r3, [r3]
   128b8:	cmp	r6, r3
   128bc:	bcc	12910 <close_stdout@@Base+0x1324>
   128c0:	add	r7, r6, #1
   128c4:	cmn	r7, #-536870911	; 0xe0000001
   128c8:	bhi	12a2c <close_stdout@@Base+0x1440>
   128cc:	add	r3, fp, #4
   128d0:	cmp	r5, r3
   128d4:	beq	12a00 <close_stdout@@Base+0x1414>
   128d8:	mov	r0, r5
   128dc:	lsl	r1, r7, #3
   128e0:	bl	13708 <close_stdout@@Base+0x211c>
   128e4:	mov	r5, r0
   128e8:	str	r0, [fp]
   128ec:	ldr	fp, [pc, #324]	; 12a38 <close_stdout@@Base+0x144c>
   128f0:	mov	r1, #0
   128f4:	add	fp, pc, fp
   128f8:	ldr	r0, [fp]
   128fc:	rsb	r2, r0, r7
   12900:	add	r0, r5, r0, lsl #3
   12904:	lsl	r2, r2, #3
   12908:	bl	11068 <memset@plt>
   1290c:	str	r7, [fp]
   12910:	add	r2, r4, #8
   12914:	str	r2, [sp, #32]
   12918:	ldr	r1, [r4]
   1291c:	add	fp, r5, r6, lsl #3
   12920:	ldr	lr, [sp, #32]
   12924:	mov	r2, r9
   12928:	ldr	r3, [r4, #4]
   1292c:	ldr	ip, [r5, r6, lsl #3]
   12930:	ldr	r7, [fp, #4]
   12934:	orr	r3, r3, #1
   12938:	str	r1, [sp]
   1293c:	str	r3, [sp, #4]
   12940:	mov	r1, ip
   12944:	str	lr, [sp, #8]
   12948:	mov	r0, r7
   1294c:	ldr	lr, [r4, #40]	; 0x28
   12950:	str	r3, [sp, #28]
   12954:	mov	r3, sl
   12958:	str	lr, [sp, #12]
   1295c:	ldr	lr, [r4, #44]	; 0x2c
   12960:	str	ip, [sp, #24]
   12964:	str	lr, [sp, #16]
   12968:	bl	11b48 <close_stdout@@Base+0x55c>
   1296c:	ldr	ip, [sp, #24]
   12970:	cmp	ip, r0
   12974:	bhi	129ec <close_stdout@@Base+0x1400>
   12978:	ldr	r3, [pc, #188]	; 12a3c <close_stdout@@Base+0x1450>
   1297c:	add	r1, r0, #1
   12980:	str	r1, [r5, r6, lsl #3]
   12984:	add	r3, pc, r3
   12988:	cmp	r7, r3
   1298c:	beq	129a0 <close_stdout@@Base+0x13b4>
   12990:	mov	r0, r7
   12994:	str	r1, [sp, #24]
   12998:	bl	10ef4 <free@plt>
   1299c:	ldr	r1, [sp, #24]
   129a0:	mov	r0, r1
   129a4:	str	r1, [sp, #24]
   129a8:	bl	136b0 <close_stdout@@Base+0x20c4>
   129ac:	ldr	r3, [sp, #28]
   129b0:	ldr	lr, [sp, #32]
   129b4:	mov	r2, r9
   129b8:	str	r0, [fp, #4]
   129bc:	mov	r7, r0
   129c0:	ldr	ip, [r4]
   129c4:	str	r3, [sp, #4]
   129c8:	mov	r3, sl
   129cc:	str	lr, [sp, #8]
   129d0:	str	ip, [sp]
   129d4:	ldr	ip, [r4, #40]	; 0x28
   129d8:	ldr	r1, [sp, #24]
   129dc:	str	ip, [sp, #12]
   129e0:	ldr	ip, [r4, #44]	; 0x2c
   129e4:	str	ip, [sp, #16]
   129e8:	bl	11b48 <close_stdout@@Base+0x55c>
   129ec:	ldr	r1, [sp, #36]	; 0x24
   129f0:	mov	r0, r7
   129f4:	str	r1, [r8]
   129f8:	add	sp, sp, #44	; 0x2c
   129fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a00:	lsl	r1, r7, #3
   12a04:	mov	r0, #0
   12a08:	str	r3, [sp, #24]
   12a0c:	bl	13708 <close_stdout@@Base+0x211c>
   12a10:	ldr	r3, [sp, #24]
   12a14:	mov	r5, r0
   12a18:	ldm	r3, {r0, r1}
   12a1c:	str	r5, [fp]
   12a20:	stm	r5, {r0, r1}
   12a24:	b	128ec <close_stdout@@Base+0x1300>
   12a28:	bl	11104 <abort@plt>
   12a2c:	bl	138c4 <close_stdout@@Base+0x22d8>
   12a30:	andeq	r2, r1, r4, asr #17
   12a34:	andeq	r2, r1, r4, ror r8
   12a38:	andeq	r2, r1, r0, lsr r8
   12a3c:	strdeq	r2, [r1], -r0
   12a40:	push	{r4, r5, r6, lr}
   12a44:	mov	r5, r0
   12a48:	bl	11050 <__errno_location@plt>
   12a4c:	cmp	r5, #0
   12a50:	mov	r1, #48	; 0x30
   12a54:	mov	r4, r0
   12a58:	ldr	r0, [pc, #24]	; 12a78 <close_stdout@@Base+0x148c>
   12a5c:	ldr	r6, [r4]
   12a60:	add	r0, pc, r0
   12a64:	add	r0, r0, #256	; 0x100
   12a68:	movne	r0, r5
   12a6c:	bl	13884 <close_stdout@@Base+0x2298>
   12a70:	str	r6, [r4]
   12a74:	pop	{r4, r5, r6, pc}
   12a78:	andeq	r2, r1, r4, lsl r7
   12a7c:	cmp	r0, #0
   12a80:	beq	12a8c <close_stdout@@Base+0x14a0>
   12a84:	ldr	r0, [r0]
   12a88:	bx	lr
   12a8c:	ldr	r0, [pc, #12]	; 12aa0 <close_stdout@@Base+0x14b4>
   12a90:	add	r0, pc, r0
   12a94:	add	r0, r0, #256	; 0x100
   12a98:	ldr	r0, [r0]
   12a9c:	bx	lr
   12aa0:	andeq	r2, r1, r4, ror #13
   12aa4:	cmp	r0, #0
   12aa8:	beq	12ab4 <close_stdout@@Base+0x14c8>
   12aac:	str	r1, [r0]
   12ab0:	bx	lr
   12ab4:	ldr	r0, [pc, #12]	; 12ac8 <close_stdout@@Base+0x14dc>
   12ab8:	add	r0, pc, r0
   12abc:	add	r0, r0, #256	; 0x100
   12ac0:	str	r1, [r0]
   12ac4:	bx	lr
   12ac8:			; <UNDEFINED> instruction: 0x000126bc
   12acc:	cmp	r0, #0
   12ad0:	movne	r3, r0
   12ad4:	beq	12b04 <close_stdout@@Base+0x1518>
   12ad8:	lsr	ip, r1, #5
   12adc:	and	r1, r1, #31
   12ae0:	add	r3, r3, ip, lsl #2
   12ae4:	ldr	ip, [r3, #8]
   12ae8:	lsr	r0, ip, r1
   12aec:	eor	r2, r0, r2
   12af0:	and	r0, r0, #1
   12af4:	and	r2, r2, #1
   12af8:	eor	ip, ip, r2, lsl r1
   12afc:	str	ip, [r3, #8]
   12b00:	bx	lr
   12b04:	ldr	r3, [pc, #8]	; 12b14 <close_stdout@@Base+0x1528>
   12b08:	add	r3, pc, r3
   12b0c:	add	r3, r3, #256	; 0x100
   12b10:	b	12ad8 <close_stdout@@Base+0x14ec>
   12b14:	andeq	r2, r1, ip, ror #12
   12b18:	subs	r3, r0, #0
   12b1c:	beq	12b2c <close_stdout@@Base+0x1540>
   12b20:	ldr	r0, [r3, #4]
   12b24:	str	r1, [r3, #4]
   12b28:	bx	lr
   12b2c:	ldr	r3, [pc, #8]	; 12b3c <close_stdout@@Base+0x1550>
   12b30:	add	r3, pc, r3
   12b34:	add	r3, r3, #256	; 0x100
   12b38:	b	12b20 <close_stdout@@Base+0x1534>
   12b3c:	andeq	r2, r1, r4, asr #12
   12b40:	cmp	r0, #0
   12b44:	push	{r3, lr}
   12b48:	beq	12b6c <close_stdout@@Base+0x1580>
   12b4c:	cmp	r2, #0
   12b50:	cmpne	r1, #0
   12b54:	mov	r3, #8
   12b58:	strne	r1, [r0, #40]	; 0x28
   12b5c:	str	r3, [r0]
   12b60:	strne	r2, [r0, #44]	; 0x2c
   12b64:	popne	{r3, pc}
   12b68:	bl	11104 <abort@plt>
   12b6c:	ldr	r0, [pc, #8]	; 12b7c <close_stdout@@Base+0x1590>
   12b70:	add	r0, pc, r0
   12b74:	add	r0, r0, #256	; 0x100
   12b78:	b	12b4c <close_stdout@@Base+0x1560>
   12b7c:	andeq	r2, r1, r4, lsl #12
   12b80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b84:	sub	sp, sp, #24
   12b88:	mov	r7, r0
   12b8c:	mov	sl, r1
   12b90:	ldr	r4, [sp, #56]	; 0x38
   12b94:	mov	r9, r2
   12b98:	mov	r8, r3
   12b9c:	cmp	r4, #0
   12ba0:	beq	12bf4 <close_stdout@@Base+0x1608>
   12ba4:	bl	11050 <__errno_location@plt>
   12ba8:	ldr	r3, [r4]
   12bac:	add	lr, r4, #8
   12bb0:	mov	r1, sl
   12bb4:	mov	r2, r9
   12bb8:	ldr	r6, [r0]
   12bbc:	mov	r5, r0
   12bc0:	str	r3, [sp]
   12bc4:	mov	r0, r7
   12bc8:	ldr	ip, [r4, #4]
   12bcc:	mov	r3, r8
   12bd0:	stmib	sp, {ip, lr}
   12bd4:	ldr	ip, [r4, #40]	; 0x28
   12bd8:	str	ip, [sp, #12]
   12bdc:	ldr	ip, [r4, #44]	; 0x2c
   12be0:	str	ip, [sp, #16]
   12be4:	bl	11b48 <close_stdout@@Base+0x55c>
   12be8:	str	r6, [r5]
   12bec:	add	sp, sp, #24
   12bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12bf4:	ldr	r4, [pc, #8]	; 12c04 <close_stdout@@Base+0x1618>
   12bf8:	add	r4, pc, r4
   12bfc:	add	r4, r4, #256	; 0x100
   12c00:	b	12ba4 <close_stdout@@Base+0x15b8>
   12c04:	andeq	r2, r1, ip, ror r5
   12c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c0c:	subs	r4, r3, #0
   12c10:	sub	sp, sp, #36	; 0x24
   12c14:	mov	r7, r0
   12c18:	mov	r6, r1
   12c1c:	mov	r5, r2
   12c20:	beq	12cdc <close_stdout@@Base+0x16f0>
   12c24:	bl	11050 <__errno_location@plt>
   12c28:	ldr	r3, [r4]
   12c2c:	ldr	sl, [r4, #4]
   12c30:	add	r9, r4, #8
   12c34:	mov	r8, r0
   12c38:	mov	r0, #0
   12c3c:	ldr	r2, [r8]
   12c40:	cmp	r5, r0
   12c44:	orreq	sl, sl, #1
   12c48:	str	r9, [sp, #8]
   12c4c:	mov	r1, r0
   12c50:	stm	sp, {r3, sl}
   12c54:	mov	r3, r6
   12c58:	ldr	ip, [r4, #40]	; 0x28
   12c5c:	str	r2, [sp, #28]
   12c60:	mov	r2, r7
   12c64:	str	ip, [sp, #12]
   12c68:	ldr	ip, [r4, #44]	; 0x2c
   12c6c:	str	ip, [sp, #16]
   12c70:	bl	11b48 <close_stdout@@Base+0x55c>
   12c74:	add	r1, r0, #1
   12c78:	mov	fp, r0
   12c7c:	str	r1, [sp, #24]
   12c80:	mov	r0, r1
   12c84:	bl	136b0 <close_stdout@@Base+0x20c4>
   12c88:	ldr	lr, [r4]
   12c8c:	str	sl, [sp, #4]
   12c90:	mov	r3, r6
   12c94:	str	r9, [sp, #8]
   12c98:	mov	r2, r7
   12c9c:	str	lr, [sp]
   12ca0:	ldr	lr, [r4, #40]	; 0x28
   12ca4:	ldr	r1, [sp, #24]
   12ca8:	str	lr, [sp, #12]
   12cac:	ldr	lr, [r4, #44]	; 0x2c
   12cb0:	str	lr, [sp, #16]
   12cb4:	str	r0, [sp, #24]
   12cb8:	bl	11b48 <close_stdout@@Base+0x55c>
   12cbc:	ldr	r3, [sp, #28]
   12cc0:	cmp	r5, #0
   12cc4:	str	r3, [r8]
   12cc8:	ldr	ip, [sp, #24]
   12ccc:	strne	fp, [r5]
   12cd0:	mov	r0, ip
   12cd4:	add	sp, sp, #36	; 0x24
   12cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cdc:	ldr	r4, [pc, #8]	; 12cec <close_stdout@@Base+0x1700>
   12ce0:	add	r4, pc, r4
   12ce4:	add	r4, r4, #256	; 0x100
   12ce8:	b	12c24 <close_stdout@@Base+0x1638>
   12cec:	muleq	r1, r4, r4
   12cf0:	mov	r3, r2
   12cf4:	mov	r2, #0
   12cf8:	b	12c08 <close_stdout@@Base+0x161c>
   12cfc:	ldr	r2, [pc, #152]	; 12d9c <close_stdout@@Base+0x17b0>
   12d00:	push	{r3, r4, r5, r6, r7, lr}
   12d04:	add	r2, pc, r2
   12d08:	ldr	r3, [pc, #144]	; 12da0 <close_stdout@@Base+0x17b4>
   12d0c:	ldr	r6, [r2]
   12d10:	add	r3, pc, r3
   12d14:	cmp	r6, #1
   12d18:	ldr	r7, [r3]
   12d1c:	movhi	r4, #1
   12d20:	movhi	r5, r7
   12d24:	bls	12d40 <close_stdout@@Base+0x1754>
   12d28:	ldr	r0, [r5, #12]
   12d2c:	add	r4, r4, #1
   12d30:	bl	10ef4 <free@plt>
   12d34:	cmp	r4, r6
   12d38:	add	r5, r5, #8
   12d3c:	bne	12d28 <close_stdout@@Base+0x173c>
   12d40:	ldr	r4, [pc, #92]	; 12da4 <close_stdout@@Base+0x17b8>
   12d44:	ldr	r0, [r7, #4]
   12d48:	add	r4, pc, r4
   12d4c:	cmp	r0, r4
   12d50:	beq	12d68 <close_stdout@@Base+0x177c>
   12d54:	bl	10ef4 <free@plt>
   12d58:	ldr	r3, [pc, #72]	; 12da8 <close_stdout@@Base+0x17bc>
   12d5c:	mov	r2, #256	; 0x100
   12d60:	add	r3, pc, r3
   12d64:	stmib	r3, {r2, r4}
   12d68:	ldr	r4, [pc, #60]	; 12dac <close_stdout@@Base+0x17c0>
   12d6c:	add	r4, pc, r4
   12d70:	add	r5, r4, #4
   12d74:	cmp	r7, r5
   12d78:	beq	12d88 <close_stdout@@Base+0x179c>
   12d7c:	mov	r0, r7
   12d80:	bl	10ef4 <free@plt>
   12d84:	str	r5, [r4]
   12d88:	ldr	r3, [pc, #32]	; 12db0 <close_stdout@@Base+0x17c4>
   12d8c:	mov	r2, #1
   12d90:	add	r3, pc, r3
   12d94:	str	r2, [r3]
   12d98:	pop	{r3, r4, r5, r6, r7, pc}
   12d9c:	andeq	r2, r1, r0, lsr #8
   12da0:	andeq	r2, r1, r8, asr #8
   12da4:	andeq	r2, r1, ip, lsr #8
   12da8:	strdeq	r2, [r1], -r8
   12dac:	andeq	r2, r1, ip, ror #7
   12db0:	muleq	r1, r4, r3
   12db4:	ldr	r3, [pc, #12]	; 12dc8 <close_stdout@@Base+0x17dc>
   12db8:	mvn	r2, #0
   12dbc:	add	r3, pc, r3
   12dc0:	add	r3, r3, #256	; 0x100
   12dc4:	b	12870 <close_stdout@@Base+0x1284>
   12dc8:			; <UNDEFINED> instruction: 0x000123b8
   12dcc:	ldr	r3, [pc, #8]	; 12ddc <close_stdout@@Base+0x17f0>
   12dd0:	add	r3, pc, r3
   12dd4:	add	r3, r3, #256	; 0x100
   12dd8:	b	12870 <close_stdout@@Base+0x1284>
   12ddc:	andeq	r2, r1, r4, lsr #7
   12de0:	mov	r1, r0
   12de4:	mov	r0, #0
   12de8:	b	12db4 <close_stdout@@Base+0x17c8>
   12dec:	mov	r2, r1
   12df0:	mov	r1, r0
   12df4:	mov	r0, #0
   12df8:	b	12dcc <close_stdout@@Base+0x17e0>
   12dfc:	ldr	r3, [pc, #92]	; 12e60 <close_stdout@@Base+0x1874>
   12e00:	ldr	ip, [pc, #92]	; 12e64 <close_stdout@@Base+0x1878>
   12e04:	add	r3, pc, r3
   12e08:	push	{r4, r5, r6, r7, lr}
   12e0c:	sub	sp, sp, #60	; 0x3c
   12e10:	ldr	r4, [r3, ip]
   12e14:	add	r5, sp, #4
   12e18:	mov	r7, r2
   12e1c:	mov	r6, r0
   12e20:	mov	r0, r5
   12e24:	ldr	r3, [r4]
   12e28:	str	r3, [sp, #52]	; 0x34
   12e2c:	bl	11990 <close_stdout@@Base+0x3a4>
   12e30:	mov	r3, r5
   12e34:	mvn	r2, #0
   12e38:	mov	r0, r6
   12e3c:	mov	r1, r7
   12e40:	bl	12870 <close_stdout@@Base+0x1284>
   12e44:	ldr	r2, [sp, #52]	; 0x34
   12e48:	ldr	r3, [r4]
   12e4c:	cmp	r2, r3
   12e50:	bne	12e5c <close_stdout@@Base+0x1870>
   12e54:	add	sp, sp, #60	; 0x3c
   12e58:	pop	{r4, r5, r6, r7, pc}
   12e5c:	bl	10f3c <__stack_chk_fail@plt>
   12e60:	strdeq	r2, [r1], -r4
   12e64:	andeq	r0, r0, r4, ror #1
   12e68:	ldr	ip, [pc, #96]	; 12ed0 <close_stdout@@Base+0x18e4>
   12e6c:	push	{r4, r5, r6, r7, r8, lr}
   12e70:	add	ip, pc, ip
   12e74:	ldr	lr, [pc, #88]	; 12ed4 <close_stdout@@Base+0x18e8>
   12e78:	sub	sp, sp, #56	; 0x38
   12e7c:	mov	r8, r3
   12e80:	add	r5, sp, #4
   12e84:	mov	r7, r2
   12e88:	mov	r6, r0
   12e8c:	ldr	r4, [ip, lr]
   12e90:	mov	r0, r5
   12e94:	ldr	r3, [r4]
   12e98:	str	r3, [sp, #52]	; 0x34
   12e9c:	bl	11990 <close_stdout@@Base+0x3a4>
   12ea0:	mov	r2, r8
   12ea4:	mov	r3, r5
   12ea8:	mov	r0, r6
   12eac:	mov	r1, r7
   12eb0:	bl	12870 <close_stdout@@Base+0x1284>
   12eb4:	ldr	r2, [sp, #52]	; 0x34
   12eb8:	ldr	r3, [r4]
   12ebc:	cmp	r2, r3
   12ec0:	bne	12ecc <close_stdout@@Base+0x18e0>
   12ec4:	add	sp, sp, #56	; 0x38
   12ec8:	pop	{r4, r5, r6, r7, r8, pc}
   12ecc:	bl	10f3c <__stack_chk_fail@plt>
   12ed0:	andeq	r2, r1, r8, lsl #3
   12ed4:	andeq	r0, r0, r4, ror #1
   12ed8:	mov	r2, r1
   12edc:	mov	r1, r0
   12ee0:	mov	r0, #0
   12ee4:	b	12dfc <close_stdout@@Base+0x1810>
   12ee8:	mov	ip, r1
   12eec:	mov	r3, r2
   12ef0:	mov	r1, r0
   12ef4:	mov	r2, ip
   12ef8:	mov	r0, #0
   12efc:	b	12e68 <close_stdout@@Base+0x187c>
   12f00:	push	{r4, r5, r6, r7, r8, lr}
   12f04:	mov	r5, r2
   12f08:	ldr	lr, [pc, #136]	; 12f98 <close_stdout@@Base+0x19ac>
   12f0c:	mov	r7, r0
   12f10:	mov	r6, r1
   12f14:	ldr	r4, [pc, #128]	; 12f9c <close_stdout@@Base+0x19b0>
   12f18:	add	lr, pc, lr
   12f1c:	sub	sp, sp, #56	; 0x38
   12f20:	add	lr, lr, #256	; 0x100
   12f24:	ldr	r8, [pc, #116]	; 12fa0 <close_stdout@@Base+0x19b4>
   12f28:	add	r4, pc, r4
   12f2c:	add	ip, sp, #4
   12f30:	ldm	lr!, {r0, r1, r2, r3}
   12f34:	ldr	r4, [r4, r8]
   12f38:	stmia	ip!, {r0, r1, r2, r3}
   12f3c:	ldm	lr!, {r0, r1, r2, r3}
   12f40:	ldr	r8, [r4]
   12f44:	stmia	ip!, {r0, r1, r2, r3}
   12f48:	ldm	lr, {r0, r1, r2, r3}
   12f4c:	str	r8, [sp, #52]	; 0x34
   12f50:	stm	ip, {r0, r1, r2, r3}
   12f54:	mov	r1, r5
   12f58:	add	r5, sp, #4
   12f5c:	mov	r2, #1
   12f60:	mov	r0, r5
   12f64:	bl	12acc <close_stdout@@Base+0x14e0>
   12f68:	mov	r2, r6
   12f6c:	mov	r3, r5
   12f70:	mov	r1, r7
   12f74:	mov	r0, #0
   12f78:	bl	12870 <close_stdout@@Base+0x1284>
   12f7c:	ldr	r2, [sp, #52]	; 0x34
   12f80:	ldr	r3, [r4]
   12f84:	cmp	r2, r3
   12f88:	bne	12f94 <close_stdout@@Base+0x19a8>
   12f8c:	add	sp, sp, #56	; 0x38
   12f90:	pop	{r4, r5, r6, r7, r8, pc}
   12f94:	bl	10f3c <__stack_chk_fail@plt>
   12f98:	andeq	r2, r1, ip, asr r2
   12f9c:	ldrdeq	r2, [r1], -r0
   12fa0:	andeq	r0, r0, r4, ror #1
   12fa4:	mov	r2, r1
   12fa8:	mvn	r1, #0
   12fac:	b	12f00 <close_stdout@@Base+0x1914>
   12fb0:	mov	r1, #58	; 0x3a
   12fb4:	b	12fa4 <close_stdout@@Base+0x19b8>
   12fb8:	mov	r2, #58	; 0x3a
   12fbc:	b	12f00 <close_stdout@@Base+0x1914>
   12fc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fc4:	mov	r5, r2
   12fc8:	ldr	lr, [pc, #144]	; 13060 <close_stdout@@Base+0x1a74>
   12fcc:	mov	r8, r0
   12fd0:	mov	r9, r1
   12fd4:	mov	r7, r3
   12fd8:	add	lr, pc, lr
   12fdc:	ldr	r4, [pc, #128]	; 13064 <close_stdout@@Base+0x1a78>
   12fe0:	add	lr, lr, #256	; 0x100
   12fe4:	sub	sp, sp, #56	; 0x38
   12fe8:	ldr	sl, [pc, #120]	; 13068 <close_stdout@@Base+0x1a7c>
   12fec:	add	r4, pc, r4
   12ff0:	ldm	lr!, {r0, r1, r2, r3}
   12ff4:	add	ip, sp, #4
   12ff8:	ldr	r4, [r4, sl]
   12ffc:	ldr	r6, [sp, #88]	; 0x58
   13000:	stmia	ip!, {r0, r1, r2, r3}
   13004:	ldm	lr!, {r0, r1, r2, r3}
   13008:	ldr	sl, [r4]
   1300c:	stmia	ip!, {r0, r1, r2, r3}
   13010:	ldm	lr, {r0, r1, r2, r3}
   13014:	str	sl, [sp, #52]	; 0x34
   13018:	stm	ip, {r0, r1, r2, r3}
   1301c:	mov	r2, r5
   13020:	add	r5, sp, #4
   13024:	mov	r1, r9
   13028:	mov	r0, r5
   1302c:	bl	12b40 <close_stdout@@Base+0x1554>
   13030:	mov	r2, r6
   13034:	mov	r3, r5
   13038:	mov	r0, r8
   1303c:	mov	r1, r7
   13040:	bl	12870 <close_stdout@@Base+0x1284>
   13044:	ldr	r2, [sp, #52]	; 0x34
   13048:	ldr	r3, [r4]
   1304c:	cmp	r2, r3
   13050:	bne	1305c <close_stdout@@Base+0x1a70>
   13054:	add	sp, sp, #56	; 0x38
   13058:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1305c:	bl	10f3c <__stack_chk_fail@plt>
   13060:	muleq	r1, ip, r1
   13064:	andeq	r2, r1, ip
   13068:	andeq	r0, r0, r4, ror #1
   1306c:	push	{lr}		; (str lr, [sp, #-4]!)
   13070:	sub	sp, sp, #12
   13074:	mvn	ip, #0
   13078:	str	ip, [sp]
   1307c:	bl	12fc0 <close_stdout@@Base+0x19d4>
   13080:	add	sp, sp, #12
   13084:	pop	{pc}		; (ldr pc, [sp], #4)
   13088:	mov	ip, r1
   1308c:	mov	r3, r2
   13090:	mov	r1, r0
   13094:	mov	r2, ip
   13098:	mov	r0, #0
   1309c:	b	1306c <close_stdout@@Base+0x1a80>
   130a0:	push	{lr}		; (str lr, [sp, #-4]!)
   130a4:	sub	sp, sp, #12
   130a8:	mov	lr, r1
   130ac:	mov	ip, r2
   130b0:	mov	r1, r0
   130b4:	str	r3, [sp]
   130b8:	mov	r2, lr
   130bc:	mov	r3, ip
   130c0:	mov	r0, #0
   130c4:	bl	12fc0 <close_stdout@@Base+0x19d4>
   130c8:	add	sp, sp, #12
   130cc:	pop	{pc}		; (ldr pc, [sp], #4)
   130d0:	ldr	r3, [pc, #12]	; 130e4 <close_stdout@@Base+0x1af8>
   130d4:	ldr	ip, [pc, #12]	; 130e8 <close_stdout@@Base+0x1afc>
   130d8:	add	r3, pc, r3
   130dc:	ldr	r3, [r3, ip]
   130e0:	b	12870 <close_stdout@@Base+0x1284>
   130e4:	andeq	r1, r1, r0, lsr #30
   130e8:	andeq	r0, r0, r0, ror #1
   130ec:	mov	r2, r1
   130f0:	mov	r1, r0
   130f4:	mov	r0, #0
   130f8:	b	130d0 <close_stdout@@Base+0x1ae4>
   130fc:	mvn	r2, #0
   13100:	b	130d0 <close_stdout@@Base+0x1ae4>
   13104:	mov	r1, r0
   13108:	mov	r0, #0
   1310c:	b	130fc <close_stdout@@Base+0x1b10>
   13110:	push	{r4, r5, r6, r7, lr}
   13114:	cmp	r1, #0
   13118:	sub	sp, sp, #36	; 0x24
   1311c:	ldr	r7, [pc, #896]	; 134a4 <close_stdout@@Base+0x1eb8>
   13120:	mov	ip, r3
   13124:	mov	r5, r0
   13128:	add	r7, pc, r7
   1312c:	ldr	r4, [sp, #56]	; 0x38
   13130:	ldr	r6, [sp, #60]	; 0x3c
   13134:	beq	13478 <close_stdout@@Base+0x1e8c>
   13138:	str	r2, [sp]
   1313c:	mov	r3, r1
   13140:	ldr	r2, [pc, #864]	; 134a8 <close_stdout@@Base+0x1ebc>
   13144:	mov	r1, #1
   13148:	str	ip, [sp, #4]
   1314c:	add	r2, pc, r2
   13150:	bl	11098 <__fprintf_chk@plt>
   13154:	ldr	r1, [pc, #848]	; 134ac <close_stdout@@Base+0x1ec0>
   13158:	mov	r2, #5
   1315c:	mov	r0, #0
   13160:	add	r1, pc, r1
   13164:	bl	10f30 <dcgettext@plt>
   13168:	ldr	r2, [pc, #832]	; 134b0 <close_stdout@@Base+0x1ec4>
   1316c:	movw	ip, #2013	; 0x7dd
   13170:	mov	r1, #1
   13174:	ldr	r2, [r7, r2]
   13178:	str	ip, [sp]
   1317c:	mov	r3, r0
   13180:	mov	r0, r5
   13184:	bl	11098 <__fprintf_chk@plt>
   13188:	ldr	r1, [pc, #804]	; 134b4 <close_stdout@@Base+0x1ec8>
   1318c:	mov	r0, #0
   13190:	mov	r2, #5
   13194:	add	r1, pc, r1
   13198:	bl	10f30 <dcgettext@plt>
   1319c:	mov	r1, r5
   131a0:	bl	10eb8 <fputs_unlocked@plt>
   131a4:	cmp	r6, #9
   131a8:	addls	pc, pc, r6, lsl #2
   131ac:	b	13494 <close_stdout@@Base+0x1ea8>
   131b0:	b	13244 <close_stdout@@Base+0x1c58>
   131b4:	b	13248 <close_stdout@@Base+0x1c5c>
   131b8:	b	13278 <close_stdout@@Base+0x1c8c>
   131bc:	b	132ac <close_stdout@@Base+0x1cc0>
   131c0:	b	132e8 <close_stdout@@Base+0x1cfc>
   131c4:	b	13328 <close_stdout@@Base+0x1d3c>
   131c8:	b	13370 <close_stdout@@Base+0x1d84>
   131cc:	b	133c0 <close_stdout@@Base+0x1dd4>
   131d0:	b	13418 <close_stdout@@Base+0x1e2c>
   131d4:	b	131d8 <close_stdout@@Base+0x1bec>
   131d8:	ldr	r1, [pc, #728]	; 134b8 <close_stdout@@Base+0x1ecc>
   131dc:	mov	r0, #0
   131e0:	add	r1, pc, r1
   131e4:	mov	r2, #5
   131e8:	bl	10f30 <dcgettext@plt>
   131ec:	ldm	r4, {r3, ip}
   131f0:	mov	r1, #1
   131f4:	str	ip, [sp]
   131f8:	ldr	ip, [r4, #8]
   131fc:	str	ip, [sp, #4]
   13200:	ldr	ip, [r4, #12]
   13204:	str	ip, [sp, #8]
   13208:	ldr	ip, [r4, #16]
   1320c:	str	ip, [sp, #12]
   13210:	ldr	ip, [r4, #20]
   13214:	str	ip, [sp, #16]
   13218:	ldr	ip, [r4, #24]
   1321c:	str	ip, [sp, #20]
   13220:	ldr	ip, [r4, #28]
   13224:	str	ip, [sp, #24]
   13228:	ldr	ip, [r4, #32]
   1322c:	str	ip, [sp, #28]
   13230:	mov	r2, r0
   13234:	mov	r0, r5
   13238:	bl	11098 <__fprintf_chk@plt>
   1323c:	add	sp, sp, #36	; 0x24
   13240:	pop	{r4, r5, r6, r7, pc}
   13244:	bl	11104 <abort@plt>
   13248:	ldr	r1, [pc, #620]	; 134bc <close_stdout@@Base+0x1ed0>
   1324c:	mov	r2, #5
   13250:	mov	r0, #0
   13254:	add	r1, pc, r1
   13258:	bl	10f30 <dcgettext@plt>
   1325c:	ldr	r3, [r4]
   13260:	mov	r1, #1
   13264:	mov	r2, r0
   13268:	mov	r0, r5
   1326c:	add	sp, sp, #36	; 0x24
   13270:	pop	{r4, r5, r6, r7, lr}
   13274:	b	11098 <__fprintf_chk@plt>
   13278:	ldr	r1, [pc, #576]	; 134c0 <close_stdout@@Base+0x1ed4>
   1327c:	mov	r2, #5
   13280:	mov	r0, #0
   13284:	add	r1, pc, r1
   13288:	bl	10f30 <dcgettext@plt>
   1328c:	ldm	r4, {r3, ip}
   13290:	mov	r1, #1
   13294:	str	ip, [sp, #56]	; 0x38
   13298:	mov	r2, r0
   1329c:	mov	r0, r5
   132a0:	add	sp, sp, #36	; 0x24
   132a4:	pop	{r4, r5, r6, r7, lr}
   132a8:	b	11098 <__fprintf_chk@plt>
   132ac:	ldr	r1, [pc, #528]	; 134c4 <close_stdout@@Base+0x1ed8>
   132b0:	mov	r2, #5
   132b4:	mov	r0, #0
   132b8:	add	r1, pc, r1
   132bc:	bl	10f30 <dcgettext@plt>
   132c0:	ldm	r4, {r3, ip}
   132c4:	mov	r1, #1
   132c8:	str	ip, [sp, #56]	; 0x38
   132cc:	ldr	ip, [r4, #8]
   132d0:	str	ip, [sp, #60]	; 0x3c
   132d4:	mov	r2, r0
   132d8:	mov	r0, r5
   132dc:	add	sp, sp, #36	; 0x24
   132e0:	pop	{r4, r5, r6, r7, lr}
   132e4:	b	11098 <__fprintf_chk@plt>
   132e8:	ldr	r1, [pc, #472]	; 134c8 <close_stdout@@Base+0x1edc>
   132ec:	mov	r2, #5
   132f0:	mov	r0, #0
   132f4:	add	r1, pc, r1
   132f8:	bl	10f30 <dcgettext@plt>
   132fc:	ldm	r4, {r3, ip}
   13300:	mov	r1, #1
   13304:	str	ip, [sp]
   13308:	ldr	ip, [r4, #8]
   1330c:	str	ip, [sp, #4]
   13310:	ldr	ip, [r4, #12]
   13314:	str	ip, [sp, #8]
   13318:	mov	r2, r0
   1331c:	mov	r0, r5
   13320:	bl	11098 <__fprintf_chk@plt>
   13324:	b	1323c <close_stdout@@Base+0x1c50>
   13328:	ldr	r1, [pc, #412]	; 134cc <close_stdout@@Base+0x1ee0>
   1332c:	mov	r2, #5
   13330:	mov	r0, #0
   13334:	add	r1, pc, r1
   13338:	bl	10f30 <dcgettext@plt>
   1333c:	ldm	r4, {r3, ip}
   13340:	mov	r1, #1
   13344:	str	ip, [sp]
   13348:	ldr	ip, [r4, #8]
   1334c:	str	ip, [sp, #4]
   13350:	ldr	ip, [r4, #12]
   13354:	str	ip, [sp, #8]
   13358:	ldr	ip, [r4, #16]
   1335c:	str	ip, [sp, #12]
   13360:	mov	r2, r0
   13364:	mov	r0, r5
   13368:	bl	11098 <__fprintf_chk@plt>
   1336c:	b	1323c <close_stdout@@Base+0x1c50>
   13370:	ldr	r1, [pc, #344]	; 134d0 <close_stdout@@Base+0x1ee4>
   13374:	mov	r2, #5
   13378:	mov	r0, #0
   1337c:	add	r1, pc, r1
   13380:	bl	10f30 <dcgettext@plt>
   13384:	ldm	r4, {r3, ip}
   13388:	mov	r1, #1
   1338c:	str	ip, [sp]
   13390:	ldr	ip, [r4, #8]
   13394:	str	ip, [sp, #4]
   13398:	ldr	ip, [r4, #12]
   1339c:	str	ip, [sp, #8]
   133a0:	ldr	ip, [r4, #16]
   133a4:	str	ip, [sp, #12]
   133a8:	ldr	ip, [r4, #20]
   133ac:	str	ip, [sp, #16]
   133b0:	mov	r2, r0
   133b4:	mov	r0, r5
   133b8:	bl	11098 <__fprintf_chk@plt>
   133bc:	b	1323c <close_stdout@@Base+0x1c50>
   133c0:	ldr	r1, [pc, #268]	; 134d4 <close_stdout@@Base+0x1ee8>
   133c4:	mov	r2, #5
   133c8:	mov	r0, #0
   133cc:	add	r1, pc, r1
   133d0:	bl	10f30 <dcgettext@plt>
   133d4:	ldm	r4, {r3, ip}
   133d8:	mov	r1, #1
   133dc:	str	ip, [sp]
   133e0:	ldr	ip, [r4, #8]
   133e4:	str	ip, [sp, #4]
   133e8:	ldr	ip, [r4, #12]
   133ec:	str	ip, [sp, #8]
   133f0:	ldr	ip, [r4, #16]
   133f4:	str	ip, [sp, #12]
   133f8:	ldr	ip, [r4, #20]
   133fc:	str	ip, [sp, #16]
   13400:	ldr	ip, [r4, #24]
   13404:	str	ip, [sp, #20]
   13408:	mov	r2, r0
   1340c:	mov	r0, r5
   13410:	bl	11098 <__fprintf_chk@plt>
   13414:	b	1323c <close_stdout@@Base+0x1c50>
   13418:	ldr	r1, [pc, #184]	; 134d8 <close_stdout@@Base+0x1eec>
   1341c:	mov	r2, #5
   13420:	mov	r0, #0
   13424:	add	r1, pc, r1
   13428:	bl	10f30 <dcgettext@plt>
   1342c:	ldm	r4, {r3, ip}
   13430:	mov	r1, #1
   13434:	str	ip, [sp]
   13438:	ldr	ip, [r4, #8]
   1343c:	str	ip, [sp, #4]
   13440:	ldr	ip, [r4, #12]
   13444:	str	ip, [sp, #8]
   13448:	ldr	ip, [r4, #16]
   1344c:	str	ip, [sp, #12]
   13450:	ldr	ip, [r4, #20]
   13454:	str	ip, [sp, #16]
   13458:	ldr	ip, [r4, #24]
   1345c:	str	ip, [sp, #20]
   13460:	ldr	ip, [r4, #28]
   13464:	str	ip, [sp, #24]
   13468:	mov	r2, r0
   1346c:	mov	r0, r5
   13470:	bl	11098 <__fprintf_chk@plt>
   13474:	b	1323c <close_stdout@@Base+0x1c50>
   13478:	str	r3, [sp]
   1347c:	mov	r3, r2
   13480:	ldr	r2, [pc, #84]	; 134dc <close_stdout@@Base+0x1ef0>
   13484:	mov	r1, #1
   13488:	add	r2, pc, r2
   1348c:	bl	11098 <__fprintf_chk@plt>
   13490:	b	13154 <close_stdout@@Base+0x1b68>
   13494:	ldr	r1, [pc, #68]	; 134e0 <close_stdout@@Base+0x1ef4>
   13498:	mov	r0, #0
   1349c:	add	r1, pc, r1
   134a0:	b	131e4 <close_stdout@@Base+0x1bf8>
   134a4:	ldrdeq	r1, [r1], -r0
   134a8:	andeq	r1, r0, r0, asr #7
   134ac:	andeq	r1, r0, r0, asr #7
   134b0:	andeq	r0, r0, r4, lsl r1
   134b4:	muleq	r0, r0, r3
   134b8:	andeq	r1, r0, ip, lsl r5
   134bc:	muleq	r0, ip, r3
   134c0:	andeq	r1, r0, ip, ror r3
   134c4:	andeq	r1, r0, r0, ror #6
   134c8:	andeq	r1, r0, r0, asr #6
   134cc:	andeq	r1, r0, r0, lsr #6
   134d0:	strdeq	r1, [r0], -ip
   134d4:	ldrdeq	r1, [r0], -r4
   134d8:	andeq	r1, r0, r8, lsr #5
   134dc:	muleq	r0, r0, r0
   134e0:	muleq	r0, r4, r2
   134e4:	push	{r4, r5, lr}
   134e8:	sub	sp, sp, #12
   134ec:	ldr	r5, [sp, #24]
   134f0:	ldr	ip, [r5]
   134f4:	cmp	ip, #0
   134f8:	beq	13514 <close_stdout@@Base+0x1f28>
   134fc:	mov	lr, r5
   13500:	mov	ip, #0
   13504:	ldr	r4, [lr, #4]!
   13508:	add	ip, ip, #1
   1350c:	cmp	r4, #0
   13510:	bne	13504 <close_stdout@@Base+0x1f18>
   13514:	stm	sp, {r5, ip}
   13518:	bl	13110 <close_stdout@@Base+0x1b24>
   1351c:	add	sp, sp, #12
   13520:	pop	{r4, r5, pc}
   13524:	push	{r4, r5, r6, r7, lr}
   13528:	sub	sp, sp, #60	; 0x3c
   1352c:	ldr	r4, [pc, #100]	; 13598 <close_stdout@@Base+0x1fac>
   13530:	mov	ip, #0
   13534:	ldr	r5, [pc, #96]	; 1359c <close_stdout@@Base+0x1fb0>
   13538:	mov	lr, ip
   1353c:	add	r4, pc, r4
   13540:	ldr	r6, [sp, #80]	; 0x50
   13544:	ldr	r7, [r4, r5]
   13548:	add	r5, sp, #12
   1354c:	ldr	r4, [r7]
   13550:	str	r4, [sp, #52]	; 0x34
   13554:	ldr	r4, [r6, ip]
   13558:	cmp	r4, #0
   1355c:	str	r4, [r5, ip]
   13560:	beq	13574 <close_stdout@@Base+0x1f88>
   13564:	add	lr, lr, #1
   13568:	add	ip, ip, #4
   1356c:	cmp	lr, #10
   13570:	bne	13554 <close_stdout@@Base+0x1f68>
   13574:	stm	sp, {r5, lr}
   13578:	bl	13110 <close_stdout@@Base+0x1b24>
   1357c:	ldr	r2, [sp, #52]	; 0x34
   13580:	ldr	r3, [r7]
   13584:	cmp	r2, r3
   13588:	bne	13594 <close_stdout@@Base+0x1fa8>
   1358c:	add	sp, sp, #60	; 0x3c
   13590:	pop	{r4, r5, r6, r7, pc}
   13594:	bl	10f3c <__stack_chk_fail@plt>
   13598:			; <UNDEFINED> instruction: 0x00011abc
   1359c:	andeq	r0, r0, r4, ror #1
   135a0:	push	{r3}		; (str r3, [sp, #-4]!)
   135a4:	push	{r4, lr}
   135a8:	sub	sp, sp, #20
   135ac:	ldr	lr, [pc, #72]	; 135fc <close_stdout@@Base+0x2010>
   135b0:	add	ip, sp, #32
   135b4:	ldr	r4, [pc, #68]	; 13600 <close_stdout@@Base+0x2014>
   135b8:	add	lr, pc, lr
   135bc:	ldr	r3, [sp, #28]
   135c0:	ldr	r4, [lr, r4]
   135c4:	str	ip, [sp]
   135c8:	str	ip, [sp, #8]
   135cc:	ldr	ip, [r4]
   135d0:	str	ip, [sp, #12]
   135d4:	bl	13524 <close_stdout@@Base+0x1f38>
   135d8:	ldr	r2, [sp, #12]
   135dc:	ldr	r3, [r4]
   135e0:	cmp	r2, r3
   135e4:	bne	135f8 <close_stdout@@Base+0x200c>
   135e8:	add	sp, sp, #20
   135ec:	pop	{r4, lr}
   135f0:	add	sp, sp, #4
   135f4:	bx	lr
   135f8:	bl	10f3c <__stack_chk_fail@plt>
   135fc:	andeq	r1, r1, r0, asr #20
   13600:	andeq	r0, r0, r4, ror #1
   13604:	ldr	r1, [pc, #132]	; 13690 <close_stdout@@Base+0x20a4>
   13608:	mov	r2, #5
   1360c:	push	{r4, lr}
   13610:	add	r1, pc, r1
   13614:	mov	r0, #0
   13618:	ldr	r4, [pc, #116]	; 13694 <close_stdout@@Base+0x20a8>
   1361c:	bl	10f30 <dcgettext@plt>
   13620:	ldr	r2, [pc, #112]	; 13698 <close_stdout@@Base+0x20ac>
   13624:	add	r4, pc, r4
   13628:	add	r2, pc, r2
   1362c:	mov	r1, r0
   13630:	mov	r0, #1
   13634:	bl	11080 <__printf_chk@plt>
   13638:	ldr	r1, [pc, #92]	; 1369c <close_stdout@@Base+0x20b0>
   1363c:	mov	r2, #5
   13640:	mov	r0, #0
   13644:	add	r1, pc, r1
   13648:	bl	10f30 <dcgettext@plt>
   1364c:	ldr	r2, [pc, #76]	; 136a0 <close_stdout@@Base+0x20b4>
   13650:	ldr	r3, [pc, #76]	; 136a4 <close_stdout@@Base+0x20b8>
   13654:	add	r2, pc, r2
   13658:	add	r3, pc, r3
   1365c:	mov	r1, r0
   13660:	mov	r0, #1
   13664:	bl	11080 <__printf_chk@plt>
   13668:	ldr	r1, [pc, #56]	; 136a8 <close_stdout@@Base+0x20bc>
   1366c:	mov	r0, #0
   13670:	mov	r2, #5
   13674:	add	r1, pc, r1
   13678:	bl	10f30 <dcgettext@plt>
   1367c:	ldr	r3, [pc, #40]	; 136ac <close_stdout@@Base+0x20c0>
   13680:	ldr	r3, [r4, r3]
   13684:	pop	{r4, lr}
   13688:	ldr	r1, [r3]
   1368c:	b	10eb8 <fputs_unlocked@plt>
   13690:	andeq	r1, r0, ip, asr r1
   13694:	ldrdeq	r1, [r1], -r4
   13698:	andeq	r1, r0, ip, asr r1
   1369c:	andeq	r1, r0, r8, asr r1
   136a0:	andeq	r0, r0, ip, lsr #25
   136a4:			; <UNDEFINED> instruction: 0x00000cb8
   136a8:	andeq	r1, r0, ip, lsr r1
   136ac:	andeq	r0, r0, r0, lsl #2
   136b0:	push	{r4, lr}
   136b4:	mov	r4, r0
   136b8:	bl	10fe4 <malloc@plt>
   136bc:	rsbs	r3, r0, #1
   136c0:	movcc	r3, #0
   136c4:	cmp	r4, #0
   136c8:	moveq	r3, #0
   136cc:	cmp	r3, #0
   136d0:	popeq	{r4, pc}
   136d4:	bl	138c4 <close_stdout@@Base+0x22d8>
   136d8:	push	{r3, r4, r5, lr}
   136dc:	mov	r4, r0
   136e0:	mvn	r0, #0
   136e4:	mov	r5, r1
   136e8:	bl	13f64 <close_stdout@@Base+0x2978>
   136ec:	cmp	r0, r4
   136f0:	bcc	13700 <close_stdout@@Base+0x2114>
   136f4:	mul	r0, r4, r5
   136f8:	pop	{r3, r4, r5, lr}
   136fc:	b	136b0 <close_stdout@@Base+0x20c4>
   13700:	bl	138c4 <close_stdout@@Base+0x22d8>
   13704:	b	136b0 <close_stdout@@Base+0x20c4>
   13708:	rsbs	r3, r1, #1
   1370c:	push	{r4, lr}
   13710:	movcc	r3, #0
   13714:	cmp	r0, #0
   13718:	mov	r4, r1
   1371c:	moveq	r3, #0
   13720:	cmp	r3, #0
   13724:	bne	13748 <close_stdout@@Base+0x215c>
   13728:	bl	10f48 <realloc@plt>
   1372c:	rsbs	r3, r0, #1
   13730:	movcc	r3, #0
   13734:	cmp	r4, #0
   13738:	moveq	r3, #0
   1373c:	cmp	r3, #0
   13740:	popeq	{r4, pc}
   13744:	bl	138c4 <close_stdout@@Base+0x22d8>
   13748:	bl	10ef4 <free@plt>
   1374c:	mov	r0, #0
   13750:	pop	{r4, pc}
   13754:	push	{r4, r5, r6, lr}
   13758:	mov	r5, r1
   1375c:	mov	r6, r0
   13760:	mov	r1, r2
   13764:	mvn	r0, #0
   13768:	mov	r4, r2
   1376c:	bl	13f64 <close_stdout@@Base+0x2978>
   13770:	cmp	r0, r5
   13774:	bcc	13788 <close_stdout@@Base+0x219c>
   13778:	mov	r0, r6
   1377c:	mul	r1, r5, r4
   13780:	pop	{r4, r5, r6, lr}
   13784:	b	13708 <close_stdout@@Base+0x211c>
   13788:	bl	138c4 <close_stdout@@Base+0x22d8>
   1378c:	push	{r3, r4, r5, r6, r7, lr}
   13790:	subs	r7, r0, #0
   13794:	mov	r5, r1
   13798:	mov	r6, r2
   1379c:	ldr	r4, [r1]
   137a0:	beq	137d8 <close_stdout@@Base+0x21ec>
   137a4:	movw	r0, #43690	; 0xaaaa
   137a8:	mov	r1, r2
   137ac:	bfi	r0, r0, #16, #16
   137b0:	bl	13f64 <close_stdout@@Base+0x2978>
   137b4:	cmp	r4, r0
   137b8:	addcc	r3, r4, #1
   137bc:	addcc	r4, r4, r3, lsr #1
   137c0:	bcs	137fc <close_stdout@@Base+0x2210>
   137c4:	str	r4, [r5]
   137c8:	mov	r0, r7
   137cc:	mul	r1, r6, r4
   137d0:	pop	{r3, r4, r5, r6, r7, lr}
   137d4:	b	13708 <close_stdout@@Base+0x211c>
   137d8:	cmp	r4, #0
   137dc:	bne	137c4 <close_stdout@@Base+0x21d8>
   137e0:	mov	r0, #64	; 0x40
   137e4:	mov	r1, r2
   137e8:	bl	13f64 <close_stdout@@Base+0x2978>
   137ec:	cmp	r0, #0
   137f0:	movne	r4, r0
   137f4:	addeq	r4, r0, #1
   137f8:	b	137c4 <close_stdout@@Base+0x21d8>
   137fc:	bl	138c4 <close_stdout@@Base+0x22d8>
   13800:	cmp	r0, #0
   13804:	push	{r3, lr}
   13808:	ldr	r3, [r1]
   1380c:	beq	13838 <close_stdout@@Base+0x224c>
   13810:	movw	r2, #43689	; 0xaaa9
   13814:	movt	r2, #43690	; 0xaaaa
   13818:	cmp	r3, r2
   1381c:	addls	r2, r3, #1
   13820:	addls	r3, r3, r2, lsr #1
   13824:	bhi	13850 <close_stdout@@Base+0x2264>
   13828:	str	r3, [r1]
   1382c:	mov	r1, r3
   13830:	pop	{r3, lr}
   13834:	b	13708 <close_stdout@@Base+0x211c>
   13838:	cmp	r3, #0
   1383c:	moveq	r3, #64	; 0x40
   13840:	str	r3, [r1]
   13844:	mov	r1, r3
   13848:	pop	{r3, lr}
   1384c:	b	13708 <close_stdout@@Base+0x211c>
   13850:	bl	138c4 <close_stdout@@Base+0x22d8>
   13854:	push	{r4, lr}
   13858:	mov	r4, r0
   1385c:	bl	136b0 <close_stdout@@Base+0x20c4>
   13860:	mov	r2, r4
   13864:	mov	r1, #0
   13868:	pop	{r4, lr}
   1386c:	b	11068 <memset@plt>
   13870:	push	{r3, lr}
   13874:	bl	10eac <calloc@plt>
   13878:	cmp	r0, #0
   1387c:	popne	{r3, pc}
   13880:	bl	138c4 <close_stdout@@Base+0x22d8>
   13884:	push	{r3, r4, r5, lr}
   13888:	mov	r4, r1
   1388c:	mov	r5, r0
   13890:	mov	r0, r1
   13894:	bl	136b0 <close_stdout@@Base+0x20c4>
   13898:	mov	r1, r5
   1389c:	mov	r2, r4
   138a0:	pop	{r3, r4, r5, lr}
   138a4:	b	10f0c <memcpy@plt>
   138a8:	push	{r4, lr}
   138ac:	mov	r4, r0
   138b0:	bl	11038 <strlen@plt>
   138b4:	add	r1, r0, #1
   138b8:	mov	r0, r4
   138bc:	pop	{r4, lr}
   138c0:	b	13884 <close_stdout@@Base+0x2298>
   138c4:	ldr	r3, [pc, #64]	; 1390c <close_stdout@@Base+0x2320>
   138c8:	mov	r2, #5
   138cc:	ldr	ip, [pc, #60]	; 13910 <close_stdout@@Base+0x2324>
   138d0:	mov	r0, #0
   138d4:	add	r3, pc, r3
   138d8:	ldr	r1, [pc, #52]	; 13914 <close_stdout@@Base+0x2328>
   138dc:	push	{r4, lr}
   138e0:	add	r1, pc, r1
   138e4:	ldr	r3, [r3, ip]
   138e8:	ldr	r4, [r3]
   138ec:	bl	10f30 <dcgettext@plt>
   138f0:	ldr	r2, [pc, #32]	; 13918 <close_stdout@@Base+0x232c>
   138f4:	mov	r1, #0
   138f8:	add	r2, pc, r2
   138fc:	mov	r3, r0
   13900:	mov	r0, r4
   13904:	bl	10fb4 <error@plt>
   13908:	bl	11104 <abort@plt>
   1390c:	andeq	r1, r1, r4, lsr #14
   13910:	andeq	r0, r0, r8, lsl #2
   13914:	andeq	r0, r0, r0, asr #30
   13918:	andeq	r0, r0, r8, lsr fp
   1391c:	push	{r4, r5, r6, lr}
   13920:	mov	r4, r0
   13924:	bl	10f9c <__fpending@plt>
   13928:	mov	r6, r0
   1392c:	mov	r0, r4
   13930:	ldr	r4, [r4]
   13934:	bl	13dbc <close_stdout@@Base+0x27d0>
   13938:	and	r4, r4, #32
   1393c:	adds	r5, r0, #0
   13940:	movne	r5, #1
   13944:	cmp	r4, #0
   13948:	bne	13968 <close_stdout@@Base+0x237c>
   1394c:	cmp	r5, #0
   13950:	beq	13960 <close_stdout@@Base+0x2374>
   13954:	cmp	r6, #0
   13958:	beq	13984 <close_stdout@@Base+0x2398>
   1395c:	mvn	r4, #0
   13960:	mov	r0, r4
   13964:	pop	{r4, r5, r6, pc}
   13968:	cmp	r5, #0
   1396c:	bne	1395c <close_stdout@@Base+0x2370>
   13970:	bl	11050 <__errno_location@plt>
   13974:	mvn	r4, #0
   13978:	str	r5, [r0]
   1397c:	mov	r0, r4
   13980:	pop	{r4, r5, r6, pc}
   13984:	bl	11050 <__errno_location@plt>
   13988:	ldr	r4, [r0]
   1398c:	subs	r4, r4, #9
   13990:	mvnne	r4, #0
   13994:	mov	r0, r4
   13998:	pop	{r4, r5, r6, pc}
   1399c:	ldr	r3, [pc, #984]	; 13d7c <close_stdout@@Base+0x2790>
   139a0:	mov	r0, #14
   139a4:	ldr	r2, [pc, #980]	; 13d80 <close_stdout@@Base+0x2794>
   139a8:	add	r3, pc, r3
   139ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139b0:	sub	sp, sp, #132	; 0x84
   139b4:	ldr	r6, [r3, r2]
   139b8:	ldr	r3, [r6]
   139bc:	str	r3, [sp, #124]	; 0x7c
   139c0:	bl	110e0 <nl_langinfo@plt>
   139c4:	subs	r5, r0, #0
   139c8:	beq	13a7c <close_stdout@@Base+0x2490>
   139cc:	ldr	r3, [pc, #944]	; 13d84 <close_stdout@@Base+0x2798>
   139d0:	ldr	r4, [pc, r3]
   139d4:	cmp	r4, #0
   139d8:	beq	13a88 <close_stdout@@Base+0x249c>
   139dc:	ldrb	r7, [r4]
   139e0:	cmp	r7, #0
   139e4:	bne	13a18 <close_stdout@@Base+0x242c>
   139e8:	b	13a50 <close_stdout@@Base+0x2464>
   139ec:	mov	r0, r4
   139f0:	bl	11038 <strlen@plt>
   139f4:	add	r0, r0, #1
   139f8:	add	r7, r4, r0
   139fc:	mov	r0, r7
   13a00:	bl	11038 <strlen@plt>
   13a04:	add	r0, r0, #1
   13a08:	add	r4, r7, r0
   13a0c:	ldrb	r7, [r7, r0]
   13a10:	cmp	r7, #0
   13a14:	beq	13a50 <close_stdout@@Base+0x2464>
   13a18:	mov	r0, r5
   13a1c:	mov	r1, r4
   13a20:	bl	10ed0 <strcmp@plt>
   13a24:	cmp	r0, #0
   13a28:	beq	13a40 <close_stdout@@Base+0x2454>
   13a2c:	cmp	r7, #42	; 0x2a
   13a30:	bne	139ec <close_stdout@@Base+0x2400>
   13a34:	ldrb	r3, [r4, #1]
   13a38:	cmp	r3, #0
   13a3c:	bne	139ec <close_stdout@@Base+0x2400>
   13a40:	mov	r0, r4
   13a44:	bl	11038 <strlen@plt>
   13a48:	add	r0, r0, #1
   13a4c:	add	r5, r4, r0
   13a50:	ldrb	r3, [r5]
   13a54:	cmp	r3, #0
   13a58:	ldreq	r5, [pc, #808]	; 13d88 <close_stdout@@Base+0x279c>
   13a5c:	addeq	r5, pc, r5
   13a60:	ldr	r2, [sp, #124]	; 0x7c
   13a64:	mov	r0, r5
   13a68:	ldr	r3, [r6]
   13a6c:	cmp	r2, r3
   13a70:	bne	13d50 <close_stdout@@Base+0x2764>
   13a74:	add	sp, sp, #132	; 0x84
   13a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a7c:	ldr	r5, [pc, #776]	; 13d8c <close_stdout@@Base+0x27a0>
   13a80:	add	r5, pc, r5
   13a84:	b	139cc <close_stdout@@Base+0x23e0>
   13a88:	ldr	r0, [pc, #768]	; 13d90 <close_stdout@@Base+0x27a4>
   13a8c:	add	r0, pc, r0
   13a90:	bl	10fcc <getenv@plt>
   13a94:	subs	r8, r0, #0
   13a98:	beq	13d28 <close_stdout@@Base+0x273c>
   13a9c:	ldrb	r3, [r8]
   13aa0:	cmp	r3, #0
   13aa4:	beq	13cbc <close_stdout@@Base+0x26d0>
   13aa8:	bl	11038 <strlen@plt>
   13aac:	subs	sl, r0, #0
   13ab0:	subne	r3, sl, #1
   13ab4:	bne	13ccc <close_stdout@@Base+0x26e0>
   13ab8:	mov	r9, #0
   13abc:	mov	fp, r9
   13ac0:	add	r9, sl, r9
   13ac4:	add	r0, r9, #14
   13ac8:	bl	10fe4 <malloc@plt>
   13acc:	subs	r7, r0, #0
   13ad0:	beq	13d1c <close_stdout@@Base+0x2730>
   13ad4:	mov	r1, r8
   13ad8:	mov	r2, sl
   13adc:	bl	10f0c <memcpy@plt>
   13ae0:	cmp	fp, #0
   13ae4:	add	ip, r7, r9
   13ae8:	movne	r3, #47	; 0x2f
   13aec:	strbne	r3, [r7, sl]
   13af0:	ldr	r3, [pc, #668]	; 13d94 <close_stdout@@Base+0x27a8>
   13af4:	add	r3, pc, r3
   13af8:	ldm	r3!, {r0, r1, r2}
   13afc:	ldrh	r3, [r3]
   13b00:	str	r0, [r7, r9]
   13b04:	mov	r0, r7
   13b08:	str	r1, [ip, #4]
   13b0c:	mov	r1, #32768	; 0x8000
   13b10:	strh	r3, [ip, #12]
   13b14:	str	r2, [ip, #8]
   13b18:	bl	10fc0 <open64@plt>
   13b1c:	subs	r8, r0, #0
   13b20:	blt	13ce4 <close_stdout@@Base+0x26f8>
   13b24:	ldr	r1, [pc, #620]	; 13d98 <close_stdout@@Base+0x27ac>
   13b28:	add	r1, pc, r1
   13b2c:	bl	10ea0 <fdopen@plt>
   13b30:	subs	fp, r0, #0
   13b34:	beq	13d3c <close_stdout@@Base+0x2750>
   13b38:	ldr	r0, [pc, #604]	; 13d9c <close_stdout@@Base+0x27b0>
   13b3c:	add	sl, sp, #20
   13b40:	add	r9, sp, #72	; 0x48
   13b44:	mov	r8, #0
   13b48:	add	r0, pc, r0
   13b4c:	str	r0, [sp, #12]
   13b50:	ldr	r3, [fp, #4]
   13b54:	ldr	r2, [fp, #8]
   13b58:	cmp	r3, r2
   13b5c:	bcs	13c48 <close_stdout@@Base+0x265c>
   13b60:	add	r2, r3, #1
   13b64:	str	r2, [fp, #4]
   13b68:	ldrb	r0, [r3]
   13b6c:	cmp	r0, #32
   13b70:	beq	13b50 <close_stdout@@Base+0x2564>
   13b74:	sub	r3, r0, #9
   13b78:	cmp	r3, #1
   13b7c:	bls	13b50 <close_stdout@@Base+0x2564>
   13b80:	cmp	r0, #35	; 0x23
   13b84:	beq	13c5c <close_stdout@@Base+0x2670>
   13b88:	mov	r1, fp
   13b8c:	bl	11044 <ungetc@plt>
   13b90:	mov	r0, fp
   13b94:	ldr	r1, [sp, #12]
   13b98:	mov	r2, sl
   13b9c:	mov	r3, r9
   13ba0:	bl	11074 <fscanf@plt>
   13ba4:	cmp	r0, #1
   13ba8:	ble	13c8c <close_stdout@@Base+0x26a0>
   13bac:	mov	r0, sl
   13bb0:	bl	11038 <strlen@plt>
   13bb4:	str	r0, [sp, #8]
   13bb8:	mov	r0, r9
   13bbc:	bl	11038 <strlen@plt>
   13bc0:	cmp	r8, #0
   13bc4:	mov	r2, r0
   13bc8:	bne	13cf0 <close_stdout@@Base+0x2704>
   13bcc:	ldr	r3, [sp, #8]
   13bd0:	str	r2, [sp]
   13bd4:	add	r8, r0, r3
   13bd8:	add	r0, r8, #3
   13bdc:	add	r8, r8, #2
   13be0:	bl	10fe4 <malloc@plt>
   13be4:	ldr	r2, [sp]
   13be8:	mov	r3, r0
   13bec:	cmp	r3, #0
   13bf0:	beq	13d54 <close_stdout@@Base+0x2768>
   13bf4:	ldr	r0, [sp, #8]
   13bf8:	movw	r1, #65534	; 0xfffe
   13bfc:	movt	r1, #65535	; 0xffff
   13c00:	rsb	r2, r2, r8
   13c04:	rsb	r1, r0, r1
   13c08:	stm	sp, {r2, r3}
   13c0c:	add	r0, r1, r2
   13c10:	mov	r1, sl
   13c14:	add	r0, r3, r0
   13c18:	mov	r4, r3
   13c1c:	bl	10f90 <strcpy@plt>
   13c20:	ldr	r2, [sp]
   13c24:	ldr	r3, [sp, #4]
   13c28:	mov	r1, r9
   13c2c:	sub	r0, r2, #1
   13c30:	add	r0, r3, r0
   13c34:	bl	10f90 <strcpy@plt>
   13c38:	ldr	r3, [fp, #4]
   13c3c:	ldr	r2, [fp, #8]
   13c40:	cmp	r3, r2
   13c44:	bcc	13b60 <close_stdout@@Base+0x2574>
   13c48:	mov	r0, fp
   13c4c:	bl	110bc <__uflow@plt>
   13c50:	cmn	r0, #1
   13c54:	beq	13c8c <close_stdout@@Base+0x26a0>
   13c58:	b	13b6c <close_stdout@@Base+0x2580>
   13c5c:	ldr	r3, [fp, #4]
   13c60:	ldr	r2, [fp, #8]
   13c64:	cmp	r3, r2
   13c68:	bcs	13d70 <close_stdout@@Base+0x2784>
   13c6c:	add	r2, r3, #1
   13c70:	str	r2, [fp, #4]
   13c74:	ldrb	r0, [r3]
   13c78:	cmp	r0, #10
   13c7c:	cmnne	r0, #1
   13c80:	bne	13c5c <close_stdout@@Base+0x2670>
   13c84:	cmn	r0, #1
   13c88:	bne	13b50 <close_stdout@@Base+0x2564>
   13c8c:	mov	r0, fp
   13c90:	bl	13dbc <close_stdout@@Base+0x27d0>
   13c94:	cmp	r8, #0
   13c98:	beq	13ce4 <close_stdout@@Base+0x26f8>
   13c9c:	mov	r3, #0
   13ca0:	strb	r3, [r4, r8]
   13ca4:	mov	r0, r7
   13ca8:	bl	10ef4 <free@plt>
   13cac:	ldr	r3, [pc, #236]	; 13da0 <close_stdout@@Base+0x27b4>
   13cb0:	add	r3, pc, r3
   13cb4:	str	r4, [r3]
   13cb8:	b	139dc <close_stdout@@Base+0x23f0>
   13cbc:	ldr	r8, [pc, #224]	; 13da4 <close_stdout@@Base+0x27b8>
   13cc0:	mov	r3, #7
   13cc4:	mov	sl, #8
   13cc8:	add	r8, pc, r8
   13ccc:	ldrb	r3, [r8, r3]
   13cd0:	cmp	r3, #47	; 0x2f
   13cd4:	movne	r9, #1
   13cd8:	movne	fp, r9
   13cdc:	bne	13ac0 <close_stdout@@Base+0x24d4>
   13ce0:	b	13ab8 <close_stdout@@Base+0x24cc>
   13ce4:	ldr	r4, [pc, #188]	; 13da8 <close_stdout@@Base+0x27bc>
   13ce8:	add	r4, pc, r4
   13cec:	b	13ca4 <close_stdout@@Base+0x26b8>
   13cf0:	ldr	r0, [sp, #8]
   13cf4:	str	r2, [sp]
   13cf8:	add	r3, r0, r2
   13cfc:	mov	r0, r4
   13d00:	add	r8, r3, r8
   13d04:	add	r1, r8, #3
   13d08:	add	r8, r8, #2
   13d0c:	bl	10f48 <realloc@plt>
   13d10:	ldr	r2, [sp]
   13d14:	mov	r3, r0
   13d18:	b	13bec <close_stdout@@Base+0x2600>
   13d1c:	ldr	r4, [pc, #136]	; 13dac <close_stdout@@Base+0x27c0>
   13d20:	add	r4, pc, r4
   13d24:	b	13cac <close_stdout@@Base+0x26c0>
   13d28:	ldr	r8, [pc, #128]	; 13db0 <close_stdout@@Base+0x27c4>
   13d2c:	mov	r3, #7
   13d30:	mov	sl, #8
   13d34:	add	r8, pc, r8
   13d38:	b	13ccc <close_stdout@@Base+0x26e0>
   13d3c:	ldr	r4, [pc, #112]	; 13db4 <close_stdout@@Base+0x27c8>
   13d40:	mov	r0, r8
   13d44:	add	r4, pc, r4
   13d48:	bl	11110 <close@plt>
   13d4c:	b	13ca4 <close_stdout@@Base+0x26b8>
   13d50:	bl	10f3c <__stack_chk_fail@plt>
   13d54:	mov	r0, r4
   13d58:	ldr	r4, [pc, #88]	; 13db8 <close_stdout@@Base+0x27cc>
   13d5c:	bl	10ef4 <free@plt>
   13d60:	mov	r0, fp
   13d64:	add	r4, pc, r4
   13d68:	bl	13dbc <close_stdout@@Base+0x27d0>
   13d6c:	b	13ca4 <close_stdout@@Base+0x26b8>
   13d70:	mov	r0, fp
   13d74:	bl	110bc <__uflow@plt>
   13d78:	b	13c78 <close_stdout@@Base+0x268c>
   13d7c:	andeq	r1, r1, r0, asr r6
   13d80:	andeq	r0, r0, r4, ror #1
   13d84:	ldrdeq	r1, [r1], -r4
   13d88:	andeq	r0, r0, r4, ror #27
   13d8c:	andeq	r0, r0, r4, asr #18
   13d90:			; <UNDEFINED> instruction: 0x00000dbc
   13d94:	andeq	r0, r0, r4, ror #26
   13d98:	andeq	r0, r0, r0, asr #26
   13d9c:	andeq	r0, r0, r4, lsr #26
   13da0:	strdeq	r1, [r1], -r4
   13da4:	andeq	r0, r0, ip, ror #22
   13da8:	ldrdeq	r0, [r0], -ip
   13dac:	andeq	r0, r0, r4, lsr #13
   13db0:	andeq	r0, r0, r0, lsl #22
   13db4:	andeq	r0, r0, r0, lsl #13
   13db8:	andeq	r0, r0, r0, ror #12
   13dbc:	push	{r4, r5, r6, lr}
   13dc0:	sub	sp, sp, #8
   13dc4:	mov	r4, r0
   13dc8:	bl	1108c <fileno@plt>
   13dcc:	cmp	r0, #0
   13dd0:	mov	r0, r4
   13dd4:	blt	13e50 <close_stdout@@Base+0x2864>
   13dd8:	bl	10ffc <__freading@plt>
   13ddc:	cmp	r0, #0
   13de0:	bne	13e1c <close_stdout@@Base+0x2830>
   13de4:	mov	r0, r4
   13de8:	bl	13e5c <close_stdout@@Base+0x2870>
   13dec:	cmp	r0, #0
   13df0:	beq	13e4c <close_stdout@@Base+0x2860>
   13df4:	bl	11050 <__errno_location@plt>
   13df8:	ldr	r6, [r0]
   13dfc:	mov	r5, r0
   13e00:	mov	r0, r4
   13e04:	bl	110a4 <fclose@plt>
   13e08:	cmp	r6, #0
   13e0c:	mvnne	r0, #0
   13e10:	strne	r6, [r5]
   13e14:	add	sp, sp, #8
   13e18:	pop	{r4, r5, r6, pc}
   13e1c:	mov	r0, r4
   13e20:	bl	1108c <fileno@plt>
   13e24:	mov	r1, #1
   13e28:	mov	r2, #0
   13e2c:	mov	r3, #0
   13e30:	str	r1, [sp]
   13e34:	bl	10f78 <lseek64@plt>
   13e38:	mvn	r2, #0
   13e3c:	mvn	r3, #0
   13e40:	cmp	r1, r3
   13e44:	cmpeq	r0, r2
   13e48:	bne	13de4 <close_stdout@@Base+0x27f8>
   13e4c:	mov	r0, r4
   13e50:	add	sp, sp, #8
   13e54:	pop	{r4, r5, r6, lr}
   13e58:	b	110a4 <fclose@plt>
   13e5c:	push	{r4, lr}
   13e60:	subs	r4, r0, #0
   13e64:	sub	sp, sp, #8
   13e68:	beq	13e78 <close_stdout@@Base+0x288c>
   13e6c:	bl	10ffc <__freading@plt>
   13e70:	cmp	r0, #0
   13e74:	bne	13e88 <close_stdout@@Base+0x289c>
   13e78:	mov	r0, r4
   13e7c:	add	sp, sp, #8
   13e80:	pop	{r4, lr}
   13e84:	b	10ee8 <fflush@plt>
   13e88:	ldr	r3, [r4]
   13e8c:	tst	r3, #256	; 0x100
   13e90:	beq	13e78 <close_stdout@@Base+0x288c>
   13e94:	mov	r3, #1
   13e98:	mov	r0, r4
   13e9c:	str	r3, [sp]
   13ea0:	mov	r2, #0
   13ea4:	mov	r3, #0
   13ea8:	bl	13ebc <close_stdout@@Base+0x28d0>
   13eac:	mov	r0, r4
   13eb0:	add	sp, sp, #8
   13eb4:	pop	{r4, lr}
   13eb8:	b	10ee8 <fflush@plt>
   13ebc:	push	{r4, r5, r6, r7, lr}
   13ec0:	sub	sp, sp, #20
   13ec4:	ldmib	r0, {r1, ip}
   13ec8:	mov	r6, r0
   13ecc:	ldr	r4, [sp, #40]	; 0x28
   13ed0:	cmp	ip, r1
   13ed4:	beq	13eec <close_stdout@@Base+0x2900>
   13ed8:	str	r4, [sp, #40]	; 0x28
   13edc:	mov	r0, r6
   13ee0:	add	sp, sp, #20
   13ee4:	pop	{r4, r5, r6, r7, lr}
   13ee8:	b	110b0 <fseeko64@plt>
   13eec:	ldr	ip, [r0, #20]
   13ef0:	ldr	r1, [r0, #16]
   13ef4:	cmp	ip, r1
   13ef8:	bne	13ed8 <close_stdout@@Base+0x28ec>
   13efc:	ldr	r7, [r0, #36]	; 0x24
   13f00:	cmp	r7, #0
   13f04:	bne	13ed8 <close_stdout@@Base+0x28ec>
   13f08:	str	r2, [sp, #12]
   13f0c:	mvn	r5, #0
   13f10:	str	r3, [sp, #8]
   13f14:	bl	1108c <fileno@plt>
   13f18:	str	r4, [sp]
   13f1c:	mvn	r4, #0
   13f20:	ldr	r2, [sp, #12]
   13f24:	ldr	r3, [sp, #8]
   13f28:	bl	10f78 <lseek64@plt>
   13f2c:	mov	r2, r0
   13f30:	mov	r3, r1
   13f34:	cmp	r3, r5
   13f38:	cmpeq	r2, r4
   13f3c:	beq	13f5c <close_stdout@@Base+0x2970>
   13f40:	ldr	r1, [r6]
   13f44:	mov	r0, r7
   13f48:	strd	r2, [r6, #80]	; 0x50
   13f4c:	bic	r3, r1, #16
   13f50:	str	r3, [r6]
   13f54:	add	sp, sp, #20
   13f58:	pop	{r4, r5, r6, r7, pc}
   13f5c:	mvn	r0, #0
   13f60:	b	13f54 <close_stdout@@Base+0x2968>
   13f64:	subs	r2, r1, #1
   13f68:	bxeq	lr
   13f6c:	bcc	14144 <close_stdout@@Base+0x2b58>
   13f70:	cmp	r0, r1
   13f74:	bls	14128 <close_stdout@@Base+0x2b3c>
   13f78:	tst	r1, r2
   13f7c:	beq	14134 <close_stdout@@Base+0x2b48>
   13f80:	clz	r3, r0
   13f84:	clz	r2, r1
   13f88:	sub	r3, r2, r3
   13f8c:	rsbs	r3, r3, #31
   13f90:	addne	r3, r3, r3, lsl #1
   13f94:	mov	r2, #0
   13f98:	addne	pc, pc, r3, lsl #2
   13f9c:	nop	{0}
   13fa0:	cmp	r0, r1, lsl #31
   13fa4:	adc	r2, r2, r2
   13fa8:	subcs	r0, r0, r1, lsl #31
   13fac:	cmp	r0, r1, lsl #30
   13fb0:	adc	r2, r2, r2
   13fb4:	subcs	r0, r0, r1, lsl #30
   13fb8:	cmp	r0, r1, lsl #29
   13fbc:	adc	r2, r2, r2
   13fc0:	subcs	r0, r0, r1, lsl #29
   13fc4:	cmp	r0, r1, lsl #28
   13fc8:	adc	r2, r2, r2
   13fcc:	subcs	r0, r0, r1, lsl #28
   13fd0:	cmp	r0, r1, lsl #27
   13fd4:	adc	r2, r2, r2
   13fd8:	subcs	r0, r0, r1, lsl #27
   13fdc:	cmp	r0, r1, lsl #26
   13fe0:	adc	r2, r2, r2
   13fe4:	subcs	r0, r0, r1, lsl #26
   13fe8:	cmp	r0, r1, lsl #25
   13fec:	adc	r2, r2, r2
   13ff0:	subcs	r0, r0, r1, lsl #25
   13ff4:	cmp	r0, r1, lsl #24
   13ff8:	adc	r2, r2, r2
   13ffc:	subcs	r0, r0, r1, lsl #24
   14000:	cmp	r0, r1, lsl #23
   14004:	adc	r2, r2, r2
   14008:	subcs	r0, r0, r1, lsl #23
   1400c:	cmp	r0, r1, lsl #22
   14010:	adc	r2, r2, r2
   14014:	subcs	r0, r0, r1, lsl #22
   14018:	cmp	r0, r1, lsl #21
   1401c:	adc	r2, r2, r2
   14020:	subcs	r0, r0, r1, lsl #21
   14024:	cmp	r0, r1, lsl #20
   14028:	adc	r2, r2, r2
   1402c:	subcs	r0, r0, r1, lsl #20
   14030:	cmp	r0, r1, lsl #19
   14034:	adc	r2, r2, r2
   14038:	subcs	r0, r0, r1, lsl #19
   1403c:	cmp	r0, r1, lsl #18
   14040:	adc	r2, r2, r2
   14044:	subcs	r0, r0, r1, lsl #18
   14048:	cmp	r0, r1, lsl #17
   1404c:	adc	r2, r2, r2
   14050:	subcs	r0, r0, r1, lsl #17
   14054:	cmp	r0, r1, lsl #16
   14058:	adc	r2, r2, r2
   1405c:	subcs	r0, r0, r1, lsl #16
   14060:	cmp	r0, r1, lsl #15
   14064:	adc	r2, r2, r2
   14068:	subcs	r0, r0, r1, lsl #15
   1406c:	cmp	r0, r1, lsl #14
   14070:	adc	r2, r2, r2
   14074:	subcs	r0, r0, r1, lsl #14
   14078:	cmp	r0, r1, lsl #13
   1407c:	adc	r2, r2, r2
   14080:	subcs	r0, r0, r1, lsl #13
   14084:	cmp	r0, r1, lsl #12
   14088:	adc	r2, r2, r2
   1408c:	subcs	r0, r0, r1, lsl #12
   14090:	cmp	r0, r1, lsl #11
   14094:	adc	r2, r2, r2
   14098:	subcs	r0, r0, r1, lsl #11
   1409c:	cmp	r0, r1, lsl #10
   140a0:	adc	r2, r2, r2
   140a4:	subcs	r0, r0, r1, lsl #10
   140a8:	cmp	r0, r1, lsl #9
   140ac:	adc	r2, r2, r2
   140b0:	subcs	r0, r0, r1, lsl #9
   140b4:	cmp	r0, r1, lsl #8
   140b8:	adc	r2, r2, r2
   140bc:	subcs	r0, r0, r1, lsl #8
   140c0:	cmp	r0, r1, lsl #7
   140c4:	adc	r2, r2, r2
   140c8:	subcs	r0, r0, r1, lsl #7
   140cc:	cmp	r0, r1, lsl #6
   140d0:	adc	r2, r2, r2
   140d4:	subcs	r0, r0, r1, lsl #6
   140d8:	cmp	r0, r1, lsl #5
   140dc:	adc	r2, r2, r2
   140e0:	subcs	r0, r0, r1, lsl #5
   140e4:	cmp	r0, r1, lsl #4
   140e8:	adc	r2, r2, r2
   140ec:	subcs	r0, r0, r1, lsl #4
   140f0:	cmp	r0, r1, lsl #3
   140f4:	adc	r2, r2, r2
   140f8:	subcs	r0, r0, r1, lsl #3
   140fc:	cmp	r0, r1, lsl #2
   14100:	adc	r2, r2, r2
   14104:	subcs	r0, r0, r1, lsl #2
   14108:	cmp	r0, r1, lsl #1
   1410c:	adc	r2, r2, r2
   14110:	subcs	r0, r0, r1, lsl #1
   14114:	cmp	r0, r1
   14118:	adc	r2, r2, r2
   1411c:	subcs	r0, r0, r1
   14120:	mov	r0, r2
   14124:	bx	lr
   14128:	moveq	r0, #1
   1412c:	movne	r0, #0
   14130:	bx	lr
   14134:	clz	r2, r1
   14138:	rsb	r2, r2, #31
   1413c:	lsr	r0, r0, r2
   14140:	bx	lr
   14144:	cmp	r0, #0
   14148:	mvnne	r0, #0
   1414c:	b	14170 <close_stdout@@Base+0x2b84>
   14150:	cmp	r1, #0
   14154:	beq	14144 <close_stdout@@Base+0x2b58>
   14158:	push	{r0, r1, lr}
   1415c:	bl	13f64 <close_stdout@@Base+0x2978>
   14160:	pop	{r1, r2, lr}
   14164:	mul	r3, r2, r0
   14168:	sub	r1, r1, r3
   1416c:	bx	lr
   14170:	push	{r1, lr}
   14174:	mov	r0, #8
   14178:	bl	10ec4 <raise@plt>
   1417c:	pop	{r1, pc}
   14180:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14184:	mov	r7, r0
   14188:	ldr	r6, [pc, #76]	; 141dc <close_stdout@@Base+0x2bf0>
   1418c:	mov	r8, r1
   14190:	ldr	r5, [pc, #72]	; 141e0 <close_stdout@@Base+0x2bf4>
   14194:	mov	r9, r2
   14198:	add	r6, pc, r6
   1419c:	bl	10e80 <fdopen@plt-0x20>
   141a0:	add	r5, pc, r5
   141a4:	rsb	r6, r5, r6
   141a8:	asrs	r6, r6, #2
   141ac:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   141b0:	sub	r5, r5, #4
   141b4:	mov	r4, #0
   141b8:	add	r4, r4, #1
   141bc:	ldr	r3, [r5, #4]!
   141c0:	mov	r0, r7
   141c4:	mov	r1, r8
   141c8:	mov	r2, r9
   141cc:	blx	r3
   141d0:	cmp	r4, r6
   141d4:	bne	141b8 <close_stdout@@Base+0x2bcc>
   141d8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   141dc:	andeq	r0, r1, ip, lsl #26
   141e0:	andeq	r0, r1, r0, lsl #26
   141e4:	bx	lr
   141e8:	ldr	r3, [pc, #28]	; 1420c <close_stdout@@Base+0x2c20>
   141ec:	mov	r1, #0
   141f0:	ldr	r2, [pc, #24]	; 14210 <close_stdout@@Base+0x2c24>
   141f4:	add	r3, pc, r3
   141f8:	ldr	r3, [r3, r2]
   141fc:	cmp	r3, #0
   14200:	ldrne	r2, [r3]
   14204:	moveq	r2, r3
   14208:	b	1105c <__cxa_atexit@plt>
   1420c:	andeq	r0, r1, r4, lsl #28
   14210:	strdeq	r0, [r0], -ip

Disassembly of section .fini:

00014214 <.fini>:
   14214:	push	{r3, lr}
   14218:	pop	{r3, pc}
