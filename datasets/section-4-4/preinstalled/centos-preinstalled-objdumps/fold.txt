
centos-preinstalled/fold:     file format elf32-littlearm


Disassembly of section .init:

00011098 <.init>:
   11098:	push	{r3, lr}
   1109c:	bl	1177c <__assert_fail@plt+0x3dc>
   110a0:	pop	{r3, pc}

Disassembly of section .plt:

000110a4 <fdopen@plt-0x14>:
   110a4:	push	{lr}		; (str lr, [sp, #-4]!)
   110a8:	ldr	lr, [pc, #4]	; 110b4 <fdopen@plt-0x4>
   110ac:	add	lr, pc, lr
   110b0:	ldr	pc, [lr, #8]!
   110b4:	andeq	r5, r1, ip, asr #30

000110b8 <fdopen@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #86016	; 0x15000
   110c0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110c4 <calloc@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #86016	; 0x15000
   110cc:	ldr	pc, [ip, #3908]!	; 0xf44

000110d0 <fputs_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110dc <raise@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #86016	; 0x15000
   110e4:	ldr	pc, [ip, #3892]!	; 0xf34

000110e8 <strcmp@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #86016	; 0x15000
   110f0:	ldr	pc, [ip, #3884]!	; 0xf2c

000110f4 <posix_fadvise64@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #86016	; 0x15000
   110fc:	ldr	pc, [ip, #3876]!	; 0xf24

00011100 <fflush@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #86016	; 0x15000
   11108:	ldr	pc, [ip, #3868]!	; 0xf1c

0001110c <wcwidth@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #86016	; 0x15000
   11114:	ldr	pc, [ip, #3860]!	; 0xf14

00011118 <memmove@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #86016	; 0x15000
   11120:	ldr	pc, [ip, #3852]!	; 0xf0c

00011124 <__memmove_chk@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #86016	; 0x15000
   1112c:	ldr	pc, [ip, #3844]!	; 0xf04

00011130 <free@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #86016	; 0x15000
   11138:	ldr	pc, [ip, #3836]!	; 0xefc

0001113c <_exit@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #86016	; 0x15000
   11144:	ldr	pc, [ip, #3828]!	; 0xef4

00011148 <memcpy@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #86016	; 0x15000
   11150:	ldr	pc, [ip, #3820]!	; 0xeec

00011154 <iswblank@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #86016	; 0x15000
   1115c:	ldr	pc, [ip, #3812]!	; 0xee4

00011160 <mbsinit@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #86016	; 0x15000
   11168:	ldr	pc, [ip, #3804]!	; 0xedc

0001116c <fwrite_unlocked@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #86016	; 0x15000
   11174:	ldr	pc, [ip, #3796]!	; 0xed4

00011178 <memcmp@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #86016	; 0x15000
   11180:	ldr	pc, [ip, #3788]!	; 0xecc

00011184 <dcgettext@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #86016	; 0x15000
   1118c:	ldr	pc, [ip, #3780]!	; 0xec4

00011190 <__stack_chk_fail@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #86016	; 0x15000
   11198:	ldr	pc, [ip, #3772]!	; 0xebc

0001119c <realloc@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #86016	; 0x15000
   111a4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111a8 <textdomain@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #86016	; 0x15000
   111b0:	ldr	pc, [ip, #3756]!	; 0xeac

000111b4 <iswprint@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #86016	; 0x15000
   111bc:	ldr	pc, [ip, #3748]!	; 0xea4

000111c0 <fwrite@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #86016	; 0x15000
   111c8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111cc <lseek64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #86016	; 0x15000
   111d4:	ldr	pc, [ip, #3732]!	; 0xe94

000111d8 <__ctype_get_mb_cur_max@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #86016	; 0x15000
   111e0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111e4 <strcpy@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #86016	; 0x15000
   111ec:	ldr	pc, [ip, #3716]!	; 0xe84

000111f0 <__fpending@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #86016	; 0x15000
   111f8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111fc <mbrtowc@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #86016	; 0x15000
   11204:	ldr	pc, [ip, #3700]!	; 0xe74

00011208 <error@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #86016	; 0x15000
   11210:	ldr	pc, [ip, #3692]!	; 0xe6c

00011214 <open64@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #86016	; 0x15000
   1121c:	ldr	pc, [ip, #3684]!	; 0xe64

00011220 <getenv@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #86016	; 0x15000
   11228:	ldr	pc, [ip, #3676]!	; 0xe5c

0001122c <malloc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #86016	; 0x15000
   11234:	ldr	pc, [ip, #3668]!	; 0xe54

00011238 <__libc_start_main@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #86016	; 0x15000
   11240:	ldr	pc, [ip, #3660]!	; 0xe4c

00011244 <__freading@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #86016	; 0x15000
   1124c:	ldr	pc, [ip, #3652]!	; 0xe44

00011250 <__gmon_start__@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #86016	; 0x15000
   11258:	ldr	pc, [ip, #3644]!	; 0xe3c

0001125c <getopt_long@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #86016	; 0x15000
   11264:	ldr	pc, [ip, #3636]!	; 0xe34

00011268 <__ctype_b_loc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #86016	; 0x15000
   11270:	ldr	pc, [ip, #3628]!	; 0xe2c

00011274 <exit@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #86016	; 0x15000
   1127c:	ldr	pc, [ip, #3620]!	; 0xe24

00011280 <strtoul@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #86016	; 0x15000
   11288:	ldr	pc, [ip, #3612]!	; 0xe1c

0001128c <strlen@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #86016	; 0x15000
   11294:	ldr	pc, [ip, #3604]!	; 0xe14

00011298 <strchr@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #86016	; 0x15000
   112a0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112a4 <ungetc@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #86016	; 0x15000
   112ac:	ldr	pc, [ip, #3588]!	; 0xe04

000112b0 <__errno_location@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #86016	; 0x15000
   112b8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112bc <__cxa_atexit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #86016	; 0x15000
   112c4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112c8 <memset@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #86016	; 0x15000
   112d0:	ldr	pc, [ip, #3564]!	; 0xdec

000112d4 <fscanf@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #86016	; 0x15000
   112dc:	ldr	pc, [ip, #3556]!	; 0xde4

000112e0 <__printf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #86016	; 0x15000
   112e8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ec <fileno@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #86016	; 0x15000
   112f4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112f8 <__fprintf_chk@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #86016	; 0x15000
   11300:	ldr	pc, [ip, #3532]!	; 0xdcc

00011304 <fclose@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #86016	; 0x15000
   1130c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011310 <fseeko64@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #86016	; 0x15000
   11318:	ldr	pc, [ip, #3516]!	; 0xdbc

0001131c <__uflow@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #86016	; 0x15000
   11324:	ldr	pc, [ip, #3508]!	; 0xdb4

00011328 <__overflow@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #86016	; 0x15000
   11330:	ldr	pc, [ip, #3500]!	; 0xdac

00011334 <setlocale@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #86016	; 0x15000
   1133c:	ldr	pc, [ip, #3492]!	; 0xda4

00011340 <strrchr@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #86016	; 0x15000
   11348:	ldr	pc, [ip, #3484]!	; 0xd9c

0001134c <nl_langinfo@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #86016	; 0x15000
   11354:	ldr	pc, [ip, #3476]!	; 0xd94

00011358 <fopen64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #86016	; 0x15000
   11360:	ldr	pc, [ip, #3468]!	; 0xd8c

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #86016	; 0x15000
   1136c:	ldr	pc, [ip, #3460]!	; 0xd84

00011370 <fread_unlocked@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #86016	; 0x15000
   11378:	ldr	pc, [ip, #3452]!	; 0xd7c

0001137c <strncmp@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #86016	; 0x15000
   11384:	ldr	pc, [ip, #3444]!	; 0xd74

00011388 <abort@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #86016	; 0x15000
   11390:	ldr	pc, [ip, #3436]!	; 0xd6c

00011394 <close@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #86016	; 0x15000
   1139c:	ldr	pc, [ip, #3428]!	; 0xd64

000113a0 <__assert_fail@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #86016	; 0x15000
   113a8:	ldr	pc, [ip, #3420]!	; 0xd5c

Disassembly of section .text:

000113ac <close_stdout@@Base-0x1248>:
   113ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113b0:	sub	sp, sp, #44	; 0x2c
   113b4:	ldr	r4, [pc, #796]	; 116d8 <__assert_fail@plt+0x338>
   113b8:	mov	r6, r0
   113bc:	ldr	r3, [pc, #792]	; 116dc <__assert_fail@plt+0x33c>
   113c0:	mov	r5, r1
   113c4:	add	r4, pc, r4
   113c8:	ldr	r2, [pc, #784]	; 116e0 <__assert_fail@plt+0x340>
   113cc:	ldr	r0, [r1]
   113d0:	mov	r8, #80	; 0x50
   113d4:	ldr	r3, [r4, r3]
   113d8:	add	r2, pc, r2
   113dc:	str	r2, [sp, #12]
   113e0:	ldr	r2, [pc, #764]	; 116e4 <__assert_fail@plt+0x344>
   113e4:	ldr	r3, [r3]
   113e8:	add	r2, pc, r2
   113ec:	str	r2, [sp, #16]
   113f0:	ldr	sl, [pc, #752]	; 116e8 <__assert_fail@plt+0x348>
   113f4:	str	r3, [sp, #36]	; 0x24
   113f8:	bl	127f0 <close_stdout@@Base+0x1fc>
   113fc:	ldr	r1, [pc, #744]	; 116ec <__assert_fail@plt+0x34c>
   11400:	mov	r0, #6
   11404:	add	sl, pc, sl
   11408:	ldr	r7, [pc, #736]	; 116f0 <__assert_fail@plt+0x350>
   1140c:	add	r1, pc, r1
   11410:	ldr	fp, [pc, #732]	; 116f4 <__assert_fail@plt+0x354>
   11414:	bl	11334 <setlocale@plt>
   11418:	ldr	r1, [pc, #728]	; 116f8 <__assert_fail@plt+0x358>
   1141c:	mov	r0, sl
   11420:	add	r7, pc, r7
   11424:	add	r1, pc, r1
   11428:	add	fp, pc, fp
   1142c:	bl	11364 <bindtextdomain@plt>
   11430:	mov	r0, sl
   11434:	bl	111a8 <textdomain@plt>
   11438:	ldr	r3, [pc, #700]	; 116fc <__assert_fail@plt+0x35c>
   1143c:	ldr	r2, [pc, #700]	; 11700 <__assert_fail@plt+0x360>
   11440:	ldr	sl, [pc, #700]	; 11704 <__assert_fail@plt+0x364>
   11444:	add	r2, pc, r2
   11448:	str	r2, [sp, #20]
   1144c:	ldr	r0, [r4, r3]
   11450:	add	sl, pc, sl
   11454:	bl	1565c <close_stdout@@Base+0x3068>
   11458:	ldr	r3, [pc, #680]	; 11708 <__assert_fail@plt+0x368>
   1145c:	mov	r2, #0
   11460:	add	r3, pc, r3
   11464:	str	r2, [r3]
   11468:	strb	r2, [r3, #16]
   1146c:	strb	r2, [r3, #8]
   11470:	ldr	r3, [pc, #660]	; 1170c <__assert_fail@plt+0x36c>
   11474:	mov	r9, #0
   11478:	mov	r0, r6
   1147c:	str	r9, [sp]
   11480:	mov	r1, r5
   11484:	mov	r2, r7
   11488:	add	r3, pc, r3
   1148c:	bl	1125c <getopt_long@plt>
   11490:	cmn	r0, #1
   11494:	beq	11608 <__assert_fail@plt+0x268>
   11498:	cmp	r0, #57	; 0x39
   1149c:	ble	11530 <__assert_fail@plt+0x190>
   114a0:	cmp	r0, #99	; 0x63
   114a4:	beq	115f0 <__assert_fail@plt+0x250>
   114a8:	ble	11568 <__assert_fail@plt+0x1c8>
   114ac:	cmp	r0, #115	; 0x73
   114b0:	beq	11550 <__assert_fail@plt+0x1b0>
   114b4:	cmp	r0, #119	; 0x77
   114b8:	bne	11560 <__assert_fail@plt+0x1c0>
   114bc:	ldr	r3, [pc, #588]	; 11710 <__assert_fail@plt+0x370>
   114c0:	ldr	r9, [r4, r3]
   114c4:	ldr	r3, [sp, #12]
   114c8:	mov	r1, #0
   114cc:	mov	r2, #10
   114d0:	str	r3, [sp]
   114d4:	add	r3, sp, #28
   114d8:	ldr	r0, [r9]
   114dc:	bl	14858 <close_stdout@@Base+0x2264>
   114e0:	cmp	r0, #0
   114e4:	bne	114f8 <__assert_fail@plt+0x158>
   114e8:	ldr	r8, [sp, #28]
   114ec:	sub	r3, r8, #1
   114f0:	cmn	r3, #11
   114f4:	bls	11470 <__assert_fail@plt+0xd0>
   114f8:	ldr	r1, [sp, #16]
   114fc:	mov	r2, #5
   11500:	mov	r0, #0
   11504:	bl	11184 <dcgettext@plt>
   11508:	mov	r8, r0
   1150c:	ldr	r0, [r9]
   11510:	bl	14040 <close_stdout@@Base+0x1a4c>
   11514:	mov	r2, r8
   11518:	mov	r1, #0
   1151c:	mov	r3, r0
   11520:	mov	r0, #1
   11524:	bl	11208 <error@plt>
   11528:	ldr	r8, [sp, #28]
   1152c:	b	11470 <__assert_fail@plt+0xd0>
   11530:	cmp	r0, #48	; 0x30
   11534:	bge	115c8 <__assert_fail@plt+0x228>
   11538:	cmn	r0, #3
   1153c:	beq	11588 <__assert_fail@plt+0x1e8>
   11540:	cmn	r0, #2
   11544:	bne	11560 <__assert_fail@plt+0x1c0>
   11548:	mov	r0, r9
   1154c:	bl	123b0 <__assert_fail@plt+0x1010>
   11550:	ldr	r2, [sp, #20]
   11554:	mov	r3, #1
   11558:	strb	r3, [r2, #8]
   1155c:	b	11470 <__assert_fail@plt+0xd0>
   11560:	mov	r0, #1
   11564:	bl	123b0 <__assert_fail@plt+0x1010>
   11568:	cmp	r0, #98	; 0x62
   1156c:	bne	11560 <__assert_fail@plt+0x1c0>
   11570:	ldr	r3, [sl]
   11574:	cmp	r3, #0
   11578:	bne	116ac <__assert_fail@plt+0x30c>
   1157c:	mov	r3, #1
   11580:	str	r3, [sl]
   11584:	b	11470 <__assert_fail@plt+0xd0>
   11588:	ldr	r1, [pc, #388]	; 11714 <__assert_fail@plt+0x374>
   1158c:	ldr	r3, [pc, #388]	; 11718 <__assert_fail@plt+0x378>
   11590:	ldr	r2, [pc, #388]	; 1171c <__assert_fail@plt+0x37c>
   11594:	ldr	r0, [r4, r1]
   11598:	ldr	r3, [r4, r3]
   1159c:	add	r2, pc, r2
   115a0:	ldr	r1, [pc, #376]	; 11720 <__assert_fail@plt+0x380>
   115a4:	ldr	r0, [r0]
   115a8:	ldr	r3, [r3]
   115ac:	add	r1, pc, r1
   115b0:	stm	sp, {r2, r9}
   115b4:	ldr	r2, [pc, #360]	; 11724 <__assert_fail@plt+0x384>
   115b8:	add	r2, pc, r2
   115bc:	bl	144dc <close_stdout@@Base+0x1ee8>
   115c0:	mov	r0, r9
   115c4:	bl	11274 <exit@plt>
   115c8:	ldr	r3, [pc, #320]	; 11710 <__assert_fail@plt+0x370>
   115cc:	ldr	r9, [r4, r3]
   115d0:	ldr	r3, [r9]
   115d4:	cmp	r3, #0
   115d8:	strbeq	r0, [sp, #32]
   115dc:	subne	r3, r3, #1
   115e0:	strbeq	r3, [sp, #33]	; 0x21
   115e4:	addeq	r3, sp, #32
   115e8:	str	r3, [r9]
   115ec:	b	114c4 <__assert_fail@plt+0x124>
   115f0:	ldr	r3, [fp]
   115f4:	cmp	r3, #0
   115f8:	bne	116ac <__assert_fail@plt+0x30c>
   115fc:	mov	r3, #2
   11600:	str	r3, [fp]
   11604:	b	11470 <__assert_fail@plt+0xd0>
   11608:	ldr	r3, [pc, #280]	; 11728 <__assert_fail@plt+0x388>
   1160c:	ldr	r3, [r4, r3]
   11610:	ldr	r7, [r3]
   11614:	cmp	r6, r7
   11618:	movne	r9, #1
   1161c:	bne	1166c <__assert_fail@plt+0x2cc>
   11620:	ldr	r0, [pc, #260]	; 1172c <__assert_fail@plt+0x38c>
   11624:	mov	r1, r8
   11628:	add	r0, pc, r0
   1162c:	bl	11f54 <__assert_fail@plt+0xbb4>
   11630:	mov	r9, r0
   11634:	ldr	r3, [pc, #244]	; 11730 <__assert_fail@plt+0x390>
   11638:	add	r3, pc, r3
   1163c:	ldrb	r3, [r3, #16]
   11640:	cmp	r3, #0
   11644:	bne	11678 <__assert_fail@plt+0x2d8>
   11648:	rsbs	r0, r9, #1
   1164c:	movcc	r0, #0
   11650:	bl	11274 <exit@plt>
   11654:	ldr	r0, [r5, r7, lsl #2]
   11658:	mov	r1, r8
   1165c:	bl	11f54 <__assert_fail@plt+0xbb4>
   11660:	add	r7, r7, #1
   11664:	and	r0, r0, r9
   11668:	uxtb	r9, r0
   1166c:	cmp	r7, r6
   11670:	blt	11654 <__assert_fail@plt+0x2b4>
   11674:	b	11634 <__assert_fail@plt+0x294>
   11678:	ldr	r3, [pc, #180]	; 11734 <__assert_fail@plt+0x394>
   1167c:	ldr	r3, [r4, r3]
   11680:	ldr	r0, [r3]
   11684:	bl	14d90 <close_stdout@@Base+0x279c>
   11688:	cmn	r0, #1
   1168c:	bne	11648 <__assert_fail@plt+0x2a8>
   11690:	bl	112b0 <__errno_location@plt>
   11694:	ldr	r2, [pc, #156]	; 11738 <__assert_fail@plt+0x398>
   11698:	add	r2, pc, r2
   1169c:	ldr	r1, [r0]
   116a0:	mov	r0, #1
   116a4:	bl	11208 <error@plt>
   116a8:	b	11648 <__assert_fail@plt+0x2a8>
   116ac:	ldr	r1, [pc, #136]	; 1173c <__assert_fail@plt+0x39c>
   116b0:	mov	r2, #5
   116b4:	mov	r0, #0
   116b8:	add	r1, pc, r1
   116bc:	bl	11184 <dcgettext@plt>
   116c0:	mov	r2, r0
   116c4:	mov	r0, #0
   116c8:	mov	r1, r0
   116cc:	bl	11208 <error@plt>
   116d0:	mov	r0, #2
   116d4:	bl	123b0 <__assert_fail@plt+0x1010>
   116d8:	andeq	r5, r1, r4, lsr ip
   116dc:	andeq	r0, r0, ip, lsl #2
   116e0:	andeq	r4, r0, r4, ror #11
   116e4:	andeq	r4, r0, r8, lsl r6
   116e8:	strdeq	r4, [r0], -r8
   116ec:			; <UNDEFINED> instruction: 0x000045b0
   116f0:	andeq	r4, r0, r0, ror r2
   116f4:	andeq	r5, r1, r8, ror #26
   116f8:	muleq	r0, ip, r5
   116fc:	andeq	r0, r0, ip, lsl r1
   11700:	andeq	r5, r1, ip, asr #26
   11704:	andeq	r5, r1, r0, asr #26
   11708:	andeq	r5, r1, r0, lsr sp
   1170c:	andeq	r5, r1, r4, ror #19
   11710:	andeq	r0, r0, r4, asr #2
   11714:	andeq	r0, r0, ip, lsr #2
   11718:	andeq	r0, r0, r4, lsl r1
   1171c:	andeq	r4, r0, ip, lsl #9
   11720:	andeq	r4, r0, r4, ror r4
   11724:	andeq	r4, r0, r0, asr #6
   11728:	andeq	r0, r0, r0, lsl r1
   1172c:	andeq	r4, r0, r0, lsl r4
   11730:	andeq	r5, r1, r8, asr fp
   11734:	andeq	r0, r0, r8, lsr #2
   11738:	andeq	r4, r0, r0, lsr #7
   1173c:	andeq	r4, r0, ip, lsl r3
   11740:	mov	fp, #0
   11744:	mov	lr, #0
   11748:	pop	{r1}		; (ldr r1, [sp], #4)
   1174c:	mov	r2, sp
   11750:	push	{r2}		; (str r2, [sp, #-4]!)
   11754:	push	{r0}		; (str r0, [sp, #-4]!)
   11758:	ldr	ip, [pc, #16]	; 11770 <__assert_fail@plt+0x3d0>
   1175c:	push	{ip}		; (str ip, [sp, #-4]!)
   11760:	ldr	r0, [pc, #12]	; 11774 <__assert_fail@plt+0x3d4>
   11764:	ldr	r3, [pc, #12]	; 11778 <__assert_fail@plt+0x3d8>
   11768:	bl	11238 <__libc_start_main@plt>
   1176c:	bl	11388 <abort@plt>
   11770:	andeq	r5, r1, r8, asr r6
   11774:	andeq	r1, r1, ip, lsr #7
   11778:	strdeq	r5, [r1], -r4
   1177c:	ldr	r3, [pc, #20]	; 11798 <__assert_fail@plt+0x3f8>
   11780:	ldr	r2, [pc, #20]	; 1179c <__assert_fail@plt+0x3fc>
   11784:	add	r3, pc, r3
   11788:	ldr	r2, [r3, r2]
   1178c:	cmp	r2, #0
   11790:	bxeq	lr
   11794:	b	11250 <__gmon_start__@plt>
   11798:	andeq	r5, r1, r4, ror r8
   1179c:	andeq	r0, r0, r0, lsr #2
   117a0:	push	{r3, lr}
   117a4:	movw	r0, #29076	; 0x7194
   117a8:	ldr	r3, [pc, #36]	; 117d4 <__assert_fail@plt+0x434>
   117ac:	movt	r0, #2
   117b0:	rsb	r3, r0, r3
   117b4:	cmp	r3, #6
   117b8:	popls	{r3, pc}
   117bc:	movw	r3, #0
   117c0:	movt	r3, #0
   117c4:	cmp	r3, #0
   117c8:	popeq	{r3, pc}
   117cc:	blx	r3
   117d0:	pop	{r3, pc}
   117d4:	muleq	r2, r7, r1
   117d8:	push	{r3, lr}
   117dc:	movw	r0, #29076	; 0x7194
   117e0:	movw	r3, #29076	; 0x7194
   117e4:	movt	r0, #2
   117e8:	movt	r3, #2
   117ec:	rsb	r3, r0, r3
   117f0:	asr	r3, r3, #2
   117f4:	add	r3, r3, r3, lsr #31
   117f8:	asrs	r1, r3, #1
   117fc:	popeq	{r3, pc}
   11800:	movw	r2, #0
   11804:	movt	r2, #0
   11808:	cmp	r2, #0
   1180c:	popeq	{r3, pc}
   11810:	blx	r2
   11814:	pop	{r3, pc}
   11818:	push	{r4, lr}
   1181c:	movw	r4, #29076	; 0x7194
   11820:	movt	r4, #2
   11824:	ldrb	r3, [r4]
   11828:	cmp	r3, #0
   1182c:	popne	{r4, pc}
   11830:	bl	117a0 <__assert_fail@plt+0x400>
   11834:	mov	r3, #1
   11838:	strb	r3, [r4]
   1183c:	pop	{r4, pc}
   11840:	movw	r0, #28272	; 0x6e70
   11844:	movt	r0, #2
   11848:	push	{r3, lr}
   1184c:	ldr	r3, [r0]
   11850:	cmp	r3, #0
   11854:	beq	1186c <__assert_fail@plt+0x4cc>
   11858:	movw	r3, #0
   1185c:	movt	r3, #0
   11860:	cmp	r3, #0
   11864:	beq	1186c <__assert_fail@plt+0x4cc>
   11868:	blx	r3
   1186c:	pop	{r3, lr}
   11870:	b	117d8 <__assert_fail@plt+0x438>
   11874:	ldr	r3, [pc, #76]	; 118c8 <__assert_fail@plt+0x528>
   11878:	add	r3, pc, r3
   1187c:	ldr	r3, [r3]
   11880:	cmp	r3, #1
   11884:	beq	118a0 <__assert_fail@plt+0x500>
   11888:	cmp	r1, #8
   1188c:	beq	118a8 <__assert_fail@plt+0x508>
   11890:	cmp	r1, #13
   11894:	beq	118c0 <__assert_fail@plt+0x520>
   11898:	cmp	r1, #9
   1189c:	beq	118b4 <__assert_fail@plt+0x514>
   118a0:	add	r0, r0, #1
   118a4:	bx	lr
   118a8:	cmp	r0, #0
   118ac:	subne	r0, r0, #1
   118b0:	bx	lr
   118b4:	bic	r0, r0, #7
   118b8:	add	r0, r0, #8
   118bc:	bx	lr
   118c0:	mov	r0, #0
   118c4:	bx	lr
   118c8:	andeq	r5, r1, r8, lsl r9
   118cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d0:	sub	sp, sp, #8320	; 0x2080
   118d4:	sub	sp, sp, #20
   118d8:	ldr	fp, [pc, #1604]	; 11f24 <__assert_fail@plt+0xb84>
   118dc:	add	ip, sp, #144	; 0x90
   118e0:	add	lr, sp, #124	; 0x7c
   118e4:	str	ip, [sp, #68]	; 0x44
   118e8:	add	fp, pc, fp
   118ec:	str	lr, [sp, #88]	; 0x58
   118f0:	ldr	ip, [pc, #1584]	; 11f28 <__assert_fail@plt+0xb88>
   118f4:	ldr	r3, [pc, #1584]	; 11f2c <__assert_fail@plt+0xb8c>
   118f8:	ldr	lr, [pc, #1584]	; 11f30 <__assert_fail@plt+0xb90>
   118fc:	add	r3, pc, r3
   11900:	str	r3, [sp, #48]	; 0x30
   11904:	add	lr, pc, lr
   11908:	str	lr, [sp, #72]	; 0x48
   1190c:	add	lr, sp, #108	; 0x6c
   11910:	str	lr, [sp, #40]	; 0x28
   11914:	ldr	ip, [fp, ip]
   11918:	mov	r3, #0
   1191c:	str	r1, [sp, #36]	; 0x24
   11920:	add	r1, sp, #8192	; 0x2000
   11924:	mov	r4, r3
   11928:	mov	r5, r3
   1192c:	str	ip, [sp, #92]	; 0x5c
   11930:	mov	sl, r3
   11934:	ldr	ip, [pc, #1528]	; 11f34 <__assert_fail@plt+0xb94>
   11938:	mov	r9, r3
   1193c:	ldr	lr, [sp, #92]	; 0x5c
   11940:	add	ip, pc, ip
   11944:	str	ip, [sp, #60]	; 0x3c
   11948:	ldr	ip, [sp, #48]	; 0x30
   1194c:	str	r0, [sp, #80]	; 0x50
   11950:	add	r0, sp, #124	; 0x7c
   11954:	add	ip, ip, #12
   11958:	str	ip, [sp, #100]	; 0x64
   1195c:	ldr	ip, [pc, #1492]	; 11f38 <__assert_fail@plt+0xb98>
   11960:	str	r3, [sp, #8]
   11964:	add	ip, pc, ip
   11968:	str	ip, [sp, #56]	; 0x38
   1196c:	add	ip, sp, #116	; 0x74
   11970:	str	ip, [sp, #52]	; 0x34
   11974:	ldr	ip, [lr]
   11978:	str	r2, [sp, #96]	; 0x60
   1197c:	str	r0, [sp, #44]	; 0x2c
   11980:	str	r3, [sp, #12]
   11984:	str	r3, [sp, #32]
   11988:	str	r3, [sp, #84]	; 0x54
   1198c:	str	r3, [sp, #20]
   11990:	str	r3, [sp, #16]
   11994:	str	ip, [r1, #140]	; 0x8c
   11998:	str	r3, [sp, #24]
   1199c:	str	r3, [sp, #112]	; 0x70
   119a0:	str	r3, [sp, #108]	; 0x6c
   119a4:	ldr	ip, [sp, #24]
   119a8:	cmp	ip, #15
   119ac:	bhi	119cc <__assert_fail@plt+0x62c>
   119b0:	ldr	ip, [sp, #80]	; 0x50
   119b4:	ldr	r3, [ip]
   119b8:	tst	r3, #48	; 0x30
   119bc:	beq	11e34 <__assert_fail@plt+0xa94>
   119c0:	ldr	ip, [sp, #24]
   119c4:	cmp	ip, #0
   119c8:	beq	11dd4 <__assert_fail@plt+0xa34>
   119cc:	ldr	ip, [sp, #40]	; 0x28
   119d0:	add	r3, sp, #108	; 0x6c
   119d4:	ldr	r2, [sp, #24]
   119d8:	ldm	ip, {r0, r1}
   119dc:	ldr	ip, [sp, #52]	; 0x34
   119e0:	stm	ip, {r0, r1}
   119e4:	add	r0, sp, #104	; 0x68
   119e8:	ldr	r1, [sp, #44]	; 0x2c
   119ec:	bl	111fc <mbrtowc@plt>
   119f0:	subs	r8, r0, #0
   119f4:	moveq	r8, #1
   119f8:	beq	11a1c <__assert_fail@plt+0x67c>
   119fc:	cmn	r8, #2
   11a00:	bcc	11a1c <__assert_fail@plt+0x67c>
   11a04:	ldr	ip, [sp, #52]	; 0x34
   11a08:	add	r9, r9, #1
   11a0c:	mov	r8, #1
   11a10:	ldm	ip, {r0, r1}
   11a14:	ldr	ip, [sp, #40]	; 0x28
   11a18:	stm	ip, {r0, r1}
   11a1c:	ldr	ip, [sp, #72]	; 0x48
   11a20:	movw	r7, #57304	; 0xdfd8
   11a24:	movt	r7, #65535	; 0xffff
   11a28:	ldr	r2, [sp, #32]
   11a2c:	ldr	r6, [ip, #4]
   11a30:	mov	r3, r7
   11a34:	ldr	ip, [pc, #1280]	; 11f3c <__assert_fail@plt+0xb9c>
   11a38:	mov	r7, fp
   11a3c:	mov	fp, r8
   11a40:	mov	r8, r3
   11a44:	add	ip, pc, ip
   11a48:	str	ip, [sp, #28]
   11a4c:	ldr	ip, [pc, #1260]	; 11f40 <__assert_fail@plt+0xba0>
   11a50:	add	ip, pc, ip
   11a54:	str	ip, [sp, #76]	; 0x4c
   11a58:	ldr	ip, [pc, #1252]	; 11f44 <__assert_fail@plt+0xba4>
   11a5c:	add	ip, pc, ip
   11a60:	str	ip, [sp, #64]	; 0x40
   11a64:	b	11b84 <__assert_fail@plt+0x7e4>
   11a68:	add	lr, sp, #8320	; 0x2080
   11a6c:	add	lr, lr, #16
   11a70:	ldr	r0, [lr, r8]
   11a74:	cmp	r0, #10
   11a78:	beq	11d34 <__assert_fail@plt+0x994>
   11a7c:	ldr	ip, [sp, #60]	; 0x3c
   11a80:	ldr	r3, [ip]
   11a84:	cmp	r3, #1
   11a88:	moveq	r0, fp
   11a8c:	moveq	r3, fp
   11a90:	beq	11ac8 <__assert_fail@plt+0x728>
   11a94:	cmp	r3, #2
   11a98:	beq	11b8c <__assert_fail@plt+0x7ec>
   11a9c:	cmp	r0, #9
   11aa0:	beq	11dc4 <__assert_fail@plt+0xa24>
   11aa4:	cmp	r0, #13
   11aa8:	beq	11db8 <__assert_fail@plt+0xa18>
   11aac:	cmp	r0, #8
   11ab0:	beq	11da8 <__assert_fail@plt+0xa08>
   11ab4:	str	r2, [sp, #4]
   11ab8:	bl	1110c <wcwidth@plt>
   11abc:	ldr	r2, [sp, #4]
   11ac0:	bic	r0, r0, r0, asr #31
   11ac4:	mov	r3, r0
   11ac8:	ldr	ip, [sp, #36]	; 0x24
   11acc:	add	r3, r3, r5
   11ad0:	cmp	r3, ip
   11ad4:	bls	11ba4 <__assert_fail@plt+0x804>
   11ad8:	ldr	ip, [sp, #56]	; 0x38
   11adc:	ldrb	r1, [ip, #8]
   11ae0:	cmp	r1, #0
   11ae4:	beq	11cd8 <__assert_fail@plt+0x938>
   11ae8:	cmp	r4, #0
   11aec:	beq	11cd8 <__assert_fail@plt+0x938>
   11af0:	ldr	r3, [pc, #1104]	; 11f48 <__assert_fail@plt+0xba8>
   11af4:	mov	r0, r6
   11af8:	mov	r2, r4
   11afc:	mov	r1, #1
   11b00:	ldr	r6, [r7, r3]
   11b04:	ldr	r3, [r6]
   11b08:	bl	1116c <fwrite_unlocked@plt>
   11b0c:	ldr	r0, [r6]
   11b10:	ldr	r2, [r0, #24]
   11b14:	ldr	r3, [r0, #20]
   11b18:	cmp	r3, r2
   11b1c:	addcc	r2, r3, #1
   11b20:	strcc	r2, [r0, #20]
   11b24:	movcc	r2, #10
   11b28:	strbcc	r2, [r3]
   11b2c:	bcs	11f00 <__assert_fail@plt+0xb60>
   11b30:	ldr	ip, [sp, #64]	; 0x40
   11b34:	rsb	sl, r4, sl
   11b38:	ldr	lr, [sp, #8]
   11b3c:	ldr	r3, [sp, #12]
   11b40:	mov	r2, sl
   11b44:	ldr	r6, [ip, #4]
   11b48:	cmp	lr, #0
   11b4c:	ldr	ip, [sp, #16]
   11b50:	add	r1, r6, r4
   11b54:	rsb	r5, ip, r5
   11b58:	ldr	ip, [sp, #84]	; 0x54
   11b5c:	mov	r0, r6
   11b60:	movne	r3, ip
   11b64:	add	r5, r5, r3
   11b68:	bl	11118 <memmove@plt>
   11b6c:	mov	r4, #0
   11b70:	str	r4, [sp, #16]
   11b74:	mov	r2, r4
   11b78:	str	r4, [sp, #20]
   11b7c:	str	r4, [sp, #12]
   11b80:	str	r4, [sp, #8]
   11b84:	cmp	r9, #0
   11b88:	beq	11a68 <__assert_fail@plt+0x6c8>
   11b8c:	mov	r3, #1
   11b90:	ldr	ip, [sp, #36]	; 0x24
   11b94:	mov	r0, r3
   11b98:	add	r3, r3, r5
   11b9c:	cmp	r3, ip
   11ba0:	bhi	11ad8 <__assert_fail@plt+0x738>
   11ba4:	ldr	lr, [sp, #48]	; 0x30
   11ba8:	mov	r8, fp
   11bac:	str	r2, [sp, #32]
   11bb0:	mov	fp, r7
   11bb4:	add	r7, sl, r8
   11bb8:	mov	ip, r0
   11bbc:	ldr	r2, [lr, #12]
   11bc0:	cmp	r7, r2
   11bc4:	bhi	11e78 <__assert_fail@plt+0xad8>
   11bc8:	ldr	r1, [sp, #44]	; 0x2c
   11bcc:	mov	r2, r8
   11bd0:	add	r0, r6, sl
   11bd4:	str	r3, [sp, #4]
   11bd8:	str	ip, [sp]
   11bdc:	bl	11148 <memcpy@plt>
   11be0:	rsbs	r2, r9, #1
   11be4:	ldr	lr, [sp, #20]
   11be8:	ldr	r3, [sp, #4]
   11bec:	movcc	r2, #0
   11bf0:	cmp	lr, #0
   11bf4:	moveq	r1, #0
   11bf8:	andne	r1, r2, #1
   11bfc:	cmp	r1, #0
   11c00:	ldr	ip, [sp]
   11c04:	beq	11c2c <__assert_fail@plt+0x88c>
   11c08:	add	r0, sp, #8320	; 0x2080
   11c0c:	movw	r1, #57304	; 0xdfd8
   11c10:	add	r0, r0, #16
   11c14:	movt	r1, #65535	; 0xffff
   11c18:	ldr	lr, [sp, #8]
   11c1c:	ldr	r1, [r0, r1]
   11c20:	cmp	r1, #13
   11c24:	moveq	lr, #1
   11c28:	str	lr, [sp, #8]
   11c2c:	ldr	r0, [sp, #32]
   11c30:	cmp	r0, #0
   11c34:	moveq	r1, #0
   11c38:	andne	r1, r2, #1
   11c3c:	cmp	r1, #0
   11c40:	beq	11c64 <__assert_fail@plt+0x8c4>
   11c44:	add	lr, sp, #8320	; 0x2080
   11c48:	movw	r1, #57304	; 0xdfd8
   11c4c:	add	lr, lr, #16
   11c50:	movt	r1, #65535	; 0xffff
   11c54:	ldr	r1, [lr, r1]
   11c58:	cmp	r1, #8
   11c5c:	movne	r1, #0
   11c60:	beq	11ed4 <__assert_fail@plt+0xb34>
   11c64:	str	r1, [sp, #32]
   11c68:	ldr	r1, [pc, #732]	; 11f4c <__assert_fail@plt+0xbac>
   11c6c:	add	r1, pc, r1
   11c70:	ldrb	r1, [r1, #8]
   11c74:	cmp	r1, #0
   11c78:	beq	11cb4 <__assert_fail@plt+0x914>
   11c7c:	cmp	r2, #0
   11c80:	beq	11cb4 <__assert_fail@plt+0x914>
   11c84:	add	lr, sp, #8320	; 0x2080
   11c88:	movw	r2, #57304	; 0xdfd8
   11c8c:	add	lr, lr, #16
   11c90:	movt	r2, #65535	; 0xffff
   11c94:	ldr	r0, [lr, r2]
   11c98:	str	r3, [sp, #4]
   11c9c:	str	ip, [sp]
   11ca0:	bl	11154 <iswblank@plt>
   11ca4:	ldr	r3, [sp, #4]
   11ca8:	ldr	ip, [sp]
   11cac:	cmp	r0, #0
   11cb0:	bne	11ea4 <__assert_fail@plt+0xb04>
   11cb4:	mov	r5, r3
   11cb8:	mov	sl, r7
   11cbc:	ldr	ip, [sp, #44]	; 0x2c
   11cc0:	add	ip, ip, r8
   11cc4:	str	ip, [sp, #44]	; 0x2c
   11cc8:	ldr	ip, [sp, #24]
   11ccc:	rsb	ip, r8, ip
   11cd0:	str	ip, [sp, #24]
   11cd4:	b	119a4 <__assert_fail@plt+0x604>
   11cd8:	cmp	r5, #0
   11cdc:	beq	11ba4 <__assert_fail@plt+0x804>
   11ce0:	ldr	r3, [pc, #608]	; 11f48 <__assert_fail@plt+0xba8>
   11ce4:	mov	r2, sl
   11ce8:	mov	r0, r6
   11cec:	mov	r1, #1
   11cf0:	ldr	r4, [r7, r3]
   11cf4:	ldr	r3, [r4]
   11cf8:	bl	1116c <fwrite_unlocked@plt>
   11cfc:	ldr	r0, [r4]
   11d00:	ldr	r3, [r0, #20]
   11d04:	ldr	r2, [r0, #24]
   11d08:	cmp	r3, r2
   11d0c:	bcs	11ee4 <__assert_fail@plt+0xb44>
   11d10:	ldr	ip, [sp, #28]
   11d14:	mov	r5, #0
   11d18:	add	r2, r3, #1
   11d1c:	mov	sl, r5
   11d20:	str	r2, [r0, #20]
   11d24:	mov	r2, #10
   11d28:	ldr	r6, [ip, #4]
   11d2c:	strb	r2, [r3]
   11d30:	b	11b6c <__assert_fail@plt+0x7cc>
   11d34:	ldr	r3, [pc, #524]	; 11f48 <__assert_fail@plt+0xba8>
   11d38:	mov	ip, r0
   11d3c:	mov	r2, sl
   11d40:	mov	r0, r6
   11d44:	mov	r1, #1
   11d48:	mov	r8, fp
   11d4c:	ldr	r4, [r7, r3]
   11d50:	mov	fp, r7
   11d54:	ldr	r3, [r4]
   11d58:	str	ip, [sp]
   11d5c:	bl	1116c <fwrite_unlocked@plt>
   11d60:	ldr	r0, [r4]
   11d64:	ldr	ip, [sp]
   11d68:	ldr	r3, [r0, #20]
   11d6c:	ldr	r2, [r0, #24]
   11d70:	cmp	r3, r2
   11d74:	bcs	11f10 <__assert_fail@plt+0xb70>
   11d78:	add	r2, r3, #1
   11d7c:	str	r9, [sp, #8]
   11d80:	str	r2, [r0, #20]
   11d84:	str	r9, [sp, #12]
   11d88:	strb	ip, [r3]
   11d8c:	str	r9, [sp, #32]
   11d90:	mov	r4, r9
   11d94:	str	r9, [sp, #20]
   11d98:	mov	r5, r9
   11d9c:	str	r9, [sp, #16]
   11da0:	mov	sl, r9
   11da4:	b	11cbc <__assert_fail@plt+0x91c>
   11da8:	subs	r0, r5, #0
   11dac:	mvnne	r0, #0
   11db0:	mov	r3, r0
   11db4:	b	11ac8 <__assert_fail@plt+0x728>
   11db8:	rsb	r3, r5, #0
   11dbc:	mov	r0, r3
   11dc0:	b	11ac8 <__assert_fail@plt+0x728>
   11dc4:	and	r3, r5, #7
   11dc8:	rsb	r3, r3, #8
   11dcc:	mov	r0, r3
   11dd0:	b	11ac8 <__assert_fail@plt+0x728>
   11dd4:	bl	112b0 <__errno_location@plt>
   11dd8:	ldr	ip, [sp, #96]	; 0x60
   11ddc:	cmp	sl, #0
   11de0:	ldr	r3, [r0]
   11de4:	str	r3, [ip]
   11de8:	beq	11e10 <__assert_fail@plt+0xa70>
   11dec:	ldr	r3, [pc, #340]	; 11f48 <__assert_fail@plt+0xba8>
   11df0:	mov	r2, sl
   11df4:	ldr	r0, [pc, #340]	; 11f50 <__assert_fail@plt+0xbb0>
   11df8:	mov	r1, #1
   11dfc:	ldr	r3, [fp, r3]
   11e00:	add	r0, pc, r0
   11e04:	ldr	r0, [r0, #4]
   11e08:	ldr	r3, [r3]
   11e0c:	bl	1116c <fwrite_unlocked@plt>
   11e10:	ldr	ip, [sp, #92]	; 0x5c
   11e14:	add	r0, sp, #8192	; 0x2000
   11e18:	ldr	r2, [r0, #140]	; 0x8c
   11e1c:	ldr	r3, [ip]
   11e20:	cmp	r2, r3
   11e24:	bne	11f0c <__assert_fail@plt+0xb6c>
   11e28:	add	sp, sp, #8320	; 0x2080
   11e2c:	add	sp, sp, #20
   11e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e34:	ldr	r1, [sp, #44]	; 0x2c
   11e38:	movw	r3, #8208	; 0x2010
   11e3c:	ldr	r2, [sp, #24]
   11e40:	add	r0, sp, #124	; 0x7c
   11e44:	bl	11124 <__memmove_chk@plt>
   11e48:	ldr	ip, [sp, #24]
   11e4c:	add	lr, sp, #124	; 0x7c
   11e50:	mov	r1, #1
   11e54:	add	r0, lr, ip
   11e58:	mov	r2, #8192	; 0x2000
   11e5c:	ldr	r3, [sp, #80]	; 0x50
   11e60:	str	lr, [sp, #44]	; 0x2c
   11e64:	bl	11370 <fread_unlocked@plt>
   11e68:	ldr	ip, [sp, #24]
   11e6c:	add	ip, ip, r0
   11e70:	str	ip, [sp, #24]
   11e74:	b	119c0 <__assert_fail@plt+0x620>
   11e78:	ldr	r0, [lr, #4]
   11e7c:	ldr	r1, [sp, #100]	; 0x64
   11e80:	str	r3, [sp, #4]
   11e84:	str	ip, [sp]
   11e88:	bl	1473c <close_stdout@@Base+0x2148>
   11e8c:	ldr	r1, [sp, #48]	; 0x30
   11e90:	str	r0, [r1, #4]
   11e94:	mov	r6, r0
   11e98:	ldr	ip, [sp]
   11e9c:	ldr	r3, [sp, #4]
   11ea0:	b	11bc8 <__assert_fail@plt+0x828>
   11ea4:	mov	r0, #0
   11ea8:	mov	r1, #1
   11eac:	str	r3, [sp, #16]
   11eb0:	mov	r4, r7
   11eb4:	str	r0, [sp, #8]
   11eb8:	mov	r5, r3
   11ebc:	str	r1, [sp, #32]
   11ec0:	mov	sl, r7
   11ec4:	str	ip, [sp, #84]	; 0x54
   11ec8:	str	r0, [sp, #12]
   11ecc:	str	r1, [sp, #20]
   11ed0:	b	11cbc <__assert_fail@plt+0x91c>
   11ed4:	ldr	r0, [sp, #12]
   11ed8:	add	r0, r0, #1
   11edc:	str	r0, [sp, #12]
   11ee0:	b	11c68 <__assert_fail@plt+0x8c8>
   11ee4:	mov	r1, #10
   11ee8:	mov	r5, #0
   11eec:	bl	11328 <__overflow@plt>
   11ef0:	ldr	ip, [sp, #76]	; 0x4c
   11ef4:	mov	sl, r5
   11ef8:	ldr	r6, [ip, #4]
   11efc:	b	11b6c <__assert_fail@plt+0x7cc>
   11f00:	mov	r1, #10
   11f04:	bl	11328 <__overflow@plt>
   11f08:	b	11b30 <__assert_fail@plt+0x790>
   11f0c:	bl	11190 <__stack_chk_fail@plt>
   11f10:	mov	r1, ip
   11f14:	bl	11328 <__overflow@plt>
   11f18:	str	r9, [sp, #8]
   11f1c:	str	r9, [sp, #12]
   11f20:	b	11d8c <__assert_fail@plt+0x9ec>
   11f24:	andeq	r5, r1, r0, lsl r7
   11f28:	andeq	r0, r0, ip, lsl #2
   11f2c:	muleq	r1, r4, r8
   11f30:	andeq	r5, r1, ip, lsl #17
   11f34:	andeq	r5, r1, r0, asr r8
   11f38:	andeq	r5, r1, ip, lsr #16
   11f3c:	andeq	r5, r1, ip, asr #14
   11f40:	andeq	r5, r1, r0, asr #14
   11f44:	andeq	r5, r1, r4, lsr r7
   11f48:	andeq	r0, r0, ip, lsr #2
   11f4c:	andeq	r5, r1, r4, lsr #10
   11f50:	muleq	r1, r0, r3
   11f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f58:	sub	sp, sp, #44	; 0x2c
   11f5c:	ldr	r8, [pc, #1044]	; 12378 <__assert_fail@plt+0xfd8>
   11f60:	ldr	r3, [pc, #1044]	; 1237c <__assert_fail@plt+0xfdc>
   11f64:	add	r8, pc, r8
   11f68:	str	r0, [sp, #4]
   11f6c:	str	r1, [sp]
   11f70:	ldr	r3, [r8, r3]
   11f74:	ldrb	r2, [r0]
   11f78:	str	r3, [sp, #12]
   11f7c:	cmp	r2, #45	; 0x2d
   11f80:	ldr	r3, [r3]
   11f84:	str	r3, [sp, #36]	; 0x24
   11f88:	beq	1200c <__assert_fail@plt+0xc6c>
   11f8c:	ldr	r1, [pc, #1004]	; 12380 <__assert_fail@plt+0xfe0>
   11f90:	ldr	r0, [sp, #4]
   11f94:	add	r1, pc, r1
   11f98:	bl	11358 <fopen64@plt>
   11f9c:	mov	r5, r0
   11fa0:	cmp	r5, #0
   11fa4:	beq	1203c <__assert_fail@plt+0xc9c>
   11fa8:	bl	111d8 <__ctype_get_mb_cur_max@plt>
   11fac:	cmp	r0, #1
   11fb0:	bls	120d8 <__assert_fail@plt+0xd38>
   11fb4:	ldr	r1, [sp]
   11fb8:	mov	r0, r5
   11fbc:	add	r2, sp, #32
   11fc0:	bl	118cc <__assert_fail@plt+0x52c>
   11fc4:	ldr	r3, [r5]
   11fc8:	tst	r3, #32
   11fcc:	bne	12094 <__assert_fail@plt+0xcf4>
   11fd0:	ldr	r2, [sp, #4]
   11fd4:	ldrb	r3, [r2]
   11fd8:	cmp	r3, #45	; 0x2d
   11fdc:	bne	12060 <__assert_fail@plt+0xcc0>
   11fe0:	ldrb	r3, [r2, #1]
   11fe4:	cmp	r3, #0
   11fe8:	bne	12060 <__assert_fail@plt+0xcc0>
   11fec:	mov	r0, #1
   11ff0:	ldr	r1, [sp, #12]
   11ff4:	ldr	r2, [sp, #36]	; 0x24
   11ff8:	ldr	r3, [r1]
   11ffc:	cmp	r2, r3
   12000:	bne	12314 <__assert_fail@plt+0xf74>
   12004:	add	sp, sp, #44	; 0x2c
   12008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1200c:	ldrb	r3, [r0, #1]
   12010:	cmp	r3, #0
   12014:	bne	11f8c <__assert_fail@plt+0xbec>
   12018:	ldr	r3, [pc, #868]	; 12384 <__assert_fail@plt+0xfe4>
   1201c:	mov	r1, #1
   12020:	ldr	r2, [pc, #864]	; 12388 <__assert_fail@plt+0xfe8>
   12024:	ldr	r3, [r8, r3]
   12028:	add	r2, pc, r2
   1202c:	strb	r1, [r2, #16]
   12030:	ldr	r5, [r3]
   12034:	cmp	r5, #0
   12038:	bne	11fa8 <__assert_fail@plt+0xc08>
   1203c:	bl	112b0 <__errno_location@plt>
   12040:	ldr	r2, [pc, #836]	; 1238c <__assert_fail@plt+0xfec>
   12044:	ldr	r3, [sp, #4]
   12048:	add	r2, pc, r2
   1204c:	ldr	r1, [r0]
   12050:	mov	r0, r5
   12054:	bl	11208 <error@plt>
   12058:	mov	r0, #1
   1205c:	b	11ff0 <__assert_fail@plt+0xc50>
   12060:	mov	r0, r5
   12064:	bl	14d90 <close_stdout@@Base+0x279c>
   12068:	cmn	r0, #1
   1206c:	bne	11fec <__assert_fail@plt+0xc4c>
   12070:	bl	112b0 <__errno_location@plt>
   12074:	ldr	r2, [pc, #788]	; 12390 <__assert_fail@plt+0xff0>
   12078:	ldr	r3, [sp, #4]
   1207c:	add	r2, pc, r2
   12080:	ldr	r1, [r0]
   12084:	mov	r0, #0
   12088:	bl	11208 <error@plt>
   1208c:	mov	r0, #0
   12090:	b	11ff0 <__assert_fail@plt+0xc50>
   12094:	ldr	r2, [pc, #760]	; 12394 <__assert_fail@plt+0xff4>
   12098:	mov	r0, #0
   1209c:	ldr	r1, [sp, #32]
   120a0:	ldr	r3, [sp, #4]
   120a4:	add	r2, pc, r2
   120a8:	bl	11208 <error@plt>
   120ac:	ldr	r1, [sp, #4]
   120b0:	ldrb	r3, [r1]
   120b4:	cmp	r3, #45	; 0x2d
   120b8:	bne	120c8 <__assert_fail@plt+0xd28>
   120bc:	ldrb	r0, [r1, #1]
   120c0:	cmp	r0, #0
   120c4:	beq	11ff0 <__assert_fail@plt+0xc50>
   120c8:	mov	r0, r5
   120cc:	bl	14d90 <close_stdout@@Base+0x279c>
   120d0:	mov	r0, #0
   120d4:	b	11ff0 <__assert_fail@plt+0xc50>
   120d8:	ldr	r7, [pc, #696]	; 12398 <__assert_fail@plt+0xff8>
   120dc:	mov	r1, #2
   120e0:	mov	r0, r5
   120e4:	mov	r4, #0
   120e8:	add	r7, pc, r7
   120ec:	mov	fp, r4
   120f0:	add	r2, r7, #20
   120f4:	str	r2, [sp, #24]
   120f8:	bl	127b4 <close_stdout@@Base+0x1c0>
   120fc:	ldr	r3, [pc, #664]	; 1239c <__assert_fail@plt+0xffc>
   12100:	ldr	r1, [pc, #664]	; 123a0 <__assert_fail@plt+0x1000>
   12104:	mov	sl, r8
   12108:	ldr	r2, [pc, #660]	; 123a4 <__assert_fail@plt+0x1004>
   1210c:	add	r3, pc, r3
   12110:	add	r1, pc, r1
   12114:	str	r3, [sp, #8]
   12118:	add	r2, pc, r2
   1211c:	str	r1, [sp, #20]
   12120:	str	r2, [sp, #28]
   12124:	ldr	r3, [r5, #4]
   12128:	ldr	r2, [r5, #8]
   1212c:	cmp	r3, r2
   12130:	bcs	12318 <__assert_fail@plt+0xf78>
   12134:	add	r2, r3, #1
   12138:	str	r2, [r5, #4]
   1213c:	ldrb	r6, [r3]
   12140:	ldr	r3, [r7, #20]
   12144:	add	r9, r4, #1
   12148:	cmp	r9, r3
   1214c:	bcs	12218 <__assert_fail@plt+0xe78>
   12150:	cmp	r6, #10
   12154:	ldr	r8, [r7, #24]
   12158:	uxtbne	r6, r6
   1215c:	beq	12238 <__assert_fail@plt+0xe98>
   12160:	mov	r0, fp
   12164:	mov	r1, r6
   12168:	bl	11874 <__assert_fail@plt+0x4d4>
   1216c:	ldr	r3, [sp]
   12170:	cmp	r3, r0
   12174:	mov	fp, r0
   12178:	bcs	122fc <__assert_fail@plt+0xf5c>
   1217c:	ldr	r1, [sp, #8]
   12180:	ldrb	r3, [r1, #8]
   12184:	cmp	r3, #0
   12188:	beq	12204 <__assert_fail@plt+0xe64>
   1218c:	cmp	r4, #0
   12190:	beq	1220c <__assert_fail@plt+0xe6c>
   12194:	bl	11268 <__ctype_b_loc@plt>
   12198:	mov	r9, r4
   1219c:	add	r2, r8, r4
   121a0:	ldr	r0, [r0]
   121a4:	b	121ac <__assert_fail@plt+0xe0c>
   121a8:	mov	r9, r3
   121ac:	ldrb	r1, [r2, #-1]!
   121b0:	sub	r3, r9, #1
   121b4:	lsl	r1, r1, #1
   121b8:	ldrh	r1, [r0, r1]
   121bc:	tst	r1, #1
   121c0:	bne	12264 <__assert_fail@plt+0xec4>
   121c4:	cmp	r3, #0
   121c8:	bne	121a8 <__assert_fail@plt+0xe08>
   121cc:	ldr	r3, [pc, #468]	; 123a8 <__assert_fail@plt+0x1008>
   121d0:	mov	r1, #10
   121d4:	strb	r1, [r8, r4]
   121d8:	add	r2, r4, #1
   121dc:	mov	r0, r8
   121e0:	mov	r1, #1
   121e4:	ldr	r3, [sl, r3]
   121e8:	mov	r4, #0
   121ec:	mov	fp, r4
   121f0:	ldr	r3, [r3]
   121f4:	bl	1116c <fwrite_unlocked@plt>
   121f8:	ldr	r2, [sp, #20]
   121fc:	ldr	r8, [r2, #24]
   12200:	b	12160 <__assert_fail@plt+0xdc0>
   12204:	cmp	r4, #0
   12208:	bne	121cc <__assert_fail@plt+0xe2c>
   1220c:	strb	r6, [r8]
   12210:	mov	r4, #1
   12214:	b	12124 <__assert_fail@plt+0xd84>
   12218:	ldr	r0, [r7, #24]
   1221c:	ldr	r1, [sp, #24]
   12220:	bl	1473c <close_stdout@@Base+0x2148>
   12224:	cmp	r6, #10
   12228:	uxtbne	r6, r6
   1222c:	mov	r8, r0
   12230:	str	r0, [r7, #24]
   12234:	bne	12160 <__assert_fail@plt+0xdc0>
   12238:	ldr	r3, [pc, #360]	; 123a8 <__assert_fail@plt+0x1008>
   1223c:	mov	r2, r9
   12240:	strb	r6, [r8, r4]
   12244:	mov	r0, r8
   12248:	mov	r4, #0
   1224c:	mov	r1, #1
   12250:	ldr	r3, [sl, r3]
   12254:	mov	fp, r4
   12258:	ldr	r3, [r3]
   1225c:	bl	1116c <fwrite_unlocked@plt>
   12260:	b	12124 <__assert_fail@plt+0xd84>
   12264:	ldr	r3, [pc, #316]	; 123a8 <__assert_fail@plt+0x1008>
   12268:	mov	r0, r8
   1226c:	mov	r2, r9
   12270:	mov	r1, #1
   12274:	ldr	r8, [sl, r3]
   12278:	ldr	r3, [r8]
   1227c:	bl	1116c <fwrite_unlocked@plt>
   12280:	ldr	r0, [r8]
   12284:	ldr	r2, [r0, #24]
   12288:	ldr	r3, [r0, #20]
   1228c:	cmp	r3, r2
   12290:	addcc	r2, r3, #1
   12294:	strcc	r2, [r0, #20]
   12298:	movcc	r2, #10
   1229c:	strbcc	r2, [r3]
   122a0:	bcs	12364 <__assert_fail@plt+0xfc4>
   122a4:	ldr	r3, [sp, #28]
   122a8:	rsb	r4, r9, r4
   122ac:	mov	r2, r4
   122b0:	ldr	r3, [r3, #24]
   122b4:	add	r1, r3, r9
   122b8:	mov	r0, r3
   122bc:	str	r3, [sp, #16]
   122c0:	bl	11118 <memmove@plt>
   122c4:	cmp	r4, #0
   122c8:	beq	12308 <__assert_fail@plt+0xf68>
   122cc:	ldr	r3, [sp, #16]
   122d0:	mov	fp, #0
   122d4:	mov	r0, fp
   122d8:	add	r9, r4, r3
   122dc:	mov	r8, r3
   122e0:	ldrb	r1, [r8], #1
   122e4:	bl	11874 <__assert_fail@plt+0x4d4>
   122e8:	cmp	r8, r9
   122ec:	bne	122e0 <__assert_fail@plt+0xf40>
   122f0:	mov	fp, r0
   122f4:	ldr	r8, [sp, #16]
   122f8:	b	12160 <__assert_fail@plt+0xdc0>
   122fc:	strb	r6, [r8, r4]
   12300:	add	r4, r4, #1
   12304:	b	12124 <__assert_fail@plt+0xd84>
   12308:	ldr	r8, [sp, #16]
   1230c:	mov	fp, r4
   12310:	b	12160 <__assert_fail@plt+0xdc0>
   12314:	bl	11190 <__stack_chk_fail@plt>
   12318:	mov	r0, r5
   1231c:	bl	1131c <__uflow@plt>
   12320:	cmn	r0, #1
   12324:	bne	12370 <__assert_fail@plt+0xfd0>
   12328:	bl	112b0 <__errno_location@plt>
   1232c:	cmp	r4, #0
   12330:	ldr	r3, [r0]
   12334:	str	r3, [sp, #32]
   12338:	beq	11fc4 <__assert_fail@plt+0xc24>
   1233c:	ldr	r3, [pc, #100]	; 123a8 <__assert_fail@plt+0x1008>
   12340:	mov	r2, r4
   12344:	ldr	r0, [pc, #96]	; 123ac <__assert_fail@plt+0x100c>
   12348:	mov	r1, #1
   1234c:	ldr	r3, [sl, r3]
   12350:	add	r0, pc, r0
   12354:	ldr	r0, [r0, #24]
   12358:	ldr	r3, [r3]
   1235c:	bl	1116c <fwrite_unlocked@plt>
   12360:	b	11fc4 <__assert_fail@plt+0xc24>
   12364:	mov	r1, #10
   12368:	bl	11328 <__overflow@plt>
   1236c:	b	122a4 <__assert_fail@plt+0xf04>
   12370:	mov	r6, r0
   12374:	b	12140 <__assert_fail@plt+0xda0>
   12378:	muleq	r1, r4, r0
   1237c:	andeq	r0, r0, ip, lsl #2
   12380:	andeq	r3, r0, r0, lsr #14
   12384:	andeq	r0, r0, r8, lsr #2
   12388:	andeq	r5, r1, r8, ror #2
   1238c:	andeq	r3, r0, r0, asr #20
   12390:	andeq	r3, r0, ip, lsl #20
   12394:	andeq	r3, r0, r4, ror #19
   12398:	andeq	r5, r1, r8, lsr #1
   1239c:	andeq	r5, r1, r4, lsl #1
   123a0:	andeq	r5, r1, r0, lsl #1
   123a4:	andeq	r5, r1, r8, ror r0
   123a8:	andeq	r0, r0, ip, lsr #2
   123ac:	andeq	r4, r1, r0, asr #28
   123b0:	push	{r4, r5, r6, lr}
   123b4:	subs	r4, r0, #0
   123b8:	ldr	r5, [pc, #456]	; 12588 <__assert_fail@plt+0x11e8>
   123bc:	add	r5, pc, r5
   123c0:	beq	12408 <__assert_fail@plt+0x1068>
   123c4:	ldr	r3, [pc, #448]	; 1258c <__assert_fail@plt+0x11ec>
   123c8:	mov	r2, #5
   123cc:	ldr	r1, [pc, #444]	; 12590 <__assert_fail@plt+0x11f0>
   123d0:	mov	r0, #0
   123d4:	ldr	r3, [r5, r3]
   123d8:	add	r1, pc, r1
   123dc:	ldr	r6, [r3]
   123e0:	bl	11184 <dcgettext@plt>
   123e4:	ldr	r3, [pc, #424]	; 12594 <__assert_fail@plt+0x11f4>
   123e8:	mov	r1, #1
   123ec:	ldr	r3, [r5, r3]
   123f0:	ldr	r3, [r3]
   123f4:	mov	r2, r0
   123f8:	mov	r0, r6
   123fc:	bl	112f8 <__fprintf_chk@plt>
   12400:	mov	r0, r4
   12404:	bl	11274 <exit@plt>
   12408:	ldr	r1, [pc, #392]	; 12598 <__assert_fail@plt+0x11f8>
   1240c:	mov	r2, #5
   12410:	add	r1, pc, r1
   12414:	bl	11184 <dcgettext@plt>
   12418:	ldr	r3, [pc, #372]	; 12594 <__assert_fail@plt+0x11f4>
   1241c:	ldr	r6, [r5, r3]
   12420:	ldr	r2, [r6]
   12424:	mov	r1, r0
   12428:	mov	r0, #1
   1242c:	bl	112e0 <__printf_chk@plt>
   12430:	ldr	r1, [pc, #356]	; 1259c <__assert_fail@plt+0x11fc>
   12434:	mov	r2, #5
   12438:	mov	r0, r4
   1243c:	add	r1, pc, r1
   12440:	bl	11184 <dcgettext@plt>
   12444:	ldr	r3, [pc, #340]	; 125a0 <__assert_fail@plt+0x1200>
   12448:	ldr	r5, [r5, r3]
   1244c:	ldr	r1, [r5]
   12450:	bl	110d0 <fputs_unlocked@plt>
   12454:	ldr	r1, [pc, #328]	; 125a4 <__assert_fail@plt+0x1204>
   12458:	mov	r2, #5
   1245c:	mov	r0, r4
   12460:	add	r1, pc, r1
   12464:	bl	11184 <dcgettext@plt>
   12468:	ldr	r1, [r5]
   1246c:	bl	110d0 <fputs_unlocked@plt>
   12470:	ldr	r1, [pc, #304]	; 125a8 <__assert_fail@plt+0x1208>
   12474:	mov	r2, #5
   12478:	mov	r0, r4
   1247c:	add	r1, pc, r1
   12480:	bl	11184 <dcgettext@plt>
   12484:	ldr	r1, [r5]
   12488:	bl	110d0 <fputs_unlocked@plt>
   1248c:	ldr	r1, [pc, #280]	; 125ac <__assert_fail@plt+0x120c>
   12490:	mov	r2, #5
   12494:	mov	r0, r4
   12498:	add	r1, pc, r1
   1249c:	bl	11184 <dcgettext@plt>
   124a0:	ldr	r1, [r5]
   124a4:	bl	110d0 <fputs_unlocked@plt>
   124a8:	ldr	r1, [pc, #256]	; 125b0 <__assert_fail@plt+0x1210>
   124ac:	mov	r2, #5
   124b0:	mov	r0, r4
   124b4:	add	r1, pc, r1
   124b8:	bl	11184 <dcgettext@plt>
   124bc:	ldr	r1, [r5]
   124c0:	bl	110d0 <fputs_unlocked@plt>
   124c4:	ldr	r1, [pc, #232]	; 125b4 <__assert_fail@plt+0x1214>
   124c8:	mov	r2, #5
   124cc:	mov	r0, r4
   124d0:	add	r1, pc, r1
   124d4:	bl	11184 <dcgettext@plt>
   124d8:	ldr	r2, [pc, #216]	; 125b8 <__assert_fail@plt+0x1218>
   124dc:	ldr	r3, [pc, #216]	; 125bc <__assert_fail@plt+0x121c>
   124e0:	add	r2, pc, r2
   124e4:	add	r3, pc, r3
   124e8:	mov	r1, r0
   124ec:	mov	r0, #1
   124f0:	bl	112e0 <__printf_chk@plt>
   124f4:	mov	r0, #5
   124f8:	mov	r1, r4
   124fc:	bl	11334 <setlocale@plt>
   12500:	cmp	r0, #0
   12504:	beq	12520 <__assert_fail@plt+0x1180>
   12508:	ldr	r1, [pc, #176]	; 125c0 <__assert_fail@plt+0x1220>
   1250c:	mov	r2, #3
   12510:	add	r1, pc, r1
   12514:	bl	1137c <strncmp@plt>
   12518:	cmp	r0, #0
   1251c:	bne	12554 <__assert_fail@plt+0x11b4>
   12520:	ldr	r1, [pc, #156]	; 125c4 <__assert_fail@plt+0x1224>
   12524:	mov	r2, #5
   12528:	mov	r0, #0
   1252c:	add	r1, pc, r1
   12530:	bl	11184 <dcgettext@plt>
   12534:	mov	r5, r0
   12538:	ldr	r0, [r6]
   1253c:	bl	1270c <close_stdout@@Base+0x118>
   12540:	mov	r1, r5
   12544:	mov	r2, r0
   12548:	mov	r0, #1
   1254c:	bl	112e0 <__printf_chk@plt>
   12550:	b	12400 <__assert_fail@plt+0x1060>
   12554:	ldr	r1, [pc, #108]	; 125c8 <__assert_fail@plt+0x1228>
   12558:	mov	r2, #5
   1255c:	mov	r0, r4
   12560:	add	r1, pc, r1
   12564:	bl	11184 <dcgettext@plt>
   12568:	mov	r5, r0
   1256c:	ldr	r0, [r6]
   12570:	bl	1270c <close_stdout@@Base+0x118>
   12574:	mov	r1, r5
   12578:	mov	r2, r0
   1257c:	mov	r0, #1
   12580:	bl	112e0 <__printf_chk@plt>
   12584:	b	12520 <__assert_fail@plt+0x1180>
   12588:	andeq	r4, r1, ip, lsr ip
   1258c:	andeq	r0, r0, r8, lsl r1
   12590:	andeq	r3, r0, r0, ror #5
   12594:	andeq	r0, r0, r8, lsr r1
   12598:	ldrdeq	r3, [r0], -r0
   1259c:	andeq	r3, r0, r8, asr #5
   125a0:	andeq	r0, r0, ip, lsr #2
   125a4:	strdeq	r3, [r0], -ip
   125a8:	andeq	r3, r0, ip, lsr #6
   125ac:	andeq	r3, r0, r0, ror #7
   125b0:	strdeq	r3, [r0], -r4
   125b4:	andeq	r3, r0, r0, lsl r4
   125b8:	andeq	r3, r0, r8, lsl r4
   125bc:	andeq	r3, r0, r4, lsr #8
   125c0:	andeq	r3, r0, r0, lsr #8
   125c4:	andeq	r3, r0, r0, asr r4
   125c8:	ldrdeq	r3, [r0], -r4
   125cc:	ldr	r3, [pc, #8]	; 125dc <__assert_fail@plt+0x123c>
   125d0:	add	r3, pc, r3
   125d4:	str	r0, [r3]
   125d8:	bx	lr
   125dc:	ldrdeq	r4, [r1], -ip
   125e0:	ldr	r3, [pc, #8]	; 125f0 <__assert_fail@plt+0x1250>
   125e4:	add	r3, pc, r3
   125e8:	strb	r0, [r3, #4]
   125ec:	bx	lr
   125f0:	andeq	r4, r1, r8, asr #23

000125f4 <close_stdout@@Base>:
   125f4:	push	{r4, r5, r6, r7, lr}
   125f8:	sub	sp, sp, #12
   125fc:	ldr	r4, [pc, #228]	; 126e8 <close_stdout@@Base+0xf4>
   12600:	ldr	r3, [pc, #228]	; 126ec <close_stdout@@Base+0xf8>
   12604:	add	r4, pc, r4
   12608:	ldr	r3, [r4, r3]
   1260c:	ldr	r0, [r3]
   12610:	bl	14f38 <close_stdout@@Base+0x2944>
   12614:	cmp	r0, #0
   12618:	beq	12640 <close_stdout@@Base+0x4c>
   1261c:	ldr	r3, [pc, #204]	; 126f0 <close_stdout@@Base+0xfc>
   12620:	add	r3, pc, r3
   12624:	ldrb	r3, [r3, #4]
   12628:	cmp	r3, #0
   1262c:	beq	12660 <close_stdout@@Base+0x6c>
   12630:	bl	112b0 <__errno_location@plt>
   12634:	ldr	r3, [r0]
   12638:	cmp	r3, #32
   1263c:	bne	12660 <close_stdout@@Base+0x6c>
   12640:	ldr	r3, [pc, #172]	; 126f4 <close_stdout@@Base+0x100>
   12644:	ldr	r3, [r4, r3]
   12648:	ldr	r0, [r3]
   1264c:	bl	14f38 <close_stdout@@Base+0x2944>
   12650:	cmp	r0, #0
   12654:	bne	126b4 <close_stdout@@Base+0xc0>
   12658:	add	sp, sp, #12
   1265c:	pop	{r4, r5, r6, r7, pc}
   12660:	ldr	r1, [pc, #144]	; 126f8 <close_stdout@@Base+0x104>
   12664:	mov	r0, #0
   12668:	mov	r2, #5
   1266c:	add	r1, pc, r1
   12670:	bl	11184 <dcgettext@plt>
   12674:	ldr	r3, [pc, #128]	; 126fc <close_stdout@@Base+0x108>
   12678:	ldr	r5, [pc, r3]
   1267c:	cmp	r5, #0
   12680:	mov	r6, r0
   12684:	beq	126c4 <close_stdout@@Base+0xd0>
   12688:	bl	112b0 <__errno_location@plt>
   1268c:	ldr	r7, [r0]
   12690:	mov	r0, r5
   12694:	bl	13eec <close_stdout@@Base+0x18f8>
   12698:	ldr	r2, [pc, #96]	; 12700 <close_stdout@@Base+0x10c>
   1269c:	str	r6, [sp]
   126a0:	mov	r1, r7
   126a4:	add	r2, pc, r2
   126a8:	mov	r3, r0
   126ac:	mov	r0, #0
   126b0:	bl	11208 <error@plt>
   126b4:	ldr	r3, [pc, #72]	; 12704 <close_stdout@@Base+0x110>
   126b8:	ldr	r3, [r4, r3]
   126bc:	ldr	r0, [r3]
   126c0:	bl	1113c <_exit@plt>
   126c4:	bl	112b0 <__errno_location@plt>
   126c8:	ldr	r2, [pc, #56]	; 12708 <close_stdout@@Base+0x114>
   126cc:	add	r2, pc, r2
   126d0:	mov	r3, r0
   126d4:	mov	r0, r5
   126d8:	ldr	r1, [r3]
   126dc:	mov	r3, r6
   126e0:	bl	11208 <error@plt>
   126e4:	b	126b4 <close_stdout@@Base+0xc0>
   126e8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   126ec:	andeq	r0, r0, ip, lsr #2
   126f0:	andeq	r4, r1, ip, lsl #23
   126f4:	andeq	r0, r0, r8, lsl r1
   126f8:	andeq	r3, r0, ip, lsl #8
   126fc:	andeq	r4, r1, r4, lsr fp
   12700:	andeq	r3, r0, r0, ror #7
   12704:	andeq	r0, r0, r0, lsr r1
   12708:			; <UNDEFINED> instruction: 0x000033bc
   1270c:	ldrb	r3, [r0]
   12710:	cmp	r3, #47	; 0x2f
   12714:	bne	12730 <close_stdout@@Base+0x13c>
   12718:	add	r2, r0, #1
   1271c:	mov	r0, r2
   12720:	add	r2, r2, #1
   12724:	ldrb	r3, [r0]
   12728:	cmp	r3, #47	; 0x2f
   1272c:	beq	1271c <close_stdout@@Base+0x128>
   12730:	cmp	r3, #0
   12734:	bxeq	lr
   12738:	mov	r2, r0
   1273c:	mov	r1, #0
   12740:	cmp	r3, #47	; 0x2f
   12744:	moveq	r1, #1
   12748:	beq	12758 <close_stdout@@Base+0x164>
   1274c:	cmp	r1, #0
   12750:	movne	r0, r2
   12754:	movne	r1, #0
   12758:	ldrb	r3, [r2, #1]!
   1275c:	cmp	r3, #0
   12760:	bne	12740 <close_stdout@@Base+0x14c>
   12764:	bx	lr
   12768:	push	{r4, lr}
   1276c:	mov	r4, r0
   12770:	bl	1128c <strlen@plt>
   12774:	cmp	r0, #1
   12778:	popls	{r4, pc}
   1277c:	sub	r3, r0, #1
   12780:	ldrb	r2, [r4, r3]
   12784:	cmp	r2, #47	; 0x2f
   12788:	popne	{r4, pc}
   1278c:	mov	r0, r3
   12790:	cmp	r0, #1
   12794:	sub	r3, r3, #1
   12798:	beq	127ac <close_stdout@@Base+0x1b8>
   1279c:	ldrb	r2, [r4, r3]
   127a0:	cmp	r2, #47	; 0x2f
   127a4:	popne	{r4, pc}
   127a8:	b	1278c <close_stdout@@Base+0x198>
   127ac:	pop	{r4, pc}
   127b0:	b	110f4 <posix_fadvise64@plt>
   127b4:	cmp	r0, #0
   127b8:	push	{r4, r5, r6, lr}
   127bc:	mov	r6, r1
   127c0:	sub	sp, sp, #16
   127c4:	beq	127e8 <close_stdout@@Base+0x1f4>
   127c8:	mov	r4, #0
   127cc:	mov	r5, #0
   127d0:	bl	112ec <fileno@plt>
   127d4:	str	r6, [sp, #8]
   127d8:	mov	r2, r4
   127dc:	mov	r3, r5
   127e0:	strd	r4, [sp]
   127e4:	bl	127b0 <close_stdout@@Base+0x1bc>
   127e8:	add	sp, sp, #16
   127ec:	pop	{r4, r5, r6, pc}
   127f0:	push	{r3, r4, r5, r6, r7, lr}
   127f4:	subs	r4, r0, #0
   127f8:	ldr	r5, [pc, #172]	; 128ac <close_stdout@@Base+0x2b8>
   127fc:	add	r5, pc, r5
   12800:	beq	12888 <close_stdout@@Base+0x294>
   12804:	mov	r1, #47	; 0x2f
   12808:	bl	11340 <strrchr@plt>
   1280c:	subs	r6, r0, #0
   12810:	beq	1286c <close_stdout@@Base+0x278>
   12814:	add	r7, r6, #1
   12818:	rsb	r3, r4, r7
   1281c:	cmp	r3, #6
   12820:	ble	1286c <close_stdout@@Base+0x278>
   12824:	ldr	r1, [pc, #132]	; 128b0 <close_stdout@@Base+0x2bc>
   12828:	sub	r0, r6, #6
   1282c:	mov	r2, #7
   12830:	add	r1, pc, r1
   12834:	bl	1137c <strncmp@plt>
   12838:	cmp	r0, #0
   1283c:	bne	1286c <close_stdout@@Base+0x278>
   12840:	ldr	r1, [pc, #108]	; 128b4 <close_stdout@@Base+0x2c0>
   12844:	mov	r0, r7
   12848:	mov	r2, #3
   1284c:	add	r1, pc, r1
   12850:	bl	1137c <strncmp@plt>
   12854:	cmp	r0, #0
   12858:	movne	r4, r7
   1285c:	ldreq	r3, [pc, #84]	; 128b8 <close_stdout@@Base+0x2c4>
   12860:	addeq	r4, r6, #4
   12864:	ldreq	r3, [r5, r3]
   12868:	streq	r4, [r3]
   1286c:	ldr	r2, [pc, #72]	; 128bc <close_stdout@@Base+0x2c8>
   12870:	ldr	r3, [pc, #72]	; 128c0 <close_stdout@@Base+0x2cc>
   12874:	ldr	r2, [r5, r2]
   12878:	str	r4, [r2]
   1287c:	ldr	r3, [r5, r3]
   12880:	str	r4, [r3]
   12884:	pop	{r3, r4, r5, r6, r7, pc}
   12888:	ldr	r3, [pc, #52]	; 128c4 <close_stdout@@Base+0x2d0>
   1288c:	mov	r1, #1
   12890:	ldr	r0, [pc, #48]	; 128c8 <close_stdout@@Base+0x2d4>
   12894:	mov	r2, #55	; 0x37
   12898:	ldr	r3, [r5, r3]
   1289c:	add	r0, pc, r0
   128a0:	ldr	r3, [r3]
   128a4:	bl	111c0 <fwrite@plt>
   128a8:	bl	11388 <abort@plt>
   128ac:	strdeq	r4, [r1], -ip
   128b0:	muleq	r0, r4, r2
   128b4:	andeq	r3, r0, r0, lsl #5
   128b8:	andeq	r0, r0, r0, asr #2
   128bc:	andeq	r0, r0, r8, lsr r1
   128c0:	andeq	r0, r0, r4, lsr r1
   128c4:	andeq	r0, r0, r8, lsl r1
   128c8:	strdeq	r3, [r0], -r0
   128cc:	push	{r3, lr}
   128d0:	mov	r3, r0
   128d4:	mov	r2, #0
   128d8:	cmp	r1, #8
   128dc:	str	r2, [r3], #4
   128e0:	add	r3, r3, #4
   128e4:	str	r2, [r0, #4]
   128e8:	str	r2, [r3], #4
   128ec:	str	r2, [r3], #4
   128f0:	str	r2, [r3], #4
   128f4:	str	r2, [r3], #4
   128f8:	str	r2, [r3], #4
   128fc:	str	r2, [r3], #4
   12900:	str	r2, [r3], #4
   12904:	str	r2, [r3], #4
   12908:	str	r2, [r3], #4
   1290c:	str	r2, [r3]
   12910:	beq	1291c <close_stdout@@Base+0x328>
   12914:	str	r1, [r0]
   12918:	pop	{r3, pc}
   1291c:	bl	11388 <abort@plt>
   12920:	push	{r4, r5, r6, lr}
   12924:	mov	r4, r0
   12928:	mov	r6, r1
   1292c:	mov	r0, #0
   12930:	mov	r1, r4
   12934:	mov	r2, #5
   12938:	bl	11184 <dcgettext@plt>
   1293c:	cmp	r0, r4
   12940:	mov	r5, r0
   12944:	beq	1294c <close_stdout@@Base+0x358>
   12948:	pop	{r4, r5, r6, pc}
   1294c:	bl	14fb8 <close_stdout@@Base+0x29c4>
   12950:	ldrb	r3, [r0]
   12954:	bic	r3, r3, #32
   12958:	cmp	r3, #85	; 0x55
   1295c:	bne	129d0 <close_stdout@@Base+0x3dc>
   12960:	ldrb	r3, [r0, #1]
   12964:	bic	r3, r3, #32
   12968:	cmp	r3, #84	; 0x54
   1296c:	bne	129bc <close_stdout@@Base+0x3c8>
   12970:	ldrb	r3, [r0, #2]
   12974:	bic	r3, r3, #32
   12978:	cmp	r3, #70	; 0x46
   1297c:	bne	129bc <close_stdout@@Base+0x3c8>
   12980:	ldrb	r3, [r0, #3]
   12984:	cmp	r3, #45	; 0x2d
   12988:	bne	129bc <close_stdout@@Base+0x3c8>
   1298c:	ldrb	r3, [r0, #4]
   12990:	cmp	r3, #56	; 0x38
   12994:	bne	129bc <close_stdout@@Base+0x3c8>
   12998:	ldrb	r3, [r0, #5]
   1299c:	cmp	r3, #0
   129a0:	bne	129bc <close_stdout@@Base+0x3c8>
   129a4:	ldrb	r3, [r5]
   129a8:	cmp	r3, #96	; 0x60
   129ac:	beq	12a48 <close_stdout@@Base+0x454>
   129b0:	ldr	r0, [pc, #180]	; 12a6c <close_stdout@@Base+0x478>
   129b4:	add	r0, pc, r0
   129b8:	pop	{r4, r5, r6, pc}
   129bc:	cmp	r6, #7
   129c0:	beq	12a54 <close_stdout@@Base+0x460>
   129c4:	ldr	r0, [pc, #164]	; 12a70 <close_stdout@@Base+0x47c>
   129c8:	add	r0, pc, r0
   129cc:	pop	{r4, r5, r6, pc}
   129d0:	cmp	r3, #71	; 0x47
   129d4:	bne	129bc <close_stdout@@Base+0x3c8>
   129d8:	ldrb	r3, [r0, #1]
   129dc:	bic	r3, r3, #32
   129e0:	cmp	r3, #66	; 0x42
   129e4:	bne	129bc <close_stdout@@Base+0x3c8>
   129e8:	ldrb	r3, [r0, #2]
   129ec:	cmp	r3, #49	; 0x31
   129f0:	bne	129bc <close_stdout@@Base+0x3c8>
   129f4:	ldrb	r3, [r0, #3]
   129f8:	cmp	r3, #56	; 0x38
   129fc:	bne	129bc <close_stdout@@Base+0x3c8>
   12a00:	ldrb	r3, [r0, #4]
   12a04:	cmp	r3, #48	; 0x30
   12a08:	bne	129bc <close_stdout@@Base+0x3c8>
   12a0c:	ldrb	r3, [r0, #5]
   12a10:	cmp	r3, #51	; 0x33
   12a14:	bne	129bc <close_stdout@@Base+0x3c8>
   12a18:	ldrb	r3, [r0, #6]
   12a1c:	cmp	r3, #48	; 0x30
   12a20:	bne	129bc <close_stdout@@Base+0x3c8>
   12a24:	ldrb	r3, [r0, #7]
   12a28:	cmp	r3, #0
   12a2c:	bne	129bc <close_stdout@@Base+0x3c8>
   12a30:	ldrb	r3, [r5]
   12a34:	cmp	r3, #96	; 0x60
   12a38:	beq	12a60 <close_stdout@@Base+0x46c>
   12a3c:	ldr	r0, [pc, #48]	; 12a74 <close_stdout@@Base+0x480>
   12a40:	add	r0, pc, r0
   12a44:	pop	{r4, r5, r6, pc}
   12a48:	ldr	r0, [pc, #40]	; 12a78 <close_stdout@@Base+0x484>
   12a4c:	add	r0, pc, r0
   12a50:	pop	{r4, r5, r6, pc}
   12a54:	ldr	r0, [pc, #32]	; 12a7c <close_stdout@@Base+0x488>
   12a58:	add	r0, pc, r0
   12a5c:	pop	{r4, r5, r6, pc}
   12a60:	ldr	r0, [pc, #24]	; 12a80 <close_stdout@@Base+0x48c>
   12a64:	add	r0, pc, r0
   12a68:	pop	{r4, r5, r6, pc}
   12a6c:	andeq	r3, r0, ip, lsr r1
   12a70:	andeq	r3, r0, r0, lsr r1
   12a74:	strheq	r3, [r0], -r4
   12a78:	strheq	r3, [r0], -r8
   12a7c:	andeq	r3, r0, r4, lsr #1
   12a80:	muleq	r0, ip, r0
   12a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a88:	sub	sp, sp, #124	; 0x7c
   12a8c:	ldr	ip, [pc, #3304]	; 1377c <close_stdout@@Base+0x1188>
   12a90:	mov	sl, r1
   12a94:	str	r0, [sp, #40]	; 0x28
   12a98:	mov	r8, r3
   12a9c:	ldr	r0, [pc, #3292]	; 13780 <close_stdout@@Base+0x118c>
   12aa0:	add	ip, pc, ip
   12aa4:	str	r2, [sp, #32]
   12aa8:	ldr	r1, [sp, #164]	; 0xa4
   12aac:	mov	r3, ip
   12ab0:	ldr	r0, [ip, r0]
   12ab4:	ldr	r2, [sp, #172]	; 0xac
   12ab8:	ubfx	r1, r1, #1, #1
   12abc:	str	r1, [sp, #36]	; 0x24
   12ac0:	str	r0, [sp, #56]	; 0x38
   12ac4:	ldr	r0, [sp, #168]	; 0xa8
   12ac8:	ldr	r1, [sp, #176]	; 0xb0
   12acc:	str	r2, [sp, #72]	; 0x48
   12ad0:	str	r0, [sp, #48]	; 0x30
   12ad4:	ldr	r0, [sp, #56]	; 0x38
   12ad8:	str	r1, [sp, #68]	; 0x44
   12adc:	ldr	r3, [r0]
   12ae0:	str	r3, [sp, #116]	; 0x74
   12ae4:	bl	111d8 <__ctype_get_mb_cur_max@plt>
   12ae8:	ldr	r2, [sp, #160]	; 0xa0
   12aec:	str	r0, [sp, #64]	; 0x40
   12af0:	cmp	r2, #8
   12af4:	addls	pc, pc, r2, lsl #2
   12af8:	b	13658 <close_stdout@@Base+0x1064>
   12afc:	b	12b20 <close_stdout@@Base+0x52c>
   12b00:	b	13370 <close_stdout@@Base+0xd7c>
   12b04:	b	133a0 <close_stdout@@Base+0xdac>
   12b08:	b	13250 <close_stdout@@Base+0xc5c>
   12b0c:	b	13290 <close_stdout@@Base+0xc9c>
   12b10:	b	132bc <close_stdout@@Base+0xcc8>
   12b14:	b	132dc <close_stdout@@Base+0xce8>
   12b18:	b	132dc <close_stdout@@Base+0xce8>
   12b1c:	b	132dc <close_stdout@@Base+0xce8>
   12b20:	mov	r2, #0
   12b24:	str	r2, [sp, #36]	; 0x24
   12b28:	mov	r9, r2
   12b2c:	str	r2, [sp, #24]
   12b30:	str	r2, [sp, #28]
   12b34:	str	r2, [sp, #52]	; 0x34
   12b38:	ldr	r0, [sp, #36]	; 0x24
   12b3c:	mov	fp, #0
   12b40:	ldr	r1, [sp, #24]
   12b44:	eor	r2, r0, #1
   12b48:	eor	r3, r1, #1
   12b4c:	and	r3, r2, r3
   12b50:	and	r2, r1, r0
   12b54:	str	r3, [sp, #44]	; 0x2c
   12b58:	str	r2, [sp, #76]	; 0x4c
   12b5c:	cmn	r8, #1
   12b60:	beq	12ee0 <close_stdout@@Base+0x8ec>
   12b64:	subs	r3, fp, r8
   12b68:	movne	r3, #1
   12b6c:	cmp	r3, #0
   12b70:	beq	12ef8 <close_stdout@@Base+0x904>
   12b74:	ldr	r3, [sp, #28]
   12b78:	ldr	r0, [sp, #24]
   12b7c:	adds	r7, r3, #0
   12b80:	movne	r7, #1
   12b84:	ands	r6, r7, r0
   12b88:	bne	133e4 <close_stdout@@Base+0xdf0>
   12b8c:	ldr	r1, [sp, #32]
   12b90:	add	r5, r1, fp
   12b94:	ldrb	r4, [r5]
   12b98:	cmp	r4, #126	; 0x7e
   12b9c:	addls	pc, pc, r4, lsl #2
   12ba0:	b	13164 <close_stdout@@Base+0xb70>
   12ba4:	b	13070 <close_stdout@@Base+0xa7c>
   12ba8:	b	13164 <close_stdout@@Base+0xb70>
   12bac:	b	13164 <close_stdout@@Base+0xb70>
   12bb0:	b	13164 <close_stdout@@Base+0xb70>
   12bb4:	b	13164 <close_stdout@@Base+0xb70>
   12bb8:	b	13164 <close_stdout@@Base+0xb70>
   12bbc:	b	13164 <close_stdout@@Base+0xb70>
   12bc0:	b	13058 <close_stdout@@Base+0xa64>
   12bc4:	b	13040 <close_stdout@@Base+0xa4c>
   12bc8:	b	13068 <close_stdout@@Base+0xa74>
   12bcc:	b	13060 <close_stdout@@Base+0xa6c>
   12bd0:	b	13050 <close_stdout@@Base+0xa5c>
   12bd4:	b	13048 <close_stdout@@Base+0xa54>
   12bd8:	b	1300c <close_stdout@@Base+0xa18>
   12bdc:	b	13164 <close_stdout@@Base+0xb70>
   12be0:	b	13164 <close_stdout@@Base+0xb70>
   12be4:	b	13164 <close_stdout@@Base+0xb70>
   12be8:	b	13164 <close_stdout@@Base+0xb70>
   12bec:	b	13164 <close_stdout@@Base+0xb70>
   12bf0:	b	13164 <close_stdout@@Base+0xb70>
   12bf4:	b	13164 <close_stdout@@Base+0xb70>
   12bf8:	b	13164 <close_stdout@@Base+0xb70>
   12bfc:	b	13164 <close_stdout@@Base+0xb70>
   12c00:	b	13164 <close_stdout@@Base+0xb70>
   12c04:	b	13164 <close_stdout@@Base+0xb70>
   12c08:	b	13164 <close_stdout@@Base+0xb70>
   12c0c:	b	13164 <close_stdout@@Base+0xb70>
   12c10:	b	13164 <close_stdout@@Base+0xb70>
   12c14:	b	13164 <close_stdout@@Base+0xb70>
   12c18:	b	13164 <close_stdout@@Base+0xb70>
   12c1c:	b	13164 <close_stdout@@Base+0xb70>
   12c20:	b	13164 <close_stdout@@Base+0xb70>
   12c24:	b	12f98 <close_stdout@@Base+0x9a4>
   12c28:	b	12f98 <close_stdout@@Base+0x9a4>
   12c2c:	b	12f98 <close_stdout@@Base+0x9a4>
   12c30:	b	12f90 <close_stdout@@Base+0x99c>
   12c34:	b	12f98 <close_stdout@@Base+0x9a4>
   12c38:	b	12e6c <close_stdout@@Base+0x878>
   12c3c:	b	12f98 <close_stdout@@Base+0x9a4>
   12c40:	b	1310c <close_stdout@@Base+0xb18>
   12c44:	b	12f98 <close_stdout@@Base+0x9a4>
   12c48:	b	12f98 <close_stdout@@Base+0x9a4>
   12c4c:	b	12f98 <close_stdout@@Base+0x9a4>
   12c50:	b	12e6c <close_stdout@@Base+0x878>
   12c54:	b	12e6c <close_stdout@@Base+0x878>
   12c58:	b	12e6c <close_stdout@@Base+0x878>
   12c5c:	b	12e6c <close_stdout@@Base+0x878>
   12c60:	b	12e6c <close_stdout@@Base+0x878>
   12c64:	b	12e6c <close_stdout@@Base+0x878>
   12c68:	b	12e6c <close_stdout@@Base+0x878>
   12c6c:	b	12e6c <close_stdout@@Base+0x878>
   12c70:	b	12e6c <close_stdout@@Base+0x878>
   12c74:	b	12e6c <close_stdout@@Base+0x878>
   12c78:	b	12e6c <close_stdout@@Base+0x878>
   12c7c:	b	12e6c <close_stdout@@Base+0x878>
   12c80:	b	12e6c <close_stdout@@Base+0x878>
   12c84:	b	12e6c <close_stdout@@Base+0x878>
   12c88:	b	12e6c <close_stdout@@Base+0x878>
   12c8c:	b	12e6c <close_stdout@@Base+0x878>
   12c90:	b	12f98 <close_stdout@@Base+0x9a4>
   12c94:	b	12f98 <close_stdout@@Base+0x9a4>
   12c98:	b	12f98 <close_stdout@@Base+0x9a4>
   12c9c:	b	12f98 <close_stdout@@Base+0x9a4>
   12ca0:	b	12da0 <close_stdout@@Base+0x7ac>
   12ca4:	b	13164 <close_stdout@@Base+0xb70>
   12ca8:	b	12e6c <close_stdout@@Base+0x878>
   12cac:	b	12e6c <close_stdout@@Base+0x878>
   12cb0:	b	12e6c <close_stdout@@Base+0x878>
   12cb4:	b	12e6c <close_stdout@@Base+0x878>
   12cb8:	b	12e6c <close_stdout@@Base+0x878>
   12cbc:	b	12e6c <close_stdout@@Base+0x878>
   12cc0:	b	12e6c <close_stdout@@Base+0x878>
   12cc4:	b	12e6c <close_stdout@@Base+0x878>
   12cc8:	b	12e6c <close_stdout@@Base+0x878>
   12ccc:	b	12e6c <close_stdout@@Base+0x878>
   12cd0:	b	12e6c <close_stdout@@Base+0x878>
   12cd4:	b	12e6c <close_stdout@@Base+0x878>
   12cd8:	b	12e6c <close_stdout@@Base+0x878>
   12cdc:	b	12e6c <close_stdout@@Base+0x878>
   12ce0:	b	12e6c <close_stdout@@Base+0x878>
   12ce4:	b	12e6c <close_stdout@@Base+0x878>
   12ce8:	b	12e6c <close_stdout@@Base+0x878>
   12cec:	b	12e6c <close_stdout@@Base+0x878>
   12cf0:	b	12e6c <close_stdout@@Base+0x878>
   12cf4:	b	12e6c <close_stdout@@Base+0x878>
   12cf8:	b	12e6c <close_stdout@@Base+0x878>
   12cfc:	b	12e6c <close_stdout@@Base+0x878>
   12d00:	b	12e6c <close_stdout@@Base+0x878>
   12d04:	b	12e6c <close_stdout@@Base+0x878>
   12d08:	b	12e6c <close_stdout@@Base+0x878>
   12d0c:	b	12e6c <close_stdout@@Base+0x878>
   12d10:	b	12f98 <close_stdout@@Base+0x9a4>
   12d14:	b	130f0 <close_stdout@@Base+0xafc>
   12d18:	b	12e6c <close_stdout@@Base+0x878>
   12d1c:	b	12f98 <close_stdout@@Base+0x9a4>
   12d20:	b	12e6c <close_stdout@@Base+0x878>
   12d24:	b	12f98 <close_stdout@@Base+0x9a4>
   12d28:	b	12e6c <close_stdout@@Base+0x878>
   12d2c:	b	12e6c <close_stdout@@Base+0x878>
   12d30:	b	12e6c <close_stdout@@Base+0x878>
   12d34:	b	12e6c <close_stdout@@Base+0x878>
   12d38:	b	12e6c <close_stdout@@Base+0x878>
   12d3c:	b	12e6c <close_stdout@@Base+0x878>
   12d40:	b	12e6c <close_stdout@@Base+0x878>
   12d44:	b	12e6c <close_stdout@@Base+0x878>
   12d48:	b	12e6c <close_stdout@@Base+0x878>
   12d4c:	b	12e6c <close_stdout@@Base+0x878>
   12d50:	b	12e6c <close_stdout@@Base+0x878>
   12d54:	b	12e6c <close_stdout@@Base+0x878>
   12d58:	b	12e6c <close_stdout@@Base+0x878>
   12d5c:	b	12e6c <close_stdout@@Base+0x878>
   12d60:	b	12e6c <close_stdout@@Base+0x878>
   12d64:	b	12e6c <close_stdout@@Base+0x878>
   12d68:	b	12e6c <close_stdout@@Base+0x878>
   12d6c:	b	12e6c <close_stdout@@Base+0x878>
   12d70:	b	12e6c <close_stdout@@Base+0x878>
   12d74:	b	12e6c <close_stdout@@Base+0x878>
   12d78:	b	12e6c <close_stdout@@Base+0x878>
   12d7c:	b	12e6c <close_stdout@@Base+0x878>
   12d80:	b	12e6c <close_stdout@@Base+0x878>
   12d84:	b	12e6c <close_stdout@@Base+0x878>
   12d88:	b	12e6c <close_stdout@@Base+0x878>
   12d8c:	b	12e6c <close_stdout@@Base+0x878>
   12d90:	b	12f78 <close_stdout@@Base+0x984>
   12d94:	b	12f98 <close_stdout@@Base+0x9a4>
   12d98:	b	12f78 <close_stdout@@Base+0x984>
   12d9c:	b	12f90 <close_stdout@@Base+0x99c>
   12da0:	ldr	r3, [sp, #160]	; 0xa0
   12da4:	cmp	r3, #2
   12da8:	beq	13634 <close_stdout@@Base+0x1040>
   12dac:	cmp	r3, #3
   12db0:	bne	12e6c <close_stdout@@Base+0x878>
   12db4:	ldr	r1, [sp, #164]	; 0xa4
   12db8:	tst	r1, #4
   12dbc:	beq	12e6c <close_stdout@@Base+0x878>
   12dc0:	add	r3, fp, #2
   12dc4:	cmp	r8, r3
   12dc8:	bls	12e6c <close_stdout@@Base+0x878>
   12dcc:	ldrb	r2, [r5, #1]
   12dd0:	mov	r1, #1
   12dd4:	cmp	r2, #63	; 0x3f
   12dd8:	bne	12e6c <close_stdout@@Base+0x878>
   12ddc:	ldr	r0, [sp, #32]
   12de0:	ldrb	ip, [r0, r3]
   12de4:	sub	r0, ip, #33	; 0x21
   12de8:	uxtb	r0, r0
   12dec:	cmp	r0, #29
   12df0:	bhi	12e6c <close_stdout@@Base+0x878>
   12df4:	lsl	r1, r1, r0
   12df8:	movw	r0, #20929	; 0x51c1
   12dfc:	movt	r0, #14336	; 0x3800
   12e00:	and	r0, r1, r0
   12e04:	cmp	r0, #0
   12e08:	beq	12e6c <close_stdout@@Base+0x878>
   12e0c:	ldr	r1, [sp, #36]	; 0x24
   12e10:	cmp	r1, #0
   12e14:	bne	12fb4 <close_stdout@@Base+0x9c0>
   12e18:	cmp	r9, sl
   12e1c:	mov	r4, ip
   12e20:	mov	fp, r3
   12e24:	ldrcc	r0, [sp, #40]	; 0x28
   12e28:	strbcc	r2, [r0, r9]
   12e2c:	add	r2, r9, #1
   12e30:	cmp	sl, r2
   12e34:	ldrhi	r0, [sp, #40]	; 0x28
   12e38:	movhi	r1, #34	; 0x22
   12e3c:	strbhi	r1, [r0, r2]
   12e40:	add	r2, r9, #2
   12e44:	cmp	sl, r2
   12e48:	ldrhi	r0, [sp, #40]	; 0x28
   12e4c:	movhi	r1, #34	; 0x22
   12e50:	strbhi	r1, [r0, r2]
   12e54:	add	r2, r9, #3
   12e58:	cmp	sl, r2
   12e5c:	add	r9, r9, #4
   12e60:	ldrhi	r0, [sp, #40]	; 0x28
   12e64:	movhi	r1, #63	; 0x3f
   12e68:	strbhi	r1, [r0, r2]
   12e6c:	ldr	r0, [sp, #44]	; 0x2c
   12e70:	cmp	r0, #0
   12e74:	bne	12e9c <close_stdout@@Base+0x8a8>
   12e78:	ldr	r1, [sp, #48]	; 0x30
   12e7c:	cmp	r1, #0
   12e80:	beq	12e9c <close_stdout@@Base+0x8a8>
   12e84:	ubfx	r2, r4, #5, #8
   12e88:	and	r3, r4, #31
   12e8c:	ldr	r2, [r1, r2, lsl #2]
   12e90:	lsr	r3, r2, r3
   12e94:	tst	r3, #1
   12e98:	bne	12ea4 <close_stdout@@Base+0x8b0>
   12e9c:	cmp	r6, #0
   12ea0:	beq	12ec4 <close_stdout@@Base+0x8d0>
   12ea4:	ldr	r2, [sp, #36]	; 0x24
   12ea8:	cmp	r2, #0
   12eac:	bne	12fb4 <close_stdout@@Base+0x9c0>
   12eb0:	cmp	r9, sl
   12eb4:	ldrcc	r0, [sp, #40]	; 0x28
   12eb8:	movcc	r3, #92	; 0x5c
   12ebc:	strbcc	r3, [r0, r9]
   12ec0:	add	r9, r9, #1
   12ec4:	add	fp, fp, #1
   12ec8:	cmp	r9, sl
   12ecc:	ldrcc	r1, [sp, #40]	; 0x28
   12ed0:	strbcc	r4, [r1, r9]
   12ed4:	cmn	r8, #1
   12ed8:	add	r9, r9, #1
   12edc:	bne	12b64 <close_stdout@@Base+0x570>
   12ee0:	ldr	r2, [sp, #32]
   12ee4:	ldrb	r3, [r2, fp]
   12ee8:	adds	r3, r3, #0
   12eec:	movne	r3, #1
   12ef0:	cmp	r3, #0
   12ef4:	bne	12b74 <close_stdout@@Base+0x580>
   12ef8:	ldr	r3, [sp, #160]	; 0xa0
   12efc:	cmp	r9, #0
   12f00:	cmpeq	r3, #2
   12f04:	bne	12f14 <close_stdout@@Base+0x920>
   12f08:	ldr	r0, [sp, #36]	; 0x24
   12f0c:	cmp	r0, #0
   12f10:	bne	12fb4 <close_stdout@@Base+0x9c0>
   12f14:	ldr	r1, [sp, #36]	; 0x24
   12f18:	ldr	r2, [sp, #52]	; 0x34
   12f1c:	eor	r3, r1, #1
   12f20:	cmp	r2, #0
   12f24:	moveq	r3, #0
   12f28:	andne	r3, r3, #1
   12f2c:	cmp	r3, #0
   12f30:	beq	12f5c <close_stdout@@Base+0x968>
   12f34:	ldrb	r3, [r2]
   12f38:	cmp	r3, #0
   12f3c:	beq	12f5c <close_stdout@@Base+0x968>
   12f40:	ldr	r1, [sp, #40]	; 0x28
   12f44:	cmp	sl, r9
   12f48:	strbhi	r3, [r1, r9]
   12f4c:	ldrb	r3, [r2, #1]!
   12f50:	add	r9, r9, #1
   12f54:	cmp	r3, #0
   12f58:	bne	12f44 <close_stdout@@Base+0x950>
   12f5c:	cmp	r9, sl
   12f60:	movcs	r0, r9
   12f64:	ldrcc	r1, [sp, #40]	; 0x28
   12f68:	movcc	r3, #0
   12f6c:	movcc	r0, r9
   12f70:	strbcc	r3, [r1, r9]
   12f74:	b	12ff0 <close_stdout@@Base+0x9fc>
   12f78:	cmn	r8, #1
   12f7c:	beq	13644 <close_stdout@@Base+0x1050>
   12f80:	subs	r3, r8, #1
   12f84:	movne	r3, #1
   12f88:	cmp	r3, #0
   12f8c:	bne	12e6c <close_stdout@@Base+0x878>
   12f90:	cmp	fp, #0
   12f94:	bne	12e6c <close_stdout@@Base+0x878>
   12f98:	ldr	r3, [sp, #36]	; 0x24
   12f9c:	ldr	r0, [sp, #160]	; 0xa0
   12fa0:	cmp	r0, #2
   12fa4:	movne	r3, #0
   12fa8:	andeq	r3, r3, #1
   12fac:	cmp	r3, #0
   12fb0:	beq	12e6c <close_stdout@@Base+0x878>
   12fb4:	ldr	r2, [sp, #164]	; 0xa4
   12fb8:	mov	ip, #0
   12fbc:	ldr	r0, [sp, #160]	; 0xa0
   12fc0:	bic	r3, r2, #2
   12fc4:	ldr	r1, [sp, #72]	; 0x48
   12fc8:	ldr	r2, [sp, #68]	; 0x44
   12fcc:	stm	sp, {r0, r3}
   12fd0:	mov	r3, r8
   12fd4:	str	r1, [sp, #12]
   12fd8:	mov	r1, sl
   12fdc:	str	r2, [sp, #16]
   12fe0:	ldr	r0, [sp, #40]	; 0x28
   12fe4:	ldr	r2, [sp, #32]
   12fe8:	str	ip, [sp, #8]
   12fec:	bl	12a84 <close_stdout@@Base+0x490>
   12ff0:	ldr	r1, [sp, #56]	; 0x38
   12ff4:	ldr	r2, [sp, #116]	; 0x74
   12ff8:	ldr	r3, [r1]
   12ffc:	cmp	r2, r3
   13000:	bne	13734 <close_stdout@@Base+0x1140>
   13004:	add	sp, sp, #124	; 0x7c
   13008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1300c:	mov	r3, #114	; 0x72
   13010:	ldr	r2, [sp, #36]	; 0x24
   13014:	ldr	r0, [sp, #160]	; 0xa0
   13018:	cmp	r0, #2
   1301c:	movne	r2, #0
   13020:	andeq	r2, r2, #1
   13024:	cmp	r2, #0
   13028:	bne	12fb4 <close_stdout@@Base+0x9c0>
   1302c:	ldr	r1, [sp, #24]
   13030:	cmp	r1, #0
   13034:	beq	12e6c <close_stdout@@Base+0x878>
   13038:	mov	r4, r3
   1303c:	b	12ea4 <close_stdout@@Base+0x8b0>
   13040:	mov	r3, #98	; 0x62
   13044:	b	1302c <close_stdout@@Base+0xa38>
   13048:	mov	r3, #102	; 0x66
   1304c:	b	1302c <close_stdout@@Base+0xa38>
   13050:	mov	r3, #118	; 0x76
   13054:	b	1302c <close_stdout@@Base+0xa38>
   13058:	mov	r3, #97	; 0x61
   1305c:	b	1302c <close_stdout@@Base+0xa38>
   13060:	mov	r3, #110	; 0x6e
   13064:	b	13010 <close_stdout@@Base+0xa1c>
   13068:	mov	r3, #116	; 0x74
   1306c:	b	13010 <close_stdout@@Base+0xa1c>
   13070:	ldr	r2, [sp, #24]
   13074:	cmp	r2, #0
   13078:	beq	13620 <close_stdout@@Base+0x102c>
   1307c:	ldr	r3, [sp, #36]	; 0x24
   13080:	cmp	r3, #0
   13084:	bne	12fb4 <close_stdout@@Base+0x9c0>
   13088:	cmp	r9, sl
   1308c:	add	r2, r9, #1
   13090:	ldrcc	r0, [sp, #40]	; 0x28
   13094:	movcc	r3, #92	; 0x5c
   13098:	strbcc	r3, [r0, r9]
   1309c:	add	r3, fp, #1
   130a0:	cmp	r8, r3
   130a4:	bls	130e4 <close_stdout@@Base+0xaf0>
   130a8:	ldr	r1, [sp, #32]
   130ac:	ldrb	r3, [r1, r3]
   130b0:	sub	r3, r3, #48	; 0x30
   130b4:	cmp	r3, #9
   130b8:	bhi	130e4 <close_stdout@@Base+0xaf0>
   130bc:	cmp	sl, r2
   130c0:	ldrhi	r0, [sp, #40]	; 0x28
   130c4:	movhi	r3, #48	; 0x30
   130c8:	strbhi	r3, [r0, r2]
   130cc:	add	r3, r9, #2
   130d0:	cmp	sl, r3
   130d4:	ldrhi	r1, [sp, #40]	; 0x28
   130d8:	movhi	r2, #48	; 0x30
   130dc:	strbhi	r2, [r1, r3]
   130e0:	add	r2, r9, #3
   130e4:	mov	r9, r2
   130e8:	mov	r4, #48	; 0x30
   130ec:	b	12e78 <close_stdout@@Base+0x884>
   130f0:	ldr	r1, [sp, #76]	; 0x4c
   130f4:	cmp	r1, #0
   130f8:	beq	13104 <close_stdout@@Base+0xb10>
   130fc:	cmp	r7, #0
   13100:	bne	12ec4 <close_stdout@@Base+0x8d0>
   13104:	mov	r3, r4
   13108:	b	13010 <close_stdout@@Base+0xa1c>
   1310c:	ldr	r1, [sp, #160]	; 0xa0
   13110:	cmp	r1, #2
   13114:	bne	12e6c <close_stdout@@Base+0x878>
   13118:	ldr	r2, [sp, #36]	; 0x24
   1311c:	cmp	r2, #0
   13120:	bne	12fb4 <close_stdout@@Base+0x9c0>
   13124:	cmp	r9, sl
   13128:	ldrcc	r0, [sp, #40]	; 0x28
   1312c:	movcc	r3, #39	; 0x27
   13130:	strbcc	r3, [r0, r9]
   13134:	add	r3, r9, #1
   13138:	cmp	sl, r3
   1313c:	ldrhi	r1, [sp, #40]	; 0x28
   13140:	movhi	r2, #92	; 0x5c
   13144:	strbhi	r2, [r1, r3]
   13148:	add	r3, r9, #2
   1314c:	cmp	sl, r3
   13150:	add	r9, r9, #3
   13154:	ldrhi	r0, [sp, #40]	; 0x28
   13158:	movhi	r2, #39	; 0x27
   1315c:	strbhi	r2, [r0, r3]
   13160:	b	12e6c <close_stdout@@Base+0x878>
   13164:	ldr	r1, [sp, #64]	; 0x40
   13168:	cmp	r1, #1
   1316c:	bne	13464 <close_stdout@@Base+0xe70>
   13170:	bl	11268 <__ctype_b_loc@plt>
   13174:	ldr	r2, [sp, #64]	; 0x40
   13178:	sxth	r3, r4
   1317c:	str	r2, [sp, #60]	; 0x3c
   13180:	lsl	r3, r3, #1
   13184:	ldr	r2, [r0]
   13188:	ldrh	r2, [r2, r3]
   1318c:	eor	r2, r2, #16384	; 0x4000
   13190:	ubfx	r2, r2, #14, #1
   13194:	ldr	r1, [sp, #24]
   13198:	ands	r2, r2, r1
   1319c:	beq	12e6c <close_stdout@@Base+0x878>
   131a0:	ldr	r3, [sp, #60]	; 0x3c
   131a4:	mov	r0, #92	; 0x5c
   131a8:	ldr	r7, [sp, #36]	; 0x24
   131ac:	add	r1, r3, fp
   131b0:	str	r8, [sp, #60]	; 0x3c
   131b4:	ldr	r3, [sp, #40]	; 0x28
   131b8:	b	1321c <close_stdout@@Base+0xc28>
   131bc:	cmp	r7, #0
   131c0:	bne	1365c <close_stdout@@Base+0x1068>
   131c4:	add	ip, r9, #1
   131c8:	cmp	r9, sl
   131cc:	strbcc	r0, [r3, r9]
   131d0:	cmp	sl, ip
   131d4:	lsrhi	r8, r4, #6
   131d8:	addhi	r8, r8, #48	; 0x30
   131dc:	strbhi	r8, [r3, ip]
   131e0:	add	ip, r9, #2
   131e4:	add	r9, r9, #3
   131e8:	cmp	sl, ip
   131ec:	ubfxhi	r8, r4, #3, #3
   131f0:	and	r4, r4, #7
   131f4:	add	r4, r4, #48	; 0x30
   131f8:	addhi	r8, r8, #48	; 0x30
   131fc:	strbhi	r8, [r3, ip]
   13200:	add	fp, fp, #1
   13204:	cmp	r1, fp
   13208:	bls	13248 <close_stdout@@Base+0xc54>
   1320c:	cmp	r9, sl
   13210:	strbcc	r4, [r3, r9]
   13214:	ldrb	r4, [r5, #1]!
   13218:	add	r9, r9, #1
   1321c:	cmp	r2, #0
   13220:	bne	131bc <close_stdout@@Base+0xbc8>
   13224:	cmp	r6, #0
   13228:	beq	13200 <close_stdout@@Base+0xc0c>
   1322c:	add	fp, fp, #1
   13230:	cmp	r9, sl
   13234:	strbcc	r0, [r3, r9]
   13238:	cmp	r1, fp
   1323c:	add	r9, r9, #1
   13240:	mov	r6, #0
   13244:	bhi	1320c <close_stdout@@Base+0xc18>
   13248:	ldr	r8, [sp, #60]	; 0x3c
   1324c:	b	12ec8 <close_stdout@@Base+0x8d4>
   13250:	ldr	r3, [sp, #36]	; 0x24
   13254:	cmp	r3, #0
   13258:	bne	1375c <close_stdout@@Base+0x1168>
   1325c:	cmp	sl, #0
   13260:	beq	13674 <close_stdout@@Base+0x1080>
   13264:	ldr	r1, [sp, #40]	; 0x28
   13268:	mov	r0, #1
   1326c:	ldr	r2, [pc, #1296]	; 13784 <close_stdout@@Base+0x1190>
   13270:	mov	r3, #34	; 0x22
   13274:	str	r0, [sp, #24]
   13278:	mov	r9, r0
   1327c:	add	r2, pc, r2
   13280:	str	r0, [sp, #28]
   13284:	strb	r3, [r1]
   13288:	str	r2, [sp, #52]	; 0x34
   1328c:	b	12b38 <close_stdout@@Base+0x544>
   13290:	ldr	r3, [pc, #1264]	; 13788 <close_stdout@@Base+0x1194>
   13294:	mov	r2, #1
   13298:	mov	r0, #3
   1329c:	str	r2, [sp, #36]	; 0x24
   132a0:	add	r3, pc, r3
   132a4:	str	r2, [sp, #24]
   132a8:	str	r3, [sp, #52]	; 0x34
   132ac:	mov	r9, #0
   132b0:	str	r2, [sp, #28]
   132b4:	str	r0, [sp, #160]	; 0xa0
   132b8:	b	12b38 <close_stdout@@Base+0x544>
   132bc:	mov	r0, #0
   132c0:	mov	r1, #1
   132c4:	str	r0, [sp, #36]	; 0x24
   132c8:	mov	r9, r0
   132cc:	str	r1, [sp, #24]
   132d0:	str	r0, [sp, #28]
   132d4:	str	r0, [sp, #52]	; 0x34
   132d8:	b	12b38 <close_stdout@@Base+0x544>
   132dc:	ldr	r3, [sp, #160]	; 0xa0
   132e0:	cmp	r3, #8
   132e4:	beq	13310 <close_stdout@@Base+0xd1c>
   132e8:	ldr	r0, [pc, #1180]	; 1378c <close_stdout@@Base+0x1198>
   132ec:	mov	r1, r3
   132f0:	add	r0, pc, r0
   132f4:	bl	12920 <close_stdout@@Base+0x32c>
   132f8:	ldr	r1, [sp, #160]	; 0xa0
   132fc:	str	r0, [sp, #72]	; 0x48
   13300:	ldr	r0, [pc, #1160]	; 13790 <close_stdout@@Base+0x119c>
   13304:	add	r0, pc, r0
   13308:	bl	12920 <close_stdout@@Base+0x32c>
   1330c:	str	r0, [sp, #68]	; 0x44
   13310:	ldr	r0, [sp, #36]	; 0x24
   13314:	cmp	r0, #0
   13318:	movne	r9, #0
   1331c:	bne	13354 <close_stdout@@Base+0xd60>
   13320:	ldr	r1, [sp, #72]	; 0x48
   13324:	ldrb	r3, [r1]
   13328:	cmp	r3, #0
   1332c:	beq	1372c <close_stdout@@Base+0x1138>
   13330:	mov	r2, r1
   13334:	ldr	r1, [sp, #40]	; 0x28
   13338:	mov	r9, r0
   1333c:	cmp	r9, sl
   13340:	strbcc	r3, [r1, r9]
   13344:	ldrb	r3, [r2, #1]!
   13348:	add	r9, r9, #1
   1334c:	cmp	r3, #0
   13350:	bne	1333c <close_stdout@@Base+0xd48>
   13354:	ldr	r0, [sp, #68]	; 0x44
   13358:	str	r0, [sp, #52]	; 0x34
   1335c:	bl	1128c <strlen@plt>
   13360:	mov	r2, #1
   13364:	str	r2, [sp, #24]
   13368:	str	r0, [sp, #28]
   1336c:	b	12b38 <close_stdout@@Base+0x544>
   13370:	ldr	r3, [pc, #1052]	; 13794 <close_stdout@@Base+0x11a0>
   13374:	mov	r2, #0
   13378:	mov	r1, #1
   1337c:	mov	r0, #2
   13380:	add	r3, pc, r3
   13384:	str	r1, [sp, #36]	; 0x24
   13388:	str	r2, [sp, #24]
   1338c:	mov	r9, r2
   13390:	str	r1, [sp, #28]
   13394:	str	r3, [sp, #52]	; 0x34
   13398:	str	r0, [sp, #160]	; 0xa0
   1339c:	b	12b38 <close_stdout@@Base+0x544>
   133a0:	ldr	r3, [sp, #36]	; 0x24
   133a4:	cmp	r3, #0
   133a8:	bne	13738 <close_stdout@@Base+0x1144>
   133ac:	cmp	sl, #0
   133b0:	beq	13694 <close_stdout@@Base+0x10a0>
   133b4:	ldr	r1, [sp, #40]	; 0x28
   133b8:	mov	r3, #39	; 0x27
   133bc:	ldr	r2, [sp, #36]	; 0x24
   133c0:	mov	r0, #1
   133c4:	mov	r9, r0
   133c8:	str	r0, [sp, #28]
   133cc:	strb	r3, [r1]
   133d0:	ldr	r3, [pc, #960]	; 13798 <close_stdout@@Base+0x11a4>
   133d4:	str	r2, [sp, #24]
   133d8:	add	r3, pc, r3
   133dc:	str	r3, [sp, #52]	; 0x34
   133e0:	b	12b38 <close_stdout@@Base+0x544>
   133e4:	ldr	r2, [sp, #28]
   133e8:	cmp	r2, #1
   133ec:	add	r4, fp, r2
   133f0:	movls	r3, #0
   133f4:	movhi	r3, #1
   133f8:	cmn	r8, #1
   133fc:	movne	r3, #0
   13400:	cmp	r3, #0
   13404:	beq	13414 <close_stdout@@Base+0xe20>
   13408:	ldr	r0, [sp, #32]
   1340c:	bl	1128c <strlen@plt>
   13410:	mov	r8, r0
   13414:	cmp	r8, r4
   13418:	ldrcc	r3, [sp, #32]
   1341c:	movcc	r6, #0
   13420:	addcc	r5, r3, fp
   13424:	bcc	12b94 <close_stdout@@Base+0x5a0>
   13428:	ldr	r0, [sp, #32]
   1342c:	ldr	r1, [sp, #52]	; 0x34
   13430:	add	r5, r0, fp
   13434:	ldr	r2, [sp, #28]
   13438:	mov	r0, r5
   1343c:	bl	11178 <memcmp@plt>
   13440:	cmp	r0, #0
   13444:	bne	1345c <close_stdout@@Base+0xe68>
   13448:	ldr	r1, [sp, #36]	; 0x24
   1344c:	cmp	r1, #0
   13450:	bne	12fb4 <close_stdout@@Base+0x9c0>
   13454:	mov	r6, #1
   13458:	b	12b94 <close_stdout@@Base+0x5a0>
   1345c:	mov	r6, #0
   13460:	b	12b94 <close_stdout@@Base+0x5a0>
   13464:	add	r7, sp, #108	; 0x6c
   13468:	cmn	r8, #1
   1346c:	mov	r3, #0
   13470:	str	r3, [sp, #108]	; 0x6c
   13474:	str	r3, [r7, #4]
   13478:	beq	13664 <close_stdout@@Base+0x1070>
   1347c:	mov	r1, #0
   13480:	ldr	r0, [sp, #32]
   13484:	mov	ip, #1
   13488:	str	r9, [sp, #88]	; 0x58
   1348c:	str	r6, [sp, #96]	; 0x60
   13490:	mov	r9, r1
   13494:	str	r5, [sp, #100]	; 0x64
   13498:	mov	r6, ip
   1349c:	mov	r5, r7
   134a0:	add	r3, sp, #104	; 0x68
   134a4:	sub	r0, r0, #1
   134a8:	str	r3, [sp, #80]	; 0x50
   134ac:	str	r0, [sp, #84]	; 0x54
   134b0:	str	r1, [sp, #60]	; 0x3c
   134b4:	str	r4, [sp, #92]	; 0x5c
   134b8:	ldr	r2, [sp, #32]
   134bc:	add	r7, r9, fp
   134c0:	add	r0, sp, #104	; 0x68
   134c4:	mov	r3, r5
   134c8:	add	r4, r2, r7
   134cc:	rsb	r2, r7, r8
   134d0:	mov	r1, r4
   134d4:	bl	111fc <mbrtowc@plt>
   134d8:	subs	r2, r0, #0
   134dc:	beq	135e8 <close_stdout@@Base+0xff4>
   134e0:	cmn	r2, #1
   134e4:	beq	13710 <close_stdout@@Base+0x111c>
   134e8:	cmn	r2, #2
   134ec:	beq	136b4 <close_stdout@@Base+0x10c0>
   134f0:	ldr	r3, [sp, #36]	; 0x24
   134f4:	ldr	r0, [sp, #160]	; 0xa0
   134f8:	cmp	r0, #2
   134fc:	movne	r3, #0
   13500:	andeq	r3, r3, #1
   13504:	cmp	r3, #0
   13508:	beq	135c4 <close_stdout@@Base+0xfd0>
   1350c:	cmp	r2, #1
   13510:	beq	135c4 <close_stdout@@Base+0xfd0>
   13514:	ldr	r1, [sp, #84]	; 0x54
   13518:	add	r3, r1, r2
   1351c:	add	r7, r3, r7
   13520:	ldrb	r3, [r4, #1]!
   13524:	sub	r3, r3, #91	; 0x5b
   13528:	cmp	r3, #33	; 0x21
   1352c:	addls	pc, pc, r3, lsl #2
   13530:	b	135bc <close_stdout@@Base+0xfc8>
   13534:	b	12fb4 <close_stdout@@Base+0x9c0>
   13538:	b	12fb4 <close_stdout@@Base+0x9c0>
   1353c:	b	135bc <close_stdout@@Base+0xfc8>
   13540:	b	12fb4 <close_stdout@@Base+0x9c0>
   13544:	b	135bc <close_stdout@@Base+0xfc8>
   13548:	b	12fb4 <close_stdout@@Base+0x9c0>
   1354c:	b	135bc <close_stdout@@Base+0xfc8>
   13550:	b	135bc <close_stdout@@Base+0xfc8>
   13554:	b	135bc <close_stdout@@Base+0xfc8>
   13558:	b	135bc <close_stdout@@Base+0xfc8>
   1355c:	b	135bc <close_stdout@@Base+0xfc8>
   13560:	b	135bc <close_stdout@@Base+0xfc8>
   13564:	b	135bc <close_stdout@@Base+0xfc8>
   13568:	b	135bc <close_stdout@@Base+0xfc8>
   1356c:	b	135bc <close_stdout@@Base+0xfc8>
   13570:	b	135bc <close_stdout@@Base+0xfc8>
   13574:	b	135bc <close_stdout@@Base+0xfc8>
   13578:	b	135bc <close_stdout@@Base+0xfc8>
   1357c:	b	135bc <close_stdout@@Base+0xfc8>
   13580:	b	135bc <close_stdout@@Base+0xfc8>
   13584:	b	135bc <close_stdout@@Base+0xfc8>
   13588:	b	135bc <close_stdout@@Base+0xfc8>
   1358c:	b	135bc <close_stdout@@Base+0xfc8>
   13590:	b	135bc <close_stdout@@Base+0xfc8>
   13594:	b	135bc <close_stdout@@Base+0xfc8>
   13598:	b	135bc <close_stdout@@Base+0xfc8>
   1359c:	b	135bc <close_stdout@@Base+0xfc8>
   135a0:	b	135bc <close_stdout@@Base+0xfc8>
   135a4:	b	135bc <close_stdout@@Base+0xfc8>
   135a8:	b	135bc <close_stdout@@Base+0xfc8>
   135ac:	b	135bc <close_stdout@@Base+0xfc8>
   135b0:	b	135bc <close_stdout@@Base+0xfc8>
   135b4:	b	135bc <close_stdout@@Base+0xfc8>
   135b8:	b	12fb4 <close_stdout@@Base+0x9c0>
   135bc:	cmp	r4, r7
   135c0:	bne	13520 <close_stdout@@Base+0xf2c>
   135c4:	ldr	r0, [sp, #104]	; 0x68
   135c8:	add	r9, r9, r2
   135cc:	bl	111b4 <iswprint@plt>
   135d0:	cmp	r0, #0
   135d4:	mov	r0, r5
   135d8:	moveq	r6, #0
   135dc:	bl	11160 <mbsinit@plt>
   135e0:	cmp	r0, #0
   135e4:	beq	134b8 <close_stdout@@Base+0xec4>
   135e8:	mov	ip, r6
   135ec:	eor	r2, ip, #1
   135f0:	str	r9, [sp, #60]	; 0x3c
   135f4:	ldr	r4, [sp, #92]	; 0x5c
   135f8:	uxtb	r2, r2
   135fc:	ldr	r9, [sp, #88]	; 0x58
   13600:	ldr	r6, [sp, #96]	; 0x60
   13604:	ldr	r5, [sp, #100]	; 0x64
   13608:	ldr	r3, [sp, #60]	; 0x3c
   1360c:	cmp	r3, #1
   13610:	bls	13194 <close_stdout@@Base+0xba0>
   13614:	ldr	r0, [sp, #24]
   13618:	and	r2, r2, r0
   1361c:	b	131a0 <close_stdout@@Base+0xbac>
   13620:	ldr	r2, [sp, #164]	; 0xa4
   13624:	tst	r2, #1
   13628:	addne	fp, fp, #1
   1362c:	bne	12b5c <close_stdout@@Base+0x568>
   13630:	b	12e6c <close_stdout@@Base+0x878>
   13634:	ldr	r0, [sp, #36]	; 0x24
   13638:	cmp	r0, #0
   1363c:	beq	12e6c <close_stdout@@Base+0x878>
   13640:	b	12fb4 <close_stdout@@Base+0x9c0>
   13644:	ldr	r2, [sp, #32]
   13648:	ldrb	r3, [r2, #1]
   1364c:	adds	r3, r3, #0
   13650:	movne	r3, #1
   13654:	b	12f88 <close_stdout@@Base+0x994>
   13658:	bl	11388 <abort@plt>
   1365c:	ldr	r8, [sp, #60]	; 0x3c
   13660:	b	12fb4 <close_stdout@@Base+0x9c0>
   13664:	ldr	r0, [sp, #32]
   13668:	bl	1128c <strlen@plt>
   1366c:	mov	r8, r0
   13670:	b	1347c <close_stdout@@Base+0xe88>
   13674:	ldr	r2, [pc, #288]	; 1379c <close_stdout@@Base+0x11a8>
   13678:	mov	r1, #1
   1367c:	mov	r9, r1
   13680:	str	r1, [sp, #24]
   13684:	add	r2, pc, r2
   13688:	str	r1, [sp, #28]
   1368c:	str	r2, [sp, #52]	; 0x34
   13690:	b	12b38 <close_stdout@@Base+0x544>
   13694:	ldr	r2, [pc, #260]	; 137a0 <close_stdout@@Base+0x11ac>
   13698:	mov	r3, #1
   1369c:	mov	r9, r3
   136a0:	str	r3, [sp, #28]
   136a4:	add	r2, pc, r2
   136a8:	str	sl, [sp, #24]
   136ac:	str	r2, [sp, #52]	; 0x34
   136b0:	b	12b38 <close_stdout@@Base+0x544>
   136b4:	cmp	r8, r7
   136b8:	str	r9, [sp, #60]	; 0x3c
   136bc:	mov	ip, r4
   136c0:	ldr	r6, [sp, #96]	; 0x60
   136c4:	ldr	r9, [sp, #88]	; 0x58
   136c8:	ldr	r4, [sp, #92]	; 0x5c
   136cc:	ldr	r5, [sp, #100]	; 0x64
   136d0:	bls	13708 <close_stdout@@Base+0x1114>
   136d4:	ldrb	r3, [ip]
   136d8:	cmp	r3, #0
   136dc:	beq	13708 <close_stdout@@Base+0x1114>
   136e0:	ldr	r3, [sp, #60]	; 0x3c
   136e4:	b	136f4 <close_stdout@@Base+0x1100>
   136e8:	ldrb	r2, [r5, r3]
   136ec:	cmp	r2, #0
   136f0:	beq	13704 <close_stdout@@Base+0x1110>
   136f4:	add	r3, r3, #1
   136f8:	add	r2, fp, r3
   136fc:	cmp	r8, r2
   13700:	bhi	136e8 <close_stdout@@Base+0x10f4>
   13704:	str	r3, [sp, #60]	; 0x3c
   13708:	mov	r2, #1
   1370c:	b	13608 <close_stdout@@Base+0x1014>
   13710:	str	r9, [sp, #60]	; 0x3c
   13714:	mov	r2, #1
   13718:	ldr	r4, [sp, #92]	; 0x5c
   1371c:	ldr	r6, [sp, #96]	; 0x60
   13720:	ldr	r9, [sp, #88]	; 0x58
   13724:	ldr	r5, [sp, #100]	; 0x64
   13728:	b	13608 <close_stdout@@Base+0x1014>
   1372c:	ldr	r9, [sp, #36]	; 0x24
   13730:	b	13354 <close_stdout@@Base+0xd60>
   13734:	bl	11190 <__stack_chk_fail@plt>
   13738:	ldr	r1, [pc, #100]	; 137a4 <close_stdout@@Base+0x11b0>
   1373c:	mov	r3, #0
   13740:	mov	r0, #1
   13744:	str	r3, [sp, #24]
   13748:	add	r1, pc, r1
   1374c:	str	r0, [sp, #28]
   13750:	mov	r9, r3
   13754:	str	r1, [sp, #52]	; 0x34
   13758:	b	12b38 <close_stdout@@Base+0x544>
   1375c:	ldr	r0, [pc, #68]	; 137a8 <close_stdout@@Base+0x11b4>
   13760:	mov	r3, #1
   13764:	mov	r9, #0
   13768:	str	r3, [sp, #24]
   1376c:	add	r0, pc, r0
   13770:	str	r3, [sp, #28]
   13774:	str	r0, [sp, #52]	; 0x34
   13778:	b	12b38 <close_stdout@@Base+0x544>
   1377c:	andeq	r4, r1, r8, asr r5
   13780:	andeq	r0, r0, ip, lsl #2
   13784:	andeq	r2, r0, r0, lsl #17
   13788:	andeq	r2, r0, ip, asr r8
   1378c:	andeq	r2, r0, r8, lsl r8
   13790:	strdeq	r2, [r0], -r4
   13794:	andeq	r2, r0, r8, ror r7
   13798:	andeq	r2, r0, r0, lsr #14
   1379c:	andeq	r2, r0, r8, ror r4
   137a0:	andeq	r2, r0, r4, asr r4
   137a4:			; <UNDEFINED> instruction: 0x000023b0
   137a8:	muleq	r0, r0, r3
   137ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137b0:	sub	sp, sp, #44	; 0x2c
   137b4:	mov	r6, r0
   137b8:	mov	r9, r1
   137bc:	mov	sl, r2
   137c0:	mov	r4, r3
   137c4:	bl	112b0 <__errno_location@plt>
   137c8:	ldr	fp, [pc, #412]	; 1396c <close_stdout@@Base+0x1378>
   137cc:	cmp	r6, #0
   137d0:	add	fp, pc, fp
   137d4:	ldr	r5, [fp]
   137d8:	ldr	r1, [r0]
   137dc:	mov	r8, r0
   137e0:	str	r1, [sp, #36]	; 0x24
   137e4:	blt	13964 <close_stdout@@Base+0x1370>
   137e8:	ldr	r3, [pc, #384]	; 13970 <close_stdout@@Base+0x137c>
   137ec:	add	r3, pc, r3
   137f0:	ldr	r3, [r3]
   137f4:	cmp	r6, r3
   137f8:	bcc	1384c <close_stdout@@Base+0x1258>
   137fc:	add	r7, r6, #1
   13800:	cmn	r7, #-536870911	; 0xe0000001
   13804:	bhi	13968 <close_stdout@@Base+0x1374>
   13808:	add	r3, fp, #4
   1380c:	cmp	r5, r3
   13810:	beq	1393c <close_stdout@@Base+0x1348>
   13814:	mov	r0, r5
   13818:	lsl	r1, r7, #3
   1381c:	bl	14644 <close_stdout@@Base+0x2050>
   13820:	mov	r5, r0
   13824:	str	r0, [fp]
   13828:	ldr	fp, [pc, #324]	; 13974 <close_stdout@@Base+0x1380>
   1382c:	mov	r1, #0
   13830:	add	fp, pc, fp
   13834:	ldr	r0, [fp]
   13838:	rsb	r2, r0, r7
   1383c:	add	r0, r5, r0, lsl #3
   13840:	lsl	r2, r2, #3
   13844:	bl	112c8 <memset@plt>
   13848:	str	r7, [fp]
   1384c:	add	r2, r4, #8
   13850:	str	r2, [sp, #32]
   13854:	ldr	r1, [r4]
   13858:	add	fp, r5, r6, lsl #3
   1385c:	ldr	lr, [sp, #32]
   13860:	mov	r2, r9
   13864:	ldr	r3, [r4, #4]
   13868:	ldr	ip, [r5, r6, lsl #3]
   1386c:	ldr	r7, [fp, #4]
   13870:	orr	r3, r3, #1
   13874:	str	r1, [sp]
   13878:	str	r3, [sp, #4]
   1387c:	mov	r1, ip
   13880:	str	lr, [sp, #8]
   13884:	mov	r0, r7
   13888:	ldr	lr, [r4, #40]	; 0x28
   1388c:	str	r3, [sp, #28]
   13890:	mov	r3, sl
   13894:	str	lr, [sp, #12]
   13898:	ldr	lr, [r4, #44]	; 0x2c
   1389c:	str	ip, [sp, #24]
   138a0:	str	lr, [sp, #16]
   138a4:	bl	12a84 <close_stdout@@Base+0x490>
   138a8:	ldr	ip, [sp, #24]
   138ac:	cmp	ip, r0
   138b0:	bhi	13928 <close_stdout@@Base+0x1334>
   138b4:	ldr	r3, [pc, #188]	; 13978 <close_stdout@@Base+0x1384>
   138b8:	add	r1, r0, #1
   138bc:	str	r1, [r5, r6, lsl #3]
   138c0:	add	r3, pc, r3
   138c4:	cmp	r7, r3
   138c8:	beq	138dc <close_stdout@@Base+0x12e8>
   138cc:	mov	r0, r7
   138d0:	str	r1, [sp, #24]
   138d4:	bl	11130 <free@plt>
   138d8:	ldr	r1, [sp, #24]
   138dc:	mov	r0, r1
   138e0:	str	r1, [sp, #24]
   138e4:	bl	145ec <close_stdout@@Base+0x1ff8>
   138e8:	ldr	r3, [sp, #28]
   138ec:	ldr	lr, [sp, #32]
   138f0:	mov	r2, r9
   138f4:	str	r0, [fp, #4]
   138f8:	mov	r7, r0
   138fc:	ldr	ip, [r4]
   13900:	str	r3, [sp, #4]
   13904:	mov	r3, sl
   13908:	str	lr, [sp, #8]
   1390c:	str	ip, [sp]
   13910:	ldr	ip, [r4, #40]	; 0x28
   13914:	ldr	r1, [sp, #24]
   13918:	str	ip, [sp, #12]
   1391c:	ldr	ip, [r4, #44]	; 0x2c
   13920:	str	ip, [sp, #16]
   13924:	bl	12a84 <close_stdout@@Base+0x490>
   13928:	ldr	r1, [sp, #36]	; 0x24
   1392c:	mov	r0, r7
   13930:	str	r1, [r8]
   13934:	add	sp, sp, #44	; 0x2c
   13938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1393c:	lsl	r1, r7, #3
   13940:	mov	r0, #0
   13944:	str	r3, [sp, #24]
   13948:	bl	14644 <close_stdout@@Base+0x2050>
   1394c:	ldr	r3, [sp, #24]
   13950:	mov	r5, r0
   13954:	ldm	r3, {r0, r1}
   13958:	str	r5, [fp]
   1395c:	stm	r5, {r0, r1}
   13960:	b	13828 <close_stdout@@Base+0x1234>
   13964:	bl	11388 <abort@plt>
   13968:	bl	14800 <close_stdout@@Base+0x220c>
   1396c:			; <UNDEFINED> instruction: 0x000139b0
   13970:	andeq	r3, r1, r0, ror #18
   13974:	andeq	r3, r1, ip, lsl r9
   13978:	strdeq	r3, [r1], -r8
   1397c:	push	{r4, r5, r6, lr}
   13980:	mov	r5, r0
   13984:	bl	112b0 <__errno_location@plt>
   13988:	cmp	r5, #0
   1398c:	mov	r1, #48	; 0x30
   13990:	mov	r4, r0
   13994:	ldr	r0, [pc, #24]	; 139b4 <close_stdout@@Base+0x13c0>
   13998:	ldr	r6, [r4]
   1399c:	add	r0, pc, r0
   139a0:	add	r0, r0, #256	; 0x100
   139a4:	movne	r0, r5
   139a8:	bl	147c0 <close_stdout@@Base+0x21cc>
   139ac:	str	r6, [r4]
   139b0:	pop	{r4, r5, r6, pc}
   139b4:	andeq	r3, r1, ip, lsl r8
   139b8:	cmp	r0, #0
   139bc:	beq	139c8 <close_stdout@@Base+0x13d4>
   139c0:	ldr	r0, [r0]
   139c4:	bx	lr
   139c8:	ldr	r0, [pc, #12]	; 139dc <close_stdout@@Base+0x13e8>
   139cc:	add	r0, pc, r0
   139d0:	add	r0, r0, #256	; 0x100
   139d4:	ldr	r0, [r0]
   139d8:	bx	lr
   139dc:	andeq	r3, r1, ip, ror #15
   139e0:	cmp	r0, #0
   139e4:	beq	139f0 <close_stdout@@Base+0x13fc>
   139e8:	str	r1, [r0]
   139ec:	bx	lr
   139f0:	ldr	r0, [pc, #12]	; 13a04 <close_stdout@@Base+0x1410>
   139f4:	add	r0, pc, r0
   139f8:	add	r0, r0, #256	; 0x100
   139fc:	str	r1, [r0]
   13a00:	bx	lr
   13a04:	andeq	r3, r1, r4, asr #15
   13a08:	cmp	r0, #0
   13a0c:	movne	r3, r0
   13a10:	beq	13a40 <close_stdout@@Base+0x144c>
   13a14:	lsr	ip, r1, #5
   13a18:	and	r1, r1, #31
   13a1c:	add	r3, r3, ip, lsl #2
   13a20:	ldr	ip, [r3, #8]
   13a24:	lsr	r0, ip, r1
   13a28:	eor	r2, r0, r2
   13a2c:	and	r0, r0, #1
   13a30:	and	r2, r2, #1
   13a34:	eor	ip, ip, r2, lsl r1
   13a38:	str	ip, [r3, #8]
   13a3c:	bx	lr
   13a40:	ldr	r3, [pc, #8]	; 13a50 <close_stdout@@Base+0x145c>
   13a44:	add	r3, pc, r3
   13a48:	add	r3, r3, #256	; 0x100
   13a4c:	b	13a14 <close_stdout@@Base+0x1420>
   13a50:	andeq	r3, r1, r4, ror r7
   13a54:	subs	r3, r0, #0
   13a58:	beq	13a68 <close_stdout@@Base+0x1474>
   13a5c:	ldr	r0, [r3, #4]
   13a60:	str	r1, [r3, #4]
   13a64:	bx	lr
   13a68:	ldr	r3, [pc, #8]	; 13a78 <close_stdout@@Base+0x1484>
   13a6c:	add	r3, pc, r3
   13a70:	add	r3, r3, #256	; 0x100
   13a74:	b	13a5c <close_stdout@@Base+0x1468>
   13a78:	andeq	r3, r1, ip, asr #14
   13a7c:	cmp	r0, #0
   13a80:	push	{r3, lr}
   13a84:	beq	13aa8 <close_stdout@@Base+0x14b4>
   13a88:	cmp	r2, #0
   13a8c:	cmpne	r1, #0
   13a90:	mov	r3, #8
   13a94:	strne	r1, [r0, #40]	; 0x28
   13a98:	str	r3, [r0]
   13a9c:	strne	r2, [r0, #44]	; 0x2c
   13aa0:	popne	{r3, pc}
   13aa4:	bl	11388 <abort@plt>
   13aa8:	ldr	r0, [pc, #8]	; 13ab8 <close_stdout@@Base+0x14c4>
   13aac:	add	r0, pc, r0
   13ab0:	add	r0, r0, #256	; 0x100
   13ab4:	b	13a88 <close_stdout@@Base+0x1494>
   13ab8:	andeq	r3, r1, ip, lsl #14
   13abc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ac0:	sub	sp, sp, #24
   13ac4:	mov	r7, r0
   13ac8:	mov	sl, r1
   13acc:	ldr	r4, [sp, #56]	; 0x38
   13ad0:	mov	r9, r2
   13ad4:	mov	r8, r3
   13ad8:	cmp	r4, #0
   13adc:	beq	13b30 <close_stdout@@Base+0x153c>
   13ae0:	bl	112b0 <__errno_location@plt>
   13ae4:	ldr	r3, [r4]
   13ae8:	add	lr, r4, #8
   13aec:	mov	r1, sl
   13af0:	mov	r2, r9
   13af4:	ldr	r6, [r0]
   13af8:	mov	r5, r0
   13afc:	str	r3, [sp]
   13b00:	mov	r0, r7
   13b04:	ldr	ip, [r4, #4]
   13b08:	mov	r3, r8
   13b0c:	stmib	sp, {ip, lr}
   13b10:	ldr	ip, [r4, #40]	; 0x28
   13b14:	str	ip, [sp, #12]
   13b18:	ldr	ip, [r4, #44]	; 0x2c
   13b1c:	str	ip, [sp, #16]
   13b20:	bl	12a84 <close_stdout@@Base+0x490>
   13b24:	str	r6, [r5]
   13b28:	add	sp, sp, #24
   13b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b30:	ldr	r4, [pc, #8]	; 13b40 <close_stdout@@Base+0x154c>
   13b34:	add	r4, pc, r4
   13b38:	add	r4, r4, #256	; 0x100
   13b3c:	b	13ae0 <close_stdout@@Base+0x14ec>
   13b40:	andeq	r3, r1, r4, lsl #13
   13b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b48:	subs	r4, r3, #0
   13b4c:	sub	sp, sp, #36	; 0x24
   13b50:	mov	r7, r0
   13b54:	mov	r6, r1
   13b58:	mov	r5, r2
   13b5c:	beq	13c18 <close_stdout@@Base+0x1624>
   13b60:	bl	112b0 <__errno_location@plt>
   13b64:	ldr	r3, [r4]
   13b68:	ldr	sl, [r4, #4]
   13b6c:	add	r9, r4, #8
   13b70:	mov	r8, r0
   13b74:	mov	r0, #0
   13b78:	ldr	r2, [r8]
   13b7c:	cmp	r5, r0
   13b80:	orreq	sl, sl, #1
   13b84:	str	r9, [sp, #8]
   13b88:	mov	r1, r0
   13b8c:	stm	sp, {r3, sl}
   13b90:	mov	r3, r6
   13b94:	ldr	ip, [r4, #40]	; 0x28
   13b98:	str	r2, [sp, #28]
   13b9c:	mov	r2, r7
   13ba0:	str	ip, [sp, #12]
   13ba4:	ldr	ip, [r4, #44]	; 0x2c
   13ba8:	str	ip, [sp, #16]
   13bac:	bl	12a84 <close_stdout@@Base+0x490>
   13bb0:	add	r1, r0, #1
   13bb4:	mov	fp, r0
   13bb8:	str	r1, [sp, #24]
   13bbc:	mov	r0, r1
   13bc0:	bl	145ec <close_stdout@@Base+0x1ff8>
   13bc4:	ldr	lr, [r4]
   13bc8:	str	sl, [sp, #4]
   13bcc:	mov	r3, r6
   13bd0:	str	r9, [sp, #8]
   13bd4:	mov	r2, r7
   13bd8:	str	lr, [sp]
   13bdc:	ldr	lr, [r4, #40]	; 0x28
   13be0:	ldr	r1, [sp, #24]
   13be4:	str	lr, [sp, #12]
   13be8:	ldr	lr, [r4, #44]	; 0x2c
   13bec:	str	lr, [sp, #16]
   13bf0:	str	r0, [sp, #24]
   13bf4:	bl	12a84 <close_stdout@@Base+0x490>
   13bf8:	ldr	r3, [sp, #28]
   13bfc:	cmp	r5, #0
   13c00:	str	r3, [r8]
   13c04:	ldr	ip, [sp, #24]
   13c08:	strne	fp, [r5]
   13c0c:	mov	r0, ip
   13c10:	add	sp, sp, #36	; 0x24
   13c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c18:	ldr	r4, [pc, #8]	; 13c28 <close_stdout@@Base+0x1634>
   13c1c:	add	r4, pc, r4
   13c20:	add	r4, r4, #256	; 0x100
   13c24:	b	13b60 <close_stdout@@Base+0x156c>
   13c28:	muleq	r1, ip, r5
   13c2c:	mov	r3, r2
   13c30:	mov	r2, #0
   13c34:	b	13b44 <close_stdout@@Base+0x1550>
   13c38:	ldr	r2, [pc, #152]	; 13cd8 <close_stdout@@Base+0x16e4>
   13c3c:	push	{r3, r4, r5, r6, r7, lr}
   13c40:	add	r2, pc, r2
   13c44:	ldr	r3, [pc, #144]	; 13cdc <close_stdout@@Base+0x16e8>
   13c48:	ldr	r6, [r2]
   13c4c:	add	r3, pc, r3
   13c50:	cmp	r6, #1
   13c54:	ldr	r7, [r3]
   13c58:	movhi	r4, #1
   13c5c:	movhi	r5, r7
   13c60:	bls	13c7c <close_stdout@@Base+0x1688>
   13c64:	ldr	r0, [r5, #12]
   13c68:	add	r4, r4, #1
   13c6c:	bl	11130 <free@plt>
   13c70:	cmp	r4, r6
   13c74:	add	r5, r5, #8
   13c78:	bne	13c64 <close_stdout@@Base+0x1670>
   13c7c:	ldr	r4, [pc, #92]	; 13ce0 <close_stdout@@Base+0x16ec>
   13c80:	ldr	r0, [r7, #4]
   13c84:	add	r4, pc, r4
   13c88:	cmp	r0, r4
   13c8c:	beq	13ca4 <close_stdout@@Base+0x16b0>
   13c90:	bl	11130 <free@plt>
   13c94:	ldr	r3, [pc, #72]	; 13ce4 <close_stdout@@Base+0x16f0>
   13c98:	mov	r2, #256	; 0x100
   13c9c:	add	r3, pc, r3
   13ca0:	stmib	r3, {r2, r4}
   13ca4:	ldr	r4, [pc, #60]	; 13ce8 <close_stdout@@Base+0x16f4>
   13ca8:	add	r4, pc, r4
   13cac:	add	r5, r4, #4
   13cb0:	cmp	r7, r5
   13cb4:	beq	13cc4 <close_stdout@@Base+0x16d0>
   13cb8:	mov	r0, r7
   13cbc:	bl	11130 <free@plt>
   13cc0:	str	r5, [r4]
   13cc4:	ldr	r3, [pc, #32]	; 13cec <close_stdout@@Base+0x16f8>
   13cc8:	mov	r2, #1
   13ccc:	add	r3, pc, r3
   13cd0:	str	r2, [r3]
   13cd4:	pop	{r3, r4, r5, r6, r7, pc}
   13cd8:	andeq	r3, r1, ip, lsl #10
   13cdc:	andeq	r3, r1, r4, lsr r5
   13ce0:	andeq	r3, r1, r4, lsr r5
   13ce4:	andeq	r3, r1, r4, ror #9
   13ce8:	ldrdeq	r3, [r1], -r8
   13cec:	andeq	r3, r1, r0, lsl #9
   13cf0:	ldr	r3, [pc, #12]	; 13d04 <close_stdout@@Base+0x1710>
   13cf4:	mvn	r2, #0
   13cf8:	add	r3, pc, r3
   13cfc:	add	r3, r3, #256	; 0x100
   13d00:	b	137ac <close_stdout@@Base+0x11b8>
   13d04:	andeq	r3, r1, r0, asr #9
   13d08:	ldr	r3, [pc, #8]	; 13d18 <close_stdout@@Base+0x1724>
   13d0c:	add	r3, pc, r3
   13d10:	add	r3, r3, #256	; 0x100
   13d14:	b	137ac <close_stdout@@Base+0x11b8>
   13d18:	andeq	r3, r1, ip, lsr #9
   13d1c:	mov	r1, r0
   13d20:	mov	r0, #0
   13d24:	b	13cf0 <close_stdout@@Base+0x16fc>
   13d28:	mov	r2, r1
   13d2c:	mov	r1, r0
   13d30:	mov	r0, #0
   13d34:	b	13d08 <close_stdout@@Base+0x1714>
   13d38:	ldr	r3, [pc, #92]	; 13d9c <close_stdout@@Base+0x17a8>
   13d3c:	ldr	ip, [pc, #92]	; 13da0 <close_stdout@@Base+0x17ac>
   13d40:	add	r3, pc, r3
   13d44:	push	{r4, r5, r6, r7, lr}
   13d48:	sub	sp, sp, #60	; 0x3c
   13d4c:	ldr	r4, [r3, ip]
   13d50:	add	r5, sp, #4
   13d54:	mov	r7, r2
   13d58:	mov	r6, r0
   13d5c:	mov	r0, r5
   13d60:	ldr	r3, [r4]
   13d64:	str	r3, [sp, #52]	; 0x34
   13d68:	bl	128cc <close_stdout@@Base+0x2d8>
   13d6c:	mov	r3, r5
   13d70:	mvn	r2, #0
   13d74:	mov	r0, r6
   13d78:	mov	r1, r7
   13d7c:	bl	137ac <close_stdout@@Base+0x11b8>
   13d80:	ldr	r2, [sp, #52]	; 0x34
   13d84:	ldr	r3, [r4]
   13d88:	cmp	r2, r3
   13d8c:	bne	13d98 <close_stdout@@Base+0x17a4>
   13d90:	add	sp, sp, #60	; 0x3c
   13d94:	pop	{r4, r5, r6, r7, pc}
   13d98:	bl	11190 <__stack_chk_fail@plt>
   13d9c:			; <UNDEFINED> instruction: 0x000132b8
   13da0:	andeq	r0, r0, ip, lsl #2
   13da4:	ldr	ip, [pc, #96]	; 13e0c <close_stdout@@Base+0x1818>
   13da8:	push	{r4, r5, r6, r7, r8, lr}
   13dac:	add	ip, pc, ip
   13db0:	ldr	lr, [pc, #88]	; 13e10 <close_stdout@@Base+0x181c>
   13db4:	sub	sp, sp, #56	; 0x38
   13db8:	mov	r8, r3
   13dbc:	add	r5, sp, #4
   13dc0:	mov	r7, r2
   13dc4:	mov	r6, r0
   13dc8:	ldr	r4, [ip, lr]
   13dcc:	mov	r0, r5
   13dd0:	ldr	r3, [r4]
   13dd4:	str	r3, [sp, #52]	; 0x34
   13dd8:	bl	128cc <close_stdout@@Base+0x2d8>
   13ddc:	mov	r2, r8
   13de0:	mov	r3, r5
   13de4:	mov	r0, r6
   13de8:	mov	r1, r7
   13dec:	bl	137ac <close_stdout@@Base+0x11b8>
   13df0:	ldr	r2, [sp, #52]	; 0x34
   13df4:	ldr	r3, [r4]
   13df8:	cmp	r2, r3
   13dfc:	bne	13e08 <close_stdout@@Base+0x1814>
   13e00:	add	sp, sp, #56	; 0x38
   13e04:	pop	{r4, r5, r6, r7, r8, pc}
   13e08:	bl	11190 <__stack_chk_fail@plt>
   13e0c:	andeq	r3, r1, ip, asr #4
   13e10:	andeq	r0, r0, ip, lsl #2
   13e14:	mov	r2, r1
   13e18:	mov	r1, r0
   13e1c:	mov	r0, #0
   13e20:	b	13d38 <close_stdout@@Base+0x1744>
   13e24:	mov	ip, r1
   13e28:	mov	r3, r2
   13e2c:	mov	r1, r0
   13e30:	mov	r2, ip
   13e34:	mov	r0, #0
   13e38:	b	13da4 <close_stdout@@Base+0x17b0>
   13e3c:	push	{r4, r5, r6, r7, r8, lr}
   13e40:	mov	r5, r2
   13e44:	ldr	lr, [pc, #136]	; 13ed4 <close_stdout@@Base+0x18e0>
   13e48:	mov	r7, r0
   13e4c:	mov	r6, r1
   13e50:	ldr	r4, [pc, #128]	; 13ed8 <close_stdout@@Base+0x18e4>
   13e54:	add	lr, pc, lr
   13e58:	sub	sp, sp, #56	; 0x38
   13e5c:	add	lr, lr, #256	; 0x100
   13e60:	ldr	r8, [pc, #116]	; 13edc <close_stdout@@Base+0x18e8>
   13e64:	add	r4, pc, r4
   13e68:	add	ip, sp, #4
   13e6c:	ldm	lr!, {r0, r1, r2, r3}
   13e70:	ldr	r4, [r4, r8]
   13e74:	stmia	ip!, {r0, r1, r2, r3}
   13e78:	ldm	lr!, {r0, r1, r2, r3}
   13e7c:	ldr	r8, [r4]
   13e80:	stmia	ip!, {r0, r1, r2, r3}
   13e84:	ldm	lr, {r0, r1, r2, r3}
   13e88:	str	r8, [sp, #52]	; 0x34
   13e8c:	stm	ip, {r0, r1, r2, r3}
   13e90:	mov	r1, r5
   13e94:	add	r5, sp, #4
   13e98:	mov	r2, #1
   13e9c:	mov	r0, r5
   13ea0:	bl	13a08 <close_stdout@@Base+0x1414>
   13ea4:	mov	r2, r6
   13ea8:	mov	r3, r5
   13eac:	mov	r1, r7
   13eb0:	mov	r0, #0
   13eb4:	bl	137ac <close_stdout@@Base+0x11b8>
   13eb8:	ldr	r2, [sp, #52]	; 0x34
   13ebc:	ldr	r3, [r4]
   13ec0:	cmp	r2, r3
   13ec4:	bne	13ed0 <close_stdout@@Base+0x18dc>
   13ec8:	add	sp, sp, #56	; 0x38
   13ecc:	pop	{r4, r5, r6, r7, r8, pc}
   13ed0:	bl	11190 <__stack_chk_fail@plt>
   13ed4:	andeq	r3, r1, r4, ror #6
   13ed8:	muleq	r1, r4, r1
   13edc:	andeq	r0, r0, ip, lsl #2
   13ee0:	mov	r2, r1
   13ee4:	mvn	r1, #0
   13ee8:	b	13e3c <close_stdout@@Base+0x1848>
   13eec:	mov	r1, #58	; 0x3a
   13ef0:	b	13ee0 <close_stdout@@Base+0x18ec>
   13ef4:	mov	r2, #58	; 0x3a
   13ef8:	b	13e3c <close_stdout@@Base+0x1848>
   13efc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f00:	mov	r5, r2
   13f04:	ldr	lr, [pc, #144]	; 13f9c <close_stdout@@Base+0x19a8>
   13f08:	mov	r8, r0
   13f0c:	mov	r9, r1
   13f10:	mov	r7, r3
   13f14:	add	lr, pc, lr
   13f18:	ldr	r4, [pc, #128]	; 13fa0 <close_stdout@@Base+0x19ac>
   13f1c:	add	lr, lr, #256	; 0x100
   13f20:	sub	sp, sp, #56	; 0x38
   13f24:	ldr	sl, [pc, #120]	; 13fa4 <close_stdout@@Base+0x19b0>
   13f28:	add	r4, pc, r4
   13f2c:	ldm	lr!, {r0, r1, r2, r3}
   13f30:	add	ip, sp, #4
   13f34:	ldr	r4, [r4, sl]
   13f38:	ldr	r6, [sp, #88]	; 0x58
   13f3c:	stmia	ip!, {r0, r1, r2, r3}
   13f40:	ldm	lr!, {r0, r1, r2, r3}
   13f44:	ldr	sl, [r4]
   13f48:	stmia	ip!, {r0, r1, r2, r3}
   13f4c:	ldm	lr, {r0, r1, r2, r3}
   13f50:	str	sl, [sp, #52]	; 0x34
   13f54:	stm	ip, {r0, r1, r2, r3}
   13f58:	mov	r2, r5
   13f5c:	add	r5, sp, #4
   13f60:	mov	r1, r9
   13f64:	mov	r0, r5
   13f68:	bl	13a7c <close_stdout@@Base+0x1488>
   13f6c:	mov	r2, r6
   13f70:	mov	r3, r5
   13f74:	mov	r0, r8
   13f78:	mov	r1, r7
   13f7c:	bl	137ac <close_stdout@@Base+0x11b8>
   13f80:	ldr	r2, [sp, #52]	; 0x34
   13f84:	ldr	r3, [r4]
   13f88:	cmp	r2, r3
   13f8c:	bne	13f98 <close_stdout@@Base+0x19a4>
   13f90:	add	sp, sp, #56	; 0x38
   13f94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f98:	bl	11190 <__stack_chk_fail@plt>
   13f9c:	andeq	r3, r1, r4, lsr #5
   13fa0:	ldrdeq	r3, [r1], -r0
   13fa4:	andeq	r0, r0, ip, lsl #2
   13fa8:	push	{lr}		; (str lr, [sp, #-4]!)
   13fac:	sub	sp, sp, #12
   13fb0:	mvn	ip, #0
   13fb4:	str	ip, [sp]
   13fb8:	bl	13efc <close_stdout@@Base+0x1908>
   13fbc:	add	sp, sp, #12
   13fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fc4:	mov	ip, r1
   13fc8:	mov	r3, r2
   13fcc:	mov	r1, r0
   13fd0:	mov	r2, ip
   13fd4:	mov	r0, #0
   13fd8:	b	13fa8 <close_stdout@@Base+0x19b4>
   13fdc:	push	{lr}		; (str lr, [sp, #-4]!)
   13fe0:	sub	sp, sp, #12
   13fe4:	mov	lr, r1
   13fe8:	mov	ip, r2
   13fec:	mov	r1, r0
   13ff0:	str	r3, [sp]
   13ff4:	mov	r2, lr
   13ff8:	mov	r3, ip
   13ffc:	mov	r0, #0
   14000:	bl	13efc <close_stdout@@Base+0x1908>
   14004:	add	sp, sp, #12
   14008:	pop	{pc}		; (ldr pc, [sp], #4)
   1400c:	ldr	r3, [pc, #12]	; 14020 <close_stdout@@Base+0x1a2c>
   14010:	ldr	ip, [pc, #12]	; 14024 <close_stdout@@Base+0x1a30>
   14014:	add	r3, pc, r3
   14018:	ldr	r3, [r3, ip]
   1401c:	b	137ac <close_stdout@@Base+0x11b8>
   14020:	andeq	r2, r1, r4, ror #31
   14024:	andeq	r0, r0, r8, lsl #2
   14028:	mov	r2, r1
   1402c:	mov	r1, r0
   14030:	mov	r0, #0
   14034:	b	1400c <close_stdout@@Base+0x1a18>
   14038:	mvn	r2, #0
   1403c:	b	1400c <close_stdout@@Base+0x1a18>
   14040:	mov	r1, r0
   14044:	mov	r0, #0
   14048:	b	14038 <close_stdout@@Base+0x1a44>
   1404c:	push	{r4, r5, r6, r7, lr}
   14050:	cmp	r1, #0
   14054:	sub	sp, sp, #36	; 0x24
   14058:	ldr	r7, [pc, #896]	; 143e0 <close_stdout@@Base+0x1dec>
   1405c:	mov	ip, r3
   14060:	mov	r5, r0
   14064:	add	r7, pc, r7
   14068:	ldr	r4, [sp, #56]	; 0x38
   1406c:	ldr	r6, [sp, #60]	; 0x3c
   14070:	beq	143b4 <close_stdout@@Base+0x1dc0>
   14074:	str	r2, [sp]
   14078:	mov	r3, r1
   1407c:	ldr	r2, [pc, #864]	; 143e4 <close_stdout@@Base+0x1df0>
   14080:	mov	r1, #1
   14084:	str	ip, [sp, #4]
   14088:	add	r2, pc, r2
   1408c:	bl	112f8 <__fprintf_chk@plt>
   14090:	ldr	r1, [pc, #848]	; 143e8 <close_stdout@@Base+0x1df4>
   14094:	mov	r2, #5
   14098:	mov	r0, #0
   1409c:	add	r1, pc, r1
   140a0:	bl	11184 <dcgettext@plt>
   140a4:	ldr	r2, [pc, #832]	; 143ec <close_stdout@@Base+0x1df8>
   140a8:	movw	ip, #2013	; 0x7dd
   140ac:	mov	r1, #1
   140b0:	ldr	r2, [r7, r2]
   140b4:	str	ip, [sp]
   140b8:	mov	r3, r0
   140bc:	mov	r0, r5
   140c0:	bl	112f8 <__fprintf_chk@plt>
   140c4:	ldr	r1, [pc, #804]	; 143f0 <close_stdout@@Base+0x1dfc>
   140c8:	mov	r0, #0
   140cc:	mov	r2, #5
   140d0:	add	r1, pc, r1
   140d4:	bl	11184 <dcgettext@plt>
   140d8:	mov	r1, r5
   140dc:	bl	110d0 <fputs_unlocked@plt>
   140e0:	cmp	r6, #9
   140e4:	addls	pc, pc, r6, lsl #2
   140e8:	b	143d0 <close_stdout@@Base+0x1ddc>
   140ec:	b	14180 <close_stdout@@Base+0x1b8c>
   140f0:	b	14184 <close_stdout@@Base+0x1b90>
   140f4:	b	141b4 <close_stdout@@Base+0x1bc0>
   140f8:	b	141e8 <close_stdout@@Base+0x1bf4>
   140fc:	b	14224 <close_stdout@@Base+0x1c30>
   14100:	b	14264 <close_stdout@@Base+0x1c70>
   14104:	b	142ac <close_stdout@@Base+0x1cb8>
   14108:	b	142fc <close_stdout@@Base+0x1d08>
   1410c:	b	14354 <close_stdout@@Base+0x1d60>
   14110:	b	14114 <close_stdout@@Base+0x1b20>
   14114:	ldr	r1, [pc, #728]	; 143f4 <close_stdout@@Base+0x1e00>
   14118:	mov	r0, #0
   1411c:	add	r1, pc, r1
   14120:	mov	r2, #5
   14124:	bl	11184 <dcgettext@plt>
   14128:	ldm	r4, {r3, ip}
   1412c:	mov	r1, #1
   14130:	str	ip, [sp]
   14134:	ldr	ip, [r4, #8]
   14138:	str	ip, [sp, #4]
   1413c:	ldr	ip, [r4, #12]
   14140:	str	ip, [sp, #8]
   14144:	ldr	ip, [r4, #16]
   14148:	str	ip, [sp, #12]
   1414c:	ldr	ip, [r4, #20]
   14150:	str	ip, [sp, #16]
   14154:	ldr	ip, [r4, #24]
   14158:	str	ip, [sp, #20]
   1415c:	ldr	ip, [r4, #28]
   14160:	str	ip, [sp, #24]
   14164:	ldr	ip, [r4, #32]
   14168:	str	ip, [sp, #28]
   1416c:	mov	r2, r0
   14170:	mov	r0, r5
   14174:	bl	112f8 <__fprintf_chk@plt>
   14178:	add	sp, sp, #36	; 0x24
   1417c:	pop	{r4, r5, r6, r7, pc}
   14180:	bl	11388 <abort@plt>
   14184:	ldr	r1, [pc, #620]	; 143f8 <close_stdout@@Base+0x1e04>
   14188:	mov	r2, #5
   1418c:	mov	r0, #0
   14190:	add	r1, pc, r1
   14194:	bl	11184 <dcgettext@plt>
   14198:	ldr	r3, [r4]
   1419c:	mov	r1, #1
   141a0:	mov	r2, r0
   141a4:	mov	r0, r5
   141a8:	add	sp, sp, #36	; 0x24
   141ac:	pop	{r4, r5, r6, r7, lr}
   141b0:	b	112f8 <__fprintf_chk@plt>
   141b4:	ldr	r1, [pc, #576]	; 143fc <close_stdout@@Base+0x1e08>
   141b8:	mov	r2, #5
   141bc:	mov	r0, #0
   141c0:	add	r1, pc, r1
   141c4:	bl	11184 <dcgettext@plt>
   141c8:	ldm	r4, {r3, ip}
   141cc:	mov	r1, #1
   141d0:	str	ip, [sp, #56]	; 0x38
   141d4:	mov	r2, r0
   141d8:	mov	r0, r5
   141dc:	add	sp, sp, #36	; 0x24
   141e0:	pop	{r4, r5, r6, r7, lr}
   141e4:	b	112f8 <__fprintf_chk@plt>
   141e8:	ldr	r1, [pc, #528]	; 14400 <close_stdout@@Base+0x1e0c>
   141ec:	mov	r2, #5
   141f0:	mov	r0, #0
   141f4:	add	r1, pc, r1
   141f8:	bl	11184 <dcgettext@plt>
   141fc:	ldm	r4, {r3, ip}
   14200:	mov	r1, #1
   14204:	str	ip, [sp, #56]	; 0x38
   14208:	ldr	ip, [r4, #8]
   1420c:	str	ip, [sp, #60]	; 0x3c
   14210:	mov	r2, r0
   14214:	mov	r0, r5
   14218:	add	sp, sp, #36	; 0x24
   1421c:	pop	{r4, r5, r6, r7, lr}
   14220:	b	112f8 <__fprintf_chk@plt>
   14224:	ldr	r1, [pc, #472]	; 14404 <close_stdout@@Base+0x1e10>
   14228:	mov	r2, #5
   1422c:	mov	r0, #0
   14230:	add	r1, pc, r1
   14234:	bl	11184 <dcgettext@plt>
   14238:	ldm	r4, {r3, ip}
   1423c:	mov	r1, #1
   14240:	str	ip, [sp]
   14244:	ldr	ip, [r4, #8]
   14248:	str	ip, [sp, #4]
   1424c:	ldr	ip, [r4, #12]
   14250:	str	ip, [sp, #8]
   14254:	mov	r2, r0
   14258:	mov	r0, r5
   1425c:	bl	112f8 <__fprintf_chk@plt>
   14260:	b	14178 <close_stdout@@Base+0x1b84>
   14264:	ldr	r1, [pc, #412]	; 14408 <close_stdout@@Base+0x1e14>
   14268:	mov	r2, #5
   1426c:	mov	r0, #0
   14270:	add	r1, pc, r1
   14274:	bl	11184 <dcgettext@plt>
   14278:	ldm	r4, {r3, ip}
   1427c:	mov	r1, #1
   14280:	str	ip, [sp]
   14284:	ldr	ip, [r4, #8]
   14288:	str	ip, [sp, #4]
   1428c:	ldr	ip, [r4, #12]
   14290:	str	ip, [sp, #8]
   14294:	ldr	ip, [r4, #16]
   14298:	str	ip, [sp, #12]
   1429c:	mov	r2, r0
   142a0:	mov	r0, r5
   142a4:	bl	112f8 <__fprintf_chk@plt>
   142a8:	b	14178 <close_stdout@@Base+0x1b84>
   142ac:	ldr	r1, [pc, #344]	; 1440c <close_stdout@@Base+0x1e18>
   142b0:	mov	r2, #5
   142b4:	mov	r0, #0
   142b8:	add	r1, pc, r1
   142bc:	bl	11184 <dcgettext@plt>
   142c0:	ldm	r4, {r3, ip}
   142c4:	mov	r1, #1
   142c8:	str	ip, [sp]
   142cc:	ldr	ip, [r4, #8]
   142d0:	str	ip, [sp, #4]
   142d4:	ldr	ip, [r4, #12]
   142d8:	str	ip, [sp, #8]
   142dc:	ldr	ip, [r4, #16]
   142e0:	str	ip, [sp, #12]
   142e4:	ldr	ip, [r4, #20]
   142e8:	str	ip, [sp, #16]
   142ec:	mov	r2, r0
   142f0:	mov	r0, r5
   142f4:	bl	112f8 <__fprintf_chk@plt>
   142f8:	b	14178 <close_stdout@@Base+0x1b84>
   142fc:	ldr	r1, [pc, #268]	; 14410 <close_stdout@@Base+0x1e1c>
   14300:	mov	r2, #5
   14304:	mov	r0, #0
   14308:	add	r1, pc, r1
   1430c:	bl	11184 <dcgettext@plt>
   14310:	ldm	r4, {r3, ip}
   14314:	mov	r1, #1
   14318:	str	ip, [sp]
   1431c:	ldr	ip, [r4, #8]
   14320:	str	ip, [sp, #4]
   14324:	ldr	ip, [r4, #12]
   14328:	str	ip, [sp, #8]
   1432c:	ldr	ip, [r4, #16]
   14330:	str	ip, [sp, #12]
   14334:	ldr	ip, [r4, #20]
   14338:	str	ip, [sp, #16]
   1433c:	ldr	ip, [r4, #24]
   14340:	str	ip, [sp, #20]
   14344:	mov	r2, r0
   14348:	mov	r0, r5
   1434c:	bl	112f8 <__fprintf_chk@plt>
   14350:	b	14178 <close_stdout@@Base+0x1b84>
   14354:	ldr	r1, [pc, #184]	; 14414 <close_stdout@@Base+0x1e20>
   14358:	mov	r2, #5
   1435c:	mov	r0, #0
   14360:	add	r1, pc, r1
   14364:	bl	11184 <dcgettext@plt>
   14368:	ldm	r4, {r3, ip}
   1436c:	mov	r1, #1
   14370:	str	ip, [sp]
   14374:	ldr	ip, [r4, #8]
   14378:	str	ip, [sp, #4]
   1437c:	ldr	ip, [r4, #12]
   14380:	str	ip, [sp, #8]
   14384:	ldr	ip, [r4, #16]
   14388:	str	ip, [sp, #12]
   1438c:	ldr	ip, [r4, #20]
   14390:	str	ip, [sp, #16]
   14394:	ldr	ip, [r4, #24]
   14398:	str	ip, [sp, #20]
   1439c:	ldr	ip, [r4, #28]
   143a0:	str	ip, [sp, #24]
   143a4:	mov	r2, r0
   143a8:	mov	r0, r5
   143ac:	bl	112f8 <__fprintf_chk@plt>
   143b0:	b	14178 <close_stdout@@Base+0x1b84>
   143b4:	str	r3, [sp]
   143b8:	mov	r3, r2
   143bc:	ldr	r2, [pc, #84]	; 14418 <close_stdout@@Base+0x1e24>
   143c0:	mov	r1, #1
   143c4:	add	r2, pc, r2
   143c8:	bl	112f8 <__fprintf_chk@plt>
   143cc:	b	14090 <close_stdout@@Base+0x1a9c>
   143d0:	ldr	r1, [pc, #68]	; 1441c <close_stdout@@Base+0x1e28>
   143d4:	mov	r0, #0
   143d8:	add	r1, pc, r1
   143dc:	b	14120 <close_stdout@@Base+0x1b2c>
   143e0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   143e4:	andeq	r1, r0, r4, asr #21
   143e8:	andeq	r1, r0, r4, asr #21
   143ec:	andeq	r0, r0, ip, lsr r1
   143f0:	muleq	r0, r4, sl
   143f4:	andeq	r1, r0, r0, lsr #24
   143f8:	andeq	r1, r0, r0, lsr #21
   143fc:	andeq	r1, r0, r0, lsl #21
   14400:	andeq	r1, r0, r4, ror #20
   14404:	andeq	r1, r0, r4, asr #20
   14408:	andeq	r1, r0, r4, lsr #20
   1440c:	andeq	r1, r0, r0, lsl #20
   14410:	ldrdeq	r1, [r0], -r8
   14414:	andeq	r1, r0, ip, lsr #19
   14418:	muleq	r0, r4, r7
   1441c:	muleq	r0, r8, r9
   14420:	push	{r4, r5, lr}
   14424:	sub	sp, sp, #12
   14428:	ldr	r5, [sp, #24]
   1442c:	ldr	ip, [r5]
   14430:	cmp	ip, #0
   14434:	beq	14450 <close_stdout@@Base+0x1e5c>
   14438:	mov	lr, r5
   1443c:	mov	ip, #0
   14440:	ldr	r4, [lr, #4]!
   14444:	add	ip, ip, #1
   14448:	cmp	r4, #0
   1444c:	bne	14440 <close_stdout@@Base+0x1e4c>
   14450:	stm	sp, {r5, ip}
   14454:	bl	1404c <close_stdout@@Base+0x1a58>
   14458:	add	sp, sp, #12
   1445c:	pop	{r4, r5, pc}
   14460:	push	{r4, r5, r6, r7, lr}
   14464:	sub	sp, sp, #60	; 0x3c
   14468:	ldr	r4, [pc, #100]	; 144d4 <close_stdout@@Base+0x1ee0>
   1446c:	mov	ip, #0
   14470:	ldr	r5, [pc, #96]	; 144d8 <close_stdout@@Base+0x1ee4>
   14474:	mov	lr, ip
   14478:	add	r4, pc, r4
   1447c:	ldr	r6, [sp, #80]	; 0x50
   14480:	ldr	r7, [r4, r5]
   14484:	add	r5, sp, #12
   14488:	ldr	r4, [r7]
   1448c:	str	r4, [sp, #52]	; 0x34
   14490:	ldr	r4, [r6, ip]
   14494:	cmp	r4, #0
   14498:	str	r4, [r5, ip]
   1449c:	beq	144b0 <close_stdout@@Base+0x1ebc>
   144a0:	add	lr, lr, #1
   144a4:	add	ip, ip, #4
   144a8:	cmp	lr, #10
   144ac:	bne	14490 <close_stdout@@Base+0x1e9c>
   144b0:	stm	sp, {r5, lr}
   144b4:	bl	1404c <close_stdout@@Base+0x1a58>
   144b8:	ldr	r2, [sp, #52]	; 0x34
   144bc:	ldr	r3, [r7]
   144c0:	cmp	r2, r3
   144c4:	bne	144d0 <close_stdout@@Base+0x1edc>
   144c8:	add	sp, sp, #60	; 0x3c
   144cc:	pop	{r4, r5, r6, r7, pc}
   144d0:	bl	11190 <__stack_chk_fail@plt>
   144d4:	andeq	r2, r1, r0, lsl #23
   144d8:	andeq	r0, r0, ip, lsl #2
   144dc:	push	{r3}		; (str r3, [sp, #-4]!)
   144e0:	push	{r4, lr}
   144e4:	sub	sp, sp, #20
   144e8:	ldr	lr, [pc, #72]	; 14538 <close_stdout@@Base+0x1f44>
   144ec:	add	ip, sp, #32
   144f0:	ldr	r4, [pc, #68]	; 1453c <close_stdout@@Base+0x1f48>
   144f4:	add	lr, pc, lr
   144f8:	ldr	r3, [sp, #28]
   144fc:	ldr	r4, [lr, r4]
   14500:	str	ip, [sp]
   14504:	str	ip, [sp, #8]
   14508:	ldr	ip, [r4]
   1450c:	str	ip, [sp, #12]
   14510:	bl	14460 <close_stdout@@Base+0x1e6c>
   14514:	ldr	r2, [sp, #12]
   14518:	ldr	r3, [r4]
   1451c:	cmp	r2, r3
   14520:	bne	14534 <close_stdout@@Base+0x1f40>
   14524:	add	sp, sp, #20
   14528:	pop	{r4, lr}
   1452c:	add	sp, sp, #4
   14530:	bx	lr
   14534:	bl	11190 <__stack_chk_fail@plt>
   14538:	andeq	r2, r1, r4, lsl #22
   1453c:	andeq	r0, r0, ip, lsl #2
   14540:	ldr	r1, [pc, #132]	; 145cc <close_stdout@@Base+0x1fd8>
   14544:	mov	r2, #5
   14548:	push	{r4, lr}
   1454c:	add	r1, pc, r1
   14550:	mov	r0, #0
   14554:	ldr	r4, [pc, #116]	; 145d0 <close_stdout@@Base+0x1fdc>
   14558:	bl	11184 <dcgettext@plt>
   1455c:	ldr	r2, [pc, #112]	; 145d4 <close_stdout@@Base+0x1fe0>
   14560:	add	r4, pc, r4
   14564:	add	r2, pc, r2
   14568:	mov	r1, r0
   1456c:	mov	r0, #1
   14570:	bl	112e0 <__printf_chk@plt>
   14574:	ldr	r1, [pc, #92]	; 145d8 <close_stdout@@Base+0x1fe4>
   14578:	mov	r2, #5
   1457c:	mov	r0, #0
   14580:	add	r1, pc, r1
   14584:	bl	11184 <dcgettext@plt>
   14588:	ldr	r2, [pc, #76]	; 145dc <close_stdout@@Base+0x1fe8>
   1458c:	ldr	r3, [pc, #76]	; 145e0 <close_stdout@@Base+0x1fec>
   14590:	add	r2, pc, r2
   14594:	add	r3, pc, r3
   14598:	mov	r1, r0
   1459c:	mov	r0, #1
   145a0:	bl	112e0 <__printf_chk@plt>
   145a4:	ldr	r1, [pc, #56]	; 145e4 <close_stdout@@Base+0x1ff0>
   145a8:	mov	r0, #0
   145ac:	mov	r2, #5
   145b0:	add	r1, pc, r1
   145b4:	bl	11184 <dcgettext@plt>
   145b8:	ldr	r3, [pc, #40]	; 145e8 <close_stdout@@Base+0x1ff4>
   145bc:	ldr	r3, [r4, r3]
   145c0:	pop	{r4, lr}
   145c4:	ldr	r1, [r3]
   145c8:	b	110d0 <fputs_unlocked@plt>
   145cc:	andeq	r1, r0, r0, ror #16
   145d0:	muleq	r1, r8, sl
   145d4:	andeq	r1, r0, r0, ror #16
   145d8:	andeq	r1, r0, ip, asr r8
   145dc:	andeq	r1, r0, r8, ror #6
   145e0:	andeq	r1, r0, r4, ror r3
   145e4:	andeq	r1, r0, r0, asr #16
   145e8:	andeq	r0, r0, ip, lsr #2
   145ec:	push	{r4, lr}
   145f0:	mov	r4, r0
   145f4:	bl	1122c <malloc@plt>
   145f8:	rsbs	r3, r0, #1
   145fc:	movcc	r3, #0
   14600:	cmp	r4, #0
   14604:	moveq	r3, #0
   14608:	cmp	r3, #0
   1460c:	popeq	{r4, pc}
   14610:	bl	14800 <close_stdout@@Base+0x220c>
   14614:	push	{r3, r4, r5, lr}
   14618:	mov	r4, r0
   1461c:	mvn	r0, #0
   14620:	mov	r5, r1
   14624:	bl	153d8 <close_stdout@@Base+0x2de4>
   14628:	cmp	r0, r4
   1462c:	bcc	1463c <close_stdout@@Base+0x2048>
   14630:	mul	r0, r4, r5
   14634:	pop	{r3, r4, r5, lr}
   14638:	b	145ec <close_stdout@@Base+0x1ff8>
   1463c:	bl	14800 <close_stdout@@Base+0x220c>
   14640:	b	145ec <close_stdout@@Base+0x1ff8>
   14644:	rsbs	r3, r1, #1
   14648:	push	{r4, lr}
   1464c:	movcc	r3, #0
   14650:	cmp	r0, #0
   14654:	mov	r4, r1
   14658:	moveq	r3, #0
   1465c:	cmp	r3, #0
   14660:	bne	14684 <close_stdout@@Base+0x2090>
   14664:	bl	1119c <realloc@plt>
   14668:	rsbs	r3, r0, #1
   1466c:	movcc	r3, #0
   14670:	cmp	r4, #0
   14674:	moveq	r3, #0
   14678:	cmp	r3, #0
   1467c:	popeq	{r4, pc}
   14680:	bl	14800 <close_stdout@@Base+0x220c>
   14684:	bl	11130 <free@plt>
   14688:	mov	r0, #0
   1468c:	pop	{r4, pc}
   14690:	push	{r4, r5, r6, lr}
   14694:	mov	r5, r1
   14698:	mov	r6, r0
   1469c:	mov	r1, r2
   146a0:	mvn	r0, #0
   146a4:	mov	r4, r2
   146a8:	bl	153d8 <close_stdout@@Base+0x2de4>
   146ac:	cmp	r0, r5
   146b0:	bcc	146c4 <close_stdout@@Base+0x20d0>
   146b4:	mov	r0, r6
   146b8:	mul	r1, r5, r4
   146bc:	pop	{r4, r5, r6, lr}
   146c0:	b	14644 <close_stdout@@Base+0x2050>
   146c4:	bl	14800 <close_stdout@@Base+0x220c>
   146c8:	push	{r3, r4, r5, r6, r7, lr}
   146cc:	subs	r7, r0, #0
   146d0:	mov	r5, r1
   146d4:	mov	r6, r2
   146d8:	ldr	r4, [r1]
   146dc:	beq	14714 <close_stdout@@Base+0x2120>
   146e0:	movw	r0, #43690	; 0xaaaa
   146e4:	mov	r1, r2
   146e8:	bfi	r0, r0, #16, #16
   146ec:	bl	153d8 <close_stdout@@Base+0x2de4>
   146f0:	cmp	r4, r0
   146f4:	addcc	r3, r4, #1
   146f8:	addcc	r4, r4, r3, lsr #1
   146fc:	bcs	14738 <close_stdout@@Base+0x2144>
   14700:	str	r4, [r5]
   14704:	mov	r0, r7
   14708:	mul	r1, r6, r4
   1470c:	pop	{r3, r4, r5, r6, r7, lr}
   14710:	b	14644 <close_stdout@@Base+0x2050>
   14714:	cmp	r4, #0
   14718:	bne	14700 <close_stdout@@Base+0x210c>
   1471c:	mov	r0, #64	; 0x40
   14720:	mov	r1, r2
   14724:	bl	153d8 <close_stdout@@Base+0x2de4>
   14728:	cmp	r0, #0
   1472c:	movne	r4, r0
   14730:	addeq	r4, r0, #1
   14734:	b	14700 <close_stdout@@Base+0x210c>
   14738:	bl	14800 <close_stdout@@Base+0x220c>
   1473c:	cmp	r0, #0
   14740:	push	{r3, lr}
   14744:	ldr	r3, [r1]
   14748:	beq	14774 <close_stdout@@Base+0x2180>
   1474c:	movw	r2, #43689	; 0xaaa9
   14750:	movt	r2, #43690	; 0xaaaa
   14754:	cmp	r3, r2
   14758:	addls	r2, r3, #1
   1475c:	addls	r3, r3, r2, lsr #1
   14760:	bhi	1478c <close_stdout@@Base+0x2198>
   14764:	str	r3, [r1]
   14768:	mov	r1, r3
   1476c:	pop	{r3, lr}
   14770:	b	14644 <close_stdout@@Base+0x2050>
   14774:	cmp	r3, #0
   14778:	moveq	r3, #64	; 0x40
   1477c:	str	r3, [r1]
   14780:	mov	r1, r3
   14784:	pop	{r3, lr}
   14788:	b	14644 <close_stdout@@Base+0x2050>
   1478c:	bl	14800 <close_stdout@@Base+0x220c>
   14790:	push	{r4, lr}
   14794:	mov	r4, r0
   14798:	bl	145ec <close_stdout@@Base+0x1ff8>
   1479c:	mov	r2, r4
   147a0:	mov	r1, #0
   147a4:	pop	{r4, lr}
   147a8:	b	112c8 <memset@plt>
   147ac:	push	{r3, lr}
   147b0:	bl	110c4 <calloc@plt>
   147b4:	cmp	r0, #0
   147b8:	popne	{r3, pc}
   147bc:	bl	14800 <close_stdout@@Base+0x220c>
   147c0:	push	{r3, r4, r5, lr}
   147c4:	mov	r4, r1
   147c8:	mov	r5, r0
   147cc:	mov	r0, r1
   147d0:	bl	145ec <close_stdout@@Base+0x1ff8>
   147d4:	mov	r1, r5
   147d8:	mov	r2, r4
   147dc:	pop	{r3, r4, r5, lr}
   147e0:	b	11148 <memcpy@plt>
   147e4:	push	{r4, lr}
   147e8:	mov	r4, r0
   147ec:	bl	1128c <strlen@plt>
   147f0:	add	r1, r0, #1
   147f4:	mov	r0, r4
   147f8:	pop	{r4, lr}
   147fc:	b	147c0 <close_stdout@@Base+0x21cc>
   14800:	ldr	r3, [pc, #64]	; 14848 <close_stdout@@Base+0x2254>
   14804:	mov	r2, #5
   14808:	ldr	ip, [pc, #60]	; 1484c <close_stdout@@Base+0x2258>
   1480c:	mov	r0, #0
   14810:	add	r3, pc, r3
   14814:	ldr	r1, [pc, #52]	; 14850 <close_stdout@@Base+0x225c>
   14818:	push	{r4, lr}
   1481c:	add	r1, pc, r1
   14820:	ldr	r3, [r3, ip]
   14824:	ldr	r4, [r3]
   14828:	bl	11184 <dcgettext@plt>
   1482c:	ldr	r2, [pc, #32]	; 14854 <close_stdout@@Base+0x2260>
   14830:	mov	r1, #0
   14834:	add	r2, pc, r2
   14838:	mov	r3, r0
   1483c:	mov	r0, r4
   14840:	bl	11208 <error@plt>
   14844:	bl	11388 <abort@plt>
   14848:	andeq	r2, r1, r8, ror #15
   1484c:	andeq	r0, r0, r0, lsr r1
   14850:	andeq	r1, r0, r4, asr #12
   14854:	andeq	r1, r0, r4, asr r2
   14858:	ldr	ip, [pc, #1308]	; 14d7c <close_stdout@@Base+0x2788>
   1485c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14860:	mov	sl, r2
   14864:	ldr	r2, [pc, #1300]	; 14d80 <close_stdout@@Base+0x278c>
   14868:	add	ip, pc, ip
   1486c:	mov	r9, r3
   14870:	sub	sp, sp, #20
   14874:	mov	r3, ip
   14878:	cmp	sl, #36	; 0x24
   1487c:	ldr	r6, [ip, r2]
   14880:	mov	r5, r0
   14884:	mov	r7, r1
   14888:	ldr	r8, [sp, #56]	; 0x38
   1488c:	ldr	r3, [r6]
   14890:	str	r3, [sp, #12]
   14894:	bhi	14d5c <close_stdout@@Base+0x2768>
   14898:	cmp	r1, #0
   1489c:	addeq	r7, sp, #8
   148a0:	bl	11268 <__ctype_b_loc@plt>
   148a4:	ldrb	ip, [r5]
   148a8:	mov	r2, r5
   148ac:	ldr	r1, [r0]
   148b0:	b	148b8 <close_stdout@@Base+0x22c4>
   148b4:	ldrb	ip, [r2, #1]!
   148b8:	lsl	r3, ip, #1
   148bc:	ldrh	r4, [r1, r3]
   148c0:	and	r4, r4, #8192	; 0x2000
   148c4:	uxth	r4, r4
   148c8:	cmp	r4, #0
   148cc:	bne	148b4 <close_stdout@@Base+0x22c0>
   148d0:	cmp	ip, #45	; 0x2d
   148d4:	bne	148f4 <close_stdout@@Base+0x2300>
   148d8:	mov	r0, #4
   148dc:	ldr	r2, [sp, #12]
   148e0:	ldr	r3, [r6]
   148e4:	cmp	r2, r3
   148e8:	bne	14d58 <close_stdout@@Base+0x2764>
   148ec:	add	sp, sp, #20
   148f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148f4:	bl	112b0 <__errno_location@plt>
   148f8:	mov	r2, sl
   148fc:	mov	r1, r7
   14900:	str	r4, [r0]
   14904:	mov	fp, r0
   14908:	mov	r0, r5
   1490c:	bl	11280 <strtoul@plt>
   14910:	ldr	r3, [r7]
   14914:	cmp	r3, r5
   14918:	mov	sl, r0
   1491c:	beq	14aac <close_stdout@@Base+0x24b8>
   14920:	ldr	r0, [fp]
   14924:	cmp	r0, #0
   14928:	bne	14958 <close_stdout@@Base+0x2364>
   1492c:	mov	r4, r0
   14930:	cmp	r8, #0
   14934:	streq	sl, [r9]
   14938:	moveq	r0, r4
   1493c:	beq	148dc <close_stdout@@Base+0x22e8>
   14940:	ldrb	r5, [r3]
   14944:	cmp	r5, #0
   14948:	bne	14968 <close_stdout@@Base+0x2374>
   1494c:	mov	r0, r4
   14950:	str	sl, [r9]
   14954:	b	148dc <close_stdout@@Base+0x22e8>
   14958:	cmp	r0, #34	; 0x22
   1495c:	moveq	r4, #1
   14960:	bne	148d8 <close_stdout@@Base+0x22e4>
   14964:	b	14930 <close_stdout@@Base+0x233c>
   14968:	mov	r0, r8
   1496c:	mov	r1, r5
   14970:	str	r3, [sp, #4]
   14974:	bl	11298 <strchr@plt>
   14978:	ldr	r3, [sp, #4]
   1497c:	cmp	r0, #0
   14980:	beq	14ae4 <close_stdout@@Base+0x24f0>
   14984:	mov	r0, r8
   14988:	mov	r1, #48	; 0x30
   1498c:	str	r3, [sp, #4]
   14990:	bl	11298 <strchr@plt>
   14994:	ldr	r3, [sp, #4]
   14998:	cmp	r0, #0
   1499c:	beq	149bc <close_stdout@@Base+0x23c8>
   149a0:	ldrb	r2, [r3, #1]
   149a4:	cmp	r2, #68	; 0x44
   149a8:	beq	14d40 <close_stdout@@Base+0x274c>
   149ac:	cmp	r2, #105	; 0x69
   149b0:	beq	14d28 <close_stdout@@Base+0x2734>
   149b4:	cmp	r2, #66	; 0x42
   149b8:	beq	14d40 <close_stdout@@Base+0x274c>
   149bc:	mov	r8, #1
   149c0:	mov	fp, #1024	; 0x400
   149c4:	sub	r5, r5, #66	; 0x42
   149c8:	cmp	r5, #53	; 0x35
   149cc:	addls	pc, pc, r5, lsl #2
   149d0:	b	14ae4 <close_stdout@@Base+0x24f0>
   149d4:	b	14cd4 <close_stdout@@Base+0x26e0>
   149d8:	b	14ae4 <close_stdout@@Base+0x24f0>
   149dc:	b	14ae4 <close_stdout@@Base+0x24f0>
   149e0:	b	14c94 <close_stdout@@Base+0x26a0>
   149e4:	b	14ae4 <close_stdout@@Base+0x24f0>
   149e8:	b	14ce8 <close_stdout@@Base+0x26f4>
   149ec:	b	14ae4 <close_stdout@@Base+0x24f0>
   149f0:	b	14ae4 <close_stdout@@Base+0x24f0>
   149f4:	b	14ae4 <close_stdout@@Base+0x24f0>
   149f8:	b	14c74 <close_stdout@@Base+0x2680>
   149fc:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a00:	b	14c40 <close_stdout@@Base+0x264c>
   14a04:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a08:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a0c:	b	14c00 <close_stdout@@Base+0x260c>
   14a10:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a14:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a18:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a1c:	b	14bc0 <close_stdout@@Base+0x25cc>
   14a20:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a24:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a28:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a2c:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a30:	b	14b80 <close_stdout@@Base+0x258c>
   14a34:	b	14b40 <close_stdout@@Base+0x254c>
   14a38:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a3c:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a40:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a44:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a48:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a4c:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a50:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a54:	b	14b2c <close_stdout@@Base+0x2538>
   14a58:	b	14af0 <close_stdout@@Base+0x24fc>
   14a5c:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a60:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a64:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a68:	b	14ce8 <close_stdout@@Base+0x26f4>
   14a6c:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a70:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a74:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a78:	b	14c74 <close_stdout@@Base+0x2680>
   14a7c:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a80:	b	14c40 <close_stdout@@Base+0x264c>
   14a84:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a88:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a8c:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a90:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a94:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a98:	b	14ae4 <close_stdout@@Base+0x24f0>
   14a9c:	b	14bc0 <close_stdout@@Base+0x25cc>
   14aa0:	b	14ae4 <close_stdout@@Base+0x24f0>
   14aa4:	b	14ae4 <close_stdout@@Base+0x24f0>
   14aa8:	b	14b10 <close_stdout@@Base+0x251c>
   14aac:	cmp	r8, #0
   14ab0:	beq	148d8 <close_stdout@@Base+0x22e4>
   14ab4:	ldrb	r5, [r5]
   14ab8:	cmp	r5, #0
   14abc:	beq	148d8 <close_stdout@@Base+0x22e4>
   14ac0:	mov	r0, r8
   14ac4:	mov	r1, r5
   14ac8:	str	r3, [sp, #4]
   14acc:	bl	11298 <strchr@plt>
   14ad0:	ldr	r3, [sp, #4]
   14ad4:	cmp	r0, #0
   14ad8:	movne	sl, #1
   14adc:	bne	14984 <close_stdout@@Base+0x2390>
   14ae0:	b	148d8 <close_stdout@@Base+0x22e4>
   14ae4:	str	sl, [r9]
   14ae8:	orr	r0, r4, #2
   14aec:	b	148dc <close_stdout@@Base+0x22e8>
   14af0:	mov	r2, #0
   14af4:	add	r1, r3, r8
   14af8:	str	r1, [r7]
   14afc:	ldrb	r3, [r3, r8]
   14b00:	orr	r4, r4, r2
   14b04:	cmp	r3, #0
   14b08:	orrne	r4, r4, #2
   14b0c:	b	1494c <close_stdout@@Base+0x2358>
   14b10:	cmn	sl, #-2147483647	; 0x80000001
   14b14:	lslls	sl, sl, #1
   14b18:	movls	r2, #0
   14b1c:	bls	14af4 <close_stdout@@Base+0x2500>
   14b20:	mvn	sl, #0
   14b24:	mov	r2, #1
   14b28:	b	14af4 <close_stdout@@Base+0x2500>
   14b2c:	cmp	sl, #8388608	; 0x800000
   14b30:	lslcc	sl, sl, #9
   14b34:	movcc	r2, #0
   14b38:	bcc	14af4 <close_stdout@@Base+0x2500>
   14b3c:	b	14b20 <close_stdout@@Base+0x252c>
   14b40:	mov	r1, fp
   14b44:	mvn	r0, #0
   14b48:	str	r3, [sp, #4]
   14b4c:	bl	153d8 <close_stdout@@Base+0x2de4>
   14b50:	ldr	r3, [sp, #4]
   14b54:	mov	r1, #7
   14b58:	mov	r2, #0
   14b5c:	cmp	r0, sl
   14b60:	movcs	ip, #0
   14b64:	movcc	ip, #1
   14b68:	mulcs	sl, fp, sl
   14b6c:	mvncc	sl, #0
   14b70:	subs	r1, r1, #1
   14b74:	orr	r2, r2, ip
   14b78:	bne	14b5c <close_stdout@@Base+0x2568>
   14b7c:	b	14af4 <close_stdout@@Base+0x2500>
   14b80:	mov	r1, fp
   14b84:	mvn	r0, #0
   14b88:	str	r3, [sp, #4]
   14b8c:	bl	153d8 <close_stdout@@Base+0x2de4>
   14b90:	ldr	r3, [sp, #4]
   14b94:	mov	r1, #8
   14b98:	mov	r2, #0
   14b9c:	cmp	r0, sl
   14ba0:	movcs	ip, #0
   14ba4:	movcc	ip, #1
   14ba8:	mulcs	sl, fp, sl
   14bac:	mvncc	sl, #0
   14bb0:	subs	r1, r1, #1
   14bb4:	orr	r2, r2, ip
   14bb8:	bne	14b9c <close_stdout@@Base+0x25a8>
   14bbc:	b	14af4 <close_stdout@@Base+0x2500>
   14bc0:	mov	r1, fp
   14bc4:	mvn	r0, #0
   14bc8:	str	r3, [sp, #4]
   14bcc:	bl	153d8 <close_stdout@@Base+0x2de4>
   14bd0:	ldr	r3, [sp, #4]
   14bd4:	mov	r1, #4
   14bd8:	mov	r2, #0
   14bdc:	cmp	r0, sl
   14be0:	movcs	ip, #0
   14be4:	movcc	ip, #1
   14be8:	mulcs	sl, fp, sl
   14bec:	mvncc	sl, #0
   14bf0:	subs	r1, r1, #1
   14bf4:	orr	r2, r2, ip
   14bf8:	bne	14bdc <close_stdout@@Base+0x25e8>
   14bfc:	b	14af4 <close_stdout@@Base+0x2500>
   14c00:	mov	r1, fp
   14c04:	mvn	r0, #0
   14c08:	str	r3, [sp, #4]
   14c0c:	bl	153d8 <close_stdout@@Base+0x2de4>
   14c10:	ldr	r3, [sp, #4]
   14c14:	mov	r1, #5
   14c18:	mov	r2, #0
   14c1c:	cmp	r0, sl
   14c20:	movcs	ip, #0
   14c24:	movcc	ip, #1
   14c28:	mulcs	sl, fp, sl
   14c2c:	mvncc	sl, #0
   14c30:	subs	r1, r1, #1
   14c34:	orr	r2, r2, ip
   14c38:	bne	14c1c <close_stdout@@Base+0x2628>
   14c3c:	b	14af4 <close_stdout@@Base+0x2500>
   14c40:	mvn	r0, #0
   14c44:	mov	r1, fp
   14c48:	str	r3, [sp, #4]
   14c4c:	bl	153d8 <close_stdout@@Base+0x2de4>
   14c50:	ldr	r3, [sp, #4]
   14c54:	cmp	sl, r0
   14c58:	bhi	14d4c <close_stdout@@Base+0x2758>
   14c5c:	mul	sl, sl, fp
   14c60:	cmp	r0, sl
   14c64:	bcc	14d4c <close_stdout@@Base+0x2758>
   14c68:	mul	sl, fp, sl
   14c6c:	mov	r2, #0
   14c70:	b	14af4 <close_stdout@@Base+0x2500>
   14c74:	mvn	r0, #0
   14c78:	mov	r1, fp
   14c7c:	str	r3, [sp, #4]
   14c80:	bl	153d8 <close_stdout@@Base+0x2de4>
   14c84:	ldr	r3, [sp, #4]
   14c88:	cmp	sl, r0
   14c8c:	bhi	14b20 <close_stdout@@Base+0x252c>
   14c90:	b	14c68 <close_stdout@@Base+0x2674>
   14c94:	mov	r1, fp
   14c98:	mvn	r0, #0
   14c9c:	str	r3, [sp, #4]
   14ca0:	bl	153d8 <close_stdout@@Base+0x2de4>
   14ca4:	ldr	r3, [sp, #4]
   14ca8:	mov	r1, #6
   14cac:	mov	r2, #0
   14cb0:	cmp	r0, sl
   14cb4:	movcs	ip, #0
   14cb8:	movcc	ip, #1
   14cbc:	mulcs	sl, fp, sl
   14cc0:	mvncc	sl, #0
   14cc4:	subs	r1, r1, #1
   14cc8:	orr	r2, r2, ip
   14ccc:	bne	14cb0 <close_stdout@@Base+0x26bc>
   14cd0:	b	14af4 <close_stdout@@Base+0x2500>
   14cd4:	cmp	sl, #4194304	; 0x400000
   14cd8:	lslcc	sl, sl, #10
   14cdc:	movcc	r2, #0
   14ce0:	bcc	14af4 <close_stdout@@Base+0x2500>
   14ce4:	b	14b20 <close_stdout@@Base+0x252c>
   14ce8:	mov	r1, fp
   14cec:	mvn	r0, #0
   14cf0:	str	r3, [sp, #4]
   14cf4:	bl	153d8 <close_stdout@@Base+0x2de4>
   14cf8:	ldr	r3, [sp, #4]
   14cfc:	mov	r1, #3
   14d00:	mov	r2, #0
   14d04:	cmp	r0, sl
   14d08:	movcs	ip, #0
   14d0c:	movcc	ip, #1
   14d10:	mulcs	sl, fp, sl
   14d14:	mvncc	sl, #0
   14d18:	subs	r1, r1, #1
   14d1c:	orr	r2, r2, ip
   14d20:	bne	14d04 <close_stdout@@Base+0x2710>
   14d24:	b	14af4 <close_stdout@@Base+0x2500>
   14d28:	ldrb	r8, [r3, #2]
   14d2c:	mov	fp, #1024	; 0x400
   14d30:	cmp	r8, #66	; 0x42
   14d34:	moveq	r8, #3
   14d38:	movne	r8, #1
   14d3c:	b	149c4 <close_stdout@@Base+0x23d0>
   14d40:	mov	r8, #2
   14d44:	mov	fp, #1000	; 0x3e8
   14d48:	b	149c4 <close_stdout@@Base+0x23d0>
   14d4c:	mov	r2, #1
   14d50:	mvn	sl, #0
   14d54:	b	14af4 <close_stdout@@Base+0x2500>
   14d58:	bl	11190 <__stack_chk_fail@plt>
   14d5c:	ldr	r0, [pc, #32]	; 14d84 <close_stdout@@Base+0x2790>
   14d60:	mov	r2, #96	; 0x60
   14d64:	ldr	r1, [pc, #28]	; 14d88 <close_stdout@@Base+0x2794>
   14d68:	ldr	r3, [pc, #28]	; 14d8c <close_stdout@@Base+0x2798>
   14d6c:	add	r0, pc, r0
   14d70:	add	r1, pc, r1
   14d74:	add	r3, pc, r3
   14d78:	bl	113a0 <__assert_fail@plt>
   14d7c:	muleq	r1, r0, r7
   14d80:	andeq	r0, r0, ip, lsl #2
   14d84:	andeq	r1, r0, r4, lsl r1
   14d88:	andeq	r1, r0, r8, lsr r1
   14d8c:	andeq	r1, r0, r0, lsl #2
   14d90:	push	{r4, r5, r6, lr}
   14d94:	sub	sp, sp, #8
   14d98:	mov	r4, r0
   14d9c:	bl	112ec <fileno@plt>
   14da0:	cmp	r0, #0
   14da4:	mov	r0, r4
   14da8:	blt	14e24 <close_stdout@@Base+0x2830>
   14dac:	bl	11244 <__freading@plt>
   14db0:	cmp	r0, #0
   14db4:	bne	14df0 <close_stdout@@Base+0x27fc>
   14db8:	mov	r0, r4
   14dbc:	bl	14e30 <close_stdout@@Base+0x283c>
   14dc0:	cmp	r0, #0
   14dc4:	beq	14e20 <close_stdout@@Base+0x282c>
   14dc8:	bl	112b0 <__errno_location@plt>
   14dcc:	ldr	r6, [r0]
   14dd0:	mov	r5, r0
   14dd4:	mov	r0, r4
   14dd8:	bl	11304 <fclose@plt>
   14ddc:	cmp	r6, #0
   14de0:	mvnne	r0, #0
   14de4:	strne	r6, [r5]
   14de8:	add	sp, sp, #8
   14dec:	pop	{r4, r5, r6, pc}
   14df0:	mov	r0, r4
   14df4:	bl	112ec <fileno@plt>
   14df8:	mov	r1, #1
   14dfc:	mov	r2, #0
   14e00:	mov	r3, #0
   14e04:	str	r1, [sp]
   14e08:	bl	111cc <lseek64@plt>
   14e0c:	mvn	r2, #0
   14e10:	mvn	r3, #0
   14e14:	cmp	r1, r3
   14e18:	cmpeq	r0, r2
   14e1c:	bne	14db8 <close_stdout@@Base+0x27c4>
   14e20:	mov	r0, r4
   14e24:	add	sp, sp, #8
   14e28:	pop	{r4, r5, r6, lr}
   14e2c:	b	11304 <fclose@plt>
   14e30:	push	{r4, lr}
   14e34:	subs	r4, r0, #0
   14e38:	sub	sp, sp, #8
   14e3c:	beq	14e4c <close_stdout@@Base+0x2858>
   14e40:	bl	11244 <__freading@plt>
   14e44:	cmp	r0, #0
   14e48:	bne	14e5c <close_stdout@@Base+0x2868>
   14e4c:	mov	r0, r4
   14e50:	add	sp, sp, #8
   14e54:	pop	{r4, lr}
   14e58:	b	11100 <fflush@plt>
   14e5c:	ldr	r3, [r4]
   14e60:	tst	r3, #256	; 0x100
   14e64:	beq	14e4c <close_stdout@@Base+0x2858>
   14e68:	mov	r3, #1
   14e6c:	mov	r0, r4
   14e70:	str	r3, [sp]
   14e74:	mov	r2, #0
   14e78:	mov	r3, #0
   14e7c:	bl	14e90 <close_stdout@@Base+0x289c>
   14e80:	mov	r0, r4
   14e84:	add	sp, sp, #8
   14e88:	pop	{r4, lr}
   14e8c:	b	11100 <fflush@plt>
   14e90:	push	{r4, r5, r6, r7, lr}
   14e94:	sub	sp, sp, #20
   14e98:	ldmib	r0, {r1, ip}
   14e9c:	mov	r6, r0
   14ea0:	ldr	r4, [sp, #40]	; 0x28
   14ea4:	cmp	ip, r1
   14ea8:	beq	14ec0 <close_stdout@@Base+0x28cc>
   14eac:	str	r4, [sp, #40]	; 0x28
   14eb0:	mov	r0, r6
   14eb4:	add	sp, sp, #20
   14eb8:	pop	{r4, r5, r6, r7, lr}
   14ebc:	b	11310 <fseeko64@plt>
   14ec0:	ldr	ip, [r0, #20]
   14ec4:	ldr	r1, [r0, #16]
   14ec8:	cmp	ip, r1
   14ecc:	bne	14eac <close_stdout@@Base+0x28b8>
   14ed0:	ldr	r7, [r0, #36]	; 0x24
   14ed4:	cmp	r7, #0
   14ed8:	bne	14eac <close_stdout@@Base+0x28b8>
   14edc:	str	r2, [sp, #12]
   14ee0:	mvn	r5, #0
   14ee4:	str	r3, [sp, #8]
   14ee8:	bl	112ec <fileno@plt>
   14eec:	str	r4, [sp]
   14ef0:	mvn	r4, #0
   14ef4:	ldr	r2, [sp, #12]
   14ef8:	ldr	r3, [sp, #8]
   14efc:	bl	111cc <lseek64@plt>
   14f00:	mov	r2, r0
   14f04:	mov	r3, r1
   14f08:	cmp	r3, r5
   14f0c:	cmpeq	r2, r4
   14f10:	beq	14f30 <close_stdout@@Base+0x293c>
   14f14:	ldr	r1, [r6]
   14f18:	mov	r0, r7
   14f1c:	strd	r2, [r6, #80]	; 0x50
   14f20:	bic	r3, r1, #16
   14f24:	str	r3, [r6]
   14f28:	add	sp, sp, #20
   14f2c:	pop	{r4, r5, r6, r7, pc}
   14f30:	mvn	r0, #0
   14f34:	b	14f28 <close_stdout@@Base+0x2934>
   14f38:	push	{r4, r5, r6, lr}
   14f3c:	mov	r4, r0
   14f40:	bl	111f0 <__fpending@plt>
   14f44:	mov	r6, r0
   14f48:	mov	r0, r4
   14f4c:	ldr	r4, [r4]
   14f50:	bl	14d90 <close_stdout@@Base+0x279c>
   14f54:	and	r4, r4, #32
   14f58:	adds	r5, r0, #0
   14f5c:	movne	r5, #1
   14f60:	cmp	r4, #0
   14f64:	bne	14f84 <close_stdout@@Base+0x2990>
   14f68:	cmp	r5, #0
   14f6c:	beq	14f7c <close_stdout@@Base+0x2988>
   14f70:	cmp	r6, #0
   14f74:	beq	14fa0 <close_stdout@@Base+0x29ac>
   14f78:	mvn	r4, #0
   14f7c:	mov	r0, r4
   14f80:	pop	{r4, r5, r6, pc}
   14f84:	cmp	r5, #0
   14f88:	bne	14f78 <close_stdout@@Base+0x2984>
   14f8c:	bl	112b0 <__errno_location@plt>
   14f90:	mvn	r4, #0
   14f94:	str	r5, [r0]
   14f98:	mov	r0, r4
   14f9c:	pop	{r4, r5, r6, pc}
   14fa0:	bl	112b0 <__errno_location@plt>
   14fa4:	ldr	r4, [r0]
   14fa8:	subs	r4, r4, #9
   14fac:	mvnne	r4, #0
   14fb0:	mov	r0, r4
   14fb4:	pop	{r4, r5, r6, pc}
   14fb8:	ldr	r3, [pc, #984]	; 15398 <close_stdout@@Base+0x2da4>
   14fbc:	mov	r0, #14
   14fc0:	ldr	r2, [pc, #980]	; 1539c <close_stdout@@Base+0x2da8>
   14fc4:	add	r3, pc, r3
   14fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fcc:	sub	sp, sp, #132	; 0x84
   14fd0:	ldr	r6, [r3, r2]
   14fd4:	ldr	r3, [r6]
   14fd8:	str	r3, [sp, #124]	; 0x7c
   14fdc:	bl	1134c <nl_langinfo@plt>
   14fe0:	subs	r5, r0, #0
   14fe4:	beq	15098 <close_stdout@@Base+0x2aa4>
   14fe8:	ldr	r3, [pc, #944]	; 153a0 <close_stdout@@Base+0x2dac>
   14fec:	ldr	r4, [pc, r3]
   14ff0:	cmp	r4, #0
   14ff4:	beq	150a4 <close_stdout@@Base+0x2ab0>
   14ff8:	ldrb	r7, [r4]
   14ffc:	cmp	r7, #0
   15000:	bne	15034 <close_stdout@@Base+0x2a40>
   15004:	b	1506c <close_stdout@@Base+0x2a78>
   15008:	mov	r0, r4
   1500c:	bl	1128c <strlen@plt>
   15010:	add	r0, r0, #1
   15014:	add	r7, r4, r0
   15018:	mov	r0, r7
   1501c:	bl	1128c <strlen@plt>
   15020:	add	r0, r0, #1
   15024:	add	r4, r7, r0
   15028:	ldrb	r7, [r7, r0]
   1502c:	cmp	r7, #0
   15030:	beq	1506c <close_stdout@@Base+0x2a78>
   15034:	mov	r0, r5
   15038:	mov	r1, r4
   1503c:	bl	110e8 <strcmp@plt>
   15040:	cmp	r0, #0
   15044:	beq	1505c <close_stdout@@Base+0x2a68>
   15048:	cmp	r7, #42	; 0x2a
   1504c:	bne	15008 <close_stdout@@Base+0x2a14>
   15050:	ldrb	r3, [r4, #1]
   15054:	cmp	r3, #0
   15058:	bne	15008 <close_stdout@@Base+0x2a14>
   1505c:	mov	r0, r4
   15060:	bl	1128c <strlen@plt>
   15064:	add	r0, r0, #1
   15068:	add	r5, r4, r0
   1506c:	ldrb	r3, [r5]
   15070:	cmp	r3, #0
   15074:	ldreq	r5, [pc, #808]	; 153a4 <close_stdout@@Base+0x2db0>
   15078:	addeq	r5, pc, r5
   1507c:	ldr	r2, [sp, #124]	; 0x7c
   15080:	mov	r0, r5
   15084:	ldr	r3, [r6]
   15088:	cmp	r2, r3
   1508c:	bne	1536c <close_stdout@@Base+0x2d78>
   15090:	add	sp, sp, #132	; 0x84
   15094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15098:	ldr	r5, [pc, #776]	; 153a8 <close_stdout@@Base+0x2db4>
   1509c:	add	r5, pc, r5
   150a0:	b	14fe8 <close_stdout@@Base+0x29f4>
   150a4:	ldr	r0, [pc, #768]	; 153ac <close_stdout@@Base+0x2db8>
   150a8:	add	r0, pc, r0
   150ac:	bl	11220 <getenv@plt>
   150b0:	subs	r8, r0, #0
   150b4:	beq	15344 <close_stdout@@Base+0x2d50>
   150b8:	ldrb	r3, [r8]
   150bc:	cmp	r3, #0
   150c0:	beq	152d8 <close_stdout@@Base+0x2ce4>
   150c4:	bl	1128c <strlen@plt>
   150c8:	subs	sl, r0, #0
   150cc:	subne	r3, sl, #1
   150d0:	bne	152e8 <close_stdout@@Base+0x2cf4>
   150d4:	mov	r9, #0
   150d8:	mov	fp, r9
   150dc:	add	r9, sl, r9
   150e0:	add	r0, r9, #14
   150e4:	bl	1122c <malloc@plt>
   150e8:	subs	r7, r0, #0
   150ec:	beq	15338 <close_stdout@@Base+0x2d44>
   150f0:	mov	r1, r8
   150f4:	mov	r2, sl
   150f8:	bl	11148 <memcpy@plt>
   150fc:	cmp	fp, #0
   15100:	add	ip, r7, r9
   15104:	movne	r3, #47	; 0x2f
   15108:	strbne	r3, [r7, sl]
   1510c:	ldr	r3, [pc, #668]	; 153b0 <close_stdout@@Base+0x2dbc>
   15110:	add	r3, pc, r3
   15114:	ldm	r3!, {r0, r1, r2}
   15118:	ldrh	r3, [r3]
   1511c:	str	r0, [r7, r9]
   15120:	mov	r0, r7
   15124:	str	r1, [ip, #4]
   15128:	mov	r1, #32768	; 0x8000
   1512c:	strh	r3, [ip, #12]
   15130:	str	r2, [ip, #8]
   15134:	bl	11214 <open64@plt>
   15138:	subs	r8, r0, #0
   1513c:	blt	15300 <close_stdout@@Base+0x2d0c>
   15140:	ldr	r1, [pc, #620]	; 153b4 <close_stdout@@Base+0x2dc0>
   15144:	add	r1, pc, r1
   15148:	bl	110b8 <fdopen@plt>
   1514c:	subs	fp, r0, #0
   15150:	beq	15358 <close_stdout@@Base+0x2d64>
   15154:	ldr	r0, [pc, #604]	; 153b8 <close_stdout@@Base+0x2dc4>
   15158:	add	sl, sp, #20
   1515c:	add	r9, sp, #72	; 0x48
   15160:	mov	r8, #0
   15164:	add	r0, pc, r0
   15168:	str	r0, [sp, #12]
   1516c:	ldr	r3, [fp, #4]
   15170:	ldr	r2, [fp, #8]
   15174:	cmp	r3, r2
   15178:	bcs	15264 <close_stdout@@Base+0x2c70>
   1517c:	add	r2, r3, #1
   15180:	str	r2, [fp, #4]
   15184:	ldrb	r0, [r3]
   15188:	cmp	r0, #32
   1518c:	beq	1516c <close_stdout@@Base+0x2b78>
   15190:	sub	r3, r0, #9
   15194:	cmp	r3, #1
   15198:	bls	1516c <close_stdout@@Base+0x2b78>
   1519c:	cmp	r0, #35	; 0x23
   151a0:	beq	15278 <close_stdout@@Base+0x2c84>
   151a4:	mov	r1, fp
   151a8:	bl	112a4 <ungetc@plt>
   151ac:	mov	r0, fp
   151b0:	ldr	r1, [sp, #12]
   151b4:	mov	r2, sl
   151b8:	mov	r3, r9
   151bc:	bl	112d4 <fscanf@plt>
   151c0:	cmp	r0, #1
   151c4:	ble	152a8 <close_stdout@@Base+0x2cb4>
   151c8:	mov	r0, sl
   151cc:	bl	1128c <strlen@plt>
   151d0:	str	r0, [sp, #8]
   151d4:	mov	r0, r9
   151d8:	bl	1128c <strlen@plt>
   151dc:	cmp	r8, #0
   151e0:	mov	r2, r0
   151e4:	bne	1530c <close_stdout@@Base+0x2d18>
   151e8:	ldr	r3, [sp, #8]
   151ec:	str	r2, [sp]
   151f0:	add	r8, r0, r3
   151f4:	add	r0, r8, #3
   151f8:	add	r8, r8, #2
   151fc:	bl	1122c <malloc@plt>
   15200:	ldr	r2, [sp]
   15204:	mov	r3, r0
   15208:	cmp	r3, #0
   1520c:	beq	15370 <close_stdout@@Base+0x2d7c>
   15210:	ldr	r0, [sp, #8]
   15214:	movw	r1, #65534	; 0xfffe
   15218:	movt	r1, #65535	; 0xffff
   1521c:	rsb	r2, r2, r8
   15220:	rsb	r1, r0, r1
   15224:	stm	sp, {r2, r3}
   15228:	add	r0, r1, r2
   1522c:	mov	r1, sl
   15230:	add	r0, r3, r0
   15234:	mov	r4, r3
   15238:	bl	111e4 <strcpy@plt>
   1523c:	ldr	r2, [sp]
   15240:	ldr	r3, [sp, #4]
   15244:	mov	r1, r9
   15248:	sub	r0, r2, #1
   1524c:	add	r0, r3, r0
   15250:	bl	111e4 <strcpy@plt>
   15254:	ldr	r3, [fp, #4]
   15258:	ldr	r2, [fp, #8]
   1525c:	cmp	r3, r2
   15260:	bcc	1517c <close_stdout@@Base+0x2b88>
   15264:	mov	r0, fp
   15268:	bl	1131c <__uflow@plt>
   1526c:	cmn	r0, #1
   15270:	beq	152a8 <close_stdout@@Base+0x2cb4>
   15274:	b	15188 <close_stdout@@Base+0x2b94>
   15278:	ldr	r3, [fp, #4]
   1527c:	ldr	r2, [fp, #8]
   15280:	cmp	r3, r2
   15284:	bcs	1538c <close_stdout@@Base+0x2d98>
   15288:	add	r2, r3, #1
   1528c:	str	r2, [fp, #4]
   15290:	ldrb	r0, [r3]
   15294:	cmp	r0, #10
   15298:	cmnne	r0, #1
   1529c:	bne	15278 <close_stdout@@Base+0x2c84>
   152a0:	cmn	r0, #1
   152a4:	bne	1516c <close_stdout@@Base+0x2b78>
   152a8:	mov	r0, fp
   152ac:	bl	14d90 <close_stdout@@Base+0x279c>
   152b0:	cmp	r8, #0
   152b4:	beq	15300 <close_stdout@@Base+0x2d0c>
   152b8:	mov	r3, #0
   152bc:	strb	r3, [r4, r8]
   152c0:	mov	r0, r7
   152c4:	bl	11130 <free@plt>
   152c8:	ldr	r3, [pc, #236]	; 153bc <close_stdout@@Base+0x2dc8>
   152cc:	add	r3, pc, r3
   152d0:	str	r4, [r3]
   152d4:	b	14ff8 <close_stdout@@Base+0x2a04>
   152d8:	ldr	r8, [pc, #224]	; 153c0 <close_stdout@@Base+0x2dcc>
   152dc:	mov	r3, #7
   152e0:	mov	sl, #8
   152e4:	add	r8, pc, r8
   152e8:	ldrb	r3, [r8, r3]
   152ec:	cmp	r3, #47	; 0x2f
   152f0:	movne	r9, #1
   152f4:	movne	fp, r9
   152f8:	bne	150dc <close_stdout@@Base+0x2ae8>
   152fc:	b	150d4 <close_stdout@@Base+0x2ae0>
   15300:	ldr	r4, [pc, #188]	; 153c4 <close_stdout@@Base+0x2dd0>
   15304:	add	r4, pc, r4
   15308:	b	152c0 <close_stdout@@Base+0x2ccc>
   1530c:	ldr	r0, [sp, #8]
   15310:	str	r2, [sp]
   15314:	add	r3, r0, r2
   15318:	mov	r0, r4
   1531c:	add	r8, r3, r8
   15320:	add	r1, r8, #3
   15324:	add	r8, r8, #2
   15328:	bl	1119c <realloc@plt>
   1532c:	ldr	r2, [sp]
   15330:	mov	r3, r0
   15334:	b	15208 <close_stdout@@Base+0x2c14>
   15338:	ldr	r4, [pc, #136]	; 153c8 <close_stdout@@Base+0x2dd4>
   1533c:	add	r4, pc, r4
   15340:	b	152c8 <close_stdout@@Base+0x2cd4>
   15344:	ldr	r8, [pc, #128]	; 153cc <close_stdout@@Base+0x2dd8>
   15348:	mov	r3, #7
   1534c:	mov	sl, #8
   15350:	add	r8, pc, r8
   15354:	b	152e8 <close_stdout@@Base+0x2cf4>
   15358:	ldr	r4, [pc, #112]	; 153d0 <close_stdout@@Base+0x2ddc>
   1535c:	mov	r0, r8
   15360:	add	r4, pc, r4
   15364:	bl	11394 <close@plt>
   15368:	b	152c0 <close_stdout@@Base+0x2ccc>
   1536c:	bl	11190 <__stack_chk_fail@plt>
   15370:	mov	r0, r4
   15374:	ldr	r4, [pc, #88]	; 153d4 <close_stdout@@Base+0x2de0>
   15378:	bl	11130 <free@plt>
   1537c:	mov	r0, fp
   15380:	add	r4, pc, r4
   15384:	bl	14d90 <close_stdout@@Base+0x279c>
   15388:	b	152c0 <close_stdout@@Base+0x2ccc>
   1538c:	mov	r0, fp
   15390:	bl	1131c <__uflow@plt>
   15394:	b	15294 <close_stdout@@Base+0x2ca0>
   15398:	andeq	r2, r1, r4, lsr r0
   1539c:	andeq	r0, r0, ip, lsl #2
   153a0:	strdeq	r2, [r1], -ip
   153a4:	andeq	r0, r0, ip, asr #28
   153a8:	andeq	r0, r0, r0, lsr #18
   153ac:	andeq	r0, r0, r4, lsr #28
   153b0:	andeq	r0, r0, ip, asr #27
   153b4:	andeq	r0, r0, r0, ror r5
   153b8:	andeq	r0, r0, r8, lsl #27
   153bc:	andeq	r2, r1, ip, lsl r0
   153c0:	ldrdeq	r0, [r0], -r4
   153c4:			; <UNDEFINED> instruction: 0x000006b8
   153c8:	andeq	r0, r0, r0, lsl #13
   153cc:	andeq	r0, r0, r8, ror #22
   153d0:	andeq	r0, r0, ip, asr r6
   153d4:	andeq	r0, r0, ip, lsr r6
   153d8:	subs	r2, r1, #1
   153dc:	bxeq	lr
   153e0:	bcc	155b8 <close_stdout@@Base+0x2fc4>
   153e4:	cmp	r0, r1
   153e8:	bls	1559c <close_stdout@@Base+0x2fa8>
   153ec:	tst	r1, r2
   153f0:	beq	155a8 <close_stdout@@Base+0x2fb4>
   153f4:	clz	r3, r0
   153f8:	clz	r2, r1
   153fc:	sub	r3, r2, r3
   15400:	rsbs	r3, r3, #31
   15404:	addne	r3, r3, r3, lsl #1
   15408:	mov	r2, #0
   1540c:	addne	pc, pc, r3, lsl #2
   15410:	nop	{0}
   15414:	cmp	r0, r1, lsl #31
   15418:	adc	r2, r2, r2
   1541c:	subcs	r0, r0, r1, lsl #31
   15420:	cmp	r0, r1, lsl #30
   15424:	adc	r2, r2, r2
   15428:	subcs	r0, r0, r1, lsl #30
   1542c:	cmp	r0, r1, lsl #29
   15430:	adc	r2, r2, r2
   15434:	subcs	r0, r0, r1, lsl #29
   15438:	cmp	r0, r1, lsl #28
   1543c:	adc	r2, r2, r2
   15440:	subcs	r0, r0, r1, lsl #28
   15444:	cmp	r0, r1, lsl #27
   15448:	adc	r2, r2, r2
   1544c:	subcs	r0, r0, r1, lsl #27
   15450:	cmp	r0, r1, lsl #26
   15454:	adc	r2, r2, r2
   15458:	subcs	r0, r0, r1, lsl #26
   1545c:	cmp	r0, r1, lsl #25
   15460:	adc	r2, r2, r2
   15464:	subcs	r0, r0, r1, lsl #25
   15468:	cmp	r0, r1, lsl #24
   1546c:	adc	r2, r2, r2
   15470:	subcs	r0, r0, r1, lsl #24
   15474:	cmp	r0, r1, lsl #23
   15478:	adc	r2, r2, r2
   1547c:	subcs	r0, r0, r1, lsl #23
   15480:	cmp	r0, r1, lsl #22
   15484:	adc	r2, r2, r2
   15488:	subcs	r0, r0, r1, lsl #22
   1548c:	cmp	r0, r1, lsl #21
   15490:	adc	r2, r2, r2
   15494:	subcs	r0, r0, r1, lsl #21
   15498:	cmp	r0, r1, lsl #20
   1549c:	adc	r2, r2, r2
   154a0:	subcs	r0, r0, r1, lsl #20
   154a4:	cmp	r0, r1, lsl #19
   154a8:	adc	r2, r2, r2
   154ac:	subcs	r0, r0, r1, lsl #19
   154b0:	cmp	r0, r1, lsl #18
   154b4:	adc	r2, r2, r2
   154b8:	subcs	r0, r0, r1, lsl #18
   154bc:	cmp	r0, r1, lsl #17
   154c0:	adc	r2, r2, r2
   154c4:	subcs	r0, r0, r1, lsl #17
   154c8:	cmp	r0, r1, lsl #16
   154cc:	adc	r2, r2, r2
   154d0:	subcs	r0, r0, r1, lsl #16
   154d4:	cmp	r0, r1, lsl #15
   154d8:	adc	r2, r2, r2
   154dc:	subcs	r0, r0, r1, lsl #15
   154e0:	cmp	r0, r1, lsl #14
   154e4:	adc	r2, r2, r2
   154e8:	subcs	r0, r0, r1, lsl #14
   154ec:	cmp	r0, r1, lsl #13
   154f0:	adc	r2, r2, r2
   154f4:	subcs	r0, r0, r1, lsl #13
   154f8:	cmp	r0, r1, lsl #12
   154fc:	adc	r2, r2, r2
   15500:	subcs	r0, r0, r1, lsl #12
   15504:	cmp	r0, r1, lsl #11
   15508:	adc	r2, r2, r2
   1550c:	subcs	r0, r0, r1, lsl #11
   15510:	cmp	r0, r1, lsl #10
   15514:	adc	r2, r2, r2
   15518:	subcs	r0, r0, r1, lsl #10
   1551c:	cmp	r0, r1, lsl #9
   15520:	adc	r2, r2, r2
   15524:	subcs	r0, r0, r1, lsl #9
   15528:	cmp	r0, r1, lsl #8
   1552c:	adc	r2, r2, r2
   15530:	subcs	r0, r0, r1, lsl #8
   15534:	cmp	r0, r1, lsl #7
   15538:	adc	r2, r2, r2
   1553c:	subcs	r0, r0, r1, lsl #7
   15540:	cmp	r0, r1, lsl #6
   15544:	adc	r2, r2, r2
   15548:	subcs	r0, r0, r1, lsl #6
   1554c:	cmp	r0, r1, lsl #5
   15550:	adc	r2, r2, r2
   15554:	subcs	r0, r0, r1, lsl #5
   15558:	cmp	r0, r1, lsl #4
   1555c:	adc	r2, r2, r2
   15560:	subcs	r0, r0, r1, lsl #4
   15564:	cmp	r0, r1, lsl #3
   15568:	adc	r2, r2, r2
   1556c:	subcs	r0, r0, r1, lsl #3
   15570:	cmp	r0, r1, lsl #2
   15574:	adc	r2, r2, r2
   15578:	subcs	r0, r0, r1, lsl #2
   1557c:	cmp	r0, r1, lsl #1
   15580:	adc	r2, r2, r2
   15584:	subcs	r0, r0, r1, lsl #1
   15588:	cmp	r0, r1
   1558c:	adc	r2, r2, r2
   15590:	subcs	r0, r0, r1
   15594:	mov	r0, r2
   15598:	bx	lr
   1559c:	moveq	r0, #1
   155a0:	movne	r0, #0
   155a4:	bx	lr
   155a8:	clz	r2, r1
   155ac:	rsb	r2, r2, #31
   155b0:	lsr	r0, r0, r2
   155b4:	bx	lr
   155b8:	cmp	r0, #0
   155bc:	mvnne	r0, #0
   155c0:	b	155e4 <close_stdout@@Base+0x2ff0>
   155c4:	cmp	r1, #0
   155c8:	beq	155b8 <close_stdout@@Base+0x2fc4>
   155cc:	push	{r0, r1, lr}
   155d0:	bl	153d8 <close_stdout@@Base+0x2de4>
   155d4:	pop	{r1, r2, lr}
   155d8:	mul	r3, r2, r0
   155dc:	sub	r1, r1, r3
   155e0:	bx	lr
   155e4:	push	{r1, lr}
   155e8:	mov	r0, #8
   155ec:	bl	110dc <raise@plt>
   155f0:	pop	{r1, pc}
   155f4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   155f8:	mov	r7, r0
   155fc:	ldr	r6, [pc, #76]	; 15650 <close_stdout@@Base+0x305c>
   15600:	mov	r8, r1
   15604:	ldr	r5, [pc, #72]	; 15654 <close_stdout@@Base+0x3060>
   15608:	mov	r9, r2
   1560c:	add	r6, pc, r6
   15610:	bl	11098 <fdopen@plt-0x20>
   15614:	add	r5, pc, r5
   15618:	rsb	r6, r5, r6
   1561c:	asrs	r6, r6, #2
   15620:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   15624:	sub	r5, r5, #4
   15628:	mov	r4, #0
   1562c:	add	r4, r4, #1
   15630:	ldr	r3, [r5, #4]!
   15634:	mov	r0, r7
   15638:	mov	r1, r8
   1563c:	mov	r2, r9
   15640:	blx	r3
   15644:	cmp	r4, r6
   15648:	bne	1562c <close_stdout@@Base+0x3038>
   1564c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15650:	andeq	r1, r1, r8, asr r8
   15654:	andeq	r1, r1, ip, asr #16
   15658:	bx	lr
   1565c:	ldr	r3, [pc, #28]	; 15680 <close_stdout@@Base+0x308c>
   15660:	mov	r1, #0
   15664:	ldr	r2, [pc, #24]	; 15684 <close_stdout@@Base+0x3090>
   15668:	add	r3, pc, r3
   1566c:	ldr	r3, [r3, r2]
   15670:	cmp	r3, #0
   15674:	ldrne	r2, [r3]
   15678:	moveq	r2, r3
   1567c:	b	112bc <__cxa_atexit@plt>
   15680:	muleq	r1, r0, r9
   15684:	andeq	r0, r0, r4, lsr #2

Disassembly of section .fini:

00015688 <.fini>:
   15688:	push	{r3, lr}
   1568c:	pop	{r3, pc}
