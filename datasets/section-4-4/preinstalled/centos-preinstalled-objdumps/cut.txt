
centos-preinstalled/cut:     file format elf32-littlearm


Disassembly of section .init:

000111e4 <.init>:
   111e4:	push	{r3, lr}
   111e8:	bl	12190 <__assert_fail@plt+0xc50>
   111ec:	pop	{r3, pc}

Disassembly of section .plt:

000111f0 <fdopen@plt-0x14>:
   111f0:	push	{lr}		; (str lr, [sp, #-4]!)
   111f4:	ldr	lr, [pc, #4]	; 11200 <fdopen@plt-0x4>
   111f8:	add	lr, pc, lr
   111fc:	ldr	pc, [lr, #8]!
   11200:	andeq	r6, r1, r0, lsl #28

00011204 <fdopen@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #90112	; 0x16000
   1120c:	ldr	pc, [ip, #3584]!	; 0xe00

00011210 <calloc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #90112	; 0x16000
   11218:	ldr	pc, [ip, #3576]!	; 0xdf8

0001121c <fputs_unlocked@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #90112	; 0x16000
   11224:	ldr	pc, [ip, #3568]!	; 0xdf0

00011228 <strstr@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #90112	; 0x16000
   11230:	ldr	pc, [ip, #3560]!	; 0xde8

00011234 <raise@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #90112	; 0x16000
   1123c:	ldr	pc, [ip, #3552]!	; 0xde0

00011240 <strcmp@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #90112	; 0x16000
   11248:	ldr	pc, [ip, #3544]!	; 0xdd8

0001124c <posix_fadvise64@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #90112	; 0x16000
   11254:	ldr	pc, [ip, #3536]!	; 0xdd0

00011258 <fflush@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #90112	; 0x16000
   11260:	ldr	pc, [ip, #3528]!	; 0xdc8

00011264 <memmove@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #90112	; 0x16000
   1126c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011270 <__memmove_chk@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #90112	; 0x16000
   11278:	ldr	pc, [ip, #3512]!	; 0xdb8

0001127c <free@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #90112	; 0x16000
   11284:	ldr	pc, [ip, #3504]!	; 0xdb0

00011288 <ferror@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #90112	; 0x16000
   11290:	ldr	pc, [ip, #3496]!	; 0xda8

00011294 <_exit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #90112	; 0x16000
   1129c:	ldr	pc, [ip, #3488]!	; 0xda0

000112a0 <memcpy@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #90112	; 0x16000
   112a8:	ldr	pc, [ip, #3480]!	; 0xd98

000112ac <mbsinit@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #90112	; 0x16000
   112b4:	ldr	pc, [ip, #3472]!	; 0xd90

000112b8 <fwrite_unlocked@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #90112	; 0x16000
   112c0:	ldr	pc, [ip, #3464]!	; 0xd88

000112c4 <memcmp@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #90112	; 0x16000
   112cc:	ldr	pc, [ip, #3456]!	; 0xd80

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #90112	; 0x16000
   112d8:	ldr	pc, [ip, #3448]!	; 0xd78

000112dc <__stack_chk_fail@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #90112	; 0x16000
   112e4:	ldr	pc, [ip, #3440]!	; 0xd70

000112e8 <realloc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #90112	; 0x16000
   112f0:	ldr	pc, [ip, #3432]!	; 0xd68

000112f4 <textdomain@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #90112	; 0x16000
   112fc:	ldr	pc, [ip, #3424]!	; 0xd60

00011300 <__strndup@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #90112	; 0x16000
   11308:	ldr	pc, [ip, #3416]!	; 0xd58

0001130c <iswprint@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #90112	; 0x16000
   11314:	ldr	pc, [ip, #3408]!	; 0xd50

00011318 <__memcpy_chk@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #90112	; 0x16000
   11320:	ldr	pc, [ip, #3400]!	; 0xd48

00011324 <fwrite@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #90112	; 0x16000
   1132c:	ldr	pc, [ip, #3392]!	; 0xd40

00011330 <lseek64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #90112	; 0x16000
   11338:	ldr	pc, [ip, #3384]!	; 0xd38

0001133c <__ctype_get_mb_cur_max@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #90112	; 0x16000
   11344:	ldr	pc, [ip, #3376]!	; 0xd30

00011348 <strcpy@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #90112	; 0x16000
   11350:	ldr	pc, [ip, #3368]!	; 0xd28

00011354 <__fpending@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #90112	; 0x16000
   1135c:	ldr	pc, [ip, #3360]!	; 0xd20

00011360 <mbrtowc@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #90112	; 0x16000
   11368:	ldr	pc, [ip, #3352]!	; 0xd18

0001136c <error@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #90112	; 0x16000
   11374:	ldr	pc, [ip, #3344]!	; 0xd10

00011378 <open64@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #90112	; 0x16000
   11380:	ldr	pc, [ip, #3336]!	; 0xd08

00011384 <getenv@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #90112	; 0x16000
   1138c:	ldr	pc, [ip, #3328]!	; 0xd00

00011390 <malloc@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #90112	; 0x16000
   11398:	ldr	pc, [ip, #3320]!	; 0xcf8

0001139c <__libc_start_main@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #90112	; 0x16000
   113a4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113a8 <__freading@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #90112	; 0x16000
   113b0:	ldr	pc, [ip, #3304]!	; 0xce8

000113b4 <__gmon_start__@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #90112	; 0x16000
   113bc:	ldr	pc, [ip, #3296]!	; 0xce0

000113c0 <getopt_long@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #90112	; 0x16000
   113c8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113cc <__ctype_b_loc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #90112	; 0x16000
   113d4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113d8 <exit@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #90112	; 0x16000
   113e0:	ldr	pc, [ip, #3272]!	; 0xcc8

000113e4 <strlen@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #90112	; 0x16000
   113ec:	ldr	pc, [ip, #3264]!	; 0xcc0

000113f0 <ungetc@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #90112	; 0x16000
   113f8:	ldr	pc, [ip, #3256]!	; 0xcb8

000113fc <__errno_location@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #90112	; 0x16000
   11404:	ldr	pc, [ip, #3248]!	; 0xcb0

00011408 <__cxa_atexit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #90112	; 0x16000
   11410:	ldr	pc, [ip, #3240]!	; 0xca8

00011414 <memset@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #90112	; 0x16000
   1141c:	ldr	pc, [ip, #3232]!	; 0xca0

00011420 <fscanf@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #90112	; 0x16000
   11428:	ldr	pc, [ip, #3224]!	; 0xc98

0001142c <fgetc@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #90112	; 0x16000
   11434:	ldr	pc, [ip, #3216]!	; 0xc90

00011438 <__printf_chk@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #90112	; 0x16000
   11440:	ldr	pc, [ip, #3208]!	; 0xc88

00011444 <fileno@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #90112	; 0x16000
   1144c:	ldr	pc, [ip, #3200]!	; 0xc80

00011450 <__fprintf_chk@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #90112	; 0x16000
   11458:	ldr	pc, [ip, #3192]!	; 0xc78

0001145c <memchr@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #90112	; 0x16000
   11464:	ldr	pc, [ip, #3184]!	; 0xc70

00011468 <fclose@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #90112	; 0x16000
   11470:	ldr	pc, [ip, #3176]!	; 0xc68

00011474 <strnlen@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #90112	; 0x16000
   1147c:	ldr	pc, [ip, #3168]!	; 0xc60

00011480 <fseeko64@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #90112	; 0x16000
   11488:	ldr	pc, [ip, #3160]!	; 0xc58

0001148c <__fread_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #90112	; 0x16000
   11494:	ldr	pc, [ip, #3152]!	; 0xc50

00011498 <__uflow@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #90112	; 0x16000
   114a0:	ldr	pc, [ip, #3144]!	; 0xc48

000114a4 <__overflow@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #90112	; 0x16000
   114ac:	ldr	pc, [ip, #3136]!	; 0xc40

000114b0 <setlocale@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #90112	; 0x16000
   114b8:	ldr	pc, [ip, #3128]!	; 0xc38

000114bc <strrchr@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #90112	; 0x16000
   114c4:	ldr	pc, [ip, #3120]!	; 0xc30

000114c8 <nl_langinfo@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #90112	; 0x16000
   114d0:	ldr	pc, [ip, #3112]!	; 0xc28

000114d4 <clearerr_unlocked@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #90112	; 0x16000
   114dc:	ldr	pc, [ip, #3104]!	; 0xc20

000114e0 <fopen64@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #90112	; 0x16000
   114e8:	ldr	pc, [ip, #3096]!	; 0xc18

000114ec <qsort@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #90112	; 0x16000
   114f4:	ldr	pc, [ip, #3088]!	; 0xc10

000114f8 <bindtextdomain@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #90112	; 0x16000
   11500:	ldr	pc, [ip, #3080]!	; 0xc08

00011504 <fread_unlocked@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #90112	; 0x16000
   1150c:	ldr	pc, [ip, #3072]!	; 0xc00

00011510 <strncmp@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #90112	; 0x16000
   11518:	ldr	pc, [ip, #3064]!	; 0xbf8

0001151c <abort@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #90112	; 0x16000
   11524:	ldr	pc, [ip, #3056]!	; 0xbf0

00011528 <close@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #90112	; 0x16000
   11530:	ldr	pc, [ip, #3048]!	; 0xbe8

00011534 <strspn@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #90112	; 0x16000
   1153c:	ldr	pc, [ip, #3040]!	; 0xbe0

00011540 <__assert_fail@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #90112	; 0x16000
   11548:	ldr	pc, [ip, #3032]!	; 0xbd8

Disassembly of section .text:

0001154c <close_stdout@@Base-0x2508>:
   1154c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11550:	sub	sp, sp, #92	; 0x5c
   11554:	ldr	r5, [pc, #2820]	; 12060 <__assert_fail@plt+0xb20>
   11558:	mov	r6, r1
   1155c:	ldr	r3, [pc, #2816]	; 12064 <__assert_fail@plt+0xb24>
   11560:	add	r5, pc, r5
   11564:	str	r0, [sp, #24]
   11568:	ldr	r0, [r1]
   1156c:	ldr	r3, [r5, r3]
   11570:	ldr	r4, [pc, #2800]	; 12068 <__assert_fail@plt+0xb28>
   11574:	ldr	r7, [pc, #2800]	; 1206c <__assert_fail@plt+0xb2c>
   11578:	ldr	r3, [r3]
   1157c:	add	r4, pc, r4
   11580:	ldr	fp, [pc, #2792]	; 12070 <__assert_fail@plt+0xb30>
   11584:	add	r7, pc, r7
   11588:	ldr	r9, [pc, #2788]	; 12074 <__assert_fail@plt+0xb34>
   1158c:	add	r8, r7, #44	; 0x2c
   11590:	str	r3, [sp, #84]	; 0x54
   11594:	bl	14110 <close_stdout@@Base+0x6bc>
   11598:	ldr	r1, [pc, #2776]	; 12078 <__assert_fail@plt+0xb38>
   1159c:	mov	r0, #6
   115a0:	ldr	sl, [pc, #2772]	; 1207c <__assert_fail@plt+0xb3c>
   115a4:	add	fp, pc, fp
   115a8:	add	r1, pc, r1
   115ac:	add	r9, pc, r9
   115b0:	bl	114b0 <setlocale@plt>
   115b4:	ldr	r1, [pc, #2756]	; 12080 <__assert_fail@plt+0xb40>
   115b8:	mov	r0, r4
   115bc:	add	sl, pc, sl
   115c0:	add	r1, pc, r1
   115c4:	bl	114f8 <bindtextdomain@plt>
   115c8:	mov	r0, r4
   115cc:	bl	112f4 <textdomain@plt>
   115d0:	ldr	r3, [pc, #2732]	; 12084 <__assert_fail@plt+0xb44>
   115d4:	ldr	r2, [pc, #2732]	; 12088 <__assert_fail@plt+0xb48>
   115d8:	add	r2, pc, r2
   115dc:	str	r2, [sp, #28]
   115e0:	ldr	r0, [r5, r3]
   115e4:	bl	16c64 <close_stdout@@Base+0x3210>
   115e8:	ldr	r2, [pc, #2716]	; 1208c <__assert_fail@plt+0xb4c>
   115ec:	mov	r3, #0
   115f0:	str	r3, [sp, #32]
   115f4:	add	r2, pc, r2
   115f8:	str	r3, [r2, #56]	; 0x38
   115fc:	strb	r3, [r2, #28]
   11600:	strb	r3, [r2, #40]	; 0x28
   11604:	strb	r3, [r2, #48]	; 0x30
   11608:	ldr	r2, [pc, #2688]	; 12090 <__assert_fail@plt+0xb50>
   1160c:	mov	r4, #0
   11610:	ldr	r3, [pc, #2684]	; 12094 <__assert_fail@plt+0xb54>
   11614:	mov	r1, r6
   11618:	ldr	r0, [sp, #24]
   1161c:	add	r2, pc, r2
   11620:	str	r4, [sp]
   11624:	add	r3, pc, r3
   11628:	bl	113c0 <getopt_long@plt>
   1162c:	cmn	r0, #1
   11630:	beq	11960 <__assert_fail@plt+0x420>
   11634:	cmp	r0, #100	; 0x64
   11638:	beq	11824 <__assert_fail@plt+0x2e4>
   1163c:	ble	11670 <__assert_fail@plt+0x130>
   11640:	cmp	r0, #115	; 0x73
   11644:	beq	11808 <__assert_fail@plt+0x2c8>
   11648:	bgt	116bc <__assert_fail@plt+0x17c>
   1164c:	cmp	r0, #102	; 0x66
   11650:	beq	1175c <__assert_fail@plt+0x21c>
   11654:	cmp	r0, #110	; 0x6e
   11658:	bne	11800 <__assert_fail@plt+0x2c0>
   1165c:	ldr	r3, [pc, #2612]	; 12098 <__assert_fail@plt+0xb58>
   11660:	mov	r2, #1
   11664:	add	r3, pc, r3
   11668:	str	r2, [r3, #60]	; 0x3c
   1166c:	b	11608 <__assert_fail@plt+0xc8>
   11670:	cmn	r0, #2
   11674:	beq	1181c <__assert_fail@plt+0x2dc>
   11678:	ble	1177c <__assert_fail@plt+0x23c>
   1167c:	cmp	r0, #98	; 0x62
   11680:	beq	1173c <__assert_fail@plt+0x1fc>
   11684:	cmp	r0, #99	; 0x63
   11688:	bne	11800 <__assert_fail@plt+0x2c0>
   1168c:	ldr	r3, [pc, #2568]	; 1209c <__assert_fail@plt+0xb5c>
   11690:	add	r3, pc, r3
   11694:	ldr	r2, [r3, #56]	; 0x38
   11698:	cmp	r2, #0
   1169c:	bne	117dc <__assert_fail@plt+0x29c>
   116a0:	ldr	r2, [pc, #2552]	; 120a0 <__assert_fail@plt+0xb60>
   116a4:	mov	r1, #2
   116a8:	str	r1, [r3, #56]	; 0x38
   116ac:	ldr	r3, [r5, r2]
   116b0:	ldr	r3, [r3]
   116b4:	str	r3, [sp, #36]	; 0x24
   116b8:	b	11608 <__assert_fail@plt+0xc8>
   116bc:	cmp	r0, #256	; 0x100
   116c0:	beq	116e4 <__assert_fail@plt+0x1a4>
   116c4:	movw	r3, #257	; 0x101
   116c8:	cmp	r0, r3
   116cc:	bne	11800 <__assert_fail@plt+0x2c0>
   116d0:	ldr	r3, [pc, #2508]	; 120a4 <__assert_fail@plt+0xb64>
   116d4:	mov	r2, #1
   116d8:	add	r3, pc, r3
   116dc:	strb	r2, [r3, #64]	; 0x40
   116e0:	b	11608 <__assert_fail@plt+0xc8>
   116e4:	ldr	r2, [pc, #2492]	; 120a8 <__assert_fail@plt+0xb68>
   116e8:	mov	r0, #1
   116ec:	ldr	r3, [pc, #2476]	; 120a0 <__assert_fail@plt+0xb60>
   116f0:	add	r2, pc, r2
   116f4:	strb	r0, [r2, #16]
   116f8:	ldr	r3, [r5, r3]
   116fc:	ldr	r4, [r3]
   11700:	ldrb	r3, [r4]
   11704:	cmp	r3, #0
   11708:	moveq	r2, r0
   1170c:	beq	1171c <__assert_fail@plt+0x1dc>
   11710:	mov	r0, r4
   11714:	bl	113e4 <strlen@plt>
   11718:	mov	r2, r0
   1171c:	ldr	r3, [pc, #2440]	; 120ac <__assert_fail@plt+0xb6c>
   11720:	mov	r0, r4
   11724:	add	r3, pc, r3
   11728:	mov	r4, r3
   1172c:	str	r2, [r3, #24]
   11730:	bl	16104 <close_stdout@@Base+0x26b0>
   11734:	str	r0, [r4, #20]
   11738:	b	11608 <__assert_fail@plt+0xc8>
   1173c:	ldr	r3, [pc, #2412]	; 120b0 <__assert_fail@plt+0xb70>
   11740:	add	r3, pc, r3
   11744:	ldr	r2, [r3, #56]	; 0x38
   11748:	cmp	r2, #0
   1174c:	bne	117dc <__assert_fail@plt+0x29c>
   11750:	ldr	r2, [pc, #2376]	; 120a0 <__assert_fail@plt+0xb60>
   11754:	mov	r1, #1
   11758:	b	116a8 <__assert_fail@plt+0x168>
   1175c:	ldr	r3, [pc, #2384]	; 120b4 <__assert_fail@plt+0xb74>
   11760:	add	r3, pc, r3
   11764:	ldr	r2, [r3, #56]	; 0x38
   11768:	cmp	r2, #0
   1176c:	bne	117dc <__assert_fail@plt+0x29c>
   11770:	ldr	r2, [pc, #2344]	; 120a0 <__assert_fail@plt+0xb60>
   11774:	mov	r1, #3
   11778:	b	116a8 <__assert_fail@plt+0x168>
   1177c:	cmn	r0, #3
   11780:	bne	11800 <__assert_fail@plt+0x2c0>
   11784:	ldr	r2, [pc, #2348]	; 120b8 <__assert_fail@plt+0xb78>
   11788:	ldr	r3, [pc, #2348]	; 120bc <__assert_fail@plt+0xb7c>
   1178c:	ldr	r1, [pc, #2348]	; 120c0 <__assert_fail@plt+0xb80>
   11790:	ldr	r0, [r5, r2]
   11794:	ldr	r3, [r5, r3]
   11798:	add	r1, pc, r1
   1179c:	ldr	r2, [pc, #2336]	; 120c4 <__assert_fail@plt+0xb84>
   117a0:	ldr	r0, [r0]
   117a4:	ldr	r3, [r3]
   117a8:	add	r2, pc, r2
   117ac:	ldr	ip, [pc, #2324]	; 120c8 <__assert_fail@plt+0xb88>
   117b0:	stmib	sp, {r1, r2}
   117b4:	ldr	r1, [pc, #2320]	; 120cc <__assert_fail@plt+0xb8c>
   117b8:	add	ip, pc, ip
   117bc:	ldr	r2, [pc, #2316]	; 120d0 <__assert_fail@plt+0xb90>
   117c0:	str	r4, [sp, #12]
   117c4:	add	r1, pc, r1
   117c8:	str	ip, [sp]
   117cc:	add	r2, pc, r2
   117d0:	bl	15dfc <close_stdout@@Base+0x23a8>
   117d4:	mov	r0, r4
   117d8:	bl	113d8 <exit@plt>
   117dc:	ldr	r1, [pc, #2288]	; 120d4 <__assert_fail@plt+0xb94>
   117e0:	mov	r0, #0
   117e4:	add	r1, pc, r1
   117e8:	mov	r2, #5
   117ec:	bl	112d0 <dcgettext@plt>
   117f0:	mov	r2, r0
   117f4:	mov	r0, #0
   117f8:	mov	r1, r0
   117fc:	bl	1136c <error@plt>
   11800:	mov	r0, #1
   11804:	bl	13770 <__assert_fail@plt+0x2230>
   11808:	ldr	r3, [pc, #2248]	; 120d8 <__assert_fail@plt+0xb98>
   1180c:	mov	r2, #1
   11810:	add	r3, pc, r3
   11814:	strb	r2, [r3, #28]
   11818:	b	11608 <__assert_fail@plt+0xc8>
   1181c:	mov	r0, r4
   11820:	bl	13770 <__assert_fail@plt+0x2230>
   11824:	bl	1133c <__ctype_get_mb_cur_max@plt>
   11828:	cmp	r0, #1
   1182c:	bls	11908 <__assert_fail@plt+0x3c8>
   11830:	ldr	r3, [pc, #2152]	; 120a0 <__assert_fail@plt+0xb60>
   11834:	mov	r1, #16
   11838:	str	r4, [sp, #56]	; 0x38
   1183c:	str	r4, [sp, #60]	; 0x3c
   11840:	ldr	r3, [r5, r3]
   11844:	str	r3, [sp, #32]
   11848:	ldr	r3, [r3]
   1184c:	mov	r0, r3
   11850:	str	r3, [sp, #20]
   11854:	bl	11474 <strnlen@plt>
   11858:	ldr	r3, [sp, #20]
   1185c:	mov	r1, r3
   11860:	add	r3, sp, #56	; 0x38
   11864:	mov	r2, r0
   11868:	mov	r0, r8
   1186c:	bl	11360 <mbrtowc@plt>
   11870:	ldr	r3, [pc, #2148]	; 120dc <__assert_fail@plt+0xb9c>
   11874:	ldr	r3, [r5, r3]
   11878:	add	r2, r0, #2
   1187c:	str	r0, [r3]
   11880:	cmp	r2, #1
   11884:	ldrls	r3, [r7, #52]	; 0x34
   11888:	addls	r3, r3, #1
   1188c:	strls	r3, [r7, #52]	; 0x34
   11890:	bls	11908 <__assert_fail@plt+0x3c8>
   11894:	cmp	r0, #0
   11898:	ldr	r2, [sl, #44]	; 0x2c
   1189c:	movne	ip, r0
   118a0:	moveq	ip, #1
   118a4:	cmp	r2, #0
   118a8:	str	ip, [r3]
   118ac:	beq	118c4 <__assert_fail@plt+0x384>
   118b0:	ldr	r2, [sp, #32]
   118b4:	ldr	r3, [r2]
   118b8:	ldrb	r3, [r3, ip]
   118bc:	cmp	r3, #0
   118c0:	bne	11eb4 <__assert_fail@plt+0x974>
   118c4:	ldr	r3, [sp, #32]
   118c8:	mov	r2, ip
   118cc:	add	r0, sp, #64	; 0x40
   118d0:	ldr	r4, [r3]
   118d4:	mov	r3, #17
   118d8:	str	ip, [sp, #20]
   118dc:	mov	r1, r4
   118e0:	bl	11318 <__memcpy_chk@plt>
   118e4:	ldr	ip, [sp, #20]
   118e8:	add	r2, sp, #88	; 0x58
   118ec:	mov	r3, #0
   118f0:	cmp	ip, #1
   118f4:	add	ip, r2, ip
   118f8:	ldreq	r2, [sp, #28]
   118fc:	strb	r3, [ip, #-24]	; 0xffffffe8
   11900:	ldrbeq	r3, [r4]
   11904:	strbeq	r3, [r2, #40]	; 0x28
   11908:	bl	1133c <__ctype_get_mb_cur_max@plt>
   1190c:	cmp	r0, #1
   11910:	bls	11920 <__assert_fail@plt+0x3e0>
   11914:	ldr	r3, [r9, #52]	; 0x34
   11918:	cmp	r3, #0
   1191c:	beq	11954 <__assert_fail@plt+0x414>
   11920:	ldr	r3, [pc, #1912]	; 120a0 <__assert_fail@plt+0xb60>
   11924:	ldr	r3, [r5, r3]
   11928:	ldr	r2, [r3]
   1192c:	ldrb	r3, [r2]
   11930:	cmp	r3, #0
   11934:	beq	11944 <__assert_fail@plt+0x404>
   11938:	ldrb	r2, [r2, #1]
   1193c:	cmp	r2, #0
   11940:	bne	11ec4 <__assert_fail@plt+0x984>
   11944:	strb	r3, [fp, #40]	; 0x28
   11948:	mov	r3, #1
   1194c:	str	r3, [sp, #32]
   11950:	b	11608 <__assert_fail@plt+0xc8>
   11954:	mov	r2, #1
   11958:	str	r2, [sp, #32]
   1195c:	b	11608 <__assert_fail@plt+0xc8>
   11960:	ldr	r3, [pc, #1912]	; 120e0 <__assert_fail@plt+0xba0>
   11964:	add	r3, pc, r3
   11968:	ldr	r7, [r3, #56]	; 0x38
   1196c:	cmp	r7, r4
   11970:	beq	119b4 <__assert_fail@plt+0x474>
   11974:	ldr	r2, [sp, #32]
   11978:	cmp	r2, #0
   1197c:	beq	119e0 <__assert_fail@plt+0x4a0>
   11980:	cmp	r7, #3
   11984:	beq	11a20 <__assert_fail@plt+0x4e0>
   11988:	ldr	r1, [pc, #1876]	; 120e4 <__assert_fail@plt+0xba4>
   1198c:	mov	r0, r4
   11990:	add	r1, pc, r1
   11994:	mov	r2, #5
   11998:	bl	112d0 <dcgettext@plt>
   1199c:	mov	r1, r4
   119a0:	mov	r2, r0
   119a4:	mov	r0, r4
   119a8:	bl	1136c <error@plt>
   119ac:	mov	r0, #1
   119b0:	bl	13770 <__assert_fail@plt+0x2230>
   119b4:	ldr	r1, [pc, #1836]	; 120e8 <__assert_fail@plt+0xba8>
   119b8:	mov	r2, #5
   119bc:	mov	r0, r7
   119c0:	add	r1, pc, r1
   119c4:	bl	112d0 <dcgettext@plt>
   119c8:	mov	r1, r7
   119cc:	mov	r2, r0
   119d0:	mov	r0, r7
   119d4:	bl	1136c <error@plt>
   119d8:	mov	r0, #1
   119dc:	bl	13770 <__assert_fail@plt+0x2230>
   119e0:	ldrb	r3, [r3, #28]
   119e4:	cmp	r3, #0
   119e8:	beq	11a20 <__assert_fail@plt+0x4e0>
   119ec:	cmp	r7, #3
   119f0:	beq	11a20 <__assert_fail@plt+0x4e0>
   119f4:	ldr	r1, [pc, #1776]	; 120ec <__assert_fail@plt+0xbac>
   119f8:	mov	r2, #5
   119fc:	ldr	r0, [sp, #32]
   11a00:	add	r1, pc, r1
   11a04:	bl	112d0 <dcgettext@plt>
   11a08:	mov	r2, r0
   11a0c:	ldr	r0, [sp, #32]
   11a10:	mov	r1, r0
   11a14:	bl	1136c <error@plt>
   11a18:	mov	r0, #1
   11a1c:	bl	13770 <__assert_fail@plt+0x2230>
   11a20:	mov	r3, #1
   11a24:	ldr	r8, [sp, #36]	; 0x24
   11a28:	str	r3, [sp, #28]
   11a2c:	movw	r3, #39321	; 0x9999
   11a30:	movt	r3, #6553	; 0x1999
   11a34:	str	r3, [sp, #36]	; 0x24
   11a38:	ldr	r3, [pc, #1712]	; 120f0 <__assert_fail@plt+0xbb0>
   11a3c:	mov	r4, #0
   11a40:	str	r5, [sp, #52]	; 0x34
   11a44:	mov	r9, r4
   11a48:	add	r3, pc, r3
   11a4c:	str	r3, [sp, #40]	; 0x28
   11a50:	ldr	r3, [pc, #1692]	; 120f4 <__assert_fail@plt+0xbb4>
   11a54:	mov	sl, r4
   11a58:	mov	fp, r4
   11a5c:	mov	r5, r4
   11a60:	add	r3, pc, r3
   11a64:	str	r6, [sp, #48]	; 0x30
   11a68:	str	r3, [sp, #44]	; 0x2c
   11a6c:	mov	r6, r8
   11a70:	ldrb	r7, [r8], #1
   11a74:	cmp	r7, #45	; 0x2d
   11a78:	beq	11b74 <__assert_fail@plt+0x634>
   11a7c:	cmp	r7, #44	; 0x2c
   11a80:	beq	11b08 <__assert_fail@plt+0x5c8>
   11a84:	bl	113cc <__ctype_b_loc@plt>
   11a88:	lsl	r1, r7, #1
   11a8c:	ldr	r0, [r0]
   11a90:	ldrh	r1, [r0, r1]
   11a94:	tst	r1, #1
   11a98:	bne	11b08 <__assert_fail@plt+0x5c8>
   11a9c:	cmp	r7, #0
   11aa0:	beq	11b08 <__assert_fail@plt+0x5c8>
   11aa4:	sub	r1, r7, #48	; 0x30
   11aa8:	cmp	r1, #9
   11aac:	bhi	11fec <__assert_fail@plt+0xaac>
   11ab0:	cmp	r5, #0
   11ab4:	beq	11be8 <__assert_fail@plt+0x6a8>
   11ab8:	ldr	r3, [sp, #44]	; 0x2c
   11abc:	ldr	r2, [r3, #68]	; 0x44
   11ac0:	cmp	r2, #0
   11ac4:	beq	11be8 <__assert_fail@plt+0x6a8>
   11ac8:	cmp	r9, #0
   11acc:	ldr	r3, [sp, #36]	; 0x24
   11ad0:	movne	sl, #1
   11ad4:	moveq	fp, #1
   11ad8:	cmp	r4, r3
   11adc:	bhi	11f6c <__assert_fail@plt+0xa2c>
   11ae0:	mov	r2, #10
   11ae4:	mla	r7, r2, r4, r7
   11ae8:	sub	r7, r7, #48	; 0x30
   11aec:	cmp	r4, r7
   11af0:	bhi	11f6c <__assert_fail@plt+0xa2c>
   11af4:	cmn	r7, #1
   11af8:	beq	11f6c <__assert_fail@plt+0xa2c>
   11afc:	mov	r4, r7
   11b00:	mov	r5, #1
   11b04:	b	11a6c <__assert_fail@plt+0x52c>
   11b08:	cmp	r9, #0
   11b0c:	beq	11bac <__assert_fail@plt+0x66c>
   11b10:	eor	fp, fp, #1
   11b14:	eor	r3, sl, #1
   11b18:	and	fp, r3, fp
   11b1c:	ands	fp, fp, #255	; 0xff
   11b20:	bne	11f5c <__assert_fail@plt+0xa1c>
   11b24:	cmp	sl, #0
   11b28:	beq	11bd8 <__assert_fail@plt+0x698>
   11b2c:	ldr	r2, [sp, #28]
   11b30:	cmp	r4, r2
   11b34:	bcc	1201c <__assert_fail@plt+0xadc>
   11b38:	mov	r1, r4
   11b3c:	ldr	r0, [sp, #28]
   11b40:	bl	122ac <__assert_fail@plt+0xd6c>
   11b44:	ldrb	r3, [r8, #-1]
   11b48:	cmp	r3, #0
   11b4c:	beq	11bf4 <__assert_fail@plt+0x6b4>
   11b50:	mov	r6, r8
   11b54:	ldrb	r7, [r8], #1
   11b58:	mov	r4, #0
   11b5c:	cmp	r7, #45	; 0x2d
   11b60:	mov	r5, r4
   11b64:	mov	r9, r4
   11b68:	mov	sl, r4
   11b6c:	mov	fp, r4
   11b70:	bne	11a7c <__assert_fail@plt+0x53c>
   11b74:	cmp	r9, #0
   11b78:	bne	11fec <__assert_fail@plt+0xaac>
   11b7c:	cmp	r4, #0
   11b80:	movne	r3, #0
   11b84:	andeq	r3, fp, #1
   11b88:	cmp	r3, #0
   11b8c:	bne	11f4c <__assert_fail@plt+0xa0c>
   11b90:	cmp	fp, #0
   11b94:	beq	11bc4 <__assert_fail@plt+0x684>
   11b98:	str	r4, [sp, #28]
   11b9c:	mov	r5, r9
   11ba0:	mov	r4, r9
   11ba4:	mov	r9, #1
   11ba8:	b	11a6c <__assert_fail@plt+0x52c>
   11bac:	cmp	r4, #0
   11bb0:	beq	11f4c <__assert_fail@plt+0xa0c>
   11bb4:	mov	r0, r4
   11bb8:	mov	r1, r4
   11bbc:	bl	122ac <__assert_fail@plt+0xd6c>
   11bc0:	b	11b44 <__assert_fail@plt+0x604>
   11bc4:	mov	r9, #1
   11bc8:	mov	r4, fp
   11bcc:	str	r9, [sp, #28]
   11bd0:	mov	r5, fp
   11bd4:	b	11a6c <__assert_fail@plt+0x52c>
   11bd8:	ldr	r0, [sp, #28]
   11bdc:	mvn	r1, #0
   11be0:	bl	122ac <__assert_fail@plt+0xd6c>
   11be4:	b	11b44 <__assert_fail@plt+0x604>
   11be8:	ldr	r2, [sp, #40]	; 0x28
   11bec:	str	r6, [r2, #68]	; 0x44
   11bf0:	b	11ac8 <__assert_fail@plt+0x588>
   11bf4:	ldr	r1, [pc, #1276]	; 120f8 <__assert_fail@plt+0xbb8>
   11bf8:	mov	r7, r3
   11bfc:	ldr	r3, [pc, #1272]	; 120fc <__assert_fail@plt+0xbbc>
   11c00:	mov	r2, #8
   11c04:	add	r1, pc, r1
   11c08:	ldr	r9, [pc, #1264]	; 12100 <__assert_fail@plt+0xbc0>
   11c0c:	str	r1, [sp, #28]
   11c10:	add	r3, pc, r3
   11c14:	ldr	r0, [r1, #8]
   11c18:	add	r9, pc, r9
   11c1c:	ldr	r1, [r1]
   11c20:	ldr	r6, [sp, #48]	; 0x30
   11c24:	ldr	r5, [sp, #52]	; 0x34
   11c28:	bl	114ec <qsort@plt>
   11c2c:	ldr	r8, [sp, #28]
   11c30:	mov	r1, r7
   11c34:	str	r6, [sp, #36]	; 0x24
   11c38:	str	r5, [sp, #40]	; 0x28
   11c3c:	ldr	r4, [r8]
   11c40:	cmp	r1, r4
   11c44:	bcs	11ce8 <__assert_fail@plt+0x7a8>
   11c48:	add	r5, r1, #1
   11c4c:	cmp	r5, r4
   11c50:	bcs	11cdc <__assert_fail@plt+0x79c>
   11c54:	ldr	r2, [r8, #8]
   11c58:	add	fp, r2, r7
   11c5c:	add	ip, r2, r5, lsl #3
   11c60:	ldr	r0, [r2, r5, lsl #3]
   11c64:	ldr	r3, [fp, #4]
   11c68:	cmp	r3, r0
   11c6c:	bcc	11cdc <__assert_fail@plt+0x79c>
   11c70:	movw	sl, #65534	; 0xfffe
   11c74:	movt	sl, #8191	; 0x1fff
   11c78:	rsb	sl, r1, sl
   11c7c:	add	r6, r7, #16
   11c80:	add	sl, sl, r4
   11c84:	add	r6, r2, r6
   11c88:	sub	r4, r4, #1
   11c8c:	lsl	sl, sl, #3
   11c90:	b	11cac <__assert_fail@plt+0x76c>
   11c94:	ldr	r3, [fp, #4]
   11c98:	sub	r4, r4, #1
   11c9c:	ldr	r2, [ip]
   11ca0:	sub	sl, sl, #8
   11ca4:	cmp	r2, r3
   11ca8:	bhi	11cdc <__assert_fail@plt+0x79c>
   11cac:	ldr	lr, [ip, #4]
   11cb0:	mov	r0, ip
   11cb4:	mov	r1, r6
   11cb8:	mov	r2, sl
   11cbc:	cmp	r3, lr
   11cc0:	strcs	r3, [fp, #4]
   11cc4:	strcc	lr, [fp, #4]
   11cc8:	bl	11264 <memmove@plt>
   11ccc:	cmp	r4, r5
   11cd0:	str	r4, [r9]
   11cd4:	mov	ip, r0
   11cd8:	bne	11c94 <__assert_fail@plt+0x754>
   11cdc:	add	r7, r7, #8
   11ce0:	mov	r1, r5
   11ce4:	b	11c3c <__assert_fail@plt+0x6fc>
   11ce8:	ldr	r2, [sp, #28]
   11cec:	ldr	r6, [sp, #36]	; 0x24
   11cf0:	ldr	r5, [sp, #40]	; 0x28
   11cf4:	ldrb	r3, [r2, #64]	; 0x40
   11cf8:	cmp	r3, #0
   11cfc:	beq	11d84 <__assert_fail@plt+0x844>
   11d00:	ldr	r8, [r2, #8]
   11d04:	mov	r3, #0
   11d08:	str	r3, [r2, #8]
   11d0c:	str	r3, [r2]
   11d10:	ldr	r1, [r8]
   11d14:	str	r3, [r2, #4]
   11d18:	cmp	r1, #1
   11d1c:	bls	11d2c <__assert_fail@plt+0x7ec>
   11d20:	sub	r1, r1, #1
   11d24:	mov	r0, #1
   11d28:	bl	122ac <__assert_fail@plt+0xd6c>
   11d2c:	mov	r7, r8
   11d30:	mov	r9, #1
   11d34:	b	11d58 <__assert_fail@plt+0x818>
   11d38:	ldmib	r7, {r0, r1}
   11d3c:	add	r0, r0, #1
   11d40:	cmp	r0, r1
   11d44:	beq	11d50 <__assert_fail@plt+0x810>
   11d48:	sub	r1, r1, #1
   11d4c:	bl	122ac <__assert_fail@plt+0xd6c>
   11d50:	add	r9, r9, #1
   11d54:	add	r7, r7, #8
   11d58:	cmp	r9, r4
   11d5c:	bcc	11d38 <__assert_fail@plt+0x7f8>
   11d60:	add	r4, r8, r4, lsl #3
   11d64:	ldr	r0, [r4, #-4]
   11d68:	cmn	r0, #1
   11d6c:	beq	11d7c <__assert_fail@plt+0x83c>
   11d70:	add	r0, r0, #1
   11d74:	mvn	r1, #0
   11d78:	bl	122ac <__assert_fail@plt+0xd6c>
   11d7c:	mov	r0, r8
   11d80:	bl	1127c <free@plt>
   11d84:	ldr	r4, [pc, #888]	; 12104 <__assert_fail@plt+0xbc4>
   11d88:	add	r4, pc, r4
   11d8c:	ldr	r1, [r4]
   11d90:	ldr	r0, [r4, #8]
   11d94:	add	r1, r1, #1
   11d98:	str	r1, [r4]
   11d9c:	lsl	r1, r1, #3
   11da0:	bl	15f64 <close_stdout@@Base+0x2510>
   11da4:	ldr	r3, [r4]
   11da8:	ldr	r2, [sp, #32]
   11dac:	sub	r3, r3, #-536870911	; 0xe0000001
   11db0:	cmp	r2, #0
   11db4:	mvn	r2, #0
   11db8:	add	r1, r0, r3, lsl #3
   11dbc:	str	r0, [r4, #8]
   11dc0:	str	r2, [r1, #4]
   11dc4:	str	r2, [r0, r3, lsl #3]
   11dc8:	bne	11df4 <__assert_fail@plt+0x8b4>
   11dcc:	ldr	r2, [sp, #32]
   11dd0:	mov	r3, #9
   11dd4:	ldr	r1, [pc, #768]	; 120dc <__assert_fail@plt+0xb9c>
   11dd8:	strb	r3, [r4, #40]	; 0x28
   11ddc:	strb	r2, [sp, #65]	; 0x41
   11de0:	mov	r2, #1
   11de4:	str	r3, [r4, #44]	; 0x2c
   11de8:	strb	r3, [sp, #64]	; 0x40
   11dec:	ldr	r3, [r5, r1]
   11df0:	str	r2, [r3]
   11df4:	ldr	r4, [pc, #780]	; 12108 <__assert_fail@plt+0xbc8>
   11df8:	add	r4, pc, r4
   11dfc:	ldr	r3, [r4, #20]
   11e00:	cmp	r3, #0
   11e04:	beq	11ee8 <__assert_fail@plt+0x9a8>
   11e08:	ldr	r3, [pc, #764]	; 1210c <__assert_fail@plt+0xbcc>
   11e0c:	ldr	r2, [sp, #24]
   11e10:	ldr	r8, [r5, r3]
   11e14:	ldr	r3, [r8]
   11e18:	cmp	r3, r2
   11e1c:	beq	11ed4 <__assert_fail@plt+0x994>
   11e20:	mov	r4, #1
   11e24:	mov	r7, r8
   11e28:	mov	r9, r2
   11e2c:	b	11e4c <__assert_fail@plt+0x90c>
   11e30:	ldr	r0, [r6, r3, lsl #2]
   11e34:	bl	134f8 <__assert_fail@plt+0x1fb8>
   11e38:	ldr	r3, [r7]
   11e3c:	add	r3, r3, #1
   11e40:	str	r3, [r7]
   11e44:	and	r0, r0, r4
   11e48:	uxtb	r4, r0
   11e4c:	ldr	r3, [r8]
   11e50:	cmp	r9, r3
   11e54:	bgt	11e30 <__assert_fail@plt+0x8f0>
   11e58:	ldr	r3, [pc, #688]	; 12110 <__assert_fail@plt+0xbd0>
   11e5c:	add	r3, pc, r3
   11e60:	ldrb	r3, [r3, #48]	; 0x30
   11e64:	cmp	r3, #0
   11e68:	bne	11e80 <__assert_fail@plt+0x940>
   11e6c:	cmp	r4, #0
   11e70:	movne	r0, #0
   11e74:	bne	11e7c <__assert_fail@plt+0x93c>
   11e78:	mov	r0, #1
   11e7c:	bl	113d8 <exit@plt>
   11e80:	ldr	r3, [pc, #652]	; 12114 <__assert_fail@plt+0xbd4>
   11e84:	ldr	r3, [r5, r3]
   11e88:	ldr	r0, [r3]
   11e8c:	bl	1618c <close_stdout@@Base+0x2738>
   11e90:	cmn	r0, #1
   11e94:	bne	11e6c <__assert_fail@plt+0x92c>
   11e98:	bl	113fc <__errno_location@plt>
   11e9c:	ldr	r2, [pc, #628]	; 12118 <__assert_fail@plt+0xbd8>
   11ea0:	add	r2, pc, r2
   11ea4:	ldr	r1, [r0]
   11ea8:	mov	r0, #0
   11eac:	bl	1136c <error@plt>
   11eb0:	b	11e78 <__assert_fail@plt+0x938>
   11eb4:	ldr	r1, [pc, #608]	; 1211c <__assert_fail@plt+0xbdc>
   11eb8:	mov	r0, r4
   11ebc:	add	r1, pc, r1
   11ec0:	b	11994 <__assert_fail@plt+0x454>
   11ec4:	ldr	r1, [pc, #596]	; 12120 <__assert_fail@plt+0xbe0>
   11ec8:	mov	r0, #0
   11ecc:	add	r1, pc, r1
   11ed0:	b	117e8 <__assert_fail@plt+0x2a8>
   11ed4:	ldr	r0, [pc, #584]	; 12124 <__assert_fail@plt+0xbe4>
   11ed8:	add	r0, pc, r0
   11edc:	bl	134f8 <__assert_fail@plt+0x1fb8>
   11ee0:	mov	r4, r0
   11ee4:	b	11e58 <__assert_fail@plt+0x918>
   11ee8:	bl	1133c <__ctype_get_mb_cur_max@plt>
   11eec:	cmp	r0, #1
   11ef0:	bls	11f00 <__assert_fail@plt+0x9c0>
   11ef4:	ldr	r3, [r4, #52]	; 0x34
   11ef8:	cmp	r3, #0
   11efc:	beq	11ffc <__assert_fail@plt+0xabc>
   11f00:	bl	1133c <__ctype_get_mb_cur_max@plt>
   11f04:	cmp	r0, #1
   11f08:	bls	11f20 <__assert_fail@plt+0x9e0>
   11f0c:	ldr	r3, [pc, #532]	; 12128 <__assert_fail@plt+0xbe8>
   11f10:	add	r3, pc, r3
   11f14:	ldr	r3, [r3, #52]	; 0x34
   11f18:	cmp	r3, #0
   11f1c:	beq	11e08 <__assert_fail@plt+0x8c8>
   11f20:	ldr	r3, [pc, #516]	; 1212c <__assert_fail@plt+0xbec>
   11f24:	mov	ip, #0
   11f28:	mov	r2, #1
   11f2c:	add	r3, pc, r3
   11f30:	add	r0, r3, #72	; 0x48
   11f34:	ldrb	r1, [r3, #40]	; 0x28
   11f38:	strb	ip, [r3, #73]	; 0x49
   11f3c:	str	r0, [r3, #20]
   11f40:	strb	r1, [r3, #72]	; 0x48
   11f44:	str	r2, [r3, #24]
   11f48:	b	11e08 <__assert_fail@plt+0x8c8>
   11f4c:	ldr	r1, [pc, #476]	; 12130 <__assert_fail@plt+0xbf0>
   11f50:	mov	r0, #0
   11f54:	add	r1, pc, r1
   11f58:	b	117e8 <__assert_fail@plt+0x2a8>
   11f5c:	ldr	r1, [pc, #464]	; 12134 <__assert_fail@plt+0xbf4>
   11f60:	mov	r0, #0
   11f64:	add	r1, pc, r1
   11f68:	b	117e8 <__assert_fail@plt+0x2a8>
   11f6c:	ldr	r5, [pc, #452]	; 12138 <__assert_fail@plt+0xbf8>
   11f70:	ldr	r1, [pc, #452]	; 1213c <__assert_fail@plt+0xbfc>
   11f74:	add	r5, pc, r5
   11f78:	add	r1, pc, r1
   11f7c:	ldr	r4, [r5, #68]	; 0x44
   11f80:	mov	r0, r4
   11f84:	bl	11534 <strspn@plt>
   11f88:	mov	r1, r0
   11f8c:	mov	r0, r4
   11f90:	bl	16178 <close_stdout@@Base+0x2724>
   11f94:	ldr	r3, [r5, #56]	; 0x38
   11f98:	cmp	r3, #1
   11f9c:	mov	r4, r0
   11fa0:	mov	r0, #0
   11fa4:	beq	12054 <__assert_fail@plt+0xb14>
   11fa8:	cmp	r3, #2
   11fac:	beq	12048 <__assert_fail@plt+0xb08>
   11fb0:	ldr	r1, [pc, #392]	; 12140 <__assert_fail@plt+0xc00>
   11fb4:	add	r1, pc, r1
   11fb8:	mov	r2, #5
   11fbc:	bl	112d0 <dcgettext@plt>
   11fc0:	mov	r5, r0
   11fc4:	mov	r0, r4
   11fc8:	bl	15960 <close_stdout@@Base+0x1f0c>
   11fcc:	mov	r2, r5
   11fd0:	mov	r3, r0
   11fd4:	mov	r0, #0
   11fd8:	mov	r1, r0
   11fdc:	bl	1136c <error@plt>
   11fe0:	mov	r0, r4
   11fe4:	bl	1127c <free@plt>
   11fe8:	b	11e78 <__assert_fail@plt+0x938>
   11fec:	ldr	r1, [pc, #336]	; 12144 <__assert_fail@plt+0xc04>
   11ff0:	mov	r0, #0
   11ff4:	add	r1, pc, r1
   11ff8:	b	117e8 <__assert_fail@plt+0x2a8>
   11ffc:	add	r0, sp, #64	; 0x40
   12000:	bl	16104 <close_stdout@@Base+0x26b0>
   12004:	ldr	r3, [pc, #208]	; 120dc <__assert_fail@plt+0xb9c>
   12008:	str	r0, [r4, #20]
   1200c:	ldr	r3, [r5, r3]
   12010:	ldr	r3, [r3]
   12014:	str	r3, [r4, #24]
   12018:	b	11f00 <__assert_fail@plt+0x9c0>
   1201c:	ldr	r1, [pc, #292]	; 12148 <__assert_fail@plt+0xc08>
   12020:	mov	r2, #5
   12024:	mov	r0, fp
   12028:	add	r1, pc, r1
   1202c:	bl	112d0 <dcgettext@plt>
   12030:	mov	r1, fp
   12034:	mov	r2, r0
   12038:	mov	r0, fp
   1203c:	bl	1136c <error@plt>
   12040:	mov	r0, #1
   12044:	bl	13770 <__assert_fail@plt+0x2230>
   12048:	ldr	r1, [pc, #252]	; 1214c <__assert_fail@plt+0xc0c>
   1204c:	add	r1, pc, r1
   12050:	b	11fb8 <__assert_fail@plt+0xa78>
   12054:	ldr	r1, [pc, #244]	; 12150 <__assert_fail@plt+0xc10>
   12058:	add	r1, pc, r1
   1205c:	b	11fb8 <__assert_fail@plt+0xa78>
   12060:	muleq	r1, r8, sl
   12064:	andeq	r0, r0, r8, lsr #2
   12068:	ldrdeq	r5, [r0], -r8
   1206c:	andeq	r6, r1, ip, lsr #24
   12070:	andeq	r6, r1, ip, lsl #24
   12074:	andeq	r6, r1, r4, lsl #24
   12078:	andeq	r5, r0, ip, ror #28
   1207c:	strdeq	r6, [r1], -r4
   12080:	andeq	r5, r0, r8, asr lr
   12084:	andeq	r0, r0, r8, lsr r1
   12088:	ldrdeq	r6, [r1], -r8
   1208c:			; <UNDEFINED> instruction: 0x00016bbc
   12090:	muleq	r0, r8, lr
   12094:	andeq	r6, r1, r8, lsl r8
   12098:	andeq	r6, r1, ip, asr #22
   1209c:	andeq	r6, r1, r0, lsr #22
   120a0:	andeq	r0, r0, r4, ror #2
   120a4:	ldrdeq	r6, [r1], -r8
   120a8:	andeq	r6, r1, r0, asr #21
   120ac:	andeq	r6, r1, ip, lsl #21
   120b0:	andeq	r6, r1, r0, ror sl
   120b4:	andeq	r6, r1, r0, asr sl
   120b8:	andeq	r0, r0, r8, asr #2
   120bc:	andeq	r0, r0, r0, lsr r1
   120c0:	strdeq	r5, [r0], -ip
   120c4:	strdeq	r5, [r0], -ip
   120c8:	andeq	r5, r0, ip, asr #25
   120cc:			; <UNDEFINED> instruction: 0x00005cbc
   120d0:	andeq	r5, r0, r4, lsl #23
   120d4:	andeq	r5, r0, r8, asr #24
   120d8:	andeq	r6, r1, r0, lsr #19
   120dc:	andeq	r0, r0, ip, asr #2
   120e0:	andeq	r6, r1, ip, asr #16
   120e4:	andeq	r5, r0, r8, ror #22
   120e8:	andeq	r5, r0, r0, lsl #22
   120ec:	andeq	r5, r0, ip, lsr fp
   120f0:	andeq	r6, r1, r8, ror #14
   120f4:	andeq	r6, r1, r0, asr r7
   120f8:	andeq	r6, r1, ip, lsr #11
   120fc:	andeq	r0, r0, r0, ror r6
   12100:	muleq	r1, r8, r5
   12104:	andeq	r6, r1, r8, lsr #8
   12108:			; <UNDEFINED> instruction: 0x000163b8
   1210c:	andeq	r0, r0, ip, lsr #2
   12110:	andeq	r6, r1, r4, asr r3
   12114:	andeq	r0, r0, r4, asr #2
   12118:	andeq	r5, r0, ip, asr r7
   1211c:	muleq	r0, r8, r5
   12120:	andeq	r5, r0, r8, lsl #11
   12124:	andeq	r5, r0, r4, lsr #14
   12128:	andeq	r6, r1, r0, lsr #5
   1212c:	andeq	r6, r1, r4, lsl #5
   12130:	andeq	r5, r0, ip, asr r6
   12134:	andeq	r5, r0, r8, ror r6
   12138:	andeq	r6, r1, ip, lsr r2
   1213c:	andeq	r5, r0, r4, lsr #13
   12140:			; <UNDEFINED> instruction: 0x000056b4
   12144:	muleq	r0, r4, r5
   12148:	ldrdeq	r5, [r0], -r8
   1214c:	strdeq	r5, [r0], -r8
   12150:	ldrdeq	r5, [r0], -r0
   12154:	mov	fp, #0
   12158:	mov	lr, #0
   1215c:	pop	{r1}		; (ldr r1, [sp], #4)
   12160:	mov	r2, sp
   12164:	push	{r2}		; (str r2, [sp, #-4]!)
   12168:	push	{r0}		; (str r0, [sp, #-4]!)
   1216c:	ldr	ip, [pc, #16]	; 12184 <__assert_fail@plt+0xc44>
   12170:	push	{ip}		; (str ip, [sp, #-4]!)
   12174:	ldr	r0, [pc, #12]	; 12188 <__assert_fail@plt+0xc48>
   12178:	ldr	r3, [pc, #12]	; 1218c <__assert_fail@plt+0xc4c>
   1217c:	bl	1139c <__libc_start_main@plt>
   12180:	bl	1151c <abort@plt>
   12184:	andeq	r6, r1, r0, ror #24
   12188:	andeq	r1, r1, ip, asr #10
   1218c:	strdeq	r6, [r1], -ip
   12190:	ldr	r3, [pc, #20]	; 121ac <__assert_fail@plt+0xc6c>
   12194:	ldr	r2, [pc, #20]	; 121b0 <__assert_fail@plt+0xc70>
   12198:	add	r3, pc, r3
   1219c:	ldr	r2, [r3, r2]
   121a0:	cmp	r2, #0
   121a4:	bxeq	lr
   121a8:	b	113b4 <__gmon_start__@plt>
   121ac:	andeq	r5, r1, r0, ror #28
   121b0:	andeq	r0, r0, ip, lsr r1
   121b4:	push	{r3, lr}
   121b8:	movw	r0, #33204	; 0x81b4
   121bc:	ldr	r3, [pc, #36]	; 121e8 <__assert_fail@plt+0xca8>
   121c0:	movt	r0, #2
   121c4:	rsb	r3, r0, r3
   121c8:	cmp	r3, #6
   121cc:	popls	{r3, pc}
   121d0:	movw	r3, #0
   121d4:	movt	r3, #0
   121d8:	cmp	r3, #0
   121dc:	popeq	{r3, pc}
   121e0:	blx	r3
   121e4:	pop	{r3, pc}
   121e8:			; <UNDEFINED> instruction: 0x000281b7
   121ec:	push	{r3, lr}
   121f0:	movw	r0, #33204	; 0x81b4
   121f4:	movw	r3, #33204	; 0x81b4
   121f8:	movt	r0, #2
   121fc:	movt	r3, #2
   12200:	rsb	r3, r0, r3
   12204:	asr	r3, r3, #2
   12208:	add	r3, r3, r3, lsr #31
   1220c:	asrs	r1, r3, #1
   12210:	popeq	{r3, pc}
   12214:	movw	r2, #0
   12218:	movt	r2, #0
   1221c:	cmp	r2, #0
   12220:	popeq	{r3, pc}
   12224:	blx	r2
   12228:	pop	{r3, pc}
   1222c:	push	{r4, lr}
   12230:	movw	r4, #33204	; 0x81b4
   12234:	movt	r4, #2
   12238:	ldrb	r3, [r4]
   1223c:	cmp	r3, #0
   12240:	popne	{r4, pc}
   12244:	bl	121b4 <__assert_fail@plt+0xc74>
   12248:	mov	r3, #1
   1224c:	strb	r3, [r4]
   12250:	pop	{r4, pc}
   12254:	movw	r0, #32320	; 0x7e40
   12258:	movt	r0, #2
   1225c:	push	{r3, lr}
   12260:	ldr	r3, [r0]
   12264:	cmp	r3, #0
   12268:	beq	12280 <__assert_fail@plt+0xd40>
   1226c:	movw	r3, #0
   12270:	movt	r3, #0
   12274:	cmp	r3, #0
   12278:	beq	12280 <__assert_fail@plt+0xd40>
   1227c:	blx	r3
   12280:	pop	{r3, lr}
   12284:	b	121ec <__assert_fail@plt+0xcac>
   12288:	ldr	r3, [r0]
   1228c:	ldr	r2, [r1]
   12290:	cmp	r3, r2
   12294:	blt	122a4 <__assert_fail@plt+0xd64>
   12298:	movle	r0, #0
   1229c:	movgt	r0, #1
   122a0:	bx	lr
   122a4:	mvn	r0, #0
   122a8:	bx	lr
   122ac:	ldr	r2, [pc, #156]	; 12350 <__assert_fail@plt+0xe10>
   122b0:	push	{r4, r5, r6, lr}
   122b4:	add	r2, pc, r2
   122b8:	mov	r5, r0
   122bc:	mov	r4, r1
   122c0:	ldm	r2, {r3, ip}
   122c4:	cmp	r3, ip
   122c8:	beq	122f0 <__assert_fail@plt+0xdb0>
   122cc:	ldr	r2, [r2, #8]
   122d0:	ldr	r1, [pc, #124]	; 12354 <__assert_fail@plt+0xe14>
   122d4:	add	r0, r2, r3, lsl #3
   122d8:	str	r5, [r2, r3, lsl #3]
   122dc:	add	r3, r3, #1
   122e0:	add	r1, pc, r1
   122e4:	str	r4, [r0, #4]
   122e8:	str	r3, [r1]
   122ec:	pop	{r4, r5, r6, pc}
   122f0:	ldr	r0, [r2, #8]
   122f4:	cmp	r0, #0
   122f8:	beq	12338 <__assert_fail@plt+0xdf8>
   122fc:	movw	r2, #21844	; 0x5554
   12300:	movt	r2, #5461	; 0x1555
   12304:	cmp	r3, r2
   12308:	addls	r2, r3, #1
   1230c:	addls	r3, r3, r2, lsr #1
   12310:	bhi	1234c <__assert_fail@plt+0xe0c>
   12314:	lsl	r1, r3, #3
   12318:	ldr	r6, [pc, #56]	; 12358 <__assert_fail@plt+0xe18>
   1231c:	add	r6, pc, r6
   12320:	str	r3, [r6, #4]
   12324:	bl	15f64 <close_stdout@@Base+0x2510>
   12328:	ldr	r3, [r6]
   1232c:	str	r0, [r6, #8]
   12330:	mov	r2, r0
   12334:	b	122d0 <__assert_fail@plt+0xd90>
   12338:	cmp	r3, #0
   1233c:	moveq	r1, #64	; 0x40
   12340:	moveq	r3, #8
   12344:	beq	12318 <__assert_fail@plt+0xdd8>
   12348:	b	12314 <__assert_fail@plt+0xdd4>
   1234c:	bl	16120 <close_stdout@@Base+0x26cc>
   12350:	strdeq	r5, [r1], -ip
   12354:	ldrdeq	r5, [r1], -r0
   12358:	muleq	r1, r4, lr
   1235c:	ldr	r3, [pc, #444]	; 12520 <__assert_fail@plt+0xfe0>
   12360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12364:	add	r3, pc, r3
   12368:	ldr	r7, [pc, #436]	; 12524 <__assert_fail@plt+0xfe4>
   1236c:	mov	r4, #0
   12370:	ldr	fp, [pc, #432]	; 12528 <__assert_fail@plt+0xfe8>
   12374:	sub	sp, sp, #12
   12378:	ldr	r9, [pc, #428]	; 1252c <__assert_fail@plt+0xfec>
   1237c:	add	r7, pc, r7
   12380:	ldr	r2, [r3, #8]
   12384:	add	fp, pc, fp
   12388:	ldr	r8, [pc, #416]	; 12530 <__assert_fail@plt+0xff0>
   1238c:	add	r9, pc, r9
   12390:	mov	r6, r0
   12394:	mov	sl, r4
   12398:	add	r8, pc, r8
   1239c:	str	r2, [r3, #12]
   123a0:	ldr	r3, [r6, #4]
   123a4:	ldr	r2, [r6, #8]
   123a8:	cmp	r3, r2
   123ac:	bcs	124f4 <__assert_fail@plt+0xfb4>
   123b0:	add	r2, r3, #1
   123b4:	str	r2, [r6, #4]
   123b8:	ldrb	r5, [r3]
   123bc:	cmp	r5, #10
   123c0:	beq	12430 <__assert_fail@plt+0xef0>
   123c4:	cmn	r5, #1
   123c8:	beq	12494 <__assert_fail@plt+0xf54>
   123cc:	ldr	r3, [r7, #12]
   123d0:	add	r4, r4, #1
   123d4:	ldr	r2, [r3, #4]
   123d8:	cmp	r4, r2
   123dc:	addhi	r3, r3, #8
   123e0:	strhi	r3, [r7, #12]
   123e4:	ldr	r3, [r3]
   123e8:	cmp	r4, r3
   123ec:	bcc	123a0 <__assert_fail@plt+0xe60>
   123f0:	ldrb	r2, [fp, #16]
   123f4:	cmp	r2, #0
   123f8:	bne	1246c <__assert_fail@plt+0xf2c>
   123fc:	ldr	r3, [pc, #304]	; 12534 <__assert_fail@plt+0xff4>
   12400:	ldr	ip, [r8, r3]
   12404:	ldr	r0, [ip]
   12408:	ldr	r3, [r0, #20]
   1240c:	ldr	r2, [r0, #24]
   12410:	cmp	r3, r2
   12414:	addcc	r2, r3, #1
   12418:	strcc	r2, [r0, #20]
   1241c:	strbcc	r5, [r3]
   12420:	bcc	123a0 <__assert_fail@plt+0xe60>
   12424:	uxtb	r1, r5
   12428:	bl	114a4 <__overflow@plt>
   1242c:	b	123a0 <__assert_fail@plt+0xe60>
   12430:	ldr	r3, [pc, #252]	; 12534 <__assert_fail@plt+0xff4>
   12434:	ldr	ip, [r8, r3]
   12438:	ldr	r0, [ip]
   1243c:	ldr	r3, [r0, #20]
   12440:	ldr	r2, [r0, #24]
   12444:	cmp	r3, r2
   12448:	addcc	r2, r3, #1
   1244c:	strcc	r2, [r0, #20]
   12450:	strbcc	r5, [r3]
   12454:	bcs	12504 <__assert_fail@plt+0xfc4>
   12458:	ldr	r3, [r9, #8]
   1245c:	mov	r4, #0
   12460:	mov	sl, r4
   12464:	str	r3, [r9, #12]
   12468:	b	123a0 <__assert_fail@plt+0xe60>
   1246c:	cmp	sl, #0
   12470:	beq	12488 <__assert_fail@plt+0xf48>
   12474:	cmp	r4, r3
   12478:	ldr	r3, [pc, #180]	; 12534 <__assert_fail@plt+0xff4>
   1247c:	beq	124d0 <__assert_fail@plt+0xf90>
   12480:	ldr	ip, [r8, r3]
   12484:	b	12404 <__assert_fail@plt+0xec4>
   12488:	ldr	r3, [pc, #164]	; 12534 <__assert_fail@plt+0xff4>
   1248c:	mov	sl, #1
   12490:	b	12480 <__assert_fail@plt+0xf40>
   12494:	cmp	r4, #0
   12498:	beq	124c8 <__assert_fail@plt+0xf88>
   1249c:	ldr	r3, [pc, #144]	; 12534 <__assert_fail@plt+0xff4>
   124a0:	ldr	r3, [r8, r3]
   124a4:	ldr	r0, [r3]
   124a8:	ldr	r3, [r0, #20]
   124ac:	ldr	r2, [r0, #24]
   124b0:	cmp	r3, r2
   124b4:	addcc	r1, r3, #1
   124b8:	strcc	r1, [r0, #20]
   124bc:	movcc	r2, #10
   124c0:	strbcc	r2, [r3]
   124c4:	bcs	12510 <__assert_fail@plt+0xfd0>
   124c8:	add	sp, sp, #12
   124cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124d0:	ldr	ip, [r8, r3]
   124d4:	mov	r1, #1
   124d8:	ldr	r0, [fp, #20]
   124dc:	ldr	r2, [fp, #24]
   124e0:	ldr	r3, [ip]
   124e4:	str	ip, [sp, #4]
   124e8:	bl	112b8 <fwrite_unlocked@plt>
   124ec:	ldr	ip, [sp, #4]
   124f0:	b	12404 <__assert_fail@plt+0xec4>
   124f4:	mov	r0, r6
   124f8:	bl	11498 <__uflow@plt>
   124fc:	mov	r5, r0
   12500:	b	123bc <__assert_fail@plt+0xe7c>
   12504:	mov	r1, r5
   12508:	bl	114a4 <__overflow@plt>
   1250c:	b	12458 <__assert_fail@plt+0xf18>
   12510:	mov	r1, #10
   12514:	add	sp, sp, #12
   12518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1251c:	b	114a4 <__overflow@plt>
   12520:	andeq	r5, r1, ip, asr #28
   12524:	andeq	r5, r1, r4, lsr lr
   12528:	andeq	r5, r1, ip, lsr #28
   1252c:	andeq	r5, r1, r4, lsr #28
   12530:	andeq	r5, r1, r0, ror #24
   12534:	andeq	r0, r0, r8, asr #2
   12538:	ldr	r2, [pc, #1196]	; 129ec <__assert_fail@plt+0x14ac>
   1253c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12540:	add	r2, pc, r2
   12544:	ldmib	r0, {r3, ip}
   12548:	sub	sp, sp, #44	; 0x2c
   1254c:	ldr	r1, [r2, #8]
   12550:	mov	r4, r0
   12554:	ldr	r5, [pc, #1172]	; 129f0 <__assert_fail@plt+0x14b0>
   12558:	cmp	r3, ip
   1255c:	add	r5, pc, r5
   12560:	str	r1, [r2, #12]
   12564:	bcs	129dc <__assert_fail@plt+0x149c>
   12568:	add	r2, r3, #1
   1256c:	str	r2, [r0, #4]
   12570:	ldrb	r0, [r3]
   12574:	mov	r1, r4
   12578:	ldr	r9, [pc, #1140]	; 129f4 <__assert_fail@plt+0x14b4>
   1257c:	bl	113f0 <ungetc@plt>
   12580:	ldr	r3, [pc, #1136]	; 129f8 <__assert_fail@plt+0x14b8>
   12584:	ldr	r6, [pc, #1136]	; 129fc <__assert_fail@plt+0x14bc>
   12588:	mov	r8, #0
   1258c:	add	r3, pc, r3
   12590:	ldr	r7, [pc, #1128]	; 12a00 <__assert_fail@plt+0x14c0>
   12594:	mov	fp, #1
   12598:	ldr	r1, [pc, #1124]	; 12a04 <__assert_fail@plt+0x14c4>
   1259c:	ldr	r2, [r3, #12]
   125a0:	add	r9, pc, r9
   125a4:	ldrb	r3, [r3, #28]
   125a8:	add	r6, pc, r6
   125ac:	add	r7, pc, r7
   125b0:	mov	sl, r8
   125b4:	ldr	r2, [r2]
   125b8:	add	r0, r7, #32
   125bc:	add	r1, pc, r1
   125c0:	str	r0, [sp, #28]
   125c4:	cmp	r2, fp
   125c8:	eorhi	r3, r3, #1
   125cc:	ldr	r2, [pc, #1076]	; 12a08 <__assert_fail@plt+0x14c8>
   125d0:	str	r1, [sp, #36]	; 0x24
   125d4:	add	r2, pc, r2
   125d8:	str	r3, [sp, #24]
   125dc:	str	r2, [sp, #32]
   125e0:	ldr	r3, [sp, #24]
   125e4:	cmp	fp, #1
   125e8:	movne	r3, #0
   125ec:	andeq	r3, r3, #1
   125f0:	cmp	r3, #0
   125f4:	bne	127d8 <__assert_fail@plt+0x1298>
   125f8:	ldr	r3, [pc, #1036]	; 12a0c <__assert_fail@plt+0x14cc>
   125fc:	add	r3, pc, r3
   12600:	ldr	r3, [r3, #12]
   12604:	ldr	r3, [r3]
   12608:	cmp	fp, r3
   1260c:	bcc	12738 <__assert_fail@plt+0x11f8>
   12610:	cmp	r8, #0
   12614:	beq	1263c <__assert_fail@plt+0x10fc>
   12618:	ldr	r2, [pc, #1008]	; 12a10 <__assert_fail@plt+0x14d0>
   1261c:	mov	r1, #1
   12620:	ldr	r3, [pc, #1004]	; 12a14 <__assert_fail@plt+0x14d4>
   12624:	ldr	ip, [r5, r2]
   12628:	add	r3, pc, r3
   1262c:	ldr	r0, [r3, #20]
   12630:	ldr	r2, [r3, #24]
   12634:	ldr	r3, [ip]
   12638:	bl	112b8 <fwrite_unlocked@plt>
   1263c:	ldr	r8, [pc, #980]	; 12a18 <__assert_fail@plt+0x14d8>
   12640:	add	r8, pc, r8
   12644:	b	12680 <__assert_fail@plt+0x1140>
   12648:	cmp	r3, #10
   1264c:	cmnne	r3, #1
   12650:	beq	126a8 <__assert_fail@plt+0x1168>
   12654:	ldr	r2, [pc, #948]	; 12a10 <__assert_fail@plt+0x14d0>
   12658:	ldr	r2, [r5, r2]
   1265c:	ldr	r0, [r2]
   12660:	ldr	r2, [r0, #20]
   12664:	ldr	r1, [r0, #24]
   12668:	cmp	r2, r1
   1266c:	addcc	r1, r2, #1
   12670:	strcc	r1, [r0, #20]
   12674:	strbcc	r3, [r2]
   12678:	bcs	12980 <__assert_fail@plt+0x1440>
   1267c:	mov	sl, r3
   12680:	ldr	r3, [r4, #4]
   12684:	ldr	r2, [r4, #8]
   12688:	cmp	r3, r2
   1268c:	bcs	12970 <__assert_fail@plt+0x1430>
   12690:	add	r2, r3, #1
   12694:	str	r2, [r4, #4]
   12698:	ldrb	r3, [r3]
   1269c:	ldrb	r2, [r8, #40]	; 0x28
   126a0:	cmp	r2, r3
   126a4:	bne	12648 <__assert_fail@plt+0x1108>
   126a8:	subs	r0, r3, #10
   126ac:	rsbs	r1, r0, #0
   126b0:	adcs	r1, r1, r0
   126b4:	cmp	r3, #10
   126b8:	cmnne	r3, #1
   126bc:	movne	sl, r3
   126c0:	movne	r8, #1
   126c4:	bne	12780 <__assert_fail@plt+0x1240>
   126c8:	cmp	sl, #10
   126cc:	moveq	sl, r1
   126d0:	orrne	sl, r1, #1
   126d4:	cmp	sl, #0
   126d8:	beq	12708 <__assert_fail@plt+0x11c8>
   126dc:	ldr	r2, [pc, #812]	; 12a10 <__assert_fail@plt+0x14d0>
   126e0:	ldr	r2, [r5, r2]
   126e4:	ldr	r0, [r2]
   126e8:	ldr	r1, [r0, #24]
   126ec:	ldr	r2, [r0, #20]
   126f0:	cmp	r2, r1
   126f4:	addcc	r1, r2, #1
   126f8:	strcc	r1, [r0, #20]
   126fc:	movcc	r1, #10
   12700:	strbcc	r1, [r2]
   12704:	bcs	12994 <__assert_fail@plt+0x1454>
   12708:	cmn	r3, #1
   1270c:	beq	127d0 <__assert_fail@plt+0x1290>
   12710:	ldr	r2, [r9, #8]
   12714:	mov	sl, r3
   12718:	mov	fp, #1
   1271c:	mov	r8, #0
   12720:	str	r2, [r9, #12]
   12724:	b	125e0 <__assert_fail@plt+0x10a0>
   12728:	cmp	r0, #10
   1272c:	cmnne	r0, #1
   12730:	beq	12760 <__assert_fail@plt+0x1220>
   12734:	mov	sl, r0
   12738:	ldr	r3, [r4, #4]
   1273c:	ldr	r2, [r4, #8]
   12740:	cmp	r3, r2
   12744:	bcs	12964 <__assert_fail@plt+0x1424>
   12748:	add	r2, r3, #1
   1274c:	str	r2, [r4, #4]
   12750:	ldrb	r0, [r3]
   12754:	ldrb	r2, [r6, #40]	; 0x28
   12758:	cmp	r2, r0
   1275c:	bne	12728 <__assert_fail@plt+0x11e8>
   12760:	subs	ip, r0, #10
   12764:	mov	r3, r0
   12768:	rsbs	r1, ip, #0
   1276c:	adcs	r1, r1, ip
   12770:	cmp	r0, #10
   12774:	cmnne	r0, #1
   12778:	movne	sl, r0
   1277c:	beq	127a8 <__assert_fail@plt+0x1268>
   12780:	cmp	r2, r3
   12784:	bne	125e0 <__assert_fail@plt+0x10a0>
   12788:	ldr	r1, [sp, #36]	; 0x24
   1278c:	add	fp, fp, #1
   12790:	ldr	r3, [r1, #12]
   12794:	ldr	r2, [r3, #4]
   12798:	cmp	fp, r2
   1279c:	addhi	r3, r3, #8
   127a0:	strhi	r3, [r1, #12]
   127a4:	b	125e0 <__assert_fail@plt+0x10a0>
   127a8:	cmp	r8, #0
   127ac:	bne	126c8 <__assert_fail@plt+0x1188>
   127b0:	ldr	r0, [sp, #32]
   127b4:	ldrb	r2, [r0, #28]
   127b8:	cmp	r2, #0
   127bc:	beq	126c8 <__assert_fail@plt+0x1188>
   127c0:	cmp	fp, #1
   127c4:	bne	126c8 <__assert_fail@plt+0x1188>
   127c8:	cmn	r3, #1
   127cc:	bne	12710 <__assert_fail@plt+0x11d0>
   127d0:	add	sp, sp, #44	; 0x2c
   127d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d8:	ldrb	r3, [r7, #40]	; 0x28
   127dc:	mov	r2, #0
   127e0:	mov	fp, #10
   127e4:	str	r4, [sp, #8]
   127e8:	ldr	r0, [sp, #28]
   127ec:	add	r1, r7, #36	; 0x24
   127f0:	str	r3, [sp]
   127f4:	mvn	r3, #0
   127f8:	str	fp, [sp, #4]
   127fc:	bl	13c50 <close_stdout@@Base+0x1fc>
   12800:	subs	r2, r0, #0
   12804:	blt	12944 <__assert_fail@plt+0x1404>
   12808:	beq	129bc <__assert_fail@plt+0x147c>
   1280c:	ldr	r0, [r7, #32]
   12810:	sub	r1, r2, #1
   12814:	ldrb	ip, [r7, #40]	; 0x28
   12818:	ldrb	r3, [r0, r1]
   1281c:	cmp	r3, #10
   12820:	movne	sl, #0
   12824:	moveq	sl, #1
   12828:	cmp	r3, ip
   1282c:	beq	128ac <__assert_fail@plt+0x136c>
   12830:	ldrb	r3, [r7, #28]
   12834:	cmp	r3, #0
   12838:	bne	12890 <__assert_fail@plt+0x1350>
   1283c:	ldr	r3, [pc, #460]	; 12a10 <__assert_fail@plt+0x14d0>
   12840:	mov	r1, #1
   12844:	ldr	fp, [r5, r3]
   12848:	ldr	r3, [fp]
   1284c:	bl	112b8 <fwrite_unlocked@plt>
   12850:	cmp	sl, #0
   12854:	movne	fp, #1
   12858:	movne	sl, #10
   1285c:	bne	125e0 <__assert_fail@plt+0x10a0>
   12860:	ldr	r0, [fp]
   12864:	ldr	r3, [r0, #20]
   12868:	ldr	r2, [r0, #24]
   1286c:	cmp	r3, r2
   12870:	bcs	129a8 <__assert_fail@plt+0x1468>
   12874:	mov	r2, #10
   12878:	add	r1, r3, #1
   1287c:	mov	sl, r2
   12880:	str	r1, [r0, #20]
   12884:	strb	r2, [r3]
   12888:	mov	fp, #1
   1288c:	b	125e0 <__assert_fail@plt+0x10a0>
   12890:	cmp	sl, #0
   12894:	beq	12888 <__assert_fail@plt+0x1348>
   12898:	cmp	ip, #10
   1289c:	movne	fp, #1
   128a0:	movne	sl, #0
   128a4:	bne	125e0 <__assert_fail@plt+0x10a0>
   128a8:	b	1283c <__assert_fail@plt+0x12fc>
   128ac:	cmp	sl, #0
   128b0:	beq	128e0 <__assert_fail@plt+0x13a0>
   128b4:	ldrb	r3, [r7, #28]
   128b8:	cmp	r3, #0
   128bc:	bne	12898 <__assert_fail@plt+0x1358>
   128c0:	ldr	r3, [pc, #328]	; 12a10 <__assert_fail@plt+0x14d0>
   128c4:	mov	r1, #1
   128c8:	mov	sl, fp
   128cc:	mov	fp, r1
   128d0:	ldr	r3, [r5, r3]
   128d4:	ldr	r3, [r3]
   128d8:	bl	112b8 <fwrite_unlocked@plt>
   128dc:	b	125e0 <__assert_fail@plt+0x10a0>
   128e0:	ldr	r3, [r7, #12]
   128e4:	ldr	r2, [r3]
   128e8:	cmp	r2, #1
   128ec:	bls	12920 <__assert_fail@plt+0x13e0>
   128f0:	ldr	r2, [r3, #4]
   128f4:	cmp	r2, #1
   128f8:	movhi	fp, #2
   128fc:	movhi	sl, #0
   12900:	bhi	12604 <__assert_fail@plt+0x10c4>
   12904:	ldr	r2, [pc, #272]	; 12a1c <__assert_fail@plt+0x14dc>
   12908:	add	r3, r3, #8
   1290c:	mov	fp, #2
   12910:	mov	sl, #0
   12914:	add	r2, pc, r2
   12918:	str	r3, [r2, #12]
   1291c:	b	12604 <__assert_fail@plt+0x10c4>
   12920:	ldr	r3, [pc, #232]	; 12a10 <__assert_fail@plt+0x14d0>
   12924:	mov	r2, r1
   12928:	mov	r1, #1
   1292c:	mov	r8, r1
   12930:	ldr	r3, [r5, r3]
   12934:	ldr	r3, [r3]
   12938:	bl	112b8 <fwrite_unlocked@plt>
   1293c:	ldr	r3, [r7, #12]
   12940:	b	128f0 <__assert_fail@plt+0x13b0>
   12944:	ldr	r0, [r7, #32]
   12948:	bl	1127c <free@plt>
   1294c:	mov	r3, #0
   12950:	str	r3, [r7, #32]
   12954:	ldr	r3, [r4]
   12958:	tst	r3, #48	; 0x30
   1295c:	bne	127d0 <__assert_fail@plt+0x1290>
   12960:	bl	16120 <close_stdout@@Base+0x26cc>
   12964:	mov	r0, r4
   12968:	bl	11498 <__uflow@plt>
   1296c:	b	12754 <__assert_fail@plt+0x1214>
   12970:	mov	r0, r4
   12974:	bl	11498 <__uflow@plt>
   12978:	mov	r3, r0
   1297c:	b	1269c <__assert_fail@plt+0x115c>
   12980:	uxtb	r1, r3
   12984:	str	r3, [sp, #20]
   12988:	bl	114a4 <__overflow@plt>
   1298c:	ldr	r3, [sp, #20]
   12990:	b	1267c <__assert_fail@plt+0x113c>
   12994:	mov	r1, #10
   12998:	str	r3, [sp, #20]
   1299c:	bl	114a4 <__overflow@plt>
   129a0:	ldr	r3, [sp, #20]
   129a4:	b	12708 <__assert_fail@plt+0x11c8>
   129a8:	mov	r1, #10
   129ac:	mov	fp, #1
   129b0:	bl	114a4 <__overflow@plt>
   129b4:	mov	sl, #10
   129b8:	b	125e0 <__assert_fail@plt+0x10a0>
   129bc:	ldr	r0, [pc, #92]	; 12a20 <__assert_fail@plt+0x14e0>
   129c0:	mov	r2, #712	; 0x2c8
   129c4:	ldr	r1, [pc, #88]	; 12a24 <__assert_fail@plt+0x14e4>
   129c8:	ldr	r3, [pc, #88]	; 12a28 <__assert_fail@plt+0x14e8>
   129cc:	add	r0, pc, r0
   129d0:	add	r1, pc, r1
   129d4:	add	r3, pc, r3
   129d8:	bl	11540 <__assert_fail@plt>
   129dc:	bl	11498 <__uflow@plt>
   129e0:	cmn	r0, #1
   129e4:	beq	127d0 <__assert_fail@plt+0x1290>
   129e8:	b	12574 <__assert_fail@plt+0x1034>
   129ec:	andeq	r5, r1, r0, ror ip
   129f0:	muleq	r1, ip, sl
   129f4:	andeq	r5, r1, r0, lsl ip
   129f8:	andeq	r5, r1, r4, lsr #24
   129fc:	andeq	r5, r1, r8, lsl #24
   12a00:	andeq	r5, r1, r4, lsl #24
   12a04:	strdeq	r5, [r1], -r4
   12a08:	ldrdeq	r5, [r1], -ip
   12a0c:			; <UNDEFINED> instruction: 0x00015bb4
   12a10:	andeq	r0, r0, r8, asr #2
   12a14:	andeq	r5, r1, r8, lsl #23
   12a18:	andeq	r5, r1, r0, ror fp
   12a1c:	muleq	r1, ip, r8
   12a20:	ldrdeq	r4, [r0], -r8
   12a24:	andeq	r4, r0, r4, ror #5
   12a28:	andeq	r4, r0, r4, asr #5
   12a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a30:	sub	sp, sp, #8256	; 0x2040
   12a34:	ldr	r9, [pc, #740]	; 12d20 <__assert_fail@plt+0x17e0>
   12a38:	sub	sp, sp, #20
   12a3c:	ldr	r1, [pc, #736]	; 12d24 <__assert_fail@plt+0x17e4>
   12a40:	add	r4, sp, #80	; 0x50
   12a44:	ldr	r2, [pc, #732]	; 12d28 <__assert_fail@plt+0x17e8>
   12a48:	add	r9, pc, r9
   12a4c:	sub	ip, r4, #20
   12a50:	str	r4, [sp, #16]
   12a54:	add	r2, pc, r2
   12a58:	str	ip, [sp, #32]
   12a5c:	ldr	r1, [r9, r1]
   12a60:	sub	sl, r4, #36	; 0x24
   12a64:	ldr	ip, [r2, #8]
   12a68:	mov	r3, #0
   12a6c:	ldr	r8, [pc, #696]	; 12d2c <__assert_fail@plt+0x17ec>
   12a70:	mov	r5, r3
   12a74:	ldr	r4, [pc, #692]	; 12d30 <__assert_fail@plt+0x17f0>
   12a78:	add	r7, sp, #60	; 0x3c
   12a7c:	str	r1, [sp, #36]	; 0x24
   12a80:	add	r8, pc, r8
   12a84:	ldr	r1, [r1]
   12a88:	add	r4, pc, r4
   12a8c:	str	ip, [r2, #12]
   12a90:	add	ip, sp, #8192	; 0x2000
   12a94:	str	r4, [sp, #28]
   12a98:	movw	r4, #57304	; 0xdfd8
   12a9c:	movt	r4, #65535	; 0xffff
   12aa0:	str	r4, [sp, #24]
   12aa4:	add	r4, sp, #52	; 0x34
   12aa8:	str	r4, [sp, #8]
   12aac:	ldr	r4, [pc, #640]	; 12d34 <__assert_fail@plt+0x17f4>
   12ab0:	mov	fp, r8
   12ab4:	str	r3, [sl, #4]
   12ab8:	add	r4, pc, r4
   12abc:	str	sl, [sp, #4]
   12ac0:	str	r4, [sp, #20]
   12ac4:	mov	sl, r9
   12ac8:	str	r3, [sp, #12]
   12acc:	mov	r4, r3
   12ad0:	str	r1, [ip, #76]	; 0x4c
   12ad4:	mov	r9, r0
   12ad8:	str	r3, [sp, #44]	; 0x2c
   12adc:	b	12ba4 <__assert_fail@plt+0x1664>
   12ae0:	ldr	ip, [sp, #4]
   12ae4:	mov	r2, r4
   12ae8:	ldm	ip, {r0, r1}
   12aec:	mov	r3, ip
   12af0:	ldr	ip, [sp, #8]
   12af4:	stm	ip, {r0, r1}
   12af8:	add	r0, sp, #40	; 0x28
   12afc:	mov	r1, r7
   12b00:	bl	11360 <mbrtowc@plt>
   12b04:	subs	r6, r0, #0
   12b08:	moveq	r6, #1
   12b0c:	beq	12b2c <__assert_fail@plt+0x15ec>
   12b10:	cmn	r6, #2
   12b14:	bcc	12b2c <__assert_fail@plt+0x15ec>
   12b18:	ldr	ip, [sp, #8]
   12b1c:	mov	r6, #1
   12b20:	ldm	ip, {r0, r1}
   12b24:	ldr	ip, [sp, #4]
   12b28:	stm	ip, {r0, r1}
   12b2c:	add	r2, sp, #8256	; 0x2040
   12b30:	ldr	ip, [sp, #24]
   12b34:	add	r2, r2, #16
   12b38:	ldr	r1, [r2, ip]
   12b3c:	cmn	r1, #1
   12b40:	beq	12d18 <__assert_fail@plt+0x17d8>
   12b44:	cmp	r1, #10
   12b48:	beq	12c34 <__assert_fail@plt+0x16f4>
   12b4c:	ldr	r3, [fp, #12]
   12b50:	add	r5, r5, #1
   12b54:	ldr	r2, [r3, #4]
   12b58:	cmp	r5, r2
   12b5c:	addhi	r3, r3, #8
   12b60:	strhi	r3, [fp, #12]
   12b64:	ldr	r3, [r3]
   12b68:	cmp	r5, r3
   12b6c:	bcc	12b9c <__assert_fail@plt+0x165c>
   12b70:	ldr	ip, [sp, #28]
   12b74:	ldrb	r2, [ip, #16]
   12b78:	cmp	r2, #0
   12b7c:	bne	12c74 <__assert_fail@plt+0x1734>
   12b80:	ldr	r3, [pc, #432]	; 12d38 <__assert_fail@plt+0x17f8>
   12b84:	ldr	r8, [sl, r3]
   12b88:	ldr	r3, [r8]
   12b8c:	mov	r0, r7
   12b90:	mov	r1, r6
   12b94:	mov	r2, #1
   12b98:	bl	112b8 <fwrite_unlocked@plt>
   12b9c:	rsb	r4, r6, r4
   12ba0:	add	r7, r7, r6
   12ba4:	cmp	r4, #15
   12ba8:	bhi	12ae0 <__assert_fail@plt+0x15a0>
   12bac:	ldr	r3, [r9]
   12bb0:	tst	r3, #48	; 0x30
   12bb4:	beq	12ca8 <__assert_fail@plt+0x1768>
   12bb8:	cmp	r4, #0
   12bbc:	bne	12ae0 <__assert_fail@plt+0x15a0>
   12bc0:	add	r4, sp, #8256	; 0x2040
   12bc4:	movw	r3, #57304	; 0xdfd8
   12bc8:	add	r4, r4, #16
   12bcc:	movt	r3, #65535	; 0xffff
   12bd0:	mov	r9, sl
   12bd4:	mvn	r2, #0
   12bd8:	str	r2, [r4, r3]
   12bdc:	cmp	r5, #0
   12be0:	beq	12c10 <__assert_fail@plt+0x16d0>
   12be4:	ldr	r3, [pc, #332]	; 12d38 <__assert_fail@plt+0x17f8>
   12be8:	ldr	r3, [r9, r3]
   12bec:	ldr	r0, [r3]
   12bf0:	ldr	r3, [r0, #20]
   12bf4:	ldr	r2, [r0, #24]
   12bf8:	cmp	r3, r2
   12bfc:	addcc	r1, r3, #1
   12c00:	strcc	r1, [r0, #20]
   12c04:	movcc	r2, #10
   12c08:	strbcc	r2, [r3]
   12c0c:	bcs	12d0c <__assert_fail@plt+0x17cc>
   12c10:	ldr	r4, [sp, #36]	; 0x24
   12c14:	add	r1, sp, #8192	; 0x2000
   12c18:	ldr	r2, [r1, #76]	; 0x4c
   12c1c:	ldr	r3, [r4]
   12c20:	cmp	r2, r3
   12c24:	bne	12d08 <__assert_fail@plt+0x17c8>
   12c28:	add	sp, sp, #8256	; 0x2040
   12c2c:	add	sp, sp, #20
   12c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c34:	ldr	r3, [pc, #252]	; 12d38 <__assert_fail@plt+0x17f8>
   12c38:	ldr	r8, [sl, r3]
   12c3c:	ldr	r0, [r8]
   12c40:	ldr	r3, [r0, #20]
   12c44:	ldr	r2, [r0, #24]
   12c48:	cmp	r3, r2
   12c4c:	addcc	r2, r3, #1
   12c50:	strcc	r2, [r0, #20]
   12c54:	strbcc	r1, [r3]
   12c58:	bcs	12d00 <__assert_fail@plt+0x17c0>
   12c5c:	ldr	ip, [sp, #20]
   12c60:	mov	r5, #0
   12c64:	str	r5, [sp, #12]
   12c68:	ldr	r3, [ip, #8]
   12c6c:	str	r3, [ip, #12]
   12c70:	b	12b9c <__assert_fail@plt+0x165c>
   12c74:	ldr	ip, [sp, #12]
   12c78:	cmp	ip, #0
   12c7c:	bne	12c94 <__assert_fail@plt+0x1754>
   12c80:	ldr	r3, [pc, #176]	; 12d38 <__assert_fail@plt+0x17f8>
   12c84:	ldr	r8, [sl, r3]
   12c88:	mov	ip, #1
   12c8c:	str	ip, [sp, #12]
   12c90:	b	12b88 <__assert_fail@plt+0x1648>
   12c94:	cmp	r5, r3
   12c98:	ldr	r3, [pc, #152]	; 12d38 <__assert_fail@plt+0x17f8>
   12c9c:	beq	12ce0 <__assert_fail@plt+0x17a0>
   12ca0:	ldr	r8, [sl, r3]
   12ca4:	b	12c88 <__assert_fail@plt+0x1748>
   12ca8:	mov	r1, r7
   12cac:	mov	r2, r4
   12cb0:	movw	r3, #8208	; 0x2010
   12cb4:	add	r0, sp, #60	; 0x3c
   12cb8:	bl	11270 <__memmove_chk@plt>
   12cbc:	add	r1, sp, #60	; 0x3c
   12cc0:	add	r0, r1, r4
   12cc4:	mov	r2, #8192	; 0x2000
   12cc8:	mov	r1, #1
   12ccc:	mov	r3, r9
   12cd0:	bl	11504 <fread_unlocked@plt>
   12cd4:	add	r7, sp, #60	; 0x3c
   12cd8:	add	r4, r4, r0
   12cdc:	b	12bb8 <__assert_fail@plt+0x1678>
   12ce0:	ldr	ip, [sp, #28]
   12ce4:	mov	r1, #1
   12ce8:	ldr	r8, [sl, r3]
   12cec:	ldr	r0, [ip, #20]
   12cf0:	ldr	r2, [ip, #24]
   12cf4:	ldr	r3, [r8]
   12cf8:	bl	112b8 <fwrite_unlocked@plt>
   12cfc:	b	12c88 <__assert_fail@plt+0x1748>
   12d00:	bl	114a4 <__overflow@plt>
   12d04:	b	12c5c <__assert_fail@plt+0x171c>
   12d08:	bl	112dc <__stack_chk_fail@plt>
   12d0c:	mov	r1, #10
   12d10:	bl	114a4 <__overflow@plt>
   12d14:	b	12c10 <__assert_fail@plt+0x16d0>
   12d18:	mov	r9, sl
   12d1c:	b	12bdc <__assert_fail@plt+0x169c>
   12d20:			; <UNDEFINED> instruction: 0x000155b0
   12d24:	andeq	r0, r0, r8, lsr #2
   12d28:	andeq	r5, r1, ip, asr r7
   12d2c:	andeq	r5, r1, r0, lsr r7
   12d30:	andeq	r5, r1, r8, lsr #14
   12d34:	strdeq	r5, [r1], -r8
   12d38:	andeq	r0, r0, r8, asr #2
   12d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d40:	sub	sp, sp, #8256	; 0x2040
   12d44:	sub	sp, sp, #44	; 0x2c
   12d48:	ldr	r6, [pc, #1900]	; 134bc <__assert_fail@plt+0x1f7c>
   12d4c:	add	ip, sp, #104	; 0x68
   12d50:	ldr	r2, [pc, #1896]	; 134c0 <__assert_fail@plt+0x1f80>
   12d54:	add	r6, pc, r6
   12d58:	str	r6, [sp, #20]
   12d5c:	str	ip, [sp, #16]
   12d60:	sub	r6, ip, #36	; 0x24
   12d64:	ldr	ip, [sp, #20]
   12d68:	movw	r4, #57304	; 0xdfd8
   12d6c:	str	r6, [sp, #4]
   12d70:	movt	r4, #65535	; 0xffff
   12d74:	ldr	r1, [pc, #1864]	; 134c4 <__assert_fail@plt+0x1f84>
   12d78:	mov	sl, r0
   12d7c:	ldr	r2, [ip, r2]
   12d80:	add	r1, pc, r1
   12d84:	ldr	r3, [r0, #4]
   12d88:	ldr	r5, [r0, #8]
   12d8c:	str	r2, [sp, #60]	; 0x3c
   12d90:	mov	r2, #0
   12d94:	ldr	r6, [sp, #60]	; 0x3c
   12d98:	cmp	r3, r5
   12d9c:	ldr	lr, [r1, #8]
   12da0:	str	r2, [sp, #72]	; 0x48
   12da4:	ldr	ip, [r6]
   12da8:	add	r6, sp, #8256	; 0x2040
   12dac:	str	lr, [r1, #12]
   12db0:	add	r6, r6, #40	; 0x28
   12db4:	add	r1, sp, #8192	; 0x2000
   12db8:	str	r2, [sp, #68]	; 0x44
   12dbc:	str	r2, [r6, r4]
   12dc0:	str	ip, [r1, #100]	; 0x64
   12dc4:	bcs	13478 <__assert_fail@plt+0x1f38>
   12dc8:	add	r2, r3, #1
   12dcc:	str	r2, [r0, #4]
   12dd0:	ldrb	r3, [r3]
   12dd4:	str	r3, [sp, #52]	; 0x34
   12dd8:	ldr	r0, [sp, #52]	; 0x34
   12ddc:	mov	r1, sl
   12de0:	bl	113f0 <ungetc@plt>
   12de4:	add	ip, sp, #8256	; 0x2040
   12de8:	movw	r3, #57304	; 0xdfd8
   12dec:	add	ip, ip, #40	; 0x28
   12df0:	movt	r3, #65535	; 0xffff
   12df4:	mov	r2, #0
   12df8:	str	r2, [ip, r3]
   12dfc:	ldr	r3, [pc, #1732]	; 134c8 <__assert_fail@plt+0x1f88>
   12e00:	add	r6, sp, #84	; 0x54
   12e04:	str	r6, [sp, #24]
   12e08:	add	ip, sp, #76	; 0x4c
   12e0c:	add	r3, pc, r3
   12e10:	mov	r5, r6
   12e14:	ldr	r6, [pc, #1712]	; 134cc <__assert_fail@plt+0x1f8c>
   12e18:	mov	r7, #0
   12e1c:	ldr	r2, [r3, #12]
   12e20:	mov	r4, r7
   12e24:	add	r6, pc, r6
   12e28:	str	ip, [sp, #8]
   12e2c:	str	r6, [sp, #48]	; 0x30
   12e30:	mov	r8, #1
   12e34:	ldr	ip, [pc, #1684]	; 134d0 <__assert_fail@plt+0x1f90>
   12e38:	ldr	r6, [pc, #1684]	; 134d4 <__assert_fail@plt+0x1f94>
   12e3c:	add	ip, pc, ip
   12e40:	ldrb	r3, [r3, #28]
   12e44:	add	r6, pc, r6
   12e48:	ldr	r2, [r2]
   12e4c:	str	ip, [sp, #56]	; 0x38
   12e50:	str	r6, [sp, #44]	; 0x2c
   12e54:	cmp	r2, r8
   12e58:	eorhi	r3, r3, #1
   12e5c:	ldr	ip, [pc, #1652]	; 134d8 <__assert_fail@plt+0x1f98>
   12e60:	ldr	r6, [pc, #1652]	; 134dc <__assert_fail@plt+0x1f9c>
   12e64:	add	ip, pc, ip
   12e68:	str	r7, [sp, #32]
   12e6c:	add	r6, pc, r6
   12e70:	str	r3, [sp, #28]
   12e74:	str	ip, [sp, #36]	; 0x24
   12e78:	str	r6, [sp, #40]	; 0x28
   12e7c:	ldr	r3, [sp, #28]
   12e80:	cmp	r8, #1
   12e84:	movne	r3, #0
   12e88:	andeq	r3, r3, #1
   12e8c:	cmp	r3, #0
   12e90:	bne	13118 <__assert_fail@plt+0x1bd8>
   12e94:	add	ip, sp, #8256	; 0x2040
   12e98:	movw	r3, #57304	; 0xdfd8
   12e9c:	add	ip, ip, #40	; 0x28
   12ea0:	movt	r3, #65535	; 0xffff
   12ea4:	ldr	r3, [ip, r3]
   12ea8:	cmn	r3, #1
   12eac:	beq	1300c <__assert_fail@plt+0x1acc>
   12eb0:	ldr	r6, [sp, #36]	; 0x24
   12eb4:	ldr	r3, [r6, #12]
   12eb8:	ldr	r3, [r3]
   12ebc:	cmp	r8, r3
   12ec0:	bcc	12f00 <__assert_fail@plt+0x19c0>
   12ec4:	ldr	ip, [sp, #32]
   12ec8:	cmp	ip, #0
   12ecc:	moveq	ip, #1
   12ed0:	streq	ip, [sp, #32]
   12ed4:	beq	12f00 <__assert_fail@plt+0x19c0>
   12ed8:	ldr	r3, [pc, #1536]	; 134e0 <__assert_fail@plt+0x1fa0>
   12edc:	mov	r1, #1
   12ee0:	ldr	r0, [r6, #20]
   12ee4:	ldr	r6, [sp, #20]
   12ee8:	str	r1, [sp, #32]
   12eec:	ldr	ip, [sp, #36]	; 0x24
   12ef0:	ldr	r3, [r6, r3]
   12ef4:	ldr	r2, [ip, #24]
   12ef8:	ldr	r3, [r3]
   12efc:	bl	112b8 <fwrite_unlocked@plt>
   12f00:	ldr	fp, [pc, #1500]	; 134e4 <__assert_fail@plt+0x1fa4>
   12f04:	movw	r9, #57304	; 0xdfd8
   12f08:	movt	r9, #65535	; 0xffff
   12f0c:	str	r9, [sp, #12]
   12f10:	add	fp, pc, fp
   12f14:	ldr	r9, [sp, #40]	; 0x28
   12f18:	b	12fd8 <__assert_fail@plt+0x1a98>
   12f1c:	ldr	ip, [sp, #4]
   12f20:	mov	r2, r4
   12f24:	ldr	r6, [sp, #8]
   12f28:	add	r3, sp, #68	; 0x44
   12f2c:	ldm	ip, {r0, r1}
   12f30:	stm	r6, {r0, r1}
   12f34:	add	r0, sp, #64	; 0x40
   12f38:	mov	r1, r5
   12f3c:	bl	11360 <mbrtowc@plt>
   12f40:	subs	r6, r0, #0
   12f44:	beq	130d4 <__assert_fail@plt+0x1b94>
   12f48:	cmn	r6, #2
   12f4c:	movcc	r7, #0
   12f50:	bcc	12f6c <__assert_fail@plt+0x1a2c>
   12f54:	ldr	r6, [sp, #8]
   12f58:	mov	r7, #1
   12f5c:	ldr	ip, [sp, #4]
   12f60:	ldm	r6, {r0, r1}
   12f64:	mov	r6, r7
   12f68:	stm	ip, {r0, r1}
   12f6c:	add	r0, sp, #8256	; 0x2040
   12f70:	ldr	ip, [sp, #12]
   12f74:	add	r0, r0, #40	; 0x28
   12f78:	ldr	r3, [r0, ip]
   12f7c:	cmn	r3, #1
   12f80:	beq	1300c <__assert_fail@plt+0x1acc>
   12f84:	cmp	r7, #0
   12f88:	bne	12fa0 <__assert_fail@plt+0x1a60>
   12f8c:	ldr	r2, [r9, #44]	; 0x2c
   12f90:	cmp	r2, r3
   12f94:	beq	13374 <__assert_fail@plt+0x1e34>
   12f98:	cmp	r3, #10
   12f9c:	beq	13374 <__assert_fail@plt+0x1e34>
   12fa0:	ldr	r3, [fp, #12]
   12fa4:	ldr	r3, [r3]
   12fa8:	cmp	r8, r3
   12fac:	bcc	12fd0 <__assert_fail@plt+0x1a90>
   12fb0:	ldr	r3, [pc, #1320]	; 134e0 <__assert_fail@plt+0x1fa0>
   12fb4:	mov	r0, r5
   12fb8:	ldr	ip, [sp, #20]
   12fbc:	mov	r1, r6
   12fc0:	mov	r2, #1
   12fc4:	ldr	r3, [ip, r3]
   12fc8:	ldr	r3, [r3]
   12fcc:	bl	112b8 <fwrite_unlocked@plt>
   12fd0:	rsb	r4, r6, r4
   12fd4:	add	r5, r5, r6
   12fd8:	cmp	r4, #15
   12fdc:	bhi	12f1c <__assert_fail@plt+0x19dc>
   12fe0:	ldr	r3, [sl]
   12fe4:	tst	r3, #48	; 0x30
   12fe8:	beq	130e0 <__assert_fail@plt+0x1ba0>
   12fec:	cmp	r4, #0
   12ff0:	bne	12f1c <__assert_fail@plt+0x19dc>
   12ff4:	add	r6, sp, #8256	; 0x2040
   12ff8:	movw	r3, #57304	; 0xdfd8
   12ffc:	add	r6, r6, #40	; 0x28
   13000:	movt	r3, #65535	; 0xffff
   13004:	mvn	r2, #0
   13008:	str	r2, [r6, r3]
   1300c:	cmp	r7, #0
   13010:	beq	1337c <__assert_fail@plt+0x1e3c>
   13014:	add	r0, sp, #8256	; 0x2040
   13018:	movw	r3, #57304	; 0xdfd8
   1301c:	add	r0, r0, #40	; 0x28
   13020:	movt	r3, #65535	; 0xffff
   13024:	ldr	r3, [r0, r3]
   13028:	cmp	r3, #10
   1302c:	beq	1337c <__assert_fail@plt+0x1e3c>
   13030:	cmn	r3, #1
   13034:	mov	r7, #1
   13038:	bne	12e7c <__assert_fail@plt+0x193c>
   1303c:	ldr	r6, [sp, #32]
   13040:	cmp	r6, #0
   13044:	bne	1306c <__assert_fail@plt+0x1b2c>
   13048:	ldr	ip, [sp, #52]	; 0x34
   1304c:	cmn	ip, #1
   13050:	beq	1309c <__assert_fail@plt+0x1b5c>
   13054:	ldr	r6, [sp, #56]	; 0x38
   13058:	ldrb	r3, [r6, #28]
   1305c:	cmp	r3, #0
   13060:	beq	1306c <__assert_fail@plt+0x1b2c>
   13064:	cmp	r8, #1
   13068:	beq	1309c <__assert_fail@plt+0x1b5c>
   1306c:	ldr	r3, [pc, #1132]	; 134e0 <__assert_fail@plt+0x1fa0>
   13070:	ldr	ip, [sp, #20]
   13074:	ldr	r3, [ip, r3]
   13078:	ldr	r0, [r3]
   1307c:	ldr	r2, [r0, #24]
   13080:	ldr	r3, [r0, #20]
   13084:	cmp	r3, r2
   13088:	addcc	r2, r3, #1
   1308c:	strcc	r2, [r0, #20]
   13090:	movcc	r2, #10
   13094:	strbcc	r2, [r3]
   13098:	bcs	134ac <__assert_fail@plt+0x1f6c>
   1309c:	add	r0, sp, #8256	; 0x2040
   130a0:	movw	r3, #57304	; 0xdfd8
   130a4:	add	r0, r0, #40	; 0x28
   130a8:	movt	r3, #65535	; 0xffff
   130ac:	ldr	r3, [r0, r3]
   130b0:	cmn	r3, #1
   130b4:	beq	1330c <__assert_fail@plt+0x1dcc>
   130b8:	ldr	r6, [sp, #48]	; 0x30
   130bc:	mov	ip, #0
   130c0:	mov	r8, #1
   130c4:	str	ip, [sp, #32]
   130c8:	ldr	r3, [r6, #8]
   130cc:	str	r3, [r6, #12]
   130d0:	b	12e7c <__assert_fail@plt+0x193c>
   130d4:	mov	r7, r6
   130d8:	mov	r6, #1
   130dc:	b	12f6c <__assert_fail@plt+0x1a2c>
   130e0:	mov	r1, r5
   130e4:	mov	r2, r4
   130e8:	movw	r3, #8208	; 0x2010
   130ec:	add	r0, sp, #84	; 0x54
   130f0:	bl	11270 <__memmove_chk@plt>
   130f4:	add	r1, sp, #84	; 0x54
   130f8:	add	r0, r1, r4
   130fc:	mov	r2, #8192	; 0x2000
   13100:	mov	r1, #1
   13104:	mov	r3, sl
   13108:	bl	11504 <fread_unlocked@plt>
   1310c:	add	r5, sp, #84	; 0x54
   13110:	add	r4, r4, r0
   13114:	b	12fec <__assert_fail@plt+0x1aac>
   13118:	ldr	r8, [pc, #968]	; 134e8 <__assert_fail@plt+0x1fa8>
   1311c:	mov	r9, #0
   13120:	movw	r6, #57304	; 0xdfd8
   13124:	movt	r6, #65535	; 0xffff
   13128:	add	r8, pc, r8
   1312c:	str	r6, [sp, #12]
   13130:	cmp	r4, #15
   13134:	bls	132bc <__assert_fail@plt+0x1d7c>
   13138:	ldr	r6, [sp, #4]
   1313c:	mov	r2, r4
   13140:	ldr	ip, [sp, #8]
   13144:	add	r3, sp, #68	; 0x44
   13148:	ldm	r6, {r0, r1}
   1314c:	stm	ip, {r0, r1}
   13150:	add	r0, sp, #64	; 0x40
   13154:	mov	r1, r5
   13158:	bl	11360 <mbrtowc@plt>
   1315c:	subs	r6, r0, #0
   13160:	beq	13330 <__assert_fail@plt+0x1df0>
   13164:	cmn	r6, #2
   13168:	movcc	r7, #0
   1316c:	bcc	13188 <__assert_fail@plt+0x1c48>
   13170:	ldr	r6, [sp, #8]
   13174:	mov	r7, #1
   13178:	ldr	ip, [sp, #4]
   1317c:	ldm	r6, {r0, r1}
   13180:	mov	r6, r7
   13184:	stm	ip, {r0, r1}
   13188:	add	r0, sp, #8256	; 0x2040
   1318c:	ldr	ip, [sp, #12]
   13190:	add	r0, r0, #40	; 0x28
   13194:	ldr	r3, [r0, ip]
   13198:	cmn	r3, #1
   1319c:	beq	13200 <__assert_fail@plt+0x1cc0>
   131a0:	add	fp, r6, r9
   131a4:	ldr	r0, [r8, #32]
   131a8:	rsb	r4, r6, r4
   131ac:	mov	r1, fp
   131b0:	bl	15f64 <close_stdout@@Base+0x2510>
   131b4:	mov	r1, r5
   131b8:	mov	r2, r6
   131bc:	add	r5, r5, r6
   131c0:	mov	r3, r0
   131c4:	add	r0, r0, r9
   131c8:	str	r3, [r8, #32]
   131cc:	bl	112a0 <memcpy@plt>
   131d0:	cmp	r7, #0
   131d4:	mov	r9, fp
   131d8:	bne	13130 <__assert_fail@plt+0x1bf0>
   131dc:	add	ip, sp, #8256	; 0x2040
   131e0:	ldr	r6, [sp, #12]
   131e4:	add	ip, ip, #40	; 0x28
   131e8:	ldr	r3, [ip, r6]
   131ec:	cmp	r3, #10
   131f0:	beq	13200 <__assert_fail@plt+0x1cc0>
   131f4:	ldr	r2, [r8, #44]	; 0x2c
   131f8:	cmp	r3, r2
   131fc:	bne	13130 <__assert_fail@plt+0x1bf0>
   13200:	cmp	r9, #0
   13204:	ble	132f0 <__assert_fail@plt+0x1db0>
   13208:	cmp	r7, #0
   1320c:	bne	13238 <__assert_fail@plt+0x1cf8>
   13210:	ldr	r6, [pc, #724]	; 134ec <__assert_fail@plt+0x1fac>
   13214:	add	r1, sp, #8256	; 0x2040
   13218:	movw	r8, #57304	; 0xdfd8
   1321c:	add	r1, r1, #40	; 0x28
   13220:	add	r6, pc, r6
   13224:	movt	r8, #65535	; 0xffff
   13228:	ldr	r2, [r6, #44]	; 0x2c
   1322c:	ldr	r3, [r1, r8]
   13230:	cmp	r3, r2
   13234:	beq	133ec <__assert_fail@plt+0x1eac>
   13238:	ldr	r3, [pc, #688]	; 134f0 <__assert_fail@plt+0x1fb0>
   1323c:	add	r3, pc, r3
   13240:	ldrb	r2, [r3, #28]
   13244:	cmp	r2, #0
   13248:	bne	133e4 <__assert_fail@plt+0x1ea4>
   1324c:	ldr	lr, [pc, #652]	; 134e0 <__assert_fail@plt+0x1fa0>
   13250:	mov	r2, r9
   13254:	ldr	ip, [sp, #20]
   13258:	mov	r1, #1
   1325c:	ldr	r0, [r3, #32]
   13260:	ldr	r6, [ip, lr]
   13264:	ldr	r3, [r6]
   13268:	bl	112b8 <fwrite_unlocked@plt>
   1326c:	cmp	r7, #0
   13270:	bne	13290 <__assert_fail@plt+0x1d50>
   13274:	add	r0, sp, #8256	; 0x2040
   13278:	movw	r3, #57304	; 0xdfd8
   1327c:	add	r0, r0, #40	; 0x28
   13280:	movt	r3, #65535	; 0xffff
   13284:	ldr	r3, [r0, r3]
   13288:	cmp	r3, #10
   1328c:	beq	133e4 <__assert_fail@plt+0x1ea4>
   13290:	ldr	r0, [r6]
   13294:	ldr	r3, [r0, #20]
   13298:	ldr	r2, [r0, #24]
   1329c:	cmp	r3, r2
   132a0:	bcs	1349c <__assert_fail@plt+0x1f5c>
   132a4:	add	r2, r3, #1
   132a8:	mov	r8, #1
   132ac:	str	r2, [r0, #20]
   132b0:	mov	r2, #10
   132b4:	strb	r2, [r3]
   132b8:	b	12e7c <__assert_fail@plt+0x193c>
   132bc:	ldr	r3, [sl]
   132c0:	tst	r3, #48	; 0x30
   132c4:	beq	1333c <__assert_fail@plt+0x1dfc>
   132c8:	cmp	r4, #0
   132cc:	bne	13138 <__assert_fail@plt+0x1bf8>
   132d0:	add	r0, sp, #8256	; 0x2040
   132d4:	movw	r3, #57304	; 0xdfd8
   132d8:	add	r0, r0, #40	; 0x28
   132dc:	movt	r3, #65535	; 0xffff
   132e0:	cmp	r9, #0
   132e4:	mvn	r2, #0
   132e8:	str	r2, [r0, r3]
   132ec:	bgt	13208 <__assert_fail@plt+0x1cc8>
   132f0:	add	r0, sp, #8256	; 0x2040
   132f4:	movw	r3, #57304	; 0xdfd8
   132f8:	add	r0, r0, #40	; 0x28
   132fc:	movt	r3, #65535	; 0xffff
   13300:	ldr	r3, [r0, r3]
   13304:	cmn	r3, #1
   13308:	bne	13208 <__assert_fail@plt+0x1cc8>
   1330c:	ldr	r6, [sp, #60]	; 0x3c
   13310:	add	r0, sp, #8192	; 0x2000
   13314:	ldr	r2, [r0, #100]	; 0x64
   13318:	ldr	r3, [r6]
   1331c:	cmp	r2, r3
   13320:	bne	134b8 <__assert_fail@plt+0x1f78>
   13324:	add	sp, sp, #8256	; 0x2040
   13328:	add	sp, sp, #44	; 0x2c
   1332c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13330:	mov	r7, r6
   13334:	mov	r6, #1
   13338:	b	13188 <__assert_fail@plt+0x1c48>
   1333c:	mov	r1, r5
   13340:	mov	r2, r4
   13344:	movw	r3, #8208	; 0x2010
   13348:	add	r0, sp, #84	; 0x54
   1334c:	bl	11270 <__memmove_chk@plt>
   13350:	add	ip, sp, #84	; 0x54
   13354:	add	r0, ip, r4
   13358:	mov	r1, #1
   1335c:	mov	r2, #8192	; 0x2000
   13360:	mov	r3, sl
   13364:	mov	r5, ip
   13368:	bl	11504 <fread_unlocked@plt>
   1336c:	add	r4, r4, r0
   13370:	b	132c8 <__assert_fail@plt+0x1d88>
   13374:	rsb	r4, r6, r4
   13378:	add	r5, r5, r6
   1337c:	cmp	r4, #0
   13380:	beq	133c4 <__assert_fail@plt+0x1e84>
   13384:	add	r1, sp, #8256	; 0x2040
   13388:	movw	r3, #57304	; 0xdfd8
   1338c:	add	r1, r1, #40	; 0x28
   13390:	movt	r3, #65535	; 0xffff
   13394:	ldr	r3, [r1, r3]
   13398:	cmp	r7, #0
   1339c:	bne	13030 <__assert_fail@plt+0x1af0>
   133a0:	ldr	ip, [sp, #44]	; 0x2c
   133a4:	ldr	r2, [ip, #44]	; 0x2c
   133a8:	cmp	r3, r2
   133ac:	beq	13424 <__assert_fail@plt+0x1ee4>
   133b0:	cmn	r3, #1
   133b4:	beq	1303c <__assert_fail@plt+0x1afc>
   133b8:	cmp	r3, #10
   133bc:	bne	12e7c <__assert_fail@plt+0x193c>
   133c0:	b	1303c <__assert_fail@plt+0x1afc>
   133c4:	add	r6, sp, #8256	; 0x2040
   133c8:	movw	r2, #57304	; 0xdfd8
   133cc:	add	r6, r6, #40	; 0x28
   133d0:	movt	r2, #65535	; 0xffff
   133d4:	mvn	r1, #0
   133d8:	mov	r3, r1
   133dc:	str	r1, [r6, r2]
   133e0:	b	13398 <__assert_fail@plt+0x1e58>
   133e4:	mov	r8, #1
   133e8:	b	12e7c <__assert_fail@plt+0x193c>
   133ec:	ldr	r2, [r6, #12]
   133f0:	ldr	r1, [r2]
   133f4:	cmp	r1, #1
   133f8:	bls	13440 <__assert_fail@plt+0x1f00>
   133fc:	ldr	r1, [r2, #4]
   13400:	cmp	r1, #1
   13404:	movhi	r8, #2
   13408:	bhi	12ea8 <__assert_fail@plt+0x1968>
   1340c:	ldr	r1, [pc, #224]	; 134f4 <__assert_fail@plt+0x1fb4>
   13410:	add	r2, r2, #8
   13414:	mov	r8, #2
   13418:	add	r1, pc, r1
   1341c:	str	r2, [r1, #12]
   13420:	b	12ea8 <__assert_fail@plt+0x1968>
   13424:	ldr	r3, [ip, #12]
   13428:	add	r8, r8, #1
   1342c:	ldr	r2, [r3, #4]
   13430:	cmp	r8, r2
   13434:	addhi	r3, r3, #8
   13438:	strhi	r3, [ip, #12]
   1343c:	b	12e7c <__assert_fail@plt+0x193c>
   13440:	ldr	ip, [sp, #20]
   13444:	mov	r1, #1
   13448:	ldr	r3, [pc, #144]	; 134e0 <__assert_fail@plt+0x1fa0>
   1344c:	sub	r2, r9, #1
   13450:	str	r1, [sp, #32]
   13454:	ldr	r0, [r6, #32]
   13458:	ldr	r3, [ip, r3]
   1345c:	ldr	r3, [r3]
   13460:	bl	112b8 <fwrite_unlocked@plt>
   13464:	add	r0, sp, #8256	; 0x2040
   13468:	add	r0, r0, #40	; 0x28
   1346c:	ldr	r2, [r6, #12]
   13470:	ldr	r3, [r0, r8]
   13474:	b	133fc <__assert_fail@plt+0x1ebc>
   13478:	bl	11498 <__uflow@plt>
   1347c:	cmn	r0, #1
   13480:	streq	r0, [sp, #52]	; 0x34
   13484:	addeq	r1, sp, #8256	; 0x2040
   13488:	addeq	r1, r1, #40	; 0x28
   1348c:	streq	r0, [r1, r4]
   13490:	beq	12dfc <__assert_fail@plt+0x18bc>
   13494:	str	r0, [sp, #52]	; 0x34
   13498:	b	12dd8 <__assert_fail@plt+0x1898>
   1349c:	mov	r1, #10
   134a0:	mov	r8, #1
   134a4:	bl	114a4 <__overflow@plt>
   134a8:	b	12e7c <__assert_fail@plt+0x193c>
   134ac:	mov	r1, #10
   134b0:	bl	114a4 <__overflow@plt>
   134b4:	b	1309c <__assert_fail@plt+0x1b5c>
   134b8:	bl	112dc <__stack_chk_fail@plt>
   134bc:	andeq	r5, r1, r4, lsr #5
   134c0:	andeq	r0, r0, r8, lsr #2
   134c4:	andeq	r5, r1, r0, lsr r4
   134c8:	andeq	r5, r1, r4, lsr #7
   134cc:	andeq	r5, r1, ip, lsl #7
   134d0:	andeq	r5, r1, r4, ror r3
   134d4:	andeq	r5, r1, ip, ror #6
   134d8:	andeq	r5, r1, ip, asr #6
   134dc:	andeq	r5, r1, r4, asr #6
   134e0:	andeq	r0, r0, r8, asr #2
   134e4:	andeq	r5, r1, r0, lsr #5
   134e8:	andeq	r5, r1, r8, lsl #1
   134ec:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   134f0:	andeq	r4, r1, r4, ror pc
   134f4:	muleq	r1, r8, sp
   134f8:	push	{r4, r5, r6, lr}
   134fc:	mov	r5, r0
   13500:	ldrb	r3, [r0]
   13504:	ldr	r6, [pc, #556]	; 13738 <__assert_fail@plt+0x21f8>
   13508:	cmp	r3, #45	; 0x2d
   1350c:	add	r6, pc, r6
   13510:	beq	135a8 <__assert_fail@plt+0x2068>
   13514:	ldr	r1, [pc, #544]	; 1373c <__assert_fail@plt+0x21fc>
   13518:	mov	r0, r5
   1351c:	add	r1, pc, r1
   13520:	bl	114e0 <fopen64@plt>
   13524:	subs	r4, r0, #0
   13528:	beq	13698 <__assert_fail@plt+0x2158>
   1352c:	mov	r0, r4
   13530:	mov	r1, #2
   13534:	bl	13c14 <close_stdout@@Base+0x1c0>
   13538:	bl	1133c <__ctype_get_mb_cur_max@plt>
   1353c:	cmp	r0, #1
   13540:	bls	13558 <__assert_fail@plt+0x2018>
   13544:	ldr	r3, [pc, #500]	; 13740 <__assert_fail@plt+0x2200>
   13548:	add	r3, pc, r3
   1354c:	ldr	r0, [r3, #52]	; 0x34
   13550:	cmp	r0, #0
   13554:	beq	135d4 <__assert_fail@plt+0x2094>
   13558:	ldr	r3, [pc, #484]	; 13744 <__assert_fail@plt+0x2204>
   1355c:	mov	r0, r4
   13560:	add	r3, pc, r3
   13564:	ldr	r3, [r3, #56]	; 0x38
   13568:	cmp	r3, #3
   1356c:	beq	1364c <__assert_fail@plt+0x210c>
   13570:	bl	1235c <__assert_fail@plt+0xe1c>
   13574:	ldr	r3, [r4]
   13578:	tst	r3, #32
   1357c:	bne	13628 <__assert_fail@plt+0x20e8>
   13580:	ldrb	r3, [r5]
   13584:	mov	r0, r4
   13588:	cmp	r3, #45	; 0x2d
   1358c:	bne	135f4 <__assert_fail@plt+0x20b4>
   13590:	ldrb	r3, [r5, #1]
   13594:	cmp	r3, #0
   13598:	bne	135f4 <__assert_fail@plt+0x20b4>
   1359c:	bl	114d4 <clearerr_unlocked@plt>
   135a0:	mov	r0, #1
   135a4:	pop	{r4, r5, r6, pc}
   135a8:	ldrb	r3, [r0, #1]
   135ac:	cmp	r3, #0
   135b0:	bne	13514 <__assert_fail@plt+0x1fd4>
   135b4:	ldr	r2, [pc, #396]	; 13748 <__assert_fail@plt+0x2208>
   135b8:	mov	r1, #1
   135bc:	ldr	r3, [pc, #392]	; 1374c <__assert_fail@plt+0x220c>
   135c0:	add	r2, pc, r2
   135c4:	strb	r1, [r2, #48]	; 0x30
   135c8:	ldr	r3, [r6, r3]
   135cc:	ldr	r4, [r3]
   135d0:	b	1352c <__assert_fail@plt+0x1fec>
   135d4:	ldr	r2, [r3, #56]	; 0x38
   135d8:	cmp	r2, #2
   135dc:	beq	13654 <__assert_fail@plt+0x2114>
   135e0:	cmp	r2, #3
   135e4:	beq	13608 <__assert_fail@plt+0x20c8>
   135e8:	cmp	r2, #1
   135ec:	beq	13660 <__assert_fail@plt+0x2120>
   135f0:	bl	1151c <abort@plt>
   135f4:	bl	1618c <close_stdout@@Base+0x2738>
   135f8:	cmn	r0, #1
   135fc:	beq	13674 <__assert_fail@plt+0x2134>
   13600:	mov	r0, #1
   13604:	pop	{r4, r5, r6, pc}
   13608:	ldr	r3, [pc, #320]	; 13750 <__assert_fail@plt+0x2210>
   1360c:	ldr	r3, [r6, r3]
   13610:	ldr	r3, [r3]
   13614:	cmp	r3, #1
   13618:	beq	136bc <__assert_fail@plt+0x217c>
   1361c:	mov	r0, r4
   13620:	bl	12d3c <__assert_fail@plt+0x17fc>
   13624:	b	13574 <__assert_fail@plt+0x2034>
   13628:	bl	113fc <__errno_location@plt>
   1362c:	ldr	r2, [pc, #288]	; 13754 <__assert_fail@plt+0x2214>
   13630:	mov	r3, r5
   13634:	add	r2, pc, r2
   13638:	ldr	r1, [r0]
   1363c:	mov	r0, #0
   13640:	bl	1136c <error@plt>
   13644:	mov	r0, #0
   13648:	pop	{r4, r5, r6, pc}
   1364c:	bl	12538 <__assert_fail@plt+0xff8>
   13650:	b	13574 <__assert_fail@plt+0x2034>
   13654:	mov	r0, r4
   13658:	bl	12a2c <__assert_fail@plt+0x14ec>
   1365c:	b	13574 <__assert_fail@plt+0x2034>
   13660:	ldr	r3, [r3, #60]	; 0x3c
   13664:	mov	r0, r4
   13668:	cmp	r3, #0
   1366c:	beq	13570 <__assert_fail@plt+0x2030>
   13670:	b	13658 <__assert_fail@plt+0x2118>
   13674:	bl	113fc <__errno_location@plt>
   13678:	ldr	r2, [pc, #216]	; 13758 <__assert_fail@plt+0x2218>
   1367c:	mov	r3, r5
   13680:	add	r2, pc, r2
   13684:	ldr	r1, [r0]
   13688:	mov	r0, #0
   1368c:	bl	1136c <error@plt>
   13690:	mov	r0, #0
   13694:	pop	{r4, r5, r6, pc}
   13698:	bl	113fc <__errno_location@plt>
   1369c:	ldr	r2, [pc, #184]	; 1375c <__assert_fail@plt+0x221c>
   136a0:	mov	r3, r5
   136a4:	add	r2, pc, r2
   136a8:	ldr	r1, [r0]
   136ac:	mov	r0, r4
   136b0:	bl	1136c <error@plt>
   136b4:	mov	r0, r4
   136b8:	pop	{r4, r5, r6, pc}
   136bc:	mov	r1, r0
   136c0:	bl	114b0 <setlocale@plt>
   136c4:	subs	r6, r0, #0
   136c8:	beq	1361c <__assert_fail@plt+0x20dc>
   136cc:	ldr	r1, [pc, #140]	; 13760 <__assert_fail@plt+0x2220>
   136d0:	add	r1, pc, r1
   136d4:	bl	11228 <strstr@plt>
   136d8:	cmp	r0, #0
   136dc:	beq	136ec <__assert_fail@plt+0x21ac>
   136e0:	mov	r0, r4
   136e4:	bl	12538 <__assert_fail@plt+0xff8>
   136e8:	b	13574 <__assert_fail@plt+0x2034>
   136ec:	ldr	r1, [pc, #112]	; 13764 <__assert_fail@plt+0x2224>
   136f0:	mov	r0, r6
   136f4:	add	r1, pc, r1
   136f8:	bl	11228 <strstr@plt>
   136fc:	cmp	r0, #0
   13700:	bne	136e0 <__assert_fail@plt+0x21a0>
   13704:	ldr	r1, [pc, #92]	; 13768 <__assert_fail@plt+0x2228>
   13708:	mov	r0, r6
   1370c:	add	r1, pc, r1
   13710:	bl	11228 <strstr@plt>
   13714:	cmp	r0, #0
   13718:	bne	136e0 <__assert_fail@plt+0x21a0>
   1371c:	ldr	r1, [pc, #72]	; 1376c <__assert_fail@plt+0x222c>
   13720:	mov	r0, r6
   13724:	add	r1, pc, r1
   13728:	bl	11228 <strstr@plt>
   1372c:	cmp	r0, #0
   13730:	bne	136e0 <__assert_fail@plt+0x21a0>
   13734:	b	1361c <__assert_fail@plt+0x20dc>
   13738:	andeq	r4, r1, ip, ror #21
   1373c:	andeq	r4, r0, r8, lsl #3
   13740:	andeq	r4, r1, r8, ror #24
   13744:	andeq	r4, r1, r0, asr ip
   13748:	strdeq	r4, [r1], -r0
   1374c:	andeq	r0, r0, r4, asr #2
   13750:	andeq	r0, r0, ip, asr #2
   13754:	andeq	r4, r0, ip, asr #1
   13758:	andeq	r4, r0, r0, lsl #1
   1375c:	andeq	r4, r0, ip, asr r0
   13760:	strdeq	r3, [r0], -r0
   13764:	ldrdeq	r3, [r0], -r4
   13768:	andeq	r3, r0, r4, asr #11
   1376c:			; <UNDEFINED> instruction: 0x000035b4
   13770:	push	{r4, r5, r6, lr}
   13774:	subs	r4, r0, #0
   13778:	ldr	r5, [pc, #596]	; 139d4 <__assert_fail@plt+0x2494>
   1377c:	add	r5, pc, r5
   13780:	beq	137c8 <__assert_fail@plt+0x2288>
   13784:	ldr	r3, [pc, #588]	; 139d8 <__assert_fail@plt+0x2498>
   13788:	mov	r2, #5
   1378c:	ldr	r1, [pc, #584]	; 139dc <__assert_fail@plt+0x249c>
   13790:	mov	r0, #0
   13794:	ldr	r3, [r5, r3]
   13798:	add	r1, pc, r1
   1379c:	ldr	r6, [r3]
   137a0:	bl	112d0 <dcgettext@plt>
   137a4:	ldr	r3, [pc, #564]	; 139e0 <__assert_fail@plt+0x24a0>
   137a8:	mov	r1, #1
   137ac:	ldr	r3, [r5, r3]
   137b0:	ldr	r3, [r3]
   137b4:	mov	r2, r0
   137b8:	mov	r0, r6
   137bc:	bl	11450 <__fprintf_chk@plt>
   137c0:	mov	r0, r4
   137c4:	bl	113d8 <exit@plt>
   137c8:	ldr	r1, [pc, #532]	; 139e4 <__assert_fail@plt+0x24a4>
   137cc:	mov	r2, #5
   137d0:	add	r1, pc, r1
   137d4:	bl	112d0 <dcgettext@plt>
   137d8:	ldr	r3, [pc, #512]	; 139e0 <__assert_fail@plt+0x24a0>
   137dc:	ldr	r6, [r5, r3]
   137e0:	ldr	r2, [r6]
   137e4:	mov	r1, r0
   137e8:	mov	r0, #1
   137ec:	bl	11438 <__printf_chk@plt>
   137f0:	ldr	r1, [pc, #496]	; 139e8 <__assert_fail@plt+0x24a8>
   137f4:	mov	r2, #5
   137f8:	mov	r0, r4
   137fc:	add	r1, pc, r1
   13800:	bl	112d0 <dcgettext@plt>
   13804:	ldr	r3, [pc, #480]	; 139ec <__assert_fail@plt+0x24ac>
   13808:	ldr	r5, [r5, r3]
   1380c:	ldr	r1, [r5]
   13810:	bl	1121c <fputs_unlocked@plt>
   13814:	ldr	r1, [pc, #468]	; 139f0 <__assert_fail@plt+0x24b0>
   13818:	mov	r2, #5
   1381c:	mov	r0, r4
   13820:	add	r1, pc, r1
   13824:	bl	112d0 <dcgettext@plt>
   13828:	ldr	r1, [r5]
   1382c:	bl	1121c <fputs_unlocked@plt>
   13830:	ldr	r1, [pc, #444]	; 139f4 <__assert_fail@plt+0x24b4>
   13834:	mov	r2, #5
   13838:	mov	r0, r4
   1383c:	add	r1, pc, r1
   13840:	bl	112d0 <dcgettext@plt>
   13844:	ldr	r1, [r5]
   13848:	bl	1121c <fputs_unlocked@plt>
   1384c:	ldr	r1, [pc, #420]	; 139f8 <__assert_fail@plt+0x24b8>
   13850:	mov	r2, #5
   13854:	mov	r0, r4
   13858:	add	r1, pc, r1
   1385c:	bl	112d0 <dcgettext@plt>
   13860:	ldr	r1, [r5]
   13864:	bl	1121c <fputs_unlocked@plt>
   13868:	ldr	r1, [pc, #396]	; 139fc <__assert_fail@plt+0x24bc>
   1386c:	mov	r2, #5
   13870:	mov	r0, r4
   13874:	add	r1, pc, r1
   13878:	bl	112d0 <dcgettext@plt>
   1387c:	ldr	r1, [r5]
   13880:	bl	1121c <fputs_unlocked@plt>
   13884:	ldr	r1, [pc, #372]	; 13a00 <__assert_fail@plt+0x24c0>
   13888:	mov	r2, #5
   1388c:	mov	r0, r4
   13890:	add	r1, pc, r1
   13894:	bl	112d0 <dcgettext@plt>
   13898:	ldr	r1, [r5]
   1389c:	bl	1121c <fputs_unlocked@plt>
   138a0:	ldr	r1, [pc, #348]	; 13a04 <__assert_fail@plt+0x24c4>
   138a4:	mov	r2, #5
   138a8:	mov	r0, r4
   138ac:	add	r1, pc, r1
   138b0:	bl	112d0 <dcgettext@plt>
   138b4:	ldr	r1, [r5]
   138b8:	bl	1121c <fputs_unlocked@plt>
   138bc:	ldr	r1, [pc, #324]	; 13a08 <__assert_fail@plt+0x24c8>
   138c0:	mov	r2, #5
   138c4:	mov	r0, r4
   138c8:	add	r1, pc, r1
   138cc:	bl	112d0 <dcgettext@plt>
   138d0:	ldr	r1, [r5]
   138d4:	bl	1121c <fputs_unlocked@plt>
   138d8:	ldr	r1, [pc, #300]	; 13a0c <__assert_fail@plt+0x24cc>
   138dc:	mov	r2, #5
   138e0:	mov	r0, r4
   138e4:	add	r1, pc, r1
   138e8:	bl	112d0 <dcgettext@plt>
   138ec:	ldr	r1, [r5]
   138f0:	bl	1121c <fputs_unlocked@plt>
   138f4:	ldr	r1, [pc, #276]	; 13a10 <__assert_fail@plt+0x24d0>
   138f8:	mov	r2, #5
   138fc:	mov	r0, r4
   13900:	add	r1, pc, r1
   13904:	bl	112d0 <dcgettext@plt>
   13908:	ldr	r1, [r5]
   1390c:	bl	1121c <fputs_unlocked@plt>
   13910:	ldr	r1, [pc, #252]	; 13a14 <__assert_fail@plt+0x24d4>
   13914:	mov	r2, #5
   13918:	mov	r0, r4
   1391c:	add	r1, pc, r1
   13920:	bl	112d0 <dcgettext@plt>
   13924:	ldr	r2, [pc, #236]	; 13a18 <__assert_fail@plt+0x24d8>
   13928:	ldr	r3, [pc, #236]	; 13a1c <__assert_fail@plt+0x24dc>
   1392c:	add	r2, pc, r2
   13930:	add	r3, pc, r3
   13934:	mov	r1, r0
   13938:	mov	r0, #1
   1393c:	bl	11438 <__printf_chk@plt>
   13940:	mov	r0, #5
   13944:	mov	r1, r4
   13948:	bl	114b0 <setlocale@plt>
   1394c:	cmp	r0, #0
   13950:	beq	1396c <__assert_fail@plt+0x242c>
   13954:	ldr	r1, [pc, #196]	; 13a20 <__assert_fail@plt+0x24e0>
   13958:	mov	r2, #3
   1395c:	add	r1, pc, r1
   13960:	bl	11510 <strncmp@plt>
   13964:	cmp	r0, #0
   13968:	bne	139a0 <__assert_fail@plt+0x2460>
   1396c:	ldr	r1, [pc, #176]	; 13a24 <__assert_fail@plt+0x24e4>
   13970:	mov	r2, #5
   13974:	mov	r0, #0
   13978:	add	r1, pc, r1
   1397c:	bl	112d0 <dcgettext@plt>
   13980:	mov	r5, r0
   13984:	ldr	r0, [r6]
   13988:	bl	13b6c <close_stdout@@Base+0x118>
   1398c:	mov	r1, r5
   13990:	mov	r2, r0
   13994:	mov	r0, #1
   13998:	bl	11438 <__printf_chk@plt>
   1399c:	b	137c0 <__assert_fail@plt+0x2280>
   139a0:	ldr	r1, [pc, #128]	; 13a28 <__assert_fail@plt+0x24e8>
   139a4:	mov	r2, #5
   139a8:	mov	r0, r4
   139ac:	add	r1, pc, r1
   139b0:	bl	112d0 <dcgettext@plt>
   139b4:	mov	r5, r0
   139b8:	ldr	r0, [r6]
   139bc:	bl	13b6c <close_stdout@@Base+0x118>
   139c0:	mov	r1, r5
   139c4:	mov	r2, r0
   139c8:	mov	r0, #1
   139cc:	bl	11438 <__printf_chk@plt>
   139d0:	b	1396c <__assert_fail@plt+0x242c>
   139d4:	andeq	r4, r1, ip, ror r8
   139d8:	andeq	r0, r0, r4, lsr r1
   139dc:	andeq	r3, r0, r8, asr #10
   139e0:	andeq	r0, r0, r8, asr r1
   139e4:	andeq	r3, r0, r8, lsr r5
   139e8:	andeq	r3, r0, ip, lsr #10
   139ec:	andeq	r0, r0, r8, asr #2
   139f0:	andeq	r3, r0, ip, asr #10
   139f4:	andeq	r3, r0, ip, ror r5
   139f8:	andeq	r3, r0, r4, lsl r6
   139fc:	andeq	r3, r0, r8, lsl #14
   13a00:	andeq	r3, r0, r0, ror #14
   13a04:	andeq	r3, r0, r8, lsl r8
   13a08:	andeq	r3, r0, ip, lsr #16
   13a0c:	andeq	r3, r0, r8, asr #16
   13a10:	strdeq	r3, [r0], -r8
   13a14:	andeq	r3, r0, ip, lsl sl
   13a18:	andeq	r3, r0, r4, lsr #20
   13a1c:	andeq	r3, r0, r0, lsr sl
   13a20:	andeq	r3, r0, ip, lsr #20
   13a24:	andeq	r3, r0, ip, asr sl
   13a28:	andeq	r3, r0, r0, ror #19
   13a2c:	ldr	r3, [pc, #8]	; 13a3c <__assert_fail@plt+0x24fc>
   13a30:	add	r3, pc, r3
   13a34:	str	r0, [r3]
   13a38:	bx	lr
   13a3c:	andeq	r4, r1, ip, asr #15
   13a40:	ldr	r3, [pc, #8]	; 13a50 <__assert_fail@plt+0x2510>
   13a44:	add	r3, pc, r3
   13a48:	strb	r0, [r3, #4]
   13a4c:	bx	lr
   13a50:			; <UNDEFINED> instruction: 0x000147b8

00013a54 <close_stdout@@Base>:
   13a54:	push	{r4, r5, r6, r7, lr}
   13a58:	sub	sp, sp, #12
   13a5c:	ldr	r4, [pc, #228]	; 13b48 <close_stdout@@Base+0xf4>
   13a60:	ldr	r3, [pc, #228]	; 13b4c <close_stdout@@Base+0xf8>
   13a64:	add	r4, pc, r4
   13a68:	ldr	r3, [r4, r3]
   13a6c:	ldr	r0, [r3]
   13a70:	bl	16370 <close_stdout@@Base+0x291c>
   13a74:	cmp	r0, #0
   13a78:	beq	13aa0 <close_stdout@@Base+0x4c>
   13a7c:	ldr	r3, [pc, #204]	; 13b50 <close_stdout@@Base+0xfc>
   13a80:	add	r3, pc, r3
   13a84:	ldrb	r3, [r3, #4]
   13a88:	cmp	r3, #0
   13a8c:	beq	13ac0 <close_stdout@@Base+0x6c>
   13a90:	bl	113fc <__errno_location@plt>
   13a94:	ldr	r3, [r0]
   13a98:	cmp	r3, #32
   13a9c:	bne	13ac0 <close_stdout@@Base+0x6c>
   13aa0:	ldr	r3, [pc, #172]	; 13b54 <close_stdout@@Base+0x100>
   13aa4:	ldr	r3, [r4, r3]
   13aa8:	ldr	r0, [r3]
   13aac:	bl	16370 <close_stdout@@Base+0x291c>
   13ab0:	cmp	r0, #0
   13ab4:	bne	13b14 <close_stdout@@Base+0xc0>
   13ab8:	add	sp, sp, #12
   13abc:	pop	{r4, r5, r6, r7, pc}
   13ac0:	ldr	r1, [pc, #144]	; 13b58 <close_stdout@@Base+0x104>
   13ac4:	mov	r0, #0
   13ac8:	mov	r2, #5
   13acc:	add	r1, pc, r1
   13ad0:	bl	112d0 <dcgettext@plt>
   13ad4:	ldr	r3, [pc, #128]	; 13b5c <close_stdout@@Base+0x108>
   13ad8:	ldr	r5, [pc, r3]
   13adc:	cmp	r5, #0
   13ae0:	mov	r6, r0
   13ae4:	beq	13b24 <close_stdout@@Base+0xd0>
   13ae8:	bl	113fc <__errno_location@plt>
   13aec:	ldr	r7, [r0]
   13af0:	mov	r0, r5
   13af4:	bl	1580c <close_stdout@@Base+0x1db8>
   13af8:	ldr	r2, [pc, #96]	; 13b60 <close_stdout@@Base+0x10c>
   13afc:	str	r6, [sp]
   13b00:	mov	r1, r7
   13b04:	add	r2, pc, r2
   13b08:	mov	r3, r0
   13b0c:	mov	r0, #0
   13b10:	bl	1136c <error@plt>
   13b14:	ldr	r3, [pc, #72]	; 13b64 <close_stdout@@Base+0x110>
   13b18:	ldr	r3, [r4, r3]
   13b1c:	ldr	r0, [r3]
   13b20:	bl	11294 <_exit@plt>
   13b24:	bl	113fc <__errno_location@plt>
   13b28:	ldr	r2, [pc, #56]	; 13b68 <close_stdout@@Base+0x114>
   13b2c:	add	r2, pc, r2
   13b30:	mov	r3, r0
   13b34:	mov	r0, r5
   13b38:	ldr	r1, [r3]
   13b3c:	mov	r3, r6
   13b40:	bl	1136c <error@plt>
   13b44:	b	13b14 <close_stdout@@Base+0xc0>
   13b48:	muleq	r1, r4, r5
   13b4c:	andeq	r0, r0, r8, asr #2
   13b50:	andeq	r4, r1, ip, ror r7
   13b54:	andeq	r0, r0, r4, lsr r1
   13b58:	andeq	r3, r0, r4, lsr #24
   13b5c:	andeq	r4, r1, r4, lsr #14
   13b60:	strdeq	r3, [r0], -r8
   13b64:	andeq	r0, r0, r0, asr r1
   13b68:	ldrdeq	r3, [r0], -r4
   13b6c:	ldrb	r3, [r0]
   13b70:	cmp	r3, #47	; 0x2f
   13b74:	bne	13b90 <close_stdout@@Base+0x13c>
   13b78:	add	r2, r0, #1
   13b7c:	mov	r0, r2
   13b80:	add	r2, r2, #1
   13b84:	ldrb	r3, [r0]
   13b88:	cmp	r3, #47	; 0x2f
   13b8c:	beq	13b7c <close_stdout@@Base+0x128>
   13b90:	cmp	r3, #0
   13b94:	bxeq	lr
   13b98:	mov	r2, r0
   13b9c:	mov	r1, #0
   13ba0:	cmp	r3, #47	; 0x2f
   13ba4:	moveq	r1, #1
   13ba8:	beq	13bb8 <close_stdout@@Base+0x164>
   13bac:	cmp	r1, #0
   13bb0:	movne	r0, r2
   13bb4:	movne	r1, #0
   13bb8:	ldrb	r3, [r2, #1]!
   13bbc:	cmp	r3, #0
   13bc0:	bne	13ba0 <close_stdout@@Base+0x14c>
   13bc4:	bx	lr
   13bc8:	push	{r4, lr}
   13bcc:	mov	r4, r0
   13bd0:	bl	113e4 <strlen@plt>
   13bd4:	cmp	r0, #1
   13bd8:	popls	{r4, pc}
   13bdc:	sub	r3, r0, #1
   13be0:	ldrb	r2, [r4, r3]
   13be4:	cmp	r2, #47	; 0x2f
   13be8:	popne	{r4, pc}
   13bec:	mov	r0, r3
   13bf0:	cmp	r0, #1
   13bf4:	sub	r3, r3, #1
   13bf8:	beq	13c0c <close_stdout@@Base+0x1b8>
   13bfc:	ldrb	r2, [r4, r3]
   13c00:	cmp	r2, #47	; 0x2f
   13c04:	popne	{r4, pc}
   13c08:	b	13bec <close_stdout@@Base+0x198>
   13c0c:	pop	{r4, pc}
   13c10:	b	1124c <posix_fadvise64@plt>
   13c14:	cmp	r0, #0
   13c18:	push	{r4, r5, r6, lr}
   13c1c:	mov	r6, r1
   13c20:	sub	sp, sp, #16
   13c24:	beq	13c48 <close_stdout@@Base+0x1f4>
   13c28:	mov	r4, #0
   13c2c:	mov	r5, #0
   13c30:	bl	11444 <fileno@plt>
   13c34:	str	r6, [sp, #8]
   13c38:	mov	r2, r4
   13c3c:	mov	r3, r5
   13c40:	strd	r4, [sp]
   13c44:	bl	13c10 <close_stdout@@Base+0x1bc>
   13c48:	add	sp, sp, #16
   13c4c:	pop	{r4, r5, r6, pc}
   13c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c54:	sub	sp, sp, #52	; 0x34
   13c58:	ldr	ip, [pc, #784]	; 13f70 <close_stdout@@Base+0x51c>
   13c5c:	mov	sl, r3
   13c60:	str	r0, [sp, #24]
   13c64:	ldr	r0, [pc, #776]	; 13f74 <close_stdout@@Base+0x520>
   13c68:	add	ip, pc, ip
   13c6c:	str	r1, [sp, #28]
   13c70:	ldr	r1, [sp, #24]
   13c74:	mov	r3, ip
   13c78:	str	r2, [sp, #16]
   13c7c:	ldr	r0, [ip, r0]
   13c80:	ldr	r9, [r1]
   13c84:	ldr	r2, [sp, #28]
   13c88:	ldr	r3, [r0]
   13c8c:	cmp	r9, #0
   13c90:	str	r0, [sp, #32]
   13c94:	ldr	r6, [r2]
   13c98:	ldr	r7, [sp, #96]	; 0x60
   13c9c:	str	r3, [sp, #44]	; 0x2c
   13ca0:	beq	13f24 <close_stdout@@Base+0x4d0>
   13ca4:	ldr	r3, [sp, #16]
   13ca8:	cmp	r6, r3
   13cac:	bcc	13cc0 <close_stdout@@Base+0x26c>
   13cb0:	cmp	sl, r6
   13cb4:	cmpls	r6, r3
   13cb8:	rsb	r4, r3, r6
   13cbc:	bne	13cf0 <close_stdout@@Base+0x29c>
   13cc0:	ldr	r2, [sp, #24]
   13cc4:	mvn	r0, #0
   13cc8:	ldr	r3, [sp, #28]
   13ccc:	str	r9, [r2]
   13cd0:	str	r6, [r3]
   13cd4:	ldr	r1, [sp, #32]
   13cd8:	ldr	r2, [sp, #44]	; 0x2c
   13cdc:	ldr	r3, [r1]
   13ce0:	cmp	r2, r3
   13ce4:	bne	13f6c <close_stdout@@Base+0x518>
   13ce8:	add	sp, sp, #52	; 0x34
   13cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf0:	ldr	r1, [sp, #88]	; 0x58
   13cf4:	cmn	r1, #1
   13cf8:	beq	13e50 <close_stdout@@Base+0x3fc>
   13cfc:	ldr	r2, [sp, #92]	; 0x5c
   13d00:	cmn	r2, #1
   13d04:	moveq	r2, r1
   13d08:	str	r2, [sp, #92]	; 0x5c
   13d0c:	ldr	r1, [sp, #16]
   13d10:	add	r2, sp, #40	; 0x28
   13d14:	str	r9, [sp, #12]
   13d18:	add	r3, r1, #-2147483648	; 0x80000000
   13d1c:	add	r5, r9, r1
   13d20:	str	r2, [sp, #8]
   13d24:	str	r3, [sp, #36]	; 0x24
   13d28:	ldr	fp, [sp, #88]	; 0x58
   13d2c:	b	13d74 <close_stdout@@Base+0x320>
   13d30:	mov	r2, r3
   13d34:	mov	r0, r5
   13d38:	mov	r1, r9
   13d3c:	str	r3, [sp]
   13d40:	bl	112a0 <memcpy@plt>
   13d44:	ldr	r3, [sp]
   13d48:	add	r5, r5, r3
   13d4c:	rsb	r4, r3, r4
   13d50:	cmp	r9, #0
   13d54:	beq	13d6c <close_stdout@@Base+0x318>
   13d58:	mov	r0, r7
   13d5c:	ldr	r1, [sp, #40]	; 0x28
   13d60:	bl	163f0 <close_stdout@@Base+0x299c>
   13d64:	cmp	r0, #0
   13d68:	bne	13eb4 <close_stdout@@Base+0x460>
   13d6c:	cmp	r8, #0
   13d70:	bne	13ef4 <close_stdout@@Base+0x4a0>
   13d74:	mov	r0, r7
   13d78:	add	r1, sp, #40	; 0x28
   13d7c:	bl	1628c <close_stdout@@Base+0x2838>
   13d80:	subs	r9, r0, #0
   13d84:	beq	13e5c <close_stdout@@Base+0x408>
   13d88:	cmn	fp, #1
   13d8c:	bne	13ebc <close_stdout@@Base+0x468>
   13d90:	ldr	r1, [sp, #40]	; 0x28
   13d94:	mov	r8, #0
   13d98:	add	r1, r1, #1
   13d9c:	cmp	r4, r1
   13da0:	bcs	13e24 <close_stdout@@Base+0x3d0>
   13da4:	cmp	r6, sl
   13da8:	bcs	13e24 <close_stdout@@Base+0x3d0>
   13dac:	ldr	r0, [sp, #12]
   13db0:	cmp	r6, #63	; 0x3f
   13db4:	addls	r3, r6, #64	; 0x40
   13db8:	lslhi	r3, r6, #1
   13dbc:	rsb	r2, r5, r0
   13dc0:	add	r0, r3, r2
   13dc4:	cmp	r0, r1
   13dc8:	ldr	r0, [sp, #16]
   13dcc:	ldrcc	r3, [sp, #12]
   13dd0:	rsbcc	r5, r3, r5
   13dd4:	addcc	r3, r1, r5
   13dd8:	cmp	r3, sl
   13ddc:	cmpls	r6, r3
   13de0:	movcs	r3, sl
   13de4:	rsb	r1, r0, r3
   13de8:	cmp	r1, #0
   13dec:	blt	13ea4 <close_stdout@@Base+0x450>
   13df0:	mov	r1, r3
   13df4:	ldr	r0, [sp, #12]
   13df8:	str	r2, [sp, #4]
   13dfc:	str	r3, [sp]
   13e00:	bl	112e8 <realloc@plt>
   13e04:	ldr	r2, [sp, #4]
   13e08:	ldr	r3, [sp]
   13e0c:	add	r4, r3, r2
   13e10:	cmp	r0, #0
   13e14:	beq	13eb4 <close_stdout@@Base+0x460>
   13e18:	rsb	r5, r2, r0
   13e1c:	mov	r6, r3
   13e20:	str	r0, [sp, #12]
   13e24:	cmp	r4, #1
   13e28:	bls	13d50 <close_stdout@@Base+0x2fc>
   13e2c:	ldr	r3, [sp, #40]	; 0x28
   13e30:	sub	r2, r4, #1
   13e34:	cmp	r2, r3
   13e38:	movcc	r3, r2
   13e3c:	cmp	r9, #0
   13e40:	bne	13d30 <close_stdout@@Base+0x2dc>
   13e44:	ldr	r2, [sp, #20]
   13e48:	strb	r2, [r5]
   13e4c:	b	13d48 <close_stdout@@Base+0x2f4>
   13e50:	ldr	r0, [sp, #92]	; 0x5c
   13e54:	str	r0, [sp, #88]	; 0x58
   13e58:	b	13d0c <close_stdout@@Base+0x2b8>
   13e5c:	ldr	r3, [r7, #4]
   13e60:	ldr	r2, [r7, #8]
   13e64:	cmp	r3, r2
   13e68:	bcs	13f48 <close_stdout@@Base+0x4f4>
   13e6c:	add	r2, r3, #1
   13e70:	str	r2, [r7, #4]
   13e74:	ldrb	r3, [r3]
   13e78:	str	r3, [sp, #20]
   13e7c:	ldr	r1, [sp, #20]
   13e80:	mov	r2, #1
   13e84:	ldr	r0, [sp, #92]	; 0x5c
   13e88:	str	r2, [sp, #40]	; 0x28
   13e8c:	cmp	fp, r1
   13e90:	cmpne	r0, r1
   13e94:	mov	r1, #2
   13e98:	movne	r8, #0
   13e9c:	moveq	r8, #1
   13ea0:	b	13d9c <close_stdout@@Base+0x348>
   13ea4:	ldr	r1, [sp, #36]	; 0x24
   13ea8:	cmp	r6, r1
   13eac:	mov	r3, r1
   13eb0:	bne	13df0 <close_stdout@@Base+0x39c>
   13eb4:	ldr	r9, [sp, #12]
   13eb8:	b	13cc0 <close_stdout@@Base+0x26c>
   13ebc:	ldr	r8, [sp, #40]	; 0x28
   13ec0:	mov	r1, fp
   13ec4:	ldr	r2, [sp, #92]	; 0x5c
   13ec8:	mov	r3, r8
   13ecc:	bl	13f78 <close_stdout@@Base+0x524>
   13ed0:	cmp	r0, #0
   13ed4:	rsbne	r1, r9, r0
   13ed8:	addeq	r1, r8, #1
   13edc:	movne	r8, #1
   13ee0:	addne	r1, r1, r8
   13ee4:	moveq	r8, r0
   13ee8:	strne	r1, [sp, #40]	; 0x28
   13eec:	addne	r1, r1, r8
   13ef0:	b	13d9c <close_stdout@@Base+0x348>
   13ef4:	ldr	r9, [sp, #12]
   13ef8:	ldr	r3, [sp, #16]
   13efc:	ldr	r1, [sp, #24]
   13f00:	add	r0, r9, r3
   13f04:	ldr	r2, [sp, #28]
   13f08:	subs	r0, r5, r0
   13f0c:	mov	r3, #0
   13f10:	strb	r3, [r5]
   13f14:	mvneq	r0, #0
   13f18:	str	r9, [r1]
   13f1c:	str	r6, [r2]
   13f20:	b	13cd4 <close_stdout@@Base+0x280>
   13f24:	cmp	sl, #64	; 0x40
   13f28:	movcc	r6, sl
   13f2c:	movcs	r6, #64	; 0x40
   13f30:	mov	r0, r6
   13f34:	bl	11390 <malloc@plt>
   13f38:	subs	r9, r0, #0
   13f3c:	bne	13ca4 <close_stdout@@Base+0x250>
   13f40:	mvn	r0, #0
   13f44:	b	13cd4 <close_stdout@@Base+0x280>
   13f48:	mov	r0, r7
   13f4c:	bl	11498 <__uflow@plt>
   13f50:	cmn	r0, #1
   13f54:	str	r0, [sp, #20]
   13f58:	bne	13e7c <close_stdout@@Base+0x428>
   13f5c:	ldr	r9, [sp, #12]
   13f60:	cmp	r5, r9
   13f64:	bne	13ef8 <close_stdout@@Base+0x4a4>
   13f68:	b	13cc0 <close_stdout@@Base+0x26c>
   13f6c:	bl	112dc <__stack_chk_fail@plt>
   13f70:	muleq	r1, r0, r3
   13f74:	andeq	r0, r0, r8, lsr #2
   13f78:	uxtb	r1, r1
   13f7c:	uxtb	r2, r2
   13f80:	cmp	r1, r2
   13f84:	push	{r4, r5, r6, r7, r8, r9, sl}
   13f88:	mov	r6, r0
   13f8c:	beq	14104 <close_stdout@@Base+0x6b0>
   13f90:	cmp	r3, #0
   13f94:	beq	13fe4 <close_stdout@@Base+0x590>
   13f98:	tst	r0, #3
   13f9c:	beq	13ffc <close_stdout@@Base+0x5a8>
   13fa0:	ldrb	r0, [r0]
   13fa4:	cmp	r0, r1
   13fa8:	beq	13ff0 <close_stdout@@Base+0x59c>
   13fac:	cmp	r2, r0
   13fb0:	beq	13ff0 <close_stdout@@Base+0x59c>
   13fb4:	add	ip, r6, #1
   13fb8:	b	13fd8 <close_stdout@@Base+0x584>
   13fbc:	tst	ip, #3
   13fc0:	beq	13ffc <close_stdout@@Base+0x5a8>
   13fc4:	ldrb	r4, [ip], #1
   13fc8:	cmp	r4, r1
   13fcc:	beq	13ff0 <close_stdout@@Base+0x59c>
   13fd0:	cmp	r2, r4
   13fd4:	beq	13ff0 <close_stdout@@Base+0x59c>
   13fd8:	subs	r3, r3, #1
   13fdc:	mov	r6, ip
   13fe0:	bne	13fbc <close_stdout@@Base+0x568>
   13fe4:	mov	r0, #0
   13fe8:	pop	{r4, r5, r6, r7, r8, r9, sl}
   13fec:	bx	lr
   13ff0:	mov	r0, r6
   13ff4:	pop	{r4, r5, r6, r7, r8, r9, sl}
   13ff8:	bx	lr
   13ffc:	orr	r9, r1, r1, lsl #8
   14000:	orr	sl, r2, r2, lsl #8
   14004:	cmp	r3, #3
   14008:	orr	r9, r9, r9, lsl #16
   1400c:	orr	sl, sl, sl, lsl #16
   14010:	bls	140bc <close_stdout@@Base+0x668>
   14014:	ldr	r5, [r6]
   14018:	movw	ip, #65279	; 0xfeff
   1401c:	mov	r0, ip
   14020:	movt	ip, #65278	; 0xfefe
   14024:	eor	r4, r5, r9
   14028:	movt	r0, #65278	; 0xfefe
   1402c:	eor	r5, r5, sl
   14030:	add	r0, r4, r0
   14034:	add	ip, r5, ip
   14038:	bic	r4, r0, r4
   1403c:	bic	ip, ip, r5
   14040:	movw	r0, #32896	; 0x8080
   14044:	orr	ip, ip, r4
   14048:	movt	r0, #32896	; 0x8080
   1404c:	and	r0, ip, r0
   14050:	cmp	r0, #0
   14054:	addeq	r0, r6, #4
   14058:	beq	1408c <close_stdout@@Base+0x638>
   1405c:	b	140bc <close_stdout@@Base+0x668>
   14060:	ldr	r7, [r0], #4
   14064:	eor	r8, r7, r9
   14068:	eor	r7, r7, sl
   1406c:	add	r4, r8, r4
   14070:	add	r5, r7, r5
   14074:	bic	r4, r4, r8
   14078:	bic	r5, r5, r7
   1407c:	orr	r4, r5, r4
   14080:	and	ip, r4, ip
   14084:	cmp	ip, #0
   14088:	bne	140bc <close_stdout@@Base+0x668>
   1408c:	sub	r3, r3, #4
   14090:	movw	r5, #65279	; 0xfeff
   14094:	cmp	r3, #3
   14098:	mov	r4, r5
   1409c:	movw	ip, #32896	; 0x8080
   140a0:	movt	r5, #65278	; 0xfefe
   140a4:	movt	r4, #65278	; 0xfefe
   140a8:	movt	ip, #32896	; 0x8080
   140ac:	mov	r6, r0
   140b0:	bhi	14060 <close_stdout@@Base+0x60c>
   140b4:	cmp	r3, #0
   140b8:	beq	13fe4 <close_stdout@@Base+0x590>
   140bc:	ldrb	r0, [r6]
   140c0:	cmp	r0, r1
   140c4:	beq	13ff0 <close_stdout@@Base+0x59c>
   140c8:	cmp	r2, r0
   140cc:	beq	13ff0 <close_stdout@@Base+0x59c>
   140d0:	add	r5, r6, r3
   140d4:	add	ip, r6, #1
   140d8:	b	140f0 <close_stdout@@Base+0x69c>
   140dc:	ldrb	r4, [ip], #1
   140e0:	cmp	r4, r1
   140e4:	beq	13ff0 <close_stdout@@Base+0x59c>
   140e8:	cmp	r2, r4
   140ec:	beq	13ff0 <close_stdout@@Base+0x59c>
   140f0:	cmp	ip, r5
   140f4:	mov	r6, ip
   140f8:	bne	140dc <close_stdout@@Base+0x688>
   140fc:	mov	r0, #0
   14100:	b	13fe8 <close_stdout@@Base+0x594>
   14104:	mov	r2, r3
   14108:	pop	{r4, r5, r6, r7, r8, r9, sl}
   1410c:	b	1145c <memchr@plt>
   14110:	push	{r3, r4, r5, r6, r7, lr}
   14114:	subs	r4, r0, #0
   14118:	ldr	r5, [pc, #172]	; 141cc <close_stdout@@Base+0x778>
   1411c:	add	r5, pc, r5
   14120:	beq	141a8 <close_stdout@@Base+0x754>
   14124:	mov	r1, #47	; 0x2f
   14128:	bl	114bc <strrchr@plt>
   1412c:	subs	r6, r0, #0
   14130:	beq	1418c <close_stdout@@Base+0x738>
   14134:	add	r7, r6, #1
   14138:	rsb	r3, r4, r7
   1413c:	cmp	r3, #6
   14140:	ble	1418c <close_stdout@@Base+0x738>
   14144:	ldr	r1, [pc, #132]	; 141d0 <close_stdout@@Base+0x77c>
   14148:	sub	r0, r6, #6
   1414c:	mov	r2, #7
   14150:	add	r1, pc, r1
   14154:	bl	11510 <strncmp@plt>
   14158:	cmp	r0, #0
   1415c:	bne	1418c <close_stdout@@Base+0x738>
   14160:	ldr	r1, [pc, #108]	; 141d4 <close_stdout@@Base+0x780>
   14164:	mov	r0, r7
   14168:	mov	r2, #3
   1416c:	add	r1, pc, r1
   14170:	bl	11510 <strncmp@plt>
   14174:	cmp	r0, #0
   14178:	movne	r4, r7
   1417c:	ldreq	r3, [pc, #84]	; 141d8 <close_stdout@@Base+0x784>
   14180:	addeq	r4, r6, #4
   14184:	ldreq	r3, [r5, r3]
   14188:	streq	r4, [r3]
   1418c:	ldr	r2, [pc, #72]	; 141dc <close_stdout@@Base+0x788>
   14190:	ldr	r3, [pc, #72]	; 141e0 <close_stdout@@Base+0x78c>
   14194:	ldr	r2, [r5, r2]
   14198:	str	r4, [r2]
   1419c:	ldr	r3, [r5, r3]
   141a0:	str	r4, [r3]
   141a4:	pop	{r3, r4, r5, r6, r7, pc}
   141a8:	ldr	r3, [pc, #52]	; 141e4 <close_stdout@@Base+0x790>
   141ac:	mov	r1, #1
   141b0:	ldr	r0, [pc, #48]	; 141e8 <close_stdout@@Base+0x794>
   141b4:	mov	r2, #55	; 0x37
   141b8:	ldr	r3, [r5, r3]
   141bc:	add	r0, pc, r0
   141c0:	ldr	r3, [r3]
   141c4:	bl	11324 <fwrite@plt>
   141c8:	bl	1151c <abort@plt>
   141cc:	ldrdeq	r3, [r1], -ip
   141d0:	andeq	r3, r0, ip, ror #11
   141d4:	ldrdeq	r3, [r0], -r8
   141d8:	andeq	r0, r0, r0, ror #2
   141dc:	andeq	r0, r0, r8, asr r1
   141e0:	andeq	r0, r0, r4, asr r1
   141e4:	andeq	r0, r0, r4, lsr r1
   141e8:	andeq	r3, r0, r8, asr #10
   141ec:	push	{r3, lr}
   141f0:	mov	r3, r0
   141f4:	mov	r2, #0
   141f8:	cmp	r1, #8
   141fc:	str	r2, [r3], #4
   14200:	add	r3, r3, #4
   14204:	str	r2, [r0, #4]
   14208:	str	r2, [r3], #4
   1420c:	str	r2, [r3], #4
   14210:	str	r2, [r3], #4
   14214:	str	r2, [r3], #4
   14218:	str	r2, [r3], #4
   1421c:	str	r2, [r3], #4
   14220:	str	r2, [r3], #4
   14224:	str	r2, [r3], #4
   14228:	str	r2, [r3], #4
   1422c:	str	r2, [r3]
   14230:	beq	1423c <close_stdout@@Base+0x7e8>
   14234:	str	r1, [r0]
   14238:	pop	{r3, pc}
   1423c:	bl	1151c <abort@plt>
   14240:	push	{r4, r5, r6, lr}
   14244:	mov	r4, r0
   14248:	mov	r6, r1
   1424c:	mov	r0, #0
   14250:	mov	r1, r4
   14254:	mov	r2, #5
   14258:	bl	112d0 <dcgettext@plt>
   1425c:	cmp	r0, r4
   14260:	mov	r5, r0
   14264:	beq	1426c <close_stdout@@Base+0x818>
   14268:	pop	{r4, r5, r6, pc}
   1426c:	bl	16580 <close_stdout@@Base+0x2b2c>
   14270:	ldrb	r3, [r0]
   14274:	bic	r3, r3, #32
   14278:	cmp	r3, #85	; 0x55
   1427c:	bne	142f0 <close_stdout@@Base+0x89c>
   14280:	ldrb	r3, [r0, #1]
   14284:	bic	r3, r3, #32
   14288:	cmp	r3, #84	; 0x54
   1428c:	bne	142dc <close_stdout@@Base+0x888>
   14290:	ldrb	r3, [r0, #2]
   14294:	bic	r3, r3, #32
   14298:	cmp	r3, #70	; 0x46
   1429c:	bne	142dc <close_stdout@@Base+0x888>
   142a0:	ldrb	r3, [r0, #3]
   142a4:	cmp	r3, #45	; 0x2d
   142a8:	bne	142dc <close_stdout@@Base+0x888>
   142ac:	ldrb	r3, [r0, #4]
   142b0:	cmp	r3, #56	; 0x38
   142b4:	bne	142dc <close_stdout@@Base+0x888>
   142b8:	ldrb	r3, [r0, #5]
   142bc:	cmp	r3, #0
   142c0:	bne	142dc <close_stdout@@Base+0x888>
   142c4:	ldrb	r3, [r5]
   142c8:	cmp	r3, #96	; 0x60
   142cc:	beq	14368 <close_stdout@@Base+0x914>
   142d0:	ldr	r0, [pc, #180]	; 1438c <close_stdout@@Base+0x938>
   142d4:	add	r0, pc, r0
   142d8:	pop	{r4, r5, r6, pc}
   142dc:	cmp	r6, #7
   142e0:	beq	14374 <close_stdout@@Base+0x920>
   142e4:	ldr	r0, [pc, #164]	; 14390 <close_stdout@@Base+0x93c>
   142e8:	add	r0, pc, r0
   142ec:	pop	{r4, r5, r6, pc}
   142f0:	cmp	r3, #71	; 0x47
   142f4:	bne	142dc <close_stdout@@Base+0x888>
   142f8:	ldrb	r3, [r0, #1]
   142fc:	bic	r3, r3, #32
   14300:	cmp	r3, #66	; 0x42
   14304:	bne	142dc <close_stdout@@Base+0x888>
   14308:	ldrb	r3, [r0, #2]
   1430c:	cmp	r3, #49	; 0x31
   14310:	bne	142dc <close_stdout@@Base+0x888>
   14314:	ldrb	r3, [r0, #3]
   14318:	cmp	r3, #56	; 0x38
   1431c:	bne	142dc <close_stdout@@Base+0x888>
   14320:	ldrb	r3, [r0, #4]
   14324:	cmp	r3, #48	; 0x30
   14328:	bne	142dc <close_stdout@@Base+0x888>
   1432c:	ldrb	r3, [r0, #5]
   14330:	cmp	r3, #51	; 0x33
   14334:	bne	142dc <close_stdout@@Base+0x888>
   14338:	ldrb	r3, [r0, #6]
   1433c:	cmp	r3, #48	; 0x30
   14340:	bne	142dc <close_stdout@@Base+0x888>
   14344:	ldrb	r3, [r0, #7]
   14348:	cmp	r3, #0
   1434c:	bne	142dc <close_stdout@@Base+0x888>
   14350:	ldrb	r3, [r5]
   14354:	cmp	r3, #96	; 0x60
   14358:	beq	14380 <close_stdout@@Base+0x92c>
   1435c:	ldr	r0, [pc, #48]	; 14394 <close_stdout@@Base+0x940>
   14360:	add	r0, pc, r0
   14364:	pop	{r4, r5, r6, pc}
   14368:	ldr	r0, [pc, #40]	; 14398 <close_stdout@@Base+0x944>
   1436c:	add	r0, pc, r0
   14370:	pop	{r4, r5, r6, pc}
   14374:	ldr	r0, [pc, #32]	; 1439c <close_stdout@@Base+0x948>
   14378:	add	r0, pc, r0
   1437c:	pop	{r4, r5, r6, pc}
   14380:	ldr	r0, [pc, #24]	; 143a0 <close_stdout@@Base+0x94c>
   14384:	add	r0, pc, r0
   14388:	pop	{r4, r5, r6, pc}
   1438c:	muleq	r0, r4, r4
   14390:	andeq	r3, r0, r8, lsl #9
   14394:	andeq	r3, r0, ip, lsl #8
   14398:	andeq	r3, r0, r0, lsl r4
   1439c:	strdeq	r3, [r0], -ip
   143a0:	strdeq	r3, [r0], -r4
   143a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143a8:	sub	sp, sp, #124	; 0x7c
   143ac:	ldr	ip, [pc, #3304]	; 1509c <close_stdout@@Base+0x1648>
   143b0:	mov	sl, r1
   143b4:	str	r0, [sp, #40]	; 0x28
   143b8:	mov	r8, r3
   143bc:	ldr	r0, [pc, #3292]	; 150a0 <close_stdout@@Base+0x164c>
   143c0:	add	ip, pc, ip
   143c4:	str	r2, [sp, #32]
   143c8:	ldr	r1, [sp, #164]	; 0xa4
   143cc:	mov	r3, ip
   143d0:	ldr	r0, [ip, r0]
   143d4:	ldr	r2, [sp, #172]	; 0xac
   143d8:	ubfx	r1, r1, #1, #1
   143dc:	str	r1, [sp, #36]	; 0x24
   143e0:	str	r0, [sp, #56]	; 0x38
   143e4:	ldr	r0, [sp, #168]	; 0xa8
   143e8:	ldr	r1, [sp, #176]	; 0xb0
   143ec:	str	r2, [sp, #72]	; 0x48
   143f0:	str	r0, [sp, #48]	; 0x30
   143f4:	ldr	r0, [sp, #56]	; 0x38
   143f8:	str	r1, [sp, #68]	; 0x44
   143fc:	ldr	r3, [r0]
   14400:	str	r3, [sp, #116]	; 0x74
   14404:	bl	1133c <__ctype_get_mb_cur_max@plt>
   14408:	ldr	r2, [sp, #160]	; 0xa0
   1440c:	str	r0, [sp, #64]	; 0x40
   14410:	cmp	r2, #8
   14414:	addls	pc, pc, r2, lsl #2
   14418:	b	14f78 <close_stdout@@Base+0x1524>
   1441c:	b	14440 <close_stdout@@Base+0x9ec>
   14420:	b	14c90 <close_stdout@@Base+0x123c>
   14424:	b	14cc0 <close_stdout@@Base+0x126c>
   14428:	b	14b70 <close_stdout@@Base+0x111c>
   1442c:	b	14bb0 <close_stdout@@Base+0x115c>
   14430:	b	14bdc <close_stdout@@Base+0x1188>
   14434:	b	14bfc <close_stdout@@Base+0x11a8>
   14438:	b	14bfc <close_stdout@@Base+0x11a8>
   1443c:	b	14bfc <close_stdout@@Base+0x11a8>
   14440:	mov	r2, #0
   14444:	str	r2, [sp, #36]	; 0x24
   14448:	mov	r9, r2
   1444c:	str	r2, [sp, #24]
   14450:	str	r2, [sp, #28]
   14454:	str	r2, [sp, #52]	; 0x34
   14458:	ldr	r0, [sp, #36]	; 0x24
   1445c:	mov	fp, #0
   14460:	ldr	r1, [sp, #24]
   14464:	eor	r2, r0, #1
   14468:	eor	r3, r1, #1
   1446c:	and	r3, r2, r3
   14470:	and	r2, r1, r0
   14474:	str	r3, [sp, #44]	; 0x2c
   14478:	str	r2, [sp, #76]	; 0x4c
   1447c:	cmn	r8, #1
   14480:	beq	14800 <close_stdout@@Base+0xdac>
   14484:	subs	r3, fp, r8
   14488:	movne	r3, #1
   1448c:	cmp	r3, #0
   14490:	beq	14818 <close_stdout@@Base+0xdc4>
   14494:	ldr	r3, [sp, #28]
   14498:	ldr	r0, [sp, #24]
   1449c:	adds	r7, r3, #0
   144a0:	movne	r7, #1
   144a4:	ands	r6, r7, r0
   144a8:	bne	14d04 <close_stdout@@Base+0x12b0>
   144ac:	ldr	r1, [sp, #32]
   144b0:	add	r5, r1, fp
   144b4:	ldrb	r4, [r5]
   144b8:	cmp	r4, #126	; 0x7e
   144bc:	addls	pc, pc, r4, lsl #2
   144c0:	b	14a84 <close_stdout@@Base+0x1030>
   144c4:	b	14990 <close_stdout@@Base+0xf3c>
   144c8:	b	14a84 <close_stdout@@Base+0x1030>
   144cc:	b	14a84 <close_stdout@@Base+0x1030>
   144d0:	b	14a84 <close_stdout@@Base+0x1030>
   144d4:	b	14a84 <close_stdout@@Base+0x1030>
   144d8:	b	14a84 <close_stdout@@Base+0x1030>
   144dc:	b	14a84 <close_stdout@@Base+0x1030>
   144e0:	b	14978 <close_stdout@@Base+0xf24>
   144e4:	b	14960 <close_stdout@@Base+0xf0c>
   144e8:	b	14988 <close_stdout@@Base+0xf34>
   144ec:	b	14980 <close_stdout@@Base+0xf2c>
   144f0:	b	14970 <close_stdout@@Base+0xf1c>
   144f4:	b	14968 <close_stdout@@Base+0xf14>
   144f8:	b	1492c <close_stdout@@Base+0xed8>
   144fc:	b	14a84 <close_stdout@@Base+0x1030>
   14500:	b	14a84 <close_stdout@@Base+0x1030>
   14504:	b	14a84 <close_stdout@@Base+0x1030>
   14508:	b	14a84 <close_stdout@@Base+0x1030>
   1450c:	b	14a84 <close_stdout@@Base+0x1030>
   14510:	b	14a84 <close_stdout@@Base+0x1030>
   14514:	b	14a84 <close_stdout@@Base+0x1030>
   14518:	b	14a84 <close_stdout@@Base+0x1030>
   1451c:	b	14a84 <close_stdout@@Base+0x1030>
   14520:	b	14a84 <close_stdout@@Base+0x1030>
   14524:	b	14a84 <close_stdout@@Base+0x1030>
   14528:	b	14a84 <close_stdout@@Base+0x1030>
   1452c:	b	14a84 <close_stdout@@Base+0x1030>
   14530:	b	14a84 <close_stdout@@Base+0x1030>
   14534:	b	14a84 <close_stdout@@Base+0x1030>
   14538:	b	14a84 <close_stdout@@Base+0x1030>
   1453c:	b	14a84 <close_stdout@@Base+0x1030>
   14540:	b	14a84 <close_stdout@@Base+0x1030>
   14544:	b	148b8 <close_stdout@@Base+0xe64>
   14548:	b	148b8 <close_stdout@@Base+0xe64>
   1454c:	b	148b8 <close_stdout@@Base+0xe64>
   14550:	b	148b0 <close_stdout@@Base+0xe5c>
   14554:	b	148b8 <close_stdout@@Base+0xe64>
   14558:	b	1478c <close_stdout@@Base+0xd38>
   1455c:	b	148b8 <close_stdout@@Base+0xe64>
   14560:	b	14a2c <close_stdout@@Base+0xfd8>
   14564:	b	148b8 <close_stdout@@Base+0xe64>
   14568:	b	148b8 <close_stdout@@Base+0xe64>
   1456c:	b	148b8 <close_stdout@@Base+0xe64>
   14570:	b	1478c <close_stdout@@Base+0xd38>
   14574:	b	1478c <close_stdout@@Base+0xd38>
   14578:	b	1478c <close_stdout@@Base+0xd38>
   1457c:	b	1478c <close_stdout@@Base+0xd38>
   14580:	b	1478c <close_stdout@@Base+0xd38>
   14584:	b	1478c <close_stdout@@Base+0xd38>
   14588:	b	1478c <close_stdout@@Base+0xd38>
   1458c:	b	1478c <close_stdout@@Base+0xd38>
   14590:	b	1478c <close_stdout@@Base+0xd38>
   14594:	b	1478c <close_stdout@@Base+0xd38>
   14598:	b	1478c <close_stdout@@Base+0xd38>
   1459c:	b	1478c <close_stdout@@Base+0xd38>
   145a0:	b	1478c <close_stdout@@Base+0xd38>
   145a4:	b	1478c <close_stdout@@Base+0xd38>
   145a8:	b	1478c <close_stdout@@Base+0xd38>
   145ac:	b	1478c <close_stdout@@Base+0xd38>
   145b0:	b	148b8 <close_stdout@@Base+0xe64>
   145b4:	b	148b8 <close_stdout@@Base+0xe64>
   145b8:	b	148b8 <close_stdout@@Base+0xe64>
   145bc:	b	148b8 <close_stdout@@Base+0xe64>
   145c0:	b	146c0 <close_stdout@@Base+0xc6c>
   145c4:	b	14a84 <close_stdout@@Base+0x1030>
   145c8:	b	1478c <close_stdout@@Base+0xd38>
   145cc:	b	1478c <close_stdout@@Base+0xd38>
   145d0:	b	1478c <close_stdout@@Base+0xd38>
   145d4:	b	1478c <close_stdout@@Base+0xd38>
   145d8:	b	1478c <close_stdout@@Base+0xd38>
   145dc:	b	1478c <close_stdout@@Base+0xd38>
   145e0:	b	1478c <close_stdout@@Base+0xd38>
   145e4:	b	1478c <close_stdout@@Base+0xd38>
   145e8:	b	1478c <close_stdout@@Base+0xd38>
   145ec:	b	1478c <close_stdout@@Base+0xd38>
   145f0:	b	1478c <close_stdout@@Base+0xd38>
   145f4:	b	1478c <close_stdout@@Base+0xd38>
   145f8:	b	1478c <close_stdout@@Base+0xd38>
   145fc:	b	1478c <close_stdout@@Base+0xd38>
   14600:	b	1478c <close_stdout@@Base+0xd38>
   14604:	b	1478c <close_stdout@@Base+0xd38>
   14608:	b	1478c <close_stdout@@Base+0xd38>
   1460c:	b	1478c <close_stdout@@Base+0xd38>
   14610:	b	1478c <close_stdout@@Base+0xd38>
   14614:	b	1478c <close_stdout@@Base+0xd38>
   14618:	b	1478c <close_stdout@@Base+0xd38>
   1461c:	b	1478c <close_stdout@@Base+0xd38>
   14620:	b	1478c <close_stdout@@Base+0xd38>
   14624:	b	1478c <close_stdout@@Base+0xd38>
   14628:	b	1478c <close_stdout@@Base+0xd38>
   1462c:	b	1478c <close_stdout@@Base+0xd38>
   14630:	b	148b8 <close_stdout@@Base+0xe64>
   14634:	b	14a10 <close_stdout@@Base+0xfbc>
   14638:	b	1478c <close_stdout@@Base+0xd38>
   1463c:	b	148b8 <close_stdout@@Base+0xe64>
   14640:	b	1478c <close_stdout@@Base+0xd38>
   14644:	b	148b8 <close_stdout@@Base+0xe64>
   14648:	b	1478c <close_stdout@@Base+0xd38>
   1464c:	b	1478c <close_stdout@@Base+0xd38>
   14650:	b	1478c <close_stdout@@Base+0xd38>
   14654:	b	1478c <close_stdout@@Base+0xd38>
   14658:	b	1478c <close_stdout@@Base+0xd38>
   1465c:	b	1478c <close_stdout@@Base+0xd38>
   14660:	b	1478c <close_stdout@@Base+0xd38>
   14664:	b	1478c <close_stdout@@Base+0xd38>
   14668:	b	1478c <close_stdout@@Base+0xd38>
   1466c:	b	1478c <close_stdout@@Base+0xd38>
   14670:	b	1478c <close_stdout@@Base+0xd38>
   14674:	b	1478c <close_stdout@@Base+0xd38>
   14678:	b	1478c <close_stdout@@Base+0xd38>
   1467c:	b	1478c <close_stdout@@Base+0xd38>
   14680:	b	1478c <close_stdout@@Base+0xd38>
   14684:	b	1478c <close_stdout@@Base+0xd38>
   14688:	b	1478c <close_stdout@@Base+0xd38>
   1468c:	b	1478c <close_stdout@@Base+0xd38>
   14690:	b	1478c <close_stdout@@Base+0xd38>
   14694:	b	1478c <close_stdout@@Base+0xd38>
   14698:	b	1478c <close_stdout@@Base+0xd38>
   1469c:	b	1478c <close_stdout@@Base+0xd38>
   146a0:	b	1478c <close_stdout@@Base+0xd38>
   146a4:	b	1478c <close_stdout@@Base+0xd38>
   146a8:	b	1478c <close_stdout@@Base+0xd38>
   146ac:	b	1478c <close_stdout@@Base+0xd38>
   146b0:	b	14898 <close_stdout@@Base+0xe44>
   146b4:	b	148b8 <close_stdout@@Base+0xe64>
   146b8:	b	14898 <close_stdout@@Base+0xe44>
   146bc:	b	148b0 <close_stdout@@Base+0xe5c>
   146c0:	ldr	r3, [sp, #160]	; 0xa0
   146c4:	cmp	r3, #2
   146c8:	beq	14f54 <close_stdout@@Base+0x1500>
   146cc:	cmp	r3, #3
   146d0:	bne	1478c <close_stdout@@Base+0xd38>
   146d4:	ldr	r1, [sp, #164]	; 0xa4
   146d8:	tst	r1, #4
   146dc:	beq	1478c <close_stdout@@Base+0xd38>
   146e0:	add	r3, fp, #2
   146e4:	cmp	r8, r3
   146e8:	bls	1478c <close_stdout@@Base+0xd38>
   146ec:	ldrb	r2, [r5, #1]
   146f0:	mov	r1, #1
   146f4:	cmp	r2, #63	; 0x3f
   146f8:	bne	1478c <close_stdout@@Base+0xd38>
   146fc:	ldr	r0, [sp, #32]
   14700:	ldrb	ip, [r0, r3]
   14704:	sub	r0, ip, #33	; 0x21
   14708:	uxtb	r0, r0
   1470c:	cmp	r0, #29
   14710:	bhi	1478c <close_stdout@@Base+0xd38>
   14714:	lsl	r1, r1, r0
   14718:	movw	r0, #20929	; 0x51c1
   1471c:	movt	r0, #14336	; 0x3800
   14720:	and	r0, r1, r0
   14724:	cmp	r0, #0
   14728:	beq	1478c <close_stdout@@Base+0xd38>
   1472c:	ldr	r1, [sp, #36]	; 0x24
   14730:	cmp	r1, #0
   14734:	bne	148d4 <close_stdout@@Base+0xe80>
   14738:	cmp	r9, sl
   1473c:	mov	r4, ip
   14740:	mov	fp, r3
   14744:	ldrcc	r0, [sp, #40]	; 0x28
   14748:	strbcc	r2, [r0, r9]
   1474c:	add	r2, r9, #1
   14750:	cmp	sl, r2
   14754:	ldrhi	r0, [sp, #40]	; 0x28
   14758:	movhi	r1, #34	; 0x22
   1475c:	strbhi	r1, [r0, r2]
   14760:	add	r2, r9, #2
   14764:	cmp	sl, r2
   14768:	ldrhi	r0, [sp, #40]	; 0x28
   1476c:	movhi	r1, #34	; 0x22
   14770:	strbhi	r1, [r0, r2]
   14774:	add	r2, r9, #3
   14778:	cmp	sl, r2
   1477c:	add	r9, r9, #4
   14780:	ldrhi	r0, [sp, #40]	; 0x28
   14784:	movhi	r1, #63	; 0x3f
   14788:	strbhi	r1, [r0, r2]
   1478c:	ldr	r0, [sp, #44]	; 0x2c
   14790:	cmp	r0, #0
   14794:	bne	147bc <close_stdout@@Base+0xd68>
   14798:	ldr	r1, [sp, #48]	; 0x30
   1479c:	cmp	r1, #0
   147a0:	beq	147bc <close_stdout@@Base+0xd68>
   147a4:	ubfx	r2, r4, #5, #8
   147a8:	and	r3, r4, #31
   147ac:	ldr	r2, [r1, r2, lsl #2]
   147b0:	lsr	r3, r2, r3
   147b4:	tst	r3, #1
   147b8:	bne	147c4 <close_stdout@@Base+0xd70>
   147bc:	cmp	r6, #0
   147c0:	beq	147e4 <close_stdout@@Base+0xd90>
   147c4:	ldr	r2, [sp, #36]	; 0x24
   147c8:	cmp	r2, #0
   147cc:	bne	148d4 <close_stdout@@Base+0xe80>
   147d0:	cmp	r9, sl
   147d4:	ldrcc	r0, [sp, #40]	; 0x28
   147d8:	movcc	r3, #92	; 0x5c
   147dc:	strbcc	r3, [r0, r9]
   147e0:	add	r9, r9, #1
   147e4:	add	fp, fp, #1
   147e8:	cmp	r9, sl
   147ec:	ldrcc	r1, [sp, #40]	; 0x28
   147f0:	strbcc	r4, [r1, r9]
   147f4:	cmn	r8, #1
   147f8:	add	r9, r9, #1
   147fc:	bne	14484 <close_stdout@@Base+0xa30>
   14800:	ldr	r2, [sp, #32]
   14804:	ldrb	r3, [r2, fp]
   14808:	adds	r3, r3, #0
   1480c:	movne	r3, #1
   14810:	cmp	r3, #0
   14814:	bne	14494 <close_stdout@@Base+0xa40>
   14818:	ldr	r3, [sp, #160]	; 0xa0
   1481c:	cmp	r9, #0
   14820:	cmpeq	r3, #2
   14824:	bne	14834 <close_stdout@@Base+0xde0>
   14828:	ldr	r0, [sp, #36]	; 0x24
   1482c:	cmp	r0, #0
   14830:	bne	148d4 <close_stdout@@Base+0xe80>
   14834:	ldr	r1, [sp, #36]	; 0x24
   14838:	ldr	r2, [sp, #52]	; 0x34
   1483c:	eor	r3, r1, #1
   14840:	cmp	r2, #0
   14844:	moveq	r3, #0
   14848:	andne	r3, r3, #1
   1484c:	cmp	r3, #0
   14850:	beq	1487c <close_stdout@@Base+0xe28>
   14854:	ldrb	r3, [r2]
   14858:	cmp	r3, #0
   1485c:	beq	1487c <close_stdout@@Base+0xe28>
   14860:	ldr	r1, [sp, #40]	; 0x28
   14864:	cmp	sl, r9
   14868:	strbhi	r3, [r1, r9]
   1486c:	ldrb	r3, [r2, #1]!
   14870:	add	r9, r9, #1
   14874:	cmp	r3, #0
   14878:	bne	14864 <close_stdout@@Base+0xe10>
   1487c:	cmp	r9, sl
   14880:	movcs	r0, r9
   14884:	ldrcc	r1, [sp, #40]	; 0x28
   14888:	movcc	r3, #0
   1488c:	movcc	r0, r9
   14890:	strbcc	r3, [r1, r9]
   14894:	b	14910 <close_stdout@@Base+0xebc>
   14898:	cmn	r8, #1
   1489c:	beq	14f64 <close_stdout@@Base+0x1510>
   148a0:	subs	r3, r8, #1
   148a4:	movne	r3, #1
   148a8:	cmp	r3, #0
   148ac:	bne	1478c <close_stdout@@Base+0xd38>
   148b0:	cmp	fp, #0
   148b4:	bne	1478c <close_stdout@@Base+0xd38>
   148b8:	ldr	r3, [sp, #36]	; 0x24
   148bc:	ldr	r0, [sp, #160]	; 0xa0
   148c0:	cmp	r0, #2
   148c4:	movne	r3, #0
   148c8:	andeq	r3, r3, #1
   148cc:	cmp	r3, #0
   148d0:	beq	1478c <close_stdout@@Base+0xd38>
   148d4:	ldr	r2, [sp, #164]	; 0xa4
   148d8:	mov	ip, #0
   148dc:	ldr	r0, [sp, #160]	; 0xa0
   148e0:	bic	r3, r2, #2
   148e4:	ldr	r1, [sp, #72]	; 0x48
   148e8:	ldr	r2, [sp, #68]	; 0x44
   148ec:	stm	sp, {r0, r3}
   148f0:	mov	r3, r8
   148f4:	str	r1, [sp, #12]
   148f8:	mov	r1, sl
   148fc:	str	r2, [sp, #16]
   14900:	ldr	r0, [sp, #40]	; 0x28
   14904:	ldr	r2, [sp, #32]
   14908:	str	ip, [sp, #8]
   1490c:	bl	143a4 <close_stdout@@Base+0x950>
   14910:	ldr	r1, [sp, #56]	; 0x38
   14914:	ldr	r2, [sp, #116]	; 0x74
   14918:	ldr	r3, [r1]
   1491c:	cmp	r2, r3
   14920:	bne	15054 <close_stdout@@Base+0x1600>
   14924:	add	sp, sp, #124	; 0x7c
   14928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1492c:	mov	r3, #114	; 0x72
   14930:	ldr	r2, [sp, #36]	; 0x24
   14934:	ldr	r0, [sp, #160]	; 0xa0
   14938:	cmp	r0, #2
   1493c:	movne	r2, #0
   14940:	andeq	r2, r2, #1
   14944:	cmp	r2, #0
   14948:	bne	148d4 <close_stdout@@Base+0xe80>
   1494c:	ldr	r1, [sp, #24]
   14950:	cmp	r1, #0
   14954:	beq	1478c <close_stdout@@Base+0xd38>
   14958:	mov	r4, r3
   1495c:	b	147c4 <close_stdout@@Base+0xd70>
   14960:	mov	r3, #98	; 0x62
   14964:	b	1494c <close_stdout@@Base+0xef8>
   14968:	mov	r3, #102	; 0x66
   1496c:	b	1494c <close_stdout@@Base+0xef8>
   14970:	mov	r3, #118	; 0x76
   14974:	b	1494c <close_stdout@@Base+0xef8>
   14978:	mov	r3, #97	; 0x61
   1497c:	b	1494c <close_stdout@@Base+0xef8>
   14980:	mov	r3, #110	; 0x6e
   14984:	b	14930 <close_stdout@@Base+0xedc>
   14988:	mov	r3, #116	; 0x74
   1498c:	b	14930 <close_stdout@@Base+0xedc>
   14990:	ldr	r2, [sp, #24]
   14994:	cmp	r2, #0
   14998:	beq	14f40 <close_stdout@@Base+0x14ec>
   1499c:	ldr	r3, [sp, #36]	; 0x24
   149a0:	cmp	r3, #0
   149a4:	bne	148d4 <close_stdout@@Base+0xe80>
   149a8:	cmp	r9, sl
   149ac:	add	r2, r9, #1
   149b0:	ldrcc	r0, [sp, #40]	; 0x28
   149b4:	movcc	r3, #92	; 0x5c
   149b8:	strbcc	r3, [r0, r9]
   149bc:	add	r3, fp, #1
   149c0:	cmp	r8, r3
   149c4:	bls	14a04 <close_stdout@@Base+0xfb0>
   149c8:	ldr	r1, [sp, #32]
   149cc:	ldrb	r3, [r1, r3]
   149d0:	sub	r3, r3, #48	; 0x30
   149d4:	cmp	r3, #9
   149d8:	bhi	14a04 <close_stdout@@Base+0xfb0>
   149dc:	cmp	sl, r2
   149e0:	ldrhi	r0, [sp, #40]	; 0x28
   149e4:	movhi	r3, #48	; 0x30
   149e8:	strbhi	r3, [r0, r2]
   149ec:	add	r3, r9, #2
   149f0:	cmp	sl, r3
   149f4:	ldrhi	r1, [sp, #40]	; 0x28
   149f8:	movhi	r2, #48	; 0x30
   149fc:	strbhi	r2, [r1, r3]
   14a00:	add	r2, r9, #3
   14a04:	mov	r9, r2
   14a08:	mov	r4, #48	; 0x30
   14a0c:	b	14798 <close_stdout@@Base+0xd44>
   14a10:	ldr	r1, [sp, #76]	; 0x4c
   14a14:	cmp	r1, #0
   14a18:	beq	14a24 <close_stdout@@Base+0xfd0>
   14a1c:	cmp	r7, #0
   14a20:	bne	147e4 <close_stdout@@Base+0xd90>
   14a24:	mov	r3, r4
   14a28:	b	14930 <close_stdout@@Base+0xedc>
   14a2c:	ldr	r1, [sp, #160]	; 0xa0
   14a30:	cmp	r1, #2
   14a34:	bne	1478c <close_stdout@@Base+0xd38>
   14a38:	ldr	r2, [sp, #36]	; 0x24
   14a3c:	cmp	r2, #0
   14a40:	bne	148d4 <close_stdout@@Base+0xe80>
   14a44:	cmp	r9, sl
   14a48:	ldrcc	r0, [sp, #40]	; 0x28
   14a4c:	movcc	r3, #39	; 0x27
   14a50:	strbcc	r3, [r0, r9]
   14a54:	add	r3, r9, #1
   14a58:	cmp	sl, r3
   14a5c:	ldrhi	r1, [sp, #40]	; 0x28
   14a60:	movhi	r2, #92	; 0x5c
   14a64:	strbhi	r2, [r1, r3]
   14a68:	add	r3, r9, #2
   14a6c:	cmp	sl, r3
   14a70:	add	r9, r9, #3
   14a74:	ldrhi	r0, [sp, #40]	; 0x28
   14a78:	movhi	r2, #39	; 0x27
   14a7c:	strbhi	r2, [r0, r3]
   14a80:	b	1478c <close_stdout@@Base+0xd38>
   14a84:	ldr	r1, [sp, #64]	; 0x40
   14a88:	cmp	r1, #1
   14a8c:	bne	14d84 <close_stdout@@Base+0x1330>
   14a90:	bl	113cc <__ctype_b_loc@plt>
   14a94:	ldr	r2, [sp, #64]	; 0x40
   14a98:	sxth	r3, r4
   14a9c:	str	r2, [sp, #60]	; 0x3c
   14aa0:	lsl	r3, r3, #1
   14aa4:	ldr	r2, [r0]
   14aa8:	ldrh	r2, [r2, r3]
   14aac:	eor	r2, r2, #16384	; 0x4000
   14ab0:	ubfx	r2, r2, #14, #1
   14ab4:	ldr	r1, [sp, #24]
   14ab8:	ands	r2, r2, r1
   14abc:	beq	1478c <close_stdout@@Base+0xd38>
   14ac0:	ldr	r3, [sp, #60]	; 0x3c
   14ac4:	mov	r0, #92	; 0x5c
   14ac8:	ldr	r7, [sp, #36]	; 0x24
   14acc:	add	r1, r3, fp
   14ad0:	str	r8, [sp, #60]	; 0x3c
   14ad4:	ldr	r3, [sp, #40]	; 0x28
   14ad8:	b	14b3c <close_stdout@@Base+0x10e8>
   14adc:	cmp	r7, #0
   14ae0:	bne	14f7c <close_stdout@@Base+0x1528>
   14ae4:	add	ip, r9, #1
   14ae8:	cmp	r9, sl
   14aec:	strbcc	r0, [r3, r9]
   14af0:	cmp	sl, ip
   14af4:	lsrhi	r8, r4, #6
   14af8:	addhi	r8, r8, #48	; 0x30
   14afc:	strbhi	r8, [r3, ip]
   14b00:	add	ip, r9, #2
   14b04:	add	r9, r9, #3
   14b08:	cmp	sl, ip
   14b0c:	ubfxhi	r8, r4, #3, #3
   14b10:	and	r4, r4, #7
   14b14:	add	r4, r4, #48	; 0x30
   14b18:	addhi	r8, r8, #48	; 0x30
   14b1c:	strbhi	r8, [r3, ip]
   14b20:	add	fp, fp, #1
   14b24:	cmp	r1, fp
   14b28:	bls	14b68 <close_stdout@@Base+0x1114>
   14b2c:	cmp	r9, sl
   14b30:	strbcc	r4, [r3, r9]
   14b34:	ldrb	r4, [r5, #1]!
   14b38:	add	r9, r9, #1
   14b3c:	cmp	r2, #0
   14b40:	bne	14adc <close_stdout@@Base+0x1088>
   14b44:	cmp	r6, #0
   14b48:	beq	14b20 <close_stdout@@Base+0x10cc>
   14b4c:	add	fp, fp, #1
   14b50:	cmp	r9, sl
   14b54:	strbcc	r0, [r3, r9]
   14b58:	cmp	r1, fp
   14b5c:	add	r9, r9, #1
   14b60:	mov	r6, #0
   14b64:	bhi	14b2c <close_stdout@@Base+0x10d8>
   14b68:	ldr	r8, [sp, #60]	; 0x3c
   14b6c:	b	147e8 <close_stdout@@Base+0xd94>
   14b70:	ldr	r3, [sp, #36]	; 0x24
   14b74:	cmp	r3, #0
   14b78:	bne	1507c <close_stdout@@Base+0x1628>
   14b7c:	cmp	sl, #0
   14b80:	beq	14f94 <close_stdout@@Base+0x1540>
   14b84:	ldr	r1, [sp, #40]	; 0x28
   14b88:	mov	r0, #1
   14b8c:	ldr	r2, [pc, #1296]	; 150a4 <close_stdout@@Base+0x1650>
   14b90:	mov	r3, #34	; 0x22
   14b94:	str	r0, [sp, #24]
   14b98:	mov	r9, r0
   14b9c:	add	r2, pc, r2
   14ba0:	str	r0, [sp, #28]
   14ba4:	strb	r3, [r1]
   14ba8:	str	r2, [sp, #52]	; 0x34
   14bac:	b	14458 <close_stdout@@Base+0xa04>
   14bb0:	ldr	r3, [pc, #1264]	; 150a8 <close_stdout@@Base+0x1654>
   14bb4:	mov	r2, #1
   14bb8:	mov	r0, #3
   14bbc:	str	r2, [sp, #36]	; 0x24
   14bc0:	add	r3, pc, r3
   14bc4:	str	r2, [sp, #24]
   14bc8:	str	r3, [sp, #52]	; 0x34
   14bcc:	mov	r9, #0
   14bd0:	str	r2, [sp, #28]
   14bd4:	str	r0, [sp, #160]	; 0xa0
   14bd8:	b	14458 <close_stdout@@Base+0xa04>
   14bdc:	mov	r0, #0
   14be0:	mov	r1, #1
   14be4:	str	r0, [sp, #36]	; 0x24
   14be8:	mov	r9, r0
   14bec:	str	r1, [sp, #24]
   14bf0:	str	r0, [sp, #28]
   14bf4:	str	r0, [sp, #52]	; 0x34
   14bf8:	b	14458 <close_stdout@@Base+0xa04>
   14bfc:	ldr	r3, [sp, #160]	; 0xa0
   14c00:	cmp	r3, #8
   14c04:	beq	14c30 <close_stdout@@Base+0x11dc>
   14c08:	ldr	r0, [pc, #1180]	; 150ac <close_stdout@@Base+0x1658>
   14c0c:	mov	r1, r3
   14c10:	add	r0, pc, r0
   14c14:	bl	14240 <close_stdout@@Base+0x7ec>
   14c18:	ldr	r1, [sp, #160]	; 0xa0
   14c1c:	str	r0, [sp, #72]	; 0x48
   14c20:	ldr	r0, [pc, #1160]	; 150b0 <close_stdout@@Base+0x165c>
   14c24:	add	r0, pc, r0
   14c28:	bl	14240 <close_stdout@@Base+0x7ec>
   14c2c:	str	r0, [sp, #68]	; 0x44
   14c30:	ldr	r0, [sp, #36]	; 0x24
   14c34:	cmp	r0, #0
   14c38:	movne	r9, #0
   14c3c:	bne	14c74 <close_stdout@@Base+0x1220>
   14c40:	ldr	r1, [sp, #72]	; 0x48
   14c44:	ldrb	r3, [r1]
   14c48:	cmp	r3, #0
   14c4c:	beq	1504c <close_stdout@@Base+0x15f8>
   14c50:	mov	r2, r1
   14c54:	ldr	r1, [sp, #40]	; 0x28
   14c58:	mov	r9, r0
   14c5c:	cmp	r9, sl
   14c60:	strbcc	r3, [r1, r9]
   14c64:	ldrb	r3, [r2, #1]!
   14c68:	add	r9, r9, #1
   14c6c:	cmp	r3, #0
   14c70:	bne	14c5c <close_stdout@@Base+0x1208>
   14c74:	ldr	r0, [sp, #68]	; 0x44
   14c78:	str	r0, [sp, #52]	; 0x34
   14c7c:	bl	113e4 <strlen@plt>
   14c80:	mov	r2, #1
   14c84:	str	r2, [sp, #24]
   14c88:	str	r0, [sp, #28]
   14c8c:	b	14458 <close_stdout@@Base+0xa04>
   14c90:	ldr	r3, [pc, #1052]	; 150b4 <close_stdout@@Base+0x1660>
   14c94:	mov	r2, #0
   14c98:	mov	r1, #1
   14c9c:	mov	r0, #2
   14ca0:	add	r3, pc, r3
   14ca4:	str	r1, [sp, #36]	; 0x24
   14ca8:	str	r2, [sp, #24]
   14cac:	mov	r9, r2
   14cb0:	str	r1, [sp, #28]
   14cb4:	str	r3, [sp, #52]	; 0x34
   14cb8:	str	r0, [sp, #160]	; 0xa0
   14cbc:	b	14458 <close_stdout@@Base+0xa04>
   14cc0:	ldr	r3, [sp, #36]	; 0x24
   14cc4:	cmp	r3, #0
   14cc8:	bne	15058 <close_stdout@@Base+0x1604>
   14ccc:	cmp	sl, #0
   14cd0:	beq	14fb4 <close_stdout@@Base+0x1560>
   14cd4:	ldr	r1, [sp, #40]	; 0x28
   14cd8:	mov	r3, #39	; 0x27
   14cdc:	ldr	r2, [sp, #36]	; 0x24
   14ce0:	mov	r0, #1
   14ce4:	mov	r9, r0
   14ce8:	str	r0, [sp, #28]
   14cec:	strb	r3, [r1]
   14cf0:	ldr	r3, [pc, #960]	; 150b8 <close_stdout@@Base+0x1664>
   14cf4:	str	r2, [sp, #24]
   14cf8:	add	r3, pc, r3
   14cfc:	str	r3, [sp, #52]	; 0x34
   14d00:	b	14458 <close_stdout@@Base+0xa04>
   14d04:	ldr	r2, [sp, #28]
   14d08:	cmp	r2, #1
   14d0c:	add	r4, fp, r2
   14d10:	movls	r3, #0
   14d14:	movhi	r3, #1
   14d18:	cmn	r8, #1
   14d1c:	movne	r3, #0
   14d20:	cmp	r3, #0
   14d24:	beq	14d34 <close_stdout@@Base+0x12e0>
   14d28:	ldr	r0, [sp, #32]
   14d2c:	bl	113e4 <strlen@plt>
   14d30:	mov	r8, r0
   14d34:	cmp	r8, r4
   14d38:	ldrcc	r3, [sp, #32]
   14d3c:	movcc	r6, #0
   14d40:	addcc	r5, r3, fp
   14d44:	bcc	144b4 <close_stdout@@Base+0xa60>
   14d48:	ldr	r0, [sp, #32]
   14d4c:	ldr	r1, [sp, #52]	; 0x34
   14d50:	add	r5, r0, fp
   14d54:	ldr	r2, [sp, #28]
   14d58:	mov	r0, r5
   14d5c:	bl	112c4 <memcmp@plt>
   14d60:	cmp	r0, #0
   14d64:	bne	14d7c <close_stdout@@Base+0x1328>
   14d68:	ldr	r1, [sp, #36]	; 0x24
   14d6c:	cmp	r1, #0
   14d70:	bne	148d4 <close_stdout@@Base+0xe80>
   14d74:	mov	r6, #1
   14d78:	b	144b4 <close_stdout@@Base+0xa60>
   14d7c:	mov	r6, #0
   14d80:	b	144b4 <close_stdout@@Base+0xa60>
   14d84:	add	r7, sp, #108	; 0x6c
   14d88:	cmn	r8, #1
   14d8c:	mov	r3, #0
   14d90:	str	r3, [sp, #108]	; 0x6c
   14d94:	str	r3, [r7, #4]
   14d98:	beq	14f84 <close_stdout@@Base+0x1530>
   14d9c:	mov	r1, #0
   14da0:	ldr	r0, [sp, #32]
   14da4:	mov	ip, #1
   14da8:	str	r9, [sp, #88]	; 0x58
   14dac:	str	r6, [sp, #96]	; 0x60
   14db0:	mov	r9, r1
   14db4:	str	r5, [sp, #100]	; 0x64
   14db8:	mov	r6, ip
   14dbc:	mov	r5, r7
   14dc0:	add	r3, sp, #104	; 0x68
   14dc4:	sub	r0, r0, #1
   14dc8:	str	r3, [sp, #80]	; 0x50
   14dcc:	str	r0, [sp, #84]	; 0x54
   14dd0:	str	r1, [sp, #60]	; 0x3c
   14dd4:	str	r4, [sp, #92]	; 0x5c
   14dd8:	ldr	r2, [sp, #32]
   14ddc:	add	r7, r9, fp
   14de0:	add	r0, sp, #104	; 0x68
   14de4:	mov	r3, r5
   14de8:	add	r4, r2, r7
   14dec:	rsb	r2, r7, r8
   14df0:	mov	r1, r4
   14df4:	bl	11360 <mbrtowc@plt>
   14df8:	subs	r2, r0, #0
   14dfc:	beq	14f08 <close_stdout@@Base+0x14b4>
   14e00:	cmn	r2, #1
   14e04:	beq	15030 <close_stdout@@Base+0x15dc>
   14e08:	cmn	r2, #2
   14e0c:	beq	14fd4 <close_stdout@@Base+0x1580>
   14e10:	ldr	r3, [sp, #36]	; 0x24
   14e14:	ldr	r0, [sp, #160]	; 0xa0
   14e18:	cmp	r0, #2
   14e1c:	movne	r3, #0
   14e20:	andeq	r3, r3, #1
   14e24:	cmp	r3, #0
   14e28:	beq	14ee4 <close_stdout@@Base+0x1490>
   14e2c:	cmp	r2, #1
   14e30:	beq	14ee4 <close_stdout@@Base+0x1490>
   14e34:	ldr	r1, [sp, #84]	; 0x54
   14e38:	add	r3, r1, r2
   14e3c:	add	r7, r3, r7
   14e40:	ldrb	r3, [r4, #1]!
   14e44:	sub	r3, r3, #91	; 0x5b
   14e48:	cmp	r3, #33	; 0x21
   14e4c:	addls	pc, pc, r3, lsl #2
   14e50:	b	14edc <close_stdout@@Base+0x1488>
   14e54:	b	148d4 <close_stdout@@Base+0xe80>
   14e58:	b	148d4 <close_stdout@@Base+0xe80>
   14e5c:	b	14edc <close_stdout@@Base+0x1488>
   14e60:	b	148d4 <close_stdout@@Base+0xe80>
   14e64:	b	14edc <close_stdout@@Base+0x1488>
   14e68:	b	148d4 <close_stdout@@Base+0xe80>
   14e6c:	b	14edc <close_stdout@@Base+0x1488>
   14e70:	b	14edc <close_stdout@@Base+0x1488>
   14e74:	b	14edc <close_stdout@@Base+0x1488>
   14e78:	b	14edc <close_stdout@@Base+0x1488>
   14e7c:	b	14edc <close_stdout@@Base+0x1488>
   14e80:	b	14edc <close_stdout@@Base+0x1488>
   14e84:	b	14edc <close_stdout@@Base+0x1488>
   14e88:	b	14edc <close_stdout@@Base+0x1488>
   14e8c:	b	14edc <close_stdout@@Base+0x1488>
   14e90:	b	14edc <close_stdout@@Base+0x1488>
   14e94:	b	14edc <close_stdout@@Base+0x1488>
   14e98:	b	14edc <close_stdout@@Base+0x1488>
   14e9c:	b	14edc <close_stdout@@Base+0x1488>
   14ea0:	b	14edc <close_stdout@@Base+0x1488>
   14ea4:	b	14edc <close_stdout@@Base+0x1488>
   14ea8:	b	14edc <close_stdout@@Base+0x1488>
   14eac:	b	14edc <close_stdout@@Base+0x1488>
   14eb0:	b	14edc <close_stdout@@Base+0x1488>
   14eb4:	b	14edc <close_stdout@@Base+0x1488>
   14eb8:	b	14edc <close_stdout@@Base+0x1488>
   14ebc:	b	14edc <close_stdout@@Base+0x1488>
   14ec0:	b	14edc <close_stdout@@Base+0x1488>
   14ec4:	b	14edc <close_stdout@@Base+0x1488>
   14ec8:	b	14edc <close_stdout@@Base+0x1488>
   14ecc:	b	14edc <close_stdout@@Base+0x1488>
   14ed0:	b	14edc <close_stdout@@Base+0x1488>
   14ed4:	b	14edc <close_stdout@@Base+0x1488>
   14ed8:	b	148d4 <close_stdout@@Base+0xe80>
   14edc:	cmp	r4, r7
   14ee0:	bne	14e40 <close_stdout@@Base+0x13ec>
   14ee4:	ldr	r0, [sp, #104]	; 0x68
   14ee8:	add	r9, r9, r2
   14eec:	bl	1130c <iswprint@plt>
   14ef0:	cmp	r0, #0
   14ef4:	mov	r0, r5
   14ef8:	moveq	r6, #0
   14efc:	bl	112ac <mbsinit@plt>
   14f00:	cmp	r0, #0
   14f04:	beq	14dd8 <close_stdout@@Base+0x1384>
   14f08:	mov	ip, r6
   14f0c:	eor	r2, ip, #1
   14f10:	str	r9, [sp, #60]	; 0x3c
   14f14:	ldr	r4, [sp, #92]	; 0x5c
   14f18:	uxtb	r2, r2
   14f1c:	ldr	r9, [sp, #88]	; 0x58
   14f20:	ldr	r6, [sp, #96]	; 0x60
   14f24:	ldr	r5, [sp, #100]	; 0x64
   14f28:	ldr	r3, [sp, #60]	; 0x3c
   14f2c:	cmp	r3, #1
   14f30:	bls	14ab4 <close_stdout@@Base+0x1060>
   14f34:	ldr	r0, [sp, #24]
   14f38:	and	r2, r2, r0
   14f3c:	b	14ac0 <close_stdout@@Base+0x106c>
   14f40:	ldr	r2, [sp, #164]	; 0xa4
   14f44:	tst	r2, #1
   14f48:	addne	fp, fp, #1
   14f4c:	bne	1447c <close_stdout@@Base+0xa28>
   14f50:	b	1478c <close_stdout@@Base+0xd38>
   14f54:	ldr	r0, [sp, #36]	; 0x24
   14f58:	cmp	r0, #0
   14f5c:	beq	1478c <close_stdout@@Base+0xd38>
   14f60:	b	148d4 <close_stdout@@Base+0xe80>
   14f64:	ldr	r2, [sp, #32]
   14f68:	ldrb	r3, [r2, #1]
   14f6c:	adds	r3, r3, #0
   14f70:	movne	r3, #1
   14f74:	b	148a8 <close_stdout@@Base+0xe54>
   14f78:	bl	1151c <abort@plt>
   14f7c:	ldr	r8, [sp, #60]	; 0x3c
   14f80:	b	148d4 <close_stdout@@Base+0xe80>
   14f84:	ldr	r0, [sp, #32]
   14f88:	bl	113e4 <strlen@plt>
   14f8c:	mov	r8, r0
   14f90:	b	14d9c <close_stdout@@Base+0x1348>
   14f94:	ldr	r2, [pc, #288]	; 150bc <close_stdout@@Base+0x1668>
   14f98:	mov	r1, #1
   14f9c:	mov	r9, r1
   14fa0:	str	r1, [sp, #24]
   14fa4:	add	r2, pc, r2
   14fa8:	str	r1, [sp, #28]
   14fac:	str	r2, [sp, #52]	; 0x34
   14fb0:	b	14458 <close_stdout@@Base+0xa04>
   14fb4:	ldr	r2, [pc, #260]	; 150c0 <close_stdout@@Base+0x166c>
   14fb8:	mov	r3, #1
   14fbc:	mov	r9, r3
   14fc0:	str	r3, [sp, #28]
   14fc4:	add	r2, pc, r2
   14fc8:	str	sl, [sp, #24]
   14fcc:	str	r2, [sp, #52]	; 0x34
   14fd0:	b	14458 <close_stdout@@Base+0xa04>
   14fd4:	cmp	r8, r7
   14fd8:	str	r9, [sp, #60]	; 0x3c
   14fdc:	mov	ip, r4
   14fe0:	ldr	r6, [sp, #96]	; 0x60
   14fe4:	ldr	r9, [sp, #88]	; 0x58
   14fe8:	ldr	r4, [sp, #92]	; 0x5c
   14fec:	ldr	r5, [sp, #100]	; 0x64
   14ff0:	bls	15028 <close_stdout@@Base+0x15d4>
   14ff4:	ldrb	r3, [ip]
   14ff8:	cmp	r3, #0
   14ffc:	beq	15028 <close_stdout@@Base+0x15d4>
   15000:	ldr	r3, [sp, #60]	; 0x3c
   15004:	b	15014 <close_stdout@@Base+0x15c0>
   15008:	ldrb	r2, [r5, r3]
   1500c:	cmp	r2, #0
   15010:	beq	15024 <close_stdout@@Base+0x15d0>
   15014:	add	r3, r3, #1
   15018:	add	r2, fp, r3
   1501c:	cmp	r8, r2
   15020:	bhi	15008 <close_stdout@@Base+0x15b4>
   15024:	str	r3, [sp, #60]	; 0x3c
   15028:	mov	r2, #1
   1502c:	b	14f28 <close_stdout@@Base+0x14d4>
   15030:	str	r9, [sp, #60]	; 0x3c
   15034:	mov	r2, #1
   15038:	ldr	r4, [sp, #92]	; 0x5c
   1503c:	ldr	r6, [sp, #96]	; 0x60
   15040:	ldr	r9, [sp, #88]	; 0x58
   15044:	ldr	r5, [sp, #100]	; 0x64
   15048:	b	14f28 <close_stdout@@Base+0x14d4>
   1504c:	ldr	r9, [sp, #36]	; 0x24
   15050:	b	14c74 <close_stdout@@Base+0x1220>
   15054:	bl	112dc <__stack_chk_fail@plt>
   15058:	ldr	r1, [pc, #100]	; 150c4 <close_stdout@@Base+0x1670>
   1505c:	mov	r3, #0
   15060:	mov	r0, #1
   15064:	str	r3, [sp, #24]
   15068:	add	r1, pc, r1
   1506c:	str	r0, [sp, #28]
   15070:	mov	r9, r3
   15074:	str	r1, [sp, #52]	; 0x34
   15078:	b	14458 <close_stdout@@Base+0xa04>
   1507c:	ldr	r0, [pc, #68]	; 150c8 <close_stdout@@Base+0x1674>
   15080:	mov	r3, #1
   15084:	mov	r9, #0
   15088:	str	r3, [sp, #24]
   1508c:	add	r0, pc, r0
   15090:	str	r3, [sp, #28]
   15094:	str	r0, [sp, #52]	; 0x34
   15098:	b	14458 <close_stdout@@Base+0xa04>
   1509c:	andeq	r3, r1, r8, lsr ip
   150a0:	andeq	r0, r0, r8, lsr #2
   150a4:	ldrdeq	r2, [r0], -r8
   150a8:			; <UNDEFINED> instruction: 0x00002bb4
   150ac:	andeq	r2, r0, r0, ror fp
   150b0:	andeq	r2, r0, ip, asr #22
   150b4:	ldrdeq	r2, [r0], -r0
   150b8:	andeq	r2, r0, r8, ror sl
   150bc:	ldrdeq	r2, [r0], -r0
   150c0:	andeq	r2, r0, ip, lsr #15
   150c4:	andeq	r2, r0, r8, lsl #14
   150c8:	andeq	r2, r0, r8, ror #13
   150cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150d0:	sub	sp, sp, #44	; 0x2c
   150d4:	mov	r6, r0
   150d8:	mov	r9, r1
   150dc:	mov	sl, r2
   150e0:	mov	r4, r3
   150e4:	bl	113fc <__errno_location@plt>
   150e8:	ldr	fp, [pc, #412]	; 1528c <close_stdout@@Base+0x1838>
   150ec:	cmp	r6, #0
   150f0:	add	fp, pc, fp
   150f4:	ldr	r5, [fp]
   150f8:	ldr	r1, [r0]
   150fc:	mov	r8, r0
   15100:	str	r1, [sp, #36]	; 0x24
   15104:	blt	15284 <close_stdout@@Base+0x1830>
   15108:	ldr	r3, [pc, #384]	; 15290 <close_stdout@@Base+0x183c>
   1510c:	add	r3, pc, r3
   15110:	ldr	r3, [r3]
   15114:	cmp	r6, r3
   15118:	bcc	1516c <close_stdout@@Base+0x1718>
   1511c:	add	r7, r6, #1
   15120:	cmn	r7, #-536870911	; 0xe0000001
   15124:	bhi	15288 <close_stdout@@Base+0x1834>
   15128:	add	r3, fp, #4
   1512c:	cmp	r5, r3
   15130:	beq	1525c <close_stdout@@Base+0x1808>
   15134:	mov	r0, r5
   15138:	lsl	r1, r7, #3
   1513c:	bl	15f64 <close_stdout@@Base+0x2510>
   15140:	mov	r5, r0
   15144:	str	r0, [fp]
   15148:	ldr	fp, [pc, #324]	; 15294 <close_stdout@@Base+0x1840>
   1514c:	mov	r1, #0
   15150:	add	fp, pc, fp
   15154:	ldr	r0, [fp]
   15158:	rsb	r2, r0, r7
   1515c:	add	r0, r5, r0, lsl #3
   15160:	lsl	r2, r2, #3
   15164:	bl	11414 <memset@plt>
   15168:	str	r7, [fp]
   1516c:	add	r2, r4, #8
   15170:	str	r2, [sp, #32]
   15174:	ldr	r1, [r4]
   15178:	add	fp, r5, r6, lsl #3
   1517c:	ldr	lr, [sp, #32]
   15180:	mov	r2, r9
   15184:	ldr	r3, [r4, #4]
   15188:	ldr	ip, [r5, r6, lsl #3]
   1518c:	ldr	r7, [fp, #4]
   15190:	orr	r3, r3, #1
   15194:	str	r1, [sp]
   15198:	str	r3, [sp, #4]
   1519c:	mov	r1, ip
   151a0:	str	lr, [sp, #8]
   151a4:	mov	r0, r7
   151a8:	ldr	lr, [r4, #40]	; 0x28
   151ac:	str	r3, [sp, #28]
   151b0:	mov	r3, sl
   151b4:	str	lr, [sp, #12]
   151b8:	ldr	lr, [r4, #44]	; 0x2c
   151bc:	str	ip, [sp, #24]
   151c0:	str	lr, [sp, #16]
   151c4:	bl	143a4 <close_stdout@@Base+0x950>
   151c8:	ldr	ip, [sp, #24]
   151cc:	cmp	ip, r0
   151d0:	bhi	15248 <close_stdout@@Base+0x17f4>
   151d4:	ldr	r3, [pc, #188]	; 15298 <close_stdout@@Base+0x1844>
   151d8:	add	r1, r0, #1
   151dc:	str	r1, [r5, r6, lsl #3]
   151e0:	add	r3, pc, r3
   151e4:	cmp	r7, r3
   151e8:	beq	151fc <close_stdout@@Base+0x17a8>
   151ec:	mov	r0, r7
   151f0:	str	r1, [sp, #24]
   151f4:	bl	1127c <free@plt>
   151f8:	ldr	r1, [sp, #24]
   151fc:	mov	r0, r1
   15200:	str	r1, [sp, #24]
   15204:	bl	15f0c <close_stdout@@Base+0x24b8>
   15208:	ldr	r3, [sp, #28]
   1520c:	ldr	lr, [sp, #32]
   15210:	mov	r2, r9
   15214:	str	r0, [fp, #4]
   15218:	mov	r7, r0
   1521c:	ldr	ip, [r4]
   15220:	str	r3, [sp, #4]
   15224:	mov	r3, sl
   15228:	str	lr, [sp, #8]
   1522c:	str	ip, [sp]
   15230:	ldr	ip, [r4, #40]	; 0x28
   15234:	ldr	r1, [sp, #24]
   15238:	str	ip, [sp, #12]
   1523c:	ldr	ip, [r4, #44]	; 0x2c
   15240:	str	ip, [sp, #16]
   15244:	bl	143a4 <close_stdout@@Base+0x950>
   15248:	ldr	r1, [sp, #36]	; 0x24
   1524c:	mov	r0, r7
   15250:	str	r1, [r8]
   15254:	add	sp, sp, #44	; 0x2c
   15258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1525c:	lsl	r1, r7, #3
   15260:	mov	r0, #0
   15264:	str	r3, [sp, #24]
   15268:	bl	15f64 <close_stdout@@Base+0x2510>
   1526c:	ldr	r3, [sp, #24]
   15270:	mov	r5, r0
   15274:	ldm	r3, {r0, r1}
   15278:	str	r5, [fp]
   1527c:	stm	r5, {r0, r1}
   15280:	b	15148 <close_stdout@@Base+0x16f4>
   15284:	bl	1151c <abort@plt>
   15288:	bl	16120 <close_stdout@@Base+0x26cc>
   1528c:	strheq	r3, [r1], -r0
   15290:	andeq	r3, r1, r0, rrx
   15294:	andeq	r3, r1, ip, lsl r0
   15298:	andeq	r3, r1, r8, lsr #32
   1529c:	push	{r4, r5, r6, lr}
   152a0:	mov	r5, r0
   152a4:	bl	113fc <__errno_location@plt>
   152a8:	cmp	r5, #0
   152ac:	mov	r1, #48	; 0x30
   152b0:	mov	r4, r0
   152b4:	ldr	r0, [pc, #24]	; 152d4 <close_stdout@@Base+0x1880>
   152b8:	ldr	r6, [r4]
   152bc:	add	r0, pc, r0
   152c0:	add	r0, r0, #256	; 0x100
   152c4:	movne	r0, r5
   152c8:	bl	160e0 <close_stdout@@Base+0x268c>
   152cc:	str	r6, [r4]
   152d0:	pop	{r4, r5, r6, pc}
   152d4:	andeq	r2, r1, ip, asr #30
   152d8:	cmp	r0, #0
   152dc:	beq	152e8 <close_stdout@@Base+0x1894>
   152e0:	ldr	r0, [r0]
   152e4:	bx	lr
   152e8:	ldr	r0, [pc, #12]	; 152fc <close_stdout@@Base+0x18a8>
   152ec:	add	r0, pc, r0
   152f0:	add	r0, r0, #256	; 0x100
   152f4:	ldr	r0, [r0]
   152f8:	bx	lr
   152fc:	andeq	r2, r1, ip, lsl pc
   15300:	cmp	r0, #0
   15304:	beq	15310 <close_stdout@@Base+0x18bc>
   15308:	str	r1, [r0]
   1530c:	bx	lr
   15310:	ldr	r0, [pc, #12]	; 15324 <close_stdout@@Base+0x18d0>
   15314:	add	r0, pc, r0
   15318:	add	r0, r0, #256	; 0x100
   1531c:	str	r1, [r0]
   15320:	bx	lr
   15324:	strdeq	r2, [r1], -r4
   15328:	cmp	r0, #0
   1532c:	movne	r3, r0
   15330:	beq	15360 <close_stdout@@Base+0x190c>
   15334:	lsr	ip, r1, #5
   15338:	and	r1, r1, #31
   1533c:	add	r3, r3, ip, lsl #2
   15340:	ldr	ip, [r3, #8]
   15344:	lsr	r0, ip, r1
   15348:	eor	r2, r0, r2
   1534c:	and	r0, r0, #1
   15350:	and	r2, r2, #1
   15354:	eor	ip, ip, r2, lsl r1
   15358:	str	ip, [r3, #8]
   1535c:	bx	lr
   15360:	ldr	r3, [pc, #8]	; 15370 <close_stdout@@Base+0x191c>
   15364:	add	r3, pc, r3
   15368:	add	r3, r3, #256	; 0x100
   1536c:	b	15334 <close_stdout@@Base+0x18e0>
   15370:	andeq	r2, r1, r4, lsr #29
   15374:	subs	r3, r0, #0
   15378:	beq	15388 <close_stdout@@Base+0x1934>
   1537c:	ldr	r0, [r3, #4]
   15380:	str	r1, [r3, #4]
   15384:	bx	lr
   15388:	ldr	r3, [pc, #8]	; 15398 <close_stdout@@Base+0x1944>
   1538c:	add	r3, pc, r3
   15390:	add	r3, r3, #256	; 0x100
   15394:	b	1537c <close_stdout@@Base+0x1928>
   15398:	andeq	r2, r1, ip, ror lr
   1539c:	cmp	r0, #0
   153a0:	push	{r3, lr}
   153a4:	beq	153c8 <close_stdout@@Base+0x1974>
   153a8:	cmp	r2, #0
   153ac:	cmpne	r1, #0
   153b0:	mov	r3, #8
   153b4:	strne	r1, [r0, #40]	; 0x28
   153b8:	str	r3, [r0]
   153bc:	strne	r2, [r0, #44]	; 0x2c
   153c0:	popne	{r3, pc}
   153c4:	bl	1151c <abort@plt>
   153c8:	ldr	r0, [pc, #8]	; 153d8 <close_stdout@@Base+0x1984>
   153cc:	add	r0, pc, r0
   153d0:	add	r0, r0, #256	; 0x100
   153d4:	b	153a8 <close_stdout@@Base+0x1954>
   153d8:	andeq	r2, r1, ip, lsr lr
   153dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153e0:	sub	sp, sp, #24
   153e4:	mov	r7, r0
   153e8:	mov	sl, r1
   153ec:	ldr	r4, [sp, #56]	; 0x38
   153f0:	mov	r9, r2
   153f4:	mov	r8, r3
   153f8:	cmp	r4, #0
   153fc:	beq	15450 <close_stdout@@Base+0x19fc>
   15400:	bl	113fc <__errno_location@plt>
   15404:	ldr	r3, [r4]
   15408:	add	lr, r4, #8
   1540c:	mov	r1, sl
   15410:	mov	r2, r9
   15414:	ldr	r6, [r0]
   15418:	mov	r5, r0
   1541c:	str	r3, [sp]
   15420:	mov	r0, r7
   15424:	ldr	ip, [r4, #4]
   15428:	mov	r3, r8
   1542c:	stmib	sp, {ip, lr}
   15430:	ldr	ip, [r4, #40]	; 0x28
   15434:	str	ip, [sp, #12]
   15438:	ldr	ip, [r4, #44]	; 0x2c
   1543c:	str	ip, [sp, #16]
   15440:	bl	143a4 <close_stdout@@Base+0x950>
   15444:	str	r6, [r5]
   15448:	add	sp, sp, #24
   1544c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15450:	ldr	r4, [pc, #8]	; 15460 <close_stdout@@Base+0x1a0c>
   15454:	add	r4, pc, r4
   15458:	add	r4, r4, #256	; 0x100
   1545c:	b	15400 <close_stdout@@Base+0x19ac>
   15460:			; <UNDEFINED> instruction: 0x00012db4
   15464:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15468:	subs	r4, r3, #0
   1546c:	sub	sp, sp, #36	; 0x24
   15470:	mov	r7, r0
   15474:	mov	r6, r1
   15478:	mov	r5, r2
   1547c:	beq	15538 <close_stdout@@Base+0x1ae4>
   15480:	bl	113fc <__errno_location@plt>
   15484:	ldr	r3, [r4]
   15488:	ldr	sl, [r4, #4]
   1548c:	add	r9, r4, #8
   15490:	mov	r8, r0
   15494:	mov	r0, #0
   15498:	ldr	r2, [r8]
   1549c:	cmp	r5, r0
   154a0:	orreq	sl, sl, #1
   154a4:	str	r9, [sp, #8]
   154a8:	mov	r1, r0
   154ac:	stm	sp, {r3, sl}
   154b0:	mov	r3, r6
   154b4:	ldr	ip, [r4, #40]	; 0x28
   154b8:	str	r2, [sp, #28]
   154bc:	mov	r2, r7
   154c0:	str	ip, [sp, #12]
   154c4:	ldr	ip, [r4, #44]	; 0x2c
   154c8:	str	ip, [sp, #16]
   154cc:	bl	143a4 <close_stdout@@Base+0x950>
   154d0:	add	r1, r0, #1
   154d4:	mov	fp, r0
   154d8:	str	r1, [sp, #24]
   154dc:	mov	r0, r1
   154e0:	bl	15f0c <close_stdout@@Base+0x24b8>
   154e4:	ldr	lr, [r4]
   154e8:	str	sl, [sp, #4]
   154ec:	mov	r3, r6
   154f0:	str	r9, [sp, #8]
   154f4:	mov	r2, r7
   154f8:	str	lr, [sp]
   154fc:	ldr	lr, [r4, #40]	; 0x28
   15500:	ldr	r1, [sp, #24]
   15504:	str	lr, [sp, #12]
   15508:	ldr	lr, [r4, #44]	; 0x2c
   1550c:	str	lr, [sp, #16]
   15510:	str	r0, [sp, #24]
   15514:	bl	143a4 <close_stdout@@Base+0x950>
   15518:	ldr	r3, [sp, #28]
   1551c:	cmp	r5, #0
   15520:	str	r3, [r8]
   15524:	ldr	ip, [sp, #24]
   15528:	strne	fp, [r5]
   1552c:	mov	r0, ip
   15530:	add	sp, sp, #36	; 0x24
   15534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15538:	ldr	r4, [pc, #8]	; 15548 <close_stdout@@Base+0x1af4>
   1553c:	add	r4, pc, r4
   15540:	add	r4, r4, #256	; 0x100
   15544:	b	15480 <close_stdout@@Base+0x1a2c>
   15548:	andeq	r2, r1, ip, asr #25
   1554c:	mov	r3, r2
   15550:	mov	r2, #0
   15554:	b	15464 <close_stdout@@Base+0x1a10>
   15558:	ldr	r2, [pc, #152]	; 155f8 <close_stdout@@Base+0x1ba4>
   1555c:	push	{r3, r4, r5, r6, r7, lr}
   15560:	add	r2, pc, r2
   15564:	ldr	r3, [pc, #144]	; 155fc <close_stdout@@Base+0x1ba8>
   15568:	ldr	r6, [r2]
   1556c:	add	r3, pc, r3
   15570:	cmp	r6, #1
   15574:	ldr	r7, [r3]
   15578:	movhi	r4, #1
   1557c:	movhi	r5, r7
   15580:	bls	1559c <close_stdout@@Base+0x1b48>
   15584:	ldr	r0, [r5, #12]
   15588:	add	r4, r4, #1
   1558c:	bl	1127c <free@plt>
   15590:	cmp	r4, r6
   15594:	add	r5, r5, #8
   15598:	bne	15584 <close_stdout@@Base+0x1b30>
   1559c:	ldr	r4, [pc, #92]	; 15600 <close_stdout@@Base+0x1bac>
   155a0:	ldr	r0, [r7, #4]
   155a4:	add	r4, pc, r4
   155a8:	cmp	r0, r4
   155ac:	beq	155c4 <close_stdout@@Base+0x1b70>
   155b0:	bl	1127c <free@plt>
   155b4:	ldr	r3, [pc, #72]	; 15604 <close_stdout@@Base+0x1bb0>
   155b8:	mov	r2, #256	; 0x100
   155bc:	add	r3, pc, r3
   155c0:	stmib	r3, {r2, r4}
   155c4:	ldr	r4, [pc, #60]	; 15608 <close_stdout@@Base+0x1bb4>
   155c8:	add	r4, pc, r4
   155cc:	add	r5, r4, #4
   155d0:	cmp	r7, r5
   155d4:	beq	155e4 <close_stdout@@Base+0x1b90>
   155d8:	mov	r0, r7
   155dc:	bl	1127c <free@plt>
   155e0:	str	r5, [r4]
   155e4:	ldr	r3, [pc, #32]	; 1560c <close_stdout@@Base+0x1bb8>
   155e8:	mov	r2, #1
   155ec:	add	r3, pc, r3
   155f0:	str	r2, [r3]
   155f4:	pop	{r3, r4, r5, r6, r7, pc}
   155f8:	andeq	r2, r1, ip, lsl #24
   155fc:	andeq	r2, r1, r4, lsr ip
   15600:	andeq	r2, r1, r4, ror #24
   15604:	andeq	r2, r1, r4, ror #23
   15608:	ldrdeq	r2, [r1], -r8
   1560c:	andeq	r2, r1, r0, lsl #23
   15610:	ldr	r3, [pc, #12]	; 15624 <close_stdout@@Base+0x1bd0>
   15614:	mvn	r2, #0
   15618:	add	r3, pc, r3
   1561c:	add	r3, r3, #256	; 0x100
   15620:	b	150cc <close_stdout@@Base+0x1678>
   15624:	strdeq	r2, [r1], -r0
   15628:	ldr	r3, [pc, #8]	; 15638 <close_stdout@@Base+0x1be4>
   1562c:	add	r3, pc, r3
   15630:	add	r3, r3, #256	; 0x100
   15634:	b	150cc <close_stdout@@Base+0x1678>
   15638:	ldrdeq	r2, [r1], -ip
   1563c:	mov	r1, r0
   15640:	mov	r0, #0
   15644:	b	15610 <close_stdout@@Base+0x1bbc>
   15648:	mov	r2, r1
   1564c:	mov	r1, r0
   15650:	mov	r0, #0
   15654:	b	15628 <close_stdout@@Base+0x1bd4>
   15658:	ldr	r3, [pc, #92]	; 156bc <close_stdout@@Base+0x1c68>
   1565c:	ldr	ip, [pc, #92]	; 156c0 <close_stdout@@Base+0x1c6c>
   15660:	add	r3, pc, r3
   15664:	push	{r4, r5, r6, r7, lr}
   15668:	sub	sp, sp, #60	; 0x3c
   1566c:	ldr	r4, [r3, ip]
   15670:	add	r5, sp, #4
   15674:	mov	r7, r2
   15678:	mov	r6, r0
   1567c:	mov	r0, r5
   15680:	ldr	r3, [r4]
   15684:	str	r3, [sp, #52]	; 0x34
   15688:	bl	141ec <close_stdout@@Base+0x798>
   1568c:	mov	r3, r5
   15690:	mvn	r2, #0
   15694:	mov	r0, r6
   15698:	mov	r1, r7
   1569c:	bl	150cc <close_stdout@@Base+0x1678>
   156a0:	ldr	r2, [sp, #52]	; 0x34
   156a4:	ldr	r3, [r4]
   156a8:	cmp	r2, r3
   156ac:	bne	156b8 <close_stdout@@Base+0x1c64>
   156b0:	add	sp, sp, #60	; 0x3c
   156b4:	pop	{r4, r5, r6, r7, pc}
   156b8:	bl	112dc <__stack_chk_fail@plt>
   156bc:	muleq	r1, r8, r9
   156c0:	andeq	r0, r0, r8, lsr #2
   156c4:	ldr	ip, [pc, #96]	; 1572c <close_stdout@@Base+0x1cd8>
   156c8:	push	{r4, r5, r6, r7, r8, lr}
   156cc:	add	ip, pc, ip
   156d0:	ldr	lr, [pc, #88]	; 15730 <close_stdout@@Base+0x1cdc>
   156d4:	sub	sp, sp, #56	; 0x38
   156d8:	mov	r8, r3
   156dc:	add	r5, sp, #4
   156e0:	mov	r7, r2
   156e4:	mov	r6, r0
   156e8:	ldr	r4, [ip, lr]
   156ec:	mov	r0, r5
   156f0:	ldr	r3, [r4]
   156f4:	str	r3, [sp, #52]	; 0x34
   156f8:	bl	141ec <close_stdout@@Base+0x798>
   156fc:	mov	r2, r8
   15700:	mov	r3, r5
   15704:	mov	r0, r6
   15708:	mov	r1, r7
   1570c:	bl	150cc <close_stdout@@Base+0x1678>
   15710:	ldr	r2, [sp, #52]	; 0x34
   15714:	ldr	r3, [r4]
   15718:	cmp	r2, r3
   1571c:	bne	15728 <close_stdout@@Base+0x1cd4>
   15720:	add	sp, sp, #56	; 0x38
   15724:	pop	{r4, r5, r6, r7, r8, pc}
   15728:	bl	112dc <__stack_chk_fail@plt>
   1572c:	andeq	r2, r1, ip, lsr #18
   15730:	andeq	r0, r0, r8, lsr #2
   15734:	mov	r2, r1
   15738:	mov	r1, r0
   1573c:	mov	r0, #0
   15740:	b	15658 <close_stdout@@Base+0x1c04>
   15744:	mov	ip, r1
   15748:	mov	r3, r2
   1574c:	mov	r1, r0
   15750:	mov	r2, ip
   15754:	mov	r0, #0
   15758:	b	156c4 <close_stdout@@Base+0x1c70>
   1575c:	push	{r4, r5, r6, r7, r8, lr}
   15760:	mov	r5, r2
   15764:	ldr	lr, [pc, #136]	; 157f4 <close_stdout@@Base+0x1da0>
   15768:	mov	r7, r0
   1576c:	mov	r6, r1
   15770:	ldr	r4, [pc, #128]	; 157f8 <close_stdout@@Base+0x1da4>
   15774:	add	lr, pc, lr
   15778:	sub	sp, sp, #56	; 0x38
   1577c:	add	lr, lr, #256	; 0x100
   15780:	ldr	r8, [pc, #116]	; 157fc <close_stdout@@Base+0x1da8>
   15784:	add	r4, pc, r4
   15788:	add	ip, sp, #4
   1578c:	ldm	lr!, {r0, r1, r2, r3}
   15790:	ldr	r4, [r4, r8]
   15794:	stmia	ip!, {r0, r1, r2, r3}
   15798:	ldm	lr!, {r0, r1, r2, r3}
   1579c:	ldr	r8, [r4]
   157a0:	stmia	ip!, {r0, r1, r2, r3}
   157a4:	ldm	lr, {r0, r1, r2, r3}
   157a8:	str	r8, [sp, #52]	; 0x34
   157ac:	stm	ip, {r0, r1, r2, r3}
   157b0:	mov	r1, r5
   157b4:	add	r5, sp, #4
   157b8:	mov	r2, #1
   157bc:	mov	r0, r5
   157c0:	bl	15328 <close_stdout@@Base+0x18d4>
   157c4:	mov	r2, r6
   157c8:	mov	r3, r5
   157cc:	mov	r1, r7
   157d0:	mov	r0, #0
   157d4:	bl	150cc <close_stdout@@Base+0x1678>
   157d8:	ldr	r2, [sp, #52]	; 0x34
   157dc:	ldr	r3, [r4]
   157e0:	cmp	r2, r3
   157e4:	bne	157f0 <close_stdout@@Base+0x1d9c>
   157e8:	add	sp, sp, #56	; 0x38
   157ec:	pop	{r4, r5, r6, r7, r8, pc}
   157f0:	bl	112dc <__stack_chk_fail@plt>
   157f4:	muleq	r1, r4, sl
   157f8:	andeq	r2, r1, r4, ror r8
   157fc:	andeq	r0, r0, r8, lsr #2
   15800:	mov	r2, r1
   15804:	mvn	r1, #0
   15808:	b	1575c <close_stdout@@Base+0x1d08>
   1580c:	mov	r1, #58	; 0x3a
   15810:	b	15800 <close_stdout@@Base+0x1dac>
   15814:	mov	r2, #58	; 0x3a
   15818:	b	1575c <close_stdout@@Base+0x1d08>
   1581c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15820:	mov	r5, r2
   15824:	ldr	lr, [pc, #144]	; 158bc <close_stdout@@Base+0x1e68>
   15828:	mov	r8, r0
   1582c:	mov	r9, r1
   15830:	mov	r7, r3
   15834:	add	lr, pc, lr
   15838:	ldr	r4, [pc, #128]	; 158c0 <close_stdout@@Base+0x1e6c>
   1583c:	add	lr, lr, #256	; 0x100
   15840:	sub	sp, sp, #56	; 0x38
   15844:	ldr	sl, [pc, #120]	; 158c4 <close_stdout@@Base+0x1e70>
   15848:	add	r4, pc, r4
   1584c:	ldm	lr!, {r0, r1, r2, r3}
   15850:	add	ip, sp, #4
   15854:	ldr	r4, [r4, sl]
   15858:	ldr	r6, [sp, #88]	; 0x58
   1585c:	stmia	ip!, {r0, r1, r2, r3}
   15860:	ldm	lr!, {r0, r1, r2, r3}
   15864:	ldr	sl, [r4]
   15868:	stmia	ip!, {r0, r1, r2, r3}
   1586c:	ldm	lr, {r0, r1, r2, r3}
   15870:	str	sl, [sp, #52]	; 0x34
   15874:	stm	ip, {r0, r1, r2, r3}
   15878:	mov	r2, r5
   1587c:	add	r5, sp, #4
   15880:	mov	r1, r9
   15884:	mov	r0, r5
   15888:	bl	1539c <close_stdout@@Base+0x1948>
   1588c:	mov	r2, r6
   15890:	mov	r3, r5
   15894:	mov	r0, r8
   15898:	mov	r1, r7
   1589c:	bl	150cc <close_stdout@@Base+0x1678>
   158a0:	ldr	r2, [sp, #52]	; 0x34
   158a4:	ldr	r3, [r4]
   158a8:	cmp	r2, r3
   158ac:	bne	158b8 <close_stdout@@Base+0x1e64>
   158b0:	add	sp, sp, #56	; 0x38
   158b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158b8:	bl	112dc <__stack_chk_fail@plt>
   158bc:	ldrdeq	r2, [r1], -r4
   158c0:			; <UNDEFINED> instruction: 0x000127b0
   158c4:	andeq	r0, r0, r8, lsr #2
   158c8:	push	{lr}		; (str lr, [sp, #-4]!)
   158cc:	sub	sp, sp, #12
   158d0:	mvn	ip, #0
   158d4:	str	ip, [sp]
   158d8:	bl	1581c <close_stdout@@Base+0x1dc8>
   158dc:	add	sp, sp, #12
   158e0:	pop	{pc}		; (ldr pc, [sp], #4)
   158e4:	mov	ip, r1
   158e8:	mov	r3, r2
   158ec:	mov	r1, r0
   158f0:	mov	r2, ip
   158f4:	mov	r0, #0
   158f8:	b	158c8 <close_stdout@@Base+0x1e74>
   158fc:	push	{lr}		; (str lr, [sp, #-4]!)
   15900:	sub	sp, sp, #12
   15904:	mov	lr, r1
   15908:	mov	ip, r2
   1590c:	mov	r1, r0
   15910:	str	r3, [sp]
   15914:	mov	r2, lr
   15918:	mov	r3, ip
   1591c:	mov	r0, #0
   15920:	bl	1581c <close_stdout@@Base+0x1dc8>
   15924:	add	sp, sp, #12
   15928:	pop	{pc}		; (ldr pc, [sp], #4)
   1592c:	ldr	r3, [pc, #12]	; 15940 <close_stdout@@Base+0x1eec>
   15930:	ldr	ip, [pc, #12]	; 15944 <close_stdout@@Base+0x1ef0>
   15934:	add	r3, pc, r3
   15938:	ldr	r3, [r3, ip]
   1593c:	b	150cc <close_stdout@@Base+0x1678>
   15940:	andeq	r2, r1, r4, asr #13
   15944:	andeq	r0, r0, r4, lsr #2
   15948:	mov	r2, r1
   1594c:	mov	r1, r0
   15950:	mov	r0, #0
   15954:	b	1592c <close_stdout@@Base+0x1ed8>
   15958:	mvn	r2, #0
   1595c:	b	1592c <close_stdout@@Base+0x1ed8>
   15960:	mov	r1, r0
   15964:	mov	r0, #0
   15968:	b	15958 <close_stdout@@Base+0x1f04>
   1596c:	push	{r4, r5, r6, r7, lr}
   15970:	cmp	r1, #0
   15974:	sub	sp, sp, #36	; 0x24
   15978:	ldr	r7, [pc, #896]	; 15d00 <close_stdout@@Base+0x22ac>
   1597c:	mov	ip, r3
   15980:	mov	r5, r0
   15984:	add	r7, pc, r7
   15988:	ldr	r4, [sp, #56]	; 0x38
   1598c:	ldr	r6, [sp, #60]	; 0x3c
   15990:	beq	15cd4 <close_stdout@@Base+0x2280>
   15994:	str	r2, [sp]
   15998:	mov	r3, r1
   1599c:	ldr	r2, [pc, #864]	; 15d04 <close_stdout@@Base+0x22b0>
   159a0:	mov	r1, #1
   159a4:	str	ip, [sp, #4]
   159a8:	add	r2, pc, r2
   159ac:	bl	11450 <__fprintf_chk@plt>
   159b0:	ldr	r1, [pc, #848]	; 15d08 <close_stdout@@Base+0x22b4>
   159b4:	mov	r2, #5
   159b8:	mov	r0, #0
   159bc:	add	r1, pc, r1
   159c0:	bl	112d0 <dcgettext@plt>
   159c4:	ldr	r2, [pc, #832]	; 15d0c <close_stdout@@Base+0x22b8>
   159c8:	movw	ip, #2013	; 0x7dd
   159cc:	mov	r1, #1
   159d0:	ldr	r2, [r7, r2]
   159d4:	str	ip, [sp]
   159d8:	mov	r3, r0
   159dc:	mov	r0, r5
   159e0:	bl	11450 <__fprintf_chk@plt>
   159e4:	ldr	r1, [pc, #804]	; 15d10 <close_stdout@@Base+0x22bc>
   159e8:	mov	r0, #0
   159ec:	mov	r2, #5
   159f0:	add	r1, pc, r1
   159f4:	bl	112d0 <dcgettext@plt>
   159f8:	mov	r1, r5
   159fc:	bl	1121c <fputs_unlocked@plt>
   15a00:	cmp	r6, #9
   15a04:	addls	pc, pc, r6, lsl #2
   15a08:	b	15cf0 <close_stdout@@Base+0x229c>
   15a0c:	b	15aa0 <close_stdout@@Base+0x204c>
   15a10:	b	15aa4 <close_stdout@@Base+0x2050>
   15a14:	b	15ad4 <close_stdout@@Base+0x2080>
   15a18:	b	15b08 <close_stdout@@Base+0x20b4>
   15a1c:	b	15b44 <close_stdout@@Base+0x20f0>
   15a20:	b	15b84 <close_stdout@@Base+0x2130>
   15a24:	b	15bcc <close_stdout@@Base+0x2178>
   15a28:	b	15c1c <close_stdout@@Base+0x21c8>
   15a2c:	b	15c74 <close_stdout@@Base+0x2220>
   15a30:	b	15a34 <close_stdout@@Base+0x1fe0>
   15a34:	ldr	r1, [pc, #728]	; 15d14 <close_stdout@@Base+0x22c0>
   15a38:	mov	r0, #0
   15a3c:	add	r1, pc, r1
   15a40:	mov	r2, #5
   15a44:	bl	112d0 <dcgettext@plt>
   15a48:	ldm	r4, {r3, ip}
   15a4c:	mov	r1, #1
   15a50:	str	ip, [sp]
   15a54:	ldr	ip, [r4, #8]
   15a58:	str	ip, [sp, #4]
   15a5c:	ldr	ip, [r4, #12]
   15a60:	str	ip, [sp, #8]
   15a64:	ldr	ip, [r4, #16]
   15a68:	str	ip, [sp, #12]
   15a6c:	ldr	ip, [r4, #20]
   15a70:	str	ip, [sp, #16]
   15a74:	ldr	ip, [r4, #24]
   15a78:	str	ip, [sp, #20]
   15a7c:	ldr	ip, [r4, #28]
   15a80:	str	ip, [sp, #24]
   15a84:	ldr	ip, [r4, #32]
   15a88:	str	ip, [sp, #28]
   15a8c:	mov	r2, r0
   15a90:	mov	r0, r5
   15a94:	bl	11450 <__fprintf_chk@plt>
   15a98:	add	sp, sp, #36	; 0x24
   15a9c:	pop	{r4, r5, r6, r7, pc}
   15aa0:	bl	1151c <abort@plt>
   15aa4:	ldr	r1, [pc, #620]	; 15d18 <close_stdout@@Base+0x22c4>
   15aa8:	mov	r2, #5
   15aac:	mov	r0, #0
   15ab0:	add	r1, pc, r1
   15ab4:	bl	112d0 <dcgettext@plt>
   15ab8:	ldr	r3, [r4]
   15abc:	mov	r1, #1
   15ac0:	mov	r2, r0
   15ac4:	mov	r0, r5
   15ac8:	add	sp, sp, #36	; 0x24
   15acc:	pop	{r4, r5, r6, r7, lr}
   15ad0:	b	11450 <__fprintf_chk@plt>
   15ad4:	ldr	r1, [pc, #576]	; 15d1c <close_stdout@@Base+0x22c8>
   15ad8:	mov	r2, #5
   15adc:	mov	r0, #0
   15ae0:	add	r1, pc, r1
   15ae4:	bl	112d0 <dcgettext@plt>
   15ae8:	ldm	r4, {r3, ip}
   15aec:	mov	r1, #1
   15af0:	str	ip, [sp, #56]	; 0x38
   15af4:	mov	r2, r0
   15af8:	mov	r0, r5
   15afc:	add	sp, sp, #36	; 0x24
   15b00:	pop	{r4, r5, r6, r7, lr}
   15b04:	b	11450 <__fprintf_chk@plt>
   15b08:	ldr	r1, [pc, #528]	; 15d20 <close_stdout@@Base+0x22cc>
   15b0c:	mov	r2, #5
   15b10:	mov	r0, #0
   15b14:	add	r1, pc, r1
   15b18:	bl	112d0 <dcgettext@plt>
   15b1c:	ldm	r4, {r3, ip}
   15b20:	mov	r1, #1
   15b24:	str	ip, [sp, #56]	; 0x38
   15b28:	ldr	ip, [r4, #8]
   15b2c:	str	ip, [sp, #60]	; 0x3c
   15b30:	mov	r2, r0
   15b34:	mov	r0, r5
   15b38:	add	sp, sp, #36	; 0x24
   15b3c:	pop	{r4, r5, r6, r7, lr}
   15b40:	b	11450 <__fprintf_chk@plt>
   15b44:	ldr	r1, [pc, #472]	; 15d24 <close_stdout@@Base+0x22d0>
   15b48:	mov	r2, #5
   15b4c:	mov	r0, #0
   15b50:	add	r1, pc, r1
   15b54:	bl	112d0 <dcgettext@plt>
   15b58:	ldm	r4, {r3, ip}
   15b5c:	mov	r1, #1
   15b60:	str	ip, [sp]
   15b64:	ldr	ip, [r4, #8]
   15b68:	str	ip, [sp, #4]
   15b6c:	ldr	ip, [r4, #12]
   15b70:	str	ip, [sp, #8]
   15b74:	mov	r2, r0
   15b78:	mov	r0, r5
   15b7c:	bl	11450 <__fprintf_chk@plt>
   15b80:	b	15a98 <close_stdout@@Base+0x2044>
   15b84:	ldr	r1, [pc, #412]	; 15d28 <close_stdout@@Base+0x22d4>
   15b88:	mov	r2, #5
   15b8c:	mov	r0, #0
   15b90:	add	r1, pc, r1
   15b94:	bl	112d0 <dcgettext@plt>
   15b98:	ldm	r4, {r3, ip}
   15b9c:	mov	r1, #1
   15ba0:	str	ip, [sp]
   15ba4:	ldr	ip, [r4, #8]
   15ba8:	str	ip, [sp, #4]
   15bac:	ldr	ip, [r4, #12]
   15bb0:	str	ip, [sp, #8]
   15bb4:	ldr	ip, [r4, #16]
   15bb8:	str	ip, [sp, #12]
   15bbc:	mov	r2, r0
   15bc0:	mov	r0, r5
   15bc4:	bl	11450 <__fprintf_chk@plt>
   15bc8:	b	15a98 <close_stdout@@Base+0x2044>
   15bcc:	ldr	r1, [pc, #344]	; 15d2c <close_stdout@@Base+0x22d8>
   15bd0:	mov	r2, #5
   15bd4:	mov	r0, #0
   15bd8:	add	r1, pc, r1
   15bdc:	bl	112d0 <dcgettext@plt>
   15be0:	ldm	r4, {r3, ip}
   15be4:	mov	r1, #1
   15be8:	str	ip, [sp]
   15bec:	ldr	ip, [r4, #8]
   15bf0:	str	ip, [sp, #4]
   15bf4:	ldr	ip, [r4, #12]
   15bf8:	str	ip, [sp, #8]
   15bfc:	ldr	ip, [r4, #16]
   15c00:	str	ip, [sp, #12]
   15c04:	ldr	ip, [r4, #20]
   15c08:	str	ip, [sp, #16]
   15c0c:	mov	r2, r0
   15c10:	mov	r0, r5
   15c14:	bl	11450 <__fprintf_chk@plt>
   15c18:	b	15a98 <close_stdout@@Base+0x2044>
   15c1c:	ldr	r1, [pc, #268]	; 15d30 <close_stdout@@Base+0x22dc>
   15c20:	mov	r2, #5
   15c24:	mov	r0, #0
   15c28:	add	r1, pc, r1
   15c2c:	bl	112d0 <dcgettext@plt>
   15c30:	ldm	r4, {r3, ip}
   15c34:	mov	r1, #1
   15c38:	str	ip, [sp]
   15c3c:	ldr	ip, [r4, #8]
   15c40:	str	ip, [sp, #4]
   15c44:	ldr	ip, [r4, #12]
   15c48:	str	ip, [sp, #8]
   15c4c:	ldr	ip, [r4, #16]
   15c50:	str	ip, [sp, #12]
   15c54:	ldr	ip, [r4, #20]
   15c58:	str	ip, [sp, #16]
   15c5c:	ldr	ip, [r4, #24]
   15c60:	str	ip, [sp, #20]
   15c64:	mov	r2, r0
   15c68:	mov	r0, r5
   15c6c:	bl	11450 <__fprintf_chk@plt>
   15c70:	b	15a98 <close_stdout@@Base+0x2044>
   15c74:	ldr	r1, [pc, #184]	; 15d34 <close_stdout@@Base+0x22e0>
   15c78:	mov	r2, #5
   15c7c:	mov	r0, #0
   15c80:	add	r1, pc, r1
   15c84:	bl	112d0 <dcgettext@plt>
   15c88:	ldm	r4, {r3, ip}
   15c8c:	mov	r1, #1
   15c90:	str	ip, [sp]
   15c94:	ldr	ip, [r4, #8]
   15c98:	str	ip, [sp, #4]
   15c9c:	ldr	ip, [r4, #12]
   15ca0:	str	ip, [sp, #8]
   15ca4:	ldr	ip, [r4, #16]
   15ca8:	str	ip, [sp, #12]
   15cac:	ldr	ip, [r4, #20]
   15cb0:	str	ip, [sp, #16]
   15cb4:	ldr	ip, [r4, #24]
   15cb8:	str	ip, [sp, #20]
   15cbc:	ldr	ip, [r4, #28]
   15cc0:	str	ip, [sp, #24]
   15cc4:	mov	r2, r0
   15cc8:	mov	r0, r5
   15ccc:	bl	11450 <__fprintf_chk@plt>
   15cd0:	b	15a98 <close_stdout@@Base+0x2044>
   15cd4:	str	r3, [sp]
   15cd8:	mov	r3, r2
   15cdc:	ldr	r2, [pc, #84]	; 15d38 <close_stdout@@Base+0x22e4>
   15ce0:	mov	r1, #1
   15ce4:	add	r2, pc, r2
   15ce8:	bl	11450 <__fprintf_chk@plt>
   15cec:	b	159b0 <close_stdout@@Base+0x1f5c>
   15cf0:	ldr	r1, [pc, #68]	; 15d3c <close_stdout@@Base+0x22e8>
   15cf4:	mov	r0, #0
   15cf8:	add	r1, pc, r1
   15cfc:	b	15a40 <close_stdout@@Base+0x1fec>
   15d00:	andeq	r2, r1, r4, ror r6
   15d04:	andeq	r1, r0, ip, lsl lr
   15d08:	andeq	r1, r0, ip, lsl lr
   15d0c:	andeq	r0, r0, ip, asr r1
   15d10:	andeq	r1, r0, ip, ror #27
   15d14:	andeq	r1, r0, r8, ror pc
   15d18:	strdeq	r1, [r0], -r8
   15d1c:	ldrdeq	r1, [r0], -r8
   15d20:			; <UNDEFINED> instruction: 0x00001dbc
   15d24:	muleq	r0, ip, sp
   15d28:	andeq	r1, r0, ip, ror sp
   15d2c:	andeq	r1, r0, r8, asr sp
   15d30:	andeq	r1, r0, r0, lsr sp
   15d34:	andeq	r1, r0, r4, lsl #26
   15d38:	andeq	r1, r0, ip, ror #21
   15d3c:	strdeq	r1, [r0], -r0
   15d40:	push	{r4, r5, lr}
   15d44:	sub	sp, sp, #12
   15d48:	ldr	r5, [sp, #24]
   15d4c:	ldr	ip, [r5]
   15d50:	cmp	ip, #0
   15d54:	beq	15d70 <close_stdout@@Base+0x231c>
   15d58:	mov	lr, r5
   15d5c:	mov	ip, #0
   15d60:	ldr	r4, [lr, #4]!
   15d64:	add	ip, ip, #1
   15d68:	cmp	r4, #0
   15d6c:	bne	15d60 <close_stdout@@Base+0x230c>
   15d70:	stm	sp, {r5, ip}
   15d74:	bl	1596c <close_stdout@@Base+0x1f18>
   15d78:	add	sp, sp, #12
   15d7c:	pop	{r4, r5, pc}
   15d80:	push	{r4, r5, r6, r7, lr}
   15d84:	sub	sp, sp, #60	; 0x3c
   15d88:	ldr	r4, [pc, #100]	; 15df4 <close_stdout@@Base+0x23a0>
   15d8c:	mov	ip, #0
   15d90:	ldr	r5, [pc, #96]	; 15df8 <close_stdout@@Base+0x23a4>
   15d94:	mov	lr, ip
   15d98:	add	r4, pc, r4
   15d9c:	ldr	r6, [sp, #80]	; 0x50
   15da0:	ldr	r7, [r4, r5]
   15da4:	add	r5, sp, #12
   15da8:	ldr	r4, [r7]
   15dac:	str	r4, [sp, #52]	; 0x34
   15db0:	ldr	r4, [r6, ip]
   15db4:	cmp	r4, #0
   15db8:	str	r4, [r5, ip]
   15dbc:	beq	15dd0 <close_stdout@@Base+0x237c>
   15dc0:	add	lr, lr, #1
   15dc4:	add	ip, ip, #4
   15dc8:	cmp	lr, #10
   15dcc:	bne	15db0 <close_stdout@@Base+0x235c>
   15dd0:	stm	sp, {r5, lr}
   15dd4:	bl	1596c <close_stdout@@Base+0x1f18>
   15dd8:	ldr	r2, [sp, #52]	; 0x34
   15ddc:	ldr	r3, [r7]
   15de0:	cmp	r2, r3
   15de4:	bne	15df0 <close_stdout@@Base+0x239c>
   15de8:	add	sp, sp, #60	; 0x3c
   15dec:	pop	{r4, r5, r6, r7, pc}
   15df0:	bl	112dc <__stack_chk_fail@plt>
   15df4:	andeq	r2, r1, r0, ror #4
   15df8:	andeq	r0, r0, r8, lsr #2
   15dfc:	push	{r3}		; (str r3, [sp, #-4]!)
   15e00:	push	{r4, lr}
   15e04:	sub	sp, sp, #20
   15e08:	ldr	lr, [pc, #72]	; 15e58 <close_stdout@@Base+0x2404>
   15e0c:	add	ip, sp, #32
   15e10:	ldr	r4, [pc, #68]	; 15e5c <close_stdout@@Base+0x2408>
   15e14:	add	lr, pc, lr
   15e18:	ldr	r3, [sp, #28]
   15e1c:	ldr	r4, [lr, r4]
   15e20:	str	ip, [sp]
   15e24:	str	ip, [sp, #8]
   15e28:	ldr	ip, [r4]
   15e2c:	str	ip, [sp, #12]
   15e30:	bl	15d80 <close_stdout@@Base+0x232c>
   15e34:	ldr	r2, [sp, #12]
   15e38:	ldr	r3, [r4]
   15e3c:	cmp	r2, r3
   15e40:	bne	15e54 <close_stdout@@Base+0x2400>
   15e44:	add	sp, sp, #20
   15e48:	pop	{r4, lr}
   15e4c:	add	sp, sp, #4
   15e50:	bx	lr
   15e54:	bl	112dc <__stack_chk_fail@plt>
   15e58:	andeq	r2, r1, r4, ror #3
   15e5c:	andeq	r0, r0, r8, lsr #2
   15e60:	ldr	r1, [pc, #132]	; 15eec <close_stdout@@Base+0x2498>
   15e64:	mov	r2, #5
   15e68:	push	{r4, lr}
   15e6c:	add	r1, pc, r1
   15e70:	mov	r0, #0
   15e74:	ldr	r4, [pc, #116]	; 15ef0 <close_stdout@@Base+0x249c>
   15e78:	bl	112d0 <dcgettext@plt>
   15e7c:	ldr	r2, [pc, #112]	; 15ef4 <close_stdout@@Base+0x24a0>
   15e80:	add	r4, pc, r4
   15e84:	add	r2, pc, r2
   15e88:	mov	r1, r0
   15e8c:	mov	r0, #1
   15e90:	bl	11438 <__printf_chk@plt>
   15e94:	ldr	r1, [pc, #92]	; 15ef8 <close_stdout@@Base+0x24a4>
   15e98:	mov	r2, #5
   15e9c:	mov	r0, #0
   15ea0:	add	r1, pc, r1
   15ea4:	bl	112d0 <dcgettext@plt>
   15ea8:	ldr	r2, [pc, #76]	; 15efc <close_stdout@@Base+0x24a8>
   15eac:	ldr	r3, [pc, #76]	; 15f00 <close_stdout@@Base+0x24ac>
   15eb0:	add	r2, pc, r2
   15eb4:	add	r3, pc, r3
   15eb8:	mov	r1, r0
   15ebc:	mov	r0, #1
   15ec0:	bl	11438 <__printf_chk@plt>
   15ec4:	ldr	r1, [pc, #56]	; 15f04 <close_stdout@@Base+0x24b0>
   15ec8:	mov	r0, #0
   15ecc:	mov	r2, #5
   15ed0:	add	r1, pc, r1
   15ed4:	bl	112d0 <dcgettext@plt>
   15ed8:	ldr	r3, [pc, #40]	; 15f08 <close_stdout@@Base+0x24b4>
   15edc:	ldr	r3, [r4, r3]
   15ee0:	pop	{r4, lr}
   15ee4:	ldr	r1, [r3]
   15ee8:	b	1121c <fputs_unlocked@plt>
   15eec:			; <UNDEFINED> instruction: 0x00001bb8
   15ef0:	andeq	r2, r1, r8, ror r1
   15ef4:			; <UNDEFINED> instruction: 0x00001bb8
   15ef8:			; <UNDEFINED> instruction: 0x00001bb4
   15efc:	andeq	r1, r0, r0, lsr #9
   15f00:	andeq	r1, r0, ip, lsr #9
   15f04:	muleq	r0, r8, fp
   15f08:	andeq	r0, r0, r8, asr #2
   15f0c:	push	{r4, lr}
   15f10:	mov	r4, r0
   15f14:	bl	11390 <malloc@plt>
   15f18:	rsbs	r3, r0, #1
   15f1c:	movcc	r3, #0
   15f20:	cmp	r4, #0
   15f24:	moveq	r3, #0
   15f28:	cmp	r3, #0
   15f2c:	popeq	{r4, pc}
   15f30:	bl	16120 <close_stdout@@Base+0x26cc>
   15f34:	push	{r3, r4, r5, lr}
   15f38:	mov	r4, r0
   15f3c:	mvn	r0, #0
   15f40:	mov	r5, r1
   15f44:	bl	169e0 <close_stdout@@Base+0x2f8c>
   15f48:	cmp	r0, r4
   15f4c:	bcc	15f5c <close_stdout@@Base+0x2508>
   15f50:	mul	r0, r4, r5
   15f54:	pop	{r3, r4, r5, lr}
   15f58:	b	15f0c <close_stdout@@Base+0x24b8>
   15f5c:	bl	16120 <close_stdout@@Base+0x26cc>
   15f60:	b	15f0c <close_stdout@@Base+0x24b8>
   15f64:	rsbs	r3, r1, #1
   15f68:	push	{r4, lr}
   15f6c:	movcc	r3, #0
   15f70:	cmp	r0, #0
   15f74:	mov	r4, r1
   15f78:	moveq	r3, #0
   15f7c:	cmp	r3, #0
   15f80:	bne	15fa4 <close_stdout@@Base+0x2550>
   15f84:	bl	112e8 <realloc@plt>
   15f88:	rsbs	r3, r0, #1
   15f8c:	movcc	r3, #0
   15f90:	cmp	r4, #0
   15f94:	moveq	r3, #0
   15f98:	cmp	r3, #0
   15f9c:	popeq	{r4, pc}
   15fa0:	bl	16120 <close_stdout@@Base+0x26cc>
   15fa4:	bl	1127c <free@plt>
   15fa8:	mov	r0, #0
   15fac:	pop	{r4, pc}
   15fb0:	push	{r4, r5, r6, lr}
   15fb4:	mov	r5, r1
   15fb8:	mov	r6, r0
   15fbc:	mov	r1, r2
   15fc0:	mvn	r0, #0
   15fc4:	mov	r4, r2
   15fc8:	bl	169e0 <close_stdout@@Base+0x2f8c>
   15fcc:	cmp	r0, r5
   15fd0:	bcc	15fe4 <close_stdout@@Base+0x2590>
   15fd4:	mov	r0, r6
   15fd8:	mul	r1, r5, r4
   15fdc:	pop	{r4, r5, r6, lr}
   15fe0:	b	15f64 <close_stdout@@Base+0x2510>
   15fe4:	bl	16120 <close_stdout@@Base+0x26cc>
   15fe8:	push	{r3, r4, r5, r6, r7, lr}
   15fec:	subs	r7, r0, #0
   15ff0:	mov	r5, r1
   15ff4:	mov	r6, r2
   15ff8:	ldr	r4, [r1]
   15ffc:	beq	16034 <close_stdout@@Base+0x25e0>
   16000:	movw	r0, #43690	; 0xaaaa
   16004:	mov	r1, r2
   16008:	bfi	r0, r0, #16, #16
   1600c:	bl	169e0 <close_stdout@@Base+0x2f8c>
   16010:	cmp	r4, r0
   16014:	addcc	r3, r4, #1
   16018:	addcc	r4, r4, r3, lsr #1
   1601c:	bcs	16058 <close_stdout@@Base+0x2604>
   16020:	str	r4, [r5]
   16024:	mov	r0, r7
   16028:	mul	r1, r6, r4
   1602c:	pop	{r3, r4, r5, r6, r7, lr}
   16030:	b	15f64 <close_stdout@@Base+0x2510>
   16034:	cmp	r4, #0
   16038:	bne	16020 <close_stdout@@Base+0x25cc>
   1603c:	mov	r0, #64	; 0x40
   16040:	mov	r1, r2
   16044:	bl	169e0 <close_stdout@@Base+0x2f8c>
   16048:	cmp	r0, #0
   1604c:	movne	r4, r0
   16050:	addeq	r4, r0, #1
   16054:	b	16020 <close_stdout@@Base+0x25cc>
   16058:	bl	16120 <close_stdout@@Base+0x26cc>
   1605c:	cmp	r0, #0
   16060:	push	{r3, lr}
   16064:	ldr	r3, [r1]
   16068:	beq	16094 <close_stdout@@Base+0x2640>
   1606c:	movw	r2, #43689	; 0xaaa9
   16070:	movt	r2, #43690	; 0xaaaa
   16074:	cmp	r3, r2
   16078:	addls	r2, r3, #1
   1607c:	addls	r3, r3, r2, lsr #1
   16080:	bhi	160ac <close_stdout@@Base+0x2658>
   16084:	str	r3, [r1]
   16088:	mov	r1, r3
   1608c:	pop	{r3, lr}
   16090:	b	15f64 <close_stdout@@Base+0x2510>
   16094:	cmp	r3, #0
   16098:	moveq	r3, #64	; 0x40
   1609c:	str	r3, [r1]
   160a0:	mov	r1, r3
   160a4:	pop	{r3, lr}
   160a8:	b	15f64 <close_stdout@@Base+0x2510>
   160ac:	bl	16120 <close_stdout@@Base+0x26cc>
   160b0:	push	{r4, lr}
   160b4:	mov	r4, r0
   160b8:	bl	15f0c <close_stdout@@Base+0x24b8>
   160bc:	mov	r2, r4
   160c0:	mov	r1, #0
   160c4:	pop	{r4, lr}
   160c8:	b	11414 <memset@plt>
   160cc:	push	{r3, lr}
   160d0:	bl	11210 <calloc@plt>
   160d4:	cmp	r0, #0
   160d8:	popne	{r3, pc}
   160dc:	bl	16120 <close_stdout@@Base+0x26cc>
   160e0:	push	{r3, r4, r5, lr}
   160e4:	mov	r4, r1
   160e8:	mov	r5, r0
   160ec:	mov	r0, r1
   160f0:	bl	15f0c <close_stdout@@Base+0x24b8>
   160f4:	mov	r1, r5
   160f8:	mov	r2, r4
   160fc:	pop	{r3, r4, r5, lr}
   16100:	b	112a0 <memcpy@plt>
   16104:	push	{r4, lr}
   16108:	mov	r4, r0
   1610c:	bl	113e4 <strlen@plt>
   16110:	add	r1, r0, #1
   16114:	mov	r0, r4
   16118:	pop	{r4, lr}
   1611c:	b	160e0 <close_stdout@@Base+0x268c>
   16120:	ldr	r3, [pc, #64]	; 16168 <close_stdout@@Base+0x2714>
   16124:	mov	r2, #5
   16128:	ldr	ip, [pc, #60]	; 1616c <close_stdout@@Base+0x2718>
   1612c:	mov	r0, #0
   16130:	add	r3, pc, r3
   16134:	ldr	r1, [pc, #52]	; 16170 <close_stdout@@Base+0x271c>
   16138:	push	{r4, lr}
   1613c:	add	r1, pc, r1
   16140:	ldr	r3, [r3, ip]
   16144:	ldr	r4, [r3]
   16148:	bl	112d0 <dcgettext@plt>
   1614c:	ldr	r2, [pc, #32]	; 16174 <close_stdout@@Base+0x2720>
   16150:	mov	r1, #0
   16154:	add	r2, pc, r2
   16158:	mov	r3, r0
   1615c:	mov	r0, r4
   16160:	bl	1136c <error@plt>
   16164:	bl	1151c <abort@plt>
   16168:	andeq	r1, r1, r8, asr #29
   1616c:	andeq	r0, r0, r0, asr r1
   16170:	muleq	r0, ip, r9
   16174:	andeq	r1, r0, ip, lsr #11
   16178:	push	{r3, lr}
   1617c:	bl	11300 <__strndup@plt>
   16180:	cmp	r0, #0
   16184:	popne	{r3, pc}
   16188:	bl	16120 <close_stdout@@Base+0x26cc>
   1618c:	push	{r4, r5, r6, lr}
   16190:	sub	sp, sp, #8
   16194:	mov	r4, r0
   16198:	bl	11444 <fileno@plt>
   1619c:	cmp	r0, #0
   161a0:	mov	r0, r4
   161a4:	blt	16220 <close_stdout@@Base+0x27cc>
   161a8:	bl	113a8 <__freading@plt>
   161ac:	cmp	r0, #0
   161b0:	bne	161ec <close_stdout@@Base+0x2798>
   161b4:	mov	r0, r4
   161b8:	bl	1622c <close_stdout@@Base+0x27d8>
   161bc:	cmp	r0, #0
   161c0:	beq	1621c <close_stdout@@Base+0x27c8>
   161c4:	bl	113fc <__errno_location@plt>
   161c8:	ldr	r6, [r0]
   161cc:	mov	r5, r0
   161d0:	mov	r0, r4
   161d4:	bl	11468 <fclose@plt>
   161d8:	cmp	r6, #0
   161dc:	mvnne	r0, #0
   161e0:	strne	r6, [r5]
   161e4:	add	sp, sp, #8
   161e8:	pop	{r4, r5, r6, pc}
   161ec:	mov	r0, r4
   161f0:	bl	11444 <fileno@plt>
   161f4:	mov	r1, #1
   161f8:	mov	r2, #0
   161fc:	mov	r3, #0
   16200:	str	r1, [sp]
   16204:	bl	11330 <lseek64@plt>
   16208:	mvn	r2, #0
   1620c:	mvn	r3, #0
   16210:	cmp	r1, r3
   16214:	cmpeq	r0, r2
   16218:	bne	161b4 <close_stdout@@Base+0x2760>
   1621c:	mov	r0, r4
   16220:	add	sp, sp, #8
   16224:	pop	{r4, r5, r6, lr}
   16228:	b	11468 <fclose@plt>
   1622c:	push	{r4, lr}
   16230:	subs	r4, r0, #0
   16234:	sub	sp, sp, #8
   16238:	beq	16248 <close_stdout@@Base+0x27f4>
   1623c:	bl	113a8 <__freading@plt>
   16240:	cmp	r0, #0
   16244:	bne	16258 <close_stdout@@Base+0x2804>
   16248:	mov	r0, r4
   1624c:	add	sp, sp, #8
   16250:	pop	{r4, lr}
   16254:	b	11258 <fflush@plt>
   16258:	ldr	r3, [r4]
   1625c:	tst	r3, #256	; 0x100
   16260:	beq	16248 <close_stdout@@Base+0x27f4>
   16264:	mov	r3, #1
   16268:	mov	r0, r4
   1626c:	str	r3, [sp]
   16270:	mov	r2, #0
   16274:	mov	r3, #0
   16278:	bl	162c8 <close_stdout@@Base+0x2874>
   1627c:	mov	r0, r4
   16280:	add	sp, sp, #8
   16284:	pop	{r4, lr}
   16288:	b	11258 <fflush@plt>
   1628c:	ldr	r2, [r0, #20]
   16290:	ldr	r3, [r0, #16]
   16294:	cmp	r2, r3
   16298:	bhi	162b8 <close_stdout@@Base+0x2864>
   1629c:	ldr	r2, [r0, #8]
   162a0:	ldr	r3, [r0, #4]
   162a4:	subs	r3, r2, r3
   162a8:	beq	162c0 <close_stdout@@Base+0x286c>
   162ac:	str	r3, [r1]
   162b0:	ldr	r0, [r0, #4]
   162b4:	bx	lr
   162b8:	mov	r0, #0
   162bc:	bx	lr
   162c0:	mov	r0, r3
   162c4:	bx	lr
   162c8:	push	{r4, r5, r6, r7, lr}
   162cc:	sub	sp, sp, #20
   162d0:	ldmib	r0, {r1, ip}
   162d4:	mov	r6, r0
   162d8:	ldr	r4, [sp, #40]	; 0x28
   162dc:	cmp	ip, r1
   162e0:	beq	162f8 <close_stdout@@Base+0x28a4>
   162e4:	str	r4, [sp, #40]	; 0x28
   162e8:	mov	r0, r6
   162ec:	add	sp, sp, #20
   162f0:	pop	{r4, r5, r6, r7, lr}
   162f4:	b	11480 <fseeko64@plt>
   162f8:	ldr	ip, [r0, #20]
   162fc:	ldr	r1, [r0, #16]
   16300:	cmp	ip, r1
   16304:	bne	162e4 <close_stdout@@Base+0x2890>
   16308:	ldr	r7, [r0, #36]	; 0x24
   1630c:	cmp	r7, #0
   16310:	bne	162e4 <close_stdout@@Base+0x2890>
   16314:	str	r2, [sp, #12]
   16318:	mvn	r5, #0
   1631c:	str	r3, [sp, #8]
   16320:	bl	11444 <fileno@plt>
   16324:	str	r4, [sp]
   16328:	mvn	r4, #0
   1632c:	ldr	r2, [sp, #12]
   16330:	ldr	r3, [sp, #8]
   16334:	bl	11330 <lseek64@plt>
   16338:	mov	r2, r0
   1633c:	mov	r3, r1
   16340:	cmp	r3, r5
   16344:	cmpeq	r2, r4
   16348:	beq	16368 <close_stdout@@Base+0x2914>
   1634c:	ldr	r1, [r6]
   16350:	mov	r0, r7
   16354:	strd	r2, [r6, #80]	; 0x50
   16358:	bic	r3, r1, #16
   1635c:	str	r3, [r6]
   16360:	add	sp, sp, #20
   16364:	pop	{r4, r5, r6, r7, pc}
   16368:	mvn	r0, #0
   1636c:	b	16360 <close_stdout@@Base+0x290c>
   16370:	push	{r4, r5, r6, lr}
   16374:	mov	r4, r0
   16378:	bl	11354 <__fpending@plt>
   1637c:	mov	r6, r0
   16380:	mov	r0, r4
   16384:	ldr	r4, [r4]
   16388:	bl	1618c <close_stdout@@Base+0x2738>
   1638c:	and	r4, r4, #32
   16390:	adds	r5, r0, #0
   16394:	movne	r5, #1
   16398:	cmp	r4, #0
   1639c:	bne	163bc <close_stdout@@Base+0x2968>
   163a0:	cmp	r5, #0
   163a4:	beq	163b4 <close_stdout@@Base+0x2960>
   163a8:	cmp	r6, #0
   163ac:	beq	163d8 <close_stdout@@Base+0x2984>
   163b0:	mvn	r4, #0
   163b4:	mov	r0, r4
   163b8:	pop	{r4, r5, r6, pc}
   163bc:	cmp	r5, #0
   163c0:	bne	163b0 <close_stdout@@Base+0x295c>
   163c4:	bl	113fc <__errno_location@plt>
   163c8:	mvn	r4, #0
   163cc:	str	r5, [r0]
   163d0:	mov	r0, r4
   163d4:	pop	{r4, r5, r6, pc}
   163d8:	bl	113fc <__errno_location@plt>
   163dc:	ldr	r4, [r0]
   163e0:	subs	r4, r4, #9
   163e4:	mvnne	r4, #0
   163e8:	mov	r0, r4
   163ec:	pop	{r4, r5, r6, pc}
   163f0:	ldr	r3, [pc, #384]	; 16578 <close_stdout@@Base+0x2b24>
   163f4:	ldr	r2, [pc, #384]	; 1657c <close_stdout@@Base+0x2b28>
   163f8:	add	r3, pc, r3
   163fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   16400:	sub	sp, sp, #4096	; 0x1000
   16404:	ldr	r8, [r3, r2]
   16408:	sub	sp, sp, #20
   1640c:	add	r2, sp, #8192	; 0x2000
   16410:	subs	r4, r1, #0
   16414:	mov	r6, r0
   16418:	ldr	r3, [r8]
   1641c:	str	r3, [r2, #-4084]	; 0xfffff00c
   16420:	beq	164dc <close_stdout@@Base+0x2a88>
   16424:	bl	169a0 <close_stdout@@Base+0x2f4c>
   16428:	subs	r5, r0, #0
   1642c:	beq	164e4 <close_stdout@@Base+0x2a90>
   16430:	movw	r7, #61432	; 0xeff8
   16434:	add	r9, sp, #8
   16438:	movt	r7, #65535	; 0xffff
   1643c:	b	16450 <close_stdout@@Base+0x29fc>
   16440:	subs	r4, r4, #1
   16444:	beq	16554 <close_stdout@@Base+0x2b00>
   16448:	subs	r5, r5, #1
   1644c:	beq	164e4 <close_stdout@@Base+0x2a90>
   16450:	mov	r0, r6
   16454:	mov	r1, r9
   16458:	bl	1628c <close_stdout@@Base+0x2838>
   1645c:	cmp	r0, #0
   16460:	beq	1649c <close_stdout@@Base+0x2a48>
   16464:	add	r2, sp, #4096	; 0x1000
   16468:	add	r2, r2, #16
   1646c:	ldr	r3, [r2, r7]
   16470:	cmp	r3, #0
   16474:	beq	1649c <close_stdout@@Base+0x2a48>
   16478:	cmp	r4, r3
   1647c:	movcc	r3, r4
   16480:	ldr	r2, [r6, #4]
   16484:	subs	r4, r4, r3
   16488:	add	r2, r2, r3
   1648c:	str	r2, [r6, #4]
   16490:	beq	16554 <close_stdout@@Base+0x2b00>
   16494:	subs	r5, r5, r3
   16498:	beq	164e4 <close_stdout@@Base+0x2a90>
   1649c:	mov	r0, r6
   164a0:	bl	1142c <fgetc@plt>
   164a4:	cmn	r0, #1
   164a8:	bne	16440 <close_stdout@@Base+0x29ec>
   164ac:	mov	r0, r6
   164b0:	bl	11288 <ferror@plt>
   164b4:	subs	r0, r0, #0
   164b8:	mvnne	r0, #0
   164bc:	add	r3, sp, #8192	; 0x2000
   164c0:	ldr	r2, [r3, #-4084]	; 0xfffff00c
   164c4:	ldr	r3, [r8]
   164c8:	cmp	r2, r3
   164cc:	bne	16574 <close_stdout@@Base+0x2b20>
   164d0:	add	sp, sp, #4096	; 0x1000
   164d4:	add	sp, sp, #20
   164d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   164dc:	mov	r0, r4
   164e0:	b	164bc <close_stdout@@Base+0x2a68>
   164e4:	mov	r0, r6
   164e8:	bl	11444 <fileno@plt>
   164ec:	cmp	r0, #0
   164f0:	blt	16514 <close_stdout@@Base+0x2ac0>
   164f4:	mov	r3, #0
   164f8:	mov	r5, #1
   164fc:	mov	r2, #0
   16500:	str	r5, [sp]
   16504:	bl	11330 <lseek64@plt>
   16508:	cmp	r0, #0
   1650c:	sbcs	r3, r1, #0
   16510:	bge	1655c <close_stdout@@Base+0x2b08>
   16514:	add	r7, sp, #12
   16518:	b	16524 <close_stdout@@Base+0x2ad0>
   1651c:	subs	r4, r4, r5
   16520:	beq	164dc <close_stdout@@Base+0x2a88>
   16524:	cmp	r4, #4096	; 0x1000
   16528:	movcc	r5, r4
   1652c:	movcs	r5, #4096	; 0x1000
   16530:	str	r6, [sp]
   16534:	mov	r0, r7
   16538:	mov	r1, #4096	; 0x1000
   1653c:	mov	r3, r5
   16540:	mov	r2, #1
   16544:	bl	1148c <__fread_chk@plt>
   16548:	cmp	r5, r0
   1654c:	bls	1651c <close_stdout@@Base+0x2ac8>
   16550:	b	164ac <close_stdout@@Base+0x2a58>
   16554:	mov	r0, #0
   16558:	b	164bc <close_stdout@@Base+0x2a68>
   1655c:	str	r5, [sp]
   16560:	mov	r0, r6
   16564:	mov	r2, r4
   16568:	mov	r3, #0
   1656c:	bl	162c8 <close_stdout@@Base+0x2874>
   16570:	b	164bc <close_stdout@@Base+0x2a68>
   16574:	bl	112dc <__stack_chk_fail@plt>
   16578:	andeq	r1, r1, r0, lsl #24
   1657c:	andeq	r0, r0, r8, lsr #2
   16580:	ldr	r3, [pc, #984]	; 16960 <close_stdout@@Base+0x2f0c>
   16584:	mov	r0, #14
   16588:	ldr	r2, [pc, #980]	; 16964 <close_stdout@@Base+0x2f10>
   1658c:	add	r3, pc, r3
   16590:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16594:	sub	sp, sp, #132	; 0x84
   16598:	ldr	r6, [r3, r2]
   1659c:	ldr	r3, [r6]
   165a0:	str	r3, [sp, #124]	; 0x7c
   165a4:	bl	114c8 <nl_langinfo@plt>
   165a8:	subs	r5, r0, #0
   165ac:	beq	16660 <close_stdout@@Base+0x2c0c>
   165b0:	ldr	r3, [pc, #944]	; 16968 <close_stdout@@Base+0x2f14>
   165b4:	ldr	r4, [pc, r3]
   165b8:	cmp	r4, #0
   165bc:	beq	1666c <close_stdout@@Base+0x2c18>
   165c0:	ldrb	r7, [r4]
   165c4:	cmp	r7, #0
   165c8:	bne	165fc <close_stdout@@Base+0x2ba8>
   165cc:	b	16634 <close_stdout@@Base+0x2be0>
   165d0:	mov	r0, r4
   165d4:	bl	113e4 <strlen@plt>
   165d8:	add	r0, r0, #1
   165dc:	add	r7, r4, r0
   165e0:	mov	r0, r7
   165e4:	bl	113e4 <strlen@plt>
   165e8:	add	r0, r0, #1
   165ec:	add	r4, r7, r0
   165f0:	ldrb	r7, [r7, r0]
   165f4:	cmp	r7, #0
   165f8:	beq	16634 <close_stdout@@Base+0x2be0>
   165fc:	mov	r0, r5
   16600:	mov	r1, r4
   16604:	bl	11240 <strcmp@plt>
   16608:	cmp	r0, #0
   1660c:	beq	16624 <close_stdout@@Base+0x2bd0>
   16610:	cmp	r7, #42	; 0x2a
   16614:	bne	165d0 <close_stdout@@Base+0x2b7c>
   16618:	ldrb	r3, [r4, #1]
   1661c:	cmp	r3, #0
   16620:	bne	165d0 <close_stdout@@Base+0x2b7c>
   16624:	mov	r0, r4
   16628:	bl	113e4 <strlen@plt>
   1662c:	add	r0, r0, #1
   16630:	add	r5, r4, r0
   16634:	ldrb	r3, [r5]
   16638:	cmp	r3, #0
   1663c:	ldreq	r5, [pc, #808]	; 1696c <close_stdout@@Base+0x2f18>
   16640:	addeq	r5, pc, r5
   16644:	ldr	r2, [sp, #124]	; 0x7c
   16648:	mov	r0, r5
   1664c:	ldr	r3, [r6]
   16650:	cmp	r2, r3
   16654:	bne	16934 <close_stdout@@Base+0x2ee0>
   16658:	add	sp, sp, #132	; 0x84
   1665c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16660:	ldr	r5, [pc, #776]	; 16970 <close_stdout@@Base+0x2f1c>
   16664:	add	r5, pc, r5
   16668:	b	165b0 <close_stdout@@Base+0x2b5c>
   1666c:	ldr	r0, [pc, #768]	; 16974 <close_stdout@@Base+0x2f20>
   16670:	add	r0, pc, r0
   16674:	bl	11384 <getenv@plt>
   16678:	subs	r8, r0, #0
   1667c:	beq	1690c <close_stdout@@Base+0x2eb8>
   16680:	ldrb	r3, [r8]
   16684:	cmp	r3, #0
   16688:	beq	168a0 <close_stdout@@Base+0x2e4c>
   1668c:	bl	113e4 <strlen@plt>
   16690:	subs	sl, r0, #0
   16694:	subne	r3, sl, #1
   16698:	bne	168b0 <close_stdout@@Base+0x2e5c>
   1669c:	mov	r9, #0
   166a0:	mov	fp, r9
   166a4:	add	r9, sl, r9
   166a8:	add	r0, r9, #14
   166ac:	bl	11390 <malloc@plt>
   166b0:	subs	r7, r0, #0
   166b4:	beq	16900 <close_stdout@@Base+0x2eac>
   166b8:	mov	r1, r8
   166bc:	mov	r2, sl
   166c0:	bl	112a0 <memcpy@plt>
   166c4:	cmp	fp, #0
   166c8:	add	ip, r7, r9
   166cc:	movne	r3, #47	; 0x2f
   166d0:	strbne	r3, [r7, sl]
   166d4:	ldr	r3, [pc, #668]	; 16978 <close_stdout@@Base+0x2f24>
   166d8:	add	r3, pc, r3
   166dc:	ldm	r3!, {r0, r1, r2}
   166e0:	ldrh	r3, [r3]
   166e4:	str	r0, [r7, r9]
   166e8:	mov	r0, r7
   166ec:	str	r1, [ip, #4]
   166f0:	mov	r1, #32768	; 0x8000
   166f4:	strh	r3, [ip, #12]
   166f8:	str	r2, [ip, #8]
   166fc:	bl	11378 <open64@plt>
   16700:	subs	r8, r0, #0
   16704:	blt	168c8 <close_stdout@@Base+0x2e74>
   16708:	ldr	r1, [pc, #620]	; 1697c <close_stdout@@Base+0x2f28>
   1670c:	add	r1, pc, r1
   16710:	bl	11204 <fdopen@plt>
   16714:	subs	fp, r0, #0
   16718:	beq	16920 <close_stdout@@Base+0x2ecc>
   1671c:	ldr	r0, [pc, #604]	; 16980 <close_stdout@@Base+0x2f2c>
   16720:	add	sl, sp, #20
   16724:	add	r9, sp, #72	; 0x48
   16728:	mov	r8, #0
   1672c:	add	r0, pc, r0
   16730:	str	r0, [sp, #12]
   16734:	ldr	r3, [fp, #4]
   16738:	ldr	r2, [fp, #8]
   1673c:	cmp	r3, r2
   16740:	bcs	1682c <close_stdout@@Base+0x2dd8>
   16744:	add	r2, r3, #1
   16748:	str	r2, [fp, #4]
   1674c:	ldrb	r0, [r3]
   16750:	cmp	r0, #32
   16754:	beq	16734 <close_stdout@@Base+0x2ce0>
   16758:	sub	r3, r0, #9
   1675c:	cmp	r3, #1
   16760:	bls	16734 <close_stdout@@Base+0x2ce0>
   16764:	cmp	r0, #35	; 0x23
   16768:	beq	16840 <close_stdout@@Base+0x2dec>
   1676c:	mov	r1, fp
   16770:	bl	113f0 <ungetc@plt>
   16774:	mov	r0, fp
   16778:	ldr	r1, [sp, #12]
   1677c:	mov	r2, sl
   16780:	mov	r3, r9
   16784:	bl	11420 <fscanf@plt>
   16788:	cmp	r0, #1
   1678c:	ble	16870 <close_stdout@@Base+0x2e1c>
   16790:	mov	r0, sl
   16794:	bl	113e4 <strlen@plt>
   16798:	str	r0, [sp, #8]
   1679c:	mov	r0, r9
   167a0:	bl	113e4 <strlen@plt>
   167a4:	cmp	r8, #0
   167a8:	mov	r2, r0
   167ac:	bne	168d4 <close_stdout@@Base+0x2e80>
   167b0:	ldr	r3, [sp, #8]
   167b4:	str	r2, [sp]
   167b8:	add	r8, r0, r3
   167bc:	add	r0, r8, #3
   167c0:	add	r8, r8, #2
   167c4:	bl	11390 <malloc@plt>
   167c8:	ldr	r2, [sp]
   167cc:	mov	r3, r0
   167d0:	cmp	r3, #0
   167d4:	beq	16938 <close_stdout@@Base+0x2ee4>
   167d8:	ldr	r0, [sp, #8]
   167dc:	movw	r1, #65534	; 0xfffe
   167e0:	movt	r1, #65535	; 0xffff
   167e4:	rsb	r2, r2, r8
   167e8:	rsb	r1, r0, r1
   167ec:	stm	sp, {r2, r3}
   167f0:	add	r0, r1, r2
   167f4:	mov	r1, sl
   167f8:	add	r0, r3, r0
   167fc:	mov	r4, r3
   16800:	bl	11348 <strcpy@plt>
   16804:	ldr	r2, [sp]
   16808:	ldr	r3, [sp, #4]
   1680c:	mov	r1, r9
   16810:	sub	r0, r2, #1
   16814:	add	r0, r3, r0
   16818:	bl	11348 <strcpy@plt>
   1681c:	ldr	r3, [fp, #4]
   16820:	ldr	r2, [fp, #8]
   16824:	cmp	r3, r2
   16828:	bcc	16744 <close_stdout@@Base+0x2cf0>
   1682c:	mov	r0, fp
   16830:	bl	11498 <__uflow@plt>
   16834:	cmn	r0, #1
   16838:	beq	16870 <close_stdout@@Base+0x2e1c>
   1683c:	b	16750 <close_stdout@@Base+0x2cfc>
   16840:	ldr	r3, [fp, #4]
   16844:	ldr	r2, [fp, #8]
   16848:	cmp	r3, r2
   1684c:	bcs	16954 <close_stdout@@Base+0x2f00>
   16850:	add	r2, r3, #1
   16854:	str	r2, [fp, #4]
   16858:	ldrb	r0, [r3]
   1685c:	cmp	r0, #10
   16860:	cmnne	r0, #1
   16864:	bne	16840 <close_stdout@@Base+0x2dec>
   16868:	cmn	r0, #1
   1686c:	bne	16734 <close_stdout@@Base+0x2ce0>
   16870:	mov	r0, fp
   16874:	bl	1618c <close_stdout@@Base+0x2738>
   16878:	cmp	r8, #0
   1687c:	beq	168c8 <close_stdout@@Base+0x2e74>
   16880:	mov	r3, #0
   16884:	strb	r3, [r4, r8]
   16888:	mov	r0, r7
   1688c:	bl	1127c <free@plt>
   16890:	ldr	r3, [pc, #236]	; 16984 <close_stdout@@Base+0x2f30>
   16894:	add	r3, pc, r3
   16898:	str	r4, [r3]
   1689c:	b	165c0 <close_stdout@@Base+0x2b6c>
   168a0:	ldr	r8, [pc, #224]	; 16988 <close_stdout@@Base+0x2f34>
   168a4:	mov	r3, #7
   168a8:	mov	sl, #8
   168ac:	add	r8, pc, r8
   168b0:	ldrb	r3, [r8, r3]
   168b4:	cmp	r3, #47	; 0x2f
   168b8:	movne	r9, #1
   168bc:	movne	fp, r9
   168c0:	bne	166a4 <close_stdout@@Base+0x2c50>
   168c4:	b	1669c <close_stdout@@Base+0x2c48>
   168c8:	ldr	r4, [pc, #188]	; 1698c <close_stdout@@Base+0x2f38>
   168cc:	add	r4, pc, r4
   168d0:	b	16888 <close_stdout@@Base+0x2e34>
   168d4:	ldr	r0, [sp, #8]
   168d8:	str	r2, [sp]
   168dc:	add	r3, r0, r2
   168e0:	mov	r0, r4
   168e4:	add	r8, r3, r8
   168e8:	add	r1, r8, #3
   168ec:	add	r8, r8, #2
   168f0:	bl	112e8 <realloc@plt>
   168f4:	ldr	r2, [sp]
   168f8:	mov	r3, r0
   168fc:	b	167d0 <close_stdout@@Base+0x2d7c>
   16900:	ldr	r4, [pc, #136]	; 16990 <close_stdout@@Base+0x2f3c>
   16904:	add	r4, pc, r4
   16908:	b	16890 <close_stdout@@Base+0x2e3c>
   1690c:	ldr	r8, [pc, #128]	; 16994 <close_stdout@@Base+0x2f40>
   16910:	mov	r3, #7
   16914:	mov	sl, #8
   16918:	add	r8, pc, r8
   1691c:	b	168b0 <close_stdout@@Base+0x2e5c>
   16920:	ldr	r4, [pc, #112]	; 16998 <close_stdout@@Base+0x2f44>
   16924:	mov	r0, r8
   16928:	add	r4, pc, r4
   1692c:	bl	11528 <close@plt>
   16930:	b	16888 <close_stdout@@Base+0x2e34>
   16934:	bl	112dc <__stack_chk_fail@plt>
   16938:	mov	r0, r4
   1693c:	ldr	r4, [pc, #88]	; 1699c <close_stdout@@Base+0x2f48>
   16940:	bl	1127c <free@plt>
   16944:	mov	r0, fp
   16948:	add	r4, pc, r4
   1694c:	bl	1618c <close_stdout@@Base+0x2738>
   16950:	b	16888 <close_stdout@@Base+0x2e34>
   16954:	mov	r0, fp
   16958:	bl	11498 <__uflow@plt>
   1695c:	b	1685c <close_stdout@@Base+0x2e08>
   16960:	andeq	r1, r1, ip, ror #20
   16964:	andeq	r0, r0, r8, lsr #2
   16968:	andeq	r1, r1, r4, lsl #27
   1696c:			; <UNDEFINED> instruction: 0x000014b8
   16970:			; <UNDEFINED> instruction: 0x00000db0
   16974:	muleq	r0, r0, r4
   16978:	andeq	r1, r0, r8, lsr r4
   1697c:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   16980:	strdeq	r1, [r0], -r4
   16984:	andeq	r1, r1, r4, lsr #21
   16988:	andeq	r1, r0, r0, asr #4
   1698c:	andeq	r0, r0, r8, asr #22
   16990:	andeq	r0, r0, r0, lsl fp
   16994:	ldrdeq	r1, [r0], -r4
   16998:	andeq	r0, r0, ip, ror #21
   1699c:	andeq	r0, r0, ip, asr #21
   169a0:	ldr	r2, [r0, #20]
   169a4:	ldr	r3, [r0, #16]
   169a8:	cmp	r2, r3
   169ac:	bhi	169d8 <close_stdout@@Base+0x2f84>
   169b0:	ldr	r3, [r0]
   169b4:	ldr	r1, [r0, #8]
   169b8:	ands	r3, r3, #256	; 0x100
   169bc:	ldr	r2, [r0, #4]
   169c0:	ldrne	r3, [r0, #36]	; 0x24
   169c4:	rsb	r2, r2, r1
   169c8:	ldrne	r1, [r0, #44]	; 0x2c
   169cc:	rsbne	r3, r3, r1
   169d0:	add	r0, r2, r3
   169d4:	bx	lr
   169d8:	mov	r0, #0
   169dc:	bx	lr
   169e0:	subs	r2, r1, #1
   169e4:	bxeq	lr
   169e8:	bcc	16bc0 <close_stdout@@Base+0x316c>
   169ec:	cmp	r0, r1
   169f0:	bls	16ba4 <close_stdout@@Base+0x3150>
   169f4:	tst	r1, r2
   169f8:	beq	16bb0 <close_stdout@@Base+0x315c>
   169fc:	clz	r3, r0
   16a00:	clz	r2, r1
   16a04:	sub	r3, r2, r3
   16a08:	rsbs	r3, r3, #31
   16a0c:	addne	r3, r3, r3, lsl #1
   16a10:	mov	r2, #0
   16a14:	addne	pc, pc, r3, lsl #2
   16a18:	nop	{0}
   16a1c:	cmp	r0, r1, lsl #31
   16a20:	adc	r2, r2, r2
   16a24:	subcs	r0, r0, r1, lsl #31
   16a28:	cmp	r0, r1, lsl #30
   16a2c:	adc	r2, r2, r2
   16a30:	subcs	r0, r0, r1, lsl #30
   16a34:	cmp	r0, r1, lsl #29
   16a38:	adc	r2, r2, r2
   16a3c:	subcs	r0, r0, r1, lsl #29
   16a40:	cmp	r0, r1, lsl #28
   16a44:	adc	r2, r2, r2
   16a48:	subcs	r0, r0, r1, lsl #28
   16a4c:	cmp	r0, r1, lsl #27
   16a50:	adc	r2, r2, r2
   16a54:	subcs	r0, r0, r1, lsl #27
   16a58:	cmp	r0, r1, lsl #26
   16a5c:	adc	r2, r2, r2
   16a60:	subcs	r0, r0, r1, lsl #26
   16a64:	cmp	r0, r1, lsl #25
   16a68:	adc	r2, r2, r2
   16a6c:	subcs	r0, r0, r1, lsl #25
   16a70:	cmp	r0, r1, lsl #24
   16a74:	adc	r2, r2, r2
   16a78:	subcs	r0, r0, r1, lsl #24
   16a7c:	cmp	r0, r1, lsl #23
   16a80:	adc	r2, r2, r2
   16a84:	subcs	r0, r0, r1, lsl #23
   16a88:	cmp	r0, r1, lsl #22
   16a8c:	adc	r2, r2, r2
   16a90:	subcs	r0, r0, r1, lsl #22
   16a94:	cmp	r0, r1, lsl #21
   16a98:	adc	r2, r2, r2
   16a9c:	subcs	r0, r0, r1, lsl #21
   16aa0:	cmp	r0, r1, lsl #20
   16aa4:	adc	r2, r2, r2
   16aa8:	subcs	r0, r0, r1, lsl #20
   16aac:	cmp	r0, r1, lsl #19
   16ab0:	adc	r2, r2, r2
   16ab4:	subcs	r0, r0, r1, lsl #19
   16ab8:	cmp	r0, r1, lsl #18
   16abc:	adc	r2, r2, r2
   16ac0:	subcs	r0, r0, r1, lsl #18
   16ac4:	cmp	r0, r1, lsl #17
   16ac8:	adc	r2, r2, r2
   16acc:	subcs	r0, r0, r1, lsl #17
   16ad0:	cmp	r0, r1, lsl #16
   16ad4:	adc	r2, r2, r2
   16ad8:	subcs	r0, r0, r1, lsl #16
   16adc:	cmp	r0, r1, lsl #15
   16ae0:	adc	r2, r2, r2
   16ae4:	subcs	r0, r0, r1, lsl #15
   16ae8:	cmp	r0, r1, lsl #14
   16aec:	adc	r2, r2, r2
   16af0:	subcs	r0, r0, r1, lsl #14
   16af4:	cmp	r0, r1, lsl #13
   16af8:	adc	r2, r2, r2
   16afc:	subcs	r0, r0, r1, lsl #13
   16b00:	cmp	r0, r1, lsl #12
   16b04:	adc	r2, r2, r2
   16b08:	subcs	r0, r0, r1, lsl #12
   16b0c:	cmp	r0, r1, lsl #11
   16b10:	adc	r2, r2, r2
   16b14:	subcs	r0, r0, r1, lsl #11
   16b18:	cmp	r0, r1, lsl #10
   16b1c:	adc	r2, r2, r2
   16b20:	subcs	r0, r0, r1, lsl #10
   16b24:	cmp	r0, r1, lsl #9
   16b28:	adc	r2, r2, r2
   16b2c:	subcs	r0, r0, r1, lsl #9
   16b30:	cmp	r0, r1, lsl #8
   16b34:	adc	r2, r2, r2
   16b38:	subcs	r0, r0, r1, lsl #8
   16b3c:	cmp	r0, r1, lsl #7
   16b40:	adc	r2, r2, r2
   16b44:	subcs	r0, r0, r1, lsl #7
   16b48:	cmp	r0, r1, lsl #6
   16b4c:	adc	r2, r2, r2
   16b50:	subcs	r0, r0, r1, lsl #6
   16b54:	cmp	r0, r1, lsl #5
   16b58:	adc	r2, r2, r2
   16b5c:	subcs	r0, r0, r1, lsl #5
   16b60:	cmp	r0, r1, lsl #4
   16b64:	adc	r2, r2, r2
   16b68:	subcs	r0, r0, r1, lsl #4
   16b6c:	cmp	r0, r1, lsl #3
   16b70:	adc	r2, r2, r2
   16b74:	subcs	r0, r0, r1, lsl #3
   16b78:	cmp	r0, r1, lsl #2
   16b7c:	adc	r2, r2, r2
   16b80:	subcs	r0, r0, r1, lsl #2
   16b84:	cmp	r0, r1, lsl #1
   16b88:	adc	r2, r2, r2
   16b8c:	subcs	r0, r0, r1, lsl #1
   16b90:	cmp	r0, r1
   16b94:	adc	r2, r2, r2
   16b98:	subcs	r0, r0, r1
   16b9c:	mov	r0, r2
   16ba0:	bx	lr
   16ba4:	moveq	r0, #1
   16ba8:	movne	r0, #0
   16bac:	bx	lr
   16bb0:	clz	r2, r1
   16bb4:	rsb	r2, r2, #31
   16bb8:	lsr	r0, r0, r2
   16bbc:	bx	lr
   16bc0:	cmp	r0, #0
   16bc4:	mvnne	r0, #0
   16bc8:	b	16bec <close_stdout@@Base+0x3198>
   16bcc:	cmp	r1, #0
   16bd0:	beq	16bc0 <close_stdout@@Base+0x316c>
   16bd4:	push	{r0, r1, lr}
   16bd8:	bl	169e0 <close_stdout@@Base+0x2f8c>
   16bdc:	pop	{r1, r2, lr}
   16be0:	mul	r3, r2, r0
   16be4:	sub	r1, r1, r3
   16be8:	bx	lr
   16bec:	push	{r1, lr}
   16bf0:	mov	r0, #8
   16bf4:	bl	11234 <raise@plt>
   16bf8:	pop	{r1, pc}
   16bfc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16c00:	mov	r7, r0
   16c04:	ldr	r6, [pc, #76]	; 16c58 <close_stdout@@Base+0x3204>
   16c08:	mov	r8, r1
   16c0c:	ldr	r5, [pc, #72]	; 16c5c <close_stdout@@Base+0x3208>
   16c10:	mov	r9, r2
   16c14:	add	r6, pc, r6
   16c18:	bl	111e4 <fdopen@plt-0x20>
   16c1c:	add	r5, pc, r5
   16c20:	rsb	r6, r5, r6
   16c24:	asrs	r6, r6, #2
   16c28:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   16c2c:	sub	r5, r5, #4
   16c30:	mov	r4, #0
   16c34:	add	r4, r4, #1
   16c38:	ldr	r3, [r5, #4]!
   16c3c:	mov	r0, r7
   16c40:	mov	r1, r8
   16c44:	mov	r2, r9
   16c48:	blx	r3
   16c4c:	cmp	r4, r6
   16c50:	bne	16c34 <close_stdout@@Base+0x31e0>
   16c54:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16c58:	andeq	r1, r1, r0, lsr #4
   16c5c:	andeq	r1, r1, r4, lsl r2
   16c60:	bx	lr
   16c64:	ldr	r3, [pc, #28]	; 16c88 <close_stdout@@Base+0x3234>
   16c68:	mov	r1, #0
   16c6c:	ldr	r2, [pc, #24]	; 16c8c <close_stdout@@Base+0x3238>
   16c70:	add	r3, pc, r3
   16c74:	ldr	r3, [r3, r2]
   16c78:	cmp	r3, #0
   16c7c:	ldrne	r2, [r3]
   16c80:	moveq	r2, r3
   16c84:	b	11408 <__cxa_atexit@plt>
   16c88:	andeq	r1, r1, r8, lsl #7
   16c8c:	andeq	r0, r0, r0, asr #2

Disassembly of section .fini:

00016c90 <.fini>:
   16c90:	push	{r3, lr}
   16c94:	pop	{r3, pc}
