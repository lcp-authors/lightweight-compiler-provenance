
centos-preinstalled/eu-unstrip:     file format elf32-littlearm


Disassembly of section .init:

0001180c <_init@@Base>:
   1180c:	push	{r3, lr}
   11810:	bl	123e0 <__assert_fail@plt+0x770>
   11814:	pop	{r3, pc}

Disassembly of section .plt:

00011818 <calloc@plt-0x14>:
   11818:	push	{lr}		; (str lr, [sp, #-4]!)
   1181c:	ldr	lr, [pc, #4]	; 11828 <_init@@Base+0x1c>
   11820:	add	lr, pc, lr
   11824:	ldr	pc, [lr, #8]!
   11828:	ldrdeq	r9, [r1], -r8

0001182c <calloc@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #102400	; 0x19000
   11834:	ldr	pc, [ip, #2008]!	; 0x7d8

00011838 <gelf_getehdr@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #102400	; 0x19000
   11840:	ldr	pc, [ip, #2000]!	; 0x7d0

00011844 <raise@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #102400	; 0x19000
   1184c:	ldr	pc, [ip, #1992]!	; 0x7c8

00011850 <gelf_getshdr@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #102400	; 0x19000
   11858:	ldr	pc, [ip, #1984]!	; 0x7c0

0001185c <strcmp@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #102400	; 0x19000
   11864:	ldr	pc, [ip, #1976]!	; 0x7b8

00011868 <elf_newdata@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #102400	; 0x19000
   11870:	ldr	pc, [ip, #1968]!	; 0x7b0

00011874 <elf_version@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #102400	; 0x19000
   1187c:	ldr	pc, [ip, #1960]!	; 0x7a8

00011880 <gelf_update_rel@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #102400	; 0x19000
   11888:	ldr	pc, [ip, #1952]!	; 0x7a0

0001188c <elf_flagelf@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #102400	; 0x19000
   11894:	ldr	pc, [ip, #1944]!	; 0x798

00011898 <free@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #102400	; 0x19000
   118a0:	ldr	pc, [ip, #1936]!	; 0x790

000118a4 <memcpy@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #102400	; 0x19000
   118ac:	ldr	pc, [ip, #1928]!	; 0x788

000118b0 <elf_flagdata@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #102400	; 0x19000
   118b8:	ldr	pc, [ip, #1920]!	; 0x780

000118bc <memcmp@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #102400	; 0x19000
   118c4:	ldr	pc, [ip, #1912]!	; 0x778

000118c8 <gelf_getversym@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #102400	; 0x19000
   118d0:	ldr	pc, [ip, #1904]!	; 0x770

000118d4 <dcgettext@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #102400	; 0x19000
   118dc:	ldr	pc, [ip, #1896]!	; 0x768

000118e0 <dwfl_module_getelf@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #102400	; 0x19000
   118e8:	ldr	pc, [ip, #1888]!	; 0x760

000118ec <__stack_chk_fail@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #102400	; 0x19000
   118f4:	ldr	pc, [ip, #1880]!	; 0x758

000118f8 <gelf_update_symshndx@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #102400	; 0x19000
   11900:	ldr	pc, [ip, #1872]!	; 0x750

00011904 <gelf_getphdr@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #102400	; 0x19000
   1190c:	ldr	pc, [ip, #1864]!	; 0x748

00011910 <realloc@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #102400	; 0x19000
   11918:	ldr	pc, [ip, #1856]!	; 0x740

0001191c <gelf_getsym@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #102400	; 0x19000
   11924:	ldr	pc, [ip, #1848]!	; 0x738

00011928 <gelf_getclass@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #102400	; 0x19000
   11930:	ldr	pc, [ip, #1840]!	; 0x730

00011934 <elf_strptr@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #102400	; 0x19000
   1193c:	ldr	pc, [ip, #1832]!	; 0x728

00011940 <textdomain@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #102400	; 0x19000
   11948:	ldr	pc, [ip, #1824]!	; 0x720

0001194c <dwarf_getelf@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #102400	; 0x19000
   11954:	ldr	pc, [ip, #1816]!	; 0x718

00011958 <dwfl_module_relocations@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #102400	; 0x19000
   11960:	ldr	pc, [ip, #1808]!	; 0x710

00011964 <argp_error@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #102400	; 0x19000
   1196c:	ldr	pc, [ip, #1800]!	; 0x708

00011970 <_IO_putc@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #102400	; 0x19000
   11978:	ldr	pc, [ip, #1792]!	; 0x700

0001197c <elf_getdata@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #102400	; 0x19000
   11984:	ldr	pc, [ip, #1784]!	; 0x6f8

00011988 <dwelf_strtab_init@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #102400	; 0x19000
   11990:	ldr	pc, [ip, #1776]!	; 0x6f0

00011994 <gelf_fsize@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #102400	; 0x19000
   1199c:	ldr	pc, [ip, #1768]!	; 0x6e8

000119a0 <error@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #102400	; 0x19000
   119a8:	ldr	pc, [ip, #1760]!	; 0x6e0

000119ac <gelf_xlatetom@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #102400	; 0x19000
   119b4:	ldr	pc, [ip, #1752]!	; 0x6d8

000119b8 <dwelf_strtab_add@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #102400	; 0x19000
   119c0:	ldr	pc, [ip, #1744]!	; 0x6d0

000119c4 <fnmatch@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #102400	; 0x19000
   119cc:	ldr	pc, [ip, #1736]!	; 0x6c8

000119d0 <open64@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #102400	; 0x19000
   119d8:	ldr	pc, [ip, #1728]!	; 0x6c0

000119dc <dwfl_module_build_id@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #102400	; 0x19000
   119e4:	ldr	pc, [ip, #1720]!	; 0x6b8

000119e8 <__asprintf_chk@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #102400	; 0x19000
   119f0:	ldr	pc, [ip, #1712]!	; 0x6b0

000119f4 <malloc@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #102400	; 0x19000
   119fc:	ldr	pc, [ip, #1704]!	; 0x6a8

00011a00 <__libc_start_main@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #102400	; 0x19000
   11a08:	ldr	pc, [ip, #1696]!	; 0x6a0

00011a0c <gelf_update_ehdr@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #102400	; 0x19000
   11a14:	ldr	pc, [ip, #1688]!	; 0x698

00011a18 <__gmon_start__@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #102400	; 0x19000
   11a20:	ldr	pc, [ip, #1680]!	; 0x690

00011a24 <elf_end@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #102400	; 0x19000
   11a2c:	ldr	pc, [ip, #1672]!	; 0x688

00011a30 <exit@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #102400	; 0x19000
   11a38:	ldr	pc, [ip, #1664]!	; 0x680

00011a3c <elf_errmsg@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #102400	; 0x19000
   11a44:	ldr	pc, [ip, #1656]!	; 0x678

00011a48 <__gcc_personality_v0@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #102400	; 0x19000
   11a50:	ldr	pc, [ip, #1648]!	; 0x670

00011a54 <__open64_2@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #102400	; 0x19000
   11a5c:	ldr	pc, [ip, #1640]!	; 0x668

00011a60 <dwelf_strent_off@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #102400	; 0x19000
   11a68:	ldr	pc, [ip, #1632]!	; 0x660

00011a6c <gelf_getrela@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #102400	; 0x19000
   11a74:	ldr	pc, [ip, #1624]!	; 0x658

00011a78 <__errno_location@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #102400	; 0x19000
   11a80:	ldr	pc, [ip, #1616]!	; 0x650

00011a84 <argp_failure@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #102400	; 0x19000
   11a8c:	ldr	pc, [ip, #1608]!	; 0x648

00011a90 <gelf_newehdr@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #102400	; 0x19000
   11a98:	ldr	pc, [ip, #1600]!	; 0x640

00011a9c <elf_getphdrnum@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #102400	; 0x19000
   11aa4:	ldr	pc, [ip, #1592]!	; 0x638

00011aa8 <mkdir@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #102400	; 0x19000
   11ab0:	ldr	pc, [ip, #1584]!	; 0x630

00011ab4 <memset@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #102400	; 0x19000
   11abc:	ldr	pc, [ip, #1576]!	; 0x628

00011ac0 <elf_rawdata@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #102400	; 0x19000
   11ac8:	ldr	pc, [ip, #1568]!	; 0x620

00011acc <__fsetlocking@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #102400	; 0x19000
   11ad4:	ldr	pc, [ip, #1560]!	; 0x618

00011ad8 <argp_parse@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #102400	; 0x19000
   11ae0:	ldr	pc, [ip, #1552]!	; 0x610

00011ae4 <gelf_update_phdr@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #102400	; 0x19000
   11aec:	ldr	pc, [ip, #1544]!	; 0x608

00011af0 <dwelf_strtab_free@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #102400	; 0x19000
   11af8:	ldr	pc, [ip, #1536]!	; 0x600

00011afc <__printf_chk@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #102400	; 0x19000
   11b04:	ldr	pc, [ip, #1528]!	; 0x5f8

00011b08 <dwfl_getmodules@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #102400	; 0x19000
   11b10:	ldr	pc, [ip, #1520]!	; 0x5f0

00011b14 <elf_update@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #102400	; 0x19000
   11b1c:	ldr	pc, [ip, #1512]!	; 0x5e8

00011b20 <dwfl_standard_argp@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #102400	; 0x19000
   11b28:	ldr	pc, [ip, #1504]!	; 0x5e0

00011b2c <__fprintf_chk@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #102400	; 0x19000
   11b34:	ldr	pc, [ip, #1496]!	; 0x5d8

00011b38 <elf_begin@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #102400	; 0x19000
   11b40:	ldr	pc, [ip, #1488]!	; 0x5d0

00011b44 <gelf_newphdr@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #102400	; 0x19000
   11b4c:	ldr	pc, [ip, #1480]!	; 0x5c8

00011b50 <strnlen@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #102400	; 0x19000
   11b58:	ldr	pc, [ip, #1472]!	; 0x5c0

00011b5c <dwfl_end@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #102400	; 0x19000
   11b64:	ldr	pc, [ip, #1464]!	; 0x5b8

00011b68 <dwelf_strtab_finalize@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #102400	; 0x19000
   11b70:	ldr	pc, [ip, #1456]!	; 0x5b0

00011b74 <dwfl_errmsg@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #102400	; 0x19000
   11b7c:	ldr	pc, [ip, #1448]!	; 0x5a8

00011b80 <setlocale@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #102400	; 0x19000
   11b88:	ldr	pc, [ip, #1440]!	; 0x5a0

00011b8c <elf_nextscn@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #102400	; 0x19000
   11b94:	ldr	pc, [ip, #1432]!	; 0x598

00011b98 <strrchr@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #102400	; 0x19000
   11ba0:	ldr	pc, [ip, #1424]!	; 0x590

00011ba4 <gelf_getrel@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #102400	; 0x19000
   11bac:	ldr	pc, [ip, #1416]!	; 0x588

00011bb0 <elf_newscn@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #102400	; 0x19000
   11bb8:	ldr	pc, [ip, #1408]!	; 0x580

00011bbc <dwfl_module_getdwarf@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #102400	; 0x19000
   11bc4:	ldr	pc, [ip, #1400]!	; 0x578

00011bc8 <qsort@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #102400	; 0x19000
   11bd0:	ldr	pc, [ip, #1392]!	; 0x570

00011bd4 <dwfl_module_info@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #102400	; 0x19000
   11bdc:	ldr	pc, [ip, #1384]!	; 0x568

00011be0 <elf_ndxscn@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #102400	; 0x19000
   11be8:	ldr	pc, [ip, #1376]!	; 0x560

00011bec <elf_getscn@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #102400	; 0x19000
   11bf4:	ldr	pc, [ip, #1368]!	; 0x558

00011bf8 <elf_getshdrnum@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #102400	; 0x19000
   11c00:	ldr	pc, [ip, #1360]!	; 0x550

00011c04 <bindtextdomain@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #102400	; 0x19000
   11c0c:	ldr	pc, [ip, #1352]!	; 0x548

00011c10 <gelf_update_shdr@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #102400	; 0x19000
   11c18:	ldr	pc, [ip, #1344]!	; 0x540

00011c1c <gelf_update_rela@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #102400	; 0x19000
   11c24:	ldr	pc, [ip, #1336]!	; 0x538

00011c28 <gelf_getsymshndx@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #102400	; 0x19000
   11c30:	ldr	pc, [ip, #1328]!	; 0x530

00011c34 <__xstat64@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #102400	; 0x19000
   11c3c:	ldr	pc, [ip, #1320]!	; 0x528

00011c40 <_Unwind_Resume@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #102400	; 0x19000
   11c48:	ldr	pc, [ip, #1312]!	; 0x520

00011c4c <abort@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #102400	; 0x19000
   11c54:	ldr	pc, [ip, #1304]!	; 0x518

00011c58 <close@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #102400	; 0x19000
   11c60:	ldr	pc, [ip, #1296]!	; 0x510

00011c64 <elf_getshdrstrndx@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #102400	; 0x19000
   11c6c:	ldr	pc, [ip, #1288]!	; 0x508

00011c70 <__assert_fail@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #102400	; 0x19000
   11c78:	ldr	pc, [ip, #1280]!	; 0x500

Disassembly of section .text:

00011c7c <.text>:
   11c7c:	push	{r4, r5, lr}
   11c80:	mov	r2, #5
   11c84:	sub	sp, sp, #12
   11c88:	mov	r4, r0
   11c8c:	movw	r1, #35960	; 0x8c78
   11c90:	mov	r0, #0
   11c94:	movt	r1, #1
   11c98:	bl	118d4 <dcgettext@plt>
   11c9c:	mov	r5, r0
   11ca0:	mvn	r0, #0
   11ca4:	bl	11a3c <elf_errmsg@plt>
   11ca8:	mov	r2, r5
   11cac:	mov	r3, r4
   11cb0:	mov	r1, #0
   11cb4:	str	r0, [sp]
   11cb8:	mov	r0, #1
   11cbc:	bl	119a0 <error@plt>
   11cc0:	movw	ip, #45448	; 0xb188
   11cc4:	movt	ip, #2
   11cc8:	movw	r3, #45456	; 0xb190
   11ccc:	movt	r3, #2
   11cd0:	ldr	r2, [ip]
   11cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cd8:	movw	fp, #45464	; 0xb198
   11cdc:	sub	sp, sp, #188	; 0xbc
   11ce0:	movt	fp, #2
   11ce4:	mov	r9, r0
   11ce8:	mov	r8, r1
   11cec:	ldr	r0, [r3]
   11cf0:	mov	r1, #2
   11cf4:	str	ip, [sp, #20]
   11cf8:	mov	r4, #0
   11cfc:	str	r2, [sp, #180]	; 0xb4
   11d00:	bl	11acc <__fsetlocking@plt>
   11d04:	mov	r1, #2
   11d08:	ldr	r0, [fp]
   11d0c:	bl	11acc <__fsetlocking@plt>
   11d10:	movw	r3, #45452	; 0xb18c
   11d14:	movt	r3, #2
   11d18:	mov	r1, #2
   11d1c:	ldr	r7, [pc, #1656]	; 1239c <__assert_fail@plt+0x72c>
   11d20:	add	r5, sp, #96	; 0x60
   11d24:	ldr	r0, [r3]
   11d28:	mov	r6, #1
   11d2c:	bl	11acc <__fsetlocking@plt>
   11d30:	movw	r1, #40192	; 0x9d00
   11d34:	mov	r0, #6
   11d38:	movt	r1, #1
   11d3c:	bl	11b80 <setlocale@plt>
   11d40:	movw	r0, #38608	; 0x96d0
   11d44:	movw	r1, #38620	; 0x96dc
   11d48:	movt	r0, #1
   11d4c:	movt	r1, #1
   11d50:	bl	11c04 <bindtextdomain@plt>
   11d54:	movw	r0, #38608	; 0x96d0
   11d58:	movt	r0, #1
   11d5c:	bl	11940 <textdomain@plt>
   11d60:	str	r4, [sp, #152]	; 0x98
   11d64:	str	r4, [sp, #164]	; 0xa4
   11d68:	str	r4, [sp, #168]	; 0xa8
   11d6c:	str	r4, [sp, #172]	; 0xac
   11d70:	str	r4, [sp, #176]	; 0xb0
   11d74:	bl	11b20 <dwfl_standard_argp@plt>
   11d78:	mov	r1, r9
   11d7c:	mov	r2, r8
   11d80:	mov	r3, r4
   11d84:	add	ip, sp, #32
   11d88:	str	r5, [sp, #4]
   11d8c:	movw	r9, #38640	; 0x96f0
   11d90:	str	ip, [sp]
   11d94:	movt	r9, #1
   11d98:	str	r4, [sp, #140]	; 0x8c
   11d9c:	movw	r8, #9716	; 0x25f4
   11da0:	str	r4, [sp, #144]	; 0x90
   11da4:	movt	r8, #1
   11da8:	str	r4, [sp, #96]	; 0x60
   11dac:	movw	lr, #38668	; 0x970c
   11db0:	str	r4, [sp, #100]	; 0x64
   11db4:	movt	lr, #1
   11db8:	str	r4, [sp, #104]	; 0x68
   11dbc:	movw	ip, #38708	; 0x9734
   11dc0:	str	r4, [sp, #108]	; 0x6c
   11dc4:	movt	ip, #1
   11dc8:	str	r4, [sp, #112]	; 0x70
   11dcc:	str	r4, [sp, #116]	; 0x74
   11dd0:	add	r4, sp, #148	; 0x94
   11dd4:	str	r9, [sp, #156]	; 0x9c
   11dd8:	str	r4, [sp, #136]	; 0x88
   11ddc:	str	r8, [sp, #124]	; 0x7c
   11de0:	str	lr, [sp, #128]	; 0x80
   11de4:	str	ip, [sp, #132]	; 0x84
   11de8:	str	r7, [sp, #120]	; 0x78
   11dec:	str	r6, [sp, #160]	; 0xa0
   11df0:	str	r0, [sp, #148]	; 0x94
   11df4:	add	r0, sp, #120	; 0x78
   11df8:	bl	11ad8 <argp_parse@plt>
   11dfc:	cmp	r0, #38	; 0x26
   11e00:	mov	r4, r0
   11e04:	beq	12190 <__assert_fail@plt+0x520>
   11e08:	cmp	r0, #0
   11e0c:	bne	12124 <__assert_fail@plt+0x4b4>
   11e10:	ldr	r3, [sp, #108]	; 0x6c
   11e14:	cmp	r3, #0
   11e18:	beq	122d4 <__assert_fail@plt+0x664>
   11e1c:	mov	r0, #1
   11e20:	bl	11874 <elf_version@plt>
   11e24:	ldr	r6, [sp, #104]	; 0x68
   11e28:	cmp	r6, #0
   11e2c:	beq	121ec <__assert_fail@plt+0x57c>
   11e30:	ldr	r3, [sp, #96]	; 0x60
   11e34:	cmp	r3, #0
   11e38:	beq	121b8 <__assert_fail@plt+0x548>
   11e3c:	ldr	r4, [sp, #108]	; 0x6c
   11e40:	mov	ip, #0
   11e44:	ldrb	lr, [sp, #116]	; 0x74
   11e48:	mov	r0, r6
   11e4c:	add	r2, sp, #80	; 0x50
   11e50:	mov	r3, ip
   11e54:	movw	r1, #13024	; 0x32e0
   11e58:	movt	r1, #1
   11e5c:	str	r4, [sp, #80]	; 0x50
   11e60:	str	r5, [sp, #92]	; 0x5c
   11e64:	strb	lr, [sp, #88]	; 0x58
   11e68:	str	ip, [sp, #84]	; 0x54
   11e6c:	bl	11b08 <dwfl_getmodules@plt>
   11e70:	subs	r4, r0, #0
   11e74:	beq	12318 <__assert_fail@plt+0x6a8>
   11e78:	ldr	r3, [sp, #92]	; 0x5c
   11e7c:	ldrb	r6, [r3, #16]
   11e80:	cmp	r6, #0
   11e84:	beq	12024 <__assert_fail@plt+0x3b4>
   11e88:	movw	ip, #35380	; 0x8a34
   11e8c:	movt	ip, #1
   11e90:	str	ip, [sp, #16]
   11e94:	movw	ip, #38604	; 0x96cc
   11e98:	movt	ip, #1
   11e9c:	str	ip, [sp, #28]
   11ea0:	add	ip, sp, #64	; 0x40
   11ea4:	str	fp, [sp, #24]
   11ea8:	mov	sl, ip
   11eac:	ldr	r6, [sp, #84]	; 0x54
   11eb0:	add	r1, sp, #48	; 0x30
   11eb4:	mov	r0, r6
   11eb8:	bl	118e0 <dwfl_module_getelf@plt>
   11ebc:	add	r1, sp, #48	; 0x30
   11ec0:	mov	r9, r0
   11ec4:	mov	r0, r6
   11ec8:	bl	11bbc <dwfl_module_getdwarf@plt>
   11ecc:	mov	r3, #0
   11ed0:	add	r1, sp, #36	; 0x24
   11ed4:	add	r2, sp, #40	; 0x28
   11ed8:	str	r1, [sp, #8]
   11edc:	mov	r1, r3
   11ee0:	str	r2, [sp, #12]
   11ee4:	add	r2, sp, #56	; 0x38
   11ee8:	str	r3, [sp]
   11eec:	str	r3, [sp, #4]
   11ef0:	mov	r3, sl
   11ef4:	mov	r8, r0
   11ef8:	mov	r0, r6
   11efc:	bl	11bd4 <dwfl_module_info@plt>
   11f00:	ldr	r1, [sp, #36]	; 0x24
   11f04:	cmp	r1, #0
   11f08:	mov	r5, r0
   11f0c:	beq	11f38 <__assert_fail@plt+0x2c8>
   11f10:	ldr	r0, [sp, #40]	; 0x28
   11f14:	cmp	r0, #0
   11f18:	beq	11f38 <__assert_fail@plt+0x2c8>
   11f1c:	cmp	r1, r0
   11f20:	beq	11f30 <__assert_fail@plt+0x2c0>
   11f24:	bl	1185c <strcmp@plt>
   11f28:	cmp	r0, #0
   11f2c:	bne	11f38 <__assert_fail@plt+0x2c8>
   11f30:	ldr	ip, [sp, #16]
   11f34:	str	ip, [sp, #40]	; 0x28
   11f38:	mov	r0, r6
   11f3c:	add	r1, sp, #44	; 0x2c
   11f40:	add	r2, sp, #72	; 0x48
   11f44:	bl	119dc <dwfl_module_build_id@plt>
   11f48:	ldrd	r2, [sp, #56]	; 0x38
   11f4c:	ldrd	r6, [sp, #64]	; 0x40
   11f50:	movw	r1, #40180	; 0x9cf4
   11f54:	movt	r1, #1
   11f58:	subs	r6, r6, r2
   11f5c:	sbc	r7, r7, r3
   11f60:	strd	r6, [sp]
   11f64:	mov	fp, r0
   11f68:	mov	r0, #1
   11f6c:	bl	11afc <__printf_chk@plt>
   11f70:	cmp	fp, #0
   11f74:	ble	1217c <__assert_fail@plt+0x50c>
   11f78:	ldr	r3, [sp, #44]	; 0x2c
   11f7c:	mov	r0, #1
   11f80:	movw	r1, #40196	; 0x9d04
   11f84:	movt	r1, #1
   11f88:	add	r2, r3, r0
   11f8c:	str	r2, [sp, #44]	; 0x2c
   11f90:	ldrb	r2, [r3]
   11f94:	bl	11afc <__printf_chk@plt>
   11f98:	subs	fp, fp, #1
   11f9c:	bne	11f78 <__assert_fail@plt+0x308>
   11fa0:	ldrd	r2, [sp, #72]	; 0x48
   11fa4:	orrs	r1, r2, r3
   11fa8:	bne	1212c <__assert_fail@plt+0x4bc>
   11fac:	ldr	r2, [sp, #36]	; 0x24
   11fb0:	cmp	r2, #0
   11fb4:	beq	12148 <__assert_fail@plt+0x4d8>
   11fb8:	ldr	r3, [sp, #40]	; 0x28
   11fbc:	cmp	r3, #0
   11fc0:	beq	1215c <__assert_fail@plt+0x4ec>
   11fc4:	str	r5, [sp]
   11fc8:	movw	r1, #40212	; 0x9d14
   11fcc:	mov	r0, #1
   11fd0:	movt	r1, #1
   11fd4:	bl	11afc <__printf_chk@plt>
   11fd8:	ldr	r0, [sp, #92]	; 0x5c
   11fdc:	mov	r3, r4
   11fe0:	movw	r1, #13024	; 0x32e0
   11fe4:	add	r2, sp, #80	; 0x50
   11fe8:	movt	r1, #1
   11fec:	ldr	r0, [r0, #8]
   11ff0:	bl	11b08 <dwfl_getmodules@plt>
   11ff4:	subs	r4, r0, #0
   11ff8:	bgt	11eac <__assert_fail@plt+0x23c>
   11ffc:	ldr	r0, [sp, #104]	; 0x68
   12000:	bl	11b5c <dwfl_end@plt>
   12004:	mov	r0, #0
   12008:	ldr	ip, [sp, #20]
   1200c:	ldr	r2, [sp, #180]	; 0xb4
   12010:	ldr	r3, [ip]
   12014:	cmp	r2, r3
   12018:	bne	122f0 <__assert_fail@plt+0x680>
   1201c:	add	sp, sp, #188	; 0xbc
   12020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12024:	ldr	r5, [r3, #4]
   12028:	cmp	r5, #0
   1202c:	addne	ip, sp, #64	; 0x40
   12030:	strne	ip, [sp, #24]
   12034:	bne	120ec <__assert_fail@plt+0x47c>
   12038:	b	1225c <__assert_fail@plt+0x5ec>
   1203c:	ldr	ip, [sp, #24]
   12040:	mov	r1, #0
   12044:	mov	r3, r1
   12048:	str	r6, [sp]
   1204c:	str	r6, [sp, #4]
   12050:	mov	r2, r1
   12054:	str	ip, [sp, #8]
   12058:	mov	r0, r5
   1205c:	str	r6, [sp, #12]
   12060:	bl	11bd4 <dwfl_module_info@plt>
   12064:	ldr	r3, [sp, #64]	; 0x40
   12068:	cmp	r3, #0
   1206c:	beq	12170 <__assert_fail@plt+0x500>
   12070:	cmp	r8, #0
   12074:	movw	r2, #40044	; 0x9c6c
   12078:	mov	r1, #1
   1207c:	movt	r2, #1
   12080:	moveq	ip, r3
   12084:	movne	ip, r0
   12088:	mov	r3, fp
   1208c:	str	ip, [sp]
   12090:	add	r0, sp, #72	; 0x48
   12094:	bl	119e8 <__asprintf_chk@plt>
   12098:	cmp	r0, #0
   1209c:	blt	122f4 <__assert_fail@plt+0x684>
   120a0:	ldr	ip, [sp, #16]
   120a4:	mov	r2, sl
   120a8:	ldr	r0, [sp, #72]	; 0x48
   120ac:	mov	r3, r5
   120b0:	str	r9, [sp]
   120b4:	mov	r1, #1
   120b8:	str	r7, [sp, #4]
   120bc:	str	ip, [sp, #8]
   120c0:	bl	176cc <__assert_fail@plt+0x5a5c>
   120c4:	ldr	r0, [sp, #92]	; 0x5c
   120c8:	mov	r3, r4
   120cc:	movw	r1, #13024	; 0x32e0
   120d0:	add	r2, sp, #80	; 0x50
   120d4:	movt	r1, #1
   120d8:	ldr	r0, [r0, #8]
   120dc:	bl	11b08 <dwfl_getmodules@plt>
   120e0:	subs	r4, r0, #0
   120e4:	ble	11ffc <__assert_fail@plt+0x38c>
   120e8:	ldr	r3, [sp, #92]	; 0x5c
   120ec:	ldrb	r8, [r3, #19]
   120f0:	ldr	fp, [r3, #4]
   120f4:	ldrb	sl, [r3, #22]
   120f8:	cmp	r8, #0
   120fc:	ldrb	r9, [r3, #17]
   12100:	ldrb	r7, [r3, #18]
   12104:	ldrb	r3, [r3, #21]
   12108:	ldr	r5, [sp, #84]	; 0x54
   1210c:	str	r3, [sp, #16]
   12110:	bne	1203c <__assert_fail@plt+0x3cc>
   12114:	mov	r0, r5
   12118:	add	r1, sp, #72	; 0x48
   1211c:	bl	118e0 <dwfl_module_getelf@plt>
   12120:	b	1203c <__assert_fail@plt+0x3cc>
   12124:	mov	r0, r6
   12128:	b	12008 <__assert_fail@plt+0x398>
   1212c:	movw	r1, #40204	; 0x9d0c
   12130:	mov	r0, #1
   12134:	movt	r1, #1
   12138:	bl	11afc <__printf_chk@plt>
   1213c:	ldr	r2, [sp, #36]	; 0x24
   12140:	cmp	r2, #0
   12144:	bne	11fb8 <__assert_fail@plt+0x348>
   12148:	ldr	ip, [sp, #16]
   1214c:	cmp	r9, #0
   12150:	ldr	r2, [sp, #28]
   12154:	movne	r2, ip
   12158:	b	11fb8 <__assert_fail@plt+0x348>
   1215c:	ldr	ip, [sp, #16]
   12160:	cmp	r8, #0
   12164:	ldr	r3, [sp, #28]
   12168:	movne	r3, ip
   1216c:	b	11fc4 <__assert_fail@plt+0x354>
   12170:	cmp	r7, #0
   12174:	bne	120c4 <__assert_fail@plt+0x454>
   12178:	b	12070 <__assert_fail@plt+0x400>
   1217c:	ldr	ip, [sp, #24]
   12180:	mov	r0, #45	; 0x2d
   12184:	ldr	r1, [ip]
   12188:	bl	11970 <_IO_putc@plt>
   1218c:	b	11fac <__assert_fail@plt+0x33c>
   12190:	ldr	r3, [sp, #104]	; 0x68
   12194:	cmp	r3, #0
   12198:	beq	11e10 <__assert_fail@plt+0x1a0>
   1219c:	movw	r0, #39972	; 0x9c24
   121a0:	movw	r1, #35020	; 0x88cc
   121a4:	add	r3, r7, #264	; 0x108
   121a8:	movt	r0, #1
   121ac:	movt	r1, #1
   121b0:	movw	r2, #2536	; 0x9e8
   121b4:	bl	11c70 <__assert_fail@plt>
   121b8:	ldr	r3, [sp, #100]	; 0x64
   121bc:	cmp	r3, #0
   121c0:	bne	11e3c <__assert_fail@plt+0x1cc>
   121c4:	ldrb	r3, [sp, #112]	; 0x70
   121c8:	cmp	r3, #0
   121cc:	bne	11e3c <__assert_fail@plt+0x1cc>
   121d0:	movw	r0, #40072	; 0x9c88
   121d4:	movw	r1, #35020	; 0x88cc
   121d8:	movt	r0, #1
   121dc:	movt	r1, #1
   121e0:	movw	r2, #2564	; 0xa04
   121e4:	ldr	r3, [pc, #436]	; 123a0 <__assert_fail@plt+0x730>
   121e8:	bl	11c70 <__assert_fail@plt>
   121ec:	cmp	r4, #38	; 0x26
   121f0:	bne	1235c <__assert_fail@plt+0x6ec>
   121f4:	ldr	r4, [sp, #100]	; 0x64
   121f8:	cmp	r4, #0
   121fc:	beq	122ac <__assert_fail@plt+0x63c>
   12200:	ldr	ip, [sp, #108]	; 0x6c
   12204:	mov	r3, r4
   12208:	movw	r2, #40044	; 0x9c6c
   1220c:	add	r0, sp, #80	; 0x50
   12210:	movt	r2, #1
   12214:	mov	r1, #1
   12218:	ldr	ip, [ip]
   1221c:	str	ip, [sp]
   12220:	bl	119e8 <__asprintf_chk@plt>
   12224:	cmp	r0, #0
   12228:	blt	12338 <__assert_fail@plt+0x6c8>
   1222c:	ldr	r3, [sp, #108]	; 0x6c
   12230:	mov	r1, #1
   12234:	ldrb	r2, [sp, #118]	; 0x76
   12238:	ldr	r0, [sp, #80]	; 0x50
   1223c:	ldr	ip, [r3, #4]
   12240:	str	ip, [sp]
   12244:	ldr	r3, [r3]
   12248:	bl	174a4 <__assert_fail@plt+0x5834>
   1224c:	ldr	r0, [sp, #80]	; 0x50
   12250:	bl	11898 <free@plt>
   12254:	mov	r0, r6
   12258:	b	12008 <__assert_fail@plt+0x398>
   1225c:	ldr	r0, [r3, #8]
   12260:	add	r2, sp, #80	; 0x50
   12264:	mov	r3, r4
   12268:	movw	r1, #13024	; 0x32e0
   1226c:	movt	r1, #1
   12270:	bl	11b08 <dwfl_getmodules@plt>
   12274:	subs	r1, r0, #0
   12278:	bne	12378 <__assert_fail@plt+0x708>
   1227c:	ldr	ip, [sp, #92]	; 0x5c
   12280:	ldr	r3, [sp, #84]	; 0x54
   12284:	ldrb	r0, [ip, #17]
   12288:	ldrb	r2, [ip, #22]
   1228c:	str	r0, [sp]
   12290:	ldrb	r0, [ip, #18]
   12294:	str	r0, [sp, #4]
   12298:	ldrb	r0, [ip, #21]
   1229c:	str	r0, [sp, #8]
   122a0:	ldr	r0, [ip]
   122a4:	bl	176cc <__assert_fail@plt+0x5a5c>
   122a8:	b	11ffc <__assert_fail@plt+0x38c>
   122ac:	ldr	r3, [sp, #108]	; 0x6c
   122b0:	mov	r1, r4
   122b4:	ldr	r0, [sp, #96]	; 0x60
   122b8:	ldrb	r2, [sp, #118]	; 0x76
   122bc:	ldr	ip, [r3, #4]
   122c0:	str	ip, [sp]
   122c4:	ldr	r3, [r3]
   122c8:	bl	174a4 <__assert_fail@plt+0x5834>
   122cc:	mov	r0, r4
   122d0:	b	12008 <__assert_fail@plt+0x398>
   122d4:	movw	r0, #40000	; 0x9c40
   122d8:	movw	r1, #35020	; 0x88cc
   122dc:	movt	r0, #1
   122e0:	movt	r1, #1
   122e4:	movw	r2, #2539	; 0x9eb
   122e8:	ldr	r3, [pc, #176]	; 123a0 <__assert_fail@plt+0x730>
   122ec:	bl	11c70 <__assert_fail@plt>
   122f0:	bl	118ec <__stack_chk_fail@plt>
   122f4:	mov	r2, #5
   122f8:	movw	r1, #40052	; 0x9c74
   122fc:	mov	r0, #0
   12300:	movt	r1, #1
   12304:	bl	118d4 <dcgettext@plt>
   12308:	mov	r1, #0
   1230c:	mov	r2, r0
   12310:	mov	r0, #1
   12314:	bl	119a0 <error@plt>
   12318:	mov	r2, #5
   1231c:	movw	r1, #40152	; 0x9cd8
   12320:	movt	r1, #1
   12324:	bl	118d4 <dcgettext@plt>
   12328:	mov	r1, r4
   1232c:	mov	r2, r0
   12330:	mov	r0, #1
   12334:	bl	119a0 <error@plt>
   12338:	mov	r2, #5
   1233c:	movw	r1, #40052	; 0x9c74
   12340:	mov	r0, r6
   12344:	movt	r1, #1
   12348:	bl	118d4 <dcgettext@plt>
   1234c:	mov	r1, r6
   12350:	mov	r2, r0
   12354:	mov	r0, #1
   12358:	bl	119a0 <error@plt>
   1235c:	movw	r0, #40028	; 0x9c5c
   12360:	movw	r1, #35020	; 0x88cc
   12364:	movt	r0, #1
   12368:	movt	r1, #1
   1236c:	movw	r2, #2546	; 0x9f2
   12370:	ldr	r3, [pc, #40]	; 123a0 <__assert_fail@plt+0x730>
   12374:	bl	11c70 <__assert_fail@plt>
   12378:	mov	r2, #5
   1237c:	movw	r1, #40224	; 0x9d20
   12380:	mov	r0, r5
   12384:	movt	r1, #1
   12388:	bl	118d4 <dcgettext@plt>
   1238c:	mov	r1, r5
   12390:	mov	r2, r0
   12394:	mov	r0, #1
   12398:	bl	119a0 <error@plt>
   1239c:	andeq	r8, r1, r8, lsr #15
   123a0:			; <UNDEFINED> instruction: 0x000188b0
   123a4:	mov	fp, #0
   123a8:	mov	lr, #0
   123ac:	pop	{r1}		; (ldr r1, [sp], #4)
   123b0:	mov	r2, sp
   123b4:	push	{r2}		; (str r2, [sp, #-4]!)
   123b8:	push	{r0}		; (str r0, [sp, #-4]!)
   123bc:	ldr	ip, [pc, #16]	; 123d4 <__assert_fail@plt+0x764>
   123c0:	push	{ip}		; (str ip, [sp, #-4]!)
   123c4:	ldr	r0, [pc, #12]	; 123d8 <__assert_fail@plt+0x768>
   123c8:	ldr	r3, [pc, #12]	; 123dc <__assert_fail@plt+0x76c>
   123cc:	bl	11a00 <__libc_start_main@plt>
   123d0:	bl	11c4c <abort@plt>
   123d4:	andeq	r8, r1, r4, asr #14
   123d8:	andeq	r1, r1, r0, asr #25
   123dc:	andeq	r8, r1, r0, ror #13
   123e0:	ldr	r3, [pc, #20]	; 123fc <__assert_fail@plt+0x78c>
   123e4:	ldr	r2, [pc, #20]	; 12400 <__assert_fail@plt+0x790>
   123e8:	add	r3, pc, r3
   123ec:	ldr	r2, [r3, r2]
   123f0:	cmp	r2, #0
   123f4:	bxeq	lr
   123f8:	b	11a18 <__gmon_start__@plt>
   123fc:	andeq	r8, r1, r0, lsl ip
   12400:	andeq	r0, r0, ip, ror r1
   12404:	push	{r3, lr}
   12408:	movw	r0, #45444	; 0xb184
   1240c:	ldr	r3, [pc, #36]	; 12438 <__assert_fail@plt+0x7c8>
   12410:	movt	r0, #2
   12414:	rsb	r3, r0, r3
   12418:	cmp	r3, #6
   1241c:	popls	{r3, pc}
   12420:	movw	r3, #0
   12424:	movt	r3, #0
   12428:	cmp	r3, #0
   1242c:	popeq	{r3, pc}
   12430:	blx	r3
   12434:	pop	{r3, pc}
   12438:	andeq	fp, r2, r7, lsl #3
   1243c:	push	{r3, lr}
   12440:	movw	r0, #45444	; 0xb184
   12444:	movw	r3, #45444	; 0xb184
   12448:	movt	r0, #2
   1244c:	movt	r3, #2
   12450:	rsb	r3, r0, r3
   12454:	asr	r3, r3, #2
   12458:	add	r3, r3, r3, lsr #31
   1245c:	asrs	r1, r3, #1
   12460:	popeq	{r3, pc}
   12464:	movw	r2, #0
   12468:	movt	r2, #0
   1246c:	cmp	r2, #0
   12470:	popeq	{r3, pc}
   12474:	blx	r2
   12478:	pop	{r3, pc}
   1247c:	push	{r4, lr}
   12480:	movw	r4, #45468	; 0xb19c
   12484:	movt	r4, #2
   12488:	ldrb	r3, [r4]
   1248c:	cmp	r3, #0
   12490:	popne	{r4, pc}
   12494:	bl	12404 <__assert_fail@plt+0x794>
   12498:	mov	r3, #1
   1249c:	strb	r3, [r4]
   124a0:	pop	{r4, pc}
   124a4:	movw	r0, #44780	; 0xaeec
   124a8:	movt	r0, #2
   124ac:	push	{r3, lr}
   124b0:	ldr	r3, [r0]
   124b4:	cmp	r3, #0
   124b8:	beq	124d0 <__assert_fail@plt+0x860>
   124bc:	movw	r3, #0
   124c0:	movt	r3, #0
   124c4:	cmp	r3, #0
   124c8:	beq	124d0 <__assert_fail@plt+0x860>
   124cc:	blx	r3
   124d0:	pop	{r3, lr}
   124d4:	b	1243c <__assert_fail@plt+0x7cc>
   124d8:	push	{r4, lr}
   124dc:	ldr	r3, [r1, #4]
   124e0:	ldr	r2, [r0, #4]
   124e4:	rsbs	r3, r3, #1
   124e8:	movcc	r3, #0
   124ec:	cmp	r2, #0
   124f0:	rsbne	r3, r3, #0
   124f4:	rsbeq	r3, r3, #1
   124f8:	cmp	r3, #0
   124fc:	bne	12578 <__assert_fail@plt+0x908>
   12500:	ldrb	r2, [r1, #28]
   12504:	ldrb	ip, [r0, #28]
   12508:	lsrs	r3, r2, #4
   1250c:	movne	r3, #0
   12510:	moveq	r3, #1
   12514:	lsrs	r4, ip, #4
   12518:	subeq	r3, r3, #1
   1251c:	cmp	r3, #0
   12520:	bne	12578 <__assert_fail@plt+0x908>
   12524:	and	r3, ip, #15
   12528:	and	r2, r2, #15
   1252c:	subs	ip, r3, #3
   12530:	rsbs	r3, ip, #0
   12534:	adcs	r3, r3, ip
   12538:	cmp	r2, #3
   1253c:	rsbne	r2, r3, #0
   12540:	rsbeq	r2, r3, #1
   12544:	cmp	r2, #0
   12548:	bne	125ec <__assert_fail@plt+0x97c>
   1254c:	cmp	r3, #0
   12550:	bne	12588 <__assert_fail@plt+0x918>
   12554:	ldr	r2, [r0]
   12558:	ldr	r3, [r1]
   1255c:	cmp	r2, r3
   12560:	bcc	125c4 <__assert_fail@plt+0x954>
   12564:	bhi	12580 <__assert_fail@plt+0x910>
   12568:	cmp	r0, r1
   1256c:	bne	125cc <__assert_fail@plt+0x95c>
   12570:	mov	r0, #0
   12574:	pop	{r4, pc}
   12578:	mov	r0, r3
   1257c:	pop	{r4, pc}
   12580:	mov	r0, #1
   12584:	pop	{r4, pc}
   12588:	ldr	r2, [r0, #24]
   1258c:	ldr	r3, [r1, #24]
   12590:	cmp	r2, r3
   12594:	bcc	125c4 <__assert_fail@plt+0x954>
   12598:	bhi	12580 <__assert_fail@plt+0x910>
   1259c:	cmp	r0, r1
   125a0:	beq	12554 <__assert_fail@plt+0x8e4>
   125a4:	movw	r0, #35008	; 0x88c0
   125a8:	movw	r1, #35020	; 0x88cc
   125ac:	movw	r3, #34648	; 0x8758
   125b0:	movt	r0, #1
   125b4:	movt	r1, #1
   125b8:	movw	r2, #933	; 0x3a5
   125bc:	movt	r3, #1
   125c0:	bl	11c70 <__assert_fail@plt>
   125c4:	mvn	r0, #0
   125c8:	pop	{r4, pc}
   125cc:	movw	r0, #35008	; 0x88c0
   125d0:	movw	r1, #35020	; 0x88cc
   125d4:	movw	r3, #34648	; 0x8758
   125d8:	movt	r0, #1
   125dc:	movt	r1, #1
   125e0:	movw	r2, #939	; 0x3ab
   125e4:	movt	r3, #1
   125e8:	bl	11c70 <__assert_fail@plt>
   125ec:	mov	r0, r2
   125f0:	pop	{r4, pc}
   125f4:	push	{r4, r5, r6, r7, lr}
   125f8:	movw	r4, #45448	; 0xb188
   125fc:	movt	r4, #2
   12600:	sub	sp, sp, #124	; 0x7c
   12604:	cmp	r0, #105	; 0x69
   12608:	mov	r5, r2
   1260c:	ldr	r3, [r4]
   12610:	ldr	r6, [r2, #28]
   12614:	str	r3, [sp, #116]	; 0x74
   12618:	beq	12764 <__assert_fail@plt+0xaf4>
   1261c:	bgt	12660 <__assert_fail@plt+0x9f0>
   12620:	cmp	r0, #97	; 0x61
   12624:	beq	12744 <__assert_fail@plt+0xad4>
   12628:	bgt	12690 <__assert_fail@plt+0xa20>
   1262c:	cmp	r0, #70	; 0x46
   12630:	beq	12754 <__assert_fail@plt+0xae4>
   12634:	cmp	r0, #82	; 0x52
   12638:	moveq	r3, #1
   1263c:	moveq	r0, #0
   12640:	strbeq	r3, [r6, #21]
   12644:	bne	12688 <__assert_fail@plt+0xa18>
   12648:	ldr	r2, [sp, #116]	; 0x74
   1264c:	ldr	r3, [r4]
   12650:	cmp	r2, r3
   12654:	bne	128ec <__assert_fail@plt+0xc7c>
   12658:	add	sp, sp, #124	; 0x7c
   1265c:	pop	{r4, r5, r6, r7, pc}
   12660:	cmp	r0, #111	; 0x6f
   12664:	beq	12794 <__assert_fail@plt+0xb24>
   12668:	bgt	126b0 <__assert_fail@plt+0xa40>
   1266c:	cmp	r0, #109	; 0x6d
   12670:	beq	127b4 <__assert_fail@plt+0xb44>
   12674:	cmp	r0, #110	; 0x6e
   12678:	moveq	r3, #1
   1267c:	moveq	r0, #0
   12680:	strbeq	r3, [r6, #16]
   12684:	beq	12648 <__assert_fail@plt+0x9d8>
   12688:	mov	r0, #7
   1268c:	b	12648 <__assert_fail@plt+0x9d8>
   12690:	cmp	r0, #100	; 0x64
   12694:	beq	12774 <__assert_fail@plt+0xb04>
   12698:	cmp	r0, #102	; 0x66
   1269c:	moveq	r3, #1
   126a0:	moveq	r0, #0
   126a4:	strbeq	r3, [r6, #20]
   126a8:	beq	12648 <__assert_fail@plt+0x9d8>
   126ac:	b	12688 <__assert_fail@plt+0xa18>
   126b0:	mov	r3, #3
   126b4:	movt	r3, #256	; 0x100
   126b8:	cmp	r0, r3
   126bc:	beq	12730 <__assert_fail@plt+0xac0>
   126c0:	mov	r3, #6
   126c4:	movt	r3, #256	; 0x100
   126c8:	cmp	r0, r3
   126cc:	beq	126e0 <__assert_fail@plt+0xa70>
   126d0:	mov	r3, #2
   126d4:	movt	r3, #256	; 0x100
   126d8:	cmp	r0, r3
   126dc:	bne	12688 <__assert_fail@plt+0xa18>
   126e0:	ldr	r3, [r6]
   126e4:	ldr	r1, [r5, #12]
   126e8:	ldr	r2, [r5, #8]
   126ec:	cmp	r3, #0
   126f0:	add	r2, r2, r1, lsl #2
   126f4:	str	r2, [r6, #12]
   126f8:	beq	127c4 <__assert_fail@plt+0xb54>
   126fc:	ldr	r2, [r6, #4]
   12700:	cmp	r2, #0
   12704:	beq	127c4 <__assert_fail@plt+0xb54>
   12708:	movw	r1, #35088	; 0x8910
   1270c:	movt	r1, #1
   12710:	mov	r0, #0
   12714:	mov	r2, #5
   12718:	bl	118d4 <dcgettext@plt>
   1271c:	mov	r1, r0
   12720:	mov	r0, r5
   12724:	bl	11964 <argp_error@plt>
   12728:	mov	r0, #22
   1272c:	b	12648 <__assert_fail@plt+0x9d8>
   12730:	ldr	r3, [r2, #32]
   12734:	add	r6, r6, #8
   12738:	mov	r0, #0
   1273c:	str	r6, [r3]
   12740:	b	12648 <__assert_fail@plt+0x9d8>
   12744:	mov	r3, #1
   12748:	mov	r0, #0
   1274c:	strb	r3, [r6, #17]
   12750:	b	12648 <__assert_fail@plt+0x9d8>
   12754:	mov	r3, #1
   12758:	mov	r0, #0
   1275c:	strb	r3, [r6, #22]
   12760:	b	12648 <__assert_fail@plt+0x9d8>
   12764:	mov	r3, #1
   12768:	mov	r0, #0
   1276c:	strb	r3, [r6, #18]
   12770:	b	12648 <__assert_fail@plt+0x9d8>
   12774:	ldr	r0, [r6, #4]
   12778:	cmp	r0, #0
   1277c:	streq	r1, [r6, #4]
   12780:	beq	12648 <__assert_fail@plt+0x9d8>
   12784:	movw	r1, #35060	; 0x88f4
   12788:	mov	r0, #0
   1278c:	movt	r1, #1
   12790:	b	12714 <__assert_fail@plt+0xaa4>
   12794:	ldr	r0, [r6]
   12798:	cmp	r0, #0
   1279c:	streq	r1, [r6]
   127a0:	beq	12648 <__assert_fail@plt+0x9d8>
   127a4:	movw	r1, #35032	; 0x88d8
   127a8:	mov	r0, #0
   127ac:	movt	r1, #1
   127b0:	b	12714 <__assert_fail@plt+0xaa4>
   127b4:	mov	r3, #1
   127b8:	mov	r0, #0
   127bc:	strb	r3, [r6, #19]
   127c0:	b	12648 <__assert_fail@plt+0x9d8>
   127c4:	ldrb	r2, [r6, #16]
   127c8:	cmp	r2, #0
   127cc:	beq	127f8 <__assert_fail@plt+0xb88>
   127d0:	ldr	r2, [r6, #8]
   127d4:	cmp	r2, #0
   127d8:	beq	127e8 <__assert_fail@plt+0xb78>
   127dc:	ldr	r2, [r6, #4]
   127e0:	cmp	r2, #0
   127e4:	beq	12894 <__assert_fail@plt+0xc24>
   127e8:	movw	r1, #35120	; 0x8930
   127ec:	mov	r0, #0
   127f0:	movt	r1, #1
   127f4:	b	12714 <__assert_fail@plt+0xaa4>
   127f8:	ldr	r1, [r6, #4]
   127fc:	cmp	r1, #0
   12800:	beq	12874 <__assert_fail@plt+0xc04>
   12804:	mov	r0, #3
   12808:	add	r2, sp, #8
   1280c:	bl	11c34 <__xstat64@plt>
   12810:	cmp	r0, #0
   12814:	blt	12864 <__assert_fail@plt+0xbf4>
   12818:	ldr	r3, [sp, #24]
   1281c:	and	r3, r3, #61440	; 0xf000
   12820:	cmp	r3, #16384	; 0x4000
   12824:	beq	12874 <__assert_fail@plt+0xc04>
   12828:	mov	r7, #20
   1282c:	mov	r2, #5
   12830:	movw	r1, #35172	; 0x8964
   12834:	mov	r0, #0
   12838:	movt	r1, #1
   1283c:	bl	118d4 <dcgettext@plt>
   12840:	ldr	ip, [r6, #4]
   12844:	mov	r1, #1
   12848:	mov	r2, r7
   1284c:	str	ip, [sp]
   12850:	mov	r3, r0
   12854:	mov	r0, r5
   12858:	bl	11a84 <argp_failure@plt>
   1285c:	mov	r0, r7
   12860:	b	12648 <__assert_fail@plt+0x9d8>
   12864:	bl	11a78 <__errno_location@plt>
   12868:	ldr	r7, [r0]
   1286c:	cmp	r7, #0
   12870:	bne	1282c <__assert_fail@plt+0xbbc>
   12874:	ldr	r0, [r6, #8]
   12878:	cmp	r0, #0
   1287c:	beq	128c8 <__assert_fail@plt+0xc58>
   12880:	ldr	r3, [r6]
   12884:	cmp	r3, #0
   12888:	beq	1289c <__assert_fail@plt+0xc2c>
   1288c:	mov	r0, #0
   12890:	b	12648 <__assert_fail@plt+0x9d8>
   12894:	cmp	r3, #0
   12898:	bne	127e8 <__assert_fail@plt+0xb78>
   1289c:	ldr	r3, [r6, #4]
   128a0:	cmp	r3, #0
   128a4:	bne	1288c <__assert_fail@plt+0xc1c>
   128a8:	ldrb	r0, [r6, #16]
   128ac:	cmp	r0, #0
   128b0:	movne	r0, r3
   128b4:	bne	12648 <__assert_fail@plt+0x9d8>
   128b8:	movw	r1, #35296	; 0x89e0
   128bc:	mov	r2, #5
   128c0:	movt	r1, #1
   128c4:	b	12718 <__assert_fail@plt+0xaa8>
   128c8:	ldr	r2, [r5, #12]
   128cc:	ldr	r3, [r5, #4]
   128d0:	add	r2, r2, #2
   128d4:	cmp	r2, r3
   128d8:	beq	128f0 <__assert_fail@plt+0xc80>
   128dc:	movw	r1, #35196	; 0x897c
   128e0:	mov	r2, #5
   128e4:	movt	r1, #1
   128e8:	b	12718 <__assert_fail@plt+0xaa8>
   128ec:	bl	118ec <__stack_chk_fail@plt>
   128f0:	ldrb	r3, [r6, #18]
   128f4:	cmp	r3, #0
   128f8:	bne	12908 <__assert_fail@plt+0xc98>
   128fc:	ldrb	r3, [r6, #17]
   12900:	cmp	r3, #0
   12904:	beq	12918 <__assert_fail@plt+0xca8>
   12908:	movw	r1, #35236	; 0x89a4
   1290c:	mov	r0, #0
   12910:	movt	r1, #1
   12914:	b	12714 <__assert_fail@plt+0xaa4>
   12918:	ldrb	r3, [r6, #19]
   1291c:	cmp	r3, #0
   12920:	bne	12908 <__assert_fail@plt+0xc98>
   12924:	ldrb	r3, [r6, #21]
   12928:	cmp	r3, #0
   1292c:	moveq	r0, #38	; 0x26
   12930:	beq	12648 <__assert_fail@plt+0x9d8>
   12934:	b	12908 <__assert_fail@plt+0xc98>
   12938:	ldrb	r3, [ip, #8]
   1293c:	push	{r4, r5, r6, r7, lr}
   12940:	cmp	r3, #0
   12944:	sub	sp, sp, #20
   12948:	mov	r4, ip
   1294c:	mov	r7, r0
   12950:	bne	129b0 <__assert_fail@plt+0xd40>
   12954:	movw	r5, #40192	; 0x9d00
   12958:	movt	r5, #1
   1295c:	mov	r6, #1
   12960:	mov	r2, #5
   12964:	movw	r1, #35344	; 0x8a10
   12968:	mov	r0, #0
   1296c:	movt	r1, #1
   12970:	bl	118d4 <dcgettext@plt>
   12974:	ldr	r2, [r4, #4]
   12978:	ldr	r3, [r4]
   1297c:	mov	r1, r0
   12980:	str	r2, [sp]
   12984:	mov	r0, r6
   12988:	str	r3, [sp, #4]
   1298c:	movw	r2, #35360	; 0x8a20
   12990:	str	r1, [sp, #12]
   12994:	mov	r3, r5
   12998:	str	r7, [sp, #8]
   1299c:	movt	r2, #1
   129a0:	mov	r1, #0
   129a4:	bl	119a0 <error@plt>
   129a8:	add	sp, sp, #20
   129ac:	pop	{r4, r5, r6, r7, pc}
   129b0:	movw	r1, #35384	; 0x8a38
   129b4:	mov	r0, #0
   129b8:	movt	r1, #1
   129bc:	mov	r2, #5
   129c0:	bl	118d4 <dcgettext@plt>
   129c4:	ldrb	r6, [r4, #8]
   129c8:	cmp	r6, #0
   129cc:	mov	r5, r0
   129d0:	beq	12960 <__assert_fail@plt+0xcf0>
   129d4:	movw	r1, #40192	; 0x9d00
   129d8:	ldr	r2, [r4, #4]
   129dc:	movt	r1, #1
   129e0:	ldr	r3, [r4]
   129e4:	mov	r6, #0
   129e8:	b	12980 <__assert_fail@plt+0xd10>
   129ec:	push	{r4, r5, r6, fp, lr}
   129f0:	add	fp, sp, #16
   129f4:	sub	sp, sp, #12
   129f8:	movw	r6, #45448	; 0xb188
   129fc:	movt	r6, #2
   12a00:	mov	r1, #47	; 0x2f
   12a04:	mov	r4, r0
   12a08:	ldr	r3, [r6]
   12a0c:	str	r3, [fp, #-24]	; 0xffffffe8
   12a10:	bl	11b98 <strrchr@plt>
   12a14:	cmp	r0, #0
   12a18:	beq	12a4c <__assert_fail@plt+0xddc>
   12a1c:	cmp	r4, r0
   12a20:	bcs	12a64 <__assert_fail@plt+0xdf4>
   12a24:	ldrb	r2, [r0, #-1]
   12a28:	cmp	r2, #47	; 0x2f
   12a2c:	beq	12a40 <__assert_fail@plt+0xdd0>
   12a30:	b	12a64 <__assert_fail@plt+0xdf4>
   12a34:	ldrb	r2, [r0, #-1]
   12a38:	cmp	r2, #47	; 0x2f
   12a3c:	bne	12a6c <__assert_fail@plt+0xdfc>
   12a40:	sub	r0, r0, #1
   12a44:	cmp	r0, r4
   12a48:	bne	12a34 <__assert_fail@plt+0xdc4>
   12a4c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12a50:	ldr	r3, [r6]
   12a54:	cmp	r2, r3
   12a58:	bne	12b0c <__assert_fail@plt+0xe9c>
   12a5c:	sub	sp, fp, #16
   12a60:	pop	{r4, r5, r6, fp, pc}
   12a64:	cmp	r4, r0
   12a68:	beq	12a4c <__assert_fail@plt+0xddc>
   12a6c:	rsb	r1, r4, r0
   12a70:	mov	r0, r4
   12a74:	bl	11b50 <strnlen@plt>
   12a78:	mov	ip, #0
   12a7c:	mov	r1, r4
   12a80:	add	r3, r0, #15
   12a84:	mov	r2, r0
   12a88:	bic	r3, r3, #7
   12a8c:	sub	sp, sp, r3
   12a90:	mov	lr, sp
   12a94:	lsr	r3, lr, #3
   12a98:	strb	ip, [r0, r3, lsl #3]
   12a9c:	lsl	r0, r3, #3
   12aa0:	bl	118a4 <memcpy@plt>
   12aa4:	mov	r5, r0
   12aa8:	b	12acc <__assert_fail@plt+0xe5c>
   12aac:	bl	11a78 <__errno_location@plt>
   12ab0:	ldr	r4, [r0]
   12ab4:	cmp	r4, #17
   12ab8:	beq	12a4c <__assert_fail@plt+0xddc>
   12abc:	cmp	r4, #2
   12ac0:	bne	12ae4 <__assert_fail@plt+0xe74>
   12ac4:	mov	r0, r5
   12ac8:	bl	129ec <__assert_fail@plt+0xd7c>
   12acc:	mov	r0, r5
   12ad0:	movw	r1, #511	; 0x1ff
   12ad4:	bl	11aa8 <mkdir@plt>
   12ad8:	cmp	r0, #0
   12adc:	blt	12aac <__assert_fail@plt+0xe3c>
   12ae0:	b	12a4c <__assert_fail@plt+0xddc>
   12ae4:	mov	r2, #5
   12ae8:	movw	r1, #35396	; 0x8a44
   12aec:	mov	r0, #0
   12af0:	movt	r1, #1
   12af4:	bl	118d4 <dcgettext@plt>
   12af8:	mov	r1, r4
   12afc:	mov	r3, r5
   12b00:	mov	r2, r0
   12b04:	mov	r0, #1
   12b08:	bl	119a0 <error@plt>
   12b0c:	bl	118ec <__stack_chk_fail@plt>
   12b10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b14:	movw	r8, #45448	; 0xb188
   12b18:	movt	r8, #2
   12b1c:	sub	sp, sp, #144	; 0x90
   12b20:	mov	r7, r0
   12b24:	mov	r0, r1
   12b28:	ldr	r3, [r8]
   12b2c:	mov	r6, r1
   12b30:	str	r3, [sp, #140]	; 0x8c
   12b34:	bl	11928 <gelf_getclass@plt>
   12b38:	mov	r1, r0
   12b3c:	mov	r0, r7
   12b40:	bl	11a90 <gelf_newehdr@plt>
   12b44:	subs	r4, r0, #0
   12b48:	movweq	r1, #35428	; 0x8a64
   12b4c:	moveq	r2, #5
   12b50:	movteq	r1, #1
   12b54:	beq	12e00 <__assert_fail@plt+0x1190>
   12b58:	mov	r1, sp
   12b5c:	mov	r0, r6
   12b60:	bl	11c64 <elf_getshdrstrndx@plt>
   12b64:	subs	r5, r0, #0
   12b68:	movwne	r1, #35460	; 0x8a84
   12b6c:	movne	r0, #0
   12b70:	movtne	r1, #1
   12b74:	bne	12dcc <__assert_fail@plt+0x115c>
   12b78:	mov	r0, r6
   12b7c:	add	r1, sp, #8
   12b80:	bl	11838 <gelf_getehdr@plt>
   12b84:	subs	r4, r0, #0
   12b88:	beq	12df4 <__assert_fail@plt+0x1184>
   12b8c:	ldr	r3, [sp]
   12b90:	cmp	r3, #65280	; 0xff00
   12b94:	strhcc	r3, [r4, #62]	; 0x3e
   12b98:	bcs	12c88 <__assert_fail@plt+0x1018>
   12b9c:	mov	r1, r4
   12ba0:	mov	r0, r7
   12ba4:	bl	11a0c <gelf_update_ehdr@plt>
   12ba8:	subs	r4, r0, #0
   12bac:	movweq	r1, #35584	; 0x8b00
   12bb0:	moveq	r2, #5
   12bb4:	movteq	r1, #1
   12bb8:	beq	12e00 <__assert_fail@plt+0x1190>
   12bbc:	mov	r0, r6
   12bc0:	add	r1, sp, #4
   12bc4:	bl	11a9c <elf_getphdrnum@plt>
   12bc8:	subs	r4, r0, #0
   12bcc:	bne	12dc0 <__assert_fail@plt+0x1150>
   12bd0:	ldr	r1, [sp, #4]
   12bd4:	cmp	r1, #0
   12bd8:	bne	12ce8 <__assert_fail@plt+0x1078>
   12bdc:	mov	r4, #0
   12be0:	b	12c5c <__assert_fail@plt+0xfec>
   12be4:	mov	r0, r7
   12be8:	bl	11bb0 <elf_newscn@plt>
   12bec:	add	r1, sp, #72	; 0x48
   12bf0:	mov	r5, r0
   12bf4:	mov	r0, r4
   12bf8:	bl	11850 <gelf_getshdr@plt>
   12bfc:	mov	r1, r0
   12c00:	mov	r0, r5
   12c04:	bl	11c10 <gelf_update_shdr@plt>
   12c08:	subs	r9, r0, #0
   12c0c:	beq	12da0 <__assert_fail@plt+0x1130>
   12c10:	mov	r0, r4
   12c14:	mov	r1, #0
   12c18:	bl	1197c <elf_getdata@plt>
   12c1c:	subs	r9, r0, #0
   12c20:	beq	12d70 <__assert_fail@plt+0x1100>
   12c24:	mov	r0, r5
   12c28:	bl	11868 <elf_newdata@plt>
   12c2c:	subs	r5, r0, #0
   12c30:	beq	12db0 <__assert_fail@plt+0x1140>
   12c34:	mov	lr, r9
   12c38:	mov	ip, r5
   12c3c:	ldm	lr!, {r0, r1, r2, r3}
   12c40:	stmia	ip!, {r0, r1, r2, r3}
   12c44:	ldm	lr, {r0, r1, r2, r3}
   12c48:	stm	ip, {r0, r1, r2, r3}
   12c4c:	mov	r0, r5
   12c50:	mov	r1, #5
   12c54:	mov	r2, #1
   12c58:	bl	118b0 <elf_flagdata@plt>
   12c5c:	mov	r1, r4
   12c60:	mov	r0, r6
   12c64:	bl	11b8c <elf_nextscn@plt>
   12c68:	subs	r4, r0, #0
   12c6c:	bne	12be4 <__assert_fail@plt+0xf74>
   12c70:	ldr	r2, [sp, #140]	; 0x8c
   12c74:	ldr	r3, [r8]
   12c78:	cmp	r2, r3
   12c7c:	bne	12e24 <__assert_fail@plt+0x11b4>
   12c80:	add	sp, sp, #144	; 0x90
   12c84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c88:	mov	r1, r5
   12c8c:	mvn	r9, #0
   12c90:	mov	r0, r7
   12c94:	strh	r9, [r4, #62]	; 0x3e
   12c98:	bl	11bec <elf_getscn@plt>
   12c9c:	add	r1, sp, #72	; 0x48
   12ca0:	mov	sl, r0
   12ca4:	bl	11850 <gelf_getshdr@plt>
   12ca8:	subs	r5, r0, #0
   12cac:	beq	12e38 <__assert_fail@plt+0x11c8>
   12cb0:	ldr	r3, [sp]
   12cb4:	mov	r1, r5
   12cb8:	mov	r0, sl
   12cbc:	str	r3, [r5, #40]	; 0x28
   12cc0:	bl	11c10 <gelf_update_shdr@plt>
   12cc4:	subs	r5, r0, #0
   12cc8:	bne	12b9c <__assert_fail@plt+0xf2c>
   12ccc:	movw	r1, #35548	; 0x8adc
   12cd0:	mov	r2, #5
   12cd4:	movt	r1, #1
   12cd8:	bl	118d4 <dcgettext@plt>
   12cdc:	mov	r4, r0
   12ce0:	mov	r0, r9
   12ce4:	b	12d58 <__assert_fail@plt+0x10e8>
   12ce8:	mov	r0, r7
   12cec:	bl	11b44 <gelf_newphdr@plt>
   12cf0:	subs	r5, r0, #0
   12cf4:	beq	12e28 <__assert_fail@plt+0x11b8>
   12cf8:	ldr	r3, [sp, #4]
   12cfc:	cmp	r3, #0
   12d00:	bne	12d18 <__assert_fail@plt+0x10a8>
   12d04:	b	12bdc <__assert_fail@plt+0xf6c>
   12d08:	ldr	r3, [sp, #4]
   12d0c:	add	r4, r4, #1
   12d10:	cmp	r3, r4
   12d14:	bls	12bdc <__assert_fail@plt+0xf6c>
   12d18:	mov	r1, r4
   12d1c:	add	r2, sp, #72	; 0x48
   12d20:	mov	r0, r6
   12d24:	bl	11904 <gelf_getphdr@plt>
   12d28:	mov	r1, r4
   12d2c:	mov	r2, r0
   12d30:	mov	r0, r7
   12d34:	bl	11ae4 <gelf_update_phdr@plt>
   12d38:	subs	r5, r0, #0
   12d3c:	bne	12d08 <__assert_fail@plt+0x1098>
   12d40:	movw	r1, #35692	; 0x8b6c
   12d44:	movt	r1, #1
   12d48:	mov	r2, #5
   12d4c:	bl	118d4 <dcgettext@plt>
   12d50:	mov	r4, r0
   12d54:	mvn	r0, #0
   12d58:	bl	11a3c <elf_errmsg@plt>
   12d5c:	mov	r2, r4
   12d60:	mov	r1, r5
   12d64:	mov	r3, r0
   12d68:	mov	r0, #1
   12d6c:	bl	119a0 <error@plt>
   12d70:	movw	r1, #35756	; 0x8bac
   12d74:	movt	r1, #1
   12d78:	mov	r2, #5
   12d7c:	bl	118d4 <dcgettext@plt>
   12d80:	mov	r4, r0
   12d84:	mvn	r0, #0
   12d88:	bl	11a3c <elf_errmsg@plt>
   12d8c:	mov	r2, r4
   12d90:	mov	r1, r9
   12d94:	mov	r3, r0
   12d98:	mov	r0, #1
   12d9c:	bl	119a0 <error@plt>
   12da0:	movw	r1, #35724	; 0x8b8c
   12da4:	mov	r2, #5
   12da8:	movt	r1, #1
   12dac:	b	12d7c <__assert_fail@plt+0x110c>
   12db0:	movw	r1, #35784	; 0x8bc8
   12db4:	mov	r2, #5
   12db8:	movt	r1, #1
   12dbc:	b	12d4c <__assert_fail@plt+0x10dc>
   12dc0:	movw	r1, #35612	; 0x8b1c
   12dc4:	movt	r1, #1
   12dc8:	mov	r0, #0
   12dcc:	mov	r2, #5
   12dd0:	bl	118d4 <dcgettext@plt>
   12dd4:	mov	r4, r0
   12dd8:	mvn	r0, #0
   12ddc:	bl	11a3c <elf_errmsg@plt>
   12de0:	mov	r2, r4
   12de4:	mov	r1, #0
   12de8:	mov	r3, r0
   12dec:	mov	r0, #1
   12df0:	bl	119a0 <error@plt>
   12df4:	movw	r1, #35488	; 0x8aa0
   12df8:	movt	r1, #1
   12dfc:	mov	r2, #5
   12e00:	bl	118d4 <dcgettext@plt>
   12e04:	mov	r5, r0
   12e08:	mvn	r0, #0
   12e0c:	bl	11a3c <elf_errmsg@plt>
   12e10:	mov	r2, r5
   12e14:	mov	r1, r4
   12e18:	mov	r3, r0
   12e1c:	mov	r0, #1
   12e20:	bl	119a0 <error@plt>
   12e24:	bl	118ec <__stack_chk_fail@plt>
   12e28:	movw	r1, #35656	; 0x8b48
   12e2c:	mov	r2, #5
   12e30:	movt	r1, #1
   12e34:	b	12d4c <__assert_fail@plt+0x10dc>
   12e38:	movw	r1, #35516	; 0x8abc
   12e3c:	mov	r2, #5
   12e40:	movt	r1, #1
   12e44:	bl	118d4 <dcgettext@plt>
   12e48:	mov	r4, r0
   12e4c:	mov	r0, r9
   12e50:	b	12d58 <__assert_fail@plt+0x10e8>
   12e54:	mov	ip, #88	; 0x58
   12e58:	mla	r0, ip, r1, r0
   12e5c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12e60:	ldrd	r4, [r2, #8]
   12e64:	ldr	ip, [r0, #28]
   12e68:	ldrd	r6, [r0, #32]
   12e6c:	cmp	ip, #9
   12e70:	cmpne	ip, #4
   12e74:	bne	12e90 <__assert_fail@plt+0x1220>
   12e78:	mvn	r8, #64	; 0x40
   12e7c:	mvn	r9, #0
   12e80:	and	r6, r6, r8
   12e84:	and	r7, r7, r9
   12e88:	and	r4, r4, r8
   12e8c:	and	r5, r5, r9
   12e90:	cmp	r7, r5
   12e94:	cmpeq	r6, r4
   12e98:	beq	12ea4 <__assert_fail@plt+0x1234>
   12e9c:	mov	r0, #0
   12ea0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12ea4:	ldrd	r4, [r0, #56]	; 0x38
   12ea8:	ldrd	r6, [r2, #32]
   12eac:	cmp	r5, r7
   12eb0:	cmpeq	r4, r6
   12eb4:	beq	12ed8 <__assert_fail@plt+0x1268>
   12eb8:	bcs	12e9c <__assert_fail@plt+0x122c>
   12ebc:	cmp	ip, #5
   12ec0:	beq	12ed8 <__assert_fail@plt+0x1268>
   12ec4:	bls	12ef0 <__assert_fail@plt+0x1280>
   12ec8:	cmp	ip, #11
   12ecc:	beq	12ed8 <__assert_fail@plt+0x1268>
   12ed0:	cmn	ip, #-1879048191	; 0x90000001
   12ed4:	bne	12e9c <__assert_fail@plt+0x122c>
   12ed8:	ldr	r0, [r0, #4]
   12edc:	mov	r1, r3
   12ee0:	bl	1185c <strcmp@plt>
   12ee4:	rsbs	r0, r0, #1
   12ee8:	movcc	r0, #0
   12eec:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12ef0:	cmp	ip, #2
   12ef4:	bne	12e9c <__assert_fail@plt+0x122c>
   12ef8:	b	12ed8 <__assert_fail@plt+0x1268>
   12efc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f00:	mov	r1, #0
   12f04:	ldrd	r6, [r0, #16]
   12f08:	mov	r9, r0
   12f0c:	ldr	sl, [sp, #48]	; 0x30
   12f10:	mov	r0, #88	; 0x58
   12f14:	adds	r6, r6, r2
   12f18:	ldr	r8, [sp, #44]	; 0x2c
   12f1c:	adc	r7, r7, r3
   12f20:	mov	r3, sl
   12f24:	cmp	r1, r3
   12f28:	bcs	12f88 <__assert_fail@plt+0x1318>
   12f2c:	add	ip, r3, r1
   12f30:	lsr	ip, ip, #1
   12f34:	mla	r2, r0, ip, r8
   12f38:	ldrd	r4, [r2, #40]	; 0x28
   12f3c:	cmp	r7, r5
   12f40:	cmpeq	r6, r4
   12f44:	bcs	12f70 <__assert_fail@plt+0x1300>
   12f48:	add	r2, ip, r1
   12f4c:	cmp	r1, ip
   12f50:	mov	r3, ip
   12f54:	lsr	ip, r2, #1
   12f58:	bcs	12f88 <__assert_fail@plt+0x1318>
   12f5c:	mla	r2, r0, ip, r8
   12f60:	ldrd	r4, [r2, #40]	; 0x28
   12f64:	cmp	r7, r5
   12f68:	cmpeq	r6, r4
   12f6c:	bcc	12f48 <__assert_fail@plt+0x12d8>
   12f70:	cmp	r7, r5
   12f74:	cmpeq	r6, r4
   12f78:	bls	12f94 <__assert_fail@plt+0x1324>
   12f7c:	add	r1, ip, #1
   12f80:	cmp	r1, r3
   12f84:	bcc	12f2c <__assert_fail@plt+0x12bc>
   12f88:	mov	fp, #0
   12f8c:	mov	r0, fp
   12f90:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f94:	cmp	ip, #0
   12f98:	beq	12fdc <__assert_fail@plt+0x136c>
   12f9c:	mov	r4, #88	; 0x58
   12fa0:	mul	r4, r4, ip
   12fa4:	add	r3, r8, r4
   12fa8:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   12fac:	cmp	r1, r7
   12fb0:	cmpeq	r0, r6
   12fb4:	addeq	r4, r8, r4
   12fb8:	subeq	r4, r4, #136	; 0x88
   12fbc:	beq	12fd4 <__assert_fail@plt+0x1364>
   12fc0:	b	12fdc <__assert_fail@plt+0x136c>
   12fc4:	ldrd	r2, [r4], #-88	; 0xffffffa8
   12fc8:	cmp	r3, r1
   12fcc:	cmpeq	r2, r0
   12fd0:	bne	12fdc <__assert_fail@plt+0x136c>
   12fd4:	subs	ip, ip, #1
   12fd8:	bne	12fc4 <__assert_fail@plt+0x1354>
   12fdc:	cmp	sl, ip
   12fe0:	bls	12f88 <__assert_fail@plt+0x1318>
   12fe4:	mov	r3, #88	; 0x58
   12fe8:	mul	r3, r3, ip
   12fec:	add	fp, r8, r3
   12ff0:	ldrd	r4, [fp, #40]	; 0x28
   12ff4:	cmp	r5, r7
   12ff8:	cmpeq	r4, r6
   12ffc:	addeq	r3, r3, #88	; 0x58
   13000:	subeq	r6, sl, #1
   13004:	addeq	r7, r8, r3
   13008:	moveq	sl, ip
   1300c:	beq	13024 <__assert_fail@plt+0x13b4>
   13010:	b	12f88 <__assert_fail@plt+0x1318>
   13014:	ldrd	r2, [fp, #40]	; 0x28
   13018:	cmp	r3, r5
   1301c:	cmpeq	r2, r4
   13020:	bne	13054 <__assert_fail@plt+0x13e4>
   13024:	mov	r0, r8
   13028:	mov	r1, sl
   1302c:	mov	r2, r9
   13030:	ldr	r3, [sp, #40]	; 0x28
   13034:	bl	12e54 <__assert_fail@plt+0x11e4>
   13038:	cmp	r0, #0
   1303c:	bne	12f8c <__assert_fail@plt+0x131c>
   13040:	cmp	sl, r6
   13044:	mov	fp, r7
   13048:	add	sl, sl, #1
   1304c:	add	r7, r7, #88	; 0x58
   13050:	bne	13014 <__assert_fail@plt+0x13a4>
   13054:	mov	fp, r0
   13058:	mov	r0, fp
   1305c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13064:	movw	r4, #45448	; 0xb188
   13068:	movt	r4, #2
   1306c:	sub	sp, sp, #148	; 0x94
   13070:	mov	r5, r3
   13074:	ldr	ip, [r4]
   13078:	str	r0, [sp, #36]	; 0x24
   1307c:	mov	r0, r2
   13080:	str	r1, [sp, #28]
   13084:	mov	r1, #0
   13088:	str	ip, [sp, #140]	; 0x8c
   1308c:	ldr	ip, [sp, #200]	; 0xc8
   13090:	str	r4, [sp, #32]
   13094:	ldr	r8, [sp, #204]	; 0xcc
   13098:	str	ip, [sp, #24]
   1309c:	ldr	r4, [sp, #208]	; 0xd0
   130a0:	ldr	fp, [sp, #212]	; 0xd4
   130a4:	bl	1197c <elf_getdata@plt>
   130a8:	mov	r1, #0
   130ac:	mov	r6, r0
   130b0:	mov	r0, r5
   130b4:	bl	1197c <elf_getdata@plt>
   130b8:	ldr	r5, [sp, #184]	; 0xb8
   130bc:	cmp	r5, #1
   130c0:	mov	sl, r0
   130c4:	bls	13238 <__assert_fail@plt+0x15c8>
   130c8:	mov	r7, r4
   130cc:	mov	r9, #1
   130d0:	str	r6, [sp, #12]
   130d4:	b	1311c <__assert_fail@plt+0x14ac>
   130d8:	cmp	fp, #0
   130dc:	beq	13104 <__assert_fail@plt+0x1494>
   130e0:	ldrd	r0, [fp, #40]	; 0x28
   130e4:	ldrd	r2, [sp, #16]
   130e8:	cmp	r3, r1
   130ec:	cmpeq	r2, r0
   130f0:	bcs	13104 <__assert_fail@plt+0x1494>
   130f4:	ldrd	r0, [fp, #-48]	; 0xffffffd0
   130f8:	cmp	r3, r1
   130fc:	cmpeq	r2, r0
   13100:	bcs	13214 <__assert_fail@plt+0x15a4>
   13104:	ldr	r4, [sp, #184]	; 0xb8
   13108:	add	r9, r9, #1
   1310c:	add	r8, r8, #32
   13110:	add	r7, r7, #4
   13114:	cmp	r9, r4
   13118:	beq	13238 <__assert_fail@plt+0x15c8>
   1311c:	add	ip, sp, #44	; 0x2c
   13120:	mov	r1, #0
   13124:	str	ip, [sp]
   13128:	mov	r2, r9
   1312c:	ldr	r0, [sp, #12]
   13130:	add	r3, sp, #48	; 0x30
   13134:	str	r1, [sp, #44]	; 0x2c
   13138:	bl	11c28 <gelf_getsymshndx@plt>
   1313c:	subs	r6, r0, #0
   13140:	beq	13254 <__assert_fail@plt+0x15e4>
   13144:	ldrh	r3, [r6, #6]
   13148:	movw	r1, #65535	; 0xffff
   1314c:	ldr	r2, [sl, #12]
   13150:	cmp	r3, r1
   13154:	strne	r3, [sp, #44]	; 0x2c
   13158:	ldr	r3, [r6]
   1315c:	cmp	r3, r2
   13160:	bcs	13284 <__assert_fail@plt+0x1614>
   13164:	str	r7, [r8]
   13168:	ldr	r2, [sl]
   1316c:	ldr	r1, [sp, #44]	; 0x2c
   13170:	ldrd	r4, [sp, #192]	; 0xc0
   13174:	add	r3, r2, r3
   13178:	str	r3, [r8, #4]
   1317c:	ldrd	r2, [r6, #8]
   13180:	ldr	ip, [sp, #24]
   13184:	adds	r2, r2, r4
   13188:	adc	r3, r3, r5
   1318c:	strd	r2, [r8, #8]
   13190:	ldrd	r4, [r6, #16]
   13194:	cmp	ip, #0
   13198:	str	r1, [r8, #24]
   1319c:	strd	r2, [sp, #16]
   131a0:	strd	r4, [r8, #16]
   131a4:	ldrb	r0, [r6, #4]
   131a8:	strb	r0, [r8, #28]
   131ac:	ldrb	ip, [r6, #5]
   131b0:	strb	ip, [r8, #29]
   131b4:	beq	131d4 <__assert_fail@plt+0x1564>
   131b8:	sub	ip, r1, #1
   131bc:	movw	r2, #65278	; 0xfefe
   131c0:	cmp	ip, r2
   131c4:	subls	r1, r1, #-1073741823	; 0xc0000001
   131c8:	ldrls	r4, [sp, #24]
   131cc:	ldrls	r1, [r4, r1, lsl #2]
   131d0:	strls	r1, [r8, #24]
   131d4:	and	r0, r0, #15
   131d8:	cmp	r0, #3
   131dc:	bne	130d8 <__assert_fail@plt+0x1468>
   131e0:	ldr	r5, [sp, #28]
   131e4:	cmp	r5, #0
   131e8:	bne	130d8 <__assert_fail@plt+0x1468>
   131ec:	ldr	r1, [r8, #24]
   131f0:	ldr	r0, [sp, #36]	; 0x24
   131f4:	bl	11bec <elf_getscn@plt>
   131f8:	add	r1, sp, #72	; 0x48
   131fc:	bl	11850 <gelf_getshdr@plt>
   13200:	subs	r3, r0, #0
   13204:	beq	132b0 <__assert_fail@plt+0x1640>
   13208:	ldrd	r2, [r3, #16]
   1320c:	strd	r2, [r8, #8]
   13210:	b	13104 <__assert_fail@plt+0x1494>
   13214:	ldr	r0, [fp, #12]
   13218:	bl	11be0 <elf_ndxscn@plt>
   1321c:	ldr	r3, [sp, #44]	; 0x2c
   13220:	cmp	r0, r3
   13224:	bne	13104 <__assert_fail@plt+0x1494>
   13228:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1322c:	bl	11be0 <elf_ndxscn@plt>
   13230:	str	r0, [r8, #24]
   13234:	b	13104 <__assert_fail@plt+0x1494>
   13238:	ldr	r5, [sp, #32]
   1323c:	ldr	r2, [sp, #140]	; 0x8c
   13240:	ldr	r3, [r5]
   13244:	cmp	r2, r3
   13248:	bne	132ac <__assert_fail@plt+0x163c>
   1324c:	add	sp, sp, #148	; 0x94
   13250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13254:	mov	r2, #5
   13258:	movw	r1, #35816	; 0x8be8
   1325c:	movt	r1, #1
   13260:	bl	118d4 <dcgettext@plt>
   13264:	mov	r4, r0
   13268:	mvn	r0, #0
   1326c:	bl	11a3c <elf_errmsg@plt>
   13270:	mov	r2, r4
   13274:	mov	r1, r6
   13278:	mov	r3, r0
   1327c:	mov	r0, #1
   13280:	bl	119a0 <error@plt>
   13284:	mov	r2, #5
   13288:	movw	r1, #35852	; 0x8c0c
   1328c:	mov	r0, #0
   13290:	movt	r1, #1
   13294:	bl	118d4 <dcgettext@plt>
   13298:	mov	r3, r9
   1329c:	mov	r1, #0
   132a0:	mov	r2, r0
   132a4:	mov	r0, #1
   132a8:	bl	119a0 <error@plt>
   132ac:	bl	118ec <__stack_chk_fail@plt>
   132b0:	mov	r2, #5
   132b4:	movw	r1, #35892	; 0x8c34
   132b8:	movt	r1, #1
   132bc:	bl	118d4 <dcgettext@plt>
   132c0:	mov	r4, r0
   132c4:	mvn	r0, #0
   132c8:	bl	11a3c <elf_errmsg@plt>
   132cc:	mov	r2, r4
   132d0:	ldr	r1, [sp, #28]
   132d4:	mov	r3, r0
   132d8:	mov	r0, #1
   132dc:	bl	119a0 <error@plt>
   132e0:	push	{r4, r5, r6, r7, r8, lr}
   132e4:	sub	sp, sp, #40	; 0x28
   132e8:	movw	r6, #45448	; 0xb188
   132ec:	movt	r6, #2
   132f0:	ldr	r7, [sp, #72]	; 0x48
   132f4:	mov	r5, r2
   132f8:	ldr	r2, [r6]
   132fc:	mov	r8, r0
   13300:	ldr	r4, [r7]
   13304:	str	r2, [sp, #36]	; 0x24
   13308:	ldr	r3, [r4]
   1330c:	cmp	r3, #0
   13310:	beq	13348 <__assert_fail@plt+0x16d8>
   13314:	ldrb	r2, [r7, #8]
   13318:	cmp	r2, #0
   1331c:	beq	13330 <__assert_fail@plt+0x16c0>
   13320:	b	13368 <__assert_fail@plt+0x16f8>
   13324:	ldr	r3, [r4, #4]!
   13328:	cmp	r3, #0
   1332c:	beq	133bc <__assert_fail@plt+0x174c>
   13330:	mov	r0, r3
   13334:	mov	r1, r5
   13338:	mov	r2, #0
   1333c:	bl	119c4 <fnmatch@plt>
   13340:	cmp	r0, #0
   13344:	bne	13324 <__assert_fail@plt+0x16b4>
   13348:	mov	r0, #1
   1334c:	str	r8, [r7, #4]
   13350:	ldr	r2, [sp, #36]	; 0x24
   13354:	ldr	r3, [r6]
   13358:	cmp	r2, r3
   1335c:	bne	133c4 <__assert_fail@plt+0x1754>
   13360:	add	sp, sp, #40	; 0x28
   13364:	pop	{r4, r5, r6, r7, r8, pc}
   13368:	add	r1, sp, #24
   1336c:	bl	118e0 <dwfl_module_getelf@plt>
   13370:	mov	r3, #0
   13374:	add	ip, sp, #20
   13378:	mov	r1, r3
   1337c:	str	r3, [sp]
   13380:	mov	r2, r3
   13384:	str	r3, [sp, #4]
   13388:	mov	r0, r8
   1338c:	str	r3, [sp, #12]
   13390:	str	ip, [sp, #8]
   13394:	bl	11bd4 <dwfl_module_info@plt>
   13398:	cmp	r5, r0
   1339c:	bne	133c8 <__assert_fail@plt+0x1758>
   133a0:	ldr	r5, [sp, #20]
   133a4:	cmp	r5, #0
   133a8:	beq	133bc <__assert_fail@plt+0x174c>
   133ac:	ldr	r4, [r7]
   133b0:	ldr	r3, [r4]
   133b4:	cmp	r3, #0
   133b8:	bne	13330 <__assert_fail@plt+0x16c0>
   133bc:	mov	r0, #0
   133c0:	b	13350 <__assert_fail@plt+0x16e0>
   133c4:	bl	118ec <__stack_chk_fail@plt>
   133c8:	movw	r0, #35924	; 0x8c54
   133cc:	movw	r1, #35020	; 0x88cc
   133d0:	movt	r0, #1
   133d4:	movt	r1, #1
   133d8:	movw	r2, #2425	; 0x979
   133dc:	ldr	r3, [pc]	; 133e4 <__assert_fail@plt+0x1774>
   133e0:	bl	11c70 <__assert_fail@plt>
   133e4:	andeq	r8, r1, r0, ror r7
   133e8:	cmp	r1, #0
   133ec:	push	{r3, r4, r5, lr}
   133f0:	movne	r1, #2
   133f4:	moveq	r1, #0
   133f8:	mov	r4, r0
   133fc:	bl	11a54 <__open64_2@plt>
   13400:	cmp	r0, #0
   13404:	popge	{r3, r4, r5, pc}
   13408:	bl	11a78 <__errno_location@plt>
   1340c:	mov	r2, #5
   13410:	movw	r1, #35940	; 0x8c64
   13414:	movt	r1, #1
   13418:	ldr	r5, [r0]
   1341c:	mov	r0, #0
   13420:	bl	118d4 <dcgettext@plt>
   13424:	mov	r3, r4
   13428:	mov	r1, r5
   1342c:	mov	r2, r0
   13430:	mov	r0, #1
   13434:	bl	119a0 <error@plt>
   13438:	push	{r3, r4, r5, lr}
   1343c:	bl	11c10 <gelf_update_shdr@plt>
   13440:	subs	r4, r0, #0
   13444:	popne	{r3, r4, r5, pc}
   13448:	mov	r2, #5
   1344c:	movw	r1, #35996	; 0x8c9c
   13450:	movt	r1, #1
   13454:	bl	118d4 <dcgettext@plt>
   13458:	mov	r5, r0
   1345c:	mvn	r0, #0
   13460:	bl	11a3c <elf_errmsg@plt>
   13464:	mov	r2, r5
   13468:	mov	r1, r4
   1346c:	mov	r3, r0
   13470:	mov	r0, #1
   13474:	bl	119a0 <error@plt>
   13478:	push	{r4, r5, r6, r7, lr}
   1347c:	movw	r4, #45448	; 0xb188
   13480:	movt	r4, #2
   13484:	sub	sp, sp, #76	; 0x4c
   13488:	mov	r7, r1
   1348c:	mov	r6, r0
   13490:	ldr	r3, [r4]
   13494:	mov	r1, sp
   13498:	str	r3, [sp, #68]	; 0x44
   1349c:	bl	11850 <gelf_getshdr@plt>
   134a0:	subs	r5, r0, #0
   134a4:	beq	134dc <__assert_fail@plt+0x186c>
   134a8:	ldr	r3, [r7]
   134ac:	mov	r2, #0
   134b0:	mov	r0, r6
   134b4:	str	r2, [r5, #36]	; 0x24
   134b8:	mov	r1, r5
   134bc:	str	r3, [r5, #32]
   134c0:	bl	13438 <__assert_fail@plt+0x17c8>
   134c4:	ldr	r2, [sp, #68]	; 0x44
   134c8:	ldr	r3, [r4]
   134cc:	cmp	r2, r3
   134d0:	bne	1350c <__assert_fail@plt+0x189c>
   134d4:	add	sp, sp, #76	; 0x4c
   134d8:	pop	{r4, r5, r6, r7, pc}
   134dc:	mov	r2, #5
   134e0:	movw	r1, #35892	; 0x8c34
   134e4:	movt	r1, #1
   134e8:	bl	118d4 <dcgettext@plt>
   134ec:	mov	r4, r0
   134f0:	mvn	r0, #0
   134f4:	bl	11a3c <elf_errmsg@plt>
   134f8:	mov	r2, r4
   134fc:	mov	r1, r5
   13500:	mov	r3, r0
   13504:	mov	r0, #1
   13508:	bl	119a0 <error@plt>
   1350c:	bl	118ec <__stack_chk_fail@plt>
   13510:	push	{r4, r5}
   13514:	ldrd	r4, [r0, #8]
   13518:	ldrd	r2, [r1, #8]
   1351c:	cmp	r5, r3
   13520:	cmpeq	r4, r2
   13524:	bcc	13590 <__assert_fail@plt+0x1920>
   13528:	bhi	13574 <__assert_fail@plt+0x1904>
   1352c:	ldrd	r4, [r0, #16]
   13530:	ldrd	r2, [r1, #16]
   13534:	cmp	r5, r3
   13538:	cmpeq	r4, r2
   1353c:	bcc	13590 <__assert_fail@plt+0x1920>
   13540:	bhi	13574 <__assert_fail@plt+0x1904>
   13544:	ldr	r2, [r0, #24]
   13548:	ldr	r3, [r1, #24]
   1354c:	cmp	r2, r3
   13550:	bcc	13590 <__assert_fail@plt+0x1920>
   13554:	bhi	13574 <__assert_fail@plt+0x1904>
   13558:	ldrsh	r2, [r0, #28]
   1355c:	ldrsh	r3, [r1, #28]
   13560:	cmp	r2, r3
   13564:	beq	13580 <__assert_fail@plt+0x1910>
   13568:	rsb	r0, r3, r2
   1356c:	pop	{r4, r5}
   13570:	bx	lr
   13574:	mov	r0, #1
   13578:	pop	{r4, r5}
   1357c:	bx	lr
   13580:	ldr	r0, [r0, #4]
   13584:	ldr	r1, [r1, #4]
   13588:	pop	{r4, r5}
   1358c:	b	1185c <strcmp@plt>
   13590:	mvn	r0, #0
   13594:	b	13578 <__assert_fail@plt+0x1908>
   13598:	push	{r4, r5, r6, r7, r8, lr}
   1359c:	movw	r4, #45448	; 0xb188
   135a0:	movt	r4, #2
   135a4:	sub	sp, sp, #96	; 0x60
   135a8:	mov	r5, r1
   135ac:	ldr	r1, [r1, #40]	; 0x28
   135b0:	ldr	r3, [r4]
   135b4:	mov	r8, r0
   135b8:	str	r3, [sp, #92]	; 0x5c
   135bc:	bl	11bec <elf_getscn@plt>
   135c0:	subs	r6, r0, #0
   135c4:	movweq	r1, #36032	; 0x8cc0
   135c8:	moveq	r2, #5
   135cc:	movteq	r1, #1
   135d0:	beq	13654 <__assert_fail@plt+0x19e4>
   135d4:	add	r1, sp, #24
   135d8:	bl	11850 <gelf_getshdr@plt>
   135dc:	subs	r7, r0, #0
   135e0:	beq	136ac <__assert_fail@plt+0x1a3c>
   135e4:	mov	r0, r6
   135e8:	mov	r1, #0
   135ec:	bl	1197c <elf_getdata@plt>
   135f0:	subs	r6, r0, #0
   135f4:	beq	13648 <__assert_fail@plt+0x19d8>
   135f8:	ldr	r1, [r5, #44]	; 0x2c
   135fc:	mov	r2, sp
   13600:	bl	1191c <gelf_getsym@plt>
   13604:	subs	r5, r0, #0
   13608:	movweq	r1, #36148	; 0x8d34
   1360c:	moveq	r2, #5
   13610:	movteq	r1, #1
   13614:	beq	13688 <__assert_fail@plt+0x1a18>
   13618:	ldr	r2, [r5]
   1361c:	mov	r0, r8
   13620:	ldr	r1, [r7, #40]	; 0x28
   13624:	bl	11934 <elf_strptr@plt>
   13628:	subs	r5, r0, #0
   1362c:	beq	1367c <__assert_fail@plt+0x1a0c>
   13630:	ldr	r2, [sp, #92]	; 0x5c
   13634:	ldr	r3, [r4]
   13638:	cmp	r2, r3
   1363c:	bne	13678 <__assert_fail@plt+0x1a08>
   13640:	add	sp, sp, #96	; 0x60
   13644:	pop	{r4, r5, r6, r7, r8, pc}
   13648:	movw	r1, #36108	; 0x8d0c
   1364c:	movt	r1, #1
   13650:	mov	r2, #5
   13654:	bl	118d4 <dcgettext@plt>
   13658:	mov	r4, r0
   1365c:	mvn	r0, #0
   13660:	bl	11a3c <elf_errmsg@plt>
   13664:	mov	r2, r4
   13668:	mov	r1, r6
   1366c:	mov	r3, r0
   13670:	mov	r0, #1
   13674:	bl	119a0 <error@plt>
   13678:	bl	118ec <__stack_chk_fail@plt>
   1367c:	movw	r1, #36192	; 0x8d60
   13680:	movt	r1, #1
   13684:	mov	r2, #5
   13688:	bl	118d4 <dcgettext@plt>
   1368c:	mov	r4, r0
   13690:	mvn	r0, #0
   13694:	bl	11a3c <elf_errmsg@plt>
   13698:	mov	r2, r4
   1369c:	mov	r1, r5
   136a0:	mov	r3, r0
   136a4:	mov	r0, #1
   136a8:	bl	119a0 <error@plt>
   136ac:	mov	r2, #5
   136b0:	movw	r1, #36068	; 0x8ce4
   136b4:	movt	r1, #1
   136b8:	bl	118d4 <dcgettext@plt>
   136bc:	mov	r4, r0
   136c0:	mvn	r0, #0
   136c4:	bl	11a3c <elf_errmsg@plt>
   136c8:	mov	r2, r4
   136cc:	mov	r1, r7
   136d0:	mov	r3, r0
   136d4:	mov	r0, #1
   136d8:	bl	119a0 <error@plt>
   136dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136e0:	movw	r4, #45448	; 0xb188
   136e4:	movt	r4, #2
   136e8:	mov	r8, r2
   136ec:	sub	sp, sp, #100	; 0x64
   136f0:	mov	r9, r1
   136f4:	ldr	r2, [r4]
   136f8:	mov	r1, #0
   136fc:	str	r4, [sp, #4]
   13700:	str	r3, [sp]
   13704:	str	r0, [sp, #16]
   13708:	ldr	r4, [sp, #136]	; 0x88
   1370c:	str	r2, [sp, #92]	; 0x5c
   13710:	ldr	r5, [sp, #140]	; 0x8c
   13714:	bl	1197c <elf_getdata@plt>
   13718:	ldr	r3, [r8, #4]
   1371c:	cmp	r3, #9
   13720:	mov	fp, r0
   13724:	beq	13a30 <__assert_fail@plt+0x1dc0>
   13728:	bhi	138f4 <__assert_fail@plt+0x1c84>
   1372c:	cmp	r3, #4
   13730:	beq	13b00 <__assert_fail@plt+0x1e90>
   13734:	cmp	r3, #5
   13738:	bne	139fc <__assert_fail@plt+0x1d8c>
   1373c:	ldrd	r6, [r8, #56]	; 0x38
   13740:	orrs	ip, r6, r7
   13744:	beq	13da8 <__assert_fail@plt+0x2138>
   13748:	ldrd	r2, [r5]
   1374c:	orrs	r0, r2, r3
   13750:	beq	13d94 <__assert_fail@plt+0x2124>
   13754:	ldrd	r0, [r4]
   13758:	bl	17b54 <__assert_fail@plt+0x5ee4>
   1375c:	ldrd	r4, [r8, #32]
   13760:	mov	r2, r6
   13764:	mov	r3, r7
   13768:	strd	r0, [sp, #8]
   1376c:	mov	r0, r4
   13770:	mov	r1, r5
   13774:	bl	17b54 <__assert_fail@plt+0x5ee4>
   13778:	ldr	r2, [fp, #12]
   1377c:	mov	r3, #0
   13780:	cmp	r5, r3
   13784:	cmpeq	r4, r2
   13788:	bne	13d78 <__assert_fail@plt+0x2108>
   1378c:	cmp	r7, #0
   13790:	cmpeq	r6, #4
   13794:	beq	13bec <__assert_fail@plt+0x1f7c>
   13798:	cmp	r7, #0
   1379c:	cmpeq	r6, #8
   137a0:	bne	13be8 <__assert_fail@plt+0x1f78>
   137a4:	ldr	r6, [fp]
   137a8:	add	r2, r6, #16
   137ac:	ldrd	r4, [r6]
   137b0:	ldr	r7, [r6, #8]
   137b4:	add	r3, r7, r4
   137b8:	lsl	r8, r4, #3
   137bc:	add	r3, r3, #2
   137c0:	add	r2, r2, r8
   137c4:	cmp	r0, r3
   137c8:	str	r2, [sp, #20]
   137cc:	bne	13d5c <__assert_fail@plt+0x20ec>
   137d0:	ldr	ip, [sp, #8]
   137d4:	add	r3, r4, #2
   137d8:	mov	r1, #8
   137dc:	add	sl, r3, ip
   137e0:	mov	r0, sl
   137e4:	bl	17a5c <__assert_fail@plt+0x5dec>
   137e8:	cmp	r4, #0
   137ec:	mvn	r2, #0
   137f0:	mov	r3, #0
   137f4:	and	r4, r4, r2
   137f8:	and	r5, r5, r3
   137fc:	mov	r9, r0
   13800:	add	ip, r0, #16
   13804:	ldrd	r0, [sp, #8]
   13808:	strd	r4, [r9]
   1380c:	and	r3, r3, r1
   13810:	and	r2, r2, r0
   13814:	add	r1, ip, r8
   13818:	strd	r2, [r9, #8]
   1381c:	beq	13858 <__assert_fail@plt+0x1be8>
   13820:	add	r6, r6, #8
   13824:	ldr	lr, [sp]
   13828:	add	r8, r6, r8
   1382c:	mov	r0, r9
   13830:	mov	ip, #0
   13834:	ldrd	r2, [r6, #8]!
   13838:	add	r0, r0, #8
   1383c:	orrs	r4, r2, r3
   13840:	subne	r2, r2, #-1073741823	; 0xc0000001
   13844:	ldrne	r3, [lr, r2, lsl #2]
   13848:	strne	ip, [r0, #12]
   1384c:	strne	r3, [r0, #8]
   13850:	cmp	r6, r8
   13854:	bne	13834 <__assert_fail@plt+0x1bc4>
   13858:	cmp	r7, #1
   1385c:	bls	138a8 <__assert_fail@plt+0x1c38>
   13860:	sub	lr, r7, #-1073741823	; 0xc0000001
   13864:	ldr	ip, [sp, #20]
   13868:	ldr	r5, [sp]
   1386c:	mov	r0, #0
   13870:	lsl	lr, lr, #2
   13874:	mov	r4, r0
   13878:	ldrd	r2, [ip, #8]!
   1387c:	orrs	r6, r2, r3
   13880:	beq	1389c <__assert_fail@plt+0x1c2c>
   13884:	ldr	r3, [r5, r0]
   13888:	sub	r2, r2, #-1073741823	; 0xc0000001
   1388c:	ldr	r6, [r5, r2, lsl #2]
   13890:	add	r2, r1, r3, lsl #3
   13894:	str	r6, [r1, r3, lsl #3]
   13898:	str	r4, [r2, #4]
   1389c:	add	r0, r0, #4
   138a0:	cmp	r0, lr
   138a4:	bne	13878 <__assert_fail@plt+0x1c08>
   138a8:	movw	r4, #45472	; 0xb1a0
   138ac:	movt	r4, #2
   138b0:	mov	r0, #8
   138b4:	ldr	r5, [r4]
   138b8:	bl	17a28 <__assert_fail@plt+0x5db8>
   138bc:	lsl	r3, sl, #3
   138c0:	str	r9, [r0]
   138c4:	str	r5, [r0, #4]
   138c8:	str	r0, [r4]
   138cc:	str	r3, [fp, #12]
   138d0:	str	r9, [fp]
   138d4:	mov	r0, fp
   138d8:	mov	r1, #5
   138dc:	mov	r2, #1
   138e0:	bl	118b0 <elf_flagdata@plt>
   138e4:	ldr	r0, [sp, #16]
   138e8:	add	r1, fp, #12
   138ec:	bl	13478 <__assert_fail@plt+0x1808>
   138f0:	b	139e0 <__assert_fail@plt+0x1d70>
   138f4:	cmp	r3, #17
   138f8:	beq	13ba8 <__assert_fail@plt+0x1f38>
   138fc:	cmn	r3, #-1879048191	; 0x90000001
   13900:	bne	139fc <__assert_fail@plt+0x1d8c>
   13904:	ldrd	r6, [r8, #56]	; 0x38
   13908:	orrs	ip, r6, r7
   1390c:	beq	13d48 <__assert_fail@plt+0x20d8>
   13910:	ldrd	r2, [r5]
   13914:	orrs	r0, r2, r3
   13918:	beq	13d94 <__assert_fail@plt+0x2124>
   1391c:	ldrd	r0, [r4]
   13920:	bl	17b54 <__assert_fail@plt+0x5ee4>
   13924:	mov	r2, r6
   13928:	mov	r3, r7
   1392c:	mov	r4, r0
   13930:	ldrd	r0, [r8, #32]
   13934:	bl	17b54 <__assert_fail@plt+0x5ee4>
   13938:	cmp	r4, r0
   1393c:	mov	r5, r0
   13940:	bcc	13d18 <__assert_fail@plt+0x20a8>
   13944:	mov	r0, r4
   13948:	mov	r1, #2
   1394c:	bl	17a5c <__assert_fail@plt+0x5dec>
   13950:	cmp	r5, #1
   13954:	mov	r6, r0
   13958:	bls	13990 <__assert_fail@plt+0x1d20>
   1395c:	ldr	ip, [sp]
   13960:	mov	r7, #1
   13964:	sub	sl, ip, #4
   13968:	ldr	r2, [sl, #4]!
   1396c:	mov	r0, fp
   13970:	mov	r1, r7
   13974:	add	r2, r6, r2, lsl #1
   13978:	bl	118c8 <gelf_getversym@plt>
   1397c:	subs	r9, r0, #0
   13980:	beq	13ce4 <__assert_fail@plt+0x2074>
   13984:	add	r7, r7, #1
   13988:	cmp	r5, r7
   1398c:	bhi	13968 <__assert_fail@plt+0x1cf8>
   13990:	movw	r5, #45472	; 0xb1a0
   13994:	movt	r5, #2
   13998:	mov	r0, #8
   1399c:	ldr	r7, [r5]
   139a0:	bl	17a28 <__assert_fail@plt+0x5db8>
   139a4:	ldr	ip, [r8, #56]	; 0x38
   139a8:	mov	r1, #5
   139ac:	mov	r2, #1
   139b0:	mul	r4, ip, r4
   139b4:	mov	r3, r0
   139b8:	mov	r0, fp
   139bc:	str	r7, [r3, #4]
   139c0:	str	r6, [r3]
   139c4:	str	r3, [r5]
   139c8:	str	r4, [fp, #12]
   139cc:	str	r6, [fp]
   139d0:	bl	118b0 <elf_flagdata@plt>
   139d4:	ldr	r0, [sp, #16]
   139d8:	add	r1, fp, #12
   139dc:	bl	13478 <__assert_fail@plt+0x1808>
   139e0:	ldr	r4, [sp, #4]
   139e4:	ldr	r2, [sp, #92]	; 0x5c
   139e8:	ldr	r3, [r4]
   139ec:	cmp	r2, r3
   139f0:	bne	13d14 <__assert_fail@plt+0x20a4>
   139f4:	add	sp, sp, #100	; 0x64
   139f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139fc:	mov	r2, #5
   13a00:	movw	r1, #36596	; 0x8ef4
   13a04:	mov	r0, #0
   13a08:	movt	r1, #1
   13a0c:	bl	118d4 <dcgettext@plt>
   13a10:	mov	r4, r0
   13a14:	mov	r0, r9
   13a18:	bl	11be0 <elf_ndxscn@plt>
   13a1c:	mov	r2, r4
   13a20:	mov	r1, #0
   13a24:	mov	r3, r0
   13a28:	mov	r0, #1
   13a2c:	bl	119a0 <error@plt>
   13a30:	ldrd	r2, [r8, #56]	; 0x38
   13a34:	orrs	ip, r2, r3
   13a38:	beq	13d34 <__assert_fail@plt+0x20c4>
   13a3c:	ldrd	r0, [r8, #32]
   13a40:	bl	17b54 <__assert_fail@plt+0x5ee4>
   13a44:	orrs	r2, r0, r1
   13a48:	addne	r9, sp, #24
   13a4c:	movne	sl, #0
   13a50:	bne	13a7c <__assert_fail@plt+0x1e0c>
   13a54:	b	139e0 <__assert_fail@plt+0x1d70>
   13a58:	ldrd	r0, [r8, #32]
   13a5c:	add	sl, sl, #1
   13a60:	ldrd	r2, [r8, #56]	; 0x38
   13a64:	mov	r5, #0
   13a68:	bl	17b54 <__assert_fail@plt+0x5ee4>
   13a6c:	mov	r4, sl
   13a70:	cmp	r5, r1
   13a74:	cmpeq	r4, r0
   13a78:	bcs	139e0 <__assert_fail@plt+0x1d70>
   13a7c:	mov	r1, sl
   13a80:	mov	r2, r9
   13a84:	mov	r0, fp
   13a88:	bl	11ba4 <gelf_getrel@plt>
   13a8c:	ldr	r3, [r0, #12]
   13a90:	mov	r2, r0
   13a94:	ldr	r1, [r0, #8]
   13a98:	cmp	r3, #0
   13a9c:	beq	13abc <__assert_fail@plt+0x1e4c>
   13aa0:	ldr	r4, [sp]
   13aa4:	sub	r3, r3, #-1073741823	; 0xc0000001
   13aa8:	mov	r6, #0
   13aac:	ldr	r7, [r4, r3, lsl #2]
   13ab0:	adds	r4, r6, r1
   13ab4:	adc	r5, r7, #0
   13ab8:	strd	r4, [r0, #8]
   13abc:	mov	r0, fp
   13ac0:	mov	r1, sl
   13ac4:	bl	11880 <gelf_update_rel@plt>
   13ac8:	subs	r4, r0, #0
   13acc:	bne	13a58 <__assert_fail@plt+0x1de8>
   13ad0:	movw	r1, #36272	; 0x8db0
   13ad4:	movt	r1, #1
   13ad8:	mov	r2, #5
   13adc:	bl	118d4 <dcgettext@plt>
   13ae0:	mov	r5, r0
   13ae4:	mvn	r0, #0
   13ae8:	bl	11a3c <elf_errmsg@plt>
   13aec:	mov	r2, r5
   13af0:	mov	r1, r4
   13af4:	mov	r3, r0
   13af8:	mov	r0, #1
   13afc:	bl	119a0 <error@plt>
   13b00:	ldrd	r2, [r8, #56]	; 0x38
   13b04:	orrs	r6, r2, r3
   13b08:	beq	13de8 <__assert_fail@plt+0x2178>
   13b0c:	ldrd	r0, [r8, #32]
   13b10:	bl	17b54 <__assert_fail@plt+0x5ee4>
   13b14:	orrs	ip, r0, r1
   13b18:	addne	r9, sp, #24
   13b1c:	movne	r6, #0
   13b20:	movne	r7, fp
   13b24:	bne	13b50 <__assert_fail@plt+0x1ee0>
   13b28:	b	139e0 <__assert_fail@plt+0x1d70>
   13b2c:	ldrd	r0, [r8, #32]
   13b30:	add	r6, r6, #1
   13b34:	ldrd	r2, [r8, #56]	; 0x38
   13b38:	mov	r5, #0
   13b3c:	bl	17b54 <__assert_fail@plt+0x5ee4>
   13b40:	mov	r4, r6
   13b44:	cmp	r5, r1
   13b48:	cmpeq	r4, r0
   13b4c:	bcs	139e0 <__assert_fail@plt+0x1d70>
   13b50:	mov	r1, r6
   13b54:	mov	r2, r9
   13b58:	mov	r0, r7
   13b5c:	bl	11a6c <gelf_getrela@plt>
   13b60:	ldr	r3, [r0, #12]
   13b64:	mov	r2, r0
   13b68:	ldr	r1, [r0, #8]
   13b6c:	cmp	r3, #0
   13b70:	beq	13b90 <__assert_fail@plt+0x1f20>
   13b74:	ldr	r4, [sp]
   13b78:	sub	r3, r3, #-1073741823	; 0xc0000001
   13b7c:	mov	sl, #0
   13b80:	ldr	fp, [r4, r3, lsl #2]
   13b84:	adds	r4, sl, r1
   13b88:	adc	r5, fp, #0
   13b8c:	strd	r4, [r0, #8]
   13b90:	mov	r0, r7
   13b94:	mov	r1, r6
   13b98:	bl	11c1c <gelf_update_rela@plt>
   13b9c:	subs	r4, r0, #0
   13ba0:	bne	13b2c <__assert_fail@plt+0x1ebc>
   13ba4:	b	13ad0 <__assert_fail@plt+0x1e60>
   13ba8:	ldr	r0, [sp, #16]
   13bac:	add	r1, sp, #24
   13bb0:	bl	11850 <gelf_getshdr@plt>
   13bb4:	subs	r4, r0, #0
   13bb8:	beq	13dd8 <__assert_fail@plt+0x2168>
   13bbc:	ldr	r3, [r4, #44]	; 0x2c
   13bc0:	cmp	r3, #0
   13bc4:	beq	139e0 <__assert_fail@plt+0x1d70>
   13bc8:	ldr	r6, [sp]
   13bcc:	sub	r3, r3, #-1073741823	; 0xc0000001
   13bd0:	ldr	r0, [sp, #16]
   13bd4:	mov	r1, r4
   13bd8:	ldr	r3, [r6, r3, lsl #2]
   13bdc:	str	r3, [r4, #44]	; 0x2c
   13be0:	bl	13438 <__assert_fail@plt+0x17c8>
   13be4:	b	139e0 <__assert_fail@plt+0x1d70>
   13be8:	bl	11c4c <abort@plt>
   13bec:	ldr	r5, [fp]
   13bf0:	add	r7, r5, #8
   13bf4:	ldm	r5, {r4, r8}
   13bf8:	add	r3, r4, r8
   13bfc:	add	r3, r3, #2
   13c00:	lsl	r9, r4, #2
   13c04:	cmp	r0, r3
   13c08:	add	r7, r7, r9
   13c0c:	bne	13dbc <__assert_fail@plt+0x214c>
   13c10:	ldr	r2, [sp, #8]
   13c14:	add	r6, r4, #2
   13c18:	mov	r1, #4
   13c1c:	add	r6, r6, r2
   13c20:	mov	r0, r6
   13c24:	bl	17a5c <__assert_fail@plt+0x5dec>
   13c28:	ldr	r3, [sp, #8]
   13c2c:	cmp	r4, #0
   13c30:	add	r2, r0, #8
   13c34:	mov	sl, r0
   13c38:	str	r4, [r0]
   13c3c:	add	r2, r2, r9
   13c40:	str	r3, [r0, #4]
   13c44:	beq	13c78 <__assert_fail@plt+0x2008>
   13c48:	add	r9, r9, r0
   13c4c:	mov	r3, r0
   13c50:	ldr	r0, [sp]
   13c54:	add	r5, r5, #4
   13c58:	ldr	r1, [r5, #4]!
   13c5c:	add	r3, r3, #4
   13c60:	cmp	r1, #0
   13c64:	subne	r1, r1, #-1073741823	; 0xc0000001
   13c68:	ldrne	r1, [r0, r1, lsl #2]
   13c6c:	strne	r1, [r3, #4]
   13c70:	cmp	r3, r9
   13c74:	bne	13c58 <__assert_fail@plt+0x1fe8>
   13c78:	cmp	r8, #1
   13c7c:	bls	13cb4 <__assert_fail@plt+0x2044>
   13c80:	sub	r0, r8, #-1073741823	; 0xc0000001
   13c84:	ldr	ip, [sp]
   13c88:	mov	r3, #0
   13c8c:	lsl	r0, r0, #2
   13c90:	ldr	r1, [r7, #4]!
   13c94:	cmp	r1, #0
   13c98:	subne	r1, r1, #-1073741823	; 0xc0000001
   13c9c:	ldrne	lr, [ip, r3]
   13ca0:	add	r3, r3, #4
   13ca4:	ldrne	r1, [ip, r1, lsl #2]
   13ca8:	strne	r1, [r2, lr, lsl #2]
   13cac:	cmp	r3, r0
   13cb0:	bne	13c90 <__assert_fail@plt+0x2020>
   13cb4:	movw	r4, #45472	; 0xb1a0
   13cb8:	movt	r4, #2
   13cbc:	mov	r0, #8
   13cc0:	lsl	r6, r6, #2
   13cc4:	ldr	r5, [r4]
   13cc8:	bl	17a28 <__assert_fail@plt+0x5db8>
   13ccc:	str	sl, [r0]
   13cd0:	str	r5, [r0, #4]
   13cd4:	str	r0, [r4]
   13cd8:	str	r6, [fp, #12]
   13cdc:	str	sl, [fp]
   13ce0:	b	138d4 <__assert_fail@plt+0x1c64>
   13ce4:	mov	r2, #5
   13ce8:	movw	r1, #36564	; 0x8ed4
   13cec:	movt	r1, #1
   13cf0:	bl	118d4 <dcgettext@plt>
   13cf4:	mov	r4, r0
   13cf8:	mvn	r0, #0
   13cfc:	bl	11a3c <elf_errmsg@plt>
   13d00:	mov	r2, r4
   13d04:	mov	r1, r9
   13d08:	mov	r3, r0
   13d0c:	mov	r0, #1
   13d10:	bl	119a0 <error@plt>
   13d14:	bl	118ec <__stack_chk_fail@plt>
   13d18:	movw	r0, #36548	; 0x8ec4
   13d1c:	movw	r1, #35020	; 0x88cc
   13d20:	movt	r0, #1
   13d24:	movt	r1, #1
   13d28:	movw	r2, #559	; 0x22f
   13d2c:	ldr	r3, [pc, #200]	; 13dfc <__assert_fail@plt+0x218c>
   13d30:	bl	11c70 <__assert_fail@plt>
   13d34:	movw	r2, #36232	; 0x8d88
   13d38:	mov	r0, #1
   13d3c:	movt	r2, #1
   13d40:	mov	r1, #0
   13d44:	bl	119a0 <error@plt>
   13d48:	movw	r2, #36500	; 0x8e94
   13d4c:	mov	r0, #1
   13d50:	movt	r2, #1
   13d54:	mov	r1, #0
   13d58:	bl	119a0 <error@plt>
   13d5c:	movw	r0, #36468	; 0x8e74
   13d60:	movw	r1, #35020	; 0x88cc
   13d64:	movt	r0, #1
   13d68:	movt	r1, #1
   13d6c:	mov	r2, #536	; 0x218
   13d70:	ldr	r3, [pc, #132]	; 13dfc <__assert_fail@plt+0x218c>
   13d74:	bl	11c70 <__assert_fail@plt>
   13d78:	movw	r0, #36436	; 0x8e54
   13d7c:	movw	r1, #35020	; 0x88cc
   13d80:	movt	r0, #1
   13d84:	movt	r1, #1
   13d88:	movw	r2, #499	; 0x1f3
   13d8c:	ldr	r3, [pc, #104]	; 13dfc <__assert_fail@plt+0x218c>
   13d90:	bl	11c70 <__assert_fail@plt>
   13d94:	movw	r2, #36392	; 0x8e28
   13d98:	mov	r0, #1
   13d9c:	movt	r2, #1
   13da0:	mov	r1, #0
   13da4:	bl	119a0 <error@plt>
   13da8:	movw	r2, #36348	; 0x8dfc
   13dac:	mov	r0, #1
   13db0:	movt	r2, #1
   13db4:	mov	r1, #0
   13db8:	bl	119a0 <error@plt>
   13dbc:	movw	r0, #36468	; 0x8e74
   13dc0:	movw	r1, #35020	; 0x88cc
   13dc4:	movt	r0, #1
   13dc8:	movt	r1, #1
   13dcc:	movw	r2, #533	; 0x215
   13dd0:	ldr	r3, [pc, #36]	; 13dfc <__assert_fail@plt+0x218c>
   13dd4:	bl	11c70 <__assert_fail@plt>
   13dd8:	movw	r1, #35892	; 0x8c34
   13ddc:	mov	r2, #5
   13de0:	movt	r1, #1
   13de4:	b	13adc <__assert_fail@plt+0x1e6c>
   13de8:	movw	r2, #36304	; 0x8dd0
   13dec:	mov	r0, #1
   13df0:	movt	r2, #1
   13df4:	mov	r1, #0
   13df8:	bl	119a0 <error@plt>
   13dfc:	andeq	r8, r1, r0, lsl #15
   13e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e04:	movw	r8, #45448	; 0xb188
   13e08:	movt	r8, #2
   13e0c:	mov	r5, r1
   13e10:	sub	sp, sp, #92	; 0x5c
   13e14:	mov	r6, r0
   13e18:	ldr	r1, [r8]
   13e1c:	mov	r0, r5
   13e20:	mov	fp, r3
   13e24:	add	sl, r2, #32
   13e28:	add	r9, r2, #56	; 0x38
   13e2c:	mov	r4, #0
   13e30:	str	r1, [sp, #84]	; 0x54
   13e34:	bl	11be0 <elf_ndxscn@plt>
   13e38:	mov	r7, r0
   13e3c:	mov	r1, r4
   13e40:	mov	r0, r6
   13e44:	bl	11b8c <elf_nextscn@plt>
   13e48:	subs	r4, r0, #0
   13e4c:	beq	13ea4 <__assert_fail@plt+0x2234>
   13e50:	cmp	r5, r4
   13e54:	beq	13e3c <__assert_fail@plt+0x21cc>
   13e58:	add	r1, sp, #16
   13e5c:	bl	11850 <gelf_getshdr@plt>
   13e60:	subs	ip, r0, #0
   13e64:	beq	13ebc <__assert_fail@plt+0x224c>
   13e68:	ldr	r3, [ip, #4]
   13e6c:	cmp	r3, #17
   13e70:	cmpne	r3, #8
   13e74:	beq	13e3c <__assert_fail@plt+0x21cc>
   13e78:	ldr	r3, [ip, #40]	; 0x28
   13e7c:	cmp	r7, r3
   13e80:	bne	13e3c <__assert_fail@plt+0x21cc>
   13e84:	str	sl, [sp]
   13e88:	mov	r2, ip
   13e8c:	str	r9, [sp, #4]
   13e90:	mov	r0, r4
   13e94:	mov	r1, r4
   13e98:	mov	r3, fp
   13e9c:	bl	136dc <__assert_fail@plt+0x1a6c>
   13ea0:	b	13e3c <__assert_fail@plt+0x21cc>
   13ea4:	ldr	r2, [sp, #84]	; 0x54
   13ea8:	ldr	r3, [r8]
   13eac:	cmp	r2, r3
   13eb0:	bne	13ef4 <__assert_fail@plt+0x2284>
   13eb4:	add	sp, sp, #92	; 0x5c
   13eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ebc:	mov	r2, #5
   13ec0:	movw	r1, #35892	; 0x8c34
   13ec4:	movt	r1, #1
   13ec8:	str	ip, [sp, #12]
   13ecc:	bl	118d4 <dcgettext@plt>
   13ed0:	mov	r4, r0
   13ed4:	mvn	r0, #0
   13ed8:	bl	11a3c <elf_errmsg@plt>
   13edc:	ldr	ip, [sp, #12]
   13ee0:	mov	r2, r4
   13ee4:	mov	r1, ip
   13ee8:	mov	r3, r0
   13eec:	mov	r0, #1
   13ef0:	bl	119a0 <error@plt>
   13ef4:	bl	118ec <__stack_chk_fail@plt>
   13ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13efc:	add	fp, sp, #32
   13f00:	sub	sp, sp, #228	; 0xe4
   13f04:	movw	r6, #45448	; 0xb188
   13f08:	movt	r6, #2
   13f0c:	ldr	r7, [fp, #4]
   13f10:	mov	r5, r1
   13f14:	ldr	ip, [r6]
   13f18:	sub	r1, fp, #172	; 0xac
   13f1c:	str	r6, [fp, #-224]	; 0xffffff20
   13f20:	str	r7, [fp, #-220]	; 0xffffff24
   13f24:	mov	r7, r0
   13f28:	ldr	r0, [fp, #-220]	; 0xffffff24
   13f2c:	str	r2, [fp, #-232]	; 0xffffff18
   13f30:	str	r3, [fp, #-236]	; 0xffffff14
   13f34:	str	ip, [fp, #-40]	; 0xffffffd8
   13f38:	bl	11850 <gelf_getshdr@plt>
   13f3c:	ldr	r8, [fp, #8]
   13f40:	rsb	r6, r5, r8
   13f44:	subs	r9, r0, #0
   13f48:	str	r9, [fp, #-216]	; 0xffffff28
   13f4c:	beq	142d0 <__assert_fail@plt+0x2660>
   13f50:	ldr	ip, [fp, #-216]	; 0xffffff28
   13f54:	ldrd	r8, [ip, #56]	; 0x38
   13f58:	orrs	r0, r8, r9
   13f5c:	beq	142bc <__assert_fail@plt+0x264c>
   13f60:	ldr	r3, [fp, #-216]	; 0xffffff28
   13f64:	movw	r4, #45472	; 0xb1a0
   13f68:	movt	r4, #2
   13f6c:	ldrd	r2, [r3, #32]
   13f70:	strd	r2, [fp, #-204]	; 0xffffff34
   13f74:	mov	r2, r8
   13f78:	mov	r3, r9
   13f7c:	ldrd	r0, [fp, #-204]	; 0xffffff34
   13f80:	bl	17b54 <__assert_fail@plt+0x5ee4>
   13f84:	umull	r2, r3, r6, r8
   13f88:	ldr	ip, [fp, #-216]	; 0xffffff28
   13f8c:	mla	r3, r6, r9, r3
   13f90:	ldrd	r8, [fp, #-204]	; 0xffffff34
   13f94:	adds	r2, r2, r8
   13f98:	adc	r3, r3, r9
   13f9c:	strd	r2, [ip, #32]
   13fa0:	lsl	r1, r0, #2
   13fa4:	str	r0, [fp, #-212]	; 0xffffff2c
   13fa8:	add	r1, r1, #6
   13fac:	ldr	r0, [fp, #-220]	; 0xffffff24
   13fb0:	bic	r1, r1, #7
   13fb4:	sub	sp, sp, r1
   13fb8:	ldr	r1, [ip, #44]	; 0x2c
   13fbc:	add	r6, r1, r6
   13fc0:	mov	r1, ip
   13fc4:	str	r6, [ip, #44]	; 0x2c
   13fc8:	add	r6, sp, #8
   13fcc:	str	r6, [fp, #-228]	; 0xffffff1c
   13fd0:	bl	13438 <__assert_fail@plt+0x17c8>
   13fd4:	mov	r1, #0
   13fd8:	ldr	r0, [fp, #-220]	; 0xffffff24
   13fdc:	bl	1197c <elf_getdata@plt>
   13fe0:	ldr	r9, [fp, #-216]	; 0xffffff28
   13fe4:	mov	r6, r0
   13fe8:	ldr	r0, [r9, #32]
   13fec:	str	r0, [r6, #12]
   13ff0:	bl	17a28 <__assert_fail@plt+0x5db8>
   13ff4:	ldr	r9, [r4]
   13ff8:	mov	r8, r0
   13ffc:	mov	r0, #8
   14000:	str	r8, [r6]
   14004:	bl	17a28 <__assert_fail@plt+0x5db8>
   14008:	mov	r1, #0
   1400c:	mov	r3, r0
   14010:	mov	r0, r7
   14014:	stm	r3, {r8, r9}
   14018:	str	r3, [r4]
   1401c:	bl	1197c <elf_getdata@plt>
   14020:	cmp	r5, #0
   14024:	str	r0, [fp, #-208]	; 0xffffff30
   14028:	beq	140a4 <__assert_fail@plt+0x2434>
   1402c:	sub	r7, fp, #108	; 0x6c
   14030:	ldr	r8, [fp, #-228]	; 0xffffff1c
   14034:	mov	r4, #0
   14038:	sub	r9, fp, #196	; 0xc4
   1403c:	mov	r3, r7
   14040:	mov	sl, r4
   14044:	mov	r7, r8
   14048:	mov	r8, r3
   1404c:	mov	r1, #0
   14050:	mov	r2, r4
   14054:	mov	r3, r8
   14058:	str	r9, [sp]
   1405c:	ldr	r0, [fp, #-208]	; 0xffffff30
   14060:	str	sl, [fp, #-196]	; 0xffffff3c
   14064:	bl	11c28 <gelf_getsymshndx@plt>
   14068:	ldr	lr, [fp, #-196]	; 0xffffff3c
   1406c:	mov	r1, #0
   14070:	mov	r2, r4
   14074:	str	lr, [sp]
   14078:	mov	r3, r0
   1407c:	mov	r0, r6
   14080:	bl	118f8 <gelf_update_symshndx@plt>
   14084:	subs	r3, r0, #0
   14088:	beq	1423c <__assert_fail@plt+0x25cc>
   1408c:	cmp	r4, #0
   14090:	strne	r4, [r7, #-4]
   14094:	add	r4, r4, #1
   14098:	add	r7, r7, #4
   1409c:	cmp	r4, r5
   140a0:	bne	1404c <__assert_fail@plt+0x23dc>
   140a4:	ldr	ip, [fp, #8]
   140a8:	cmp	ip, r5
   140ac:	bls	1417c <__assert_fail@plt+0x250c>
   140b0:	mov	r4, r5
   140b4:	str	r5, [fp, #-240]	; 0xffffff10
   140b8:	ldr	r5, [fp, #-232]	; 0xffffff18
   140bc:	mov	r8, #0
   140c0:	mov	r9, #3
   140c4:	sub	r7, fp, #108	; 0x6c
   140c8:	ldr	sl, [fp, #-236]	; 0xffffff14
   140cc:	str	r6, [fp, #-248]	; 0xffffff08
   140d0:	str	r7, [fp, #-236]	; 0xffffff14
   140d4:	mov	r1, r4
   140d8:	mov	r0, r5
   140dc:	bl	11bec <elf_getscn@plt>
   140e0:	ldr	r1, [fp, #-236]	; 0xffffff14
   140e4:	bl	11850 <gelf_getshdr@plt>
   140e8:	subs	r2, r0, #0
   140ec:	beq	142a8 <__assert_fail@plt+0x2638>
   140f0:	cmp	r4, #65280	; 0xff00
   140f4:	str	r8, [fp, #-192]	; 0xffffff40
   140f8:	uxthcc	r3, r4
   140fc:	str	r8, [fp, #-188]	; 0xffffff44
   14100:	movwcs	r3, #65535	; 0xffff
   14104:	cmp	sl, #0
   14108:	str	r8, [fp, #-184]	; 0xffffff48
   1410c:	mov	r1, #0
   14110:	str	r8, [fp, #-196]	; 0xffffff3c
   14114:	movne	r6, #0
   14118:	str	r8, [fp, #-180]	; 0xffffff4c
   1411c:	movne	r7, #0
   14120:	str	r8, [fp, #-176]	; 0xffffff50
   14124:	strb	r9, [fp, #-192]	; 0xffffff40
   14128:	ldrdeq	r6, [r2, #16]
   1412c:	cmp	r4, #65280	; 0xff00
   14130:	strh	r3, [fp, #-190]	; 0xffffff42
   14134:	mov	r2, r4
   14138:	movcs	r3, r4
   1413c:	movcc	r3, #0
   14140:	strd	r6, [fp, #-204]	; 0xffffff34
   14144:	ldrd	r6, [fp, #-204]	; 0xffffff34
   14148:	str	r3, [sp]
   1414c:	sub	r3, fp, #196	; 0xc4
   14150:	ldr	r0, [fp, #-248]	; 0xffffff08
   14154:	strd	r6, [fp, #-188]	; 0xffffff44
   14158:	bl	118f8 <gelf_update_symshndx@plt>
   1415c:	subs	r3, r0, #0
   14160:	beq	14274 <__assert_fail@plt+0x2604>
   14164:	ldr	r7, [fp, #8]
   14168:	add	r4, r4, #1
   1416c:	cmp	r7, r4
   14170:	bhi	140d4 <__assert_fail@plt+0x2464>
   14174:	ldr	r6, [fp, #-248]	; 0xffffff08
   14178:	ldr	r5, [fp, #-240]	; 0xffffff10
   1417c:	ldr	r7, [fp, #-212]	; 0xffffff2c
   14180:	cmp	r5, r7
   14184:	bcs	14208 <__assert_fail@plt+0x2598>
   14188:	sub	r8, r5, #1
   1418c:	ldr	ip, [fp, #-228]	; 0xffffff1c
   14190:	sub	r7, fp, #108	; 0x6c
   14194:	ldr	r4, [fp, #8]
   14198:	add	r8, ip, r8, lsl #2
   1419c:	sub	r9, fp, #196	; 0xc4
   141a0:	mov	r3, r7
   141a4:	mov	sl, #0
   141a8:	mov	r7, r8
   141ac:	mov	r8, r3
   141b0:	mov	r1, #0
   141b4:	mov	r2, r5
   141b8:	mov	r3, r8
   141bc:	str	r9, [sp]
   141c0:	ldr	r0, [fp, #-208]	; 0xffffff30
   141c4:	str	sl, [fp, #-196]	; 0xffffff3c
   141c8:	bl	11c28 <gelf_getsymshndx@plt>
   141cc:	ldr	lr, [fp, #-196]	; 0xffffff3c
   141d0:	mov	r1, #0
   141d4:	mov	r2, r4
   141d8:	str	lr, [sp]
   141dc:	mov	r3, r0
   141e0:	mov	r0, r6
   141e4:	bl	118f8 <gelf_update_symshndx@plt>
   141e8:	subs	r3, r0, #0
   141ec:	beq	1423c <__assert_fail@plt+0x25cc>
   141f0:	ldr	ip, [fp, #-212]	; 0xffffff2c
   141f4:	add	r5, r5, #1
   141f8:	str	r4, [r7], #4
   141fc:	add	r4, r4, #1
   14200:	cmp	ip, r5
   14204:	bhi	141b0 <__assert_fail@plt+0x2540>
   14208:	ldr	r0, [fp, #-232]	; 0xffffff18
   1420c:	ldr	r2, [fp, #-216]	; 0xffffff28
   14210:	ldr	r3, [fp, #-228]	; 0xffffff1c
   14214:	ldr	r1, [fp, #-220]	; 0xffffff24
   14218:	bl	13e00 <__assert_fail@plt+0x2190>
   1421c:	ldr	r8, [fp, #-224]	; 0xffffff20
   14220:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14224:	mov	r0, r6
   14228:	ldr	r3, [r8]
   1422c:	cmp	r2, r3
   14230:	bne	14300 <__assert_fail@plt+0x2690>
   14234:	sub	sp, fp, #32
   14238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1423c:	mov	r2, #5
   14240:	movw	r1, #36704	; 0x8f60
   14244:	movt	r1, #1
   14248:	str	r3, [fp, #-244]	; 0xffffff0c
   1424c:	bl	118d4 <dcgettext@plt>
   14250:	mov	r4, r0
   14254:	mvn	r0, #0
   14258:	bl	11a3c <elf_errmsg@plt>
   1425c:	ldr	ip, [fp, #-244]	; 0xffffff0c
   14260:	mov	r2, r4
   14264:	mov	r1, ip
   14268:	mov	r3, r0
   1426c:	mov	r0, #1
   14270:	bl	119a0 <error@plt>
   14274:	movw	r1, #36704	; 0x8f60
   14278:	movt	r1, #1
   1427c:	mov	sl, r3
   14280:	mov	r2, #5
   14284:	bl	118d4 <dcgettext@plt>
   14288:	mov	r4, r0
   1428c:	mvn	r0, #0
   14290:	bl	11a3c <elf_errmsg@plt>
   14294:	mov	r2, r4
   14298:	mov	r1, sl
   1429c:	mov	r3, r0
   142a0:	mov	r0, #1
   142a4:	bl	119a0 <error@plt>
   142a8:	mov	sl, r2
   142ac:	movw	r1, #35892	; 0x8c34
   142b0:	mov	r2, #5
   142b4:	movt	r1, #1
   142b8:	b	14284 <__assert_fail@plt+0x2614>
   142bc:	movw	r2, #36652	; 0x8f2c
   142c0:	mov	r0, #1
   142c4:	movt	r2, #1
   142c8:	mov	r1, #0
   142cc:	bl	119a0 <error@plt>
   142d0:	mov	r2, #5
   142d4:	movw	r1, #35892	; 0x8c34
   142d8:	movt	r1, #1
   142dc:	bl	118d4 <dcgettext@plt>
   142e0:	mov	r4, r0
   142e4:	mvn	r0, #0
   142e8:	bl	11a3c <elf_errmsg@plt>
   142ec:	mov	r2, r4
   142f0:	ldr	r1, [fp, #-216]	; 0xffffff28
   142f4:	mov	r3, r0
   142f8:	mov	r0, #1
   142fc:	bl	119a0 <error@plt>
   14300:	bl	118ec <__stack_chk_fail@plt>
   14304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14308:	movw	ip, #45448	; 0xb188
   1430c:	sub	sp, sp, #140	; 0x8c
   14310:	movt	ip, #2
   14314:	mov	r8, r0
   14318:	str	r2, [sp, #16]
   1431c:	str	ip, [sp, #12]
   14320:	ldr	r2, [ip]
   14324:	ldr	ip, [sp, #180]	; 0xb4
   14328:	str	r1, [sp, #24]
   1432c:	mov	r1, #0
   14330:	ldr	r0, [sp, #16]
   14334:	str	ip, [sp, #20]
   14338:	str	r3, [sp, #28]
   1433c:	str	r2, [sp, #132]	; 0x84
   14340:	bl	1197c <elf_getdata@plt>
   14344:	mov	r1, #0
   14348:	mov	fp, r0
   1434c:	ldr	r0, [sp, #20]
   14350:	bl	1197c <elf_getdata@plt>
   14354:	ldr	ip, [sp, #184]	; 0xb8
   14358:	cmp	ip, #1
   1435c:	mov	r9, r0
   14360:	bls	144ac <__assert_fail@plt+0x283c>
   14364:	add	sl, sp, #36	; 0x24
   14368:	mov	r4, #1
   1436c:	mov	r7, #0
   14370:	movw	r6, #65535	; 0xffff
   14374:	b	143d0 <__assert_fail@plt+0x2760>
   14378:	ldrb	r3, [r5, #4]
   1437c:	and	r3, r3, #15
   14380:	cmp	r3, #3
   14384:	bne	1442c <__assert_fail@plt+0x27bc>
   14388:	ldrd	r2, [r2, #16]
   1438c:	cmp	r1, r6
   14390:	mov	r0, fp
   14394:	mov	r1, #0
   14398:	strne	r7, [sp, #36]	; 0x24
   1439c:	strd	r2, [r5, #8]
   143a0:	movne	r3, #0
   143a4:	moveq	r3, r4
   143a8:	mov	r2, r4
   143ac:	str	r3, [sp]
   143b0:	mov	r3, r5
   143b4:	bl	118f8 <gelf_update_symshndx@plt>
   143b8:	subs	r3, r0, #0
   143bc:	beq	14504 <__assert_fail@plt+0x2894>
   143c0:	ldr	ip, [sp, #184]	; 0xb8
   143c4:	add	r4, r4, #1
   143c8:	cmp	r4, ip
   143cc:	beq	144ac <__assert_fail@plt+0x283c>
   143d0:	str	sl, [sp]
   143d4:	mov	r0, r9
   143d8:	mov	r1, #0
   143dc:	mov	r2, r4
   143e0:	add	r3, sp, #40	; 0x28
   143e4:	str	r7, [sp, #36]	; 0x24
   143e8:	bl	11c28 <gelf_getsymshndx@plt>
   143ec:	subs	r5, r0, #0
   143f0:	beq	144d4 <__assert_fail@plt+0x2864>
   143f4:	mov	r1, r4
   143f8:	mov	r0, r8
   143fc:	bl	11bec <elf_getscn@plt>
   14400:	add	r1, sp, #64	; 0x40
   14404:	bl	11850 <gelf_getshdr@plt>
   14408:	subs	r2, r0, #0
   1440c:	beq	14518 <__assert_fail@plt+0x28a8>
   14410:	ldrh	r1, [r5, #6]
   14414:	cmp	r1, r6
   14418:	strne	r1, [sp, #36]	; 0x24
   1441c:	ldreq	r3, [sp, #36]	; 0x24
   14420:	movne	r3, r1
   14424:	cmp	r3, r4
   14428:	beq	14378 <__assert_fail@plt+0x2708>
   1442c:	ldr	ip, [sp, #184]	; 0xb8
   14430:	cmp	ip, r4
   14434:	beq	144ac <__assert_fail@plt+0x283c>
   14438:	ldr	ip, [sp, #188]	; 0xbc
   1443c:	cmp	ip, r4
   14440:	beq	14464 <__assert_fail@plt+0x27f4>
   14444:	ldr	ip, [sp, #192]	; 0xc0
   14448:	cmp	ip, r4
   1444c:	bne	144a4 <__assert_fail@plt+0x2834>
   14450:	ldr	ip, [sp, #188]	; 0xbc
   14454:	sub	r3, ip, #1
   14458:	ldr	ip, [sp, #192]	; 0xc0
   1445c:	cmp	ip, r3
   14460:	bne	144a4 <__assert_fail@plt+0x2834>
   14464:	ldr	r1, [sp, #176]	; 0xb0
   14468:	mov	r2, r8
   1446c:	ldr	ip, [sp, #16]
   14470:	ldr	r0, [sp, #20]
   14474:	str	r1, [sp, #4]
   14478:	mov	r1, r4
   1447c:	str	ip, [sp]
   14480:	ldr	r3, [sp, #24]
   14484:	bl	13ef8 <__assert_fail@plt+0x2288>
   14488:	ldr	ip, [sp, #12]
   1448c:	ldr	r2, [sp, #132]	; 0x84
   14490:	ldr	r3, [ip]
   14494:	cmp	r2, r3
   14498:	bne	14554 <__assert_fail@plt+0x28e4>
   1449c:	add	sp, sp, #140	; 0x8c
   144a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a4:	mov	r0, #0
   144a8:	b	14488 <__assert_fail@plt+0x2818>
   144ac:	ldr	ip, [sp, #16]
   144b0:	mov	r2, r8
   144b4:	ldr	r0, [sp, #20]
   144b8:	ldr	r1, [sp, #184]	; 0xb8
   144bc:	str	ip, [sp]
   144c0:	ldr	ip, [sp, #28]
   144c4:	ldr	r3, [sp, #24]
   144c8:	str	ip, [sp, #4]
   144cc:	bl	13ef8 <__assert_fail@plt+0x2288>
   144d0:	b	14488 <__assert_fail@plt+0x2818>
   144d4:	movw	r1, #35816	; 0x8be8
   144d8:	movt	r1, #1
   144dc:	mov	r2, #5
   144e0:	bl	118d4 <dcgettext@plt>
   144e4:	mov	r4, r0
   144e8:	mvn	r0, #0
   144ec:	bl	11a3c <elf_errmsg@plt>
   144f0:	mov	r2, r4
   144f4:	mov	r1, r5
   144f8:	mov	r3, r0
   144fc:	mov	r0, #1
   14500:	bl	119a0 <error@plt>
   14504:	movw	r1, #36704	; 0x8f60
   14508:	mov	r5, r3
   1450c:	mov	r2, #5
   14510:	movt	r1, #1
   14514:	b	144e0 <__assert_fail@plt+0x2870>
   14518:	mov	ip, r2
   1451c:	movw	r1, #35892	; 0x8c34
   14520:	mov	r2, #5
   14524:	movt	r1, #1
   14528:	str	ip, [sp, #8]
   1452c:	bl	118d4 <dcgettext@plt>
   14530:	mov	r4, r0
   14534:	mvn	r0, #0
   14538:	bl	11a3c <elf_errmsg@plt>
   1453c:	ldr	ip, [sp, #8]
   14540:	mov	r2, r4
   14544:	mov	r1, ip
   14548:	mov	r3, r0
   1454c:	mov	r0, #1
   14550:	bl	119a0 <error@plt>
   14554:	bl	118ec <__stack_chk_fail@plt>
   14558:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1455c:	mov	ip, r2
   14560:	ldrd	r4, [r0, #32]
   14564:	mov	r6, #2
   14568:	ldrd	r8, [r1, #32]
   1456c:	mov	r7, #0
   14570:	sub	sp, sp, #8
   14574:	eor	r2, r8, r4
   14578:	eor	r3, r9, r5
   1457c:	and	r2, r2, r6
   14580:	and	r3, r3, r7
   14584:	orrs	sl, r2, r3
   14588:	beq	145a8 <__assert_fail@plt+0x2938>
   1458c:	and	r4, r4, r6
   14590:	and	r5, r5, r7
   14594:	orrs	r3, r4, r5
   14598:	moveq	r0, #1
   1459c:	mvnne	r0, #0
   145a0:	add	sp, sp, #8
   145a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145a8:	and	r6, r6, r4
   145ac:	and	r7, r7, r5
   145b0:	orrs	sl, r6, r7
   145b4:	bne	14620 <__assert_fail@plt+0x29b0>
   145b8:	cmp	r5, r9
   145bc:	cmpeq	r4, r8
   145c0:	ldr	r7, [r1, #4]
   145c4:	ldr	r8, [r0, #4]
   145c8:	ldr	r6, [r0, #8]
   145cc:	ldr	ip, [r1, #8]
   145d0:	bcc	1466c <__assert_fail@plt+0x29fc>
   145d4:	bhi	14614 <__assert_fail@plt+0x29a4>
   145d8:	ldrd	r4, [r0, #56]	; 0x38
   145dc:	ldrd	r2, [r1, #56]	; 0x38
   145e0:	cmp	r5, r3
   145e4:	cmpeq	r4, r2
   145e8:	bcc	1466c <__assert_fail@plt+0x29fc>
   145ec:	bhi	14614 <__assert_fail@plt+0x29a4>
   145f0:	cmp	ip, #0
   145f4:	cmpne	r6, #0
   145f8:	movne	r0, r6
   145fc:	movne	r1, ip
   14600:	moveq	r0, r8
   14604:	moveq	r1, r7
   14608:	add	sp, sp, #8
   1460c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14610:	b	1185c <strcmp@plt>
   14614:	mov	r0, #1
   14618:	add	sp, sp, #8
   1461c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14620:	cmp	ip, #0
   14624:	ldr	ip, [r0]
   14628:	bne	14644 <__assert_fail@plt+0x29d4>
   1462c:	ldrd	r4, [r0, #40]	; 0x28
   14630:	ldrd	r2, [r1, #40]	; 0x28
   14634:	cmp	r5, r3
   14638:	cmpeq	r4, r2
   1463c:	bcc	1466c <__assert_fail@plt+0x29fc>
   14640:	bhi	14614 <__assert_fail@plt+0x29a4>
   14644:	mov	r0, ip
   14648:	str	r1, [sp, #4]
   1464c:	bl	11be0 <elf_ndxscn@plt>
   14650:	ldr	r1, [sp, #4]
   14654:	mov	r4, r0
   14658:	ldr	r0, [r1]
   1465c:	bl	11be0 <elf_ndxscn@plt>
   14660:	rsb	r0, r0, r4
   14664:	add	sp, sp, #8
   14668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1466c:	mvn	r0, #0
   14670:	b	145a0 <__assert_fail@plt+0x2930>
   14674:	mov	r2, #0
   14678:	b	14558 <__assert_fail@plt+0x28e8>
   1467c:	mov	r2, #1
   14680:	b	14558 <__assert_fail@plt+0x28e8>
   14684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14688:	add	fp, sp, #32
   1468c:	sub	sp, sp, #412	; 0x19c
   14690:	movw	r4, #45448	; 0xb188
   14694:	movt	r4, #2
   14698:	str	r1, [fp, #-336]	; 0xfffffeb0
   1469c:	sub	r1, fp, #264	; 0x108
   146a0:	ldr	r3, [r4]
   146a4:	str	r4, [fp, #-376]	; 0xfffffe88
   146a8:	str	r2, [fp, #-300]	; 0xfffffed4
   146ac:	str	r0, [fp, #-284]	; 0xfffffee4
   146b0:	str	r3, [fp, #-40]	; 0xffffffd8
   146b4:	bl	11c64 <elf_getshdrstrndx@plt>
   146b8:	subs	r4, r0, #0
   146bc:	movwne	r1, #36736	; 0x8f80
   146c0:	movne	r0, #0
   146c4:	movtne	r1, #1
   146c8:	bne	16b90 <__assert_fail@plt+0x4f20>
   146cc:	sub	r1, fp, #260	; 0x104
   146d0:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   146d4:	bl	11c64 <elf_getshdrstrndx@plt>
   146d8:	subs	r5, r0, #0
   146dc:	movwne	r1, #36736	; 0x8f80
   146e0:	movne	r0, r4
   146e4:	movtne	r1, #1
   146e8:	bne	16c04 <__assert_fail@plt+0x4f94>
   146ec:	sub	r1, fp, #256	; 0x100
   146f0:	ldr	r0, [fp, #-284]	; 0xfffffee4
   146f4:	bl	11bf8 <elf_getshdrnum@plt>
   146f8:	subs	r4, r0, #0
   146fc:	movwne	r1, #36796	; 0x8fbc
   14700:	movne	r0, r5
   14704:	movtne	r1, #1
   14708:	movne	r2, #5
   1470c:	bne	16c3c <__assert_fail@plt+0x4fcc>
   14710:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   14714:	sub	r1, fp, #244	; 0xf4
   14718:	bl	11bf8 <elf_getshdrnum@plt>
   1471c:	subs	r5, r0, #0
   14720:	bne	16bf8 <__assert_fail@plt+0x4f88>
   14724:	ldr	r3, [fp, #-244]	; 0xffffff0c
   14728:	ldr	r2, [fp, #-256]	; 0xffffff00
   1472c:	cmp	r3, r2
   14730:	bhi	16cb8 <__assert_fail@plt+0x5048>
   14734:	sub	r3, r3, #1
   14738:	mov	r2, #88	; 0x58
   1473c:	mov	r7, r5
   14740:	mov	r8, r2
   14744:	mul	r3, r2, r3
   14748:	mov	sl, r5
   1474c:	ldr	r4, [fp, #-336]	; 0xfffffeb0
   14750:	add	r3, r3, #8
   14754:	sub	sp, sp, r3
   14758:	add	r3, sp, #32
   1475c:	str	r3, [fp, #-248]	; 0xffffff08
   14760:	b	1476c <__assert_fail@plt+0x2afc>
   14764:	mla	r3, r8, r9, r3
   14768:	str	r0, [r3, #8]
   1476c:	mov	r1, r7
   14770:	mov	r0, r4
   14774:	bl	11b8c <elf_nextscn@plt>
   14778:	subs	r7, r0, #0
   1477c:	beq	147fc <__assert_fail@plt+0x2b8c>
   14780:	bl	11be0 <elf_ndxscn@plt>
   14784:	ldr	r1, [fp, #-248]	; 0xffffff08
   14788:	sub	r9, r0, #1
   1478c:	mov	r0, r7
   14790:	mul	r6, r8, r9
   14794:	add	r3, r6, #24
   14798:	add	r1, r1, r3
   1479c:	bl	11850 <gelf_getshdr@plt>
   147a0:	subs	r5, r0, #0
   147a4:	beq	16c60 <__assert_fail@plt+0x4ff0>
   147a8:	ldr	r2, [r5]
   147ac:	mov	r0, r4
   147b0:	ldr	r1, [fp, #-260]	; 0xfffffefc
   147b4:	bl	11934 <elf_strptr@plt>
   147b8:	ldr	r3, [fp, #-248]	; 0xffffff08
   147bc:	add	r2, r3, r6
   147c0:	cmp	r0, #0
   147c4:	str	r0, [r2, #4]
   147c8:	beq	16c74 <__assert_fail@plt+0x5004>
   147cc:	str	r7, [r3, r6]
   147d0:	ldr	r1, [r5, #4]
   147d4:	str	sl, [r2, #12]
   147d8:	cmp	r1, #17
   147dc:	str	sl, [r2, #16]
   147e0:	movne	r0, #0
   147e4:	bne	14764 <__assert_fail@plt+0x2af4>
   147e8:	mov	r1, r5
   147ec:	mov	r0, r4
   147f0:	bl	13598 <__assert_fail@plt+0x1928>
   147f4:	ldr	r3, [fp, #-248]	; 0xffffff08
   147f8:	b	14764 <__assert_fail@plt+0x2af4>
   147fc:	ldr	r5, [fp, #-300]	; 0xfffffed4
   14800:	movw	r2, #18044	; 0x467c
   14804:	ldr	r1, [fp, #-244]	; 0xffffff0c
   14808:	movt	r2, #1
   1480c:	movw	r3, #18036	; 0x4674
   14810:	movt	r3, #1
   14814:	ldrh	r0, [r5, #16]
   14818:	sub	r1, r1, #1
   1481c:	mov	r5, r7
   14820:	cmp	r0, #1
   14824:	ldr	r0, [fp, #-248]	; 0xffffff08
   14828:	moveq	r3, r2
   1482c:	mov	r2, #88	; 0x58
   14830:	bl	11bc8 <qsort@plt>
   14834:	ldr	lr, [fp, #-244]	; 0xffffff0c
   14838:	ldr	r3, [fp, #-248]	; 0xffffff08
   1483c:	mov	ip, #88	; 0x58
   14840:	sub	r2, lr, #2
   14844:	str	r7, [fp, #-356]	; 0xfffffe9c
   14848:	sub	lr, lr, #1
   1484c:	mov	r0, #2
   14850:	mla	ip, ip, r2, r3
   14854:	str	lr, [fp, #-240]	; 0xffffff10
   14858:	mov	r1, #0
   1485c:	add	ip, ip, #28
   14860:	b	14890 <__assert_fail@plt+0x2c20>
   14864:	ldrd	r2, [ip, #4]
   14868:	sub	r4, lr, #1
   1486c:	and	r2, r2, r0
   14870:	and	r3, r3, r1
   14874:	orrs	r6, r2, r3
   14878:	bne	14898 <__assert_fail@plt+0x2c28>
   1487c:	ldr	r3, [ip]
   14880:	mov	lr, r4
   14884:	cmp	r3, #2
   14888:	subeq	r5, ip, #28
   1488c:	sub	ip, ip, #88	; 0x58
   14890:	cmp	lr, #0
   14894:	bne	14864 <__assert_fail@plt+0x2bf4>
   14898:	ldr	r1, [fp, #-264]	; 0xfffffef8
   1489c:	ldr	r0, [fp, #-284]	; 0xfffffee4
   148a0:	str	lr, [fp, #-240]	; 0xffffff10
   148a4:	str	r5, [fp, #-356]	; 0xfffffe9c
   148a8:	bl	11bec <elf_getscn@plt>
   148ac:	mov	r1, #0
   148b0:	bl	1197c <elf_getdata@plt>
   148b4:	subs	r6, r0, #0
   148b8:	str	r6, [fp, #-312]	; 0xfffffec8
   148bc:	beq	16cd8 <__assert_fail@plt+0x5068>
   148c0:	mov	r6, r7
   148c4:	mov	r4, #0
   148c8:	str	r4, [fp, #-316]	; 0xfffffec4
   148cc:	str	r4, [fp, #-308]	; 0xfffffecc
   148d0:	str	r4, [fp, #-296]	; 0xfffffed8
   148d4:	str	r4, [fp, #-364]	; 0xfffffe94
   148d8:	mov	r1, r6
   148dc:	ldr	r0, [fp, #-284]	; 0xfffffee4
   148e0:	bl	11b8c <elf_nextscn@plt>
   148e4:	subs	r6, r0, #0
   148e8:	beq	14b2c <__assert_fail@plt+0x2ebc>
   148ec:	sub	r1, fp, #108	; 0x6c
   148f0:	bl	11850 <gelf_getshdr@plt>
   148f4:	subs	r7, r0, #0
   148f8:	beq	16d24 <__assert_fail@plt+0x50b4>
   148fc:	ldr	r3, [r7, #4]
   14900:	cmp	r3, #2
   14904:	ldreq	r7, [r7, #40]	; 0x28
   14908:	streq	r6, [fp, #-316]	; 0xfffffec4
   1490c:	streq	r7, [fp, #-296]	; 0xfffffed8
   14910:	beq	148d8 <__assert_fail@plt+0x2c68>
   14914:	mov	r0, r6
   14918:	bl	11be0 <elf_ndxscn@plt>
   1491c:	ldr	r2, [fp, #-264]	; 0xfffffef8
   14920:	cmp	r0, r2
   14924:	beq	148d8 <__assert_fail@plt+0x2c68>
   14928:	ldr	r5, [fp, #-296]	; 0xfffffed8
   1492c:	cmp	r5, r0
   14930:	beq	148d8 <__assert_fail@plt+0x2c68>
   14934:	ldr	r4, [fp, #-312]	; 0xfffffec8
   14938:	ldr	r1, [r7]
   1493c:	ldr	r3, [r4, #12]
   14940:	ldr	ip, [r4]
   14944:	cmp	r1, r3
   14948:	bcs	16abc <__assert_fail@plt+0x4e4c>
   1494c:	ldrd	r2, [r7, #8]
   14950:	add	ip, ip, r1
   14954:	mov	r0, #2
   14958:	mov	r1, #0
   1495c:	and	r2, r2, r0
   14960:	and	r3, r3, r1
   14964:	orrs	r1, r2, r3
   14968:	str	ip, [fp, #-292]	; 0xfffffedc
   1496c:	beq	149b0 <__assert_fail@plt+0x2d40>
   14970:	ldr	r4, [fp, #-300]	; 0xfffffed4
   14974:	ldrh	r3, [r4, #16]
   14978:	cmp	r3, #1
   1497c:	beq	14aec <__assert_fail@plt+0x2e7c>
   14980:	str	ip, [sp]
   14984:	mov	r0, r7
   14988:	ldr	r1, [fp, #-248]	; 0xffffff08
   1498c:	ldrd	r2, [fp, #4]
   14990:	str	r1, [sp, #4]
   14994:	ldr	r1, [fp, #-240]	; 0xffffff10
   14998:	str	r1, [sp, #8]
   1499c:	bl	12efc <__assert_fail@plt+0x128c>
   149a0:	subs	r8, r0, #0
   149a4:	beq	15ef8 <__assert_fail@plt+0x4288>
   149a8:	str	r6, [r8, #12]
   149ac:	b	148d8 <__assert_fail@plt+0x2c68>
   149b0:	ldr	r3, [r7, #4]
   149b4:	cmp	r3, #17
   149b8:	movne	r9, #0
   149bc:	beq	14f34 <__assert_fail@plt+0x32c4>
   149c0:	ldr	ip, [fp, #-244]	; 0xffffff0c
   149c4:	ldr	sl, [fp, #-240]	; 0xffffff10
   149c8:	sub	ip, ip, #1
   149cc:	ldr	r3, [fp, #-248]	; 0xffffff08
   149d0:	str	r6, [fp, #-332]	; 0xfffffeb4
   149d4:	mov	r5, ip
   149d8:	cmp	r5, sl
   149dc:	mov	r6, r3
   149e0:	bls	14a80 <__assert_fail@plt+0x2e10>
   149e4:	ldrd	r2, [r7, #8]
   149e8:	sub	r0, fp, #512	; 0x200
   149ec:	strd	r2, [r0, #236]	; 0xec
   149f0:	add	r4, r5, sl
   149f4:	mov	r1, #88	; 0x58
   149f8:	lsr	r4, r4, #1
   149fc:	mla	r8, r1, r4, r6
   14a00:	sub	r1, fp, #512	; 0x200
   14a04:	ldrd	r0, [r1, #236]	; 0xec
   14a08:	ldrd	r2, [r8, #32]
   14a0c:	ldr	lr, [r8, #4]
   14a10:	cmp	r1, r3
   14a14:	cmpeq	r0, r2
   14a18:	ldr	ip, [r8, #8]
   14a1c:	bcc	14a60 <__assert_fail@plt+0x2df0>
   14a20:	bhi	14a74 <__assert_fail@plt+0x2e04>
   14a24:	ldrd	r2, [r7, #32]
   14a28:	ldrd	r0, [r8, #56]	; 0x38
   14a2c:	cmp	r3, r1
   14a30:	cmpeq	r2, r0
   14a34:	bcc	14a60 <__assert_fail@plt+0x2df0>
   14a38:	bhi	14a74 <__assert_fail@plt+0x2e04>
   14a3c:	cmp	r9, #0
   14a40:	cmpne	ip, #0
   14a44:	movne	r1, ip
   14a48:	movne	r0, r9
   14a4c:	moveq	r1, lr
   14a50:	ldreq	r0, [fp, #-292]	; 0xfffffedc
   14a54:	bl	1185c <strcmp@plt>
   14a58:	cmp	r0, #0
   14a5c:	bge	14a70 <__assert_fail@plt+0x2e00>
   14a60:	cmp	r4, sl
   14a64:	bls	14a80 <__assert_fail@plt+0x2e10>
   14a68:	mov	r5, r4
   14a6c:	b	149f0 <__assert_fail@plt+0x2d80>
   14a70:	beq	14ae4 <__assert_fail@plt+0x2e74>
   14a74:	add	sl, r4, #1
   14a78:	cmp	r5, sl
   14a7c:	bhi	149e4 <__assert_fail@plt+0x2d74>
   14a80:	ldr	r3, [r7, #4]
   14a84:	ldr	r6, [fp, #-332]	; 0xfffffeb4
   14a88:	cmp	r3, #8
   14a8c:	bne	148d8 <__assert_fail@plt+0x2c68>
   14a90:	movw	r1, #36944	; 0x9050
   14a94:	ldr	r0, [fp, #-292]	; 0xfffffedc
   14a98:	movt	r1, #1
   14a9c:	bl	1185c <strcmp@plt>
   14aa0:	cmp	r0, #0
   14aa4:	beq	148d8 <__assert_fail@plt+0x2c68>
   14aa8:	mov	r2, #5
   14aac:	movw	r1, #36956	; 0x905c
   14ab0:	mov	r0, #0
   14ab4:	movt	r1, #1
   14ab8:	bl	118d4 <dcgettext@plt>
   14abc:	mov	r4, r0
   14ac0:	mov	r0, r6
   14ac4:	bl	11be0 <elf_ndxscn@plt>
   14ac8:	mov	r2, r4
   14acc:	ldr	r4, [fp, #-292]	; 0xfffffedc
   14ad0:	mov	r1, #0
   14ad4:	str	r4, [sp]
   14ad8:	mov	r3, r0
   14adc:	mov	r0, #1
   14ae0:	bl	119a0 <error@plt>
   14ae4:	ldr	r6, [fp, #-332]	; 0xfffffeb4
   14ae8:	b	149a8 <__assert_fail@plt+0x2d38>
   14aec:	ldr	r8, [fp, #-248]	; 0xffffff08
   14af0:	mov	r2, r7
   14af4:	ldr	r1, [fp, #-308]	; 0xfffffecc
   14af8:	ldr	r3, [fp, #-292]	; 0xfffffedc
   14afc:	mov	r0, r8
   14b00:	bl	12e54 <__assert_fail@plt+0x11e4>
   14b04:	cmp	r0, #0
   14b08:	beq	16bb8 <__assert_fail@plt+0x4f48>
   14b0c:	ldr	r5, [fp, #-308]	; 0xfffffecc
   14b10:	mov	r7, #88	; 0x58
   14b14:	mla	r8, r7, r5, r8
   14b18:	add	r5, r5, #1
   14b1c:	str	r5, [fp, #-308]	; 0xfffffecc
   14b20:	cmp	r8, #0
   14b24:	bne	149a8 <__assert_fail@plt+0x2d38>
   14b28:	b	14aa8 <__assert_fail@plt+0x2e38>
   14b2c:	mov	r7, r6
   14b30:	ldr	r6, [fp, #-364]	; 0xfffffe94
   14b34:	cmp	r6, #0
   14b38:	beq	14f48 <__assert_fail@plt+0x32d8>
   14b3c:	ldr	r1, [fp, #-260]	; 0xfffffefc
   14b40:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   14b44:	bl	11bec <elf_getscn@plt>
   14b48:	mov	r1, r7
   14b4c:	bl	1197c <elf_getdata@plt>
   14b50:	subs	ip, r0, #0
   14b54:	str	ip, [fp, #-332]	; 0xfffffeb4
   14b58:	movweq	r1, #36900	; 0x9024
   14b5c:	moveq	r2, #5
   14b60:	movteq	r1, #1
   14b64:	beq	16de0 <__assert_fail@plt+0x5170>
   14b68:	ldr	r5, [fp, #-244]	; 0xffffff0c
   14b6c:	ldr	sl, [fp, #-240]	; 0xffffff10
   14b70:	sub	r5, r5, #1
   14b74:	ldr	r4, [fp, #-248]	; 0xffffff08
   14b78:	cmp	r5, sl
   14b7c:	str	r4, [fp, #-348]	; 0xfffffea4
   14b80:	bls	16e04 <__assert_fail@plt+0x5194>
   14b84:	mov	r7, #88	; 0x58
   14b88:	mov	r8, #2
   14b8c:	mla	r7, r7, sl, r4
   14b90:	mov	r9, #0
   14b94:	mov	r6, sl
   14b98:	mov	r4, r7
   14b9c:	b	14bb0 <__assert_fail@plt+0x2f40>
   14ba0:	add	r6, r6, #1
   14ba4:	add	r4, r4, #88	; 0x58
   14ba8:	cmp	r5, r6
   14bac:	bls	15bc0 <__assert_fail@plt+0x3f50>
   14bb0:	ldr	r3, [r4, #28]
   14bb4:	cmp	r3, #1
   14bb8:	bne	14ba0 <__assert_fail@plt+0x2f30>
   14bbc:	ldrd	r2, [r4, #32]
   14bc0:	and	r2, r2, r8
   14bc4:	and	r3, r3, r9
   14bc8:	orrs	ip, r2, r3
   14bcc:	bne	14ba0 <__assert_fail@plt+0x2f30>
   14bd0:	movw	r1, #37000	; 0x9088
   14bd4:	ldr	r0, [r4, #4]
   14bd8:	movt	r1, #1
   14bdc:	bl	1185c <strcmp@plt>
   14be0:	cmp	r0, #0
   14be4:	bne	14ba0 <__assert_fail@plt+0x2f30>
   14be8:	mov	r2, r0
   14bec:	ldr	r0, [r4]
   14bf0:	cmp	r0, #0
   14bf4:	beq	16f7c <__assert_fail@plt+0x530c>
   14bf8:	cmp	sl, #0
   14bfc:	ldrne	r3, [fp, #-348]	; 0xfffffea4
   14c00:	beq	14c14 <__assert_fail@plt+0x2fa4>
   14c04:	str	r2, [r3, #12]
   14c08:	add	r3, r3, #88	; 0x58
   14c0c:	cmp	r3, r7
   14c10:	bne	14c04 <__assert_fail@plt+0x2f94>
   14c14:	mov	r1, #0
   14c18:	bl	11ac0 <elf_rawdata@plt>
   14c1c:	subs	r7, r0, #0
   14c20:	beq	16dd4 <__assert_fail@plt+0x5164>
   14c24:	mov	lr, r7
   14c28:	mov	r4, #0
   14c2c:	mov	r8, #3
   14c30:	str	r4, [fp, #-220]	; 0xffffff24
   14c34:	str	r8, [fp, #-232]	; 0xffffff18
   14c38:	mov	r5, #1
   14c3c:	str	r4, [fp, #-216]	; 0xffffff28
   14c40:	sub	r3, fp, #172	; 0xac
   14c44:	str	r4, [fp, #-212]	; 0xffffff2c
   14c48:	mov	r9, #64	; 0x40
   14c4c:	str	r4, [fp, #-208]	; 0xffffff30
   14c50:	sub	ip, fp, #108	; 0x6c
   14c54:	str	r3, [fp, #-236]	; 0xffffff14
   14c58:	sub	r6, fp, #236	; 0xec
   14c5c:	str	r5, [fp, #-228]	; 0xffffff1c
   14c60:	str	r9, [fp, #-224]	; 0xffffff20
   14c64:	ldm	lr!, {r0, r1, r2, r3}
   14c68:	str	r6, [fp, #-372]	; 0xfffffe8c
   14c6c:	mov	r6, ip
   14c70:	stmia	ip!, {r0, r1, r2, r3}
   14c74:	ldm	lr, {r0, r1, r2, r3}
   14c78:	stm	ip, {r0, r1, r2, r3}
   14c7c:	mov	r1, r8
   14c80:	mov	r2, r5
   14c84:	mov	r3, r5
   14c88:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   14c8c:	bl	11994 <gelf_fsize@plt>
   14c90:	ldr	ip, [fp, #-300]	; 0xfffffed4
   14c94:	ldr	r1, [fp, #-372]	; 0xfffffe8c
   14c98:	mov	r2, r6
   14c9c:	str	r8, [fp, #-104]	; 0xffffff98
   14ca0:	ldrb	r3, [ip, #5]
   14ca4:	str	r0, [fp, #-96]	; 0xffffffa0
   14ca8:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   14cac:	bl	119ac <gelf_xlatetom@plt>
   14cb0:	subs	r8, r0, #0
   14cb4:	beq	16fe8 <__assert_fail@plt+0x5378>
   14cb8:	ldrb	r3, [fp, #-168]	; 0xffffff58
   14cbc:	cmp	r3, #1
   14cc0:	strne	r4, [fp, #-308]	; 0xfffffecc
   14cc4:	streq	r3, [fp, #-308]	; 0xfffffecc
   14cc8:	ldrheq	r4, [fp, #-124]	; 0xffffff84
   14ccc:	moveq	r9, #40	; 0x28
   14cd0:	ldrhne	r4, [fp, #-112]	; 0xffffff90
   14cd4:	ldrheq	r2, [fp, #-128]	; 0xffffff80
   14cd8:	ldrhne	r2, [fp, #-116]	; 0xffffff8c
   14cdc:	cmp	r4, #0
   14ce0:	beq	16fb4 <__assert_fail@plt+0x5344>
   14ce4:	mov	r1, #6
   14ce8:	mov	r3, #1
   14cec:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   14cf0:	sub	r4, r4, #1
   14cf4:	bl	11994 <gelf_fsize@plt>
   14cf8:	ldr	ip, [fp, #-96]	; 0xffffffa0
   14cfc:	ldr	lr, [fp, #-108]	; 0xffffff94
   14d00:	mov	r1, #9
   14d04:	mov	r2, r4
   14d08:	mov	r3, #1
   14d0c:	str	r4, [fp, #-292]	; 0xfffffedc
   14d10:	add	ip, r0, ip
   14d14:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   14d18:	add	ip, lr, ip
   14d1c:	str	ip, [fp, #-108]	; 0xffffff94
   14d20:	bl	11994 <gelf_fsize@plt>
   14d24:	ldr	r1, [r7]
   14d28:	ldr	r2, [fp, #-108]	; 0xffffff94
   14d2c:	mov	lr, #9
   14d30:	rsb	ip, r1, r2
   14d34:	str	r0, [fp, #-96]	; 0xffffffa0
   14d38:	ldr	r3, [r7, #12]
   14d3c:	str	lr, [fp, #-104]	; 0xffffff98
   14d40:	cmp	ip, r3
   14d44:	bhi	16f88 <__assert_fail@plt+0x5318>
   14d48:	rsb	r2, r2, r1
   14d4c:	add	r3, r2, r3
   14d50:	cmp	r0, r3
   14d54:	bne	16f88 <__assert_fail@plt+0x5318>
   14d58:	ldr	r5, [fp, #-292]	; 0xfffffedc
   14d5c:	mul	r4, r9, r5
   14d60:	mov	r0, r4
   14d64:	bl	17a28 <__assert_fail@plt+0x5db8>
   14d68:	mov	r2, r6
   14d6c:	ldr	r6, [fp, #-300]	; 0xfffffed4
   14d70:	ldr	r1, [fp, #-372]	; 0xfffffe8c
   14d74:	str	r4, [fp, #-224]	; 0xffffff20
   14d78:	ldrb	r3, [r6, #5]
   14d7c:	str	r0, [fp, #-340]	; 0xfffffeac
   14d80:	ldr	r7, [fp, #-340]	; 0xfffffeac
   14d84:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   14d88:	str	r7, [fp, #-236]	; 0xffffff14
   14d8c:	bl	119ac <gelf_xlatetom@plt>
   14d90:	subs	r4, r0, #0
   14d94:	movweq	r1, #37020	; 0x909c
   14d98:	moveq	r2, #5
   14d9c:	movteq	r1, #1
   14da0:	beq	16c08 <__assert_fail@plt+0x4f98>
   14da4:	ldr	ip, [fp, #-292]	; 0xfffffedc
   14da8:	mov	r4, #88	; 0x58
   14dac:	mul	r0, r4, ip
   14db0:	bl	17a28 <__assert_fail@plt+0x5db8>
   14db4:	ldr	r5, [fp, #-292]	; 0xfffffedc
   14db8:	cmp	r5, #0
   14dbc:	str	r0, [fp, #-276]	; 0xfffffeec
   14dc0:	beq	16f70 <__assert_fail@plt+0x5300>
   14dc4:	mov	r9, #0
   14dc8:	str	sl, [fp, #-352]	; 0xfffffea0
   14dcc:	str	r9, [fp, #-280]	; 0xfffffee8
   14dd0:	mov	r8, r9
   14dd4:	ldr	r7, [fp, #-340]	; 0xfffffeac
   14dd8:	mov	sl, r9
   14ddc:	b	14ee8 <__assert_fail@plt+0x3278>
   14de0:	ldr	r3, [r7, #8]
   14de4:	mov	r5, #0
   14de8:	ldr	r2, [r7]
   14dec:	ldr	r0, [r7, #4]
   14df0:	ldr	r1, [r7, #12]
   14df4:	mov	r4, r3
   14df8:	str	r2, [r6, #24]
   14dfc:	ldr	r2, [r7, #16]
   14e00:	str	r3, [r6, #32]
   14e04:	ldr	r3, [r7, #20]
   14e08:	str	r0, [r6, #28]
   14e0c:	ldr	r0, [r7, #24]
   14e10:	str	r1, [r6, #40]	; 0x28
   14e14:	ldr	r1, [r7, #28]
   14e18:	str	r2, [r6, #48]	; 0x30
   14e1c:	ldr	r2, [r7, #32]
   14e20:	str	r3, [r6, #56]	; 0x38
   14e24:	ldr	r3, [r7, #36]	; 0x24
   14e28:	str	r8, [r6, #36]	; 0x24
   14e2c:	str	r8, [r6, #44]	; 0x2c
   14e30:	str	r8, [r6, #52]	; 0x34
   14e34:	str	r8, [r6, #60]	; 0x3c
   14e38:	str	r0, [r6, #64]	; 0x40
   14e3c:	str	r1, [r6, #68]	; 0x44
   14e40:	str	r2, [r6, #72]	; 0x48
   14e44:	str	r8, [r6, #76]	; 0x4c
   14e48:	str	r3, [r6, #80]	; 0x50
   14e4c:	str	r8, [r6, #84]	; 0x54
   14e50:	mov	r1, #0
   14e54:	mov	r0, #2
   14e58:	and	r5, r5, r1
   14e5c:	and	r4, r4, r0
   14e60:	orrs	r1, r4, r5
   14e64:	addeq	r9, r9, #1
   14e68:	beq	14ed8 <__assert_fail@plt+0x3268>
   14e6c:	ldr	r4, [fp, #-332]	; 0xfffffeb4
   14e70:	add	r9, r9, #1
   14e74:	ldrd	r2, [r6, #40]	; 0x28
   14e78:	ldr	r1, [r6, #24]
   14e7c:	ldr	r0, [r4, #12]
   14e80:	ldrd	r4, [fp, #4]
   14e84:	adds	r2, r2, r4
   14e88:	adc	r3, r3, r5
   14e8c:	ldr	r5, [fp, #-332]	; 0xfffffeb4
   14e90:	cmp	r1, r0
   14e94:	strd	r2, [r6, #40]	; 0x28
   14e98:	ldr	r3, [r5]
   14e9c:	bcs	16ab8 <__assert_fail@plt+0x4e48>
   14ea0:	add	r1, r3, r1
   14ea4:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   14ea8:	str	r1, [r6, #4]
   14eac:	mov	r1, r9
   14eb0:	bl	11bec <elf_getscn@plt>
   14eb4:	ldr	r3, [r6, #28]
   14eb8:	str	r8, [r6, #12]
   14ebc:	cmp	r3, #17
   14ec0:	str	r8, [r6, #16]
   14ec4:	str	r0, [r6]
   14ec8:	movne	r0, #0
   14ecc:	beq	16790 <__assert_fail@plt+0x4b20>
   14ed0:	add	sl, sl, #1
   14ed4:	str	r0, [r6, #8]
   14ed8:	ldr	r6, [fp, #-292]	; 0xfffffedc
   14edc:	add	r7, r7, #40	; 0x28
   14ee0:	cmp	r6, r9
   14ee4:	bls	167a0 <__assert_fail@plt+0x4b30>
   14ee8:	ldr	r6, [fp, #-308]	; 0xfffffecc
   14eec:	mov	ip, #88	; 0x58
   14ef0:	ldr	r4, [fp, #-276]	; 0xfffffeec
   14ef4:	cmp	r6, #0
   14ef8:	mla	r6, ip, sl, r4
   14efc:	bne	14de0 <__assert_fail@plt+0x3170>
   14f00:	ldr	r5, [fp, #-340]	; 0xfffffeac
   14f04:	add	ip, r6, #24
   14f08:	add	lr, r5, r9, lsl #6
   14f0c:	ldm	lr!, {r0, r1, r2, r3}
   14f10:	stmia	ip!, {r0, r1, r2, r3}
   14f14:	ldm	lr!, {r0, r1, r2, r3}
   14f18:	ldrd	r4, [r6, #32]
   14f1c:	stmia	ip!, {r0, r1, r2, r3}
   14f20:	ldm	lr!, {r0, r1, r2, r3}
   14f24:	stmia	ip!, {r0, r1, r2, r3}
   14f28:	ldm	lr, {r0, r1, r2, r3}
   14f2c:	stm	ip, {r0, r1, r2, r3}
   14f30:	b	14e50 <__assert_fail@plt+0x31e0>
   14f34:	ldr	r0, [fp, #-284]	; 0xfffffee4
   14f38:	mov	r1, r7
   14f3c:	bl	13598 <__assert_fail@plt+0x1928>
   14f40:	mov	r9, r0
   14f44:	b	149c0 <__assert_fail@plt+0x2d50>
   14f48:	ldr	r5, [fp, #-364]	; 0xfffffe94
   14f4c:	str	r5, [fp, #-368]	; 0xfffffe90
   14f50:	ldr	r3, [fp, #-244]	; 0xffffff0c
   14f54:	mov	r7, #88	; 0x58
   14f58:	ldr	r9, [fp, #-248]	; 0xffffff08
   14f5c:	sub	r3, r3, #1
   14f60:	mla	r2, r7, r3, r9
   14f64:	lsl	r3, r3, #2
   14f68:	add	r3, r3, #10
   14f6c:	bic	r3, r3, #7
   14f70:	cmp	r9, r2
   14f74:	sub	sp, sp, r3
   14f78:	add	sl, sp, #32
   14f7c:	bcs	16b6c <__assert_fail@plt+0x4efc>
   14f80:	add	r9, r9, r7
   14f84:	mov	r6, #0
   14f88:	str	r6, [fp, #-292]	; 0xfffffedc
   14f8c:	mov	r5, r9
   14f90:	str	r6, [fp, #-352]	; 0xfffffea0
   14f94:	ldr	r9, [fp, #-356]	; 0xfffffe9c
   14f98:	b	14fc8 <__assert_fail@plt+0x3358>
   14f9c:	bl	11be0 <elf_ndxscn@plt>
   14fa0:	sub	r4, r4, #1
   14fa4:	str	r0, [sl, r4, lsl #2]
   14fa8:	ldr	r3, [fp, #-244]	; 0xffffff0c
   14fac:	add	r5, r5, #88	; 0x58
   14fb0:	ldr	r4, [fp, #-248]	; 0xffffff08
   14fb4:	mov	r8, #88	; 0x58
   14fb8:	sub	r2, r3, #1
   14fbc:	mla	r2, r7, r2, r4
   14fc0:	cmp	r6, r2
   14fc4:	bcs	150f4 <__assert_fail@plt+0x3484>
   14fc8:	ldr	r0, [r5, #-88]	; 0xffffffa8
   14fcc:	mov	r6, r5
   14fd0:	bl	11be0 <elf_ndxscn@plt>
   14fd4:	mov	r4, r0
   14fd8:	ldr	r0, [r5, #-76]	; 0xffffffb4
   14fdc:	cmp	r0, #0
   14fe0:	bne	14f9c <__assert_fail@plt+0x332c>
   14fe4:	ldr	r3, [fp, #-260]	; 0xfffffefc
   14fe8:	cmp	r4, r3
   14fec:	beq	150d0 <__assert_fail@plt+0x3460>
   14ff0:	ldr	ip, [fp, #-316]	; 0xfffffec4
   14ff4:	sub	r2, r5, #88	; 0x58
   14ff8:	adds	r3, ip, #0
   14ffc:	movne	r3, #1
   15000:	cmp	r9, r2
   15004:	movne	r2, #0
   15008:	andeq	r2, r3, #1
   1500c:	cmp	r2, #0
   15010:	bne	150e0 <__assert_fail@plt+0x3470>
   15014:	cmp	r9, #0
   15018:	moveq	r3, #0
   1501c:	andne	r3, r3, #1
   15020:	cmp	r3, #0
   15024:	beq	15034 <__assert_fail@plt+0x33c4>
   15028:	ldr	r3, [r9, #64]	; 0x40
   1502c:	cmp	r4, r3
   15030:	beq	15ba8 <__assert_fail@plt+0x3f38>
   15034:	ldrd	r2, [r5, #-56]	; 0xffffffc8
   15038:	mov	r1, #0
   1503c:	mov	r0, #2
   15040:	and	r3, r3, r1
   15044:	and	r2, r2, r0
   15048:	orrs	r1, r2, r3
   1504c:	bne	15074 <__assert_fail@plt+0x3404>
   15050:	movw	r1, #37176	; 0x9138
   15054:	ldr	r0, [r5, #-84]	; 0xffffffac
   15058:	movt	r1, #1
   1505c:	bl	1185c <strcmp@plt>
   15060:	cmp	r0, #0
   15064:	subeq	r3, r4, #1
   15068:	streq	r4, [fp, #-352]	; 0xfffffea0
   1506c:	streq	r0, [sl, r3, lsl #2]
   15070:	beq	14fa8 <__assert_fail@plt+0x3338>
   15074:	ldr	r0, [fp, #-284]	; 0xfffffee4
   15078:	bl	11bb0 <elf_newscn@plt>
   1507c:	str	r0, [r5, #-76]	; 0xffffffb4
   15080:	bl	11868 <elf_newdata@plt>
   15084:	cmp	r0, #0
   15088:	beq	16b84 <__assert_fail@plt+0x4f14>
   1508c:	ldr	r0, [r5, #-76]	; 0xffffffb4
   15090:	sub	r1, r5, #64	; 0x40
   15094:	bl	11c10 <gelf_update_shdr@plt>
   15098:	cmp	r0, #0
   1509c:	beq	16b84 <__assert_fail@plt+0x4f14>
   150a0:	ldr	r2, [fp, #-292]	; 0xfffffedc
   150a4:	cmp	r2, #0
   150a8:	beq	15f18 <__assert_fail@plt+0x42a8>
   150ac:	ldr	r0, [fp, #-292]	; 0xfffffedc
   150b0:	ldr	r1, [r5, #-84]	; 0xffffffac
   150b4:	bl	119b8 <dwelf_strtab_add@plt>
   150b8:	cmp	r0, #0
   150bc:	mov	r3, r0
   150c0:	str	r0, [r5, #-72]	; 0xffffffb8
   150c4:	beq	16c2c <__assert_fail@plt+0x4fbc>
   150c8:	ldr	r0, [r5, #-76]	; 0xffffffb4
   150cc:	b	14f9c <__assert_fail@plt+0x332c>
   150d0:	ldr	r3, [fp, #-264]	; 0xfffffef8
   150d4:	sub	r4, r4, #1
   150d8:	str	r3, [sl, r4, lsl #2]
   150dc:	b	14fa8 <__assert_fail@plt+0x3338>
   150e0:	mov	r0, ip
   150e4:	sub	r4, r4, #1
   150e8:	bl	11be0 <elf_ndxscn@plt>
   150ec:	str	r0, [sl, r4, lsl #2]
   150f0:	b	14fa8 <__assert_fail@plt+0x3338>
   150f4:	ldr	r6, [fp, #-292]	; 0xfffffedc
   150f8:	mov	r5, r3
   150fc:	ldr	r7, [fp, #-264]	; 0xfffffef8
   15100:	cmp	r6, #0
   15104:	str	sp, [fp, #-280]	; 0xfffffee8
   15108:	ldr	r6, [fp, #-256]	; 0xffffff00
   1510c:	str	r7, [fp, #-276]	; 0xfffffeec
   15110:	beq	16d98 <__assert_fail@plt+0x5128>
   15114:	sub	r6, r6, #1
   15118:	mov	r1, #0
   1511c:	mla	r5, r8, r5, r4
   15120:	lsl	r2, r6, #2
   15124:	add	r3, r2, #10
   15128:	bic	r3, r3, #7
   1512c:	sub	sp, sp, r3
   15130:	sub	r5, r5, #88	; 0x58
   15134:	add	r7, sp, #32
   15138:	mov	r0, r7
   1513c:	bl	11ab4 <memset@plt>
   15140:	cmp	r4, r5
   15144:	ldrcc	r9, [fp, #-292]	; 0xfffffedc
   15148:	bcc	1516c <__assert_fail@plt+0x34fc>
   1514c:	b	151a8 <__assert_fail@plt+0x3538>
   15150:	bl	11be0 <elf_ndxscn@plt>
   15154:	ldr	r3, [r4, #16]
   15158:	sub	r0, r0, #1
   1515c:	str	r3, [r7, r0, lsl #2]
   15160:	add	r4, r4, #88	; 0x58
   15164:	cmp	r4, r5
   15168:	bcs	151a8 <__assert_fail@plt+0x3538>
   1516c:	ldr	r0, [r4, #12]
   15170:	cmp	r0, #0
   15174:	beq	15160 <__assert_fail@plt+0x34f0>
   15178:	ldr	r3, [r4, #16]
   1517c:	cmp	r3, #0
   15180:	bne	15150 <__assert_fail@plt+0x34e0>
   15184:	mov	r0, r9
   15188:	ldr	r1, [r4, #4]
   1518c:	bl	119b8 <dwelf_strtab_add@plt>
   15190:	cmp	r0, #0
   15194:	mov	r8, r0
   15198:	str	r0, [r4, #16]
   1519c:	beq	16da4 <__assert_fail@plt+0x5134>
   151a0:	ldr	r0, [r4, #12]
   151a4:	b	15150 <__assert_fail@plt+0x34e0>
   151a8:	cmp	r6, #0
   151ac:	beq	15238 <__assert_fail@plt+0x35c8>
   151b0:	mov	r8, r7
   151b4:	mov	r4, #1
   151b8:	mov	r9, #0
   151bc:	ldr	r5, [fp, #-312]	; 0xfffffec8
   151c0:	b	151d0 <__assert_fail@plt+0x3560>
   151c4:	cmp	r3, r6
   151c8:	add	r4, r4, #1
   151cc:	bcs	15238 <__assert_fail@plt+0x35c8>
   151d0:	ldr	r3, [r8], #4
   151d4:	cmp	r3, #0
   151d8:	strne	r9, [r8, #-4]
   151dc:	movne	r3, r4
   151e0:	bne	151c4 <__assert_fail@plt+0x3554>
   151e4:	mov	r1, r4
   151e8:	ldr	r0, [fp, #-284]	; 0xfffffee4
   151ec:	bl	11bec <elf_getscn@plt>
   151f0:	sub	r1, fp, #108	; 0x6c
   151f4:	bl	11850 <gelf_getshdr@plt>
   151f8:	ldr	r2, [r5, #12]
   151fc:	ldr	r1, [r5]
   15200:	ldr	r3, [r0]
   15204:	cmp	r3, r2
   15208:	bcs	16d1c <__assert_fail@plt+0x50ac>
   1520c:	add	r1, r1, r3
   15210:	ldr	r0, [fp, #-292]	; 0xfffffedc
   15214:	bl	119b8 <dwelf_strtab_add@plt>
   15218:	cmp	r0, #0
   1521c:	mov	r3, r0
   15220:	str	r0, [r8, #-4]
   15224:	beq	16c2c <__assert_fail@plt+0x4fbc>
   15228:	mov	r3, r4
   1522c:	cmp	r3, r6
   15230:	add	r4, r4, #1
   15234:	bcc	151d0 <__assert_fail@plt+0x3560>
   15238:	ldr	r1, [fp, #-276]	; 0xfffffeec
   1523c:	ldr	r0, [fp, #-284]	; 0xfffffee4
   15240:	bl	11bec <elf_getscn@plt>
   15244:	mov	r1, #0
   15248:	bl	1197c <elf_getdata@plt>
   1524c:	mov	r1, #5
   15250:	mov	r2, #1
   15254:	str	r0, [fp, #-340]	; 0xfffffeac
   15258:	bl	118b0 <elf_flagdata@plt>
   1525c:	subs	r5, r0, #0
   15260:	beq	16d60 <__assert_fail@plt+0x50f0>
   15264:	ldr	r1, [fp, #-340]	; 0xfffffeac
   15268:	ldr	r0, [fp, #-292]	; 0xfffffedc
   1526c:	bl	11b68 <dwelf_strtab_finalize@plt>
   15270:	subs	r1, r0, #0
   15274:	beq	16d70 <__assert_fail@plt+0x5100>
   15278:	cmp	r6, #0
   1527c:	beq	15304 <__assert_fail@plt+0x3694>
   15280:	ldr	r5, [fp, #-284]	; 0xfffffee4
   15284:	sub	r7, r7, #4
   15288:	mov	r8, #1
   1528c:	str	sl, [fp, #-296]	; 0xfffffed8
   15290:	ldr	r4, [r7, #4]!
   15294:	cmp	r4, #0
   15298:	moveq	r3, r8
   1529c:	beq	152f4 <__assert_fail@plt+0x3684>
   152a0:	mov	r1, r8
   152a4:	mov	r0, r5
   152a8:	bl	11bec <elf_getscn@plt>
   152ac:	sub	r1, fp, #108	; 0x6c
   152b0:	mov	sl, r0
   152b4:	bl	11850 <gelf_getshdr@plt>
   152b8:	mov	r9, r0
   152bc:	mov	r0, r4
   152c0:	bl	11a60 <dwelf_strent_off@plt>
   152c4:	ldr	ip, [fp, #-276]	; 0xfffffeec
   152c8:	mov	r1, r9
   152cc:	cmp	ip, r8
   152d0:	ldreq	r4, [fp, #-340]	; 0xfffffeac
   152d4:	moveq	ip, #0
   152d8:	ldreq	r3, [r4, #12]
   152dc:	streq	ip, [r9, #36]	; 0x24
   152e0:	str	r0, [r9]
   152e4:	mov	r0, sl
   152e8:	streq	r3, [r9, #32]
   152ec:	bl	13438 <__assert_fail@plt+0x17c8>
   152f0:	mov	r3, r8
   152f4:	cmp	r3, r6
   152f8:	add	r8, r8, #1
   152fc:	bcc	15290 <__assert_fail@plt+0x3620>
   15300:	ldr	sl, [fp, #-296]	; 0xfffffed8
   15304:	sub	r1, fp, #256	; 0x100
   15308:	ldr	sp, [fp, #-280]	; 0xfffffee8
   1530c:	ldr	r0, [fp, #-284]	; 0xfffffee4
   15310:	bl	11bf8 <elf_getshdrnum@plt>
   15314:	subs	r4, r0, #0
   15318:	movwne	r1, #36796	; 0x8fbc
   1531c:	movne	r0, #0
   15320:	movtne	r1, #1
   15324:	bne	16b90 <__assert_fail@plt+0x4f20>
   15328:	ldr	r2, [fp, #-256]	; 0xffffff00
   1532c:	mov	r1, r4
   15330:	add	r3, r2, #6
   15334:	sub	r2, r2, #1
   15338:	bic	r3, r3, #7
   1533c:	sub	sp, sp, r3
   15340:	add	r5, sp, #32
   15344:	str	r5, [fp, #-296]	; 0xfffffed8
   15348:	mov	r0, r5
   1534c:	bl	11ab4 <memset@plt>
   15350:	ldr	ip, [fp, #-244]	; 0xffffff0c
   15354:	ldr	r3, [fp, #-248]	; 0xffffff08
   15358:	mov	r1, #88	; 0x58
   1535c:	sub	r2, ip, #1
   15360:	mla	r2, r1, r2, r3
   15364:	str	r3, [fp, #-280]	; 0xfffffee8
   15368:	cmp	r3, r2
   1536c:	bcs	16d80 <__assert_fail@plt+0x5110>
   15370:	sub	lr, fp, #512	; 0x200
   15374:	mov	r8, r4
   15378:	mov	r6, #0
   1537c:	mov	r7, #0
   15380:	str	r4, [fp, #-348]	; 0xfffffea4
   15384:	strd	r6, [lr, #236]	; 0xec
   15388:	ldr	r4, [fp, #-280]	; 0xfffffee8
   1538c:	ldr	r0, [r4, #12]
   15390:	cmp	r0, #0
   15394:	beq	15638 <__assert_fail@plt+0x39c8>
   15398:	sub	r1, fp, #108	; 0x6c
   1539c:	bl	11850 <gelf_getshdr@plt>
   153a0:	cmp	r0, #0
   153a4:	beq	16e40 <__assert_fail@plt+0x51d0>
   153a8:	ldr	r5, [fp, #-300]	; 0xfffffed4
   153ac:	ldrh	r3, [r5, #16]
   153b0:	cmp	r3, #1
   153b4:	beq	15a24 <__assert_fail@plt+0x3db4>
   153b8:	ldr	r4, [fp, #-280]	; 0xfffffee8
   153bc:	ldrd	r2, [r4, #40]	; 0x28
   153c0:	strd	r2, [fp, #-92]	; 0xffffffa4
   153c4:	ldr	r5, [fp, #-280]	; 0xfffffee8
   153c8:	ldr	r3, [r5, #28]
   153cc:	cmp	r3, #9
   153d0:	cmpne	r3, #4
   153d4:	str	r3, [fp, #-104]	; 0xffffff98
   153d8:	ldrd	r2, [r5, #56]	; 0x38
   153dc:	movne	ip, #0
   153e0:	moveq	ip, #1
   153e4:	strd	r2, [fp, #-76]	; 0xffffffb4
   153e8:	ldr	r0, [r5, #68]	; 0x44
   153ec:	str	r0, [fp, #-64]	; 0xffffffc0
   153f0:	ldr	r1, [r5, #64]	; 0x40
   153f4:	str	r1, [fp, #-68]	; 0xffffffbc
   153f8:	bne	15430 <__assert_fail@plt+0x37c0>
   153fc:	ldrd	r2, [r5, #32]
   15400:	ldrd	r4, [fp, #-100]	; 0xffffff9c
   15404:	cmp	r3, r5
   15408:	cmpeq	r2, r4
   1540c:	beq	15430 <__assert_fail@plt+0x37c0>
   15410:	mov	r6, #64	; 0x40
   15414:	mov	r7, #0
   15418:	and	r2, r2, r6
   1541c:	and	r3, r3, r7
   15420:	orrs	lr, r2, r3
   15424:	orrne	r2, r4, r6
   15428:	orrne	r3, r5, r7
   1542c:	strdne	r2, [fp, #-100]	; 0xffffff9c
   15430:	cmp	r1, #0
   15434:	subne	r1, r1, #1
   15438:	ldrne	r3, [sl, r1, lsl #2]
   1543c:	strne	r3, [fp, #-68]	; 0xffffffbc
   15440:	cmp	ip, #0
   15444:	bne	15468 <__assert_fail@plt+0x37f8>
   15448:	ldr	r4, [fp, #-280]	; 0xfffffee8
   1544c:	mov	r5, #0
   15450:	ldrd	r2, [r4, #32]
   15454:	mov	r4, #64	; 0x40
   15458:	and	r3, r3, r5
   1545c:	and	r2, r2, r4
   15460:	orrs	r5, r2, r3
   15464:	beq	15478 <__assert_fail@plt+0x3808>
   15468:	cmp	r0, #0
   1546c:	subne	r0, r0, #1
   15470:	ldrne	r3, [sl, r0, lsl #2]
   15474:	strne	r3, [fp, #-64]	; 0xffffffc0
   15478:	ldr	r6, [fp, #-292]	; 0xfffffedc
   1547c:	cmp	r6, #0
   15480:	beq	15494 <__assert_fail@plt+0x3824>
   15484:	ldr	r7, [fp, #-280]	; 0xfffffee8
   15488:	ldr	r0, [r7, #16]
   1548c:	bl	11a60 <dwelf_strent_off@plt>
   15490:	str	r0, [fp, #-108]	; 0xffffff94
   15494:	ldr	r4, [fp, #-280]	; 0xfffffee8
   15498:	mov	r1, #0
   1549c:	ldr	r0, [r4]
   154a0:	bl	1197c <elf_getdata@plt>
   154a4:	subs	r4, r0, #0
   154a8:	beq	16e10 <__assert_fail@plt+0x51a0>
   154ac:	ldr	r5, [fp, #-280]	; 0xfffffee8
   154b0:	mov	r1, #0
   154b4:	ldr	r0, [r5, #12]
   154b8:	bl	1197c <elf_getdata@plt>
   154bc:	subs	r7, r0, #0
   154c0:	beq	16e70 <__assert_fail@plt+0x5200>
   154c4:	ldm	r4!, {r0, r1, r2, r3}
   154c8:	mov	ip, r7
   154cc:	stmia	ip!, {r0, r1, r2, r3}
   154d0:	ldm	r4, {r0, r1, r2, r3}
   154d4:	stm	ip, {r0, r1, r2, r3}
   154d8:	mov	r0, r7
   154dc:	mov	r1, #5
   154e0:	mov	r2, #1
   154e4:	bl	118b0 <elf_flagdata@plt>
   154e8:	ldr	r6, [fp, #-300]	; 0xfffffed4
   154ec:	ldrh	r3, [r6, #16]
   154f0:	cmp	r3, #1
   154f4:	beq	15514 <__assert_fail@plt+0x38a4>
   154f8:	ldrd	r2, [fp, #-100]	; 0xffffff9c
   154fc:	mov	r1, #0
   15500:	mov	r0, #2
   15504:	and	r3, r3, r1
   15508:	and	r2, r2, r0
   1550c:	orrs	r1, r2, r3
   15510:	bne	15b20 <__assert_fail@plt+0x3eb0>
   15514:	ldr	r5, [fp, #-280]	; 0xfffffee8
   15518:	sub	r1, fp, #108	; 0x6c
   1551c:	ldr	r0, [r5, #12]
   15520:	bl	13438 <__assert_fail@plt+0x17c8>
   15524:	ldr	r4, [fp, #-104]	; 0xffffff98
   15528:	cmp	r4, #2
   1552c:	cmpne	r4, #11
   15530:	bne	15628 <__assert_fail@plt+0x39b8>
   15534:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   15538:	orrs	r6, r2, r3
   1553c:	beq	16d08 <__assert_fail@plt+0x5098>
   15540:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   15544:	bl	17b54 <__assert_fail@plt+0x5ee4>
   15548:	cmp	r1, #0
   1554c:	cmpeq	r0, #1
   15550:	movhi	r6, #1
   15554:	movwhi	r9, #65535	; 0xffff
   15558:	bls	15618 <__assert_fail@plt+0x39a8>
   1555c:	str	r8, [fp, #-252]	; 0xffffff04
   15560:	sub	ip, fp, #252	; 0xfc
   15564:	mov	r0, r7
   15568:	str	ip, [sp]
   1556c:	mov	r1, #0
   15570:	mov	r2, r6
   15574:	sub	r3, fp, #236	; 0xec
   15578:	bl	11c28 <gelf_getsymshndx@plt>
   1557c:	subs	r3, r0, #0
   15580:	beq	16734 <__assert_fail@plt+0x4ac4>
   15584:	ldrh	r2, [r3, #6]
   15588:	movw	lr, #65278	; 0xfefe
   1558c:	cmp	r2, r9
   15590:	strne	r2, [fp, #-252]	; 0xffffff04
   15594:	ldreq	r1, [fp, #-252]	; 0xffffff04
   15598:	movne	r1, r2
   1559c:	sub	r2, r1, #1
   155a0:	cmp	r2, lr
   155a4:	bhi	155f0 <__assert_fail@plt+0x3980>
   155a8:	ldr	r0, [fp, #-244]	; 0xffffff0c
   155ac:	cmp	r0, r1
   155b0:	bls	16a14 <__assert_fail@plt+0x4da4>
   155b4:	ldr	r2, [sl, r2, lsl #2]
   155b8:	mov	r1, #0
   155bc:	cmp	r2, #65280	; 0xff00
   155c0:	str	r2, [fp, #-252]	; 0xffffff04
   155c4:	strhcc	r2, [r3, #6]
   155c8:	mvncs	r0, #0
   155cc:	movcc	r2, #0
   155d0:	strhcs	r0, [r3, #6]
   155d4:	strcc	r8, [fp, #-252]	; 0xffffff04
   155d8:	mov	r0, r7
   155dc:	str	r2, [sp]
   155e0:	mov	r2, r6
   155e4:	bl	118f8 <gelf_update_symshndx@plt>
   155e8:	cmp	r0, #0
   155ec:	beq	16a3c <__assert_fail@plt+0x4dcc>
   155f0:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   155f4:	add	r6, r6, #1
   155f8:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   155fc:	mov	r5, #0
   15600:	bl	17b54 <__assert_fail@plt+0x5ee4>
   15604:	mov	r4, r6
   15608:	cmp	r5, r1
   1560c:	cmpeq	r4, r0
   15610:	bcc	1555c <__assert_fail@plt+0x38ec>
   15614:	ldr	r4, [fp, #-104]	; 0xffffff98
   15618:	cmp	r4, #2
   1561c:	beq	15b94 <__assert_fail@plt+0x3f24>
   15620:	cmp	r4, #11
   15624:	beq	15b80 <__assert_fail@plt+0x3f10>
   15628:	cmp	r4, #17
   1562c:	beq	15a50 <__assert_fail@plt+0x3de0>
   15630:	ldr	ip, [fp, #-244]	; 0xffffff0c
   15634:	ldr	r3, [fp, #-248]	; 0xffffff08
   15638:	sub	r2, ip, #1
   1563c:	mov	r1, #88	; 0x58
   15640:	ldr	r5, [fp, #-280]	; 0xfffffee8
   15644:	mla	r2, r1, r2, r3
   15648:	add	r5, r5, r1
   1564c:	str	r5, [fp, #-280]	; 0xfffffee8
   15650:	cmp	r5, r2
   15654:	bcc	15388 <__assert_fail@plt+0x3718>
   15658:	ldr	r4, [fp, #-316]	; 0xfffffec4
   1565c:	cmp	r4, #0
   15660:	beq	16768 <__assert_fail@plt+0x4af8>
   15664:	ldr	r5, [fp, #-356]	; 0xfffffe9c
   15668:	ldr	r6, [fp, #-364]	; 0xfffffe94
   1566c:	adds	r5, r5, #0
   15670:	movne	r5, #1
   15674:	orrs	r3, r5, r6
   15678:	str	r5, [fp, #-360]	; 0xfffffe98
   1567c:	bne	169d8 <__assert_fail@plt+0x4d68>
   15680:	ldr	r7, [fp, #-300]	; 0xfffffed4
   15684:	ldrh	r2, [r7, #16]
   15688:	cmp	r2, #1
   1568c:	beq	15f28 <__assert_fail@plt+0x42b8>
   15690:	ldrd	r4, [fp, #4]
   15694:	orrs	r5, r4, r5
   15698:	beq	15f28 <__assert_fail@plt+0x42b8>
   1569c:	mov	r7, #1
   156a0:	str	sp, [fp, #-380]	; 0xfffffe84
   156a4:	sub	r4, fp, #236	; 0xec
   156a8:	ldr	r0, [fp, #-316]	; 0xfffffec4
   156ac:	str	r4, [fp, #-372]	; 0xfffffe8c
   156b0:	mov	r1, r4
   156b4:	bl	11850 <gelf_getshdr@plt>
   156b8:	subs	r5, r0, #0
   156bc:	str	r5, [fp, #-332]	; 0xfffffeb4
   156c0:	beq	16b34 <__assert_fail@plt+0x4ec4>
   156c4:	ldr	r6, [fp, #-332]	; 0xfffffeb4
   156c8:	ldrd	r2, [r6, #56]	; 0x38
   156cc:	orrs	ip, r2, r3
   156d0:	beq	16b20 <__assert_fail@plt+0x4eb0>
   156d4:	ldr	r4, [fp, #-332]	; 0xfffffeb4
   156d8:	ldrd	r0, [r4, #32]
   156dc:	bl	17b54 <__assert_fail@plt+0x5ee4>
   156e0:	ldr	r5, [fp, #-360]	; 0xfffffe98
   156e4:	cmp	r5, #0
   156e8:	sub	r6, r0, #2
   156ec:	mov	r9, r0
   156f0:	add	r6, r6, r7
   156f4:	lsl	r8, r6, #5
   156f8:	lsl	r3, r6, #2
   156fc:	add	r2, r8, #8
   15700:	add	r3, r3, #10
   15704:	sub	sp, sp, r2
   15708:	bic	r3, r3, #7
   1570c:	add	r4, sp, #32
   15710:	sub	sp, sp, r3
   15714:	add	r5, sp, #32
   15718:	str	r4, [fp, #-308]	; 0xfffffecc
   1571c:	str	r5, [fp, #-384]	; 0xfffffe80
   15720:	beq	1578c <__assert_fail@plt+0x3b1c>
   15724:	ldr	r4, [fp, #-300]	; 0xfffffed4
   15728:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   1572c:	ldrh	r5, [r4, #16]
   15730:	ldr	r4, [fp, #-356]	; 0xfffffe9c
   15734:	subs	r3, r5, #1
   15738:	rsbs	r5, r3, #0
   1573c:	ldr	r1, [r4, #64]	; 0x40
   15740:	adcs	r5, r5, r3
   15744:	ldr	r4, [r4]
   15748:	bl	11bec <elf_getscn@plt>
   1574c:	mov	r3, r0
   15750:	ldr	r0, [fp, #-284]	; 0xfffffee4
   15754:	str	r7, [sp]
   15758:	mov	r1, r5
   1575c:	str	sl, [sp, #16]
   15760:	mov	r2, r4
   15764:	ldr	r5, [fp, #-308]	; 0xfffffecc
   15768:	mov	ip, #0
   1576c:	str	r5, [sp, #20]
   15770:	mov	r5, #0
   15774:	ldr	r4, [fp, #-384]	; 0xfffffe80
   15778:	str	ip, [sp, #28]
   1577c:	str	r4, [sp, #24]
   15780:	mov	r4, #0
   15784:	strd	r4, [sp, #8]
   15788:	bl	13060 <__assert_fail@plt+0x13f0>
   1578c:	ldr	r4, [fp, #-332]	; 0xfffffeb4
   15790:	ldr	r0, [fp, #-284]	; 0xfffffee4
   15794:	ldr	r1, [r4, #40]	; 0x28
   15798:	bl	11bec <elf_getscn@plt>
   1579c:	ldr	r5, [fp, #-300]	; 0xfffffed4
   157a0:	str	r0, [fp, #-364]	; 0xfffffe94
   157a4:	ldrh	r3, [r5, #16]
   157a8:	cmp	r3, #1
   157ac:	movne	r1, #0
   157b0:	moveq	r1, #1
   157b4:	beq	169cc <__assert_fail@plt+0x4d5c>
   157b8:	ldmib	fp, {r2, r3}
   157bc:	str	r3, [sp, #12]
   157c0:	sub	r7, r7, #1
   157c4:	str	r9, [sp]
   157c8:	mov	r3, #0
   157cc:	str	r2, [sp, #8]
   157d0:	ldr	r4, [fp, #-368]	; 0xfffffe90
   157d4:	ldr	r5, [fp, #-384]	; 0xfffffe80
   157d8:	add	r5, r5, r7, lsl #2
   157dc:	str	r5, [fp, #-388]	; 0xfffffe7c
   157e0:	str	r4, [sp, #28]
   157e4:	ldr	r4, [fp, #-388]	; 0xfffffe7c
   157e8:	ldr	r5, [fp, #-308]	; 0xfffffecc
   157ec:	str	r4, [sp, #24]
   157f0:	add	r7, r5, r7, lsl #5
   157f4:	str	r7, [sp, #20]
   157f8:	ldr	r0, [fp, #-284]	; 0xfffffee4
   157fc:	str	r3, [sp, #16]
   15800:	ldr	r2, [fp, #-316]	; 0xfffffec4
   15804:	ldr	r3, [fp, #-364]	; 0xfffffe94
   15808:	bl	13060 <__assert_fail@plt+0x13f0>
   1580c:	movw	r3, #13584	; 0x3510
   15810:	ldr	r0, [fp, #-308]	; 0xfffffecc
   15814:	mov	r1, r6
   15818:	mov	r2, #32
   1581c:	movt	r3, #1
   15820:	bl	11bc8 <qsort@plt>
   15824:	add	r4, r5, r8
   15828:	mov	sl, #0
   1582c:	cmp	r5, r4
   15830:	bcs	158d4 <__assert_fail@plt+0x3c64>
   15834:	ldr	r8, [fp, #-308]	; 0xfffffecc
   15838:	mov	r5, sl
   1583c:	ldr	r3, [r8, #24]
   15840:	cmp	r3, #0
   15844:	bne	15858 <__assert_fail@plt+0x3be8>
   15848:	ldrb	r2, [r8, #28]
   1584c:	and	r2, r2, #15
   15850:	cmp	r2, #3
   15854:	beq	15f04 <__assert_fail@plt+0x4294>
   15858:	mov	r9, r8
   1585c:	b	15878 <__assert_fail@plt+0x3c08>
   15860:	mov	r0, r8
   15864:	mov	r1, r7
   15868:	bl	13510 <__assert_fail@plt+0x18a0>
   1586c:	cmp	r0, #0
   15870:	bne	15884 <__assert_fail@plt+0x3c14>
   15874:	mov	r9, r7
   15878:	add	r7, r9, #32
   1587c:	cmp	r7, r4
   15880:	bcc	15860 <__assert_fail@plt+0x3bf0>
   15884:	cmp	r9, r8
   15888:	ldrhi	r2, [r9]
   1588c:	movhi	r3, r8
   15890:	bls	158bc <__assert_fail@plt+0x3c4c>
   15894:	str	r5, [r3, #4]
   15898:	add	r3, r3, #32
   1589c:	str	r2, [r3, #-24]	; 0xffffffe8
   158a0:	cmp	r9, r3
   158a4:	bhi	15894 <__assert_fail@plt+0x3c24>
   158a8:	mvn	r3, r8
   158ac:	add	r3, r9, r3
   158b0:	bic	r3, r3, #31
   158b4:	add	r3, r3, #32
   158b8:	add	r8, r8, r3
   158bc:	ldr	r3, [r8]
   158c0:	add	sl, sl, #1
   158c4:	str	sl, [r3]
   158c8:	add	r8, r8, #32
   158cc:	cmp	r8, r4
   158d0:	bcc	1583c <__assert_fail@plt+0x3bcc>
   158d4:	movw	r3, #9432	; 0x24d8
   158d8:	ldr	r0, [fp, #-308]	; 0xfffffecc
   158dc:	movt	r3, #1
   158e0:	mov	r1, r6
   158e4:	mov	r2, #32
   158e8:	bl	11bc8 <qsort@plt>
   158ec:	cmp	r6, sl
   158f0:	bls	15908 <__assert_fail@plt+0x3c98>
   158f4:	ldr	r5, [fp, #-308]	; 0xfffffecc
   158f8:	add	r3, r5, sl, lsl #5
   158fc:	ldr	r3, [r3, #4]
   15900:	cmp	r3, #0
   15904:	bne	16a6c <__assert_fail@plt+0x4dfc>
   15908:	mov	r0, #1
   1590c:	bl	11988 <dwelf_strtab_init@plt>
   15910:	cmp	sl, #0
   15914:	str	r0, [fp, #-280]	; 0xfffffee8
   15918:	beq	15988 <__assert_fail@plt+0x3d18>
   1591c:	ldr	r7, [fp, #-308]	; 0xfffffecc
   15920:	ldr	r3, [r7, #4]
   15924:	cmp	r3, #0
   15928:	beq	1706c <__assert_fail@plt+0x53fc>
   1592c:	ldr	r4, [fp, #-308]	; 0xfffffecc
   15930:	ldr	r3, [r4]
   15934:	ldr	r2, [r3]
   15938:	cmp	r2, #0
   1593c:	ldrne	r4, [fp, #-308]	; 0xfffffecc
   15940:	movne	r5, #0
   15944:	bne	15968 <__assert_fail@plt+0x3cf8>
   15948:	b	17050 <__assert_fail@plt+0x53e0>
   1594c:	ldr	r3, [r4, #36]	; 0x24
   15950:	cmp	r3, #0
   15954:	beq	1706c <__assert_fail@plt+0x53fc>
   15958:	ldr	r3, [r4, #32]!
   1595c:	ldr	r2, [r3]
   15960:	cmp	r2, #0
   15964:	beq	17050 <__assert_fail@plt+0x53e0>
   15968:	add	r5, r5, #1
   1596c:	ldr	r0, [fp, #-280]	; 0xfffffee8
   15970:	str	r5, [r3]
   15974:	ldr	r1, [r4, #4]
   15978:	bl	119b8 <dwelf_strtab_add@plt>
   1597c:	cmp	r5, sl
   15980:	str	r0, [r4, #4]
   15984:	bne	1594c <__assert_fail@plt+0x3cdc>
   15988:	cmp	r6, sl
   1598c:	bls	163c8 <__assert_fail@plt+0x4758>
   15990:	ldr	r5, [fp, #-308]	; 0xfffffecc
   15994:	lsl	r3, sl, #5
   15998:	add	r2, r5, r3
   1599c:	ldr	r2, [r2, #4]
   159a0:	cmp	r2, #0
   159a4:	bne	17034 <__assert_fail@plt+0x53c4>
   159a8:	ldr	r7, [fp, #-308]	; 0xfffffecc
   159ac:	add	r3, r3, #8
   159b0:	mov	r2, sl
   159b4:	add	r3, r7, r3
   159b8:	b	159ec <__assert_fail@plt+0x3d7c>
   159bc:	ldr	r1, [r1]
   159c0:	cmp	r1, #0
   159c4:	beq	17018 <__assert_fail@plt+0x53a8>
   159c8:	ldr	r0, [r3, #-8]
   159cc:	str	r1, [r0]
   159d0:	add	r2, r2, #1
   159d4:	cmp	r6, r2
   159d8:	bls	163c8 <__assert_fail@plt+0x4758>
   159dc:	add	r3, r3, #32
   159e0:	ldr	r1, [r3, #-4]
   159e4:	cmp	r1, #0
   159e8:	bne	17034 <__assert_fail@plt+0x53c4>
   159ec:	ldr	r1, [r3]
   159f0:	cmp	r1, #0
   159f4:	bne	159bc <__assert_fail@plt+0x3d4c>
   159f8:	ldr	r1, [r3, #-8]
   159fc:	ldr	r1, [r1]
   15a00:	cmp	r1, #0
   15a04:	beq	159d0 <__assert_fail@plt+0x3d60>
   15a08:	movw	r0, #37664	; 0x9320
   15a0c:	movw	r1, #35020	; 0x88cc
   15a10:	movt	r0, #1
   15a14:	movt	r1, #1
   15a18:	movw	r2, #1850	; 0x73a
   15a1c:	ldr	r3, [pc, #4076]	; 16a10 <__assert_fail@plt+0x4da0>
   15a20:	bl	11c70 <__assert_fail@plt>
   15a24:	ldrd	r2, [fp, #-100]	; 0xffffff9c
   15a28:	mov	r7, #0
   15a2c:	mov	r6, #2
   15a30:	and	r3, r3, r7
   15a34:	and	r2, r2, r6
   15a38:	orrs	r7, r2, r3
   15a3c:	beq	153b8 <__assert_fail@plt+0x3748>
   15a40:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   15a44:	orrs	ip, r2, r3
   15a48:	bne	153c4 <__assert_fail@plt+0x3754>
   15a4c:	b	153b8 <__assert_fail@plt+0x3748>
   15a50:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15a54:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15a58:	ldr	r0, [r7]
   15a5c:	lsr	r2, r2, #2
   15a60:	orr	r1, r2, r3, lsl #30
   15a64:	lsr	r3, r3, #2
   15a68:	str	r3, [fp, #-320]	; 0xfffffec0
   15a6c:	sub	r3, fp, #512	; 0x200
   15a70:	str	r1, [fp, #-324]	; 0xfffffebc
   15a74:	ldrd	r2, [r3, #188]	; 0xbc
   15a78:	cmp	r3, #0
   15a7c:	cmpeq	r2, #1
   15a80:	bls	15630 <__assert_fail@plt+0x39c0>
   15a84:	ldr	r1, [r0, #4]
   15a88:	add	ip, r0, #4
   15a8c:	cmp	r1, #0
   15a90:	beq	17168 <__assert_fail@plt+0x54f8>
   15a94:	ldr	r3, [fp, #-244]	; 0xffffff0c
   15a98:	cmp	r3, r1
   15a9c:	bls	17168 <__assert_fail@plt+0x54f8>
   15aa0:	sub	r4, fp, #512	; 0x200
   15aa4:	add	r0, r0, #8
   15aa8:	mov	r2, #2
   15aac:	mov	r3, #0
   15ab0:	ldrd	r6, [r4, #188]	; 0xbc
   15ab4:	b	15acc <__assert_fail@plt+0x3e5c>
   15ab8:	ldr	lr, [fp, #-244]	; 0xffffff0c
   15abc:	adds	r2, r2, #1
   15ac0:	adc	r3, r3, #0
   15ac4:	cmp	r1, lr
   15ac8:	bcs	15af8 <__assert_fail@plt+0x3e88>
   15acc:	sub	r1, r1, #1
   15ad0:	cmp	r3, r7
   15ad4:	cmpeq	r2, r6
   15ad8:	mov	r4, r2
   15adc:	ldr	r1, [sl, r1, lsl #2]
   15ae0:	str	r1, [ip]
   15ae4:	beq	15630 <__assert_fail@plt+0x39c0>
   15ae8:	mov	ip, r0
   15aec:	ldr	r1, [r0], #4
   15af0:	cmp	r1, #0
   15af4:	bne	15ab8 <__assert_fail@plt+0x3e48>
   15af8:	mov	r2, #5
   15afc:	movw	r1, #37444	; 0x9244
   15b00:	mov	r0, #0
   15b04:	movt	r1, #1
   15b08:	bl	118d4 <dcgettext@plt>
   15b0c:	mov	r3, r4
   15b10:	mov	r1, #0
   15b14:	mov	r2, r0
   15b18:	mov	r0, #1
   15b1c:	bl	119a0 <error@plt>
   15b20:	ldr	r4, [fp, #-280]	; 0xfffffee8
   15b24:	ldrd	r2, [r4, #48]	; 0x30
   15b28:	strd	r2, [fp, #-84]	; 0xffffffac
   15b2c:	ldr	r0, [r4, #12]
   15b30:	bl	11be0 <elf_ndxscn@plt>
   15b34:	ldr	r3, [fp, #-104]	; 0xffffff98
   15b38:	mov	r6, #1
   15b3c:	ldr	r5, [fp, #-296]	; 0xfffffed8
   15b40:	cmp	r3, #8
   15b44:	ldrd	r2, [fp, #-84]	; 0xffffffac
   15b48:	add	r0, r5, r0
   15b4c:	moveq	r1, #0
   15b50:	strb	r6, [r0, #-1]
   15b54:	moveq	r0, #0
   15b58:	ldrdne	r0, [fp, #-76]	; 0xffffffb4
   15b5c:	adds	r2, r2, r0
   15b60:	adc	r3, r3, r1
   15b64:	sub	r1, fp, #512	; 0x200
   15b68:	ldrd	r0, [r1, #236]	; 0xec
   15b6c:	cmp	r1, r3
   15b70:	cmpeq	r0, r2
   15b74:	subcc	r4, fp, #512	; 0x200
   15b78:	strdcc	r2, [r4, #236]	; 0xec
   15b7c:	b	15514 <__assert_fail@plt+0x38a4>
   15b80:	ldr	r6, [fp, #-280]	; 0xfffffee8
   15b84:	ldr	ip, [fp, #-244]	; 0xffffff0c
   15b88:	ldr	r3, [fp, #-248]	; 0xffffff08
   15b8c:	str	r6, [fp, #-348]	; 0xfffffea4
   15b90:	b	15638 <__assert_fail@plt+0x39c8>
   15b94:	ldr	r5, [fp, #-280]	; 0xfffffee8
   15b98:	ldr	ip, [fp, #-244]	; 0xffffff0c
   15b9c:	ldr	r3, [fp, #-248]	; 0xffffff08
   15ba0:	str	r5, [fp, #-356]	; 0xfffffe9c
   15ba4:	b	15638 <__assert_fail@plt+0x39c8>
   15ba8:	ldr	ip, [fp, #-296]	; 0xfffffed8
   15bac:	cmp	ip, #0
   15bb0:	subne	r4, r4, #1
   15bb4:	strne	ip, [sl, r4, lsl #2]
   15bb8:	bne	14fa8 <__assert_fail@plt+0x3338>
   15bbc:	b	15034 <__assert_fail@plt+0x33c4>
   15bc0:	mov	ip, #0
   15bc4:	str	ip, [fp, #-280]	; 0xfffffee8
   15bc8:	str	ip, [fp, #-276]	; 0xfffffeec
   15bcc:	mov	r8, #2
   15bd0:	mov	r9, #0
   15bd4:	mov	r4, #0
   15bd8:	str	r4, [fp, #-340]	; 0xfffffeac
   15bdc:	mov	r1, r4
   15be0:	ldr	r0, [fp, #-284]	; 0xfffffee4
   15be4:	bl	11b8c <elf_nextscn@plt>
   15be8:	subs	r4, r0, #0
   15bec:	beq	15ce0 <__assert_fail@plt+0x4070>
   15bf0:	sub	r1, fp, #108	; 0x6c
   15bf4:	bl	11850 <gelf_getshdr@plt>
   15bf8:	subs	r5, r0, #0
   15bfc:	beq	1714c <__assert_fail@plt+0x54dc>
   15c00:	ldrd	r2, [r5, #8]
   15c04:	and	r2, r2, r8
   15c08:	and	r3, r3, r9
   15c0c:	orrs	r6, r2, r3
   15c10:	beq	15bdc <__assert_fail@plt+0x3f6c>
   15c14:	mov	r0, r4
   15c18:	bl	11be0 <elf_ndxscn@plt>
   15c1c:	ldr	r7, [fp, #-312]	; 0xfffffec8
   15c20:	ldr	r3, [r5]
   15c24:	ldr	r1, [r7, #12]
   15c28:	ldr	r2, [r7]
   15c2c:	cmp	r3, r1
   15c30:	bcs	16abc <__assert_fail@plt+0x4e4c>
   15c34:	ldr	ip, [fp, #-276]	; 0xfffffeec
   15c38:	add	r6, r2, r3
   15c3c:	cmp	ip, #0
   15c40:	beq	15c70 <__assert_fail@plt+0x4000>
   15c44:	str	r6, [sp]
   15c48:	mov	r0, r5
   15c4c:	str	ip, [sp, #4]
   15c50:	mov	r2, #0
   15c54:	ldr	r5, [fp, #-280]	; 0xfffffee8
   15c58:	mov	r3, #0
   15c5c:	str	r5, [sp, #8]
   15c60:	bl	12efc <__assert_fail@plt+0x128c>
   15c64:	cmp	r0, #0
   15c68:	strne	r4, [r0, #12]
   15c6c:	bne	15bdc <__assert_fail@plt+0x3f6c>
   15c70:	cmp	sl, #0
   15c74:	ldrne	r3, [fp, #-348]	; 0xfffffea4
   15c78:	movne	r2, #0
   15c7c:	beq	15c9c <__assert_fail@plt+0x402c>
   15c80:	ldr	r1, [r3, #12]
   15c84:	cmp	r4, r1
   15c88:	beq	15bdc <__assert_fail@plt+0x3f6c>
   15c8c:	add	r2, r2, #1
   15c90:	add	r3, r3, #88	; 0x58
   15c94:	cmp	sl, r2
   15c98:	bhi	15c80 <__assert_fail@plt+0x4010>
   15c9c:	mov	r2, #5
   15ca0:	movw	r1, #36956	; 0x905c
   15ca4:	mov	r0, #0
   15ca8:	movt	r1, #1
   15cac:	bl	118d4 <dcgettext@plt>
   15cb0:	mov	r5, r0
   15cb4:	mov	r0, r4
   15cb8:	bl	11be0 <elf_ndxscn@plt>
   15cbc:	str	r6, [sp]
   15cc0:	mov	r2, r5
   15cc4:	mov	r6, #1
   15cc8:	str	r6, [fp, #-340]	; 0xfffffeac
   15ccc:	mov	r3, r0
   15cd0:	mov	r0, #0
   15cd4:	mov	r1, r0
   15cd8:	bl	119a0 <error@plt>
   15cdc:	b	15bdc <__assert_fail@plt+0x3f6c>
   15ce0:	ldr	r7, [fp, #-340]	; 0xfffffeac
   15ce4:	cmp	r7, #0
   15ce8:	bne	15ef0 <__assert_fail@plt+0x4280>
   15cec:	ldr	ip, [fp, #-280]	; 0xfffffee8
   15cf0:	cmp	ip, #0
   15cf4:	beq	16820 <__assert_fail@plt+0x4bb0>
   15cf8:	ldr	r7, [fp, #-276]	; 0xfffffeec
   15cfc:	ldr	r4, [fp, #-340]	; 0xfffffeac
   15d00:	mov	r6, r7
   15d04:	mov	r7, r4
   15d08:	str	r4, [fp, #-368]	; 0xfffffe90
   15d0c:	ldr	r5, [r6, #4]
   15d10:	cmp	sl, #0
   15d14:	ldr	ip, [r6]
   15d18:	str	r5, [fp, #-352]	; 0xfffffea0
   15d1c:	str	ip, [fp, #-360]	; 0xfffffe98
   15d20:	beq	15e84 <__assert_fail@plt+0x4214>
   15d24:	ldr	ip, [fp, #-348]	; 0xfffffea4
   15d28:	mov	r8, #0
   15d2c:	mov	r4, ip
   15d30:	b	15d44 <__assert_fail@plt+0x40d4>
   15d34:	add	r8, r8, #1
   15d38:	add	r4, r4, #88	; 0x58
   15d3c:	cmp	r8, sl
   15d40:	beq	15e84 <__assert_fail@plt+0x4214>
   15d44:	ldr	r3, [r4, #12]
   15d48:	cmp	r3, #0
   15d4c:	bne	15d34 <__assert_fail@plt+0x40c4>
   15d50:	ldr	r2, [r4, #24]
   15d54:	ldr	r3, [r6, #24]
   15d58:	cmp	r2, r3
   15d5c:	bne	15d34 <__assert_fail@plt+0x40c4>
   15d60:	ldrd	r0, [r4, #32]
   15d64:	ldrd	r2, [r6, #32]
   15d68:	cmp	r1, r3
   15d6c:	cmpeq	r0, r2
   15d70:	bne	15d34 <__assert_fail@plt+0x40c4>
   15d74:	ldrd	r0, [r4, #72]	; 0x48
   15d78:	ldrd	r2, [r6, #72]	; 0x48
   15d7c:	cmp	r1, r3
   15d80:	cmpeq	r0, r2
   15d84:	bne	15d34 <__assert_fail@plt+0x40c4>
   15d88:	ldr	r9, [r4, #28]
   15d8c:	ldr	r5, [r6, #28]
   15d90:	cmp	r9, r5
   15d94:	beq	1637c <__assert_fail@plt+0x470c>
   15d98:	ldrd	r0, [r4, #56]	; 0x38
   15d9c:	sub	r2, fp, #512	; 0x200
   15da0:	strd	r0, [r2, #180]	; 0xb4
   15da4:	ldrd	r0, [r6, #56]	; 0x38
   15da8:	strd	r0, [r2, #220]	; 0xdc
   15dac:	ldrd	r0, [r4, #80]	; 0x50
   15db0:	strd	r0, [r2, #108]	; 0x6c
   15db4:	ldrd	r0, [r2, #180]	; 0xb4
   15db8:	ldrd	r2, [r2, #220]	; 0xdc
   15dbc:	cmp	r1, r3
   15dc0:	cmpeq	r0, r2
   15dc4:	ldrd	r0, [r6, #80]	; 0x50
   15dc8:	sub	r2, fp, #512	; 0x200
   15dcc:	strd	r0, [r2, #204]	; 0xcc
   15dd0:	beq	16328 <__assert_fail@plt+0x46b8>
   15dd4:	cmp	r9, #4
   15dd8:	beq	16268 <__assert_fail@plt+0x45f8>
   15ddc:	sub	r1, fp, #512	; 0x200
   15de0:	ldrd	r2, [r1, #108]	; 0x6c
   15de4:	ldrd	r0, [r1, #204]	; 0xcc
   15de8:	cmp	r3, r1
   15dec:	cmpeq	r2, r0
   15df0:	bne	15d34 <__assert_fail@plt+0x40c4>
   15df4:	cmp	r9, r5
   15df8:	beq	15e0c <__assert_fail@plt+0x419c>
   15dfc:	cmp	r9, #1
   15e00:	bne	15d34 <__assert_fail@plt+0x40c4>
   15e04:	cmp	r5, #8
   15e08:	bne	15d34 <__assert_fail@plt+0x40c4>
   15e0c:	sub	r1, fp, #512	; 0x200
   15e10:	ldrd	r2, [r1, #220]	; 0xdc
   15e14:	ldrd	r0, [r1, #180]	; 0xb4
   15e18:	cmp	r3, r1
   15e1c:	cmpeq	r2, r0
   15e20:	bcc	15d34 <__assert_fail@plt+0x40c4>
   15e24:	ldr	r5, [r4, #4]
   15e28:	movw	r1, #37160	; 0x9128
   15e2c:	movt	r1, #1
   15e30:	mov	r0, r5
   15e34:	bl	1185c <strcmp@plt>
   15e38:	cmp	r0, #0
   15e3c:	beq	15e58 <__assert_fail@plt+0x41e8>
   15e40:	mov	r0, r5
   15e44:	movw	r1, #37168	; 0x9130
   15e48:	movt	r1, #1
   15e4c:	bl	1185c <strcmp@plt>
   15e50:	cmp	r0, #0
   15e54:	bne	15d34 <__assert_fail@plt+0x40c4>
   15e58:	sub	r1, fp, #512	; 0x200
   15e5c:	ldrd	r2, [r1, #180]	; 0xb4
   15e60:	ldrd	r0, [r1, #220]	; 0xdc
   15e64:	cmp	r3, r1
   15e68:	cmpeq	r2, r0
   15e6c:	beq	16318 <__assert_fail@plt+0x46a8>
   15e70:	ldr	r5, [fp, #-348]	; 0xfffffea4
   15e74:	cmp	r5, r4
   15e78:	bcc	1715c <__assert_fail@plt+0x54ec>
   15e7c:	str	r4, [fp, #-368]	; 0xfffffe90
   15e80:	b	15d34 <__assert_fail@plt+0x40c4>
   15e84:	mov	r2, #5
   15e88:	movw	r1, #36956	; 0x905c
   15e8c:	mov	r0, #0
   15e90:	movt	r1, #1
   15e94:	bl	118d4 <dcgettext@plt>
   15e98:	mov	r4, r0
   15e9c:	ldr	r0, [fp, #-360]	; 0xfffffe98
   15ea0:	bl	11be0 <elf_ndxscn@plt>
   15ea4:	ldr	r5, [fp, #-352]	; 0xfffffea0
   15ea8:	mov	ip, #1
   15eac:	mov	r2, r4
   15eb0:	str	r5, [sp]
   15eb4:	str	ip, [fp, #-340]	; 0xfffffeac
   15eb8:	mov	r3, r0
   15ebc:	mov	r0, #0
   15ec0:	mov	r1, r0
   15ec4:	bl	119a0 <error@plt>
   15ec8:	ldr	ip, [fp, #-280]	; 0xfffffee8
   15ecc:	add	r7, r7, #1
   15ed0:	add	r6, r6, #88	; 0x58
   15ed4:	cmp	r7, ip
   15ed8:	bne	15d0c <__assert_fail@plt+0x409c>
   15edc:	ldr	r0, [fp, #-276]	; 0xfffffeec
   15ee0:	bl	11898 <free@plt>
   15ee4:	ldr	r4, [fp, #-340]	; 0xfffffeac
   15ee8:	cmp	r4, #0
   15eec:	beq	14f50 <__assert_fail@plt+0x32e0>
   15ef0:	mov	r0, #1
   15ef4:	bl	11a30 <exit@plt>
   15ef8:	mov	r5, #1
   15efc:	str	r5, [fp, #-364]	; 0xfffffe94
   15f00:	b	148d8 <__assert_fail@plt+0x2c68>
   15f04:	ldr	r2, [r8]
   15f08:	str	r3, [r8, #4]
   15f0c:	str	r3, [r2]
   15f10:	str	r3, [r8, #8]
   15f14:	b	158c8 <__assert_fail@plt+0x3c58>
   15f18:	mov	r0, #1
   15f1c:	bl	11988 <dwelf_strtab_init@plt>
   15f20:	str	r0, [fp, #-292]	; 0xfffffedc
   15f24:	b	150ac <__assert_fail@plt+0x343c>
   15f28:	str	r3, [fp, #-344]	; 0xfffffea8
   15f2c:	str	r3, [fp, #-280]	; 0xfffffee8
   15f30:	ldr	r4, [fp, #-348]	; 0xfffffea4
   15f34:	cmp	r4, #0
   15f38:	beq	15f8c <__assert_fail@plt+0x431c>
   15f3c:	ldr	r6, [fp, #-348]	; 0xfffffea4
   15f40:	ldr	ip, [fp, #-264]	; 0xfffffef8
   15f44:	ldr	r5, [fp, #-300]	; 0xfffffed4
   15f48:	ldr	r0, [fp, #-284]	; 0xfffffee4
   15f4c:	ldr	r2, [r6, #12]
   15f50:	ldrh	r1, [r5, #16]
   15f54:	ldr	r3, [fp, #-256]	; 0xffffff00
   15f58:	str	ip, [sp]
   15f5c:	subs	lr, r1, #1
   15f60:	ldr	ip, [r6]
   15f64:	rsbs	r1, lr, #0
   15f68:	adcs	r1, r1, lr
   15f6c:	str	ip, [sp, #4]
   15f70:	ldr	ip, [fp, #-244]	; 0xffffff0c
   15f74:	str	ip, [sp, #8]
   15f78:	ldr	ip, [fp, #-260]	; 0xfffffefc
   15f7c:	ldr	r7, [fp, #-352]	; 0xfffffea0
   15f80:	str	ip, [sp, #12]
   15f84:	str	r7, [sp, #16]
   15f88:	bl	14304 <__assert_fail@plt+0x2694>
   15f8c:	ldr	r0, [fp, #-284]	; 0xfffffee4
   15f90:	mov	r1, #5
   15f94:	mov	r2, #4
   15f98:	bl	1188c <elf_flagelf@plt>
   15f9c:	sub	r0, fp, #512	; 0x200
   15fa0:	ldrd	r0, [r0, #236]	; 0xec
   15fa4:	orrs	r1, r0, r1
   15fa8:	beq	1670c <__assert_fail@plt+0x4a9c>
   15fac:	ldr	r2, [fp, #-256]	; 0xffffff00
   15fb0:	mov	sl, #0
   15fb4:	cmp	r2, #1
   15fb8:	eor	sl, sl, #1
   15fbc:	beq	16050 <__assert_fail@plt+0x43e0>
   15fc0:	ldr	r5, [fp, #-296]	; 0xfffffed8
   15fc4:	mov	r4, #0
   15fc8:	b	15fd8 <__assert_fail@plt+0x4368>
   15fcc:	sub	r3, r2, #1
   15fd0:	cmp	r4, r3
   15fd4:	bcs	16050 <__assert_fail@plt+0x43e0>
   15fd8:	ldrb	r3, [r5], #1
   15fdc:	add	r4, r4, #1
   15fe0:	cmp	r3, #0
   15fe4:	bne	15fcc <__assert_fail@plt+0x435c>
   15fe8:	ldr	r0, [fp, #-284]	; 0xfffffee4
   15fec:	mov	r1, r4
   15ff0:	bl	11bec <elf_getscn@plt>
   15ff4:	sub	r1, fp, #108	; 0x6c
   15ff8:	mov	r7, r0
   15ffc:	bl	11850 <gelf_getshdr@plt>
   16000:	subs	r6, r0, #0
   16004:	beq	16874 <__assert_fail@plt+0x4c04>
   16008:	mov	r0, r7
   1600c:	mov	r1, #0
   16010:	bl	1197c <elf_getdata@plt>
   16014:	mov	r1, #5
   16018:	mov	r2, #1
   1601c:	bl	118b0 <elf_flagdata@plt>
   16020:	cmp	r0, #0
   16024:	beq	168a4 <__assert_fail@plt+0x4c34>
   16028:	cmp	sl, #0
   1602c:	ldr	ip, [r6, #4]
   16030:	beq	16128 <__assert_fail@plt+0x44b8>
   16034:	cmp	ip, #9
   16038:	cmpne	ip, #4
   1603c:	bne	16128 <__assert_fail@plt+0x44b8>
   16040:	ldr	r2, [fp, #-256]	; 0xffffff00
   16044:	sub	r3, r2, #1
   16048:	cmp	r4, r3
   1604c:	bcc	15fd8 <__assert_fail@plt+0x4368>
   16050:	cmp	sl, #0
   16054:	bne	15fb4 <__assert_fail@plt+0x4344>
   16058:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   1605c:	sub	r1, fp, #236	; 0xec
   16060:	bl	11a9c <elf_getphdrnum@plt>
   16064:	cmp	r0, #0
   16068:	bne	16f2c <__assert_fail@plt+0x52bc>
   1606c:	ldr	r1, [fp, #-236]	; 0xffffff14
   16070:	cmp	r1, #0
   16074:	bne	168d4 <__assert_fail@plt+0x4c64>
   16078:	ldr	r0, [fp, #-284]	; 0xfffffee4
   1607c:	mov	r1, #3
   16080:	bl	11b14 <elf_update@plt>
   16084:	cmp	r0, #1
   16088:	sbcs	r2, r1, #0
   1608c:	blt	16ed0 <__assert_fail@plt+0x5260>
   16090:	ldr	r4, [fp, #-292]	; 0xfffffedc
   16094:	cmp	r4, #0
   16098:	beq	160b0 <__assert_fail@plt+0x4440>
   1609c:	mov	r0, r4
   160a0:	bl	11af0 <dwelf_strtab_free@plt>
   160a4:	ldr	r5, [fp, #-340]	; 0xfffffeac
   160a8:	ldr	r0, [r5]
   160ac:	bl	11898 <free@plt>
   160b0:	ldr	r6, [fp, #-280]	; 0xfffffee8
   160b4:	cmp	r6, #0
   160b8:	beq	160d0 <__assert_fail@plt+0x4460>
   160bc:	mov	r0, r6
   160c0:	bl	11af0 <dwelf_strtab_free@plt>
   160c4:	ldr	r7, [fp, #-344]	; 0xfffffea8
   160c8:	ldr	r0, [r7]
   160cc:	bl	11898 <free@plt>
   160d0:	movw	r6, #45472	; 0xb1a0
   160d4:	movt	r6, #2
   160d8:	ldr	r4, [r6]
   160dc:	cmp	r4, #0
   160e0:	bne	160ec <__assert_fail@plt+0x447c>
   160e4:	b	16104 <__assert_fail@plt+0x4494>
   160e8:	mov	r4, r5
   160ec:	ldm	r4, {r0, r5}
   160f0:	bl	11898 <free@plt>
   160f4:	mov	r0, r4
   160f8:	bl	11898 <free@plt>
   160fc:	cmp	r5, #0
   16100:	bne	160e8 <__assert_fail@plt+0x4478>
   16104:	ldr	r4, [fp, #-376]	; 0xfffffe88
   16108:	mov	r1, #0
   1610c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16110:	str	r1, [r6]
   16114:	ldr	r3, [r4]
   16118:	cmp	r2, r3
   1611c:	bne	16f04 <__assert_fail@plt+0x5294>
   16120:	sub	sp, fp, #32
   16124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16128:	ldrd	r2, [r6, #48]	; 0x30
   1612c:	rsbs	r8, r2, #0
   16130:	rsc	r9, r3, #0
   16134:	orrs	lr, r2, r3
   16138:	sub	lr, fp, #512	; 0x200
   1613c:	moveq	r2, #1
   16140:	moveq	r3, #0
   16144:	ldrd	r0, [lr, #236]	; 0xec
   16148:	mvneq	r8, #0
   1614c:	mvneq	r9, #0
   16150:	subs	r0, r0, #1
   16154:	sbc	r1, r1, #0
   16158:	adds	r0, r0, r2
   1615c:	adc	r1, r1, r3
   16160:	cmp	ip, #8
   16164:	and	r2, r0, r8
   16168:	and	r3, r1, r9
   1616c:	strd	r2, [lr, #236]	; 0xec
   16170:	strd	r2, [r6, #24]
   16174:	beq	1618c <__assert_fail@plt+0x451c>
   16178:	ldrd	r0, [lr, #236]	; 0xec
   1617c:	ldrd	r2, [r6, #32]
   16180:	adds	r0, r0, r2
   16184:	adc	r1, r1, r3
   16188:	strd	r0, [lr, #236]	; 0xec
   1618c:	mov	r0, r7
   16190:	mov	r1, r6
   16194:	bl	13438 <__assert_fail@plt+0x17c8>
   16198:	ldr	r3, [fp, #-264]	; 0xfffffef8
   1619c:	cmp	r4, r3
   161a0:	beq	161b4 <__assert_fail@plt+0x4544>
   161a4:	mov	r0, #1
   161a8:	ldr	r2, [fp, #-256]	; 0xffffff00
   161ac:	strb	r0, [r5, #-1]
   161b0:	b	15fcc <__assert_fail@plt+0x435c>
   161b4:	ldr	r0, [fp, #-284]	; 0xfffffee4
   161b8:	sub	r1, fp, #172	; 0xac
   161bc:	bl	11838 <gelf_getehdr@plt>
   161c0:	subs	r6, r0, #0
   161c4:	beq	16ea0 <__assert_fail@plt+0x5230>
   161c8:	ldr	r0, [fp, #-284]	; 0xfffffee4
   161cc:	bl	11928 <gelf_getclass@plt>
   161d0:	sub	r1, fp, #512	; 0x200
   161d4:	ldr	lr, [fp, #-256]	; 0xffffff00
   161d8:	ldrh	ip, [r6, #58]	; 0x3a
   161dc:	lsl	r0, r0, #2
   161e0:	ldrd	r2, [r1, #236]	; 0xec
   161e4:	asr	r1, r0, #31
   161e8:	strh	lr, [r6, #60]	; 0x3c
   161ec:	subs	r2, r2, #1
   161f0:	mul	ip, lr, ip
   161f4:	sbc	r3, r3, #0
   161f8:	adds	r2, r2, r0
   161fc:	sub	lr, fp, #512	; 0x200
   16200:	adc	r3, r3, r1
   16204:	rsbs	r0, r0, #0
   16208:	rsc	r1, r1, #0
   1620c:	and	r2, r2, r0
   16210:	and	r3, r3, r1
   16214:	ldr	r0, [fp, #-284]	; 0xfffffee4
   16218:	mov	r1, r6
   1621c:	strd	r2, [r6, #40]	; 0x28
   16220:	adds	r6, r2, ip
   16224:	adc	r7, r3, #0
   16228:	strd	r6, [lr, #236]	; 0xec
   1622c:	bl	11a0c <gelf_update_ehdr@plt>
   16230:	cmp	r0, #0
   16234:	bne	161a4 <__assert_fail@plt+0x4534>
   16238:	movw	r1, #37816	; 0x93b8
   1623c:	mov	r2, #5
   16240:	movt	r1, #1
   16244:	bl	118d4 <dcgettext@plt>
   16248:	mov	r4, r0
   1624c:	mvn	r0, #0
   16250:	bl	11a3c <elf_errmsg@plt>
   16254:	mov	r3, r0
   16258:	mov	r2, r4
   1625c:	mov	r0, #1
   16260:	mov	r1, #0
   16264:	bl	119a0 <error@plt>
   16268:	cmp	r5, #9
   1626c:	bne	15ddc <__assert_fail@plt+0x416c>
   16270:	sub	r0, fp, #512	; 0x200
   16274:	sub	r1, fp, #512	; 0x200
   16278:	ldrd	r2, [r0, #204]	; 0xcc
   1627c:	adds	r2, r2, r2
   16280:	adc	r3, r3, r3
   16284:	strd	r2, [r1, #100]	; 0x64
   16288:	ldrd	r2, [r1, #108]	; 0x6c
   1628c:	sub	r1, fp, #512	; 0x200
   16290:	adds	r2, r2, r2
   16294:	adc	r3, r3, r3
   16298:	strd	r2, [r1, #108]	; 0x6c
   1629c:	mov	r3, r1
   162a0:	ldrd	r0, [r1, #100]	; 0x64
   162a4:	ldrd	r2, [r3, #204]	; 0xcc
   162a8:	adds	r0, r0, r2
   162ac:	adc	r1, r1, r3
   162b0:	sub	r3, fp, #512	; 0x200
   162b4:	ldrd	r2, [r3, #108]	; 0x6c
   162b8:	cmp	r3, r1
   162bc:	cmpeq	r2, r0
   162c0:	bne	15d34 <__assert_fail@plt+0x40c4>
   162c4:	sub	r2, fp, #512	; 0x200
   162c8:	sub	r3, fp, #512	; 0x200
   162cc:	ldrd	r0, [r2, #220]	; 0xdc
   162d0:	adds	r0, r0, r0
   162d4:	adc	r1, r1, r1
   162d8:	strd	r0, [r3, #108]	; 0x6c
   162dc:	ldrd	r0, [r3, #180]	; 0xb4
   162e0:	sub	r3, fp, #512	; 0x200
   162e4:	adds	r0, r0, r0
   162e8:	adc	r1, r1, r1
   162ec:	strd	r0, [r3, #204]	; 0xcc
   162f0:	mov	r1, r3
   162f4:	ldrd	r2, [r3, #220]	; 0xdc
   162f8:	ldrd	r0, [r1, #108]	; 0x6c
   162fc:	adds	r2, r2, r0
   16300:	adc	r3, r3, r1
   16304:	sub	r1, fp, #512	; 0x200
   16308:	ldrd	r0, [r1, #204]	; 0xcc
   1630c:	cmp	r1, r3
   16310:	cmpeq	r0, r2
   16314:	bne	15d34 <__assert_fail@plt+0x40c4>
   16318:	mov	ip, r4
   1631c:	ldr	r3, [r6, #12]
   16320:	str	r3, [ip, #12]
   16324:	b	15ec8 <__assert_fail@plt+0x4258>
   16328:	ldrd	r2, [r2, #108]	; 0x6c
   1632c:	cmp	r1, r3
   16330:	cmpeq	r0, r2
   16334:	beq	16868 <__assert_fail@plt+0x4bf8>
   16338:	sub	r0, fp, #512	; 0x200
   1633c:	sub	r2, fp, #512	; 0x200
   16340:	cmp	r5, #1
   16344:	ldrd	r0, [r0, #180]	; 0xb4
   16348:	strd	r0, [r2, #220]	; 0xdc
   1634c:	bne	15dd4 <__assert_fail@plt+0x4164>
   16350:	movw	r1, #37152	; 0x9120
   16354:	ldr	r0, [r4, #4]
   16358:	movt	r1, #1
   1635c:	bl	1185c <strcmp@plt>
   16360:	cmp	r0, #0
   16364:	beq	16318 <__assert_fail@plt+0x46a8>
   16368:	sub	r2, fp, #512	; 0x200
   1636c:	sub	ip, fp, #512	; 0x200
   16370:	ldrd	r2, [r2, #220]	; 0xdc
   16374:	strd	r2, [ip, #180]	; 0xb4
   16378:	b	15dd4 <__assert_fail@plt+0x4164>
   1637c:	ldrd	r0, [r4, #80]	; 0x50
   16380:	sub	r2, fp, #512	; 0x200
   16384:	strd	r0, [r2, #108]	; 0x6c
   16388:	ldrd	r0, [r6, #80]	; 0x50
   1638c:	strd	r0, [r2, #204]	; 0xcc
   16390:	ldrd	r2, [r2, #108]	; 0x6c
   16394:	cmp	r3, r1
   16398:	cmpeq	r2, r0
   1639c:	ldrd	r0, [r4, #56]	; 0x38
   163a0:	sub	r2, fp, #512	; 0x200
   163a4:	strd	r0, [r2, #180]	; 0xb4
   163a8:	ldrd	r0, [r6, #56]	; 0x38
   163ac:	strd	r0, [r2, #220]	; 0xdc
   163b0:	ldrd	r2, [r2, #180]	; 0xb4
   163b4:	beq	16834 <__assert_fail@plt+0x4bc4>
   163b8:	cmp	r3, r1
   163bc:	cmpeq	r2, r0
   163c0:	bne	15dd4 <__assert_fail@plt+0x4164>
   163c4:	b	16338 <__assert_fail@plt+0x46c8>
   163c8:	ldr	r0, [fp, #-316]	; 0xfffffec4
   163cc:	mov	r1, #0
   163d0:	bl	1197c <elf_getdata@plt>
   163d4:	str	r0, [fp, #-324]	; 0xfffffebc
   163d8:	mov	r1, #0
   163dc:	ldr	r0, [fp, #-364]	; 0xfffffe94
   163e0:	bl	1197c <elf_getdata@plt>
   163e4:	ldr	r3, [fp, #-256]	; 0xffffff00
   163e8:	str	r0, [fp, #-344]	; 0xfffffea8
   163ec:	str	sp, [fp, #-368]	; 0xfffffe90
   163f0:	lsl	r3, r3, #2
   163f4:	ldr	r0, [fp, #-364]	; 0xfffffe94
   163f8:	add	r3, r3, #6
   163fc:	bic	r3, r3, #7
   16400:	sub	sp, sp, r3
   16404:	add	r6, sp, #32
   16408:	bl	11be0 <elf_ndxscn@plt>
   1640c:	ldr	r3, [fp, #-264]	; 0xfffffef8
   16410:	cmp	r0, r3
   16414:	beq	16674 <__assert_fail@plt+0x4a04>
   16418:	ldr	r0, [fp, #-280]	; 0xfffffee8
   1641c:	ldr	r1, [fp, #-344]	; 0xfffffea8
   16420:	bl	11b68 <dwelf_strtab_finalize@plt>
   16424:	subs	r1, r0, #0
   16428:	beq	17088 <__assert_fail@plt+0x5418>
   1642c:	ldr	r0, [fp, #-344]	; 0xfffffea8
   16430:	mov	r1, #5
   16434:	mov	r2, #1
   16438:	bl	118b0 <elf_flagdata@plt>
   1643c:	ldr	r0, [fp, #-364]	; 0xfffffe94
   16440:	bl	11be0 <elf_ndxscn@plt>
   16444:	ldr	r3, [fp, #-264]	; 0xfffffef8
   16448:	cmp	r0, r3
   1644c:	beq	16968 <__assert_fail@plt+0x4cf8>
   16450:	ldr	r1, [fp, #-372]	; 0xfffffe8c
   16454:	ldr	r0, [fp, #-316]	; 0xfffffec4
   16458:	bl	11850 <gelf_getshdr@plt>
   1645c:	subs	r8, r0, #0
   16460:	beq	16af0 <__assert_fail@plt+0x4e80>
   16464:	ldr	r3, [r8, #56]	; 0x38
   16468:	mov	r2, #0
   1646c:	ldr	r4, [fp, #-324]	; 0xfffffebc
   16470:	mla	r3, sl, r3, r3
   16474:	str	r3, [r4, #12]
   16478:	mov	r0, r3
   1647c:	str	r3, [r8, #32]
   16480:	str	r2, [r8, #36]	; 0x24
   16484:	bl	17a28 <__assert_fail@plt+0x5db8>
   16488:	ldr	r5, [fp, #-324]	; 0xfffffebc
   1648c:	movw	r6, #45472	; 0xb1a0
   16490:	movt	r6, #2
   16494:	mov	r4, r0
   16498:	mov	r0, #8
   1649c:	str	r4, [r5]
   164a0:	ldr	r5, [r6]
   164a4:	bl	17a28 <__assert_fail@plt+0x5db8>
   164a8:	mov	r3, r0
   164ac:	str	r3, [r6]
   164b0:	sub	r6, fp, #108	; 0x6c
   164b4:	mov	ip, #0
   164b8:	str	r4, [r3]
   164bc:	mov	r1, ip
   164c0:	str	r5, [r3, #4]
   164c4:	mov	r2, ip
   164c8:	ldr	r0, [fp, #-324]	; 0xfffffebc
   164cc:	mov	r3, r6
   164d0:	str	ip, [fp, #-108]	; 0xffffff94
   164d4:	str	ip, [fp, #-104]	; 0xffffff98
   164d8:	str	ip, [fp, #-100]	; 0xffffff9c
   164dc:	str	ip, [fp, #-96]	; 0xffffffa0
   164e0:	str	ip, [fp, #-92]	; 0xffffffa4
   164e4:	str	ip, [fp, #-88]	; 0xffffffa8
   164e8:	str	ip, [sp]
   164ec:	bl	118f8 <gelf_update_symshndx@plt>
   164f0:	cmp	r0, #0
   164f4:	beq	16ac0 <__assert_fail@plt+0x4e50>
   164f8:	cmp	sl, #0
   164fc:	mov	r5, #1
   16500:	str	r5, [r8, #44]	; 0x2c
   16504:	ldrne	r4, [fp, #-308]	; 0xfffffecc
   16508:	movne	r9, #0
   1650c:	bne	1655c <__assert_fail@plt+0x48ec>
   16510:	b	165a0 <__assert_fail@plt+0x4930>
   16514:	ldr	r3, [r8, #44]	; 0x2c
   16518:	cmp	r3, r5
   1651c:	bne	17130 <__assert_fail@plt+0x54c0>
   16520:	mov	r7, r5
   16524:	add	r3, r5, #1
   16528:	str	r3, [r8, #44]	; 0x2c
   1652c:	str	r9, [sp]
   16530:	mov	r1, #0
   16534:	ldr	r0, [fp, #-324]	; 0xfffffebc
   16538:	mov	r2, r5
   1653c:	mov	r3, r6
   16540:	bl	118f8 <gelf_update_symshndx@plt>
   16544:	cmp	r0, #0
   16548:	beq	17100 <__assert_fail@plt+0x5490>
   1654c:	cmp	sl, r7
   16550:	add	r4, r4, #32
   16554:	add	r5, r5, #1
   16558:	bls	165a0 <__assert_fail@plt+0x4930>
   1655c:	ldr	r0, [r4, #4]
   16560:	bl	11a60 <dwelf_strent_off@plt>
   16564:	str	r0, [fp, #-108]	; 0xffffff94
   16568:	ldrd	r2, [r4, #8]
   1656c:	strd	r2, [fp, #-100]	; 0xffffff9c
   16570:	ldrd	r2, [r4, #16]
   16574:	strd	r2, [fp, #-92]	; 0xffffffa4
   16578:	ldr	r3, [r4, #24]
   1657c:	strh	r3, [fp, #-102]	; 0xffffff9a
   16580:	ldrb	r3, [r4, #28]
   16584:	lsrs	r7, r3, #4
   16588:	strb	r3, [fp, #-104]	; 0xffffff98
   1658c:	ldrb	r3, [r4, #29]
   16590:	strb	r3, [fp, #-103]	; 0xffffff99
   16594:	beq	16514 <__assert_fail@plt+0x48a4>
   16598:	mov	r7, r5
   1659c:	b	1652c <__assert_fail@plt+0x48bc>
   165a0:	ldr	r0, [fp, #-324]	; 0xfffffebc
   165a4:	mov	r1, #5
   165a8:	mov	r2, #1
   165ac:	bl	118b0 <elf_flagdata@plt>
   165b0:	ldr	r0, [fp, #-316]	; 0xfffffec4
   165b4:	mov	r1, r8
   165b8:	bl	13438 <__assert_fail@plt+0x17c8>
   165bc:	ldr	r4, [fp, #-360]	; 0xfffffe98
   165c0:	cmp	r4, #0
   165c4:	beq	16658 <__assert_fail@plt+0x49e8>
   165c8:	ldr	r5, [fp, #-356]	; 0xfffffe9c
   165cc:	ldr	r0, [r5]
   165d0:	bl	11be0 <elf_ndxscn@plt>
   165d4:	ldr	ip, [fp, #-244]	; 0xffffff0c
   165d8:	mov	r6, #88	; 0x58
   165dc:	ldr	r3, [fp, #-248]	; 0xffffff08
   165e0:	mov	r7, r0
   165e4:	sub	r2, ip, #1
   165e8:	mla	r2, r6, r2, r3
   165ec:	cmp	r3, r2
   165f0:	bcs	16658 <__assert_fail@plt+0x49e8>
   165f4:	add	r4, r3, r6
   165f8:	add	sl, r8, #32
   165fc:	add	r9, r8, #56	; 0x38
   16600:	b	16618 <__assert_fail@plt+0x49a8>
   16604:	sub	r2, ip, #1
   16608:	add	r4, r4, #88	; 0x58
   1660c:	mla	r2, r6, r2, r3
   16610:	cmp	r5, r2
   16614:	bcs	16658 <__assert_fail@plt+0x49e8>
   16618:	ldr	r0, [r4, #-76]	; 0xffffffb4
   1661c:	mov	r5, r4
   16620:	cmp	r0, #0
   16624:	beq	16604 <__assert_fail@plt+0x4994>
   16628:	ldr	r2, [r4, #-24]	; 0xffffffe8
   1662c:	cmp	r7, r2
   16630:	bne	16604 <__assert_fail@plt+0x4994>
   16634:	ldr	r1, [r4, #-88]	; 0xffffffa8
   16638:	sub	r2, r4, #64	; 0x40
   1663c:	str	sl, [sp]
   16640:	str	r9, [sp, #4]
   16644:	ldr	r3, [fp, #-384]	; 0xfffffe80
   16648:	bl	136dc <__assert_fail@plt+0x1a6c>
   1664c:	ldr	ip, [fp, #-244]	; 0xffffff0c
   16650:	ldr	r3, [fp, #-248]	; 0xffffff08
   16654:	b	16604 <__assert_fail@plt+0x4994>
   16658:	ldr	r1, [fp, #-316]	; 0xfffffec4
   1665c:	mov	r2, r8
   16660:	ldr	r3, [fp, #-388]	; 0xfffffe7c
   16664:	ldr	r0, [fp, #-284]	; 0xfffffee4
   16668:	bl	13e00 <__assert_fail@plt+0x2190>
   1666c:	ldr	sp, [fp, #-380]	; 0xfffffe84
   16670:	b	15f30 <__assert_fail@plt+0x42c0>
   16674:	ldr	r3, [fp, #-256]	; 0xffffff00
   16678:	cmp	r3, #1
   1667c:	subne	r5, r6, #4
   16680:	movne	r4, #0
   16684:	beq	166e0 <__assert_fail@plt+0x4a70>
   16688:	add	r4, r4, #1
   1668c:	ldr	r0, [fp, #-284]	; 0xfffffee4
   16690:	mov	r1, r4
   16694:	bl	11bec <elf_getscn@plt>
   16698:	sub	r1, fp, #108	; 0x6c
   1669c:	bl	11850 <gelf_getshdr@plt>
   166a0:	ldr	r7, [fp, #-312]	; 0xfffffec8
   166a4:	ldr	r3, [r0]
   166a8:	ldr	r2, [r7, #12]
   166ac:	ldr	r1, [r7]
   166b0:	cmp	r3, r2
   166b4:	bcs	170f8 <__assert_fail@plt+0x5488>
   166b8:	add	r1, r1, r3
   166bc:	ldr	r0, [fp, #-280]	; 0xfffffee8
   166c0:	bl	119b8 <dwelf_strtab_add@plt>
   166c4:	cmp	r0, #0
   166c8:	str	r0, [r5, #4]!
   166cc:	beq	16a88 <__assert_fail@plt+0x4e18>
   166d0:	ldr	r3, [fp, #-256]	; 0xffffff00
   166d4:	sub	r3, r3, #1
   166d8:	cmp	r3, r4
   166dc:	bhi	16688 <__assert_fail@plt+0x4a18>
   166e0:	ldr	r4, [fp, #-292]	; 0xfffffedc
   166e4:	cmp	r4, #0
   166e8:	beq	16418 <__assert_fail@plt+0x47a8>
   166ec:	ldr	r0, [fp, #-292]	; 0xfffffedc
   166f0:	bl	11af0 <dwelf_strtab_free@plt>
   166f4:	ldr	r4, [fp, #-340]	; 0xfffffeac
   166f8:	mov	r5, #0
   166fc:	str	r5, [fp, #-292]	; 0xfffffedc
   16700:	ldr	r0, [r4]
   16704:	bl	11898 <free@plt>
   16708:	b	16418 <__assert_fail@plt+0x47a8>
   1670c:	mov	r2, #1
   16710:	ldr	r0, [fp, #-284]	; 0xfffffee4
   16714:	mov	r3, r2
   16718:	mov	r1, #3
   1671c:	bl	11994 <gelf_fsize@plt>
   16720:	sub	r4, fp, #512	; 0x200
   16724:	mov	r2, r0
   16728:	mov	r3, #0
   1672c:	strd	r2, [r4, #236]	; 0xec
   16730:	b	15fac <__assert_fail@plt+0x433c>
   16734:	movw	r1, #35816	; 0x8be8
   16738:	mov	r2, #5
   1673c:	movt	r1, #1
   16740:	bl	118d4 <dcgettext@plt>
   16744:	mov	r4, r0
   16748:	mvn	r0, #0
   1674c:	bl	11a3c <elf_errmsg@plt>
   16750:	mov	r3, r0
   16754:	mov	r2, r4
   16758:	mov	r0, #1
   1675c:	mov	r1, #0
   16760:	bl	119a0 <error@plt>
   16764:	bl	11c40 <_Unwind_Resume@plt>
   16768:	ldr	r6, [fp, #-356]	; 0xfffffe9c
   1676c:	cmp	r6, #0
   16770:	beq	16f60 <__assert_fail@plt+0x52f0>
   16774:	ldr	r3, [fp, #-256]	; 0xffffff00
   16778:	cmp	ip, r3
   1677c:	bne	167cc <__assert_fail@plt+0x4b5c>
   16780:	ldr	r7, [fp, #-316]	; 0xfffffec4
   16784:	str	r7, [fp, #-344]	; 0xfffffea8
   16788:	str	r7, [fp, #-280]	; 0xfffffee8
   1678c:	b	15f30 <__assert_fail@plt+0x42c0>
   16790:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   16794:	add	r1, r6, #24
   16798:	bl	13598 <__assert_fail@plt+0x1928>
   1679c:	b	14ed0 <__assert_fail@plt+0x3260>
   167a0:	str	sl, [fp, #-280]	; 0xfffffee8
   167a4:	ldr	sl, [fp, #-352]	; 0xfffffea0
   167a8:	ldr	r0, [fp, #-276]	; 0xfffffeec
   167ac:	mov	r2, #88	; 0x58
   167b0:	ldr	r1, [fp, #-280]	; 0xfffffee8
   167b4:	movw	r3, #18036	; 0x4674
   167b8:	movt	r3, #1
   167bc:	bl	11bc8 <qsort@plt>
   167c0:	ldr	r0, [fp, #-340]	; 0xfffffeac
   167c4:	bl	11898 <free@plt>
   167c8:	b	15bcc <__assert_fail@plt+0x3f5c>
   167cc:	ldr	lr, [fp, #-264]	; 0xfffffef8
   167d0:	ldr	r7, [fp, #-300]	; 0xfffffed4
   167d4:	ldr	r0, [fp, #-284]	; 0xfffffee4
   167d8:	ldr	r2, [r6]
   167dc:	ldrh	r1, [r7, #16]
   167e0:	str	lr, [sp]
   167e4:	ldr	lr, [r6, #12]
   167e8:	subs	r4, r1, #1
   167ec:	rsbs	r1, r4, #0
   167f0:	str	ip, [sp, #8]
   167f4:	adcs	r1, r1, r4
   167f8:	str	lr, [sp, #4]
   167fc:	ldr	ip, [fp, #-260]	; 0xfffffefc
   16800:	ldr	r4, [fp, #-352]	; 0xfffffea0
   16804:	str	ip, [sp, #12]
   16808:	str	r4, [sp, #16]
   1680c:	bl	14304 <__assert_fail@plt+0x2694>
   16810:	mov	r5, #0
   16814:	str	r5, [fp, #-344]	; 0xfffffea8
   16818:	str	r5, [fp, #-280]	; 0xfffffee8
   1681c:	b	15f30 <__assert_fail@plt+0x42c0>
   16820:	ldr	r7, [fp, #-280]	; 0xfffffee8
   16824:	ldr	r0, [fp, #-276]	; 0xfffffeec
   16828:	str	r7, [fp, #-368]	; 0xfffffe90
   1682c:	bl	11898 <free@plt>
   16830:	b	14f50 <__assert_fail@plt+0x32e0>
   16834:	cmp	r3, r1
   16838:	cmpeq	r2, r0
   1683c:	beq	16318 <__assert_fail@plt+0x46a8>
   16840:	bls	16854 <__assert_fail@plt+0x4be4>
   16844:	ldr	lr, [fp, #-300]	; 0xfffffed4
   16848:	ldrh	r1, [lr, #16]
   1684c:	cmp	r1, #2
   16850:	beq	16f10 <__assert_fail@plt+0x52a0>
   16854:	sub	r0, fp, #512	; 0x200
   16858:	sub	r2, fp, #512	; 0x200
   1685c:	ldrd	r0, [r0, #108]	; 0x6c
   16860:	strd	r0, [r2, #204]	; 0xcc
   16864:	b	15dd4 <__assert_fail@plt+0x4164>
   16868:	cmp	r5, #8
   1686c:	bne	16338 <__assert_fail@plt+0x46c8>
   16870:	b	16350 <__assert_fail@plt+0x46e0>
   16874:	movw	r1, #35892	; 0x8c34
   16878:	mov	r2, #5
   1687c:	movt	r1, #1
   16880:	bl	118d4 <dcgettext@plt>
   16884:	mov	r4, r0
   16888:	mvn	r0, #0
   1688c:	bl	11a3c <elf_errmsg@plt>
   16890:	mov	r3, r0
   16894:	mov	r2, r4
   16898:	mov	r0, #1
   1689c:	mov	r1, #0
   168a0:	bl	119a0 <error@plt>
   168a4:	movw	r1, #37784	; 0x9398
   168a8:	mov	r2, #5
   168ac:	movt	r1, #1
   168b0:	bl	118d4 <dcgettext@plt>
   168b4:	mov	r4, r0
   168b8:	mvn	r0, #0
   168bc:	bl	11a3c <elf_errmsg@plt>
   168c0:	mov	r3, r0
   168c4:	mov	r2, r4
   168c8:	mov	r0, #1
   168cc:	mov	r1, #0
   168d0:	bl	119a0 <error@plt>
   168d4:	ldr	r0, [fp, #-284]	; 0xfffffee4
   168d8:	bl	11b44 <gelf_newphdr@plt>
   168dc:	cmp	r0, #0
   168e0:	beq	170c8 <__assert_fail@plt+0x5458>
   168e4:	ldr	r3, [fp, #-236]	; 0xffffff14
   168e8:	cmp	r3, #0
   168ec:	subne	r6, fp, #108	; 0x6c
   168f0:	movne	r4, #0
   168f4:	bne	16920 <__assert_fail@plt+0x4cb0>
   168f8:	b	16078 <__assert_fail@plt+0x4408>
   168fc:	ldr	r0, [fp, #-284]	; 0xfffffee4
   16900:	mov	r1, r4
   16904:	bl	11ae4 <gelf_update_phdr@plt>
   16908:	cmp	r0, #0
   1690c:	beq	17098 <__assert_fail@plt+0x5428>
   16910:	ldr	r3, [fp, #-236]	; 0xffffff14
   16914:	add	r4, r4, #1
   16918:	cmp	r3, r4
   1691c:	bls	16078 <__assert_fail@plt+0x4408>
   16920:	ldr	r0, [fp, #-336]	; 0xfffffeb0
   16924:	mov	r1, r4
   16928:	mov	r2, r6
   1692c:	bl	11904 <gelf_getphdr@plt>
   16930:	subs	r2, r0, #0
   16934:	bne	168fc <__assert_fail@plt+0x4c8c>
   16938:	movw	r1, #37848	; 0x93d8
   1693c:	mov	r2, #5
   16940:	movt	r1, #1
   16944:	bl	118d4 <dcgettext@plt>
   16948:	mov	r4, r0
   1694c:	mvn	r0, #0
   16950:	bl	11a3c <elf_errmsg@plt>
   16954:	mov	r3, r0
   16958:	mov	r2, r4
   1695c:	mov	r0, #1
   16960:	mov	r1, #0
   16964:	bl	119a0 <error@plt>
   16968:	ldr	r3, [fp, #-256]	; 0xffffff00
   1696c:	cmp	r3, #1
   16970:	beq	16450 <__assert_fail@plt+0x47e0>
   16974:	sub	r5, r6, #4
   16978:	mov	r4, #0
   1697c:	add	r4, r4, #1
   16980:	ldr	r0, [fp, #-284]	; 0xfffffee4
   16984:	mov	r1, r4
   16988:	bl	11bec <elf_getscn@plt>
   1698c:	sub	r1, fp, #108	; 0x6c
   16990:	mov	r6, r0
   16994:	bl	11850 <gelf_getshdr@plt>
   16998:	mov	r7, r0
   1699c:	ldr	r0, [r5, #4]!
   169a0:	bl	11a60 <dwelf_strent_off@plt>
   169a4:	ldr	ip, [fp, #-332]	; 0xfffffeb4
   169a8:	mov	r1, r7
   169ac:	str	r0, [ip]
   169b0:	mov	r0, r6
   169b4:	bl	13438 <__assert_fail@plt+0x17c8>
   169b8:	ldr	r3, [fp, #-256]	; 0xffffff00
   169bc:	sub	r3, r3, #1
   169c0:	cmp	r3, r4
   169c4:	bhi	1697c <__assert_fail@plt+0x4d0c>
   169c8:	b	16450 <__assert_fail@plt+0x47e0>
   169cc:	mov	r2, #0
   169d0:	mov	r3, r2
   169d4:	b	157bc <__assert_fail@plt+0x3b4c>
   169d8:	ldr	r6, [fp, #-360]	; 0xfffffe98
   169dc:	str	sp, [fp, #-380]	; 0xfffffe84
   169e0:	cmp	r6, #0
   169e4:	moveq	r7, #1
   169e8:	beq	156a4 <__assert_fail@plt+0x3a34>
   169ec:	ldr	r7, [fp, #-356]	; 0xfffffe9c
   169f0:	ldrd	r2, [r7, #80]	; 0x50
   169f4:	ldrd	r0, [r7, #56]	; 0x38
   169f8:	orrs	ip, r2, r3
   169fc:	moveq	r2, #1
   16a00:	moveq	r3, #0
   16a04:	bl	17b54 <__assert_fail@plt+0x5ee4>
   16a08:	mov	r7, r0
   16a0c:	b	156a4 <__assert_fail@plt+0x3a34>
   16a10:	muleq	r1, r0, r7
   16a14:	mov	r2, #5
   16a18:	movw	r1, #37404	; 0x921c
   16a1c:	mov	r0, #0
   16a20:	movt	r1, #1
   16a24:	bl	118d4 <dcgettext@plt>
   16a28:	mov	r3, r6
   16a2c:	mov	r1, #0
   16a30:	mov	r2, r0
   16a34:	mov	r0, #1
   16a38:	bl	119a0 <error@plt>
   16a3c:	movw	r1, #36704	; 0x8f60
   16a40:	mov	r2, #5
   16a44:	movt	r1, #1
   16a48:	bl	118d4 <dcgettext@plt>
   16a4c:	mov	r4, r0
   16a50:	mvn	r0, #0
   16a54:	bl	11a3c <elf_errmsg@plt>
   16a58:	mov	r3, r0
   16a5c:	mov	r2, r4
   16a60:	mov	r0, #1
   16a64:	mov	r1, #0
   16a68:	bl	119a0 <error@plt>
   16a6c:	movw	r0, #37540	; 0x92a4
   16a70:	movw	r1, #35020	; 0x88cc
   16a74:	movt	r0, #1
   16a78:	movt	r1, #1
   16a7c:	movw	r2, #1831	; 0x727
   16a80:	ldr	r3, [pc, #-120]	; 16a10 <__assert_fail@plt+0x4da0>
   16a84:	bl	11c70 <__assert_fail@plt>
   16a88:	movw	r1, #37220	; 0x9164
   16a8c:	mov	r2, #5
   16a90:	movt	r1, #1
   16a94:	bl	118d4 <dcgettext@plt>
   16a98:	mov	r4, r0
   16a9c:	mvn	r0, #0
   16aa0:	bl	11a3c <elf_errmsg@plt>
   16aa4:	mov	r3, r0
   16aa8:	mov	r2, r4
   16aac:	mov	r0, #1
   16ab0:	mov	r1, #0
   16ab4:	bl	119a0 <error@plt>
   16ab8:	mov	r0, r9
   16abc:	bl	11c7c <__assert_fail@plt+0xc>
   16ac0:	movw	r1, #36704	; 0x8f60
   16ac4:	mov	r2, #5
   16ac8:	movt	r1, #1
   16acc:	bl	118d4 <dcgettext@plt>
   16ad0:	mov	r4, r0
   16ad4:	mvn	r0, #0
   16ad8:	bl	11a3c <elf_errmsg@plt>
   16adc:	mov	r3, r0
   16ae0:	mov	r2, r4
   16ae4:	mov	r0, #1
   16ae8:	mov	r1, #0
   16aec:	bl	119a0 <error@plt>
   16af0:	movw	r1, #35892	; 0x8c34
   16af4:	mov	r2, #5
   16af8:	movt	r1, #1
   16afc:	bl	118d4 <dcgettext@plt>
   16b00:	mov	r4, r0
   16b04:	mvn	r0, #0
   16b08:	bl	11a3c <elf_errmsg@plt>
   16b0c:	mov	r3, r0
   16b10:	mov	r2, r4
   16b14:	mov	r0, #1
   16b18:	mov	r1, #0
   16b1c:	bl	119a0 <error@plt>
   16b20:	movw	r2, #37484	; 0x926c
   16b24:	mov	r0, #1
   16b28:	movt	r2, #1
   16b2c:	mov	r1, #0
   16b30:	bl	119a0 <error@plt>
   16b34:	movw	r1, #35892	; 0x8c34
   16b38:	mov	r2, #5
   16b3c:	movt	r1, #1
   16b40:	bl	118d4 <dcgettext@plt>
   16b44:	mov	r4, r0
   16b48:	mvn	r0, #0
   16b4c:	bl	11a3c <elf_errmsg@plt>
   16b50:	mov	r3, r0
   16b54:	mov	r2, r4
   16b58:	mov	r0, #1
   16b5c:	mov	r1, #0
   16b60:	bl	119a0 <error@plt>
   16b64:	ldr	sp, [fp, #-380]	; 0xfffffe84
   16b68:	b	16764 <__assert_fail@plt+0x4af4>
   16b6c:	mov	r4, #0
   16b70:	str	sp, [fp, #-280]	; 0xfffffee8
   16b74:	str	r4, [fp, #-292]	; 0xfffffedc
   16b78:	str	r4, [fp, #-352]	; 0xfffffea0
   16b7c:	str	r4, [fp, #-340]	; 0xfffffeac
   16b80:	b	15304 <__assert_fail@plt+0x3694>
   16b84:	movw	r1, #37192	; 0x9148
   16b88:	movt	r1, #1
   16b8c:	mov	r0, #0
   16b90:	mov	r2, #5
   16b94:	bl	118d4 <dcgettext@plt>
   16b98:	mov	r4, r0
   16b9c:	mvn	r0, #0
   16ba0:	bl	11a3c <elf_errmsg@plt>
   16ba4:	mov	r2, r4
   16ba8:	mov	r1, #0
   16bac:	mov	r3, r0
   16bb0:	mov	r0, #1
   16bb4:	bl	119a0 <error@plt>
   16bb8:	ldr	ip, [fp, #-308]	; 0xfffffecc
   16bbc:	ldr	r5, [fp, #-240]	; 0xffffff10
   16bc0:	add	r4, ip, #1
   16bc4:	cmp	r4, r5
   16bc8:	bcs	14aa8 <__assert_fail@plt+0x2e38>
   16bcc:	mov	r0, r8
   16bd0:	mov	r1, r4
   16bd4:	mov	r2, r7
   16bd8:	ldr	r3, [fp, #-292]	; 0xfffffedc
   16bdc:	bl	12e54 <__assert_fail@plt+0x11e4>
   16be0:	cmp	r0, #0
   16be4:	bne	16d54 <__assert_fail@plt+0x50e4>
   16be8:	add	r4, r4, #1
   16bec:	cmp	r4, r5
   16bf0:	bcc	16bcc <__assert_fail@plt+0x4f5c>
   16bf4:	b	14aa8 <__assert_fail@plt+0x2e38>
   16bf8:	movw	r1, #36796	; 0x8fbc
   16bfc:	movt	r1, #1
   16c00:	mov	r0, r4
   16c04:	mov	r2, #5
   16c08:	bl	118d4 <dcgettext@plt>
   16c0c:	mov	r5, r0
   16c10:	mvn	r0, #0
   16c14:	bl	11a3c <elf_errmsg@plt>
   16c18:	mov	r2, r5
   16c1c:	mov	r1, r4
   16c20:	mov	r3, r0
   16c24:	mov	r0, #1
   16c28:	bl	119a0 <error@plt>
   16c2c:	movw	r1, #37220	; 0x9164
   16c30:	movt	r1, #1
   16c34:	mov	r5, r3
   16c38:	mov	r2, #5
   16c3c:	bl	118d4 <dcgettext@plt>
   16c40:	mov	r4, r0
   16c44:	mvn	r0, #0
   16c48:	bl	11a3c <elf_errmsg@plt>
   16c4c:	mov	r2, r4
   16c50:	mov	r1, r5
   16c54:	mov	r3, r0
   16c58:	mov	r0, #1
   16c5c:	bl	119a0 <error@plt>
   16c60:	movw	r1, #35892	; 0x8c34
   16c64:	mov	r4, r5
   16c68:	mov	r2, #5
   16c6c:	movt	r1, #1
   16c70:	b	16c08 <__assert_fail@plt+0x4f98>
   16c74:	mov	r2, #5
   16c78:	movw	r1, #35960	; 0x8c78
   16c7c:	movt	r1, #1
   16c80:	mov	r5, r0
   16c84:	bl	118d4 <dcgettext@plt>
   16c88:	mov	r6, r0
   16c8c:	mov	r0, r7
   16c90:	bl	11be0 <elf_ndxscn@plt>
   16c94:	mov	r4, r0
   16c98:	mvn	r0, #0
   16c9c:	bl	11a3c <elf_errmsg@plt>
   16ca0:	mov	r2, r6
   16ca4:	mov	r3, r4
   16ca8:	mov	r1, r5
   16cac:	str	r0, [sp]
   16cb0:	mov	r0, #1
   16cb4:	bl	119a0 <error@plt>
   16cb8:	mov	r2, #5
   16cbc:	movw	r1, #36828	; 0x8fdc
   16cc0:	movt	r1, #1
   16cc4:	bl	118d4 <dcgettext@plt>
   16cc8:	mov	r1, r5
   16ccc:	mov	r2, r0
   16cd0:	mov	r0, #1
   16cd4:	bl	119a0 <error@plt>
   16cd8:	mov	r2, #5
   16cdc:	movw	r1, #36900	; 0x9024
   16ce0:	movt	r1, #1
   16ce4:	bl	118d4 <dcgettext@plt>
   16ce8:	mov	r4, r0
   16cec:	mvn	r0, #0
   16cf0:	bl	11a3c <elf_errmsg@plt>
   16cf4:	mov	r2, r4
   16cf8:	ldr	r1, [fp, #-312]	; 0xfffffec8
   16cfc:	mov	r3, r0
   16d00:	mov	r0, #1
   16d04:	bl	119a0 <error@plt>
   16d08:	movw	r2, #37360	; 0x91f0
   16d0c:	mov	r0, #1
   16d10:	movt	r2, #1
   16d14:	mov	r1, #0
   16d18:	bl	119a0 <error@plt>
   16d1c:	mov	r0, r4
   16d20:	bl	11c7c <__assert_fail@plt+0xc>
   16d24:	mov	r2, #5
   16d28:	movw	r1, #35892	; 0x8c34
   16d2c:	movt	r1, #1
   16d30:	bl	118d4 <dcgettext@plt>
   16d34:	mov	r4, r0
   16d38:	mvn	r0, #0
   16d3c:	bl	11a3c <elf_errmsg@plt>
   16d40:	mov	r2, r4
   16d44:	mov	r1, r7
   16d48:	mov	r3, r0
   16d4c:	mov	r0, #1
   16d50:	bl	119a0 <error@plt>
   16d54:	mov	lr, #88	; 0x58
   16d58:	mla	r8, lr, r4, r8
   16d5c:	b	14b20 <__assert_fail@plt+0x2eb0>
   16d60:	movw	r1, #37264	; 0x9190
   16d64:	mov	r2, #5
   16d68:	movt	r1, #1
   16d6c:	b	16c3c <__assert_fail@plt+0x4fcc>
   16d70:	movw	r2, #37316	; 0x91c4
   16d74:	mov	r0, #1
   16d78:	movt	r2, #1
   16d7c:	bl	119a0 <error@plt>
   16d80:	sub	lr, fp, #512	; 0x200
   16d84:	mov	r6, #0
   16d88:	mov	r7, #0
   16d8c:	str	r4, [fp, #-348]	; 0xfffffea4
   16d90:	strd	r6, [lr, #236]	; 0xec
   16d94:	b	15658 <__assert_fail@plt+0x39e8>
   16d98:	ldr	r4, [fp, #-292]	; 0xfffffedc
   16d9c:	str	r4, [fp, #-340]	; 0xfffffeac
   16da0:	b	15304 <__assert_fail@plt+0x3694>
   16da4:	mov	r2, #5
   16da8:	movw	r1, #37220	; 0x9164
   16dac:	movt	r1, #1
   16db0:	bl	118d4 <dcgettext@plt>
   16db4:	mov	r4, r0
   16db8:	mvn	r0, #0
   16dbc:	bl	11a3c <elf_errmsg@plt>
   16dc0:	mov	r2, r4
   16dc4:	mov	r1, r8
   16dc8:	mov	r3, r0
   16dcc:	mov	r0, #1
   16dd0:	bl	119a0 <error@plt>
   16dd4:	movw	r1, #37020	; 0x909c
   16dd8:	movt	r1, #1
   16ddc:	mov	r2, #5
   16de0:	bl	118d4 <dcgettext@plt>
   16de4:	mov	r4, r0
   16de8:	mvn	r0, #0
   16dec:	bl	11a3c <elf_errmsg@plt>
   16df0:	mov	r2, r4
   16df4:	mov	r1, r7
   16df8:	mov	r3, r0
   16dfc:	mov	r0, #1
   16e00:	bl	119a0 <error@plt>
   16e04:	str	r7, [fp, #-280]	; 0xfffffee8
   16e08:	str	r7, [fp, #-276]	; 0xfffffeec
   16e0c:	b	15bcc <__assert_fail@plt+0x3f5c>
   16e10:	movw	r1, #35756	; 0x8bac
   16e14:	mov	r2, #5
   16e18:	movt	r1, #1
   16e1c:	bl	118d4 <dcgettext@plt>
   16e20:	mov	r4, r0
   16e24:	mvn	r0, #0
   16e28:	bl	11a3c <elf_errmsg@plt>
   16e2c:	mov	r3, r0
   16e30:	mov	r2, r4
   16e34:	mov	r0, #1
   16e38:	mov	r1, #0
   16e3c:	bl	119a0 <error@plt>
   16e40:	movw	r1, #35892	; 0x8c34
   16e44:	mov	r2, #5
   16e48:	movt	r1, #1
   16e4c:	bl	118d4 <dcgettext@plt>
   16e50:	mov	r4, r0
   16e54:	mvn	r0, #0
   16e58:	bl	11a3c <elf_errmsg@plt>
   16e5c:	mov	r3, r0
   16e60:	mov	r2, r4
   16e64:	mov	r0, #1
   16e68:	mov	r1, #0
   16e6c:	bl	119a0 <error@plt>
   16e70:	movw	r1, #35784	; 0x8bc8
   16e74:	mov	r2, #5
   16e78:	movt	r1, #1
   16e7c:	bl	118d4 <dcgettext@plt>
   16e80:	mov	r4, r0
   16e84:	mvn	r0, #0
   16e88:	bl	11a3c <elf_errmsg@plt>
   16e8c:	mov	r3, r0
   16e90:	mov	r2, r4
   16e94:	mov	r0, #1
   16e98:	mov	r1, #0
   16e9c:	bl	119a0 <error@plt>
   16ea0:	movw	r1, #35488	; 0x8aa0
   16ea4:	mov	r2, #5
   16ea8:	movt	r1, #1
   16eac:	bl	118d4 <dcgettext@plt>
   16eb0:	mov	r4, r0
   16eb4:	mvn	r0, #0
   16eb8:	bl	11a3c <elf_errmsg@plt>
   16ebc:	mov	r3, r0
   16ec0:	mov	r2, r4
   16ec4:	mov	r0, #1
   16ec8:	mov	r1, #0
   16ecc:	bl	119a0 <error@plt>
   16ed0:	movw	r1, #37916	; 0x941c
   16ed4:	mov	r0, #0
   16ed8:	movt	r1, #1
   16edc:	mov	r2, #5
   16ee0:	bl	118d4 <dcgettext@plt>
   16ee4:	mov	r4, r0
   16ee8:	mvn	r0, #0
   16eec:	bl	11a3c <elf_errmsg@plt>
   16ef0:	mov	r3, r0
   16ef4:	mov	r2, r4
   16ef8:	mov	r0, #1
   16efc:	mov	r1, #0
   16f00:	bl	119a0 <error@plt>
   16f04:	bl	118ec <__stack_chk_fail@plt>
   16f08:	ldr	sp, [fp, #-368]	; 0xfffffe90
   16f0c:	b	16b64 <__assert_fail@plt+0x4ef4>
   16f10:	movw	r1, #37144	; 0x9118
   16f14:	ldr	r0, [r4, #4]
   16f18:	movt	r1, #1
   16f1c:	bl	1185c <strcmp@plt>
   16f20:	cmp	r0, #0
   16f24:	bne	16854 <__assert_fail@plt+0x4be4>
   16f28:	b	16318 <__assert_fail@plt+0x46a8>
   16f2c:	movw	r1, #35612	; 0x8b1c
   16f30:	mov	r0, #0
   16f34:	movt	r1, #1
   16f38:	mov	r2, #5
   16f3c:	bl	118d4 <dcgettext@plt>
   16f40:	mov	r4, r0
   16f44:	mvn	r0, #0
   16f48:	bl	11a3c <elf_errmsg@plt>
   16f4c:	mov	r3, r0
   16f50:	mov	r2, r4
   16f54:	mov	r0, #1
   16f58:	mov	r1, #0
   16f5c:	bl	119a0 <error@plt>
   16f60:	ldr	r6, [fp, #-356]	; 0xfffffe9c
   16f64:	str	r6, [fp, #-344]	; 0xfffffea8
   16f68:	str	r6, [fp, #-280]	; 0xfffffee8
   16f6c:	b	15f30 <__assert_fail@plt+0x42c0>
   16f70:	ldr	r7, [fp, #-292]	; 0xfffffedc
   16f74:	str	r7, [fp, #-280]	; 0xfffffee8
   16f78:	b	167a8 <__assert_fail@plt+0x4b38>
   16f7c:	str	r0, [fp, #-280]	; 0xfffffee8
   16f80:	str	r0, [fp, #-276]	; 0xfffffeec
   16f84:	b	15bcc <__assert_fail@plt+0x3f5c>
   16f88:	mov	r2, #5
   16f8c:	movw	r1, #37108	; 0x90f4
   16f90:	mov	r0, #0
   16f94:	movt	r1, #1
   16f98:	bl	118d4 <dcgettext@plt>
   16f9c:	movw	r3, #37000	; 0x9088
   16fa0:	mov	r1, #0
   16fa4:	movt	r3, #1
   16fa8:	mov	r2, r0
   16fac:	mov	r0, #1
   16fb0:	bl	119a0 <error@plt>
   16fb4:	mov	r2, #5
   16fb8:	movw	r1, #37064	; 0x90c8
   16fbc:	mov	r0, r4
   16fc0:	movt	r1, #1
   16fc4:	bl	118d4 <dcgettext@plt>
   16fc8:	movw	ip, #37000	; 0x9088
   16fcc:	mov	r1, r4
   16fd0:	movt	ip, #1
   16fd4:	mov	r3, r4
   16fd8:	str	ip, [sp]
   16fdc:	mov	r2, r0
   16fe0:	mov	r0, #1
   16fe4:	bl	119a0 <error@plt>
   16fe8:	mov	r2, #5
   16fec:	movw	r1, #37020	; 0x909c
   16ff0:	movt	r1, #1
   16ff4:	bl	118d4 <dcgettext@plt>
   16ff8:	mov	r4, r0
   16ffc:	mvn	r0, #0
   17000:	bl	11a3c <elf_errmsg@plt>
   17004:	mov	r1, r8
   17008:	mov	r2, r4
   1700c:	mov	r3, r0
   17010:	mov	r0, r5
   17014:	bl	119a0 <error@plt>
   17018:	movw	r0, #37688	; 0x9338
   1701c:	movw	r1, #35020	; 0x88cc
   17020:	movt	r0, #1
   17024:	movt	r1, #1
   17028:	movw	r2, #1853	; 0x73d
   1702c:	ldr	r3, [pc, #-1572]	; 16a10 <__assert_fail@plt+0x4da0>
   17030:	bl	11c70 <__assert_fail@plt>
   17034:	movw	r0, #37632	; 0x9300
   17038:	movw	r1, #35020	; 0x88cc
   1703c:	movt	r0, #1
   17040:	movt	r1, #1
   17044:	movw	r2, #1848	; 0x738
   17048:	ldr	r3, [pc, #-1600]	; 16a10 <__assert_fail@plt+0x4da0>
   1704c:	bl	11c70 <__assert_fail@plt>
   17050:	movw	r0, #37608	; 0x92e8
   17054:	movw	r1, #35020	; 0x88cc
   17058:	movt	r0, #1
   1705c:	movt	r1, #1
   17060:	movw	r2, #1839	; 0x72f
   17064:	ldr	r3, [pc, #-1628]	; 16a10 <__assert_fail@plt+0x4da0>
   17068:	bl	11c70 <__assert_fail@plt>
   1706c:	movw	r0, #37576	; 0x92c8
   17070:	movw	r1, #35020	; 0x88cc
   17074:	movt	r0, #1
   17078:	movt	r1, #1
   1707c:	movw	r2, #1838	; 0x72e
   17080:	ldr	r3, [pc, #-1656]	; 16a10 <__assert_fail@plt+0x4da0>
   17084:	bl	11c70 <__assert_fail@plt>
   17088:	movw	r2, #37716	; 0x9354
   1708c:	mov	r0, #1
   17090:	movt	r2, #1
   17094:	bl	119a0 <error@plt>
   17098:	movw	r1, #37880	; 0x93f8
   1709c:	mov	r2, #5
   170a0:	movt	r1, #1
   170a4:	bl	118d4 <dcgettext@plt>
   170a8:	mov	r4, r0
   170ac:	mvn	r0, #0
   170b0:	bl	11a3c <elf_errmsg@plt>
   170b4:	mov	r3, r0
   170b8:	mov	r2, r4
   170bc:	mov	r0, #1
   170c0:	mov	r1, #0
   170c4:	bl	119a0 <error@plt>
   170c8:	movw	r1, #35656	; 0x8b48
   170cc:	mov	r2, #5
   170d0:	movt	r1, #1
   170d4:	bl	118d4 <dcgettext@plt>
   170d8:	mov	r4, r0
   170dc:	mvn	r0, #0
   170e0:	bl	11a3c <elf_errmsg@plt>
   170e4:	mov	r3, r0
   170e8:	mov	r2, r4
   170ec:	mov	r0, #1
   170f0:	mov	r1, #0
   170f4:	bl	119a0 <error@plt>
   170f8:	mov	r0, r4
   170fc:	bl	11c7c <__assert_fail@plt+0xc>
   17100:	movw	r1, #36704	; 0x8f60
   17104:	mov	r2, #5
   17108:	movt	r1, #1
   1710c:	bl	118d4 <dcgettext@plt>
   17110:	mov	r4, r0
   17114:	mvn	r0, #0
   17118:	bl	11a3c <elf_errmsg@plt>
   1711c:	mov	r3, r0
   17120:	mov	r2, r4
   17124:	mov	r0, #1
   17128:	mov	r1, #0
   1712c:	bl	119a0 <error@plt>
   17130:	movw	r0, #37760	; 0x9380
   17134:	movw	r1, #35020	; 0x88cc
   17138:	movt	r0, #1
   1713c:	movt	r1, #1
   17140:	mov	r2, #1936	; 0x790
   17144:	ldr	r3, [pc, #-1852]	; 16a10 <__assert_fail@plt+0x4da0>
   17148:	bl	11c70 <__assert_fail@plt>
   1714c:	movw	r1, #35892	; 0x8c34
   17150:	mov	r2, #5
   17154:	movt	r1, #1
   17158:	b	16c3c <__assert_fail@plt+0x4fcc>
   1715c:	mov	ip, r4
   17160:	str	r4, [fp, #-368]	; 0xfffffe90
   17164:	b	1631c <__assert_fail@plt+0x46ac>
   17168:	mov	r4, #1
   1716c:	b	15af8 <__assert_fail@plt+0x3e88>
   17170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17174:	movw	r7, #45448	; 0xb188
   17178:	movt	r7, #2
   1717c:	mov	r6, r2
   17180:	sub	sp, sp, #148	; 0x94
   17184:	mov	r9, r0
   17188:	ldr	r2, [r7]
   1718c:	mov	fp, r1
   17190:	mov	r0, r6
   17194:	add	r1, sp, #20
   17198:	mov	sl, r3
   1719c:	ldr	r8, [sp, #184]	; 0xb8
   171a0:	str	r2, [sp, #140]	; 0x8c
   171a4:	bl	11a9c <elf_getphdrnum@plt>
   171a8:	cmp	r0, #0
   171ac:	movwne	r1, #35612	; 0x8b1c
   171b0:	movne	r0, #0
   171b4:	movtne	r1, #1
   171b8:	bne	1736c <__assert_fail@plt+0x56fc>
   171bc:	cmp	r8, #0
   171c0:	beq	17300 <__assert_fail@plt+0x5690>
   171c4:	ldr	r3, [sp, #20]
   171c8:	cmp	r3, #0
   171cc:	beq	17300 <__assert_fail@plt+0x5690>
   171d0:	mov	r4, r0
   171d4:	b	171e8 <__assert_fail@plt+0x5578>
   171d8:	ldr	r3, [sp, #20]
   171dc:	add	r4, r4, #1
   171e0:	cmp	r3, r4
   171e4:	bls	17300 <__assert_fail@plt+0x5690>
   171e8:	mov	r0, r6
   171ec:	mov	r1, r4
   171f0:	add	r2, sp, #24
   171f4:	bl	11904 <gelf_getphdr@plt>
   171f8:	subs	r5, r0, #0
   171fc:	beq	173d0 <__assert_fail@plt+0x5760>
   17200:	ldr	r3, [r5]
   17204:	cmp	r3, #1
   17208:	bne	171d8 <__assert_fail@plt+0x5568>
   1720c:	mov	r1, r4
   17210:	mov	r0, r8
   17214:	add	r2, sp, #80	; 0x50
   17218:	str	r3, [sp, #8]
   1721c:	bl	11904 <gelf_getphdr@plt>
   17220:	subs	ip, r0, #0
   17224:	beq	17404 <__assert_fail@plt+0x5794>
   17228:	ldrd	r2, [ip, #16]
   1722c:	ldrd	r4, [r5, #16]
   17230:	subs	r4, r4, r2
   17234:	sbc	r5, r5, r3
   17238:	orrs	r3, r4, r5
   1723c:	beq	17300 <__assert_fail@plt+0x5690>
   17240:	cmp	r9, #0
   17244:	beq	17394 <__assert_fail@plt+0x5724>
   17248:	mov	r2, #5
   1724c:	movw	r1, #38016	; 0x9480
   17250:	mov	r0, #0
   17254:	movt	r1, #1
   17258:	bl	118d4 <dcgettext@plt>
   1725c:	mov	r3, r9
   17260:	mov	r2, r0
   17264:	mov	r0, #0
   17268:	mov	r1, r0
   1726c:	bl	119a0 <error@plt>
   17270:	cmp	fp, #0
   17274:	bne	17318 <__assert_fail@plt+0x56a8>
   17278:	ldrh	r1, [sl, #16]
   1727c:	movw	r3, #438	; 0x1b6
   17280:	movw	r2, #511	; 0x1ff
   17284:	mov	r0, r9
   17288:	cmp	r1, #1
   1728c:	mov	r1, #66	; 0x42
   17290:	moveq	r2, r3
   17294:	bl	119d0 <open64@plt>
   17298:	subs	fp, r0, #0
   1729c:	blt	17474 <__assert_fail@plt+0x5804>
   172a0:	mov	r1, #3
   172a4:	mov	r2, #0
   172a8:	bl	11b38 <elf_begin@plt>
   172ac:	subs	r9, r0, #0
   172b0:	beq	17444 <__assert_fail@plt+0x57d4>
   172b4:	cmp	r8, #0
   172b8:	beq	17324 <__assert_fail@plt+0x56b4>
   172bc:	mov	r1, r8
   172c0:	bl	12b10 <__assert_fail@plt+0xea0>
   172c4:	strd	r4, [sp]
   172c8:	mov	r1, r6
   172cc:	mov	r2, sl
   172d0:	mov	r0, r9
   172d4:	bl	14684 <__assert_fail@plt+0x2a14>
   172d8:	mov	r0, r9
   172dc:	bl	11a24 <elf_end@plt>
   172e0:	mov	r0, fp
   172e4:	bl	11c58 <close@plt>
   172e8:	ldr	r2, [sp, #140]	; 0x8c
   172ec:	ldr	r3, [r7]
   172f0:	cmp	r2, r3
   172f4:	bne	17400 <__assert_fail@plt+0x5790>
   172f8:	add	sp, sp, #148	; 0x94
   172fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17300:	cmp	r9, #0
   17304:	mov	r4, #0
   17308:	mov	r5, #0
   1730c:	beq	173b8 <__assert_fail@plt+0x5748>
   17310:	cmp	fp, #0
   17314:	beq	17278 <__assert_fail@plt+0x5608>
   17318:	mov	r0, r9
   1731c:	bl	129ec <__assert_fail@plt+0xd7c>
   17320:	b	17278 <__assert_fail@plt+0x5608>
   17324:	mov	r1, r6
   17328:	bl	12b10 <__assert_fail@plt+0xea0>
   1732c:	ldrh	r3, [sl, #16]
   17330:	cmp	r3, #1
   17334:	beq	17348 <__assert_fail@plt+0x56d8>
   17338:	mov	r0, r9
   1733c:	mov	r1, #5
   17340:	mov	r2, #4
   17344:	bl	1188c <elf_flagelf@plt>
   17348:	mov	r0, r9
   1734c:	mov	r1, #3
   17350:	bl	11b14 <elf_update@plt>
   17354:	cmp	r0, #1
   17358:	sbcs	r3, r1, #0
   1735c:	bge	172d8 <__assert_fail@plt+0x5668>
   17360:	movw	r1, #37916	; 0x941c
   17364:	movt	r1, #1
   17368:	mov	r0, #0
   1736c:	mov	r2, #5
   17370:	bl	118d4 <dcgettext@plt>
   17374:	mov	r4, r0
   17378:	mvn	r0, #0
   1737c:	bl	11a3c <elf_errmsg@plt>
   17380:	mov	r2, r4
   17384:	mov	r1, #0
   17388:	mov	r3, r0
   1738c:	mov	r0, #1
   17390:	bl	119a0 <error@plt>
   17394:	mov	r2, #5
   17398:	movw	r1, #37948	; 0x943c
   1739c:	mov	r0, r9
   173a0:	movt	r1, #1
   173a4:	bl	118d4 <dcgettext@plt>
   173a8:	mov	r1, r9
   173ac:	mov	r2, r0
   173b0:	mov	r0, r9
   173b4:	bl	119a0 <error@plt>
   173b8:	strd	r4, [sp]
   173bc:	mov	r0, r8
   173c0:	mov	r1, r6
   173c4:	mov	r2, sl
   173c8:	bl	14684 <__assert_fail@plt+0x2a14>
   173cc:	b	172e8 <__assert_fail@plt+0x5678>
   173d0:	mov	r2, #5
   173d4:	movw	r1, #37848	; 0x93d8
   173d8:	movt	r1, #1
   173dc:	bl	118d4 <dcgettext@plt>
   173e0:	mov	r4, r0
   173e4:	mvn	r0, #0
   173e8:	bl	11a3c <elf_errmsg@plt>
   173ec:	mov	r2, r4
   173f0:	mov	r1, r5
   173f4:	mov	r3, r0
   173f8:	mov	r0, #1
   173fc:	bl	119a0 <error@plt>
   17400:	bl	118ec <__stack_chk_fail@plt>
   17404:	mov	r2, #5
   17408:	movw	r1, #37848	; 0x93d8
   1740c:	movt	r1, #1
   17410:	str	ip, [sp, #12]
   17414:	bl	118d4 <dcgettext@plt>
   17418:	mov	r4, r0
   1741c:	mvn	r0, #0
   17420:	bl	11a3c <elf_errmsg@plt>
   17424:	ldr	r3, [sp, #8]
   17428:	ldr	ip, [sp, #12]
   1742c:	mov	r2, r4
   17430:	mov	r1, ip
   17434:	mov	lr, r0
   17438:	mov	r0, r3
   1743c:	mov	r3, lr
   17440:	bl	119a0 <error@plt>
   17444:	mov	r2, #5
   17448:	movw	r1, #38092	; 0x94cc
   1744c:	movt	r1, #1
   17450:	bl	118d4 <dcgettext@plt>
   17454:	mov	r4, r0
   17458:	mvn	r0, #0
   1745c:	bl	11a3c <elf_errmsg@plt>
   17460:	mov	r2, r4
   17464:	mov	r1, r9
   17468:	mov	r3, r0
   1746c:	mov	r0, #1
   17470:	bl	119a0 <error@plt>
   17474:	bl	11a78 <__errno_location@plt>
   17478:	mov	r2, #5
   1747c:	movw	r1, #35940	; 0x8c64
   17480:	movt	r1, #1
   17484:	ldr	r4, [r0]
   17488:	mov	r0, #0
   1748c:	bl	118d4 <dcgettext@plt>
   17490:	mov	r3, r9
   17494:	mov	r1, r4
   17498:	mov	r2, r0
   1749c:	mov	r0, #1
   174a0:	bl	119a0 <error@plt>
   174a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174a8:	movw	r4, #45448	; 0xb188
   174ac:	sub	sp, sp, #164	; 0xa4
   174b0:	movt	r4, #2
   174b4:	mov	r7, r0
   174b8:	mov	r9, r1
   174bc:	ldr	ip, [sp, #200]	; 0xc8
   174c0:	mov	r0, r3
   174c4:	ldr	lr, [r4]
   174c8:	mov	r1, #0
   174cc:	str	r3, [sp, #16]
   174d0:	str	ip, [sp, #12]
   174d4:	str	lr, [sp, #156]	; 0x9c
   174d8:	strb	r2, [sp, #20]
   174dc:	bl	133e8 <__assert_fail@plt+0x1778>
   174e0:	mov	r1, #1
   174e4:	mov	r2, #0
   174e8:	mov	sl, r0
   174ec:	bl	11b38 <elf_begin@plt>
   174f0:	add	r1, sp, #24
   174f4:	mov	r5, r0
   174f8:	bl	11838 <gelf_getehdr@plt>
   174fc:	subs	r6, r0, #0
   17500:	beq	1766c <__assert_fail@plt+0x59fc>
   17504:	ldr	r0, [sp, #12]
   17508:	cmp	r0, #0
   1750c:	beq	1765c <__assert_fail@plt+0x59ec>
   17510:	rsbs	r8, r7, #1
   17514:	movcc	r8, #0
   17518:	mov	r1, r8
   1751c:	bl	133e8 <__assert_fail@plt+0x1778>
   17520:	cmp	r8, #0
   17524:	mov	r2, #0
   17528:	movne	r1, #2
   1752c:	moveq	r1, #1
   17530:	mov	fp, r0
   17534:	bl	11b38 <elf_begin@plt>
   17538:	add	r1, sp, #88	; 0x58
   1753c:	mov	r6, r0
   17540:	bl	11838 <gelf_getehdr@plt>
   17544:	subs	r8, r0, #0
   17548:	beq	1769c <__assert_fail@plt+0x5a2c>
   1754c:	add	r1, sp, #88	; 0x58
   17550:	add	r0, sp, #24
   17554:	mov	r2, #16
   17558:	bl	118bc <memcmp@plt>
   1755c:	cmp	r0, #0
   17560:	bne	1761c <__assert_fail@plt+0x59ac>
   17564:	ldrh	r2, [sp, #40]	; 0x28
   17568:	ldrh	r3, [sp, #104]	; 0x68
   1756c:	cmp	r2, r3
   17570:	beq	17590 <__assert_fail@plt+0x5920>
   17574:	movw	r1, #38176	; 0x9520
   17578:	mov	r0, #0
   1757c:	movt	r1, #1
   17580:	mov	r2, #5
   17584:	bl	118d4 <dcgettext@plt>
   17588:	add	ip, sp, #12
   1758c:	bl	12938 <__assert_fail@plt+0xcc8>
   17590:	ldrh	r2, [sp, #42]	; 0x2a
   17594:	ldrh	r3, [sp, #106]	; 0x6a
   17598:	cmp	r2, r3
   1759c:	beq	175bc <__assert_fail@plt+0x594c>
   175a0:	movw	r1, #38212	; 0x9544
   175a4:	mov	r0, #0
   175a8:	movt	r1, #1
   175ac:	mov	r2, #5
   175b0:	bl	118d4 <dcgettext@plt>
   175b4:	add	ip, sp, #12
   175b8:	bl	12938 <__assert_fail@plt+0xcc8>
   175bc:	ldrh	r2, [sp, #80]	; 0x50
   175c0:	ldrh	r3, [sp, #144]	; 0x90
   175c4:	cmp	r2, r3
   175c8:	bcc	1763c <__assert_fail@plt+0x59cc>
   175cc:	add	r3, sp, #24
   175d0:	mov	r2, r5
   175d4:	mov	r1, r9
   175d8:	mov	r0, r7
   175dc:	str	r6, [sp]
   175e0:	bl	17170 <__assert_fail@plt+0x5500>
   175e4:	mov	r0, r5
   175e8:	bl	11a24 <elf_end@plt>
   175ec:	mov	r0, sl
   175f0:	bl	11c58 <close@plt>
   175f4:	mov	r0, r6
   175f8:	bl	11a24 <elf_end@plt>
   175fc:	mov	r0, fp
   17600:	bl	11c58 <close@plt>
   17604:	ldr	r2, [sp, #156]	; 0x9c
   17608:	ldr	r3, [r4]
   1760c:	cmp	r2, r3
   17610:	bne	17668 <__assert_fail@plt+0x59f8>
   17614:	add	sp, sp, #164	; 0xa4
   17618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1761c:	mov	r2, #5
   17620:	movw	r1, #38128	; 0x94f0
   17624:	mov	r0, #0
   17628:	movt	r1, #1
   1762c:	bl	118d4 <dcgettext@plt>
   17630:	add	ip, sp, #12
   17634:	bl	12938 <__assert_fail@plt+0xcc8>
   17638:	b	17564 <__assert_fail@plt+0x58f4>
   1763c:	mov	r2, #5
   17640:	movw	r1, #38260	; 0x9574
   17644:	mov	r0, #0
   17648:	movt	r1, #1
   1764c:	bl	118d4 <dcgettext@plt>
   17650:	add	ip, sp, #12
   17654:	bl	12938 <__assert_fail@plt+0xcc8>
   17658:	b	175cc <__assert_fail@plt+0x595c>
   1765c:	mov	r6, r0
   17660:	mvn	fp, #0
   17664:	b	175cc <__assert_fail@plt+0x595c>
   17668:	bl	118ec <__stack_chk_fail@plt>
   1766c:	mov	r2, #5
   17670:	movw	r1, #38092	; 0x94cc
   17674:	movt	r1, #1
   17678:	bl	118d4 <dcgettext@plt>
   1767c:	mov	r4, r0
   17680:	mvn	r0, #0
   17684:	bl	11a3c <elf_errmsg@plt>
   17688:	mov	r2, r4
   1768c:	mov	r1, r6
   17690:	mov	r3, r0
   17694:	mov	r0, #1
   17698:	bl	119a0 <error@plt>
   1769c:	mov	r2, #5
   176a0:	movw	r1, #38092	; 0x94cc
   176a4:	movt	r1, #1
   176a8:	bl	118d4 <dcgettext@plt>
   176ac:	mov	r4, r0
   176b0:	mvn	r0, #0
   176b4:	bl	11a3c <elf_errmsg@plt>
   176b8:	mov	r2, r4
   176bc:	mov	r1, r8
   176c0:	mov	r3, r0
   176c4:	mov	r0, #1
   176c8:	bl	119a0 <error@plt>
   176cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176d0:	movw	r4, #45448	; 0xb188
   176d4:	movt	r4, #2
   176d8:	mov	r6, r3
   176dc:	sub	sp, sp, #116	; 0x74
   176e0:	mov	fp, r0
   176e4:	ldr	r3, [r4]
   176e8:	mov	sl, r1
   176ec:	mov	r0, r6
   176f0:	add	r1, sp, #32
   176f4:	str	r2, [sp, #20]
   176f8:	str	r3, [sp, #108]	; 0x6c
   176fc:	ldrb	r8, [sp, #152]	; 0x98
   17700:	ldrb	r5, [sp, #156]	; 0x9c
   17704:	ldrb	r9, [sp, #160]	; 0xa0
   17708:	bl	118e0 <dwfl_module_getelf@plt>
   1770c:	subs	r7, r0, #0
   17710:	beq	177ec <__assert_fail@plt+0x5b7c>
   17714:	add	r1, sp, #32
   17718:	mov	r0, r6
   1771c:	bl	11bbc <dwfl_module_getdwarf@plt>
   17720:	bl	1194c <dwarf_getelf@plt>
   17724:	eor	r2, r8, #1
   17728:	cmp	r0, #0
   1772c:	movne	r2, #0
   17730:	andeq	r2, r2, #1
   17734:	mov	r3, r0
   17738:	cmp	r2, #0
   1773c:	bne	177cc <__assert_fail@plt+0x5b5c>
   17740:	cmp	r7, r0
   17744:	beq	178ac <__assert_fail@plt+0x5c3c>
   17748:	mov	r0, r7
   1774c:	add	r1, sp, #40	; 0x28
   17750:	str	r3, [sp, #16]
   17754:	bl	11838 <gelf_getehdr@plt>
   17758:	ldr	r3, [sp, #16]
   1775c:	subs	r5, r0, #0
   17760:	beq	17994 <__assert_fail@plt+0x5d24>
   17764:	ldrh	r5, [sp, #56]	; 0x38
   17768:	cmp	r5, #1
   1776c:	bne	17890 <__assert_fail@plt+0x5c20>
   17770:	cmp	r9, #0
   17774:	bne	17878 <__assert_fail@plt+0x5c08>
   17778:	add	ip, sp, #28
   1777c:	mov	r1, r9
   17780:	mov	r2, r9
   17784:	mov	r3, r9
   17788:	add	lr, sp, #24
   1778c:	str	ip, [sp, #12]
   17790:	str	r9, [sp]
   17794:	mov	r0, r6
   17798:	str	r9, [sp, #4]
   1779c:	str	lr, [sp, #8]
   177a0:	str	r9, [sp, #24]
   177a4:	str	r9, [sp, #28]
   177a8:	bl	11bd4 <dwfl_module_info@plt>
   177ac:	ldr	ip, [sp, #28]
   177b0:	mov	r0, fp
   177b4:	ldr	r3, [sp, #24]
   177b8:	mov	r1, sl
   177bc:	ldr	r2, [sp, #20]
   177c0:	str	ip, [sp]
   177c4:	bl	174a4 <__assert_fail@plt+0x5834>
   177c8:	b	177d4 <__assert_fail@plt+0x5b64>
   177cc:	cmp	r5, #0
   177d0:	beq	17914 <__assert_fail@plt+0x5ca4>
   177d4:	ldr	r2, [sp, #108]	; 0x6c
   177d8:	ldr	r3, [r4]
   177dc:	cmp	r2, r3
   177e0:	bne	17990 <__assert_fail@plt+0x5d20>
   177e4:	add	sp, sp, #116	; 0x74
   177e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177ec:	cmp	r5, #0
   177f0:	bne	177d4 <__assert_fail@plt+0x5b64>
   177f4:	mov	r1, r5
   177f8:	mov	r0, r6
   177fc:	add	r3, sp, #28
   17800:	str	r5, [sp]
   17804:	str	r3, [sp, #8]
   17808:	mov	r2, r5
   1780c:	str	r5, [sp, #4]
   17810:	mov	r3, r5
   17814:	str	r5, [sp, #12]
   17818:	bl	11bd4 <dwfl_module_info@plt>
   1781c:	ldr	r4, [sp, #28]
   17820:	cmp	r4, #0
   17824:	movweq	r1, #38320	; 0x95b0
   17828:	mov	r6, r0
   1782c:	movteq	r1, #1
   17830:	moveq	r0, r4
   17834:	beq	17964 <__assert_fail@plt+0x5cf4>
   17838:	movw	r1, #38368	; 0x95e0
   1783c:	movt	r1, #1
   17840:	mov	r0, r5
   17844:	mov	r2, #5
   17848:	bl	118d4 <dcgettext@plt>
   1784c:	ldr	r4, [sp, #28]
   17850:	mov	r7, r0
   17854:	mvn	r0, #0
   17858:	bl	11b74 <dwfl_errmsg@plt>
   1785c:	mov	r2, r7
   17860:	mov	r1, r5
   17864:	mov	r3, r6
   17868:	str	r4, [sp]
   1786c:	str	r0, [sp, #4]
   17870:	mov	r0, #1
   17874:	bl	119a0 <error@plt>
   17878:	mov	r0, r6
   1787c:	str	r3, [sp, #16]
   17880:	bl	11958 <dwfl_module_relocations@plt>
   17884:	ldr	r3, [sp, #16]
   17888:	cmp	r0, #0
   1788c:	blt	179c4 <__assert_fail@plt+0x5d54>
   17890:	str	r3, [sp]
   17894:	mov	r0, fp
   17898:	mov	r1, sl
   1789c:	mov	r2, r7
   178a0:	add	r3, sp, #40	; 0x28
   178a4:	bl	17170 <__assert_fail@plt+0x5500>
   178a8:	b	177d4 <__assert_fail@plt+0x5b64>
   178ac:	cmp	r8, #0
   178b0:	movne	r3, r2
   178b4:	bne	17748 <__assert_fail@plt+0x5ad8>
   178b8:	add	r3, sp, #28
   178bc:	mov	r1, r8
   178c0:	str	r3, [sp, #8]
   178c4:	mov	r2, r8
   178c8:	mov	r3, r8
   178cc:	str	r8, [sp]
   178d0:	mov	r0, r6
   178d4:	str	r8, [sp, #4]
   178d8:	str	r8, [sp, #12]
   178dc:	bl	11bd4 <dwfl_module_info@plt>
   178e0:	mov	r2, #5
   178e4:	movw	r1, #38512	; 0x9670
   178e8:	movt	r1, #1
   178ec:	mov	r4, r0
   178f0:	mov	r0, r8
   178f4:	bl	118d4 <dcgettext@plt>
   178f8:	ldr	ip, [sp, #28]
   178fc:	mov	r3, r4
   17900:	mov	r1, r8
   17904:	str	ip, [sp]
   17908:	mov	r2, r0
   1790c:	mov	r0, #1
   17910:	bl	119a0 <error@plt>
   17914:	mov	r1, r5
   17918:	mov	r0, r6
   1791c:	add	r3, sp, #28
   17920:	str	r5, [sp]
   17924:	str	r3, [sp, #12]
   17928:	mov	r2, r5
   1792c:	str	r5, [sp, #4]
   17930:	mov	r3, r5
   17934:	str	r5, [sp, #8]
   17938:	bl	11bd4 <dwfl_module_info@plt>
   1793c:	ldr	r4, [sp, #28]
   17940:	cmp	r4, #0
   17944:	movwne	r1, #38464	; 0x9640
   17948:	mov	r6, r0
   1794c:	movtne	r1, #1
   17950:	movne	r0, r5
   17954:	bne	17844 <__assert_fail@plt+0x5bd4>
   17958:	movw	r1, #38420	; 0x9614
   1795c:	movt	r1, #1
   17960:	mov	r0, r4
   17964:	mov	r2, #5
   17968:	bl	118d4 <dcgettext@plt>
   1796c:	mov	r5, r0
   17970:	mvn	r0, #0
   17974:	bl	11b74 <dwfl_errmsg@plt>
   17978:	mov	r2, r5
   1797c:	mov	r1, r4
   17980:	mov	r3, r6
   17984:	str	r0, [sp]
   17988:	mov	r0, #1
   1798c:	bl	119a0 <error@plt>
   17990:	bl	118ec <__stack_chk_fail@plt>
   17994:	mov	r2, #5
   17998:	movw	r1, #38092	; 0x94cc
   1799c:	movt	r1, #1
   179a0:	bl	118d4 <dcgettext@plt>
   179a4:	mov	r4, r0
   179a8:	mvn	r0, #0
   179ac:	bl	11a3c <elf_errmsg@plt>
   179b0:	mov	r2, r4
   179b4:	mov	r1, r5
   179b8:	mov	r3, r0
   179bc:	mov	r0, #1
   179c0:	bl	119a0 <error@plt>
   179c4:	mov	r0, #0
   179c8:	mov	r2, #5
   179cc:	movw	r1, #38552	; 0x9698
   179d0:	movt	r1, #1
   179d4:	mov	r4, r0
   179d8:	bl	118d4 <dcgettext@plt>
   179dc:	mov	r1, r4
   179e0:	mov	r2, r4
   179e4:	mov	r3, r4
   179e8:	str	r4, [sp]
   179ec:	str	r4, [sp, #4]
   179f0:	str	r4, [sp, #8]
   179f4:	str	r4, [sp, #12]
   179f8:	mov	r7, r0
   179fc:	mov	r0, r6
   17a00:	bl	11bd4 <dwfl_module_info@plt>
   17a04:	mov	r6, r0
   17a08:	mvn	r0, #0
   17a0c:	bl	11b74 <dwfl_errmsg@plt>
   17a10:	mov	r1, r4
   17a14:	mov	r2, r7
   17a18:	mov	r3, r6
   17a1c:	str	r0, [sp]
   17a20:	mov	r0, r5
   17a24:	bl	119a0 <error@plt>
   17a28:	push	{r4, lr}
   17a2c:	bl	119f4 <malloc@plt>
   17a30:	subs	r4, r0, #0
   17a34:	popne	{r4, pc}
   17a38:	ldr	r1, [pc, #24]	; 17a58 <__assert_fail@plt+0x5de8>
   17a3c:	mov	r2, #5
   17a40:	add	r1, pc, r1
   17a44:	bl	118d4 <dcgettext@plt>
   17a48:	mov	r1, r4
   17a4c:	mov	r2, r0
   17a50:	mov	r0, #1
   17a54:	bl	119a0 <error@plt>
   17a58:	andeq	r2, r0, ip, lsr #4
   17a5c:	push	{r4, lr}
   17a60:	bl	1182c <calloc@plt>
   17a64:	subs	r4, r0, #0
   17a68:	popne	{r4, pc}
   17a6c:	ldr	r1, [pc, #24]	; 17a8c <__assert_fail@plt+0x5e1c>
   17a70:	mov	r2, #5
   17a74:	add	r1, pc, r1
   17a78:	bl	118d4 <dcgettext@plt>
   17a7c:	mov	r1, r4
   17a80:	mov	r2, r0
   17a84:	mov	r0, #1
   17a88:	bl	119a0 <error@plt>
   17a8c:	strdeq	r2, [r0], -r8
   17a90:	push	{r4, lr}
   17a94:	bl	11910 <realloc@plt>
   17a98:	subs	r4, r0, #0
   17a9c:	popne	{r4, pc}
   17aa0:	ldr	r1, [pc, #24]	; 17ac0 <__assert_fail@plt+0x5e50>
   17aa4:	mov	r2, #5
   17aa8:	add	r1, pc, r1
   17aac:	bl	118d4 <dcgettext@plt>
   17ab0:	mov	r1, r4
   17ab4:	mov	r2, r0
   17ab8:	mov	r0, #1
   17abc:	bl	119a0 <error@plt>
   17ac0:	andeq	r2, r0, r4, asr #3
   17ac4:	push	{r4, lr}
   17ac8:	sub	sp, sp, #8
   17acc:	ldr	lr, [pc, #104]	; 17b3c <__assert_fail@plt+0x5ecc>
   17ad0:	mov	r4, r0
   17ad4:	ldr	ip, [pc, #100]	; 17b40 <__assert_fail@plt+0x5ed0>
   17ad8:	ldr	r2, [pc, #100]	; 17b44 <__assert_fail@plt+0x5ed4>
   17adc:	add	lr, pc, lr
   17ae0:	ldr	r3, [r1, #40]	; 0x28
   17ae4:	add	ip, pc, ip
   17ae8:	str	lr, [sp]
   17aec:	mov	r1, #1
   17af0:	str	ip, [sp, #4]
   17af4:	add	r2, pc, r2
   17af8:	bl	11b2c <__fprintf_chk@plt>
   17afc:	ldr	r1, [pc, #68]	; 17b48 <__assert_fail@plt+0x5ed8>
   17b00:	mov	r2, #5
   17b04:	mov	r0, #0
   17b08:	add	r1, pc, r1
   17b0c:	bl	118d4 <dcgettext@plt>
   17b10:	ldr	ip, [pc, #52]	; 17b4c <__assert_fail@plt+0x5edc>
   17b14:	ldr	r3, [pc, #52]	; 17b50 <__assert_fail@plt+0x5ee0>
   17b18:	mov	r1, #1
   17b1c:	add	ip, pc, ip
   17b20:	str	ip, [sp]
   17b24:	add	r3, pc, r3
   17b28:	mov	r2, r0
   17b2c:	mov	r0, r4
   17b30:	bl	11b2c <__fprintf_chk@plt>
   17b34:	add	sp, sp, #8
   17b38:	pop	{r4, pc}
   17b3c:	andeq	r1, r0, ip, ror #23
   17b40:			; <UNDEFINED> instruction: 0x000024bc
   17b44:	andeq	r2, r0, r0, lsr #9
   17b48:	andeq	r2, r0, r0, lsr #9
   17b4c:	andeq	r2, r0, ip, asr r5
   17b50:	andeq	r2, r0, ip, asr #10
   17b54:	cmp	r3, #0
   17b58:	cmpeq	r2, #0
   17b5c:	bne	17b74 <__assert_fail@plt+0x5f04>
   17b60:	cmp	r1, #0
   17b64:	cmpeq	r0, #0
   17b68:	mvnne	r1, #0
   17b6c:	mvnne	r0, #0
   17b70:	b	17b90 <__assert_fail@plt+0x5f20>
   17b74:	sub	sp, sp, #8
   17b78:	push	{sp, lr}
   17b7c:	bl	17bdc <__assert_fail@plt+0x5f6c>
   17b80:	ldr	lr, [sp, #4]
   17b84:	add	sp, sp, #8
   17b88:	pop	{r2, r3}
   17b8c:	bx	lr
   17b90:	push	{r1, lr}
   17b94:	mov	r0, #8
   17b98:	bl	11844 <raise@plt>
   17b9c:	pop	{r1, pc}
   17ba0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17ba4:	mov	r8, r2
   17ba8:	mov	r6, r0
   17bac:	mov	r7, r1
   17bb0:	mov	sl, r3
   17bb4:	ldr	r9, [sp, #32]
   17bb8:	bl	17c18 <__assert_fail@plt+0x5fa8>
   17bbc:	umull	r4, r5, r8, r0
   17bc0:	mul	r8, r8, r1
   17bc4:	mla	r2, r0, sl, r8
   17bc8:	add	r5, r2, r5
   17bcc:	subs	r4, r6, r4
   17bd0:	sbc	r5, r7, r5
   17bd4:	strd	r4, [r9]
   17bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17bdc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17be0:	mov	r8, r2
   17be4:	mov	r6, r0
   17be8:	mov	r7, r1
   17bec:	mov	r5, r3
   17bf0:	ldr	r9, [sp, #32]
   17bf4:	bl	180a4 <__assert_fail@plt+0x6434>
   17bf8:	mul	r3, r0, r5
   17bfc:	umull	r4, r5, r0, r8
   17c00:	mla	r8, r8, r1, r3
   17c04:	add	r5, r8, r5
   17c08:	subs	r4, r6, r4
   17c0c:	sbc	r5, r7, r5
   17c10:	strd	r4, [r9]
   17c14:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c1c:	rsbs	r4, r0, #0
   17c20:	rsc	r5, r1, #0
   17c24:	cmp	r1, #0
   17c28:	mvn	r6, #0
   17c2c:	sub	sp, sp, #12
   17c30:	movge	r4, r0
   17c34:	movge	r5, r1
   17c38:	movge	r6, #0
   17c3c:	cmp	r3, #0
   17c40:	blt	17e78 <__assert_fail@plt+0x6208>
   17c44:	cmp	r3, #0
   17c48:	mov	sl, r4
   17c4c:	mov	ip, r5
   17c50:	mov	r0, r2
   17c54:	mov	r1, r3
   17c58:	mov	r8, r2
   17c5c:	mov	r7, r4
   17c60:	mov	r9, r5
   17c64:	bne	17d5c <__assert_fail@plt+0x60ec>
   17c68:	cmp	r2, r5
   17c6c:	bls	17d98 <__assert_fail@plt+0x6128>
   17c70:	clz	r3, r2
   17c74:	cmp	r3, #0
   17c78:	rsbne	r2, r3, #32
   17c7c:	lslne	r8, r0, r3
   17c80:	lsrne	r2, r4, r2
   17c84:	lslne	r7, r4, r3
   17c88:	orrne	r9, r2, r5, lsl r3
   17c8c:	lsr	r4, r8, #16
   17c90:	uxth	sl, r8
   17c94:	mov	r1, r4
   17c98:	mov	r0, r9
   17c9c:	bl	184d4 <__assert_fail@plt+0x6864>
   17ca0:	mov	r1, r4
   17ca4:	mov	fp, r0
   17ca8:	mov	r0, r9
   17cac:	bl	186c0 <__assert_fail@plt+0x6a50>
   17cb0:	mul	r0, sl, fp
   17cb4:	lsr	r2, r7, #16
   17cb8:	orr	r1, r2, r1, lsl #16
   17cbc:	cmp	r0, r1
   17cc0:	bls	17ce4 <__assert_fail@plt+0x6074>
   17cc4:	adds	r1, r1, r8
   17cc8:	sub	r3, fp, #1
   17ccc:	bcs	17ce0 <__assert_fail@plt+0x6070>
   17cd0:	cmp	r0, r1
   17cd4:	subhi	fp, fp, #2
   17cd8:	addhi	r1, r1, r8
   17cdc:	bhi	17ce4 <__assert_fail@plt+0x6074>
   17ce0:	mov	fp, r3
   17ce4:	rsb	r9, r0, r1
   17ce8:	mov	r1, r4
   17cec:	uxth	r7, r7
   17cf0:	mov	r0, r9
   17cf4:	bl	184d4 <__assert_fail@plt+0x6864>
   17cf8:	mov	r1, r4
   17cfc:	mov	r5, r0
   17d00:	mov	r0, r9
   17d04:	bl	186c0 <__assert_fail@plt+0x6a50>
   17d08:	mul	sl, sl, r5
   17d0c:	orr	r1, r7, r1, lsl #16
   17d10:	cmp	sl, r1
   17d14:	bls	17d34 <__assert_fail@plt+0x60c4>
   17d18:	adds	r8, r1, r8
   17d1c:	sub	r3, r5, #1
   17d20:	bcs	17d30 <__assert_fail@plt+0x60c0>
   17d24:	cmp	sl, r8
   17d28:	subhi	r5, r5, #2
   17d2c:	bhi	17d34 <__assert_fail@plt+0x60c4>
   17d30:	mov	r5, r3
   17d34:	orr	r3, r5, fp, lsl #16
   17d38:	mov	r4, #0
   17d3c:	cmp	r6, #0
   17d40:	mov	r0, r3
   17d44:	mov	r1, r4
   17d48:	beq	17d54 <__assert_fail@plt+0x60e4>
   17d4c:	rsbs	r0, r0, #0
   17d50:	rsc	r1, r1, #0
   17d54:	add	sp, sp, #12
   17d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d5c:	cmp	r3, r5
   17d60:	movhi	r4, #0
   17d64:	movhi	r3, r4
   17d68:	bhi	17d3c <__assert_fail@plt+0x60cc>
   17d6c:	clz	r5, r1
   17d70:	cmp	r5, #0
   17d74:	bne	17f64 <__assert_fail@plt+0x62f4>
   17d78:	cmp	r1, ip
   17d7c:	cmpcs	r2, sl
   17d80:	movhi	r4, #0
   17d84:	movls	r4, #1
   17d88:	movls	r3, #1
   17d8c:	movls	r4, r5
   17d90:	movhi	r3, r4
   17d94:	b	17d3c <__assert_fail@plt+0x60cc>
   17d98:	cmp	r2, #0
   17d9c:	bne	17db0 <__assert_fail@plt+0x6140>
   17da0:	mov	r1, r2
   17da4:	mov	r0, #1
   17da8:	bl	184d4 <__assert_fail@plt+0x6864>
   17dac:	mov	r8, r0
   17db0:	clz	r3, r8
   17db4:	cmp	r3, #0
   17db8:	bne	17e88 <__assert_fail@plt+0x6218>
   17dbc:	rsb	r9, r8, r9
   17dc0:	lsr	r5, r8, #16
   17dc4:	uxth	sl, r8
   17dc8:	mov	r4, #1
   17dcc:	mov	r1, r5
   17dd0:	mov	r0, r9
   17dd4:	bl	184d4 <__assert_fail@plt+0x6864>
   17dd8:	mov	r1, r5
   17ddc:	mov	fp, r0
   17de0:	mov	r0, r9
   17de4:	bl	186c0 <__assert_fail@plt+0x6a50>
   17de8:	mul	r0, sl, fp
   17dec:	lsr	r2, r7, #16
   17df0:	orr	r1, r2, r1, lsl #16
   17df4:	cmp	r0, r1
   17df8:	bls	17e18 <__assert_fail@plt+0x61a8>
   17dfc:	adds	r1, r1, r8
   17e00:	sub	r3, fp, #1
   17e04:	bcs	18084 <__assert_fail@plt+0x6414>
   17e08:	cmp	r0, r1
   17e0c:	subhi	fp, fp, #2
   17e10:	addhi	r1, r1, r8
   17e14:	bls	18084 <__assert_fail@plt+0x6414>
   17e18:	rsb	r2, r0, r1
   17e1c:	mov	r1, r5
   17e20:	str	r2, [sp]
   17e24:	uxth	r7, r7
   17e28:	mov	r0, r2
   17e2c:	bl	184d4 <__assert_fail@plt+0x6864>
   17e30:	ldr	r2, [sp]
   17e34:	mov	r1, r5
   17e38:	mov	r9, r0
   17e3c:	mov	r0, r2
   17e40:	bl	186c0 <__assert_fail@plt+0x6a50>
   17e44:	mul	sl, sl, r9
   17e48:	orr	r1, r7, r1, lsl #16
   17e4c:	cmp	sl, r1
   17e50:	bls	17e70 <__assert_fail@plt+0x6200>
   17e54:	adds	r8, r1, r8
   17e58:	sub	r3, r9, #1
   17e5c:	bcs	17e6c <__assert_fail@plt+0x61fc>
   17e60:	cmp	sl, r8
   17e64:	subhi	r9, r9, #2
   17e68:	bhi	17e70 <__assert_fail@plt+0x6200>
   17e6c:	mov	r9, r3
   17e70:	orr	r3, r9, fp, lsl #16
   17e74:	b	17d3c <__assert_fail@plt+0x60cc>
   17e78:	mvn	r6, r6
   17e7c:	rsbs	r2, r2, #0
   17e80:	rsc	r3, r3, #0
   17e84:	b	17c44 <__assert_fail@plt+0x5fd4>
   17e88:	lsl	r8, r8, r3
   17e8c:	rsb	fp, r3, #32
   17e90:	lsr	r4, r9, fp
   17e94:	lsr	fp, r7, fp
   17e98:	lsr	r5, r8, #16
   17e9c:	orr	fp, fp, r9, lsl r3
   17ea0:	mov	r0, r4
   17ea4:	lsl	r7, r7, r3
   17ea8:	mov	r1, r5
   17eac:	uxth	sl, r8
   17eb0:	bl	184d4 <__assert_fail@plt+0x6864>
   17eb4:	mov	r1, r5
   17eb8:	mov	r3, r0
   17ebc:	mov	r0, r4
   17ec0:	str	r3, [sp]
   17ec4:	bl	186c0 <__assert_fail@plt+0x6a50>
   17ec8:	ldr	r3, [sp]
   17ecc:	lsr	r2, fp, #16
   17ed0:	mul	r0, sl, r3
   17ed4:	orr	r1, r2, r1, lsl #16
   17ed8:	cmp	r0, r1
   17edc:	bls	17efc <__assert_fail@plt+0x628c>
   17ee0:	adds	r1, r1, r8
   17ee4:	sub	r2, r3, #1
   17ee8:	bcs	1809c <__assert_fail@plt+0x642c>
   17eec:	cmp	r0, r1
   17ef0:	subhi	r3, r3, #2
   17ef4:	addhi	r1, r1, r8
   17ef8:	bls	1809c <__assert_fail@plt+0x642c>
   17efc:	rsb	r9, r0, r1
   17f00:	mov	r1, r5
   17f04:	str	r3, [sp]
   17f08:	uxth	fp, fp
   17f0c:	mov	r0, r9
   17f10:	bl	184d4 <__assert_fail@plt+0x6864>
   17f14:	mov	r1, r5
   17f18:	mov	r4, r0
   17f1c:	mov	r0, r9
   17f20:	bl	186c0 <__assert_fail@plt+0x6a50>
   17f24:	mul	r9, sl, r4
   17f28:	ldr	r3, [sp]
   17f2c:	orr	r1, fp, r1, lsl #16
   17f30:	cmp	r9, r1
   17f34:	bls	17f58 <__assert_fail@plt+0x62e8>
   17f38:	adds	r1, r1, r8
   17f3c:	sub	r2, r4, #1
   17f40:	bcs	17f54 <__assert_fail@plt+0x62e4>
   17f44:	cmp	r9, r1
   17f48:	subhi	r4, r4, #2
   17f4c:	addhi	r1, r1, r8
   17f50:	bhi	17f58 <__assert_fail@plt+0x62e8>
   17f54:	mov	r4, r2
   17f58:	rsb	r9, r9, r1
   17f5c:	orr	r4, r4, r3, lsl #16
   17f60:	b	17dcc <__assert_fail@plt+0x615c>
   17f64:	rsb	sl, r5, #32
   17f68:	lsl	r3, r2, r5
   17f6c:	lsr	r0, r2, sl
   17f70:	lsr	r2, ip, sl
   17f74:	orr	r4, r0, r1, lsl r5
   17f78:	lsr	sl, r7, sl
   17f7c:	mov	r0, r2
   17f80:	orr	sl, sl, ip, lsl r5
   17f84:	lsr	r9, r4, #16
   17f88:	str	r3, [sp, #4]
   17f8c:	str	r2, [sp]
   17f90:	uxth	fp, r4
   17f94:	mov	r1, r9
   17f98:	bl	184d4 <__assert_fail@plt+0x6864>
   17f9c:	ldr	r2, [sp]
   17fa0:	mov	r1, r9
   17fa4:	mov	r8, r0
   17fa8:	mov	r0, r2
   17fac:	bl	186c0 <__assert_fail@plt+0x6a50>
   17fb0:	mul	r0, fp, r8
   17fb4:	lsr	r2, sl, #16
   17fb8:	orr	r1, r2, r1, lsl #16
   17fbc:	cmp	r0, r1
   17fc0:	bls	17fe0 <__assert_fail@plt+0x6370>
   17fc4:	adds	r1, r1, r4
   17fc8:	sub	r2, r8, #1
   17fcc:	bcs	18094 <__assert_fail@plt+0x6424>
   17fd0:	cmp	r0, r1
   17fd4:	subhi	r8, r8, #2
   17fd8:	addhi	r1, r1, r4
   17fdc:	bls	18094 <__assert_fail@plt+0x6424>
   17fe0:	rsb	ip, r0, r1
   17fe4:	mov	r1, r9
   17fe8:	str	ip, [sp]
   17fec:	mov	r0, ip
   17ff0:	bl	184d4 <__assert_fail@plt+0x6864>
   17ff4:	ldr	ip, [sp]
   17ff8:	mov	r1, r9
   17ffc:	mov	r2, r0
   18000:	mov	r0, ip
   18004:	str	r2, [sp]
   18008:	bl	186c0 <__assert_fail@plt+0x6a50>
   1800c:	ldr	r2, [sp]
   18010:	uxth	ip, sl
   18014:	mul	fp, fp, r2
   18018:	orr	ip, ip, r1, lsl #16
   1801c:	cmp	fp, ip
   18020:	bls	18040 <__assert_fail@plt+0x63d0>
   18024:	adds	ip, ip, r4
   18028:	sub	r1, r2, #1
   1802c:	bcs	1808c <__assert_fail@plt+0x641c>
   18030:	cmp	fp, ip
   18034:	subhi	r2, r2, #2
   18038:	addhi	ip, ip, r4
   1803c:	bls	1808c <__assert_fail@plt+0x641c>
   18040:	ldr	r0, [sp, #4]
   18044:	orr	r1, r2, r8, lsl #16
   18048:	rsb	fp, fp, ip
   1804c:	umull	r2, r3, r1, r0
   18050:	cmp	fp, r3
   18054:	bcc	18078 <__assert_fail@plt+0x6408>
   18058:	movne	r4, #0
   1805c:	moveq	r4, #1
   18060:	cmp	r2, r7, lsl r5
   18064:	movls	r4, #0
   18068:	andhi	r4, r4, #1
   1806c:	cmp	r4, #0
   18070:	moveq	r3, r1
   18074:	beq	17d3c <__assert_fail@plt+0x60cc>
   18078:	sub	r3, r1, #1
   1807c:	mov	r4, #0
   18080:	b	17d3c <__assert_fail@plt+0x60cc>
   18084:	mov	fp, r3
   18088:	b	17e18 <__assert_fail@plt+0x61a8>
   1808c:	mov	r2, r1
   18090:	b	18040 <__assert_fail@plt+0x63d0>
   18094:	mov	r8, r2
   18098:	b	17fe0 <__assert_fail@plt+0x6370>
   1809c:	mov	r3, r2
   180a0:	b	17efc <__assert_fail@plt+0x628c>
   180a4:	cmp	r3, #0
   180a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180ac:	mov	r6, r0
   180b0:	sub	sp, sp, #12
   180b4:	mov	r5, r1
   180b8:	mov	r7, r0
   180bc:	mov	r4, r2
   180c0:	mov	r8, r1
   180c4:	bne	181a4 <__assert_fail@plt+0x6534>
   180c8:	cmp	r2, r1
   180cc:	bls	181e0 <__assert_fail@plt+0x6570>
   180d0:	clz	r3, r2
   180d4:	cmp	r3, #0
   180d8:	rsbne	r8, r3, #32
   180dc:	lslne	r4, r2, r3
   180e0:	lsrne	r8, r0, r8
   180e4:	lslne	r7, r0, r3
   180e8:	orrne	r8, r8, r1, lsl r3
   180ec:	lsr	r5, r4, #16
   180f0:	uxth	sl, r4
   180f4:	mov	r1, r5
   180f8:	mov	r0, r8
   180fc:	bl	184d4 <__assert_fail@plt+0x6864>
   18100:	mov	r1, r5
   18104:	mov	r9, r0
   18108:	mov	r0, r8
   1810c:	bl	186c0 <__assert_fail@plt+0x6a50>
   18110:	mul	r0, sl, r9
   18114:	lsr	r3, r7, #16
   18118:	orr	r1, r3, r1, lsl #16
   1811c:	cmp	r0, r1
   18120:	bls	18144 <__assert_fail@plt+0x64d4>
   18124:	adds	r1, r1, r4
   18128:	sub	r2, r9, #1
   1812c:	bcs	18140 <__assert_fail@plt+0x64d0>
   18130:	cmp	r0, r1
   18134:	subhi	r9, r9, #2
   18138:	addhi	r1, r1, r4
   1813c:	bhi	18144 <__assert_fail@plt+0x64d4>
   18140:	mov	r9, r2
   18144:	rsb	r8, r0, r1
   18148:	mov	r1, r5
   1814c:	uxth	r7, r7
   18150:	mov	r0, r8
   18154:	bl	184d4 <__assert_fail@plt+0x6864>
   18158:	mov	r1, r5
   1815c:	mov	r6, r0
   18160:	mov	r0, r8
   18164:	bl	186c0 <__assert_fail@plt+0x6a50>
   18168:	mul	sl, sl, r6
   1816c:	orr	r1, r7, r1, lsl #16
   18170:	cmp	sl, r1
   18174:	bls	18190 <__assert_fail@plt+0x6520>
   18178:	adds	r4, r1, r4
   1817c:	sub	r3, r6, #1
   18180:	bcs	1848c <__assert_fail@plt+0x681c>
   18184:	cmp	sl, r4
   18188:	subhi	r6, r6, #2
   1818c:	bls	1848c <__assert_fail@plt+0x681c>
   18190:	orr	r0, r6, r9, lsl #16
   18194:	mov	r6, #0
   18198:	mov	r1, r6
   1819c:	add	sp, sp, #12
   181a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181a4:	cmp	r3, r1
   181a8:	movhi	r6, #0
   181ac:	movhi	r0, r6
   181b0:	bhi	18198 <__assert_fail@plt+0x6528>
   181b4:	clz	r7, r3
   181b8:	cmp	r7, #0
   181bc:	bne	182bc <__assert_fail@plt+0x664c>
   181c0:	cmp	r3, r1
   181c4:	cmpcs	r2, r6
   181c8:	movhi	r6, #0
   181cc:	movls	r6, #1
   181d0:	movls	r0, #1
   181d4:	movls	r6, r7
   181d8:	movhi	r0, r6
   181dc:	b	18198 <__assert_fail@plt+0x6528>
   181e0:	cmp	r2, #0
   181e4:	bne	181f8 <__assert_fail@plt+0x6588>
   181e8:	mov	r1, r2
   181ec:	mov	r0, #1
   181f0:	bl	184d4 <__assert_fail@plt+0x6864>
   181f4:	mov	r4, r0
   181f8:	clz	r3, r4
   181fc:	cmp	r3, #0
   18200:	bne	183b8 <__assert_fail@plt+0x6748>
   18204:	rsb	r5, r4, r5
   18208:	lsr	r8, r4, #16
   1820c:	uxth	sl, r4
   18210:	mov	r6, #1
   18214:	mov	r1, r8
   18218:	mov	r0, r5
   1821c:	bl	184d4 <__assert_fail@plt+0x6864>
   18220:	mov	r1, r8
   18224:	mov	r9, r0
   18228:	mov	r0, r5
   1822c:	bl	186c0 <__assert_fail@plt+0x6a50>
   18230:	mul	r0, sl, r9
   18234:	lsr	r3, r7, #16
   18238:	orr	r1, r3, r1, lsl #16
   1823c:	cmp	r0, r1
   18240:	bls	18260 <__assert_fail@plt+0x65f0>
   18244:	adds	r1, r1, r4
   18248:	sub	r2, r9, #1
   1824c:	bcs	18494 <__assert_fail@plt+0x6824>
   18250:	cmp	r0, r1
   18254:	subhi	r9, r9, #2
   18258:	addhi	r1, r1, r4
   1825c:	bls	18494 <__assert_fail@plt+0x6824>
   18260:	rsb	fp, r0, r1
   18264:	mov	r1, r8
   18268:	uxth	r7, r7
   1826c:	mov	r0, fp
   18270:	bl	184d4 <__assert_fail@plt+0x6864>
   18274:	mov	r1, r8
   18278:	mov	r5, r0
   1827c:	mov	r0, fp
   18280:	bl	186c0 <__assert_fail@plt+0x6a50>
   18284:	mul	sl, sl, r5
   18288:	orr	r1, r7, r1, lsl #16
   1828c:	cmp	sl, r1
   18290:	bls	182ac <__assert_fail@plt+0x663c>
   18294:	adds	r4, r1, r4
   18298:	sub	r3, r5, #1
   1829c:	bcs	1849c <__assert_fail@plt+0x682c>
   182a0:	cmp	sl, r4
   182a4:	subhi	r5, r5, #2
   182a8:	bls	1849c <__assert_fail@plt+0x682c>
   182ac:	orr	r0, r5, r9, lsl #16
   182b0:	mov	r1, r6
   182b4:	add	sp, sp, #12
   182b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182bc:	rsb	r1, r7, #32
   182c0:	lsl	r0, r2, r7
   182c4:	lsr	r2, r2, r1
   182c8:	lsr	fp, r5, r1
   182cc:	orr	r8, r2, r3, lsl r7
   182d0:	lsr	r1, r6, r1
   182d4:	str	r0, [sp, #4]
   182d8:	orr	r5, r1, r5, lsl r7
   182dc:	lsr	r9, r8, #16
   182e0:	mov	r0, fp
   182e4:	uxth	sl, r8
   182e8:	mov	r1, r9
   182ec:	bl	184d4 <__assert_fail@plt+0x6864>
   182f0:	mov	r1, r9
   182f4:	mov	r4, r0
   182f8:	mov	r0, fp
   182fc:	bl	186c0 <__assert_fail@plt+0x6a50>
   18300:	mul	r0, sl, r4
   18304:	lsr	ip, r5, #16
   18308:	orr	r1, ip, r1, lsl #16
   1830c:	cmp	r0, r1
   18310:	bls	18324 <__assert_fail@plt+0x66b4>
   18314:	adds	r1, r1, r8
   18318:	sub	r2, r4, #1
   1831c:	bcc	184b8 <__assert_fail@plt+0x6848>
   18320:	mov	r4, r2
   18324:	rsb	ip, r0, r1
   18328:	mov	r1, r9
   1832c:	str	ip, [sp]
   18330:	uxth	r5, r5
   18334:	mov	r0, ip
   18338:	bl	184d4 <__assert_fail@plt+0x6864>
   1833c:	ldr	ip, [sp]
   18340:	mov	r1, r9
   18344:	mov	fp, r0
   18348:	mov	r0, ip
   1834c:	bl	186c0 <__assert_fail@plt+0x6a50>
   18350:	mul	sl, sl, fp
   18354:	orr	r1, r5, r1, lsl #16
   18358:	cmp	sl, r1
   1835c:	bls	18370 <__assert_fail@plt+0x6700>
   18360:	adds	r1, r1, r8
   18364:	sub	r2, fp, #1
   18368:	bcc	184a4 <__assert_fail@plt+0x6834>
   1836c:	mov	fp, r2
   18370:	ldr	r3, [sp, #4]
   18374:	orr	r0, fp, r4, lsl #16
   18378:	rsb	sl, sl, r1
   1837c:	umull	r4, r5, r0, r3
   18380:	cmp	sl, r5
   18384:	bcc	183a4 <__assert_fail@plt+0x6734>
   18388:	movne	r3, #0
   1838c:	moveq	r3, #1
   18390:	cmp	r4, r6, lsl r7
   18394:	movls	r6, #0
   18398:	andhi	r6, r3, #1
   1839c:	cmp	r6, #0
   183a0:	beq	18198 <__assert_fail@plt+0x6528>
   183a4:	mov	r6, #0
   183a8:	sub	r0, r0, #1
   183ac:	mov	r1, r6
   183b0:	add	sp, sp, #12
   183b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183b8:	lsl	r4, r4, r3
   183bc:	rsb	r9, r3, #32
   183c0:	lsr	r2, r5, r9
   183c4:	lsr	r9, r6, r9
   183c8:	lsr	r8, r4, #16
   183cc:	orr	r9, r9, r5, lsl r3
   183d0:	mov	r0, r2
   183d4:	lsl	r7, r6, r3
   183d8:	mov	r1, r8
   183dc:	str	r2, [sp]
   183e0:	bl	184d4 <__assert_fail@plt+0x6864>
   183e4:	ldr	r2, [sp]
   183e8:	mov	r1, r8
   183ec:	uxth	sl, r4
   183f0:	mov	fp, r0
   183f4:	mov	r0, r2
   183f8:	bl	186c0 <__assert_fail@plt+0x6a50>
   183fc:	mul	r0, sl, fp
   18400:	lsr	r3, r9, #16
   18404:	orr	r1, r3, r1, lsl #16
   18408:	cmp	r0, r1
   1840c:	bls	1842c <__assert_fail@plt+0x67bc>
   18410:	adds	r1, r1, r4
   18414:	sub	r3, fp, #1
   18418:	bcs	184cc <__assert_fail@plt+0x685c>
   1841c:	cmp	r0, r1
   18420:	subhi	fp, fp, #2
   18424:	addhi	r1, r1, r4
   18428:	bls	184cc <__assert_fail@plt+0x685c>
   1842c:	rsb	r5, r0, r1
   18430:	mov	r1, r8
   18434:	uxth	r9, r9
   18438:	mov	r0, r5
   1843c:	bl	184d4 <__assert_fail@plt+0x6864>
   18440:	mov	r1, r8
   18444:	mov	r6, r0
   18448:	mov	r0, r5
   1844c:	bl	186c0 <__assert_fail@plt+0x6a50>
   18450:	mul	r5, sl, r6
   18454:	orr	r1, r9, r1, lsl #16
   18458:	cmp	r5, r1
   1845c:	bls	18480 <__assert_fail@plt+0x6810>
   18460:	adds	r1, r1, r4
   18464:	sub	r3, r6, #1
   18468:	bcs	1847c <__assert_fail@plt+0x680c>
   1846c:	cmp	r5, r1
   18470:	subhi	r6, r6, #2
   18474:	addhi	r1, r1, r4
   18478:	bhi	18480 <__assert_fail@plt+0x6810>
   1847c:	mov	r6, r3
   18480:	rsb	r5, r5, r1
   18484:	orr	r6, r6, fp, lsl #16
   18488:	b	18214 <__assert_fail@plt+0x65a4>
   1848c:	mov	r6, r3
   18490:	b	18190 <__assert_fail@plt+0x6520>
   18494:	mov	r9, r2
   18498:	b	18260 <__assert_fail@plt+0x65f0>
   1849c:	mov	r5, r3
   184a0:	b	182ac <__assert_fail@plt+0x663c>
   184a4:	cmp	sl, r1
   184a8:	subhi	fp, fp, #2
   184ac:	addhi	r1, r1, r8
   184b0:	bhi	18370 <__assert_fail@plt+0x6700>
   184b4:	b	1836c <__assert_fail@plt+0x66fc>
   184b8:	cmp	r0, r1
   184bc:	subhi	r4, r4, #2
   184c0:	addhi	r1, r1, r8
   184c4:	bhi	18324 <__assert_fail@plt+0x66b4>
   184c8:	b	18320 <__assert_fail@plt+0x66b0>
   184cc:	mov	fp, r3
   184d0:	b	1842c <__assert_fail@plt+0x67bc>
   184d4:	subs	r2, r1, #1
   184d8:	bxeq	lr
   184dc:	bcc	186b4 <__assert_fail@plt+0x6a44>
   184e0:	cmp	r0, r1
   184e4:	bls	18698 <__assert_fail@plt+0x6a28>
   184e8:	tst	r1, r2
   184ec:	beq	186a4 <__assert_fail@plt+0x6a34>
   184f0:	clz	r3, r0
   184f4:	clz	r2, r1
   184f8:	sub	r3, r2, r3
   184fc:	rsbs	r3, r3, #31
   18500:	addne	r3, r3, r3, lsl #1
   18504:	mov	r2, #0
   18508:	addne	pc, pc, r3, lsl #2
   1850c:	nop	{0}
   18510:	cmp	r0, r1, lsl #31
   18514:	adc	r2, r2, r2
   18518:	subcs	r0, r0, r1, lsl #31
   1851c:	cmp	r0, r1, lsl #30
   18520:	adc	r2, r2, r2
   18524:	subcs	r0, r0, r1, lsl #30
   18528:	cmp	r0, r1, lsl #29
   1852c:	adc	r2, r2, r2
   18530:	subcs	r0, r0, r1, lsl #29
   18534:	cmp	r0, r1, lsl #28
   18538:	adc	r2, r2, r2
   1853c:	subcs	r0, r0, r1, lsl #28
   18540:	cmp	r0, r1, lsl #27
   18544:	adc	r2, r2, r2
   18548:	subcs	r0, r0, r1, lsl #27
   1854c:	cmp	r0, r1, lsl #26
   18550:	adc	r2, r2, r2
   18554:	subcs	r0, r0, r1, lsl #26
   18558:	cmp	r0, r1, lsl #25
   1855c:	adc	r2, r2, r2
   18560:	subcs	r0, r0, r1, lsl #25
   18564:	cmp	r0, r1, lsl #24
   18568:	adc	r2, r2, r2
   1856c:	subcs	r0, r0, r1, lsl #24
   18570:	cmp	r0, r1, lsl #23
   18574:	adc	r2, r2, r2
   18578:	subcs	r0, r0, r1, lsl #23
   1857c:	cmp	r0, r1, lsl #22
   18580:	adc	r2, r2, r2
   18584:	subcs	r0, r0, r1, lsl #22
   18588:	cmp	r0, r1, lsl #21
   1858c:	adc	r2, r2, r2
   18590:	subcs	r0, r0, r1, lsl #21
   18594:	cmp	r0, r1, lsl #20
   18598:	adc	r2, r2, r2
   1859c:	subcs	r0, r0, r1, lsl #20
   185a0:	cmp	r0, r1, lsl #19
   185a4:	adc	r2, r2, r2
   185a8:	subcs	r0, r0, r1, lsl #19
   185ac:	cmp	r0, r1, lsl #18
   185b0:	adc	r2, r2, r2
   185b4:	subcs	r0, r0, r1, lsl #18
   185b8:	cmp	r0, r1, lsl #17
   185bc:	adc	r2, r2, r2
   185c0:	subcs	r0, r0, r1, lsl #17
   185c4:	cmp	r0, r1, lsl #16
   185c8:	adc	r2, r2, r2
   185cc:	subcs	r0, r0, r1, lsl #16
   185d0:	cmp	r0, r1, lsl #15
   185d4:	adc	r2, r2, r2
   185d8:	subcs	r0, r0, r1, lsl #15
   185dc:	cmp	r0, r1, lsl #14
   185e0:	adc	r2, r2, r2
   185e4:	subcs	r0, r0, r1, lsl #14
   185e8:	cmp	r0, r1, lsl #13
   185ec:	adc	r2, r2, r2
   185f0:	subcs	r0, r0, r1, lsl #13
   185f4:	cmp	r0, r1, lsl #12
   185f8:	adc	r2, r2, r2
   185fc:	subcs	r0, r0, r1, lsl #12
   18600:	cmp	r0, r1, lsl #11
   18604:	adc	r2, r2, r2
   18608:	subcs	r0, r0, r1, lsl #11
   1860c:	cmp	r0, r1, lsl #10
   18610:	adc	r2, r2, r2
   18614:	subcs	r0, r0, r1, lsl #10
   18618:	cmp	r0, r1, lsl #9
   1861c:	adc	r2, r2, r2
   18620:	subcs	r0, r0, r1, lsl #9
   18624:	cmp	r0, r1, lsl #8
   18628:	adc	r2, r2, r2
   1862c:	subcs	r0, r0, r1, lsl #8
   18630:	cmp	r0, r1, lsl #7
   18634:	adc	r2, r2, r2
   18638:	subcs	r0, r0, r1, lsl #7
   1863c:	cmp	r0, r1, lsl #6
   18640:	adc	r2, r2, r2
   18644:	subcs	r0, r0, r1, lsl #6
   18648:	cmp	r0, r1, lsl #5
   1864c:	adc	r2, r2, r2
   18650:	subcs	r0, r0, r1, lsl #5
   18654:	cmp	r0, r1, lsl #4
   18658:	adc	r2, r2, r2
   1865c:	subcs	r0, r0, r1, lsl #4
   18660:	cmp	r0, r1, lsl #3
   18664:	adc	r2, r2, r2
   18668:	subcs	r0, r0, r1, lsl #3
   1866c:	cmp	r0, r1, lsl #2
   18670:	adc	r2, r2, r2
   18674:	subcs	r0, r0, r1, lsl #2
   18678:	cmp	r0, r1, lsl #1
   1867c:	adc	r2, r2, r2
   18680:	subcs	r0, r0, r1, lsl #1
   18684:	cmp	r0, r1
   18688:	adc	r2, r2, r2
   1868c:	subcs	r0, r0, r1
   18690:	mov	r0, r2
   18694:	bx	lr
   18698:	moveq	r0, #1
   1869c:	movne	r0, #0
   186a0:	bx	lr
   186a4:	clz	r2, r1
   186a8:	rsb	r2, r2, #31
   186ac:	lsr	r0, r0, r2
   186b0:	bx	lr
   186b4:	cmp	r0, #0
   186b8:	mvnne	r0, #0
   186bc:	b	17b90 <__assert_fail@plt+0x5f20>
   186c0:	cmp	r1, #0
   186c4:	beq	186b4 <__assert_fail@plt+0x6a44>
   186c8:	push	{r0, r1, lr}
   186cc:	bl	184d4 <__assert_fail@plt+0x6864>
   186d0:	pop	{r1, r2, lr}
   186d4:	mul	r3, r2, r0
   186d8:	sub	r1, r1, r3
   186dc:	bx	lr
   186e0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   186e4:	mov	r7, r0
   186e8:	ldr	r6, [pc, #76]	; 1873c <__assert_fail@plt+0x6acc>
   186ec:	mov	r8, r1
   186f0:	ldr	r5, [pc, #72]	; 18740 <__assert_fail@plt+0x6ad0>
   186f4:	mov	r9, r2
   186f8:	add	r6, pc, r6
   186fc:	bl	1180c <_init@@Base>
   18700:	add	r5, pc, r5
   18704:	rsb	r6, r5, r6
   18708:	asrs	r6, r6, #2
   1870c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   18710:	sub	r5, r5, #4
   18714:	mov	r4, #0
   18718:	add	r4, r4, #1
   1871c:	ldr	r3, [r5, #4]!
   18720:	mov	r0, r7
   18724:	mov	r1, r8
   18728:	mov	r2, r9
   1872c:	blx	r3
   18730:	cmp	r4, r6
   18734:	bne	18718 <__assert_fail@plt+0x6aa8>
   18738:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1873c:	andeq	r2, r1, r8, ror #15
   18740:	ldrdeq	r2, [r1], -ip
   18744:	bx	lr

Disassembly of section .fini:

00018748 <_fini@@Base>:
   18748:	push	{r3, lr}
   1874c:	pop	{r3, pc}
