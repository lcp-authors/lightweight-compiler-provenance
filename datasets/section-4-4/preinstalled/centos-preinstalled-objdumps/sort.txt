
centos-preinstalled/sort:     file format elf32-littlearm


Disassembly of section .init:

00011cf4 <.init>:
   11cf4:	push	{r3, lr}
   11cf8:	bl	153d8 <__assert_fail@plt+0x30b8>
   11cfc:	pop	{r3, pc}

Disassembly of section .plt:

00011d00 <pthread_mutex_unlock@plt-0x14>:
   11d00:	push	{lr}		; (str lr, [sp, #-4]!)
   11d04:	ldr	lr, [pc, #4]	; 11d10 <pthread_mutex_unlock@plt-0x4>
   11d08:	add	lr, pc, lr
   11d0c:	ldr	pc, [lr, #8]!
   11d10:	strdeq	r6, [r2], -r0

00011d14 <pthread_mutex_unlock@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #155648	; 0x26000
   11d1c:	ldr	pc, [ip, #752]!	; 0x2f0

00011d20 <fdopen@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #155648	; 0x26000
   11d28:	ldr	pc, [ip, #744]!	; 0x2e8

00011d2c <calloc@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #155648	; 0x26000
   11d34:	ldr	pc, [ip, #736]!	; 0x2e0

00011d38 <fputs_unlocked@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #155648	; 0x26000
   11d40:	ldr	pc, [ip, #728]!	; 0x2d8

00011d44 <raise@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #155648	; 0x26000
   11d4c:	ldr	pc, [ip, #720]!	; 0x2d0

00011d50 <wcrtomb@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #155648	; 0x26000
   11d58:	ldr	pc, [ip, #712]!	; 0x2c8

00011d5c <mbsrtowcs@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #155648	; 0x26000
   11d64:	ldr	pc, [ip, #704]!	; 0x2c0

00011d68 <strcmp@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #155648	; 0x26000
   11d70:	ldr	pc, [ip, #696]!	; 0x2b8

00011d74 <strtol@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #155648	; 0x26000
   11d7c:	ldr	pc, [ip, #688]!	; 0x2b0

00011d80 <posix_fadvise64@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #155648	; 0x26000
   11d88:	ldr	pc, [ip, #680]!	; 0x2a8

00011d8c <__read_chk@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #155648	; 0x26000
   11d94:	ldr	pc, [ip, #672]!	; 0x2a0

00011d98 <pthread_mutex_destroy@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #155648	; 0x26000
   11da0:	ldr	pc, [ip, #664]!	; 0x298

00011da4 <fflush@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #155648	; 0x26000
   11dac:	ldr	pc, [ip, #656]!	; 0x290

00011db0 <wcwidth@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #155648	; 0x26000
   11db8:	ldr	pc, [ip, #648]!	; 0x288

00011dbc <getuid@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #155648	; 0x26000
   11dc4:	ldr	pc, [ip, #640]!	; 0x280

00011dc8 <sigprocmask@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #155648	; 0x26000
   11dd0:	ldr	pc, [ip, #632]!	; 0x278

00011dd4 <memmove@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #155648	; 0x26000
   11ddc:	ldr	pc, [ip, #624]!	; 0x270

00011de0 <wcsrtombs@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #155648	; 0x26000
   11de8:	ldr	pc, [ip, #616]!	; 0x268

00011dec <free@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #155648	; 0x26000
   11df4:	ldr	pc, [ip, #608]!	; 0x260

00011df8 <pthread_mutex_lock@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #155648	; 0x26000
   11e00:	ldr	pc, [ip, #600]!	; 0x258

00011e04 <nanosleep@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #155648	; 0x26000
   11e0c:	ldr	pc, [ip, #592]!	; 0x250

00011e10 <ferror@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #155648	; 0x26000
   11e18:	ldr	pc, [ip, #584]!	; 0x248

00011e1c <_exit@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #155648	; 0x26000
   11e24:	ldr	pc, [ip, #576]!	; 0x240

00011e28 <memcpy@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #155648	; 0x26000
   11e30:	ldr	pc, [ip, #568]!	; 0x238

00011e34 <execlp@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #155648	; 0x26000
   11e3c:	ldr	pc, [ip, #560]!	; 0x230

00011e40 <iswblank@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #155648	; 0x26000
   11e48:	ldr	pc, [ip, #552]!	; 0x228

00011e4c <pthread_mutex_init@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #155648	; 0x26000
   11e54:	ldr	pc, [ip, #544]!	; 0x220

00011e58 <__strtoull_internal@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #155648	; 0x26000
   11e60:	ldr	pc, [ip, #536]!	; 0x218

00011e64 <mbsinit@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #155648	; 0x26000
   11e6c:	ldr	pc, [ip, #528]!	; 0x210

00011e70 <signal@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #155648	; 0x26000
   11e78:	ldr	pc, [ip, #520]!	; 0x208

00011e7c <__sched_cpucount@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #155648	; 0x26000
   11e84:	ldr	pc, [ip, #512]!	; 0x200

00011e88 <strtold@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #155648	; 0x26000
   11e90:	ldr	pc, [ip, #504]!	; 0x1f8

00011e94 <ftruncate64@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #155648	; 0x26000
   11e9c:	ldr	pc, [ip, #496]!	; 0x1f0

00011ea0 <fwrite_unlocked@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #155648	; 0x26000
   11ea8:	ldr	pc, [ip, #488]!	; 0x1e8

00011eac <memcmp@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #155648	; 0x26000
   11eb4:	ldr	pc, [ip, #480]!	; 0x1e0

00011eb8 <_obstack_newchunk@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #155648	; 0x26000
   11ec0:	ldr	pc, [ip, #472]!	; 0x1d8

00011ec4 <dcgettext@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #155648	; 0x26000
   11ecc:	ldr	pc, [ip, #464]!	; 0x1d0

00011ed0 <__stack_chk_fail@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #155648	; 0x26000
   11ed8:	ldr	pc, [ip, #456]!	; 0x1c8

00011edc <pthread_cond_init@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #155648	; 0x26000
   11ee4:	ldr	pc, [ip, #448]!	; 0x1c0

00011ee8 <obstack_free@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #155648	; 0x26000
   11ef0:	ldr	pc, [ip, #440]!	; 0x1b8

00011ef4 <_obstack_begin@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #155648	; 0x26000
   11efc:	ldr	pc, [ip, #432]!	; 0x1b0

00011f00 <sysconf@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #155648	; 0x26000
   11f08:	ldr	pc, [ip, #424]!	; 0x1a8

00011f0c <unlink@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #155648	; 0x26000
   11f14:	ldr	pc, [ip, #416]!	; 0x1a0

00011f18 <dup2@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #155648	; 0x26000
   11f20:	ldr	pc, [ip, #408]!	; 0x198

00011f24 <getrlimit64@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #155648	; 0x26000
   11f2c:	ldr	pc, [ip, #400]!	; 0x190

00011f30 <realloc@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #155648	; 0x26000
   11f38:	ldr	pc, [ip, #392]!	; 0x188

00011f3c <sigismember@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #155648	; 0x26000
   11f44:	ldr	pc, [ip, #384]!	; 0x180

00011f48 <textdomain@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #155648	; 0x26000
   11f50:	ldr	pc, [ip, #376]!	; 0x178

00011f54 <iswcntrl@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #155648	; 0x26000
   11f5c:	ldr	pc, [ip, #368]!	; 0x170

00011f60 <pthread_cond_destroy@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #155648	; 0x26000
   11f68:	ldr	pc, [ip, #360]!	; 0x168

00011f6c <fflush_unlocked@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #155648	; 0x26000
   11f74:	ldr	pc, [ip, #352]!	; 0x160

00011f78 <iswprint@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #155648	; 0x26000
   11f80:	ldr	pc, [ip, #344]!	; 0x158

00011f84 <__fxstat64@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #155648	; 0x26000
   11f8c:	ldr	pc, [ip, #336]!	; 0x150

00011f90 <sigaction@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #155648	; 0x26000
   11f98:	ldr	pc, [ip, #328]!	; 0x148

00011f9c <__memcpy_chk@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #155648	; 0x26000
   11fa4:	ldr	pc, [ip, #320]!	; 0x140

00011fa8 <fwrite@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #155648	; 0x26000
   11fb0:	ldr	pc, [ip, #312]!	; 0x138

00011fb4 <lseek64@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #155648	; 0x26000
   11fbc:	ldr	pc, [ip, #304]!	; 0x130

00011fc0 <__stpcpy_chk@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #155648	; 0x26000
   11fc8:	ldr	pc, [ip, #296]!	; 0x128

00011fcc <waitpid@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #155648	; 0x26000
   11fd4:	ldr	pc, [ip, #288]!	; 0x120

00011fd8 <__ctype_get_mb_cur_max@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #155648	; 0x26000
   11fe0:	ldr	pc, [ip, #280]!	; 0x118

00011fe4 <strcpy@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #155648	; 0x26000
   11fec:	ldr	pc, [ip, #272]!	; 0x110

00011ff0 <gettimeofday@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #155648	; 0x26000
   11ff8:	ldr	pc, [ip, #264]!	; 0x108

00011ffc <pthread_create@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #155648	; 0x26000
   12004:	ldr	pc, [ip, #256]!	; 0x100

00012008 <__fpending@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #155648	; 0x26000
   12010:	ldr	pc, [ip, #248]!	; 0xf8

00012014 <mbrtowc@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #155648	; 0x26000
   1201c:	ldr	pc, [ip, #240]!	; 0xf0

00012020 <error@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #155648	; 0x26000
   12028:	ldr	pc, [ip, #232]!	; 0xe8

0001202c <open64@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #155648	; 0x26000
   12034:	ldr	pc, [ip, #224]!	; 0xe0

00012038 <strcoll@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #155648	; 0x26000
   12040:	ldr	pc, [ip, #216]!	; 0xd8

00012044 <getenv@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #155648	; 0x26000
   1204c:	ldr	pc, [ip, #208]!	; 0xd0

00012050 <mkstemp64@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #155648	; 0x26000
   12058:	ldr	pc, [ip, #200]!	; 0xc8

0001205c <malloc@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #155648	; 0x26000
   12064:	ldr	pc, [ip, #192]!	; 0xc0

00012068 <sigaddset@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #155648	; 0x26000
   12070:	ldr	pc, [ip, #184]!	; 0xb8

00012074 <__libc_start_main@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #155648	; 0x26000
   1207c:	ldr	pc, [ip, #176]!	; 0xb0

00012080 <__freading@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #155648	; 0x26000
   12088:	ldr	pc, [ip, #168]!	; 0xa8

0001208c <__ctype_toupper_loc@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #155648	; 0x26000
   12094:	ldr	pc, [ip, #160]!	; 0xa0

00012098 <__gmon_start__@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #155648	; 0x26000
   120a0:	ldr	pc, [ip, #152]!	; 0x98

000120a4 <getopt_long@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #155648	; 0x26000
   120ac:	ldr	pc, [ip, #144]!	; 0x90

000120b0 <__ctype_b_loc@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #155648	; 0x26000
   120b8:	ldr	pc, [ip, #136]!	; 0x88

000120bc <getpid@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #155648	; 0x26000
   120c4:	ldr	pc, [ip, #128]!	; 0x80

000120c8 <exit@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #155648	; 0x26000
   120d0:	ldr	pc, [ip, #120]!	; 0x78

000120d4 <strtoul@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #155648	; 0x26000
   120dc:	ldr	pc, [ip, #112]!	; 0x70

000120e0 <strlen@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #155648	; 0x26000
   120e8:	ldr	pc, [ip, #104]!	; 0x68

000120ec <strchr@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #155648	; 0x26000
   120f4:	ldr	pc, [ip, #96]!	; 0x60

000120f8 <ungetc@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #155648	; 0x26000
   12100:	ldr	pc, [ip, #88]!	; 0x58

00012104 <fcntl@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #155648	; 0x26000
   1210c:	ldr	pc, [ip, #80]!	; 0x50

00012110 <strxfrm@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #155648	; 0x26000
   12118:	ldr	pc, [ip, #72]!	; 0x48

0001211c <__errno_location@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #155648	; 0x26000
   12124:	ldr	pc, [ip, #64]!	; 0x40

00012128 <iswalnum@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #155648	; 0x26000
   12130:	ldr	pc, [ip, #56]!	; 0x38

00012134 <__cxa_atexit@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #155648	; 0x26000
   1213c:	ldr	pc, [ip, #48]!	; 0x30

00012140 <setvbuf@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #155648	; 0x26000
   12148:	ldr	pc, [ip, #40]!	; 0x28

0001214c <getgid@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #155648	; 0x26000
   12154:	ldr	pc, [ip, #32]!

00012158 <memset@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #155648	; 0x26000
   12160:	ldr	pc, [ip, #24]!

00012164 <strncpy@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #155648	; 0x26000
   1216c:	ldr	pc, [ip, #16]!

00012170 <fscanf@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #155648	; 0x26000
   12178:	ldr	pc, [ip, #8]!

0001217c <fgetc@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #155648	; 0x26000
   12184:	ldr	pc, [ip, #0]!

00012188 <__printf_chk@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #151552	; 0x25000
   12190:	ldr	pc, [ip, #4088]!	; 0xff8

00012194 <write@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #151552	; 0x25000
   1219c:	ldr	pc, [ip, #4080]!	; 0xff0

000121a0 <fileno@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #151552	; 0x25000
   121a8:	ldr	pc, [ip, #4072]!	; 0xfe8

000121ac <__fprintf_chk@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #151552	; 0x25000
   121b4:	ldr	pc, [ip, #4064]!	; 0xfe0

000121b8 <memchr@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #151552	; 0x25000
   121c0:	ldr	pc, [ip, #4056]!	; 0xfd8

000121c4 <fclose@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #151552	; 0x25000
   121cc:	ldr	pc, [ip, #4048]!	; 0xfd0

000121d0 <strnlen@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #151552	; 0x25000
   121d8:	ldr	pc, [ip, #4040]!	; 0xfc8

000121dc <pipe@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #151552	; 0x25000
   121e4:	ldr	pc, [ip, #4032]!	; 0xfc0

000121e8 <fseeko64@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #151552	; 0x25000
   121f0:	ldr	pc, [ip, #4024]!	; 0xfb8

000121f4 <__uflow@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #151552	; 0x25000
   121fc:	ldr	pc, [ip, #4016]!	; 0xfb0

00012200 <__overflow@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #151552	; 0x25000
   12208:	ldr	pc, [ip, #4008]!	; 0xfa8

0001220c <setlocale@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #151552	; 0x25000
   12214:	ldr	pc, [ip, #4000]!	; 0xfa0

00012218 <sigemptyset@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #151552	; 0x25000
   12220:	ldr	pc, [ip, #3992]!	; 0xf98

00012224 <fork@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #151552	; 0x25000
   1222c:	ldr	pc, [ip, #3984]!	; 0xf90

00012230 <strrchr@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #151552	; 0x25000
   12238:	ldr	pc, [ip, #3976]!	; 0xf88

0001223c <pthread_join@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #151552	; 0x25000
   12244:	ldr	pc, [ip, #3968]!	; 0xf80

00012248 <nl_langinfo@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #151552	; 0x25000
   12250:	ldr	pc, [ip, #3960]!	; 0xf78

00012254 <localeconv@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #151552	; 0x25000
   1225c:	ldr	pc, [ip, #3952]!	; 0xf70

00012260 <clearerr_unlocked@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #151552	; 0x25000
   12268:	ldr	pc, [ip, #3944]!	; 0xf68

0001226c <getppid@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #151552	; 0x25000
   12274:	ldr	pc, [ip, #3936]!	; 0xf60

00012278 <fopen64@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #151552	; 0x25000
   12280:	ldr	pc, [ip, #3928]!	; 0xf58

00012284 <qsort@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #151552	; 0x25000
   1228c:	ldr	pc, [ip, #3920]!	; 0xf50

00012290 <pthread_cond_wait@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #151552	; 0x25000
   12298:	ldr	pc, [ip, #3912]!	; 0xf48

0001229c <euidaccess@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #151552	; 0x25000
   122a4:	ldr	pc, [ip, #3904]!	; 0xf40

000122a8 <sched_getaffinity@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #151552	; 0x25000
   122b0:	ldr	pc, [ip, #3896]!	; 0xf38

000122b4 <bindtextdomain@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #151552	; 0x25000
   122bc:	ldr	pc, [ip, #3888]!	; 0xf30

000122c0 <fread_unlocked@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #151552	; 0x25000
   122c8:	ldr	pc, [ip, #3880]!	; 0xf28

000122cc <__xstat64@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #151552	; 0x25000
   122d4:	ldr	pc, [ip, #3872]!	; 0xf20

000122d8 <towupper@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #151552	; 0x25000
   122e0:	ldr	pc, [ip, #3864]!	; 0xf18

000122e4 <strncmp@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #151552	; 0x25000
   122ec:	ldr	pc, [ip, #3856]!	; 0xf10

000122f0 <pthread_cond_signal@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #151552	; 0x25000
   122f8:	ldr	pc, [ip, #3848]!	; 0xf08

000122fc <abort@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #151552	; 0x25000
   12304:	ldr	pc, [ip, #3840]!	; 0xf00

00012308 <close@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #151552	; 0x25000
   12310:	ldr	pc, [ip, #3832]!	; 0xef8

00012314 <dcngettext@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #151552	; 0x25000
   1231c:	ldr	pc, [ip, #3824]!	; 0xef0

00012320 <__assert_fail@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #151552	; 0x25000
   12328:	ldr	pc, [ip, #3816]!	; 0xee8

Disassembly of section .text:

00012330 <.text>:
   12330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12334:	vpush	{d8-d10}
   12338:	mov	r6, r0
   1233c:	ldr	fp, [pc, #3924]	; 13298 <__assert_fail@plt+0xf78>
   12340:	sub	sp, sp, #748	; 0x2ec
   12344:	ldr	r3, [pc, #3920]	; 1329c <__assert_fail@plt+0xf7c>
   12348:	mov	r7, r1
   1234c:	add	fp, pc, fp
   12350:	ldr	r0, [pc, #3912]	; 132a0 <__assert_fail@plt+0xf80>
   12354:	ldr	r8, [pc, #3912]	; 132a4 <__assert_fail@plt+0xf84>
   12358:	mov	r5, #2
   1235c:	ldr	r3, [fp, r3]
   12360:	add	r0, pc, r0
   12364:	add	r8, pc, r8
   12368:	ldr	r4, [pc, #3896]	; 132a8 <__assert_fail@plt+0xf88>
   1236c:	ldr	r3, [r3]
   12370:	add	r4, pc, r4
   12374:	str	r3, [sp, #740]	; 0x2e4
   12378:	bl	12044 <getenv@plt>
   1237c:	str	r0, [sp, #36]	; 0x24
   12380:	bl	1f598 <__assert_fail@plt+0xd278>
   12384:	str	r0, [sp, #40]	; 0x28
   12388:	ldr	r0, [r7]
   1238c:	bl	1f630 <__assert_fail@plt+0xd310>
   12390:	ldr	r1, [pc, #3860]	; 132ac <__assert_fail@plt+0xf8c>
   12394:	mov	r0, #6
   12398:	add	r1, pc, r1
   1239c:	bl	1220c <setlocale@plt>
   123a0:	ldr	r1, [pc, #3848]	; 132b0 <__assert_fail@plt+0xf90>
   123a4:	mov	r0, r8
   123a8:	add	r1, pc, r1
   123ac:	bl	122b4 <bindtextdomain@plt>
   123b0:	mov	r0, r8
   123b4:	bl	11f48 <textdomain@plt>
   123b8:	ldr	r3, [pc, #3828]	; 132b4 <__assert_fail@plt+0xf94>
   123bc:	mov	r0, #3
   123c0:	ldr	r3, [fp, r3]
   123c4:	str	r5, [r3]
   123c8:	bl	1dc00 <__assert_fail@plt+0xb8e0>
   123cc:	strb	r0, [r4, #1352]	; 0x548
   123d0:	mov	r0, r5
   123d4:	bl	1dc00 <__assert_fail@plt+0xb8e0>
   123d8:	strb	r0, [r4, #1353]	; 0x549
   123dc:	bl	12254 <localeconv@plt>
   123e0:	ldr	r2, [r0]
   123e4:	ldrb	r3, [r2]
   123e8:	cmp	r3, #0
   123ec:	str	r3, [r4, #284]	; 0x11c
   123f0:	beq	12660 <__assert_fail@plt+0x340>
   123f4:	ldrb	r3, [r2, #1]
   123f8:	cmp	r3, #0
   123fc:	bne	12660 <__assert_fail@plt+0x340>
   12400:	ldr	r2, [r0, #4]
   12404:	ldr	r1, [pc, #3756]	; 132b8 <__assert_fail@plt+0xf98>
   12408:	ldrb	r3, [r2]
   1240c:	add	r1, pc, r1
   12410:	cmp	r3, #0
   12414:	str	r3, [r1, #280]	; 0x118
   12418:	beq	125e0 <__assert_fail@plt+0x2c0>
   1241c:	ldrb	r3, [r2, #1]
   12420:	cmp	r3, #0
   12424:	bne	125e0 <__assert_fail@plt+0x2c0>
   12428:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   1242c:	cmp	r0, #1
   12430:	bls	125fc <__assert_fail@plt+0x2dc>
   12434:	ldr	r3, [pc, #3712]	; 132bc <__assert_fail@plt+0xf9c>
   12438:	ldr	r5, [pc, #3712]	; 132c0 <__assert_fail@plt+0xfa0>
   1243c:	add	r3, pc, r3
   12440:	ldr	r4, [pc, #3708]	; 132c4 <__assert_fail@plt+0xfa4>
   12444:	ldr	lr, [pc, #3708]	; 132c8 <__assert_fail@plt+0xfa8>
   12448:	add	r5, pc, r5
   1244c:	ldr	ip, [pc, #3704]	; 132cc <__assert_fail@plt+0xfac>
   12450:	add	r4, pc, r4
   12454:	ldr	r0, [pc, #3700]	; 132d0 <__assert_fail@plt+0xfb0>
   12458:	add	lr, pc, lr
   1245c:	ldr	r1, [pc, #3696]	; 132d4 <__assert_fail@plt+0xfb4>
   12460:	add	ip, pc, ip
   12464:	ldr	r2, [pc, #3692]	; 132d8 <__assert_fail@plt+0xfb8>
   12468:	add	r0, pc, r0
   1246c:	add	r1, pc, r1
   12470:	str	r5, [r3, #1376]	; 0x560
   12474:	add	r2, pc, r2
   12478:	str	r4, [r3, #1380]	; 0x564
   1247c:	str	lr, [r3, #1192]	; 0x4a8
   12480:	str	ip, [r3, #1384]	; 0x568
   12484:	str	r0, [r3, #1408]	; 0x580
   12488:	str	r1, [r3, #1432]	; 0x598
   1248c:	str	r2, [r3, #1440]	; 0x5a0
   12490:	ldr	r4, [pc, #3652]	; 132dc <__assert_fail@plt+0xfbc>
   12494:	mov	r3, #0
   12498:	ldr	r5, [pc, #3648]	; 132e0 <__assert_fail@plt+0xfc0>
   1249c:	add	sl, sp, #368	; 0x170
   124a0:	add	r4, pc, r4
   124a4:	ldr	r8, [pc, #3640]	; 132e4 <__assert_fail@plt+0xfc4>
   124a8:	add	r5, pc, r5
   124ac:	strb	r3, [r4, #1372]	; 0x55c
   124b0:	blx	r2
   124b4:	add	r0, r4, #1056	; 0x420
   124b8:	add	r8, pc, r8
   124bc:	add	r0, r0, #4
   124c0:	add	r8, r8, #1056	; 0x420
   124c4:	bl	12218 <sigemptyset@plt>
   124c8:	add	r3, r5, #308	; 0x134
   124cc:	add	r8, r8, #4
   124d0:	add	r5, r5, #352	; 0x160
   124d4:	mov	r4, r3
   124d8:	str	r3, [sp, #24]
   124dc:	ldr	r9, [r4, #4]!
   124e0:	mov	r1, #0
   124e4:	mov	r2, sl
   124e8:	mov	r0, r9
   124ec:	bl	11f90 <sigaction@plt>
   124f0:	ldr	r3, [sp, #368]	; 0x170
   124f4:	cmp	r3, #1
   124f8:	beq	12508 <__assert_fail@plt+0x1e8>
   124fc:	mov	r1, r9
   12500:	mov	r0, r8
   12504:	bl	12068 <sigaddset@plt>
   12508:	cmp	r4, r5
   1250c:	bne	124dc <__assert_fail@plt+0x1bc>
   12510:	ldr	r4, [pc, #3536]	; 132e8 <__assert_fail@plt+0xfc8>
   12514:	add	ip, sp, #372	; 0x174
   12518:	ldr	r3, [pc, #3532]	; 132ec <__assert_fail@plt+0xfcc>
   1251c:	mov	r2, #128	; 0x80
   12520:	add	r4, pc, r4
   12524:	mov	r0, ip
   12528:	add	r4, r4, #1056	; 0x420
   1252c:	add	r3, pc, r3
   12530:	add	r4, r4, #4
   12534:	str	r3, [sp, #368]	; 0x170
   12538:	str	ip, [sp, #52]	; 0x34
   1253c:	mov	r1, r4
   12540:	ldr	r9, [sp, #24]
   12544:	bl	11e28 <memcpy@plt>
   12548:	mov	r3, #0
   1254c:	str	r3, [sp, #500]	; 0x1f4
   12550:	b	1255c <__assert_fail@plt+0x23c>
   12554:	cmp	r9, r5
   12558:	beq	1258c <__assert_fail@plt+0x26c>
   1255c:	ldr	r8, [r9, #4]!
   12560:	mov	r0, r4
   12564:	mov	r1, r8
   12568:	bl	11f3c <sigismember@plt>
   1256c:	cmp	r0, #0
   12570:	beq	12554 <__assert_fail@plt+0x234>
   12574:	mov	r0, r8
   12578:	mov	r1, sl
   1257c:	mov	r2, #0
   12580:	bl	11f90 <sigaction@plt>
   12584:	cmp	r9, r5
   12588:	bne	1255c <__assert_fail@plt+0x23c>
   1258c:	mov	r1, #0
   12590:	mov	r0, #17
   12594:	bl	11e70 <signal@plt>
   12598:	ldr	r0, [pc, #3408]	; 132f0 <__assert_fail@plt+0xfd0>
   1259c:	mov	r4, #0
   125a0:	add	r0, pc, r0
   125a4:	bl	252ec <__assert_fail@plt+0x12fcc>
   125a8:	cmn	r6, #-1073741823	; 0xc0000001
   125ac:	mvn	r3, #0
   125b0:	str	r4, [sp, #228]	; 0xe4
   125b4:	str	r4, [sp, #236]	; 0xec
   125b8:	str	r4, [sp, #240]	; 0xf0
   125bc:	str	r4, [sp, #244]	; 0xf4
   125c0:	str	r4, [sp, #248]	; 0xf8
   125c4:	str	r4, [sp, #252]	; 0xfc
   125c8:	str	r4, [sp, #256]	; 0x100
   125cc:	str	r4, [sp, #260]	; 0x104
   125d0:	str	r3, [sp, #232]	; 0xe8
   125d4:	str	r3, [sp, #224]	; 0xe0
   125d8:	bls	12674 <__assert_fail@plt+0x354>
   125dc:	bl	22900 <__assert_fail@plt+0x105e0>
   125e0:	ldr	r3, [pc, #3340]	; 132f4 <__assert_fail@plt+0xfd4>
   125e4:	mvn	r2, #0
   125e8:	add	r3, pc, r3
   125ec:	str	r2, [r3, #280]	; 0x118
   125f0:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   125f4:	cmp	r0, #1
   125f8:	bhi	12434 <__assert_fail@plt+0x114>
   125fc:	ldr	r1, [pc, #3316]	; 132f8 <__assert_fail@plt+0xfd8>
   12600:	ldr	r3, [pc, #3316]	; 132fc <__assert_fail@plt+0xfdc>
   12604:	add	r1, pc, r1
   12608:	ldr	r8, [pc, #3312]	; 13300 <__assert_fail@plt+0xfe0>
   1260c:	add	r3, pc, r3
   12610:	ldr	r5, [pc, #3308]	; 13304 <__assert_fail@plt+0xfe4>
   12614:	ldr	r4, [pc, #3308]	; 13308 <__assert_fail@plt+0xfe8>
   12618:	add	r8, pc, r8
   1261c:	ldr	lr, [pc, #3304]	; 1330c <__assert_fail@plt+0xfec>
   12620:	add	r5, pc, r5
   12624:	ldr	ip, [pc, #3300]	; 13310 <__assert_fail@plt+0xff0>
   12628:	add	r4, pc, r4
   1262c:	ldr	r0, [pc, #3296]	; 13314 <__assert_fail@plt+0xff4>
   12630:	add	lr, pc, lr
   12634:	add	ip, pc, ip
   12638:	mov	r2, r1
   1263c:	add	r0, pc, r0
   12640:	str	r1, [r3, #1440]	; 0x5a0
   12644:	str	r8, [r3, #1376]	; 0x560
   12648:	str	r5, [r3, #1380]	; 0x564
   1264c:	str	r4, [r3, #1192]	; 0x4a8
   12650:	str	lr, [r3, #1384]	; 0x568
   12654:	str	ip, [r3, #1408]	; 0x580
   12658:	str	r0, [r3, #1432]	; 0x598
   1265c:	b	12490 <__assert_fail@plt+0x170>
   12660:	ldr	r3, [pc, #3248]	; 13318 <__assert_fail@plt+0xff8>
   12664:	mov	r2, #46	; 0x2e
   12668:	add	r3, pc, r3
   1266c:	str	r2, [r3, #284]	; 0x11c
   12670:	b	12400 <__assert_fail@plt+0xe0>
   12674:	ldr	ip, [pc, #3232]	; 1331c <__assert_fail@plt+0xffc>
   12678:	movw	r3, #3503	; 0xdaf
   1267c:	movt	r3, #3
   12680:	lsl	r0, r6, #2
   12684:	add	ip, pc, ip
   12688:	str	ip, [sp, #56]	; 0x38
   1268c:	ldr	ip, [sp, #40]	; 0x28
   12690:	mov	r9, r4
   12694:	mov	r5, r4
   12698:	cmp	ip, r3
   1269c:	ldr	ip, [pc, #3196]	; 13320 <__assert_fail@plt+0x1000>
   126a0:	movgt	r3, #0
   126a4:	movle	r3, #1
   126a8:	add	ip, pc, ip
   126ac:	str	r3, [sp, #40]	; 0x28
   126b0:	str	ip, [sp, #60]	; 0x3c
   126b4:	bl	226ec <__assert_fail@plt+0x103cc>
   126b8:	ldr	ip, [sp, #36]	; 0x24
   126bc:	ldr	r3, [pc, #3168]	; 13324 <__assert_fail@plt+0x1004>
   126c0:	adds	ip, ip, #0
   126c4:	str	r4, [sp, #44]	; 0x2c
   126c8:	add	r3, pc, r3
   126cc:	str	r4, [sp, #48]	; 0x30
   126d0:	movne	ip, #1
   126d4:	str	ip, [sp, #24]
   126d8:	ldr	ip, [sp, #56]	; 0x38
   126dc:	add	r3, r3, #524	; 0x20c
   126e0:	str	r4, [sp, #76]	; 0x4c
   126e4:	add	ip, ip, #4
   126e8:	str	ip, [sp, #88]	; 0x58
   126ec:	ldr	ip, [sp, #60]	; 0x3c
   126f0:	str	r3, [sp, #84]	; 0x54
   126f4:	add	ip, ip, #4
   126f8:	str	r4, [sp, #64]	; 0x40
   126fc:	str	ip, [sp, #72]	; 0x48
   12700:	str	r4, [sp, #80]	; 0x50
   12704:	str	r4, [sp, #36]	; 0x24
   12708:	mov	r8, r0
   1270c:	b	12784 <__assert_fail@plt+0x464>
   12710:	ldr	r3, [sp, #24]
   12714:	cmp	r9, #0
   12718:	moveq	r3, #0
   1271c:	andne	r3, r3, #1
   12720:	cmp	r3, #0
   12724:	beq	127c8 <__assert_fail@plt+0x4a8>
   12728:	ldr	ip, [sp, #40]	; 0x28
   1272c:	ldr	r3, [pc, #3060]	; 13328 <__assert_fail@plt+0x1008>
   12730:	eor	r1, ip, #1
   12734:	ldr	ip, [sp, #36]	; 0x24
   12738:	ldr	r3, [fp, r3]
   1273c:	cmp	ip, #0
   12740:	orrne	r1, r1, #1
   12744:	cmp	r1, #0
   12748:	ldr	r2, [r3]
   1274c:	bne	12768 <__assert_fail@plt+0x448>
   12750:	cmp	r2, r6
   12754:	beq	12c3c <__assert_fail@plt+0x91c>
   12758:	ldr	r1, [r7, r2, lsl #2]
   1275c:	ldrb	r0, [r1]
   12760:	cmp	r0, #45	; 0x2d
   12764:	beq	127a4 <__assert_fail@plt+0x484>
   12768:	cmp	r6, r2
   1276c:	ble	12c40 <__assert_fail@plt+0x920>
   12770:	add	r1, r2, #1
   12774:	str	r1, [r3]
   12778:	ldr	r3, [r7, r2, lsl #2]
   1277c:	str	r3, [r8, r9, lsl #2]
   12780:	add	r9, r9, #1
   12784:	cmn	r5, #1
   12788:	mvn	r3, #0
   1278c:	str	r3, [sp, #156]	; 0x9c
   12790:	bne	12710 <__assert_fail@plt+0x3f0>
   12794:	ldr	r3, [pc, #2956]	; 13328 <__assert_fail@plt+0x1008>
   12798:	ldr	r3, [fp, r3]
   1279c:	ldr	r2, [r3]
   127a0:	b	12768 <__assert_fail@plt+0x448>
   127a4:	ldrb	r0, [r1, #1]
   127a8:	cmp	r0, #111	; 0x6f
   127ac:	bne	12768 <__assert_fail@plt+0x448>
   127b0:	ldrb	r1, [r1, #2]
   127b4:	cmp	r1, #0
   127b8:	bne	127c8 <__assert_fail@plt+0x4a8>
   127bc:	add	r1, r2, #1
   127c0:	cmp	r1, r6
   127c4:	beq	12768 <__assert_fail@plt+0x448>
   127c8:	ldr	r2, [pc, #2908]	; 1332c <__assert_fail@plt+0x100c>
   127cc:	add	r3, sp, #156	; 0x9c
   127d0:	str	r3, [sp]
   127d4:	mov	r0, r6
   127d8:	ldr	r3, [pc, #2896]	; 13330 <__assert_fail@plt+0x1010>
   127dc:	add	r2, pc, r2
   127e0:	add	r2, r2, #356	; 0x164
   127e4:	mov	r1, r7
   127e8:	add	r3, pc, r3
   127ec:	bl	120a4 <getopt_long@plt>
   127f0:	cmn	r0, #1
   127f4:	mov	r5, r0
   127f8:	beq	12794 <__assert_fail@plt+0x474>
   127fc:	add	r3, r0, #3
   12800:	movw	r2, #266	; 0x10a
   12804:	cmp	r3, r2
   12808:	addls	pc, pc, r3, lsl #2
   1280c:	b	13644 <__assert_fail@plt+0x1324>
   12810:	b	12e7c <__assert_fail@plt+0xb5c>
   12814:	b	12ec8 <__assert_fail@plt+0xba8>
   12818:	b	13644 <__assert_fail@plt+0x1324>
   1281c:	b	13644 <__assert_fail@plt+0x1324>
   12820:	b	135b0 <__assert_fail@plt+0x1290>
   12824:	b	13644 <__assert_fail@plt+0x1324>
   12828:	b	13644 <__assert_fail@plt+0x1324>
   1282c:	b	13644 <__assert_fail@plt+0x1324>
   12830:	b	13644 <__assert_fail@plt+0x1324>
   12834:	b	13644 <__assert_fail@plt+0x1324>
   12838:	b	13644 <__assert_fail@plt+0x1324>
   1283c:	b	13644 <__assert_fail@plt+0x1324>
   12840:	b	13644 <__assert_fail@plt+0x1324>
   12844:	b	13644 <__assert_fail@plt+0x1324>
   12848:	b	13644 <__assert_fail@plt+0x1324>
   1284c:	b	13644 <__assert_fail@plt+0x1324>
   12850:	b	13644 <__assert_fail@plt+0x1324>
   12854:	b	13644 <__assert_fail@plt+0x1324>
   12858:	b	13644 <__assert_fail@plt+0x1324>
   1285c:	b	13644 <__assert_fail@plt+0x1324>
   12860:	b	13644 <__assert_fail@plt+0x1324>
   12864:	b	13644 <__assert_fail@plt+0x1324>
   12868:	b	13644 <__assert_fail@plt+0x1324>
   1286c:	b	13644 <__assert_fail@plt+0x1324>
   12870:	b	13644 <__assert_fail@plt+0x1324>
   12874:	b	13644 <__assert_fail@plt+0x1324>
   12878:	b	13644 <__assert_fail@plt+0x1324>
   1287c:	b	13644 <__assert_fail@plt+0x1324>
   12880:	b	13644 <__assert_fail@plt+0x1324>
   12884:	b	13644 <__assert_fail@plt+0x1324>
   12888:	b	13644 <__assert_fail@plt+0x1324>
   1288c:	b	13644 <__assert_fail@plt+0x1324>
   12890:	b	13644 <__assert_fail@plt+0x1324>
   12894:	b	13644 <__assert_fail@plt+0x1324>
   12898:	b	13644 <__assert_fail@plt+0x1324>
   1289c:	b	13644 <__assert_fail@plt+0x1324>
   128a0:	b	13644 <__assert_fail@plt+0x1324>
   128a4:	b	13644 <__assert_fail@plt+0x1324>
   128a8:	b	13644 <__assert_fail@plt+0x1324>
   128ac:	b	13644 <__assert_fail@plt+0x1324>
   128b0:	b	13644 <__assert_fail@plt+0x1324>
   128b4:	b	13644 <__assert_fail@plt+0x1324>
   128b8:	b	13644 <__assert_fail@plt+0x1324>
   128bc:	b	13644 <__assert_fail@plt+0x1324>
   128c0:	b	13644 <__assert_fail@plt+0x1324>
   128c4:	b	13644 <__assert_fail@plt+0x1324>
   128c8:	b	13644 <__assert_fail@plt+0x1324>
   128cc:	b	13644 <__assert_fail@plt+0x1324>
   128d0:	b	13644 <__assert_fail@plt+0x1324>
   128d4:	b	13644 <__assert_fail@plt+0x1324>
   128d8:	b	13644 <__assert_fail@plt+0x1324>
   128dc:	b	13644 <__assert_fail@plt+0x1324>
   128e0:	b	13644 <__assert_fail@plt+0x1324>
   128e4:	b	13644 <__assert_fail@plt+0x1324>
   128e8:	b	13644 <__assert_fail@plt+0x1324>
   128ec:	b	13644 <__assert_fail@plt+0x1324>
   128f0:	b	13644 <__assert_fail@plt+0x1324>
   128f4:	b	13644 <__assert_fail@plt+0x1324>
   128f8:	b	13644 <__assert_fail@plt+0x1324>
   128fc:	b	13644 <__assert_fail@plt+0x1324>
   12900:	b	13644 <__assert_fail@plt+0x1324>
   12904:	b	13644 <__assert_fail@plt+0x1324>
   12908:	b	13644 <__assert_fail@plt+0x1324>
   1290c:	b	13644 <__assert_fail@plt+0x1324>
   12910:	b	13644 <__assert_fail@plt+0x1324>
   12914:	b	13644 <__assert_fail@plt+0x1324>
   12918:	b	13644 <__assert_fail@plt+0x1324>
   1291c:	b	13644 <__assert_fail@plt+0x1324>
   12920:	b	13644 <__assert_fail@plt+0x1324>
   12924:	b	13644 <__assert_fail@plt+0x1324>
   12928:	b	12e50 <__assert_fail@plt+0xb30>
   1292c:	b	13644 <__assert_fail@plt+0x1324>
   12930:	b	13644 <__assert_fail@plt+0x1324>
   12934:	b	13644 <__assert_fail@plt+0x1324>
   12938:	b	13644 <__assert_fail@plt+0x1324>
   1293c:	b	13644 <__assert_fail@plt+0x1324>
   12940:	b	13644 <__assert_fail@plt+0x1324>
   12944:	b	13644 <__assert_fail@plt+0x1324>
   12948:	b	13644 <__assert_fail@plt+0x1324>
   1294c:	b	13644 <__assert_fail@plt+0x1324>
   12950:	b	12ddc <__assert_fail@plt+0xabc>
   12954:	b	13644 <__assert_fail@plt+0x1324>
   12958:	b	13644 <__assert_fail@plt+0x1324>
   1295c:	b	13644 <__assert_fail@plt+0x1324>
   12960:	b	13644 <__assert_fail@plt+0x1324>
   12964:	b	12ddc <__assert_fail@plt+0xabc>
   12968:	b	12ed0 <__assert_fail@plt+0xbb0>
   1296c:	b	13284 <__assert_fail@plt+0xf64>
   12970:	b	13644 <__assert_fail@plt+0x1324>
   12974:	b	12ddc <__assert_fail@plt+0xabc>
   12978:	b	13644 <__assert_fail@plt+0x1324>
   1297c:	b	13644 <__assert_fail@plt+0x1324>
   12980:	b	13644 <__assert_fail@plt+0x1324>
   12984:	b	13644 <__assert_fail@plt+0x1324>
   12988:	b	13644 <__assert_fail@plt+0x1324>
   1298c:	b	13644 <__assert_fail@plt+0x1324>
   12990:	b	13644 <__assert_fail@plt+0x1324>
   12994:	b	13644 <__assert_fail@plt+0x1324>
   12998:	b	13644 <__assert_fail@plt+0x1324>
   1299c:	b	13644 <__assert_fail@plt+0x1324>
   129a0:	b	13644 <__assert_fail@plt+0x1324>
   129a4:	b	12ddc <__assert_fail@plt+0xabc>
   129a8:	b	12e50 <__assert_fail@plt+0xb30>
   129ac:	b	12ddc <__assert_fail@plt+0xabc>
   129b0:	b	13644 <__assert_fail@plt+0x1324>
   129b4:	b	12ddc <__assert_fail@plt+0xabc>
   129b8:	b	12ddc <__assert_fail@plt+0xabc>
   129bc:	b	12ddc <__assert_fail@plt+0xabc>
   129c0:	b	12ddc <__assert_fail@plt+0xabc>
   129c4:	b	13644 <__assert_fail@plt+0x1324>
   129c8:	b	1346c <__assert_fail@plt+0x114c>
   129cc:	b	13644 <__assert_fail@plt+0x1324>
   129d0:	b	12e70 <__assert_fail@plt+0xb50>
   129d4:	b	12ddc <__assert_fail@plt+0xabc>
   129d8:	b	13510 <__assert_fail@plt+0x11f0>
   129dc:	b	13644 <__assert_fail@plt+0x1324>
   129e0:	b	13644 <__assert_fail@plt+0x1324>
   129e4:	b	12ddc <__assert_fail@plt+0xabc>
   129e8:	b	1300c <__assert_fail@plt+0xcec>
   129ec:	b	13080 <__assert_fail@plt+0xd60>
   129f0:	b	13020 <__assert_fail@plt+0xd00>
   129f4:	b	13644 <__assert_fail@plt+0x1324>
   129f8:	b	13644 <__assert_fail@plt+0x1324>
   129fc:	b	13644 <__assert_fail@plt+0x1324>
   12a00:	b	13034 <__assert_fail@plt+0xd14>
   12a04:	b	13548 <__assert_fail@plt+0x1228>
   12a08:	b	13644 <__assert_fail@plt+0x1324>
   12a0c:	b	13644 <__assert_fail@plt+0x1324>
   12a10:	b	13644 <__assert_fail@plt+0x1324>
   12a14:	b	13644 <__assert_fail@plt+0x1324>
   12a18:	b	13644 <__assert_fail@plt+0x1324>
   12a1c:	b	13644 <__assert_fail@plt+0x1324>
   12a20:	b	13644 <__assert_fail@plt+0x1324>
   12a24:	b	13644 <__assert_fail@plt+0x1324>
   12a28:	b	13644 <__assert_fail@plt+0x1324>
   12a2c:	b	13644 <__assert_fail@plt+0x1324>
   12a30:	b	13644 <__assert_fail@plt+0x1324>
   12a34:	b	13644 <__assert_fail@plt+0x1324>
   12a38:	b	13644 <__assert_fail@plt+0x1324>
   12a3c:	b	13644 <__assert_fail@plt+0x1324>
   12a40:	b	13644 <__assert_fail@plt+0x1324>
   12a44:	b	13644 <__assert_fail@plt+0x1324>
   12a48:	b	13644 <__assert_fail@plt+0x1324>
   12a4c:	b	13644 <__assert_fail@plt+0x1324>
   12a50:	b	13644 <__assert_fail@plt+0x1324>
   12a54:	b	13644 <__assert_fail@plt+0x1324>
   12a58:	b	13644 <__assert_fail@plt+0x1324>
   12a5c:	b	13644 <__assert_fail@plt+0x1324>
   12a60:	b	13644 <__assert_fail@plt+0x1324>
   12a64:	b	13644 <__assert_fail@plt+0x1324>
   12a68:	b	13644 <__assert_fail@plt+0x1324>
   12a6c:	b	13644 <__assert_fail@plt+0x1324>
   12a70:	b	13644 <__assert_fail@plt+0x1324>
   12a74:	b	13644 <__assert_fail@plt+0x1324>
   12a78:	b	13644 <__assert_fail@plt+0x1324>
   12a7c:	b	13644 <__assert_fail@plt+0x1324>
   12a80:	b	13644 <__assert_fail@plt+0x1324>
   12a84:	b	13644 <__assert_fail@plt+0x1324>
   12a88:	b	13644 <__assert_fail@plt+0x1324>
   12a8c:	b	13644 <__assert_fail@plt+0x1324>
   12a90:	b	13644 <__assert_fail@plt+0x1324>
   12a94:	b	13644 <__assert_fail@plt+0x1324>
   12a98:	b	13644 <__assert_fail@plt+0x1324>
   12a9c:	b	13644 <__assert_fail@plt+0x1324>
   12aa0:	b	13644 <__assert_fail@plt+0x1324>
   12aa4:	b	13644 <__assert_fail@plt+0x1324>
   12aa8:	b	13644 <__assert_fail@plt+0x1324>
   12aac:	b	13644 <__assert_fail@plt+0x1324>
   12ab0:	b	13644 <__assert_fail@plt+0x1324>
   12ab4:	b	13644 <__assert_fail@plt+0x1324>
   12ab8:	b	13644 <__assert_fail@plt+0x1324>
   12abc:	b	13644 <__assert_fail@plt+0x1324>
   12ac0:	b	13644 <__assert_fail@plt+0x1324>
   12ac4:	b	13644 <__assert_fail@plt+0x1324>
   12ac8:	b	13644 <__assert_fail@plt+0x1324>
   12acc:	b	13644 <__assert_fail@plt+0x1324>
   12ad0:	b	13644 <__assert_fail@plt+0x1324>
   12ad4:	b	13644 <__assert_fail@plt+0x1324>
   12ad8:	b	13644 <__assert_fail@plt+0x1324>
   12adc:	b	13644 <__assert_fail@plt+0x1324>
   12ae0:	b	13644 <__assert_fail@plt+0x1324>
   12ae4:	b	13644 <__assert_fail@plt+0x1324>
   12ae8:	b	13644 <__assert_fail@plt+0x1324>
   12aec:	b	13644 <__assert_fail@plt+0x1324>
   12af0:	b	13644 <__assert_fail@plt+0x1324>
   12af4:	b	13644 <__assert_fail@plt+0x1324>
   12af8:	b	13644 <__assert_fail@plt+0x1324>
   12afc:	b	13644 <__assert_fail@plt+0x1324>
   12b00:	b	13644 <__assert_fail@plt+0x1324>
   12b04:	b	13644 <__assert_fail@plt+0x1324>
   12b08:	b	13644 <__assert_fail@plt+0x1324>
   12b0c:	b	13644 <__assert_fail@plt+0x1324>
   12b10:	b	13644 <__assert_fail@plt+0x1324>
   12b14:	b	13644 <__assert_fail@plt+0x1324>
   12b18:	b	13644 <__assert_fail@plt+0x1324>
   12b1c:	b	13644 <__assert_fail@plt+0x1324>
   12b20:	b	13644 <__assert_fail@plt+0x1324>
   12b24:	b	13644 <__assert_fail@plt+0x1324>
   12b28:	b	13644 <__assert_fail@plt+0x1324>
   12b2c:	b	13644 <__assert_fail@plt+0x1324>
   12b30:	b	13644 <__assert_fail@plt+0x1324>
   12b34:	b	13644 <__assert_fail@plt+0x1324>
   12b38:	b	13644 <__assert_fail@plt+0x1324>
   12b3c:	b	13644 <__assert_fail@plt+0x1324>
   12b40:	b	13644 <__assert_fail@plt+0x1324>
   12b44:	b	13644 <__assert_fail@plt+0x1324>
   12b48:	b	13644 <__assert_fail@plt+0x1324>
   12b4c:	b	13644 <__assert_fail@plt+0x1324>
   12b50:	b	13644 <__assert_fail@plt+0x1324>
   12b54:	b	13644 <__assert_fail@plt+0x1324>
   12b58:	b	13644 <__assert_fail@plt+0x1324>
   12b5c:	b	13644 <__assert_fail@plt+0x1324>
   12b60:	b	13644 <__assert_fail@plt+0x1324>
   12b64:	b	13644 <__assert_fail@plt+0x1324>
   12b68:	b	13644 <__assert_fail@plt+0x1324>
   12b6c:	b	13644 <__assert_fail@plt+0x1324>
   12b70:	b	13644 <__assert_fail@plt+0x1324>
   12b74:	b	13644 <__assert_fail@plt+0x1324>
   12b78:	b	13644 <__assert_fail@plt+0x1324>
   12b7c:	b	13644 <__assert_fail@plt+0x1324>
   12b80:	b	13644 <__assert_fail@plt+0x1324>
   12b84:	b	13644 <__assert_fail@plt+0x1324>
   12b88:	b	13644 <__assert_fail@plt+0x1324>
   12b8c:	b	13644 <__assert_fail@plt+0x1324>
   12b90:	b	13644 <__assert_fail@plt+0x1324>
   12b94:	b	13644 <__assert_fail@plt+0x1324>
   12b98:	b	13644 <__assert_fail@plt+0x1324>
   12b9c:	b	13644 <__assert_fail@plt+0x1324>
   12ba0:	b	13644 <__assert_fail@plt+0x1324>
   12ba4:	b	13644 <__assert_fail@plt+0x1324>
   12ba8:	b	13644 <__assert_fail@plt+0x1324>
   12bac:	b	13644 <__assert_fail@plt+0x1324>
   12bb0:	b	13644 <__assert_fail@plt+0x1324>
   12bb4:	b	13644 <__assert_fail@plt+0x1324>
   12bb8:	b	13644 <__assert_fail@plt+0x1324>
   12bbc:	b	13644 <__assert_fail@plt+0x1324>
   12bc0:	b	13644 <__assert_fail@plt+0x1324>
   12bc4:	b	13644 <__assert_fail@plt+0x1324>
   12bc8:	b	13644 <__assert_fail@plt+0x1324>
   12bcc:	b	13644 <__assert_fail@plt+0x1324>
   12bd0:	b	13644 <__assert_fail@plt+0x1324>
   12bd4:	b	13644 <__assert_fail@plt+0x1324>
   12bd8:	b	13644 <__assert_fail@plt+0x1324>
   12bdc:	b	13644 <__assert_fail@plt+0x1324>
   12be0:	b	13644 <__assert_fail@plt+0x1324>
   12be4:	b	13644 <__assert_fail@plt+0x1324>
   12be8:	b	13644 <__assert_fail@plt+0x1324>
   12bec:	b	13644 <__assert_fail@plt+0x1324>
   12bf0:	b	13644 <__assert_fail@plt+0x1324>
   12bf4:	b	13644 <__assert_fail@plt+0x1324>
   12bf8:	b	13644 <__assert_fail@plt+0x1324>
   12bfc:	b	13644 <__assert_fail@plt+0x1324>
   12c00:	b	13644 <__assert_fail@plt+0x1324>
   12c04:	b	13644 <__assert_fail@plt+0x1324>
   12c08:	b	13644 <__assert_fail@plt+0x1324>
   12c0c:	b	13644 <__assert_fail@plt+0x1324>
   12c10:	b	13644 <__assert_fail@plt+0x1324>
   12c14:	b	13644 <__assert_fail@plt+0x1324>
   12c18:	b	13644 <__assert_fail@plt+0x1324>
   12c1c:	b	12dfc <__assert_fail@plt+0xadc>
   12c20:	b	1355c <__assert_fail@plt+0x123c>
   12c24:	b	1359c <__assert_fail@plt+0x127c>
   12c28:	b	13188 <__assert_fail@plt+0xe68>
   12c2c:	b	1319c <__assert_fail@plt+0xe7c>
   12c30:	b	1324c <__assert_fail@plt+0xf2c>
   12c34:	b	12d88 <__assert_fail@plt+0xa68>
   12c38:	b	12fb4 <__assert_fail@plt+0xc94>
   12c3c:	str	r1, [sp, #36]	; 0x24
   12c40:	ldr	r7, [sp, #48]	; 0x30
   12c44:	cmp	r7, #0
   12c48:	beq	13688 <__assert_fail@plt+0x1368>
   12c4c:	cmp	r9, #0
   12c50:	bne	135d8 <__assert_fail@plt+0x12b8>
   12c54:	ldr	ip, [sp, #48]	; 0x30
   12c58:	ldrb	r3, [ip]
   12c5c:	cmp	r3, #45	; 0x2d
   12c60:	beq	13ee4 <__assert_fail@plt+0x1bc4>
   12c64:	ldr	r1, [pc, #1736]	; 13334 <__assert_fail@plt+0x1014>
   12c68:	ldr	r0, [sp, #48]	; 0x30
   12c6c:	add	r1, pc, r1
   12c70:	bl	1db64 <__assert_fail@plt+0xb844>
   12c74:	subs	r4, r0, #0
   12c78:	beq	140c0 <__assert_fail@plt+0x1da0>
   12c7c:	add	r5, sp, #512	; 0x200
   12c80:	mov	r0, r5
   12c84:	bl	21884 <__assert_fail@plt+0xf564>
   12c88:	mov	r0, r4
   12c8c:	mov	r1, r5
   12c90:	bl	21944 <__assert_fail@plt+0xf624>
   12c94:	cmp	r0, #0
   12c98:	beq	1364c <__assert_fail@plt+0x132c>
   12c9c:	mov	r0, r4
   12ca0:	bl	238f4 <__assert_fail@plt+0x115d4>
   12ca4:	cmp	r0, #0
   12ca8:	bne	1364c <__assert_fail@plt+0x132c>
   12cac:	ldr	r9, [sp, #512]	; 0x200
   12cb0:	cmp	r9, #0
   12cb4:	beq	13f00 <__assert_fail@plt+0x1be0>
   12cb8:	ldr	r7, [pc, #1656]	; 13338 <__assert_fail@plt+0x1018>
   12cbc:	mov	r0, r8
   12cc0:	mov	r6, #1
   12cc4:	add	r7, pc, r7
   12cc8:	str	r7, [sp, #40]	; 0x28
   12ccc:	bl	11dec <free@plt>
   12cd0:	ldr	r8, [sp, #516]	; 0x204
   12cd4:	ldr	ip, [pc, #1632]	; 1333c <__assert_fail@plt+0x101c>
   12cd8:	add	r7, r9, #1
   12cdc:	add	ip, pc, ip
   12ce0:	mov	r5, r8
   12ce4:	str	ip, [sp, #24]
   12ce8:	str	r8, [sp, #56]	; 0x38
   12cec:	b	12d38 <__assert_fail@plt+0xa18>
   12cf0:	ldrb	r4, [r3, #1]
   12cf4:	cmp	r4, #0
   12cf8:	bne	12d2c <__assert_fail@plt+0xa0c>
   12cfc:	ldr	r1, [sp, #24]
   12d00:	mov	r2, #5
   12d04:	mov	r0, r4
   12d08:	bl	11ec4 <dcgettext@plt>
   12d0c:	mov	r8, r0
   12d10:	ldr	r0, [r5, #-4]
   12d14:	bl	20e80 <__assert_fail@plt+0xeb60>
   12d18:	mov	r2, r8
   12d1c:	mov	r1, r4
   12d20:	mov	r3, r0
   12d24:	mov	r0, #2
   12d28:	bl	12020 <error@plt>
   12d2c:	add	r6, r6, #1
   12d30:	cmp	r6, r7
   12d34:	beq	13684 <__assert_fail@plt+0x1364>
   12d38:	ldr	r3, [r5], #4
   12d3c:	ldrb	r4, [r3]
   12d40:	cmp	r4, #45	; 0x2d
   12d44:	beq	12cf0 <__assert_fail@plt+0x9d0>
   12d48:	cmp	r4, #0
   12d4c:	bne	12d2c <__assert_fail@plt+0xa0c>
   12d50:	ldr	r1, [sp, #40]	; 0x28
   12d54:	mov	r2, #5
   12d58:	mov	r0, r4
   12d5c:	bl	11ec4 <dcgettext@plt>
   12d60:	mov	r8, r0
   12d64:	ldr	r0, [sp, #48]	; 0x30
   12d68:	bl	20d2c <__assert_fail@plt+0xea0c>
   12d6c:	mov	r2, r8
   12d70:	str	r6, [sp]
   12d74:	mov	r1, r4
   12d78:	mov	r3, r0
   12d7c:	mov	r0, #2
   12d80:	bl	12020 <error@plt>
   12d84:	b	12d2c <__assert_fail@plt+0xa0c>
   12d88:	ldr	r0, [pc, #1556]	; 133a4 <__assert_fail@plt+0x1084>
   12d8c:	mov	r1, #1
   12d90:	ldr	r3, [pc, #1448]	; 13340 <__assert_fail@plt+0x1020>
   12d94:	ldr	r2, [pc, #1448]	; 13344 <__assert_fail@plt+0x1024>
   12d98:	ldr	r4, [fp, r0]
   12d9c:	str	r1, [sp]
   12da0:	add	r2, pc, r2
   12da4:	ldr	r3, [fp, r3]
   12da8:	add	r2, r2, #496	; 0x1f0
   12dac:	ldr	r1, [pc, #1428]	; 13348 <__assert_fail@plt+0x1028>
   12db0:	ldr	r0, [pc, #1428]	; 1334c <__assert_fail@plt+0x102c>
   12db4:	ldr	ip, [r3]
   12db8:	add	r1, pc, r1
   12dbc:	add	r3, r1, #396	; 0x18c
   12dc0:	add	r0, pc, r0
   12dc4:	mov	r5, r1
   12dc8:	str	ip, [sp, #4]
   12dcc:	ldr	r1, [r4]
   12dd0:	bl	1c514 <__assert_fail@plt+0xa1f4>
   12dd4:	add	r0, r5, r0
   12dd8:	ldrb	r5, [r0, #396]	; 0x18c
   12ddc:	add	r0, sp, #708	; 0x2c4
   12de0:	add	r1, sp, #224	; 0xe0
   12de4:	mov	r2, #2
   12de8:	mov	r3, #0
   12dec:	strb	r5, [sp, #708]	; 0x2c4
   12df0:	strb	r3, [sp, #709]	; 0x2c5
   12df4:	bl	15c78 <__assert_fail@plt+0x3958>
   12df8:	b	12784 <__assert_fail@plt+0x464>
   12dfc:	ldr	r3, [pc, #1440]	; 133a4 <__assert_fail@plt+0x1084>
   12e00:	ldr	r4, [fp, r3]
   12e04:	ldr	r1, [r4]
   12e08:	cmp	r1, #0
   12e0c:	moveq	r5, #99	; 0x63
   12e10:	beq	12e50 <__assert_fail@plt+0xb30>
   12e14:	ldr	r3, [pc, #1316]	; 13340 <__assert_fail@plt+0x1020>
   12e18:	mov	r2, #1
   12e1c:	str	r2, [sp]
   12e20:	ldr	r4, [pc, #1320]	; 13350 <__assert_fail@plt+0x1030>
   12e24:	ldr	ip, [fp, r3]
   12e28:	ldr	r0, [pc, #1316]	; 13354 <__assert_fail@plt+0x1034>
   12e2c:	add	r4, pc, r4
   12e30:	ldr	r2, [sp, #84]	; 0x54
   12e34:	add	r3, r4, #404	; 0x194
   12e38:	ldr	ip, [ip]
   12e3c:	add	r0, pc, r0
   12e40:	str	ip, [sp, #4]
   12e44:	bl	1c514 <__assert_fail@plt+0xa1f4>
   12e48:	add	r0, r4, r0
   12e4c:	ldrb	r5, [r0, #404]	; 0x194
   12e50:	ldr	ip, [sp, #36]	; 0x24
   12e54:	cmp	ip, #0
   12e58:	beq	12e64 <__assert_fail@plt+0xb44>
   12e5c:	cmp	ip, r5
   12e60:	bne	150bc <__assert_fail@plt+0x2d9c>
   12e64:	uxtb	ip, r5
   12e68:	str	ip, [sp, #36]	; 0x24
   12e6c:	b	12784 <__assert_fail@plt+0x464>
   12e70:	mov	ip, #1
   12e74:	str	ip, [sp, #80]	; 0x50
   12e78:	b	12784 <__assert_fail@plt+0x464>
   12e7c:	ldr	r2, [pc, #1236]	; 13358 <__assert_fail@plt+0x1038>
   12e80:	mov	r4, #0
   12e84:	ldr	r3, [pc, #1232]	; 1335c <__assert_fail@plt+0x103c>
   12e88:	ldr	r1, [pc, #1232]	; 13360 <__assert_fail@plt+0x1040>
   12e8c:	ldr	r0, [fp, r2]
   12e90:	ldr	r3, [fp, r3]
   12e94:	add	r1, pc, r1
   12e98:	ldr	r2, [pc, #1220]	; 13364 <__assert_fail@plt+0x1044>
   12e9c:	ldr	r0, [r0]
   12ea0:	add	r2, pc, r2
   12ea4:	ldr	r3, [r3]
   12ea8:	stm	sp, {r1, r2, r4}
   12eac:	ldr	r1, [pc, #1204]	; 13368 <__assert_fail@plt+0x1048>
   12eb0:	ldr	r2, [pc, #1204]	; 1336c <__assert_fail@plt+0x104c>
   12eb4:	add	r1, pc, r1
   12eb8:	add	r2, pc, r2
   12ebc:	bl	225dc <__assert_fail@plt+0x102bc>
   12ec0:	mov	r0, r4
   12ec4:	bl	120c8 <exit@plt>
   12ec8:	mov	r0, #0
   12ecc:	bl	1be38 <__assert_fail@plt+0x9b18>
   12ed0:	ldr	lr, [sp, #156]	; 0x9c
   12ed4:	add	r1, sp, #264	; 0x108
   12ed8:	ldr	ip, [pc, #1220]	; 133a4 <__assert_fail@plt+0x1084>
   12edc:	mov	r2, #10
   12ee0:	ldr	r0, [pc, #1160]	; 13370 <__assert_fail@plt+0x1050>
   12ee4:	add	r3, sp, #512	; 0x200
   12ee8:	str	lr, [sp, #92]	; 0x5c
   12eec:	ldr	r4, [fp, ip]
   12ef0:	add	r0, pc, r0
   12ef4:	ldr	r4, [r4]
   12ef8:	str	r0, [sp]
   12efc:	mov	r0, r4
   12f00:	bl	2319c <__assert_fail@plt+0x10e7c>
   12f04:	cmp	r0, #0
   12f08:	bne	13fe4 <__assert_fail@plt+0x1cc4>
   12f0c:	ldr	r3, [sp, #264]	; 0x108
   12f10:	ldrb	r3, [r3, #-1]
   12f14:	sub	r3, r3, #48	; 0x30
   12f18:	cmp	r3, #9
   12f1c:	bhi	12f54 <__assert_fail@plt+0xc34>
   12f20:	add	r0, sp, #512	; 0x200
   12f24:	movw	r1, #65535	; 0xffff
   12f28:	movt	r1, #63	; 0x3f
   12f2c:	ldrd	r2, [r0]
   12f30:	mvn	r0, #0
   12f34:	cmp	r3, r1
   12f38:	cmpeq	r2, r0
   12f3c:	bhi	14be8 <__assert_fail@plt+0x28c8>
   12f40:	lsl	r3, r3, #10
   12f44:	lsl	r1, r2, #10
   12f48:	orr	r3, r3, r2, lsr #22
   12f4c:	str	r1, [sp, #512]	; 0x200
   12f50:	str	r3, [sp, #516]	; 0x204
   12f54:	ldr	ip, [pc, #1048]	; 13374 <__assert_fail@plt+0x1054>
   12f58:	add	lr, sp, #512	; 0x200
   12f5c:	mov	r1, #0
   12f60:	add	ip, pc, ip
   12f64:	ldrd	r2, [lr]
   12f68:	ldr	r0, [ip, #1436]	; 0x59c
   12f6c:	cmp	r1, r3
   12f70:	cmpeq	r0, r2
   12f74:	bhi	12784 <__assert_fail@plt+0x464>
   12f78:	mov	r0, r2
   12f7c:	mov	r1, #0
   12f80:	cmp	r3, r1
   12f84:	cmpeq	r2, r0
   12f88:	str	r2, [ip, #1436]	; 0x59c
   12f8c:	bne	14be8 <__assert_fail@plt+0x28c8>
   12f90:	ldr	r3, [pc, #992]	; 13378 <__assert_fail@plt+0x1058>
   12f94:	mov	r1, #18
   12f98:	add	r3, pc, r3
   12f9c:	ldr	r3, [r3, #4]
   12fa0:	mul	r3, r1, r3
   12fa4:	cmp	r3, r2
   12fa8:	strcs	r3, [ip, #1436]	; 0x59c
   12fac:	strcc	r2, [ip, #1436]	; 0x59c
   12fb0:	b	12784 <__assert_fail@plt+0x464>
   12fb4:	ldr	lr, [sp, #156]	; 0x9c
   12fb8:	mov	r1, #0
   12fbc:	ldr	ip, [pc, #992]	; 133a4 <__assert_fail@plt+0x1084>
   12fc0:	mov	r2, #10
   12fc4:	ldr	r0, [pc, #944]	; 1337c <__assert_fail@plt+0x105c>
   12fc8:	add	r3, sp, #512	; 0x200
   12fcc:	str	lr, [sp, #76]	; 0x4c
   12fd0:	ldr	r4, [fp, ip]
   12fd4:	add	r0, pc, r0
   12fd8:	ldr	r4, [r4]
   12fdc:	str	r0, [sp]
   12fe0:	mov	r0, r4
   12fe4:	bl	22b70 <__assert_fail@plt+0x10850>
   12fe8:	cmp	r0, #1
   12fec:	beq	14100 <__assert_fail@plt+0x1de0>
   12ff0:	cmp	r0, #0
   12ff4:	bne	151a0 <__assert_fail@plt+0x2e80>
   12ff8:	ldr	r4, [sp, #512]	; 0x200
   12ffc:	cmp	r4, #0
   13000:	beq	14098 <__assert_fail@plt+0x1d78>
   13004:	str	r4, [sp, #76]	; 0x4c
   13008:	b	12784 <__assert_fail@plt+0x464>
   1300c:	ldr	r3, [pc, #876]	; 13380 <__assert_fail@plt+0x1060>
   13010:	mov	r2, #1
   13014:	add	r3, pc, r3
   13018:	strb	r2, [r3, #1389]	; 0x56d
   1301c:	b	12784 <__assert_fail@plt+0x464>
   13020:	ldr	r3, [pc, #860]	; 13384 <__assert_fail@plt+0x1064>
   13024:	mov	r2, #1
   13028:	add	r3, pc, r3
   1302c:	strb	r2, [r3, #1388]	; 0x56c
   13030:	b	12784 <__assert_fail@plt+0x464>
   13034:	ldr	r3, [pc, #748]	; 13328 <__assert_fail@plt+0x1008>
   13038:	ldr	r2, [pc, #868]	; 133a4 <__assert_fail@plt+0x1084>
   1303c:	ldr	r3, [fp, r3]
   13040:	ldr	r4, [fp, r2]
   13044:	ldr	r2, [r3]
   13048:	ldr	r0, [r4]
   1304c:	sub	r1, r2, #-1073741823	; 0xc0000001
   13050:	ldr	r1, [r7, r1, lsl #2]
   13054:	cmp	r1, r0
   13058:	bne	12784 <__assert_fail@plt+0x464>
   1305c:	sub	r1, r1, #1
   13060:	ldrb	r0, [r1, #1]!
   13064:	sub	ip, r0, #48	; 0x30
   13068:	cmp	ip, #9
   1306c:	bls	13060 <__assert_fail@plt+0xd40>
   13070:	cmp	r0, #0
   13074:	subne	r2, r2, #1
   13078:	str	r2, [r3]
   1307c:	b	12784 <__assert_fail@plt+0x464>
   13080:	ldr	r3, [pc, #796]	; 133a4 <__assert_fail@plt+0x1084>
   13084:	add	ip, sp, #708	; 0x2c4
   13088:	str	ip, [sp, #68]	; 0x44
   1308c:	mov	r2, #16
   13090:	mov	r0, ip
   13094:	ldr	r4, [fp, r3]
   13098:	ldr	r1, [r4]
   1309c:	bl	12164 <strncpy@plt>
   130a0:	ldrb	r3, [sp, #708]	; 0x2c4
   130a4:	cmp	r3, #0
   130a8:	beq	14580 <__assert_fail@plt+0x2260>
   130ac:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   130b0:	cmp	r0, #1
   130b4:	bls	14030 <__assert_fail@plt+0x1d10>
   130b8:	mov	r3, #0
   130bc:	ldr	r0, [sp, #68]	; 0x44
   130c0:	mov	r1, #16
   130c4:	str	r3, [sl]
   130c8:	str	r3, [sl, #4]
   130cc:	bl	121d0 <strnlen@plt>
   130d0:	ldr	r1, [sp, #68]	; 0x44
   130d4:	mov	r3, sl
   130d8:	mov	r2, r0
   130dc:	add	r0, sp, #512	; 0x200
   130e0:	bl	12014 <mbrtowc@plt>
   130e4:	subs	ip, r0, #0
   130e8:	beq	14030 <__assert_fail@plt+0x1d10>
   130ec:	cmn	ip, #2
   130f0:	bcs	14030 <__assert_fail@plt+0x1d10>
   130f4:	cmp	ip, #1
   130f8:	beq	14030 <__assert_fail@plt+0x1d10>
   130fc:	ldr	lr, [sp, #56]	; 0x38
   13100:	ldr	r3, [lr]
   13104:	cmp	r3, #0
   13108:	beq	13160 <__assert_fail@plt+0xe40>
   1310c:	cmp	ip, r3
   13110:	bne	13134 <__assert_fail@plt+0xe14>
   13114:	mov	r2, ip
   13118:	ldr	r0, [sp, #88]	; 0x58
   1311c:	ldr	r1, [sp, #68]	; 0x44
   13120:	str	ip, [sp, #16]
   13124:	bl	11eac <memcmp@plt>
   13128:	ldr	ip, [sp, #16]
   1312c:	cmp	r0, #0
   13130:	beq	13160 <__assert_fail@plt+0xe40>
   13134:	ldr	r1, [pc, #588]	; 13388 <__assert_fail@plt+0x1068>
   13138:	mov	r2, #5
   1313c:	mov	r0, #0
   13140:	str	ip, [sp, #16]
   13144:	add	r1, pc, r1
   13148:	bl	11ec4 <dcgettext@plt>
   1314c:	mov	r1, #0
   13150:	mov	r2, r0
   13154:	mov	r0, #2
   13158:	bl	12020 <error@plt>
   1315c:	ldr	ip, [sp, #16]
   13160:	mov	r2, ip
   13164:	ldr	r1, [sp, #68]	; 0x44
   13168:	ldr	r0, [sp, #72]	; 0x48
   1316c:	mov	r3, #17
   13170:	str	ip, [sp, #16]
   13174:	bl	11f9c <__memcpy_chk@plt>
   13178:	ldr	ip, [sp, #16]
   1317c:	ldr	r0, [sp, #60]	; 0x3c
   13180:	str	ip, [r0]
   13184:	b	12784 <__assert_fail@plt+0x464>
   13188:	ldr	r3, [pc, #532]	; 133a4 <__assert_fail@plt+0x1084>
   1318c:	ldr	r4, [fp, r3]
   13190:	ldr	r4, [r4]
   13194:	str	r4, [sp, #48]	; 0x30
   13198:	b	12784 <__assert_fail@plt+0x464>
   1319c:	ldr	lr, [sp, #156]	; 0x9c
   131a0:	mov	r0, #0
   131a4:	ldr	ip, [pc, #504]	; 133a4 <__assert_fail@plt+0x1084>
   131a8:	add	r3, sp, #264	; 0x108
   131ac:	mov	r1, r0
   131b0:	mov	r2, #10
   131b4:	str	lr, [sp, #68]	; 0x44
   131b8:	ldr	r4, [fp, ip]
   131bc:	ldr	r4, [r4]
   131c0:	str	r0, [sp]
   131c4:	mov	r0, r4
   131c8:	bl	2319c <__assert_fail@plt+0x10e7c>
   131cc:	add	r1, sp, #512	; 0x200
   131d0:	mov	ip, r0
   131d4:	mov	r0, #7
   131d8:	str	ip, [sp, #16]
   131dc:	bl	11f24 <getrlimit64@plt>
   131e0:	ldr	ip, [sp, #16]
   131e4:	cmp	r0, #0
   131e8:	ldreq	r3, [sp, #512]	; 0x200
   131ec:	movne	r0, #17
   131f0:	strne	r0, [sp, #92]	; 0x5c
   131f4:	subeq	r3, r3, #3
   131f8:	streq	r3, [sp, #92]	; 0x5c
   131fc:	cmp	ip, #0
   13200:	bne	13f38 <__assert_fail@plt+0x1c18>
   13204:	add	r2, sp, #744	; 0x2e8
   13208:	movw	r3, #65056	; 0xfe20
   1320c:	movt	r3, #65535	; 0xffff
   13210:	ldr	lr, [pc, #372]	; 1338c <__assert_fail@plt+0x106c>
   13214:	ldrd	r0, [r2, r3]
   13218:	add	lr, pc, lr
   1321c:	mov	r3, #0
   13220:	mov	r2, r0
   13224:	cmp	r1, r3
   13228:	cmpeq	r0, r2
   1322c:	str	r0, [lr, #4]
   13230:	bne	13f40 <__assert_fail@plt+0x1c20>
   13234:	cmp	r0, #1
   13238:	bls	150c8 <__assert_fail@plt+0x2da8>
   1323c:	ldr	ip, [sp, #92]	; 0x5c
   13240:	cmp	r0, ip
   13244:	bhi	13f40 <__assert_fail@plt+0x1c20>
   13248:	b	12784 <__assert_fail@plt+0x464>
   1324c:	ldr	ip, [sp, #64]	; 0x40
   13250:	ldr	r3, [pc, #332]	; 133a4 <__assert_fail@plt+0x1084>
   13254:	cmp	ip, #0
   13258:	ldreq	r4, [fp, r3]
   1325c:	beq	13278 <__assert_fail@plt+0xf58>
   13260:	ldr	r4, [fp, r3]
   13264:	ldr	r0, [sp, #64]	; 0x40
   13268:	ldr	r1, [r4]
   1326c:	bl	11d68 <strcmp@plt>
   13270:	cmp	r0, #0
   13274:	bne	14860 <__assert_fail@plt+0x2540>
   13278:	ldr	r4, [r4]
   1327c:	str	r4, [sp, #64]	; 0x40
   13280:	b	12784 <__assert_fail@plt+0x464>
   13284:	ldr	r3, [pc, #280]	; 133a4 <__assert_fail@plt+0x1084>
   13288:	ldr	r4, [fp, r3]
   1328c:	ldr	r0, [r4]
   13290:	bl	16938 <__assert_fail@plt+0x4618>
   13294:	b	12784 <__assert_fail@plt+0x464>
   13298:	andeq	r5, r2, ip, lsr #25
   1329c:	andeq	r0, r0, ip, lsl r2
   132a0:	andeq	r4, r1, ip, lsr r5
   132a4:	andeq	r4, r1, r4, ror r4
   132a8:			; <UNDEFINED> instruction: 0x00025fb8
   132ac:	andeq	r3, r1, r8, lsl #20
   132b0:	andeq	r4, r1, r4, lsl #10
   132b4:	andeq	r0, r0, r4, asr #4
   132b8:	andeq	r5, r2, ip, lsl pc
   132bc:	andeq	r5, r2, ip, ror #29
   132c0:	andeq	r6, r0, r8, asr #20
   132c4:	muleq	r0, r0, r6
   132c8:	muleq	r0, ip, r1
   132cc:	andeq	r7, r0, r8, lsl #15
   132d0:	andeq	r6, r0, ip, lsl #27
   132d4:	andeq	r6, r0, r0, rrx
   132d8:	andeq	r7, r0, r0, ror sl
   132dc:	andeq	r5, r2, r8, lsl #29
   132e0:	andeq	r2, r1, r8, ror lr
   132e4:	andeq	r5, r2, r0, ror lr
   132e8:	andeq	r5, r2, r8, lsl #28
   132ec:	andeq	r3, r0, r0, ror #21
   132f0:	andeq	r3, r0, ip, asr #19
   132f4:	andeq	r5, r2, r0, asr #26
   132f8:	andeq	r4, r0, r8, asr r0
   132fc:	andeq	r5, r2, ip, lsl sp
   13300:	ldrdeq	r2, [r0], -ip
   13304:	muleq	r0, r8, r0
   13308:	andeq	r3, r0, r4, ror #4
   1330c:	andeq	r3, r0, ip, ror r3
   13310:	andeq	r5, r0, r4, lsl #12
   13314:	strdeq	r3, [r0], -r4
   13318:	andeq	r5, r2, r0, asr #25
   1331c:	andeq	r5, r2, r4, lsr #25
   13320:	andeq	r5, r2, r0, lsl #25
   13324:	strdeq	r5, [r2], -r0
   13328:	andeq	r0, r0, r0, lsr #4
   1332c:	andeq	r2, r1, r4, asr #22
   13330:	ldrdeq	r5, [r2], -r0
   13334:	andeq	r2, r1, ip, lsl #24
   13338:	andeq	r3, r1, r8, lsl pc
   1333c:	andeq	r3, r1, r0, asr #29
   13340:	andeq	r0, r0, ip, lsr #4
   13344:	andeq	r4, r2, r8, lsl pc
   13348:	andeq	r2, r1, r8, ror #10
   1334c:	andeq	r3, r1, r8, asr fp
   13350:	strdeq	r2, [r1], -r4
   13354:	andeq	r3, r1, r4, ror #21
   13358:	andeq	r0, r0, r0, asr #4
   1335c:	andeq	r0, r0, r4, lsr #4
   13360:	andeq	r3, r1, r8, ror #24
   13364:	andeq	r3, r1, ip, ror #24
   13368:	andeq	r4, r1, r8, lsl r0
   1336c:	andeq	r3, r1, ip, lsl r9
   13370:	andeq	r3, r1, r0, lsr #23
   13374:	andeq	r5, r2, r8, asr #7
   13378:	andeq	r5, r2, r0, asr #5
   1337c:	andeq	r2, r1, ip, asr #27
   13380:	andeq	r5, r2, r4, lsl r3
   13384:	andeq	r5, r2, r0, lsl #6
   13388:	andeq	r3, r1, r0, lsl #19
   1338c:	andeq	r5, r2, r0, asr #32
   13390:			; <UNDEFINED> instruction: 0x000134b8
   13394:	andeq	r4, r2, r8, lsl #26
   13398:	andeq	r4, r2, r8, asr #27
   1339c:	muleq	r2, r8, sp
   133a0:	andeq	r4, r2, r4, lsl #27
   133a4:	andeq	r0, r0, r8, asr r2
   133a8:	andeq	r3, r1, r4, lsr r5
   133ac:	andeq	r0, r0, r8, lsr #4
   133b0:	andeq	r3, r1, ip, lsl #10
   133b4:	andeq	r3, r1, r8, lsl ip
   133b8:	andeq	r3, r1, r4, lsr #10
   133bc:	muleq	r2, ip, ip
   133c0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   133c4:	andeq	r4, r2, ip, asr #22
   133c8:	strdeq	r3, [r1], -r0
   133cc:	andeq	r3, r1, r4, ror #7
   133d0:	ldrdeq	r3, [r1], -r4
   133d4:	strdeq	r3, [r1], -r0
   133d8:	andeq	r4, r2, r8, lsl #21
   133dc:	andeq	r4, r2, r8, ror sl
   133e0:	andeq	r4, r2, r8, ror #20
   133e4:	andeq	r3, r1, r4, lsr r4
   133e8:	andeq	r3, r1, ip, ror #5
   133ec:	andeq	r3, r1, r8
   133f0:	andeq	r4, r2, r0, lsr #12
   133f4:	andeq	r4, r2, r0, lsl #12
   133f8:	andeq	r4, r2, ip, ror #11
   133fc:	andeq	r2, r1, ip, lsr #31
   13400:	andeq	r2, r1, r0, asr #31
   13404:	andeq	r4, r2, r0, ror r5
   13408:	andeq	r4, r2, ip, asr r5
   1340c:	andeq	r2, r1, ip, ror #30
   13410:	andeq	r4, r2, r0, lsl r5
   13414:	andeq	r4, r2, r0, lsl #10
   13418:	andeq	r4, r2, r4, ror #9
   1341c:	strdeq	r4, [r2], -ip
   13420:	andeq	r2, r1, ip, lsl #30
   13424:	andeq	r4, r2, r0, lsl #7
   13428:	andeq	r0, r0, ip, lsr r2
   1342c:	strdeq	r2, [r1], -r8
   13430:	andeq	r2, r1, r8, ror sl
   13434:	andeq	r3, r2, ip, asr sp
   13438:	andeq	r2, r1, r8, asr #20
   1343c:	andeq	r3, r2, r8, lsr #25
   13440:	andeq	r4, r2, r8, lsr r2
   13444:	andeq	r2, r1, ip, asr #20
   13448:	andeq	r2, r1, r8, lsr sl
   1344c:	muleq	r1, r4, sl
   13450:	andeq	r4, r2, r0, lsr #2
   13454:	strdeq	r4, [r2], -ip
   13458:	andeq	r1, r1, r8, lsl r6
   1345c:	andeq	r4, r2, r4, asr r0
   13460:	andeq	r4, r2, ip, lsr r0
   13464:	andeq	r1, r1, r8, ror #9
   13468:	andeq	r3, r0, ip, lsr #9
   1346c:	add	r3, sp, #184	; 0xb8
   13470:	mov	r1, #0
   13474:	mov	r2, #40	; 0x28
   13478:	str	r3, [sp, #68]	; 0x44
   1347c:	mov	r0, r3
   13480:	bl	12158 <memset@plt>
   13484:	ldr	r3, [pc, #-232]	; 133a4 <__assert_fail@plt+0x1084>
   13488:	mvn	r2, #0
   1348c:	str	r2, [sp, #192]	; 0xc0
   13490:	ldr	r2, [pc, #-264]	; 13390 <__assert_fail@plt+0x1070>
   13494:	ldr	r4, [fp, r3]
   13498:	ldr	r1, [sp, #68]	; 0x44
   1349c:	add	r2, pc, r2
   134a0:	ldr	r0, [r4]
   134a4:	bl	1a238 <__assert_fail@plt+0x7f18>
   134a8:	ldr	r3, [sp, #184]	; 0xb8
   134ac:	cmp	r3, #0
   134b0:	sub	r3, r3, #1
   134b4:	str	r3, [sp, #184]	; 0xb8
   134b8:	beq	15084 <__assert_fail@plt+0x2d64>
   134bc:	ldrb	r2, [r0]
   134c0:	cmp	r2, #46	; 0x2e
   134c4:	beq	14e04 <__assert_fail@plt+0x2ae4>
   134c8:	cmp	r3, #0
   134cc:	beq	13fd0 <__assert_fail@plt+0x1cb0>
   134d0:	ldr	r1, [sp, #68]	; 0x44
   134d4:	mov	r2, #0
   134d8:	bl	15c78 <__assert_fail@plt+0x3958>
   134dc:	ldrb	r3, [r0]
   134e0:	cmp	r3, #44	; 0x2c
   134e4:	beq	14dc0 <__assert_fail@plt+0x2aa0>
   134e8:	mvn	r3, #0
   134ec:	str	r3, [sp, #192]	; 0xc0
   134f0:	mov	r3, #0
   134f4:	str	r3, [sp, #196]	; 0xc4
   134f8:	ldrb	r3, [r0]
   134fc:	cmp	r3, #0
   13500:	bne	1504c <__assert_fail@plt+0x2d2c>
   13504:	ldr	r0, [sp, #68]	; 0x44
   13508:	bl	168e0 <__assert_fail@plt+0x45c0>
   1350c:	b	12784 <__assert_fail@plt+0x464>
   13510:	ldr	ip, [sp, #44]	; 0x2c
   13514:	ldr	r3, [pc, #-376]	; 133a4 <__assert_fail@plt+0x1084>
   13518:	cmp	ip, #0
   1351c:	ldreq	r4, [fp, r3]
   13520:	beq	1353c <__assert_fail@plt+0x121c>
   13524:	ldr	r4, [fp, r3]
   13528:	ldr	r0, [sp, #44]	; 0x2c
   1352c:	ldr	r1, [r4]
   13530:	bl	11d68 <strcmp@plt>
   13534:	cmp	r0, #0
   13538:	bne	148b0 <__assert_fail@plt+0x2590>
   1353c:	ldr	r4, [r4]
   13540:	str	r4, [sp, #44]	; 0x2c
   13544:	b	12784 <__assert_fail@plt+0x464>
   13548:	ldr	r3, [pc, #-444]	; 13394 <__assert_fail@plt+0x1074>
   1354c:	mov	r2, #0
   13550:	add	r3, pc, r3
   13554:	strb	r2, [r3]
   13558:	b	12784 <__assert_fail@plt+0x464>
   1355c:	ldr	r3, [pc, #-460]	; 13398 <__assert_fail@plt+0x1078>
   13560:	add	r3, pc, r3
   13564:	ldr	r0, [r3, #1392]	; 0x570
   13568:	ldr	r3, [pc, #-460]	; 133a4 <__assert_fail@plt+0x1084>
   1356c:	cmp	r0, #0
   13570:	ldr	r4, [fp, r3]
   13574:	beq	13588 <__assert_fail@plt+0x1268>
   13578:	ldr	r1, [r4]
   1357c:	bl	11d68 <strcmp@plt>
   13580:	cmp	r0, #0
   13584:	bne	14888 <__assert_fail@plt+0x2568>
   13588:	ldr	r3, [pc, #-500]	; 1339c <__assert_fail@plt+0x107c>
   1358c:	ldr	r2, [r4]
   13590:	add	r3, pc, r3
   13594:	str	r2, [r3, #1392]	; 0x570
   13598:	b	12784 <__assert_fail@plt+0x464>
   1359c:	ldr	r3, [pc, #-516]	; 133a0 <__assert_fail@plt+0x1080>
   135a0:	mov	r2, #1
   135a4:	add	r3, pc, r3
   135a8:	strb	r2, [r3, #1373]	; 0x55d
   135ac:	b	12784 <__assert_fail@plt+0x464>
   135b0:	ldr	r3, [pc, #-532]	; 133a4 <__assert_fail@plt+0x1084>
   135b4:	ldr	r4, [fp, r3]
   135b8:	ldr	ip, [r4]
   135bc:	ldrb	r3, [ip]
   135c0:	cmp	r3, #43	; 0x2b
   135c4:	beq	145b0 <__assert_fail@plt+0x2290>
   135c8:	ldr	r3, [r4]
   135cc:	str	r3, [r8, r9, lsl #2]
   135d0:	add	r9, r9, #1
   135d4:	b	12784 <__assert_fail@plt+0x464>
   135d8:	ldr	r1, [pc, #-568]	; 133a8 <__assert_fail@plt+0x1088>
   135dc:	mov	r2, #5
   135e0:	mov	r0, #0
   135e4:	add	r1, pc, r1
   135e8:	bl	11ec4 <dcgettext@plt>
   135ec:	mov	r4, r0
   135f0:	ldr	r0, [r8]
   135f4:	bl	20e80 <__assert_fail@plt+0xeb60>
   135f8:	mov	r2, r4
   135fc:	mov	r3, r0
   13600:	mov	r0, #0
   13604:	mov	r1, r0
   13608:	bl	12020 <error@plt>
   1360c:	ldr	r3, [pc, #-616]	; 133ac <__assert_fail@plt+0x108c>
   13610:	ldr	r1, [pc, #-616]	; 133b0 <__assert_fail@plt+0x1090>
   13614:	mov	r2, #5
   13618:	mov	r0, #0
   1361c:	ldr	r3, [fp, r3]
   13620:	add	r1, pc, r1
   13624:	ldr	r4, [r3]
   13628:	bl	11ec4 <dcgettext@plt>
   1362c:	ldr	r2, [pc, #-640]	; 133b4 <__assert_fail@plt+0x1094>
   13630:	mov	r1, #1
   13634:	add	r2, pc, r2
   13638:	mov	r3, r0
   1363c:	mov	r0, r4
   13640:	bl	121ac <__fprintf_chk@plt>
   13644:	mov	r0, #2
   13648:	bl	1be38 <__assert_fail@plt+0x9b18>
   1364c:	ldr	r1, [pc, #-668]	; 133b8 <__assert_fail@plt+0x1098>
   13650:	mov	r2, #5
   13654:	mov	r0, #0
   13658:	add	r1, pc, r1
   1365c:	bl	11ec4 <dcgettext@plt>
   13660:	mov	r4, r0
   13664:	ldr	r0, [sp, #48]	; 0x30
   13668:	bl	20e80 <__assert_fail@plt+0xeb60>
   1366c:	mov	r2, r4
   13670:	mov	r1, #0
   13674:	mov	r3, r0
   13678:	mov	r0, #2
   1367c:	bl	12020 <error@plt>
   13680:	b	12cac <__assert_fail@plt+0x98c>
   13684:	ldr	r8, [sp, #56]	; 0x38
   13688:	ldr	r3, [pc, #-724]	; 133bc <__assert_fail@plt+0x109c>
   1368c:	add	r3, pc, r3
   13690:	ldr	r4, [r3, #1356]	; 0x54c
   13694:	cmp	r4, #0
   13698:	beq	14bb4 <__assert_fail@plt+0x2894>
   1369c:	mov	r6, #0
   136a0:	mov	r0, r4
   136a4:	bl	15ad0 <__assert_fail@plt+0x37b0>
   136a8:	cmp	r0, #0
   136ac:	beq	13714 <__assert_fail@plt+0x13f4>
   136b0:	ldrb	r3, [r4, #31]
   136b4:	cmp	r3, #0
   136b8:	bne	13714 <__assert_fail@plt+0x13f4>
   136bc:	ldr	r3, [sp, #240]	; 0xf0
   136c0:	str	r3, [r4, #16]
   136c4:	ldr	r3, [sp, #244]	; 0xf4
   136c8:	str	r3, [r4, #20]
   136cc:	ldrb	r3, [sp, #248]	; 0xf8
   136d0:	strb	r3, [r4, #24]
   136d4:	ldrb	r3, [sp, #249]	; 0xf9
   136d8:	strb	r3, [r4, #25]
   136dc:	ldrb	r3, [sp, #250]	; 0xfa
   136e0:	ldrb	r1, [sp, #254]	; 0xfe
   136e4:	strb	r3, [r4, #26]
   136e8:	ldrb	r2, [sp, #252]	; 0xfc
   136ec:	ldrb	r3, [sp, #251]	; 0xfb
   136f0:	strb	r1, [r4, #30]
   136f4:	strb	r2, [r4, #28]
   136f8:	ldrb	r2, [sp, #253]	; 0xfd
   136fc:	strb	r2, [r4, #29]
   13700:	ldrb	r2, [sp, #256]	; 0x100
   13704:	strb	r3, [r4, #27]
   13708:	ldrb	r3, [sp, #255]	; 0xff
   1370c:	strb	r2, [r4, #32]
   13710:	strb	r3, [r4, #31]
   13714:	ldrb	r3, [r4, #27]
   13718:	ldr	r4, [r4, #36]	; 0x24
   1371c:	orr	r6, r6, r3
   13720:	cmp	r4, #0
   13724:	uxtb	r6, r6
   13728:	bne	136a0 <__assert_fail@plt+0x1380>
   1372c:	str	r4, [sp, #24]
   13730:	ldr	r3, [pc, #-888]	; 133c0 <__assert_fail@plt+0x10a0>
   13734:	add	r3, pc, r3
   13738:	ldr	r3, [r3, #1356]	; 0x54c
   1373c:	cmp	r3, #0
   13740:	beq	137d8 <__assert_fail@plt+0x14b8>
   13744:	ldrb	r2, [r3, #28]
   13748:	ldrb	ip, [r3, #26]
   1374c:	ldrb	r1, [r3, #29]
   13750:	ldrb	r0, [r3, #32]
   13754:	add	ip, ip, r2
   13758:	ldrb	r2, [r3, #27]
   1375c:	add	ip, ip, r1
   13760:	ldrb	r1, [r3, #30]
   13764:	orr	r2, r0, r2
   13768:	ldr	r0, [r3, #16]
   1376c:	add	r1, ip, r1
   13770:	cmp	r0, #0
   13774:	orrne	r2, r2, #1
   13778:	add	r2, r1, r2
   1377c:	cmp	r2, #1
   13780:	ble	137cc <__assert_fail@plt+0x14ac>
   13784:	b	1505c <__assert_fail@plt+0x2d3c>
   13788:	ldrb	r0, [r3, #26]
   1378c:	ldrb	r1, [r3, #28]
   13790:	ldrb	ip, [r3, #29]
   13794:	ldrb	r2, [r3, #27]
   13798:	add	r1, r0, r1
   1379c:	ldrb	r0, [r3, #32]
   137a0:	add	r1, r1, ip
   137a4:	ldrb	ip, [r3, #30]
   137a8:	orr	r0, r2, r0
   137ac:	ldr	r2, [r3, #16]
   137b0:	add	r1, r1, ip
   137b4:	cmp	r2, #0
   137b8:	moveq	r2, r0
   137bc:	orrne	r2, r0, #1
   137c0:	add	r2, r1, r2
   137c4:	cmp	r2, #1
   137c8:	bgt	1505c <__assert_fail@plt+0x2d3c>
   137cc:	ldr	r3, [r3, #36]	; 0x24
   137d0:	cmp	r3, #0
   137d4:	bne	13788 <__assert_fail@plt+0x1468>
   137d8:	ldr	r3, [pc, #-1052]	; 133c4 <__assert_fail@plt+0x10a4>
   137dc:	add	r3, pc, r3
   137e0:	ldrb	r2, [r3, #1373]	; 0x55d
   137e4:	cmp	r2, #0
   137e8:	beq	13e0c <__assert_fail@plt+0x1aec>
   137ec:	ldr	ip, [sp, #36]	; 0x24
   137f0:	ldr	r7, [sp, #44]	; 0x2c
   137f4:	adds	r2, ip, #0
   137f8:	movne	r2, #1
   137fc:	cmp	r7, #0
   13800:	moveq	r4, r2
   13804:	orrne	r4, r2, #1
   13808:	cmp	r4, #0
   1380c:	bne	14018 <__assert_fail@plt+0x1cf8>
   13810:	ldrb	r5, [r3, #1352]	; 0x548
   13814:	cmp	r5, #0
   13818:	beq	14838 <__assert_fail@plt+0x2518>
   1381c:	ldr	r1, [pc, #-1116]	; 133c8 <__assert_fail@plt+0x10a8>
   13820:	mov	r2, #5
   13824:	mov	r0, r4
   13828:	add	r1, pc, r1
   1382c:	bl	11ec4 <dcgettext@plt>
   13830:	mov	r1, r4
   13834:	mov	r5, r0
   13838:	mov	r0, #3
   1383c:	bl	1220c <setlocale@plt>
   13840:	bl	20e80 <__assert_fail@plt+0xeb60>
   13844:	mov	r1, r4
   13848:	mov	r2, r5
   1384c:	mov	r3, r0
   13850:	mov	r0, r4
   13854:	bl	12020 <error@plt>
   13858:	add	lr, sp, #224	; 0xe0
   1385c:	add	ip, sp, #264	; 0x108
   13860:	ldr	r7, [pc, #-1180]	; 133cc <__assert_fail@plt+0x10ac>
   13864:	mov	r5, #1
   13868:	ldm	lr!, {r0, r1, r2, r3}
   1386c:	add	r7, pc, r7
   13870:	str	ip, [sp, #60]	; 0x3c
   13874:	str	r7, [sp, #48]	; 0x30
   13878:	ldr	r7, [pc, #-1200]	; 133d0 <__assert_fail@plt+0x10b0>
   1387c:	stmia	ip!, {r0, r1, r2, r3}
   13880:	add	r7, pc, r7
   13884:	ldm	lr!, {r0, r1, r2, r3}
   13888:	str	r7, [sp, #72]	; 0x48
   1388c:	ldr	r7, [pc, #-1216]	; 133d4 <__assert_fail@plt+0x10b4>
   13890:	ldr	r4, [pc, #-1216]	; 133d8 <__assert_fail@plt+0x10b8>
   13894:	stmia	ip!, {r0, r1, r2, r3}
   13898:	add	r7, pc, r7
   1389c:	ldm	lr, {r0, r1}
   138a0:	add	r4, pc, r4
   138a4:	str	r7, [sp, #84]	; 0x54
   138a8:	ldr	r7, [pc, #-1236]	; 133dc <__assert_fail@plt+0x10bc>
   138ac:	stm	ip, {r0, r1}
   138b0:	add	r7, pc, r7
   138b4:	ldr	ip, [pc, #-1244]	; 133e0 <__assert_fail@plt+0x10c0>
   138b8:	str	r7, [sp, #40]	; 0x28
   138bc:	ldr	r7, [pc, #-1248]	; 133e4 <__assert_fail@plt+0x10c4>
   138c0:	add	ip, pc, ip
   138c4:	ldr	r4, [r4, #1356]	; 0x54c
   138c8:	add	r7, pc, r7
   138cc:	str	ip, [sp, #56]	; 0x38
   138d0:	str	r7, [sp, #120]	; 0x78
   138d4:	str	r6, [sp, #88]	; 0x58
   138d8:	str	r9, [sp, #68]	; 0x44
   138dc:	str	r8, [sp, #92]	; 0x5c
   138e0:	str	fp, [sp, #96]	; 0x60
   138e4:	str	sl, [sp, #100]	; 0x64
   138e8:	b	13b2c <__assert_fail@plt+0x180c>
   138ec:	ldrb	r7, [r4, #26]
   138f0:	cmp	r7, #0
   138f4:	bne	13914 <__assert_fail@plt+0x15f4>
   138f8:	ldrb	r3, [r4, #28]
   138fc:	cmp	r3, #0
   13900:	bne	13914 <__assert_fail@plt+0x15f4>
   13904:	ldrb	r3, [r4, #29]
   13908:	cmp	r3, #0
   1390c:	ldrbeq	r9, [r4, #30]
   13910:	beq	13918 <__assert_fail@plt+0x15f8>
   13914:	mov	r9, #1
   13918:	ldr	ip, [sp, #40]	; 0x28
   1391c:	ldrb	r8, [ip, #1352]	; 0x548
   13920:	cmp	r8, #0
   13924:	movne	r8, #0
   13928:	bne	13958 <__assert_fail@plt+0x1638>
   1392c:	mov	r0, r4
   13930:	bl	15ad0 <__assert_fail@plt+0x37b0>
   13934:	cmp	r0, #0
   13938:	moveq	r8, r0
   1393c:	beq	13958 <__assert_fail@plt+0x1638>
   13940:	ldr	r3, [r4, #4]
   13944:	cmp	r3, #0
   13948:	bne	13958 <__assert_fail@plt+0x1638>
   1394c:	ldr	r8, [r4, #12]
   13950:	rsbs	r8, r8, #1
   13954:	movcc	r8, #0
   13958:	cmp	r6, #0
   1395c:	movne	r3, #0
   13960:	bne	13970 <__assert_fail@plt+0x1650>
   13964:	ldr	r3, [r4, #12]
   13968:	adds	r3, r3, #0
   1396c:	movne	r3, #1
   13970:	ldr	ip, [sp, #24]
   13974:	cmp	ip, #0
   13978:	bne	13a38 <__assert_fail@plt+0x1718>
   1397c:	ldr	ip, [sp, #56]	; 0x38
   13980:	ldr	r2, [ip]
   13984:	cmp	r2, #0
   13988:	bne	139e8 <__assert_fail@plt+0x16c8>
   1398c:	cmp	r3, #0
   13990:	bne	139e8 <__assert_fail@plt+0x16c8>
   13994:	ldrb	r3, [r4, #24]
   13998:	cmp	r3, #0
   1399c:	bne	1453c <__assert_fail@plt+0x221c>
   139a0:	and	r3, r9, #1
   139a4:	eor	r3, r3, #1
   139a8:	bics	r3, r3, r8
   139ac:	bne	139bc <__assert_fail@plt+0x169c>
   139b0:	ldr	r3, [r4, #4]
   139b4:	cmp	r3, #0
   139b8:	beq	1453c <__assert_fail@plt+0x221c>
   139bc:	ldr	r1, [pc, #-1500]	; 133e8 <__assert_fail@plt+0x10c8>
   139c0:	mov	r2, #5
   139c4:	mov	r0, #0
   139c8:	add	r1, pc, r1
   139cc:	bl	11ec4 <dcgettext@plt>
   139d0:	mov	r3, r5
   139d4:	mov	r2, r0
   139d8:	mov	r0, #0
   139dc:	mov	r1, r0
   139e0:	bl	12020 <error@plt>
   139e4:	ldrb	r7, [r4, #26]
   139e8:	cmp	r7, #0
   139ec:	bne	13a08 <__assert_fail@plt+0x16e8>
   139f0:	ldrb	r3, [r4, #28]
   139f4:	cmp	r3, #0
   139f8:	bne	13a08 <__assert_fail@plt+0x16e8>
   139fc:	ldrb	r3, [r4, #29]
   13a00:	cmp	r3, #0
   13a04:	beq	13a38 <__assert_fail@plt+0x1718>
   13a08:	ldr	r3, [r4]
   13a0c:	ldr	r1, [r4, #8]
   13a10:	adds	r2, r3, #1
   13a14:	add	r1, r1, #1
   13a18:	addeq	r2, r3, #2
   13a1c:	rsbs	r3, r1, #1
   13a20:	movcc	r3, #0
   13a24:	cmp	r1, r2
   13a28:	movls	r2, r3
   13a2c:	orrhi	r2, r3, #1
   13a30:	cmp	r2, #0
   13a34:	bne	14558 <__assert_fail@plt+0x2238>
   13a38:	ldr	r3, [sp, #280]	; 0x118
   13a3c:	cmp	r3, #0
   13a40:	beq	13a54 <__assert_fail@plt+0x1734>
   13a44:	ldr	r2, [r4, #16]
   13a48:	cmp	r3, r2
   13a4c:	moveq	r3, #0
   13a50:	streq	r3, [sp, #280]	; 0x118
   13a54:	ldr	r3, [sp, #284]	; 0x11c
   13a58:	cmp	r3, #0
   13a5c:	beq	13a70 <__assert_fail@plt+0x1750>
   13a60:	ldr	r2, [r4, #20]
   13a64:	cmp	r3, r2
   13a68:	moveq	r3, #0
   13a6c:	streq	r3, [sp, #284]	; 0x11c
   13a70:	ldrb	r3, [r4, #24]
   13a74:	add	r5, r5, #1
   13a78:	ldrb	r2, [sp, #288]	; 0x120
   13a7c:	eor	r3, r3, #1
   13a80:	ldrb	r1, [sp, #289]	; 0x121
   13a84:	and	r3, r3, r2
   13a88:	strb	r3, [sp, #288]	; 0x120
   13a8c:	ldrb	r3, [r4, #25]
   13a90:	ldrb	r2, [sp, #294]	; 0x126
   13a94:	eor	r3, r3, #1
   13a98:	and	r3, r3, r1
   13a9c:	strb	r3, [sp, #289]	; 0x121
   13aa0:	ldrb	r3, [r4, #30]
   13aa4:	ldrb	r1, [sp, #290]	; 0x122
   13aa8:	eor	r3, r3, #1
   13aac:	and	r3, r3, r2
   13ab0:	strb	r3, [sp, #294]	; 0x126
   13ab4:	ldrb	r3, [r4, #26]
   13ab8:	ldrb	r2, [sp, #292]	; 0x124
   13abc:	eor	r3, r3, #1
   13ac0:	and	r3, r3, r1
   13ac4:	strb	r3, [sp, #290]	; 0x122
   13ac8:	ldrb	r3, [r4, #28]
   13acc:	ldrb	r1, [sp, #293]	; 0x125
   13ad0:	eor	r3, r3, #1
   13ad4:	and	r3, r3, r2
   13ad8:	strb	r3, [sp, #292]	; 0x124
   13adc:	ldrb	r3, [r4, #29]
   13ae0:	ldrb	r2, [sp, #291]	; 0x123
   13ae4:	eor	r3, r3, #1
   13ae8:	and	r3, r3, r1
   13aec:	strb	r3, [sp, #293]	; 0x125
   13af0:	ldrb	r3, [r4, #27]
   13af4:	ldrb	r1, [sp, #296]	; 0x128
   13af8:	eor	r3, r3, #1
   13afc:	and	r3, r3, r2
   13b00:	strb	r3, [sp, #291]	; 0x123
   13b04:	ldrb	r3, [r4, #32]
   13b08:	ldrb	r2, [sp, #295]	; 0x127
   13b0c:	eor	r3, r3, #1
   13b10:	and	r3, r3, r1
   13b14:	strb	r3, [sp, #296]	; 0x128
   13b18:	ldrb	r3, [r4, #31]
   13b1c:	eor	r3, r3, #1
   13b20:	and	r3, r3, r2
   13b24:	strb	r3, [sp, #295]	; 0x127
   13b28:	ldr	r4, [r4, #36]	; 0x24
   13b2c:	cmp	r4, #0
   13b30:	beq	13cd4 <__assert_fail@plt+0x19b4>
   13b34:	ldrb	r3, [r4, #33]	; 0x21
   13b38:	cmp	r3, #0
   13b3c:	beq	13c90 <__assert_fail@plt+0x1970>
   13b40:	ldr	r9, [r4]
   13b44:	add	ip, sp, #512	; 0x200
   13b48:	mov	r1, #0
   13b4c:	add	r6, sp, #656	; 0x290
   13b50:	cmn	r9, #1
   13b54:	mov	r3, #43	; 0x2b
   13b58:	mov	r2, r6
   13b5c:	strh	r3, [ip, #168]	; 0xa8
   13b60:	moveq	r9, r1
   13b64:	ldr	sl, [r4, #8]
   13b68:	mov	r0, r9
   13b6c:	add	r8, sp, #680	; 0x2a8
   13b70:	bl	1f050 <__assert_fail@plt+0xcd30>
   13b74:	mov	r2, #25
   13b78:	add	r7, sp, #708	; 0x2c4
   13b7c:	mov	r1, r0
   13b80:	add	r0, r8, #1
   13b84:	bl	11fc0 <__stpcpy_chk@plt>
   13b88:	mov	r2, r6
   13b8c:	mov	r1, #0
   13b90:	movw	ip, #27437	; 0x6b2d
   13b94:	movt	ip, #32
   13b98:	str	ip, [sp, #708]	; 0x2c4
   13b9c:	mov	fp, r0
   13ba0:	add	r0, r9, #1
   13ba4:	bl	1f050 <__assert_fail@plt+0xcd30>
   13ba8:	mov	r2, #24
   13bac:	mov	r1, r0
   13bb0:	add	r0, r7, #3
   13bb4:	bl	11fc0 <__stpcpy_chk@plt>
   13bb8:	ldr	r2, [r4, #8]
   13bbc:	cmn	r2, #1
   13bc0:	mov	r9, r0
   13bc4:	beq	13c44 <__assert_fail@plt+0x1924>
   13bc8:	ldr	lr, [sp, #48]	; 0x30
   13bcc:	ldr	ip, [sp, #48]	; 0x30
   13bd0:	ldrb	r2, [lr, #2]
   13bd4:	ldrh	r1, [ip]
   13bd8:	add	ip, sl, #1
   13bdc:	mov	sl, fp
   13be0:	mov	r0, ip
   13be4:	strh	r1, [fp]
   13be8:	mov	r1, #0
   13bec:	strb	r2, [sl, #2]!
   13bf0:	mov	r2, r6
   13bf4:	str	ip, [sp, #16]
   13bf8:	bl	1f050 <__assert_fail@plt+0xcd30>
   13bfc:	mov	r1, r0
   13c00:	mov	r0, sl
   13c04:	bl	11fe4 <strcpy@plt>
   13c08:	ldr	r0, [sp, #72]	; 0x48
   13c0c:	mov	r1, #0
   13c10:	mov	r2, r6
   13c14:	ldrh	r3, [r0]
   13c18:	strh	r3, [r9], #1
   13c1c:	ldr	r0, [r4, #12]
   13c20:	ldr	ip, [sp, #16]
   13c24:	cmn	r0, #1
   13c28:	movne	r0, #0
   13c2c:	moveq	r0, #1
   13c30:	add	r0, r0, ip
   13c34:	bl	1f050 <__assert_fail@plt+0xcd30>
   13c38:	mov	r1, r0
   13c3c:	mov	r0, r9
   13c40:	bl	11fe4 <strcpy@plt>
   13c44:	ldr	r1, [pc, #-2144]	; 133ec <__assert_fail@plt+0x10cc>
   13c48:	mov	r2, #5
   13c4c:	mov	r0, #0
   13c50:	add	r1, pc, r1
   13c54:	bl	11ec4 <dcgettext@plt>
   13c58:	mov	r1, r8
   13c5c:	mov	r9, r0
   13c60:	mov	r0, #0
   13c64:	bl	20e78 <__assert_fail@plt+0xeb58>
   13c68:	mov	r1, r7
   13c6c:	mov	r6, r0
   13c70:	mov	r0, #1
   13c74:	bl	20e78 <__assert_fail@plt+0xeb58>
   13c78:	mov	r2, r9
   13c7c:	mov	r3, r6
   13c80:	str	r0, [sp]
   13c84:	mov	r0, #0
   13c88:	mov	r1, r0
   13c8c:	bl	12020 <error@plt>
   13c90:	ldr	r3, [r4]
   13c94:	ldr	r6, [r4, #8]
   13c98:	cmn	r3, #1
   13c9c:	beq	138ec <__assert_fail@plt+0x15cc>
   13ca0:	cmp	r3, r6
   13ca4:	bls	138ec <__assert_fail@plt+0x15cc>
   13ca8:	ldr	r1, [sp, #84]	; 0x54
   13cac:	mov	r2, #5
   13cb0:	mov	r0, #0
   13cb4:	bl	11ec4 <dcgettext@plt>
   13cb8:	mov	r3, r5
   13cbc:	mov	r2, r0
   13cc0:	mov	r0, #0
   13cc4:	mov	r1, r0
   13cc8:	bl	12020 <error@plt>
   13ccc:	ldr	r6, [r4, #8]
   13cd0:	b	138ec <__assert_fail@plt+0x15cc>
   13cd4:	ldr	r0, [sp, #60]	; 0x3c
   13cd8:	bl	15ad0 <__assert_fail@plt+0x37b0>
   13cdc:	ldr	r6, [sp, #88]	; 0x58
   13ce0:	ldr	r9, [sp, #68]	; 0x44
   13ce4:	ldr	r8, [sp, #92]	; 0x5c
   13ce8:	ldr	fp, [sp, #96]	; 0x60
   13cec:	ldr	sl, [sp, #100]	; 0x64
   13cf0:	ldrb	r5, [sp, #295]	; 0x127
   13cf4:	cmp	r0, #0
   13cf8:	beq	13d38 <__assert_fail@plt+0x1a18>
   13cfc:	cmp	r5, #0
   13d00:	beq	13e0c <__assert_fail@plt+0x1aec>
   13d04:	ldr	r3, [pc, #-2332]	; 133f0 <__assert_fail@plt+0x10d0>
   13d08:	add	r3, pc, r3
   13d0c:	ldrb	r2, [r3, #1389]	; 0x56d
   13d10:	cmp	r2, #0
   13d14:	bne	13d24 <__assert_fail@plt+0x1a04>
   13d18:	ldrb	r3, [r3, #1388]	; 0x56c
   13d1c:	cmp	r3, #0
   13d20:	beq	13dc8 <__assert_fail@plt+0x1aa8>
   13d24:	ldr	r3, [pc, #-2360]	; 133f4 <__assert_fail@plt+0x10d4>
   13d28:	add	r3, pc, r3
   13d2c:	ldr	r3, [r3, #1356]	; 0x54c
   13d30:	cmp	r3, #0
   13d34:	beq	13db4 <__assert_fail@plt+0x1a94>
   13d38:	ldr	r3, [pc, #-2376]	; 133f8 <__assert_fail@plt+0x10d8>
   13d3c:	add	r3, pc, r3
   13d40:	ldrb	r2, [r3, #1389]	; 0x56d
   13d44:	cmp	r2, #0
   13d48:	bne	13d58 <__assert_fail@plt+0x1a38>
   13d4c:	ldrb	r3, [r3, #1388]	; 0x56c
   13d50:	cmp	r3, #0
   13d54:	strbeq	r3, [sp, #295]	; 0x127
   13d58:	add	r4, sp, #708	; 0x2c4
   13d5c:	ldr	r0, [sp, #60]	; 0x3c
   13d60:	mov	r1, r4
   13d64:	bl	15b58 <__assert_fail@plt+0x3838>
   13d68:	mov	r0, r4
   13d6c:	bl	120e0 <strlen@plt>
   13d70:	mov	r2, #5
   13d74:	ldr	r1, [pc, #-2432]	; 133fc <__assert_fail@plt+0x10dc>
   13d78:	str	r2, [sp]
   13d7c:	ldr	r2, [pc, #-2436]	; 13400 <__assert_fail@plt+0x10e0>
   13d80:	add	r1, pc, r1
   13d84:	add	r2, pc, r2
   13d88:	mov	r3, r0
   13d8c:	mov	r0, #0
   13d90:	bl	12314 <dcngettext@plt>
   13d94:	mov	r3, r4
   13d98:	mov	r2, r0
   13d9c:	mov	r0, #0
   13da0:	mov	r1, r0
   13da4:	bl	12020 <error@plt>
   13da8:	cmp	r5, #0
   13dac:	strb	r5, [sp, #295]	; 0x127
   13db0:	beq	13e0c <__assert_fail@plt+0x1aec>
   13db4:	ldr	r3, [pc, #-2488]	; 13404 <__assert_fail@plt+0x10e4>
   13db8:	add	r3, pc, r3
   13dbc:	ldrb	r3, [r3, #1389]	; 0x56d
   13dc0:	cmp	r3, #0
   13dc4:	bne	13e0c <__assert_fail@plt+0x1aec>
   13dc8:	ldr	r3, [pc, #-2504]	; 13408 <__assert_fail@plt+0x10e8>
   13dcc:	add	r3, pc, r3
   13dd0:	ldrb	r4, [r3, #1388]	; 0x56c
   13dd4:	cmp	r4, #0
   13dd8:	bne	13e0c <__assert_fail@plt+0x1aec>
   13ddc:	ldr	r3, [r3, #1356]	; 0x54c
   13de0:	cmp	r3, #0
   13de4:	beq	13e0c <__assert_fail@plt+0x1aec>
   13de8:	ldr	r1, [pc, #-2532]	; 1340c <__assert_fail@plt+0x10ec>
   13dec:	mov	r2, #5
   13df0:	mov	r0, r4
   13df4:	add	r1, pc, r1
   13df8:	bl	11ec4 <dcgettext@plt>
   13dfc:	mov	r1, r4
   13e00:	mov	r2, r0
   13e04:	mov	r0, r4
   13e08:	bl	12020 <error@plt>
   13e0c:	ldr	r5, [pc, #-2564]	; 13410 <__assert_fail@plt+0x10f0>
   13e10:	cmp	r6, #0
   13e14:	ldrb	r3, [sp, #255]	; 0xff
   13e18:	add	r5, pc, r5
   13e1c:	strb	r3, [r5, #1412]	; 0x584
   13e20:	bne	1410c <__assert_fail@plt+0x1dec>
   13e24:	ldr	r3, [pc, #-2584]	; 13414 <__assert_fail@plt+0x10f4>
   13e28:	add	r3, pc, r3
   13e2c:	ldr	r3, [r3, #1360]	; 0x550
   13e30:	cmp	r3, #0
   13e34:	beq	14520 <__assert_fail@plt+0x2200>
   13e38:	cmp	r9, #0
   13e3c:	beq	144f8 <__assert_fail@plt+0x21d8>
   13e40:	ldr	r3, [pc, #-2608]	; 13418 <__assert_fail@plt+0x10f8>
   13e44:	add	r3, pc, r3
   13e48:	ldr	r2, [r3, #1436]	; 0x59c
   13e4c:	cmp	r2, #0
   13e50:	beq	13e74 <__assert_fail@plt+0x1b54>
   13e54:	ldr	r1, [pc, #-2624]	; 1341c <__assert_fail@plt+0x10fc>
   13e58:	mov	r0, #18
   13e5c:	add	r1, pc, r1
   13e60:	ldr	r1, [r1, #4]
   13e64:	mul	r1, r0, r1
   13e68:	cmp	r1, r2
   13e6c:	strcs	r1, [r3, #1436]	; 0x59c
   13e70:	strcc	r2, [r3, #1436]	; 0x59c
   13e74:	ldr	r7, [sp, #36]	; 0x24
   13e78:	cmp	r7, #0
   13e7c:	beq	14164 <__assert_fail@plt+0x1e44>
   13e80:	cmp	r9, #1
   13e84:	bls	13ec4 <__assert_fail@plt+0x1ba4>
   13e88:	ldr	r1, [pc, #-2672]	; 13420 <__assert_fail@plt+0x1100>
   13e8c:	mov	r2, #5
   13e90:	mov	r0, #0
   13e94:	add	r1, pc, r1
   13e98:	bl	11ec4 <dcgettext@plt>
   13e9c:	mov	r4, r0
   13ea0:	ldr	r0, [r8, #4]
   13ea4:	bl	20e80 <__assert_fail@plt+0xeb60>
   13ea8:	ldr	ip, [sp, #36]	; 0x24
   13eac:	mov	r2, r4
   13eb0:	mov	r1, #0
   13eb4:	str	ip, [sp]
   13eb8:	mov	r3, r0
   13ebc:	mov	r0, #2
   13ec0:	bl	12020 <error@plt>
   13ec4:	ldr	r7, [sp, #44]	; 0x2c
   13ec8:	cmp	r7, #0
   13ecc:	beq	14bf0 <__assert_fail@plt+0x28d0>
   13ed0:	ldr	r0, [pc, #-2740]	; 13424 <__assert_fail@plt+0x1104>
   13ed4:	ldr	ip, [sp, #36]	; 0x24
   13ed8:	add	r0, pc, r0
   13edc:	strb	ip, [r0, #24]!
   13ee0:	bl	168a8 <__assert_fail@plt+0x4588>
   13ee4:	ldrb	r3, [ip, #1]
   13ee8:	cmp	r3, #0
   13eec:	bne	12c64 <__assert_fail@plt+0x944>
   13ef0:	ldr	r3, [pc, #-2768]	; 13428 <__assert_fail@plt+0x1108>
   13ef4:	ldr	r3, [fp, r3]
   13ef8:	ldr	r4, [r3]
   13efc:	b	12c7c <__assert_fail@plt+0x95c>
   13f00:	ldr	r1, [pc, #-2780]	; 1342c <__assert_fail@plt+0x110c>
   13f04:	mov	r2, #5
   13f08:	mov	r0, r9
   13f0c:	add	r1, pc, r1
   13f10:	bl	11ec4 <dcgettext@plt>
   13f14:	mov	r4, r0
   13f18:	ldr	r0, [sp, #48]	; 0x30
   13f1c:	bl	20e80 <__assert_fail@plt+0xeb60>
   13f20:	mov	r2, r4
   13f24:	mov	r1, r9
   13f28:	mov	r3, r0
   13f2c:	mov	r0, #2
   13f30:	bl	12020 <error@plt>
   13f34:	b	13688 <__assert_fail@plt+0x1368>
   13f38:	cmp	ip, #1
   13f3c:	bne	15254 <__assert_fail@plt+0x2f34>
   13f40:	ldr	r1, [pc, #-2840]	; 13430 <__assert_fail@plt+0x1110>
   13f44:	mov	r2, #5
   13f48:	mov	r0, #0
   13f4c:	add	r1, pc, r1
   13f50:	bl	11ec4 <dcgettext@plt>
   13f54:	ldr	r3, [pc, #-2856]	; 13434 <__assert_fail@plt+0x1114>
   13f58:	ldr	ip, [sp, #68]	; 0x44
   13f5c:	add	r3, pc, r3
   13f60:	mov	r2, r0
   13f64:	mov	r0, r4
   13f68:	str	r2, [sp, #20]
   13f6c:	ldr	r4, [r3, ip, lsl #4]
   13f70:	bl	20e80 <__assert_fail@plt+0xeb60>
   13f74:	ldr	r2, [sp, #20]
   13f78:	mov	r3, r4
   13f7c:	str	r0, [sp]
   13f80:	mov	r0, #0
   13f84:	mov	r1, r0
   13f88:	bl	12020 <error@plt>
   13f8c:	ldr	r1, [pc, #-2908]	; 13438 <__assert_fail@plt+0x1118>
   13f90:	mov	r2, #5
   13f94:	mov	r0, #0
   13f98:	add	r1, pc, r1
   13f9c:	bl	11ec4 <dcgettext@plt>
   13fa0:	add	r1, sp, #708	; 0x2c4
   13fa4:	mov	r2, r0
   13fa8:	ldr	r0, [sp, #92]	; 0x5c
   13fac:	str	r2, [sp, #20]
   13fb0:	bl	1f008 <__assert_fail@plt+0xcce8>
   13fb4:	mov	r3, r4
   13fb8:	ldr	r2, [sp, #20]
   13fbc:	mov	r1, #0
   13fc0:	str	r0, [sp]
   13fc4:	mov	r0, #2
   13fc8:	bl	12020 <error@plt>
   13fcc:	b	12784 <__assert_fail@plt+0x464>
   13fd0:	ldr	r3, [sp, #188]	; 0xbc
   13fd4:	cmp	r3, #0
   13fd8:	mvneq	r3, #0
   13fdc:	streq	r3, [sp, #184]	; 0xb8
   13fe0:	b	134d0 <__assert_fail@plt+0x11b0>
   13fe4:	cmp	r0, #2
   13fe8:	bne	14000 <__assert_fail@plt+0x1ce0>
   13fec:	ldr	r3, [sp, #264]	; 0x108
   13ff0:	ldrb	r2, [r3, #-1]
   13ff4:	sub	r2, r2, #48	; 0x30
   13ff8:	cmp	r2, #9
   13ffc:	bls	14e34 <__assert_fail@plt+0x2b14>
   14000:	ldr	r3, [pc, #-3020]	; 1343c <__assert_fail@plt+0x111c>
   14004:	mov	r2, #83	; 0x53
   14008:	str	r4, [sp]
   1400c:	ldr	r1, [sp, #92]	; 0x5c
   14010:	add	r3, pc, r3
   14014:	bl	230a8 <__assert_fail@plt+0x10d88>
   14018:	ldr	r0, [pc, #-3040]	; 13440 <__assert_fail@plt+0x1120>
   1401c:	cmp	r2, #0
   14020:	add	r0, pc, r0
   14024:	moveq	ip, #111	; 0x6f
   14028:	strb	ip, [r0, #12]!
   1402c:	bl	168a8 <__assert_fail@plt+0x4588>
   14030:	ldr	r3, [r4]
   14034:	ldrb	r2, [r3, #1]
   14038:	cmp	r2, #0
   1403c:	moveq	ip, #1
   14040:	beq	130fc <__assert_fail@plt+0xddc>
   14044:	ldrb	r1, [r3]
   14048:	cmp	r1, #92	; 0x5c
   1404c:	beq	14ed0 <__assert_fail@plt+0x2bb0>
   14050:	ldr	r1, [pc, #-3092]	; 13444 <__assert_fail@plt+0x1124>
   14054:	mov	r2, #5
   14058:	mov	r0, #0
   1405c:	mov	ip, #1
   14060:	add	r1, pc, r1
   14064:	str	ip, [sp, #16]
   14068:	bl	11ec4 <dcgettext@plt>
   1406c:	mov	r2, r0
   14070:	ldr	r0, [r4]
   14074:	str	r2, [sp, #20]
   14078:	bl	20e80 <__assert_fail@plt+0xeb60>
   1407c:	ldr	r2, [sp, #20]
   14080:	mov	r1, #0
   14084:	mov	r3, r0
   14088:	mov	r0, #2
   1408c:	bl	12020 <error@plt>
   14090:	ldr	ip, [sp, #16]
   14094:	b	130fc <__assert_fail@plt+0xddc>
   14098:	ldr	r1, [pc, #-3160]	; 13448 <__assert_fail@plt+0x1128>
   1409c:	mov	r2, #5
   140a0:	add	r1, pc, r1
   140a4:	bl	11ec4 <dcgettext@plt>
   140a8:	mov	r1, r4
   140ac:	mov	r2, r0
   140b0:	mov	r0, #2
   140b4:	bl	12020 <error@plt>
   140b8:	ldr	r4, [sp, #512]	; 0x200
   140bc:	b	13004 <__assert_fail@plt+0xce4>
   140c0:	bl	1211c <__errno_location@plt>
   140c4:	ldr	r1, [pc, #-3200]	; 1344c <__assert_fail@plt+0x112c>
   140c8:	mov	r2, #5
   140cc:	add	r1, pc, r1
   140d0:	ldr	r5, [r0]
   140d4:	mov	r0, r4
   140d8:	bl	11ec4 <dcgettext@plt>
   140dc:	mov	r6, r0
   140e0:	ldr	r0, [sp, #48]	; 0x30
   140e4:	bl	20e80 <__assert_fail@plt+0xeb60>
   140e8:	mov	r1, r5
   140ec:	mov	r2, r6
   140f0:	mov	r3, r0
   140f4:	mov	r0, #2
   140f8:	bl	12020 <error@plt>
   140fc:	b	12c7c <__assert_fail@plt+0x95c>
   14100:	mvn	ip, #0
   14104:	str	ip, [sp, #76]	; 0x4c
   14108:	b	12784 <__assert_fail@plt+0x464>
   1410c:	ldr	r0, [sp, #64]	; 0x40
   14110:	mov	r1, #16
   14114:	bl	20f10 <__assert_fail@plt+0xebf0>
   14118:	subs	r6, r0, #0
   1411c:	beq	1523c <__assert_fail@plt+0x2f1c>
   14120:	add	r4, sp, #708	; 0x2c4
   14124:	mov	r2, #16
   14128:	mov	r1, r4
   1412c:	bl	211a0 <__assert_fail@plt+0xee80>
   14130:	mov	r0, r6
   14134:	bl	212f0 <__assert_fail@plt+0xefd0>
   14138:	cmp	r0, #0
   1413c:	bne	15220 <__assert_fail@plt+0x2f00>
   14140:	add	r5, r5, #1184	; 0x4a0
   14144:	add	r5, r5, #12
   14148:	mov	r0, r5
   1414c:	bl	1c710 <__assert_fail@plt+0xa3f0>
   14150:	mov	r0, r4
   14154:	mov	r2, r5
   14158:	mov	r1, #16
   1415c:	bl	1d344 <__assert_fail@plt+0xb024>
   14160:	b	13e24 <__assert_fail@plt+0x1b04>
   14164:	ldr	r6, [sp, #36]	; 0x24
   14168:	mov	r4, r8
   1416c:	mov	r5, r4
   14170:	ldr	r0, [r4], #4
   14174:	ldrb	r3, [r0]
   14178:	cmp	r3, #45	; 0x2d
   1417c:	beq	144d4 <__assert_fail@plt+0x21b4>
   14180:	mov	r1, #4
   14184:	bl	1229c <euidaccess@plt>
   14188:	cmp	r0, #0
   1418c:	bne	151c8 <__assert_fail@plt+0x2ea8>
   14190:	add	r6, r6, #1
   14194:	cmp	r6, r9
   14198:	bne	1416c <__assert_fail@plt+0x1e4c>
   1419c:	ldr	r7, [sp, #44]	; 0x2c
   141a0:	cmp	r7, #0
   141a4:	beq	141d0 <__assert_fail@plt+0x1eb0>
   141a8:	ldr	r0, [sp, #44]	; 0x2c
   141ac:	mov	r1, #65	; 0x41
   141b0:	movw	r2, #438	; 0x1b6
   141b4:	bl	1202c <open64@plt>
   141b8:	subs	r3, r0, #0
   141bc:	blt	151e4 <__assert_fail@plt+0x2ec4>
   141c0:	cmp	r3, #1
   141c4:	beq	141d0 <__assert_fail@plt+0x1eb0>
   141c8:	mov	r1, #1
   141cc:	bl	1a41c <__assert_fail@plt+0x80fc>
   141d0:	ldr	r7, [sp, #80]	; 0x50
   141d4:	cmp	r7, #0
   141d8:	bne	14e58 <__assert_fail@plt+0x2b38>
   141dc:	ldr	ip, [sp, #76]	; 0x4c
   141e0:	cmp	ip, #0
   141e4:	beq	14eb8 <__assert_fail@plt+0x2b98>
   141e8:	ldr	r7, [sp, #76]	; 0x4c
   141ec:	movw	r3, #7281	; 0x1c71
   141f0:	ldr	ip, [pc, #-3496]	; 13450 <__assert_fail@plt+0x1130>
   141f4:	movt	r3, #455	; 0x1c7
   141f8:	cmp	r7, r3
   141fc:	movcs	r7, r3
   14200:	vmov.f64	d10, #64	; 0x3e000000  0.125
   14204:	str	r7, [sp, #36]	; 0x24
   14208:	add	ip, pc, ip
   1420c:	str	ip, [sp, #128]	; 0x80
   14210:	mov	r2, #144	; 0x90
   14214:	ldr	ip, [sp, #36]	; 0x24
   14218:	mov	r3, #0
   1421c:	ldr	r7, [pc, #-3536]	; 13454 <__assert_fail@plt+0x1134>
   14220:	mov	r6, r3
   14224:	str	r8, [sp, #100]	; 0x64
   14228:	mul	r2, r2, ip
   1422c:	add	r7, pc, r7
   14230:	str	r3, [sp, #168]	; 0xa8
   14234:	str	r7, [sp, #132]	; 0x84
   14238:	lsl	r7, ip, #1
   1423c:	vmov.f64	d9, #104	; 0x3f400000  0.750
   14240:	str	r7, [sp, #76]	; 0x4c
   14244:	str	r9, [sp, #60]	; 0x3c
   14248:	str	r2, [sp, #72]	; 0x48
   1424c:	str	fp, [sp, #124]	; 0x7c
   14250:	str	sl, [sp, #84]	; 0x54
   14254:	ldr	ip, [sp, #100]	; 0x64
   14258:	ldr	r1, [pc, #-3592]	; 13458 <__assert_fail@plt+0x1138>
   1425c:	str	ip, [sp, #40]	; 0x28
   14260:	add	r1, pc, r1
   14264:	ldr	r7, [ip], #4
   14268:	mov	r0, r7
   1426c:	str	r7, [sp, #56]	; 0x38
   14270:	str	ip, [sp, #100]	; 0x64
   14274:	bl	1a354 <__assert_fail@plt+0x8034>
   14278:	ldr	r7, [sp, #36]	; 0x24
   1427c:	cmp	r7, #1
   14280:	str	r0, [sp, #48]	; 0x30
   14284:	bls	14ba8 <__assert_fail@plt+0x2888>
   14288:	mov	r2, #1
   1428c:	mov	r1, r7
   14290:	mov	r3, r2
   14294:	lsl	r3, r3, #1
   14298:	add	r2, r2, #1
   1429c:	cmp	r1, r3
   142a0:	bhi	14294 <__assert_fail@plt+0x1f74>
   142a4:	lsl	r2, r2, #4
   142a8:	str	r2, [sp, #88]	; 0x58
   142ac:	ldr	r7, [sp, #168]	; 0xa8
   142b0:	cmp	r7, #0
   142b4:	beq	148d8 <__assert_fail@plt+0x25b8>
   142b8:	add	r7, sp, #156	; 0x9c
   142bc:	str	r7, [sp, #64]	; 0x40
   142c0:	ldr	ip, [sp, #60]	; 0x3c
   142c4:	mov	r3, #0
   142c8:	ldr	r7, [pc, #-3700]	; 1345c <__assert_fail@plt+0x113c>
   142cc:	sub	ip, ip, #1
   142d0:	str	ip, [sp, #60]	; 0x3c
   142d4:	add	r7, pc, r7
   142d8:	ldr	ip, [sp, #88]	; 0x58
   142dc:	str	r7, [sp, #68]	; 0x44
   142e0:	ldr	r7, [pc, #-3720]	; 13460 <__assert_fail@plt+0x1140>
   142e4:	add	ip, ip, #1
   142e8:	str	ip, [sp, #92]	; 0x5c
   142ec:	add	r7, pc, r7
   142f0:	ldr	ip, [pc, #-3732]	; 13464 <__assert_fail@plt+0x1144>
   142f4:	str	r7, [sp, #96]	; 0x60
   142f8:	ldr	r7, [pc, #-3736]	; 13468 <__assert_fail@plt+0x1148>
   142fc:	add	ip, pc, ip
   14300:	strb	r3, [sp, #180]	; 0xb4
   14304:	add	r7, pc, r7
   14308:	str	ip, [sp, #120]	; 0x78
   1430c:	str	r7, [sp, #80]	; 0x50
   14310:	b	14498 <__assert_fail@plt+0x2178>
   14314:	ldr	ip, [sp, #60]	; 0x3c
   14318:	cmp	ip, #0
   1431c:	beq	14344 <__assert_fail@plt+0x2024>
   14320:	ldr	r3, [sp, #160]	; 0xa0
   14324:	ldr	r2, [sp, #168]	; 0xa8
   14328:	ldr	r1, [sp, #164]	; 0xa4
   1432c:	ldr	r7, [sp, #88]	; 0x58
   14330:	rsb	r2, r3, r2
   14334:	ldr	ip, [sp, #92]	; 0x5c
   14338:	mls	r2, r1, r7, r2
   1433c:	cmp	ip, r2
   14340:	bcc	14dac <__assert_fail@plt+0x2a8c>
   14344:	ldr	r7, [sp, #60]	; 0x3c
   14348:	mov	r2, #0
   1434c:	ldr	ip, [sp, #96]	; 0x60
   14350:	orrs	r7, r6, r7
   14354:	ldr	r3, [sp, #168]	; 0xa8
   14358:	ldr	r7, [sp, #156]	; 0x9c
   1435c:	str	r2, [ip, #1416]	; 0x588
   14360:	add	r7, r7, r3
   14364:	bne	14374 <__assert_fail@plt+0x2054>
   14368:	ldr	r4, [sp, #172]	; 0xac
   1436c:	cmp	r4, #0
   14370:	beq	147f8 <__assert_fail@plt+0x24d8>
   14374:	add	r0, sp, #264	; 0x108
   14378:	mov	r1, #0
   1437c:	bl	1a434 <__assert_fail@plt+0x8114>
   14380:	add	r6, r6, #1
   14384:	mov	ip, #0
   14388:	str	ip, [sp, #24]
   1438c:	add	r5, r0, #9
   14390:	ldr	r3, [sp, #164]	; 0xa4
   14394:	cmp	r3, #1
   14398:	bls	144e4 <__assert_fail@plt+0x21c4>
   1439c:	ldr	r1, [sp, #76]	; 0x4c
   143a0:	add	sl, sp, #400	; 0x190
   143a4:	ldr	r0, [sp, #80]	; 0x50
   143a8:	bl	1ed30 <__assert_fail@plt+0xca10>
   143ac:	mov	r1, #0
   143b0:	mov	fp, r1
   143b4:	str	r0, [sp, #368]	; 0x170
   143b8:	add	r0, sp, #372	; 0x174
   143bc:	bl	11e4c <pthread_mutex_init@plt>
   143c0:	mov	r1, fp
   143c4:	mov	r0, sl
   143c8:	bl	11edc <pthread_cond_init@plt>
   143cc:	ldr	r0, [sp, #72]	; 0x48
   143d0:	ldr	r9, [sp, #164]	; 0xa4
   143d4:	bl	226ec <__assert_fail@plt+0x103cc>
   143d8:	mov	r1, fp
   143dc:	mov	r4, r0
   143e0:	add	r8, r0, #72	; 0x48
   143e4:	str	r9, [r4, #24]
   143e8:	add	r0, r0, #48	; 0x30
   143ec:	str	r9, [r4, #20]
   143f0:	str	fp, [r4, #12]
   143f4:	str	fp, [r4, #8]
   143f8:	str	fp, [r4, #4]
   143fc:	str	fp, [r4]
   14400:	str	fp, [r4, #16]
   14404:	str	fp, [r4, #28]
   14408:	str	fp, [r4, #40]	; 0x28
   1440c:	strb	fp, [r4, #44]	; 0x2c
   14410:	bl	11e4c <pthread_mutex_init@plt>
   14414:	mov	r1, r8
   14418:	mov	r2, r7
   1441c:	ldr	r3, [sp, #36]	; 0x24
   14420:	str	r9, [sp]
   14424:	mov	r0, r4
   14428:	str	fp, [sp, #4]
   1442c:	bl	17674 <__assert_fail@plt+0x5354>
   14430:	ldr	ip, [sp, #84]	; 0x54
   14434:	ldr	r2, [sp, #264]	; 0x108
   14438:	mov	r3, r8
   1443c:	ldr	r1, [sp, #36]	; 0x24
   14440:	mov	r0, r7
   14444:	str	ip, [sp]
   14448:	str	r2, [sp, #4]
   1444c:	str	r5, [sp, #8]
   14450:	ldr	r2, [sp, #164]	; 0xa4
   14454:	bl	1a618 <__assert_fail@plt+0x82f8>
   14458:	ldr	r0, [sp, #368]	; 0x170
   1445c:	bl	1eda4 <__assert_fail@plt+0xca84>
   14460:	mov	r0, sl
   14464:	bl	11f60 <pthread_cond_destroy@plt>
   14468:	add	r0, sp, #372	; 0x174
   1446c:	bl	11d98 <pthread_mutex_destroy@plt>
   14470:	add	r0, r4, #120	; 0x78
   14474:	bl	11d98 <pthread_mutex_destroy@plt>
   14478:	mov	r0, r4
   1447c:	bl	11dec <free@plt>
   14480:	mov	r1, r5
   14484:	ldr	r0, [sp, #264]	; 0x108
   14488:	bl	1a384 <__assert_fail@plt+0x8064>
   1448c:	ldr	r7, [sp, #24]
   14490:	cmp	r7, #0
   14494:	bne	14828 <__assert_fail@plt+0x2508>
   14498:	ldr	r0, [sp, #64]	; 0x40
   1449c:	ldr	r1, [sp, #48]	; 0x30
   144a0:	ldr	r2, [sp, #56]	; 0x38
   144a4:	bl	18684 <__assert_fail@plt+0x6364>
   144a8:	cmp	r0, #0
   144ac:	beq	14720 <__assert_fail@plt+0x2400>
   144b0:	ldrb	r3, [sp, #180]	; 0xb4
   144b4:	cmp	r3, #0
   144b8:	bne	14314 <__assert_fail@plt+0x1ff4>
   144bc:	ldr	ip, [sp, #68]	; 0x44
   144c0:	ldr	r7, [sp, #156]	; 0x9c
   144c4:	ldr	r2, [sp, #168]	; 0xa8
   144c8:	str	r3, [ip, #1416]	; 0x588
   144cc:	add	r7, r7, r2
   144d0:	b	14374 <__assert_fail@plt+0x2054>
   144d4:	ldrb	r3, [r0, #1]
   144d8:	cmp	r3, #0
   144dc:	beq	14190 <__assert_fail@plt+0x1e70>
   144e0:	b	14180 <__assert_fail@plt+0x1e60>
   144e4:	sub	r0, r7, #16
   144e8:	ldr	r1, [sp, #264]	; 0x108
   144ec:	mov	r2, r5
   144f0:	bl	17aa0 <__assert_fail@plt+0x5780>
   144f4:	b	14480 <__assert_fail@plt+0x2160>
   144f8:	mov	r0, r8
   144fc:	mov	r9, #1
   14500:	bl	11dec <free@plt>
   14504:	mov	r0, #4
   14508:	bl	226ec <__assert_fail@plt+0x103cc>
   1450c:	ldr	r3, [pc, #3516]	; 152d0 <__assert_fail@plt+0x2fb0>
   14510:	add	r3, pc, r3
   14514:	mov	r8, r0
   14518:	str	r3, [r0]
   1451c:	b	13e40 <__assert_fail@plt+0x1b20>
   14520:	ldr	r0, [pc, #3500]	; 152d4 <__assert_fail@plt+0x2fb4>
   14524:	add	r0, pc, r0
   14528:	bl	12044 <getenv@plt>
   1452c:	cmp	r0, #0
   14530:	beq	14ef0 <__assert_fail@plt+0x2bd0>
   14534:	bl	16938 <__assert_fail@plt+0x4618>
   14538:	b	13e38 <__assert_fail@plt+0x1b18>
   1453c:	ldrb	r3, [r4, #25]
   14540:	cmp	r3, #0
   14544:	bne	139e8 <__assert_fail@plt+0x16c8>
   14548:	ldr	r3, [r4, #12]
   1454c:	cmp	r3, #0
   14550:	beq	139e8 <__assert_fail@plt+0x16c8>
   14554:	b	139bc <__assert_fail@plt+0x169c>
   14558:	ldr	r1, [sp, #120]	; 0x78
   1455c:	mov	r2, #5
   14560:	mov	r0, #0
   14564:	bl	11ec4 <dcgettext@plt>
   14568:	mov	r3, r5
   1456c:	mov	r2, r0
   14570:	mov	r0, #0
   14574:	mov	r1, r0
   14578:	bl	12020 <error@plt>
   1457c:	b	13a38 <__assert_fail@plt+0x1718>
   14580:	ldr	r1, [pc, #3408]	; 152d8 <__assert_fail@plt+0x2fb8>
   14584:	mov	r0, r3
   14588:	mov	r2, #5
   1458c:	str	r3, [sp, #20]
   14590:	add	r1, pc, r1
   14594:	bl	11ec4 <dcgettext@plt>
   14598:	ldr	r3, [sp, #20]
   1459c:	mov	r1, r3
   145a0:	mov	r2, r0
   145a4:	mov	r0, #2
   145a8:	bl	12020 <error@plt>
   145ac:	b	130ac <__assert_fail@plt+0xd8c>
   145b0:	ldr	r3, [pc, #3364]	; 152dc <__assert_fail@plt+0x2fbc>
   145b4:	ldr	r3, [fp, r3]
   145b8:	ldr	r2, [r3]
   145bc:	cmp	r2, r6
   145c0:	beq	145d4 <__assert_fail@plt+0x22b4>
   145c4:	ldr	r2, [r7, r2, lsl #2]
   145c8:	ldrb	r1, [r2]
   145cc:	cmp	r1, #45	; 0x2d
   145d0:	beq	14f08 <__assert_fail@plt+0x2be8>
   145d4:	mov	r2, #0
   145d8:	str	r2, [sp, #92]	; 0x5c
   145dc:	ldr	lr, [sp, #24]
   145e0:	ldr	r0, [sp, #92]	; 0x5c
   145e4:	eor	r1, lr, #1
   145e8:	and	r2, r0, r1
   145ec:	ldr	r1, [sp, #40]	; 0x28
   145f0:	orrs	r1, r1, r2
   145f4:	str	r1, [sp, #40]	; 0x28
   145f8:	beq	135c8 <__assert_fail@plt+0x12a8>
   145fc:	add	r2, sp, #184	; 0xb8
   14600:	str	r2, [sp, #68]	; 0x44
   14604:	mov	r1, #0
   14608:	mov	r2, #40	; 0x28
   1460c:	ldr	r0, [sp, #68]	; 0x44
   14610:	str	r3, [sp, #20]
   14614:	str	ip, [sp, #16]
   14618:	bl	12158 <memset@plt>
   1461c:	ldr	ip, [sp, #16]
   14620:	mov	r2, #0
   14624:	ldr	r1, [sp, #68]	; 0x44
   14628:	mvn	lr, #0
   1462c:	add	r0, ip, #1
   14630:	str	lr, [sp, #192]	; 0xc0
   14634:	bl	1a238 <__assert_fail@plt+0x7f18>
   14638:	ldr	r3, [sp, #20]
   1463c:	cmp	r0, #0
   14640:	beq	14650 <__assert_fail@plt+0x2330>
   14644:	ldrb	r2, [r0]
   14648:	cmp	r2, #46	; 0x2e
   1464c:	beq	15170 <__assert_fail@plt+0x2e50>
   14650:	ldr	r2, [sp, #184]	; 0xb8
   14654:	cmp	r2, #0
   14658:	bne	1466c <__assert_fail@plt+0x234c>
   1465c:	ldr	r2, [sp, #188]	; 0xbc
   14660:	cmp	r2, #0
   14664:	mvneq	r2, #0
   14668:	streq	r2, [sp, #184]	; 0xb8
   1466c:	cmp	r0, #0
   14670:	beq	135c8 <__assert_fail@plt+0x12a8>
   14674:	mov	r2, #0
   14678:	ldr	r1, [sp, #68]	; 0x44
   1467c:	str	r3, [sp, #20]
   14680:	bl	15c78 <__assert_fail@plt+0x3958>
   14684:	ldr	r3, [sp, #20]
   14688:	ldrb	r2, [r0]
   1468c:	cmp	r2, #0
   14690:	bne	135c8 <__assert_fail@plt+0x12a8>
   14694:	ldr	ip, [sp, #92]	; 0x5c
   14698:	cmp	ip, #0
   1469c:	beq	1470c <__assert_fail@plt+0x23ec>
   146a0:	ldr	r0, [r3]
   146a4:	add	r1, sp, #192	; 0xc0
   146a8:	ldr	r2, [pc, #3120]	; 152e0 <__assert_fail@plt+0x2fc0>
   146ac:	add	ip, r0, #1
   146b0:	str	ip, [r3]
   146b4:	ldr	r4, [r7, r0, lsl #2]
   146b8:	add	r2, pc, r2
   146bc:	add	r0, r4, #1
   146c0:	bl	1a238 <__assert_fail@plt+0x7f18>
   146c4:	cmp	r0, #0
   146c8:	beq	15298 <__assert_fail@plt+0x2f78>
   146cc:	ldrb	r3, [r0]
   146d0:	cmp	r3, #46	; 0x2e
   146d4:	beq	15280 <__assert_fail@plt+0x2f60>
   146d8:	ldr	r3, [sp, #196]	; 0xc4
   146dc:	cmp	r3, #0
   146e0:	bne	146f4 <__assert_fail@plt+0x23d4>
   146e4:	ldr	r3, [sp, #192]	; 0xc0
   146e8:	cmp	r3, #0
   146ec:	subne	r3, r3, #1
   146f0:	strne	r3, [sp, #192]	; 0xc0
   146f4:	ldr	r1, [sp, #68]	; 0x44
   146f8:	mov	r2, #1
   146fc:	bl	15c78 <__assert_fail@plt+0x3958>
   14700:	ldrb	r3, [r0]
   14704:	cmp	r3, #0
   14708:	bne	15200 <__assert_fail@plt+0x2ee0>
   1470c:	ldr	r0, [sp, #68]	; 0x44
   14710:	mov	r3, #1
   14714:	strb	r3, [sp, #217]	; 0xd9
   14718:	bl	168e0 <__assert_fail@plt+0x45c0>
   1471c:	b	12784 <__assert_fail@plt+0x464>
   14720:	ldr	r0, [sp, #48]	; 0x30
   14724:	ldr	r1, [sp, #56]	; 0x38
   14728:	bl	1a384 <__assert_fail@plt+0x8064>
   1472c:	ldr	ip, [sp, #60]	; 0x3c
   14730:	cmp	ip, #0
   14734:	bne	14254 <__assert_fail@plt+0x1f34>
   14738:	ldr	r0, [sp, #156]	; 0x9c
   1473c:	ldr	fp, [sp, #124]	; 0x7c
   14740:	bl	11dec <free@plt>
   14744:	ldr	r3, [pc, #2968]	; 152e4 <__assert_fail@plt+0x2fc4>
   14748:	cmn	r6, #-536870911	; 0xe0000001
   1474c:	add	r3, pc, r3
   14750:	ldr	r4, [r3, #1188]	; 0x4a4
   14754:	bhi	125dc <__assert_fail@plt+0x2bc>
   14758:	lsl	r0, r6, #3
   1475c:	bl	226ec <__assert_fail@plt+0x103cc>
   14760:	mov	r5, r0
   14764:	mov	r3, r0
   14768:	b	1477c <__assert_fail@plt+0x245c>
   1476c:	add	r2, r4, #9
   14770:	str	r4, [r3, #-4]
   14774:	str	r2, [r3, #-8]
   14778:	ldr	r4, [r4]
   1477c:	cmp	r4, #0
   14780:	add	r3, r3, #8
   14784:	bne	1476c <__assert_fail@plt+0x244c>
   14788:	mov	r0, r5
   1478c:	mov	r1, r6
   14790:	ldr	r3, [sp, #44]	; 0x2c
   14794:	mov	r2, r6
   14798:	bl	1b92c <__assert_fail@plt+0x960c>
   1479c:	mov	r0, r5
   147a0:	bl	11dec <free@plt>
   147a4:	ldr	r4, [pc, #2876]	; 152e8 <__assert_fail@plt+0x2fc8>
   147a8:	add	r4, pc, r4
   147ac:	b	147b8 <__assert_fail@plt+0x2498>
   147b0:	mvn	r0, #0
   147b4:	bl	1703c <__assert_fail@plt+0x4d1c>
   147b8:	ldr	r3, [r4, #1400]	; 0x578
   147bc:	cmp	r3, #0
   147c0:	bgt	147b0 <__assert_fail@plt+0x2490>
   147c4:	ldr	r3, [pc, #2848]	; 152ec <__assert_fail@plt+0x2fcc>
   147c8:	add	r3, pc, r3
   147cc:	ldrb	r3, [r3, #1372]	; 0x55c
   147d0:	cmp	r3, #0
   147d4:	beq	147f0 <__assert_fail@plt+0x24d0>
   147d8:	ldr	r3, [pc, #2832]	; 152f0 <__assert_fail@plt+0x2fd0>
   147dc:	ldr	r3, [fp, r3]
   147e0:	ldr	r0, [r3]
   147e4:	bl	238f4 <__assert_fail@plt+0x115d4>
   147e8:	cmn	r0, #1
   147ec:	beq	14f34 <__assert_fail@plt+0x2c14>
   147f0:	mov	r0, #0
   147f4:	bl	120c8 <exit@plt>
   147f8:	ldr	r0, [sp, #48]	; 0x30
   147fc:	mov	r6, r4
   14800:	ldr	r1, [sp, #56]	; 0x38
   14804:	bl	1a384 <__assert_fail@plt+0x8064>
   14808:	ldr	r0, [sp, #44]	; 0x2c
   1480c:	ldr	r1, [sp, #120]	; 0x78
   14810:	bl	1a354 <__assert_fail@plt+0x8034>
   14814:	mov	ip, #1
   14818:	ldr	r5, [sp, #44]	; 0x2c
   1481c:	str	ip, [sp, #24]
   14820:	str	r0, [sp, #264]	; 0x108
   14824:	b	14390 <__assert_fail@plt+0x2070>
   14828:	ldr	r0, [sp, #156]	; 0x9c
   1482c:	ldr	fp, [sp, #124]	; 0x7c
   14830:	bl	11dec <free@plt>
   14834:	b	147a4 <__assert_fail@plt+0x2484>
   14838:	ldr	r1, [pc, #2740]	; 152f4 <__assert_fail@plt+0x2fd4>
   1483c:	mov	r0, r5
   14840:	mov	r2, #5
   14844:	add	r1, pc, r1
   14848:	bl	11ec4 <dcgettext@plt>
   1484c:	mov	r1, r5
   14850:	mov	r2, r0
   14854:	mov	r0, r5
   14858:	bl	12020 <error@plt>
   1485c:	b	13858 <__assert_fail@plt+0x1538>
   14860:	ldr	r1, [pc, #2704]	; 152f8 <__assert_fail@plt+0x2fd8>
   14864:	mov	r2, #5
   14868:	mov	r0, #0
   1486c:	add	r1, pc, r1
   14870:	bl	11ec4 <dcgettext@plt>
   14874:	mov	r1, #0
   14878:	mov	r2, r0
   1487c:	mov	r0, #2
   14880:	bl	12020 <error@plt>
   14884:	b	13278 <__assert_fail@plt+0xf58>
   14888:	ldr	r1, [pc, #2668]	; 152fc <__assert_fail@plt+0x2fdc>
   1488c:	mov	r2, #5
   14890:	mov	r0, #0
   14894:	add	r1, pc, r1
   14898:	bl	11ec4 <dcgettext@plt>
   1489c:	mov	r1, #0
   148a0:	mov	r2, r0
   148a4:	mov	r0, #2
   148a8:	bl	12020 <error@plt>
   148ac:	b	13588 <__assert_fail@plt+0x1268>
   148b0:	ldr	r1, [pc, #2632]	; 15300 <__assert_fail@plt+0x2fe0>
   148b4:	mov	r2, #5
   148b8:	mov	r0, #0
   148bc:	add	r1, pc, r1
   148c0:	bl	11ec4 <dcgettext@plt>
   148c4:	mov	r1, #0
   148c8:	mov	r2, r0
   148cc:	mov	r0, #2
   148d0:	bl	12020 <error@plt>
   148d4:	b	1353c <__assert_fail@plt+0x121c>
   148d8:	ldr	ip, [sp, #88]	; 0x58
   148dc:	ldr	r3, [pc, #2592]	; 15304 <__assert_fail@plt+0x2fe4>
   148e0:	add	r9, ip, #1
   148e4:	add	fp, ip, #2
   148e8:	ldr	ip, [pc, #2584]	; 15308 <__assert_fail@plt+0x2fe8>
   148ec:	add	r3, pc, r3
   148f0:	ldr	r8, [sp, #60]	; 0x3c
   148f4:	add	ip, pc, ip
   148f8:	str	r3, [sp, #80]	; 0x50
   148fc:	str	ip, [sp, #68]	; 0x44
   14900:	str	r6, [sp, #64]	; 0x40
   14904:	ldr	sl, [sp, #128]	; 0x80
   14908:	ldr	r4, [sp, #132]	; 0x84
   1490c:	b	149c8 <__assert_fail@plt+0x26a8>
   14910:	ldrb	r1, [r3, #1]
   14914:	cmp	r1, #0
   14918:	bne	149ec <__assert_fail@plt+0x26cc>
   1491c:	mov	r0, #3
   14920:	add	r2, sp, #264	; 0x108
   14924:	bl	11f84 <__fxstat64@plt>
   14928:	adds	r0, r0, #0
   1492c:	movne	r0, #1
   14930:	cmp	r0, #0
   14934:	bne	15260 <__assert_fail@plt+0x2f40>
   14938:	ldr	r3, [sp, #280]	; 0x118
   1493c:	and	r3, r3, #61440	; 0xf000
   14940:	cmp	r3, #32768	; 0x8000
   14944:	beq	14a18 <__assert_fail@plt+0x26f8>
   14948:	ldr	r3, [sl, #1436]	; 0x59c
   1494c:	cmp	r3, #0
   14950:	bne	14f28 <__assert_fail@plt+0x2c08>
   14954:	mov	r2, #131072	; 0x20000
   14958:	mov	r3, #0
   1495c:	strd	r2, [sp, #24]
   14960:	ldr	r3, [r4, #1444]	; 0x5a4
   14964:	cmp	r3, #0
   14968:	bne	1497c <__assert_fail@plt+0x265c>
   1496c:	ldr	r3, [r4, #1436]	; 0x59c
   14970:	cmp	r3, #0
   14974:	str	r3, [r4, #1444]	; 0x5a4
   14978:	beq	14a30 <__assert_fail@plt+0x2710>
   1497c:	ldr	lr, [sp, #24]
   14980:	mov	r1, r9
   14984:	mul	r5, lr, r9
   14988:	add	r5, r5, #1
   1498c:	mov	r0, r5
   14990:	bl	242f8 <__assert_fail@plt+0x11fd8>
   14994:	ldrd	r2, [sp, #24]
   14998:	mov	r1, #0
   1499c:	cmp	r3, r1
   149a0:	cmpeq	r2, r0
   149a4:	bne	14e90 <__assert_fail@plt+0x2b70>
   149a8:	ldr	r3, [pc, #2396]	; 1530c <__assert_fail@plt+0x2fec>
   149ac:	add	r3, pc, r3
   149b0:	ldr	r3, [r3, #1444]	; 0x5a4
   149b4:	rsb	r3, fp, r3
   149b8:	cmp	r5, r3
   149bc:	bcs	14e90 <__assert_fail@plt+0x2b70>
   149c0:	add	fp, fp, r5
   149c4:	add	r7, r7, #1
   149c8:	cmp	r7, r8
   149cc:	beq	14efc <__assert_fail@plt+0x2bdc>
   149d0:	cmp	r7, #0
   149d4:	beq	14a08 <__assert_fail@plt+0x26e8>
   149d8:	ldr	ip, [sp, #40]	; 0x28
   149dc:	ldr	r3, [ip, r7, lsl #2]
   149e0:	ldrb	r2, [r3]
   149e4:	cmp	r2, #45	; 0x2d
   149e8:	beq	14910 <__assert_fail@plt+0x25f0>
   149ec:	mov	r1, r3
   149f0:	mov	r0, #3
   149f4:	add	r2, sp, #264	; 0x108
   149f8:	bl	122cc <__xstat64@plt>
   149fc:	adds	r0, r0, #0
   14a00:	movne	r0, #1
   14a04:	b	14930 <__assert_fail@plt+0x2610>
   14a08:	ldr	r0, [sp, #48]	; 0x30
   14a0c:	bl	121a0 <fileno@plt>
   14a10:	mov	r1, r0
   14a14:	b	1491c <__assert_fail@plt+0x25fc>
   14a18:	movw	r3, #65104	; 0xfe50
   14a1c:	add	r1, sp, #744	; 0x2e8
   14a20:	movt	r3, #65535	; 0xffff
   14a24:	ldrd	r0, [r1, r3]
   14a28:	strd	r0, [sp, #24]
   14a2c:	b	14960 <__assert_fail@plt+0x2640>
   14a30:	add	r5, sp, #136	; 0x88
   14a34:	mov	r0, #2
   14a38:	mov	r1, r5
   14a3c:	bl	11f24 <getrlimit64@plt>
   14a40:	cmp	r0, #0
   14a44:	mvnne	r6, #0
   14a48:	bne	14a74 <__assert_fail@plt+0x2754>
   14a4c:	movw	r3, #64928	; 0xfda0
   14a50:	add	ip, sp, #744	; 0x2e8
   14a54:	movt	r3, #65535	; 0xffff
   14a58:	mvn	r0, #1
   14a5c:	mov	r1, #0
   14a60:	ldrd	r2, [r3, ip]
   14a64:	cmp	r3, r1
   14a68:	cmpeq	r2, r0
   14a6c:	movls	r6, r2
   14a70:	mvnhi	r6, #0
   14a74:	mov	r0, #9
   14a78:	mov	r1, r5
   14a7c:	bl	11f24 <getrlimit64@plt>
   14a80:	cmp	r0, #0
   14a84:	bne	14aac <__assert_fail@plt+0x278c>
   14a88:	movw	r3, #64928	; 0xfda0
   14a8c:	add	lr, sp, #744	; 0x2e8
   14a90:	movt	r3, #65535	; 0xffff
   14a94:	mov	r0, r6
   14a98:	mov	r1, #0
   14a9c:	ldrd	r2, [r3, lr]
   14aa0:	cmp	r3, r1
   14aa4:	cmpeq	r2, r0
   14aa8:	movcc	r6, r2
   14aac:	mov	r1, r5
   14ab0:	mov	r0, #5
   14ab4:	bl	11f24 <getrlimit64@plt>
   14ab8:	lsr	r6, r6, #1
   14abc:	cmp	r0, #0
   14ac0:	bne	14b38 <__assert_fail@plt+0x2818>
   14ac4:	ldr	r2, [sp, #136]	; 0x88
   14ac8:	ldr	r3, [sp, #140]	; 0x8c
   14acc:	lsr	r2, r2, #4
   14ad0:	orr	r0, r2, r3, lsl #28
   14ad4:	lsr	r3, r3, #4
   14ad8:	str	r0, [sp, #104]	; 0x68
   14adc:	str	r3, [sp, #108]	; 0x6c
   14ae0:	ldrd	r0, [sp, #104]	; 0x68
   14ae4:	mov	r2, r0
   14ae8:	adds	r0, r0, r0
   14aec:	mov	r3, r1
   14af0:	adc	r1, r1, r1
   14af4:	adds	r0, r0, r2
   14af8:	adc	r1, r1, r3
   14afc:	lsl	lr, r0, #2
   14b00:	str	lr, [sp, #112]	; 0x70
   14b04:	lsl	r3, r1, #2
   14b08:	orr	ip, r3, r0, lsr #30
   14b0c:	str	ip, [sp, #116]	; 0x74
   14b10:	ldrd	r2, [sp, #112]	; 0x70
   14b14:	adds	r2, r2, r0
   14b18:	mov	r0, r6
   14b1c:	adc	r3, r3, r1
   14b20:	mov	r1, #0
   14b24:	cmp	r3, r1
   14b28:	cmpeq	r2, r0
   14b2c:	ldrcc	r0, [sp, #104]	; 0x68
   14b30:	movcc	r6, #15
   14b34:	mulcc	r6, r6, r0
   14b38:	bl	1f538 <__assert_fail@plt+0xd218>
   14b3c:	vmov.f64	d8, d0
   14b40:	bl	1f4d8 <__assert_fail@plt+0xd1b8>
   14b44:	vmov	s10, r6
   14b48:	ldr	ip, [sp, #80]	; 0x50
   14b4c:	mov	r2, #18
   14b50:	vcvt.f64.u32	d6, s10
   14b54:	ldr	r3, [ip, #4]
   14b58:	ldr	ip, [sp, #68]	; 0x44
   14b5c:	mul	r3, r2, r3
   14b60:	vmul.f64	d7, d0, d10
   14b64:	vmul.f64	d0, d0, d9
   14b68:	vcmp.f64	d8, d7
   14b6c:	vmrs	APSR_nzcv, fpscr
   14b70:	vcmpe.f64	d0, d6
   14b74:	vmovgt.f64	d7, d8
   14b78:	vmrs	APSR_nzcv, fpscr
   14b7c:	vcvtmi.u32.f64	s11, d0
   14b80:	vcvtmi.f64.u32	d6, s11
   14b84:	vmovmi	r6, s11
   14b88:	vcmpe.f64	d6, d7
   14b8c:	vmrs	APSR_nzcv, fpscr
   14b90:	vcvtgt.u32.f64	s13, d7
   14b94:	vmovgt	r6, s13
   14b98:	cmp	r6, r3
   14b9c:	strcs	r6, [ip, #1444]	; 0x5a4
   14ba0:	strcc	r3, [ip, #1444]	; 0x5a4
   14ba4:	b	1497c <__assert_fail@plt+0x265c>
   14ba8:	mov	ip, #24
   14bac:	str	ip, [sp, #88]	; 0x58
   14bb0:	b	142ac <__assert_fail@plt+0x1f8c>
   14bb4:	add	r5, sp, #224	; 0xe0
   14bb8:	mov	r0, r5
   14bbc:	bl	15ad0 <__assert_fail@plt+0x37b0>
   14bc0:	cmp	r0, #0
   14bc4:	movne	r6, r4
   14bc8:	strne	r6, [sp, #24]
   14bcc:	bne	137d8 <__assert_fail@plt+0x14b8>
   14bd0:	mov	r0, r5
   14bd4:	mov	r7, #1
   14bd8:	str	r7, [sp, #24]
   14bdc:	bl	168e0 <__assert_fail@plt+0x45c0>
   14be0:	ldrb	r6, [sp, #251]	; 0xfb
   14be4:	b	13730 <__assert_fail@plt+0x1410>
   14be8:	mov	r0, #1
   14bec:	b	14000 <__assert_fail@plt+0x1ce0>
   14bf0:	ldr	r7, [r8]
   14bf4:	add	ip, sp, #264	; 0x108
   14bf8:	ldr	r1, [pc, #1808]	; 15310 <__assert_fail@plt+0x2ff0>
   14bfc:	mov	r2, #0
   14c00:	mov	r3, #0
   14c04:	str	ip, [sp, #60]	; 0x3c
   14c08:	add	r1, pc, r1
   14c0c:	mov	r0, r7
   14c10:	strd	r2, [sp, #24]
   14c14:	bl	1a354 <__assert_fail@plt+0x8034>
   14c18:	ldr	r3, [pc, #1780]	; 15314 <__assert_fail@plt+0x2ff4>
   14c1c:	mov	r1, #16
   14c20:	ldr	r2, [pc, #1776]	; 15318 <__assert_fail@plt+0x2ff8>
   14c24:	add	sl, sp, #744	; 0x2e8
   14c28:	add	r3, pc, r3
   14c2c:	add	r2, pc, r2
   14c30:	ldr	ip, [r3, #1436]	; 0x59c
   14c34:	ldrb	r5, [r3, #1388]	; 0x56c
   14c38:	ldr	r2, [r2, #8]
   14c3c:	ldr	r3, [r3, #1356]	; 0x54c
   14c40:	eor	r5, r5, #1
   14c44:	cmp	r2, ip
   14c48:	movcc	r2, ip
   14c4c:	str	r3, [sp, #40]	; 0x28
   14c50:	mov	r8, r0
   14c54:	ldr	r0, [sp, #60]	; 0x3c
   14c58:	bl	167e4 <__assert_fail@plt+0x44c4>
   14c5c:	ldr	r4, [sp, #44]	; 0x2c
   14c60:	str	r4, [sl, #-588]!	; 0xfffffdb4
   14c64:	ldr	r0, [sp, #60]	; 0x3c
   14c68:	mov	r1, r8
   14c6c:	mov	r2, r7
   14c70:	bl	18684 <__assert_fail@plt+0x6364>
   14c74:	cmp	r0, #0
   14c78:	beq	15094 <__assert_fail@plt+0x2d74>
   14c7c:	ldr	r9, [sp, #272]	; 0x110
   14c80:	cmp	r4, #0
   14c84:	ldr	r6, [sp, #264]	; 0x108
   14c88:	ldr	r3, [sp, #276]	; 0x114
   14c8c:	lsl	r9, r9, #4
   14c90:	add	r6, r6, r3
   14c94:	rsb	r9, r9, r6
   14c98:	sub	r6, r6, #16
   14c9c:	beq	14cb8 <__assert_fail@plt+0x2998>
   14ca0:	b	14d68 <__assert_fail@plt+0x2a48>
   14ca4:	sub	r6, r6, #16
   14ca8:	mov	r1, r6
   14cac:	bl	177fc <__assert_fail@plt+0x54dc>
   14cb0:	cmp	r5, r0
   14cb4:	ble	14d7c <__assert_fail@plt+0x2a5c>
   14cb8:	cmp	r9, r6
   14cbc:	mov	r0, r6
   14cc0:	bcc	14ca4 <__assert_fail@plt+0x2984>
   14cc4:	ldrd	r0, [sp, #24]
   14cc8:	ldr	r3, [sp, #272]	; 0x110
   14ccc:	ldr	r2, [r6, #4]
   14cd0:	adds	r0, r0, r3
   14cd4:	adc	r1, r1, #0
   14cd8:	cmp	r4, r2
   14cdc:	strd	r0, [sp, #24]
   14ce0:	mov	r9, r2
   14ce4:	bcc	14d40 <__assert_fail@plt+0x2a20>
   14ce8:	ldr	r0, [sp, #156]	; 0x9c
   14cec:	ldr	r1, [r6]
   14cf0:	bl	11e28 <memcpy@plt>
   14cf4:	ldr	ip, [sp, #40]	; 0x28
   14cf8:	ldr	r3, [r6, #4]
   14cfc:	cmp	ip, #0
   14d00:	str	r3, [sp, #160]	; 0xa0
   14d04:	beq	14c64 <__assert_fail@plt+0x2944>
   14d08:	ldr	r1, [r6, #8]
   14d0c:	ldr	r2, [r6]
   14d10:	ldr	r3, [sp, #156]	; 0x9c
   14d14:	rsb	r2, r2, r1
   14d18:	add	r2, r3, r2
   14d1c:	str	r2, [sp, #164]	; 0xa4
   14d20:	ldr	r1, [r6, #12]
   14d24:	ldr	r2, [r6]
   14d28:	rsb	r2, r2, r1
   14d2c:	add	r3, r3, r2
   14d30:	str	r3, [sp, #168]	; 0xa8
   14d34:	b	14c64 <__assert_fail@plt+0x2944>
   14d38:	cmp	r2, r4
   14d3c:	bls	14f20 <__assert_fail@plt+0x2c00>
   14d40:	lsls	r4, r4, #1
   14d44:	bne	14d38 <__assert_fail@plt+0x2a18>
   14d48:	ldr	r0, [sp, #156]	; 0x9c
   14d4c:	mov	r4, r9
   14d50:	bl	11dec <free@plt>
   14d54:	mov	r0, r9
   14d58:	bl	226ec <__assert_fail@plt+0x103cc>
   14d5c:	str	r0, [sp, #156]	; 0x9c
   14d60:	ldr	r2, [r6, #4]
   14d64:	b	14ce8 <__assert_fail@plt+0x29c8>
   14d68:	mov	r0, sl
   14d6c:	mov	r1, r6
   14d70:	bl	177fc <__assert_fail@plt+0x54dc>
   14d74:	cmp	r5, r0
   14d78:	bgt	14cb8 <__assert_fail@plt+0x2998>
   14d7c:	ldr	ip, [sp, #36]	; 0x24
   14d80:	cmp	ip, #99	; 0x63
   14d84:	beq	14f9c <__assert_fail@plt+0x2c7c>
   14d88:	mov	r1, r7
   14d8c:	mov	r0, r8
   14d90:	bl	1a384 <__assert_fail@plt+0x8064>
   14d94:	ldr	r0, [sp, #264]	; 0x108
   14d98:	bl	11dec <free@plt>
   14d9c:	ldr	r0, [sp, #156]	; 0x9c
   14da0:	bl	11dec <free@plt>
   14da4:	mov	r0, #1
   14da8:	b	147f4 <__assert_fail@plt+0x24d4>
   14dac:	ldr	r0, [sp, #48]	; 0x30
   14db0:	ldr	r1, [sp, #56]	; 0x38
   14db4:	str	r3, [sp, #172]	; 0xac
   14db8:	bl	1a384 <__assert_fail@plt+0x8064>
   14dbc:	b	14254 <__assert_fail@plt+0x1f34>
   14dc0:	ldr	r2, [pc, #1364]	; 1531c <__assert_fail@plt+0x2ffc>
   14dc4:	add	r0, r0, #1
   14dc8:	add	r1, sp, #192	; 0xc0
   14dcc:	add	r2, pc, r2
   14dd0:	bl	1a238 <__assert_fail@plt+0x7f18>
   14dd4:	ldr	r3, [sp, #192]	; 0xc0
   14dd8:	cmp	r3, #0
   14ddc:	sub	r3, r3, #1
   14de0:	str	r3, [sp, #192]	; 0xc0
   14de4:	beq	15210 <__assert_fail@plt+0x2ef0>
   14de8:	ldrb	r3, [r0]
   14dec:	cmp	r3, #46	; 0x2e
   14df0:	beq	15188 <__assert_fail@plt+0x2e68>
   14df4:	ldr	r1, [sp, #68]	; 0x44
   14df8:	mov	r2, #1
   14dfc:	bl	15c78 <__assert_fail@plt+0x3958>
   14e00:	b	134f8 <__assert_fail@plt+0x11d8>
   14e04:	ldr	r2, [pc, #1300]	; 15320 <__assert_fail@plt+0x3000>
   14e08:	add	r0, r0, #1
   14e0c:	add	r1, sp, #188	; 0xbc
   14e10:	add	r2, pc, r2
   14e14:	bl	1a238 <__assert_fail@plt+0x7f18>
   14e18:	ldr	r3, [sp, #188]	; 0xbc
   14e1c:	cmp	r3, #0
   14e20:	sub	r3, r3, #1
   14e24:	str	r3, [sp, #188]	; 0xbc
   14e28:	beq	151b8 <__assert_fail@plt+0x2e98>
   14e2c:	ldr	r3, [sp, #184]	; 0xb8
   14e30:	b	134c8 <__assert_fail@plt+0x11a8>
   14e34:	ldrb	r2, [r3, #1]
   14e38:	cmp	r2, #0
   14e3c:	bne	14000 <__assert_fail@plt+0x1ce0>
   14e40:	ldrb	r3, [r3]
   14e44:	cmp	r3, #37	; 0x25
   14e48:	beq	14f54 <__assert_fail@plt+0x2c34>
   14e4c:	cmp	r3, #98	; 0x62
   14e50:	beq	12f54 <__assert_fail@plt+0xc34>
   14e54:	b	14000 <__assert_fail@plt+0x1ce0>
   14e58:	mov	r0, r9
   14e5c:	mov	r1, #8
   14e60:	bl	228ac <__assert_fail@plt+0x1058c>
   14e64:	mov	r3, #0
   14e68:	ldr	r2, [r8, r3, lsl #2]
   14e6c:	str	r2, [r0, r3, lsl #3]
   14e70:	add	r3, r3, #1
   14e74:	cmp	r9, r3
   14e78:	bne	14e68 <__assert_fail@plt+0x2b48>
   14e7c:	mov	r2, r9
   14e80:	ldr	r3, [sp, #44]	; 0x2c
   14e84:	mov	r1, #0
   14e88:	bl	1b92c <__assert_fail@plt+0x960c>
   14e8c:	b	147c4 <__assert_fail@plt+0x24a4>
   14e90:	ldr	r3, [pc, #1164]	; 15324 <__assert_fail@plt+0x3004>
   14e94:	ldr	r6, [sp, #64]	; 0x40
   14e98:	add	r3, pc, r3
   14e9c:	ldr	r2, [r3, #1444]	; 0x5a4
   14ea0:	add	r7, sp, #156	; 0x9c
   14ea4:	ldr	r1, [sp, #88]	; 0x58
   14ea8:	str	r7, [sp, #64]	; 0x40
   14eac:	mov	r0, r7
   14eb0:	bl	167e4 <__assert_fail@plt+0x44c4>
   14eb4:	b	142c0 <__assert_fail@plt+0x1fa0>
   14eb8:	mov	r0, #2
   14ebc:	bl	1f370 <__assert_fail@plt+0xd050>
   14ec0:	cmp	r0, #8
   14ec4:	movcs	r0, #8
   14ec8:	str	r0, [sp, #76]	; 0x4c
   14ecc:	b	141e8 <__assert_fail@plt+0x1ec8>
   14ed0:	cmp	r2, #48	; 0x30
   14ed4:	bne	14050 <__assert_fail@plt+0x1d30>
   14ed8:	ldrb	r3, [r3, #2]
   14edc:	cmp	r3, #0
   14ee0:	bne	14050 <__assert_fail@plt+0x1d30>
   14ee4:	strb	r3, [sp, #708]	; 0x2c4
   14ee8:	mov	ip, #1
   14eec:	b	130fc <__assert_fail@plt+0xddc>
   14ef0:	ldr	r0, [pc, #1072]	; 15328 <__assert_fail@plt+0x3008>
   14ef4:	add	r0, pc, r0
   14ef8:	b	14534 <__assert_fail@plt+0x2214>
   14efc:	ldr	r6, [sp, #64]	; 0x40
   14f00:	mov	r2, fp
   14f04:	b	14ea0 <__assert_fail@plt+0x2b80>
   14f08:	ldrb	r2, [r2, #1]
   14f0c:	sub	r2, r2, #48	; 0x30
   14f10:	cmp	r2, #9
   14f14:	movhi	r2, #0
   14f18:	movls	r2, #1
   14f1c:	b	145d8 <__assert_fail@plt+0x22b8>
   14f20:	mov	r9, r4
   14f24:	b	14d48 <__assert_fail@plt+0x2a28>
   14f28:	ldr	r6, [sp, #64]	; 0x40
   14f2c:	mov	r2, r3
   14f30:	b	14ea0 <__assert_fail@plt+0x2b80>
   14f34:	ldr	r1, [pc, #1008]	; 1532c <__assert_fail@plt+0x300c>
   14f38:	mov	r0, #0
   14f3c:	mov	r2, #5
   14f40:	add	r1, pc, r1
   14f44:	bl	11ec4 <dcgettext@plt>
   14f48:	ldr	r1, [pc, #992]	; 15330 <__assert_fail@plt+0x3010>
   14f4c:	add	r1, pc, r1
   14f50:	bl	15e40 <__assert_fail@plt+0x3b20>
   14f54:	bl	1f4d8 <__assert_fail@plt+0xd1b8>
   14f58:	add	r2, sp, #512	; 0x200
   14f5c:	ldrd	r0, [r2]
   14f60:	vmov.f64	d8, d0
   14f64:	bl	24848 <__assert_fail@plt+0x12528>
   14f68:	vldr	d7, [pc, #848]	; 152c0 <__assert_fail@plt+0x2fa0>
   14f6c:	vldr	d6, [pc, #852]	; 152c8 <__assert_fail@plt+0x2fa8>
   14f70:	vmov	d5, r0, r1
   14f74:	vmul.f64	d8, d8, d5
   14f78:	vdiv.f64	d7, d8, d7
   14f7c:	vcmpe.f64	d7, d6
   14f80:	vmrs	APSR_nzcv, fpscr
   14f84:	bpl	14be8 <__assert_fail@plt+0x28c8>
   14f88:	vmov	r0, r1, d7
   14f8c:	bl	24908 <__assert_fail@plt+0x125e8>
   14f90:	add	r2, sp, #512	; 0x200
   14f94:	strd	r0, [r2]
   14f98:	b	12f54 <__assert_fail@plt+0xc34>
   14f9c:	ldr	r1, [sp, #264]	; 0x108
   14fa0:	mov	r2, #5
   14fa4:	ldr	r3, [sp, #276]	; 0x114
   14fa8:	mov	r0, #0
   14fac:	ldr	ip, [pc, #896]	; 15334 <__assert_fail@plt+0x3014>
   14fb0:	add	r3, r1, r3
   14fb4:	ldrd	r4, [sp, #24]
   14fb8:	rsb	r3, r6, r3
   14fbc:	ldr	r1, [pc, #884]	; 15338 <__assert_fail@plt+0x3018>
   14fc0:	ldr	ip, [fp, ip]
   14fc4:	asr	r3, r3, #4
   14fc8:	add	r1, pc, r1
   14fcc:	adds	r4, r4, r3
   14fd0:	adc	r5, r5, r3, asr #31
   14fd4:	ldr	sl, [ip]
   14fd8:	str	ip, [sp, #36]	; 0x24
   14fdc:	bl	11ec4 <dcgettext@plt>
   14fe0:	ldr	r3, [pc, #852]	; 1533c <__assert_fail@plt+0x301c>
   14fe4:	mov	r1, r5
   14fe8:	add	r2, sp, #708	; 0x2c4
   14fec:	ldr	r3, [fp, r3]
   14ff0:	mov	r9, r0
   14ff4:	mov	r0, r4
   14ff8:	ldr	r4, [r3]
   14ffc:	bl	1f050 <__assert_fail@plt+0xcd30>
   15000:	mov	r2, r9
   15004:	str	r7, [sp]
   15008:	mov	r1, #1
   1500c:	mov	r3, r4
   15010:	str	r0, [sp, #4]
   15014:	mov	r0, sl
   15018:	bl	121ac <__fprintf_chk@plt>
   1501c:	ldr	ip, [sp, #36]	; 0x24
   15020:	ldr	r1, [pc, #792]	; 15340 <__assert_fail@plt+0x3020>
   15024:	mov	r2, #5
   15028:	mov	r0, #0
   1502c:	add	r1, pc, r1
   15030:	ldr	r4, [ip]
   15034:	bl	11ec4 <dcgettext@plt>
   15038:	mov	r1, r4
   1503c:	mov	r2, r0
   15040:	mov	r0, r6
   15044:	bl	16b44 <__assert_fail@plt+0x4824>
   15048:	b	14d88 <__assert_fail@plt+0x2a68>
   1504c:	ldr	r1, [pc, #752]	; 15344 <__assert_fail@plt+0x3024>
   15050:	ldr	r0, [r4]
   15054:	add	r1, pc, r1
   15058:	bl	16844 <__assert_fail@plt+0x4524>
   1505c:	add	r4, sp, #708	; 0x2c4
   15060:	mov	r2, #0
   15064:	mov	r0, r3
   15068:	strb	r2, [r3, #31]
   1506c:	mov	r1, r4
   15070:	strb	r2, [r3, #25]
   15074:	strb	r2, [r3, #24]
   15078:	bl	15b58 <__assert_fail@plt+0x3838>
   1507c:	mov	r0, r4
   15080:	bl	168a8 <__assert_fail@plt+0x4588>
   15084:	ldr	r1, [pc, #700]	; 15348 <__assert_fail@plt+0x3028>
   15088:	ldr	r0, [r4]
   1508c:	add	r1, pc, r1
   15090:	bl	16844 <__assert_fail@plt+0x4524>
   15094:	mov	r1, r7
   15098:	mov	r6, r0
   1509c:	mov	r0, r8
   150a0:	bl	1a384 <__assert_fail@plt+0x8064>
   150a4:	ldr	r0, [sp, #264]	; 0x108
   150a8:	bl	11dec <free@plt>
   150ac:	ldr	r0, [sp, #156]	; 0x9c
   150b0:	bl	11dec <free@plt>
   150b4:	mov	r0, r6
   150b8:	b	147f4 <__assert_fail@plt+0x24d4>
   150bc:	ldr	r0, [pc, #648]	; 1534c <__assert_fail@plt+0x302c>
   150c0:	add	r0, pc, r0
   150c4:	bl	168a8 <__assert_fail@plt+0x4588>
   150c8:	ldr	r1, [pc, #640]	; 15350 <__assert_fail@plt+0x3030>
   150cc:	mov	r2, #5
   150d0:	mov	r0, ip
   150d4:	mov	r7, r4
   150d8:	add	r1, pc, r1
   150dc:	mov	r4, ip
   150e0:	bl	11ec4 <dcgettext@plt>
   150e4:	ldr	r3, [pc, #616]	; 15354 <__assert_fail@plt+0x3034>
   150e8:	ldr	ip, [sp, #68]	; 0x44
   150ec:	add	r3, pc, r3
   150f0:	ldr	r5, [r3, ip, lsl #4]
   150f4:	mov	r6, r0
   150f8:	mov	r0, r7
   150fc:	bl	20e80 <__assert_fail@plt+0xeb60>
   15100:	mov	r3, r5
   15104:	mov	r2, r6
   15108:	mov	r1, r4
   1510c:	str	r0, [sp]
   15110:	mov	r0, r4
   15114:	bl	12020 <error@plt>
   15118:	ldr	r1, [pc, #568]	; 15358 <__assert_fail@plt+0x3038>
   1511c:	mov	r2, #5
   15120:	mov	r0, r4
   15124:	add	r1, pc, r1
   15128:	bl	11ec4 <dcgettext@plt>
   1512c:	mov	r6, r0
   15130:	ldr	r0, [pc, #548]	; 1535c <__assert_fail@plt+0x303c>
   15134:	add	r0, pc, r0
   15138:	bl	20e80 <__assert_fail@plt+0xeb60>
   1513c:	mov	r3, r5
   15140:	mov	r2, r6
   15144:	mov	r1, r4
   15148:	str	r0, [sp]
   1514c:	mov	r0, #2
   15150:	bl	12020 <error@plt>
   15154:	ldr	r3, [pc, #516]	; 15360 <__assert_fail@plt+0x3040>
   15158:	mov	r0, r4
   1515c:	str	r7, [sp]
   15160:	mov	r2, #4
   15164:	ldr	r1, [sp, #68]	; 0x44
   15168:	add	r3, pc, r3
   1516c:	bl	230a8 <__assert_fail@plt+0x10d88>
   15170:	add	r0, r0, #1
   15174:	add	r1, sp, #188	; 0xbc
   15178:	mov	r2, #0
   1517c:	bl	1a238 <__assert_fail@plt+0x7f18>
   15180:	ldr	r3, [sp, #20]
   15184:	b	14650 <__assert_fail@plt+0x2330>
   15188:	ldr	r2, [pc, #468]	; 15364 <__assert_fail@plt+0x3044>
   1518c:	add	r1, sp, #196	; 0xc4
   15190:	add	r0, r0, #1
   15194:	add	r2, pc, r2
   15198:	bl	1a238 <__assert_fail@plt+0x7f18>
   1519c:	b	14df4 <__assert_fail@plt+0x2ad4>
   151a0:	ldr	r3, [pc, #448]	; 15368 <__assert_fail@plt+0x3048>
   151a4:	mov	r2, #7
   151a8:	str	r4, [sp]
   151ac:	ldr	r1, [sp, #76]	; 0x4c
   151b0:	add	r3, pc, r3
   151b4:	bl	230a8 <__assert_fail@plt+0x10d88>
   151b8:	ldr	r1, [pc, #428]	; 1536c <__assert_fail@plt+0x304c>
   151bc:	ldr	r0, [r4]
   151c0:	add	r1, pc, r1
   151c4:	bl	16844 <__assert_fail@plt+0x4524>
   151c8:	ldr	r1, [pc, #416]	; 15370 <__assert_fail@plt+0x3050>
   151cc:	mov	r0, #0
   151d0:	mov	r2, #5
   151d4:	add	r1, pc, r1
   151d8:	bl	11ec4 <dcgettext@plt>
   151dc:	ldr	r1, [r5]
   151e0:	bl	15e40 <__assert_fail@plt+0x3b20>
   151e4:	ldr	r1, [pc, #392]	; 15374 <__assert_fail@plt+0x3054>
   151e8:	mov	r0, #0
   151ec:	mov	r2, #5
   151f0:	add	r1, pc, r1
   151f4:	bl	11ec4 <dcgettext@plt>
   151f8:	ldr	r1, [sp, #44]	; 0x2c
   151fc:	bl	15e40 <__assert_fail@plt+0x3b20>
   15200:	ldr	r1, [pc, #368]	; 15378 <__assert_fail@plt+0x3058>
   15204:	mov	r0, r4
   15208:	add	r1, pc, r1
   1520c:	bl	16844 <__assert_fail@plt+0x4524>
   15210:	ldr	r1, [pc, #356]	; 1537c <__assert_fail@plt+0x305c>
   15214:	ldr	r0, [r4]
   15218:	add	r1, pc, r1
   1521c:	bl	16844 <__assert_fail@plt+0x4524>
   15220:	ldr	r1, [pc, #344]	; 15380 <__assert_fail@plt+0x3060>
   15224:	mov	r0, #0
   15228:	mov	r2, #5
   1522c:	add	r1, pc, r1
   15230:	bl	11ec4 <dcgettext@plt>
   15234:	ldr	r1, [sp, #64]	; 0x40
   15238:	bl	15e40 <__assert_fail@plt+0x3b20>
   1523c:	ldr	r1, [pc, #320]	; 15384 <__assert_fail@plt+0x3064>
   15240:	mov	r2, #5
   15244:	add	r1, pc, r1
   15248:	bl	11ec4 <dcgettext@plt>
   1524c:	ldr	r1, [sp, #64]	; 0x40
   15250:	bl	15e40 <__assert_fail@plt+0x3b20>
   15254:	mov	r7, r4
   15258:	mov	r4, ip
   1525c:	b	15154 <__assert_fail@plt+0x2e34>
   15260:	ldr	r1, [pc, #288]	; 15388 <__assert_fail@plt+0x3068>
   15264:	mov	r0, #0
   15268:	mov	r2, #5
   1526c:	add	r1, pc, r1
   15270:	bl	11ec4 <dcgettext@plt>
   15274:	ldr	r3, [sp, #40]	; 0x28
   15278:	ldr	r1, [r3, r7, lsl #2]
   1527c:	bl	15e40 <__assert_fail@plt+0x3b20>
   15280:	ldr	r2, [pc, #260]	; 1538c <__assert_fail@plt+0x306c>
   15284:	add	r1, sp, #196	; 0xc4
   15288:	add	r0, r0, #1
   1528c:	add	r2, pc, r2
   15290:	bl	1a238 <__assert_fail@plt+0x7f18>
   15294:	b	146d8 <__assert_fail@plt+0x23b8>
   15298:	ldr	r3, [pc, #240]	; 15390 <__assert_fail@plt+0x3070>
   1529c:	movw	r2, #4997	; 0x1385
   152a0:	ldr	r0, [pc, #236]	; 15394 <__assert_fail@plt+0x3074>
   152a4:	ldr	r1, [pc, #236]	; 15398 <__assert_fail@plt+0x3078>
   152a8:	add	r3, pc, r3
   152ac:	add	r0, pc, r0
   152b0:	add	r3, r3, #388	; 0x184
   152b4:	add	r1, pc, r1
   152b8:	bl	12320 <__assert_fail@plt>
   152bc:	nop	{0}
   152c0:	andeq	r0, r0, r0
   152c4:	subsmi	r0, r9, r0
   152c8:	andeq	r0, r0, r0
   152cc:	mvnsmi	r0, #0
   152d0:	andeq	r2, r1, ip, lsl #17
   152d4:	andeq	r2, r1, r0, ror r8
   152d8:	andeq	r2, r1, r0, lsl r5
   152dc:	andeq	r0, r0, r0, lsr #4
   152e0:	andeq	r2, r1, r8, lsl #4
   152e4:	ldrdeq	r3, [r2], -ip
   152e8:	andeq	r3, r2, r0, lsl #23
   152ec:	andeq	r3, r2, r0, ror #22
   152f0:	andeq	r0, r0, ip, lsr r2
   152f4:	andeq	r2, r1, ip, ror #7
   152f8:	andeq	r2, r1, r0, lsl #4
   152fc:	muleq	r1, r8, r0
   15300:	muleq	r1, r0, r1
   15304:	andeq	r3, r2, ip, ror #18
   15308:	andeq	r3, r2, r4, lsr sl
   1530c:	andeq	r3, r2, ip, ror r9
   15310:	andeq	r0, r1, r0, ror ip
   15314:	andeq	r3, r2, r0, lsl #14
   15318:	andeq	r3, r2, ip, lsr #12
   1531c:	ldrdeq	r1, [r1], -ip
   15320:	andeq	r1, r1, ip, asr #21
   15324:	muleq	r2, r0, r4
   15328:	andeq	r1, r1, ip, asr #9
   1532c:	andeq	r0, r1, r0, ror r8
   15330:	andeq	r1, r1, r0, asr lr
   15334:	andeq	r0, r0, r8, lsr #4
   15338:	andeq	r1, r1, r0, lsl #28
   1533c:	andeq	r0, r0, ip, asr #4
   15340:			; <UNDEFINED> instruction: 0x00011db4
   15344:	andeq	r1, r1, r4, lsr #17
   15348:	andeq	r1, r1, r8, ror #17
   1534c:	andeq	r1, r1, r8, ror #16
   15350:	andeq	r1, r1, r8, lsr r9
   15354:	andeq	r2, r2, ip, asr #23
   15358:	andeq	r1, r1, r8, lsl #18
   1535c:	andeq	r1, r1, r4, lsl r9
   15360:	andeq	r2, r2, r0, asr fp
   15364:	andeq	r1, r1, r8, asr #14
   15368:	andeq	r2, r2, r8, lsl #22
   1536c:	andeq	r1, r1, ip, asr #15
   15370:	andeq	r1, r1, ip, lsl ip
   15374:	andeq	r0, r1, r4, lsr #11
   15378:	strdeq	r1, [r1], -r0
   1537c:	andeq	r1, r1, ip, asr r7
   15380:	andeq	r0, r1, r4, lsl #11
   15384:	andeq	r0, r1, r0, asr r5
   15388:	muleq	r1, r0, fp
   1538c:	andeq	r1, r1, r0, asr r6
   15390:	andeq	r0, r1, r8, ror r0
   15394:	andeq	r2, r1, r4, lsr #8
   15398:	andeq	r0, r1, r0, lsl r3
   1539c:	mov	fp, #0
   153a0:	mov	lr, #0
   153a4:	pop	{r1}		; (ldr r1, [sp], #4)
   153a8:	mov	r2, sp
   153ac:	push	{r2}		; (str r2, [sp, #-4]!)
   153b0:	push	{r0}		; (str r0, [sp, #-4]!)
   153b4:	ldr	ip, [pc, #16]	; 153cc <__assert_fail@plt+0x30ac>
   153b8:	push	{ip}		; (str ip, [sp, #-4]!)
   153bc:	ldr	r0, [pc, #12]	; 153d0 <__assert_fail@plt+0x30b0>
   153c0:	ldr	r3, [pc, #12]	; 153d4 <__assert_fail@plt+0x30b4>
   153c4:	bl	12074 <__libc_start_main@plt>
   153c8:	bl	122fc <abort@plt>
   153cc:	andeq	r5, r2, r8, ror #5
   153d0:	andeq	r2, r1, r0, lsr r3
   153d4:	andeq	r5, r2, r4, lsl #5
   153d8:	ldr	r3, [pc, #20]	; 153f4 <__assert_fail@plt+0x30d4>
   153dc:	ldr	r2, [pc, #20]	; 153f8 <__assert_fail@plt+0x30d8>
   153e0:	add	r3, pc, r3
   153e4:	ldr	r2, [r3, r2]
   153e8:	cmp	r2, #0
   153ec:	bxeq	lr
   153f0:	b	12098 <__gmon_start__@plt>
   153f4:	andeq	r2, r2, r8, lsl ip
   153f8:	andeq	r0, r0, r4, lsr r2
   153fc:	push	{r3, lr}
   15400:	movw	r0, #33580	; 0x832c
   15404:	ldr	r3, [pc, #36]	; 15430 <__assert_fail@plt+0x3110>
   15408:	movt	r0, #3
   1540c:	rsb	r3, r0, r3
   15410:	cmp	r3, #6
   15414:	popls	{r3, pc}
   15418:	movw	r3, #0
   1541c:	movt	r3, #0
   15420:	cmp	r3, #0
   15424:	popeq	{r3, pc}
   15428:	blx	r3
   1542c:	pop	{r3, pc}
   15430:	andeq	r8, r3, pc, lsr #6
   15434:	push	{r3, lr}
   15438:	movw	r0, #33580	; 0x832c
   1543c:	movw	r3, #33580	; 0x832c
   15440:	movt	r0, #3
   15444:	movt	r3, #3
   15448:	rsb	r3, r0, r3
   1544c:	asr	r3, r3, #2
   15450:	add	r3, r3, r3, lsr #31
   15454:	asrs	r1, r3, #1
   15458:	popeq	{r3, pc}
   1545c:	movw	r2, #0
   15460:	movt	r2, #0
   15464:	cmp	r2, #0
   15468:	popeq	{r3, pc}
   1546c:	blx	r2
   15470:	pop	{r3, pc}
   15474:	push	{r4, lr}
   15478:	movw	r4, #33580	; 0x832c
   1547c:	movt	r4, #3
   15480:	ldrb	r3, [r4]
   15484:	cmp	r3, #0
   15488:	popne	{r4, pc}
   1548c:	bl	153fc <__assert_fail@plt+0x30dc>
   15490:	mov	r3, #1
   15494:	strb	r3, [r4]
   15498:	pop	{r4, pc}
   1549c:	movw	r0, #31932	; 0x7cbc
   154a0:	movt	r0, #3
   154a4:	push	{r3, lr}
   154a8:	ldr	r3, [r0]
   154ac:	cmp	r3, #0
   154b0:	beq	154c8 <__assert_fail@plt+0x31a8>
   154b4:	movw	r3, #0
   154b8:	movt	r3, #0
   154bc:	cmp	r3, #0
   154c0:	beq	154c8 <__assert_fail@plt+0x31a8>
   154c4:	blx	r3
   154c8:	pop	{r3, lr}
   154cc:	b	15434 <__assert_fail@plt+0x3114>
   154d0:	push	{r3, lr}
   154d4:	ldr	r0, [r0, #4]
   154d8:	bl	244e4 <__assert_fail@plt+0x121c4>
   154dc:	mov	r0, r1
   154e0:	pop	{r3, pc}
   154e4:	ldr	r3, [r0, #4]
   154e8:	ldr	r0, [r1, #4]
   154ec:	subs	r3, r3, r0
   154f0:	rsbs	r0, r3, #0
   154f4:	adcs	r0, r0, r3
   154f8:	bx	lr
   154fc:	push	{r4, r5, r6, r7, r8}
   15500:	ldr	r8, [pc, #420]	; 156ac <__assert_fail@plt+0x338c>
   15504:	ldr	r2, [r0, #4]
   15508:	add	r8, pc, r8
   1550c:	ldr	r3, [r0]
   15510:	sub	r2, r2, #1
   15514:	ldr	r6, [r1]
   15518:	ldr	ip, [r8]
   1551c:	add	r0, r3, r2
   15520:	ldr	r7, [r1, #4]
   15524:	cmp	ip, #0
   15528:	bne	15604 <__assert_fail@plt+0x32e4>
   1552c:	cmp	r3, r0
   15530:	bcs	155f0 <__assert_fail@plt+0x32d0>
   15534:	ldr	r5, [pc, #372]	; 156b0 <__assert_fail@plt+0x3390>
   15538:	cmp	r6, #0
   1553c:	ldr	r4, [pc, #368]	; 156b4 <__assert_fail@plt+0x3394>
   15540:	add	r5, pc, r5
   15544:	add	r4, pc, r4
   15548:	beq	15690 <__assert_fail@plt+0x3370>
   1554c:	ldrb	r2, [r3]
   15550:	add	r2, r8, r2
   15554:	ldrb	r2, [r2, #24]
   15558:	cmp	r2, #0
   1555c:	beq	1564c <__assert_fail@plt+0x332c>
   15560:	add	r2, r3, #1
   15564:	b	1557c <__assert_fail@plt+0x325c>
   15568:	ldrb	ip, [r3]
   1556c:	add	ip, r5, ip
   15570:	ldrb	ip, [ip, #24]
   15574:	cmp	ip, #0
   15578:	beq	1564c <__assert_fail@plt+0x332c>
   1557c:	cmp	r0, r2
   15580:	mov	r3, r2
   15584:	add	r2, r2, #1
   15588:	bhi	15568 <__assert_fail@plt+0x3248>
   1558c:	ldrb	r2, [r1, #24]
   15590:	cmp	r2, #0
   15594:	beq	155f0 <__assert_fail@plt+0x32d0>
   15598:	cmp	r0, r3
   1559c:	bls	155f0 <__assert_fail@plt+0x32d0>
   155a0:	ldr	r2, [pc, #272]	; 156b8 <__assert_fail@plt+0x3398>
   155a4:	ldrb	r1, [r3]
   155a8:	add	r2, pc, r2
   155ac:	add	r2, r2, r1
   155b0:	ldrb	r2, [r2, #24]
   155b4:	cmp	r2, #0
   155b8:	beq	155f0 <__assert_fail@plt+0x32d0>
   155bc:	ldr	ip, [pc, #248]	; 156bc <__assert_fail@plt+0x339c>
   155c0:	add	r2, r3, #1
   155c4:	add	ip, pc, ip
   155c8:	b	155e0 <__assert_fail@plt+0x32c0>
   155cc:	ldrb	r1, [r3]
   155d0:	add	r1, ip, r1
   155d4:	ldrb	r1, [r1, #24]
   155d8:	cmp	r1, #0
   155dc:	beq	155f0 <__assert_fail@plt+0x32d0>
   155e0:	cmp	r2, r0
   155e4:	mov	r3, r2
   155e8:	add	r2, r2, #1
   155ec:	bne	155cc <__assert_fail@plt+0x32ac>
   155f0:	add	r3, r3, r7
   155f4:	cmp	r3, r0
   155f8:	movcc	r0, r3
   155fc:	pop	{r4, r5, r6, r7, r8}
   15600:	bx	lr
   15604:	cmp	r3, r0
   15608:	bcs	155f0 <__assert_fail@plt+0x32d0>
   1560c:	cmp	r6, #0
   15610:	beq	15690 <__assert_fail@plt+0x3370>
   15614:	ldrb	r4, [r8, #4]
   15618:	ldrb	r2, [r3]
   1561c:	cmp	r2, r4
   15620:	beq	1567c <__assert_fail@plt+0x335c>
   15624:	add	r2, r3, #1
   15628:	b	15638 <__assert_fail@plt+0x3318>
   1562c:	ldrb	ip, [r3]
   15630:	cmp	ip, r4
   15634:	beq	1567c <__assert_fail@plt+0x335c>
   15638:	cmp	r0, r2
   1563c:	mov	r3, r2
   15640:	add	r2, r2, #1
   15644:	bhi	1562c <__assert_fail@plt+0x330c>
   15648:	b	155f0 <__assert_fail@plt+0x32d0>
   1564c:	add	r2, r3, #1
   15650:	b	15668 <__assert_fail@plt+0x3348>
   15654:	ldrb	ip, [r3]
   15658:	add	ip, r4, ip
   1565c:	ldrb	ip, [ip, #24]
   15660:	cmp	ip, #0
   15664:	bne	156a0 <__assert_fail@plt+0x3380>
   15668:	cmp	r0, r2
   1566c:	mov	r3, r2
   15670:	add	r2, r2, #1
   15674:	bhi	15654 <__assert_fail@plt+0x3334>
   15678:	b	1558c <__assert_fail@plt+0x326c>
   1567c:	add	r3, r3, #1
   15680:	cmp	r0, r3
   15684:	bls	155f0 <__assert_fail@plt+0x32d0>
   15688:	subs	r6, r6, #1
   1568c:	bne	15618 <__assert_fail@plt+0x32f8>
   15690:	ldrb	r2, [r1, #24]
   15694:	cmp	r2, #0
   15698:	bne	155a0 <__assert_fail@plt+0x3280>
   1569c:	b	155f0 <__assert_fail@plt+0x32d0>
   156a0:	subs	r6, r6, #1
   156a4:	bne	1554c <__assert_fail@plt+0x322c>
   156a8:	b	15690 <__assert_fail@plt+0x3370>
   156ac:	andeq	r2, r2, r0, lsr #28
   156b0:	andeq	r2, r2, r8, ror #27
   156b4:	andeq	r2, r2, r4, ror #27
   156b8:	andeq	r2, r2, r0, lsl #27
   156bc:	andeq	r2, r2, r4, ror #26
   156c0:	push	{r4, r5, r6, r7, r8}
   156c4:	ldr	r8, [pc, #436]	; 15880 <__assert_fail@plt+0x3560>
   156c8:	ldr	r7, [r1, #12]
   156cc:	add	r8, pc, r8
   156d0:	ldr	r6, [r1, #8]
   156d4:	ldm	r0, {r0, r2}
   156d8:	cmp	r7, #0
   156dc:	ldr	r3, [r8]
   156e0:	addeq	r6, r6, #1
   156e4:	sub	r2, r2, #1
   156e8:	cmp	r3, #0
   156ec:	add	r2, r0, r2
   156f0:	bne	157d4 <__assert_fail@plt+0x34b4>
   156f4:	cmp	r0, r2
   156f8:	bcs	15754 <__assert_fail@plt+0x3434>
   156fc:	ldr	r5, [pc, #384]	; 15884 <__assert_fail@plt+0x3564>
   15700:	cmp	r6, #0
   15704:	ldr	r4, [pc, #380]	; 15888 <__assert_fail@plt+0x3568>
   15708:	add	r5, pc, r5
   1570c:	add	r4, pc, r4
   15710:	beq	15754 <__assert_fail@plt+0x3434>
   15714:	ldrb	r3, [r0]
   15718:	add	r3, r8, r3
   1571c:	ldrb	r3, [r3, #24]
   15720:	cmp	r3, #0
   15724:	beq	15844 <__assert_fail@plt+0x3524>
   15728:	add	r3, r0, #1
   1572c:	b	15744 <__assert_fail@plt+0x3424>
   15730:	ldrb	ip, [r0]
   15734:	add	ip, r5, ip
   15738:	ldrb	ip, [ip, #24]
   1573c:	cmp	ip, #0
   15740:	beq	15844 <__assert_fail@plt+0x3524>
   15744:	cmp	r2, r3
   15748:	mov	r0, r3
   1574c:	add	r3, r3, #1
   15750:	bhi	15730 <__assert_fail@plt+0x3410>
   15754:	cmp	r7, #0
   15758:	beq	157cc <__assert_fail@plt+0x34ac>
   1575c:	ldrb	r3, [r1, #25]
   15760:	cmp	r3, #0
   15764:	beq	157c0 <__assert_fail@plt+0x34a0>
   15768:	cmp	r0, r2
   1576c:	bcs	157c0 <__assert_fail@plt+0x34a0>
   15770:	ldr	r3, [pc, #276]	; 1588c <__assert_fail@plt+0x356c>
   15774:	ldrb	r1, [r0]
   15778:	add	r3, pc, r3
   1577c:	add	r3, r3, r1
   15780:	ldrb	r3, [r3, #24]
   15784:	cmp	r3, #0
   15788:	beq	157c0 <__assert_fail@plt+0x34a0>
   1578c:	ldr	ip, [pc, #252]	; 15890 <__assert_fail@plt+0x3570>
   15790:	add	r3, r0, #1
   15794:	add	ip, pc, ip
   15798:	b	157b0 <__assert_fail@plt+0x3490>
   1579c:	ldrb	r1, [r0]
   157a0:	add	r1, ip, r1
   157a4:	ldrb	r1, [r1, #24]
   157a8:	cmp	r1, #0
   157ac:	beq	157c0 <__assert_fail@plt+0x34a0>
   157b0:	cmp	r3, r2
   157b4:	mov	r0, r3
   157b8:	add	r3, r3, #1
   157bc:	bne	1579c <__assert_fail@plt+0x347c>
   157c0:	add	r0, r0, r7
   157c4:	cmp	r0, r2
   157c8:	movcs	r0, r2
   157cc:	pop	{r4, r5, r6, r7, r8}
   157d0:	bx	lr
   157d4:	cmp	r0, r2
   157d8:	bcs	15754 <__assert_fail@plt+0x3434>
   157dc:	cmp	r6, #0
   157e0:	sub	r5, r6, #1
   157e4:	beq	15754 <__assert_fail@plt+0x3434>
   157e8:	ldrb	r4, [r8, #4]
   157ec:	ldrb	r3, [r0]
   157f0:	cmp	r3, r4
   157f4:	beq	15820 <__assert_fail@plt+0x3500>
   157f8:	add	r3, r0, #1
   157fc:	b	1580c <__assert_fail@plt+0x34ec>
   15800:	ldrb	ip, [r0]
   15804:	cmp	ip, r4
   15808:	beq	15820 <__assert_fail@plt+0x3500>
   1580c:	cmp	r2, r3
   15810:	mov	r0, r3
   15814:	add	r3, r3, #1
   15818:	bhi	15800 <__assert_fail@plt+0x34e0>
   1581c:	b	15754 <__assert_fail@plt+0x3434>
   15820:	orrs	r3, r5, r7
   15824:	beq	15754 <__assert_fail@plt+0x3434>
   15828:	add	r0, r0, #1
   1582c:	cmp	r2, r0
   15830:	bls	15754 <__assert_fail@plt+0x3434>
   15834:	cmp	r5, #0
   15838:	sub	r5, r5, #1
   1583c:	bne	157ec <__assert_fail@plt+0x34cc>
   15840:	b	15754 <__assert_fail@plt+0x3434>
   15844:	add	r3, r0, #1
   15848:	b	15860 <__assert_fail@plt+0x3540>
   1584c:	ldrb	ip, [r0]
   15850:	add	ip, r4, ip
   15854:	ldrb	ip, [ip, #24]
   15858:	cmp	ip, #0
   1585c:	bne	15874 <__assert_fail@plt+0x3554>
   15860:	cmp	r2, r3
   15864:	mov	r0, r3
   15868:	add	r3, r3, #1
   1586c:	bhi	1584c <__assert_fail@plt+0x352c>
   15870:	b	15754 <__assert_fail@plt+0x3434>
   15874:	subs	r6, r6, #1
   15878:	bne	15714 <__assert_fail@plt+0x33f4>
   1587c:	b	15754 <__assert_fail@plt+0x3434>
   15880:	andeq	r2, r2, ip, asr ip
   15884:	andeq	r2, r2, r0, lsr #24
   15888:	andeq	r2, r2, ip, lsl ip
   1588c:			; <UNDEFINED> instruction: 0x00022bb0
   15890:	muleq	r2, r4, fp
   15894:	ldr	r3, [r0]
   15898:	cmp	r1, r3
   1589c:	bxls	lr
   158a0:	ldr	r2, [pc, #76]	; 158f4 <__assert_fail@plt+0x35d4>
   158a4:	ldrb	ip, [r3]
   158a8:	add	r2, pc, r2
   158ac:	add	r2, r2, ip
   158b0:	ldrb	r2, [r2, #24]
   158b4:	cmp	r2, #0
   158b8:	bxeq	lr
   158bc:	ldr	ip, [pc, #52]	; 158f8 <__assert_fail@plt+0x35d8>
   158c0:	add	r3, r3, #1
   158c4:	add	ip, pc, ip
   158c8:	cmp	r3, r1
   158cc:	str	r3, [r0]
   158d0:	mov	r2, r3
   158d4:	add	r3, r3, #1
   158d8:	bxeq	lr
   158dc:	ldrb	r2, [r2]
   158e0:	add	r2, ip, r2
   158e4:	ldrb	r2, [r2, #24]
   158e8:	cmp	r2, #0
   158ec:	bne	158c8 <__assert_fail@plt+0x35a8>
   158f0:	bx	lr
   158f4:	andeq	r2, r2, r0, lsl #21
   158f8:	andeq	r2, r2, r4, ror #20
   158fc:	push	{r4, r5}
   15900:	mov	ip, #0
   15904:	ldrb	r5, [r0]
   15908:	ldr	r3, [pc, #152]	; 159a8 <__assert_fail@plt+0x3688>
   1590c:	subs	r2, r5, #45	; 0x2d
   15910:	add	r3, pc, r3
   15914:	rsbs	r5, r2, #0
   15918:	adcs	r5, r5, r2
   1591c:	ldr	r4, [r3, #280]	; 0x118
   15920:	add	r1, r0, r5
   15924:	ldrb	r3, [r1], #1
   15928:	sub	r2, r3, #48	; 0x30
   1592c:	cmp	r2, #9
   15930:	bls	15978 <__assert_fail@plt+0x3658>
   15934:	cmp	r3, r4
   15938:	beq	15924 <__assert_fail@plt+0x3604>
   1593c:	ldr	r2, [pc, #104]	; 159ac <__assert_fail@plt+0x368c>
   15940:	add	r2, pc, r2
   15944:	ldr	r2, [r2, #284]	; 0x11c
   15948:	cmp	r3, r2
   1594c:	beq	15980 <__assert_fail@plt+0x3660>
   15950:	cmp	ip, #0
   15954:	moveq	r0, ip
   15958:	beq	15970 <__assert_fail@plt+0x3650>
   1595c:	ldr	r2, [pc, #76]	; 159b0 <__assert_fail@plt+0x3690>
   15960:	cmp	r5, #0
   15964:	add	r2, pc, r2
   15968:	ldrb	r0, [r2, r3]
   1596c:	rsbne	r0, r0, #0
   15970:	pop	{r4, r5}
   15974:	bx	lr
   15978:	orr	ip, ip, r2
   1597c:	b	15924 <__assert_fail@plt+0x3604>
   15980:	ldrb	r3, [r1]
   15984:	sub	r2, r3, #48	; 0x30
   15988:	cmp	r2, #9
   1598c:	bhi	15950 <__assert_fail@plt+0x3630>
   15990:	ldrb	r3, [r1, #1]!
   15994:	orr	ip, ip, r2
   15998:	sub	r2, r3, #48	; 0x30
   1599c:	cmp	r2, #9
   159a0:	bls	15990 <__assert_fail@plt+0x3670>
   159a4:	b	15950 <__assert_fail@plt+0x3630>
   159a8:	andeq	r2, r2, r8, lsl sl
   159ac:	andeq	r2, r2, r8, ror #19
   159b0:			; <UNDEFINED> instruction: 0x0000f9bc
   159b4:	ldr	ip, [pc, #256]	; 15abc <__assert_fail@plt+0x379c>
   159b8:	push	{r4, r5, r6, r7, r8, r9, sl}
   159bc:	add	ip, pc, ip
   159c0:	ldrb	r3, [r0]
   159c4:	add	r3, ip, r3
   159c8:	ldrb	r3, [r3, #24]
   159cc:	cmp	r3, #0
   159d0:	beq	159f4 <__assert_fail@plt+0x36d4>
   159d4:	add	r3, r0, #1
   159d8:	mov	r0, r3
   159dc:	add	r3, r3, #1
   159e0:	ldrb	r1, [r0]
   159e4:	add	r1, ip, r1
   159e8:	ldrb	r1, [r1, #24]
   159ec:	cmp	r1, #0
   159f0:	bne	159d8 <__assert_fail@plt+0x36b8>
   159f4:	ldr	r9, [pc, #196]	; 15ac0 <__assert_fail@plt+0x37a0>
   159f8:	mov	r8, #12
   159fc:	ldr	sl, [pc, #192]	; 15ac4 <__assert_fail@plt+0x37a4>
   15a00:	mov	r7, #0
   15a04:	ldr	r5, [pc, #188]	; 15ac8 <__assert_fail@plt+0x37a8>
   15a08:	add	r9, pc, r9
   15a0c:	add	sl, pc, sl
   15a10:	add	r5, pc, r5
   15a14:	add	r6, r8, r7
   15a18:	lsr	r6, r6, #1
   15a1c:	ldr	ip, [r9, r6, lsl #3]
   15a20:	ldrb	r3, [ip]
   15a24:	cmp	r3, #0
   15a28:	beq	15ab4 <__assert_fail@plt+0x3794>
   15a2c:	ldrb	r1, [r0]
   15a30:	add	r1, sl, r1
   15a34:	ldrb	r1, [r1, #288]	; 0x120
   15a38:	cmp	r1, r3
   15a3c:	bcc	15a98 <__assert_fail@plt+0x3778>
   15a40:	addls	r3, r0, #1
   15a44:	bls	15a64 <__assert_fail@plt+0x3744>
   15a48:	b	15aac <__assert_fail@plt+0x378c>
   15a4c:	ldrb	r4, [r4]
   15a50:	add	r4, r5, r4
   15a54:	ldrb	r4, [r4, #288]	; 0x120
   15a58:	cmp	r1, r4
   15a5c:	bhi	15a98 <__assert_fail@plt+0x3778>
   15a60:	bcc	15aac <__assert_fail@plt+0x378c>
   15a64:	ldrb	r1, [ip, #1]!
   15a68:	mov	r4, r3
   15a6c:	add	r3, r3, #1
   15a70:	cmp	r1, #0
   15a74:	bne	15a4c <__assert_fail@plt+0x372c>
   15a78:	ldr	r3, [pc, #76]	; 15acc <__assert_fail@plt+0x37ac>
   15a7c:	cmp	r2, #0
   15a80:	strne	r4, [r2]
   15a84:	add	r3, pc, r3
   15a88:	add	r6, r3, r6, lsl #3
   15a8c:	ldr	r0, [r6, #4]
   15a90:	pop	{r4, r5, r6, r7, r8, r9, sl}
   15a94:	bx	lr
   15a98:	mov	r8, r6
   15a9c:	cmp	r7, r8
   15aa0:	bcc	15a14 <__assert_fail@plt+0x36f4>
   15aa4:	mov	r0, #0
   15aa8:	b	15a90 <__assert_fail@plt+0x3770>
   15aac:	add	r7, r6, #1
   15ab0:	b	15a9c <__assert_fail@plt+0x377c>
   15ab4:	mov	r4, r0
   15ab8:	b	15a78 <__assert_fail@plt+0x3758>
   15abc:	andeq	r2, r2, ip, ror #18
   15ac0:	andeq	r2, r2, ip, ror #16
   15ac4:	andeq	r2, r2, ip, lsl r9
   15ac8:	andeq	r2, r2, r8, lsl r9
   15acc:	strdeq	r2, [r2], -r0
   15ad0:	mov	r3, r0
   15ad4:	ldr	r0, [r0, #16]
   15ad8:	cmp	r0, #0
   15adc:	beq	15ae8 <__assert_fail@plt+0x37c8>
   15ae0:	mov	r0, #0
   15ae4:	bx	lr
   15ae8:	ldr	r2, [r3, #20]
   15aec:	cmp	r2, #0
   15af0:	bxne	lr
   15af4:	ldrb	r0, [r3, #24]
   15af8:	cmp	r0, #0
   15afc:	bne	15b50 <__assert_fail@plt+0x3830>
   15b00:	ldrb	r2, [r3, #25]
   15b04:	cmp	r2, #0
   15b08:	bxne	lr
   15b0c:	ldrb	r0, [r3, #26]
   15b10:	cmp	r0, #0
   15b14:	bne	15b50 <__assert_fail@plt+0x3830>
   15b18:	ldrb	r2, [r3, #28]
   15b1c:	cmp	r2, #0
   15b20:	bxne	lr
   15b24:	ldrb	r2, [r3, #29]
   15b28:	cmp	r2, #0
   15b2c:	bxne	lr
   15b30:	ldrb	r0, [r3, #30]
   15b34:	cmp	r0, #0
   15b38:	bne	15b50 <__assert_fail@plt+0x3830>
   15b3c:	ldrb	r2, [r3, #32]
   15b40:	cmp	r2, #0
   15b44:	ldrbeq	r0, [r3, #27]
   15b48:	eoreq	r0, r0, #1
   15b4c:	bx	lr
   15b50:	mov	r0, r2
   15b54:	bx	lr
   15b58:	ldrb	r3, [r0, #24]
   15b5c:	cmp	r3, #0
   15b60:	bne	15b74 <__assert_fail@plt+0x3854>
   15b64:	ldrb	r3, [r0, #25]
   15b68:	cmp	r3, #0
   15b6c:	moveq	r2, r1
   15b70:	beq	15b80 <__assert_fail@plt+0x3860>
   15b74:	add	r2, r1, #1
   15b78:	mov	r3, #98	; 0x62
   15b7c:	strb	r3, [r1]
   15b80:	ldr	r3, [pc, #232]	; 15c70 <__assert_fail@plt+0x3950>
   15b84:	ldr	r1, [r0, #16]
   15b88:	add	r3, pc, r3
   15b8c:	add	r3, r3, #544	; 0x220
   15b90:	cmp	r1, r3
   15b94:	moveq	r3, #100	; 0x64
   15b98:	strbeq	r3, [r2]
   15b9c:	ldr	r3, [r0, #20]
   15ba0:	addeq	r2, r2, #1
   15ba4:	cmp	r3, #0
   15ba8:	addne	r3, r2, #1
   15bac:	moveq	r3, r2
   15bb0:	movne	r1, #102	; 0x66
   15bb4:	strbne	r1, [r2]
   15bb8:	ldrb	r2, [r0, #28]
   15bbc:	cmp	r2, #0
   15bc0:	movne	r2, #103	; 0x67
   15bc4:	strbne	r2, [r3]
   15bc8:	ldrb	r2, [r0, #29]
   15bcc:	addne	r3, r3, #1
   15bd0:	cmp	r2, #0
   15bd4:	movne	r2, #104	; 0x68
   15bd8:	strbne	r2, [r3]
   15bdc:	ldr	r2, [pc, #144]	; 15c74 <__assert_fail@plt+0x3954>
   15be0:	addne	r3, r3, #1
   15be4:	ldr	r1, [r0, #16]
   15be8:	add	r2, pc, r2
   15bec:	add	r2, r2, #800	; 0x320
   15bf0:	cmp	r1, r2
   15bf4:	moveq	r2, #105	; 0x69
   15bf8:	strbeq	r2, [r3]
   15bfc:	ldrb	r2, [r0, #30]
   15c00:	addeq	r3, r3, #1
   15c04:	cmp	r2, #0
   15c08:	movne	r2, #77	; 0x4d
   15c0c:	strbne	r2, [r3]
   15c10:	ldrb	r2, [r0, #26]
   15c14:	addne	r3, r3, #1
   15c18:	cmp	r2, #0
   15c1c:	movne	r2, #110	; 0x6e
   15c20:	strbne	r2, [r3]
   15c24:	ldrb	r2, [r0, #27]
   15c28:	addne	r3, r3, #1
   15c2c:	cmp	r2, #0
   15c30:	movne	r2, #82	; 0x52
   15c34:	strbne	r2, [r3]
   15c38:	ldrb	r2, [r0, #31]
   15c3c:	addne	r3, r3, #1
   15c40:	cmp	r2, #0
   15c44:	movne	r2, #114	; 0x72
   15c48:	strbne	r2, [r3]
   15c4c:	ldrb	r2, [r0, #32]
   15c50:	addne	r3, r3, #1
   15c54:	cmp	r2, #0
   15c58:	movne	r2, #86	; 0x56
   15c5c:	strbne	r2, [r3]
   15c60:	addne	r3, r3, #1
   15c64:	mov	r2, #0
   15c68:	strb	r2, [r3]
   15c6c:	bx	lr
   15c70:	andeq	r2, r2, r0, lsr #15
   15c74:	andeq	r2, r2, r0, asr #14
   15c78:	push	{r4, r5, r6, r7, r8, r9}
   15c7c:	ldrb	ip, [r0]
   15c80:	cmp	ip, #0
   15c84:	beq	15e14 <__assert_fail@plt+0x3af4>
   15c88:	ldr	r4, [pc, #396]	; 15e1c <__assert_fail@plt+0x3afc>
   15c8c:	mov	r3, r0
   15c90:	ldr	r8, [pc, #392]	; 15e20 <__assert_fail@plt+0x3b00>
   15c94:	bic	r7, r2, #2
   15c98:	ldr	r6, [pc, #388]	; 15e24 <__assert_fail@plt+0x3b04>
   15c9c:	add	r4, pc, r4
   15ca0:	ldr	r0, [pc, #384]	; 15e28 <__assert_fail@plt+0x3b08>
   15ca4:	add	r8, pc, r8
   15ca8:	add	r6, pc, r6
   15cac:	sub	r2, r2, #1
   15cb0:	add	r0, pc, r0
   15cb4:	add	r8, r8, #800	; 0x320
   15cb8:	add	r6, r6, #288	; 0x120
   15cbc:	add	r9, r0, #544	; 0x220
   15cc0:	ldrb	r5, [r4, #1056]	; 0x420
   15cc4:	mov	r4, #1
   15cc8:	sub	ip, ip, #77	; 0x4d
   15ccc:	mov	r0, r3
   15cd0:	cmp	ip, #37	; 0x25
   15cd4:	addls	pc, pc, ip, lsl #2
   15cd8:	b	15e08 <__assert_fail@plt+0x3ae8>
   15cdc:	b	15e00 <__assert_fail@plt+0x3ae0>
   15ce0:	b	15e08 <__assert_fail@plt+0x3ae8>
   15ce4:	b	15e08 <__assert_fail@plt+0x3ae8>
   15ce8:	b	15e08 <__assert_fail@plt+0x3ae8>
   15cec:	b	15e08 <__assert_fail@plt+0x3ae8>
   15cf0:	b	15df8 <__assert_fail@plt+0x3ad8>
   15cf4:	b	15e08 <__assert_fail@plt+0x3ae8>
   15cf8:	b	15e08 <__assert_fail@plt+0x3ae8>
   15cfc:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d00:	b	15df0 <__assert_fail@plt+0x3ad0>
   15d04:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d08:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d0c:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d10:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d14:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d18:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d1c:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d20:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d24:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d28:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d2c:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d30:	b	15ddc <__assert_fail@plt+0x3abc>
   15d34:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d38:	b	15dd4 <__assert_fail@plt+0x3ab4>
   15d3c:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d40:	b	15dc8 <__assert_fail@plt+0x3aa8>
   15d44:	b	15dc0 <__assert_fail@plt+0x3aa0>
   15d48:	b	15db8 <__assert_fail@plt+0x3a98>
   15d4c:	b	15da8 <__assert_fail@plt+0x3a88>
   15d50:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d54:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d58:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d5c:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d60:	b	15da0 <__assert_fail@plt+0x3a80>
   15d64:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d68:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d6c:	b	15e08 <__assert_fail@plt+0x3ae8>
   15d70:	b	15d74 <__assert_fail@plt+0x3a54>
   15d74:	strb	r4, [r1, #31]
   15d78:	ldrb	ip, [r3, #1]
   15d7c:	add	r3, r3, #1
   15d80:	cmp	ip, #0
   15d84:	bne	15cc8 <__assert_fail@plt+0x39a8>
   15d88:	ldr	r2, [pc, #156]	; 15e2c <__assert_fail@plt+0x3b0c>
   15d8c:	mov	r0, r3
   15d90:	add	r2, pc, r2
   15d94:	strb	r5, [r2, #1056]	; 0x420
   15d98:	pop	{r4, r5, r6, r7, r8, r9}
   15d9c:	bx	lr
   15da0:	strb	r4, [r1, #26]
   15da4:	b	15d78 <__assert_fail@plt+0x3a58>
   15da8:	ldr	r0, [r1, #16]
   15dac:	cmp	r0, #0
   15db0:	streq	r8, [r1, #16]
   15db4:	b	15d78 <__assert_fail@plt+0x3a58>
   15db8:	strb	r4, [r1, #29]
   15dbc:	b	15d78 <__assert_fail@plt+0x3a58>
   15dc0:	strb	r4, [r1, #28]
   15dc4:	b	15d78 <__assert_fail@plt+0x3a58>
   15dc8:	str	r6, [r1, #20]
   15dcc:	mov	r5, #1
   15dd0:	b	15d78 <__assert_fail@plt+0x3a58>
   15dd4:	str	r9, [r1, #16]
   15dd8:	b	15d78 <__assert_fail@plt+0x3a58>
   15ddc:	cmp	r7, #0
   15de0:	strbeq	r4, [r1, #24]
   15de4:	cmp	r2, #1
   15de8:	strbls	r4, [r1, #25]
   15dec:	b	15d78 <__assert_fail@plt+0x3a58>
   15df0:	strb	r4, [r1, #32]
   15df4:	b	15d78 <__assert_fail@plt+0x3a58>
   15df8:	strb	r4, [r1, #27]
   15dfc:	b	15d78 <__assert_fail@plt+0x3a58>
   15e00:	strb	r4, [r1, #30]
   15e04:	b	15d78 <__assert_fail@plt+0x3a58>
   15e08:	ldr	r3, [pc, #32]	; 15e30 <__assert_fail@plt+0x3b10>
   15e0c:	add	r3, pc, r3
   15e10:	strb	r5, [r3, #1056]	; 0x420
   15e14:	pop	{r4, r5, r6, r7, r8, r9}
   15e18:	bx	lr
   15e1c:	andeq	r2, r2, ip, lsl #13
   15e20:	andeq	r2, r2, r4, lsl #13
   15e24:	andeq	r2, r2, r0, lsl #13
   15e28:	andeq	r2, r2, r8, ror r6
   15e2c:	muleq	r2, r8, r5
   15e30:	andeq	r2, r2, ip, lsl r5
   15e34:	ldr	r0, [r0]
   15e38:	ldr	r1, [r1]
   15e3c:	b	11d68 <strcmp@plt>
   15e40:	push	{r4, r5, r6, lr}
   15e44:	sub	sp, sp, #8
   15e48:	mov	r4, r1
   15e4c:	mov	r5, r0
   15e50:	bl	1211c <__errno_location@plt>
   15e54:	cmp	r4, #0
   15e58:	ldr	r6, [r0]
   15e5c:	mov	r0, r4
   15e60:	beq	15e88 <__assert_fail@plt+0x3b68>
   15e64:	ldr	r2, [pc, #48]	; 15e9c <__assert_fail@plt+0x3b7c>
   15e68:	mov	r1, r6
   15e6c:	str	r0, [sp]
   15e70:	mov	r3, r5
   15e74:	mov	r0, #0
   15e78:	add	r2, pc, r2
   15e7c:	bl	12020 <error@plt>
   15e80:	mov	r0, #2
   15e84:	bl	120c8 <exit@plt>
   15e88:	ldr	r1, [pc, #16]	; 15ea0 <__assert_fail@plt+0x3b80>
   15e8c:	mov	r2, #5
   15e90:	add	r1, pc, r1
   15e94:	bl	11ec4 <dcgettext@plt>
   15e98:	b	15e64 <__assert_fail@plt+0x3b44>
   15e9c:	andeq	pc, r0, r0, asr r6	; <UNPREDICTABLE>
   15ea0:	andeq	pc, r0, r8, lsr #12
   15ea4:	ldr	r3, [pc, #116]	; 15f20 <__assert_fail@plt+0x3c00>
   15ea8:	ldr	ip, [pc, #116]	; 15f24 <__assert_fail@plt+0x3c04>
   15eac:	add	r3, pc, r3
   15eb0:	ldr	r1, [pc, #112]	; 15f28 <__assert_fail@plt+0x3c08>
   15eb4:	push	{r4, r5, lr}
   15eb8:	add	r1, pc, r1
   15ebc:	ldr	r4, [r3, ip]
   15ec0:	sub	sp, sp, #140	; 0x8c
   15ec4:	add	r1, r1, #1056	; 0x420
   15ec8:	mov	r5, r0
   15ecc:	add	r2, sp, #4
   15ed0:	add	r1, r1, #4
   15ed4:	ldr	r3, [r4]
   15ed8:	mov	r0, #0
   15edc:	str	r3, [sp, #132]	; 0x84
   15ee0:	bl	11dc8 <sigprocmask@plt>
   15ee4:	mov	r2, #132	; 0x84
   15ee8:	mov	r1, sp
   15eec:	rsbs	r3, r0, #1
   15ef0:	mov	r0, r5
   15ef4:	movcc	r3, #0
   15ef8:	strb	r3, [sp]
   15efc:	bl	11e28 <memcpy@plt>
   15f00:	ldr	r2, [sp, #132]	; 0x84
   15f04:	ldr	r3, [r4]
   15f08:	mov	r0, r5
   15f0c:	cmp	r2, r3
   15f10:	bne	15f1c <__assert_fail@plt+0x3bfc>
   15f14:	add	sp, sp, #140	; 0x8c
   15f18:	pop	{r4, r5, pc}
   15f1c:	bl	11ed0 <__stack_chk_fail@plt>
   15f20:	andeq	r2, r2, ip, asr #2
   15f24:	andeq	r0, r0, ip, lsl r2
   15f28:	andeq	r2, r2, r0, ror r4
   15f2c:	ldr	r3, [pc, #56]	; 15f6c <__assert_fail@plt+0x3c4c>
   15f30:	push	{r4, lr}
   15f34:	add	r3, pc, r3
   15f38:	ldr	r4, [r3, #1188]	; 0x4a4
   15f3c:	cmp	r4, #0
   15f40:	beq	15f58 <__assert_fail@plt+0x3c38>
   15f44:	add	r0, r4, #9
   15f48:	bl	11f0c <unlink@plt>
   15f4c:	ldr	r4, [r4]
   15f50:	cmp	r4, #0
   15f54:	bne	15f44 <__assert_fail@plt+0x3c24>
   15f58:	ldr	r3, [pc, #16]	; 15f70 <__assert_fail@plt+0x3c50>
   15f5c:	mov	r2, #0
   15f60:	add	r3, pc, r3
   15f64:	str	r2, [r3, #1188]	; 0x4a4
   15f68:	pop	{r4, pc}
   15f6c:	strdeq	r2, [r2], -r4
   15f70:	andeq	r2, r2, r8, asr #7
   15f74:	ldr	r3, [pc, #140]	; 16008 <__assert_fail@plt+0x3ce8>
   15f78:	ldr	r1, [pc, #140]	; 1600c <__assert_fail@plt+0x3cec>
   15f7c:	add	r3, pc, r3
   15f80:	ldr	r2, [pc, #136]	; 16010 <__assert_fail@plt+0x3cf0>
   15f84:	push	{r4, r5, lr}
   15f88:	sub	sp, sp, #276	; 0x114
   15f8c:	ldr	r4, [r3, r1]
   15f90:	add	r2, pc, r2
   15f94:	ldr	r3, [r4]
   15f98:	str	r3, [sp, #268]	; 0x10c
   15f9c:	ldr	r3, [r2, #1188]	; 0x4a4
   15fa0:	cmp	r3, #0
   15fa4:	beq	15fd4 <__assert_fail@plt+0x3cb4>
   15fa8:	add	r5, sp, #4
   15fac:	mov	r0, r5
   15fb0:	bl	15ea4 <__assert_fail@plt+0x3b84>
   15fb4:	bl	15f2c <__assert_fail@plt+0x3c0c>
   15fb8:	mov	r1, r5
   15fbc:	add	r0, sp, #136	; 0x88
   15fc0:	mov	r2, #132	; 0x84
   15fc4:	bl	11e28 <memcpy@plt>
   15fc8:	ldrb	r3, [sp, #136]	; 0x88
   15fcc:	cmp	r3, #0
   15fd0:	bne	15ff0 <__assert_fail@plt+0x3cd0>
   15fd4:	bl	1c5f8 <__assert_fail@plt+0xa2d8>
   15fd8:	ldr	r2, [sp, #268]	; 0x10c
   15fdc:	ldr	r3, [r4]
   15fe0:	cmp	r2, r3
   15fe4:	bne	16004 <__assert_fail@plt+0x3ce4>
   15fe8:	add	sp, sp, #276	; 0x114
   15fec:	pop	{r4, r5, pc}
   15ff0:	add	r1, sp, #140	; 0x8c
   15ff4:	mov	r2, #0
   15ff8:	mov	r0, #2
   15ffc:	bl	11dc8 <sigprocmask@plt>
   16000:	b	15fd4 <__assert_fail@plt+0x3cb4>
   16004:	bl	11ed0 <__stack_chk_fail@plt>
   16008:	andeq	r2, r2, ip, ror r0
   1600c:	andeq	r0, r0, ip, lsl r2
   16010:	muleq	r2, r8, r3
   16014:	push	{r4, lr}
   16018:	mov	r4, r0
   1601c:	bl	15f2c <__assert_fail@plt+0x3c0c>
   16020:	mov	r0, r4
   16024:	mov	r1, #0
   16028:	bl	11e70 <signal@plt>
   1602c:	mov	r0, r4
   16030:	pop	{r4, lr}
   16034:	b	11d44 <raise@plt>
   16038:	ldr	ip, [pc, #132]	; 160c4 <__assert_fail@plt+0x3da4>
   1603c:	ldrb	r3, [r0]
   16040:	add	ip, pc, ip
   16044:	add	r3, ip, r3
   16048:	ldrb	r3, [r3, #24]
   1604c:	cmp	r3, #0
   16050:	beq	16074 <__assert_fail@plt+0x3d54>
   16054:	add	r3, r0, #1
   16058:	mov	r0, r3
   1605c:	add	r3, r3, #1
   16060:	ldrb	r2, [r0]
   16064:	add	r2, ip, r2
   16068:	ldrb	r2, [r2, #24]
   1606c:	cmp	r2, #0
   16070:	bne	16058 <__assert_fail@plt+0x3d38>
   16074:	ldr	ip, [pc, #76]	; 160c8 <__assert_fail@plt+0x3da8>
   16078:	ldrb	r3, [r1]
   1607c:	add	ip, pc, ip
   16080:	add	r3, ip, r3
   16084:	ldrb	r3, [r3, #24]
   16088:	cmp	r3, #0
   1608c:	beq	160b0 <__assert_fail@plt+0x3d90>
   16090:	add	r3, r1, #1
   16094:	mov	r1, r3
   16098:	add	r3, r3, #1
   1609c:	ldrb	r2, [r1]
   160a0:	add	r2, ip, r2
   160a4:	ldrb	r2, [r2, #24]
   160a8:	cmp	r2, #0
   160ac:	bne	16094 <__assert_fail@plt+0x3d74>
   160b0:	ldr	r3, [pc, #20]	; 160cc <__assert_fail@plt+0x3dac>
   160b4:	add	r3, pc, r3
   160b8:	ldr	r2, [r3, #284]	; 0x11c
   160bc:	ldr	r3, [r3, #280]	; 0x118
   160c0:	b	21afc <__assert_fail@plt+0xf7dc>
   160c4:	andeq	r2, r2, r8, ror #5
   160c8:	andeq	r2, r2, ip, lsr #5
   160cc:	andeq	r2, r2, r4, ror r2
   160d0:	push	{r4, r5, r6, r7, lr}
   160d4:	sub	sp, sp, #12
   160d8:	mov	r4, r0
   160dc:	ldr	r5, [pc, #124]	; 16160 <__assert_fail@plt+0x3e40>
   160e0:	str	r1, [sp]
   160e4:	str	r0, [sp, #4]
   160e8:	bl	120e0 <strlen@plt>
   160ec:	add	r5, pc, r5
   160f0:	ldr	r3, [r5, #1192]	; 0x4a8
   160f4:	add	r1, r4, r0
   160f8:	add	r4, sp, #8
   160fc:	add	r0, sp, #4
   16100:	blx	r3
   16104:	ldr	r6, [r4, #-8]!
   16108:	mov	r0, r6
   1610c:	bl	120e0 <strlen@plt>
   16110:	ldr	r3, [r5, #1192]	; 0x4a8
   16114:	add	r1, r6, r0
   16118:	mov	r0, sp
   1611c:	blx	r3
   16120:	ldr	r7, [sp, #4]
   16124:	mov	r0, r7
   16128:	bl	158fc <__assert_fail@plt+0x35dc>
   1612c:	ldr	r6, [sp]
   16130:	mov	r4, r0
   16134:	mov	r0, r6
   16138:	bl	158fc <__assert_fail@plt+0x35dc>
   1613c:	subs	r0, r4, r0
   16140:	bne	16158 <__assert_fail@plt+0x3e38>
   16144:	mov	r0, r7
   16148:	mov	r1, r6
   1614c:	ldr	r2, [r5, #284]	; 0x11c
   16150:	ldr	r3, [r5, #280]	; 0x118
   16154:	bl	21afc <__assert_fail@plt+0xf7dc>
   16158:	add	sp, sp, #12
   1615c:	pop	{r4, r5, r6, r7, pc}
   16160:	andeq	r2, r2, ip, lsr r2
   16164:	push	{r3, r4, r5, r6, r7, lr}
   16168:	mov	r4, r0
   1616c:	mov	r7, r2
   16170:	mov	r6, r1
   16174:	bl	1211c <__errno_location@plt>
   16178:	mov	r2, r7
   1617c:	mov	r1, r6
   16180:	mov	r5, r0
   16184:	mov	r0, r4
   16188:	mov	r4, #0
   1618c:	str	r4, [r5]
   16190:	bl	12110 <strxfrm@plt>
   16194:	ldr	r5, [r5]
   16198:	cmp	r5, r4
   1619c:	mov	r7, r0
   161a0:	beq	16228 <__assert_fail@plt+0x3f08>
   161a4:	ldr	r1, [pc, #132]	; 16230 <__assert_fail@plt+0x3f10>
   161a8:	mov	r2, #5
   161ac:	mov	r0, r4
   161b0:	add	r1, pc, r1
   161b4:	bl	11ec4 <dcgettext@plt>
   161b8:	mov	r1, r5
   161bc:	mov	r2, r0
   161c0:	mov	r0, r4
   161c4:	bl	12020 <error@plt>
   161c8:	ldr	r1, [pc, #100]	; 16234 <__assert_fail@plt+0x3f14>
   161cc:	mov	r2, #5
   161d0:	mov	r0, r4
   161d4:	add	r1, pc, r1
   161d8:	bl	11ec4 <dcgettext@plt>
   161dc:	mov	r1, r4
   161e0:	mov	r2, r0
   161e4:	mov	r0, r4
   161e8:	bl	12020 <error@plt>
   161ec:	ldr	r1, [pc, #68]	; 16238 <__assert_fail@plt+0x3f18>
   161f0:	mov	r2, #5
   161f4:	mov	r0, r4
   161f8:	add	r1, pc, r1
   161fc:	bl	11ec4 <dcgettext@plt>
   16200:	mov	r2, r6
   16204:	mov	r1, #6
   16208:	mov	r5, r0
   1620c:	mov	r0, r4
   16210:	bl	20b78 <__assert_fail@plt+0xe858>
   16214:	mov	r2, r5
   16218:	mov	r1, r4
   1621c:	mov	r3, r0
   16220:	mov	r0, #2
   16224:	bl	12020 <error@plt>
   16228:	mov	r0, r7
   1622c:	pop	{r3, r4, r5, r6, r7, pc}
   16230:	andeq	pc, r0, r0, lsr #6
   16234:	andeq	pc, r0, ip, lsl r3	; <UNPREDICTABLE>
   16238:	andeq	pc, r0, r4, lsr #6
   1623c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16240:	sub	sp, sp, #4352	; 0x1100
   16244:	sub	sp, sp, #52	; 0x34
   16248:	ldr	ip, [pc, #1032]	; 16658 <__assert_fail@plt+0x4338>
   1624c:	add	lr, sp, #240	; 0xf0
   16250:	ldr	r4, [pc, #1028]	; 1665c <__assert_fail@plt+0x433c>
   16254:	str	lr, [sp, #32]
   16258:	add	ip, pc, ip
   1625c:	ldr	lr, [pc, #1020]	; 16660 <__assert_fail@plt+0x4340>
   16260:	add	r4, pc, r4
   16264:	mov	r9, r3
   16268:	mov	r7, r1
   1626c:	add	r1, r4, #1184	; 0x4a0
   16270:	mov	r5, r0
   16274:	ldr	lr, [ip, lr]
   16278:	add	ip, sp, #8192	; 0x2000
   1627c:	add	r1, r1, #12
   16280:	mov	r6, r2
   16284:	add	r0, sp, #240	; 0xf0
   16288:	add	r2, sp, #84	; 0x54
   1628c:	ldr	r3, [lr]
   16290:	str	r2, [sp, #16]
   16294:	mov	r2, #156	; 0x9c
   16298:	str	lr, [sp, #36]	; 0x24
   1629c:	str	r3, [ip, #-3796]	; 0xfffff12c
   162a0:	bl	11e28 <memcpy@plt>
   162a4:	add	r0, sp, #84	; 0x54
   162a8:	add	r1, sp, #240	; 0xf0
   162ac:	mov	r2, #156	; 0x9c
   162b0:	bl	11e28 <memcpy@plt>
   162b4:	ldrb	r8, [r4, #1352]	; 0x548
   162b8:	cmp	r8, #0
   162bc:	bne	16384 <__assert_fail@plt+0x4064>
   162c0:	add	sl, sp, #52	; 0x34
   162c4:	add	r2, sp, #84	; 0x54
   162c8:	mov	r0, r5
   162cc:	mov	r1, r7
   162d0:	bl	1d344 <__assert_fail@plt+0xb024>
   162d4:	add	r4, sl, #16
   162d8:	mov	r1, sl
   162dc:	add	r0, sp, #84	; 0x54
   162e0:	bl	1d29c <__assert_fail@plt+0xaf7c>
   162e4:	add	r2, sp, #240	; 0xf0
   162e8:	mov	r0, r6
   162ec:	mov	r1, r9
   162f0:	bl	1d344 <__assert_fail@plt+0xb024>
   162f4:	mov	r1, r4
   162f8:	add	r0, sp, #240	; 0xf0
   162fc:	bl	1d29c <__assert_fail@plt+0xaf7c>
   16300:	mov	r0, sl
   16304:	mov	r1, r4
   16308:	mov	r2, #16
   1630c:	bl	11eac <memcmp@plt>
   16310:	cmp	r0, #0
   16314:	str	r0, [sp, #12]
   16318:	strne	r8, [sp, #8]
   1631c:	bne	16354 <__assert_fail@plt+0x4034>
   16320:	ldr	r3, [sp, #12]
   16324:	mov	fp, r6
   16328:	mov	r8, r5
   1632c:	str	r3, [sp, #8]
   16330:	cmp	r9, r7
   16334:	movcc	r2, r9
   16338:	movcs	r2, r7
   1633c:	mov	r0, r8
   16340:	mov	r1, fp
   16344:	bl	11eac <memcmp@plt>
   16348:	cmp	r0, #0
   1634c:	str	r0, [sp, #12]
   16350:	beq	1663c <__assert_fail@plt+0x431c>
   16354:	ldr	r0, [sp, #8]
   16358:	bl	11dec <free@plt>
   1635c:	add	ip, sp, #8192	; 0x2000
   16360:	ldr	r0, [sp, #12]
   16364:	ldr	r2, [ip, #-3796]	; 0xfffff12c
   16368:	ldr	ip, [sp, #36]	; 0x24
   1636c:	ldr	r3, [ip]
   16370:	cmp	r2, r3
   16374:	bne	16654 <__assert_fail@plt+0x4334>
   16378:	add	sp, sp, #4352	; 0x1100
   1637c:	add	sp, sp, #52	; 0x34
   16380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16384:	add	r3, r7, r9
   16388:	add	r2, sp, #396	; 0x18c
   1638c:	add	sl, r5, r7
   16390:	mov	r4, #4000	; 0xfa0
   16394:	add	r3, r3, r3, lsl #1
   16398:	mov	r8, r2
   1639c:	add	r3, r3, #2
   163a0:	add	r9, r6, r9
   163a4:	str	r3, [sp, #20]
   163a8:	movw	ip, #21844	; 0x5554
   163ac:	mov	r3, #0
   163b0:	movt	ip, #21845	; 0x5555
   163b4:	str	r3, [sp, #8]
   163b8:	add	r3, sp, #112	; 0x70
   163bc:	str	ip, [sp, #28]
   163c0:	add	ip, sp, #240	; 0xf0
   163c4:	str	r3, [sp, #40]	; 0x28
   163c8:	mov	r3, #0
   163cc:	str	r2, [sp, #44]	; 0x2c
   163d0:	str	r9, [sp, #4]
   163d4:	str	ip, [sp, #24]
   163d8:	str	r3, [sp, #12]
   163dc:	ldr	ip, [sp, #20]
   163e0:	cmp	r4, ip
   163e4:	bcc	16408 <__assert_fail@plt+0x40e8>
   163e8:	cmp	r5, sl
   163ec:	bcc	16444 <__assert_fail@plt+0x4124>
   163f0:	ldr	r3, [sp, #4]
   163f4:	mov	r7, #0
   163f8:	cmp	r6, r3
   163fc:	movcs	r9, r7
   16400:	bcs	164b4 <__assert_fail@plt+0x4194>
   16404:	b	16484 <__assert_fail@plt+0x4164>
   16408:	add	r4, r4, r4, lsl #1
   1640c:	ldr	r0, [sp, #8]
   16410:	lsr	r4, r4, #1
   16414:	cmp	r4, ip
   16418:	movcc	r4, ip
   1641c:	bl	11dec <free@plt>
   16420:	mov	r0, r4
   16424:	bl	1205c <malloc@plt>
   16428:	cmp	r0, #0
   1642c:	str	r0, [sp, #8]
   16430:	addeq	r8, sp, #396	; 0x18c
   16434:	movne	r8, r0
   16438:	moveq	r4, #4000	; 0xfa0
   1643c:	cmp	r5, sl
   16440:	bcs	163f0 <__assert_fail@plt+0x40d0>
   16444:	mov	r0, r8
   16448:	mov	r1, r5
   1644c:	mov	r2, r4
   16450:	bl	16164 <__assert_fail@plt+0x3e44>
   16454:	ldr	r3, [sp, #4]
   16458:	add	r7, r0, #1
   1645c:	cmp	r4, r7
   16460:	movcc	fp, #0
   16464:	movcs	fp, #1
   16468:	cmp	r6, r3
   1646c:	movcs	r9, #0
   16470:	bcs	1649c <__assert_fail@plt+0x417c>
   16474:	cmp	fp, #0
   16478:	moveq	r0, fp
   1647c:	moveq	r2, fp
   16480:	beq	16490 <__assert_fail@plt+0x4170>
   16484:	add	r0, r8, r7
   16488:	rsb	r2, r7, r4
   1648c:	mov	fp, #1
   16490:	mov	r1, r6
   16494:	bl	16164 <__assert_fail@plt+0x3e44>
   16498:	add	r9, r0, #1
   1649c:	cmp	fp, #0
   164a0:	addeq	r4, r7, r9
   164a4:	beq	16568 <__assert_fail@plt+0x4248>
   164a8:	add	r3, r9, r7
   164ac:	cmp	r4, r3
   164b0:	bcc	16564 <__assert_fail@plt+0x4244>
   164b4:	add	fp, r8, r7
   164b8:	cmp	r5, sl
   164bc:	bcs	164d0 <__assert_fail@plt+0x41b0>
   164c0:	mov	r0, r5
   164c4:	bl	120e0 <strlen@plt>
   164c8:	add	r0, r0, #1
   164cc:	add	r5, r5, r0
   164d0:	ldr	ip, [sp, #4]
   164d4:	cmp	r6, ip
   164d8:	bcs	164ec <__assert_fail@plt+0x41cc>
   164dc:	mov	r0, r6
   164e0:	bl	120e0 <strlen@plt>
   164e4:	add	r0, r0, #1
   164e8:	add	r6, r6, r0
   164ec:	ldr	r3, [sp, #4]
   164f0:	cmp	r6, r3
   164f4:	cmpcs	r5, sl
   164f8:	bcs	165d0 <__assert_fail@plt+0x42b0>
   164fc:	mov	r0, r8
   16500:	mov	r1, r7
   16504:	add	r2, sp, #84	; 0x54
   16508:	bl	1d344 <__assert_fail@plt+0xb024>
   1650c:	mov	r0, fp
   16510:	mov	r1, r9
   16514:	add	r2, sp, #240	; 0xf0
   16518:	bl	1d344 <__assert_fail@plt+0xb024>
   1651c:	ldr	r3, [sp, #12]
   16520:	cmp	r3, #0
   16524:	bne	163dc <__assert_fail@plt+0x40bc>
   16528:	cmp	r7, r9
   1652c:	movcc	r2, r7
   16530:	movcs	r2, r9
   16534:	mov	r1, fp
   16538:	mov	r0, r8
   1653c:	bl	11eac <memcmp@plt>
   16540:	cmp	r0, #0
   16544:	str	r0, [sp, #12]
   16548:	bne	163dc <__assert_fail@plt+0x40bc>
   1654c:	cmp	r7, r9
   16550:	movls	r3, #0
   16554:	movhi	r3, #1
   16558:	subcc	r3, r3, #1
   1655c:	str	r3, [sp, #12]
   16560:	b	163dc <__assert_fail@plt+0x40bc>
   16564:	mov	r4, r3
   16568:	ldr	ip, [sp, #28]
   1656c:	ldr	r0, [sp, #8]
   16570:	cmp	r4, ip
   16574:	addls	r4, r4, r4, lsl #1
   16578:	lsrls	r4, r4, #1
   1657c:	bl	11dec <free@plt>
   16580:	mov	r0, r4
   16584:	bl	226ec <__assert_fail@plt+0x103cc>
   16588:	cmp	r5, sl
   1658c:	mov	r8, r0
   16590:	bcc	165c0 <__assert_fail@plt+0x42a0>
   16594:	ldr	r3, [sp, #4]
   16598:	add	fp, r8, r7
   1659c:	cmp	r6, r3
   165a0:	strcs	r8, [sp, #8]
   165a4:	bcs	164b8 <__assert_fail@plt+0x4198>
   165a8:	mov	r1, r6
   165ac:	mov	r2, r9
   165b0:	mov	r0, fp
   165b4:	str	r8, [sp, #8]
   165b8:	bl	12110 <strxfrm@plt>
   165bc:	b	164b8 <__assert_fail@plt+0x4198>
   165c0:	mov	r1, r5
   165c4:	mov	r2, r7
   165c8:	bl	12110 <strxfrm@plt>
   165cc:	b	16594 <__assert_fail@plt+0x4274>
   165d0:	add	r5, sp, #52	; 0x34
   165d4:	add	r2, sp, #84	; 0x54
   165d8:	mov	r0, r8
   165dc:	mov	r1, r7
   165e0:	bl	1d344 <__assert_fail@plt+0xb024>
   165e4:	add	r4, sp, #68	; 0x44
   165e8:	mov	r1, r5
   165ec:	add	r0, sp, #84	; 0x54
   165f0:	bl	1d29c <__assert_fail@plt+0xaf7c>
   165f4:	add	r2, sp, #240	; 0xf0
   165f8:	mov	r0, fp
   165fc:	mov	r1, r9
   16600:	bl	1d344 <__assert_fail@plt+0xb024>
   16604:	mov	r1, r4
   16608:	add	r0, sp, #240	; 0xf0
   1660c:	bl	1d29c <__assert_fail@plt+0xaf7c>
   16610:	mov	r0, r5
   16614:	mov	r1, r4
   16618:	mov	r2, #16
   1661c:	bl	11eac <memcmp@plt>
   16620:	cmp	r0, #0
   16624:	strne	r0, [sp, #12]
   16628:	bne	16354 <__assert_fail@plt+0x4034>
   1662c:	ldr	ip, [sp, #12]
   16630:	cmp	ip, #0
   16634:	bne	16354 <__assert_fail@plt+0x4034>
   16638:	b	16330 <__assert_fail@plt+0x4010>
   1663c:	cmp	r7, r9
   16640:	movls	r3, #0
   16644:	movhi	r3, #1
   16648:	subcc	r3, r3, #1
   1664c:	str	r3, [sp, #12]
   16650:	b	16354 <__assert_fail@plt+0x4034>
   16654:	bl	11ed0 <__stack_chk_fail@plt>
   16658:	andeq	r1, r2, r0, lsr #27
   1665c:	andeq	r2, r2, r8, asr #1
   16660:	andeq	r0, r0, ip, lsl r2
   16664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16668:	sub	sp, sp, #4
   1666c:	bl	120b0 <__ctype_b_loc@plt>
   16670:	mov	r4, r0
   16674:	bl	1208c <__ctype_toupper_loc@plt>
   16678:	ldr	r2, [pc, #336]	; 167d0 <__assert_fail@plt+0x44b0>
   1667c:	mov	r3, #0
   16680:	add	r2, pc, r2
   16684:	ldr	ip, [r4]
   16688:	lsl	r1, r3, #1
   1668c:	add	r8, r2, #800	; 0x320
   16690:	add	r9, r2, #24
   16694:	add	r6, r2, #544	; 0x220
   16698:	add	r5, r2, #288	; 0x120
   1669c:	ldrh	ip, [ip, r1]
   166a0:	eor	r7, ip, #16384	; 0x4000
   166a4:	and	ip, ip, #1
   166a8:	ubfx	r7, r7, #14, #1
   166ac:	strb	ip, [r3, r9]
   166b0:	strb	r7, [r3, r8]
   166b4:	ldr	ip, [r4]
   166b8:	ldrh	r1, [ip, r1]
   166bc:	tst	r1, #9
   166c0:	movne	ip, #0
   166c4:	moveq	ip, #1
   166c8:	strb	ip, [r3, r6]
   166cc:	ldr	r1, [r0]
   166d0:	ldr	ip, [r1, r3, lsl #2]
   166d4:	strb	ip, [r3, r5]
   166d8:	add	r3, r3, #1
   166dc:	cmp	r3, #256	; 0x100
   166e0:	bne	16684 <__assert_fail@plt+0x4364>
   166e4:	ldrb	r3, [r2, #1353]	; 0x549
   166e8:	cmp	r3, #0
   166ec:	beq	167c8 <__assert_fail@plt+0x44a8>
   166f0:	ldr	r7, [pc, #220]	; 167d4 <__assert_fail@plt+0x44b4>
   166f4:	mov	fp, #0
   166f8:	ldr	r9, [pc, #216]	; 167d8 <__assert_fail@plt+0x44b8>
   166fc:	mov	sl, fp
   16700:	add	r7, pc, r7
   16704:	mov	r6, fp
   16708:	add	r9, pc, r9
   1670c:	add	r0, sl, #131072	; 0x20000
   16710:	add	sl, sl, #1
   16714:	add	r0, r0, #14
   16718:	bl	12248 <nl_langinfo@plt>
   1671c:	mov	r5, r0
   16720:	bl	120e0 <strlen@plt>
   16724:	mov	r8, r0
   16728:	add	r0, r0, #1
   1672c:	bl	226ec <__assert_fail@plt+0x103cc>
   16730:	cmp	r8, #0
   16734:	mov	r3, r7
   16738:	str	r0, [r3, fp]!
   1673c:	str	sl, [r3, #4]
   16740:	beq	167b0 <__assert_fail@plt+0x4490>
   16744:	add	r8, r5, r8
   16748:	mov	r3, r5
   1674c:	mov	ip, #0
   16750:	ldrb	r2, [r3], #1
   16754:	ldr	r1, [r4]
   16758:	add	r5, r9, r2
   1675c:	lsl	r2, r2, #1
   16760:	ldrh	r2, [r1, r2]
   16764:	tst	r2, #1
   16768:	ldrbeq	r2, [r5, #288]	; 0x120
   1676c:	strbeq	r2, [r0, ip]
   16770:	addeq	ip, ip, #1
   16774:	cmp	r3, r8
   16778:	bne	16750 <__assert_fail@plt+0x4430>
   1677c:	cmp	sl, #12
   16780:	strb	r6, [r0, ip]
   16784:	add	fp, fp, #8
   16788:	bne	1670c <__assert_fail@plt+0x43ec>
   1678c:	ldr	r0, [pc, #72]	; 167dc <__assert_fail@plt+0x44bc>
   16790:	mov	r1, sl
   16794:	ldr	r3, [pc, #68]	; 167e0 <__assert_fail@plt+0x44c0>
   16798:	mov	r2, #8
   1679c:	add	r0, pc, r0
   167a0:	add	r3, pc, r3
   167a4:	add	sp, sp, #4
   167a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167ac:	b	12284 <qsort@plt>
   167b0:	cmp	sl, #12
   167b4:	mov	ip, r8
   167b8:	strb	r6, [r0, ip]
   167bc:	add	fp, fp, #8
   167c0:	bne	1670c <__assert_fail@plt+0x43ec>
   167c4:	b	1678c <__assert_fail@plt+0x446c>
   167c8:	add	sp, sp, #4
   167cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167d0:	andeq	r1, r2, r8, lsr #25
   167d4:	andeq	r1, r2, r4, ror fp
   167d8:	andeq	r1, r2, r0, lsr #24
   167dc:	ldrdeq	r1, [r2], -r8
   167e0:			; <UNDEFINED> instruction: 0xfffff68c
   167e4:	push	{r3, r4, r5, r6, r7, lr}
   167e8:	mov	r7, r1
   167ec:	add	r6, r1, #1
   167f0:	mov	r5, r0
   167f4:	b	16804 <__assert_fail@plt+0x44e4>
   167f8:	lsr	r2, r4, #1
   167fc:	cmp	r2, r6
   16800:	bls	16840 <__assert_fail@plt+0x4520>
   16804:	bic	r4, r2, #15
   16808:	add	r4, r4, #16
   1680c:	mov	r0, r4
   16810:	bl	1205c <malloc@plt>
   16814:	cmp	r0, #0
   16818:	str	r0, [r5]
   1681c:	beq	167f8 <__assert_fail@plt+0x44d8>
   16820:	mov	r3, #0
   16824:	str	r7, [r5, #20]
   16828:	str	r4, [r5, #12]
   1682c:	str	r3, [r5, #8]
   16830:	str	r3, [r5, #16]
   16834:	str	r3, [r5, #4]
   16838:	strb	r3, [r5, #24]
   1683c:	pop	{r3, r4, r5, r6, r7, pc}
   16840:	bl	22900 <__assert_fail@plt+0x105e0>
   16844:	push	{r4, r5, r6, lr}
   16848:	mov	r6, r1
   1684c:	ldr	r1, [pc, #80]	; 168a4 <__assert_fail@plt+0x4584>
   16850:	sub	sp, sp, #8
   16854:	mov	r5, r0
   16858:	mov	r2, #5
   1685c:	add	r1, pc, r1
   16860:	mov	r0, #0
   16864:	bl	11ec4 <dcgettext@plt>
   16868:	mov	r1, r6
   1686c:	mov	r2, #5
   16870:	mov	r4, r0
   16874:	mov	r0, #0
   16878:	bl	11ec4 <dcgettext@plt>
   1687c:	mov	r6, r0
   16880:	mov	r0, r5
   16884:	bl	20e80 <__assert_fail@plt+0xeb60>
   16888:	mov	r2, r4
   1688c:	mov	r3, r6
   16890:	mov	r1, #0
   16894:	str	r0, [sp]
   16898:	mov	r0, #2
   1689c:	bl	12020 <error@plt>
   168a0:	bl	122fc <abort@plt>
   168a4:	andeq	lr, r0, r0, ror #25
   168a8:	ldr	r1, [pc, #44]	; 168dc <__assert_fail@plt+0x45bc>
   168ac:	mov	r2, #5
   168b0:	push	{r4, lr}
   168b4:	add	r1, pc, r1
   168b8:	mov	r4, r0
   168bc:	mov	r0, #0
   168c0:	bl	11ec4 <dcgettext@plt>
   168c4:	mov	r3, r4
   168c8:	mov	r1, #0
   168cc:	mov	r2, r0
   168d0:	mov	r0, #2
   168d4:	bl	12020 <error@plt>
   168d8:	bl	122fc <abort@plt>
   168dc:	andeq	lr, r0, ip, lsr #25
   168e0:	push	{r3, lr}
   168e4:	mov	r1, #40	; 0x28
   168e8:	bl	228c0 <__assert_fail@plt+0x105a0>
   168ec:	ldr	r3, [pc, #64]	; 16934 <__assert_fail@plt+0x4614>
   168f0:	add	r3, pc, r3
   168f4:	ldr	r2, [r3, #1356]	; 0x54c
   168f8:	cmp	r2, #0
   168fc:	bne	16908 <__assert_fail@plt+0x45e8>
   16900:	b	16928 <__assert_fail@plt+0x4608>
   16904:	mov	r2, r3
   16908:	ldr	r3, [r2, #36]	; 0x24
   1690c:	cmp	r3, #0
   16910:	bne	16904 <__assert_fail@plt+0x45e4>
   16914:	add	r2, r2, #36	; 0x24
   16918:	str	r0, [r2]
   1691c:	mov	r3, #0
   16920:	str	r3, [r0, #36]	; 0x24
   16924:	pop	{r3, pc}
   16928:	add	r2, r3, #1344	; 0x540
   1692c:	add	r2, r2, #12
   16930:	b	16918 <__assert_fail@plt+0x45f8>
   16934:	andeq	r1, r2, r8, lsr sl
   16938:	ldr	r2, [pc, #140]	; 169cc <__assert_fail@plt+0x46ac>
   1693c:	push	{r3, r4, r5, lr}
   16940:	add	r2, pc, r2
   16944:	mov	r4, r0
   16948:	ldr	r3, [r2, #1360]	; 0x550
   1694c:	ldr	r1, [r2, #1364]	; 0x554
   16950:	ldr	r0, [r2, #1368]	; 0x558
   16954:	cmp	r3, r1
   16958:	beq	16974 <__assert_fail@plt+0x4654>
   1695c:	ldr	r1, [pc, #108]	; 169d0 <__assert_fail@plt+0x46b0>
   16960:	add	r2, r3, #1
   16964:	str	r4, [r0, r3, lsl #2]
   16968:	add	r1, pc, r1
   1696c:	str	r2, [r1, #1360]	; 0x550
   16970:	pop	{r3, r4, r5, pc}
   16974:	cmp	r0, #0
   16978:	beq	169b4 <__assert_fail@plt+0x4694>
   1697c:	movw	r2, #43689	; 0xaaa9
   16980:	movt	r2, #10922	; 0x2aaa
   16984:	cmp	r3, r2
   16988:	addls	r2, r3, #1
   1698c:	addls	r3, r3, r2, lsr #1
   16990:	bhi	169c8 <__assert_fail@plt+0x46a8>
   16994:	lsl	r1, r3, #2
   16998:	ldr	r5, [pc, #52]	; 169d4 <__assert_fail@plt+0x46b4>
   1699c:	add	r5, pc, r5
   169a0:	str	r3, [r5, #1364]	; 0x554
   169a4:	bl	22744 <__assert_fail@plt+0x10424>
   169a8:	ldr	r3, [r5, #1360]	; 0x550
   169ac:	str	r0, [r5, #1368]	; 0x558
   169b0:	b	1695c <__assert_fail@plt+0x463c>
   169b4:	cmp	r3, #0
   169b8:	moveq	r1, #64	; 0x40
   169bc:	moveq	r3, #16
   169c0:	beq	16998 <__assert_fail@plt+0x4678>
   169c4:	b	16994 <__assert_fail@plt+0x4674>
   169c8:	bl	22900 <__assert_fail@plt+0x105e0>
   169cc:	andeq	r1, r2, r8, ror #19
   169d0:	andeq	r1, r2, r0, asr #19
   169d4:	andeq	r1, r2, ip, lsl #19
   169d8:	push	{r3, r4, r5, r6, r7, lr}
   169dc:	mov	r5, r0
   169e0:	ldrb	r3, [r1]
   169e4:	ldr	r4, [pc, #256]	; 16aec <__assert_fail@plt+0x47cc>
   169e8:	cmp	r3, #114	; 0x72
   169ec:	add	r4, pc, r4
   169f0:	beq	16a70 <__assert_fail@plt+0x4750>
   169f4:	cmp	r3, #119	; 0x77
   169f8:	bne	16ac8 <__assert_fail@plt+0x47a8>
   169fc:	cmp	r0, #0
   16a00:	beq	16a1c <__assert_fail@plt+0x46fc>
   16a04:	mov	r0, #1
   16a08:	mov	r2, #0
   16a0c:	mov	r3, #0
   16a10:	bl	11e94 <ftruncate64@plt>
   16a14:	cmp	r0, #0
   16a18:	bne	16a30 <__assert_fail@plt+0x4710>
   16a1c:	ldr	r3, [pc, #204]	; 16af0 <__assert_fail@plt+0x47d0>
   16a20:	ldr	r3, [r4, r3]
   16a24:	ldr	r4, [r3]
   16a28:	mov	r0, r4
   16a2c:	pop	{r3, r4, r5, r6, r7, pc}
   16a30:	bl	1211c <__errno_location@plt>
   16a34:	ldr	r1, [pc, #184]	; 16af4 <__assert_fail@plt+0x47d4>
   16a38:	mov	r2, #5
   16a3c:	add	r1, pc, r1
   16a40:	ldr	r6, [r0]
   16a44:	mov	r0, #0
   16a48:	bl	11ec4 <dcgettext@plt>
   16a4c:	mov	r7, r0
   16a50:	mov	r0, r5
   16a54:	bl	20e80 <__assert_fail@plt+0xeb60>
   16a58:	mov	r1, r6
   16a5c:	mov	r2, r7
   16a60:	mov	r3, r0
   16a64:	mov	r0, #2
   16a68:	bl	12020 <error@plt>
   16a6c:	b	16a1c <__assert_fail@plt+0x46fc>
   16a70:	ldrb	r3, [r0]
   16a74:	cmp	r3, #45	; 0x2d
   16a78:	bne	16ab8 <__assert_fail@plt+0x4798>
   16a7c:	ldrb	r3, [r0, #1]
   16a80:	cmp	r3, #0
   16a84:	bne	16ab8 <__assert_fail@plt+0x4798>
   16a88:	ldr	r2, [pc, #104]	; 16af8 <__assert_fail@plt+0x47d8>
   16a8c:	mov	r1, #1
   16a90:	ldr	r3, [pc, #100]	; 16afc <__assert_fail@plt+0x47dc>
   16a94:	add	r2, pc, r2
   16a98:	strb	r1, [r2, #1372]	; 0x55c
   16a9c:	ldr	r3, [r4, r3]
   16aa0:	ldr	r4, [r3]
   16aa4:	mov	r0, r4
   16aa8:	mov	r1, #2
   16aac:	bl	1d704 <__assert_fail@plt+0xb3e4>
   16ab0:	mov	r0, r4
   16ab4:	pop	{r3, r4, r5, r6, r7, pc}
   16ab8:	mov	r0, r5
   16abc:	bl	1db64 <__assert_fail@plt+0xb844>
   16ac0:	mov	r4, r0
   16ac4:	b	16aa4 <__assert_fail@plt+0x4784>
   16ac8:	ldr	r3, [pc, #48]	; 16b00 <__assert_fail@plt+0x47e0>
   16acc:	movw	r2, #1036	; 0x40c
   16ad0:	ldr	r0, [pc, #44]	; 16b04 <__assert_fail@plt+0x47e4>
   16ad4:	ldr	r1, [pc, #44]	; 16b08 <__assert_fail@plt+0x47e8>
   16ad8:	add	r3, pc, r3
   16adc:	add	r0, pc, r0
   16ae0:	add	r3, r3, #256	; 0x100
   16ae4:	add	r1, pc, r1
   16ae8:	bl	12320 <__assert_fail@plt>
   16aec:	andeq	r1, r2, ip, lsl #12
   16af0:	andeq	r0, r0, r0, asr #4
   16af4:	andeq	lr, r0, r4, asr #22
   16af8:	muleq	r2, r4, r8
   16afc:	andeq	r0, r0, ip, lsr r2
   16b00:	andeq	lr, r0, r8, asr #16
   16b04:			; <UNDEFINED> instruction: 0x0000eabc
   16b08:	andeq	lr, r0, r0, ror #21
   16b0c:	push	{r3, r4, r5, lr}
   16b10:	mov	r2, #0
   16b14:	mov	r5, r1
   16b18:	rsb	r1, r0, r1
   16b1c:	mov	r4, r0
   16b20:	bl	1f0b4 <__assert_fail@plt+0xcd94>
   16b24:	cmp	r5, r4
   16b28:	popls	{r3, r4, r5, pc}
   16b2c:	ldrb	r3, [r4], #1
   16b30:	cmp	r3, #9
   16b34:	addeq	r0, r0, #1
   16b38:	cmp	r4, r5
   16b3c:	bne	16b2c <__assert_fail@plt+0x480c>
   16b40:	pop	{r3, r4, r5, pc}
   16b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b48:	mov	r6, r0
   16b4c:	ldr	r4, [pc, #1188]	; 16ff8 <__assert_fail@plt+0x4cd8>
   16b50:	subs	r8, r2, #0
   16b54:	ldr	r0, [pc, #1184]	; 16ffc <__assert_fail@plt+0x4cdc>
   16b58:	sub	sp, sp, #44	; 0x2c
   16b5c:	add	r4, pc, r4
   16b60:	ldr	r5, [r6]
   16b64:	ldr	fp, [r6, #4]
   16b68:	mov	r3, r1
   16b6c:	ldr	r0, [r4, r0]
   16b70:	add	r7, r5, fp
   16b74:	ldr	r2, [r0]
   16b78:	str	r0, [sp, #4]
   16b7c:	str	r2, [sp, #36]	; 0x24
   16b80:	beq	16bd0 <__assert_fail@plt+0x48b0>
   16b84:	ldr	r2, [pc, #1140]	; 17000 <__assert_fail@plt+0x4ce0>
   16b88:	add	r2, pc, r2
   16b8c:	ldrb	r2, [r2]
   16b90:	strb	r2, [r7, #-1]
   16b94:	mov	r0, r5
   16b98:	mov	r1, #1
   16b9c:	mov	r2, fp
   16ba0:	bl	11ea0 <fwrite_unlocked@plt>
   16ba4:	cmp	fp, r0
   16ba8:	moveq	r3, #0
   16bac:	strbeq	r3, [r7, #-1]
   16bb0:	bne	16fdc <__assert_fail@plt+0x4cbc>
   16bb4:	ldr	ip, [sp, #4]
   16bb8:	ldr	r2, [sp, #36]	; 0x24
   16bbc:	ldr	r3, [ip]
   16bc0:	cmp	r2, r3
   16bc4:	bne	16fd8 <__assert_fail@plt+0x4cb8>
   16bc8:	add	sp, sp, #44	; 0x2c
   16bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bd0:	ldr	r2, [pc, #1068]	; 17004 <__assert_fail@plt+0x4ce4>
   16bd4:	add	r2, pc, r2
   16bd8:	ldrb	r2, [r2, #1373]	; 0x55d
   16bdc:	cmp	r2, #0
   16be0:	beq	16f6c <__assert_fail@plt+0x4c4c>
   16be4:	cmp	r5, r7
   16be8:	bcs	16f98 <__assert_fail@plt+0x4c78>
   16bec:	mov	r8, r1
   16bf0:	ldrb	r1, [r5], #1
   16bf4:	cmp	r1, #9
   16bf8:	moveq	r1, #62	; 0x3e
   16bfc:	beq	16c08 <__assert_fail@plt+0x48e8>
   16c00:	cmp	r5, r7
   16c04:	moveq	r1, #10
   16c08:	ldr	r2, [r8, #20]
   16c0c:	ldr	r3, [r8, #24]
   16c10:	cmp	r2, r3
   16c14:	addcc	r3, r2, #1
   16c18:	strcc	r3, [r8, #20]
   16c1c:	strbcc	r1, [r2]
   16c20:	bcs	16fac <__assert_fail@plt+0x4c8c>
   16c24:	cmp	r5, r7
   16c28:	bne	16bf0 <__assert_fail@plt+0x48d0>
   16c2c:	ldm	r6, {r9, fp}
   16c30:	ldr	r3, [pc, #976]	; 17008 <__assert_fail@plt+0x4ce8>
   16c34:	ldr	r8, [pc, #976]	; 1700c <__assert_fail@plt+0x4cec>
   16c38:	add	r3, pc, r3
   16c3c:	ldr	ip, [pc, #972]	; 17010 <__assert_fail@plt+0x4cf0>
   16c40:	ldr	sl, [pc, #972]	; 17014 <__assert_fail@plt+0x4cf4>
   16c44:	add	r8, pc, r8
   16c48:	ldr	r5, [r3, #1356]	; 0x54c
   16c4c:	add	ip, pc, ip
   16c50:	ldr	r3, [pc, #960]	; 17018 <__assert_fail@plt+0x4cf8>
   16c54:	add	sl, pc, sl
   16c58:	str	ip, [sp, #12]
   16c5c:	add	r3, pc, r3
   16c60:	ldr	ip, [pc, #948]	; 1701c <__assert_fail@plt+0x4cfc>
   16c64:	str	r3, [sp, #16]
   16c68:	ldr	r3, [pc, #944]	; 17020 <__assert_fail@plt+0x4d00>
   16c6c:	add	ip, pc, ip
   16c70:	str	ip, [sp, #20]
   16c74:	add	r3, pc, r3
   16c78:	str	r3, [sp, #8]
   16c7c:	cmp	r5, #0
   16c80:	sub	fp, fp, #1
   16c84:	add	fp, r9, fp
   16c88:	str	r9, [sp, #28]
   16c8c:	beq	16f58 <__assert_fail@plt+0x4c38>
   16c90:	ldr	r3, [r5]
   16c94:	cmn	r3, #1
   16c98:	beq	16cb4 <__assert_fail@plt+0x4994>
   16c9c:	ldr	ip, [sp, #8]
   16ca0:	mov	r0, r6
   16ca4:	mov	r1, r5
   16ca8:	ldr	r3, [ip, #1376]	; 0x560
   16cac:	blx	r3
   16cb0:	str	r0, [sp, #28]
   16cb4:	ldr	r3, [r5, #8]
   16cb8:	cmn	r3, #1
   16cbc:	beq	16cd4 <__assert_fail@plt+0x49b4>
   16cc0:	ldr	r3, [sl, #1380]	; 0x564
   16cc4:	mov	r0, r6
   16cc8:	mov	r1, r5
   16ccc:	blx	r3
   16cd0:	mov	fp, r0
   16cd4:	ldrb	r3, [r5, #24]
   16cd8:	cmp	r3, #0
   16cdc:	bne	16d10 <__assert_fail@plt+0x49f0>
   16ce0:	ldrb	r3, [r5, #30]
   16ce4:	cmp	r3, #0
   16ce8:	bne	16d10 <__assert_fail@plt+0x49f0>
   16cec:	ldrb	r3, [r5, #26]
   16cf0:	cmp	r3, #0
   16cf4:	bne	16d10 <__assert_fail@plt+0x49f0>
   16cf8:	ldrb	r3, [r5, #28]
   16cfc:	cmp	r3, #0
   16d00:	bne	16d10 <__assert_fail@plt+0x49f0>
   16d04:	ldrb	r3, [r5, #29]
   16d08:	cmp	r3, #0
   16d0c:	beq	16dfc <__assert_fail@plt+0x4adc>
   16d10:	ldrb	r7, [fp]
   16d14:	mov	r2, #0
   16d18:	add	r0, sp, #28
   16d1c:	ldr	r3, [r8, #1192]	; 0x4a8
   16d20:	strb	r2, [fp]
   16d24:	mov	r1, fp
   16d28:	blx	r3
   16d2c:	ldr	r0, [sp, #28]
   16d30:	cmp	fp, r0
   16d34:	str	r0, [sp, #32]
   16d38:	bcc	16ef4 <__assert_fail@plt+0x4bd4>
   16d3c:	ldrb	r3, [r5, #30]
   16d40:	cmp	r3, #0
   16d44:	bne	16f44 <__assert_fail@plt+0x4c24>
   16d48:	ldrb	r3, [r5, #28]
   16d4c:	cmp	r3, #0
   16d50:	bne	16f60 <__assert_fail@plt+0x4c40>
   16d54:	ldrb	r3, [r5, #26]
   16d58:	cmp	r3, #0
   16d5c:	bne	16d6c <__assert_fail@plt+0x4a4c>
   16d60:	ldrb	r3, [r5, #29]
   16d64:	cmp	r3, #0
   16d68:	beq	16ef4 <__assert_fail@plt+0x4bd4>
   16d6c:	cmp	fp, r0
   16d70:	movls	r2, #0
   16d74:	bls	16d88 <__assert_fail@plt+0x4a68>
   16d78:	ldrb	r2, [r0]
   16d7c:	subs	r3, r2, #45	; 0x2d
   16d80:	rsbs	r2, r3, #0
   16d84:	adcs	r2, r2, r3
   16d88:	ldr	r3, [sp, #12]
   16d8c:	add	r2, r0, r2
   16d90:	mov	r0, #0
   16d94:	ldr	lr, [r3, #280]	; 0x118
   16d98:	ldrb	r3, [r2], #1
   16d9c:	sub	r1, r3, #48	; 0x30
   16da0:	cmp	r1, #9
   16da4:	bls	16eec <__assert_fail@plt+0x4bcc>
   16da8:	cmp	r3, lr
   16dac:	beq	16d98 <__assert_fail@plt+0x4a78>
   16db0:	ldr	ip, [sp, #16]
   16db4:	ldr	r1, [ip, #284]	; 0x11c
   16db8:	cmp	r3, r1
   16dbc:	beq	16ed8 <__assert_fail@plt+0x4bb8>
   16dc0:	cmp	r0, #0
   16dc4:	beq	16df4 <__assert_fail@plt+0x4ad4>
   16dc8:	ldrb	r1, [r5, #29]
   16dcc:	cmp	r1, #0
   16dd0:	mvneq	r3, #0
   16dd4:	beq	16dec <__assert_fail@plt+0x4acc>
   16dd8:	ldr	ip, [sp, #20]
   16ddc:	ldrb	r3, [ip, r3]
   16de0:	cmp	r3, #0
   16de4:	movne	r3, #0
   16de8:	mvneq	r3, #0
   16dec:	add	r2, r2, r3
   16df0:	str	r2, [sp, #32]
   16df4:	strb	r7, [fp]
   16df8:	ldr	fp, [sp, #32]
   16dfc:	ldr	r1, [sp, #28]
   16e00:	mov	r0, r9
   16e04:	mov	r9, #32
   16e08:	bl	16b0c <__assert_fail@plt+0x47ec>
   16e0c:	mov	r1, fp
   16e10:	mov	r7, r0
   16e14:	ldr	r0, [sp, #28]
   16e18:	bl	16b0c <__assert_fail@plt+0x47ec>
   16e1c:	mov	fp, r0
   16e20:	b	16e50 <__assert_fail@plt+0x4b30>
   16e24:	ldr	r3, [pc, #504]	; 17024 <__assert_fail@plt+0x4d04>
   16e28:	ldr	r3, [r4, r3]
   16e2c:	ldr	r0, [r3]
   16e30:	ldr	r3, [r0, #20]
   16e34:	ldr	r2, [r0, #24]
   16e38:	cmp	r3, r2
   16e3c:	addcc	r2, r3, #1
   16e40:	strcc	r2, [r0, #20]
   16e44:	strbcc	r9, [r3]
   16e48:	bcs	16f80 <__assert_fail@plt+0x4c60>
   16e4c:	sub	r7, r7, #1
   16e50:	cmp	r7, #0
   16e54:	bne	16e24 <__assert_fail@plt+0x4b04>
   16e58:	cmp	fp, #0
   16e5c:	beq	16efc <__assert_fail@plt+0x4bdc>
   16e60:	ldr	r2, [pc, #444]	; 17024 <__assert_fail@plt+0x4d04>
   16e64:	mov	r9, #95	; 0x5f
   16e68:	ldr	r7, [r4, r2]
   16e6c:	ldr	r0, [r7]
   16e70:	ldr	r3, [r0, #20]
   16e74:	ldr	r2, [r0, #24]
   16e78:	cmp	r3, r2
   16e7c:	addcc	r2, r3, #1
   16e80:	strcc	r2, [r0, #20]
   16e84:	strbcc	r9, [r3]
   16e88:	bcs	16f8c <__assert_fail@plt+0x4c6c>
   16e8c:	subs	fp, fp, #1
   16e90:	bne	16e6c <__assert_fail@plt+0x4b4c>
   16e94:	ldr	r0, [r7]
   16e98:	ldr	r2, [r0, #24]
   16e9c:	ldr	r3, [r0, #20]
   16ea0:	cmp	r3, r2
   16ea4:	addcc	r2, r3, #1
   16ea8:	strcc	r2, [r0, #20]
   16eac:	movcc	r2, #10
   16eb0:	strbcc	r2, [r3]
   16eb4:	bcs	16fa0 <__assert_fail@plt+0x4c80>
   16eb8:	cmp	r5, #0
   16ebc:	beq	16bb4 <__assert_fail@plt+0x4894>
   16ec0:	ldr	r5, [r5, #36]	; 0x24
   16ec4:	cmp	r5, #0
   16ec8:	beq	16f20 <__assert_fail@plt+0x4c00>
   16ecc:	ldm	r6, {r9, fp}
   16ed0:	b	16c7c <__assert_fail@plt+0x495c>
   16ed4:	mov	r0, #1
   16ed8:	ldrb	r3, [r2], #1
   16edc:	sub	r1, r3, #48	; 0x30
   16ee0:	cmp	r1, #9
   16ee4:	bls	16ed4 <__assert_fail@plt+0x4bb4>
   16ee8:	b	16dc0 <__assert_fail@plt+0x4aa0>
   16eec:	mov	r0, #1
   16ef0:	b	16d98 <__assert_fail@plt+0x4a78>
   16ef4:	str	fp, [sp, #32]
   16ef8:	b	16df4 <__assert_fail@plt+0x4ad4>
   16efc:	ldr	r1, [pc, #292]	; 17028 <__assert_fail@plt+0x4d08>
   16f00:	mov	r0, fp
   16f04:	mov	r2, #5
   16f08:	add	r1, pc, r1
   16f0c:	bl	11ec4 <dcgettext@plt>
   16f10:	mov	r1, r0
   16f14:	mov	r0, #1
   16f18:	bl	12188 <__printf_chk@plt>
   16f1c:	b	16eb8 <__assert_fail@plt+0x4b98>
   16f20:	ldr	r3, [pc, #260]	; 1702c <__assert_fail@plt+0x4d0c>
   16f24:	add	r3, pc, r3
   16f28:	ldrb	r2, [r3, #1388]	; 0x56c
   16f2c:	cmp	r2, #0
   16f30:	bne	16bb4 <__assert_fail@plt+0x4894>
   16f34:	ldrb	r3, [r3, #1389]	; 0x56d
   16f38:	cmp	r3, #0
   16f3c:	beq	16ecc <__assert_fail@plt+0x4bac>
   16f40:	b	16bb4 <__assert_fail@plt+0x4894>
   16f44:	ldr	r3, [r8, #1384]	; 0x568
   16f48:	rsb	r1, r0, fp
   16f4c:	add	r2, sp, #32
   16f50:	blx	r3
   16f54:	b	16df4 <__assert_fail@plt+0x4ad4>
   16f58:	mov	r1, r9
   16f5c:	b	16e00 <__assert_fail@plt+0x4ae0>
   16f60:	add	r1, sp, #32
   16f64:	bl	11e88 <strtold@plt>
   16f68:	b	16df4 <__assert_fail@plt+0x4ad4>
   16f6c:	ldr	r2, [pc, #188]	; 17030 <__assert_fail@plt+0x4d10>
   16f70:	add	r2, pc, r2
   16f74:	ldrb	r2, [r2]
   16f78:	strb	r2, [r7, #-1]
   16f7c:	b	16b94 <__assert_fail@plt+0x4874>
   16f80:	mov	r1, #32
   16f84:	bl	12200 <__overflow@plt>
   16f88:	b	16e4c <__assert_fail@plt+0x4b2c>
   16f8c:	mov	r1, #95	; 0x5f
   16f90:	bl	12200 <__overflow@plt>
   16f94:	b	16e8c <__assert_fail@plt+0x4b6c>
   16f98:	mov	r9, r5
   16f9c:	b	16c30 <__assert_fail@plt+0x4910>
   16fa0:	mov	r1, #10
   16fa4:	bl	12200 <__overflow@plt>
   16fa8:	b	16eb8 <__assert_fail@plt+0x4b98>
   16fac:	mov	r0, r8
   16fb0:	bl	12200 <__overflow@plt>
   16fb4:	cmn	r0, #1
   16fb8:	bne	16c24 <__assert_fail@plt+0x4904>
   16fbc:	ldr	r1, [pc, #112]	; 17034 <__assert_fail@plt+0x4d14>
   16fc0:	mov	r0, #0
   16fc4:	mov	r2, #5
   16fc8:	add	r1, pc, r1
   16fcc:	bl	11ec4 <dcgettext@plt>
   16fd0:	mov	r1, #0
   16fd4:	bl	15e40 <__assert_fail@plt+0x3b20>
   16fd8:	bl	11ed0 <__stack_chk_fail@plt>
   16fdc:	ldr	r1, [pc, #84]	; 17038 <__assert_fail@plt+0x4d18>
   16fe0:	mov	r0, #0
   16fe4:	mov	r2, #5
   16fe8:	add	r1, pc, r1
   16fec:	bl	11ec4 <dcgettext@plt>
   16ff0:	mov	r1, r8
   16ff4:	bl	15e40 <__assert_fail@plt+0x3b20>
   16ff8:	muleq	r2, ip, r4
   16ffc:	andeq	r0, r0, ip, lsl r2
   17000:	ldrdeq	r1, [r2], -r0
   17004:	andeq	r1, r2, r4, asr r7
   17008:	strdeq	r1, [r2], -r0
   1700c:	andeq	r1, r2, r4, ror #13
   17010:	ldrdeq	r1, [r2], -ip
   17014:	ldrdeq	r1, [r2], -r4
   17018:	andeq	r1, r2, ip, asr #13
   1701c:			; <UNDEFINED> instruction: 0x0000e6b4
   17020:			; <UNDEFINED> instruction: 0x000216b4
   17024:	andeq	r0, r0, r0, asr #4
   17028:	ldrdeq	lr, [r0], -r8
   1702c:	andeq	r1, r2, r4, lsl #8
   17030:	andeq	r1, r2, r8, ror #5
   17034:	andeq	lr, r0, r8, lsl #12
   17038:	andeq	lr, r0, r8, ror #11
   1703c:	ldr	r3, [pc, #300]	; 17170 <__assert_fail@plt+0x4e50>
   17040:	ldr	ip, [pc, #300]	; 17174 <__assert_fail@plt+0x4e54>
   17044:	add	r3, pc, r3
   17048:	push	{r4, r5, r6, lr}
   1704c:	subs	r5, r0, #0
   17050:	ldr	r4, [r3, ip]
   17054:	sub	sp, sp, #24
   17058:	movne	r0, r5
   1705c:	mvneq	r0, #0
   17060:	movne	r2, #0
   17064:	moveq	r2, #1
   17068:	add	r1, sp, #4
   1706c:	ldr	r3, [r4]
   17070:	str	r3, [sp, #20]
   17074:	bl	11fcc <waitpid@plt>
   17078:	subs	r6, r0, #0
   1707c:	blt	17130 <__assert_fail@plt+0x4e10>
   17080:	beq	170e8 <__assert_fail@plt+0x4dc8>
   17084:	cmp	r5, #0
   17088:	ble	17104 <__assert_fail@plt+0x4de4>
   1708c:	ldr	r3, [sp, #4]
   17090:	tst	r3, #127	; 0x7f
   17094:	bne	170a4 <__assert_fail@plt+0x4d84>
   17098:	ubfx	r3, r3, #8, #8
   1709c:	cmp	r3, #0
   170a0:	beq	170d4 <__assert_fail@plt+0x4db4>
   170a4:	ldr	r1, [pc, #204]	; 17178 <__assert_fail@plt+0x4e58>
   170a8:	mov	r2, #5
   170ac:	mov	r0, #0
   170b0:	add	r1, pc, r1
   170b4:	bl	11ec4 <dcgettext@plt>
   170b8:	ldr	r3, [pc, #188]	; 1717c <__assert_fail@plt+0x4e5c>
   170bc:	mov	r1, #0
   170c0:	add	r3, pc, r3
   170c4:	ldr	r3, [r3, #1392]	; 0x570
   170c8:	mov	r2, r0
   170cc:	mov	r0, #2
   170d0:	bl	12020 <error@plt>
   170d4:	ldr	r3, [pc, #164]	; 17180 <__assert_fail@plt+0x4e60>
   170d8:	add	r3, pc, r3
   170dc:	ldr	r2, [r3, #1400]	; 0x578
   170e0:	sub	r2, r2, #1
   170e4:	str	r2, [r3, #1400]	; 0x578
   170e8:	ldr	r2, [sp, #20]
   170ec:	mov	r0, r6
   170f0:	ldr	r3, [r4]
   170f4:	cmp	r2, r3
   170f8:	bne	1716c <__assert_fail@plt+0x4e4c>
   170fc:	add	sp, sp, #24
   17100:	pop	{r4, r5, r6, pc}
   17104:	ldr	r3, [pc, #120]	; 17184 <__assert_fail@plt+0x4e64>
   17108:	add	r1, sp, #8
   1710c:	str	r6, [sp, #12]
   17110:	add	r3, pc, r3
   17114:	ldr	r0, [r3, #1396]	; 0x574
   17118:	bl	1ebe8 <__assert_fail@plt+0xc8c8>
   1711c:	cmp	r0, #0
   17120:	beq	170e8 <__assert_fail@plt+0x4dc8>
   17124:	mov	r3, #2
   17128:	strb	r3, [r0, #8]
   1712c:	b	1708c <__assert_fail@plt+0x4d6c>
   17130:	bl	1211c <__errno_location@plt>
   17134:	ldr	r1, [pc, #76]	; 17188 <__assert_fail@plt+0x4e68>
   17138:	mov	r2, #5
   1713c:	add	r1, pc, r1
   17140:	ldr	r5, [r0]
   17144:	mov	r0, #0
   17148:	bl	11ec4 <dcgettext@plt>
   1714c:	ldr	r3, [pc, #56]	; 1718c <__assert_fail@plt+0x4e6c>
   17150:	add	r3, pc, r3
   17154:	mov	r1, r5
   17158:	ldr	r3, [r3, #1392]	; 0x570
   1715c:	mov	r2, r0
   17160:	mov	r0, #2
   17164:	bl	12020 <error@plt>
   17168:	b	170e8 <__assert_fail@plt+0x4dc8>
   1716c:	bl	11ed0 <__stack_chk_fail@plt>
   17170:			; <UNDEFINED> instruction: 0x00020fb4
   17174:	andeq	r0, r0, ip, lsl r2
   17178:	andeq	lr, r0, r8, asr r5
   1717c:	andeq	r1, r2, r8, ror #4
   17180:	andeq	r1, r2, r0, asr r2
   17184:	andeq	r1, r2, r8, lsl r2
   17188:			; <UNDEFINED> instruction: 0x0000e4b8
   1718c:	ldrdeq	r1, [r2], -r8
   17190:	push	{r4, lr}
   17194:	ldr	r4, [pc, #32]	; 171bc <__assert_fail@plt+0x4e9c>
   17198:	add	r4, pc, r4
   1719c:	ldr	r3, [r4, #1400]	; 0x578
   171a0:	mov	r0, #0
   171a4:	cmp	r3, r0
   171a8:	pople	{r4, pc}
   171ac:	bl	1703c <__assert_fail@plt+0x4d1c>
   171b0:	cmp	r0, #0
   171b4:	bne	1719c <__assert_fail@plt+0x4e7c>
   171b8:	pop	{r4, pc}
   171bc:	muleq	r2, r0, r1
   171c0:	ldr	r3, [pc, #440]	; 17380 <__assert_fail@plt+0x5060>
   171c4:	ldr	r2, [pc, #440]	; 17384 <__assert_fail@plt+0x5064>
   171c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171cc:	vpush	{d8}
   171d0:	add	r3, pc, r3
   171d4:	sub	sp, sp, #292	; 0x124
   171d8:	mov	r4, r1
   171dc:	str	r0, [sp, #12]
   171e0:	ldr	r2, [r3, r2]
   171e4:	ldr	r3, [r2]
   171e8:	str	r2, [sp, #8]
   171ec:	str	r3, [sp, #284]	; 0x11c
   171f0:	bl	121dc <pipe@plt>
   171f4:	cmp	r0, #0
   171f8:	blt	17374 <__assert_fail@plt+0x5054>
   171fc:	ldr	r2, [pc, #388]	; 17388 <__assert_fail@plt+0x5068>
   17200:	ldr	r3, [pc, #388]	; 1738c <__assert_fail@plt+0x506c>
   17204:	add	r2, pc, r2
   17208:	add	r3, pc, r3
   1720c:	ldr	r2, [r2, #4]
   17210:	ldr	r3, [r3, #1400]	; 0x578
   17214:	add	r2, r2, #1
   17218:	cmp	r2, r3
   1721c:	bcc	1734c <__assert_fail@plt+0x502c>
   17220:	cmp	r4, #0
   17224:	beq	172f8 <__assert_fail@plt+0x4fd8>
   17228:	add	r3, sp, #156	; 0x9c
   1722c:	str	r3, [sp, #4]
   17230:	bl	1211c <__errno_location@plt>
   17234:	ldr	r5, [pc, #340]	; 17390 <__assert_fail@plt+0x5070>
   17238:	vmov.f64	d8, #80	; 0x3e800000  0.250
   1723c:	add	r8, sp, #20
   17240:	add	r5, pc, r5
   17244:	add	fp, sp, #152	; 0x98
   17248:	mov	r6, r0
   1724c:	b	1727c <__assert_fail@plt+0x4f5c>
   17250:	cmp	r7, #0
   17254:	str	sl, [r6]
   17258:	bge	172d8 <__assert_fail@plt+0x4fb8>
   1725c:	cmp	sl, #11
   17260:	bne	17344 <__assert_fail@plt+0x5024>
   17264:	vmov.f64	d0, d8
   17268:	bl	22ae4 <__assert_fail@plt+0x107c4>
   1726c:	bl	17190 <__assert_fail@plt+0x4e70>
   17270:	subs	r4, r4, #1
   17274:	vadd.f64	d8, d8, d8
   17278:	beq	17300 <__assert_fail@plt+0x4fe0>
   1727c:	mov	r0, r8
   17280:	bl	15ea4 <__assert_fail@plt+0x3b84>
   17284:	ldr	r9, [r5, #1188]	; 0x4a4
   17288:	mov	r1, #0
   1728c:	str	r1, [r5, #1188]	; 0x4a4
   17290:	bl	12224 <fork@plt>
   17294:	mov	r2, #132	; 0x84
   17298:	mov	r1, r8
   1729c:	ldr	sl, [r6]
   172a0:	subs	r7, r0, #0
   172a4:	mov	r0, fp
   172a8:	strne	r9, [r5, #1188]	; 0x4a4
   172ac:	bl	11e28 <memcpy@plt>
   172b0:	ldrb	r2, [sp, #152]	; 0x98
   172b4:	cmp	r2, #0
   172b8:	beq	17250 <__assert_fail@plt+0x4f30>
   172bc:	mov	r0, #2
   172c0:	add	r1, sp, #156	; 0x9c
   172c4:	mov	r2, #0
   172c8:	bl	11dc8 <sigprocmask@plt>
   172cc:	cmp	r7, #0
   172d0:	str	sl, [r6]
   172d4:	blt	1725c <__assert_fail@plt+0x4f3c>
   172d8:	beq	1735c <__assert_fail@plt+0x503c>
   172dc:	ldr	r3, [pc, #176]	; 17394 <__assert_fail@plt+0x5074>
   172e0:	mov	r0, r7
   172e4:	add	r3, pc, r3
   172e8:	ldr	r2, [r3, #1400]	; 0x578
   172ec:	add	r2, r2, #1
   172f0:	str	r2, [r3, #1400]	; 0x578
   172f4:	b	17324 <__assert_fail@plt+0x5004>
   172f8:	bl	1211c <__errno_location@plt>
   172fc:	mov	r6, r0
   17300:	ldr	r4, [r6]
   17304:	ldr	r3, [sp, #12]
   17308:	ldr	r0, [r3]
   1730c:	bl	12308 <close@plt>
   17310:	ldr	r3, [sp, #12]
   17314:	ldr	r0, [r3, #4]
   17318:	bl	12308 <close@plt>
   1731c:	mov	r0, r7
   17320:	str	r4, [r6]
   17324:	ldr	r1, [sp, #8]
   17328:	ldr	r2, [sp, #284]	; 0x11c
   1732c:	ldr	r3, [r1]
   17330:	cmp	r2, r3
   17334:	bne	1737c <__assert_fail@plt+0x505c>
   17338:	add	sp, sp, #292	; 0x124
   1733c:	vpop	{d8}
   17340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17344:	mov	r4, sl
   17348:	b	17304 <__assert_fail@plt+0x4fe4>
   1734c:	mvn	r0, #0
   17350:	bl	1703c <__assert_fail@plt+0x4d1c>
   17354:	bl	17190 <__assert_fail@plt+0x4e70>
   17358:	b	17220 <__assert_fail@plt+0x4f00>
   1735c:	mov	r0, r7
   17360:	bl	12308 <close@plt>
   17364:	mov	r0, #1
   17368:	bl	12308 <close@plt>
   1736c:	mov	r0, r7
   17370:	b	17324 <__assert_fail@plt+0x5004>
   17374:	mvn	r0, #0
   17378:	b	17324 <__assert_fail@plt+0x5004>
   1737c:	bl	11ed0 <__stack_chk_fail@plt>
   17380:	andeq	r0, r2, r8, lsr #28
   17384:	andeq	r0, r0, ip, lsl r2
   17388:	andeq	r1, r2, r4, asr r0
   1738c:	andeq	r1, r2, r0, lsr #2
   17390:	andeq	r1, r2, r8, ror #1
   17394:	andeq	r1, r2, r4, asr #32
   17398:	ldr	r3, [pc, #156]	; 1743c <__assert_fail@plt+0x511c>
   1739c:	ldr	r2, [pc, #156]	; 17440 <__assert_fail@plt+0x5120>
   173a0:	add	r3, pc, r3
   173a4:	push	{r4, r5, lr}
   173a8:	sub	sp, sp, #20
   173ac:	ldr	r3, [r3, r2]
   173b0:	mov	r5, r0
   173b4:	mov	r0, r1
   173b8:	mov	r4, r1
   173bc:	ldr	r3, [r3]
   173c0:	str	r3, [sp, #12]
   173c4:	bl	120e0 <strlen@plt>
   173c8:	mov	r1, r4
   173cc:	mov	r2, r0
   173d0:	mov	r0, #2
   173d4:	bl	12194 <write@plt>
   173d8:	cmp	r5, #0
   173dc:	bne	173fc <__assert_fail@plt+0x50dc>
   173e0:	ldr	r1, [pc, #92]	; 17444 <__assert_fail@plt+0x5124>
   173e4:	mov	r0, #2
   173e8:	mov	r2, #1
   173ec:	add	r1, pc, r1
   173f0:	bl	12194 <write@plt>
   173f4:	mov	r0, #2
   173f8:	bl	11e1c <_exit@plt>
   173fc:	mov	r1, sp
   17400:	mov	r0, r5
   17404:	bl	1ef7c <__assert_fail@plt+0xcc5c>
   17408:	ldr	r1, [pc, #56]	; 17448 <__assert_fail@plt+0x5128>
   1740c:	mov	r2, #8
   17410:	add	r1, pc, r1
   17414:	mov	r4, r0
   17418:	mov	r0, #2
   1741c:	bl	12194 <write@plt>
   17420:	mov	r0, r4
   17424:	bl	120e0 <strlen@plt>
   17428:	mov	r1, r4
   1742c:	mov	r2, r0
   17430:	mov	r0, #2
   17434:	bl	12194 <write@plt>
   17438:	b	173e0 <__assert_fail@plt+0x50c0>
   1743c:	andeq	r0, r2, r8, asr ip
   17440:	andeq	r0, r0, ip, lsl r2
   17444:	andeq	lr, r0, r0, lsr #19
   17448:	andeq	lr, r0, r8, lsl r2
   1744c:	push	{r4, r5, lr}
   17450:	mov	r4, r0
   17454:	ldr	r5, [pc, #96]	; 174bc <__assert_fail@plt+0x519c>
   17458:	sub	sp, sp, #12
   1745c:	add	r5, pc, r5
   17460:	ldr	r1, [r5, #1396]	; 0x574
   17464:	cmp	r1, #0
   17468:	movne	r0, r1
   1746c:	beq	17490 <__assert_fail@plt+0x5170>
   17470:	mov	r3, #1
   17474:	mov	r1, r4
   17478:	strb	r3, [r4, #8]
   1747c:	bl	1eb74 <__assert_fail@plt+0xc854>
   17480:	cmp	r0, #0
   17484:	beq	174b8 <__assert_fail@plt+0x5198>
   17488:	add	sp, sp, #12
   1748c:	pop	{r4, r5, pc}
   17490:	ldr	r2, [pc, #40]	; 174c0 <__assert_fail@plt+0x51a0>
   17494:	mov	r0, #47	; 0x2f
   17498:	ldr	r3, [pc, #36]	; 174c4 <__assert_fail@plt+0x51a4>
   1749c:	str	r1, [sp]
   174a0:	add	r2, pc, r2
   174a4:	add	r3, pc, r3
   174a8:	bl	1e54c <__assert_fail@plt+0xc22c>
   174ac:	cmp	r0, #0
   174b0:	str	r0, [r5, #1396]	; 0x574
   174b4:	bne	17470 <__assert_fail@plt+0x5150>
   174b8:	bl	22900 <__assert_fail@plt+0x105e0>
   174bc:	andeq	r0, r2, ip, asr #29
   174c0:			; <UNDEFINED> instruction: 0xffffe028
   174c4:			; <UNDEFINED> instruction: 0xffffe038
   174c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174cc:	mov	r9, r0
   174d0:	ldr	r4, [pc, #388]	; 1765c <__assert_fail@plt+0x533c>
   174d4:	mov	sl, r1
   174d8:	ldr	r3, [pc, #384]	; 17660 <__assert_fail@plt+0x5340>
   174dc:	sub	sp, sp, #276	; 0x114
   174e0:	add	r4, pc, r4
   174e4:	ldr	r0, [pc, #376]	; 17664 <__assert_fail@plt+0x5344>
   174e8:	add	r3, pc, r3
   174ec:	ldr	r1, [r4, #1404]	; 0x57c
   174f0:	ldr	r2, [r4, #1368]	; 0x558
   174f4:	ldr	r8, [r3, r0]
   174f8:	ldr	r7, [r2, r1, lsl #2]
   174fc:	ldr	r3, [r8]
   17500:	mov	r0, r7
   17504:	str	r3, [sp, #268]	; 0x10c
   17508:	bl	120e0 <strlen@plt>
   1750c:	mov	fp, r0
   17510:	add	r0, r0, #21
   17514:	bl	226ec <__assert_fail@plt+0x103cc>
   17518:	mov	r1, r7
   1751c:	mov	r2, fp
   17520:	add	r6, r0, #9
   17524:	mov	r5, r0
   17528:	mov	r0, r6
   1752c:	bl	11e28 <memcpy@plt>
   17530:	ldr	r3, [pc, #304]	; 17668 <__assert_fail@plt+0x5348>
   17534:	ldr	lr, [r4, #1404]	; 0x57c
   17538:	add	ip, r6, fp
   1753c:	add	r3, pc, r3
   17540:	add	lr, lr, #1
   17544:	str	lr, [r4, #1404]	; 0x57c
   17548:	ldm	r3!, {r0, r1, r2}
   1754c:	ldr	r3, [r4, #1360]	; 0x550
   17550:	cmp	lr, r3
   17554:	mov	r3, #0
   17558:	streq	r3, [r4, #1404]	; 0x57c
   1755c:	add	r4, sp, #4
   17560:	str	r0, [r6, fp]
   17564:	str	r1, [ip, #4]
   17568:	mov	r0, r4
   1756c:	str	r2, [ip, #8]
   17570:	str	r3, [r5]
   17574:	bl	15ea4 <__assert_fail@plt+0x3b84>
   17578:	mov	r0, r6
   1757c:	bl	21aec <__assert_fail@plt+0xf7cc>
   17580:	subs	r6, r0, #0
   17584:	blt	1759c <__assert_fail@plt+0x527c>
   17588:	ldr	r3, [pc, #220]	; 1766c <__assert_fail@plt+0x534c>
   1758c:	add	r3, pc, r3
   17590:	ldr	r2, [r3, #96]	; 0x60
   17594:	str	r5, [r3, #96]	; 0x60
   17598:	str	r5, [r2]
   1759c:	bl	1211c <__errno_location@plt>
   175a0:	mov	r1, r4
   175a4:	mov	r2, #132	; 0x84
   175a8:	mov	fp, r0
   175ac:	add	r0, sp, #136	; 0x88
   175b0:	ldr	r4, [fp]
   175b4:	bl	11e28 <memcpy@plt>
   175b8:	ldrb	r3, [sp, #136]	; 0x88
   175bc:	cmp	r3, #0
   175c0:	bne	175f0 <__assert_fail@plt+0x52d0>
   175c4:	cmp	r6, #0
   175c8:	str	r4, [fp]
   175cc:	blt	17604 <__assert_fail@plt+0x52e4>
   175d0:	ldr	r2, [sp, #268]	; 0x10c
   175d4:	mov	r0, r5
   175d8:	str	r6, [r9]
   175dc:	ldr	r3, [r8]
   175e0:	cmp	r2, r3
   175e4:	bne	17658 <__assert_fail@plt+0x5338>
   175e8:	add	sp, sp, #276	; 0x114
   175ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175f0:	add	r1, sp, #140	; 0x8c
   175f4:	mov	r2, #0
   175f8:	mov	r0, #2
   175fc:	bl	11dc8 <sigprocmask@plt>
   17600:	b	175c4 <__assert_fail@plt+0x52a4>
   17604:	cmp	sl, #0
   17608:	beq	17614 <__assert_fail@plt+0x52f4>
   1760c:	cmp	r4, #24
   17610:	beq	17648 <__assert_fail@plt+0x5328>
   17614:	ldr	r1, [pc, #84]	; 17670 <__assert_fail@plt+0x5350>
   17618:	mov	r2, #5
   1761c:	mov	r0, #0
   17620:	add	r1, pc, r1
   17624:	bl	11ec4 <dcgettext@plt>
   17628:	mov	sl, r0
   1762c:	mov	r0, r7
   17630:	bl	20e80 <__assert_fail@plt+0xeb60>
   17634:	mov	r2, sl
   17638:	mov	r1, r4
   1763c:	mov	r3, r0
   17640:	mov	r0, #2
   17644:	bl	12020 <error@plt>
   17648:	mov	r0, r5
   1764c:	mov	r5, #0
   17650:	bl	11dec <free@plt>
   17654:	b	175d0 <__assert_fail@plt+0x52b0>
   17658:	bl	11ed0 <__stack_chk_fail@plt>
   1765c:	andeq	r0, r2, r8, asr #28
   17660:	andeq	r0, r2, r0, lsl fp
   17664:	andeq	r0, r0, ip, lsl r2
   17668:	andeq	lr, r0, ip, lsl r1
   1766c:	andeq	r0, r2, r8, ror #25
   17670:	andeq	lr, r0, r4, lsl r0
   17674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17678:	sub	sp, sp, #12
   1767c:	mov	ip, r0
   17680:	mov	fp, r3
   17684:	ldrb	r0, [sp, #52]	; 0x34
   17688:	mov	r4, r1
   1768c:	ldr	r3, [sp, #48]	; 0x30
   17690:	mov	r6, r2
   17694:	cmp	r0, #0
   17698:	mov	r9, #0
   1769c:	lsl	r8, r3, #4
   176a0:	rsb	r8, r8, #0
   176a4:	beq	17748 <__assert_fail@plt+0x5428>
   176a8:	ldr	lr, [ip, #20]
   176ac:	add	r5, r2, r8
   176b0:	add	r0, ip, #8
   176b4:	lsr	r2, lr, #1
   176b8:	rsb	lr, r2, lr
   176bc:	sub	r6, r5, r2, lsl #4
   176c0:	str	r0, [r4, #16]
   176c4:	mov	r7, #0
   176c8:	str	r5, [r4, #8]
   176cc:	mov	r1, r7
   176d0:	str	r5, [r4]
   176d4:	add	r0, r4, #48	; 0x30
   176d8:	str	r6, [r4, #12]
   176dc:	add	sl, r4, #72	; 0x48
   176e0:	str	r6, [r4, #4]
   176e4:	str	r2, [r4, #20]
   176e8:	str	lr, [r4, #24]
   176ec:	str	ip, [r4, #28]
   176f0:	ldr	ip, [ip, #40]	; 0x28
   176f4:	strb	r9, [r4, #44]	; 0x2c
   176f8:	add	ip, ip, #1
   176fc:	str	ip, [r4, #40]	; 0x28
   17700:	bl	11e4c <pthread_mutex_init@plt>
   17704:	cmp	fp, #1
   17708:	bls	17764 <__assert_fail@plt+0x5444>
   1770c:	ldr	r3, [sp, #48]	; 0x30
   17710:	lsr	ip, fp, #1
   17714:	str	sl, [r4, #32]
   17718:	mov	r0, r4
   1771c:	mov	r1, sl
   17720:	mov	r2, r5
   17724:	str	r3, [sp]
   17728:	mov	r3, #1
   1772c:	str	r3, [sp, #4]
   17730:	mov	r3, ip
   17734:	rsb	fp, ip, fp
   17738:	bl	17674 <__assert_fail@plt+0x5354>
   1773c:	mov	ip, r4
   17740:	str	r0, [r4, #36]	; 0x24
   17744:	mov	r4, r0
   17748:	ldr	lr, [ip, #24]
   1774c:	add	r5, r6, r8
   17750:	add	r0, ip, #12
   17754:	lsr	r2, lr, #1
   17758:	rsb	lr, r2, lr
   1775c:	sub	r6, r5, r2, lsl #4
   17760:	b	176c0 <__assert_fail@plt+0x53a0>
   17764:	mov	r0, sl
   17768:	str	r7, [r4, #32]
   1776c:	str	r7, [r4, #36]	; 0x24
   17770:	add	sp, sp, #12
   17774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17778:	push	{r4, r5, r6, lr}
   1777c:	add	r6, r0, #4
   17780:	mov	r4, r0
   17784:	mov	r5, r1
   17788:	mov	r0, r6
   1778c:	bl	11df8 <pthread_mutex_lock@plt>
   17790:	ldr	r0, [r4], #32
   17794:	mov	r1, r5
   17798:	bl	1edc0 <__assert_fail@plt+0xcaa0>
   1779c:	mov	r0, r6
   177a0:	mov	r3, #1
   177a4:	strb	r3, [r5, #44]	; 0x2c
   177a8:	bl	11d14 <pthread_mutex_unlock@plt>
   177ac:	mov	r0, r4
   177b0:	pop	{r4, r5, r6, lr}
   177b4:	b	122f0 <pthread_cond_signal@plt>
   177b8:	ldr	r2, [r0, #40]	; 0x28
   177bc:	ldr	r3, [r1, #40]	; 0x28
   177c0:	cmp	r2, r3
   177c4:	beq	177d4 <__assert_fail@plt+0x54b4>
   177c8:	movcs	r0, #0
   177cc:	movcc	r0, #1
   177d0:	bx	lr
   177d4:	ldr	ip, [r0, #24]
   177d8:	ldr	r2, [r1, #24]
   177dc:	ldr	r0, [r0, #20]
   177e0:	ldr	r3, [r1, #20]
   177e4:	add	r0, ip, r0
   177e8:	add	r3, r2, r3
   177ec:	cmp	r0, r3
   177f0:	movcs	r0, #0
   177f4:	movcc	r0, #1
   177f8:	bx	lr
   177fc:	push	{r3, r4, r5, r6, r7, lr}
   17800:	mov	r6, r0
   17804:	ldr	r4, [pc, #228]	; 178f0 <__assert_fail@plt+0x55d0>
   17808:	mov	r5, r1
   1780c:	add	r4, pc, r4
   17810:	ldr	r3, [r4, #1356]	; 0x54c
   17814:	cmp	r3, #0
   17818:	beq	17844 <__assert_fail@plt+0x5524>
   1781c:	ldr	r3, [r4, #1408]	; 0x580
   17820:	blx	r3
   17824:	cmp	r0, #0
   17828:	popne	{r3, r4, r5, r6, r7, pc}
   1782c:	ldrb	r3, [r4, #1388]	; 0x56c
   17830:	cmp	r3, #0
   17834:	popne	{r3, r4, r5, r6, r7, pc}
   17838:	ldrb	r2, [r4, #1389]	; 0x56d
   1783c:	cmp	r2, #0
   17840:	bne	178dc <__assert_fail@plt+0x55bc>
   17844:	ldr	r1, [r6, #4]
   17848:	ldr	r3, [r5, #4]
   1784c:	subs	r7, r1, #1
   17850:	sub	r4, r3, #1
   17854:	bne	17878 <__assert_fail@plt+0x5558>
   17858:	subs	r0, r4, #0
   1785c:	mvnne	r0, #0
   17860:	ldr	r3, [pc, #140]	; 178f4 <__assert_fail@plt+0x55d4>
   17864:	add	r3, pc, r3
   17868:	ldrb	r3, [r3, #1412]	; 0x584
   1786c:	cmp	r3, #0
   17870:	rsbne	r0, r0, #0
   17874:	pop	{r3, r4, r5, r6, r7, pc}
   17878:	cmp	r4, #0
   1787c:	moveq	r0, #1
   17880:	beq	17860 <__assert_fail@plt+0x5540>
   17884:	ldr	r2, [pc, #108]	; 178f8 <__assert_fail@plt+0x55d8>
   17888:	add	r2, pc, r2
   1788c:	ldrb	r0, [r2, #1352]	; 0x548
   17890:	cmp	r0, #0
   17894:	ldr	r0, [r6]
   17898:	beq	178a8 <__assert_fail@plt+0x5588>
   1789c:	ldrb	r2, [r2, #1056]	; 0x420
   178a0:	cmp	r2, #0
   178a4:	beq	178e4 <__assert_fail@plt+0x55c4>
   178a8:	cmp	r4, r7
   178ac:	movcc	r2, r4
   178b0:	movcs	r2, r7
   178b4:	ldr	r1, [r5]
   178b8:	bl	11eac <memcmp@plt>
   178bc:	cmp	r0, #0
   178c0:	bne	17860 <__assert_fail@plt+0x5540>
   178c4:	cmp	r7, r4
   178c8:	mvncc	r0, #0
   178cc:	bcc	17860 <__assert_fail@plt+0x5540>
   178d0:	moveq	r0, #0
   178d4:	movne	r0, #1
   178d8:	b	17860 <__assert_fail@plt+0x5540>
   178dc:	mov	r0, r3
   178e0:	pop	{r3, r4, r5, r6, r7, pc}
   178e4:	ldr	r2, [r5]
   178e8:	bl	22a90 <__assert_fail@plt+0x10770>
   178ec:	b	17860 <__assert_fail@plt+0x5540>
   178f0:	andeq	r0, r2, ip, lsl fp
   178f4:	andeq	r0, r2, r4, asr #21
   178f8:	andeq	r0, r2, r0, lsr #21
   178fc:	cmp	r1, #2
   17900:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17904:	mov	r9, r0
   17908:	mov	r6, r2
   1790c:	mov	r4, r3
   17910:	beq	179bc <__assert_fail@plt+0x569c>
   17914:	lsr	r8, r1, #1
   17918:	cmp	r3, #0
   1791c:	rsb	r7, r8, r1
   17920:	lsl	r1, r8, #4
   17924:	rsb	r1, r1, #0
   17928:	add	r4, r0, r1
   1792c:	bne	17a34 <__assert_fail@plt+0x5714>
   17930:	mov	r0, r4
   17934:	mov	r1, r7
   17938:	bl	178fc <__assert_fail@plt+0x55dc>
   1793c:	cmp	r8, #1
   17940:	bls	17a94 <__assert_fail@plt+0x5774>
   17944:	mov	r0, r9
   17948:	mov	r1, r8
   1794c:	mov	r2, r6
   17950:	mov	r3, #1
   17954:	bl	178fc <__assert_fail@plt+0x55dc>
   17958:	mov	r3, r6
   1795c:	mov	r6, r9
   17960:	mov	r9, r3
   17964:	sub	r4, r4, #16
   17968:	sub	r5, r9, #16
   1796c:	b	17988 <__assert_fail@plt+0x5668>
   17970:	ldm	r4, {r0, r1, r2, r3}
   17974:	subs	r7, r7, #1
   17978:	sub	r4, r4, #16
   1797c:	stm	ip, {r0, r1, r2, r3}
   17980:	beq	17a70 <__assert_fail@plt+0x5750>
   17984:	mov	r6, ip
   17988:	mov	r0, r5
   1798c:	mov	r1, r4
   17990:	bl	177fc <__assert_fail@plt+0x54dc>
   17994:	sub	ip, r6, #16
   17998:	cmp	r0, #0
   1799c:	bgt	17970 <__assert_fail@plt+0x5650>
   179a0:	ldm	r5, {r0, r1, r2, r3}
   179a4:	subs	r8, r8, #1
   179a8:	mov	r9, r5
   179ac:	sub	r5, r5, #16
   179b0:	stm	ip, {r0, r1, r2, r3}
   179b4:	bne	17984 <__assert_fail@plt+0x5664>
   179b8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   179bc:	sub	r5, r0, #32
   179c0:	sub	r7, r0, #16
   179c4:	mov	r1, r5
   179c8:	mov	r0, r7
   179cc:	bl	177fc <__assert_fail@plt+0x54dc>
   179d0:	cmp	r0, #0
   179d4:	movle	r0, #0
   179d8:	movgt	r0, #1
   179dc:	cmp	r4, #0
   179e0:	bne	17a0c <__assert_fail@plt+0x56ec>
   179e4:	cmp	r0, #0
   179e8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   179ec:	ldm	r7, {r0, r1, r2, r3}
   179f0:	sub	r6, r6, #16
   179f4:	stm	r6, {r0, r1, r2, r3}
   179f8:	ldm	r5, {r0, r1, r2, r3}
   179fc:	stm	r7, {r0, r1, r2, r3}
   17a00:	ldm	r6, {r0, r1, r2, r3}
   17a04:	stm	r5, {r0, r1, r2, r3}
   17a08:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17a0c:	mvn	r3, r0
   17a10:	sub	r0, r0, #2
   17a14:	add	r3, r9, r3, lsl #4
   17a18:	sub	ip, r6, #32
   17a1c:	add	r9, r9, r0, lsl #4
   17a20:	ldm	r3, {r0, r1, r2, r3}
   17a24:	stmdb	r6, {r0, r1, r2, r3}
   17a28:	ldm	r9, {r0, r1, r2, r3}
   17a2c:	stm	ip, {r0, r1, r2, r3}
   17a30:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17a34:	add	r5, r2, r1
   17a38:	mov	r0, r4
   17a3c:	mov	r1, r7
   17a40:	mov	r3, #1
   17a44:	mov	r2, r5
   17a48:	bl	178fc <__assert_fail@plt+0x55dc>
   17a4c:	cmp	r8, #1
   17a50:	bls	17a68 <__assert_fail@plt+0x5748>
   17a54:	mov	r0, r9
   17a58:	mov	r1, r8
   17a5c:	mov	r2, r6
   17a60:	mov	r3, #0
   17a64:	bl	178fc <__assert_fail@plt+0x55dc>
   17a68:	mov	r4, r5
   17a6c:	b	17964 <__assert_fail@plt+0x5644>
   17a70:	mov	r5, r9
   17a74:	sub	r5, r5, #16
   17a78:	sub	r4, ip, #16
   17a7c:	subs	r8, r8, #1
   17a80:	ldm	r5, {r0, r1, r2, r3}
   17a84:	mov	ip, r4
   17a88:	stm	r4, {r0, r1, r2, r3}
   17a8c:	bne	17a74 <__assert_fail@plt+0x5754>
   17a90:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17a94:	ldmdb	r9, {r0, r1, r2, r3}
   17a98:	stmdb	r6, {r0, r1, r2, r3}
   17a9c:	b	17958 <__assert_fail@plt+0x5638>
   17aa0:	ldr	r3, [pc, #104]	; 17b10 <__assert_fail@plt+0x57f0>
   17aa4:	push	{r4, r5, r6, lr}
   17aa8:	add	r3, pc, r3
   17aac:	mov	r6, r1
   17ab0:	mov	r5, r2
   17ab4:	ldrb	ip, [r3, #1388]	; 0x56c
   17ab8:	mov	r4, r0
   17abc:	cmp	ip, #0
   17ac0:	beq	17afc <__assert_fail@plt+0x57dc>
   17ac4:	ldr	r2, [r3, #1416]	; 0x588
   17ac8:	cmp	r2, #0
   17acc:	beq	17ae4 <__assert_fail@plt+0x57c4>
   17ad0:	add	r1, r3, #1408	; 0x580
   17ad4:	add	r1, r1, #8
   17ad8:	bl	177fc <__assert_fail@plt+0x54dc>
   17adc:	cmp	r0, #0
   17ae0:	popeq	{r4, r5, r6, pc}
   17ae4:	ldr	ip, [pc, #40]	; 17b14 <__assert_fail@plt+0x57f4>
   17ae8:	ldm	r4, {r0, r1, r2, r3}
   17aec:	add	ip, pc, ip
   17af0:	add	ip, ip, #1408	; 0x580
   17af4:	add	ip, ip, #8
   17af8:	stm	ip, {r0, r1, r2, r3}
   17afc:	mov	r0, r4
   17b00:	mov	r1, r6
   17b04:	mov	r2, r5
   17b08:	pop	{r4, r5, r6, lr}
   17b0c:	b	16b44 <__assert_fail@plt+0x4824>
   17b10:	andeq	r0, r2, r0, lsl #17
   17b14:	andeq	r0, r2, ip, lsr r8
   17b18:	ldr	r3, [pc, #280]	; 17c38 <__assert_fail@plt+0x5918>
   17b1c:	ldr	r2, [pc, #280]	; 17c3c <__assert_fail@plt+0x591c>
   17b20:	add	r3, pc, r3
   17b24:	push	{r4, r5, r6, r7, lr}
   17b28:	vpush	{d8}
   17b2c:	sub	sp, sp, #36	; 0x24
   17b30:	ldr	r5, [r3, r2]
   17b34:	mov	r4, r1
   17b38:	mov	r1, sp
   17b3c:	mov	r6, r0
   17b40:	ldr	r3, [r5]
   17b44:	str	r3, [sp, #28]
   17b48:	bl	11e88 <strtold@plt>
   17b4c:	mov	r0, r4
   17b50:	add	r1, sp, #4
   17b54:	vmov.f64	d8, d0
   17b58:	bl	11e88 <strtold@plt>
   17b5c:	ldr	r3, [sp]
   17b60:	cmp	r6, r3
   17b64:	beq	17c24 <__assert_fail@plt+0x5904>
   17b68:	ldr	r3, [sp, #4]
   17b6c:	cmp	r4, r3
   17b70:	beq	17c1c <__assert_fail@plt+0x58fc>
   17b74:	vcmpe.f64	d8, d0
   17b78:	vmrs	APSR_nzcv, fpscr
   17b7c:	bpl	17ba0 <__assert_fail@plt+0x5880>
   17b80:	mvn	r0, #0
   17b84:	ldr	r2, [sp, #28]
   17b88:	ldr	r3, [r5]
   17b8c:	cmp	r2, r3
   17b90:	bne	17c34 <__assert_fail@plt+0x5914>
   17b94:	add	sp, sp, #36	; 0x24
   17b98:	vpop	{d8}
   17b9c:	pop	{r4, r5, r6, r7, pc}
   17ba0:	bgt	17c1c <__assert_fail@plt+0x58fc>
   17ba4:	vcmp.f64	d8, d0
   17ba8:	vmrs	APSR_nzcv, fpscr
   17bac:	moveq	r0, #0
   17bb0:	beq	17b84 <__assert_fail@plt+0x5864>
   17bb4:	vcmp.f64	d0, d0
   17bb8:	vmrs	APSR_nzcv, fpscr
   17bbc:	beq	17b80 <__assert_fail@plt+0x5860>
   17bc0:	vcmp.f64	d8, d8
   17bc4:	vmrs	APSR_nzcv, fpscr
   17bc8:	beq	17c1c <__assert_fail@plt+0x58fc>
   17bcc:	mov	r7, #0
   17bd0:	mov	r0, r6
   17bd4:	mov	r1, r7
   17bd8:	str	r7, [sp, #12]
   17bdc:	str	r7, [sp, #8]
   17be0:	bl	11e88 <strtold@plt>
   17be4:	mov	r0, r4
   17be8:	mov	r1, r7
   17bec:	str	r7, [sp, #16]
   17bf0:	add	r6, sp, #8
   17bf4:	str	r7, [sp, #20]
   17bf8:	add	r4, sp, #16
   17bfc:	vstr	d0, [sp, #8]
   17c00:	bl	11e88 <strtold@plt>
   17c04:	mov	r0, r6
   17c08:	mov	r1, r4
   17c0c:	mov	r2, #8
   17c10:	vstr	d0, [sp, #16]
   17c14:	bl	11eac <memcmp@plt>
   17c18:	b	17b84 <__assert_fail@plt+0x5864>
   17c1c:	mov	r0, #1
   17c20:	b	17b84 <__assert_fail@plt+0x5864>
   17c24:	ldr	r0, [sp, #4]
   17c28:	subs	r0, r4, r0
   17c2c:	mvnne	r0, #0
   17c30:	b	17b84 <__assert_fail@plt+0x5864>
   17c34:	bl	11ed0 <__stack_chk_fail@plt>
   17c38:	ldrdeq	r0, [r2], -r8
   17c3c:	andeq	r0, r0, ip, lsl r2
   17c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c44:	sub	sp, sp, #4080	; 0xff0
   17c48:	sub	sp, sp, #4
   17c4c:	ldr	r2, [pc, #1972]	; 18408 <__assert_fail@plt+0x60e8>
   17c50:	ldr	r3, [pc, #1972]	; 1840c <__assert_fail@plt+0x60ec>
   17c54:	str	r0, [sp, #16]
   17c58:	add	r2, pc, r2
   17c5c:	str	r1, [sp, #20]
   17c60:	add	r3, pc, r3
   17c64:	ldr	r1, [sp, #16]
   17c68:	ldr	r0, [pc, #1952]	; 18410 <__assert_fail@plt+0x60f0>
   17c6c:	ldr	r7, [r3, #1356]	; 0x54c
   17c70:	ldr	fp, [r1, #8]
   17c74:	ldr	r5, [r1, #12]
   17c78:	ldr	r1, [sp, #20]
   17c7c:	mov	sl, r7
   17c80:	ldr	r0, [r2, r0]
   17c84:	ldr	r2, [sp, #20]
   17c88:	str	r3, [sp, #32]
   17c8c:	ldr	r3, [pc, #1920]	; 18414 <__assert_fail@plt+0x60f4>
   17c90:	ldr	r4, [r1, #12]
   17c94:	add	r3, pc, r3
   17c98:	ldr	r1, [pc, #1912]	; 18418 <__assert_fail@plt+0x60f8>
   17c9c:	str	r3, [sp, #64]	; 0x40
   17ca0:	ldr	r3, [pc, #1908]	; 1841c <__assert_fail@plt+0x60fc>
   17ca4:	add	r1, pc, r1
   17ca8:	ldr	r9, [r2, #8]
   17cac:	ldr	r2, [r0]
   17cb0:	add	r3, pc, r3
   17cb4:	str	r1, [sp, #52]	; 0x34
   17cb8:	str	r3, [sp, #36]	; 0x24
   17cbc:	ldr	r1, [pc, #1884]	; 18420 <__assert_fail@plt+0x6100>
   17cc0:	ldr	r3, [pc, #1884]	; 18424 <__assert_fail@plt+0x6104>
   17cc4:	add	r1, pc, r1
   17cc8:	str	r0, [sp, #68]	; 0x44
   17ccc:	add	r3, pc, r3
   17cd0:	str	r1, [sp, #56]	; 0x38
   17cd4:	str	r3, [sp, #60]	; 0x3c
   17cd8:	str	r2, [sp, #4076]	; 0xfec
   17cdc:	ldr	r1, [sp, #32]
   17ce0:	cmp	r5, fp
   17ce4:	movcs	r3, r5
   17ce8:	movcc	r3, fp
   17cec:	cmp	r4, r9
   17cf0:	movcc	r4, r9
   17cf4:	rsb	r7, fp, r3
   17cf8:	rsb	r5, r9, r4
   17cfc:	ldr	r6, [sl, #16]
   17d00:	ldrb	r2, [r1, #1352]	; 0x548
   17d04:	cmp	r2, #0
   17d08:	ldr	r2, [sl, #20]
   17d0c:	str	r2, [sp, #12]
   17d10:	bne	17ea8 <__assert_fail@plt+0x5b88>
   17d14:	ldrb	r2, [sl, #26]
   17d18:	cmp	r2, #0
   17d1c:	bne	17ea8 <__assert_fail@plt+0x5b88>
   17d20:	ldrb	r2, [sl, #28]
   17d24:	cmp	r2, #0
   17d28:	bne	17ea8 <__assert_fail@plt+0x5b88>
   17d2c:	ldrb	r2, [sl, #29]
   17d30:	cmp	r2, #0
   17d34:	bne	17ea8 <__assert_fail@plt+0x5b88>
   17d38:	ldrb	r2, [sl, #30]
   17d3c:	cmp	r2, #0
   17d40:	bne	17ea8 <__assert_fail@plt+0x5b88>
   17d44:	ldrb	r2, [sl, #27]
   17d48:	cmp	r2, #0
   17d4c:	bne	17ea8 <__assert_fail@plt+0x5b88>
   17d50:	ldrb	r2, [sl, #32]
   17d54:	cmp	r2, #0
   17d58:	bne	17ea8 <__assert_fail@plt+0x5b88>
   17d5c:	cmp	r6, #0
   17d60:	beq	18364 <__assert_fail@plt+0x6044>
   17d64:	ldr	r2, [sp, #12]
   17d68:	add	r1, fp, #1
   17d6c:	cmp	r2, #0
   17d70:	ldrne	ip, [sp, #12]
   17d74:	beq	17e4c <__assert_fail@plt+0x5b2c>
   17d78:	cmp	fp, r3
   17d7c:	bcs	17d90 <__assert_fail@plt+0x5a70>
   17d80:	ldrb	r2, [r1, #-1]
   17d84:	ldrb	r2, [r6, r2]
   17d88:	cmp	r2, #0
   17d8c:	bne	17e08 <__assert_fail@plt+0x5ae8>
   17d90:	cmp	r9, r4
   17d94:	bcs	1833c <__assert_fail@plt+0x601c>
   17d98:	ldrb	r2, [r9]
   17d9c:	ldrb	r2, [r6, r2]
   17da0:	cmp	r2, #0
   17da4:	addne	r2, r9, #1
   17da8:	bne	17dc4 <__assert_fail@plt+0x5aa4>
   17dac:	b	17dd0 <__assert_fail@plt+0x5ab0>
   17db0:	ldrb	r0, [r2]
   17db4:	add	r2, r2, #1
   17db8:	ldrb	r0, [r6, r0]
   17dbc:	cmp	r0, #0
   17dc0:	beq	17dd0 <__assert_fail@plt+0x5ab0>
   17dc4:	cmp	r2, r4
   17dc8:	mov	r9, r2
   17dcc:	bne	17db0 <__assert_fail@plt+0x5a90>
   17dd0:	cmp	r3, fp
   17dd4:	movhi	r2, #0
   17dd8:	movls	r2, #1
   17ddc:	cmp	r9, r4
   17de0:	orrcs	r2, r2, #1
   17de4:	cmp	r2, #0
   17de8:	bne	1833c <__assert_fail@plt+0x601c>
   17dec:	ldrb	r0, [r1, #-1]
   17df0:	ldrb	r2, [r9]
   17df4:	ldrb	r0, [ip, r0]
   17df8:	ldrb	r2, [ip, r2]
   17dfc:	subs	r2, r0, r2
   17e00:	bne	18358 <__assert_fail@plt+0x6038>
   17e04:	add	r9, r9, #1
   17e08:	add	fp, fp, #1
   17e0c:	add	r1, r1, #1
   17e10:	b	17d78 <__assert_fail@plt+0x5a58>
   17e14:	cmp	r3, fp
   17e18:	movhi	r2, #0
   17e1c:	movls	r2, #1
   17e20:	cmp	r9, r4
   17e24:	orrcs	r2, r2, #1
   17e28:	cmp	r2, #0
   17e2c:	bne	1833c <__assert_fail@plt+0x601c>
   17e30:	ldrb	r0, [r1, #-1]
   17e34:	ldrb	r2, [r9]
   17e38:	subs	r8, r0, r2
   17e3c:	bne	1812c <__assert_fail@plt+0x5e0c>
   17e40:	add	r9, r9, #1
   17e44:	add	fp, fp, #1
   17e48:	add	r1, r1, #1
   17e4c:	cmp	fp, r3
   17e50:	bcs	17e64 <__assert_fail@plt+0x5b44>
   17e54:	ldrb	r2, [r1, #-1]
   17e58:	ldrb	r2, [r6, r2]
   17e5c:	cmp	r2, #0
   17e60:	bne	17e44 <__assert_fail@plt+0x5b24>
   17e64:	cmp	r9, r4
   17e68:	bcs	1833c <__assert_fail@plt+0x601c>
   17e6c:	ldrb	r2, [r9]
   17e70:	ldrb	r2, [r6, r2]
   17e74:	cmp	r2, #0
   17e78:	addne	r2, r9, #1
   17e7c:	bne	17e98 <__assert_fail@plt+0x5b78>
   17e80:	b	17e14 <__assert_fail@plt+0x5af4>
   17e84:	ldrb	r0, [r2]
   17e88:	add	r2, r2, #1
   17e8c:	ldrb	r0, [r6, r0]
   17e90:	cmp	r0, #0
   17e94:	beq	17e14 <__assert_fail@plt+0x5af4>
   17e98:	cmp	r2, r4
   17e9c:	mov	r9, r2
   17ea0:	bne	17e84 <__assert_fail@plt+0x5b64>
   17ea4:	b	17e14 <__assert_fail@plt+0x5af4>
   17ea8:	ldr	r3, [sp, #12]
   17eac:	adds	r4, r3, #0
   17eb0:	movne	r4, #1
   17eb4:	cmp	r6, #0
   17eb8:	moveq	r1, r4
   17ebc:	orrne	r1, r4, #1
   17ec0:	cmp	r1, #0
   17ec4:	str	r1, [sp, #4]
   17ec8:	beq	180d0 <__assert_fail@plt+0x5db0>
   17ecc:	add	r0, r7, r5
   17ed0:	add	r0, r0, #2
   17ed4:	cmp	r0, #4000	; 0xfa0
   17ed8:	bhi	18280 <__assert_fail@plt+0x5f60>
   17edc:	mov	r2, #0
   17ee0:	add	r3, sp, #76	; 0x4c
   17ee4:	str	r2, [sp, #40]	; 0x28
   17ee8:	str	r3, [sp, #8]
   17eec:	ldr	r3, [sp, #8]
   17ef0:	cmp	r7, #0
   17ef4:	add	r8, r7, #1
   17ef8:	add	r8, r3, r8
   17efc:	beq	1832c <__assert_fail@plt+0x600c>
   17f00:	str	r5, [sp, #44]	; 0x2c
   17f04:	mov	r3, #0
   17f08:	str	r8, [sp, #48]	; 0x30
   17f0c:	mov	r0, r3
   17f10:	ldr	r5, [sp, #8]
   17f14:	ldr	r8, [sp, #12]
   17f18:	cmp	r6, #0
   17f1c:	ldrb	r2, [fp, r3]
   17f20:	beq	17f30 <__assert_fail@plt+0x5c10>
   17f24:	ldrb	r1, [r6, r2]
   17f28:	cmp	r1, #0
   17f2c:	bne	17f48 <__assert_fail@plt+0x5c28>
   17f30:	cmp	r4, #0
   17f34:	add	ip, r0, #1
   17f38:	add	r1, r5, r0
   17f3c:	ldrbne	r2, [r8, r2]
   17f40:	mov	r0, ip
   17f44:	strb	r2, [r1]
   17f48:	add	r3, r3, #1
   17f4c:	cmp	r7, r3
   17f50:	bne	17f18 <__assert_fail@plt+0x5bf8>
   17f54:	ldr	r5, [sp, #44]	; 0x2c
   17f58:	ldr	r8, [sp, #48]	; 0x30
   17f5c:	ldr	r1, [sp, #8]
   17f60:	cmp	r5, #0
   17f64:	mov	r3, #0
   17f68:	strb	r3, [r1, r0]
   17f6c:	beq	18324 <__assert_fail@plt+0x6004>
   17f70:	ldr	r7, [sp, #12]
   17f74:	mov	r1, r3
   17f78:	cmp	r6, #0
   17f7c:	ldrb	r2, [r9, r3]
   17f80:	beq	17f90 <__assert_fail@plt+0x5c70>
   17f84:	ldrb	ip, [r6, r2]
   17f88:	cmp	ip, #0
   17f8c:	bne	17fa8 <__assert_fail@plt+0x5c88>
   17f90:	cmp	r4, #0
   17f94:	add	fp, r1, #1
   17f98:	add	ip, r8, r1
   17f9c:	ldrbne	r2, [r7, r2]
   17fa0:	mov	r1, fp
   17fa4:	strb	r2, [ip]
   17fa8:	add	r3, r3, #1
   17fac:	cmp	r5, r3
   17fb0:	bne	17f78 <__assert_fail@plt+0x5c58>
   17fb4:	mov	r3, #0
   17fb8:	strb	r3, [r8, r1]
   17fbc:	ldrb	r3, [sl, #26]
   17fc0:	mov	r7, r0
   17fc4:	ldr	fp, [sp, #8]
   17fc8:	mov	r5, r1
   17fcc:	cmp	r3, #0
   17fd0:	mov	r9, r8
   17fd4:	bne	180f8 <__assert_fail@plt+0x5dd8>
   17fd8:	ldrb	r3, [sl, #28]
   17fdc:	cmp	r3, #0
   17fe0:	bne	18258 <__assert_fail@plt+0x5f38>
   17fe4:	ldrb	r4, [sl, #29]
   17fe8:	cmp	r4, #0
   17fec:	bne	1826c <__assert_fail@plt+0x5f4c>
   17ff0:	ldrb	r3, [sl, #30]
   17ff4:	cmp	r3, #0
   17ff8:	bne	18290 <__assert_fail@plt+0x5f70>
   17ffc:	ldrb	r3, [sl, #27]
   18000:	cmp	r3, #0
   18004:	bne	182cc <__assert_fail@plt+0x5fac>
   18008:	ldrb	r3, [sl, #32]
   1800c:	cmp	r3, #0
   18010:	bne	18310 <__assert_fail@plt+0x5ff0>
   18014:	cmp	r7, #0
   18018:	bne	182e8 <__assert_fail@plt+0x5fc8>
   1801c:	subs	r8, r5, #0
   18020:	mvnne	r8, #0
   18024:	ldr	r2, [sp, #4]
   18028:	cmp	r2, #0
   1802c:	bne	1811c <__assert_fail@plt+0x5dfc>
   18030:	ldr	r3, [sp, #24]
   18034:	ldr	r1, [sp, #28]
   18038:	strb	r3, [fp, r7]
   1803c:	strb	r1, [r9, r5]
   18040:	cmp	r8, #0
   18044:	bne	1812c <__assert_fail@plt+0x5e0c>
   18048:	ldr	sl, [sl, #36]	; 0x24
   1804c:	cmp	sl, #0
   18050:	beq	18334 <__assert_fail@plt+0x6014>
   18054:	ldr	r3, [sl, #8]
   18058:	cmn	r3, #1
   1805c:	beq	18228 <__assert_fail@plt+0x5f08>
   18060:	ldr	r2, [sp, #36]	; 0x24
   18064:	mov	r1, sl
   18068:	ldr	r0, [sp, #16]
   1806c:	ldr	r3, [r2, #1380]	; 0x564
   18070:	blx	r3
   18074:	ldr	r1, [sp, #36]	; 0x24
   18078:	ldr	r3, [r1, #1380]	; 0x564
   1807c:	mov	r1, sl
   18080:	mov	r5, r0
   18084:	ldr	r0, [sp, #20]
   18088:	blx	r3
   1808c:	mov	r4, r0
   18090:	ldr	r3, [sl]
   18094:	cmn	r3, #1
   18098:	beq	18160 <__assert_fail@plt+0x5e40>
   1809c:	ldr	r6, [pc, #900]	; 18428 <__assert_fail@plt+0x6108>
   180a0:	mov	r1, sl
   180a4:	ldr	r0, [sp, #16]
   180a8:	add	r6, pc, r6
   180ac:	ldr	r3, [r6, #1376]	; 0x560
   180b0:	blx	r3
   180b4:	ldr	r3, [r6, #1376]	; 0x560
   180b8:	mov	r1, sl
   180bc:	mov	fp, r0
   180c0:	ldr	r0, [sp, #20]
   180c4:	blx	r3
   180c8:	mov	r9, r0
   180cc:	b	17cdc <__assert_fail@plt+0x59bc>
   180d0:	ldr	r3, [sp, #4]
   180d4:	ldrb	r2, [fp, r7]
   180d8:	strb	r3, [fp, r7]
   180dc:	ldrb	r1, [r9, r5]
   180e0:	strb	r3, [r9, r5]
   180e4:	ldrb	r3, [sl, #26]
   180e8:	str	r2, [sp, #24]
   180ec:	cmp	r3, #0
   180f0:	str	r1, [sp, #28]
   180f4:	beq	17fd8 <__assert_fail@plt+0x5cb8>
   180f8:	ldr	r2, [sp, #52]	; 0x34
   180fc:	mov	r0, fp
   18100:	mov	r1, r9
   18104:	ldr	r3, [r2, #1432]	; 0x598
   18108:	blx	r3
   1810c:	ldr	r2, [sp, #4]
   18110:	cmp	r2, #0
   18114:	mov	r8, r0
   18118:	beq	18030 <__assert_fail@plt+0x5d10>
   1811c:	ldr	r0, [sp, #40]	; 0x28
   18120:	bl	11dec <free@plt>
   18124:	cmp	r8, #0
   18128:	beq	18048 <__assert_fail@plt+0x5d28>
   1812c:	mov	r7, sl
   18130:	ldrb	r3, [r7, #31]
   18134:	cmp	r3, #0
   18138:	rsbne	r0, r8, #0
   1813c:	moveq	r0, r8
   18140:	ldr	r1, [sp, #68]	; 0x44
   18144:	ldr	r2, [sp, #4076]	; 0xfec
   18148:	ldr	r3, [r1]
   1814c:	cmp	r2, r3
   18150:	bne	18404 <__assert_fail@plt+0x60e4>
   18154:	add	sp, sp, #4080	; 0xff0
   18158:	add	sp, sp, #4
   1815c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18160:	ldrb	r3, [sl, #24]
   18164:	ldr	r2, [sp, #16]
   18168:	cmp	r3, #0
   1816c:	ldr	r3, [sp, #20]
   18170:	ldr	fp, [r2]
   18174:	ldr	r9, [r3]
   18178:	beq	17cdc <__assert_fail@plt+0x59bc>
   1817c:	cmp	r5, fp
   18180:	bls	181d4 <__assert_fail@plt+0x5eb4>
   18184:	ldr	r3, [pc, #672]	; 1842c <__assert_fail@plt+0x610c>
   18188:	ldrb	r2, [fp]
   1818c:	add	r3, pc, r3
   18190:	add	r3, r3, r2
   18194:	ldrb	r3, [r3, #24]
   18198:	cmp	r3, #0
   1819c:	beq	181d4 <__assert_fail@plt+0x5eb4>
   181a0:	ldr	r1, [pc, #648]	; 18430 <__assert_fail@plt+0x6110>
   181a4:	add	r3, fp, #1
   181a8:	add	r1, pc, r1
   181ac:	b	181c8 <__assert_fail@plt+0x5ea8>
   181b0:	ldrb	r2, [r3]
   181b4:	add	r3, r3, #1
   181b8:	add	r2, r1, r2
   181bc:	ldrb	r2, [r2, #24]
   181c0:	cmp	r2, #0
   181c4:	beq	181d4 <__assert_fail@plt+0x5eb4>
   181c8:	cmp	r3, r5
   181cc:	mov	fp, r3
   181d0:	bne	181b0 <__assert_fail@plt+0x5e90>
   181d4:	cmp	r4, r9
   181d8:	bls	17cdc <__assert_fail@plt+0x59bc>
   181dc:	ldr	r1, [sp, #56]	; 0x38
   181e0:	ldrb	r3, [r9]
   181e4:	add	r3, r1, r3
   181e8:	ldrb	r3, [r3, #24]
   181ec:	cmp	r3, #0
   181f0:	addne	r3, r9, #1
   181f4:	ldrne	r1, [sp, #60]	; 0x3c
   181f8:	bne	18218 <__assert_fail@plt+0x5ef8>
   181fc:	b	17cdc <__assert_fail@plt+0x59bc>
   18200:	ldrb	r2, [r3]
   18204:	add	r3, r3, #1
   18208:	add	r2, r1, r2
   1820c:	ldrb	r2, [r2, #24]
   18210:	cmp	r2, #0
   18214:	beq	17cdc <__assert_fail@plt+0x59bc>
   18218:	cmp	r3, r4
   1821c:	mov	r9, r3
   18220:	bne	18200 <__assert_fail@plt+0x5ee0>
   18224:	b	17cdc <__assert_fail@plt+0x59bc>
   18228:	ldr	r2, [sp, #16]
   1822c:	ldr	r3, [sp, #20]
   18230:	ldr	r1, [sp, #20]
   18234:	ldr	r5, [r2, #4]
   18238:	ldr	r4, [r3, #4]
   1823c:	ldr	r3, [r2]
   18240:	sub	r5, r5, #1
   18244:	ldr	r2, [r1]
   18248:	sub	r4, r4, #1
   1824c:	add	r5, r3, r5
   18250:	add	r4, r2, r4
   18254:	b	18090 <__assert_fail@plt+0x5d70>
   18258:	mov	r0, fp
   1825c:	mov	r1, r9
   18260:	bl	17b18 <__assert_fail@plt+0x57f8>
   18264:	mov	r8, r0
   18268:	b	18024 <__assert_fail@plt+0x5d04>
   1826c:	mov	r0, fp
   18270:	mov	r1, r9
   18274:	bl	160d0 <__assert_fail@plt+0x3db0>
   18278:	mov	r8, r0
   1827c:	b	18024 <__assert_fail@plt+0x5d04>
   18280:	bl	226ec <__assert_fail@plt+0x103cc>
   18284:	str	r0, [sp, #40]	; 0x28
   18288:	str	r0, [sp, #8]
   1828c:	b	17eec <__assert_fail@plt+0x5bcc>
   18290:	ldr	r1, [sp, #64]	; 0x40
   18294:	mov	r2, r4
   18298:	mov	r0, fp
   1829c:	ldr	r3, [r1, #1384]	; 0x568
   182a0:	mov	r1, r7
   182a4:	blx	r3
   182a8:	ldr	r1, [sp, #64]	; 0x40
   182ac:	mov	r2, r4
   182b0:	ldr	r3, [r1, #1384]	; 0x568
   182b4:	mov	r1, r5
   182b8:	mov	r6, r0
   182bc:	mov	r0, r9
   182c0:	blx	r3
   182c4:	rsb	r8, r0, r6
   182c8:	b	18024 <__assert_fail@plt+0x5d04>
   182cc:	mov	r0, fp
   182d0:	mov	r1, r7
   182d4:	mov	r2, r9
   182d8:	mov	r3, r5
   182dc:	bl	1623c <__assert_fail@plt+0x3f1c>
   182e0:	mov	r8, r0
   182e4:	b	18024 <__assert_fail@plt+0x5d04>
   182e8:	cmp	r5, #0
   182ec:	moveq	r8, #1
   182f0:	beq	18024 <__assert_fail@plt+0x5d04>
   182f4:	mov	r0, fp
   182f8:	add	r1, r7, #1
   182fc:	mov	r2, r9
   18300:	add	r3, r5, #1
   18304:	bl	22a90 <__assert_fail@plt+0x10770>
   18308:	mov	r8, r0
   1830c:	b	18024 <__assert_fail@plt+0x5d04>
   18310:	mov	r0, fp
   18314:	mov	r1, r9
   18318:	bl	1d7ec <__assert_fail@plt+0xb4cc>
   1831c:	mov	r8, r0
   18320:	b	18024 <__assert_fail@plt+0x5d04>
   18324:	mov	r1, r5
   18328:	b	17fb4 <__assert_fail@plt+0x5c94>
   1832c:	mov	r0, r7
   18330:	b	17f5c <__assert_fail@plt+0x5c3c>
   18334:	mov	r0, sl
   18338:	b	18140 <__assert_fail@plt+0x5e20>
   1833c:	cmp	r9, r4
   18340:	movcs	r4, #0
   18344:	movcc	r4, #1
   18348:	cmp	r3, fp
   1834c:	rsbls	r8, r4, #0
   18350:	rsbhi	r8, r4, #1
   18354:	b	18040 <__assert_fail@plt+0x5d20>
   18358:	mov	r7, sl
   1835c:	mov	r8, r2
   18360:	b	18130 <__assert_fail@plt+0x5e10>
   18364:	cmp	r7, #0
   18368:	bne	18378 <__assert_fail@plt+0x6058>
   1836c:	subs	r8, r5, #0
   18370:	mvnne	r8, #0
   18374:	b	18040 <__assert_fail@plt+0x5d20>
   18378:	cmp	r5, #0
   1837c:	beq	183f8 <__assert_fail@plt+0x60d8>
   18380:	ldr	r1, [sp, #12]
   18384:	cmp	r1, #0
   18388:	ldrne	r0, [sp, #12]
   1838c:	bne	183dc <__assert_fail@plt+0x60bc>
   18390:	cmp	r5, r7
   18394:	movcc	r2, r5
   18398:	movcs	r2, r7
   1839c:	mov	r0, fp
   183a0:	mov	r1, r9
   183a4:	bl	11eac <memcmp@plt>
   183a8:	subs	r8, r0, #0
   183ac:	bne	1812c <__assert_fail@plt+0x5e0c>
   183b0:	cmp	r7, r5
   183b4:	bcc	183ec <__assert_fail@plt+0x60cc>
   183b8:	moveq	r8, #0
   183bc:	movne	r8, #1
   183c0:	b	18040 <__assert_fail@plt+0x5d20>
   183c4:	ldrb	r1, [fp], #1
   183c8:	ldrb	r2, [r9], #1
   183cc:	ldrb	r1, [r0, r1]
   183d0:	ldrb	r2, [r0, r2]
   183d4:	subs	r8, r1, r2
   183d8:	bne	1812c <__assert_fail@plt+0x5e0c>
   183dc:	cmp	r9, r4
   183e0:	cmpcc	fp, r3
   183e4:	bcc	183c4 <__assert_fail@plt+0x60a4>
   183e8:	b	183b0 <__assert_fail@plt+0x6090>
   183ec:	mov	r7, sl
   183f0:	mvn	r8, #0
   183f4:	b	18130 <__assert_fail@plt+0x5e10>
   183f8:	mov	r7, sl
   183fc:	mov	r8, #1
   18400:	b	18130 <__assert_fail@plt+0x5e10>
   18404:	bl	11ed0 <__stack_chk_fail@plt>
   18408:	andeq	r0, r2, r0, lsr #7
   1840c:	andeq	r0, r2, r8, asr #13
   18410:	andeq	r0, r0, ip, lsl r2
   18414:	muleq	r2, r4, r6
   18418:	andeq	r0, r2, r4, lsl #13
   1841c:	andeq	r0, r2, r8, ror r6
   18420:	andeq	r0, r2, r4, ror #12
   18424:	andeq	r0, r2, ip, asr r6
   18428:	andeq	r0, r2, r0, lsl #5
   1842c:	muleq	r2, ip, r1
   18430:	andeq	r0, r2, r0, lsl #3
   18434:	push	{r4, r5, r6, lr}
   18438:	mov	ip, r1
   1843c:	ldr	lr, [pc, #136]	; 184cc <__assert_fail@plt+0x61ac>
   18440:	sub	sp, sp, #16
   18444:	ldr	r3, [pc, #132]	; 184d0 <__assert_fail@plt+0x61b0>
   18448:	mov	r6, r2
   1844c:	add	lr, pc, lr
   18450:	mov	r2, ip
   18454:	add	ip, sp, #4
   18458:	mov	r1, r0
   1845c:	ldr	r5, [lr, r3]
   18460:	mov	r0, sp
   18464:	mov	r3, ip
   18468:	mov	r4, #0
   1846c:	str	r4, [sp, #8]
   18470:	ldr	ip, [r5]
   18474:	str	r4, [sp, #4]
   18478:	str	ip, [sp, #12]
   1847c:	bl	12014 <mbrtowc@plt>
   18480:	add	r3, r0, #2
   18484:	cmp	r3, #1
   18488:	movls	r3, #1
   1848c:	movls	r0, r4
   18490:	strls	r3, [r6]
   18494:	bls	184b0 <__assert_fail@plt+0x6190>
   18498:	cmp	r0, #0
   1849c:	movne	r3, r0
   184a0:	moveq	r3, #1
   184a4:	ldr	r0, [sp]
   184a8:	str	r3, [r6]
   184ac:	bl	11e40 <iswblank@plt>
   184b0:	ldr	r2, [sp, #12]
   184b4:	ldr	r3, [r5]
   184b8:	cmp	r2, r3
   184bc:	bne	184c8 <__assert_fail@plt+0x61a8>
   184c0:	add	sp, sp, #16
   184c4:	pop	{r4, r5, r6, pc}
   184c8:	bl	11ed0 <__stack_chk_fail@plt>
   184cc:	andeq	pc, r1, ip, lsr #23
   184d0:	andeq	r0, r0, ip, lsl r2
   184d4:	ldr	r3, [pc, #276]	; 185f0 <__assert_fail@plt+0x62d0>
   184d8:	ldr	r2, [pc, #276]	; 185f4 <__assert_fail@plt+0x62d4>
   184dc:	add	r3, pc, r3
   184e0:	push	{r4, r5, r6, r7, r8, lr}
   184e4:	sub	sp, sp, #8
   184e8:	ldr	r8, [r3, r2]
   184ec:	mov	r4, r0
   184f0:	mov	r6, r1
   184f4:	ldr	r3, [r8]
   184f8:	str	r3, [sp, #4]
   184fc:	bl	120e0 <strlen@plt>
   18500:	ldrb	r3, [r4]
   18504:	cmp	r3, #0
   18508:	mov	r5, r0
   1850c:	bne	18540 <__assert_fail@plt+0x6220>
   18510:	b	1855c <__assert_fail@plt+0x623c>
   18514:	mov	r0, r4
   18518:	mov	r2, sp
   1851c:	bl	18434 <__assert_fail@plt+0x6114>
   18520:	cmp	r0, #0
   18524:	beq	1855c <__assert_fail@plt+0x623c>
   18528:	ldr	r3, [sp]
   1852c:	add	r4, r4, r3
   18530:	rsb	r5, r3, r5
   18534:	ldrb	r3, [r4]
   18538:	cmp	r3, #0
   1853c:	beq	1855c <__assert_fail@plt+0x623c>
   18540:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   18544:	cmp	r0, r5
   18548:	movcs	r1, r5
   1854c:	bcs	18514 <__assert_fail@plt+0x61f4>
   18550:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   18554:	mov	r1, r0
   18558:	b	18514 <__assert_fail@plt+0x61f4>
   1855c:	mov	r0, r6
   18560:	bl	120e0 <strlen@plt>
   18564:	ldrb	r3, [r6]
   18568:	cmp	r3, #0
   1856c:	mov	r5, r0
   18570:	bne	1859c <__assert_fail@plt+0x627c>
   18574:	b	185b8 <__assert_fail@plt+0x6298>
   18578:	mov	r0, r6
   1857c:	mov	r2, sp
   18580:	bl	18434 <__assert_fail@plt+0x6114>
   18584:	cmp	r0, #0
   18588:	beq	185b8 <__assert_fail@plt+0x6298>
   1858c:	ldr	r3, [sp]
   18590:	ldrb	r3, [r6, r3]!
   18594:	cmp	r3, #0
   18598:	beq	185b8 <__assert_fail@plt+0x6298>
   1859c:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   185a0:	cmp	r5, r0
   185a4:	movls	r1, r5
   185a8:	bls	18578 <__assert_fail@plt+0x6258>
   185ac:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   185b0:	mov	r1, r0
   185b4:	b	18578 <__assert_fail@plt+0x6258>
   185b8:	ldr	r3, [pc, #56]	; 185f8 <__assert_fail@plt+0x62d8>
   185bc:	mov	r0, r4
   185c0:	mov	r1, r6
   185c4:	add	r3, pc, r3
   185c8:	ldr	r2, [r3, #284]	; 0x11c
   185cc:	ldr	r3, [r3, #280]	; 0x118
   185d0:	bl	21afc <__assert_fail@plt+0xf7dc>
   185d4:	ldr	r2, [sp, #4]
   185d8:	ldr	r3, [r8]
   185dc:	cmp	r2, r3
   185e0:	bne	185ec <__assert_fail@plt+0x62cc>
   185e4:	add	sp, sp, #8
   185e8:	pop	{r4, r5, r6, r7, r8, pc}
   185ec:	bl	11ed0 <__stack_chk_fail@plt>
   185f0:	andeq	pc, r1, ip, lsl fp	; <UNPREDICTABLE>
   185f4:	andeq	r0, r0, ip, lsl r2
   185f8:	andeq	pc, r1, r4, ror #26
   185fc:	ldr	r3, [pc, #120]	; 1867c <__assert_fail@plt+0x635c>
   18600:	ldr	r2, [pc, #120]	; 18680 <__assert_fail@plt+0x6360>
   18604:	add	r3, pc, r3
   18608:	push	{r4, r5, r6, r7, lr}
   1860c:	mov	r5, r0
   18610:	ldr	r7, [r3, r2]
   18614:	sub	sp, sp, #12
   18618:	ldr	r0, [r0]
   1861c:	mov	r4, r1
   18620:	ldr	r3, [r7]
   18624:	cmp	r1, r0
   18628:	str	r3, [sp, #4]
   1862c:	bhi	1864c <__assert_fail@plt+0x632c>
   18630:	b	18660 <__assert_fail@plt+0x6340>
   18634:	ldr	r0, [r5]
   18638:	ldr	r3, [sp]
   1863c:	add	r0, r0, r3
   18640:	str	r0, [r5]
   18644:	cmp	r4, r0
   18648:	bls	18660 <__assert_fail@plt+0x6340>
   1864c:	mov	r2, sp
   18650:	rsb	r1, r0, r4
   18654:	bl	18434 <__assert_fail@plt+0x6114>
   18658:	cmp	r0, #0
   1865c:	bne	18634 <__assert_fail@plt+0x6314>
   18660:	ldr	r2, [sp, #4]
   18664:	ldr	r3, [r7]
   18668:	cmp	r2, r3
   1866c:	bne	18678 <__assert_fail@plt+0x6358>
   18670:	add	sp, sp, #12
   18674:	pop	{r4, r5, r6, r7, pc}
   18678:	bl	11ed0 <__stack_chk_fail@plt>
   1867c:	strdeq	pc, [r1], -r4
   18680:	andeq	r0, r0, ip, lsl r2
   18684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18688:	sub	sp, sp, #76	; 0x4c
   1868c:	ldr	r3, [pc, #1068]	; 18ac0 <__assert_fail@plt+0x67a0>
   18690:	str	r0, [sp, #20]
   18694:	ldr	r0, [pc, #1064]	; 18ac4 <__assert_fail@plt+0x67a4>
   18698:	add	r3, pc, r3
   1869c:	str	r2, [sp, #60]	; 0x3c
   186a0:	ldr	r2, [sp, #20]
   186a4:	str	r1, [sp, #32]
   186a8:	ldr	r1, [sp, #20]
   186ac:	ldr	r0, [r3, r0]
   186b0:	ldr	r3, [pc, #1040]	; 18ac8 <__assert_fail@plt+0x67a8>
   186b4:	ldr	r2, [r2, #20]
   186b8:	add	r3, pc, r3
   186bc:	ldrb	r5, [r1, #24]
   186c0:	ldr	r1, [pc, #1028]	; 18acc <__assert_fail@plt+0x67ac>
   186c4:	str	r0, [sp, #56]	; 0x38
   186c8:	cmp	r5, #0
   186cc:	str	r2, [sp, #8]
   186d0:	add	r1, pc, r1
   186d4:	ldr	r2, [r0]
   186d8:	ldrb	r0, [r3]
   186dc:	ldr	r6, [r1, #1356]	; 0x54c
   186e0:	str	r2, [sp, #68]	; 0x44
   186e4:	str	r0, [sp, #4]
   186e8:	ldr	r4, [r3, #8]
   186ec:	bne	18908 <__assert_fail@plt+0x65e8>
   186f0:	ldr	r1, [sp, #20]
   186f4:	ldr	r3, [r1, #4]
   186f8:	ldr	r2, [r1, #16]
   186fc:	cmp	r3, r2
   18700:	beq	18928 <__assert_fail@plt+0x6608>
   18704:	ldr	r1, [sp, #20]
   18708:	ldr	r0, [r1]
   1870c:	rsb	r1, r2, r3
   18710:	add	r1, r0, r1
   18714:	bl	11dd4 <memmove@plt>
   18718:	ldr	r2, [sp, #20]
   1871c:	ldr	r0, [sp, #20]
   18720:	mov	r3, r5
   18724:	ldr	r1, [r2, #16]
   18728:	str	r5, [r2, #8]
   1872c:	mov	r2, r1
   18730:	str	r1, [r0, #4]
   18734:	ldr	r1, [sp, #20]
   18738:	sub	fp, r4, #18
   1873c:	movw	r0, #43689	; 0xaaa9
   18740:	movt	r0, #2730	; 0xaaa
   18744:	str	r0, [sp, #52]	; 0x34
   18748:	ldr	r5, [r1, #12]
   1874c:	ldr	r4, [r1]
   18750:	ldr	r1, [pc, #888]	; 18ad0 <__assert_fail@plt+0x67b0>
   18754:	ldr	r0, [pc, #888]	; 18ad4 <__assert_fail@plt+0x67b4>
   18758:	add	r1, pc, r1
   1875c:	str	r1, [sp, #44]	; 0x2c
   18760:	ldr	r1, [sp, #8]
   18764:	add	r0, pc, r0
   18768:	str	r0, [sp, #48]	; 0x30
   1876c:	add	r1, r1, #1
   18770:	ldr	r0, [pc, #864]	; 18ad8 <__assert_fail@plt+0x67b8>
   18774:	str	r1, [sp, #24]
   18778:	ldr	r1, [pc, #860]	; 18adc <__assert_fail@plt+0x67bc>
   1877c:	add	r0, pc, r0
   18780:	str	r0, [sp, #12]
   18784:	add	r1, pc, r1
   18788:	str	r1, [sp, #16]
   1878c:	add	r7, r4, r5
   18790:	add	r5, r4, r2
   18794:	ldr	r2, [sp, #8]
   18798:	cmp	r3, #0
   1879c:	mls	r8, r2, r3, r7
   187a0:	sub	r7, r7, r3, lsl #4
   187a4:	rsb	r8, r5, r8
   187a8:	ldmne	r7, {r3, r4}
   187ac:	addne	r4, r4, r3
   187b0:	ldr	r3, [sp, #24]
   187b4:	cmp	r8, r3
   187b8:	bls	189b4 <__assert_fail@plt+0x6694>
   187bc:	ldr	r1, [sp, #24]
   187c0:	sub	r0, r8, #1
   187c4:	bl	242f8 <__assert_fail@plt+0x11fd8>
   187c8:	mov	r1, #1
   187cc:	ldr	r3, [sp, #32]
   187d0:	mov	sl, r0
   187d4:	mov	r0, r5
   187d8:	mov	r2, sl
   187dc:	bl	122c0 <fread_unlocked@plt>
   187e0:	cmp	sl, r0
   187e4:	rsb	r8, r0, r8
   187e8:	add	r9, r5, r0
   187ec:	beq	1883c <__assert_fail@plt+0x651c>
   187f0:	ldr	r0, [sp, #32]
   187f4:	ldr	r3, [r0]
   187f8:	tst	r3, #32
   187fc:	bne	18a9c <__assert_fail@plt+0x677c>
   18800:	tst	r3, #16
   18804:	beq	1883c <__assert_fail@plt+0x651c>
   18808:	ldr	r1, [sp, #20]
   1880c:	mov	r2, #1
   18810:	ldr	r3, [r1]
   18814:	strb	r2, [r1, #24]
   18818:	cmp	r3, r9
   1881c:	beq	18908 <__assert_fail@plt+0x65e8>
   18820:	cmp	r4, r9
   18824:	beq	1883c <__assert_fail@plt+0x651c>
   18828:	ldrb	r3, [r9, #-1]
   1882c:	ldr	r0, [sp, #4]
   18830:	cmp	r3, r0
   18834:	strbne	r0, [r9]
   18838:	addne	r9, r9, #1
   1883c:	add	r3, sp, #64	; 0x40
   18840:	mov	sl, r5
   18844:	str	r9, [sp, #40]	; 0x28
   18848:	mov	r5, r7
   1884c:	str	r3, [sp, #28]
   18850:	b	18874 <__assert_fail@plt+0x6554>
   18854:	ldr	r0, [sp, #12]
   18858:	mov	r1, r6
   1885c:	ldr	r2, [r0, #1376]	; 0x560
   18860:	mov	r0, r7
   18864:	blx	r2
   18868:	str	r0, [r5, #-8]
   1886c:	mov	r5, r7
   18870:	mov	r4, sl
   18874:	mov	r0, sl
   18878:	ldr	r1, [sp, #4]
   1887c:	rsb	r2, sl, r9
   18880:	mov	r7, r5
   18884:	bl	121b8 <memchr@plt>
   18888:	cmp	r0, #0
   1888c:	beq	18994 <__assert_fail@plt+0x6674>
   18890:	mov	sl, r0
   18894:	mov	r2, #0
   18898:	strb	r2, [sl], #1
   1889c:	rsb	r2, r4, sl
   188a0:	ldr	r1, [sp, #8]
   188a4:	cmp	fp, r2
   188a8:	movcc	fp, r2
   188ac:	cmp	r6, #0
   188b0:	str	r4, [r5, #-16]
   188b4:	rsb	r8, r1, r8
   188b8:	sub	r7, r5, #16
   188bc:	str	r2, [r5, #-12]
   188c0:	beq	1886c <__assert_fail@plt+0x654c>
   188c4:	ldr	r2, [r6, #8]
   188c8:	cmn	r2, #1
   188cc:	beq	188e4 <__assert_fail@plt+0x65c4>
   188d0:	ldr	r3, [sp, #16]
   188d4:	mov	r0, r7
   188d8:	mov	r1, r6
   188dc:	ldr	r2, [r3, #1380]	; 0x564
   188e0:	blx	r2
   188e4:	str	r0, [r5, #-4]
   188e8:	ldr	r2, [r6]
   188ec:	cmn	r2, #1
   188f0:	bne	18854 <__assert_fail@plt+0x6534>
   188f4:	ldrb	r2, [r6, #24]
   188f8:	cmp	r2, #0
   188fc:	bne	18934 <__assert_fail@plt+0x6614>
   18900:	str	r4, [r5, #-8]
   18904:	b	1886c <__assert_fail@plt+0x654c>
   18908:	mov	r0, #0
   1890c:	ldr	r1, [sp, #56]	; 0x38
   18910:	ldr	r2, [sp, #68]	; 0x44
   18914:	ldr	r3, [r1]
   18918:	cmp	r2, r3
   1891c:	bne	18ab8 <__assert_fail@plt+0x6798>
   18920:	add	sp, sp, #76	; 0x4c
   18924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18928:	mov	r2, r3
   1892c:	ldr	r3, [r1, #8]
   18930:	b	18734 <__assert_fail@plt+0x6414>
   18934:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   18938:	cmp	r0, #1
   1893c:	bls	18a2c <__assert_fail@plt+0x670c>
   18940:	ldr	r1, [r5, #-4]
   18944:	cmp	r4, r1
   18948:	strcc	r6, [sp, #36]	; 0x24
   1894c:	movcc	r6, r4
   18950:	addcc	r4, sp, #64	; 0x40
   18954:	bcc	18970 <__assert_fail@plt+0x6650>
   18958:	b	18900 <__assert_fail@plt+0x65e0>
   1895c:	ldr	r2, [sp, #64]	; 0x40
   18960:	ldr	r1, [r5, #-4]
   18964:	add	r6, r6, r2
   18968:	cmp	r1, r6
   1896c:	bls	18988 <__assert_fail@plt+0x6668>
   18970:	rsb	r1, r6, r1
   18974:	mov	r0, r6
   18978:	mov	r2, r4
   1897c:	bl	18434 <__assert_fail@plt+0x6114>
   18980:	cmp	r0, #0
   18984:	bne	1895c <__assert_fail@plt+0x663c>
   18988:	mov	r4, r6
   1898c:	ldr	r6, [sp, #36]	; 0x24
   18990:	b	18900 <__assert_fail@plt+0x65e0>
   18994:	ldr	r2, [sp, #20]
   18998:	ldrb	r3, [r2, #24]
   1899c:	cmp	r3, #0
   189a0:	bne	189b8 <__assert_fail@plt+0x6698>
   189a4:	ldr	r3, [sp, #24]
   189a8:	mov	r5, r9
   189ac:	cmp	r8, r3
   189b0:	bhi	187bc <__assert_fail@plt+0x649c>
   189b4:	str	r5, [sp, #40]	; 0x28
   189b8:	ldr	r1, [sp, #20]
   189bc:	ldr	r2, [sp, #40]	; 0x28
   189c0:	ldr	r0, [r1]
   189c4:	ldr	r5, [r1, #12]
   189c8:	rsb	r3, r0, r2
   189cc:	str	r3, [r1, #4]
   189d0:	add	r3, r0, r5
   189d4:	rsb	r3, r7, r3
   189d8:	asr	r3, r3, #4
   189dc:	str	r3, [r1, #8]
   189e0:	cmp	r3, #0
   189e4:	bne	18a7c <__assert_fail@plt+0x675c>
   189e8:	cmp	r0, #0
   189ec:	lsr	r5, r5, #4
   189f0:	beq	18a6c <__assert_fail@plt+0x674c>
   189f4:	ldr	r3, [sp, #52]	; 0x34
   189f8:	cmp	r5, r3
   189fc:	bhi	18abc <__assert_fail@plt+0x679c>
   18a00:	add	r3, r5, #1
   18a04:	add	r5, r5, r3, lsr #1
   18a08:	lsl	r5, r5, #4
   18a0c:	mov	r1, r5
   18a10:	bl	22744 <__assert_fail@plt+0x10424>
   18a14:	ldr	r1, [sp, #20]
   18a18:	str	r5, [r1, #12]
   18a1c:	ldmib	r1, {r2, r3}
   18a20:	mov	r4, r0
   18a24:	str	r0, [r1]
   18a28:	b	1878c <__assert_fail@plt+0x646c>
   18a2c:	ldr	r1, [sp, #44]	; 0x2c
   18a30:	ldrb	r2, [r4]
   18a34:	add	r2, r1, r2
   18a38:	ldrb	r2, [r2, #24]
   18a3c:	cmp	r2, #0
   18a40:	addne	r2, r4, #1
   18a44:	ldrne	r1, [sp, #48]	; 0x30
   18a48:	beq	18900 <__assert_fail@plt+0x65e0>
   18a4c:	mov	r4, r2
   18a50:	add	r2, r2, #1
   18a54:	ldrb	r3, [r4]
   18a58:	add	r3, r1, r3
   18a5c:	ldrb	r3, [r3, #24]
   18a60:	cmp	r3, #0
   18a64:	bne	18a4c <__assert_fail@plt+0x672c>
   18a68:	b	18900 <__assert_fail@plt+0x65e0>
   18a6c:	cmp	r5, #0
   18a70:	moveq	r5, #64	; 0x40
   18a74:	beq	18a0c <__assert_fail@plt+0x66ec>
   18a78:	b	18a08 <__assert_fail@plt+0x66e8>
   18a7c:	ldr	r3, [pc, #92]	; 18ae0 <__assert_fail@plt+0x67c0>
   18a80:	rsb	r4, r4, r2
   18a84:	mov	r0, #1
   18a88:	add	r2, fp, #18
   18a8c:	add	r3, pc, r3
   18a90:	str	r4, [r1, #16]
   18a94:	str	r2, [r3, #8]
   18a98:	b	1890c <__assert_fail@plt+0x65ec>
   18a9c:	ldr	r1, [pc, #64]	; 18ae4 <__assert_fail@plt+0x67c4>
   18aa0:	mov	r0, #0
   18aa4:	mov	r2, #5
   18aa8:	add	r1, pc, r1
   18aac:	bl	11ec4 <dcgettext@plt>
   18ab0:	ldr	r1, [sp, #60]	; 0x3c
   18ab4:	bl	15e40 <__assert_fail@plt+0x3b20>
   18ab8:	bl	11ed0 <__stack_chk_fail@plt>
   18abc:	bl	22900 <__assert_fail@plt+0x105e0>
   18ac0:	andeq	pc, r1, r0, ror #18
   18ac4:	andeq	r0, r0, ip, lsl r2
   18ac8:	andeq	pc, r1, r0, lsr #23
   18acc:	andeq	pc, r1, r8, asr ip	; <UNPREDICTABLE>
   18ad0:	ldrdeq	pc, [r1], -r0
   18ad4:	andeq	pc, r1, r4, asr #23
   18ad8:	andeq	pc, r1, ip, lsr #23
   18adc:	andeq	pc, r1, r4, lsr #23
   18ae0:	andeq	pc, r1, ip, asr #15
   18ae4:			; <UNDEFINED> instruction: 0x0000cbbc
   18ae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18aec:	sub	sp, sp, #52	; 0x34
   18af0:	ldr	r3, [pc, #916]	; 18e8c <__assert_fail@plt+0x6b6c>
   18af4:	add	r6, sp, #28
   18af8:	str	r1, [sp, #8]
   18afc:	ldr	r2, [pc, #908]	; 18e90 <__assert_fail@plt+0x6b70>
   18b00:	add	r3, pc, r3
   18b04:	ldr	r1, [r1, #12]
   18b08:	ldr	r8, [pc, #900]	; 18e94 <__assert_fail@plt+0x6b74>
   18b0c:	cmp	r1, #0
   18b10:	ldr	r5, [r0, #4]
   18b14:	str	r1, [sp, #4]
   18b18:	add	r8, pc, r8
   18b1c:	ldr	r2, [r3, r2]
   18b20:	sub	r5, r5, #1
   18b24:	ldr	r7, [r8]
   18b28:	ldr	r4, [r0]
   18b2c:	str	r2, [sp, #12]
   18b30:	ldr	r1, [sp, #12]
   18b34:	add	r5, r4, r5
   18b38:	ldr	r2, [sp, #8]
   18b3c:	ldr	r3, [r2, #8]
   18b40:	ldr	r2, [r1]
   18b44:	addeq	r3, r3, #1
   18b48:	str	r2, [sp, #44]	; 0x2c
   18b4c:	mov	r2, #0
   18b50:	cmp	r7, r2
   18b54:	str	r2, [sp, #28]
   18b58:	str	r2, [r6, #4]
   18b5c:	bne	18d18 <__assert_fail@plt+0x69f8>
   18b60:	cmp	r4, r5
   18b64:	bcs	18c54 <__assert_fail@plt+0x6934>
   18b68:	cmp	r3, r2
   18b6c:	sub	r8, r3, #1
   18b70:	beq	18c54 <__assert_fail@plt+0x6934>
   18b74:	add	r2, sp, #24
   18b78:	rsb	r9, r4, r5
   18b7c:	add	r7, sp, #20
   18b80:	str	r2, [sp]
   18b84:	mov	fp, #1
   18b88:	b	18ba0 <__assert_fail@plt+0x6880>
   18b8c:	ldr	r2, [sp, #20]
   18b90:	add	r4, r4, r2
   18b94:	cmp	r5, r4
   18b98:	bls	18c54 <__assert_fail@plt+0x6934>
   18b9c:	rsb	r9, r4, r5
   18ba0:	mov	r0, r4
   18ba4:	mov	r1, r9
   18ba8:	mov	r2, r7
   18bac:	bl	18434 <__assert_fail@plt+0x6114>
   18bb0:	cmp	r0, #0
   18bb4:	bne	18b8c <__assert_fail@plt+0x686c>
   18bb8:	cmp	r5, r4
   18bbc:	bls	18c54 <__assert_fail@plt+0x6934>
   18bc0:	ldm	r6, {r0, r1}
   18bc4:	add	sl, sp, #36	; 0x24
   18bc8:	mov	r2, r9
   18bcc:	mov	r3, r6
   18bd0:	stm	sl, {r0, r1}
   18bd4:	add	r0, sp, #24
   18bd8:	mov	r1, r4
   18bdc:	bl	12014 <mbrtowc@plt>
   18be0:	cmp	r0, #0
   18be4:	str	r0, [sp, #20]
   18be8:	beq	18bfc <__assert_fail@plt+0x68dc>
   18bec:	cmn	r0, #2
   18bf0:	bcc	18c04 <__assert_fail@plt+0x68e4>
   18bf4:	ldm	sl, {r0, r1}
   18bf8:	stm	r6, {r0, r1}
   18bfc:	mov	r0, #1
   18c00:	str	fp, [sp, #20]
   18c04:	add	r4, r4, r0
   18c08:	cmp	r5, r4
   18c0c:	bhi	18c24 <__assert_fail@plt+0x6904>
   18c10:	b	18c54 <__assert_fail@plt+0x6934>
   18c14:	ldr	r3, [sp, #20]
   18c18:	add	r4, r4, r3
   18c1c:	cmp	r5, r4
   18c20:	bls	18c54 <__assert_fail@plt+0x6934>
   18c24:	rsb	r9, r4, r5
   18c28:	mov	r0, r4
   18c2c:	mov	r2, r7
   18c30:	mov	r1, r9
   18c34:	bl	18434 <__assert_fail@plt+0x6114>
   18c38:	cmp	r0, #0
   18c3c:	beq	18c14 <__assert_fail@plt+0x68f4>
   18c40:	cmp	r5, r4
   18c44:	bls	18c54 <__assert_fail@plt+0x6934>
   18c48:	cmp	r8, #0
   18c4c:	sub	r8, r8, #1
   18c50:	bne	18ba0 <__assert_fail@plt+0x6880>
   18c54:	ldr	r3, [sp, #4]
   18c58:	cmp	r3, #0
   18c5c:	beq	18cf8 <__assert_fail@plt+0x69d8>
   18c60:	ldr	r1, [sp, #8]
   18c64:	ldrb	r2, [r1, #25]
   18c68:	cmp	r2, #0
   18c6c:	bne	18e28 <__assert_fail@plt+0x6b08>
   18c70:	rsb	r9, r4, r5
   18c74:	str	r2, [sp, #28]
   18c78:	str	r2, [r6, #4]
   18c7c:	mov	r2, r9
   18c80:	mov	sl, #0
   18c84:	mov	r9, r5
   18c88:	add	r7, sp, #36	; 0x24
   18c8c:	add	r8, sp, #24
   18c90:	mov	fp, #1
   18c94:	ldr	r5, [sp, #4]
   18c98:	b	18cb0 <__assert_fail@plt+0x6990>
   18c9c:	add	sl, sl, #1
   18ca0:	mov	r4, r0
   18ca4:	cmp	sl, r5
   18ca8:	beq	18cf8 <__assert_fail@plt+0x69d8>
   18cac:	rsb	r2, r0, r9
   18cb0:	ldm	r6, {r0, r1}
   18cb4:	mov	r3, r6
   18cb8:	stm	r7, {r0, r1}
   18cbc:	mov	r0, r8
   18cc0:	mov	r1, r4
   18cc4:	bl	12014 <mbrtowc@plt>
   18cc8:	cmp	r0, #0
   18ccc:	str	r0, [sp, #20]
   18cd0:	beq	18ce4 <__assert_fail@plt+0x69c4>
   18cd4:	cmn	r0, #2
   18cd8:	bcc	18cec <__assert_fail@plt+0x69cc>
   18cdc:	ldm	r7, {r0, r1}
   18ce0:	stm	r6, {r0, r1}
   18ce4:	mov	r0, #1
   18ce8:	str	fp, [sp, #20]
   18cec:	add	r0, r4, r0
   18cf0:	cmp	r9, r0
   18cf4:	bcs	18c9c <__assert_fail@plt+0x697c>
   18cf8:	ldr	r1, [sp, #12]
   18cfc:	mov	r0, r4
   18d00:	ldr	r2, [sp, #44]	; 0x2c
   18d04:	ldr	r3, [r1]
   18d08:	cmp	r2, r3
   18d0c:	bne	18e88 <__assert_fail@plt+0x6b68>
   18d10:	add	sp, sp, #52	; 0x34
   18d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d18:	cmp	r4, r5
   18d1c:	bcs	18c54 <__assert_fail@plt+0x6934>
   18d20:	cmp	r3, #0
   18d24:	sub	r3, r3, #1
   18d28:	str	r3, [sp]
   18d2c:	beq	18c54 <__assert_fail@plt+0x6934>
   18d30:	add	r8, r8, #4
   18d34:	add	r9, sp, #24
   18d38:	mov	sl, #1
   18d3c:	b	18d90 <__assert_fail@plt+0x6a70>
   18d40:	ldm	r6, {r0, r1}
   18d44:	add	fp, sp, #36	; 0x24
   18d48:	rsb	r2, r4, r5
   18d4c:	mov	r3, r6
   18d50:	stm	fp, {r0, r1}
   18d54:	mov	r0, r9
   18d58:	mov	r1, r4
   18d5c:	bl	12014 <mbrtowc@plt>
   18d60:	cmp	r0, #0
   18d64:	str	r0, [sp, #20]
   18d68:	beq	18d7c <__assert_fail@plt+0x6a5c>
   18d6c:	cmn	r0, #2
   18d70:	bcc	18d84 <__assert_fail@plt+0x6a64>
   18d74:	ldm	fp, {r0, r1}
   18d78:	stm	r6, {r0, r1}
   18d7c:	mov	r0, #1
   18d80:	str	sl, [sp, #20]
   18d84:	add	r4, r4, r0
   18d88:	cmp	r5, r4
   18d8c:	bls	18c54 <__assert_fail@plt+0x6934>
   18d90:	mov	r0, r4
   18d94:	mov	r1, r8
   18d98:	mov	r2, r7
   18d9c:	bl	11eac <memcmp@plt>
   18da0:	cmp	r0, #0
   18da4:	bne	18d40 <__assert_fail@plt+0x6a20>
   18da8:	cmp	r5, r4
   18dac:	bls	18c54 <__assert_fail@plt+0x6934>
   18db0:	ldr	r3, [sp]
   18db4:	ldr	r1, [sp, #4]
   18db8:	orrs	r3, r3, r1
   18dbc:	beq	18c54 <__assert_fail@plt+0x6934>
   18dc0:	ldm	r6, {r0, r1}
   18dc4:	add	fp, sp, #36	; 0x24
   18dc8:	rsb	r2, r4, r5
   18dcc:	mov	r3, r6
   18dd0:	stm	fp, {r0, r1}
   18dd4:	mov	r0, r9
   18dd8:	mov	r1, r4
   18ddc:	bl	12014 <mbrtowc@plt>
   18de0:	cmp	r0, #0
   18de4:	str	r0, [sp, #20]
   18de8:	beq	18dfc <__assert_fail@plt+0x6adc>
   18dec:	cmn	r0, #2
   18df0:	bcc	18e04 <__assert_fail@plt+0x6ae4>
   18df4:	ldm	fp, {r0, r1}
   18df8:	stm	r6, {r0, r1}
   18dfc:	mov	r0, #1
   18e00:	str	sl, [sp, #20]
   18e04:	add	r4, r4, r0
   18e08:	cmp	r5, r4
   18e0c:	bls	18c54 <__assert_fail@plt+0x6934>
   18e10:	ldr	r2, [sp]
   18e14:	cmp	r2, #0
   18e18:	sub	r3, r2, #1
   18e1c:	beq	18c54 <__assert_fail@plt+0x6934>
   18e20:	str	r3, [sp]
   18e24:	b	18d90 <__assert_fail@plt+0x6a70>
   18e28:	cmp	r4, r5
   18e2c:	addcc	r7, sp, #20
   18e30:	bcc	18e48 <__assert_fail@plt+0x6b28>
   18e34:	b	18e74 <__assert_fail@plt+0x6b54>
   18e38:	ldr	r3, [sp, #20]
   18e3c:	add	r4, r4, r3
   18e40:	cmp	r5, r4
   18e44:	bls	18e74 <__assert_fail@plt+0x6b54>
   18e48:	rsb	r9, r4, r5
   18e4c:	mov	r0, r4
   18e50:	mov	r2, r7
   18e54:	mov	r1, r9
   18e58:	bl	18434 <__assert_fail@plt+0x6114>
   18e5c:	cmp	r0, #0
   18e60:	bne	18e38 <__assert_fail@plt+0x6b18>
   18e64:	mov	r2, #0
   18e68:	str	r2, [sp, #28]
   18e6c:	str	r2, [r6, #4]
   18e70:	b	18c7c <__assert_fail@plt+0x695c>
   18e74:	mov	r2, #0
   18e78:	rsb	r9, r4, r5
   18e7c:	str	r2, [sp, #28]
   18e80:	str	r2, [r6, #4]
   18e84:	b	18c7c <__assert_fail@plt+0x695c>
   18e88:	bl	11ed0 <__stack_chk_fail@plt>
   18e8c:	strdeq	pc, [r1], -r8
   18e90:	andeq	r0, r0, ip, lsl r2
   18e94:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   18e98:	ldr	r2, [pc, #848]	; 191f0 <__assert_fail@plt+0x6ed0>
   18e9c:	mov	r3, #0
   18ea0:	ldr	ip, [pc, #844]	; 191f4 <__assert_fail@plt+0x6ed4>
   18ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ea8:	add	r2, pc, r2
   18eac:	sub	sp, sp, #52	; 0x34
   18eb0:	ldr	r8, [pc, #832]	; 191f8 <__assert_fail@plt+0x6ed8>
   18eb4:	ldr	r5, [r0, #4]
   18eb8:	add	r6, sp, #28
   18ebc:	str	r1, [sp, #4]
   18ec0:	add	r8, pc, r8
   18ec4:	ldr	ip, [r2, ip]
   18ec8:	sub	r5, r5, #1
   18ecc:	ldr	r7, [r8]
   18ed0:	ldr	r9, [r1]
   18ed4:	ldr	r2, [ip]
   18ed8:	cmp	r7, r3
   18edc:	ldr	r1, [r1, #4]
   18ee0:	ldr	r4, [r0]
   18ee4:	str	r3, [r6, #4]
   18ee8:	str	ip, [sp, #8]
   18eec:	add	r5, r4, r5
   18ef0:	str	r1, [sp, #12]
   18ef4:	str	r2, [sp, #44]	; 0x2c
   18ef8:	str	r3, [sp, #28]
   18efc:	bne	190d8 <__assert_fail@plt+0x6db8>
   18f00:	cmp	r4, r5
   18f04:	bcs	19038 <__assert_fail@plt+0x6d18>
   18f08:	cmp	r9, r3
   18f0c:	sub	r9, r9, #1
   18f10:	beq	191dc <__assert_fail@plt+0x6ebc>
   18f14:	rsb	r7, r4, r5
   18f18:	add	r8, sp, #20
   18f1c:	add	sl, sp, #24
   18f20:	b	18f38 <__assert_fail@plt+0x6c18>
   18f24:	ldr	r2, [sp, #20]
   18f28:	add	r4, r4, r2
   18f2c:	cmp	r5, r4
   18f30:	bls	18ff0 <__assert_fail@plt+0x6cd0>
   18f34:	rsb	r7, r4, r5
   18f38:	mov	r0, r4
   18f3c:	mov	r1, r7
   18f40:	mov	r2, r8
   18f44:	bl	18434 <__assert_fail@plt+0x6114>
   18f48:	cmp	r0, #0
   18f4c:	bne	18f24 <__assert_fail@plt+0x6c04>
   18f50:	cmp	r5, r4
   18f54:	bls	18ff0 <__assert_fail@plt+0x6cd0>
   18f58:	ldm	r6, {r0, r1}
   18f5c:	add	fp, sp, #36	; 0x24
   18f60:	mov	r2, r7
   18f64:	mov	r3, r6
   18f68:	stm	fp, {r0, r1}
   18f6c:	mov	r0, sl
   18f70:	mov	r1, r4
   18f74:	bl	12014 <mbrtowc@plt>
   18f78:	cmp	r0, #0
   18f7c:	str	r0, [sp, #20]
   18f80:	beq	18f94 <__assert_fail@plt+0x6c74>
   18f84:	cmn	r0, #2
   18f88:	bcc	18fa0 <__assert_fail@plt+0x6c80>
   18f8c:	ldm	fp, {r0, r1}
   18f90:	stm	r6, {r0, r1}
   18f94:	mov	r3, #1
   18f98:	str	r3, [sp, #20]
   18f9c:	mov	r0, r3
   18fa0:	add	r4, r4, r0
   18fa4:	cmp	r5, r4
   18fa8:	bhi	18fc0 <__assert_fail@plt+0x6ca0>
   18fac:	b	18ff0 <__assert_fail@plt+0x6cd0>
   18fb0:	ldr	r3, [sp, #20]
   18fb4:	add	r4, r4, r3
   18fb8:	cmp	r5, r4
   18fbc:	bls	18ff0 <__assert_fail@plt+0x6cd0>
   18fc0:	rsb	r7, r4, r5
   18fc4:	mov	r0, r4
   18fc8:	mov	r2, r8
   18fcc:	mov	r1, r7
   18fd0:	bl	18434 <__assert_fail@plt+0x6114>
   18fd4:	cmp	r0, #0
   18fd8:	beq	18fb0 <__assert_fail@plt+0x6c90>
   18fdc:	cmp	r5, r4
   18fe0:	bls	18ff0 <__assert_fail@plt+0x6cd0>
   18fe4:	cmp	r9, #0
   18fe8:	sub	r9, r9, #1
   18fec:	bne	18f38 <__assert_fail@plt+0x6c18>
   18ff0:	ldr	r1, [sp, #4]
   18ff4:	ldrb	r3, [r1, #24]
   18ff8:	cmp	r3, #0
   18ffc:	beq	19038 <__assert_fail@plt+0x6d18>
   19000:	cmp	r4, r5
   19004:	bcs	19038 <__assert_fail@plt+0x6d18>
   19008:	add	r8, sp, #20
   1900c:	b	19020 <__assert_fail@plt+0x6d00>
   19010:	ldr	r3, [sp, #20]
   19014:	add	r4, r4, r3
   19018:	cmp	r5, r4
   1901c:	bls	19038 <__assert_fail@plt+0x6d18>
   19020:	mov	r0, r4
   19024:	rsb	r1, r4, r5
   19028:	mov	r2, r8
   1902c:	bl	18434 <__assert_fail@plt+0x6114>
   19030:	cmp	r0, #0
   19034:	bne	19010 <__assert_fail@plt+0x6cf0>
   19038:	ldr	r2, [sp, #12]
   1903c:	cmp	r2, #0
   19040:	beq	190b8 <__assert_fail@plt+0x6d98>
   19044:	add	r7, sp, #36	; 0x24
   19048:	add	r8, sp, #24
   1904c:	mov	sl, #0
   19050:	mov	r9, #1
   19054:	mov	fp, r2
   19058:	b	1906c <__assert_fail@plt+0x6d4c>
   1905c:	add	sl, sl, #1
   19060:	mov	r4, r0
   19064:	cmp	sl, fp
   19068:	beq	190b8 <__assert_fail@plt+0x6d98>
   1906c:	ldm	r6, {r0, r1}
   19070:	rsb	r2, r4, r5
   19074:	mov	r3, r6
   19078:	stm	r7, {r0, r1}
   1907c:	mov	r0, r8
   19080:	mov	r1, r4
   19084:	bl	12014 <mbrtowc@plt>
   19088:	cmp	r0, #0
   1908c:	str	r0, [sp, #20]
   19090:	beq	190a4 <__assert_fail@plt+0x6d84>
   19094:	cmn	r0, #2
   19098:	bcc	190ac <__assert_fail@plt+0x6d8c>
   1909c:	ldm	r7, {r0, r1}
   190a0:	stm	r6, {r0, r1}
   190a4:	mov	r0, #1
   190a8:	str	r9, [sp, #20]
   190ac:	add	r0, r4, r0
   190b0:	cmp	r5, r0
   190b4:	bcs	1905c <__assert_fail@plt+0x6d3c>
   190b8:	ldr	r1, [sp, #8]
   190bc:	mov	r0, r4
   190c0:	ldr	r2, [sp, #44]	; 0x2c
   190c4:	ldr	r3, [r1]
   190c8:	cmp	r2, r3
   190cc:	bne	191d8 <__assert_fail@plt+0x6eb8>
   190d0:	add	sp, sp, #52	; 0x34
   190d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190d8:	cmp	r4, r5
   190dc:	bcs	19038 <__assert_fail@plt+0x6d18>
   190e0:	cmp	r9, #0
   190e4:	sub	r9, r9, #1
   190e8:	str	r9, [sp]
   190ec:	beq	191dc <__assert_fail@plt+0x6ebc>
   190f0:	add	r8, r8, #4
   190f4:	add	r9, sp, #24
   190f8:	mov	sl, #1
   190fc:	b	19150 <__assert_fail@plt+0x6e30>
   19100:	ldm	r6, {r0, r1}
   19104:	add	fp, sp, #36	; 0x24
   19108:	rsb	r2, r4, r5
   1910c:	mov	r3, r6
   19110:	stm	fp, {r0, r1}
   19114:	mov	r0, r9
   19118:	mov	r1, r4
   1911c:	bl	12014 <mbrtowc@plt>
   19120:	cmp	r0, #0
   19124:	str	r0, [sp, #20]
   19128:	beq	1913c <__assert_fail@plt+0x6e1c>
   1912c:	cmn	r0, #2
   19130:	bcc	19144 <__assert_fail@plt+0x6e24>
   19134:	ldm	fp, {r0, r1}
   19138:	stm	r6, {r0, r1}
   1913c:	mov	r0, #1
   19140:	str	sl, [sp, #20]
   19144:	add	r4, r4, r0
   19148:	cmp	r5, r4
   1914c:	bls	18ff0 <__assert_fail@plt+0x6cd0>
   19150:	mov	r0, r4
   19154:	mov	r1, r8
   19158:	mov	r2, r7
   1915c:	bl	11eac <memcmp@plt>
   19160:	cmp	r0, #0
   19164:	bne	19100 <__assert_fail@plt+0x6de0>
   19168:	cmp	r5, r4
   1916c:	bls	18ff0 <__assert_fail@plt+0x6cd0>
   19170:	ldm	r6, {r0, r1}
   19174:	add	fp, sp, #36	; 0x24
   19178:	rsb	r2, r4, r5
   1917c:	mov	r3, r6
   19180:	stm	fp, {r0, r1}
   19184:	mov	r0, r9
   19188:	mov	r1, r4
   1918c:	bl	12014 <mbrtowc@plt>
   19190:	cmp	r0, #0
   19194:	str	r0, [sp, #20]
   19198:	beq	191ac <__assert_fail@plt+0x6e8c>
   1919c:	cmn	r0, #2
   191a0:	bcc	191b4 <__assert_fail@plt+0x6e94>
   191a4:	ldm	fp, {r0, r1}
   191a8:	stm	r6, {r0, r1}
   191ac:	mov	r0, #1
   191b0:	str	sl, [sp, #20]
   191b4:	add	r4, r4, r0
   191b8:	cmp	r5, r4
   191bc:	bls	19038 <__assert_fail@plt+0x6d18>
   191c0:	ldr	r2, [sp]
   191c4:	cmp	r2, #0
   191c8:	sub	r3, r2, #1
   191cc:	beq	191dc <__assert_fail@plt+0x6ebc>
   191d0:	str	r3, [sp]
   191d4:	b	19150 <__assert_fail@plt+0x6e30>
   191d8:	bl	11ed0 <__stack_chk_fail@plt>
   191dc:	ldr	r2, [sp, #4]
   191e0:	ldrb	r3, [r2, #24]
   191e4:	cmp	r3, #0
   191e8:	bne	19008 <__assert_fail@plt+0x6ce8>
   191ec:	b	19038 <__assert_fail@plt+0x6d18>
   191f0:	andeq	pc, r1, r0, asr r1	; <UNPREDICTABLE>
   191f4:	andeq	r0, r0, ip, lsl r2
   191f8:	andeq	pc, r1, r8, ror #8
   191fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19200:	sub	sp, sp, #196	; 0xc4
   19204:	ldr	r3, [pc, #2468]	; 19bb0 <__assert_fail@plt+0x7890>
   19208:	add	ip, sp, #140	; 0x8c
   1920c:	ldr	r2, [pc, #2464]	; 19bb4 <__assert_fail@plt+0x7894>
   19210:	str	ip, [sp, #92]	; 0x5c
   19214:	add	ip, sp, #148	; 0x94
   19218:	str	ip, [sp, #96]	; 0x60
   1921c:	add	r3, pc, r3
   19220:	ldr	ip, [r0, #12]
   19224:	str	r1, [sp, #60]	; 0x3c
   19228:	str	r0, [sp, #56]	; 0x38
   1922c:	str	ip, [sp, #44]	; 0x2c
   19230:	ldr	r2, [r3, r2]
   19234:	mov	r3, #0
   19238:	ldr	r9, [r0, #8]
   1923c:	ldr	r1, [pc, #2420]	; 19bb8 <__assert_fail@plt+0x7898>
   19240:	str	r2, [sp, #108]	; 0x6c
   19244:	rsb	r2, ip, r9
   19248:	ldr	ip, [sp, #60]	; 0x3c
   1924c:	cmp	r2, r3
   19250:	add	r1, pc, r1
   19254:	str	r3, [sp, #144]	; 0x90
   19258:	str	r3, [sp, #140]	; 0x8c
   1925c:	ldr	r6, [ip, #8]
   19260:	ldr	ip, [sp, #108]	; 0x6c
   19264:	ldr	r1, [r1, #1356]	; 0x54c
   19268:	str	r3, [sp, #148]	; 0x94
   1926c:	ldr	r2, [ip]
   19270:	ldr	ip, [sp, #60]	; 0x3c
   19274:	str	r1, [sp, #12]
   19278:	str	r2, [sp, #188]	; 0xbc
   1927c:	ldr	ip, [ip, #12]
   19280:	str	r3, [sp, #152]	; 0x98
   19284:	str	ip, [sp, #48]	; 0x30
   19288:	ble	192ac <__assert_fail@plt+0x6f8c>
   1928c:	mov	r0, #0
   19290:	ldr	ip, [sp, #108]	; 0x6c
   19294:	ldr	r2, [sp, #188]	; 0xbc
   19298:	ldr	r3, [ip]
   1929c:	cmp	r2, r3
   192a0:	bne	19b88 <__assert_fail@plt+0x7868>
   192a4:	add	sp, sp, #196	; 0xc4
   192a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192ac:	ldr	ip, [pc, #2312]	; 19bbc <__assert_fail@plt+0x789c>
   192b0:	add	ip, pc, ip
   192b4:	str	ip, [sp, #72]	; 0x48
   192b8:	ldr	ip, [pc, #2304]	; 19bc0 <__assert_fail@plt+0x78a0>
   192bc:	add	ip, pc, ip
   192c0:	str	ip, [sp, #76]	; 0x4c
   192c4:	ldr	ip, [sp, #72]	; 0x48
   192c8:	add	ip, ip, #800	; 0x320
   192cc:	str	ip, [sp, #64]	; 0x40
   192d0:	ldr	ip, [pc, #2284]	; 19bc4 <__assert_fail@plt+0x78a4>
   192d4:	add	ip, pc, ip
   192d8:	str	ip, [sp, #112]	; 0x70
   192dc:	ldr	ip, [sp, #76]	; 0x4c
   192e0:	add	ip, ip, #800	; 0x320
   192e4:	str	ip, [sp, #68]	; 0x44
   192e8:	ldr	ip, [pc, #2264]	; 19bc8 <__assert_fail@plt+0x78a8>
   192ec:	add	ip, pc, ip
   192f0:	str	ip, [sp, #116]	; 0x74
   192f4:	ldr	ip, [sp, #44]	; 0x2c
   192f8:	cmp	r9, ip
   192fc:	rsbcc	fp, r9, ip
   19300:	ldr	ip, [sp, #48]	; 0x30
   19304:	movcs	fp, #0
   19308:	cmp	r6, ip
   1930c:	rsbcc	r7, r6, ip
   19310:	ldr	ip, [sp, #12]
   19314:	movcs	r7, #0
   19318:	ldr	r8, [ip, #16]
   1931c:	ldr	r3, [ip, #20]
   19320:	adds	ip, r8, #0
   19324:	movne	ip, #1
   19328:	adds	r3, r3, #0
   1932c:	str	ip, [sp, #32]
   19330:	movne	r3, #1
   19334:	orrs	ip, r3, ip
   19338:	str	r3, [sp, #28]
   1933c:	str	ip, [sp, #52]	; 0x34
   19340:	bne	19614 <__assert_fail@plt+0x72f4>
   19344:	ldrb	ip, [r9, fp]
   19348:	str	ip, [sp, #80]	; 0x50
   1934c:	ldr	ip, [sp, #52]	; 0x34
   19350:	strb	ip, [r9, fp]
   19354:	ldrb	ip, [r6, r7]
   19358:	str	ip, [sp, #84]	; 0x54
   1935c:	ldr	ip, [sp, #52]	; 0x34
   19360:	strb	ip, [r6, r7]
   19364:	ldr	ip, [sp, #12]
   19368:	ldrb	r3, [ip, #27]
   1936c:	cmp	r3, #0
   19370:	bne	195f8 <__assert_fail@plt+0x72d8>
   19374:	ldr	ip, [sp, #12]
   19378:	ldrb	r0, [ip, #28]
   1937c:	ldrb	r1, [ip, #26]
   19380:	ldrb	r2, [ip, #29]
   19384:	orr	r1, r0, r1
   19388:	orrs	r2, r1, r2
   1938c:	beq	19590 <__assert_fail@plt+0x7270>
   19390:	ldr	ip, [sp, #44]	; 0x2c
   19394:	ldrb	r5, [ip]
   19398:	ldr	ip, [sp, #48]	; 0x30
   1939c:	ldrb	r4, [ip]
   193a0:	strb	r3, [ip]
   193a4:	ldr	ip, [sp, #44]	; 0x2c
   193a8:	strb	r3, [ip]
   193ac:	ldr	ip, [sp, #12]
   193b0:	ldrb	r3, [ip, #26]
   193b4:	cmp	r3, #0
   193b8:	bne	19a68 <__assert_fail@plt+0x7748>
   193bc:	ldr	ip, [sp, #12]
   193c0:	mov	r0, r9
   193c4:	mov	r1, r6
   193c8:	ldrb	r3, [ip, #28]
   193cc:	cmp	r3, #0
   193d0:	beq	19a5c <__assert_fail@plt+0x773c>
   193d4:	bl	17b18 <__assert_fail@plt+0x57f8>
   193d8:	mov	r8, r0
   193dc:	ldr	ip, [sp, #44]	; 0x2c
   193e0:	strb	r5, [ip]
   193e4:	ldr	ip, [sp, #48]	; 0x30
   193e8:	strb	r4, [ip]
   193ec:	ldr	ip, [sp, #52]	; 0x34
   193f0:	cmp	ip, #0
   193f4:	bne	195cc <__assert_fail@plt+0x72ac>
   193f8:	ldr	ip, [sp, #80]	; 0x50
   193fc:	cmp	r8, #0
   19400:	strb	ip, [r9, fp]
   19404:	ldr	ip, [sp, #84]	; 0x54
   19408:	strb	ip, [r6, r7]
   1940c:	bne	195dc <__assert_fail@plt+0x72bc>
   19410:	ldr	ip, [sp, #12]
   19414:	ldr	ip, [ip, #36]	; 0x24
   19418:	cmp	ip, #0
   1941c:	str	ip, [sp, #12]
   19420:	beq	1928c <__assert_fail@plt+0x6f6c>
   19424:	ldr	r3, [ip, #8]
   19428:	cmn	r3, #1
   1942c:	beq	194a4 <__assert_fail@plt+0x7184>
   19430:	ldr	r4, [pc, #1940]	; 19bcc <__assert_fail@plt+0x78ac>
   19434:	mov	r1, ip
   19438:	ldr	r0, [sp, #56]	; 0x38
   1943c:	add	r4, pc, r4
   19440:	ldr	r3, [r4, #1380]	; 0x564
   19444:	blx	r3
   19448:	ldr	r3, [r4, #1380]	; 0x564
   1944c:	ldr	r1, [sp, #12]
   19450:	str	r0, [sp, #44]	; 0x2c
   19454:	ldr	r0, [sp, #60]	; 0x3c
   19458:	blx	r3
   1945c:	ldr	ip, [sp, #12]
   19460:	ldr	r3, [ip]
   19464:	cmn	r3, #1
   19468:	str	r0, [sp, #48]	; 0x30
   1946c:	beq	194ec <__assert_fail@plt+0x71cc>
   19470:	ldr	r4, [pc, #1880]	; 19bd0 <__assert_fail@plt+0x78b0>
   19474:	mov	r1, ip
   19478:	ldr	r0, [sp, #56]	; 0x38
   1947c:	add	r4, pc, r4
   19480:	ldr	r3, [r4, #1376]	; 0x560
   19484:	blx	r3
   19488:	ldr	r3, [r4, #1376]	; 0x560
   1948c:	ldr	r1, [sp, #12]
   19490:	mov	r9, r0
   19494:	ldr	r0, [sp, #60]	; 0x3c
   19498:	blx	r3
   1949c:	mov	r6, r0
   194a0:	b	192f4 <__assert_fail@plt+0x6fd4>
   194a4:	ldr	ip, [sp, #56]	; 0x38
   194a8:	ldr	r1, [ip, #4]
   194ac:	ldr	ip, [sp, #60]	; 0x3c
   194b0:	sub	r1, r1, #1
   194b4:	ldr	r3, [ip, #4]
   194b8:	ldr	ip, [sp, #56]	; 0x38
   194bc:	sub	r3, r3, #1
   194c0:	ldr	r0, [ip]
   194c4:	ldr	ip, [sp, #60]	; 0x3c
   194c8:	add	r0, r0, r1
   194cc:	str	r0, [sp, #44]	; 0x2c
   194d0:	ldr	r2, [ip]
   194d4:	ldr	ip, [sp, #12]
   194d8:	add	r2, r2, r3
   194dc:	str	r2, [sp, #48]	; 0x30
   194e0:	ldr	r3, [ip]
   194e4:	cmn	r3, #1
   194e8:	bne	19470 <__assert_fail@plt+0x7150>
   194ec:	ldr	ip, [sp, #12]
   194f0:	ldrb	r3, [ip, #24]
   194f4:	ldr	ip, [sp, #56]	; 0x38
   194f8:	cmp	r3, #0
   194fc:	ldr	r9, [ip]
   19500:	ldr	ip, [sp, #60]	; 0x3c
   19504:	ldr	r6, [ip]
   19508:	beq	192f4 <__assert_fail@plt+0x6fd4>
   1950c:	ldr	ip, [sp, #44]	; 0x2c
   19510:	cmp	ip, r9
   19514:	addhi	r4, sp, #124	; 0x7c
   19518:	ldrhi	r5, [sp, #44]	; 0x2c
   1951c:	bhi	19534 <__assert_fail@plt+0x7214>
   19520:	b	1954c <__assert_fail@plt+0x722c>
   19524:	ldr	r3, [sp, #124]	; 0x7c
   19528:	add	r9, r9, r3
   1952c:	cmp	r5, r9
   19530:	bls	1954c <__assert_fail@plt+0x722c>
   19534:	mov	r0, r9
   19538:	rsb	r1, r9, r5
   1953c:	mov	r2, r4
   19540:	bl	18434 <__assert_fail@plt+0x6114>
   19544:	cmp	r0, #0
   19548:	bne	19524 <__assert_fail@plt+0x7204>
   1954c:	ldr	ip, [sp, #48]	; 0x30
   19550:	cmp	ip, r6
   19554:	bls	192f4 <__assert_fail@plt+0x6fd4>
   19558:	add	r4, sp, #128	; 0x80
   1955c:	mov	r5, ip
   19560:	b	19574 <__assert_fail@plt+0x7254>
   19564:	ldr	r3, [sp, #128]	; 0x80
   19568:	add	r6, r6, r3
   1956c:	cmp	r5, r6
   19570:	bls	192f4 <__assert_fail@plt+0x6fd4>
   19574:	mov	r0, r6
   19578:	rsb	r1, r6, r5
   1957c:	mov	r2, r4
   19580:	bl	18434 <__assert_fail@plt+0x6114>
   19584:	cmp	r0, #0
   19588:	bne	19564 <__assert_fail@plt+0x7244>
   1958c:	b	192f4 <__assert_fail@plt+0x6fd4>
   19590:	ldr	ip, [sp, #12]
   19594:	ldrb	r4, [ip, #32]
   19598:	cmp	r4, #0
   1959c:	bne	19a88 <__assert_fail@plt+0x7768>
   195a0:	ldr	ip, [sp, #12]
   195a4:	ldrb	r3, [ip, #30]
   195a8:	cmp	r3, #0
   195ac:	bne	19af8 <__assert_fail@plt+0x77d8>
   195b0:	cmp	fp, #0
   195b4:	bne	19a9c <__assert_fail@plt+0x777c>
   195b8:	ldr	ip, [sp, #52]	; 0x34
   195bc:	subs	r8, r7, #0
   195c0:	mvnne	r8, #0
   195c4:	cmp	ip, #0
   195c8:	beq	193f8 <__assert_fail@plt+0x70d8>
   195cc:	mov	r0, r9
   195d0:	bl	11dec <free@plt>
   195d4:	cmp	r8, #0
   195d8:	beq	19410 <__assert_fail@plt+0x70f0>
   195dc:	ldr	ip, [sp, #12]
   195e0:	mov	r7, r8
   195e4:	ldrb	r3, [ip, #31]
   195e8:	cmp	r3, #0
   195ec:	moveq	r0, r8
   195f0:	rsbne	r0, r7, #0
   195f4:	b	19290 <__assert_fail@plt+0x6f70>
   195f8:	mov	r0, r9
   195fc:	mov	r1, fp
   19600:	mov	r2, r6
   19604:	mov	r3, r7
   19608:	bl	1623c <__assert_fail@plt+0x3f1c>
   1960c:	mov	r8, r0
   19610:	b	193ec <__assert_fail@plt+0x70cc>
   19614:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   19618:	add	r3, r7, fp
   1961c:	mul	r0, r3, r0
   19620:	add	r0, r0, #2
   19624:	bl	226ec <__assert_fail@plt+0x103cc>
   19628:	str	r0, [sp, #36]	; 0x24
   1962c:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   19630:	ldr	ip, [sp, #36]	; 0x24
   19634:	cmp	fp, #0
   19638:	mla	r0, fp, r0, ip
   1963c:	add	r0, r0, #1
   19640:	str	r0, [sp, #40]	; 0x28
   19644:	beq	19b54 <__assert_fail@plt+0x7834>
   19648:	mov	r5, #0
   1964c:	add	ip, sp, #164	; 0xa4
   19650:	str	r6, [sp, #100]	; 0x64
   19654:	add	r4, sp, #172	; 0xac
   19658:	str	ip, [sp, #8]
   1965c:	mov	sl, r5
   19660:	add	ip, sp, #132	; 0x84
   19664:	str	r5, [sp, #88]	; 0x58
   19668:	str	ip, [sp, #16]
   1966c:	add	r6, sp, #140	; 0x8c
   19670:	add	ip, sp, #156	; 0x9c
   19674:	str	r9, [sp, #20]
   19678:	str	ip, [sp, #24]
   1967c:	str	r7, [sp, #104]	; 0x68
   19680:	b	196b4 <__assert_fail@plt+0x7394>
   19684:	cmp	r0, #0
   19688:	add	r5, r5, #1
   1968c:	ldrne	ip, [sp, #8]
   19690:	ldmne	ip, {r0, r1}
   19694:	stmne	r6, {r0, r1}
   19698:	cmp	r8, #0
   1969c:	ldrbeq	r3, [r7]
   196a0:	ldreq	ip, [sp, #36]	; 0x24
   196a4:	strbeq	r3, [ip, sl]
   196a8:	addeq	sl, sl, #1
   196ac:	cmp	fp, r5
   196b0:	bls	197a4 <__assert_fail@plt+0x7484>
   196b4:	ldr	ip, [sp, #20]
   196b8:	mov	r3, r6
   196bc:	ldm	r6, {r0, r1}
   196c0:	rsb	r2, r5, fp
   196c4:	add	r7, ip, r5
   196c8:	ldr	ip, [sp, #8]
   196cc:	stm	ip, {r0, r1}
   196d0:	mov	r1, r7
   196d4:	add	r0, sp, #132	; 0x84
   196d8:	bl	12014 <mbrtowc@plt>
   196dc:	sub	r3, r0, #1
   196e0:	mov	r9, r0
   196e4:	cmn	r3, #4
   196e8:	str	r0, [sp, #124]	; 0x7c
   196ec:	bhi	19684 <__assert_fail@plt+0x7364>
   196f0:	ldr	ip, [sp, #32]
   196f4:	cmp	ip, #0
   196f8:	beq	19718 <__assert_fail@plt+0x73f8>
   196fc:	ldr	ip, [sp, #68]	; 0x44
   19700:	cmp	r8, ip
   19704:	beq	19980 <__assert_fail@plt+0x7660>
   19708:	ldr	ip, [sp, #76]	; 0x4c
   1970c:	add	r3, ip, #544	; 0x220
   19710:	cmp	r8, r3
   19714:	beq	19998 <__assert_fail@plt+0x7678>
   19718:	ldr	ip, [sp, #28]
   1971c:	cmp	ip, #0
   19720:	beq	19954 <__assert_fail@plt+0x7634>
   19724:	ldr	r2, [sp, #132]	; 0x84
   19728:	mov	r0, r2
   1972c:	str	r2, [sp, #4]
   19730:	bl	122d8 <towupper@plt>
   19734:	ldr	r2, [sp, #4]
   19738:	cmp	r2, r0
   1973c:	mov	r3, r0
   19740:	beq	19934 <__assert_fail@plt+0x7614>
   19744:	mov	r1, r0
   19748:	add	r2, sp, #156	; 0x9c
   1974c:	mov	r0, r4
   19750:	str	r3, [sp, #132]	; 0x84
   19754:	mov	r3, #0
   19758:	str	r3, [sp, #156]	; 0x9c
   1975c:	str	r3, [sp, #160]	; 0xa0
   19760:	bl	11d50 <wcrtomb@plt>
   19764:	add	r5, r5, r9
   19768:	sub	r3, r0, #1
   1976c:	str	r0, [sp, #124]	; 0x7c
   19770:	cmn	r3, #3
   19774:	bhi	19b8c <__assert_fail@plt+0x786c>
   19778:	ldr	ip, [sp, #36]	; 0x24
   1977c:	mov	r3, #0
   19780:	add	r1, ip, sl
   19784:	ldrb	r2, [r4, r3]
   19788:	strb	r2, [r1, r3]
   1978c:	add	r3, r3, #1
   19790:	cmp	r3, r0
   19794:	bne	19784 <__assert_fail@plt+0x7464>
   19798:	cmp	fp, r5
   1979c:	add	sl, sl, r3
   197a0:	bhi	196b4 <__assert_fail@plt+0x7394>
   197a4:	ldr	r6, [sp, #100]	; 0x64
   197a8:	ldr	r7, [sp, #104]	; 0x68
   197ac:	str	sl, [sp, #88]	; 0x58
   197b0:	ldr	r0, [sp, #36]	; 0x24
   197b4:	cmp	r7, #0
   197b8:	ldr	ip, [sp, #88]	; 0x58
   197bc:	mov	r5, #0
   197c0:	strb	r5, [r0, ip]
   197c4:	beq	19b4c <__assert_fail@plt+0x782c>
   197c8:	add	ip, sp, #164	; 0xa4
   197cc:	add	r4, sp, #172	; 0xac
   197d0:	str	ip, [sp, #8]
   197d4:	mov	sl, r5
   197d8:	add	ip, sp, #136	; 0x88
   197dc:	str	r6, [sp, #20]
   197e0:	str	ip, [sp, #16]
   197e4:	add	r9, sp, #148	; 0x94
   197e8:	add	ip, sp, #156	; 0x9c
   197ec:	str	ip, [sp, #24]
   197f0:	b	19824 <__assert_fail@plt+0x7504>
   197f4:	cmp	r0, #0
   197f8:	add	r5, r5, #1
   197fc:	ldrne	ip, [sp, #8]
   19800:	ldmne	ip, {r0, r1}
   19804:	stmne	r9, {r0, r1}
   19808:	cmp	r8, #0
   1980c:	ldrbeq	r3, [fp]
   19810:	ldreq	ip, [sp, #40]	; 0x28
   19814:	strbeq	r3, [ip, sl]
   19818:	addeq	sl, sl, #1
   1981c:	cmp	r7, r5
   19820:	bls	19914 <__assert_fail@plt+0x75f4>
   19824:	ldr	ip, [sp, #20]
   19828:	mov	r3, r9
   1982c:	ldm	r9, {r0, r1}
   19830:	rsb	r2, r5, r7
   19834:	add	fp, ip, r5
   19838:	ldr	ip, [sp, #8]
   1983c:	stm	ip, {r0, r1}
   19840:	mov	r1, fp
   19844:	add	r0, sp, #136	; 0x88
   19848:	bl	12014 <mbrtowc@plt>
   1984c:	sub	r3, r0, #1
   19850:	mov	r6, r0
   19854:	cmn	r3, #4
   19858:	str	r0, [sp, #128]	; 0x80
   1985c:	bhi	197f4 <__assert_fail@plt+0x74d4>
   19860:	ldr	ip, [sp, #32]
   19864:	cmp	ip, #0
   19868:	beq	19888 <__assert_fail@plt+0x7568>
   1986c:	ldr	ip, [sp, #64]	; 0x40
   19870:	cmp	r8, ip
   19874:	beq	19a14 <__assert_fail@plt+0x76f4>
   19878:	ldr	ip, [sp, #72]	; 0x48
   1987c:	add	r3, ip, #544	; 0x220
   19880:	cmp	r8, r3
   19884:	beq	19a2c <__assert_fail@plt+0x770c>
   19888:	ldr	ip, [sp, #28]
   1988c:	cmp	ip, #0
   19890:	beq	199e8 <__assert_fail@plt+0x76c8>
   19894:	ldr	r2, [sp, #136]	; 0x88
   19898:	mov	r0, r2
   1989c:	str	r2, [sp, #4]
   198a0:	bl	122d8 <towupper@plt>
   198a4:	ldr	r2, [sp, #4]
   198a8:	cmp	r2, r0
   198ac:	mov	r3, r0
   198b0:	beq	199c8 <__assert_fail@plt+0x76a8>
   198b4:	mov	r1, r0
   198b8:	add	r2, sp, #156	; 0x9c
   198bc:	mov	r0, r4
   198c0:	str	r3, [sp, #136]	; 0x88
   198c4:	mov	r3, #0
   198c8:	str	r3, [sp, #156]	; 0x9c
   198cc:	str	r3, [sp, #160]	; 0xa0
   198d0:	bl	11d50 <wcrtomb@plt>
   198d4:	add	r5, r5, r6
   198d8:	sub	r3, r0, #1
   198dc:	str	r0, [sp, #128]	; 0x80
   198e0:	cmn	r3, #3
   198e4:	bhi	19b64 <__assert_fail@plt+0x7844>
   198e8:	ldr	ip, [sp, #40]	; 0x28
   198ec:	mov	r3, #0
   198f0:	add	r1, ip, sl
   198f4:	ldrb	r2, [r4, r3]
   198f8:	strb	r2, [r1, r3]
   198fc:	add	r3, r3, #1
   19900:	cmp	r3, r0
   19904:	bne	198f4 <__assert_fail@plt+0x75d4>
   19908:	cmp	r7, r5
   1990c:	add	sl, sl, r3
   19910:	bhi	19824 <__assert_fail@plt+0x7504>
   19914:	ldr	ip, [sp, #40]	; 0x28
   19918:	mov	r3, #0
   1991c:	ldr	fp, [sp, #88]	; 0x58
   19920:	mov	r7, sl
   19924:	ldr	r9, [sp, #36]	; 0x24
   19928:	strb	r3, [ip, sl]
   1992c:	mov	r6, ip
   19930:	b	19364 <__assert_fail@plt+0x7044>
   19934:	mov	r1, r7
   19938:	mov	r0, r4
   1993c:	mov	r2, r9
   19940:	mov	r3, #16
   19944:	bl	11f9c <__memcpy_chk@plt>
   19948:	add	r5, r5, r9
   1994c:	mov	r0, r9
   19950:	b	19778 <__assert_fail@plt+0x7458>
   19954:	ldr	ip, [sp, #36]	; 0x24
   19958:	ldr	r3, [sp, #28]
   1995c:	add	r1, ip, sl
   19960:	ldrb	r2, [r7, r3]
   19964:	strb	r2, [r1, r3]
   19968:	add	r3, r3, #1
   1996c:	cmp	r3, r9
   19970:	bne	19960 <__assert_fail@plt+0x7640>
   19974:	add	sl, sl, r3
   19978:	add	r5, r5, r3
   1997c:	b	196ac <__assert_fail@plt+0x738c>
   19980:	ldr	r0, [sp, #132]	; 0x84
   19984:	bl	11f78 <iswprint@plt>
   19988:	cmp	r0, #0
   1998c:	bne	19718 <__assert_fail@plt+0x73f8>
   19990:	add	r5, r5, r9
   19994:	b	196ac <__assert_fail@plt+0x738c>
   19998:	ldr	r3, [sp, #132]	; 0x84
   1999c:	mov	r0, r3
   199a0:	str	r3, [sp, #4]
   199a4:	bl	12128 <iswalnum@plt>
   199a8:	ldr	r3, [sp, #4]
   199ac:	cmp	r0, #0
   199b0:	bne	19718 <__assert_fail@plt+0x73f8>
   199b4:	mov	r0, r3
   199b8:	bl	11e40 <iswblank@plt>
   199bc:	cmp	r0, #0
   199c0:	bne	19718 <__assert_fail@plt+0x73f8>
   199c4:	b	19990 <__assert_fail@plt+0x7670>
   199c8:	mov	r1, fp
   199cc:	mov	r0, r4
   199d0:	mov	r2, r6
   199d4:	mov	r3, #16
   199d8:	bl	11f9c <__memcpy_chk@plt>
   199dc:	add	r5, r5, r6
   199e0:	mov	r0, r6
   199e4:	b	198e8 <__assert_fail@plt+0x75c8>
   199e8:	ldr	ip, [sp, #40]	; 0x28
   199ec:	ldr	r3, [sp, #28]
   199f0:	add	r1, ip, sl
   199f4:	ldrb	r2, [fp, r3]
   199f8:	strb	r2, [r1, r3]
   199fc:	add	r3, r3, #1
   19a00:	cmp	r3, r6
   19a04:	bne	199f4 <__assert_fail@plt+0x76d4>
   19a08:	add	sl, sl, r3
   19a0c:	add	r5, r5, r3
   19a10:	b	1981c <__assert_fail@plt+0x74fc>
   19a14:	ldr	r0, [sp, #136]	; 0x88
   19a18:	bl	11f78 <iswprint@plt>
   19a1c:	cmp	r0, #0
   19a20:	bne	19888 <__assert_fail@plt+0x7568>
   19a24:	add	r5, r5, r6
   19a28:	b	1981c <__assert_fail@plt+0x74fc>
   19a2c:	ldr	r3, [sp, #136]	; 0x88
   19a30:	mov	r0, r3
   19a34:	str	r3, [sp, #4]
   19a38:	bl	12128 <iswalnum@plt>
   19a3c:	ldr	r3, [sp, #4]
   19a40:	cmp	r0, #0
   19a44:	bne	19888 <__assert_fail@plt+0x7568>
   19a48:	mov	r0, r3
   19a4c:	bl	11e40 <iswblank@plt>
   19a50:	cmp	r0, #0
   19a54:	bne	19888 <__assert_fail@plt+0x7568>
   19a58:	b	19a24 <__assert_fail@plt+0x7704>
   19a5c:	bl	160d0 <__assert_fail@plt+0x3db0>
   19a60:	mov	r8, r0
   19a64:	b	193dc <__assert_fail@plt+0x70bc>
   19a68:	ldr	r3, [pc, #356]	; 19bd4 <__assert_fail@plt+0x78b4>
   19a6c:	mov	r0, r9
   19a70:	mov	r1, r6
   19a74:	add	r3, pc, r3
   19a78:	ldr	r3, [r3, #1432]	; 0x598
   19a7c:	blx	r3
   19a80:	mov	r8, r0
   19a84:	b	193dc <__assert_fail@plt+0x70bc>
   19a88:	mov	r0, r9
   19a8c:	mov	r1, r6
   19a90:	bl	1d7ec <__assert_fail@plt+0xb4cc>
   19a94:	mov	r8, r0
   19a98:	b	193ec <__assert_fail@plt+0x70cc>
   19a9c:	cmp	r7, #0
   19aa0:	beq	19b5c <__assert_fail@plt+0x783c>
   19aa4:	ldr	ip, [sp, #112]	; 0x70
   19aa8:	mov	r0, r9
   19aac:	ldrb	r3, [ip, #1352]	; 0x548
   19ab0:	cmp	r3, #0
   19ab4:	beq	19ac4 <__assert_fail@plt+0x77a4>
   19ab8:	ldrb	r3, [ip, #1056]	; 0x420
   19abc:	cmp	r3, #0
   19ac0:	beq	19b34 <__assert_fail@plt+0x7814>
   19ac4:	cmp	r7, fp
   19ac8:	movcc	r2, r7
   19acc:	movcs	r2, fp
   19ad0:	mov	r1, r6
   19ad4:	bl	11eac <memcmp@plt>
   19ad8:	subs	r8, r0, #0
   19adc:	bne	193ec <__assert_fail@plt+0x70cc>
   19ae0:	cmp	fp, r7
   19ae4:	mvncc	r8, #0
   19ae8:	bcc	193ec <__assert_fail@plt+0x70cc>
   19aec:	moveq	r8, #0
   19af0:	movne	r8, #1
   19af4:	b	193ec <__assert_fail@plt+0x70cc>
   19af8:	ldr	ip, [sp, #116]	; 0x74
   19afc:	mov	r1, fp
   19b00:	mov	r2, r4
   19b04:	mov	r0, r9
   19b08:	ldr	r3, [ip, #1384]	; 0x568
   19b0c:	blx	r3
   19b10:	ldr	ip, [sp, #116]	; 0x74
   19b14:	mov	r2, r4
   19b18:	mov	r1, r7
   19b1c:	ldr	r3, [ip, #1384]	; 0x568
   19b20:	mov	r5, r0
   19b24:	mov	r0, r6
   19b28:	blx	r3
   19b2c:	rsb	r8, r0, r5
   19b30:	b	193ec <__assert_fail@plt+0x70cc>
   19b34:	add	r1, fp, #1
   19b38:	mov	r2, r6
   19b3c:	add	r3, r7, #1
   19b40:	bl	22a90 <__assert_fail@plt+0x10770>
   19b44:	mov	r8, r0
   19b48:	b	193ec <__assert_fail@plt+0x70cc>
   19b4c:	mov	sl, r7
   19b50:	b	19914 <__assert_fail@plt+0x75f4>
   19b54:	str	fp, [sp, #88]	; 0x58
   19b58:	b	197b0 <__assert_fail@plt+0x7490>
   19b5c:	mov	r8, #1
   19b60:	b	193ec <__assert_fail@plt+0x70cc>
   19b64:	ldr	r3, [pc, #108]	; 19bd8 <__assert_fail@plt+0x78b8>
   19b68:	movw	r2, #3253	; 0xcb5
   19b6c:	ldr	r0, [pc, #104]	; 19bdc <__assert_fail@plt+0x78bc>
   19b70:	ldr	r1, [pc, #104]	; 19be0 <__assert_fail@plt+0x78c0>
   19b74:	add	r3, pc, r3
   19b78:	add	r0, pc, r0
   19b7c:	add	r3, r3, #268	; 0x10c
   19b80:	add	r1, pc, r1
   19b84:	bl	12320 <__assert_fail@plt>
   19b88:	bl	11ed0 <__stack_chk_fail@plt>
   19b8c:	ldr	r3, [pc, #80]	; 19be4 <__assert_fail@plt+0x78c4>
   19b90:	movw	r2, #3251	; 0xcb3
   19b94:	ldr	r0, [pc, #76]	; 19be8 <__assert_fail@plt+0x78c8>
   19b98:	ldr	r1, [pc, #76]	; 19bec <__assert_fail@plt+0x78cc>
   19b9c:	add	r3, pc, r3
   19ba0:	add	r0, pc, r0
   19ba4:	add	r3, r3, #268	; 0x10c
   19ba8:	add	r1, pc, r1
   19bac:	bl	12320 <__assert_fail@plt>
   19bb0:	ldrdeq	lr, [r1], -ip
   19bb4:	andeq	r0, r0, ip, lsl r2
   19bb8:	ldrdeq	pc, [r1], -r8
   19bbc:	andeq	pc, r1, r8, ror r0	; <UNPREDICTABLE>
   19bc0:	andeq	pc, r1, ip, rrx
   19bc4:	andeq	pc, r1, r4, asr r0	; <UNPREDICTABLE>
   19bc8:	andeq	pc, r1, ip, lsr r0	; <UNPREDICTABLE>
   19bcc:	andeq	lr, r1, ip, ror #29
   19bd0:	andeq	lr, r1, ip, lsr #29
   19bd4:			; <UNDEFINED> instruction: 0x0001e8b4
   19bd8:	andeq	fp, r0, ip, lsr #15
   19bdc:	andeq	fp, r0, r4, lsr #22
   19be0:	andeq	fp, r0, r4, asr #20
   19be4:	andeq	fp, r0, r4, lsl #15
   19be8:	ldrdeq	fp, [r0], -r0
   19bec:	andeq	fp, r0, ip, lsl sl
   19bf0:	ldr	r3, [pc, #724]	; 19ecc <__assert_fail@plt+0x7bac>
   19bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bf8:	subs	r7, r1, #0
   19bfc:	ldr	r1, [pc, #716]	; 19ed0 <__assert_fail@plt+0x7bb0>
   19c00:	sub	sp, sp, #44	; 0x2c
   19c04:	add	r3, pc, r3
   19c08:	mov	r4, r0
   19c0c:	str	r2, [sp, #12]
   19c10:	addne	r6, sp, #16
   19c14:	ldr	r1, [r3, r1]
   19c18:	ldr	r3, [r1]
   19c1c:	str	r1, [sp]
   19c20:	str	r3, [sp, #36]	; 0x24
   19c24:	bne	19c3c <__assert_fail@plt+0x791c>
   19c28:	b	19e80 <__assert_fail@plt+0x7b60>
   19c2c:	ldr	r3, [sp, #16]
   19c30:	subs	r7, r7, r3
   19c34:	add	r4, r4, r3
   19c38:	beq	19e80 <__assert_fail@plt+0x7b60>
   19c3c:	mov	r0, r4
   19c40:	mov	r1, r7
   19c44:	mov	r2, r6
   19c48:	bl	18434 <__assert_fail@plt+0x6114>
   19c4c:	subs	r5, r0, #0
   19c50:	bne	19c2c <__assert_fail@plt+0x790c>
   19c54:	cmn	r7, #1
   19c58:	beq	19ea4 <__assert_fail@plt+0x7b84>
   19c5c:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   19c60:	add	r8, r7, #1
   19c64:	mov	r1, r0
   19c68:	mov	r6, r0
   19c6c:	mvn	r0, #0
   19c70:	bl	242f8 <__assert_fail@plt+0x11fd8>
   19c74:	cmp	r8, r0
   19c78:	bhi	19ea4 <__assert_fail@plt+0x7b84>
   19c7c:	mul	r0, r8, r6
   19c80:	bl	226ec <__assert_fail@plt+0x103cc>
   19c84:	mov	r6, r0
   19c88:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   19c8c:	mov	r1, r0
   19c90:	mov	r9, r0
   19c94:	mvn	r0, #0
   19c98:	bl	242f8 <__assert_fail@plt+0x11fd8>
   19c9c:	cmp	r8, r0
   19ca0:	bhi	19ea4 <__assert_fail@plt+0x7b84>
   19ca4:	mul	r0, r8, r9
   19ca8:	bl	226ec <__assert_fail@plt+0x103cc>
   19cac:	mov	r1, r4
   19cb0:	mov	r2, r7
   19cb4:	str	r0, [sp, #4]
   19cb8:	str	r0, [sp, #20]
   19cbc:	bl	11e28 <memcpy@plt>
   19cc0:	ldr	ip, [sp, #4]
   19cc4:	cmn	r8, #-1073741823	; 0xc0000001
   19cc8:	strb	r5, [ip, r7]
   19ccc:	bhi	19ea4 <__assert_fail@plt+0x7b84>
   19cd0:	lsl	r0, r8, #2
   19cd4:	add	sl, sp, #28
   19cd8:	bl	226ec <__assert_fail@plt+0x103cc>
   19cdc:	str	r5, [sp, #28]
   19ce0:	mov	r3, sl
   19ce4:	add	r1, sp, #20
   19ce8:	mov	r2, r8
   19cec:	str	r5, [sl, #4]
   19cf0:	str	r0, [sp, #8]
   19cf4:	str	r0, [sp, #24]
   19cf8:	bl	11d5c <mbsrtowcs@plt>
   19cfc:	cmn	r0, #1
   19d00:	mov	r7, r0
   19d04:	beq	19d14 <__assert_fail@plt+0x79f4>
   19d08:	ldr	r3, [sp, #20]
   19d0c:	cmp	r3, #0
   19d10:	beq	19d48 <__assert_fail@plt+0x7a28>
   19d14:	ldr	r1, [pc, #440]	; 19ed4 <__assert_fail@plt+0x7bb4>
   19d18:	mov	r2, #5
   19d1c:	mov	r0, #0
   19d20:	add	r1, pc, r1
   19d24:	bl	11ec4 <dcgettext@plt>
   19d28:	mov	r5, r0
   19d2c:	mov	r0, r4
   19d30:	bl	20e80 <__assert_fail@plt+0xeb60>
   19d34:	mov	r2, r5
   19d38:	mov	r1, #0
   19d3c:	mov	r3, r0
   19d40:	mov	r0, #2
   19d44:	bl	12020 <error@plt>
   19d48:	cmp	r7, #0
   19d4c:	beq	19d8c <__assert_fail@plt+0x7a6c>
   19d50:	ldr	r5, [sp, #8]
   19d54:	mov	r9, #0
   19d58:	b	19d68 <__assert_fail@plt+0x7a48>
   19d5c:	add	r9, r9, #1
   19d60:	cmp	r9, r7
   19d64:	beq	19d8c <__assert_fail@plt+0x7a6c>
   19d68:	ldr	r0, [r5]
   19d6c:	mov	fp, r5
   19d70:	bl	122d8 <towupper@plt>
   19d74:	str	r0, [r5], #4
   19d78:	bl	11e40 <iswblank@plt>
   19d7c:	cmp	r0, #0
   19d80:	beq	19d5c <__assert_fail@plt+0x7a3c>
   19d84:	mov	r3, #0
   19d88:	str	r3, [fp]
   19d8c:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   19d90:	mov	r3, sl
   19d94:	add	r1, sp, #24
   19d98:	mul	r2, r8, r0
   19d9c:	mov	r0, r6
   19da0:	bl	11de0 <wcsrtombs@plt>
   19da4:	cmn	r0, #1
   19da8:	str	r0, [sp, #16]
   19dac:	beq	19ea8 <__assert_fail@plt+0x7b88>
   19db0:	ldr	sl, [sp, #24]
   19db4:	mov	r8, #12
   19db8:	ldr	r7, [pc, #280]	; 19ed8 <__assert_fail@plt+0x7bb8>
   19dbc:	cmp	sl, #0
   19dc0:	add	r7, pc, r7
   19dc4:	beq	19dd0 <__assert_fail@plt+0x7ab0>
   19dc8:	b	19ea8 <__assert_fail@plt+0x7b88>
   19dcc:	mov	sl, r5
   19dd0:	add	r5, sl, r8
   19dd4:	add	r5, r5, r5, lsr #31
   19dd8:	asr	r5, r5, #1
   19ddc:	ldr	r9, [r7, r5, lsl #3]
   19de0:	mov	r0, r9
   19de4:	bl	120e0 <strlen@plt>
   19de8:	mov	r1, r9
   19dec:	mov	r2, r0
   19df0:	mov	r0, r6
   19df4:	bl	122e4 <strncmp@plt>
   19df8:	cmp	r0, #0
   19dfc:	movlt	r8, r5
   19e00:	movlt	r5, sl
   19e04:	rsb	r3, r5, r8
   19e08:	cmp	r3, #1
   19e0c:	bgt	19dcc <__assert_fail@plt+0x7aac>
   19e10:	ldr	sl, [pc, #196]	; 19edc <__assert_fail@plt+0x7bbc>
   19e14:	add	sl, pc, sl
   19e18:	ldr	r7, [sl, r5, lsl #3]
   19e1c:	mov	r0, r7
   19e20:	bl	120e0 <strlen@plt>
   19e24:	mov	r1, r7
   19e28:	mov	r8, r0
   19e2c:	mov	r0, r6
   19e30:	mov	r2, r8
   19e34:	bl	122e4 <strncmp@plt>
   19e38:	cmp	r0, #0
   19e3c:	movne	r5, #0
   19e40:	bne	19e60 <__assert_fail@plt+0x7b40>
   19e44:	add	r5, sl, r5, lsl #3
   19e48:	ldr	ip, [sp, #12]
   19e4c:	ldr	r5, [r5, #4]
   19e50:	cmp	ip, #0
   19e54:	cmpne	r5, #0
   19e58:	addne	r4, r4, r8
   19e5c:	strne	r4, [ip]
   19e60:	mov	r0, r6
   19e64:	bl	11dec <free@plt>
   19e68:	ldr	r0, [sp, #4]
   19e6c:	bl	11dec <free@plt>
   19e70:	ldr	r0, [sp, #8]
   19e74:	bl	11dec <free@plt>
   19e78:	mov	r0, r5
   19e7c:	b	19e84 <__assert_fail@plt+0x7b64>
   19e80:	mov	r0, #0
   19e84:	ldr	ip, [sp]
   19e88:	ldr	r2, [sp, #36]	; 0x24
   19e8c:	ldr	r3, [ip]
   19e90:	cmp	r2, r3
   19e94:	bne	19ea0 <__assert_fail@plt+0x7b80>
   19e98:	add	sp, sp, #44	; 0x2c
   19e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ea0:	bl	11ed0 <__stack_chk_fail@plt>
   19ea4:	bl	22900 <__assert_fail@plt+0x105e0>
   19ea8:	ldr	r3, [pc, #48]	; 19ee0 <__assert_fail@plt+0x7bc0>
   19eac:	movw	r2, #2904	; 0xb58
   19eb0:	ldr	r0, [pc, #44]	; 19ee4 <__assert_fail@plt+0x7bc4>
   19eb4:	ldr	r1, [pc, #44]	; 19ee8 <__assert_fail@plt+0x7bc8>
   19eb8:	add	r3, pc, r3
   19ebc:	add	r0, pc, r0
   19ec0:	add	r3, r3, #284	; 0x11c
   19ec4:	add	r1, pc, r1
   19ec8:	bl	12320 <__assert_fail@plt>
   19ecc:	strdeq	lr, [r1], -r4
   19ed0:	andeq	r0, r0, ip, lsl r2
   19ed4:	andeq	fp, r0, r8, lsr #19
   19ed8:			; <UNDEFINED> instruction: 0x0001e4b4
   19edc:	andeq	lr, r1, r0, ror #8
   19ee0:	andeq	fp, r0, r8, ror #8
   19ee4:	andeq	fp, r0, r8, lsr #16
   19ee8:	andeq	fp, r0, r0, lsl #14
   19eec:	ldr	r3, [pc, #784]	; 1a204 <__assert_fail@plt+0x7ee4>
   19ef0:	mov	r0, #2
   19ef4:	ldr	r2, [pc, #780]	; 1a208 <__assert_fail@plt+0x7ee8>
   19ef8:	add	r3, pc, r3
   19efc:	ldr	r1, [pc, #776]	; 1a20c <__assert_fail@plt+0x7eec>
   19f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f04:	sub	sp, sp, #100	; 0x64
   19f08:	ldr	r2, [r3, r2]
   19f0c:	add	r1, pc, r1
   19f10:	ldr	r3, [r2]
   19f14:	str	r2, [sp, #36]	; 0x24
   19f18:	str	r3, [sp, #92]	; 0x5c
   19f1c:	bl	1220c <setlocale@plt>
   19f20:	subs	r1, r0, #0
   19f24:	str	r1, [sp, #28]
   19f28:	beq	19f34 <__assert_fail@plt+0x7c14>
   19f2c:	bl	228e4 <__assert_fail@plt+0x105c4>
   19f30:	str	r0, [sp, #28]
   19f34:	ldr	r1, [pc, #724]	; 1a210 <__assert_fail@plt+0x7ef0>
   19f38:	mov	r0, #0
   19f3c:	add	r1, pc, r1
   19f40:	bl	1220c <setlocale@plt>
   19f44:	subs	r2, r0, #0
   19f48:	str	r2, [sp, #20]
   19f4c:	beq	1a1ac <__assert_fail@plt+0x7e8c>
   19f50:	bl	228e4 <__assert_fail@plt+0x105c4>
   19f54:	ldr	r3, [sp, #28]
   19f58:	cmp	r0, #0
   19f5c:	cmpne	r3, #0
   19f60:	str	r0, [sp, #20]
   19f64:	moveq	r3, #0
   19f68:	movne	r3, #1
   19f6c:	str	r3, [sp, #32]
   19f70:	beq	19f80 <__assert_fail@plt+0x7c60>
   19f74:	mov	r0, #0
   19f78:	ldr	r1, [sp, #28]
   19f7c:	bl	1220c <setlocale@plt>
   19f80:	ldr	r2, [pc, #652]	; 1a214 <__assert_fail@plt+0x7ef4>
   19f84:	add	r4, sp, #76	; 0x4c
   19f88:	mov	r3, #0
   19f8c:	add	r1, sp, #60	; 0x3c
   19f90:	add	r2, pc, r2
   19f94:	str	r3, [sp, #24]
   19f98:	str	r2, [sp, #40]	; 0x28
   19f9c:	add	r3, sp, #52	; 0x34
   19fa0:	add	r2, sp, #68	; 0x44
   19fa4:	str	r1, [sp]
   19fa8:	str	r2, [sp, #12]
   19fac:	add	r1, sp, #56	; 0x38
   19fb0:	mov	r2, #0
   19fb4:	str	r3, [sp, #44]	; 0x2c
   19fb8:	str	r1, [sp, #8]
   19fbc:	str	r2, [sp, #16]
   19fc0:	ldr	r3, [sp, #16]
   19fc4:	add	r0, r3, #131072	; 0x20000
   19fc8:	add	r3, r3, #1
   19fcc:	add	r0, r0, #14
   19fd0:	str	r3, [sp, #16]
   19fd4:	bl	12248 <nl_langinfo@plt>
   19fd8:	mov	r9, r0
   19fdc:	bl	120e0 <strlen@plt>
   19fe0:	mov	r6, r0
   19fe4:	add	r0, r0, #1
   19fe8:	bl	226ec <__assert_fail@plt+0x103cc>
   19fec:	ldr	r3, [sp, #40]	; 0x28
   19ff0:	ldr	r2, [sp, #24]
   19ff4:	cmp	r6, #0
   19ff8:	mov	r1, #0
   19ffc:	str	r1, [sp, #60]	; 0x3c
   1a000:	str	r1, [sp, #64]	; 0x40
   1a004:	str	r1, [sp, #68]	; 0x44
   1a008:	str	r1, [sp, #72]	; 0x48
   1a00c:	str	r0, [r3, r2]!
   1a010:	ldr	r2, [sp, #16]
   1a014:	str	r0, [sp, #4]
   1a018:	str	r2, [r3, #4]
   1a01c:	beq	1a1a4 <__assert_fail@plt+0x7e84>
   1a020:	mov	r7, #0
   1a024:	add	r8, sp, #52	; 0x34
   1a028:	mov	r5, r7
   1a02c:	b	1a044 <__assert_fail@plt+0x7d24>
   1a030:	ldr	r5, [sp, #52]	; 0x34
   1a034:	add	r5, r7, r5
   1a038:	cmp	r6, r5
   1a03c:	bls	1a05c <__assert_fail@plt+0x7d3c>
   1a040:	mov	r7, r5
   1a044:	add	r0, r9, r7
   1a048:	rsb	r1, r7, r6
   1a04c:	mov	r2, r8
   1a050:	bl	18434 <__assert_fail@plt+0x6114>
   1a054:	cmp	r0, #0
   1a058:	bne	1a030 <__assert_fail@plt+0x7d10>
   1a05c:	cmp	r6, r5
   1a060:	mov	r7, #0
   1a064:	bls	1a100 <__assert_fail@plt+0x7de0>
   1a068:	add	r8, r9, r5
   1a06c:	add	r3, sp, #60	; 0x3c
   1a070:	add	r0, sp, #56	; 0x38
   1a074:	rsb	r2, r5, r6
   1a078:	mov	r1, r8
   1a07c:	bl	12014 <mbrtowc@plt>
   1a080:	add	r3, r0, #2
   1a084:	mov	sl, r0
   1a088:	cmp	r3, #1
   1a08c:	str	r0, [sp, #52]	; 0x34
   1a090:	bls	1a1b8 <__assert_fail@plt+0x7e98>
   1a094:	cmp	r0, #0
   1a098:	beq	1a100 <__assert_fail@plt+0x7de0>
   1a09c:	ldr	fp, [sp, #56]	; 0x38
   1a0a0:	mov	r0, fp
   1a0a4:	bl	122d8 <towupper@plt>
   1a0a8:	cmp	fp, r0
   1a0ac:	beq	1a184 <__assert_fail@plt+0x7e64>
   1a0b0:	mov	r1, r0
   1a0b4:	add	r2, sp, #68	; 0x44
   1a0b8:	mov	r0, r4
   1a0bc:	add	r5, sl, r5
   1a0c0:	bl	11d50 <wcrtomb@plt>
   1a0c4:	sub	r3, r0, #1
   1a0c8:	str	r0, [sp, #52]	; 0x34
   1a0cc:	cmn	r3, #3
   1a0d0:	bhi	1a1e0 <__assert_fail@plt+0x7ec0>
   1a0d4:	ldr	r2, [sp, #4]
   1a0d8:	mov	r3, #0
   1a0dc:	add	r1, r2, r7
   1a0e0:	ldrb	r2, [r4, r3]
   1a0e4:	strb	r2, [r1, r3]
   1a0e8:	add	r3, r3, #1
   1a0ec:	cmp	r3, r0
   1a0f0:	bne	1a0e0 <__assert_fail@plt+0x7dc0>
   1a0f4:	cmp	r6, r5
   1a0f8:	add	r7, r3, r7
   1a0fc:	bhi	1a068 <__assert_fail@plt+0x7d48>
   1a100:	ldr	r3, [sp, #16]
   1a104:	mov	r1, #0
   1a108:	ldr	r2, [sp, #4]
   1a10c:	cmp	r3, #12
   1a110:	ldr	r3, [sp, #24]
   1a114:	strb	r1, [r2, r7]
   1a118:	add	r3, r3, #8
   1a11c:	str	r3, [sp, #24]
   1a120:	bne	19fc0 <__assert_fail@plt+0x7ca0>
   1a124:	ldr	r0, [pc, #236]	; 1a218 <__assert_fail@plt+0x7ef8>
   1a128:	mov	r2, #8
   1a12c:	ldr	r3, [pc, #232]	; 1a21c <__assert_fail@plt+0x7efc>
   1a130:	ldr	r1, [sp, #16]
   1a134:	add	r0, pc, r0
   1a138:	add	r3, pc, r3
   1a13c:	bl	12284 <qsort@plt>
   1a140:	ldr	r3, [sp, #32]
   1a144:	cmp	r3, #0
   1a148:	beq	1a158 <__assert_fail@plt+0x7e38>
   1a14c:	mov	r0, #0
   1a150:	ldr	r1, [sp, #20]
   1a154:	bl	1220c <setlocale@plt>
   1a158:	ldr	r0, [sp, #20]
   1a15c:	bl	11dec <free@plt>
   1a160:	ldr	r1, [sp, #36]	; 0x24
   1a164:	ldr	r2, [sp, #92]	; 0x5c
   1a168:	ldr	r3, [r1]
   1a16c:	cmp	r2, r3
   1a170:	bne	1a1dc <__assert_fail@plt+0x7ebc>
   1a174:	ldr	r0, [sp, #28]
   1a178:	add	sp, sp, #100	; 0x64
   1a17c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a180:	b	11dec <free@plt>
   1a184:	mov	r1, r8
   1a188:	mov	r0, r4
   1a18c:	mov	r2, sl
   1a190:	mov	r3, #16
   1a194:	bl	11f9c <__memcpy_chk@plt>
   1a198:	add	r5, sl, r5
   1a19c:	mov	r0, sl
   1a1a0:	b	1a0d4 <__assert_fail@plt+0x7db4>
   1a1a4:	mov	r5, r6
   1a1a8:	b	1a05c <__assert_fail@plt+0x7d3c>
   1a1ac:	ldr	r1, [sp, #20]
   1a1b0:	str	r1, [sp, #32]
   1a1b4:	b	19f80 <__assert_fail@plt+0x7c60>
   1a1b8:	ldr	r3, [pc, #96]	; 1a220 <__assert_fail@plt+0x7f00>
   1a1bc:	movw	r2, #1482	; 0x5ca
   1a1c0:	ldr	r0, [pc, #92]	; 1a224 <__assert_fail@plt+0x7f04>
   1a1c4:	ldr	r1, [pc, #92]	; 1a228 <__assert_fail@plt+0x7f08>
   1a1c8:	add	r3, pc, r3
   1a1cc:	add	r0, pc, r0
   1a1d0:	add	r3, r3, #296	; 0x128
   1a1d4:	add	r1, pc, r1
   1a1d8:	bl	12320 <__assert_fail@plt>
   1a1dc:	bl	11ed0 <__stack_chk_fail@plt>
   1a1e0:	ldr	r3, [pc, #68]	; 1a22c <__assert_fail@plt+0x7f0c>
   1a1e4:	movw	r2, #1496	; 0x5d8
   1a1e8:	ldr	r0, [pc, #64]	; 1a230 <__assert_fail@plt+0x7f10>
   1a1ec:	ldr	r1, [pc, #64]	; 1a234 <__assert_fail@plt+0x7f14>
   1a1f0:	add	r3, pc, r3
   1a1f4:	add	r0, pc, r0
   1a1f8:	add	r3, r3, #296	; 0x128
   1a1fc:	add	r1, pc, r1
   1a200:	bl	12320 <__assert_fail@plt>
   1a204:	andeq	lr, r1, r0, lsl #2
   1a208:	andeq	r0, r0, ip, lsl r2
   1a20c:	muleq	r0, r4, lr
   1a210:	andeq	fp, r0, r4, ror #28
   1a214:	andeq	lr, r1, r4, ror #5
   1a218:	andeq	lr, r1, r0, asr #2
   1a21c:			; <UNDEFINED> instruction: 0xffffbcf4
   1a220:	andeq	fp, r0, r8, asr r1
   1a224:	andeq	fp, r0, r0, asr #10
   1a228:	strdeq	fp, [r0], -r0
   1a22c:	andeq	fp, r0, r0, lsr r1
   1a230:	andeq	fp, r0, ip, asr #10
   1a234:	andeq	fp, r0, r8, asr #7
   1a238:	ldr	ip, [pc, #260]	; 1a344 <__assert_fail@plt+0x8024>
   1a23c:	push	{r4, r5, r6, r7, lr}
   1a240:	add	ip, pc, ip
   1a244:	ldr	r4, [pc, #252]	; 1a348 <__assert_fail@plt+0x8028>
   1a248:	sub	sp, sp, #36	; 0x24
   1a24c:	ldr	lr, [pc, #248]	; 1a34c <__assert_fail@plt+0x802c>
   1a250:	mov	r5, r1
   1a254:	mov	r6, r2
   1a258:	add	r1, sp, #12
   1a25c:	ldr	r4, [ip, r4]
   1a260:	add	lr, pc, lr
   1a264:	str	lr, [sp]
   1a268:	mov	r2, #10
   1a26c:	add	r3, sp, #16
   1a270:	mov	r7, r0
   1a274:	ldr	ip, [r4]
   1a278:	str	ip, [sp, #28]
   1a27c:	bl	2319c <__assert_fail@plt+0x10e7c>
   1a280:	cmp	r0, #4
   1a284:	addls	pc, pc, r0, lsl #2
   1a288:	b	1a2c4 <__assert_fail@plt+0x7fa4>
   1a28c:	b	1a2a0 <__assert_fail@plt+0x7f80>
   1a290:	b	1a2bc <__assert_fail@plt+0x7f9c>
   1a294:	b	1a2a0 <__assert_fail@plt+0x7f80>
   1a298:	b	1a2bc <__assert_fail@plt+0x7f9c>
   1a29c:	b	1a2e0 <__assert_fail@plt+0x7fc0>
   1a2a0:	ldrd	r2, [sp, #16]
   1a2a4:	mov	r1, #0
   1a2a8:	mov	r0, r2
   1a2ac:	cmp	r3, r1
   1a2b0:	cmpeq	r2, r0
   1a2b4:	str	r2, [r5]
   1a2b8:	beq	1a2c4 <__assert_fail@plt+0x7fa4>
   1a2bc:	mvn	r3, #0
   1a2c0:	str	r3, [r5]
   1a2c4:	ldr	r0, [sp, #12]
   1a2c8:	ldr	r2, [sp, #28]
   1a2cc:	ldr	r3, [r4]
   1a2d0:	cmp	r2, r3
   1a2d4:	bne	1a340 <__assert_fail@plt+0x8020>
   1a2d8:	add	sp, sp, #36	; 0x24
   1a2dc:	pop	{r4, r5, r6, r7, pc}
   1a2e0:	cmp	r6, #0
   1a2e4:	moveq	r0, r6
   1a2e8:	beq	1a2c8 <__assert_fail@plt+0x7fa8>
   1a2ec:	ldr	r1, [pc, #92]	; 1a350 <__assert_fail@plt+0x8030>
   1a2f0:	mov	r2, #5
   1a2f4:	mov	r0, #0
   1a2f8:	add	r1, pc, r1
   1a2fc:	bl	11ec4 <dcgettext@plt>
   1a300:	mov	r1, r6
   1a304:	mov	r2, #5
   1a308:	mov	r5, r0
   1a30c:	mov	r0, #0
   1a310:	bl	11ec4 <dcgettext@plt>
   1a314:	mov	r6, r0
   1a318:	mov	r0, r7
   1a31c:	bl	20e80 <__assert_fail@plt+0xeb60>
   1a320:	mov	r2, r5
   1a324:	mov	r3, r6
   1a328:	mov	r1, #0
   1a32c:	str	r0, [sp]
   1a330:	mov	r0, #2
   1a334:	bl	12020 <error@plt>
   1a338:	mov	r0, #0
   1a33c:	b	1a2c8 <__assert_fail@plt+0x7fa8>
   1a340:	bl	11ed0 <__stack_chk_fail@plt>
   1a344:			; <UNDEFINED> instruction: 0x0001ddb8
   1a348:	andeq	r0, r0, ip, lsl r2
   1a34c:	andeq	fp, r0, r0, asr #22
   1a350:	andeq	fp, r0, r8, ror r4
   1a354:	push	{r4, lr}
   1a358:	mov	r4, r0
   1a35c:	bl	169d8 <__assert_fail@plt+0x46b8>
   1a360:	cmp	r0, #0
   1a364:	popne	{r4, pc}
   1a368:	ldr	r1, [pc, #16]	; 1a380 <__assert_fail@plt+0x8060>
   1a36c:	mov	r2, #5
   1a370:	add	r1, pc, r1
   1a374:	bl	11ec4 <dcgettext@plt>
   1a378:	mov	r1, r4
   1a37c:	bl	15e40 <__assert_fail@plt+0x3b20>
   1a380:	andeq	fp, r0, r4, lsr #8
   1a384:	push	{r3, r4, r5, lr}
   1a388:	mov	r5, r1
   1a38c:	mov	r4, r0
   1a390:	bl	121a0 <fileno@plt>
   1a394:	cmp	r0, #0
   1a398:	beq	1a3fc <__assert_fail@plt+0x80dc>
   1a39c:	cmp	r0, #1
   1a3a0:	bne	1a3d0 <__assert_fail@plt+0x80b0>
   1a3a4:	mov	r0, r4
   1a3a8:	bl	11f6c <fflush_unlocked@plt>
   1a3ac:	cmp	r0, #0
   1a3b0:	popeq	{r3, r4, r5, pc}
   1a3b4:	ldr	r1, [pc, #88]	; 1a414 <__assert_fail@plt+0x80f4>
   1a3b8:	mov	r0, #0
   1a3bc:	mov	r2, #5
   1a3c0:	add	r1, pc, r1
   1a3c4:	bl	11ec4 <dcgettext@plt>
   1a3c8:	mov	r1, r5
   1a3cc:	bl	15e40 <__assert_fail@plt+0x3b20>
   1a3d0:	mov	r0, r4
   1a3d4:	bl	238f4 <__assert_fail@plt+0x115d4>
   1a3d8:	cmp	r0, #0
   1a3dc:	popeq	{r3, r4, r5, pc}
   1a3e0:	ldr	r1, [pc, #48]	; 1a418 <__assert_fail@plt+0x80f8>
   1a3e4:	mov	r0, #0
   1a3e8:	mov	r2, #5
   1a3ec:	add	r1, pc, r1
   1a3f0:	bl	11ec4 <dcgettext@plt>
   1a3f4:	mov	r1, r5
   1a3f8:	bl	15e40 <__assert_fail@plt+0x3b20>
   1a3fc:	ldr	r3, [r4]
   1a400:	tst	r3, #16
   1a404:	popeq	{r3, r4, r5, pc}
   1a408:	mov	r0, r4
   1a40c:	pop	{r3, r4, r5, lr}
   1a410:	b	12260 <clearerr_unlocked@plt>
   1a414:	andeq	fp, r0, r0, ror #7
   1a418:	andeq	fp, r0, r4, asr #7
   1a41c:	push	{r4, lr}
   1a420:	mov	r4, r0
   1a424:	bl	11f18 <dup2@plt>
   1a428:	mov	r0, r4
   1a42c:	pop	{r4, lr}
   1a430:	b	12308 <close@plt>
   1a434:	ldr	r3, [pc, #312]	; 1a574 <__assert_fail@plt+0x8254>
   1a438:	ldr	r2, [pc, #312]	; 1a578 <__assert_fail@plt+0x8258>
   1a43c:	add	r3, pc, r3
   1a440:	push	{r4, r5, r6, lr}
   1a444:	sub	sp, sp, #16
   1a448:	ldr	r5, [r3, r2]
   1a44c:	mov	r6, r0
   1a450:	mov	r0, sp
   1a454:	ldr	r3, [r5]
   1a458:	str	r3, [sp, #12]
   1a45c:	bl	174c8 <__assert_fail@plt+0x51a8>
   1a460:	subs	r4, r0, #0
   1a464:	beq	1a4d8 <__assert_fail@plt+0x81b8>
   1a468:	ldr	r3, [pc, #268]	; 1a57c <__assert_fail@plt+0x825c>
   1a46c:	mov	r2, #0
   1a470:	strb	r2, [r4, #8]
   1a474:	add	r3, pc, r3
   1a478:	ldr	r3, [r3, #1392]	; 0x570
   1a47c:	cmp	r3, r2
   1a480:	beq	1a4bc <__assert_fail@plt+0x819c>
   1a484:	add	r0, sp, #4
   1a488:	mov	r1, #4
   1a48c:	bl	171c0 <__assert_fail@plt+0x4ea0>
   1a490:	cmp	r0, #0
   1a494:	str	r0, [r4, #4]
   1a498:	ble	1a4f4 <__assert_fail@plt+0x81d4>
   1a49c:	ldr	r0, [sp]
   1a4a0:	bl	12308 <close@plt>
   1a4a4:	ldr	r0, [sp, #4]
   1a4a8:	bl	12308 <close@plt>
   1a4ac:	ldr	r3, [sp, #8]
   1a4b0:	mov	r0, r4
   1a4b4:	str	r3, [sp]
   1a4b8:	bl	1744c <__assert_fail@plt+0x512c>
   1a4bc:	ldr	r1, [pc, #188]	; 1a580 <__assert_fail@plt+0x8260>
   1a4c0:	ldr	r0, [sp]
   1a4c4:	add	r1, pc, r1
   1a4c8:	bl	11d20 <fdopen@plt>
   1a4cc:	cmp	r0, #0
   1a4d0:	str	r0, [r6]
   1a4d4:	beq	1a54c <__assert_fail@plt+0x822c>
   1a4d8:	ldr	r2, [sp, #12]
   1a4dc:	mov	r0, r4
   1a4e0:	ldr	r3, [r5]
   1a4e4:	cmp	r2, r3
   1a4e8:	bne	1a564 <__assert_fail@plt+0x8244>
   1a4ec:	add	sp, sp, #16
   1a4f0:	pop	{r4, r5, r6, pc}
   1a4f4:	bne	1a4bc <__assert_fail@plt+0x819c>
   1a4f8:	ldr	r0, [sp, #8]
   1a4fc:	bl	12308 <close@plt>
   1a500:	ldr	r0, [sp]
   1a504:	cmp	r0, #1
   1a508:	beq	1a514 <__assert_fail@plt+0x81f4>
   1a50c:	mov	r1, #1
   1a510:	bl	1a41c <__assert_fail@plt+0x80fc>
   1a514:	ldr	r0, [sp, #4]
   1a518:	cmp	r0, #0
   1a51c:	bne	1a568 <__assert_fail@plt+0x8248>
   1a520:	ldr	r3, [pc, #92]	; 1a584 <__assert_fail@plt+0x8264>
   1a524:	mov	r2, #0
   1a528:	add	r3, pc, r3
   1a52c:	ldr	r0, [r3, #1392]	; 0x570
   1a530:	mov	r1, r0
   1a534:	bl	11e34 <execlp@plt>
   1a538:	bl	1211c <__errno_location@plt>
   1a53c:	ldr	r1, [pc, #68]	; 1a588 <__assert_fail@plt+0x8268>
   1a540:	add	r1, pc, r1
   1a544:	ldr	r0, [r0]
   1a548:	bl	17398 <__assert_fail@plt+0x5078>
   1a54c:	ldr	r1, [pc, #56]	; 1a58c <__assert_fail@plt+0x826c>
   1a550:	mov	r2, #5
   1a554:	add	r1, pc, r1
   1a558:	bl	11ec4 <dcgettext@plt>
   1a55c:	add	r1, r4, #9
   1a560:	bl	15e40 <__assert_fail@plt+0x3b20>
   1a564:	bl	11ed0 <__stack_chk_fail@plt>
   1a568:	mov	r1, #0
   1a56c:	bl	1a41c <__assert_fail@plt+0x80fc>
   1a570:	b	1a520 <__assert_fail@plt+0x8200>
   1a574:			; <UNDEFINED> instruction: 0x0001dbbc
   1a578:	andeq	r0, r0, ip, lsl r2
   1a57c:			; <UNDEFINED> instruction: 0x0001deb4
   1a580:	andeq	fp, r0, r0, lsr #6
   1a584:	andeq	sp, r1, r0, lsl #28
   1a588:	andeq	fp, r0, r0, lsl #5
   1a58c:	muleq	r0, r4, r2
   1a590:	push	{r4}		; (str r4, [sp, #-4]!)
   1a594:	ldr	r4, [r1, #4]
   1a598:	ldr	r3, [r1, #12]
   1a59c:	ldr	ip, [r1]
   1a5a0:	ldr	r2, [r1, #8]
   1a5a4:	rsb	r3, r3, r4
   1a5a8:	add	r3, r3, #15
   1a5ac:	cmp	r3, #30
   1a5b0:	rsb	r2, r2, ip
   1a5b4:	add	r2, r2, #15
   1a5b8:	movls	r3, #0
   1a5bc:	movhi	r3, #1
   1a5c0:	cmp	r2, #30
   1a5c4:	bls	1a5e4 <__assert_fail@plt+0x82c4>
   1a5c8:	cmp	r3, #0
   1a5cc:	movne	r3, #1
   1a5d0:	beq	1a608 <__assert_fail@plt+0x82e8>
   1a5d4:	cmp	r3, #0
   1a5d8:	bne	1a600 <__assert_fail@plt+0x82e0>
   1a5dc:	pop	{r4}		; (ldr r4, [sp], #4)
   1a5e0:	bx	lr
   1a5e4:	cmp	r3, #0
   1a5e8:	beq	1a5d4 <__assert_fail@plt+0x82b4>
   1a5ec:	ldr	r3, [r1, #20]
   1a5f0:	rsbs	r3, r3, #1
   1a5f4:	movcc	r3, #0
   1a5f8:	cmp	r3, #0
   1a5fc:	beq	1a5dc <__assert_fail@plt+0x82bc>
   1a600:	pop	{r4}		; (ldr r4, [sp], #4)
   1a604:	b	17778 <__assert_fail@plt+0x5458>
   1a608:	ldr	r3, [r1, #24]
   1a60c:	rsbs	r3, r3, #1
   1a610:	movcc	r3, #0
   1a614:	b	1a5d4 <__assert_fail@plt+0x82b4>
   1a618:	ldr	ip, [pc, #1584]	; 1ac50 <__assert_fail@plt+0x8930>
   1a61c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a620:	sub	sp, sp, #92	; 0x5c
   1a624:	ldr	lr, [pc, #1576]	; 1ac54 <__assert_fail@plt+0x8934>
   1a628:	add	ip, pc, ip
   1a62c:	str	r3, [sp, #40]	; 0x28
   1a630:	mov	r8, r1
   1a634:	str	r2, [sp, #36]	; 0x24
   1a638:	lsr	fp, r1, #1
   1a63c:	ldr	lr, [ip, lr]
   1a640:	mov	r4, r0
   1a644:	ldr	r5, [r3, #20]
   1a648:	ldr	r7, [r3, #24]
   1a64c:	mov	r3, ip
   1a650:	ldr	r1, [sp, #40]	; 0x28
   1a654:	add	r2, r7, r5
   1a658:	str	lr, [sp, #44]	; 0x2c
   1a65c:	ldr	r6, [sp, #128]	; 0x80
   1a660:	cmp	r2, #131072	; 0x20000
   1a664:	cmpcs	r8, #1
   1a668:	ldr	r3, [r1, #32]
   1a66c:	ldr	r2, [lr]
   1a670:	ldr	sl, [sp, #132]	; 0x84
   1a674:	ldr	r9, [sp, #136]	; 0x88
   1a678:	ldr	lr, [sp, #36]	; 0x24
   1a67c:	str	r0, [sp, #56]	; 0x38
   1a680:	str	r2, [sp, #84]	; 0x54
   1a684:	str	lr, [sp, #64]	; 0x40
   1a688:	str	r3, [sp, #68]	; 0x44
   1a68c:	str	fp, [sp, #60]	; 0x3c
   1a690:	str	r6, [sp, #72]	; 0x48
   1a694:	str	sl, [sp, #76]	; 0x4c
   1a698:	str	r9, [sp, #80]	; 0x50
   1a69c:	bhi	1abd0 <__assert_fail@plt+0x88b0>
   1a6a0:	ldr	r3, [sp, #36]	; 0x24
   1a6a4:	cmp	r7, #1
   1a6a8:	sub	fp, r4, r3, lsl #4
   1a6ac:	lsl	r3, r5, #4
   1a6b0:	rsbls	ip, r3, #0
   1a6b4:	addls	r8, r4, ip
   1a6b8:	bls	1a6e4 <__assert_fail@plt+0x83c4>
   1a6bc:	rsb	ip, r3, #0
   1a6c0:	lsr	r2, r5, #1
   1a6c4:	add	r8, r4, ip
   1a6c8:	mov	r1, r7
   1a6cc:	sub	r2, fp, r2, lsl #4
   1a6d0:	mov	r3, #0
   1a6d4:	mov	r0, r8
   1a6d8:	str	ip, [sp, #20]
   1a6dc:	bl	178fc <__assert_fail@plt+0x55dc>
   1a6e0:	ldr	ip, [sp, #20]
   1a6e4:	cmp	r5, #1
   1a6e8:	bls	1a708 <__assert_fail@plt+0x83e8>
   1a6ec:	mov	r1, r5
   1a6f0:	mov	r2, fp
   1a6f4:	mov	r0, r4
   1a6f8:	mov	r3, #0
   1a6fc:	str	ip, [sp, #20]
   1a700:	bl	178fc <__assert_fail@plt+0x55dc>
   1a704:	ldr	ip, [sp, #20]
   1a708:	ldr	lr, [sp, #40]	; 0x28
   1a70c:	sub	r7, ip, r7, lsl #4
   1a710:	mov	r0, r6
   1a714:	str	r4, [lr]
   1a718:	mov	r1, lr
   1a71c:	add	r4, r4, r7
   1a720:	str	r8, [lr, #4]
   1a724:	str	r8, [lr, #8]
   1a728:	add	r7, r6, #4
   1a72c:	str	r4, [lr, #12]
   1a730:	add	r8, r6, #32
   1a734:	bl	17778 <__assert_fail@plt+0x5458>
   1a738:	mov	r0, r7
   1a73c:	bl	11df8 <pthread_mutex_lock@plt>
   1a740:	b	1a750 <__assert_fail@plt+0x8430>
   1a744:	mov	r0, r8
   1a748:	mov	r1, r7
   1a74c:	bl	12290 <pthread_cond_wait@plt>
   1a750:	ldr	r0, [r6]
   1a754:	bl	1eea4 <__assert_fail@plt+0xcb84>
   1a758:	cmp	r0, #0
   1a75c:	beq	1a744 <__assert_fail@plt+0x8424>
   1a760:	add	r1, r0, #48	; 0x30
   1a764:	mov	r4, r0
   1a768:	mov	r0, r7
   1a76c:	str	r1, [sp, #32]
   1a770:	bl	11d14 <pthread_mutex_unlock@plt>
   1a774:	ldr	r0, [sp, #32]
   1a778:	bl	11df8 <pthread_mutex_lock@plt>
   1a77c:	ldr	r3, [r4, #40]	; 0x28
   1a780:	mov	r2, #0
   1a784:	strb	r2, [r4, #44]	; 0x2c
   1a788:	cmp	r3, #0
   1a78c:	beq	1aae0 <__assert_fail@plt+0x87c0>
   1a790:	add	r5, r3, #1
   1a794:	ldr	r1, [sp, #36]	; 0x24
   1a798:	cmp	r3, #1
   1a79c:	ldr	lr, [r4, #4]
   1a7a0:	ldr	r3, [r4]
   1a7a4:	lsl	r5, r5, #1
   1a7a8:	lsr	r5, r1, r5
   1a7ac:	str	lr, [sp, #28]
   1a7b0:	add	r5, r5, #1
   1a7b4:	str	r3, [sp, #24]
   1a7b8:	bls	1a920 <__assert_fail@plt+0x8600>
   1a7bc:	ldr	r3, [r4, #16]
   1a7c0:	ldr	r1, [sp, #28]
   1a7c4:	ldr	r0, [sp, #24]
   1a7c8:	ldr	fp, [r3]
   1a7cc:	b	1a824 <__assert_fail@plt+0x8504>
   1a7d0:	ldr	r3, [r4, #12]
   1a7d4:	cmp	r3, r1
   1a7d8:	beq	1aa40 <__assert_fail@plt+0x8720>
   1a7dc:	cmp	r5, #0
   1a7e0:	beq	1aa3c <__assert_fail@plt+0x871c>
   1a7e4:	sub	r1, r1, #16
   1a7e8:	sub	r0, r0, #16
   1a7ec:	bl	177fc <__assert_fail@plt+0x54dc>
   1a7f0:	sub	r5, r5, #1
   1a7f4:	cmp	r0, #0
   1a7f8:	suble	fp, fp, #16
   1a7fc:	subgt	fp, fp, #16
   1a800:	ldrle	r3, [r4]
   1a804:	ldrgt	r3, [r4, #4]
   1a808:	suble	r3, r3, #16
   1a80c:	subgt	r3, r3, #16
   1a810:	strle	r3, [r4]
   1a814:	strgt	r3, [r4, #4]
   1a818:	ldm	r3, {r0, r1, r2, r3}
   1a81c:	stm	fp, {r0, r1, r2, r3}
   1a820:	ldm	r4, {r0, r1}
   1a824:	ldr	r3, [r4, #8]
   1a828:	mov	ip, fp
   1a82c:	cmp	r3, r0
   1a830:	bne	1a7d0 <__assert_fail@plt+0x84b0>
   1a834:	ldr	r3, [sp, #28]
   1a838:	rsb	r2, r1, r3
   1a83c:	ldr	r3, [r4, #24]
   1a840:	cmp	r3, r2, asr #4
   1a844:	beq	1a85c <__assert_fail@plt+0x853c>
   1a848:	ldr	lr, [sp, #24]
   1a84c:	ldr	r3, [r4, #20]
   1a850:	rsb	r0, r0, lr
   1a854:	cmp	r3, r0, asr #4
   1a858:	beq	1aa94 <__assert_fail@plt+0x8774>
   1a85c:	ldr	r3, [r4, #16]
   1a860:	ldr	r1, [sp, #24]
   1a864:	str	ip, [r3]
   1a868:	ldr	r3, [sp, #28]
   1a86c:	ldm	r4, {fp, ip}
   1a870:	ldr	r2, [r4, #20]
   1a874:	rsb	fp, fp, r1
   1a878:	rsb	ip, ip, r3
   1a87c:	ldr	lr, [r4, #24]
   1a880:	asr	fp, fp, #4
   1a884:	asr	ip, ip, #4
   1a888:	ldrb	r3, [r4, #44]	; 0x2c
   1a88c:	rsb	r2, fp, r2
   1a890:	rsb	lr, ip, lr
   1a894:	str	r2, [r4, #20]
   1a898:	cmp	r3, #0
   1a89c:	str	lr, [r4, #24]
   1a8a0:	beq	1a910 <__assert_fail@plt+0x85f0>
   1a8a4:	ldr	r3, [r4, #40]	; 0x28
   1a8a8:	cmp	r3, #1
   1a8ac:	bls	1a8ec <__assert_fail@plt+0x85cc>
   1a8b0:	ldr	r0, [r4, #28]
   1a8b4:	add	r0, r0, #48	; 0x30
   1a8b8:	bl	11df8 <pthread_mutex_lock@plt>
   1a8bc:	ldr	r1, [r4, #28]
   1a8c0:	ldrb	r3, [r1, #44]	; 0x2c
   1a8c4:	cmp	r3, #0
   1a8c8:	bne	1a8d8 <__assert_fail@plt+0x85b8>
   1a8cc:	mov	r0, r6
   1a8d0:	bl	1a590 <__assert_fail@plt+0x8270>
   1a8d4:	ldr	r1, [r4, #28]
   1a8d8:	add	r0, r1, #48	; 0x30
   1a8dc:	bl	11d14 <pthread_mutex_unlock@plt>
   1a8e0:	ldr	r0, [sp, #32]
   1a8e4:	bl	11d14 <pthread_mutex_unlock@plt>
   1a8e8:	b	1a738 <__assert_fail@plt+0x8418>
   1a8ec:	ldr	r2, [r4, #24]
   1a8f0:	ldr	r3, [r4, #20]
   1a8f4:	add	r3, r2, r3
   1a8f8:	cmp	r3, #0
   1a8fc:	bne	1a8e0 <__assert_fail@plt+0x85c0>
   1a900:	ldr	r1, [r4, #28]
   1a904:	mov	r0, r6
   1a908:	bl	17778 <__assert_fail@plt+0x5458>
   1a90c:	b	1a8e0 <__assert_fail@plt+0x85c0>
   1a910:	mov	r0, r6
   1a914:	mov	r1, r4
   1a918:	bl	1a590 <__assert_fail@plt+0x8270>
   1a91c:	b	1a8a4 <__assert_fail@plt+0x8584>
   1a920:	ldr	r0, [sp, #24]
   1a924:	mov	r1, lr
   1a928:	b	1a988 <__assert_fail@plt+0x8668>
   1a92c:	ldr	r3, [r4, #12]
   1a930:	cmp	r3, r1
   1a934:	beq	1a994 <__assert_fail@plt+0x8674>
   1a938:	cmp	r5, #0
   1a93c:	beq	1ab1c <__assert_fail@plt+0x87fc>
   1a940:	sub	r1, r1, #16
   1a944:	sub	r0, r0, #16
   1a948:	bl	177fc <__assert_fail@plt+0x54dc>
   1a94c:	sub	r5, r5, #1
   1a950:	cmp	r0, #0
   1a954:	ldrle	r0, [r4]
   1a958:	movle	r1, sl
   1a95c:	ldrgt	r0, [r4, #4]
   1a960:	movgt	r1, sl
   1a964:	suble	r0, r0, #16
   1a968:	movle	r2, r9
   1a96c:	subgt	r0, r0, #16
   1a970:	strle	r0, [r4]
   1a974:	strgt	r0, [r4, #4]
   1a978:	movgt	r2, r9
   1a97c:	bl	17aa0 <__assert_fail@plt+0x5780>
   1a980:	ldr	r0, [r4]
   1a984:	ldr	r1, [r4, #4]
   1a988:	ldr	r2, [r4, #8]
   1a98c:	cmp	r2, r0
   1a990:	bne	1a92c <__assert_fail@plt+0x860c>
   1a994:	mov	r3, r1
   1a998:	mov	r1, r0
   1a99c:	str	r2, [sp, #16]
   1a9a0:	ldr	lr, [sp, #28]
   1a9a4:	ldr	r2, [sp, #24]
   1a9a8:	rsb	ip, r3, lr
   1a9ac:	ldr	lr, [r4, #24]
   1a9b0:	rsb	fp, r0, r2
   1a9b4:	asr	ip, ip, #4
   1a9b8:	cmp	ip, lr
   1a9bc:	asr	fp, fp, #4
   1a9c0:	beq	1ab30 <__assert_fail@plt+0x8810>
   1a9c4:	ldr	r2, [r4, #20]
   1a9c8:	cmp	fp, r2
   1a9cc:	bne	1a888 <__assert_fail@plt+0x8568>
   1a9d0:	ldr	r2, [r4, #12]
   1a9d4:	cmp	r2, r3
   1a9d8:	beq	1ac00 <__assert_fail@plt+0x88e0>
   1a9dc:	cmp	r5, #0
   1a9e0:	bne	1a9f0 <__assert_fail@plt+0x86d0>
   1a9e4:	b	1ac00 <__assert_fail@plt+0x88e0>
   1a9e8:	subs	r5, r5, #1
   1a9ec:	beq	1aba8 <__assert_fail@plt+0x8888>
   1a9f0:	sub	r0, r3, #16
   1a9f4:	mov	r2, r9
   1a9f8:	mov	r1, sl
   1a9fc:	str	r0, [r4, #4]
   1aa00:	bl	17aa0 <__assert_fail@plt+0x5780>
   1aa04:	ldr	r3, [r4, #4]
   1aa08:	ldr	r2, [r4, #12]
   1aa0c:	cmp	r3, r2
   1aa10:	bne	1a9e8 <__assert_fail@plt+0x86c8>
   1aa14:	ldr	lr, [sp, #28]
   1aa18:	ldr	fp, [r4]
   1aa1c:	ldr	r1, [sp, #24]
   1aa20:	rsb	r3, r3, lr
   1aa24:	ldr	r2, [r4, #20]
   1aa28:	rsb	fp, fp, r1
   1aa2c:	asr	ip, r3, #4
   1aa30:	ldr	lr, [r4, #24]
   1aa34:	asr	fp, fp, #4
   1aa38:	b	1a888 <__assert_fail@plt+0x8568>
   1aa3c:	mvn	r5, #0
   1aa40:	ldr	r3, [sp, #28]
   1aa44:	rsb	r2, r1, r3
   1aa48:	ldr	r3, [r4, #24]
   1aa4c:	cmp	r3, r2, asr #4
   1aa50:	bne	1a848 <__assert_fail@plt+0x8528>
   1aa54:	cmp	r5, #0
   1aa58:	beq	1a85c <__assert_fail@plt+0x853c>
   1aa5c:	mov	r3, r0
   1aa60:	b	1aa6c <__assert_fail@plt+0x874c>
   1aa64:	subs	r5, r5, #1
   1aa68:	beq	1a85c <__assert_fail@plt+0x853c>
   1aa6c:	sub	r3, r3, #16
   1aa70:	str	r3, [r4]
   1aa74:	sub	ip, ip, #16
   1aa78:	ldm	r3, {r0, r1, r2, r3}
   1aa7c:	stm	ip, {r0, r1, r2, r3}
   1aa80:	ldr	r3, [r4]
   1aa84:	ldr	r2, [r4, #8]
   1aa88:	cmp	r3, r2
   1aa8c:	bne	1aa64 <__assert_fail@plt+0x8744>
   1aa90:	b	1a85c <__assert_fail@plt+0x853c>
   1aa94:	ldr	r3, [r4, #12]
   1aa98:	cmp	r3, r1
   1aa9c:	beq	1a85c <__assert_fail@plt+0x853c>
   1aaa0:	cmp	r5, #0
   1aaa4:	beq	1a85c <__assert_fail@plt+0x853c>
   1aaa8:	mov	r3, r1
   1aaac:	b	1aab8 <__assert_fail@plt+0x8798>
   1aab0:	subs	r5, r5, #1
   1aab4:	beq	1a85c <__assert_fail@plt+0x853c>
   1aab8:	sub	r3, r3, #16
   1aabc:	str	r3, [r4, #4]
   1aac0:	sub	ip, ip, #16
   1aac4:	ldm	r3, {r0, r1, r2, r3}
   1aac8:	stm	ip, {r0, r1, r2, r3}
   1aacc:	ldr	r3, [r4, #4]
   1aad0:	ldr	r2, [r4, #12]
   1aad4:	cmp	r3, r2
   1aad8:	bne	1aab0 <__assert_fail@plt+0x8790>
   1aadc:	b	1a85c <__assert_fail@plt+0x853c>
   1aae0:	ldr	r0, [sp, #32]
   1aae4:	bl	11d14 <pthread_mutex_unlock@plt>
   1aae8:	mov	r0, r6
   1aaec:	mov	r1, r4
   1aaf0:	bl	17778 <__assert_fail@plt+0x5458>
   1aaf4:	ldr	r1, [sp, #40]	; 0x28
   1aaf8:	add	r0, r1, #48	; 0x30
   1aafc:	bl	11d98 <pthread_mutex_destroy@plt>
   1ab00:	ldr	r1, [sp, #44]	; 0x2c
   1ab04:	ldr	r2, [sp, #84]	; 0x54
   1ab08:	ldr	r3, [r1]
   1ab0c:	cmp	r2, r3
   1ab10:	bne	1ac4c <__assert_fail@plt+0x892c>
   1ab14:	add	sp, sp, #92	; 0x5c
   1ab18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab1c:	mov	r3, r1
   1ab20:	str	r2, [sp, #16]
   1ab24:	mov	r1, r0
   1ab28:	mvn	r5, #0
   1ab2c:	b	1a9a0 <__assert_fail@plt+0x8680>
   1ab30:	ldr	r3, [sp, #16]
   1ab34:	cmp	r0, r3
   1ab38:	moveq	lr, ip
   1ab3c:	ldreq	r2, [r4, #20]
   1ab40:	beq	1a888 <__assert_fail@plt+0x8568>
   1ab44:	cmp	r5, #0
   1ab48:	movne	r0, r1
   1ab4c:	bne	1ab5c <__assert_fail@plt+0x883c>
   1ab50:	b	1ac40 <__assert_fail@plt+0x8920>
   1ab54:	subs	r5, r5, #1
   1ab58:	beq	1ab80 <__assert_fail@plt+0x8860>
   1ab5c:	sub	r0, r0, #16
   1ab60:	mov	r1, sl
   1ab64:	str	r0, [r4]
   1ab68:	mov	r2, r9
   1ab6c:	bl	17aa0 <__assert_fail@plt+0x5780>
   1ab70:	ldr	r0, [r4]
   1ab74:	ldr	r3, [r4, #8]
   1ab78:	cmp	r0, r3
   1ab7c:	bne	1ab54 <__assert_fail@plt+0x8834>
   1ab80:	ldr	lr, [sp, #24]
   1ab84:	ldr	ip, [r4, #4]
   1ab88:	ldr	r3, [sp, #28]
   1ab8c:	rsb	r1, r0, lr
   1ab90:	ldr	r2, [r4, #20]
   1ab94:	rsb	ip, ip, r3
   1ab98:	asr	fp, r1, #4
   1ab9c:	ldr	lr, [r4, #24]
   1aba0:	asr	ip, ip, #4
   1aba4:	b	1a888 <__assert_fail@plt+0x8568>
   1aba8:	ldr	r2, [sp, #28]
   1abac:	ldr	lr, [sp, #24]
   1abb0:	ldr	fp, [r4]
   1abb4:	rsb	r3, r3, r2
   1abb8:	ldr	r2, [r4, #20]
   1abbc:	rsb	fp, fp, lr
   1abc0:	asr	ip, r3, #4
   1abc4:	ldr	lr, [r4, #24]
   1abc8:	asr	fp, fp, #4
   1abcc:	b	1a888 <__assert_fail@plt+0x8568>
   1abd0:	ldr	r2, [pc, #128]	; 1ac58 <__assert_fail@plt+0x8938>
   1abd4:	add	r0, sp, #52	; 0x34
   1abd8:	mov	r1, #0
   1abdc:	add	r3, sp, #56	; 0x38
   1abe0:	add	r2, pc, r2
   1abe4:	bl	11ffc <pthread_create@plt>
   1abe8:	subs	r5, r0, #0
   1abec:	beq	1ac08 <__assert_fail@plt+0x88e8>
   1abf0:	ldr	r1, [sp, #40]	; 0x28
   1abf4:	ldr	r5, [r1, #20]
   1abf8:	ldr	r7, [r1, #24]
   1abfc:	b	1a6a0 <__assert_fail@plt+0x8380>
   1ac00:	mov	r2, fp
   1ac04:	b	1a888 <__assert_fail@plt+0x8568>
   1ac08:	ldr	r2, [sp, #40]	; 0x28
   1ac0c:	rsb	r1, fp, r8
   1ac10:	ldr	r0, [r2, #20]
   1ac14:	ldr	r3, [r2, #36]	; 0x24
   1ac18:	ldr	r2, [sp, #36]	; 0x24
   1ac1c:	sub	r0, r4, r0, lsl #4
   1ac20:	str	r6, [sp]
   1ac24:	str	sl, [sp, #4]
   1ac28:	str	r9, [sp, #8]
   1ac2c:	bl	1a618 <__assert_fail@plt+0x82f8>
   1ac30:	mov	r1, r5
   1ac34:	ldr	r0, [sp, #52]	; 0x34
   1ac38:	bl	1223c <pthread_join@plt>
   1ac3c:	b	1aaf4 <__assert_fail@plt+0x87d4>
   1ac40:	mov	lr, ip
   1ac44:	ldr	r2, [r4, #20]
   1ac48:	b	1a888 <__assert_fail@plt+0x8568>
   1ac4c:	bl	11ed0 <__stack_chk_fail@plt>
   1ac50:	ldrdeq	sp, [r1], -r0
   1ac54:	andeq	r0, r0, ip, lsl r2
   1ac58:	andeq	r0, r0, r4, ror r0
   1ac5c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ac60:	sub	sp, sp, #20
   1ac64:	ldmib	r0, {r1, r2, r3, ip}
   1ac68:	str	ip, [sp]
   1ac6c:	ldr	ip, [r0, #20]
   1ac70:	ldr	lr, [r0]
   1ac74:	str	ip, [sp, #4]
   1ac78:	ldr	ip, [r0, #24]
   1ac7c:	mov	r0, lr
   1ac80:	str	ip, [sp, #8]
   1ac84:	bl	1a618 <__assert_fail@plt+0x82f8>
   1ac88:	mov	r0, #0
   1ac8c:	add	sp, sp, #20
   1ac90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac94:	ldr	r3, [pc, #104]	; 1ad04 <__assert_fail@plt+0x89e4>
   1ac98:	push	{r4, r5, lr}
   1ac9c:	mov	r5, r0
   1aca0:	ldr	r0, [pc, #96]	; 1ad08 <__assert_fail@plt+0x89e8>
   1aca4:	add	r3, pc, r3
   1aca8:	ldr	r2, [pc, #92]	; 1ad0c <__assert_fail@plt+0x89ec>
   1acac:	sub	sp, sp, #20
   1acb0:	ldr	r4, [r3, r0]
   1acb4:	add	r2, pc, r2
   1acb8:	mov	r1, sp
   1acbc:	str	r5, [sp, #4]
   1acc0:	ldr	r0, [r2, #1396]	; 0x574
   1acc4:	ldr	r3, [r4]
   1acc8:	str	r3, [sp, #12]
   1accc:	bl	1ebe8 <__assert_fail@plt+0xc8c8>
   1acd0:	subs	r3, r0, #0
   1acd4:	beq	1ace8 <__assert_fail@plt+0x89c8>
   1acd8:	mov	r2, #2
   1acdc:	mov	r0, r5
   1ace0:	strb	r2, [r3, #8]
   1ace4:	bl	1703c <__assert_fail@plt+0x4d1c>
   1ace8:	ldr	r2, [sp, #12]
   1acec:	ldr	r3, [r4]
   1acf0:	cmp	r2, r3
   1acf4:	bne	1ad00 <__assert_fail@plt+0x89e0>
   1acf8:	add	sp, sp, #20
   1acfc:	pop	{r4, r5, pc}
   1ad00:	bl	11ed0 <__stack_chk_fail@plt>
   1ad04:	andeq	sp, r1, r4, asr r3
   1ad08:	andeq	r0, r0, ip, lsl r2
   1ad0c:	andeq	sp, r1, r4, ror r6
   1ad10:	ldr	r3, [pc, #336]	; 1ae68 <__assert_fail@plt+0x8b48>
   1ad14:	ldr	r2, [pc, #336]	; 1ae6c <__assert_fail@plt+0x8b4c>
   1ad18:	add	r3, pc, r3
   1ad1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad20:	sub	sp, sp, #272	; 0x110
   1ad24:	ldr	r6, [r3, r2]
   1ad28:	mov	r5, r0
   1ad2c:	ldr	r9, [pc, #316]	; 1ae70 <__assert_fail@plt+0x8b50>
   1ad30:	ldr	r3, [r6]
   1ad34:	add	r9, pc, r9
   1ad38:	str	r3, [sp, #268]	; 0x10c
   1ad3c:	ldr	r2, [r9, #1188]	; 0x4a4
   1ad40:	add	r3, r2, #9
   1ad44:	cmp	r0, r3
   1ad48:	bne	1ad54 <__assert_fail@plt+0x8a34>
   1ad4c:	b	1ae40 <__assert_fail@plt+0x8b20>
   1ad50:	mov	r2, r4
   1ad54:	ldr	r4, [r2]
   1ad58:	add	r1, r4, #9
   1ad5c:	cmp	r5, r1
   1ad60:	bne	1ad50 <__assert_fail@plt+0x8a30>
   1ad64:	ldrb	r3, [r4, #8]
   1ad68:	mov	r9, r2
   1ad6c:	cmp	r3, #1
   1ad70:	beq	1ae58 <__assert_fail@plt+0x8b38>
   1ad74:	add	r8, sp, #4
   1ad78:	ldr	r7, [r4]
   1ad7c:	mov	r0, r8
   1ad80:	bl	15ea4 <__assert_fail@plt+0x3b84>
   1ad84:	mov	r0, r5
   1ad88:	bl	11f0c <unlink@plt>
   1ad8c:	mov	sl, r0
   1ad90:	bl	1211c <__errno_location@plt>
   1ad94:	mov	r1, r8
   1ad98:	mov	r2, #132	; 0x84
   1ad9c:	ldr	r8, [r0]
   1ada0:	add	r0, sp, #136	; 0x88
   1ada4:	str	r7, [r9]
   1ada8:	bl	11e28 <memcpy@plt>
   1adac:	ldrb	r3, [sp, #136]	; 0x88
   1adb0:	cmp	r3, #0
   1adb4:	bne	1ade8 <__assert_fail@plt+0x8ac8>
   1adb8:	cmp	sl, #0
   1adbc:	bne	1ae00 <__assert_fail@plt+0x8ae0>
   1adc0:	cmp	r7, #0
   1adc4:	beq	1ae30 <__assert_fail@plt+0x8b10>
   1adc8:	mov	r0, r4
   1adcc:	bl	11dec <free@plt>
   1add0:	ldr	r2, [sp, #268]	; 0x10c
   1add4:	ldr	r3, [r6]
   1add8:	cmp	r2, r3
   1addc:	bne	1ae64 <__assert_fail@plt+0x8b44>
   1ade0:	add	sp, sp, #272	; 0x110
   1ade4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ade8:	mov	r0, #2
   1adec:	add	r1, sp, #140	; 0x8c
   1adf0:	mov	r2, #0
   1adf4:	bl	11dc8 <sigprocmask@plt>
   1adf8:	cmp	sl, #0
   1adfc:	beq	1adc0 <__assert_fail@plt+0x8aa0>
   1ae00:	ldr	r1, [pc, #108]	; 1ae74 <__assert_fail@plt+0x8b54>
   1ae04:	mov	r2, #5
   1ae08:	mov	r0, #0
   1ae0c:	add	r1, pc, r1
   1ae10:	bl	11ec4 <dcgettext@plt>
   1ae14:	mov	r1, r8
   1ae18:	mov	r3, r5
   1ae1c:	mov	r2, r0
   1ae20:	mov	r0, #0
   1ae24:	bl	12020 <error@plt>
   1ae28:	cmp	r7, #0
   1ae2c:	bne	1adc8 <__assert_fail@plt+0x8aa8>
   1ae30:	ldr	r3, [pc, #64]	; 1ae78 <__assert_fail@plt+0x8b58>
   1ae34:	add	r3, pc, r3
   1ae38:	str	r9, [r3, #96]	; 0x60
   1ae3c:	b	1adc8 <__assert_fail@plt+0x8aa8>
   1ae40:	mov	r4, r2
   1ae44:	add	r9, r9, #1184	; 0x4a0
   1ae48:	ldrb	r3, [r4, #8]
   1ae4c:	add	r9, r9, #4
   1ae50:	cmp	r3, #1
   1ae54:	bne	1ad74 <__assert_fail@plt+0x8a54>
   1ae58:	ldr	r0, [r4, #4]
   1ae5c:	bl	1ac94 <__assert_fail@plt+0x8974>
   1ae60:	b	1ad74 <__assert_fail@plt+0x8a54>
   1ae64:	bl	11ed0 <__stack_chk_fail@plt>
   1ae68:	andeq	sp, r1, r0, ror #5
   1ae6c:	andeq	r0, r0, ip, lsl r2
   1ae70:	strdeq	sp, [r1], -r4
   1ae74:	strdeq	sl, [r0], -ip
   1ae78:	andeq	sp, r1, r0, asr #8
   1ae7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae80:	sub	sp, sp, #116	; 0x74
   1ae84:	ldr	r4, [pc, #1808]	; 1b59c <__assert_fail@plt+0x927c>
   1ae88:	movw	ip, #37449	; 0x9249
   1ae8c:	ldr	lr, [pc, #1804]	; 1b5a0 <__assert_fail@plt+0x9280>
   1ae90:	movt	ip, #2340	; 0x924
   1ae94:	add	r4, pc, r4
   1ae98:	str	r2, [sp, #12]
   1ae9c:	str	r0, [sp, #20]
   1aea0:	cmp	r2, ip
   1aea4:	str	r1, [sp, #52]	; 0x34
   1aea8:	mov	r2, r4
   1aeac:	ldr	lr, [r4, lr]
   1aeb0:	str	r3, [sp, #60]	; 0x3c
   1aeb4:	ldr	sl, [sp, #152]	; 0x98
   1aeb8:	ldr	fp, [sp, #156]	; 0x9c
   1aebc:	ldr	r3, [lr]
   1aec0:	str	lr, [sp, #72]	; 0x48
   1aec4:	str	sl, [sp, #64]	; 0x40
   1aec8:	str	fp, [sp, #16]
   1aecc:	str	r3, [sp, #108]	; 0x6c
   1aed0:	bhi	1b594 <__assert_fail@plt+0x9274>
   1aed4:	ldr	sl, [sp, #12]
   1aed8:	rsb	r0, sl, sl, lsl #3
   1aedc:	lsl	r4, sl, #2
   1aee0:	lsl	r0, r0, #2
   1aee4:	bl	226ec <__assert_fail@plt+0x103cc>
   1aee8:	str	r0, [sp, #28]
   1aeec:	mov	r0, r4
   1aef0:	bl	226ec <__assert_fail@plt+0x103cc>
   1aef4:	mov	fp, r0
   1aef8:	mov	r0, r4
   1aefc:	bl	226ec <__assert_fail@plt+0x103cc>
   1af00:	str	r0, [sp, #40]	; 0x28
   1af04:	mov	r0, r4
   1af08:	bl	226ec <__assert_fail@plt+0x103cc>
   1af0c:	ldr	r3, [pc, #1680]	; 1b5a4 <__assert_fail@plt+0x9284>
   1af10:	ldr	r1, [sp, #12]
   1af14:	mov	r4, #0
   1af18:	add	r3, pc, r3
   1af1c:	str	r4, [sp, #92]	; 0x5c
   1af20:	cmp	r1, #0
   1af24:	ldr	r2, [r3, #1356]	; 0x54c
   1af28:	str	r2, [sp, #84]	; 0x54
   1af2c:	mov	sl, r0
   1af30:	beq	1b0b0 <__assert_fail@plt+0x8d90>
   1af34:	ldr	r7, [sp, #12]
   1af38:	mov	r6, r4
   1af3c:	ldr	r1, [pc, #1636]	; 1b5a8 <__assert_fail@plt+0x9288>
   1af40:	mov	r5, r4
   1af44:	str	r3, [sp, #32]
   1af48:	add	r1, pc, r1
   1af4c:	str	r0, [sp, #44]	; 0x2c
   1af50:	str	r1, [sp, #36]	; 0x24
   1af54:	ldr	r3, [sp, #32]
   1af58:	mov	r1, r7
   1af5c:	rsb	sl, r4, r6
   1af60:	ldr	r0, [r3, #1436]	; 0x59c
   1af64:	bl	242f8 <__assert_fail@plt+0x11fd8>
   1af68:	ldr	r3, [sp, #36]	; 0x24
   1af6c:	mov	r1, #16
   1af70:	ldr	r2, [r3, #8]
   1af74:	ldr	r3, [sp, #28]
   1af78:	add	r9, r3, sl, lsl #2
   1af7c:	ldr	r3, [sp, #16]
   1af80:	add	r3, r3, r5
   1af84:	str	r3, [sp, #24]
   1af88:	ldr	r3, [sp, #20]
   1af8c:	add	r8, r3, r6
   1af90:	cmp	r0, r2
   1af94:	movcs	r2, r0
   1af98:	mov	r0, r9
   1af9c:	bl	167e4 <__assert_fail@plt+0x44c4>
   1afa0:	ldr	r2, [sp, #16]
   1afa4:	ldr	r3, [sp, #20]
   1afa8:	mov	r0, r9
   1afac:	ldr	r1, [r2, r5]
   1afb0:	ldr	r2, [r3, r6]
   1afb4:	bl	18684 <__assert_fail@plt+0x6364>
   1afb8:	cmp	r0, #0
   1afbc:	beq	1b000 <__assert_fail@plt+0x8ce0>
   1afc0:	ldr	r1, [sp, #28]
   1afc4:	add	r4, r4, #1
   1afc8:	ldr	r2, [r9, #8]
   1afcc:	cmp	r4, r7
   1afd0:	ldr	r0, [r1, sl, lsl #2]
   1afd4:	ldr	r1, [r9, #12]
   1afd8:	ldr	sl, [sp, #40]	; 0x28
   1afdc:	add	r3, r0, r1
   1afe0:	sub	r1, r3, #16
   1afe4:	str	r1, [fp, r5]
   1afe8:	sub	r3, r3, r2, lsl #4
   1afec:	str	r3, [sl, r5]
   1aff0:	bcs	1b100 <__assert_fail@plt+0x8de0>
   1aff4:	lsl	r6, r4, #3
   1aff8:	lsl	r5, r4, #2
   1affc:	b	1af54 <__assert_fail@plt+0x8c34>
   1b000:	ldr	r1, [sp, #16]
   1b004:	ldr	r2, [sp, #20]
   1b008:	ldr	r0, [r1, r5]
   1b00c:	ldr	r1, [r2, r6]
   1b010:	bl	1a384 <__assert_fail@plt+0x8064>
   1b014:	ldr	r3, [sp, #52]	; 0x34
   1b018:	cmp	r3, r4
   1b01c:	bhi	1b558 <__assert_fail@plt+0x9238>
   1b020:	ldr	r1, [sp, #28]
   1b024:	sub	r7, r7, #1
   1b028:	ldr	r0, [r1, sl, lsl #2]
   1b02c:	bl	11dec <free@plt>
   1b030:	cmp	r7, r4
   1b034:	bls	1b100 <__assert_fail@plt+0x8de0>
   1b038:	ldr	r9, [sp, #24]
   1b03c:	mov	r2, r4
   1b040:	add	r3, r8, #8
   1b044:	add	r2, r2, #1
   1b048:	cmp	r7, r2
   1b04c:	ldm	r3, {r0, r1}
   1b050:	stm	r8, {r0, r1}
   1b054:	mov	r8, r3
   1b058:	ldr	r3, [r9, #4]
   1b05c:	str	r3, [r9], #4
   1b060:	bne	1b040 <__assert_fail@plt+0x8d20>
   1b064:	b	1af54 <__assert_fail@plt+0x8c34>
   1b068:	ldr	r2, [sp, #12]
   1b06c:	str	r7, [sl]
   1b070:	cmp	r2, #0
   1b074:	bne	1b1a0 <__assert_fail@plt+0x8e80>
   1b078:	ldr	r3, [pc, #1324]	; 1b5ac <__assert_fail@plt+0x928c>
   1b07c:	add	r3, pc, r3
   1b080:	ldrb	r3, [r3, #1388]	; 0x56c
   1b084:	cmp	r3, #0
   1b088:	beq	1b0b0 <__assert_fail@plt+0x8d90>
   1b08c:	ldr	r3, [sp, #44]	; 0x2c
   1b090:	cmp	r3, #0
   1b094:	beq	1b0b0 <__assert_fail@plt+0x8d90>
   1b098:	add	r0, sp, #92	; 0x5c
   1b09c:	ldr	r1, [sp, #60]	; 0x3c
   1b0a0:	ldr	r2, [sp, #64]	; 0x40
   1b0a4:	bl	16b44 <__assert_fail@plt+0x4824>
   1b0a8:	ldr	r0, [sp, #92]	; 0x5c
   1b0ac:	bl	11dec <free@plt>
   1b0b0:	ldr	r1, [sp, #64]	; 0x40
   1b0b4:	ldr	r0, [sp, #60]	; 0x3c
   1b0b8:	bl	1a384 <__assert_fail@plt+0x8064>
   1b0bc:	ldr	r0, [sp, #16]
   1b0c0:	bl	11dec <free@plt>
   1b0c4:	ldr	r0, [sp, #28]
   1b0c8:	bl	11dec <free@plt>
   1b0cc:	mov	r0, sl
   1b0d0:	bl	11dec <free@plt>
   1b0d4:	ldr	r0, [sp, #40]	; 0x28
   1b0d8:	bl	11dec <free@plt>
   1b0dc:	ldr	sl, [sp, #72]	; 0x48
   1b0e0:	ldr	r2, [sp, #108]	; 0x6c
   1b0e4:	ldr	r3, [sl]
   1b0e8:	cmp	r2, r3
   1b0ec:	bne	1b598 <__assert_fail@plt+0x9278>
   1b0f0:	mov	r0, fp
   1b0f4:	add	sp, sp, #116	; 0x74
   1b0f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0fc:	b	11dec <free@plt>
   1b100:	cmp	r7, #0
   1b104:	ldr	sl, [sp, #44]	; 0x2c
   1b108:	str	r7, [sp, #12]
   1b10c:	beq	1b0b0 <__assert_fail@plt+0x8d90>
   1b110:	sub	r2, sl, #4
   1b114:	mov	r3, #0
   1b118:	mov	r1, r7
   1b11c:	str	r3, [r2, #4]!
   1b120:	add	r3, r3, #1
   1b124:	cmp	r3, r1
   1b128:	bne	1b11c <__assert_fail@plt+0x8dfc>
   1b12c:	ldr	r2, [sp, #12]
   1b130:	cmp	r2, #1
   1b134:	beq	1b180 <__assert_fail@plt+0x8e60>
   1b138:	mov	r8, #1
   1b13c:	sub	r4, r8, #-1073741823	; 0xc0000001
   1b140:	lsl	r5, r4, #2
   1b144:	ldr	r6, [sl, r4, lsl #2]
   1b148:	add	r5, r5, #4
   1b14c:	ldr	r7, [sl, r5]
   1b150:	ldr	r0, [fp, r6, lsl #2]
   1b154:	ldr	r1, [fp, r7, lsl #2]
   1b158:	bl	177fc <__assert_fail@plt+0x54dc>
   1b15c:	cmp	r0, #0
   1b160:	strgt	r7, [sl, r4, lsl #2]
   1b164:	movgt	r8, #1
   1b168:	strgt	r6, [sl, r5]
   1b16c:	bgt	1b13c <__assert_fail@plt+0x8e1c>
   1b170:	ldr	r3, [sp, #12]
   1b174:	add	r8, r8, #1
   1b178:	cmp	r8, r3
   1b17c:	bcc	1b13c <__assert_fail@plt+0x8e1c>
   1b180:	ldr	r3, [pc, #1064]	; 1b5b0 <__assert_fail@plt+0x9290>
   1b184:	mov	r2, #0
   1b188:	add	r1, sp, #92	; 0x5c
   1b18c:	str	r2, [sp, #56]	; 0x38
   1b190:	add	r3, pc, r3
   1b194:	str	r2, [sp, #44]	; 0x2c
   1b198:	str	r3, [sp, #48]	; 0x30
   1b19c:	str	r1, [sp, #68]	; 0x44
   1b1a0:	ldr	r1, [sp, #48]	; 0x30
   1b1a4:	ldr	r7, [sl]
   1b1a8:	ldrb	r3, [r1, #1388]	; 0x56c
   1b1ac:	lsl	r5, r7, #2
   1b1b0:	ldr	r4, [fp, r7, lsl #2]
   1b1b4:	cmp	r3, #0
   1b1b8:	beq	1b50c <__assert_fail@plt+0x91ec>
   1b1bc:	ldr	r2, [sp, #44]	; 0x2c
   1b1c0:	cmp	r2, #0
   1b1c4:	beq	1b2a0 <__assert_fail@plt+0x8f80>
   1b1c8:	mov	r0, r2
   1b1cc:	mov	r1, r4
   1b1d0:	bl	177fc <__assert_fail@plt+0x54dc>
   1b1d4:	cmp	r0, #0
   1b1d8:	bne	1b290 <__assert_fail@plt+0x8f70>
   1b1dc:	ldr	r1, [sp, #40]	; 0x28
   1b1e0:	ldr	r3, [r1, r7, lsl #2]
   1b1e4:	cmp	r4, r3
   1b1e8:	bls	1b348 <__assert_fail@plt+0x9028>
   1b1ec:	sub	r4, r4, #16
   1b1f0:	str	r4, [fp, r7, lsl #2]
   1b1f4:	ldr	r1, [sp, #12]
   1b1f8:	cmp	r1, #1
   1b1fc:	bls	1b068 <__assert_fail@plt+0x8d48>
   1b200:	mov	r4, #1
   1b204:	ldr	r5, [fp, r7, lsl #2]
   1b208:	mov	r6, r4
   1b20c:	mov	r8, r1
   1b210:	b	1b230 <__assert_fail@plt+0x8f10>
   1b214:	cmp	r7, r9
   1b218:	bcs	1b24c <__assert_fail@plt+0x8f2c>
   1b21c:	mov	r8, r4
   1b220:	add	r4, r8, r6
   1b224:	cmp	r6, r8
   1b228:	lsr	r4, r4, #1
   1b22c:	bcs	1b260 <__assert_fail@plt+0x8f40>
   1b230:	ldr	r9, [sl, r4, lsl #2]
   1b234:	mov	r0, r5
   1b238:	ldr	r1, [fp, r9, lsl #2]
   1b23c:	bl	177fc <__assert_fail@plt+0x54dc>
   1b240:	cmp	r0, #0
   1b244:	blt	1b21c <__assert_fail@plt+0x8efc>
   1b248:	beq	1b214 <__assert_fail@plt+0x8ef4>
   1b24c:	add	r6, r4, #1
   1b250:	add	r4, r8, r6
   1b254:	cmp	r6, r8
   1b258:	lsr	r4, r4, #1
   1b25c:	bcc	1b230 <__assert_fail@plt+0x8f10>
   1b260:	subs	r6, r6, #1
   1b264:	beq	1b288 <__assert_fail@plt+0x8f68>
   1b268:	mov	r2, sl
   1b26c:	mov	r3, #0
   1b270:	add	r3, r3, #1
   1b274:	ldr	r1, [r2, #4]
   1b278:	cmp	r6, r3
   1b27c:	str	r1, [r2], #4
   1b280:	bne	1b270 <__assert_fail@plt+0x8f50>
   1b284:	lsl	r6, r6, #2
   1b288:	str	r7, [sl, r6]
   1b28c:	b	1b1a0 <__assert_fail@plt+0x8e80>
   1b290:	add	r0, sp, #92	; 0x5c
   1b294:	ldr	r1, [sp, #60]	; 0x3c
   1b298:	ldr	r2, [sp, #64]	; 0x40
   1b29c:	bl	16b44 <__assert_fail@plt+0x4824>
   1b2a0:	ldr	r6, [r4, #4]
   1b2a4:	ldr	r1, [sp, #56]	; 0x38
   1b2a8:	cmp	r6, r1
   1b2ac:	bls	1b520 <__assert_fail@plt+0x9200>
   1b2b0:	ldr	r3, [sp, #56]	; 0x38
   1b2b4:	b	1b2c4 <__assert_fail@plt+0x8fa4>
   1b2b8:	lsl	r3, r3, #1
   1b2bc:	cmp	r6, r3
   1b2c0:	bls	1b580 <__assert_fail@plt+0x9260>
   1b2c4:	cmp	r3, #0
   1b2c8:	bne	1b2b8 <__assert_fail@plt+0x8f98>
   1b2cc:	ldr	r0, [sp, #92]	; 0x5c
   1b2d0:	str	r6, [sp, #56]	; 0x38
   1b2d4:	bl	11dec <free@plt>
   1b2d8:	mov	r0, r6
   1b2dc:	bl	226ec <__assert_fail@plt+0x103cc>
   1b2e0:	ldr	r2, [r4, #4]
   1b2e4:	mov	r3, r0
   1b2e8:	str	r3, [sp, #92]	; 0x5c
   1b2ec:	str	r2, [sp, #96]	; 0x60
   1b2f0:	ldr	r1, [r4]
   1b2f4:	bl	11e28 <memcpy@plt>
   1b2f8:	ldr	r1, [sp, #84]	; 0x54
   1b2fc:	cmp	r1, #0
   1b300:	beq	1b588 <__assert_fail@plt+0x9268>
   1b304:	ldr	r1, [r4, #8]
   1b308:	add	r2, sp, #92	; 0x5c
   1b30c:	str	r2, [sp, #44]	; 0x2c
   1b310:	ldr	r2, [r4]
   1b314:	ldr	r3, [sp, #92]	; 0x5c
   1b318:	rsb	r2, r2, r1
   1b31c:	ldr	r1, [r4, #12]
   1b320:	add	r2, r3, r2
   1b324:	str	r2, [sp, #100]	; 0x64
   1b328:	ldr	r2, [r4]
   1b32c:	rsb	r2, r2, r1
   1b330:	ldr	r1, [sp, #40]	; 0x28
   1b334:	add	r3, r3, r2
   1b338:	str	r3, [sp, #104]	; 0x68
   1b33c:	ldr	r3, [r1, r7, lsl #2]
   1b340:	cmp	r4, r3
   1b344:	bhi	1b1ec <__assert_fail@plt+0x8ecc>
   1b348:	ldr	r3, [sp, #20]
   1b34c:	lsl	r4, r7, #3
   1b350:	ldr	r2, [sp, #16]
   1b354:	rsb	r8, r7, r4
   1b358:	add	r4, r3, r4
   1b35c:	ldr	r1, [r2, r7, lsl #2]
   1b360:	ldr	r2, [r3, r7, lsl #3]
   1b364:	ldr	r3, [sp, #16]
   1b368:	add	r5, r3, r5
   1b36c:	ldr	r3, [sp, #28]
   1b370:	add	r6, r3, r8, lsl #2
   1b374:	mov	r0, r6
   1b378:	bl	18684 <__assert_fail@plt+0x6364>
   1b37c:	cmp	r0, #0
   1b380:	bne	1b52c <__assert_fail@plt+0x920c>
   1b384:	ldr	r1, [sp, #12]
   1b388:	cmp	r1, #1
   1b38c:	bls	1b3d8 <__assert_fail@plt+0x90b8>
   1b390:	ldr	r2, [sp, #12]
   1b394:	add	r3, sl, #4
   1b398:	add	r1, sl, r2, lsl #2
   1b39c:	ldr	r2, [r3], #4
   1b3a0:	cmp	r2, r7
   1b3a4:	subhi	r2, r2, #1
   1b3a8:	strhi	r2, [r3, #-4]
   1b3ac:	ldrhi	r7, [sl]
   1b3b0:	cmp	r3, r1
   1b3b4:	bne	1b39c <__assert_fail@plt+0x907c>
   1b3b8:	lsl	r4, r7, #3
   1b3bc:	ldr	r3, [sp, #16]
   1b3c0:	rsb	r6, r7, r4
   1b3c4:	ldr	r1, [sp, #20]
   1b3c8:	ldr	r2, [sp, #28]
   1b3cc:	add	r5, r3, r7, lsl #2
   1b3d0:	add	r4, r1, r4
   1b3d4:	add	r6, r2, r6, lsl #2
   1b3d8:	ldr	r3, [sp, #12]
   1b3dc:	ldr	r1, [r4]
   1b3e0:	ldr	r0, [r5]
   1b3e4:	sub	r3, r3, #1
   1b3e8:	str	r3, [sp, #12]
   1b3ec:	bl	1a384 <__assert_fail@plt+0x8064>
   1b3f0:	ldr	r1, [sp, #52]	; 0x34
   1b3f4:	cmp	r1, r7
   1b3f8:	bhi	1b56c <__assert_fail@plt+0x924c>
   1b3fc:	ldr	r0, [r6]
   1b400:	bl	11dec <free@plt>
   1b404:	ldr	r2, [sp, #12]
   1b408:	cmp	r2, r7
   1b40c:	bls	1b4dc <__assert_fail@plt+0x91bc>
   1b410:	ldr	r1, [sp, #16]
   1b414:	lsl	r3, r7, #2
   1b418:	add	r2, fp, r3
   1b41c:	lsl	r5, r7, #3
   1b420:	add	r1, r1, r3
   1b424:	str	r1, [sp, #36]	; 0x24
   1b428:	ldr	r1, [sp, #40]	; 0x28
   1b42c:	rsb	r6, r7, r5
   1b430:	str	r2, [sp, #32]
   1b434:	mov	r4, #0
   1b438:	add	r3, r1, r3
   1b43c:	str	r3, [sp, #24]
   1b440:	ldr	r3, [sp, #20]
   1b444:	ldr	r2, [sp, #28]
   1b448:	add	r5, r3, r5
   1b44c:	ldr	r9, [sp, #36]	; 0x24
   1b450:	ldr	r3, [sp, #32]
   1b454:	add	r6, r2, r6, lsl #2
   1b458:	ldr	r8, [sp, #24]
   1b45c:	str	fp, [sp, #76]	; 0x4c
   1b460:	str	sl, [sp, #80]	; 0x50
   1b464:	str	r3, [sp, #4]
   1b468:	ldr	r2, [r9, #4]!
   1b46c:	add	r3, r5, #8
   1b470:	ldr	sl, [sp, #36]	; 0x24
   1b474:	add	r7, r7, #1
   1b478:	add	lr, r6, #28
   1b47c:	mov	ip, r6
   1b480:	str	r2, [sl, r4]
   1b484:	mov	r6, lr
   1b488:	ldr	sl, [sp, #12]
   1b48c:	ldm	r3, {r0, r1}
   1b490:	cmp	sl, r7
   1b494:	ldr	sl, [sp, #4]
   1b498:	stm	r5, {r0, r1}
   1b49c:	mov	r5, r3
   1b4a0:	ldr	fp, [sl, #4]!
   1b4a4:	ldm	lr!, {r0, r1, r2, r3}
   1b4a8:	str	sl, [sp, #4]
   1b4ac:	ldr	sl, [sp, #32]
   1b4b0:	str	fp, [sl, r4]
   1b4b4:	stmia	ip!, {r0, r1, r2, r3}
   1b4b8:	ldm	lr, {r0, r1, r2}
   1b4bc:	ldr	fp, [r8, #4]!
   1b4c0:	ldr	sl, [sp, #24]
   1b4c4:	str	fp, [sl, r4]
   1b4c8:	add	r4, r4, #4
   1b4cc:	stm	ip, {r0, r1, r2}
   1b4d0:	bne	1b468 <__assert_fail@plt+0x9148>
   1b4d4:	ldr	fp, [sp, #76]	; 0x4c
   1b4d8:	ldr	sl, [sp, #80]	; 0x50
   1b4dc:	ldr	r3, [sp, #12]
   1b4e0:	cmp	r3, #0
   1b4e4:	beq	1b078 <__assert_fail@plt+0x8d58>
   1b4e8:	ldr	r0, [sp, #12]
   1b4ec:	mov	r2, sl
   1b4f0:	mov	r3, #0
   1b4f4:	add	r3, r3, #1
   1b4f8:	ldr	r1, [r2, #4]
   1b4fc:	cmp	r0, r3
   1b500:	str	r1, [r2], #4
   1b504:	bne	1b4f4 <__assert_fail@plt+0x91d4>
   1b508:	b	1b1a0 <__assert_fail@plt+0x8e80>
   1b50c:	mov	r0, r4
   1b510:	ldr	r1, [sp, #60]	; 0x3c
   1b514:	ldr	r2, [sp, #64]	; 0x40
   1b518:	bl	16b44 <__assert_fail@plt+0x4824>
   1b51c:	b	1b1dc <__assert_fail@plt+0x8ebc>
   1b520:	mov	r2, r6
   1b524:	ldr	r0, [sp, #92]	; 0x5c
   1b528:	b	1b2ec <__assert_fail@plt+0x8fcc>
   1b52c:	ldr	r2, [sp, #28]
   1b530:	ldr	r3, [r6, #12]
   1b534:	ldr	r1, [r2, r8, lsl #2]
   1b538:	ldr	r2, [r6, #8]
   1b53c:	add	r3, r1, r3
   1b540:	sub	r1, r3, #16
   1b544:	str	r1, [fp, r7, lsl #2]
   1b548:	ldr	r1, [sp, #40]	; 0x28
   1b54c:	sub	r3, r3, r2, lsl #4
   1b550:	str	r3, [r1, r7, lsl #2]
   1b554:	b	1b1f4 <__assert_fail@plt+0x8ed4>
   1b558:	ldr	r0, [r8]
   1b55c:	sub	r3, r3, #1
   1b560:	str	r3, [sp, #52]	; 0x34
   1b564:	bl	1ad10 <__assert_fail@plt+0x89f0>
   1b568:	b	1b020 <__assert_fail@plt+0x8d00>
   1b56c:	ldr	r0, [r4]
   1b570:	sub	r1, r1, #1
   1b574:	str	r1, [sp, #52]	; 0x34
   1b578:	bl	1ad10 <__assert_fail@plt+0x89f0>
   1b57c:	b	1b3fc <__assert_fail@plt+0x90dc>
   1b580:	mov	r6, r3
   1b584:	b	1b2cc <__assert_fail@plt+0x8fac>
   1b588:	add	r3, sp, #92	; 0x5c
   1b58c:	str	r3, [sp, #44]	; 0x2c
   1b590:	b	1b1dc <__assert_fail@plt+0x8ebc>
   1b594:	bl	22900 <__assert_fail@plt+0x105e0>
   1b598:	bl	11ed0 <__stack_chk_fail@plt>
   1b59c:	andeq	sp, r1, r4, ror #2
   1b5a0:	andeq	r0, r0, ip, lsl r2
   1b5a4:	andeq	sp, r1, r0, lsl r4
   1b5a8:	andeq	sp, r1, r0, lsl r3
   1b5ac:	andeq	sp, r1, ip, lsr #5
   1b5b0:	muleq	r1, r8, r1
   1b5b4:	ldr	r3, [pc, #644]	; 1b840 <__assert_fail@plt+0x9520>
   1b5b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5bc:	mov	r7, r1
   1b5c0:	ldr	r1, [pc, #636]	; 1b844 <__assert_fail@plt+0x9524>
   1b5c4:	add	r3, pc, r3
   1b5c8:	sub	sp, sp, #52	; 0x34
   1b5cc:	cmn	r7, #-1073741823	; 0xc0000001
   1b5d0:	mov	r6, r0
   1b5d4:	mov	r4, r2
   1b5d8:	ldr	r1, [r3, r1]
   1b5dc:	ldr	r3, [r1]
   1b5e0:	str	r1, [sp, #12]
   1b5e4:	str	r3, [sp, #44]	; 0x2c
   1b5e8:	bhi	1b838 <__assert_fail@plt+0x9518>
   1b5ec:	lsl	r0, r7, #2
   1b5f0:	bl	226ec <__assert_fail@plt+0x103cc>
   1b5f4:	cmp	r7, #0
   1b5f8:	mov	r8, r0
   1b5fc:	str	r0, [r4]
   1b600:	beq	1b734 <__assert_fail@plt+0x9414>
   1b604:	ldr	ip, [pc, #572]	; 1b848 <__assert_fail@plt+0x9528>
   1b608:	mov	sl, #0
   1b60c:	ldr	r9, [pc, #568]	; 1b84c <__assert_fail@plt+0x952c>
   1b610:	mov	fp, sl
   1b614:	add	ip, pc, ip
   1b618:	str	ip, [sp, #24]
   1b61c:	add	ip, sp, #36	; 0x24
   1b620:	str	ip, [sp, #16]
   1b624:	ldr	ip, [pc, #548]	; 1b850 <__assert_fail@plt+0x9530>
   1b628:	add	r9, pc, r9
   1b62c:	add	ip, pc, ip
   1b630:	str	ip, [sp, #28]
   1b634:	ldr	ip, [pc, #536]	; 1b854 <__assert_fail@plt+0x9534>
   1b638:	add	ip, pc, ip
   1b63c:	str	ip, [sp, #20]
   1b640:	b	1b66c <__assert_fail@plt+0x934c>
   1b644:	ldr	r0, [r6, r3]
   1b648:	mov	r1, r9
   1b64c:	bl	169d8 <__assert_fail@plt+0x46b8>
   1b650:	cmp	r0, #0
   1b654:	str	r0, [r8, r5]
   1b658:	beq	1b738 <__assert_fail@plt+0x9418>
   1b65c:	add	fp, fp, #1
   1b660:	cmp	fp, r7
   1b664:	mov	sl, fp
   1b668:	beq	1b738 <__assert_fail@plt+0x9418>
   1b66c:	lsl	r3, sl, #3
   1b670:	lsl	r5, sl, #2
   1b674:	add	r2, r6, r3
   1b678:	ldr	r4, [r2, #4]
   1b67c:	cmp	r4, #0
   1b680:	beq	1b644 <__assert_fail@plt+0x9324>
   1b684:	ldrb	r2, [r4, #8]
   1b688:	cmp	r2, #0
   1b68c:	beq	1b644 <__assert_fail@plt+0x9324>
   1b690:	cmp	r2, #1
   1b694:	beq	1b818 <__assert_fail@plt+0x94f8>
   1b698:	add	r0, r4, #9
   1b69c:	mov	r1, #0
   1b6a0:	bl	1202c <open64@plt>
   1b6a4:	cmp	r0, #0
   1b6a8:	str	r0, [sp, #8]
   1b6ac:	blt	1b824 <__assert_fail@plt+0x9504>
   1b6b0:	add	r0, sp, #36	; 0x24
   1b6b4:	mov	r1, #9
   1b6b8:	bl	171c0 <__assert_fail@plt+0x4ea0>
   1b6bc:	cmn	r0, #1
   1b6c0:	beq	1b7bc <__assert_fail@plt+0x949c>
   1b6c4:	cmp	r0, #0
   1b6c8:	bne	1b758 <__assert_fail@plt+0x9438>
   1b6cc:	mov	r1, r0
   1b6d0:	ldr	r0, [sp, #36]	; 0x24
   1b6d4:	str	r1, [sp, #4]
   1b6d8:	bl	12308 <close@plt>
   1b6dc:	ldr	ip, [sp, #8]
   1b6e0:	ldr	r1, [sp, #4]
   1b6e4:	cmp	ip, #0
   1b6e8:	bne	1b82c <__assert_fail@plt+0x950c>
   1b6ec:	ldr	r0, [sp, #40]	; 0x28
   1b6f0:	cmp	r0, #1
   1b6f4:	beq	1b700 <__assert_fail@plt+0x93e0>
   1b6f8:	mov	r1, #1
   1b6fc:	bl	1a41c <__assert_fail@plt+0x80fc>
   1b700:	ldr	r1, [pc, #336]	; 1b858 <__assert_fail@plt+0x9538>
   1b704:	mov	r3, #0
   1b708:	ldr	r2, [pc, #332]	; 1b85c <__assert_fail@plt+0x953c>
   1b70c:	add	r1, pc, r1
   1b710:	add	r2, pc, r2
   1b714:	ldr	r0, [r1, #1392]	; 0x570
   1b718:	mov	r1, r0
   1b71c:	bl	11e34 <execlp@plt>
   1b720:	bl	1211c <__errno_location@plt>
   1b724:	ldr	r1, [pc, #308]	; 1b860 <__assert_fail@plt+0x9540>
   1b728:	add	r1, pc, r1
   1b72c:	ldr	r0, [r0]
   1b730:	bl	17398 <__assert_fail@plt+0x5078>
   1b734:	mov	sl, r7
   1b738:	ldr	ip, [sp, #12]
   1b73c:	mov	r0, sl
   1b740:	ldr	r2, [sp, #44]	; 0x2c
   1b744:	ldr	r3, [ip]
   1b748:	cmp	r2, r3
   1b74c:	bne	1b83c <__assert_fail@plt+0x951c>
   1b750:	add	sp, sp, #52	; 0x34
   1b754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b758:	str	r0, [r4, #4]
   1b75c:	mov	r0, r4
   1b760:	bl	1744c <__assert_fail@plt+0x512c>
   1b764:	ldr	r0, [sp, #8]
   1b768:	bl	12308 <close@plt>
   1b76c:	ldr	r0, [sp, #40]	; 0x28
   1b770:	bl	12308 <close@plt>
   1b774:	ldr	r0, [sp, #36]	; 0x24
   1b778:	ldr	r1, [sp, #20]
   1b77c:	bl	11d20 <fdopen@plt>
   1b780:	subs	r4, r0, #0
   1b784:	movne	r0, r4
   1b788:	bne	1b650 <__assert_fail@plt+0x9330>
   1b78c:	bl	1211c <__errno_location@plt>
   1b790:	ldr	r2, [r0]
   1b794:	mov	r3, r0
   1b798:	ldr	r0, [sp, #36]	; 0x24
   1b79c:	str	r3, [sp]
   1b7a0:	str	r2, [sp, #4]
   1b7a4:	bl	12308 <close@plt>
   1b7a8:	ldr	r2, [sp, #4]
   1b7ac:	mov	r0, r4
   1b7b0:	ldr	r3, [sp]
   1b7b4:	str	r2, [r3]
   1b7b8:	b	1b650 <__assert_fail@plt+0x9330>
   1b7bc:	bl	1211c <__errno_location@plt>
   1b7c0:	ldr	r3, [r0]
   1b7c4:	mov	r4, r0
   1b7c8:	cmp	r3, #24
   1b7cc:	beq	1b800 <__assert_fail@plt+0x94e0>
   1b7d0:	ldr	r1, [sp, #24]
   1b7d4:	mov	r2, #5
   1b7d8:	mov	r0, #0
   1b7dc:	str	r3, [sp]
   1b7e0:	bl	11ec4 <dcgettext@plt>
   1b7e4:	ldr	r3, [sp]
   1b7e8:	ldr	ip, [sp, #28]
   1b7ec:	mov	r1, r3
   1b7f0:	ldr	r3, [ip, #1392]	; 0x570
   1b7f4:	mov	r2, r0
   1b7f8:	mov	r0, #2
   1b7fc:	bl	12020 <error@plt>
   1b800:	ldr	r0, [sp, #8]
   1b804:	bl	12308 <close@plt>
   1b808:	mov	r3, #24
   1b80c:	mov	r0, #0
   1b810:	str	r3, [r4]
   1b814:	b	1b650 <__assert_fail@plt+0x9330>
   1b818:	ldr	r0, [r4, #4]
   1b81c:	bl	1ac94 <__assert_fail@plt+0x8974>
   1b820:	b	1b698 <__assert_fail@plt+0x9378>
   1b824:	mov	r0, #0
   1b828:	b	1b650 <__assert_fail@plt+0x9330>
   1b82c:	mov	r0, ip
   1b830:	bl	1a41c <__assert_fail@plt+0x80fc>
   1b834:	b	1b6ec <__assert_fail@plt+0x93cc>
   1b838:	bl	22900 <__assert_fail@plt+0x105e0>
   1b83c:	bl	11ed0 <__stack_chk_fail@plt>
   1b840:	andeq	ip, r1, r4, lsr sl
   1b844:	andeq	r0, r0, ip, lsl r2
   1b848:	andeq	sl, r0, r0, lsl r2
   1b84c:	andeq	sl, r0, r0, asr r2
   1b850:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b854:	andeq	sl, r0, r0, asr #4
   1b858:	andeq	ip, r1, ip, lsl ip
   1b85c:	andeq	sl, r0, r8, lsr r1
   1b860:	andeq	sl, r0, r4, lsr #2
   1b864:	ldr	ip, [pc, #180]	; 1b920 <__assert_fail@plt+0x9600>
   1b868:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b86c:	add	ip, pc, ip
   1b870:	ldr	lr, [pc, #172]	; 1b924 <__assert_fail@plt+0x9604>
   1b874:	mov	r9, r3
   1b878:	sub	sp, sp, #16
   1b87c:	mov	r5, r2
   1b880:	mov	r8, r1
   1b884:	add	r2, sp, #8
   1b888:	ldr	r6, [ip, lr]
   1b88c:	mov	r1, r5
   1b890:	mov	r7, r0
   1b894:	ldr	sl, [sp, #48]	; 0x30
   1b898:	ldr	r3, [r6]
   1b89c:	str	r3, [sp, #12]
   1b8a0:	bl	1b5b4 <__assert_fail@plt+0x9294>
   1b8a4:	cmp	r0, #1
   1b8a8:	mov	r4, r0
   1b8ac:	movhi	r3, #0
   1b8b0:	movls	r3, #1
   1b8b4:	cmp	r5, r0
   1b8b8:	movls	r3, #0
   1b8bc:	cmp	r3, #0
   1b8c0:	bne	1b904 <__assert_fail@plt+0x95e4>
   1b8c4:	ldr	ip, [sp, #8]
   1b8c8:	mov	r0, r7
   1b8cc:	mov	r3, r9
   1b8d0:	mov	r2, r4
   1b8d4:	str	sl, [sp]
   1b8d8:	mov	r1, r8
   1b8dc:	str	ip, [sp, #4]
   1b8e0:	bl	1ae7c <__assert_fail@plt+0x8b5c>
   1b8e4:	ldr	r2, [sp, #12]
   1b8e8:	ldr	r3, [r6]
   1b8ec:	mov	r0, r4
   1b8f0:	cmp	r2, r3
   1b8f4:	bne	1b900 <__assert_fail@plt+0x95e0>
   1b8f8:	add	sp, sp, #16
   1b8fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b900:	bl	11ed0 <__stack_chk_fail@plt>
   1b904:	ldr	r1, [pc, #28]	; 1b928 <__assert_fail@plt+0x9608>
   1b908:	mov	r0, #0
   1b90c:	mov	r2, #5
   1b910:	add	r1, pc, r1
   1b914:	bl	11ec4 <dcgettext@plt>
   1b918:	ldr	r1, [r7, r4, lsl #3]
   1b91c:	bl	15e40 <__assert_fail@plt+0x3b20>
   1b920:	andeq	ip, r1, ip, lsl #15
   1b924:	andeq	r0, r0, ip, lsl r2
   1b928:	andeq	r9, r0, r4, lsl #29
   1b92c:	ldr	ip, [pc, #1256]	; 1be1c <__assert_fail@plt+0x9afc>
   1b930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b934:	add	ip, pc, ip
   1b938:	ldr	lr, [pc, #1248]	; 1be20 <__assert_fail@plt+0x9b00>
   1b93c:	sub	sp, sp, #268	; 0x10c
   1b940:	mov	r7, r2
   1b944:	ldr	r2, [pc, #1240]	; 1be24 <__assert_fail@plt+0x9b04>
   1b948:	str	r3, [sp, #28]
   1b94c:	mov	r3, ip
   1b950:	ldr	lr, [ip, lr]
   1b954:	add	r2, pc, r2
   1b958:	mov	r8, r1
   1b95c:	mov	r6, r0
   1b960:	ldr	r3, [r2, #4]
   1b964:	ldr	r1, [lr]
   1b968:	cmp	r7, r3
   1b96c:	str	lr, [sp, #32]
   1b970:	str	r1, [sp, #260]	; 0x104
   1b974:	bls	1ba70 <__assert_fail@plt+0x9750>
   1b978:	ldr	fp, [pc, #1192]	; 1be28 <__assert_fail@plt+0x9b08>
   1b97c:	add	r0, sp, #152	; 0x98
   1b980:	str	r2, [sp, #24]
   1b984:	add	fp, pc, fp
   1b988:	str	r0, [sp, #20]
   1b98c:	str	r6, [sp, #16]
   1b990:	cmp	r7, r3
   1b994:	bcc	1bd84 <__assert_fail@plt+0x9a64>
   1b998:	ldr	r5, [sp, #16]
   1b99c:	mov	sl, #0
   1b9a0:	mov	r4, sl
   1b9a4:	mov	r1, #0
   1b9a8:	add	r0, sp, #152	; 0x98
   1b9ac:	bl	1a434 <__assert_fail@plt+0x8114>
   1b9b0:	ldr	r2, [fp, #4]
   1b9b4:	ldr	r1, [sp, #16]
   1b9b8:	add	sl, sl, #1
   1b9bc:	ldr	r3, [sp, #152]	; 0x98
   1b9c0:	add	r6, r0, #9
   1b9c4:	mov	r9, r0
   1b9c8:	str	r6, [sp]
   1b9cc:	add	r0, r1, r4, lsl #3
   1b9d0:	cmp	r8, r2
   1b9d4:	movcc	r1, r8
   1b9d8:	movcs	r1, r2
   1b9dc:	bl	1b864 <__assert_fail@plt+0x9544>
   1b9e0:	ldr	r3, [fp, #4]
   1b9e4:	stm	r5, {r6, r9}
   1b9e8:	add	r5, r5, #8
   1b9ec:	add	r4, r4, r0
   1b9f0:	cmp	r8, r0
   1b9f4:	movcc	r0, r8
   1b9f8:	rsb	r2, r4, r7
   1b9fc:	rsb	r8, r0, r8
   1ba00:	cmp	r2, r3
   1ba04:	bcs	1b9a4 <__assert_fail@plt+0x9684>
   1ba08:	mov	r1, r3
   1ba0c:	mov	r0, sl
   1ba10:	str	r2, [sp, #8]
   1ba14:	lsl	r9, r4, #3
   1ba18:	str	r3, [sp, #12]
   1ba1c:	bl	244e4 <__assert_fail@plt+0x121c4>
   1ba20:	ldr	r2, [sp, #8]
   1ba24:	lsl	r5, sl, #3
   1ba28:	ldr	r3, [sp, #12]
   1ba2c:	rsb	r3, r1, r3
   1ba30:	cmp	r3, r2
   1ba34:	bcc	1bd08 <__assert_fail@plt+0x99e8>
   1ba38:	ldr	r3, [sp, #16]
   1ba3c:	rsb	r2, r4, r7
   1ba40:	rsb	r4, r4, sl
   1ba44:	add	r8, r8, sl
   1ba48:	add	r0, r3, r5
   1ba4c:	add	r1, r3, r9
   1ba50:	lsl	r2, r2, #3
   1ba54:	add	r7, r7, r4
   1ba58:	bl	11dd4 <memmove@plt>
   1ba5c:	ldr	r0, [sp, #24]
   1ba60:	ldr	r3, [r0, #4]
   1ba64:	cmp	r3, r7
   1ba68:	bcc	1b990 <__assert_fail@plt+0x9670>
   1ba6c:	ldr	r6, [sp, #16]
   1ba70:	cmp	r8, r7
   1ba74:	addcs	r1, sp, #48	; 0x30
   1ba78:	strcs	r1, [sp, #16]
   1ba7c:	bcs	1bb68 <__assert_fail@plt+0x9848>
   1ba80:	add	ip, sp, #152	; 0x98
   1ba84:	mov	fp, #0
   1ba88:	add	r9, r6, r8, lsl #3
   1ba8c:	add	r2, sp, #48	; 0x30
   1ba90:	add	r3, sp, #44	; 0x2c
   1ba94:	mov	sl, r8
   1ba98:	str	r6, [sp, #20]
   1ba9c:	mov	r4, fp
   1baa0:	str	r8, [sp, #24]
   1baa4:	mov	r8, ip
   1baa8:	str	r2, [sp, #16]
   1baac:	str	r3, [sp, #36]	; 0x24
   1bab0:	ldr	r6, [sp, #28]
   1bab4:	b	1bae0 <__assert_fail@plt+0x97c0>
   1bab8:	cmp	r5, #0
   1babc:	bne	1bb10 <__assert_fail@plt+0x97f0>
   1bac0:	cmp	fp, #0
   1bac4:	beq	1bcd8 <__assert_fail@plt+0x99b8>
   1bac8:	add	r5, fp, #9
   1bacc:	stm	r9, {r5, fp}
   1bad0:	add	sl, sl, #1
   1bad4:	add	r9, r9, #8
   1bad8:	cmp	sl, r7
   1badc:	bcs	1bb60 <__assert_fail@plt+0x9840>
   1bae0:	ldr	r1, [r9]
   1bae4:	ldrb	r3, [r1]
   1bae8:	subs	r3, r3, #45	; 0x2d
   1baec:	ldrbeq	r3, [r1, #1]
   1baf0:	rsbs	r5, r3, #1
   1baf4:	movcc	r5, #0
   1baf8:	cmp	r6, #0
   1bafc:	beq	1bb10 <__assert_fail@plt+0x97f0>
   1bb00:	mov	r0, r6
   1bb04:	bl	11d68 <strcmp@plt>
   1bb08:	cmp	r0, #0
   1bb0c:	beq	1bab8 <__assert_fail@plt+0x9798>
   1bb10:	cmp	r4, #0
   1bb14:	beq	1bc68 <__assert_fail@plt+0x9948>
   1bb18:	cmp	r5, #0
   1bb1c:	beq	1bc4c <__assert_fail@plt+0x992c>
   1bb20:	mov	r0, #3
   1bb24:	mov	r1, #0
   1bb28:	mov	r2, r8
   1bb2c:	bl	11f84 <__fxstat64@plt>
   1bb30:	cmp	r0, #0
   1bb34:	bne	1bb4c <__assert_fail@plt+0x982c>
   1bb38:	ldrd	r4, [sp, #248]	; 0xf8
   1bb3c:	ldrd	r2, [sp, #144]	; 0x90
   1bb40:	cmp	r5, r3
   1bb44:	cmpeq	r4, r2
   1bb48:	beq	1bcb8 <__assert_fail@plt+0x9998>
   1bb4c:	add	sl, sl, #1
   1bb50:	mov	r4, #1
   1bb54:	cmp	sl, r7
   1bb58:	add	r9, r9, #8
   1bb5c:	bcc	1bae0 <__assert_fail@plt+0x97c0>
   1bb60:	ldr	r6, [sp, #20]
   1bb64:	ldr	r8, [sp, #24]
   1bb68:	ldr	r0, [pc, #700]	; 1be2c <__assert_fail@plt+0x9b0c>
   1bb6c:	add	fp, sp, #152	; 0x98
   1bb70:	add	r1, r6, #8
   1bb74:	str	r1, [sp, #20]
   1bb78:	add	r0, pc, r0
   1bb7c:	str	r0, [sp, #24]
   1bb80:	mov	r0, r6
   1bb84:	mov	r1, r7
   1bb88:	ldr	r2, [sp, #16]
   1bb8c:	bl	1b5b4 <__assert_fail@plt+0x9294>
   1bb90:	cmp	r7, r0
   1bb94:	mov	r4, r0
   1bb98:	beq	1bc84 <__assert_fail@plt+0x9964>
   1bb9c:	cmp	r0, #2
   1bba0:	bls	1bde0 <__assert_fail@plt+0x9ac0>
   1bba4:	sub	r9, r4, #-1073741823	; 0xc0000001
   1bba8:	add	r5, r6, r4, lsl #3
   1bbac:	lsl	r9, r9, #2
   1bbb0:	ldr	r3, [sp, #48]	; 0x30
   1bbb4:	sub	r4, r4, #1
   1bbb8:	ldr	r1, [r5, #-8]
   1bbbc:	sub	r5, r5, #8
   1bbc0:	ldr	r0, [r3, r9]
   1bbc4:	sub	r9, r9, #4
   1bbc8:	bl	1a384 <__assert_fail@plt+0x8064>
   1bbcc:	cmp	r4, #2
   1bbd0:	mov	r0, fp
   1bbd4:	movls	r1, #0
   1bbd8:	movhi	r1, #1
   1bbdc:	bl	1a434 <__assert_fail@plt+0x8114>
   1bbe0:	cmp	r0, #0
   1bbe4:	beq	1bbb0 <__assert_fail@plt+0x9890>
   1bbe8:	mov	sl, r0
   1bbec:	ldr	r0, [sp, #48]	; 0x30
   1bbf0:	cmp	r4, r8
   1bbf4:	movcc	r9, r4
   1bbf8:	movcs	r9, r8
   1bbfc:	rsb	ip, r4, r7
   1bc00:	mov	r2, r4
   1bc04:	ldr	r3, [sp, #152]	; 0x98
   1bc08:	mov	r1, r9
   1bc0c:	add	r4, sl, #9
   1bc10:	str	r0, [sp, #4]
   1bc14:	mov	r0, r6
   1bc18:	str	r4, [sp]
   1bc1c:	add	r7, ip, #1
   1bc20:	str	ip, [sp, #12]
   1bc24:	bl	1ae7c <__assert_fail@plt+0x8b5c>
   1bc28:	stm	r6, {r4, sl}
   1bc2c:	mov	r1, r5
   1bc30:	ldr	ip, [sp, #12]
   1bc34:	rsb	r9, r9, #1
   1bc38:	ldr	r0, [sp, #20]
   1bc3c:	add	r8, r8, r9
   1bc40:	lsl	r2, ip, #3
   1bc44:	bl	11dd4 <memmove@plt>
   1bc48:	b	1bb80 <__assert_fail@plt+0x9860>
   1bc4c:	mov	r0, #3
   1bc50:	ldr	r1, [r9]
   1bc54:	mov	r2, r8
   1bc58:	bl	122cc <__xstat64@plt>
   1bc5c:	cmp	r0, #0
   1bc60:	beq	1bb38 <__assert_fail@plt+0x9818>
   1bc64:	b	1bb4c <__assert_fail@plt+0x982c>
   1bc68:	mov	r0, #3
   1bc6c:	mov	r1, #1
   1bc70:	ldr	r2, [sp, #16]
   1bc74:	bl	11f84 <__fxstat64@plt>
   1bc78:	cmp	r0, #0
   1bc7c:	beq	1bb18 <__assert_fail@plt+0x97f8>
   1bc80:	b	1bb60 <__assert_fail@plt+0x9840>
   1bc84:	ldr	r0, [sp, #28]
   1bc88:	ldr	r1, [sp, #24]
   1bc8c:	bl	169d8 <__assert_fail@plt+0x46b8>
   1bc90:	cmp	r0, #0
   1bc94:	bne	1bda0 <__assert_fail@plt+0x9a80>
   1bc98:	bl	1211c <__errno_location@plt>
   1bc9c:	ldr	r3, [r0]
   1bca0:	cmp	r3, #24
   1bca4:	bne	1be00 <__assert_fail@plt+0x9ae0>
   1bca8:	cmp	r7, #2
   1bcac:	bls	1be00 <__assert_fail@plt+0x9ae0>
   1bcb0:	mov	r4, r7
   1bcb4:	b	1bba4 <__assert_fail@plt+0x9884>
   1bcb8:	ldrd	r4, [sp, #152]	; 0x98
   1bcbc:	ldrd	r2, [sp, #48]	; 0x30
   1bcc0:	cmp	r5, r3
   1bcc4:	cmpeq	r4, r2
   1bcc8:	mov	r4, #1
   1bccc:	bne	1bad0 <__assert_fail@plt+0x97b0>
   1bcd0:	cmp	fp, #0
   1bcd4:	bne	1bac8 <__assert_fail@plt+0x97a8>
   1bcd8:	mov	r1, fp
   1bcdc:	add	r0, sp, #44	; 0x2c
   1bce0:	bl	1a434 <__assert_fail@plt+0x8114>
   1bce4:	ldr	r3, [sp, #44]	; 0x2c
   1bce8:	mov	r1, #0
   1bcec:	mov	r2, #1
   1bcf0:	add	r5, r0, #9
   1bcf4:	mov	fp, r0
   1bcf8:	str	r5, [sp]
   1bcfc:	mov	r0, r9
   1bd00:	bl	1b864 <__assert_fail@plt+0x9544>
   1bd04:	b	1bacc <__assert_fail@plt+0x97ac>
   1bd08:	mov	r1, #0
   1bd0c:	add	r2, r2, #1
   1bd10:	add	r0, sp, #152	; 0x98
   1bd14:	rsb	r2, r3, r2
   1bd18:	str	r2, [sp, #8]
   1bd1c:	bl	1a434 <__assert_fail@plt+0x8114>
   1bd20:	ldr	r1, [sp, #16]
   1bd24:	add	sl, sl, #1
   1bd28:	ldr	r2, [sp, #8]
   1bd2c:	ldr	r3, [sp, #152]	; 0x98
   1bd30:	mov	ip, r0
   1bd34:	add	r0, r1, r9
   1bd38:	add	r9, ip, #9
   1bd3c:	cmp	r2, r8
   1bd40:	movcc	r1, r2
   1bd44:	movcs	r1, r8
   1bd48:	str	r9, [sp]
   1bd4c:	str	ip, [sp, #12]
   1bd50:	bl	1b864 <__assert_fail@plt+0x9544>
   1bd54:	ldr	r2, [sp, #16]
   1bd58:	add	r3, r2, r5
   1bd5c:	str	r9, [r2, r5]
   1bd60:	lsl	r5, sl, #3
   1bd64:	ldr	ip, [sp, #12]
   1bd68:	str	ip, [r3, #4]
   1bd6c:	add	r4, r4, r0
   1bd70:	cmp	r0, r8
   1bd74:	movcs	r0, r8
   1bd78:	rsb	r8, r0, r8
   1bd7c:	lsl	r9, r4, #3
   1bd80:	b	1ba38 <__assert_fail@plt+0x9718>
   1bd84:	mov	r5, #0
   1bd88:	mov	r2, r7
   1bd8c:	mov	r9, r5
   1bd90:	mov	r1, r5
   1bd94:	mov	sl, r5
   1bd98:	mov	r4, r5
   1bd9c:	b	1ba2c <__assert_fail@plt+0x970c>
   1bda0:	ldr	r2, [sp, #28]
   1bda4:	mov	r3, r0
   1bda8:	ldr	ip, [sp, #48]	; 0x30
   1bdac:	mov	r0, r6
   1bdb0:	mov	r1, r8
   1bdb4:	str	r2, [sp]
   1bdb8:	mov	r2, r7
   1bdbc:	str	ip, [sp, #4]
   1bdc0:	bl	1ae7c <__assert_fail@plt+0x8b5c>
   1bdc4:	ldr	r0, [sp, #32]
   1bdc8:	ldr	r2, [sp, #260]	; 0x104
   1bdcc:	ldr	r3, [r0]
   1bdd0:	cmp	r2, r3
   1bdd4:	bne	1bdfc <__assert_fail@plt+0x9adc>
   1bdd8:	add	sp, sp, #268	; 0x10c
   1bddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bde0:	ldr	r1, [pc, #72]	; 1be30 <__assert_fail@plt+0x9b10>
   1bde4:	mov	r0, #0
   1bde8:	mov	r2, #5
   1bdec:	add	r1, pc, r1
   1bdf0:	bl	11ec4 <dcgettext@plt>
   1bdf4:	ldr	r1, [r6, r4, lsl #3]
   1bdf8:	bl	15e40 <__assert_fail@plt+0x3b20>
   1bdfc:	bl	11ed0 <__stack_chk_fail@plt>
   1be00:	ldr	r1, [pc, #44]	; 1be34 <__assert_fail@plt+0x9b14>
   1be04:	mov	r0, #0
   1be08:	mov	r2, #5
   1be0c:	add	r1, pc, r1
   1be10:	bl	11ec4 <dcgettext@plt>
   1be14:	ldr	r1, [sp, #28]
   1be18:	bl	15e40 <__assert_fail@plt+0x3b20>
   1be1c:	andeq	ip, r1, r4, asr #13
   1be20:	andeq	r0, r0, ip, lsl r2
   1be24:	andeq	ip, r1, r4, lsl #18
   1be28:	ldrdeq	ip, [r1], -r4
   1be2c:	andeq	r9, r0, ip, ror #24
   1be30:	andeq	r9, r0, r8, lsr #19
   1be34:	andeq	r9, r0, r8, lsl #19
   1be38:	push	{r4, r5, r6, lr}
   1be3c:	subs	r4, r0, #0
   1be40:	ldr	r5, [pc, #892]	; 1c1c4 <__assert_fail@plt+0x9ea4>
   1be44:	add	r5, pc, r5
   1be48:	beq	1be90 <__assert_fail@plt+0x9b70>
   1be4c:	ldr	r3, [pc, #884]	; 1c1c8 <__assert_fail@plt+0x9ea8>
   1be50:	mov	r2, #5
   1be54:	ldr	r1, [pc, #880]	; 1c1cc <__assert_fail@plt+0x9eac>
   1be58:	mov	r0, #0
   1be5c:	ldr	r3, [r5, r3]
   1be60:	add	r1, pc, r1
   1be64:	ldr	r6, [r3]
   1be68:	bl	11ec4 <dcgettext@plt>
   1be6c:	ldr	r3, [pc, #860]	; 1c1d0 <__assert_fail@plt+0x9eb0>
   1be70:	mov	r1, #1
   1be74:	ldr	r3, [r5, r3]
   1be78:	ldr	r3, [r3]
   1be7c:	mov	r2, r0
   1be80:	mov	r0, r6
   1be84:	bl	121ac <__fprintf_chk@plt>
   1be88:	mov	r0, r4
   1be8c:	bl	120c8 <exit@plt>
   1be90:	ldr	r1, [pc, #828]	; 1c1d4 <__assert_fail@plt+0x9eb4>
   1be94:	mov	r2, #5
   1be98:	add	r1, pc, r1
   1be9c:	bl	11ec4 <dcgettext@plt>
   1bea0:	ldr	r3, [pc, #808]	; 1c1d0 <__assert_fail@plt+0x9eb0>
   1bea4:	ldr	r6, [r5, r3]
   1bea8:	ldr	r2, [r6]
   1beac:	mov	r3, r2
   1beb0:	mov	r1, r0
   1beb4:	mov	r0, #1
   1beb8:	bl	12188 <__printf_chk@plt>
   1bebc:	ldr	r1, [pc, #788]	; 1c1d8 <__assert_fail@plt+0x9eb8>
   1bec0:	mov	r2, #5
   1bec4:	mov	r0, r4
   1bec8:	add	r1, pc, r1
   1becc:	bl	11ec4 <dcgettext@plt>
   1bed0:	ldr	r3, [pc, #772]	; 1c1dc <__assert_fail@plt+0x9ebc>
   1bed4:	ldr	r5, [r5, r3]
   1bed8:	ldr	r1, [r5]
   1bedc:	bl	11d38 <fputs_unlocked@plt>
   1bee0:	ldr	r1, [pc, #760]	; 1c1e0 <__assert_fail@plt+0x9ec0>
   1bee4:	mov	r2, #5
   1bee8:	mov	r0, r4
   1beec:	add	r1, pc, r1
   1bef0:	bl	11ec4 <dcgettext@plt>
   1bef4:	ldr	r1, [r5]
   1bef8:	bl	11d38 <fputs_unlocked@plt>
   1befc:	ldr	r1, [pc, #736]	; 1c1e4 <__assert_fail@plt+0x9ec4>
   1bf00:	mov	r2, #5
   1bf04:	mov	r0, r4
   1bf08:	add	r1, pc, r1
   1bf0c:	bl	11ec4 <dcgettext@plt>
   1bf10:	ldr	r1, [r5]
   1bf14:	bl	11d38 <fputs_unlocked@plt>
   1bf18:	ldr	r1, [pc, #712]	; 1c1e8 <__assert_fail@plt+0x9ec8>
   1bf1c:	mov	r2, #5
   1bf20:	mov	r0, r4
   1bf24:	add	r1, pc, r1
   1bf28:	bl	11ec4 <dcgettext@plt>
   1bf2c:	ldr	r1, [r5]
   1bf30:	bl	11d38 <fputs_unlocked@plt>
   1bf34:	ldr	r1, [pc, #688]	; 1c1ec <__assert_fail@plt+0x9ecc>
   1bf38:	mov	r2, #5
   1bf3c:	mov	r0, r4
   1bf40:	add	r1, pc, r1
   1bf44:	bl	11ec4 <dcgettext@plt>
   1bf48:	ldr	r1, [r5]
   1bf4c:	bl	11d38 <fputs_unlocked@plt>
   1bf50:	ldr	r1, [pc, #664]	; 1c1f0 <__assert_fail@plt+0x9ed0>
   1bf54:	mov	r2, #5
   1bf58:	mov	r0, r4
   1bf5c:	add	r1, pc, r1
   1bf60:	bl	11ec4 <dcgettext@plt>
   1bf64:	ldr	r1, [r5]
   1bf68:	bl	11d38 <fputs_unlocked@plt>
   1bf6c:	ldr	r1, [pc, #640]	; 1c1f4 <__assert_fail@plt+0x9ed4>
   1bf70:	mov	r2, #5
   1bf74:	mov	r0, r4
   1bf78:	add	r1, pc, r1
   1bf7c:	bl	11ec4 <dcgettext@plt>
   1bf80:	ldr	r1, [r5]
   1bf84:	bl	11d38 <fputs_unlocked@plt>
   1bf88:	ldr	r1, [pc, #616]	; 1c1f8 <__assert_fail@plt+0x9ed8>
   1bf8c:	mov	r2, #5
   1bf90:	mov	r0, r4
   1bf94:	add	r1, pc, r1
   1bf98:	bl	11ec4 <dcgettext@plt>
   1bf9c:	ldr	r1, [r5]
   1bfa0:	bl	11d38 <fputs_unlocked@plt>
   1bfa4:	ldr	r1, [pc, #592]	; 1c1fc <__assert_fail@plt+0x9edc>
   1bfa8:	mov	r2, #5
   1bfac:	mov	r0, r4
   1bfb0:	add	r1, pc, r1
   1bfb4:	bl	11ec4 <dcgettext@plt>
   1bfb8:	ldr	r1, [r5]
   1bfbc:	bl	11d38 <fputs_unlocked@plt>
   1bfc0:	ldr	r1, [pc, #568]	; 1c200 <__assert_fail@plt+0x9ee0>
   1bfc4:	mov	r2, #5
   1bfc8:	mov	r0, r4
   1bfcc:	add	r1, pc, r1
   1bfd0:	bl	11ec4 <dcgettext@plt>
   1bfd4:	ldr	r1, [r5]
   1bfd8:	bl	11d38 <fputs_unlocked@plt>
   1bfdc:	ldr	r1, [pc, #544]	; 1c204 <__assert_fail@plt+0x9ee4>
   1bfe0:	mov	r2, #5
   1bfe4:	mov	r0, r4
   1bfe8:	add	r1, pc, r1
   1bfec:	bl	11ec4 <dcgettext@plt>
   1bff0:	ldr	r1, [r5]
   1bff4:	bl	11d38 <fputs_unlocked@plt>
   1bff8:	ldr	r1, [pc, #520]	; 1c208 <__assert_fail@plt+0x9ee8>
   1bffc:	mov	r2, #5
   1c000:	mov	r0, r4
   1c004:	add	r1, pc, r1
   1c008:	bl	11ec4 <dcgettext@plt>
   1c00c:	ldr	r1, [r5]
   1c010:	bl	11d38 <fputs_unlocked@plt>
   1c014:	ldr	r1, [pc, #496]	; 1c20c <__assert_fail@plt+0x9eec>
   1c018:	mov	r2, #5
   1c01c:	mov	r0, r4
   1c020:	add	r1, pc, r1
   1c024:	bl	11ec4 <dcgettext@plt>
   1c028:	ldr	r1, [r5]
   1c02c:	bl	11d38 <fputs_unlocked@plt>
   1c030:	ldr	r1, [pc, #472]	; 1c210 <__assert_fail@plt+0x9ef0>
   1c034:	mov	r2, #5
   1c038:	mov	r0, r4
   1c03c:	add	r1, pc, r1
   1c040:	bl	11ec4 <dcgettext@plt>
   1c044:	ldr	r1, [r5]
   1c048:	bl	11d38 <fputs_unlocked@plt>
   1c04c:	ldr	r1, [pc, #448]	; 1c214 <__assert_fail@plt+0x9ef4>
   1c050:	mov	r2, #5
   1c054:	mov	r0, r4
   1c058:	add	r1, pc, r1
   1c05c:	bl	11ec4 <dcgettext@plt>
   1c060:	ldr	r2, [pc, #432]	; 1c218 <__assert_fail@plt+0x9ef8>
   1c064:	add	r2, pc, r2
   1c068:	mov	r1, r0
   1c06c:	mov	r0, #1
   1c070:	bl	12188 <__printf_chk@plt>
   1c074:	ldr	r1, [pc, #416]	; 1c21c <__assert_fail@plt+0x9efc>
   1c078:	mov	r2, #5
   1c07c:	mov	r0, r4
   1c080:	add	r1, pc, r1
   1c084:	bl	11ec4 <dcgettext@plt>
   1c088:	ldr	r1, [r5]
   1c08c:	bl	11d38 <fputs_unlocked@plt>
   1c090:	ldr	r1, [pc, #392]	; 1c220 <__assert_fail@plt+0x9f00>
   1c094:	mov	r2, #5
   1c098:	mov	r0, r4
   1c09c:	add	r1, pc, r1
   1c0a0:	bl	11ec4 <dcgettext@plt>
   1c0a4:	ldr	r1, [r5]
   1c0a8:	bl	11d38 <fputs_unlocked@plt>
   1c0ac:	ldr	r1, [pc, #368]	; 1c224 <__assert_fail@plt+0x9f04>
   1c0b0:	mov	r2, #5
   1c0b4:	mov	r0, r4
   1c0b8:	add	r1, pc, r1
   1c0bc:	bl	11ec4 <dcgettext@plt>
   1c0c0:	ldr	r1, [r5]
   1c0c4:	bl	11d38 <fputs_unlocked@plt>
   1c0c8:	ldr	r1, [pc, #344]	; 1c228 <__assert_fail@plt+0x9f08>
   1c0cc:	mov	r2, #5
   1c0d0:	mov	r0, r4
   1c0d4:	add	r1, pc, r1
   1c0d8:	bl	11ec4 <dcgettext@plt>
   1c0dc:	ldr	r1, [r5]
   1c0e0:	bl	11d38 <fputs_unlocked@plt>
   1c0e4:	ldr	r1, [pc, #320]	; 1c22c <__assert_fail@plt+0x9f0c>
   1c0e8:	mov	r2, #5
   1c0ec:	mov	r0, r4
   1c0f0:	add	r1, pc, r1
   1c0f4:	bl	11ec4 <dcgettext@plt>
   1c0f8:	ldr	r1, [r5]
   1c0fc:	bl	11d38 <fputs_unlocked@plt>
   1c100:	ldr	r1, [pc, #296]	; 1c230 <__assert_fail@plt+0x9f10>
   1c104:	mov	r2, #5
   1c108:	mov	r0, r4
   1c10c:	add	r1, pc, r1
   1c110:	bl	11ec4 <dcgettext@plt>
   1c114:	ldr	r2, [pc, #280]	; 1c234 <__assert_fail@plt+0x9f14>
   1c118:	ldr	r3, [pc, #280]	; 1c238 <__assert_fail@plt+0x9f18>
   1c11c:	add	r2, pc, r2
   1c120:	add	r3, pc, r3
   1c124:	mov	r1, r0
   1c128:	mov	r0, #1
   1c12c:	bl	12188 <__printf_chk@plt>
   1c130:	mov	r0, #5
   1c134:	mov	r1, r4
   1c138:	bl	1220c <setlocale@plt>
   1c13c:	cmp	r0, #0
   1c140:	beq	1c15c <__assert_fail@plt+0x9e3c>
   1c144:	ldr	r1, [pc, #240]	; 1c23c <__assert_fail@plt+0x9f1c>
   1c148:	mov	r2, #3
   1c14c:	add	r1, pc, r1
   1c150:	bl	122e4 <strncmp@plt>
   1c154:	cmp	r0, #0
   1c158:	bne	1c190 <__assert_fail@plt+0x9e70>
   1c15c:	ldr	r1, [pc, #220]	; 1c240 <__assert_fail@plt+0x9f20>
   1c160:	mov	r2, #5
   1c164:	mov	r0, #0
   1c168:	add	r1, pc, r1
   1c16c:	bl	11ec4 <dcgettext@plt>
   1c170:	mov	r5, r0
   1c174:	ldr	r0, [r6]
   1c178:	bl	1d65c <__assert_fail@plt+0xb33c>
   1c17c:	mov	r1, r5
   1c180:	mov	r2, r0
   1c184:	mov	r0, #1
   1c188:	bl	12188 <__printf_chk@plt>
   1c18c:	b	1be88 <__assert_fail@plt+0x9b68>
   1c190:	ldr	r1, [pc, #172]	; 1c244 <__assert_fail@plt+0x9f24>
   1c194:	mov	r2, #5
   1c198:	mov	r0, r4
   1c19c:	add	r1, pc, r1
   1c1a0:	bl	11ec4 <dcgettext@plt>
   1c1a4:	mov	r5, r0
   1c1a8:	ldr	r0, [r6]
   1c1ac:	bl	1d65c <__assert_fail@plt+0xb33c>
   1c1b0:	mov	r1, r5
   1c1b4:	mov	r2, r0
   1c1b8:	mov	r0, #1
   1c1bc:	bl	12188 <__printf_chk@plt>
   1c1c0:	b	1c15c <__assert_fail@plt+0x9e3c>
   1c1c4:			; <UNDEFINED> instruction: 0x0001c1b4
   1c1c8:	andeq	r0, r0, r8, lsr #4
   1c1cc:	andeq	r9, r0, ip, lsl sl
   1c1d0:	andeq	r0, r0, ip, asr #4
   1c1d4:	andeq	r9, r0, ip, lsl #20
   1c1d8:	andeq	r9, r0, r4, lsr #20
   1c1dc:	andeq	r0, r0, r0, asr #4
   1c1e0:	andeq	r9, r0, r0, asr #20
   1c1e4:	andeq	r9, r0, r0, ror sl
   1c1e8:	andeq	r9, r0, r8, ror #20
   1c1ec:	andeq	r9, r0, r8, lsl fp
   1c1f0:	ldrdeq	r9, [r0], -r0
   1c1f4:	andeq	r9, r0, r0, lsl #24
   1c1f8:	andeq	r9, r0, r4, ror #25
   1c1fc:	andeq	r9, r0, r0, ror #27
   1c200:	ldrdeq	r9, [r0], -r8
   1c204:	andeq	r9, r0, r4, lsr lr
   1c208:	andeq	r9, r0, r0, lsr pc
   1c20c:	andeq	sl, r0, r0, ror r0
   1c210:	andeq	sl, r0, r4, ror #1
   1c214:	andeq	sl, r0, r0, lsr #3
   1c218:	andeq	sl, r0, ip, asr r3
   1c21c:	andeq	sl, r0, r8, asr #6
   1c220:	andeq	sl, r0, ip, ror #6
   1c224:	andeq	sl, r0, r0, lsl #7
   1c228:	muleq	r0, ip, r3
   1c22c:			; <UNDEFINED> instruction: 0x0000a5b0
   1c230:			; <UNDEFINED> instruction: 0x0000a6b0
   1c234:			; <UNDEFINED> instruction: 0x0000a6b8
   1c238:	andeq	sl, r0, r4, asr #13
   1c23c:	andeq	sl, r0, r0, asr #13
   1c240:	strdeq	sl, [r0], -r0
   1c244:	andeq	sl, r0, r4, ror r6
   1c248:	mov	r0, #1
   1c24c:	b	1be38 <__assert_fail@plt+0x9b18>
   1c250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c254:	sub	sp, sp, #12
   1c258:	mov	r7, r1
   1c25c:	mov	r6, r3
   1c260:	str	r2, [sp]
   1c264:	mov	sl, r0
   1c268:	bl	120e0 <strlen@plt>
   1c26c:	ldr	fp, [r7]
   1c270:	cmp	fp, #0
   1c274:	mov	r8, r0
   1c278:	beq	1c33c <__assert_fail@plt+0xa01c>
   1c27c:	mov	r3, #0
   1c280:	ldr	r4, [sp]
   1c284:	str	r3, [sp, #4]
   1c288:	mov	r5, r3
   1c28c:	mvn	r9, #0
   1c290:	b	1c2bc <__assert_fail@plt+0x9f9c>
   1c294:	bl	11eac <memcmp@plt>
   1c298:	ldr	r3, [sp, #4]
   1c29c:	cmp	r0, #0
   1c2a0:	movne	r3, #1
   1c2a4:	str	r3, [sp, #4]
   1c2a8:	ldr	fp, [r7, #4]!
   1c2ac:	add	r5, r5, #1
   1c2b0:	add	r4, r4, r6
   1c2b4:	cmp	fp, #0
   1c2b8:	beq	1c318 <__assert_fail@plt+0x9ff8>
   1c2bc:	mov	r0, fp
   1c2c0:	mov	r1, sl
   1c2c4:	mov	r2, r8
   1c2c8:	bl	122e4 <strncmp@plt>
   1c2cc:	cmp	r0, #0
   1c2d0:	mov	r0, fp
   1c2d4:	bne	1c2a8 <__assert_fail@plt+0x9f88>
   1c2d8:	bl	120e0 <strlen@plt>
   1c2dc:	ldr	r3, [sp]
   1c2e0:	mov	r1, r4
   1c2e4:	mov	r2, r6
   1c2e8:	cmp	r0, r8
   1c2ec:	mla	r0, r6, r9, r3
   1c2f0:	beq	1c330 <__assert_fail@plt+0xa010>
   1c2f4:	cmn	r9, #1
   1c2f8:	moveq	r9, r5
   1c2fc:	beq	1c2a8 <__assert_fail@plt+0x9f88>
   1c300:	ldr	r3, [sp]
   1c304:	cmp	r3, #0
   1c308:	bne	1c294 <__assert_fail@plt+0x9f74>
   1c30c:	mov	r3, #1
   1c310:	str	r3, [sp, #4]
   1c314:	b	1c2a8 <__assert_fail@plt+0x9f88>
   1c318:	ldr	r3, [sp, #4]
   1c31c:	cmp	r3, #0
   1c320:	bne	1c344 <__assert_fail@plt+0xa024>
   1c324:	mov	r0, r9
   1c328:	add	sp, sp, #12
   1c32c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c330:	mov	r0, r5
   1c334:	add	sp, sp, #12
   1c338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c33c:	mvn	r9, #0
   1c340:	b	1c324 <__assert_fail@plt+0xa004>
   1c344:	mvn	r0, #1
   1c348:	b	1c328 <__assert_fail@plt+0xa008>
   1c34c:	cmn	r2, #1
   1c350:	push	{r4, r5, r6, lr}
   1c354:	mov	r4, r0
   1c358:	sub	sp, sp, #8
   1c35c:	mov	r5, r1
   1c360:	mov	r0, #0
   1c364:	beq	1c3bc <__assert_fail@plt+0xa09c>
   1c368:	ldr	r1, [pc, #100]	; 1c3d4 <__assert_fail@plt+0xa0b4>
   1c36c:	mov	r2, #5
   1c370:	add	r1, pc, r1
   1c374:	bl	11ec4 <dcgettext@plt>
   1c378:	mov	r6, r0
   1c37c:	mov	r2, r5
   1c380:	mov	r1, #6
   1c384:	mov	r0, #0
   1c388:	bl	20b78 <__assert_fail@plt+0xe858>
   1c38c:	mov	r1, r4
   1c390:	mov	r5, r0
   1c394:	mov	r0, #1
   1c398:	bl	20e78 <__assert_fail@plt+0xeb58>
   1c39c:	mov	r3, r5
   1c3a0:	mov	r2, r6
   1c3a4:	str	r0, [sp]
   1c3a8:	mov	r0, #0
   1c3ac:	mov	r1, r0
   1c3b0:	bl	12020 <error@plt>
   1c3b4:	add	sp, sp, #8
   1c3b8:	pop	{r4, r5, r6, pc}
   1c3bc:	ldr	r1, [pc, #20]	; 1c3d8 <__assert_fail@plt+0xa0b8>
   1c3c0:	mov	r2, #5
   1c3c4:	add	r1, pc, r1
   1c3c8:	bl	11ec4 <dcgettext@plt>
   1c3cc:	mov	r6, r0
   1c3d0:	b	1c37c <__assert_fail@plt+0xa05c>
   1c3d4:	andeq	sl, r0, r4, lsr #25
   1c3d8:	andeq	sl, r0, r4, lsr ip
   1c3dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3e0:	mov	r4, r1
   1c3e4:	ldr	r1, [pc, #276]	; 1c500 <__assert_fail@plt+0xa1e0>
   1c3e8:	sub	sp, sp, #12
   1c3ec:	mov	r7, r0
   1c3f0:	mov	r6, r2
   1c3f4:	add	r1, pc, r1
   1c3f8:	mov	r2, #5
   1c3fc:	mov	r0, #0
   1c400:	bl	11ec4 <dcgettext@plt>
   1c404:	ldr	r3, [pc, #248]	; 1c504 <__assert_fail@plt+0xa1e4>
   1c408:	ldr	r2, [pc, #248]	; 1c508 <__assert_fail@plt+0xa1e8>
   1c40c:	add	r3, pc, r3
   1c410:	ldr	r9, [r3, r2]
   1c414:	ldr	r1, [r9]
   1c418:	bl	11d38 <fputs_unlocked@plt>
   1c41c:	ldr	fp, [r7]
   1c420:	cmp	fp, #0
   1c424:	beq	1c4c4 <__assert_fail@plt+0xa1a4>
   1c428:	ldr	sl, [pc, #220]	; 1c50c <__assert_fail@plt+0xa1ec>
   1c42c:	mov	r8, #0
   1c430:	ldr	r3, [pc, #216]	; 1c510 <__assert_fail@plt+0xa1f0>
   1c434:	mov	r5, r8
   1c438:	add	sl, pc, sl
   1c43c:	add	r3, pc, r3
   1c440:	str	r3, [sp, #4]
   1c444:	b	1c480 <__assert_fail@plt+0xa160>
   1c448:	mov	r0, fp
   1c44c:	ldr	fp, [r9]
   1c450:	bl	20e80 <__assert_fail@plt+0xeb60>
   1c454:	mov	r1, #1
   1c458:	mov	r2, sl
   1c45c:	mov	r8, r4
   1c460:	mov	r3, r0
   1c464:	mov	r0, fp
   1c468:	bl	121ac <__fprintf_chk@plt>
   1c46c:	ldr	fp, [r7, #4]!
   1c470:	add	r5, r5, #1
   1c474:	add	r4, r4, r6
   1c478:	cmp	fp, #0
   1c47c:	beq	1c4c4 <__assert_fail@plt+0xa1a4>
   1c480:	cmp	r5, #0
   1c484:	mov	r1, r4
   1c488:	mov	r2, r6
   1c48c:	mov	r0, r8
   1c490:	beq	1c448 <__assert_fail@plt+0xa128>
   1c494:	bl	11eac <memcmp@plt>
   1c498:	cmp	r0, #0
   1c49c:	bne	1c448 <__assert_fail@plt+0xa128>
   1c4a0:	mov	r0, fp
   1c4a4:	ldr	fp, [r9]
   1c4a8:	bl	20e80 <__assert_fail@plt+0xeb60>
   1c4ac:	mov	r1, #1
   1c4b0:	ldr	r2, [sp, #4]
   1c4b4:	mov	r3, r0
   1c4b8:	mov	r0, fp
   1c4bc:	bl	121ac <__fprintf_chk@plt>
   1c4c0:	b	1c46c <__assert_fail@plt+0xa14c>
   1c4c4:	ldr	r0, [r9]
   1c4c8:	ldr	r3, [r0, #20]
   1c4cc:	ldr	r2, [r0, #24]
   1c4d0:	cmp	r3, r2
   1c4d4:	bcs	1c4f0 <__assert_fail@plt+0xa1d0>
   1c4d8:	add	r1, r3, #1
   1c4dc:	mov	r2, #10
   1c4e0:	str	r1, [r0, #20]
   1c4e4:	strb	r2, [r3]
   1c4e8:	add	sp, sp, #12
   1c4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4f0:	mov	r1, #10
   1c4f4:	add	sp, sp, #12
   1c4f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4fc:	b	12200 <__overflow@plt>
   1c500:	andeq	sl, r0, r0, asr #24
   1c504:	andeq	fp, r1, ip, ror #23
   1c508:	andeq	r0, r0, r8, lsr #4
   1c50c:	andeq	sl, r0, r4, lsl ip
   1c510:	andeq	sl, r0, r8, lsl ip
   1c514:	push	{r4, r5, r6, r7, r8, lr}
   1c518:	mov	r7, r1
   1c51c:	ldr	r4, [sp, #24]
   1c520:	mov	r1, r2
   1c524:	mov	r6, r2
   1c528:	mov	r5, r3
   1c52c:	mov	r2, r3
   1c530:	mov	r8, r0
   1c534:	mov	r3, r4
   1c538:	mov	r0, r7
   1c53c:	bl	1c250 <__assert_fail@plt+0x9f30>
   1c540:	subs	r2, r0, #0
   1c544:	blt	1c550 <__assert_fail@plt+0xa230>
   1c548:	mov	r0, r2
   1c54c:	pop	{r4, r5, r6, r7, r8, pc}
   1c550:	mov	r0, r8
   1c554:	mov	r1, r7
   1c558:	bl	1c34c <__assert_fail@plt+0xa02c>
   1c55c:	mov	r0, r6
   1c560:	mov	r1, r5
   1c564:	mov	r2, r4
   1c568:	bl	1c3dc <__assert_fail@plt+0xa0bc>
   1c56c:	ldr	r3, [sp, #28]
   1c570:	blx	r3
   1c574:	mvn	r0, #0
   1c578:	pop	{r4, r5, r6, r7, r8, pc}
   1c57c:	push	{r4, r5, r6, r7, r8, lr}
   1c580:	mov	r8, r0
   1c584:	ldr	r5, [r1]
   1c588:	mov	r6, r3
   1c58c:	cmp	r5, #0
   1c590:	beq	1c5c8 <__assert_fail@plt+0xa2a8>
   1c594:	mov	r4, r2
   1c598:	mov	r7, r1
   1c59c:	b	1c5ac <__assert_fail@plt+0xa28c>
   1c5a0:	ldr	r5, [r7, #4]!
   1c5a4:	cmp	r5, #0
   1c5a8:	beq	1c5c8 <__assert_fail@plt+0xa2a8>
   1c5ac:	mov	r1, r4
   1c5b0:	mov	r0, r8
   1c5b4:	mov	r2, r6
   1c5b8:	add	r4, r4, r6
   1c5bc:	bl	11eac <memcmp@plt>
   1c5c0:	cmp	r0, #0
   1c5c4:	bne	1c5a0 <__assert_fail@plt+0xa280>
   1c5c8:	mov	r0, r5
   1c5cc:	pop	{r4, r5, r6, r7, r8, pc}
   1c5d0:	ldr	r3, [pc, #8]	; 1c5e0 <__assert_fail@plt+0xa2c0>
   1c5d4:	add	r3, pc, r3
   1c5d8:	str	r0, [r3]
   1c5dc:	bx	lr
   1c5e0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c5e4:	ldr	r3, [pc, #8]	; 1c5f4 <__assert_fail@plt+0xa2d4>
   1c5e8:	add	r3, pc, r3
   1c5ec:	strb	r0, [r3, #4]
   1c5f0:	bx	lr
   1c5f4:	andeq	ip, r1, r8, ror #5
   1c5f8:	push	{r4, r5, r6, r7, lr}
   1c5fc:	sub	sp, sp, #12
   1c600:	ldr	r4, [pc, #228]	; 1c6ec <__assert_fail@plt+0xa3cc>
   1c604:	ldr	r3, [pc, #228]	; 1c6f0 <__assert_fail@plt+0xa3d0>
   1c608:	add	r4, pc, r4
   1c60c:	ldr	r3, [r4, r3]
   1c610:	ldr	r0, [r3]
   1c614:	bl	23c10 <__assert_fail@plt+0x118f0>
   1c618:	cmp	r0, #0
   1c61c:	beq	1c644 <__assert_fail@plt+0xa324>
   1c620:	ldr	r3, [pc, #204]	; 1c6f4 <__assert_fail@plt+0xa3d4>
   1c624:	add	r3, pc, r3
   1c628:	ldrb	r3, [r3, #4]
   1c62c:	cmp	r3, #0
   1c630:	beq	1c664 <__assert_fail@plt+0xa344>
   1c634:	bl	1211c <__errno_location@plt>
   1c638:	ldr	r3, [r0]
   1c63c:	cmp	r3, #32
   1c640:	bne	1c664 <__assert_fail@plt+0xa344>
   1c644:	ldr	r3, [pc, #172]	; 1c6f8 <__assert_fail@plt+0xa3d8>
   1c648:	ldr	r3, [r4, r3]
   1c64c:	ldr	r0, [r3]
   1c650:	bl	23c10 <__assert_fail@plt+0x118f0>
   1c654:	cmp	r0, #0
   1c658:	bne	1c6b8 <__assert_fail@plt+0xa398>
   1c65c:	add	sp, sp, #12
   1c660:	pop	{r4, r5, r6, r7, pc}
   1c664:	ldr	r1, [pc, #144]	; 1c6fc <__assert_fail@plt+0xa3dc>
   1c668:	mov	r0, #0
   1c66c:	mov	r2, #5
   1c670:	add	r1, pc, r1
   1c674:	bl	11ec4 <dcgettext@plt>
   1c678:	ldr	r3, [pc, #128]	; 1c700 <__assert_fail@plt+0xa3e0>
   1c67c:	ldr	r5, [pc, r3]
   1c680:	cmp	r5, #0
   1c684:	mov	r6, r0
   1c688:	beq	1c6c8 <__assert_fail@plt+0xa3a8>
   1c68c:	bl	1211c <__errno_location@plt>
   1c690:	ldr	r7, [r0]
   1c694:	mov	r0, r5
   1c698:	bl	20d2c <__assert_fail@plt+0xea0c>
   1c69c:	ldr	r2, [pc, #96]	; 1c704 <__assert_fail@plt+0xa3e4>
   1c6a0:	str	r6, [sp]
   1c6a4:	mov	r1, r7
   1c6a8:	add	r2, pc, r2
   1c6ac:	mov	r3, r0
   1c6b0:	mov	r0, #0
   1c6b4:	bl	12020 <error@plt>
   1c6b8:	ldr	r3, [pc, #72]	; 1c708 <__assert_fail@plt+0xa3e8>
   1c6bc:	ldr	r3, [r4, r3]
   1c6c0:	ldr	r0, [r3]
   1c6c4:	bl	11e1c <_exit@plt>
   1c6c8:	bl	1211c <__errno_location@plt>
   1c6cc:	ldr	r2, [pc, #56]	; 1c70c <__assert_fail@plt+0xa3ec>
   1c6d0:	add	r2, pc, r2
   1c6d4:	mov	r3, r0
   1c6d8:	mov	r0, r5
   1c6dc:	ldr	r1, [r3]
   1c6e0:	mov	r3, r6
   1c6e4:	bl	12020 <error@plt>
   1c6e8:	b	1c6b8 <__assert_fail@plt+0xa398>
   1c6ec:	strdeq	fp, [r1], -r0
   1c6f0:	andeq	r0, r0, r0, asr #4
   1c6f4:	andeq	ip, r1, ip, lsr #5
   1c6f8:	andeq	r0, r0, r8, lsr #4
   1c6fc:	andeq	sl, r0, ip, ror #19
   1c700:	andeq	ip, r1, r4, asr r2
   1c704:	andeq	r8, r0, r0, lsr #28
   1c708:	andeq	r0, r0, r4, asr #4
   1c70c:	andeq	r9, r0, r0, asr r1
   1c710:	movw	r2, #8961	; 0x2301
   1c714:	movw	r3, #43913	; 0xab89
   1c718:	movt	r2, #26437	; 0x6745
   1c71c:	movt	r3, #61389	; 0xefcd
   1c720:	stm	r0, {r2, r3}
   1c724:	movw	r2, #56574	; 0xdcfe
   1c728:	movw	r3, #21622	; 0x5476
   1c72c:	movt	r2, #39098	; 0x98ba
   1c730:	movt	r3, #4146	; 0x1032
   1c734:	str	r2, [r0, #8]
   1c738:	str	r3, [r0, #12]
   1c73c:	mov	r3, #0
   1c740:	str	r3, [r0, #20]
   1c744:	str	r3, [r0, #16]
   1c748:	str	r3, [r0, #24]
   1c74c:	bx	lr
   1c750:	push	{r4, r5, r6, r7, lr}
   1c754:	sub	sp, sp, #28
   1c758:	ldr	r5, [pc, #132]	; 1c7e4 <__assert_fail@plt+0xa4c4>
   1c75c:	mov	r3, r0
   1c760:	ldr	r6, [r0]
   1c764:	add	r0, sp, #24
   1c768:	ldr	r7, [pc, #120]	; 1c7e8 <__assert_fail@plt+0xa4c8>
   1c76c:	add	r5, pc, r5
   1c770:	mov	r4, r0
   1c774:	mov	ip, r0
   1c778:	mov	r2, r0
   1c77c:	ldr	r5, [r5, r7]
   1c780:	str	r6, [r0, #-20]!	; 0xffffffec
   1c784:	ldr	r0, [r0]
   1c788:	ldr	r6, [r5]
   1c78c:	str	r0, [r1]
   1c790:	ldr	r0, [r3, #4]
   1c794:	str	r6, [sp, #20]
   1c798:	ldr	r6, [sp, #20]
   1c79c:	str	r0, [r4, #-16]!
   1c7a0:	ldr	r0, [r4]
   1c7a4:	str	r0, [r1, #4]
   1c7a8:	ldr	r0, [r3, #8]
   1c7ac:	str	r0, [ip, #-12]!
   1c7b0:	ldr	r0, [ip]
   1c7b4:	str	r0, [r1, #8]
   1c7b8:	ldr	r3, [r3, #12]
   1c7bc:	str	r3, [r2, #-8]!
   1c7c0:	ldr	r0, [r2]
   1c7c4:	str	r0, [r1, #12]
   1c7c8:	mov	r0, r1
   1c7cc:	ldr	r3, [r5]
   1c7d0:	cmp	r6, r3
   1c7d4:	bne	1c7e0 <__assert_fail@plt+0xa4c0>
   1c7d8:	add	sp, sp, #28
   1c7dc:	pop	{r4, r5, r6, r7, pc}
   1c7e0:	bl	11ed0 <__stack_chk_fail@plt>
   1c7e4:	andeq	fp, r1, ip, lsl #17
   1c7e8:	andeq	r0, r0, ip, lsl r2
   1c7ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   1c7f0:	sub	sp, sp, #72	; 0x48
   1c7f4:	ldr	r3, [r2, #16]
   1c7f8:	bic	ip, r1, #3
   1c7fc:	str	r2, [sp, #64]	; 0x40
   1c800:	add	ip, r0, ip
   1c804:	ldr	r2, [r2, #20]
   1c808:	add	r3, r1, r3
   1c80c:	mov	r8, r0
   1c810:	str	ip, [sp, #68]	; 0x44
   1c814:	cmp	r1, r3
   1c818:	movls	r1, r2
   1c81c:	addhi	r1, r2, #1
   1c820:	ldr	r2, [sp, #64]	; 0x40
   1c824:	cmp	r0, ip
   1c828:	str	r3, [r2, #16]
   1c82c:	ldr	r3, [r2]
   1c830:	ldr	r5, [r2, #12]
   1c834:	str	r1, [r2, #20]
   1c838:	str	r3, [sp, #60]	; 0x3c
   1c83c:	ldmib	r2, {r3, r4}
   1c840:	str	r5, [sp, #4]
   1c844:	str	r4, [sp]
   1c848:	bcs	1d270 <__assert_fail@plt+0xaf50>
   1c84c:	ldr	r6, [r8]
   1c850:	movw	r2, #42104	; 0xa478
   1c854:	ldr	r9, [sp]
   1c858:	movt	r2, #55146	; 0xd76a
   1c85c:	ldr	r7, [sp, #4]
   1c860:	movw	r1, #46934	; 0xb756
   1c864:	str	r6, [sp, #8]
   1c868:	eor	r5, r9, r3
   1c86c:	ldr	sl, [sp, #60]	; 0x3c
   1c870:	eor	r6, r7, r9
   1c874:	ldr	ip, [sp, #8]
   1c878:	and	r6, r6, r3
   1c87c:	add	r2, sl, r2
   1c880:	eor	r6, r6, r7
   1c884:	add	r2, r2, ip
   1c888:	ldr	r0, [r8, #4]
   1c88c:	add	r6, r2, r6
   1c890:	movt	r1, #59591	; 0xe8c7
   1c894:	add	r1, r7, r1
   1c898:	ldr	r2, [r8, #8]
   1c89c:	add	r6, r3, r6, ror #25
   1c8a0:	add	r1, r1, r0
   1c8a4:	and	r5, r6, r5
   1c8a8:	str	r0, [sp, #12]
   1c8ac:	eor	r5, r5, r9
   1c8b0:	eor	r0, r6, r3
   1c8b4:	add	r5, r1, r5
   1c8b8:	movw	r1, #28891	; 0x70db
   1c8bc:	movt	r1, #9248	; 0x2420
   1c8c0:	ldr	r4, [r8, #12]
   1c8c4:	add	r5, r6, r5, ror #20
   1c8c8:	add	r1, r9, r1
   1c8cc:	and	r0, r5, r0
   1c8d0:	add	r1, r1, r2
   1c8d4:	eor	r0, r0, r3
   1c8d8:	str	r2, [sp, #16]
   1c8dc:	add	r0, r1, r0
   1c8e0:	eor	r7, r5, r6
   1c8e4:	movw	r2, #52974	; 0xceee
   1c8e8:	movt	r2, #49597	; 0xc1bd
   1c8ec:	add	r0, r5, r0, ror #15
   1c8f0:	add	r2, r3, r2
   1c8f4:	and	r7, r0, r7
   1c8f8:	add	r2, r2, r4
   1c8fc:	eor	r7, r7, r6
   1c900:	ldr	r9, [r8, #16]
   1c904:	add	r7, r2, r7
   1c908:	eor	r1, r0, r5
   1c90c:	movw	r2, #4015	; 0xfaf
   1c910:	movt	r2, #62844	; 0xf57c
   1c914:	add	r7, r0, r7, ror #10
   1c918:	add	r2, r9, r2
   1c91c:	and	r1, r7, r1
   1c920:	str	r4, [sp, #20]
   1c924:	add	r6, r2, r6
   1c928:	eor	r4, r1, r5
   1c92c:	add	r4, r6, r4
   1c930:	ldr	sl, [r8, #20]
   1c934:	eor	ip, r7, r0
   1c938:	movw	r1, #50730	; 0xc62a
   1c93c:	add	r4, r7, r4, ror #25
   1c940:	movt	r1, #18311	; 0x4787
   1c944:	add	r1, sl, r1
   1c948:	and	ip, r4, ip
   1c94c:	add	r5, r1, r5
   1c950:	eor	r2, ip, r0
   1c954:	add	r2, r5, r2
   1c958:	ldr	ip, [r8, #24]
   1c95c:	eor	r5, r4, r7
   1c960:	movw	r1, #17939	; 0x4613
   1c964:	add	r2, r4, r2, ror #20
   1c968:	movt	r1, #43056	; 0xa830
   1c96c:	add	r1, ip, r1
   1c970:	and	r5, r2, r5
   1c974:	str	ip, [sp, #32]
   1c978:	add	r0, r1, r0
   1c97c:	eor	ip, r5, r7
   1c980:	movw	r5, #38145	; 0x9501
   1c984:	add	ip, r0, ip
   1c988:	ldr	r0, [r8, #28]
   1c98c:	movt	r5, #64838	; 0xfd46
   1c990:	str	r9, [sp, #24]
   1c994:	add	ip, r2, ip, ror #15
   1c998:	ldr	r9, [r8, #40]	; 0x28
   1c99c:	str	r0, [sp, #36]	; 0x24
   1c9a0:	eor	r0, r2, r4
   1c9a4:	ldr	r1, [sp, #36]	; 0x24
   1c9a8:	and	r0, ip, r0
   1c9ac:	str	sl, [sp, #28]
   1c9b0:	movw	fp, #23121	; 0x5a51
   1c9b4:	add	r5, r1, r5
   1c9b8:	eor	r1, r0, r4
   1c9bc:	add	r7, r5, r7
   1c9c0:	ldr	r5, [r8, #32]
   1c9c4:	add	r1, r7, r1
   1c9c8:	movw	r0, #39128	; 0x98d8
   1c9cc:	movt	r0, #27008	; 0x6980
   1c9d0:	ldr	r7, [r8, #36]	; 0x24
   1c9d4:	str	r5, [sp, #40]	; 0x28
   1c9d8:	add	r1, ip, r1, ror #10
   1c9dc:	ldr	r6, [sp, #40]	; 0x28
   1c9e0:	eor	r5, ip, r2
   1c9e4:	and	r5, r1, r5
   1c9e8:	ldr	sl, [r8, #44]	; 0x2c
   1c9ec:	add	r0, r6, r0
   1c9f0:	eor	r6, r5, r2
   1c9f4:	add	r4, r0, r4
   1c9f8:	movw	r0, #63407	; 0xf7af
   1c9fc:	add	r6, r4, r6
   1ca00:	movt	r0, #35652	; 0x8b44
   1ca04:	eor	r4, r1, ip
   1ca08:	add	r0, r7, r0
   1ca0c:	add	r6, r1, r6, ror #25
   1ca10:	add	r2, r0, r2
   1ca14:	and	r4, r6, r4
   1ca18:	sub	r0, r9, #41984	; 0xa400
   1ca1c:	eor	r5, r4, ip
   1ca20:	sub	r0, r0, #79	; 0x4f
   1ca24:	add	r5, r2, r5
   1ca28:	eor	r2, r6, r1
   1ca2c:	add	ip, r0, ip
   1ca30:	str	r7, [sp, #44]	; 0x2c
   1ca34:	add	r5, r6, r5, ror #20
   1ca38:	str	sl, [sp, #52]	; 0x34
   1ca3c:	and	r2, r5, r2
   1ca40:	str	r9, [sp, #48]	; 0x30
   1ca44:	eor	r0, r2, r1
   1ca48:	movw	r2, #55230	; 0xd7be
   1ca4c:	add	r0, ip, r0
   1ca50:	movt	r2, #35164	; 0x895c
   1ca54:	eor	ip, r5, r6
   1ca58:	add	r2, sl, r2
   1ca5c:	add	r0, r5, r0, ror #15
   1ca60:	add	r1, r2, r1
   1ca64:	and	ip, r0, ip
   1ca68:	movw	r2, #4386	; 0x1122
   1ca6c:	eor	r7, ip, r6
   1ca70:	ldr	ip, [r8, #48]	; 0x30
   1ca74:	add	r7, r1, r7
   1ca78:	eor	r1, r0, r5
   1ca7c:	movt	r2, #27536	; 0x6b90
   1ca80:	movt	fp, #9822	; 0x265e
   1ca84:	add	r7, r0, r7, ror #10
   1ca88:	add	r2, ip, r2
   1ca8c:	and	r1, r7, r1
   1ca90:	add	r6, r2, r6
   1ca94:	eor	sl, r1, r5
   1ca98:	ldr	r1, [r8, #52]	; 0x34
   1ca9c:	add	sl, r6, sl
   1caa0:	eor	r4, r7, r0
   1caa4:	add	r8, r8, #64	; 0x40
   1caa8:	str	r1, [sp, #56]	; 0x38
   1caac:	add	sl, r7, sl, ror #25
   1cab0:	ldr	r2, [sp, #56]	; 0x38
   1cab4:	movw	r1, #29075	; 0x7193
   1cab8:	movt	r1, #64920	; 0xfd98
   1cabc:	and	r4, sl, r4
   1cac0:	add	r1, r2, r1
   1cac4:	eor	r2, r4, r0
   1cac8:	add	r1, r1, r5
   1cacc:	ldr	r5, [r8, #-8]
   1cad0:	add	r2, r1, r2
   1cad4:	eor	r6, sl, r7
   1cad8:	movw	r1, #17294	; 0x438e
   1cadc:	movt	r1, #42617	; 0xa679
   1cae0:	add	r2, sl, r2, ror #20
   1cae4:	add	r1, r5, r1
   1cae8:	and	r6, r2, r6
   1caec:	add	r1, r1, r0
   1caf0:	eor	r4, r6, r7
   1caf4:	ldr	r0, [r8, #-4]
   1caf8:	add	r4, r1, r4
   1cafc:	eor	r9, r2, sl
   1cb00:	movw	r6, #2081	; 0x821
   1cb04:	movt	r6, #18868	; 0x49b4
   1cb08:	add	r4, r2, r4, ror #15
   1cb0c:	add	r6, r0, r6
   1cb10:	and	r9, r4, r9
   1cb14:	add	r7, r6, r7
   1cb18:	eor	r1, r9, sl
   1cb1c:	movw	r6, #9570	; 0x2562
   1cb20:	add	r1, r7, r1
   1cb24:	ldr	r7, [sp, #12]
   1cb28:	movt	r6, #63006	; 0xf61e
   1cb2c:	ldr	r9, [sp, #32]
   1cb30:	add	r1, r4, r1, ror #10
   1cb34:	add	r6, r7, r6
   1cb38:	add	sl, r6, sl
   1cb3c:	eor	r6, r1, r4
   1cb40:	and	r6, r6, r2
   1cb44:	movw	r7, #45888	; 0xb340
   1cb48:	eor	r6, r6, r4
   1cb4c:	movt	r7, #49216	; 0xc040
   1cb50:	add	sl, sl, r6
   1cb54:	ldr	r6, [sp, #52]	; 0x34
   1cb58:	add	r7, r9, r7
   1cb5c:	ldr	r9, [sp, #8]
   1cb60:	add	sl, r1, sl, ror #27
   1cb64:	add	fp, r6, fp
   1cb68:	eor	r6, sl, r1
   1cb6c:	add	fp, fp, r4
   1cb70:	and	r4, r6, r4
   1cb74:	add	r2, r7, r2
   1cb78:	eor	r4, r4, r1
   1cb7c:	movw	r7, #51114	; 0xc7aa
   1cb80:	add	r2, r2, r4
   1cb84:	movt	r7, #59830	; 0xe9b6
   1cb88:	add	r7, r9, r7
   1cb8c:	ldr	r4, [sp, #68]	; 0x44
   1cb90:	add	r2, sl, r2, ror #23
   1cb94:	add	r7, r7, r1
   1cb98:	eor	r9, r2, sl
   1cb9c:	movw	r6, #4189	; 0x105d
   1cba0:	and	r1, r9, r1
   1cba4:	ldr	r9, [sp, #28]
   1cba8:	eor	r1, r1, sl
   1cbac:	movt	r6, #54831	; 0xd62f
   1cbb0:	add	r6, r9, r6
   1cbb4:	add	r9, fp, r1
   1cbb8:	cmp	r4, r8
   1cbbc:	ldr	r4, [sp, #48]	; 0x30
   1cbc0:	add	r9, r2, r9, ror #18
   1cbc4:	movw	r1, #5203	; 0x1453
   1cbc8:	movt	r1, #580	; 0x244
   1cbcc:	add	r6, r6, sl
   1cbd0:	add	r1, r4, r1
   1cbd4:	eor	r4, r9, r2
   1cbd8:	and	r4, r4, sl
   1cbdc:	movw	sl, #64456	; 0xfbc8
   1cbe0:	eor	r4, r4, r2
   1cbe4:	movt	sl, #59347	; 0xe7d3
   1cbe8:	add	r4, r7, r4
   1cbec:	add	r1, r1, r2
   1cbf0:	movw	fp, #59009	; 0xe681
   1cbf4:	movt	fp, #55457	; 0xd8a1
   1cbf8:	add	r4, r9, r4, ror #12
   1cbfc:	add	fp, r0, fp
   1cc00:	eor	r7, r4, r9
   1cc04:	add	fp, fp, r9
   1cc08:	and	r7, r7, r2
   1cc0c:	movw	r2, #52710	; 0xcde6
   1cc10:	eor	r7, r7, r9
   1cc14:	movt	r2, #8673	; 0x21e1
   1cc18:	add	r7, r6, r7
   1cc1c:	ldr	r6, [sp, #24]
   1cc20:	add	r7, r4, r7, ror #27
   1cc24:	add	sl, r6, sl
   1cc28:	eor	r6, r7, r4
   1cc2c:	add	sl, sl, r4
   1cc30:	and	r6, r6, r9
   1cc34:	ldr	r9, [sp, #44]	; 0x2c
   1cc38:	eor	r6, r6, r4
   1cc3c:	add	r6, r1, r6
   1cc40:	add	r2, r9, r2
   1cc44:	add	r9, r2, r7
   1cc48:	movw	r2, #2006	; 0x7d6
   1cc4c:	add	r6, r7, r6, ror #23
   1cc50:	movt	r2, #49975	; 0xc337
   1cc54:	eor	r1, r6, r7
   1cc58:	add	r2, r5, r2
   1cc5c:	and	r1, r1, r4
   1cc60:	add	r4, r2, r6
   1cc64:	eor	r1, r1, r7
   1cc68:	add	r1, fp, r1
   1cc6c:	movw	fp, #3463	; 0xd87
   1cc70:	movt	fp, #62677	; 0xf4d5
   1cc74:	add	r1, r6, r1, ror #18
   1cc78:	eor	r2, r1, r6
   1cc7c:	and	r2, r2, r7
   1cc80:	movw	r7, #5357	; 0x14ed
   1cc84:	eor	r2, r2, r6
   1cc88:	movt	r7, #17754	; 0x455a
   1cc8c:	add	r2, sl, r2
   1cc90:	ldr	sl, [sp, #20]
   1cc94:	add	r2, r1, r2, ror #12
   1cc98:	add	fp, sl, fp
   1cc9c:	eor	sl, r2, r1
   1cca0:	add	fp, fp, r1
   1cca4:	and	sl, sl, r6
   1cca8:	ldr	r6, [sp, #40]	; 0x28
   1ccac:	eor	sl, sl, r1
   1ccb0:	add	sl, r9, sl
   1ccb4:	add	r7, r6, r7
   1ccb8:	add	r7, r7, r2
   1ccbc:	movw	r6, #59653	; 0xe905
   1ccc0:	add	sl, r2, sl, ror #27
   1ccc4:	movt	r6, #43491	; 0xa9e3
   1ccc8:	eor	r9, sl, r2
   1cccc:	and	r9, r9, r1
   1ccd0:	ldr	r1, [sp, #56]	; 0x38
   1ccd4:	eor	r9, r9, r2
   1ccd8:	add	r9, r4, r9
   1ccdc:	add	r6, r1, r6
   1cce0:	movw	r1, #41976	; 0xa3f8
   1cce4:	movt	r1, #64751	; 0xfcef
   1cce8:	add	r9, sl, r9, ror #23
   1ccec:	add	r6, r6, sl
   1ccf0:	eor	r4, r9, sl
   1ccf4:	and	r4, r4, r2
   1ccf8:	ldr	r2, [sp, #16]
   1ccfc:	eor	r4, r4, sl
   1cd00:	add	r4, fp, r4
   1cd04:	add	r1, r2, r1
   1cd08:	add	r1, r1, r9
   1cd0c:	movw	fp, #729	; 0x2d9
   1cd10:	add	r4, r9, r4, ror #18
   1cd14:	movt	fp, #26479	; 0x676f
   1cd18:	eor	r2, r4, r9
   1cd1c:	and	sl, r2, sl
   1cd20:	eor	sl, sl, r9
   1cd24:	add	r7, r7, sl
   1cd28:	ldr	sl, [sp, #36]	; 0x24
   1cd2c:	add	r7, r4, r7, ror #12
   1cd30:	add	fp, sl, fp
   1cd34:	eor	r2, r7, r4
   1cd38:	movw	sl, #14658	; 0x3942
   1cd3c:	and	r9, r2, r9
   1cd40:	movw	r2, #19594	; 0x4c8a
   1cd44:	eor	r9, r9, r4
   1cd48:	movt	r2, #36138	; 0x8d2a
   1cd4c:	add	r6, r6, r9
   1cd50:	add	r2, ip, r2
   1cd54:	add	r9, r2, r7
   1cd58:	movt	sl, #65530	; 0xfffa
   1cd5c:	add	r6, r7, r6, ror #27
   1cd60:	add	fp, fp, r4
   1cd64:	eor	r2, r6, r7
   1cd68:	and	r2, r2, r4
   1cd6c:	movw	r4, #63105	; 0xf681
   1cd70:	eor	r2, r2, r7
   1cd74:	movt	r4, #34673	; 0x8771
   1cd78:	add	r2, r1, r2
   1cd7c:	ldr	r1, [sp, #28]
   1cd80:	add	r2, r6, r2, ror #23
   1cd84:	add	sl, r1, sl
   1cd88:	eor	r1, r2, r6
   1cd8c:	add	sl, sl, r6
   1cd90:	and	r1, r1, r7
   1cd94:	ldr	r7, [sp, #40]	; 0x28
   1cd98:	eor	r1, r1, r6
   1cd9c:	add	r1, fp, r1
   1cda0:	add	r4, r7, r4
   1cda4:	add	r7, r4, r2
   1cda8:	movw	fp, #53305	; 0xd039
   1cdac:	add	r1, r2, r1, ror #18
   1cdb0:	movt	fp, #55764	; 0xd9d4
   1cdb4:	eor	r4, r1, r2
   1cdb8:	and	r6, r4, r6
   1cdbc:	eor	r2, r6, r2
   1cdc0:	movw	r6, #24866	; 0x6122
   1cdc4:	add	r2, r9, r2
   1cdc8:	ldr	r9, [sp, #52]	; 0x34
   1cdcc:	movt	r6, #28061	; 0x6d9d
   1cdd0:	add	r2, r1, r2, ror #12
   1cdd4:	add	r6, r9, r6
   1cdd8:	eor	r4, r2, r4
   1cddc:	add	r6, r6, r1
   1cde0:	add	r4, sl, r4
   1cde4:	eor	r1, r2, r1
   1cde8:	movw	r9, #14348	; 0x380c
   1cdec:	movt	r9, #64997	; 0xfde5
   1cdf0:	add	r4, r2, r4, ror #28
   1cdf4:	add	r9, r5, r9
   1cdf8:	eor	r1, r1, r4
   1cdfc:	add	r9, r9, r2
   1ce00:	add	r1, r7, r1
   1ce04:	eor	r2, r4, r2
   1ce08:	ldr	r7, [sp, #12]
   1ce0c:	movw	sl, #59972	; 0xea44
   1ce10:	add	r1, r4, r1, ror #21
   1ce14:	movt	sl, #42174	; 0xa4be
   1ce18:	eor	r2, r2, r1
   1ce1c:	add	sl, r7, sl
   1ce20:	add	r2, r6, r2
   1ce24:	add	sl, sl, r4
   1ce28:	eor	r4, r1, r4
   1ce2c:	ldr	r6, [sp, #24]
   1ce30:	add	r2, r1, r2, ror #16
   1ce34:	movw	r7, #53161	; 0xcfa9
   1ce38:	eor	r4, r4, r2
   1ce3c:	movt	r7, #19422	; 0x4bde
   1ce40:	add	r4, r9, r4
   1ce44:	add	r7, r6, r7
   1ce48:	add	r7, r7, r1
   1ce4c:	eor	r1, r2, r1
   1ce50:	add	r4, r2, r4, ror #9
   1ce54:	ldr	r9, [sp, #36]	; 0x24
   1ce58:	eor	r1, r1, r4
   1ce5c:	movw	r6, #19296	; 0x4b60
   1ce60:	add	r1, sl, r1
   1ce64:	movt	r6, #63163	; 0xf6bb
   1ce68:	add	r6, r9, r6
   1ce6c:	ldr	sl, [sp, #48]	; 0x30
   1ce70:	add	r1, r4, r1, ror #28
   1ce74:	add	r6, r6, r2
   1ce78:	eor	r2, r4, r2
   1ce7c:	movw	r9, #48240	; 0xbc70
   1ce80:	eor	r2, r2, r1
   1ce84:	movt	r9, #48831	; 0xbebf
   1ce88:	add	r2, r7, r2
   1ce8c:	add	r9, sl, r9
   1ce90:	add	r9, r9, r4
   1ce94:	eor	r4, r1, r4
   1ce98:	add	r2, r1, r2, ror #21
   1ce9c:	ldr	r7, [sp, #56]	; 0x38
   1cea0:	eor	r4, r4, r2
   1cea4:	movw	sl, #32454	; 0x7ec6
   1cea8:	add	r6, r6, r4
   1ceac:	movt	sl, #10395	; 0x289b
   1ceb0:	add	sl, r7, sl
   1ceb4:	ldr	r4, [sp, #8]
   1ceb8:	add	r6, r2, r6, ror #16
   1cebc:	add	sl, sl, r1
   1cec0:	eor	r1, r2, r1
   1cec4:	movw	r7, #10234	; 0x27fa
   1cec8:	eor	r1, r1, r6
   1cecc:	movt	r7, #60065	; 0xeaa1
   1ced0:	add	r1, r9, r1
   1ced4:	add	r7, r4, r7
   1ced8:	add	r7, r7, r2
   1cedc:	eor	r2, r6, r2
   1cee0:	add	r1, r6, r1, ror #9
   1cee4:	ldr	r9, [sp, #20]
   1cee8:	eor	r2, r2, r1
   1ceec:	movw	r4, #12421	; 0x3085
   1cef0:	add	r2, sl, r2
   1cef4:	movt	r4, #54511	; 0xd4ef
   1cef8:	add	r4, r9, r4
   1cefc:	ldr	sl, [sp, #32]
   1cf00:	add	r2, r1, r2, ror #28
   1cf04:	add	r4, r4, r6
   1cf08:	eor	r6, r1, r6
   1cf0c:	movw	r9, #7429	; 0x1d05
   1cf10:	eor	r6, r6, r2
   1cf14:	movt	r9, #1160	; 0x488
   1cf18:	add	r7, r7, r6
   1cf1c:	add	r9, sl, r9
   1cf20:	add	r9, r9, r1
   1cf24:	eor	r1, r2, r1
   1cf28:	add	r7, r2, r7, ror #21
   1cf2c:	ldr	r6, [sp, #44]	; 0x2c
   1cf30:	eor	r1, r1, r7
   1cf34:	movw	sl, #22117	; 0x5665
   1cf38:	add	r1, r4, r1
   1cf3c:	add	fp, r6, fp
   1cf40:	add	fp, fp, r2
   1cf44:	eor	r2, r7, r2
   1cf48:	add	r1, r7, r1, ror #16
   1cf4c:	movw	r6, #39397	; 0x99e5
   1cf50:	eor	r2, r2, r1
   1cf54:	movt	r6, #59099	; 0xe6db
   1cf58:	add	r2, r9, r2
   1cf5c:	add	r6, ip, r6
   1cf60:	add	r6, r6, r7
   1cf64:	eor	r7, r1, r7
   1cf68:	add	r2, r1, r2, ror #9
   1cf6c:	movw	r4, #31992	; 0x7cf8
   1cf70:	eor	r7, r7, r2
   1cf74:	movt	r4, #8098	; 0x1fa2
   1cf78:	add	fp, fp, r7
   1cf7c:	add	r4, r0, r4
   1cf80:	add	r4, r4, r1
   1cf84:	eor	r1, r2, r1
   1cf88:	add	fp, r2, fp, ror #28
   1cf8c:	ldr	r7, [sp, #16]
   1cf90:	eor	r1, r1, fp
   1cf94:	movt	sl, #50348	; 0xc4ac
   1cf98:	add	r1, r6, r1
   1cf9c:	add	sl, r7, sl
   1cfa0:	add	sl, sl, r2
   1cfa4:	eor	r2, fp, r2
   1cfa8:	add	r1, fp, r1, ror #21
   1cfac:	ldr	r9, [sp, #8]
   1cfb0:	eor	r2, r2, r1
   1cfb4:	movw	r7, #8772	; 0x2244
   1cfb8:	add	r2, r4, r2
   1cfbc:	movt	r7, #62505	; 0xf429
   1cfc0:	add	r7, r9, r7
   1cfc4:	movw	r4, #9127	; 0x23a7
   1cfc8:	add	r2, r1, r2, ror #16
   1cfcc:	add	r7, r7, fp
   1cfd0:	eor	fp, r1, fp
   1cfd4:	movt	r4, #43924	; 0xab94
   1cfd8:	eor	fp, fp, r2
   1cfdc:	mvn	r9, r1
   1cfe0:	add	sl, sl, fp
   1cfe4:	add	r4, r5, r4
   1cfe8:	str	r7, [sp, #8]
   1cfec:	mvn	fp, r2
   1cff0:	add	sl, r2, sl, ror #9
   1cff4:	ldr	r7, [sp, #36]	; 0x24
   1cff8:	orr	r9, sl, r9
   1cffc:	add	r4, r4, r2
   1d000:	eor	r9, r9, r2
   1d004:	ldr	r2, [sp, #8]
   1d008:	movw	r6, #65431	; 0xff97
   1d00c:	movt	r6, #17194	; 0x432a
   1d010:	add	r6, r7, r6
   1d014:	add	r7, r2, r9
   1d018:	ldr	r9, [sp, #28]
   1d01c:	add	r1, r6, r1
   1d020:	add	r7, sl, r7, ror #26
   1d024:	movw	r6, #41017	; 0xa039
   1d028:	movt	r6, #64659	; 0xfc93
   1d02c:	orr	fp, r7, fp
   1d030:	add	r6, r9, r6
   1d034:	mvn	r5, sl
   1d038:	add	r6, r6, sl
   1d03c:	eor	sl, fp, sl
   1d040:	add	r1, r1, sl
   1d044:	movw	r2, #22979	; 0x59c3
   1d048:	movt	r2, #25947	; 0x655b
   1d04c:	mvn	r9, r7
   1d050:	add	r1, r7, r1, ror #22
   1d054:	add	r2, ip, r2
   1d058:	orr	r5, r1, r5
   1d05c:	add	r2, r2, r7
   1d060:	eor	r7, r5, r7
   1d064:	ldr	sl, [sp, #20]
   1d068:	add	r4, r4, r7
   1d06c:	movw	ip, #52370	; 0xcc92
   1d070:	movt	ip, #36620	; 0x8f0c
   1d074:	ldr	r5, [sp, #48]	; 0x30
   1d078:	add	r4, r1, r4, ror #17
   1d07c:	add	ip, sl, ip
   1d080:	orr	r9, r4, r9
   1d084:	mvn	sl, r1
   1d088:	add	ip, ip, r1
   1d08c:	eor	r1, r9, r1
   1d090:	add	r6, r6, r1
   1d094:	movw	fp, #62589	; 0xf47d
   1d098:	movt	fp, #65519	; 0xffef
   1d09c:	mvn	r7, r4
   1d0a0:	add	r6, r4, r6, ror #11
   1d0a4:	add	fp, r5, fp
   1d0a8:	orr	sl, r6, sl
   1d0ac:	add	fp, fp, r4
   1d0b0:	eor	r4, sl, r4
   1d0b4:	ldr	r1, [sp, #12]
   1d0b8:	add	r2, r2, r4
   1d0bc:	ldr	r4, [sp, #40]	; 0x28
   1d0c0:	movw	r9, #24017	; 0x5dd1
   1d0c4:	movw	r5, #32335	; 0x7e4f
   1d0c8:	add	r2, r6, r2, ror #26
   1d0cc:	movt	r9, #34180	; 0x8584
   1d0d0:	orr	r7, r2, r7
   1d0d4:	movt	r5, #28584	; 0x6fa8
   1d0d8:	eor	r7, r7, r6
   1d0dc:	add	r9, r1, r9
   1d0e0:	add	ip, ip, r7
   1d0e4:	mvn	r1, r6
   1d0e8:	add	r5, r4, r5
   1d0ec:	mvn	r4, r2
   1d0f0:	add	ip, r2, ip, ror #22
   1d0f4:	add	r5, r5, r2
   1d0f8:	orr	r1, ip, r1
   1d0fc:	add	r9, r9, r6
   1d100:	eor	r2, r1, r2
   1d104:	mvn	r7, ip
   1d108:	add	fp, fp, r2
   1d10c:	ldr	r2, [sp, #56]	; 0x38
   1d110:	movw	sl, #59104	; 0xe6e0
   1d114:	movw	r1, #4513	; 0x11a1
   1d118:	add	fp, ip, fp, ror #17
   1d11c:	movt	sl, #65068	; 0xfe2c
   1d120:	orr	r4, fp, r4
   1d124:	movt	r1, #19976	; 0x4e08
   1d128:	eor	r4, r4, ip
   1d12c:	add	sl, r0, sl
   1d130:	add	r9, r9, r4
   1d134:	add	r1, r2, r1
   1d138:	mvn	r2, fp
   1d13c:	add	sl, sl, ip
   1d140:	add	r9, fp, r9, ror #11
   1d144:	ldr	r6, [sp, #32]
   1d148:	orr	r7, r9, r7
   1d14c:	ldr	r4, [sp, #24]
   1d150:	eor	r7, r7, fp
   1d154:	movw	r0, #17172	; 0x4314
   1d158:	add	r5, r5, r7
   1d15c:	ldr	r7, [sp, #52]	; 0x34
   1d160:	movt	r0, #41729	; 0xa301
   1d164:	movw	ip, #62005	; 0xf235
   1d168:	add	r5, r9, r5, ror #26
   1d16c:	movt	ip, #48442	; 0xbd3a
   1d170:	orr	r2, r5, r2
   1d174:	add	r0, r6, r0
   1d178:	eor	r2, r2, r9
   1d17c:	add	ip, r7, ip
   1d180:	add	sl, sl, r2
   1d184:	ldr	r7, [sp, #16]
   1d188:	movw	r6, #32386	; 0x7e82
   1d18c:	movt	r6, #63315	; 0xf753
   1d190:	add	sl, r5, sl, ror #22
   1d194:	add	r0, r0, fp
   1d198:	add	r6, r4, r6
   1d19c:	movw	fp, #53947	; 0xd2bb
   1d1a0:	mvn	r4, r9
   1d1a4:	movt	fp, #10967	; 0x2ad7
   1d1a8:	orr	r4, sl, r4
   1d1ac:	add	r6, r6, r5
   1d1b0:	add	fp, r7, fp
   1d1b4:	mvn	r7, r5
   1d1b8:	eor	r5, r4, r5
   1d1bc:	add	r1, r1, r9
   1d1c0:	add	r5, r0, r5
   1d1c4:	ldr	r2, [sp, #44]	; 0x2c
   1d1c8:	movw	r9, #54161	; 0xd391
   1d1cc:	movt	r9, #60294	; 0xeb86
   1d1d0:	add	r5, sl, r5, ror #17
   1d1d4:	add	r9, r2, r9
   1d1d8:	orr	r7, r5, r7
   1d1dc:	mvn	r2, sl
   1d1e0:	eor	r7, r7, sl
   1d1e4:	mvn	r4, r5
   1d1e8:	add	r7, r1, r7
   1d1ec:	add	ip, ip, sl
   1d1f0:	add	fp, fp, r5
   1d1f4:	add	r7, r5, r7, ror #11
   1d1f8:	orr	r2, r7, r2
   1d1fc:	add	r9, r9, r7
   1d200:	eor	r2, r2, r5
   1d204:	mvn	sl, r7
   1d208:	add	r2, r6, r2
   1d20c:	ldr	r5, [sp, #60]	; 0x3c
   1d210:	ldr	r6, [sp, #4]
   1d214:	add	r2, r7, r2, ror #26
   1d218:	orr	r4, r2, r4
   1d21c:	add	r5, r5, r2
   1d220:	eor	r7, r4, r7
   1d224:	mvn	r0, r2
   1d228:	add	ip, ip, r7
   1d22c:	ldr	r7, [sp]
   1d230:	str	r5, [sp, #60]	; 0x3c
   1d234:	add	ip, r2, ip, ror #22
   1d238:	orr	sl, ip, sl
   1d23c:	add	r6, r6, ip
   1d240:	eor	r2, sl, r2
   1d244:	str	r6, [sp, #4]
   1d248:	add	fp, fp, r2
   1d24c:	add	fp, ip, fp, ror #17
   1d250:	orr	r0, fp, r0
   1d254:	add	r7, r7, fp
   1d258:	eor	ip, r0, ip
   1d25c:	str	r7, [sp]
   1d260:	add	r9, r9, ip
   1d264:	add	fp, fp, r9, ror #11
   1d268:	add	r3, r3, fp
   1d26c:	bhi	1c84c <__assert_fail@plt+0xa52c>
   1d270:	ldr	sl, [sp, #64]	; 0x40
   1d274:	ldr	r9, [sp, #60]	; 0x3c
   1d278:	ldr	ip, [sp]
   1d27c:	ldr	r0, [sp, #4]
   1d280:	str	r9, [sl]
   1d284:	str	r3, [sl, #4]
   1d288:	str	ip, [sl, #8]
   1d28c:	str	r0, [sl, #12]
   1d290:	add	sp, sp, #72	; 0x48
   1d294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1d298:	bx	lr
   1d29c:	push	{r4, r5, r6, r7, r8, lr}
   1d2a0:	mov	r4, r0
   1d2a4:	ldr	r3, [r0, #24]
   1d2a8:	mov	r6, r1
   1d2ac:	ldr	ip, [r0, #16]
   1d2b0:	add	r5, r4, #28
   1d2b4:	cmp	r3, #55	; 0x37
   1d2b8:	add	ip, r3, ip
   1d2bc:	str	ip, [r0, #16]
   1d2c0:	ldr	lr, [r4, #20]
   1d2c4:	movhi	r7, #128	; 0x80
   1d2c8:	movls	r7, #64	; 0x40
   1d2cc:	movhi	r2, #120	; 0x78
   1d2d0:	movls	r2, #56	; 0x38
   1d2d4:	movhi	r1, #31
   1d2d8:	movls	r1, #15
   1d2dc:	movhi	r0, #30
   1d2e0:	movls	r0, #14
   1d2e4:	cmp	r3, ip
   1d2e8:	addhi	lr, lr, #1
   1d2ec:	add	r0, r4, r0, lsl #2
   1d2f0:	add	r1, r4, r1, lsl #2
   1d2f4:	lsr	r8, ip, #29
   1d2f8:	strhi	lr, [r4, #20]
   1d2fc:	lsl	ip, ip, #3
   1d300:	orr	lr, r8, lr, lsl #3
   1d304:	str	ip, [r0, #28]
   1d308:	str	lr, [r1, #28]
   1d30c:	rsb	r2, r3, r2
   1d310:	ldr	r1, [pc, #40]	; 1d340 <__assert_fail@plt+0xb020>
   1d314:	add	r0, r5, r3
   1d318:	add	r1, pc, r1
   1d31c:	bl	11e28 <memcpy@plt>
   1d320:	mov	r0, r5
   1d324:	mov	r1, r7
   1d328:	mov	r2, r4
   1d32c:	bl	1c7ec <__assert_fail@plt+0xa4cc>
   1d330:	mov	r0, r4
   1d334:	mov	r1, r6
   1d338:	pop	{r4, r5, r6, r7, r8, lr}
   1d33c:	b	1c750 <__assert_fail@plt+0xa430>
   1d340:	andeq	r9, r0, r0, asr sp
   1d344:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d348:	mov	r7, r2
   1d34c:	ldr	r4, [r2, #24]
   1d350:	mov	r9, r0
   1d354:	mov	r6, r1
   1d358:	cmp	r4, #0
   1d35c:	bne	1d444 <__assert_fail@plt+0xb124>
   1d360:	cmp	r6, #63	; 0x3f
   1d364:	bls	1d434 <__assert_fail@plt+0xb114>
   1d368:	tst	r9, #3
   1d36c:	beq	1d418 <__assert_fail@plt+0xb0f8>
   1d370:	cmp	r6, #64	; 0x40
   1d374:	add	r8, r7, #28
   1d378:	beq	1d3f0 <__assert_fail@plt+0xb0d0>
   1d37c:	mov	sl, r6
   1d380:	mov	r4, r9
   1d384:	add	ip, r4, #64	; 0x40
   1d388:	mov	r3, r8
   1d38c:	ldr	r1, [r4]
   1d390:	add	r4, r4, #16
   1d394:	ldr	r2, [r4, #-12]
   1d398:	add	r3, r3, #16
   1d39c:	ldr	r5, [r4, #-8]
   1d3a0:	ldr	lr, [r4, #-4]
   1d3a4:	cmp	r4, ip
   1d3a8:	str	r1, [r3, #-16]
   1d3ac:	str	r2, [r3, #-12]
   1d3b0:	str	r5, [r3, #-8]
   1d3b4:	str	lr, [r3, #-4]
   1d3b8:	bne	1d38c <__assert_fail@plt+0xb06c>
   1d3bc:	sub	sl, sl, #64	; 0x40
   1d3c0:	mov	r0, r8
   1d3c4:	mov	r1, #64	; 0x40
   1d3c8:	mov	r2, r7
   1d3cc:	bl	1c7ec <__assert_fail@plt+0xa4cc>
   1d3d0:	cmp	sl, #64	; 0x40
   1d3d4:	bhi	1d384 <__assert_fail@plt+0xb064>
   1d3d8:	sub	r3, r6, #65	; 0x41
   1d3dc:	sub	r6, r6, #64	; 0x40
   1d3e0:	lsr	r3, r3, #6
   1d3e4:	add	r2, r3, #1
   1d3e8:	sub	r6, r6, r3, lsl #6
   1d3ec:	add	r9, r9, r2, lsl #6
   1d3f0:	ldr	r3, [r7, #24]
   1d3f4:	mov	r2, r6
   1d3f8:	mov	r1, r9
   1d3fc:	add	r6, r6, r3
   1d400:	add	r0, r8, r3
   1d404:	bl	11e28 <memcpy@plt>
   1d408:	cmp	r6, #63	; 0x3f
   1d40c:	bhi	1d484 <__assert_fail@plt+0xb164>
   1d410:	str	r6, [r7, #24]
   1d414:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d418:	bic	r3, r6, #63	; 0x3f
   1d41c:	mov	r0, r9
   1d420:	mov	r2, r7
   1d424:	and	r6, r6, #63	; 0x3f
   1d428:	mov	r1, r3
   1d42c:	add	r9, r9, r3
   1d430:	bl	1c7ec <__assert_fail@plt+0xa4cc>
   1d434:	cmp	r6, #0
   1d438:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d43c:	add	r8, r7, #28
   1d440:	b	1d3f0 <__assert_fail@plt+0xb0d0>
   1d444:	rsb	r5, r4, #128	; 0x80
   1d448:	add	r8, r2, #28
   1d44c:	cmp	r1, r5
   1d450:	movcc	r5, r1
   1d454:	add	r0, r8, r4
   1d458:	mov	r1, r9
   1d45c:	mov	r2, r5
   1d460:	bl	11e28 <memcpy@plt>
   1d464:	ldr	r1, [r7, #24]
   1d468:	add	r1, r5, r1
   1d46c:	str	r1, [r7, #24]
   1d470:	cmp	r1, #64	; 0x40
   1d474:	bhi	1d4b0 <__assert_fail@plt+0xb190>
   1d478:	add	r9, r9, r5
   1d47c:	rsb	r6, r5, r6
   1d480:	b	1d360 <__assert_fail@plt+0xb040>
   1d484:	sub	r6, r6, #64	; 0x40
   1d488:	mov	r0, r8
   1d48c:	mov	r1, #64	; 0x40
   1d490:	mov	r2, r7
   1d494:	bl	1c7ec <__assert_fail@plt+0xa4cc>
   1d498:	mov	r0, r8
   1d49c:	mov	r2, r6
   1d4a0:	add	r1, r7, #92	; 0x5c
   1d4a4:	bl	11e28 <memcpy@plt>
   1d4a8:	str	r6, [r7, #24]
   1d4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d4b0:	mov	r0, r8
   1d4b4:	mov	r2, r7
   1d4b8:	bic	r1, r1, #63	; 0x3f
   1d4bc:	bl	1c7ec <__assert_fail@plt+0xa4cc>
   1d4c0:	ldr	r2, [r7, #24]
   1d4c4:	add	r1, r5, r4
   1d4c8:	mov	r0, r8
   1d4cc:	bic	r1, r1, #63	; 0x3f
   1d4d0:	and	r2, r2, #63	; 0x3f
   1d4d4:	add	r1, r8, r1
   1d4d8:	str	r2, [r7, #24]
   1d4dc:	bl	11e28 <memcpy@plt>
   1d4e0:	b	1d478 <__assert_fail@plt+0xb158>
   1d4e4:	ldr	r3, [pc, #100]	; 1d550 <__assert_fail@plt+0xb230>
   1d4e8:	ldr	ip, [pc, #100]	; 1d554 <__assert_fail@plt+0xb234>
   1d4ec:	add	r3, pc, r3
   1d4f0:	push	{r4, r5, r6, r7, r8, lr}
   1d4f4:	sub	sp, sp, #160	; 0xa0
   1d4f8:	ldr	r5, [r3, ip]
   1d4fc:	mov	r7, r0
   1d500:	mov	r8, r1
   1d504:	mov	r0, sp
   1d508:	mov	r6, r2
   1d50c:	ldr	r3, [r5]
   1d510:	str	r3, [sp, #156]	; 0x9c
   1d514:	bl	1c710 <__assert_fail@plt+0xa3f0>
   1d518:	mov	r2, sp
   1d51c:	mov	r0, r7
   1d520:	mov	r1, r8
   1d524:	bl	1d344 <__assert_fail@plt+0xb024>
   1d528:	mov	r0, sp
   1d52c:	mov	r1, r6
   1d530:	bl	1d29c <__assert_fail@plt+0xaf7c>
   1d534:	ldr	r2, [sp, #156]	; 0x9c
   1d538:	ldr	r3, [r5]
   1d53c:	cmp	r2, r3
   1d540:	bne	1d54c <__assert_fail@plt+0xb22c>
   1d544:	add	sp, sp, #160	; 0xa0
   1d548:	pop	{r4, r5, r6, r7, r8, pc}
   1d54c:	bl	11ed0 <__stack_chk_fail@plt>
   1d550:	andeq	sl, r1, ip, lsl #22
   1d554:	andeq	r0, r0, ip, lsl r2
   1d558:	ldr	r3, [pc, #244]	; 1d654 <__assert_fail@plt+0xb334>
   1d55c:	ldr	r2, [pc, #244]	; 1d658 <__assert_fail@plt+0xb338>
   1d560:	add	r3, pc, r3
   1d564:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d568:	sub	sp, sp, #164	; 0xa4
   1d56c:	ldr	r8, [r3, r2]
   1d570:	mov	r5, r0
   1d574:	movw	r0, #32840	; 0x8048
   1d578:	mov	r9, r1
   1d57c:	ldr	r3, [r8]
   1d580:	str	r3, [sp, #156]	; 0x9c
   1d584:	bl	1205c <malloc@plt>
   1d588:	subs	r6, r0, #0
   1d58c:	moveq	r0, #1
   1d590:	beq	1d5f4 <__assert_fail@plt+0xb2d4>
   1d594:	mov	r0, sp
   1d598:	mov	r4, #0
   1d59c:	bl	1c710 <__assert_fail@plt+0xa3f0>
   1d5a0:	add	r0, r6, r4
   1d5a4:	rsb	r2, r4, #32768	; 0x8000
   1d5a8:	mov	r1, #1
   1d5ac:	mov	r3, r5
   1d5b0:	bl	122c0 <fread_unlocked@plt>
   1d5b4:	add	r4, r4, r0
   1d5b8:	cmp	r4, #32768	; 0x8000
   1d5bc:	beq	1d60c <__assert_fail@plt+0xb2ec>
   1d5c0:	cmp	r0, #0
   1d5c4:	ldr	r3, [r5]
   1d5c8:	beq	1d638 <__assert_fail@plt+0xb318>
   1d5cc:	tst	r3, #16
   1d5d0:	beq	1d5a0 <__assert_fail@plt+0xb280>
   1d5d4:	cmp	r4, #0
   1d5d8:	bne	1d624 <__assert_fail@plt+0xb304>
   1d5dc:	mov	r1, r9
   1d5e0:	mov	r0, sp
   1d5e4:	bl	1d29c <__assert_fail@plt+0xaf7c>
   1d5e8:	mov	r0, r6
   1d5ec:	bl	11dec <free@plt>
   1d5f0:	mov	r0, #0
   1d5f4:	ldr	r2, [sp, #156]	; 0x9c
   1d5f8:	ldr	r3, [r8]
   1d5fc:	cmp	r2, r3
   1d600:	bne	1d650 <__assert_fail@plt+0xb330>
   1d604:	add	sp, sp, #164	; 0xa4
   1d608:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d60c:	mov	r1, r4
   1d610:	mov	r0, r6
   1d614:	mov	r2, sp
   1d618:	mov	r4, #0
   1d61c:	bl	1c7ec <__assert_fail@plt+0xa4cc>
   1d620:	b	1d5a0 <__assert_fail@plt+0xb280>
   1d624:	mov	r1, r4
   1d628:	mov	r0, r6
   1d62c:	mov	r2, sp
   1d630:	bl	1d344 <__assert_fail@plt+0xb024>
   1d634:	b	1d5dc <__assert_fail@plt+0xb2bc>
   1d638:	tst	r3, #32
   1d63c:	beq	1d5d4 <__assert_fail@plt+0xb2b4>
   1d640:	mov	r0, r6
   1d644:	bl	11dec <free@plt>
   1d648:	mov	r0, #1
   1d64c:	b	1d5f4 <__assert_fail@plt+0xb2d4>
   1d650:	bl	11ed0 <__stack_chk_fail@plt>
   1d654:	muleq	r1, r8, sl
   1d658:	andeq	r0, r0, ip, lsl r2
   1d65c:	ldrb	r3, [r0]
   1d660:	cmp	r3, #47	; 0x2f
   1d664:	bne	1d680 <__assert_fail@plt+0xb360>
   1d668:	add	r2, r0, #1
   1d66c:	mov	r0, r2
   1d670:	add	r2, r2, #1
   1d674:	ldrb	r3, [r0]
   1d678:	cmp	r3, #47	; 0x2f
   1d67c:	beq	1d66c <__assert_fail@plt+0xb34c>
   1d680:	cmp	r3, #0
   1d684:	bxeq	lr
   1d688:	mov	r2, r0
   1d68c:	mov	r1, #0
   1d690:	cmp	r3, #47	; 0x2f
   1d694:	moveq	r1, #1
   1d698:	beq	1d6a8 <__assert_fail@plt+0xb388>
   1d69c:	cmp	r1, #0
   1d6a0:	movne	r0, r2
   1d6a4:	movne	r1, #0
   1d6a8:	ldrb	r3, [r2, #1]!
   1d6ac:	cmp	r3, #0
   1d6b0:	bne	1d690 <__assert_fail@plt+0xb370>
   1d6b4:	bx	lr
   1d6b8:	push	{r4, lr}
   1d6bc:	mov	r4, r0
   1d6c0:	bl	120e0 <strlen@plt>
   1d6c4:	cmp	r0, #1
   1d6c8:	popls	{r4, pc}
   1d6cc:	sub	r3, r0, #1
   1d6d0:	ldrb	r2, [r4, r3]
   1d6d4:	cmp	r2, #47	; 0x2f
   1d6d8:	popne	{r4, pc}
   1d6dc:	mov	r0, r3
   1d6e0:	cmp	r0, #1
   1d6e4:	sub	r3, r3, #1
   1d6e8:	beq	1d6fc <__assert_fail@plt+0xb3dc>
   1d6ec:	ldrb	r2, [r4, r3]
   1d6f0:	cmp	r2, #47	; 0x2f
   1d6f4:	popne	{r4, pc}
   1d6f8:	b	1d6dc <__assert_fail@plt+0xb3bc>
   1d6fc:	pop	{r4, pc}
   1d700:	b	11d80 <posix_fadvise64@plt>
   1d704:	cmp	r0, #0
   1d708:	push	{r4, r5, r6, lr}
   1d70c:	mov	r6, r1
   1d710:	sub	sp, sp, #16
   1d714:	beq	1d738 <__assert_fail@plt+0xb418>
   1d718:	mov	r4, #0
   1d71c:	mov	r5, #0
   1d720:	bl	121a0 <fileno@plt>
   1d724:	str	r6, [sp, #8]
   1d728:	mov	r2, r4
   1d72c:	mov	r3, r5
   1d730:	strd	r4, [sp]
   1d734:	bl	1d700 <__assert_fail@plt+0xb3e0>
   1d738:	add	sp, sp, #16
   1d73c:	pop	{r4, r5, r6, pc}
   1d740:	push	{r4}		; (str r4, [sp, #-4]!)
   1d744:	mov	r4, r0
   1d748:	ldr	r2, [r0]
   1d74c:	ldrb	r3, [r2]
   1d750:	cmp	r3, #0
   1d754:	beq	1d7d0 <__assert_fail@plt+0xb4b0>
   1d758:	mov	ip, #0
   1d75c:	mov	r0, ip
   1d760:	b	1d798 <__assert_fail@plt+0xb478>
   1d764:	bic	r1, r3, #32
   1d768:	mov	ip, #0
   1d76c:	sub	r1, r1, #65	; 0x41
   1d770:	cmp	r1, #25
   1d774:	bls	1d780 <__assert_fail@plt+0xb460>
   1d778:	cmp	r3, #126	; 0x7e
   1d77c:	movne	r0, ip
   1d780:	add	r1, r2, #1
   1d784:	str	r1, [r4]
   1d788:	ldrb	r3, [r2, #1]
   1d78c:	cmp	r3, #0
   1d790:	beq	1d7d4 <__assert_fail@plt+0xb4b4>
   1d794:	mov	r2, r1
   1d798:	cmp	ip, #0
   1d79c:	bne	1d764 <__assert_fail@plt+0xb444>
   1d7a0:	cmp	r3, #46	; 0x2e
   1d7a4:	beq	1d7dc <__assert_fail@plt+0xb4bc>
   1d7a8:	sub	r1, r3, #48	; 0x30
   1d7ac:	cmp	r1, #9
   1d7b0:	bls	1d780 <__assert_fail@plt+0xb460>
   1d7b4:	bic	r1, r3, #32
   1d7b8:	sub	r1, r1, #65	; 0x41
   1d7bc:	cmp	r1, #25
   1d7c0:	bls	1d780 <__assert_fail@plt+0xb460>
   1d7c4:	cmp	r3, #126	; 0x7e
   1d7c8:	movne	r0, #0
   1d7cc:	b	1d780 <__assert_fail@plt+0xb460>
   1d7d0:	mov	r0, r3
   1d7d4:	pop	{r4}		; (ldr r4, [sp], #4)
   1d7d8:	bx	lr
   1d7dc:	cmp	r0, #0
   1d7e0:	mov	ip, #1
   1d7e4:	moveq	r0, r2
   1d7e8:	b	1d780 <__assert_fail@plt+0xb460>
   1d7ec:	ldr	r3, [pc, #872]	; 1db5c <__assert_fail@plt+0xb83c>
   1d7f0:	ldr	r2, [pc, #872]	; 1db60 <__assert_fail@plt+0xb840>
   1d7f4:	add	r3, pc, r3
   1d7f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7fc:	sub	sp, sp, #28
   1d800:	ldr	r2, [r3, r2]
   1d804:	mov	r4, r0
   1d808:	mov	r5, r1
   1d80c:	ldr	r3, [r2]
   1d810:	str	r2, [sp]
   1d814:	str	r3, [sp, #20]
   1d818:	bl	11d68 <strcmp@plt>
   1d81c:	cmp	r0, #0
   1d820:	str	r0, [sp, #4]
   1d824:	beq	1d9e0 <__assert_fail@plt+0xb6c0>
   1d828:	ldrb	r3, [r4]
   1d82c:	cmp	r3, #0
   1d830:	beq	1da14 <__assert_fail@plt+0xb6f4>
   1d834:	ldrb	r2, [r5]
   1d838:	cmp	r2, #0
   1d83c:	beq	1d868 <__assert_fail@plt+0xb548>
   1d840:	rsbs	r1, r3, #46	; 0x2e
   1d844:	bne	1d854 <__assert_fail@plt+0xb534>
   1d848:	ldrb	r0, [r4, #1]
   1d84c:	cmp	r0, #0
   1d850:	beq	1da14 <__assert_fail@plt+0xb6f4>
   1d854:	rsbs	r0, r2, #46	; 0x2e
   1d858:	bne	1d888 <__assert_fail@plt+0xb568>
   1d85c:	ldrb	ip, [r5, #1]
   1d860:	cmp	ip, #0
   1d864:	bne	1d888 <__assert_fail@plt+0xb568>
   1d868:	mov	r0, #1
   1d86c:	ldr	r1, [sp]
   1d870:	ldr	r2, [sp, #20]
   1d874:	ldr	r3, [r1]
   1d878:	cmp	r2, r3
   1d87c:	bne	1db40 <__assert_fail@plt+0xb820>
   1d880:	add	sp, sp, #28
   1d884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d888:	cmp	r1, #0
   1d88c:	bne	1d8a8 <__assert_fail@plt+0xb588>
   1d890:	ldrb	r1, [r4, #1]
   1d894:	cmp	r1, #46	; 0x2e
   1d898:	bne	1d8a8 <__assert_fail@plt+0xb588>
   1d89c:	ldrb	r1, [r4, #2]
   1d8a0:	cmp	r1, #0
   1d8a4:	beq	1da14 <__assert_fail@plt+0xb6f4>
   1d8a8:	cmp	r0, #0
   1d8ac:	beq	1d9e8 <__assert_fail@plt+0xb6c8>
   1d8b0:	cmp	r3, #46	; 0x2e
   1d8b4:	beq	1da04 <__assert_fail@plt+0xb6e4>
   1d8b8:	cmp	r2, #46	; 0x2e
   1d8bc:	beq	1d868 <__assert_fail@plt+0xb548>
   1d8c0:	add	r0, sp, #12
   1d8c4:	str	r4, [sp, #12]
   1d8c8:	str	r5, [sp, #16]
   1d8cc:	bl	1d740 <__assert_fail@plt+0xb420>
   1d8d0:	mov	r7, r0
   1d8d4:	add	r0, sp, #16
   1d8d8:	bl	1d740 <__assert_fail@plt+0xb420>
   1d8dc:	cmp	r7, #0
   1d8e0:	ldreq	r6, [sp, #12]
   1d8e4:	movne	r6, r7
   1d8e8:	rsb	r6, r4, r6
   1d8ec:	cmp	r0, #0
   1d8f0:	rsbne	r2, r5, r0
   1d8f4:	beq	1db24 <__assert_fail@plt+0xb804>
   1d8f8:	cmp	r6, r2
   1d8fc:	beq	1daf8 <__assert_fail@plt+0xb7d8>
   1d900:	mov	ip, #0
   1d904:	mov	r3, ip
   1d908:	cmp	r6, r3
   1d90c:	cmpls	r2, ip
   1d910:	bhi	1d988 <__assert_fail@plt+0xb668>
   1d914:	b	1d9e0 <__assert_fail@plt+0xb6c0>
   1d918:	cmp	r2, ip
   1d91c:	ldrb	sl, [r5, ip]
   1d920:	bls	1da24 <__assert_fail@plt+0xb704>
   1d924:	sub	r1, sl, #48	; 0x30
   1d928:	cmp	r1, #9
   1d92c:	bls	1da24 <__assert_fail@plt+0xb704>
   1d930:	cmp	r6, r3
   1d934:	beq	1d94c <__assert_fail@plt+0xb62c>
   1d938:	ldrb	r1, [r4, r3]
   1d93c:	sub	r0, r1, #48	; 0x30
   1d940:	cmp	r0, #9
   1d944:	mov	r0, r1
   1d948:	bhi	1d9a4 <__assert_fail@plt+0xb684>
   1d94c:	sub	r0, sl, #48	; 0x30
   1d950:	mov	r1, #0
   1d954:	cmp	r0, #9
   1d958:	bls	1d9d8 <__assert_fail@plt+0xb6b8>
   1d95c:	bic	r0, sl, #32
   1d960:	sub	r0, r0, #65	; 0x41
   1d964:	cmp	r0, #25
   1d968:	bls	1d978 <__assert_fail@plt+0xb658>
   1d96c:	cmp	sl, #126	; 0x7e
   1d970:	addne	sl, sl, #256	; 0x100
   1d974:	beq	1da1c <__assert_fail@plt+0xb6fc>
   1d978:	cmp	r1, sl
   1d97c:	bne	1dae8 <__assert_fail@plt+0xb7c8>
   1d980:	add	r3, r3, #1
   1d984:	add	ip, ip, #1
   1d988:	cmp	r6, r3
   1d98c:	bls	1d918 <__assert_fail@plt+0xb5f8>
   1d990:	ldrb	r1, [r4, r3]
   1d994:	sub	r0, r1, #48	; 0x30
   1d998:	cmp	r0, #9
   1d99c:	bls	1d918 <__assert_fail@plt+0xb5f8>
   1d9a0:	mov	r0, r1
   1d9a4:	bic	r0, r0, #32
   1d9a8:	sub	r0, r0, #65	; 0x41
   1d9ac:	cmp	r0, #25
   1d9b0:	bls	1d9c0 <__assert_fail@plt+0xb6a0>
   1d9b4:	cmp	r1, #126	; 0x7e
   1d9b8:	addne	r1, r1, #256	; 0x100
   1d9bc:	mvneq	r1, #0
   1d9c0:	cmp	r2, ip
   1d9c4:	beq	1d9d8 <__assert_fail@plt+0xb6b8>
   1d9c8:	ldrb	sl, [r5, ip]
   1d9cc:	sub	r0, sl, #48	; 0x30
   1d9d0:	cmp	r0, #9
   1d9d4:	bhi	1d95c <__assert_fail@plt+0xb63c>
   1d9d8:	mov	sl, #0
   1d9dc:	b	1d978 <__assert_fail@plt+0xb658>
   1d9e0:	ldr	r0, [sp, #4]
   1d9e4:	b	1d86c <__assert_fail@plt+0xb54c>
   1d9e8:	ldrb	r1, [r5, #1]
   1d9ec:	cmp	r1, #46	; 0x2e
   1d9f0:	bne	1d8b0 <__assert_fail@plt+0xb590>
   1d9f4:	ldrb	r1, [r5, #2]
   1d9f8:	cmp	r1, #0
   1d9fc:	beq	1d868 <__assert_fail@plt+0xb548>
   1da00:	b	1d8b0 <__assert_fail@plt+0xb590>
   1da04:	cmp	r2, #46	; 0x2e
   1da08:	addeq	r4, r4, #1
   1da0c:	addeq	r5, r5, #1
   1da10:	beq	1d8c0 <__assert_fail@plt+0xb5a0>
   1da14:	mvn	r0, #0
   1da18:	b	1d86c <__assert_fail@plt+0xb54c>
   1da1c:	mvn	sl, #0
   1da20:	b	1d978 <__assert_fail@plt+0xb658>
   1da24:	ldrb	r7, [r4, r3]
   1da28:	add	r0, r4, r3
   1da2c:	mov	r1, r3
   1da30:	cmp	r7, #48	; 0x30
   1da34:	bne	1da48 <__assert_fail@plt+0xb728>
   1da38:	ldrb	r7, [r0, #1]!
   1da3c:	add	r1, r1, #1
   1da40:	cmp	r7, #48	; 0x30
   1da44:	beq	1da38 <__assert_fail@plt+0xb718>
   1da48:	cmp	sl, #48	; 0x30
   1da4c:	bne	1db38 <__assert_fail@plt+0xb818>
   1da50:	add	r3, r5, ip
   1da54:	mov	r0, ip
   1da58:	ldrb	sl, [r3, #1]!
   1da5c:	add	r0, r0, #1
   1da60:	cmp	sl, #48	; 0x30
   1da64:	beq	1da58 <__assert_fail@plt+0xb738>
   1da68:	sub	r3, r7, #48	; 0x30
   1da6c:	cmp	r3, #9
   1da70:	bhi	1db44 <__assert_fail@plt+0xb824>
   1da74:	sub	r3, sl, #48	; 0x30
   1da78:	cmp	r3, #9
   1da7c:	bhi	1d868 <__assert_fail@plt+0xb548>
   1da80:	add	r9, r5, r0
   1da84:	add	r8, r4, r1
   1da88:	mov	r3, r1
   1da8c:	mov	fp, #0
   1da90:	b	1daa4 <__assert_fail@plt+0xb784>
   1da94:	ldrb	sl, [r9, #1]!
   1da98:	sub	ip, sl, #48	; 0x30
   1da9c:	cmp	ip, #9
   1daa0:	bhi	1d868 <__assert_fail@plt+0xb548>
   1daa4:	cmp	fp, #0
   1daa8:	add	r3, r3, #1
   1daac:	rsbeq	fp, sl, r7
   1dab0:	ldrb	r7, [r8, #1]!
   1dab4:	rsb	ip, r1, r3
   1dab8:	sub	sl, r7, #48	; 0x30
   1dabc:	add	ip, ip, r0
   1dac0:	cmp	sl, #9
   1dac4:	bls	1da94 <__assert_fail@plt+0xb774>
   1dac8:	ldrb	r1, [r5, ip]
   1dacc:	sub	r1, r1, #48	; 0x30
   1dad0:	cmp	r1, #9
   1dad4:	bls	1da14 <__assert_fail@plt+0xb6f4>
   1dad8:	cmp	fp, #0
   1dadc:	beq	1d908 <__assert_fail@plt+0xb5e8>
   1dae0:	mov	r0, fp
   1dae4:	b	1d86c <__assert_fail@plt+0xb54c>
   1dae8:	cmp	r1, sl
   1daec:	ldr	r0, [sp, #4]
   1daf0:	rsbne	r0, sl, r1
   1daf4:	b	1d86c <__assert_fail@plt+0xb54c>
   1daf8:	mov	r2, r6
   1dafc:	mov	r0, r4
   1db00:	mov	r1, r5
   1db04:	bl	122e4 <strncmp@plt>
   1db08:	cmp	r0, #0
   1db0c:	ldreq	r6, [sp, #12]
   1db10:	movne	r2, r6
   1db14:	ldreq	r2, [sp, #16]
   1db18:	rsbeq	r6, r4, r6
   1db1c:	rsbeq	r2, r5, r2
   1db20:	b	1d900 <__assert_fail@plt+0xb5e0>
   1db24:	ldr	r2, [sp, #16]
   1db28:	cmp	r7, #0
   1db2c:	rsb	r2, r5, r2
   1db30:	beq	1d900 <__assert_fail@plt+0xb5e0>
   1db34:	b	1d8f8 <__assert_fail@plt+0xb5d8>
   1db38:	mov	r0, ip
   1db3c:	b	1da68 <__assert_fail@plt+0xb748>
   1db40:	bl	11ed0 <__stack_chk_fail@plt>
   1db44:	sub	sl, sl, #48	; 0x30
   1db48:	cmp	sl, #9
   1db4c:	bls	1da14 <__assert_fail@plt+0xb6f4>
   1db50:	mov	ip, r0
   1db54:	mov	r3, r1
   1db58:	b	1d908 <__assert_fail@plt+0xb5e8>
   1db5c:	andeq	sl, r1, r4, lsl #16
   1db60:	andeq	r0, r0, ip, lsl r2
   1db64:	push	{r4, r5, r6, lr}
   1db68:	mov	r5, r1
   1db6c:	bl	12278 <fopen64@plt>
   1db70:	subs	r4, r0, #0
   1db74:	beq	1db84 <__assert_fail@plt+0xb864>
   1db78:	bl	121a0 <fileno@plt>
   1db7c:	cmp	r0, #2
   1db80:	bls	1db8c <__assert_fail@plt+0xb86c>
   1db84:	mov	r0, r4
   1db88:	pop	{r4, r5, r6, pc}
   1db8c:	bl	22104 <__assert_fail@plt+0xfde4>
   1db90:	subs	r6, r0, #0
   1db94:	blt	1dbc0 <__assert_fail@plt+0xb8a0>
   1db98:	mov	r0, r4
   1db9c:	bl	238f4 <__assert_fail@plt+0x115d4>
   1dba0:	cmp	r0, #0
   1dba4:	bne	1dbe0 <__assert_fail@plt+0xb8c0>
   1dba8:	mov	r1, r5
   1dbac:	mov	r0, r6
   1dbb0:	bl	11d20 <fdopen@plt>
   1dbb4:	cmp	r0, #0
   1dbb8:	beq	1dbe0 <__assert_fail@plt+0xb8c0>
   1dbbc:	pop	{r4, r5, r6, pc}
   1dbc0:	bl	1211c <__errno_location@plt>
   1dbc4:	ldr	r6, [r0]
   1dbc8:	mov	r5, r0
   1dbcc:	mov	r0, r4
   1dbd0:	bl	238f4 <__assert_fail@plt+0x115d4>
   1dbd4:	mov	r0, #0
   1dbd8:	str	r6, [r5]
   1dbdc:	pop	{r4, r5, r6, pc}
   1dbe0:	bl	1211c <__errno_location@plt>
   1dbe4:	ldr	r5, [r0]
   1dbe8:	mov	r4, r0
   1dbec:	mov	r0, r6
   1dbf0:	bl	12308 <close@plt>
   1dbf4:	mov	r0, #0
   1dbf8:	str	r5, [r4]
   1dbfc:	pop	{r4, r5, r6, pc}
   1dc00:	push	{r3, lr}
   1dc04:	mov	r1, #0
   1dc08:	bl	1220c <setlocale@plt>
   1dc0c:	cmp	r0, #0
   1dc10:	beq	1dc4c <__assert_fail@plt+0xb92c>
   1dc14:	ldrb	r3, [r0]
   1dc18:	cmp	r3, #67	; 0x43
   1dc1c:	bne	1dc34 <__assert_fail@plt+0xb914>
   1dc20:	ldrb	r3, [r0, #1]
   1dc24:	cmp	r3, #0
   1dc28:	bne	1dc34 <__assert_fail@plt+0xb914>
   1dc2c:	mov	r0, r3
   1dc30:	pop	{r3, pc}
   1dc34:	ldr	r1, [pc, #24]	; 1dc54 <__assert_fail@plt+0xb934>
   1dc38:	add	r1, pc, r1
   1dc3c:	bl	11d68 <strcmp@plt>
   1dc40:	adds	r0, r0, #0
   1dc44:	movne	r0, #1
   1dc48:	pop	{r3, pc}
   1dc4c:	mov	r0, #1
   1dc50:	pop	{r3, pc}
   1dc54:	andeq	r9, r0, r0, ror r4
   1dc58:	cmp	r0, #9
   1dc5c:	push	{r4, r5, r6, r7, r8, lr}
   1dc60:	bhi	1dcf4 <__assert_fail@plt+0xb9d4>
   1dc64:	mov	r7, #11
   1dc68:	movw	r8, #43691	; 0xaaab
   1dc6c:	movt	r8, #43690	; 0xaaaa
   1dc70:	cmp	r7, #9
   1dc74:	bls	1dcec <__assert_fail@plt+0xb9cc>
   1dc78:	umull	r2, r3, r8, r7
   1dc7c:	lsr	r3, r3, #1
   1dc80:	add	r3, r3, r3, lsl #1
   1dc84:	cmp	r7, r3
   1dc88:	beq	1dcd8 <__assert_fail@plt+0xb9b8>
   1dc8c:	mov	r6, #16
   1dc90:	mov	r5, #9
   1dc94:	mov	r4, #3
   1dc98:	b	1dca8 <__assert_fail@plt+0xb988>
   1dc9c:	bl	244e4 <__assert_fail@plt+0x121c4>
   1dca0:	cmp	r1, #0
   1dca4:	beq	1dcd8 <__assert_fail@plt+0xb9b8>
   1dca8:	add	r5, r5, r6
   1dcac:	add	r4, r4, #2
   1dcb0:	cmp	r5, r7
   1dcb4:	mov	r0, r7
   1dcb8:	add	r6, r6, #8
   1dcbc:	mov	r1, r4
   1dcc0:	bcc	1dc9c <__assert_fail@plt+0xb97c>
   1dcc4:	mov	r1, r4
   1dcc8:	mov	r0, r7
   1dccc:	bl	244e4 <__assert_fail@plt+0x121c4>
   1dcd0:	cmp	r1, #0
   1dcd4:	bne	1dce4 <__assert_fail@plt+0xb9c4>
   1dcd8:	add	r7, r7, #2
   1dcdc:	cmn	r7, #1
   1dce0:	bne	1dc70 <__assert_fail@plt+0xb950>
   1dce4:	mov	r0, r7
   1dce8:	pop	{r4, r5, r6, r7, r8, pc}
   1dcec:	mov	r4, #3
   1dcf0:	b	1dcc4 <__assert_fail@plt+0xb9a4>
   1dcf4:	orr	r7, r0, #1
   1dcf8:	cmn	r7, #1
   1dcfc:	bne	1dc68 <__assert_fail@plt+0xb948>
   1dd00:	b	1dce4 <__assert_fail@plt+0xb9c4>
   1dd04:	push	{r3, lr}
   1dd08:	ror	r0, r0, #3
   1dd0c:	bl	244e4 <__assert_fail@plt+0x121c4>
   1dd10:	mov	r0, r1
   1dd14:	pop	{r3, pc}
   1dd18:	subs	r3, r1, r0
   1dd1c:	rsbs	r0, r3, #0
   1dd20:	adcs	r0, r0, r3
   1dd24:	bx	lr
   1dd28:	push	{r4, lr}
   1dd2c:	mov	r4, r0
   1dd30:	ldr	r3, [r4, #24]
   1dd34:	mov	r0, r1
   1dd38:	ldr	r1, [r4, #8]
   1dd3c:	blx	r3
   1dd40:	ldr	r3, [r4, #8]
   1dd44:	cmp	r0, r3
   1dd48:	bcs	1dd58 <__assert_fail@plt+0xba38>
   1dd4c:	ldr	r3, [r4]
   1dd50:	add	r0, r3, r0, lsl #3
   1dd54:	pop	{r4, pc}
   1dd58:	bl	122fc <abort@plt>
   1dd5c:	push	{r4, r5, r6, r7, r8, lr}
   1dd60:	mov	r7, r2
   1dd64:	mov	r8, r3
   1dd68:	mov	r6, r0
   1dd6c:	mov	r5, r1
   1dd70:	bl	1dd28 <__assert_fail@plt+0xba08>
   1dd74:	str	r0, [r7]
   1dd78:	mov	r4, r0
   1dd7c:	ldr	r2, [r0]
   1dd80:	cmp	r2, #0
   1dd84:	beq	1de18 <__assert_fail@plt+0xbaf8>
   1dd88:	cmp	r5, r2
   1dd8c:	beq	1ddac <__assert_fail@plt+0xba8c>
   1dd90:	mov	r1, r2
   1dd94:	ldr	r3, [r6, #28]
   1dd98:	mov	r0, r5
   1dd9c:	blx	r3
   1dda0:	cmp	r0, #0
   1dda4:	beq	1de0c <__assert_fail@plt+0xbaec>
   1dda8:	ldr	r2, [r4]
   1ddac:	cmp	r8, #0
   1ddb0:	beq	1dddc <__assert_fail@plt+0xbabc>
   1ddb4:	ldr	r3, [r4, #4]
   1ddb8:	cmp	r3, #0
   1ddbc:	streq	r3, [r4]
   1ddc0:	ldmne	r3, {r0, r1}
   1ddc4:	movne	ip, #0
   1ddc8:	stmne	r4, {r0, r1}
   1ddcc:	strne	ip, [r3]
   1ddd0:	ldrne	r1, [r6, #36]	; 0x24
   1ddd4:	strne	r1, [r3, #4]
   1ddd8:	strne	r3, [r6, #36]	; 0x24
   1dddc:	mov	r0, r2
   1dde0:	pop	{r4, r5, r6, r7, r8, pc}
   1dde4:	ldr	r2, [ip]
   1dde8:	cmp	r2, r5
   1ddec:	beq	1de2c <__assert_fail@plt+0xbb0c>
   1ddf0:	mov	r1, r2
   1ddf4:	mov	r0, r5
   1ddf8:	ldr	r2, [r6, #28]
   1ddfc:	blx	r2
   1de00:	cmp	r0, #0
   1de04:	bne	1de24 <__assert_fail@plt+0xbb04>
   1de08:	ldr	r4, [r4, #4]
   1de0c:	ldr	ip, [r4, #4]
   1de10:	cmp	ip, #0
   1de14:	bne	1dde4 <__assert_fail@plt+0xbac4>
   1de18:	mov	r2, #0
   1de1c:	mov	r0, r2
   1de20:	pop	{r4, r5, r6, r7, r8, pc}
   1de24:	ldr	ip, [r4, #4]
   1de28:	ldr	r2, [ip]
   1de2c:	cmp	r8, #0
   1de30:	beq	1dddc <__assert_fail@plt+0xbabc>
   1de34:	ldr	r1, [ip, #4]
   1de38:	mov	r3, #0
   1de3c:	mov	r0, r2
   1de40:	str	r1, [r4, #4]
   1de44:	str	r3, [ip]
   1de48:	ldr	r3, [r6, #36]	; 0x24
   1de4c:	str	r3, [ip, #4]
   1de50:	str	ip, [r6, #36]	; 0x24
   1de54:	pop	{r4, r5, r6, r7, r8, pc}
   1de58:	ldr	r1, [pc, #176]	; 1df10 <__assert_fail@plt+0xbbf0>
   1de5c:	mov	r2, r0
   1de60:	ldr	r3, [r0]
   1de64:	add	r1, pc, r1
   1de68:	cmp	r3, r1
   1de6c:	beq	1defc <__assert_fail@plt+0xbbdc>
   1de70:	vldr	s15, [r3, #8]
   1de74:	vldr	s14, [pc, #136]	; 1df04 <__assert_fail@plt+0xbbe4>
   1de78:	vcmpe.f32	s15, s14
   1de7c:	vmrs	APSR_nzcv, fpscr
   1de80:	ble	1dee8 <__assert_fail@plt+0xbbc8>
   1de84:	vldr	s13, [pc, #124]	; 1df08 <__assert_fail@plt+0xbbe8>
   1de88:	vcmpe.f32	s15, s13
   1de8c:	vmrs	APSR_nzcv, fpscr
   1de90:	bpl	1dee8 <__assert_fail@plt+0xbbc8>
   1de94:	vldr	s13, [pc, #112]	; 1df0c <__assert_fail@plt+0xbbec>
   1de98:	vldr	s12, [r3, #12]
   1de9c:	vcmpe.f32	s12, s13
   1dea0:	vmrs	APSR_nzcv, fpscr
   1dea4:	ble	1dee8 <__assert_fail@plt+0xbbc8>
   1dea8:	vldr	s13, [r3]
   1deac:	vcmpe.f32	s13, #0.0
   1deb0:	vmrs	APSR_nzcv, fpscr
   1deb4:	blt	1dee8 <__assert_fail@plt+0xbbc8>
   1deb8:	vadd.f32	s14, s13, s14
   1debc:	vldr	s12, [r3, #4]
   1dec0:	vcmpe.f32	s14, s12
   1dec4:	vmrs	APSR_nzcv, fpscr
   1dec8:	bpl	1dee8 <__assert_fail@plt+0xbbc8>
   1decc:	vmov.f32	s13, #112	; 0x3f800000  1.0
   1ded0:	vcmpe.f32	s12, s13
   1ded4:	vmrs	APSR_nzcv, fpscr
   1ded8:	bhi	1dee8 <__assert_fail@plt+0xbbc8>
   1dedc:	vcmpe.f32	s15, s14
   1dee0:	vmrs	APSR_nzcv, fpscr
   1dee4:	bgt	1defc <__assert_fail@plt+0xbbdc>
   1dee8:	ldr	r3, [pc, #36]	; 1df14 <__assert_fail@plt+0xbbf4>
   1deec:	mov	r0, #0
   1def0:	add	r3, pc, r3
   1def4:	str	r3, [r2]
   1def8:	bx	lr
   1defc:	mov	r0, #1
   1df00:	bx	lr
   1df04:	stclcc	12, cr12, [ip, #820]	; 0x334
   1df08:	svccc	0x00666666
   1df0c:	svccc	0x008ccccd
   1df10:	andeq	r9, r0, ip, asr #4
   1df14:	andeq	r9, r0, r0, asr #3
   1df18:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df1c:	mov	r8, r1
   1df20:	ldr	r6, [r1]
   1df24:	mov	r5, r0
   1df28:	ldr	r3, [r1, #4]
   1df2c:	mov	sl, r2
   1df30:	cmp	r6, r3
   1df34:	addcc	r6, r6, #8
   1df38:	movcc	r9, #0
   1df3c:	bcs	1dfe4 <__assert_fail@plt+0xbcc4>
   1df40:	ldr	fp, [r6, #-8]
   1df44:	mov	r7, r6
   1df48:	cmp	fp, #0
   1df4c:	beq	1dfd8 <__assert_fail@plt+0xbcb8>
   1df50:	ldr	r4, [r6, #-4]
   1df54:	cmp	r4, #0
   1df58:	bne	1df78 <__assert_fail@plt+0xbc58>
   1df5c:	b	1dfc8 <__assert_fail@plt+0xbca8>
   1df60:	ldr	r2, [r0, #4]
   1df64:	cmp	r3, #0
   1df68:	str	r2, [r4, #4]
   1df6c:	str	r4, [r0, #4]
   1df70:	mov	r4, r3
   1df74:	beq	1dfc4 <__assert_fail@plt+0xbca4>
   1df78:	ldr	fp, [r4]
   1df7c:	mov	r0, r5
   1df80:	mov	r1, fp
   1df84:	bl	1dd28 <__assert_fail@plt+0xba08>
   1df88:	ldr	r3, [r4, #4]
   1df8c:	ldr	r2, [r0]
   1df90:	cmp	r2, #0
   1df94:	bne	1df60 <__assert_fail@plt+0xbc40>
   1df98:	str	fp, [r0]
   1df9c:	cmp	r3, #0
   1dfa0:	ldr	r1, [r5, #12]
   1dfa4:	add	r1, r1, #1
   1dfa8:	str	r1, [r5, #12]
   1dfac:	str	r2, [r4]
   1dfb0:	ldr	r2, [r5, #36]	; 0x24
   1dfb4:	str	r2, [r4, #4]
   1dfb8:	str	r4, [r5, #36]	; 0x24
   1dfbc:	mov	r4, r3
   1dfc0:	bne	1df78 <__assert_fail@plt+0xbc58>
   1dfc4:	ldr	fp, [r6, #-8]
   1dfc8:	cmp	sl, #0
   1dfcc:	str	r9, [r6, #-4]
   1dfd0:	beq	1dfec <__assert_fail@plt+0xbccc>
   1dfd4:	ldr	r3, [r8, #4]
   1dfd8:	cmp	r3, r7
   1dfdc:	add	r6, r6, #8
   1dfe0:	bhi	1df40 <__assert_fail@plt+0xbc20>
   1dfe4:	mov	r0, #1
   1dfe8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfec:	mov	r0, r5
   1dff0:	mov	r1, fp
   1dff4:	bl	1dd28 <__assert_fail@plt+0xba08>
   1dff8:	ldr	r3, [r0]
   1dffc:	mov	r4, r0
   1e000:	cmp	r3, #0
   1e004:	beq	1e050 <__assert_fail@plt+0xbd30>
   1e008:	ldr	r0, [r5, #36]	; 0x24
   1e00c:	cmp	r0, #0
   1e010:	beq	1e064 <__assert_fail@plt+0xbd44>
   1e014:	ldr	r2, [r0, #4]
   1e018:	str	r2, [r5, #36]	; 0x24
   1e01c:	str	fp, [r0]
   1e020:	ldr	r2, [r4, #4]
   1e024:	str	r2, [r0, #4]
   1e028:	str	r0, [r4, #4]
   1e02c:	str	r9, [r6, #-8]
   1e030:	add	r6, r6, #8
   1e034:	ldr	r3, [r8, #4]
   1e038:	ldr	r2, [r8, #12]
   1e03c:	cmp	r3, r7
   1e040:	sub	r2, r2, #1
   1e044:	str	r2, [r8, #12]
   1e048:	bhi	1df40 <__assert_fail@plt+0xbc20>
   1e04c:	b	1dfe4 <__assert_fail@plt+0xbcc4>
   1e050:	str	fp, [r0]
   1e054:	ldr	r3, [r5, #12]
   1e058:	add	r3, r3, #1
   1e05c:	str	r3, [r5, #12]
   1e060:	b	1e02c <__assert_fail@plt+0xbd0c>
   1e064:	mov	r0, #8
   1e068:	bl	1205c <malloc@plt>
   1e06c:	cmp	r0, #0
   1e070:	bne	1e01c <__assert_fail@plt+0xbcfc>
   1e074:	mov	r0, sl
   1e078:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e07c:	ldr	r0, [r0, #8]
   1e080:	bx	lr
   1e084:	ldr	r0, [r0, #12]
   1e088:	bx	lr
   1e08c:	ldr	r0, [r0, #16]
   1e090:	bx	lr
   1e094:	ldr	r3, [r0]
   1e098:	ldr	r2, [r0, #4]
   1e09c:	cmp	r3, r2
   1e0a0:	bcs	1e104 <__assert_fail@plt+0xbde4>
   1e0a4:	add	r1, r3, #8
   1e0a8:	add	r2, r2, #7
   1e0ac:	rsb	r2, r1, r2
   1e0b0:	add	r3, r3, #16
   1e0b4:	bic	r2, r2, #7
   1e0b8:	mov	r0, #0
   1e0bc:	add	ip, r3, r2
   1e0c0:	ldr	r3, [r1, #-8]
   1e0c4:	cmp	r3, #0
   1e0c8:	beq	1e0f4 <__assert_fail@plt+0xbdd4>
   1e0cc:	ldr	r3, [r1, #-4]
   1e0d0:	mov	r2, #1
   1e0d4:	cmp	r3, #0
   1e0d8:	beq	1e0ec <__assert_fail@plt+0xbdcc>
   1e0dc:	ldr	r3, [r3, #4]
   1e0e0:	add	r2, r2, #1
   1e0e4:	cmp	r3, #0
   1e0e8:	bne	1e0dc <__assert_fail@plt+0xbdbc>
   1e0ec:	cmp	r0, r2
   1e0f0:	movcc	r0, r2
   1e0f4:	add	r1, r1, #8
   1e0f8:	cmp	r1, ip
   1e0fc:	bne	1e0c0 <__assert_fail@plt+0xbda0>
   1e100:	bx	lr
   1e104:	mov	r0, #0
   1e108:	bx	lr
   1e10c:	push	{r4}		; (str r4, [sp, #-4]!)
   1e110:	ldr	r3, [r0]
   1e114:	ldr	r2, [r0, #4]
   1e118:	cmp	r3, r2
   1e11c:	bcs	1e1ac <__assert_fail@plt+0xbe8c>
   1e120:	add	r2, r2, #7
   1e124:	add	r1, r3, #8
   1e128:	rsb	ip, r1, r2
   1e12c:	add	r3, r3, #16
   1e130:	bic	ip, ip, #7
   1e134:	mov	r2, #0
   1e138:	add	r4, r3, ip
   1e13c:	mov	ip, r2
   1e140:	ldr	r3, [r1, #-8]
   1e144:	cmp	r3, #0
   1e148:	beq	1e170 <__assert_fail@plt+0xbe50>
   1e14c:	ldr	r3, [r1, #-4]
   1e150:	add	ip, ip, #1
   1e154:	add	r2, r2, #1
   1e158:	cmp	r3, #0
   1e15c:	beq	1e170 <__assert_fail@plt+0xbe50>
   1e160:	ldr	r3, [r3, #4]
   1e164:	add	r2, r2, #1
   1e168:	cmp	r3, #0
   1e16c:	bne	1e160 <__assert_fail@plt+0xbe40>
   1e170:	add	r1, r1, #8
   1e174:	cmp	r1, r4
   1e178:	bne	1e140 <__assert_fail@plt+0xbe20>
   1e17c:	ldr	r3, [r0, #12]
   1e180:	cmp	r3, ip
   1e184:	movne	r0, #0
   1e188:	beq	1e194 <__assert_fail@plt+0xbe74>
   1e18c:	pop	{r4}		; (ldr r4, [sp], #4)
   1e190:	bx	lr
   1e194:	ldr	r0, [r0, #16]
   1e198:	pop	{r4}		; (ldr r4, [sp], #4)
   1e19c:	subs	r3, r0, r2
   1e1a0:	rsbs	r0, r3, #0
   1e1a4:	adcs	r0, r0, r3
   1e1a8:	bx	lr
   1e1ac:	mov	r2, #0
   1e1b0:	mov	ip, r2
   1e1b4:	b	1e17c <__assert_fail@plt+0xbe5c>
   1e1b8:	push	{r4, r5, r6, r7, r8, lr}
   1e1bc:	sub	sp, sp, #8
   1e1c0:	mov	r4, r1
   1e1c4:	mov	r5, r0
   1e1c8:	bl	1e08c <__assert_fail@plt+0xbd6c>
   1e1cc:	mov	r8, r0
   1e1d0:	mov	r0, r5
   1e1d4:	bl	1e07c <__assert_fail@plt+0xbd5c>
   1e1d8:	mov	r6, r0
   1e1dc:	mov	r0, r5
   1e1e0:	bl	1e084 <__assert_fail@plt+0xbd64>
   1e1e4:	mov	r7, r0
   1e1e8:	mov	r0, r5
   1e1ec:	bl	1e094 <__assert_fail@plt+0xbd74>
   1e1f0:	ldr	r2, [pc, #144]	; 1e288 <__assert_fail@plt+0xbf68>
   1e1f4:	mov	r3, r8
   1e1f8:	mov	r1, #1
   1e1fc:	add	r2, pc, r2
   1e200:	mov	r5, r0
   1e204:	mov	r0, r4
   1e208:	bl	121ac <__fprintf_chk@plt>
   1e20c:	ldr	r2, [pc, #120]	; 1e28c <__assert_fail@plt+0xbf6c>
   1e210:	mov	r3, r6
   1e214:	mov	r0, r4
   1e218:	mov	r1, #1
   1e21c:	add	r2, pc, r2
   1e220:	bl	121ac <__fprintf_chk@plt>
   1e224:	vmov	s15, r7
   1e228:	vldr	d5, [pc, #80]	; 1e280 <__assert_fail@plt+0xbf60>
   1e22c:	ldr	r2, [pc, #92]	; 1e290 <__assert_fail@plt+0xbf70>
   1e230:	vcvt.f64.u32	d4, s15
   1e234:	mov	r3, r7
   1e238:	vmov	s15, r6
   1e23c:	mov	r0, r4
   1e240:	mov	r1, #1
   1e244:	add	r2, pc, r2
   1e248:	vmul.f64	d5, d4, d5
   1e24c:	vcvt.f64.u32	d6, s15
   1e250:	vdiv.f64	d7, d5, d6
   1e254:	vstr	d7, [sp]
   1e258:	bl	121ac <__fprintf_chk@plt>
   1e25c:	ldr	r2, [pc, #48]	; 1e294 <__assert_fail@plt+0xbf74>
   1e260:	mov	r0, r4
   1e264:	mov	r3, r5
   1e268:	mov	r1, #1
   1e26c:	add	r2, pc, r2
   1e270:	add	sp, sp, #8
   1e274:	pop	{r4, r5, r6, r7, r8, lr}
   1e278:	b	121ac <__fprintf_chk@plt>
   1e27c:	nop	{0}
   1e280:	andeq	r0, r0, r0
   1e284:	subsmi	r0, r9, r0
   1e288:	andeq	r8, r0, r8, asr #29
   1e28c:	andeq	r8, r0, r0, asr #29
   1e290:			; <UNDEFINED> instruction: 0x00008eb0
   1e294:	andeq	r8, r0, ip, lsr #29
   1e298:	push	{r4, r5, r6, lr}
   1e29c:	mov	r6, r0
   1e2a0:	mov	r5, r1
   1e2a4:	bl	1dd28 <__assert_fail@plt+0xba08>
   1e2a8:	ldr	r3, [r0]
   1e2ac:	mov	r4, r0
   1e2b0:	cmp	r3, #0
   1e2b4:	bne	1e2c0 <__assert_fail@plt+0xbfa0>
   1e2b8:	b	1e2ec <__assert_fail@plt+0xbfcc>
   1e2bc:	ldr	r3, [r4]
   1e2c0:	cmp	r5, r3
   1e2c4:	mov	r1, r3
   1e2c8:	mov	r0, r5
   1e2cc:	beq	1e2f8 <__assert_fail@plt+0xbfd8>
   1e2d0:	ldr	r3, [r6, #28]
   1e2d4:	blx	r3
   1e2d8:	cmp	r0, #0
   1e2dc:	bne	1e2f4 <__assert_fail@plt+0xbfd4>
   1e2e0:	ldr	r4, [r4, #4]
   1e2e4:	cmp	r4, #0
   1e2e8:	bne	1e2bc <__assert_fail@plt+0xbf9c>
   1e2ec:	mov	r0, #0
   1e2f0:	pop	{r4, r5, r6, pc}
   1e2f4:	ldr	r3, [r4]
   1e2f8:	mov	r0, r3
   1e2fc:	pop	{r4, r5, r6, pc}
   1e300:	push	{r3, lr}
   1e304:	ldr	r3, [r0, #16]
   1e308:	cmp	r3, #0
   1e30c:	beq	1e34c <__assert_fail@plt+0xc02c>
   1e310:	ldr	r3, [r0]
   1e314:	ldr	r2, [r0, #4]
   1e318:	cmp	r3, r2
   1e31c:	bcs	1e348 <__assert_fail@plt+0xc028>
   1e320:	ldr	r0, [r3]
   1e324:	cmp	r0, #0
   1e328:	beq	1e33c <__assert_fail@plt+0xc01c>
   1e32c:	b	1e354 <__assert_fail@plt+0xc034>
   1e330:	ldr	r0, [r3]
   1e334:	cmp	r0, #0
   1e338:	popne	{r3, pc}
   1e33c:	add	r3, r3, #8
   1e340:	cmp	r3, r2
   1e344:	bcc	1e330 <__assert_fail@plt+0xc010>
   1e348:	bl	122fc <abort@plt>
   1e34c:	mov	r0, r3
   1e350:	pop	{r3, pc}
   1e354:	pop	{r3, pc}
   1e358:	push	{r3, r4, r5, lr}
   1e35c:	mov	r5, r0
   1e360:	mov	r4, r1
   1e364:	bl	1dd28 <__assert_fail@plt+0xba08>
   1e368:	mov	r2, r0
   1e36c:	mov	r3, r0
   1e370:	b	1e37c <__assert_fail@plt+0xc05c>
   1e374:	cmp	r3, #0
   1e378:	beq	1e394 <__assert_fail@plt+0xc074>
   1e37c:	ldr	ip, [r3]
   1e380:	ldr	r3, [r3, #4]
   1e384:	cmp	ip, r4
   1e388:	bne	1e374 <__assert_fail@plt+0xc054>
   1e38c:	cmp	r3, #0
   1e390:	bne	1e3bc <__assert_fail@plt+0xc09c>
   1e394:	ldr	r3, [r5, #4]
   1e398:	b	1e3a8 <__assert_fail@plt+0xc088>
   1e39c:	ldr	r0, [r2]
   1e3a0:	cmp	r0, #0
   1e3a4:	popne	{r3, r4, r5, pc}
   1e3a8:	add	r2, r2, #8
   1e3ac:	cmp	r2, r3
   1e3b0:	bcc	1e39c <__assert_fail@plt+0xc07c>
   1e3b4:	mov	r0, #0
   1e3b8:	pop	{r3, r4, r5, pc}
   1e3bc:	ldr	r0, [r3]
   1e3c0:	pop	{r3, r4, r5, pc}
   1e3c4:	push	{r4, r5, r6, r7}
   1e3c8:	mov	r6, r0
   1e3cc:	ldm	r0, {r5, ip}
   1e3d0:	cmp	ip, r5
   1e3d4:	bls	1e458 <__assert_fail@plt+0xc138>
   1e3d8:	add	r5, r5, #8
   1e3dc:	mov	r0, #0
   1e3e0:	ldr	r3, [r5, #-8]
   1e3e4:	mov	r7, r5
   1e3e8:	cmp	r3, #0
   1e3ec:	beq	1e438 <__assert_fail@plt+0xc118>
   1e3f0:	cmp	r2, r0
   1e3f4:	bls	1e444 <__assert_fail@plt+0xc124>
   1e3f8:	str	r3, [r1, r0, lsl #2]
   1e3fc:	add	r4, r0, #1
   1e400:	ldr	r3, [r5, #-4]
   1e404:	add	ip, r1, r0, lsl #2
   1e408:	cmp	r3, #0
   1e40c:	beq	1e44c <__assert_fail@plt+0xc12c>
   1e410:	mov	r0, r4
   1e414:	cmp	r0, r2
   1e418:	beq	1e444 <__assert_fail@plt+0xc124>
   1e41c:	ldr	r4, [r3]
   1e420:	add	r0, r0, #1
   1e424:	str	r4, [ip, #4]!
   1e428:	ldr	r3, [r3, #4]
   1e42c:	cmp	r3, #0
   1e430:	bne	1e414 <__assert_fail@plt+0xc0f4>
   1e434:	ldr	ip, [r6, #4]
   1e438:	cmp	ip, r7
   1e43c:	add	r5, r5, #8
   1e440:	bhi	1e3e0 <__assert_fail@plt+0xc0c0>
   1e444:	pop	{r4, r5, r6, r7}
   1e448:	bx	lr
   1e44c:	ldr	ip, [r6, #4]
   1e450:	mov	r0, r4
   1e454:	b	1e438 <__assert_fail@plt+0xc118>
   1e458:	mov	r0, #0
   1e45c:	b	1e444 <__assert_fail@plt+0xc124>
   1e460:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1e464:	mov	r7, r2
   1e468:	ldr	r8, [r0]
   1e46c:	mov	r9, r0
   1e470:	ldr	r2, [r0, #4]
   1e474:	mov	r6, r1
   1e478:	mov	r5, #0
   1e47c:	cmp	r2, r8
   1e480:	bls	1e4d0 <__assert_fail@plt+0xc1b0>
   1e484:	ldr	r3, [r8]
   1e488:	cmp	r3, #0
   1e48c:	beq	1e4c4 <__assert_fail@plt+0xc1a4>
   1e490:	mov	r0, r3
   1e494:	mov	r4, r8
   1e498:	b	1e4a0 <__assert_fail@plt+0xc180>
   1e49c:	ldr	r0, [r4]
   1e4a0:	mov	r1, r7
   1e4a4:	blx	r6
   1e4a8:	cmp	r0, #0
   1e4ac:	beq	1e4d0 <__assert_fail@plt+0xc1b0>
   1e4b0:	ldr	r4, [r4, #4]
   1e4b4:	add	r5, r5, #1
   1e4b8:	cmp	r4, #0
   1e4bc:	bne	1e49c <__assert_fail@plt+0xc17c>
   1e4c0:	ldr	r2, [r9, #4]
   1e4c4:	add	r8, r8, #8
   1e4c8:	cmp	r2, r8
   1e4cc:	bhi	1e484 <__assert_fail@plt+0xc164>
   1e4d0:	mov	r0, r5
   1e4d4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1e4d8:	push	{r3, r4, r5, lr}
   1e4dc:	mov	r5, r1
   1e4e0:	ldrb	r3, [r0]
   1e4e4:	cmp	r3, #0
   1e4e8:	beq	1e518 <__assert_fail@plt+0xc1f8>
   1e4ec:	mov	r4, r0
   1e4f0:	mov	r1, #0
   1e4f4:	rsb	r0, r1, r1, lsl #5
   1e4f8:	mov	r1, r5
   1e4fc:	add	r0, r3, r0
   1e500:	bl	244e4 <__assert_fail@plt+0x121c4>
   1e504:	ldrb	r3, [r4, #1]!
   1e508:	cmp	r3, #0
   1e50c:	bne	1e4f4 <__assert_fail@plt+0xc1d4>
   1e510:	mov	r0, r1
   1e514:	pop	{r3, r4, r5, pc}
   1e518:	mov	r1, r3
   1e51c:	b	1e510 <__assert_fail@plt+0xc1f0>
   1e520:	push	{r4}		; (str r4, [sp, #-4]!)
   1e524:	mov	ip, r0
   1e528:	ldr	r4, [pc, #24]	; 1e548 <__assert_fail@plt+0xc228>
   1e52c:	add	r4, pc, r4
   1e530:	ldm	r4!, {r0, r1, r2, r3}
   1e534:	ldr	r4, [r4]
   1e538:	stmia	ip!, {r0, r1, r2, r3}
   1e53c:	str	r4, [ip]
   1e540:	pop	{r4}		; (ldr r4, [sp], #4)
   1e544:	bx	lr
   1e548:	andeq	r8, r0, r4, lsl #23
   1e54c:	push	{r4, r5, r6, r7, r8, lr}
   1e550:	subs	r8, r2, #0
   1e554:	mov	r7, r0
   1e558:	mov	r5, r1
   1e55c:	mov	r6, r3
   1e560:	beq	1e654 <__assert_fail@plt+0xc334>
   1e564:	cmp	r6, #0
   1e568:	beq	1e648 <__assert_fail@plt+0xc328>
   1e56c:	mov	r0, #40	; 0x28
   1e570:	bl	1205c <malloc@plt>
   1e574:	subs	r4, r0, #0
   1e578:	beq	1e66c <__assert_fail@plt+0xc34c>
   1e57c:	cmp	r5, #0
   1e580:	beq	1e660 <__assert_fail@plt+0xc340>
   1e584:	mov	r0, r4
   1e588:	str	r5, [r0, #20]!
   1e58c:	bl	1de58 <__assert_fail@plt+0xbb38>
   1e590:	cmp	r0, #0
   1e594:	beq	1e638 <__assert_fail@plt+0xc318>
   1e598:	ldrb	r3, [r5, #16]
   1e59c:	vldr	s15, [r5, #8]
   1e5a0:	cmp	r3, #0
   1e5a4:	bne	1e5cc <__assert_fail@plt+0xc2ac>
   1e5a8:	vmov	s14, r7
   1e5ac:	vcvt.f32.u32	s13, s14
   1e5b0:	vldr	s14, [pc, #188]	; 1e674 <__assert_fail@plt+0xc354>
   1e5b4:	vdiv.f32	s15, s13, s15
   1e5b8:	vcmpe.f32	s15, s14
   1e5bc:	vmrs	APSR_nzcv, fpscr
   1e5c0:	bge	1e630 <__assert_fail@plt+0xc310>
   1e5c4:	vcvt.u32.f32	s15, s15
   1e5c8:	vmov	r7, s15
   1e5cc:	mov	r0, r7
   1e5d0:	bl	1dc58 <__assert_fail@plt+0xb938>
   1e5d4:	cmn	r0, #-1073741823	; 0xc0000001
   1e5d8:	mov	r5, r0
   1e5dc:	bhi	1e630 <__assert_fail@plt+0xc310>
   1e5e0:	cmp	r0, #0
   1e5e4:	str	r0, [r4, #8]
   1e5e8:	beq	1e638 <__assert_fail@plt+0xc318>
   1e5ec:	mov	r1, #8
   1e5f0:	bl	11d2c <calloc@plt>
   1e5f4:	cmp	r0, #0
   1e5f8:	str	r0, [r4]
   1e5fc:	beq	1e638 <__assert_fail@plt+0xc318>
   1e600:	ldr	r3, [sp, #24]
   1e604:	mov	r2, #0
   1e608:	add	r5, r0, r5, lsl #3
   1e60c:	str	r8, [r4, #24]
   1e610:	str	r5, [r4, #4]
   1e614:	mov	r0, r4
   1e618:	str	r6, [r4, #28]
   1e61c:	str	r3, [r4, #32]
   1e620:	str	r2, [r4, #12]
   1e624:	str	r2, [r4, #16]
   1e628:	str	r2, [r4, #36]	; 0x24
   1e62c:	pop	{r4, r5, r6, r7, r8, pc}
   1e630:	mov	r3, #0
   1e634:	str	r3, [r4, #8]
   1e638:	mov	r0, r4
   1e63c:	bl	11dec <free@plt>
   1e640:	mov	r0, #0
   1e644:	pop	{r4, r5, r6, r7, r8, pc}
   1e648:	ldr	r6, [pc, #40]	; 1e678 <__assert_fail@plt+0xc358>
   1e64c:	add	r6, pc, r6
   1e650:	b	1e56c <__assert_fail@plt+0xc24c>
   1e654:	ldr	r8, [pc, #32]	; 1e67c <__assert_fail@plt+0xc35c>
   1e658:	add	r8, pc, r8
   1e65c:	b	1e564 <__assert_fail@plt+0xc244>
   1e660:	ldr	r5, [pc, #24]	; 1e680 <__assert_fail@plt+0xc360>
   1e664:	add	r5, pc, r5
   1e668:	b	1e584 <__assert_fail@plt+0xc264>
   1e66c:	mov	r0, r4
   1e670:	pop	{r4, r5, r6, r7, r8, pc}
   1e674:	svcmi	0x00800000
   1e678:			; <UNDEFINED> instruction: 0xfffff6c4
   1e67c:			; <UNDEFINED> instruction: 0xfffff6a4
   1e680:	andeq	r8, r0, ip, asr #20
   1e684:	push	{r4, r5, r6, r7, r8, lr}
   1e688:	mov	r5, r0
   1e68c:	ldr	r7, [r0]
   1e690:	ldr	r3, [r0, #4]
   1e694:	cmp	r7, r3
   1e698:	addcc	r7, r7, #8
   1e69c:	movcc	r6, #0
   1e6a0:	bcs	1e720 <__assert_fail@plt+0xc400>
   1e6a4:	ldr	r2, [r7, #-8]
   1e6a8:	mov	r8, r7
   1e6ac:	cmp	r2, #0
   1e6b0:	beq	1e714 <__assert_fail@plt+0xc3f4>
   1e6b4:	ldr	r4, [r7, #-4]
   1e6b8:	cmp	r4, #0
   1e6bc:	beq	1e6f4 <__assert_fail@plt+0xc3d4>
   1e6c0:	ldr	r3, [r5, #32]
   1e6c4:	cmp	r3, #0
   1e6c8:	beq	1e6d4 <__assert_fail@plt+0xc3b4>
   1e6cc:	ldr	r0, [r4]
   1e6d0:	blx	r3
   1e6d4:	ldr	r3, [r4, #4]
   1e6d8:	str	r6, [r4]
   1e6dc:	ldr	r2, [r5, #36]	; 0x24
   1e6e0:	cmp	r3, #0
   1e6e4:	str	r2, [r4, #4]
   1e6e8:	str	r4, [r5, #36]	; 0x24
   1e6ec:	mov	r4, r3
   1e6f0:	bne	1e6c0 <__assert_fail@plt+0xc3a0>
   1e6f4:	ldr	r3, [r5, #32]
   1e6f8:	cmp	r3, #0
   1e6fc:	beq	1e708 <__assert_fail@plt+0xc3e8>
   1e700:	ldr	r0, [r7, #-8]
   1e704:	blx	r3
   1e708:	str	r6, [r7, #-8]
   1e70c:	str	r6, [r7, #-4]
   1e710:	ldr	r3, [r5, #4]
   1e714:	cmp	r3, r8
   1e718:	add	r7, r7, #8
   1e71c:	bhi	1e6a4 <__assert_fail@plt+0xc384>
   1e720:	mov	r3, #0
   1e724:	str	r3, [r5, #12]
   1e728:	str	r3, [r5, #16]
   1e72c:	pop	{r4, r5, r6, r7, r8, pc}
   1e730:	push	{r3, r4, r5, r6, r7, lr}
   1e734:	mov	r5, r0
   1e738:	ldr	r3, [r0, #32]
   1e73c:	cmp	r3, #0
   1e740:	beq	1e750 <__assert_fail@plt+0xc430>
   1e744:	ldr	r3, [r0, #16]
   1e748:	cmp	r3, #0
   1e74c:	bne	1e7cc <__assert_fail@plt+0xc4ac>
   1e750:	ldr	r3, [r5, #4]
   1e754:	ldr	r6, [r5]
   1e758:	cmp	r6, r3
   1e75c:	bcs	1e798 <__assert_fail@plt+0xc478>
   1e760:	add	r6, r6, #8
   1e764:	ldr	r0, [r6, #-4]
   1e768:	mov	r7, r6
   1e76c:	cmp	r0, #0
   1e770:	beq	1e78c <__assert_fail@plt+0xc46c>
   1e774:	ldr	r4, [r0, #4]
   1e778:	bl	11dec <free@plt>
   1e77c:	cmp	r4, #0
   1e780:	mov	r0, r4
   1e784:	bne	1e774 <__assert_fail@plt+0xc454>
   1e788:	ldr	r3, [r5, #4]
   1e78c:	cmp	r7, r3
   1e790:	add	r6, r6, #8
   1e794:	bcc	1e764 <__assert_fail@plt+0xc444>
   1e798:	ldr	r0, [r5, #36]	; 0x24
   1e79c:	cmp	r0, #0
   1e7a0:	beq	1e7b8 <__assert_fail@plt+0xc498>
   1e7a4:	ldr	r4, [r0, #4]
   1e7a8:	bl	11dec <free@plt>
   1e7ac:	cmp	r4, #0
   1e7b0:	mov	r0, r4
   1e7b4:	bne	1e7a4 <__assert_fail@plt+0xc484>
   1e7b8:	ldr	r0, [r5]
   1e7bc:	bl	11dec <free@plt>
   1e7c0:	mov	r0, r5
   1e7c4:	pop	{r3, r4, r5, r6, r7, lr}
   1e7c8:	b	11dec <free@plt>
   1e7cc:	ldr	r6, [r0]
   1e7d0:	ldr	r3, [r0, #4]
   1e7d4:	cmp	r6, r3
   1e7d8:	bcs	1e798 <__assert_fail@plt+0xc478>
   1e7dc:	ldr	r0, [r6]
   1e7e0:	cmp	r0, #0
   1e7e4:	movne	r4, r6
   1e7e8:	bne	1e7f4 <__assert_fail@plt+0xc4d4>
   1e7ec:	b	1e80c <__assert_fail@plt+0xc4ec>
   1e7f0:	ldr	r0, [r4]
   1e7f4:	ldr	r3, [r5, #32]
   1e7f8:	blx	r3
   1e7fc:	ldr	r4, [r4, #4]
   1e800:	cmp	r4, #0
   1e804:	bne	1e7f0 <__assert_fail@plt+0xc4d0>
   1e808:	ldr	r3, [r5, #4]
   1e80c:	add	r6, r6, #8
   1e810:	cmp	r3, r6
   1e814:	bhi	1e7dc <__assert_fail@plt+0xc4bc>
   1e818:	b	1e754 <__assert_fail@plt+0xc434>
   1e81c:	ldr	r3, [pc, #392]	; 1e9ac <__assert_fail@plt+0xc68c>
   1e820:	ldr	r2, [pc, #392]	; 1e9b0 <__assert_fail@plt+0xc690>
   1e824:	add	r3, pc, r3
   1e828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e82c:	sub	sp, sp, #52	; 0x34
   1e830:	ldr	r5, [r0, #20]
   1e834:	mov	r4, r0
   1e838:	ldr	r6, [r3, r2]
   1e83c:	vldr	s15, [r5, #8]
   1e840:	ldrb	r2, [r5, #16]
   1e844:	ldr	r3, [r6]
   1e848:	cmp	r2, #0
   1e84c:	str	r3, [sp, #44]	; 0x2c
   1e850:	bne	1e878 <__assert_fail@plt+0xc558>
   1e854:	vmov	s14, r1
   1e858:	vcvt.f32.u32	s13, s14
   1e85c:	vldr	s14, [pc, #324]	; 1e9a8 <__assert_fail@plt+0xc688>
   1e860:	vdiv.f32	s15, s13, s15
   1e864:	vcmpe.f32	s15, s14
   1e868:	vmrs	APSR_nzcv, fpscr
   1e86c:	bge	1e970 <__assert_fail@plt+0xc650>
   1e870:	vcvt.u32.f32	s15, s15
   1e874:	vmov	r1, s15
   1e878:	mov	r0, r1
   1e87c:	bl	1dc58 <__assert_fail@plt+0xb938>
   1e880:	sub	r3, r0, #1
   1e884:	mov	r7, r0
   1e888:	cmn	r3, #-1073741822	; 0xc0000002
   1e88c:	bhi	1e970 <__assert_fail@plt+0xc650>
   1e890:	ldr	r3, [r4, #8]
   1e894:	cmp	r3, r0
   1e898:	beq	1e950 <__assert_fail@plt+0xc630>
   1e89c:	mov	r1, #8
   1e8a0:	bl	11d2c <calloc@plt>
   1e8a4:	cmp	r0, #0
   1e8a8:	mov	r3, r0
   1e8ac:	str	r0, [sp, #4]
   1e8b0:	beq	1e970 <__assert_fail@plt+0xc650>
   1e8b4:	ldr	fp, [r4, #24]
   1e8b8:	add	r8, sp, #4
   1e8bc:	ldr	sl, [r4, #28]
   1e8c0:	mov	ip, #0
   1e8c4:	ldr	r9, [r4, #32]
   1e8c8:	mov	r0, r8
   1e8cc:	ldr	lr, [r4, #36]	; 0x24
   1e8d0:	mov	r2, ip
   1e8d4:	mov	r1, r4
   1e8d8:	add	r3, r3, r7, lsl #3
   1e8dc:	str	r5, [sp, #24]
   1e8e0:	str	r7, [sp, #12]
   1e8e4:	str	r3, [sp, #8]
   1e8e8:	str	fp, [sp, #28]
   1e8ec:	str	sl, [sp, #32]
   1e8f0:	str	r9, [sp, #36]	; 0x24
   1e8f4:	str	lr, [sp, #40]	; 0x28
   1e8f8:	str	ip, [sp, #16]
   1e8fc:	str	ip, [sp, #20]
   1e900:	bl	1df18 <__assert_fail@plt+0xbbf8>
   1e904:	subs	r5, r0, #0
   1e908:	bne	1e978 <__assert_fail@plt+0xc658>
   1e90c:	ldr	r3, [sp, #40]	; 0x28
   1e910:	mov	r0, r4
   1e914:	mov	r1, r8
   1e918:	mov	r2, #1
   1e91c:	str	r3, [r4, #36]	; 0x24
   1e920:	bl	1df18 <__assert_fail@plt+0xbbf8>
   1e924:	cmp	r0, #0
   1e928:	beq	1e9a4 <__assert_fail@plt+0xc684>
   1e92c:	mov	r0, r4
   1e930:	mov	r1, r8
   1e934:	mov	r2, r5
   1e938:	bl	1df18 <__assert_fail@plt+0xbbf8>
   1e93c:	cmp	r0, #0
   1e940:	beq	1e9a4 <__assert_fail@plt+0xc684>
   1e944:	ldr	r0, [sp, #4]
   1e948:	bl	11dec <free@plt>
   1e94c:	b	1e954 <__assert_fail@plt+0xc634>
   1e950:	mov	r5, #1
   1e954:	ldr	r1, [sp, #44]	; 0x2c
   1e958:	mov	r0, r5
   1e95c:	ldr	r3, [r6]
   1e960:	cmp	r1, r3
   1e964:	bne	1e9a0 <__assert_fail@plt+0xc680>
   1e968:	add	sp, sp, #52	; 0x34
   1e96c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e970:	mov	r5, #0
   1e974:	b	1e954 <__assert_fail@plt+0xc634>
   1e978:	ldr	r0, [r4]
   1e97c:	bl	11dec <free@plt>
   1e980:	add	r0, sp, #8
   1e984:	ldr	ip, [sp, #4]
   1e988:	ldm	r0, {r0, r1, r2}
   1e98c:	ldr	r3, [sp, #40]	; 0x28
   1e990:	str	ip, [r4]
   1e994:	stmib	r4, {r0, r1, r2}
   1e998:	str	r3, [r4, #36]	; 0x24
   1e99c:	b	1e954 <__assert_fail@plt+0xc634>
   1e9a0:	bl	11ed0 <__stack_chk_fail@plt>
   1e9a4:	bl	122fc <abort@plt>
   1e9a8:	svcmi	0x00800000
   1e9ac:	ldrdeq	r9, [r1], -r4
   1e9b0:	andeq	r0, r0, ip, lsl r2
   1e9b4:	ldr	r3, [pc, #428]	; 1eb68 <__assert_fail@plt+0xc848>
   1e9b8:	ldr	ip, [pc, #428]	; 1eb6c <__assert_fail@plt+0xc84c>
   1e9bc:	add	r3, pc, r3
   1e9c0:	push	{r4, r5, r6, r7, r8, lr}
   1e9c4:	subs	r8, r1, #0
   1e9c8:	ldr	r4, [r3, ip]
   1e9cc:	sub	sp, sp, #8
   1e9d0:	mov	r5, r2
   1e9d4:	mov	r6, r0
   1e9d8:	ldr	r3, [r4]
   1e9dc:	str	r3, [sp, #4]
   1e9e0:	beq	1eb20 <__assert_fail@plt+0xc800>
   1e9e4:	mov	r3, #0
   1e9e8:	mov	r2, sp
   1e9ec:	bl	1dd5c <__assert_fail@plt+0xba3c>
   1e9f0:	cmp	r0, #0
   1e9f4:	beq	1ea20 <__assert_fail@plt+0xc700>
   1e9f8:	cmp	r5, #0
   1e9fc:	moveq	r0, r5
   1ea00:	strne	r0, [r5]
   1ea04:	movne	r0, #0
   1ea08:	ldr	r2, [sp, #4]
   1ea0c:	ldr	r3, [r4]
   1ea10:	cmp	r2, r3
   1ea14:	bne	1eb60 <__assert_fail@plt+0xc840>
   1ea18:	add	sp, sp, #8
   1ea1c:	pop	{r4, r5, r6, r7, r8, pc}
   1ea20:	vldr	s11, [r6, #8]
   1ea24:	vcvt.f32.u32	s14, s11
   1ea28:	ldr	r3, [r6, #20]
   1ea2c:	vldr	s15, [r3, #8]
   1ea30:	vldr	s13, [r6, #12]
   1ea34:	vmul.f32	s15, s14, s15
   1ea38:	vcvt.f32.u32	s14, s13
   1ea3c:	vcmpe.f32	s14, s15
   1ea40:	vmrs	APSR_nzcv, fpscr
   1ea44:	bgt	1ea94 <__assert_fail@plt+0xc774>
   1ea48:	ldr	r3, [sp]
   1ea4c:	ldr	r2, [r3]
   1ea50:	cmp	r2, #0
   1ea54:	beq	1eb24 <__assert_fail@plt+0xc804>
   1ea58:	ldr	r3, [r6, #36]	; 0x24
   1ea5c:	cmp	r3, #0
   1ea60:	beq	1eb48 <__assert_fail@plt+0xc828>
   1ea64:	ldr	r2, [r3, #4]
   1ea68:	str	r2, [r6, #36]	; 0x24
   1ea6c:	str	r8, [r3]
   1ea70:	mov	r0, #1
   1ea74:	ldr	r2, [sp]
   1ea78:	ldr	r1, [r2, #4]
   1ea7c:	str	r1, [r3, #4]
   1ea80:	str	r3, [r2, #4]
   1ea84:	ldr	r3, [r6, #16]
   1ea88:	add	r3, r3, r0
   1ea8c:	str	r3, [r6, #16]
   1ea90:	b	1ea08 <__assert_fail@plt+0xc6e8>
   1ea94:	add	r0, r6, #20
   1ea98:	bl	1de58 <__assert_fail@plt+0xbb38>
   1ea9c:	vldr	s11, [r6, #8]
   1eaa0:	vcvt.f32.u32	s15, s11
   1eaa4:	ldr	r3, [r6, #20]
   1eaa8:	vldr	s14, [r3, #8]
   1eaac:	vldr	s11, [r6, #12]
   1eab0:	vmul.f32	s13, s14, s15
   1eab4:	vcvt.f32.u32	s12, s11
   1eab8:	vcmpe.f32	s12, s13
   1eabc:	vmrs	APSR_nzcv, fpscr
   1eac0:	ble	1ea48 <__assert_fail@plt+0xc728>
   1eac4:	ldrb	r2, [r3, #16]
   1eac8:	cmp	r2, #0
   1eacc:	vldreq	s13, [r3, #12]
   1ead0:	vldrne	s14, [r3, #12]
   1ead4:	vmuleq.f32	s15, s15, s13
   1ead8:	vmul.f32	s15, s14, s15
   1eadc:	vldr	s14, [pc, #128]	; 1eb64 <__assert_fail@plt+0xc844>
   1eae0:	vcmpe.f32	s15, s14
   1eae4:	vmrs	APSR_nzcv, fpscr
   1eae8:	bge	1eb58 <__assert_fail@plt+0xc838>
   1eaec:	vcvt.u32.f32	s15, s15
   1eaf0:	mov	r0, r6
   1eaf4:	vmov	r1, s15
   1eaf8:	bl	1e81c <__assert_fail@plt+0xc4fc>
   1eafc:	cmp	r0, #0
   1eb00:	beq	1eb58 <__assert_fail@plt+0xc838>
   1eb04:	mov	r2, sp
   1eb08:	mov	r0, r6
   1eb0c:	mov	r1, r8
   1eb10:	mov	r3, #0
   1eb14:	bl	1dd5c <__assert_fail@plt+0xba3c>
   1eb18:	cmp	r0, #0
   1eb1c:	beq	1ea48 <__assert_fail@plt+0xc728>
   1eb20:	bl	122fc <abort@plt>
   1eb24:	str	r8, [r3]
   1eb28:	mov	r0, #1
   1eb2c:	ldr	r2, [r6, #16]
   1eb30:	ldr	r3, [r6, #12]
   1eb34:	add	r2, r2, r0
   1eb38:	str	r2, [r6, #16]
   1eb3c:	add	r3, r3, r0
   1eb40:	str	r3, [r6, #12]
   1eb44:	b	1ea08 <__assert_fail@plt+0xc6e8>
   1eb48:	mov	r0, #8
   1eb4c:	bl	1205c <malloc@plt>
   1eb50:	subs	r3, r0, #0
   1eb54:	bne	1ea6c <__assert_fail@plt+0xc74c>
   1eb58:	mvn	r0, #0
   1eb5c:	b	1ea08 <__assert_fail@plt+0xc6e8>
   1eb60:	bl	11ed0 <__stack_chk_fail@plt>
   1eb64:	svcmi	0x00800000
   1eb68:	andeq	r9, r1, ip, lsr r6
   1eb6c:	andeq	r0, r0, ip, lsl r2
   1eb70:	b	1e9b4 <__assert_fail@plt+0xc694>
   1eb74:	ldr	r3, [pc, #100]	; 1ebe0 <__assert_fail@plt+0xc8c0>
   1eb78:	ldr	ip, [pc, #100]	; 1ebe4 <__assert_fail@plt+0xc8c4>
   1eb7c:	add	r3, pc, r3
   1eb80:	push	{r4, r5, lr}
   1eb84:	sub	sp, sp, #12
   1eb88:	ldr	r4, [r3, ip]
   1eb8c:	mov	r5, r1
   1eb90:	mov	r2, sp
   1eb94:	ldr	r3, [r4]
   1eb98:	str	r3, [sp, #4]
   1eb9c:	bl	1e9b4 <__assert_fail@plt+0xc694>
   1eba0:	cmn	r0, #1
   1eba4:	beq	1ebd4 <__assert_fail@plt+0xc8b4>
   1eba8:	cmp	r0, #0
   1ebac:	movne	r0, r5
   1ebb0:	beq	1ebcc <__assert_fail@plt+0xc8ac>
   1ebb4:	ldr	r2, [sp, #4]
   1ebb8:	ldr	r3, [r4]
   1ebbc:	cmp	r2, r3
   1ebc0:	bne	1ebdc <__assert_fail@plt+0xc8bc>
   1ebc4:	add	sp, sp, #12
   1ebc8:	pop	{r4, r5, pc}
   1ebcc:	ldr	r0, [sp]
   1ebd0:	b	1ebb4 <__assert_fail@plt+0xc894>
   1ebd4:	mov	r0, #0
   1ebd8:	b	1ebb4 <__assert_fail@plt+0xc894>
   1ebdc:	bl	11ed0 <__stack_chk_fail@plt>
   1ebe0:	andeq	r9, r1, ip, ror r4
   1ebe4:	andeq	r0, r0, ip, lsl r2
   1ebe8:	ldr	ip, [pc, #304]	; 1ed20 <__assert_fail@plt+0xca00>
   1ebec:	mov	r3, #1
   1ebf0:	push	{r4, r5, r6, r7, lr}
   1ebf4:	add	ip, pc, ip
   1ebf8:	ldr	lr, [pc, #292]	; 1ed24 <__assert_fail@plt+0xca04>
   1ebfc:	sub	sp, sp, #12
   1ec00:	mov	r4, r0
   1ec04:	mov	r2, sp
   1ec08:	ldr	r5, [ip, lr]
   1ec0c:	ldr	ip, [r5]
   1ec10:	str	ip, [sp, #4]
   1ec14:	bl	1dd5c <__assert_fail@plt+0xba3c>
   1ec18:	subs	r6, r0, #0
   1ec1c:	beq	1ec3c <__assert_fail@plt+0xc91c>
   1ec20:	ldr	r3, [sp]
   1ec24:	ldr	r2, [r4, #16]
   1ec28:	sub	r2, r2, #1
   1ec2c:	str	r2, [r4, #16]
   1ec30:	ldr	r3, [r3]
   1ec34:	cmp	r3, #0
   1ec38:	beq	1ec58 <__assert_fail@plt+0xc938>
   1ec3c:	ldr	r2, [sp, #4]
   1ec40:	mov	r0, r6
   1ec44:	ldr	r3, [r5]
   1ec48:	cmp	r2, r3
   1ec4c:	bne	1ed1c <__assert_fail@plt+0xc9fc>
   1ec50:	add	sp, sp, #12
   1ec54:	pop	{r4, r5, r6, r7, pc}
   1ec58:	vldr	s12, [r4, #8]
   1ec5c:	vcvt.f32.u32	s14, s12
   1ec60:	ldr	r3, [r4, #12]
   1ec64:	ldr	r2, [r4, #20]
   1ec68:	sub	r3, r3, #1
   1ec6c:	str	r3, [r4, #12]
   1ec70:	vldr	s15, [r2]
   1ec74:	vmov	s13, r3
   1ec78:	vmul.f32	s15, s14, s15
   1ec7c:	vcvt.f32.u32	s14, s13
   1ec80:	vcmpe.f32	s14, s15
   1ec84:	vmrs	APSR_nzcv, fpscr
   1ec88:	bpl	1ec3c <__assert_fail@plt+0xc91c>
   1ec8c:	add	r0, r4, #20
   1ec90:	bl	1de58 <__assert_fail@plt+0xbb38>
   1ec94:	vldr	s12, [r4, #8]
   1ec98:	vcvt.f32.u32	s15, s12
   1ec9c:	ldr	r3, [r4, #20]
   1eca0:	vldr	s14, [r3]
   1eca4:	vldr	s12, [r4, #12]
   1eca8:	vmul.f32	s14, s15, s14
   1ecac:	vcvt.f32.u32	s13, s12
   1ecb0:	vcmpe.f32	s13, s14
   1ecb4:	vmrs	APSR_nzcv, fpscr
   1ecb8:	bpl	1ec3c <__assert_fail@plt+0xc91c>
   1ecbc:	vldr	s14, [r3, #4]
   1ecc0:	vmul.f32	s15, s15, s14
   1ecc4:	ldrb	r2, [r3, #16]
   1ecc8:	mov	r0, r4
   1eccc:	cmp	r2, #0
   1ecd0:	vldreq	s14, [r3, #8]
   1ecd4:	vmuleq.f32	s15, s15, s14
   1ecd8:	vcvt.u32.f32	s15, s15
   1ecdc:	vmov	r1, s15
   1ece0:	bl	1e81c <__assert_fail@plt+0xc4fc>
   1ece4:	cmp	r0, #0
   1ece8:	bne	1ec3c <__assert_fail@plt+0xc91c>
   1ecec:	ldr	r0, [r4, #36]	; 0x24
   1ecf0:	cmp	r0, #0
   1ecf4:	bne	1ed00 <__assert_fail@plt+0xc9e0>
   1ecf8:	b	1ed10 <__assert_fail@plt+0xc9f0>
   1ecfc:	mov	r0, r7
   1ed00:	ldr	r7, [r0, #4]
   1ed04:	bl	11dec <free@plt>
   1ed08:	cmp	r7, #0
   1ed0c:	bne	1ecfc <__assert_fail@plt+0xc9dc>
   1ed10:	mov	r3, #0
   1ed14:	str	r3, [r4, #36]	; 0x24
   1ed18:	b	1ec3c <__assert_fail@plt+0xc91c>
   1ed1c:	bl	11ed0 <__stack_chk_fail@plt>
   1ed20:	andeq	r9, r1, r4, lsl #8
   1ed24:	andeq	r0, r0, ip, lsl r2
   1ed28:	mov	r0, #0
   1ed2c:	bx	lr
   1ed30:	push	{r4, r5, r6, lr}
   1ed34:	mov	r6, r0
   1ed38:	mov	r0, #16
   1ed3c:	mov	r5, r1
   1ed40:	bl	226ec <__assert_fail@plt+0x103cc>
   1ed44:	cmp	r5, #0
   1ed48:	mov	r4, r0
   1ed4c:	beq	1ed60 <__assert_fail@plt+0xca40>
   1ed50:	cmn	r5, #-1073741823	; 0xc0000001
   1ed54:	bhi	1ed9c <__assert_fail@plt+0xca7c>
   1ed58:	lsl	r0, r5, #2
   1ed5c:	b	1ed68 <__assert_fail@plt+0xca48>
   1ed60:	mov	r0, #4
   1ed64:	mov	r5, #1
   1ed68:	bl	226ec <__assert_fail@plt+0x103cc>
   1ed6c:	cmp	r6, #0
   1ed70:	mov	r3, #0
   1ed74:	str	r3, [r4, #8]
   1ed78:	stm	r4, {r0, r5}
   1ed7c:	str	r3, [r0]
   1ed80:	beq	1ed90 <__assert_fail@plt+0xca70>
   1ed84:	str	r6, [r4, #12]
   1ed88:	mov	r0, r4
   1ed8c:	pop	{r4, r5, r6, pc}
   1ed90:	ldr	r6, [pc, #8]	; 1eda0 <__assert_fail@plt+0xca80>
   1ed94:	add	r6, pc, r6
   1ed98:	b	1ed84 <__assert_fail@plt+0xca64>
   1ed9c:	bl	22900 <__assert_fail@plt+0x105e0>
   1eda0:			; <UNDEFINED> instruction: 0xffffff8c
   1eda4:	push	{r4, lr}
   1eda8:	mov	r4, r0
   1edac:	ldr	r0, [r0]
   1edb0:	bl	11dec <free@plt>
   1edb4:	mov	r0, r4
   1edb8:	pop	{r4, lr}
   1edbc:	b	11dec <free@plt>
   1edc0:	push	{r4, r5, r6, r7, r8, lr}
   1edc4:	mov	r5, r1
   1edc8:	ldr	r3, [r0, #4]
   1edcc:	mov	r4, r0
   1edd0:	ldr	r2, [r0, #8]
   1edd4:	sub	r1, r3, #1
   1edd8:	cmp	r1, r2
   1eddc:	ldrhi	r1, [r0]
   1ede0:	bhi	1ee20 <__assert_fail@plt+0xcb00>
   1ede4:	ldr	r0, [r0]
   1ede8:	cmp	r0, #0
   1edec:	beq	1ee8c <__assert_fail@plt+0xcb6c>
   1edf0:	movw	r2, #43689	; 0xaaa9
   1edf4:	movt	r2, #10922	; 0x2aaa
   1edf8:	cmp	r3, r2
   1edfc:	addls	r2, r3, #1
   1ee00:	addls	r3, r3, r2, lsr #1
   1ee04:	bhi	1eea0 <__assert_fail@plt+0xcb80>
   1ee08:	lsl	r1, r3, #2
   1ee0c:	str	r3, [r4, #4]
   1ee10:	bl	22744 <__assert_fail@plt+0x10424>
   1ee14:	ldr	r2, [r4, #8]
   1ee18:	mov	r1, r0
   1ee1c:	str	r0, [r4]
   1ee20:	add	r3, r2, #1
   1ee24:	str	r3, [r4, #8]
   1ee28:	str	r5, [r1, r3, lsl #2]
   1ee2c:	ldr	r5, [r4, #8]
   1ee30:	ldr	r6, [r4]
   1ee34:	cmp	r5, #1
   1ee38:	ldr	r8, [r4, #12]
   1ee3c:	ldr	r7, [r6, r5, lsl #2]
   1ee40:	bne	1ee5c <__assert_fail@plt+0xcb3c>
   1ee44:	b	1ee7c <__assert_fail@plt+0xcb5c>
   1ee48:	ldr	r3, [r6, r4, lsl #2]
   1ee4c:	cmp	r4, #1
   1ee50:	str	r3, [r6, r5, lsl #2]
   1ee54:	beq	1ee7c <__assert_fail@plt+0xcb5c>
   1ee58:	mov	r5, r4
   1ee5c:	lsr	r4, r5, #1
   1ee60:	mov	r1, r7
   1ee64:	ldr	r0, [r6, r4, lsl #2]
   1ee68:	blx	r8
   1ee6c:	cmp	r0, #0
   1ee70:	ble	1ee48 <__assert_fail@plt+0xcb28>
   1ee74:	lsl	r5, r5, #2
   1ee78:	b	1ee80 <__assert_fail@plt+0xcb60>
   1ee7c:	mov	r5, #4
   1ee80:	str	r7, [r6, r5]
   1ee84:	mov	r0, #0
   1ee88:	pop	{r4, r5, r6, r7, r8, pc}
   1ee8c:	cmp	r3, #0
   1ee90:	moveq	r1, #64	; 0x40
   1ee94:	moveq	r3, #16
   1ee98:	beq	1ee0c <__assert_fail@plt+0xcaec>
   1ee9c:	b	1ee08 <__assert_fail@plt+0xcae8>
   1eea0:	bl	22900 <__assert_fail@plt+0x105e0>
   1eea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eea8:	sub	sp, sp, #20
   1eeac:	ldr	r3, [r0, #8]
   1eeb0:	cmp	r3, #0
   1eeb4:	moveq	r0, r3
   1eeb8:	beq	1ef74 <__assert_fail@plt+0xcc54>
   1eebc:	ldr	r2, [r0]
   1eec0:	sub	r1, r3, #1
   1eec4:	ldr	ip, [r2, #4]
   1eec8:	str	r1, [r0, #8]
   1eecc:	ldr	r3, [r2, r3, lsl #2]
   1eed0:	str	ip, [sp, #12]
   1eed4:	str	r3, [r2, #4]
   1eed8:	ldr	r8, [r0, #8]
   1eedc:	ldr	fp, [r0]
   1eee0:	ldr	r7, [r0, #12]
   1eee4:	lsrs	sl, r8, #1
   1eee8:	ldr	r9, [fp, #4]
   1eeec:	addeq	r6, fp, #4
   1eef0:	beq	1ef6c <__assert_fail@plt+0xcc4c>
   1eef4:	mov	r5, #1
   1eef8:	b	1ef24 <__assert_fail@plt+0xcc04>
   1eefc:	ldr	r0, [r6]
   1ef00:	mov	r1, r9
   1ef04:	blx	r7
   1ef08:	cmp	r0, #0
   1ef0c:	ble	1ef68 <__assert_fail@plt+0xcc48>
   1ef10:	ldr	r2, [r6]
   1ef14:	cmp	r4, sl
   1ef18:	str	r2, [fp, r5, lsl #2]
   1ef1c:	mov	r5, r4
   1ef20:	bhi	1ef6c <__assert_fail@plt+0xcc4c>
   1ef24:	lsl	r4, r5, #1
   1ef28:	add	r6, fp, r5, lsl #3
   1ef2c:	cmp	r8, r4
   1ef30:	bls	1eefc <__assert_fail@plt+0xcbdc>
   1ef34:	add	r2, r4, #1
   1ef38:	ldr	r0, [fp, r5, lsl #3]
   1ef3c:	ldr	r1, [fp, r2, lsl #2]
   1ef40:	add	ip, fp, r2, lsl #2
   1ef44:	str	r2, [sp, #8]
   1ef48:	str	ip, [sp, #4]
   1ef4c:	blx	r7
   1ef50:	ldr	r2, [sp, #8]
   1ef54:	ldr	ip, [sp, #4]
   1ef58:	cmp	r0, #0
   1ef5c:	movlt	r4, r2
   1ef60:	movlt	r6, ip
   1ef64:	b	1eefc <__assert_fail@plt+0xcbdc>
   1ef68:	add	r6, fp, r5, lsl #2
   1ef6c:	ldr	r0, [sp, #12]
   1ef70:	str	r9, [r6]
   1ef74:	add	sp, sp, #20
   1ef78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef7c:	subs	r3, r0, #0
   1ef80:	mov	r2, #0
   1ef84:	push	{r4}		; (str r4, [sp, #-4]!)
   1ef88:	add	r1, r1, #10
   1ef8c:	strb	r2, [r1, #1]
   1ef90:	movw	r4, #26215	; 0x6667
   1ef94:	movt	r4, #26214	; 0x6666
   1ef98:	blt	1efcc <__assert_fail@plt+0xccac>
   1ef9c:	smull	r2, ip, r4, r3
   1efa0:	asr	r2, r3, #31
   1efa4:	mov	r0, r1
   1efa8:	rsb	r2, r2, ip, asr #2
   1efac:	add	ip, r2, r2, lsl #2
   1efb0:	sub	ip, r3, ip, lsl #1
   1efb4:	subs	r3, r2, #0
   1efb8:	add	r2, ip, #48	; 0x30
   1efbc:	strb	r2, [r1], #-1
   1efc0:	bne	1ef9c <__assert_fail@plt+0xcc7c>
   1efc4:	pop	{r4}		; (ldr r4, [sp], #4)
   1efc8:	bx	lr
   1efcc:	smull	r2, r0, r4, r3
   1efd0:	asr	r2, r3, #31
   1efd4:	mov	ip, r1
   1efd8:	rsb	r2, r2, r0, asr #2
   1efdc:	add	r0, r2, r2, lsl #2
   1efe0:	sub	r0, r3, r0, lsl #1
   1efe4:	subs	r3, r2, #0
   1efe8:	rsb	r2, r0, #48	; 0x30
   1efec:	strb	r2, [r1], #-1
   1eff0:	bne	1efcc <__assert_fail@plt+0xccac>
   1eff4:	mov	r3, #45	; 0x2d
   1eff8:	strb	r3, [ip, #-1]
   1effc:	mov	r0, r1
   1f000:	pop	{r4}		; (ldr r4, [sp], #4)
   1f004:	bx	lr
   1f008:	movw	ip, #52429	; 0xcccd
   1f00c:	add	r2, r1, #9
   1f010:	movt	ip, #52428	; 0xcccc
   1f014:	mov	r3, #0
   1f018:	push	{r4}		; (str r4, [sp, #-4]!)
   1f01c:	strb	r3, [r1, #10]
   1f020:	umull	r1, r3, ip, r0
   1f024:	mov	r4, r2
   1f028:	lsr	r3, r3, #3
   1f02c:	add	r1, r3, r3, lsl #2
   1f030:	sub	r1, r0, r1, lsl #1
   1f034:	subs	r0, r3, #0
   1f038:	add	r3, r1, #48	; 0x30
   1f03c:	strb	r3, [r2], #-1
   1f040:	bne	1f020 <__assert_fail@plt+0xcd00>
   1f044:	mov	r0, r4
   1f048:	pop	{r4}		; (ldr r4, [sp], #4)
   1f04c:	bx	lr
   1f050:	push	{r3, r4, r5, r6, r7, lr}
   1f054:	add	r6, r2, #19
   1f058:	mov	r4, r0
   1f05c:	mov	r5, r1
   1f060:	mov	r3, #0
   1f064:	strb	r3, [r2, #20]
   1f068:	mov	r0, r4
   1f06c:	mov	r1, r5
   1f070:	mov	r2, #10
   1f074:	mov	r3, #0
   1f078:	bl	248bc <__assert_fail@plt+0x1259c>
   1f07c:	mov	r7, r6
   1f080:	mov	r0, r4
   1f084:	mov	r1, r5
   1f088:	mov	r3, #0
   1f08c:	add	ip, r2, #48	; 0x30
   1f090:	mov	r2, #10
   1f094:	strb	ip, [r6], #-1
   1f098:	bl	248bc <__assert_fail@plt+0x1259c>
   1f09c:	mov	r4, r0
   1f0a0:	mov	r5, r1
   1f0a4:	orrs	r3, r4, r5
   1f0a8:	bne	1f068 <__assert_fail@plt+0xcd48>
   1f0ac:	mov	r0, r7
   1f0b0:	pop	{r3, r4, r5, r6, r7, pc}
   1f0b4:	ldr	r3, [pc, #524]	; 1f2c8 <__assert_fail@plt+0xcfa8>
   1f0b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0bc:	mov	r4, r0
   1f0c0:	ldr	r0, [pc, #516]	; 1f2cc <__assert_fail@plt+0xcfac>
   1f0c4:	add	r3, pc, r3
   1f0c8:	sub	sp, sp, #28
   1f0cc:	add	r7, r4, r1
   1f0d0:	mov	fp, r2
   1f0d4:	ldr	r0, [r3, r0]
   1f0d8:	ldr	r3, [r0]
   1f0dc:	str	r0, [sp]
   1f0e0:	str	r3, [sp, #20]
   1f0e4:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   1f0e8:	cmp	r0, #1
   1f0ec:	bls	1f25c <__assert_fail@plt+0xcf3c>
   1f0f0:	cmp	r4, r7
   1f0f4:	bcs	1f2bc <__assert_fail@plt+0xcf9c>
   1f0f8:	mov	r5, #0
   1f0fc:	and	r9, fp, #2
   1f100:	add	r6, sp, #12
   1f104:	and	fp, fp, #1
   1f108:	add	r8, sp, #8
   1f10c:	str	fp, [sp, #4]
   1f110:	mov	sl, r5
   1f114:	b	1f13c <__assert_fail@plt+0xce1c>
   1f118:	cmp	r3, #37	; 0x25
   1f11c:	bcs	1f12c <__assert_fail@plt+0xce0c>
   1f120:	sub	r3, r3, #32
   1f124:	cmp	r3, #3
   1f128:	bhi	1f164 <__assert_fail@plt+0xce44>
   1f12c:	add	r4, r4, #1
   1f130:	add	r5, r5, #1
   1f134:	cmp	r7, r4
   1f138:	bls	1f24c <__assert_fail@plt+0xcf2c>
   1f13c:	ldrb	r3, [r4]
   1f140:	cmp	r3, #63	; 0x3f
   1f144:	bls	1f118 <__assert_fail@plt+0xcdf8>
   1f148:	cmp	r3, #65	; 0x41
   1f14c:	bcc	1f164 <__assert_fail@plt+0xce44>
   1f150:	cmp	r3, #95	; 0x5f
   1f154:	bls	1f12c <__assert_fail@plt+0xce0c>
   1f158:	sub	r3, r3, #97	; 0x61
   1f15c:	cmp	r3, #29
   1f160:	bls	1f12c <__assert_fail@plt+0xce0c>
   1f164:	str	sl, [r6]
   1f168:	str	sl, [r6, #4]
   1f16c:	b	1f19c <__assert_fail@plt+0xce7c>
   1f170:	movw	r2, #65535	; 0xffff
   1f174:	movt	r2, #32767	; 0x7fff
   1f178:	rsb	r2, r5, r2
   1f17c:	cmp	r0, r2
   1f180:	bgt	1f254 <__assert_fail@plt+0xcf34>
   1f184:	add	r5, r5, r0
   1f188:	mov	r0, r6
   1f18c:	add	r4, r4, fp
   1f190:	bl	11e64 <mbsinit@plt>
   1f194:	cmp	r0, #0
   1f198:	bne	1f134 <__assert_fail@plt+0xce14>
   1f19c:	mov	r0, r8
   1f1a0:	mov	r1, r4
   1f1a4:	rsb	r2, r4, r7
   1f1a8:	mov	r3, r6
   1f1ac:	bl	12014 <mbrtowc@plt>
   1f1b0:	cmn	r0, #1
   1f1b4:	mov	fp, r0
   1f1b8:	beq	1f204 <__assert_fail@plt+0xcee4>
   1f1bc:	cmn	r0, #2
   1f1c0:	beq	1f230 <__assert_fail@plt+0xcf10>
   1f1c4:	cmp	fp, #0
   1f1c8:	ldr	r0, [sp, #8]
   1f1cc:	moveq	fp, #1
   1f1d0:	bl	11db0 <wcwidth@plt>
   1f1d4:	cmp	r0, #0
   1f1d8:	bge	1f170 <__assert_fail@plt+0xce50>
   1f1dc:	cmp	r9, #0
   1f1e0:	bne	1f210 <__assert_fail@plt+0xcef0>
   1f1e4:	ldr	r0, [sp, #8]
   1f1e8:	bl	11f54 <iswcntrl@plt>
   1f1ec:	cmp	r0, #0
   1f1f0:	bne	1f188 <__assert_fail@plt+0xce68>
   1f1f4:	cmn	r5, #-2147483647	; 0x80000001
   1f1f8:	beq	1f254 <__assert_fail@plt+0xcf34>
   1f1fc:	add	r5, r5, #1
   1f200:	b	1f188 <__assert_fail@plt+0xce68>
   1f204:	ldr	r1, [sp, #4]
   1f208:	cmp	r1, #0
   1f20c:	beq	1f12c <__assert_fail@plt+0xce0c>
   1f210:	mvn	r0, #0
   1f214:	ldr	r1, [sp]
   1f218:	ldr	r2, [sp, #20]
   1f21c:	ldr	r3, [r1]
   1f220:	cmp	r2, r3
   1f224:	bne	1f2c4 <__assert_fail@plt+0xcfa4>
   1f228:	add	sp, sp, #28
   1f22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f230:	ldr	r2, [sp, #4]
   1f234:	cmp	r2, #0
   1f238:	bne	1f210 <__assert_fail@plt+0xcef0>
   1f23c:	mov	r4, r7
   1f240:	cmp	r7, r4
   1f244:	add	r5, r5, #1
   1f248:	bhi	1f13c <__assert_fail@plt+0xce1c>
   1f24c:	mov	r0, r5
   1f250:	b	1f214 <__assert_fail@plt+0xcef4>
   1f254:	mvn	r0, #-2147483648	; 0x80000000
   1f258:	b	1f214 <__assert_fail@plt+0xcef4>
   1f25c:	cmp	r4, r7
   1f260:	bcs	1f2bc <__assert_fail@plt+0xcf9c>
   1f264:	bl	120b0 <__ctype_b_loc@plt>
   1f268:	mov	r5, #0
   1f26c:	and	r1, fp, #2
   1f270:	ldr	r2, [r0]
   1f274:	b	1f28c <__assert_fail@plt+0xcf6c>
   1f278:	cmn	r5, #-2147483647	; 0x80000001
   1f27c:	beq	1f254 <__assert_fail@plt+0xcf34>
   1f280:	add	r5, r5, #1
   1f284:	cmp	r4, r7
   1f288:	beq	1f24c <__assert_fail@plt+0xcf2c>
   1f28c:	ldrb	r3, [r4], #1
   1f290:	lsl	r3, r3, #1
   1f294:	ldrh	r3, [r2, r3]
   1f298:	tst	r3, #16384	; 0x4000
   1f29c:	bne	1f278 <__assert_fail@plt+0xcf58>
   1f2a0:	cmp	r1, #0
   1f2a4:	bne	1f210 <__assert_fail@plt+0xcef0>
   1f2a8:	tst	r3, #2
   1f2ac:	bne	1f284 <__assert_fail@plt+0xcf64>
   1f2b0:	cmn	r5, #-2147483647	; 0x80000001
   1f2b4:	bne	1f280 <__assert_fail@plt+0xcf60>
   1f2b8:	b	1f24c <__assert_fail@plt+0xcf2c>
   1f2bc:	mov	r0, #0
   1f2c0:	b	1f214 <__assert_fail@plt+0xcef4>
   1f2c4:	bl	11ed0 <__stack_chk_fail@plt>
   1f2c8:	andeq	r8, r1, r4, lsr pc
   1f2cc:	andeq	r0, r0, ip, lsl r2
   1f2d0:	push	{r3, r4, r5, lr}
   1f2d4:	mov	r4, r1
   1f2d8:	mov	r5, r0
   1f2dc:	bl	120e0 <strlen@plt>
   1f2e0:	mov	r2, r4
   1f2e4:	mov	r1, r0
   1f2e8:	mov	r0, r5
   1f2ec:	pop	{r3, r4, r5, lr}
   1f2f0:	b	1f0b4 <__assert_fail@plt+0xcd94>
   1f2f4:	ldr	r3, [pc, #108]	; 1f368 <__assert_fail@plt+0xd048>
   1f2f8:	mov	r0, #0
   1f2fc:	ldr	ip, [pc, #104]	; 1f36c <__assert_fail@plt+0xd04c>
   1f300:	mov	r1, #128	; 0x80
   1f304:	add	r3, pc, r3
   1f308:	push	{r4, r5, lr}
   1f30c:	sub	sp, sp, #140	; 0x8c
   1f310:	ldr	r4, [r3, ip]
   1f314:	add	r5, sp, #4
   1f318:	mov	r2, r5
   1f31c:	ldr	r3, [r4]
   1f320:	str	r3, [sp, #132]	; 0x84
   1f324:	bl	122a8 <sched_getaffinity@plt>
   1f328:	cmp	r0, #0
   1f32c:	beq	1f34c <__assert_fail@plt+0xd02c>
   1f330:	mov	r0, #0
   1f334:	ldr	r2, [sp, #132]	; 0x84
   1f338:	ldr	r3, [r4]
   1f33c:	cmp	r2, r3
   1f340:	bne	1f364 <__assert_fail@plt+0xd044>
   1f344:	add	sp, sp, #140	; 0x8c
   1f348:	pop	{r4, r5, pc}
   1f34c:	mov	r1, r5
   1f350:	mov	r0, #128	; 0x80
   1f354:	bl	11e7c <__sched_cpucount@plt>
   1f358:	cmp	r0, #0
   1f35c:	beq	1f330 <__assert_fail@plt+0xd010>
   1f360:	b	1f334 <__assert_fail@plt+0xd014>
   1f364:	bl	11ed0 <__stack_chk_fail@plt>
   1f368:	strdeq	r8, [r1], -r4
   1f36c:	andeq	r0, r0, ip, lsl r2
   1f370:	ldr	r3, [pc, #336]	; 1f4c8 <__assert_fail@plt+0xd1a8>
   1f374:	cmp	r0, #2
   1f378:	ldr	r2, [pc, #332]	; 1f4cc <__assert_fail@plt+0xd1ac>
   1f37c:	add	r3, pc, r3
   1f380:	push	{r4, r5, lr}
   1f384:	sub	sp, sp, #12
   1f388:	ldr	r4, [r3, r2]
   1f38c:	ldr	r3, [r4]
   1f390:	str	r3, [sp, #4]
   1f394:	beq	1f3d8 <__assert_fail@plt+0xd0b8>
   1f398:	cmp	r0, #1
   1f39c:	beq	1f470 <__assert_fail@plt+0xd150>
   1f3a0:	mov	r0, #83	; 0x53
   1f3a4:	bl	11f00 <sysconf@plt>
   1f3a8:	cmp	r0, #1
   1f3ac:	mov	r5, r0
   1f3b0:	beq	1f4a4 <__assert_fail@plt+0xd184>
   1f3b4:	cmp	r5, #0
   1f3b8:	ble	1f48c <__assert_fail@plt+0xd16c>
   1f3bc:	mov	r0, r5
   1f3c0:	ldr	r2, [sp, #4]
   1f3c4:	ldr	r3, [r4]
   1f3c8:	cmp	r2, r3
   1f3cc:	bne	1f4c4 <__assert_fail@plt+0xd1a4>
   1f3d0:	add	sp, sp, #12
   1f3d4:	pop	{r4, r5, pc}
   1f3d8:	ldr	r0, [pc, #240]	; 1f4d0 <__assert_fail@plt+0xd1b0>
   1f3dc:	add	r0, pc, r0
   1f3e0:	bl	12044 <getenv@plt>
   1f3e4:	cmp	r0, #0
   1f3e8:	beq	1f470 <__assert_fail@plt+0xd150>
   1f3ec:	ldrb	r3, [r0]
   1f3f0:	cmp	r3, #0
   1f3f4:	beq	1f470 <__assert_fail@plt+0xd150>
   1f3f8:	sub	r2, r3, #9
   1f3fc:	cmp	r3, #32
   1f400:	cmpne	r2, #4
   1f404:	movhi	r2, #0
   1f408:	movls	r2, #1
   1f40c:	bls	1f494 <__assert_fail@plt+0xd174>
   1f410:	sub	r3, r3, #48	; 0x30
   1f414:	cmp	r3, #9
   1f418:	bhi	1f470 <__assert_fail@plt+0xd150>
   1f41c:	add	r1, sp, #8
   1f420:	str	r2, [r1, #-8]!
   1f424:	mov	r2, #10
   1f428:	mov	r1, sp
   1f42c:	bl	120d4 <strtoul@plt>
   1f430:	ldr	r2, [sp]
   1f434:	cmp	r2, #0
   1f438:	beq	1f470 <__assert_fail@plt+0xd150>
   1f43c:	ldrb	r3, [r2]
   1f440:	cmp	r3, #0
   1f444:	addne	r2, r2, #1
   1f448:	bne	1f460 <__assert_fail@plt+0xd140>
   1f44c:	b	1f4b8 <__assert_fail@plt+0xd198>
   1f450:	str	r2, [sp]
   1f454:	ldrb	r3, [r2], #1
   1f458:	cmp	r3, #0
   1f45c:	beq	1f4b8 <__assert_fail@plt+0xd198>
   1f460:	sub	r1, r3, #9
   1f464:	cmp	r3, #32
   1f468:	cmpne	r1, #4
   1f46c:	bls	1f450 <__assert_fail@plt+0xd130>
   1f470:	bl	1f2f4 <__assert_fail@plt+0xcfd4>
   1f474:	cmp	r0, #0
   1f478:	bne	1f3c0 <__assert_fail@plt+0xd0a0>
   1f47c:	mov	r0, #84	; 0x54
   1f480:	bl	11f00 <sysconf@plt>
   1f484:	cmp	r0, #0
   1f488:	bgt	1f3c0 <__assert_fail@plt+0xd0a0>
   1f48c:	mov	r0, #1
   1f490:	b	1f3c0 <__assert_fail@plt+0xd0a0>
   1f494:	ldrb	r3, [r0, #1]!
   1f498:	cmp	r3, #0
   1f49c:	bne	1f3f8 <__assert_fail@plt+0xd0d8>
   1f4a0:	b	1f470 <__assert_fail@plt+0xd150>
   1f4a4:	bl	1f2f4 <__assert_fail@plt+0xcfd4>
   1f4a8:	cmp	r0, #0
   1f4ac:	beq	1f3bc <__assert_fail@plt+0xd09c>
   1f4b0:	mov	r5, r0
   1f4b4:	b	1f3b4 <__assert_fail@plt+0xd094>
   1f4b8:	cmp	r0, #0
   1f4bc:	moveq	r0, #1
   1f4c0:	b	1f3c0 <__assert_fail@plt+0xd0a0>
   1f4c4:	bl	11ed0 <__stack_chk_fail@plt>
   1f4c8:	andeq	r8, r1, ip, ror ip
   1f4cc:	andeq	r0, r0, ip, lsl r2
   1f4d0:	andeq	r7, r0, r4, asr sp
   1f4d4:	andeq	r0, r0, r0
   1f4d8:	push	{r3, lr}
   1f4dc:	vpush	{d8}
   1f4e0:	mov	r0, #85	; 0x55
   1f4e4:	bl	11f00 <sysconf@plt>
   1f4e8:	vmov	s15, r0
   1f4ec:	mov	r0, #30
   1f4f0:	vcvt.f64.s32	d8, s15
   1f4f4:	bl	11f00 <sysconf@plt>
   1f4f8:	vcmpe.f64	d8, #0.0
   1f4fc:	vmrs	APSR_nzcv, fpscr
   1f500:	vmov	s15, r0
   1f504:	vcvt.f64.s32	d0, s15
   1f508:	blt	1f524 <__assert_fail@plt+0xd204>
   1f50c:	vcmpe.f64	d0, #0.0
   1f510:	vmrs	APSR_nzcv, fpscr
   1f514:	vmulge.f64	d0, d8, d0
   1f518:	blt	1f524 <__assert_fail@plt+0xd204>
   1f51c:	vpop	{d8}
   1f520:	pop	{r3, pc}
   1f524:	vpop	{d8}
   1f528:	vldr	d0, [pc]	; 1f530 <__assert_fail@plt+0xd210>
   1f52c:	pop	{r3, pc}
   1f530:	andeq	r0, r0, r0
   1f534:	orrsmi	r0, r0, r0
   1f538:	push	{r3, lr}
   1f53c:	vpush	{d8}
   1f540:	mov	r0, #86	; 0x56
   1f544:	bl	11f00 <sysconf@plt>
   1f548:	vmov	s15, r0
   1f54c:	mov	r0, #30
   1f550:	vcvt.f64.s32	d8, s15
   1f554:	bl	11f00 <sysconf@plt>
   1f558:	vcmpe.f64	d8, #0.0
   1f55c:	vmrs	APSR_nzcv, fpscr
   1f560:	vmov	s15, r0
   1f564:	vcvt.f64.s32	d0, s15
   1f568:	blt	1f584 <__assert_fail@plt+0xd264>
   1f56c:	vcmpe.f64	d0, #0.0
   1f570:	vmrs	APSR_nzcv, fpscr
   1f574:	blt	1f584 <__assert_fail@plt+0xd264>
   1f578:	vmul.f64	d0, d0, d8
   1f57c:	vpop	{d8}
   1f580:	pop	{r3, pc}
   1f584:	bl	1f4d8 <__assert_fail@plt+0xd1b8>
   1f588:	vmov.f64	d8, #80	; 0x3e800000  0.250
   1f58c:	vmul.f64	d0, d0, d8
   1f590:	vpop	{d8}
   1f594:	pop	{r3, pc}
   1f598:	ldr	r3, [pc, #132]	; 1f624 <__assert_fail@plt+0xd304>
   1f59c:	ldr	r2, [pc, #132]	; 1f628 <__assert_fail@plt+0xd308>
   1f5a0:	add	r3, pc, r3
   1f5a4:	ldr	r0, [pc, #128]	; 1f62c <__assert_fail@plt+0xd30c>
   1f5a8:	push	{r4, lr}
   1f5ac:	sub	sp, sp, #8
   1f5b0:	ldr	r4, [r3, r2]
   1f5b4:	add	r0, pc, r0
   1f5b8:	ldr	r3, [r4]
   1f5bc:	str	r3, [sp, #4]
   1f5c0:	bl	12044 <getenv@plt>
   1f5c4:	subs	r3, r0, #0
   1f5c8:	beq	1f5d8 <__assert_fail@plt+0xd2b8>
   1f5cc:	ldrb	r3, [r3]
   1f5d0:	cmp	r3, #0
   1f5d4:	bne	1f5f8 <__assert_fail@plt+0xd2d8>
   1f5d8:	mov	r0, #3504	; 0xdb0
   1f5dc:	movt	r0, #3
   1f5e0:	ldr	r2, [sp, #4]
   1f5e4:	ldr	r3, [r4]
   1f5e8:	cmp	r2, r3
   1f5ec:	bne	1f620 <__assert_fail@plt+0xd300>
   1f5f0:	add	sp, sp, #8
   1f5f4:	pop	{r4, pc}
   1f5f8:	mov	r2, #10
   1f5fc:	mov	r1, sp
   1f600:	bl	11d74 <strtol@plt>
   1f604:	ldr	r2, [sp]
   1f608:	mov	r3, #3504	; 0xdb0
   1f60c:	movt	r3, #3
   1f610:	ldrb	r2, [r2]
   1f614:	cmp	r2, #0
   1f618:	movne	r0, r3
   1f61c:	b	1f5e0 <__assert_fail@plt+0xd2c0>
   1f620:	bl	11ed0 <__stack_chk_fail@plt>
   1f624:	andeq	r8, r1, r8, asr sl
   1f628:	andeq	r0, r0, ip, lsl r2
   1f62c:	andeq	r7, r0, ip, lsl #23
   1f630:	push	{r3, r4, r5, r6, r7, lr}
   1f634:	subs	r4, r0, #0
   1f638:	ldr	r5, [pc, #172]	; 1f6ec <__assert_fail@plt+0xd3cc>
   1f63c:	add	r5, pc, r5
   1f640:	beq	1f6c8 <__assert_fail@plt+0xd3a8>
   1f644:	mov	r1, #47	; 0x2f
   1f648:	bl	12230 <strrchr@plt>
   1f64c:	subs	r6, r0, #0
   1f650:	beq	1f6ac <__assert_fail@plt+0xd38c>
   1f654:	add	r7, r6, #1
   1f658:	rsb	r3, r4, r7
   1f65c:	cmp	r3, #6
   1f660:	ble	1f6ac <__assert_fail@plt+0xd38c>
   1f664:	ldr	r1, [pc, #132]	; 1f6f0 <__assert_fail@plt+0xd3d0>
   1f668:	sub	r0, r6, #6
   1f66c:	mov	r2, #7
   1f670:	add	r1, pc, r1
   1f674:	bl	122e4 <strncmp@plt>
   1f678:	cmp	r0, #0
   1f67c:	bne	1f6ac <__assert_fail@plt+0xd38c>
   1f680:	ldr	r1, [pc, #108]	; 1f6f4 <__assert_fail@plt+0xd3d4>
   1f684:	mov	r0, r7
   1f688:	mov	r2, #3
   1f68c:	add	r1, pc, r1
   1f690:	bl	122e4 <strncmp@plt>
   1f694:	cmp	r0, #0
   1f698:	movne	r4, r7
   1f69c:	ldreq	r3, [pc, #84]	; 1f6f8 <__assert_fail@plt+0xd3d8>
   1f6a0:	addeq	r4, r6, #4
   1f6a4:	ldreq	r3, [r5, r3]
   1f6a8:	streq	r4, [r3]
   1f6ac:	ldr	r2, [pc, #72]	; 1f6fc <__assert_fail@plt+0xd3dc>
   1f6b0:	ldr	r3, [pc, #72]	; 1f700 <__assert_fail@plt+0xd3e0>
   1f6b4:	ldr	r2, [r5, r2]
   1f6b8:	str	r4, [r2]
   1f6bc:	ldr	r3, [r5, r3]
   1f6c0:	str	r4, [r3]
   1f6c4:	pop	{r3, r4, r5, r6, r7, pc}
   1f6c8:	ldr	r3, [pc, #52]	; 1f704 <__assert_fail@plt+0xd3e4>
   1f6cc:	mov	r1, #1
   1f6d0:	ldr	r0, [pc, #48]	; 1f708 <__assert_fail@plt+0xd3e8>
   1f6d4:	mov	r2, #55	; 0x37
   1f6d8:	ldr	r3, [r5, r3]
   1f6dc:	add	r0, pc, r0
   1f6e0:	ldr	r3, [r3]
   1f6e4:	bl	11fa8 <fwrite@plt>
   1f6e8:	bl	122fc <abort@plt>
   1f6ec:			; <UNDEFINED> instruction: 0x000189bc
   1f6f0:	andeq	r7, r0, r8, lsl fp
   1f6f4:	andeq	r7, r0, r4, lsl #22
   1f6f8:	andeq	r0, r0, r4, asr r2
   1f6fc:	andeq	r0, r0, ip, asr #4
   1f700:	andeq	r0, r0, r8, asr #4
   1f704:	andeq	r0, r0, r8, lsr #4
   1f708:	andeq	r7, r0, r4, ror sl
   1f70c:	push	{r3, lr}
   1f710:	mov	r3, r0
   1f714:	mov	r2, #0
   1f718:	cmp	r1, #8
   1f71c:	str	r2, [r3], #4
   1f720:	add	r3, r3, #4
   1f724:	str	r2, [r0, #4]
   1f728:	str	r2, [r3], #4
   1f72c:	str	r2, [r3], #4
   1f730:	str	r2, [r3], #4
   1f734:	str	r2, [r3], #4
   1f738:	str	r2, [r3], #4
   1f73c:	str	r2, [r3], #4
   1f740:	str	r2, [r3], #4
   1f744:	str	r2, [r3], #4
   1f748:	str	r2, [r3], #4
   1f74c:	str	r2, [r3]
   1f750:	beq	1f75c <__assert_fail@plt+0xd43c>
   1f754:	str	r1, [r0]
   1f758:	pop	{r3, pc}
   1f75c:	bl	122fc <abort@plt>
   1f760:	push	{r4, r5, r6, lr}
   1f764:	mov	r4, r0
   1f768:	mov	r6, r1
   1f76c:	mov	r0, #0
   1f770:	mov	r1, r4
   1f774:	mov	r2, #5
   1f778:	bl	11ec4 <dcgettext@plt>
   1f77c:	cmp	r0, r4
   1f780:	mov	r5, r0
   1f784:	beq	1f78c <__assert_fail@plt+0xd46c>
   1f788:	pop	{r4, r5, r6, pc}
   1f78c:	bl	23d78 <__assert_fail@plt+0x11a58>
   1f790:	ldrb	r3, [r0]
   1f794:	bic	r3, r3, #32
   1f798:	cmp	r3, #85	; 0x55
   1f79c:	bne	1f810 <__assert_fail@plt+0xd4f0>
   1f7a0:	ldrb	r3, [r0, #1]
   1f7a4:	bic	r3, r3, #32
   1f7a8:	cmp	r3, #84	; 0x54
   1f7ac:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f7b0:	ldrb	r3, [r0, #2]
   1f7b4:	bic	r3, r3, #32
   1f7b8:	cmp	r3, #70	; 0x46
   1f7bc:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f7c0:	ldrb	r3, [r0, #3]
   1f7c4:	cmp	r3, #45	; 0x2d
   1f7c8:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f7cc:	ldrb	r3, [r0, #4]
   1f7d0:	cmp	r3, #56	; 0x38
   1f7d4:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f7d8:	ldrb	r3, [r0, #5]
   1f7dc:	cmp	r3, #0
   1f7e0:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f7e4:	ldrb	r3, [r5]
   1f7e8:	cmp	r3, #96	; 0x60
   1f7ec:	beq	1f888 <__assert_fail@plt+0xd568>
   1f7f0:	ldr	r0, [pc, #180]	; 1f8ac <__assert_fail@plt+0xd58c>
   1f7f4:	add	r0, pc, r0
   1f7f8:	pop	{r4, r5, r6, pc}
   1f7fc:	cmp	r6, #7
   1f800:	beq	1f894 <__assert_fail@plt+0xd574>
   1f804:	ldr	r0, [pc, #164]	; 1f8b0 <__assert_fail@plt+0xd590>
   1f808:	add	r0, pc, r0
   1f80c:	pop	{r4, r5, r6, pc}
   1f810:	cmp	r3, #71	; 0x47
   1f814:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f818:	ldrb	r3, [r0, #1]
   1f81c:	bic	r3, r3, #32
   1f820:	cmp	r3, #66	; 0x42
   1f824:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f828:	ldrb	r3, [r0, #2]
   1f82c:	cmp	r3, #49	; 0x31
   1f830:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f834:	ldrb	r3, [r0, #3]
   1f838:	cmp	r3, #56	; 0x38
   1f83c:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f840:	ldrb	r3, [r0, #4]
   1f844:	cmp	r3, #48	; 0x30
   1f848:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f84c:	ldrb	r3, [r0, #5]
   1f850:	cmp	r3, #51	; 0x33
   1f854:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f858:	ldrb	r3, [r0, #6]
   1f85c:	cmp	r3, #48	; 0x30
   1f860:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f864:	ldrb	r3, [r0, #7]
   1f868:	cmp	r3, #0
   1f86c:	bne	1f7fc <__assert_fail@plt+0xd4dc>
   1f870:	ldrb	r3, [r5]
   1f874:	cmp	r3, #96	; 0x60
   1f878:	beq	1f8a0 <__assert_fail@plt+0xd580>
   1f87c:	ldr	r0, [pc, #48]	; 1f8b4 <__assert_fail@plt+0xd594>
   1f880:	add	r0, pc, r0
   1f884:	pop	{r4, r5, r6, pc}
   1f888:	ldr	r0, [pc, #40]	; 1f8b8 <__assert_fail@plt+0xd598>
   1f88c:	add	r0, pc, r0
   1f890:	pop	{r4, r5, r6, pc}
   1f894:	ldr	r0, [pc, #32]	; 1f8bc <__assert_fail@plt+0xd59c>
   1f898:	add	r0, pc, r0
   1f89c:	pop	{r4, r5, r6, pc}
   1f8a0:	ldr	r0, [pc, #24]	; 1f8c0 <__assert_fail@plt+0xd5a0>
   1f8a4:	add	r0, pc, r0
   1f8a8:	pop	{r4, r5, r6, pc}
   1f8ac:	andeq	r7, r0, r0, asr #19
   1f8b0:			; <UNDEFINED> instruction: 0x000079b4
   1f8b4:	andeq	r7, r0, r8, lsr r9
   1f8b8:	andeq	r7, r0, ip, lsr r9
   1f8bc:	andeq	r7, r0, r8, lsr #18
   1f8c0:	andeq	r7, r0, r0, lsr #18
   1f8c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8c8:	sub	sp, sp, #124	; 0x7c
   1f8cc:	ldr	ip, [pc, #3304]	; 205bc <__assert_fail@plt+0xe29c>
   1f8d0:	mov	sl, r1
   1f8d4:	str	r0, [sp, #40]	; 0x28
   1f8d8:	mov	r8, r3
   1f8dc:	ldr	r0, [pc, #3292]	; 205c0 <__assert_fail@plt+0xe2a0>
   1f8e0:	add	ip, pc, ip
   1f8e4:	str	r2, [sp, #32]
   1f8e8:	ldr	r1, [sp, #164]	; 0xa4
   1f8ec:	mov	r3, ip
   1f8f0:	ldr	r0, [ip, r0]
   1f8f4:	ldr	r2, [sp, #172]	; 0xac
   1f8f8:	ubfx	r1, r1, #1, #1
   1f8fc:	str	r1, [sp, #36]	; 0x24
   1f900:	str	r0, [sp, #56]	; 0x38
   1f904:	ldr	r0, [sp, #168]	; 0xa8
   1f908:	ldr	r1, [sp, #176]	; 0xb0
   1f90c:	str	r2, [sp, #72]	; 0x48
   1f910:	str	r0, [sp, #48]	; 0x30
   1f914:	ldr	r0, [sp, #56]	; 0x38
   1f918:	str	r1, [sp, #68]	; 0x44
   1f91c:	ldr	r3, [r0]
   1f920:	str	r3, [sp, #116]	; 0x74
   1f924:	bl	11fd8 <__ctype_get_mb_cur_max@plt>
   1f928:	ldr	r2, [sp, #160]	; 0xa0
   1f92c:	str	r0, [sp, #64]	; 0x40
   1f930:	cmp	r2, #8
   1f934:	addls	pc, pc, r2, lsl #2
   1f938:	b	20498 <__assert_fail@plt+0xe178>
   1f93c:	b	1f960 <__assert_fail@plt+0xd640>
   1f940:	b	201b0 <__assert_fail@plt+0xde90>
   1f944:	b	201e0 <__assert_fail@plt+0xdec0>
   1f948:	b	20090 <__assert_fail@plt+0xdd70>
   1f94c:	b	200d0 <__assert_fail@plt+0xddb0>
   1f950:	b	200fc <__assert_fail@plt+0xdddc>
   1f954:	b	2011c <__assert_fail@plt+0xddfc>
   1f958:	b	2011c <__assert_fail@plt+0xddfc>
   1f95c:	b	2011c <__assert_fail@plt+0xddfc>
   1f960:	mov	r2, #0
   1f964:	str	r2, [sp, #36]	; 0x24
   1f968:	mov	r9, r2
   1f96c:	str	r2, [sp, #24]
   1f970:	str	r2, [sp, #28]
   1f974:	str	r2, [sp, #52]	; 0x34
   1f978:	ldr	r0, [sp, #36]	; 0x24
   1f97c:	mov	fp, #0
   1f980:	ldr	r1, [sp, #24]
   1f984:	eor	r2, r0, #1
   1f988:	eor	r3, r1, #1
   1f98c:	and	r3, r2, r3
   1f990:	and	r2, r1, r0
   1f994:	str	r3, [sp, #44]	; 0x2c
   1f998:	str	r2, [sp, #76]	; 0x4c
   1f99c:	cmn	r8, #1
   1f9a0:	beq	1fd20 <__assert_fail@plt+0xda00>
   1f9a4:	subs	r3, fp, r8
   1f9a8:	movne	r3, #1
   1f9ac:	cmp	r3, #0
   1f9b0:	beq	1fd38 <__assert_fail@plt+0xda18>
   1f9b4:	ldr	r3, [sp, #28]
   1f9b8:	ldr	r0, [sp, #24]
   1f9bc:	adds	r7, r3, #0
   1f9c0:	movne	r7, #1
   1f9c4:	ands	r6, r7, r0
   1f9c8:	bne	20224 <__assert_fail@plt+0xdf04>
   1f9cc:	ldr	r1, [sp, #32]
   1f9d0:	add	r5, r1, fp
   1f9d4:	ldrb	r4, [r5]
   1f9d8:	cmp	r4, #126	; 0x7e
   1f9dc:	addls	pc, pc, r4, lsl #2
   1f9e0:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1f9e4:	b	1feb0 <__assert_fail@plt+0xdb90>
   1f9e8:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1f9ec:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1f9f0:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1f9f4:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1f9f8:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1f9fc:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa00:	b	1fe98 <__assert_fail@plt+0xdb78>
   1fa04:	b	1fe80 <__assert_fail@plt+0xdb60>
   1fa08:	b	1fea8 <__assert_fail@plt+0xdb88>
   1fa0c:	b	1fea0 <__assert_fail@plt+0xdb80>
   1fa10:	b	1fe90 <__assert_fail@plt+0xdb70>
   1fa14:	b	1fe88 <__assert_fail@plt+0xdb68>
   1fa18:	b	1fe4c <__assert_fail@plt+0xdb2c>
   1fa1c:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa20:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa24:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa28:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa2c:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa30:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa34:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa38:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa3c:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa40:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa44:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa48:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa4c:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa50:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa54:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa58:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa5c:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa60:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fa64:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fa68:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fa6c:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fa70:	b	1fdd0 <__assert_fail@plt+0xdab0>
   1fa74:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fa78:	b	1fcac <__assert_fail@plt+0xd98c>
   1fa7c:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fa80:	b	1ff4c <__assert_fail@plt+0xdc2c>
   1fa84:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fa88:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fa8c:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fa90:	b	1fcac <__assert_fail@plt+0xd98c>
   1fa94:	b	1fcac <__assert_fail@plt+0xd98c>
   1fa98:	b	1fcac <__assert_fail@plt+0xd98c>
   1fa9c:	b	1fcac <__assert_fail@plt+0xd98c>
   1faa0:	b	1fcac <__assert_fail@plt+0xd98c>
   1faa4:	b	1fcac <__assert_fail@plt+0xd98c>
   1faa8:	b	1fcac <__assert_fail@plt+0xd98c>
   1faac:	b	1fcac <__assert_fail@plt+0xd98c>
   1fab0:	b	1fcac <__assert_fail@plt+0xd98c>
   1fab4:	b	1fcac <__assert_fail@plt+0xd98c>
   1fab8:	b	1fcac <__assert_fail@plt+0xd98c>
   1fabc:	b	1fcac <__assert_fail@plt+0xd98c>
   1fac0:	b	1fcac <__assert_fail@plt+0xd98c>
   1fac4:	b	1fcac <__assert_fail@plt+0xd98c>
   1fac8:	b	1fcac <__assert_fail@plt+0xd98c>
   1facc:	b	1fcac <__assert_fail@plt+0xd98c>
   1fad0:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fad4:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fad8:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fadc:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fae0:	b	1fbe0 <__assert_fail@plt+0xd8c0>
   1fae4:	b	1ffa4 <__assert_fail@plt+0xdc84>
   1fae8:	b	1fcac <__assert_fail@plt+0xd98c>
   1faec:	b	1fcac <__assert_fail@plt+0xd98c>
   1faf0:	b	1fcac <__assert_fail@plt+0xd98c>
   1faf4:	b	1fcac <__assert_fail@plt+0xd98c>
   1faf8:	b	1fcac <__assert_fail@plt+0xd98c>
   1fafc:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb00:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb04:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb08:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb0c:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb10:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb14:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb18:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb1c:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb20:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb24:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb28:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb2c:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb30:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb34:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb38:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb3c:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb40:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb44:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb48:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb4c:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb50:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fb54:	b	1ff30 <__assert_fail@plt+0xdc10>
   1fb58:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb5c:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fb60:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb64:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fb68:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb6c:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb70:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb74:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb78:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb7c:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb80:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb84:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb88:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb8c:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb90:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb94:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb98:	b	1fcac <__assert_fail@plt+0xd98c>
   1fb9c:	b	1fcac <__assert_fail@plt+0xd98c>
   1fba0:	b	1fcac <__assert_fail@plt+0xd98c>
   1fba4:	b	1fcac <__assert_fail@plt+0xd98c>
   1fba8:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbac:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbb0:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbb4:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbb8:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbbc:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbc0:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbc4:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbc8:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbcc:	b	1fcac <__assert_fail@plt+0xd98c>
   1fbd0:	b	1fdb8 <__assert_fail@plt+0xda98>
   1fbd4:	b	1fdd8 <__assert_fail@plt+0xdab8>
   1fbd8:	b	1fdb8 <__assert_fail@plt+0xda98>
   1fbdc:	b	1fdd0 <__assert_fail@plt+0xdab0>
   1fbe0:	ldr	r3, [sp, #160]	; 0xa0
   1fbe4:	cmp	r3, #2
   1fbe8:	beq	20474 <__assert_fail@plt+0xe154>
   1fbec:	cmp	r3, #3
   1fbf0:	bne	1fcac <__assert_fail@plt+0xd98c>
   1fbf4:	ldr	r1, [sp, #164]	; 0xa4
   1fbf8:	tst	r1, #4
   1fbfc:	beq	1fcac <__assert_fail@plt+0xd98c>
   1fc00:	add	r3, fp, #2
   1fc04:	cmp	r8, r3
   1fc08:	bls	1fcac <__assert_fail@plt+0xd98c>
   1fc0c:	ldrb	r2, [r5, #1]
   1fc10:	mov	r1, #1
   1fc14:	cmp	r2, #63	; 0x3f
   1fc18:	bne	1fcac <__assert_fail@plt+0xd98c>
   1fc1c:	ldr	r0, [sp, #32]
   1fc20:	ldrb	ip, [r0, r3]
   1fc24:	sub	r0, ip, #33	; 0x21
   1fc28:	uxtb	r0, r0
   1fc2c:	cmp	r0, #29
   1fc30:	bhi	1fcac <__assert_fail@plt+0xd98c>
   1fc34:	lsl	r1, r1, r0
   1fc38:	movw	r0, #20929	; 0x51c1
   1fc3c:	movt	r0, #14336	; 0x3800
   1fc40:	and	r0, r1, r0
   1fc44:	cmp	r0, #0
   1fc48:	beq	1fcac <__assert_fail@plt+0xd98c>
   1fc4c:	ldr	r1, [sp, #36]	; 0x24
   1fc50:	cmp	r1, #0
   1fc54:	bne	1fdf4 <__assert_fail@plt+0xdad4>
   1fc58:	cmp	r9, sl
   1fc5c:	mov	r4, ip
   1fc60:	mov	fp, r3
   1fc64:	ldrcc	r0, [sp, #40]	; 0x28
   1fc68:	strbcc	r2, [r0, r9]
   1fc6c:	add	r2, r9, #1
   1fc70:	cmp	sl, r2
   1fc74:	ldrhi	r0, [sp, #40]	; 0x28
   1fc78:	movhi	r1, #34	; 0x22
   1fc7c:	strbhi	r1, [r0, r2]
   1fc80:	add	r2, r9, #2
   1fc84:	cmp	sl, r2
   1fc88:	ldrhi	r0, [sp, #40]	; 0x28
   1fc8c:	movhi	r1, #34	; 0x22
   1fc90:	strbhi	r1, [r0, r2]
   1fc94:	add	r2, r9, #3
   1fc98:	cmp	sl, r2
   1fc9c:	add	r9, r9, #4
   1fca0:	ldrhi	r0, [sp, #40]	; 0x28
   1fca4:	movhi	r1, #63	; 0x3f
   1fca8:	strbhi	r1, [r0, r2]
   1fcac:	ldr	r0, [sp, #44]	; 0x2c
   1fcb0:	cmp	r0, #0
   1fcb4:	bne	1fcdc <__assert_fail@plt+0xd9bc>
   1fcb8:	ldr	r1, [sp, #48]	; 0x30
   1fcbc:	cmp	r1, #0
   1fcc0:	beq	1fcdc <__assert_fail@plt+0xd9bc>
   1fcc4:	ubfx	r2, r4, #5, #8
   1fcc8:	and	r3, r4, #31
   1fccc:	ldr	r2, [r1, r2, lsl #2]
   1fcd0:	lsr	r3, r2, r3
   1fcd4:	tst	r3, #1
   1fcd8:	bne	1fce4 <__assert_fail@plt+0xd9c4>
   1fcdc:	cmp	r6, #0
   1fce0:	beq	1fd04 <__assert_fail@plt+0xd9e4>
   1fce4:	ldr	r2, [sp, #36]	; 0x24
   1fce8:	cmp	r2, #0
   1fcec:	bne	1fdf4 <__assert_fail@plt+0xdad4>
   1fcf0:	cmp	r9, sl
   1fcf4:	ldrcc	r0, [sp, #40]	; 0x28
   1fcf8:	movcc	r3, #92	; 0x5c
   1fcfc:	strbcc	r3, [r0, r9]
   1fd00:	add	r9, r9, #1
   1fd04:	add	fp, fp, #1
   1fd08:	cmp	r9, sl
   1fd0c:	ldrcc	r1, [sp, #40]	; 0x28
   1fd10:	strbcc	r4, [r1, r9]
   1fd14:	cmn	r8, #1
   1fd18:	add	r9, r9, #1
   1fd1c:	bne	1f9a4 <__assert_fail@plt+0xd684>
   1fd20:	ldr	r2, [sp, #32]
   1fd24:	ldrb	r3, [r2, fp]
   1fd28:	adds	r3, r3, #0
   1fd2c:	movne	r3, #1
   1fd30:	cmp	r3, #0
   1fd34:	bne	1f9b4 <__assert_fail@plt+0xd694>
   1fd38:	ldr	r3, [sp, #160]	; 0xa0
   1fd3c:	cmp	r9, #0
   1fd40:	cmpeq	r3, #2
   1fd44:	bne	1fd54 <__assert_fail@plt+0xda34>
   1fd48:	ldr	r0, [sp, #36]	; 0x24
   1fd4c:	cmp	r0, #0
   1fd50:	bne	1fdf4 <__assert_fail@plt+0xdad4>
   1fd54:	ldr	r1, [sp, #36]	; 0x24
   1fd58:	ldr	r2, [sp, #52]	; 0x34
   1fd5c:	eor	r3, r1, #1
   1fd60:	cmp	r2, #0
   1fd64:	moveq	r3, #0
   1fd68:	andne	r3, r3, #1
   1fd6c:	cmp	r3, #0
   1fd70:	beq	1fd9c <__assert_fail@plt+0xda7c>
   1fd74:	ldrb	r3, [r2]
   1fd78:	cmp	r3, #0
   1fd7c:	beq	1fd9c <__assert_fail@plt+0xda7c>
   1fd80:	ldr	r1, [sp, #40]	; 0x28
   1fd84:	cmp	sl, r9
   1fd88:	strbhi	r3, [r1, r9]
   1fd8c:	ldrb	r3, [r2, #1]!
   1fd90:	add	r9, r9, #1
   1fd94:	cmp	r3, #0
   1fd98:	bne	1fd84 <__assert_fail@plt+0xda64>
   1fd9c:	cmp	r9, sl
   1fda0:	movcs	r0, r9
   1fda4:	ldrcc	r1, [sp, #40]	; 0x28
   1fda8:	movcc	r3, #0
   1fdac:	movcc	r0, r9
   1fdb0:	strbcc	r3, [r1, r9]
   1fdb4:	b	1fe30 <__assert_fail@plt+0xdb10>
   1fdb8:	cmn	r8, #1
   1fdbc:	beq	20484 <__assert_fail@plt+0xe164>
   1fdc0:	subs	r3, r8, #1
   1fdc4:	movne	r3, #1
   1fdc8:	cmp	r3, #0
   1fdcc:	bne	1fcac <__assert_fail@plt+0xd98c>
   1fdd0:	cmp	fp, #0
   1fdd4:	bne	1fcac <__assert_fail@plt+0xd98c>
   1fdd8:	ldr	r3, [sp, #36]	; 0x24
   1fddc:	ldr	r0, [sp, #160]	; 0xa0
   1fde0:	cmp	r0, #2
   1fde4:	movne	r3, #0
   1fde8:	andeq	r3, r3, #1
   1fdec:	cmp	r3, #0
   1fdf0:	beq	1fcac <__assert_fail@plt+0xd98c>
   1fdf4:	ldr	r2, [sp, #164]	; 0xa4
   1fdf8:	mov	ip, #0
   1fdfc:	ldr	r0, [sp, #160]	; 0xa0
   1fe00:	bic	r3, r2, #2
   1fe04:	ldr	r1, [sp, #72]	; 0x48
   1fe08:	ldr	r2, [sp, #68]	; 0x44
   1fe0c:	stm	sp, {r0, r3}
   1fe10:	mov	r3, r8
   1fe14:	str	r1, [sp, #12]
   1fe18:	mov	r1, sl
   1fe1c:	str	r2, [sp, #16]
   1fe20:	ldr	r0, [sp, #40]	; 0x28
   1fe24:	ldr	r2, [sp, #32]
   1fe28:	str	ip, [sp, #8]
   1fe2c:	bl	1f8c4 <__assert_fail@plt+0xd5a4>
   1fe30:	ldr	r1, [sp, #56]	; 0x38
   1fe34:	ldr	r2, [sp, #116]	; 0x74
   1fe38:	ldr	r3, [r1]
   1fe3c:	cmp	r2, r3
   1fe40:	bne	20574 <__assert_fail@plt+0xe254>
   1fe44:	add	sp, sp, #124	; 0x7c
   1fe48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe4c:	mov	r3, #114	; 0x72
   1fe50:	ldr	r2, [sp, #36]	; 0x24
   1fe54:	ldr	r0, [sp, #160]	; 0xa0
   1fe58:	cmp	r0, #2
   1fe5c:	movne	r2, #0
   1fe60:	andeq	r2, r2, #1
   1fe64:	cmp	r2, #0
   1fe68:	bne	1fdf4 <__assert_fail@plt+0xdad4>
   1fe6c:	ldr	r1, [sp, #24]
   1fe70:	cmp	r1, #0
   1fe74:	beq	1fcac <__assert_fail@plt+0xd98c>
   1fe78:	mov	r4, r3
   1fe7c:	b	1fce4 <__assert_fail@plt+0xd9c4>
   1fe80:	mov	r3, #98	; 0x62
   1fe84:	b	1fe6c <__assert_fail@plt+0xdb4c>
   1fe88:	mov	r3, #102	; 0x66
   1fe8c:	b	1fe6c <__assert_fail@plt+0xdb4c>
   1fe90:	mov	r3, #118	; 0x76
   1fe94:	b	1fe6c <__assert_fail@plt+0xdb4c>
   1fe98:	mov	r3, #97	; 0x61
   1fe9c:	b	1fe6c <__assert_fail@plt+0xdb4c>
   1fea0:	mov	r3, #110	; 0x6e
   1fea4:	b	1fe50 <__assert_fail@plt+0xdb30>
   1fea8:	mov	r3, #116	; 0x74
   1feac:	b	1fe50 <__assert_fail@plt+0xdb30>
   1feb0:	ldr	r2, [sp, #24]
   1feb4:	cmp	r2, #0
   1feb8:	beq	20460 <__assert_fail@plt+0xe140>
   1febc:	ldr	r3, [sp, #36]	; 0x24
   1fec0:	cmp	r3, #0
   1fec4:	bne	1fdf4 <__assert_fail@plt+0xdad4>
   1fec8:	cmp	r9, sl
   1fecc:	add	r2, r9, #1
   1fed0:	ldrcc	r0, [sp, #40]	; 0x28
   1fed4:	movcc	r3, #92	; 0x5c
   1fed8:	strbcc	r3, [r0, r9]
   1fedc:	add	r3, fp, #1
   1fee0:	cmp	r8, r3
   1fee4:	bls	1ff24 <__assert_fail@plt+0xdc04>
   1fee8:	ldr	r1, [sp, #32]
   1feec:	ldrb	r3, [r1, r3]
   1fef0:	sub	r3, r3, #48	; 0x30
   1fef4:	cmp	r3, #9
   1fef8:	bhi	1ff24 <__assert_fail@plt+0xdc04>
   1fefc:	cmp	sl, r2
   1ff00:	ldrhi	r0, [sp, #40]	; 0x28
   1ff04:	movhi	r3, #48	; 0x30
   1ff08:	strbhi	r3, [r0, r2]
   1ff0c:	add	r3, r9, #2
   1ff10:	cmp	sl, r3
   1ff14:	ldrhi	r1, [sp, #40]	; 0x28
   1ff18:	movhi	r2, #48	; 0x30
   1ff1c:	strbhi	r2, [r1, r3]
   1ff20:	add	r2, r9, #3
   1ff24:	mov	r9, r2
   1ff28:	mov	r4, #48	; 0x30
   1ff2c:	b	1fcb8 <__assert_fail@plt+0xd998>
   1ff30:	ldr	r1, [sp, #76]	; 0x4c
   1ff34:	cmp	r1, #0
   1ff38:	beq	1ff44 <__assert_fail@plt+0xdc24>
   1ff3c:	cmp	r7, #0
   1ff40:	bne	1fd04 <__assert_fail@plt+0xd9e4>
   1ff44:	mov	r3, r4
   1ff48:	b	1fe50 <__assert_fail@plt+0xdb30>
   1ff4c:	ldr	r1, [sp, #160]	; 0xa0
   1ff50:	cmp	r1, #2
   1ff54:	bne	1fcac <__assert_fail@plt+0xd98c>
   1ff58:	ldr	r2, [sp, #36]	; 0x24
   1ff5c:	cmp	r2, #0
   1ff60:	bne	1fdf4 <__assert_fail@plt+0xdad4>
   1ff64:	cmp	r9, sl
   1ff68:	ldrcc	r0, [sp, #40]	; 0x28
   1ff6c:	movcc	r3, #39	; 0x27
   1ff70:	strbcc	r3, [r0, r9]
   1ff74:	add	r3, r9, #1
   1ff78:	cmp	sl, r3
   1ff7c:	ldrhi	r1, [sp, #40]	; 0x28
   1ff80:	movhi	r2, #92	; 0x5c
   1ff84:	strbhi	r2, [r1, r3]
   1ff88:	add	r3, r9, #2
   1ff8c:	cmp	sl, r3
   1ff90:	add	r9, r9, #3
   1ff94:	ldrhi	r0, [sp, #40]	; 0x28
   1ff98:	movhi	r2, #39	; 0x27
   1ff9c:	strbhi	r2, [r0, r3]
   1ffa0:	b	1fcac <__assert_fail@plt+0xd98c>
   1ffa4:	ldr	r1, [sp, #64]	; 0x40
   1ffa8:	cmp	r1, #1
   1ffac:	bne	202a4 <__assert_fail@plt+0xdf84>
   1ffb0:	bl	120b0 <__ctype_b_loc@plt>
   1ffb4:	ldr	r2, [sp, #64]	; 0x40
   1ffb8:	sxth	r3, r4
   1ffbc:	str	r2, [sp, #60]	; 0x3c
   1ffc0:	lsl	r3, r3, #1
   1ffc4:	ldr	r2, [r0]
   1ffc8:	ldrh	r2, [r2, r3]
   1ffcc:	eor	r2, r2, #16384	; 0x4000
   1ffd0:	ubfx	r2, r2, #14, #1
   1ffd4:	ldr	r1, [sp, #24]
   1ffd8:	ands	r2, r2, r1
   1ffdc:	beq	1fcac <__assert_fail@plt+0xd98c>
   1ffe0:	ldr	r3, [sp, #60]	; 0x3c
   1ffe4:	mov	r0, #92	; 0x5c
   1ffe8:	ldr	r7, [sp, #36]	; 0x24
   1ffec:	add	r1, r3, fp
   1fff0:	str	r8, [sp, #60]	; 0x3c
   1fff4:	ldr	r3, [sp, #40]	; 0x28
   1fff8:	b	2005c <__assert_fail@plt+0xdd3c>
   1fffc:	cmp	r7, #0
   20000:	bne	2049c <__assert_fail@plt+0xe17c>
   20004:	add	ip, r9, #1
   20008:	cmp	r9, sl
   2000c:	strbcc	r0, [r3, r9]
   20010:	cmp	sl, ip
   20014:	lsrhi	r8, r4, #6
   20018:	addhi	r8, r8, #48	; 0x30
   2001c:	strbhi	r8, [r3, ip]
   20020:	add	ip, r9, #2
   20024:	add	r9, r9, #3
   20028:	cmp	sl, ip
   2002c:	ubfxhi	r8, r4, #3, #3
   20030:	and	r4, r4, #7
   20034:	add	r4, r4, #48	; 0x30
   20038:	addhi	r8, r8, #48	; 0x30
   2003c:	strbhi	r8, [r3, ip]
   20040:	add	fp, fp, #1
   20044:	cmp	r1, fp
   20048:	bls	20088 <__assert_fail@plt+0xdd68>
   2004c:	cmp	r9, sl
   20050:	strbcc	r4, [r3, r9]
   20054:	ldrb	r4, [r5, #1]!
   20058:	add	r9, r9, #1
   2005c:	cmp	r2, #0
   20060:	bne	1fffc <__assert_fail@plt+0xdcdc>
   20064:	cmp	r6, #0
   20068:	beq	20040 <__assert_fail@plt+0xdd20>
   2006c:	add	fp, fp, #1
   20070:	cmp	r9, sl
   20074:	strbcc	r0, [r3, r9]
   20078:	cmp	r1, fp
   2007c:	add	r9, r9, #1
   20080:	mov	r6, #0
   20084:	bhi	2004c <__assert_fail@plt+0xdd2c>
   20088:	ldr	r8, [sp, #60]	; 0x3c
   2008c:	b	1fd08 <__assert_fail@plt+0xd9e8>
   20090:	ldr	r3, [sp, #36]	; 0x24
   20094:	cmp	r3, #0
   20098:	bne	2059c <__assert_fail@plt+0xe27c>
   2009c:	cmp	sl, #0
   200a0:	beq	204b4 <__assert_fail@plt+0xe194>
   200a4:	ldr	r1, [sp, #40]	; 0x28
   200a8:	mov	r0, #1
   200ac:	ldr	r2, [pc, #1296]	; 205c4 <__assert_fail@plt+0xe2a4>
   200b0:	mov	r3, #34	; 0x22
   200b4:	str	r0, [sp, #24]
   200b8:	mov	r9, r0
   200bc:	add	r2, pc, r2
   200c0:	str	r0, [sp, #28]
   200c4:	strb	r3, [r1]
   200c8:	str	r2, [sp, #52]	; 0x34
   200cc:	b	1f978 <__assert_fail@plt+0xd658>
   200d0:	ldr	r3, [pc, #1264]	; 205c8 <__assert_fail@plt+0xe2a8>
   200d4:	mov	r2, #1
   200d8:	mov	r0, #3
   200dc:	str	r2, [sp, #36]	; 0x24
   200e0:	add	r3, pc, r3
   200e4:	str	r2, [sp, #24]
   200e8:	str	r3, [sp, #52]	; 0x34
   200ec:	mov	r9, #0
   200f0:	str	r2, [sp, #28]
   200f4:	str	r0, [sp, #160]	; 0xa0
   200f8:	b	1f978 <__assert_fail@plt+0xd658>
   200fc:	mov	r0, #0
   20100:	mov	r1, #1
   20104:	str	r0, [sp, #36]	; 0x24
   20108:	mov	r9, r0
   2010c:	str	r1, [sp, #24]
   20110:	str	r0, [sp, #28]
   20114:	str	r0, [sp, #52]	; 0x34
   20118:	b	1f978 <__assert_fail@plt+0xd658>
   2011c:	ldr	r3, [sp, #160]	; 0xa0
   20120:	cmp	r3, #8
   20124:	beq	20150 <__assert_fail@plt+0xde30>
   20128:	ldr	r0, [pc, #1180]	; 205cc <__assert_fail@plt+0xe2ac>
   2012c:	mov	r1, r3
   20130:	add	r0, pc, r0
   20134:	bl	1f760 <__assert_fail@plt+0xd440>
   20138:	ldr	r1, [sp, #160]	; 0xa0
   2013c:	str	r0, [sp, #72]	; 0x48
   20140:	ldr	r0, [pc, #1160]	; 205d0 <__assert_fail@plt+0xe2b0>
   20144:	add	r0, pc, r0
   20148:	bl	1f760 <__assert_fail@plt+0xd440>
   2014c:	str	r0, [sp, #68]	; 0x44
   20150:	ldr	r0, [sp, #36]	; 0x24
   20154:	cmp	r0, #0
   20158:	movne	r9, #0
   2015c:	bne	20194 <__assert_fail@plt+0xde74>
   20160:	ldr	r1, [sp, #72]	; 0x48
   20164:	ldrb	r3, [r1]
   20168:	cmp	r3, #0
   2016c:	beq	2056c <__assert_fail@plt+0xe24c>
   20170:	mov	r2, r1
   20174:	ldr	r1, [sp, #40]	; 0x28
   20178:	mov	r9, r0
   2017c:	cmp	r9, sl
   20180:	strbcc	r3, [r1, r9]
   20184:	ldrb	r3, [r2, #1]!
   20188:	add	r9, r9, #1
   2018c:	cmp	r3, #0
   20190:	bne	2017c <__assert_fail@plt+0xde5c>
   20194:	ldr	r0, [sp, #68]	; 0x44
   20198:	str	r0, [sp, #52]	; 0x34
   2019c:	bl	120e0 <strlen@plt>
   201a0:	mov	r2, #1
   201a4:	str	r2, [sp, #24]
   201a8:	str	r0, [sp, #28]
   201ac:	b	1f978 <__assert_fail@plt+0xd658>
   201b0:	ldr	r3, [pc, #1052]	; 205d4 <__assert_fail@plt+0xe2b4>
   201b4:	mov	r2, #0
   201b8:	mov	r1, #1
   201bc:	mov	r0, #2
   201c0:	add	r3, pc, r3
   201c4:	str	r1, [sp, #36]	; 0x24
   201c8:	str	r2, [sp, #24]
   201cc:	mov	r9, r2
   201d0:	str	r1, [sp, #28]
   201d4:	str	r3, [sp, #52]	; 0x34
   201d8:	str	r0, [sp, #160]	; 0xa0
   201dc:	b	1f978 <__assert_fail@plt+0xd658>
   201e0:	ldr	r3, [sp, #36]	; 0x24
   201e4:	cmp	r3, #0
   201e8:	bne	20578 <__assert_fail@plt+0xe258>
   201ec:	cmp	sl, #0
   201f0:	beq	204d4 <__assert_fail@plt+0xe1b4>
   201f4:	ldr	r1, [sp, #40]	; 0x28
   201f8:	mov	r3, #39	; 0x27
   201fc:	ldr	r2, [sp, #36]	; 0x24
   20200:	mov	r0, #1
   20204:	mov	r9, r0
   20208:	str	r0, [sp, #28]
   2020c:	strb	r3, [r1]
   20210:	ldr	r3, [pc, #960]	; 205d8 <__assert_fail@plt+0xe2b8>
   20214:	str	r2, [sp, #24]
   20218:	add	r3, pc, r3
   2021c:	str	r3, [sp, #52]	; 0x34
   20220:	b	1f978 <__assert_fail@plt+0xd658>
   20224:	ldr	r2, [sp, #28]
   20228:	cmp	r2, #1
   2022c:	add	r4, fp, r2
   20230:	movls	r3, #0
   20234:	movhi	r3, #1
   20238:	cmn	r8, #1
   2023c:	movne	r3, #0
   20240:	cmp	r3, #0
   20244:	beq	20254 <__assert_fail@plt+0xdf34>
   20248:	ldr	r0, [sp, #32]
   2024c:	bl	120e0 <strlen@plt>
   20250:	mov	r8, r0
   20254:	cmp	r8, r4
   20258:	ldrcc	r3, [sp, #32]
   2025c:	movcc	r6, #0
   20260:	addcc	r5, r3, fp
   20264:	bcc	1f9d4 <__assert_fail@plt+0xd6b4>
   20268:	ldr	r0, [sp, #32]
   2026c:	ldr	r1, [sp, #52]	; 0x34
   20270:	add	r5, r0, fp
   20274:	ldr	r2, [sp, #28]
   20278:	mov	r0, r5
   2027c:	bl	11eac <memcmp@plt>
   20280:	cmp	r0, #0
   20284:	bne	2029c <__assert_fail@plt+0xdf7c>
   20288:	ldr	r1, [sp, #36]	; 0x24
   2028c:	cmp	r1, #0
   20290:	bne	1fdf4 <__assert_fail@plt+0xdad4>
   20294:	mov	r6, #1
   20298:	b	1f9d4 <__assert_fail@plt+0xd6b4>
   2029c:	mov	r6, #0
   202a0:	b	1f9d4 <__assert_fail@plt+0xd6b4>
   202a4:	add	r7, sp, #108	; 0x6c
   202a8:	cmn	r8, #1
   202ac:	mov	r3, #0
   202b0:	str	r3, [sp, #108]	; 0x6c
   202b4:	str	r3, [r7, #4]
   202b8:	beq	204a4 <__assert_fail@plt+0xe184>
   202bc:	mov	r1, #0
   202c0:	ldr	r0, [sp, #32]
   202c4:	mov	ip, #1
   202c8:	str	r9, [sp, #88]	; 0x58
   202cc:	str	r6, [sp, #96]	; 0x60
   202d0:	mov	r9, r1
   202d4:	str	r5, [sp, #100]	; 0x64
   202d8:	mov	r6, ip
   202dc:	mov	r5, r7
   202e0:	add	r3, sp, #104	; 0x68
   202e4:	sub	r0, r0, #1
   202e8:	str	r3, [sp, #80]	; 0x50
   202ec:	str	r0, [sp, #84]	; 0x54
   202f0:	str	r1, [sp, #60]	; 0x3c
   202f4:	str	r4, [sp, #92]	; 0x5c
   202f8:	ldr	r2, [sp, #32]
   202fc:	add	r7, r9, fp
   20300:	add	r0, sp, #104	; 0x68
   20304:	mov	r3, r5
   20308:	add	r4, r2, r7
   2030c:	rsb	r2, r7, r8
   20310:	mov	r1, r4
   20314:	bl	12014 <mbrtowc@plt>
   20318:	subs	r2, r0, #0
   2031c:	beq	20428 <__assert_fail@plt+0xe108>
   20320:	cmn	r2, #1
   20324:	beq	20550 <__assert_fail@plt+0xe230>
   20328:	cmn	r2, #2
   2032c:	beq	204f4 <__assert_fail@plt+0xe1d4>
   20330:	ldr	r3, [sp, #36]	; 0x24
   20334:	ldr	r0, [sp, #160]	; 0xa0
   20338:	cmp	r0, #2
   2033c:	movne	r3, #0
   20340:	andeq	r3, r3, #1
   20344:	cmp	r3, #0
   20348:	beq	20404 <__assert_fail@plt+0xe0e4>
   2034c:	cmp	r2, #1
   20350:	beq	20404 <__assert_fail@plt+0xe0e4>
   20354:	ldr	r1, [sp, #84]	; 0x54
   20358:	add	r3, r1, r2
   2035c:	add	r7, r3, r7
   20360:	ldrb	r3, [r4, #1]!
   20364:	sub	r3, r3, #91	; 0x5b
   20368:	cmp	r3, #33	; 0x21
   2036c:	addls	pc, pc, r3, lsl #2
   20370:	b	203fc <__assert_fail@plt+0xe0dc>
   20374:	b	1fdf4 <__assert_fail@plt+0xdad4>
   20378:	b	1fdf4 <__assert_fail@plt+0xdad4>
   2037c:	b	203fc <__assert_fail@plt+0xe0dc>
   20380:	b	1fdf4 <__assert_fail@plt+0xdad4>
   20384:	b	203fc <__assert_fail@plt+0xe0dc>
   20388:	b	1fdf4 <__assert_fail@plt+0xdad4>
   2038c:	b	203fc <__assert_fail@plt+0xe0dc>
   20390:	b	203fc <__assert_fail@plt+0xe0dc>
   20394:	b	203fc <__assert_fail@plt+0xe0dc>
   20398:	b	203fc <__assert_fail@plt+0xe0dc>
   2039c:	b	203fc <__assert_fail@plt+0xe0dc>
   203a0:	b	203fc <__assert_fail@plt+0xe0dc>
   203a4:	b	203fc <__assert_fail@plt+0xe0dc>
   203a8:	b	203fc <__assert_fail@plt+0xe0dc>
   203ac:	b	203fc <__assert_fail@plt+0xe0dc>
   203b0:	b	203fc <__assert_fail@plt+0xe0dc>
   203b4:	b	203fc <__assert_fail@plt+0xe0dc>
   203b8:	b	203fc <__assert_fail@plt+0xe0dc>
   203bc:	b	203fc <__assert_fail@plt+0xe0dc>
   203c0:	b	203fc <__assert_fail@plt+0xe0dc>
   203c4:	b	203fc <__assert_fail@plt+0xe0dc>
   203c8:	b	203fc <__assert_fail@plt+0xe0dc>
   203cc:	b	203fc <__assert_fail@plt+0xe0dc>
   203d0:	b	203fc <__assert_fail@plt+0xe0dc>
   203d4:	b	203fc <__assert_fail@plt+0xe0dc>
   203d8:	b	203fc <__assert_fail@plt+0xe0dc>
   203dc:	b	203fc <__assert_fail@plt+0xe0dc>
   203e0:	b	203fc <__assert_fail@plt+0xe0dc>
   203e4:	b	203fc <__assert_fail@plt+0xe0dc>
   203e8:	b	203fc <__assert_fail@plt+0xe0dc>
   203ec:	b	203fc <__assert_fail@plt+0xe0dc>
   203f0:	b	203fc <__assert_fail@plt+0xe0dc>
   203f4:	b	203fc <__assert_fail@plt+0xe0dc>
   203f8:	b	1fdf4 <__assert_fail@plt+0xdad4>
   203fc:	cmp	r4, r7
   20400:	bne	20360 <__assert_fail@plt+0xe040>
   20404:	ldr	r0, [sp, #104]	; 0x68
   20408:	add	r9, r9, r2
   2040c:	bl	11f78 <iswprint@plt>
   20410:	cmp	r0, #0
   20414:	mov	r0, r5
   20418:	moveq	r6, #0
   2041c:	bl	11e64 <mbsinit@plt>
   20420:	cmp	r0, #0
   20424:	beq	202f8 <__assert_fail@plt+0xdfd8>
   20428:	mov	ip, r6
   2042c:	eor	r2, ip, #1
   20430:	str	r9, [sp, #60]	; 0x3c
   20434:	ldr	r4, [sp, #92]	; 0x5c
   20438:	uxtb	r2, r2
   2043c:	ldr	r9, [sp, #88]	; 0x58
   20440:	ldr	r6, [sp, #96]	; 0x60
   20444:	ldr	r5, [sp, #100]	; 0x64
   20448:	ldr	r3, [sp, #60]	; 0x3c
   2044c:	cmp	r3, #1
   20450:	bls	1ffd4 <__assert_fail@plt+0xdcb4>
   20454:	ldr	r0, [sp, #24]
   20458:	and	r2, r2, r0
   2045c:	b	1ffe0 <__assert_fail@plt+0xdcc0>
   20460:	ldr	r2, [sp, #164]	; 0xa4
   20464:	tst	r2, #1
   20468:	addne	fp, fp, #1
   2046c:	bne	1f99c <__assert_fail@plt+0xd67c>
   20470:	b	1fcac <__assert_fail@plt+0xd98c>
   20474:	ldr	r0, [sp, #36]	; 0x24
   20478:	cmp	r0, #0
   2047c:	beq	1fcac <__assert_fail@plt+0xd98c>
   20480:	b	1fdf4 <__assert_fail@plt+0xdad4>
   20484:	ldr	r2, [sp, #32]
   20488:	ldrb	r3, [r2, #1]
   2048c:	adds	r3, r3, #0
   20490:	movne	r3, #1
   20494:	b	1fdc8 <__assert_fail@plt+0xdaa8>
   20498:	bl	122fc <abort@plt>
   2049c:	ldr	r8, [sp, #60]	; 0x3c
   204a0:	b	1fdf4 <__assert_fail@plt+0xdad4>
   204a4:	ldr	r0, [sp, #32]
   204a8:	bl	120e0 <strlen@plt>
   204ac:	mov	r8, r0
   204b0:	b	202bc <__assert_fail@plt+0xdf9c>
   204b4:	ldr	r2, [pc, #288]	; 205dc <__assert_fail@plt+0xe2bc>
   204b8:	mov	r1, #1
   204bc:	mov	r9, r1
   204c0:	str	r1, [sp, #24]
   204c4:	add	r2, pc, r2
   204c8:	str	r1, [sp, #28]
   204cc:	str	r2, [sp, #52]	; 0x34
   204d0:	b	1f978 <__assert_fail@plt+0xd658>
   204d4:	ldr	r2, [pc, #260]	; 205e0 <__assert_fail@plt+0xe2c0>
   204d8:	mov	r3, #1
   204dc:	mov	r9, r3
   204e0:	str	r3, [sp, #28]
   204e4:	add	r2, pc, r2
   204e8:	str	sl, [sp, #24]
   204ec:	str	r2, [sp, #52]	; 0x34
   204f0:	b	1f978 <__assert_fail@plt+0xd658>
   204f4:	cmp	r8, r7
   204f8:	str	r9, [sp, #60]	; 0x3c
   204fc:	mov	ip, r4
   20500:	ldr	r6, [sp, #96]	; 0x60
   20504:	ldr	r9, [sp, #88]	; 0x58
   20508:	ldr	r4, [sp, #92]	; 0x5c
   2050c:	ldr	r5, [sp, #100]	; 0x64
   20510:	bls	20548 <__assert_fail@plt+0xe228>
   20514:	ldrb	r3, [ip]
   20518:	cmp	r3, #0
   2051c:	beq	20548 <__assert_fail@plt+0xe228>
   20520:	ldr	r3, [sp, #60]	; 0x3c
   20524:	b	20534 <__assert_fail@plt+0xe214>
   20528:	ldrb	r2, [r5, r3]
   2052c:	cmp	r2, #0
   20530:	beq	20544 <__assert_fail@plt+0xe224>
   20534:	add	r3, r3, #1
   20538:	add	r2, fp, r3
   2053c:	cmp	r8, r2
   20540:	bhi	20528 <__assert_fail@plt+0xe208>
   20544:	str	r3, [sp, #60]	; 0x3c
   20548:	mov	r2, #1
   2054c:	b	20448 <__assert_fail@plt+0xe128>
   20550:	str	r9, [sp, #60]	; 0x3c
   20554:	mov	r2, #1
   20558:	ldr	r4, [sp, #92]	; 0x5c
   2055c:	ldr	r6, [sp, #96]	; 0x60
   20560:	ldr	r9, [sp, #88]	; 0x58
   20564:	ldr	r5, [sp, #100]	; 0x64
   20568:	b	20448 <__assert_fail@plt+0xe128>
   2056c:	ldr	r9, [sp, #36]	; 0x24
   20570:	b	20194 <__assert_fail@plt+0xde74>
   20574:	bl	11ed0 <__stack_chk_fail@plt>
   20578:	ldr	r1, [pc, #100]	; 205e4 <__assert_fail@plt+0xe2c4>
   2057c:	mov	r3, #0
   20580:	mov	r0, #1
   20584:	str	r3, [sp, #24]
   20588:	add	r1, pc, r1
   2058c:	str	r0, [sp, #28]
   20590:	mov	r9, r3
   20594:	str	r1, [sp, #52]	; 0x34
   20598:	b	1f978 <__assert_fail@plt+0xd658>
   2059c:	ldr	r0, [pc, #68]	; 205e8 <__assert_fail@plt+0xe2c8>
   205a0:	mov	r3, #1
   205a4:	mov	r9, #0
   205a8:	str	r3, [sp, #24]
   205ac:	add	r0, pc, r0
   205b0:	str	r3, [sp, #28]
   205b4:	str	r0, [sp, #52]	; 0x34
   205b8:	b	1f978 <__assert_fail@plt+0xd658>
   205bc:	andeq	r8, r1, r8, lsl r7
   205c0:	andeq	r0, r0, ip, lsl r2
   205c4:	andeq	r7, r0, r4, lsl #2
   205c8:	andeq	r7, r0, r0, ror #1
   205cc:	muleq	r0, ip, r0
   205d0:	andeq	r7, r0, r8, ror r0
   205d4:	strdeq	r6, [r0], -ip
   205d8:	andeq	r6, r0, r4, lsr #31
   205dc:	strdeq	r6, [r0], -ip
   205e0:	ldrdeq	r6, [r0], -r8
   205e4:	andeq	r6, r0, r4, lsr ip
   205e8:	andeq	r6, r0, r4, lsl ip
   205ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205f0:	sub	sp, sp, #44	; 0x2c
   205f4:	mov	r6, r0
   205f8:	mov	r9, r1
   205fc:	mov	sl, r2
   20600:	mov	r4, r3
   20604:	bl	1211c <__errno_location@plt>
   20608:	ldr	fp, [pc, #412]	; 207ac <__assert_fail@plt+0xe48c>
   2060c:	cmp	r6, #0
   20610:	add	fp, pc, fp
   20614:	ldr	r5, [fp]
   20618:	ldr	r1, [r0]
   2061c:	mov	r8, r0
   20620:	str	r1, [sp, #36]	; 0x24
   20624:	blt	207a4 <__assert_fail@plt+0xe484>
   20628:	ldr	r3, [pc, #384]	; 207b0 <__assert_fail@plt+0xe490>
   2062c:	add	r3, pc, r3
   20630:	ldr	r3, [r3]
   20634:	cmp	r6, r3
   20638:	bcc	2068c <__assert_fail@plt+0xe36c>
   2063c:	add	r7, r6, #1
   20640:	cmn	r7, #-536870911	; 0xe0000001
   20644:	bhi	207a8 <__assert_fail@plt+0xe488>
   20648:	add	r3, fp, #4
   2064c:	cmp	r5, r3
   20650:	beq	2077c <__assert_fail@plt+0xe45c>
   20654:	mov	r0, r5
   20658:	lsl	r1, r7, #3
   2065c:	bl	22744 <__assert_fail@plt+0x10424>
   20660:	mov	r5, r0
   20664:	str	r0, [fp]
   20668:	ldr	fp, [pc, #324]	; 207b4 <__assert_fail@plt+0xe494>
   2066c:	mov	r1, #0
   20670:	add	fp, pc, fp
   20674:	ldr	r0, [fp]
   20678:	rsb	r2, r0, r7
   2067c:	add	r0, r5, r0, lsl #3
   20680:	lsl	r2, r2, #3
   20684:	bl	12158 <memset@plt>
   20688:	str	r7, [fp]
   2068c:	add	r2, r4, #8
   20690:	str	r2, [sp, #32]
   20694:	ldr	r1, [r4]
   20698:	add	fp, r5, r6, lsl #3
   2069c:	ldr	lr, [sp, #32]
   206a0:	mov	r2, r9
   206a4:	ldr	r3, [r4, #4]
   206a8:	ldr	ip, [r5, r6, lsl #3]
   206ac:	ldr	r7, [fp, #4]
   206b0:	orr	r3, r3, #1
   206b4:	str	r1, [sp]
   206b8:	str	r3, [sp, #4]
   206bc:	mov	r1, ip
   206c0:	str	lr, [sp, #8]
   206c4:	mov	r0, r7
   206c8:	ldr	lr, [r4, #40]	; 0x28
   206cc:	str	r3, [sp, #28]
   206d0:	mov	r3, sl
   206d4:	str	lr, [sp, #12]
   206d8:	ldr	lr, [r4, #44]	; 0x2c
   206dc:	str	ip, [sp, #24]
   206e0:	str	lr, [sp, #16]
   206e4:	bl	1f8c4 <__assert_fail@plt+0xd5a4>
   206e8:	ldr	ip, [sp, #24]
   206ec:	cmp	ip, r0
   206f0:	bhi	20768 <__assert_fail@plt+0xe448>
   206f4:	ldr	r3, [pc, #188]	; 207b8 <__assert_fail@plt+0xe498>
   206f8:	add	r1, r0, #1
   206fc:	str	r1, [r5, r6, lsl #3]
   20700:	add	r3, pc, r3
   20704:	cmp	r7, r3
   20708:	beq	2071c <__assert_fail@plt+0xe3fc>
   2070c:	mov	r0, r7
   20710:	str	r1, [sp, #24]
   20714:	bl	11dec <free@plt>
   20718:	ldr	r1, [sp, #24]
   2071c:	mov	r0, r1
   20720:	str	r1, [sp, #24]
   20724:	bl	226ec <__assert_fail@plt+0x103cc>
   20728:	ldr	r3, [sp, #28]
   2072c:	ldr	lr, [sp, #32]
   20730:	mov	r2, r9
   20734:	str	r0, [fp, #4]
   20738:	mov	r7, r0
   2073c:	ldr	ip, [r4]
   20740:	str	r3, [sp, #4]
   20744:	mov	r3, sl
   20748:	str	lr, [sp, #8]
   2074c:	str	ip, [sp]
   20750:	ldr	ip, [r4, #40]	; 0x28
   20754:	ldr	r1, [sp, #24]
   20758:	str	ip, [sp, #12]
   2075c:	ldr	ip, [r4, #44]	; 0x2c
   20760:	str	ip, [sp, #16]
   20764:	bl	1f8c4 <__assert_fail@plt+0xd5a4>
   20768:	ldr	r1, [sp, #36]	; 0x24
   2076c:	mov	r0, r7
   20770:	str	r1, [r8]
   20774:	add	sp, sp, #44	; 0x2c
   20778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2077c:	lsl	r1, r7, #3
   20780:	mov	r0, #0
   20784:	str	r3, [sp, #24]
   20788:	bl	22744 <__assert_fail@plt+0x10424>
   2078c:	ldr	r3, [sp, #24]
   20790:	mov	r5, r0
   20794:	ldm	r3, {r0, r1}
   20798:	str	r5, [fp]
   2079c:	stm	r5, {r0, r1}
   207a0:	b	20668 <__assert_fail@plt+0xe348>
   207a4:	bl	122fc <abort@plt>
   207a8:	bl	22900 <__assert_fail@plt+0x105e0>
   207ac:	andeq	r7, r1, r8, lsl #26
   207b0:			; <UNDEFINED> instruction: 0x00017cb8
   207b4:	andeq	r7, r1, r4, ror ip
   207b8:	ldrdeq	r8, [r1], -ip
   207bc:	push	{r4, r5, r6, lr}
   207c0:	mov	r5, r0
   207c4:	bl	1211c <__errno_location@plt>
   207c8:	cmp	r5, #0
   207cc:	mov	r1, #48	; 0x30
   207d0:	mov	r4, r0
   207d4:	ldr	r0, [pc, #24]	; 207f4 <__assert_fail@plt+0xe4d4>
   207d8:	ldr	r6, [r4]
   207dc:	add	r0, pc, r0
   207e0:	add	r0, r0, #256	; 0x100
   207e4:	movne	r0, r5
   207e8:	bl	228c0 <__assert_fail@plt+0x105a0>
   207ec:	str	r6, [r4]
   207f0:	pop	{r4, r5, r6, pc}
   207f4:	andeq	r8, r1, r0, lsl #2
   207f8:	cmp	r0, #0
   207fc:	beq	20808 <__assert_fail@plt+0xe4e8>
   20800:	ldr	r0, [r0]
   20804:	bx	lr
   20808:	ldr	r0, [pc, #12]	; 2081c <__assert_fail@plt+0xe4fc>
   2080c:	add	r0, pc, r0
   20810:	add	r0, r0, #256	; 0x100
   20814:	ldr	r0, [r0]
   20818:	bx	lr
   2081c:	ldrdeq	r8, [r1], -r0
   20820:	cmp	r0, #0
   20824:	beq	20830 <__assert_fail@plt+0xe510>
   20828:	str	r1, [r0]
   2082c:	bx	lr
   20830:	ldr	r0, [pc, #12]	; 20844 <__assert_fail@plt+0xe524>
   20834:	add	r0, pc, r0
   20838:	add	r0, r0, #256	; 0x100
   2083c:	str	r1, [r0]
   20840:	bx	lr
   20844:	andeq	r8, r1, r8, lsr #1
   20848:	cmp	r0, #0
   2084c:	movne	r3, r0
   20850:	beq	20880 <__assert_fail@plt+0xe560>
   20854:	lsr	ip, r1, #5
   20858:	and	r1, r1, #31
   2085c:	add	r3, r3, ip, lsl #2
   20860:	ldr	ip, [r3, #8]
   20864:	lsr	r0, ip, r1
   20868:	eor	r2, r0, r2
   2086c:	and	r0, r0, #1
   20870:	and	r2, r2, #1
   20874:	eor	ip, ip, r2, lsl r1
   20878:	str	ip, [r3, #8]
   2087c:	bx	lr
   20880:	ldr	r3, [pc, #8]	; 20890 <__assert_fail@plt+0xe570>
   20884:	add	r3, pc, r3
   20888:	add	r3, r3, #256	; 0x100
   2088c:	b	20854 <__assert_fail@plt+0xe534>
   20890:	andeq	r8, r1, r8, asr r0
   20894:	subs	r3, r0, #0
   20898:	beq	208a8 <__assert_fail@plt+0xe588>
   2089c:	ldr	r0, [r3, #4]
   208a0:	str	r1, [r3, #4]
   208a4:	bx	lr
   208a8:	ldr	r3, [pc, #8]	; 208b8 <__assert_fail@plt+0xe598>
   208ac:	add	r3, pc, r3
   208b0:	add	r3, r3, #256	; 0x100
   208b4:	b	2089c <__assert_fail@plt+0xe57c>
   208b8:	andeq	r8, r1, r0, lsr r0
   208bc:	cmp	r0, #0
   208c0:	push	{r3, lr}
   208c4:	beq	208e8 <__assert_fail@plt+0xe5c8>
   208c8:	cmp	r2, #0
   208cc:	cmpne	r1, #0
   208d0:	mov	r3, #8
   208d4:	strne	r1, [r0, #40]	; 0x28
   208d8:	str	r3, [r0]
   208dc:	strne	r2, [r0, #44]	; 0x2c
   208e0:	popne	{r3, pc}
   208e4:	bl	122fc <abort@plt>
   208e8:	ldr	r0, [pc, #8]	; 208f8 <__assert_fail@plt+0xe5d8>
   208ec:	add	r0, pc, r0
   208f0:	add	r0, r0, #256	; 0x100
   208f4:	b	208c8 <__assert_fail@plt+0xe5a8>
   208f8:	strdeq	r7, [r1], -r0
   208fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20900:	sub	sp, sp, #24
   20904:	mov	r7, r0
   20908:	mov	sl, r1
   2090c:	ldr	r4, [sp, #56]	; 0x38
   20910:	mov	r9, r2
   20914:	mov	r8, r3
   20918:	cmp	r4, #0
   2091c:	beq	20970 <__assert_fail@plt+0xe650>
   20920:	bl	1211c <__errno_location@plt>
   20924:	ldr	r3, [r4]
   20928:	add	lr, r4, #8
   2092c:	mov	r1, sl
   20930:	mov	r2, r9
   20934:	ldr	r6, [r0]
   20938:	mov	r5, r0
   2093c:	str	r3, [sp]
   20940:	mov	r0, r7
   20944:	ldr	ip, [r4, #4]
   20948:	mov	r3, r8
   2094c:	stmib	sp, {ip, lr}
   20950:	ldr	ip, [r4, #40]	; 0x28
   20954:	str	ip, [sp, #12]
   20958:	ldr	ip, [r4, #44]	; 0x2c
   2095c:	str	ip, [sp, #16]
   20960:	bl	1f8c4 <__assert_fail@plt+0xd5a4>
   20964:	str	r6, [r5]
   20968:	add	sp, sp, #24
   2096c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20970:	ldr	r4, [pc, #8]	; 20980 <__assert_fail@plt+0xe660>
   20974:	add	r4, pc, r4
   20978:	add	r4, r4, #256	; 0x100
   2097c:	b	20920 <__assert_fail@plt+0xe600>
   20980:	andeq	r7, r1, r8, ror #30
   20984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20988:	subs	r4, r3, #0
   2098c:	sub	sp, sp, #36	; 0x24
   20990:	mov	r7, r0
   20994:	mov	r6, r1
   20998:	mov	r5, r2
   2099c:	beq	20a58 <__assert_fail@plt+0xe738>
   209a0:	bl	1211c <__errno_location@plt>
   209a4:	ldr	r3, [r4]
   209a8:	ldr	sl, [r4, #4]
   209ac:	add	r9, r4, #8
   209b0:	mov	r8, r0
   209b4:	mov	r0, #0
   209b8:	ldr	r2, [r8]
   209bc:	cmp	r5, r0
   209c0:	orreq	sl, sl, #1
   209c4:	str	r9, [sp, #8]
   209c8:	mov	r1, r0
   209cc:	stm	sp, {r3, sl}
   209d0:	mov	r3, r6
   209d4:	ldr	ip, [r4, #40]	; 0x28
   209d8:	str	r2, [sp, #28]
   209dc:	mov	r2, r7
   209e0:	str	ip, [sp, #12]
   209e4:	ldr	ip, [r4, #44]	; 0x2c
   209e8:	str	ip, [sp, #16]
   209ec:	bl	1f8c4 <__assert_fail@plt+0xd5a4>
   209f0:	add	r1, r0, #1
   209f4:	mov	fp, r0
   209f8:	str	r1, [sp, #24]
   209fc:	mov	r0, r1
   20a00:	bl	226ec <__assert_fail@plt+0x103cc>
   20a04:	ldr	lr, [r4]
   20a08:	str	sl, [sp, #4]
   20a0c:	mov	r3, r6
   20a10:	str	r9, [sp, #8]
   20a14:	mov	r2, r7
   20a18:	str	lr, [sp]
   20a1c:	ldr	lr, [r4, #40]	; 0x28
   20a20:	ldr	r1, [sp, #24]
   20a24:	str	lr, [sp, #12]
   20a28:	ldr	lr, [r4, #44]	; 0x2c
   20a2c:	str	lr, [sp, #16]
   20a30:	str	r0, [sp, #24]
   20a34:	bl	1f8c4 <__assert_fail@plt+0xd5a4>
   20a38:	ldr	r3, [sp, #28]
   20a3c:	cmp	r5, #0
   20a40:	str	r3, [r8]
   20a44:	ldr	ip, [sp, #24]
   20a48:	strne	fp, [r5]
   20a4c:	mov	r0, ip
   20a50:	add	sp, sp, #36	; 0x24
   20a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a58:	ldr	r4, [pc, #8]	; 20a68 <__assert_fail@plt+0xe748>
   20a5c:	add	r4, pc, r4
   20a60:	add	r4, r4, #256	; 0x100
   20a64:	b	209a0 <__assert_fail@plt+0xe680>
   20a68:	andeq	r7, r1, r0, lsl #29
   20a6c:	mov	r3, r2
   20a70:	mov	r2, #0
   20a74:	b	20984 <__assert_fail@plt+0xe664>
   20a78:	ldr	r2, [pc, #152]	; 20b18 <__assert_fail@plt+0xe7f8>
   20a7c:	push	{r3, r4, r5, r6, r7, lr}
   20a80:	add	r2, pc, r2
   20a84:	ldr	r3, [pc, #144]	; 20b1c <__assert_fail@plt+0xe7fc>
   20a88:	ldr	r6, [r2]
   20a8c:	add	r3, pc, r3
   20a90:	cmp	r6, #1
   20a94:	ldr	r7, [r3]
   20a98:	movhi	r4, #1
   20a9c:	movhi	r5, r7
   20aa0:	bls	20abc <__assert_fail@plt+0xe79c>
   20aa4:	ldr	r0, [r5, #12]
   20aa8:	add	r4, r4, #1
   20aac:	bl	11dec <free@plt>
   20ab0:	cmp	r4, r6
   20ab4:	add	r5, r5, #8
   20ab8:	bne	20aa4 <__assert_fail@plt+0xe784>
   20abc:	ldr	r4, [pc, #92]	; 20b20 <__assert_fail@plt+0xe800>
   20ac0:	ldr	r0, [r7, #4]
   20ac4:	add	r4, pc, r4
   20ac8:	cmp	r0, r4
   20acc:	beq	20ae4 <__assert_fail@plt+0xe7c4>
   20ad0:	bl	11dec <free@plt>
   20ad4:	ldr	r3, [pc, #72]	; 20b24 <__assert_fail@plt+0xe804>
   20ad8:	mov	r2, #256	; 0x100
   20adc:	add	r3, pc, r3
   20ae0:	stmib	r3, {r2, r4}
   20ae4:	ldr	r4, [pc, #60]	; 20b28 <__assert_fail@plt+0xe808>
   20ae8:	add	r4, pc, r4
   20aec:	add	r5, r4, #4
   20af0:	cmp	r7, r5
   20af4:	beq	20b04 <__assert_fail@plt+0xe7e4>
   20af8:	mov	r0, r7
   20afc:	bl	11dec <free@plt>
   20b00:	str	r5, [r4]
   20b04:	ldr	r3, [pc, #32]	; 20b2c <__assert_fail@plt+0xe80c>
   20b08:	mov	r2, #1
   20b0c:	add	r3, pc, r3
   20b10:	str	r2, [r3]
   20b14:	pop	{r3, r4, r5, r6, r7, pc}
   20b18:	andeq	r7, r1, r4, ror #16
   20b1c:	andeq	r7, r1, ip, lsl #17
   20b20:	andeq	r7, r1, r8, lsl lr
   20b24:	andeq	r7, r1, ip, lsr r8
   20b28:	andeq	r7, r1, r0, lsr r8
   20b2c:	ldrdeq	r7, [r1], -r8
   20b30:	ldr	r3, [pc, #12]	; 20b44 <__assert_fail@plt+0xe824>
   20b34:	mvn	r2, #0
   20b38:	add	r3, pc, r3
   20b3c:	add	r3, r3, #256	; 0x100
   20b40:	b	205ec <__assert_fail@plt+0xe2cc>
   20b44:	andeq	r7, r1, r4, lsr #27
   20b48:	ldr	r3, [pc, #8]	; 20b58 <__assert_fail@plt+0xe838>
   20b4c:	add	r3, pc, r3
   20b50:	add	r3, r3, #256	; 0x100
   20b54:	b	205ec <__assert_fail@plt+0xe2cc>
   20b58:	muleq	r1, r0, sp
   20b5c:	mov	r1, r0
   20b60:	mov	r0, #0
   20b64:	b	20b30 <__assert_fail@plt+0xe810>
   20b68:	mov	r2, r1
   20b6c:	mov	r1, r0
   20b70:	mov	r0, #0
   20b74:	b	20b48 <__assert_fail@plt+0xe828>
   20b78:	ldr	r3, [pc, #92]	; 20bdc <__assert_fail@plt+0xe8bc>
   20b7c:	ldr	ip, [pc, #92]	; 20be0 <__assert_fail@plt+0xe8c0>
   20b80:	add	r3, pc, r3
   20b84:	push	{r4, r5, r6, r7, lr}
   20b88:	sub	sp, sp, #60	; 0x3c
   20b8c:	ldr	r4, [r3, ip]
   20b90:	add	r5, sp, #4
   20b94:	mov	r7, r2
   20b98:	mov	r6, r0
   20b9c:	mov	r0, r5
   20ba0:	ldr	r3, [r4]
   20ba4:	str	r3, [sp, #52]	; 0x34
   20ba8:	bl	1f70c <__assert_fail@plt+0xd3ec>
   20bac:	mov	r3, r5
   20bb0:	mvn	r2, #0
   20bb4:	mov	r0, r6
   20bb8:	mov	r1, r7
   20bbc:	bl	205ec <__assert_fail@plt+0xe2cc>
   20bc0:	ldr	r2, [sp, #52]	; 0x34
   20bc4:	ldr	r3, [r4]
   20bc8:	cmp	r2, r3
   20bcc:	bne	20bd8 <__assert_fail@plt+0xe8b8>
   20bd0:	add	sp, sp, #60	; 0x3c
   20bd4:	pop	{r4, r5, r6, r7, pc}
   20bd8:	bl	11ed0 <__stack_chk_fail@plt>
   20bdc:	andeq	r7, r1, r8, ror r4
   20be0:	andeq	r0, r0, ip, lsl r2
   20be4:	ldr	ip, [pc, #96]	; 20c4c <__assert_fail@plt+0xe92c>
   20be8:	push	{r4, r5, r6, r7, r8, lr}
   20bec:	add	ip, pc, ip
   20bf0:	ldr	lr, [pc, #88]	; 20c50 <__assert_fail@plt+0xe930>
   20bf4:	sub	sp, sp, #56	; 0x38
   20bf8:	mov	r8, r3
   20bfc:	add	r5, sp, #4
   20c00:	mov	r7, r2
   20c04:	mov	r6, r0
   20c08:	ldr	r4, [ip, lr]
   20c0c:	mov	r0, r5
   20c10:	ldr	r3, [r4]
   20c14:	str	r3, [sp, #52]	; 0x34
   20c18:	bl	1f70c <__assert_fail@plt+0xd3ec>
   20c1c:	mov	r2, r8
   20c20:	mov	r3, r5
   20c24:	mov	r0, r6
   20c28:	mov	r1, r7
   20c2c:	bl	205ec <__assert_fail@plt+0xe2cc>
   20c30:	ldr	r2, [sp, #52]	; 0x34
   20c34:	ldr	r3, [r4]
   20c38:	cmp	r2, r3
   20c3c:	bne	20c48 <__assert_fail@plt+0xe928>
   20c40:	add	sp, sp, #56	; 0x38
   20c44:	pop	{r4, r5, r6, r7, r8, pc}
   20c48:	bl	11ed0 <__stack_chk_fail@plt>
   20c4c:	andeq	r7, r1, ip, lsl #8
   20c50:	andeq	r0, r0, ip, lsl r2
   20c54:	mov	r2, r1
   20c58:	mov	r1, r0
   20c5c:	mov	r0, #0
   20c60:	b	20b78 <__assert_fail@plt+0xe858>
   20c64:	mov	ip, r1
   20c68:	mov	r3, r2
   20c6c:	mov	r1, r0
   20c70:	mov	r2, ip
   20c74:	mov	r0, #0
   20c78:	b	20be4 <__assert_fail@plt+0xe8c4>
   20c7c:	push	{r4, r5, r6, r7, r8, lr}
   20c80:	mov	r5, r2
   20c84:	ldr	lr, [pc, #136]	; 20d14 <__assert_fail@plt+0xe9f4>
   20c88:	mov	r7, r0
   20c8c:	mov	r6, r1
   20c90:	ldr	r4, [pc, #128]	; 20d18 <__assert_fail@plt+0xe9f8>
   20c94:	add	lr, pc, lr
   20c98:	sub	sp, sp, #56	; 0x38
   20c9c:	add	lr, lr, #256	; 0x100
   20ca0:	ldr	r8, [pc, #116]	; 20d1c <__assert_fail@plt+0xe9fc>
   20ca4:	add	r4, pc, r4
   20ca8:	add	ip, sp, #4
   20cac:	ldm	lr!, {r0, r1, r2, r3}
   20cb0:	ldr	r4, [r4, r8]
   20cb4:	stmia	ip!, {r0, r1, r2, r3}
   20cb8:	ldm	lr!, {r0, r1, r2, r3}
   20cbc:	ldr	r8, [r4]
   20cc0:	stmia	ip!, {r0, r1, r2, r3}
   20cc4:	ldm	lr, {r0, r1, r2, r3}
   20cc8:	str	r8, [sp, #52]	; 0x34
   20ccc:	stm	ip, {r0, r1, r2, r3}
   20cd0:	mov	r1, r5
   20cd4:	add	r5, sp, #4
   20cd8:	mov	r2, #1
   20cdc:	mov	r0, r5
   20ce0:	bl	20848 <__assert_fail@plt+0xe528>
   20ce4:	mov	r2, r6
   20ce8:	mov	r3, r5
   20cec:	mov	r1, r7
   20cf0:	mov	r0, #0
   20cf4:	bl	205ec <__assert_fail@plt+0xe2cc>
   20cf8:	ldr	r2, [sp, #52]	; 0x34
   20cfc:	ldr	r3, [r4]
   20d00:	cmp	r2, r3
   20d04:	bne	20d10 <__assert_fail@plt+0xe9f0>
   20d08:	add	sp, sp, #56	; 0x38
   20d0c:	pop	{r4, r5, r6, r7, r8, pc}
   20d10:	bl	11ed0 <__stack_chk_fail@plt>
   20d14:	andeq	r7, r1, r8, asr #24
   20d18:	andeq	r7, r1, r4, asr r3
   20d1c:	andeq	r0, r0, ip, lsl r2
   20d20:	mov	r2, r1
   20d24:	mvn	r1, #0
   20d28:	b	20c7c <__assert_fail@plt+0xe95c>
   20d2c:	mov	r1, #58	; 0x3a
   20d30:	b	20d20 <__assert_fail@plt+0xea00>
   20d34:	mov	r2, #58	; 0x3a
   20d38:	b	20c7c <__assert_fail@plt+0xe95c>
   20d3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20d40:	mov	r5, r2
   20d44:	ldr	lr, [pc, #144]	; 20ddc <__assert_fail@plt+0xeabc>
   20d48:	mov	r8, r0
   20d4c:	mov	r9, r1
   20d50:	mov	r7, r3
   20d54:	add	lr, pc, lr
   20d58:	ldr	r4, [pc, #128]	; 20de0 <__assert_fail@plt+0xeac0>
   20d5c:	add	lr, lr, #256	; 0x100
   20d60:	sub	sp, sp, #56	; 0x38
   20d64:	ldr	sl, [pc, #120]	; 20de4 <__assert_fail@plt+0xeac4>
   20d68:	add	r4, pc, r4
   20d6c:	ldm	lr!, {r0, r1, r2, r3}
   20d70:	add	ip, sp, #4
   20d74:	ldr	r4, [r4, sl]
   20d78:	ldr	r6, [sp, #88]	; 0x58
   20d7c:	stmia	ip!, {r0, r1, r2, r3}
   20d80:	ldm	lr!, {r0, r1, r2, r3}
   20d84:	ldr	sl, [r4]
   20d88:	stmia	ip!, {r0, r1, r2, r3}
   20d8c:	ldm	lr, {r0, r1, r2, r3}
   20d90:	str	sl, [sp, #52]	; 0x34
   20d94:	stm	ip, {r0, r1, r2, r3}
   20d98:	mov	r2, r5
   20d9c:	add	r5, sp, #4
   20da0:	mov	r1, r9
   20da4:	mov	r0, r5
   20da8:	bl	208bc <__assert_fail@plt+0xe59c>
   20dac:	mov	r2, r6
   20db0:	mov	r3, r5
   20db4:	mov	r0, r8
   20db8:	mov	r1, r7
   20dbc:	bl	205ec <__assert_fail@plt+0xe2cc>
   20dc0:	ldr	r2, [sp, #52]	; 0x34
   20dc4:	ldr	r3, [r4]
   20dc8:	cmp	r2, r3
   20dcc:	bne	20dd8 <__assert_fail@plt+0xeab8>
   20dd0:	add	sp, sp, #56	; 0x38
   20dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20dd8:	bl	11ed0 <__stack_chk_fail@plt>
   20ddc:	andeq	r7, r1, r8, lsl #23
   20de0:	muleq	r1, r0, r2
   20de4:	andeq	r0, r0, ip, lsl r2
   20de8:	push	{lr}		; (str lr, [sp, #-4]!)
   20dec:	sub	sp, sp, #12
   20df0:	mvn	ip, #0
   20df4:	str	ip, [sp]
   20df8:	bl	20d3c <__assert_fail@plt+0xea1c>
   20dfc:	add	sp, sp, #12
   20e00:	pop	{pc}		; (ldr pc, [sp], #4)
   20e04:	mov	ip, r1
   20e08:	mov	r3, r2
   20e0c:	mov	r1, r0
   20e10:	mov	r2, ip
   20e14:	mov	r0, #0
   20e18:	b	20de8 <__assert_fail@plt+0xeac8>
   20e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   20e20:	sub	sp, sp, #12
   20e24:	mov	lr, r1
   20e28:	mov	ip, r2
   20e2c:	mov	r1, r0
   20e30:	str	r3, [sp]
   20e34:	mov	r2, lr
   20e38:	mov	r3, ip
   20e3c:	mov	r0, #0
   20e40:	bl	20d3c <__assert_fail@plt+0xea1c>
   20e44:	add	sp, sp, #12
   20e48:	pop	{pc}		; (ldr pc, [sp], #4)
   20e4c:	ldr	r3, [pc, #12]	; 20e60 <__assert_fail@plt+0xeb40>
   20e50:	ldr	ip, [pc, #12]	; 20e64 <__assert_fail@plt+0xeb44>
   20e54:	add	r3, pc, r3
   20e58:	ldr	r3, [r3, ip]
   20e5c:	b	205ec <__assert_fail@plt+0xe2cc>
   20e60:	andeq	r7, r1, r4, lsr #3
   20e64:	andeq	r0, r0, r4, lsl r2
   20e68:	mov	r2, r1
   20e6c:	mov	r1, r0
   20e70:	mov	r0, #0
   20e74:	b	20e4c <__assert_fail@plt+0xeb2c>
   20e78:	mvn	r2, #0
   20e7c:	b	20e4c <__assert_fail@plt+0xeb2c>
   20e80:	mov	r1, r0
   20e84:	mov	r0, #0
   20e88:	b	20e78 <__assert_fail@plt+0xeb58>
   20e8c:	push	{r3, r4, r5, r6, r7, lr}
   20e90:	subs	r5, r0, #0
   20e94:	ldr	r3, [pc, #100]	; 20f00 <__assert_fail@plt+0xebe0>
   20e98:	add	r3, pc, r3
   20e9c:	beq	20ef0 <__assert_fail@plt+0xebd0>
   20ea0:	ldr	r2, [pc, #92]	; 20f04 <__assert_fail@plt+0xebe4>
   20ea4:	ldr	r3, [r3, r2]
   20ea8:	ldr	r6, [r3]
   20eac:	bl	1211c <__errno_location@plt>
   20eb0:	ldr	r4, [r0]
   20eb4:	cmp	r4, #0
   20eb8:	beq	20ef4 <__assert_fail@plt+0xebd4>
   20ebc:	ldr	r1, [pc, #68]	; 20f08 <__assert_fail@plt+0xebe8>
   20ec0:	add	r1, pc, r1
   20ec4:	mov	r2, #5
   20ec8:	mov	r0, #0
   20ecc:	bl	11ec4 <dcgettext@plt>
   20ed0:	mov	r7, r0
   20ed4:	mov	r0, r5
   20ed8:	bl	20d2c <__assert_fail@plt+0xea0c>
   20edc:	mov	r1, r4
   20ee0:	mov	r2, r7
   20ee4:	mov	r3, r0
   20ee8:	mov	r0, r6
   20eec:	bl	12020 <error@plt>
   20ef0:	bl	122fc <abort@plt>
   20ef4:	ldr	r1, [pc, #16]	; 20f0c <__assert_fail@plt+0xebec>
   20ef8:	add	r1, pc, r1
   20efc:	b	20ec4 <__assert_fail@plt+0xeba4>
   20f00:	andeq	r7, r1, r0, ror #2
   20f04:	andeq	r0, r0, r4, asr #4
   20f08:	andeq	r6, r0, r0, ror #6
   20f0c:	andeq	r6, r0, r8, lsl r3
   20f10:	ldr	ip, [pc, #604]	; 21174 <__assert_fail@plt+0xee54>
   20f14:	ldr	r3, [pc, #604]	; 21178 <__assert_fail@plt+0xee58>
   20f18:	add	ip, pc, ip
   20f1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20f20:	subs	r7, r1, #0
   20f24:	ldr	r5, [ip, r3]
   20f28:	sub	sp, sp, #16
   20f2c:	mov	r6, r0
   20f30:	ldr	r3, [r5]
   20f34:	str	r3, [sp, #12]
   20f38:	beq	20fb0 <__assert_fail@plt+0xec90>
   20f3c:	cmp	r0, #0
   20f40:	beq	20fd0 <__assert_fail@plt+0xecb0>
   20f44:	ldr	r1, [pc, #560]	; 2117c <__assert_fail@plt+0xee5c>
   20f48:	add	r1, pc, r1
   20f4c:	bl	1db64 <__assert_fail@plt+0xb844>
   20f50:	subs	r8, r0, #0
   20f54:	beq	21100 <__assert_fail@plt+0xede0>
   20f58:	movw	r0, #2076	; 0x81c
   20f5c:	bl	226ec <__assert_fail@plt+0x103cc>
   20f60:	ldr	ip, [pc, #536]	; 21180 <__assert_fail@plt+0xee60>
   20f64:	cmp	r7, #2048	; 0x800
   20f68:	movcc	r3, r7
   20f6c:	movcs	r3, #2048	; 0x800
   20f70:	mov	r2, #0
   20f74:	add	ip, pc, ip
   20f78:	mov	r4, r0
   20f7c:	mov	r0, r8
   20f80:	add	r1, r4, #12
   20f84:	str	r8, [r4]
   20f88:	str	r6, [r4, #8]
   20f8c:	str	ip, [r4, #4]
   20f90:	bl	12140 <setvbuf@plt>
   20f94:	mov	r0, r4
   20f98:	ldr	r2, [sp, #12]
   20f9c:	ldr	r3, [r5]
   20fa0:	cmp	r2, r3
   20fa4:	bne	21170 <__assert_fail@plt+0xee50>
   20fa8:	add	sp, sp, #16
   20fac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20fb0:	movw	r0, #2076	; 0x81c
   20fb4:	bl	226ec <__assert_fail@plt+0x103cc>
   20fb8:	ldr	r2, [pc, #452]	; 21184 <__assert_fail@plt+0xee64>
   20fbc:	add	r2, pc, r2
   20fc0:	mov	r3, r0
   20fc4:	str	r7, [r3]
   20fc8:	stmib	r3, {r2, r7}
   20fcc:	b	20f98 <__assert_fail@plt+0xec78>
   20fd0:	movw	r0, #2076	; 0x81c
   20fd4:	bl	226ec <__assert_fail@plt+0x103cc>
   20fd8:	ldr	r3, [pc, #424]	; 21188 <__assert_fail@plt+0xee68>
   20fdc:	mov	r1, r6
   20fe0:	add	r3, pc, r3
   20fe4:	mov	r4, r0
   20fe8:	ldr	r0, [pc, #412]	; 2118c <__assert_fail@plt+0xee6c>
   20fec:	str	r6, [r4]
   20ff0:	add	r8, r4, #16
   20ff4:	add	r0, pc, r0
   20ff8:	str	r6, [r4, #8]
   20ffc:	str	r6, [r4, #12]
   21000:	str	r3, [r4, #4]
   21004:	bl	1202c <open64@plt>
   21008:	subs	r9, r0, #0
   2100c:	blt	21050 <__assert_fail@plt+0xed30>
   21010:	cmp	r7, #1024	; 0x400
   21014:	movcc	r2, r7
   21018:	movcs	r2, #1024	; 0x400
   2101c:	mov	r1, r8
   21020:	movw	r3, #2060	; 0x80c
   21024:	bl	11d8c <__read_chk@plt>
   21028:	mov	r3, r0
   2102c:	mov	r0, r9
   21030:	bic	r9, r3, r3, asr #31
   21034:	bl	12308 <close@plt>
   21038:	cmp	r9, #1024	; 0x400
   2103c:	bcc	21108 <__assert_fail@plt+0xede8>
   21040:	mov	r0, r8
   21044:	bl	21554 <__assert_fail@plt+0xf234>
   21048:	mov	r0, r4
   2104c:	b	20f98 <__assert_fail@plt+0xec78>
   21050:	add	r7, sp, #4
   21054:	mov	r1, r6
   21058:	mov	r9, #12
   2105c:	mov	r0, r7
   21060:	bl	11ff0 <gettimeofday@plt>
   21064:	mov	r3, r7
   21068:	ldm	r3!, {r0, r1}
   2106c:	str	r0, [r4, #16]
   21070:	str	r1, [r8, #4]
   21074:	bl	120bc <getpid@plt>
   21078:	str	r0, [sp, #4]
   2107c:	ldr	r0, [r7]
   21080:	str	r0, [r4, #24]
   21084:	bl	1226c <getppid@plt>
   21088:	rsb	r2, r9, #1024	; 0x400
   2108c:	cmp	r2, #4
   21090:	movcs	r2, #4
   21094:	mov	r1, r7
   21098:	add	r6, r2, r9
   2109c:	str	r0, [sp, #4]
   210a0:	add	r0, r8, r9
   210a4:	bl	11e28 <memcpy@plt>
   210a8:	cmp	r6, #1024	; 0x400
   210ac:	bcs	21040 <__assert_fail@plt+0xed20>
   210b0:	bl	11dbc <getuid@plt>
   210b4:	rsb	r2, r6, #1024	; 0x400
   210b8:	cmp	r2, #4
   210bc:	movcs	r2, #4
   210c0:	mov	r1, r7
   210c4:	add	r9, r2, r6
   210c8:	str	r0, [sp, #4]
   210cc:	add	r0, r8, r6
   210d0:	bl	11e28 <memcpy@plt>
   210d4:	cmp	r9, #1024	; 0x400
   210d8:	bcs	21040 <__assert_fail@plt+0xed20>
   210dc:	bl	1214c <getgid@plt>
   210e0:	rsb	r2, r9, #1024	; 0x400
   210e4:	mov	r1, r7
   210e8:	cmp	r2, #4
   210ec:	movcs	r2, #4
   210f0:	str	r0, [sp, #4]
   210f4:	add	r0, r8, r9
   210f8:	bl	11e28 <memcpy@plt>
   210fc:	b	21040 <__assert_fail@plt+0xed20>
   21100:	mov	r0, r8
   21104:	b	20f98 <__assert_fail@plt+0xec78>
   21108:	add	r7, sp, #4
   2110c:	rsb	sl, r9, #1024	; 0x400
   21110:	cmp	sl, #8
   21114:	movcs	sl, #8
   21118:	mov	r1, r6
   2111c:	mov	r0, r7
   21120:	add	r6, sl, r9
   21124:	bl	11ff0 <gettimeofday@plt>
   21128:	mov	r2, sl
   2112c:	add	r0, r8, r9
   21130:	mov	r1, r7
   21134:	bl	11e28 <memcpy@plt>
   21138:	cmp	r6, #1024	; 0x400
   2113c:	bcs	21040 <__assert_fail@plt+0xed20>
   21140:	bl	120bc <getpid@plt>
   21144:	rsb	r2, r6, #1024	; 0x400
   21148:	cmp	r2, #4
   2114c:	movcs	r2, #4
   21150:	mov	r1, r7
   21154:	add	r9, r2, r6
   21158:	str	r0, [sp, #4]
   2115c:	add	r0, r8, r6
   21160:	bl	11e28 <memcpy@plt>
   21164:	cmp	r9, #1024	; 0x400
   21168:	bcc	21084 <__assert_fail@plt+0xed64>
   2116c:	b	21040 <__assert_fail@plt+0xed20>
   21170:	bl	11ed0 <__stack_chk_fail@plt>
   21174:	andeq	r7, r1, r0, ror #1
   21178:	andeq	r0, r0, ip, lsl r2
   2117c:	andeq	r6, r0, r8, ror #5
   21180:			; <UNDEFINED> instruction: 0xffffff10
   21184:			; <UNDEFINED> instruction: 0xfffffec8
   21188:			; <UNDEFINED> instruction: 0xfffffea4
   2118c:	andeq	r6, r0, r0, asr #4
   21190:	str	r1, [r0, #4]
   21194:	bx	lr
   21198:	str	r1, [r0, #8]
   2119c:	bx	lr
   211a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211a4:	mov	r6, r0
   211a8:	ldr	r3, [r0]
   211ac:	sub	sp, sp, #12
   211b0:	mov	r5, r1
   211b4:	mov	r4, r2
   211b8:	cmp	r3, #0
   211bc:	beq	21220 <__assert_fail@plt+0xef00>
   211c0:	str	r3, [sp, #4]
   211c4:	bl	1211c <__errno_location@plt>
   211c8:	ldr	r3, [sp, #4]
   211cc:	mov	r7, r0
   211d0:	b	211f8 <__assert_fail@plt+0xeed8>
   211d4:	ldr	r3, [r6]
   211d8:	ldr	r3, [r3]
   211dc:	ands	r3, r3, #32
   211e0:	movne	r3, r2
   211e4:	str	r3, [r7]
   211e8:	ldr	r3, [r6, #4]
   211ec:	ldr	r0, [r6, #8]
   211f0:	blx	r3
   211f4:	ldr	r3, [r6]
   211f8:	mov	r2, r4
   211fc:	mov	r0, r5
   21200:	mov	r1, #1
   21204:	bl	122c0 <fread_unlocked@plt>
   21208:	ldr	r2, [r7]
   2120c:	subs	r4, r4, r0
   21210:	add	r5, r5, r0
   21214:	bne	211d4 <__assert_fail@plt+0xeeb4>
   21218:	add	sp, sp, #12
   2121c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21220:	ldr	r8, [r0, #12]
   21224:	cmp	r2, r8
   21228:	bls	212e0 <__assert_fail@plt+0xefc0>
   2122c:	add	r9, r0, #12
   21230:	rsb	r1, r8, #2064	; 0x810
   21234:	add	r1, r9, r1
   21238:	add	sl, r9, #1040	; 0x410
   2123c:	add	r7, r0, #16
   21240:	mov	r0, r5
   21244:	mov	r2, r8
   21248:	add	r5, r5, r8
   2124c:	bl	11e28 <memcpy@plt>
   21250:	tst	r5, #3
   21254:	rsb	r4, r8, r4
   21258:	beq	21278 <__assert_fail@plt+0xef58>
   2125c:	b	212bc <__assert_fail@plt+0xef9c>
   21260:	mov	r1, r5
   21264:	mov	r0, r7
   21268:	bl	21324 <__assert_fail@plt+0xf004>
   2126c:	subs	r4, r4, #1024	; 0x400
   21270:	add	r5, r5, #1024	; 0x400
   21274:	beq	212b0 <__assert_fail@plt+0xef90>
   21278:	cmp	r4, #1024	; 0x400
   2127c:	bcs	21260 <__assert_fail@plt+0xef40>
   21280:	add	fp, r9, #1040	; 0x410
   21284:	mov	r0, r7
   21288:	mov	r1, fp
   2128c:	bl	21324 <__assert_fail@plt+0xf004>
   21290:	mov	r1, fp
   21294:	mov	r8, #1024	; 0x400
   21298:	mov	r2, r4
   2129c:	mov	r0, r5
   212a0:	bl	11e28 <memcpy@plt>
   212a4:	rsb	r4, r4, r8
   212a8:	str	r4, [r6, #12]
   212ac:	b	21218 <__assert_fail@plt+0xeef8>
   212b0:	str	r4, [r6, #12]
   212b4:	add	sp, sp, #12
   212b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212bc:	mov	r1, sl
   212c0:	mov	r0, r7
   212c4:	bl	21324 <__assert_fail@plt+0xf004>
   212c8:	mov	r8, #1024	; 0x400
   212cc:	cmp	r4, r8
   212d0:	mov	r1, sl
   212d4:	mov	fp, sl
   212d8:	bhi	21240 <__assert_fail@plt+0xef20>
   212dc:	b	21290 <__assert_fail@plt+0xef70>
   212e0:	add	r1, r0, #12
   212e4:	rsb	r3, r8, #2064	; 0x810
   212e8:	add	r1, r1, r3
   212ec:	b	21298 <__assert_fail@plt+0xef78>
   212f0:	push	{r3, r4, r5, lr}
   212f4:	mov	r1, #0
   212f8:	mov	r4, r0
   212fc:	ldr	r5, [r0]
   21300:	movw	r2, #2076	; 0x81c
   21304:	bl	12158 <memset@plt>
   21308:	mov	r0, r4
   2130c:	bl	11dec <free@plt>
   21310:	subs	r0, r5, #0
   21314:	beq	21320 <__assert_fail@plt+0xf000>
   21318:	pop	{r3, r4, r5, lr}
   2131c:	b	238f4 <__assert_fail@plt+0x115d4>
   21320:	pop	{r3, r4, r5, pc}
   21324:	push	{r4, r5, r6, r7, r8, r9}
   21328:	add	r6, r0, #512	; 0x200
   2132c:	ldr	r5, [r0, #1032]	; 0x408
   21330:	add	r4, r0, #16
   21334:	ldr	ip, [r0, #1028]	; 0x404
   21338:	mov	r3, r0
   2133c:	add	r5, r5, #1
   21340:	ldr	r2, [r0, #1024]	; 0x400
   21344:	add	ip, r5, ip
   21348:	str	r5, [r0, #1032]	; 0x408
   2134c:	ldr	r7, [r4, #-16]
   21350:	eor	r2, r2, r2, lsl #13
   21354:	ldr	r5, [r3, #512]	; 0x200
   21358:	add	r3, r3, #16
   2135c:	and	r8, r7, #1020	; 0x3fc
   21360:	add	r4, r4, #16
   21364:	add	r5, r2, r5
   21368:	add	r1, r1, #16
   2136c:	ldr	r2, [r0, r8]
   21370:	eor	r8, r5, r5, lsr #6
   21374:	add	r5, r5, r2
   21378:	add	ip, r5, ip
   2137c:	str	ip, [r4, #-32]	; 0xffffffe0
   21380:	lsr	ip, ip, #8
   21384:	and	ip, ip, #1020	; 0x3fc
   21388:	ldr	r2, [r0, ip]
   2138c:	add	r7, r7, r2
   21390:	str	r7, [r1, #-16]
   21394:	ldr	r5, [r3, #-12]
   21398:	ldr	r2, [r3, #500]	; 0x1f4
   2139c:	and	ip, r5, #1020	; 0x3fc
   213a0:	add	r2, r8, r2
   213a4:	ldr	ip, [r0, ip]
   213a8:	eor	r8, r2, r2, lsl #2
   213ac:	add	r2, r2, ip
   213b0:	add	r2, r2, r7
   213b4:	str	r2, [r3, #-12]
   213b8:	lsr	r2, r2, #8
   213bc:	and	r2, r2, #1020	; 0x3fc
   213c0:	ldr	r7, [r0, r2]
   213c4:	add	r7, r5, r7
   213c8:	str	r7, [r1, #-12]
   213cc:	ldr	r5, [r3, #-8]
   213d0:	ldr	ip, [r3, #504]	; 0x1f8
   213d4:	and	r2, r5, #1020	; 0x3fc
   213d8:	add	ip, r8, ip
   213dc:	ldr	r8, [r0, r2]
   213e0:	eor	r2, ip, ip, lsr #16
   213e4:	add	ip, ip, r8
   213e8:	add	ip, ip, r7
   213ec:	str	ip, [r3, #-8]
   213f0:	lsr	ip, ip, #8
   213f4:	and	ip, ip, #1020	; 0x3fc
   213f8:	ldr	r7, [r0, ip]
   213fc:	add	r7, r5, r7
   21400:	str	r7, [r1, #-8]
   21404:	ldr	ip, [r3, #-4]
   21408:	ldr	r8, [r3, #508]	; 0x1fc
   2140c:	and	r5, ip, #1020	; 0x3fc
   21410:	add	r2, r2, r8
   21414:	ldr	r5, [r0, r5]
   21418:	add	r5, r2, r5
   2141c:	add	r5, r5, r7
   21420:	str	r5, [r3, #-4]
   21424:	cmp	r3, r6
   21428:	lsr	r5, r5, #8
   2142c:	and	r5, r5, #1020	; 0x3fc
   21430:	ldr	r5, [r0, r5]
   21434:	add	ip, ip, r5
   21438:	str	ip, [r1, #-4]
   2143c:	bcc	2134c <__assert_fail@plt+0xf02c>
   21440:	add	r4, r3, #16
   21444:	add	r7, r0, #1024	; 0x400
   21448:	mov	r5, r4
   2144c:	ldr	r8, [r5, #-16]
   21450:	eor	r2, r2, r2, lsl #13
   21454:	ldr	r6, [r3, #-512]	; 0xfffffe00
   21458:	cmp	r4, r7
   2145c:	and	r9, r8, #1020	; 0x3fc
   21460:	add	r5, r5, #16
   21464:	add	r6, r2, r6
   21468:	add	r1, r1, #16
   2146c:	ldr	r2, [r0, r9]
   21470:	eor	r9, r6, r6, lsr #6
   21474:	add	r6, r6, r2
   21478:	add	ip, r6, ip
   2147c:	str	ip, [r5, #-32]	; 0xffffffe0
   21480:	lsr	ip, ip, #8
   21484:	and	ip, ip, #1020	; 0x3fc
   21488:	ldr	r2, [r0, ip]
   2148c:	add	r8, r8, r2
   21490:	str	r8, [r1, #-16]
   21494:	ldr	r6, [r3, #4]
   21498:	ldr	r2, [r3, #-508]	; 0xfffffe04
   2149c:	and	ip, r6, #1020	; 0x3fc
   214a0:	add	r2, r9, r2
   214a4:	ldr	ip, [r0, ip]
   214a8:	eor	r9, r2, r2, lsl #2
   214ac:	add	r2, r2, ip
   214b0:	add	r2, r2, r8
   214b4:	str	r2, [r3, #4]
   214b8:	lsr	r2, r2, #8
   214bc:	and	r2, r2, #1020	; 0x3fc
   214c0:	ldr	r8, [r0, r2]
   214c4:	add	r8, r6, r8
   214c8:	str	r8, [r1, #-12]
   214cc:	ldr	r6, [r3, #8]
   214d0:	ldr	ip, [r3, #-504]	; 0xfffffe08
   214d4:	and	r2, r6, #1020	; 0x3fc
   214d8:	add	ip, r9, ip
   214dc:	ldr	r9, [r0, r2]
   214e0:	eor	r2, ip, ip, lsr #16
   214e4:	add	ip, ip, r9
   214e8:	add	ip, ip, r8
   214ec:	str	ip, [r3, #8]
   214f0:	lsr	ip, ip, #8
   214f4:	and	ip, ip, #1020	; 0x3fc
   214f8:	ldr	r8, [r0, ip]
   214fc:	add	r8, r6, r8
   21500:	str	r8, [r1, #-8]
   21504:	ldr	ip, [r3, #12]
   21508:	ldr	r9, [r3, #-500]	; 0xfffffe0c
   2150c:	and	r6, ip, #1020	; 0x3fc
   21510:	add	r2, r2, r9
   21514:	ldr	r6, [r0, r6]
   21518:	add	r6, r2, r6
   2151c:	add	r6, r6, r8
   21520:	str	r6, [r3, #12]
   21524:	mov	r3, r4
   21528:	add	r4, r4, #16
   2152c:	lsr	r6, r6, #8
   21530:	and	r6, r6, #1020	; 0x3fc
   21534:	ldr	r6, [r0, r6]
   21538:	add	ip, ip, r6
   2153c:	str	ip, [r1, #-4]
   21540:	bcc	2144c <__assert_fail@plt+0xf12c>
   21544:	str	r2, [r0, #1024]	; 0x400
   21548:	str	ip, [r0, #1028]	; 0x404
   2154c:	pop	{r4, r5, r6, r7, r8, r9}
   21550:	bx	lr
   21554:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   21558:	movw	ip, #15433	; 0x3c49
   2155c:	movw	r6, #37145	; 0x9119
   21560:	movw	r4, #59931	; 0xea1b
   21564:	movw	r1, #19064	; 0x4a78
   21568:	movw	r2, #6872	; 0x1ad8
   2156c:	movw	r7, #15947	; 0x3e4b
   21570:	mov	r5, #89	; 0x59
   21574:	movw	r8, #57178	; 0xdf5a
   21578:	sub	sp, sp, #8
   2157c:	movt	r6, #12384	; 0x3060
   21580:	movt	r4, #50415	; 0xc4ef
   21584:	movt	ip, #42266	; 0xa51a
   21588:	movt	r1, #55594	; 0xd92a
   2158c:	movt	r2, #3906	; 0xf42
   21590:	movt	r7, #49942	; 0xc316
   21594:	movt	r5, #38361	; 0x95d9
   21598:	movt	r8, #4967	; 0x1367
   2159c:	mov	r3, r0
   215a0:	mov	r9, #0
   215a4:	ldr	fp, [r3, #4]
   215a8:	add	r3, r3, #32
   215ac:	ldr	sl, [r0, r9]
   215b0:	add	r5, r5, fp
   215b4:	ldr	fp, [r3, #-20]	; 0xffffffec
   215b8:	add	r8, r8, sl
   215bc:	ldr	sl, [r3, #-24]	; 0xffffffe8
   215c0:	eor	r8, r8, r5, lsl #11
   215c4:	add	fp, r8, fp
   215c8:	add	r7, r7, sl
   215cc:	add	fp, fp, r2
   215d0:	add	r5, r7, r5
   215d4:	add	r2, fp, r7
   215d8:	ldr	sl, [r3, #-12]
   215dc:	eor	r5, r5, r7, lsr #2
   215e0:	eor	r7, r2, fp, lsl #8
   215e4:	ldr	r2, [r3, #-16]
   215e8:	add	sl, r7, sl
   215ec:	add	sl, sl, ip
   215f0:	ldr	ip, [r3, #-4]
   215f4:	add	r2, r5, r2
   215f8:	str	r2, [sp, #4]
   215fc:	add	r2, r2, r1
   21600:	add	r1, sl, r2
   21604:	add	fp, r2, fp
   21608:	eor	r1, r1, sl, lsl #10
   2160c:	eor	r2, fp, r2, lsr #16
   21610:	add	fp, r1, ip
   21614:	ldr	ip, [r3, #-8]
   21618:	add	r6, fp, r6
   2161c:	add	ip, r2, ip
   21620:	add	r4, ip, r4
   21624:	add	ip, r4, sl
   21628:	add	fp, r6, r4
   2162c:	eor	ip, ip, r4, lsr #4
   21630:	eor	r4, fp, r6, lsl #8
   21634:	add	sl, ip, r8
   21638:	add	r5, r4, r5
   2163c:	add	r8, r5, sl
   21640:	str	r8, [r0, r9]
   21644:	add	r9, r9, #32
   21648:	add	r6, r6, sl
   2164c:	cmp	r9, #1024	; 0x400
   21650:	eor	r6, r6, sl, lsr #9
   21654:	str	r5, [r3, #-28]	; 0xffffffe4
   21658:	add	r7, r6, r7
   2165c:	str	r4, [r3, #-8]
   21660:	str	r7, [r3, #-24]	; 0xffffffe8
   21664:	str	r6, [r3, #-4]
   21668:	str	ip, [r3, #-12]
   2166c:	str	r1, [r3, #-16]
   21670:	str	r2, [r3, #-20]	; 0xffffffec
   21674:	bne	215a4 <__assert_fail@plt+0xf284>
   21678:	add	r3, r0, #4
   2167c:	mov	r9, #0
   21680:	ldr	fp, [r3]
   21684:	add	r9, r9, #8
   21688:	ldr	sl, [r3, #-4]
   2168c:	cmp	r9, #256	; 0x100
   21690:	add	r5, r5, fp
   21694:	ldr	fp, [r3, #4]
   21698:	add	r8, r8, sl
   2169c:	add	r3, r3, #32
   216a0:	add	r7, r7, fp
   216a4:	ldr	fp, [r3, #-24]	; 0xffffffe8
   216a8:	eor	r8, r8, r5, lsl #11
   216ac:	add	r5, r7, r5
   216b0:	add	sl, r8, fp
   216b4:	ldr	fp, [r3, #-20]	; 0xffffffec
   216b8:	eor	r5, r5, r7, lsr #2
   216bc:	add	r2, sl, r2
   216c0:	add	sl, r5, fp
   216c4:	add	r7, r2, r7
   216c8:	add	r1, sl, r1
   216cc:	ldr	sl, [r3, #-16]
   216d0:	eor	r7, r7, r2, lsl #8
   216d4:	add	r2, r1, r2
   216d8:	add	fp, r7, sl
   216dc:	ldr	sl, [r3, #-12]
   216e0:	eor	r2, r2, r1, lsr #16
   216e4:	add	ip, fp, ip
   216e8:	add	fp, r2, sl
   216ec:	add	r1, ip, r1
   216f0:	add	r4, fp, r4
   216f4:	ldr	fp, [r3, #-8]
   216f8:	eor	r1, r1, ip, lsl #10
   216fc:	add	ip, r4, ip
   21700:	add	sl, r1, fp
   21704:	eor	ip, ip, r4, lsr #4
   21708:	add	r6, sl, r6
   2170c:	add	r8, ip, r8
   21710:	add	r4, r6, r4
   21714:	str	r1, [r3, #-20]	; 0xffffffec
   21718:	eor	r4, r4, r6, lsl #8
   2171c:	add	r6, r6, r8
   21720:	eor	r6, r6, r8, lsr #9
   21724:	add	r5, r4, r5
   21728:	add	r8, r5, r8
   2172c:	str	r2, [r3, #-24]	; 0xffffffe8
   21730:	add	r7, r6, r7
   21734:	str	r5, [r3, #-32]	; 0xffffffe0
   21738:	str	r8, [r3, #-36]	; 0xffffffdc
   2173c:	str	r7, [r3, #-28]	; 0xffffffe4
   21740:	str	r4, [r3, #-12]
   21744:	str	r6, [r3, #-8]
   21748:	str	ip, [r3, #-16]
   2174c:	bne	21680 <__assert_fail@plt+0xf360>
   21750:	mov	r3, #0
   21754:	str	r3, [r0, #1032]	; 0x408
   21758:	str	r3, [r0, #1028]	; 0x404
   2175c:	str	r3, [r0, #1024]	; 0x400
   21760:	add	sp, sp, #8
   21764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   21768:	bx	lr
   2176c:	ldr	r3, [pc, #264]	; 2187c <__assert_fail@plt+0xf55c>
   21770:	ldr	r1, [pc, #264]	; 21880 <__assert_fail@plt+0xf560>
   21774:	add	r3, pc, r3
   21778:	push	{r4, r5, r6, lr}
   2177c:	sub	sp, sp, #8
   21780:	ldr	r6, [r3, r1]
   21784:	mov	r4, r0
   21788:	ldr	r2, [r0, #24]
   2178c:	ldr	r5, [r0, #20]
   21790:	ldr	ip, [r0, #36]	; 0x24
   21794:	rsb	r3, r5, r2
   21798:	cmp	r2, r5
   2179c:	sub	r3, r3, #1
   217a0:	str	r3, [sp]
   217a4:	ldr	r3, [r6]
   217a8:	str	r3, [sp, #4]
   217ac:	ldrbeq	r3, [r0, #52]	; 0x34
   217b0:	orreq	r3, r3, #2
   217b4:	strbeq	r3, [r0, #52]	; 0x34
   217b8:	add	r3, r2, ip
   217bc:	ldr	r0, [r0, #16]
   217c0:	bic	r3, r3, ip
   217c4:	ldr	r1, [r4, #28]
   217c8:	rsb	r2, r0, r3
   217cc:	str	r3, [r4, #24]
   217d0:	rsb	r0, r0, r1
   217d4:	cmp	r2, r0
   217d8:	ldr	r2, [r4, #68]	; 0x44
   217dc:	ldr	r0, [r4, #72]	; 0x48
   217e0:	movgt	r3, r1
   217e4:	strgt	r1, [r4, #24]
   217e8:	add	r1, r2, #4
   217ec:	str	r3, [r4, #20]
   217f0:	cmp	r0, r1
   217f4:	bcc	21864 <__assert_fail@plt+0xf544>
   217f8:	str	r5, [r2]
   217fc:	ldr	r3, [r4, #112]	; 0x70
   21800:	ldr	r0, [r4, #116]	; 0x74
   21804:	add	r1, r3, #4
   21808:	ldr	r2, [r4, #68]	; 0x44
   2180c:	cmp	r0, r1
   21810:	add	r2, r2, #4
   21814:	str	r2, [r4, #68]	; 0x44
   21818:	bcs	2182c <__assert_fail@plt+0xf50c>
   2181c:	add	r0, r4, #100	; 0x64
   21820:	mov	r1, #4
   21824:	bl	11eb8 <_obstack_newchunk@plt>
   21828:	ldr	r3, [r4, #112]	; 0x70
   2182c:	ldr	r0, [sp]
   21830:	ldr	r2, [sp, #4]
   21834:	str	r0, [r3]
   21838:	ldr	r3, [r4]
   2183c:	ldr	r1, [r4, #112]	; 0x70
   21840:	add	r3, r3, #1
   21844:	str	r3, [r4]
   21848:	ldr	r3, [r6]
   2184c:	add	r1, r1, #4
   21850:	str	r1, [r4, #112]	; 0x70
   21854:	cmp	r2, r3
   21858:	bne	21878 <__assert_fail@plt+0xf558>
   2185c:	add	sp, sp, #8
   21860:	pop	{r4, r5, r6, pc}
   21864:	add	r0, r4, #56	; 0x38
   21868:	mov	r1, #4
   2186c:	bl	11eb8 <_obstack_newchunk@plt>
   21870:	ldr	r2, [r4, #68]	; 0x44
   21874:	b	217f8 <__assert_fail@plt+0xf4d8>
   21878:	bl	11ed0 <__stack_chk_fail@plt>
   2187c:	andeq	r6, r1, r4, lsl #17
   21880:	andeq	r0, r0, ip, lsl r2
   21884:	ldr	r3, [pc, #124]	; 21908 <__assert_fail@plt+0xf5e8>
   21888:	push	{r4, r5, r6, r7, lr}
   2188c:	add	r3, pc, r3
   21890:	ldr	lr, [pc, #116]	; 2190c <__assert_fail@plt+0xf5ec>
   21894:	mov	r5, r0
   21898:	ldr	ip, [pc, #112]	; 21910 <__assert_fail@plt+0xf5f0>
   2189c:	mov	r4, #0
   218a0:	str	r4, [r5]
   218a4:	sub	sp, sp, #12
   218a8:	str	r4, [r5, #4]
   218ac:	mov	r1, r4
   218b0:	str	r4, [r5, #8]
   218b4:	mov	r2, r4
   218b8:	ldr	r6, [r3, lr]
   218bc:	add	r0, r0, #12
   218c0:	ldr	r7, [r3, ip]
   218c4:	mov	r3, r6
   218c8:	str	r7, [sp]
   218cc:	bl	11ef4 <_obstack_begin@plt>
   218d0:	mov	r3, r6
   218d4:	mov	r1, r4
   218d8:	mov	r2, r4
   218dc:	str	r7, [sp]
   218e0:	add	r0, r5, #56	; 0x38
   218e4:	bl	11ef4 <_obstack_begin@plt>
   218e8:	mov	r1, r4
   218ec:	str	r7, [sp]
   218f0:	mov	r3, r6
   218f4:	add	r0, r5, #100	; 0x64
   218f8:	mov	r2, r4
   218fc:	bl	11ef4 <_obstack_begin@plt>
   21900:	add	sp, sp, #12
   21904:	pop	{r4, r5, r6, r7, pc}
   21908:	andeq	r6, r1, ip, ror #14
   2190c:	andeq	r0, r0, r0, lsr r2
   21910:	andeq	r0, r0, r8, lsl r2
   21914:	push	{r4, lr}
   21918:	mov	r1, #0
   2191c:	mov	r4, r0
   21920:	add	r0, r0, #12
   21924:	bl	11ee8 <obstack_free@plt>
   21928:	add	r0, r4, #56	; 0x38
   2192c:	mov	r1, #0
   21930:	bl	11ee8 <obstack_free@plt>
   21934:	add	r0, r4, #100	; 0x64
   21938:	mov	r1, #0
   2193c:	pop	{r4, lr}
   21940:	b	11ee8 <obstack_free@plt>
   21944:	push	{r3, r4, r5, r6, r7, lr}
   21948:	mov	r4, r1
   2194c:	add	r7, r1, #12
   21950:	mov	r6, r0
   21954:	b	21968 <__assert_fail@plt+0xf648>
   21958:	cmp	r5, #0
   2195c:	str	r2, [r4, #24]
   21960:	strb	r5, [r3]
   21964:	beq	219b4 <__assert_fail@plt+0xf694>
   21968:	mov	r0, r6
   2196c:	bl	1217c <fgetc@plt>
   21970:	ldr	r3, [r4, #24]
   21974:	cmn	r0, #1
   21978:	mov	r5, r0
   2197c:	beq	219c0 <__assert_fail@plt+0xf6a0>
   21980:	ldr	r1, [r4, #28]
   21984:	add	r2, r3, #1
   21988:	cmp	r2, r1
   2198c:	bls	21958 <__assert_fail@plt+0xf638>
   21990:	mov	r0, r7
   21994:	mov	r1, #1
   21998:	bl	11eb8 <_obstack_newchunk@plt>
   2199c:	ldr	r3, [r4, #24]
   219a0:	cmp	r5, #0
   219a4:	add	r2, r3, #1
   219a8:	str	r2, [r4, #24]
   219ac:	strb	r5, [r3]
   219b0:	bne	21968 <__assert_fail@plt+0xf648>
   219b4:	mov	r0, r4
   219b8:	bl	2176c <__assert_fail@plt+0xf44c>
   219bc:	b	21968 <__assert_fail@plt+0xf648>
   219c0:	ldr	r2, [r4, #20]
   219c4:	cmp	r3, r2
   219c8:	beq	219f0 <__assert_fail@plt+0xf6d0>
   219cc:	ldr	r1, [r4, #28]
   219d0:	add	r2, r3, #1
   219d4:	cmp	r2, r1
   219d8:	bhi	21ad4 <__assert_fail@plt+0xf7b4>
   219dc:	str	r2, [r4, #24]
   219e0:	mov	r0, r4
   219e4:	mov	r2, #0
   219e8:	strb	r2, [r3]
   219ec:	bl	2176c <__assert_fail@plt+0xf44c>
   219f0:	ldr	r3, [r4, #68]	; 0x44
   219f4:	ldr	r1, [r4, #72]	; 0x48
   219f8:	add	r2, r3, #4
   219fc:	cmp	r1, r2
   21a00:	bcc	21ac0 <__assert_fail@plt+0xf7a0>
   21a04:	mov	r2, #0
   21a08:	str	r2, [r3]
   21a0c:	ldr	r3, [r4, #68]	; 0x44
   21a10:	ldr	r0, [r4, #64]	; 0x40
   21a14:	add	r3, r3, #4
   21a18:	ldr	ip, [r4, #72]	; 0x48
   21a1c:	cmp	r3, r0
   21a20:	str	r3, [r4, #68]	; 0x44
   21a24:	ldr	r1, [r4, #60]	; 0x3c
   21a28:	ldrbeq	r2, [r4, #96]	; 0x60
   21a2c:	str	r0, [r4, #4]
   21a30:	orreq	r2, r2, #2
   21a34:	ldr	r0, [r4, #104]	; 0x68
   21a38:	strbeq	r2, [r4, #96]	; 0x60
   21a3c:	ldr	r2, [r4, #80]	; 0x50
   21a40:	add	r3, r3, r2
   21a44:	bic	r2, r3, r2
   21a48:	str	r2, [r4, #68]	; 0x44
   21a4c:	rsb	r3, r1, r2
   21a50:	rsb	r1, r1, ip
   21a54:	cmp	r3, r1
   21a58:	ldr	r3, [r4, #112]	; 0x70
   21a5c:	ldr	r1, [r4, #108]	; 0x6c
   21a60:	movgt	r2, ip
   21a64:	strgt	ip, [r4, #68]	; 0x44
   21a68:	cmp	r3, r1
   21a6c:	str	r2, [r4, #64]	; 0x40
   21a70:	ldr	ip, [r4, #124]	; 0x7c
   21a74:	ldrbeq	r2, [r4, #140]	; 0x8c
   21a78:	add	r3, r3, ip
   21a7c:	str	r1, [r4, #8]
   21a80:	orreq	r2, r2, #2
   21a84:	bic	r3, r3, ip
   21a88:	strbeq	r2, [r4, #140]	; 0x8c
   21a8c:	rsb	ip, r0, r3
   21a90:	ldr	r2, [r4, #116]	; 0x74
   21a94:	str	r3, [r4, #112]	; 0x70
   21a98:	rsb	r0, r0, r2
   21a9c:	cmp	ip, r0
   21aa0:	mov	r0, r6
   21aa4:	strgt	r2, [r4, #112]	; 0x70
   21aa8:	movgt	r3, r2
   21aac:	str	r3, [r4, #108]	; 0x6c
   21ab0:	bl	11e10 <ferror@plt>
   21ab4:	rsbs	r0, r0, #1
   21ab8:	movcc	r0, #0
   21abc:	pop	{r3, r4, r5, r6, r7, pc}
   21ac0:	add	r0, r4, #56	; 0x38
   21ac4:	mov	r1, #4
   21ac8:	bl	11eb8 <_obstack_newchunk@plt>
   21acc:	ldr	r3, [r4, #68]	; 0x44
   21ad0:	b	21a04 <__assert_fail@plt+0xf6e4>
   21ad4:	add	r0, r4, #12
   21ad8:	mov	r1, #1
   21adc:	bl	11eb8 <_obstack_newchunk@plt>
   21ae0:	ldr	r3, [r4, #24]
   21ae4:	add	r2, r3, #1
   21ae8:	b	219dc <__assert_fail@plt+0xf6bc>
   21aec:	push	{r3, lr}
   21af0:	bl	12050 <mkstemp64@plt>
   21af4:	pop	{r3, lr}
   21af8:	b	22110 <__assert_fail@plt+0xfdf0>
   21afc:	push	{r4, r5, r6}
   21b00:	ldrb	r4, [r0]
   21b04:	ldrb	r5, [r1]
   21b08:	cmp	r4, #45	; 0x2d
   21b0c:	beq	21c38 <__assert_fail@plt+0xf918>
   21b10:	cmp	r5, #45	; 0x2d
   21b14:	bne	21b20 <__assert_fail@plt+0xf800>
   21b18:	b	21cac <__assert_fail@plt+0xf98c>
   21b1c:	ldrb	r4, [r0, #1]!
   21b20:	cmp	r4, #48	; 0x30
   21b24:	mov	ip, r0
   21b28:	beq	21b1c <__assert_fail@plt+0xf7fc>
   21b2c:	cmp	r3, r4
   21b30:	beq	21b1c <__assert_fail@plt+0xf7fc>
   21b34:	cmp	r5, #48	; 0x30
   21b38:	mov	r0, r1
   21b3c:	bne	21b50 <__assert_fail@plt+0xf830>
   21b40:	ldrb	r5, [r1, #1]!
   21b44:	cmp	r5, #48	; 0x30
   21b48:	mov	r0, r1
   21b4c:	beq	21b40 <__assert_fail@plt+0xf820>
   21b50:	cmp	r3, r5
   21b54:	beq	21b40 <__assert_fail@plt+0xf820>
   21b58:	cmp	r4, r5
   21b5c:	bne	21ba4 <__assert_fail@plt+0xf884>
   21b60:	sub	r1, r4, #48	; 0x30
   21b64:	cmp	r1, #9
   21b68:	bhi	21d50 <__assert_fail@plt+0xfa30>
   21b6c:	add	r1, ip, #1
   21b70:	mov	ip, r1
   21b74:	add	r1, r1, #1
   21b78:	ldrb	r4, [ip]
   21b7c:	cmp	r3, r4
   21b80:	beq	21b70 <__assert_fail@plt+0xf850>
   21b84:	add	r1, r0, #1
   21b88:	mov	r0, r1
   21b8c:	add	r1, r1, #1
   21b90:	ldrb	r5, [r0]
   21b94:	cmp	r3, r5
   21b98:	beq	21b88 <__assert_fail@plt+0xf868>
   21b9c:	cmp	r4, r5
   21ba0:	beq	21b60 <__assert_fail@plt+0xf840>
   21ba4:	cmp	r2, r4
   21ba8:	beq	21d7c <__assert_fail@plt+0xfa5c>
   21bac:	cmp	r2, r5
   21bb0:	beq	21de0 <__assert_fail@plt+0xfac0>
   21bb4:	sub	r2, r4, #48	; 0x30
   21bb8:	rsb	r4, r5, r4
   21bbc:	cmp	r2, #9
   21bc0:	bhi	220c4 <__assert_fail@plt+0xfda4>
   21bc4:	mov	r6, #0
   21bc8:	add	r2, ip, #1
   21bcc:	mov	ip, r2
   21bd0:	ldrb	r1, [r2], #1
   21bd4:	cmp	r3, r1
   21bd8:	beq	21bcc <__assert_fail@plt+0xf8ac>
   21bdc:	sub	r1, r1, #48	; 0x30
   21be0:	add	r6, r6, #1
   21be4:	cmp	r1, #9
   21be8:	bls	21bc8 <__assert_fail@plt+0xf8a8>
   21bec:	sub	r5, r5, #48	; 0x30
   21bf0:	cmp	r5, #9
   21bf4:	bhi	220d8 <__assert_fail@plt+0xfdb8>
   21bf8:	mov	ip, #0
   21bfc:	add	r2, r0, #1
   21c00:	mov	r0, r2
   21c04:	ldrb	r1, [r2], #1
   21c08:	cmp	r3, r1
   21c0c:	beq	21c00 <__assert_fail@plt+0xf8e0>
   21c10:	sub	r1, r1, #48	; 0x30
   21c14:	add	ip, ip, #1
   21c18:	cmp	r1, #9
   21c1c:	bls	21bfc <__assert_fail@plt+0xf8dc>
   21c20:	cmp	ip, r6
   21c24:	beq	21df4 <__assert_fail@plt+0xfad4>
   21c28:	bhi	21dd4 <__assert_fail@plt+0xfab4>
   21c2c:	mov	r0, #1
   21c30:	pop	{r4, r5, r6}
   21c34:	bx	lr
   21c38:	ldrb	ip, [r0, #1]
   21c3c:	add	r4, r0, #1
   21c40:	cmp	ip, #48	; 0x30
   21c44:	mov	r0, r4
   21c48:	mov	r6, ip
   21c4c:	beq	21c38 <__assert_fail@plt+0xf918>
   21c50:	cmp	r3, ip
   21c54:	beq	21c38 <__assert_fail@plt+0xf918>
   21c58:	cmp	r5, #45	; 0x2d
   21c5c:	beq	21e04 <__assert_fail@plt+0xfae4>
   21c60:	cmp	r2, ip
   21c64:	beq	21d18 <__assert_fail@plt+0xf9f8>
   21c68:	sub	ip, ip, #48	; 0x30
   21c6c:	cmp	ip, #9
   21c70:	bhi	21c7c <__assert_fail@plt+0xf95c>
   21c74:	b	21dd4 <__assert_fail@plt+0xfab4>
   21c78:	ldrb	r5, [r1, #1]!
   21c7c:	cmp	r5, #48	; 0x30
   21c80:	beq	21c78 <__assert_fail@plt+0xf958>
   21c84:	cmp	r3, r5
   21c88:	beq	21c78 <__assert_fail@plt+0xf958>
   21c8c:	cmp	r2, r5
   21c90:	beq	21d60 <__assert_fail@plt+0xfa40>
   21c94:	sub	r0, r5, #48	; 0x30
   21c98:	cmp	r0, #9
   21c9c:	movhi	r0, #0
   21ca0:	mvnls	r0, #0
   21ca4:	pop	{r4, r5, r6}
   21ca8:	bx	lr
   21cac:	ldrb	ip, [r1, #1]
   21cb0:	add	r5, r1, #1
   21cb4:	cmp	ip, #48	; 0x30
   21cb8:	mov	r1, r5
   21cbc:	beq	21cac <__assert_fail@plt+0xf98c>
   21cc0:	cmp	r3, ip
   21cc4:	beq	21cac <__assert_fail@plt+0xf98c>
   21cc8:	cmp	r2, ip
   21ccc:	beq	21d34 <__assert_fail@plt+0xfa14>
   21cd0:	sub	ip, ip, #48	; 0x30
   21cd4:	cmp	ip, #9
   21cd8:	bls	21c2c <__assert_fail@plt+0xf90c>
   21cdc:	cmp	r4, #48	; 0x30
   21ce0:	bne	21cf0 <__assert_fail@plt+0xf9d0>
   21ce4:	ldrb	r4, [r0, #1]!
   21ce8:	cmp	r4, #48	; 0x30
   21cec:	beq	21ce4 <__assert_fail@plt+0xf9c4>
   21cf0:	cmp	r3, r4
   21cf4:	beq	21ce4 <__assert_fail@plt+0xf9c4>
   21cf8:	cmp	r2, r4
   21cfc:	beq	21db0 <__assert_fail@plt+0xfa90>
   21d00:	sub	r0, r4, #48	; 0x30
   21d04:	cmp	r0, #9
   21d08:	pop	{r4, r5, r6}
   21d0c:	movhi	r0, #0
   21d10:	movls	r0, #1
   21d14:	bx	lr
   21d18:	ldrb	ip, [r4, #1]!
   21d1c:	cmp	ip, #48	; 0x30
   21d20:	bne	21c68 <__assert_fail@plt+0xf948>
   21d24:	ldrb	ip, [r4, #1]!
   21d28:	cmp	ip, #48	; 0x30
   21d2c:	beq	21d18 <__assert_fail@plt+0xf9f8>
   21d30:	b	21c68 <__assert_fail@plt+0xf948>
   21d34:	ldrb	ip, [r5, #1]!
   21d38:	cmp	ip, #48	; 0x30
   21d3c:	bne	21cd0 <__assert_fail@plt+0xf9b0>
   21d40:	ldrb	ip, [r5, #1]!
   21d44:	cmp	ip, #48	; 0x30
   21d48:	beq	21d34 <__assert_fail@plt+0xfa14>
   21d4c:	b	21cd0 <__assert_fail@plt+0xf9b0>
   21d50:	cmp	r2, r4
   21d54:	mov	r5, r4
   21d58:	bne	21bac <__assert_fail@plt+0xf88c>
   21d5c:	b	21d7c <__assert_fail@plt+0xfa5c>
   21d60:	ldrb	r5, [r1, #1]!
   21d64:	cmp	r5, #48	; 0x30
   21d68:	bne	21c94 <__assert_fail@plt+0xf974>
   21d6c:	ldrb	r5, [r1, #1]!
   21d70:	cmp	r5, #48	; 0x30
   21d74:	beq	21d60 <__assert_fail@plt+0xfa40>
   21d78:	b	21c94 <__assert_fail@plt+0xf974>
   21d7c:	sub	r1, r5, #48	; 0x30
   21d80:	cmp	r1, #9
   21d84:	bls	21bac <__assert_fail@plt+0xf88c>
   21d88:	ldrb	r3, [ip]
   21d8c:	uxtb	r2, r2
   21d90:	cmp	r3, r2
   21d94:	beq	21f6c <__assert_fail@plt+0xfc4c>
   21d98:	ldrb	r3, [r0]
   21d9c:	cmp	r3, r2
   21da0:	beq	21f38 <__assert_fail@plt+0xfc18>
   21da4:	mov	r0, #0
   21da8:	pop	{r4, r5, r6}
   21dac:	bx	lr
   21db0:	ldrb	r4, [r0, #1]!
   21db4:	cmp	r4, #48	; 0x30
   21db8:	bne	21d00 <__assert_fail@plt+0xf9e0>
   21dbc:	ldrb	r4, [r0, #1]!
   21dc0:	cmp	r4, #48	; 0x30
   21dc4:	beq	21db0 <__assert_fail@plt+0xfa90>
   21dc8:	b	21d00 <__assert_fail@plt+0xf9e0>
   21dcc:	cmp	r5, #0
   21dd0:	beq	21da4 <__assert_fail@plt+0xfa84>
   21dd4:	mvn	r0, #0
   21dd8:	pop	{r4, r5, r6}
   21ddc:	bx	lr
   21de0:	sub	r1, r4, #48	; 0x30
   21de4:	cmp	r1, #9
   21de8:	rsbls	r4, r5, r4
   21dec:	bls	21bc4 <__assert_fail@plt+0xf8a4>
   21df0:	b	21d88 <__assert_fail@plt+0xfa68>
   21df4:	cmp	ip, #0
   21df8:	movne	r0, r4
   21dfc:	bne	21c30 <__assert_fail@plt+0xf910>
   21e00:	b	21da4 <__assert_fail@plt+0xfa84>
   21e04:	mov	r5, r1
   21e08:	ldrb	r0, [r5, #1]
   21e0c:	add	r1, r5, #1
   21e10:	cmp	r0, #48	; 0x30
   21e14:	mov	r5, r1
   21e18:	beq	21e08 <__assert_fail@plt+0xfae8>
   21e1c:	cmp	r3, r0
   21e20:	beq	21e08 <__assert_fail@plt+0xfae8>
   21e24:	cmp	ip, r0
   21e28:	bne	21e88 <__assert_fail@plt+0xfb68>
   21e2c:	sub	r5, ip, #48	; 0x30
   21e30:	cmp	r5, #9
   21e34:	movhi	r6, ip
   21e38:	bhi	21e88 <__assert_fail@plt+0xfb68>
   21e3c:	add	r0, r4, #1
   21e40:	mov	r4, r0
   21e44:	add	r0, r0, #1
   21e48:	ldrb	ip, [r4]
   21e4c:	cmp	r3, ip
   21e50:	mov	r6, ip
   21e54:	beq	21e40 <__assert_fail@plt+0xfb20>
   21e58:	add	r5, r1, #1
   21e5c:	mov	r1, r5
   21e60:	add	r5, r5, #1
   21e64:	ldrb	r0, [r1]
   21e68:	cmp	r3, r0
   21e6c:	beq	21e5c <__assert_fail@plt+0xfb3c>
   21e70:	cmp	ip, r0
   21e74:	bne	21e88 <__assert_fail@plt+0xfb68>
   21e78:	sub	r0, ip, #48	; 0x30
   21e7c:	cmp	r0, #9
   21e80:	bls	21e3c <__assert_fail@plt+0xfb1c>
   21e84:	mov	r0, ip
   21e88:	cmp	r2, r6
   21e8c:	beq	21ff0 <__assert_fail@plt+0xfcd0>
   21e90:	cmp	r2, r0
   21e94:	sub	ip, ip, #48	; 0x30
   21e98:	beq	22034 <__assert_fail@plt+0xfd14>
   21e9c:	cmp	ip, #9
   21ea0:	rsb	r6, r6, r0
   21ea4:	bhi	21f24 <__assert_fail@plt+0xfc04>
   21ea8:	mov	r5, #0
   21eac:	add	r2, r4, #1
   21eb0:	mov	r4, r2
   21eb4:	ldrb	ip, [r2], #1
   21eb8:	cmp	r3, ip
   21ebc:	beq	21eb0 <__assert_fail@plt+0xfb90>
   21ec0:	sub	ip, ip, #48	; 0x30
   21ec4:	add	r5, r5, #1
   21ec8:	cmp	ip, #9
   21ecc:	bls	21eac <__assert_fail@plt+0xfb8c>
   21ed0:	sub	r0, r0, #48	; 0x30
   21ed4:	cmp	r0, #9
   21ed8:	bhi	21dcc <__assert_fail@plt+0xfaac>
   21edc:	mov	ip, #0
   21ee0:	add	r2, r1, #1
   21ee4:	mov	r1, r2
   21ee8:	ldrb	r0, [r2], #1
   21eec:	cmp	r3, r0
   21ef0:	beq	21ee4 <__assert_fail@plt+0xfbc4>
   21ef4:	sub	r2, r0, #48	; 0x30
   21ef8:	add	ip, ip, #1
   21efc:	cmp	r2, #9
   21f00:	bls	21ee0 <__assert_fail@plt+0xfbc0>
   21f04:	cmp	ip, r5
   21f08:	beq	21f14 <__assert_fail@plt+0xfbf4>
   21f0c:	bls	21dd4 <__assert_fail@plt+0xfab4>
   21f10:	b	21c2c <__assert_fail@plt+0xf90c>
   21f14:	cmp	ip, #0
   21f18:	movne	r0, r6
   21f1c:	bne	21c30 <__assert_fail@plt+0xf910>
   21f20:	b	21da4 <__assert_fail@plt+0xfa84>
   21f24:	sub	r0, r0, #48	; 0x30
   21f28:	cmp	r0, #9
   21f2c:	movls	r5, #0
   21f30:	bls	21edc <__assert_fail@plt+0xfbbc>
   21f34:	b	21da4 <__assert_fail@plt+0xfa84>
   21f38:	ldrb	r3, [r0, #1]
   21f3c:	add	r4, r0, #1
   21f40:	cmp	r3, #48	; 0x30
   21f44:	bne	21f58 <__assert_fail@plt+0xfc38>
   21f48:	mov	r2, r4
   21f4c:	ldrb	r3, [r2, #1]!
   21f50:	cmp	r3, #48	; 0x30
   21f54:	beq	21f4c <__assert_fail@plt+0xfc2c>
   21f58:	sub	r3, r3, #48	; 0x30
   21f5c:	cmp	r3, #9
   21f60:	movhi	r0, #0
   21f64:	mvnls	r0, #0
   21f68:	b	21c30 <__assert_fail@plt+0xf910>
   21f6c:	ldrb	r2, [r0]
   21f70:	cmp	r2, r3
   21f74:	addeq	ip, ip, #1
   21f78:	addeq	r0, r0, #1
   21f7c:	beq	21fb4 <__assert_fail@plt+0xfc94>
   21f80:	add	r2, ip, #1
   21f84:	ldrb	r3, [ip, #1]
   21f88:	b	21f90 <__assert_fail@plt+0xfc70>
   21f8c:	ldrb	r3, [r2, #1]!
   21f90:	cmp	r3, #48	; 0x30
   21f94:	beq	21f8c <__assert_fail@plt+0xfc6c>
   21f98:	sub	r3, r3, #48	; 0x30
   21f9c:	cmp	r3, #9
   21fa0:	movhi	r0, #0
   21fa4:	movls	r0, #1
   21fa8:	b	21c30 <__assert_fail@plt+0xf910>
   21fac:	cmp	r5, #9
   21fb0:	bhi	21da4 <__assert_fail@plt+0xfa84>
   21fb4:	mov	r2, ip
   21fb8:	mov	r4, r0
   21fbc:	ldrb	r1, [ip], #1
   21fc0:	ldrb	r3, [r0], #1
   21fc4:	sub	r5, r1, #48	; 0x30
   21fc8:	cmp	r1, r3
   21fcc:	beq	21fac <__assert_fail@plt+0xfc8c>
   21fd0:	cmp	r5, #9
   21fd4:	bhi	220e4 <__assert_fail@plt+0xfdc4>
   21fd8:	sub	r0, r3, #48	; 0x30
   21fdc:	cmp	r0, #9
   21fe0:	rsbls	r0, r3, r1
   21fe4:	bls	21c30 <__assert_fail@plt+0xf910>
   21fe8:	mov	r3, r1
   21fec:	b	21f90 <__assert_fail@plt+0xfc70>
   21ff0:	sub	r5, r0, #48	; 0x30
   21ff4:	cmp	r5, #9
   21ff8:	bls	21e90 <__assert_fail@plt+0xfb70>
   21ffc:	ldrb	r3, [r1]
   22000:	uxtb	r2, r2
   22004:	cmp	r3, r2
   22008:	beq	22044 <__assert_fail@plt+0xfd24>
   2200c:	ldrb	r3, [r4]
   22010:	cmp	r3, r2
   22014:	bne	21da4 <__assert_fail@plt+0xfa84>
   22018:	add	r2, r4, #1
   2201c:	ldrb	r3, [r4, #1]
   22020:	b	22028 <__assert_fail@plt+0xfd08>
   22024:	ldrb	r3, [r2, #1]!
   22028:	cmp	r3, #48	; 0x30
   2202c:	beq	22024 <__assert_fail@plt+0xfd04>
   22030:	b	21f58 <__assert_fail@plt+0xfc38>
   22034:	cmp	ip, #9
   22038:	rsbls	r6, r6, r0
   2203c:	bls	21ea8 <__assert_fail@plt+0xfb88>
   22040:	b	21ffc <__assert_fail@plt+0xfcdc>
   22044:	ldrb	r2, [r4]
   22048:	cmp	r2, r3
   2204c:	addeq	r1, r1, #1
   22050:	addeq	r4, r4, #1
   22054:	beq	2208c <__assert_fail@plt+0xfd6c>
   22058:	add	ip, r1, #1
   2205c:	ldrb	r0, [r1, #1]
   22060:	b	22068 <__assert_fail@plt+0xfd48>
   22064:	ldrb	r0, [ip, #1]!
   22068:	cmp	r0, #48	; 0x30
   2206c:	beq	22064 <__assert_fail@plt+0xfd44>
   22070:	sub	r0, r0, #48	; 0x30
   22074:	cmp	r0, #9
   22078:	movhi	r0, #0
   2207c:	movls	r0, #1
   22080:	b	21c30 <__assert_fail@plt+0xf910>
   22084:	cmp	r5, #9
   22088:	bhi	21da4 <__assert_fail@plt+0xfa84>
   2208c:	mov	ip, r1
   22090:	mov	r2, r4
   22094:	ldrb	r0, [r1], #1
   22098:	ldrb	r3, [r4], #1
   2209c:	sub	r5, r0, #48	; 0x30
   220a0:	cmp	r0, r3
   220a4:	beq	22084 <__assert_fail@plt+0xfd64>
   220a8:	cmp	r5, #9
   220ac:	bhi	220f4 <__assert_fail@plt+0xfdd4>
   220b0:	sub	r2, r3, #48	; 0x30
   220b4:	cmp	r2, #9
   220b8:	rsbls	r0, r3, r0
   220bc:	bhi	22068 <__assert_fail@plt+0xfd48>
   220c0:	b	21c30 <__assert_fail@plt+0xf910>
   220c4:	sub	r5, r5, #48	; 0x30
   220c8:	cmp	r5, #9
   220cc:	movls	r6, #0
   220d0:	bls	21bf8 <__assert_fail@plt+0xf8d8>
   220d4:	b	21da4 <__assert_fail@plt+0xfa84>
   220d8:	cmp	r6, #0
   220dc:	bne	21c2c <__assert_fail@plt+0xf90c>
   220e0:	b	21da4 <__assert_fail@plt+0xfa84>
   220e4:	sub	r2, r3, #48	; 0x30
   220e8:	cmp	r2, #9
   220ec:	bls	21f40 <__assert_fail@plt+0xfc20>
   220f0:	b	21da4 <__assert_fail@plt+0xfa84>
   220f4:	sub	r1, r3, #48	; 0x30
   220f8:	cmp	r1, #9
   220fc:	bls	22028 <__assert_fail@plt+0xfd08>
   22100:	b	21da4 <__assert_fail@plt+0xfa84>
   22104:	mov	r1, #0
   22108:	mov	r2, #3
   2210c:	b	23994 <__assert_fail@plt+0x11674>
   22110:	cmp	r0, #2
   22114:	push	{r3, r4, r5, r6, r7, lr}
   22118:	mov	r4, r0
   2211c:	bhi	22144 <__assert_fail@plt+0xfe24>
   22120:	bl	22104 <__assert_fail@plt+0xfde4>
   22124:	mov	r7, r0
   22128:	bl	1211c <__errno_location@plt>
   2212c:	ldr	r6, [r0]
   22130:	mov	r5, r0
   22134:	mov	r0, r4
   22138:	mov	r4, r7
   2213c:	bl	12308 <close@plt>
   22140:	str	r6, [r5]
   22144:	mov	r0, r4
   22148:	pop	{r3, r4, r5, r6, r7, pc}
   2214c:	push	{r4, r5, r6, r7, lr}
   22150:	cmp	r1, #0
   22154:	sub	sp, sp, #36	; 0x24
   22158:	ldr	r7, [pc, #896]	; 224e0 <__assert_fail@plt+0x101c0>
   2215c:	mov	ip, r3
   22160:	mov	r5, r0
   22164:	add	r7, pc, r7
   22168:	ldr	r4, [sp, #56]	; 0x38
   2216c:	ldr	r6, [sp, #60]	; 0x3c
   22170:	beq	224b4 <__assert_fail@plt+0x10194>
   22174:	str	r2, [sp]
   22178:	mov	r3, r1
   2217c:	ldr	r2, [pc, #864]	; 224e4 <__assert_fail@plt+0x101c4>
   22180:	mov	r1, #1
   22184:	str	ip, [sp, #4]
   22188:	add	r2, pc, r2
   2218c:	bl	121ac <__fprintf_chk@plt>
   22190:	ldr	r1, [pc, #848]	; 224e8 <__assert_fail@plt+0x101c8>
   22194:	mov	r2, #5
   22198:	mov	r0, #0
   2219c:	add	r1, pc, r1
   221a0:	bl	11ec4 <dcgettext@plt>
   221a4:	ldr	r2, [pc, #832]	; 224ec <__assert_fail@plt+0x101cc>
   221a8:	movw	ip, #2013	; 0x7dd
   221ac:	mov	r1, #1
   221b0:	ldr	r2, [r7, r2]
   221b4:	str	ip, [sp]
   221b8:	mov	r3, r0
   221bc:	mov	r0, r5
   221c0:	bl	121ac <__fprintf_chk@plt>
   221c4:	ldr	r1, [pc, #804]	; 224f0 <__assert_fail@plt+0x101d0>
   221c8:	mov	r0, #0
   221cc:	mov	r2, #5
   221d0:	add	r1, pc, r1
   221d4:	bl	11ec4 <dcgettext@plt>
   221d8:	mov	r1, r5
   221dc:	bl	11d38 <fputs_unlocked@plt>
   221e0:	cmp	r6, #9
   221e4:	addls	pc, pc, r6, lsl #2
   221e8:	b	224d0 <__assert_fail@plt+0x101b0>
   221ec:	b	22280 <__assert_fail@plt+0xff60>
   221f0:	b	22284 <__assert_fail@plt+0xff64>
   221f4:	b	222b4 <__assert_fail@plt+0xff94>
   221f8:	b	222e8 <__assert_fail@plt+0xffc8>
   221fc:	b	22324 <__assert_fail@plt+0x10004>
   22200:	b	22364 <__assert_fail@plt+0x10044>
   22204:	b	223ac <__assert_fail@plt+0x1008c>
   22208:	b	223fc <__assert_fail@plt+0x100dc>
   2220c:	b	22454 <__assert_fail@plt+0x10134>
   22210:	b	22214 <__assert_fail@plt+0xfef4>
   22214:	ldr	r1, [pc, #728]	; 224f4 <__assert_fail@plt+0x101d4>
   22218:	mov	r0, #0
   2221c:	add	r1, pc, r1
   22220:	mov	r2, #5
   22224:	bl	11ec4 <dcgettext@plt>
   22228:	ldm	r4, {r3, ip}
   2222c:	mov	r1, #1
   22230:	str	ip, [sp]
   22234:	ldr	ip, [r4, #8]
   22238:	str	ip, [sp, #4]
   2223c:	ldr	ip, [r4, #12]
   22240:	str	ip, [sp, #8]
   22244:	ldr	ip, [r4, #16]
   22248:	str	ip, [sp, #12]
   2224c:	ldr	ip, [r4, #20]
   22250:	str	ip, [sp, #16]
   22254:	ldr	ip, [r4, #24]
   22258:	str	ip, [sp, #20]
   2225c:	ldr	ip, [r4, #28]
   22260:	str	ip, [sp, #24]
   22264:	ldr	ip, [r4, #32]
   22268:	str	ip, [sp, #28]
   2226c:	mov	r2, r0
   22270:	mov	r0, r5
   22274:	bl	121ac <__fprintf_chk@plt>
   22278:	add	sp, sp, #36	; 0x24
   2227c:	pop	{r4, r5, r6, r7, pc}
   22280:	bl	122fc <abort@plt>
   22284:	ldr	r1, [pc, #620]	; 224f8 <__assert_fail@plt+0x101d8>
   22288:	mov	r2, #5
   2228c:	mov	r0, #0
   22290:	add	r1, pc, r1
   22294:	bl	11ec4 <dcgettext@plt>
   22298:	ldr	r3, [r4]
   2229c:	mov	r1, #1
   222a0:	mov	r2, r0
   222a4:	mov	r0, r5
   222a8:	add	sp, sp, #36	; 0x24
   222ac:	pop	{r4, r5, r6, r7, lr}
   222b0:	b	121ac <__fprintf_chk@plt>
   222b4:	ldr	r1, [pc, #576]	; 224fc <__assert_fail@plt+0x101dc>
   222b8:	mov	r2, #5
   222bc:	mov	r0, #0
   222c0:	add	r1, pc, r1
   222c4:	bl	11ec4 <dcgettext@plt>
   222c8:	ldm	r4, {r3, ip}
   222cc:	mov	r1, #1
   222d0:	str	ip, [sp, #56]	; 0x38
   222d4:	mov	r2, r0
   222d8:	mov	r0, r5
   222dc:	add	sp, sp, #36	; 0x24
   222e0:	pop	{r4, r5, r6, r7, lr}
   222e4:	b	121ac <__fprintf_chk@plt>
   222e8:	ldr	r1, [pc, #528]	; 22500 <__assert_fail@plt+0x101e0>
   222ec:	mov	r2, #5
   222f0:	mov	r0, #0
   222f4:	add	r1, pc, r1
   222f8:	bl	11ec4 <dcgettext@plt>
   222fc:	ldm	r4, {r3, ip}
   22300:	mov	r1, #1
   22304:	str	ip, [sp, #56]	; 0x38
   22308:	ldr	ip, [r4, #8]
   2230c:	str	ip, [sp, #60]	; 0x3c
   22310:	mov	r2, r0
   22314:	mov	r0, r5
   22318:	add	sp, sp, #36	; 0x24
   2231c:	pop	{r4, r5, r6, r7, lr}
   22320:	b	121ac <__fprintf_chk@plt>
   22324:	ldr	r1, [pc, #472]	; 22504 <__assert_fail@plt+0x101e4>
   22328:	mov	r2, #5
   2232c:	mov	r0, #0
   22330:	add	r1, pc, r1
   22334:	bl	11ec4 <dcgettext@plt>
   22338:	ldm	r4, {r3, ip}
   2233c:	mov	r1, #1
   22340:	str	ip, [sp]
   22344:	ldr	ip, [r4, #8]
   22348:	str	ip, [sp, #4]
   2234c:	ldr	ip, [r4, #12]
   22350:	str	ip, [sp, #8]
   22354:	mov	r2, r0
   22358:	mov	r0, r5
   2235c:	bl	121ac <__fprintf_chk@plt>
   22360:	b	22278 <__assert_fail@plt+0xff58>
   22364:	ldr	r1, [pc, #412]	; 22508 <__assert_fail@plt+0x101e8>
   22368:	mov	r2, #5
   2236c:	mov	r0, #0
   22370:	add	r1, pc, r1
   22374:	bl	11ec4 <dcgettext@plt>
   22378:	ldm	r4, {r3, ip}
   2237c:	mov	r1, #1
   22380:	str	ip, [sp]
   22384:	ldr	ip, [r4, #8]
   22388:	str	ip, [sp, #4]
   2238c:	ldr	ip, [r4, #12]
   22390:	str	ip, [sp, #8]
   22394:	ldr	ip, [r4, #16]
   22398:	str	ip, [sp, #12]
   2239c:	mov	r2, r0
   223a0:	mov	r0, r5
   223a4:	bl	121ac <__fprintf_chk@plt>
   223a8:	b	22278 <__assert_fail@plt+0xff58>
   223ac:	ldr	r1, [pc, #344]	; 2250c <__assert_fail@plt+0x101ec>
   223b0:	mov	r2, #5
   223b4:	mov	r0, #0
   223b8:	add	r1, pc, r1
   223bc:	bl	11ec4 <dcgettext@plt>
   223c0:	ldm	r4, {r3, ip}
   223c4:	mov	r1, #1
   223c8:	str	ip, [sp]
   223cc:	ldr	ip, [r4, #8]
   223d0:	str	ip, [sp, #4]
   223d4:	ldr	ip, [r4, #12]
   223d8:	str	ip, [sp, #8]
   223dc:	ldr	ip, [r4, #16]
   223e0:	str	ip, [sp, #12]
   223e4:	ldr	ip, [r4, #20]
   223e8:	str	ip, [sp, #16]
   223ec:	mov	r2, r0
   223f0:	mov	r0, r5
   223f4:	bl	121ac <__fprintf_chk@plt>
   223f8:	b	22278 <__assert_fail@plt+0xff58>
   223fc:	ldr	r1, [pc, #268]	; 22510 <__assert_fail@plt+0x101f0>
   22400:	mov	r2, #5
   22404:	mov	r0, #0
   22408:	add	r1, pc, r1
   2240c:	bl	11ec4 <dcgettext@plt>
   22410:	ldm	r4, {r3, ip}
   22414:	mov	r1, #1
   22418:	str	ip, [sp]
   2241c:	ldr	ip, [r4, #8]
   22420:	str	ip, [sp, #4]
   22424:	ldr	ip, [r4, #12]
   22428:	str	ip, [sp, #8]
   2242c:	ldr	ip, [r4, #16]
   22430:	str	ip, [sp, #12]
   22434:	ldr	ip, [r4, #20]
   22438:	str	ip, [sp, #16]
   2243c:	ldr	ip, [r4, #24]
   22440:	str	ip, [sp, #20]
   22444:	mov	r2, r0
   22448:	mov	r0, r5
   2244c:	bl	121ac <__fprintf_chk@plt>
   22450:	b	22278 <__assert_fail@plt+0xff58>
   22454:	ldr	r1, [pc, #184]	; 22514 <__assert_fail@plt+0x101f4>
   22458:	mov	r2, #5
   2245c:	mov	r0, #0
   22460:	add	r1, pc, r1
   22464:	bl	11ec4 <dcgettext@plt>
   22468:	ldm	r4, {r3, ip}
   2246c:	mov	r1, #1
   22470:	str	ip, [sp]
   22474:	ldr	ip, [r4, #8]
   22478:	str	ip, [sp, #4]
   2247c:	ldr	ip, [r4, #12]
   22480:	str	ip, [sp, #8]
   22484:	ldr	ip, [r4, #16]
   22488:	str	ip, [sp, #12]
   2248c:	ldr	ip, [r4, #20]
   22490:	str	ip, [sp, #16]
   22494:	ldr	ip, [r4, #24]
   22498:	str	ip, [sp, #20]
   2249c:	ldr	ip, [r4, #28]
   224a0:	str	ip, [sp, #24]
   224a4:	mov	r2, r0
   224a8:	mov	r0, r5
   224ac:	bl	121ac <__fprintf_chk@plt>
   224b0:	b	22278 <__assert_fail@plt+0xff58>
   224b4:	str	r3, [sp]
   224b8:	mov	r3, r2
   224bc:	ldr	r2, [pc, #84]	; 22518 <__assert_fail@plt+0x101f8>
   224c0:	mov	r1, #1
   224c4:	add	r2, pc, r2
   224c8:	bl	121ac <__fprintf_chk@plt>
   224cc:	b	22190 <__assert_fail@plt+0xfe70>
   224d0:	ldr	r1, [pc, #68]	; 2251c <__assert_fail@plt+0x101fc>
   224d4:	mov	r0, #0
   224d8:	add	r1, pc, r1
   224dc:	b	22220 <__assert_fail@plt+0xff00>
   224e0:	muleq	r1, r4, lr
   224e4:	strheq	r5, [r0], -ip
   224e8:	strheq	r5, [r0], -ip
   224ec:	andeq	r0, r0, r0, asr r2
   224f0:	andeq	r5, r0, ip, lsl #1
   224f4:	andeq	r5, r0, r8, lsl r2
   224f8:	muleq	r0, r8, r0
   224fc:	andeq	r5, r0, r8, ror r0
   22500:	andeq	r5, r0, ip, asr r0
   22504:	andeq	r5, r0, ip, lsr r0
   22508:	andeq	r5, r0, ip, lsl r0
   2250c:	strdeq	r4, [r0], -r8
   22510:	ldrdeq	r4, [r0], -r0
   22514:	andeq	r4, r0, r4, lsr #31
   22518:	andeq	r4, r0, ip, lsl #27
   2251c:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   22520:	push	{r4, r5, lr}
   22524:	sub	sp, sp, #12
   22528:	ldr	r5, [sp, #24]
   2252c:	ldr	ip, [r5]
   22530:	cmp	ip, #0
   22534:	beq	22550 <__assert_fail@plt+0x10230>
   22538:	mov	lr, r5
   2253c:	mov	ip, #0
   22540:	ldr	r4, [lr, #4]!
   22544:	add	ip, ip, #1
   22548:	cmp	r4, #0
   2254c:	bne	22540 <__assert_fail@plt+0x10220>
   22550:	stm	sp, {r5, ip}
   22554:	bl	2214c <__assert_fail@plt+0xfe2c>
   22558:	add	sp, sp, #12
   2255c:	pop	{r4, r5, pc}
   22560:	push	{r4, r5, r6, r7, lr}
   22564:	sub	sp, sp, #60	; 0x3c
   22568:	ldr	r4, [pc, #100]	; 225d4 <__assert_fail@plt+0x102b4>
   2256c:	mov	ip, #0
   22570:	ldr	r5, [pc, #96]	; 225d8 <__assert_fail@plt+0x102b8>
   22574:	mov	lr, ip
   22578:	add	r4, pc, r4
   2257c:	ldr	r6, [sp, #80]	; 0x50
   22580:	ldr	r7, [r4, r5]
   22584:	add	r5, sp, #12
   22588:	ldr	r4, [r7]
   2258c:	str	r4, [sp, #52]	; 0x34
   22590:	ldr	r4, [r6, ip]
   22594:	cmp	r4, #0
   22598:	str	r4, [r5, ip]
   2259c:	beq	225b0 <__assert_fail@plt+0x10290>
   225a0:	add	lr, lr, #1
   225a4:	add	ip, ip, #4
   225a8:	cmp	lr, #10
   225ac:	bne	22590 <__assert_fail@plt+0x10270>
   225b0:	stm	sp, {r5, lr}
   225b4:	bl	2214c <__assert_fail@plt+0xfe2c>
   225b8:	ldr	r2, [sp, #52]	; 0x34
   225bc:	ldr	r3, [r7]
   225c0:	cmp	r2, r3
   225c4:	bne	225d0 <__assert_fail@plt+0x102b0>
   225c8:	add	sp, sp, #60	; 0x3c
   225cc:	pop	{r4, r5, r6, r7, pc}
   225d0:	bl	11ed0 <__stack_chk_fail@plt>
   225d4:	andeq	r5, r1, r0, lsl #21
   225d8:	andeq	r0, r0, ip, lsl r2
   225dc:	push	{r3}		; (str r3, [sp, #-4]!)
   225e0:	push	{r4, lr}
   225e4:	sub	sp, sp, #20
   225e8:	ldr	lr, [pc, #72]	; 22638 <__assert_fail@plt+0x10318>
   225ec:	add	ip, sp, #32
   225f0:	ldr	r4, [pc, #68]	; 2263c <__assert_fail@plt+0x1031c>
   225f4:	add	lr, pc, lr
   225f8:	ldr	r3, [sp, #28]
   225fc:	ldr	r4, [lr, r4]
   22600:	str	ip, [sp]
   22604:	str	ip, [sp, #8]
   22608:	ldr	ip, [r4]
   2260c:	str	ip, [sp, #12]
   22610:	bl	22560 <__assert_fail@plt+0x10240>
   22614:	ldr	r2, [sp, #12]
   22618:	ldr	r3, [r4]
   2261c:	cmp	r2, r3
   22620:	bne	22634 <__assert_fail@plt+0x10314>
   22624:	add	sp, sp, #20
   22628:	pop	{r4, lr}
   2262c:	add	sp, sp, #4
   22630:	bx	lr
   22634:	bl	11ed0 <__stack_chk_fail@plt>
   22638:	andeq	r5, r1, r4, lsl #20
   2263c:	andeq	r0, r0, ip, lsl r2
   22640:	ldr	r1, [pc, #132]	; 226cc <__assert_fail@plt+0x103ac>
   22644:	mov	r2, #5
   22648:	push	{r4, lr}
   2264c:	add	r1, pc, r1
   22650:	mov	r0, #0
   22654:	ldr	r4, [pc, #116]	; 226d0 <__assert_fail@plt+0x103b0>
   22658:	bl	11ec4 <dcgettext@plt>
   2265c:	ldr	r2, [pc, #112]	; 226d4 <__assert_fail@plt+0x103b4>
   22660:	add	r4, pc, r4
   22664:	add	r2, pc, r2
   22668:	mov	r1, r0
   2266c:	mov	r0, #1
   22670:	bl	12188 <__printf_chk@plt>
   22674:	ldr	r1, [pc, #92]	; 226d8 <__assert_fail@plt+0x103b8>
   22678:	mov	r2, #5
   2267c:	mov	r0, #0
   22680:	add	r1, pc, r1
   22684:	bl	11ec4 <dcgettext@plt>
   22688:	ldr	r2, [pc, #76]	; 226dc <__assert_fail@plt+0x103bc>
   2268c:	ldr	r3, [pc, #76]	; 226e0 <__assert_fail@plt+0x103c0>
   22690:	add	r2, pc, r2
   22694:	add	r3, pc, r3
   22698:	mov	r1, r0
   2269c:	mov	r0, #1
   226a0:	bl	12188 <__printf_chk@plt>
   226a4:	ldr	r1, [pc, #56]	; 226e4 <__assert_fail@plt+0x103c4>
   226a8:	mov	r0, #0
   226ac:	mov	r2, #5
   226b0:	add	r1, pc, r1
   226b4:	bl	11ec4 <dcgettext@plt>
   226b8:	ldr	r3, [pc, #40]	; 226e8 <__assert_fail@plt+0x103c8>
   226bc:	ldr	r3, [r4, r3]
   226c0:	pop	{r4, lr}
   226c4:	ldr	r1, [r3]
   226c8:	b	11d38 <fputs_unlocked@plt>
   226cc:	andeq	r4, r0, r8, asr lr
   226d0:	muleq	r1, r8, r9
   226d4:	andeq	r4, r0, r8, asr lr
   226d8:	andeq	r4, r0, r4, asr lr
   226dc:	andeq	r4, r0, r4, asr #2
   226e0:	andeq	r4, r0, r0, asr r1
   226e4:	andeq	r4, r0, r8, lsr lr
   226e8:	andeq	r0, r0, r0, asr #4
   226ec:	push	{r4, lr}
   226f0:	mov	r4, r0
   226f4:	bl	1205c <malloc@plt>
   226f8:	rsbs	r3, r0, #1
   226fc:	movcc	r3, #0
   22700:	cmp	r4, #0
   22704:	moveq	r3, #0
   22708:	cmp	r3, #0
   2270c:	popeq	{r4, pc}
   22710:	bl	22900 <__assert_fail@plt+0x105e0>
   22714:	push	{r3, r4, r5, lr}
   22718:	mov	r4, r0
   2271c:	mvn	r0, #0
   22720:	mov	r5, r1
   22724:	bl	242f8 <__assert_fail@plt+0x11fd8>
   22728:	cmp	r0, r4
   2272c:	bcc	2273c <__assert_fail@plt+0x1041c>
   22730:	mul	r0, r4, r5
   22734:	pop	{r3, r4, r5, lr}
   22738:	b	226ec <__assert_fail@plt+0x103cc>
   2273c:	bl	22900 <__assert_fail@plt+0x105e0>
   22740:	b	226ec <__assert_fail@plt+0x103cc>
   22744:	rsbs	r3, r1, #1
   22748:	push	{r4, lr}
   2274c:	movcc	r3, #0
   22750:	cmp	r0, #0
   22754:	mov	r4, r1
   22758:	moveq	r3, #0
   2275c:	cmp	r3, #0
   22760:	bne	22784 <__assert_fail@plt+0x10464>
   22764:	bl	11f30 <realloc@plt>
   22768:	rsbs	r3, r0, #1
   2276c:	movcc	r3, #0
   22770:	cmp	r4, #0
   22774:	moveq	r3, #0
   22778:	cmp	r3, #0
   2277c:	popeq	{r4, pc}
   22780:	bl	22900 <__assert_fail@plt+0x105e0>
   22784:	bl	11dec <free@plt>
   22788:	mov	r0, #0
   2278c:	pop	{r4, pc}
   22790:	push	{r4, r5, r6, lr}
   22794:	mov	r5, r1
   22798:	mov	r6, r0
   2279c:	mov	r1, r2
   227a0:	mvn	r0, #0
   227a4:	mov	r4, r2
   227a8:	bl	242f8 <__assert_fail@plt+0x11fd8>
   227ac:	cmp	r0, r5
   227b0:	bcc	227c4 <__assert_fail@plt+0x104a4>
   227b4:	mov	r0, r6
   227b8:	mul	r1, r5, r4
   227bc:	pop	{r4, r5, r6, lr}
   227c0:	b	22744 <__assert_fail@plt+0x10424>
   227c4:	bl	22900 <__assert_fail@plt+0x105e0>
   227c8:	push	{r3, r4, r5, r6, r7, lr}
   227cc:	subs	r7, r0, #0
   227d0:	mov	r5, r1
   227d4:	mov	r6, r2
   227d8:	ldr	r4, [r1]
   227dc:	beq	22814 <__assert_fail@plt+0x104f4>
   227e0:	movw	r0, #43690	; 0xaaaa
   227e4:	mov	r1, r2
   227e8:	bfi	r0, r0, #16, #16
   227ec:	bl	242f8 <__assert_fail@plt+0x11fd8>
   227f0:	cmp	r4, r0
   227f4:	addcc	r3, r4, #1
   227f8:	addcc	r4, r4, r3, lsr #1
   227fc:	bcs	22838 <__assert_fail@plt+0x10518>
   22800:	str	r4, [r5]
   22804:	mov	r0, r7
   22808:	mul	r1, r6, r4
   2280c:	pop	{r3, r4, r5, r6, r7, lr}
   22810:	b	22744 <__assert_fail@plt+0x10424>
   22814:	cmp	r4, #0
   22818:	bne	22800 <__assert_fail@plt+0x104e0>
   2281c:	mov	r0, #64	; 0x40
   22820:	mov	r1, r2
   22824:	bl	242f8 <__assert_fail@plt+0x11fd8>
   22828:	cmp	r0, #0
   2282c:	movne	r4, r0
   22830:	addeq	r4, r0, #1
   22834:	b	22800 <__assert_fail@plt+0x104e0>
   22838:	bl	22900 <__assert_fail@plt+0x105e0>
   2283c:	cmp	r0, #0
   22840:	push	{r3, lr}
   22844:	ldr	r3, [r1]
   22848:	beq	22874 <__assert_fail@plt+0x10554>
   2284c:	movw	r2, #43689	; 0xaaa9
   22850:	movt	r2, #43690	; 0xaaaa
   22854:	cmp	r3, r2
   22858:	addls	r2, r3, #1
   2285c:	addls	r3, r3, r2, lsr #1
   22860:	bhi	2288c <__assert_fail@plt+0x1056c>
   22864:	str	r3, [r1]
   22868:	mov	r1, r3
   2286c:	pop	{r3, lr}
   22870:	b	22744 <__assert_fail@plt+0x10424>
   22874:	cmp	r3, #0
   22878:	moveq	r3, #64	; 0x40
   2287c:	str	r3, [r1]
   22880:	mov	r1, r3
   22884:	pop	{r3, lr}
   22888:	b	22744 <__assert_fail@plt+0x10424>
   2288c:	bl	22900 <__assert_fail@plt+0x105e0>
   22890:	push	{r4, lr}
   22894:	mov	r4, r0
   22898:	bl	226ec <__assert_fail@plt+0x103cc>
   2289c:	mov	r2, r4
   228a0:	mov	r1, #0
   228a4:	pop	{r4, lr}
   228a8:	b	12158 <memset@plt>
   228ac:	push	{r3, lr}
   228b0:	bl	11d2c <calloc@plt>
   228b4:	cmp	r0, #0
   228b8:	popne	{r3, pc}
   228bc:	bl	22900 <__assert_fail@plt+0x105e0>
   228c0:	push	{r3, r4, r5, lr}
   228c4:	mov	r4, r1
   228c8:	mov	r5, r0
   228cc:	mov	r0, r1
   228d0:	bl	226ec <__assert_fail@plt+0x103cc>
   228d4:	mov	r1, r5
   228d8:	mov	r2, r4
   228dc:	pop	{r3, r4, r5, lr}
   228e0:	b	11e28 <memcpy@plt>
   228e4:	push	{r4, lr}
   228e8:	mov	r4, r0
   228ec:	bl	120e0 <strlen@plt>
   228f0:	add	r1, r0, #1
   228f4:	mov	r0, r4
   228f8:	pop	{r4, lr}
   228fc:	b	228c0 <__assert_fail@plt+0x105a0>
   22900:	ldr	r3, [pc, #64]	; 22948 <__assert_fail@plt+0x10628>
   22904:	mov	r2, #5
   22908:	ldr	ip, [pc, #60]	; 2294c <__assert_fail@plt+0x1062c>
   2290c:	mov	r0, #0
   22910:	add	r3, pc, r3
   22914:	ldr	r1, [pc, #52]	; 22950 <__assert_fail@plt+0x10630>
   22918:	push	{r4, lr}
   2291c:	add	r1, pc, r1
   22920:	ldr	r3, [r3, ip]
   22924:	ldr	r4, [r3]
   22928:	bl	11ec4 <dcgettext@plt>
   2292c:	ldr	r2, [pc, #32]	; 22954 <__assert_fail@plt+0x10634>
   22930:	mov	r1, #0
   22934:	add	r2, pc, r2
   22938:	mov	r3, r0
   2293c:	mov	r0, r4
   22940:	bl	12020 <error@plt>
   22944:	bl	122fc <abort@plt>
   22948:	andeq	r5, r1, r8, ror #13
   2294c:	andeq	r0, r0, r4, asr #4
   22950:	andeq	r4, r0, ip, lsr ip
   22954:	andeq	r2, r0, ip, ror #29
   22958:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2295c:	mov	r9, r1
   22960:	ldr	r1, [pc, #196]	; 22a2c <__assert_fail@plt+0x1070c>
   22964:	mov	r4, r0
   22968:	mov	r5, r2
   2296c:	mov	r0, #0
   22970:	add	r1, pc, r1
   22974:	mov	r2, #5
   22978:	mov	r8, r3
   2297c:	ldr	r7, [sp, #32]
   22980:	bl	11ec4 <dcgettext@plt>
   22984:	mov	r1, r4
   22988:	ldr	r4, [pc, #160]	; 22a30 <__assert_fail@plt+0x10710>
   2298c:	add	r4, pc, r4
   22990:	mov	r2, r0
   22994:	mov	r0, #0
   22998:	bl	12020 <error@plt>
   2299c:	ldr	r1, [pc, #144]	; 22a34 <__assert_fail@plt+0x10714>
   229a0:	mov	r2, #5
   229a4:	mov	r0, #0
   229a8:	add	r1, pc, r1
   229ac:	bl	11ec4 <dcgettext@plt>
   229b0:	mov	r2, r0
   229b4:	mov	r0, #0
   229b8:	mov	r1, r0
   229bc:	bl	12020 <error@plt>
   229c0:	ldr	r3, [pc, #112]	; 22a38 <__assert_fail@plt+0x10718>
   229c4:	ldr	r1, [pc, #112]	; 22a3c <__assert_fail@plt+0x1071c>
   229c8:	mov	r2, #5
   229cc:	mov	r0, #0
   229d0:	ldr	r3, [r4, r3]
   229d4:	add	r1, pc, r1
   229d8:	ldr	r4, [r3]
   229dc:	bl	11ec4 <dcgettext@plt>
   229e0:	mov	r2, r9
   229e4:	mov	r3, r5
   229e8:	mov	r1, #6
   229ec:	mov	r6, r0
   229f0:	mov	r0, #0
   229f4:	bl	20be4 <__assert_fail@plt+0xe8c4>
   229f8:	mov	r2, r8
   229fc:	mov	r3, r7
   22a00:	mov	r1, #6
   22a04:	mov	r5, r0
   22a08:	mov	r0, #1
   22a0c:	bl	20be4 <__assert_fail@plt+0xe8c4>
   22a10:	mov	r2, r6
   22a14:	mov	r3, r5
   22a18:	mov	r1, #0
   22a1c:	str	r0, [sp, #32]
   22a20:	mov	r0, r4
   22a24:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   22a28:	b	12020 <error@plt>
   22a2c:	strdeq	r4, [r0], -ip
   22a30:	andeq	r5, r1, ip, ror #12
   22a34:	andeq	r4, r0, r0, ror #23
   22a38:	andeq	r0, r0, r4, asr #4
   22a3c:	andeq	r4, r0, r0, ror #23
   22a40:	push	{r4, r5, r6, r7, r8, lr}
   22a44:	sub	sp, sp, #8
   22a48:	mov	r6, r1
   22a4c:	mov	r5, r2
   22a50:	mov	r8, r3
   22a54:	mov	r7, r0
   22a58:	bl	24220 <__assert_fail@plt+0x11f00>
   22a5c:	mov	r4, r0
   22a60:	bl	1211c <__errno_location@plt>
   22a64:	ldr	r0, [r0]
   22a68:	cmp	r0, #0
   22a6c:	beq	22a84 <__assert_fail@plt+0x10764>
   22a70:	str	r8, [sp]
   22a74:	mov	r1, r7
   22a78:	mov	r2, r6
   22a7c:	mov	r3, r5
   22a80:	bl	22958 <__assert_fail@plt+0x10638>
   22a84:	mov	r0, r4
   22a88:	add	sp, sp, #8
   22a8c:	pop	{r4, r5, r6, r7, r8, pc}
   22a90:	push	{r4, r5, r6, r7, r8, lr}
   22a94:	sub	sp, sp, #8
   22a98:	mov	r6, r1
   22a9c:	mov	r5, r2
   22aa0:	mov	r8, r3
   22aa4:	mov	r7, r0
   22aa8:	bl	242a0 <__assert_fail@plt+0x11f80>
   22aac:	mov	r4, r0
   22ab0:	bl	1211c <__errno_location@plt>
   22ab4:	ldr	r0, [r0]
   22ab8:	cmp	r0, #0
   22abc:	beq	22ad8 <__assert_fail@plt+0x107b8>
   22ac0:	sub	r8, r8, #1
   22ac4:	mov	r1, r7
   22ac8:	str	r8, [sp]
   22acc:	sub	r2, r6, #1
   22ad0:	mov	r3, r5
   22ad4:	bl	22958 <__assert_fail@plt+0x10638>
   22ad8:	mov	r0, r4
   22adc:	add	sp, sp, #8
   22ae0:	pop	{r4, r5, r6, r7, r8, pc}
   22ae4:	ldr	r3, [pc, #124]	; 22b68 <__assert_fail@plt+0x10848>
   22ae8:	ldr	r2, [pc, #124]	; 22b6c <__assert_fail@plt+0x1084c>
   22aec:	add	r3, pc, r3
   22af0:	push	{r4, r5, r6, r7, lr}
   22af4:	sub	sp, sp, #20
   22af8:	ldr	r7, [r3, r2]
   22afc:	add	r5, sp, #4
   22b00:	mov	r6, #0
   22b04:	mov	r0, r5
   22b08:	ldr	r3, [r7]
   22b0c:	str	r3, [sp, #12]
   22b10:	bl	23c90 <__assert_fail@plt+0x11970>
   22b14:	bl	1211c <__errno_location@plt>
   22b18:	mov	r4, r0
   22b1c:	b	22b2c <__assert_fail@plt+0x1080c>
   22b20:	ldr	r3, [r4]
   22b24:	bics	r2, r3, #4
   22b28:	bne	22b5c <__assert_fail@plt+0x1083c>
   22b2c:	str	r6, [r4]
   22b30:	mov	r0, r5
   22b34:	mov	r1, #0
   22b38:	bl	11e04 <nanosleep@plt>
   22b3c:	cmp	r0, #0
   22b40:	bne	22b20 <__assert_fail@plt+0x10800>
   22b44:	ldr	r2, [sp, #12]
   22b48:	ldr	r3, [r7]
   22b4c:	cmp	r2, r3
   22b50:	bne	22b64 <__assert_fail@plt+0x10844>
   22b54:	add	sp, sp, #20
   22b58:	pop	{r4, r5, r6, r7, pc}
   22b5c:	mvn	r0, #0
   22b60:	b	22b44 <__assert_fail@plt+0x10824>
   22b64:	bl	11ed0 <__stack_chk_fail@plt>
   22b68:	andeq	r5, r1, ip, lsl #10
   22b6c:	andeq	r0, r0, ip, lsl r2
   22b70:	ldr	ip, [pc, #1308]	; 23094 <__assert_fail@plt+0x10d74>
   22b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b78:	mov	sl, r2
   22b7c:	ldr	r2, [pc, #1300]	; 23098 <__assert_fail@plt+0x10d78>
   22b80:	add	ip, pc, ip
   22b84:	mov	r9, r3
   22b88:	sub	sp, sp, #20
   22b8c:	mov	r3, ip
   22b90:	cmp	sl, #36	; 0x24
   22b94:	ldr	r6, [ip, r2]
   22b98:	mov	r5, r0
   22b9c:	mov	r7, r1
   22ba0:	ldr	r8, [sp, #56]	; 0x38
   22ba4:	ldr	r3, [r6]
   22ba8:	str	r3, [sp, #12]
   22bac:	bhi	23074 <__assert_fail@plt+0x10d54>
   22bb0:	cmp	r1, #0
   22bb4:	addeq	r7, sp, #8
   22bb8:	bl	120b0 <__ctype_b_loc@plt>
   22bbc:	ldrb	ip, [r5]
   22bc0:	mov	r2, r5
   22bc4:	ldr	r1, [r0]
   22bc8:	b	22bd0 <__assert_fail@plt+0x108b0>
   22bcc:	ldrb	ip, [r2, #1]!
   22bd0:	lsl	r3, ip, #1
   22bd4:	ldrh	r4, [r1, r3]
   22bd8:	and	r4, r4, #8192	; 0x2000
   22bdc:	uxth	r4, r4
   22be0:	cmp	r4, #0
   22be4:	bne	22bcc <__assert_fail@plt+0x108ac>
   22be8:	cmp	ip, #45	; 0x2d
   22bec:	bne	22c0c <__assert_fail@plt+0x108ec>
   22bf0:	mov	r0, #4
   22bf4:	ldr	r2, [sp, #12]
   22bf8:	ldr	r3, [r6]
   22bfc:	cmp	r2, r3
   22c00:	bne	23070 <__assert_fail@plt+0x10d50>
   22c04:	add	sp, sp, #20
   22c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c0c:	bl	1211c <__errno_location@plt>
   22c10:	mov	r2, sl
   22c14:	mov	r1, r7
   22c18:	str	r4, [r0]
   22c1c:	mov	fp, r0
   22c20:	mov	r0, r5
   22c24:	bl	120d4 <strtoul@plt>
   22c28:	ldr	r3, [r7]
   22c2c:	cmp	r3, r5
   22c30:	mov	sl, r0
   22c34:	beq	22dc4 <__assert_fail@plt+0x10aa4>
   22c38:	ldr	r0, [fp]
   22c3c:	cmp	r0, #0
   22c40:	bne	22c70 <__assert_fail@plt+0x10950>
   22c44:	mov	r4, r0
   22c48:	cmp	r8, #0
   22c4c:	streq	sl, [r9]
   22c50:	moveq	r0, r4
   22c54:	beq	22bf4 <__assert_fail@plt+0x108d4>
   22c58:	ldrb	r5, [r3]
   22c5c:	cmp	r5, #0
   22c60:	bne	22c80 <__assert_fail@plt+0x10960>
   22c64:	mov	r0, r4
   22c68:	str	sl, [r9]
   22c6c:	b	22bf4 <__assert_fail@plt+0x108d4>
   22c70:	cmp	r0, #34	; 0x22
   22c74:	moveq	r4, #1
   22c78:	bne	22bf0 <__assert_fail@plt+0x108d0>
   22c7c:	b	22c48 <__assert_fail@plt+0x10928>
   22c80:	mov	r0, r8
   22c84:	mov	r1, r5
   22c88:	str	r3, [sp, #4]
   22c8c:	bl	120ec <strchr@plt>
   22c90:	ldr	r3, [sp, #4]
   22c94:	cmp	r0, #0
   22c98:	beq	22dfc <__assert_fail@plt+0x10adc>
   22c9c:	mov	r0, r8
   22ca0:	mov	r1, #48	; 0x30
   22ca4:	str	r3, [sp, #4]
   22ca8:	bl	120ec <strchr@plt>
   22cac:	ldr	r3, [sp, #4]
   22cb0:	cmp	r0, #0
   22cb4:	beq	22cd4 <__assert_fail@plt+0x109b4>
   22cb8:	ldrb	r2, [r3, #1]
   22cbc:	cmp	r2, #68	; 0x44
   22cc0:	beq	23058 <__assert_fail@plt+0x10d38>
   22cc4:	cmp	r2, #105	; 0x69
   22cc8:	beq	23040 <__assert_fail@plt+0x10d20>
   22ccc:	cmp	r2, #66	; 0x42
   22cd0:	beq	23058 <__assert_fail@plt+0x10d38>
   22cd4:	mov	r8, #1
   22cd8:	mov	fp, #1024	; 0x400
   22cdc:	sub	r5, r5, #66	; 0x42
   22ce0:	cmp	r5, #53	; 0x35
   22ce4:	addls	pc, pc, r5, lsl #2
   22ce8:	b	22dfc <__assert_fail@plt+0x10adc>
   22cec:	b	22fec <__assert_fail@plt+0x10ccc>
   22cf0:	b	22dfc <__assert_fail@plt+0x10adc>
   22cf4:	b	22dfc <__assert_fail@plt+0x10adc>
   22cf8:	b	22fac <__assert_fail@plt+0x10c8c>
   22cfc:	b	22dfc <__assert_fail@plt+0x10adc>
   22d00:	b	23000 <__assert_fail@plt+0x10ce0>
   22d04:	b	22dfc <__assert_fail@plt+0x10adc>
   22d08:	b	22dfc <__assert_fail@plt+0x10adc>
   22d0c:	b	22dfc <__assert_fail@plt+0x10adc>
   22d10:	b	22f8c <__assert_fail@plt+0x10c6c>
   22d14:	b	22dfc <__assert_fail@plt+0x10adc>
   22d18:	b	22f58 <__assert_fail@plt+0x10c38>
   22d1c:	b	22dfc <__assert_fail@plt+0x10adc>
   22d20:	b	22dfc <__assert_fail@plt+0x10adc>
   22d24:	b	22f18 <__assert_fail@plt+0x10bf8>
   22d28:	b	22dfc <__assert_fail@plt+0x10adc>
   22d2c:	b	22dfc <__assert_fail@plt+0x10adc>
   22d30:	b	22dfc <__assert_fail@plt+0x10adc>
   22d34:	b	22ed8 <__assert_fail@plt+0x10bb8>
   22d38:	b	22dfc <__assert_fail@plt+0x10adc>
   22d3c:	b	22dfc <__assert_fail@plt+0x10adc>
   22d40:	b	22dfc <__assert_fail@plt+0x10adc>
   22d44:	b	22dfc <__assert_fail@plt+0x10adc>
   22d48:	b	22e98 <__assert_fail@plt+0x10b78>
   22d4c:	b	22e58 <__assert_fail@plt+0x10b38>
   22d50:	b	22dfc <__assert_fail@plt+0x10adc>
   22d54:	b	22dfc <__assert_fail@plt+0x10adc>
   22d58:	b	22dfc <__assert_fail@plt+0x10adc>
   22d5c:	b	22dfc <__assert_fail@plt+0x10adc>
   22d60:	b	22dfc <__assert_fail@plt+0x10adc>
   22d64:	b	22dfc <__assert_fail@plt+0x10adc>
   22d68:	b	22dfc <__assert_fail@plt+0x10adc>
   22d6c:	b	22e44 <__assert_fail@plt+0x10b24>
   22d70:	b	22e08 <__assert_fail@plt+0x10ae8>
   22d74:	b	22dfc <__assert_fail@plt+0x10adc>
   22d78:	b	22dfc <__assert_fail@plt+0x10adc>
   22d7c:	b	22dfc <__assert_fail@plt+0x10adc>
   22d80:	b	23000 <__assert_fail@plt+0x10ce0>
   22d84:	b	22dfc <__assert_fail@plt+0x10adc>
   22d88:	b	22dfc <__assert_fail@plt+0x10adc>
   22d8c:	b	22dfc <__assert_fail@plt+0x10adc>
   22d90:	b	22f8c <__assert_fail@plt+0x10c6c>
   22d94:	b	22dfc <__assert_fail@plt+0x10adc>
   22d98:	b	22f58 <__assert_fail@plt+0x10c38>
   22d9c:	b	22dfc <__assert_fail@plt+0x10adc>
   22da0:	b	22dfc <__assert_fail@plt+0x10adc>
   22da4:	b	22dfc <__assert_fail@plt+0x10adc>
   22da8:	b	22dfc <__assert_fail@plt+0x10adc>
   22dac:	b	22dfc <__assert_fail@plt+0x10adc>
   22db0:	b	22dfc <__assert_fail@plt+0x10adc>
   22db4:	b	22ed8 <__assert_fail@plt+0x10bb8>
   22db8:	b	22dfc <__assert_fail@plt+0x10adc>
   22dbc:	b	22dfc <__assert_fail@plt+0x10adc>
   22dc0:	b	22e28 <__assert_fail@plt+0x10b08>
   22dc4:	cmp	r8, #0
   22dc8:	beq	22bf0 <__assert_fail@plt+0x108d0>
   22dcc:	ldrb	r5, [r5]
   22dd0:	cmp	r5, #0
   22dd4:	beq	22bf0 <__assert_fail@plt+0x108d0>
   22dd8:	mov	r0, r8
   22ddc:	mov	r1, r5
   22de0:	str	r3, [sp, #4]
   22de4:	bl	120ec <strchr@plt>
   22de8:	ldr	r3, [sp, #4]
   22dec:	cmp	r0, #0
   22df0:	movne	sl, #1
   22df4:	bne	22c9c <__assert_fail@plt+0x1097c>
   22df8:	b	22bf0 <__assert_fail@plt+0x108d0>
   22dfc:	str	sl, [r9]
   22e00:	orr	r0, r4, #2
   22e04:	b	22bf4 <__assert_fail@plt+0x108d4>
   22e08:	mov	r2, #0
   22e0c:	add	r1, r3, r8
   22e10:	str	r1, [r7]
   22e14:	ldrb	r3, [r3, r8]
   22e18:	orr	r4, r4, r2
   22e1c:	cmp	r3, #0
   22e20:	orrne	r4, r4, #2
   22e24:	b	22c64 <__assert_fail@plt+0x10944>
   22e28:	cmn	sl, #-2147483647	; 0x80000001
   22e2c:	lslls	sl, sl, #1
   22e30:	movls	r2, #0
   22e34:	bls	22e0c <__assert_fail@plt+0x10aec>
   22e38:	mvn	sl, #0
   22e3c:	mov	r2, #1
   22e40:	b	22e0c <__assert_fail@plt+0x10aec>
   22e44:	cmp	sl, #8388608	; 0x800000
   22e48:	lslcc	sl, sl, #9
   22e4c:	movcc	r2, #0
   22e50:	bcc	22e0c <__assert_fail@plt+0x10aec>
   22e54:	b	22e38 <__assert_fail@plt+0x10b18>
   22e58:	mov	r1, fp
   22e5c:	mvn	r0, #0
   22e60:	str	r3, [sp, #4]
   22e64:	bl	242f8 <__assert_fail@plt+0x11fd8>
   22e68:	ldr	r3, [sp, #4]
   22e6c:	mov	r1, #7
   22e70:	mov	r2, #0
   22e74:	cmp	r0, sl
   22e78:	movcs	ip, #0
   22e7c:	movcc	ip, #1
   22e80:	mulcs	sl, fp, sl
   22e84:	mvncc	sl, #0
   22e88:	subs	r1, r1, #1
   22e8c:	orr	r2, r2, ip
   22e90:	bne	22e74 <__assert_fail@plt+0x10b54>
   22e94:	b	22e0c <__assert_fail@plt+0x10aec>
   22e98:	mov	r1, fp
   22e9c:	mvn	r0, #0
   22ea0:	str	r3, [sp, #4]
   22ea4:	bl	242f8 <__assert_fail@plt+0x11fd8>
   22ea8:	ldr	r3, [sp, #4]
   22eac:	mov	r1, #8
   22eb0:	mov	r2, #0
   22eb4:	cmp	r0, sl
   22eb8:	movcs	ip, #0
   22ebc:	movcc	ip, #1
   22ec0:	mulcs	sl, fp, sl
   22ec4:	mvncc	sl, #0
   22ec8:	subs	r1, r1, #1
   22ecc:	orr	r2, r2, ip
   22ed0:	bne	22eb4 <__assert_fail@plt+0x10b94>
   22ed4:	b	22e0c <__assert_fail@plt+0x10aec>
   22ed8:	mov	r1, fp
   22edc:	mvn	r0, #0
   22ee0:	str	r3, [sp, #4]
   22ee4:	bl	242f8 <__assert_fail@plt+0x11fd8>
   22ee8:	ldr	r3, [sp, #4]
   22eec:	mov	r1, #4
   22ef0:	mov	r2, #0
   22ef4:	cmp	r0, sl
   22ef8:	movcs	ip, #0
   22efc:	movcc	ip, #1
   22f00:	mulcs	sl, fp, sl
   22f04:	mvncc	sl, #0
   22f08:	subs	r1, r1, #1
   22f0c:	orr	r2, r2, ip
   22f10:	bne	22ef4 <__assert_fail@plt+0x10bd4>
   22f14:	b	22e0c <__assert_fail@plt+0x10aec>
   22f18:	mov	r1, fp
   22f1c:	mvn	r0, #0
   22f20:	str	r3, [sp, #4]
   22f24:	bl	242f8 <__assert_fail@plt+0x11fd8>
   22f28:	ldr	r3, [sp, #4]
   22f2c:	mov	r1, #5
   22f30:	mov	r2, #0
   22f34:	cmp	r0, sl
   22f38:	movcs	ip, #0
   22f3c:	movcc	ip, #1
   22f40:	mulcs	sl, fp, sl
   22f44:	mvncc	sl, #0
   22f48:	subs	r1, r1, #1
   22f4c:	orr	r2, r2, ip
   22f50:	bne	22f34 <__assert_fail@plt+0x10c14>
   22f54:	b	22e0c <__assert_fail@plt+0x10aec>
   22f58:	mvn	r0, #0
   22f5c:	mov	r1, fp
   22f60:	str	r3, [sp, #4]
   22f64:	bl	242f8 <__assert_fail@plt+0x11fd8>
   22f68:	ldr	r3, [sp, #4]
   22f6c:	cmp	sl, r0
   22f70:	bhi	23064 <__assert_fail@plt+0x10d44>
   22f74:	mul	sl, sl, fp
   22f78:	cmp	r0, sl
   22f7c:	bcc	23064 <__assert_fail@plt+0x10d44>
   22f80:	mul	sl, fp, sl
   22f84:	mov	r2, #0
   22f88:	b	22e0c <__assert_fail@plt+0x10aec>
   22f8c:	mvn	r0, #0
   22f90:	mov	r1, fp
   22f94:	str	r3, [sp, #4]
   22f98:	bl	242f8 <__assert_fail@plt+0x11fd8>
   22f9c:	ldr	r3, [sp, #4]
   22fa0:	cmp	sl, r0
   22fa4:	bhi	22e38 <__assert_fail@plt+0x10b18>
   22fa8:	b	22f80 <__assert_fail@plt+0x10c60>
   22fac:	mov	r1, fp
   22fb0:	mvn	r0, #0
   22fb4:	str	r3, [sp, #4]
   22fb8:	bl	242f8 <__assert_fail@plt+0x11fd8>
   22fbc:	ldr	r3, [sp, #4]
   22fc0:	mov	r1, #6
   22fc4:	mov	r2, #0
   22fc8:	cmp	r0, sl
   22fcc:	movcs	ip, #0
   22fd0:	movcc	ip, #1
   22fd4:	mulcs	sl, fp, sl
   22fd8:	mvncc	sl, #0
   22fdc:	subs	r1, r1, #1
   22fe0:	orr	r2, r2, ip
   22fe4:	bne	22fc8 <__assert_fail@plt+0x10ca8>
   22fe8:	b	22e0c <__assert_fail@plt+0x10aec>
   22fec:	cmp	sl, #4194304	; 0x400000
   22ff0:	lslcc	sl, sl, #10
   22ff4:	movcc	r2, #0
   22ff8:	bcc	22e0c <__assert_fail@plt+0x10aec>
   22ffc:	b	22e38 <__assert_fail@plt+0x10b18>
   23000:	mov	r1, fp
   23004:	mvn	r0, #0
   23008:	str	r3, [sp, #4]
   2300c:	bl	242f8 <__assert_fail@plt+0x11fd8>
   23010:	ldr	r3, [sp, #4]
   23014:	mov	r1, #3
   23018:	mov	r2, #0
   2301c:	cmp	r0, sl
   23020:	movcs	ip, #0
   23024:	movcc	ip, #1
   23028:	mulcs	sl, fp, sl
   2302c:	mvncc	sl, #0
   23030:	subs	r1, r1, #1
   23034:	orr	r2, r2, ip
   23038:	bne	2301c <__assert_fail@plt+0x10cfc>
   2303c:	b	22e0c <__assert_fail@plt+0x10aec>
   23040:	ldrb	r8, [r3, #2]
   23044:	mov	fp, #1024	; 0x400
   23048:	cmp	r8, #66	; 0x42
   2304c:	moveq	r8, #3
   23050:	movne	r8, #1
   23054:	b	22cdc <__assert_fail@plt+0x109bc>
   23058:	mov	r8, #2
   2305c:	mov	fp, #1000	; 0x3e8
   23060:	b	22cdc <__assert_fail@plt+0x109bc>
   23064:	mov	r2, #1
   23068:	mvn	sl, #0
   2306c:	b	22e0c <__assert_fail@plt+0x10aec>
   23070:	bl	11ed0 <__stack_chk_fail@plt>
   23074:	ldr	r0, [pc, #32]	; 2309c <__assert_fail@plt+0x10d7c>
   23078:	mov	r2, #96	; 0x60
   2307c:	ldr	r1, [pc, #28]	; 230a0 <__assert_fail@plt+0x10d80>
   23080:	ldr	r3, [pc, #28]	; 230a4 <__assert_fail@plt+0x10d84>
   23084:	add	r0, pc, r0
   23088:	add	r1, pc, r1
   2308c:	add	r3, pc, r3
   23090:	bl	12320 <__assert_fail@plt>
   23094:	andeq	r5, r1, r8, ror r4
   23098:	andeq	r0, r0, ip, lsl r2
   2309c:	andeq	r4, r0, r4, ror #10
   230a0:	andeq	r4, r0, r8, lsl #11
   230a4:	andeq	r4, r0, r0, asr r5
   230a8:	ldr	ip, [pc, #204]	; 2317c <__assert_fail@plt+0x10e5c>
   230ac:	push	{r4, r5, r6, r7, lr}
   230b0:	sub	lr, r0, #1
   230b4:	ldr	r0, [pc, #196]	; 23180 <__assert_fail@plt+0x10e60>
   230b8:	add	ip, pc, ip
   230bc:	ldr	r4, [pc, #192]	; 23184 <__assert_fail@plt+0x10e64>
   230c0:	sub	sp, sp, #20
   230c4:	ldr	r0, [ip, r0]
   230c8:	ldr	r5, [sp, #40]	; 0x28
   230cc:	ldr	r0, [r0]
   230d0:	str	r0, [sp, #12]
   230d4:	ldr	r0, [ip, r4]
   230d8:	ldr	r4, [r0]
   230dc:	cmp	lr, #3
   230e0:	addls	pc, pc, lr, lsl #2
   230e4:	b	23140 <__assert_fail@plt+0x10e20>
   230e8:	b	23144 <__assert_fail@plt+0x10e24>
   230ec:	b	230f8 <__assert_fail@plt+0x10dd8>
   230f0:	b	230f8 <__assert_fail@plt+0x10dd8>
   230f4:	b	23150 <__assert_fail@plt+0x10e30>
   230f8:	ldr	r0, [pc, #136]	; 23188 <__assert_fail@plt+0x10e68>
   230fc:	add	r0, pc, r0
   23100:	cmp	r1, #0
   23104:	blt	2315c <__assert_fail@plt+0x10e3c>
   23108:	ldr	r7, [pc, #124]	; 2318c <__assert_fail@plt+0x10e6c>
   2310c:	ldr	r6, [r3, r1, lsl #4]
   23110:	add	r7, pc, r7
   23114:	mov	r1, r0
   23118:	mov	r2, #5
   2311c:	mov	r0, #0
   23120:	bl	11ec4 <dcgettext@plt>
   23124:	str	r6, [sp]
   23128:	str	r5, [sp, #4]
   2312c:	mov	r3, r7
   23130:	mov	r1, #0
   23134:	mov	r2, r0
   23138:	mov	r0, r4
   2313c:	bl	12020 <error@plt>
   23140:	bl	122fc <abort@plt>
   23144:	ldr	r0, [pc, #68]	; 23190 <__assert_fail@plt+0x10e70>
   23148:	add	r0, pc, r0
   2314c:	b	23100 <__assert_fail@plt+0x10de0>
   23150:	ldr	r0, [pc, #60]	; 23194 <__assert_fail@plt+0x10e74>
   23154:	add	r0, pc, r0
   23158:	b	23100 <__assert_fail@plt+0x10de0>
   2315c:	ldr	r7, [pc, #52]	; 23198 <__assert_fail@plt+0x10e78>
   23160:	mov	r3, #0
   23164:	strb	r2, [sp, #8]
   23168:	add	r6, sp, #8
   2316c:	add	r7, pc, r7
   23170:	strb	r3, [sp, #9]
   23174:	rsb	r7, r1, r7
   23178:	b	23114 <__assert_fail@plt+0x10df4>
   2317c:	andeq	r4, r1, r0, asr #30
   23180:	andeq	r0, r0, ip, lsl r2
   23184:	andeq	r0, r0, r4, asr #4
   23188:	andeq	r4, r0, r0, asr #10
   2318c:	andeq	r4, r0, r4, ror r5
   23190:	andeq	r4, r0, ip, lsl r5
   23194:	andeq	r4, r0, ip, asr #9
   23198:	andeq	r4, r0, r8, lsl r5
   2319c:	ldr	ip, [pc, #1852]	; 238e0 <__assert_fail@plt+0x115c0>
   231a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231a4:	mov	fp, r2
   231a8:	ldr	r2, [pc, #1844]	; 238e4 <__assert_fail@plt+0x115c4>
   231ac:	add	ip, pc, ip
   231b0:	mov	r9, r3
   231b4:	sub	sp, sp, #36	; 0x24
   231b8:	mov	r3, ip
   231bc:	cmp	fp, #36	; 0x24
   231c0:	ldr	sl, [ip, r2]
   231c4:	mov	r5, r0
   231c8:	mov	r8, r1
   231cc:	ldr	r6, [sp, #72]	; 0x48
   231d0:	ldr	r3, [sl]
   231d4:	str	r3, [sp, #28]
   231d8:	bhi	238c0 <__assert_fail@plt+0x115a0>
   231dc:	cmp	r1, #0
   231e0:	addeq	r8, sp, #24
   231e4:	bl	120b0 <__ctype_b_loc@plt>
   231e8:	ldrb	r3, [r5]
   231ec:	mov	r1, r5
   231f0:	ldr	r0, [r0]
   231f4:	b	231fc <__assert_fail@plt+0x10edc>
   231f8:	ldrb	r3, [r1, #1]!
   231fc:	lsl	r2, r3, #1
   23200:	ldrh	r4, [r0, r2]
   23204:	and	r4, r4, #8192	; 0x2000
   23208:	uxth	r4, r4
   2320c:	cmp	r4, #0
   23210:	bne	231f8 <__assert_fail@plt+0x10ed8>
   23214:	cmp	r3, #45	; 0x2d
   23218:	bne	23238 <__assert_fail@plt+0x10f18>
   2321c:	mov	r0, #4
   23220:	ldr	r2, [sp, #28]
   23224:	ldr	r3, [sl]
   23228:	cmp	r2, r3
   2322c:	bne	238bc <__assert_fail@plt+0x1159c>
   23230:	add	sp, sp, #36	; 0x24
   23234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23238:	bl	1211c <__errno_location@plt>
   2323c:	mov	r2, fp
   23240:	mov	r1, r8
   23244:	mov	r3, r4
   23248:	str	r4, [r0]
   2324c:	mov	r7, r0
   23250:	mov	r0, r5
   23254:	bl	11e58 <__strtoull_internal@plt>
   23258:	ldr	fp, [r8]
   2325c:	cmp	fp, r5
   23260:	strd	r0, [sp]
   23264:	beq	233e0 <__assert_fail@plt+0x110c0>
   23268:	ldr	ip, [r7]
   2326c:	cmp	ip, #0
   23270:	bne	2329c <__assert_fail@plt+0x10f7c>
   23274:	mov	r7, ip
   23278:	cmp	r6, #0
   2327c:	beq	2384c <__assert_fail@plt+0x1152c>
   23280:	ldrb	r5, [fp]
   23284:	cmp	r5, #0
   23288:	bne	232ac <__assert_fail@plt+0x10f8c>
   2328c:	ldrd	r2, [sp]
   23290:	mov	r0, r7
   23294:	strd	r2, [r9]
   23298:	b	23220 <__assert_fail@plt+0x10f00>
   2329c:	cmp	ip, #34	; 0x22
   232a0:	moveq	r7, #1
   232a4:	bne	2321c <__assert_fail@plt+0x10efc>
   232a8:	b	23278 <__assert_fail@plt+0x10f58>
   232ac:	mov	r0, r6
   232b0:	mov	r1, r5
   232b4:	bl	120ec <strchr@plt>
   232b8:	cmp	r0, #0
   232bc:	beq	2341c <__assert_fail@plt+0x110fc>
   232c0:	mov	r0, r6
   232c4:	mov	r1, #48	; 0x30
   232c8:	bl	120ec <strchr@plt>
   232cc:	cmp	r0, #0
   232d0:	beq	232f0 <__assert_fail@plt+0x10fd0>
   232d4:	ldrb	r3, [fp, #1]
   232d8:	cmp	r3, #68	; 0x44
   232dc:	beq	23874 <__assert_fail@plt+0x11554>
   232e0:	cmp	r3, #105	; 0x69
   232e4:	beq	2385c <__assert_fail@plt+0x1153c>
   232e8:	cmp	r3, #66	; 0x42
   232ec:	beq	23874 <__assert_fail@plt+0x11554>
   232f0:	mov	r6, #1
   232f4:	mov	r4, #1024	; 0x400
   232f8:	sub	r5, r5, #66	; 0x42
   232fc:	cmp	r5, #53	; 0x35
   23300:	addls	pc, pc, r5, lsl #2
   23304:	b	2341c <__assert_fail@plt+0x110fc>
   23308:	b	236c4 <__assert_fail@plt+0x113a4>
   2330c:	b	2341c <__assert_fail@plt+0x110fc>
   23310:	b	2341c <__assert_fail@plt+0x110fc>
   23314:	b	23658 <__assert_fail@plt+0x11338>
   23318:	b	2341c <__assert_fail@plt+0x110fc>
   2331c:	b	235ec <__assert_fail@plt+0x112cc>
   23320:	b	2341c <__assert_fail@plt+0x110fc>
   23324:	b	2341c <__assert_fail@plt+0x110fc>
   23328:	b	2341c <__assert_fail@plt+0x110fc>
   2332c:	b	23594 <__assert_fail@plt+0x11274>
   23330:	b	2341c <__assert_fail@plt+0x110fc>
   23334:	b	2376c <__assert_fail@plt+0x1144c>
   23338:	b	2341c <__assert_fail@plt+0x110fc>
   2333c:	b	2341c <__assert_fail@plt+0x110fc>
   23340:	b	23700 <__assert_fail@plt+0x113e0>
   23344:	b	2341c <__assert_fail@plt+0x110fc>
   23348:	b	2341c <__assert_fail@plt+0x110fc>
   2334c:	b	2341c <__assert_fail@plt+0x110fc>
   23350:	b	237e0 <__assert_fail@plt+0x114c0>
   23354:	b	2341c <__assert_fail@plt+0x110fc>
   23358:	b	2341c <__assert_fail@plt+0x110fc>
   2335c:	b	2341c <__assert_fail@plt+0x110fc>
   23360:	b	2341c <__assert_fail@plt+0x110fc>
   23364:	b	23528 <__assert_fail@plt+0x11208>
   23368:	b	234b0 <__assert_fail@plt+0x11190>
   2336c:	b	2341c <__assert_fail@plt+0x110fc>
   23370:	b	2341c <__assert_fail@plt+0x110fc>
   23374:	b	2341c <__assert_fail@plt+0x110fc>
   23378:	b	2341c <__assert_fail@plt+0x110fc>
   2337c:	b	2341c <__assert_fail@plt+0x110fc>
   23380:	b	2341c <__assert_fail@plt+0x110fc>
   23384:	b	2341c <__assert_fail@plt+0x110fc>
   23388:	b	23474 <__assert_fail@plt+0x11154>
   2338c:	b	2342c <__assert_fail@plt+0x1110c>
   23390:	b	2341c <__assert_fail@plt+0x110fc>
   23394:	b	2341c <__assert_fail@plt+0x110fc>
   23398:	b	2341c <__assert_fail@plt+0x110fc>
   2339c:	b	235ec <__assert_fail@plt+0x112cc>
   233a0:	b	2341c <__assert_fail@plt+0x110fc>
   233a4:	b	2341c <__assert_fail@plt+0x110fc>
   233a8:	b	2341c <__assert_fail@plt+0x110fc>
   233ac:	b	23594 <__assert_fail@plt+0x11274>
   233b0:	b	2341c <__assert_fail@plt+0x110fc>
   233b4:	b	2376c <__assert_fail@plt+0x1144c>
   233b8:	b	2341c <__assert_fail@plt+0x110fc>
   233bc:	b	2341c <__assert_fail@plt+0x110fc>
   233c0:	b	2341c <__assert_fail@plt+0x110fc>
   233c4:	b	2341c <__assert_fail@plt+0x110fc>
   233c8:	b	2341c <__assert_fail@plt+0x110fc>
   233cc:	b	2341c <__assert_fail@plt+0x110fc>
   233d0:	b	237e0 <__assert_fail@plt+0x114c0>
   233d4:	b	2341c <__assert_fail@plt+0x110fc>
   233d8:	b	2341c <__assert_fail@plt+0x110fc>
   233dc:	b	2344c <__assert_fail@plt+0x1112c>
   233e0:	cmp	r6, #0
   233e4:	beq	2321c <__assert_fail@plt+0x10efc>
   233e8:	ldrb	r5, [r5]
   233ec:	cmp	r5, #0
   233f0:	beq	2321c <__assert_fail@plt+0x10efc>
   233f4:	mov	r0, r6
   233f8:	mov	r1, r5
   233fc:	bl	120ec <strchr@plt>
   23400:	cmp	r0, #0
   23404:	beq	2321c <__assert_fail@plt+0x10efc>
   23408:	mov	r0, #1
   2340c:	mov	r1, #0
   23410:	mov	r7, r4
   23414:	strd	r0, [sp]
   23418:	b	232c0 <__assert_fail@plt+0x10fa0>
   2341c:	ldrd	r2, [sp]
   23420:	orr	r0, r7, #2
   23424:	strd	r2, [r9]
   23428:	b	23220 <__assert_fail@plt+0x10f00>
   2342c:	mov	r3, #0
   23430:	add	r2, fp, r6
   23434:	str	r2, [r8]
   23438:	ldrb	r2, [fp, r6]
   2343c:	orr	r7, r7, r3
   23440:	cmp	r2, #0
   23444:	orrne	r7, r7, #2
   23448:	b	2328c <__assert_fail@plt+0x10f6c>
   2344c:	ldrd	r2, [sp]
   23450:	cmp	r2, #0
   23454:	sbcs	r3, r3, #0
   23458:	blt	23894 <__assert_fail@plt+0x11574>
   2345c:	ldrd	r0, [sp]
   23460:	mov	r3, #0
   23464:	adds	r0, r0, r0
   23468:	adc	r1, r1, r1
   2346c:	strd	r0, [sp]
   23470:	b	23430 <__assert_fail@plt+0x11110>
   23474:	ldrd	r0, [sp]
   23478:	movw	r3, #65535	; 0xffff
   2347c:	movt	r3, #127	; 0x7f
   23480:	mvn	r2, #0
   23484:	cmp	r1, r3
   23488:	cmpeq	r0, r2
   2348c:	bhi	23894 <__assert_fail@plt+0x11574>
   23490:	lsl	r2, r1, #9
   23494:	ldr	r1, [sp]
   23498:	lsl	r3, r0, #9
   2349c:	str	r3, [sp]
   234a0:	mov	r3, #0
   234a4:	orr	r2, r2, r1, lsr #23
   234a8:	str	r2, [sp, #4]
   234ac:	b	23430 <__assert_fail@plt+0x11110>
   234b0:	asr	r5, r4, #31
   234b4:	mov	r2, r4
   234b8:	mvn	r0, #0
   234bc:	mvn	r1, #0
   234c0:	mov	r3, r5
   234c4:	bl	248bc <__assert_fail@plt+0x1259c>
   234c8:	mov	ip, r7
   234cc:	str	r6, [sp, #20]
   234d0:	mov	r2, #7
   234d4:	ldrd	r6, [sp]
   234d8:	mov	r3, #0
   234dc:	strd	r0, [sp, #8]
   234e0:	ldrd	r0, [sp, #8]
   234e4:	cmp	r1, r7
   234e8:	cmpeq	r0, r6
   234ec:	mulcs	r0, r6, r5
   234f0:	movcs	r1, #0
   234f4:	mlacs	r0, r4, r7, r0
   234f8:	movcc	r1, #1
   234fc:	umullcs	r6, r7, r6, r4
   23500:	mvncc	r6, #0
   23504:	mvncc	r7, #0
   23508:	orr	r3, r3, r1
   2350c:	addcs	r7, r0, r7
   23510:	subs	r2, r2, #1
   23514:	bne	234e0 <__assert_fail@plt+0x111c0>
   23518:	strd	r6, [sp]
   2351c:	mov	r7, ip
   23520:	ldr	r6, [sp, #20]
   23524:	b	23430 <__assert_fail@plt+0x11110>
   23528:	asr	r5, r4, #31
   2352c:	mov	r2, r4
   23530:	mvn	r0, #0
   23534:	mvn	r1, #0
   23538:	mov	r3, r5
   2353c:	bl	248bc <__assert_fail@plt+0x1259c>
   23540:	mov	ip, r7
   23544:	str	r6, [sp, #20]
   23548:	mov	r2, #8
   2354c:	ldrd	r6, [sp]
   23550:	mov	r3, #0
   23554:	strd	r0, [sp, #8]
   23558:	ldrd	r0, [sp, #8]
   2355c:	cmp	r1, r7
   23560:	cmpeq	r0, r6
   23564:	mulcs	r0, r6, r5
   23568:	movcs	r1, #0
   2356c:	mlacs	r0, r4, r7, r0
   23570:	movcc	r1, #1
   23574:	umullcs	r6, r7, r6, r4
   23578:	mvncc	r6, #0
   2357c:	mvncc	r7, #0
   23580:	orr	r3, r3, r1
   23584:	addcs	r7, r0, r7
   23588:	subs	r2, r2, #1
   2358c:	bne	23558 <__assert_fail@plt+0x11238>
   23590:	b	23518 <__assert_fail@plt+0x111f8>
   23594:	mov	r2, r4
   23598:	asr	r3, r4, #31
   2359c:	mvn	r0, #0
   235a0:	mvn	r1, #0
   235a4:	strd	r2, [sp, #8]
   235a8:	bl	248bc <__assert_fail@plt+0x1259c>
   235ac:	ldrd	r2, [sp]
   235b0:	cmp	r3, r1
   235b4:	cmpeq	r2, r0
   235b8:	bhi	23880 <__assert_fail@plt+0x11560>
   235bc:	ldr	r3, [sp]
   235c0:	ldr	ip, [sp, #12]
   235c4:	ldr	r0, [sp, #4]
   235c8:	ldr	r1, [sp]
   235cc:	mul	r2, r3, ip
   235d0:	mov	r3, #0
   235d4:	mla	r2, r4, r0, r2
   235d8:	umull	r0, r1, r1, r4
   235dc:	add	r2, r2, r1
   235e0:	strd	r0, [sp]
   235e4:	str	r2, [sp, #4]
   235e8:	b	23430 <__assert_fail@plt+0x11110>
   235ec:	asr	r5, r4, #31
   235f0:	mov	r2, r4
   235f4:	mvn	r0, #0
   235f8:	mvn	r1, #0
   235fc:	mov	r3, r5
   23600:	bl	248bc <__assert_fail@plt+0x1259c>
   23604:	mov	ip, r7
   23608:	str	r6, [sp, #20]
   2360c:	mov	r2, #3
   23610:	ldrd	r6, [sp]
   23614:	mov	r3, #0
   23618:	strd	r0, [sp, #8]
   2361c:	ldrd	r0, [sp, #8]
   23620:	cmp	r1, r7
   23624:	cmpeq	r0, r6
   23628:	mulcs	r0, r6, r5
   2362c:	movcs	r1, #0
   23630:	mlacs	r0, r4, r7, r0
   23634:	movcc	r1, #1
   23638:	umullcs	r6, r7, r6, r4
   2363c:	mvncc	r6, #0
   23640:	mvncc	r7, #0
   23644:	orr	r3, r3, r1
   23648:	addcs	r7, r0, r7
   2364c:	subs	r2, r2, #1
   23650:	bne	2361c <__assert_fail@plt+0x112fc>
   23654:	b	23518 <__assert_fail@plt+0x111f8>
   23658:	asr	r5, r4, #31
   2365c:	mov	r2, r4
   23660:	mvn	r0, #0
   23664:	mvn	r1, #0
   23668:	mov	r3, r5
   2366c:	bl	248bc <__assert_fail@plt+0x1259c>
   23670:	mov	ip, r7
   23674:	str	r6, [sp, #20]
   23678:	mov	r2, #6
   2367c:	ldrd	r6, [sp]
   23680:	mov	r3, #0
   23684:	strd	r0, [sp, #8]
   23688:	ldrd	r0, [sp, #8]
   2368c:	cmp	r1, r7
   23690:	cmpeq	r0, r6
   23694:	mulcs	r0, r6, r5
   23698:	movcs	r1, #0
   2369c:	mlacs	r0, r4, r7, r0
   236a0:	movcc	r1, #1
   236a4:	umullcs	r6, r7, r6, r4
   236a8:	mvncc	r6, #0
   236ac:	mvncc	r7, #0
   236b0:	orr	r3, r3, r1
   236b4:	addcs	r7, r0, r7
   236b8:	subs	r2, r2, #1
   236bc:	bne	23688 <__assert_fail@plt+0x11368>
   236c0:	b	23518 <__assert_fail@plt+0x111f8>
   236c4:	ldrd	r0, [sp]
   236c8:	movw	r3, #65535	; 0xffff
   236cc:	movt	r3, #63	; 0x3f
   236d0:	mvn	r2, #0
   236d4:	cmp	r1, r3
   236d8:	cmpeq	r0, r2
   236dc:	bhi	23880 <__assert_fail@plt+0x11560>
   236e0:	lsl	r2, r1, #10
   236e4:	ldr	r1, [sp]
   236e8:	lsl	r3, r0, #10
   236ec:	str	r3, [sp]
   236f0:	mov	r3, #0
   236f4:	orr	r2, r2, r1, lsr #22
   236f8:	str	r2, [sp, #4]
   236fc:	b	23430 <__assert_fail@plt+0x11110>
   23700:	asr	r5, r4, #31
   23704:	mov	r2, r4
   23708:	mvn	r0, #0
   2370c:	mvn	r1, #0
   23710:	mov	r3, r5
   23714:	bl	248bc <__assert_fail@plt+0x1259c>
   23718:	mov	ip, r7
   2371c:	str	r6, [sp, #20]
   23720:	mov	r2, #5
   23724:	ldrd	r6, [sp]
   23728:	mov	r3, #0
   2372c:	strd	r0, [sp, #8]
   23730:	ldrd	r0, [sp, #8]
   23734:	cmp	r1, r7
   23738:	cmpeq	r0, r6
   2373c:	mulcs	r0, r6, r5
   23740:	movcs	r1, #0
   23744:	mlacs	r0, r4, r7, r0
   23748:	movcc	r1, #1
   2374c:	umullcs	r6, r7, r6, r4
   23750:	mvncc	r6, #0
   23754:	mvncc	r7, #0
   23758:	orr	r3, r3, r1
   2375c:	addcs	r7, r0, r7
   23760:	subs	r2, r2, #1
   23764:	bne	23730 <__assert_fail@plt+0x11410>
   23768:	b	23518 <__assert_fail@plt+0x111f8>
   2376c:	mov	r2, r4
   23770:	asr	r3, r4, #31
   23774:	mvn	r0, #0
   23778:	mvn	r1, #0
   2377c:	strd	r2, [sp, #8]
   23780:	bl	248bc <__assert_fail@plt+0x1259c>
   23784:	ldrd	r2, [sp]
   23788:	cmp	r3, r1
   2378c:	cmpeq	r2, r0
   23790:	bhi	238a8 <__assert_fail@plt+0x11588>
   23794:	ldr	ip, [sp, #4]
   23798:	mul	r3, r4, ip
   2379c:	ldr	ip, [sp, #12]
   237a0:	mla	r3, r2, ip, r3
   237a4:	ldr	r2, [sp]
   237a8:	umull	r4, r5, r4, r2
   237ac:	add	r5, r3, r5
   237b0:	cmp	r1, r5
   237b4:	cmpeq	r0, r4
   237b8:	bcc	238a8 <__assert_fail@plt+0x11588>
   237bc:	mul	r2, r4, ip
   237c0:	ldr	ip, [sp, #8]
   237c4:	mov	r3, #0
   237c8:	umull	r0, r1, r4, ip
   237cc:	mla	r2, ip, r5, r2
   237d0:	strd	r0, [sp]
   237d4:	add	r2, r2, r1
   237d8:	str	r2, [sp, #4]
   237dc:	b	23430 <__assert_fail@plt+0x11110>
   237e0:	asr	r5, r4, #31
   237e4:	mov	r2, r4
   237e8:	mvn	r0, #0
   237ec:	mvn	r1, #0
   237f0:	mov	r3, r5
   237f4:	bl	248bc <__assert_fail@plt+0x1259c>
   237f8:	mov	ip, r7
   237fc:	str	r6, [sp, #20]
   23800:	mov	r2, #4
   23804:	ldrd	r6, [sp]
   23808:	mov	r3, #0
   2380c:	strd	r0, [sp, #8]
   23810:	ldrd	r0, [sp, #8]
   23814:	cmp	r1, r7
   23818:	cmpeq	r0, r6
   2381c:	mulcs	r0, r6, r5
   23820:	movcs	r1, #0
   23824:	mlacs	r0, r4, r7, r0
   23828:	movcc	r1, #1
   2382c:	umullcs	r6, r7, r6, r4
   23830:	mvncc	r6, #0
   23834:	mvncc	r7, #0
   23838:	orr	r3, r3, r1
   2383c:	addcs	r7, r0, r7
   23840:	subs	r2, r2, #1
   23844:	bne	23810 <__assert_fail@plt+0x114f0>
   23848:	b	23518 <__assert_fail@plt+0x111f8>
   2384c:	ldrd	r0, [sp]
   23850:	strd	r0, [r9]
   23854:	mov	r0, r7
   23858:	b	23220 <__assert_fail@plt+0x10f00>
   2385c:	ldrb	r3, [fp, #2]
   23860:	mov	r4, #1024	; 0x400
   23864:	cmp	r3, #66	; 0x42
   23868:	moveq	r6, #3
   2386c:	movne	r6, #1
   23870:	b	232f8 <__assert_fail@plt+0x10fd8>
   23874:	mov	r6, #2
   23878:	mov	r4, #1000	; 0x3e8
   2387c:	b	232f8 <__assert_fail@plt+0x10fd8>
   23880:	mvn	r3, #0
   23884:	mvn	r2, #0
   23888:	strd	r2, [sp]
   2388c:	mov	r3, #1
   23890:	b	23430 <__assert_fail@plt+0x11110>
   23894:	mvn	r0, #0
   23898:	mvn	r1, #0
   2389c:	mov	r3, #1
   238a0:	strd	r0, [sp]
   238a4:	b	23430 <__assert_fail@plt+0x11110>
   238a8:	mvn	r0, #0
   238ac:	mvn	r1, #0
   238b0:	mov	r3, #1
   238b4:	strd	r0, [sp]
   238b8:	b	23430 <__assert_fail@plt+0x11110>
   238bc:	bl	11ed0 <__stack_chk_fail@plt>
   238c0:	ldr	r0, [pc, #32]	; 238e8 <__assert_fail@plt+0x115c8>
   238c4:	mov	r2, #96	; 0x60
   238c8:	ldr	r1, [pc, #28]	; 238ec <__assert_fail@plt+0x115cc>
   238cc:	ldr	r3, [pc, #28]	; 238f0 <__assert_fail@plt+0x115d0>
   238d0:	add	r0, pc, r0
   238d4:	add	r1, pc, r1
   238d8:	add	r3, pc, r3
   238dc:	bl	12320 <__assert_fail@plt>
   238e0:	andeq	r4, r1, ip, asr #28
   238e4:	andeq	r0, r0, ip, lsl r2
   238e8:	andeq	r3, r0, r8, lsl sp
   238ec:	andeq	r3, r0, ip, lsr sp
   238f0:			; <UNDEFINED> instruction: 0x00003db0
   238f4:	push	{r4, r5, r6, lr}
   238f8:	sub	sp, sp, #8
   238fc:	mov	r4, r0
   23900:	bl	121a0 <fileno@plt>
   23904:	cmp	r0, #0
   23908:	mov	r0, r4
   2390c:	blt	23988 <__assert_fail@plt+0x11668>
   23910:	bl	12080 <__freading@plt>
   23914:	cmp	r0, #0
   23918:	bne	23954 <__assert_fail@plt+0x11634>
   2391c:	mov	r0, r4
   23920:	bl	23b08 <__assert_fail@plt+0x117e8>
   23924:	cmp	r0, #0
   23928:	beq	23984 <__assert_fail@plt+0x11664>
   2392c:	bl	1211c <__errno_location@plt>
   23930:	ldr	r6, [r0]
   23934:	mov	r5, r0
   23938:	mov	r0, r4
   2393c:	bl	121c4 <fclose@plt>
   23940:	cmp	r6, #0
   23944:	mvnne	r0, #0
   23948:	strne	r6, [r5]
   2394c:	add	sp, sp, #8
   23950:	pop	{r4, r5, r6, pc}
   23954:	mov	r0, r4
   23958:	bl	121a0 <fileno@plt>
   2395c:	mov	r1, #1
   23960:	mov	r2, #0
   23964:	mov	r3, #0
   23968:	str	r1, [sp]
   2396c:	bl	11fb4 <lseek64@plt>
   23970:	mvn	r2, #0
   23974:	mvn	r3, #0
   23978:	cmp	r1, r3
   2397c:	cmpeq	r0, r2
   23980:	bne	2391c <__assert_fail@plt+0x115fc>
   23984:	mov	r0, r4
   23988:	add	sp, sp, #8
   2398c:	pop	{r4, r5, r6, lr}
   23990:	b	121c4 <fclose@plt>
   23994:	push	{r1, r2, r3}
   23998:	movw	ip, #1030	; 0x406
   2399c:	ldr	r3, [pc, #336]	; 23af4 <__assert_fail@plt+0x117d4>
   239a0:	push	{r4, r5, r6, r7, r8, lr}
   239a4:	add	r3, pc, r3
   239a8:	ldr	lr, [pc, #328]	; 23af8 <__assert_fail@plt+0x117d8>
   239ac:	sub	sp, sp, #12
   239b0:	add	r2, sp, #40	; 0x28
   239b4:	mov	r6, r0
   239b8:	ldr	r1, [sp, #36]	; 0x24
   239bc:	ldr	r4, [r3, lr]
   239c0:	cmp	r1, ip
   239c4:	str	r2, [sp]
   239c8:	ldr	r3, [r4]
   239cc:	str	r3, [sp, #4]
   239d0:	bne	23a54 <__assert_fail@plt+0x11734>
   239d4:	ldr	r8, [pc, #288]	; 23afc <__assert_fail@plt+0x117dc>
   239d8:	add	r3, sp, #44	; 0x2c
   239dc:	str	r3, [sp]
   239e0:	add	r8, pc, r8
   239e4:	ldr	r7, [sp, #40]	; 0x28
   239e8:	ldr	r3, [r8]
   239ec:	mov	r2, r7
   239f0:	cmp	r3, #0
   239f4:	blt	23ae0 <__assert_fail@plt+0x117c0>
   239f8:	bl	12104 <fcntl@plt>
   239fc:	subs	r5, r0, #0
   23a00:	blt	23a64 <__assert_fail@plt+0x11744>
   23a04:	ldr	r3, [pc, #244]	; 23b00 <__assert_fail@plt+0x117e0>
   23a08:	mov	r2, #1
   23a0c:	add	r3, pc, r3
   23a10:	str	r2, [r3]
   23a14:	cmp	r5, #0
   23a18:	blt	23a30 <__assert_fail@plt+0x11710>
   23a1c:	ldr	r3, [pc, #224]	; 23b04 <__assert_fail@plt+0x117e4>
   23a20:	add	r3, pc, r3
   23a24:	ldr	r3, [r3]
   23a28:	cmn	r3, #1
   23a2c:	beq	23a94 <__assert_fail@plt+0x11774>
   23a30:	ldr	r2, [sp, #4]
   23a34:	mov	r0, r5
   23a38:	ldr	r3, [r4]
   23a3c:	cmp	r2, r3
   23a40:	bne	23af0 <__assert_fail@plt+0x117d0>
   23a44:	add	sp, sp, #12
   23a48:	pop	{r4, r5, r6, r7, r8, lr}
   23a4c:	add	sp, sp, #12
   23a50:	bx	lr
   23a54:	ldr	r2, [sp, #40]	; 0x28
   23a58:	bl	12104 <fcntl@plt>
   23a5c:	mov	r5, r0
   23a60:	b	23a30 <__assert_fail@plt+0x11710>
   23a64:	bl	1211c <__errno_location@plt>
   23a68:	ldr	r3, [r0]
   23a6c:	cmp	r3, #22
   23a70:	bne	23a04 <__assert_fail@plt+0x116e4>
   23a74:	mov	r0, r6
   23a78:	mov	r2, r7
   23a7c:	mov	r1, #0
   23a80:	bl	23994 <__assert_fail@plt+0x11674>
   23a84:	subs	r5, r0, #0
   23a88:	blt	23a30 <__assert_fail@plt+0x11710>
   23a8c:	mvn	r3, #0
   23a90:	str	r3, [r8]
   23a94:	mov	r0, r5
   23a98:	mov	r1, #1
   23a9c:	bl	12104 <fcntl@plt>
   23aa0:	subs	r2, r0, #0
   23aa4:	blt	23ac0 <__assert_fail@plt+0x117a0>
   23aa8:	orr	r2, r2, #1
   23aac:	mov	r0, r5
   23ab0:	mov	r1, #2
   23ab4:	bl	12104 <fcntl@plt>
   23ab8:	cmn	r0, #1
   23abc:	bne	23a30 <__assert_fail@plt+0x11710>
   23ac0:	bl	1211c <__errno_location@plt>
   23ac4:	ldr	r7, [r0]
   23ac8:	mov	r6, r0
   23acc:	mov	r0, r5
   23ad0:	mvn	r5, #0
   23ad4:	bl	12308 <close@plt>
   23ad8:	str	r7, [r6]
   23adc:	b	23a30 <__assert_fail@plt+0x11710>
   23ae0:	mov	r1, #0
   23ae4:	bl	23994 <__assert_fail@plt+0x11674>
   23ae8:	mov	r5, r0
   23aec:	b	23a14 <__assert_fail@plt+0x116f4>
   23af0:	bl	11ed0 <__stack_chk_fail@plt>
   23af4:	andeq	r4, r1, r4, asr r6
   23af8:	andeq	r0, r0, ip, lsl r2
   23afc:	andeq	r5, r1, ip, lsr #32
   23b00:	andeq	r5, r1, r0
   23b04:	andeq	r4, r1, ip, ror #31
   23b08:	push	{r4, lr}
   23b0c:	subs	r4, r0, #0
   23b10:	sub	sp, sp, #8
   23b14:	beq	23b24 <__assert_fail@plt+0x11804>
   23b18:	bl	12080 <__freading@plt>
   23b1c:	cmp	r0, #0
   23b20:	bne	23b34 <__assert_fail@plt+0x11814>
   23b24:	mov	r0, r4
   23b28:	add	sp, sp, #8
   23b2c:	pop	{r4, lr}
   23b30:	b	11da4 <fflush@plt>
   23b34:	ldr	r3, [r4]
   23b38:	tst	r3, #256	; 0x100
   23b3c:	beq	23b24 <__assert_fail@plt+0x11804>
   23b40:	mov	r3, #1
   23b44:	mov	r0, r4
   23b48:	str	r3, [sp]
   23b4c:	mov	r2, #0
   23b50:	mov	r3, #0
   23b54:	bl	23b68 <__assert_fail@plt+0x11848>
   23b58:	mov	r0, r4
   23b5c:	add	sp, sp, #8
   23b60:	pop	{r4, lr}
   23b64:	b	11da4 <fflush@plt>
   23b68:	push	{r4, r5, r6, r7, lr}
   23b6c:	sub	sp, sp, #20
   23b70:	ldmib	r0, {r1, ip}
   23b74:	mov	r6, r0
   23b78:	ldr	r4, [sp, #40]	; 0x28
   23b7c:	cmp	ip, r1
   23b80:	beq	23b98 <__assert_fail@plt+0x11878>
   23b84:	str	r4, [sp, #40]	; 0x28
   23b88:	mov	r0, r6
   23b8c:	add	sp, sp, #20
   23b90:	pop	{r4, r5, r6, r7, lr}
   23b94:	b	121e8 <fseeko64@plt>
   23b98:	ldr	ip, [r0, #20]
   23b9c:	ldr	r1, [r0, #16]
   23ba0:	cmp	ip, r1
   23ba4:	bne	23b84 <__assert_fail@plt+0x11864>
   23ba8:	ldr	r7, [r0, #36]	; 0x24
   23bac:	cmp	r7, #0
   23bb0:	bne	23b84 <__assert_fail@plt+0x11864>
   23bb4:	str	r2, [sp, #12]
   23bb8:	mvn	r5, #0
   23bbc:	str	r3, [sp, #8]
   23bc0:	bl	121a0 <fileno@plt>
   23bc4:	str	r4, [sp]
   23bc8:	mvn	r4, #0
   23bcc:	ldr	r2, [sp, #12]
   23bd0:	ldr	r3, [sp, #8]
   23bd4:	bl	11fb4 <lseek64@plt>
   23bd8:	mov	r2, r0
   23bdc:	mov	r3, r1
   23be0:	cmp	r3, r5
   23be4:	cmpeq	r2, r4
   23be8:	beq	23c08 <__assert_fail@plt+0x118e8>
   23bec:	ldr	r1, [r6]
   23bf0:	mov	r0, r7
   23bf4:	strd	r2, [r6, #80]	; 0x50
   23bf8:	bic	r3, r1, #16
   23bfc:	str	r3, [r6]
   23c00:	add	sp, sp, #20
   23c04:	pop	{r4, r5, r6, r7, pc}
   23c08:	mvn	r0, #0
   23c0c:	b	23c00 <__assert_fail@plt+0x118e0>
   23c10:	push	{r4, r5, r6, lr}
   23c14:	mov	r4, r0
   23c18:	bl	12008 <__fpending@plt>
   23c1c:	mov	r6, r0
   23c20:	mov	r0, r4
   23c24:	ldr	r4, [r4]
   23c28:	bl	238f4 <__assert_fail@plt+0x115d4>
   23c2c:	and	r4, r4, #32
   23c30:	adds	r5, r0, #0
   23c34:	movne	r5, #1
   23c38:	cmp	r4, #0
   23c3c:	bne	23c5c <__assert_fail@plt+0x1193c>
   23c40:	cmp	r5, #0
   23c44:	beq	23c54 <__assert_fail@plt+0x11934>
   23c48:	cmp	r6, #0
   23c4c:	beq	23c78 <__assert_fail@plt+0x11958>
   23c50:	mvn	r4, #0
   23c54:	mov	r0, r4
   23c58:	pop	{r4, r5, r6, pc}
   23c5c:	cmp	r5, #0
   23c60:	bne	23c50 <__assert_fail@plt+0x11930>
   23c64:	bl	1211c <__errno_location@plt>
   23c68:	mvn	r4, #0
   23c6c:	str	r5, [r0]
   23c70:	mov	r0, r4
   23c74:	pop	{r4, r5, r6, pc}
   23c78:	bl	1211c <__errno_location@plt>
   23c7c:	ldr	r4, [r0]
   23c80:	subs	r4, r4, #9
   23c84:	mvnne	r4, #0
   23c88:	mov	r0, r4
   23c8c:	pop	{r4, r5, r6, pc}
   23c90:	vldr	d7, [pc, #200]	; 23d60 <__assert_fail@plt+0x11a40>
   23c94:	vcmpe.f64	d0, d7
   23c98:	push	{r4}		; (str r4, [sp, #-4]!)
   23c9c:	vmrs	APSR_nzcv, fpscr
   23ca0:	ble	23d4c <__assert_fail@plt+0x11a2c>
   23ca4:	vldr	d7, [pc, #188]	; 23d68 <__assert_fail@plt+0x11a48>
   23ca8:	vcmpe.f64	d0, d7
   23cac:	vmrs	APSR_nzcv, fpscr
   23cb0:	bpl	23d34 <__assert_fail@plt+0x11a14>
   23cb4:	vcvt.s32.f64	s11, d0
   23cb8:	vldr	d7, [pc, #176]	; 23d70 <__assert_fail@plt+0x11a50>
   23cbc:	movw	r3, #12193	; 0x2fa1
   23cc0:	movt	r3, #17592	; 0x44b8
   23cc4:	mov	r1, #51712	; 0xca00
   23cc8:	movt	r1, #15258	; 0x3b9a
   23ccc:	vcvt.f64.s32	d6, s11
   23cd0:	vsub.f64	d0, d0, d6
   23cd4:	vmul.f64	d0, d0, d7
   23cd8:	vcvt.s32.f64	s13, d0
   23cdc:	vmov	r4, s13
   23ce0:	vcvt.f64.s32	d7, s13
   23ce4:	vcmpe.f64	d7, d0
   23ce8:	vmrs	APSR_nzcv, fpscr
   23cec:	movpl	r2, #0
   23cf0:	movmi	r2, #1
   23cf4:	add	r2, r2, r4
   23cf8:	vmov	r4, s11
   23cfc:	smull	ip, r3, r3, r2
   23d00:	asr	ip, r2, #31
   23d04:	rsb	r3, ip, r3, asr #28
   23d08:	add	ip, r3, r4
   23d0c:	mls	r3, r1, r3, r2
   23d10:	cmp	r3, #0
   23d14:	addlt	r3, r3, #998244352	; 0x3b800000
   23d18:	sublt	ip, ip, #1
   23d1c:	addlt	r3, r3, #1753088	; 0x1ac000
   23d20:	str	ip, [r0]
   23d24:	addlt	r3, r3, #2560	; 0xa00
   23d28:	str	r3, [r0, #4]
   23d2c:	pop	{r4}		; (ldr r4, [sp], #4)
   23d30:	bx	lr
   23d34:	movw	r3, #51711	; 0xc9ff
   23d38:	mvn	r2, #-2147483648	; 0x80000000
   23d3c:	movt	r3, #15258	; 0x3b9a
   23d40:	stm	r0, {r2, r3}
   23d44:	pop	{r4}		; (ldr r4, [sp], #4)
   23d48:	bx	lr
   23d4c:	mov	r2, #-2147483648	; 0x80000000
   23d50:	mov	r3, #0
   23d54:	stm	r0, {r2, r3}
   23d58:	pop	{r4}		; (ldr r4, [sp], #4)
   23d5c:	bx	lr
   23d60:	andeq	r0, r0, r0
   23d64:	mvngt	r0, r0
   23d68:	andeq	r0, r0, r0
   23d6c:	mvnmi	r0, r0
   23d70:	andeq	r0, r0, r0
   23d74:	bicmi	ip, sp, r5, ror #26
   23d78:	ldr	r3, [pc, #984]	; 24158 <__assert_fail@plt+0x11e38>
   23d7c:	mov	r0, #14
   23d80:	ldr	r2, [pc, #980]	; 2415c <__assert_fail@plt+0x11e3c>
   23d84:	add	r3, pc, r3
   23d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d8c:	sub	sp, sp, #132	; 0x84
   23d90:	ldr	r6, [r3, r2]
   23d94:	ldr	r3, [r6]
   23d98:	str	r3, [sp, #124]	; 0x7c
   23d9c:	bl	12248 <nl_langinfo@plt>
   23da0:	subs	r5, r0, #0
   23da4:	beq	23e58 <__assert_fail@plt+0x11b38>
   23da8:	ldr	r3, [pc, #944]	; 24160 <__assert_fail@plt+0x11e40>
   23dac:	ldr	r4, [pc, r3]
   23db0:	cmp	r4, #0
   23db4:	beq	23e64 <__assert_fail@plt+0x11b44>
   23db8:	ldrb	r7, [r4]
   23dbc:	cmp	r7, #0
   23dc0:	bne	23df4 <__assert_fail@plt+0x11ad4>
   23dc4:	b	23e2c <__assert_fail@plt+0x11b0c>
   23dc8:	mov	r0, r4
   23dcc:	bl	120e0 <strlen@plt>
   23dd0:	add	r0, r0, #1
   23dd4:	add	r7, r4, r0
   23dd8:	mov	r0, r7
   23ddc:	bl	120e0 <strlen@plt>
   23de0:	add	r0, r0, #1
   23de4:	add	r4, r7, r0
   23de8:	ldrb	r7, [r7, r0]
   23dec:	cmp	r7, #0
   23df0:	beq	23e2c <__assert_fail@plt+0x11b0c>
   23df4:	mov	r0, r5
   23df8:	mov	r1, r4
   23dfc:	bl	11d68 <strcmp@plt>
   23e00:	cmp	r0, #0
   23e04:	beq	23e1c <__assert_fail@plt+0x11afc>
   23e08:	cmp	r7, #42	; 0x2a
   23e0c:	bne	23dc8 <__assert_fail@plt+0x11aa8>
   23e10:	ldrb	r3, [r4, #1]
   23e14:	cmp	r3, #0
   23e18:	bne	23dc8 <__assert_fail@plt+0x11aa8>
   23e1c:	mov	r0, r4
   23e20:	bl	120e0 <strlen@plt>
   23e24:	add	r0, r0, #1
   23e28:	add	r5, r4, r0
   23e2c:	ldrb	r3, [r5]
   23e30:	cmp	r3, #0
   23e34:	ldreq	r5, [pc, #808]	; 24164 <__assert_fail@plt+0x11e44>
   23e38:	addeq	r5, pc, r5
   23e3c:	ldr	r2, [sp, #124]	; 0x7c
   23e40:	mov	r0, r5
   23e44:	ldr	r3, [r6]
   23e48:	cmp	r2, r3
   23e4c:	bne	2412c <__assert_fail@plt+0x11e0c>
   23e50:	add	sp, sp, #132	; 0x84
   23e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e58:	ldr	r5, [pc, #776]	; 24168 <__assert_fail@plt+0x11e48>
   23e5c:	add	r5, pc, r5
   23e60:	b	23da8 <__assert_fail@plt+0x11a88>
   23e64:	ldr	r0, [pc, #768]	; 2416c <__assert_fail@plt+0x11e4c>
   23e68:	add	r0, pc, r0
   23e6c:	bl	12044 <getenv@plt>
   23e70:	subs	r8, r0, #0
   23e74:	beq	24104 <__assert_fail@plt+0x11de4>
   23e78:	ldrb	r3, [r8]
   23e7c:	cmp	r3, #0
   23e80:	beq	24098 <__assert_fail@plt+0x11d78>
   23e84:	bl	120e0 <strlen@plt>
   23e88:	subs	sl, r0, #0
   23e8c:	subne	r3, sl, #1
   23e90:	bne	240a8 <__assert_fail@plt+0x11d88>
   23e94:	mov	r9, #0
   23e98:	mov	fp, r9
   23e9c:	add	r9, sl, r9
   23ea0:	add	r0, r9, #14
   23ea4:	bl	1205c <malloc@plt>
   23ea8:	subs	r7, r0, #0
   23eac:	beq	240f8 <__assert_fail@plt+0x11dd8>
   23eb0:	mov	r1, r8
   23eb4:	mov	r2, sl
   23eb8:	bl	11e28 <memcpy@plt>
   23ebc:	cmp	fp, #0
   23ec0:	add	ip, r7, r9
   23ec4:	movne	r3, #47	; 0x2f
   23ec8:	strbne	r3, [r7, sl]
   23ecc:	ldr	r3, [pc, #668]	; 24170 <__assert_fail@plt+0x11e50>
   23ed0:	add	r3, pc, r3
   23ed4:	ldm	r3!, {r0, r1, r2}
   23ed8:	ldrh	r3, [r3]
   23edc:	str	r0, [r7, r9]
   23ee0:	mov	r0, r7
   23ee4:	str	r1, [ip, #4]
   23ee8:	mov	r1, #32768	; 0x8000
   23eec:	strh	r3, [ip, #12]
   23ef0:	str	r2, [ip, #8]
   23ef4:	bl	1202c <open64@plt>
   23ef8:	subs	r8, r0, #0
   23efc:	blt	240c0 <__assert_fail@plt+0x11da0>
   23f00:	ldr	r1, [pc, #620]	; 24174 <__assert_fail@plt+0x11e54>
   23f04:	add	r1, pc, r1
   23f08:	bl	11d20 <fdopen@plt>
   23f0c:	subs	fp, r0, #0
   23f10:	beq	24118 <__assert_fail@plt+0x11df8>
   23f14:	ldr	r0, [pc, #604]	; 24178 <__assert_fail@plt+0x11e58>
   23f18:	add	sl, sp, #20
   23f1c:	add	r9, sp, #72	; 0x48
   23f20:	mov	r8, #0
   23f24:	add	r0, pc, r0
   23f28:	str	r0, [sp, #12]
   23f2c:	ldr	r3, [fp, #4]
   23f30:	ldr	r2, [fp, #8]
   23f34:	cmp	r3, r2
   23f38:	bcs	24024 <__assert_fail@plt+0x11d04>
   23f3c:	add	r2, r3, #1
   23f40:	str	r2, [fp, #4]
   23f44:	ldrb	r0, [r3]
   23f48:	cmp	r0, #32
   23f4c:	beq	23f2c <__assert_fail@plt+0x11c0c>
   23f50:	sub	r3, r0, #9
   23f54:	cmp	r3, #1
   23f58:	bls	23f2c <__assert_fail@plt+0x11c0c>
   23f5c:	cmp	r0, #35	; 0x23
   23f60:	beq	24038 <__assert_fail@plt+0x11d18>
   23f64:	mov	r1, fp
   23f68:	bl	120f8 <ungetc@plt>
   23f6c:	mov	r0, fp
   23f70:	ldr	r1, [sp, #12]
   23f74:	mov	r2, sl
   23f78:	mov	r3, r9
   23f7c:	bl	12170 <fscanf@plt>
   23f80:	cmp	r0, #1
   23f84:	ble	24068 <__assert_fail@plt+0x11d48>
   23f88:	mov	r0, sl
   23f8c:	bl	120e0 <strlen@plt>
   23f90:	str	r0, [sp, #8]
   23f94:	mov	r0, r9
   23f98:	bl	120e0 <strlen@plt>
   23f9c:	cmp	r8, #0
   23fa0:	mov	r2, r0
   23fa4:	bne	240cc <__assert_fail@plt+0x11dac>
   23fa8:	ldr	r3, [sp, #8]
   23fac:	str	r2, [sp]
   23fb0:	add	r8, r0, r3
   23fb4:	add	r0, r8, #3
   23fb8:	add	r8, r8, #2
   23fbc:	bl	1205c <malloc@plt>
   23fc0:	ldr	r2, [sp]
   23fc4:	mov	r3, r0
   23fc8:	cmp	r3, #0
   23fcc:	beq	24130 <__assert_fail@plt+0x11e10>
   23fd0:	ldr	r0, [sp, #8]
   23fd4:	movw	r1, #65534	; 0xfffe
   23fd8:	movt	r1, #65535	; 0xffff
   23fdc:	rsb	r2, r2, r8
   23fe0:	rsb	r1, r0, r1
   23fe4:	stm	sp, {r2, r3}
   23fe8:	add	r0, r1, r2
   23fec:	mov	r1, sl
   23ff0:	add	r0, r3, r0
   23ff4:	mov	r4, r3
   23ff8:	bl	11fe4 <strcpy@plt>
   23ffc:	ldr	r2, [sp]
   24000:	ldr	r3, [sp, #4]
   24004:	mov	r1, r9
   24008:	sub	r0, r2, #1
   2400c:	add	r0, r3, r0
   24010:	bl	11fe4 <strcpy@plt>
   24014:	ldr	r3, [fp, #4]
   24018:	ldr	r2, [fp, #8]
   2401c:	cmp	r3, r2
   24020:	bcc	23f3c <__assert_fail@plt+0x11c1c>
   24024:	mov	r0, fp
   24028:	bl	121f4 <__uflow@plt>
   2402c:	cmn	r0, #1
   24030:	beq	24068 <__assert_fail@plt+0x11d48>
   24034:	b	23f48 <__assert_fail@plt+0x11c28>
   24038:	ldr	r3, [fp, #4]
   2403c:	ldr	r2, [fp, #8]
   24040:	cmp	r3, r2
   24044:	bcs	2414c <__assert_fail@plt+0x11e2c>
   24048:	add	r2, r3, #1
   2404c:	str	r2, [fp, #4]
   24050:	ldrb	r0, [r3]
   24054:	cmp	r0, #10
   24058:	cmnne	r0, #1
   2405c:	bne	24038 <__assert_fail@plt+0x11d18>
   24060:	cmn	r0, #1
   24064:	bne	23f2c <__assert_fail@plt+0x11c0c>
   24068:	mov	r0, fp
   2406c:	bl	238f4 <__assert_fail@plt+0x115d4>
   24070:	cmp	r8, #0
   24074:	beq	240c0 <__assert_fail@plt+0x11da0>
   24078:	mov	r3, #0
   2407c:	strb	r3, [r4, r8]
   24080:	mov	r0, r7
   24084:	bl	11dec <free@plt>
   24088:	ldr	r3, [pc, #236]	; 2417c <__assert_fail@plt+0x11e5c>
   2408c:	add	r3, pc, r3
   24090:	str	r4, [r3]
   24094:	b	23db8 <__assert_fail@plt+0x11a98>
   24098:	ldr	r8, [pc, #224]	; 24180 <__assert_fail@plt+0x11e60>
   2409c:	mov	r3, #7
   240a0:	mov	sl, #8
   240a4:	add	r8, pc, r8
   240a8:	ldrb	r3, [r8, r3]
   240ac:	cmp	r3, #47	; 0x2f
   240b0:	movne	r9, #1
   240b4:	movne	fp, r9
   240b8:	bne	23e9c <__assert_fail@plt+0x11b7c>
   240bc:	b	23e94 <__assert_fail@plt+0x11b74>
   240c0:	ldr	r4, [pc, #188]	; 24184 <__assert_fail@plt+0x11e64>
   240c4:	add	r4, pc, r4
   240c8:	b	24080 <__assert_fail@plt+0x11d60>
   240cc:	ldr	r0, [sp, #8]
   240d0:	str	r2, [sp]
   240d4:	add	r3, r0, r2
   240d8:	mov	r0, r4
   240dc:	add	r8, r3, r8
   240e0:	add	r1, r8, #3
   240e4:	add	r8, r8, #2
   240e8:	bl	11f30 <realloc@plt>
   240ec:	ldr	r2, [sp]
   240f0:	mov	r3, r0
   240f4:	b	23fc8 <__assert_fail@plt+0x11ca8>
   240f8:	ldr	r4, [pc, #136]	; 24188 <__assert_fail@plt+0x11e68>
   240fc:	add	r4, pc, r4
   24100:	b	24088 <__assert_fail@plt+0x11d68>
   24104:	ldr	r8, [pc, #128]	; 2418c <__assert_fail@plt+0x11e6c>
   24108:	mov	r3, #7
   2410c:	mov	sl, #8
   24110:	add	r8, pc, r8
   24114:	b	240a8 <__assert_fail@plt+0x11d88>
   24118:	ldr	r4, [pc, #112]	; 24190 <__assert_fail@plt+0x11e70>
   2411c:	mov	r0, r8
   24120:	add	r4, pc, r4
   24124:	bl	12308 <close@plt>
   24128:	b	24080 <__assert_fail@plt+0x11d60>
   2412c:	bl	11ed0 <__stack_chk_fail@plt>
   24130:	mov	r0, r4
   24134:	ldr	r4, [pc, #88]	; 24194 <__assert_fail@plt+0x11e74>
   24138:	bl	11dec <free@plt>
   2413c:	mov	r0, fp
   24140:	add	r4, pc, r4
   24144:	bl	238f4 <__assert_fail@plt+0x115d4>
   24148:	b	24080 <__assert_fail@plt+0x11d60>
   2414c:	mov	r0, fp
   24150:	bl	121f4 <__uflow@plt>
   24154:	b	24054 <__assert_fail@plt+0x11d34>
   24158:	andeq	r4, r1, r4, ror r2
   2415c:	andeq	r0, r0, ip, lsl r2
   24160:	andeq	r4, r1, r4, ror #24
   24164:	andeq	r3, r0, r8, ror #16
   24168:	andeq	r1, r0, r4, asr #30
   2416c:	andeq	r3, r0, r0, asr #16
   24170:	andeq	r3, r0, r8, ror #15
   24174:	andeq	r1, r0, r4, ror r9
   24178:	andeq	r3, r0, r4, lsr #15
   2417c:	andeq	r4, r1, r4, lsl #19
   24180:	strdeq	r3, [r0], -r0
   24184:	ldrdeq	r1, [r0], -ip
   24188:	andeq	r1, r0, r4, lsr #25
   2418c:	andeq	r3, r0, r4, lsl #11
   24190:	andeq	r1, r0, r0, lsl #25
   24194:	andeq	r1, r0, r0, ror #24
   24198:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2419c:	mov	r4, r0
   241a0:	mov	r8, r1
   241a4:	mov	r5, r2
   241a8:	mov	r6, r3
   241ac:	bl	1211c <__errno_location@plt>
   241b0:	mov	sl, #0
   241b4:	mov	r9, r0
   241b8:	str	sl, [r9]
   241bc:	mov	r0, r4
   241c0:	mov	r1, r5
   241c4:	bl	12038 <strcoll@plt>
   241c8:	subs	r3, r0, #0
   241cc:	mov	r0, r4
   241d0:	beq	241dc <__assert_fail@plt+0x11ebc>
   241d4:	mov	r0, r3
   241d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   241dc:	bl	120e0 <strlen@plt>
   241e0:	add	r7, r0, #1
   241e4:	mov	r0, r5
   241e8:	bl	120e0 <strlen@plt>
   241ec:	subs	r8, r8, r7
   241f0:	add	r4, r4, r7
   241f4:	add	r0, r0, #1
   241f8:	add	r5, r5, r0
   241fc:	rsb	r6, r0, r6
   24200:	beq	24214 <__assert_fail@plt+0x11ef4>
   24204:	cmp	r6, #0
   24208:	bne	241b8 <__assert_fail@plt+0x11e98>
   2420c:	mov	r0, #1
   24210:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24214:	subs	r0, r6, #0
   24218:	mvnne	r0, #0
   2421c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24220:	cmp	r1, r3
   24224:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   24228:	mov	r4, r1
   2422c:	mov	r5, r3
   24230:	mov	r6, r2
   24234:	mov	r7, r0
   24238:	beq	24278 <__assert_fail@plt+0x11f58>
   2423c:	ldrb	r9, [r7, r4]
   24240:	mov	r3, #0
   24244:	ldrb	r8, [r6, r5]
   24248:	mov	r0, r7
   2424c:	strb	r3, [r7, r4]
   24250:	add	r1, r4, #1
   24254:	strb	r3, [r6, r5]
   24258:	mov	r2, r6
   2425c:	add	r3, r5, #1
   24260:	bl	24198 <__assert_fail@plt+0x11e78>
   24264:	strb	r9, [r7, r4]
   24268:	strb	r8, [r6, r5]
   2426c:	mov	r3, r0
   24270:	mov	r0, r3
   24274:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   24278:	mov	r1, r2
   2427c:	mov	r2, r4
   24280:	bl	11eac <memcmp@plt>
   24284:	subs	r8, r0, #0
   24288:	bne	2423c <__assert_fail@plt+0x11f1c>
   2428c:	bl	1211c <__errno_location@plt>
   24290:	mov	r3, r8
   24294:	str	r8, [r0]
   24298:	mov	r0, r3
   2429c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   242a0:	cmp	r1, r3
   242a4:	push	{r4, r5, r6, r7, r8, lr}
   242a8:	mov	r4, r1
   242ac:	mov	r5, r3
   242b0:	mov	r6, r2
   242b4:	mov	r7, r0
   242b8:	beq	242d4 <__assert_fail@plt+0x11fb4>
   242bc:	mov	r0, r7
   242c0:	mov	r1, r4
   242c4:	mov	r2, r6
   242c8:	mov	r3, r5
   242cc:	pop	{r4, r5, r6, r7, r8, lr}
   242d0:	b	24198 <__assert_fail@plt+0x11e78>
   242d4:	mov	r1, r2
   242d8:	mov	r2, r4
   242dc:	bl	11eac <memcmp@plt>
   242e0:	subs	r8, r0, #0
   242e4:	bne	242bc <__assert_fail@plt+0x11f9c>
   242e8:	bl	1211c <__errno_location@plt>
   242ec:	str	r8, [r0]
   242f0:	mov	r0, r8
   242f4:	pop	{r4, r5, r6, r7, r8, pc}
   242f8:	subs	r2, r1, #1
   242fc:	bxeq	lr
   24300:	bcc	244d8 <__assert_fail@plt+0x121b8>
   24304:	cmp	r0, r1
   24308:	bls	244bc <__assert_fail@plt+0x1219c>
   2430c:	tst	r1, r2
   24310:	beq	244c8 <__assert_fail@plt+0x121a8>
   24314:	clz	r3, r0
   24318:	clz	r2, r1
   2431c:	sub	r3, r2, r3
   24320:	rsbs	r3, r3, #31
   24324:	addne	r3, r3, r3, lsl #1
   24328:	mov	r2, #0
   2432c:	addne	pc, pc, r3, lsl #2
   24330:	nop	{0}
   24334:	cmp	r0, r1, lsl #31
   24338:	adc	r2, r2, r2
   2433c:	subcs	r0, r0, r1, lsl #31
   24340:	cmp	r0, r1, lsl #30
   24344:	adc	r2, r2, r2
   24348:	subcs	r0, r0, r1, lsl #30
   2434c:	cmp	r0, r1, lsl #29
   24350:	adc	r2, r2, r2
   24354:	subcs	r0, r0, r1, lsl #29
   24358:	cmp	r0, r1, lsl #28
   2435c:	adc	r2, r2, r2
   24360:	subcs	r0, r0, r1, lsl #28
   24364:	cmp	r0, r1, lsl #27
   24368:	adc	r2, r2, r2
   2436c:	subcs	r0, r0, r1, lsl #27
   24370:	cmp	r0, r1, lsl #26
   24374:	adc	r2, r2, r2
   24378:	subcs	r0, r0, r1, lsl #26
   2437c:	cmp	r0, r1, lsl #25
   24380:	adc	r2, r2, r2
   24384:	subcs	r0, r0, r1, lsl #25
   24388:	cmp	r0, r1, lsl #24
   2438c:	adc	r2, r2, r2
   24390:	subcs	r0, r0, r1, lsl #24
   24394:	cmp	r0, r1, lsl #23
   24398:	adc	r2, r2, r2
   2439c:	subcs	r0, r0, r1, lsl #23
   243a0:	cmp	r0, r1, lsl #22
   243a4:	adc	r2, r2, r2
   243a8:	subcs	r0, r0, r1, lsl #22
   243ac:	cmp	r0, r1, lsl #21
   243b0:	adc	r2, r2, r2
   243b4:	subcs	r0, r0, r1, lsl #21
   243b8:	cmp	r0, r1, lsl #20
   243bc:	adc	r2, r2, r2
   243c0:	subcs	r0, r0, r1, lsl #20
   243c4:	cmp	r0, r1, lsl #19
   243c8:	adc	r2, r2, r2
   243cc:	subcs	r0, r0, r1, lsl #19
   243d0:	cmp	r0, r1, lsl #18
   243d4:	adc	r2, r2, r2
   243d8:	subcs	r0, r0, r1, lsl #18
   243dc:	cmp	r0, r1, lsl #17
   243e0:	adc	r2, r2, r2
   243e4:	subcs	r0, r0, r1, lsl #17
   243e8:	cmp	r0, r1, lsl #16
   243ec:	adc	r2, r2, r2
   243f0:	subcs	r0, r0, r1, lsl #16
   243f4:	cmp	r0, r1, lsl #15
   243f8:	adc	r2, r2, r2
   243fc:	subcs	r0, r0, r1, lsl #15
   24400:	cmp	r0, r1, lsl #14
   24404:	adc	r2, r2, r2
   24408:	subcs	r0, r0, r1, lsl #14
   2440c:	cmp	r0, r1, lsl #13
   24410:	adc	r2, r2, r2
   24414:	subcs	r0, r0, r1, lsl #13
   24418:	cmp	r0, r1, lsl #12
   2441c:	adc	r2, r2, r2
   24420:	subcs	r0, r0, r1, lsl #12
   24424:	cmp	r0, r1, lsl #11
   24428:	adc	r2, r2, r2
   2442c:	subcs	r0, r0, r1, lsl #11
   24430:	cmp	r0, r1, lsl #10
   24434:	adc	r2, r2, r2
   24438:	subcs	r0, r0, r1, lsl #10
   2443c:	cmp	r0, r1, lsl #9
   24440:	adc	r2, r2, r2
   24444:	subcs	r0, r0, r1, lsl #9
   24448:	cmp	r0, r1, lsl #8
   2444c:	adc	r2, r2, r2
   24450:	subcs	r0, r0, r1, lsl #8
   24454:	cmp	r0, r1, lsl #7
   24458:	adc	r2, r2, r2
   2445c:	subcs	r0, r0, r1, lsl #7
   24460:	cmp	r0, r1, lsl #6
   24464:	adc	r2, r2, r2
   24468:	subcs	r0, r0, r1, lsl #6
   2446c:	cmp	r0, r1, lsl #5
   24470:	adc	r2, r2, r2
   24474:	subcs	r0, r0, r1, lsl #5
   24478:	cmp	r0, r1, lsl #4
   2447c:	adc	r2, r2, r2
   24480:	subcs	r0, r0, r1, lsl #4
   24484:	cmp	r0, r1, lsl #3
   24488:	adc	r2, r2, r2
   2448c:	subcs	r0, r0, r1, lsl #3
   24490:	cmp	r0, r1, lsl #2
   24494:	adc	r2, r2, r2
   24498:	subcs	r0, r0, r1, lsl #2
   2449c:	cmp	r0, r1, lsl #1
   244a0:	adc	r2, r2, r2
   244a4:	subcs	r0, r0, r1, lsl #1
   244a8:	cmp	r0, r1
   244ac:	adc	r2, r2, r2
   244b0:	subcs	r0, r0, r1
   244b4:	mov	r0, r2
   244b8:	bx	lr
   244bc:	moveq	r0, #1
   244c0:	movne	r0, #0
   244c4:	bx	lr
   244c8:	clz	r2, r1
   244cc:	rsb	r2, r2, #31
   244d0:	lsr	r0, r0, r2
   244d4:	bx	lr
   244d8:	cmp	r0, #0
   244dc:	mvnne	r0, #0
   244e0:	b	248f8 <__assert_fail@plt+0x125d8>
   244e4:	cmp	r1, #0
   244e8:	beq	244d8 <__assert_fail@plt+0x121b8>
   244ec:	push	{r0, r1, lr}
   244f0:	bl	242f8 <__assert_fail@plt+0x11fd8>
   244f4:	pop	{r1, r2, lr}
   244f8:	mul	r3, r2, r0
   244fc:	sub	r1, r1, r3
   24500:	bx	lr
   24504:	eor	r1, r1, #-2147483648	; 0x80000000
   24508:	b	24510 <__assert_fail@plt+0x121f0>
   2450c:	eor	r3, r3, #-2147483648	; 0x80000000
   24510:	push	{r4, r5, lr}
   24514:	lsl	r4, r1, #1
   24518:	lsl	r5, r3, #1
   2451c:	teq	r4, r5
   24520:	teqeq	r0, r2
   24524:	orrsne	ip, r4, r0
   24528:	orrsne	ip, r5, r2
   2452c:	mvnsne	ip, r4, asr #21
   24530:	mvnsne	ip, r5, asr #21
   24534:	beq	24720 <__assert_fail@plt+0x12400>
   24538:	lsr	r4, r4, #21
   2453c:	rsbs	r5, r4, r5, lsr #21
   24540:	rsblt	r5, r5, #0
   24544:	ble	24564 <__assert_fail@plt+0x12244>
   24548:	add	r4, r4, r5
   2454c:	eor	r2, r0, r2
   24550:	eor	r3, r1, r3
   24554:	eor	r0, r2, r0
   24558:	eor	r1, r3, r1
   2455c:	eor	r2, r0, r2
   24560:	eor	r3, r1, r3
   24564:	cmp	r5, #54	; 0x36
   24568:	pophi	{r4, r5, pc}
   2456c:	tst	r1, #-2147483648	; 0x80000000
   24570:	lsl	r1, r1, #12
   24574:	mov	ip, #1048576	; 0x100000
   24578:	orr	r1, ip, r1, lsr #12
   2457c:	beq	24588 <__assert_fail@plt+0x12268>
   24580:	rsbs	r0, r0, #0
   24584:	rsc	r1, r1, #0
   24588:	tst	r3, #-2147483648	; 0x80000000
   2458c:	lsl	r3, r3, #12
   24590:	orr	r3, ip, r3, lsr #12
   24594:	beq	245a0 <__assert_fail@plt+0x12280>
   24598:	rsbs	r2, r2, #0
   2459c:	rsc	r3, r3, #0
   245a0:	teq	r4, r5
   245a4:	beq	24708 <__assert_fail@plt+0x123e8>
   245a8:	sub	r4, r4, #1
   245ac:	rsbs	lr, r5, #32
   245b0:	blt	245cc <__assert_fail@plt+0x122ac>
   245b4:	lsl	ip, r2, lr
   245b8:	adds	r0, r0, r2, lsr r5
   245bc:	adc	r1, r1, #0
   245c0:	adds	r0, r0, r3, lsl lr
   245c4:	adcs	r1, r1, r3, asr r5
   245c8:	b	245e8 <__assert_fail@plt+0x122c8>
   245cc:	sub	r5, r5, #32
   245d0:	add	lr, lr, #32
   245d4:	cmp	r2, #1
   245d8:	lsl	ip, r3, lr
   245dc:	orrcs	ip, ip, #2
   245e0:	adds	r0, r0, r3, asr r5
   245e4:	adcs	r1, r1, r3, asr #31
   245e8:	and	r5, r1, #-2147483648	; 0x80000000
   245ec:	bpl	245fc <__assert_fail@plt+0x122dc>
   245f0:	rsbs	ip, ip, #0
   245f4:	rscs	r0, r0, #0
   245f8:	rsc	r1, r1, #0
   245fc:	cmp	r1, #1048576	; 0x100000
   24600:	bcc	24640 <__assert_fail@plt+0x12320>
   24604:	cmp	r1, #2097152	; 0x200000
   24608:	bcc	24628 <__assert_fail@plt+0x12308>
   2460c:	lsrs	r1, r1, #1
   24610:	rrxs	r0, r0
   24614:	rrx	ip, ip
   24618:	add	r4, r4, #1
   2461c:	lsl	r2, r4, #21
   24620:	cmn	r2, #4194304	; 0x400000
   24624:	bcs	24780 <__assert_fail@plt+0x12460>
   24628:	cmp	ip, #-2147483648	; 0x80000000
   2462c:	lsrseq	ip, r0, #1
   24630:	adcs	r0, r0, #0
   24634:	adc	r1, r1, r4, lsl #20
   24638:	orr	r1, r1, r5
   2463c:	pop	{r4, r5, pc}
   24640:	lsls	ip, ip, #1
   24644:	adcs	r0, r0, r0
   24648:	adc	r1, r1, r1
   2464c:	tst	r1, #1048576	; 0x100000
   24650:	sub	r4, r4, #1
   24654:	bne	24628 <__assert_fail@plt+0x12308>
   24658:	teq	r1, #0
   2465c:	moveq	r1, r0
   24660:	moveq	r0, #0
   24664:	clz	r3, r1
   24668:	addeq	r3, r3, #32
   2466c:	sub	r3, r3, #11
   24670:	subs	r2, r3, #32
   24674:	bge	24698 <__assert_fail@plt+0x12378>
   24678:	adds	r2, r2, #12
   2467c:	ble	24694 <__assert_fail@plt+0x12374>
   24680:	add	ip, r2, #20
   24684:	rsb	r2, r2, #12
   24688:	lsl	r0, r1, ip
   2468c:	lsr	r1, r1, r2
   24690:	b	246a8 <__assert_fail@plt+0x12388>
   24694:	add	r2, r2, #20
   24698:	rsble	ip, r2, #32
   2469c:	lsl	r1, r1, r2
   246a0:	orrle	r1, r1, r0, lsr ip
   246a4:	lslle	r0, r0, r2
   246a8:	subs	r4, r4, r3
   246ac:	addge	r1, r1, r4, lsl #20
   246b0:	orrge	r1, r1, r5
   246b4:	popge	{r4, r5, pc}
   246b8:	mvn	r4, r4
   246bc:	subs	r4, r4, #31
   246c0:	bge	246fc <__assert_fail@plt+0x123dc>
   246c4:	adds	r4, r4, #12
   246c8:	bgt	246e4 <__assert_fail@plt+0x123c4>
   246cc:	add	r4, r4, #20
   246d0:	rsb	r2, r4, #32
   246d4:	lsr	r0, r0, r4
   246d8:	orr	r0, r0, r1, lsl r2
   246dc:	orr	r1, r5, r1, lsr r4
   246e0:	pop	{r4, r5, pc}
   246e4:	rsb	r4, r4, #12
   246e8:	rsb	r2, r4, #32
   246ec:	lsr	r0, r0, r2
   246f0:	orr	r0, r0, r1, lsl r4
   246f4:	mov	r1, r5
   246f8:	pop	{r4, r5, pc}
   246fc:	lsr	r0, r1, r4
   24700:	mov	r1, r5
   24704:	pop	{r4, r5, pc}
   24708:	teq	r4, #0
   2470c:	eor	r3, r3, #1048576	; 0x100000
   24710:	eoreq	r1, r1, #1048576	; 0x100000
   24714:	addeq	r4, r4, #1
   24718:	subne	r5, r5, #1
   2471c:	b	245a8 <__assert_fail@plt+0x12288>
   24720:	mvns	ip, r4, asr #21
   24724:	mvnsne	ip, r5, asr #21
   24728:	beq	24790 <__assert_fail@plt+0x12470>
   2472c:	teq	r4, r5
   24730:	teqeq	r0, r2
   24734:	beq	24748 <__assert_fail@plt+0x12428>
   24738:	orrs	ip, r4, r0
   2473c:	moveq	r1, r3
   24740:	moveq	r0, r2
   24744:	pop	{r4, r5, pc}
   24748:	teq	r1, r3
   2474c:	movne	r1, #0
   24750:	movne	r0, #0
   24754:	popne	{r4, r5, pc}
   24758:	lsrs	ip, r4, #21
   2475c:	bne	24770 <__assert_fail@plt+0x12450>
   24760:	lsls	r0, r0, #1
   24764:	adcs	r1, r1, r1
   24768:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2476c:	pop	{r4, r5, pc}
   24770:	adds	r4, r4, #4194304	; 0x400000
   24774:	addcc	r1, r1, #1048576	; 0x100000
   24778:	popcc	{r4, r5, pc}
   2477c:	and	r5, r1, #-2147483648	; 0x80000000
   24780:	orr	r1, r5, #2130706432	; 0x7f000000
   24784:	orr	r1, r1, #15728640	; 0xf00000
   24788:	mov	r0, #0
   2478c:	pop	{r4, r5, pc}
   24790:	mvns	ip, r4, asr #21
   24794:	movne	r1, r3
   24798:	movne	r0, r2
   2479c:	mvnseq	ip, r5, asr #21
   247a0:	movne	r3, r1
   247a4:	movne	r2, r0
   247a8:	orrs	r4, r0, r1, lsl #12
   247ac:	orrseq	r5, r2, r3, lsl #12
   247b0:	teqeq	r1, r3
   247b4:	orrne	r1, r1, #524288	; 0x80000
   247b8:	pop	{r4, r5, pc}
   247bc:	teq	r0, #0
   247c0:	moveq	r1, #0
   247c4:	bxeq	lr
   247c8:	push	{r4, r5, lr}
   247cc:	mov	r4, #1024	; 0x400
   247d0:	add	r4, r4, #50	; 0x32
   247d4:	mov	r5, #0
   247d8:	mov	r1, #0
   247dc:	b	24658 <__assert_fail@plt+0x12338>
   247e0:	teq	r0, #0
   247e4:	moveq	r1, #0
   247e8:	bxeq	lr
   247ec:	push	{r4, r5, lr}
   247f0:	mov	r4, #1024	; 0x400
   247f4:	add	r4, r4, #50	; 0x32
   247f8:	ands	r5, r0, #-2147483648	; 0x80000000
   247fc:	rsbmi	r0, r0, #0
   24800:	mov	r1, #0
   24804:	b	24658 <__assert_fail@plt+0x12338>
   24808:	lsls	r2, r0, #1
   2480c:	asr	r1, r2, #3
   24810:	rrx	r1, r1
   24814:	lsl	r0, r2, #28
   24818:	andsne	r3, r2, #-16777216	; 0xff000000
   2481c:	teqne	r3, #-16777216	; 0xff000000
   24820:	eorne	r1, r1, #939524096	; 0x38000000
   24824:	bxne	lr
   24828:	teq	r2, #0
   2482c:	teqne	r3, #-16777216	; 0xff000000
   24830:	bxeq	lr
   24834:	push	{r4, r5, lr}
   24838:	mov	r4, #896	; 0x380
   2483c:	and	r5, r1, #-2147483648	; 0x80000000
   24840:	bic	r1, r1, #-2147483648	; 0x80000000
   24844:	b	24658 <__assert_fail@plt+0x12338>
   24848:	orrs	r2, r0, r1
   2484c:	bxeq	lr
   24850:	push	{r4, r5, lr}
   24854:	mov	r5, #0
   24858:	b	24878 <__assert_fail@plt+0x12558>
   2485c:	orrs	r2, r0, r1
   24860:	bxeq	lr
   24864:	push	{r4, r5, lr}
   24868:	ands	r5, r1, #-2147483648	; 0x80000000
   2486c:	bpl	24878 <__assert_fail@plt+0x12558>
   24870:	rsbs	r0, r0, #0
   24874:	rsc	r1, r1, #0
   24878:	mov	r4, #1024	; 0x400
   2487c:	add	r4, r4, #50	; 0x32
   24880:	lsrs	ip, r1, #22
   24884:	beq	245fc <__assert_fail@plt+0x122dc>
   24888:	mov	r2, #3
   2488c:	lsrs	ip, ip, #3
   24890:	addne	r2, r2, #3
   24894:	lsrs	ip, ip, #3
   24898:	addne	r2, r2, #3
   2489c:	add	r2, r2, ip, lsr #3
   248a0:	rsb	r3, r2, #32
   248a4:	lsl	ip, r0, r3
   248a8:	lsr	r0, r0, r2
   248ac:	orr	r0, r0, r1, lsl r3
   248b0:	lsr	r1, r1, r2
   248b4:	add	r4, r4, r2
   248b8:	b	245fc <__assert_fail@plt+0x122dc>
   248bc:	cmp	r3, #0
   248c0:	cmpeq	r2, #0
   248c4:	bne	248dc <__assert_fail@plt+0x125bc>
   248c8:	cmp	r1, #0
   248cc:	cmpeq	r0, #0
   248d0:	mvnne	r1, #0
   248d4:	mvnne	r0, #0
   248d8:	b	248f8 <__assert_fail@plt+0x125d8>
   248dc:	sub	sp, sp, #8
   248e0:	push	{sp, lr}
   248e4:	bl	2498c <__assert_fail@plt+0x1266c>
   248e8:	ldr	lr, [sp, #4]
   248ec:	add	sp, sp, #8
   248f0:	pop	{r2, r3}
   248f4:	bx	lr
   248f8:	push	{r1, lr}
   248fc:	mov	r0, #8
   24900:	bl	11d44 <raise@plt>
   24904:	pop	{r1, pc}
   24908:	vmov	d7, r0, r1
   2490c:	vldr	d5, [pc, #44]	; 24940 <__assert_fail@plt+0x12620>
   24910:	vldr	d6, [pc, #48]	; 24948 <__assert_fail@plt+0x12628>
   24914:	mov	r0, #0
   24918:	vmul.f64	d5, d7, d5
   2491c:	vcvt.u32.f64	s9, d5
   24920:	vcvt.f64.u32	d5, s9
   24924:	vmov	r1, s9
   24928:	vmls.f64	d7, d5, d6
   2492c:	vcvt.u32.f64	s14, d7
   24930:	vmov	r3, s14
   24934:	orr	r0, r0, r3
   24938:	bx	lr
   2493c:	nop	{0}
   24940:	andeq	r0, r0, r0
   24944:	ldclcc	0, cr0, [r0]
   24948:	andeq	r0, r0, r0
   2494c:	mvnsmi	r0, r0
   24950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24954:	mov	r8, r2
   24958:	mov	r6, r0
   2495c:	mov	r7, r1
   24960:	mov	sl, r3
   24964:	ldr	r9, [sp, #32]
   24968:	bl	249c8 <__assert_fail@plt+0x126a8>
   2496c:	umull	r4, r5, r8, r0
   24970:	mul	r8, r8, r1
   24974:	mla	r2, r0, sl, r8
   24978:	add	r5, r2, r5
   2497c:	subs	r4, r6, r4
   24980:	sbc	r5, r7, r5
   24984:	strd	r4, [r9]
   24988:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2498c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   24990:	mov	r8, r2
   24994:	mov	r6, r0
   24998:	mov	r7, r1
   2499c:	mov	r5, r3
   249a0:	ldr	r9, [sp, #32]
   249a4:	bl	24e54 <__assert_fail@plt+0x12b34>
   249a8:	mul	r3, r0, r5
   249ac:	umull	r4, r5, r0, r8
   249b0:	mla	r8, r8, r1, r3
   249b4:	add	r5, r8, r5
   249b8:	subs	r4, r6, r4
   249bc:	sbc	r5, r7, r5
   249c0:	strd	r4, [r9]
   249c4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   249c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249cc:	rsbs	r4, r0, #0
   249d0:	rsc	r5, r1, #0
   249d4:	cmp	r1, #0
   249d8:	mvn	r6, #0
   249dc:	sub	sp, sp, #12
   249e0:	movge	r4, r0
   249e4:	movge	r5, r1
   249e8:	movge	r6, #0
   249ec:	cmp	r3, #0
   249f0:	blt	24c28 <__assert_fail@plt+0x12908>
   249f4:	cmp	r3, #0
   249f8:	mov	sl, r4
   249fc:	mov	ip, r5
   24a00:	mov	r0, r2
   24a04:	mov	r1, r3
   24a08:	mov	r8, r2
   24a0c:	mov	r7, r4
   24a10:	mov	r9, r5
   24a14:	bne	24b0c <__assert_fail@plt+0x127ec>
   24a18:	cmp	r2, r5
   24a1c:	bls	24b48 <__assert_fail@plt+0x12828>
   24a20:	clz	r3, r2
   24a24:	cmp	r3, #0
   24a28:	rsbne	r2, r3, #32
   24a2c:	lslne	r8, r0, r3
   24a30:	lsrne	r2, r4, r2
   24a34:	lslne	r7, r4, r3
   24a38:	orrne	r9, r2, r5, lsl r3
   24a3c:	lsr	r4, r8, #16
   24a40:	uxth	sl, r8
   24a44:	mov	r1, r4
   24a48:	mov	r0, r9
   24a4c:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24a50:	mov	r1, r4
   24a54:	mov	fp, r0
   24a58:	mov	r0, r9
   24a5c:	bl	244e4 <__assert_fail@plt+0x121c4>
   24a60:	mul	r0, sl, fp
   24a64:	lsr	r2, r7, #16
   24a68:	orr	r1, r2, r1, lsl #16
   24a6c:	cmp	r0, r1
   24a70:	bls	24a94 <__assert_fail@plt+0x12774>
   24a74:	adds	r1, r1, r8
   24a78:	sub	r3, fp, #1
   24a7c:	bcs	24a90 <__assert_fail@plt+0x12770>
   24a80:	cmp	r0, r1
   24a84:	subhi	fp, fp, #2
   24a88:	addhi	r1, r1, r8
   24a8c:	bhi	24a94 <__assert_fail@plt+0x12774>
   24a90:	mov	fp, r3
   24a94:	rsb	r9, r0, r1
   24a98:	mov	r1, r4
   24a9c:	uxth	r7, r7
   24aa0:	mov	r0, r9
   24aa4:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24aa8:	mov	r1, r4
   24aac:	mov	r5, r0
   24ab0:	mov	r0, r9
   24ab4:	bl	244e4 <__assert_fail@plt+0x121c4>
   24ab8:	mul	sl, sl, r5
   24abc:	orr	r1, r7, r1, lsl #16
   24ac0:	cmp	sl, r1
   24ac4:	bls	24ae4 <__assert_fail@plt+0x127c4>
   24ac8:	adds	r8, r1, r8
   24acc:	sub	r3, r5, #1
   24ad0:	bcs	24ae0 <__assert_fail@plt+0x127c0>
   24ad4:	cmp	sl, r8
   24ad8:	subhi	r5, r5, #2
   24adc:	bhi	24ae4 <__assert_fail@plt+0x127c4>
   24ae0:	mov	r5, r3
   24ae4:	orr	r3, r5, fp, lsl #16
   24ae8:	mov	r4, #0
   24aec:	cmp	r6, #0
   24af0:	mov	r0, r3
   24af4:	mov	r1, r4
   24af8:	beq	24b04 <__assert_fail@plt+0x127e4>
   24afc:	rsbs	r0, r0, #0
   24b00:	rsc	r1, r1, #0
   24b04:	add	sp, sp, #12
   24b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b0c:	cmp	r3, r5
   24b10:	movhi	r4, #0
   24b14:	movhi	r3, r4
   24b18:	bhi	24aec <__assert_fail@plt+0x127cc>
   24b1c:	clz	r5, r1
   24b20:	cmp	r5, #0
   24b24:	bne	24d14 <__assert_fail@plt+0x129f4>
   24b28:	cmp	r1, ip
   24b2c:	cmpcs	r2, sl
   24b30:	movhi	r4, #0
   24b34:	movls	r4, #1
   24b38:	movls	r3, #1
   24b3c:	movls	r4, r5
   24b40:	movhi	r3, r4
   24b44:	b	24aec <__assert_fail@plt+0x127cc>
   24b48:	cmp	r2, #0
   24b4c:	bne	24b60 <__assert_fail@plt+0x12840>
   24b50:	mov	r1, r2
   24b54:	mov	r0, #1
   24b58:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24b5c:	mov	r8, r0
   24b60:	clz	r3, r8
   24b64:	cmp	r3, #0
   24b68:	bne	24c38 <__assert_fail@plt+0x12918>
   24b6c:	rsb	r9, r8, r9
   24b70:	lsr	r5, r8, #16
   24b74:	uxth	sl, r8
   24b78:	mov	r4, #1
   24b7c:	mov	r1, r5
   24b80:	mov	r0, r9
   24b84:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24b88:	mov	r1, r5
   24b8c:	mov	fp, r0
   24b90:	mov	r0, r9
   24b94:	bl	244e4 <__assert_fail@plt+0x121c4>
   24b98:	mul	r0, sl, fp
   24b9c:	lsr	r2, r7, #16
   24ba0:	orr	r1, r2, r1, lsl #16
   24ba4:	cmp	r0, r1
   24ba8:	bls	24bc8 <__assert_fail@plt+0x128a8>
   24bac:	adds	r1, r1, r8
   24bb0:	sub	r3, fp, #1
   24bb4:	bcs	24e34 <__assert_fail@plt+0x12b14>
   24bb8:	cmp	r0, r1
   24bbc:	subhi	fp, fp, #2
   24bc0:	addhi	r1, r1, r8
   24bc4:	bls	24e34 <__assert_fail@plt+0x12b14>
   24bc8:	rsb	r2, r0, r1
   24bcc:	mov	r1, r5
   24bd0:	str	r2, [sp]
   24bd4:	uxth	r7, r7
   24bd8:	mov	r0, r2
   24bdc:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24be0:	ldr	r2, [sp]
   24be4:	mov	r1, r5
   24be8:	mov	r9, r0
   24bec:	mov	r0, r2
   24bf0:	bl	244e4 <__assert_fail@plt+0x121c4>
   24bf4:	mul	sl, sl, r9
   24bf8:	orr	r1, r7, r1, lsl #16
   24bfc:	cmp	sl, r1
   24c00:	bls	24c20 <__assert_fail@plt+0x12900>
   24c04:	adds	r8, r1, r8
   24c08:	sub	r3, r9, #1
   24c0c:	bcs	24c1c <__assert_fail@plt+0x128fc>
   24c10:	cmp	sl, r8
   24c14:	subhi	r9, r9, #2
   24c18:	bhi	24c20 <__assert_fail@plt+0x12900>
   24c1c:	mov	r9, r3
   24c20:	orr	r3, r9, fp, lsl #16
   24c24:	b	24aec <__assert_fail@plt+0x127cc>
   24c28:	mvn	r6, r6
   24c2c:	rsbs	r2, r2, #0
   24c30:	rsc	r3, r3, #0
   24c34:	b	249f4 <__assert_fail@plt+0x126d4>
   24c38:	lsl	r8, r8, r3
   24c3c:	rsb	fp, r3, #32
   24c40:	lsr	r4, r9, fp
   24c44:	lsr	fp, r7, fp
   24c48:	lsr	r5, r8, #16
   24c4c:	orr	fp, fp, r9, lsl r3
   24c50:	mov	r0, r4
   24c54:	lsl	r7, r7, r3
   24c58:	mov	r1, r5
   24c5c:	uxth	sl, r8
   24c60:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24c64:	mov	r1, r5
   24c68:	mov	r3, r0
   24c6c:	mov	r0, r4
   24c70:	str	r3, [sp]
   24c74:	bl	244e4 <__assert_fail@plt+0x121c4>
   24c78:	ldr	r3, [sp]
   24c7c:	lsr	r2, fp, #16
   24c80:	mul	r0, sl, r3
   24c84:	orr	r1, r2, r1, lsl #16
   24c88:	cmp	r0, r1
   24c8c:	bls	24cac <__assert_fail@plt+0x1298c>
   24c90:	adds	r1, r1, r8
   24c94:	sub	r2, r3, #1
   24c98:	bcs	24e4c <__assert_fail@plt+0x12b2c>
   24c9c:	cmp	r0, r1
   24ca0:	subhi	r3, r3, #2
   24ca4:	addhi	r1, r1, r8
   24ca8:	bls	24e4c <__assert_fail@plt+0x12b2c>
   24cac:	rsb	r9, r0, r1
   24cb0:	mov	r1, r5
   24cb4:	str	r3, [sp]
   24cb8:	uxth	fp, fp
   24cbc:	mov	r0, r9
   24cc0:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24cc4:	mov	r1, r5
   24cc8:	mov	r4, r0
   24ccc:	mov	r0, r9
   24cd0:	bl	244e4 <__assert_fail@plt+0x121c4>
   24cd4:	mul	r9, sl, r4
   24cd8:	ldr	r3, [sp]
   24cdc:	orr	r1, fp, r1, lsl #16
   24ce0:	cmp	r9, r1
   24ce4:	bls	24d08 <__assert_fail@plt+0x129e8>
   24ce8:	adds	r1, r1, r8
   24cec:	sub	r2, r4, #1
   24cf0:	bcs	24d04 <__assert_fail@plt+0x129e4>
   24cf4:	cmp	r9, r1
   24cf8:	subhi	r4, r4, #2
   24cfc:	addhi	r1, r1, r8
   24d00:	bhi	24d08 <__assert_fail@plt+0x129e8>
   24d04:	mov	r4, r2
   24d08:	rsb	r9, r9, r1
   24d0c:	orr	r4, r4, r3, lsl #16
   24d10:	b	24b7c <__assert_fail@plt+0x1285c>
   24d14:	rsb	sl, r5, #32
   24d18:	lsl	r3, r2, r5
   24d1c:	lsr	r0, r2, sl
   24d20:	lsr	r2, ip, sl
   24d24:	orr	r4, r0, r1, lsl r5
   24d28:	lsr	sl, r7, sl
   24d2c:	mov	r0, r2
   24d30:	orr	sl, sl, ip, lsl r5
   24d34:	lsr	r9, r4, #16
   24d38:	str	r3, [sp, #4]
   24d3c:	str	r2, [sp]
   24d40:	uxth	fp, r4
   24d44:	mov	r1, r9
   24d48:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24d4c:	ldr	r2, [sp]
   24d50:	mov	r1, r9
   24d54:	mov	r8, r0
   24d58:	mov	r0, r2
   24d5c:	bl	244e4 <__assert_fail@plt+0x121c4>
   24d60:	mul	r0, fp, r8
   24d64:	lsr	r2, sl, #16
   24d68:	orr	r1, r2, r1, lsl #16
   24d6c:	cmp	r0, r1
   24d70:	bls	24d90 <__assert_fail@plt+0x12a70>
   24d74:	adds	r1, r1, r4
   24d78:	sub	r2, r8, #1
   24d7c:	bcs	24e44 <__assert_fail@plt+0x12b24>
   24d80:	cmp	r0, r1
   24d84:	subhi	r8, r8, #2
   24d88:	addhi	r1, r1, r4
   24d8c:	bls	24e44 <__assert_fail@plt+0x12b24>
   24d90:	rsb	ip, r0, r1
   24d94:	mov	r1, r9
   24d98:	str	ip, [sp]
   24d9c:	mov	r0, ip
   24da0:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24da4:	ldr	ip, [sp]
   24da8:	mov	r1, r9
   24dac:	mov	r2, r0
   24db0:	mov	r0, ip
   24db4:	str	r2, [sp]
   24db8:	bl	244e4 <__assert_fail@plt+0x121c4>
   24dbc:	ldr	r2, [sp]
   24dc0:	uxth	ip, sl
   24dc4:	mul	fp, fp, r2
   24dc8:	orr	ip, ip, r1, lsl #16
   24dcc:	cmp	fp, ip
   24dd0:	bls	24df0 <__assert_fail@plt+0x12ad0>
   24dd4:	adds	ip, ip, r4
   24dd8:	sub	r1, r2, #1
   24ddc:	bcs	24e3c <__assert_fail@plt+0x12b1c>
   24de0:	cmp	fp, ip
   24de4:	subhi	r2, r2, #2
   24de8:	addhi	ip, ip, r4
   24dec:	bls	24e3c <__assert_fail@plt+0x12b1c>
   24df0:	ldr	r0, [sp, #4]
   24df4:	orr	r1, r2, r8, lsl #16
   24df8:	rsb	fp, fp, ip
   24dfc:	umull	r2, r3, r1, r0
   24e00:	cmp	fp, r3
   24e04:	bcc	24e28 <__assert_fail@plt+0x12b08>
   24e08:	movne	r4, #0
   24e0c:	moveq	r4, #1
   24e10:	cmp	r2, r7, lsl r5
   24e14:	movls	r4, #0
   24e18:	andhi	r4, r4, #1
   24e1c:	cmp	r4, #0
   24e20:	moveq	r3, r1
   24e24:	beq	24aec <__assert_fail@plt+0x127cc>
   24e28:	sub	r3, r1, #1
   24e2c:	mov	r4, #0
   24e30:	b	24aec <__assert_fail@plt+0x127cc>
   24e34:	mov	fp, r3
   24e38:	b	24bc8 <__assert_fail@plt+0x128a8>
   24e3c:	mov	r2, r1
   24e40:	b	24df0 <__assert_fail@plt+0x12ad0>
   24e44:	mov	r8, r2
   24e48:	b	24d90 <__assert_fail@plt+0x12a70>
   24e4c:	mov	r3, r2
   24e50:	b	24cac <__assert_fail@plt+0x1298c>
   24e54:	cmp	r3, #0
   24e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e5c:	mov	r6, r0
   24e60:	sub	sp, sp, #12
   24e64:	mov	r5, r1
   24e68:	mov	r7, r0
   24e6c:	mov	r4, r2
   24e70:	mov	r8, r1
   24e74:	bne	24f54 <__assert_fail@plt+0x12c34>
   24e78:	cmp	r2, r1
   24e7c:	bls	24f90 <__assert_fail@plt+0x12c70>
   24e80:	clz	r3, r2
   24e84:	cmp	r3, #0
   24e88:	rsbne	r8, r3, #32
   24e8c:	lslne	r4, r2, r3
   24e90:	lsrne	r8, r0, r8
   24e94:	lslne	r7, r0, r3
   24e98:	orrne	r8, r8, r1, lsl r3
   24e9c:	lsr	r5, r4, #16
   24ea0:	uxth	sl, r4
   24ea4:	mov	r1, r5
   24ea8:	mov	r0, r8
   24eac:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24eb0:	mov	r1, r5
   24eb4:	mov	r9, r0
   24eb8:	mov	r0, r8
   24ebc:	bl	244e4 <__assert_fail@plt+0x121c4>
   24ec0:	mul	r0, sl, r9
   24ec4:	lsr	r3, r7, #16
   24ec8:	orr	r1, r3, r1, lsl #16
   24ecc:	cmp	r0, r1
   24ed0:	bls	24ef4 <__assert_fail@plt+0x12bd4>
   24ed4:	adds	r1, r1, r4
   24ed8:	sub	r2, r9, #1
   24edc:	bcs	24ef0 <__assert_fail@plt+0x12bd0>
   24ee0:	cmp	r0, r1
   24ee4:	subhi	r9, r9, #2
   24ee8:	addhi	r1, r1, r4
   24eec:	bhi	24ef4 <__assert_fail@plt+0x12bd4>
   24ef0:	mov	r9, r2
   24ef4:	rsb	r8, r0, r1
   24ef8:	mov	r1, r5
   24efc:	uxth	r7, r7
   24f00:	mov	r0, r8
   24f04:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24f08:	mov	r1, r5
   24f0c:	mov	r6, r0
   24f10:	mov	r0, r8
   24f14:	bl	244e4 <__assert_fail@plt+0x121c4>
   24f18:	mul	sl, sl, r6
   24f1c:	orr	r1, r7, r1, lsl #16
   24f20:	cmp	sl, r1
   24f24:	bls	24f40 <__assert_fail@plt+0x12c20>
   24f28:	adds	r4, r1, r4
   24f2c:	sub	r3, r6, #1
   24f30:	bcs	2523c <__assert_fail@plt+0x12f1c>
   24f34:	cmp	sl, r4
   24f38:	subhi	r6, r6, #2
   24f3c:	bls	2523c <__assert_fail@plt+0x12f1c>
   24f40:	orr	r0, r6, r9, lsl #16
   24f44:	mov	r6, #0
   24f48:	mov	r1, r6
   24f4c:	add	sp, sp, #12
   24f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f54:	cmp	r3, r1
   24f58:	movhi	r6, #0
   24f5c:	movhi	r0, r6
   24f60:	bhi	24f48 <__assert_fail@plt+0x12c28>
   24f64:	clz	r7, r3
   24f68:	cmp	r7, #0
   24f6c:	bne	2506c <__assert_fail@plt+0x12d4c>
   24f70:	cmp	r3, r1
   24f74:	cmpcs	r2, r6
   24f78:	movhi	r6, #0
   24f7c:	movls	r6, #1
   24f80:	movls	r0, #1
   24f84:	movls	r6, r7
   24f88:	movhi	r0, r6
   24f8c:	b	24f48 <__assert_fail@plt+0x12c28>
   24f90:	cmp	r2, #0
   24f94:	bne	24fa8 <__assert_fail@plt+0x12c88>
   24f98:	mov	r1, r2
   24f9c:	mov	r0, #1
   24fa0:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24fa4:	mov	r4, r0
   24fa8:	clz	r3, r4
   24fac:	cmp	r3, #0
   24fb0:	bne	25168 <__assert_fail@plt+0x12e48>
   24fb4:	rsb	r5, r4, r5
   24fb8:	lsr	r8, r4, #16
   24fbc:	uxth	sl, r4
   24fc0:	mov	r6, #1
   24fc4:	mov	r1, r8
   24fc8:	mov	r0, r5
   24fcc:	bl	242f8 <__assert_fail@plt+0x11fd8>
   24fd0:	mov	r1, r8
   24fd4:	mov	r9, r0
   24fd8:	mov	r0, r5
   24fdc:	bl	244e4 <__assert_fail@plt+0x121c4>
   24fe0:	mul	r0, sl, r9
   24fe4:	lsr	r3, r7, #16
   24fe8:	orr	r1, r3, r1, lsl #16
   24fec:	cmp	r0, r1
   24ff0:	bls	25010 <__assert_fail@plt+0x12cf0>
   24ff4:	adds	r1, r1, r4
   24ff8:	sub	r2, r9, #1
   24ffc:	bcs	25244 <__assert_fail@plt+0x12f24>
   25000:	cmp	r0, r1
   25004:	subhi	r9, r9, #2
   25008:	addhi	r1, r1, r4
   2500c:	bls	25244 <__assert_fail@plt+0x12f24>
   25010:	rsb	fp, r0, r1
   25014:	mov	r1, r8
   25018:	uxth	r7, r7
   2501c:	mov	r0, fp
   25020:	bl	242f8 <__assert_fail@plt+0x11fd8>
   25024:	mov	r1, r8
   25028:	mov	r5, r0
   2502c:	mov	r0, fp
   25030:	bl	244e4 <__assert_fail@plt+0x121c4>
   25034:	mul	sl, sl, r5
   25038:	orr	r1, r7, r1, lsl #16
   2503c:	cmp	sl, r1
   25040:	bls	2505c <__assert_fail@plt+0x12d3c>
   25044:	adds	r4, r1, r4
   25048:	sub	r3, r5, #1
   2504c:	bcs	2524c <__assert_fail@plt+0x12f2c>
   25050:	cmp	sl, r4
   25054:	subhi	r5, r5, #2
   25058:	bls	2524c <__assert_fail@plt+0x12f2c>
   2505c:	orr	r0, r5, r9, lsl #16
   25060:	mov	r1, r6
   25064:	add	sp, sp, #12
   25068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2506c:	rsb	r1, r7, #32
   25070:	lsl	r0, r2, r7
   25074:	lsr	r2, r2, r1
   25078:	lsr	fp, r5, r1
   2507c:	orr	r8, r2, r3, lsl r7
   25080:	lsr	r1, r6, r1
   25084:	str	r0, [sp, #4]
   25088:	orr	r5, r1, r5, lsl r7
   2508c:	lsr	r9, r8, #16
   25090:	mov	r0, fp
   25094:	uxth	sl, r8
   25098:	mov	r1, r9
   2509c:	bl	242f8 <__assert_fail@plt+0x11fd8>
   250a0:	mov	r1, r9
   250a4:	mov	r4, r0
   250a8:	mov	r0, fp
   250ac:	bl	244e4 <__assert_fail@plt+0x121c4>
   250b0:	mul	r0, sl, r4
   250b4:	lsr	ip, r5, #16
   250b8:	orr	r1, ip, r1, lsl #16
   250bc:	cmp	r0, r1
   250c0:	bls	250d4 <__assert_fail@plt+0x12db4>
   250c4:	adds	r1, r1, r8
   250c8:	sub	r2, r4, #1
   250cc:	bcc	25268 <__assert_fail@plt+0x12f48>
   250d0:	mov	r4, r2
   250d4:	rsb	ip, r0, r1
   250d8:	mov	r1, r9
   250dc:	str	ip, [sp]
   250e0:	uxth	r5, r5
   250e4:	mov	r0, ip
   250e8:	bl	242f8 <__assert_fail@plt+0x11fd8>
   250ec:	ldr	ip, [sp]
   250f0:	mov	r1, r9
   250f4:	mov	fp, r0
   250f8:	mov	r0, ip
   250fc:	bl	244e4 <__assert_fail@plt+0x121c4>
   25100:	mul	sl, sl, fp
   25104:	orr	r1, r5, r1, lsl #16
   25108:	cmp	sl, r1
   2510c:	bls	25120 <__assert_fail@plt+0x12e00>
   25110:	adds	r1, r1, r8
   25114:	sub	r2, fp, #1
   25118:	bcc	25254 <__assert_fail@plt+0x12f34>
   2511c:	mov	fp, r2
   25120:	ldr	r3, [sp, #4]
   25124:	orr	r0, fp, r4, lsl #16
   25128:	rsb	sl, sl, r1
   2512c:	umull	r4, r5, r0, r3
   25130:	cmp	sl, r5
   25134:	bcc	25154 <__assert_fail@plt+0x12e34>
   25138:	movne	r3, #0
   2513c:	moveq	r3, #1
   25140:	cmp	r4, r6, lsl r7
   25144:	movls	r6, #0
   25148:	andhi	r6, r3, #1
   2514c:	cmp	r6, #0
   25150:	beq	24f48 <__assert_fail@plt+0x12c28>
   25154:	mov	r6, #0
   25158:	sub	r0, r0, #1
   2515c:	mov	r1, r6
   25160:	add	sp, sp, #12
   25164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25168:	lsl	r4, r4, r3
   2516c:	rsb	r9, r3, #32
   25170:	lsr	r2, r5, r9
   25174:	lsr	r9, r6, r9
   25178:	lsr	r8, r4, #16
   2517c:	orr	r9, r9, r5, lsl r3
   25180:	mov	r0, r2
   25184:	lsl	r7, r6, r3
   25188:	mov	r1, r8
   2518c:	str	r2, [sp]
   25190:	bl	242f8 <__assert_fail@plt+0x11fd8>
   25194:	ldr	r2, [sp]
   25198:	mov	r1, r8
   2519c:	uxth	sl, r4
   251a0:	mov	fp, r0
   251a4:	mov	r0, r2
   251a8:	bl	244e4 <__assert_fail@plt+0x121c4>
   251ac:	mul	r0, sl, fp
   251b0:	lsr	r3, r9, #16
   251b4:	orr	r1, r3, r1, lsl #16
   251b8:	cmp	r0, r1
   251bc:	bls	251dc <__assert_fail@plt+0x12ebc>
   251c0:	adds	r1, r1, r4
   251c4:	sub	r3, fp, #1
   251c8:	bcs	2527c <__assert_fail@plt+0x12f5c>
   251cc:	cmp	r0, r1
   251d0:	subhi	fp, fp, #2
   251d4:	addhi	r1, r1, r4
   251d8:	bls	2527c <__assert_fail@plt+0x12f5c>
   251dc:	rsb	r5, r0, r1
   251e0:	mov	r1, r8
   251e4:	uxth	r9, r9
   251e8:	mov	r0, r5
   251ec:	bl	242f8 <__assert_fail@plt+0x11fd8>
   251f0:	mov	r1, r8
   251f4:	mov	r6, r0
   251f8:	mov	r0, r5
   251fc:	bl	244e4 <__assert_fail@plt+0x121c4>
   25200:	mul	r5, sl, r6
   25204:	orr	r1, r9, r1, lsl #16
   25208:	cmp	r5, r1
   2520c:	bls	25230 <__assert_fail@plt+0x12f10>
   25210:	adds	r1, r1, r4
   25214:	sub	r3, r6, #1
   25218:	bcs	2522c <__assert_fail@plt+0x12f0c>
   2521c:	cmp	r5, r1
   25220:	subhi	r6, r6, #2
   25224:	addhi	r1, r1, r4
   25228:	bhi	25230 <__assert_fail@plt+0x12f10>
   2522c:	mov	r6, r3
   25230:	rsb	r5, r5, r1
   25234:	orr	r6, r6, fp, lsl #16
   25238:	b	24fc4 <__assert_fail@plt+0x12ca4>
   2523c:	mov	r6, r3
   25240:	b	24f40 <__assert_fail@plt+0x12c20>
   25244:	mov	r9, r2
   25248:	b	25010 <__assert_fail@plt+0x12cf0>
   2524c:	mov	r5, r3
   25250:	b	2505c <__assert_fail@plt+0x12d3c>
   25254:	cmp	sl, r1
   25258:	subhi	fp, fp, #2
   2525c:	addhi	r1, r1, r8
   25260:	bhi	25120 <__assert_fail@plt+0x12e00>
   25264:	b	2511c <__assert_fail@plt+0x12dfc>
   25268:	cmp	r0, r1
   2526c:	subhi	r4, r4, #2
   25270:	addhi	r1, r1, r8
   25274:	bhi	250d4 <__assert_fail@plt+0x12db4>
   25278:	b	250d0 <__assert_fail@plt+0x12db0>
   2527c:	mov	fp, r3
   25280:	b	251dc <__assert_fail@plt+0x12ebc>
   25284:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   25288:	mov	r7, r0
   2528c:	ldr	r6, [pc, #76]	; 252e0 <__assert_fail@plt+0x12fc0>
   25290:	mov	r8, r1
   25294:	ldr	r5, [pc, #72]	; 252e4 <__assert_fail@plt+0x12fc4>
   25298:	mov	r9, r2
   2529c:	add	r6, pc, r6
   252a0:	bl	11cf4 <pthread_mutex_unlock@plt-0x20>
   252a4:	add	r5, pc, r5
   252a8:	rsb	r6, r5, r6
   252ac:	asrs	r6, r6, #2
   252b0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   252b4:	sub	r5, r5, #4
   252b8:	mov	r4, #0
   252bc:	add	r4, r4, #1
   252c0:	ldr	r3, [r5, #4]!
   252c4:	mov	r0, r7
   252c8:	mov	r1, r8
   252cc:	mov	r2, r9
   252d0:	blx	r3
   252d4:	cmp	r4, r6
   252d8:	bne	252bc <__assert_fail@plt+0x12f9c>
   252dc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   252e0:	andeq	r2, r1, r4, lsl sl
   252e4:	andeq	r2, r1, r8, lsl #20
   252e8:	bx	lr
   252ec:	ldr	r3, [pc, #28]	; 25310 <__assert_fail@plt+0x12ff0>
   252f0:	mov	r1, #0
   252f4:	ldr	r2, [pc, #24]	; 25314 <__assert_fail@plt+0x12ff4>
   252f8:	add	r3, pc, r3
   252fc:	ldr	r3, [r3, r2]
   25300:	cmp	r3, #0
   25304:	ldrne	r2, [r3]
   25308:	moveq	r2, r3
   2530c:	b	12134 <__cxa_atexit@plt>
   25310:	andeq	r2, r1, r0, lsl #26
   25314:	andeq	r0, r0, r8, lsr r2

Disassembly of section .fini:

00025318 <.fini>:
   25318:	push	{r3, lr}
   2531c:	pop	{r3, pc}
