
centos-preinstalled/prtstat:     file format elf32-littlearm


Disassembly of section .init:

00010884 <.init>:
   10884:	push	{r3, lr}
   10888:	bl	10c8c <__assert_fail@plt+0x2b0>
   1088c:	pop	{r3, pc}

Disassembly of section .plt:

00010890 <strtol@plt-0x14>:
   10890:	push	{lr}		; (str lr, [sp, #-4]!)
   10894:	ldr	lr, [pc, #4]	; 108a0 <strtol@plt-0x4>
   10898:	add	lr, pc, lr
   1089c:	ldr	pc, [lr, #8]!
   108a0:	andeq	r2, r1, r0, ror #14

000108a4 <strtol@plt>:
   108a4:	add	ip, pc, #0, 12
   108a8:	add	ip, ip, #73728	; 0x12000
   108ac:	ldr	pc, [ip, #1888]!	; 0x760

000108b0 <free@plt>:
   108b0:	add	ip, pc, #0, 12
   108b4:	add	ip, ip, #73728	; 0x12000
   108b8:	ldr	pc, [ip, #1880]!	; 0x758

000108bc <fgets@plt>:
   108bc:	add	ip, pc, #0, 12
   108c0:	add	ip, ip, #73728	; 0x12000
   108c4:	ldr	pc, [ip, #1872]!	; 0x750

000108c8 <dcgettext@plt>:
   108c8:	add	ip, pc, #0, 12
   108cc:	add	ip, ip, #73728	; 0x12000
   108d0:	ldr	pc, [ip, #1864]!	; 0x748

000108d4 <__stack_chk_fail@plt>:
   108d4:	add	ip, pc, #0, 12
   108d8:	add	ip, ip, #73728	; 0x12000
   108dc:	ldr	pc, [ip, #1856]!	; 0x740

000108e0 <sysconf@plt>:
   108e0:	add	ip, pc, #0, 12
   108e4:	add	ip, ip, #73728	; 0x12000
   108e8:	ldr	pc, [ip, #1848]!	; 0x738

000108ec <textdomain@plt>:
   108ec:	add	ip, pc, #0, 12
   108f0:	add	ip, ip, #73728	; 0x12000
   108f4:	ldr	pc, [ip, #1840]!	; 0x730

000108f8 <perror@plt>:
   108f8:	add	ip, pc, #0, 12
   108fc:	add	ip, ip, #73728	; 0x12000
   10900:	ldr	pc, [ip, #1832]!	; 0x728

00010904 <__asprintf_chk@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #73728	; 0x12000
   1090c:	ldr	pc, [ip, #1824]!	; 0x720

00010910 <malloc@plt>:
   10910:	add	ip, pc, #0, 12
   10914:	add	ip, ip, #73728	; 0x12000
   10918:	ldr	pc, [ip, #1816]!	; 0x718

0001091c <__libc_start_main@plt>:
   1091c:	add	ip, pc, #0, 12
   10920:	add	ip, ip, #73728	; 0x12000
   10924:	ldr	pc, [ip, #1808]!	; 0x710

00010928 <strerror@plt>:
   10928:	add	ip, pc, #0, 12
   1092c:	add	ip, ip, #73728	; 0x12000
   10930:	ldr	pc, [ip, #1800]!	; 0x708

00010934 <__gmon_start__@plt>:
   10934:	add	ip, pc, #0, 12
   10938:	add	ip, ip, #73728	; 0x12000
   1093c:	ldr	pc, [ip, #1792]!	; 0x700

00010940 <getopt_long@plt>:
   10940:	add	ip, pc, #0, 12
   10944:	add	ip, ip, #73728	; 0x12000
   10948:	ldr	pc, [ip, #1784]!	; 0x6f8

0001094c <exit@plt>:
   1094c:	add	ip, pc, #0, 12
   10950:	add	ip, ip, #73728	; 0x12000
   10954:	ldr	pc, [ip, #1776]!	; 0x6f0

00010958 <strchr@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #73728	; 0x12000
   10960:	ldr	pc, [ip, #1768]!	; 0x6e8

00010964 <__errno_location@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #73728	; 0x12000
   1096c:	ldr	pc, [ip, #1760]!	; 0x6e0

00010970 <__sprintf_chk@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #73728	; 0x12000
   10978:	ldr	pc, [ip, #1752]!	; 0x6d8

0001097c <__printf_chk@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #73728	; 0x12000
   10984:	ldr	pc, [ip, #1744]!	; 0x6d0

00010988 <__fprintf_chk@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #73728	; 0x12000
   10990:	ldr	pc, [ip, #1736]!	; 0x6c8

00010994 <setlocale@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #73728	; 0x12000
   1099c:	ldr	pc, [ip, #1728]!	; 0x6c0

000109a0 <sscanf@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #73728	; 0x12000
   109a8:	ldr	pc, [ip, #1720]!	; 0x6b8

000109ac <fopen64@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #73728	; 0x12000
   109b4:	ldr	pc, [ip, #1712]!	; 0x6b0

000109b8 <bindtextdomain@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #73728	; 0x12000
   109c0:	ldr	pc, [ip, #1704]!	; 0x6a8

000109c4 <__xstat64@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #73728	; 0x12000
   109cc:	ldr	pc, [ip, #1696]!	; 0x6a0

000109d0 <abort@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #73728	; 0x12000
   109d8:	ldr	pc, [ip, #1688]!	; 0x698

000109dc <__assert_fail@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #73728	; 0x12000
   109e4:	ldr	pc, [ip, #1680]!	; 0x690

Disassembly of section .text:

000109e8 <.text>:
   109e8:	push	{r3, lr}
   109ec:	movw	r0, #6896	; 0x1af0
   109f0:	movw	r1, #6912	; 0x1b00
   109f4:	movw	r3, #6576	; 0x19b0
   109f8:	movt	r0, #1
   109fc:	movt	r1, #1
   10a00:	mov	r2, #98	; 0x62
   10a04:	movt	r3, #1
   10a08:	bl	109dc <__assert_fail@plt>
   10a0c:	push	{r4, r5, r6, r7, r8, r9, lr}
   10a10:	mov	r5, r0
   10a14:	ldr	lr, [pc, #560]	; 10c4c <__assert_fail@plt+0x270>
   10a18:	mov	r6, r1
   10a1c:	sub	sp, sp, #172	; 0xac
   10a20:	movw	r4, #12416	; 0x3080
   10a24:	add	ip, sp, #8
   10a28:	movt	r4, #2
   10a2c:	ldm	lr!, {r0, r1, r2, r3}
   10a30:	mov	r7, #0
   10a34:	ldr	r9, [r4]
   10a38:	mov	r8, r7
   10a3c:	stmia	ip!, {r0, r1, r2, r3}
   10a40:	ldm	lr!, {r0, r1, r2, r3}
   10a44:	str	r9, [sp, #164]	; 0xa4
   10a48:	stmia	ip!, {r0, r1, r2, r3}
   10a4c:	ldm	lr, {r0, r1, r2, r3}
   10a50:	stm	ip, {r0, r1, r2, r3}
   10a54:	movw	r1, #8848	; 0x2290
   10a58:	mov	r0, #6
   10a5c:	movt	r1, #1
   10a60:	bl	10994 <setlocale@plt>
   10a64:	movw	r0, #8756	; 0x2234
   10a68:	movw	r1, #8764	; 0x223c
   10a6c:	movt	r0, #1
   10a70:	movt	r1, #1
   10a74:	bl	109b8 <bindtextdomain@plt>
   10a78:	movw	r0, #8756	; 0x2234
   10a7c:	movt	r0, #1
   10a80:	bl	108ec <textdomain@plt>
   10a84:	str	r8, [sp]
   10a88:	movw	r2, #9096	; 0x2388
   10a8c:	mov	r0, r5
   10a90:	movt	r2, #1
   10a94:	mov	r1, r6
   10a98:	add	r3, sp, #8
   10a9c:	bl	10940 <getopt_long@plt>
   10aa0:	cmn	r0, #1
   10aa4:	beq	10b84 <__assert_fail@plt+0x1a8>
   10aa8:	cmp	r0, #86	; 0x56
   10aac:	beq	10ae0 <__assert_fail@plt+0x104>
   10ab0:	cmp	r0, #114	; 0x72
   10ab4:	beq	10ad8 <__assert_fail@plt+0xfc>
   10ab8:	cmp	r0, #63	; 0x3f
   10abc:	bne	10a84 <__assert_fail@plt+0xa8>
   10ac0:	movw	r1, #9080	; 0x2378
   10ac4:	mov	r2, #5
   10ac8:	movt	r1, #1
   10acc:	mov	r0, #0
   10ad0:	bl	108c8 <dcgettext@plt>
   10ad4:	bl	10d84 <__assert_fail@plt+0x3a8>
   10ad8:	mov	r7, #1
   10adc:	b	10a84 <__assert_fail@plt+0xa8>
   10ae0:	movw	r5, #12428	; 0x308c
   10ae4:	movt	r5, #2
   10ae8:	mov	r2, #5
   10aec:	movw	r1, #8784	; 0x2250
   10af0:	mov	r0, #0
   10af4:	movt	r1, #1
   10af8:	ldr	r6, [r5]
   10afc:	bl	108c8 <dcgettext@plt>
   10b00:	mov	r1, #1
   10b04:	movw	r3, #8808	; 0x2268
   10b08:	movt	r3, #1
   10b0c:	mov	r2, r0
   10b10:	mov	r0, r6
   10b14:	bl	10988 <__fprintf_chk@plt>
   10b18:	mov	r2, #5
   10b1c:	movw	r1, #8816	; 0x2270
   10b20:	mov	r0, #0
   10b24:	movt	r1, #1
   10b28:	ldr	r6, [r5]
   10b2c:	bl	108c8 <dcgettext@plt>
   10b30:	mov	r1, #1
   10b34:	mov	r2, r0
   10b38:	mov	r0, r6
   10b3c:	bl	10988 <__fprintf_chk@plt>
   10b40:	mov	r2, #5
   10b44:	movw	r1, #8852	; 0x2294
   10b48:	mov	r0, #0
   10b4c:	movt	r1, #1
   10b50:	ldr	r5, [r5]
   10b54:	bl	108c8 <dcgettext@plt>
   10b58:	mov	r1, #1
   10b5c:	mov	r2, r0
   10b60:	mov	r0, r5
   10b64:	bl	10988 <__fprintf_chk@plt>
   10b68:	ldr	r2, [sp, #164]	; 0xa4
   10b6c:	mov	r0, #0
   10b70:	ldr	r3, [r4]
   10b74:	cmp	r2, r3
   10b78:	bne	10bf8 <__assert_fail@plt+0x21c>
   10b7c:	add	sp, sp, #172	; 0xac
   10b80:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10b84:	movw	r8, #12424	; 0x3088
   10b88:	movt	r8, #2
   10b8c:	ldr	r3, [r8]
   10b90:	cmp	r5, r3
   10b94:	ble	10c34 <__assert_fail@plt+0x258>
   10b98:	movw	r1, #9136	; 0x23b0
   10b9c:	mov	r0, #3
   10ba0:	movt	r1, #1
   10ba4:	add	r2, sp, #56	; 0x38
   10ba8:	bl	109c4 <__xstat64@plt>
   10bac:	cmn	r0, #1
   10bb0:	beq	10bfc <__assert_fail@plt+0x220>
   10bb4:	mov	r0, #2
   10bb8:	bl	108e0 <sysconf@plt>
   10bbc:	movw	r3, #12436	; 0x3094
   10bc0:	movt	r3, #2
   10bc4:	ldr	r8, [r8]
   10bc8:	str	r0, [r3, #20]
   10bcc:	b	10bec <__assert_fail@plt+0x210>
   10bd0:	ldr	r0, [r6, r8, lsl #2]
   10bd4:	mov	r1, #0
   10bd8:	mov	r2, #10
   10bdc:	add	r8, r8, #1
   10be0:	bl	108a4 <strtol@plt>
   10be4:	mov	r1, r7
   10be8:	bl	10e84 <__assert_fail@plt+0x4a8>
   10bec:	cmp	r8, r5
   10bf0:	blt	10bd0 <__assert_fail@plt+0x1f4>
   10bf4:	b	10b68 <__assert_fail@plt+0x18c>
   10bf8:	bl	108d4 <__stack_chk_fail@plt>
   10bfc:	movw	r3, #12428	; 0x308c
   10c00:	movt	r3, #2
   10c04:	mov	r2, #5
   10c08:	movw	r1, #9152	; 0x23c0
   10c0c:	mov	r0, #0
   10c10:	movt	r1, #1
   10c14:	ldr	r4, [r3]
   10c18:	bl	108c8 <dcgettext@plt>
   10c1c:	mov	r1, #1
   10c20:	mov	r2, r0
   10c24:	mov	r0, r4
   10c28:	bl	10988 <__fprintf_chk@plt>
   10c2c:	mov	r0, #1
   10c30:	bl	1094c <exit@plt>
   10c34:	movw	r1, #9100	; 0x238c
   10c38:	mov	r2, #5
   10c3c:	movt	r1, #1
   10c40:	mov	r0, #0
   10c44:	bl	108c8 <dcgettext@plt>
   10c48:	bl	10d84 <__assert_fail@plt+0x3a8>
   10c4c:	andeq	r1, r1, ip, ror #19
   10c50:	mov	fp, #0
   10c54:	mov	lr, #0
   10c58:	pop	{r1}		; (ldr r1, [sp], #4)
   10c5c:	mov	r2, sp
   10c60:	push	{r2}		; (str r2, [sp, #-4]!)
   10c64:	push	{r0}		; (str r0, [sp, #-4]!)
   10c68:	ldr	ip, [pc, #16]	; 10c80 <__assert_fail@plt+0x2a4>
   10c6c:	push	{ip}		; (str ip, [sp, #-4]!)
   10c70:	ldr	r0, [pc, #12]	; 10c84 <__assert_fail@plt+0x2a8>
   10c74:	ldr	r3, [pc, #12]	; 10c88 <__assert_fail@plt+0x2ac>
   10c78:	bl	1091c <__libc_start_main@plt>
   10c7c:	bl	109d0 <abort@plt>
   10c80:	muleq	r1, ip, r9
   10c84:	andeq	r0, r1, ip, lsl #20
   10c88:	andeq	r1, r1, r8, lsr r9
   10c8c:	ldr	r3, [pc, #20]	; 10ca8 <__assert_fail@plt+0x2cc>
   10c90:	ldr	r2, [pc, #20]	; 10cac <__assert_fail@plt+0x2d0>
   10c94:	add	r3, pc, r3
   10c98:	ldr	r2, [r3, r2]
   10c9c:	cmp	r2, #0
   10ca0:	bxeq	lr
   10ca4:	b	10934 <__gmon_start__@plt>
   10ca8:	andeq	r2, r1, r4, ror #6
   10cac:	andeq	r0, r0, r8, ror r0
   10cb0:	push	{r3, lr}
   10cb4:	movw	r0, #12416	; 0x3080
   10cb8:	ldr	r3, [pc, #36]	; 10ce4 <__assert_fail@plt+0x308>
   10cbc:	movt	r0, #2
   10cc0:	rsb	r3, r0, r3
   10cc4:	cmp	r3, #6
   10cc8:	popls	{r3, pc}
   10ccc:	movw	r3, #0
   10cd0:	movt	r3, #0
   10cd4:	cmp	r3, #0
   10cd8:	popeq	{r3, pc}
   10cdc:	blx	r3
   10ce0:	pop	{r3, pc}
   10ce4:	andeq	r3, r2, r3, lsl #1
   10ce8:	push	{r3, lr}
   10cec:	movw	r0, #12416	; 0x3080
   10cf0:	movw	r3, #12416	; 0x3080
   10cf4:	movt	r0, #2
   10cf8:	movt	r3, #2
   10cfc:	rsb	r3, r0, r3
   10d00:	asr	r3, r3, #2
   10d04:	add	r3, r3, r3, lsr #31
   10d08:	asrs	r1, r3, #1
   10d0c:	popeq	{r3, pc}
   10d10:	movw	r2, #0
   10d14:	movt	r2, #0
   10d18:	cmp	r2, #0
   10d1c:	popeq	{r3, pc}
   10d20:	blx	r2
   10d24:	pop	{r3, pc}
   10d28:	push	{r4, lr}
   10d2c:	movw	r4, #12432	; 0x3090
   10d30:	movt	r4, #2
   10d34:	ldrb	r3, [r4]
   10d38:	cmp	r3, #0
   10d3c:	popne	{r4, pc}
   10d40:	bl	10cb0 <__assert_fail@plt+0x2d4>
   10d44:	mov	r3, #1
   10d48:	strb	r3, [r4]
   10d4c:	pop	{r4, pc}
   10d50:	movw	r0, #12036	; 0x2f04
   10d54:	movt	r0, #2
   10d58:	push	{r3, lr}
   10d5c:	ldr	r3, [r0]
   10d60:	cmp	r3, #0
   10d64:	beq	10d7c <__assert_fail@plt+0x3a0>
   10d68:	movw	r3, #0
   10d6c:	movt	r3, #0
   10d70:	cmp	r3, #0
   10d74:	beq	10d7c <__assert_fail@plt+0x3a0>
   10d78:	blx	r3
   10d7c:	pop	{r3, lr}
   10d80:	b	10ce8 <__assert_fail@plt+0x30c>
   10d84:	subs	r3, r0, #0
   10d88:	push	{r4, lr}
   10d8c:	movw	r4, #12428	; 0x308c
   10d90:	movt	r4, #2
   10d94:	beq	10dac <__assert_fail@plt+0x3d0>
   10d98:	movw	r2, #7268	; 0x1c64
   10d9c:	ldr	r0, [r4]
   10da0:	movt	r2, #1
   10da4:	mov	r1, #1
   10da8:	bl	10988 <__fprintf_chk@plt>
   10dac:	mov	r2, #5
   10db0:	movw	r1, #6684	; 0x1a1c
   10db4:	mov	r0, #0
   10db8:	movt	r1, #1
   10dbc:	ldr	r4, [r4]
   10dc0:	bl	108c8 <dcgettext@plt>
   10dc4:	mov	r1, #1
   10dc8:	mov	r2, r0
   10dcc:	mov	r0, r4
   10dd0:	bl	10988 <__fprintf_chk@plt>
   10dd4:	mov	r0, #1
   10dd8:	bl	1094c <exit@plt>
   10ddc:	movw	r3, #38528	; 0x9680
   10de0:	movt	r3, #152	; 0x98
   10de4:	cmp	r1, r3
   10de8:	mov	r2, r1
   10dec:	push	{lr}		; (str lr, [sp, #-4]!)
   10df0:	sub	sp, sp, #12
   10df4:	bhi	10e54 <__assert_fail@plt+0x478>
   10df8:	movw	r3, #10000	; 0x2710
   10dfc:	cmp	r1, r3
   10e00:	bhi	10e24 <__assert_fail@plt+0x448>
   10e04:	str	r1, [sp]
   10e08:	mvn	r2, #0
   10e0c:	mov	r1, #1
   10e10:	movw	r3, #6888	; 0x1ae8
   10e14:	movt	r3, #1
   10e18:	bl	10970 <__sprintf_chk@plt>
   10e1c:	add	sp, sp, #12
   10e20:	pop	{pc}		; (ldr pc, [sp], #4)
   10e24:	movw	ip, #19923	; 0x4dd3
   10e28:	movt	ip, #4194	; 0x1062
   10e2c:	mov	r1, #1
   10e30:	movw	r3, #6880	; 0x1ae0
   10e34:	umull	lr, ip, ip, r2
   10e38:	movt	r3, #1
   10e3c:	mvn	r2, #0
   10e40:	lsr	ip, ip, #6
   10e44:	str	ip, [sp]
   10e48:	bl	10970 <__sprintf_chk@plt>
   10e4c:	add	sp, sp, #12
   10e50:	pop	{pc}		; (ldr pc, [sp], #4)
   10e54:	movw	ip, #56963	; 0xde83
   10e58:	movt	ip, #17179	; 0x431b
   10e5c:	mov	r1, #1
   10e60:	movw	r3, #6872	; 0x1ad8
   10e64:	umull	lr, ip, ip, r2
   10e68:	movt	r3, #1
   10e6c:	mvn	r2, #0
   10e70:	lsr	ip, ip, #18
   10e74:	str	ip, [sp]
   10e78:	bl	10970 <__sprintf_chk@plt>
   10e7c:	add	sp, sp, #12
   10e80:	pop	{pc}		; (ldr pc, [sp], #4)
   10e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e88:	movw	r5, #12416	; 0x3080
   10e8c:	movt	r5, #2
   10e90:	sub	sp, sp, #8640	; 0x21c0
   10e94:	sub	sp, sp, #28
   10e98:	mov	r6, r0
   10e9c:	ldr	r3, [r5]
   10ea0:	add	r2, sp, #8192	; 0x2000
   10ea4:	mov	r0, #168	; 0xa8
   10ea8:	mov	r9, r1
   10eac:	str	r3, [r2, #468]	; 0x1d4
   10eb0:	bl	10910 <malloc@plt>
   10eb4:	mov	r3, r6
   10eb8:	movw	r2, #6944	; 0x1b20
   10ebc:	mov	r1, #1
   10ec0:	movt	r2, #1
   10ec4:	mov	r4, r0
   10ec8:	add	r0, sp, #164	; 0xa4
   10ecc:	bl	10904 <__asprintf_chk@plt>
   10ed0:	cmp	r0, #0
   10ed4:	blt	118f0 <__assert_fail@plt+0xf14>
   10ed8:	add	lr, sp, #8640	; 0x21c0
   10edc:	movw	r7, #57036	; 0xdecc
   10ee0:	add	lr, lr, #24
   10ee4:	movt	r7, #65535	; 0xffff
   10ee8:	movw	r1, #7880	; 0x1ec8
   10eec:	movt	r1, #1
   10ef0:	ldr	r0, [lr, r7]
   10ef4:	bl	109ac <fopen64@plt>
   10ef8:	subs	r8, r0, #0
   10efc:	beq	11460 <__assert_fail@plt+0xa84>
   10f00:	add	r3, sp, #8640	; 0x21c0
   10f04:	add	r3, r3, #24
   10f08:	ldr	r0, [r3, r7]
   10f0c:	bl	108b0 <free@plt>
   10f10:	mov	r2, r8
   10f14:	mov	r1, #8192	; 0x2000
   10f18:	add	r0, sp, #468	; 0x1d4
   10f1c:	bl	108bc <fgets@plt>
   10f20:	cmp	r0, #0
   10f24:	beq	11440 <__assert_fail@plt+0xa64>
   10f28:	add	r0, sp, #468	; 0x1d4
   10f2c:	mov	r1, #40	; 0x28
   10f30:	bl	10958 <strchr@plt>
   10f34:	cmp	r0, #0
   10f38:	beq	11440 <__assert_fail@plt+0xa64>
   10f3c:	add	r2, r4, #8
   10f40:	add	r3, r4, #12
   10f44:	add	r0, r0, #1
   10f48:	stm	sp, {r2, r3}
   10f4c:	movw	r1, #7076	; 0x1ba4
   10f50:	add	r2, r4, #16
   10f54:	add	r3, r4, #20
   10f58:	str	r2, [sp, #8]
   10f5c:	str	r3, [sp, #12]
   10f60:	add	r2, r4, #24
   10f64:	add	r3, r4, #36	; 0x24
   10f68:	str	r2, [sp, #16]
   10f6c:	str	r3, [sp, #20]
   10f70:	add	r2, r4, #48	; 0x30
   10f74:	add	r3, r4, #52	; 0x34
   10f78:	str	r2, [sp, #24]
   10f7c:	str	r3, [sp, #28]
   10f80:	add	r2, r4, #56	; 0x38
   10f84:	add	r3, r4, #60	; 0x3c
   10f88:	str	r2, [sp, #32]
   10f8c:	str	r3, [sp, #36]	; 0x24
   10f90:	add	r2, r4, #64	; 0x40
   10f94:	add	r3, r4, #68	; 0x44
   10f98:	str	r2, [sp, #40]	; 0x28
   10f9c:	str	r3, [sp, #44]	; 0x2c
   10fa0:	add	r2, r4, #116	; 0x74
   10fa4:	add	r3, r4, #120	; 0x78
   10fa8:	str	r2, [sp, #48]	; 0x30
   10fac:	str	r3, [sp, #52]	; 0x34
   10fb0:	add	r2, r4, #124	; 0x7c
   10fb4:	add	r3, r4, #128	; 0x80
   10fb8:	str	r2, [sp, #56]	; 0x38
   10fbc:	str	r3, [sp, #60]	; 0x3c
   10fc0:	add	r2, r4, #132	; 0x84
   10fc4:	add	r3, r4, #136	; 0x88
   10fc8:	str	r2, [sp, #64]	; 0x40
   10fcc:	str	r3, [sp, #68]	; 0x44
   10fd0:	add	r2, r4, #152	; 0x98
   10fd4:	add	r3, r4, #72	; 0x48
   10fd8:	str	r2, [sp, #72]	; 0x48
   10fdc:	str	r3, [sp, #76]	; 0x4c
   10fe0:	add	r2, r4, #140	; 0x8c
   10fe4:	add	r3, r4, #76	; 0x4c
   10fe8:	str	r2, [sp, #80]	; 0x50
   10fec:	str	r3, [sp, #84]	; 0x54
   10ff0:	add	r2, r4, #80	; 0x50
   10ff4:	add	r3, r4, #84	; 0x54
   10ff8:	str	r2, [sp, #88]	; 0x58
   10ffc:	str	r3, [sp, #92]	; 0x5c
   11000:	add	r2, r4, #88	; 0x58
   11004:	add	r3, r4, #92	; 0x5c
   11008:	str	r2, [sp, #96]	; 0x60
   1100c:	str	r3, [sp, #100]	; 0x64
   11010:	add	r2, r4, #96	; 0x60
   11014:	add	r3, r4, #100	; 0x64
   11018:	str	r2, [sp, #104]	; 0x68
   1101c:	str	r3, [sp, #108]	; 0x6c
   11020:	add	r2, r4, #104	; 0x68
   11024:	add	r3, r4, #108	; 0x6c
   11028:	str	r2, [sp, #112]	; 0x70
   1102c:	str	r3, [sp, #116]	; 0x74
   11030:	add	r2, r4, #28
   11034:	add	r3, r4, #32
   11038:	str	r2, [sp, #120]	; 0x78
   1103c:	str	r3, [sp, #124]	; 0x7c
   11040:	add	r2, r4, #40	; 0x28
   11044:	add	r3, r4, #44	; 0x2c
   11048:	str	r2, [sp, #128]	; 0x80
   1104c:	movt	r1, #1
   11050:	str	r3, [sp, #132]	; 0x84
   11054:	add	r2, r4, #160	; 0xa0
   11058:	add	r3, r4, #112	; 0x70
   1105c:	str	r2, [sp, #136]	; 0x88
   11060:	mov	r2, r4
   11064:	str	r3, [sp, #140]	; 0x8c
   11068:	add	r3, r4, #144	; 0x90
   1106c:	str	r3, [sp, #144]	; 0x90
   11070:	add	r3, r4, #4
   11074:	bl	109a0 <sscanf@plt>
   11078:	ands	r9, r9, #1
   1107c:	beq	114d4 <__assert_fail@plt+0xaf8>
   11080:	ldr	r0, [r4]
   11084:	mov	r3, r6
   11088:	movw	r2, #7276	; 0x1c6c
   1108c:	movw	r1, #7244	; 0x1c4c
   11090:	movt	r2, #1
   11094:	movt	r1, #1
   11098:	str	r2, [sp]
   1109c:	movw	r2, #7272	; 0x1c68
   110a0:	str	r0, [sp, #4]
   110a4:	movt	r2, #1
   110a8:	mov	r0, #1
   110ac:	bl	1097c <__printf_chk@plt>
   110b0:	ldr	r0, [r4, #8]
   110b4:	ldrb	r3, [r4, #4]
   110b8:	movw	r2, #7320	; 0x1c98
   110bc:	movw	r1, #7284	; 0x1c74
   110c0:	movt	r2, #1
   110c4:	str	r0, [sp, #4]
   110c8:	movt	r1, #1
   110cc:	str	r2, [sp]
   110d0:	mov	r0, #1
   110d4:	movw	r2, #7312	; 0x1c90
   110d8:	movt	r2, #1
   110dc:	bl	1097c <__printf_chk@plt>
   110e0:	ldr	r0, [r4, #16]
   110e4:	ldr	r3, [r4, #12]
   110e8:	movw	r2, #7364	; 0x1cc4
   110ec:	movw	r1, #7328	; 0x1ca0
   110f0:	movt	r2, #1
   110f4:	str	r0, [sp, #4]
   110f8:	movt	r1, #1
   110fc:	str	r2, [sp]
   11100:	mov	r0, #1
   11104:	movw	r2, #7356	; 0x1cbc
   11108:	movt	r2, #1
   1110c:	bl	1097c <__printf_chk@plt>
   11110:	ldr	r0, [r4, #24]
   11114:	ldr	r3, [r4, #20]
   11118:	movw	r2, #7380	; 0x1cd4
   1111c:	movw	r1, #7328	; 0x1ca0
   11120:	movt	r2, #1
   11124:	str	r0, [sp, #4]
   11128:	movt	r1, #1
   1112c:	str	r2, [sp]
   11130:	mov	r0, #1
   11134:	movw	r2, #7372	; 0x1ccc
   11138:	movt	r2, #1
   1113c:	bl	1097c <__printf_chk@plt>
   11140:	ldr	r0, [r4, #48]	; 0x30
   11144:	ldr	r3, [r4, #36]	; 0x24
   11148:	movw	r2, #7428	; 0x1d04
   1114c:	movw	r1, #7388	; 0x1cdc
   11150:	movt	r2, #1
   11154:	str	r0, [sp, #4]
   11158:	movt	r1, #1
   1115c:	str	r2, [sp]
   11160:	mov	r0, #1
   11164:	movw	r2, #7420	; 0x1cfc
   11168:	movt	r2, #1
   1116c:	bl	1097c <__printf_chk@plt>
   11170:	ldr	r0, [r4, #56]	; 0x38
   11174:	ldr	r3, [r4, #52]	; 0x34
   11178:	movw	r2, #7476	; 0x1d34
   1117c:	movw	r1, #7436	; 0x1d0c
   11180:	movt	r2, #1
   11184:	str	r0, [sp, #4]
   11188:	movt	r1, #1
   1118c:	str	r2, [sp]
   11190:	mov	r0, #1
   11194:	movw	r2, #7468	; 0x1d2c
   11198:	movt	r2, #1
   1119c:	bl	1097c <__printf_chk@plt>
   111a0:	ldr	r0, [r4, #64]	; 0x40
   111a4:	ldr	r3, [r4, #60]	; 0x3c
   111a8:	movw	r2, #7492	; 0x1d44
   111ac:	movw	r1, #7436	; 0x1d0c
   111b0:	movt	r2, #1
   111b4:	str	r0, [sp, #4]
   111b8:	movt	r1, #1
   111bc:	str	r2, [sp]
   111c0:	mov	r0, #1
   111c4:	movw	r2, #7484	; 0x1d3c
   111c8:	movt	r2, #1
   111cc:	bl	1097c <__printf_chk@plt>
   111d0:	ldr	r0, [r4, #116]	; 0x74
   111d4:	ldr	r3, [r4, #68]	; 0x44
   111d8:	movw	r2, #7540	; 0x1d74
   111dc:	movw	r1, #7500	; 0x1d4c
   111e0:	movt	r2, #1
   111e4:	str	r0, [sp, #4]
   111e8:	movt	r1, #1
   111ec:	str	r2, [sp]
   111f0:	mov	r0, #1
   111f4:	movw	r2, #7532	; 0x1d6c
   111f8:	movt	r2, #1
   111fc:	bl	1097c <__printf_chk@plt>
   11200:	ldr	r0, [r4, #124]	; 0x7c
   11204:	ldr	r3, [r4, #120]	; 0x78
   11208:	movw	r2, #7588	; 0x1da4
   1120c:	movw	r1, #7548	; 0x1d7c
   11210:	movt	r2, #1
   11214:	str	r0, [sp, #4]
   11218:	movt	r1, #1
   1121c:	str	r2, [sp]
   11220:	mov	r0, #1
   11224:	movw	r2, #7580	; 0x1d9c
   11228:	movt	r2, #1
   1122c:	bl	1097c <__printf_chk@plt>
   11230:	ldr	r0, [r4, #132]	; 0x84
   11234:	ldr	r3, [r4, #128]	; 0x80
   11238:	movw	r2, #7608	; 0x1db8
   1123c:	movw	r1, #7548	; 0x1d7c
   11240:	movt	r2, #1
   11244:	str	r0, [sp, #4]
   11248:	movt	r1, #1
   1124c:	str	r2, [sp]
   11250:	mov	r0, #1
   11254:	movw	r2, #7600	; 0x1db0
   11258:	movt	r2, #1
   1125c:	bl	1097c <__printf_chk@plt>
   11260:	ldrd	r6, [r4, #152]	; 0x98
   11264:	ldr	r3, [r4, #136]	; 0x88
   11268:	movw	r2, #7664	; 0x1df0
   1126c:	movw	r1, #7620	; 0x1dc4
   11270:	movt	r2, #1
   11274:	strd	r6, [sp, #8]
   11278:	movt	r1, #1
   1127c:	str	r2, [sp]
   11280:	mov	r0, #1
   11284:	movw	r2, #7652	; 0x1de4
   11288:	movt	r2, #1
   1128c:	bl	1097c <__printf_chk@plt>
   11290:	ldr	r0, [r4, #140]	; 0x8c
   11294:	ldr	r3, [r4, #72]	; 0x48
   11298:	movw	r2, #7684	; 0x1e04
   1129c:	movw	r1, #7500	; 0x1d4c
   112a0:	movt	r2, #1
   112a4:	str	r0, [sp, #4]
   112a8:	movt	r1, #1
   112ac:	str	r2, [sp]
   112b0:	mov	r0, #1
   112b4:	movw	r2, #7676	; 0x1dfc
   112b8:	movt	r2, #1
   112bc:	bl	1097c <__printf_chk@plt>
   112c0:	ldr	r0, [r4, #80]	; 0x50
   112c4:	ldr	r3, [r4, #76]	; 0x4c
   112c8:	movw	r2, #7696	; 0x1e10
   112cc:	movw	r1, #7436	; 0x1d0c
   112d0:	movt	r2, #1
   112d4:	str	r0, [sp, #4]
   112d8:	movt	r1, #1
   112dc:	str	r2, [sp]
   112e0:	mov	r0, #1
   112e4:	movw	r2, #7688	; 0x1e08
   112e8:	movt	r2, #1
   112ec:	bl	1097c <__printf_chk@plt>
   112f0:	ldr	r0, [r4, #88]	; 0x58
   112f4:	ldr	r3, [r4, #84]	; 0x54
   112f8:	movw	r2, #7716	; 0x1e24
   112fc:	movw	r1, #7436	; 0x1d0c
   11300:	movt	r2, #1
   11304:	str	r0, [sp, #4]
   11308:	movt	r1, #1
   1130c:	str	r2, [sp]
   11310:	mov	r0, #1
   11314:	movw	r2, #7708	; 0x1e1c
   11318:	movt	r2, #1
   1131c:	bl	1097c <__printf_chk@plt>
   11320:	ldr	r0, [r4, #96]	; 0x60
   11324:	ldr	r3, [r4, #92]	; 0x5c
   11328:	movw	r2, #7768	; 0x1e58
   1132c:	movw	r1, #7728	; 0x1e30
   11330:	movt	r2, #1
   11334:	str	r0, [sp, #4]
   11338:	movt	r1, #1
   1133c:	str	r2, [sp]
   11340:	mov	r0, #1
   11344:	movw	r2, #7760	; 0x1e50
   11348:	movt	r2, #1
   1134c:	bl	1097c <__printf_chk@plt>
   11350:	ldr	r0, [r4, #104]	; 0x68
   11354:	ldr	r3, [r4, #100]	; 0x64
   11358:	movw	r2, #7784	; 0x1e68
   1135c:	movw	r1, #7436	; 0x1d0c
   11360:	movt	r2, #1
   11364:	str	r0, [sp, #4]
   11368:	movt	r1, #1
   1136c:	str	r2, [sp]
   11370:	mov	r0, #1
   11374:	movw	r2, #7776	; 0x1e60
   11378:	movt	r2, #1
   1137c:	bl	1097c <__printf_chk@plt>
   11380:	ldr	r0, [r4, #28]
   11384:	ldr	r3, [r4, #100]	; 0x64
   11388:	movw	r2, #7832	; 0x1e98
   1138c:	movw	r1, #7792	; 0x1e70
   11390:	movt	r2, #1
   11394:	str	r0, [sp, #4]
   11398:	movt	r1, #1
   1139c:	str	r2, [sp]
   113a0:	mov	r0, #1
   113a4:	movw	r2, #7824	; 0x1e90
   113a8:	movt	r2, #1
   113ac:	bl	1097c <__printf_chk@plt>
   113b0:	ldr	r0, [r4, #40]	; 0x28
   113b4:	ldr	r3, [r4, #32]
   113b8:	movw	r2, #7884	; 0x1ecc
   113bc:	movw	r1, #7844	; 0x1ea4
   113c0:	movt	r2, #1
   113c4:	str	r0, [sp, #4]
   113c8:	movt	r1, #1
   113cc:	str	r2, [sp]
   113d0:	mov	r0, #1
   113d4:	movw	r2, #7872	; 0x1ec0
   113d8:	movt	r2, #1
   113dc:	bl	1097c <__printf_chk@plt>
   113e0:	ldrd	r6, [r4, #160]	; 0xa0
   113e4:	ldr	r3, [r4, #44]	; 0x2c
   113e8:	movw	r2, #7936	; 0x1f00
   113ec:	movw	r1, #7896	; 0x1ed8
   113f0:	movt	r2, #1
   113f4:	movt	r1, #1
   113f8:	str	r2, [sp]
   113fc:	strd	r6, [sp, #8]
   11400:	movw	r2, #7928	; 0x1ef8
   11404:	mov	r0, #1
   11408:	movt	r2, #1
   1140c:	bl	1097c <__printf_chk@plt>
   11410:	ldr	r0, [r4, #144]	; 0x90
   11414:	ldr	r3, [r4, #112]	; 0x70
   11418:	movw	r2, #7972	; 0x1f24
   1141c:	movw	r1, #7500	; 0x1d4c
   11420:	movt	r2, #1
   11424:	str	r0, [sp, #4]
   11428:	movt	r1, #1
   1142c:	str	r2, [sp]
   11430:	mov	r0, #1
   11434:	movw	r2, #7960	; 0x1f18
   11438:	movt	r2, #1
   1143c:	bl	1097c <__printf_chk@plt>
   11440:	add	r3, sp, #8192	; 0x2000
   11444:	ldr	r2, [r3, #468]	; 0x1d4
   11448:	ldr	r3, [r5]
   1144c:	cmp	r2, r3
   11450:	bne	11910 <__assert_fail@plt+0xf34>
   11454:	add	sp, sp, #8640	; 0x21c0
   11458:	add	sp, sp, #28
   1145c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11460:	bl	10964 <__errno_location@plt>
   11464:	ldr	r3, [r0]
   11468:	mov	r4, r0
   1146c:	mov	r0, r8
   11470:	cmp	r3, #2
   11474:	movw	r3, #12428	; 0x308c
   11478:	movt	r3, #2
   1147c:	beq	11574 <__assert_fail@plt+0xb98>
   11480:	mov	r2, #5
   11484:	movw	r1, #7032	; 0x1b78
   11488:	movt	r1, #1
   1148c:	ldr	r7, [r3]
   11490:	bl	108c8 <dcgettext@plt>
   11494:	mov	r8, r0
   11498:	ldr	r0, [r4]
   1149c:	bl	10928 <strerror@plt>
   114a0:	mov	r2, r8
   114a4:	mov	r3, r6
   114a8:	mov	r1, #1
   114ac:	str	r0, [sp]
   114b0:	mov	r0, r7
   114b4:	bl	10988 <__fprintf_chk@plt>
   114b8:	add	r2, sp, #8640	; 0x21c0
   114bc:	movw	r3, #57036	; 0xdecc
   114c0:	add	r2, r2, #24
   114c4:	movt	r3, #65535	; 0xffff
   114c8:	ldr	r0, [r2, r3]
   114cc:	bl	108b0 <free@plt>
   114d0:	b	11440 <__assert_fail@plt+0xa64>
   114d4:	mov	r0, #30
   114d8:	bl	108e0 <sysconf@plt>
   114dc:	cmp	r0, #1
   114e0:	mov	r8, r0
   114e4:	ble	11918 <__assert_fail@plt+0xf3c>
   114e8:	mov	r0, r9
   114ec:	movw	r1, #7996	; 0x1f3c
   114f0:	mov	r2, #5
   114f4:	movt	r1, #1
   114f8:	bl	108c8 <dcgettext@plt>
   114fc:	ldrb	r9, [r4, #4]
   11500:	ldr	sl, [r4]
   11504:	sub	r3, r9, #68	; 0x44
   11508:	mov	fp, r0
   1150c:	cmp	r3, #22
   11510:	ldrls	pc, [pc, r3, lsl #2]
   11514:	b	118d4 <__assert_fail@plt+0xef8>
   11518:			; <UNDEFINED> instruction: 0x000118b8
   1151c:	ldrdeq	r1, [r1], -r4
   11520:	ldrdeq	r1, [r1], -r4
   11524:	ldrdeq	r1, [r1], -r4
   11528:	ldrdeq	r1, [r1], -r4
   1152c:	ldrdeq	r1, [r1], -r4
   11530:	ldrdeq	r1, [r1], -r4
   11534:	ldrdeq	r1, [r1], -r4
   11538:	ldrdeq	r1, [r1], -r4
   1153c:	ldrdeq	r1, [r1], -r4
   11540:	ldrdeq	r1, [r1], -r4
   11544:	ldrdeq	r1, [r1], -r4
   11548:	ldrdeq	r1, [r1], -r4
   1154c:	ldrdeq	r1, [r1], -r4
   11550:	muleq	r1, ip, r8
   11554:	andeq	r1, r1, r0, lsl #17
   11558:	andeq	r1, r1, r4, ror #16
   1155c:	ldrdeq	r1, [r1], -r4
   11560:	ldrdeq	r1, [r1], -r4
   11564:	andeq	r1, r1, r8, asr #16
   11568:	ldrdeq	r1, [r1], -r4
   1156c:	ldrdeq	r1, [r1], -r4
   11570:	andeq	r1, r1, r0, lsr #11
   11574:	mov	r2, #5
   11578:	movw	r1, #6992	; 0x1b50
   1157c:	movt	r1, #1
   11580:	ldr	r4, [r3]
   11584:	bl	108c8 <dcgettext@plt>
   11588:	mov	r3, r6
   1158c:	mov	r1, #1
   11590:	mov	r2, r0
   11594:	mov	r0, r4
   11598:	bl	10988 <__fprintf_chk@plt>
   1159c:	b	114b8 <__assert_fail@plt+0xadc>
   115a0:	movw	r1, #8096	; 0x1fa0
   115a4:	mov	r0, #0
   115a8:	movt	r1, #1
   115ac:	mov	r2, #5
   115b0:	bl	108c8 <dcgettext@plt>
   115b4:	mov	ip, r0
   115b8:	ldr	r2, [r4, #20]
   115bc:	movw	r7, #12436	; 0x3094
   115c0:	movt	r7, #2
   115c4:	movw	r3, #8120	; 0x1fb8
   115c8:	ubfx	r0, r2, #8, #8
   115cc:	str	r0, [sp]
   115d0:	uxtb	r1, r2
   115d4:	movt	r3, #1
   115d8:	orr	r2, r1, r2, lsr #20
   115dc:	str	r2, [sp, #4]
   115e0:	ldr	lr, [r4, #32]
   115e4:	mov	r1, #1
   115e8:	mov	r2, #20
   115ec:	mov	r0, r7
   115f0:	str	ip, [sp, #152]	; 0x98
   115f4:	str	lr, [sp, #156]	; 0x9c
   115f8:	bl	10970 <__sprintf_chk@plt>
   115fc:	ldr	r0, [r4, #132]	; 0x84
   11600:	mov	r3, r9
   11604:	ldr	ip, [sp, #152]	; 0x98
   11608:	mov	r1, fp
   1160c:	ldr	r2, [sp, #156]	; 0x9c
   11610:	str	r0, [sp, #12]
   11614:	mov	r0, #1
   11618:	str	ip, [sp]
   1161c:	str	r2, [sp, #4]
   11620:	mov	r2, sl
   11624:	str	r7, [sp, #8]
   11628:	bl	1097c <__printf_chk@plt>
   1162c:	mov	r2, #5
   11630:	movw	r1, #8128	; 0x1fc0
   11634:	mov	r0, #0
   11638:	movt	r1, #1
   1163c:	bl	108c8 <dcgettext@plt>
   11640:	ldr	lr, [r4, #16]
   11644:	ldr	ip, [r4, #24]
   11648:	mov	r2, r6
   1164c:	ldr	r9, [r4, #12]
   11650:	ldr	r3, [r4, #8]
   11654:	str	ip, [sp, #8]
   11658:	stm	sp, {r9, lr}
   1165c:	mov	r1, r0
   11660:	mov	r0, #1
   11664:	bl	1097c <__printf_chk@plt>
   11668:	mov	r2, #5
   1166c:	movw	r1, #8248	; 0x2038
   11670:	mov	r0, #0
   11674:	movt	r1, #1
   11678:	bl	108c8 <dcgettext@plt>
   1167c:	ldr	lr, [r4, #52]	; 0x34
   11680:	ldr	ip, [r4, #60]	; 0x3c
   11684:	ldr	r3, [r4, #56]	; 0x38
   11688:	ldr	r2, [r4, #48]	; 0x30
   1168c:	str	lr, [sp]
   11690:	str	ip, [sp, #4]
   11694:	mov	r1, r0
   11698:	mov	r0, #1
   1169c:	bl	1097c <__printf_chk@plt>
   116a0:	movw	r1, #8352	; 0x20a0
   116a4:	mov	r0, #0
   116a8:	movt	r1, #1
   116ac:	mov	r2, #5
   116b0:	bl	108c8 <dcgettext@plt>
   116b4:	ldr	r3, [r7, #20]
   116b8:	vldr	s3, [r4, #64]	; 0x40
   116bc:	cmp	r3, #0
   116c0:	mov	r1, r0
   116c4:	ble	11914 <__assert_fail@plt+0xf38>
   116c8:	vmov	s13, r3
   116cc:	vldr	s14, [r4, #68]	; 0x44
   116d0:	vcvt.f32.u32	s4, s14
   116d4:	vldr	s14, [r4, #160]	; 0xa0
   116d8:	mov	r0, #1
   116dc:	add	r6, sp, #368	; 0x170
   116e0:	vcvt.f32.s32	s15, s13
   116e4:	vldr	s13, [r4, #112]	; 0x70
   116e8:	vcvt.f32.u32	s8, s14
   116ec:	vldr	s14, [r4, #120]	; 0x78
   116f0:	vcvt.f32.u32	s6, s13
   116f4:	vldr	s13, [r4, #116]	; 0x74
   116f8:	vcvt.f32.u32	s12, s14
   116fc:	vcvt.f32.u32	s10, s13
   11700:	vldr	s13, [r4, #144]	; 0x90
   11704:	vcvt.f32.u32	s14, s13
   11708:	vcvt.f32.u32	s3, s3
   1170c:	vdiv.f32	s14, s14, s15
   11710:	vdiv.f32	s3, s3, s15
   11714:	vdiv.f32	s4, s4, s15
   11718:	vdiv.f32	s6, s6, s15
   1171c:	vdiv.f32	s8, s8, s15
   11720:	vdiv.f32	s10, s10, s15
   11724:	vdiv.f32	s12, s12, s15
   11728:	vcvt.f64.f32	d7, s14
   1172c:	vcvt.f64.f32	d2, s4
   11730:	vstr	d7, [sp, #40]	; 0x28
   11734:	vcvt.f64.f32	d3, s6
   11738:	vstr	d2, [sp]
   1173c:	vcvt.f64.f32	d4, s8
   11740:	vstr	d3, [sp, #8]
   11744:	vcvt.f64.f32	d5, s10
   11748:	vstr	d4, [sp, #16]
   1174c:	vcvt.f64.f32	d6, s12
   11750:	vstr	d5, [sp, #24]
   11754:	vcvt.f64.f32	d7, s3
   11758:	vstr	d6, [sp, #32]
   1175c:	vmov	r2, r3, d7
   11760:	bl	1097c <__printf_chk@plt>
   11764:	add	r0, sp, #168	; 0xa8
   11768:	ldr	r1, [r4, #72]	; 0x48
   1176c:	bl	10ddc <__assert_fail@plt+0x400>
   11770:	ldr	r1, [r4, #140]	; 0x8c
   11774:	add	r0, sp, #268	; 0x10c
   11778:	mul	r1, r1, r8
   1177c:	bl	10ddc <__assert_fail@plt+0x400>
   11780:	ldr	r1, [r4, #76]	; 0x4c
   11784:	mov	r0, r6
   11788:	bl	10ddc <__assert_fail@plt+0x400>
   1178c:	mov	r2, #5
   11790:	movw	r1, #8496	; 0x2130
   11794:	mov	r0, #0
   11798:	movt	r1, #1
   1179c:	bl	108c8 <dcgettext@plt>
   117a0:	ldr	ip, [r4, #96]	; 0x60
   117a4:	ldr	lr, [r4, #92]	; 0x5c
   117a8:	add	r3, sp, #268	; 0x10c
   117ac:	ldr	r9, [r4, #80]	; 0x50
   117b0:	add	r2, sp, #168	; 0xa8
   117b4:	ldr	r8, [r4, #84]	; 0x54
   117b8:	ldr	r7, [r4, #88]	; 0x58
   117bc:	str	ip, [sp, #20]
   117c0:	str	lr, [sp, #16]
   117c4:	stm	sp, {r6, r9}
   117c8:	str	r8, [sp, #8]
   117cc:	str	r7, [sp, #12]
   117d0:	mov	r1, r0
   117d4:	mov	r0, #1
   117d8:	bl	1097c <__printf_chk@plt>
   117dc:	mov	r2, #5
   117e0:	movw	r1, #8692	; 0x21f4
   117e4:	mov	r0, #0
   117e8:	movt	r1, #1
   117ec:	bl	108c8 <dcgettext@plt>
   117f0:	ldr	r3, [r4, #44]	; 0x2c
   117f4:	ldr	ip, [r4, #124]	; 0x7c
   117f8:	cmp	r3, #5
   117fc:	movwls	r2, #6576	; 0x19b0
   11800:	movwhi	r2, #6924	; 0x1b0c
   11804:	movtls	r2, #1
   11808:	movthi	r2, #1
   1180c:	addls	r3, r2, r3, lsl #2
   11810:	mov	r1, r0
   11814:	ldrls	r2, [r3, #36]	; 0x24
   11818:	cmp	ip, #0
   1181c:	subgt	r0, ip, #20
   11820:	rsble	r0, ip, #1
   11824:	movwgt	ip, #6932	; 0x1b14
   11828:	movwle	ip, #8848	; 0x2290
   1182c:	ldr	r3, [r4, #128]	; 0x80
   11830:	movtgt	ip, #1
   11834:	movtle	ip, #1
   11838:	stm	sp, {r0, ip}
   1183c:	mov	r0, #1
   11840:	bl	1097c <__printf_chk@plt>
   11844:	b	11440 <__assert_fail@plt+0xa64>
   11848:	movw	r1, #8112	; 0x1fb0
   1184c:	mov	r0, #0
   11850:	movt	r1, #1
   11854:	mov	r2, #5
   11858:	bl	108c8 <dcgettext@plt>
   1185c:	mov	ip, r0
   11860:	b	115b8 <__assert_fail@plt+0xbdc>
   11864:	movw	r1, #8104	; 0x1fa8
   11868:	mov	r0, #0
   1186c:	movt	r1, #1
   11870:	mov	r2, #5
   11874:	bl	108c8 <dcgettext@plt>
   11878:	mov	ip, r0
   1187c:	b	115b8 <__assert_fail@plt+0xbdc>
   11880:	movw	r1, #8072	; 0x1f88
   11884:	mov	r0, #0
   11888:	movt	r1, #1
   1188c:	mov	r2, #5
   11890:	bl	108c8 <dcgettext@plt>
   11894:	mov	ip, r0
   11898:	b	115b8 <__assert_fail@plt+0xbdc>
   1189c:	movw	r1, #8064	; 0x1f80
   118a0:	mov	r0, #0
   118a4:	movt	r1, #1
   118a8:	mov	r2, #5
   118ac:	bl	108c8 <dcgettext@plt>
   118b0:	mov	ip, r0
   118b4:	b	115b8 <__assert_fail@plt+0xbdc>
   118b8:	movw	r1, #8084	; 0x1f94
   118bc:	mov	r0, #0
   118c0:	movt	r1, #1
   118c4:	mov	r2, #5
   118c8:	bl	108c8 <dcgettext@plt>
   118cc:	mov	ip, r0
   118d0:	b	115b8 <__assert_fail@plt+0xbdc>
   118d4:	movw	r1, #6924	; 0x1b0c
   118d8:	mov	r0, #0
   118dc:	movt	r1, #1
   118e0:	mov	r2, #5
   118e4:	bl	108c8 <dcgettext@plt>
   118e8:	mov	ip, r0
   118ec:	b	115b8 <__assert_fail@plt+0xbdc>
   118f0:	mov	r2, #5
   118f4:	movw	r1, #6960	; 0x1b30
   118f8:	mov	r0, #0
   118fc:	movt	r1, #1
   11900:	bl	108c8 <dcgettext@plt>
   11904:	bl	108f8 <perror@plt>
   11908:	mov	r0, #1
   1190c:	bl	1094c <exit@plt>
   11910:	bl	108d4 <__stack_chk_fail@plt>
   11914:	bl	109e8 <__assert_fail@plt+0xc>
   11918:	movw	r0, #7984	; 0x1f30
   1191c:	movw	r1, #6912	; 0x1b00
   11920:	movt	r0, #1
   11924:	movt	r1, #1
   11928:	mov	r2, #161	; 0xa1
   1192c:	ldr	r3, [pc]	; 11934 <__assert_fail@plt+0xf58>
   11930:	bl	109dc <__assert_fail@plt>
   11934:	andeq	r1, r1, r0, asr #19
   11938:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1193c:	mov	r7, r0
   11940:	ldr	r6, [pc, #76]	; 11994 <__assert_fail@plt+0xfb8>
   11944:	mov	r8, r1
   11948:	ldr	r5, [pc, #72]	; 11998 <__assert_fail@plt+0xfbc>
   1194c:	mov	r9, r2
   11950:	add	r6, pc, r6
   11954:	bl	10884 <strtol@plt-0x20>
   11958:	add	r5, pc, r5
   1195c:	rsb	r6, r5, r6
   11960:	asrs	r6, r6, #2
   11964:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   11968:	sub	r5, r5, #4
   1196c:	mov	r4, #0
   11970:	add	r4, r4, #1
   11974:	ldr	r3, [r5, #4]!
   11978:	mov	r0, r7
   1197c:	mov	r1, r8
   11980:	mov	r2, r9
   11984:	blx	r3
   11988:	cmp	r4, r6
   1198c:	bne	11970 <__assert_fail@plt+0xf94>
   11990:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11994:	andeq	r1, r1, r8, lsr #11
   11998:	muleq	r1, ip, r5
   1199c:	bx	lr

Disassembly of section .fini:

000119a0 <.fini>:
   119a0:	push	{r3, lr}
   119a4:	pop	{r3, pc}
