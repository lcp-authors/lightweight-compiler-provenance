
centos-preinstalled/sexp-conv:     file format elf32-littlearm


Disassembly of section .init:

00010b50 <_init@@Base>:
   10b50:	push	{r3, lr}
   10b54:	bl	112b0 <__assert_fail@plt+0x608>
   10b58:	pop	{r3, pc}

Disassembly of section .plt:

00010b5c <raise@plt-0x14>:
   10b5c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b60:	ldr	lr, [pc, #4]	; 10b6c <_init@@Base+0x1c>
   10b64:	add	lr, pc, lr
   10b68:	ldr	pc, [lr, #8]!
   10b6c:	muleq	r1, r4, r4

00010b70 <raise@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #77824	; 0x13000
   10b78:	ldr	pc, [ip, #1172]!	; 0x494

00010b7c <strcmp@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #77824	; 0x13000
   10b84:	ldr	pc, [ip, #1164]!	; 0x48c

00010b88 <strtol@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #77824	; 0x13000
   10b90:	ldr	pc, [ip, #1156]!	; 0x484

00010b94 <fflush@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #77824	; 0x13000
   10b9c:	ldr	pc, [ip, #1148]!	; 0x47c

00010ba0 <ferror@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #77824	; 0x13000
   10ba8:	ldr	pc, [ip, #1140]!	; 0x474

00010bac <nettle_buffer_grow@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #77824	; 0x13000
   10bb4:	ldr	pc, [ip, #1132]!	; 0x46c

00010bb8 <_IO_getc@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #77824	; 0x13000
   10bc0:	ldr	pc, [ip, #1124]!	; 0x464

00010bc4 <nettle_buffer_init@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #77824	; 0x13000
   10bcc:	ldr	pc, [ip, #1116]!	; 0x45c

00010bd0 <__stack_chk_fail@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #77824	; 0x13000
   10bd8:	ldr	pc, [ip, #1108]!	; 0x454

00010bdc <_IO_putc@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #77824	; 0x13000
   10be4:	ldr	pc, [ip, #1100]!	; 0x44c

00010be8 <fwrite@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #77824	; 0x13000
   10bf0:	ldr	pc, [ip, #1092]!	; 0x444

00010bf4 <puts@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #77824	; 0x13000
   10bfc:	ldr	pc, [ip, #1084]!	; 0x43c

00010c00 <malloc@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #77824	; 0x13000
   10c08:	ldr	pc, [ip, #1076]!	; 0x434

00010c0c <__libc_start_main@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #77824	; 0x13000
   10c14:	ldr	pc, [ip, #1068]!	; 0x42c

00010c18 <strerror@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #77824	; 0x13000
   10c20:	ldr	pc, [ip, #1060]!	; 0x424

00010c24 <__vfprintf_chk@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #77824	; 0x13000
   10c2c:	ldr	pc, [ip, #1052]!	; 0x41c

00010c30 <__gmon_start__@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #77824	; 0x13000
   10c38:	ldr	pc, [ip, #1044]!	; 0x414

00010c3c <getopt_long@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #77824	; 0x13000
   10c44:	ldr	pc, [ip, #1036]!	; 0x40c

00010c48 <exit@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #77824	; 0x13000
   10c50:	ldr	pc, [ip, #1028]!	; 0x404

00010c54 <fcntl@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #77824	; 0x13000
   10c5c:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c60 <__errno_location@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #77824	; 0x13000
   10c68:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c6c <memset@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #77824	; 0x13000
   10c74:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c78 <__printf_chk@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #77824	; 0x13000
   10c80:	ldr	pc, [ip, #996]!	; 0x3e4

00010c84 <nettle_buffer_clear@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #77824	; 0x13000
   10c8c:	ldr	pc, [ip, #988]!	; 0x3dc

00010c90 <nettle_buffer_reset@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #77824	; 0x13000
   10c98:	ldr	pc, [ip, #980]!	; 0x3d4

00010c9c <abort@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #77824	; 0x13000
   10ca4:	ldr	pc, [ip, #972]!	; 0x3cc

00010ca8 <__assert_fail@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #77824	; 0x13000
   10cb0:	ldr	pc, [ip, #964]!	; 0x3c4

Disassembly of section .text:

00010cb4 <.text>:
   10cb4:	push	{r3, lr}
   10cb8:	mov	r2, #119	; 0x77
   10cbc:	ldr	r3, [pc, #24]	; 10cdc <__assert_fail@plt+0x34>
   10cc0:	ldr	r0, [pc, #24]	; 10ce0 <__assert_fail@plt+0x38>
   10cc4:	ldr	r1, [pc, #24]	; 10ce4 <__assert_fail@plt+0x3c>
   10cc8:	add	r3, pc, r3
   10ccc:	add	r0, pc, r0
   10cd0:	add	r3, r3, #24
   10cd4:	add	r1, pc, r1
   10cd8:	bl	10ca8 <__assert_fail@plt>
   10cdc:	andeq	r2, r0, r4, asr r8
   10ce0:	andeq	r2, r0, r4, lsl r9
   10ce4:	andeq	r2, r0, ip, ror #17
   10ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cec:	sub	sp, sp, #228	; 0xe4
   10cf0:	ldr	r8, [pc, #1288]	; 11200 <__assert_fail@plt+0x558>
   10cf4:	mov	r9, r1
   10cf8:	ldr	r2, [pc, #1284]	; 11204 <__assert_fail@plt+0x55c>
   10cfc:	add	r5, sp, #128	; 0x80
   10d00:	ldr	r3, [pc, #1280]	; 11208 <__assert_fail@plt+0x560>
   10d04:	add	r8, pc, r8
   10d08:	add	r2, pc, r2
   10d0c:	str	r2, [sp, #36]	; 0x24
   10d10:	ldr	r2, [pc, #1268]	; 1120c <__assert_fail@plt+0x564>
   10d14:	mov	r7, r0
   10d18:	ldr	r1, [pc, #1264]	; 11210 <__assert_fail@plt+0x568>
   10d1c:	mov	sl, #1
   10d20:	add	r2, pc, r2
   10d24:	str	r2, [sp, #32]
   10d28:	ldr	r3, [r8, r3]
   10d2c:	add	r1, pc, r1
   10d30:	str	r1, [sp, #48]	; 0x30
   10d34:	mov	r1, #72	; 0x48
   10d38:	str	r1, [sp, #16]
   10d3c:	mov	r4, #0
   10d40:	str	r3, [sp, #12]
   10d44:	ldr	r2, [sp, #12]
   10d48:	ldr	r3, [pc, #1220]	; 11214 <__assert_fail@plt+0x56c>
   10d4c:	ldr	r1, [pc, #1220]	; 11218 <__assert_fail@plt+0x570>
   10d50:	add	r3, pc, r3
   10d54:	str	r3, [sp, #44]	; 0x2c
   10d58:	ldr	r3, [r2]
   10d5c:	add	r1, pc, r1
   10d60:	ldr	r2, [pc, #1204]	; 1121c <__assert_fail@plt+0x574>
   10d64:	str	r4, [sp, #20]
   10d68:	add	r2, pc, r2
   10d6c:	str	r4, [sp, #24]
   10d70:	str	r4, [sp, #28]
   10d74:	str	r2, [sp, #52]	; 0x34
   10d78:	str	r1, [sp, #40]	; 0x28
   10d7c:	str	r3, [sp, #220]	; 0xdc
   10d80:	ldr	r2, [pc, #1176]	; 11220 <__assert_fail@plt+0x578>
   10d84:	mov	r0, r7
   10d88:	ldr	r3, [pc, #1172]	; 11224 <__assert_fail@plt+0x57c>
   10d8c:	mov	r1, r9
   10d90:	str	r5, [sp]
   10d94:	add	r2, pc, r2
   10d98:	add	r3, pc, r3
   10d9c:	mov	r6, #0
   10da0:	str	r6, [sp, #128]	; 0x80
   10da4:	bl	10c3c <getopt_long@plt>
   10da8:	cmp	r0, #119	; 0x77
   10dac:	beq	110a4 <__assert_fail@plt+0x3fc>
   10db0:	bgt	10e4c <__assert_fail@plt+0x1a4>
   10db4:	cmp	r0, #63	; 0x3f
   10db8:	beq	110ec <__assert_fail@plt+0x444>
   10dbc:	ble	10ed4 <__assert_fail@plt+0x22c>
   10dc0:	cmp	r0, #86	; 0x56
   10dc4:	beq	11044 <__assert_fail@plt+0x39c>
   10dc8:	cmp	r0, #115	; 0x73
   10dcc:	bne	11108 <__assert_fail@plt+0x460>
   10dd0:	cmp	r4, #0
   10dd4:	beq	10de0 <__assert_fail@plt+0x138>
   10dd8:	ldr	r0, [sp, #40]	; 0x28
   10ddc:	bl	12bf8 <__assert_fail@plt+0x1f50>
   10de0:	ldr	r3, [pc, #1088]	; 11228 <__assert_fail@plt+0x580>
   10de4:	ldr	r1, [sp, #32]
   10de8:	ldr	r3, [r8, r3]
   10dec:	ldr	r6, [r3]
   10df0:	mov	r0, r6
   10df4:	bl	10b7c <strcmp@plt>
   10df8:	cmp	r0, #0
   10dfc:	beq	11118 <__assert_fail@plt+0x470>
   10e00:	mov	r0, r6
   10e04:	ldr	r1, [sp, #44]	; 0x2c
   10e08:	bl	10b7c <strcmp@plt>
   10e0c:	cmp	r0, #0
   10e10:	beq	111a4 <__assert_fail@plt+0x4fc>
   10e14:	mov	r0, r6
   10e18:	ldr	r1, [sp, #48]	; 0x30
   10e1c:	bl	10b7c <strcmp@plt>
   10e20:	cmp	r0, #0
   10e24:	beq	1109c <__assert_fail@plt+0x3f4>
   10e28:	mov	r0, r6
   10e2c:	ldr	r1, [sp, #52]	; 0x34
   10e30:	bl	10b7c <strcmp@plt>
   10e34:	cmp	r0, #0
   10e38:	bne	111f4 <__assert_fail@plt+0x54c>
   10e3c:	mov	r1, #1
   10e40:	str	r1, [sp, #28]
   10e44:	mov	sl, r1
   10e48:	b	10d80 <__assert_fail@plt+0xd8>
   10e4c:	movw	r3, #301	; 0x12d
   10e50:	cmp	r0, r3
   10e54:	beq	11058 <__assert_fail@plt+0x3b0>
   10e58:	ble	10fc4 <__assert_fail@plt+0x31c>
   10e5c:	movw	r3, #302	; 0x12e
   10e60:	cmp	r0, r3
   10e64:	beq	1110c <__assert_fail@plt+0x464>
   10e68:	add	r3, r3, #1
   10e6c:	cmp	r0, r3
   10e70:	bne	11108 <__assert_fail@plt+0x460>
   10e74:	ldr	r1, [pc, #944]	; 1122c <__assert_fail@plt+0x584>
   10e78:	mov	r0, #1
   10e7c:	ldr	r7, [pc, #940]	; 11230 <__assert_fail@plt+0x588>
   10e80:	add	r1, pc, r1
   10e84:	ldr	r5, [pc, #936]	; 11234 <__assert_fail@plt+0x58c>
   10e88:	bl	10c78 <__printf_chk@plt>
   10e8c:	ldr	r3, [pc, #932]	; 11238 <__assert_fail@plt+0x590>
   10e90:	add	r7, pc, r7
   10e94:	add	r5, pc, r5
   10e98:	ldr	r4, [r8, r3]
   10e9c:	ldr	r8, [pc, #920]	; 1123c <__assert_fail@plt+0x594>
   10ea0:	add	r8, pc, r8
   10ea4:	add	r6, r6, #1
   10ea8:	ldr	r2, [r4]
   10eac:	mov	r0, #1
   10eb0:	mov	r1, r7
   10eb4:	bl	10c78 <__printf_chk@plt>
   10eb8:	ldr	r4, [r5, r6, lsl #2]
   10ebc:	cmp	r4, #0
   10ec0:	beq	110f4 <__assert_fail@plt+0x44c>
   10ec4:	mov	r1, r8
   10ec8:	mov	r0, #1
   10ecc:	bl	10c78 <__printf_chk@plt>
   10ed0:	b	10ea4 <__assert_fail@plt+0x1fc>
   10ed4:	cmn	r0, #1
   10ed8:	bne	11108 <__assert_fail@plt+0x460>
   10edc:	ldr	r3, [pc, #860]	; 11240 <__assert_fail@plt+0x598>
   10ee0:	ldr	r3, [r8, r3]
   10ee4:	ldr	r3, [r3]
   10ee8:	cmp	r7, r3
   10eec:	bne	111dc <__assert_fail@plt+0x534>
   10ef0:	ldr	r3, [pc, #844]	; 11244 <__assert_fail@plt+0x59c>
   10ef4:	add	fp, sp, #92	; 0x5c
   10ef8:	add	r9, sp, #60	; 0x3c
   10efc:	add	r7, sp, #172	; 0xac
   10f00:	mov	r0, fp
   10f04:	ldr	r3, [r8, r3]
   10f08:	ldr	r1, [r3]
   10f0c:	bl	11718 <__assert_fail@plt+0xa70>
   10f10:	mov	r1, fp
   10f14:	mov	r2, #1
   10f18:	mov	r0, r9
   10f1c:	bl	12950 <__assert_fail@plt+0x1ca8>
   10f20:	mov	r0, r5
   10f24:	bl	12914 <__assert_fail@plt+0x1c6c>
   10f28:	ldr	r1, [pc, #792]	; 11248 <__assert_fail@plt+0x5a0>
   10f2c:	ldr	r2, [sp, #16]
   10f30:	mov	r0, r7
   10f34:	ldr	r3, [sp, #28]
   10f38:	ldr	r1, [r8, r1]
   10f3c:	ldr	r1, [r1]
   10f40:	bl	121e8 <__assert_fail@plt+0x1540>
   10f44:	ldr	r2, [sp, #20]
   10f48:	cmp	r2, #0
   10f4c:	bne	11120 <__assert_fail@plt+0x478>
   10f50:	cmp	r4, #0
   10f54:	beq	10f70 <__assert_fail@plt+0x2c8>
   10f58:	ldr	r0, [r4, #4]
   10f5c:	bl	12c70 <__assert_fail@plt+0x1fc8>
   10f60:	mov	r1, r4
   10f64:	mov	r2, r0
   10f68:	mov	r0, r7
   10f6c:	bl	1220c <__assert_fail@plt+0x1564>
   10f70:	mov	r0, fp
   10f74:	bl	11728 <__assert_fail@plt+0xa80>
   10f78:	mov	r0, r9
   10f7c:	mov	r1, r5
   10f80:	bl	12968 <__assert_fail@plt+0x1cc0>
   10f84:	ldr	r3, [sp, #128]	; 0x80
   10f88:	cmp	r3, #5
   10f8c:	movne	r6, #0
   10f90:	ldrne	r8, [sp, #24]
   10f94:	bne	1100c <__assert_fail@plt+0x364>
   10f98:	ldr	r3, [sp, #24]
   10f9c:	cmp	r3, #0
   10fa0:	bne	111d0 <__assert_fail@plt+0x528>
   10fa4:	ldr	r1, [sp, #12]
   10fa8:	mov	r0, #0
   10fac:	ldr	r2, [sp, #220]	; 0xdc
   10fb0:	ldr	r3, [r1]
   10fb4:	cmp	r2, r3
   10fb8:	bne	111cc <__assert_fail@plt+0x524>
   10fbc:	add	sp, sp, #228	; 0xe4
   10fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fc4:	cmp	r0, #300	; 0x12c
   10fc8:	bne	11108 <__assert_fail@plt+0x460>
   10fcc:	mov	r2, #1
   10fd0:	str	r2, [sp, #24]
   10fd4:	b	10d80 <__assert_fail@plt+0xd8>
   10fd8:	mov	r0, r7
   10fdc:	bl	12830 <__assert_fail@plt+0x1b88>
   10fe0:	mov	r0, r7
   10fe4:	mov	r1, #0
   10fe8:	bl	1222c <__assert_fail@plt+0x1584>
   10fec:	mov	r0, r9
   10ff0:	mov	r1, r5
   10ff4:	bl	12968 <__assert_fail@plt+0x1cc0>
   10ff8:	cmp	r8, #0
   10ffc:	bne	11170 <__assert_fail@plt+0x4c8>
   11000:	ldr	r2, [sp, #128]	; 0x80
   11004:	cmp	r2, #5
   11008:	beq	11170 <__assert_fail@plt+0x4c8>
   1100c:	str	r6, [sp]
   11010:	mov	r0, r9
   11014:	mov	r1, r5
   11018:	mov	r2, r7
   1101c:	mov	r3, sl
   11020:	bl	113a8 <__assert_fail@plt+0x700>
   11024:	cmp	r4, #0
   11028:	bne	10fd8 <__assert_fail@plt+0x330>
   1102c:	cmp	sl, #0
   11030:	beq	10fec <__assert_fail@plt+0x344>
   11034:	mov	r0, r7
   11038:	mov	r1, r4
   1103c:	bl	1222c <__assert_fail@plt+0x1584>
   11040:	b	10fec <__assert_fail@plt+0x344>
   11044:	ldr	r0, [pc, #512]	; 1124c <__assert_fail@plt+0x5a4>
   11048:	add	r0, pc, r0
   1104c:	bl	10bf4 <puts@plt>
   11050:	mov	r0, r6
   11054:	bl	10c48 <exit@plt>
   11058:	ldr	r3, [pc, #456]	; 11228 <__assert_fail@plt+0x580>
   1105c:	ldr	r3, [r8, r3]
   11060:	ldr	fp, [r3]
   11064:	cmp	fp, #0
   11068:	beq	111ac <__assert_fail@plt+0x504>
   1106c:	ldr	r3, [pc, #452]	; 11238 <__assert_fail@plt+0x590>
   11070:	ldr	r6, [sp, #36]	; 0x24
   11074:	ldr	r4, [r8, r3]
   11078:	b	11088 <__assert_fail@plt+0x3e0>
   1107c:	ldr	r4, [r6, #4]!
   11080:	cmp	r4, #0
   11084:	beq	111bc <__assert_fail@plt+0x514>
   11088:	mov	r0, fp
   1108c:	ldr	r1, [r4]
   11090:	bl	10b7c <strcmp@plt>
   11094:	cmp	r0, #0
   11098:	bne	1107c <__assert_fail@plt+0x3d4>
   1109c:	mov	sl, r0
   110a0:	b	10d80 <__assert_fail@plt+0xd8>
   110a4:	ldr	r3, [pc, #380]	; 11228 <__assert_fail@plt+0x580>
   110a8:	mov	r2, r6
   110ac:	add	r1, sp, #172	; 0xac
   110b0:	ldr	r6, [r8, r3]
   110b4:	ldr	r0, [r6]
   110b8:	bl	10b88 <strtol@plt>
   110bc:	ldr	r1, [r6]
   110c0:	ldrb	r3, [r1]
   110c4:	cmp	r3, #0
   110c8:	beq	111e8 <__assert_fail@plt+0x540>
   110cc:	ldr	r3, [sp, #172]	; 0xac
   110d0:	ldrb	r3, [r3]
   110d4:	cmp	r3, #0
   110d8:	bne	111e8 <__assert_fail@plt+0x540>
   110dc:	cmp	r0, #0
   110e0:	blt	111e8 <__assert_fail@plt+0x540>
   110e4:	str	r0, [sp, #16]
   110e8:	b	10d80 <__assert_fail@plt+0xd8>
   110ec:	mov	r0, #1
   110f0:	bl	10c48 <exit@plt>
   110f4:	ldr	r0, [pc, #340]	; 11250 <__assert_fail@plt+0x5a8>
   110f8:	add	r0, pc, r0
   110fc:	bl	10bf4 <puts@plt>
   11100:	mov	r0, r4
   11104:	bl	10c48 <exit@plt>
   11108:	bl	10c9c <abort@plt>
   1110c:	mov	r3, #1
   11110:	str	r3, [sp, #20]
   11114:	b	10d80 <__assert_fail@plt+0xd8>
   11118:	mov	sl, #1
   1111c:	b	10d80 <__assert_fail@plt+0xd8>
   11120:	mov	r1, r6
   11124:	add	r6, sp, #76	; 0x4c
   11128:	mov	r2, #16
   1112c:	mov	r0, r6
   11130:	bl	10c6c <memset@plt>
   11134:	mov	r3, #1
   11138:	mov	r2, r6
   1113c:	mov	r0, r3
   11140:	mov	r1, #7
   11144:	strh	r3, [sp, #76]	; 0x4c
   11148:	bl	10c54 <fcntl@plt>
   1114c:	cmn	r0, #1
   11150:	bne	10f50 <__assert_fail@plt+0x2a8>
   11154:	bl	10c60 <__errno_location@plt>
   11158:	ldr	r0, [r0]
   1115c:	bl	10c18 <strerror@plt>
   11160:	mov	r1, r0
   11164:	ldr	r0, [pc, #232]	; 11254 <__assert_fail@plt+0x5ac>
   11168:	add	r0, pc, r0
   1116c:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11170:	mov	r0, r5
   11174:	bl	12934 <__assert_fail@plt+0x1c8c>
   11178:	ldr	r0, [sp, #172]	; 0xac
   1117c:	bl	10b94 <fflush@plt>
   11180:	cmp	r0, #0
   11184:	bge	10fa4 <__assert_fail@plt+0x2fc>
   11188:	bl	10c60 <__errno_location@plt>
   1118c:	ldr	r0, [r0]
   11190:	bl	10c18 <strerror@plt>
   11194:	mov	r1, r0
   11198:	ldr	r0, [pc, #184]	; 11258 <__assert_fail@plt+0x5b0>
   1119c:	add	r0, pc, r0
   111a0:	bl	12b9c <__assert_fail@plt+0x1ef4>
   111a4:	mov	sl, #2
   111a8:	b	10d80 <__assert_fail@plt+0xd8>
   111ac:	ldr	r3, [pc, #168]	; 1125c <__assert_fail@plt+0x5b4>
   111b0:	mov	sl, fp
   111b4:	ldr	r4, [r8, r3]
   111b8:	b	10d80 <__assert_fail@plt+0xd8>
   111bc:	ldr	r0, [pc, #156]	; 11260 <__assert_fail@plt+0x5b8>
   111c0:	mov	r1, fp
   111c4:	add	r0, pc, r0
   111c8:	bl	12b9c <__assert_fail@plt+0x1ef4>
   111cc:	bl	10bd0 <__stack_chk_fail@plt>
   111d0:	ldr	r0, [pc, #140]	; 11264 <__assert_fail@plt+0x5bc>
   111d4:	add	r0, pc, r0
   111d8:	bl	12b9c <__assert_fail@plt+0x1ef4>
   111dc:	ldr	r0, [pc, #132]	; 11268 <__assert_fail@plt+0x5c0>
   111e0:	add	r0, pc, r0
   111e4:	bl	12b9c <__assert_fail@plt+0x1ef4>
   111e8:	ldr	r0, [pc, #124]	; 1126c <__assert_fail@plt+0x5c4>
   111ec:	add	r0, pc, r0
   111f0:	bl	12b9c <__assert_fail@plt+0x1ef4>
   111f4:	ldr	r0, [pc, #116]	; 11270 <__assert_fail@plt+0x5c8>
   111f8:	add	r0, pc, r0
   111fc:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11200:	strdeq	r3, [r1], -r4
   11204:	ldrdeq	r3, [r1], -r8
   11208:	andeq	r0, r0, r8, ror r0
   1120c:	andeq	r2, r0, r4, lsl r3
   11210:	andeq	r2, r0, r4, lsl r3
   11214:	strdeq	r2, [r0], -r4
   11218:	muleq	r0, ip, r2
   1121c:	andeq	r2, r0, r4, ror #5
   11220:	andeq	r2, r0, r0, lsl #4
   11224:	strheq	r3, [r1], -r8
   11228:	andeq	r0, r0, r0, lsr #1
   1122c:	andeq	r2, r0, r4, lsr r2
   11230:			; <UNDEFINED> instruction: 0x000023b0
   11234:	andeq	r3, r1, ip, asr #32
   11238:	andeq	r0, r0, r4, lsl #1
   1123c:	muleq	r0, ip, r3
   11240:	andeq	r0, r0, ip, ror r0
   11244:	muleq	r0, r8, r0
   11248:	muleq	r0, ip, r0
   1124c:	andeq	r2, r0, ip, lsl r4
   11250:	andeq	r2, r0, ip, asr #2
   11254:	andeq	r2, r0, r8, lsl r3
   11258:	andeq	r2, r0, r8, lsr #6
   1125c:	andeq	r0, r0, r4, lsr #1
   11260:	andeq	r1, r0, r8, asr #29
   11264:	andeq	r2, r0, ip, asr #5
   11268:			; <UNDEFINED> instruction: 0x00001dbc
   1126c:	andeq	r1, r0, ip, ror #27
   11270:	andeq	r1, r0, r8, asr lr
   11274:	mov	fp, #0
   11278:	mov	lr, #0
   1127c:	pop	{r1}		; (ldr r1, [sp], #4)
   11280:	mov	r2, sp
   11284:	push	{r2}		; (str r2, [sp, #-4]!)
   11288:	push	{r0}		; (str r0, [sp, #-4]!)
   1128c:	ldr	ip, [pc, #16]	; 112a4 <__assert_fail@plt+0x5fc>
   11290:	push	{ip}		; (str ip, [sp, #-4]!)
   11294:	ldr	r0, [pc, #12]	; 112a8 <__assert_fail@plt+0x600>
   11298:	ldr	r3, [pc, #12]	; 112ac <__assert_fail@plt+0x604>
   1129c:	bl	10c0c <__libc_start_main@plt>
   112a0:	bl	10c9c <abort@plt>
   112a4:	andeq	r2, r1, r8, lsr pc
   112a8:	andeq	r0, r1, r8, ror #25
   112ac:	ldrdeq	r2, [r1], -r4
   112b0:	ldr	r3, [pc, #20]	; 112cc <__assert_fail@plt+0x624>
   112b4:	ldr	r2, [pc, #20]	; 112d0 <__assert_fail@plt+0x628>
   112b8:	add	r3, pc, r3
   112bc:	ldr	r2, [r3, r2]
   112c0:	cmp	r2, #0
   112c4:	bxeq	lr
   112c8:	b	10c30 <__gmon_start__@plt>
   112cc:	andeq	r2, r1, r0, asr #26
   112d0:	muleq	r0, r0, r0
   112d4:	push	{r3, lr}
   112d8:	movw	r0, #16556	; 0x40ac
   112dc:	ldr	r3, [pc, #36]	; 11308 <__assert_fail@plt+0x660>
   112e0:	movt	r0, #2
   112e4:	rsb	r3, r0, r3
   112e8:	cmp	r3, #6
   112ec:	popls	{r3, pc}
   112f0:	movw	r3, #0
   112f4:	movt	r3, #0
   112f8:	cmp	r3, #0
   112fc:	popeq	{r3, pc}
   11300:	blx	r3
   11304:	pop	{r3, pc}
   11308:	andeq	r4, r2, pc, lsr #1
   1130c:	push	{r3, lr}
   11310:	movw	r0, #16556	; 0x40ac
   11314:	movw	r3, #16556	; 0x40ac
   11318:	movt	r0, #2
   1131c:	movt	r3, #2
   11320:	rsb	r3, r0, r3
   11324:	asr	r3, r3, #2
   11328:	add	r3, r3, r3, lsr #31
   1132c:	asrs	r1, r3, #1
   11330:	popeq	{r3, pc}
   11334:	movw	r2, #0
   11338:	movt	r2, #0
   1133c:	cmp	r2, #0
   11340:	popeq	{r3, pc}
   11344:	blx	r2
   11348:	pop	{r3, pc}
   1134c:	push	{r4, lr}
   11350:	movw	r4, #16640	; 0x4100
   11354:	movt	r4, #2
   11358:	ldrb	r3, [r4]
   1135c:	cmp	r3, #0
   11360:	popne	{r4, pc}
   11364:	bl	112d4 <__assert_fail@plt+0x62c>
   11368:	mov	r3, #1
   1136c:	strb	r3, [r4]
   11370:	pop	{r4, pc}
   11374:	movw	r0, #15956	; 0x3e54
   11378:	movt	r0, #2
   1137c:	push	{r3, lr}
   11380:	ldr	r3, [r0]
   11384:	cmp	r3, #0
   11388:	beq	113a0 <__assert_fail@plt+0x6f8>
   1138c:	movw	r3, #0
   11390:	movt	r3, #0
   11394:	cmp	r3, #0
   11398:	beq	113a0 <__assert_fail@plt+0x6f8>
   1139c:	blx	r3
   113a0:	pop	{r3, lr}
   113a4:	b	1130c <__assert_fail@plt+0x664>
   113a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   113ac:	cmp	r3, #2
   113b0:	sub	sp, sp, #12
   113b4:	ldr	r8, [pc, #488]	; 115a4 <__assert_fail@plt+0x8fc>
   113b8:	mov	r5, r3
   113bc:	mov	r7, r0
   113c0:	mov	r4, r1
   113c4:	mov	r6, r2
   113c8:	add	r8, pc, r8
   113cc:	ldr	r9, [sp, #40]	; 0x28
   113d0:	beq	11538 <__assert_fail@plt+0x890>
   113d4:	ldr	r3, [r1]
   113d8:	cmp	r3, #9
   113dc:	addls	pc, pc, r3, lsl #2
   113e0:	b	114f8 <__assert_fail@plt+0x850>
   113e4:	b	11434 <__assert_fail@plt+0x78c>
   113e8:	b	1140c <__assert_fail@plt+0x764>
   113ec:	b	11458 <__assert_fail@plt+0x7b0>
   113f0:	b	11468 <__assert_fail@plt+0x7c0>
   113f4:	b	114e0 <__assert_fail@plt+0x838>
   113f8:	b	114ec <__assert_fail@plt+0x844>
   113fc:	b	114f8 <__assert_fail@plt+0x850>
   11400:	b	114f8 <__assert_fail@plt+0x850>
   11404:	b	114f8 <__assert_fail@plt+0x850>
   11408:	b	1144c <__assert_fail@plt+0x7a4>
   1140c:	mov	r0, r2
   11410:	mov	r1, #91	; 0x5b
   11414:	bl	12298 <__assert_fail@plt+0x15f0>
   11418:	mov	r0, r6
   1141c:	mov	r1, r5
   11420:	add	r2, r4, #4
   11424:	bl	12540 <__assert_fail@plt+0x1898>
   11428:	mov	r0, r6
   1142c:	mov	r1, #93	; 0x5d
   11430:	bl	12298 <__assert_fail@plt+0x15f0>
   11434:	mov	r0, r6
   11438:	mov	r1, r5
   1143c:	add	r2, r4, #24
   11440:	add	sp, sp, #12
   11444:	pop	{r4, r5, r6, r7, r8, r9, lr}
   11448:	b	12540 <__assert_fail@plt+0x1898>
   1144c:	ldr	r0, [pc, #340]	; 115a8 <__assert_fail@plt+0x900>
   11450:	add	r0, pc, r0
   11454:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11458:	cmp	r5, #1
   1145c:	beq	11580 <__assert_fail@plt+0x8d8>
   11460:	add	sp, sp, #12
   11464:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11468:	mov	r0, r2
   1146c:	mov	r1, #40	; 0x28
   11470:	bl	12298 <__assert_fail@plt+0x15f0>
   11474:	mov	r8, #0
   11478:	b	11494 <__assert_fail@plt+0x7ec>
   1147c:	str	r9, [sp]
   11480:	mov	r0, r7
   11484:	mov	r1, r4
   11488:	mov	r2, r6
   1148c:	mov	r3, r5
   11490:	bl	113a8 <__assert_fail@plt+0x700>
   11494:	mov	r0, r7
   11498:	mov	r1, r4
   1149c:	bl	12968 <__assert_fail@plt+0x1cc0>
   114a0:	ldr	r3, [r4]
   114a4:	cmp	r3, #4
   114a8:	beq	114fc <__assert_fail@plt+0x854>
   114ac:	cmp	r5, #1
   114b0:	addne	r8, r8, #1
   114b4:	bne	1147c <__assert_fail@plt+0x7d4>
   114b8:	cmp	r8, #0
   114bc:	beq	11524 <__assert_fail@plt+0x87c>
   114c0:	cmp	r8, #1
   114c4:	bne	11510 <__assert_fail@plt+0x868>
   114c8:	mov	r0, r6
   114cc:	mov	r1, #32
   114d0:	bl	12298 <__assert_fail@plt+0x15f0>
   114d4:	mov	r8, #2
   114d8:	ldr	r9, [r6, #40]	; 0x28
   114dc:	b	1147c <__assert_fail@plt+0x7d4>
   114e0:	ldr	r0, [pc, #196]	; 115ac <__assert_fail@plt+0x904>
   114e4:	add	r0, pc, r0
   114e8:	bl	12b9c <__assert_fail@plt+0x1ef4>
   114ec:	ldr	r0, [pc, #188]	; 115b0 <__assert_fail@plt+0x908>
   114f0:	add	r0, pc, r0
   114f4:	bl	12b9c <__assert_fail@plt+0x1ef4>
   114f8:	bl	10c9c <abort@plt>
   114fc:	mov	r0, r6
   11500:	mov	r1, #41	; 0x29
   11504:	add	sp, sp, #12
   11508:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1150c:	b	12298 <__assert_fail@plt+0x15f0>
   11510:	mov	r0, r6
   11514:	mov	r1, r9
   11518:	add	r8, r8, #1
   1151c:	bl	1222c <__assert_fail@plt+0x1584>
   11520:	b	1147c <__assert_fail@plt+0x7d4>
   11524:	cmp	r3, #2
   11528:	movne	r8, r5
   1152c:	moveq	r8, r3
   11530:	ldreq	r9, [r6, #40]	; 0x28
   11534:	b	1147c <__assert_fail@plt+0x7d4>
   11538:	mov	r0, r2
   1153c:	mov	r1, #123	; 0x7b
   11540:	bl	12298 <__assert_fail@plt+0x15f0>
   11544:	ldr	r3, [pc, #104]	; 115b4 <__assert_fail@plt+0x90c>
   11548:	mov	r0, r6
   1154c:	ldr	r1, [r8, r3]
   11550:	bl	123fc <__assert_fail@plt+0x1754>
   11554:	mov	r3, #0
   11558:	mov	r1, r4
   1155c:	mov	r0, r7
   11560:	str	r3, [sp]
   11564:	mov	r2, r6
   11568:	bl	113a8 <__assert_fail@plt+0x700>
   1156c:	mov	r0, r6
   11570:	bl	1245c <__assert_fail@plt+0x17b4>
   11574:	mov	r0, r6
   11578:	mov	r1, #125	; 0x7d
   1157c:	b	11504 <__assert_fail@plt+0x85c>
   11580:	mov	r0, r2
   11584:	ldr	r1, [r1, #40]	; 0x28
   11588:	ldr	r2, [r4, #24]
   1158c:	bl	123cc <__assert_fail@plt+0x1724>
   11590:	mov	r0, r6
   11594:	mov	r1, r9
   11598:	add	sp, sp, #12
   1159c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   115a0:	b	12280 <__assert_fail@plt+0x15d8>
   115a4:	andeq	r2, r1, r0, lsr ip
   115a8:	andeq	r1, r0, r8, lsr #22
   115ac:	andeq	r1, r0, r0, ror #20
   115b0:	andeq	r1, r0, ip, ror #20
   115b4:	andeq	r0, r0, ip, lsl #1
   115b8:	push	{r4, lr}
   115bc:	mov	r4, r0
   115c0:	ldr	r0, [r0]
   115c4:	bl	10bb8 <_IO_getc@plt>
   115c8:	cmp	r0, #0
   115cc:	strbge	r0, [r4, #8]
   115d0:	movge	r3, #0
   115d4:	strge	r3, [r4, #4]
   115d8:	popge	{r4, pc}
   115dc:	ldr	r0, [r4]
   115e0:	bl	10ba0 <ferror@plt>
   115e4:	cmp	r0, #0
   115e8:	moveq	r3, #1
   115ec:	streq	r3, [r4, #4]
   115f0:	popeq	{r4, pc}
   115f4:	bl	10c60 <__errno_location@plt>
   115f8:	ldr	r0, [r0]
   115fc:	bl	10c18 <strerror@plt>
   11600:	mov	r1, r0
   11604:	ldr	r0, [pc, #4]	; 11610 <__assert_fail@plt+0x968>
   11608:	add	r0, pc, r0
   1160c:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11610:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   11614:	ldr	r3, [r0, #12]
   11618:	push	{r4, lr}
   1161c:	cmp	r3, #0
   11620:	mov	r4, r0
   11624:	beq	11650 <__assert_fail@plt+0x9a8>
   11628:	ldr	r3, [r3, #44]	; 0x2c
   1162c:	add	r0, r0, #16
   11630:	blx	r3
   11634:	cmp	r0, #0
   11638:	movne	r3, #0
   1163c:	strne	r3, [r4, #12]
   11640:	popne	{r4, pc}
   11644:	ldr	r0, [pc, #36]	; 11670 <__assert_fail@plt+0x9c8>
   11648:	add	r0, pc, r0
   1164c:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11650:	ldr	r0, [pc, #28]	; 11674 <__assert_fail@plt+0x9cc>
   11654:	mov	r2, #129	; 0x81
   11658:	ldr	r1, [pc, #24]	; 11678 <__assert_fail@plt+0x9d0>
   1165c:	ldr	r3, [pc, #24]	; 1167c <__assert_fail@plt+0x9d4>
   11660:	add	r0, pc, r0
   11664:	add	r1, pc, r1
   11668:	add	r3, pc, r3
   1166c:	bl	10ca8 <__assert_fail@plt>
   11670:	andeq	r1, r0, r0, lsl #31
   11674:	andeq	r1, r0, r0, asr pc
   11678:	andeq	r1, r0, ip, asr pc
   1167c:			; <UNDEFINED> instruction: 0x00001eb4
   11680:	cmp	r0, #0
   11684:	push	{r3, r4, r5, lr}
   11688:	mov	r5, r1
   1168c:	mov	r4, r2
   11690:	bne	116d8 <__assert_fail@plt+0xa30>
   11694:	ldr	r3, [r2, #16]
   11698:	ldr	r2, [r2, #4]
   1169c:	cmp	r3, r2
   116a0:	bcs	116bc <__assert_fail@plt+0xa14>
   116a4:	add	r1, r3, #1
   116a8:	ldr	r2, [r4]
   116ac:	str	r1, [r4, #16]
   116b0:	ldrb	r1, [r5]
   116b4:	strb	r1, [r2, r3]
   116b8:	pop	{r3, r4, r5, pc}
   116bc:	mov	r0, r4
   116c0:	mov	r1, #1
   116c4:	bl	10bac <nettle_buffer_grow@plt>
   116c8:	cmp	r0, #0
   116cc:	beq	116fc <__assert_fail@plt+0xa54>
   116d0:	ldr	r3, [r4, #16]
   116d4:	b	116a4 <__assert_fail@plt+0x9fc>
   116d8:	ldr	r3, [pc, #40]	; 11708 <__assert_fail@plt+0xa60>
   116dc:	mov	r2, #108	; 0x6c
   116e0:	ldr	r0, [pc, #36]	; 1170c <__assert_fail@plt+0xa64>
   116e4:	ldr	r1, [pc, #36]	; 11710 <__assert_fail@plt+0xa68>
   116e8:	add	r3, pc, r3
   116ec:	add	r0, pc, r0
   116f0:	add	r3, r3, #48	; 0x30
   116f4:	add	r1, pc, r1
   116f8:	bl	10ca8 <__assert_fail@plt>
   116fc:	ldr	r0, [pc, #16]	; 11714 <__assert_fail@plt+0xa6c>
   11700:	add	r0, pc, r0
   11704:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11708:	andeq	r1, r0, r4, lsr lr
   1170c:	andeq	r1, r0, r4, lsl #30
   11710:	andeq	r1, r0, ip, asr #29
   11714:	andeq	r1, r0, r4, lsl pc
   11718:	mov	r3, #0
   1171c:	str	r1, [r0]
   11720:	str	r3, [r0, #12]
   11724:	bx	lr
   11728:	ldr	r3, [pc, #220]	; 1180c <__assert_fail@plt+0xb64>
   1172c:	ldr	r1, [pc, #220]	; 11810 <__assert_fail@plt+0xb68>
   11730:	add	r3, pc, r3
   11734:	ldr	r2, [r0, #12]
   11738:	push	{r4, r5, r6, r7, r8, r9, lr}
   1173c:	sub	sp, sp, #20
   11740:	ldr	r9, [r3, r1]
   11744:	cmp	r2, #0
   11748:	mov	r4, r0
   1174c:	ldr	r3, [r9]
   11750:	str	r3, [sp, #12]
   11754:	beq	117e8 <__assert_fail@plt+0xb40>
   11758:	add	r5, r0, #8
   1175c:	add	r8, r0, #16
   11760:	add	r7, sp, #8
   11764:	mov	r6, #1
   11768:	b	117a4 <__assert_fail@plt+0xafc>
   1176c:	ldr	r3, [r4, #12]
   11770:	mov	r0, r8
   11774:	str	r5, [sp]
   11778:	mov	r1, r7
   1177c:	str	r6, [sp, #8]
   11780:	mov	r2, r5
   11784:	ldr	ip, [r3, #40]	; 0x28
   11788:	mov	r3, #1
   1178c:	blx	ip
   11790:	cmp	r0, #0
   11794:	beq	117f0 <__assert_fail@plt+0xb48>
   11798:	ldr	r3, [sp, #8]
   1179c:	cmp	r3, #0
   117a0:	bne	117d0 <__assert_fail@plt+0xb28>
   117a4:	mov	r0, r4
   117a8:	bl	115b8 <__assert_fail@plt+0x910>
   117ac:	ldr	r3, [r4, #4]
   117b0:	cmp	r3, #1
   117b4:	beq	117fc <__assert_fail@plt+0xb54>
   117b8:	ldrb	r2, [r4, #8]
   117bc:	ldrb	r3, [r4, #28]
   117c0:	cmp	r2, r3
   117c4:	bne	1176c <__assert_fail@plt+0xac4>
   117c8:	mov	r3, #2
   117cc:	str	r3, [r4, #4]
   117d0:	ldr	r2, [sp, #12]
   117d4:	ldr	r3, [r9]
   117d8:	cmp	r2, r3
   117dc:	bne	11808 <__assert_fail@plt+0xb60>
   117e0:	add	sp, sp, #20
   117e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   117e8:	bl	115b8 <__assert_fail@plt+0x910>
   117ec:	b	117d0 <__assert_fail@plt+0xb28>
   117f0:	ldr	r0, [pc, #28]	; 11814 <__assert_fail@plt+0xb6c>
   117f4:	add	r0, pc, r0
   117f8:	bl	12b9c <__assert_fail@plt+0x1ef4>
   117fc:	ldr	r0, [pc, #20]	; 11818 <__assert_fail@plt+0xb70>
   11800:	add	r0, pc, r0
   11804:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11808:	bl	10bd0 <__stack_chk_fail@plt>
   1180c:	andeq	r2, r1, r8, asr #17
   11810:	andeq	r0, r0, r8, ror r0
   11814:	ldrdeq	r1, [r0], -r4
   11818:	andeq	r1, r0, r0, lsr lr
   1181c:	push	{r4, lr}
   11820:	mov	r4, r0
   11824:	bl	11728 <__assert_fail@plt+0xa80>
   11828:	ldr	r3, [r4, #4]
   1182c:	cmp	r3, #0
   11830:	bne	1183c <__assert_fail@plt+0xb94>
   11834:	ldrb	r0, [r4, #8]
   11838:	pop	{r4, pc}
   1183c:	ldr	r0, [pc, #4]	; 11848 <__assert_fail@plt+0xba0>
   11840:	add	r0, pc, r0
   11844:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11848:	andeq	r1, r0, ip, lsl r7
   1184c:	push	{r4, lr}
   11850:	mov	r4, r0
   11854:	bl	1181c <__assert_fail@plt+0xb74>
   11858:	ldrb	r3, [r4, #8]
   1185c:	cmp	r3, #34	; 0x22
   11860:	beq	118c0 <__assert_fail@plt+0xc18>
   11864:	cmp	r3, #92	; 0x5c
   11868:	bne	118b8 <__assert_fail@plt+0xc10>
   1186c:	mov	r0, r4
   11870:	bl	1181c <__assert_fail@plt+0xb74>
   11874:	ldrb	r3, [r4, #8]
   11878:	cmp	r3, #102	; 0x66
   1187c:	beq	11968 <__assert_fail@plt+0xcc0>
   11880:	bls	118c8 <__assert_fail@plt+0xc20>
   11884:	cmp	r3, #114	; 0x72
   11888:	beq	11958 <__assert_fail@plt+0xcb0>
   1188c:	bhi	118f4 <__assert_fail@plt+0xc4c>
   11890:	cmp	r3, #110	; 0x6e
   11894:	bne	11918 <__assert_fail@plt+0xc70>
   11898:	mov	r3, #10
   1189c:	mov	r0, #1
   118a0:	strb	r3, [r4, #8]
   118a4:	pop	{r4, pc}
   118a8:	mov	r0, r4
   118ac:	bl	1181c <__assert_fail@plt+0xb74>
   118b0:	cmp	r0, #10
   118b4:	beq	11948 <__assert_fail@plt+0xca0>
   118b8:	mov	r0, #1
   118bc:	pop	{r4, pc}
   118c0:	mov	r0, #0
   118c4:	pop	{r4, pc}
   118c8:	cmp	r3, #13
   118cc:	beq	118a8 <__assert_fail@plt+0xc00>
   118d0:	bls	11930 <__assert_fail@plt+0xc88>
   118d4:	cmp	r3, #92	; 0x5c
   118d8:	beq	1190c <__assert_fail@plt+0xc64>
   118dc:	cmp	r3, #98	; 0x62
   118e0:	bne	118b8 <__assert_fail@plt+0xc10>
   118e4:	mov	r3, #8
   118e8:	mov	r0, #1
   118ec:	strb	r3, [r4, #8]
   118f0:	pop	{r4, pc}
   118f4:	cmp	r3, #116	; 0x74
   118f8:	bne	11924 <__assert_fail@plt+0xc7c>
   118fc:	mov	r3, #9
   11900:	mov	r0, #1
   11904:	strb	r3, [r4, #8]
   11908:	pop	{r4, pc}
   1190c:	strb	r3, [r4, #8]
   11910:	mov	r0, #1
   11914:	pop	{r4, pc}
   11918:	cmp	r3, #111	; 0x6f
   1191c:	bne	118b8 <__assert_fail@plt+0xc10>
   11920:	bl	10c9c <abort@plt>
   11924:	cmp	r3, #120	; 0x78
   11928:	beq	11920 <__assert_fail@plt+0xc78>
   1192c:	b	118b8 <__assert_fail@plt+0xc10>
   11930:	cmp	r3, #10
   11934:	bne	118b8 <__assert_fail@plt+0xc10>
   11938:	mov	r0, r4
   1193c:	bl	1181c <__assert_fail@plt+0xb74>
   11940:	cmp	r0, #13
   11944:	bne	118b8 <__assert_fail@plt+0xc10>
   11948:	mov	r0, r4
   1194c:	bl	1181c <__assert_fail@plt+0xb74>
   11950:	mov	r0, #1
   11954:	pop	{r4, pc}
   11958:	mov	r3, #13
   1195c:	mov	r0, #1
   11960:	strb	r3, [r4, #8]
   11964:	pop	{r4, pc}
   11968:	mov	r3, #12
   1196c:	mov	r0, #1
   11970:	strb	r3, [r4, #8]
   11974:	pop	{r4, pc}
   11978:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1197c:	mov	r4, r0
   11980:	ldr	r7, [pc, #1928]	; 12110 <__assert_fail@plt+0x1468>
   11984:	mov	r8, r1
   11988:	mov	r5, r2
   1198c:	add	r7, pc, r7
   11990:	ldr	r3, [r4, #4]
   11994:	cmp	r3, #1
   11998:	beq	11ba4 <__assert_fail@plt+0xefc>
   1199c:	bcc	119c4 <__assert_fail@plt+0xd1c>
   119a0:	cmp	r3, #2
   119a4:	bne	11994 <__assert_fail@plt+0xcec>
   119a8:	mov	r3, #9
   119ac:	mov	r0, r4
   119b0:	str	r3, [r4, #32]
   119b4:	bl	11614 <__assert_fail@plt+0x96c>
   119b8:	mov	r0, r4
   119bc:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   119c0:	b	11728 <__assert_fail@plt+0xa80>
   119c4:	ldrb	r3, [r4, #8]
   119c8:	sub	r3, r3, #9
   119cc:	cmp	r3, #114	; 0x72
   119d0:	addls	pc, pc, r3, lsl #2
   119d4:	b	11db0 <__assert_fail@plt+0x1108>
   119d8:	b	11bf8 <__assert_fail@plt+0xf50>
   119dc:	b	11bf8 <__assert_fail@plt+0xf50>
   119e0:	b	11db0 <__assert_fail@plt+0x1108>
   119e4:	b	11db0 <__assert_fail@plt+0x1108>
   119e8:	b	11bf8 <__assert_fail@plt+0xf50>
   119ec:	b	11db0 <__assert_fail@plt+0x1108>
   119f0:	b	11db0 <__assert_fail@plt+0x1108>
   119f4:	b	11db0 <__assert_fail@plt+0x1108>
   119f8:	b	11db0 <__assert_fail@plt+0x1108>
   119fc:	b	11db0 <__assert_fail@plt+0x1108>
   11a00:	b	11db0 <__assert_fail@plt+0x1108>
   11a04:	b	11db0 <__assert_fail@plt+0x1108>
   11a08:	b	11db0 <__assert_fail@plt+0x1108>
   11a0c:	b	11db0 <__assert_fail@plt+0x1108>
   11a10:	b	11db0 <__assert_fail@plt+0x1108>
   11a14:	b	11db0 <__assert_fail@plt+0x1108>
   11a18:	b	11db0 <__assert_fail@plt+0x1108>
   11a1c:	b	11db0 <__assert_fail@plt+0x1108>
   11a20:	b	11db0 <__assert_fail@plt+0x1108>
   11a24:	b	11db0 <__assert_fail@plt+0x1108>
   11a28:	b	11db0 <__assert_fail@plt+0x1108>
   11a2c:	b	11db0 <__assert_fail@plt+0x1108>
   11a30:	b	11db0 <__assert_fail@plt+0x1108>
   11a34:	b	11bf8 <__assert_fail@plt+0xf50>
   11a38:	b	11db0 <__assert_fail@plt+0x1108>
   11a3c:	b	11db0 <__assert_fail@plt+0x1108>
   11a40:	b	11db0 <__assert_fail@plt+0x1108>
   11a44:	b	11db0 <__assert_fail@plt+0x1108>
   11a48:	b	11db0 <__assert_fail@plt+0x1108>
   11a4c:	b	11db0 <__assert_fail@plt+0x1108>
   11a50:	b	11db0 <__assert_fail@plt+0x1108>
   11a54:	b	11cf4 <__assert_fail@plt+0x104c>
   11a58:	b	11d9c <__assert_fail@plt+0x10f4>
   11a5c:	b	11db0 <__assert_fail@plt+0x1108>
   11a60:	b	11db0 <__assert_fail@plt+0x1108>
   11a64:	b	11db0 <__assert_fail@plt+0x1108>
   11a68:	b	11db0 <__assert_fail@plt+0x1108>
   11a6c:	b	11db0 <__assert_fail@plt+0x1108>
   11a70:	b	11db0 <__assert_fail@plt+0x1108>
   11a74:	b	11c0c <__assert_fail@plt+0xf64>
   11a78:	b	11c0c <__assert_fail@plt+0xf64>
   11a7c:	b	11c0c <__assert_fail@plt+0xf64>
   11a80:	b	11c0c <__assert_fail@plt+0xf64>
   11a84:	b	11c0c <__assert_fail@plt+0xf64>
   11a88:	b	11c0c <__assert_fail@plt+0xf64>
   11a8c:	b	11c0c <__assert_fail@plt+0xf64>
   11a90:	b	11c0c <__assert_fail@plt+0xf64>
   11a94:	b	11c0c <__assert_fail@plt+0xf64>
   11a98:	b	11c0c <__assert_fail@plt+0xf64>
   11a9c:	b	11db0 <__assert_fail@plt+0x1108>
   11aa0:	b	11d30 <__assert_fail@plt+0x1088>
   11aa4:	b	11db0 <__assert_fail@plt+0x1108>
   11aa8:	b	11db0 <__assert_fail@plt+0x1108>
   11aac:	b	11db0 <__assert_fail@plt+0x1108>
   11ab0:	b	11db0 <__assert_fail@plt+0x1108>
   11ab4:	b	11db0 <__assert_fail@plt+0x1108>
   11ab8:	b	11db0 <__assert_fail@plt+0x1108>
   11abc:	b	11db0 <__assert_fail@plt+0x1108>
   11ac0:	b	11db0 <__assert_fail@plt+0x1108>
   11ac4:	b	11db0 <__assert_fail@plt+0x1108>
   11ac8:	b	11db0 <__assert_fail@plt+0x1108>
   11acc:	b	11db0 <__assert_fail@plt+0x1108>
   11ad0:	b	11db0 <__assert_fail@plt+0x1108>
   11ad4:	b	11db0 <__assert_fail@plt+0x1108>
   11ad8:	b	11db0 <__assert_fail@plt+0x1108>
   11adc:	b	11db0 <__assert_fail@plt+0x1108>
   11ae0:	b	11db0 <__assert_fail@plt+0x1108>
   11ae4:	b	11db0 <__assert_fail@plt+0x1108>
   11ae8:	b	11db0 <__assert_fail@plt+0x1108>
   11aec:	b	11db0 <__assert_fail@plt+0x1108>
   11af0:	b	11db0 <__assert_fail@plt+0x1108>
   11af4:	b	11db0 <__assert_fail@plt+0x1108>
   11af8:	b	11db0 <__assert_fail@plt+0x1108>
   11afc:	b	11db0 <__assert_fail@plt+0x1108>
   11b00:	b	11db0 <__assert_fail@plt+0x1108>
   11b04:	b	11db0 <__assert_fail@plt+0x1108>
   11b08:	b	11db0 <__assert_fail@plt+0x1108>
   11b0c:	b	11db0 <__assert_fail@plt+0x1108>
   11b10:	b	11db0 <__assert_fail@plt+0x1108>
   11b14:	b	11db0 <__assert_fail@plt+0x1108>
   11b18:	b	11db0 <__assert_fail@plt+0x1108>
   11b1c:	b	11db0 <__assert_fail@plt+0x1108>
   11b20:	b	11d08 <__assert_fail@plt+0x1060>
   11b24:	b	11db0 <__assert_fail@plt+0x1108>
   11b28:	b	11d1c <__assert_fail@plt+0x1074>
   11b2c:	b	11db0 <__assert_fail@plt+0x1108>
   11b30:	b	11db0 <__assert_fail@plt+0x1108>
   11b34:	b	11db0 <__assert_fail@plt+0x1108>
   11b38:	b	11db0 <__assert_fail@plt+0x1108>
   11b3c:	b	11db0 <__assert_fail@plt+0x1108>
   11b40:	b	11db0 <__assert_fail@plt+0x1108>
   11b44:	b	11db0 <__assert_fail@plt+0x1108>
   11b48:	b	11db0 <__assert_fail@plt+0x1108>
   11b4c:	b	11db0 <__assert_fail@plt+0x1108>
   11b50:	b	11db0 <__assert_fail@plt+0x1108>
   11b54:	b	11db0 <__assert_fail@plt+0x1108>
   11b58:	b	11db0 <__assert_fail@plt+0x1108>
   11b5c:	b	11db0 <__assert_fail@plt+0x1108>
   11b60:	b	11db0 <__assert_fail@plt+0x1108>
   11b64:	b	11db0 <__assert_fail@plt+0x1108>
   11b68:	b	11db0 <__assert_fail@plt+0x1108>
   11b6c:	b	11db0 <__assert_fail@plt+0x1108>
   11b70:	b	11db0 <__assert_fail@plt+0x1108>
   11b74:	b	11db0 <__assert_fail@plt+0x1108>
   11b78:	b	11db0 <__assert_fail@plt+0x1108>
   11b7c:	b	11db0 <__assert_fail@plt+0x1108>
   11b80:	b	11db0 <__assert_fail@plt+0x1108>
   11b84:	b	11db0 <__assert_fail@plt+0x1108>
   11b88:	b	11db0 <__assert_fail@plt+0x1108>
   11b8c:	b	11db0 <__assert_fail@plt+0x1108>
   11b90:	b	11db0 <__assert_fail@plt+0x1108>
   11b94:	b	11db0 <__assert_fail@plt+0x1108>
   11b98:	b	11db0 <__assert_fail@plt+0x1108>
   11b9c:	b	11db0 <__assert_fail@plt+0x1108>
   11ba0:	b	11bb0 <__assert_fail@plt+0xf08>
   11ba4:	mov	r3, #5
   11ba8:	str	r3, [r4, #32]
   11bac:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11bb0:	cmp	r8, #0
   11bb4:	beq	12044 <__assert_fail@plt+0x139c>
   11bb8:	ldr	r3, [r4, #12]
   11bbc:	cmp	r3, #0
   11bc0:	bne	12040 <__assert_fail@plt+0x1398>
   11bc4:	ldr	r3, [pc, #1352]	; 12114 <__assert_fail@plt+0x146c>
   11bc8:	add	r0, r4, #16
   11bcc:	ldr	r3, [r7, r3]
   11bd0:	str	r3, [r4, #12]
   11bd4:	ldr	r3, [r3, #32]
   11bd8:	blx	r3
   11bdc:	mov	r3, #125	; 0x7d
   11be0:	mov	r0, r4
   11be4:	strb	r3, [r4, #28]
   11be8:	bl	11728 <__assert_fail@plt+0xa80>
   11bec:	mov	r3, #8
   11bf0:	str	r3, [r4, #32]
   11bf4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11bf8:	cmp	r8, #0
   11bfc:	beq	11ff8 <__assert_fail@plt+0x1350>
   11c00:	mov	r0, r4
   11c04:	bl	11728 <__assert_fail@plt+0xa80>
   11c08:	b	11990 <__assert_fail@plt+0xce8>
   11c0c:	mov	r0, r5
   11c10:	bl	10c90 <nettle_buffer_reset@plt>
   11c14:	ldrb	r6, [r4, #8]
   11c18:	mov	r3, #0
   11c1c:	str	r3, [r4, #32]
   11c20:	subs	r6, r6, #48	; 0x30
   11c24:	beq	11f14 <__assert_fail@plt+0x126c>
   11c28:	cmp	r6, #9
   11c2c:	bls	11c3c <__assert_fail@plt+0xf94>
   11c30:	b	12010 <__assert_fail@plt+0x1368>
   11c34:	add	r6, r6, r6, lsl #2
   11c38:	add	r6, r3, r6, lsl #1
   11c3c:	mov	r0, r4
   11c40:	bl	1181c <__assert_fail@plt+0xb74>
   11c44:	ldrb	r2, [r4, #8]
   11c48:	sub	r3, r2, #48	; 0x30
   11c4c:	uxtb	r1, r3
   11c50:	cmp	r1, #9
   11c54:	bls	11c34 <__assert_fail@plt+0xf8c>
   11c58:	mov	r9, r2
   11c5c:	cmp	r9, #35	; 0x23
   11c60:	beq	11fa8 <__assert_fail@plt+0x1300>
   11c64:	bls	11eb4 <__assert_fail@plt+0x120c>
   11c68:	cmp	r9, #58	; 0x3a
   11c6c:	beq	11fc8 <__assert_fail@plt+0x1320>
   11c70:	cmp	r9, #124	; 0x7c
   11c74:	bne	11fbc <__assert_fail@plt+0x1314>
   11c78:	ldr	r3, [r4, #12]
   11c7c:	cmp	r3, #0
   11c80:	bne	12040 <__assert_fail@plt+0x1398>
   11c84:	ldr	r3, [pc, #1160]	; 12114 <__assert_fail@plt+0x146c>
   11c88:	ldr	r3, [r7, r3]
   11c8c:	add	r0, r4, #16
   11c90:	str	r3, [r4, #12]
   11c94:	ldr	r3, [r3, #32]
   11c98:	blx	r3
   11c9c:	cmp	r6, #0
   11ca0:	strb	r9, [r4, #28]
   11ca4:	addne	r7, r4, #8
   11ca8:	beq	11ccc <__assert_fail@plt+0x1024>
   11cac:	mov	r0, r4
   11cb0:	bl	1181c <__assert_fail@plt+0xb74>
   11cb4:	ldr	r0, [r4, #4]
   11cb8:	mov	r1, r7
   11cbc:	mov	r2, r5
   11cc0:	bl	11680 <__assert_fail@plt+0x9d8>
   11cc4:	subs	r6, r6, #1
   11cc8:	bne	11cac <__assert_fail@plt+0x1004>
   11ccc:	mov	r0, r4
   11cd0:	bl	11728 <__assert_fail@plt+0xa80>
   11cd4:	ldr	r3, [r4, #4]
   11cd8:	cmp	r3, #2
   11cdc:	bne	12104 <__assert_fail@plt+0x145c>
   11ce0:	mov	r0, r4
   11ce4:	bl	11614 <__assert_fail@plt+0x96c>
   11ce8:	mov	r0, r4
   11cec:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   11cf0:	b	11728 <__assert_fail@plt+0xa80>
   11cf4:	mov	r3, #3
   11cf8:	mov	r0, r4
   11cfc:	str	r3, [r4, #32]
   11d00:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   11d04:	b	11728 <__assert_fail@plt+0xa80>
   11d08:	mov	r3, #6
   11d0c:	mov	r0, r4
   11d10:	str	r3, [r4, #32]
   11d14:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   11d18:	b	11728 <__assert_fail@plt+0xa80>
   11d1c:	mov	r3, #7
   11d20:	mov	r0, r4
   11d24:	str	r3, [r4, #32]
   11d28:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   11d2c:	b	11728 <__assert_fail@plt+0xa80>
   11d30:	cmp	r8, #0
   11d34:	beq	120d4 <__assert_fail@plt+0x142c>
   11d38:	mov	r0, r5
   11d3c:	bl	10c90 <nettle_buffer_reset@plt>
   11d40:	ldr	r3, [r4, #4]
   11d44:	cmp	r3, #0
   11d48:	bne	120b0 <__assert_fail@plt+0x1408>
   11d4c:	ldrb	r3, [r4, #8]
   11d50:	cmp	r3, #59	; 0x3b
   11d54:	addeq	r6, r4, #8
   11d58:	beq	11d6c <__assert_fail@plt+0x10c4>
   11d5c:	b	120e0 <__assert_fail@plt+0x1438>
   11d60:	ldrb	r3, [r4, #8]
   11d64:	cmp	r3, #10
   11d68:	beq	11d90 <__assert_fail@plt+0x10e8>
   11d6c:	mov	r0, #0
   11d70:	mov	r1, r6
   11d74:	mov	r2, r5
   11d78:	bl	11680 <__assert_fail@plt+0x9d8>
   11d7c:	mov	r0, r4
   11d80:	bl	115b8 <__assert_fail@plt+0x910>
   11d84:	ldr	r3, [r4, #4]
   11d88:	cmp	r3, #0
   11d8c:	beq	11d60 <__assert_fail@plt+0x10b8>
   11d90:	mov	r3, #2
   11d94:	str	r3, [r4, #32]
   11d98:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11d9c:	mov	r3, #4
   11da0:	mov	r0, r4
   11da4:	str	r3, [r4, #32]
   11da8:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   11dac:	b	11728 <__assert_fail@plt+0xa80>
   11db0:	cmp	r8, #1
   11db4:	bne	12034 <__assert_fail@plt+0x138c>
   11db8:	mov	r0, r5
   11dbc:	bl	10c90 <nettle_buffer_reset@plt>
   11dc0:	ldrb	r6, [r4, #8]
   11dc4:	mov	r3, #0
   11dc8:	str	r3, [r4, #32]
   11dcc:	cmp	r6, #35	; 0x23
   11dd0:	beq	11f24 <__assert_fail@plt+0x127c>
   11dd4:	cmp	r6, #124	; 0x7c
   11dd8:	beq	11f74 <__assert_fail@plt+0x12cc>
   11ddc:	cmp	r6, #34	; 0x22
   11de0:	addeq	r6, r4, #8
   11de4:	beq	11ea0 <__assert_fail@plt+0x11f8>
   11de8:	ldr	r3, [r4, #12]
   11dec:	cmp	r3, #0
   11df0:	bne	1208c <__assert_fail@plt+0x13e4>
   11df4:	ldr	r3, [r4, #4]
   11df8:	cmp	r3, #0
   11dfc:	bne	12068 <__assert_fail@plt+0x13c0>
   11e00:	tst	r6, #128	; 0x80
   11e04:	bne	12004 <__assert_fail@plt+0x135c>
   11e08:	ldr	r3, [pc, #776]	; 12118 <__assert_fail@plt+0x1470>
   11e0c:	ldr	r7, [r7, r3]
   11e10:	ldrb	r3, [r7, r6]
   11e14:	cmp	r3, #0
   11e18:	addne	r6, r4, #8
   11e1c:	bne	11e3c <__assert_fail@plt+0x1194>
   11e20:	b	12004 <__assert_fail@plt+0x135c>
   11e24:	ldrb	r3, [r4, #8]
   11e28:	tst	r3, #128	; 0x80
   11e2c:	bne	11e60 <__assert_fail@plt+0x11b8>
   11e30:	ldrb	r3, [r7, r3]
   11e34:	cmp	r3, #0
   11e38:	beq	11e60 <__assert_fail@plt+0x11b8>
   11e3c:	mov	r0, #0
   11e40:	mov	r1, r6
   11e44:	mov	r2, r5
   11e48:	bl	11680 <__assert_fail@plt+0x9d8>
   11e4c:	mov	r0, r4
   11e50:	bl	11728 <__assert_fail@plt+0xa80>
   11e54:	ldr	r3, [r4, #4]
   11e58:	cmp	r3, #0
   11e5c:	beq	11e24 <__assert_fail@plt+0x117c>
   11e60:	ldr	r3, [r5, #16]
   11e64:	cmp	r3, #0
   11e68:	popne	{r3, r4, r5, r6, r7, r8, r9, pc}
   11e6c:	ldr	r3, [pc, #680]	; 1211c <__assert_fail@plt+0x1474>
   11e70:	mov	r2, #198	; 0xc6
   11e74:	ldr	r0, [pc, #676]	; 12120 <__assert_fail@plt+0x1478>
   11e78:	ldr	r1, [pc, #676]	; 12124 <__assert_fail@plt+0x147c>
   11e7c:	add	r3, pc, r3
   11e80:	add	r0, pc, r0
   11e84:	add	r3, r3, #108	; 0x6c
   11e88:	add	r1, pc, r1
   11e8c:	bl	10ca8 <__assert_fail@plt>
   11e90:	ldr	r0, [r4, #4]
   11e94:	mov	r1, r6
   11e98:	mov	r2, r5
   11e9c:	bl	11680 <__assert_fail@plt+0x9d8>
   11ea0:	mov	r0, r4
   11ea4:	bl	1184c <__assert_fail@plt+0xba4>
   11ea8:	cmp	r0, #0
   11eac:	bne	11e90 <__assert_fail@plt+0x11e8>
   11eb0:	b	11ce8 <__assert_fail@plt+0x1040>
   11eb4:	cmp	r9, #34	; 0x22
   11eb8:	bne	11fbc <__assert_fail@plt+0x1314>
   11ebc:	cmp	r8, #1
   11ec0:	bne	12050 <__assert_fail@plt+0x13a8>
   11ec4:	cmp	r6, #0
   11ec8:	addne	r7, r4, #8
   11ecc:	beq	11ef8 <__assert_fail@plt+0x1250>
   11ed0:	mov	r0, r4
   11ed4:	bl	1184c <__assert_fail@plt+0xba4>
   11ed8:	cmp	r0, #0
   11edc:	beq	1205c <__assert_fail@plt+0x13b4>
   11ee0:	ldr	r0, [r4, #4]
   11ee4:	mov	r1, r7
   11ee8:	mov	r2, r5
   11eec:	bl	11680 <__assert_fail@plt+0x9d8>
   11ef0:	subs	r6, r6, #1
   11ef4:	bne	11ed0 <__assert_fail@plt+0x1228>
   11ef8:	mov	r0, r4
   11efc:	bl	1184c <__assert_fail@plt+0xba4>
   11f00:	cmp	r0, #0
   11f04:	beq	11ce8 <__assert_fail@plt+0x1040>
   11f08:	ldr	r0, [pc, #536]	; 12128 <__assert_fail@plt+0x1480>
   11f0c:	add	r0, pc, r0
   11f10:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11f14:	mov	r0, r4
   11f18:	bl	1181c <__assert_fail@plt+0xb74>
   11f1c:	ldrb	r9, [r4, #8]
   11f20:	b	11c5c <__assert_fail@plt+0xfb4>
   11f24:	ldr	r3, [r4, #12]
   11f28:	cmp	r3, #0
   11f2c:	bne	12040 <__assert_fail@plt+0x1398>
   11f30:	ldr	r3, [pc, #500]	; 1212c <__assert_fail@plt+0x1484>
   11f34:	ldr	r3, [r7, r3]
   11f38:	add	r0, r4, #16
   11f3c:	str	r3, [r4, #12]
   11f40:	ldr	r3, [r3, #32]
   11f44:	blx	r3
   11f48:	strb	r6, [r4, #28]
   11f4c:	add	r6, r4, #8
   11f50:	mov	r0, r4
   11f54:	bl	11728 <__assert_fail@plt+0xa80>
   11f58:	ldr	r3, [r4, #4]
   11f5c:	cmp	r3, #1
   11f60:	beq	11f9c <__assert_fail@plt+0x12f4>
   11f64:	bcc	11f88 <__assert_fail@plt+0x12e0>
   11f68:	cmp	r3, #2
   11f6c:	beq	11ce0 <__assert_fail@plt+0x1038>
   11f70:	b	11f50 <__assert_fail@plt+0x12a8>
   11f74:	ldr	r3, [r4, #12]
   11f78:	cmp	r3, #0
   11f7c:	bne	12040 <__assert_fail@plt+0x1398>
   11f80:	ldr	r3, [pc, #396]	; 12114 <__assert_fail@plt+0x146c>
   11f84:	b	11f34 <__assert_fail@plt+0x128c>
   11f88:	mov	r0, #0
   11f8c:	mov	r1, r6
   11f90:	mov	r2, r5
   11f94:	bl	11680 <__assert_fail@plt+0x9d8>
   11f98:	b	11f50 <__assert_fail@plt+0x12a8>
   11f9c:	ldr	r0, [pc, #396]	; 12130 <__assert_fail@plt+0x1488>
   11fa0:	add	r0, pc, r0
   11fa4:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11fa8:	ldr	r3, [r4, #12]
   11fac:	cmp	r3, #0
   11fb0:	bne	12040 <__assert_fail@plt+0x1398>
   11fb4:	ldr	r3, [pc, #368]	; 1212c <__assert_fail@plt+0x1484>
   11fb8:	b	11c88 <__assert_fail@plt+0xfe0>
   11fbc:	ldr	r0, [pc, #368]	; 12134 <__assert_fail@plt+0x148c>
   11fc0:	add	r0, pc, r0
   11fc4:	bl	12b9c <__assert_fail@plt+0x1ef4>
   11fc8:	cmp	r6, #0
   11fcc:	beq	11ce8 <__assert_fail@plt+0x1040>
   11fd0:	add	r7, r4, #8
   11fd4:	mov	r0, r4
   11fd8:	bl	1181c <__assert_fail@plt+0xb74>
   11fdc:	ldr	r0, [r4, #4]
   11fe0:	mov	r1, r7
   11fe4:	mov	r2, r5
   11fe8:	bl	11680 <__assert_fail@plt+0x9d8>
   11fec:	subs	r6, r6, #1
   11ff0:	bne	11fd4 <__assert_fail@plt+0x132c>
   11ff4:	b	11ce8 <__assert_fail@plt+0x1040>
   11ff8:	ldr	r0, [pc, #312]	; 12138 <__assert_fail@plt+0x1490>
   11ffc:	add	r0, pc, r0
   12000:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12004:	ldr	r0, [pc, #304]	; 1213c <__assert_fail@plt+0x1494>
   12008:	add	r0, pc, r0
   1200c:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12010:	ldr	r3, [pc, #296]	; 12140 <__assert_fail@plt+0x1498>
   12014:	movw	r2, #267	; 0x10b
   12018:	ldr	r0, [pc, #292]	; 12144 <__assert_fail@plt+0x149c>
   1201c:	ldr	r1, [pc, #292]	; 12148 <__assert_fail@plt+0x14a0>
   12020:	add	r3, pc, r3
   12024:	add	r0, pc, r0
   12028:	add	r3, r3, #64	; 0x40
   1202c:	add	r1, pc, r1
   12030:	bl	10ca8 <__assert_fail@plt>
   12034:	ldr	r0, [pc, #272]	; 1214c <__assert_fail@plt+0x14a4>
   12038:	add	r0, pc, r0
   1203c:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12040:	bl	10cb4 <__assert_fail@plt+0xc>
   12044:	ldr	r0, [pc, #260]	; 12150 <__assert_fail@plt+0x14a8>
   12048:	add	r0, pc, r0
   1204c:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12050:	ldr	r0, [pc, #252]	; 12154 <__assert_fail@plt+0x14ac>
   12054:	add	r0, pc, r0
   12058:	bl	12b9c <__assert_fail@plt+0x1ef4>
   1205c:	ldr	r0, [pc, #244]	; 12158 <__assert_fail@plt+0x14b0>
   12060:	add	r0, pc, r0
   12064:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12068:	ldr	r3, [pc, #236]	; 1215c <__assert_fail@plt+0x14b4>
   1206c:	mov	r2, #186	; 0xba
   12070:	ldr	r0, [pc, #232]	; 12160 <__assert_fail@plt+0x14b8>
   12074:	ldr	r1, [pc, #232]	; 12164 <__assert_fail@plt+0x14bc>
   12078:	add	r3, pc, r3
   1207c:	add	r0, pc, r0
   12080:	add	r3, r3, #108	; 0x6c
   12084:	add	r1, pc, r1
   12088:	bl	10ca8 <__assert_fail@plt>
   1208c:	ldr	r3, [pc, #212]	; 12168 <__assert_fail@plt+0x14c0>
   12090:	mov	r2, #185	; 0xb9
   12094:	ldr	r0, [pc, #208]	; 1216c <__assert_fail@plt+0x14c4>
   12098:	ldr	r1, [pc, #208]	; 12170 <__assert_fail@plt+0x14c8>
   1209c:	add	r3, pc, r3
   120a0:	add	r0, pc, r0
   120a4:	add	r3, r3, #108	; 0x6c
   120a8:	add	r1, pc, r1
   120ac:	bl	10ca8 <__assert_fail@plt>
   120b0:	ldr	r3, [pc, #188]	; 12174 <__assert_fail@plt+0x14cc>
   120b4:	movw	r2, #342	; 0x156
   120b8:	ldr	r0, [pc, #184]	; 12178 <__assert_fail@plt+0x14d0>
   120bc:	ldr	r1, [pc, #184]	; 1217c <__assert_fail@plt+0x14d4>
   120c0:	add	r3, pc, r3
   120c4:	add	r0, pc, r0
   120c8:	add	r3, r3, #88	; 0x58
   120cc:	add	r1, pc, r1
   120d0:	bl	10ca8 <__assert_fail@plt>
   120d4:	ldr	r0, [pc, #164]	; 12180 <__assert_fail@plt+0x14d8>
   120d8:	add	r0, pc, r0
   120dc:	bl	12b9c <__assert_fail@plt+0x1ef4>
   120e0:	ldr	r3, [pc, #156]	; 12184 <__assert_fail@plt+0x14dc>
   120e4:	movw	r2, #343	; 0x157
   120e8:	ldr	r0, [pc, #152]	; 12188 <__assert_fail@plt+0x14e0>
   120ec:	ldr	r1, [pc, #152]	; 1218c <__assert_fail@plt+0x14e4>
   120f0:	add	r3, pc, r3
   120f4:	add	r0, pc, r0
   120f8:	add	r3, r3, #88	; 0x58
   120fc:	add	r1, pc, r1
   12100:	bl	10ca8 <__assert_fail@plt>
   12104:	ldr	r0, [pc, #132]	; 12190 <__assert_fail@plt+0x14e8>
   12108:	add	r0, pc, r0
   1210c:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12110:	andeq	r2, r1, ip, ror #12
   12114:	andeq	r0, r0, ip, lsl #1
   12118:	muleq	r0, r4, r0
   1211c:	andeq	r1, r0, r0, lsr #13
   12120:	andeq	r1, r0, r4, lsl #19
   12124:	andeq	r1, r0, r8, lsr r7
   12128:	andeq	r1, r0, r4, lsr #15
   1212c:	andeq	r0, r0, r0, lsl #1
   12130:	andeq	r1, r0, r8, lsr #16
   12134:	andeq	r1, r0, r0, lsr r7
   12138:	andeq	r1, r0, r8, lsr r7
   1213c:	andeq	r1, r0, ip, ror #15
   12140:	strdeq	r1, [r0], -ip
   12144:	andeq	r1, r0, r4, lsr r6
   12148:	muleq	r0, r4, r5
   1214c:	andeq	r1, r0, r0, ror #14
   12150:			; <UNDEFINED> instruction: 0x000016bc
   12154:	andeq	r1, r0, r0, lsl r6
   12158:	andeq	r1, r0, r4, lsr r6
   1215c:	andeq	r1, r0, r4, lsr #9
   12160:	andeq	r1, r0, r4, ror r5
   12164:	andeq	r1, r0, ip, lsr r5
   12168:	andeq	r1, r0, r0, lsl #9
   1216c:	andeq	r1, r0, r0, asr #10
   12170:	andeq	r1, r0, r8, lsl r5
   12174:	andeq	r1, r0, ip, asr r4
   12178:	andeq	r1, r0, ip, lsr #10
   1217c:	strdeq	r1, [r0], -r4
   12180:	andeq	r1, r0, r8, lsl #13
   12184:	andeq	r1, r0, ip, lsr #8
   12188:	muleq	r0, r4, r6
   1218c:	andeq	r1, r0, r4, asr #9
   12190:	ldrdeq	r1, [r0], -r0
   12194:	push	{r4, lr}
   12198:	mov	r4, r0
   1219c:	mov	r0, r1
   121a0:	ldr	r1, [r4]
   121a4:	bl	10bdc <_IO_putc@plt>
   121a8:	cmp	r0, #0
   121ac:	blt	121c8 <__assert_fail@plt+0x1520>
   121b0:	ldr	r3, [r4, #40]	; 0x28
   121b4:	mov	r2, #0
   121b8:	str	r2, [r4, #44]	; 0x2c
   121bc:	add	r3, r3, #1
   121c0:	str	r3, [r4, #40]	; 0x28
   121c4:	pop	{r4, pc}
   121c8:	bl	10c60 <__errno_location@plt>
   121cc:	ldr	r0, [r0]
   121d0:	bl	10c18 <strerror@plt>
   121d4:	mov	r1, r0
   121d8:	ldr	r0, [pc, #4]	; 121e4 <__assert_fail@plt+0x153c>
   121dc:	add	r0, pc, r0
   121e0:	bl	12b9c <__assert_fail@plt+0x1ef4>
   121e4:	andeq	r1, r0, r0, lsr #13
   121e8:	mov	ip, #0
   121ec:	stm	r0, {r1, r2}
   121f0:	str	r3, [r0, #16]
   121f4:	str	ip, [r0, #8]
   121f8:	str	ip, [r0, #20]
   121fc:	str	ip, [r0, #24]
   12200:	str	ip, [r0, #40]	; 0x28
   12204:	str	ip, [r0, #44]	; 0x2c
   12208:	bx	lr
   1220c:	push	{r3, lr}
   12210:	mov	r3, r0
   12214:	str	r1, [r0, #20]
   12218:	mov	r0, r2
   1221c:	ldr	r1, [r1, #16]
   12220:	str	r2, [r3, #24]
   12224:	blx	r1
   12228:	pop	{r3, pc}
   1222c:	push	{r4, r5, r6, lr}
   12230:	mov	r5, r0
   12234:	ldr	r4, [r0, #44]	; 0x2c
   12238:	mov	r6, r1
   1223c:	cmp	r4, #0
   12240:	movne	r3, #0
   12244:	strne	r3, [r0, #44]	; 0x2c
   12248:	popne	{r4, r5, r6, pc}
   1224c:	mov	r1, #10
   12250:	bl	12194 <__assert_fail@plt+0x14ec>
   12254:	cmp	r6, #0
   12258:	str	r4, [r5, #40]	; 0x28
   1225c:	beq	12278 <__assert_fail@plt+0x15d0>
   12260:	add	r4, r4, #1
   12264:	mov	r0, r5
   12268:	mov	r1, #32
   1226c:	bl	12194 <__assert_fail@plt+0x14ec>
   12270:	cmp	r4, r6
   12274:	bne	12260 <__assert_fail@plt+0x15b8>
   12278:	str	r6, [r5, #40]	; 0x28
   1227c:	pop	{r4, r5, r6, pc}
   12280:	push	{r4, lr}
   12284:	mov	r4, r0
   12288:	bl	1222c <__assert_fail@plt+0x1584>
   1228c:	mov	r3, #1
   12290:	str	r3, [r4, #44]	; 0x2c
   12294:	pop	{r4, pc}
   12298:	ldr	r3, [pc, #280]	; 123b8 <__assert_fail@plt+0x1710>
   1229c:	ldr	ip, [pc, #280]	; 123bc <__assert_fail@plt+0x1714>
   122a0:	push	{r4, r5, r6, r7, r8, lr}
   122a4:	add	r3, pc, r3
   122a8:	sub	sp, sp, #16
   122ac:	ldr	r2, [r0, #8]
   122b0:	mov	r4, r0
   122b4:	strb	r1, [sp, #7]
   122b8:	cmp	r2, #0
   122bc:	ldr	r7, [r3, ip]
   122c0:	ldr	r3, [r7]
   122c4:	str	r3, [sp, #12]
   122c8:	beq	12358 <__assert_fail@plt+0x16b0>
   122cc:	add	r8, sp, #8
   122d0:	ldr	ip, [r2, #24]
   122d4:	add	r0, r0, #28
   122d8:	mov	r2, #1
   122dc:	mov	r1, r8
   122e0:	add	r3, sp, #7
   122e4:	blx	ip
   122e8:	cmp	r0, #2
   122ec:	mov	r6, r0
   122f0:	bhi	12398 <__assert_fail@plt+0x16f0>
   122f4:	cmp	r0, #0
   122f8:	movne	r5, #0
   122fc:	beq	12340 <__assert_fail@plt+0x1698>
   12300:	ldr	r3, [r4, #4]
   12304:	cmp	r3, #0
   12308:	beq	12328 <__assert_fail@plt+0x1680>
   1230c:	ldr	r2, [r4, #40]	; 0x28
   12310:	cmp	r3, r2
   12314:	bhi	12328 <__assert_fail@plt+0x1680>
   12318:	ldr	r1, [r4, #12]
   1231c:	add	r3, r1, #10
   12320:	cmp	r2, r3
   12324:	bcs	1237c <__assert_fail@plt+0x16d4>
   12328:	ldrb	r1, [r8, r5]
   1232c:	mov	r0, r4
   12330:	add	r5, r5, #1
   12334:	bl	12194 <__assert_fail@plt+0x14ec>
   12338:	cmp	r5, r6
   1233c:	bne	12300 <__assert_fail@plt+0x1658>
   12340:	ldr	r2, [sp, #12]
   12344:	ldr	r3, [r7]
   12348:	cmp	r2, r3
   1234c:	bne	12394 <__assert_fail@plt+0x16ec>
   12350:	add	sp, sp, #16
   12354:	pop	{r4, r5, r6, r7, r8, pc}
   12358:	ldr	r3, [r0, #20]
   1235c:	cmp	r3, #0
   12360:	beq	12388 <__assert_fail@plt+0x16e0>
   12364:	ldr	r3, [r3, #20]
   12368:	mov	r1, #1
   1236c:	ldr	r0, [r0, #24]
   12370:	add	r2, sp, #7
   12374:	blx	r3
   12378:	b	12340 <__assert_fail@plt+0x1698>
   1237c:	mov	r0, r4
   12380:	bl	1222c <__assert_fail@plt+0x1584>
   12384:	b	12328 <__assert_fail@plt+0x1680>
   12388:	ldrb	r1, [sp, #7]
   1238c:	bl	12194 <__assert_fail@plt+0x14ec>
   12390:	b	12340 <__assert_fail@plt+0x1698>
   12394:	bl	10bd0 <__stack_chk_fail@plt>
   12398:	ldr	r0, [pc, #32]	; 123c0 <__assert_fail@plt+0x1718>
   1239c:	mov	r2, #115	; 0x73
   123a0:	ldr	r1, [pc, #28]	; 123c4 <__assert_fail@plt+0x171c>
   123a4:	ldr	r3, [pc, #28]	; 123c8 <__assert_fail@plt+0x1720>
   123a8:	add	r0, pc, r0
   123ac:	add	r1, pc, r1
   123b0:	add	r3, pc, r3
   123b4:	bl	10ca8 <__assert_fail@plt>
   123b8:	andeq	r1, r1, r4, asr sp
   123bc:	andeq	r0, r0, r8, ror r0
   123c0:	andeq	r1, r0, r8, ror #9
   123c4:	strdeq	r1, [r0], -ip
   123c8:	andeq	r1, r0, r4, ror #8
   123cc:	cmp	r1, #0
   123d0:	push	{r4, r5, r6, lr}
   123d4:	mov	r5, r0
   123d8:	popeq	{r4, r5, r6, pc}
   123dc:	add	r6, r2, r1
   123e0:	mov	r4, r2
   123e4:	ldrb	r1, [r4], #1
   123e8:	mov	r0, r5
   123ec:	bl	12298 <__assert_fail@plt+0x15f0>
   123f0:	cmp	r4, r6
   123f4:	bne	123e4 <__assert_fail@plt+0x173c>
   123f8:	pop	{r4, r5, r6, pc}
   123fc:	ldr	r2, [r0, #8]
   12400:	push	{r3, lr}
   12404:	cmp	r2, #0
   12408:	mov	r3, r0
   1240c:	bne	1242c <__assert_fail@plt+0x1784>
   12410:	ldr	ip, [r0, #40]	; 0x28
   12414:	add	r0, r0, #28
   12418:	ldr	r2, [r1, #16]
   1241c:	str	r1, [r3, #8]
   12420:	str	ip, [r3, #12]
   12424:	blx	r2
   12428:	pop	{r3, pc}
   1242c:	ldr	r3, [pc, #28]	; 12450 <__assert_fail@plt+0x17a8>
   12430:	mov	r2, #165	; 0xa5
   12434:	ldr	r0, [pc, #24]	; 12454 <__assert_fail@plt+0x17ac>
   12438:	ldr	r1, [pc, #24]	; 12458 <__assert_fail@plt+0x17b0>
   1243c:	add	r3, pc, r3
   12440:	add	r0, pc, r0
   12444:	add	r3, r3, #16
   12448:	add	r1, pc, r1
   1244c:	bl	10ca8 <__assert_fail@plt>
   12450:	ldrdeq	r1, [r0], -r8
   12454:	andeq	r1, r0, r4, ror r4
   12458:	andeq	r1, r0, r0, ror #8
   1245c:	ldr	r3, [pc, #188]	; 12520 <__assert_fail@plt+0x1878>
   12460:	ldr	r2, [pc, #188]	; 12524 <__assert_fail@plt+0x187c>
   12464:	add	r3, pc, r3
   12468:	push	{r4, r5, r6, lr}
   1246c:	mov	r4, r0
   12470:	ldr	r5, [r3, r2]
   12474:	sub	sp, sp, #8
   12478:	ldr	r0, [r0, #8]
   1247c:	ldr	r3, [r5]
   12480:	cmp	r0, #0
   12484:	str	r3, [sp, #4]
   12488:	beq	124d4 <__assert_fail@plt+0x182c>
   1248c:	ldr	r3, [r0, #28]
   12490:	mov	r1, sp
   12494:	add	r0, r4, #28
   12498:	blx	r3
   1249c:	cmp	r0, #3
   124a0:	mov	r1, r0
   124a4:	bhi	124fc <__assert_fail@plt+0x1854>
   124a8:	mov	r3, #0
   124ac:	mov	r2, sp
   124b0:	str	r3, [r4, #8]
   124b4:	mov	r0, r4
   124b8:	bl	123cc <__assert_fail@plt+0x1724>
   124bc:	ldr	r2, [sp, #4]
   124c0:	ldr	r3, [r5]
   124c4:	cmp	r2, r3
   124c8:	bne	124f8 <__assert_fail@plt+0x1850>
   124cc:	add	sp, sp, #8
   124d0:	pop	{r4, r5, r6, pc}
   124d4:	ldr	r3, [pc, #76]	; 12528 <__assert_fail@plt+0x1880>
   124d8:	mov	r2, #180	; 0xb4
   124dc:	ldr	r0, [pc, #72]	; 1252c <__assert_fail@plt+0x1884>
   124e0:	ldr	r1, [pc, #72]	; 12530 <__assert_fail@plt+0x1888>
   124e4:	add	r3, pc, r3
   124e8:	add	r0, pc, r0
   124ec:	add	r3, r3, #36	; 0x24
   124f0:	add	r1, pc, r1
   124f4:	bl	10ca8 <__assert_fail@plt>
   124f8:	bl	10bd0 <__stack_chk_fail@plt>
   124fc:	ldr	r3, [pc, #48]	; 12534 <__assert_fail@plt+0x188c>
   12500:	mov	r2, #184	; 0xb8
   12504:	ldr	r0, [pc, #44]	; 12538 <__assert_fail@plt+0x1890>
   12508:	ldr	r1, [pc, #44]	; 1253c <__assert_fail@plt+0x1894>
   1250c:	add	r3, pc, r3
   12510:	add	r0, pc, r0
   12514:	add	r3, r3, #36	; 0x24
   12518:	add	r1, pc, r1
   1251c:	bl	10ca8 <__assert_fail@plt>
   12520:	muleq	r1, r4, fp
   12524:	andeq	r0, r0, r8, ror r0
   12528:	andeq	r1, r0, r0, lsr r3
   1252c:	ldrdeq	r1, [r0], -ip
   12530:			; <UNDEFINED> instruction: 0x000013b8
   12534:	andeq	r1, r0, r8, lsl #6
   12538:	andeq	r1, r0, r0, lsl #7
   1253c:	muleq	r0, r0, r3
   12540:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12544:	mov	r7, r2
   12548:	ldr	r5, [r2, #16]
   1254c:	mov	r6, r0
   12550:	ldr	ip, [pc, #676]	; 127fc <__assert_fail@plt+0x1b54>
   12554:	cmp	r5, #0
   12558:	add	ip, pc, ip
   1255c:	bne	12584 <__assert_fail@plt+0x18dc>
   12560:	ldr	r2, [pc, #664]	; 12800 <__assert_fail@plt+0x1b58>
   12564:	cmp	r1, #1
   12568:	add	r2, pc, r2
   1256c:	ldrne	r2, [pc, #656]	; 12804 <__assert_fail@plt+0x1b5c>
   12570:	addne	r2, pc, r2
   12574:	mov	r0, r6
   12578:	mov	r1, #2
   1257c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12580:	b	123cc <__assert_fail@plt+0x1724>
   12584:	cmp	r1, #1
   12588:	movne	r4, #1
   1258c:	bne	12680 <__assert_fail@plt+0x19d8>
   12590:	ldr	r2, [r2]
   12594:	ldr	sl, [pc, #620]	; 12808 <__assert_fail@plt+0x1b60>
   12598:	add	r9, r5, r2
   1259c:	ldrb	r8, [r2]
   125a0:	add	sl, pc, sl
   125a4:	mov	r0, r2
   125a8:	sub	r8, r8, #48	; 0x30
   125ac:	cmp	r8, #9
   125b0:	movls	r8, #0
   125b4:	movhi	r8, #1
   125b8:	ldrb	r3, [r0], #1
   125bc:	tst	r3, #128	; 0x80
   125c0:	bne	125d8 <__assert_fail@plt+0x1930>
   125c4:	ldr	r4, [pc, #576]	; 1280c <__assert_fail@plt+0x1b64>
   125c8:	ldr	r4, [ip, r4]
   125cc:	ldrb	r4, [r4, r3]
   125d0:	cmp	r4, #0
   125d4:	bne	125dc <__assert_fail@plt+0x1934>
   125d8:	mov	r8, #0
   125dc:	cmp	r1, #0
   125e0:	beq	1260c <__assert_fail@plt+0x1964>
   125e4:	cmp	r3, #126	; 0x7e
   125e8:	movhi	r1, #0
   125ec:	bhi	1260c <__assert_fail@plt+0x1964>
   125f0:	cmp	r3, #31
   125f4:	movhi	r1, #1
   125f8:	bhi	1260c <__assert_fail@plt+0x1964>
   125fc:	add	r3, sl, r3
   12600:	ldrb	r1, [r3, #56]	; 0x38
   12604:	adds	r1, r1, #0
   12608:	movne	r1, #1
   1260c:	cmp	r0, r9
   12610:	bne	125b8 <__assert_fail@plt+0x1910>
   12614:	cmp	r8, #0
   12618:	bne	126f8 <__assert_fail@plt+0x1a50>
   1261c:	cmp	r1, #0
   12620:	bne	12708 <__assert_fail@plt+0x1a60>
   12624:	ldr	r3, [r6, #16]
   12628:	cmp	r3, #0
   1262c:	bne	127ac <__assert_fail@plt+0x1b04>
   12630:	ldr	r3, [pc, #472]	; 12810 <__assert_fail@plt+0x1b68>
   12634:	mov	r4, #124	; 0x7c
   12638:	ldr	r5, [ip, r3]
   1263c:	mov	r0, r6
   12640:	mov	r1, r4
   12644:	bl	12298 <__assert_fail@plt+0x15f0>
   12648:	mov	r0, r6
   1264c:	mov	r1, r5
   12650:	bl	123fc <__assert_fail@plt+0x1754>
   12654:	ldr	r1, [r7, #16]
   12658:	mov	r0, r6
   1265c:	ldr	r2, [r7]
   12660:	bl	123cc <__assert_fail@plt+0x1724>
   12664:	mov	r0, r6
   12668:	bl	1245c <__assert_fail@plt+0x17b4>
   1266c:	mov	r0, r6
   12670:	mov	r1, r4
   12674:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12678:	b	12298 <__assert_fail@plt+0x15f0>
   1267c:	mov	r4, r3
   12680:	add	r3, r4, r4, lsl #2
   12684:	lsl	r3, r3, #1
   12688:	cmp	r5, r3
   1268c:	bcs	1267c <__assert_fail@plt+0x19d4>
   12690:	cmp	r4, #0
   12694:	movwne	r8, #52429	; 0xcccd
   12698:	movtne	r8, #52428	; 0xcccc
   1269c:	beq	126d8 <__assert_fail@plt+0x1a30>
   126a0:	mov	r1, r4
   126a4:	mov	r0, r5
   126a8:	bl	12cb8 <__assert_fail@plt+0x2010>
   126ac:	add	r1, r0, #48	; 0x30
   126b0:	mov	r0, r6
   126b4:	uxtb	r1, r1
   126b8:	bl	12298 <__assert_fail@plt+0x15f0>
   126bc:	mov	r0, r5
   126c0:	mov	r1, r4
   126c4:	bl	12ea4 <__assert_fail@plt+0x21fc>
   126c8:	umull	r3, r4, r8, r4
   126cc:	lsrs	r4, r4, #3
   126d0:	mov	r5, r1
   126d4:	bne	126a0 <__assert_fail@plt+0x19f8>
   126d8:	mov	r0, r6
   126dc:	mov	r1, #58	; 0x3a
   126e0:	bl	12298 <__assert_fail@plt+0x15f0>
   126e4:	mov	r0, r6
   126e8:	ldr	r1, [r7, #16]
   126ec:	ldr	r2, [r7]
   126f0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   126f4:	b	123cc <__assert_fail@plt+0x1724>
   126f8:	mov	r0, r6
   126fc:	mov	r1, r5
   12700:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12704:	b	123cc <__assert_fail@plt+0x1724>
   12708:	mov	r0, r6
   1270c:	mov	r1, #34	; 0x22
   12710:	bl	12298 <__assert_fail@plt+0x15f0>
   12714:	ldr	r3, [r7, #16]
   12718:	cmp	r3, #0
   1271c:	beq	1279c <__assert_fail@plt+0x1af4>
   12720:	ldr	r3, [r7]
   12724:	mov	r5, r8
   12728:	ldr	r9, [pc, #228]	; 12814 <__assert_fail@plt+0x1b6c>
   1272c:	ldrb	r4, [r3]
   12730:	add	r9, pc, r9
   12734:	cmp	r4, #126	; 0x7e
   12738:	bls	12750 <__assert_fail@plt+0x1aa8>
   1273c:	b	127bc <__assert_fail@plt+0x1b14>
   12740:	ldr	r2, [r7]
   12744:	ldrb	r4, [r2, r5]
   12748:	cmp	r4, #126	; 0x7e
   1274c:	bhi	127bc <__assert_fail@plt+0x1b14>
   12750:	cmp	r4, #92	; 0x5c
   12754:	cmpne	r4, #34	; 0x22
   12758:	beq	12774 <__assert_fail@plt+0x1acc>
   1275c:	cmp	r4, #31
   12760:	bhi	12780 <__assert_fail@plt+0x1ad8>
   12764:	add	r4, r9, r4
   12768:	ldrb	r4, [r4, #56]	; 0x38
   1276c:	cmp	r4, #0
   12770:	beq	127e0 <__assert_fail@plt+0x1b38>
   12774:	mov	r0, r6
   12778:	mov	r1, #92	; 0x5c
   1277c:	bl	12298 <__assert_fail@plt+0x15f0>
   12780:	mov	r1, r4
   12784:	mov	r0, r6
   12788:	bl	12298 <__assert_fail@plt+0x15f0>
   1278c:	ldr	r2, [r7, #16]
   12790:	add	r5, r5, #1
   12794:	cmp	r2, r5
   12798:	bhi	12740 <__assert_fail@plt+0x1a98>
   1279c:	mov	r0, r6
   127a0:	mov	r1, #34	; 0x22
   127a4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   127a8:	b	12298 <__assert_fail@plt+0x15f0>
   127ac:	ldr	r3, [pc, #100]	; 12818 <__assert_fail@plt+0x1b70>
   127b0:	mov	r4, #35	; 0x23
   127b4:	ldr	r5, [ip, r3]
   127b8:	b	1263c <__assert_fail@plt+0x1994>
   127bc:	ldr	r3, [pc, #88]	; 1281c <__assert_fail@plt+0x1b74>
   127c0:	mov	r2, #239	; 0xef
   127c4:	ldr	r0, [pc, #84]	; 12820 <__assert_fail@plt+0x1b78>
   127c8:	ldr	r1, [pc, #84]	; 12824 <__assert_fail@plt+0x1b7c>
   127cc:	add	r3, pc, r3
   127d0:	add	r0, pc, r0
   127d4:	add	r3, r3, #88	; 0x58
   127d8:	add	r1, pc, r1
   127dc:	bl	10ca8 <__assert_fail@plt>
   127e0:	ldr	r0, [pc, #64]	; 12828 <__assert_fail@plt+0x1b80>
   127e4:	add	r3, r9, #88	; 0x58
   127e8:	ldr	r1, [pc, #60]	; 1282c <__assert_fail@plt+0x1b84>
   127ec:	mov	r2, #247	; 0xf7
   127f0:	add	r0, pc, r0
   127f4:	add	r1, pc, r1
   127f8:	bl	10ca8 <__assert_fail@plt>
   127fc:	andeq	r1, r1, r0, lsr #21
   12800:	andeq	r1, r0, ip, ror #6
   12804:	andeq	r1, r0, r8, ror #6
   12808:	andeq	r1, r0, r4, ror r2
   1280c:	muleq	r0, r4, r0
   12810:	andeq	r0, r0, ip, lsl #1
   12814:	andeq	r1, r0, r4, ror #1
   12818:	andeq	r0, r0, r0, lsl #1
   1281c:	andeq	r1, r0, r8, asr #32
   12820:	andeq	r1, r0, ip, lsl #2
   12824:	ldrdeq	r1, [r0], -r0
   12828:	strdeq	r1, [r0], -r8
   1282c:	strheq	r1, [r0], -r4
   12830:	push	{r4, r5, r6, r7, fp, lr}
   12834:	add	fp, sp, #20
   12838:	sub	sp, sp, #8
   1283c:	ldr	r5, [pc, #128]	; 128c4 <__assert_fail@plt+0x1c1c>
   12840:	ldr	r2, [pc, #128]	; 128c8 <__assert_fail@plt+0x1c20>
   12844:	add	r5, pc, r5
   12848:	mov	r4, r0
   1284c:	ldr	r3, [r0, #20]
   12850:	ldr	r6, [r5, r2]
   12854:	ldr	r0, [r0, #24]
   12858:	ldr	r1, [r3, #8]
   1285c:	ldr	ip, [r6]
   12860:	add	r2, r1, #14
   12864:	ldr	r3, [r3, #24]
   12868:	bic	r2, r2, #7
   1286c:	sub	sp, sp, r2
   12870:	str	ip, [fp, #-24]	; 0xffffffe8
   12874:	mov	r2, sp
   12878:	blx	r3
   1287c:	ldr	r3, [pc, #72]	; 128cc <__assert_fail@plt+0x1c24>
   12880:	mov	r0, r4
   12884:	ldr	r1, [r5, r3]
   12888:	bl	123fc <__assert_fail@plt+0x1754>
   1288c:	ldr	r3, [r4, #20]
   12890:	mov	r2, sp
   12894:	mov	r0, r4
   12898:	ldr	r1, [r3, #8]
   1289c:	bl	123cc <__assert_fail@plt+0x1724>
   128a0:	mov	r0, r4
   128a4:	bl	1245c <__assert_fail@plt+0x17b4>
   128a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   128ac:	ldr	r3, [r6]
   128b0:	cmp	r2, r3
   128b4:	bne	128c0 <__assert_fail@plt+0x1c18>
   128b8:	sub	sp, fp, #20
   128bc:	pop	{r4, r5, r6, r7, fp, pc}
   128c0:	bl	10bd0 <__stack_chk_fail@plt>
   128c4:			; <UNDEFINED> instruction: 0x000117b4
   128c8:	andeq	r0, r0, r8, ror r0
   128cc:	andeq	r0, r0, r0, lsl #1
   128d0:	push	{r3, r4, r5, lr}
   128d4:	mov	r4, r0
   128d8:	ldr	r3, [r0, #12]
   128dc:	mov	r5, r1
   128e0:	ldr	r0, [r0]
   128e4:	cmp	r3, #0
   128e8:	ldreq	r1, [r4, #4]
   128ec:	movne	r1, #0
   128f0:	bl	11978 <__assert_fail@plt+0xcd0>
   128f4:	ldr	r3, [r4]
   128f8:	ldr	r3, [r3, #32]
   128fc:	cmp	r3, r5
   12900:	popeq	{r3, r4, r5, pc}
   12904:	ldr	r0, [pc, #4]	; 12910 <__assert_fail@plt+0x1c68>
   12908:	add	r0, pc, r0
   1290c:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12910:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12914:	push	{r4, lr}
   12918:	mov	r2, #0
   1291c:	mov	r4, r0
   12920:	str	r2, [r0], #4
   12924:	bl	10bc4 <nettle_buffer_init@plt>
   12928:	add	r0, r4, #24
   1292c:	pop	{r4, lr}
   12930:	b	10bc4 <nettle_buffer_init@plt>
   12934:	push	{r4, lr}
   12938:	mov	r4, r0
   1293c:	add	r0, r0, #4
   12940:	bl	10c84 <nettle_buffer_clear@plt>
   12944:	add	r0, r4, #24
   12948:	pop	{r4, lr}
   1294c:	b	10c84 <nettle_buffer_clear@plt>
   12950:	mov	r3, #1
   12954:	str	r1, [r0]
   12958:	stmib	r0, {r2, r3}
   1295c:	mov	r1, #0
   12960:	str	r1, [r0, #12]
   12964:	bx	lr
   12968:	push	{r3, r4, r5, r6, r7, lr}
   1296c:	mov	r4, r0
   12970:	ldr	r3, [r4, #12]
   12974:	add	r6, r1, #24
   12978:	ldr	r0, [r0]
   1297c:	mov	r5, r1
   12980:	cmp	r3, #0
   12984:	mov	r2, r6
   12988:	ldreq	r1, [r4, #4]
   1298c:	movne	r1, #0
   12990:	bl	11978 <__assert_fail@plt+0xcd0>
   12994:	ldr	r0, [r4]
   12998:	ldr	r3, [r0, #32]
   1299c:	cmp	r3, #9
   129a0:	addls	pc, pc, r3, lsl #2
   129a4:	b	12b34 <__assert_fail@plt+0x1e8c>
   129a8:	b	129dc <__assert_fail@plt+0x1d34>
   129ac:	b	12b34 <__assert_fail@plt+0x1e8c>
   129b0:	b	12a4c <__assert_fail@plt+0x1da4>
   129b4:	b	12a58 <__assert_fail@plt+0x1db0>
   129b8:	b	12a70 <__assert_fail@plt+0x1dc8>
   129bc:	b	12aa4 <__assert_fail@plt+0x1dfc>
   129c0:	b	12ac4 <__assert_fail@plt+0x1e1c>
   129c4:	b	12b34 <__assert_fail@plt+0x1e8c>
   129c8:	b	12b14 <__assert_fail@plt+0x1e6c>
   129cc:	b	129d0 <__assert_fail@plt+0x1d28>
   129d0:	ldr	r0, [pc, #408]	; 12b70 <__assert_fail@plt+0x1ec8>
   129d4:	add	r0, pc, r0
   129d8:	bl	12b9c <__assert_fail@plt+0x1ef4>
   129dc:	mov	r2, #0
   129e0:	ldr	r3, [r4, #8]
   129e4:	str	r2, [r5]
   129e8:	ldr	r2, [r4, #12]
   129ec:	cmp	r2, r3
   129f0:	popne	{r3, r4, r5, r6, r7, pc}
   129f4:	mov	r2, r6
   129f8:	mov	r0, r4
   129fc:	mov	r1, #9
   12a00:	bl	128d0 <__assert_fail@plt+0x1c28>
   12a04:	ldr	r3, [r4, #12]
   12a08:	cmp	r3, #0
   12a0c:	beq	12b38 <__assert_fail@plt+0x1e90>
   12a10:	ldr	r2, [r4, #8]
   12a14:	cmp	r3, r2
   12a18:	subeq	r3, r3, #1
   12a1c:	streq	r3, [r4, #8]
   12a20:	moveq	r2, #0
   12a24:	streq	r2, [r4, #12]
   12a28:	popeq	{r3, r4, r5, r6, r7, pc}
   12a2c:	ldr	r0, [pc, #320]	; 12b74 <__assert_fail@plt+0x1ecc>
   12a30:	mov	r2, #113	; 0x71
   12a34:	ldr	r1, [pc, #316]	; 12b78 <__assert_fail@plt+0x1ed0>
   12a38:	ldr	r3, [pc, #316]	; 12b7c <__assert_fail@plt+0x1ed4>
   12a3c:	add	r0, pc, r0
   12a40:	add	r1, pc, r1
   12a44:	add	r3, pc, r3
   12a48:	bl	10ca8 <__assert_fail@plt>
   12a4c:	mov	r3, #2
   12a50:	str	r3, [r5]
   12a54:	pop	{r3, r4, r5, r6, r7, pc}
   12a58:	ldr	r2, [r4, #8]
   12a5c:	mov	r3, #3
   12a60:	add	r2, r2, #1
   12a64:	str	r2, [r4, #8]
   12a68:	str	r3, [r5]
   12a6c:	pop	{r3, r4, r5, r6, r7, pc}
   12a70:	ldr	r3, [r4, #8]
   12a74:	ldr	r2, [r4, #12]
   12a78:	cmp	r3, r2
   12a7c:	beq	12b64 <__assert_fail@plt+0x1ebc>
   12a80:	sub	r3, r3, #1
   12a84:	str	r3, [r4, #8]
   12a88:	cmp	r3, #0
   12a8c:	movne	r1, #4
   12a90:	strne	r1, [r5]
   12a94:	bne	129ec <__assert_fail@plt+0x1d44>
   12a98:	ldr	r0, [pc, #224]	; 12b80 <__assert_fail@plt+0x1ed8>
   12a9c:	add	r0, pc, r0
   12aa0:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12aa4:	ldr	r3, [r4, #8]
   12aa8:	cmp	r3, #1
   12aac:	movls	r3, #5
   12ab0:	strls	r3, [r5]
   12ab4:	popls	{r3, r4, r5, r6, r7, pc}
   12ab8:	ldr	r0, [pc, #196]	; 12b84 <__assert_fail@plt+0x1edc>
   12abc:	add	r0, pc, r0
   12ac0:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12ac4:	add	r7, r5, #4
   12ac8:	mov	r0, r4
   12acc:	mov	r1, #0
   12ad0:	mov	r2, r7
   12ad4:	bl	128d0 <__assert_fail@plt+0x1c28>
   12ad8:	mov	r0, r4
   12adc:	mov	r2, r7
   12ae0:	mov	r1, #7
   12ae4:	bl	128d0 <__assert_fail@plt+0x1c28>
   12ae8:	mov	r2, r6
   12aec:	mov	r0, r4
   12af0:	mov	r1, #0
   12af4:	bl	128d0 <__assert_fail@plt+0x1c28>
   12af8:	mov	r2, #1
   12afc:	ldr	r3, [r4, #8]
   12b00:	str	r2, [r5]
   12b04:	ldr	r2, [r4, #12]
   12b08:	cmp	r2, r3
   12b0c:	popne	{r3, r4, r5, r6, r7, pc}
   12b10:	b	129f4 <__assert_fail@plt+0x1d4c>
   12b14:	ldr	r3, [r4, #4]
   12b18:	cmp	r3, #0
   12b1c:	beq	12b58 <__assert_fail@plt+0x1eb0>
   12b20:	ldr	r3, [r4, #8]
   12b24:	add	r3, r3, #1
   12b28:	str	r3, [r4, #8]
   12b2c:	str	r3, [r4, #12]
   12b30:	b	12980 <__assert_fail@plt+0x1cd8>
   12b34:	bl	10c9c <abort@plt>
   12b38:	ldr	r0, [pc, #72]	; 12b88 <__assert_fail@plt+0x1ee0>
   12b3c:	mov	r2, #112	; 0x70
   12b40:	ldr	r1, [pc, #68]	; 12b8c <__assert_fail@plt+0x1ee4>
   12b44:	ldr	r3, [pc, #68]	; 12b90 <__assert_fail@plt+0x1ee8>
   12b48:	add	r0, pc, r0
   12b4c:	add	r1, pc, r1
   12b50:	add	r3, pc, r3
   12b54:	bl	10ca8 <__assert_fail@plt>
   12b58:	ldr	r0, [pc, #52]	; 12b94 <__assert_fail@plt+0x1eec>
   12b5c:	add	r0, pc, r0
   12b60:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12b64:	ldr	r0, [pc, #44]	; 12b98 <__assert_fail@plt+0x1ef0>
   12b68:	add	r0, pc, r0
   12b6c:	bl	12b9c <__assert_fail@plt+0x1ef4>
   12b70:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12b74:	andeq	r0, r0, ip, lsl pc
   12b78:	andeq	r0, r0, r0, lsl pc
   12b7c:	andeq	r0, r0, r8, lsr #29
   12b80:	andeq	r0, r0, r8, lsr #9
   12b84:	andeq	r0, r0, r0, lsr #9
   12b88:	strdeq	r0, [r0], -r4
   12b8c:	andeq	r0, r0, r4, lsl #28
   12b90:	muleq	r0, ip, sp
   12b94:	andeq	r0, r0, r0, lsr #28
   12b98:	andeq	r0, r0, r0, lsr #27
   12b9c:	push	{r0, r1, r2, r3}
   12ba0:	mov	r1, #1
   12ba4:	ldr	r0, [pc, #64]	; 12bec <__assert_fail@plt+0x1f44>
   12ba8:	push	{r4, lr}
   12bac:	add	r0, pc, r0
   12bb0:	ldr	r4, [pc, #56]	; 12bf0 <__assert_fail@plt+0x1f48>
   12bb4:	sub	sp, sp, #8
   12bb8:	add	ip, sp, #20
   12bbc:	ldr	lr, [pc, #48]	; 12bf4 <__assert_fail@plt+0x1f4c>
   12bc0:	ldr	r2, [sp, #16]
   12bc4:	ldr	r4, [r0, r4]
   12bc8:	mov	r3, ip
   12bcc:	str	ip, [sp]
   12bd0:	ldr	ip, [r4]
   12bd4:	str	ip, [sp, #4]
   12bd8:	ldr	r0, [r0, lr]
   12bdc:	ldr	r0, [r0]
   12be0:	bl	10c24 <__vfprintf_chk@plt>
   12be4:	mov	r0, #1
   12be8:	bl	10c48 <exit@plt>
   12bec:	andeq	r1, r1, ip, asr #8
   12bf0:	andeq	r0, r0, r8, ror r0
   12bf4:	andeq	r0, r0, r8, lsl #1
   12bf8:	push	{r0, r1, r2, r3}
   12bfc:	mov	r1, #1
   12c00:	ldr	r0, [pc, #92]	; 12c64 <__assert_fail@plt+0x1fbc>
   12c04:	push	{r4, lr}
   12c08:	add	r0, pc, r0
   12c0c:	ldr	r4, [pc, #84]	; 12c68 <__assert_fail@plt+0x1fc0>
   12c10:	sub	sp, sp, #8
   12c14:	add	ip, sp, #20
   12c18:	ldr	lr, [pc, #76]	; 12c6c <__assert_fail@plt+0x1fc4>
   12c1c:	ldr	r2, [sp, #16]
   12c20:	ldr	r4, [r0, r4]
   12c24:	mov	r3, ip
   12c28:	str	ip, [sp]
   12c2c:	ldr	ip, [r4]
   12c30:	str	ip, [sp, #4]
   12c34:	ldr	r0, [r0, lr]
   12c38:	ldr	r0, [r0]
   12c3c:	bl	10c24 <__vfprintf_chk@plt>
   12c40:	ldr	r2, [sp, #4]
   12c44:	ldr	r3, [r4]
   12c48:	cmp	r2, r3
   12c4c:	bne	12c60 <__assert_fail@plt+0x1fb8>
   12c50:	add	sp, sp, #8
   12c54:	pop	{r4, lr}
   12c58:	add	sp, sp, #16
   12c5c:	bx	lr
   12c60:	bl	10bd0 <__stack_chk_fail@plt>
   12c64:	strdeq	r1, [r1], -r0
   12c68:	andeq	r0, r0, r8, ror r0
   12c6c:	andeq	r0, r0, r8, lsl #1
   12c70:	push	{r3, lr}
   12c74:	bl	10c00 <malloc@plt>
   12c78:	ldr	r3, [pc, #44]	; 12cac <__assert_fail@plt+0x2004>
   12c7c:	add	r3, pc, r3
   12c80:	cmp	r0, #0
   12c84:	popne	{r3, pc}
   12c88:	ldr	ip, [pc, #32]	; 12cb0 <__assert_fail@plt+0x2008>
   12c8c:	mov	r1, #1
   12c90:	ldr	r0, [pc, #28]	; 12cb4 <__assert_fail@plt+0x200c>
   12c94:	mov	r2, #26
   12c98:	ldr	r3, [r3, ip]
   12c9c:	add	r0, pc, r0
   12ca0:	ldr	r3, [r3]
   12ca4:	bl	10be8 <fwrite@plt>
   12ca8:	bl	10c9c <abort@plt>
   12cac:	andeq	r1, r1, ip, ror r3
   12cb0:	andeq	r0, r0, r8, lsl #1
   12cb4:			; <UNDEFINED> instruction: 0x00000db0
   12cb8:	subs	r2, r1, #1
   12cbc:	bxeq	lr
   12cc0:	bcc	12e98 <__assert_fail@plt+0x21f0>
   12cc4:	cmp	r0, r1
   12cc8:	bls	12e7c <__assert_fail@plt+0x21d4>
   12ccc:	tst	r1, r2
   12cd0:	beq	12e88 <__assert_fail@plt+0x21e0>
   12cd4:	clz	r3, r0
   12cd8:	clz	r2, r1
   12cdc:	sub	r3, r2, r3
   12ce0:	rsbs	r3, r3, #31
   12ce4:	addne	r3, r3, r3, lsl #1
   12ce8:	mov	r2, #0
   12cec:	addne	pc, pc, r3, lsl #2
   12cf0:	nop	{0}
   12cf4:	cmp	r0, r1, lsl #31
   12cf8:	adc	r2, r2, r2
   12cfc:	subcs	r0, r0, r1, lsl #31
   12d00:	cmp	r0, r1, lsl #30
   12d04:	adc	r2, r2, r2
   12d08:	subcs	r0, r0, r1, lsl #30
   12d0c:	cmp	r0, r1, lsl #29
   12d10:	adc	r2, r2, r2
   12d14:	subcs	r0, r0, r1, lsl #29
   12d18:	cmp	r0, r1, lsl #28
   12d1c:	adc	r2, r2, r2
   12d20:	subcs	r0, r0, r1, lsl #28
   12d24:	cmp	r0, r1, lsl #27
   12d28:	adc	r2, r2, r2
   12d2c:	subcs	r0, r0, r1, lsl #27
   12d30:	cmp	r0, r1, lsl #26
   12d34:	adc	r2, r2, r2
   12d38:	subcs	r0, r0, r1, lsl #26
   12d3c:	cmp	r0, r1, lsl #25
   12d40:	adc	r2, r2, r2
   12d44:	subcs	r0, r0, r1, lsl #25
   12d48:	cmp	r0, r1, lsl #24
   12d4c:	adc	r2, r2, r2
   12d50:	subcs	r0, r0, r1, lsl #24
   12d54:	cmp	r0, r1, lsl #23
   12d58:	adc	r2, r2, r2
   12d5c:	subcs	r0, r0, r1, lsl #23
   12d60:	cmp	r0, r1, lsl #22
   12d64:	adc	r2, r2, r2
   12d68:	subcs	r0, r0, r1, lsl #22
   12d6c:	cmp	r0, r1, lsl #21
   12d70:	adc	r2, r2, r2
   12d74:	subcs	r0, r0, r1, lsl #21
   12d78:	cmp	r0, r1, lsl #20
   12d7c:	adc	r2, r2, r2
   12d80:	subcs	r0, r0, r1, lsl #20
   12d84:	cmp	r0, r1, lsl #19
   12d88:	adc	r2, r2, r2
   12d8c:	subcs	r0, r0, r1, lsl #19
   12d90:	cmp	r0, r1, lsl #18
   12d94:	adc	r2, r2, r2
   12d98:	subcs	r0, r0, r1, lsl #18
   12d9c:	cmp	r0, r1, lsl #17
   12da0:	adc	r2, r2, r2
   12da4:	subcs	r0, r0, r1, lsl #17
   12da8:	cmp	r0, r1, lsl #16
   12dac:	adc	r2, r2, r2
   12db0:	subcs	r0, r0, r1, lsl #16
   12db4:	cmp	r0, r1, lsl #15
   12db8:	adc	r2, r2, r2
   12dbc:	subcs	r0, r0, r1, lsl #15
   12dc0:	cmp	r0, r1, lsl #14
   12dc4:	adc	r2, r2, r2
   12dc8:	subcs	r0, r0, r1, lsl #14
   12dcc:	cmp	r0, r1, lsl #13
   12dd0:	adc	r2, r2, r2
   12dd4:	subcs	r0, r0, r1, lsl #13
   12dd8:	cmp	r0, r1, lsl #12
   12ddc:	adc	r2, r2, r2
   12de0:	subcs	r0, r0, r1, lsl #12
   12de4:	cmp	r0, r1, lsl #11
   12de8:	adc	r2, r2, r2
   12dec:	subcs	r0, r0, r1, lsl #11
   12df0:	cmp	r0, r1, lsl #10
   12df4:	adc	r2, r2, r2
   12df8:	subcs	r0, r0, r1, lsl #10
   12dfc:	cmp	r0, r1, lsl #9
   12e00:	adc	r2, r2, r2
   12e04:	subcs	r0, r0, r1, lsl #9
   12e08:	cmp	r0, r1, lsl #8
   12e0c:	adc	r2, r2, r2
   12e10:	subcs	r0, r0, r1, lsl #8
   12e14:	cmp	r0, r1, lsl #7
   12e18:	adc	r2, r2, r2
   12e1c:	subcs	r0, r0, r1, lsl #7
   12e20:	cmp	r0, r1, lsl #6
   12e24:	adc	r2, r2, r2
   12e28:	subcs	r0, r0, r1, lsl #6
   12e2c:	cmp	r0, r1, lsl #5
   12e30:	adc	r2, r2, r2
   12e34:	subcs	r0, r0, r1, lsl #5
   12e38:	cmp	r0, r1, lsl #4
   12e3c:	adc	r2, r2, r2
   12e40:	subcs	r0, r0, r1, lsl #4
   12e44:	cmp	r0, r1, lsl #3
   12e48:	adc	r2, r2, r2
   12e4c:	subcs	r0, r0, r1, lsl #3
   12e50:	cmp	r0, r1, lsl #2
   12e54:	adc	r2, r2, r2
   12e58:	subcs	r0, r0, r1, lsl #2
   12e5c:	cmp	r0, r1, lsl #1
   12e60:	adc	r2, r2, r2
   12e64:	subcs	r0, r0, r1, lsl #1
   12e68:	cmp	r0, r1
   12e6c:	adc	r2, r2, r2
   12e70:	subcs	r0, r0, r1
   12e74:	mov	r0, r2
   12e78:	bx	lr
   12e7c:	moveq	r0, #1
   12e80:	movne	r0, #0
   12e84:	bx	lr
   12e88:	clz	r2, r1
   12e8c:	rsb	r2, r2, #31
   12e90:	lsr	r0, r0, r2
   12e94:	bx	lr
   12e98:	cmp	r0, #0
   12e9c:	mvnne	r0, #0
   12ea0:	b	12ec4 <__assert_fail@plt+0x221c>
   12ea4:	cmp	r1, #0
   12ea8:	beq	12e98 <__assert_fail@plt+0x21f0>
   12eac:	push	{r0, r1, lr}
   12eb0:	bl	12cb8 <__assert_fail@plt+0x2010>
   12eb4:	pop	{r1, r2, lr}
   12eb8:	mul	r3, r2, r0
   12ebc:	sub	r1, r1, r3
   12ec0:	bx	lr
   12ec4:	push	{r1, lr}
   12ec8:	mov	r0, #8
   12ecc:	bl	10b70 <raise@plt>
   12ed0:	pop	{r1, pc}
   12ed4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12ed8:	mov	r7, r0
   12edc:	ldr	r6, [pc, #76]	; 12f30 <__assert_fail@plt+0x2288>
   12ee0:	mov	r8, r1
   12ee4:	ldr	r5, [pc, #72]	; 12f34 <__assert_fail@plt+0x228c>
   12ee8:	mov	r9, r2
   12eec:	add	r6, pc, r6
   12ef0:	bl	10b50 <_init@@Base>
   12ef4:	add	r5, pc, r5
   12ef8:	rsb	r6, r5, r6
   12efc:	asrs	r6, r6, #2
   12f00:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   12f04:	sub	r5, r5, #4
   12f08:	mov	r4, #0
   12f0c:	add	r4, r4, #1
   12f10:	ldr	r3, [r5, #4]!
   12f14:	mov	r0, r7
   12f18:	mov	r1, r8
   12f1c:	mov	r2, r9
   12f20:	blx	r3
   12f24:	cmp	r4, r6
   12f28:	bne	12f0c <__assert_fail@plt+0x2264>
   12f2c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12f30:	andeq	r0, r1, ip, asr pc
   12f34:	andeq	r0, r1, r0, asr pc
   12f38:	bx	lr

Disassembly of section .fini:

00012f3c <_fini@@Base>:
   12f3c:	push	{r3, lr}
   12f40:	pop	{r3, pc}
