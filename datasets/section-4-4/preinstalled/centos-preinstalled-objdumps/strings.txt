
centos-preinstalled/strings:     file format elf32-littlearm


Disassembly of section .init:

000112e8 <_init@@Base>:
   112e8:	push	{r3, lr}
   112ec:	bl	11dc0 <__assert_fail@plt+0x740>
   112f0:	pop	{r3, pc}

Disassembly of section .plt:

000112f4 <bfd_scan_vma@plt-0x14>:
   112f4:	push	{lr}		; (str lr, [sp, #-4]!)
   112f8:	ldr	lr, [pc, #4]	; 11304 <_init@@Base+0x1c>
   112fc:	add	lr, pc, lr
   11300:	ldr	pc, [lr, #8]!
   11304:	strdeq	r5, [r1], -ip

00011308 <bfd_scan_vma@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #86016	; 0x15000
   11310:	ldr	pc, [ip, #3324]!	; 0xcfc

00011314 <strcmp@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #86016	; 0x15000
   1131c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011320 <strtol@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #86016	; 0x15000
   11328:	ldr	pc, [ip, #3308]!	; 0xcec

0001132c <fflush@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #86016	; 0x15000
   11334:	ldr	pc, [ip, #3300]!	; 0xce4

00011338 <bfd_arch_list@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #86016	; 0x15000
   11340:	ldr	pc, [ip, #3292]!	; 0xcdc

00011344 <memmove@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #86016	; 0x15000
   1134c:	ldr	pc, [ip, #3284]!	; 0xcd4

00011350 <bfd_set_default_target@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #86016	; 0x15000
   11358:	ldr	pc, [ip, #3276]!	; 0xccc

0001135c <free@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #86016	; 0x15000
   11364:	ldr	pc, [ip, #3268]!	; 0xcc4

00011368 <ferror@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #86016	; 0x15000
   11370:	ldr	pc, [ip, #3260]!	; 0xcbc

00011374 <bfd_stat@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #86016	; 0x15000
   1137c:	ldr	pc, [ip, #3252]!	; 0xcb4

00011380 <memcpy@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #86016	; 0x15000
   11388:	ldr	pc, [ip, #3244]!	; 0xcac

0001138c <bfd_openr@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #86016	; 0x15000
   11394:	ldr	pc, [ip, #3236]!	; 0xca4

00011398 <ftell@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #86016	; 0x15000
   113a0:	ldr	pc, [ip, #3228]!	; 0xc9c

000113a4 <ctime@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #86016	; 0x15000
   113ac:	ldr	pc, [ip, #3220]!	; 0xc94

000113b0 <bfd_get_section_contents@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #86016	; 0x15000
   113b8:	ldr	pc, [ip, #3212]!	; 0xc8c

000113bc <dcgettext@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #86016	; 0x15000
   113c4:	ldr	pc, [ip, #3204]!	; 0xc84

000113c8 <bfd_malloc@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #86016	; 0x15000
   113d0:	ldr	pc, [ip, #3196]!	; 0xc7c

000113d4 <__stack_chk_fail@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #86016	; 0x15000
   113dc:	ldr	pc, [ip, #3188]!	; 0xc74

000113e0 <unlink@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #86016	; 0x15000
   113e8:	ldr	pc, [ip, #3180]!	; 0xc6c

000113ec <xrealloc@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #86016	; 0x15000
   113f4:	ldr	pc, [ip, #3172]!	; 0xc64

000113f8 <textdomain@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #86016	; 0x15000
   11400:	ldr	pc, [ip, #3164]!	; 0xc5c

00011404 <perror@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #86016	; 0x15000
   1140c:	ldr	pc, [ip, #3156]!	; 0xc54

00011410 <bfd_target_list@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #86016	; 0x15000
   11418:	ldr	pc, [ip, #3148]!	; 0xc4c

0001141c <bfd_get_error@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #86016	; 0x15000
   11424:	ldr	pc, [ip, #3140]!	; 0xc44

00011428 <_IO_putc@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #86016	; 0x15000
   11430:	ldr	pc, [ip, #3132]!	; 0xc3c

00011434 <fwrite@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #86016	; 0x15000
   1143c:	ldr	pc, [ip, #3124]!	; 0xc34

00011440 <xmalloc@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #86016	; 0x15000
   11448:	ldr	pc, [ip, #3116]!	; 0xc2c

0001144c <xmalloc_set_program_name@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #86016	; 0x15000
   11454:	ldr	pc, [ip, #3108]!	; 0xc24

00011458 <xstrdup@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #86016	; 0x15000
   11460:	ldr	pc, [ip, #3100]!	; 0xc1c

00011464 <strcpy@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #86016	; 0x15000
   1146c:	ldr	pc, [ip, #3092]!	; 0xc14

00011470 <fread@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #86016	; 0x15000
   11478:	ldr	pc, [ip, #3084]!	; 0xc0c

0001147c <bfd_init@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #86016	; 0x15000
   11484:	ldr	pc, [ip, #3076]!	; 0xc04

00011488 <mkstemps64@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #86016	; 0x15000
   11490:	ldr	pc, [ip, #3068]!	; 0xbfc

00011494 <getenv@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #86016	; 0x15000
   1149c:	ldr	pc, [ip, #3060]!	; 0xbf4

000114a0 <mkstemp64@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #86016	; 0x15000
   114a8:	ldr	pc, [ip, #3052]!	; 0xbec

000114ac <__gnu_Unwind_Find_exidx@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #86016	; 0x15000
   114b4:	ldr	pc, [ip, #3044]!	; 0xbe4

000114b8 <__cxa_begin_cleanup@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #86016	; 0x15000
   114c0:	ldr	pc, [ip, #3036]!	; 0xbdc

000114c4 <__libc_start_main@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #86016	; 0x15000
   114cc:	ldr	pc, [ip, #3028]!	; 0xbd4

000114d0 <strerror@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #86016	; 0x15000
   114d8:	ldr	pc, [ip, #3020]!	; 0xbcc

000114dc <__vfprintf_chk@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #86016	; 0x15000
   114e4:	ldr	pc, [ip, #3012]!	; 0xbc4

000114e8 <__gmon_start__@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #86016	; 0x15000
   114f0:	ldr	pc, [ip, #3004]!	; 0xbbc

000114f4 <bfd_set_format@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #86016	; 0x15000
   114fc:	ldr	pc, [ip, #2996]!	; 0xbb4

00011500 <getopt_long@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #86016	; 0x15000
   11508:	ldr	pc, [ip, #2988]!	; 0xbac

0001150c <exit@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #86016	; 0x15000
   11514:	ldr	pc, [ip, #2980]!	; 0xba4

00011518 <__cxa_type_match@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #86016	; 0x15000
   11520:	ldr	pc, [ip, #2972]!	; 0xb9c

00011524 <strtoul@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #86016	; 0x15000
   1152c:	ldr	pc, [ip, #2964]!	; 0xb94

00011530 <strlen@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #86016	; 0x15000
   11538:	ldr	pc, [ip, #2956]!	; 0xb8c

0001153c <bfd_close_all_done@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #86016	; 0x15000
   11544:	ldr	pc, [ip, #2948]!	; 0xb84

00011548 <bfd_printable_arch_mach@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #86016	; 0x15000
   11550:	ldr	pc, [ip, #2940]!	; 0xb7c

00011554 <__errno_location@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #86016	; 0x15000
   1155c:	ldr	pc, [ip, #2932]!	; 0xb74

00011560 <__sprintf_chk@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #86016	; 0x15000
   11568:	ldr	pc, [ip, #2924]!	; 0xb6c

0001156c <__printf_chk@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #86016	; 0x15000
   11574:	ldr	pc, [ip, #2916]!	; 0xb64

00011578 <__fprintf_chk@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #86016	; 0x15000
   11580:	ldr	pc, [ip, #2908]!	; 0xb5c

00011584 <access@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #86016	; 0x15000
   1158c:	ldr	pc, [ip, #2900]!	; 0xb54

00011590 <fclose@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #86016	; 0x15000
   11598:	ldr	pc, [ip, #2892]!	; 0xb4c

0001159c <bfd_openw@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #86016	; 0x15000
   115a4:	ldr	pc, [ip, #2884]!	; 0xb44

000115a8 <bfd_set_error_program_name@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #86016	; 0x15000
   115b0:	ldr	pc, [ip, #2876]!	; 0xb3c

000115b4 <__uflow@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #86016	; 0x15000
   115bc:	ldr	pc, [ip, #2868]!	; 0xb34

000115c0 <setlocale@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #86016	; 0x15000
   115c8:	ldr	pc, [ip, #2860]!	; 0xb2c

000115cc <strrchr@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #86016	; 0x15000
   115d4:	ldr	pc, [ip, #2852]!	; 0xb24

000115d8 <fputc@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #86016	; 0x15000
   115e0:	ldr	pc, [ip, #2844]!	; 0xb1c

000115e4 <xexit@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #86016	; 0x15000
   115ec:	ldr	pc, [ip, #2836]!	; 0xb14

000115f0 <bfd_close@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #86016	; 0x15000
   115f8:	ldr	pc, [ip, #2828]!	; 0xb0c

000115fc <mkdtemp@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #86016	; 0x15000
   11604:	ldr	pc, [ip, #2820]!	; 0xb04

00011608 <fopen64@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #86016	; 0x15000
   11610:	ldr	pc, [ip, #2812]!	; 0xafc

00011614 <bfd_errmsg@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #86016	; 0x15000
   1161c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011620 <bindtextdomain@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #86016	; 0x15000
   11628:	ldr	pc, [ip, #2796]!	; 0xaec

0001162c <bfd_check_format@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #86016	; 0x15000
   11634:	ldr	pc, [ip, #2788]!	; 0xae4

00011638 <bfd_map_over_sections@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #86016	; 0x15000
   11640:	ldr	pc, [ip, #2780]!	; 0xadc

00011644 <fseek@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #86016	; 0x15000
   1164c:	ldr	pc, [ip, #2772]!	; 0xad4

00011650 <__xstat64@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #86016	; 0x15000
   11658:	ldr	pc, [ip, #2764]!	; 0xacc

0001165c <fputs@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #86016	; 0x15000
   11664:	ldr	pc, [ip, #2756]!	; 0xac4

00011668 <abort@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #86016	; 0x15000
   11670:	ldr	pc, [ip, #2748]!	; 0xabc

00011674 <close@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #86016	; 0x15000
   1167c:	ldr	pc, [ip, #2740]!	; 0xab4

00011680 <__assert_fail@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #86016	; 0x15000
   11688:	ldr	pc, [ip, #2732]!	; 0xaac

Disassembly of section .text:

0001168c <.text>:
   1168c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11690:	movw	r6, #29208	; 0x7218
   11694:	movt	r6, #2
   11698:	sub	sp, sp, #164	; 0xa4
   1169c:	movw	r5, #29824	; 0x7480
   116a0:	movt	r5, #2
   116a4:	ldr	r3, [r6]
   116a8:	movw	r4, #29768	; 0x7448
   116ac:	str	r1, [sp, #16]
   116b0:	movw	r1, #22184	; 0x56a8
   116b4:	str	r0, [sp, #20]
   116b8:	movt	r1, #1
   116bc:	mov	r0, #6
   116c0:	str	r3, [sp, #156]	; 0x9c
   116c4:	bl	115c0 <setlocale@plt>
   116c8:	movw	r0, #23404	; 0x5b6c
   116cc:	movw	r1, #23416	; 0x5b78
   116d0:	movt	r0, #1
   116d4:	movt	r1, #1
   116d8:	movt	r4, #2
   116dc:	bl	11620 <bindtextdomain@plt>
   116e0:	movw	r0, #23404	; 0x5b6c
   116e4:	movt	r0, #1
   116e8:	movw	r9, #29216	; 0x7220
   116ec:	bl	113f8 <textdomain@plt>
   116f0:	ldr	r3, [sp, #16]
   116f4:	movw	r8, #29760	; 0x7440
   116f8:	movt	r9, #2
   116fc:	movt	r8, #2
   11700:	mov	fp, r4
   11704:	ldr	r3, [r3]
   11708:	mov	r0, r3
   1170c:	str	r3, [r5]
   11710:	bl	1144c <xmalloc_set_program_name@plt>
   11714:	ldr	r0, [r5]
   11718:	bl	115a8 <bfd_set_error_program_name@plt>
   1171c:	add	r1, sp, #16
   11720:	add	r0, sp, #20
   11724:	bl	13908 <__assert_fail@plt+0x2288>
   11728:	mov	r3, #0
   1172c:	mov	sl, r3
   11730:	mov	r1, #4
   11734:	mov	r2, #115	; 0x73
   11738:	str	r1, [r4, #8]
   1173c:	strb	r2, [r4, #4]
   11740:	str	r3, [r4, #12]
   11744:	str	r3, [r4, #20]
   11748:	str	r3, [r4, #16]
   1174c:	str	r3, [r4, #36]	; 0x24
   11750:	str	r3, [r4, #40]	; 0x28
   11754:	str	r3, [r4, #28]
   11758:	ldr	r0, [sp, #20]
   1175c:	mov	r7, #0
   11760:	ldr	r1, [sp, #16]
   11764:	movw	r2, #23472	; 0x5bb0
   11768:	str	r7, [sp]
   1176c:	movt	r2, #1
   11770:	movw	r3, #29016	; 0x7158
   11774:	movt	r3, #2
   11778:	bl	11500 <getopt_long@plt>
   1177c:	cmn	r0, #1
   11780:	beq	119d0 <__assert_fail@plt+0x350>
   11784:	sub	r0, r0, #63	; 0x3f
   11788:	cmp	r0, #56	; 0x38
   1178c:	ldrls	pc, [pc, r0, lsl #2]
   11790:	b	119bc <__assert_fail@plt+0x33c>
   11794:	andeq	r1, r1, r8, ror r8
   11798:			; <UNDEFINED> instruction: 0x000119bc
   1179c:			; <UNDEFINED> instruction: 0x000119bc
   117a0:			; <UNDEFINED> instruction: 0x000119bc
   117a4:			; <UNDEFINED> instruction: 0x000119bc
   117a8:			; <UNDEFINED> instruction: 0x000119bc
   117ac:			; <UNDEFINED> instruction: 0x000119bc
   117b0:			; <UNDEFINED> instruction: 0x000119bc
   117b4:			; <UNDEFINED> instruction: 0x000119bc
   117b8:	andeq	r1, r1, r8, lsr #19
   117bc:			; <UNDEFINED> instruction: 0x000119bc
   117c0:			; <UNDEFINED> instruction: 0x000119bc
   117c4:			; <UNDEFINED> instruction: 0x000119bc
   117c8:			; <UNDEFINED> instruction: 0x000119bc
   117cc:			; <UNDEFINED> instruction: 0x000119bc
   117d0:			; <UNDEFINED> instruction: 0x000119bc
   117d4:			; <UNDEFINED> instruction: 0x000119bc
   117d8:			; <UNDEFINED> instruction: 0x000119bc
   117dc:			; <UNDEFINED> instruction: 0x000119bc
   117e0:			; <UNDEFINED> instruction: 0x000119bc
   117e4:			; <UNDEFINED> instruction: 0x000119bc
   117e8:	muleq	r1, ip, r9
   117ec:			; <UNDEFINED> instruction: 0x000119bc
   117f0:	andeq	r1, r1, ip, lsl #19
   117f4:			; <UNDEFINED> instruction: 0x000119bc
   117f8:			; <UNDEFINED> instruction: 0x000119bc
   117fc:			; <UNDEFINED> instruction: 0x000119bc
   11800:			; <UNDEFINED> instruction: 0x000119bc
   11804:			; <UNDEFINED> instruction: 0x000119bc
   11808:			; <UNDEFINED> instruction: 0x000119bc
   1180c:			; <UNDEFINED> instruction: 0x000119bc
   11810:			; <UNDEFINED> instruction: 0x000119bc
   11814:			; <UNDEFINED> instruction: 0x000119bc
   11818:			; <UNDEFINED> instruction: 0x000119bc
   1181c:	andeq	r1, r1, r0, lsl #19
   11820:			; <UNDEFINED> instruction: 0x000119bc
   11824:			; <UNDEFINED> instruction: 0x000119bc
   11828:	andeq	r1, r1, r4, ror r9
   1182c:	andeq	r1, r1, r8, asr r9
   11830:	andeq	r1, r1, ip, asr #18
   11834:			; <UNDEFINED> instruction: 0x000119bc
   11838:	andeq	r1, r1, r8, lsr #19
   1183c:			; <UNDEFINED> instruction: 0x000119bc
   11840:			; <UNDEFINED> instruction: 0x000119bc
   11844:			; <UNDEFINED> instruction: 0x000119bc
   11848:			; <UNDEFINED> instruction: 0x000119bc
   1184c:			; <UNDEFINED> instruction: 0x000119bc
   11850:	strdeq	r1, [r1], -ip
   11854:	andeq	r1, r1, r8, ror #17
   11858:			; <UNDEFINED> instruction: 0x000119bc
   1185c:			; <UNDEFINED> instruction: 0x000119bc
   11860:			; <UNDEFINED> instruction: 0x000119bc
   11864:	ldrdeq	r1, [r1], -ip
   11868:	muleq	r1, r8, r8
   1186c:			; <UNDEFINED> instruction: 0x000119bc
   11870:	andeq	r1, r1, ip, lsl #19
   11874:	andeq	r1, r1, ip, lsl #17
   11878:	movw	r3, #29736	; 0x7428
   1187c:	movt	r3, #2
   11880:	mov	r1, #1
   11884:	ldr	r0, [r3]
   11888:	bl	11fc0 <__assert_fail@plt+0x940>
   1188c:	mov	r3, #1
   11890:	str	r3, [r4, #12]
   11894:	b	11758 <__assert_fail@plt+0xd8>
   11898:	ldr	r3, [r8]
   1189c:	mov	r1, #1
   118a0:	str	r1, [r4, #20]
   118a4:	ldrb	r2, [r3, #1]
   118a8:	cmp	r2, #0
   118ac:	bne	118cc <__assert_fail@plt+0x24c>
   118b0:	ldrb	r3, [r3]
   118b4:	cmp	r3, #111	; 0x6f
   118b8:	beq	11b4c <__assert_fail@plt+0x4cc>
   118bc:	cmp	r3, #120	; 0x78
   118c0:	beq	119c4 <__assert_fail@plt+0x344>
   118c4:	cmp	r3, #100	; 0x64
   118c8:	beq	11b40 <__assert_fail@plt+0x4c0>
   118cc:	movw	r3, #29736	; 0x7428
   118d0:	movt	r3, #2
   118d4:	ldr	r0, [r3]
   118d8:	bl	11fc0 <__assert_fail@plt+0x940>
   118dc:	ldr	r3, [r8]
   118e0:	str	r3, [r4, #28]
   118e4:	b	11758 <__assert_fail@plt+0xd8>
   118e8:	mov	r2, #1
   118ec:	mov	r3, #8
   118f0:	str	r2, [r4, #20]
   118f4:	str	r3, [r4, #24]
   118f8:	b	11758 <__assert_fail@plt+0xd8>
   118fc:	ldr	r0, [r8]
   11900:	add	r1, sp, #28
   11904:	mov	r2, #0
   11908:	movw	r7, #29760	; 0x7440
   1190c:	bl	11524 <strtoul@plt>
   11910:	ldr	r3, [sp, #28]
   11914:	movt	r7, #2
   11918:	cmp	r3, #0
   1191c:	str	r0, [r4, #8]
   11920:	beq	11758 <__assert_fail@plt+0xd8>
   11924:	ldrb	r3, [r3]
   11928:	cmp	r3, #0
   1192c:	beq	11758 <__assert_fail@plt+0xd8>
   11930:	movw	r1, #23436	; 0x5b8c
   11934:	mov	r0, #0
   11938:	movt	r1, #1
   1193c:	mov	r2, #5
   11940:	bl	113bc <dcgettext@plt>
   11944:	ldr	r1, [r7]
   11948:	bl	12600 <__assert_fail@plt+0xf80>
   1194c:	mov	r3, #1
   11950:	str	r3, [r4, #16]
   11954:	b	11758 <__assert_fail@plt+0xd8>
   11958:	ldr	r3, [r8]
   1195c:	ldrb	r2, [r3, #1]
   11960:	cmp	r2, #0
   11964:	bne	11878 <__assert_fail@plt+0x1f8>
   11968:	ldrb	r3, [r3]
   1196c:	strb	r3, [r4, #4]
   11970:	b	11758 <__assert_fail@plt+0xd8>
   11974:	mov	r3, #1
   11978:	str	r3, [r4, #36]	; 0x24
   1197c:	b	11758 <__assert_fail@plt+0xd8>
   11980:	mov	r3, #0
   11984:	str	r3, [r4, #36]	; 0x24
   11988:	b	11758 <__assert_fail@plt+0xd8>
   1198c:	movw	r0, #23464	; 0x5ba8
   11990:	movt	r0, #1
   11994:	bl	133ac <__assert_fail@plt+0x1d2c>
   11998:	b	11758 <__assert_fail@plt+0xd8>
   1199c:	ldr	r3, [r8]
   119a0:	str	r3, [r4, #40]	; 0x28
   119a4:	b	11758 <__assert_fail@plt+0xd8>
   119a8:	movw	r3, #29752	; 0x7438
   119ac:	movt	r3, #2
   119b0:	mov	r1, #0
   119b4:	ldr	r0, [r3]
   119b8:	bl	11fc0 <__assert_fail@plt+0x940>
   119bc:	ldr	sl, [r9]
   119c0:	b	11758 <__assert_fail@plt+0xd8>
   119c4:	mov	r3, #16
   119c8:	str	r3, [fp, #24]
   119cc:	b	11758 <__assert_fail@plt+0xd8>
   119d0:	cmp	sl, r7
   119d4:	bne	11c64 <__assert_fail@plt+0x5e4>
   119d8:	ldr	r7, [r4, #8]
   119dc:	movw	r3, #29768	; 0x7448
   119e0:	movt	r3, #2
   119e4:	cmp	r7, #0
   119e8:	ble	11d68 <__assert_fail@plt+0x6e8>
   119ec:	ldrb	r3, [r3, #4]
   119f0:	cmp	r3, #83	; 0x53
   119f4:	beq	11cc0 <__assert_fail@plt+0x640>
   119f8:	bls	11c48 <__assert_fail@plt+0x5c8>
   119fc:	cmp	r3, #108	; 0x6c
   11a00:	beq	11a14 <__assert_fail@plt+0x394>
   11a04:	cmp	r3, #115	; 0x73
   11a08:	beq	11cc0 <__assert_fail@plt+0x640>
   11a0c:	cmp	r3, #98	; 0x62
   11a10:	bne	11878 <__assert_fail@plt+0x1f8>
   11a14:	mov	r3, #2
   11a18:	str	r3, [r4]
   11a1c:	movw	r8, #29216	; 0x7220
   11a20:	movt	r8, #2
   11a24:	bl	1147c <bfd_init@plt>
   11a28:	bl	1268c <__assert_fail@plt+0x100c>
   11a2c:	ldr	r3, [r8]
   11a30:	ldr	r2, [sp, #20]
   11a34:	cmp	r3, r2
   11a38:	bge	11ccc <__assert_fail@plt+0x64c>
   11a3c:	mov	r1, #0
   11a40:	movw	fp, #29768	; 0x7448
   11a44:	movw	ip, #29736	; 0x7428
   11a48:	mov	r9, r1
   11a4c:	movt	ip, #2
   11a50:	movt	fp, #2
   11a54:	str	ip, [sp, #8]
   11a58:	str	r5, [sp, #12]
   11a5c:	b	11b18 <__assert_fail@plt+0x498>
   11a60:	mov	r0, #3
   11a64:	mov	r1, r7
   11a68:	add	r2, sp, #48	; 0x30
   11a6c:	bl	11650 <__xstat64@plt>
   11a70:	cmp	r0, #0
   11a74:	blt	11bfc <__assert_fail@plt+0x57c>
   11a78:	ldr	r3, [r4, #36]	; 0x24
   11a7c:	cmp	r3, #0
   11a80:	beq	11b60 <__assert_fail@plt+0x4e0>
   11a84:	mov	r0, r7
   11a88:	ldr	r1, [fp, #40]	; 0x28
   11a8c:	bl	1138c <bfd_openr@plt>
   11a90:	subs	sl, r0, #0
   11a94:	beq	11b60 <__assert_fail@plt+0x4e0>
   11a98:	mov	r1, #1
   11a9c:	bl	1162c <bfd_check_format@plt>
   11aa0:	cmp	r0, #0
   11aa4:	beq	11b58 <__assert_fail@plt+0x4d8>
   11aa8:	mov	r0, sl
   11aac:	mov	r3, #0
   11ab0:	mov	r2, #0
   11ab4:	str	r3, [fp, #32]
   11ab8:	movw	r1, #8976	; 0x2310
   11abc:	mov	r3, #0
   11ac0:	movt	r1, #1
   11ac4:	strd	r2, [sp, #40]	; 0x28
   11ac8:	add	r2, sp, #32
   11acc:	str	r7, [sp, #32]
   11ad0:	bl	11638 <bfd_map_over_sections@plt>
   11ad4:	mov	r0, sl
   11ad8:	bl	115f0 <bfd_close@plt>
   11adc:	cmp	r0, #0
   11ae0:	beq	11d58 <__assert_fail@plt+0x6d8>
   11ae4:	ldr	r3, [fp, #32]
   11ae8:	cmp	r3, #0
   11aec:	beq	11b60 <__assert_fail@plt+0x4e0>
   11af0:	mov	r3, #1
   11af4:	eor	r3, r3, #1
   11af8:	ldr	r2, [sp, #20]
   11afc:	orr	r9, r9, r3
   11b00:	mov	r1, #1
   11b04:	ldr	r3, [r8]
   11b08:	add	r3, r3, #1
   11b0c:	str	r3, [r8]
   11b10:	cmp	r2, r3
   11b14:	ble	11bd8 <__assert_fail@plt+0x558>
   11b18:	ldr	r0, [sp, #16]
   11b1c:	ldr	r7, [r0, r3, lsl #2]
   11b20:	ldrb	r3, [r7]
   11b24:	cmp	r3, #45	; 0x2d
   11b28:	bne	11a60 <__assert_fail@plt+0x3e0>
   11b2c:	ldrb	r3, [r7, #1]
   11b30:	cmp	r3, #0
   11b34:	bne	11a60 <__assert_fail@plt+0x3e0>
   11b38:	str	r3, [r4, #36]	; 0x24
   11b3c:	b	11b04 <__assert_fail@plt+0x484>
   11b40:	mov	r3, #10
   11b44:	str	r3, [fp, #24]
   11b48:	b	11758 <__assert_fail@plt+0xd8>
   11b4c:	mov	r3, #8
   11b50:	str	r3, [fp, #24]
   11b54:	b	11758 <__assert_fail@plt+0xd8>
   11b58:	mov	r0, sl
   11b5c:	bl	115f0 <bfd_close@plt>
   11b60:	movw	r1, #23624	; 0x5c48
   11b64:	mov	r0, r7
   11b68:	movt	r1, #1
   11b6c:	bl	11608 <fopen64@plt>
   11b70:	subs	r5, r0, #0
   11b74:	beq	11d28 <__assert_fail@plt+0x6a8>
   11b78:	mov	sl, #0
   11b7c:	mov	r0, r7
   11b80:	mov	r1, r5
   11b84:	mov	r2, #0
   11b88:	mov	r3, #0
   11b8c:	str	sl, [sp]
   11b90:	str	sl, [sp, #4]
   11b94:	bl	120d8 <__assert_fail@plt+0xa58>
   11b98:	mov	r0, r5
   11b9c:	bl	11590 <fclose@plt>
   11ba0:	cmn	r0, #1
   11ba4:	bne	11af0 <__assert_fail@plt+0x470>
   11ba8:	ldr	ip, [sp, #8]
   11bac:	mov	r1, #1
   11bb0:	movw	r2, #23372	; 0x5b4c
   11bb4:	movt	r2, #1
   11bb8:	ldr	r0, [ip]
   11bbc:	ldr	ip, [sp, #12]
   11bc0:	ldr	r3, [ip]
   11bc4:	bl	11578 <__fprintf_chk@plt>
   11bc8:	mov	r0, r7
   11bcc:	bl	11404 <perror@plt>
   11bd0:	mov	r3, sl
   11bd4:	b	11af4 <__assert_fail@plt+0x474>
   11bd8:	cmp	r1, #0
   11bdc:	beq	11878 <__assert_fail@plt+0x1f8>
   11be0:	ldr	r2, [sp, #156]	; 0x9c
   11be4:	mov	r0, r9
   11be8:	ldr	r3, [r6]
   11bec:	cmp	r2, r3
   11bf0:	bne	11d64 <__assert_fail@plt+0x6e4>
   11bf4:	add	sp, sp, #164	; 0xa4
   11bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bfc:	bl	11554 <__errno_location@plt>
   11c00:	ldr	r3, [r0]
   11c04:	mov	sl, r0
   11c08:	cmp	r3, #2
   11c0c:	beq	11d04 <__assert_fail@plt+0x684>
   11c10:	mov	r2, #5
   11c14:	movw	r1, #23580	; 0x5c1c
   11c18:	mov	r0, #0
   11c1c:	movt	r1, #1
   11c20:	bl	113bc <dcgettext@plt>
   11c24:	mov	r5, r0
   11c28:	ldr	r0, [sl]
   11c2c:	bl	114d0 <strerror@plt>
   11c30:	mov	r1, r7
   11c34:	mov	r2, r0
   11c38:	mov	r0, r5
   11c3c:	bl	12638 <__assert_fail@plt+0xfb8>
   11c40:	mov	r3, #0
   11c44:	b	11af4 <__assert_fail@plt+0x474>
   11c48:	cmp	r3, #66	; 0x42
   11c4c:	beq	11c58 <__assert_fail@plt+0x5d8>
   11c50:	cmp	r3, #76	; 0x4c
   11c54:	bne	11878 <__assert_fail@plt+0x1f8>
   11c58:	mov	r3, #4
   11c5c:	str	r3, [r4]
   11c60:	b	11a1c <__assert_fail@plt+0x39c>
   11c64:	ldr	r3, [sp, #16]
   11c68:	sub	sl, sl, #-1073741823	; 0xc0000001
   11c6c:	add	r1, sp, #28
   11c70:	mov	r2, r7
   11c74:	ldr	r0, [r3, sl, lsl #2]
   11c78:	add	r0, r0, #1
   11c7c:	bl	11524 <strtoul@plt>
   11c80:	ldr	r3, [sp, #28]
   11c84:	cmp	r3, r7
   11c88:	str	r0, [r4, #8]
   11c8c:	beq	119d8 <__assert_fail@plt+0x358>
   11c90:	ldrb	r3, [r3]
   11c94:	cmp	r3, r7
   11c98:	beq	119d8 <__assert_fail@plt+0x358>
   11c9c:	mov	r0, r7
   11ca0:	movw	r1, #23436	; 0x5b8c
   11ca4:	mov	r2, #5
   11ca8:	movt	r1, #1
   11cac:	bl	113bc <dcgettext@plt>
   11cb0:	ldr	r3, [sp, #16]
   11cb4:	ldr	r1, [r3, sl, lsl #2]
   11cb8:	add	r1, r1, #1
   11cbc:	bl	12600 <__assert_fail@plt+0xf80>
   11cc0:	mov	r3, #1
   11cc4:	str	r3, [r4]
   11cc8:	b	11a1c <__assert_fail@plt+0x39c>
   11ccc:	movw	r3, #29744	; 0x7430
   11cd0:	movt	r3, #2
   11cd4:	mov	ip, #0
   11cd8:	movw	r0, #23540	; 0x5bf4
   11cdc:	ldr	r1, [r3]
   11ce0:	movt	r0, #1
   11ce4:	str	ip, [sp]
   11ce8:	mov	r2, #0
   11cec:	mov	r3, #0
   11cf0:	str	ip, [sp, #4]
   11cf4:	mov	r9, ip
   11cf8:	str	ip, [r4, #36]	; 0x24
   11cfc:	bl	120d8 <__assert_fail@plt+0xa58>
   11d00:	b	11be0 <__assert_fail@plt+0x560>
   11d04:	mov	r2, #5
   11d08:	movw	r1, #23560	; 0x5c08
   11d0c:	mov	r0, #0
   11d10:	movt	r1, #1
   11d14:	bl	113bc <dcgettext@plt>
   11d18:	mov	r1, r7
   11d1c:	bl	12638 <__assert_fail@plt+0xfb8>
   11d20:	mov	r3, #0
   11d24:	b	11af4 <__assert_fail@plt+0x474>
   11d28:	ldr	ip, [sp, #8]
   11d2c:	mov	r1, #1
   11d30:	movw	r2, #23372	; 0x5b4c
   11d34:	movt	r2, #1
   11d38:	ldr	r0, [ip]
   11d3c:	ldr	ip, [sp, #12]
   11d40:	ldr	r3, [ip]
   11d44:	bl	11578 <__fprintf_chk@plt>
   11d48:	mov	r0, r7
   11d4c:	bl	11404 <perror@plt>
   11d50:	mov	r3, r5
   11d54:	b	11af4 <__assert_fail@plt+0x474>
   11d58:	mov	r0, r7
   11d5c:	bl	124fc <__assert_fail@plt+0xe7c>
   11d60:	b	11b60 <__assert_fail@plt+0x4e0>
   11d64:	bl	113d4 <__stack_chk_fail@plt>
   11d68:	movw	r1, #23504	; 0x5bd0
   11d6c:	mov	r0, #0
   11d70:	movt	r1, #1
   11d74:	mov	r2, #5
   11d78:	bl	113bc <dcgettext@plt>
   11d7c:	mov	r1, r7
   11d80:	bl	12600 <__assert_fail@plt+0xf80>
   11d84:	mov	fp, #0
   11d88:	mov	lr, #0
   11d8c:	pop	{r1}		; (ldr r1, [sp], #4)
   11d90:	mov	r2, sp
   11d94:	push	{r2}		; (str r2, [sp, #-4]!)
   11d98:	push	{r0}		; (str r0, [sp, #-4]!)
   11d9c:	ldr	ip, [pc, #16]	; 11db4 <__assert_fail@plt+0x734>
   11da0:	push	{ip}		; (str ip, [sp, #-4]!)
   11da4:	ldr	r0, [pc, #12]	; 11db8 <__assert_fail@plt+0x738>
   11da8:	ldr	r3, [pc, #12]	; 11dbc <__assert_fail@plt+0x73c>
   11dac:	bl	114c4 <__libc_start_main@plt>
   11db0:	bl	11668 <abort@plt>
   11db4:	andeq	r5, r1, r4, ror r6
   11db8:	andeq	r1, r1, ip, lsl #13
   11dbc:	andeq	r5, r1, r0, lsl r6
   11dc0:	ldr	r3, [pc, #20]	; 11ddc <__assert_fail@plt+0x75c>
   11dc4:	ldr	r2, [pc, #20]	; 11de0 <__assert_fail@plt+0x760>
   11dc8:	add	r3, pc, r3
   11dcc:	ldr	r2, [r3, r2]
   11dd0:	cmp	r2, #0
   11dd4:	bxeq	lr
   11dd8:	b	114e8 <__gmon_start__@plt>
   11ddc:	andeq	r5, r1, r0, lsr r2
   11de0:	andeq	r0, r0, r8, asr #2
   11de4:	push	{r3, lr}
   11de8:	movw	r0, #29208	; 0x7218
   11dec:	ldr	r3, [pc, #36]	; 11e18 <__assert_fail@plt+0x798>
   11df0:	movt	r0, #2
   11df4:	rsb	r3, r0, r3
   11df8:	cmp	r3, #6
   11dfc:	popls	{r3, pc}
   11e00:	movw	r3, #0
   11e04:	movt	r3, #0
   11e08:	cmp	r3, #0
   11e0c:	popeq	{r3, pc}
   11e10:	blx	r3
   11e14:	pop	{r3, pc}
   11e18:	andeq	r7, r2, fp, lsl r2
   11e1c:	push	{r3, lr}
   11e20:	movw	r0, #29208	; 0x7218
   11e24:	movw	r3, #29208	; 0x7218
   11e28:	movt	r0, #2
   11e2c:	movt	r3, #2
   11e30:	rsb	r3, r0, r3
   11e34:	asr	r3, r3, #2
   11e38:	add	r3, r3, r3, lsr #31
   11e3c:	asrs	r1, r3, #1
   11e40:	popeq	{r3, pc}
   11e44:	movw	r2, #0
   11e48:	movt	r2, #0
   11e4c:	cmp	r2, #0
   11e50:	popeq	{r3, pc}
   11e54:	blx	r2
   11e58:	pop	{r3, pc}
   11e5c:	push	{r4, lr}
   11e60:	movw	r4, #29764	; 0x7444
   11e64:	movt	r4, #2
   11e68:	ldrb	r3, [r4]
   11e6c:	cmp	r3, #0
   11e70:	popne	{r4, pc}
   11e74:	bl	11de4 <__assert_fail@plt+0x764>
   11e78:	mov	r3, #1
   11e7c:	strb	r3, [r4]
   11e80:	pop	{r4, pc}
   11e84:	movw	r0, #28412	; 0x6efc
   11e88:	movt	r0, #2
   11e8c:	push	{r3, lr}
   11e90:	ldr	r3, [r0]
   11e94:	cmp	r3, #0
   11e98:	beq	11eb0 <__assert_fail@plt+0x830>
   11e9c:	movw	r3, #0
   11ea0:	movt	r3, #0
   11ea4:	cmp	r3, #0
   11ea8:	beq	11eb0 <__assert_fail@plt+0x830>
   11eac:	blx	r3
   11eb0:	pop	{r3, lr}
   11eb4:	b	11e1c <__assert_fail@plt+0x79c>
   11eb8:	push	{r4, r5, r6, r7, r8, r9, lr}
   11ebc:	movw	r9, #29768	; 0x7448
   11ec0:	movt	r9, #2
   11ec4:	mov	r8, r0
   11ec8:	sub	sp, sp, #20
   11ecc:	mov	r7, #0
   11ed0:	ldr	r0, [r9]
   11ed4:	cmp	r0, #0
   11ed8:	ble	11f84 <__assert_fail@plt+0x904>
   11edc:	mov	r6, r7
   11ee0:	b	11f20 <__assert_fail@plt+0x8a0>
   11ee4:	ldr	r0, [r3]
   11ee8:	str	ip, [r2]
   11eec:	add	ip, r0, #1
   11ef0:	str	ip, [r3]
   11ef4:	ldrb	r0, [r0]
   11ef8:	ldrd	r4, [r1]
   11efc:	add	r6, r6, #1
   11f00:	ldr	ip, [r9]
   11f04:	uxtb	r0, r0
   11f08:	adds	r4, r4, #1
   11f0c:	orr	r7, r0, r7, lsl #8
   11f10:	adc	r5, r5, #0
   11f14:	cmp	ip, r6
   11f18:	strd	r4, [r1]
   11f1c:	ble	11f84 <__assert_fail@plt+0x904>
   11f20:	ldr	ip, [r2]
   11f24:	cmp	ip, #0
   11f28:	sub	ip, ip, #1
   11f2c:	bne	11ee4 <__assert_fail@plt+0x864>
   11f30:	cmp	r8, #0
   11f34:	beq	11f78 <__assert_fail@plt+0x8f8>
   11f38:	ldmib	r8, {r0, r4}
   11f3c:	cmp	r0, r4
   11f40:	add	ip, r0, #1
   11f44:	strcc	ip, [r8, #4]
   11f48:	ldrbcc	r0, [r0]
   11f4c:	bcc	11ef8 <__assert_fail@plt+0x878>
   11f50:	mov	r0, r8
   11f54:	str	r1, [sp, #12]
   11f58:	str	r2, [sp, #8]
   11f5c:	str	r3, [sp, #4]
   11f60:	bl	115b4 <__uflow@plt>
   11f64:	ldr	r1, [sp, #12]
   11f68:	ldr	r2, [sp, #8]
   11f6c:	ldr	r3, [sp, #4]
   11f70:	cmn	r0, #1
   11f74:	bne	11ef8 <__assert_fail@plt+0x878>
   11f78:	mvn	r0, #0
   11f7c:	add	sp, sp, #20
   11f80:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11f84:	ldrb	r3, [r9, #4]
   11f88:	cmp	r3, #76	; 0x4c
   11f8c:	beq	11fb4 <__assert_fail@plt+0x934>
   11f90:	cmp	r3, #108	; 0x6c
   11f94:	movne	r0, r7
   11f98:	bne	11f7c <__assert_fail@plt+0x8fc>
   11f9c:	lsl	r3, r7, #8
   11fa0:	ubfx	r0, r7, #8, #8
   11fa4:	uxth	r3, r3
   11fa8:	orr	r0, r0, r3
   11fac:	add	sp, sp, #20
   11fb0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11fb4:	rev	r0, r7
   11fb8:	add	sp, sp, #20
   11fbc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11fc0:	push	{r4, r5, r6, lr}
   11fc4:	mov	r2, #5
   11fc8:	mov	r4, r0
   11fcc:	mov	r6, r1
   11fd0:	mov	r0, #0
   11fd4:	movw	r1, #22152	; 0x5688
   11fd8:	movt	r1, #1
   11fdc:	movw	r5, #29824	; 0x7480
   11fe0:	bl	113bc <dcgettext@plt>
   11fe4:	movt	r5, #2
   11fe8:	mov	r1, #1
   11fec:	ldr	r3, [r5]
   11ff0:	mov	r2, r0
   11ff4:	mov	r0, r4
   11ff8:	bl	11578 <__fprintf_chk@plt>
   11ffc:	mov	r2, #5
   12000:	movw	r1, #22188	; 0x56ac
   12004:	mov	r0, #0
   12008:	movt	r1, #1
   1200c:	bl	113bc <dcgettext@plt>
   12010:	mov	r1, #1
   12014:	mov	r2, r0
   12018:	mov	r0, r4
   1201c:	bl	11578 <__fprintf_chk@plt>
   12020:	mov	r2, #5
   12024:	movw	r1, #22248	; 0x56e8
   12028:	mov	r0, #0
   1202c:	movt	r1, #1
   12030:	bl	113bc <dcgettext@plt>
   12034:	mov	r1, #1
   12038:	mov	r2, r0
   1203c:	mov	r0, r4
   12040:	bl	11578 <__fprintf_chk@plt>
   12044:	mov	r2, #5
   12048:	movw	r1, #22268	; 0x56fc
   1204c:	mov	r0, #0
   12050:	movt	r1, #1
   12054:	bl	113bc <dcgettext@plt>
   12058:	mov	r1, #1
   1205c:	mov	r2, r0
   12060:	mov	r0, r4
   12064:	bl	11578 <__fprintf_chk@plt>
   12068:	mov	r2, #5
   1206c:	movw	r1, #22424	; 0x5798
   12070:	mov	r0, #0
   12074:	movt	r1, #1
   12078:	bl	113bc <dcgettext@plt>
   1207c:	mov	r1, #1
   12080:	mov	r2, r0
   12084:	mov	r0, r4
   12088:	bl	11578 <__fprintf_chk@plt>
   1208c:	ldr	r0, [r5]
   12090:	mov	r1, r4
   12094:	bl	12764 <__assert_fail@plt+0x10e4>
   12098:	cmp	r6, #0
   1209c:	beq	120a8 <__assert_fail@plt+0xa28>
   120a0:	mov	r0, r6
   120a4:	bl	1150c <exit@plt>
   120a8:	mov	r0, r6
   120ac:	mov	r2, #5
   120b0:	movw	r1, #23312	; 0x5b10
   120b4:	movt	r1, #1
   120b8:	bl	113bc <dcgettext@plt>
   120bc:	movw	r3, #23332	; 0x5b24
   120c0:	mov	r1, #1
   120c4:	movt	r3, #1
   120c8:	mov	r2, r0
   120cc:	mov	r0, r4
   120d0:	bl	11578 <__fprintf_chk@plt>
   120d4:	b	120a0 <__assert_fail@plt+0xa20>
   120d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120dc:	movw	r4, #29768	; 0x7448
   120e0:	movt	r4, #2
   120e4:	sub	sp, sp, #20
   120e8:	mov	r5, r0
   120ec:	add	r7, sp, #16
   120f0:	ldr	r0, [r4, #8]
   120f4:	mov	r8, r1
   120f8:	strd	r2, [r7, #-8]!
   120fc:	movw	fp, #29752	; 0x7438
   12100:	add	r0, r0, #1
   12104:	movw	r9, #29224	; 0x7228
   12108:	bl	11440 <xmalloc@plt>
   1210c:	movt	fp, #2
   12110:	movt	r9, #2
   12114:	mov	sl, r0
   12118:	ldr	r3, [r4, #8]
   1211c:	mov	r6, #0
   12120:	ldrd	r0, [sp, #8]
   12124:	cmp	r3, #0
   12128:	strd	r0, [sp]
   1212c:	bgt	1215c <__assert_fail@plt+0xadc>
   12130:	b	121b0 <__assert_fail@plt+0xb30>
   12134:	ldr	r2, [r4, #12]
   12138:	cmp	r2, #1
   1213c:	bne	12118 <__assert_fail@plt+0xa98>
   12140:	tst	r3, #64	; 0x40
   12144:	beq	12118 <__assert_fail@plt+0xa98>
   12148:	ldr	r3, [r4, #8]
   1214c:	strb	r0, [sl, r6]
   12150:	add	r6, r6, #1
   12154:	cmp	r6, r3
   12158:	bge	121b0 <__assert_fail@plt+0xb30>
   1215c:	add	r3, sp, #60	; 0x3c
   12160:	mov	r0, r8
   12164:	mov	r1, r7
   12168:	add	r2, sp, #56	; 0x38
   1216c:	bl	11eb8 <__assert_fail@plt+0x838>
   12170:	cmn	r0, #1
   12174:	lsl	r3, r0, #1
   12178:	beq	1226c <__assert_fail@plt+0xbec>
   1217c:	cmp	r0, #255	; 0xff
   12180:	bhi	12118 <__assert_fail@plt+0xa98>
   12184:	cmp	r0, #9
   12188:	beq	12148 <__assert_fail@plt+0xac8>
   1218c:	ldrh	r3, [r9, r3]
   12190:	tst	r3, #16
   12194:	bne	12148 <__assert_fail@plt+0xac8>
   12198:	ldrb	r2, [r4, #4]
   1219c:	cmp	r2, #83	; 0x53
   121a0:	bne	12134 <__assert_fail@plt+0xab4>
   121a4:	cmp	r0, #127	; 0x7f
   121a8:	bgt	12148 <__assert_fail@plt+0xac8>
   121ac:	b	12134 <__assert_fail@plt+0xab4>
   121b0:	ldr	r3, [r4, #16]
   121b4:	cmp	r3, #0
   121b8:	bne	122b8 <__assert_fail@plt+0xc38>
   121bc:	ldr	r3, [r4, #20]
   121c0:	cmp	r3, #0
   121c4:	bne	1227c <__assert_fail@plt+0xbfc>
   121c8:	mov	r0, sl
   121cc:	ldr	r1, [fp]
   121d0:	mov	r3, #0
   121d4:	strb	r3, [sl, r6]
   121d8:	bl	1165c <fputs@plt>
   121dc:	b	121fc <__assert_fail@plt+0xb7c>
   121e0:	ldr	r3, [r4, #12]
   121e4:	cmp	r3, #1
   121e8:	bne	12254 <__assert_fail@plt+0xbd4>
   121ec:	tst	r2, #64	; 0x40
   121f0:	beq	12254 <__assert_fail@plt+0xbd4>
   121f4:	ldr	r1, [fp]
   121f8:	bl	11428 <_IO_putc@plt>
   121fc:	add	r2, sp, #56	; 0x38
   12200:	add	r3, sp, #60	; 0x3c
   12204:	mov	r0, r8
   12208:	mov	r1, r7
   1220c:	bl	11eb8 <__assert_fail@plt+0x838>
   12210:	mov	r3, r0
   12214:	cmp	r3, #255	; 0xff
   12218:	lsl	r2, r0, #1
   1221c:	bhi	12254 <__assert_fail@plt+0xbd4>
   12220:	cmp	r3, #9
   12224:	beq	121f4 <__assert_fail@plt+0xb74>
   12228:	ldrh	r2, [r9, r2]
   1222c:	tst	r2, #16
   12230:	bne	121f4 <__assert_fail@plt+0xb74>
   12234:	ldrb	r1, [r4, #4]
   12238:	cmp	r1, #83	; 0x53
   1223c:	bne	121e0 <__assert_fail@plt+0xb60>
   12240:	cmp	r3, #127	; 0x7f
   12244:	bgt	121f4 <__assert_fail@plt+0xb74>
   12248:	ldr	r3, [r4, #12]
   1224c:	cmp	r3, #1
   12250:	beq	121ec <__assert_fail@plt+0xb6c>
   12254:	ldr	r0, [r4, #28]
   12258:	cmp	r0, #0
   1225c:	beq	122d0 <__assert_fail@plt+0xc50>
   12260:	ldr	r1, [fp]
   12264:	bl	1165c <fputs@plt>
   12268:	b	12118 <__assert_fail@plt+0xa98>
   1226c:	mov	r0, sl
   12270:	bl	1135c <free@plt>
   12274:	add	sp, sp, #20
   12278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1227c:	movw	r1, #29768	; 0x7448
   12280:	movt	r1, #2
   12284:	ldr	r3, [r1, #24]
   12288:	cmp	r3, #10
   1228c:	beq	122f8 <__assert_fail@plt+0xc78>
   12290:	cmp	r3, #16
   12294:	beq	122e0 <__assert_fail@plt+0xc60>
   12298:	cmp	r3, #8
   1229c:	bne	121c8 <__assert_fail@plt+0xb48>
   122a0:	ldrd	r2, [sp]
   122a4:	movw	r1, #23380	; 0x5b54
   122a8:	mov	r0, #1
   122ac:	movt	r1, #1
   122b0:	bl	1156c <__printf_chk@plt>
   122b4:	b	121c8 <__assert_fail@plt+0xb48>
   122b8:	movw	r1, #23372	; 0x5b4c
   122bc:	mov	r2, r5
   122c0:	movt	r1, #1
   122c4:	mov	r0, #1
   122c8:	bl	1156c <__printf_chk@plt>
   122cc:	b	121bc <__assert_fail@plt+0xb3c>
   122d0:	ldr	r1, [fp]
   122d4:	mov	r0, #10
   122d8:	bl	11428 <_IO_putc@plt>
   122dc:	b	12118 <__assert_fail@plt+0xa98>
   122e0:	ldrd	r2, [sp]
   122e4:	movw	r1, #23396	; 0x5b64
   122e8:	mov	r0, #1
   122ec:	movt	r1, #1
   122f0:	bl	1156c <__printf_chk@plt>
   122f4:	b	121c8 <__assert_fail@plt+0xb48>
   122f8:	ldrd	r2, [sp]
   122fc:	movw	r1, #23388	; 0x5b5c
   12300:	mov	r0, #1
   12304:	movt	r1, #1
   12308:	bl	1156c <__printf_chk@plt>
   1230c:	b	121c8 <__assert_fail@plt+0xb48>
   12310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12314:	mov	r9, r1
   12318:	movw	r8, #29208	; 0x7218
   1231c:	ldr	r1, [r1, #20]
   12320:	movt	r8, #2
   12324:	movw	r3, #259	; 0x103
   12328:	mov	ip, r3
   1232c:	and	r3, r1, r3
   12330:	ldr	r1, [r8]
   12334:	sub	sp, sp, #140	; 0x8c
   12338:	cmp	r3, ip
   1233c:	mov	sl, r2
   12340:	mov	fp, r0
   12344:	str	r1, [sp, #132]	; 0x84
   12348:	beq	12364 <__assert_fail@plt+0xce4>
   1234c:	ldr	r2, [sp, #132]	; 0x84
   12350:	ldr	r3, [r8]
   12354:	cmp	r2, r3
   12358:	bne	12438 <__assert_fail@plt+0xdb8>
   1235c:	add	sp, sp, #140	; 0x8c
   12360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12364:	ldrd	r4, [r9, #48]	; 0x30
   12368:	orrs	r3, r4, r5
   1236c:	beq	1234c <__assert_fail@plt+0xccc>
   12370:	ldrd	r6, [r2, #8]
   12374:	orrs	r3, r6, r7
   12378:	beq	123dc <__assert_fail@plt+0xd5c>
   1237c:	cmp	r5, r7
   12380:	cmpeq	r4, r6
   12384:	bcs	1234c <__assert_fail@plt+0xccc>
   12388:	mov	r0, r4
   1238c:	mov	r6, #0
   12390:	bl	11440 <xmalloc@plt>
   12394:	mov	r7, #0
   12398:	strd	r4, [sp, #8]
   1239c:	mov	r1, r9
   123a0:	strd	r6, [sp]
   123a4:	str	r0, [sp, #20]
   123a8:	mov	r0, fp
   123ac:	ldr	r2, [sp, #20]
   123b0:	bl	113b0 <bfd_get_section_contents@plt>
   123b4:	cmp	r0, #0
   123b8:	bne	12408 <__assert_fail@plt+0xd88>
   123bc:	ldr	r2, [sp, #132]	; 0x84
   123c0:	ldr	r3, [r8]
   123c4:	cmp	r2, r3
   123c8:	bne	12438 <__assert_fail@plt+0xdb8>
   123cc:	ldr	r0, [sp, #20]
   123d0:	add	sp, sp, #140	; 0x8c
   123d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d8:	b	1135c <free@plt>
   123dc:	add	r1, sp, #24
   123e0:	bl	11374 <bfd_stat@plt>
   123e4:	cmp	r0, #0
   123e8:	bne	1234c <__assert_fail@plt+0xccc>
   123ec:	ldr	r1, [sp, #72]	; 0x48
   123f0:	ldr	r2, [sp, #76]	; 0x4c
   123f4:	mov	r6, r1
   123f8:	str	r1, [sl, #8]
   123fc:	mov	r7, r2
   12400:	str	r2, [sl, #12]
   12404:	b	1237c <__assert_fail@plt+0xcfc>
   12408:	ldr	lr, [sp, #20]
   1240c:	movw	ip, #29768	; 0x7448
   12410:	movt	ip, #2
   12414:	ldr	r0, [sl]
   12418:	ldrd	r2, [r9, #112]	; 0x70
   1241c:	mov	r1, #0
   12420:	str	lr, [sp, #4]
   12424:	mov	lr, #1
   12428:	str	r4, [sp]
   1242c:	str	lr, [ip, #32]
   12430:	bl	120d8 <__assert_fail@plt+0xa58>
   12434:	b	123bc <__assert_fail@plt+0xd3c>
   12438:	bl	113d4 <__stack_chk_fail@plt>
   1243c:	push	{r4, r5, r6, lr}
   12440:	mov	r1, #47	; 0x2f
   12444:	mov	r6, r0
   12448:	bl	115cc <strrchr@plt>
   1244c:	subs	r5, r0, #0
   12450:	beq	124a4 <__assert_fail@plt+0xe24>
   12454:	rsb	r4, r6, r5
   12458:	add	r0, r4, #11
   1245c:	add	r5, r4, #1
   12460:	bl	11440 <xmalloc@plt>
   12464:	mov	r1, r6
   12468:	mov	r2, r4
   1246c:	bl	11380 <memcpy@plt>
   12470:	mov	r3, #47	; 0x2f
   12474:	mov	ip, r0
   12478:	strb	r3, [r0, r4]
   1247c:	movw	r3, #23780	; 0x5ce4
   12480:	movt	r3, #1
   12484:	add	r2, ip, r5
   12488:	ldm	r3!, {r0, r1}
   1248c:	ldrb	r3, [r3]
   12490:	str	r0, [ip, r5]
   12494:	mov	r0, ip
   12498:	str	r1, [r2, #4]
   1249c:	strb	r3, [r2, #8]
   124a0:	pop	{r4, r5, r6, pc}
   124a4:	mov	r0, #9
   124a8:	bl	11440 <xmalloc@plt>
   124ac:	mov	ip, r0
   124b0:	b	1247c <__assert_fail@plt+0xdfc>
   124b4:	subs	r3, r0, #0
   124b8:	beq	124ec <__assert_fail@plt+0xe6c>
   124bc:	cmp	r3, #1
   124c0:	bne	124d8 <__assert_fail@plt+0xe58>
   124c4:	movw	r1, #23804	; 0x5cfc
   124c8:	mov	r0, #0
   124cc:	movt	r1, #1
   124d0:	mov	r2, #5
   124d4:	b	113bc <dcgettext@plt>
   124d8:	movw	r1, #23820	; 0x5d0c
   124dc:	mov	r0, #0
   124e0:	movt	r1, #1
   124e4:	mov	r2, #5
   124e8:	b	113bc <dcgettext@plt>
   124ec:	movw	r1, #23792	; 0x5cf0
   124f0:	mov	r2, #5
   124f4:	movt	r1, #1
   124f8:	b	113bc <dcgettext@plt>
   124fc:	push	{r4, r5, lr}
   12500:	sub	sp, sp, #12
   12504:	mov	r4, r0
   12508:	bl	1141c <bfd_get_error@plt>
   1250c:	bl	11614 <bfd_errmsg@plt>
   12510:	movw	r3, #29752	; 0x7438
   12514:	movt	r3, #2
   12518:	mov	r5, r0
   1251c:	ldr	r0, [r3]
   12520:	bl	1132c <fflush@plt>
   12524:	cmp	r4, #0
   12528:	movw	r1, #29736	; 0x7428
   1252c:	movw	r3, #29824	; 0x7480
   12530:	movt	r1, #2
   12534:	movt	r3, #2
   12538:	beq	12564 <__assert_fail@plt+0xee4>
   1253c:	str	r4, [sp]
   12540:	movw	r2, #23840	; 0x5d20
   12544:	ldr	r0, [r1]
   12548:	movt	r2, #1
   1254c:	ldr	r3, [r3]
   12550:	mov	r1, #1
   12554:	str	r5, [sp, #4]
   12558:	bl	11578 <__fprintf_chk@plt>
   1255c:	add	sp, sp, #12
   12560:	pop	{r4, r5, pc}
   12564:	str	r5, [sp]
   12568:	movw	r2, #23844	; 0x5d24
   1256c:	ldr	r0, [r1]
   12570:	movt	r2, #1
   12574:	ldr	r3, [r3]
   12578:	mov	r1, #1
   1257c:	bl	11578 <__fprintf_chk@plt>
   12580:	add	sp, sp, #12
   12584:	pop	{r4, r5, pc}
   12588:	push	{r3, lr}
   1258c:	bl	124fc <__assert_fail@plt+0xe7c>
   12590:	mov	r0, #1
   12594:	bl	115e4 <xexit@plt>
   12598:	movw	ip, #29752	; 0x7438
   1259c:	movt	ip, #2
   125a0:	push	{r4, r5, r6, lr}
   125a4:	mov	r6, r0
   125a8:	ldr	r0, [ip]
   125ac:	mov	r5, r1
   125b0:	movw	r4, #29736	; 0x7428
   125b4:	bl	1132c <fflush@plt>
   125b8:	movt	r4, #2
   125bc:	movw	ip, #29824	; 0x7480
   125c0:	movt	ip, #2
   125c4:	mov	r1, #1
   125c8:	ldr	r0, [r4]
   125cc:	movw	r2, #23372	; 0x5b4c
   125d0:	ldr	r3, [ip]
   125d4:	movt	r2, #1
   125d8:	bl	11578 <__fprintf_chk@plt>
   125dc:	mov	r2, r6
   125e0:	mov	r3, r5
   125e4:	ldr	r0, [r4]
   125e8:	mov	r1, #1
   125ec:	bl	114dc <__vfprintf_chk@plt>
   125f0:	ldr	r1, [r4]
   125f4:	mov	r0, #10
   125f8:	pop	{r4, r5, r6, lr}
   125fc:	b	11428 <_IO_putc@plt>
   12600:	push	{r0, r1, r2, r3}
   12604:	movw	r3, #29208	; 0x7218
   12608:	movt	r3, #2
   1260c:	push	{lr}		; (str lr, [sp, #-4]!)
   12610:	sub	sp, sp, #12
   12614:	add	r2, sp, #20
   12618:	ldr	r3, [r3]
   1261c:	ldr	r0, [sp, #16]
   12620:	mov	r1, r2
   12624:	str	r2, [sp]
   12628:	str	r3, [sp, #4]
   1262c:	bl	12598 <__assert_fail@plt+0xf18>
   12630:	mov	r0, #1
   12634:	bl	115e4 <xexit@plt>
   12638:	push	{r0, r1, r2, r3}
   1263c:	push	{r4, lr}
   12640:	movw	r4, #29208	; 0x7218
   12644:	movt	r4, #2
   12648:	sub	sp, sp, #8
   1264c:	add	r3, sp, #20
   12650:	ldr	r2, [r4]
   12654:	mov	r1, r3
   12658:	ldr	r0, [sp, #16]
   1265c:	str	r3, [sp]
   12660:	str	r2, [sp, #4]
   12664:	bl	12598 <__assert_fail@plt+0xf18>
   12668:	ldr	r2, [sp, #4]
   1266c:	ldr	r3, [r4]
   12670:	cmp	r2, r3
   12674:	bne	12688 <__assert_fail@plt+0x1008>
   12678:	add	sp, sp, #8
   1267c:	pop	{r4, lr}
   12680:	add	sp, sp, #16
   12684:	bx	lr
   12688:	bl	113d4 <__stack_chk_fail@plt>
   1268c:	push	{r4, lr}
   12690:	movw	r0, #23852	; 0x5d2c
   12694:	movt	r0, #1
   12698:	bl	11350 <bfd_set_default_target@plt>
   1269c:	cmp	r0, #0
   126a0:	popne	{r4, pc}
   126a4:	mov	r2, #5
   126a8:	movw	r1, #23884	; 0x5d4c
   126ac:	movt	r1, #1
   126b0:	bl	113bc <dcgettext@plt>
   126b4:	mov	r4, r0
   126b8:	bl	1141c <bfd_get_error@plt>
   126bc:	bl	11614 <bfd_errmsg@plt>
   126c0:	movw	r1, #23852	; 0x5d2c
   126c4:	movt	r1, #1
   126c8:	mov	r2, r0
   126cc:	mov	r0, r4
   126d0:	bl	12600 <__assert_fail@plt+0xf80>
   126d4:	movw	r3, #29752	; 0x7438
   126d8:	movt	r3, #2
   126dc:	push	{r4, r5, r6, lr}
   126e0:	mov	r4, r0
   126e4:	movw	r5, #29736	; 0x7428
   126e8:	ldr	r0, [r3]
   126ec:	movt	r5, #2
   126f0:	bl	1132c <fflush@plt>
   126f4:	mov	r2, #5
   126f8:	movw	r1, #23928	; 0x5d78
   126fc:	mov	r0, #0
   12700:	movt	r1, #1
   12704:	ldr	r6, [r5]
   12708:	bl	113bc <dcgettext@plt>
   1270c:	movw	r3, #29824	; 0x7480
   12710:	movt	r3, #2
   12714:	mov	r1, #1
   12718:	ldr	r3, [r3]
   1271c:	mov	r2, r0
   12720:	mov	r0, r6
   12724:	bl	11578 <__fprintf_chk@plt>
   12728:	ldr	r3, [r4]
   1272c:	cmp	r3, #0
   12730:	beq	12754 <__assert_fail@plt+0x10d4>
   12734:	movw	r2, #23620	; 0x5c44
   12738:	ldr	r0, [r5]
   1273c:	movt	r2, #1
   12740:	mov	r1, #1
   12744:	bl	11578 <__fprintf_chk@plt>
   12748:	ldr	r3, [r4, #4]!
   1274c:	cmp	r3, #0
   12750:	bne	12734 <__assert_fail@plt+0x10b4>
   12754:	ldr	r1, [r5]
   12758:	mov	r0, #10
   1275c:	pop	{r4, r5, r6, lr}
   12760:	b	115d8 <fputc@plt>
   12764:	push	{r4, r5, r6, lr}
   12768:	subs	r4, r0, #0
   1276c:	mov	r5, r1
   12770:	beq	127ec <__assert_fail@plt+0x116c>
   12774:	mov	r2, #5
   12778:	movw	r1, #23972	; 0x5da4
   1277c:	mov	r0, #0
   12780:	movt	r1, #1
   12784:	bl	113bc <dcgettext@plt>
   12788:	mov	r3, r4
   1278c:	mov	r1, #1
   12790:	mov	r2, r0
   12794:	mov	r0, r5
   12798:	bl	11578 <__fprintf_chk@plt>
   1279c:	bl	11410 <bfd_target_list@plt>
   127a0:	ldr	r3, [r0]
   127a4:	mov	r6, r0
   127a8:	cmp	r3, #0
   127ac:	movne	r4, r0
   127b0:	beq	127d4 <__assert_fail@plt+0x1154>
   127b4:	movw	r2, #23620	; 0x5c44
   127b8:	mov	r0, r5
   127bc:	movt	r2, #1
   127c0:	mov	r1, #1
   127c4:	bl	11578 <__fprintf_chk@plt>
   127c8:	ldr	r3, [r4, #4]!
   127cc:	cmp	r3, #0
   127d0:	bne	127b4 <__assert_fail@plt+0x1134>
   127d4:	mov	r1, r5
   127d8:	mov	r0, #10
   127dc:	bl	115d8 <fputc@plt>
   127e0:	mov	r0, r6
   127e4:	pop	{r4, r5, r6, lr}
   127e8:	b	1135c <free@plt>
   127ec:	mov	r2, #5
   127f0:	movw	r1, #23952	; 0x5d90
   127f4:	movt	r1, #1
   127f8:	bl	113bc <dcgettext@plt>
   127fc:	mov	r1, #1
   12800:	mov	r2, r0
   12804:	mov	r0, r5
   12808:	bl	11578 <__fprintf_chk@plt>
   1280c:	b	1279c <__assert_fail@plt+0x111c>
   12810:	push	{r4, r5, r6, lr}
   12814:	subs	r4, r0, #0
   12818:	mov	r5, r1
   1281c:	beq	12898 <__assert_fail@plt+0x1218>
   12820:	mov	r2, #5
   12824:	movw	r1, #24024	; 0x5dd8
   12828:	mov	r0, #0
   1282c:	movt	r1, #1
   12830:	bl	113bc <dcgettext@plt>
   12834:	mov	r3, r4
   12838:	mov	r1, #1
   1283c:	mov	r2, r0
   12840:	mov	r0, r5
   12844:	bl	11578 <__fprintf_chk@plt>
   12848:	bl	11338 <bfd_arch_list@plt>
   1284c:	ldr	r3, [r0]
   12850:	mov	r6, r0
   12854:	cmp	r3, #0
   12858:	movne	r4, r0
   1285c:	beq	12880 <__assert_fail@plt+0x1200>
   12860:	movw	r2, #23620	; 0x5c44
   12864:	mov	r0, r5
   12868:	movt	r2, #1
   1286c:	mov	r1, #1
   12870:	bl	11578 <__fprintf_chk@plt>
   12874:	ldr	r3, [r4, #4]!
   12878:	cmp	r3, #0
   1287c:	bne	12860 <__assert_fail@plt+0x11e0>
   12880:	mov	r1, r5
   12884:	mov	r0, #10
   12888:	bl	115d8 <fputc@plt>
   1288c:	mov	r0, r6
   12890:	pop	{r4, r5, r6, lr}
   12894:	b	1135c <free@plt>
   12898:	mov	r2, #5
   1289c:	movw	r1, #23996	; 0x5dbc
   128a0:	movt	r1, #1
   128a4:	bl	113bc <dcgettext@plt>
   128a8:	mov	r1, #1
   128ac:	mov	r2, r0
   128b0:	mov	r0, r5
   128b4:	bl	11578 <__fprintf_chk@plt>
   128b8:	b	12848 <__assert_fail@plt+0x11c8>
   128bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128c0:	mov	r2, #5
   128c4:	sub	sp, sp, #44	; 0x2c
   128c8:	movw	r1, #24056	; 0x5df8
   128cc:	mov	r0, #0
   128d0:	movt	r1, #1
   128d4:	bl	113bc <dcgettext@plt>
   128d8:	movw	r2, #24084	; 0x5e14
   128dc:	movt	r2, #1
   128e0:	movw	fp, #29740	; 0x742c
   128e4:	movt	fp, #2
   128e8:	mov	r1, r0
   128ec:	mov	r0, #1
   128f0:	bl	1156c <__printf_chk@plt>
   128f4:	mov	r0, #0
   128f8:	bl	13e30 <__assert_fail@plt+0x27b0>
   128fc:	ldr	r3, [fp]
   12900:	ldr	r4, [r3]
   12904:	cmp	r4, #0
   12908:	mov	r6, r0
   1290c:	beq	12a5c <__assert_fail@plt+0x13dc>
   12910:	mov	r8, #4
   12914:	mov	r7, #1
   12918:	ldr	r1, [r4]
   1291c:	mov	r0, r6
   12920:	bl	1159c <bfd_openw@plt>
   12924:	mov	r2, #5
   12928:	movw	r1, #24112	; 0x5e30
   1292c:	movt	r1, #1
   12930:	mov	r5, r0
   12934:	mov	r0, #0
   12938:	bl	113bc <dcgettext@plt>
   1293c:	ldr	sl, [r4]
   12940:	mov	r1, r0
   12944:	ldr	r0, [r4, #12]
   12948:	str	r1, [sp, #8]
   1294c:	bl	124b4 <__assert_fail@plt+0xe34>
   12950:	mov	r9, r0
   12954:	ldr	r0, [r4, #8]
   12958:	bl	124b4 <__assert_fail@plt+0xe34>
   1295c:	ldr	r1, [sp, #8]
   12960:	mov	r2, sl
   12964:	mov	r3, r9
   12968:	str	r0, [sp]
   1296c:	mov	r0, #1
   12970:	bl	1156c <__printf_chk@plt>
   12974:	cmp	r5, #0
   12978:	beq	12a4c <__assert_fail@plt+0x13cc>
   1297c:	mov	r0, r5
   12980:	mov	r1, #1
   12984:	bl	114f4 <bfd_set_format@plt>
   12988:	subs	r9, r0, #0
   1298c:	movne	r4, #2
   12990:	bne	129a4 <__assert_fail@plt+0x1324>
   12994:	b	12a30 <__assert_fail@plt+0x13b0>
   12998:	add	r4, r4, #1
   1299c:	cmp	r4, #92	; 0x5c
   129a0:	beq	129f0 <__assert_fail@plt+0x1370>
   129a4:	ldr	r3, [r5, #4]
   129a8:	mov	r0, r5
   129ac:	mov	r1, r4
   129b0:	mov	r2, #0
   129b4:	ldr	r3, [r3, #336]	; 0x150
   129b8:	blx	r3
   129bc:	cmp	r0, #0
   129c0:	beq	12998 <__assert_fail@plt+0x1318>
   129c4:	mov	r0, r4
   129c8:	mov	r1, #0
   129cc:	bl	11548 <bfd_printable_arch_mach@plt>
   129d0:	add	r4, r4, #1
   129d4:	movw	r1, #24140	; 0x5e4c
   129d8:	movt	r1, #1
   129dc:	mov	r2, r0
   129e0:	mov	r0, #1
   129e4:	bl	1156c <__printf_chk@plt>
   129e8:	cmp	r4, #92	; 0x5c
   129ec:	bne	129a4 <__assert_fail@plt+0x1324>
   129f0:	mov	r0, r5
   129f4:	bl	1153c <bfd_close_all_done@plt>
   129f8:	ldr	r3, [fp]
   129fc:	ldr	r4, [r3, r8]
   12a00:	add	r8, r8, #4
   12a04:	cmp	r4, #0
   12a08:	bne	12918 <__assert_fail@plt+0x1298>
   12a0c:	mov	r0, r6
   12a10:	bl	113e0 <unlink@plt>
   12a14:	mov	r0, r6
   12a18:	bl	1135c <free@plt>
   12a1c:	cmp	r7, #0
   12a20:	moveq	r0, #1
   12a24:	bne	12a68 <__assert_fail@plt+0x13e8>
   12a28:	add	sp, sp, #44	; 0x2c
   12a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a30:	bl	1141c <bfd_get_error@plt>
   12a34:	cmp	r0, #5
   12a38:	beq	129f0 <__assert_fail@plt+0x1370>
   12a3c:	ldr	r0, [r4]
   12a40:	mov	r7, r9
   12a44:	bl	124fc <__assert_fail@plt+0xe7c>
   12a48:	b	129f0 <__assert_fail@plt+0x1370>
   12a4c:	mov	r0, r6
   12a50:	mov	r7, r5
   12a54:	bl	124fc <__assert_fail@plt+0xe7c>
   12a58:	b	129f8 <__assert_fail@plt+0x1378>
   12a5c:	bl	113e0 <unlink@plt>
   12a60:	mov	r0, r6
   12a64:	bl	1135c <free@plt>
   12a68:	movw	r0, #24148	; 0x5e54
   12a6c:	movt	r0, #1
   12a70:	bl	11494 <getenv@plt>
   12a74:	cmp	r0, #0
   12a78:	beq	12dbc <__assert_fail@plt+0x173c>
   12a7c:	mov	r1, #0
   12a80:	mov	r2, #10
   12a84:	bl	11320 <strtol@plt>
   12a88:	cmp	r0, #0
   12a8c:	str	r0, [sp, #32]
   12a90:	beq	12dbc <__assert_fail@plt+0x173c>
   12a94:	movw	sl, #29752	; 0x7438
   12a98:	movt	sl, #2
   12a9c:	mov	r3, #1
   12aa0:	mov	r2, #0
   12aa4:	str	r3, [sp, #36]	; 0x24
   12aa8:	str	r2, [sp, #16]
   12aac:	ldr	r6, [fp]
   12ab0:	ldr	r3, [sp, #16]
   12ab4:	ldr	r2, [sp, #16]
   12ab8:	lsl	r3, r3, #2
   12abc:	str	r3, [sp, #24]
   12ac0:	ldr	r3, [r6, r2, lsl #2]
   12ac4:	cmp	r3, #0
   12ac8:	beq	12da8 <__assert_fail@plt+0x1728>
   12acc:	ldr	r0, [r3]
   12ad0:	ldr	r3, [sp, #16]
   12ad4:	add	r9, r3, #1
   12ad8:	bl	11530 <strlen@plt>
   12adc:	ldr	r2, [sp, #32]
   12ae0:	add	r5, r0, #16
   12ae4:	cmp	r5, r2
   12ae8:	bge	12d98 <__assert_fail@plt+0x1718>
   12aec:	ldr	r2, [sp, #24]
   12af0:	add	r2, r2, #4
   12af4:	str	r2, [sp, #20]
   12af8:	add	r4, r6, r2
   12afc:	ldr	r3, [r6, r2]
   12b00:	cmp	r3, #0
   12b04:	beq	12b38 <__assert_fail@plt+0x14b8>
   12b08:	ldr	r6, [sp, #32]
   12b0c:	b	12b20 <__assert_fail@plt+0x14a0>
   12b10:	ldr	r3, [r4, #4]!
   12b14:	add	r9, r9, #1
   12b18:	cmp	r3, #0
   12b1c:	beq	12b38 <__assert_fail@plt+0x14b8>
   12b20:	ldr	r0, [r3]
   12b24:	add	r5, r5, #1
   12b28:	bl	11530 <strlen@plt>
   12b2c:	add	r5, r5, r0
   12b30:	cmp	r5, r6
   12b34:	blt	12b10 <__assert_fail@plt+0x1490>
   12b38:	movw	r1, #24156	; 0x5e5c
   12b3c:	movw	r3, #24164	; 0x5e64
   12b40:	movt	r1, #1
   12b44:	movt	r3, #1
   12b48:	mov	r0, #1
   12b4c:	mov	r2, #15
   12b50:	bl	1156c <__printf_chk@plt>
   12b54:	ldr	r3, [sp, #16]
   12b58:	cmp	r9, r3
   12b5c:	ble	12bb4 <__assert_fail@plt+0x1534>
   12b60:	ldr	r3, [fp]
   12b64:	ldr	r2, [sp, #24]
   12b68:	ldr	r3, [r3, r2]
   12b6c:	cmp	r3, #0
   12b70:	beq	12bb4 <__assert_fail@plt+0x1534>
   12b74:	ldr	r5, [sp, #20]
   12b78:	ldr	r4, [sp, #16]
   12b7c:	b	12b94 <__assert_fail@plt+0x1514>
   12b80:	ldr	r3, [fp]
   12b84:	ldr	r3, [r3, r5]
   12b88:	add	r5, r5, #4
   12b8c:	cmp	r3, #0
   12b90:	beq	12bb4 <__assert_fail@plt+0x1534>
   12b94:	ldr	r2, [r3]
   12b98:	add	r4, r4, #1
   12b9c:	movw	r1, #24168	; 0x5e68
   12ba0:	mov	r0, #1
   12ba4:	movt	r1, #1
   12ba8:	bl	1156c <__printf_chk@plt>
   12bac:	cmp	r4, r9
   12bb0:	bne	12b80 <__assert_fail@plt+0x1500>
   12bb4:	ldr	r1, [sl]
   12bb8:	mov	r0, #10
   12bbc:	bl	11428 <_IO_putc@plt>
   12bc0:	mov	r0, #0
   12bc4:	bl	13e30 <__assert_fail@plt+0x27b0>
   12bc8:	mov	r8, #2
   12bcc:	mov	r2, #1
   12bd0:	str	r2, [sp, #28]
   12bd4:	str	r0, [sp, #12]
   12bd8:	b	12be8 <__assert_fail@plt+0x1568>
   12bdc:	add	r8, r8, #1
   12be0:	cmp	r8, #92	; 0x5c
   12be4:	beq	12d38 <__assert_fail@plt+0x16b8>
   12be8:	mov	r1, #0
   12bec:	mov	r0, r8
   12bf0:	bl	11548 <bfd_printable_arch_mach@plt>
   12bf4:	movw	r1, #24172	; 0x5e6c
   12bf8:	movt	r1, #1
   12bfc:	bl	11314 <strcmp@plt>
   12c00:	cmp	r0, #0
   12c04:	beq	12bdc <__assert_fail@plt+0x155c>
   12c08:	mov	r1, #0
   12c0c:	mov	r0, r8
   12c10:	bl	11548 <bfd_printable_arch_mach@plt>
   12c14:	movw	r1, #24184	; 0x5e78
   12c18:	mov	r2, #14
   12c1c:	movt	r1, #1
   12c20:	mov	r3, r0
   12c24:	mov	r0, #1
   12c28:	bl	1156c <__printf_chk@plt>
   12c2c:	ldr	r3, [sp, #16]
   12c30:	cmp	r9, r3
   12c34:	ble	12d20 <__assert_fail@plt+0x16a0>
   12c38:	ldr	r3, [fp]
   12c3c:	ldr	r2, [sp, #24]
   12c40:	ldr	r4, [r3, r2]
   12c44:	cmp	r4, #0
   12c48:	beq	12d20 <__assert_fail@plt+0x16a0>
   12c4c:	ldr	r7, [sp, #20]
   12c50:	ldr	r6, [sp, #16]
   12c54:	b	12c94 <__assert_fail@plt+0x1614>
   12c58:	movw	r1, #24168	; 0x5e68
   12c5c:	ldr	r2, [r4]
   12c60:	mov	r0, #1
   12c64:	movt	r1, #1
   12c68:	bl	1156c <__printf_chk@plt>
   12c6c:	mov	r0, r5
   12c70:	add	r6, r6, #1
   12c74:	bl	1153c <bfd_close_all_done@plt>
   12c78:	cmp	r6, r9
   12c7c:	beq	12d20 <__assert_fail@plt+0x16a0>
   12c80:	ldr	r3, [fp]
   12c84:	ldr	r4, [r3, r7]
   12c88:	add	r7, r7, #4
   12c8c:	cmp	r4, #0
   12c90:	beq	12d20 <__assert_fail@plt+0x16a0>
   12c94:	ldr	r0, [sp, #12]
   12c98:	ldr	r1, [r4]
   12c9c:	bl	1159c <bfd_openw@plt>
   12ca0:	subs	r5, r0, #0
   12ca4:	beq	12d88 <__assert_fail@plt+0x1708>
   12ca8:	mov	r1, #1
   12cac:	bl	114f4 <bfd_set_format@plt>
   12cb0:	subs	r3, r0, #0
   12cb4:	beq	12d64 <__assert_fail@plt+0x16e4>
   12cb8:	ldr	r3, [r5, #4]
   12cbc:	mov	r0, r5
   12cc0:	mov	r1, r8
   12cc4:	mov	r2, #0
   12cc8:	ldr	r3, [r3, #336]	; 0x150
   12ccc:	blx	r3
   12cd0:	cmp	r0, #0
   12cd4:	bne	12c58 <__assert_fail@plt+0x15d8>
   12cd8:	ldr	r0, [r4]
   12cdc:	bl	11530 <strlen@plt>
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d00 <__assert_fail@plt+0x1680>
   12ce8:	mov	r4, r0
   12cec:	mov	r0, #45	; 0x2d
   12cf0:	ldr	r1, [sl]
   12cf4:	bl	11428 <_IO_putc@plt>
   12cf8:	subs	r4, r4, #1
   12cfc:	bne	12cec <__assert_fail@plt+0x166c>
   12d00:	mov	r0, #32
   12d04:	ldr	r1, [sl]
   12d08:	bl	11428 <_IO_putc@plt>
   12d0c:	cmp	r5, #0
   12d10:	bne	12c6c <__assert_fail@plt+0x15ec>
   12d14:	add	r6, r6, #1
   12d18:	cmp	r6, r9
   12d1c:	bne	12c80 <__assert_fail@plt+0x1600>
   12d20:	mov	r0, #10
   12d24:	ldr	r1, [sl]
   12d28:	add	r8, r8, #1
   12d2c:	bl	11428 <_IO_putc@plt>
   12d30:	cmp	r8, #92	; 0x5c
   12d34:	bne	12be8 <__assert_fail@plt+0x1568>
   12d38:	ldr	r2, [sp, #28]
   12d3c:	ldr	r3, [sp, #36]	; 0x24
   12d40:	cmp	r2, #0
   12d44:	ldr	r0, [sp, #12]
   12d48:	moveq	r3, #0
   12d4c:	str	r3, [sp, #36]	; 0x24
   12d50:	bl	113e0 <unlink@plt>
   12d54:	ldr	r0, [sp, #12]
   12d58:	bl	1135c <free@plt>
   12d5c:	str	r9, [sp, #16]
   12d60:	b	12aac <__assert_fail@plt+0x142c>
   12d64:	str	r3, [sp, #8]
   12d68:	bl	1141c <bfd_get_error@plt>
   12d6c:	ldr	r3, [sp, #8]
   12d70:	cmp	r0, #5
   12d74:	beq	12cd8 <__assert_fail@plt+0x1658>
   12d78:	ldr	r0, [r4]
   12d7c:	str	r3, [sp, #28]
   12d80:	bl	124fc <__assert_fail@plt+0xe7c>
   12d84:	b	12cd8 <__assert_fail@plt+0x1658>
   12d88:	ldr	r0, [r4]
   12d8c:	str	r5, [sp, #28]
   12d90:	bl	124fc <__assert_fail@plt+0xe7c>
   12d94:	b	12cd8 <__assert_fail@plt+0x1658>
   12d98:	ldr	r3, [sp, #24]
   12d9c:	add	r3, r3, #4
   12da0:	str	r3, [sp, #20]
   12da4:	b	12b38 <__assert_fail@plt+0x14b8>
   12da8:	ldr	r3, [sp, #36]	; 0x24
   12dac:	rsbs	r0, r3, #1
   12db0:	movcc	r0, #0
   12db4:	add	sp, sp, #44	; 0x2c
   12db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dbc:	mov	r2, #80	; 0x50
   12dc0:	str	r2, [sp, #32]
   12dc4:	b	12a94 <__assert_fail@plt+0x1414>
   12dc8:	push	{r4, r5, r6, r7, r8, r9, lr}
   12dcc:	movw	r6, #29208	; 0x7218
   12dd0:	movt	r6, #2
   12dd4:	sub	sp, sp, #196	; 0xc4
   12dd8:	cmp	r2, #0
   12ddc:	mov	r8, r0
   12de0:	ldr	r3, [r6]
   12de4:	mov	r7, r1
   12de8:	str	r3, [sp, #188]	; 0xbc
   12dec:	bne	12e20 <__assert_fail@plt+0x17a0>
   12df0:	ldr	r3, [r7]
   12df4:	mov	r0, r8
   12df8:	movw	r2, #23848	; 0x5d28
   12dfc:	mov	r1, #1
   12e00:	movt	r2, #1
   12e04:	bl	11578 <__fprintf_chk@plt>
   12e08:	ldr	r2, [sp, #188]	; 0xbc
   12e0c:	ldr	r3, [r6]
   12e10:	cmp	r2, r3
   12e14:	bne	12ef8 <__assert_fail@plt+0x1878>
   12e18:	add	sp, sp, #196	; 0xc4
   12e1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12e20:	ldr	r3, [r1, #4]
   12e24:	mov	r0, r1
   12e28:	add	r1, sp, #32
   12e2c:	ldr	r3, [r3, #252]	; 0xfc
   12e30:	blx	r3
   12e34:	cmp	r0, #0
   12e38:	bne	12df0 <__assert_fail@plt+0x1770>
   12e3c:	ldr	r3, [sp, #112]	; 0x70
   12e40:	add	r0, sp, #192	; 0xc0
   12e44:	str	r3, [r0, #-164]!	; 0xffffff5c
   12e48:	bl	113a4 <ctime@plt>
   12e4c:	subs	r3, r0, #0
   12e50:	beq	12ecc <__assert_fail@plt+0x184c>
   12e54:	add	r9, sp, #148	; 0x94
   12e58:	add	r2, r3, #4
   12e5c:	mov	r1, #1
   12e60:	add	r3, r3, #20
   12e64:	str	r2, [sp]
   12e68:	mov	r0, r9
   12e6c:	str	r3, [sp, #4]
   12e70:	mov	r2, #40	; 0x28
   12e74:	movw	r3, #24212	; 0x5e94
   12e78:	movt	r3, #1
   12e7c:	bl	11560 <__sprintf_chk@plt>
   12e80:	ldr	r0, [sp, #48]	; 0x30
   12e84:	add	r1, sp, #136	; 0x88
   12e88:	bl	13414 <__assert_fail@plt+0x1d94>
   12e8c:	ldr	r1, [sp, #56]	; 0x38
   12e90:	ldr	r3, [sp, #60]	; 0x3c
   12e94:	movw	r2, #24224	; 0x5ea0
   12e98:	ldrd	r4, [sp, #80]	; 0x50
   12e9c:	movt	r2, #1
   12ea0:	str	r1, [sp]
   12ea4:	mov	r0, r8
   12ea8:	str	r3, [sp, #4]
   12eac:	mov	r1, #1
   12eb0:	str	r9, [sp, #16]
   12eb4:	add	r3, sp, #137	; 0x89
   12eb8:	strd	r4, [sp, #8]
   12ebc:	mov	ip, #0
   12ec0:	strb	ip, [sp, #146]	; 0x92
   12ec4:	bl	11578 <__fprintf_chk@plt>
   12ec8:	b	12df0 <__assert_fail@plt+0x1770>
   12ecc:	mov	r2, #5
   12ed0:	movw	r1, #24192	; 0x5e80
   12ed4:	movt	r1, #1
   12ed8:	add	r9, sp, #148	; 0x94
   12edc:	bl	113bc <dcgettext@plt>
   12ee0:	mov	r1, #1
   12ee4:	mov	r2, #40	; 0x28
   12ee8:	mov	r3, r0
   12eec:	mov	r0, r9
   12ef0:	bl	11560 <__sprintf_chk@plt>
   12ef4:	b	12e80 <__assert_fail@plt+0x1800>
   12ef8:	bl	113d4 <__stack_chk_fail@plt>
   12efc:	push	{r4, lr}
   12f00:	bl	1243c <__assert_fail@plt+0xdbc>
   12f04:	mov	r4, r0
   12f08:	bl	114a0 <mkstemp64@plt>
   12f0c:	cmn	r0, #1
   12f10:	beq	12f20 <__assert_fail@plt+0x18a0>
   12f14:	bl	11674 <close@plt>
   12f18:	mov	r0, r4
   12f1c:	pop	{r4, pc}
   12f20:	mov	r0, r4
   12f24:	bl	1135c <free@plt>
   12f28:	mov	r0, #0
   12f2c:	pop	{r4, pc}
   12f30:	push	{r3, lr}
   12f34:	bl	1243c <__assert_fail@plt+0xdbc>
   12f38:	pop	{r3, lr}
   12f3c:	b	115fc <mkdtemp@plt>
   12f40:	push	{r4, r5, r6, lr}
   12f44:	movw	r4, #29208	; 0x7218
   12f48:	movt	r4, #2
   12f4c:	sub	sp, sp, #8
   12f50:	mov	r6, r1
   12f54:	mov	r2, #0
   12f58:	ldr	r3, [r4]
   12f5c:	mov	r1, sp
   12f60:	mov	r5, r0
   12f64:	str	r3, [sp, #4]
   12f68:	bl	11308 <bfd_scan_vma@plt>
   12f6c:	ldr	r3, [sp]
   12f70:	ldrb	r3, [r3]
   12f74:	cmp	r3, #0
   12f78:	bne	12f98 <__assert_fail@plt+0x1918>
   12f7c:	ldr	r2, [sp, #4]
   12f80:	ldr	r3, [r4]
   12f84:	cmp	r2, r3
   12f88:	bne	12f94 <__assert_fail@plt+0x1914>
   12f8c:	add	sp, sp, #8
   12f90:	pop	{r4, r5, r6, pc}
   12f94:	bl	113d4 <__stack_chk_fail@plt>
   12f98:	mov	r2, #5
   12f9c:	movw	r1, #24248	; 0x5eb8
   12fa0:	mov	r0, #0
   12fa4:	movt	r1, #1
   12fa8:	bl	113bc <dcgettext@plt>
   12fac:	mov	r1, r6
   12fb0:	mov	r2, r5
   12fb4:	bl	12600 <__assert_fail@plt+0xf80>
   12fb8:	push	{r4, r5, r6, r7, lr}
   12fbc:	movw	r4, #29208	; 0x7218
   12fc0:	movt	r4, #2
   12fc4:	sub	sp, sp, #116	; 0x74
   12fc8:	mov	r1, r0
   12fcc:	mov	r5, r0
   12fd0:	ldr	r3, [r4]
   12fd4:	mov	r2, sp
   12fd8:	mov	r0, #3
   12fdc:	str	r3, [sp, #108]	; 0x6c
   12fe0:	bl	11650 <__xstat64@plt>
   12fe4:	cmp	r0, #0
   12fe8:	blt	13038 <__assert_fail@plt+0x19b8>
   12fec:	ldr	r3, [sp, #16]
   12ff0:	and	r3, r3, #61440	; 0xf000
   12ff4:	cmp	r3, #32768	; 0x8000
   12ff8:	bne	13094 <__assert_fail@plt+0x1a14>
   12ffc:	ldrd	r2, [sp, #48]	; 0x30
   13000:	cmp	r2, #0
   13004:	sbcs	r1, r3, #0
   13008:	movwlt	r1, #24308	; 0x5ef4
   1300c:	movlt	r0, #0
   13010:	movtlt	r1, #1
   13014:	blt	130a0 <__assert_fail@plt+0x1a20>
   13018:	mov	r0, r2
   1301c:	mov	r1, r3
   13020:	ldr	r2, [sp, #108]	; 0x6c
   13024:	ldr	r3, [r4]
   13028:	cmp	r2, r3
   1302c:	bne	130bc <__assert_fail@plt+0x1a3c>
   13030:	add	sp, sp, #116	; 0x74
   13034:	pop	{r4, r5, r6, r7, pc}
   13038:	bl	11554 <__errno_location@plt>
   1303c:	ldr	r3, [r0]
   13040:	mov	r6, r0
   13044:	cmp	r3, #2
   13048:	movweq	r1, #23560	; 0x5c08
   1304c:	moveq	r0, #0
   13050:	movteq	r1, #1
   13054:	beq	130a0 <__assert_fail@plt+0x1a20>
   13058:	mov	r2, #5
   1305c:	movw	r1, #23580	; 0x5c1c
   13060:	mov	r0, #0
   13064:	movt	r1, #1
   13068:	bl	113bc <dcgettext@plt>
   1306c:	mov	r7, r0
   13070:	ldr	r0, [r6]
   13074:	bl	114d0 <strerror@plt>
   13078:	mov	r1, r5
   1307c:	mov	r2, r0
   13080:	mov	r0, r7
   13084:	bl	12638 <__assert_fail@plt+0xfb8>
   13088:	mvn	r0, #0
   1308c:	mov	r1, r0
   13090:	b	13020 <__assert_fail@plt+0x19a0>
   13094:	movw	r1, #24268	; 0x5ecc
   13098:	movt	r1, #1
   1309c:	mov	r0, #0
   130a0:	mov	r2, #5
   130a4:	bl	113bc <dcgettext@plt>
   130a8:	mov	r1, r5
   130ac:	bl	12638 <__assert_fail@plt+0xfb8>
   130b0:	mvn	r0, #0
   130b4:	mov	r1, r0
   130b8:	b	13020 <__assert_fail@plt+0x19a0>
   130bc:	bl	113d4 <__stack_chk_fail@plt>
   130c0:	push	{r4, r5, r6, r7, r8, lr}
   130c4:	subs	r5, r0, #0
   130c8:	sub	sp, sp, #8
   130cc:	beq	131a0 <__assert_fail@plt+0x1b20>
   130d0:	ldr	r3, [r5, #148]	; 0x94
   130d4:	cmp	r3, #0
   130d8:	beq	13180 <__assert_fail@plt+0x1b00>
   130dc:	ldrb	r2, [r3, #44]	; 0x2c
   130e0:	tst	r2, #1
   130e4:	bne	13180 <__assert_fail@plt+0x1b00>
   130e8:	ldr	r6, [r3]
   130ec:	movw	r4, #29812	; 0x7474
   130f0:	movt	r4, #2
   130f4:	mov	r0, r6
   130f8:	bl	11530 <strlen@plt>
   130fc:	ldr	r8, [r5]
   13100:	mov	r7, r0
   13104:	mov	r0, r8
   13108:	bl	11530 <strlen@plt>
   1310c:	ldr	r3, [r4]
   13110:	add	r0, r7, r0
   13114:	add	r7, r0, #3
   13118:	cmp	r7, r3
   1311c:	bls	1318c <__assert_fail@plt+0x1b0c>
   13120:	cmp	r3, #0
   13124:	bne	13194 <__assert_fail@plt+0x1b14>
   13128:	add	r0, r7, r7, lsr #1
   1312c:	mov	r1, #0
   13130:	str	r0, [r4]
   13134:	bl	113c8 <bfd_malloc@plt>
   13138:	movw	r6, #29812	; 0x7474
   1313c:	movt	r6, #2
   13140:	cmp	r0, #0
   13144:	str	r0, [r4, #4]
   13148:	beq	1317c <__assert_fail@plt+0x1afc>
   1314c:	ldr	r3, [r5, #148]	; 0x94
   13150:	ldr	r8, [r5]
   13154:	ldr	r6, [r3]
   13158:	stm	sp, {r6, r8}
   1315c:	mov	r1, #1
   13160:	mvn	r2, #0
   13164:	movw	r3, #24400	; 0x5f50
   13168:	movt	r3, #1
   1316c:	bl	11560 <__sprintf_chk@plt>
   13170:	ldr	r0, [r4, #4]
   13174:	add	sp, sp, #8
   13178:	pop	{r4, r5, r6, r7, r8, pc}
   1317c:	str	r0, [r6]
   13180:	ldr	r0, [r5]
   13184:	add	sp, sp, #8
   13188:	pop	{r4, r5, r6, r7, r8, pc}
   1318c:	ldr	r0, [r4, #4]
   13190:	b	13158 <__assert_fail@plt+0x1ad8>
   13194:	ldr	r0, [r4, #4]
   13198:	bl	1135c <free@plt>
   1319c:	b	13128 <__assert_fail@plt+0x1aa8>
   131a0:	movw	r0, #24368	; 0x5f30
   131a4:	movw	r1, #24388	; 0x5f44
   131a8:	movw	r3, #23752	; 0x5cc8
   131ac:	movt	r0, #1
   131b0:	movt	r1, #1
   131b4:	movw	r2, #606	; 0x25e
   131b8:	movt	r3, #1
   131bc:	bl	11680 <__assert_fail@plt>
   131c0:	push	{r3}		; (str r3, [sp, #-4]!)
   131c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   131c8:	movw	r5, #29208	; 0x7218
   131cc:	movt	r5, #2
   131d0:	sub	sp, sp, #20
   131d4:	mov	sl, r1
   131d8:	mov	r8, r2
   131dc:	ldr	r3, [r5]
   131e0:	mov	r6, r0
   131e4:	ldr	r7, [sp, #52]	; 0x34
   131e8:	movw	r4, #29736	; 0x7428
   131ec:	movt	r4, #2
   131f0:	str	r3, [sp, #12]
   131f4:	bl	1141c <bfd_get_error@plt>
   131f8:	bl	11614 <bfd_errmsg@plt>
   131fc:	movw	ip, #29752	; 0x7438
   13200:	movt	ip, #2
   13204:	mov	r9, r0
   13208:	ldr	r0, [ip]
   1320c:	bl	1132c <fflush@plt>
   13210:	movw	ip, #29824	; 0x7480
   13214:	movt	ip, #2
   13218:	ldr	r1, [r4]
   1321c:	add	r3, sp, #56	; 0x38
   13220:	str	r3, [sp, #8]
   13224:	ldr	r0, [ip]
   13228:	bl	1165c <fputs@plt>
   1322c:	cmp	sl, #0
   13230:	beq	132d8 <__assert_fail@plt+0x1c58>
   13234:	cmp	r6, #0
   13238:	beq	132f4 <__assert_fail@plt+0x1c74>
   1323c:	cmp	r8, #0
   13240:	beq	132d8 <__assert_fail@plt+0x1c58>
   13244:	ldr	r2, [r8]
   13248:	cmp	r2, #0
   1324c:	beq	132d8 <__assert_fail@plt+0x1c58>
   13250:	str	r2, [sp]
   13254:	mov	r3, r6
   13258:	movw	r2, #24408	; 0x5f58
   1325c:	ldr	r0, [r4]
   13260:	mov	r1, #1
   13264:	movt	r2, #1
   13268:	bl	11578 <__fprintf_chk@plt>
   1326c:	cmp	r7, #0
   13270:	beq	132a0 <__assert_fail@plt+0x1c20>
   13274:	mov	r1, #1
   13278:	mov	r2, #2
   1327c:	ldr	r3, [r4]
   13280:	movw	r0, #24420	; 0x5f64
   13284:	movt	r0, #1
   13288:	bl	11434 <fwrite@plt>
   1328c:	mov	r2, r7
   13290:	ldr	r0, [r4]
   13294:	mov	r1, #1
   13298:	ldr	r3, [sp, #8]
   1329c:	bl	114dc <__vfprintf_chk@plt>
   132a0:	mov	r3, r9
   132a4:	ldr	r0, [r4]
   132a8:	movw	r2, #24424	; 0x5f68
   132ac:	mov	r1, #1
   132b0:	movt	r2, #1
   132b4:	bl	11578 <__fprintf_chk@plt>
   132b8:	ldr	r2, [sp, #12]
   132bc:	ldr	r3, [r5]
   132c0:	cmp	r2, r3
   132c4:	bne	13304 <__assert_fail@plt+0x1c84>
   132c8:	add	sp, sp, #20
   132cc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   132d0:	add	sp, sp, #4
   132d4:	bx	lr
   132d8:	mov	r3, r6
   132dc:	movw	r2, #24416	; 0x5f60
   132e0:	ldr	r0, [r4]
   132e4:	movt	r2, #1
   132e8:	mov	r1, #1
   132ec:	bl	11578 <__fprintf_chk@plt>
   132f0:	b	1326c <__assert_fail@plt+0x1bec>
   132f4:	mov	r0, sl
   132f8:	bl	130c0 <__assert_fail@plt+0x1a40>
   132fc:	mov	r6, r0
   13300:	b	1323c <__assert_fail@plt+0x1bbc>
   13304:	bl	113d4 <__stack_chk_fail@plt>
   13308:	ldrb	r3, [r0]
   1330c:	cmp	r3, #47	; 0x2f
   13310:	beq	133a4 <__assert_fail@plt+0x1d24>
   13314:	cmp	r3, #0
   13318:	beq	13374 <__assert_fail@plt+0x1cf4>
   1331c:	cmp	r3, #46	; 0x2e
   13320:	beq	1337c <__assert_fail@plt+0x1cfc>
   13324:	cmp	r3, #0
   13328:	cmpne	r3, #47	; 0x2f
   1332c:	beq	1334c <__assert_fail@plt+0x1ccc>
   13330:	add	r2, r0, #1
   13334:	mov	r0, r2
   13338:	add	r2, r2, #1
   1333c:	ldrb	r3, [r0]
   13340:	cmp	r3, #47	; 0x2f
   13344:	cmpne	r3, #0
   13348:	bne	13334 <__assert_fail@plt+0x1cb4>
   1334c:	cmp	r3, #47	; 0x2f
   13350:	bne	13314 <__assert_fail@plt+0x1c94>
   13354:	add	r2, r0, #1
   13358:	mov	r0, r2
   1335c:	add	r2, r2, #1
   13360:	ldrb	r3, [r0]
   13364:	cmp	r3, #47	; 0x2f
   13368:	beq	13358 <__assert_fail@plt+0x1cd8>
   1336c:	cmp	r3, #0
   13370:	bne	1331c <__assert_fail@plt+0x1c9c>
   13374:	mov	r0, #1
   13378:	bx	lr
   1337c:	ldrb	r3, [r0, #1]
   13380:	cmp	r3, #46	; 0x2e
   13384:	addne	r0, r0, #1
   13388:	bne	13324 <__assert_fail@plt+0x1ca4>
   1338c:	ldrb	r3, [r0, #2]
   13390:	add	r0, r0, #2
   13394:	cmp	r3, #0
   13398:	beq	133a4 <__assert_fail@plt+0x1d24>
   1339c:	cmp	r3, #47	; 0x2f
   133a0:	bne	13330 <__assert_fail@plt+0x1cb0>
   133a4:	mov	r0, #0
   133a8:	bx	lr
   133ac:	push	{r3, lr}
   133b0:	mov	r2, r0
   133b4:	movw	r1, #24432	; 0x5f70
   133b8:	movw	r3, #24084	; 0x5e14
   133bc:	movt	r1, #1
   133c0:	movt	r3, #1
   133c4:	mov	r0, #1
   133c8:	bl	1156c <__printf_chk@plt>
   133cc:	mov	r2, #5
   133d0:	movw	r1, #24444	; 0x5f7c
   133d4:	mov	r0, #0
   133d8:	movt	r1, #1
   133dc:	bl	113bc <dcgettext@plt>
   133e0:	mov	r1, r0
   133e4:	mov	r0, #1
   133e8:	bl	1156c <__printf_chk@plt>
   133ec:	mov	r2, #5
   133f0:	movw	r1, #24496	; 0x5fb0
   133f4:	mov	r0, #0
   133f8:	movt	r1, #1
   133fc:	bl	113bc <dcgettext@plt>
   13400:	mov	r1, r0
   13404:	mov	r0, #1
   13408:	bl	1156c <__printf_chk@plt>
   1340c:	mov	r0, #0
   13410:	bl	1150c <exit@plt>
   13414:	and	r3, r0, #61440	; 0xf000
   13418:	cmp	r3, #16384	; 0x4000
   1341c:	moveq	r3, #100	; 0x64
   13420:	beq	13460 <__assert_fail@plt+0x1de0>
   13424:	cmp	r3, #40960	; 0xa000
   13428:	moveq	r3, #108	; 0x6c
   1342c:	beq	13460 <__assert_fail@plt+0x1de0>
   13430:	cmp	r3, #24576	; 0x6000
   13434:	moveq	r3, #98	; 0x62
   13438:	beq	13460 <__assert_fail@plt+0x1de0>
   1343c:	cmp	r3, #8192	; 0x2000
   13440:	moveq	r3, #99	; 0x63
   13444:	beq	13460 <__assert_fail@plt+0x1de0>
   13448:	cmp	r3, #49152	; 0xc000
   1344c:	moveq	r3, #115	; 0x73
   13450:	beq	13460 <__assert_fail@plt+0x1de0>
   13454:	cmp	r3, #4096	; 0x1000
   13458:	movne	r3, #45	; 0x2d
   1345c:	moveq	r3, #112	; 0x70
   13460:	tst	r0, #256	; 0x100
   13464:	strb	r3, [r1]
   13468:	moveq	r3, #45	; 0x2d
   1346c:	movne	r3, #114	; 0x72
   13470:	tst	r0, #128	; 0x80
   13474:	strb	r3, [r1, #1]
   13478:	moveq	r3, #45	; 0x2d
   1347c:	movne	r3, #119	; 0x77
   13480:	tst	r0, #64	; 0x40
   13484:	strb	r3, [r1, #2]
   13488:	moveq	ip, #45	; 0x2d
   1348c:	movne	ip, #120	; 0x78
   13490:	tst	r0, #32
   13494:	strb	ip, [r1, #3]
   13498:	moveq	r3, #45	; 0x2d
   1349c:	movne	r3, #114	; 0x72
   134a0:	tst	r0, #16
   134a4:	strb	r3, [r1, #4]
   134a8:	moveq	r3, #45	; 0x2d
   134ac:	movne	r3, #119	; 0x77
   134b0:	tst	r0, #8
   134b4:	strb	r3, [r1, #5]
   134b8:	moveq	r2, #45	; 0x2d
   134bc:	movne	r2, #120	; 0x78
   134c0:	tst	r0, #4
   134c4:	strb	r2, [r1, #6]
   134c8:	moveq	r3, #45	; 0x2d
   134cc:	movne	r3, #114	; 0x72
   134d0:	tst	r0, #2
   134d4:	strb	r3, [r1, #7]
   134d8:	moveq	r3, #45	; 0x2d
   134dc:	movne	r3, #119	; 0x77
   134e0:	tst	r0, #1
   134e4:	strb	r3, [r1, #8]
   134e8:	moveq	r3, #45	; 0x2d
   134ec:	movne	r3, #120	; 0x78
   134f0:	tst	r0, #2048	; 0x800
   134f4:	strb	r3, [r1, #9]
   134f8:	beq	1350c <__assert_fail@plt+0x1e8c>
   134fc:	cmp	ip, #120	; 0x78
   13500:	movne	ip, #83	; 0x53
   13504:	moveq	ip, #115	; 0x73
   13508:	strb	ip, [r1, #3]
   1350c:	tst	r0, #1024	; 0x400
   13510:	beq	13524 <__assert_fail@plt+0x1ea4>
   13514:	cmp	r2, #120	; 0x78
   13518:	movne	r2, #83	; 0x53
   1351c:	moveq	r2, #115	; 0x73
   13520:	strb	r2, [r1, #6]
   13524:	tst	r0, #512	; 0x200
   13528:	bxeq	lr
   1352c:	cmp	r3, #120	; 0x78
   13530:	movne	r3, #84	; 0x54
   13534:	moveq	r3, #116	; 0x74
   13538:	strb	r3, [r1, #9]
   1353c:	bx	lr
   13540:	push	{r3, r4, r5, r6, r7, lr}
   13544:	subs	r4, r0, #0
   13548:	beq	135cc <__assert_fail@plt+0x1f4c>
   1354c:	ldr	r3, [r4]
   13550:	cmp	r3, #0
   13554:	beq	135bc <__assert_fail@plt+0x1f3c>
   13558:	mov	r2, r4
   1355c:	mov	r3, #0
   13560:	ldr	r1, [r2, #4]!
   13564:	add	r3, r3, #1
   13568:	cmp	r1, #0
   1356c:	bne	13560 <__assert_fail@plt+0x1ee0>
   13570:	add	r3, r3, #1
   13574:	lsl	r0, r3, #2
   13578:	bl	11440 <xmalloc@plt>
   1357c:	mov	r6, r0
   13580:	ldr	r0, [r4]
   13584:	cmp	r0, #0
   13588:	beq	135c4 <__assert_fail@plt+0x1f44>
   1358c:	rsb	r7, r4, #4
   13590:	mov	r5, #0
   13594:	bl	11458 <xstrdup@plt>
   13598:	str	r0, [r6, r5]
   1359c:	add	r5, r7, r4
   135a0:	ldr	r0, [r4, #4]!
   135a4:	cmp	r0, #0
   135a8:	bne	13594 <__assert_fail@plt+0x1f14>
   135ac:	mov	r3, #0
   135b0:	mov	r0, r6
   135b4:	str	r3, [r6, r5]
   135b8:	pop	{r3, r4, r5, r6, r7, pc}
   135bc:	mov	r0, #4
   135c0:	b	13578 <__assert_fail@plt+0x1ef8>
   135c4:	mov	r5, r0
   135c8:	b	135ac <__assert_fail@plt+0x1f2c>
   135cc:	mov	r0, r4
   135d0:	pop	{r3, r4, r5, r6, r7, pc}
   135d4:	push	{r3, r4, r5, lr}
   135d8:	subs	r5, r0, #0
   135dc:	popeq	{r3, r4, r5, pc}
   135e0:	ldr	r0, [r5]
   135e4:	cmp	r0, #0
   135e8:	movne	r4, r5
   135ec:	beq	13600 <__assert_fail@plt+0x1f80>
   135f0:	bl	1135c <free@plt>
   135f4:	ldr	r0, [r4, #4]!
   135f8:	cmp	r0, #0
   135fc:	bne	135f0 <__assert_fail@plt+0x1f70>
   13600:	mov	r0, r5
   13604:	pop	{r3, r4, r5, lr}
   13608:	b	1135c <free@plt>
   1360c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13610:	subs	r4, r0, #0
   13614:	ldr	r5, [pc, #536]	; 13834 <__assert_fail@plt+0x21b4>
   13618:	sub	sp, sp, #12
   1361c:	add	r5, pc, r5
   13620:	beq	1382c <__assert_fail@plt+0x21ac>
   13624:	bl	11530 <strlen@plt>
   13628:	mov	r9, #0
   1362c:	mov	r7, r9
   13630:	mov	r8, r9
   13634:	mov	r6, r9
   13638:	mov	fp, r9
   1363c:	mov	sl, r9
   13640:	add	r0, r0, #1
   13644:	bl	11440 <xmalloc@plt>
   13648:	ldr	r3, [pc, #488]	; 13838 <__assert_fail@plt+0x21b8>
   1364c:	str	r0, [sp]
   13650:	ldr	r5, [r5, r3]
   13654:	ldrb	r3, [r4]
   13658:	lsl	r3, r3, #1
   1365c:	ldrh	r3, [r5, r3]
   13660:	tst	r3, #64	; 0x40
   13664:	beq	13688 <__assert_fail@plt+0x2008>
   13668:	mov	r3, r4
   1366c:	ldrb	r2, [r3, #1]
   13670:	add	r4, r3, #1
   13674:	mov	r3, r4
   13678:	lsl	r2, r2, #1
   1367c:	ldrh	r2, [r5, r2]
   13680:	tst	r2, #64	; 0x40
   13684:	bne	1366c <__assert_fail@plt+0x1fec>
   13688:	cmp	r7, #0
   1368c:	beq	136a4 <__assert_fail@plt+0x2024>
   13690:	sub	r3, r7, #1
   13694:	cmp	r9, r3
   13698:	addlt	r3, r8, r9, lsl #2
   1369c:	strlt	r3, [sp, #4]
   136a0:	blt	136d0 <__assert_fail@plt+0x2050>
   136a4:	cmp	r8, #0
   136a8:	beq	13818 <__assert_fail@plt+0x2198>
   136ac:	lsl	r7, r7, #1
   136b0:	mov	r0, r8
   136b4:	lsl	r1, r7, #2
   136b8:	bl	113ec <xrealloc@plt>
   136bc:	mov	r8, r0
   136c0:	add	r3, r8, r9, lsl #2
   136c4:	str	r3, [sp, #4]
   136c8:	mov	r3, #0
   136cc:	str	r3, [r8, r9, lsl #2]
   136d0:	ldrb	r3, [r4]
   136d4:	cmp	r3, #0
   136d8:	beq	13790 <__assert_fail@plt+0x2110>
   136dc:	mov	r2, r4
   136e0:	ldr	lr, [sp]
   136e4:	b	13708 <__assert_fail@plt+0x2088>
   136e8:	strb	r3, [lr]
   136ec:	add	lr, lr, #1
   136f0:	mov	r6, #0
   136f4:	ldrb	r3, [r2, #1]
   136f8:	add	r2, r2, #1
   136fc:	cmp	r3, #0
   13700:	mov	r4, r2
   13704:	beq	13794 <__assert_fail@plt+0x2114>
   13708:	lsl	r1, r3, #1
   1370c:	mov	r4, r2
   13710:	ldrh	r1, [r5, r1]
   13714:	tst	r1, #64	; 0x40
   13718:	beq	13728 <__assert_fail@plt+0x20a8>
   1371c:	orr	r0, r6, fp
   13720:	orrs	r0, r0, sl
   13724:	beq	1380c <__assert_fail@plt+0x218c>
   13728:	cmp	r6, #0
   1372c:	bne	136e8 <__assert_fail@plt+0x2068>
   13730:	cmp	r3, #92	; 0x5c
   13734:	moveq	r6, #1
   13738:	beq	136f4 <__assert_fail@plt+0x2074>
   1373c:	cmp	sl, #0
   13740:	beq	1375c <__assert_fail@plt+0x20dc>
   13744:	cmp	r3, #39	; 0x27
   13748:	moveq	sl, r6
   1374c:	beq	136f4 <__assert_fail@plt+0x2074>
   13750:	strb	r3, [lr]
   13754:	add	lr, lr, #1
   13758:	b	136f4 <__assert_fail@plt+0x2074>
   1375c:	cmp	fp, #0
   13760:	beq	13774 <__assert_fail@plt+0x20f4>
   13764:	cmp	r3, #34	; 0x22
   13768:	moveq	fp, sl
   1376c:	bne	13750 <__assert_fail@plt+0x20d0>
   13770:	b	136f4 <__assert_fail@plt+0x2074>
   13774:	cmp	r3, #39	; 0x27
   13778:	moveq	sl, #1
   1377c:	beq	136f4 <__assert_fail@plt+0x2074>
   13780:	cmp	r3, #34	; 0x22
   13784:	moveq	fp, #1
   13788:	bne	13750 <__assert_fail@plt+0x20d0>
   1378c:	b	136f4 <__assert_fail@plt+0x2074>
   13790:	ldr	lr, [sp]
   13794:	mov	r3, #0
   13798:	ldr	r0, [sp]
   1379c:	strb	r3, [lr]
   137a0:	add	r9, r9, #1
   137a4:	bl	11458 <xstrdup@plt>
   137a8:	ldr	r3, [sp, #4]
   137ac:	str	r0, [r3]
   137b0:	mov	r3, #0
   137b4:	str	r3, [r8, r9, lsl #2]
   137b8:	ldrb	r2, [r4]
   137bc:	lsl	r3, r2, #1
   137c0:	ldrh	r3, [r5, r3]
   137c4:	tst	r3, #64	; 0x40
   137c8:	beq	137ec <__assert_fail@plt+0x216c>
   137cc:	mov	r3, r4
   137d0:	ldrb	r2, [r3, #1]
   137d4:	add	r4, r3, #1
   137d8:	mov	r3, r4
   137dc:	lsl	r1, r2, #1
   137e0:	ldrh	r1, [r5, r1]
   137e4:	tst	r1, #64	; 0x40
   137e8:	bne	137d0 <__assert_fail@plt+0x2150>
   137ec:	cmp	r2, #0
   137f0:	bne	13654 <__assert_fail@plt+0x1fd4>
   137f4:	ldr	r0, [sp]
   137f8:	mov	r9, r8
   137fc:	bl	1135c <free@plt>
   13800:	mov	r0, r9
   13804:	add	sp, sp, #12
   13808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1380c:	mov	r6, r0
   13810:	mov	sl, r0
   13814:	b	13794 <__assert_fail@plt+0x2114>
   13818:	mov	r0, #32
   1381c:	mov	r7, #8
   13820:	bl	11440 <xmalloc@plt>
   13824:	mov	r8, r0
   13828:	b	136c0 <__assert_fail@plt+0x2040>
   1382c:	mov	r9, r4
   13830:	b	13800 <__assert_fail@plt+0x2180>
   13834:	ldrdeq	r3, [r1], -ip
   13838:	andeq	r0, r0, r8, lsr r1
   1383c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13840:	subs	r5, r1, #0
   13844:	ldr	r8, [pc, #180]	; 13900 <__assert_fail@plt+0x2280>
   13848:	add	r8, pc, r8
   1384c:	beq	138d0 <__assert_fail@plt+0x2250>
   13850:	ldr	r6, [r0]
   13854:	cmp	r6, #0
   13858:	movne	r9, r0
   1385c:	beq	138f8 <__assert_fail@plt+0x2278>
   13860:	ldrb	r4, [r6]
   13864:	cmp	r4, #0
   13868:	beq	138d8 <__assert_fail@plt+0x2258>
   1386c:	ldr	r3, [pc, #144]	; 13904 <__assert_fail@plt+0x2284>
   13870:	ldr	r7, [r8, r3]
   13874:	b	138a0 <__assert_fail@plt+0x2220>
   13878:	cmp	r4, #34	; 0x22
   1387c:	beq	138c4 <__assert_fail@plt+0x2244>
   13880:	mov	r0, r4
   13884:	mov	r1, r5
   13888:	bl	115d8 <fputc@plt>
   1388c:	cmn	r0, #1
   13890:	beq	138d0 <__assert_fail@plt+0x2250>
   13894:	ldrb	r4, [r6, #1]!
   13898:	cmp	r4, #0
   1389c:	beq	138d8 <__assert_fail@plt+0x2258>
   138a0:	lsl	r3, r4, #1
   138a4:	mov	r1, r5
   138a8:	mov	r0, #92	; 0x5c
   138ac:	ldrh	r3, [r7, r3]
   138b0:	tst	r3, #64	; 0x40
   138b4:	bne	138c4 <__assert_fail@plt+0x2244>
   138b8:	cmp	r4, #39	; 0x27
   138bc:	cmpne	r4, r0
   138c0:	bne	13878 <__assert_fail@plt+0x21f8>
   138c4:	bl	115d8 <fputc@plt>
   138c8:	cmn	r0, #1
   138cc:	bne	13880 <__assert_fail@plt+0x2200>
   138d0:	mov	r0, #1
   138d4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   138d8:	mov	r0, #10
   138dc:	mov	r1, r5
   138e0:	bl	115d8 <fputc@plt>
   138e4:	cmn	r0, #1
   138e8:	beq	138d0 <__assert_fail@plt+0x2250>
   138ec:	ldr	r6, [r9, #4]!
   138f0:	cmp	r6, #0
   138f4:	bne	13860 <__assert_fail@plt+0x21e0>
   138f8:	mov	r0, #0
   138fc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13900:			; <UNDEFINED> instruction: 0x000137b0
   13904:	andeq	r0, r0, r8, lsr r1
   13908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1390c:	sub	sp, sp, #28
   13910:	ldr	ip, [pc, #684]	; 13bc4 <__assert_fail@plt+0x2544>
   13914:	mov	r6, r1
   13918:	mov	sl, r0
   1391c:	mov	r5, #0
   13920:	add	ip, pc, ip
   13924:	str	ip, [sp, #12]
   13928:	ldr	ip, [pc, #664]	; 13bc8 <__assert_fail@plt+0x2548>
   1392c:	mov	r8, #2000	; 0x7d0
   13930:	ldr	r1, [r0]
   13934:	add	ip, pc, ip
   13938:	mov	fp, ip
   1393c:	b	13944 <__assert_fail@plt+0x22c4>
   13940:	mov	r5, r4
   13944:	add	r4, r5, #1
   13948:	cmp	r4, r1
   1394c:	bge	13b40 <__assert_fail@plt+0x24c0>
   13950:	ldr	r3, [r6]
   13954:	lsl	r7, r4, #2
   13958:	ldr	r0, [r3, r4, lsl #2]
   1395c:	ldrb	r2, [r0]
   13960:	cmp	r2, #64	; 0x40
   13964:	bne	13940 <__assert_fail@plt+0x22c0>
   13968:	subs	r8, r8, #1
   1396c:	beq	13b98 <__assert_fail@plt+0x2518>
   13970:	add	r0, r0, #1
   13974:	mov	r1, fp
   13978:	bl	11608 <fopen64@plt>
   1397c:	subs	r9, r0, #0
   13980:	beq	13b38 <__assert_fail@plt+0x24b8>
   13984:	mov	r1, #0
   13988:	mov	r2, #2
   1398c:	bl	11644 <fseek@plt>
   13990:	cmn	r0, #1
   13994:	beq	13b30 <__assert_fail@plt+0x24b0>
   13998:	mov	r0, r9
   1399c:	bl	11398 <ftell@plt>
   139a0:	cmn	r0, #1
   139a4:	mov	ip, r0
   139a8:	beq	13b30 <__assert_fail@plt+0x24b0>
   139ac:	mov	r1, #0
   139b0:	mov	r0, r9
   139b4:	mov	r2, r1
   139b8:	str	ip, [sp, #4]
   139bc:	bl	11644 <fseek@plt>
   139c0:	ldr	ip, [sp, #4]
   139c4:	cmn	r0, #1
   139c8:	beq	13b30 <__assert_fail@plt+0x24b0>
   139cc:	add	r0, ip, #1
   139d0:	bl	11440 <xmalloc@plt>
   139d4:	ldr	ip, [sp, #4]
   139d8:	mov	r3, r9
   139dc:	mov	r1, #1
   139e0:	mov	r2, ip
   139e4:	str	r0, [sp, #16]
   139e8:	bl	11470 <fread@plt>
   139ec:	ldr	ip, [sp, #4]
   139f0:	cmp	ip, r0
   139f4:	mov	r3, r0
   139f8:	beq	13a14 <__assert_fail@plt+0x2394>
   139fc:	mov	r0, r9
   13a00:	str	r3, [sp, #8]
   13a04:	bl	11368 <ferror@plt>
   13a08:	ldr	r3, [sp, #8]
   13a0c:	cmp	r0, #0
   13a10:	bne	13b30 <__assert_fail@plt+0x24b0>
   13a14:	ldr	ip, [sp, #16]
   13a18:	mov	r0, #0
   13a1c:	strb	r0, [ip, r3]
   13a20:	ldrb	r3, [ip]
   13a24:	cmp	r3, #0
   13a28:	beq	13a6c <__assert_fail@plt+0x23ec>
   13a2c:	ldr	r2, [pc, #408]	; 13bcc <__assert_fail@plt+0x254c>
   13a30:	lsl	r3, r3, #1
   13a34:	ldr	ip, [sp, #12]
   13a38:	ldr	r1, [ip, r2]
   13a3c:	ldrh	r3, [r1, r3]
   13a40:	tst	r3, #64	; 0x40
   13a44:	beq	13b48 <__assert_fail@plt+0x24c8>
   13a48:	ldr	r2, [sp, #16]
   13a4c:	b	13a60 <__assert_fail@plt+0x23e0>
   13a50:	lsl	r3, r3, #1
   13a54:	ldrh	r3, [r1, r3]
   13a58:	tst	r3, #64	; 0x40
   13a5c:	beq	13b48 <__assert_fail@plt+0x24c8>
   13a60:	ldrb	r3, [r2, #1]!
   13a64:	cmp	r3, #0
   13a68:	bne	13a50 <__assert_fail@plt+0x23d0>
   13a6c:	mov	r0, #4
   13a70:	mov	ip, #0
   13a74:	str	ip, [sp, #4]
   13a78:	bl	11440 <xmalloc@plt>
   13a7c:	ldr	ip, [sp, #4]
   13a80:	mov	r1, #0
   13a84:	str	r0, [sp, #20]
   13a88:	str	r1, [r0]
   13a8c:	ldr	r0, [r6]
   13a90:	str	ip, [sp, #8]
   13a94:	bl	13540 <__assert_fail@plt+0x1ec0>
   13a98:	ldr	r3, [sp, #8]
   13a9c:	ldr	ip, [sp, #4]
   13aa0:	str	r0, [r6]
   13aa4:	ldr	r1, [sl]
   13aa8:	str	ip, [sp, #4]
   13aac:	add	r1, r1, #1
   13ab0:	str	r3, [sp, #8]
   13ab4:	add	r1, r1, r3
   13ab8:	lsl	r1, r1, #2
   13abc:	bl	113ec <xrealloc@plt>
   13ac0:	ldr	r3, [sp, #8]
   13ac4:	ldr	r2, [sl]
   13ac8:	add	lr, r7, #4
   13acc:	rsb	r2, r4, r2
   13ad0:	lsl	r2, r2, #2
   13ad4:	mov	r1, r0
   13ad8:	add	r0, r3, r4
   13adc:	str	r1, [r6]
   13ae0:	mov	r4, r5
   13ae4:	add	r0, r1, r0, lsl #2
   13ae8:	add	r1, r1, lr
   13aec:	str	r3, [sp, #8]
   13af0:	bl	11344 <memmove@plt>
   13af4:	ldr	ip, [sp, #4]
   13af8:	ldr	r0, [r6]
   13afc:	ldr	r1, [sp, #20]
   13b00:	mov	r2, ip
   13b04:	add	r0, r0, r7
   13b08:	bl	11380 <memcpy@plt>
   13b0c:	ldr	r2, [sl]
   13b10:	ldr	r3, [sp, #8]
   13b14:	sub	r2, r2, #1
   13b18:	ldr	r0, [sp, #20]
   13b1c:	add	r3, r2, r3
   13b20:	str	r3, [sl]
   13b24:	bl	1135c <free@plt>
   13b28:	ldr	r0, [sp, #16]
   13b2c:	bl	1135c <free@plt>
   13b30:	mov	r0, r9
   13b34:	bl	11590 <fclose@plt>
   13b38:	ldr	r1, [sl]
   13b3c:	b	13940 <__assert_fail@plt+0x22c0>
   13b40:	add	sp, sp, #28
   13b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b48:	ldr	r0, [sp, #16]
   13b4c:	bl	1360c <__assert_fail@plt+0x1f8c>
   13b50:	ldr	ip, [r0]
   13b54:	str	r0, [sp, #20]
   13b58:	ldr	r0, [r6]
   13b5c:	str	ip, [sp, #4]
   13b60:	bl	13540 <__assert_fail@plt+0x1ec0>
   13b64:	ldr	ip, [sp, #4]
   13b68:	cmp	ip, #0
   13b6c:	moveq	r3, ip
   13b70:	str	r0, [r6]
   13b74:	beq	13aa4 <__assert_fail@plt+0x2424>
   13b78:	ldr	r2, [sp, #20]
   13b7c:	mov	r3, #0
   13b80:	ldr	r1, [r2, #4]!
   13b84:	add	r3, r3, #1
   13b88:	cmp	r1, #0
   13b8c:	lsl	ip, r3, #2
   13b90:	bne	13b80 <__assert_fail@plt+0x2500>
   13b94:	b	13aa4 <__assert_fail@plt+0x2424>
   13b98:	ldr	ip, [sp, #12]
   13b9c:	mov	r1, #1
   13ba0:	ldr	r0, [pc, #40]	; 13bd0 <__assert_fail@plt+0x2550>
   13ba4:	ldr	r2, [pc, #40]	; 13bd4 <__assert_fail@plt+0x2554>
   13ba8:	ldr	r3, [r3]
   13bac:	ldr	r0, [ip, r0]
   13bb0:	add	r2, pc, r2
   13bb4:	ldr	r0, [r0]
   13bb8:	bl	11578 <__fprintf_chk@plt>
   13bbc:	mov	r0, #1
   13bc0:	bl	115e4 <xexit@plt>
   13bc4:	ldrdeq	r3, [r1], -r8
   13bc8:	andeq	r2, r0, ip, lsl #6
   13bcc:	andeq	r0, r0, r8, lsr r1
   13bd0:	andeq	r0, r0, ip, lsr r1
   13bd4:			; <UNDEFINED> instruction: 0x000024bc
   13bd8:	subs	r3, r0, #0
   13bdc:	beq	13c04 <__assert_fail@plt+0x2584>
   13be0:	ldr	r0, [r3]
   13be4:	cmp	r0, #0
   13be8:	bxeq	lr
   13bec:	mov	r0, #0
   13bf0:	ldr	r2, [r3, #4]!
   13bf4:	add	r0, r0, #1
   13bf8:	cmp	r2, #0
   13bfc:	bne	13bf0 <__assert_fail@plt+0x2570>
   13c00:	bx	lr
   13c04:	mov	r0, r3
   13c08:	bx	lr
   13c0c:	ldr	r3, [pc, #488]	; 13dfc <__assert_fail@plt+0x277c>
   13c10:	push	{r4, r5, r6, lr}
   13c14:	ldr	r0, [pc, r3]
   13c18:	cmp	r0, #0
   13c1c:	popne	{r4, r5, r6, pc}
   13c20:	ldr	r0, [pc, #472]	; 13e00 <__assert_fail@plt+0x2780>
   13c24:	add	r0, pc, r0
   13c28:	bl	11494 <getenv@plt>
   13c2c:	subs	r4, r0, #0
   13c30:	beq	13ca8 <__assert_fail@plt+0x2628>
   13c34:	mov	r1, #7
   13c38:	bl	11584 <access@plt>
   13c3c:	cmp	r0, #0
   13c40:	bne	13ce4 <__assert_fail@plt+0x2664>
   13c44:	ldr	r0, [pc, #440]	; 13e04 <__assert_fail@plt+0x2784>
   13c48:	add	r0, pc, r0
   13c4c:	bl	11494 <getenv@plt>
   13c50:	ldr	r0, [pc, #432]	; 13e08 <__assert_fail@plt+0x2788>
   13c54:	add	r0, pc, r0
   13c58:	bl	11494 <getenv@plt>
   13c5c:	mov	r0, r4
   13c60:	bl	11530 <strlen@plt>
   13c64:	mov	r3, r0
   13c68:	mov	r5, r0
   13c6c:	add	r6, r3, #1
   13c70:	add	r0, r0, #2
   13c74:	bl	11440 <xmalloc@plt>
   13c78:	mov	r1, r4
   13c7c:	bl	11464 <strcpy@plt>
   13c80:	ldr	r2, [pc, #388]	; 13e0c <__assert_fail@plt+0x278c>
   13c84:	mov	r1, #0
   13c88:	add	r2, pc, r2
   13c8c:	mov	r3, r0
   13c90:	mov	r0, #47	; 0x2f
   13c94:	str	r3, [r2]
   13c98:	strb	r0, [r3, r5]
   13c9c:	mov	r0, r3
   13ca0:	strb	r1, [r3, r6]
   13ca4:	pop	{r4, r5, r6, pc}
   13ca8:	ldr	r0, [pc, #352]	; 13e10 <__assert_fail@plt+0x2790>
   13cac:	add	r0, pc, r0
   13cb0:	bl	11494 <getenv@plt>
   13cb4:	mov	r4, r0
   13cb8:	cmp	r4, #0
   13cbc:	beq	13cf8 <__assert_fail@plt+0x2678>
   13cc0:	mov	r0, r4
   13cc4:	mov	r1, #7
   13cc8:	bl	11584 <access@plt>
   13ccc:	cmp	r0, #0
   13cd0:	bne	13d88 <__assert_fail@plt+0x2708>
   13cd4:	ldr	r0, [pc, #312]	; 13e14 <__assert_fail@plt+0x2794>
   13cd8:	add	r0, pc, r0
   13cdc:	bl	11494 <getenv@plt>
   13ce0:	b	13c5c <__assert_fail@plt+0x25dc>
   13ce4:	ldr	r0, [pc, #300]	; 13e18 <__assert_fail@plt+0x2798>
   13ce8:	add	r0, pc, r0
   13cec:	bl	11494 <getenv@plt>
   13cf0:	mov	r4, r0
   13cf4:	b	13cb8 <__assert_fail@plt+0x2638>
   13cf8:	ldr	r0, [pc, #284]	; 13e1c <__assert_fail@plt+0x279c>
   13cfc:	add	r0, pc, r0
   13d00:	bl	11494 <getenv@plt>
   13d04:	mov	r4, r0
   13d08:	cmp	r4, #0
   13d0c:	beq	13d24 <__assert_fail@plt+0x26a4>
   13d10:	mov	r0, r4
   13d14:	mov	r1, #7
   13d18:	bl	11584 <access@plt>
   13d1c:	cmp	r0, #0
   13d20:	beq	13c5c <__assert_fail@plt+0x25dc>
   13d24:	ldr	r4, [pc, #244]	; 13e20 <__assert_fail@plt+0x27a0>
   13d28:	mov	r1, #7
   13d2c:	add	r4, pc, r4
   13d30:	mov	r0, r4
   13d34:	bl	11584 <access@plt>
   13d38:	cmp	r0, #0
   13d3c:	moveq	r6, #5
   13d40:	moveq	r0, #6
   13d44:	moveq	r5, #4
   13d48:	beq	13c74 <__assert_fail@plt+0x25f4>
   13d4c:	ldr	r5, [pc, #208]	; 13e24 <__assert_fail@plt+0x27a4>
   13d50:	mov	r1, #7
   13d54:	add	r5, pc, r5
   13d58:	add	r4, r5, #8
   13d5c:	mov	r0, r4
   13d60:	bl	11584 <access@plt>
   13d64:	cmp	r0, #0
   13d68:	bne	13d9c <__assert_fail@plt+0x271c>
   13d6c:	mov	r0, r4
   13d70:	bl	11530 <strlen@plt>
   13d74:	mov	r6, r0
   13d78:	mov	r5, r0
   13d7c:	add	r6, r6, #1
   13d80:	add	r0, r0, #2
   13d84:	b	13c74 <__assert_fail@plt+0x25f4>
   13d88:	ldr	r0, [pc, #152]	; 13e28 <__assert_fail@plt+0x27a8>
   13d8c:	add	r0, pc, r0
   13d90:	bl	11494 <getenv@plt>
   13d94:	mov	r4, r0
   13d98:	b	13d08 <__assert_fail@plt+0x2688>
   13d9c:	add	r4, r5, #20
   13da0:	mov	r1, #7
   13da4:	mov	r0, r4
   13da8:	bl	11584 <access@plt>
   13dac:	cmp	r0, #0
   13db0:	beq	13d6c <__assert_fail@plt+0x26ec>
   13db4:	mov	r0, r5
   13db8:	mov	r1, #7
   13dbc:	bl	11584 <access@plt>
   13dc0:	cmp	r0, #0
   13dc4:	bne	13de4 <__assert_fail@plt+0x2764>
   13dc8:	mov	r0, r5
   13dcc:	mov	r4, r5
   13dd0:	bl	11530 <strlen@plt>
   13dd4:	mov	r5, r0
   13dd8:	add	r0, r0, #2
   13ddc:	add	r6, r5, #1
   13de0:	b	13c74 <__assert_fail@plt+0x25f4>
   13de4:	ldr	r4, [pc, #64]	; 13e2c <__assert_fail@plt+0x27ac>
   13de8:	mov	r6, #2
   13dec:	mov	r0, #3
   13df0:	mov	r5, #1
   13df4:	add	r4, pc, r4
   13df8:	b	13c74 <__assert_fail@plt+0x25f4>
   13dfc:	andeq	r3, r1, r0, ror #16
   13e00:	andeq	r2, r0, r0, lsr #9
   13e04:	andeq	r2, r0, r4, lsl #9
   13e08:	andeq	r2, r0, ip, ror r4
   13e0c:	andeq	r3, r1, ip, ror #15
   13e10:	andeq	r2, r0, r0, lsr #8
   13e14:	strdeq	r2, [r0], -r8
   13e18:	andeq	r2, r0, r4, ror #7
   13e1c:	ldrdeq	r2, [r0], -r4
   13e20:	muleq	r0, r0, r3
   13e24:	andeq	r2, r0, r4, asr #6
   13e28:	andeq	r2, r0, r4, asr #6
   13e2c:	andeq	r2, r0, r4, asr #5
   13e30:	push	{r4, r5, r6, r7, r8, r9, lr}
   13e34:	sub	sp, sp, #12
   13e38:	mov	r6, r0
   13e3c:	bl	13c0c <__assert_fail@plt+0x258c>
   13e40:	ldr	r9, [pc, #236]	; 13f34 <__assert_fail@plt+0x28b4>
   13e44:	cmp	r6, #0
   13e48:	add	r9, pc, r9
   13e4c:	mov	r7, r0
   13e50:	beq	13ee4 <__assert_fail@plt+0x2864>
   13e54:	mov	r0, r6
   13e58:	bl	11530 <strlen@plt>
   13e5c:	mov	r8, r0
   13e60:	mov	r4, r0
   13e64:	mov	r0, r7
   13e68:	bl	11530 <strlen@plt>
   13e6c:	mov	r5, r0
   13e70:	add	r0, r0, r4
   13e74:	add	r0, r0, #9
   13e78:	bl	11440 <xmalloc@plt>
   13e7c:	mov	r1, r7
   13e80:	mov	r4, r0
   13e84:	bl	11464 <strcpy@plt>
   13e88:	ldr	r2, [pc, #168]	; 13f38 <__assert_fail@plt+0x28b8>
   13e8c:	add	r3, r4, r5
   13e90:	add	ip, r5, #8
   13e94:	add	r2, pc, r2
   13e98:	ldm	r2!, {r0, r1}
   13e9c:	ldrb	r2, [r2]
   13ea0:	str	r0, [r4, r5]
   13ea4:	add	r0, r4, ip
   13ea8:	str	r1, [r3, #4]
   13eac:	mov	r1, r6
   13eb0:	strb	r2, [r3, #8]
   13eb4:	bl	11464 <strcpy@plt>
   13eb8:	mov	r0, r4
   13ebc:	mov	r1, r8
   13ec0:	bl	11488 <mkstemps64@plt>
   13ec4:	cmn	r0, #1
   13ec8:	beq	13ef8 <__assert_fail@plt+0x2878>
   13ecc:	bl	11674 <close@plt>
   13ed0:	cmp	r0, #0
   13ed4:	bne	13f30 <__assert_fail@plt+0x28b0>
   13ed8:	mov	r0, r4
   13edc:	add	sp, sp, #12
   13ee0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13ee4:	mov	r8, r6
   13ee8:	ldr	r6, [pc, #76]	; 13f3c <__assert_fail@plt+0x28bc>
   13eec:	mov	r4, r8
   13ef0:	add	r6, pc, r6
   13ef4:	b	13e64 <__assert_fail@plt+0x27e4>
   13ef8:	ldr	r3, [pc, #64]	; 13f40 <__assert_fail@plt+0x28c0>
   13efc:	ldr	r3, [r9, r3]
   13f00:	ldr	r4, [r3]
   13f04:	bl	11554 <__errno_location@plt>
   13f08:	ldr	r0, [r0]
   13f0c:	bl	114d0 <strerror@plt>
   13f10:	ldr	r2, [pc, #44]	; 13f44 <__assert_fail@plt+0x28c4>
   13f14:	mov	r3, r7
   13f18:	mov	r1, #1
   13f1c:	add	r2, pc, r2
   13f20:	str	r0, [sp]
   13f24:	mov	r0, r4
   13f28:	bl	11578 <__fprintf_chk@plt>
   13f2c:	bl	11668 <abort@plt>
   13f30:	bl	11668 <abort@plt>
   13f34:			; <UNDEFINED> instruction: 0x000131b0
   13f38:	andeq	r2, r0, r4, asr #4
   13f3c:			; <UNDEFINED> instruction: 0x000017b0
   13f40:	andeq	r0, r0, ip, lsr r1
   13f44:	andeq	r2, r0, r8, asr #3
   13f48:	ldr	r3, [r0]
   13f4c:	tst	r3, #1073741824	; 0x40000000
   13f50:	orrne	r3, r3, #-2147483648	; 0x80000000
   13f54:	biceq	r3, r3, #-2147483648	; 0x80000000
   13f58:	add	r0, r0, r3
   13f5c:	bx	lr
   13f60:	cmp	r1, #0
   13f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f68:	mov	r6, r0
   13f6c:	sub	sp, sp, #12
   13f70:	mov	r9, r2
   13f74:	beq	13ff8 <__assert_fail@plt+0x2978>
   13f78:	sub	r1, r1, #1
   13f7c:	mov	r7, #0
   13f80:	str	r1, [sp, #4]
   13f84:	mov	r8, r1
   13f88:	add	r4, r7, r8
   13f8c:	add	r4, r4, r4, lsr #31
   13f90:	asr	r4, r4, #1
   13f94:	lsl	r5, r4, #3
   13f98:	add	fp, r6, r5
   13f9c:	mov	r0, fp
   13fa0:	bl	13f48 <__assert_fail@plt+0x28c8>
   13fa4:	ldr	r3, [sp, #4]
   13fa8:	cmp	r3, r4
   13fac:	mov	sl, r0
   13fb0:	add	r0, r5, #8
   13fb4:	add	r0, r6, r0
   13fb8:	beq	14008 <__assert_fail@plt+0x2988>
   13fbc:	bl	13f48 <__assert_fail@plt+0x28c8>
   13fc0:	cmp	sl, r9
   13fc4:	sub	r0, r0, #1
   13fc8:	bls	13fe8 <__assert_fail@plt+0x2968>
   13fcc:	cmp	r4, r7
   13fd0:	sub	r8, r4, #1
   13fd4:	bne	13f88 <__assert_fail@plt+0x2908>
   13fd8:	mov	fp, #0
   13fdc:	mov	r0, fp
   13fe0:	add	sp, sp, #12
   13fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe8:	cmp	r0, r9
   13fec:	add	r7, r4, #1
   13ff0:	bcc	13f88 <__assert_fail@plt+0x2908>
   13ff4:	b	13fdc <__assert_fail@plt+0x295c>
   13ff8:	mov	fp, r1
   13ffc:	mov	r0, fp
   14000:	add	sp, sp, #12
   14004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14008:	cmp	sl, r9
   1400c:	bhi	13fcc <__assert_fail@plt+0x294c>
   14010:	b	13fdc <__assert_fail@plt+0x295c>
   14014:	cmp	r0, #1
   14018:	beq	1404c <__assert_fail@plt+0x29cc>
   1401c:	cmp	r0, #2
   14020:	beq	14040 <__assert_fail@plt+0x29c0>
   14024:	cmp	r0, #0
   14028:	beq	14034 <__assert_fail@plt+0x29b4>
   1402c:	mov	r0, #0
   14030:	bx	lr
   14034:	ldr	r0, [pc, #28]	; 14058 <__assert_fail@plt+0x29d8>
   14038:	add	r0, pc, r0
   1403c:	bx	lr
   14040:	ldr	r0, [pc, #20]	; 1405c <__assert_fail@plt+0x29dc>
   14044:	add	r0, pc, r0
   14048:	bx	lr
   1404c:	ldr	r0, [pc, #12]	; 14060 <__assert_fail@plt+0x29e0>
   14050:	add	r0, pc, r0
   14054:	bx	lr
   14058:	andeq	r0, r0, r0, lsl #23
   1405c:	andeq	r0, r0, r4, lsl #23
   14060:	andeq	r0, r0, r0, ror fp
   14064:	ldr	r3, [pc, #276]	; 14180 <__assert_fail@plt+0x2b00>
   14068:	ldr	r2, [pc, #276]	; 14184 <__assert_fail@plt+0x2b04>
   1406c:	add	r3, pc, r3
   14070:	push	{r4, r5, lr}
   14074:	mov	r4, r0
   14078:	ldr	r2, [r3, r2]
   1407c:	sub	sp, sp, #12
   14080:	sub	r5, r1, #2
   14084:	cmp	r2, #0
   14088:	beq	14160 <__assert_fail@plt+0x2ae0>
   1408c:	mov	r0, r5
   14090:	add	r1, sp, #4
   14094:	bl	114ac <__gnu_Unwind_Find_exidx@plt>
   14098:	cmp	r0, #0
   1409c:	beq	1412c <__assert_fail@plt+0x2aac>
   140a0:	mov	r2, r5
   140a4:	ldr	r1, [sp, #4]
   140a8:	bl	13f60 <__assert_fail@plt+0x28e0>
   140ac:	subs	r5, r0, #0
   140b0:	beq	1412c <__assert_fail@plt+0x2aac>
   140b4:	bl	13f48 <__assert_fail@plt+0x28c8>
   140b8:	ldr	r3, [r5, #4]
   140bc:	cmp	r3, #1
   140c0:	str	r0, [r4, #72]	; 0x48
   140c4:	beq	14114 <__assert_fail@plt+0x2a94>
   140c8:	cmp	r3, #0
   140cc:	add	r0, r5, #4
   140d0:	strlt	r0, [r4, #76]	; 0x4c
   140d4:	movlt	r3, #1
   140d8:	strlt	r3, [r4, #80]	; 0x50
   140dc:	blt	140f0 <__assert_fail@plt+0x2a70>
   140e0:	bl	13f48 <__assert_fail@plt+0x28c8>
   140e4:	mov	r3, #0
   140e8:	str	r3, [r4, #80]	; 0x50
   140ec:	str	r0, [r4, #76]	; 0x4c
   140f0:	ldr	r3, [r0]
   140f4:	cmp	r3, #0
   140f8:	blt	14144 <__assert_fail@plt+0x2ac4>
   140fc:	bl	13f48 <__assert_fail@plt+0x28c8>
   14100:	mov	r3, #0
   14104:	str	r0, [r4, #16]
   14108:	mov	r0, r3
   1410c:	add	sp, sp, #12
   14110:	pop	{r4, r5, pc}
   14114:	mov	r3, #5
   14118:	mov	r2, #0
   1411c:	mov	r0, r3
   14120:	str	r2, [r4, #16]
   14124:	add	sp, sp, #12
   14128:	pop	{r4, r5, pc}
   1412c:	mov	r3, #9
   14130:	mov	r2, #0
   14134:	mov	r0, r3
   14138:	str	r2, [r4, #16]
   1413c:	add	sp, sp, #12
   14140:	pop	{r4, r5, pc}
   14144:	ubfx	r0, r3, #24, #4
   14148:	bl	14014 <__assert_fail@plt+0x2994>
   1414c:	cmp	r0, #0
   14150:	str	r0, [r4, #16]
   14154:	moveq	r3, #9
   14158:	movne	r3, #0
   1415c:	b	14108 <__assert_fail@plt+0x2a88>
   14160:	ldr	r2, [pc, #32]	; 14188 <__assert_fail@plt+0x2b08>
   14164:	ldr	r1, [pc, #32]	; 1418c <__assert_fail@plt+0x2b0c>
   14168:	ldr	r2, [r3, r2]
   1416c:	ldr	r0, [r3, r1]
   14170:	rsb	r3, r0, r2
   14174:	asr	r3, r3, #3
   14178:	str	r3, [sp, #4]
   1417c:	b	140a0 <__assert_fail@plt+0x2a20>
   14180:	andeq	r2, r1, ip, lsl #31
   14184:	andeq	r0, r0, r0, asr #2
   14188:	andeq	r0, r0, r4, asr #2
   1418c:	andeq	r0, r0, ip, asr #2
   14190:	ldr	r3, [r0]
   14194:	push	{r4, lr}
   14198:	tst	r3, #1
   1419c:	mov	r4, r0
   141a0:	bne	141b8 <__assert_fail@plt+0x2b38>
   141a4:	tst	r3, #2
   141a8:	add	r0, r0, #72	; 0x48
   141ac:	beq	141dc <__assert_fail@plt+0x2b5c>
   141b0:	bl	14f88 <__assert_fail@plt+0x3908>
   141b4:	ldr	r3, [r4]
   141b8:	tst	r3, #4
   141bc:	beq	141ec <__assert_fail@plt+0x2b6c>
   141c0:	tst	r3, #8
   141c4:	beq	14200 <__assert_fail@plt+0x2b80>
   141c8:	tst	r3, #16
   141cc:	popne	{r4, pc}
   141d0:	add	r0, r4, #464	; 0x1d0
   141d4:	pop	{r4, lr}
   141d8:	b	15030 <__assert_fail@plt+0x39b0>
   141dc:	bl	14f78 <__assert_fail@plt+0x38f8>
   141e0:	ldr	r3, [r4]
   141e4:	tst	r3, #4
   141e8:	bne	141c0 <__assert_fail@plt+0x2b40>
   141ec:	add	r0, r4, #208	; 0xd0
   141f0:	bl	14f98 <__assert_fail@plt+0x3918>
   141f4:	ldr	r3, [r4]
   141f8:	tst	r3, #8
   141fc:	bne	141c8 <__assert_fail@plt+0x2b48>
   14200:	add	r0, r4, #336	; 0x150
   14204:	bl	14fa8 <__assert_fail@plt+0x3928>
   14208:	ldr	r3, [r4]
   1420c:	tst	r3, #16
   14210:	popne	{r4, pc}
   14214:	b	141d0 <__assert_fail@plt+0x2b50>
   14218:	ldr	r3, [r0]
   1421c:	cmp	r3, #0
   14220:	ldrne	r0, [r3, r0]
   14224:	moveq	r0, r3
   14228:	bx	lr
   1422c:	mov	r0, #9
   14230:	bx	lr
   14234:	nop	{0}
   14238:	bx	lr
   1423c:	push	{r4, r5, r6, lr}
   14240:	mov	r4, r0
   14244:	mov	r5, r1
   14248:	b	14270 <__assert_fail@plt+0x2bf0>
   1424c:	ldr	ip, [r5, #64]	; 0x40
   14250:	mov	r0, #1
   14254:	ldr	r3, [r4, #16]
   14258:	mov	r1, r4
   1425c:	mov	r2, r5
   14260:	str	ip, [r4, #20]
   14264:	blx	r3
   14268:	cmp	r0, #8
   1426c:	bne	14288 <__assert_fail@plt+0x2c08>
   14270:	mov	r0, r4
   14274:	ldr	r1, [r5, #64]	; 0x40
   14278:	bl	14064 <__assert_fail@plt+0x29e4>
   1427c:	subs	r6, r0, #0
   14280:	beq	1424c <__assert_fail@plt+0x2bcc>
   14284:	bl	11668 <abort@plt>
   14288:	cmp	r0, #7
   1428c:	bne	14284 <__assert_fail@plt+0x2c04>
   14290:	mov	r0, r6
   14294:	ldr	r1, [r5, #64]	; 0x40
   14298:	bl	14234 <__assert_fail@plt+0x2bb4>
   1429c:	add	r0, r5, #4
   142a0:	bl	14f64 <__assert_fail@plt+0x38e4>
   142a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142a8:	add	r5, r1, #4
   142ac:	sub	sp, sp, #980	; 0x3d4
   142b0:	mov	r4, r0
   142b4:	mov	ip, r2
   142b8:	add	r3, sp, #20
   142bc:	str	r3, [sp, #12]
   142c0:	add	lr, sp, #20
   142c4:	ldm	r5!, {r0, r1, r2, r3}
   142c8:	cmp	ip, #0
   142cc:	ldr	r9, [r4, #12]
   142d0:	mov	r8, #0
   142d4:	ldr	sl, [r4, #24]
   142d8:	movne	fp, #10
   142dc:	moveq	fp, #9
   142e0:	add	r6, sp, #16
   142e4:	stmia	lr!, {r0, r1, r2, r3}
   142e8:	add	r7, sp, #496	; 0x1f0
   142ec:	ldm	r5!, {r0, r1, r2, r3}
   142f0:	stmia	lr!, {r0, r1, r2, r3}
   142f4:	ldm	r5!, {r0, r1, r2, r3}
   142f8:	stmia	lr!, {r0, r1, r2, r3}
   142fc:	ldm	r5, {r0, r1, r2, r3}
   14300:	stm	lr, {r0, r1, r2, r3}
   14304:	mov	r0, r4
   14308:	ldr	r1, [sp, #80]	; 0x50
   1430c:	str	r8, [sp, #16]
   14310:	bl	14064 <__assert_fail@plt+0x29e4>
   14314:	mov	r5, r0
   14318:	cmp	r5, #0
   1431c:	beq	14358 <__assert_fail@plt+0x2cd8>
   14320:	ldr	r0, [sp, #72]	; 0x48
   14324:	mov	r2, r4
   14328:	str	r6, [sp]
   1432c:	orr	r1, fp, #16
   14330:	str	sl, [sp, #4]
   14334:	mov	r3, r4
   14338:	str	r0, [sp, #84]	; 0x54
   1433c:	mov	r0, #1
   14340:	blx	r9
   14344:	cmp	r0, #0
   14348:	bne	143ec <__assert_fail@plt+0x2d6c>
   1434c:	mov	r0, r5
   14350:	add	sp, sp, #980	; 0x3d4
   14354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14358:	ldr	r3, [sp, #80]	; 0x50
   1435c:	mov	r1, r6
   14360:	mov	r2, #480	; 0x1e0
   14364:	mov	r0, r7
   14368:	str	r3, [r4, #20]
   1436c:	bl	11380 <memcpy@plt>
   14370:	ldr	r3, [r4, #16]
   14374:	mov	r1, r4
   14378:	mov	r2, r7
   1437c:	mov	r0, fp
   14380:	blx	r3
   14384:	ldr	r3, [sp, #552]	; 0x228
   14388:	mov	r1, fp
   1438c:	str	r6, [sp]
   14390:	str	sl, [sp, #4]
   14394:	mov	r2, r4
   14398:	str	r3, [sp, #84]	; 0x54
   1439c:	mov	r3, r4
   143a0:	mov	r8, r0
   143a4:	mov	r0, #1
   143a8:	blx	r9
   143ac:	cmp	r0, #0
   143b0:	bne	143ec <__assert_fail@plt+0x2d6c>
   143b4:	mov	r0, r6
   143b8:	mov	r1, r7
   143bc:	mov	r2, #480	; 0x1e0
   143c0:	bl	11380 <memcpy@plt>
   143c4:	cmp	r8, #8
   143c8:	bne	143e4 <__assert_fail@plt+0x2d64>
   143cc:	mov	r0, r4
   143d0:	ldr	r1, [sp, #80]	; 0x50
   143d4:	bl	14064 <__assert_fail@plt+0x29e4>
   143d8:	mov	fp, #9
   143dc:	mov	r5, r0
   143e0:	b	14318 <__assert_fail@plt+0x2c98>
   143e4:	cmp	r8, #7
   143e8:	beq	143f8 <__assert_fail@plt+0x2d78>
   143ec:	mov	r0, #9
   143f0:	add	sp, sp, #980	; 0x3d4
   143f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143f8:	mov	r0, r5
   143fc:	ldr	r1, [sp, #80]	; 0x50
   14400:	bl	14234 <__assert_fail@plt+0x2bb4>
   14404:	add	r0, sp, #20
   14408:	bl	14f64 <__assert_fail@plt+0x38e4>
   1440c:	ldr	r0, [r0, #68]	; 0x44
   14410:	bx	lr
   14414:	ldr	r3, [r1, #60]	; 0x3c
   14418:	push	{r4, r5, r6, r7, lr}
   1441c:	add	lr, r1, #4
   14420:	str	r3, [r1, #64]	; 0x40
   14424:	mov	r7, r1
   14428:	mov	r4, r0
   1442c:	sub	sp, sp, #484	; 0x1e4
   14430:	ldm	lr!, {r0, r1, r2, r3}
   14434:	add	ip, sp, #4
   14438:	add	r6, sp, #480	; 0x1e0
   1443c:	mvn	r5, #0
   14440:	stmia	ip!, {r0, r1, r2, r3}
   14444:	ldm	lr!, {r0, r1, r2, r3}
   14448:	stmia	ip!, {r0, r1, r2, r3}
   1444c:	ldm	lr!, {r0, r1, r2, r3}
   14450:	stmia	ip!, {r0, r1, r2, r3}
   14454:	ldm	lr, {r0, r1, r2, r3}
   14458:	stm	ip, {r0, r1, r2, r3}
   1445c:	str	r5, [r6, #-480]!	; 0xfffffe20
   14460:	b	14480 <__assert_fail@plt+0x2e00>
   14464:	ldr	r3, [r4, #16]
   14468:	mov	r1, r4
   1446c:	mov	r2, sp
   14470:	blx	r3
   14474:	cmp	r0, #8
   14478:	mov	r5, r0
   1447c:	bne	144a0 <__assert_fail@plt+0x2e20>
   14480:	mov	r0, r4
   14484:	ldr	r1, [sp, #64]	; 0x40
   14488:	bl	14064 <__assert_fail@plt+0x29e4>
   1448c:	cmp	r0, #0
   14490:	beq	14464 <__assert_fail@plt+0x2de4>
   14494:	mov	r0, #9
   14498:	add	sp, sp, #484	; 0x1e4
   1449c:	pop	{r4, r5, r6, r7, pc}
   144a0:	mov	r0, sp
   144a4:	bl	14190 <__assert_fail@plt+0x2b10>
   144a8:	cmp	r5, #6
   144ac:	bne	14494 <__assert_fail@plt+0x2e14>
   144b0:	mov	r0, r4
   144b4:	mov	r1, r7
   144b8:	bl	1423c <__assert_fail@plt+0x2bbc>
   144bc:	push	{r4}		; (str r4, [sp, #-4]!)
   144c0:	ldr	r4, [r3, #60]	; 0x3c
   144c4:	str	r1, [r0, #12]
   144c8:	mov	r1, r3
   144cc:	str	r2, [r0, #24]
   144d0:	mov	r2, #0
   144d4:	str	r4, [r3, #64]	; 0x40
   144d8:	pop	{r4}		; (ldr r4, [sp], #4)
   144dc:	b	142a4 <__assert_fail@plt+0x2c24>
   144e0:	push	{r4, r5, r6, lr}
   144e4:	mov	r4, r0
   144e8:	ldr	r6, [r0, #12]
   144ec:	mov	r5, r1
   144f0:	ldr	r3, [r0, #20]
   144f4:	cmp	r6, #0
   144f8:	str	r3, [r1, #64]	; 0x40
   144fc:	beq	1450c <__assert_fail@plt+0x2e8c>
   14500:	mov	r2, #1
   14504:	bl	142a4 <__assert_fail@plt+0x2c24>
   14508:	bl	11668 <abort@plt>
   1450c:	ldr	r3, [r0, #16]
   14510:	mov	r1, r4
   14514:	mov	r0, #2
   14518:	mov	r2, r5
   1451c:	blx	r3
   14520:	cmp	r0, #7
   14524:	beq	14540 <__assert_fail@plt+0x2ec0>
   14528:	cmp	r0, #8
   1452c:	bne	1453c <__assert_fail@plt+0x2ebc>
   14530:	mov	r0, r4
   14534:	mov	r1, r5
   14538:	bl	1423c <__assert_fail@plt+0x2bbc>
   1453c:	bl	11668 <abort@plt>
   14540:	mov	r0, r6
   14544:	ldr	r1, [r5, #64]	; 0x40
   14548:	bl	14234 <__assert_fail@plt+0x2bb4>
   1454c:	add	r0, r5, #4
   14550:	bl	14f64 <__assert_fail@plt+0x38e4>
   14554:	ldr	r2, [r0, #12]
   14558:	cmp	r2, #0
   1455c:	beq	14570 <__assert_fail@plt+0x2ef0>
   14560:	ldr	ip, [r1, #60]	; 0x3c
   14564:	mov	r2, #0
   14568:	str	ip, [r1, #64]	; 0x40
   1456c:	b	142a4 <__assert_fail@plt+0x2c24>
   14570:	b	14414 <__assert_fail@plt+0x2d94>
   14574:	bx	lr
   14578:	push	{r3, lr}
   1457c:	ldr	r3, [r0, #8]
   14580:	cmp	r3, #0
   14584:	popeq	{r3, pc}
   14588:	mov	r1, r0
   1458c:	mov	r0, #1
   14590:	blx	r3
   14594:	pop	{r3, pc}
   14598:	cmp	r1, #4
   1459c:	addls	pc, pc, r1, lsl #2
   145a0:	b	145d4 <__assert_fail@plt+0x2f54>
   145a4:	b	145c0 <__assert_fail@plt+0x2f40>
   145a8:	b	145b8 <__assert_fail@plt+0x2f38>
   145ac:	b	145d4 <__assert_fail@plt+0x2f54>
   145b0:	b	145b8 <__assert_fail@plt+0x2f38>
   145b4:	b	145b8 <__assert_fail@plt+0x2f38>
   145b8:	mov	r0, #1
   145bc:	bx	lr
   145c0:	cmp	r2, #15
   145c4:	cmpls	r3, #0
   145c8:	moveq	r3, #0
   145cc:	movne	r3, #1
   145d0:	beq	145dc <__assert_fail@plt+0x2f5c>
   145d4:	mov	r0, #2
   145d8:	bx	lr
   145dc:	add	r2, r0, r2, lsl #2
   145e0:	mov	r0, r3
   145e4:	ldr	r3, [r2, #4]
   145e8:	ldr	r2, [sp]
   145ec:	str	r3, [r2]
   145f0:	bx	lr
   145f4:	push	{lr}		; (str lr, [sp, #-4]!)
   145f8:	sub	sp, sp, #20
   145fc:	mov	r2, r1
   14600:	mov	r1, #0
   14604:	add	ip, sp, #12
   14608:	mov	r3, r1
   1460c:	str	ip, [sp]
   14610:	bl	14598 <__assert_fail@plt+0x2f18>
   14614:	ldr	r0, [sp, #12]
   14618:	add	sp, sp, #20
   1461c:	pop	{pc}		; (ldr pc, [sp], #4)
   14620:	cmp	r1, #4
   14624:	addls	pc, pc, r1, lsl #2
   14628:	b	1465c <__assert_fail@plt+0x2fdc>
   1462c:	b	14648 <__assert_fail@plt+0x2fc8>
   14630:	b	14640 <__assert_fail@plt+0x2fc0>
   14634:	b	1465c <__assert_fail@plt+0x2fdc>
   14638:	b	14640 <__assert_fail@plt+0x2fc0>
   1463c:	b	14640 <__assert_fail@plt+0x2fc0>
   14640:	mov	r0, #1
   14644:	bx	lr
   14648:	cmp	r2, #15
   1464c:	cmpls	r3, #0
   14650:	moveq	r3, #0
   14654:	movne	r3, #1
   14658:	beq	14664 <__assert_fail@plt+0x2fe4>
   1465c:	mov	r0, #2
   14660:	bx	lr
   14664:	ldr	ip, [sp]
   14668:	add	r2, r0, r2, lsl #2
   1466c:	mov	r0, r3
   14670:	ldr	r1, [ip]
   14674:	str	r1, [r2, #4]
   14678:	bx	lr
   1467c:	push	{lr}		; (str lr, [sp, #-4]!)
   14680:	sub	sp, sp, #20
   14684:	add	ip, sp, #16
   14688:	mov	lr, r1
   1468c:	mov	r1, #0
   14690:	str	r2, [ip, #-4]!
   14694:	mov	r3, r1
   14698:	str	ip, [sp]
   1469c:	mov	r2, lr
   146a0:	bl	14620 <__assert_fail@plt+0x2fa0>
   146a4:	add	sp, sp, #20
   146a8:	pop	{pc}		; (ldr pc, [sp], #4)
   146ac:	ldr	r3, [r2, #60]	; 0x3c
   146b0:	push	{r4, r5, r6, r7, r8, lr}
   146b4:	add	lr, r2, #4
   146b8:	str	r3, [r2, #64]	; 0x40
   146bc:	mov	r8, r0
   146c0:	mov	r7, r1
   146c4:	sub	sp, sp, #568	; 0x238
   146c8:	ldm	lr!, {r0, r1, r2, r3}
   146cc:	add	ip, sp, #92	; 0x5c
   146d0:	mvn	r6, #0
   146d4:	add	r4, sp, #88	; 0x58
   146d8:	stmia	ip!, {r0, r1, r2, r3}
   146dc:	ldm	lr!, {r0, r1, r2, r3}
   146e0:	stmia	ip!, {r0, r1, r2, r3}
   146e4:	ldm	lr!, {r0, r1, r2, r3}
   146e8:	stmia	ip!, {r0, r1, r2, r3}
   146ec:	ldm	lr, {r0, r1, r2, r3}
   146f0:	stm	ip, {r0, r1, r2, r3}
   146f4:	str	r6, [sp, #88]	; 0x58
   146f8:	b	14738 <__assert_fail@plt+0x30b8>
   146fc:	bl	1467c <__assert_fail@plt+0x2ffc>
   14700:	mov	r1, r7
   14704:	mov	r0, r4
   14708:	blx	r8
   1470c:	mov	r1, sp
   14710:	mov	r2, r4
   14714:	cmp	r0, #0
   14718:	mov	r0, #8
   1471c:	bne	14758 <__assert_fail@plt+0x30d8>
   14720:	ldr	r3, [sp, #16]
   14724:	blx	r3
   14728:	cmp	r0, #9
   1472c:	cmpne	r0, #5
   14730:	mov	r6, r0
   14734:	beq	1475c <__assert_fail@plt+0x30dc>
   14738:	ldr	r1, [sp, #152]	; 0x98
   1473c:	mov	r0, sp
   14740:	bl	14064 <__assert_fail@plt+0x29e4>
   14744:	mov	r2, sp
   14748:	mov	r1, #12
   1474c:	cmp	r0, #0
   14750:	mov	r0, r4
   14754:	beq	146fc <__assert_fail@plt+0x307c>
   14758:	mov	r6, #9
   1475c:	mov	r0, r4
   14760:	bl	14190 <__assert_fail@plt+0x2b10>
   14764:	mov	r0, r6
   14768:	add	sp, sp, #568	; 0x238
   1476c:	pop	{r4, r5, r6, r7, r8, pc}
   14770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14774:	mov	r4, r1
   14778:	ldr	r1, [r1, #76]	; 0x4c
   1477c:	mov	r8, r2
   14780:	sub	sp, sp, #44	; 0x2c
   14784:	subs	r6, r3, #0
   14788:	ldr	ip, [pc, #1064]	; 14bb8 <__assert_fail@plt+0x3538>
   1478c:	add	r3, r1, #4
   14790:	ldr	r2, [r1]
   14794:	and	r7, r0, #3
   14798:	add	ip, pc, ip
   1479c:	str	r3, [sp, #32]
   147a0:	str	ip, [sp, #4]
   147a4:	str	r2, [sp, #28]
   147a8:	bne	14954 <__assert_fail@plt+0x32d4>
   147ac:	lsl	r2, r2, #8
   147b0:	strb	r6, [sp, #37]	; 0x25
   147b4:	str	r2, [sp, #28]
   147b8:	mov	r2, #3
   147bc:	strb	r2, [sp, #36]	; 0x24
   147c0:	cmp	r7, #2
   147c4:	ldr	r2, [r4, #80]	; 0x50
   147c8:	ldreq	r3, [r4, #56]	; 0x38
   147cc:	ands	r2, r2, #1
   147d0:	bne	14928 <__assert_fail@plt+0x32a8>
   147d4:	eor	r0, r0, #8
   147d8:	str	r2, [sp, #8]
   147dc:	ubfx	r0, r0, #3, #1
   147e0:	str	r0, [sp, #12]
   147e4:	ldr	r9, [r3]
   147e8:	cmp	r9, #0
   147ec:	beq	14930 <__assert_fail@plt+0x32b0>
   147f0:	cmp	r6, #2
   147f4:	mov	r0, r8
   147f8:	addeq	r5, r3, #8
   147fc:	addne	r5, r3, #4
   14800:	ldreq	sl, [r3, #4]
   14804:	mov	r1, #15
   14808:	ldrhne	sl, [r3, #2]
   1480c:	ldrhne	r9, [r3]
   14810:	ldr	r3, [r4, #72]	; 0x48
   14814:	bic	fp, sl, #1
   14818:	add	fp, fp, r3
   1481c:	bl	145f4 <__assert_fail@plt+0x2f74>
   14820:	cmp	fp, r0
   14824:	movhi	r0, #0
   14828:	bhi	14840 <__assert_fail@plt+0x31c0>
   1482c:	bic	r3, r9, #1
   14830:	add	fp, fp, r3
   14834:	cmp	r0, fp
   14838:	movcs	r0, #0
   1483c:	movcc	r0, #1
   14840:	and	sl, sl, #1
   14844:	and	r9, r9, #1
   14848:	orr	r9, r9, sl, lsl #1
   1484c:	cmp	r9, #1
   14850:	beq	149cc <__assert_fail@plt+0x334c>
   14854:	bcc	149b0 <__assert_fail@plt+0x3330>
   14858:	cmp	r9, #2
   1485c:	bne	14944 <__assert_fail@plt+0x32c4>
   14860:	ldr	r3, [r5]
   14864:	cmp	r7, #0
   14868:	bic	fp, r3, #-2147483648	; 0x80000000
   1486c:	bne	14980 <__assert_fail@plt+0x3300>
   14870:	cmp	r0, #0
   14874:	beq	1499c <__assert_fail@plt+0x331c>
   14878:	ldr	r2, [sp, #12]
   1487c:	cmp	fp, #0
   14880:	orreq	r2, r2, #1
   14884:	cmp	r2, #0
   14888:	beq	1499c <__assert_fail@plt+0x331c>
   1488c:	cmp	fp, #0
   14890:	beq	14904 <__assert_fail@plt+0x3284>
   14894:	add	r2, r4, #88	; 0x58
   14898:	add	ip, sp, #24
   1489c:	mov	sl, r7
   148a0:	str	r7, [sp, #20]
   148a4:	str	r6, [sp, #16]
   148a8:	add	r9, r5, #4
   148ac:	mov	r7, r2
   148b0:	mov	r6, ip
   148b4:	b	148c4 <__assert_fail@plt+0x3244>
   148b8:	cmp	r3, fp
   148bc:	mov	sl, r3
   148c0:	beq	14904 <__assert_fail@plt+0x3284>
   148c4:	mov	r0, r9
   148c8:	str	r7, [sp, #24]
   148cc:	bl	14218 <__assert_fail@plt+0x2b98>
   148d0:	mov	r3, r6
   148d4:	mov	r2, #0
   148d8:	add	r9, r9, #4
   148dc:	mov	r1, r0
   148e0:	mov	r0, r4
   148e4:	bl	11518 <__cxa_type_match@plt>
   148e8:	add	r3, sl, #1
   148ec:	cmp	r0, #0
   148f0:	beq	148b8 <__assert_fail@plt+0x3238>
   148f4:	cmp	fp, sl
   148f8:	ldr	r7, [sp, #20]
   148fc:	ldr	r6, [sp, #16]
   14900:	bne	14998 <__assert_fail@plt+0x3318>
   14904:	mov	r0, r8
   14908:	mov	r1, #13
   1490c:	bl	145f4 <__assert_fail@plt+0x2f74>
   14910:	ldr	r2, [sp, #24]
   14914:	str	r5, [r4, #40]	; 0x28
   14918:	mov	r3, #6
   1491c:	str	r2, [r4, #36]	; 0x24
   14920:	str	r0, [r4, #32]
   14924:	b	14948 <__assert_fail@plt+0x32c8>
   14928:	mov	ip, #0
   1492c:	str	ip, [sp, #8]
   14930:	cmp	r6, #2
   14934:	ble	14a28 <__assert_fail@plt+0x33a8>
   14938:	bl	1422c <__assert_fail@plt+0x2bac>
   1493c:	cmp	r0, #0
   14940:	beq	14a3c <__assert_fail@plt+0x33bc>
   14944:	mov	r3, #9
   14948:	mov	r0, r3
   1494c:	add	sp, sp, #44	; 0x2c
   14950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14954:	cmp	r6, #2
   14958:	bgt	147c0 <__assert_fail@plt+0x3140>
   1495c:	lsr	r1, r2, #16
   14960:	strb	r1, [sp, #37]	; 0x25
   14964:	lsl	r2, r2, #16
   14968:	mov	ip, #2
   1496c:	uxtb	r1, r1
   14970:	str	r2, [sp, #28]
   14974:	strb	ip, [sp, #36]	; 0x24
   14978:	add	r3, r3, r1, lsl #2
   1497c:	b	147c0 <__assert_fail@plt+0x3140>
   14980:	mov	r0, r8
   14984:	mov	r1, #13
   14988:	ldr	r9, [r4, #32]
   1498c:	bl	145f4 <__assert_fail@plt+0x2f74>
   14990:	cmp	r9, r0
   14994:	beq	14adc <__assert_fail@plt+0x345c>
   14998:	ldr	r3, [r5]
   1499c:	cmp	r3, #0
   149a0:	addlt	r5, r5, #4
   149a4:	add	fp, fp, #1
   149a8:	add	r3, r5, fp, lsl #2
   149ac:	b	147e4 <__assert_fail@plt+0x3164>
   149b0:	cmp	r7, #0
   149b4:	moveq	r0, #0
   149b8:	andne	r0, r0, #1
   149bc:	cmp	r0, #0
   149c0:	bne	14b40 <__assert_fail@plt+0x34c0>
   149c4:	add	r3, r5, #4
   149c8:	b	147e4 <__assert_fail@plt+0x3164>
   149cc:	cmp	r7, #0
   149d0:	bne	14a88 <__assert_fail@plt+0x3408>
   149d4:	cmp	r0, #0
   149d8:	beq	14a20 <__assert_fail@plt+0x33a0>
   149dc:	ldm	r5, {r2, r3}
   149e0:	cmn	r3, #2
   149e4:	lsr	r9, r2, #31
   149e8:	beq	14944 <__assert_fail@plt+0x32c4>
   149ec:	cmn	r3, #1
   149f0:	add	r3, r4, #88	; 0x58
   149f4:	str	r3, [sp, #24]
   149f8:	beq	14b1c <__assert_fail@plt+0x349c>
   149fc:	add	r0, r5, #4
   14a00:	bl	14218 <__assert_fail@plt+0x2b98>
   14a04:	mov	r2, r9
   14a08:	add	r3, sp, #24
   14a0c:	mov	r1, r0
   14a10:	mov	r0, r4
   14a14:	bl	11518 <__cxa_type_match@plt>
   14a18:	cmp	r0, #0
   14a1c:	bne	14b88 <__assert_fail@plt+0x3508>
   14a20:	add	r3, r5, #8
   14a24:	b	147e4 <__assert_fail@plt+0x3164>
   14a28:	mov	r0, r8
   14a2c:	add	r1, sp, #28
   14a30:	bl	151a0 <__assert_fail@plt+0x3b20>
   14a34:	cmp	r0, #0
   14a38:	bne	14944 <__assert_fail@plt+0x32c4>
   14a3c:	ldr	ip, [sp, #8]
   14a40:	cmp	ip, #0
   14a44:	moveq	r3, #8
   14a48:	beq	14948 <__assert_fail@plt+0x32c8>
   14a4c:	mov	r1, #15
   14a50:	mov	r0, r8
   14a54:	bl	145f4 <__assert_fail@plt+0x2f74>
   14a58:	mov	r1, #14
   14a5c:	mov	r2, r0
   14a60:	mov	r0, r8
   14a64:	bl	1467c <__assert_fail@plt+0x2ffc>
   14a68:	ldr	r3, [pc, #332]	; 14bbc <__assert_fail@plt+0x353c>
   14a6c:	ldr	ip, [sp, #4]
   14a70:	mov	r0, r8
   14a74:	mov	r1, #15
   14a78:	ldr	r2, [ip, r3]
   14a7c:	bl	1467c <__assert_fail@plt+0x2ffc>
   14a80:	mov	r3, #7
   14a84:	b	14948 <__assert_fail@plt+0x32c8>
   14a88:	mov	r0, r8
   14a8c:	mov	r1, #13
   14a90:	ldr	r9, [r4, #32]
   14a94:	bl	145f4 <__assert_fail@plt+0x2f74>
   14a98:	cmp	r9, r0
   14a9c:	bne	14a20 <__assert_fail@plt+0x33a0>
   14aa0:	ldr	r3, [r4, #40]	; 0x28
   14aa4:	cmp	r5, r3
   14aa8:	bne	14a20 <__assert_fail@plt+0x33a0>
   14aac:	mov	r0, r5
   14ab0:	bl	13f48 <__assert_fail@plt+0x28c8>
   14ab4:	mov	r1, #15
   14ab8:	mov	r2, r0
   14abc:	mov	r0, r8
   14ac0:	bl	1467c <__assert_fail@plt+0x2ffc>
   14ac4:	mov	r0, r8
   14ac8:	mov	r2, r4
   14acc:	mov	r1, #0
   14ad0:	bl	1467c <__assert_fail@plt+0x2ffc>
   14ad4:	mov	r3, #7
   14ad8:	b	14948 <__assert_fail@plt+0x32c8>
   14adc:	ldr	r3, [r4, #40]	; 0x28
   14ae0:	cmp	r5, r3
   14ae4:	bne	14998 <__assert_fail@plt+0x3318>
   14ae8:	mov	r2, #4
   14aec:	mov	r3, #0
   14af0:	str	fp, [r4, #40]	; 0x28
   14af4:	str	r3, [r4, #44]	; 0x2c
   14af8:	add	r3, r5, r2
   14afc:	str	r2, [r4, #48]	; 0x30
   14b00:	str	r3, [r4, #52]	; 0x34
   14b04:	ldr	r3, [r5]
   14b08:	cmp	r3, #0
   14b0c:	blt	14b7c <__assert_fail@plt+0x34fc>
   14b10:	mov	ip, #1
   14b14:	str	ip, [sp, #8]
   14b18:	b	149a4 <__assert_fail@plt+0x3324>
   14b1c:	mov	r0, r8
   14b20:	mov	r1, #13
   14b24:	bl	145f4 <__assert_fail@plt+0x2f74>
   14b28:	str	r0, [r4, #32]
   14b2c:	ldr	r3, [sp, #24]
   14b30:	str	r3, [r4, #36]	; 0x24
   14b34:	str	r5, [r4, #40]	; 0x28
   14b38:	mov	r3, #6
   14b3c:	b	14948 <__assert_fail@plt+0x32c8>
   14b40:	mov	r0, r5
   14b44:	add	r5, r5, #4
   14b48:	bl	13f48 <__assert_fail@plt+0x28c8>
   14b4c:	str	r5, [r4, #56]	; 0x38
   14b50:	mov	r6, r0
   14b54:	mov	r0, r4
   14b58:	bl	114b8 <__cxa_begin_cleanup@plt>
   14b5c:	cmp	r0, #0
   14b60:	beq	14944 <__assert_fail@plt+0x32c4>
   14b64:	mov	r0, r8
   14b68:	mov	r2, r6
   14b6c:	mov	r1, #15
   14b70:	bl	1467c <__assert_fail@plt+0x2ffc>
   14b74:	mov	r3, #7
   14b78:	b	14948 <__assert_fail@plt+0x32c8>
   14b7c:	add	r0, fp, #1
   14b80:	add	r0, r5, r0, lsl #2
   14b84:	b	14ab0 <__assert_fail@plt+0x3430>
   14b88:	mov	r9, r0
   14b8c:	mov	r1, #13
   14b90:	mov	r0, r8
   14b94:	bl	145f4 <__assert_fail@plt+0x2f74>
   14b98:	cmp	r9, #2
   14b9c:	str	r0, [r4, #32]
   14ba0:	bne	14b2c <__assert_fail@plt+0x34ac>
   14ba4:	ldr	r2, [sp, #24]
   14ba8:	mov	r3, r4
   14bac:	str	r2, [r3, #44]!	; 0x2c
   14bb0:	str	r3, [r4, #36]	; 0x24
   14bb4:	b	14b34 <__assert_fail@plt+0x34b4>
   14bb8:	andeq	r2, r1, r0, ror #16
   14bbc:	andeq	r0, r0, r0, asr r1
   14bc0:	mov	r3, #0
   14bc4:	b	14770 <__assert_fail@plt+0x30f0>
   14bc8:	mov	r3, #1
   14bcc:	b	14770 <__assert_fail@plt+0x30f0>
   14bd0:	mov	r3, #2
   14bd4:	b	14770 <__assert_fail@plt+0x30f0>
   14bd8:	push	{r4, r5, r6, r7, r8, lr}
   14bdc:	mov	r4, r0
   14be0:	sub	sp, sp, #272	; 0x110
   14be4:	cmp	r1, #4
   14be8:	addls	pc, pc, r1, lsl #2
   14bec:	b	14c0c <__assert_fail@plt+0x358c>
   14bf0:	b	14e00 <__assert_fail@plt+0x3780>
   14bf4:	b	14c80 <__assert_fail@plt+0x3600>
   14bf8:	b	14c0c <__assert_fail@plt+0x358c>
   14bfc:	b	14c04 <__assert_fail@plt+0x3584>
   14c00:	b	14c18 <__assert_fail@plt+0x3598>
   14c04:	cmp	r3, #3
   14c08:	beq	14e44 <__assert_fail@plt+0x37c4>
   14c0c:	mov	r0, #2
   14c10:	add	sp, sp, #272	; 0x110
   14c14:	pop	{r4, r5, r6, r7, r8, pc}
   14c18:	cmp	r2, #16
   14c1c:	cmpls	r3, #0
   14c20:	bne	14c0c <__assert_fail@plt+0x358c>
   14c24:	ldr	r3, [r0]
   14c28:	tst	r3, #16
   14c2c:	bne	14ec0 <__assert_fail@plt+0x3840>
   14c30:	add	r5, sp, #136	; 0x88
   14c34:	str	r2, [sp, #4]
   14c38:	mov	r0, r5
   14c3c:	bl	15044 <__assert_fail@plt+0x39c4>
   14c40:	ldr	r1, [r4, #56]	; 0x38
   14c44:	ldr	r2, [sp, #4]
   14c48:	mov	r3, #0
   14c4c:	mov	r0, #1
   14c50:	ands	ip, r2, r0, lsl r3
   14c54:	ldrne	ip, [r1]
   14c58:	addne	r1, r1, #4
   14c5c:	strne	ip, [r5, r3, lsl #2]
   14c60:	add	r3, r3, #1
   14c64:	cmp	r3, #4
   14c68:	bne	14c50 <__assert_fail@plt+0x35d0>
   14c6c:	mov	r0, r5
   14c70:	str	r1, [r4, #56]	; 0x38
   14c74:	bl	15030 <__assert_fail@plt+0x39b0>
   14c78:	mov	r0, #0
   14c7c:	b	14c10 <__assert_fail@plt+0x3590>
   14c80:	bic	r1, r3, #4
   14c84:	cmp	r1, #1
   14c88:	bne	14c0c <__assert_fail@plt+0x358c>
   14c8c:	cmp	r3, #1
   14c90:	lsr	r5, r2, #16
   14c94:	uxth	r6, r2
   14c98:	add	r2, r6, r5
   14c9c:	movne	r1, #32
   14ca0:	moveq	r1, #16
   14ca4:	cmp	r1, r2
   14ca8:	bcc	14c0c <__assert_fail@plt+0x358c>
   14cac:	subs	r0, r3, #1
   14cb0:	rsbs	r7, r0, #0
   14cb4:	adcs	r7, r7, r0
   14cb8:	cmp	r5, #15
   14cbc:	movls	r1, #0
   14cc0:	movhi	r1, #1
   14cc4:	tst	r7, r1
   14cc8:	bne	14c0c <__assert_fail@plt+0x358c>
   14ccc:	cmp	r1, #0
   14cd0:	movne	r8, r6
   14cd4:	bne	14ce4 <__assert_fail@plt+0x3664>
   14cd8:	cmp	r2, #16
   14cdc:	bls	14ee8 <__assert_fail@plt+0x3868>
   14ce0:	sub	r8, r2, #16
   14ce4:	cmp	r8, #0
   14ce8:	cmpne	r3, #5
   14cec:	bne	14c0c <__assert_fail@plt+0x358c>
   14cf0:	cmp	r5, #15
   14cf4:	bhi	14d24 <__assert_fail@plt+0x36a4>
   14cf8:	ldr	r2, [r4]
   14cfc:	tst	r2, #1
   14d00:	beq	14d24 <__assert_fail@plt+0x36a4>
   14d04:	cmp	r3, #5
   14d08:	mov	r0, r4
   14d0c:	bic	r3, r2, #1
   14d10:	str	r3, [r4]
   14d14:	beq	14f54 <__assert_fail@plt+0x38d4>
   14d18:	bic	r2, r2, #3
   14d1c:	str	r2, [r0], #72	; 0x48
   14d20:	bl	14f80 <__assert_fail@plt+0x3900>
   14d24:	cmp	r8, #0
   14d28:	beq	14d38 <__assert_fail@plt+0x36b8>
   14d2c:	ldr	r3, [r4]
   14d30:	tst	r3, #4
   14d34:	bne	14f2c <__assert_fail@plt+0x38ac>
   14d38:	cmp	r7, #0
   14d3c:	bne	14f40 <__assert_fail@plt+0x38c0>
   14d40:	cmp	r5, #15
   14d44:	bls	14f10 <__assert_fail@plt+0x3890>
   14d48:	cmp	r8, #0
   14d4c:	bne	14f1c <__assert_fail@plt+0x389c>
   14d50:	ldr	ip, [r4, #56]	; 0x38
   14d54:	cmp	r6, #0
   14d58:	mov	r2, ip
   14d5c:	ble	14d90 <__assert_fail@plt+0x3710>
   14d60:	add	r0, sp, #136	; 0x88
   14d64:	lsl	r6, r6, #1
   14d68:	add	r0, r0, r5, lsl #3
   14d6c:	sub	r1, r6, #1
   14d70:	rsb	r0, ip, r0
   14d74:	sub	r3, ip, #4
   14d78:	sub	r1, r1, #1
   14d7c:	ldr	r2, [r3, #4]!
   14d80:	cmn	r1, #1
   14d84:	str	r2, [r0, r3]
   14d88:	bne	14d78 <__assert_fail@plt+0x36f8>
   14d8c:	add	r2, ip, r6, lsl #2
   14d90:	cmp	r8, #0
   14d94:	beq	14dd4 <__assert_fail@plt+0x3754>
   14d98:	cmp	r5, #16
   14d9c:	movcs	r0, r5
   14da0:	movcc	r0, #16
   14da4:	add	r6, sp, #272	; 0x110
   14da8:	lsl	r1, r8, #1
   14dac:	mov	ip, r2
   14db0:	add	r0, r6, r0, lsl #3
   14db4:	sub	r3, r1, #1
   14db8:	sub	r0, r0, #392	; 0x188
   14dbc:	sub	r3, r3, #1
   14dc0:	ldr	r6, [ip], #4
   14dc4:	cmn	r3, #1
   14dc8:	str	r6, [r0], #4
   14dcc:	bne	14dbc <__assert_fail@plt+0x373c>
   14dd0:	add	r2, r2, r1, lsl #2
   14dd4:	cmp	r7, #0
   14dd8:	bne	14ef0 <__assert_fail@plt+0x3870>
   14ddc:	cmp	r5, #15
   14de0:	str	r2, [r4, #56]	; 0x38
   14de4:	bls	14f04 <__assert_fail@plt+0x3884>
   14de8:	cmp	r8, #0
   14dec:	beq	14df8 <__assert_fail@plt+0x3778>
   14df0:	add	r0, sp, #8
   14df4:	bl	14f98 <__assert_fail@plt+0x3918>
   14df8:	mov	r0, #0
   14dfc:	b	14c10 <__assert_fail@plt+0x3590>
   14e00:	cmp	r3, #0
   14e04:	bne	14c0c <__assert_fail@plt+0x358c>
   14e08:	ldr	r1, [r0, #56]	; 0x38
   14e0c:	uxth	r5, r2
   14e10:	mov	ip, #1
   14e14:	ands	r0, r5, ip, lsl r3
   14e18:	add	r0, r4, r3, lsl #2
   14e1c:	add	r3, r3, #1
   14e20:	ldrne	r6, [r1]
   14e24:	addne	r1, r1, #4
   14e28:	strne	r6, [r0, #4]
   14e2c:	cmp	r3, #16
   14e30:	bne	14e14 <__assert_fail@plt+0x3794>
   14e34:	ands	r0, r2, #8192	; 0x2000
   14e38:	streq	r1, [r4, #56]	; 0x38
   14e3c:	beq	14c10 <__assert_fail@plt+0x3590>
   14e40:	b	14df8 <__assert_fail@plt+0x3778>
   14e44:	lsr	r6, r2, #16
   14e48:	uxth	r7, r2
   14e4c:	add	r3, r7, r6
   14e50:	cmp	r3, #16
   14e54:	bhi	14c0c <__assert_fail@plt+0x358c>
   14e58:	ldr	r3, [r0]
   14e5c:	tst	r3, #8
   14e60:	bne	14ed8 <__assert_fail@plt+0x3858>
   14e64:	add	r5, sp, #136	; 0x88
   14e68:	lsl	r7, r7, #1
   14e6c:	mov	r0, r5
   14e70:	bl	14fec <__assert_fail@plt+0x396c>
   14e74:	ldr	ip, [r4, #56]	; 0x38
   14e78:	cmp	r7, #0
   14e7c:	add	r0, r5, r6, lsl #3
   14e80:	sub	r3, r7, #1
   14e84:	mov	r2, ip
   14e88:	beq	14eac <__assert_fail@plt+0x382c>
   14e8c:	rsb	r0, ip, r0
   14e90:	sub	r2, ip, #4
   14e94:	sub	r3, r3, #1
   14e98:	ldr	r1, [r2, #4]!
   14e9c:	cmn	r3, #1
   14ea0:	str	r1, [r0, r2]
   14ea4:	bne	14e94 <__assert_fail@plt+0x3814>
   14ea8:	add	r2, ip, r7, lsl #2
   14eac:	mov	r0, r5
   14eb0:	str	r2, [r4, #56]	; 0x38
   14eb4:	bl	14fa8 <__assert_fail@plt+0x3928>
   14eb8:	mov	r0, #0
   14ebc:	b	14c10 <__assert_fail@plt+0x3590>
   14ec0:	bic	r3, r3, #16
   14ec4:	str	r3, [r0], #464	; 0x1d0
   14ec8:	str	r2, [sp, #4]
   14ecc:	bl	15044 <__assert_fail@plt+0x39c4>
   14ed0:	ldr	r2, [sp, #4]
   14ed4:	b	14c30 <__assert_fail@plt+0x35b0>
   14ed8:	bic	r3, r3, #8
   14edc:	str	r3, [r0], #336	; 0x150
   14ee0:	bl	14fec <__assert_fail@plt+0x396c>
   14ee4:	b	14e64 <__assert_fail@plt+0x37e4>
   14ee8:	mov	r8, r1
   14eec:	b	14cf0 <__assert_fail@plt+0x3670>
   14ef0:	add	r2, r2, #4
   14ef4:	add	r0, sp, #136	; 0x88
   14ef8:	str	r2, [r4, #56]	; 0x38
   14efc:	bl	14f78 <__assert_fail@plt+0x38f8>
   14f00:	b	14df8 <__assert_fail@plt+0x3778>
   14f04:	add	r0, sp, #136	; 0x88
   14f08:	bl	14f88 <__assert_fail@plt+0x3908>
   14f0c:	b	14de8 <__assert_fail@plt+0x3768>
   14f10:	add	r0, sp, #136	; 0x88
   14f14:	bl	14f90 <__assert_fail@plt+0x3910>
   14f18:	b	14d48 <__assert_fail@plt+0x36c8>
   14f1c:	add	r0, sp, #8
   14f20:	bl	14fa0 <__assert_fail@plt+0x3920>
   14f24:	rsb	r6, r5, #16
   14f28:	b	14d50 <__assert_fail@plt+0x36d0>
   14f2c:	mov	r0, r4
   14f30:	bic	r3, r3, #4
   14f34:	str	r3, [r0], #208	; 0xd0
   14f38:	bl	14fa0 <__assert_fail@plt+0x3920>
   14f3c:	b	14d38 <__assert_fail@plt+0x36b8>
   14f40:	add	r0, sp, #136	; 0x88
   14f44:	bl	14f80 <__assert_fail@plt+0x3900>
   14f48:	cmp	r8, #0
   14f4c:	bne	14f24 <__assert_fail@plt+0x38a4>
   14f50:	b	14d50 <__assert_fail@plt+0x36d0>
   14f54:	orr	r3, r3, #2
   14f58:	str	r3, [r0], #72	; 0x48
   14f5c:	bl	14f90 <__assert_fail@plt+0x3910>
   14f60:	b	14d24 <__assert_fail@plt+0x36a4>
   14f64:	add	r1, r0, #52	; 0x34
   14f68:	ldm	r1, {r3, r4, r5}
   14f6c:	push	{r3, r4, r5}
   14f70:	ldm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   14f74:	ldm	sp, {sp, lr, pc}
   14f78:	fldmiax	r0, {d0-d15}	;@ Deprecated
   14f7c:	bx	lr
   14f80:	fstmiax	r0, {d0-d15}	;@ Deprecated
   14f84:	bx	lr
   14f88:	vldmia	r0, {d0-d15}
   14f8c:	bx	lr
   14f90:	vstmia	r0, {d0-d15}
   14f94:	bx	lr
   14f98:	vldmia	r0, {d16-d31}
   14f9c:	bx	lr
   14fa0:	vstmia	r0, {d16-d31}
   14fa4:	bx	lr
   14fa8:	ldfe	f0, [r0], #8
   14fac:	ldfe	f1, [r0], #8
   14fb0:	ldfe	f2, [r0], #8
   14fb4:	ldfe	f3, [r0], #8
   14fb8:	ldfe	f4, [r0], #8
   14fbc:	ldfe	f5, [r0], #8
   14fc0:	ldfe	f6, [r0], #8
   14fc4:	ldfe	f7, [r0], #8
   14fc8:	ldfp	f0, [r0], #8
   14fcc:	ldfp	f1, [r0], #8
   14fd0:	ldfp	f2, [r0], #8
   14fd4:	ldfp	f3, [r0], #8
   14fd8:	ldfp	f4, [r0], #8
   14fdc:	ldfp	f5, [r0], #8
   14fe0:	ldfp	f6, [r0], #8
   14fe4:	ldfp	f7, [r0], #8
   14fe8:	bx	lr
   14fec:	stfe	f0, [r0], #8
   14ff0:	stfe	f1, [r0], #8
   14ff4:	stfe	f2, [r0], #8
   14ff8:	stfe	f3, [r0], #8
   14ffc:	stfe	f4, [r0], #8
   15000:	stfe	f5, [r0], #8
   15004:	stfe	f6, [r0], #8
   15008:	stfe	f7, [r0], #8
   1500c:	stfp	f0, [r0], #8
   15010:	stfp	f1, [r0], #8
   15014:	stfp	f2, [r0], #8
   15018:	stfp	f3, [r0], #8
   1501c:	stfp	f4, [r0], #8
   15020:	stfp	f5, [r0], #8
   15024:	stfp	f6, [r0], #8
   15028:	stfp	f7, [r0], #8
   1502c:	bx	lr
   15030:	ldc2	1, cr8, [r0], #4
   15034:	ldc2	1, cr9, [r0], #4
   15038:	ldc2	1, cr10, [r0], #4
   1503c:	ldc2	1, cr11, [r0], #4
   15040:	bx	lr
   15044:	stc2	1, cr8, [r0], #4
   15048:	stc2	1, cr9, [r0], #4
   1504c:	stc2	1, cr10, [r0], #4
   15050:	stc2	1, cr11, [r0], #4
   15054:	bx	lr
   15058:	push	{sp, lr, pc}
   1505c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   15060:	mov	r3, #0
   15064:	push	{r2, r3}
   15068:	add	r1, sp, #4
   1506c:	bl	14414 <__assert_fail@plt+0x2d94>
   15070:	ldr	lr, [sp, #64]	; 0x40
   15074:	add	sp, sp, #72	; 0x48
   15078:	bx	lr
   1507c:	push	{sp, lr, pc}
   15080:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   15084:	mov	r3, #0
   15088:	push	{r2, r3}
   1508c:	add	r1, sp, #4
   15090:	bl	144e0 <__assert_fail@plt+0x2e60>
   15094:	ldr	lr, [sp, #64]	; 0x40
   15098:	add	sp, sp, #72	; 0x48
   1509c:	bx	lr
   150a0:	push	{sp, lr, pc}
   150a4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   150a8:	mov	r3, #0
   150ac:	push	{r2, r3}
   150b0:	add	r1, sp, #4
   150b4:	bl	14554 <__assert_fail@plt+0x2ed4>
   150b8:	ldr	lr, [sp, #64]	; 0x40
   150bc:	add	sp, sp, #72	; 0x48
   150c0:	bx	lr
   150c4:	push	{sp, lr, pc}
   150c8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   150cc:	mov	r3, #0
   150d0:	push	{r2, r3}
   150d4:	add	r3, sp, #4
   150d8:	bl	144bc <__assert_fail@plt+0x2e3c>
   150dc:	ldr	lr, [sp, #64]	; 0x40
   150e0:	add	sp, sp, #72	; 0x48
   150e4:	bx	lr
   150e8:	push	{sp, lr, pc}
   150ec:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   150f0:	mov	r3, #0
   150f4:	push	{r2, r3}
   150f8:	add	r2, sp, #4
   150fc:	bl	146ac <__assert_fail@plt+0x302c>
   15100:	ldr	lr, [sp, #64]	; 0x40
   15104:	add	sp, sp, #72	; 0x48
   15108:	bx	lr
   1510c:	ldrb	r2, [r0, #8]
   15110:	mov	r3, r0
   15114:	cmp	r2, #0
   15118:	bne	15130 <__assert_fail@plt+0x3ab0>
   1511c:	ldrb	r2, [r0, #9]
   15120:	cmp	r2, #0
   15124:	bne	1514c <__assert_fail@plt+0x3acc>
   15128:	mov	r0, #176	; 0xb0
   1512c:	bx	lr
   15130:	ldr	r0, [r0]
   15134:	sub	r2, r2, #1
   15138:	strb	r2, [r3, #8]
   1513c:	lsl	r2, r0, #8
   15140:	lsr	r0, r0, #24
   15144:	str	r2, [r3]
   15148:	bx	lr
   1514c:	ldr	r1, [r0, #4]
   15150:	sub	r2, r2, #1
   15154:	strb	r2, [r0, #9]
   15158:	mov	r2, #3
   1515c:	add	r0, r1, #4
   15160:	str	r0, [r3, #4]
   15164:	ldr	r0, [r1]
   15168:	strb	r2, [r3, #8]
   1516c:	b	1513c <__assert_fail@plt+0x3abc>
   15170:	push	{lr}		; (str lr, [sp, #-4]!)
   15174:	sub	sp, sp, #20
   15178:	mov	r1, #0
   1517c:	add	r2, sp, #12
   15180:	mov	r3, r1
   15184:	str	r2, [sp]
   15188:	mov	r2, #12
   1518c:	bl	14598 <__assert_fail@plt+0x2f18>
   15190:	ldr	r0, [sp, #12]
   15194:	add	sp, sp, #20
   15198:	pop	{pc}		; (ldr pc, [sp], #4)
   1519c:	b	15170 <__assert_fail@plt+0x3af0>
   151a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   151a4:	sub	sp, sp, #20
   151a8:	add	r7, sp, #12
   151ac:	mov	r6, r0
   151b0:	mov	r5, r1
   151b4:	mov	r8, #0
   151b8:	mov	r0, r5
   151bc:	bl	1510c <__assert_fail@plt+0x3a8c>
   151c0:	cmp	r0, #176	; 0xb0
   151c4:	mov	r4, r0
   151c8:	beq	153e4 <__assert_fail@plt+0x3d64>
   151cc:	bic	r2, r0, #127	; 0x7f
   151d0:	ands	r1, r2, #255	; 0xff
   151d4:	beq	15240 <__assert_fail@plt+0x3bc0>
   151d8:	and	r2, r0, #240	; 0xf0
   151dc:	cmp	r2, #128	; 0x80
   151e0:	beq	1533c <__assert_fail@plt+0x3cbc>
   151e4:	cmp	r2, #144	; 0x90
   151e8:	beq	15290 <__assert_fail@plt+0x3c10>
   151ec:	cmp	r2, #160	; 0xa0
   151f0:	beq	152b8 <__assert_fail@plt+0x3c38>
   151f4:	cmp	r2, #176	; 0xb0
   151f8:	beq	152f0 <__assert_fail@plt+0x3c70>
   151fc:	cmp	r2, #192	; 0xc0
   15200:	beq	15384 <__assert_fail@plt+0x3d04>
   15204:	and	r3, r0, #248	; 0xf8
   15208:	cmp	r3, #208	; 0xd0
   1520c:	bne	15234 <__assert_fail@plt+0x3bb4>
   15210:	and	r4, r0, #7
   15214:	mov	r1, #1
   15218:	add	r2, r4, #1
   1521c:	mov	r0, r6
   15220:	orr	r2, r2, #524288	; 0x80000
   15224:	mov	r3, #5
   15228:	bl	14bd8 <__assert_fail@plt+0x3558>
   1522c:	cmp	r0, #0
   15230:	beq	151b8 <__assert_fail@plt+0x3b38>
   15234:	mov	r0, #9
   15238:	add	sp, sp, #20
   1523c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15240:	lsl	r9, r0, #2
   15244:	mov	r3, r1
   15248:	str	r7, [sp]
   1524c:	mov	r0, r6
   15250:	mov	r2, #13
   15254:	uxtb	r9, r9
   15258:	bl	14598 <__assert_fail@plt+0x2f18>
   1525c:	ldr	r3, [sp, #12]
   15260:	add	r9, r9, #4
   15264:	tst	r4, #64	; 0x40
   15268:	rsbne	r9, r9, r3
   1526c:	addeq	r9, r3, r9
   15270:	str	r9, [sp, #12]
   15274:	mov	r1, #0
   15278:	str	r7, [sp]
   1527c:	mov	r3, r1
   15280:	mov	r0, r6
   15284:	mov	r2, #13
   15288:	bl	14620 <__assert_fail@plt+0x2fa0>
   1528c:	b	151b8 <__assert_fail@plt+0x3b38>
   15290:	and	r3, r0, #13
   15294:	cmp	r3, #13
   15298:	beq	15234 <__assert_fail@plt+0x3bb4>
   1529c:	mov	r1, #0
   152a0:	and	r2, r0, #15
   152a4:	str	r7, [sp]
   152a8:	mov	r3, r1
   152ac:	mov	r0, r6
   152b0:	bl	14598 <__assert_fail@plt+0x2f18>
   152b4:	b	15274 <__assert_fail@plt+0x3bf4>
   152b8:	mvn	r4, r0
   152bc:	mov	r2, #4080	; 0xff0
   152c0:	and	r4, r4, #7
   152c4:	tst	r0, #8
   152c8:	asr	r2, r2, r4
   152cc:	mov	r1, #0
   152d0:	and	r2, r2, #4080	; 0xff0
   152d4:	orrne	r2, r2, #16384	; 0x4000
   152d8:	mov	r3, r1
   152dc:	mov	r0, r6
   152e0:	bl	14bd8 <__assert_fail@plt+0x3558>
   152e4:	cmp	r0, #0
   152e8:	bne	15234 <__assert_fail@plt+0x3bb4>
   152ec:	b	151b8 <__assert_fail@plt+0x3b38>
   152f0:	cmp	r0, #177	; 0xb1
   152f4:	beq	1542c <__assert_fail@plt+0x3dac>
   152f8:	cmp	r0, #178	; 0xb2
   152fc:	beq	15448 <__assert_fail@plt+0x3dc8>
   15300:	cmp	r0, #179	; 0xb3
   15304:	beq	154c8 <__assert_fail@plt+0x3e48>
   15308:	and	r3, r0, #252	; 0xfc
   1530c:	cmp	r3, #180	; 0xb4
   15310:	beq	15234 <__assert_fail@plt+0x3bb4>
   15314:	and	r2, r0, #7
   15318:	mov	r1, #1
   1531c:	add	r2, r2, r1
   15320:	mov	r3, r1
   15324:	orr	r2, r2, #524288	; 0x80000
   15328:	mov	r0, r6
   1532c:	bl	14bd8 <__assert_fail@plt+0x3558>
   15330:	cmp	r0, #0
   15334:	bne	15234 <__assert_fail@plt+0x3bb4>
   15338:	b	151b8 <__assert_fail@plt+0x3b38>
   1533c:	mov	r0, r5
   15340:	lsl	r4, r4, #8
   15344:	bl	1510c <__assert_fail@plt+0x3a8c>
   15348:	orr	r0, r0, r4
   1534c:	cmp	r0, #32768	; 0x8000
   15350:	beq	15234 <__assert_fail@plt+0x3bb4>
   15354:	lsl	r4, r0, #4
   15358:	mov	r1, #0
   1535c:	movw	r2, #65520	; 0xfff0
   15360:	mov	r3, r1
   15364:	and	r2, r4, r2
   15368:	mov	r0, r6
   1536c:	bl	14bd8 <__assert_fail@plt+0x3558>
   15370:	cmp	r0, #0
   15374:	bne	15234 <__assert_fail@plt+0x3bb4>
   15378:	tst	r4, #32768	; 0x8000
   1537c:	movne	r8, #1
   15380:	b	151b8 <__assert_fail@plt+0x3b38>
   15384:	cmp	r0, #198	; 0xc6
   15388:	beq	154e8 <__assert_fail@plt+0x3e68>
   1538c:	cmp	r0, #199	; 0xc7
   15390:	beq	15504 <__assert_fail@plt+0x3e84>
   15394:	and	r3, r0, #248	; 0xf8
   15398:	cmp	r3, #192	; 0xc0
   1539c:	beq	15534 <__assert_fail@plt+0x3eb4>
   153a0:	cmp	r0, #200	; 0xc8
   153a4:	beq	1555c <__assert_fail@plt+0x3edc>
   153a8:	cmp	r0, #201	; 0xc9
   153ac:	bne	15234 <__assert_fail@plt+0x3bb4>
   153b0:	mov	r0, r5
   153b4:	bl	1510c <__assert_fail@plt+0x3a8c>
   153b8:	mov	r1, #1
   153bc:	and	r3, r0, #15
   153c0:	and	r2, r0, #240	; 0xf0
   153c4:	add	r3, r3, #1
   153c8:	mov	r0, r6
   153cc:	orr	r2, r3, r2, lsl #12
   153d0:	mov	r3, #5
   153d4:	bl	14bd8 <__assert_fail@plt+0x3558>
   153d8:	cmp	r0, #0
   153dc:	bne	15234 <__assert_fail@plt+0x3bb4>
   153e0:	b	151b8 <__assert_fail@plt+0x3b38>
   153e4:	cmp	r8, #0
   153e8:	movne	r0, #0
   153ec:	bne	15238 <__assert_fail@plt+0x3bb8>
   153f0:	add	r4, sp, #12
   153f4:	mov	r1, r8
   153f8:	mov	r2, #14
   153fc:	mov	r3, r8
   15400:	mov	r0, r6
   15404:	str	r4, [sp]
   15408:	bl	14598 <__assert_fail@plt+0x2f18>
   1540c:	str	r4, [sp]
   15410:	mov	r0, r6
   15414:	mov	r1, r8
   15418:	mov	r2, #15
   1541c:	mov	r3, r8
   15420:	bl	14620 <__assert_fail@plt+0x2fa0>
   15424:	mov	r0, r8
   15428:	b	15238 <__assert_fail@plt+0x3bb8>
   1542c:	mov	r0, r5
   15430:	bl	1510c <__assert_fail@plt+0x3a8c>
   15434:	subs	r2, r0, #0
   15438:	beq	15234 <__assert_fail@plt+0x3bb4>
   1543c:	ands	r1, r2, #240	; 0xf0
   15440:	beq	152d8 <__assert_fail@plt+0x3c58>
   15444:	b	15234 <__assert_fail@plt+0x3bb4>
   15448:	mov	r1, #0
   1544c:	mov	r2, #13
   15450:	mov	r3, r1
   15454:	str	r7, [sp]
   15458:	mov	r0, r6
   1545c:	mov	r4, #2
   15460:	bl	14598 <__assert_fail@plt+0x2f18>
   15464:	mov	r0, r5
   15468:	bl	1510c <__assert_fail@plt+0x3a8c>
   1546c:	tst	r0, #128	; 0x80
   15470:	beq	15498 <__assert_fail@plt+0x3e18>
   15474:	and	r2, r0, #127	; 0x7f
   15478:	ldr	r3, [sp, #12]
   1547c:	mov	r0, r5
   15480:	add	r3, r3, r2, lsl r4
   15484:	str	r3, [sp, #12]
   15488:	bl	1510c <__assert_fail@plt+0x3a8c>
   1548c:	add	r4, r4, #7
   15490:	tst	r0, #128	; 0x80
   15494:	bne	15474 <__assert_fail@plt+0x3df4>
   15498:	ldr	ip, [sp, #12]
   1549c:	and	lr, r0, #127	; 0x7f
   154a0:	mov	r1, #0
   154a4:	str	r7, [sp]
   154a8:	add	ip, ip, #516	; 0x204
   154ac:	mov	r3, r1
   154b0:	mov	r0, r6
   154b4:	mov	r2, #13
   154b8:	add	r4, ip, lr, lsl r4
   154bc:	str	r4, [sp, #12]
   154c0:	bl	14620 <__assert_fail@plt+0x2fa0>
   154c4:	b	151b8 <__assert_fail@plt+0x3b38>
   154c8:	mov	r0, r5
   154cc:	bl	1510c <__assert_fail@plt+0x3a8c>
   154d0:	mov	r1, #1
   154d4:	and	r3, r0, #15
   154d8:	and	r2, r0, #240	; 0xf0
   154dc:	add	r3, r3, #1
   154e0:	orr	r2, r3, r2, lsl #12
   154e4:	b	152d8 <__assert_fail@plt+0x3c58>
   154e8:	mov	r0, r5
   154ec:	bl	1510c <__assert_fail@plt+0x3a8c>
   154f0:	mov	r1, #3
   154f4:	and	r3, r0, #15
   154f8:	and	r2, r0, #240	; 0xf0
   154fc:	add	r3, r3, #1
   15500:	b	154e0 <__assert_fail@plt+0x3e60>
   15504:	mov	r0, r5
   15508:	bl	1510c <__assert_fail@plt+0x3a8c>
   1550c:	subs	r2, r0, #0
   15510:	beq	15234 <__assert_fail@plt+0x3bb4>
   15514:	ands	r3, r2, #240	; 0xf0
   15518:	bne	15234 <__assert_fail@plt+0x3bb4>
   1551c:	mov	r0, r6
   15520:	mov	r1, #4
   15524:	bl	14bd8 <__assert_fail@plt+0x3558>
   15528:	cmp	r0, #0
   1552c:	bne	15234 <__assert_fail@plt+0x3bb4>
   15530:	b	151b8 <__assert_fail@plt+0x3b38>
   15534:	and	r2, r0, #15
   15538:	mov	r1, #3
   1553c:	add	r2, r2, #1
   15540:	mov	r3, r1
   15544:	orr	r2, r2, #655360	; 0xa0000
   15548:	mov	r0, r6
   1554c:	bl	14bd8 <__assert_fail@plt+0x3558>
   15550:	cmp	r0, #0
   15554:	bne	15234 <__assert_fail@plt+0x3bb4>
   15558:	b	151b8 <__assert_fail@plt+0x3b38>
   1555c:	mov	r0, r5
   15560:	bl	1510c <__assert_fail@plt+0x3a8c>
   15564:	mov	r1, #1
   15568:	and	r2, r0, #240	; 0xf0
   1556c:	and	r3, r0, #15
   15570:	add	r2, r2, #16
   15574:	add	r3, r3, #1
   15578:	mov	r0, r6
   1557c:	orr	r2, r3, r2, lsl #12
   15580:	mov	r3, #5
   15584:	bl	14bd8 <__assert_fail@plt+0x3558>
   15588:	cmp	r0, #0
   1558c:	bne	15234 <__assert_fail@plt+0x3bb4>
   15590:	b	151b8 <__assert_fail@plt+0x3b38>
   15594:	ldr	r3, [r0, #76]	; 0x4c
   15598:	mov	r0, r1
   1559c:	push	{lr}		; (str lr, [sp, #-4]!)
   155a0:	sub	sp, sp, #20
   155a4:	ldr	r2, [r3, #4]
   155a8:	add	ip, r3, #8
   155ac:	mov	lr, #3
   155b0:	strb	lr, [sp, #12]
   155b4:	ldrb	r3, [r3, #7]
   155b8:	add	r1, sp, #4
   155bc:	lsl	r2, r2, #8
   155c0:	stmib	sp, {r2, ip}
   155c4:	strb	r3, [sp, #13]
   155c8:	bl	151a0 <__assert_fail@plt+0x3b20>
   155cc:	add	sp, sp, #20
   155d0:	pop	{pc}		; (ldr pc, [sp], #4)
   155d4:	push	{r3, lr}
   155d8:	bl	1519c <__assert_fail@plt+0x3b1c>
   155dc:	ldr	r0, [r0, #72]	; 0x48
   155e0:	pop	{r3, pc}
   155e4:	push	{r3, lr}
   155e8:	bl	1519c <__assert_fail@plt+0x3b1c>
   155ec:	ldr	r3, [r0, #76]	; 0x4c
   155f0:	ldrb	r2, [r3, #7]
   155f4:	add	r0, r3, r2, lsl #2
   155f8:	add	r0, r0, #8
   155fc:	pop	{r3, pc}
   15600:	push	{r3, lr}
   15604:	bl	11668 <abort@plt>
   15608:	push	{r3, lr}
   1560c:	bl	11668 <abort@plt>
   15610:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15614:	mov	r7, r0
   15618:	ldr	r6, [pc, #76]	; 1566c <__assert_fail@plt+0x3fec>
   1561c:	mov	r8, r1
   15620:	ldr	r5, [pc, #72]	; 15670 <__assert_fail@plt+0x3ff0>
   15624:	mov	r9, r2
   15628:	add	r6, pc, r6
   1562c:	bl	112e8 <_init@@Base>
   15630:	add	r5, pc, r5
   15634:	rsb	r6, r5, r6
   15638:	asrs	r6, r6, #2
   1563c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   15640:	sub	r5, r5, #4
   15644:	mov	r4, #0
   15648:	add	r4, r4, #1
   1564c:	ldr	r3, [r5, #4]!
   15650:	mov	r0, r7
   15654:	mov	r1, r8
   15658:	mov	r2, r9
   1565c:	blx	r3
   15660:	cmp	r4, r6
   15664:	bne	15648 <__assert_fail@plt+0x3fc8>
   15668:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1566c:	andeq	r1, r1, r8, asr #17
   15670:			; <UNDEFINED> instruction: 0x000118bc
   15674:	bx	lr

Disassembly of section .fini:

00015678 <_fini@@Base>:
   15678:	push	{r3, lr}
   1567c:	pop	{r3, pc}
