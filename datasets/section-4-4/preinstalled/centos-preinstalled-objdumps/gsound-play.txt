
centos-preinstalled/gsound-play:     file format elf32-littlearm


Disassembly of section .init:

00010ee0 <_init@@Base>:
   10ee0:	push	{r3, lr}
   10ee4:	bl	11174 <g_slice_alloc0@plt+0x58>
   10ee8:	pop	{r3, pc}

Disassembly of section .plt:

00010eec <g_free@plt-0x14>:
   10eec:	push	{lr}		; (str lr, [sp, #-4]!)
   10ef0:	ldr	lr, [pc, #4]	; 10efc <_init@@Base+0x1c>
   10ef4:	add	lr, pc, lr
   10ef8:	ldr	pc, [lr, #8]!
   10efc:	andeq	r1, r1, r4, lsl #2

00010f00 <g_free@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #69632	; 0x11000
   10f08:	ldr	pc, [ip, #260]!	; 0x104

00010f0c <abort@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #69632	; 0x11000
   10f14:	ldr	pc, [ip, #252]!	; 0xfc

00010f18 <__libc_start_main@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #69632	; 0x11000
   10f20:	ldr	pc, [ip, #244]!	; 0xf4

00010f24 <g_str_hash@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #69632	; 0x11000
   10f2c:	ldr	pc, [ip, #236]!	; 0xec

00010f30 <g_simple_async_result_set_op_res_gpointer@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #69632	; 0x11000
   10f38:	ldr	pc, [ip, #228]!	; 0xe4

00010f3c <g_main_loop_quit@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #69632	; 0x11000
   10f44:	ldr	pc, [ip, #220]!	; 0xdc

00010f48 <gsound_context_play_fullv@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #69632	; 0x11000
   10f50:	ldr	pc, [ip, #212]!	; 0xd4

00010f54 <g_print@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #69632	; 0x11000
   10f5c:	ldr	pc, [ip, #204]!	; 0xcc

00010f60 <g_option_context_free@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #69632	; 0x11000
   10f68:	ldr	pc, [ip, #196]!	; 0xc4

00010f6c <gsound_context_set_attributes@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #69632	; 0x11000
   10f74:	ldr	pc, [ip, #188]!	; 0xbc

00010f78 <__gmon_start__@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #69632	; 0x11000
   10f80:	ldr	pc, [ip, #180]!	; 0xb4

00010f84 <g_object_unref@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #69632	; 0x11000
   10f8c:	ldr	pc, [ip, #172]!	; 0xac

00010f90 <g_strdup@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #69632	; 0x11000
   10f98:	ldr	pc, [ip, #164]!	; 0xa4

00010f9c <g_clear_error@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #69632	; 0x11000
   10fa4:	ldr	pc, [ip, #156]!	; 0x9c

00010fa8 <g_simple_async_result_get_type@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #69632	; 0x11000
   10fb0:	ldr	pc, [ip, #148]!	; 0x94

00010fb4 <g_hash_table_insert@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #69632	; 0x11000
   10fbc:	ldr	pc, [ip, #140]!	; 0x8c

00010fc0 <g_option_context_add_main_entries@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #69632	; 0x11000
   10fc8:	ldr	pc, [ip, #132]!	; 0x84

00010fcc <g_simple_async_result_new@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #69632	; 0x11000
   10fd4:	ldr	pc, [ip, #124]!	; 0x7c

00010fd8 <g_main_loop_new@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #69632	; 0x11000
   10fe0:	ldr	pc, [ip, #116]!	; 0x74

00010fe4 <gsound_context_play_full_finish@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #69632	; 0x11000
   10fec:	ldr	pc, [ip, #108]!	; 0x6c

00010ff0 <g_assertion_message_expr@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #69632	; 0x11000
   10ff8:	ldr	pc, [ip, #100]!	; 0x64

00010ffc <g_ascii_dtostr@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #69632	; 0x11000
   11004:	ldr	pc, [ip, #92]!	; 0x5c

00011008 <g_simple_async_result_set_from_error@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #69632	; 0x11000
   11010:	ldr	pc, [ip, #84]!	; 0x54

00011014 <g_simple_async_result_complete_in_idle@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #69632	; 0x11000
   1101c:	ldr	pc, [ip, #76]!	; 0x4c

00011020 <g_hash_table_new_full@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #69632	; 0x11000
   11028:	ldr	pc, [ip, #68]!	; 0x44

0001102c <gsound_context_new@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #69632	; 0x11000
   11034:	ldr	pc, [ip, #60]!	; 0x3c

00011038 <g_option_context_parse@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #69632	; 0x11000
   11040:	ldr	pc, [ip, #52]!	; 0x34

00011044 <g_return_if_fail_warning@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #69632	; 0x11000
   1104c:	ldr	pc, [ip, #44]!	; 0x2c

00011050 <g_set_application_name@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #69632	; 0x11000
   11058:	ldr	pc, [ip, #36]!	; 0x24

0001105c <g_simple_async_result_complete@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #69632	; 0x11000
   11064:	ldr	pc, [ip, #28]!

00011068 <g_type_check_instance_cast@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #69632	; 0x11000
   11070:	ldr	pc, [ip, #20]!

00011074 <__stack_chk_fail@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #69632	; 0x11000
   1107c:	ldr	pc, [ip, #12]!

00011080 <gsound_context_set_driver@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #69632	; 0x11000
   11088:	ldr	pc, [ip, #4]!

0001108c <g_malloc0@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #16, 20	; 0x10000
   11094:	ldr	pc, [ip, #4092]!	; 0xffc

00011098 <g_simple_async_result_get_op_res_gpointer@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #16, 20	; 0x10000
   110a0:	ldr	pc, [ip, #4084]!	; 0xff4

000110a4 <g_main_loop_unref@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #16, 20	; 0x10000
   110ac:	ldr	pc, [ip, #4076]!	; 0xfec

000110b0 <g_option_context_new@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #16, 20	; 0x10000
   110b8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110bc <g_hash_table_unref@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #16, 20	; 0x10000
   110c4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110c8 <g_error_free@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #16, 20	; 0x10000
   110d0:	ldr	pc, [ip, #4052]!	; 0xfd4

000110d4 <g_quark_to_string@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #16, 20	; 0x10000
   110dc:	ldr	pc, [ip, #4044]!	; 0xfcc

000110e0 <g_main_loop_run@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #16, 20	; 0x10000
   110e8:	ldr	pc, [ip, #4036]!	; 0xfc4

000110ec <g_slice_free1@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #16, 20	; 0x10000
   110f4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110f8 <g_simple_async_result_propagate_error@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #16, 20	; 0x10000
   11100:	ldr	pc, [ip, #4020]!	; 0xfb4

00011104 <g_log@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #16, 20	; 0x10000
   1110c:	ldr	pc, [ip, #4012]!	; 0xfac

00011110 <g_str_equal@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #16, 20	; 0x10000
   11118:	ldr	pc, [ip, #4004]!	; 0xfa4

0001111c <g_slice_alloc0@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #16, 20	; 0x10000
   11124:	ldr	pc, [ip, #3996]!	; 0xf9c

Disassembly of section .text:

00011128 <.text>:
   11128:	mov	r3, r0
   1112c:	mov	r0, r1
   11130:	mov	r1, r3
   11134:	b	11528 <g_slice_alloc0@plt+0x40c>
   11138:	mov	fp, #0
   1113c:	mov	lr, #0
   11140:	pop	{r1}		; (ldr r1, [sp], #4)
   11144:	mov	r2, sp
   11148:	push	{r2}		; (str r2, [sp, #-4]!)
   1114c:	push	{r0}		; (str r0, [sp, #-4]!)
   11150:	ldr	ip, [pc, #16]	; 11168 <g_slice_alloc0@plt+0x4c>
   11154:	push	{ip}		; (str ip, [sp, #-4]!)
   11158:	ldr	r0, [pc, #12]	; 1116c <g_slice_alloc0@plt+0x50>
   1115c:	ldr	r3, [pc, #12]	; 11170 <g_slice_alloc0@plt+0x54>
   11160:	bl	10f18 <__libc_start_main@plt>
   11164:	bl	10f0c <abort@plt>
   11168:	andeq	r1, r1, r8, asr r9
   1116c:	andeq	r1, r1, r8, lsr #2
   11170:	strdeq	r1, [r1], -r4
   11174:	ldr	r3, [pc, #20]	; 11190 <g_slice_alloc0@plt+0x74>
   11178:	ldr	r2, [pc, #20]	; 11194 <g_slice_alloc0@plt+0x78>
   1117c:	add	r3, pc, r3
   11180:	ldr	r2, [r3, r2]
   11184:	cmp	r2, #0
   11188:	bxeq	lr
   1118c:	b	10f78 <__gmon_start__@plt>
   11190:	andeq	r0, r1, ip, ror lr
   11194:	andeq	r0, r0, r4, asr #1
   11198:	push	{r3, lr}
   1119c:	movw	r0, #8396	; 0x20cc
   111a0:	ldr	r3, [pc, #36]	; 111cc <g_slice_alloc0@plt+0xb0>
   111a4:	movt	r0, #2
   111a8:	rsb	r3, r0, r3
   111ac:	cmp	r3, #6
   111b0:	popls	{r3, pc}
   111b4:	movw	r3, #0
   111b8:	movt	r3, #0
   111bc:	cmp	r3, #0
   111c0:	popeq	{r3, pc}
   111c4:	blx	r3
   111c8:	pop	{r3, pc}
   111cc:	andeq	r2, r2, pc, asr #1
   111d0:	push	{r3, lr}
   111d4:	movw	r0, #8396	; 0x20cc
   111d8:	movw	r3, #8396	; 0x20cc
   111dc:	movt	r0, #2
   111e0:	movt	r3, #2
   111e4:	rsb	r3, r0, r3
   111e8:	asr	r3, r3, #2
   111ec:	add	r3, r3, r3, lsr #31
   111f0:	asrs	r1, r3, #1
   111f4:	popeq	{r3, pc}
   111f8:	movw	r2, #0
   111fc:	movt	r2, #0
   11200:	cmp	r2, #0
   11204:	popeq	{r3, pc}
   11208:	blx	r2
   1120c:	pop	{r3, pc}
   11210:	push	{r4, lr}
   11214:	movw	r4, #8404	; 0x20d4
   11218:	movt	r4, #2
   1121c:	ldrb	r3, [r4]
   11220:	cmp	r3, #0
   11224:	popne	{r4, pc}
   11228:	bl	11198 <g_slice_alloc0@plt+0x7c>
   1122c:	mov	r3, #1
   11230:	strb	r3, [r4]
   11234:	pop	{r4, pc}
   11238:	movw	r0, #7900	; 0x1edc
   1123c:	movt	r0, #2
   11240:	push	{r3, lr}
   11244:	ldr	r3, [r0]
   11248:	cmp	r3, #0
   1124c:	beq	11264 <g_slice_alloc0@plt+0x148>
   11250:	movw	r3, #0
   11254:	movt	r3, #0
   11258:	cmp	r3, #0
   1125c:	beq	11264 <g_slice_alloc0@plt+0x148>
   11260:	blx	r3
   11264:	pop	{r3, lr}
   11268:	b	111d0 <g_slice_alloc0@plt+0xb4>
   1126c:	mov	r1, r0
   11270:	mov	r0, #32
   11274:	b	110ec <g_slice_free1@plt>
   11278:	ldr	r3, [r0]
   1127c:	push	{r4, lr}
   11280:	cmp	r3, #0
   11284:	sub	sp, sp, #8
   11288:	mov	r4, r0
   1128c:	beq	112dc <g_slice_alloc0@plt+0x1c0>
   11290:	cmp	r3, #1
   11294:	bne	11324 <g_slice_alloc0@plt+0x208>
   11298:	ldr	r1, [r4, #8]
   1129c:	add	r2, r4, #28
   112a0:	ldr	r0, [r0, #20]
   112a4:	bl	10fe4 <gsound_context_play_full_finish@plt>
   112a8:	ldr	r1, [r4, #28]
   112ac:	cmp	r1, #0
   112b0:	beq	112dc <g_slice_alloc0@plt+0x1c0>
   112b4:	ldr	r0, [r4, #12]
   112b8:	bl	11008 <g_simple_async_result_set_from_error@plt>
   112bc:	ldr	r0, [r4, #28]
   112c0:	bl	110c8 <g_error_free@plt>
   112c4:	ldr	r3, [r4]
   112c8:	cmp	r3, #0
   112cc:	bne	11384 <g_slice_alloc0@plt+0x268>
   112d0:	ldr	r0, [r4, #12]
   112d4:	bl	11014 <g_simple_async_result_complete_in_idle@plt>
   112d8:	b	11310 <g_slice_alloc0@plt+0x1f4>
   112dc:	movw	r3, #8408	; 0x20d8
   112e0:	movt	r3, #2
   112e4:	ldr	r2, [r3]
   112e8:	cmp	r2, #0
   112ec:	sub	r1, r2, #1
   112f0:	str	r2, [r4, #16]
   112f4:	str	r1, [r3]
   112f8:	bgt	11344 <g_slice_alloc0@plt+0x228>
   112fc:	ldr	r3, [r4]
   11300:	ldr	r0, [r4, #12]
   11304:	cmp	r3, #0
   11308:	beq	1137c <g_slice_alloc0@plt+0x260>
   1130c:	bl	1105c <g_simple_async_result_complete@plt>
   11310:	ldr	r0, [r4, #12]
   11314:	bl	10f84 <g_object_unref@plt>
   11318:	mov	r0, #0
   1131c:	add	sp, sp, #8
   11320:	pop	{r4, pc}
   11324:	mov	r0, #0
   11328:	movw	r1, #6752	; 0x1a60
   1132c:	movw	r3, #6508	; 0x196c
   11330:	str	r0, [sp]
   11334:	movt	r1, #1
   11338:	mov	r2, #124	; 0x7c
   1133c:	movt	r3, #1
   11340:	bl	10ff0 <g_assertion_message_expr@plt>
   11344:	ldr	r0, [r3, #4]
   11348:	mov	r2, #1
   1134c:	ldr	r1, [r3, #8]
   11350:	movw	r3, #5088	; 0x13e0
   11354:	str	r2, [r4]
   11358:	movt	r3, #1
   1135c:	str	r0, [r4, #20]
   11360:	mov	r2, #0
   11364:	str	r1, [r4, #24]
   11368:	str	r4, [sp]
   1136c:	bl	10f48 <gsound_context_play_fullv@plt>
   11370:	mov	r0, #0
   11374:	add	sp, sp, #8
   11378:	pop	{r4, pc}
   1137c:	bl	11014 <g_simple_async_result_complete_in_idle@plt>
   11380:	b	11310 <g_slice_alloc0@plt+0x1f4>
   11384:	ldr	r0, [r4, #12]
   11388:	bl	1105c <g_simple_async_result_complete@plt>
   1138c:	b	11310 <g_slice_alloc0@plt+0x1f4>
   11390:	push	{r4, r5, r6, lr}
   11394:	mov	r6, r0
   11398:	mov	r0, #32
   1139c:	mov	r5, r1
   113a0:	bl	1111c <g_slice_alloc0@plt>
   113a4:	mov	r1, r6
   113a8:	mov	r2, r5
   113ac:	movw	r3, #5008	; 0x1390
   113b0:	movt	r3, #1
   113b4:	mov	r4, r0
   113b8:	mov	r0, #0
   113bc:	bl	10fcc <g_simple_async_result_new@plt>
   113c0:	mov	r1, r4
   113c4:	movw	r2, #4716	; 0x126c
   113c8:	movt	r2, #1
   113cc:	str	r0, [r4, #12]
   113d0:	bl	10f30 <g_simple_async_result_set_op_res_gpointer@plt>
   113d4:	mov	r0, r4
   113d8:	pop	{r4, r5, r6, lr}
   113dc:	b	11278 <g_slice_alloc0@plt+0x15c>
   113e0:	str	r0, [r2, #4]
   113e4:	mov	r0, r2
   113e8:	str	r1, [r2, #8]
   113ec:	b	11278 <g_slice_alloc0@plt+0x15c>
   113f0:	b	10f00 <g_free@plt>
   113f4:	push	{r4, r5, r6, lr}
   113f8:	mov	r6, r1
   113fc:	mov	r4, r0
   11400:	bl	10fa8 <g_simple_async_result_get_type@plt>
   11404:	mov	r5, r0
   11408:	mov	r0, r4
   1140c:	mov	r1, r5
   11410:	bl	11068 <g_type_check_instance_cast@plt>
   11414:	mov	r1, r6
   11418:	bl	110f8 <g_simple_async_result_propagate_error@plt>
   1141c:	cmp	r0, #0
   11420:	popne	{r4, r5, r6, pc}
   11424:	mov	r0, r4
   11428:	mov	r1, r5
   1142c:	bl	11068 <g_type_check_instance_cast@plt>
   11430:	pop	{r4, r5, r6, lr}
   11434:	b	11098 <g_simple_async_result_get_op_res_gpointer@plt>
   11438:	push	{r4, r5, r6, lr}
   1143c:	movw	r4, #8400	; 0x20d0
   11440:	movt	r4, #2
   11444:	sub	sp, sp, #24
   11448:	subs	r0, r1, #0
   1144c:	mov	r6, #0
   11450:	ldr	r3, [r4]
   11454:	str	r6, [sp, #16]
   11458:	str	r3, [sp, #20]
   1145c:	beq	1150c <g_slice_alloc0@plt+0x3f0>
   11460:	add	r1, sp, #16
   11464:	bl	113f4 <g_slice_alloc0@plt+0x2d8>
   11468:	ldr	r5, [sp, #16]
   1146c:	cmp	r5, #0
   11470:	beq	11490 <g_slice_alloc0@plt+0x374>
   11474:	movw	r0, #6780	; 0x1a7c
   11478:	ldr	r1, [r5, #8]
   1147c:	movt	r0, #1
   11480:	str	r6, [sp, #16]
   11484:	bl	10f54 <g_print@plt>
   11488:	mov	r0, r5
   1148c:	bl	110c8 <g_error_free@plt>
   11490:	movw	r3, #8408	; 0x20d8
   11494:	movt	r3, #2
   11498:	ldr	r0, [r3, #12]
   1149c:	bl	10f3c <g_main_loop_quit@plt>
   114a0:	ldr	r5, [sp, #16]
   114a4:	cmp	r5, #0
   114a8:	beq	114f4 <g_slice_alloc0@plt+0x3d8>
   114ac:	ldr	r0, [r5]
   114b0:	bl	110d4 <g_quark_to_string@plt>
   114b4:	mov	r3, #221	; 0xdd
   114b8:	str	r3, [sp]
   114bc:	movw	r2, #6792	; 0x1a88
   114c0:	ldr	ip, [r5, #8]
   114c4:	movt	r2, #1
   114c8:	movw	r3, #6752	; 0x1a60
   114cc:	mov	r1, #8
   114d0:	movt	r3, #1
   114d4:	str	ip, [sp, #4]
   114d8:	str	r0, [sp, #8]
   114dc:	mov	r0, #0
   114e0:	ldr	ip, [r5, #4]
   114e4:	str	ip, [sp, #12]
   114e8:	bl	11104 <g_log@plt>
   114ec:	add	r0, sp, #16
   114f0:	bl	10f9c <g_clear_error@plt>
   114f4:	ldr	r2, [sp, #20]
   114f8:	ldr	r3, [r4]
   114fc:	cmp	r2, r3
   11500:	bne	11520 <g_slice_alloc0@plt+0x404>
   11504:	add	sp, sp, #24
   11508:	pop	{r4, r5, r6, pc}
   1150c:	movw	r2, #6768	; 0x1a70
   11510:	ldr	r1, [pc, #12]	; 11524 <g_slice_alloc0@plt+0x408>
   11514:	movt	r2, #1
   11518:	bl	11044 <g_return_if_fail_warning@plt>
   1151c:	b	114f4 <g_slice_alloc0@plt+0x3d8>
   11520:	bl	11074 <__stack_chk_fail@plt>
   11524:	andeq	r1, r1, r4, ror r9
   11528:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1152c:	vpush	{d8}
   11530:	movw	r5, #8400	; 0x20d0
   11534:	movt	r5, #2
   11538:	sub	sp, sp, #32
   1153c:	mov	r4, #0
   11540:	ldr	r3, [r5]
   11544:	str	r0, [sp, #20]
   11548:	movw	r0, #6840	; 0x1ab8
   1154c:	movt	r0, #1
   11550:	str	r1, [sp, #16]
   11554:	str	r3, [sp, #28]
   11558:	str	r4, [sp, #24]
   1155c:	bl	11050 <g_set_application_name@plt>
   11560:	mov	r0, r4
   11564:	bl	110b0 <g_option_context_new@plt>
   11568:	mov	r2, r4
   1156c:	ldr	r1, [pc, #892]	; 118f0 <g_slice_alloc0@plt+0x7d4>
   11570:	mov	r6, r0
   11574:	bl	10fc0 <g_option_context_add_main_entries@plt>
   11578:	add	r3, sp, #24
   1157c:	mov	r0, r6
   11580:	add	r1, sp, #16
   11584:	add	r2, sp, #20
   11588:	bl	11038 <g_option_context_parse@plt>
   1158c:	ldr	r3, [sp, #24]
   11590:	cmp	r3, r4
   11594:	beq	115ec <g_slice_alloc0@plt+0x4d0>
   11598:	mov	r4, r3
   1159c:	ldr	r1, [r3, #8]
   115a0:	movw	r0, #6780	; 0x1a7c
   115a4:	movt	r0, #1
   115a8:	mov	r2, #0
   115ac:	str	r2, [sp, #24]
   115b0:	bl	10f54 <g_print@plt>
   115b4:	mov	r0, r4
   115b8:	bl	110c8 <g_error_free@plt>
   115bc:	cmp	r6, #0
   115c0:	beq	115cc <g_slice_alloc0@plt+0x4b0>
   115c4:	mov	r0, r6
   115c8:	bl	10f60 <g_option_context_free@plt>
   115cc:	mov	r0, #1
   115d0:	ldr	r2, [sp, #28]
   115d4:	ldr	r3, [r5]
   115d8:	cmp	r2, r3
   115dc:	bne	118ec <g_slice_alloc0@plt+0x7d0>
   115e0:	add	sp, sp, #32
   115e4:	vpop	{d8}
   115e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   115ec:	movw	r4, #8408	; 0x20d8
   115f0:	movt	r4, #2
   115f4:	ldr	r3, [r4, #20]
   115f8:	cmp	r3, #0
   115fc:	beq	1185c <g_slice_alloc0@plt+0x740>
   11600:	mov	r0, #0
   11604:	add	r1, sp, #24
   11608:	bl	1102c <gsound_context_new@plt>
   1160c:	ldr	r3, [sp, #24]
   11610:	cmp	r3, #0
   11614:	mov	r7, r0
   11618:	bne	11598 <g_slice_alloc0@plt+0x47c>
   1161c:	ldr	r0, [r4, #4]
   11620:	cmp	r0, #0
   11624:	beq	1162c <g_slice_alloc0@plt+0x510>
   11628:	bl	10f84 <g_object_unref@plt>
   1162c:	mov	r3, #0
   11630:	mov	r0, r7
   11634:	str	r3, [sp]
   11638:	movw	r2, #6884	; 0x1ae4
   1163c:	movw	r3, #6900	; 0x1af4
   11640:	movt	r2, #1
   11644:	movt	r3, #1
   11648:	add	r1, sp, #24
   1164c:	str	r7, [r4, #4]
   11650:	bl	10f6c <gsound_context_set_attributes@plt>
   11654:	ldr	r3, [sp, #24]
   11658:	movw	r2, #8408	; 0x20d8
   1165c:	movt	r2, #2
   11660:	cmp	r3, #0
   11664:	bne	11598 <g_slice_alloc0@plt+0x47c>
   11668:	ldr	r1, [r2, #40]	; 0x28
   1166c:	cmp	r1, #0
   11670:	beq	1168c <g_slice_alloc0@plt+0x570>
   11674:	ldr	r0, [r2, #4]
   11678:	add	r2, sp, #24
   1167c:	bl	11080 <gsound_context_set_driver@plt>
   11680:	ldr	r3, [sp, #24]
   11684:	cmp	r3, #0
   11688:	bne	11598 <g_slice_alloc0@plt+0x47c>
   1168c:	movw	r2, #5104	; 0x13f0
   11690:	movt	r2, #1
   11694:	movw	r0, #3876	; 0xf24
   11698:	movw	r1, #4368	; 0x1110
   1169c:	mov	r3, r2
   116a0:	movt	r0, #1
   116a4:	movt	r1, #1
   116a8:	bl	11020 <g_hash_table_new_full@plt>
   116ac:	mov	r8, r0
   116b0:	ldr	r0, [r4, #8]
   116b4:	cmp	r0, #0
   116b8:	beq	116c0 <g_slice_alloc0@plt+0x5a4>
   116bc:	bl	110bc <g_hash_table_unref@plt>
   116c0:	ldr	r3, [r4, #20]
   116c4:	movw	r7, #8408	; 0x20d8
   116c8:	str	r8, [r4, #8]
   116cc:	movt	r7, #2
   116d0:	cmp	r3, #0
   116d4:	beq	11700 <g_slice_alloc0@plt+0x5e4>
   116d8:	movw	r0, #6924	; 0x1b0c
   116dc:	movt	r0, #1
   116e0:	bl	10f90 <g_strdup@plt>
   116e4:	mov	r9, r0
   116e8:	ldr	r0, [r7, #20]
   116ec:	bl	10f90 <g_strdup@plt>
   116f0:	mov	r1, r9
   116f4:	mov	r2, r0
   116f8:	mov	r0, r8
   116fc:	bl	10fb4 <g_hash_table_insert@plt>
   11700:	ldr	r3, [r4, #16]
   11704:	movw	r7, #8408	; 0x20d8
   11708:	movt	r7, #2
   1170c:	cmp	r3, #0
   11710:	beq	11740 <g_slice_alloc0@plt+0x624>
   11714:	movw	r0, #6936	; 0x1b18
   11718:	movt	r0, #1
   1171c:	ldr	r9, [r7, #8]
   11720:	bl	10f90 <g_strdup@plt>
   11724:	mov	r8, r0
   11728:	ldr	r0, [r7, #16]
   1172c:	bl	10f90 <g_strdup@plt>
   11730:	mov	r1, r8
   11734:	mov	r2, r0
   11738:	mov	r0, r9
   1173c:	bl	10fb4 <g_hash_table_insert@plt>
   11740:	ldr	r3, [r4, #24]
   11744:	movw	r7, #8408	; 0x20d8
   11748:	movt	r7, #2
   1174c:	cmp	r3, #0
   11750:	beq	11780 <g_slice_alloc0@plt+0x664>
   11754:	movw	r0, #6952	; 0x1b28
   11758:	movt	r0, #1
   1175c:	ldr	r9, [r7, #8]
   11760:	bl	10f90 <g_strdup@plt>
   11764:	mov	r8, r0
   11768:	ldr	r0, [r7, #24]
   1176c:	bl	10f90 <g_strdup@plt>
   11770:	mov	r1, r8
   11774:	mov	r2, r0
   11778:	mov	r0, r9
   1177c:	bl	10fb4 <g_hash_table_insert@plt>
   11780:	vldr	d7, [r4, #32]
   11784:	vcmp.f64	d7, #0.0
   11788:	movw	r7, #8408	; 0x20d8
   1178c:	movt	r7, #2
   11790:	vmrs	APSR_nzcv, fpscr
   11794:	bne	11880 <g_slice_alloc0@plt+0x764>
   11798:	ldr	r2, [r4]
   1179c:	movw	r3, #8408	; 0x20d8
   117a0:	movt	r3, #2
   117a4:	mov	r1, #0
   117a8:	cmp	r2, #0
   117ac:	movw	r0, #5176	; 0x1438
   117b0:	movt	r0, #1
   117b4:	moveq	r2, #1
   117b8:	streq	r2, [r3]
   117bc:	bl	11390 <g_slice_alloc0@plt+0x274>
   117c0:	mov	r0, #0
   117c4:	mov	r1, r0
   117c8:	bl	10fd8 <g_main_loop_new@plt>
   117cc:	mov	r7, r0
   117d0:	ldr	r0, [r4, #12]
   117d4:	cmp	r0, #0
   117d8:	beq	117e0 <g_slice_alloc0@plt+0x6c4>
   117dc:	bl	110a4 <g_main_loop_unref@plt>
   117e0:	mov	r0, r7
   117e4:	str	r7, [r4, #12]
   117e8:	bl	110e0 <g_main_loop_run@plt>
   117ec:	ldr	r4, [sp, #24]
   117f0:	cmp	r4, #0
   117f4:	beq	118d4 <g_slice_alloc0@plt+0x7b8>
   117f8:	cmp	r6, #0
   117fc:	beq	1180c <g_slice_alloc0@plt+0x6f0>
   11800:	mov	r0, r6
   11804:	bl	10f60 <g_option_context_free@plt>
   11808:	ldr	r4, [sp, #24]
   1180c:	ldr	r0, [r4]
   11810:	bl	110d4 <g_quark_to_string@plt>
   11814:	movw	r3, #393	; 0x189
   11818:	str	r3, [sp]
   1181c:	movw	r2, #6792	; 0x1a88
   11820:	ldr	ip, [r4, #8]
   11824:	movt	r2, #1
   11828:	movw	r3, #6752	; 0x1a60
   1182c:	mov	r1, #8
   11830:	movt	r3, #1
   11834:	str	ip, [sp, #4]
   11838:	str	r0, [sp, #8]
   1183c:	mov	r0, #0
   11840:	ldr	ip, [r4, #4]
   11844:	str	ip, [sp, #12]
   11848:	bl	11104 <g_log@plt>
   1184c:	add	r0, sp, #24
   11850:	bl	10f9c <g_clear_error@plt>
   11854:	mov	r0, #0
   11858:	b	115d0 <g_slice_alloc0@plt+0x4b4>
   1185c:	ldr	r3, [r4, #16]
   11860:	cmp	r3, #0
   11864:	bne	11600 <g_slice_alloc0@plt+0x4e4>
   11868:	movw	r0, #6852	; 0x1ac4
   1186c:	movt	r0, #1
   11870:	bl	10f54 <g_print@plt>
   11874:	cmp	r6, #0
   11878:	bne	115c4 <g_slice_alloc0@plt+0x4a8>
   1187c:	b	115cc <g_slice_alloc0@plt+0x4b0>
   11880:	movw	r0, #6976	; 0x1b40
   11884:	movt	r0, #1
   11888:	ldr	r9, [r7, #8]
   1188c:	bl	10f90 <g_strdup@plt>
   11890:	vldr	d8, [r7, #32]
   11894:	mov	r8, r0
   11898:	mov	r0, #39	; 0x27
   1189c:	bl	1108c <g_malloc0@plt>
   118a0:	vmov.f64	d0, d8
   118a4:	mov	r1, #39	; 0x27
   118a8:	mov	sl, r0
   118ac:	bl	10ffc <g_ascii_dtostr@plt>
   118b0:	bl	10f90 <g_strdup@plt>
   118b4:	mov	r7, r0
   118b8:	mov	r0, sl
   118bc:	bl	10f00 <g_free@plt>
   118c0:	mov	r0, r9
   118c4:	mov	r1, r8
   118c8:	mov	r2, r7
   118cc:	bl	10fb4 <g_hash_table_insert@plt>
   118d0:	b	11798 <g_slice_alloc0@plt+0x67c>
   118d4:	cmp	r6, #0
   118d8:	beq	11854 <g_slice_alloc0@plt+0x738>
   118dc:	mov	r0, r6
   118e0:	bl	10f60 <g_option_context_free@plt>
   118e4:	mov	r0, r4
   118e8:	b	115d0 <g_slice_alloc0@plt+0x4b4>
   118ec:	bl	11074 <__stack_chk_fail@plt>
   118f0:	andeq	r1, r1, r0, lsl #19
   118f4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   118f8:	mov	r7, r0
   118fc:	ldr	r6, [pc, #76]	; 11950 <g_slice_alloc0@plt+0x834>
   11900:	mov	r8, r1
   11904:	ldr	r5, [pc, #72]	; 11954 <g_slice_alloc0@plt+0x838>
   11908:	mov	r9, r2
   1190c:	add	r6, pc, r6
   11910:	bl	10ee0 <_init@@Base>
   11914:	add	r5, pc, r5
   11918:	rsb	r6, r5, r6
   1191c:	asrs	r6, r6, #2
   11920:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   11924:	sub	r5, r5, #4
   11928:	mov	r4, #0
   1192c:	add	r4, r4, #1
   11930:	ldr	r3, [r5, #4]!
   11934:	mov	r0, r7
   11938:	mov	r1, r8
   1193c:	mov	r2, r9
   11940:	blx	r3
   11944:	cmp	r4, r6
   11948:	bne	1192c <g_slice_alloc0@plt+0x810>
   1194c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11950:	andeq	r0, r1, r4, asr #11
   11954:			; <UNDEFINED> instruction: 0x000105b8
   11958:	bx	lr

Disassembly of section .fini:

0001195c <_fini@@Base>:
   1195c:	push	{r3, lr}
   11960:	pop	{r3, pc}
