
centos-preinstalled/chmem:     file format elf32-littlearm


Disassembly of section .init:

00011104 <.init>:
   11104:	push	{r3, lr}
   11108:	bl	11f64 <__assert_fail@plt+0xaec>
   1110c:	pop	{r3, pc}

Disassembly of section .plt:

00011110 <calloc@plt-0x14>:
   11110:	push	{lr}		; (str lr, [sp, #-4]!)
   11114:	ldr	lr, [pc, #4]	; 11120 <calloc@plt-0x4>
   11118:	add	lr, pc, lr
   1111c:	ldr	pc, [lr, #8]!
   11120:	andeq	r6, r1, r0, ror #29

00011124 <calloc@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3808]!	; 0xee0

00011130 <raise@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3800]!	; 0xed8

0001113c <strcasestr@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3792]!	; 0xed0

00011148 <strcmp@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3784]!	; 0xec8

00011154 <strtol@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3776]!	; 0xec0

00011160 <strcspn@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3768]!	; 0xeb8

0001116c <free@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3760]!	; 0xeb0

00011178 <fgets@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3752]!	; 0xea8

00011184 <ferror@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3744]!	; 0xea0

00011190 <_exit@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3736]!	; 0xe98

0001119c <__vsnprintf_chk@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3728]!	; 0xe90

000111a8 <memcpy@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3720]!	; 0xe88

000111b4 <__strtoull_internal@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3712]!	; 0xe80

000111c0 <versionsort64@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3704]!	; 0xe78

000111cc <memcmp@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3696]!	; 0xe70

000111d8 <stpcpy@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3688]!	; 0xe68

000111e4 <dcgettext@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3680]!	; 0xe60

000111f0 <__stack_chk_fail@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3672]!	; 0xe58

000111fc <realloc@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3664]!	; 0xe50

00011208 <textdomain@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3656]!	; 0xe48

00011214 <strcasecmp@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3648]!	; 0xe40

00011220 <__strndup@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3640]!	; 0xe38

0001122c <err@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3632]!	; 0xe30

00011238 <__memcpy_chk@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3624]!	; 0xe28

00011244 <usleep@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3616]!	; 0xe20

00011250 <__fpending@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3608]!	; 0xe18

0001125c <open64@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3600]!	; 0xe10

00011268 <malloc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3592]!	; 0xe08

00011274 <__libc_start_main@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3584]!	; 0xe00

00011280 <__ctype_tolower_loc@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3576]!	; 0xdf8

0001128c <__gmon_start__@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3568]!	; 0xdf0

00011298 <getopt_long@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3560]!	; 0xde8

000112a4 <__ctype_b_loc@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3552]!	; 0xde0

000112b0 <exit@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112bc <syscall@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3536]!	; 0xdd0

000112c8 <strtoul@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3528]!	; 0xdc8

000112d4 <strlen@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3520]!	; 0xdc0

000112e0 <strchr@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3512]!	; 0xdb8

000112ec <warnx@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112f8 <__errno_location@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3496]!	; 0xda8

00011304 <strncasecmp@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3488]!	; 0xda0

00011310 <__cxa_atexit@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3480]!	; 0xd98

0001131c <__vasprintf_chk@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3472]!	; 0xd90

00011328 <__strdup@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3464]!	; 0xd88

00011334 <__sched_cpufree@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3456]!	; 0xd80

00011340 <memset@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3448]!	; 0xd78

0001134c <fscanf@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3440]!	; 0xd70

00011358 <fgetc@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3432]!	; 0xd68

00011364 <__printf_chk@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3424]!	; 0xd60

00011370 <strtod@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3416]!	; 0xd58

0001137c <write@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3408]!	; 0xd50

00011388 <__sched_cpualloc@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3400]!	; 0xd48

00011394 <__fprintf_chk@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3392]!	; 0xd40

000113a0 <access@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3384]!	; 0xd38

000113ac <fclose@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #90112	; 0x16000
   113b4:	ldr	pc, [ip, #3376]!	; 0xd30

000113b8 <setlocale@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #90112	; 0x16000
   113c0:	ldr	pc, [ip, #3368]!	; 0xd28

000113c4 <errx@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #90112	; 0x16000
   113cc:	ldr	pc, [ip, #3360]!	; 0xd20

000113d0 <warn@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #90112	; 0x16000
   113d8:	ldr	pc, [ip, #3352]!	; 0xd18

000113dc <fputc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #90112	; 0x16000
   113e4:	ldr	pc, [ip, #3344]!	; 0xd10

000113e8 <sscanf@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #90112	; 0x16000
   113f0:	ldr	pc, [ip, #3336]!	; 0xd08

000113f4 <localeconv@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #90112	; 0x16000
   113fc:	ldr	pc, [ip, #3328]!	; 0xd00

00011400 <__strtoll_internal@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #90112	; 0x16000
   11408:	ldr	pc, [ip, #3320]!	; 0xcf8

0001140c <fopen64@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #90112	; 0x16000
   11414:	ldr	pc, [ip, #3312]!	; 0xcf0

00011418 <bindtextdomain@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #90112	; 0x16000
   11420:	ldr	pc, [ip, #3304]!	; 0xce8

00011424 <scandir64@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #90112	; 0x16000
   1142c:	ldr	pc, [ip, #3296]!	; 0xce0

00011430 <fputs@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #90112	; 0x16000
   11438:	ldr	pc, [ip, #3288]!	; 0xcd8

0001143c <strncmp@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #90112	; 0x16000
   11444:	ldr	pc, [ip, #3280]!	; 0xcd0

00011448 <abort@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #90112	; 0x16000
   11450:	ldr	pc, [ip, #3272]!	; 0xcc8

00011454 <close@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #90112	; 0x16000
   1145c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011460 <__snprintf_chk@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #90112	; 0x16000
   11468:	ldr	pc, [ip, #3256]!	; 0xcb8

0001146c <strspn@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #90112	; 0x16000
   11474:	ldr	pc, [ip, #3248]!	; 0xcb0

00011478 <__assert_fail@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #90112	; 0x16000
   11480:	ldr	pc, [ip, #3240]!	; 0xca8

Disassembly of section .text:

00011488 <.text>:
   11488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1148c:	movw	r4, #33096	; 0x8148
   11490:	movt	r4, #2
   11494:	sub	sp, sp, #92	; 0x5c
   11498:	mov	r3, #0
   1149c:	mov	r7, r1
   114a0:	ldr	r2, [r4]
   114a4:	mov	r6, r0
   114a8:	movw	r1, #28732	; 0x703c
   114ac:	mov	r0, #6
   114b0:	movt	r1, #1
   114b4:	str	r3, [sp, #32]
   114b8:	str	r3, [sp, #36]	; 0x24
   114bc:	mov	r8, r3
   114c0:	str	r3, [sp, #8]
   114c4:	movw	r5, #27680	; 0x6c20
   114c8:	str	r3, [sp, #40]	; 0x28
   114cc:	movw	r9, #33120	; 0x8160
   114d0:	str	r3, [sp, #44]	; 0x2c
   114d4:	movt	r5, #1
   114d8:	str	r3, [sp, #48]	; 0x30
   114dc:	movt	r9, #2
   114e0:	str	r3, [sp, #52]	; 0x34
   114e4:	str	r3, [sp, #56]	; 0x38
   114e8:	str	r3, [sp, #60]	; 0x3c
   114ec:	str	r3, [sp, #64]	; 0x40
   114f0:	str	r3, [sp, #68]	; 0x44
   114f4:	str	r3, [sp, #72]	; 0x48
   114f8:	str	r3, [sp, #76]	; 0x4c
   114fc:	str	r3, [sp, #24]
   11500:	str	r3, [sp, #28]
   11504:	str	r2, [sp, #84]	; 0x54
   11508:	mov	r2, #2
   1150c:	str	r2, [sp, #12]
   11510:	bl	113b8 <setlocale@plt>
   11514:	movw	r0, #28548	; 0x6f84
   11518:	movw	r1, #28560	; 0x6f90
   1151c:	movt	r0, #1
   11520:	movt	r1, #1
   11524:	bl	11418 <bindtextdomain@plt>
   11528:	movw	r0, #28548	; 0x6f84
   1152c:	movt	r0, #1
   11530:	bl	11208 <textdomain@plt>
   11534:	movw	r0, #10848	; 0x2a60
   11538:	movt	r0, #1
   1153c:	bl	16be4 <__assert_fail@plt+0x576c>
   11540:	add	r0, sp, #32
   11544:	bl	12094 <__assert_fail@plt+0xc1c>
   11548:	str	r8, [sp]
   1154c:	movw	r2, #29196	; 0x720c
   11550:	mov	r0, r6
   11554:	movt	r2, #1
   11558:	mov	r1, r7
   1155c:	ldr	r3, [pc, #2484]	; 11f18 <__assert_fail@plt+0xaa0>
   11560:	bl	11298 <getopt_long@plt>
   11564:	cmn	r0, #1
   11568:	beq	11990 <__assert_fail@plt+0x518>
   1156c:	cmp	r0, #99	; 0x63
   11570:	ble	115f0 <__assert_fail@plt+0x178>
   11574:	ldr	r1, [pc, #2464]	; 11f1c <__assert_fail@plt+0xaa4>
   11578:	mov	ip, #0
   1157c:	add	fp, sp, #24
   11580:	mov	lr, ip
   11584:	sub	sl, r1, #64	; 0x40
   11588:	mov	r3, #100	; 0x64
   1158c:	cmp	r0, r3
   11590:	blt	115cc <__assert_fail@plt+0x154>
   11594:	movne	r2, sl
   11598:	beq	115b4 <__assert_fail@plt+0x13c>
   1159c:	ldr	r3, [r2, #4]!
   115a0:	cmp	r3, #0
   115a4:	beq	115cc <__assert_fail@plt+0x154>
   115a8:	cmp	r0, r3
   115ac:	blt	115cc <__assert_fail@plt+0x154>
   115b0:	bne	1159c <__assert_fail@plt+0x124>
   115b4:	ldr	r3, [fp, lr, lsl #2]
   115b8:	cmp	r3, #0
   115bc:	streq	r0, [fp, lr, lsl #2]
   115c0:	beq	115cc <__assert_fail@plt+0x154>
   115c4:	cmp	r0, r3
   115c8:	bne	11d30 <__assert_fail@plt+0x8b8>
   115cc:	ldr	r3, [r1]
   115d0:	add	ip, ip, #1
   115d4:	mov	sl, r1
   115d8:	cmp	r3, #0
   115dc:	mov	lr, ip
   115e0:	beq	115f0 <__assert_fail@plt+0x178>
   115e4:	cmp	r0, r3
   115e8:	add	r1, r1, #64	; 0x40
   115ec:	bge	1158c <__assert_fail@plt+0x114>
   115f0:	sub	r0, r0, #86	; 0x56
   115f4:	cmp	r0, #36	; 0x24
   115f8:	ldrls	pc, [pc, r0, lsl #2]
   115fc:	b	1194c <__assert_fail@plt+0x4d4>
   11600:			; <UNDEFINED> instruction: 0x000116bc
   11604:	andeq	r1, r1, ip, asr #18
   11608:	andeq	r1, r1, ip, asr #18
   1160c:	andeq	r1, r1, ip, asr #18
   11610:	andeq	r1, r1, ip, asr #18
   11614:	andeq	r1, r1, ip, asr #18
   11618:	andeq	r1, r1, ip, asr #18
   1161c:	andeq	r1, r1, ip, asr #18
   11620:	andeq	r1, r1, ip, asr #18
   11624:	andeq	r1, r1, ip, asr #18
   11628:	andeq	r1, r1, ip, asr #18
   1162c:	andeq	r1, r1, ip, asr #18
   11630:	andeq	r1, r1, ip, lsr #13
   11634:	andeq	r1, r1, ip, asr #18
   11638:	andeq	r1, r1, r0, lsr #13
   1163c:	muleq	r1, r4, r6
   11640:	andeq	r1, r1, ip, asr #18
   11644:	andeq	r1, r1, ip, asr #18
   11648:	andeq	r1, r1, r8, asr #14
   1164c:	andeq	r1, r1, ip, asr #18
   11650:	andeq	r1, r1, ip, asr #18
   11654:	andeq	r1, r1, ip, asr #18
   11658:	andeq	r1, r1, ip, asr #18
   1165c:	andeq	r1, r1, ip, asr #18
   11660:	andeq	r1, r1, ip, asr #18
   11664:	andeq	r1, r1, ip, asr #18
   11668:	andeq	r1, r1, ip, asr #18
   1166c:	andeq	r1, r1, ip, asr #18
   11670:	andeq	r1, r1, ip, asr #18
   11674:	andeq	r1, r1, ip, asr #18
   11678:	andeq	r1, r1, ip, asr #18
   1167c:	andeq	r1, r1, ip, asr #18
   11680:	andeq	r1, r1, r8, lsr r7
   11684:	andeq	r1, r1, ip, asr #18
   11688:	andeq	r1, r1, ip, asr #18
   1168c:	andeq	r1, r1, ip, asr #18
   11690:	andeq	r1, r1, ip, lsl #14
   11694:	mov	r1, #0
   11698:	str	r1, [sp, #12]
   1169c:	b	11548 <__assert_fail@plt+0xd0>
   116a0:	mov	r3, #1
   116a4:	str	r3, [sp, #12]
   116a8:	b	11548 <__assert_fail@plt+0xd0>
   116ac:	ldrb	r3, [sp, #72]	; 0x48
   116b0:	orr	r3, r3, #1
   116b4:	strb	r3, [sp, #72]	; 0x48
   116b8:	b	11548 <__assert_fail@plt+0xd0>
   116bc:	mov	r2, #5
   116c0:	movw	r1, #29100	; 0x71ac
   116c4:	mov	r0, #0
   116c8:	movt	r1, #1
   116cc:	bl	111e4 <dcgettext@plt>
   116d0:	movw	r2, #33088	; 0x8140
   116d4:	movt	r2, #2
   116d8:	movw	r3, #29112	; 0x71b8
   116dc:	movt	r3, #1
   116e0:	ldr	r2, [r2]
   116e4:	mov	r1, r0
   116e8:	mov	r0, #1
   116ec:	bl	11364 <__printf_chk@plt>
   116f0:	mov	r0, #0
   116f4:	ldr	r2, [sp, #84]	; 0x54
   116f8:	ldr	r3, [r4]
   116fc:	cmp	r2, r3
   11700:	bne	11ecc <__assert_fail@plt+0xa54>
   11704:	add	sp, sp, #92	; 0x5c
   11708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1170c:	ldr	r0, [r9]
   11710:	cmp	r0, #0
   11714:	beq	11e18 <__assert_fail@plt+0x9a0>
   11718:	bl	11328 <__strdup@plt>
   1171c:	cmp	r0, #0
   11720:	str	r0, [sp, #8]
   11724:	bne	11548 <__assert_fail@plt+0xd0>
   11728:	movw	r1, #29132	; 0x71cc
   1172c:	mov	r0, #1
   11730:	movt	r1, #1
   11734:	bl	1122c <err@plt>
   11738:	ldrb	r3, [sp, #72]	; 0x48
   1173c:	orr	r3, r3, #4
   11740:	strb	r3, [sp, #72]	; 0x48
   11744:	b	11548 <__assert_fail@plt+0xd0>
   11748:	movw	r3, #33112	; 0x8158
   1174c:	movt	r3, #2
   11750:	mov	r2, #5
   11754:	movw	r1, #28620	; 0x6fcc
   11758:	ldr	r5, [r3]
   1175c:	movt	r1, #1
   11760:	mov	r0, #0
   11764:	ldr	r4, [pc, #1972]	; 11f20 <__assert_fail@plt+0xaa8>
   11768:	bl	111e4 <dcgettext@plt>
   1176c:	mov	r1, r5
   11770:	add	r6, r4, #24
   11774:	bl	11430 <fputs@plt>
   11778:	mov	r2, #5
   1177c:	movw	r1, #28632	; 0x6fd8
   11780:	mov	r0, #0
   11784:	movt	r1, #1
   11788:	bl	111e4 <dcgettext@plt>
   1178c:	movw	r3, #33088	; 0x8140
   11790:	movt	r3, #2
   11794:	mov	r1, #1
   11798:	ldr	r3, [r3]
   1179c:	mov	r2, r0
   117a0:	mov	r0, r5
   117a4:	bl	11394 <__fprintf_chk@plt>
   117a8:	mov	r2, #5
   117ac:	movw	r1, #28268	; 0x6e6c
   117b0:	mov	r0, #0
   117b4:	movt	r1, #1
   117b8:	bl	111e4 <dcgettext@plt>
   117bc:	mov	r1, r5
   117c0:	bl	11430 <fputs@plt>
   117c4:	mov	r2, #5
   117c8:	movw	r1, #28672	; 0x7000
   117cc:	mov	r0, #0
   117d0:	movt	r1, #1
   117d4:	bl	111e4 <dcgettext@plt>
   117d8:	mov	r1, r5
   117dc:	bl	11430 <fputs@plt>
   117e0:	mov	r2, #5
   117e4:	movw	r1, #28736	; 0x7040
   117e8:	mov	r0, #0
   117ec:	movt	r1, #1
   117f0:	bl	111e4 <dcgettext@plt>
   117f4:	mov	r1, r5
   117f8:	bl	11430 <fputs@plt>
   117fc:	mov	r2, #5
   11800:	movw	r1, #28748	; 0x704c
   11804:	mov	r0, #0
   11808:	movt	r1, #1
   1180c:	bl	111e4 <dcgettext@plt>
   11810:	mov	r1, r5
   11814:	bl	11430 <fputs@plt>
   11818:	mov	r2, #5
   1181c:	movw	r1, #28784	; 0x7070
   11820:	mov	r0, #0
   11824:	movt	r1, #1
   11828:	bl	111e4 <dcgettext@plt>
   1182c:	mov	r1, r5
   11830:	bl	11430 <fputs@plt>
   11834:	mov	r2, #5
   11838:	movw	r1, #28820	; 0x7094
   1183c:	mov	r0, #0
   11840:	movt	r1, #1
   11844:	bl	111e4 <dcgettext@plt>
   11848:	mov	r1, r5
   1184c:	bl	11430 <fputs@plt>
   11850:	mov	r2, #5
   11854:	movw	r1, #28860	; 0x70bc
   11858:	mov	r0, #0
   1185c:	movt	r1, #1
   11860:	bl	111e4 <dcgettext@plt>
   11864:	mov	r1, r5
   11868:	bl	11430 <fputs@plt>
   1186c:	mov	r2, #5
   11870:	movw	r1, #28912	; 0x70f0
   11874:	mov	r0, #0
   11878:	movt	r1, #1
   1187c:	bl	111e4 <dcgettext@plt>
   11880:	mov	r1, r5
   11884:	bl	11430 <fputs@plt>
   11888:	mov	r2, #5
   1188c:	movw	r1, #28948	; 0x7114
   11890:	mov	r0, #0
   11894:	movt	r1, #1
   11898:	bl	111e4 <dcgettext@plt>
   1189c:	mov	r2, #5
   118a0:	movw	r1, #28968	; 0x7128
   118a4:	movt	r1, #1
   118a8:	mov	r7, r0
   118ac:	mov	r0, #0
   118b0:	bl	111e4 <dcgettext@plt>
   118b4:	mov	r3, r7
   118b8:	movw	r2, #29016	; 0x7158
   118bc:	movw	r1, #28984	; 0x7138
   118c0:	movt	r2, #1
   118c4:	movt	r1, #1
   118c8:	str	r2, [sp]
   118cc:	movw	r2, #29004	; 0x714c
   118d0:	movt	r2, #1
   118d4:	str	r0, [sp, #4]
   118d8:	mov	r0, #1
   118dc:	bl	11364 <__printf_chk@plt>
   118e0:	movw	r1, #29032	; 0x7168
   118e4:	mov	r0, #0
   118e8:	movt	r1, #1
   118ec:	mov	r2, #5
   118f0:	bl	111e4 <dcgettext@plt>
   118f4:	mov	r1, r5
   118f8:	bl	11430 <fputs@plt>
   118fc:	ldr	r3, [r4, #4]!
   11900:	movw	r2, #29052	; 0x717c
   11904:	mov	r0, r5
   11908:	movt	r2, #1
   1190c:	mov	r1, #1
   11910:	bl	11394 <__fprintf_chk@plt>
   11914:	cmp	r4, r6
   11918:	bne	118fc <__assert_fail@plt+0x484>
   1191c:	mov	r2, #5
   11920:	movw	r1, #29060	; 0x7184
   11924:	mov	r0, #0
   11928:	movt	r1, #1
   1192c:	bl	111e4 <dcgettext@plt>
   11930:	movw	r2, #29088	; 0x71a0
   11934:	movt	r2, #1
   11938:	mov	r1, r0
   1193c:	mov	r0, #1
   11940:	bl	11364 <__printf_chk@plt>
   11944:	mov	r0, #0
   11948:	bl	112b0 <exit@plt>
   1194c:	movw	r3, #33108	; 0x8154
   11950:	movt	r3, #2
   11954:	movw	r1, #29156	; 0x71e4
   11958:	movt	r1, #1
   1195c:	ldr	r4, [r3]
   11960:	mov	r0, #0
   11964:	mov	r2, #5
   11968:	bl	111e4 <dcgettext@plt>
   1196c:	movw	r3, #33088	; 0x8140
   11970:	movt	r3, #2
   11974:	mov	r1, #1
   11978:	ldr	r3, [r3]
   1197c:	mov	r2, r0
   11980:	mov	r0, r4
   11984:	bl	11394 <__fprintf_chk@plt>
   11988:	mov	r0, #1
   1198c:	bl	112b0 <exit@plt>
   11990:	cmp	r6, #1
   11994:	beq	11e70 <__assert_fail@plt+0x9f8>
   11998:	movw	r3, #33104	; 0x8150
   1199c:	movt	r3, #2
   119a0:	ldr	r3, [r3]
   119a4:	add	r2, r3, #1
   119a8:	cmp	r2, r6
   119ac:	bne	11e70 <__assert_fail@plt+0x9f8>
   119b0:	ldr	r2, [sp, #12]
   119b4:	cmp	r2, #2
   119b8:	beq	11e70 <__assert_fail@plt+0x9f8>
   119bc:	ldr	r8, [r7, r3, lsl #2]
   119c0:	movw	r1, #29220	; 0x7224
   119c4:	movt	r1, #1
   119c8:	mov	r0, r8
   119cc:	bl	150f8 <__assert_fail@plt+0x3c80>
   119d0:	mov	r9, r0
   119d4:	bl	14ea8 <__assert_fail@plt+0x3a30>
   119d8:	cmp	r0, #2
   119dc:	movwhi	r1, #29224	; 0x7228
   119e0:	movhi	r0, #0
   119e4:	movthi	r1, #1
   119e8:	bhi	11e58 <__assert_fail@plt+0x9e0>
   119ec:	mov	r0, r9
   119f0:	bl	14ea8 <__assert_fail@plt+0x3a30>
   119f4:	ldrb	r3, [sp, #72]	; 0x48
   119f8:	cmp	r0, #1
   119fc:	beq	11c68 <__assert_fail@plt+0x7f0>
   11a00:	tst	r3, #1
   11a04:	ldr	r7, [r9]
   11a08:	ldr	r6, [r9, #4]
   11a0c:	bne	11bb0 <__assert_fail@plt+0x738>
   11a10:	mov	r0, r7
   11a14:	bl	112d4 <strlen@plt>
   11a18:	cmp	r0, #1
   11a1c:	bls	11ef4 <__assert_fail@plt+0xa7c>
   11a20:	ldrsb	r3, [r7, #1]
   11a24:	cmp	r3, #120	; 0x78
   11a28:	bne	11ef4 <__assert_fail@plt+0xa7c>
   11a2c:	mov	r0, r6
   11a30:	bl	112d4 <strlen@plt>
   11a34:	cmp	r0, #1
   11a38:	bls	11ed0 <__assert_fail@plt+0xa58>
   11a3c:	ldrsb	r3, [r6, #1]
   11a40:	cmp	r3, #120	; 0x78
   11a44:	bne	11ed0 <__assert_fail@plt+0xa58>
   11a48:	mov	r2, #5
   11a4c:	movw	r1, #29464	; 0x7318
   11a50:	mov	r0, #0
   11a54:	movt	r1, #1
   11a58:	bl	111e4 <dcgettext@plt>
   11a5c:	mov	r1, r0
   11a60:	mov	r0, r7
   11a64:	bl	13cf0 <__assert_fail@plt+0x2878>
   11a68:	mov	r2, #5
   11a6c:	strd	r0, [sp, #48]	; 0x30
   11a70:	movw	r1, #29496	; 0x7338
   11a74:	mov	r0, #0
   11a78:	movt	r1, #1
   11a7c:	bl	111e4 <dcgettext@plt>
   11a80:	mov	r1, r0
   11a84:	mov	r0, r6
   11a88:	bl	13cf0 <__assert_fail@plt+0x2878>
   11a8c:	ldrd	r2, [sp, #48]	; 0x30
   11a90:	ldrd	sl, [sp, #40]	; 0x28
   11a94:	strd	r2, [sp, #16]
   11a98:	mov	r6, r0
   11a9c:	mov	r7, r1
   11aa0:	mov	r0, r2
   11aa4:	mov	r1, r3
   11aa8:	mov	r2, sl
   11aac:	mov	r3, fp
   11ab0:	strd	r6, [sp, #56]	; 0x38
   11ab4:	bl	15ff0 <__assert_fail@plt+0x4b78>
   11ab8:	orrs	r1, r2, r3
   11abc:	bne	11e98 <__assert_fail@plt+0xa20>
   11ac0:	adds	r0, r6, #1
   11ac4:	mov	r2, sl
   11ac8:	adc	r1, r7, #0
   11acc:	mov	r3, fp
   11ad0:	bl	15ff0 <__assert_fail@plt+0x4b78>
   11ad4:	orrs	r1, r2, r3
   11ad8:	bne	11e98 <__assert_fail@plt+0xa20>
   11adc:	mov	r2, sl
   11ae0:	mov	r3, fp
   11ae4:	ldrd	r0, [sp, #16]
   11ae8:	bl	15ff0 <__assert_fail@plt+0x4b78>
   11aec:	mov	r2, sl
   11af0:	mov	r3, fp
   11af4:	strd	r0, [sp, #48]	; 0x30
   11af8:	mov	r0, r6
   11afc:	mov	r1, r7
   11b00:	bl	15ff0 <__assert_fail@plt+0x4b78>
   11b04:	strd	r0, [sp, #56]	; 0x38
   11b08:	mov	r0, r9
   11b0c:	bl	14e8c <__assert_fail@plt+0x3a14>
   11b10:	ldrd	r0, [sp, #48]	; 0x30
   11b14:	ldrd	r2, [sp, #56]	; 0x38
   11b18:	cmp	r1, r3
   11b1c:	cmpeq	r0, r2
   11b20:	bhi	11e4c <__assert_fail@plt+0x9d4>
   11b24:	movw	r0, #29624	; 0x73b8
   11b28:	movt	r0, #1
   11b2c:	bl	133ec <__assert_fail@plt+0x1f74>
   11b30:	cmp	r0, #0
   11b34:	beq	11bfc <__assert_fail@plt+0x784>
   11b38:	ldrb	r3, [sp, #72]	; 0x48
   11b3c:	ldr	r2, [sp, #8]
   11b40:	orr	r3, r3, #8
   11b44:	strb	r3, [sp, #72]	; 0x48
   11b48:	cmp	r2, #0
   11b4c:	uxtbeq	r3, r3
   11b50:	beq	11c2c <__assert_fail@plt+0x7b4>
   11b54:	mov	r6, #0
   11b58:	ldr	r0, [sp, #8]
   11b5c:	ldr	r1, [r5, r6, lsl #2]
   11b60:	bl	11214 <strcasecmp@plt>
   11b64:	cmp	r0, #0
   11b68:	beq	11e8c <__assert_fail@plt+0xa14>
   11b6c:	add	r6, r6, #1
   11b70:	cmp	r6, #6
   11b74:	bne	11b58 <__assert_fail@plt+0x6e0>
   11b78:	movw	r1, #29744	; 0x7430
   11b7c:	mov	r0, #0
   11b80:	movt	r1, #1
   11b84:	mov	r2, #5
   11b88:	bl	111e4 <dcgettext@plt>
   11b8c:	ldr	r1, [sp, #8]
   11b90:	bl	112ec <warnx@plt>
   11b94:	movw	r3, #33108	; 0x8154
   11b98:	movt	r3, #2
   11b9c:	movw	r1, #29156	; 0x71e4
   11ba0:	mov	r0, #0
   11ba4:	movt	r1, #1
   11ba8:	ldr	r4, [r3]
   11bac:	b	11964 <__assert_fail@plt+0x4ec>
   11bb0:	mov	r2, #5
   11bb4:	movw	r1, #29352	; 0x72a8
   11bb8:	mov	r0, #0
   11bbc:	movt	r1, #1
   11bc0:	bl	111e4 <dcgettext@plt>
   11bc4:	mov	r1, r0
   11bc8:	mov	r0, r7
   11bcc:	bl	13c6c <__assert_fail@plt+0x27f4>
   11bd0:	mov	r2, #5
   11bd4:	strd	r0, [sp, #48]	; 0x30
   11bd8:	movw	r1, #29376	; 0x72c0
   11bdc:	mov	r0, #0
   11be0:	movt	r1, #1
   11be4:	bl	111e4 <dcgettext@plt>
   11be8:	mov	r1, r0
   11bec:	mov	r0, r6
   11bf0:	bl	13c6c <__assert_fail@plt+0x27f4>
   11bf4:	strd	r0, [sp, #56]	; 0x38
   11bf8:	b	11b08 <__assert_fail@plt+0x690>
   11bfc:	ldr	r3, [sp, #8]
   11c00:	cmp	r3, #0
   11c04:	ldrbeq	r3, [sp, #72]	; 0x48
   11c08:	beq	11c2c <__assert_fail@plt+0x7b4>
   11c0c:	mov	r2, #5
   11c10:	movw	r1, #29672	; 0x73e8
   11c14:	movt	r1, #1
   11c18:	bl	111e4 <dcgettext@plt>
   11c1c:	bl	112ec <warnx@plt>
   11c20:	ldrb	r3, [sp, #72]	; 0x48
   11c24:	tst	r3, #8
   11c28:	bne	11b54 <__assert_fail@plt+0x6dc>
   11c2c:	mvn	r2, #0
   11c30:	tst	r3, #2
   11c34:	ldr	r3, [sp, #12]
   11c38:	add	r0, sp, #32
   11c3c:	eor	r1, r3, #1
   11c40:	and	r1, r1, #1
   11c44:	beq	11c60 <__assert_fail@plt+0x7e8>
   11c48:	bl	121dc <__assert_fail@plt+0xd64>
   11c4c:	cmp	r0, #0
   11c50:	beq	116f4 <__assert_fail@plt+0x27c>
   11c54:	movlt	r0, #1
   11c58:	movge	r0, #64	; 0x40
   11c5c:	b	116f4 <__assert_fail@plt+0x27c>
   11c60:	bl	125e4 <__assert_fail@plt+0x116c>
   11c64:	b	11c4c <__assert_fail@plt+0x7d4>
   11c68:	ands	r0, r3, #1
   11c6c:	ldr	r6, [r9]
   11c70:	bne	11e20 <__assert_fail@plt+0x9a8>
   11c74:	mov	r2, #5
   11c78:	movw	r1, #29280	; 0x7260
   11c7c:	movt	r1, #1
   11c80:	orr	r3, r3, #2
   11c84:	strb	r3, [sp, #72]	; 0x48
   11c88:	bl	111e4 <dcgettext@plt>
   11c8c:	mov	r1, r0
   11c90:	mov	r0, r6
   11c94:	bl	13fd0 <__assert_fail@plt+0x2b58>
   11c98:	mov	sl, r1
   11c9c:	mov	r7, r0
   11ca0:	str	r1, [sp, #68]	; 0x44
   11ca4:	str	r0, [sp, #64]	; 0x40
   11ca8:	bl	112a4 <__ctype_b_loc@plt>
   11cac:	mov	fp, r0
   11cb0:	mov	r0, r6
   11cb4:	bl	112d4 <strlen@plt>
   11cb8:	ldr	r3, [fp]
   11cbc:	add	r0, r6, r0
   11cc0:	ldrsb	r2, [r0, #-1]
   11cc4:	lsl	r2, r2, #1
   11cc8:	ldrh	r3, [r3, r2]
   11ccc:	tst	r3, #2048	; 0x800
   11cd0:	lslne	r3, sl, #20
   11cd4:	lslne	r2, r7, #20
   11cd8:	orrne	r3, r3, r7, lsr #12
   11cdc:	strne	r2, [sp, #64]	; 0x40
   11ce0:	strne	r3, [sp, #68]	; 0x44
   11ce4:	ldrd	sl, [sp, #40]	; 0x28
   11ce8:	ldrd	r6, [sp, #64]	; 0x40
   11cec:	mov	r2, sl
   11cf0:	mov	r3, fp
   11cf4:	mov	r0, r6
   11cf8:	mov	r1, r7
   11cfc:	bl	15ff0 <__assert_fail@plt+0x4b78>
   11d00:	orrs	r1, r2, r3
   11d04:	movwne	r1, #29304	; 0x7278
   11d08:	movne	r0, #0
   11d0c:	movtne	r1, #1
   11d10:	bne	11ea4 <__assert_fail@plt+0xa2c>
   11d14:	mov	r0, r6
   11d18:	mov	r1, r7
   11d1c:	mov	r2, sl
   11d20:	mov	r3, fp
   11d24:	bl	15ff0 <__assert_fail@plt+0x4b78>
   11d28:	strd	r0, [sp, #64]	; 0x40
   11d2c:	b	11b08 <__assert_fail@plt+0x690>
   11d30:	movw	r4, #33108	; 0x8154
   11d34:	movt	r4, #2
   11d38:	mov	r0, #0
   11d3c:	mov	r2, #5
   11d40:	movw	r1, #28580	; 0x6fa4
   11d44:	movt	r1, #1
   11d48:	ldr	r6, [r4]
   11d4c:	mov	r5, r0
   11d50:	bl	111e4 <dcgettext@plt>
   11d54:	movw	r3, #33088	; 0x8140
   11d58:	movt	r3, #2
   11d5c:	mov	r1, #1
   11d60:	ldr	r3, [r3]
   11d64:	mov	r2, r0
   11d68:	mov	r0, r6
   11d6c:	bl	11394 <__fprintf_chk@plt>
   11d70:	ldr	r0, [sl, r5]
   11d74:	cmp	r0, #0
   11d78:	beq	11dc4 <__assert_fail@plt+0x94c>
   11d7c:	ldr	r2, [pc, #416]	; 11f24 <__assert_fail@plt+0xaac>
   11d80:	b	11d94 <__assert_fail@plt+0x91c>
   11d84:	add	r2, r2, #16
   11d88:	ldr	r1, [r2, #-20]	; 0xffffffec
   11d8c:	cmp	r1, r0
   11d90:	beq	11e00 <__assert_fail@plt+0x988>
   11d94:	ldr	r3, [r2, #-16]
   11d98:	cmp	r3, #0
   11d9c:	bne	11d84 <__assert_fail@plt+0x90c>
   11da0:	mov	r3, r0
   11da4:	movw	r2, #29728	; 0x7420
   11da8:	ldr	r0, [r4]
   11dac:	movt	r2, #1
   11db0:	mov	r1, #1
   11db4:	bl	11394 <__fprintf_chk@plt>
   11db8:	add	r5, r5, #4
   11dbc:	cmp	r5, #60	; 0x3c
   11dc0:	bne	11d70 <__assert_fail@plt+0x8f8>
   11dc4:	mov	r2, #5
   11dc8:	movw	r1, #28596	; 0x6fb4
   11dcc:	mov	r0, #0
   11dd0:	movt	r1, #1
   11dd4:	ldr	r5, [r4]
   11dd8:	bl	111e4 <dcgettext@plt>
   11ddc:	mov	r1, #1
   11de0:	mov	r2, r0
   11de4:	mov	r0, r5
   11de8:	bl	11394 <__fprintf_chk@plt>
   11dec:	ldr	r1, [r4]
   11df0:	mov	r0, #10
   11df4:	bl	113dc <fputc@plt>
   11df8:	mov	r0, #1
   11dfc:	bl	112b0 <exit@plt>
   11e00:	movw	r2, #29736	; 0x7428
   11e04:	ldr	r0, [r4]
   11e08:	movt	r2, #1
   11e0c:	mov	r1, #1
   11e10:	bl	11394 <__fprintf_chk@plt>
   11e14:	b	11db8 <__assert_fail@plt+0x940>
   11e18:	str	r0, [sp, #8]
   11e1c:	b	11548 <__assert_fail@plt+0xd0>
   11e20:	mov	r2, #5
   11e24:	movw	r1, #29248	; 0x7240
   11e28:	mov	r0, #0
   11e2c:	movt	r1, #1
   11e30:	bl	111e4 <dcgettext@plt>
   11e34:	mov	r1, r0
   11e38:	mov	r0, r6
   11e3c:	bl	13c6c <__assert_fail@plt+0x27f4>
   11e40:	strd	r0, [sp, #48]	; 0x30
   11e44:	strd	r0, [sp, #56]	; 0x38
   11e48:	b	11b08 <__assert_fail@plt+0x690>
   11e4c:	movw	r1, #29604	; 0x73a4
   11e50:	movt	r1, #1
   11e54:	mov	r0, #0
   11e58:	mov	r2, #5
   11e5c:	bl	111e4 <dcgettext@plt>
   11e60:	mov	r2, r8
   11e64:	mov	r1, r0
   11e68:	mov	r0, #1
   11e6c:	bl	113c4 <errx@plt>
   11e70:	mov	r2, #5
   11e74:	movw	r1, #29208	; 0x7218
   11e78:	mov	r0, #0
   11e7c:	movt	r1, #1
   11e80:	bl	111e4 <dcgettext@plt>
   11e84:	bl	112ec <warnx@plt>
   11e88:	b	11b94 <__assert_fail@plt+0x71c>
   11e8c:	mov	r2, r6
   11e90:	ldrb	r3, [sp, #72]	; 0x48
   11e94:	b	11c30 <__assert_fail@plt+0x7b8>
   11e98:	movw	r1, #29524	; 0x7354
   11e9c:	movt	r1, #1
   11ea0:	mov	r0, #0
   11ea4:	mov	r2, #5
   11ea8:	bl	111e4 <dcgettext@plt>
   11eac:	ldrd	r2, [sp, #40]	; 0x28
   11eb0:	mov	r4, r0
   11eb4:	mov	r0, #0
   11eb8:	bl	14250 <__assert_fail@plt+0x2dd8>
   11ebc:	mov	r1, r4
   11ec0:	mov	r2, r0
   11ec4:	mov	r0, #1
   11ec8:	bl	113c4 <errx@plt>
   11ecc:	bl	111f0 <__stack_chk_fail@plt>
   11ed0:	mov	r2, #5
   11ed4:	movw	r1, #29432	; 0x72f8
   11ed8:	mov	r0, #0
   11edc:	movt	r1, #1
   11ee0:	bl	111e4 <dcgettext@plt>
   11ee4:	mov	r2, r6
   11ee8:	mov	r1, r0
   11eec:	mov	r0, #1
   11ef0:	bl	113c4 <errx@plt>
   11ef4:	mov	r2, #5
   11ef8:	movw	r1, #29396	; 0x72d4
   11efc:	mov	r0, #0
   11f00:	movt	r1, #1
   11f04:	bl	111e4 <dcgettext@plt>
   11f08:	mov	r2, r7
   11f0c:	mov	r1, r0
   11f10:	mov	r0, #1
   11f14:	bl	113c4 <errx@plt>
   11f18:			; <UNDEFINED> instruction: 0x00016cb8
   11f1c:	andeq	r6, r1, r8, ror ip
   11f20:	andeq	r6, r1, ip, lsl ip
   11f24:	andeq	r6, r1, r8, asr #25
   11f28:	mov	fp, #0
   11f2c:	mov	lr, #0
   11f30:	pop	{r1}		; (ldr r1, [sp], #4)
   11f34:	mov	r2, sp
   11f38:	push	{r2}		; (str r2, [sp, #-4]!)
   11f3c:	push	{r0}		; (str r0, [sp, #-4]!)
   11f40:	ldr	ip, [pc, #16]	; 11f58 <__assert_fail@plt+0xae0>
   11f44:	push	{ip}		; (str ip, [sp, #-4]!)
   11f48:	ldr	r0, [pc, #12]	; 11f5c <__assert_fail@plt+0xae4>
   11f4c:	ldr	r3, [pc, #12]	; 11f60 <__assert_fail@plt+0xae8>
   11f50:	bl	11274 <__libc_start_main@plt>
   11f54:	bl	11448 <abort@plt>
   11f58:	andeq	r6, r1, r0, ror #23
   11f5c:	andeq	r1, r1, r8, lsl #9
   11f60:	andeq	r6, r1, ip, ror fp
   11f64:	ldr	r3, [pc, #20]	; 11f80 <__assert_fail@plt+0xb08>
   11f68:	ldr	r2, [pc, #20]	; 11f84 <__assert_fail@plt+0xb0c>
   11f6c:	add	r3, pc, r3
   11f70:	ldr	r2, [r3, r2]
   11f74:	cmp	r2, #0
   11f78:	bxeq	lr
   11f7c:	b	1128c <__gmon_start__@plt>
   11f80:	andeq	r6, r1, ip, lsl #1
   11f84:	andeq	r0, r0, r0, lsr r1
   11f88:	push	{r3, lr}
   11f8c:	movw	r0, #33084	; 0x813c
   11f90:	ldr	r3, [pc, #36]	; 11fbc <__assert_fail@plt+0xb44>
   11f94:	movt	r0, #2
   11f98:	rsb	r3, r0, r3
   11f9c:	cmp	r3, #6
   11fa0:	popls	{r3, pc}
   11fa4:	movw	r3, #0
   11fa8:	movt	r3, #0
   11fac:	cmp	r3, #0
   11fb0:	popeq	{r3, pc}
   11fb4:	blx	r3
   11fb8:	pop	{r3, pc}
   11fbc:	andeq	r8, r2, pc, lsr r1
   11fc0:	push	{r3, lr}
   11fc4:	movw	r0, #33084	; 0x813c
   11fc8:	movw	r3, #33084	; 0x813c
   11fcc:	movt	r0, #2
   11fd0:	movt	r3, #2
   11fd4:	rsb	r3, r0, r3
   11fd8:	asr	r3, r3, #2
   11fdc:	add	r3, r3, r3, lsr #31
   11fe0:	asrs	r1, r3, #1
   11fe4:	popeq	{r3, pc}
   11fe8:	movw	r2, #0
   11fec:	movt	r2, #0
   11ff0:	cmp	r2, #0
   11ff4:	popeq	{r3, pc}
   11ff8:	blx	r2
   11ffc:	pop	{r3, pc}
   12000:	push	{r4, lr}
   12004:	movw	r4, #33124	; 0x8164
   12008:	movt	r4, #2
   1200c:	ldrb	r3, [r4]
   12010:	cmp	r3, #0
   12014:	popne	{r4, pc}
   12018:	bl	11f88 <__assert_fail@plt+0xb10>
   1201c:	mov	r3, #1
   12020:	strb	r3, [r4]
   12024:	pop	{r4, pc}
   12028:	movw	r0, #32516	; 0x7f04
   1202c:	movt	r0, #2
   12030:	push	{r3, lr}
   12034:	ldr	r3, [r0]
   12038:	cmp	r3, #0
   1203c:	beq	12054 <__assert_fail@plt+0xbdc>
   12040:	movw	r3, #0
   12044:	movt	r3, #0
   12048:	cmp	r3, #0
   1204c:	beq	12054 <__assert_fail@plt+0xbdc>
   12050:	blx	r3
   12054:	pop	{r3, lr}
   12058:	b	11fc0 <__assert_fail@plt+0xb48>
   1205c:	push	{r4, lr}
   12060:	add	r1, r0, #19
   12064:	mov	r4, r0
   12068:	mov	r2, #6
   1206c:	movw	r0, #28344	; 0x6eb8
   12070:	movt	r0, #1
   12074:	bl	1143c <strncmp@plt>
   12078:	cmp	r0, #0
   1207c:	beq	12088 <__assert_fail@plt+0xc10>
   12080:	mov	r0, #0
   12084:	pop	{r4, pc}
   12088:	add	r0, r4, #25
   1208c:	pop	{r4, lr}
   12090:	b	139cc <__assert_fail@plt+0x2554>
   12094:	push	{r4, r5, lr}
   12098:	movw	r4, #33096	; 0x8148
   1209c:	movt	r4, #2
   120a0:	sub	sp, sp, #8192	; 0x2000
   120a4:	sub	sp, sp, #12
   120a8:	mov	r5, r0
   120ac:	ldr	ip, [r4]
   120b0:	add	lr, sp, #8192	; 0x2000
   120b4:	mov	r1, r0
   120b8:	movw	r2, #8284	; 0x205c
   120bc:	movw	r0, #27960	; 0x6d38
   120c0:	movt	r2, #1
   120c4:	movt	r0, #1
   120c8:	movw	r3, #4544	; 0x11c0
   120cc:	movt	r3, #1
   120d0:	str	ip, [lr, #4]
   120d4:	bl	11424 <scandir64@plt>
   120d8:	cmp	r0, #0
   120dc:	str	r0, [r5, #4]
   120e0:	ble	12130 <__assert_fail@plt+0xcb8>
   120e4:	mov	r1, #8192	; 0x2000
   120e8:	add	r0, sp, #4
   120ec:	movw	r2, #28008	; 0x6d68
   120f0:	movt	r2, #1
   120f4:	bl	12fa4 <__assert_fail@plt+0x1b2c>
   120f8:	mov	r1, #0
   120fc:	mov	r2, #16
   12100:	mov	r3, r1
   12104:	add	r0, sp, #4
   12108:	bl	111b4 <__strtoull_internal@plt>
   1210c:	add	r3, sp, #8192	; 0x2000
   12110:	ldr	r2, [r3, #4]
   12114:	ldr	r3, [r4]
   12118:	cmp	r2, r3
   1211c:	strd	r0, [r5, #8]
   12120:	bne	12158 <__assert_fail@plt+0xce0>
   12124:	add	sp, sp, #8192	; 0x2000
   12128:	add	sp, sp, #12
   1212c:	pop	{r4, r5, pc}
   12130:	mov	r2, #5
   12134:	movw	r1, #27988	; 0x6d54
   12138:	mov	r0, #0
   1213c:	movt	r1, #1
   12140:	bl	111e4 <dcgettext@plt>
   12144:	movw	r2, #27960	; 0x6d38
   12148:	movt	r2, #1
   1214c:	mov	r1, r0
   12150:	mov	r0, #1
   12154:	bl	1122c <err@plt>
   12158:	bl	111f0 <__stack_chk_fail@plt>
   1215c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12160:	mov	r4, r0
   12164:	mov	r5, r1
   12168:	mov	r9, r3
   1216c:	mul	r3, r0, r3
   12170:	sub	sp, sp, #32
   12174:	mla	r3, r2, r5, r3
   12178:	mov	sl, r2
   1217c:	umull	r6, r7, r4, r2
   12180:	movw	r1, #28052	; 0x6d94
   12184:	mov	r2, #5
   12188:	movt	r1, #1
   1218c:	mov	r0, #0
   12190:	add	r7, r3, r7
   12194:	ldr	r8, [sp, #64]	; 0x40
   12198:	bl	111e4 <dcgettext@plt>
   1219c:	subs	r4, r4, #1
   121a0:	str	sl, [sp, #8]
   121a4:	strd	r6, [sp, #16]
   121a8:	sbc	r5, r5, #0
   121ac:	adds	r6, r6, r4
   121b0:	str	r9, [sp, #12]
   121b4:	adc	r7, r7, r5
   121b8:	mov	r1, #8192	; 0x2000
   121bc:	strd	r6, [sp, #24]
   121c0:	mov	r2, #1
   121c4:	mvn	r3, #0
   121c8:	str	r0, [sp]
   121cc:	mov	r0, r8
   121d0:	bl	11460 <__snprintf_chk@plt>
   121d4:	add	sp, sp, #32
   121d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   121dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121e0:	movw	sl, #33096	; 0x8148
   121e4:	ldrd	r4, [r0, #32]
   121e8:	sub	sp, sp, #16384	; 0x4000
   121ec:	movt	sl, #2
   121f0:	sub	sp, sp, #60	; 0x3c
   121f4:	cmp	r1, #0
   121f8:	mov	fp, r0
   121fc:	ldr	r3, [sl]
   12200:	strd	r4, [sp, #16]
   12204:	add	r5, sp, #16384	; 0x4000
   12208:	str	r2, [sp, #28]
   1220c:	str	r3, [r5, #52]	; 0x34
   12210:	beq	124e8 <__assert_fail@plt+0x1070>
   12214:	mvn	ip, r2
   12218:	lsr	ip, ip, #31
   1221c:	str	ip, [sp, #36]	; 0x24
   12220:	cmp	ip, #0
   12224:	beq	125d8 <__assert_fail@plt+0x1160>
   12228:	movw	r3, #28100	; 0x6dc4
   1222c:	cmp	r2, #4
   12230:	movt	r3, #1
   12234:	movw	r8, #28124	; 0x6ddc
   12238:	movt	r8, #1
   1223c:	moveq	r8, r3
   12240:	ldr	r3, [fp, #4]
   12244:	mov	r9, #1
   12248:	mov	r6, #0
   1224c:	cmp	r3, r6
   12250:	ble	1241c <__assert_fail@plt+0xfa4>
   12254:	ldrd	r4, [sp, #16]
   12258:	orrs	r5, r4, r5
   1225c:	beq	12428 <__assert_fail@plt+0xfb0>
   12260:	movw	ip, #33112	; 0x8158
   12264:	movw	r4, #28116	; 0x6dd4
   12268:	movt	ip, #2
   1226c:	movt	r4, #1
   12270:	movw	r5, #28100	; 0x6dc4
   12274:	str	ip, [sp, #32]
   12278:	movt	r5, #1
   1227c:	str	r4, [sp, #40]	; 0x28
   12280:	str	r5, [sp, #44]	; 0x2c
   12284:	b	122ac <__assert_fail@plt+0xe34>
   12288:	mvn	r3, #0
   1228c:	adds	r6, r6, r3
   12290:	bmi	1241c <__assert_fail@plt+0xfa4>
   12294:	ldr	r3, [fp, #4]
   12298:	cmp	r3, r6
   1229c:	ble	1241c <__assert_fail@plt+0xfa4>
   122a0:	ldrd	r4, [sp, #16]
   122a4:	orrs	r5, r4, r5
   122a8:	beq	12428 <__assert_fail@plt+0xfb0>
   122ac:	ldr	r3, [fp]
   122b0:	mov	r2, #5
   122b4:	movw	r1, #28140	; 0x6dec
   122b8:	mov	r0, #0
   122bc:	movt	r1, #1
   122c0:	ldr	r4, [r3, r6, lsl #2]
   122c4:	bl	111e4 <dcgettext@plt>
   122c8:	add	r7, r4, #19
   122cc:	mov	r1, r0
   122d0:	add	r0, r4, #25
   122d4:	bl	13c6c <__assert_fail@plt+0x27f4>
   122d8:	mov	r3, r7
   122dc:	movw	r2, #28164	; 0x6e04
   122e0:	movt	r2, #1
   122e4:	mov	r4, r0
   122e8:	mov	r5, r1
   122ec:	add	r0, sp, #52	; 0x34
   122f0:	mov	r1, #8192	; 0x2000
   122f4:	bl	12fa4 <__assert_fail@plt+0x1b2c>
   122f8:	mov	r0, r8
   122fc:	add	r1, sp, #52	; 0x34
   12300:	mov	r2, #6
   12304:	bl	1143c <strncmp@plt>
   12308:	cmp	r0, #0
   1230c:	beq	12408 <__assert_fail@plt+0xf90>
   12310:	ldrb	r3, [fp, #40]	; 0x28
   12314:	tst	r3, #8
   12318:	beq	12368 <__assert_fail@plt+0xef0>
   1231c:	movw	r2, #28200	; 0x6e28
   12320:	add	r0, sp, #52	; 0x34
   12324:	movt	r2, #1
   12328:	mov	r1, #8192	; 0x2000
   1232c:	mov	r3, r7
   12330:	bl	12fa4 <__assert_fail@plt+0x1b2c>
   12334:	ldr	ip, [sp, #36]	; 0x24
   12338:	cmp	ip, #0
   1233c:	beq	124bc <__assert_fail@plt+0x1044>
   12340:	ldr	ip, [sp, #28]
   12344:	movw	r3, #27680	; 0x6c20
   12348:	cmp	r9, #0
   1234c:	movt	r3, #1
   12350:	ldr	r1, [r3, ip, lsl #2]
   12354:	beq	12494 <__assert_fail@plt+0x101c>
   12358:	add	r0, sp, #52	; 0x34
   1235c:	bl	1113c <strcasestr@plt>
   12360:	cmp	r0, #0
   12364:	beq	12410 <__assert_fail@plt+0xf98>
   12368:	mov	r3, r5
   1236c:	add	r5, sp, #8192	; 0x2000
   12370:	add	r5, r5, #56	; 0x38
   12374:	ldrd	r0, [fp, #8]
   12378:	mov	r2, r4
   1237c:	sub	r4, r5, #4
   12380:	str	r4, [sp]
   12384:	bl	1215c <__assert_fail@plt+0xce4>
   12388:	mov	r0, r8
   1238c:	mov	r2, r7
   12390:	movw	r1, #28164	; 0x6e04
   12394:	movt	r1, #1
   12398:	bl	132b0 <__assert_fail@plt+0x1e38>
   1239c:	cmn	r0, #1
   123a0:	beq	1244c <__assert_fail@plt+0xfd4>
   123a4:	cmp	r0, #0
   123a8:	bne	12408 <__assert_fail@plt+0xf90>
   123ac:	ldrb	r3, [fp, #40]	; 0x28
   123b0:	tst	r3, #4
   123b4:	beq	123f8 <__assert_fail@plt+0xf80>
   123b8:	cmp	r9, #0
   123bc:	mov	r2, #5
   123c0:	ldrne	ip, [sp, #32]
   123c4:	movwne	r1, #28292	; 0x6e84
   123c8:	ldreq	ip, [sp, #32]
   123cc:	movweq	r1, #28304	; 0x6e90
   123d0:	movtne	r1, #1
   123d4:	movteq	r1, #1
   123d8:	ldrne	r5, [ip]
   123dc:	ldreq	r5, [ip]
   123e0:	bl	111e4 <dcgettext@plt>
   123e4:	mov	r3, r4
   123e8:	mov	r1, #1
   123ec:	mov	r2, r0
   123f0:	mov	r0, r5
   123f4:	bl	11394 <__fprintf_chk@plt>
   123f8:	ldrd	r4, [sp, #16]
   123fc:	subs	r4, r4, #1
   12400:	sbc	r5, r5, #0
   12404:	strd	r4, [sp, #16]
   12408:	cmp	r9, #0
   1240c:	beq	12288 <__assert_fail@plt+0xe10>
   12410:	mov	r3, #1
   12414:	adds	r6, r6, r3
   12418:	bpl	12294 <__assert_fail@plt+0xe1c>
   1241c:	ldrd	r4, [sp, #16]
   12420:	orrs	r5, r4, r5
   12424:	bne	1254c <__assert_fail@plt+0x10d4>
   12428:	mov	r0, #0
   1242c:	add	r5, sp, #16384	; 0x4000
   12430:	ldr	r2, [r5, #52]	; 0x34
   12434:	ldr	r3, [sl]
   12438:	cmp	r2, r3
   1243c:	bne	125d4 <__assert_fail@plt+0x115c>
   12440:	add	sp, sp, #16384	; 0x4000
   12444:	add	sp, sp, #60	; 0x3c
   12448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1244c:	ldrb	r3, [fp, #40]	; 0x28
   12450:	tst	r3, #4
   12454:	beq	12408 <__assert_fail@plt+0xf90>
   12458:	cmp	r9, #0
   1245c:	beq	12518 <__assert_fail@plt+0x10a0>
   12460:	ldr	ip, [sp, #32]
   12464:	mov	r2, #5
   12468:	movw	r1, #28252	; 0x6e5c
   1246c:	mov	r0, #0
   12470:	movt	r1, #1
   12474:	ldr	r5, [ip]
   12478:	bl	111e4 <dcgettext@plt>
   1247c:	mov	r3, r4
   12480:	mov	r1, #1
   12484:	mov	r2, r0
   12488:	mov	r0, r5
   1248c:	bl	11394 <__fprintf_chk@plt>
   12490:	b	12408 <__assert_fail@plt+0xf90>
   12494:	mov	r0, r1
   12498:	str	r1, [sp, #12]
   1249c:	bl	112d4 <strlen@plt>
   124a0:	ldr	r1, [sp, #12]
   124a4:	mov	r2, r0
   124a8:	add	r0, sp, #52	; 0x34
   124ac:	bl	11304 <strncasecmp@plt>
   124b0:	cmp	r0, #0
   124b4:	bne	12288 <__assert_fail@plt+0xe10>
   124b8:	b	12368 <__assert_fail@plt+0xef0>
   124bc:	cmp	r9, #0
   124c0:	beq	12368 <__assert_fail@plt+0xef0>
   124c4:	movw	r1, #28244	; 0x6e54
   124c8:	add	r0, sp, #52	; 0x34
   124cc:	movt	r1, #1
   124d0:	bl	1113c <strcasestr@plt>
   124d4:	ldr	ip, [sp, #44]	; 0x2c
   124d8:	ldr	r8, [sp, #40]	; 0x28
   124dc:	cmp	r0, #0
   124e0:	movne	r8, ip
   124e4:	b	12368 <__assert_fail@plt+0xef0>
   124e8:	ldr	r3, [r0, #4]
   124ec:	ldr	ip, [sp, #28]
   124f0:	subs	r6, r3, #1
   124f4:	mvn	ip, ip
   124f8:	movmi	r9, r1
   124fc:	lsr	ip, ip, #31
   12500:	str	ip, [sp, #36]	; 0x24
   12504:	bmi	1241c <__assert_fail@plt+0xfa4>
   12508:	movw	r8, #28092	; 0x6dbc
   1250c:	mov	r9, r1
   12510:	movt	r8, #1
   12514:	b	1224c <__assert_fail@plt+0xdd4>
   12518:	ldr	ip, [sp, #32]
   1251c:	mov	r0, r9
   12520:	mov	r2, #5
   12524:	movw	r1, #28272	; 0x6e70
   12528:	movt	r1, #1
   1252c:	ldr	r5, [ip]
   12530:	bl	111e4 <dcgettext@plt>
   12534:	mov	r3, r4
   12538:	mov	r1, #1
   1253c:	mov	r2, r0
   12540:	mov	r0, r5
   12544:	bl	11394 <__fprintf_chk@plt>
   12548:	b	12288 <__assert_fail@plt+0xe10>
   1254c:	ldrd	r4, [sp, #16]
   12550:	mov	r0, #0
   12554:	ldrd	r2, [fp, #32]
   12558:	ldr	lr, [fp, #12]
   1255c:	ldr	r1, [fp, #8]
   12560:	subs	r2, r2, r4
   12564:	sbc	r3, r3, r5
   12568:	mul	lr, r2, lr
   1256c:	mla	lr, r1, r3, lr
   12570:	umull	r2, r3, r1, r2
   12574:	add	r3, lr, r3
   12578:	bl	14250 <__assert_fail@plt+0x2dd8>
   1257c:	cmp	r9, #0
   12580:	movwne	r1, #28320	; 0x6ea0
   12584:	movweq	r1, #28352	; 0x6ec0
   12588:	movne	r2, #5
   1258c:	moveq	r2, #5
   12590:	mov	r4, r0
   12594:	movtne	r1, #1
   12598:	movteq	r1, #1
   1259c:	movne	r0, #0
   125a0:	moveq	r0, r9
   125a4:	bl	111e4 <dcgettext@plt>
   125a8:	mov	r1, r4
   125ac:	bl	112ec <warnx@plt>
   125b0:	mov	r0, r4
   125b4:	bl	1116c <free@plt>
   125b8:	ldrd	r2, [fp, #32]
   125bc:	ldrd	r4, [sp, #16]
   125c0:	cmp	r3, r5
   125c4:	cmpeq	r2, r4
   125c8:	movne	r0, #1
   125cc:	mvneq	r0, #0
   125d0:	b	1242c <__assert_fail@plt+0xfb4>
   125d4:	bl	111f0 <__stack_chk_fail@plt>
   125d8:	movw	r8, #28116	; 0x6dd4
   125dc:	movt	r8, #1
   125e0:	b	12240 <__assert_fail@plt+0xdc8>
   125e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125e8:	sub	sp, sp, #16384	; 0x4000
   125ec:	sub	sp, sp, #60	; 0x3c
   125f0:	ldrd	sl, [r0, #24]
   125f4:	movw	r5, #33096	; 0x8148
   125f8:	movt	r5, #2
   125fc:	str	r2, [sp, #24]
   12600:	adds	r2, sl, #1
   12604:	adc	r3, fp, #0
   12608:	strd	r2, [sp, #8]
   1260c:	ldrd	sl, [sp, #8]
   12610:	mov	r7, r0
   12614:	ldrd	r8, [r0, #16]
   12618:	ldr	r3, [r5]
   1261c:	subs	sl, sl, r8
   12620:	sbc	fp, fp, r9
   12624:	cmp	r1, #0
   12628:	strd	sl, [sp, #8]
   1262c:	add	fp, sp, #16384	; 0x4000
   12630:	str	r1, [sp, #40]	; 0x28
   12634:	str	r3, [fp, #52]	; 0x34
   12638:	beq	1297c <__assert_fail@plt+0x1504>
   1263c:	ldr	sl, [sp, #24]
   12640:	mvn	sl, sl
   12644:	lsr	sl, sl, #31
   12648:	str	sl, [sp, #28]
   1264c:	cmp	sl, #0
   12650:	beq	12a50 <__assert_fail@plt+0x15d8>
   12654:	ldr	fp, [sp, #24]
   12658:	movw	r3, #28100	; 0x6dc4
   1265c:	movt	r3, #1
   12660:	movw	r9, #28124	; 0x6ddc
   12664:	cmp	fp, #4
   12668:	movt	r9, #1
   1266c:	moveq	r9, r3
   12670:	ldr	r3, [r7, #4]
   12674:	cmp	r3, #0
   12678:	ble	128b8 <__assert_fail@plt+0x1440>
   1267c:	movw	fp, #33112	; 0x8158
   12680:	mov	r8, #0
   12684:	movt	fp, #2
   12688:	str	r5, [sp, #44]	; 0x2c
   1268c:	str	fp, [sp, #20]
   12690:	movw	fp, #28116	; 0x6dd4
   12694:	movt	fp, #1
   12698:	str	fp, [sp, #32]
   1269c:	movw	fp, #28100	; 0x6dc4
   126a0:	movt	fp, #1
   126a4:	str	fp, [sp, #36]	; 0x24
   126a8:	b	126e8 <__assert_fail@plt+0x1270>
   126ac:	tst	r3, #4
   126b0:	beq	126c8 <__assert_fail@plt+0x1250>
   126b4:	cmp	sl, #0
   126b8:	bne	1299c <__assert_fail@plt+0x1524>
   126bc:	ldr	r3, [sp, #40]	; 0x28
   126c0:	cmp	r3, #0
   126c4:	beq	129f8 <__assert_fail@plt+0x1580>
   126c8:	ldrd	r0, [sp, #8]
   126cc:	subs	r0, r0, #1
   126d0:	sbc	r1, r1, #0
   126d4:	strd	r0, [sp, #8]
   126d8:	ldr	r3, [r7, #4]
   126dc:	add	r8, r8, #1
   126e0:	cmp	r3, r8
   126e4:	ble	128b4 <__assert_fail@plt+0x143c>
   126e8:	ldr	r3, [r7]
   126ec:	mov	r2, #5
   126f0:	movw	r1, #28140	; 0x6dec
   126f4:	mov	r0, #0
   126f8:	movt	r1, #1
   126fc:	ldr	r6, [r3, r8, lsl #2]
   12700:	bl	111e4 <dcgettext@plt>
   12704:	mov	r1, r0
   12708:	add	r0, r6, #25
   1270c:	bl	13c6c <__assert_fail@plt+0x27f4>
   12710:	ldrd	r4, [r7, #16]
   12714:	cmp	r1, r5
   12718:	cmpeq	r0, r4
   1271c:	bcc	126d8 <__assert_fail@plt+0x1260>
   12720:	ldrd	r4, [r7, #24]
   12724:	cmp	r1, r5
   12728:	cmpeq	r0, r4
   1272c:	bhi	128b4 <__assert_fail@plt+0x143c>
   12730:	ldrd	r4, [r7, #8]
   12734:	mov	r2, r0
   12738:	add	r0, sp, #8192	; 0x2000
   1273c:	add	r6, r6, #19
   12740:	add	r0, r0, #56	; 0x38
   12744:	mov	r3, r1
   12748:	sub	fp, r0, #4
   1274c:	mov	r1, r5
   12750:	mov	r0, r4
   12754:	str	fp, [sp]
   12758:	bl	1215c <__assert_fail@plt+0xce4>
   1275c:	mov	r3, r6
   12760:	mov	r1, #8192	; 0x2000
   12764:	add	r0, sp, #52	; 0x34
   12768:	movw	r2, #28164	; 0x6e04
   1276c:	movt	r2, #1
   12770:	bl	12fa4 <__assert_fail@plt+0x1b2c>
   12774:	mov	r0, r9
   12778:	add	r1, sp, #52	; 0x34
   1277c:	mov	r2, #6
   12780:	bl	1143c <strncmp@plt>
   12784:	ldrb	r3, [r7, #40]	; 0x28
   12788:	cmp	r0, #0
   1278c:	beq	126ac <__assert_fail@plt+0x1234>
   12790:	tst	r3, #8
   12794:	beq	12828 <__assert_fail@plt+0x13b0>
   12798:	mov	r1, #8192	; 0x2000
   1279c:	movw	r2, #28200	; 0x6e28
   127a0:	add	r0, sp, #52	; 0x34
   127a4:	movt	r2, #1
   127a8:	mov	r3, r6
   127ac:	bl	12fa4 <__assert_fail@plt+0x1b2c>
   127b0:	ldr	r1, [sp, #28]
   127b4:	cmp	r1, #0
   127b8:	beq	129cc <__assert_fail@plt+0x1554>
   127bc:	ldr	r2, [sp, #24]
   127c0:	movw	r3, #27680	; 0x6c20
   127c4:	cmp	sl, #0
   127c8:	movt	r3, #1
   127cc:	ldr	r4, [r3, r2, lsl #2]
   127d0:	beq	1293c <__assert_fail@plt+0x14c4>
   127d4:	add	r0, sp, #52	; 0x34
   127d8:	mov	r1, r4
   127dc:	bl	1113c <strcasestr@plt>
   127e0:	cmp	r0, #0
   127e4:	beq	12a30 <__assert_fail@plt+0x15b8>
   127e8:	mov	r2, r6
   127ec:	movw	r1, #28164	; 0x6e04
   127f0:	mov	r0, r9
   127f4:	movt	r1, #1
   127f8:	bl	132b0 <__assert_fail@plt+0x1e38>
   127fc:	cmn	r0, #1
   12800:	mov	r4, r0
   12804:	bne	12848 <__assert_fail@plt+0x13d0>
   12808:	mov	r2, #5
   1280c:	movw	r1, #28496	; 0x6f50
   12810:	mov	r0, #0
   12814:	movt	r1, #1
   12818:	bl	111e4 <dcgettext@plt>
   1281c:	mov	r1, fp
   12820:	bl	113d0 <warn@plt>
   12824:	b	126d8 <__assert_fail@plt+0x1260>
   12828:	mov	r2, r6
   1282c:	movw	r1, #28164	; 0x6e04
   12830:	mov	r0, r9
   12834:	movt	r1, #1
   12838:	bl	132b0 <__assert_fail@plt+0x1e38>
   1283c:	cmn	r0, #1
   12840:	mov	r4, r0
   12844:	beq	12914 <__assert_fail@plt+0x149c>
   12848:	ldrb	r3, [r7, #40]	; 0x28
   1284c:	tst	r3, #4
   12850:	beq	1289c <__assert_fail@plt+0x1424>
   12854:	cmp	sl, #0
   12858:	ldrne	r0, [sp, #20]
   1285c:	movwne	r1, #28292	; 0x6e84
   12860:	ldreq	r2, [sp, #20]
   12864:	movweq	r1, #28304	; 0x6e90
   12868:	movtne	r1, #1
   1286c:	movteq	r1, #1
   12870:	ldrne	r5, [r0]
   12874:	moveq	r0, sl
   12878:	ldreq	r5, [r2]
   1287c:	movne	r0, #0
   12880:	mov	r2, #5
   12884:	bl	111e4 <dcgettext@plt>
   12888:	mov	r3, fp
   1288c:	mov	r1, #1
   12890:	mov	r2, r0
   12894:	mov	r0, r5
   12898:	bl	11394 <__fprintf_chk@plt>
   1289c:	cmp	r4, #0
   128a0:	beq	126c8 <__assert_fail@plt+0x1250>
   128a4:	ldr	r3, [r7, #4]
   128a8:	add	r8, r8, #1
   128ac:	cmp	r3, r8
   128b0:	bgt	126e8 <__assert_fail@plt+0x1270>
   128b4:	ldr	r5, [sp, #44]	; 0x2c
   128b8:	ldrd	sl, [sp, #8]
   128bc:	orrs	fp, sl, fp
   128c0:	moveq	r0, #0
   128c4:	beq	128f4 <__assert_fail@plt+0x147c>
   128c8:	ldrd	r2, [r7, #24]
   128cc:	ldrd	r0, [r7, #16]
   128d0:	adds	r2, r2, #1
   128d4:	ldrd	sl, [sp, #8]
   128d8:	adc	r3, r3, #0
   128dc:	subs	r2, r2, r0
   128e0:	sbc	r3, r3, r1
   128e4:	cmp	r3, fp
   128e8:	cmpeq	r2, sl
   128ec:	movne	r0, #1
   128f0:	mvneq	r0, #0
   128f4:	add	fp, sp, #16384	; 0x4000
   128f8:	ldr	r2, [fp, #52]	; 0x34
   128fc:	ldr	r3, [r5]
   12900:	cmp	r2, r3
   12904:	bne	12a4c <__assert_fail@plt+0x15d4>
   12908:	add	sp, sp, #16384	; 0x4000
   1290c:	add	sp, sp, #60	; 0x3c
   12910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12914:	cmp	sl, #0
   12918:	bne	12808 <__assert_fail@plt+0x1390>
   1291c:	mov	r2, #5
   12920:	movw	r1, #28516	; 0x6f64
   12924:	mov	r0, #0
   12928:	movt	r1, #1
   1292c:	bl	111e4 <dcgettext@plt>
   12930:	mov	r1, fp
   12934:	bl	113d0 <warn@plt>
   12938:	b	126d8 <__assert_fail@plt+0x1260>
   1293c:	mov	r0, r4
   12940:	bl	112d4 <strlen@plt>
   12944:	mov	r1, r4
   12948:	mov	r2, r0
   1294c:	add	r0, sp, #52	; 0x34
   12950:	bl	11304 <strncasecmp@plt>
   12954:	cmp	r0, #0
   12958:	beq	129d4 <__assert_fail@plt+0x155c>
   1295c:	mov	r0, sl
   12960:	mov	r2, #5
   12964:	movw	r1, #28460	; 0x6f2c
   12968:	movt	r1, #1
   1296c:	bl	111e4 <dcgettext@plt>
   12970:	mov	r1, fp
   12974:	bl	112ec <warnx@plt>
   12978:	b	126d8 <__assert_fail@plt+0x1260>
   1297c:	ldr	sl, [sp, #24]
   12980:	movw	r9, #28092	; 0x6dbc
   12984:	movt	r9, #1
   12988:	mvn	sl, sl
   1298c:	lsr	sl, sl, #31
   12990:	str	sl, [sp, #28]
   12994:	ldr	sl, [sp, #40]	; 0x28
   12998:	b	12670 <__assert_fail@plt+0x11f8>
   1299c:	ldr	r2, [sp, #20]
   129a0:	movw	r1, #28384	; 0x6ee0
   129a4:	movt	r1, #1
   129a8:	ldr	r4, [r2]
   129ac:	mov	r2, #5
   129b0:	bl	111e4 <dcgettext@plt>
   129b4:	mov	r3, fp
   129b8:	mov	r1, #1
   129bc:	mov	r2, r0
   129c0:	mov	r0, r4
   129c4:	bl	11394 <__fprintf_chk@plt>
   129c8:	b	126c8 <__assert_fail@plt+0x1250>
   129cc:	cmp	sl, #0
   129d0:	bne	12a0c <__assert_fail@plt+0x1594>
   129d4:	mov	r2, r6
   129d8:	movw	r1, #28164	; 0x6e04
   129dc:	mov	r0, r9
   129e0:	movt	r1, #1
   129e4:	bl	132b0 <__assert_fail@plt+0x1e38>
   129e8:	cmn	r0, #1
   129ec:	mov	r4, r0
   129f0:	bne	12848 <__assert_fail@plt+0x13d0>
   129f4:	b	1291c <__assert_fail@plt+0x14a4>
   129f8:	ldr	r2, [sp, #20]
   129fc:	movw	r1, #28404	; 0x6ef4
   12a00:	movt	r1, #1
   12a04:	ldr	r4, [r2]
   12a08:	b	129ac <__assert_fail@plt+0x1534>
   12a0c:	add	r0, sp, #52	; 0x34
   12a10:	movw	r1, #28244	; 0x6e54
   12a14:	movt	r1, #1
   12a18:	bl	1113c <strcasestr@plt>
   12a1c:	ldr	r3, [sp, #36]	; 0x24
   12a20:	ldr	r9, [sp, #32]
   12a24:	cmp	r0, #0
   12a28:	movne	r9, r3
   12a2c:	b	127e8 <__assert_fail@plt+0x1370>
   12a30:	mov	r2, #5
   12a34:	movw	r1, #28428	; 0x6f0c
   12a38:	movt	r1, #1
   12a3c:	bl	111e4 <dcgettext@plt>
   12a40:	mov	r1, fp
   12a44:	bl	112ec <warnx@plt>
   12a48:	b	126d8 <__assert_fail@plt+0x1260>
   12a4c:	bl	111f0 <__stack_chk_fail@plt>
   12a50:	movw	r9, #28116	; 0x6dd4
   12a54:	mov	sl, #1
   12a58:	movt	r9, #1
   12a5c:	b	12670 <__assert_fail@plt+0x11f8>
   12a60:	movw	r3, #33112	; 0x8158
   12a64:	movt	r3, #2
   12a68:	push	{r4, r5, r6, lr}
   12a6c:	ldr	r4, [r3]
   12a70:	mov	r0, r4
   12a74:	bl	11250 <__fpending@plt>
   12a78:	mov	r6, r0
   12a7c:	mov	r0, r4
   12a80:	bl	11184 <ferror@plt>
   12a84:	mov	r5, r0
   12a88:	mov	r0, r4
   12a8c:	bl	113ac <fclose@plt>
   12a90:	adds	r4, r0, #0
   12a94:	movne	r4, #1
   12a98:	cmp	r5, #0
   12a9c:	bne	12b14 <__assert_fail@plt+0x169c>
   12aa0:	cmp	r4, #0
   12aa4:	beq	12ac0 <__assert_fail@plt+0x1648>
   12aa8:	cmp	r6, #0
   12aac:	beq	12b64 <__assert_fail@plt+0x16ec>
   12ab0:	bl	112f8 <__errno_location@plt>
   12ab4:	ldr	r3, [r0]
   12ab8:	cmp	r3, #32
   12abc:	bne	12b78 <__assert_fail@plt+0x1700>
   12ac0:	movw	r3, #33108	; 0x8154
   12ac4:	movt	r3, #2
   12ac8:	ldr	r4, [r3]
   12acc:	mov	r0, r4
   12ad0:	bl	11250 <__fpending@plt>
   12ad4:	mov	r6, r0
   12ad8:	mov	r0, r4
   12adc:	bl	11184 <ferror@plt>
   12ae0:	mov	r5, r0
   12ae4:	mov	r0, r4
   12ae8:	bl	113ac <fclose@plt>
   12aec:	adds	r4, r0, #0
   12af0:	movne	r4, #1
   12af4:	cmp	r5, #0
   12af8:	beq	12b40 <__assert_fail@plt+0x16c8>
   12afc:	cmp	r4, #0
   12b00:	bne	12b0c <__assert_fail@plt+0x1694>
   12b04:	bl	112f8 <__errno_location@plt>
   12b08:	str	r4, [r0]
   12b0c:	mov	r0, #1
   12b10:	bl	11190 <_exit@plt>
   12b14:	cmp	r4, #0
   12b18:	bne	12ab0 <__assert_fail@plt+0x1638>
   12b1c:	bl	112f8 <__errno_location@plt>
   12b20:	str	r4, [r0]
   12b24:	mov	r2, #5
   12b28:	movw	r1, #28536	; 0x6f78
   12b2c:	mov	r0, #0
   12b30:	movt	r1, #1
   12b34:	bl	111e4 <dcgettext@plt>
   12b38:	bl	112ec <warnx@plt>
   12b3c:	b	12b0c <__assert_fail@plt+0x1694>
   12b40:	cmp	r4, #0
   12b44:	popeq	{r4, r5, r6, pc}
   12b48:	cmp	r6, #0
   12b4c:	bne	12b0c <__assert_fail@plt+0x1694>
   12b50:	bl	112f8 <__errno_location@plt>
   12b54:	ldr	r3, [r0]
   12b58:	cmp	r3, #9
   12b5c:	bne	12b0c <__assert_fail@plt+0x1694>
   12b60:	pop	{r4, r5, r6, pc}
   12b64:	bl	112f8 <__errno_location@plt>
   12b68:	ldr	r3, [r0]
   12b6c:	cmp	r3, #9
   12b70:	bne	12ab8 <__assert_fail@plt+0x1640>
   12b74:	b	12ac0 <__assert_fail@plt+0x1648>
   12b78:	cmp	r3, #0
   12b7c:	beq	12b24 <__assert_fail@plt+0x16ac>
   12b80:	mov	r2, #5
   12b84:	movw	r1, #28536	; 0x6f78
   12b88:	mov	r0, #0
   12b8c:	movt	r1, #1
   12b90:	bl	111e4 <dcgettext@plt>
   12b94:	bl	113d0 <warn@plt>
   12b98:	b	12b0c <__assert_fail@plt+0x1694>
   12b9c:	ldr	r3, [pc, #104]	; 12c0c <__assert_fail@plt+0x1794>
   12ba0:	mov	ip, r1
   12ba4:	push	{lr}		; (str lr, [sp, #-4]!)
   12ba8:	add	r3, pc, r3
   12bac:	sub	sp, sp, #12
   12bb0:	ldr	r1, [r3]
   12bb4:	cmp	r1, #0
   12bb8:	bne	12be8 <__assert_fail@plt+0x1770>
   12bbc:	mov	r1, #4096	; 0x1000
   12bc0:	stm	sp, {r0, ip}
   12bc4:	mov	r2, #1
   12bc8:	add	r0, r3, #4
   12bcc:	mov	r3, r1
   12bd0:	bl	1119c <__vsnprintf_chk@plt>
   12bd4:	ldr	r0, [pc, #52]	; 12c10 <__assert_fail@plt+0x1798>
   12bd8:	add	r0, pc, r0
   12bdc:	add	r0, r0, #4
   12be0:	add	sp, sp, #12
   12be4:	pop	{pc}		; (ldr pc, [sp], #4)
   12be8:	add	r3, r3, #4
   12bec:	str	r0, [sp]
   12bf0:	str	ip, [sp, #4]
   12bf4:	add	r0, r3, r1
   12bf8:	mov	r2, #1
   12bfc:	rsb	r1, r1, #4096	; 0x1000
   12c00:	mvn	r3, #0
   12c04:	bl	1119c <__vsnprintf_chk@plt>
   12c08:	b	12bd4 <__assert_fail@plt+0x175c>
   12c0c:			; <UNDEFINED> instruction: 0x000155b8
   12c10:	andeq	r5, r1, r8, lsl #11
   12c14:	push	{r4, r5, r6, lr}
   12c18:	mov	r5, r0
   12c1c:	mov	r4, r1
   12c20:	mov	r0, r2
   12c24:	mov	r1, r3
   12c28:	bl	12b9c <__assert_fail@plt+0x1724>
   12c2c:	mov	r1, r5
   12c30:	mov	r6, r0
   12c34:	bl	1140c <fopen64@plt>
   12c38:	rsbs	r3, r0, #1
   12c3c:	movcc	r3, #0
   12c40:	cmp	r4, #0
   12c44:	moveq	r3, #0
   12c48:	cmp	r3, #0
   12c4c:	popeq	{r4, r5, r6, pc}
   12c50:	ldr	r1, [pc, #28]	; 12c74 <__assert_fail@plt+0x17fc>
   12c54:	mov	r2, #5
   12c58:	mov	r0, #0
   12c5c:	add	r1, pc, r1
   12c60:	bl	111e4 <dcgettext@plt>
   12c64:	mov	r2, r6
   12c68:	mov	r1, r0
   12c6c:	mov	r0, #1
   12c70:	bl	1122c <err@plt>
   12c74:	andeq	r4, r0, r8, lsr r8
   12c78:	ldr	ip, [pc, #360]	; 12de8 <__assert_fail@plt+0x1970>
   12c7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c80:	add	fp, sp, #28
   12c84:	ldr	lr, [pc, #352]	; 12dec <__assert_fail@plt+0x1974>
   12c88:	sub	sp, sp, #8
   12c8c:	add	ip, pc, ip
   12c90:	rsb	r5, r0, r0, lsl #3
   12c94:	mov	r4, r0
   12c98:	ldr	r7, [ip, lr]
   12c9c:	add	r0, r5, #7
   12ca0:	mov	r8, r1
   12ca4:	bic	r1, r0, #7
   12ca8:	ldr	r0, [pc, #320]	; 12df0 <__assert_fail@plt+0x1978>
   12cac:	sub	sp, sp, r1
   12cb0:	ldr	ip, [r7]
   12cb4:	mov	r1, #1
   12cb8:	add	r0, pc, r0
   12cbc:	mov	r9, sp
   12cc0:	str	ip, [fp, #-32]	; 0xffffffe0
   12cc4:	bl	12c14 <__assert_fail@plt+0x179c>
   12cc8:	mov	r1, r5
   12ccc:	mov	r6, r0
   12cd0:	mov	r0, sp
   12cd4:	mov	r2, r6
   12cd8:	bl	11178 <fgets@plt>
   12cdc:	cmp	r0, #0
   12ce0:	beq	12d94 <__assert_fail@plt+0x191c>
   12ce4:	mov	r0, r6
   12ce8:	bl	113ac <fclose@plt>
   12cec:	mov	r0, sp
   12cf0:	bl	112d4 <strlen@plt>
   12cf4:	sub	r1, fp, #36	; 0x24
   12cf8:	mov	r2, #0
   12cfc:	sub	r0, r0, #1
   12d00:	ldrsb	r3, [sp, r0]
   12d04:	cmp	r3, #10
   12d08:	moveq	r3, #0
   12d0c:	strbeq	r3, [sp, r0]
   12d10:	mov	r0, r4
   12d14:	bl	15800 <__assert_fail@plt+0x4388>
   12d18:	subs	r4, r0, #0
   12d1c:	beq	12dbc <__assert_fail@plt+0x1944>
   12d20:	cmp	r8, #0
   12d24:	mov	r0, sp
   12d28:	mov	r1, r4
   12d2c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12d30:	bne	12d5c <__assert_fail@plt+0x18e4>
   12d34:	bl	15c18 <__assert_fail@plt+0x47a0>
   12d38:	cmp	r0, #0
   12d3c:	bne	12dd8 <__assert_fail@plt+0x1960>
   12d40:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d44:	mov	r0, r4
   12d48:	ldr	r3, [r7]
   12d4c:	cmp	r2, r3
   12d50:	bne	12d90 <__assert_fail@plt+0x1918>
   12d54:	sub	sp, fp, #28
   12d58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12d5c:	mov	r3, #0
   12d60:	bl	15db8 <__assert_fail@plt+0x4940>
   12d64:	cmp	r0, #0
   12d68:	beq	12d40 <__assert_fail@plt+0x18c8>
   12d6c:	ldr	r1, [pc, #128]	; 12df4 <__assert_fail@plt+0x197c>
   12d70:	mov	r0, #0
   12d74:	add	r1, pc, r1
   12d78:	mov	r2, #5
   12d7c:	bl	111e4 <dcgettext@plt>
   12d80:	mov	r2, r9
   12d84:	mov	r1, r0
   12d88:	mov	r0, #1
   12d8c:	bl	113c4 <errx@plt>
   12d90:	bl	111f0 <__stack_chk_fail@plt>
   12d94:	ldr	r1, [pc, #92]	; 12df8 <__assert_fail@plt+0x1980>
   12d98:	mov	r2, #5
   12d9c:	add	r1, pc, r1
   12da0:	bl	111e4 <dcgettext@plt>
   12da4:	ldr	r2, [pc, #80]	; 12dfc <__assert_fail@plt+0x1984>
   12da8:	add	r2, pc, r2
   12dac:	add	r2, r2, #4
   12db0:	mov	r1, r0
   12db4:	mov	r0, #1
   12db8:	bl	1122c <err@plt>
   12dbc:	ldr	r1, [pc, #60]	; 12e00 <__assert_fail@plt+0x1988>
   12dc0:	mov	r2, #5
   12dc4:	add	r1, pc, r1
   12dc8:	bl	111e4 <dcgettext@plt>
   12dcc:	mov	r1, r0
   12dd0:	mov	r0, #1
   12dd4:	bl	1122c <err@plt>
   12dd8:	ldr	r1, [pc, #36]	; 12e04 <__assert_fail@plt+0x198c>
   12ddc:	mov	r0, r8
   12de0:	add	r1, pc, r1
   12de4:	b	12d78 <__assert_fail@plt+0x1900>
   12de8:	andeq	r5, r1, ip, ror #6
   12dec:	andeq	r0, r0, ip, lsr #2
   12df0:	andeq	r4, r0, ip, ror #15
   12df4:	andeq	r4, r0, r4, ror #14
   12df8:	andeq	r4, r0, ip, lsl #14
   12dfc:			; <UNDEFINED> instruction: 0x000153b8
   12e00:	strdeq	r4, [r0], -r8
   12e04:	andeq	r4, r0, r4, lsl r7
   12e08:	push	{r4, lr}
   12e0c:	mov	r4, r0
   12e10:	bl	112d4 <strlen@plt>
   12e14:	movw	r3, #4094	; 0xffe
   12e18:	cmp	r0, r3
   12e1c:	mov	ip, r0
   12e20:	bhi	12e4c <__assert_fail@plt+0x19d4>
   12e24:	ldr	r0, [pc, #52]	; 12e60 <__assert_fail@plt+0x19e8>
   12e28:	mov	r3, #4096	; 0x1000
   12e2c:	mov	r1, r4
   12e30:	add	r2, ip, #1
   12e34:	add	r0, pc, r0
   12e38:	str	ip, [r0], #4
   12e3c:	bl	11238 <__memcpy_chk@plt>
   12e40:	mov	r3, #0
   12e44:	mov	r0, r3
   12e48:	pop	{r4, pc}
   12e4c:	bl	112f8 <__errno_location@plt>
   12e50:	mov	r2, #36	; 0x24
   12e54:	mvn	r3, #0
   12e58:	str	r2, [r0]
   12e5c:	b	12e44 <__assert_fail@plt+0x19cc>
   12e60:	andeq	r5, r1, ip, lsr #6
   12e64:	push	{r0, r1, r2, r3}
   12e68:	ldr	r2, [pc, #80]	; 12ec0 <__assert_fail@plt+0x1a48>
   12e6c:	ldr	ip, [pc, #80]	; 12ec4 <__assert_fail@plt+0x1a4c>
   12e70:	add	r2, pc, r2
   12e74:	push	{r4, lr}
   12e78:	sub	sp, sp, #8
   12e7c:	ldr	r4, [r2, ip]
   12e80:	add	r3, sp, #20
   12e84:	str	r3, [sp]
   12e88:	mov	r1, r3
   12e8c:	ldr	r0, [sp, #16]
   12e90:	ldr	r3, [r4]
   12e94:	str	r3, [sp, #4]
   12e98:	bl	12b9c <__assert_fail@plt+0x1724>
   12e9c:	ldr	r2, [sp, #4]
   12ea0:	ldr	r3, [r4]
   12ea4:	cmp	r2, r3
   12ea8:	bne	12ebc <__assert_fail@plt+0x1a44>
   12eac:	add	sp, sp, #8
   12eb0:	pop	{r4, lr}
   12eb4:	add	sp, sp, #16
   12eb8:	bx	lr
   12ebc:	bl	111f0 <__stack_chk_fail@plt>
   12ec0:	andeq	r5, r1, r8, lsl #3
   12ec4:	andeq	r0, r0, ip, lsr #2
   12ec8:	push	{r0, r1, r2, r3}
   12ecc:	ldr	r2, [pc, #100]	; 12f38 <__assert_fail@plt+0x1ac0>
   12ed0:	ldr	ip, [pc, #100]	; 12f3c <__assert_fail@plt+0x1ac4>
   12ed4:	add	r2, pc, r2
   12ed8:	push	{r4, lr}
   12edc:	sub	sp, sp, #8
   12ee0:	ldr	r4, [r2, ip]
   12ee4:	add	r3, sp, #20
   12ee8:	str	r3, [sp]
   12eec:	mov	r1, r3
   12ef0:	ldr	r0, [sp, #16]
   12ef4:	ldr	r3, [r4]
   12ef8:	str	r3, [sp, #4]
   12efc:	bl	12b9c <__assert_fail@plt+0x1724>
   12f00:	subs	r3, r0, #0
   12f04:	beq	12f2c <__assert_fail@plt+0x1ab4>
   12f08:	bl	11328 <__strdup@plt>
   12f0c:	ldr	r2, [sp, #4]
   12f10:	ldr	r3, [r4]
   12f14:	cmp	r2, r3
   12f18:	bne	12f34 <__assert_fail@plt+0x1abc>
   12f1c:	add	sp, sp, #8
   12f20:	pop	{r4, lr}
   12f24:	add	sp, sp, #16
   12f28:	bx	lr
   12f2c:	mov	r0, r3
   12f30:	b	12f0c <__assert_fail@plt+0x1a94>
   12f34:	bl	111f0 <__stack_chk_fail@plt>
   12f38:	andeq	r5, r1, r4, lsr #2
   12f3c:	andeq	r0, r0, ip, lsr #2
   12f40:	push	{r2, r3}
   12f44:	push	{r4, lr}
   12f48:	sub	sp, sp, #8
   12f4c:	ldr	lr, [pc, #72]	; 12f9c <__assert_fail@plt+0x1b24>
   12f50:	add	ip, sp, #20
   12f54:	ldr	r4, [pc, #68]	; 12fa0 <__assert_fail@plt+0x1b28>
   12f58:	add	lr, pc, lr
   12f5c:	mov	r3, ip
   12f60:	ldr	r2, [sp, #16]
   12f64:	ldr	r4, [lr, r4]
   12f68:	str	ip, [sp]
   12f6c:	ldr	ip, [r4]
   12f70:	str	ip, [sp, #4]
   12f74:	bl	12c14 <__assert_fail@plt+0x179c>
   12f78:	ldr	r2, [sp, #4]
   12f7c:	ldr	r3, [r4]
   12f80:	cmp	r2, r3
   12f84:	bne	12f98 <__assert_fail@plt+0x1b20>
   12f88:	add	sp, sp, #8
   12f8c:	pop	{r4, lr}
   12f90:	add	sp, sp, #8
   12f94:	bx	lr
   12f98:	bl	111f0 <__stack_chk_fail@plt>
   12f9c:	andeq	r5, r1, r0, lsr #1
   12fa0:	andeq	r0, r0, ip, lsr #2
   12fa4:	push	{r2, r3}
   12fa8:	push	{r4, r5, r6, r7, lr}
   12fac:	sub	sp, sp, #12
   12fb0:	ldr	lr, [pc, #196]	; 1307c <__assert_fail@plt+0x1c04>
   12fb4:	add	ip, sp, #36	; 0x24
   12fb8:	ldr	r5, [pc, #192]	; 13080 <__assert_fail@plt+0x1c08>
   12fbc:	mov	r4, r0
   12fc0:	add	lr, pc, lr
   12fc4:	mov	r3, ip
   12fc8:	ldr	r0, [pc, #180]	; 13084 <__assert_fail@plt+0x1c0c>
   12fcc:	mov	r7, r1
   12fd0:	ldr	r5, [lr, r5]
   12fd4:	mov	r1, #1
   12fd8:	str	ip, [sp]
   12fdc:	add	r0, pc, r0
   12fe0:	ldr	r2, [sp, #32]
   12fe4:	ldr	ip, [r5]
   12fe8:	str	ip, [sp, #4]
   12fec:	bl	12c14 <__assert_fail@plt+0x179c>
   12ff0:	mov	r1, r7
   12ff4:	mov	r6, r0
   12ff8:	mov	r0, r4
   12ffc:	mov	r2, r6
   13000:	bl	11178 <fgets@plt>
   13004:	cmp	r0, #0
   13008:	beq	13050 <__assert_fail@plt+0x1bd8>
   1300c:	mov	r0, r6
   13010:	bl	113ac <fclose@plt>
   13014:	mov	r0, r4
   13018:	bl	112d4 <strlen@plt>
   1301c:	ldr	r2, [sp, #4]
   13020:	sub	r0, r0, #1
   13024:	ldrsb	r3, [r4, r0]
   13028:	cmp	r3, #10
   1302c:	moveq	r3, #0
   13030:	strbeq	r3, [r4, r0]
   13034:	ldr	r3, [r5]
   13038:	cmp	r2, r3
   1303c:	bne	13078 <__assert_fail@plt+0x1c00>
   13040:	add	sp, sp, #12
   13044:	pop	{r4, r5, r6, r7, lr}
   13048:	add	sp, sp, #8
   1304c:	bx	lr
   13050:	ldr	r1, [pc, #48]	; 13088 <__assert_fail@plt+0x1c10>
   13054:	mov	r2, #5
   13058:	add	r1, pc, r1
   1305c:	bl	111e4 <dcgettext@plt>
   13060:	ldr	r2, [pc, #36]	; 1308c <__assert_fail@plt+0x1c14>
   13064:	add	r2, pc, r2
   13068:	add	r2, r2, #4
   1306c:	mov	r1, r0
   13070:	mov	r0, #1
   13074:	bl	1122c <err@plt>
   13078:	bl	111f0 <__stack_chk_fail@plt>
   1307c:	andeq	r5, r1, r8, lsr r0
   13080:	andeq	r0, r0, ip, lsr #2
   13084:	andeq	r4, r0, r8, asr #9
   13088:	andeq	r4, r0, r0, asr r4
   1308c:	strdeq	r5, [r1], -ip
   13090:	push	{r0, r1, r2, r3}
   13094:	mov	r1, #1
   13098:	push	{r4, r5, lr}
   1309c:	sub	sp, sp, #20
   130a0:	ldr	lr, [pc, #216]	; 13180 <__assert_fail@plt+0x1d08>
   130a4:	add	ip, sp, #36	; 0x24
   130a8:	ldr	r4, [pc, #212]	; 13184 <__assert_fail@plt+0x1d0c>
   130ac:	add	lr, pc, lr
   130b0:	mov	r3, ip
   130b4:	ldr	r0, [pc, #204]	; 13188 <__assert_fail@plt+0x1d10>
   130b8:	ldr	r4, [lr, r4]
   130bc:	str	ip, [sp, #4]
   130c0:	add	r0, pc, r0
   130c4:	ldr	r2, [sp, #32]
   130c8:	ldr	ip, [r4]
   130cc:	str	ip, [sp, #12]
   130d0:	bl	12c14 <__assert_fail@plt+0x179c>
   130d4:	ldr	r1, [pc, #176]	; 1318c <__assert_fail@plt+0x1d14>
   130d8:	add	r2, sp, #8
   130dc:	add	r1, pc, r1
   130e0:	mov	r5, r0
   130e4:	bl	1134c <fscanf@plt>
   130e8:	cmp	r0, #1
   130ec:	mov	r0, r5
   130f0:	beq	13154 <__assert_fail@plt+0x1cdc>
   130f4:	bl	11184 <ferror@plt>
   130f8:	cmp	r0, #0
   130fc:	beq	1312c <__assert_fail@plt+0x1cb4>
   13100:	ldr	r1, [pc, #136]	; 13190 <__assert_fail@plt+0x1d18>
   13104:	mov	r2, #5
   13108:	mov	r0, #0
   1310c:	add	r1, pc, r1
   13110:	bl	111e4 <dcgettext@plt>
   13114:	ldr	r2, [pc, #120]	; 13194 <__assert_fail@plt+0x1d1c>
   13118:	add	r2, pc, r2
   1311c:	add	r2, r2, #4
   13120:	mov	r1, r0
   13124:	mov	r0, #1
   13128:	bl	1122c <err@plt>
   1312c:	ldr	r1, [pc, #100]	; 13198 <__assert_fail@plt+0x1d20>
   13130:	mov	r2, #5
   13134:	add	r1, pc, r1
   13138:	bl	111e4 <dcgettext@plt>
   1313c:	ldr	r2, [pc, #88]	; 1319c <__assert_fail@plt+0x1d24>
   13140:	add	r2, pc, r2
   13144:	add	r2, r2, #4
   13148:	mov	r1, r0
   1314c:	mov	r0, #1
   13150:	bl	113c4 <errx@plt>
   13154:	bl	113ac <fclose@plt>
   13158:	ldr	r2, [sp, #12]
   1315c:	ldr	r3, [r4]
   13160:	ldr	r0, [sp, #8]
   13164:	cmp	r2, r3
   13168:	bne	1317c <__assert_fail@plt+0x1d04>
   1316c:	add	sp, sp, #20
   13170:	pop	{r4, r5, lr}
   13174:	add	sp, sp, #16
   13178:	bx	lr
   1317c:	bl	111f0 <__stack_chk_fail@plt>
   13180:	andeq	r4, r1, ip, asr #30
   13184:	andeq	r0, r0, ip, lsr #2
   13188:	andeq	r4, r0, r4, ror #7
   1318c:	andeq	r4, r0, r4, lsr r4
   13190:	muleq	r0, ip, r3
   13194:	andeq	r5, r1, r8, asr #32
   13198:	andeq	r4, r0, r0, ror #7
   1319c:	andeq	r5, r1, r0, lsr #32
   131a0:	push	{r0, r1, r2, r3}
   131a4:	mov	r1, #1
   131a8:	push	{r4, r5, lr}
   131ac:	sub	sp, sp, #28
   131b0:	ldr	lr, [pc, #216]	; 13290 <__assert_fail@plt+0x1e18>
   131b4:	add	ip, sp, #44	; 0x2c
   131b8:	ldr	r4, [pc, #212]	; 13294 <__assert_fail@plt+0x1e1c>
   131bc:	add	lr, pc, lr
   131c0:	mov	r3, ip
   131c4:	ldr	r0, [pc, #204]	; 13298 <__assert_fail@plt+0x1e20>
   131c8:	ldr	r4, [lr, r4]
   131cc:	str	ip, [sp, #4]
   131d0:	add	r0, pc, r0
   131d4:	ldr	r2, [sp, #40]	; 0x28
   131d8:	ldr	ip, [r4]
   131dc:	str	ip, [sp, #20]
   131e0:	bl	12c14 <__assert_fail@plt+0x179c>
   131e4:	ldr	r1, [pc, #176]	; 1329c <__assert_fail@plt+0x1e24>
   131e8:	add	r2, sp, #8
   131ec:	add	r1, pc, r1
   131f0:	mov	r5, r0
   131f4:	bl	1134c <fscanf@plt>
   131f8:	cmp	r0, #1
   131fc:	mov	r0, r5
   13200:	beq	13264 <__assert_fail@plt+0x1dec>
   13204:	bl	11184 <ferror@plt>
   13208:	cmp	r0, #0
   1320c:	beq	1323c <__assert_fail@plt+0x1dc4>
   13210:	ldr	r1, [pc, #136]	; 132a0 <__assert_fail@plt+0x1e28>
   13214:	mov	r2, #5
   13218:	mov	r0, #0
   1321c:	add	r1, pc, r1
   13220:	bl	111e4 <dcgettext@plt>
   13224:	ldr	r2, [pc, #120]	; 132a4 <__assert_fail@plt+0x1e2c>
   13228:	add	r2, pc, r2
   1322c:	add	r2, r2, #4
   13230:	mov	r1, r0
   13234:	mov	r0, #1
   13238:	bl	1122c <err@plt>
   1323c:	ldr	r1, [pc, #100]	; 132a8 <__assert_fail@plt+0x1e30>
   13240:	mov	r2, #5
   13244:	add	r1, pc, r1
   13248:	bl	111e4 <dcgettext@plt>
   1324c:	ldr	r2, [pc, #88]	; 132ac <__assert_fail@plt+0x1e34>
   13250:	add	r2, pc, r2
   13254:	add	r2, r2, #4
   13258:	mov	r1, r0
   1325c:	mov	r0, #1
   13260:	bl	113c4 <errx@plt>
   13264:	bl	113ac <fclose@plt>
   13268:	ldr	r2, [sp, #20]
   1326c:	ldr	r3, [r4]
   13270:	ldrd	r0, [sp, #8]
   13274:	cmp	r2, r3
   13278:	bne	1328c <__assert_fail@plt+0x1e14>
   1327c:	add	sp, sp, #28
   13280:	pop	{r4, r5, lr}
   13284:	add	sp, sp, #16
   13288:	bx	lr
   1328c:	bl	111f0 <__stack_chk_fail@plt>
   13290:	andeq	r4, r1, ip, lsr lr
   13294:	andeq	r0, r0, ip, lsr #2
   13298:	andeq	r4, r0, r4, asr r3
   1329c:	andeq	r4, r0, ip, lsr r3
   132a0:	andeq	r4, r0, ip, lsl #5
   132a4:	andeq	r4, r1, r8, lsr pc
   132a8:	ldrdeq	r4, [r0], -r0
   132ac:	andeq	r4, r1, r0, lsl pc
   132b0:	push	{r1, r2, r3}
   132b4:	ldr	r2, [pc, #292]	; 133e0 <__assert_fail@plt+0x1f68>
   132b8:	ldr	ip, [pc, #292]	; 133e4 <__assert_fail@plt+0x1f6c>
   132bc:	add	r2, pc, r2
   132c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   132c4:	sub	sp, sp, #8
   132c8:	ldr	r9, [r2, ip]
   132cc:	add	r3, sp, #40	; 0x28
   132d0:	str	r3, [sp]
   132d4:	mov	r6, r0
   132d8:	mov	r1, r3
   132dc:	ldr	r0, [sp, #36]	; 0x24
   132e0:	ldr	r3, [r9]
   132e4:	str	r3, [sp, #4]
   132e8:	bl	12b9c <__assert_fail@plt+0x1724>
   132ec:	mov	r1, #1
   132f0:	movt	r1, #8
   132f4:	mov	r4, r0
   132f8:	bl	1125c <open64@plt>
   132fc:	cmn	r0, #1
   13300:	mov	r7, r0
   13304:	beq	133b8 <__assert_fail@plt+0x1f40>
   13308:	mov	r0, r6
   1330c:	bl	112d4 <strlen@plt>
   13310:	subs	r4, r0, #0
   13314:	beq	13388 <__assert_fail@plt+0x1f10>
   13318:	bl	112f8 <__errno_location@plt>
   1331c:	mov	r8, #0
   13320:	mov	r5, r0
   13324:	b	13344 <__assert_fail@plt+0x1ecc>
   13328:	subs	r4, r4, r0
   1332c:	ldr	r3, [r5]
   13330:	addne	r6, r6, r0
   13334:	cmp	r3, #11
   13338:	beq	13378 <__assert_fail@plt+0x1f00>
   1333c:	cmp	r4, #0
   13340:	beq	13388 <__assert_fail@plt+0x1f10>
   13344:	str	r8, [r5]
   13348:	mov	r0, r7
   1334c:	mov	r1, r6
   13350:	mov	r2, r4
   13354:	bl	1137c <write@plt>
   13358:	cmp	r0, #0
   1335c:	bgt	13328 <__assert_fail@plt+0x1eb0>
   13360:	ldr	r3, [r5]
   13364:	cmp	r3, #11
   13368:	cmpne	r3, #4
   1336c:	beq	13334 <__assert_fail@plt+0x1ebc>
   13370:	mvn	r4, #0
   13374:	b	1338c <__assert_fail@plt+0x1f14>
   13378:	movw	r0, #10000	; 0x2710
   1337c:	bl	11244 <usleep@plt>
   13380:	cmp	r4, #0
   13384:	bne	13344 <__assert_fail@plt+0x1ecc>
   13388:	mov	r4, #0
   1338c:	mov	r0, r7
   13390:	bl	11454 <close@plt>
   13394:	ldr	r2, [sp, #4]
   13398:	ldr	r3, [r9]
   1339c:	mov	r0, r4
   133a0:	cmp	r2, r3
   133a4:	bne	133dc <__assert_fail@plt+0x1f64>
   133a8:	add	sp, sp, #8
   133ac:	pop	{r4, r5, r6, r7, r8, r9, lr}
   133b0:	add	sp, sp, #12
   133b4:	bx	lr
   133b8:	ldr	r1, [pc, #40]	; 133e8 <__assert_fail@plt+0x1f70>
   133bc:	mov	r2, #5
   133c0:	mov	r0, #0
   133c4:	add	r1, pc, r1
   133c8:	bl	111e4 <dcgettext@plt>
   133cc:	mov	r2, r4
   133d0:	mov	r1, r0
   133d4:	mov	r0, #1
   133d8:	bl	1122c <err@plt>
   133dc:	bl	111f0 <__stack_chk_fail@plt>
   133e0:	andeq	r4, r1, ip, lsr sp
   133e4:	andeq	r0, r0, ip, lsr #2
   133e8:	ldrdeq	r4, [r0], -r0
   133ec:	push	{r0, r1, r2, r3}
   133f0:	ldr	r2, [pc, #96]	; 13458 <__assert_fail@plt+0x1fe0>
   133f4:	ldr	ip, [pc, #96]	; 1345c <__assert_fail@plt+0x1fe4>
   133f8:	add	r2, pc, r2
   133fc:	push	{r4, lr}
   13400:	sub	sp, sp, #8
   13404:	ldr	r4, [r2, ip]
   13408:	add	r3, sp, #20
   1340c:	str	r3, [sp]
   13410:	mov	r1, r3
   13414:	ldr	r0, [sp, #16]
   13418:	ldr	r3, [r4]
   1341c:	str	r3, [sp, #4]
   13420:	bl	12b9c <__assert_fail@plt+0x1724>
   13424:	mov	r1, #0
   13428:	bl	113a0 <access@plt>
   1342c:	ldr	r2, [sp, #4]
   13430:	ldr	r3, [r4]
   13434:	rsbs	r0, r0, #1
   13438:	movcc	r0, #0
   1343c:	cmp	r2, r3
   13440:	bne	13454 <__assert_fail@plt+0x1fdc>
   13444:	add	sp, sp, #8
   13448:	pop	{r4, lr}
   1344c:	add	sp, sp, #16
   13450:	bx	lr
   13454:	bl	111f0 <__stack_chk_fail@plt>
   13458:	andeq	r4, r1, r0, lsl #24
   1345c:	andeq	r0, r0, ip, lsr #2
   13460:	push	{r1, r2, r3}
   13464:	mov	r1, #0
   13468:	push	{r4, lr}
   1346c:	sub	sp, sp, #12
   13470:	ldr	lr, [pc, #72]	; 134c0 <__assert_fail@plt+0x2048>
   13474:	add	ip, sp, #24
   13478:	ldr	r4, [pc, #68]	; 134c4 <__assert_fail@plt+0x204c>
   1347c:	add	lr, pc, lr
   13480:	mov	r3, ip
   13484:	ldr	r2, [sp, #20]
   13488:	ldr	r4, [lr, r4]
   1348c:	str	ip, [sp]
   13490:	ldr	ip, [r4]
   13494:	str	ip, [sp, #4]
   13498:	bl	12c78 <__assert_fail@plt+0x1800>
   1349c:	ldr	r2, [sp, #4]
   134a0:	ldr	r3, [r4]
   134a4:	cmp	r2, r3
   134a8:	bne	134bc <__assert_fail@plt+0x2044>
   134ac:	add	sp, sp, #12
   134b0:	pop	{r4, lr}
   134b4:	add	sp, sp, #12
   134b8:	bx	lr
   134bc:	bl	111f0 <__stack_chk_fail@plt>
   134c0:	andeq	r4, r1, ip, ror fp
   134c4:	andeq	r0, r0, ip, lsr #2
   134c8:	push	{r1, r2, r3}
   134cc:	mov	r1, #1
   134d0:	push	{r4, lr}
   134d4:	sub	sp, sp, #12
   134d8:	ldr	lr, [pc, #72]	; 13528 <__assert_fail@plt+0x20b0>
   134dc:	add	ip, sp, #24
   134e0:	ldr	r4, [pc, #68]	; 1352c <__assert_fail@plt+0x20b4>
   134e4:	add	lr, pc, lr
   134e8:	mov	r3, ip
   134ec:	ldr	r2, [sp, #20]
   134f0:	ldr	r4, [lr, r4]
   134f4:	str	ip, [sp]
   134f8:	ldr	ip, [r4]
   134fc:	str	ip, [sp, #4]
   13500:	bl	12c78 <__assert_fail@plt+0x1800>
   13504:	ldr	r2, [sp, #4]
   13508:	ldr	r3, [r4]
   1350c:	cmp	r2, r3
   13510:	bne	13524 <__assert_fail@plt+0x20ac>
   13514:	add	sp, sp, #12
   13518:	pop	{r4, lr}
   1351c:	add	sp, sp, #12
   13520:	bx	lr
   13524:	bl	111f0 <__stack_chk_fail@plt>
   13528:	andeq	r4, r1, r4, lsl fp
   1352c:	andeq	r0, r0, ip, lsr #2
   13530:	cmp	r0, #0
   13534:	mov	r3, #0
   13538:	str	r3, [r1]
   1353c:	bxeq	lr
   13540:	ldrb	r2, [r0]
   13544:	cmp	r2, #47	; 0x2f
   13548:	bne	13590 <__assert_fail@plt+0x2118>
   1354c:	ldrsb	r3, [r0, #1]
   13550:	cmp	r3, #47	; 0x2f
   13554:	bne	13598 <__assert_fail@plt+0x2120>
   13558:	mov	r3, r0
   1355c:	b	1357c <__assert_fail@plt+0x2104>
   13560:	ldrb	r2, [r3, #1]
   13564:	mov	r3, r0
   13568:	cmp	r2, #47	; 0x2f
   1356c:	bne	13590 <__assert_fail@plt+0x2118>
   13570:	ldrsb	r2, [r0, #1]
   13574:	cmp	r2, #47	; 0x2f
   13578:	bne	13598 <__assert_fail@plt+0x2120>
   1357c:	cmn	r3, #1
   13580:	add	r0, r0, #1
   13584:	bne	13560 <__assert_fail@plt+0x20e8>
   13588:	mov	r0, #0
   1358c:	bx	lr
   13590:	cmp	r2, #0
   13594:	beq	13588 <__assert_fail@plt+0x2110>
   13598:	mov	r3, #1
   1359c:	str	r3, [r1]
   135a0:	ldrsb	r3, [r0, #1]
   135a4:	cmp	r3, #47	; 0x2f
   135a8:	cmpne	r3, #0
   135ac:	bxeq	lr
   135b0:	mov	r3, #2
   135b4:	str	r3, [r1]
   135b8:	ldrb	r2, [r0, r3]
   135bc:	add	r3, r3, #1
   135c0:	cmp	r2, #47	; 0x2f
   135c4:	cmpne	r2, #0
   135c8:	bne	135b4 <__assert_fail@plt+0x213c>
   135cc:	bx	lr
   135d0:	push	{r3, r4, r5, r6, r7, lr}
   135d4:	mov	r7, r1
   135d8:	ldrb	r3, [r0]
   135dc:	cmp	r3, #0
   135e0:	beq	13658 <__assert_fail@plt+0x21e0>
   135e4:	mov	r4, #0
   135e8:	mov	r5, r0
   135ec:	mov	r6, r4
   135f0:	b	13620 <__assert_fail@plt+0x21a8>
   135f4:	cmp	r3, #92	; 0x5c
   135f8:	mov	r0, r7
   135fc:	mov	r1, r3
   13600:	beq	13648 <__assert_fail@plt+0x21d0>
   13604:	bl	112e0 <strchr@plt>
   13608:	cmp	r0, #0
   1360c:	bne	13650 <__assert_fail@plt+0x21d8>
   13610:	ldrb	r3, [r5, #1]!
   13614:	add	r4, r4, #1
   13618:	cmp	r3, #0
   1361c:	beq	13640 <__assert_fail@plt+0x21c8>
   13620:	cmp	r6, #0
   13624:	sxtb	r3, r3
   13628:	beq	135f4 <__assert_fail@plt+0x217c>
   1362c:	ldrb	r3, [r5, #1]!
   13630:	mov	r6, #0
   13634:	add	r4, r4, #1
   13638:	cmp	r3, #0
   1363c:	bne	13620 <__assert_fail@plt+0x21a8>
   13640:	rsb	r0, r6, r4
   13644:	pop	{r3, r4, r5, r6, r7, pc}
   13648:	mov	r6, #1
   1364c:	b	13610 <__assert_fail@plt+0x2198>
   13650:	mov	r0, r4
   13654:	pop	{r3, r4, r5, r6, r7, pc}
   13658:	mov	r0, r3
   1365c:	pop	{r3, r4, r5, r6, r7, pc}
   13660:	ldr	r3, [pc, #224]	; 13748 <__assert_fail@plt+0x22d0>
   13664:	push	{r4, r5, r6, r7, r8, r9, lr}
   13668:	mov	r6, r0
   1366c:	ldr	r0, [pc, #216]	; 1374c <__assert_fail@plt+0x22d4>
   13670:	add	r3, pc, r3
   13674:	sub	sp, sp, #12
   13678:	mov	r4, #0
   1367c:	mov	r9, r1
   13680:	mov	r5, r2
   13684:	ldr	r8, [r3, r0]
   13688:	str	r4, [sp]
   1368c:	ldr	r3, [r8]
   13690:	str	r3, [sp, #4]
   13694:	bl	112f8 <__errno_location@plt>
   13698:	cmp	r6, r4
   1369c:	mov	r7, r0
   136a0:	str	r4, [r0]
   136a4:	beq	136b4 <__assert_fail@plt+0x223c>
   136a8:	ldrsb	r3, [r6]
   136ac:	cmp	r3, r4
   136b0:	bne	136cc <__assert_fail@plt+0x2254>
   136b4:	ldr	r1, [pc, #148]	; 13750 <__assert_fail@plt+0x22d8>
   136b8:	mov	r2, r9
   136bc:	mov	r3, r6
   136c0:	mov	r0, #1
   136c4:	add	r1, pc, r1
   136c8:	bl	113c4 <errx@plt>
   136cc:	mov	r3, r4
   136d0:	mov	r2, r5
   136d4:	mov	r0, r6
   136d8:	mov	r1, sp
   136dc:	bl	111b4 <__strtoull_internal@plt>
   136e0:	ldr	r3, [r7]
   136e4:	cmp	r3, r4
   136e8:	bne	13724 <__assert_fail@plt+0x22ac>
   136ec:	ldr	r3, [sp]
   136f0:	cmp	r6, r3
   136f4:	beq	136b4 <__assert_fail@plt+0x223c>
   136f8:	cmp	r3, r4
   136fc:	beq	1370c <__assert_fail@plt+0x2294>
   13700:	ldrsb	r3, [r3]
   13704:	cmp	r3, r4
   13708:	bne	136b4 <__assert_fail@plt+0x223c>
   1370c:	ldr	r2, [sp, #4]
   13710:	ldr	r3, [r8]
   13714:	cmp	r2, r3
   13718:	bne	13744 <__assert_fail@plt+0x22cc>
   1371c:	add	sp, sp, #12
   13720:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13724:	cmp	r3, #34	; 0x22
   13728:	bne	136b4 <__assert_fail@plt+0x223c>
   1372c:	ldr	r1, [pc, #32]	; 13754 <__assert_fail@plt+0x22dc>
   13730:	mov	r2, r9
   13734:	mov	r3, r6
   13738:	mov	r0, #1
   1373c:	add	r1, pc, r1
   13740:	bl	1122c <err@plt>
   13744:	bl	111f0 <__stack_chk_fail@plt>
   13748:	andeq	r4, r1, r8, lsl #19
   1374c:	andeq	r0, r0, ip, lsr #2
   13750:	andeq	r3, r0, ip, ror #28
   13754:	strdeq	r3, [r0], -r4
   13758:	ldr	r3, [pc, #596]	; 139b4 <__assert_fail@plt+0x253c>
   1375c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13760:	add	r3, pc, r3
   13764:	subs	r6, r0, #0
   13768:	ldr	r0, [pc, #584]	; 139b8 <__assert_fail@plt+0x2540>
   1376c:	mov	r8, r1
   13770:	mov	r1, r3
   13774:	sub	sp, sp, #20
   13778:	mov	r9, r2
   1377c:	ldr	sl, [r1, r0]
   13780:	mov	r2, #0
   13784:	mov	r3, #0
   13788:	ldr	r1, [sl]
   1378c:	strd	r2, [r8]
   13790:	str	r1, [sp, #12]
   13794:	beq	1387c <__assert_fail@plt+0x2404>
   13798:	ldrb	r5, [r6]
   1379c:	cmp	r5, #0
   137a0:	beq	1387c <__assert_fail@plt+0x2404>
   137a4:	str	r6, [sp, #8]
   137a8:	bl	112a4 <__ctype_b_loc@plt>
   137ac:	mov	r3, r6
   137b0:	ldr	r1, [r0]
   137b4:	b	137c8 <__assert_fail@plt+0x2350>
   137b8:	add	r2, r3, #1
   137bc:	str	r2, [sp, #8]
   137c0:	ldrb	r5, [r3, #1]
   137c4:	mov	r3, r2
   137c8:	lsl	r2, r5, #1
   137cc:	ldrh	r4, [r1, r2]
   137d0:	and	r4, r4, #8192	; 0x2000
   137d4:	uxth	r4, r4
   137d8:	cmp	r4, #0
   137dc:	bne	137b8 <__assert_fail@plt+0x2340>
   137e0:	cmp	r5, #45	; 0x2d
   137e4:	beq	1387c <__assert_fail@plt+0x2404>
   137e8:	add	r5, sp, #16
   137ec:	str	r4, [r5, #-8]!
   137f0:	bl	112f8 <__errno_location@plt>
   137f4:	mov	r2, r4
   137f8:	mov	r1, r5
   137fc:	mov	r3, r4
   13800:	mov	r7, r0
   13804:	mov	r0, r6
   13808:	str	r4, [r7]
   1380c:	bl	111b4 <__strtoull_internal@plt>
   13810:	mov	r5, r1
   13814:	ldr	r1, [sp, #8]
   13818:	mov	r4, r0
   1381c:	cmp	r1, r6
   13820:	beq	1387c <__assert_fail@plt+0x2404>
   13824:	ldr	r3, [r7]
   13828:	cmp	r3, #0
   1382c:	bne	13860 <__assert_fail@plt+0x23e8>
   13830:	cmp	r1, #0
   13834:	beq	13964 <__assert_fail@plt+0x24ec>
   13838:	ldrb	r0, [r1]
   1383c:	cmp	r0, #0
   13840:	bne	13884 <__assert_fail@plt+0x240c>
   13844:	strd	r4, [r8]
   13848:	ldr	r2, [sp, #12]
   1384c:	ldr	r3, [sl]
   13850:	cmp	r2, r3
   13854:	bne	139b0 <__assert_fail@plt+0x2538>
   13858:	add	sp, sp, #20
   1385c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13860:	subs	r2, r4, #1
   13864:	mvn	r6, #2
   13868:	sbc	r3, r5, #0
   1386c:	mvn	r7, #0
   13870:	cmp	r3, r7
   13874:	cmpeq	r2, r6
   13878:	bls	13830 <__assert_fail@plt+0x23b8>
   1387c:	mvn	r0, #0
   13880:	b	13848 <__assert_fail@plt+0x23d0>
   13884:	ldrb	r2, [r1, #1]
   13888:	sxtb	r3, r2
   1388c:	cmp	r3, #105	; 0x69
   13890:	beq	1396c <__assert_fail@plt+0x24f4>
   13894:	cmp	r3, #66	; 0x42
   13898:	beq	13948 <__assert_fail@plt+0x24d0>
   1389c:	cmp	r2, #0
   138a0:	bne	1387c <__assert_fail@plt+0x2404>
   138a4:	mov	r6, #1024	; 0x400
   138a8:	ldr	r7, [pc, #268]	; 139bc <__assert_fail@plt+0x2544>
   138ac:	sxtb	r3, r0
   138b0:	str	r3, [sp, #4]
   138b4:	add	r7, pc, r7
   138b8:	mov	r1, r3
   138bc:	mov	r0, r7
   138c0:	bl	112e0 <strchr@plt>
   138c4:	ldr	r3, [sp, #4]
   138c8:	cmp	r0, #0
   138cc:	rsbne	fp, r7, r0
   138d0:	addne	fp, fp, #1
   138d4:	beq	13988 <__assert_fail@plt+0x2510>
   138d8:	cmp	fp, #0
   138dc:	beq	13938 <__assert_fail@plt+0x24c0>
   138e0:	asr	r7, r6, #31
   138e4:	mvn	r0, #0
   138e8:	mvn	r1, #0
   138ec:	mov	r2, r6
   138f0:	mov	r3, r7
   138f4:	bl	15ff0 <__assert_fail@plt+0x4b78>
   138f8:	cmp	r1, r5
   138fc:	cmpeq	r0, r4
   13900:	bcc	1395c <__assert_fail@plt+0x24e4>
   13904:	sub	ip, fp, #1
   13908:	mov	r3, #0
   1390c:	b	13920 <__assert_fail@plt+0x24a8>
   13910:	cmp	r1, r5
   13914:	cmpeq	r0, r4
   13918:	add	r3, r3, #1
   1391c:	bcc	1395c <__assert_fail@plt+0x24e4>
   13920:	mul	r2, r4, r7
   13924:	cmp	r3, ip
   13928:	mla	r2, r6, r5, r2
   1392c:	umull	r4, r5, r4, r6
   13930:	add	r5, r2, r5
   13934:	bne	13910 <__assert_fail@plt+0x2498>
   13938:	mov	r0, #0
   1393c:	cmp	r9, #0
   13940:	strne	fp, [r9]
   13944:	b	13844 <__assert_fail@plt+0x23cc>
   13948:	ldrsb	r3, [r1, #2]
   1394c:	cmp	r3, #0
   13950:	bne	1387c <__assert_fail@plt+0x2404>
   13954:	mov	r6, #1000	; 0x3e8
   13958:	b	138a8 <__assert_fail@plt+0x2430>
   1395c:	mvn	r0, #1
   13960:	b	1393c <__assert_fail@plt+0x24c4>
   13964:	mov	r0, r1
   13968:	b	13844 <__assert_fail@plt+0x23cc>
   1396c:	ldrsb	r3, [r1, #2]
   13970:	cmp	r3, #66	; 0x42
   13974:	bne	1387c <__assert_fail@plt+0x2404>
   13978:	ldrsb	r3, [r1, #3]
   1397c:	cmp	r3, #0
   13980:	beq	138a4 <__assert_fail@plt+0x242c>
   13984:	b	1387c <__assert_fail@plt+0x2404>
   13988:	ldr	r7, [pc, #48]	; 139c0 <__assert_fail@plt+0x2548>
   1398c:	mov	r1, r3
   13990:	add	r7, pc, r7
   13994:	mov	r0, r7
   13998:	bl	112e0 <strchr@plt>
   1399c:	cmp	r0, #0
   139a0:	beq	1387c <__assert_fail@plt+0x2404>
   139a4:	rsb	r7, r7, r0
   139a8:	add	fp, r7, #1
   139ac:	b	138d8 <__assert_fail@plt+0x2460>
   139b0:	bl	111f0 <__stack_chk_fail@plt>
   139b4:	muleq	r1, r8, r8
   139b8:	andeq	r0, r0, ip, lsr #2
   139bc:	andeq	r3, r0, r8, lsl #25
   139c0:			; <UNDEFINED> instruction: 0x00003bb8
   139c4:	mov	r2, #0
   139c8:	b	13758 <__assert_fail@plt+0x22e0>
   139cc:	push	{r4, r5, r6, lr}
   139d0:	subs	r6, r0, #0
   139d4:	beq	13a58 <__assert_fail@plt+0x25e0>
   139d8:	ldrb	r4, [r6]
   139dc:	cmp	r4, #0
   139e0:	beq	13a60 <__assert_fail@plt+0x25e8>
   139e4:	bl	112a4 <__ctype_b_loc@plt>
   139e8:	mov	r3, r6
   139ec:	ldr	r5, [r0]
   139f0:	b	13a0c <__assert_fail@plt+0x2594>
   139f4:	cmn	r3, #1
   139f8:	beq	13a48 <__assert_fail@plt+0x25d0>
   139fc:	ldrb	r4, [r3, #1]
   13a00:	mov	r3, r1
   13a04:	cmp	r4, #0
   13a08:	beq	13a50 <__assert_fail@plt+0x25d8>
   13a0c:	lsl	r4, r4, #1
   13a10:	mov	ip, r3
   13a14:	add	r1, r3, #1
   13a18:	ldrh	r2, [r5, r4]
   13a1c:	tst	r2, #2048	; 0x800
   13a20:	bne	139f4 <__assert_fail@plt+0x257c>
   13a24:	cmp	ip, #0
   13a28:	cmpne	ip, r6
   13a2c:	movls	r0, #0
   13a30:	movhi	r0, #1
   13a34:	popls	{r4, r5, r6, pc}
   13a38:	ldrsb	r0, [ip]
   13a3c:	rsbs	r0, r0, #1
   13a40:	movcc	r0, #0
   13a44:	pop	{r4, r5, r6, pc}
   13a48:	mov	r0, #0
   13a4c:	pop	{r4, r5, r6, pc}
   13a50:	mov	ip, r1
   13a54:	b	13a24 <__assert_fail@plt+0x25ac>
   13a58:	mov	r0, r6
   13a5c:	pop	{r4, r5, r6, pc}
   13a60:	mov	r0, r4
   13a64:	pop	{r4, r5, r6, pc}
   13a68:	cmp	r1, #0
   13a6c:	push	{r4, r5}
   13a70:	sub	r4, r1, #1
   13a74:	beq	13ae0 <__assert_fail@plt+0x2668>
   13a78:	ldrb	r1, [r0]
   13a7c:	cmp	r1, #0
   13a80:	beq	13ae0 <__assert_fail@plt+0x2668>
   13a84:	sxtb	r1, r1
   13a88:	sxtb	r2, r2
   13a8c:	cmp	r1, r2
   13a90:	beq	13acc <__assert_fail@plt+0x2654>
   13a94:	add	r1, r0, #1
   13a98:	mov	r3, #0
   13a9c:	b	13ab8 <__assert_fail@plt+0x2640>
   13aa0:	ldrb	r0, [r1], #1
   13aa4:	cmp	r0, #0
   13aa8:	sxtb	ip, r0
   13aac:	beq	13acc <__assert_fail@plt+0x2654>
   13ab0:	cmp	ip, r2
   13ab4:	beq	13ad4 <__assert_fail@plt+0x265c>
   13ab8:	cmp	r3, r4
   13abc:	mov	r5, r1
   13ac0:	add	r3, r3, #1
   13ac4:	bne	13aa0 <__assert_fail@plt+0x2628>
   13ac8:	mov	r0, #0
   13acc:	pop	{r4, r5}
   13ad0:	bx	lr
   13ad4:	mov	r0, r5
   13ad8:	pop	{r4, r5}
   13adc:	bx	lr
   13ae0:	mov	r0, r1
   13ae4:	b	13acc <__assert_fail@plt+0x2654>
   13ae8:	ldr	r3, [pc, #228]	; 13bd4 <__assert_fail@plt+0x275c>
   13aec:	ldr	r2, [pc, #228]	; 13bd8 <__assert_fail@plt+0x2760>
   13af0:	add	r3, pc, r3
   13af4:	push	{r4, r6, r7, r8, r9, lr}
   13af8:	subs	r6, r0, #0
   13afc:	ldr	r7, [r3, r2]
   13b00:	mov	r0, r3
   13b04:	sub	sp, sp, #8
   13b08:	mov	r4, #0
   13b0c:	mov	r8, r1
   13b10:	ldr	r3, [r7]
   13b14:	str	r4, [sp]
   13b18:	str	r3, [sp, #4]
   13b1c:	beq	13b2c <__assert_fail@plt+0x26b4>
   13b20:	ldrsb	r3, [r6]
   13b24:	cmp	r3, r4
   13b28:	bne	13b54 <__assert_fail@plt+0x26dc>
   13b2c:	bl	112f8 <__errno_location@plt>
   13b30:	ldr	r3, [r0]
   13b34:	cmp	r3, #0
   13b38:	bne	13b80 <__assert_fail@plt+0x2708>
   13b3c:	ldr	r1, [pc, #152]	; 13bdc <__assert_fail@plt+0x2764>
   13b40:	mov	r2, r8
   13b44:	mov	r3, r6
   13b48:	mov	r0, #1
   13b4c:	add	r1, pc, r1
   13b50:	bl	113c4 <errx@plt>
   13b54:	bl	112f8 <__errno_location@plt>
   13b58:	mov	r3, r4
   13b5c:	mov	r1, sp
   13b60:	mov	r2, #10
   13b64:	mov	r9, r0
   13b68:	str	r4, [r0]
   13b6c:	mov	r0, r6
   13b70:	bl	11400 <__strtoll_internal@plt>
   13b74:	ldr	r3, [r9]
   13b78:	cmp	r3, r4
   13b7c:	beq	13b98 <__assert_fail@plt+0x2720>
   13b80:	ldr	r1, [pc, #88]	; 13be0 <__assert_fail@plt+0x2768>
   13b84:	mov	r2, r8
   13b88:	mov	r3, r6
   13b8c:	mov	r0, #1
   13b90:	add	r1, pc, r1
   13b94:	bl	1122c <err@plt>
   13b98:	ldr	r3, [sp]
   13b9c:	cmp	r6, r3
   13ba0:	beq	13b3c <__assert_fail@plt+0x26c4>
   13ba4:	cmp	r3, #0
   13ba8:	beq	13bb8 <__assert_fail@plt+0x2740>
   13bac:	ldrsb	r3, [r3]
   13bb0:	cmp	r3, #0
   13bb4:	bne	13b3c <__assert_fail@plt+0x26c4>
   13bb8:	ldr	r2, [sp, #4]
   13bbc:	ldr	r3, [r7]
   13bc0:	cmp	r2, r3
   13bc4:	bne	13bd0 <__assert_fail@plt+0x2758>
   13bc8:	add	sp, sp, #8
   13bcc:	pop	{r4, r6, r7, r8, r9, pc}
   13bd0:	bl	111f0 <__stack_chk_fail@plt>
   13bd4:	andeq	r4, r1, r8, lsl #10
   13bd8:	andeq	r0, r0, ip, lsr #2
   13bdc:	andeq	r3, r0, r4, ror #19
   13be0:	andeq	r3, r0, r0, lsr #19
   13be4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13be8:	mov	r8, r0
   13bec:	mov	r9, r1
   13bf0:	bl	13ae8 <__assert_fail@plt+0x2670>
   13bf4:	mvn	r4, #0
   13bf8:	mov	r5, #0
   13bfc:	adds	r6, r0, #-2147483648	; 0x80000000
   13c00:	adc	r7, r1, #0
   13c04:	cmp	r7, r5
   13c08:	cmpeq	r6, r4
   13c0c:	popls	{r3, r4, r5, r6, r7, r8, r9, pc}
   13c10:	ldr	r1, [pc, #16]	; 13c28 <__assert_fail@plt+0x27b0>
   13c14:	mov	r2, r9
   13c18:	mov	r3, r8
   13c1c:	mov	r0, #1
   13c20:	add	r1, pc, r1
   13c24:	bl	113c4 <errx@plt>
   13c28:	andeq	r3, r0, r0, lsl r9
   13c2c:	push	{r3, r4, r5, lr}
   13c30:	mov	r4, r0
   13c34:	mov	r5, r1
   13c38:	bl	13be4 <__assert_fail@plt+0x276c>
   13c3c:	add	ip, r0, #32768	; 0x8000
   13c40:	cmp	ip, #65536	; 0x10000
   13c44:	bcs	13c50 <__assert_fail@plt+0x27d8>
   13c48:	sxth	r0, r0
   13c4c:	pop	{r3, r4, r5, pc}
   13c50:	ldr	r1, [pc, #16]	; 13c68 <__assert_fail@plt+0x27f0>
   13c54:	mov	r2, r5
   13c58:	mov	r3, r4
   13c5c:	mov	r0, #1
   13c60:	add	r1, pc, r1
   13c64:	bl	113c4 <errx@plt>
   13c68:	ldrdeq	r3, [r0], -r0
   13c6c:	mov	r2, #10
   13c70:	b	13660 <__assert_fail@plt+0x21e8>
   13c74:	push	{r3, r4, r5, r6, r7, lr}
   13c78:	mov	r6, r0
   13c7c:	mov	r7, r1
   13c80:	bl	13c6c <__assert_fail@plt+0x27f4>
   13c84:	mvn	r4, #0
   13c88:	mov	r5, #0
   13c8c:	cmp	r1, r5
   13c90:	cmpeq	r0, r4
   13c94:	popls	{r3, r4, r5, r6, r7, pc}
   13c98:	ldr	r1, [pc, #16]	; 13cb0 <__assert_fail@plt+0x2838>
   13c9c:	mov	r2, r7
   13ca0:	mov	r3, r6
   13ca4:	mov	r0, #1
   13ca8:	add	r1, pc, r1
   13cac:	bl	113c4 <errx@plt>
   13cb0:	andeq	r3, r0, r8, lsl #17
   13cb4:	push	{r3, r4, r5, lr}
   13cb8:	mov	r4, r0
   13cbc:	mov	r5, r1
   13cc0:	bl	13c74 <__assert_fail@plt+0x27fc>
   13cc4:	cmp	r0, #65536	; 0x10000
   13cc8:	bcs	13cd4 <__assert_fail@plt+0x285c>
   13ccc:	uxth	r0, r0
   13cd0:	pop	{r3, r4, r5, pc}
   13cd4:	ldr	r1, [pc, #16]	; 13cec <__assert_fail@plt+0x2874>
   13cd8:	mov	r2, r5
   13cdc:	mov	r3, r4
   13ce0:	mov	r0, #1
   13ce4:	add	r1, pc, r1
   13ce8:	bl	113c4 <errx@plt>
   13cec:	andeq	r3, r0, ip, asr #16
   13cf0:	mov	r2, #16
   13cf4:	b	13660 <__assert_fail@plt+0x21e8>
   13cf8:	ldr	r3, [pc, #216]	; 13dd8 <__assert_fail@plt+0x2960>
   13cfc:	push	{r4, r5, r6, r7, r8, lr}
   13d00:	subs	r4, r0, #0
   13d04:	ldr	r0, [pc, #208]	; 13ddc <__assert_fail@plt+0x2964>
   13d08:	add	r3, pc, r3
   13d0c:	sub	sp, sp, #8
   13d10:	mov	r5, #0
   13d14:	mov	r7, r1
   13d18:	ldr	r6, [r3, r0]
   13d1c:	str	r5, [sp]
   13d20:	ldr	r3, [r6]
   13d24:	str	r3, [sp, #4]
   13d28:	beq	13d38 <__assert_fail@plt+0x28c0>
   13d2c:	ldrsb	r3, [r4]
   13d30:	cmp	r3, r5
   13d34:	bne	13d60 <__assert_fail@plt+0x28e8>
   13d38:	bl	112f8 <__errno_location@plt>
   13d3c:	ldr	r3, [r0]
   13d40:	cmp	r3, #0
   13d44:	bne	13d84 <__assert_fail@plt+0x290c>
   13d48:	ldr	r1, [pc, #144]	; 13de0 <__assert_fail@plt+0x2968>
   13d4c:	mov	r2, r7
   13d50:	mov	r3, r4
   13d54:	mov	r0, #1
   13d58:	add	r1, pc, r1
   13d5c:	bl	113c4 <errx@plt>
   13d60:	bl	112f8 <__errno_location@plt>
   13d64:	mov	r1, sp
   13d68:	mov	r8, r0
   13d6c:	str	r5, [r0]
   13d70:	mov	r0, r4
   13d74:	bl	11370 <strtod@plt>
   13d78:	ldr	r3, [r8]
   13d7c:	cmp	r3, r5
   13d80:	beq	13d9c <__assert_fail@plt+0x2924>
   13d84:	ldr	r1, [pc, #88]	; 13de4 <__assert_fail@plt+0x296c>
   13d88:	mov	r2, r7
   13d8c:	mov	r3, r4
   13d90:	mov	r0, #1
   13d94:	add	r1, pc, r1
   13d98:	bl	1122c <err@plt>
   13d9c:	ldr	r3, [sp]
   13da0:	cmp	r4, r3
   13da4:	beq	13d48 <__assert_fail@plt+0x28d0>
   13da8:	cmp	r3, #0
   13dac:	beq	13dbc <__assert_fail@plt+0x2944>
   13db0:	ldrsb	r3, [r3]
   13db4:	cmp	r3, #0
   13db8:	bne	13d48 <__assert_fail@plt+0x28d0>
   13dbc:	ldr	r2, [sp, #4]
   13dc0:	ldr	r3, [r6]
   13dc4:	cmp	r2, r3
   13dc8:	bne	13dd4 <__assert_fail@plt+0x295c>
   13dcc:	add	sp, sp, #8
   13dd0:	pop	{r4, r5, r6, r7, r8, pc}
   13dd4:	bl	111f0 <__stack_chk_fail@plt>
   13dd8:	strdeq	r4, [r1], -r0
   13ddc:	andeq	r0, r0, ip, lsr #2
   13de0:	ldrdeq	r3, [r0], -r8
   13de4:	muleq	r0, ip, r7
   13de8:	ldr	r3, [pc, #220]	; 13ecc <__assert_fail@plt+0x2a54>
   13dec:	push	{r4, r5, r6, r7, r8, lr}
   13df0:	subs	r4, r0, #0
   13df4:	ldr	r0, [pc, #212]	; 13ed0 <__assert_fail@plt+0x2a58>
   13df8:	add	r3, pc, r3
   13dfc:	sub	sp, sp, #8
   13e00:	mov	r5, #0
   13e04:	mov	r7, r1
   13e08:	ldr	r6, [r3, r0]
   13e0c:	str	r5, [sp]
   13e10:	ldr	r3, [r6]
   13e14:	str	r3, [sp, #4]
   13e18:	beq	13e28 <__assert_fail@plt+0x29b0>
   13e1c:	ldrsb	r3, [r4]
   13e20:	cmp	r3, r5
   13e24:	bne	13e50 <__assert_fail@plt+0x29d8>
   13e28:	bl	112f8 <__errno_location@plt>
   13e2c:	ldr	r3, [r0]
   13e30:	cmp	r3, #0
   13e34:	bne	13e78 <__assert_fail@plt+0x2a00>
   13e38:	ldr	r1, [pc, #148]	; 13ed4 <__assert_fail@plt+0x2a5c>
   13e3c:	mov	r2, r7
   13e40:	mov	r3, r4
   13e44:	mov	r0, #1
   13e48:	add	r1, pc, r1
   13e4c:	bl	113c4 <errx@plt>
   13e50:	bl	112f8 <__errno_location@plt>
   13e54:	mov	r1, sp
   13e58:	mov	r2, #10
   13e5c:	mov	r8, r0
   13e60:	str	r5, [r0]
   13e64:	mov	r0, r4
   13e68:	bl	11154 <strtol@plt>
   13e6c:	ldr	r3, [r8]
   13e70:	cmp	r3, r5
   13e74:	beq	13e90 <__assert_fail@plt+0x2a18>
   13e78:	ldr	r1, [pc, #88]	; 13ed8 <__assert_fail@plt+0x2a60>
   13e7c:	mov	r2, r7
   13e80:	mov	r3, r4
   13e84:	mov	r0, #1
   13e88:	add	r1, pc, r1
   13e8c:	bl	1122c <err@plt>
   13e90:	ldr	r3, [sp]
   13e94:	cmp	r4, r3
   13e98:	beq	13e38 <__assert_fail@plt+0x29c0>
   13e9c:	cmp	r3, #0
   13ea0:	beq	13eb0 <__assert_fail@plt+0x2a38>
   13ea4:	ldrsb	r3, [r3]
   13ea8:	cmp	r3, #0
   13eac:	bne	13e38 <__assert_fail@plt+0x29c0>
   13eb0:	ldr	r2, [sp, #4]
   13eb4:	ldr	r3, [r6]
   13eb8:	cmp	r2, r3
   13ebc:	bne	13ec8 <__assert_fail@plt+0x2a50>
   13ec0:	add	sp, sp, #8
   13ec4:	pop	{r4, r5, r6, r7, r8, pc}
   13ec8:	bl	111f0 <__stack_chk_fail@plt>
   13ecc:	andeq	r4, r1, r0, lsl #4
   13ed0:	andeq	r0, r0, ip, lsr #2
   13ed4:	andeq	r3, r0, r8, ror #13
   13ed8:	andeq	r3, r0, r8, lsr #13
   13edc:	ldr	r3, [pc, #220]	; 13fc0 <__assert_fail@plt+0x2b48>
   13ee0:	push	{r4, r5, r6, r7, r8, lr}
   13ee4:	subs	r4, r0, #0
   13ee8:	ldr	r0, [pc, #212]	; 13fc4 <__assert_fail@plt+0x2b4c>
   13eec:	add	r3, pc, r3
   13ef0:	sub	sp, sp, #8
   13ef4:	mov	r5, #0
   13ef8:	mov	r7, r1
   13efc:	ldr	r6, [r3, r0]
   13f00:	str	r5, [sp]
   13f04:	ldr	r3, [r6]
   13f08:	str	r3, [sp, #4]
   13f0c:	beq	13f1c <__assert_fail@plt+0x2aa4>
   13f10:	ldrsb	r3, [r4]
   13f14:	cmp	r3, r5
   13f18:	bne	13f44 <__assert_fail@plt+0x2acc>
   13f1c:	bl	112f8 <__errno_location@plt>
   13f20:	ldr	r3, [r0]
   13f24:	cmp	r3, #0
   13f28:	bne	13f6c <__assert_fail@plt+0x2af4>
   13f2c:	ldr	r1, [pc, #148]	; 13fc8 <__assert_fail@plt+0x2b50>
   13f30:	mov	r2, r7
   13f34:	mov	r3, r4
   13f38:	mov	r0, #1
   13f3c:	add	r1, pc, r1
   13f40:	bl	113c4 <errx@plt>
   13f44:	bl	112f8 <__errno_location@plt>
   13f48:	mov	r1, sp
   13f4c:	mov	r2, #10
   13f50:	mov	r8, r0
   13f54:	str	r5, [r0]
   13f58:	mov	r0, r4
   13f5c:	bl	112c8 <strtoul@plt>
   13f60:	ldr	r3, [r8]
   13f64:	cmp	r3, r5
   13f68:	beq	13f84 <__assert_fail@plt+0x2b0c>
   13f6c:	ldr	r1, [pc, #88]	; 13fcc <__assert_fail@plt+0x2b54>
   13f70:	mov	r2, r7
   13f74:	mov	r3, r4
   13f78:	mov	r0, #1
   13f7c:	add	r1, pc, r1
   13f80:	bl	1122c <err@plt>
   13f84:	ldr	r3, [sp]
   13f88:	cmp	r4, r3
   13f8c:	beq	13f2c <__assert_fail@plt+0x2ab4>
   13f90:	cmp	r3, #0
   13f94:	beq	13fa4 <__assert_fail@plt+0x2b2c>
   13f98:	ldrsb	r3, [r3]
   13f9c:	cmp	r3, #0
   13fa0:	bne	13f2c <__assert_fail@plt+0x2ab4>
   13fa4:	ldr	r2, [sp, #4]
   13fa8:	ldr	r3, [r6]
   13fac:	cmp	r2, r3
   13fb0:	bne	13fbc <__assert_fail@plt+0x2b44>
   13fb4:	add	sp, sp, #8
   13fb8:	pop	{r4, r5, r6, r7, r8, pc}
   13fbc:	bl	111f0 <__stack_chk_fail@plt>
   13fc0:	andeq	r4, r1, ip, lsl #2
   13fc4:	andeq	r0, r0, ip, lsr #2
   13fc8:	strdeq	r3, [r0], -r4
   13fcc:			; <UNDEFINED> instruction: 0x000035b4
   13fd0:	ldr	ip, [pc, #132]	; 1405c <__assert_fail@plt+0x2be4>
   13fd4:	push	{r4, r5, r6, lr}
   13fd8:	add	ip, pc, ip
   13fdc:	ldr	lr, [pc, #124]	; 14060 <__assert_fail@plt+0x2be8>
   13fe0:	sub	sp, sp, #16
   13fe4:	mov	r6, r1
   13fe8:	mov	r5, r0
   13fec:	mov	r1, sp
   13ff0:	ldr	r4, [ip, lr]
   13ff4:	ldr	ip, [r4]
   13ff8:	str	ip, [sp, #12]
   13ffc:	bl	139c4 <__assert_fail@plt+0x254c>
   14000:	cmp	r0, #0
   14004:	bne	14024 <__assert_fail@plt+0x2bac>
   14008:	ldr	r2, [sp, #12]
   1400c:	ldr	r3, [r4]
   14010:	ldrd	r0, [sp]
   14014:	cmp	r2, r3
   14018:	bne	14058 <__assert_fail@plt+0x2be0>
   1401c:	add	sp, sp, #16
   14020:	pop	{r4, r5, r6, pc}
   14024:	bl	112f8 <__errno_location@plt>
   14028:	mov	r2, r6
   1402c:	ldr	r3, [r0]
   14030:	mov	r0, #1
   14034:	cmp	r3, #0
   14038:	mov	r3, r5
   1403c:	beq	1404c <__assert_fail@plt+0x2bd4>
   14040:	ldr	r1, [pc, #28]	; 14064 <__assert_fail@plt+0x2bec>
   14044:	add	r1, pc, r1
   14048:	bl	1122c <err@plt>
   1404c:	ldr	r1, [pc, #20]	; 14068 <__assert_fail@plt+0x2bf0>
   14050:	add	r1, pc, r1
   14054:	bl	113c4 <errx@plt>
   14058:	bl	111f0 <__stack_chk_fail@plt>
   1405c:	andeq	r4, r1, r0, lsr #32
   14060:	andeq	r0, r0, ip, lsr #2
   14064:	andeq	r3, r0, ip, ror #9
   14068:	andeq	r3, r0, r0, ror #9
   1406c:	push	{r4, lr}
   14070:	mov	r4, r1
   14074:	mov	r1, r2
   14078:	bl	13cf8 <__assert_fail@plt+0x2880>
   1407c:	vldr	d7, [pc, #28]	; 140a0 <__assert_fail@plt+0x2c28>
   14080:	vcvt.s32.f64	s11, d0
   14084:	vcvt.f64.s32	d6, s11
   14088:	vstr	s11, [r4]
   1408c:	vsub.f64	d0, d0, d6
   14090:	vmul.f64	d0, d0, d7
   14094:	vcvt.s32.f64	s0, d0
   14098:	vstr	s0, [r4, #4]
   1409c:	pop	{r4, pc}
   140a0:	andeq	r0, r0, r0
   140a4:	smlawbmi	lr, r0, r4, r8
   140a8:	and	r3, r0, #61440	; 0xf000
   140ac:	cmp	r3, #16384	; 0x4000
   140b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   140b4:	moveq	r3, #100	; 0x64
   140b8:	beq	14130 <__assert_fail@plt+0x2cb8>
   140bc:	cmp	r3, #40960	; 0xa000
   140c0:	moveq	r3, #108	; 0x6c
   140c4:	beq	14130 <__assert_fail@plt+0x2cb8>
   140c8:	cmp	r3, #8192	; 0x2000
   140cc:	moveq	r3, #99	; 0x63
   140d0:	beq	14130 <__assert_fail@plt+0x2cb8>
   140d4:	cmp	r3, #24576	; 0x6000
   140d8:	moveq	r3, #98	; 0x62
   140dc:	beq	14130 <__assert_fail@plt+0x2cb8>
   140e0:	cmp	r3, #49152	; 0xc000
   140e4:	moveq	r3, #115	; 0x73
   140e8:	beq	14130 <__assert_fail@plt+0x2cb8>
   140ec:	cmp	r3, #4096	; 0x1000
   140f0:	moveq	r3, #112	; 0x70
   140f4:	beq	14130 <__assert_fail@plt+0x2cb8>
   140f8:	cmp	r3, #32768	; 0x8000
   140fc:	beq	1412c <__assert_fail@plt+0x2cb4>
   14100:	mov	r4, #9
   14104:	mov	r3, #8
   14108:	mov	r6, #7
   1410c:	mov	r7, #6
   14110:	mov	r2, #5
   14114:	mov	r8, #4
   14118:	mov	r9, #3
   1411c:	mov	ip, #2
   14120:	mov	sl, #1
   14124:	mov	fp, #0
   14128:	b	1415c <__assert_fail@plt+0x2ce4>
   1412c:	mov	r3, #45	; 0x2d
   14130:	strb	r3, [r1]
   14134:	mov	r4, #10
   14138:	mov	r3, #9
   1413c:	mov	r6, #8
   14140:	mov	r7, #7
   14144:	mov	r2, #6
   14148:	mov	r8, #5
   1414c:	mov	r9, #4
   14150:	mov	ip, #3
   14154:	mov	sl, #2
   14158:	mov	fp, #1
   1415c:	tst	r0, #256	; 0x100
   14160:	add	ip, r1, ip
   14164:	moveq	r5, #45	; 0x2d
   14168:	movne	r5, #114	; 0x72
   1416c:	tst	r0, #128	; 0x80
   14170:	strb	r5, [r1, fp]
   14174:	moveq	r5, #45	; 0x2d
   14178:	movne	r5, #119	; 0x77
   1417c:	tst	r0, #2048	; 0x800
   14180:	strb	r5, [r1, sl]
   14184:	beq	14220 <__assert_fail@plt+0x2da8>
   14188:	tst	r0, #64	; 0x40
   1418c:	moveq	r5, #83	; 0x53
   14190:	movne	r5, #115	; 0x73
   14194:	tst	r0, #32
   14198:	strb	r5, [ip]
   1419c:	add	r2, r1, r2
   141a0:	moveq	ip, #45	; 0x2d
   141a4:	movne	ip, #114	; 0x72
   141a8:	tst	r0, #16
   141ac:	strb	ip, [r1, r9]
   141b0:	moveq	ip, #45	; 0x2d
   141b4:	movne	ip, #119	; 0x77
   141b8:	tst	r0, #1024	; 0x400
   141bc:	strb	ip, [r1, r8]
   141c0:	beq	14240 <__assert_fail@plt+0x2dc8>
   141c4:	tst	r0, #8
   141c8:	moveq	ip, #83	; 0x53
   141cc:	movne	ip, #115	; 0x73
   141d0:	tst	r0, #4
   141d4:	strb	ip, [r2]
   141d8:	add	r3, r1, r3
   141dc:	moveq	r2, #45	; 0x2d
   141e0:	movne	r2, #114	; 0x72
   141e4:	tst	r0, #2
   141e8:	strb	r2, [r1, r7]
   141ec:	moveq	r2, #45	; 0x2d
   141f0:	movne	r2, #119	; 0x77
   141f4:	tst	r0, #512	; 0x200
   141f8:	strb	r2, [r1, r6]
   141fc:	beq	14230 <__assert_fail@plt+0x2db8>
   14200:	tst	r0, #1
   14204:	moveq	r2, #84	; 0x54
   14208:	movne	r2, #116	; 0x74
   1420c:	strb	r2, [r3]
   14210:	mov	r3, #0
   14214:	strb	r3, [r1, r4]
   14218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1421c:	bx	lr
   14220:	tst	r0, #64	; 0x40
   14224:	moveq	r5, #45	; 0x2d
   14228:	movne	r5, #120	; 0x78
   1422c:	b	14194 <__assert_fail@plt+0x2d1c>
   14230:	tst	r0, #1
   14234:	moveq	r2, #45	; 0x2d
   14238:	movne	r2, #120	; 0x78
   1423c:	b	1420c <__assert_fail@plt+0x2d94>
   14240:	tst	r0, #8
   14244:	moveq	ip, #45	; 0x2d
   14248:	movne	ip, #120	; 0x78
   1424c:	b	141d0 <__assert_fail@plt+0x2d58>
   14250:	ldr	r1, [pc, #580]	; 1449c <__assert_fail@plt+0x3024>
   14254:	tst	r0, #2
   14258:	ldr	ip, [pc, #576]	; 144a0 <__assert_fail@plt+0x3028>
   1425c:	add	r1, pc, r1
   14260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14264:	sub	sp, sp, #100	; 0x64
   14268:	ldr	r6, [r1, ip]
   1426c:	addeq	r7, sp, #52	; 0x34
   14270:	addne	lr, sp, #53	; 0x35
   14274:	addne	r7, sp, #52	; 0x34
   14278:	moveq	lr, r7
   1427c:	mov	ip, #10
   14280:	ldr	r1, [r6]
   14284:	str	r1, [sp, #92]	; 0x5c
   14288:	movne	r1, #32
   1428c:	strbne	r1, [sp, #52]	; 0x34
   14290:	mov	r1, #1
   14294:	sub	r9, ip, #32
   14298:	rsb	r8, ip, #32
   1429c:	lsl	r5, r1, r9
   142a0:	lsl	r4, r1, ip
   142a4:	orr	r5, r5, r1, lsr r8
   142a8:	cmp	r3, r5
   142ac:	cmpeq	r2, r4
   142b0:	bcc	1441c <__assert_fail@plt+0x2fa4>
   142b4:	add	ip, ip, #10
   142b8:	cmp	ip, #70	; 0x46
   142bc:	bne	14294 <__assert_fail@plt+0x2e1c>
   142c0:	mov	r1, #60	; 0x3c
   142c4:	movw	r5, #26215	; 0x6667
   142c8:	movt	r5, #26214	; 0x6666
   142cc:	ldr	r8, [pc, #464]	; 144a4 <__assert_fail@plt+0x302c>
   142d0:	mov	fp, #1
   142d4:	smull	sl, r9, r5, r1
   142d8:	add	r8, pc, r8
   142dc:	str	r8, [sp, #36]	; 0x24
   142e0:	sub	r8, r1, #32
   142e4:	asr	r4, r1, #31
   142e8:	lsl	r5, fp, r8
   142ec:	str	r4, [sp, #44]	; 0x2c
   142f0:	lsl	r4, fp, r1
   142f4:	subs	r4, r4, #1
   142f8:	str	r9, [sp, #40]	; 0x28
   142fc:	rsb	r9, r1, #32
   14300:	ldr	sl, [sp, #40]	; 0x28
   14304:	orr	r5, r5, fp, lsr r9
   14308:	ldr	fp, [sp, #44]	; 0x2c
   1430c:	sbc	r5, r5, #0
   14310:	tst	r0, #1
   14314:	lsr	r1, r2, r1
   14318:	rsb	fp, fp, sl, asr #2
   1431c:	ldr	sl, [sp, #36]	; 0x24
   14320:	orr	r1, r1, r3, lsl r9
   14324:	and	r5, r5, r3
   14328:	orr	r8, r1, r3, lsr r8
   1432c:	and	r4, r4, r2
   14330:	ldrb	r0, [sl, fp]
   14334:	add	r3, lr, #1
   14338:	strb	r0, [lr]
   1433c:	bne	14400 <__assert_fail@plt+0x2f88>
   14340:	orrs	fp, r4, r5
   14344:	mov	r2, #0
   14348:	strb	r2, [r3]
   1434c:	beq	14434 <__assert_fail@plt+0x2fbc>
   14350:	sub	lr, ip, #20
   14354:	sub	ip, ip, #52	; 0x34
   14358:	rsb	r3, lr, #32
   1435c:	lsr	r0, r4, lr
   14360:	orr	r0, r0, r5, lsl r3
   14364:	lsr	r1, r5, lr
   14368:	orr	r0, r0, r5, lsr ip
   1436c:	mov	r2, #100	; 0x64
   14370:	adds	r0, r0, #50	; 0x32
   14374:	mov	r3, #0
   14378:	adc	r1, r1, #0
   1437c:	bl	15ff0 <__assert_fail@plt+0x4b78>
   14380:	mov	r4, r0
   14384:	mov	r5, r1
   14388:	cmp	r5, #0
   1438c:	cmpeq	r4, #10
   14390:	addeq	r8, r8, #1
   14394:	beq	14434 <__assert_fail@plt+0x2fbc>
   14398:	orrs	r2, r4, r5
   1439c:	beq	14434 <__assert_fail@plt+0x2fbc>
   143a0:	bl	113f4 <localeconv@plt>
   143a4:	cmp	r0, #0
   143a8:	beq	14480 <__assert_fail@plt+0x3008>
   143ac:	ldr	r3, [r0]
   143b0:	cmp	r3, #0
   143b4:	beq	14490 <__assert_fail@plt+0x3018>
   143b8:	ldrsb	r2, [r3]
   143bc:	cmp	r2, #0
   143c0:	ldreq	r3, [pc, #224]	; 144a8 <__assert_fail@plt+0x3030>
   143c4:	addeq	r3, pc, r3
   143c8:	add	r9, sp, #60	; 0x3c
   143cc:	ldr	ip, [pc, #216]	; 144ac <__assert_fail@plt+0x3034>
   143d0:	mov	r1, #32
   143d4:	str	r3, [sp, #8]
   143d8:	add	ip, pc, ip
   143dc:	str	r8, [sp, #4]
   143e0:	mov	r0, r9
   143e4:	strd	r4, [sp, #16]
   143e8:	mov	r3, r1
   143ec:	str	r7, [sp, #24]
   143f0:	mov	r2, #1
   143f4:	str	ip, [sp]
   143f8:	bl	11460 <__snprintf_chk@plt>
   143fc:	b	14460 <__assert_fail@plt+0x2fe8>
   14400:	cmp	r0, #66	; 0x42
   14404:	addne	r3, lr, #3
   14408:	movne	r1, #105	; 0x69
   1440c:	movne	r2, #66	; 0x42
   14410:	strbne	r1, [lr, #1]
   14414:	strbne	r2, [lr, #2]
   14418:	b	14340 <__assert_fail@plt+0x2ec8>
   1441c:	subs	r1, ip, #10
   14420:	strbeq	r1, [lr, #1]
   14424:	moveq	r3, #66	; 0x42
   14428:	moveq	r8, r2
   1442c:	strbeq	r3, [lr]
   14430:	bne	142c4 <__assert_fail@plt+0x2e4c>
   14434:	ldr	r3, [pc, #116]	; 144b0 <__assert_fail@plt+0x3038>
   14438:	add	r9, sp, #60	; 0x3c
   1443c:	mov	r1, #32
   14440:	str	r8, [sp, #4]
   14444:	add	r3, pc, r3
   14448:	str	r7, [sp, #8]
   1444c:	str	r3, [sp]
   14450:	mov	r0, r9
   14454:	mov	r3, r1
   14458:	mov	r2, #1
   1445c:	bl	11460 <__snprintf_chk@plt>
   14460:	mov	r0, r9
   14464:	bl	11328 <__strdup@plt>
   14468:	ldr	r2, [sp, #92]	; 0x5c
   1446c:	ldr	r3, [r6]
   14470:	cmp	r2, r3
   14474:	bne	1448c <__assert_fail@plt+0x3014>
   14478:	add	sp, sp, #100	; 0x64
   1447c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14480:	ldr	r3, [pc, #44]	; 144b4 <__assert_fail@plt+0x303c>
   14484:	add	r3, pc, r3
   14488:	b	143c8 <__assert_fail@plt+0x2f50>
   1448c:	bl	111f0 <__stack_chk_fail@plt>
   14490:	ldr	r3, [pc, #32]	; 144b8 <__assert_fail@plt+0x3040>
   14494:	add	r3, pc, r3
   14498:	b	143c8 <__assert_fail@plt+0x2f50>
   1449c:	muleq	r1, ip, sp
   144a0:	andeq	r0, r0, ip, lsr #2
   144a4:	andeq	r3, r0, r0, lsl #5
   144a8:	muleq	r0, r0, r1
   144ac:	andeq	r3, r0, r8, lsl #3
   144b0:	andeq	r3, r0, r8, lsr #2
   144b4:	ldrdeq	r3, [r0], -r0
   144b8:	andeq	r3, r0, r0, asr #1
   144bc:	cmp	r0, #0
   144c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   144c4:	mov	r8, r1
   144c8:	mov	sl, r2
   144cc:	mov	r9, r3
   144d0:	beq	1458c <__assert_fail@plt+0x3114>
   144d4:	ldrb	r5, [r0]
   144d8:	cmp	r5, #0
   144dc:	beq	1458c <__assert_fail@plt+0x3114>
   144e0:	cmp	r2, #0
   144e4:	cmpne	r1, #0
   144e8:	movne	ip, #0
   144ec:	moveq	ip, #1
   144f0:	beq	1458c <__assert_fail@plt+0x3114>
   144f4:	cmp	r3, #0
   144f8:	movne	r4, r0
   144fc:	movne	r6, ip
   14500:	bne	14514 <__assert_fail@plt+0x309c>
   14504:	b	1458c <__assert_fail@plt+0x3114>
   14508:	ldrb	r5, [r4, #1]!
   1450c:	cmp	r5, #0
   14510:	beq	14584 <__assert_fail@plt+0x310c>
   14514:	cmp	sl, r6
   14518:	bls	14594 <__assert_fail@plt+0x311c>
   1451c:	cmp	ip, #0
   14520:	ldrsb	r7, [r4, #1]
   14524:	moveq	ip, r4
   14528:	cmp	r5, #44	; 0x2c
   1452c:	mov	r0, ip
   14530:	moveq	r5, r4
   14534:	movne	r5, #0
   14538:	cmp	r7, #0
   1453c:	addeq	r5, r4, #1
   14540:	cmp	r5, #0
   14544:	rsb	r1, ip, r5
   14548:	beq	1457c <__assert_fail@plt+0x3104>
   1454c:	cmp	ip, r5
   14550:	bcs	1458c <__assert_fail@plt+0x3114>
   14554:	blx	r9
   14558:	mov	ip, #0
   1455c:	add	r3, r6, #1
   14560:	cmn	r0, #1
   14564:	beq	1458c <__assert_fail@plt+0x3114>
   14568:	str	r0, [r8, r6, lsl #2]
   1456c:	mov	r6, r3
   14570:	ldrsb	r2, [r5]
   14574:	cmp	r2, ip
   14578:	beq	1459c <__assert_fail@plt+0x3124>
   1457c:	cmn	r4, #1
   14580:	bne	14508 <__assert_fail@plt+0x3090>
   14584:	mov	r0, r6
   14588:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1458c:	mvn	r0, #0
   14590:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14594:	mvn	r0, #1
   14598:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1459c:	mov	r6, r3
   145a0:	b	14584 <__assert_fail@plt+0x310c>
   145a4:	cmp	r0, #0
   145a8:	push	{r4, lr}
   145ac:	mov	r4, r3
   145b0:	beq	14628 <__assert_fail@plt+0x31b0>
   145b4:	ldrb	ip, [r0]
   145b8:	cmp	ip, #0
   145bc:	beq	14628 <__assert_fail@plt+0x31b0>
   145c0:	cmp	r3, #0
   145c4:	beq	14628 <__assert_fail@plt+0x31b0>
   145c8:	ldr	r3, [r3]
   145cc:	cmp	r3, #0
   145d0:	blt	14628 <__assert_fail@plt+0x31b0>
   145d4:	cmp	r3, r2
   145d8:	bhi	14628 <__assert_fail@plt+0x31b0>
   145dc:	cmp	ip, #43	; 0x2b
   145e0:	lsleq	ip, r3, #2
   145e4:	addeq	r0, r0, #1
   145e8:	movne	ip, #0
   145ec:	strne	ip, [r4]
   145f0:	movne	r3, ip
   145f4:	add	r1, r1, ip
   145f8:	rsb	r2, r3, r2
   145fc:	ldr	r3, [sp, #8]
   14600:	bl	144bc <__assert_fail@plt+0x3044>
   14604:	subs	r3, r0, #0
   14608:	ble	14620 <__assert_fail@plt+0x31a8>
   1460c:	ldr	r2, [r4]
   14610:	mov	r0, r3
   14614:	add	r3, r2, r3
   14618:	str	r3, [r4]
   1461c:	pop	{r4, pc}
   14620:	mov	r0, r3
   14624:	pop	{r4, pc}
   14628:	mvn	r0, #0
   1462c:	pop	{r4, pc}
   14630:	cmp	r2, #0
   14634:	cmpne	r0, #0
   14638:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1463c:	mov	r4, r0
   14640:	mov	r7, r2
   14644:	movne	r3, #0
   14648:	moveq	r3, #1
   1464c:	mov	r9, r1
   14650:	beq	146ec <__assert_fail@plt+0x3274>
   14654:	cmp	r1, #0
   14658:	beq	146ec <__assert_fail@plt+0x3274>
   1465c:	mov	r6, r0
   14660:	mov	r8, #1
   14664:	ldrb	r5, [r6], #1
   14668:	cmp	r5, #0
   1466c:	beq	146dc <__assert_fail@plt+0x3264>
   14670:	cmp	r5, #44	; 0x2c
   14674:	ldrsb	r0, [r4, #1]
   14678:	moveq	r5, r4
   1467c:	movne	r5, #0
   14680:	cmp	r3, #0
   14684:	moveq	r3, r4
   14688:	cmp	r0, #0
   1468c:	mov	r0, r3
   14690:	moveq	r5, r6
   14694:	cmp	r5, #0
   14698:	rsb	r1, r3, r5
   1469c:	beq	146d4 <__assert_fail@plt+0x325c>
   146a0:	cmp	r3, r5
   146a4:	bcs	146e4 <__assert_fail@plt+0x326c>
   146a8:	blx	r7
   146ac:	mov	r3, #0
   146b0:	cmp	r0, #0
   146b4:	and	r2, r0, #7
   146b8:	poplt	{r3, r4, r5, r6, r7, r8, r9, pc}
   146bc:	ldrb	r1, [r9, r0, asr #3]
   146c0:	orr	r2, r1, r8, lsl r2
   146c4:	strb	r2, [r9, r0, asr #3]
   146c8:	ldrsb	r2, [r5]
   146cc:	cmp	r2, r3
   146d0:	beq	146dc <__assert_fail@plt+0x3264>
   146d4:	adds	r4, r4, #1
   146d8:	bne	14664 <__assert_fail@plt+0x31ec>
   146dc:	mov	r0, #0
   146e0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   146e4:	mvn	r0, #0
   146e8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   146ec:	mvn	r0, #21
   146f0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   146f4:	cmp	r2, #0
   146f8:	cmpne	r0, #0
   146fc:	push	{r4, r5, r6, r7, r8, lr}
   14700:	movne	r3, #0
   14704:	moveq	r3, #1
   14708:	mov	r4, r0
   1470c:	mov	r8, r2
   14710:	mov	r7, r1
   14714:	beq	147a8 <__assert_fail@plt+0x3330>
   14718:	cmp	r1, #0
   1471c:	beq	147a8 <__assert_fail@plt+0x3330>
   14720:	mov	r6, r0
   14724:	ldrb	r5, [r6], #1
   14728:	cmp	r5, #0
   1472c:	beq	14798 <__assert_fail@plt+0x3320>
   14730:	cmp	r5, #44	; 0x2c
   14734:	ldrsb	r0, [r4, #1]
   14738:	moveq	r5, r4
   1473c:	movne	r5, #0
   14740:	cmp	r3, #0
   14744:	moveq	r3, r4
   14748:	cmp	r0, #0
   1474c:	mov	r0, r3
   14750:	moveq	r5, r6
   14754:	cmp	r5, #0
   14758:	rsb	r1, r3, r5
   1475c:	beq	14790 <__assert_fail@plt+0x3318>
   14760:	cmp	r3, r5
   14764:	bcs	147a0 <__assert_fail@plt+0x3328>
   14768:	blx	r8
   1476c:	mov	r3, #0
   14770:	cmp	r0, #0
   14774:	poplt	{r4, r5, r6, r7, r8, pc}
   14778:	ldr	r2, [r7]
   1477c:	orr	r0, r2, r0
   14780:	str	r0, [r7]
   14784:	ldrsb	r2, [r5]
   14788:	cmp	r2, r3
   1478c:	beq	14798 <__assert_fail@plt+0x3320>
   14790:	adds	r4, r4, #1
   14794:	bne	14724 <__assert_fail@plt+0x32ac>
   14798:	mov	r0, #0
   1479c:	pop	{r4, r5, r6, r7, r8, pc}
   147a0:	mvn	r0, #0
   147a4:	pop	{r4, r5, r6, r7, r8, pc}
   147a8:	mvn	r0, #21
   147ac:	pop	{r4, r5, r6, r7, r8, pc}
   147b0:	ldr	ip, [pc, #380]	; 14934 <__assert_fail@plt+0x34bc>
   147b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   147b8:	subs	r4, r0, #0
   147bc:	ldr	r0, [pc, #372]	; 14938 <__assert_fail@plt+0x34c0>
   147c0:	add	ip, pc, ip
   147c4:	mov	r6, r2
   147c8:	sub	sp, sp, #12
   147cc:	mov	r2, ip
   147d0:	mov	r8, #0
   147d4:	ldr	r7, [ip, r0]
   147d8:	mov	r9, r1
   147dc:	str	r8, [sp]
   147e0:	ldr	r2, [r7]
   147e4:	str	r2, [sp, #4]
   147e8:	beq	14858 <__assert_fail@plt+0x33e0>
   147ec:	str	r3, [r1]
   147f0:	str	r3, [r6]
   147f4:	bl	112f8 <__errno_location@plt>
   147f8:	str	r8, [r0]
   147fc:	mov	r5, r0
   14800:	ldrsb	r3, [r4]
   14804:	cmp	r3, #58	; 0x3a
   14808:	beq	14874 <__assert_fail@plt+0x33fc>
   1480c:	mov	r0, r4
   14810:	mov	r2, #10
   14814:	mov	r1, sp
   14818:	bl	11154 <strtol@plt>
   1481c:	str	r0, [r9]
   14820:	str	r0, [r6]
   14824:	ldr	r0, [r5]
   14828:	cmp	r0, #0
   1482c:	bne	14928 <__assert_fail@plt+0x34b0>
   14830:	ldr	r3, [sp]
   14834:	cmp	r3, #0
   14838:	beq	14928 <__assert_fail@plt+0x34b0>
   1483c:	cmp	r4, r3
   14840:	beq	14928 <__assert_fail@plt+0x34b0>
   14844:	ldrsb	r2, [r3]
   14848:	cmp	r2, #58	; 0x3a
   1484c:	beq	148c0 <__assert_fail@plt+0x3448>
   14850:	cmp	r2, #45	; 0x2d
   14854:	beq	148d0 <__assert_fail@plt+0x3458>
   14858:	mov	r0, #0
   1485c:	ldr	r2, [sp, #4]
   14860:	ldr	r3, [r7]
   14864:	cmp	r2, r3
   14868:	bne	14930 <__assert_fail@plt+0x34b8>
   1486c:	add	sp, sp, #12
   14870:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14874:	add	r4, r4, #1
   14878:	mov	r1, sp
   1487c:	mov	r2, #10
   14880:	mov	r0, r4
   14884:	bl	11154 <strtol@plt>
   14888:	str	r0, [r6]
   1488c:	ldr	r3, [r5]
   14890:	cmp	r3, #0
   14894:	bne	14928 <__assert_fail@plt+0x34b0>
   14898:	ldr	r3, [sp]
   1489c:	cmp	r3, #0
   148a0:	beq	14928 <__assert_fail@plt+0x34b0>
   148a4:	ldrsb	r2, [r3]
   148a8:	cmp	r2, #0
   148ac:	bne	14928 <__assert_fail@plt+0x34b0>
   148b0:	cmp	r4, r3
   148b4:	movne	r0, #0
   148b8:	mvneq	r0, #0
   148bc:	b	1485c <__assert_fail@plt+0x33e4>
   148c0:	ldrsb	r2, [r3, #1]
   148c4:	cmp	r2, #0
   148c8:	streq	r0, [r6]
   148cc:	beq	1485c <__assert_fail@plt+0x33e4>
   148d0:	add	r4, r3, #1
   148d4:	mov	ip, #0
   148d8:	mov	r1, sp
   148dc:	mov	r2, #10
   148e0:	mov	r0, r4
   148e4:	str	ip, [r5]
   148e8:	str	ip, [sp]
   148ec:	bl	11154 <strtol@plt>
   148f0:	str	r0, [r6]
   148f4:	ldr	r3, [r5]
   148f8:	cmp	r3, #0
   148fc:	bne	14928 <__assert_fail@plt+0x34b0>
   14900:	ldr	r2, [sp]
   14904:	cmp	r2, #0
   14908:	beq	14928 <__assert_fail@plt+0x34b0>
   1490c:	ldrsb	r3, [r2]
   14910:	cmp	r3, #0
   14914:	bne	14928 <__assert_fail@plt+0x34b0>
   14918:	cmp	r4, r2
   1491c:	movne	r0, #0
   14920:	mvneq	r0, #0
   14924:	b	1485c <__assert_fail@plt+0x33e4>
   14928:	mvn	r0, #0
   1492c:	b	1485c <__assert_fail@plt+0x33e4>
   14930:	bl	111f0 <__stack_chk_fail@plt>
   14934:	andeq	r3, r1, r8, lsr r8
   14938:	andeq	r0, r0, ip, lsr #2
   1493c:	rsbs	r2, r0, #1
   14940:	push	{r4, r5, r6, lr}
   14944:	movcc	r2, #0
   14948:	rsbs	r3, r1, #1
   1494c:	mov	r5, r0
   14950:	mov	r4, r1
   14954:	movcc	r3, #0
   14958:	ands	ip, r2, r3
   1495c:	bne	149c8 <__assert_fail@plt+0x3550>
   14960:	orrs	r3, r2, r3
   14964:	bne	149d0 <__assert_fail@plt+0x3558>
   14968:	bl	11148 <strcmp@plt>
   1496c:	cmp	r0, #0
   14970:	beq	149c8 <__assert_fail@plt+0x3550>
   14974:	mov	r0, r5
   14978:	bl	112d4 <strlen@plt>
   1497c:	mov	r6, r0
   14980:	mov	r0, r4
   14984:	bl	112d4 <strlen@plt>
   14988:	cmp	r6, #0
   1498c:	beq	149a0 <__assert_fail@plt+0x3528>
   14990:	sub	r3, r6, #1
   14994:	ldrsb	r2, [r5, r3]
   14998:	cmp	r2, #47	; 0x2f
   1499c:	moveq	r6, r3
   149a0:	cmp	r0, #0
   149a4:	beq	149b8 <__assert_fail@plt+0x3540>
   149a8:	sub	r3, r0, #1
   149ac:	ldrsb	r2, [r4, r3]
   149b0:	cmp	r2, #47	; 0x2f
   149b4:	moveq	r0, r3
   149b8:	cmp	r6, r0
   149bc:	beq	149d8 <__assert_fail@plt+0x3560>
   149c0:	mov	r0, #0
   149c4:	pop	{r4, r5, r6, pc}
   149c8:	mov	r0, #1
   149cc:	pop	{r4, r5, r6, pc}
   149d0:	mov	r0, ip
   149d4:	pop	{r4, r5, r6, pc}
   149d8:	mov	r0, r5
   149dc:	mov	r1, r4
   149e0:	mov	r2, r6
   149e4:	bl	1143c <strncmp@plt>
   149e8:	rsbs	r0, r0, #1
   149ec:	movcc	r0, #0
   149f0:	pop	{r4, r5, r6, pc}
   149f4:	ldr	r3, [pc, #248]	; 14af4 <__assert_fail@plt+0x367c>
   149f8:	cmp	r0, #0
   149fc:	cmpne	r1, #0
   14a00:	ldr	r2, [pc, #240]	; 14af8 <__assert_fail@plt+0x3680>
   14a04:	add	r3, pc, r3
   14a08:	push	{r4, r5, r6, r7, r8, r9, lr}
   14a0c:	sub	sp, sp, #20
   14a10:	ldr	r9, [r3, r2]
   14a14:	mov	r6, r1
   14a18:	addne	r8, sp, #4
   14a1c:	addne	r7, sp, #8
   14a20:	ldr	r3, [r9]
   14a24:	str	r3, [sp, #12]
   14a28:	bne	14a70 <__assert_fail@plt+0x35f8>
   14a2c:	b	14ae8 <__assert_fail@plt+0x3670>
   14a30:	cmp	r4, r3
   14a34:	bne	14ae8 <__assert_fail@plt+0x3670>
   14a38:	mov	r0, r5
   14a3c:	mov	r1, r6
   14a40:	mov	r2, r4
   14a44:	bl	1143c <strncmp@plt>
   14a48:	cmp	r0, #0
   14a4c:	bne	14ae8 <__assert_fail@plt+0x3670>
   14a50:	adds	r6, r6, r4
   14a54:	moveq	r3, #0
   14a58:	movne	r3, #1
   14a5c:	adds	r0, r5, r4
   14a60:	moveq	r3, #0
   14a64:	andne	r3, r3, #1
   14a68:	cmp	r3, #0
   14a6c:	beq	14ae8 <__assert_fail@plt+0x3670>
   14a70:	mov	r1, r8
   14a74:	bl	13530 <__assert_fail@plt+0x20b8>
   14a78:	mov	r1, r7
   14a7c:	mov	r5, r0
   14a80:	mov	r0, r6
   14a84:	bl	13530 <__assert_fail@plt+0x20b8>
   14a88:	ldr	r4, [sp, #4]
   14a8c:	ldr	r3, [sp, #8]
   14a90:	mov	r6, r0
   14a94:	adds	r0, r3, r4
   14a98:	beq	14acc <__assert_fail@plt+0x3654>
   14a9c:	cmp	r0, #1
   14aa0:	bne	14a30 <__assert_fail@plt+0x35b8>
   14aa4:	cmp	r5, #0
   14aa8:	beq	14ab8 <__assert_fail@plt+0x3640>
   14aac:	ldrsb	r2, [r5]
   14ab0:	cmp	r2, #47	; 0x2f
   14ab4:	beq	14ad0 <__assert_fail@plt+0x3658>
   14ab8:	cmp	r6, #0
   14abc:	beq	14a30 <__assert_fail@plt+0x35b8>
   14ac0:	ldrsb	r2, [r6]
   14ac4:	cmp	r2, #47	; 0x2f
   14ac8:	bne	14a30 <__assert_fail@plt+0x35b8>
   14acc:	mov	r0, #1
   14ad0:	ldr	r2, [sp, #12]
   14ad4:	ldr	r3, [r9]
   14ad8:	cmp	r2, r3
   14adc:	bne	14af0 <__assert_fail@plt+0x3678>
   14ae0:	add	sp, sp, #20
   14ae4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14ae8:	mov	r0, #0
   14aec:	b	14ad0 <__assert_fail@plt+0x3658>
   14af0:	bl	111f0 <__stack_chk_fail@plt>
   14af4:	strdeq	r3, [r1], -r4
   14af8:	andeq	r0, r0, ip, lsr #2
   14afc:	rsbs	r3, r0, #1
   14b00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b04:	movcc	r3, #0
   14b08:	rsbs	r4, r1, #1
   14b0c:	mov	r7, r1
   14b10:	mov	r6, r2
   14b14:	mov	sl, r0
   14b18:	movcc	r4, #0
   14b1c:	tst	r3, r4
   14b20:	bne	14b84 <__assert_fail@plt+0x370c>
   14b24:	cmp	r3, #0
   14b28:	bne	14b9c <__assert_fail@plt+0x3724>
   14b2c:	cmp	r4, #0
   14b30:	bne	14bac <__assert_fail@plt+0x3734>
   14b34:	bl	112d4 <strlen@plt>
   14b38:	mvn	r3, r0
   14b3c:	cmp	r6, r3
   14b40:	mov	r5, r0
   14b44:	bhi	14b94 <__assert_fail@plt+0x371c>
   14b48:	add	r9, r0, r6
   14b4c:	add	r0, r9, #1
   14b50:	bl	11268 <malloc@plt>
   14b54:	subs	r8, r0, #0
   14b58:	beq	14bb4 <__assert_fail@plt+0x373c>
   14b5c:	mov	r1, sl
   14b60:	mov	r2, r5
   14b64:	bl	111a8 <memcpy@plt>
   14b68:	add	r0, r8, r5
   14b6c:	mov	r1, r7
   14b70:	mov	r2, r6
   14b74:	bl	111a8 <memcpy@plt>
   14b78:	strb	r4, [r8, r9]
   14b7c:	mov	r0, r8
   14b80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b84:	mov	r0, #1
   14b88:	mov	r1, r0
   14b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b90:	b	11124 <calloc@plt>
   14b94:	mov	r0, r4
   14b98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b9c:	mov	r0, r1
   14ba0:	mov	r1, r2
   14ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ba8:	b	11220 <__strndup@plt>
   14bac:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14bb0:	b	11328 <__strdup@plt>
   14bb4:	mov	r0, r8
   14bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bbc:	push	{r3, r4, r5, lr}
   14bc0:	subs	r4, r1, #0
   14bc4:	mov	r5, r0
   14bc8:	beq	14be8 <__assert_fail@plt+0x3770>
   14bcc:	mov	r0, r4
   14bd0:	bl	112d4 <strlen@plt>
   14bd4:	mov	r1, r4
   14bd8:	mov	r2, r0
   14bdc:	mov	r0, r5
   14be0:	pop	{r3, r4, r5, lr}
   14be4:	b	14afc <__assert_fail@plt+0x3684>
   14be8:	mov	r2, r4
   14bec:	mov	r0, r5
   14bf0:	mov	r1, r4
   14bf4:	pop	{r3, r4, r5, lr}
   14bf8:	b	14afc <__assert_fail@plt+0x3684>
   14bfc:	push	{r1, r2, r3}
   14c00:	mov	r1, #1
   14c04:	push	{r4, r5, lr}
   14c08:	sub	sp, sp, #16
   14c0c:	ldr	lr, [pc, #124]	; 14c90 <__assert_fail@plt+0x3818>
   14c10:	add	ip, sp, #32
   14c14:	ldr	r4, [pc, #120]	; 14c94 <__assert_fail@plt+0x381c>
   14c18:	mov	r5, r0
   14c1c:	add	lr, pc, lr
   14c20:	mov	r3, ip
   14c24:	ldr	r2, [sp, #28]
   14c28:	add	r0, sp, #8
   14c2c:	ldr	r4, [lr, r4]
   14c30:	str	ip, [sp, #4]
   14c34:	ldr	ip, [r4]
   14c38:	str	ip, [sp, #12]
   14c3c:	bl	1131c <__vasprintf_chk@plt>
   14c40:	subs	r2, r0, #0
   14c44:	blt	14c84 <__assert_fail@plt+0x380c>
   14c48:	mov	r0, r5
   14c4c:	ldr	r1, [sp, #8]
   14c50:	bl	14afc <__assert_fail@plt+0x3684>
   14c54:	mov	r5, r0
   14c58:	ldr	r0, [sp, #8]
   14c5c:	bl	1116c <free@plt>
   14c60:	mov	r0, r5
   14c64:	ldr	r2, [sp, #12]
   14c68:	ldr	r3, [r4]
   14c6c:	cmp	r2, r3
   14c70:	bne	14c8c <__assert_fail@plt+0x3814>
   14c74:	add	sp, sp, #16
   14c78:	pop	{r4, r5, lr}
   14c7c:	add	sp, sp, #12
   14c80:	bx	lr
   14c84:	mov	r0, #0
   14c88:	b	14c64 <__assert_fail@plt+0x37ec>
   14c8c:	bl	111f0 <__stack_chk_fail@plt>
   14c90:	ldrdeq	r3, [r1], -ip
   14c94:	andeq	r0, r0, ip, lsr #2
   14c98:	ldr	ip, [pc, #372]	; 14e14 <__assert_fail@plt+0x399c>
   14c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ca0:	mov	r6, r0
   14ca4:	ldr	r0, [pc, #364]	; 14e18 <__assert_fail@plt+0x39a0>
   14ca8:	add	ip, pc, ip
   14cac:	ldr	r4, [r6]
   14cb0:	mov	r9, r3
   14cb4:	sub	sp, sp, #12
   14cb8:	mov	r7, r1
   14cbc:	ldr	r5, [ip, r0]
   14cc0:	mov	r8, r2
   14cc4:	ldrsb	ip, [r4]
   14cc8:	ldr	r3, [r5]
   14ccc:	cmp	ip, #0
   14cd0:	moveq	r0, ip
   14cd4:	str	r3, [sp, #4]
   14cd8:	beq	14d88 <__assert_fail@plt+0x3910>
   14cdc:	mov	r0, r4
   14ce0:	mov	r1, r2
   14ce4:	bl	1146c <strspn@plt>
   14ce8:	ldrb	sl, [r4, r0]
   14cec:	add	r4, r4, r0
   14cf0:	cmp	sl, #0
   14cf4:	beq	14e04 <__assert_fail@plt+0x398c>
   14cf8:	cmp	r9, #0
   14cfc:	beq	14da0 <__assert_fail@plt+0x3928>
   14d00:	sxtb	r9, sl
   14d04:	ldr	r0, [pc, #272]	; 14e1c <__assert_fail@plt+0x39a4>
   14d08:	mov	r1, r9
   14d0c:	add	r0, pc, r0
   14d10:	bl	112e0 <strchr@plt>
   14d14:	cmp	r0, #0
   14d18:	beq	14dc4 <__assert_fail@plt+0x394c>
   14d1c:	add	fp, r4, #1
   14d20:	mov	r1, sp
   14d24:	mov	r3, #0
   14d28:	strb	sl, [sp]
   14d2c:	mov	r0, fp
   14d30:	strb	r3, [sp, #1]
   14d34:	bl	135d0 <__assert_fail@plt+0x2158>
   14d38:	add	r3, r4, r0
   14d3c:	str	r0, [r7]
   14d40:	ldrb	r3, [r3, #1]
   14d44:	cmp	r3, #0
   14d48:	beq	14e04 <__assert_fail@plt+0x398c>
   14d4c:	sxtb	r3, r3
   14d50:	cmp	r9, r3
   14d54:	bne	14e04 <__assert_fail@plt+0x398c>
   14d58:	add	r0, r0, #2
   14d5c:	add	r7, r4, r0
   14d60:	ldrb	r1, [r4, r0]
   14d64:	cmp	r1, #0
   14d68:	beq	14d80 <__assert_fail@plt+0x3908>
   14d6c:	mov	r0, r8
   14d70:	sxtb	r1, r1
   14d74:	bl	112e0 <strchr@plt>
   14d78:	cmp	r0, #0
   14d7c:	beq	14e04 <__assert_fail@plt+0x398c>
   14d80:	mov	r0, fp
   14d84:	str	r7, [r6]
   14d88:	ldr	r2, [sp, #4]
   14d8c:	ldr	r3, [r5]
   14d90:	cmp	r2, r3
   14d94:	bne	14e10 <__assert_fail@plt+0x3998>
   14d98:	add	sp, sp, #12
   14d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14da0:	mov	r0, r4
   14da4:	mov	r1, r8
   14da8:	bl	11160 <strcspn@plt>
   14dac:	mov	r3, r0
   14db0:	mov	r0, r4
   14db4:	add	r4, r4, r3
   14db8:	str	r3, [r7]
   14dbc:	str	r4, [r6]
   14dc0:	b	14d88 <__assert_fail@plt+0x3910>
   14dc4:	mov	r1, r8
   14dc8:	mov	r0, r4
   14dcc:	bl	135d0 <__assert_fail@plt+0x2158>
   14dd0:	str	r0, [r7]
   14dd4:	add	r7, r4, r0
   14dd8:	ldrb	r1, [r4, r0]
   14ddc:	cmp	r1, #0
   14de0:	beq	14df8 <__assert_fail@plt+0x3980>
   14de4:	mov	r0, r8
   14de8:	sxtb	r1, r1
   14dec:	bl	112e0 <strchr@plt>
   14df0:	cmp	r0, #0
   14df4:	beq	14dbc <__assert_fail@plt+0x3944>
   14df8:	str	r7, [r6]
   14dfc:	mov	r0, r4
   14e00:	b	14d88 <__assert_fail@plt+0x3910>
   14e04:	str	r4, [r6]
   14e08:	mov	r0, #0
   14e0c:	b	14d88 <__assert_fail@plt+0x3910>
   14e10:	bl	111f0 <__stack_chk_fail@plt>
   14e14:	andeq	r3, r1, r0, asr r3
   14e18:	andeq	r0, r0, ip, lsr #2
   14e1c:	andeq	r2, r0, r8, ror #16
   14e20:	push	{r4, lr}
   14e24:	mov	r4, r0
   14e28:	b	14e34 <__assert_fail@plt+0x39bc>
   14e2c:	cmp	r0, #10
   14e30:	beq	14e4c <__assert_fail@plt+0x39d4>
   14e34:	mov	r0, r4
   14e38:	bl	11358 <fgetc@plt>
   14e3c:	cmn	r0, #1
   14e40:	bne	14e2c <__assert_fail@plt+0x39b4>
   14e44:	mov	r0, #1
   14e48:	pop	{r4, pc}
   14e4c:	mov	r0, #0
   14e50:	pop	{r4, pc}
   14e54:	push	{r3, r4, r5, lr}
   14e58:	subs	r5, r0, #0
   14e5c:	popeq	{r3, r4, r5, pc}
   14e60:	ldr	r0, [r5]
   14e64:	cmp	r0, #0
   14e68:	movne	r4, r5
   14e6c:	beq	14e80 <__assert_fail@plt+0x3a08>
   14e70:	bl	1116c <free@plt>
   14e74:	ldr	r0, [r4, #4]!
   14e78:	cmp	r0, #0
   14e7c:	bne	14e70 <__assert_fail@plt+0x39f8>
   14e80:	mov	r3, #0
   14e84:	str	r3, [r5]
   14e88:	pop	{r3, r4, r5, pc}
   14e8c:	push	{r4, lr}
   14e90:	mov	r4, r0
   14e94:	bl	14e54 <__assert_fail@plt+0x39dc>
   14e98:	mov	r0, r4
   14e9c:	bl	1116c <free@plt>
   14ea0:	mov	r0, #0
   14ea4:	pop	{r4, pc}
   14ea8:	subs	r3, r0, #0
   14eac:	beq	14ed4 <__assert_fail@plt+0x3a5c>
   14eb0:	ldr	r0, [r3]
   14eb4:	cmp	r0, #0
   14eb8:	bxeq	lr
   14ebc:	mov	r0, #0
   14ec0:	ldr	r2, [r3, #4]!
   14ec4:	add	r0, r0, #1
   14ec8:	cmp	r2, #0
   14ecc:	bne	14ec0 <__assert_fail@plt+0x3a48>
   14ed0:	bx	lr
   14ed4:	mov	r0, r3
   14ed8:	bx	lr
   14edc:	push	{r3, r4, r5, r6, r7, lr}
   14ee0:	mov	r6, r0
   14ee4:	bl	14ea8 <__assert_fail@plt+0x3a30>
   14ee8:	add	r0, r0, #1
   14eec:	lsl	r0, r0, #2
   14ef0:	bl	11268 <malloc@plt>
   14ef4:	subs	r7, r0, #0
   14ef8:	beq	14f60 <__assert_fail@plt+0x3ae8>
   14efc:	cmp	r6, #0
   14f00:	beq	14f4c <__assert_fail@plt+0x3ad4>
   14f04:	ldr	r0, [r6]
   14f08:	cmp	r0, #0
   14f0c:	beq	14f4c <__assert_fail@plt+0x3ad4>
   14f10:	mov	r4, r7
   14f14:	b	14f24 <__assert_fail@plt+0x3aac>
   14f18:	ldr	r0, [r6, #4]!
   14f1c:	cmp	r0, #0
   14f20:	beq	14f50 <__assert_fail@plt+0x3ad8>
   14f24:	bl	11328 <__strdup@plt>
   14f28:	cmp	r0, #0
   14f2c:	str	r0, [r4], #4
   14f30:	mov	r5, r0
   14f34:	mov	r3, r4
   14f38:	bne	14f18 <__assert_fail@plt+0x3aa0>
   14f3c:	mov	r0, r7
   14f40:	bl	14e8c <__assert_fail@plt+0x3a14>
   14f44:	mov	r0, r5
   14f48:	pop	{r3, r4, r5, r6, r7, pc}
   14f4c:	mov	r3, r7
   14f50:	mov	r2, #0
   14f54:	mov	r0, r7
   14f58:	str	r2, [r3]
   14f5c:	pop	{r3, r4, r5, r6, r7, pc}
   14f60:	mov	r0, r7
   14f64:	pop	{r3, r4, r5, r6, r7, pc}
   14f68:	ldr	r3, [pc, #284]	; 1508c <__assert_fail@plt+0x3c14>
   14f6c:	ldr	r2, [pc, #284]	; 15090 <__assert_fail@plt+0x3c18>
   14f70:	add	r3, pc, r3
   14f74:	push	{r4, r5, r6, r7, r8, lr}
   14f78:	subs	r7, r0, #0
   14f7c:	ldr	r6, [r3, r2]
   14f80:	sub	sp, sp, #8
   14f84:	mov	r4, r1
   14f88:	ldr	r3, [r6]
   14f8c:	str	r3, [sp, #4]
   14f90:	beq	15074 <__assert_fail@plt+0x3bfc>
   14f94:	adds	r5, r7, #1
   14f98:	add	r3, r1, #4
   14f9c:	movne	r5, #1
   14fa0:	mov	r1, r5
   14fa4:	b	14fb4 <__assert_fail@plt+0x3b3c>
   14fa8:	cmn	r2, #1
   14fac:	add	r3, r3, #4
   14fb0:	addne	r1, r1, #1
   14fb4:	str	r3, [sp]
   14fb8:	ldr	r2, [r3, #-4]
   14fbc:	cmp	r2, #0
   14fc0:	bne	14fa8 <__assert_fail@plt+0x3b30>
   14fc4:	add	r0, r1, #1
   14fc8:	lsl	r0, r0, #2
   14fcc:	bl	11268 <malloc@plt>
   14fd0:	subs	r8, r0, #0
   14fd4:	beq	15068 <__assert_fail@plt+0x3bf0>
   14fd8:	cmp	r5, #0
   14fdc:	beq	14ff8 <__assert_fail@plt+0x3b80>
   14fe0:	mov	r0, r7
   14fe4:	bl	11328 <__strdup@plt>
   14fe8:	cmp	r0, #0
   14fec:	str	r0, [r8]
   14ff0:	beq	15060 <__assert_fail@plt+0x3be8>
   14ff4:	mov	r5, #1
   14ff8:	sub	r7, r5, #-1073741823	; 0xc0000001
   14ffc:	add	r7, r8, r7, lsl #2
   15000:	b	15024 <__assert_fail@plt+0x3bac>
   15004:	cmn	r0, #1
   15008:	add	r3, r4, #4
   1500c:	beq	15028 <__assert_fail@plt+0x3bb0>
   15010:	bl	11328 <__strdup@plt>
   15014:	cmp	r0, #0
   15018:	str	r0, [r7, #4]!
   1501c:	beq	15060 <__assert_fail@plt+0x3be8>
   15020:	add	r5, r5, #1
   15024:	add	r3, r4, #4
   15028:	ldr	r0, [r3, #-4]
   1502c:	mov	r4, r3
   15030:	cmp	r0, #0
   15034:	bne	15004 <__assert_fail@plt+0x3b8c>
   15038:	lsl	r5, r5, #2
   1503c:	mov	r0, r8
   15040:	mov	r3, #0
   15044:	str	r3, [r8, r5]
   15048:	ldr	r2, [sp, #4]
   1504c:	ldr	r3, [r6]
   15050:	cmp	r2, r3
   15054:	bne	15070 <__assert_fail@plt+0x3bf8>
   15058:	add	sp, sp, #8
   1505c:	pop	{r4, r5, r6, r7, r8, pc}
   15060:	mov	r0, r8
   15064:	bl	14e8c <__assert_fail@plt+0x3a14>
   15068:	mov	r0, #0
   1506c:	b	15048 <__assert_fail@plt+0x3bd0>
   15070:	bl	111f0 <__stack_chk_fail@plt>
   15074:	mov	r0, #4
   15078:	bl	11268 <malloc@plt>
   1507c:	subs	r8, r0, #0
   15080:	beq	15068 <__assert_fail@plt+0x3bf0>
   15084:	mov	r5, r7
   15088:	b	1503c <__assert_fail@plt+0x3bc4>
   1508c:	andeq	r3, r1, r8, lsl #1
   15090:	andeq	r0, r0, ip, lsr #2
   15094:	push	{r0, r1, r2, r3}
   15098:	ldr	r2, [pc, #80]	; 150f0 <__assert_fail@plt+0x3c78>
   1509c:	ldr	ip, [pc, #80]	; 150f4 <__assert_fail@plt+0x3c7c>
   150a0:	add	r2, pc, r2
   150a4:	push	{r4, lr}
   150a8:	sub	sp, sp, #8
   150ac:	ldr	r4, [r2, ip]
   150b0:	add	r3, sp, #20
   150b4:	str	r3, [sp]
   150b8:	mov	r1, r3
   150bc:	ldr	r0, [sp, #16]
   150c0:	ldr	r3, [r4]
   150c4:	str	r3, [sp, #4]
   150c8:	bl	14f68 <__assert_fail@plt+0x3af0>
   150cc:	ldr	r2, [sp, #4]
   150d0:	ldr	r3, [r4]
   150d4:	cmp	r2, r3
   150d8:	bne	150ec <__assert_fail@plt+0x3c74>
   150dc:	add	sp, sp, #8
   150e0:	pop	{r4, lr}
   150e4:	add	sp, sp, #16
   150e8:	bx	lr
   150ec:	bl	111f0 <__stack_chk_fail@plt>
   150f0:	andeq	r2, r1, r8, asr pc
   150f4:	andeq	r0, r0, ip, lsr #2
   150f8:	ldr	r3, [pc, #348]	; 1525c <__assert_fail@plt+0x3de4>
   150fc:	ldr	r2, [pc, #348]	; 15260 <__assert_fail@plt+0x3de8>
   15100:	add	r3, pc, r3
   15104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15108:	subs	r8, r0, #0
   1510c:	ldr	sl, [r3, r2]
   15110:	sub	sp, sp, #20
   15114:	mov	r6, r1
   15118:	ldr	r3, [sl]
   1511c:	str	r3, [sp, #12]
   15120:	beq	1523c <__assert_fail@plt+0x3dc4>
   15124:	add	r5, sp, #16
   15128:	add	r7, sp, #8
   1512c:	mov	r2, r1
   15130:	mov	r3, #0
   15134:	str	r8, [r5, #-12]!
   15138:	mov	r1, r7
   1513c:	mov	r0, r5
   15140:	bl	14c98 <__assert_fail@plt+0x3820>
   15144:	cmp	r0, #0
   15148:	beq	15220 <__assert_fail@plt+0x3da8>
   1514c:	mov	r4, #0
   15150:	mov	r0, r5
   15154:	mov	r1, r7
   15158:	mov	r2, r6
   1515c:	mov	r3, #0
   15160:	bl	14c98 <__assert_fail@plt+0x3820>
   15164:	add	r4, r4, #1
   15168:	cmp	r0, #0
   1516c:	bne	15150 <__assert_fail@plt+0x3cd8>
   15170:	add	r4, r4, #1
   15174:	lsl	r0, r4, #2
   15178:	bl	11268 <malloc@plt>
   1517c:	subs	fp, r0, #0
   15180:	beq	15228 <__assert_fail@plt+0x3db0>
   15184:	mov	r0, r5
   15188:	mov	r1, r7
   1518c:	mov	r2, r6
   15190:	mov	r3, #0
   15194:	str	r8, [sp, #4]
   15198:	bl	14c98 <__assert_fail@plt+0x3820>
   1519c:	cmp	r0, #0
   151a0:	beq	15230 <__assert_fail@plt+0x3db8>
   151a4:	sub	r8, fp, #4
   151a8:	mov	r9, #0
   151ac:	b	151d0 <__assert_fail@plt+0x3d58>
   151b0:	mov	r0, r5
   151b4:	mov	r1, r7
   151b8:	mov	r2, r6
   151bc:	mov	r3, #0
   151c0:	bl	14c98 <__assert_fail@plt+0x3820>
   151c4:	add	r9, r9, #1
   151c8:	cmp	r0, #0
   151cc:	beq	1520c <__assert_fail@plt+0x3d94>
   151d0:	ldr	r1, [sp, #8]
   151d4:	bl	11220 <__strndup@plt>
   151d8:	cmp	r0, #0
   151dc:	mov	r4, r0
   151e0:	str	r0, [r8, #4]!
   151e4:	bne	151b0 <__assert_fail@plt+0x3d38>
   151e8:	mov	r0, fp
   151ec:	bl	14e8c <__assert_fail@plt+0x3a14>
   151f0:	mov	r0, r4
   151f4:	ldr	r2, [sp, #12]
   151f8:	ldr	r3, [sl]
   151fc:	cmp	r2, r3
   15200:	bne	15238 <__assert_fail@plt+0x3dc0>
   15204:	add	sp, sp, #20
   15208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1520c:	lsl	r9, r9, #2
   15210:	mov	r3, #0
   15214:	mov	r0, fp
   15218:	str	r3, [fp, r9]
   1521c:	b	151f4 <__assert_fail@plt+0x3d7c>
   15220:	mov	r0, #4
   15224:	b	15178 <__assert_fail@plt+0x3d00>
   15228:	mov	r0, fp
   1522c:	b	151f4 <__assert_fail@plt+0x3d7c>
   15230:	mov	r9, r0
   15234:	b	15210 <__assert_fail@plt+0x3d98>
   15238:	bl	111f0 <__stack_chk_fail@plt>
   1523c:	ldr	r0, [pc, #32]	; 15264 <__assert_fail@plt+0x3dec>
   15240:	mov	r2, #193	; 0xc1
   15244:	ldr	r1, [pc, #28]	; 15268 <__assert_fail@plt+0x3df0>
   15248:	ldr	r3, [pc, #28]	; 1526c <__assert_fail@plt+0x3df4>
   1524c:	add	r0, pc, r0
   15250:	add	r1, pc, r1
   15254:	add	r3, pc, r3
   15258:	bl	11478 <__assert_fail@plt>
   1525c:	strdeq	r2, [r1], -r8
   15260:	andeq	r0, r0, ip, lsr #2
   15264:	andeq	r2, r0, r0, ror #2
   15268:	andeq	r2, r0, r0, asr #6
   1526c:	andeq	r2, r0, r4, lsr #6
   15270:	push	{r4, r5, r6, r7, r8, lr}
   15274:	subs	r7, r1, #0
   15278:	mov	r4, r0
   1527c:	beq	15344 <__assert_fail@plt+0x3ecc>
   15280:	mov	r0, r7
   15284:	bl	112d4 <strlen@plt>
   15288:	mov	r8, r0
   1528c:	cmp	r4, #0
   15290:	beq	15364 <__assert_fail@plt+0x3eec>
   15294:	ldr	r0, [r4]
   15298:	cmp	r0, #0
   1529c:	beq	15354 <__assert_fail@plt+0x3edc>
   152a0:	add	r6, r4, #4
   152a4:	mov	r5, #0
   152a8:	b	152c0 <__assert_fail@plt+0x3e48>
   152ac:	ldr	r0, [r6], #4
   152b0:	cmp	r0, #0
   152b4:	beq	152d0 <__assert_fail@plt+0x3e58>
   152b8:	cmp	r5, #0
   152bc:	addne	r5, r5, r8
   152c0:	bl	112d4 <strlen@plt>
   152c4:	cmp	r6, #0
   152c8:	add	r5, r5, r0
   152cc:	bne	152ac <__assert_fail@plt+0x3e34>
   152d0:	add	r0, r5, #1
   152d4:	bl	11268 <malloc@plt>
   152d8:	subs	r6, r0, #0
   152dc:	beq	1535c <__assert_fail@plt+0x3ee4>
   152e0:	ldr	r1, [r4]
   152e4:	mov	r3, r6
   152e8:	cmp	r1, #0
   152ec:	bne	1531c <__assert_fail@plt+0x3ea4>
   152f0:	b	15334 <__assert_fail@plt+0x3ebc>
   152f4:	ldr	r2, [r4, #4]
   152f8:	cmp	r2, #0
   152fc:	beq	15334 <__assert_fail@plt+0x3ebc>
   15300:	cmp	r6, r3
   15304:	beq	15314 <__assert_fail@plt+0x3e9c>
   15308:	bl	111d8 <stpcpy@plt>
   1530c:	ldr	r2, [r4, #4]
   15310:	mov	r3, r0
   15314:	mov	r4, r5
   15318:	mov	r1, r2
   1531c:	mov	r0, r3
   15320:	bl	111d8 <stpcpy@plt>
   15324:	adds	r5, r4, #4
   15328:	mov	r1, r7
   1532c:	mov	r3, r0
   15330:	bne	152f4 <__assert_fail@plt+0x3e7c>
   15334:	mov	r2, #0
   15338:	mov	r0, r6
   1533c:	strb	r2, [r3]
   15340:	pop	{r4, r5, r6, r7, r8, pc}
   15344:	ldr	r7, [pc, #52]	; 15380 <__assert_fail@plt+0x3f08>
   15348:	mov	r8, #1
   1534c:	add	r7, pc, r7
   15350:	b	1528c <__assert_fail@plt+0x3e14>
   15354:	mov	r0, #1
   15358:	b	152d4 <__assert_fail@plt+0x3e5c>
   1535c:	mov	r0, r6
   15360:	pop	{r4, r5, r6, r7, r8, pc}
   15364:	mov	r0, #1
   15368:	bl	11268 <malloc@plt>
   1536c:	subs	r3, r0, #0
   15370:	movne	r6, r3
   15374:	bne	15334 <__assert_fail@plt+0x3ebc>
   15378:	mov	r0, r4
   1537c:	pop	{r4, r5, r6, r7, r8, pc}
   15380:	ldrdeq	r2, [r0], -r8
   15384:	push	{r4, r5, r6, lr}
   15388:	subs	r6, r1, #0
   1538c:	mov	r4, r0
   15390:	beq	153dc <__assert_fail@plt+0x3f64>
   15394:	ldr	r0, [r0]
   15398:	bl	14ea8 <__assert_fail@plt+0x3a30>
   1539c:	adds	r0, r0, #2
   153a0:	bcs	153e4 <__assert_fail@plt+0x3f6c>
   153a4:	lsl	r5, r0, #2
   153a8:	ldr	r0, [r4]
   153ac:	mov	r1, r5
   153b0:	bl	111fc <realloc@plt>
   153b4:	subs	r2, r0, #0
   153b8:	beq	153e4 <__assert_fail@plt+0x3f6c>
   153bc:	sub	r5, r5, #8
   153c0:	mov	r3, r2
   153c4:	mov	ip, #0
   153c8:	str	r6, [r3, r5]!
   153cc:	mov	r0, ip
   153d0:	str	ip, [r3, #4]
   153d4:	str	r2, [r4]
   153d8:	pop	{r4, r5, r6, pc}
   153dc:	mov	r0, r6
   153e0:	pop	{r4, r5, r6, pc}
   153e4:	mvn	r0, #11
   153e8:	pop	{r4, r5, r6, pc}
   153ec:	cmp	r1, #0
   153f0:	push	{r4, r5, r6, r7, r8, lr}
   153f4:	mov	r6, r0
   153f8:	mov	r7, r2
   153fc:	beq	15454 <__assert_fail@plt+0x3fdc>
   15400:	ldr	r0, [r1]
   15404:	cmp	r0, #0
   15408:	beq	15454 <__assert_fail@plt+0x3fdc>
   1540c:	add	r4, r1, #4
   15410:	b	15434 <__assert_fail@plt+0x3fbc>
   15414:	bl	15384 <__assert_fail@plt+0x3f0c>
   15418:	subs	r8, r0, #0
   1541c:	blt	1545c <__assert_fail@plt+0x3fe4>
   15420:	cmp	r4, #0
   15424:	beq	15454 <__assert_fail@plt+0x3fdc>
   15428:	ldr	r0, [r4], #4
   1542c:	cmp	r0, #0
   15430:	beq	15454 <__assert_fail@plt+0x3fdc>
   15434:	mov	r1, r7
   15438:	bl	14bbc <__assert_fail@plt+0x3744>
   1543c:	subs	r5, r0, #0
   15440:	mov	r0, r6
   15444:	mov	r1, r5
   15448:	bne	15414 <__assert_fail@plt+0x3f9c>
   1544c:	mvn	r0, #11
   15450:	pop	{r4, r5, r6, r7, r8, pc}
   15454:	mov	r0, #0
   15458:	pop	{r4, r5, r6, r7, r8, pc}
   1545c:	mov	r0, r5
   15460:	bl	1116c <free@plt>
   15464:	mov	r0, r8
   15468:	pop	{r4, r5, r6, r7, r8, pc}
   1546c:	push	{r4, r5, r6, r7, r8, lr}
   15470:	subs	r6, r1, #0
   15474:	mov	r5, r0
   15478:	beq	154f0 <__assert_fail@plt+0x4078>
   1547c:	ldr	r0, [r0]
   15480:	bl	14ea8 <__assert_fail@plt+0x3a30>
   15484:	adds	r8, r0, #2
   15488:	mov	r7, r0
   1548c:	bcs	154f8 <__assert_fail@plt+0x4080>
   15490:	lsl	r8, r8, #2
   15494:	mov	r0, r8
   15498:	bl	11268 <malloc@plt>
   1549c:	subs	r4, r0, #0
   154a0:	beq	154f8 <__assert_fail@plt+0x4080>
   154a4:	cmp	r7, #0
   154a8:	beq	15500 <__assert_fail@plt+0x4088>
   154ac:	sub	lr, r8, #8
   154b0:	ldr	r0, [r5]
   154b4:	add	lr, r4, lr
   154b8:	mov	r3, r4
   154bc:	rsb	r2, r4, r3
   154c0:	ldr	r2, [r0, r2]
   154c4:	str	r2, [r3, #4]!
   154c8:	cmp	r3, lr
   154cc:	bne	154bc <__assert_fail@plt+0x4044>
   154d0:	mov	r3, r4
   154d4:	str	r6, [r3], r8
   154d8:	mov	r6, #0
   154dc:	str	r6, [r3, #-4]
   154e0:	bl	1116c <free@plt>
   154e4:	mov	r0, r6
   154e8:	str	r4, [r5]
   154ec:	pop	{r4, r5, r6, r7, r8, pc}
   154f0:	mov	r0, r6
   154f4:	pop	{r4, r5, r6, r7, r8, pc}
   154f8:	mvn	r0, #11
   154fc:	pop	{r4, r5, r6, r7, r8, pc}
   15500:	ldr	r0, [r5]
   15504:	b	154d0 <__assert_fail@plt+0x4058>
   15508:	push	{r3, r4, r5, lr}
   1550c:	mov	r5, r1
   15510:	bl	15384 <__assert_fail@plt+0x3f0c>
   15514:	subs	r4, r0, #0
   15518:	blt	15524 <__assert_fail@plt+0x40ac>
   1551c:	mov	r0, r4
   15520:	pop	{r3, r4, r5, pc}
   15524:	mov	r0, r5
   15528:	bl	1116c <free@plt>
   1552c:	mov	r0, r4
   15530:	pop	{r3, r4, r5, pc}
   15534:	push	{r3, r4, r5, lr}
   15538:	mov	r5, r1
   1553c:	bl	1546c <__assert_fail@plt+0x3ff4>
   15540:	subs	r4, r0, #0
   15544:	blt	15550 <__assert_fail@plt+0x40d8>
   15548:	mov	r0, r4
   1554c:	pop	{r3, r4, r5, pc}
   15550:	mov	r0, r5
   15554:	bl	1116c <free@plt>
   15558:	mov	r0, r4
   1555c:	pop	{r3, r4, r5, pc}
   15560:	cmp	r1, #0
   15564:	push	{r4, lr}
   15568:	mov	r4, r0
   1556c:	mov	r0, r1
   15570:	beq	1558c <__assert_fail@plt+0x4114>
   15574:	bl	11328 <__strdup@plt>
   15578:	subs	r1, r0, #0
   1557c:	beq	15590 <__assert_fail@plt+0x4118>
   15580:	mov	r0, r4
   15584:	pop	{r4, lr}
   15588:	b	15508 <__assert_fail@plt+0x4090>
   1558c:	pop	{r4, pc}
   15590:	mvn	r0, #11
   15594:	pop	{r4, pc}
   15598:	push	{r3, r4, r5, lr}
   1559c:	subs	r4, r1, #0
   155a0:	mov	r5, r0
   155a4:	beq	155e0 <__assert_fail@plt+0x4168>
   155a8:	ldr	r1, [r4]
   155ac:	cmp	r1, #0
   155b0:	beq	155e0 <__assert_fail@plt+0x4168>
   155b4:	add	r4, r4, #4
   155b8:	b	155c8 <__assert_fail@plt+0x4150>
   155bc:	ldr	r1, [r4], #4
   155c0:	cmp	r1, #0
   155c4:	beq	155e0 <__assert_fail@plt+0x4168>
   155c8:	mov	r0, r5
   155cc:	bl	15560 <__assert_fail@plt+0x40e8>
   155d0:	cmp	r0, #0
   155d4:	poplt	{r3, r4, r5, pc}
   155d8:	cmp	r4, #0
   155dc:	bne	155bc <__assert_fail@plt+0x4144>
   155e0:	mov	r0, #0
   155e4:	pop	{r3, r4, r5, pc}
   155e8:	push	{r4, r5, r6, r7, r8, lr}
   155ec:	subs	r8, r0, #0
   155f0:	mov	r7, r1
   155f4:	beq	15660 <__assert_fail@plt+0x41e8>
   155f8:	cmp	r1, #0
   155fc:	beq	15668 <__assert_fail@plt+0x41f0>
   15600:	ldr	r4, [r8]
   15604:	cmp	r4, #0
   15608:	moveq	r5, r8
   1560c:	beq	15658 <__assert_fail@plt+0x41e0>
   15610:	mov	r6, r8
   15614:	mov	r5, r8
   15618:	b	15628 <__assert_fail@plt+0x41b0>
   1561c:	ldr	r4, [r6, #4]!
   15620:	cmp	r4, #0
   15624:	beq	15658 <__assert_fail@plt+0x41e0>
   15628:	mov	r0, r4
   1562c:	mov	r1, r7
   15630:	bl	11148 <strcmp@plt>
   15634:	cmp	r0, #0
   15638:	strne	r4, [r5]
   1563c:	addne	r5, r5, #4
   15640:	bne	1561c <__assert_fail@plt+0x41a4>
   15644:	mov	r0, r4
   15648:	bl	1116c <free@plt>
   1564c:	ldr	r4, [r6, #4]!
   15650:	cmp	r4, #0
   15654:	bne	15628 <__assert_fail@plt+0x41b0>
   15658:	mov	r3, #0
   1565c:	str	r3, [r5]
   15660:	mov	r0, r8
   15664:	pop	{r4, r5, r6, r7, r8, pc}
   15668:	ldr	r3, [pc, #28]	; 1568c <__assert_fail@plt+0x4214>
   1566c:	movw	r2, #346	; 0x15a
   15670:	ldr	r0, [pc, #24]	; 15690 <__assert_fail@plt+0x4218>
   15674:	ldr	r1, [pc, #24]	; 15694 <__assert_fail@plt+0x421c>
   15678:	add	r3, pc, r3
   1567c:	add	r0, pc, r0
   15680:	add	r3, r3, #12
   15684:	add	r1, pc, r1
   15688:	bl	11478 <__assert_fail@plt>
   1568c:	andeq	r1, r0, r0, lsl #30
   15690:	andeq	r1, r0, r0, lsr sp
   15694:	andeq	r1, r0, ip, lsl #30
   15698:	push	{r1, r2, r3}
   1569c:	mov	r1, #1
   156a0:	push	{r4, r5, lr}
   156a4:	sub	sp, sp, #16
   156a8:	ldr	lr, [pc, #108]	; 1571c <__assert_fail@plt+0x42a4>
   156ac:	add	ip, sp, #32
   156b0:	ldr	r4, [pc, #104]	; 15720 <__assert_fail@plt+0x42a8>
   156b4:	mov	r5, r0
   156b8:	add	lr, pc, lr
   156bc:	mov	r3, ip
   156c0:	ldr	r2, [sp, #28]
   156c4:	add	r0, sp, #8
   156c8:	ldr	r4, [lr, r4]
   156cc:	str	ip, [sp, #4]
   156d0:	ldr	ip, [r4]
   156d4:	str	ip, [sp, #12]
   156d8:	bl	1131c <__vasprintf_chk@plt>
   156dc:	cmp	r0, #0
   156e0:	blt	15710 <__assert_fail@plt+0x4298>
   156e4:	mov	r0, r5
   156e8:	ldr	r1, [sp, #8]
   156ec:	bl	15508 <__assert_fail@plt+0x4090>
   156f0:	ldr	r2, [sp, #12]
   156f4:	ldr	r3, [r4]
   156f8:	cmp	r2, r3
   156fc:	bne	15718 <__assert_fail@plt+0x42a0>
   15700:	add	sp, sp, #16
   15704:	pop	{r4, r5, lr}
   15708:	add	sp, sp, #12
   1570c:	bx	lr
   15710:	mvn	r0, #11
   15714:	b	156f0 <__assert_fail@plt+0x4278>
   15718:	bl	111f0 <__stack_chk_fail@plt>
   1571c:	andeq	r2, r1, r0, asr #18
   15720:	andeq	r0, r0, ip, lsr #2
   15724:	ldr	ip, [pc, #104]	; 15794 <__assert_fail@plt+0x431c>
   15728:	mov	r3, r2
   1572c:	push	{r4, r5, lr}
   15730:	add	ip, pc, ip
   15734:	ldr	lr, [pc, #92]	; 15798 <__assert_fail@plt+0x4320>
   15738:	sub	sp, sp, #12
   1573c:	mov	r2, r1
   15740:	mov	r5, r0
   15744:	mov	r1, #1
   15748:	mov	r0, sp
   1574c:	ldr	r4, [ip, lr]
   15750:	ldr	ip, [r4]
   15754:	str	ip, [sp, #4]
   15758:	bl	1131c <__vasprintf_chk@plt>
   1575c:	cmp	r0, #0
   15760:	blt	15788 <__assert_fail@plt+0x4310>
   15764:	mov	r0, r5
   15768:	ldr	r1, [sp]
   1576c:	bl	15508 <__assert_fail@plt+0x4090>
   15770:	ldr	r2, [sp, #4]
   15774:	ldr	r3, [r4]
   15778:	cmp	r2, r3
   1577c:	bne	15790 <__assert_fail@plt+0x4318>
   15780:	add	sp, sp, #12
   15784:	pop	{r4, r5, pc}
   15788:	mvn	r0, #11
   1578c:	b	15770 <__assert_fail@plt+0x42f8>
   15790:	bl	111f0 <__stack_chk_fail@plt>
   15794:	andeq	r2, r1, r8, asr #17
   15798:	andeq	r0, r0, ip, lsr #2
   1579c:	push	{r3, r4, r5, lr}
   157a0:	mov	r5, r0
   157a4:	bl	14ea8 <__assert_fail@plt+0x3a30>
   157a8:	cmp	r0, #1
   157ac:	bls	157d8 <__assert_fail@plt+0x4360>
   157b0:	lsr	r4, r0, #1
   157b4:	add	r2, r5, r0, lsl #2
   157b8:	mov	r3, r5
   157bc:	add	r4, r5, r4, lsl #2
   157c0:	ldr	ip, [r2, #-4]
   157c4:	ldr	r1, [r3]
   157c8:	str	ip, [r3], #4
   157cc:	cmp	r3, r4
   157d0:	str	r1, [r2, #-4]!
   157d4:	bne	157c0 <__assert_fail@plt+0x4348>
   157d8:	mov	r0, r5
   157dc:	pop	{r3, r4, r5, pc}
   157e0:	push	{r3, lr}
   157e4:	subs	r3, r0, #0
   157e8:	beq	157f8 <__assert_fail@plt+0x4380>
   157ec:	bl	112e0 <strchr@plt>
   157f0:	subs	r3, r0, #0
   157f4:	addne	r3, r3, #1
   157f8:	mov	r0, r3
   157fc:	pop	{r3, pc}
   15800:	push	{r4, r5, r6, lr}
   15804:	mov	r4, r1
   15808:	mov	r5, r2
   1580c:	mov	r6, r0
   15810:	bl	11388 <__sched_cpualloc@plt>
   15814:	cmp	r0, #0
   15818:	popeq	{r4, r5, r6, pc}
   1581c:	cmp	r4, #0
   15820:	addne	r3, r6, #31
   15824:	lsrne	r3, r3, #5
   15828:	lslne	r3, r3, #2
   1582c:	strne	r3, [r4]
   15830:	cmp	r5, #0
   15834:	addne	r6, r6, #31
   15838:	bicne	r6, r6, #31
   1583c:	strne	r6, [r5]
   15840:	pop	{r4, r5, r6, pc}
   15844:	b	11334 <__sched_cpufree@plt>
   15848:	ldr	r3, [pc, #212]	; 15924 <__assert_fail@plt+0x44ac>
   1584c:	mov	r0, #2048	; 0x800
   15850:	ldr	ip, [pc, #208]	; 15928 <__assert_fail@plt+0x44b0>
   15854:	mov	r2, #0
   15858:	add	r3, pc, r3
   1585c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15860:	sub	sp, sp, #12
   15864:	ldr	r9, [r3, ip]
   15868:	mov	r1, sp
   1586c:	ldr	r3, [r9]
   15870:	str	r3, [sp, #4]
   15874:	bl	15800 <__assert_fail@plt+0x4388>
   15878:	subs	r4, r0, #0
   1587c:	movne	r5, #10
   15880:	movne	r6, #2048	; 0x800
   15884:	bne	158c8 <__assert_fail@plt+0x4450>
   15888:	b	15918 <__assert_fail@plt+0x44a0>
   1588c:	bl	112f8 <__errno_location@plt>
   15890:	ldr	r3, [r0]
   15894:	cmp	r3, #22
   15898:	bne	158f4 <__assert_fail@plt+0x447c>
   1589c:	subs	r5, r5, #1
   158a0:	beq	158f4 <__assert_fail@plt+0x447c>
   158a4:	lsl	r6, r6, #1
   158a8:	mov	r0, r4
   158ac:	bl	15844 <__assert_fail@plt+0x43cc>
   158b0:	mov	r1, sp
   158b4:	mov	r0, r6
   158b8:	mov	r2, #0
   158bc:	bl	15800 <__assert_fail@plt+0x4388>
   158c0:	subs	r4, r0, #0
   158c4:	beq	15918 <__assert_fail@plt+0x44a0>
   158c8:	mov	r1, #0
   158cc:	ldr	r2, [sp]
   158d0:	mov	r0, r4
   158d4:	bl	11340 <memset@plt>
   158d8:	mov	r0, #242	; 0xf2
   158dc:	mov	r1, #0
   158e0:	ldr	r2, [sp]
   158e4:	mov	r3, r4
   158e8:	bl	112bc <syscall@plt>
   158ec:	subs	r8, r0, #0
   158f0:	blt	1588c <__assert_fail@plt+0x4414>
   158f4:	mov	r0, r4
   158f8:	bl	15844 <__assert_fail@plt+0x43cc>
   158fc:	lsl	r0, r8, #3
   15900:	ldr	r2, [sp, #4]
   15904:	ldr	r3, [r9]
   15908:	cmp	r2, r3
   1590c:	bne	15920 <__assert_fail@plt+0x44a8>
   15910:	add	sp, sp, #12
   15914:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15918:	mvn	r0, #0
   1591c:	b	15900 <__assert_fail@plt+0x4488>
   15920:	bl	111f0 <__stack_chk_fail@plt>
   15924:	andeq	r2, r1, r0, lsr #15
   15928:	andeq	r0, r0, ip, lsr #2
   1592c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15930:	lsls	r5, r3, #3
   15934:	sub	sp, sp, #28
   15938:	mov	r7, r1
   1593c:	mov	r6, r2
   15940:	str	r0, [sp, #20]
   15944:	beq	15ad0 <__assert_fail@plt+0x4658>
   15948:	ldr	r9, [pc, #396]	; 15adc <__assert_fail@plt+0x4664>
   1594c:	mov	r1, #0
   15950:	ldr	r8, [pc, #392]	; 15ae0 <__assert_fail@plt+0x4668>
   15954:	mov	r4, r1
   15958:	ldr	sl, [pc, #388]	; 15ae4 <__assert_fail@plt+0x466c>
   1595c:	add	r9, pc, r9
   15960:	add	r8, pc, r8
   15964:	mov	fp, r0
   15968:	add	sl, pc, sl
   1596c:	b	159d4 <__assert_fail@plt+0x455c>
   15970:	str	r9, [sp]
   15974:	mov	r0, fp
   15978:	str	r4, [sp, #4]
   1597c:	mov	r1, r7
   15980:	mov	r2, #1
   15984:	mvn	r3, #0
   15988:	bl	11460 <__snprintf_chk@plt>
   1598c:	cmp	r0, #0
   15990:	blt	15a74 <__assert_fail@plt+0x45fc>
   15994:	add	r3, r0, #1
   15998:	cmp	r3, r7
   1599c:	bhi	15a74 <__assert_fail@plt+0x45fc>
   159a0:	cmp	r7, r0
   159a4:	add	fp, fp, r0
   159a8:	mov	r1, #1
   159ac:	movls	r3, #0
   159b0:	movhi	r3, #1
   159b4:	cmp	r0, #0
   159b8:	movle	r3, #0
   159bc:	cmp	r3, #0
   159c0:	rsbne	r7, r0, r7
   159c4:	moveq	r7, r3
   159c8:	add	r4, r4, #1
   159cc:	cmp	r5, r4
   159d0:	bls	15ab8 <__assert_fail@plt+0x4640>
   159d4:	cmp	r5, r4
   159d8:	bls	159c8 <__assert_fail@plt+0x4550>
   159dc:	lsr	r2, r4, #5
   159e0:	and	r3, r4, #31
   159e4:	ldr	r2, [r6, r2, lsl #2]
   159e8:	lsr	r3, r2, r3
   159ec:	tst	r3, #1
   159f0:	beq	159c8 <__assert_fail@plt+0x4550>
   159f4:	add	lr, r4, #1
   159f8:	cmp	r5, lr
   159fc:	bls	15970 <__assert_fail@plt+0x44f8>
   15a00:	lsr	r2, lr, #5
   15a04:	and	r3, lr, #31
   15a08:	ldr	r2, [r6, r2, lsl #2]
   15a0c:	lsr	r3, r2, r3
   15a10:	tst	r3, #1
   15a14:	movne	r3, lr
   15a18:	beq	15970 <__assert_fail@plt+0x44f8>
   15a1c:	rsb	r2, r4, r3
   15a20:	add	r3, r3, #1
   15a24:	cmp	r5, r3
   15a28:	and	r0, r3, #31
   15a2c:	lsr	r1, r3, #5
   15a30:	bhi	15a80 <__assert_fail@plt+0x4608>
   15a34:	cmp	r2, #0
   15a38:	beq	15970 <__assert_fail@plt+0x44f8>
   15a3c:	cmp	r2, #1
   15a40:	beq	15a94 <__assert_fail@plt+0x461c>
   15a44:	add	lr, r2, r4
   15a48:	str	r4, [sp, #4]
   15a4c:	str	r8, [sp]
   15a50:	mov	r0, fp
   15a54:	str	lr, [sp, #8]
   15a58:	mov	r1, r7
   15a5c:	mov	r2, #1
   15a60:	mvn	r3, #0
   15a64:	mov	r4, lr
   15a68:	bl	11460 <__snprintf_chk@plt>
   15a6c:	cmp	r0, #0
   15a70:	bge	15994 <__assert_fail@plt+0x451c>
   15a74:	mov	r0, #0
   15a78:	add	sp, sp, #28
   15a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a80:	ldr	r1, [r6, r1, lsl #2]
   15a84:	lsr	r1, r1, r0
   15a88:	tst	r1, #1
   15a8c:	bne	15a1c <__assert_fail@plt+0x45a4>
   15a90:	b	15a34 <__assert_fail@plt+0x45bc>
   15a94:	str	r4, [sp, #4]
   15a98:	mov	r0, fp
   15a9c:	str	sl, [sp]
   15aa0:	mov	r1, r7
   15aa4:	str	lr, [sp, #8]
   15aa8:	mvn	r3, #0
   15aac:	mov	r4, lr
   15ab0:	bl	11460 <__snprintf_chk@plt>
   15ab4:	b	1598c <__assert_fail@plt+0x4514>
   15ab8:	rsb	r1, r1, #0
   15abc:	ldr	r0, [sp, #20]
   15ac0:	mov	r3, #0
   15ac4:	strb	r3, [fp, r1]
   15ac8:	add	sp, sp, #28
   15acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad0:	mov	r1, r5
   15ad4:	ldr	fp, [sp, #20]
   15ad8:	b	15abc <__assert_fail@plt+0x4644>
   15adc:	andeq	r1, r0, r4, asr #24
   15ae0:	andeq	r1, r0, r8, asr #24
   15ae4:	andeq	r1, r0, r4, lsr ip
   15ae8:	lsl	r3, r3, #3
   15aec:	subs	ip, r3, #4
   15af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   15af4:	bmi	15c04 <__assert_fail@plt+0x478c>
   15af8:	cmp	r1, #0
   15afc:	mov	r9, r0
   15b00:	beq	15c04 <__assert_fail@plt+0x478c>
   15b04:	sub	r7, r3, #1
   15b08:	sub	r6, r3, #2
   15b0c:	sub	r5, r3, #3
   15b10:	mov	r8, #0
   15b14:	b	15b30 <__assert_fail@plt+0x46b8>
   15b18:	rsb	r4, r9, r0
   15b1c:	sub	r7, r7, #4
   15b20:	cmp	r4, r1
   15b24:	sub	r6, r6, #4
   15b28:	sub	r5, r5, #4
   15b2c:	beq	15be8 <__assert_fail@plt+0x4770>
   15b30:	cmp	r3, ip
   15b34:	lsrhi	sl, ip, #5
   15b38:	andhi	r4, ip, #31
   15b3c:	movls	r4, #0
   15b40:	ldrhi	sl, [r2, sl, lsl #2]
   15b44:	lsrhi	r4, sl, r4
   15b48:	andhi	r4, r4, #1
   15b4c:	cmp	r3, r5
   15b50:	bls	15b6c <__assert_fail@plt+0x46f4>
   15b54:	lsr	fp, r5, #5
   15b58:	and	sl, r5, #31
   15b5c:	ldr	fp, [r2, fp, lsl #2]
   15b60:	lsr	sl, fp, sl
   15b64:	tst	sl, #1
   15b68:	orrne	r4, r4, #2
   15b6c:	cmp	r6, r3
   15b70:	bcs	15b8c <__assert_fail@plt+0x4714>
   15b74:	lsr	fp, r6, #5
   15b78:	and	sl, r6, #31
   15b7c:	ldr	fp, [r2, fp, lsl #2]
   15b80:	lsr	sl, fp, sl
   15b84:	tst	sl, #1
   15b88:	orrne	r4, r4, #4
   15b8c:	cmp	r3, r7
   15b90:	bls	15bac <__assert_fail@plt+0x4734>
   15b94:	lsr	fp, r7, #5
   15b98:	and	sl, r7, #31
   15b9c:	ldr	fp, [r2, fp, lsl #2]
   15ba0:	lsr	sl, fp, sl
   15ba4:	tst	sl, #1
   15ba8:	orrne	r4, r4, #8
   15bac:	sxtb	r4, r4
   15bb0:	adds	sl, r4, #0
   15bb4:	movne	sl, #1
   15bb8:	cmp	r8, #0
   15bbc:	movne	sl, #0
   15bc0:	cmp	sl, #0
   15bc4:	movne	r8, r0
   15bc8:	cmp	r4, #9
   15bcc:	addls	r4, r4, #48	; 0x30
   15bd0:	addhi	r4, r4, #87	; 0x57
   15bd4:	add	r0, r0, #1
   15bd8:	subs	ip, ip, #4
   15bdc:	uxtb	r4, r4
   15be0:	strb	r4, [r0, #-1]
   15be4:	bpl	15b18 <__assert_fail@plt+0x46a0>
   15be8:	cmp	r8, #0
   15bec:	mov	r3, #0
   15bf0:	strb	r3, [r0]
   15bf4:	movne	r0, r8
   15bf8:	beq	15c0c <__assert_fail@plt+0x4794>
   15bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   15c00:	bx	lr
   15c04:	mov	r3, #0
   15c08:	strb	r3, [r0]
   15c0c:	sub	r0, r0, #1
   15c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   15c14:	bx	lr
   15c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c1c:	sub	sp, sp, #12
   15c20:	mov	r9, r0
   15c24:	mov	r8, r1
   15c28:	mov	r5, r2
   15c2c:	bl	112d4 <strlen@plt>
   15c30:	cmp	r0, #1
   15c34:	sub	r4, r0, #1
   15c38:	add	r4, r9, r4
   15c3c:	ble	15c5c <__assert_fail@plt+0x47e4>
   15c40:	ldr	r1, [pc, #364]	; 15db4 <__assert_fail@plt+0x493c>
   15c44:	mov	r0, r9
   15c48:	mov	r2, #2
   15c4c:	add	r1, pc, r1
   15c50:	bl	111cc <memcmp@plt>
   15c54:	cmp	r0, #0
   15c58:	addeq	r9, r9, #2
   15c5c:	mov	r0, r8
   15c60:	mov	r1, #0
   15c64:	mov	r2, r5
   15c68:	bl	11340 <memset@plt>
   15c6c:	cmp	r9, r4
   15c70:	bhi	15d9c <__assert_fail@plt+0x4924>
   15c74:	bl	11280 <__ctype_tolower_loc@plt>
   15c78:	mov	ip, #1
   15c7c:	lsl	r2, r5, #3
   15c80:	mov	r7, #2
   15c84:	mov	r1, ip
   15c88:	mov	r6, #3
   15c8c:	mov	r5, #0
   15c90:	ldr	sl, [r0]
   15c94:	str	sl, [sp]
   15c98:	ldrb	r0, [r4]
   15c9c:	ldr	sl, [sp]
   15ca0:	sxtb	r3, r0
   15ca4:	cmp	r3, #44	; 0x2c
   15ca8:	ldrbeq	r0, [r4, #-1]
   15cac:	subeq	r4, r4, #1
   15cb0:	sxtbeq	r3, r0
   15cb4:	sxtb	r0, r0
   15cb8:	sub	r3, r3, #48	; 0x30
   15cbc:	sxth	r0, r0
   15cc0:	cmp	r3, #9
   15cc4:	ldr	r0, [sl, r0, lsl #2]
   15cc8:	bls	15cdc <__assert_fail@plt+0x4864>
   15ccc:	sub	r3, r0, #97	; 0x61
   15cd0:	cmp	r3, #5
   15cd4:	bhi	15da8 <__assert_fail@plt+0x4930>
   15cd8:	sub	r3, r0, #87	; 0x57
   15cdc:	sxtb	r0, r3
   15ce0:	cmn	r0, #1
   15ce4:	beq	15da0 <__assert_fail@plt+0x4928>
   15ce8:	tst	r3, #1
   15cec:	beq	15d10 <__assert_fail@plt+0x4898>
   15cf0:	cmp	r5, r2
   15cf4:	bcs	15d10 <__assert_fail@plt+0x4898>
   15cf8:	lsr	r0, r5, #5
   15cfc:	and	fp, r5, #31
   15d00:	str	fp, [sp, #4]
   15d04:	ldr	sl, [r8, r0, lsl #2]
   15d08:	orr	sl, sl, r1, lsl fp
   15d0c:	str	sl, [r8, r0, lsl #2]
   15d10:	tst	r3, #2
   15d14:	beq	15d38 <__assert_fail@plt+0x48c0>
   15d18:	cmp	r2, ip
   15d1c:	bls	15d38 <__assert_fail@plt+0x48c0>
   15d20:	lsr	r0, ip, #5
   15d24:	and	sl, ip, #31
   15d28:	str	sl, [sp, #4]
   15d2c:	ldr	fp, [r8, r0, lsl #2]
   15d30:	orr	fp, fp, r1, lsl sl
   15d34:	str	fp, [r8, r0, lsl #2]
   15d38:	tst	r3, #4
   15d3c:	beq	15d60 <__assert_fail@plt+0x48e8>
   15d40:	cmp	r2, r7
   15d44:	bls	15d60 <__assert_fail@plt+0x48e8>
   15d48:	lsr	r0, r7, #5
   15d4c:	and	fp, r7, #31
   15d50:	str	fp, [sp, #4]
   15d54:	ldr	sl, [r8, r0, lsl #2]
   15d58:	orr	sl, sl, r1, lsl fp
   15d5c:	str	sl, [r8, r0, lsl #2]
   15d60:	tst	r3, #8
   15d64:	beq	15d80 <__assert_fail@plt+0x4908>
   15d68:	cmp	r2, r6
   15d6c:	lsrhi	r3, r6, #5
   15d70:	andhi	r0, r6, #31
   15d74:	ldrhi	fp, [r8, r3, lsl #2]
   15d78:	orrhi	r0, fp, r1, lsl r0
   15d7c:	strhi	r0, [r8, r3, lsl #2]
   15d80:	sub	r4, r4, #1
   15d84:	add	r5, r5, #4
   15d88:	cmp	r9, r4
   15d8c:	add	r6, r6, #4
   15d90:	add	r7, r7, #4
   15d94:	add	ip, ip, #4
   15d98:	bls	15c98 <__assert_fail@plt+0x4820>
   15d9c:	mov	r0, #0
   15da0:	add	sp, sp, #12
   15da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15da8:	mvn	r0, #0
   15dac:	add	sp, sp, #12
   15db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15db4:	andeq	r1, r0, r8, ror #18
   15db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dbc:	sub	sp, sp, #52	; 0x34
   15dc0:	ldr	lr, [pc, #540]	; 15fe4 <__assert_fail@plt+0x4b6c>
   15dc4:	mov	r5, r3
   15dc8:	ldr	ip, [pc, #536]	; 15fe8 <__assert_fail@plt+0x4b70>
   15dcc:	mov	r4, r1
   15dd0:	add	lr, pc, lr
   15dd4:	mov	r1, #0
   15dd8:	mov	r8, r0
   15ddc:	mov	r7, #1
   15de0:	ldr	ip, [lr, ip]
   15de4:	mov	r3, lr
   15de8:	mov	r0, r4
   15dec:	lsl	r6, r2, #3
   15df0:	str	r1, [sp, #4]
   15df4:	add	sl, sp, #31
   15df8:	str	ip, [sp, #20]
   15dfc:	ldr	ip, [pc, #488]	; 15fec <__assert_fail@plt+0x4b74>
   15e00:	add	ip, pc, ip
   15e04:	str	ip, [sp, #8]
   15e08:	add	ip, sp, #32
   15e0c:	str	ip, [sp, #16]
   15e10:	ldr	ip, [sp, #20]
   15e14:	ldr	r3, [ip]
   15e18:	str	r3, [sp, #44]	; 0x2c
   15e1c:	bl	11340 <memset@plt>
   15e20:	str	sl, [sp, #12]
   15e24:	mov	r0, r8
   15e28:	mov	r1, #44	; 0x2c
   15e2c:	bl	157e0 <__assert_fail@plt+0x4368>
   15e30:	cmp	r8, #0
   15e34:	mov	fp, r0
   15e38:	beq	15fcc <__assert_fail@plt+0x4b54>
   15e3c:	mov	r0, r8
   15e40:	ldr	r1, [sp, #8]
   15e44:	add	r2, sp, #32
   15e48:	ldr	r3, [sp, #12]
   15e4c:	bl	113e8 <sscanf@plt>
   15e50:	cmp	r0, #0
   15e54:	str	r0, [sp, #4]
   15e58:	ble	15f88 <__assert_fail@plt+0x4b10>
   15e5c:	ldr	sl, [sp, #32]
   15e60:	mov	r0, r8
   15e64:	mov	r1, #45	; 0x2d
   15e68:	str	r7, [sp, #40]	; 0x28
   15e6c:	str	sl, [sp, #36]	; 0x24
   15e70:	bl	157e0 <__assert_fail@plt+0x4368>
   15e74:	mov	r1, #44	; 0x2c
   15e78:	mov	r9, r0
   15e7c:	mov	r0, r8
   15e80:	bl	157e0 <__assert_fail@plt+0x4368>
   15e84:	cmp	r9, #0
   15e88:	mov	r8, r0
   15e8c:	beq	15eac <__assert_fail@plt+0x4a34>
   15e90:	rsbs	ip, r0, #1
   15e94:	movcc	ip, #0
   15e98:	cmp	r9, r0
   15e9c:	movcs	r2, ip
   15ea0:	orrcc	r2, ip, #1
   15ea4:	cmp	r2, #0
   15ea8:	bne	15f28 <__assert_fail@plt+0x4ab0>
   15eac:	mov	r1, sl
   15eb0:	mov	r3, sl
   15eb4:	ldr	r0, [sp, #40]	; 0x28
   15eb8:	b	15ee4 <__assert_fail@plt+0x4a6c>
   15ebc:	cmp	r6, r3
   15ec0:	bls	15f08 <__assert_fail@plt+0x4a90>
   15ec4:	lsr	r2, r3, #5
   15ec8:	and	ip, r3, #31
   15ecc:	add	r3, r3, r0
   15ed0:	ldr	r8, [r4, r2, lsl #2]
   15ed4:	cmp	r3, r1
   15ed8:	orr	ip, r8, r7, lsl ip
   15edc:	str	ip, [r4, r2, lsl #2]
   15ee0:	bhi	15f00 <__assert_fail@plt+0x4a88>
   15ee4:	cmp	r5, #0
   15ee8:	bne	15ebc <__assert_fail@plt+0x4a44>
   15eec:	cmp	r6, r3
   15ef0:	bhi	15ec4 <__assert_fail@plt+0x4a4c>
   15ef4:	add	r3, r3, r0
   15ef8:	cmp	r3, r1
   15efc:	bls	15ee4 <__assert_fail@plt+0x4a6c>
   15f00:	mov	r8, fp
   15f04:	b	15e24 <__assert_fail@plt+0x49ac>
   15f08:	mov	r0, #2
   15f0c:	ldr	ip, [sp, #20]
   15f10:	ldr	r2, [sp, #44]	; 0x2c
   15f14:	ldr	r3, [ip]
   15f18:	cmp	r2, r3
   15f1c:	bne	15fe0 <__assert_fail@plt+0x4b68>
   15f20:	add	sp, sp, #52	; 0x34
   15f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f28:	mov	r0, r9
   15f2c:	ldr	r1, [sp, #8]
   15f30:	add	r2, sp, #36	; 0x24
   15f34:	ldr	r3, [sp, #12]
   15f38:	str	ip, [sp]
   15f3c:	bl	113e8 <sscanf@plt>
   15f40:	cmp	r0, #0
   15f44:	str	r0, [sp, #4]
   15f48:	ble	15f88 <__assert_fail@plt+0x4b10>
   15f4c:	mov	r0, r9
   15f50:	mov	r1, #58	; 0x3a
   15f54:	bl	157e0 <__assert_fail@plt+0x4368>
   15f58:	ldr	ip, [sp]
   15f5c:	subs	r3, r0, #0
   15f60:	beq	15f78 <__assert_fail@plt+0x4b00>
   15f64:	cmp	r8, r3
   15f68:	movls	r3, ip
   15f6c:	orrhi	r3, ip, #1
   15f70:	cmp	r3, #0
   15f74:	bne	15f90 <__assert_fail@plt+0x4b18>
   15f78:	ldr	r1, [sp, #36]	; 0x24
   15f7c:	ldr	r3, [sp, #32]
   15f80:	cmp	r3, r1
   15f84:	bls	15eb4 <__assert_fail@plt+0x4a3c>
   15f88:	mov	r0, #1
   15f8c:	b	15f0c <__assert_fail@plt+0x4a94>
   15f90:	ldr	r1, [sp, #8]
   15f94:	add	r2, sp, #40	; 0x28
   15f98:	ldr	r3, [sp, #12]
   15f9c:	bl	113e8 <sscanf@plt>
   15fa0:	cmp	r0, #0
   15fa4:	str	r0, [sp, #4]
   15fa8:	ble	15f88 <__assert_fail@plt+0x4b10>
   15fac:	ldr	r3, [sp, #40]	; 0x28
   15fb0:	cmp	r3, #0
   15fb4:	beq	15f88 <__assert_fail@plt+0x4b10>
   15fb8:	ldr	r1, [sp, #36]	; 0x24
   15fbc:	ldr	r3, [sp, #32]
   15fc0:	cmp	r3, r1
   15fc4:	bls	15eb4 <__assert_fail@plt+0x4a3c>
   15fc8:	b	15f88 <__assert_fail@plt+0x4b10>
   15fcc:	ldr	r3, [sp, #4]
   15fd0:	subs	r3, r3, #2
   15fd4:	rsbs	r0, r3, #0
   15fd8:	adcs	r0, r0, r3
   15fdc:	b	15f0c <__assert_fail@plt+0x4a94>
   15fe0:	bl	111f0 <__stack_chk_fail@plt>
   15fe4:	andeq	r2, r1, r8, lsr #4
   15fe8:	andeq	r0, r0, ip, lsr #2
   15fec:			; <UNDEFINED> instruction: 0x000017b8
   15ff0:	cmp	r3, #0
   15ff4:	cmpeq	r2, #0
   15ff8:	bne	16010 <__assert_fail@plt+0x4b98>
   15ffc:	cmp	r1, #0
   16000:	cmpeq	r0, #0
   16004:	mvnne	r1, #0
   16008:	mvnne	r0, #0
   1600c:	b	1602c <__assert_fail@plt+0x4bb4>
   16010:	sub	sp, sp, #8
   16014:	push	{sp, lr}
   16018:	bl	16078 <__assert_fail@plt+0x4c00>
   1601c:	ldr	lr, [sp, #4]
   16020:	add	sp, sp, #8
   16024:	pop	{r2, r3}
   16028:	bx	lr
   1602c:	push	{r1, lr}
   16030:	mov	r0, #8
   16034:	bl	11130 <raise@plt>
   16038:	pop	{r1, pc}
   1603c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16040:	mov	r8, r2
   16044:	mov	r6, r0
   16048:	mov	r7, r1
   1604c:	mov	sl, r3
   16050:	ldr	r9, [sp, #32]
   16054:	bl	160b4 <__assert_fail@plt+0x4c3c>
   16058:	umull	r4, r5, r8, r0
   1605c:	mul	r8, r8, r1
   16060:	mla	r2, r0, sl, r8
   16064:	add	r5, r2, r5
   16068:	subs	r4, r6, r4
   1606c:	sbc	r5, r7, r5
   16070:	strd	r4, [r9]
   16074:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16078:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1607c:	mov	r8, r2
   16080:	mov	r6, r0
   16084:	mov	r7, r1
   16088:	mov	r5, r3
   1608c:	ldr	r9, [sp, #32]
   16090:	bl	16540 <__assert_fail@plt+0x50c8>
   16094:	mul	r3, r0, r5
   16098:	umull	r4, r5, r0, r8
   1609c:	mla	r8, r8, r1, r3
   160a0:	add	r5, r8, r5
   160a4:	subs	r4, r6, r4
   160a8:	sbc	r5, r7, r5
   160ac:	strd	r4, [r9]
   160b0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   160b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160b8:	rsbs	r4, r0, #0
   160bc:	rsc	r5, r1, #0
   160c0:	cmp	r1, #0
   160c4:	mvn	r6, #0
   160c8:	sub	sp, sp, #12
   160cc:	movge	r4, r0
   160d0:	movge	r5, r1
   160d4:	movge	r6, #0
   160d8:	cmp	r3, #0
   160dc:	blt	16314 <__assert_fail@plt+0x4e9c>
   160e0:	cmp	r3, #0
   160e4:	mov	sl, r4
   160e8:	mov	ip, r5
   160ec:	mov	r0, r2
   160f0:	mov	r1, r3
   160f4:	mov	r8, r2
   160f8:	mov	r7, r4
   160fc:	mov	r9, r5
   16100:	bne	161f8 <__assert_fail@plt+0x4d80>
   16104:	cmp	r2, r5
   16108:	bls	16234 <__assert_fail@plt+0x4dbc>
   1610c:	clz	r3, r2
   16110:	cmp	r3, #0
   16114:	rsbne	r2, r3, #32
   16118:	lslne	r8, r0, r3
   1611c:	lsrne	r2, r4, r2
   16120:	lslne	r7, r4, r3
   16124:	orrne	r9, r2, r5, lsl r3
   16128:	lsr	r4, r8, #16
   1612c:	uxth	sl, r8
   16130:	mov	r1, r4
   16134:	mov	r0, r9
   16138:	bl	16970 <__assert_fail@plt+0x54f8>
   1613c:	mov	r1, r4
   16140:	mov	fp, r0
   16144:	mov	r0, r9
   16148:	bl	16b5c <__assert_fail@plt+0x56e4>
   1614c:	mul	r0, sl, fp
   16150:	lsr	r2, r7, #16
   16154:	orr	r1, r2, r1, lsl #16
   16158:	cmp	r0, r1
   1615c:	bls	16180 <__assert_fail@plt+0x4d08>
   16160:	adds	r1, r1, r8
   16164:	sub	r3, fp, #1
   16168:	bcs	1617c <__assert_fail@plt+0x4d04>
   1616c:	cmp	r0, r1
   16170:	subhi	fp, fp, #2
   16174:	addhi	r1, r1, r8
   16178:	bhi	16180 <__assert_fail@plt+0x4d08>
   1617c:	mov	fp, r3
   16180:	rsb	r9, r0, r1
   16184:	mov	r1, r4
   16188:	uxth	r7, r7
   1618c:	mov	r0, r9
   16190:	bl	16970 <__assert_fail@plt+0x54f8>
   16194:	mov	r1, r4
   16198:	mov	r5, r0
   1619c:	mov	r0, r9
   161a0:	bl	16b5c <__assert_fail@plt+0x56e4>
   161a4:	mul	sl, sl, r5
   161a8:	orr	r1, r7, r1, lsl #16
   161ac:	cmp	sl, r1
   161b0:	bls	161d0 <__assert_fail@plt+0x4d58>
   161b4:	adds	r8, r1, r8
   161b8:	sub	r3, r5, #1
   161bc:	bcs	161cc <__assert_fail@plt+0x4d54>
   161c0:	cmp	sl, r8
   161c4:	subhi	r5, r5, #2
   161c8:	bhi	161d0 <__assert_fail@plt+0x4d58>
   161cc:	mov	r5, r3
   161d0:	orr	r3, r5, fp, lsl #16
   161d4:	mov	r4, #0
   161d8:	cmp	r6, #0
   161dc:	mov	r0, r3
   161e0:	mov	r1, r4
   161e4:	beq	161f0 <__assert_fail@plt+0x4d78>
   161e8:	rsbs	r0, r0, #0
   161ec:	rsc	r1, r1, #0
   161f0:	add	sp, sp, #12
   161f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161f8:	cmp	r3, r5
   161fc:	movhi	r4, #0
   16200:	movhi	r3, r4
   16204:	bhi	161d8 <__assert_fail@plt+0x4d60>
   16208:	clz	r5, r1
   1620c:	cmp	r5, #0
   16210:	bne	16400 <__assert_fail@plt+0x4f88>
   16214:	cmp	r1, ip
   16218:	cmpcs	r2, sl
   1621c:	movhi	r4, #0
   16220:	movls	r4, #1
   16224:	movls	r3, #1
   16228:	movls	r4, r5
   1622c:	movhi	r3, r4
   16230:	b	161d8 <__assert_fail@plt+0x4d60>
   16234:	cmp	r2, #0
   16238:	bne	1624c <__assert_fail@plt+0x4dd4>
   1623c:	mov	r1, r2
   16240:	mov	r0, #1
   16244:	bl	16970 <__assert_fail@plt+0x54f8>
   16248:	mov	r8, r0
   1624c:	clz	r3, r8
   16250:	cmp	r3, #0
   16254:	bne	16324 <__assert_fail@plt+0x4eac>
   16258:	rsb	r9, r8, r9
   1625c:	lsr	r5, r8, #16
   16260:	uxth	sl, r8
   16264:	mov	r4, #1
   16268:	mov	r1, r5
   1626c:	mov	r0, r9
   16270:	bl	16970 <__assert_fail@plt+0x54f8>
   16274:	mov	r1, r5
   16278:	mov	fp, r0
   1627c:	mov	r0, r9
   16280:	bl	16b5c <__assert_fail@plt+0x56e4>
   16284:	mul	r0, sl, fp
   16288:	lsr	r2, r7, #16
   1628c:	orr	r1, r2, r1, lsl #16
   16290:	cmp	r0, r1
   16294:	bls	162b4 <__assert_fail@plt+0x4e3c>
   16298:	adds	r1, r1, r8
   1629c:	sub	r3, fp, #1
   162a0:	bcs	16520 <__assert_fail@plt+0x50a8>
   162a4:	cmp	r0, r1
   162a8:	subhi	fp, fp, #2
   162ac:	addhi	r1, r1, r8
   162b0:	bls	16520 <__assert_fail@plt+0x50a8>
   162b4:	rsb	r2, r0, r1
   162b8:	mov	r1, r5
   162bc:	str	r2, [sp]
   162c0:	uxth	r7, r7
   162c4:	mov	r0, r2
   162c8:	bl	16970 <__assert_fail@plt+0x54f8>
   162cc:	ldr	r2, [sp]
   162d0:	mov	r1, r5
   162d4:	mov	r9, r0
   162d8:	mov	r0, r2
   162dc:	bl	16b5c <__assert_fail@plt+0x56e4>
   162e0:	mul	sl, sl, r9
   162e4:	orr	r1, r7, r1, lsl #16
   162e8:	cmp	sl, r1
   162ec:	bls	1630c <__assert_fail@plt+0x4e94>
   162f0:	adds	r8, r1, r8
   162f4:	sub	r3, r9, #1
   162f8:	bcs	16308 <__assert_fail@plt+0x4e90>
   162fc:	cmp	sl, r8
   16300:	subhi	r9, r9, #2
   16304:	bhi	1630c <__assert_fail@plt+0x4e94>
   16308:	mov	r9, r3
   1630c:	orr	r3, r9, fp, lsl #16
   16310:	b	161d8 <__assert_fail@plt+0x4d60>
   16314:	mvn	r6, r6
   16318:	rsbs	r2, r2, #0
   1631c:	rsc	r3, r3, #0
   16320:	b	160e0 <__assert_fail@plt+0x4c68>
   16324:	lsl	r8, r8, r3
   16328:	rsb	fp, r3, #32
   1632c:	lsr	r4, r9, fp
   16330:	lsr	fp, r7, fp
   16334:	lsr	r5, r8, #16
   16338:	orr	fp, fp, r9, lsl r3
   1633c:	mov	r0, r4
   16340:	lsl	r7, r7, r3
   16344:	mov	r1, r5
   16348:	uxth	sl, r8
   1634c:	bl	16970 <__assert_fail@plt+0x54f8>
   16350:	mov	r1, r5
   16354:	mov	r3, r0
   16358:	mov	r0, r4
   1635c:	str	r3, [sp]
   16360:	bl	16b5c <__assert_fail@plt+0x56e4>
   16364:	ldr	r3, [sp]
   16368:	lsr	r2, fp, #16
   1636c:	mul	r0, sl, r3
   16370:	orr	r1, r2, r1, lsl #16
   16374:	cmp	r0, r1
   16378:	bls	16398 <__assert_fail@plt+0x4f20>
   1637c:	adds	r1, r1, r8
   16380:	sub	r2, r3, #1
   16384:	bcs	16538 <__assert_fail@plt+0x50c0>
   16388:	cmp	r0, r1
   1638c:	subhi	r3, r3, #2
   16390:	addhi	r1, r1, r8
   16394:	bls	16538 <__assert_fail@plt+0x50c0>
   16398:	rsb	r9, r0, r1
   1639c:	mov	r1, r5
   163a0:	str	r3, [sp]
   163a4:	uxth	fp, fp
   163a8:	mov	r0, r9
   163ac:	bl	16970 <__assert_fail@plt+0x54f8>
   163b0:	mov	r1, r5
   163b4:	mov	r4, r0
   163b8:	mov	r0, r9
   163bc:	bl	16b5c <__assert_fail@plt+0x56e4>
   163c0:	mul	r9, sl, r4
   163c4:	ldr	r3, [sp]
   163c8:	orr	r1, fp, r1, lsl #16
   163cc:	cmp	r9, r1
   163d0:	bls	163f4 <__assert_fail@plt+0x4f7c>
   163d4:	adds	r1, r1, r8
   163d8:	sub	r2, r4, #1
   163dc:	bcs	163f0 <__assert_fail@plt+0x4f78>
   163e0:	cmp	r9, r1
   163e4:	subhi	r4, r4, #2
   163e8:	addhi	r1, r1, r8
   163ec:	bhi	163f4 <__assert_fail@plt+0x4f7c>
   163f0:	mov	r4, r2
   163f4:	rsb	r9, r9, r1
   163f8:	orr	r4, r4, r3, lsl #16
   163fc:	b	16268 <__assert_fail@plt+0x4df0>
   16400:	rsb	sl, r5, #32
   16404:	lsl	r3, r2, r5
   16408:	lsr	r0, r2, sl
   1640c:	lsr	r2, ip, sl
   16410:	orr	r4, r0, r1, lsl r5
   16414:	lsr	sl, r7, sl
   16418:	mov	r0, r2
   1641c:	orr	sl, sl, ip, lsl r5
   16420:	lsr	r9, r4, #16
   16424:	str	r3, [sp, #4]
   16428:	str	r2, [sp]
   1642c:	uxth	fp, r4
   16430:	mov	r1, r9
   16434:	bl	16970 <__assert_fail@plt+0x54f8>
   16438:	ldr	r2, [sp]
   1643c:	mov	r1, r9
   16440:	mov	r8, r0
   16444:	mov	r0, r2
   16448:	bl	16b5c <__assert_fail@plt+0x56e4>
   1644c:	mul	r0, fp, r8
   16450:	lsr	r2, sl, #16
   16454:	orr	r1, r2, r1, lsl #16
   16458:	cmp	r0, r1
   1645c:	bls	1647c <__assert_fail@plt+0x5004>
   16460:	adds	r1, r1, r4
   16464:	sub	r2, r8, #1
   16468:	bcs	16530 <__assert_fail@plt+0x50b8>
   1646c:	cmp	r0, r1
   16470:	subhi	r8, r8, #2
   16474:	addhi	r1, r1, r4
   16478:	bls	16530 <__assert_fail@plt+0x50b8>
   1647c:	rsb	ip, r0, r1
   16480:	mov	r1, r9
   16484:	str	ip, [sp]
   16488:	mov	r0, ip
   1648c:	bl	16970 <__assert_fail@plt+0x54f8>
   16490:	ldr	ip, [sp]
   16494:	mov	r1, r9
   16498:	mov	r2, r0
   1649c:	mov	r0, ip
   164a0:	str	r2, [sp]
   164a4:	bl	16b5c <__assert_fail@plt+0x56e4>
   164a8:	ldr	r2, [sp]
   164ac:	uxth	ip, sl
   164b0:	mul	fp, fp, r2
   164b4:	orr	ip, ip, r1, lsl #16
   164b8:	cmp	fp, ip
   164bc:	bls	164dc <__assert_fail@plt+0x5064>
   164c0:	adds	ip, ip, r4
   164c4:	sub	r1, r2, #1
   164c8:	bcs	16528 <__assert_fail@plt+0x50b0>
   164cc:	cmp	fp, ip
   164d0:	subhi	r2, r2, #2
   164d4:	addhi	ip, ip, r4
   164d8:	bls	16528 <__assert_fail@plt+0x50b0>
   164dc:	ldr	r0, [sp, #4]
   164e0:	orr	r1, r2, r8, lsl #16
   164e4:	rsb	fp, fp, ip
   164e8:	umull	r2, r3, r1, r0
   164ec:	cmp	fp, r3
   164f0:	bcc	16514 <__assert_fail@plt+0x509c>
   164f4:	movne	r4, #0
   164f8:	moveq	r4, #1
   164fc:	cmp	r2, r7, lsl r5
   16500:	movls	r4, #0
   16504:	andhi	r4, r4, #1
   16508:	cmp	r4, #0
   1650c:	moveq	r3, r1
   16510:	beq	161d8 <__assert_fail@plt+0x4d60>
   16514:	sub	r3, r1, #1
   16518:	mov	r4, #0
   1651c:	b	161d8 <__assert_fail@plt+0x4d60>
   16520:	mov	fp, r3
   16524:	b	162b4 <__assert_fail@plt+0x4e3c>
   16528:	mov	r2, r1
   1652c:	b	164dc <__assert_fail@plt+0x5064>
   16530:	mov	r8, r2
   16534:	b	1647c <__assert_fail@plt+0x5004>
   16538:	mov	r3, r2
   1653c:	b	16398 <__assert_fail@plt+0x4f20>
   16540:	cmp	r3, #0
   16544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16548:	mov	r6, r0
   1654c:	sub	sp, sp, #12
   16550:	mov	r5, r1
   16554:	mov	r7, r0
   16558:	mov	r4, r2
   1655c:	mov	r8, r1
   16560:	bne	16640 <__assert_fail@plt+0x51c8>
   16564:	cmp	r2, r1
   16568:	bls	1667c <__assert_fail@plt+0x5204>
   1656c:	clz	r3, r2
   16570:	cmp	r3, #0
   16574:	rsbne	r8, r3, #32
   16578:	lslne	r4, r2, r3
   1657c:	lsrne	r8, r0, r8
   16580:	lslne	r7, r0, r3
   16584:	orrne	r8, r8, r1, lsl r3
   16588:	lsr	r5, r4, #16
   1658c:	uxth	sl, r4
   16590:	mov	r1, r5
   16594:	mov	r0, r8
   16598:	bl	16970 <__assert_fail@plt+0x54f8>
   1659c:	mov	r1, r5
   165a0:	mov	r9, r0
   165a4:	mov	r0, r8
   165a8:	bl	16b5c <__assert_fail@plt+0x56e4>
   165ac:	mul	r0, sl, r9
   165b0:	lsr	r3, r7, #16
   165b4:	orr	r1, r3, r1, lsl #16
   165b8:	cmp	r0, r1
   165bc:	bls	165e0 <__assert_fail@plt+0x5168>
   165c0:	adds	r1, r1, r4
   165c4:	sub	r2, r9, #1
   165c8:	bcs	165dc <__assert_fail@plt+0x5164>
   165cc:	cmp	r0, r1
   165d0:	subhi	r9, r9, #2
   165d4:	addhi	r1, r1, r4
   165d8:	bhi	165e0 <__assert_fail@plt+0x5168>
   165dc:	mov	r9, r2
   165e0:	rsb	r8, r0, r1
   165e4:	mov	r1, r5
   165e8:	uxth	r7, r7
   165ec:	mov	r0, r8
   165f0:	bl	16970 <__assert_fail@plt+0x54f8>
   165f4:	mov	r1, r5
   165f8:	mov	r6, r0
   165fc:	mov	r0, r8
   16600:	bl	16b5c <__assert_fail@plt+0x56e4>
   16604:	mul	sl, sl, r6
   16608:	orr	r1, r7, r1, lsl #16
   1660c:	cmp	sl, r1
   16610:	bls	1662c <__assert_fail@plt+0x51b4>
   16614:	adds	r4, r1, r4
   16618:	sub	r3, r6, #1
   1661c:	bcs	16928 <__assert_fail@plt+0x54b0>
   16620:	cmp	sl, r4
   16624:	subhi	r6, r6, #2
   16628:	bls	16928 <__assert_fail@plt+0x54b0>
   1662c:	orr	r0, r6, r9, lsl #16
   16630:	mov	r6, #0
   16634:	mov	r1, r6
   16638:	add	sp, sp, #12
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16640:	cmp	r3, r1
   16644:	movhi	r6, #0
   16648:	movhi	r0, r6
   1664c:	bhi	16634 <__assert_fail@plt+0x51bc>
   16650:	clz	r7, r3
   16654:	cmp	r7, #0
   16658:	bne	16758 <__assert_fail@plt+0x52e0>
   1665c:	cmp	r3, r1
   16660:	cmpcs	r2, r6
   16664:	movhi	r6, #0
   16668:	movls	r6, #1
   1666c:	movls	r0, #1
   16670:	movls	r6, r7
   16674:	movhi	r0, r6
   16678:	b	16634 <__assert_fail@plt+0x51bc>
   1667c:	cmp	r2, #0
   16680:	bne	16694 <__assert_fail@plt+0x521c>
   16684:	mov	r1, r2
   16688:	mov	r0, #1
   1668c:	bl	16970 <__assert_fail@plt+0x54f8>
   16690:	mov	r4, r0
   16694:	clz	r3, r4
   16698:	cmp	r3, #0
   1669c:	bne	16854 <__assert_fail@plt+0x53dc>
   166a0:	rsb	r5, r4, r5
   166a4:	lsr	r8, r4, #16
   166a8:	uxth	sl, r4
   166ac:	mov	r6, #1
   166b0:	mov	r1, r8
   166b4:	mov	r0, r5
   166b8:	bl	16970 <__assert_fail@plt+0x54f8>
   166bc:	mov	r1, r8
   166c0:	mov	r9, r0
   166c4:	mov	r0, r5
   166c8:	bl	16b5c <__assert_fail@plt+0x56e4>
   166cc:	mul	r0, sl, r9
   166d0:	lsr	r3, r7, #16
   166d4:	orr	r1, r3, r1, lsl #16
   166d8:	cmp	r0, r1
   166dc:	bls	166fc <__assert_fail@plt+0x5284>
   166e0:	adds	r1, r1, r4
   166e4:	sub	r2, r9, #1
   166e8:	bcs	16930 <__assert_fail@plt+0x54b8>
   166ec:	cmp	r0, r1
   166f0:	subhi	r9, r9, #2
   166f4:	addhi	r1, r1, r4
   166f8:	bls	16930 <__assert_fail@plt+0x54b8>
   166fc:	rsb	fp, r0, r1
   16700:	mov	r1, r8
   16704:	uxth	r7, r7
   16708:	mov	r0, fp
   1670c:	bl	16970 <__assert_fail@plt+0x54f8>
   16710:	mov	r1, r8
   16714:	mov	r5, r0
   16718:	mov	r0, fp
   1671c:	bl	16b5c <__assert_fail@plt+0x56e4>
   16720:	mul	sl, sl, r5
   16724:	orr	r1, r7, r1, lsl #16
   16728:	cmp	sl, r1
   1672c:	bls	16748 <__assert_fail@plt+0x52d0>
   16730:	adds	r4, r1, r4
   16734:	sub	r3, r5, #1
   16738:	bcs	16938 <__assert_fail@plt+0x54c0>
   1673c:	cmp	sl, r4
   16740:	subhi	r5, r5, #2
   16744:	bls	16938 <__assert_fail@plt+0x54c0>
   16748:	orr	r0, r5, r9, lsl #16
   1674c:	mov	r1, r6
   16750:	add	sp, sp, #12
   16754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16758:	rsb	r1, r7, #32
   1675c:	lsl	r0, r2, r7
   16760:	lsr	r2, r2, r1
   16764:	lsr	fp, r5, r1
   16768:	orr	r8, r2, r3, lsl r7
   1676c:	lsr	r1, r6, r1
   16770:	str	r0, [sp, #4]
   16774:	orr	r5, r1, r5, lsl r7
   16778:	lsr	r9, r8, #16
   1677c:	mov	r0, fp
   16780:	uxth	sl, r8
   16784:	mov	r1, r9
   16788:	bl	16970 <__assert_fail@plt+0x54f8>
   1678c:	mov	r1, r9
   16790:	mov	r4, r0
   16794:	mov	r0, fp
   16798:	bl	16b5c <__assert_fail@plt+0x56e4>
   1679c:	mul	r0, sl, r4
   167a0:	lsr	ip, r5, #16
   167a4:	orr	r1, ip, r1, lsl #16
   167a8:	cmp	r0, r1
   167ac:	bls	167c0 <__assert_fail@plt+0x5348>
   167b0:	adds	r1, r1, r8
   167b4:	sub	r2, r4, #1
   167b8:	bcc	16954 <__assert_fail@plt+0x54dc>
   167bc:	mov	r4, r2
   167c0:	rsb	ip, r0, r1
   167c4:	mov	r1, r9
   167c8:	str	ip, [sp]
   167cc:	uxth	r5, r5
   167d0:	mov	r0, ip
   167d4:	bl	16970 <__assert_fail@plt+0x54f8>
   167d8:	ldr	ip, [sp]
   167dc:	mov	r1, r9
   167e0:	mov	fp, r0
   167e4:	mov	r0, ip
   167e8:	bl	16b5c <__assert_fail@plt+0x56e4>
   167ec:	mul	sl, sl, fp
   167f0:	orr	r1, r5, r1, lsl #16
   167f4:	cmp	sl, r1
   167f8:	bls	1680c <__assert_fail@plt+0x5394>
   167fc:	adds	r1, r1, r8
   16800:	sub	r2, fp, #1
   16804:	bcc	16940 <__assert_fail@plt+0x54c8>
   16808:	mov	fp, r2
   1680c:	ldr	r3, [sp, #4]
   16810:	orr	r0, fp, r4, lsl #16
   16814:	rsb	sl, sl, r1
   16818:	umull	r4, r5, r0, r3
   1681c:	cmp	sl, r5
   16820:	bcc	16840 <__assert_fail@plt+0x53c8>
   16824:	movne	r3, #0
   16828:	moveq	r3, #1
   1682c:	cmp	r4, r6, lsl r7
   16830:	movls	r6, #0
   16834:	andhi	r6, r3, #1
   16838:	cmp	r6, #0
   1683c:	beq	16634 <__assert_fail@plt+0x51bc>
   16840:	mov	r6, #0
   16844:	sub	r0, r0, #1
   16848:	mov	r1, r6
   1684c:	add	sp, sp, #12
   16850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16854:	lsl	r4, r4, r3
   16858:	rsb	r9, r3, #32
   1685c:	lsr	r2, r5, r9
   16860:	lsr	r9, r6, r9
   16864:	lsr	r8, r4, #16
   16868:	orr	r9, r9, r5, lsl r3
   1686c:	mov	r0, r2
   16870:	lsl	r7, r6, r3
   16874:	mov	r1, r8
   16878:	str	r2, [sp]
   1687c:	bl	16970 <__assert_fail@plt+0x54f8>
   16880:	ldr	r2, [sp]
   16884:	mov	r1, r8
   16888:	uxth	sl, r4
   1688c:	mov	fp, r0
   16890:	mov	r0, r2
   16894:	bl	16b5c <__assert_fail@plt+0x56e4>
   16898:	mul	r0, sl, fp
   1689c:	lsr	r3, r9, #16
   168a0:	orr	r1, r3, r1, lsl #16
   168a4:	cmp	r0, r1
   168a8:	bls	168c8 <__assert_fail@plt+0x5450>
   168ac:	adds	r1, r1, r4
   168b0:	sub	r3, fp, #1
   168b4:	bcs	16968 <__assert_fail@plt+0x54f0>
   168b8:	cmp	r0, r1
   168bc:	subhi	fp, fp, #2
   168c0:	addhi	r1, r1, r4
   168c4:	bls	16968 <__assert_fail@plt+0x54f0>
   168c8:	rsb	r5, r0, r1
   168cc:	mov	r1, r8
   168d0:	uxth	r9, r9
   168d4:	mov	r0, r5
   168d8:	bl	16970 <__assert_fail@plt+0x54f8>
   168dc:	mov	r1, r8
   168e0:	mov	r6, r0
   168e4:	mov	r0, r5
   168e8:	bl	16b5c <__assert_fail@plt+0x56e4>
   168ec:	mul	r5, sl, r6
   168f0:	orr	r1, r9, r1, lsl #16
   168f4:	cmp	r5, r1
   168f8:	bls	1691c <__assert_fail@plt+0x54a4>
   168fc:	adds	r1, r1, r4
   16900:	sub	r3, r6, #1
   16904:	bcs	16918 <__assert_fail@plt+0x54a0>
   16908:	cmp	r5, r1
   1690c:	subhi	r6, r6, #2
   16910:	addhi	r1, r1, r4
   16914:	bhi	1691c <__assert_fail@plt+0x54a4>
   16918:	mov	r6, r3
   1691c:	rsb	r5, r5, r1
   16920:	orr	r6, r6, fp, lsl #16
   16924:	b	166b0 <__assert_fail@plt+0x5238>
   16928:	mov	r6, r3
   1692c:	b	1662c <__assert_fail@plt+0x51b4>
   16930:	mov	r9, r2
   16934:	b	166fc <__assert_fail@plt+0x5284>
   16938:	mov	r5, r3
   1693c:	b	16748 <__assert_fail@plt+0x52d0>
   16940:	cmp	sl, r1
   16944:	subhi	fp, fp, #2
   16948:	addhi	r1, r1, r8
   1694c:	bhi	1680c <__assert_fail@plt+0x5394>
   16950:	b	16808 <__assert_fail@plt+0x5390>
   16954:	cmp	r0, r1
   16958:	subhi	r4, r4, #2
   1695c:	addhi	r1, r1, r8
   16960:	bhi	167c0 <__assert_fail@plt+0x5348>
   16964:	b	167bc <__assert_fail@plt+0x5344>
   16968:	mov	fp, r3
   1696c:	b	168c8 <__assert_fail@plt+0x5450>
   16970:	subs	r2, r1, #1
   16974:	bxeq	lr
   16978:	bcc	16b50 <__assert_fail@plt+0x56d8>
   1697c:	cmp	r0, r1
   16980:	bls	16b34 <__assert_fail@plt+0x56bc>
   16984:	tst	r1, r2
   16988:	beq	16b40 <__assert_fail@plt+0x56c8>
   1698c:	clz	r3, r0
   16990:	clz	r2, r1
   16994:	sub	r3, r2, r3
   16998:	rsbs	r3, r3, #31
   1699c:	addne	r3, r3, r3, lsl #1
   169a0:	mov	r2, #0
   169a4:	addne	pc, pc, r3, lsl #2
   169a8:	nop	{0}
   169ac:	cmp	r0, r1, lsl #31
   169b0:	adc	r2, r2, r2
   169b4:	subcs	r0, r0, r1, lsl #31
   169b8:	cmp	r0, r1, lsl #30
   169bc:	adc	r2, r2, r2
   169c0:	subcs	r0, r0, r1, lsl #30
   169c4:	cmp	r0, r1, lsl #29
   169c8:	adc	r2, r2, r2
   169cc:	subcs	r0, r0, r1, lsl #29
   169d0:	cmp	r0, r1, lsl #28
   169d4:	adc	r2, r2, r2
   169d8:	subcs	r0, r0, r1, lsl #28
   169dc:	cmp	r0, r1, lsl #27
   169e0:	adc	r2, r2, r2
   169e4:	subcs	r0, r0, r1, lsl #27
   169e8:	cmp	r0, r1, lsl #26
   169ec:	adc	r2, r2, r2
   169f0:	subcs	r0, r0, r1, lsl #26
   169f4:	cmp	r0, r1, lsl #25
   169f8:	adc	r2, r2, r2
   169fc:	subcs	r0, r0, r1, lsl #25
   16a00:	cmp	r0, r1, lsl #24
   16a04:	adc	r2, r2, r2
   16a08:	subcs	r0, r0, r1, lsl #24
   16a0c:	cmp	r0, r1, lsl #23
   16a10:	adc	r2, r2, r2
   16a14:	subcs	r0, r0, r1, lsl #23
   16a18:	cmp	r0, r1, lsl #22
   16a1c:	adc	r2, r2, r2
   16a20:	subcs	r0, r0, r1, lsl #22
   16a24:	cmp	r0, r1, lsl #21
   16a28:	adc	r2, r2, r2
   16a2c:	subcs	r0, r0, r1, lsl #21
   16a30:	cmp	r0, r1, lsl #20
   16a34:	adc	r2, r2, r2
   16a38:	subcs	r0, r0, r1, lsl #20
   16a3c:	cmp	r0, r1, lsl #19
   16a40:	adc	r2, r2, r2
   16a44:	subcs	r0, r0, r1, lsl #19
   16a48:	cmp	r0, r1, lsl #18
   16a4c:	adc	r2, r2, r2
   16a50:	subcs	r0, r0, r1, lsl #18
   16a54:	cmp	r0, r1, lsl #17
   16a58:	adc	r2, r2, r2
   16a5c:	subcs	r0, r0, r1, lsl #17
   16a60:	cmp	r0, r1, lsl #16
   16a64:	adc	r2, r2, r2
   16a68:	subcs	r0, r0, r1, lsl #16
   16a6c:	cmp	r0, r1, lsl #15
   16a70:	adc	r2, r2, r2
   16a74:	subcs	r0, r0, r1, lsl #15
   16a78:	cmp	r0, r1, lsl #14
   16a7c:	adc	r2, r2, r2
   16a80:	subcs	r0, r0, r1, lsl #14
   16a84:	cmp	r0, r1, lsl #13
   16a88:	adc	r2, r2, r2
   16a8c:	subcs	r0, r0, r1, lsl #13
   16a90:	cmp	r0, r1, lsl #12
   16a94:	adc	r2, r2, r2
   16a98:	subcs	r0, r0, r1, lsl #12
   16a9c:	cmp	r0, r1, lsl #11
   16aa0:	adc	r2, r2, r2
   16aa4:	subcs	r0, r0, r1, lsl #11
   16aa8:	cmp	r0, r1, lsl #10
   16aac:	adc	r2, r2, r2
   16ab0:	subcs	r0, r0, r1, lsl #10
   16ab4:	cmp	r0, r1, lsl #9
   16ab8:	adc	r2, r2, r2
   16abc:	subcs	r0, r0, r1, lsl #9
   16ac0:	cmp	r0, r1, lsl #8
   16ac4:	adc	r2, r2, r2
   16ac8:	subcs	r0, r0, r1, lsl #8
   16acc:	cmp	r0, r1, lsl #7
   16ad0:	adc	r2, r2, r2
   16ad4:	subcs	r0, r0, r1, lsl #7
   16ad8:	cmp	r0, r1, lsl #6
   16adc:	adc	r2, r2, r2
   16ae0:	subcs	r0, r0, r1, lsl #6
   16ae4:	cmp	r0, r1, lsl #5
   16ae8:	adc	r2, r2, r2
   16aec:	subcs	r0, r0, r1, lsl #5
   16af0:	cmp	r0, r1, lsl #4
   16af4:	adc	r2, r2, r2
   16af8:	subcs	r0, r0, r1, lsl #4
   16afc:	cmp	r0, r1, lsl #3
   16b00:	adc	r2, r2, r2
   16b04:	subcs	r0, r0, r1, lsl #3
   16b08:	cmp	r0, r1, lsl #2
   16b0c:	adc	r2, r2, r2
   16b10:	subcs	r0, r0, r1, lsl #2
   16b14:	cmp	r0, r1, lsl #1
   16b18:	adc	r2, r2, r2
   16b1c:	subcs	r0, r0, r1, lsl #1
   16b20:	cmp	r0, r1
   16b24:	adc	r2, r2, r2
   16b28:	subcs	r0, r0, r1
   16b2c:	mov	r0, r2
   16b30:	bx	lr
   16b34:	moveq	r0, #1
   16b38:	movne	r0, #0
   16b3c:	bx	lr
   16b40:	clz	r2, r1
   16b44:	rsb	r2, r2, #31
   16b48:	lsr	r0, r0, r2
   16b4c:	bx	lr
   16b50:	cmp	r0, #0
   16b54:	mvnne	r0, #0
   16b58:	b	1602c <__assert_fail@plt+0x4bb4>
   16b5c:	cmp	r1, #0
   16b60:	beq	16b50 <__assert_fail@plt+0x56d8>
   16b64:	push	{r0, r1, lr}
   16b68:	bl	16970 <__assert_fail@plt+0x54f8>
   16b6c:	pop	{r1, r2, lr}
   16b70:	mul	r3, r2, r0
   16b74:	sub	r1, r1, r3
   16b78:	bx	lr
   16b7c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16b80:	mov	r7, r0
   16b84:	ldr	r6, [pc, #76]	; 16bd8 <__assert_fail@plt+0x5760>
   16b88:	mov	r8, r1
   16b8c:	ldr	r5, [pc, #72]	; 16bdc <__assert_fail@plt+0x5764>
   16b90:	mov	r9, r2
   16b94:	add	r6, pc, r6
   16b98:	bl	11104 <calloc@plt-0x20>
   16b9c:	add	r5, pc, r5
   16ba0:	rsb	r6, r5, r6
   16ba4:	asrs	r6, r6, #2
   16ba8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   16bac:	sub	r5, r5, #4
   16bb0:	mov	r4, #0
   16bb4:	add	r4, r4, #1
   16bb8:	ldr	r3, [r5, #4]!
   16bbc:	mov	r0, r7
   16bc0:	mov	r1, r8
   16bc4:	mov	r2, r9
   16bc8:	blx	r3
   16bcc:	cmp	r4, r6
   16bd0:	bne	16bb4 <__assert_fail@plt+0x573c>
   16bd4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16bd8:	andeq	r1, r1, r4, ror #6
   16bdc:	andeq	r1, r1, r8, asr r3
   16be0:	bx	lr
   16be4:	ldr	r3, [pc, #28]	; 16c08 <__assert_fail@plt+0x5790>
   16be8:	mov	r1, #0
   16bec:	ldr	r2, [pc, #24]	; 16c0c <__assert_fail@plt+0x5794>
   16bf0:	add	r3, pc, r3
   16bf4:	ldr	r3, [r3, r2]
   16bf8:	cmp	r3, #0
   16bfc:	ldrne	r2, [r3]
   16c00:	moveq	r2, r3
   16c04:	b	11310 <__cxa_atexit@plt>
   16c08:	andeq	r1, r1, r8, lsl #8
   16c0c:	andeq	r0, r0, r4, lsr r1

Disassembly of section .fini:

00016c10 <.fini>:
   16c10:	push	{r3, lr}
   16c14:	pop	{r3, pc}
