
centos-preinstalled/nettle-lfib-stream:     file format elf32-littlearm


Disassembly of section .init:

000106b4 <_init@@Base>:
   106b4:	push	{r3, lr}
   106b8:	bl	108b8 <abort@plt+0x178>
   106bc:	pop	{r3, pc}

Disassembly of section .plt:

000106c0 <strtol@plt-0x14>:
   106c0:	push	{lr}		; (str lr, [sp, #-4]!)
   106c4:	ldr	lr, [pc, #4]	; 106d0 <_init@@Base+0x1c>
   106c8:	add	lr, pc, lr
   106cc:	ldr	pc, [lr, #8]!
   106d0:	andeq	r0, r1, r0, lsr r9

000106d4 <strtol@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2352]!	; 0x930

000106e0 <fflush@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2344]!	; 0x928

000106ec <time@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2336]!	; 0x920

000106f8 <__stack_chk_fail@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2328]!	; 0x918

00010704 <fwrite@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2320]!	; 0x910

00010710 <__libc_start_main@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2312]!	; 0x908

0001071c <__gmon_start__@plt>:
   1071c:	add	ip, pc, #0, 12
   10720:	add	ip, ip, #16, 20	; 0x10000
   10724:	ldr	pc, [ip, #2304]!	; 0x900

00010728 <nettle_knuth_lfib_random@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #16, 20	; 0x10000
   10730:	ldr	pc, [ip, #2296]!	; 0x8f8

00010734 <nettle_knuth_lfib_init@plt>:
   10734:	add	ip, pc, #0, 12
   10738:	add	ip, ip, #16, 20	; 0x10000
   1073c:	ldr	pc, [ip, #2288]!	; 0x8f0

00010740 <abort@plt>:
   10740:	add	ip, pc, #0, 12
   10744:	add	ip, ip, #16, 20	; 0x10000
   10748:	ldr	pc, [ip, #2280]!	; 0x8e8

Disassembly of section .text:

0001074c <.text>:
   1074c:	push	{r4, r5, r6, r7, lr}
   10750:	cmp	r0, #1
   10754:	ldr	r5, [pc, #264]	; 10864 <abort@plt+0x124>
   10758:	sub	sp, sp, #916	; 0x394
   1075c:	ldr	r3, [pc, #260]	; 10868 <abort@plt+0x128>
   10760:	add	r5, pc, r5
   10764:	ldr	r7, [r5, r3]
   10768:	ldr	r3, [r7]
   1076c:	str	r3, [sp, #908]	; 0x38c
   10770:	beq	1082c <abort@plt+0xec>
   10774:	cmp	r0, #2
   10778:	beq	107b8 <abort@plt+0x78>
   1077c:	ldr	r3, [pc, #232]	; 1086c <abort@plt+0x12c>
   10780:	mov	r1, #1
   10784:	ldr	r0, [pc, #228]	; 10870 <abort@plt+0x130>
   10788:	mov	r2, #26
   1078c:	ldr	r3, [r5, r3]
   10790:	add	r0, pc, r0
   10794:	ldr	r3, [r3]
   10798:	bl	10704 <fwrite@plt>
   1079c:	ldr	r2, [sp, #908]	; 0x38c
   107a0:	mov	r0, #1
   107a4:	ldr	r3, [r7]
   107a8:	cmp	r2, r3
   107ac:	bne	10860 <abort@plt+0x120>
   107b0:	add	sp, sp, #916	; 0x394
   107b4:	pop	{r4, r5, r6, r7, pc}
   107b8:	ldr	r0, [r1, #4]
   107bc:	mov	r2, #10
   107c0:	mov	r1, #0
   107c4:	bl	106d4 <strtol@plt>
   107c8:	subs	r1, r0, #0
   107cc:	beq	1083c <abort@plt+0xfc>
   107d0:	add	r6, sp, #4
   107d4:	add	r4, sp, #408	; 0x198
   107d8:	mov	r0, r6
   107dc:	bl	10734 <nettle_knuth_lfib_init@plt>
   107e0:	ldr	r3, [pc, #140]	; 10874 <abort@plt+0x134>
   107e4:	ldr	r5, [r5, r3]
   107e8:	b	107fc <abort@plt+0xbc>
   107ec:	ldr	r0, [r5]
   107f0:	bl	106e0 <fflush@plt>
   107f4:	cmp	r0, #0
   107f8:	blt	1079c <abort@plt+0x5c>
   107fc:	mov	r0, r6
   10800:	mov	r1, #500	; 0x1f4
   10804:	mov	r2, r4
   10808:	bl	10728 <nettle_knuth_lfib_random@plt>
   1080c:	mov	r0, r4
   10810:	mov	r1, #1
   10814:	mov	r2, #500	; 0x1f4
   10818:	ldr	r3, [r5]
   1081c:	bl	10704 <fwrite@plt>
   10820:	cmp	r0, #500	; 0x1f4
   10824:	bcs	107ec <abort@plt+0xac>
   10828:	b	1079c <abort@plt+0x5c>
   1082c:	mov	r0, #0
   10830:	bl	106ec <time@plt>
   10834:	mov	r1, r0
   10838:	b	107d0 <abort@plt+0x90>
   1083c:	ldr	r3, [pc, #40]	; 1086c <abort@plt+0x12c>
   10840:	mov	r1, #1
   10844:	ldr	r0, [pc, #44]	; 10878 <abort@plt+0x138>
   10848:	mov	r2, #26
   1084c:	ldr	r3, [r5, r3]
   10850:	add	r0, pc, r0
   10854:	ldr	r3, [r3]
   10858:	bl	10704 <fwrite@plt>
   1085c:	b	1079c <abort@plt+0x5c>
   10860:	bl	106f8 <__stack_chk_fail@plt>
   10864:	muleq	r1, r8, r8
   10868:	andeq	r0, r0, r4, lsr r0
   1086c:	andeq	r0, r0, r8, lsr r0
   10870:	muleq	r0, r0, r2
   10874:	andeq	r0, r0, r0, asr #32
   10878:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1087c:	mov	fp, #0
   10880:	mov	lr, #0
   10884:	pop	{r1}		; (ldr r1, [sp], #4)
   10888:	mov	r2, sp
   1088c:	push	{r2}		; (str r2, [sp, #-4]!)
   10890:	push	{r0}		; (str r0, [sp, #-4]!)
   10894:	ldr	ip, [pc, #16]	; 108ac <abort@plt+0x16c>
   10898:	push	{ip}		; (str ip, [sp, #-4]!)
   1089c:	ldr	r0, [pc, #12]	; 108b0 <abort@plt+0x170>
   108a0:	ldr	r3, [pc, #12]	; 108b4 <abort@plt+0x174>
   108a4:	bl	10710 <__libc_start_main@plt>
   108a8:	bl	10740 <abort@plt>
   108ac:	andeq	r0, r1, r4, lsl sl
   108b0:	andeq	r0, r1, ip, asr #14
   108b4:			; <UNDEFINED> instruction: 0x000109b0
   108b8:	ldr	r3, [pc, #20]	; 108d4 <abort@plt+0x194>
   108bc:	ldr	r2, [pc, #20]	; 108d8 <abort@plt+0x198>
   108c0:	add	r3, pc, r3
   108c4:	ldr	r2, [r3, r2]
   108c8:	cmp	r2, #0
   108cc:	bxeq	lr
   108d0:	b	1071c <__gmon_start__@plt>
   108d4:	andeq	r0, r1, r8, lsr r7
   108d8:	andeq	r0, r0, ip, lsr r0
   108dc:	push	{r3, lr}
   108e0:	movw	r0, #4168	; 0x1048
   108e4:	ldr	r3, [pc, #36]	; 10910 <abort@plt+0x1d0>
   108e8:	movt	r0, #2
   108ec:	rsb	r3, r0, r3
   108f0:	cmp	r3, #6
   108f4:	popls	{r3, pc}
   108f8:	movw	r3, #0
   108fc:	movt	r3, #0
   10900:	cmp	r3, #0
   10904:	popeq	{r3, pc}
   10908:	blx	r3
   1090c:	pop	{r3, pc}
   10910:	andeq	r1, r2, fp, asr #32
   10914:	push	{r3, lr}
   10918:	movw	r0, #4168	; 0x1048
   1091c:	movw	r3, #4168	; 0x1048
   10920:	movt	r0, #2
   10924:	movt	r3, #2
   10928:	rsb	r3, r0, r3
   1092c:	asr	r3, r3, #2
   10930:	add	r3, r3, r3, lsr #31
   10934:	asrs	r1, r3, #1
   10938:	popeq	{r3, pc}
   1093c:	movw	r2, #0
   10940:	movt	r2, #0
   10944:	cmp	r2, #0
   10948:	popeq	{r3, pc}
   1094c:	blx	r2
   10950:	pop	{r3, pc}
   10954:	push	{r4, lr}
   10958:	movw	r4, #4168	; 0x1048
   1095c:	movt	r4, #2
   10960:	ldrb	r3, [r4]
   10964:	cmp	r3, #0
   10968:	popne	{r4, pc}
   1096c:	bl	108dc <abort@plt+0x19c>
   10970:	mov	r3, #1
   10974:	strb	r3, [r4]
   10978:	pop	{r4, pc}
   1097c:	movw	r0, #3828	; 0xef4
   10980:	movt	r0, #2
   10984:	push	{r3, lr}
   10988:	ldr	r3, [r0]
   1098c:	cmp	r3, #0
   10990:	beq	109a8 <abort@plt+0x268>
   10994:	movw	r3, #0
   10998:	movt	r3, #0
   1099c:	cmp	r3, #0
   109a0:	beq	109a8 <abort@plt+0x268>
   109a4:	blx	r3
   109a8:	pop	{r3, lr}
   109ac:	b	10914 <abort@plt+0x1d4>
   109b0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   109b4:	mov	r7, r0
   109b8:	ldr	r6, [pc, #76]	; 10a0c <abort@plt+0x2cc>
   109bc:	mov	r8, r1
   109c0:	ldr	r5, [pc, #72]	; 10a10 <abort@plt+0x2d0>
   109c4:	mov	r9, r2
   109c8:	add	r6, pc, r6
   109cc:	bl	106b4 <_init@@Base>
   109d0:	add	r5, pc, r5
   109d4:	rsb	r6, r5, r6
   109d8:	asrs	r6, r6, #2
   109dc:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   109e0:	sub	r5, r5, #4
   109e4:	mov	r4, #0
   109e8:	add	r4, r4, #1
   109ec:	ldr	r3, [r5, #4]!
   109f0:	mov	r0, r7
   109f4:	mov	r1, r8
   109f8:	mov	r2, r9
   109fc:	blx	r3
   10a00:	cmp	r4, r6
   10a04:	bne	109e8 <abort@plt+0x2a8>
   10a08:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10a0c:	andeq	r0, r1, r0, lsr #10
   10a10:	andeq	r0, r1, r4, lsl r5
   10a14:	bx	lr

Disassembly of section .fini:

00010a18 <_fini@@Base>:
   10a18:	push	{r3, lr}
   10a1c:	pop	{r3, pc}
