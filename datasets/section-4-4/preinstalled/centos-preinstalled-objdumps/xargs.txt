
centos-preinstalled/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011280 <.init>:
   11280:	push	{r3, lr}
   11284:	bl	124c0 <__assert_fail@plt+0xe6c>
   11288:	pop	{r3, pc}

Disassembly of section .plt:

0001128c <fdopen@plt-0x14>:
   1128c:	push	{lr}		; (str lr, [sp, #-4]!)
   11290:	ldr	lr, [pc, #4]	; 1129c <fdopen@plt-0x4>
   11294:	add	lr, pc, lr
   11298:	ldr	pc, [lr, #8]!
   1129c:	andeq	r9, r1, r4, ror #26

000112a0 <fdopen@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #102400	; 0x19000
   112a8:	ldr	pc, [ip, #3428]!	; 0xd64

000112ac <calloc@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #102400	; 0x19000
   112b4:	ldr	pc, [ip, #3420]!	; 0xd5c

000112b8 <raise@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #102400	; 0x19000
   112c0:	ldr	pc, [ip, #3412]!	; 0xd54

000112c4 <strcmp@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #102400	; 0x19000
   112cc:	ldr	pc, [ip, #3404]!	; 0xd4c

000112d0 <strtol@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #102400	; 0x19000
   112d8:	ldr	pc, [ip, #3396]!	; 0xd44

000112dc <read@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #102400	; 0x19000
   112e4:	ldr	pc, [ip, #3388]!	; 0xd3c

000112e8 <fflush@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #102400	; 0x19000
   112f0:	ldr	pc, [ip, #3380]!	; 0xd34

000112f4 <wcwidth@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #102400	; 0x19000
   112fc:	ldr	pc, [ip, #3372]!	; 0xd2c

00011300 <free@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #102400	; 0x19000
   11308:	ldr	pc, [ip, #3364]!	; 0xd24

0001130c <ferror@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #102400	; 0x19000
   11314:	ldr	pc, [ip, #3356]!	; 0xd1c

00011318 <_exit@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #102400	; 0x19000
   11320:	ldr	pc, [ip, #3348]!	; 0xd14

00011324 <memcpy@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #102400	; 0x19000
   1132c:	ldr	pc, [ip, #3340]!	; 0xd0c

00011330 <execvp@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #102400	; 0x19000
   11338:	ldr	pc, [ip, #3332]!	; 0xd04

0001133c <mbsinit@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #102400	; 0x19000
   11344:	ldr	pc, [ip, #3324]!	; 0xcfc

00011348 <signal@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #102400	; 0x19000
   11350:	ldr	pc, [ip, #3316]!	; 0xcf4

00011354 <_IO_getc@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #102400	; 0x19000
   1135c:	ldr	pc, [ip, #3308]!	; 0xcec

00011360 <memcmp@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #102400	; 0x19000
   11368:	ldr	pc, [ip, #3300]!	; 0xce4

0001136c <dcgettext@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #102400	; 0x19000
   11374:	ldr	pc, [ip, #3292]!	; 0xcdc

00011378 <__stack_chk_fail@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #102400	; 0x19000
   11380:	ldr	pc, [ip, #3284]!	; 0xcd4

00011384 <sysconf@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #102400	; 0x19000
   1138c:	ldr	pc, [ip, #3276]!	; 0xccc

00011390 <realloc@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #102400	; 0x19000
   11398:	ldr	pc, [ip, #3268]!	; 0xcc4

0001139c <textdomain@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #102400	; 0x19000
   113a4:	ldr	pc, [ip, #3260]!	; 0xcbc

000113a8 <iswcntrl@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #102400	; 0x19000
   113b0:	ldr	pc, [ip, #3252]!	; 0xcb4

000113b4 <iswprint@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #102400	; 0x19000
   113bc:	ldr	pc, [ip, #3244]!	; 0xcac

000113c0 <sigaction@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #102400	; 0x19000
   113c8:	ldr	pc, [ip, #3236]!	; 0xca4

000113cc <_IO_putc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #102400	; 0x19000
   113d4:	ldr	pc, [ip, #3228]!	; 0xc9c

000113d8 <fwrite@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #102400	; 0x19000
   113e0:	ldr	pc, [ip, #3220]!	; 0xc94

000113e4 <lseek64@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #102400	; 0x19000
   113ec:	ldr	pc, [ip, #3212]!	; 0xc8c

000113f0 <waitpid@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #102400	; 0x19000
   113f8:	ldr	pc, [ip, #3204]!	; 0xc84

000113fc <__ctype_get_mb_cur_max@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #102400	; 0x19000
   11404:	ldr	pc, [ip, #3196]!	; 0xc7c

00011408 <strcpy@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #102400	; 0x19000
   11410:	ldr	pc, [ip, #3188]!	; 0xc74

00011414 <__fpending@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #102400	; 0x19000
   1141c:	ldr	pc, [ip, #3180]!	; 0xc6c

00011420 <mbrtowc@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #102400	; 0x19000
   11428:	ldr	pc, [ip, #3172]!	; 0xc64

0001142c <error@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #102400	; 0x19000
   11434:	ldr	pc, [ip, #3164]!	; 0xc5c

00011438 <open64@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #102400	; 0x19000
   11440:	ldr	pc, [ip, #3156]!	; 0xc54

00011444 <getenv@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #102400	; 0x19000
   1144c:	ldr	pc, [ip, #3148]!	; 0xc4c

00011450 <malloc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #102400	; 0x19000
   11458:	ldr	pc, [ip, #3140]!	; 0xc44

0001145c <__libc_start_main@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #102400	; 0x19000
   11464:	ldr	pc, [ip, #3132]!	; 0xc3c

00011468 <__freading@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #102400	; 0x19000
   11470:	ldr	pc, [ip, #3124]!	; 0xc34

00011474 <__gmon_start__@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #102400	; 0x19000
   1147c:	ldr	pc, [ip, #3116]!	; 0xc2c

00011480 <getopt_long@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #102400	; 0x19000
   11488:	ldr	pc, [ip, #3108]!	; 0xc24

0001148c <__ctype_b_loc@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #102400	; 0x19000
   11494:	ldr	pc, [ip, #3100]!	; 0xc1c

00011498 <getpid@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #102400	; 0x19000
   114a0:	ldr	pc, [ip, #3092]!	; 0xc14

000114a4 <exit@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #102400	; 0x19000
   114ac:	ldr	pc, [ip, #3084]!	; 0xc0c

000114b0 <strtoul@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #102400	; 0x19000
   114b8:	ldr	pc, [ip, #3076]!	; 0xc04

000114bc <strlen@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #102400	; 0x19000
   114c4:	ldr	pc, [ip, #3068]!	; 0xbfc

000114c8 <strchr@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #102400	; 0x19000
   114d0:	ldr	pc, [ip, #3060]!	; 0xbf4

000114d4 <setenv@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #102400	; 0x19000
   114dc:	ldr	pc, [ip, #3052]!	; 0xbec

000114e0 <ungetc@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #102400	; 0x19000
   114e8:	ldr	pc, [ip, #3044]!	; 0xbe4

000114ec <fcntl@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #102400	; 0x19000
   114f4:	ldr	pc, [ip, #3036]!	; 0xbdc

000114f8 <__errno_location@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #102400	; 0x19000
   11500:	ldr	pc, [ip, #3028]!	; 0xbd4

00011504 <__cxa_atexit@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #102400	; 0x19000
   1150c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011510 <memset@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #102400	; 0x19000
   11518:	ldr	pc, [ip, #3012]!	; 0xbc4

0001151c <strncpy@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #102400	; 0x19000
   11524:	ldr	pc, [ip, #3004]!	; 0xbbc

00011528 <fscanf@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #102400	; 0x19000
   11530:	ldr	pc, [ip, #2996]!	; 0xbb4

00011534 <__printf_chk@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #102400	; 0x19000
   1153c:	ldr	pc, [ip, #2988]!	; 0xbac

00011540 <write@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #102400	; 0x19000
   11548:	ldr	pc, [ip, #2980]!	; 0xba4

0001154c <fileno@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #102400	; 0x19000
   11554:	ldr	pc, [ip, #2972]!	; 0xb9c

00011558 <__fprintf_chk@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #102400	; 0x19000
   11560:	ldr	pc, [ip, #2964]!	; 0xb94

00011564 <memchr@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #102400	; 0x19000
   1156c:	ldr	pc, [ip, #2956]!	; 0xb8c

00011570 <fclose@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #102400	; 0x19000
   11578:	ldr	pc, [ip, #2948]!	; 0xb84

0001157c <strnlen@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #102400	; 0x19000
   11584:	ldr	pc, [ip, #2940]!	; 0xb7c

00011588 <pipe@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #102400	; 0x19000
   11590:	ldr	pc, [ip, #2932]!	; 0xb74

00011594 <fseeko64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #102400	; 0x19000
   1159c:	ldr	pc, [ip, #2924]!	; 0xb6c

000115a0 <__uflow@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #102400	; 0x19000
   115a8:	ldr	pc, [ip, #2916]!	; 0xb64

000115ac <setlocale@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #102400	; 0x19000
   115b4:	ldr	pc, [ip, #2908]!	; 0xb5c

000115b8 <sigemptyset@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #102400	; 0x19000
   115c0:	ldr	pc, [ip, #2900]!	; 0xb54

000115c4 <fork@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #102400	; 0x19000
   115cc:	ldr	pc, [ip, #2892]!	; 0xb4c

000115d0 <strrchr@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #102400	; 0x19000
   115d8:	ldr	pc, [ip, #2884]!	; 0xb44

000115dc <nl_langinfo@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #102400	; 0x19000
   115e4:	ldr	pc, [ip, #2876]!	; 0xb3c

000115e8 <fopen64@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #102400	; 0x19000
   115f0:	ldr	pc, [ip, #2868]!	; 0xb34

000115f4 <bindtextdomain@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #102400	; 0x19000
   115fc:	ldr	pc, [ip, #2860]!	; 0xb2c

00011600 <isatty@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #102400	; 0x19000
   11608:	ldr	pc, [ip, #2852]!	; 0xb24

0001160c <unsetenv@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #102400	; 0x19000
   11614:	ldr	pc, [ip, #2844]!	; 0xb1c

00011618 <fputs@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #102400	; 0x19000
   11620:	ldr	pc, [ip, #2836]!	; 0xb14

00011624 <strncmp@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #102400	; 0x19000
   1162c:	ldr	pc, [ip, #2828]!	; 0xb0c

00011630 <abort@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #102400	; 0x19000
   11638:	ldr	pc, [ip, #2820]!	; 0xb04

0001163c <close@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #102400	; 0x19000
   11644:	ldr	pc, [ip, #2812]!	; 0xafc

00011648 <__snprintf_chk@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #102400	; 0x19000
   11650:	ldr	pc, [ip, #2804]!	; 0xaf4

00011654 <__assert_fail@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #102400	; 0x19000
   1165c:	ldr	pc, [ip, #2796]!	; 0xaec

Disassembly of section .text:

00011660 <.text>:
   11660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11664:	movw	r3, #40996	; 0xa024
   11668:	sub	sp, sp, #244	; 0xf4
   1166c:	movt	r3, #1
   11670:	ldr	r2, [r1]
   11674:	movw	ip, #45488	; 0xb1b0
   11678:	movt	ip, #2
   1167c:	str	r1, [sp, #32]
   11680:	mov	fp, r0
   11684:	ldm	r3, {r0, r1}
   11688:	cmp	r2, #0
   1168c:	str	ip, [sp, #48]	; 0x30
   11690:	ldr	ip, [ip]
   11694:	movw	r5, #45528	; 0xb1d8
   11698:	str	r0, [sp, #228]	; 0xe4
   1169c:	movweq	r0, #39508	; 0x9a54
   116a0:	movne	r0, r2
   116a4:	movteq	r0, #1
   116a8:	str	ip, [sp, #236]	; 0xec
   116ac:	movt	r5, #2
   116b0:	strb	r1, [sp, #232]	; 0xe8
   116b4:	bl	15bb4 <__assert_fail@plt+0x4560>
   116b8:	bl	11498 <getpid@plt>
   116bc:	movw	r1, #40880	; 0x9fb0
   116c0:	movt	r1, #1
   116c4:	mov	r4, #0
   116c8:	str	r4, [r5, #152]	; 0x98
   116cc:	str	r0, [r5, #144]	; 0x90
   116d0:	mov	r0, #6
   116d4:	bl	115ac <setlocale@plt>
   116d8:	movw	r0, #41240	; 0xa118
   116dc:	movw	r1, #39516	; 0x9a5c
   116e0:	movt	r0, #1
   116e4:	movt	r1, #1
   116e8:	bl	115f4 <bindtextdomain@plt>
   116ec:	movw	r0, #41240	; 0xa118
   116f0:	movt	r0, #1
   116f4:	bl	1139c <textdomain@plt>
   116f8:	movw	r0, #17324	; 0x43ac
   116fc:	movt	r0, #1
   11700:	bl	18b34 <__assert_fail@plt+0x74e0>
   11704:	movw	r0, #12872	; 0x3248
   11708:	movt	r0, #1
   1170c:	bl	18b34 <__assert_fail@plt+0x74e0>
   11710:	add	r0, r5, #68	; 0x44
   11714:	mov	r1, #2048	; 0x800
   11718:	bl	14188 <__assert_fail@plt+0x2b34>
   1171c:	sub	r3, r0, #1
   11720:	str	r0, [sp, #56]	; 0x38
   11724:	cmp	r3, #1
   11728:	bls	11bc0 <__assert_fail@plt+0x56c>
   1172c:	mov	r0, r4
   11730:	bl	11384 <sysconf@plt>
   11734:	cmp	r0, #0
   11738:	ble	11758 <__assert_fail@plt+0x104>
   1173c:	cmp	r0, #2048	; 0x800
   11740:	ble	12458 <__assert_fail@plt+0xe04>
   11744:	ldr	r3, [r5, #80]	; 0x50
   11748:	sub	r0, r0, #2048	; 0x800
   1174c:	cmp	r0, r3
   11750:	strls	r0, [r5, #80]	; 0x50
   11754:	strhi	r3, [r5, #80]	; 0x50
   11758:	ldr	r2, [r5, #80]	; 0x50
   1175c:	movw	r3, #45528	; 0xb1d8
   11760:	movt	r3, #2
   11764:	cmp	r2, #2048	; 0x800
   11768:	bcc	12420 <__assert_fail@plt+0xdcc>
   1176c:	add	r0, r3, #68	; 0x44
   11770:	movw	r2, #13316	; 0x3404
   11774:	movw	ip, #9656	; 0x25b8
   11778:	movt	r2, #1
   1177c:	movt	ip, #1
   11780:	str	r2, [r3, #100]	; 0x64
   11784:	str	ip, [sp, #60]	; 0x3c
   11788:	bl	14254 <__assert_fail@plt+0x2c00>
   1178c:	movw	r7, #39504	; 0x9a50
   11790:	movw	r6, #45520	; 0xb1d0
   11794:	movw	r8, #45528	; 0xb1d8
   11798:	movt	r7, #1
   1179c:	movt	r6, #2
   117a0:	movt	r8, #2
   117a4:	add	r4, sp, #76	; 0x4c
   117a8:	movw	ip, #11644	; 0x2d7c
   117ac:	movt	ip, #1
   117b0:	str	ip, [sp, #36]	; 0x24
   117b4:	movw	ip, #35696	; 0x8b70
   117b8:	movt	ip, #1
   117bc:	str	ip, [sp, #52]	; 0x34
   117c0:	movw	ip, #40084	; 0x9c94
   117c4:	movt	ip, #1
   117c8:	str	ip, [sp, #40]	; 0x28
   117cc:	mov	ip, #1
   117d0:	str	ip, [sp, #68]	; 0x44
   117d4:	movw	ip, #45400	; 0xb158
   117d8:	movt	ip, #2
   117dc:	str	ip, [sp, #44]	; 0x2c
   117e0:	mov	ip, #0
   117e4:	str	ip, [sp, #64]	; 0x40
   117e8:	str	r4, [sp]
   117ec:	movw	r2, #40256	; 0x9d40
   117f0:	mov	r0, fp
   117f4:	movt	r2, #1
   117f8:	ldr	r1, [sp, #32]
   117fc:	ldr	r3, [pc, #3184]	; 12474 <__assert_fail@plt+0xe20>
   11800:	bl	11480 <getopt_long@plt>
   11804:	cmn	r0, #1
   11808:	mov	r9, r0
   1180c:	beq	11ce4 <__assert_fail@plt+0x690>
   11810:	cmp	r9, #104	; 0x68
   11814:	beq	11b54 <__assert_fail@plt+0x500>
   11818:	ble	11850 <__assert_fail@plt+0x1fc>
   1181c:	cmp	r9, #114	; 0x72
   11820:	beq	11b48 <__assert_fail@plt+0x4f4>
   11824:	ble	118d4 <__assert_fail@plt+0x280>
   11828:	cmp	r9, #118	; 0x76
   1182c:	beq	11abc <__assert_fail@plt+0x468>
   11830:	bgt	11948 <__assert_fail@plt+0x2f4>
   11834:	cmp	r9, #115	; 0x73
   11838:	beq	11b84 <__assert_fail@plt+0x530>
   1183c:	cmp	r9, #116	; 0x74
   11840:	bne	11b6c <__assert_fail@plt+0x518>
   11844:	mov	r3, #1
   11848:	strb	r3, [r5, #158]	; 0x9e
   1184c:	b	117e8 <__assert_fail@plt+0x194>
   11850:	cmp	r9, #80	; 0x50
   11854:	beq	11b20 <__assert_fail@plt+0x4cc>
   11858:	ble	11900 <__assert_fail@plt+0x2ac>
   1185c:	cmp	r9, #97	; 0x61
   11860:	beq	11a8c <__assert_fail@plt+0x438>
   11864:	ble	119ec <__assert_fail@plt+0x398>
   11868:	cmp	r9, #100	; 0x64
   1186c:	bne	11a94 <__assert_fail@plt+0x440>
   11870:	ldr	r9, [r6]
   11874:	mov	r0, r9
   11878:	bl	114bc <strlen@plt>
   1187c:	cmp	r0, #1
   11880:	ldrbeq	sl, [r9]
   11884:	beq	118c0 <__assert_fail@plt+0x26c>
   11888:	ldrb	r3, [r9]
   1188c:	cmp	r3, #92	; 0x5c
   11890:	beq	11bd8 <__assert_fail@plt+0x584>
   11894:	mov	r2, #5
   11898:	movw	r1, #39952	; 0x9c10
   1189c:	mov	r0, #0
   118a0:	movt	r1, #1
   118a4:	bl	1136c <dcgettext@plt>
   118a8:	mov	r3, r9
   118ac:	mov	r1, #0
   118b0:	mov	sl, #0
   118b4:	mov	r2, r0
   118b8:	mov	r0, #1
   118bc:	bl	1142c <error@plt>
   118c0:	movw	ip, #11336	; 0x2c48
   118c4:	strb	sl, [r5, #124]	; 0x7c
   118c8:	movt	ip, #1
   118cc:	str	ip, [sp, #36]	; 0x24
   118d0:	b	117e8 <__assert_fail@plt+0x194>
   118d4:	cmp	r9, #108	; 0x6c
   118d8:	beq	11a58 <__assert_fail@plt+0x404>
   118dc:	ble	11ae8 <__assert_fail@plt+0x494>
   118e0:	cmp	r9, #110	; 0x6e
   118e4:	beq	11a20 <__assert_fail@plt+0x3cc>
   118e8:	cmp	r9, #112	; 0x70
   118ec:	bne	11b6c <__assert_fail@plt+0x518>
   118f0:	mov	r3, #1
   118f4:	strb	r3, [r5, #157]	; 0x9d
   118f8:	strb	r3, [r5, #158]	; 0x9e
   118fc:	b	117e8 <__assert_fail@plt+0x194>
   11900:	cmp	r9, #69	; 0x45
   11904:	beq	11a9c <__assert_fail@plt+0x448>
   11908:	ble	11a00 <__assert_fail@plt+0x3ac>
   1190c:	cmp	r9, #73	; 0x49
   11910:	beq	11af0 <__assert_fail@plt+0x49c>
   11914:	cmp	r9, #76	; 0x4c
   11918:	bne	11b6c <__assert_fail@plt+0x518>
   1191c:	mov	r2, #1
   11920:	mvn	r3, #0
   11924:	str	r2, [sp]
   11928:	mov	r1, r9
   1192c:	ldr	r0, [r6]
   11930:	bl	12a64 <__assert_fail@plt+0x1410>
   11934:	mov	r3, #0
   11938:	str	r3, [r5, #108]	; 0x6c
   1193c:	str	r3, [r5, #92]	; 0x5c
   11940:	str	r0, [r5, #104]	; 0x68
   11944:	b	117e8 <__assert_fail@plt+0x194>
   11948:	cmp	r9, #120	; 0x78
   1194c:	beq	11b14 <__assert_fail@plt+0x4c0>
   11950:	cmp	r9, #256	; 0x100
   11954:	bne	11b6c <__assert_fail@plt+0x518>
   11958:	ldr	r0, [r6]
   1195c:	mov	r1, #61	; 0x3d
   11960:	bl	114c8 <strchr@plt>
   11964:	cmp	r0, #0
   11968:	beq	119a0 <__assert_fail@plt+0x34c>
   1196c:	mov	r2, #5
   11970:	movw	r1, #40156	; 0x9cdc
   11974:	mov	r0, #0
   11978:	movt	r1, #1
   1197c:	bl	1136c <dcgettext@plt>
   11980:	ldr	r3, [sp, #76]	; 0x4c
   11984:	ldr	ip, [sp, #52]	; 0x34
   11988:	mov	r1, #0
   1198c:	add	r3, ip, r3, lsl #4
   11990:	ldr	r3, [r3, #56]	; 0x38
   11994:	mov	r2, r0
   11998:	mov	r0, #1
   1199c:	bl	1142c <error@plt>
   119a0:	ldr	r9, [r6]
   119a4:	mov	r0, r9
   119a8:	str	r9, [r5, #160]	; 0xa0
   119ac:	bl	1160c <unsetenv@plt>
   119b0:	cmp	r0, #0
   119b4:	beq	117e8 <__assert_fail@plt+0x194>
   119b8:	bl	114f8 <__errno_location@plt>
   119bc:	mov	r2, #5
   119c0:	movw	r1, #40216	; 0x9d18
   119c4:	movt	r1, #1
   119c8:	ldr	sl, [r0]
   119cc:	mov	r0, #0
   119d0:	bl	1136c <dcgettext@plt>
   119d4:	mov	r3, r9
   119d8:	mov	r1, sl
   119dc:	mov	r2, r0
   119e0:	mov	r0, #1
   119e4:	bl	1142c <error@plt>
   119e8:	b	117e8 <__assert_fail@plt+0x194>
   119ec:	cmp	r9, #83	; 0x53
   119f0:	bne	11b6c <__assert_fail@plt+0x518>
   119f4:	mov	ip, #1
   119f8:	str	ip, [sp, #64]	; 0x40
   119fc:	b	117e8 <__assert_fail@plt+0x194>
   11a00:	cmp	r9, #48	; 0x30
   11a04:	bne	11b6c <__assert_fail@plt+0x518>
   11a08:	mov	r3, #0
   11a0c:	movw	ip, #11336	; 0x2c48
   11a10:	strb	r3, [r5, #124]	; 0x7c
   11a14:	movt	ip, #1
   11a18:	str	ip, [sp, #36]	; 0x24
   11a1c:	b	117e8 <__assert_fail@plt+0x194>
   11a20:	mov	r2, #1
   11a24:	mvn	r3, #0
   11a28:	str	r2, [sp]
   11a2c:	mov	r1, r9
   11a30:	ldr	r0, [r6]
   11a34:	bl	12a64 <__assert_fail@plt+0x1410>
   11a38:	mov	r3, #0
   11a3c:	str	r3, [r5, #104]	; 0x68
   11a40:	cmp	r0, #1
   11a44:	str	r0, [r5, #108]	; 0x6c
   11a48:	beq	11fe4 <__assert_fail@plt+0x990>
   11a4c:	mov	r3, #0
   11a50:	str	r3, [r5, #92]	; 0x5c
   11a54:	b	117e8 <__assert_fail@plt+0x194>
   11a58:	ldr	r0, [r6]
   11a5c:	cmp	r0, #0
   11a60:	beq	11fa0 <__assert_fail@plt+0x94c>
   11a64:	mov	r2, #1
   11a68:	mov	r1, r9
   11a6c:	str	r2, [sp]
   11a70:	mvn	r3, #0
   11a74:	bl	12a64 <__assert_fail@plt+0x1410>
   11a78:	str	r0, [r5, #104]	; 0x68
   11a7c:	mov	r3, #0
   11a80:	str	r3, [r5, #108]	; 0x6c
   11a84:	str	r3, [r5, #92]	; 0x5c
   11a88:	b	117e8 <__assert_fail@plt+0x194>
   11a8c:	ldr	r7, [r6]
   11a90:	b	117e8 <__assert_fail@plt+0x194>
   11a94:	cmp	r9, #101	; 0x65
   11a98:	bne	11b6c <__assert_fail@plt+0x518>
   11a9c:	ldr	r3, [r6]
   11aa0:	cmp	r3, #0
   11aa4:	beq	11bd0 <__assert_fail@plt+0x57c>
   11aa8:	ldrb	r2, [r3]
   11aac:	cmp	r2, #0
   11ab0:	beq	11bd0 <__assert_fail@plt+0x57c>
   11ab4:	str	r3, [r5, #136]	; 0x88
   11ab8:	b	117e8 <__assert_fail@plt+0x194>
   11abc:	movw	r0, #39508	; 0x9a54
   11ac0:	movt	r0, #1
   11ac4:	bl	138bc <__assert_fail@plt+0x2268>
   11ac8:	mov	r0, #0
   11acc:	ldr	ip, [sp, #48]	; 0x30
   11ad0:	ldr	r2, [sp, #236]	; 0xec
   11ad4:	ldr	r3, [ip]
   11ad8:	cmp	r2, r3
   11adc:	bne	1241c <__assert_fail@plt+0xdc8>
   11ae0:	add	sp, sp, #244	; 0xf4
   11ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ae8:	cmp	r9, #105	; 0x69
   11aec:	bne	11b6c <__assert_fail@plt+0x518>
   11af0:	ldr	r3, [r6]
   11af4:	mov	r2, #0
   11af8:	ldr	ip, [sp, #40]	; 0x28
   11afc:	cmp	r3, r2
   11b00:	str	r2, [r5, #108]	; 0x6c
   11b04:	str	r2, [r5, #104]	; 0x68
   11b08:	moveq	r3, ip
   11b0c:	str	r3, [r5, #92]	; 0x5c
   11b10:	b	117e8 <__assert_fail@plt+0x194>
   11b14:	mov	r3, #1
   11b18:	str	r3, [r5, #68]	; 0x44
   11b1c:	b	117e8 <__assert_fail@plt+0x194>
   11b20:	mov	r3, #1
   11b24:	ldr	r0, [r6]
   11b28:	mov	r1, r9
   11b2c:	str	r3, [sp]
   11b30:	mov	r2, #0
   11b34:	mvn	r3, #-2147483648	; 0x80000000
   11b38:	bl	12a64 <__assert_fail@plt+0x1410>
   11b3c:	ldr	ip, [sp, #44]	; 0x2c
   11b40:	str	r0, [ip]
   11b44:	b	117e8 <__assert_fail@plt+0x194>
   11b48:	mov	ip, #0
   11b4c:	str	ip, [sp, #68]	; 0x44
   11b50:	b	117e8 <__assert_fail@plt+0x194>
   11b54:	movw	r3, #45512	; 0xb1c8
   11b58:	movt	r3, #2
   11b5c:	ldr	r0, [r3]
   11b60:	bl	129e8 <__assert_fail@plt+0x1394>
   11b64:	mov	r0, #0
   11b68:	b	11acc <__assert_fail@plt+0x478>
   11b6c:	movw	r3, #45500	; 0xb1bc
   11b70:	movt	r3, #2
   11b74:	ldr	r0, [r3]
   11b78:	bl	129e8 <__assert_fail@plt+0x1394>
   11b7c:	mov	r0, #1
   11b80:	b	11acc <__assert_fail@plt+0x478>
   11b84:	ldr	ip, [sp, #60]	; 0x3c
   11b88:	mov	sl, #0
   11b8c:	blx	ip
   11b90:	mov	r1, r9
   11b94:	str	sl, [sp]
   11b98:	mov	r2, #1
   11b9c:	ldr	r3, [r5, #72]	; 0x48
   11ba0:	ldr	r0, [r6]
   11ba4:	bl	12a64 <__assert_fail@plt+0x1410>
   11ba8:	ldr	r3, [r5, #72]	; 0x48
   11bac:	cmp	r0, r3
   11bb0:	mov	r9, r0
   11bb4:	bhi	11fac <__assert_fail@plt+0x958>
   11bb8:	str	r9, [r5, #80]	; 0x50
   11bbc:	b	117e8 <__assert_fail@plt+0x194>
   11bc0:	movw	ip, #9732	; 0x2604
   11bc4:	movt	ip, #1
   11bc8:	str	ip, [sp, #60]	; 0x3c
   11bcc:	b	1178c <__assert_fail@plt+0x138>
   11bd0:	mov	r3, #0
   11bd4:	b	11ab4 <__assert_fail@plt+0x460>
   11bd8:	ldrb	sl, [r9, #1]
   11bdc:	cmp	sl, #102	; 0x66
   11be0:	beq	12390 <__assert_fail@plt+0xd3c>
   11be4:	bls	12064 <__assert_fail@plt+0xa10>
   11be8:	cmp	sl, #114	; 0x72
   11bec:	moveq	sl, #13
   11bf0:	beq	118c0 <__assert_fail@plt+0x26c>
   11bf4:	bls	12380 <__assert_fail@plt+0xd2c>
   11bf8:	cmp	sl, #116	; 0x74
   11bfc:	moveq	sl, #9
   11c00:	beq	118c0 <__assert_fail@plt+0x26c>
   11c04:	cmp	sl, #118	; 0x76
   11c08:	moveq	sl, #11
   11c0c:	beq	118c0 <__assert_fail@plt+0x26c>
   11c10:	cmp	sl, #120	; 0x78
   11c14:	beq	123d4 <__assert_fail@plt+0xd80>
   11c18:	bl	1148c <__ctype_b_loc@plt>
   11c1c:	lsl	sl, sl, #1
   11c20:	ldr	r3, [r0]
   11c24:	ldrh	sl, [r3, sl]
   11c28:	and	sl, sl, #2048	; 0x800
   11c2c:	uxth	sl, sl
   11c30:	cmp	sl, #0
   11c34:	addne	sl, r9, #1
   11c38:	bne	11c64 <__assert_fail@plt+0x610>
   11c3c:	mov	r2, #5
   11c40:	movw	r1, #39588	; 0x9aa4
   11c44:	mov	r0, sl
   11c48:	movt	r1, #1
   11c4c:	bl	1136c <dcgettext@plt>
   11c50:	mov	r1, sl
   11c54:	mov	r3, r9
   11c58:	mov	r2, r0
   11c5c:	mov	r0, #1
   11c60:	bl	1142c <error@plt>
   11c64:	bl	114f8 <__errno_location@plt>
   11c68:	add	r1, sp, #240	; 0xf0
   11c6c:	mov	r3, #0
   11c70:	str	r3, [r1, #-156]!	; 0xffffff64
   11c74:	mov	r2, r0
   11c78:	mov	r0, sl
   11c7c:	str	r3, [r2]
   11c80:	mov	r2, #8
   11c84:	str	r3, [sp, #28]
   11c88:	bl	114b0 <strtoul@plt>
   11c8c:	ldr	r3, [sp, #28]
   11c90:	cmp	r0, #255	; 0xff
   11c94:	mov	sl, r0
   11c98:	bhi	12398 <__assert_fail@plt+0xd44>
   11c9c:	ldr	r3, [sp, #84]	; 0x54
   11ca0:	ldrb	r3, [r3]
   11ca4:	cmp	r3, #0
   11ca8:	beq	11cdc <__assert_fail@plt+0x688>
   11cac:	mov	r2, #5
   11cb0:	movw	r1, #39852	; 0x9bac
   11cb4:	mov	r0, #0
   11cb8:	movt	r1, #1
   11cbc:	bl	1136c <dcgettext@plt>
   11cc0:	ldr	ip, [sp, #84]	; 0x54
   11cc4:	mov	r3, r9
   11cc8:	mov	r1, #0
   11ccc:	str	ip, [sp]
   11cd0:	mov	r2, r0
   11cd4:	mov	r0, #1
   11cd8:	bl	1142c <error@plt>
   11cdc:	uxtb	sl, sl
   11ce0:	b	118c0 <__assert_fail@plt+0x26c>
   11ce4:	ldr	ip, [sp, #60]	; 0x3c
   11ce8:	blx	ip
   11cec:	ldr	ip, [sp, #56]	; 0x38
   11cf0:	cmp	ip, #0
   11cf4:	bne	1243c <__assert_fail@plt+0xde8>
   11cf8:	add	r6, sp, #240	; 0xf0
   11cfc:	movw	r3, #9660	; 0x25bc
   11d00:	movt	r3, #1
   11d04:	str	r3, [r6, #-152]!	; 0xffffff68
   11d08:	add	r0, r6, #4
   11d0c:	bl	115b8 <sigemptyset@plt>
   11d10:	ldr	r2, [sp, #56]	; 0x38
   11d14:	mov	r1, r6
   11d18:	mov	r0, #10
   11d1c:	str	r2, [sp, #220]	; 0xdc
   11d20:	bl	113c0 <sigaction@plt>
   11d24:	cmp	r0, #0
   11d28:	bne	122ec <__assert_fail@plt+0xc98>
   11d2c:	mov	r4, #0
   11d30:	add	r0, r6, #4
   11d34:	movw	r3, #9700	; 0x25e4
   11d38:	movt	r3, #1
   11d3c:	str	r3, [sp, #88]	; 0x58
   11d40:	bl	115b8 <sigemptyset@plt>
   11d44:	mov	r1, r6
   11d48:	mov	r2, r4
   11d4c:	mov	r0, #12
   11d50:	str	r4, [sp, #220]	; 0xdc
   11d54:	bl	113c0 <sigaction@plt>
   11d58:	cmp	r0, r4
   11d5c:	bne	1231c <__assert_fail@plt+0xcc8>
   11d60:	ldrb	r3, [r7]
   11d64:	cmp	r3, #45	; 0x2d
   11d68:	beq	11ffc <__assert_fail@plt+0x9a8>
   11d6c:	movw	r1, #40344	; 0x9d98
   11d70:	mov	r0, r7
   11d74:	movt	r1, #1
   11d78:	mov	r6, #1
   11d7c:	str	r6, [r5, #164]	; 0xa4
   11d80:	bl	115e8 <fopen64@plt>
   11d84:	cmp	r0, #0
   11d88:	mov	r4, r0
   11d8c:	str	r0, [r5, #120]	; 0x78
   11d90:	beq	1201c <__assert_fail@plt+0x9c8>
   11d94:	ldr	r2, [r5, #92]	; 0x5c
   11d98:	movw	r3, #45528	; 0xb1d8
   11d9c:	movt	r3, #2
   11da0:	cmp	r2, #0
   11da4:	beq	12370 <__assert_fail@plt+0xd1c>
   11da8:	mov	r3, #1
   11dac:	str	r3, [r5, #68]	; 0x44
   11db0:	movw	ip, #45496	; 0xb1b8
   11db4:	movt	ip, #2
   11db8:	str	ip, [sp, #40]	; 0x28
   11dbc:	ldr	r3, [ip]
   11dc0:	cmp	r3, fp
   11dc4:	beq	1234c <__assert_fail@plt+0xcf8>
   11dc8:	ldr	ip, [sp, #64]	; 0x40
   11dcc:	cmp	ip, #0
   11dd0:	bne	1214c <__assert_fail@plt+0xaf8>
   11dd4:	ldr	r0, [r5, #80]	; 0x50
   11dd8:	add	r0, r0, #1
   11ddc:	bl	177c0 <__assert_fail@plt+0x616c>
   11de0:	ldr	r3, [r5, #80]	; 0x50
   11de4:	str	r0, [r5, #112]	; 0x70
   11de8:	add	r0, r3, #1
   11dec:	bl	177c0 <__assert_fail@plt+0x616c>
   11df0:	mov	r1, #0
   11df4:	str	r0, [r5, #28]
   11df8:	mov	r0, #17
   11dfc:	bl	11348 <signal@plt>
   11e00:	ldr	r4, [r5, #92]	; 0x5c
   11e04:	cmp	r4, #0
   11e08:	beq	12088 <__assert_fail@plt+0xa34>
   11e0c:	lsl	r0, fp, #2
   11e10:	bl	177c0 <__assert_fail@plt+0x616c>
   11e14:	ldr	ip, [sp, #40]	; 0x28
   11e18:	ldr	r3, [ip]
   11e1c:	cmp	fp, r3
   11e20:	str	r0, [sp, #44]	; 0x2c
   11e24:	ble	11e60 <__assert_fail@plt+0x80c>
   11e28:	ldr	ip, [sp, #32]
   11e2c:	rsb	r4, r3, fp
   11e30:	lsl	r3, r3, #2
   11e34:	mov	r8, #0
   11e38:	add	r7, ip, r3
   11e3c:	ldr	ip, [sp, #44]	; 0x2c
   11e40:	lsl	r4, r4, #2
   11e44:	add	r6, ip, r3
   11e48:	ldr	r0, [r7, r8]
   11e4c:	bl	114bc <strlen@plt>
   11e50:	str	r0, [r6, r8]
   11e54:	add	r8, r8, #4
   11e58:	cmp	r8, r4
   11e5c:	bne	11e48 <__assert_fail@plt+0x7f4>
   11e60:	ldr	r0, [r5, #92]	; 0x5c
   11e64:	movw	r8, #45400	; 0xb158
   11e68:	bl	114bc <strlen@plt>
   11e6c:	movt	r8, #2
   11e70:	mov	r6, #0
   11e74:	str	r0, [r5, #88]	; 0x58
   11e78:	ldr	ip, [sp, #36]	; 0x24
   11e7c:	blx	ip
   11e80:	cmn	r0, #1
   11e84:	mov	r9, r0
   11e88:	beq	11f90 <__assert_fail@plt+0x93c>
   11e8c:	ldr	r0, [pc, #1508]	; 12478 <__assert_fail@plt+0xe24>
   11e90:	sub	r9, r9, #1
   11e94:	sub	r1, r0, #52	; 0x34
   11e98:	bl	142f8 <__assert_fail@plt+0x2ca4>
   11e9c:	ldr	ip, [sp, #40]	; 0x28
   11ea0:	ldr	r1, [sp, #32]
   11ea4:	ldr	r0, [pc, #1484]	; 12478 <__assert_fail@plt+0xe24>
   11ea8:	ldr	r3, [ip]
   11eac:	ldrb	ip, [r8, #4]
   11eb0:	ldr	r2, [r1, r3, lsl #2]
   11eb4:	ldr	r1, [sp, #44]	; 0x2c
   11eb8:	str	r6, [r5, #32]
   11ebc:	ldr	r3, [r1, r3, lsl #2]
   11ec0:	sub	r1, r0, #52	; 0x34
   11ec4:	stmib	sp, {r6, ip}
   11ec8:	str	r6, [sp]
   11ecc:	add	r3, r3, #1
   11ed0:	bl	13a24 <__assert_fail@plt+0x23d0>
   11ed4:	ldr	ip, [sp, #40]	; 0x28
   11ed8:	strb	r6, [r8, #4]
   11edc:	ldr	r7, [ip]
   11ee0:	add	r4, r7, #1
   11ee4:	cmp	fp, r4
   11ee8:	ble	11f44 <__assert_fail@plt+0x8f0>
   11eec:	ldr	ip, [sp, #32]
   11ef0:	lsl	r7, r7, #2
   11ef4:	mov	r1, #0
   11ef8:	add	sl, ip, r7
   11efc:	ldr	ip, [sp, #44]	; 0x2c
   11f00:	add	r7, ip, r7
   11f04:	b	11f0c <__assert_fail@plt+0x8b8>
   11f08:	ldrb	r1, [r8, #4]
   11f0c:	ldr	ip, [r5, #112]	; 0x70
   11f10:	add	r4, r4, #1
   11f14:	ldr	r0, [pc, #1372]	; 12478 <__assert_fail@plt+0xe24>
   11f18:	ldr	r2, [sl, #4]!
   11f1c:	ldr	r3, [r7, #4]!
   11f20:	str	r1, [sp, #16]
   11f24:	sub	r1, r0, #52	; 0x34
   11f28:	str	r6, [sp]
   11f2c:	str	r6, [sp, #4]
   11f30:	str	r9, [sp, #12]
   11f34:	str	ip, [sp, #8]
   11f38:	bl	13cb4 <__assert_fail@plt+0x2660>
   11f3c:	cmp	r4, fp
   11f40:	bne	11f08 <__assert_fail@plt+0x8b4>
   11f44:	ldr	r0, [pc, #1324]	; 12478 <__assert_fail@plt+0xe24>
   11f48:	sub	r1, r0, #52	; 0x34
   11f4c:	bl	13e58 <__assert_fail@plt+0x2804>
   11f50:	b	11e78 <__assert_fail@plt+0x824>
   11f54:	ldr	r1, [r5, #16]
   11f58:	movw	r3, #45528	; 0xb1d8
   11f5c:	ldr	r2, [r5, #96]	; 0x60
   11f60:	movt	r3, #2
   11f64:	cmp	r1, r2
   11f68:	bne	11f84 <__assert_fail@plt+0x930>
   11f6c:	ldr	ip, [sp, #68]	; 0x44
   11f70:	cmp	ip, #0
   11f74:	beq	11f90 <__assert_fail@plt+0x93c>
   11f78:	ldrb	r3, [r3, #156]	; 0x9c
   11f7c:	cmp	r3, #0
   11f80:	bne	11f90 <__assert_fail@plt+0x93c>
   11f84:	ldr	r0, [pc, #1260]	; 12478 <__assert_fail@plt+0xe24>
   11f88:	sub	r1, r0, #52	; 0x34
   11f8c:	bl	13e58 <__assert_fail@plt+0x2804>
   11f90:	ldr	r3, [r5, #60]	; 0x3c
   11f94:	str	r3, [r5, #152]	; 0x98
   11f98:	ldr	r0, [r5, #60]	; 0x3c
   11f9c:	b	11acc <__assert_fail@plt+0x478>
   11fa0:	mov	r3, #1
   11fa4:	str	r3, [r5, #104]	; 0x68
   11fa8:	b	11a7c <__assert_fail@plt+0x428>
   11fac:	mov	r2, #5
   11fb0:	movw	r1, #40088	; 0x9c98
   11fb4:	mov	r0, sl
   11fb8:	movt	r1, #1
   11fbc:	bl	1136c <dcgettext@plt>
   11fc0:	ldr	ip, [r8, #72]	; 0x48
   11fc4:	mov	r3, r9
   11fc8:	mov	r1, sl
   11fcc:	str	ip, [sp]
   11fd0:	mov	r2, r0
   11fd4:	mov	r0, sl
   11fd8:	bl	1142c <error@plt>
   11fdc:	ldr	r9, [r8, #72]	; 0x48
   11fe0:	b	11bb8 <__assert_fail@plt+0x564>
   11fe4:	ldr	r3, [r8, #92]	; 0x5c
   11fe8:	cmp	r3, #0
   11fec:	beq	11a4c <__assert_fail@plt+0x3f8>
   11ff0:	mov	r3, #0
   11ff4:	str	r3, [r5, #108]	; 0x6c
   11ff8:	b	117e8 <__assert_fail@plt+0x194>
   11ffc:	ldrb	r3, [r7, #1]
   12000:	cmp	r3, #0
   12004:	bne	11d6c <__assert_fail@plt+0x718>
   12008:	movw	r3, #45504	; 0xb1c0
   1200c:	movt	r3, #2
   12010:	ldr	r3, [r3]
   12014:	str	r3, [r5, #120]	; 0x78
   12018:	b	11d94 <__assert_fail@plt+0x740>
   1201c:	bl	114f8 <__errno_location@plt>
   12020:	mov	r2, #5
   12024:	movw	r1, #40384	; 0x9dc0
   12028:	movt	r1, #1
   1202c:	ldr	r9, [r0]
   12030:	mov	r0, r4
   12034:	bl	1136c <dcgettext@plt>
   12038:	mov	r2, r7
   1203c:	mov	r1, #6
   12040:	mov	r8, r0
   12044:	mov	r0, r4
   12048:	bl	16f8c <__assert_fail@plt+0x5938>
   1204c:	mov	r1, r9
   12050:	mov	r2, r8
   12054:	mov	r3, r0
   12058:	mov	r0, r6
   1205c:	bl	1142c <error@plt>
   12060:	b	11d94 <__assert_fail@plt+0x740>
   12064:	cmp	sl, #97	; 0x61
   12068:	moveq	sl, #7
   1206c:	beq	118c0 <__assert_fail@plt+0x26c>
   12070:	cmp	sl, #98	; 0x62
   12074:	moveq	sl, #8
   12078:	beq	118c0 <__assert_fail@plt+0x26c>
   1207c:	cmp	sl, #92	; 0x5c
   12080:	bne	11c10 <__assert_fail@plt+0x5bc>
   12084:	b	118c0 <__assert_fail@plt+0x26c>
   12088:	movw	r6, #45400	; 0xb158
   1208c:	movw	r7, #45496	; 0xb1b8
   12090:	movt	r6, #2
   12094:	movt	r7, #2
   12098:	ldr	sl, [sp, #32]
   1209c:	ldr	r9, [sp, #40]	; 0x28
   120a0:	b	120e0 <__assert_fail@plt+0xa8c>
   120a4:	ldr	r8, [sl, r3, lsl #2]
   120a8:	mov	r0, r8
   120ac:	bl	114bc <strlen@plt>
   120b0:	ldrb	r3, [r6, #4]
   120b4:	ldr	r1, [pc, #960]	; 1247c <__assert_fail@plt+0xe28>
   120b8:	mov	r2, r8
   120bc:	str	r4, [sp]
   120c0:	str	r3, [sp, #8]
   120c4:	str	r4, [sp, #4]
   120c8:	add	r3, r0, #1
   120cc:	add	r0, r1, #52	; 0x34
   120d0:	bl	13a24 <__assert_fail@plt+0x23d0>
   120d4:	ldr	r3, [r7]
   120d8:	add	r3, r3, #1
   120dc:	str	r3, [r7]
   120e0:	ldr	r3, [r9]
   120e4:	cmp	fp, r3
   120e8:	bgt	120a4 <__assert_fail@plt+0xa50>
   120ec:	ldr	r2, [r5, #16]
   120f0:	movw	r4, #45528	; 0xb1d8
   120f4:	ldr	r3, [r5, #32]
   120f8:	movt	r4, #2
   120fc:	mov	r1, #0
   12100:	strb	r1, [r6, #4]
   12104:	str	r2, [r5, #96]	; 0x60
   12108:	str	r3, [r5, #36]	; 0x24
   1210c:	ldr	ip, [sp, #36]	; 0x24
   12110:	blx	ip
   12114:	cmn	r0, #1
   12118:	beq	11f54 <__assert_fail@plt+0x900>
   1211c:	ldr	r3, [r5, #104]	; 0x68
   12120:	cmp	r3, #0
   12124:	beq	1210c <__assert_fail@plt+0xab8>
   12128:	ldr	r2, [r4, #128]	; 0x80
   1212c:	cmp	r3, r2
   12130:	bhi	1210c <__assert_fail@plt+0xab8>
   12134:	ldr	r0, [pc, #828]	; 12478 <__assert_fail@plt+0xe24>
   12138:	sub	r1, r0, #52	; 0x34
   1213c:	bl	13e58 <__assert_fail@plt+0x2804>
   12140:	mov	r3, #0
   12144:	str	r3, [r4, #128]	; 0x80
   12148:	b	1210c <__assert_fail@plt+0xab8>
   1214c:	movw	r6, #45500	; 0xb1bc
   12150:	movt	r6, #2
   12154:	mov	r2, #5
   12158:	movw	r1, #40412	; 0x9ddc
   1215c:	mov	r0, #0
   12160:	movt	r1, #1
   12164:	ldr	r7, [r6]
   12168:	bl	1136c <dcgettext@plt>
   1216c:	mov	r4, #0
   12170:	mov	r8, r0
   12174:	bl	1413c <__assert_fail@plt+0x2ae8>
   12178:	mov	r2, r8
   1217c:	mov	r1, #1
   12180:	str	r4, [sp, #4]
   12184:	str	r0, [sp]
   12188:	mov	r0, r7
   1218c:	bl	11558 <__fprintf_chk@plt>
   12190:	mov	r2, #5
   12194:	mov	r0, r4
   12198:	movw	r1, #40460	; 0x9e0c
   1219c:	movt	r1, #1
   121a0:	ldr	r7, [r6]
   121a4:	bl	1136c <dcgettext@plt>
   121a8:	ldr	r3, [r5, #72]	; 0x48
   121ac:	mov	r1, #1
   121b0:	str	r4, [sp, #4]
   121b4:	str	r3, [sp]
   121b8:	mov	r2, r0
   121bc:	mov	r0, r7
   121c0:	bl	11558 <__fprintf_chk@plt>
   121c4:	mov	r2, #5
   121c8:	mov	r0, r4
   121cc:	movw	r1, #40520	; 0x9e48
   121d0:	movt	r1, #1
   121d4:	ldr	r7, [r6]
   121d8:	bl	1136c <dcgettext@plt>
   121dc:	ldr	r3, [r5, #76]	; 0x4c
   121e0:	mov	r1, #1
   121e4:	str	r4, [sp, #4]
   121e8:	str	r3, [sp]
   121ec:	mov	r2, r0
   121f0:	mov	r0, r7
   121f4:	bl	11558 <__fprintf_chk@plt>
   121f8:	mov	r2, #5
   121fc:	mov	r0, r4
   12200:	movw	r1, #40600	; 0x9e98
   12204:	movt	r1, #1
   12208:	ldr	r7, [r6]
   1220c:	bl	1136c <dcgettext@plt>
   12210:	ldr	r8, [r5, #72]	; 0x48
   12214:	mov	r9, r0
   12218:	bl	1413c <__assert_fail@plt+0x2ae8>
   1221c:	mov	r2, r9
   12220:	mov	r1, #1
   12224:	str	r4, [sp, #4]
   12228:	rsb	r8, r0, r8
   1222c:	mov	r0, r7
   12230:	str	r8, [sp]
   12234:	bl	11558 <__fprintf_chk@plt>
   12238:	mov	r2, #5
   1223c:	mov	r0, r4
   12240:	movw	r1, #40656	; 0x9ed0
   12244:	movt	r1, #1
   12248:	ldr	r7, [r6]
   1224c:	bl	1136c <dcgettext@plt>
   12250:	ldr	r3, [r5, #80]	; 0x50
   12254:	mov	r1, #1
   12258:	str	r4, [sp, #4]
   1225c:	str	r3, [sp]
   12260:	mov	r2, r0
   12264:	mov	r0, r7
   12268:	bl	11558 <__fprintf_chk@plt>
   1226c:	mov	r0, r4
   12270:	bl	11600 <isatty@plt>
   12274:	cmp	r0, r4
   12278:	beq	11dd4 <__assert_fail@plt+0x780>
   1227c:	mov	r2, #5
   12280:	movw	r1, #40708	; 0x9f04
   12284:	mov	r0, r4
   12288:	movt	r1, #1
   1228c:	ldr	r7, [r6]
   12290:	bl	1136c <dcgettext@plt>
   12294:	mov	r1, #1
   12298:	mov	r2, r0
   1229c:	mov	r0, r7
   122a0:	bl	11558 <__fprintf_chk@plt>
   122a4:	ldr	ip, [sp, #68]	; 0x44
   122a8:	cmp	ip, r4
   122ac:	beq	11dd4 <__assert_fail@plt+0x780>
   122b0:	mov	r0, r4
   122b4:	mov	r2, #5
   122b8:	movw	r1, #40884	; 0x9fb4
   122bc:	movt	r1, #1
   122c0:	ldr	r4, [r6]
   122c4:	bl	1136c <dcgettext@plt>
   122c8:	ldr	ip, [sp, #40]	; 0x28
   122cc:	mov	r1, #1
   122d0:	ldr	r3, [ip]
   122d4:	ldr	ip, [sp, #32]
   122d8:	ldr	r3, [ip, r3, lsl #2]
   122dc:	mov	r2, r0
   122e0:	mov	r0, r4
   122e4:	bl	11558 <__fprintf_chk@plt>
   122e8:	b	11dd4 <__assert_fail@plt+0x780>
   122ec:	bl	114f8 <__errno_location@plt>
   122f0:	mov	r2, #5
   122f4:	movw	r1, #40312	; 0x9d78
   122f8:	movt	r1, #1
   122fc:	ldr	r4, [r0]
   12300:	ldr	r0, [sp, #56]	; 0x38
   12304:	bl	1136c <dcgettext@plt>
   12308:	mov	r1, r4
   1230c:	mov	r2, r0
   12310:	ldr	r0, [sp, #56]	; 0x38
   12314:	bl	1142c <error@plt>
   12318:	b	11d2c <__assert_fail@plt+0x6d8>
   1231c:	bl	114f8 <__errno_location@plt>
   12320:	mov	r2, #5
   12324:	movw	r1, #40348	; 0x9d9c
   12328:	movt	r1, #1
   1232c:	ldr	r6, [r0]
   12330:	mov	r0, r4
   12334:	bl	1136c <dcgettext@plt>
   12338:	mov	r1, r6
   1233c:	mov	r2, r0
   12340:	mov	r0, r4
   12344:	bl	1142c <error@plt>
   12348:	b	11d60 <__assert_fail@plt+0x70c>
   1234c:	add	ip, sp, #240	; 0xf0
   12350:	add	r2, sp, #228	; 0xe4
   12354:	mov	r3, #0
   12358:	mov	fp, #1
   1235c:	str	r2, [ip, #-160]!	; 0xffffff60
   12360:	str	ip, [sp, #32]
   12364:	ldr	ip, [sp, #40]	; 0x28
   12368:	str	r3, [ip]
   1236c:	b	11dc8 <__assert_fail@plt+0x774>
   12370:	ldr	r3, [r3, #104]	; 0x68
   12374:	cmp	r3, #0
   12378:	beq	11db0 <__assert_fail@plt+0x75c>
   1237c:	b	11da8 <__assert_fail@plt+0x754>
   12380:	cmp	sl, #110	; 0x6e
   12384:	moveq	sl, #10
   12388:	beq	118c0 <__assert_fail@plt+0x26c>
   1238c:	b	11c10 <__assert_fail@plt+0x5bc>
   12390:	mov	sl, #12
   12394:	b	118c0 <__assert_fail@plt+0x26c>
   12398:	movw	r1, #39752	; 0x9b48
   1239c:	movt	r1, #1
   123a0:	mov	r0, r3
   123a4:	mov	r2, #5
   123a8:	str	r3, [sp, #28]
   123ac:	bl	1136c <dcgettext@plt>
   123b0:	ldr	r3, [sp, #28]
   123b4:	mov	r1, r3
   123b8:	mov	r3, #255	; 0xff
   123bc:	str	r3, [sp]
   123c0:	mov	r3, r9
   123c4:	mov	r2, r0
   123c8:	mov	r0, #1
   123cc:	bl	1142c <error@plt>
   123d0:	b	11c9c <__assert_fail@plt+0x648>
   123d4:	bl	114f8 <__errno_location@plt>
   123d8:	add	r1, sp, #240	; 0xf0
   123dc:	mov	r3, #0
   123e0:	str	r3, [r1, #-156]!	; 0xffffff64
   123e4:	mov	r2, r0
   123e8:	add	r0, r9, #2
   123ec:	str	r3, [r2]
   123f0:	mov	r2, #16
   123f4:	str	r3, [sp, #28]
   123f8:	bl	114b0 <strtoul@plt>
   123fc:	ldr	r3, [sp, #28]
   12400:	cmp	r0, #255	; 0xff
   12404:	mov	sl, r0
   12408:	bls	11c9c <__assert_fail@plt+0x648>
   1240c:	movw	r1, #39652	; 0x9ae4
   12410:	mov	r0, r3
   12414:	movt	r1, #1
   12418:	b	123a4 <__assert_fail@plt+0xd50>
   1241c:	bl	11378 <__stack_chk_fail@plt>
   12420:	movw	r0, #39564	; 0x9a8c
   12424:	movw	r1, #39172	; 0x9904
   12428:	movt	r0, #1
   1242c:	movt	r1, #1
   12430:	movw	r2, #465	; 0x1d1
   12434:	ldr	r3, [pc, #68]	; 12480 <__assert_fail@plt+0xe2c>
   12438:	bl	11654 <__assert_fail@plt>
   1243c:	movw	r0, #40288	; 0x9d60
   12440:	movw	r1, #39172	; 0x9904
   12444:	movt	r0, #1
   12448:	movt	r1, #1
   1244c:	movw	r2, #633	; 0x279
   12450:	ldr	r3, [pc, #40]	; 12480 <__assert_fail@plt+0xe2c>
   12454:	bl	11654 <__assert_fail@plt>
   12458:	movw	r0, #39536	; 0x9a70
   1245c:	movw	r1, #39172	; 0x9904
   12460:	movt	r0, #1
   12464:	movt	r1, #1
   12468:	movw	r2, #437	; 0x1b5
   1246c:	ldr	r3, [pc, #12]	; 12480 <__assert_fail@plt+0xe2c>
   12470:	bl	11654 <__assert_fail@plt>
   12474:	andeq	r8, r1, r8, lsr #23
   12478:	andeq	fp, r2, ip, lsl r2
   1247c:	andeq	fp, r2, r8, ror #3
   12480:	andeq	r8, r1, r0, lsr #23
   12484:	mov	fp, #0
   12488:	mov	lr, #0
   1248c:	pop	{r1}		; (ldr r1, [sp], #4)
   12490:	mov	r2, sp
   12494:	push	{r2}		; (str r2, [sp, #-4]!)
   12498:	push	{r0}		; (str r0, [sp, #-4]!)
   1249c:	ldr	ip, [pc, #16]	; 124b4 <__assert_fail@plt+0xe60>
   124a0:	push	{ip}		; (str ip, [sp, #-4]!)
   124a4:	ldr	r0, [pc, #12]	; 124b8 <__assert_fail@plt+0xe64>
   124a8:	ldr	r3, [pc, #12]	; 124bc <__assert_fail@plt+0xe68>
   124ac:	bl	1145c <__libc_start_main@plt>
   124b0:	bl	11630 <abort@plt>
   124b4:	andeq	r8, r1, r0, lsr fp
   124b8:	andeq	r1, r1, r0, ror #12
   124bc:	andeq	r8, r1, ip, asr #21
   124c0:	ldr	r3, [pc, #20]	; 124dc <__assert_fail@plt+0xe88>
   124c4:	ldr	r2, [pc, #20]	; 124e0 <__assert_fail@plt+0xe8c>
   124c8:	add	r3, pc, r3
   124cc:	ldr	r2, [r3, r2]
   124d0:	cmp	r2, #0
   124d4:	bxeq	lr
   124d8:	b	11474 <__gmon_start__@plt>
   124dc:	andeq	r8, r1, r0, lsr fp
   124e0:	andeq	r0, r0, ip, asr #2
   124e4:	push	{r3, lr}
   124e8:	movw	r0, #45480	; 0xb1a8
   124ec:	ldr	r3, [pc, #36]	; 12518 <__assert_fail@plt+0xec4>
   124f0:	movt	r0, #2
   124f4:	rsb	r3, r0, r3
   124f8:	cmp	r3, #6
   124fc:	popls	{r3, pc}
   12500:	movw	r3, #0
   12504:	movt	r3, #0
   12508:	cmp	r3, #0
   1250c:	popeq	{r3, pc}
   12510:	blx	r3
   12514:	pop	{r3, pc}
   12518:	andeq	fp, r2, fp, lsr #3
   1251c:	push	{r3, lr}
   12520:	movw	r0, #45480	; 0xb1a8
   12524:	movw	r3, #45480	; 0xb1a8
   12528:	movt	r0, #2
   1252c:	movt	r3, #2
   12530:	rsb	r3, r0, r3
   12534:	asr	r3, r3, #2
   12538:	add	r3, r3, r3, lsr #31
   1253c:	asrs	r1, r3, #1
   12540:	popeq	{r3, pc}
   12544:	movw	r2, #0
   12548:	movt	r2, #0
   1254c:	cmp	r2, #0
   12550:	popeq	{r3, pc}
   12554:	blx	r2
   12558:	pop	{r3, pc}
   1255c:	push	{r4, lr}
   12560:	movw	r4, #45524	; 0xb1d4
   12564:	movt	r4, #2
   12568:	ldrb	r3, [r4]
   1256c:	cmp	r3, #0
   12570:	popne	{r4, pc}
   12574:	bl	124e4 <__assert_fail@plt+0xe90>
   12578:	mov	r3, #1
   1257c:	strb	r3, [r4]
   12580:	pop	{r4, pc}
   12584:	movw	r0, #44804	; 0xaf04
   12588:	movt	r0, #2
   1258c:	push	{r3, lr}
   12590:	ldr	r3, [r0]
   12594:	cmp	r3, #0
   12598:	beq	125b0 <__assert_fail@plt+0xf5c>
   1259c:	movw	r3, #0
   125a0:	movt	r3, #0
   125a4:	cmp	r3, #0
   125a8:	beq	125b0 <__assert_fail@plt+0xf5c>
   125ac:	blx	r3
   125b0:	pop	{r3, lr}
   125b4:	b	1251c <__assert_fail@plt+0xec8>
   125b8:	bx	lr
   125bc:	movw	r3, #45400	; 0xb158
   125c0:	movt	r3, #2
   125c4:	movw	r2, #45528	; 0xb1d8
   125c8:	movt	r2, #2
   125cc:	ldr	r0, [r3]
   125d0:	mov	r1, #1
   125d4:	add	r0, r0, r1
   125d8:	str	r0, [r3]
   125dc:	str	r1, [r2]
   125e0:	bx	lr
   125e4:	movw	r3, #45400	; 0xb158
   125e8:	movt	r3, #2
   125ec:	ldr	r2, [r3]
   125f0:	cmp	r2, #1
   125f4:	ldrgt	r2, [r3]
   125f8:	subgt	r2, r2, #1
   125fc:	strgt	r2, [r3]
   12600:	bx	lr
   12604:	push	{r3, lr}
   12608:	mov	r2, #5
   1260c:	movw	r1, #36040	; 0x8cc8
   12610:	mov	r0, #0
   12614:	movt	r1, #1
   12618:	bl	1136c <dcgettext@plt>
   1261c:	mov	r1, #0
   12620:	pop	{r3, lr}
   12624:	mov	r2, r0
   12628:	mov	r0, #1
   1262c:	b	1142c <error@plt>
   12630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12634:	sub	sp, sp, #28
   12638:	movw	r3, #45488	; 0xb1b0
   1263c:	movt	r3, #2
   12640:	str	r3, [sp, #12]
   12644:	movw	r5, #45528	; 0xb1d8
   12648:	mov	r7, r0
   1264c:	movt	r5, #2
   12650:	ldr	r0, [sp, #12]
   12654:	mov	sl, r1
   12658:	ldr	r3, [r5, #4]
   1265c:	ldr	r2, [r0]
   12660:	cmp	r3, #0
   12664:	str	r2, [sp, #20]
   12668:	beq	126c0 <__assert_fail@plt+0x106c>
   1266c:	mov	r9, #0
   12670:	mov	r6, r5
   12674:	mov	r8, r9
   12678:	cmp	r7, #0
   1267c:	movne	r4, #0
   12680:	bne	12690 <__assert_fail@plt+0x103c>
   12684:	cmp	r9, sl
   12688:	movcc	r4, #0
   1268c:	movcs	r4, #1
   12690:	str	r8, [r5]
   12694:	mvn	r0, #0
   12698:	add	r1, sp, #16
   1269c:	mov	r2, r4
   126a0:	bl	113f0 <waitpid@plt>
   126a4:	cmn	r0, #1
   126a8:	mov	ip, r0
   126ac:	beq	127bc <__assert_fail@plt+0x1168>
   126b0:	cmp	r0, #0
   126b4:	bne	126dc <__assert_fail@plt+0x1088>
   126b8:	cmp	r4, #0
   126bc:	beq	12880 <__assert_fail@plt+0x122c>
   126c0:	ldr	r1, [sp, #12]
   126c4:	ldr	r2, [sp, #20]
   126c8:	ldr	r3, [r1]
   126cc:	cmp	r2, r3
   126d0:	bne	128a8 <__assert_fail@plt+0x1254>
   126d4:	add	sp, sp, #28
   126d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126dc:	ldr	r0, [r5, #8]
   126e0:	cmp	r0, #0
   126e4:	beq	12694 <__assert_fail@plt+0x1040>
   126e8:	ldr	fp, [r6, #12]
   126ec:	ldr	r3, [fp]
   126f0:	cmp	ip, r3
   126f4:	beq	12808 <__assert_fail@plt+0x11b4>
   126f8:	mov	r2, fp
   126fc:	mov	r3, #0
   12700:	add	r3, r3, #1
   12704:	cmp	r3, r0
   12708:	beq	12694 <__assert_fail@plt+0x1040>
   1270c:	ldr	r1, [r2, #4]!
   12710:	cmp	ip, r1
   12714:	bne	12700 <__assert_fail@plt+0x10ac>
   12718:	lsl	r3, r3, #2
   1271c:	str	r8, [fp, r3]
   12720:	add	r9, r9, #1
   12724:	ldr	r3, [sp, #16]
   12728:	ldr	r2, [r5, #4]
   1272c:	ubfx	r1, r3, #8, #8
   12730:	cmp	r1, #255	; 0xff
   12734:	sub	r2, r2, #1
   12738:	str	r2, [r5, #4]
   1273c:	beq	1284c <__assert_fail@plt+0x11f8>
   12740:	uxtb	r2, r3
   12744:	cmp	r2, #127	; 0x7f
   12748:	beq	12810 <__assert_fail@plt+0x11bc>
   1274c:	and	r2, r3, #127	; 0x7f
   12750:	add	r2, r2, #1
   12754:	sbfx	r2, r2, #1, #7
   12758:	cmp	r2, #0
   1275c:	ble	1279c <__assert_fail@plt+0x1148>
   12760:	mov	r2, #5
   12764:	movw	r1, #36220	; 0x8d7c
   12768:	mov	r0, #0
   1276c:	movt	r1, #1
   12770:	bl	1136c <dcgettext@plt>
   12774:	ldr	r3, [r5, #20]
   12778:	ldr	ip, [sp, #16]
   1277c:	mov	r1, #0
   12780:	ldr	r3, [r3]
   12784:	and	ip, ip, #127	; 0x7f
   12788:	str	ip, [sp]
   1278c:	mov	r2, r0
   12790:	mov	r0, #125	; 0x7d
   12794:	bl	1142c <error@plt>
   12798:	ldr	r3, [sp, #16]
   1279c:	ubfx	r3, r3, #8, #8
   127a0:	cmp	r3, #0
   127a4:	movne	r3, #123	; 0x7b
   127a8:	strne	r3, [r5, #60]	; 0x3c
   127ac:	ldr	r3, [r5, #4]
   127b0:	cmp	r3, #0
   127b4:	bne	12678 <__assert_fail@plt+0x1024>
   127b8:	b	126c0 <__assert_fail@plt+0x106c>
   127bc:	bl	114f8 <__errno_location@plt>
   127c0:	ldr	fp, [r0]
   127c4:	cmp	fp, #4
   127c8:	beq	127f0 <__assert_fail@plt+0x119c>
   127cc:	mov	r2, #5
   127d0:	movw	r1, #36076	; 0x8cec
   127d4:	mov	r0, #0
   127d8:	movt	r1, #1
   127dc:	bl	1136c <dcgettext@plt>
   127e0:	mov	r1, fp
   127e4:	mov	r2, r0
   127e8:	mov	r0, #1
   127ec:	bl	1142c <error@plt>
   127f0:	ldr	r3, [r5]
   127f4:	cmp	r3, #0
   127f8:	beq	12694 <__assert_fail@plt+0x1040>
   127fc:	cmp	r7, #0
   12800:	moveq	r4, #1
   12804:	b	12694 <__assert_fail@plt+0x1040>
   12808:	mov	r3, #0
   1280c:	b	1271c <__assert_fail@plt+0x10c8>
   12810:	mov	r2, #5
   12814:	movw	r1, #36192	; 0x8d60
   12818:	mov	r0, #0
   1281c:	movt	r1, #1
   12820:	bl	1136c <dcgettext@plt>
   12824:	ldr	r3, [r5, #20]
   12828:	ldrb	ip, [sp, #17]
   1282c:	mov	r1, #0
   12830:	ldr	r3, [r3]
   12834:	str	ip, [sp]
   12838:	mov	r2, r0
   1283c:	mov	r0, #125	; 0x7d
   12840:	bl	1142c <error@plt>
   12844:	ldr	r3, [sp, #16]
   12848:	b	1274c <__assert_fail@plt+0x10f8>
   1284c:	mov	r2, #5
   12850:	movw	r1, #36152	; 0x8d38
   12854:	mov	r0, #0
   12858:	movt	r1, #1
   1285c:	bl	1136c <dcgettext@plt>
   12860:	ldr	r3, [r6, #20]
   12864:	mov	r1, #0
   12868:	ldr	r3, [r3]
   1286c:	mov	r2, r0
   12870:	mov	r0, #124	; 0x7c
   12874:	bl	1142c <error@plt>
   12878:	ldr	r3, [sp, #16]
   1287c:	b	12740 <__assert_fail@plt+0x10ec>
   12880:	mov	r2, #5
   12884:	movw	r1, #36108	; 0x8d0c
   12888:	movt	r1, #1
   1288c:	bl	1136c <dcgettext@plt>
   12890:	mov	r1, r4
   12894:	ldr	r3, [r5, #4]
   12898:	mov	r2, r0
   1289c:	mov	r0, r4
   128a0:	bl	1142c <error@plt>
   128a4:	b	126c0 <__assert_fail@plt+0x106c>
   128a8:	bl	11378 <__stack_chk_fail@plt>
   128ac:	push	{r3, r4, r5, r6, r7, lr}
   128b0:	movw	r5, #45528	; 0xb1d8
   128b4:	movt	r5, #2
   128b8:	movw	r6, #45500	; 0xb1bc
   128bc:	mov	r7, r0
   128c0:	movt	r6, #2
   128c4:	ldr	r3, [r5, #16]
   128c8:	cmp	r3, #1
   128cc:	movne	r4, #0
   128d0:	beq	12904 <__assert_fail@plt+0x12b0>
   128d4:	ldr	r3, [r5, #20]
   128d8:	mov	r1, #1
   128dc:	movw	r2, #36248	; 0x8d98
   128e0:	ldr	r0, [r6]
   128e4:	movt	r2, #1
   128e8:	ldr	r3, [r3, r4, lsl #2]
   128ec:	add	r4, r4, r1
   128f0:	bl	11558 <__fprintf_chk@plt>
   128f4:	ldr	r3, [r5, #16]
   128f8:	sub	r3, r3, #1
   128fc:	cmp	r3, r4
   12900:	bhi	128d4 <__assert_fail@plt+0x1280>
   12904:	cmp	r7, #0
   12908:	beq	12980 <__assert_fail@plt+0x132c>
   1290c:	ldr	r3, [r5, #64]	; 0x40
   12910:	movw	r4, #45528	; 0xb1d8
   12914:	movt	r4, #2
   12918:	cmp	r3, #0
   1291c:	beq	12994 <__assert_fail@plt+0x1340>
   12920:	mov	r1, #1
   12924:	mov	r2, #4
   12928:	ldr	r3, [r6]
   1292c:	movw	r0, #36300	; 0x8dcc
   12930:	movt	r0, #1
   12934:	bl	113d8 <fwrite@plt>
   12938:	ldr	r0, [r6]
   1293c:	bl	17f98 <__assert_fail@plt+0x6944>
   12940:	ldr	r0, [r5, #64]	; 0x40
   12944:	bl	11354 <_IO_getc@plt>
   12948:	cmp	r0, #10
   1294c:	cmnne	r0, #1
   12950:	mov	r4, r0
   12954:	beq	1296c <__assert_fail@plt+0x1318>
   12958:	ldr	r0, [r5, #64]	; 0x40
   1295c:	bl	11354 <_IO_getc@plt>
   12960:	cmp	r0, #10
   12964:	cmnne	r0, #1
   12968:	bne	12958 <__assert_fail@plt+0x1304>
   1296c:	bic	r0, r4, #32
   12970:	subs	r3, r0, #89	; 0x59
   12974:	rsbs	r0, r3, #0
   12978:	adcs	r0, r0, r3
   1297c:	pop	{r3, r4, r5, r6, r7, pc}
   12980:	ldr	r1, [r6]
   12984:	mov	r0, #10
   12988:	bl	113cc <_IO_putc@plt>
   1298c:	mov	r0, r7
   12990:	pop	{r3, r4, r5, r6, r7, pc}
   12994:	movw	r0, #36252	; 0x8d9c
   12998:	movw	r1, #40344	; 0x9d98
   1299c:	movt	r0, #1
   129a0:	movt	r1, #1
   129a4:	bl	115e8 <fopen64@plt>
   129a8:	cmp	r0, #0
   129ac:	mov	r7, r0
   129b0:	str	r0, [r4, #64]	; 0x40
   129b4:	bne	12920 <__assert_fail@plt+0x12cc>
   129b8:	bl	114f8 <__errno_location@plt>
   129bc:	mov	r2, #5
   129c0:	movw	r1, #36264	; 0x8da8
   129c4:	movt	r1, #1
   129c8:	ldr	r4, [r0]
   129cc:	mov	r0, r7
   129d0:	bl	1136c <dcgettext@plt>
   129d4:	mov	r1, r4
   129d8:	mov	r2, r0
   129dc:	mov	r0, #1
   129e0:	bl	1142c <error@plt>
   129e4:	b	12920 <__assert_fail@plt+0x12cc>
   129e8:	push	{r4, lr}
   129ec:	mov	r2, #5
   129f0:	mov	r4, r0
   129f4:	movw	r1, #36308	; 0x8dd4
   129f8:	mov	r0, #0
   129fc:	movt	r1, #1
   12a00:	bl	1136c <dcgettext@plt>
   12a04:	movw	r3, #45712	; 0xb290
   12a08:	movt	r3, #2
   12a0c:	mov	r1, #1
   12a10:	ldr	r3, [r3]
   12a14:	mov	r2, r0
   12a18:	mov	r0, r4
   12a1c:	bl	11558 <__fprintf_chk@plt>
   12a20:	mov	r2, #5
   12a24:	movw	r1, #36432	; 0x8e50
   12a28:	mov	r0, #0
   12a2c:	movt	r1, #1
   12a30:	bl	1136c <dcgettext@plt>
   12a34:	mov	r1, #1
   12a38:	mov	r2, r0
   12a3c:	mov	r0, r4
   12a40:	bl	11558 <__fprintf_chk@plt>
   12a44:	movw	r1, #38716	; 0x973c
   12a48:	mov	r0, #0
   12a4c:	movt	r1, #1
   12a50:	mov	r2, #5
   12a54:	bl	1136c <dcgettext@plt>
   12a58:	mov	r1, r4
   12a5c:	pop	{r4, lr}
   12a60:	b	11618 <fputs@plt>
   12a64:	push	{r4, r5, r6, r7, r8, lr}
   12a68:	movw	r4, #45488	; 0xb1b0
   12a6c:	movt	r4, #2
   12a70:	sub	sp, sp, #16
   12a74:	mov	r8, r1
   12a78:	mov	r6, r2
   12a7c:	ldr	ip, [r4]
   12a80:	add	r1, sp, #8
   12a84:	mov	r2, #10
   12a88:	mov	r7, r0
   12a8c:	mov	r5, r3
   12a90:	str	ip, [sp, #12]
   12a94:	bl	112d0 <strtol@plt>
   12a98:	ldr	ip, [sp, #8]
   12a9c:	cmp	ip, r7
   12aa0:	beq	12ba4 <__assert_fail@plt+0x1550>
   12aa4:	ldrb	r3, [ip]
   12aa8:	cmp	r3, #0
   12aac:	bne	12ba4 <__assert_fail@plt+0x1550>
   12ab0:	cmp	r0, r6
   12ab4:	blt	12b40 <__assert_fail@plt+0x14ec>
   12ab8:	cmp	r5, #0
   12abc:	cmpge	r0, r5
   12ac0:	bgt	12adc <__assert_fail@plt+0x1488>
   12ac4:	ldr	r2, [sp, #12]
   12ac8:	ldr	r3, [r4]
   12acc:	cmp	r2, r3
   12ad0:	bne	12bf4 <__assert_fail@plt+0x15a0>
   12ad4:	add	sp, sp, #16
   12ad8:	pop	{r4, r5, r6, r7, r8, pc}
   12adc:	movw	r6, #45500	; 0xb1bc
   12ae0:	movt	r6, #2
   12ae4:	mov	r0, r3
   12ae8:	mov	r2, #5
   12aec:	movw	r1, #38840	; 0x97b8
   12af0:	movt	r1, #1
   12af4:	ldr	r7, [r6]
   12af8:	bl	1136c <dcgettext@plt>
   12afc:	movw	r3, #45712	; 0xb290
   12b00:	movt	r3, #2
   12b04:	mov	r1, #1
   12b08:	ldr	r3, [r3]
   12b0c:	str	r8, [sp]
   12b10:	str	r5, [sp, #4]
   12b14:	mov	r2, r0
   12b18:	mov	r0, r7
   12b1c:	bl	11558 <__fprintf_chk@plt>
   12b20:	ldr	r3, [sp, #40]	; 0x28
   12b24:	cmp	r3, #0
   12b28:	moveq	r0, r5
   12b2c:	beq	12ac4 <__assert_fail@plt+0x1470>
   12b30:	ldr	r0, [r6]
   12b34:	bl	129e8 <__assert_fail@plt+0x1394>
   12b38:	mov	r0, #1
   12b3c:	bl	114a4 <exit@plt>
   12b40:	movw	r5, #45500	; 0xb1bc
   12b44:	movt	r5, #2
   12b48:	mov	r0, r3
   12b4c:	mov	r2, #5
   12b50:	movw	r1, #38796	; 0x978c
   12b54:	movt	r1, #1
   12b58:	ldr	r7, [r5]
   12b5c:	bl	1136c <dcgettext@plt>
   12b60:	movw	r3, #45712	; 0xb290
   12b64:	movt	r3, #2
   12b68:	mov	r1, #1
   12b6c:	ldr	r3, [r3]
   12b70:	str	r8, [sp]
   12b74:	str	r6, [sp, #4]
   12b78:	mov	r2, r0
   12b7c:	mov	r0, r7
   12b80:	bl	11558 <__fprintf_chk@plt>
   12b84:	ldr	r3, [sp, #40]	; 0x28
   12b88:	cmp	r3, #0
   12b8c:	moveq	r0, r6
   12b90:	beq	12ac4 <__assert_fail@plt+0x1470>
   12b94:	ldr	r0, [r5]
   12b98:	bl	129e8 <__assert_fail@plt+0x1394>
   12b9c:	mov	r0, #1
   12ba0:	bl	114a4 <exit@plt>
   12ba4:	movw	r4, #45500	; 0xb1bc
   12ba8:	movt	r4, #2
   12bac:	mov	r2, #5
   12bb0:	movw	r1, #38760	; 0x9768
   12bb4:	mov	r0, #0
   12bb8:	movt	r1, #1
   12bbc:	ldr	r5, [r4]
   12bc0:	bl	1136c <dcgettext@plt>
   12bc4:	movw	r3, #45712	; 0xb290
   12bc8:	movt	r3, #2
   12bcc:	str	r8, [sp]
   12bd0:	mov	r1, #1
   12bd4:	ldr	r3, [r3]
   12bd8:	mov	r2, r0
   12bdc:	mov	r0, r5
   12be0:	bl	11558 <__fprintf_chk@plt>
   12be4:	ldr	r0, [r4]
   12be8:	bl	129e8 <__assert_fail@plt+0x1394>
   12bec:	mov	r0, #1
   12bf0:	bl	114a4 <exit@plt>
   12bf4:	bl	11378 <__stack_chk_fail@plt>
   12bf8:	movw	r1, #45528	; 0xb1d8
   12bfc:	movt	r1, #2
   12c00:	ldr	r3, [r1, #92]	; 0x5c
   12c04:	cmp	r3, #0
   12c08:	bxne	lr
   12c0c:	movw	r3, #45400	; 0xb158
   12c10:	movt	r3, #2
   12c14:	ldrb	r3, [r3, #4]
   12c18:	cmp	r3, #0
   12c1c:	bxne	lr
   12c20:	ldr	r2, [r1, #16]
   12c24:	ldr	r3, [r1, #96]	; 0x60
   12c28:	cmp	r2, r3
   12c2c:	bxeq	lr
   12c30:	ldr	r3, [r1, #68]	; 0x44
   12c34:	cmp	r3, #0
   12c38:	bxne	lr
   12c3c:	add	r0, r1, #68	; 0x44
   12c40:	add	r1, r1, #16
   12c44:	b	13e58 <__assert_fail@plt+0x2804>
   12c48:	push	{r4, r5, r6, r7, r8, r9, lr}
   12c4c:	movw	r7, #45528	; 0xb1d8
   12c50:	movt	r7, #2
   12c54:	sub	sp, sp, #20
   12c58:	ldr	r9, [r7, #80]	; 0x50
   12c5c:	ldrb	r2, [r7, #116]	; 0x74
   12c60:	ldr	r3, [r7, #36]	; 0x24
   12c64:	sub	r9, r9, #1
   12c68:	ldr	r6, [r7, #112]	; 0x70
   12c6c:	cmp	r2, #0
   12c70:	rsb	r9, r3, r9
   12c74:	add	r9, r6, r9
   12c78:	bne	12d74 <__assert_fail@plt+0x1720>
   12c7c:	mov	r8, r7
   12c80:	b	12c88 <__assert_fail@plt+0x1634>
   12c84:	strb	r4, [r6], #1
   12c88:	ldr	r0, [r7, #120]	; 0x78
   12c8c:	movw	r5, #45528	; 0xb1d8
   12c90:	bl	11354 <_IO_getc@plt>
   12c94:	movt	r5, #2
   12c98:	cmn	r0, #1
   12c9c:	mov	r4, r0
   12ca0:	beq	12ce4 <__assert_fail@plt+0x1690>
   12ca4:	ldrb	r3, [r8, #124]	; 0x7c
   12ca8:	cmp	r0, r3
   12cac:	beq	12d1c <__assert_fail@plt+0x16c8>
   12cb0:	cmp	r6, r9
   12cb4:	bcc	12c84 <__assert_fail@plt+0x1630>
   12cb8:	bl	12bf8 <__assert_fail@plt+0x15a4>
   12cbc:	mov	r2, #5
   12cc0:	movw	r1, #38884	; 0x97e4
   12cc4:	mov	r0, #0
   12cc8:	movt	r1, #1
   12ccc:	bl	1136c <dcgettext@plt>
   12cd0:	mov	r1, #0
   12cd4:	mov	r2, r0
   12cd8:	mov	r0, #1
   12cdc:	bl	1142c <error@plt>
   12ce0:	b	12c84 <__assert_fail@plt+0x1630>
   12ce4:	ldr	r2, [r5, #112]	; 0x70
   12ce8:	mov	r3, #1
   12cec:	strb	r3, [r5, #116]	; 0x74
   12cf0:	cmp	r6, r2
   12cf4:	beq	12d74 <__assert_fail@plt+0x1720>
   12cf8:	mov	r3, #0
   12cfc:	strb	r3, [r6], #1
   12d00:	ldr	r1, [r5, #92]	; 0x5c
   12d04:	rsb	r6, r2, r6
   12d08:	cmp	r1, r3
   12d0c:	beq	12d44 <__assert_fail@plt+0x16f0>
   12d10:	mov	r0, r6
   12d14:	add	sp, sp, #20
   12d18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12d1c:	mov	r3, #0
   12d20:	strb	r3, [r6], #1
   12d24:	ldr	r1, [r5, #92]	; 0x5c
   12d28:	ldr	r2, [r5, #112]	; 0x70
   12d2c:	cmp	r1, r3
   12d30:	ldr	r3, [r5, #128]	; 0x80
   12d34:	rsb	r6, r2, r6
   12d38:	add	r3, r3, #1
   12d3c:	str	r3, [r5, #128]	; 0x80
   12d40:	bne	12d10 <__assert_fail@plt+0x16bc>
   12d44:	movw	r3, #45400	; 0xb158
   12d48:	movt	r3, #2
   12d4c:	str	r1, [sp]
   12d50:	add	r0, r5, #68	; 0x44
   12d54:	ldrb	ip, [r3, #4]
   12d58:	mov	r3, r6
   12d5c:	str	r1, [sp, #4]
   12d60:	add	r1, r5, #16
   12d64:	str	ip, [sp, #8]
   12d68:	bl	13a24 <__assert_fail@plt+0x23d0>
   12d6c:	mov	r0, r6
   12d70:	b	12d14 <__assert_fail@plt+0x16c0>
   12d74:	mvn	r0, #0
   12d78:	b	12d14 <__assert_fail@plt+0x16c0>
   12d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d80:	movw	r6, #45528	; 0xb1d8
   12d84:	movt	r6, #2
   12d88:	sub	sp, sp, #36	; 0x24
   12d8c:	ldr	r8, [r6, #80]	; 0x50
   12d90:	ldrb	r9, [r6, #132]	; 0x84
   12d94:	ldr	r3, [r6, #36]	; 0x24
   12d98:	sub	r8, r8, #1
   12d9c:	ldr	r4, [r6, #112]	; 0x70
   12da0:	cmp	r9, #0
   12da4:	rsb	r8, r3, r8
   12da8:	add	r8, r4, r8
   12dac:	bne	13170 <__assert_fail@plt+0x1b1c>
   12db0:	mov	r2, #1
   12db4:	mvn	r7, #0
   12db8:	mov	r5, r2
   12dbc:	str	r2, [sp, #28]
   12dc0:	str	r9, [sp, #24]
   12dc4:	ldr	r0, [r6, #120]	; 0x78
   12dc8:	movw	fp, #45528	; 0xb1d8
   12dcc:	bl	11354 <_IO_getc@plt>
   12dd0:	movt	fp, #2
   12dd4:	cmn	r0, #1
   12dd8:	mov	sl, r0
   12ddc:	beq	130ac <__assert_fail@plt+0x1a58>
   12de0:	cmp	r5, #3
   12de4:	ldrls	pc, [pc, r5, lsl #2]
   12de8:	b	12e40 <__assert_fail@plt+0x17ec>
   12dec:	strdeq	r2, [r1], -ip
   12df0:	andeq	r2, r1, ip, lsl #29
   12df4:	andeq	r2, r1, ip, ror #28
   12df8:	andeq	r2, r1, ip, lsr lr
   12dfc:	cmp	r0, #10
   12e00:	beq	12f30 <__assert_fail@plt+0x18dc>
   12e04:	ldr	r3, [r6, #92]	; 0x5c
   12e08:	movw	r5, #45528	; 0xb1d8
   12e0c:	movt	r5, #2
   12e10:	cmp	r3, #0
   12e14:	beq	12fc8 <__assert_fail@plt+0x1974>
   12e18:	cmp	sl, #39	; 0x27
   12e1c:	beq	12ebc <__assert_fail@plt+0x1868>
   12e20:	cmp	sl, #92	; 0x5c
   12e24:	moveq	r9, #1
   12e28:	moveq	r5, #3
   12e2c:	beq	12e64 <__assert_fail@plt+0x1810>
   12e30:	cmp	sl, #34	; 0x22
   12e34:	movne	r9, #1
   12e38:	beq	12ebc <__assert_fail@plt+0x1868>
   12e3c:	mov	r5, #0
   12e40:	cmp	sl, #0
   12e44:	bne	12e54 <__assert_fail@plt+0x1800>
   12e48:	ldr	r3, [r6, #140]	; 0x8c
   12e4c:	cmp	r3, #0
   12e50:	beq	12ef8 <__assert_fail@plt+0x18a4>
   12e54:	cmp	r4, r8
   12e58:	bcs	12ecc <__assert_fail@plt+0x1878>
   12e5c:	strb	sl, [r4]
   12e60:	add	r4, r4, #1
   12e64:	mov	r7, sl
   12e68:	b	12dc4 <__assert_fail@plt+0x1770>
   12e6c:	cmp	r0, #10
   12e70:	beq	13050 <__assert_fail@plt+0x19fc>
   12e74:	ldr	r3, [sp, #24]
   12e78:	cmp	r3, sl
   12e7c:	bne	12e40 <__assert_fail@plt+0x17ec>
   12e80:	mov	r9, #1
   12e84:	mov	r5, #0
   12e88:	b	12e64 <__assert_fail@plt+0x1810>
   12e8c:	bics	r3, r0, #127	; 0x7f
   12e90:	bne	12eac <__assert_fail@plt+0x1858>
   12e94:	bl	1148c <__ctype_b_loc@plt>
   12e98:	lsl	r3, sl, #1
   12e9c:	ldr	r2, [r0]
   12ea0:	ldrh	r3, [r2, r3]
   12ea4:	tst	r3, #1
   12ea8:	bne	12e64 <__assert_fail@plt+0x1810>
   12eac:	sub	r3, sl, #10
   12eb0:	cmp	r3, #3
   12eb4:	bls	12e64 <__assert_fail@plt+0x1810>
   12eb8:	b	12e04 <__assert_fail@plt+0x17b0>
   12ebc:	str	sl, [sp, #24]
   12ec0:	mov	r9, #1
   12ec4:	mov	r5, #2
   12ec8:	b	12e64 <__assert_fail@plt+0x1810>
   12ecc:	bl	12bf8 <__assert_fail@plt+0x15a4>
   12ed0:	mov	r2, #5
   12ed4:	movw	r1, #38884	; 0x97e4
   12ed8:	mov	r0, #0
   12edc:	movt	r1, #1
   12ee0:	bl	1136c <dcgettext@plt>
   12ee4:	mov	r1, #0
   12ee8:	mov	r2, r0
   12eec:	mov	r0, #1
   12ef0:	bl	1142c <error@plt>
   12ef4:	b	12e5c <__assert_fail@plt+0x1808>
   12ef8:	mov	r2, #5
   12efc:	movw	r1, #39012	; 0x9864
   12f00:	mov	r0, sl
   12f04:	movt	r1, #1
   12f08:	bl	1136c <dcgettext@plt>
   12f0c:	mov	r1, sl
   12f10:	mov	r2, r0
   12f14:	mov	r0, sl
   12f18:	bl	1142c <error@plt>
   12f1c:	movw	r2, #45528	; 0xb1d8
   12f20:	movt	r2, #2
   12f24:	mov	r3, #1
   12f28:	str	r3, [r2, #140]	; 0x8c
   12f2c:	b	12e54 <__assert_fail@plt+0x1800>
   12f30:	bics	r2, r7, #127	; 0x7f
   12f34:	bne	12fb0 <__assert_fail@plt+0x195c>
   12f38:	bl	1148c <__ctype_b_loc@plt>
   12f3c:	lsl	r7, r7, #1
   12f40:	ldr	r3, [r0]
   12f44:	ldrh	r3, [r3, r7]
   12f48:	tst	r3, #1
   12f4c:	beq	12fb0 <__assert_fail@plt+0x195c>
   12f50:	ldr	r5, [r6, #112]	; 0x70
   12f54:	cmp	r4, r5
   12f58:	bne	12f68 <__assert_fail@plt+0x1914>
   12f5c:	cmp	r9, #0
   12f60:	beq	12fc0 <__assert_fail@plt+0x196c>
   12f64:	mov	r5, r4
   12f68:	ldr	r0, [r6, #136]	; 0x88
   12f6c:	mov	r3, #0
   12f70:	movw	r7, #45528	; 0xb1d8
   12f74:	strb	r3, [r4], #1
   12f78:	cmp	r0, r3
   12f7c:	movt	r7, #2
   12f80:	rsb	r4, r5, r4
   12f84:	beq	12f98 <__assert_fail@plt+0x1944>
   12f88:	ldrb	r1, [r0]
   12f8c:	ldrb	r3, [r5]
   12f90:	cmp	r1, r3
   12f94:	beq	1314c <__assert_fail@plt+0x1af8>
   12f98:	ldr	ip, [r6, #92]	; 0x5c
   12f9c:	cmp	ip, #0
   12fa0:	beq	13178 <__assert_fail@plt+0x1b24>
   12fa4:	mov	r0, r4
   12fa8:	add	sp, sp, #36	; 0x24
   12fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fb0:	ldr	r3, [r6, #128]	; 0x80
   12fb4:	add	r3, r3, #1
   12fb8:	str	r3, [r6, #128]	; 0x80
   12fbc:	b	12f50 <__assert_fail@plt+0x18fc>
   12fc0:	mov	r5, #1
   12fc4:	b	12e64 <__assert_fail@plt+0x1810>
   12fc8:	bics	r7, sl, #127	; 0x7f
   12fcc:	bne	12e18 <__assert_fail@plt+0x17c4>
   12fd0:	bl	1148c <__ctype_b_loc@plt>
   12fd4:	lsl	r3, sl, #1
   12fd8:	ldr	r2, [r0]
   12fdc:	ldrh	r3, [r2, r3]
   12fe0:	tst	r3, #1
   12fe4:	beq	12e18 <__assert_fail@plt+0x17c4>
   12fe8:	ldr	r0, [r5, #136]	; 0x88
   12fec:	ldr	r2, [r5, #112]	; 0x70
   12ff0:	cmp	r0, #0
   12ff4:	strb	r7, [r4], #1
   12ff8:	rsb	r4, r2, r4
   12ffc:	beq	13010 <__assert_fail@plt+0x19bc>
   13000:	ldrb	r1, [r0]
   13004:	ldrb	r3, [r2]
   13008:	cmp	r1, r3
   1300c:	beq	13214 <__assert_fail@plt+0x1bc0>
   13010:	movw	r1, #45400	; 0xb158
   13014:	movt	r1, #2
   13018:	ldr	r0, [pc, #548]	; 13244 <__assert_fail@plt+0x1bf0>
   1301c:	mov	lr, #0
   13020:	ldrb	r5, [r1, #4]
   13024:	mov	r3, r4
   13028:	sub	r1, r0, #52	; 0x34
   1302c:	mov	r9, #1
   13030:	str	lr, [sp]
   13034:	str	r5, [sp, #8]
   13038:	mov	r5, r9
   1303c:	str	lr, [sp, #4]
   13040:	str	lr, [sp, #28]
   13044:	bl	13a24 <__assert_fail@plt+0x23d0>
   13048:	ldr	r4, [r6, #112]	; 0x70
   1304c:	b	12e64 <__assert_fail@plt+0x1810>
   13050:	bl	12bf8 <__assert_fail@plt+0x15a4>
   13054:	mov	r2, #5
   13058:	movw	r1, #38908	; 0x97fc
   1305c:	mov	r0, #0
   13060:	movt	r1, #1
   13064:	bl	1136c <dcgettext@plt>
   13068:	ldr	r2, [sp, #24]
   1306c:	cmp	r2, #34	; 0x22
   13070:	mov	r2, #5
   13074:	movweq	r1, #38996	; 0x9854
   13078:	movwne	r1, #39004	; 0x985c
   1307c:	mov	r7, r0
   13080:	movteq	r1, #1
   13084:	movtne	r1, #1
   13088:	moveq	r0, #0
   1308c:	movne	r0, #0
   13090:	bl	1136c <dcgettext@plt>
   13094:	mov	r2, r7
   13098:	mov	r1, #0
   1309c:	mov	r3, r0
   130a0:	mov	r0, #1
   130a4:	bl	1142c <error@plt>
   130a8:	b	12e74 <__assert_fail@plt+0x1820>
   130ac:	ldr	r2, [fp, #112]	; 0x70
   130b0:	mov	r1, #1
   130b4:	strb	r1, [fp, #132]	; 0x84
   130b8:	cmp	r4, r2
   130bc:	beq	13170 <__assert_fail@plt+0x1b1c>
   130c0:	cmp	r5, #2
   130c4:	mov	r5, #0
   130c8:	strb	r5, [r4], #1
   130cc:	rsb	r4, r2, r4
   130d0:	beq	131a8 <__assert_fail@plt+0x1b54>
   130d4:	ldr	r2, [sp, #28]
   130d8:	cmp	r2, #0
   130dc:	beq	13108 <__assert_fail@plt+0x1ab4>
   130e0:	ldr	r0, [r6, #136]	; 0x88
   130e4:	movw	r3, #45528	; 0xb1d8
   130e8:	movt	r3, #2
   130ec:	cmp	r0, #0
   130f0:	beq	13108 <__assert_fail@plt+0x1ab4>
   130f4:	ldr	r1, [r3, #112]	; 0x70
   130f8:	ldrb	r2, [r0]
   130fc:	ldrb	r3, [r1]
   13100:	cmp	r2, r3
   13104:	beq	13204 <__assert_fail@plt+0x1bb0>
   13108:	ldr	ip, [r6, #92]	; 0x5c
   1310c:	movw	r1, #45528	; 0xb1d8
   13110:	movt	r1, #2
   13114:	cmp	ip, #0
   13118:	bne	12fa4 <__assert_fail@plt+0x1950>
   1311c:	movw	r3, #45400	; 0xb158
   13120:	movt	r3, #2
   13124:	ldr	r2, [r1, #112]	; 0x70
   13128:	add	r0, r1, #68	; 0x44
   1312c:	ldrb	lr, [r3, #4]
   13130:	add	r1, r1, #16
   13134:	str	ip, [sp]
   13138:	mov	r3, r4
   1313c:	stmib	sp, {ip, lr}
   13140:	bl	13a24 <__assert_fail@plt+0x23d0>
   13144:	mov	r0, r4
   13148:	b	12fa8 <__assert_fail@plt+0x1954>
   1314c:	mov	r1, r5
   13150:	bl	112c4 <strcmp@plt>
   13154:	cmp	r0, #0
   13158:	bne	12f98 <__assert_fail@plt+0x1944>
   1315c:	ldr	r3, [sp, #28]
   13160:	cmp	r3, #0
   13164:	mov	r3, #1
   13168:	strb	r3, [r7, #132]	; 0x84
   1316c:	beq	12fa4 <__assert_fail@plt+0x1950>
   13170:	mvn	r0, #0
   13174:	b	12fa8 <__assert_fail@plt+0x1954>
   13178:	movw	r3, #45400	; 0xb158
   1317c:	movt	r3, #2
   13180:	ldr	r0, [pc, #188]	; 13244 <__assert_fail@plt+0x1bf0>
   13184:	mov	r2, r5
   13188:	ldrb	lr, [r3, #4]
   1318c:	mov	r3, r4
   13190:	sub	r1, r0, #52	; 0x34
   13194:	str	ip, [sp]
   13198:	stmib	sp, {ip, lr}
   1319c:	bl	13a24 <__assert_fail@plt+0x23d0>
   131a0:	mov	r0, r4
   131a4:	b	12fa8 <__assert_fail@plt+0x1954>
   131a8:	bl	12bf8 <__assert_fail@plt+0x15a4>
   131ac:	mov	r2, #5
   131b0:	mov	r0, r5
   131b4:	movw	r1, #38908	; 0x97fc
   131b8:	movt	r1, #1
   131bc:	bl	1136c <dcgettext@plt>
   131c0:	ldr	r3, [sp, #24]
   131c4:	cmp	r3, #34	; 0x22
   131c8:	movweq	r1, #38996	; 0x9854
   131cc:	movwne	r1, #39004	; 0x985c
   131d0:	moveq	r2, #5
   131d4:	movne	r2, #5
   131d8:	mov	r7, r0
   131dc:	movteq	r1, #1
   131e0:	movtne	r1, #1
   131e4:	mov	r0, r5
   131e8:	bl	1136c <dcgettext@plt>
   131ec:	mov	r2, r7
   131f0:	mov	r1, #0
   131f4:	mov	r3, r0
   131f8:	mov	r0, #1
   131fc:	bl	1142c <error@plt>
   13200:	b	130d4 <__assert_fail@plt+0x1a80>
   13204:	bl	112c4 <strcmp@plt>
   13208:	cmp	r0, #0
   1320c:	bne	13108 <__assert_fail@plt+0x1ab4>
   13210:	b	13170 <__assert_fail@plt+0x1b1c>
   13214:	mov	r1, r2
   13218:	str	r2, [sp, #20]
   1321c:	bl	112c4 <strcmp@plt>
   13220:	ldr	r2, [sp, #20]
   13224:	cmp	r0, #0
   13228:	bne	13010 <__assert_fail@plt+0x19bc>
   1322c:	ldr	r3, [sp, #28]
   13230:	cmp	r3, #0
   13234:	mov	r3, #1
   13238:	strb	r3, [r5, #132]	; 0x84
   1323c:	beq	12fa4 <__assert_fail@plt+0x1950>
   13240:	b	13170 <__assert_fail@plt+0x1b1c>
   13244:	andeq	fp, r2, ip, lsl r2
   13248:	push	{r3, r4, r5, lr}
   1324c:	bl	11498 <getpid@plt>
   13250:	movw	r4, #45528	; 0xb1d8
   13254:	movt	r4, #2
   13258:	ldr	r3, [r4, #144]	; 0x90
   1325c:	cmp	r0, r3
   13260:	bne	132a0 <__assert_fail@plt+0x1c4c>
   13264:	ldrb	r5, [r4, #148]	; 0x94
   13268:	cmp	r5, #0
   1326c:	popne	{r3, r4, r5, pc}
   13270:	mov	r3, #1
   13274:	mov	r1, r5
   13278:	mov	r0, r3
   1327c:	strb	r3, [r4, #148]	; 0x94
   13280:	bl	12630 <__assert_fail@plt+0xfdc>
   13284:	ldr	r2, [r4, #152]	; 0x98
   13288:	ldr	r3, [r4, #60]	; 0x3c
   1328c:	strb	r5, [r4, #148]	; 0x94
   13290:	cmp	r2, r3
   13294:	popeq	{r3, r4, r5, pc}
   13298:	ldr	r0, [r4, #60]	; 0x3c
   1329c:	bl	11318 <_exit@plt>
   132a0:	movw	r0, #39152	; 0x98f0
   132a4:	movw	r1, #39172	; 0x9904
   132a8:	movw	r3, #35696	; 0x8b70
   132ac:	movt	r0, #1
   132b0:	movt	r1, #1
   132b4:	movw	r2, #1484	; 0x5cc
   132b8:	movt	r3, #1
   132bc:	bl	11654 <__assert_fail@plt>
   132c0:	push	{r3, r4, r5, r6, r7, lr}
   132c4:	movw	r5, #45528	; 0xb1d8
   132c8:	movt	r5, #2
   132cc:	mov	r6, r0
   132d0:	ldr	r1, [r5, #8]
   132d4:	cmp	r1, #0
   132d8:	beq	133dc <__assert_fail@plt+0x1d88>
   132dc:	ldr	ip, [r5, #12]
   132e0:	ldr	r4, [ip]
   132e4:	cmp	r4, #0
   132e8:	beq	13388 <__assert_fail@plt+0x1d34>
   132ec:	mov	r3, ip
   132f0:	mov	r4, #0
   132f4:	b	13304 <__assert_fail@plt+0x1cb0>
   132f8:	ldr	r2, [r3, #4]!
   132fc:	cmp	r2, #0
   13300:	beq	133ac <__assert_fail@plt+0x1d58>
   13304:	add	r4, r4, #1
   13308:	cmp	r4, r1
   1330c:	bne	132f8 <__assert_fail@plt+0x1ca4>
   13310:	movw	r3, #43689	; 0xaaa9
   13314:	movt	r3, #10922	; 0x2aaa
   13318:	cmp	r4, r3
   1331c:	movls	r0, ip
   13320:	bhi	133fc <__assert_fail@plt+0x1da8>
   13324:	add	r3, r1, #1
   13328:	add	r3, r1, r3, lsr #1
   1332c:	lsl	r1, r3, #2
   13330:	str	r3, [r5, #8]
   13334:	bl	177e8 <__assert_fail@plt+0x6194>
   13338:	ldr	r3, [r5, #8]
   1333c:	cmp	r3, r4
   13340:	str	r0, [r5, #12]
   13344:	bls	133a8 <__assert_fail@plt+0x1d54>
   13348:	sub	ip, r4, #-1073741823	; 0xc0000001
   1334c:	mov	r3, r4
   13350:	mov	r7, #0
   13354:	lsl	ip, ip, #2
   13358:	add	r2, r0, ip
   1335c:	str	r7, [r2, #4]!
   13360:	add	r3, r3, #1
   13364:	ldr	r1, [r5, #8]
   13368:	cmp	r1, r3
   1336c:	bhi	1335c <__assert_fail@plt+0x1d08>
   13370:	add	r3, ip, #4
   13374:	mov	ip, r0
   13378:	ldr	r2, [ip, r3]
   1337c:	add	ip, ip, r3
   13380:	cmp	r2, #0
   13384:	bne	133c0 <__assert_fail@plt+0x1d6c>
   13388:	ldr	r1, [r5, #4]
   1338c:	mov	r2, #1
   13390:	mov	r0, r4
   13394:	str	r6, [ip]
   13398:	add	r3, r1, r2
   1339c:	strb	r2, [r5, #156]	; 0x9c
   133a0:	str	r3, [r5, #4]
   133a4:	pop	{r3, r4, r5, r6, r7, pc}
   133a8:	mov	ip, r0
   133ac:	lsl	r3, r4, #2
   133b0:	ldr	r2, [ip, r3]
   133b4:	add	ip, ip, r3
   133b8:	cmp	r2, #0
   133bc:	beq	13388 <__assert_fail@plt+0x1d34>
   133c0:	movw	r0, #39180	; 0x990c
   133c4:	movw	r1, #39172	; 0x9904
   133c8:	movt	r0, #1
   133cc:	movt	r1, #1
   133d0:	movw	r2, #1356	; 0x54c
   133d4:	ldr	r3, [pc, #36]	; 13400 <__assert_fail@plt+0x1dac>
   133d8:	bl	11654 <__assert_fail@plt>
   133dc:	ldr	r0, [r5, #12]
   133e0:	cmp	r0, #0
   133e4:	movne	r4, r1
   133e8:	bne	13324 <__assert_fail@plt+0x1cd0>
   133ec:	mov	r4, r0
   133f0:	mov	r1, #64	; 0x40
   133f4:	mov	r3, #16
   133f8:	b	13330 <__assert_fail@plt+0x1cdc>
   133fc:	bl	178f8 <__assert_fail@plt+0x62a4>
   13400:	andeq	r8, r1, r4, lsl #23
   13404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13408:	movw	r4, #45528	; 0xb1d8
   1340c:	movt	r4, #2
   13410:	movw	r6, #45488	; 0xb1b0
   13414:	movt	r6, #2
   13418:	mov	r7, r3
   1341c:	ldrb	r2, [r4, #157]	; 0x9d
   13420:	sub	sp, sp, #44	; 0x2c
   13424:	ldr	r3, [r6]
   13428:	cmp	r2, #0
   1342c:	str	r3, [sp, #36]	; 0x24
   13430:	bne	1374c <__assert_fail@plt+0x20f8>
   13434:	movw	r5, #45400	; 0xb158
   13438:	movt	r5, #2
   1343c:	ldr	r3, [r5]
   13440:	cmp	r3, #0
   13444:	beq	13474 <__assert_fail@plt+0x1e20>
   13448:	ldr	r2, [r5]
   1344c:	ldr	r3, [r4, #4]
   13450:	cmp	r2, r3
   13454:	bhi	13474 <__assert_fail@plt+0x1e20>
   13458:	mov	r0, #0
   1345c:	mov	r1, #1
   13460:	bl	12630 <__assert_fail@plt+0xfdc>
   13464:	ldr	ip, [r5]
   13468:	ldr	r2, [r4, #4]
   1346c:	cmp	ip, r2
   13470:	bls	13458 <__assert_fail@plt+0x1e04>
   13474:	ldrb	r0, [r4, #157]	; 0x9d
   13478:	movw	r3, #45528	; 0xb1d8
   1347c:	movt	r3, #2
   13480:	cmp	r0, #0
   13484:	beq	13618 <__assert_fail@plt+0x1fc4>
   13488:	mov	r0, #0
   1348c:	mov	r1, r0
   13490:	bl	12630 <__assert_fail@plt+0xfdc>
   13494:	add	r0, sp, #16
   13498:	bl	11588 <pipe@plt>
   1349c:	cmp	r0, #0
   134a0:	bne	13760 <__assert_fail@plt+0x210c>
   134a4:	ldr	r0, [sp, #20]
   134a8:	mov	r1, #2
   134ac:	mov	r2, #1
   134b0:	bl	17e50 <__assert_fail@plt+0x67fc>
   134b4:	b	134e0 <__assert_fail@plt+0x1e8c>
   134b8:	bl	114f8 <__errno_location@plt>
   134bc:	ldr	r2, [r0]
   134c0:	cmp	r2, #11
   134c4:	bne	134ec <__assert_fail@plt+0x1e98>
   134c8:	ldr	r2, [r4, #4]
   134cc:	cmp	r2, #0
   134d0:	beq	134ec <__assert_fail@plt+0x1e98>
   134d4:	mov	r0, #0
   134d8:	mov	r1, #1
   134dc:	bl	12630 <__assert_fail@plt+0xfdc>
   134e0:	bl	115c4 <fork@plt>
   134e4:	subs	r5, r0, #0
   134e8:	blt	134b8 <__assert_fail@plt+0x1e64>
   134ec:	cmn	r5, #1
   134f0:	beq	1371c <__assert_fail@plt+0x20c8>
   134f4:	cmp	r5, #0
   134f8:	bne	1362c <__assert_fail@plt+0x1fd8>
   134fc:	mov	r5, #0
   13500:	ldr	r0, [sp, #16]
   13504:	bl	1163c <close@plt>
   13508:	mov	r0, r5
   1350c:	str	r5, [r4, #60]	; 0x3c
   13510:	bl	132c0 <__assert_fail@plt+0x1c6c>
   13514:	movw	r6, #39244	; 0x994c
   13518:	mov	r1, r5
   1351c:	movt	r6, #1
   13520:	mov	r2, #1
   13524:	mvn	r3, #0
   13528:	movw	r8, #45528	; 0xb1d8
   1352c:	movt	r8, #2
   13530:	mov	r9, r0
   13534:	mov	r0, r5
   13538:	stm	sp, {r6, r9}
   1353c:	bl	11648 <__snprintf_chk@plt>
   13540:	cmp	r0, #0
   13544:	ble	1389c <__assert_fail@plt+0x2248>
   13548:	add	fp, r0, #1
   1354c:	mov	r0, fp
   13550:	bl	11450 <malloc@plt>
   13554:	subs	sl, r0, #0
   13558:	beq	13828 <__assert_fail@plt+0x21d4>
   1355c:	str	r6, [sp]
   13560:	mov	r1, fp
   13564:	str	r9, [sp, #4]
   13568:	mov	r2, #1
   1356c:	mvn	r3, #0
   13570:	bl	11648 <__snprintf_chk@plt>
   13574:	ldr	r6, [r8, #160]	; 0xa0
   13578:	cmp	r6, #0
   1357c:	beq	13598 <__assert_fail@plt+0x1f44>
   13580:	mov	r0, r6
   13584:	mov	r1, sl
   13588:	mov	r2, #1
   1358c:	bl	114d4 <setenv@plt>
   13590:	cmp	r0, #0
   13594:	blt	1385c <__assert_fail@plt+0x2208>
   13598:	mov	r0, sl
   1359c:	bl	11300 <free@plt>
   135a0:	bl	114f8 <__errno_location@plt>
   135a4:	mov	r5, r0
   135a8:	ldr	r4, [r4, #164]	; 0xa4
   135ac:	cmp	r4, #0
   135b0:	beq	136b0 <__assert_fail@plt+0x205c>
   135b4:	mov	r0, r7
   135b8:	bl	1431c <__assert_fail@plt+0x2cc8>
   135bc:	cmp	r0, #0
   135c0:	beq	13790 <__assert_fail@plt+0x213c>
   135c4:	mov	r3, #7
   135c8:	str	r3, [r5]
   135cc:	ldr	r0, [sp, #20]
   135d0:	mov	r1, r5
   135d4:	mov	r2, #4
   135d8:	bl	11540 <write@plt>
   135dc:	ldr	r0, [sp, #20]
   135e0:	bl	1163c <close@plt>
   135e4:	ldr	r1, [r5]
   135e8:	cmp	r1, #7
   135ec:	beq	13714 <__assert_fail@plt+0x20c0>
   135f0:	ldr	r3, [r7]
   135f4:	movw	r2, #41868	; 0xa38c
   135f8:	mov	r0, #0
   135fc:	movt	r2, #1
   13600:	bl	1142c <error@plt>
   13604:	ldr	r3, [r5]
   13608:	cmp	r3, #2
   1360c:	bne	13714 <__assert_fail@plt+0x20c0>
   13610:	mov	r0, #127	; 0x7f
   13614:	b	13718 <__assert_fail@plt+0x20c4>
   13618:	ldrb	r3, [r3, #158]	; 0x9e
   1361c:	cmp	r3, #0
   13620:	beq	13488 <__assert_fail@plt+0x1e34>
   13624:	bl	128ac <__assert_fail@plt+0x1258>
   13628:	b	13488 <__assert_fail@plt+0x1e34>
   1362c:	ldr	r0, [sp, #20]
   13630:	bl	1163c <close@plt>
   13634:	ldr	r0, [sp, #16]
   13638:	add	r1, sp, #8
   1363c:	mov	r2, #4
   13640:	bl	112dc <read@plt>
   13644:	subs	r4, r0, #0
   13648:	beq	137e4 <__assert_fail@plt+0x2190>
   1364c:	cmp	r4, #4
   13650:	beq	137ac <__assert_fail@plt+0x2158>
   13654:	cmn	r4, #1
   13658:	beq	137f0 <__assert_fail@plt+0x219c>
   1365c:	bl	114f8 <__errno_location@plt>
   13660:	mov	r2, #5
   13664:	movw	r1, #39416	; 0x99f8
   13668:	movt	r1, #1
   1366c:	ldr	r5, [r0]
   13670:	mov	r0, #0
   13674:	bl	1136c <dcgettext@plt>
   13678:	mov	r3, r4
   1367c:	mov	r1, r5
   13680:	mov	r2, r0
   13684:	mov	r0, #1
   13688:	bl	1142c <error@plt>
   1368c:	ldr	r0, [sp, #16]
   13690:	bl	1163c <close@plt>
   13694:	mov	r0, #1
   13698:	ldr	r2, [sp, #36]	; 0x24
   1369c:	ldr	r3, [r6]
   136a0:	cmp	r2, r3
   136a4:	bne	13898 <__assert_fail@plt+0x2244>
   136a8:	add	sp, sp, #44	; 0x2c
   136ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136b0:	movw	r2, #39492	; 0x9a44
   136b4:	movt	r2, #1
   136b8:	add	r3, sp, #24
   136bc:	ldm	r2, {r0, r1, r2}
   136c0:	stmia	r3!, {r0, r1}
   136c4:	mov	r0, r4
   136c8:	strh	r2, [r3]
   136cc:	bl	1163c <close@plt>
   136d0:	add	r0, sp, #24
   136d4:	mov	r1, r4
   136d8:	bl	11438 <open64@plt>
   136dc:	cmp	r0, #0
   136e0:	bge	135b4 <__assert_fail@plt+0x1f60>
   136e4:	add	r2, sp, #24
   136e8:	mov	r0, r4
   136ec:	mov	r1, #6
   136f0:	ldr	r6, [r5]
   136f4:	bl	16f8c <__assert_fail@plt+0x5938>
   136f8:	movw	r2, #41868	; 0xa38c
   136fc:	movt	r2, #1
   13700:	mov	r1, r6
   13704:	mov	r3, r0
   13708:	mov	r0, r4
   1370c:	bl	1142c <error@plt>
   13710:	b	135b4 <__assert_fail@plt+0x1f60>
   13714:	mov	r0, #126	; 0x7e
   13718:	bl	11318 <_exit@plt>
   1371c:	bl	114f8 <__errno_location@plt>
   13720:	mov	r2, #5
   13724:	movw	r1, #39232	; 0x9940
   13728:	movt	r1, #1
   1372c:	ldr	r5, [r0]
   13730:	mov	r0, #0
   13734:	bl	1136c <dcgettext@plt>
   13738:	mov	r1, r5
   1373c:	mov	r2, r0
   13740:	mov	r0, #1
   13744:	bl	1142c <error@plt>
   13748:	b	134fc <__assert_fail@plt+0x1ea8>
   1374c:	mov	r0, #1
   13750:	bl	128ac <__assert_fail@plt+0x1258>
   13754:	cmp	r0, #0
   13758:	bne	13434 <__assert_fail@plt+0x1de0>
   1375c:	b	13694 <__assert_fail@plt+0x2040>
   13760:	bl	114f8 <__errno_location@plt>
   13764:	mov	r2, #5
   13768:	movw	r1, #39196	; 0x991c
   1376c:	movt	r1, #1
   13770:	ldr	r5, [r0]
   13774:	mov	r0, #0
   13778:	bl	1136c <dcgettext@plt>
   1377c:	mov	r1, r5
   13780:	mov	r2, r0
   13784:	mov	r0, #1
   13788:	bl	1142c <error@plt>
   1378c:	b	134a4 <__assert_fail@plt+0x1e50>
   13790:	ldr	r0, [r7]
   13794:	mov	r1, r7
   13798:	bl	11330 <execvp@plt>
   1379c:	ldr	r3, [r5]
   137a0:	cmp	r3, #0
   137a4:	beq	135dc <__assert_fail@plt+0x1f88>
   137a8:	b	135cc <__assert_fail@plt+0x1f78>
   137ac:	ldr	r0, [sp, #16]
   137b0:	bl	1163c <close@plt>
   137b4:	mov	r0, r5
   137b8:	add	r1, sp, #12
   137bc:	mov	r2, #0
   137c0:	bl	113f0 <waitpid@plt>
   137c4:	ldr	r3, [sp, #8]
   137c8:	cmp	r3, #7
   137cc:	moveq	r0, #0
   137d0:	beq	13698 <__assert_fail@plt+0x2044>
   137d4:	cmp	r3, #2
   137d8:	beq	13890 <__assert_fail@plt+0x223c>
   137dc:	mov	r0, #126	; 0x7e
   137e0:	bl	114a4 <exit@plt>
   137e4:	mov	r0, r5
   137e8:	bl	132c0 <__assert_fail@plt+0x1c6c>
   137ec:	b	1368c <__assert_fail@plt+0x2038>
   137f0:	ldr	r0, [sp, #16]
   137f4:	bl	1163c <close@plt>
   137f8:	bl	114f8 <__errno_location@plt>
   137fc:	mov	r2, #5
   13800:	movw	r1, #39328	; 0x99a0
   13804:	movt	r1, #1
   13808:	ldr	r4, [r0]
   1380c:	mov	r0, #0
   13810:	bl	1136c <dcgettext@plt>
   13814:	mov	r1, r4
   13818:	mov	r2, r0
   1381c:	mov	r0, #0
   13820:	bl	1142c <error@plt>
   13824:	b	1368c <__assert_fail@plt+0x2038>
   13828:	bl	114f8 <__errno_location@plt>
   1382c:	mov	r2, #5
   13830:	movw	r1, #39260	; 0x995c
   13834:	movt	r1, #1
   13838:	ldr	r6, [r0]
   1383c:	mov	r5, r0
   13840:	mov	r0, sl
   13844:	bl	1136c <dcgettext@plt>
   13848:	mov	r1, r6
   1384c:	mov	r2, r0
   13850:	mov	r0, sl
   13854:	bl	1142c <error@plt>
   13858:	b	135a8 <__assert_fail@plt+0x1f54>
   1385c:	bl	114f8 <__errno_location@plt>
   13860:	mov	r2, #5
   13864:	movw	r1, #39288	; 0x9978
   13868:	movt	r1, #1
   1386c:	ldr	r8, [r0]
   13870:	mov	r0, r5
   13874:	bl	1136c <dcgettext@plt>
   13878:	mov	r3, r6
   1387c:	mov	r1, r8
   13880:	mov	r2, r0
   13884:	mov	r0, r5
   13888:	bl	1142c <error@plt>
   1388c:	b	13598 <__assert_fail@plt+0x1f44>
   13890:	mov	r0, #127	; 0x7f
   13894:	bl	114a4 <exit@plt>
   13898:	bl	11378 <__stack_chk_fail@plt>
   1389c:	movw	r0, #39248	; 0x9950
   138a0:	movw	r1, #39172	; 0x9904
   138a4:	movt	r0, #1
   138a8:	movt	r1, #1
   138ac:	movw	r2, #1080	; 0x438
   138b0:	ldr	r3, [pc]	; 138b8 <__assert_fail@plt+0x2264>
   138b4:	bl	11654 <__assert_fail@plt>
   138b8:	muleq	r1, r0, fp
   138bc:	movw	r3, #45500	; 0xb1bc
   138c0:	movt	r3, #2
   138c4:	push	{r4, r5, r6, r7, r8, lr}
   138c8:	mov	r5, r0
   138cc:	sub	sp, sp, #16
   138d0:	ldr	r0, [r3]
   138d4:	bl	17f98 <__assert_fail@plt+0x6944>
   138d8:	movw	ip, #45512	; 0xb1c8
   138dc:	movw	r3, #45408	; 0xb160
   138e0:	movt	ip, #2
   138e4:	movt	r3, #2
   138e8:	mov	r2, #5
   138ec:	movw	r1, #41188	; 0xa0e4
   138f0:	mov	r0, #0
   138f4:	movt	r1, #1
   138f8:	ldr	r4, [ip]
   138fc:	ldr	r7, [r3]
   13900:	bl	1136c <dcgettext@plt>
   13904:	mov	r2, #5
   13908:	movw	r1, #41204	; 0xa0f4
   1390c:	movt	r1, #1
   13910:	mov	r8, r0
   13914:	mov	r0, #0
   13918:	bl	1136c <dcgettext@plt>
   1391c:	mov	r2, #5
   13920:	movw	r1, #41220	; 0xa104
   13924:	movt	r1, #1
   13928:	mov	r6, r0
   1392c:	mov	r0, #0
   13930:	bl	1136c <dcgettext@plt>
   13934:	mov	ip, #0
   13938:	str	r8, [sp]
   1393c:	mov	r3, r7
   13940:	str	r6, [sp, #4]
   13944:	mov	r1, r5
   13948:	str	ip, [sp, #12]
   1394c:	movw	r2, #41236	; 0xa114
   13950:	movt	r2, #1
   13954:	str	r0, [sp, #8]
   13958:	mov	r0, r4
   1395c:	bl	176e8 <__assert_fail@plt+0x6094>
   13960:	add	sp, sp, #16
   13964:	pop	{r4, r5, r6, r7, r8, pc}
   13968:	mov	r0, #0
   1396c:	bx	lr
   13970:	push	{r4, r5, r6, r7, lr}
   13974:	movw	r4, #45488	; 0xb1b0
   13978:	movt	r4, #2
   1397c:	sub	sp, sp, #28
   13980:	mov	r6, r1
   13984:	mov	r7, r0
   13988:	ldr	r2, [r4]
   1398c:	str	r2, [sp, #20]
   13990:	bl	11444 <getenv@plt>
   13994:	subs	r5, r0, #0
   13998:	moveq	r0, r5
   1399c:	beq	139d0 <__assert_fail@plt+0x237c>
   139a0:	mov	r5, #0
   139a4:	add	r1, sp, #12
   139a8:	str	r5, [sp]
   139ac:	mov	r2, #10
   139b0:	add	r3, sp, #16
   139b4:	bl	17938 <__assert_fail@plt+0x62e4>
   139b8:	cmp	r0, r5
   139bc:	bne	139e8 <__assert_fail@plt+0x2394>
   139c0:	ldr	r0, [sp, #16]
   139c4:	cmp	r0, r6
   139c8:	movcs	r0, #0
   139cc:	movcc	r0, #1
   139d0:	ldr	r2, [sp, #20]
   139d4:	ldr	r3, [r4]
   139d8:	cmp	r2, r3
   139dc:	bne	13a20 <__assert_fail@plt+0x23cc>
   139e0:	add	sp, sp, #28
   139e4:	pop	{r4, r5, r6, r7, pc}
   139e8:	bl	114f8 <__errno_location@plt>
   139ec:	mov	r2, #5
   139f0:	movw	r1, #41332	; 0xa174
   139f4:	movt	r1, #1
   139f8:	ldr	r6, [r0]
   139fc:	mov	r0, r5
   13a00:	bl	1136c <dcgettext@plt>
   13a04:	mov	r3, r7
   13a08:	mov	r1, r6
   13a0c:	mov	r2, r0
   13a10:	mov	r0, #1
   13a14:	bl	1142c <error@plt>
   13a18:	mov	r0, r5
   13a1c:	b	139d0 <__assert_fail@plt+0x237c>
   13a20:	bl	11378 <__stack_chk_fail@plt>
   13a24:	movw	ip, #41396	; 0xa1b4
   13a28:	movt	ip, #1
   13a2c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13a30:	mov	r7, r2
   13a34:	subs	r2, r2, ip
   13a38:	mov	r5, r0
   13a3c:	rsbs	r8, r2, #0
   13a40:	mov	r4, r1
   13a44:	adcs	r8, r8, r2
   13a48:	cmp	r7, #0
   13a4c:	mov	r9, r3
   13a50:	ldr	r6, [sp, #40]	; 0x28
   13a54:	beq	13c94 <__assert_fail@plt+0x2640>
   13a58:	cmp	r6, #0
   13a5c:	moveq	r3, #1
   13a60:	streq	r3, [r1, #28]
   13a64:	cmp	r8, #0
   13a68:	bne	13b14 <__assert_fail@plt+0x24c0>
   13a6c:	ldr	r2, [r1, #16]
   13a70:	ldr	r3, [r0, #12]
   13a74:	add	r2, r9, r2
   13a78:	cmp	r2, r3
   13a7c:	bls	13ad4 <__assert_fail@plt+0x2480>
   13a80:	cmp	r6, #0
   13a84:	bne	13c24 <__assert_fail@plt+0x25d0>
   13a88:	ldr	r2, [r1]
   13a8c:	ldr	r3, [r0, #28]
   13a90:	cmp	r2, r3
   13a94:	beq	13c24 <__assert_fail@plt+0x25d0>
   13a98:	ldr	r3, [r5, #24]
   13a9c:	cmp	r3, #0
   13aa0:	beq	13c4c <__assert_fail@plt+0x25f8>
   13aa4:	mov	r2, #5
   13aa8:	movw	r1, #41500	; 0xa21c
   13aac:	mov	r0, #0
   13ab0:	movt	r1, #1
   13ab4:	bl	1136c <dcgettext@plt>
   13ab8:	mov	r1, #0
   13abc:	mov	r2, r0
   13ac0:	mov	r0, #1
   13ac4:	bl	1142c <error@plt>
   13ac8:	mov	r0, r5
   13acc:	mov	r1, r4
   13ad0:	bl	13e58 <__assert_fail@plt+0x2804>
   13ad4:	cmp	r6, #0
   13ad8:	ldr	ip, [r4]
   13adc:	bne	13afc <__assert_fail@plt+0x24a8>
   13ae0:	ldr	r3, [r5, #40]	; 0x28
   13ae4:	cmp	r3, #0
   13ae8:	beq	13afc <__assert_fail@plt+0x24a8>
   13aec:	ldr	r2, [r5, #28]
   13af0:	rsb	r2, r2, ip
   13af4:	cmp	r3, r2
   13af8:	beq	13b08 <__assert_fail@plt+0x24b4>
   13afc:	ldr	r3, [r5, #16]
   13b00:	cmp	ip, r3
   13b04:	bne	13b18 <__assert_fail@plt+0x24c4>
   13b08:	mov	r0, r5
   13b0c:	mov	r1, r4
   13b10:	bl	13e58 <__assert_fail@plt+0x2804>
   13b14:	ldr	ip, [r4]
   13b18:	ldr	r1, [r4, #8]
   13b1c:	cmp	r1, ip
   13b20:	bls	13b50 <__assert_fail@plt+0x24fc>
   13b24:	ldr	r3, [r4, #4]
   13b28:	cmp	r8, #0
   13b2c:	beq	13b80 <__assert_fail@plt+0x252c>
   13b30:	add	r1, ip, #1
   13b34:	mov	r2, #0
   13b38:	str	r1, [r4]
   13b3c:	str	r2, [r3, ip, lsl #2]
   13b40:	cmp	r6, #0
   13b44:	ldrne	r3, [r4, #16]
   13b48:	strne	r3, [r4, #20]
   13b4c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13b50:	ldr	r0, [r4, #4]
   13b54:	cmp	r0, #0
   13b58:	beq	13c74 <__assert_fail@plt+0x2620>
   13b5c:	lsl	r3, r1, #1
   13b60:	lsl	r1, r1, #3
   13b64:	str	r3, [r4, #8]
   13b68:	bl	177e8 <__assert_fail@plt+0x6194>
   13b6c:	cmp	r8, #0
   13b70:	ldr	ip, [r4]
   13b74:	mov	r3, r0
   13b78:	str	r0, [r4, #4]
   13b7c:	bne	13b30 <__assert_fail@plt+0x24dc>
   13b80:	ldr	r2, [sp, #32]
   13b84:	add	r1, ip, #1
   13b88:	ldr	r0, [r4, #16]
   13b8c:	cmp	r2, #0
   13b90:	ldr	r2, [r4, #12]
   13b94:	str	r1, [r4]
   13b98:	add	r2, r2, r0
   13b9c:	str	r2, [r3, ip, lsl #2]
   13ba0:	beq	13bc4 <__assert_fail@plt+0x2570>
   13ba4:	ldr	r3, [r4, #12]
   13ba8:	ldr	r1, [sp, #32]
   13bac:	add	r0, r3, r0
   13bb0:	bl	11408 <strcpy@plt>
   13bb4:	ldr	r0, [r4, #16]
   13bb8:	ldr	r3, [sp, #36]	; 0x24
   13bbc:	add	r0, r3, r0
   13bc0:	str	r0, [r4, #16]
   13bc4:	ldr	r3, [r4, #12]
   13bc8:	mov	r1, r7
   13bcc:	add	r0, r3, r0
   13bd0:	bl	11408 <strcpy@plt>
   13bd4:	ldr	r2, [r4, #16]
   13bd8:	cmp	r6, #0
   13bdc:	ldr	r3, [r4]
   13be0:	add	r9, r2, r9
   13be4:	str	r9, [r4, #16]
   13be8:	bne	13c08 <__assert_fail@plt+0x25b4>
   13bec:	ldr	r2, [r5, #40]	; 0x28
   13bf0:	cmp	r2, #0
   13bf4:	beq	13c08 <__assert_fail@plt+0x25b4>
   13bf8:	ldr	r1, [r5, #28]
   13bfc:	rsb	r1, r1, r3
   13c00:	cmp	r2, r1
   13c04:	beq	13c14 <__assert_fail@plt+0x25c0>
   13c08:	ldr	r2, [r5, #16]
   13c0c:	cmp	r3, r2
   13c10:	bne	13b40 <__assert_fail@plt+0x24ec>
   13c14:	mov	r0, r5
   13c18:	mov	r1, r4
   13c1c:	bl	13e58 <__assert_fail@plt+0x2804>
   13c20:	b	13b40 <__assert_fail@plt+0x24ec>
   13c24:	mov	r2, #5
   13c28:	movw	r1, #41440	; 0xa1e0
   13c2c:	mov	r0, #0
   13c30:	movt	r1, #1
   13c34:	bl	1136c <dcgettext@plt>
   13c38:	mov	r1, #0
   13c3c:	mov	r2, r0
   13c40:	mov	r0, #1
   13c44:	bl	1142c <error@plt>
   13c48:	b	13a98 <__assert_fail@plt+0x2444>
   13c4c:	ldr	r3, [r5]
   13c50:	cmp	r3, #0
   13c54:	beq	13ac8 <__assert_fail@plt+0x2474>
   13c58:	ldr	r3, [r5, #36]	; 0x24
   13c5c:	cmp	r3, #0
   13c60:	bne	13aa4 <__assert_fail@plt+0x2450>
   13c64:	ldr	r3, [r5, #40]	; 0x28
   13c68:	cmp	r3, #0
   13c6c:	beq	13ac8 <__assert_fail@plt+0x2474>
   13c70:	b	13aa4 <__assert_fail@plt+0x2450>
   13c74:	mov	r3, #64	; 0x40
   13c78:	mov	r0, #256	; 0x100
   13c7c:	str	r3, [r4, #8]
   13c80:	bl	177c0 <__assert_fail@plt+0x616c>
   13c84:	ldr	ip, [r4]
   13c88:	mov	r3, r0
   13c8c:	str	r0, [r4, #4]
   13c90:	b	13b28 <__assert_fail@plt+0x24d4>
   13c94:	movw	r0, #41408	; 0xa1c0
   13c98:	movw	r1, #41428	; 0xa1d4
   13c9c:	movw	r3, #41260	; 0xa12c
   13ca0:	movt	r0, #1
   13ca4:	movt	r1, #1
   13ca8:	movw	r2, #358	; 0x166
   13cac:	movt	r3, #1
   13cb0:	bl	11654 <__assert_fail@plt>
   13cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cb8:	movw	ip, #45696	; 0xb280
   13cbc:	sub	sp, sp, #36	; 0x24
   13cc0:	movt	ip, #2
   13cc4:	mov	r7, r3
   13cc8:	mov	r8, r0
   13ccc:	ldr	r3, [sp, #76]	; 0x4c
   13cd0:	mov	r4, r2
   13cd4:	str	ip, [sp, #16]
   13cd8:	str	r1, [sp, #24]
   13cdc:	ldr	r1, [ip]
   13ce0:	ldr	ip, [sp, #80]	; 0x50
   13ce4:	str	r3, [sp, #12]
   13ce8:	cmp	r1, #0
   13cec:	ldr	r3, [sp, #84]	; 0x54
   13cf0:	str	ip, [sp, #8]
   13cf4:	ldr	ip, [sp, #88]	; 0x58
   13cf8:	ldr	r0, [r0, #12]
   13cfc:	ldr	r9, [sp, #72]	; 0x48
   13d00:	sub	r6, r0, #1
   13d04:	str	r3, [sp, #4]
   13d08:	str	ip, [sp, #28]
   13d0c:	strne	r1, [sp, #20]
   13d10:	beq	13e40 <__assert_fail@plt+0x27ec>
   13d14:	ldr	r3, [sp, #4]
   13d18:	ldr	ip, [sp, #12]
   13d1c:	ldr	r5, [sp, #20]
   13d20:	add	r3, r3, ip
   13d24:	str	r3, [sp]
   13d28:	b	13d9c <__assert_fail@plt+0x2748>
   13d2c:	bl	1151c <strncpy@plt>
   13d30:	cmp	sl, #0
   13d34:	mov	r1, r9
   13d38:	rsb	r6, fp, r6
   13d3c:	add	r5, r5, fp
   13d40:	add	r4, r4, fp
   13d44:	beq	13d90 <__assert_fail@plt+0x273c>
   13d48:	ldr	r3, [sp]
   13d4c:	mov	r0, r5
   13d50:	cmp	r6, r3
   13d54:	rsb	r6, r3, r6
   13d58:	bls	13dcc <__assert_fail@plt+0x2778>
   13d5c:	cmp	r9, #0
   13d60:	beq	13d70 <__assert_fail@plt+0x271c>
   13d64:	bl	11408 <strcpy@plt>
   13d68:	ldr	ip, [sp, #12]
   13d6c:	add	r5, r5, ip
   13d70:	mov	r0, r5
   13d74:	ldr	r1, [sp, #8]
   13d78:	bl	11408 <strcpy@plt>
   13d7c:	ldr	r3, [r8, #20]
   13d80:	ldr	ip, [sp, #4]
   13d84:	add	r4, r4, r3
   13d88:	rsb	r7, r3, r7
   13d8c:	add	r5, r5, ip
   13d90:	ldrb	r3, [r4]
   13d94:	cmp	r3, #0
   13d98:	beq	13e08 <__assert_fail@plt+0x27b4>
   13d9c:	ldr	r1, [r8, #24]
   13da0:	mov	r0, r4
   13da4:	bl	14f9c <__assert_fail@plt+0x3948>
   13da8:	mov	r1, r4
   13dac:	subs	sl, r0, #0
   13db0:	mov	r0, r5
   13db4:	rsb	fp, r4, sl
   13db8:	moveq	fp, r7
   13dbc:	cmp	r6, fp
   13dc0:	rsb	r7, fp, r7
   13dc4:	mov	r2, fp
   13dc8:	bhi	13d2c <__assert_fail@plt+0x26d8>
   13dcc:	ldrb	r3, [r4]
   13dd0:	cmp	r3, #0
   13dd4:	beq	13e08 <__assert_fail@plt+0x27b4>
   13dd8:	mov	r2, #5
   13ddc:	movw	r1, #41524	; 0xa234
   13de0:	mov	r0, #0
   13de4:	movt	r1, #1
   13de8:	bl	1136c <dcgettext@plt>
   13dec:	mov	r1, #0
   13df0:	mov	r2, r0
   13df4:	mov	r0, #1
   13df8:	bl	1142c <error@plt>
   13dfc:	ldr	ip, [sp, #16]
   13e00:	ldr	r2, [ip]
   13e04:	b	13e0c <__assert_fail@plt+0x27b8>
   13e08:	ldr	r2, [sp, #20]
   13e0c:	mov	r3, r5
   13e10:	mov	ip, #0
   13e14:	strb	ip, [r3], #1
   13e18:	mov	r0, r8
   13e1c:	str	ip, [sp, #72]	; 0x48
   13e20:	rsb	r3, r2, r3
   13e24:	str	ip, [sp, #76]	; 0x4c
   13e28:	ldr	ip, [sp, #28]
   13e2c:	ldr	r1, [sp, #24]
   13e30:	str	ip, [sp, #80]	; 0x50
   13e34:	add	sp, sp, #36	; 0x24
   13e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e3c:	b	13a24 <__assert_fail@plt+0x23d0>
   13e40:	add	r0, r0, #1
   13e44:	bl	177c0 <__assert_fail@plt+0x616c>
   13e48:	ldr	ip, [sp, #16]
   13e4c:	str	r0, [sp, #20]
   13e50:	str	r0, [ip]
   13e54:	b	13d14 <__assert_fail@plt+0x26c0>
   13e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e5c:	sub	sp, sp, #20
   13e60:	mov	ip, #0
   13e64:	mov	r5, r1
   13e68:	mov	r3, ip
   13e6c:	movw	r2, #41396	; 0xa1b4
   13e70:	str	ip, [sp]
   13e74:	movt	r2, #1
   13e78:	str	ip, [sp, #4]
   13e7c:	mov	sl, r0
   13e80:	str	ip, [sp, #8]
   13e84:	bl	13a24 <__assert_fail@plt+0x23d0>
   13e88:	ldr	r3, [r5]
   13e8c:	cmp	r3, #0
   13e90:	beq	140c8 <__assert_fail@plt+0x2a74>
   13e94:	ldr	r2, [r5, #4]
   13e98:	sub	r3, r3, #-1073741823	; 0xc0000001
   13e9c:	lsl	r0, r3, #2
   13ea0:	ldr	r8, [r2, r3, lsl #2]
   13ea4:	cmp	r8, #0
   13ea8:	bne	14100 <__assert_fail@plt+0x2aac>
   13eac:	add	r0, r0, #8
   13eb0:	mov	r9, r8
   13eb4:	bl	177c0 <__assert_fail@plt+0x616c>
   13eb8:	ldr	r6, [r5]
   13ebc:	ldr	ip, [sl, #28]
   13ec0:	mov	r7, r0
   13ec4:	mov	r0, r6
   13ec8:	cmp	ip, #0
   13ecc:	beq	13ef0 <__assert_fail@plt+0x289c>
   13ed0:	lsl	r1, ip, #2
   13ed4:	mov	r2, #0
   13ed8:	ldr	r3, [r5, #4]
   13edc:	ldr	r3, [r3, r2]
   13ee0:	str	r3, [r7, r2]
   13ee4:	add	r2, r2, #4
   13ee8:	cmp	r2, r1
   13eec:	bne	13ed8 <__assert_fail@plt+0x2884>
   13ef0:	add	r2, r8, ip
   13ef4:	mov	r4, ip
   13ef8:	cmp	r2, r0
   13efc:	bcs	13f40 <__assert_fail@plt+0x28ec>
   13f00:	cmp	r6, ip
   13f04:	bls	13f40 <__assert_fail@plt+0x28ec>
   13f08:	rsb	lr, r2, ip
   13f0c:	lsl	r2, r2, #2
   13f10:	add	lr, r7, lr, lsl #2
   13f14:	b	13f24 <__assert_fail@plt+0x28d0>
   13f18:	cmp	r6, r4
   13f1c:	add	r2, r2, #4
   13f20:	bls	13f40 <__assert_fail@plt+0x28ec>
   13f24:	ldr	r3, [r5, #4]
   13f28:	add	r4, r4, #1
   13f2c:	add	r1, r8, r4
   13f30:	cmp	r0, r1
   13f34:	ldr	r3, [r3, r2]
   13f38:	str	r3, [lr, r2]
   13f3c:	bhi	13f18 <__assert_fail@plt+0x28c4>
   13f40:	cmp	r4, ip
   13f44:	bcc	140e4 <__assert_fail@plt+0x2a90>
   13f48:	str	r9, [r7, r4, lsl #2]
   13f4c:	mov	r0, sl
   13f50:	ldr	ip, [sl, #32]
   13f54:	mov	r2, r4
   13f58:	ldr	r1, [r5, #24]
   13f5c:	mov	r3, r7
   13f60:	blx	ip
   13f64:	subs	fp, r0, #0
   13f68:	bne	14048 <__assert_fail@plt+0x29f4>
   13f6c:	ldr	r3, [sl, #28]
   13f70:	add	r2, r3, #1
   13f74:	cmp	r6, r2
   13f78:	bhi	13fe4 <__assert_fail@plt+0x2990>
   13f7c:	mov	r2, #5
   13f80:	movw	r1, #41648	; 0xa2b0
   13f84:	movt	r1, #1
   13f88:	bl	1136c <dcgettext@plt>
   13f8c:	mov	r1, fp
   13f90:	mov	r2, r0
   13f94:	mov	r0, #1
   13f98:	bl	1142c <error@plt>
   13f9c:	ldr	ip, [sl, #28]
   13fa0:	ldr	r0, [r5]
   13fa4:	add	r2, r8, #1
   13fa8:	rsb	r3, ip, r0
   13fac:	cmp	r2, r3
   13fb0:	bcc	13ec8 <__assert_fail@plt+0x2874>
   13fb4:	mov	r0, r7
   13fb8:	bl	11300 <free@plt>
   13fbc:	ldr	r1, [sl, #28]
   13fc0:	ldr	r2, [r5, #20]
   13fc4:	mov	r0, #0
   13fc8:	mvn	r3, #0
   13fcc:	str	r0, [r5, #28]
   13fd0:	str	r1, [r5]
   13fd4:	str	r2, [r5, #16]
   13fd8:	str	r3, [r5, #32]
   13fdc:	add	sp, sp, #20
   13fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe4:	ldr	r1, [r5, #40]	; 0x28
   13fe8:	cmp	r6, r1
   13fec:	bcc	13ffc <__assert_fail@plt+0x29a8>
   13ff0:	cmp	r1, #0
   13ff4:	movne	ip, r3
   13ff8:	bne	14004 <__assert_fail@plt+0x29b0>
   13ffc:	str	r6, [r5, #40]	; 0x28
   14000:	ldr	ip, [sl, #28]
   14004:	ldr	r1, [r5, #36]	; 0x24
   14008:	cmp	r1, #0
   1400c:	beq	140c0 <__assert_fail@plt+0x2a6c>
   14010:	ldr	r0, [r5, #40]	; 0x28
   14014:	cmp	r1, r0
   14018:	bcs	140c0 <__assert_fail@plt+0x2a6c>
   1401c:	rsb	r1, r1, r0
   14020:	lsrs	r1, r1, #1
   14024:	rsbne	r6, r1, r6
   14028:	subeq	r6, r6, #1
   1402c:	cmp	r3, #0
   14030:	beq	1403c <__assert_fail@plt+0x29e8>
   14034:	cmp	r6, r2
   14038:	movcc	r6, r2
   1403c:	cmp	r6, #0
   14040:	moveq	r6, #1
   14044:	b	13fa0 <__assert_fail@plt+0x294c>
   14048:	ldr	r2, [r5, #36]	; 0x24
   1404c:	ldr	r3, [sl, #28]
   14050:	cmp	r6, r2
   14054:	strhi	r6, [r5, #36]	; 0x24
   14058:	movhi	r2, r6
   1405c:	ldrhi	ip, [sl, #28]
   14060:	movls	ip, r3
   14064:	cmp	r2, #0
   14068:	beq	140b0 <__assert_fail@plt+0x2a5c>
   1406c:	ldr	r1, [r5, #40]	; 0x28
   14070:	cmp	r1, r2
   14074:	bls	140b0 <__assert_fail@plt+0x2a5c>
   14078:	rsb	r2, r2, r1
   1407c:	lsrs	r2, r2, #1
   14080:	addne	r6, r6, r2
   14084:	beq	140b8 <__assert_fail@plt+0x2a64>
   14088:	cmp	r3, #0
   1408c:	beq	1409c <__assert_fail@plt+0x2a48>
   14090:	add	r3, r3, #1
   14094:	cmp	r6, r3
   14098:	movcc	r6, r3
   1409c:	cmp	r6, #0
   140a0:	add	r8, r4, r8
   140a4:	rsb	r8, ip, r8
   140a8:	moveq	r6, #1
   140ac:	b	13fa0 <__assert_fail@plt+0x294c>
   140b0:	cmn	r6, #1
   140b4:	beq	14088 <__assert_fail@plt+0x2a34>
   140b8:	add	r6, r6, #1
   140bc:	b	14088 <__assert_fail@plt+0x2a34>
   140c0:	lsr	r6, r6, #1
   140c4:	b	1402c <__assert_fail@plt+0x29d8>
   140c8:	movw	r0, #41544	; 0xa248
   140cc:	movw	r1, #41428	; 0xa1d4
   140d0:	movt	r0, #1
   140d4:	movt	r1, #1
   140d8:	movw	r2, #278	; 0x116
   140dc:	ldr	r3, [pc, #56]	; 1411c <__assert_fail@plt+0x2ac8>
   140e0:	bl	11654 <__assert_fail@plt>
   140e4:	movw	r0, #41616	; 0xa290
   140e8:	movw	r1, #41428	; 0xa1d4
   140ec:	movt	r0, #1
   140f0:	movt	r1, #1
   140f4:	movw	r2, #259	; 0x103
   140f8:	ldr	r3, [pc, #32]	; 14120 <__assert_fail@plt+0x2acc>
   140fc:	bl	11654 <__assert_fail@plt>
   14100:	movw	r0, #41564	; 0xa25c
   14104:	movw	r1, #41428	; 0xa1d4
   14108:	movt	r0, #1
   1410c:	movt	r1, #1
   14110:	movw	r2, #279	; 0x117
   14114:	ldr	r3, [pc]	; 1411c <__assert_fail@plt+0x2ac8>
   14118:	bl	11654 <__assert_fail@plt>
   1411c:	andeq	sl, r1, r8, lsr r1
   14120:	andeq	sl, r1, r4, asr #2
   14124:	push	{r3, lr}
   14128:	mov	r0, #0
   1412c:	bl	11384 <sysconf@plt>
   14130:	cmp	r0, #0
   14134:	mvnle	r0, #-2147483648	; 0x80000000
   14138:	pop	{r3, pc}
   1413c:	push	{r3, r4, r5, lr}
   14140:	movw	r3, #45484	; 0xb1ac
   14144:	movt	r3, #2
   14148:	ldr	r5, [r3]
   1414c:	ldr	r3, [r5]
   14150:	cmp	r3, #0
   14154:	beq	14180 <__assert_fail@plt+0x2b2c>
   14158:	mov	r4, #0
   1415c:	mov	r0, r3
   14160:	bl	114bc <strlen@plt>
   14164:	ldr	r3, [r5, #4]!
   14168:	cmp	r3, #0
   1416c:	add	r0, r0, #1
   14170:	add	r4, r4, r0
   14174:	bne	1415c <__assert_fail@plt+0x2b08>
   14178:	mov	r0, r4
   1417c:	pop	{r3, r4, r5, pc}
   14180:	mov	r4, r3
   14184:	b	14178 <__assert_fail@plt+0x2b24>
   14188:	push	{r4, r5, r6, lr}
   1418c:	mov	r4, r0
   14190:	mov	r6, r1
   14194:	bl	1413c <__assert_fail@plt+0x2ae8>
   14198:	mov	r2, #4096	; 0x1000
   1419c:	str	r2, [r4, #8]
   141a0:	mov	r5, r0
   141a4:	mov	r0, #0
   141a8:	bl	11384 <sysconf@plt>
   141ac:	mov	r2, #0
   141b0:	str	r2, [r4]
   141b4:	cmp	r0, #0
   141b8:	movgt	r3, r0
   141bc:	mvnle	r3, #-2147483648	; 0x80000000
   141c0:	cmp	r5, r3
   141c4:	str	r3, [r4, #4]
   141c8:	bhi	1422c <__assert_fail@plt+0x2bd8>
   141cc:	add	r1, r5, r6
   141d0:	cmp	r1, r3
   141d4:	bcc	141e0 <__assert_fail@plt+0x2b8c>
   141d8:	mov	r0, #2
   141dc:	pop	{r4, r5, r6, pc}
   141e0:	rsb	r3, r5, r3
   141e4:	rsb	r6, r6, r3
   141e8:	str	r6, [r4, #4]
   141ec:	lsr	r3, r6, #2
   141f0:	sub	r3, r3, #2
   141f4:	str	r3, [r4, #16]
   141f8:	cmp	r3, r2
   141fc:	beq	14234 <__assert_fail@plt+0x2be0>
   14200:	str	r2, [r4, #20]
   14204:	mov	r0, r2
   14208:	str	r2, [r4, #24]
   1420c:	movw	r1, #14696	; 0x3968
   14210:	str	r2, [r4, #28]
   14214:	movt	r1, #1
   14218:	str	r2, [r4, #36]	; 0x24
   1421c:	str	r2, [r4, #40]	; 0x28
   14220:	str	r6, [r4, #12]
   14224:	str	r1, [r4, #32]
   14228:	pop	{r4, r5, r6, pc}
   1422c:	mov	r0, #1
   14230:	pop	{r4, r5, r6, pc}
   14234:	movw	r0, #41700	; 0xa2e4
   14238:	movw	r1, #41428	; 0xa1d4
   1423c:	movt	r0, #1
   14240:	movt	r1, #1
   14244:	movw	r2, #535	; 0x217
   14248:	ldr	r3, [pc]	; 14250 <__assert_fail@plt+0x2bfc>
   1424c:	bl	11654 <__assert_fail@plt>
   14250:	andeq	sl, r1, r0, asr r1
   14254:	ldr	r3, [r0, #4]
   14258:	cmp	r3, #131072	; 0x20000
   1425c:	bcc	1426c <__assert_fail@plt+0x2c18>
   14260:	ldr	r3, [r0, #8]
   14264:	cmp	r3, #131072	; 0x20000
   14268:	movls	r3, #131072	; 0x20000
   1426c:	str	r3, [r0, #12]
   14270:	bx	lr
   14274:	ldr	r0, [r0, #12]
   14278:	movw	r3, #63487	; 0xf7ff
   1427c:	movt	r3, #32767	; 0x7fff
   14280:	cmp	r0, r3
   14284:	push	{r4, r5, r6, lr}
   14288:	mov	r5, #0
   1428c:	mov	r4, r1
   14290:	mov	r6, r2
   14294:	str	r5, [r1]
   14298:	str	r5, [r1, #16]
   1429c:	str	r5, [r1, #4]
   142a0:	str	r5, [r1, #8]
   142a4:	str	r5, [r1, #36]	; 0x24
   142a8:	str	r5, [r1, #40]	; 0x28
   142ac:	bhi	142d8 <__assert_fail@plt+0x2c84>
   142b0:	add	r0, r0, #1
   142b4:	bl	177c0 <__assert_fail@plt+0x616c>
   142b8:	mvn	r3, #0
   142bc:	str	r5, [r4, #20]
   142c0:	str	r5, [r4, #16]
   142c4:	str	r5, [r4, #28]
   142c8:	str	r6, [r4, #24]
   142cc:	str	r3, [r4, #32]
   142d0:	str	r0, [r4, #12]
   142d4:	pop	{r4, r5, r6, pc}
   142d8:	movw	r0, #41724	; 0xa2fc
   142dc:	movw	r1, #41428	; 0xa1d4
   142e0:	movt	r0, #1
   142e4:	movt	r1, #1
   142e8:	movw	r2, #589	; 0x24d
   142ec:	ldr	r3, [pc]	; 142f4 <__assert_fail@plt+0x2ca0>
   142f0:	bl	11654 <__assert_fail@plt>
   142f4:	andeq	sl, r1, r4, ror #2
   142f8:	ldr	r0, [r0, #28]
   142fc:	mov	ip, #0
   14300:	ldr	r2, [r1, #20]
   14304:	mvn	r3, #0
   14308:	str	ip, [r1, #28]
   1430c:	str	r0, [r1]
   14310:	str	r2, [r1, #16]
   14314:	str	r3, [r1, #32]
   14318:	bx	lr
   1431c:	ldr	r3, [r0]
   14320:	push	{r4, r5, r6, lr}
   14324:	cmp	r3, #0
   14328:	beq	14390 <__assert_fail@plt+0x2d3c>
   1432c:	mov	r4, #0
   14330:	mov	r6, r0
   14334:	mov	r5, r4
   14338:	mov	r0, r3
   1433c:	add	r4, r4, #1
   14340:	bl	114bc <strlen@plt>
   14344:	ldr	r3, [r6, #4]!
   14348:	cmp	r3, #0
   1434c:	add	r5, r5, r0
   14350:	bne	14338 <__assert_fail@plt+0x2ce4>
   14354:	mov	r1, r4
   14358:	movw	r0, #41764	; 0xa324
   1435c:	movt	r0, #1
   14360:	bl	13970 <__assert_fail@plt+0x231c>
   14364:	cmp	r0, #0
   14368:	beq	14374 <__assert_fail@plt+0x2d20>
   1436c:	mov	r0, #1
   14370:	pop	{r4, r5, r6, pc}
   14374:	mov	r1, r5
   14378:	movw	r0, #41804	; 0xa34c
   1437c:	movt	r0, #1
   14380:	bl	13970 <__assert_fail@plt+0x231c>
   14384:	adds	r0, r0, #0
   14388:	movne	r0, #1
   1438c:	pop	{r4, r5, r6, pc}
   14390:	mov	r4, r3
   14394:	mov	r5, r3
   14398:	b	14354 <__assert_fail@plt+0x2d00>
   1439c:	movw	r3, #45700	; 0xb284
   143a0:	movt	r3, #2
   143a4:	str	r0, [r3]
   143a8:	bx	lr
   143ac:	push	{r4, r5, r6, lr}
   143b0:	movw	r4, #45504	; 0xb1c0
   143b4:	movt	r4, #2
   143b8:	sub	sp, sp, #8
   143bc:	ldr	r5, [r4]
   143c0:	mov	r0, r5
   143c4:	bl	17ff8 <__assert_fail@plt+0x69a4>
   143c8:	cmp	r0, #0
   143cc:	mov	r0, r5
   143d0:	bne	1444c <__assert_fail@plt+0x2df8>
   143d4:	bl	180e0 <__assert_fail@plt+0x6a8c>
   143d8:	cmp	r0, #0
   143dc:	beq	1448c <__assert_fail@plt+0x2e38>
   143e0:	mov	r2, #5
   143e4:	movw	r1, #41844	; 0xa374
   143e8:	mov	r0, #0
   143ec:	movt	r1, #1
   143f0:	bl	1136c <dcgettext@plt>
   143f4:	movw	r2, #45700	; 0xb284
   143f8:	movt	r2, #2
   143fc:	ldr	r4, [r2]
   14400:	cmp	r4, #0
   14404:	mov	r5, r0
   14408:	beq	14498 <__assert_fail@plt+0x2e44>
   1440c:	bl	114f8 <__errno_location@plt>
   14410:	ldr	r6, [r0]
   14414:	mov	r0, r4
   14418:	bl	17118 <__assert_fail@plt+0x5ac4>
   1441c:	movw	r2, #41864	; 0xa388
   14420:	str	r5, [sp]
   14424:	movt	r2, #1
   14428:	mov	r1, r6
   1442c:	mov	r3, r0
   14430:	mov	r0, #0
   14434:	bl	1142c <error@plt>
   14438:	bl	144d8 <__assert_fail@plt+0x2e84>
   1443c:	movw	r3, #45412	; 0xb164
   14440:	movt	r3, #2
   14444:	ldr	r0, [r3]
   14448:	bl	11318 <_exit@plt>
   1444c:	mov	r1, #1
   14450:	mov	r2, #0
   14454:	mov	r3, #0
   14458:	str	r1, [sp]
   1445c:	bl	18038 <__assert_fail@plt+0x69e4>
   14460:	cmp	r0, #0
   14464:	ldr	r0, [r4]
   14468:	bne	143d4 <__assert_fail@plt+0x2d80>
   1446c:	bl	17f98 <__assert_fail@plt+0x6944>
   14470:	mov	r5, r0
   14474:	ldr	r0, [r4]
   14478:	bl	180e0 <__assert_fail@plt+0x6a8c>
   1447c:	cmp	r0, #0
   14480:	bne	143e0 <__assert_fail@plt+0x2d8c>
   14484:	cmp	r5, #0
   14488:	bne	143e0 <__assert_fail@plt+0x2d8c>
   1448c:	add	sp, sp, #8
   14490:	pop	{r4, r5, r6, lr}
   14494:	b	144d8 <__assert_fail@plt+0x2e84>
   14498:	bl	114f8 <__errno_location@plt>
   1449c:	mov	r3, r5
   144a0:	movw	r2, #41868	; 0xa38c
   144a4:	movt	r2, #1
   144a8:	ldr	r1, [r0]
   144ac:	mov	r0, r4
   144b0:	bl	1142c <error@plt>
   144b4:	b	14438 <__assert_fail@plt+0x2de4>
   144b8:	movw	r3, #45704	; 0xb288
   144bc:	movt	r3, #2
   144c0:	str	r0, [r3]
   144c4:	bx	lr
   144c8:	movw	r3, #45704	; 0xb288
   144cc:	movt	r3, #2
   144d0:	strb	r0, [r3, #4]
   144d4:	bx	lr
   144d8:	movw	r3, #45512	; 0xb1c8
   144dc:	movt	r3, #2
   144e0:	push	{r4, r5, r6, lr}
   144e4:	sub	sp, sp, #8
   144e8:	ldr	r0, [r3]
   144ec:	bl	180e0 <__assert_fail@plt+0x6a8c>
   144f0:	cmp	r0, #0
   144f4:	beq	1451c <__assert_fail@plt+0x2ec8>
   144f8:	movw	r4, #45704	; 0xb288
   144fc:	movt	r4, #2
   14500:	ldrb	r3, [r4, #4]
   14504:	cmp	r3, #0
   14508:	beq	1453c <__assert_fail@plt+0x2ee8>
   1450c:	bl	114f8 <__errno_location@plt>
   14510:	ldr	r3, [r0]
   14514:	cmp	r3, #32
   14518:	bne	1453c <__assert_fail@plt+0x2ee8>
   1451c:	movw	r3, #45500	; 0xb1bc
   14520:	movt	r3, #2
   14524:	ldr	r0, [r3]
   14528:	bl	180e0 <__assert_fail@plt+0x6a8c>
   1452c:	cmp	r0, #0
   14530:	bne	1458c <__assert_fail@plt+0x2f38>
   14534:	add	sp, sp, #8
   14538:	pop	{r4, r5, r6, pc}
   1453c:	movw	r1, #41872	; 0xa390
   14540:	mov	r0, #0
   14544:	movt	r1, #1
   14548:	mov	r2, #5
   1454c:	bl	1136c <dcgettext@plt>
   14550:	ldr	r4, [r4]
   14554:	cmp	r4, #0
   14558:	mov	r5, r0
   1455c:	beq	1459c <__assert_fail@plt+0x2f48>
   14560:	bl	114f8 <__errno_location@plt>
   14564:	ldr	r6, [r0]
   14568:	mov	r0, r4
   1456c:	bl	17118 <__assert_fail@plt+0x5ac4>
   14570:	movw	r2, #41864	; 0xa388
   14574:	str	r5, [sp]
   14578:	movt	r2, #1
   1457c:	mov	r1, r6
   14580:	mov	r3, r0
   14584:	mov	r0, #0
   14588:	bl	1142c <error@plt>
   1458c:	movw	r3, #45412	; 0xb164
   14590:	movt	r3, #2
   14594:	ldr	r0, [r3]
   14598:	bl	11318 <_exit@plt>
   1459c:	bl	114f8 <__errno_location@plt>
   145a0:	movw	r2, #41868	; 0xa38c
   145a4:	movt	r2, #1
   145a8:	mov	r3, r0
   145ac:	mov	r0, r4
   145b0:	ldr	r1, [r3]
   145b4:	mov	r3, r5
   145b8:	bl	1142c <error@plt>
   145bc:	b	1458c <__assert_fail@plt+0x2f38>
   145c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   145c4:	add	fp, sp, #28
   145c8:	sub	sp, sp, #8
   145cc:	movw	r6, #45488	; 0xb1b0
   145d0:	movt	r6, #2
   145d4:	mov	r7, r2
   145d8:	cmn	r2, #-1073741823	; 0xc0000001
   145dc:	ldr	r2, [r6]
   145e0:	mov	r5, r0
   145e4:	mov	r4, r1
   145e8:	mov	r8, r3
   145ec:	str	r2, [fp, #-32]	; 0xffffffe0
   145f0:	bls	14610 <__assert_fail@plt+0x2fbc>
   145f4:	mov	r0, #0
   145f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   145fc:	ldr	r3, [r6]
   14600:	cmp	r2, r3
   14604:	bne	14734 <__assert_fail@plt+0x30e0>
   14608:	sub	sp, fp, #28
   1460c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14610:	lsl	r0, r7, #2
   14614:	movw	r3, #4023	; 0xfb7
   14618:	cmp	r0, r3
   1461c:	bls	146e8 <__assert_fail@plt+0x3094>
   14620:	bl	18524 <__assert_fail@plt+0x6ed0>
   14624:	cmp	r0, #0
   14628:	beq	145f4 <__assert_fail@plt+0x2fa0>
   1462c:	cmp	r7, #2
   14630:	mov	r3, #1
   14634:	str	r3, [r0, #4]
   14638:	movhi	r9, r4
   1463c:	movhi	r2, r0
   14640:	movhi	ip, #0
   14644:	movhi	r3, #2
   14648:	bls	14694 <__assert_fail@plt+0x3040>
   1464c:	ldrb	r1, [r9, #1]!
   14650:	ldrb	lr, [r4, ip]
   14654:	cmp	lr, r1
   14658:	bne	14674 <__assert_fail@plt+0x3020>
   1465c:	b	146fc <__assert_fail@plt+0x30a8>
   14660:	ldr	lr, [r0, ip, lsl #2]
   14664:	rsb	ip, lr, ip
   14668:	ldrb	lr, [r4, ip]
   1466c:	cmp	lr, r1
   14670:	beq	146fc <__assert_fail@plt+0x30a8>
   14674:	cmp	ip, #0
   14678:	bne	14660 <__assert_fail@plt+0x300c>
   1467c:	mov	ip, #0
   14680:	str	r3, [r2, #8]
   14684:	add	r3, r3, #1
   14688:	add	r2, r2, #4
   1468c:	cmp	r3, r7
   14690:	bne	1464c <__assert_fail@plt+0x2ff8>
   14694:	mov	r2, #0
   14698:	str	r2, [r8]
   1469c:	ldrb	r3, [r5]
   146a0:	mov	ip, r5
   146a4:	cmp	r3, #0
   146a8:	beq	146dc <__assert_fail@plt+0x3088>
   146ac:	ldrb	r1, [r4, r2]
   146b0:	cmp	r1, r3
   146b4:	beq	1470c <__assert_fail@plt+0x30b8>
   146b8:	cmp	r2, #0
   146bc:	addeq	r5, r5, #1
   146c0:	ldrne	r1, [r0, r2, lsl #2]
   146c4:	ldrbeq	r3, [ip, #1]
   146c8:	addeq	ip, ip, #1
   146cc:	addne	r5, r5, r1
   146d0:	rsbne	r2, r1, r2
   146d4:	cmp	r3, #0
   146d8:	bne	146ac <__assert_fail@plt+0x3058>
   146dc:	bl	18588 <__assert_fail@plt+0x6f34>
   146e0:	mov	r0, #1
   146e4:	b	145f8 <__assert_fail@plt+0x2fa4>
   146e8:	add	r3, r0, #22
   146ec:	bic	r3, r3, #7
   146f0:	sub	sp, sp, r3
   146f4:	add	r0, sp, #8
   146f8:	b	14624 <__assert_fail@plt+0x2fd0>
   146fc:	add	ip, ip, #1
   14700:	rsb	r1, ip, r3
   14704:	str	r1, [r2, #8]
   14708:	b	14684 <__assert_fail@plt+0x3030>
   1470c:	add	r2, r2, #1
   14710:	add	r1, ip, #1
   14714:	cmp	r7, r2
   14718:	ldrbne	r3, [ip, #1]
   1471c:	movne	ip, r1
   14720:	bne	146a4 <__assert_fail@plt+0x3050>
   14724:	str	r5, [r8]
   14728:	bl	18588 <__assert_fail@plt+0x6f34>
   1472c:	mov	r0, #1
   14730:	b	145f8 <__assert_fail@plt+0x2fa4>
   14734:	bl	11378 <__stack_chk_fail@plt>
   14738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1473c:	add	fp, sp, #32
   14740:	sub	sp, sp, #204	; 0xcc
   14744:	movw	r3, #45488	; 0xb1b0
   14748:	movt	r3, #2
   1474c:	str	r3, [fp, #-228]	; 0xffffff1c
   14750:	mov	r4, r1
   14754:	ldr	r3, [r3]
   14758:	str	r0, [fp, #-220]	; 0xffffff24
   1475c:	mov	r0, r1
   14760:	str	r2, [fp, #-232]	; 0xffffff18
   14764:	str	r3, [fp, #-40]	; 0xffffffd8
   14768:	bl	186ac <__assert_fail@plt+0x7058>
   1476c:	movw	r3, #29789	; 0x745d
   14770:	movt	r3, #1489	; 0x5d1
   14774:	cmp	r0, r3
   14778:	str	r0, [fp, #-216]	; 0xffffff28
   1477c:	bls	147a0 <__assert_fail@plt+0x314c>
   14780:	mov	r0, #0
   14784:	ldr	r1, [fp, #-228]	; 0xffffff1c
   14788:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1478c:	ldr	r3, [r1]
   14790:	cmp	r2, r3
   14794:	bne	14f78 <__assert_fail@plt+0x3924>
   14798:	sub	sp, fp, #32
   1479c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147a0:	ldr	r1, [fp, #-216]	; 0xffffff28
   147a4:	mov	r0, #44	; 0x2c
   147a8:	movw	r3, #4023	; 0xfb7
   147ac:	mul	r0, r0, r1
   147b0:	cmp	r0, r3
   147b4:	bls	14b18 <__assert_fail@plt+0x34c4>
   147b8:	bl	18524 <__assert_fail@plt+0x6ed0>
   147bc:	str	r0, [fp, #-224]	; 0xffffff20
   147c0:	ldr	r3, [fp, #-224]	; 0xffffff20
   147c4:	cmp	r3, #0
   147c8:	beq	14780 <__assert_fail@plt+0x312c>
   147cc:	ldr	r1, [fp, #-216]	; 0xffffff28
   147d0:	mov	r2, #0
   147d4:	add	sl, r3, #16
   147d8:	strb	r2, [fp, #-208]	; 0xffffff30
   147dc:	str	r4, [fp, #-192]	; 0xffffff40
   147e0:	mov	r7, r4
   147e4:	add	r9, r1, r1, lsl #2
   147e8:	movw	r8, #43188	; 0xa8b4
   147ec:	str	r2, [fp, #-200]	; 0xffffff38
   147f0:	mov	r5, r2
   147f4:	add	r9, r3, r9, lsl #3
   147f8:	ldrb	r3, [fp, #-208]	; 0xffffff30
   147fc:	str	r2, [fp, #-204]	; 0xffffff34
   14800:	movt	r8, #1
   14804:	cmp	r3, #0
   14808:	strb	r2, [fp, #-196]	; 0xffffff3c
   1480c:	mov	r4, #1
   14810:	sub	r6, fp, #176	; 0xb0
   14814:	bne	14b94 <__assert_fail@plt+0x3540>
   14818:	ldrb	r3, [r7]
   1481c:	and	r2, r3, #31
   14820:	lsr	r3, r3, #5
   14824:	ldr	r3, [r8, r3, lsl #2]
   14828:	lsr	r3, r3, r2
   1482c:	tst	r3, #1
   14830:	beq	14bf8 <__assert_fail@plt+0x35a4>
   14834:	str	r4, [fp, #-188]	; 0xffffff44
   14838:	ldrb	r7, [r7]
   1483c:	strb	r4, [fp, #-184]	; 0xffffff48
   14840:	str	r7, [fp, #-180]	; 0xffffff4c
   14844:	cmp	r7, #0
   14848:	strb	r4, [fp, #-196]	; 0xffffff3c
   1484c:	mov	r3, #1
   14850:	bne	14b48 <__assert_fail@plt+0x34f4>
   14854:	ldr	r1, [fp, #-216]	; 0xffffff28
   14858:	str	r3, [r9, #4]
   1485c:	cmp	r1, #2
   14860:	bls	14924 <__assert_fail@plt+0x32d0>
   14864:	mov	r4, r7
   14868:	ldr	r7, [fp, #-224]	; 0xffffff20
   1486c:	mov	r6, r9
   14870:	mov	sl, r9
   14874:	mov	r5, #2
   14878:	mov	r9, r7
   1487c:	ldrb	r8, [r7, #48]	; 0x30
   14880:	b	148bc <__assert_fail@plt+0x3268>
   14884:	ldrb	r2, [r3, #8]
   14888:	cmp	r2, #0
   1488c:	beq	148cc <__assert_fail@plt+0x3278>
   14890:	ldr	r0, [r7, #52]	; 0x34
   14894:	ldr	r3, [r3, #12]
   14898:	subs	r1, r0, r3
   1489c:	rsbs	r0, r1, #0
   148a0:	adcs	r0, r0, r1
   148a4:	cmp	r0, #0
   148a8:	bne	148fc <__assert_fail@plt+0x32a8>
   148ac:	cmp	r4, #0
   148b0:	beq	14dbc <__assert_fail@plt+0x3768>
   148b4:	ldr	r3, [sl, r4, lsl #2]
   148b8:	rsb	r4, r3, r4
   148bc:	add	r3, r4, r4, lsl #2
   148c0:	cmp	r8, #0
   148c4:	add	r3, r9, r3, lsl #3
   148c8:	bne	14884 <__assert_fail@plt+0x3230>
   148cc:	ldr	r2, [r7, #44]	; 0x2c
   148d0:	ldr	r1, [r3, #4]
   148d4:	cmp	r2, r1
   148d8:	movne	r0, #0
   148dc:	bne	148a4 <__assert_fail@plt+0x3250>
   148e0:	ldr	r1, [r3]
   148e4:	ldr	r0, [r7, #40]	; 0x28
   148e8:	bl	11360 <memcmp@plt>
   148ec:	rsbs	r0, r0, #1
   148f0:	movcc	r0, #0
   148f4:	cmp	r0, #0
   148f8:	beq	148ac <__assert_fail@plt+0x3258>
   148fc:	add	r4, r4, #1
   14900:	rsb	r3, r4, r5
   14904:	str	r3, [r6, #8]
   14908:	ldr	r2, [fp, #-216]	; 0xffffff28
   1490c:	add	r5, r5, #1
   14910:	add	r7, r7, #40	; 0x28
   14914:	add	r6, r6, #4
   14918:	cmp	r5, r2
   1491c:	bne	1487c <__assert_fail@plt+0x3228>
   14920:	mov	r9, sl
   14924:	ldr	r1, [fp, #-220]	; 0xffffff24
   14928:	mov	r3, #0
   1492c:	ldr	r2, [fp, #-232]	; 0xffffff18
   14930:	movw	r7, #43188	; 0xa8b4
   14934:	movt	r7, #1
   14938:	mov	r4, r3
   1493c:	mov	r8, r3
   14940:	mov	r6, r3
   14944:	mov	r5, #1
   14948:	str	r1, [fp, #-136]	; 0xffffff78
   1494c:	str	r1, [fp, #-80]	; 0xffffffb0
   14950:	str	r3, [r2]
   14954:	strb	r3, [fp, #-152]	; 0xffffff68
   14958:	str	r3, [fp, #-148]	; 0xffffff6c
   1495c:	strb	r3, [fp, #-140]	; 0xffffff74
   14960:	strb	r3, [fp, #-96]	; 0xffffffa0
   14964:	str	r3, [fp, #-92]	; 0xffffffa4
   14968:	strb	r3, [fp, #-84]	; 0xffffffac
   1496c:	str	r3, [fp, #-144]	; 0xffffff70
   14970:	str	r3, [fp, #-88]	; 0xffffffa8
   14974:	str	r9, [fp, #-220]	; 0xffffff24
   14978:	cmp	r4, #0
   1497c:	beq	149e0 <__assert_fail@plt+0x338c>
   14980:	ldrb	r4, [fp, #-72]	; 0xffffffb8
   14984:	cmp	r4, #0
   14988:	bne	14a2c <__assert_fail@plt+0x33d8>
   1498c:	add	r1, r8, r8, lsl #2
   14990:	ldr	r2, [fp, #-224]	; 0xffffff20
   14994:	add	r1, r2, r1, lsl #3
   14998:	ldr	r2, [r1, #4]
   1499c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   149a0:	cmp	r2, r3
   149a4:	movne	r0, #0
   149a8:	beq	14da4 <__assert_fail@plt+0x3750>
   149ac:	mov	r3, r0
   149b0:	cmp	r3, #0
   149b4:	beq	14a68 <__assert_fail@plt+0x3414>
   149b8:	ldr	r3, [fp, #-216]	; 0xffffff28
   149bc:	add	r8, r8, #1
   149c0:	ldr	sl, [fp, #-80]	; 0xffffffb0
   149c4:	cmp	r3, r8
   149c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   149cc:	strb	r6, [fp, #-84]	; 0xffffffac
   149d0:	add	r3, sl, r2
   149d4:	str	r3, [fp, #-80]	; 0xffffffb0
   149d8:	beq	14f28 <__assert_fail@plt+0x38d4>
   149dc:	mov	r4, #0
   149e0:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   149e4:	ldr	sl, [fp, #-80]	; 0xffffffb0
   149e8:	cmp	r3, #0
   149ec:	bne	14cd0 <__assert_fail@plt+0x367c>
   149f0:	ldrb	r2, [sl]
   149f4:	and	r1, r2, #31
   149f8:	lsr	r2, r2, #5
   149fc:	ldr	r2, [r7, r2, lsl #2]
   14a00:	lsr	r2, r2, r1
   14a04:	tst	r2, #1
   14a08:	beq	14cbc <__assert_fail@plt+0x3668>
   14a0c:	str	r5, [fp, #-76]	; 0xffffffb4
   14a10:	mov	r4, #1
   14a14:	ldrb	r3, [sl]
   14a18:	strb	r5, [fp, #-72]	; 0xffffffb8
   14a1c:	str	r3, [fp, #-68]	; 0xffffffbc
   14a20:	cmp	r4, #0
   14a24:	strb	r5, [fp, #-84]	; 0xffffffac
   14a28:	beq	1498c <__assert_fail@plt+0x3338>
   14a2c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14a30:	cmp	r2, #0
   14a34:	beq	14f34 <__assert_fail@plt+0x38e0>
   14a38:	ldr	r3, [fp, #-224]	; 0xffffff20
   14a3c:	add	r1, r8, r8, lsl #2
   14a40:	add	r1, r3, r1, lsl #3
   14a44:	ldrb	r3, [r1, #8]
   14a48:	cmp	r3, #0
   14a4c:	beq	14998 <__assert_fail@plt+0x3344>
   14a50:	ldr	r3, [r1, #12]
   14a54:	subs	r2, r2, r3
   14a58:	rsbs	r3, r2, #0
   14a5c:	adcs	r3, r3, r2
   14a60:	cmp	r3, #0
   14a64:	bne	149b8 <__assert_fail@plt+0x3364>
   14a68:	cmp	r8, #0
   14a6c:	beq	14d54 <__assert_fail@plt+0x3700>
   14a70:	ldr	r2, [fp, #-220]	; 0xffffff24
   14a74:	ldr	r4, [r2, r8, lsl #2]
   14a78:	cmp	r4, #0
   14a7c:	rsb	r8, r4, r8
   14a80:	beq	14d9c <__assert_fail@plt+0x3748>
   14a84:	ldrb	sl, [fp, #-140]	; 0xffffff74
   14a88:	cmp	sl, #0
   14a8c:	beq	14abc <__assert_fail@plt+0x3468>
   14a90:	ldrb	sl, [fp, #-128]	; 0xffffff80
   14a94:	cmp	sl, #0
   14a98:	bne	14b08 <__assert_fail@plt+0x34b4>
   14a9c:	ldr	r2, [fp, #-136]	; 0xffffff78
   14aa0:	subs	r4, r4, #1
   14aa4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   14aa8:	strb	r6, [fp, #-140]	; 0xffffff74
   14aac:	movne	sl, #0
   14ab0:	add	r3, r2, r3
   14ab4:	str	r3, [fp, #-136]	; 0xffffff78
   14ab8:	beq	14d9c <__assert_fail@plt+0x3748>
   14abc:	ldrb	r3, [fp, #-152]	; 0xffffff68
   14ac0:	ldr	r9, [fp, #-136]	; 0xffffff78
   14ac4:	cmp	r3, #0
   14ac8:	bne	14c24 <__assert_fail@plt+0x35d0>
   14acc:	ldrb	r2, [r9]
   14ad0:	and	r1, r2, #31
   14ad4:	lsr	r2, r2, #5
   14ad8:	ldr	r2, [r7, r2, lsl #2]
   14adc:	lsr	r2, r2, r1
   14ae0:	tst	r2, #1
   14ae4:	beq	14c10 <__assert_fail@plt+0x35bc>
   14ae8:	str	r5, [fp, #-132]	; 0xffffff7c
   14aec:	mov	sl, #1
   14af0:	ldrb	r3, [r9]
   14af4:	strb	r5, [fp, #-128]	; 0xffffff80
   14af8:	str	r3, [fp, #-124]	; 0xffffff84
   14afc:	cmp	sl, #0
   14b00:	strb	r5, [fp, #-140]	; 0xffffff74
   14b04:	beq	14a9c <__assert_fail@plt+0x3448>
   14b08:	ldr	r3, [fp, #-124]	; 0xffffff84
   14b0c:	cmp	r3, #0
   14b10:	bne	14a9c <__assert_fail@plt+0x3448>
   14b14:	bl	11630 <abort@plt>
   14b18:	add	r3, r0, #22
   14b1c:	bic	r3, r3, #7
   14b20:	sub	sp, sp, r3
   14b24:	add	r2, sp, #8
   14b28:	str	r2, [fp, #-224]	; 0xffffff20
   14b2c:	b	147c0 <__assert_fail@plt+0x316c>
   14b30:	ldr	r0, [fp, #-192]	; 0xffffff40
   14b34:	bl	114bc <strlen@plt>
   14b38:	strb	r5, [fp, #-184]	; 0xffffff48
   14b3c:	str	r0, [fp, #-188]	; 0xffffff44
   14b40:	mov	r3, #0
   14b44:	strb	r4, [fp, #-196]	; 0xffffff3c
   14b48:	ldr	r2, [fp, #-192]	; 0xffffff40
   14b4c:	cmp	r2, r6
   14b50:	strne	r2, [sl, #-16]
   14b54:	beq	14e60 <__assert_fail@plt+0x380c>
   14b58:	ldr	r2, [fp, #-188]	; 0xffffff44
   14b5c:	cmp	r3, #0
   14b60:	strb	r3, [sl, #-8]
   14b64:	add	sl, sl, #40	; 0x28
   14b68:	str	r2, [sl, #-52]	; 0xffffffcc
   14b6c:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   14b70:	strne	r3, [sl, #-44]	; 0xffffffd4
   14b74:	ldr	r7, [fp, #-192]	; 0xffffff40
   14b78:	ldr	r3, [fp, #-188]	; 0xffffff44
   14b7c:	strb	r5, [fp, #-196]	; 0xffffff3c
   14b80:	add	r7, r7, r3
   14b84:	ldrb	r3, [fp, #-208]	; 0xffffff30
   14b88:	str	r7, [fp, #-192]	; 0xffffff40
   14b8c:	cmp	r3, #0
   14b90:	beq	14818 <__assert_fail@plt+0x31c4>
   14b94:	bl	113fc <__ctype_get_mb_cur_max@plt>
   14b98:	mov	r1, r0
   14b9c:	mov	r0, r7
   14ba0:	bl	17284 <__assert_fail@plt+0x5c30>
   14ba4:	mov	r1, r7
   14ba8:	sub	r3, fp, #204	; 0xcc
   14bac:	mov	r2, r0
   14bb0:	sub	r0, fp, #180	; 0xb4
   14bb4:	bl	11420 <mbrtowc@plt>
   14bb8:	cmn	r0, #1
   14bbc:	str	r0, [fp, #-188]	; 0xffffff44
   14bc0:	strbeq	r5, [fp, #-184]	; 0xffffff48
   14bc4:	streq	r4, [fp, #-188]	; 0xffffff44
   14bc8:	beq	14b40 <__assert_fail@plt+0x34ec>
   14bcc:	cmn	r0, #2
   14bd0:	beq	14b30 <__assert_fail@plt+0x34dc>
   14bd4:	cmp	r0, #0
   14bd8:	beq	14dc4 <__assert_fail@plt+0x3770>
   14bdc:	ldr	r7, [fp, #-180]	; 0xffffff4c
   14be0:	sub	r0, fp, #204	; 0xcc
   14be4:	strb	r4, [fp, #-184]	; 0xffffff48
   14be8:	bl	1133c <mbsinit@plt>
   14bec:	cmp	r0, #0
   14bf0:	strbne	r5, [fp, #-208]	; 0xffffff30
   14bf4:	b	14844 <__assert_fail@plt+0x31f0>
   14bf8:	sub	r0, fp, #204	; 0xcc
   14bfc:	bl	1133c <mbsinit@plt>
   14c00:	cmp	r0, #0
   14c04:	beq	14f58 <__assert_fail@plt+0x3904>
   14c08:	strb	r4, [fp, #-208]	; 0xffffff30
   14c0c:	b	14b94 <__assert_fail@plt+0x3540>
   14c10:	sub	r0, fp, #148	; 0x94
   14c14:	bl	1133c <mbsinit@plt>
   14c18:	cmp	r0, #0
   14c1c:	beq	14f58 <__assert_fail@plt+0x3904>
   14c20:	strb	r5, [fp, #-152]	; 0xffffff68
   14c24:	bl	113fc <__ctype_get_mb_cur_max@plt>
   14c28:	mov	r1, r0
   14c2c:	mov	r0, r9
   14c30:	bl	17284 <__assert_fail@plt+0x5c30>
   14c34:	mov	r1, r9
   14c38:	sub	r3, fp, #148	; 0x94
   14c3c:	mov	r2, r0
   14c40:	sub	r0, fp, #124	; 0x7c
   14c44:	bl	11420 <mbrtowc@plt>
   14c48:	cmn	r0, #1
   14c4c:	str	r0, [fp, #-132]	; 0xffffff7c
   14c50:	strbeq	r6, [fp, #-128]	; 0xffffff80
   14c54:	streq	r5, [fp, #-132]	; 0xffffff7c
   14c58:	beq	14afc <__assert_fail@plt+0x34a8>
   14c5c:	cmn	r0, #2
   14c60:	beq	14ca8 <__assert_fail@plt+0x3654>
   14c64:	cmp	r0, #0
   14c68:	bne	14c8c <__assert_fail@plt+0x3638>
   14c6c:	ldr	r3, [fp, #-136]	; 0xffffff78
   14c70:	str	r5, [fp, #-132]	; 0xffffff7c
   14c74:	ldrb	r3, [r3]
   14c78:	cmp	r3, #0
   14c7c:	bne	14f7c <__assert_fail@plt+0x3928>
   14c80:	ldr	r3, [fp, #-124]	; 0xffffff84
   14c84:	cmp	r3, #0
   14c88:	bne	14de4 <__assert_fail@plt+0x3790>
   14c8c:	sub	r0, fp, #148	; 0x94
   14c90:	strb	r5, [fp, #-128]	; 0xffffff80
   14c94:	bl	1133c <mbsinit@plt>
   14c98:	mov	sl, #1
   14c9c:	cmp	r0, #0
   14ca0:	strbne	r6, [fp, #-152]	; 0xffffff68
   14ca4:	b	14afc <__assert_fail@plt+0x34a8>
   14ca8:	ldr	r0, [fp, #-136]	; 0xffffff78
   14cac:	bl	114bc <strlen@plt>
   14cb0:	strb	r6, [fp, #-128]	; 0xffffff80
   14cb4:	str	r0, [fp, #-132]	; 0xffffff7c
   14cb8:	b	14afc <__assert_fail@plt+0x34a8>
   14cbc:	sub	r0, fp, #92	; 0x5c
   14cc0:	bl	1133c <mbsinit@plt>
   14cc4:	cmp	r0, #0
   14cc8:	beq	14f58 <__assert_fail@plt+0x3904>
   14ccc:	strb	r5, [fp, #-96]	; 0xffffffa0
   14cd0:	bl	113fc <__ctype_get_mb_cur_max@plt>
   14cd4:	mov	r1, r0
   14cd8:	mov	r0, sl
   14cdc:	bl	17284 <__assert_fail@plt+0x5c30>
   14ce0:	mov	r1, sl
   14ce4:	sub	r3, fp, #92	; 0x5c
   14ce8:	mov	r2, r0
   14cec:	sub	r0, fp, #68	; 0x44
   14cf0:	bl	11420 <mbrtowc@plt>
   14cf4:	cmn	r0, #1
   14cf8:	str	r0, [fp, #-76]	; 0xffffffb4
   14cfc:	strbeq	r6, [fp, #-72]	; 0xffffffb8
   14d00:	streq	r5, [fp, #-76]	; 0xffffffb4
   14d04:	beq	14a20 <__assert_fail@plt+0x33cc>
   14d08:	cmn	r0, #2
   14d0c:	beq	14f14 <__assert_fail@plt+0x38c0>
   14d10:	cmp	r0, #0
   14d14:	bne	14d38 <__assert_fail@plt+0x36e4>
   14d18:	ldr	sl, [fp, #-80]	; 0xffffffb0
   14d1c:	str	r5, [fp, #-76]	; 0xffffffb4
   14d20:	ldrb	r3, [sl]
   14d24:	cmp	r3, #0
   14d28:	bne	14f7c <__assert_fail@plt+0x3928>
   14d2c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14d30:	cmp	r3, #0
   14d34:	bne	14de4 <__assert_fail@plt+0x3790>
   14d38:	sub	r0, fp, #92	; 0x5c
   14d3c:	strb	r5, [fp, #-72]	; 0xffffffb8
   14d40:	bl	1133c <mbsinit@plt>
   14d44:	mov	r4, #1
   14d48:	cmp	r0, #0
   14d4c:	strbne	r6, [fp, #-96]	; 0xffffffa0
   14d50:	b	14a20 <__assert_fail@plt+0x33cc>
   14d54:	ldrb	r4, [fp, #-140]	; 0xffffff74
   14d58:	cmp	r4, #0
   14d5c:	beq	14e04 <__assert_fail@plt+0x37b0>
   14d60:	ldrb	r4, [fp, #-128]	; 0xffffff80
   14d64:	cmp	r4, #0
   14d68:	bne	14e50 <__assert_fail@plt+0x37fc>
   14d6c:	ldr	r1, [fp, #-136]	; 0xffffff78
   14d70:	mov	r4, #0
   14d74:	ldr	r2, [fp, #-132]	; 0xffffff7c
   14d78:	ldr	sl, [fp, #-80]	; 0xffffffb0
   14d7c:	add	r2, r1, r2
   14d80:	str	r2, [fp, #-136]	; 0xffffff78
   14d84:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14d88:	strb	r6, [fp, #-140]	; 0xffffff74
   14d8c:	add	r3, sl, r2
   14d90:	strb	r6, [fp, #-84]	; 0xffffffac
   14d94:	str	r3, [fp, #-80]	; 0xffffffb0
   14d98:	b	149e0 <__assert_fail@plt+0x338c>
   14d9c:	ldrb	r4, [fp, #-84]	; 0xffffffac
   14da0:	b	14978 <__assert_fail@plt+0x3324>
   14da4:	ldr	r0, [r1]
   14da8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14dac:	bl	11360 <memcmp@plt>
   14db0:	rsbs	r0, r0, #1
   14db4:	movcc	r0, #0
   14db8:	b	149ac <__assert_fail@plt+0x3358>
   14dbc:	str	r5, [r6, #8]
   14dc0:	b	14908 <__assert_fail@plt+0x32b4>
   14dc4:	ldr	r3, [fp, #-192]	; 0xffffff40
   14dc8:	str	r4, [fp, #-188]	; 0xffffff44
   14dcc:	ldrb	r3, [r3]
   14dd0:	cmp	r3, #0
   14dd4:	bne	14f7c <__assert_fail@plt+0x3928>
   14dd8:	ldr	r7, [fp, #-180]	; 0xffffff4c
   14ddc:	cmp	r7, #0
   14de0:	beq	14be0 <__assert_fail@plt+0x358c>
   14de4:	movw	r0, #41964	; 0xa3ec
   14de8:	movw	r1, #41928	; 0xa3c8
   14dec:	movw	r3, #41884	; 0xa39c
   14df0:	movt	r0, #1
   14df4:	movt	r1, #1
   14df8:	mov	r2, #176	; 0xb0
   14dfc:	movt	r3, #1
   14e00:	bl	11654 <__assert_fail@plt>
   14e04:	ldrb	r3, [fp, #-152]	; 0xffffff68
   14e08:	ldr	sl, [fp, #-136]	; 0xffffff78
   14e0c:	cmp	r3, #0
   14e10:	bne	14e90 <__assert_fail@plt+0x383c>
   14e14:	ldrb	r2, [sl]
   14e18:	and	r1, r2, #31
   14e1c:	lsr	r2, r2, #5
   14e20:	ldr	r2, [r7, r2, lsl #2]
   14e24:	lsr	r2, r2, r1
   14e28:	tst	r2, #1
   14e2c:	beq	14e7c <__assert_fail@plt+0x3828>
   14e30:	str	r5, [fp, #-132]	; 0xffffff7c
   14e34:	mov	r4, #1
   14e38:	ldrb	r3, [sl]
   14e3c:	strb	r5, [fp, #-128]	; 0xffffff80
   14e40:	str	r3, [fp, #-124]	; 0xffffff84
   14e44:	cmp	r4, #0
   14e48:	strb	r5, [fp, #-140]	; 0xffffff74
   14e4c:	beq	14d6c <__assert_fail@plt+0x3718>
   14e50:	ldr	r3, [fp, #-124]	; 0xffffff84
   14e54:	cmp	r3, #0
   14e58:	bne	14d6c <__assert_fail@plt+0x3718>
   14e5c:	b	14b14 <__assert_fail@plt+0x34c0>
   14e60:	mov	r0, sl
   14e64:	mov	r1, r6
   14e68:	ldr	r2, [fp, #-188]	; 0xffffff44
   14e6c:	bl	11324 <memcpy@plt>
   14e70:	str	sl, [sl, #-16]
   14e74:	ldrb	r3, [fp, #-184]	; 0xffffff48
   14e78:	b	14b58 <__assert_fail@plt+0x3504>
   14e7c:	sub	r0, fp, #148	; 0x94
   14e80:	bl	1133c <mbsinit@plt>
   14e84:	cmp	r0, #0
   14e88:	beq	14f58 <__assert_fail@plt+0x3904>
   14e8c:	strb	r5, [fp, #-152]	; 0xffffff68
   14e90:	bl	113fc <__ctype_get_mb_cur_max@plt>
   14e94:	mov	r1, r0
   14e98:	mov	r0, sl
   14e9c:	bl	17284 <__assert_fail@plt+0x5c30>
   14ea0:	mov	r1, sl
   14ea4:	sub	r3, fp, #148	; 0x94
   14ea8:	mov	r2, r0
   14eac:	sub	r0, fp, #124	; 0x7c
   14eb0:	bl	11420 <mbrtowc@plt>
   14eb4:	cmn	r0, #1
   14eb8:	str	r0, [fp, #-132]	; 0xffffff7c
   14ebc:	strbeq	r6, [fp, #-128]	; 0xffffff80
   14ec0:	streq	r5, [fp, #-132]	; 0xffffff7c
   14ec4:	beq	14e44 <__assert_fail@plt+0x37f0>
   14ec8:	cmn	r0, #2
   14ecc:	beq	14f44 <__assert_fail@plt+0x38f0>
   14ed0:	cmp	r0, #0
   14ed4:	bne	14ef8 <__assert_fail@plt+0x38a4>
   14ed8:	ldr	r3, [fp, #-136]	; 0xffffff78
   14edc:	str	r5, [fp, #-132]	; 0xffffff7c
   14ee0:	ldrb	r3, [r3]
   14ee4:	cmp	r3, #0
   14ee8:	bne	14f7c <__assert_fail@plt+0x3928>
   14eec:	ldr	r3, [fp, #-124]	; 0xffffff84
   14ef0:	cmp	r3, #0
   14ef4:	bne	14de4 <__assert_fail@plt+0x3790>
   14ef8:	sub	r0, fp, #148	; 0x94
   14efc:	strb	r5, [fp, #-128]	; 0xffffff80
   14f00:	bl	1133c <mbsinit@plt>
   14f04:	mov	r4, #1
   14f08:	cmp	r0, #0
   14f0c:	strbne	r6, [fp, #-152]	; 0xffffff68
   14f10:	b	14e44 <__assert_fail@plt+0x37f0>
   14f14:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14f18:	bl	114bc <strlen@plt>
   14f1c:	strb	r6, [fp, #-72]	; 0xffffffb8
   14f20:	str	r0, [fp, #-76]	; 0xffffffb4
   14f24:	b	14a20 <__assert_fail@plt+0x33cc>
   14f28:	ldr	r3, [fp, #-136]	; 0xffffff78
   14f2c:	ldr	r1, [fp, #-232]	; 0xffffff18
   14f30:	str	r3, [r1]
   14f34:	ldr	r0, [fp, #-224]	; 0xffffff20
   14f38:	bl	18588 <__assert_fail@plt+0x6f34>
   14f3c:	mov	r0, #1
   14f40:	b	14784 <__assert_fail@plt+0x3130>
   14f44:	ldr	r0, [fp, #-136]	; 0xffffff78
   14f48:	bl	114bc <strlen@plt>
   14f4c:	strb	r6, [fp, #-128]	; 0xffffff80
   14f50:	str	r0, [fp, #-132]	; 0xffffff7c
   14f54:	b	14e44 <__assert_fail@plt+0x37f0>
   14f58:	movw	r0, #41904	; 0xa3b0
   14f5c:	movw	r1, #41928	; 0xa3c8
   14f60:	movw	r3, #41884	; 0xa39c
   14f64:	movt	r0, #1
   14f68:	movt	r1, #1
   14f6c:	mov	r2, #147	; 0x93
   14f70:	movt	r3, #1
   14f74:	bl	11654 <__assert_fail@plt>
   14f78:	bl	11378 <__stack_chk_fail@plt>
   14f7c:	movw	r0, #41940	; 0xa3d4
   14f80:	movw	r1, #41928	; 0xa3c8
   14f84:	movw	r3, #41884	; 0xa39c
   14f88:	movt	r0, #1
   14f8c:	movt	r1, #1
   14f90:	mov	r2, #175	; 0xaf
   14f94:	movt	r3, #1
   14f98:	bl	11654 <__assert_fail@plt>
   14f9c:	movw	r2, #45488	; 0xb1b0
   14fa0:	movt	r2, #2
   14fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa8:	sub	sp, sp, #316	; 0x13c
   14fac:	ldr	r3, [r2]
   14fb0:	mov	r8, r1
   14fb4:	str	r2, [sp]
   14fb8:	str	r0, [sp, #8]
   14fbc:	str	r3, [sp, #308]	; 0x134
   14fc0:	bl	113fc <__ctype_get_mb_cur_max@plt>
   14fc4:	cmp	r0, #1
   14fc8:	bls	1535c <__assert_fail@plt+0x3d08>
   14fcc:	ldrb	r2, [r8]
   14fd0:	movw	r7, #43188	; 0xa8b4
   14fd4:	movt	r7, #1
   14fd8:	mov	r3, #0
   14fdc:	and	r1, r2, #31
   14fe0:	str	r8, [sp, #44]	; 0x2c
   14fe4:	lsr	r0, r2, #5
   14fe8:	str	r3, [sp, #36]	; 0x24
   14fec:	strb	r3, [sp, #28]
   14ff0:	ldr	r0, [r7, r0, lsl #2]
   14ff4:	str	r3, [sp, #32]
   14ff8:	strb	r3, [sp, #40]	; 0x28
   14ffc:	lsr	r1, r0, r1
   15000:	ands	r5, r1, #1
   15004:	beq	152ac <__assert_fail@plt+0x3c58>
   15008:	mov	r4, r2
   1500c:	cmp	r4, #0
   15010:	mov	r3, #1
   15014:	str	r2, [sp, #56]	; 0x38
   15018:	str	r3, [sp, #48]	; 0x30
   1501c:	strb	r3, [sp, #52]	; 0x34
   15020:	mov	r3, #1
   15024:	strb	r3, [sp, #40]	; 0x28
   15028:	beq	1533c <__assert_fail@plt+0x3ce8>
   1502c:	mov	r3, #0
   15030:	mov	r2, #1
   15034:	strb	r3, [sp, #140]	; 0x8c
   15038:	mov	r9, r3
   1503c:	str	r2, [sp, #16]
   15040:	mov	r6, r3
   15044:	ldrb	r2, [sp, #140]	; 0x8c
   15048:	mov	r4, #1
   1504c:	ldr	r1, [sp, #8]
   15050:	cmp	r2, #0
   15054:	str	r3, [sp, #12]
   15058:	str	r8, [sp, #100]	; 0x64
   1505c:	str	r1, [sp, #156]	; 0x9c
   15060:	mov	fp, r1
   15064:	str	r3, [sp, #4]
   15068:	strb	r3, [sp, #84]	; 0x54
   1506c:	str	r3, [sp, #88]	; 0x58
   15070:	strb	r3, [sp, #96]	; 0x60
   15074:	str	r3, [sp, #144]	; 0x90
   15078:	strb	r3, [sp, #152]	; 0x98
   1507c:	str	r3, [sp, #92]	; 0x5c
   15080:	str	r3, [sp, #148]	; 0x94
   15084:	str	r8, [sp, #20]
   15088:	bne	15238 <__assert_fail@plt+0x3be4>
   1508c:	ldrb	r2, [fp]
   15090:	and	r1, r2, #31
   15094:	lsr	r2, r2, #5
   15098:	ldr	r2, [r7, r2, lsl #2]
   1509c:	lsr	r2, r2, r1
   150a0:	tst	r2, #1
   150a4:	beq	1549c <__assert_fail@plt+0x3e48>
   150a8:	str	r4, [sp, #160]	; 0xa0
   150ac:	ldrb	r5, [fp]
   150b0:	strb	r4, [sp, #164]	; 0xa4
   150b4:	cmp	r5, #0
   150b8:	strb	r4, [sp, #152]	; 0x98
   150bc:	str	r5, [sp, #168]	; 0xa8
   150c0:	beq	152a4 <__assert_fail@plt+0x3c50>
   150c4:	mov	r3, #1
   150c8:	ldr	r5, [sp, #16]
   150cc:	cmp	r9, #9
   150d0:	movls	r5, #0
   150d4:	andhi	r5, r5, #1
   150d8:	cmp	r5, #0
   150dc:	beq	151d8 <__assert_fail@plt+0x3b84>
   150e0:	ldr	r1, [sp, #4]
   150e4:	add	r2, r9, r9, lsl #2
   150e8:	cmp	r1, r2
   150ec:	bcc	1565c <__assert_fail@plt+0x4008>
   150f0:	ldr	r2, [sp, #12]
   150f4:	subs	fp, r1, r2
   150f8:	beq	1518c <__assert_fail@plt+0x3b38>
   150fc:	ldrb	r8, [sp, #96]	; 0x60
   15100:	cmp	r8, #0
   15104:	beq	15134 <__assert_fail@plt+0x3ae0>
   15108:	ldrb	r8, [sp, #108]	; 0x6c
   1510c:	cmp	r8, #0
   15110:	bne	15180 <__assert_fail@plt+0x3b2c>
   15114:	ldr	r2, [sp, #100]	; 0x64
   15118:	subs	fp, fp, #1
   1511c:	ldr	r3, [sp, #104]	; 0x68
   15120:	strb	r6, [sp, #96]	; 0x60
   15124:	add	r8, r2, r3
   15128:	str	r8, [sp, #100]	; 0x64
   1512c:	beq	15728 <__assert_fail@plt+0x40d4>
   15130:	mov	r8, #0
   15134:	ldrb	r3, [sp, #84]	; 0x54
   15138:	ldr	sl, [sp, #100]	; 0x64
   1513c:	cmp	r3, #0
   15140:	bne	15500 <__assert_fail@plt+0x3eac>
   15144:	ldrb	r2, [sl]
   15148:	and	r1, r2, #31
   1514c:	lsr	r2, r2, #5
   15150:	ldr	r2, [r7, r2, lsl #2]
   15154:	lsr	r2, r2, r1
   15158:	tst	r2, #1
   1515c:	beq	154ec <__assert_fail@plt+0x3e98>
   15160:	str	r4, [sp, #104]	; 0x68
   15164:	mov	r8, r5
   15168:	ldrb	r3, [sl]
   1516c:	strb	r4, [sp, #108]	; 0x6c
   15170:	str	r3, [sp, #112]	; 0x70
   15174:	cmp	r8, #0
   15178:	strb	r4, [sp, #96]	; 0x60
   1517c:	beq	15114 <__assert_fail@plt+0x3ac0>
   15180:	ldr	r3, [sp, #112]	; 0x70
   15184:	cmp	r3, #0
   15188:	bne	15114 <__assert_fail@plt+0x3ac0>
   1518c:	ldrb	r3, [sp, #96]	; 0x60
   15190:	cmp	r3, #0
   15194:	ldrbne	r5, [sp, #108]	; 0x6c
   15198:	beq	15724 <__assert_fail@plt+0x40d0>
   1519c:	cmp	r5, #0
   151a0:	beq	15668 <__assert_fail@plt+0x4014>
   151a4:	ldr	r3, [sp, #112]	; 0x70
   151a8:	cmp	r3, #0
   151ac:	bne	15668 <__assert_fail@plt+0x4014>
   151b0:	ldr	r0, [sp, #8]
   151b4:	add	r2, sp, #24
   151b8:	ldr	r1, [sp, #20]
   151bc:	bl	14738 <__assert_fail@plt+0x30e4>
   151c0:	cmp	r0, #0
   151c4:	bne	15b68 <__assert_fail@plt+0x4514>
   151c8:	ldr	r1, [sp, #4]
   151cc:	ldrb	r3, [sp, #164]	; 0xa4
   151d0:	str	r0, [sp, #16]
   151d4:	str	r1, [sp, #12]
   151d8:	cmp	r3, #0
   151dc:	ldr	r3, [sp, #4]
   151e0:	add	r9, r9, #1
   151e4:	add	r5, r3, #1
   151e8:	beq	15584 <__assert_fail@plt+0x3f30>
   151ec:	ldrb	r3, [sp, #52]	; 0x34
   151f0:	cmp	r3, #0
   151f4:	beq	15584 <__assert_fail@plt+0x3f30>
   151f8:	ldr	r0, [sp, #168]	; 0xa8
   151fc:	ldr	r3, [sp, #56]	; 0x38
   15200:	subs	r3, r0, r3
   15204:	rsbs	r0, r3, #0
   15208:	adcs	r0, r0, r3
   1520c:	cmp	r0, #0
   15210:	bne	155b4 <__assert_fail@plt+0x3f60>
   15214:	ldr	fp, [sp, #156]	; 0x9c
   15218:	ldr	r2, [sp, #160]	; 0xa0
   1521c:	str	r5, [sp, #4]
   15220:	add	fp, fp, r2
   15224:	ldrb	r2, [sp, #140]	; 0x8c
   15228:	strb	r6, [sp, #152]	; 0x98
   1522c:	cmp	r2, #0
   15230:	str	fp, [sp, #156]	; 0x9c
   15234:	beq	1508c <__assert_fail@plt+0x3a38>
   15238:	bl	113fc <__ctype_get_mb_cur_max@plt>
   1523c:	mov	r1, r0
   15240:	mov	r0, fp
   15244:	bl	17284 <__assert_fail@plt+0x5c30>
   15248:	mov	r1, fp
   1524c:	add	r3, sp, #144	; 0x90
   15250:	mov	r2, r0
   15254:	add	r0, sp, #168	; 0xa8
   15258:	bl	11420 <mbrtowc@plt>
   1525c:	cmn	r0, #1
   15260:	str	r0, [sp, #160]	; 0xa0
   15264:	strbeq	r6, [sp, #164]	; 0xa4
   15268:	streq	r4, [sp, #160]	; 0xa0
   1526c:	beq	154e0 <__assert_fail@plt+0x3e8c>
   15270:	cmn	r0, #2
   15274:	beq	154d0 <__assert_fail@plt+0x3e7c>
   15278:	cmp	r0, #0
   1527c:	beq	15ab0 <__assert_fail@plt+0x445c>
   15280:	ldr	r5, [sp, #168]	; 0xa8
   15284:	add	r0, sp, #144	; 0x90
   15288:	strb	r4, [sp, #164]	; 0xa4
   1528c:	bl	1133c <mbsinit@plt>
   15290:	strb	r4, [sp, #152]	; 0x98
   15294:	cmp	r0, #0
   15298:	strbne	r6, [sp, #140]	; 0x8c
   1529c:	cmp	r5, #0
   152a0:	bne	150c4 <__assert_fail@plt+0x3a70>
   152a4:	mov	r0, r5
   152a8:	b	15340 <__assert_fail@plt+0x3cec>
   152ac:	add	r0, sp, #32
   152b0:	bl	1133c <mbsinit@plt>
   152b4:	cmp	r0, #0
   152b8:	beq	15b70 <__assert_fail@plt+0x451c>
   152bc:	mov	r4, #1
   152c0:	strb	r4, [sp, #28]
   152c4:	bl	113fc <__ctype_get_mb_cur_max@plt>
   152c8:	mov	r1, r0
   152cc:	mov	r0, r8
   152d0:	bl	17284 <__assert_fail@plt+0x5c30>
   152d4:	mov	r1, r8
   152d8:	add	r3, sp, #32
   152dc:	mov	r2, r0
   152e0:	add	r0, sp, #56	; 0x38
   152e4:	bl	11420 <mbrtowc@plt>
   152e8:	cmn	r0, #1
   152ec:	str	r0, [sp, #48]	; 0x30
   152f0:	strbeq	r5, [sp, #52]	; 0x34
   152f4:	streq	r4, [sp, #48]	; 0x30
   152f8:	beq	154c4 <__assert_fail@plt+0x3e70>
   152fc:	cmn	r0, #2
   15300:	beq	154b4 <__assert_fail@plt+0x3e60>
   15304:	cmp	r0, #0
   15308:	beq	15ad4 <__assert_fail@plt+0x4480>
   1530c:	ldr	r4, [sp, #56]	; 0x38
   15310:	add	r0, sp, #32
   15314:	mov	r3, #1
   15318:	strb	r3, [sp, #52]	; 0x34
   1531c:	bl	1133c <mbsinit@plt>
   15320:	cmp	r0, #0
   15324:	movne	r3, #0
   15328:	strbne	r3, [sp, #28]
   1532c:	cmp	r4, #0
   15330:	mov	r3, #1
   15334:	strb	r3, [sp, #40]	; 0x28
   15338:	bne	1502c <__assert_fail@plt+0x39d8>
   1533c:	ldr	r0, [sp, #8]
   15340:	ldr	r1, [sp]
   15344:	ldr	r2, [sp, #308]	; 0x134
   15348:	ldr	r3, [r1]
   1534c:	cmp	r2, r3
   15350:	bne	15b90 <__assert_fail@plt+0x453c>
   15354:	add	sp, sp, #316	; 0x13c
   15358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1535c:	ldrb	r7, [r8]
   15360:	cmp	r7, #0
   15364:	beq	1533c <__assert_fail@plt+0x3ce8>
   15368:	ldr	r3, [sp, #8]
   1536c:	ldrb	r9, [r3]
   15370:	cmp	r9, #0
   15374:	beq	15680 <__assert_fail@plt+0x402c>
   15378:	cmp	r9, r7
   1537c:	mov	r4, #0
   15380:	mov	fp, r4
   15384:	str	r4, [sp, #4]
   15388:	add	r6, r3, #1
   1538c:	mov	r5, r3
   15390:	mov	sl, r8
   15394:	mov	r0, #1
   15398:	add	r4, r4, #1
   1539c:	beq	15440 <__assert_fail@plt+0x3dec>
   153a0:	ldrb	r9, [r5, #1]
   153a4:	cmp	r9, #0
   153a8:	beq	15680 <__assert_fail@plt+0x402c>
   153ac:	add	fp, fp, #1
   153b0:	cmp	r4, #9
   153b4:	movls	r3, #0
   153b8:	andhi	r3, r0, #1
   153bc:	cmp	r3, #0
   153c0:	beq	1542c <__assert_fail@plt+0x3dd8>
   153c4:	add	r3, r4, r4, lsl #2
   153c8:	cmp	fp, r3
   153cc:	bcc	15428 <__assert_fail@plt+0x3dd4>
   153d0:	cmp	sl, #0
   153d4:	beq	153f8 <__assert_fail@plt+0x3da4>
   153d8:	ldr	r2, [sp, #4]
   153dc:	mov	r0, sl
   153e0:	rsb	r1, r2, fp
   153e4:	bl	1157c <strnlen@plt>
   153e8:	str	fp, [sp, #4]
   153ec:	ldrb	r3, [sl, r0]!
   153f0:	cmp	r3, #0
   153f4:	bne	15428 <__assert_fail@plt+0x3dd4>
   153f8:	mov	r0, r8
   153fc:	bl	114bc <strlen@plt>
   15400:	mov	r1, r8
   15404:	add	r3, sp, #24
   15408:	mov	r2, r0
   1540c:	mov	r0, r6
   15410:	bl	145c0 <__assert_fail@plt+0x2f6c>
   15414:	cmp	r0, #0
   15418:	bne	15b68 <__assert_fail@plt+0x4514>
   1541c:	mov	sl, r0
   15420:	ldrb	r9, [r5, #1]
   15424:	b	1542c <__assert_fail@plt+0x3dd8>
   15428:	mov	r0, #1
   1542c:	cmp	r9, r7
   15430:	add	r6, r6, #1
   15434:	add	r5, r5, #1
   15438:	add	r4, r4, #1
   1543c:	bne	153a0 <__assert_fail@plt+0x3d4c>
   15440:	ldrb	r3, [r8, #1]
   15444:	cmp	r3, #0
   15448:	beq	152a4 <__assert_fail@plt+0x3c50>
   1544c:	ldrb	r9, [r5, #1]
   15450:	cmp	r9, #0
   15454:	beq	15680 <__assert_fail@plt+0x402c>
   15458:	cmp	r3, r9
   1545c:	add	r3, fp, #2
   15460:	bne	1571c <__assert_fail@plt+0x40c8>
   15464:	rsb	r1, fp, #0
   15468:	add	fp, r8, r1
   1546c:	add	r1, r5, r1
   15470:	b	1548c <__assert_fail@plt+0x3e38>
   15474:	ldrb	ip, [r1, r3]
   15478:	cmp	ip, #0
   1547c:	beq	15680 <__assert_fail@plt+0x402c>
   15480:	cmp	r2, ip
   15484:	add	r3, r3, #1
   15488:	bne	1571c <__assert_fail@plt+0x40c8>
   1548c:	ldrb	r2, [fp, r3]
   15490:	cmp	r2, #0
   15494:	bne	15474 <__assert_fail@plt+0x3e20>
   15498:	b	152a4 <__assert_fail@plt+0x3c50>
   1549c:	add	r0, sp, #144	; 0x90
   154a0:	bl	1133c <mbsinit@plt>
   154a4:	cmp	r0, #0
   154a8:	beq	15b70 <__assert_fail@plt+0x451c>
   154ac:	strb	r4, [sp, #140]	; 0x8c
   154b0:	b	15238 <__assert_fail@plt+0x3be4>
   154b4:	ldr	r0, [sp, #44]	; 0x2c
   154b8:	bl	114bc <strlen@plt>
   154bc:	strb	r5, [sp, #52]	; 0x34
   154c0:	str	r0, [sp, #48]	; 0x30
   154c4:	mov	r3, #1
   154c8:	strb	r3, [sp, #40]	; 0x28
   154cc:	b	1502c <__assert_fail@plt+0x39d8>
   154d0:	ldr	r0, [sp, #156]	; 0x9c
   154d4:	bl	114bc <strlen@plt>
   154d8:	strb	r6, [sp, #164]	; 0xa4
   154dc:	str	r0, [sp, #160]	; 0xa0
   154e0:	strb	r4, [sp, #152]	; 0x98
   154e4:	mov	r3, #0
   154e8:	b	150c8 <__assert_fail@plt+0x3a74>
   154ec:	add	r0, sp, #88	; 0x58
   154f0:	bl	1133c <mbsinit@plt>
   154f4:	cmp	r0, #0
   154f8:	beq	15b70 <__assert_fail@plt+0x451c>
   154fc:	strb	r4, [sp, #84]	; 0x54
   15500:	bl	113fc <__ctype_get_mb_cur_max@plt>
   15504:	mov	r1, r0
   15508:	mov	r0, sl
   1550c:	bl	17284 <__assert_fail@plt+0x5c30>
   15510:	mov	r1, sl
   15514:	add	r3, sp, #88	; 0x58
   15518:	mov	r2, r0
   1551c:	add	r0, sp, #112	; 0x70
   15520:	bl	11420 <mbrtowc@plt>
   15524:	cmn	r0, #1
   15528:	str	r0, [sp, #104]	; 0x68
   1552c:	strbeq	r6, [sp, #108]	; 0x6c
   15530:	streq	r4, [sp, #104]	; 0x68
   15534:	beq	15174 <__assert_fail@plt+0x3b20>
   15538:	cmn	r0, #2
   1553c:	beq	15648 <__assert_fail@plt+0x3ff4>
   15540:	cmp	r0, #0
   15544:	bne	15568 <__assert_fail@plt+0x3f14>
   15548:	ldr	r3, [sp, #100]	; 0x64
   1554c:	str	r4, [sp, #104]	; 0x68
   15550:	ldrb	r3, [r3]
   15554:	cmp	r3, #0
   15558:	bne	15b94 <__assert_fail@plt+0x4540>
   1555c:	ldr	r3, [sp, #112]	; 0x70
   15560:	cmp	r3, #0
   15564:	bne	156fc <__assert_fail@plt+0x40a8>
   15568:	add	r0, sp, #88	; 0x58
   1556c:	strb	r4, [sp, #108]	; 0x6c
   15570:	bl	1133c <mbsinit@plt>
   15574:	mov	r8, r5
   15578:	cmp	r0, #0
   1557c:	strbne	r6, [sp, #84]	; 0x54
   15580:	b	15174 <__assert_fail@plt+0x3b20>
   15584:	ldr	r2, [sp, #160]	; 0xa0
   15588:	ldr	r3, [sp, #48]	; 0x30
   1558c:	cmp	r2, r3
   15590:	movne	r0, #0
   15594:	bne	1520c <__assert_fail@plt+0x3bb8>
   15598:	ldr	r0, [sp, #156]	; 0x9c
   1559c:	ldr	r1, [sp, #44]	; 0x2c
   155a0:	bl	11360 <memcmp@plt>
   155a4:	rsbs	r0, r0, #1
   155a8:	movcc	r0, #0
   155ac:	cmp	r0, #0
   155b0:	beq	15214 <__assert_fail@plt+0x3bc0>
   155b4:	ldr	r1, [sp, #20]
   155b8:	add	r5, sp, #140	; 0x8c
   155bc:	add	ip, sp, #196	; 0xc4
   155c0:	str	r1, [sp, #268]	; 0x10c
   155c4:	ldm	r5!, {r0, r1, r2, r3}
   155c8:	stmia	ip!, {r0, r1, r2, r3}
   155cc:	ldm	r5!, {r0, r1, r2, r3}
   155d0:	strb	r6, [sp, #208]	; 0xd0
   155d4:	stmia	ip!, {r0, r1, r2, r3}
   155d8:	ldm	r5!, {r0, r1, r2, r3}
   155dc:	ldr	r8, [sp, #212]	; 0xd4
   155e0:	stmia	ip!, {r0, r1, r2, r3}
   155e4:	ldm	r5, {r0, r1}
   155e8:	ldr	r3, [sp, #216]	; 0xd8
   155ec:	stm	ip, {r0, r1}
   155f0:	add	r3, r8, r3
   155f4:	str	r3, [sp, #212]	; 0xd4
   155f8:	ldr	r2, [sp, #20]
   155fc:	strb	r6, [sp, #252]	; 0xfc
   15600:	str	r6, [sp, #256]	; 0x100
   15604:	ldrb	r3, [r2]
   15608:	strb	r6, [sp, #264]	; 0x108
   1560c:	and	r2, r3, #31
   15610:	str	r6, [sp, #260]	; 0x104
   15614:	lsr	r1, r3, #5
   15618:	ldr	r5, [r7, r1, lsl #2]
   1561c:	lsr	r5, r5, r2
   15620:	ands	r5, r5, #1
   15624:	beq	15688 <__assert_fail@plt+0x4034>
   15628:	mov	r5, r3
   1562c:	str	r4, [sp, #272]	; 0x110
   15630:	str	r3, [sp, #280]	; 0x118
   15634:	strb	r4, [sp, #276]	; 0x114
   15638:	cmp	r5, #0
   1563c:	strb	r4, [sp, #264]	; 0x108
   15640:	bne	157ec <__assert_fail@plt+0x4198>
   15644:	bl	11630 <abort@plt>
   15648:	ldr	r0, [sp, #100]	; 0x64
   1564c:	bl	114bc <strlen@plt>
   15650:	strb	r6, [sp, #108]	; 0x6c
   15654:	str	r0, [sp, #104]	; 0x68
   15658:	b	15174 <__assert_fail@plt+0x3b20>
   1565c:	mov	r2, #1
   15660:	str	r2, [sp, #16]
   15664:	b	151d8 <__assert_fail@plt+0x3b84>
   15668:	ldr	r1, [sp, #4]
   1566c:	mov	r2, #1
   15670:	ldrb	r3, [sp, #164]	; 0xa4
   15674:	str	r2, [sp, #16]
   15678:	str	r1, [sp, #12]
   1567c:	b	151d8 <__assert_fail@plt+0x3b84>
   15680:	mov	r0, #0
   15684:	b	15340 <__assert_fail@plt+0x3cec>
   15688:	add	r0, sp, #256	; 0x100
   1568c:	bl	1133c <mbsinit@plt>
   15690:	cmp	r0, #0
   15694:	beq	15b70 <__assert_fail@plt+0x451c>
   15698:	strb	r4, [sp, #252]	; 0xfc
   1569c:	bl	113fc <__ctype_get_mb_cur_max@plt>
   156a0:	mov	r1, r0
   156a4:	ldr	r0, [sp, #20]
   156a8:	bl	17284 <__assert_fail@plt+0x5c30>
   156ac:	ldr	r1, [sp, #20]
   156b0:	add	r3, sp, #256	; 0x100
   156b4:	mov	r2, r0
   156b8:	add	r0, sp, #280	; 0x118
   156bc:	bl	11420 <mbrtowc@plt>
   156c0:	cmn	r0, #1
   156c4:	str	r0, [sp, #272]	; 0x110
   156c8:	beq	15b40 <__assert_fail@plt+0x44ec>
   156cc:	cmn	r0, #2
   156d0:	beq	15b50 <__assert_fail@plt+0x44fc>
   156d4:	cmp	r0, #0
   156d8:	bne	15b0c <__assert_fail@plt+0x44b8>
   156dc:	ldr	fp, [sp, #268]	; 0x10c
   156e0:	str	r4, [sp, #272]	; 0x110
   156e4:	ldrb	r3, [fp]
   156e8:	cmp	r3, #0
   156ec:	bne	15b94 <__assert_fail@plt+0x4540>
   156f0:	ldr	r5, [sp, #280]	; 0x118
   156f4:	cmp	r5, #0
   156f8:	beq	15b10 <__assert_fail@plt+0x44bc>
   156fc:	movw	r0, #41964	; 0xa3ec
   15700:	movw	r1, #41928	; 0xa3c8
   15704:	movw	r3, #41884	; 0xa39c
   15708:	movt	r0, #1
   1570c:	movt	r1, #1
   15710:	mov	r2, #176	; 0xb0
   15714:	movt	r3, #1
   15718:	bl	11654 <__assert_fail@plt>
   1571c:	mov	fp, r3
   15720:	b	153b0 <__assert_fail@plt+0x3d5c>
   15724:	ldr	r8, [sp, #100]	; 0x64
   15728:	ldrb	r2, [sp, #84]	; 0x54
   1572c:	cmp	r2, #0
   15730:	bne	15764 <__assert_fail@plt+0x4110>
   15734:	ldrb	r2, [r8]
   15738:	and	r1, r2, #31
   1573c:	lsr	r2, r2, #5
   15740:	ldr	r2, [r7, r2, lsl #2]
   15744:	lsr	r2, r2, r1
   15748:	tst	r2, #1
   1574c:	bne	15af8 <__assert_fail@plt+0x44a4>
   15750:	add	r0, sp, #88	; 0x58
   15754:	bl	1133c <mbsinit@plt>
   15758:	cmp	r0, #0
   1575c:	beq	15b70 <__assert_fail@plt+0x451c>
   15760:	strb	r4, [sp, #84]	; 0x54
   15764:	bl	113fc <__ctype_get_mb_cur_max@plt>
   15768:	mov	r1, r0
   1576c:	mov	r0, r8
   15770:	bl	17284 <__assert_fail@plt+0x5c30>
   15774:	mov	r1, r8
   15778:	add	r3, sp, #88	; 0x58
   1577c:	mov	r2, r0
   15780:	add	r0, sp, #112	; 0x70
   15784:	bl	11420 <mbrtowc@plt>
   15788:	cmn	r0, #1
   1578c:	str	r0, [sp, #104]	; 0x68
   15790:	strbeq	r6, [sp, #108]	; 0x6c
   15794:	streq	r4, [sp, #104]	; 0x68
   15798:	moveq	r5, #0
   1579c:	beq	157e4 <__assert_fail@plt+0x4190>
   157a0:	cmn	r0, #2
   157a4:	beq	15b28 <__assert_fail@plt+0x44d4>
   157a8:	cmp	r0, #0
   157ac:	bne	157d0 <__assert_fail@plt+0x417c>
   157b0:	ldr	r3, [sp, #100]	; 0x64
   157b4:	str	r4, [sp, #104]	; 0x68
   157b8:	ldrb	r3, [r3]
   157bc:	cmp	r3, #0
   157c0:	bne	15b94 <__assert_fail@plt+0x4540>
   157c4:	ldr	r3, [sp, #112]	; 0x70
   157c8:	cmp	r3, #0
   157cc:	bne	156fc <__assert_fail@plt+0x40a8>
   157d0:	add	r0, sp, #88	; 0x58
   157d4:	strb	r4, [sp, #108]	; 0x6c
   157d8:	bl	1133c <mbsinit@plt>
   157dc:	cmp	r0, #0
   157e0:	strbne	r6, [sp, #84]	; 0x54
   157e4:	strb	r4, [sp, #96]	; 0x60
   157e8:	b	1519c <__assert_fail@plt+0x3b48>
   157ec:	ldr	fp, [sp, #268]	; 0x10c
   157f0:	ldr	r3, [sp, #4]
   157f4:	ldr	r2, [sp, #272]	; 0x110
   157f8:	add	r5, r3, #2
   157fc:	ldrb	r3, [sp, #252]	; 0xfc
   15800:	add	fp, fp, r2
   15804:	strb	r6, [sp, #264]	; 0x108
   15808:	cmp	r3, #0
   1580c:	str	fp, [sp, #268]	; 0x10c
   15810:	bne	158d8 <__assert_fail@plt+0x4284>
   15814:	ldrb	r3, [fp]
   15818:	and	r2, r3, #31
   1581c:	lsr	r3, r3, #5
   15820:	ldr	r3, [r7, r3, lsl #2]
   15824:	lsr	r3, r3, r2
   15828:	tst	r3, #1
   1582c:	beq	15a60 <__assert_fail@plt+0x440c>
   15830:	str	r4, [sp, #272]	; 0x110
   15834:	ldrb	r8, [fp]
   15838:	strb	r4, [sp, #276]	; 0x114
   1583c:	str	r8, [sp, #280]	; 0x118
   15840:	cmp	r8, #0
   15844:	strb	r4, [sp, #264]	; 0x108
   15848:	bne	15868 <__assert_fail@plt+0x4214>
   1584c:	ldr	r0, [sp, #156]	; 0x9c
   15850:	b	15340 <__assert_fail@plt+0x3cec>
   15854:	ldr	r0, [sp, #268]	; 0x10c
   15858:	bl	114bc <strlen@plt>
   1585c:	strb	r6, [sp, #276]	; 0x114
   15860:	str	r0, [sp, #272]	; 0x110
   15864:	strb	r4, [sp, #264]	; 0x108
   15868:	ldrb	r8, [sp, #208]	; 0xd0
   1586c:	cmp	r8, #0
   15870:	beq	1593c <__assert_fail@plt+0x42e8>
   15874:	ldrb	r8, [sp, #220]	; 0xdc
   15878:	cmp	r8, #0
   1587c:	bne	15988 <__assert_fail@plt+0x4334>
   15880:	ldr	r2, [sp, #216]	; 0xd8
   15884:	ldr	r3, [sp, #272]	; 0x110
   15888:	cmp	r2, r3
   1588c:	movne	r0, #1
   15890:	beq	15a48 <__assert_fail@plt+0x43f4>
   15894:	cmp	r0, #0
   15898:	add	r3, r5, #1
   1589c:	bne	15214 <__assert_fail@plt+0x3bc0>
   158a0:	ldr	r2, [sp, #212]	; 0xd4
   158a4:	mov	r5, r3
   158a8:	ldr	r3, [sp, #216]	; 0xd8
   158ac:	ldr	fp, [sp, #268]	; 0x10c
   158b0:	add	r2, r2, r3
   158b4:	ldr	r3, [sp, #272]	; 0x110
   158b8:	strb	r0, [sp, #208]	; 0xd0
   158bc:	add	fp, fp, r3
   158c0:	ldrb	r3, [sp, #252]	; 0xfc
   158c4:	strb	r0, [sp, #264]	; 0x108
   158c8:	cmp	r3, #0
   158cc:	str	r2, [sp, #212]	; 0xd4
   158d0:	str	fp, [sp, #268]	; 0x10c
   158d4:	beq	15814 <__assert_fail@plt+0x41c0>
   158d8:	bl	113fc <__ctype_get_mb_cur_max@plt>
   158dc:	mov	r1, r0
   158e0:	mov	r0, fp
   158e4:	bl	17284 <__assert_fail@plt+0x5c30>
   158e8:	mov	r1, fp
   158ec:	add	r3, sp, #256	; 0x100
   158f0:	mov	r2, r0
   158f4:	add	r0, sp, #280	; 0x118
   158f8:	bl	11420 <mbrtowc@plt>
   158fc:	cmn	r0, #1
   15900:	str	r0, [sp, #272]	; 0x110
   15904:	strbeq	r6, [sp, #276]	; 0x114
   15908:	streq	r4, [sp, #272]	; 0x110
   1590c:	beq	15864 <__assert_fail@plt+0x4210>
   15910:	cmn	r0, #2
   15914:	beq	15854 <__assert_fail@plt+0x4200>
   15918:	cmp	r0, #0
   1591c:	beq	15a78 <__assert_fail@plt+0x4424>
   15920:	ldr	r8, [sp, #280]	; 0x118
   15924:	add	r0, sp, #256	; 0x100
   15928:	strb	r4, [sp, #276]	; 0x114
   1592c:	bl	1133c <mbsinit@plt>
   15930:	cmp	r0, #0
   15934:	strbne	r6, [sp, #252]	; 0xfc
   15938:	b	15840 <__assert_fail@plt+0x41ec>
   1593c:	ldrb	r3, [sp, #196]	; 0xc4
   15940:	ldr	sl, [sp, #212]	; 0xd4
   15944:	cmp	r3, #0
   15948:	bne	159c4 <__assert_fail@plt+0x4370>
   1594c:	ldrb	r3, [sl]
   15950:	and	r2, r3, #31
   15954:	lsr	r3, r3, #5
   15958:	ldr	r3, [r7, r3, lsl #2]
   1595c:	lsr	r3, r3, r2
   15960:	tst	r3, #1
   15964:	beq	159b0 <__assert_fail@plt+0x435c>
   15968:	str	r4, [sp, #216]	; 0xd8
   1596c:	mov	r8, #1
   15970:	ldrb	r3, [sl]
   15974:	strb	r4, [sp, #220]	; 0xdc
   15978:	str	r3, [sp, #224]	; 0xe0
   1597c:	cmp	r8, #0
   15980:	strb	r4, [sp, #208]	; 0xd0
   15984:	beq	15880 <__assert_fail@plt+0x422c>
   15988:	ldr	r0, [sp, #224]	; 0xe0
   1598c:	cmp	r0, #0
   15990:	beq	15340 <__assert_fail@plt+0x3cec>
   15994:	ldrb	r3, [sp, #276]	; 0x114
   15998:	cmp	r3, #0
   1599c:	beq	15880 <__assert_fail@plt+0x422c>
   159a0:	ldr	r3, [sp, #280]	; 0x118
   159a4:	subs	r0, r0, r3
   159a8:	movne	r0, #1
   159ac:	b	15894 <__assert_fail@plt+0x4240>
   159b0:	add	r0, sp, #200	; 0xc8
   159b4:	bl	1133c <mbsinit@plt>
   159b8:	cmp	r0, #0
   159bc:	beq	15b70 <__assert_fail@plt+0x451c>
   159c0:	strb	r4, [sp, #196]	; 0xc4
   159c4:	bl	113fc <__ctype_get_mb_cur_max@plt>
   159c8:	mov	r1, r0
   159cc:	mov	r0, sl
   159d0:	bl	17284 <__assert_fail@plt+0x5c30>
   159d4:	mov	r1, sl
   159d8:	add	r3, sp, #200	; 0xc8
   159dc:	mov	r2, r0
   159e0:	add	r0, sp, #224	; 0xe0
   159e4:	bl	11420 <mbrtowc@plt>
   159e8:	cmn	r0, #1
   159ec:	str	r0, [sp, #216]	; 0xd8
   159f0:	strbeq	r6, [sp, #220]	; 0xdc
   159f4:	streq	r4, [sp, #216]	; 0xd8
   159f8:	beq	1597c <__assert_fail@plt+0x4328>
   159fc:	cmn	r0, #2
   15a00:	beq	15a9c <__assert_fail@plt+0x4448>
   15a04:	cmp	r0, #0
   15a08:	bne	15a2c <__assert_fail@plt+0x43d8>
   15a0c:	ldr	r3, [sp, #212]	; 0xd4
   15a10:	str	r4, [sp, #216]	; 0xd8
   15a14:	ldrb	r3, [r3]
   15a18:	cmp	r3, #0
   15a1c:	bne	15b94 <__assert_fail@plt+0x4540>
   15a20:	ldr	r3, [sp, #224]	; 0xe0
   15a24:	cmp	r3, #0
   15a28:	bne	156fc <__assert_fail@plt+0x40a8>
   15a2c:	add	r0, sp, #200	; 0xc8
   15a30:	strb	r4, [sp, #220]	; 0xdc
   15a34:	bl	1133c <mbsinit@plt>
   15a38:	mov	r8, #1
   15a3c:	cmp	r0, #0
   15a40:	strbne	r6, [sp, #196]	; 0xc4
   15a44:	b	1597c <__assert_fail@plt+0x4328>
   15a48:	ldr	r0, [sp, #212]	; 0xd4
   15a4c:	ldr	r1, [sp, #268]	; 0x10c
   15a50:	bl	11360 <memcmp@plt>
   15a54:	adds	r0, r0, #0
   15a58:	movne	r0, #1
   15a5c:	b	15894 <__assert_fail@plt+0x4240>
   15a60:	add	r0, sp, #256	; 0x100
   15a64:	bl	1133c <mbsinit@plt>
   15a68:	cmp	r0, #0
   15a6c:	beq	15b70 <__assert_fail@plt+0x451c>
   15a70:	strb	r4, [sp, #252]	; 0xfc
   15a74:	b	158d8 <__assert_fail@plt+0x4284>
   15a78:	ldr	r3, [sp, #268]	; 0x10c
   15a7c:	str	r4, [sp, #272]	; 0x110
   15a80:	ldrb	r3, [r3]
   15a84:	cmp	r3, #0
   15a88:	bne	15b94 <__assert_fail@plt+0x4540>
   15a8c:	ldr	r8, [sp, #280]	; 0x118
   15a90:	cmp	r8, #0
   15a94:	beq	15924 <__assert_fail@plt+0x42d0>
   15a98:	b	156fc <__assert_fail@plt+0x40a8>
   15a9c:	ldr	r0, [sp, #212]	; 0xd4
   15aa0:	bl	114bc <strlen@plt>
   15aa4:	strb	r6, [sp, #220]	; 0xdc
   15aa8:	str	r0, [sp, #216]	; 0xd8
   15aac:	b	1597c <__assert_fail@plt+0x4328>
   15ab0:	ldr	r3, [sp, #156]	; 0x9c
   15ab4:	str	r4, [sp, #160]	; 0xa0
   15ab8:	ldrb	r3, [r3]
   15abc:	cmp	r3, #0
   15ac0:	bne	15b94 <__assert_fail@plt+0x4540>
   15ac4:	ldr	r5, [sp, #168]	; 0xa8
   15ac8:	cmp	r5, #0
   15acc:	beq	15284 <__assert_fail@plt+0x3c30>
   15ad0:	b	156fc <__assert_fail@plt+0x40a8>
   15ad4:	ldr	r3, [sp, #44]	; 0x2c
   15ad8:	str	r4, [sp, #48]	; 0x30
   15adc:	ldrb	r3, [r3]
   15ae0:	cmp	r3, #0
   15ae4:	bne	15b94 <__assert_fail@plt+0x4540>
   15ae8:	ldr	r4, [sp, #56]	; 0x38
   15aec:	cmp	r4, #0
   15af0:	beq	15310 <__assert_fail@plt+0x3cbc>
   15af4:	b	156fc <__assert_fail@plt+0x40a8>
   15af8:	str	r4, [sp, #104]	; 0x68
   15afc:	ldrb	r3, [r8]
   15b00:	strb	r4, [sp, #108]	; 0x6c
   15b04:	str	r3, [sp, #112]	; 0x70
   15b08:	b	157e4 <__assert_fail@plt+0x4190>
   15b0c:	ldr	r5, [sp, #280]	; 0x118
   15b10:	add	r0, sp, #256	; 0x100
   15b14:	strb	r4, [sp, #276]	; 0x114
   15b18:	bl	1133c <mbsinit@plt>
   15b1c:	cmp	r0, #0
   15b20:	strbne	r6, [sp, #252]	; 0xfc
   15b24:	b	15638 <__assert_fail@plt+0x3fe4>
   15b28:	ldr	r0, [sp, #100]	; 0x64
   15b2c:	mov	r5, #0
   15b30:	bl	114bc <strlen@plt>
   15b34:	strb	r6, [sp, #108]	; 0x6c
   15b38:	str	r0, [sp, #104]	; 0x68
   15b3c:	b	157e4 <__assert_fail@plt+0x4190>
   15b40:	str	r4, [sp, #272]	; 0x110
   15b44:	strb	r5, [sp, #276]	; 0x114
   15b48:	ldr	fp, [sp, #268]	; 0x10c
   15b4c:	b	157f0 <__assert_fail@plt+0x419c>
   15b50:	ldr	fp, [sp, #268]	; 0x10c
   15b54:	mov	r0, fp
   15b58:	bl	114bc <strlen@plt>
   15b5c:	strb	r5, [sp, #276]	; 0x114
   15b60:	str	r0, [sp, #272]	; 0x110
   15b64:	b	157f0 <__assert_fail@plt+0x419c>
   15b68:	ldr	r0, [sp, #24]
   15b6c:	b	15340 <__assert_fail@plt+0x3cec>
   15b70:	movw	r0, #41904	; 0xa3b0
   15b74:	movw	r1, #41928	; 0xa3c8
   15b78:	movw	r3, #41884	; 0xa39c
   15b7c:	movt	r0, #1
   15b80:	movt	r1, #1
   15b84:	mov	r2, #147	; 0x93
   15b88:	movt	r3, #1
   15b8c:	bl	11654 <__assert_fail@plt>
   15b90:	bl	11378 <__stack_chk_fail@plt>
   15b94:	movw	r0, #41940	; 0xa3d4
   15b98:	movw	r1, #41928	; 0xa3c8
   15b9c:	movw	r3, #41884	; 0xa39c
   15ba0:	movt	r0, #1
   15ba4:	movt	r1, #1
   15ba8:	mov	r2, #175	; 0xaf
   15bac:	movt	r3, #1
   15bb0:	bl	11654 <__assert_fail@plt>
   15bb4:	push	{r4, r5, r6, lr}
   15bb8:	subs	r4, r0, #0
   15bbc:	beq	15c44 <__assert_fail@plt+0x45f0>
   15bc0:	mov	r1, #47	; 0x2f
   15bc4:	bl	115d0 <strrchr@plt>
   15bc8:	subs	r5, r0, #0
   15bcc:	beq	15c28 <__assert_fail@plt+0x45d4>
   15bd0:	add	r6, r5, #1
   15bd4:	rsb	r3, r4, r6
   15bd8:	cmp	r3, #6
   15bdc:	ble	15c28 <__assert_fail@plt+0x45d4>
   15be0:	movw	r1, #42040	; 0xa438
   15be4:	sub	r0, r5, #6
   15be8:	movt	r1, #1
   15bec:	mov	r2, #7
   15bf0:	bl	11624 <strncmp@plt>
   15bf4:	cmp	r0, #0
   15bf8:	bne	15c28 <__assert_fail@plt+0x45d4>
   15bfc:	movw	r1, #42048	; 0xa440
   15c00:	mov	r0, r6
   15c04:	movt	r1, #1
   15c08:	mov	r2, #3
   15c0c:	bl	11624 <strncmp@plt>
   15c10:	cmp	r0, #0
   15c14:	addeq	r4, r5, #4
   15c18:	movweq	r3, #45480	; 0xb1a8
   15c1c:	movteq	r3, #2
   15c20:	movne	r4, r6
   15c24:	streq	r4, [r3]
   15c28:	movw	r2, #45712	; 0xb290
   15c2c:	movw	r3, #45492	; 0xb1b4
   15c30:	movt	r2, #2
   15c34:	movt	r3, #2
   15c38:	str	r4, [r2]
   15c3c:	str	r4, [r3]
   15c40:	pop	{r4, r5, r6, pc}
   15c44:	movw	r3, #45500	; 0xb1bc
   15c48:	movt	r3, #2
   15c4c:	movw	r0, #41984	; 0xa400
   15c50:	mov	r1, #1
   15c54:	ldr	r3, [r3]
   15c58:	mov	r2, #55	; 0x37
   15c5c:	movt	r0, #1
   15c60:	bl	113d8 <fwrite@plt>
   15c64:	bl	11630 <abort@plt>
   15c68:	push	{r3, lr}
   15c6c:	mov	r3, r0
   15c70:	mov	r2, #0
   15c74:	cmp	r1, #8
   15c78:	str	r2, [r3], #4
   15c7c:	add	r3, r3, #4
   15c80:	str	r2, [r0, #4]
   15c84:	str	r2, [r3], #4
   15c88:	str	r2, [r3], #4
   15c8c:	str	r2, [r3], #4
   15c90:	str	r2, [r3], #4
   15c94:	str	r2, [r3], #4
   15c98:	str	r2, [r3], #4
   15c9c:	str	r2, [r3], #4
   15ca0:	str	r2, [r3], #4
   15ca4:	str	r2, [r3], #4
   15ca8:	str	r2, [r3]
   15cac:	beq	15cb8 <__assert_fail@plt+0x4664>
   15cb0:	str	r1, [r0]
   15cb4:	pop	{r3, pc}
   15cb8:	bl	11630 <abort@plt>
   15cbc:	push	{r4, r5, r6, lr}
   15cc0:	mov	r4, r0
   15cc4:	mov	r6, r1
   15cc8:	mov	r0, #0
   15ccc:	mov	r1, r4
   15cd0:	mov	r2, #5
   15cd4:	bl	1136c <dcgettext@plt>
   15cd8:	cmp	r0, r4
   15cdc:	mov	r5, r0
   15ce0:	beq	15ce8 <__assert_fail@plt+0x4694>
   15ce4:	pop	{r4, r5, r6, pc}
   15ce8:	bl	18164 <__assert_fail@plt+0x6b10>
   15cec:	ldrb	r3, [r0]
   15cf0:	bic	r3, r3, #32
   15cf4:	cmp	r3, #85	; 0x55
   15cf8:	bne	15d80 <__assert_fail@plt+0x472c>
   15cfc:	ldrb	r3, [r0, #1]
   15d00:	bic	r3, r3, #32
   15d04:	cmp	r3, #84	; 0x54
   15d08:	bne	15d64 <__assert_fail@plt+0x4710>
   15d0c:	ldrb	r3, [r0, #2]
   15d10:	bic	r3, r3, #32
   15d14:	cmp	r3, #70	; 0x46
   15d18:	bne	15d64 <__assert_fail@plt+0x4710>
   15d1c:	ldrb	r3, [r0, #3]
   15d20:	cmp	r3, #45	; 0x2d
   15d24:	bne	15d64 <__assert_fail@plt+0x4710>
   15d28:	ldrb	r3, [r0, #4]
   15d2c:	cmp	r3, #56	; 0x38
   15d30:	bne	15d64 <__assert_fail@plt+0x4710>
   15d34:	ldrb	r3, [r0, #5]
   15d38:	cmp	r3, #0
   15d3c:	bne	15d64 <__assert_fail@plt+0x4710>
   15d40:	ldrb	r0, [r5]
   15d44:	movw	r2, #42120	; 0xa488
   15d48:	movw	r3, #42140	; 0xa49c
   15d4c:	movt	r2, #1
   15d50:	cmp	r0, #96	; 0x60
   15d54:	movt	r3, #1
   15d58:	movne	r0, r2
   15d5c:	moveq	r0, r3
   15d60:	pop	{r4, r5, r6, pc}
   15d64:	cmp	r6, #7
   15d68:	movw	r3, #42132	; 0xa494
   15d6c:	movt	r3, #1
   15d70:	movw	r0, #42128	; 0xa490
   15d74:	movt	r0, #1
   15d78:	moveq	r0, r3
   15d7c:	pop	{r4, r5, r6, pc}
   15d80:	cmp	r3, #71	; 0x47
   15d84:	bne	15d64 <__assert_fail@plt+0x4710>
   15d88:	ldrb	r3, [r0, #1]
   15d8c:	bic	r3, r3, #32
   15d90:	cmp	r3, #66	; 0x42
   15d94:	bne	15d64 <__assert_fail@plt+0x4710>
   15d98:	ldrb	r3, [r0, #2]
   15d9c:	cmp	r3, #49	; 0x31
   15da0:	bne	15d64 <__assert_fail@plt+0x4710>
   15da4:	ldrb	r3, [r0, #3]
   15da8:	cmp	r3, #56	; 0x38
   15dac:	bne	15d64 <__assert_fail@plt+0x4710>
   15db0:	ldrb	r3, [r0, #4]
   15db4:	cmp	r3, #48	; 0x30
   15db8:	bne	15d64 <__assert_fail@plt+0x4710>
   15dbc:	ldrb	r3, [r0, #5]
   15dc0:	cmp	r3, #51	; 0x33
   15dc4:	bne	15d64 <__assert_fail@plt+0x4710>
   15dc8:	ldrb	r3, [r0, #6]
   15dcc:	cmp	r3, #48	; 0x30
   15dd0:	bne	15d64 <__assert_fail@plt+0x4710>
   15dd4:	ldrb	r3, [r0, #7]
   15dd8:	cmp	r3, #0
   15ddc:	bne	15d64 <__assert_fail@plt+0x4710>
   15de0:	ldrb	r0, [r5]
   15de4:	movw	r2, #42124	; 0xa48c
   15de8:	movw	r3, #42136	; 0xa498
   15dec:	movt	r2, #1
   15df0:	cmp	r0, #96	; 0x60
   15df4:	movt	r3, #1
   15df8:	movne	r0, r2
   15dfc:	moveq	r0, r3
   15e00:	pop	{r4, r5, r6, pc}
   15e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e08:	movw	ip, #45488	; 0xb1b0
   15e0c:	sub	sp, sp, #124	; 0x7c
   15e10:	movt	ip, #2
   15e14:	mov	fp, r1
   15e18:	mov	sl, r3
   15e1c:	str	ip, [sp, #60]	; 0x3c
   15e20:	str	r0, [sp, #44]	; 0x2c
   15e24:	ldr	r0, [ip]
   15e28:	ldr	ip, [sp, #168]	; 0xa8
   15e2c:	str	r2, [sp, #40]	; 0x28
   15e30:	str	r0, [sp, #116]	; 0x74
   15e34:	str	ip, [sp, #52]	; 0x34
   15e38:	ldr	ip, [sp, #164]	; 0xa4
   15e3c:	ubfx	ip, ip, #1, #1
   15e40:	str	ip, [sp, #36]	; 0x24
   15e44:	ldr	ip, [sp, #172]	; 0xac
   15e48:	str	ip, [sp, #76]	; 0x4c
   15e4c:	ldr	ip, [sp, #176]	; 0xb0
   15e50:	str	ip, [sp, #72]	; 0x48
   15e54:	bl	113fc <__ctype_get_mb_cur_max@plt>
   15e58:	ldr	ip, [sp, #160]	; 0xa0
   15e5c:	str	r0, [sp, #68]	; 0x44
   15e60:	cmp	ip, #8
   15e64:	ldrls	pc, [pc, ip, lsl #2]
   15e68:	b	1699c <__assert_fail@plt+0x5348>
   15e6c:	muleq	r1, r0, lr
   15e70:	strdeq	r6, [r1], -r4
   15e74:	andeq	r6, r1, r8, lsr #14
   15e78:	andeq	r6, r1, ip, asr #11
   15e7c:	andeq	r6, r1, ip, lsl #12
   15e80:	andeq	r6, r1, ip, lsr r6
   15e84:	andeq	r6, r1, r0, ror #12
   15e88:	andeq	r6, r1, r0, ror #12
   15e8c:	andeq	r6, r1, r0, ror #12
   15e90:	mov	ip, #0
   15e94:	str	ip, [sp, #36]	; 0x24
   15e98:	mov	r4, ip
   15e9c:	str	ip, [sp, #28]
   15ea0:	str	ip, [sp, #32]
   15ea4:	str	ip, [sp, #56]	; 0x38
   15ea8:	ldr	ip, [sp, #36]	; 0x24
   15eac:	mov	r9, #0
   15eb0:	ldr	r0, [sp, #36]	; 0x24
   15eb4:	eor	r2, ip, #1
   15eb8:	ldr	ip, [sp, #28]
   15ebc:	eor	r3, ip, #1
   15ec0:	and	ip, ip, r0
   15ec4:	and	r3, r2, r3
   15ec8:	str	ip, [sp, #80]	; 0x50
   15ecc:	str	r3, [sp, #48]	; 0x30
   15ed0:	cmn	sl, #1
   15ed4:	beq	16254 <__assert_fail@plt+0x4c00>
   15ed8:	subs	r3, r9, sl
   15edc:	movne	r3, #1
   15ee0:	cmp	r3, #0
   15ee4:	beq	1626c <__assert_fail@plt+0x4c18>
   15ee8:	ldr	ip, [sp, #32]
   15eec:	adds	r8, ip, #0
   15ef0:	ldr	ip, [sp, #28]
   15ef4:	movne	r8, #1
   15ef8:	ands	r7, r8, ip
   15efc:	bne	1676c <__assert_fail@plt+0x5118>
   15f00:	ldr	ip, [sp, #40]	; 0x28
   15f04:	add	r6, ip, r9
   15f08:	ldrb	r5, [r6]
   15f0c:	cmp	r5, #126	; 0x7e
   15f10:	ldrls	pc, [pc, r5, lsl #2]
   15f14:	b	164e0 <__assert_fail@plt+0x4e8c>
   15f18:	andeq	r6, r1, ip, ror #7
   15f1c:	andeq	r6, r1, r0, ror #9
   15f20:	andeq	r6, r1, r0, ror #9
   15f24:	andeq	r6, r1, r0, ror #9
   15f28:	andeq	r6, r1, r0, ror #9
   15f2c:	andeq	r6, r1, r0, ror #9
   15f30:	andeq	r6, r1, r0, ror #9
   15f34:	ldrdeq	r6, [r1], -r4
   15f38:			; <UNDEFINED> instruction: 0x000163bc
   15f3c:	andeq	r6, r1, r4, ror #7
   15f40:	ldrdeq	r6, [r1], -ip
   15f44:	andeq	r6, r1, ip, asr #7
   15f48:	andeq	r6, r1, r4, asr #7
   15f4c:	andeq	r6, r1, r8, lsl #7
   15f50:	andeq	r6, r1, r0, ror #9
   15f54:	andeq	r6, r1, r0, ror #9
   15f58:	andeq	r6, r1, r0, ror #9
   15f5c:	andeq	r6, r1, r0, ror #9
   15f60:	andeq	r6, r1, r0, ror #9
   15f64:	andeq	r6, r1, r0, ror #9
   15f68:	andeq	r6, r1, r0, ror #9
   15f6c:	andeq	r6, r1, r0, ror #9
   15f70:	andeq	r6, r1, r0, ror #9
   15f74:	andeq	r6, r1, r0, ror #9
   15f78:	andeq	r6, r1, r0, ror #9
   15f7c:	andeq	r6, r1, r0, ror #9
   15f80:	andeq	r6, r1, r0, ror #9
   15f84:	andeq	r6, r1, r0, ror #9
   15f88:	andeq	r6, r1, r0, ror #9
   15f8c:	andeq	r6, r1, r0, ror #9
   15f90:	andeq	r6, r1, r0, ror #9
   15f94:	andeq	r6, r1, r0, ror #9
   15f98:	andeq	r6, r1, r0, lsl r3
   15f9c:	andeq	r6, r1, r0, lsl r3
   15fa0:	andeq	r6, r1, r0, lsl r3
   15fa4:	andeq	r6, r1, r8, lsl #6
   15fa8:	andeq	r6, r1, r0, lsl r3
   15fac:	andeq	r6, r1, r0, ror #3
   15fb0:	andeq	r6, r1, r0, lsl r3
   15fb4:	andeq	r6, r1, r8, lsl #9
   15fb8:	andeq	r6, r1, r0, lsl r3
   15fbc:	andeq	r6, r1, r0, lsl r3
   15fc0:	andeq	r6, r1, r0, lsl r3
   15fc4:	andeq	r6, r1, r0, ror #3
   15fc8:	andeq	r6, r1, r0, ror #3
   15fcc:	andeq	r6, r1, r0, ror #3
   15fd0:	andeq	r6, r1, r0, ror #3
   15fd4:	andeq	r6, r1, r0, ror #3
   15fd8:	andeq	r6, r1, r0, ror #3
   15fdc:	andeq	r6, r1, r0, ror #3
   15fe0:	andeq	r6, r1, r0, ror #3
   15fe4:	andeq	r6, r1, r0, ror #3
   15fe8:	andeq	r6, r1, r0, ror #3
   15fec:	andeq	r6, r1, r0, ror #3
   15ff0:	andeq	r6, r1, r0, ror #3
   15ff4:	andeq	r6, r1, r0, ror #3
   15ff8:	andeq	r6, r1, r0, ror #3
   15ffc:	andeq	r6, r1, r0, ror #3
   16000:	andeq	r6, r1, r0, ror #3
   16004:	andeq	r6, r1, r0, lsl r3
   16008:	andeq	r6, r1, r0, lsl r3
   1600c:	andeq	r6, r1, r0, lsl r3
   16010:	andeq	r6, r1, r0, lsl r3
   16014:	andeq	r6, r1, r4, lsl r1
   16018:	andeq	r6, r1, r0, ror #9
   1601c:	andeq	r6, r1, r0, ror #3
   16020:	andeq	r6, r1, r0, ror #3
   16024:	andeq	r6, r1, r0, ror #3
   16028:	andeq	r6, r1, r0, ror #3
   1602c:	andeq	r6, r1, r0, ror #3
   16030:	andeq	r6, r1, r0, ror #3
   16034:	andeq	r6, r1, r0, ror #3
   16038:	andeq	r6, r1, r0, ror #3
   1603c:	andeq	r6, r1, r0, ror #3
   16040:	andeq	r6, r1, r0, ror #3
   16044:	andeq	r6, r1, r0, ror #3
   16048:	andeq	r6, r1, r0, ror #3
   1604c:	andeq	r6, r1, r0, ror #3
   16050:	andeq	r6, r1, r0, ror #3
   16054:	andeq	r6, r1, r0, ror #3
   16058:	andeq	r6, r1, r0, ror #3
   1605c:	andeq	r6, r1, r0, ror #3
   16060:	andeq	r6, r1, r0, ror #3
   16064:	andeq	r6, r1, r0, ror #3
   16068:	andeq	r6, r1, r0, ror #3
   1606c:	andeq	r6, r1, r0, ror #3
   16070:	andeq	r6, r1, r0, ror #3
   16074:	andeq	r6, r1, r0, ror #3
   16078:	andeq	r6, r1, r0, ror #3
   1607c:	andeq	r6, r1, r0, ror #3
   16080:	andeq	r6, r1, r0, ror #3
   16084:	andeq	r6, r1, r0, lsl r3
   16088:	andeq	r6, r1, ip, ror #8
   1608c:	andeq	r6, r1, r0, ror #3
   16090:	andeq	r6, r1, r0, lsl r3
   16094:	andeq	r6, r1, r0, ror #3
   16098:	andeq	r6, r1, r0, lsl r3
   1609c:	andeq	r6, r1, r0, ror #3
   160a0:	andeq	r6, r1, r0, ror #3
   160a4:	andeq	r6, r1, r0, ror #3
   160a8:	andeq	r6, r1, r0, ror #3
   160ac:	andeq	r6, r1, r0, ror #3
   160b0:	andeq	r6, r1, r0, ror #3
   160b4:	andeq	r6, r1, r0, ror #3
   160b8:	andeq	r6, r1, r0, ror #3
   160bc:	andeq	r6, r1, r0, ror #3
   160c0:	andeq	r6, r1, r0, ror #3
   160c4:	andeq	r6, r1, r0, ror #3
   160c8:	andeq	r6, r1, r0, ror #3
   160cc:	andeq	r6, r1, r0, ror #3
   160d0:	andeq	r6, r1, r0, ror #3
   160d4:	andeq	r6, r1, r0, ror #3
   160d8:	andeq	r6, r1, r0, ror #3
   160dc:	andeq	r6, r1, r0, ror #3
   160e0:	andeq	r6, r1, r0, ror #3
   160e4:	andeq	r6, r1, r0, ror #3
   160e8:	andeq	r6, r1, r0, ror #3
   160ec:	andeq	r6, r1, r0, ror #3
   160f0:	andeq	r6, r1, r0, ror #3
   160f4:	andeq	r6, r1, r0, ror #3
   160f8:	andeq	r6, r1, r0, ror #3
   160fc:	andeq	r6, r1, r0, ror #3
   16100:	andeq	r6, r1, r0, ror #3
   16104:	strdeq	r6, [r1], -r0
   16108:	andeq	r6, r1, r0, lsl r3
   1610c:	strdeq	r6, [r1], -r0
   16110:	andeq	r6, r1, r8, lsl #6
   16114:	ldr	ip, [sp, #160]	; 0xa0
   16118:	cmp	ip, #2
   1611c:	beq	16978 <__assert_fail@plt+0x5324>
   16120:	cmp	ip, #3
   16124:	bne	161e0 <__assert_fail@plt+0x4b8c>
   16128:	ldr	ip, [sp, #164]	; 0xa4
   1612c:	tst	ip, #4
   16130:	beq	161e0 <__assert_fail@plt+0x4b8c>
   16134:	add	r3, r9, #2
   16138:	cmp	sl, r3
   1613c:	bls	161e0 <__assert_fail@plt+0x4b8c>
   16140:	ldrb	r2, [r6, #1]
   16144:	mov	r1, #1
   16148:	cmp	r2, #63	; 0x3f
   1614c:	bne	161e0 <__assert_fail@plt+0x4b8c>
   16150:	ldr	r0, [sp, #40]	; 0x28
   16154:	ldrb	ip, [r0, r3]
   16158:	sub	r0, ip, #33	; 0x21
   1615c:	uxtb	r0, r0
   16160:	cmp	r0, #29
   16164:	bhi	161e0 <__assert_fail@plt+0x4b8c>
   16168:	lsl	r1, r1, r0
   1616c:	movw	r0, #20929	; 0x51c1
   16170:	movt	r0, #14336	; 0x3800
   16174:	and	r0, r1, r0
   16178:	cmp	r0, #0
   1617c:	beq	161e0 <__assert_fail@plt+0x4b8c>
   16180:	ldr	r1, [sp, #36]	; 0x24
   16184:	cmp	r1, #0
   16188:	bne	1632c <__assert_fail@plt+0x4cd8>
   1618c:	cmp	r4, fp
   16190:	mov	r5, ip
   16194:	mov	r9, r3
   16198:	ldrcc	r0, [sp, #44]	; 0x2c
   1619c:	strbcc	r2, [r0, r4]
   161a0:	add	r2, r4, #1
   161a4:	cmp	fp, r2
   161a8:	ldrhi	r0, [sp, #44]	; 0x2c
   161ac:	movhi	r1, #34	; 0x22
   161b0:	strbhi	r1, [r0, r2]
   161b4:	add	r2, r4, #2
   161b8:	cmp	fp, r2
   161bc:	ldrhi	r0, [sp, #44]	; 0x2c
   161c0:	movhi	r1, #34	; 0x22
   161c4:	strbhi	r1, [r0, r2]
   161c8:	add	r2, r4, #3
   161cc:	cmp	fp, r2
   161d0:	add	r4, r4, #4
   161d4:	ldrhi	r0, [sp, #44]	; 0x2c
   161d8:	movhi	r1, #63	; 0x3f
   161dc:	strbhi	r1, [r0, r2]
   161e0:	ldr	ip, [sp, #48]	; 0x30
   161e4:	cmp	ip, #0
   161e8:	bne	16210 <__assert_fail@plt+0x4bbc>
   161ec:	ldr	ip, [sp, #52]	; 0x34
   161f0:	cmp	ip, #0
   161f4:	beq	16210 <__assert_fail@plt+0x4bbc>
   161f8:	ubfx	r3, r5, #5, #8
   161fc:	and	r2, r5, #31
   16200:	mov	r1, #1
   16204:	ldr	r3, [ip, r3, lsl #2]
   16208:	ands	r3, r3, r1, lsl r2
   1620c:	bne	16218 <__assert_fail@plt+0x4bc4>
   16210:	cmp	r7, #0
   16214:	beq	16238 <__assert_fail@plt+0x4be4>
   16218:	ldr	ip, [sp, #36]	; 0x24
   1621c:	cmp	ip, #0
   16220:	bne	1632c <__assert_fail@plt+0x4cd8>
   16224:	cmp	r4, fp
   16228:	ldrcc	ip, [sp, #44]	; 0x2c
   1622c:	movcc	r3, #92	; 0x5c
   16230:	strbcc	r3, [ip, r4]
   16234:	add	r4, r4, #1
   16238:	add	r9, r9, #1
   1623c:	cmp	r4, fp
   16240:	ldrcc	ip, [sp, #44]	; 0x2c
   16244:	strbcc	r5, [ip, r4]
   16248:	cmn	sl, #1
   1624c:	add	r4, r4, #1
   16250:	bne	15ed8 <__assert_fail@plt+0x4884>
   16254:	ldr	ip, [sp, #40]	; 0x28
   16258:	ldrb	r3, [ip, r9]
   1625c:	adds	r3, r3, #0
   16260:	movne	r3, #1
   16264:	cmp	r3, #0
   16268:	bne	15ee8 <__assert_fail@plt+0x4894>
   1626c:	ldr	ip, [sp, #160]	; 0xa0
   16270:	cmp	r4, #0
   16274:	cmpeq	ip, #2
   16278:	bne	16288 <__assert_fail@plt+0x4c34>
   1627c:	ldr	ip, [sp, #36]	; 0x24
   16280:	cmp	ip, #0
   16284:	bne	1632c <__assert_fail@plt+0x4cd8>
   16288:	ldr	ip, [sp, #36]	; 0x24
   1628c:	eor	r3, ip, #1
   16290:	ldr	ip, [sp, #56]	; 0x38
   16294:	cmp	ip, #0
   16298:	moveq	r3, #0
   1629c:	andne	r3, r3, #1
   162a0:	cmp	r3, #0
   162a4:	beq	162d4 <__assert_fail@plt+0x4c80>
   162a8:	ldrb	r3, [ip]
   162ac:	cmp	r3, #0
   162b0:	beq	162d4 <__assert_fail@plt+0x4c80>
   162b4:	ldr	r1, [sp, #44]	; 0x2c
   162b8:	mov	r2, ip
   162bc:	cmp	fp, r4
   162c0:	strbhi	r3, [r1, r4]
   162c4:	ldrb	r3, [r2, #1]!
   162c8:	add	r4, r4, #1
   162cc:	cmp	r3, #0
   162d0:	bne	162bc <__assert_fail@plt+0x4c68>
   162d4:	cmp	r4, fp
   162d8:	movcs	r0, r4
   162dc:	ldrcc	ip, [sp, #44]	; 0x2c
   162e0:	movcc	r3, #0
   162e4:	movcc	r0, r4
   162e8:	strbcc	r3, [ip, r4]
   162ec:	b	1636c <__assert_fail@plt+0x4d18>
   162f0:	cmn	sl, #1
   162f4:	beq	16988 <__assert_fail@plt+0x5334>
   162f8:	subs	r3, sl, #1
   162fc:	movne	r3, #1
   16300:	cmp	r3, #0
   16304:	bne	161e0 <__assert_fail@plt+0x4b8c>
   16308:	cmp	r9, #0
   1630c:	bne	161e0 <__assert_fail@plt+0x4b8c>
   16310:	ldr	r3, [sp, #36]	; 0x24
   16314:	ldr	ip, [sp, #160]	; 0xa0
   16318:	cmp	ip, #2
   1631c:	movne	r3, #0
   16320:	andeq	r3, r3, #1
   16324:	cmp	r3, #0
   16328:	beq	161e0 <__assert_fail@plt+0x4b8c>
   1632c:	ldr	ip, [sp, #164]	; 0xa4
   16330:	mov	r1, fp
   16334:	ldr	r0, [sp, #44]	; 0x2c
   16338:	bic	r3, ip, #2
   1633c:	ldr	ip, [sp, #160]	; 0xa0
   16340:	str	r3, [sp, #4]
   16344:	mov	r3, sl
   16348:	ldr	r2, [sp, #40]	; 0x28
   1634c:	str	ip, [sp]
   16350:	ldr	ip, [sp, #76]	; 0x4c
   16354:	str	ip, [sp, #12]
   16358:	ldr	ip, [sp, #72]	; 0x48
   1635c:	str	ip, [sp, #16]
   16360:	mov	ip, #0
   16364:	str	ip, [sp, #8]
   16368:	bl	15e04 <__assert_fail@plt+0x47b0>
   1636c:	ldr	ip, [sp, #60]	; 0x3c
   16370:	ldr	r2, [sp, #116]	; 0x74
   16374:	ldr	r3, [ip]
   16378:	cmp	r2, r3
   1637c:	bne	16a6c <__assert_fail@plt+0x5418>
   16380:	add	sp, sp, #124	; 0x7c
   16384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16388:	mov	r3, #114	; 0x72
   1638c:	ldr	r2, [sp, #36]	; 0x24
   16390:	ldr	ip, [sp, #160]	; 0xa0
   16394:	cmp	ip, #2
   16398:	movne	r2, #0
   1639c:	andeq	r2, r2, #1
   163a0:	cmp	r2, #0
   163a4:	bne	1632c <__assert_fail@plt+0x4cd8>
   163a8:	ldr	ip, [sp, #28]
   163ac:	cmp	ip, #0
   163b0:	beq	161e0 <__assert_fail@plt+0x4b8c>
   163b4:	mov	r5, r3
   163b8:	b	16218 <__assert_fail@plt+0x4bc4>
   163bc:	mov	r3, #98	; 0x62
   163c0:	b	163a8 <__assert_fail@plt+0x4d54>
   163c4:	mov	r3, #102	; 0x66
   163c8:	b	163a8 <__assert_fail@plt+0x4d54>
   163cc:	mov	r3, #118	; 0x76
   163d0:	b	163a8 <__assert_fail@plt+0x4d54>
   163d4:	mov	r3, #97	; 0x61
   163d8:	b	163a8 <__assert_fail@plt+0x4d54>
   163dc:	mov	r3, #110	; 0x6e
   163e0:	b	1638c <__assert_fail@plt+0x4d38>
   163e4:	mov	r3, #116	; 0x74
   163e8:	b	1638c <__assert_fail@plt+0x4d38>
   163ec:	ldr	ip, [sp, #28]
   163f0:	cmp	ip, #0
   163f4:	beq	16964 <__assert_fail@plt+0x5310>
   163f8:	ldr	ip, [sp, #36]	; 0x24
   163fc:	cmp	ip, #0
   16400:	bne	1632c <__assert_fail@plt+0x4cd8>
   16404:	cmp	r4, fp
   16408:	add	r2, r4, #1
   1640c:	ldrcc	ip, [sp, #44]	; 0x2c
   16410:	movcc	r3, #92	; 0x5c
   16414:	strbcc	r3, [ip, r4]
   16418:	add	r3, r9, #1
   1641c:	cmp	sl, r3
   16420:	bls	16460 <__assert_fail@plt+0x4e0c>
   16424:	ldr	ip, [sp, #40]	; 0x28
   16428:	ldrb	r3, [ip, r3]
   1642c:	sub	r3, r3, #48	; 0x30
   16430:	cmp	r3, #9
   16434:	bhi	16460 <__assert_fail@plt+0x4e0c>
   16438:	cmp	fp, r2
   1643c:	ldrhi	ip, [sp, #44]	; 0x2c
   16440:	movhi	r3, #48	; 0x30
   16444:	strbhi	r3, [ip, r2]
   16448:	add	r3, r4, #2
   1644c:	cmp	fp, r3
   16450:	ldrhi	ip, [sp, #44]	; 0x2c
   16454:	movhi	r2, #48	; 0x30
   16458:	strbhi	r2, [ip, r3]
   1645c:	add	r2, r4, #3
   16460:	mov	r4, r2
   16464:	mov	r5, #48	; 0x30
   16468:	b	161ec <__assert_fail@plt+0x4b98>
   1646c:	ldr	ip, [sp, #80]	; 0x50
   16470:	cmp	ip, #0
   16474:	beq	16480 <__assert_fail@plt+0x4e2c>
   16478:	cmp	r8, #0
   1647c:	bne	16238 <__assert_fail@plt+0x4be4>
   16480:	mov	r3, r5
   16484:	b	1638c <__assert_fail@plt+0x4d38>
   16488:	ldr	ip, [sp, #160]	; 0xa0
   1648c:	cmp	ip, #2
   16490:	bne	161e0 <__assert_fail@plt+0x4b8c>
   16494:	ldr	ip, [sp, #36]	; 0x24
   16498:	cmp	ip, #0
   1649c:	bne	1632c <__assert_fail@plt+0x4cd8>
   164a0:	cmp	r4, fp
   164a4:	ldrcc	ip, [sp, #44]	; 0x2c
   164a8:	movcc	r3, #39	; 0x27
   164ac:	strbcc	r3, [ip, r4]
   164b0:	add	r3, r4, #1
   164b4:	cmp	fp, r3
   164b8:	ldrhi	ip, [sp, #44]	; 0x2c
   164bc:	movhi	r2, #92	; 0x5c
   164c0:	strbhi	r2, [ip, r3]
   164c4:	add	r3, r4, #2
   164c8:	cmp	fp, r3
   164cc:	add	r4, r4, #3
   164d0:	ldrhi	ip, [sp, #44]	; 0x2c
   164d4:	movhi	r2, #39	; 0x27
   164d8:	strbhi	r2, [ip, r3]
   164dc:	b	161e0 <__assert_fail@plt+0x4b8c>
   164e0:	ldr	ip, [sp, #68]	; 0x44
   164e4:	cmp	ip, #1
   164e8:	bne	167b8 <__assert_fail@plt+0x5164>
   164ec:	bl	1148c <__ctype_b_loc@plt>
   164f0:	sxth	r3, r5
   164f4:	ldr	ip, [sp, #68]	; 0x44
   164f8:	lsl	r3, r3, #1
   164fc:	str	ip, [sp, #64]	; 0x40
   16500:	ldr	r2, [r0]
   16504:	ldrh	r2, [r2, r3]
   16508:	eor	r2, r2, #16384	; 0x4000
   1650c:	ubfx	r2, r2, #14, #1
   16510:	ldr	ip, [sp, #28]
   16514:	ands	r2, r2, ip
   16518:	beq	161e0 <__assert_fail@plt+0x4b8c>
   1651c:	ldr	r3, [sp, #64]	; 0x40
   16520:	mov	r0, #92	; 0x5c
   16524:	ldr	r8, [sp, #36]	; 0x24
   16528:	add	r1, r3, r9
   1652c:	str	sl, [sp, #64]	; 0x40
   16530:	ldr	r3, [sp, #44]	; 0x2c
   16534:	b	16598 <__assert_fail@plt+0x4f44>
   16538:	cmp	r8, #0
   1653c:	bne	169a0 <__assert_fail@plt+0x534c>
   16540:	add	ip, r4, #1
   16544:	cmp	r4, fp
   16548:	strbcc	r0, [r3, r4]
   1654c:	cmp	fp, ip
   16550:	lsrhi	sl, r5, #6
   16554:	addhi	sl, sl, #48	; 0x30
   16558:	strbhi	sl, [r3, ip]
   1655c:	add	ip, r4, #2
   16560:	add	r4, r4, #3
   16564:	cmp	fp, ip
   16568:	ubfxhi	sl, r5, #3, #3
   1656c:	and	r5, r5, #7
   16570:	add	r5, r5, #48	; 0x30
   16574:	addhi	sl, sl, #48	; 0x30
   16578:	strbhi	sl, [r3, ip]
   1657c:	add	r9, r9, #1
   16580:	cmp	r1, r9
   16584:	bls	165c4 <__assert_fail@plt+0x4f70>
   16588:	cmp	r4, fp
   1658c:	strbcc	r5, [r3, r4]
   16590:	ldrb	r5, [r6, #1]!
   16594:	add	r4, r4, #1
   16598:	cmp	r2, #0
   1659c:	bne	16538 <__assert_fail@plt+0x4ee4>
   165a0:	cmp	r7, #0
   165a4:	beq	1657c <__assert_fail@plt+0x4f28>
   165a8:	add	r9, r9, #1
   165ac:	cmp	r4, fp
   165b0:	strbcc	r0, [r3, r4]
   165b4:	cmp	r1, r9
   165b8:	add	r4, r4, #1
   165bc:	mov	r7, #0
   165c0:	bhi	16588 <__assert_fail@plt+0x4f34>
   165c4:	ldr	sl, [sp, #64]	; 0x40
   165c8:	b	1623c <__assert_fail@plt+0x4be8>
   165cc:	ldr	ip, [sp, #36]	; 0x24
   165d0:	cmp	ip, #0
   165d4:	mov	ip, #1
   165d8:	str	ip, [sp, #28]
   165dc:	bne	16a94 <__assert_fail@plt+0x5440>
   165e0:	cmp	fp, #0
   165e4:	beq	169b8 <__assert_fail@plt+0x5364>
   165e8:	str	ip, [sp, #32]
   165ec:	mov	r4, ip
   165f0:	ldr	ip, [sp, #44]	; 0x2c
   165f4:	mov	r3, #34	; 0x22
   165f8:	strb	r3, [ip]
   165fc:	movw	ip, #42132	; 0xa494
   16600:	movt	ip, #1
   16604:	str	ip, [sp, #56]	; 0x38
   16608:	b	15ea8 <__assert_fail@plt+0x4854>
   1660c:	mov	ip, #1
   16610:	mov	r4, #0
   16614:	str	ip, [sp, #36]	; 0x24
   16618:	mov	ip, #1
   1661c:	str	ip, [sp, #28]
   16620:	str	ip, [sp, #32]
   16624:	movw	ip, #42132	; 0xa494
   16628:	movt	ip, #1
   1662c:	str	ip, [sp, #56]	; 0x38
   16630:	mov	ip, #3
   16634:	str	ip, [sp, #160]	; 0xa0
   16638:	b	15ea8 <__assert_fail@plt+0x4854>
   1663c:	mov	ip, #0
   16640:	str	ip, [sp, #36]	; 0x24
   16644:	mov	ip, #1
   16648:	str	ip, [sp, #28]
   1664c:	mov	ip, #0
   16650:	str	ip, [sp, #32]
   16654:	str	ip, [sp, #56]	; 0x38
   16658:	mov	r4, ip
   1665c:	b	15ea8 <__assert_fail@plt+0x4854>
   16660:	ldr	ip, [sp, #160]	; 0xa0
   16664:	cmp	ip, #8
   16668:	beq	16694 <__assert_fail@plt+0x5040>
   1666c:	mov	r1, ip
   16670:	movw	r0, #42144	; 0xa4a0
   16674:	movt	r0, #1
   16678:	bl	15cbc <__assert_fail@plt+0x4668>
   1667c:	ldr	r1, [sp, #160]	; 0xa0
   16680:	str	r0, [sp, #76]	; 0x4c
   16684:	movw	r0, #42128	; 0xa490
   16688:	movt	r0, #1
   1668c:	bl	15cbc <__assert_fail@plt+0x4668>
   16690:	str	r0, [sp, #72]	; 0x48
   16694:	ldr	ip, [sp, #36]	; 0x24
   16698:	cmp	ip, #0
   1669c:	movne	r4, #0
   166a0:	bne	166d8 <__assert_fail@plt+0x5084>
   166a4:	ldr	ip, [sp, #76]	; 0x4c
   166a8:	ldrb	r3, [ip]
   166ac:	cmp	r3, #0
   166b0:	beq	16a64 <__assert_fail@plt+0x5410>
   166b4:	ldr	r4, [sp, #36]	; 0x24
   166b8:	mov	r2, ip
   166bc:	ldr	r1, [sp, #44]	; 0x2c
   166c0:	cmp	r4, fp
   166c4:	strbcc	r3, [r1, r4]
   166c8:	ldrb	r3, [r2, #1]!
   166cc:	add	r4, r4, #1
   166d0:	cmp	r3, #0
   166d4:	bne	166c0 <__assert_fail@plt+0x506c>
   166d8:	ldr	r0, [sp, #72]	; 0x48
   166dc:	str	r0, [sp, #56]	; 0x38
   166e0:	bl	114bc <strlen@plt>
   166e4:	mov	ip, #1
   166e8:	str	ip, [sp, #28]
   166ec:	str	r0, [sp, #32]
   166f0:	b	15ea8 <__assert_fail@plt+0x4854>
   166f4:	mov	ip, #1
   166f8:	mov	r4, #0
   166fc:	str	ip, [sp, #36]	; 0x24
   16700:	mov	ip, #0
   16704:	str	ip, [sp, #28]
   16708:	mov	ip, #1
   1670c:	str	ip, [sp, #32]
   16710:	mov	ip, #2
   16714:	str	ip, [sp, #160]	; 0xa0
   16718:	movw	ip, #42128	; 0xa490
   1671c:	movt	ip, #1
   16720:	str	ip, [sp, #56]	; 0x38
   16724:	b	15ea8 <__assert_fail@plt+0x4854>
   16728:	ldr	ip, [sp, #36]	; 0x24
   1672c:	cmp	ip, #0
   16730:	bne	16a70 <__assert_fail@plt+0x541c>
   16734:	cmp	fp, #0
   16738:	mov	ip, #1
   1673c:	str	ip, [sp, #32]
   16740:	beq	169d4 <__assert_fail@plt+0x5380>
   16744:	mov	r4, ip
   16748:	ldr	ip, [sp, #44]	; 0x2c
   1674c:	mov	r3, #39	; 0x27
   16750:	strb	r3, [ip]
   16754:	ldr	ip, [sp, #36]	; 0x24
   16758:	str	ip, [sp, #28]
   1675c:	movw	ip, #42128	; 0xa490
   16760:	movt	ip, #1
   16764:	str	ip, [sp, #56]	; 0x38
   16768:	b	15ea8 <__assert_fail@plt+0x4854>
   1676c:	ldr	ip, [sp, #32]
   16770:	add	r3, r9, ip
   16774:	ldr	ip, [sp, #40]	; 0x28
   16778:	cmp	sl, r3
   1677c:	add	r6, ip, r9
   16780:	bcc	167b0 <__assert_fail@plt+0x515c>
   16784:	ldr	r1, [sp, #56]	; 0x38
   16788:	mov	r0, r6
   1678c:	ldr	r2, [sp, #32]
   16790:	bl	11360 <memcmp@plt>
   16794:	cmp	r0, #0
   16798:	bne	167b0 <__assert_fail@plt+0x515c>
   1679c:	ldr	ip, [sp, #36]	; 0x24
   167a0:	cmp	ip, #0
   167a4:	bne	1632c <__assert_fail@plt+0x4cd8>
   167a8:	mov	r7, #1
   167ac:	b	15f08 <__assert_fail@plt+0x48b4>
   167b0:	mov	r7, #0
   167b4:	b	15f08 <__assert_fail@plt+0x48b4>
   167b8:	cmn	sl, #1
   167bc:	mov	r3, #0
   167c0:	str	r3, [sp, #108]	; 0x6c
   167c4:	str	r3, [sp, #112]	; 0x70
   167c8:	beq	169a8 <__assert_fail@plt+0x5354>
   167cc:	ldr	ip, [sp, #40]	; 0x28
   167d0:	mov	r1, #0
   167d4:	str	r6, [sp, #100]	; 0x64
   167d8:	ldr	r6, [sp, #36]	; 0x24
   167dc:	sub	ip, ip, #1
   167e0:	str	ip, [sp, #84]	; 0x54
   167e4:	mov	ip, #1
   167e8:	str	r5, [sp, #92]	; 0x5c
   167ec:	mov	r5, r1
   167f0:	str	r7, [sp, #96]	; 0x60
   167f4:	mov	r7, ip
   167f8:	str	r1, [sp, #64]	; 0x40
   167fc:	str	r4, [sp, #88]	; 0x58
   16800:	ldr	ip, [sp, #40]	; 0x28
   16804:	add	r8, r5, r9
   16808:	rsb	r2, r8, sl
   1680c:	add	r0, sp, #104	; 0x68
   16810:	add	r4, ip, r8
   16814:	add	r3, sp, #108	; 0x6c
   16818:	mov	r1, r4
   1681c:	bl	11420 <mbrtowc@plt>
   16820:	subs	r2, r0, #0
   16824:	beq	1692c <__assert_fail@plt+0x52d8>
   16828:	cmn	r2, #1
   1682c:	beq	16a48 <__assert_fail@plt+0x53f4>
   16830:	cmn	r2, #2
   16834:	beq	169ec <__assert_fail@plt+0x5398>
   16838:	ldr	ip, [sp, #160]	; 0xa0
   1683c:	cmp	ip, #2
   16840:	movne	r3, #0
   16844:	andeq	r3, r6, #1
   16848:	cmp	r3, #0
   1684c:	beq	16908 <__assert_fail@plt+0x52b4>
   16850:	cmp	r2, #1
   16854:	beq	16908 <__assert_fail@plt+0x52b4>
   16858:	ldr	ip, [sp, #84]	; 0x54
   1685c:	add	r3, ip, r2
   16860:	add	r8, r3, r8
   16864:	ldrb	r3, [r4, #1]!
   16868:	sub	r3, r3, #91	; 0x5b
   1686c:	cmp	r3, #33	; 0x21
   16870:	ldrls	pc, [pc, r3, lsl #2]
   16874:	b	16900 <__assert_fail@plt+0x52ac>
   16878:	andeq	r6, r1, ip, lsr #6
   1687c:	andeq	r6, r1, ip, lsr #6
   16880:	andeq	r6, r1, r0, lsl #18
   16884:	andeq	r6, r1, ip, lsr #6
   16888:	andeq	r6, r1, r0, lsl #18
   1688c:	andeq	r6, r1, ip, lsr #6
   16890:	andeq	r6, r1, r0, lsl #18
   16894:	andeq	r6, r1, r0, lsl #18
   16898:	andeq	r6, r1, r0, lsl #18
   1689c:	andeq	r6, r1, r0, lsl #18
   168a0:	andeq	r6, r1, r0, lsl #18
   168a4:	andeq	r6, r1, r0, lsl #18
   168a8:	andeq	r6, r1, r0, lsl #18
   168ac:	andeq	r6, r1, r0, lsl #18
   168b0:	andeq	r6, r1, r0, lsl #18
   168b4:	andeq	r6, r1, r0, lsl #18
   168b8:	andeq	r6, r1, r0, lsl #18
   168bc:	andeq	r6, r1, r0, lsl #18
   168c0:	andeq	r6, r1, r0, lsl #18
   168c4:	andeq	r6, r1, r0, lsl #18
   168c8:	andeq	r6, r1, r0, lsl #18
   168cc:	andeq	r6, r1, r0, lsl #18
   168d0:	andeq	r6, r1, r0, lsl #18
   168d4:	andeq	r6, r1, r0, lsl #18
   168d8:	andeq	r6, r1, r0, lsl #18
   168dc:	andeq	r6, r1, r0, lsl #18
   168e0:	andeq	r6, r1, r0, lsl #18
   168e4:	andeq	r6, r1, r0, lsl #18
   168e8:	andeq	r6, r1, r0, lsl #18
   168ec:	andeq	r6, r1, r0, lsl #18
   168f0:	andeq	r6, r1, r0, lsl #18
   168f4:	andeq	r6, r1, r0, lsl #18
   168f8:	andeq	r6, r1, r0, lsl #18
   168fc:	andeq	r6, r1, ip, lsr #6
   16900:	cmp	r4, r8
   16904:	bne	16864 <__assert_fail@plt+0x5210>
   16908:	ldr	r0, [sp, #104]	; 0x68
   1690c:	add	r5, r5, r2
   16910:	bl	113b4 <iswprint@plt>
   16914:	cmp	r0, #0
   16918:	add	r0, sp, #108	; 0x6c
   1691c:	moveq	r7, #0
   16920:	bl	1133c <mbsinit@plt>
   16924:	cmp	r0, #0
   16928:	beq	16800 <__assert_fail@plt+0x51ac>
   1692c:	mov	ip, r7
   16930:	eor	r2, ip, #1
   16934:	str	r5, [sp, #64]	; 0x40
   16938:	ldr	r4, [sp, #88]	; 0x58
   1693c:	uxtb	r2, r2
   16940:	ldr	r5, [sp, #92]	; 0x5c
   16944:	ldr	r7, [sp, #96]	; 0x60
   16948:	ldr	r6, [sp, #100]	; 0x64
   1694c:	ldr	r1, [sp, #64]	; 0x40
   16950:	cmp	r1, #1
   16954:	bls	16510 <__assert_fail@plt+0x4ebc>
   16958:	ldr	ip, [sp, #28]
   1695c:	and	r2, r2, ip
   16960:	b	1651c <__assert_fail@plt+0x4ec8>
   16964:	ldr	ip, [sp, #164]	; 0xa4
   16968:	tst	ip, #1
   1696c:	addne	r9, r9, #1
   16970:	bne	15ed0 <__assert_fail@plt+0x487c>
   16974:	b	161e0 <__assert_fail@plt+0x4b8c>
   16978:	ldr	ip, [sp, #36]	; 0x24
   1697c:	cmp	ip, #0
   16980:	beq	161e0 <__assert_fail@plt+0x4b8c>
   16984:	b	1632c <__assert_fail@plt+0x4cd8>
   16988:	ldr	ip, [sp, #40]	; 0x28
   1698c:	ldrb	r3, [ip, #1]
   16990:	adds	r3, r3, #0
   16994:	movne	r3, #1
   16998:	b	16300 <__assert_fail@plt+0x4cac>
   1699c:	bl	11630 <abort@plt>
   169a0:	ldr	sl, [sp, #64]	; 0x40
   169a4:	b	1632c <__assert_fail@plt+0x4cd8>
   169a8:	ldr	r0, [sp, #40]	; 0x28
   169ac:	bl	114bc <strlen@plt>
   169b0:	mov	sl, r0
   169b4:	b	167cc <__assert_fail@plt+0x5178>
   169b8:	mov	ip, #1
   169bc:	str	ip, [sp, #32]
   169c0:	mov	r4, ip
   169c4:	movw	ip, #42132	; 0xa494
   169c8:	movt	ip, #1
   169cc:	str	ip, [sp, #56]	; 0x38
   169d0:	b	15ea8 <__assert_fail@plt+0x4854>
   169d4:	movw	ip, #42128	; 0xa490
   169d8:	mov	r4, #1
   169dc:	movt	ip, #1
   169e0:	str	fp, [sp, #28]
   169e4:	str	ip, [sp, #56]	; 0x38
   169e8:	b	15ea8 <__assert_fail@plt+0x4854>
   169ec:	cmp	sl, r8
   169f0:	str	r5, [sp, #64]	; 0x40
   169f4:	mov	ip, r4
   169f8:	ldr	r7, [sp, #96]	; 0x60
   169fc:	ldr	r5, [sp, #92]	; 0x5c
   16a00:	ldr	r4, [sp, #88]	; 0x58
   16a04:	ldr	r6, [sp, #100]	; 0x64
   16a08:	bls	16a40 <__assert_fail@plt+0x53ec>
   16a0c:	ldrb	r3, [ip]
   16a10:	cmp	r3, #0
   16a14:	beq	16a40 <__assert_fail@plt+0x53ec>
   16a18:	ldr	r3, [sp, #64]	; 0x40
   16a1c:	b	16a2c <__assert_fail@plt+0x53d8>
   16a20:	ldrb	r2, [r6, r3]
   16a24:	cmp	r2, #0
   16a28:	beq	16a3c <__assert_fail@plt+0x53e8>
   16a2c:	add	r3, r3, #1
   16a30:	add	r2, r9, r3
   16a34:	cmp	sl, r2
   16a38:	bhi	16a20 <__assert_fail@plt+0x53cc>
   16a3c:	str	r3, [sp, #64]	; 0x40
   16a40:	mov	r2, #1
   16a44:	b	1694c <__assert_fail@plt+0x52f8>
   16a48:	str	r5, [sp, #64]	; 0x40
   16a4c:	mov	r2, #1
   16a50:	ldr	r4, [sp, #88]	; 0x58
   16a54:	ldr	r7, [sp, #96]	; 0x60
   16a58:	ldr	r5, [sp, #92]	; 0x5c
   16a5c:	ldr	r6, [sp, #100]	; 0x64
   16a60:	b	1694c <__assert_fail@plt+0x52f8>
   16a64:	ldr	r4, [sp, #36]	; 0x24
   16a68:	b	166d8 <__assert_fail@plt+0x5084>
   16a6c:	bl	11378 <__stack_chk_fail@plt>
   16a70:	mov	ip, #0
   16a74:	mov	r4, #0
   16a78:	str	ip, [sp, #28]
   16a7c:	movw	ip, #42128	; 0xa490
   16a80:	movt	ip, #1
   16a84:	str	ip, [sp, #56]	; 0x38
   16a88:	mov	ip, #1
   16a8c:	str	ip, [sp, #32]
   16a90:	b	15ea8 <__assert_fail@plt+0x4854>
   16a94:	mov	ip, #1
   16a98:	mov	r4, #0
   16a9c:	str	ip, [sp, #32]
   16aa0:	movw	ip, #42132	; 0xa494
   16aa4:	movt	ip, #1
   16aa8:	str	ip, [sp, #56]	; 0x38
   16aac:	b	15ea8 <__assert_fail@plt+0x4854>
   16ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ab4:	sub	sp, sp, #44	; 0x2c
   16ab8:	mov	r6, r0
   16abc:	mov	r9, r1
   16ac0:	mov	sl, r2
   16ac4:	mov	r4, r3
   16ac8:	bl	114f8 <__errno_location@plt>
   16acc:	movw	r7, #45416	; 0xb168
   16ad0:	cmp	r6, #0
   16ad4:	movt	r7, #2
   16ad8:	ldr	r5, [r7]
   16adc:	ldr	r1, [r0]
   16ae0:	mov	r8, r0
   16ae4:	str	r1, [sp, #36]	; 0x24
   16ae8:	blt	16c58 <__assert_fail@plt+0x5604>
   16aec:	ldr	r3, [r7, #4]
   16af0:	cmp	r6, r3
   16af4:	bcc	16b40 <__assert_fail@plt+0x54ec>
   16af8:	add	fp, r6, #1
   16afc:	cmn	fp, #-536870911	; 0xe0000001
   16b00:	bhi	16c5c <__assert_fail@plt+0x5608>
   16b04:	add	r3, r7, #8
   16b08:	cmp	r5, r3
   16b0c:	beq	16c30 <__assert_fail@plt+0x55dc>
   16b10:	mov	r0, r5
   16b14:	lsl	r1, fp, #3
   16b18:	bl	177e8 <__assert_fail@plt+0x6194>
   16b1c:	mov	r5, r0
   16b20:	str	r0, [r7]
   16b24:	ldr	r0, [r7, #4]
   16b28:	mov	r1, #0
   16b2c:	rsb	r2, r0, fp
   16b30:	add	r0, r5, r0, lsl #3
   16b34:	lsl	r2, r2, #3
   16b38:	bl	11510 <memset@plt>
   16b3c:	str	fp, [r7, #4]
   16b40:	add	r2, r4, #8
   16b44:	str	r2, [sp, #32]
   16b48:	ldr	r1, [r4]
   16b4c:	add	fp, r5, r6, lsl #3
   16b50:	ldr	lr, [sp, #32]
   16b54:	mov	r2, r9
   16b58:	ldr	r3, [r4, #4]
   16b5c:	ldr	ip, [r5, r6, lsl #3]
   16b60:	ldr	r7, [fp, #4]
   16b64:	orr	r3, r3, #1
   16b68:	str	r1, [sp]
   16b6c:	str	r3, [sp, #4]
   16b70:	mov	r1, ip
   16b74:	str	lr, [sp, #8]
   16b78:	mov	r0, r7
   16b7c:	ldr	lr, [r4, #40]	; 0x28
   16b80:	str	r3, [sp, #28]
   16b84:	mov	r3, sl
   16b88:	str	lr, [sp, #12]
   16b8c:	ldr	lr, [r4, #44]	; 0x2c
   16b90:	str	ip, [sp, #24]
   16b94:	str	lr, [sp, #16]
   16b98:	bl	15e04 <__assert_fail@plt+0x47b0>
   16b9c:	ldr	ip, [sp, #24]
   16ba0:	cmp	ip, r0
   16ba4:	bhi	16c1c <__assert_fail@plt+0x55c8>
   16ba8:	movw	r3, #45716	; 0xb294
   16bac:	movt	r3, #2
   16bb0:	cmp	r7, r3
   16bb4:	add	r1, r0, #1
   16bb8:	str	r1, [r5, r6, lsl #3]
   16bbc:	beq	16bd0 <__assert_fail@plt+0x557c>
   16bc0:	mov	r0, r7
   16bc4:	str	r1, [sp, #24]
   16bc8:	bl	11300 <free@plt>
   16bcc:	ldr	r1, [sp, #24]
   16bd0:	mov	r0, r1
   16bd4:	str	r1, [sp, #24]
   16bd8:	bl	177c0 <__assert_fail@plt+0x616c>
   16bdc:	ldr	ip, [r4]
   16be0:	ldr	r3, [sp, #28]
   16be4:	mov	r2, r9
   16be8:	ldr	lr, [sp, #32]
   16bec:	ldr	r1, [sp, #24]
   16bf0:	str	r0, [fp, #4]
   16bf4:	mov	r7, r0
   16bf8:	str	r3, [sp, #4]
   16bfc:	mov	r3, sl
   16c00:	str	lr, [sp, #8]
   16c04:	str	ip, [sp]
   16c08:	ldr	ip, [r4, #40]	; 0x28
   16c0c:	str	ip, [sp, #12]
   16c10:	ldr	ip, [r4, #44]	; 0x2c
   16c14:	str	ip, [sp, #16]
   16c18:	bl	15e04 <__assert_fail@plt+0x47b0>
   16c1c:	ldr	r1, [sp, #36]	; 0x24
   16c20:	mov	r0, r7
   16c24:	str	r1, [r8]
   16c28:	add	sp, sp, #44	; 0x2c
   16c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c30:	lsl	r1, fp, #3
   16c34:	mov	r0, #0
   16c38:	str	r3, [sp, #24]
   16c3c:	bl	177e8 <__assert_fail@plt+0x6194>
   16c40:	ldr	r3, [sp, #24]
   16c44:	mov	r5, r0
   16c48:	ldm	r3, {r0, r1}
   16c4c:	str	r5, [r7]
   16c50:	stm	r5, {r0, r1}
   16c54:	b	16b24 <__assert_fail@plt+0x54d0>
   16c58:	bl	11630 <abort@plt>
   16c5c:	bl	178f8 <__assert_fail@plt+0x62a4>
   16c60:	push	{r4, r5, r6, lr}
   16c64:	mov	r5, r0
   16c68:	bl	114f8 <__errno_location@plt>
   16c6c:	cmp	r5, #0
   16c70:	mov	r1, #48	; 0x30
   16c74:	mov	r4, r0
   16c78:	ldr	r0, [pc, #16]	; 16c90 <__assert_fail@plt+0x563c>
   16c7c:	ldr	r6, [r4]
   16c80:	movne	r0, r5
   16c84:	bl	178b8 <__assert_fail@plt+0x6264>
   16c88:	str	r6, [r4]
   16c8c:	pop	{r4, r5, r6, pc}
   16c90:	muleq	r2, r4, r3
   16c94:	ldr	r3, [pc, #12]	; 16ca8 <__assert_fail@plt+0x5654>
   16c98:	cmp	r0, #0
   16c9c:	moveq	r0, r3
   16ca0:	ldr	r0, [r0]
   16ca4:	bx	lr
   16ca8:	muleq	r2, r4, r3
   16cac:	ldr	r3, [pc, #12]	; 16cc0 <__assert_fail@plt+0x566c>
   16cb0:	cmp	r0, #0
   16cb4:	moveq	r0, r3
   16cb8:	str	r1, [r0]
   16cbc:	bx	lr
   16cc0:	muleq	r2, r4, r3
   16cc4:	ldr	r3, [pc, #48]	; 16cfc <__assert_fail@plt+0x56a8>
   16cc8:	lsr	ip, r1, #5
   16ccc:	cmp	r0, #0
   16cd0:	and	r1, r1, #31
   16cd4:	moveq	r0, r3
   16cd8:	add	r3, r0, ip, lsl #2
   16cdc:	ldr	ip, [r3, #8]
   16ce0:	lsr	r0, ip, r1
   16ce4:	eor	r2, r0, r2
   16ce8:	and	r0, r0, #1
   16cec:	and	r2, r2, #1
   16cf0:	eor	ip, ip, r2, lsl r1
   16cf4:	str	ip, [r3, #8]
   16cf8:	bx	lr
   16cfc:	muleq	r2, r4, r3
   16d00:	ldr	r3, [pc, #16]	; 16d18 <__assert_fail@plt+0x56c4>
   16d04:	cmp	r0, #0
   16d08:	movne	r3, r0
   16d0c:	ldr	r0, [r3, #4]
   16d10:	str	r1, [r3, #4]
   16d14:	bx	lr
   16d18:	muleq	r2, r4, r3
   16d1c:	push	{r3, lr}
   16d20:	cmp	r0, #0
   16d24:	ldr	r3, [pc, #32]	; 16d4c <__assert_fail@plt+0x56f8>
   16d28:	mov	ip, #8
   16d2c:	moveq	r0, r3
   16d30:	cmp	r2, #0
   16d34:	cmpne	r1, #0
   16d38:	str	ip, [r0]
   16d3c:	strne	r1, [r0, #40]	; 0x28
   16d40:	strne	r2, [r0, #44]	; 0x2c
   16d44:	popne	{r3, pc}
   16d48:	bl	11630 <abort@plt>
   16d4c:	muleq	r2, r4, r3
   16d50:	push	{r4, r5, r6, r7, r8, r9, lr}
   16d54:	sub	sp, sp, #28
   16d58:	mov	r6, r0
   16d5c:	ldr	r0, [pc, #100]	; 16dc8 <__assert_fail@plt+0x5774>
   16d60:	ldr	r4, [sp, #56]	; 0x38
   16d64:	mov	r9, r1
   16d68:	mov	r8, r2
   16d6c:	mov	r7, r3
   16d70:	cmp	r4, #0
   16d74:	moveq	r4, r0
   16d78:	bl	114f8 <__errno_location@plt>
   16d7c:	ldr	ip, [r4]
   16d80:	add	lr, r4, #8
   16d84:	mov	r1, r9
   16d88:	mov	r2, r8
   16d8c:	mov	r3, r7
   16d90:	mov	r5, r0
   16d94:	mov	r0, r6
   16d98:	ldr	r6, [r5]
   16d9c:	str	ip, [sp]
   16da0:	ldr	ip, [r4, #4]
   16da4:	stmib	sp, {ip, lr}
   16da8:	ldr	ip, [r4, #40]	; 0x28
   16dac:	str	ip, [sp, #12]
   16db0:	ldr	ip, [r4, #44]	; 0x2c
   16db4:	str	ip, [sp, #16]
   16db8:	bl	15e04 <__assert_fail@plt+0x47b0>
   16dbc:	str	r6, [r5]
   16dc0:	add	sp, sp, #28
   16dc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16dc8:	muleq	r2, r4, r3
   16dcc:	cmp	r3, #0
   16dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd4:	sub	sp, sp, #36	; 0x24
   16dd8:	ldr	r4, [pc, #196]	; 16ea4 <__assert_fail@plt+0x5850>
   16ddc:	mov	r5, r2
   16de0:	movne	r4, r3
   16de4:	mov	r6, r1
   16de8:	mov	r7, r0
   16dec:	bl	114f8 <__errno_location@plt>
   16df0:	ldr	r1, [r4]
   16df4:	add	r9, r4, #8
   16df8:	ldr	sl, [r4, #4]
   16dfc:	mov	r2, r7
   16e00:	mov	r8, r0
   16e04:	mov	r0, #0
   16e08:	ldr	r3, [r8]
   16e0c:	cmp	r5, r0
   16e10:	orreq	sl, sl, #1
   16e14:	str	r9, [sp, #8]
   16e18:	stm	sp, {r1, sl}
   16e1c:	mov	r1, r0
   16e20:	ldr	ip, [r4, #40]	; 0x28
   16e24:	str	r3, [sp, #28]
   16e28:	mov	r3, r6
   16e2c:	str	ip, [sp, #12]
   16e30:	ldr	ip, [r4, #44]	; 0x2c
   16e34:	str	ip, [sp, #16]
   16e38:	bl	15e04 <__assert_fail@plt+0x47b0>
   16e3c:	add	r1, r0, #1
   16e40:	mov	fp, r0
   16e44:	str	r1, [sp, #24]
   16e48:	mov	r0, r1
   16e4c:	bl	177c0 <__assert_fail@plt+0x616c>
   16e50:	ldr	lr, [r4]
   16e54:	str	sl, [sp, #4]
   16e58:	mov	r3, r6
   16e5c:	str	r9, [sp, #8]
   16e60:	mov	r2, r7
   16e64:	str	lr, [sp]
   16e68:	ldr	lr, [r4, #40]	; 0x28
   16e6c:	ldr	r1, [sp, #24]
   16e70:	str	lr, [sp, #12]
   16e74:	ldr	lr, [r4, #44]	; 0x2c
   16e78:	str	lr, [sp, #16]
   16e7c:	str	r0, [sp, #24]
   16e80:	bl	15e04 <__assert_fail@plt+0x47b0>
   16e84:	ldr	ip, [sp, #24]
   16e88:	cmp	r5, #0
   16e8c:	ldr	r3, [sp, #28]
   16e90:	mov	r0, ip
   16e94:	str	r3, [r8]
   16e98:	strne	fp, [r5]
   16e9c:	add	sp, sp, #36	; 0x24
   16ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea4:	muleq	r2, r4, r3
   16ea8:	mov	r3, r2
   16eac:	mov	r2, #0
   16eb0:	b	16dcc <__assert_fail@plt+0x5778>
   16eb4:	push	{r4, r5, r6, r7, r8, lr}
   16eb8:	movw	r7, #45416	; 0xb168
   16ebc:	movt	r7, #2
   16ec0:	ldr	r6, [r7, #4]
   16ec4:	ldr	r8, [r7]
   16ec8:	cmp	r6, #1
   16ecc:	movhi	r5, r8
   16ed0:	movhi	r4, #1
   16ed4:	bls	16ef0 <__assert_fail@plt+0x589c>
   16ed8:	ldr	r0, [r5, #12]
   16edc:	add	r4, r4, #1
   16ee0:	bl	11300 <free@plt>
   16ee4:	cmp	r4, r6
   16ee8:	add	r5, r5, #8
   16eec:	bne	16ed8 <__assert_fail@plt+0x5884>
   16ef0:	ldr	r0, [r8, #4]
   16ef4:	movw	r4, #45716	; 0xb294
   16ef8:	movt	r4, #2
   16efc:	cmp	r0, r4
   16f00:	beq	16f14 <__assert_fail@plt+0x58c0>
   16f04:	bl	11300 <free@plt>
   16f08:	mov	r3, #256	; 0x100
   16f0c:	str	r4, [r7, #12]
   16f10:	str	r3, [r7, #8]
   16f14:	movw	r4, #45416	; 0xb168
   16f18:	movt	r4, #2
   16f1c:	add	r5, r4, #8
   16f20:	cmp	r8, r5
   16f24:	beq	16f34 <__assert_fail@plt+0x58e0>
   16f28:	mov	r0, r8
   16f2c:	bl	11300 <free@plt>
   16f30:	str	r5, [r4]
   16f34:	mov	r3, #1
   16f38:	str	r3, [r7, #4]
   16f3c:	pop	{r4, r5, r6, r7, r8, pc}
   16f40:	mvn	r2, #0
   16f44:	ldr	r3, [pc]	; 16f4c <__assert_fail@plt+0x58f8>
   16f48:	b	16ab0 <__assert_fail@plt+0x545c>
   16f4c:	muleq	r2, r4, r3
   16f50:	ldr	r3, [pc]	; 16f58 <__assert_fail@plt+0x5904>
   16f54:	b	16ab0 <__assert_fail@plt+0x545c>
   16f58:	muleq	r2, r4, r3
   16f5c:	mov	r1, r0
   16f60:	mvn	r2, #0
   16f64:	mov	r0, #0
   16f68:	ldr	r3, [pc]	; 16f70 <__assert_fail@plt+0x591c>
   16f6c:	b	16ab0 <__assert_fail@plt+0x545c>
   16f70:	muleq	r2, r4, r3
   16f74:	mov	r2, r1
   16f78:	ldr	r3, [pc, #8]	; 16f88 <__assert_fail@plt+0x5934>
   16f7c:	mov	r1, r0
   16f80:	mov	r0, #0
   16f84:	b	16ab0 <__assert_fail@plt+0x545c>
   16f88:	muleq	r2, r4, r3
   16f8c:	push	{r4, r5, r6, lr}
   16f90:	movw	r4, #45488	; 0xb1b0
   16f94:	movt	r4, #2
   16f98:	sub	sp, sp, #56	; 0x38
   16f9c:	mov	r6, r2
   16fa0:	mov	r5, r0
   16fa4:	ldr	r3, [r4]
   16fa8:	add	r0, sp, #4
   16fac:	str	r3, [sp, #52]	; 0x34
   16fb0:	bl	15c68 <__assert_fail@plt+0x4614>
   16fb4:	add	r3, sp, #4
   16fb8:	mvn	r2, #0
   16fbc:	mov	r0, r5
   16fc0:	mov	r1, r6
   16fc4:	bl	16ab0 <__assert_fail@plt+0x545c>
   16fc8:	ldr	r2, [sp, #52]	; 0x34
   16fcc:	ldr	r3, [r4]
   16fd0:	cmp	r2, r3
   16fd4:	bne	16fe0 <__assert_fail@plt+0x598c>
   16fd8:	add	sp, sp, #56	; 0x38
   16fdc:	pop	{r4, r5, r6, pc}
   16fe0:	bl	11378 <__stack_chk_fail@plt>
   16fe4:	push	{r4, r5, r6, r7, lr}
   16fe8:	movw	r4, #45488	; 0xb1b0
   16fec:	movt	r4, #2
   16ff0:	sub	sp, sp, #60	; 0x3c
   16ff4:	mov	r6, r2
   16ff8:	mov	r7, r3
   16ffc:	ldr	ip, [r4]
   17000:	mov	r5, r0
   17004:	add	r0, sp, #4
   17008:	str	ip, [sp, #52]	; 0x34
   1700c:	bl	15c68 <__assert_fail@plt+0x4614>
   17010:	mov	r2, r7
   17014:	add	r3, sp, #4
   17018:	mov	r0, r5
   1701c:	mov	r1, r6
   17020:	bl	16ab0 <__assert_fail@plt+0x545c>
   17024:	ldr	r2, [sp, #52]	; 0x34
   17028:	ldr	r3, [r4]
   1702c:	cmp	r2, r3
   17030:	bne	1703c <__assert_fail@plt+0x59e8>
   17034:	add	sp, sp, #60	; 0x3c
   17038:	pop	{r4, r5, r6, r7, pc}
   1703c:	bl	11378 <__stack_chk_fail@plt>
   17040:	mov	r2, r1
   17044:	mov	r1, r0
   17048:	mov	r0, #0
   1704c:	b	16f8c <__assert_fail@plt+0x5938>
   17050:	mov	ip, r1
   17054:	mov	r3, r2
   17058:	mov	r1, r0
   1705c:	mov	r2, ip
   17060:	mov	r0, #0
   17064:	b	16fe4 <__assert_fail@plt+0x5990>
   17068:	push	{r4, r5, r6, r7, r8, r9, lr}
   1706c:	mov	r8, r0
   17070:	ldr	lr, [pc, #144]	; 17108 <__assert_fail@plt+0x5ab4>
   17074:	mov	r7, r1
   17078:	mov	r6, r2
   1707c:	lsr	r5, r2, #5
   17080:	sub	sp, sp, #60	; 0x3c
   17084:	add	r5, r5, #2
   17088:	ldm	lr!, {r0, r1, r2, r3}
   1708c:	add	ip, sp, #4
   17090:	add	r9, sp, #56	; 0x38
   17094:	and	r6, r6, #31
   17098:	add	r5, r9, r5, lsl #2
   1709c:	movw	r4, #45488	; 0xb1b0
   170a0:	movt	r4, #2
   170a4:	stmia	ip!, {r0, r1, r2, r3}
   170a8:	ldm	lr!, {r0, r1, r2, r3}
   170ac:	ldr	r9, [r4]
   170b0:	stmia	ip!, {r0, r1, r2, r3}
   170b4:	ldm	lr, {r0, r1, r2, r3}
   170b8:	str	r9, [sp, #52]	; 0x34
   170bc:	stm	ip, {r0, r1, r2, r3}
   170c0:	mov	r2, r7
   170c4:	ldr	ip, [r5, #-52]	; 0xffffffcc
   170c8:	add	r3, sp, #4
   170cc:	mov	r1, r8
   170d0:	mov	r0, #0
   170d4:	lsr	lr, ip, r6
   170d8:	eor	lr, lr, #1
   170dc:	and	lr, lr, #1
   170e0:	eor	ip, ip, lr, lsl r6
   170e4:	str	ip, [r5, #-52]	; 0xffffffcc
   170e8:	bl	16ab0 <__assert_fail@plt+0x545c>
   170ec:	ldr	r2, [sp, #52]	; 0x34
   170f0:	ldr	r3, [r4]
   170f4:	cmp	r2, r3
   170f8:	bne	17104 <__assert_fail@plt+0x5ab0>
   170fc:	add	sp, sp, #60	; 0x3c
   17100:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17104:	bl	11378 <__stack_chk_fail@plt>
   17108:	muleq	r2, r4, r3
   1710c:	mov	r2, r1
   17110:	mvn	r1, #0
   17114:	b	17068 <__assert_fail@plt+0x5a14>
   17118:	mvn	r1, #0
   1711c:	mov	r2, #58	; 0x3a
   17120:	b	17068 <__assert_fail@plt+0x5a14>
   17124:	mov	r2, #58	; 0x3a
   17128:	b	17068 <__assert_fail@plt+0x5a14>
   1712c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17130:	mov	r7, r0
   17134:	ldr	lr, [pc, #124]	; 171b8 <__assert_fail@plt+0x5b64>
   17138:	mov	r9, r1
   1713c:	mov	r8, r2
   17140:	mov	r6, r3
   17144:	sub	sp, sp, #56	; 0x38
   17148:	movw	r4, #45488	; 0xb1b0
   1714c:	ldm	lr!, {r0, r1, r2, r3}
   17150:	add	ip, sp, #4
   17154:	movt	r4, #2
   17158:	ldr	r5, [sp, #88]	; 0x58
   1715c:	ldr	sl, [r4]
   17160:	stmia	ip!, {r0, r1, r2, r3}
   17164:	ldm	lr!, {r0, r1, r2, r3}
   17168:	str	sl, [sp, #52]	; 0x34
   1716c:	stmia	ip!, {r0, r1, r2, r3}
   17170:	ldm	lr, {r0, r1, r2, r3}
   17174:	stm	ip, {r0, r1, r2, r3}
   17178:	mov	r1, r9
   1717c:	mov	r2, r8
   17180:	add	r0, sp, #4
   17184:	bl	16d1c <__assert_fail@plt+0x56c8>
   17188:	mov	r2, r5
   1718c:	add	r3, sp, #4
   17190:	mov	r0, r7
   17194:	mov	r1, r6
   17198:	bl	16ab0 <__assert_fail@plt+0x545c>
   1719c:	ldr	r2, [sp, #52]	; 0x34
   171a0:	ldr	r3, [r4]
   171a4:	cmp	r2, r3
   171a8:	bne	171b4 <__assert_fail@plt+0x5b60>
   171ac:	add	sp, sp, #56	; 0x38
   171b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171b4:	bl	11378 <__stack_chk_fail@plt>
   171b8:	muleq	r2, r4, r3
   171bc:	push	{lr}		; (str lr, [sp, #-4]!)
   171c0:	sub	sp, sp, #12
   171c4:	mvn	ip, #0
   171c8:	str	ip, [sp]
   171cc:	bl	1712c <__assert_fail@plt+0x5ad8>
   171d0:	add	sp, sp, #12
   171d4:	pop	{pc}		; (ldr pc, [sp], #4)
   171d8:	push	{lr}		; (str lr, [sp, #-4]!)
   171dc:	sub	sp, sp, #12
   171e0:	mov	ip, r1
   171e4:	mov	r3, r2
   171e8:	mov	r1, r0
   171ec:	mov	r2, ip
   171f0:	mov	r0, #0
   171f4:	mvn	ip, #0
   171f8:	str	ip, [sp]
   171fc:	bl	1712c <__assert_fail@plt+0x5ad8>
   17200:	add	sp, sp, #12
   17204:	pop	{pc}		; (ldr pc, [sp], #4)
   17208:	push	{lr}		; (str lr, [sp, #-4]!)
   1720c:	sub	sp, sp, #12
   17210:	mov	lr, r1
   17214:	mov	ip, r2
   17218:	mov	r1, r0
   1721c:	str	r3, [sp]
   17220:	mov	r2, lr
   17224:	mov	r3, ip
   17228:	mov	r0, #0
   1722c:	bl	1712c <__assert_fail@plt+0x5ad8>
   17230:	add	sp, sp, #12
   17234:	pop	{pc}		; (ldr pc, [sp], #4)
   17238:	ldr	r3, [pc]	; 17240 <__assert_fail@plt+0x5bec>
   1723c:	b	16ab0 <__assert_fail@plt+0x545c>
   17240:	andeq	fp, r2, r8, ror r1
   17244:	mov	r2, r1
   17248:	ldr	r3, [pc, #8]	; 17258 <__assert_fail@plt+0x5c04>
   1724c:	mov	r1, r0
   17250:	mov	r0, #0
   17254:	b	16ab0 <__assert_fail@plt+0x545c>
   17258:	andeq	fp, r2, r8, ror r1
   1725c:	mvn	r2, #0
   17260:	ldr	r3, [pc]	; 17268 <__assert_fail@plt+0x5c14>
   17264:	b	16ab0 <__assert_fail@plt+0x545c>
   17268:	andeq	fp, r2, r8, ror r1
   1726c:	mov	r1, r0
   17270:	mvn	r2, #0
   17274:	mov	r0, #0
   17278:	ldr	r3, [pc]	; 17280 <__assert_fail@plt+0x5c2c>
   1727c:	b	16ab0 <__assert_fail@plt+0x545c>
   17280:	andeq	fp, r2, r8, ror r1
   17284:	push	{r3, r4, r5, lr}
   17288:	mov	r4, r1
   1728c:	mov	r2, r4
   17290:	mov	r1, #0
   17294:	mov	r5, r0
   17298:	bl	11564 <memchr@plt>
   1729c:	cmp	r0, #0
   172a0:	rsbne	r0, r5, r0
   172a4:	addne	r0, r0, #1
   172a8:	moveq	r0, r4
   172ac:	pop	{r3, r4, r5, pc}
   172b0:	push	{r4, r5, r6, lr}
   172b4:	cmp	r1, #0
   172b8:	sub	sp, sp, #32
   172bc:	mov	ip, r3
   172c0:	mov	r5, r0
   172c4:	ldr	r4, [sp, #48]	; 0x30
   172c8:	ldr	r6, [sp, #52]	; 0x34
   172cc:	beq	17610 <__assert_fail@plt+0x5fbc>
   172d0:	str	r2, [sp]
   172d4:	mov	r3, r1
   172d8:	movw	r2, #42212	; 0xa4e4
   172dc:	str	ip, [sp, #4]
   172e0:	mov	r1, #1
   172e4:	movt	r2, #1
   172e8:	bl	11558 <__fprintf_chk@plt>
   172ec:	mov	r2, #5
   172f0:	movw	r1, #42232	; 0xa4f8
   172f4:	mov	r0, #0
   172f8:	movt	r1, #1
   172fc:	bl	1136c <dcgettext@plt>
   17300:	movw	r1, #2012	; 0x7dc
   17304:	movw	r2, #42992	; 0xa7f0
   17308:	str	r1, [sp]
   1730c:	movt	r2, #1
   17310:	mov	r1, #1
   17314:	mov	r3, r0
   17318:	mov	r0, r5
   1731c:	bl	11558 <__fprintf_chk@plt>
   17320:	movw	r1, #42236	; 0xa4fc
   17324:	mov	r0, #0
   17328:	movt	r1, #1
   1732c:	mov	r2, #5
   17330:	bl	1136c <dcgettext@plt>
   17334:	mov	r1, r5
   17338:	bl	11618 <fputs@plt>
   1733c:	cmp	r6, #9
   17340:	ldrls	pc, [pc, r6, lsl #2]
   17344:	b	1762c <__assert_fail@plt+0x5fd8>
   17348:	ldrdeq	r7, [r1], -ip
   1734c:	andeq	r7, r1, r0, ror #7
   17350:	andeq	r7, r1, r0, lsl r4
   17354:	andeq	r7, r1, r4, asr #8
   17358:	andeq	r7, r1, r0, lsl #9
   1735c:	andeq	r7, r1, r0, asr #9
   17360:	andeq	r7, r1, r8, lsl #10
   17364:	andeq	r7, r1, r8, asr r5
   17368:			; <UNDEFINED> instruction: 0x000175b0
   1736c:	andeq	r7, r1, r0, ror r3
   17370:	movw	r1, #42708	; 0xa6d4
   17374:	movt	r1, #1
   17378:	mov	r0, #0
   1737c:	mov	r2, #5
   17380:	bl	1136c <dcgettext@plt>
   17384:	ldm	r4, {r3, ip}
   17388:	mov	r1, #1
   1738c:	str	ip, [sp]
   17390:	ldr	ip, [r4, #8]
   17394:	str	ip, [sp, #4]
   17398:	ldr	ip, [r4, #12]
   1739c:	str	ip, [sp, #8]
   173a0:	ldr	ip, [r4, #16]
   173a4:	str	ip, [sp, #12]
   173a8:	ldr	ip, [r4, #20]
   173ac:	str	ip, [sp, #16]
   173b0:	ldr	ip, [r4, #24]
   173b4:	str	ip, [sp, #20]
   173b8:	ldr	ip, [r4, #28]
   173bc:	str	ip, [sp, #24]
   173c0:	ldr	ip, [r4, #32]
   173c4:	str	ip, [sp, #28]
   173c8:	mov	r2, r0
   173cc:	mov	r0, r5
   173d0:	bl	11558 <__fprintf_chk@plt>
   173d4:	add	sp, sp, #32
   173d8:	pop	{r4, r5, r6, pc}
   173dc:	bl	11630 <abort@plt>
   173e0:	mov	r2, #5
   173e4:	movw	r1, #42440	; 0xa5c8
   173e8:	mov	r0, #0
   173ec:	movt	r1, #1
   173f0:	bl	1136c <dcgettext@plt>
   173f4:	ldr	r3, [r4]
   173f8:	mov	r1, #1
   173fc:	mov	r2, r0
   17400:	mov	r0, r5
   17404:	add	sp, sp, #32
   17408:	pop	{r4, r5, r6, lr}
   1740c:	b	11558 <__fprintf_chk@plt>
   17410:	mov	r2, #5
   17414:	movw	r1, #42456	; 0xa5d8
   17418:	mov	r0, #0
   1741c:	movt	r1, #1
   17420:	bl	1136c <dcgettext@plt>
   17424:	ldm	r4, {r3, ip}
   17428:	mov	r1, #1
   1742c:	str	ip, [sp, #48]	; 0x30
   17430:	mov	r2, r0
   17434:	mov	r0, r5
   17438:	add	sp, sp, #32
   1743c:	pop	{r4, r5, r6, lr}
   17440:	b	11558 <__fprintf_chk@plt>
   17444:	mov	r2, #5
   17448:	movw	r1, #42480	; 0xa5f0
   1744c:	mov	r0, #0
   17450:	movt	r1, #1
   17454:	bl	1136c <dcgettext@plt>
   17458:	ldm	r4, {r3, ip}
   1745c:	mov	r1, #1
   17460:	str	ip, [sp, #48]	; 0x30
   17464:	ldr	ip, [r4, #8]
   17468:	str	ip, [sp, #52]	; 0x34
   1746c:	mov	r2, r0
   17470:	mov	r0, r5
   17474:	add	sp, sp, #32
   17478:	pop	{r4, r5, r6, lr}
   1747c:	b	11558 <__fprintf_chk@plt>
   17480:	mov	r2, #5
   17484:	movw	r1, #42508	; 0xa60c
   17488:	mov	r0, #0
   1748c:	movt	r1, #1
   17490:	bl	1136c <dcgettext@plt>
   17494:	ldm	r4, {r3, ip}
   17498:	mov	r1, #1
   1749c:	str	ip, [sp]
   174a0:	ldr	ip, [r4, #8]
   174a4:	str	ip, [sp, #4]
   174a8:	ldr	ip, [r4, #12]
   174ac:	str	ip, [sp, #8]
   174b0:	mov	r2, r0
   174b4:	mov	r0, r5
   174b8:	bl	11558 <__fprintf_chk@plt>
   174bc:	b	173d4 <__assert_fail@plt+0x5d80>
   174c0:	mov	r2, #5
   174c4:	movw	r1, #42540	; 0xa62c
   174c8:	mov	r0, #0
   174cc:	movt	r1, #1
   174d0:	bl	1136c <dcgettext@plt>
   174d4:	ldm	r4, {r3, ip}
   174d8:	mov	r1, #1
   174dc:	str	ip, [sp]
   174e0:	ldr	ip, [r4, #8]
   174e4:	str	ip, [sp, #4]
   174e8:	ldr	ip, [r4, #12]
   174ec:	str	ip, [sp, #8]
   174f0:	ldr	ip, [r4, #16]
   174f4:	str	ip, [sp, #12]
   174f8:	mov	r2, r0
   174fc:	mov	r0, r5
   17500:	bl	11558 <__fprintf_chk@plt>
   17504:	b	173d4 <__assert_fail@plt+0x5d80>
   17508:	mov	r2, #5
   1750c:	movw	r1, #42576	; 0xa650
   17510:	mov	r0, #0
   17514:	movt	r1, #1
   17518:	bl	1136c <dcgettext@plt>
   1751c:	ldm	r4, {r3, ip}
   17520:	mov	r1, #1
   17524:	str	ip, [sp]
   17528:	ldr	ip, [r4, #8]
   1752c:	str	ip, [sp, #4]
   17530:	ldr	ip, [r4, #12]
   17534:	str	ip, [sp, #8]
   17538:	ldr	ip, [r4, #16]
   1753c:	str	ip, [sp, #12]
   17540:	ldr	ip, [r4, #20]
   17544:	str	ip, [sp, #16]
   17548:	mov	r2, r0
   1754c:	mov	r0, r5
   17550:	bl	11558 <__fprintf_chk@plt>
   17554:	b	173d4 <__assert_fail@plt+0x5d80>
   17558:	mov	r2, #5
   1755c:	movw	r1, #42616	; 0xa678
   17560:	mov	r0, #0
   17564:	movt	r1, #1
   17568:	bl	1136c <dcgettext@plt>
   1756c:	ldm	r4, {r3, ip}
   17570:	mov	r1, #1
   17574:	str	ip, [sp]
   17578:	ldr	ip, [r4, #8]
   1757c:	str	ip, [sp, #4]
   17580:	ldr	ip, [r4, #12]
   17584:	str	ip, [sp, #8]
   17588:	ldr	ip, [r4, #16]
   1758c:	str	ip, [sp, #12]
   17590:	ldr	ip, [r4, #20]
   17594:	str	ip, [sp, #16]
   17598:	ldr	ip, [r4, #24]
   1759c:	str	ip, [sp, #20]
   175a0:	mov	r2, r0
   175a4:	mov	r0, r5
   175a8:	bl	11558 <__fprintf_chk@plt>
   175ac:	b	173d4 <__assert_fail@plt+0x5d80>
   175b0:	mov	r2, #5
   175b4:	movw	r1, #42660	; 0xa6a4
   175b8:	mov	r0, #0
   175bc:	movt	r1, #1
   175c0:	bl	1136c <dcgettext@plt>
   175c4:	ldm	r4, {r3, ip}
   175c8:	mov	r1, #1
   175cc:	str	ip, [sp]
   175d0:	ldr	ip, [r4, #8]
   175d4:	str	ip, [sp, #4]
   175d8:	ldr	ip, [r4, #12]
   175dc:	str	ip, [sp, #8]
   175e0:	ldr	ip, [r4, #16]
   175e4:	str	ip, [sp, #12]
   175e8:	ldr	ip, [r4, #20]
   175ec:	str	ip, [sp, #16]
   175f0:	ldr	ip, [r4, #24]
   175f4:	str	ip, [sp, #20]
   175f8:	ldr	ip, [r4, #28]
   175fc:	str	ip, [sp, #24]
   17600:	mov	r2, r0
   17604:	mov	r0, r5
   17608:	bl	11558 <__fprintf_chk@plt>
   1760c:	b	173d4 <__assert_fail@plt+0x5d80>
   17610:	str	r3, [sp]
   17614:	mov	r1, #1
   17618:	mov	r3, r2
   1761c:	movw	r2, #42224	; 0xa4f0
   17620:	movt	r2, #1
   17624:	bl	11558 <__fprintf_chk@plt>
   17628:	b	172ec <__assert_fail@plt+0x5c98>
   1762c:	movw	r1, #42760	; 0xa708
   17630:	mov	r0, #0
   17634:	movt	r1, #1
   17638:	b	1737c <__assert_fail@plt+0x5d28>
   1763c:	push	{r4, r5, lr}
   17640:	sub	sp, sp, #12
   17644:	ldr	r5, [sp, #24]
   17648:	ldr	ip, [r5]
   1764c:	cmp	ip, #0
   17650:	beq	1766c <__assert_fail@plt+0x6018>
   17654:	mov	lr, r5
   17658:	mov	ip, #0
   1765c:	ldr	r4, [lr, #4]!
   17660:	add	ip, ip, #1
   17664:	cmp	r4, #0
   17668:	bne	1765c <__assert_fail@plt+0x6008>
   1766c:	stm	sp, {r5, ip}
   17670:	bl	172b0 <__assert_fail@plt+0x5c5c>
   17674:	add	sp, sp, #12
   17678:	pop	{r4, r5, pc}
   1767c:	push	{r4, r5, r6, r7, lr}
   17680:	movw	r7, #45488	; 0xb1b0
   17684:	sub	sp, sp, #60	; 0x3c
   17688:	movt	r7, #2
   1768c:	mov	ip, #0
   17690:	add	r5, sp, #12
   17694:	ldr	r4, [r7]
   17698:	mov	lr, ip
   1769c:	ldr	r6, [sp, #80]	; 0x50
   176a0:	str	r4, [sp, #52]	; 0x34
   176a4:	ldr	r4, [r6, ip]
   176a8:	cmp	r4, #0
   176ac:	str	r4, [r5, ip]
   176b0:	beq	176c4 <__assert_fail@plt+0x6070>
   176b4:	add	lr, lr, #1
   176b8:	add	ip, ip, #4
   176bc:	cmp	lr, #10
   176c0:	bne	176a4 <__assert_fail@plt+0x6050>
   176c4:	stm	sp, {r5, lr}
   176c8:	bl	172b0 <__assert_fail@plt+0x5c5c>
   176cc:	ldr	r2, [sp, #52]	; 0x34
   176d0:	ldr	r3, [r7]
   176d4:	cmp	r2, r3
   176d8:	bne	176e4 <__assert_fail@plt+0x6090>
   176dc:	add	sp, sp, #60	; 0x3c
   176e0:	pop	{r4, r5, r6, r7, pc}
   176e4:	bl	11378 <__stack_chk_fail@plt>
   176e8:	push	{r3}		; (str r3, [sp, #-4]!)
   176ec:	push	{r4, lr}
   176f0:	movw	r4, #45488	; 0xb1b0
   176f4:	movt	r4, #2
   176f8:	sub	sp, sp, #20
   176fc:	add	ip, sp, #32
   17700:	ldr	lr, [r4]
   17704:	ldr	r3, [sp, #28]
   17708:	str	ip, [sp]
   1770c:	str	ip, [sp, #8]
   17710:	str	lr, [sp, #12]
   17714:	bl	1767c <__assert_fail@plt+0x6028>
   17718:	ldr	r2, [sp, #12]
   1771c:	ldr	r3, [r4]
   17720:	cmp	r2, r3
   17724:	bne	17738 <__assert_fail@plt+0x60e4>
   17728:	add	sp, sp, #20
   1772c:	pop	{r4, lr}
   17730:	add	sp, sp, #4
   17734:	bx	lr
   17738:	bl	11378 <__stack_chk_fail@plt>
   1773c:	push	{r3, lr}
   17740:	mov	r2, #5
   17744:	movw	r1, #42820	; 0xa744
   17748:	mov	r0, #0
   1774c:	movt	r1, #1
   17750:	bl	1136c <dcgettext@plt>
   17754:	movw	r2, #42844	; 0xa75c
   17758:	movt	r2, #1
   1775c:	mov	r1, r0
   17760:	mov	r0, #1
   17764:	bl	11534 <__printf_chk@plt>
   17768:	mov	r2, #5
   1776c:	movw	r1, #42868	; 0xa774
   17770:	mov	r0, #0
   17774:	movt	r1, #1
   17778:	bl	1136c <dcgettext@plt>
   1777c:	movw	r2, #41236	; 0xa114
   17780:	movw	r3, #42888	; 0xa788
   17784:	movt	r2, #1
   17788:	movt	r3, #1
   1778c:	mov	r1, r0
   17790:	mov	r0, #1
   17794:	bl	11534 <__printf_chk@plt>
   17798:	movw	r1, #42928	; 0xa7b0
   1779c:	mov	r0, #0
   177a0:	movt	r1, #1
   177a4:	mov	r2, #5
   177a8:	bl	1136c <dcgettext@plt>
   177ac:	movw	r3, #45512	; 0xb1c8
   177b0:	movt	r3, #2
   177b4:	ldr	r1, [r3]
   177b8:	pop	{r3, lr}
   177bc:	b	11618 <fputs@plt>
   177c0:	push	{r4, lr}
   177c4:	mov	r4, r0
   177c8:	bl	11450 <malloc@plt>
   177cc:	rsbs	r3, r0, #1
   177d0:	movcc	r3, #0
   177d4:	cmp	r4, #0
   177d8:	moveq	r3, #0
   177dc:	cmp	r3, #0
   177e0:	popeq	{r4, pc}
   177e4:	bl	178f8 <__assert_fail@plt+0x62a4>
   177e8:	rsbs	r3, r1, #1
   177ec:	push	{r4, lr}
   177f0:	movcc	r3, #0
   177f4:	cmp	r0, #0
   177f8:	mov	r4, r1
   177fc:	moveq	r3, #0
   17800:	cmp	r3, #0
   17804:	bne	17828 <__assert_fail@plt+0x61d4>
   17808:	bl	11390 <realloc@plt>
   1780c:	rsbs	r3, r0, #1
   17810:	movcc	r3, #0
   17814:	cmp	r4, #0
   17818:	moveq	r3, #0
   1781c:	cmp	r3, #0
   17820:	popeq	{r4, pc}
   17824:	bl	178f8 <__assert_fail@plt+0x62a4>
   17828:	bl	11300 <free@plt>
   1782c:	mov	r0, #0
   17830:	pop	{r4, pc}
   17834:	cmp	r0, #0
   17838:	push	{r3, lr}
   1783c:	ldr	r3, [r1]
   17840:	beq	1786c <__assert_fail@plt+0x6218>
   17844:	movw	r2, #43689	; 0xaaa9
   17848:	movt	r2, #43690	; 0xaaaa
   1784c:	cmp	r3, r2
   17850:	addls	r2, r3, #1
   17854:	addls	r3, r3, r2, lsr #1
   17858:	bhi	17884 <__assert_fail@plt+0x6230>
   1785c:	str	r3, [r1]
   17860:	mov	r1, r3
   17864:	pop	{r3, lr}
   17868:	b	177e8 <__assert_fail@plt+0x6194>
   1786c:	cmp	r3, #0
   17870:	moveq	r3, #64	; 0x40
   17874:	str	r3, [r1]
   17878:	mov	r1, r3
   1787c:	pop	{r3, lr}
   17880:	b	177e8 <__assert_fail@plt+0x6194>
   17884:	bl	178f8 <__assert_fail@plt+0x62a4>
   17888:	push	{r4, lr}
   1788c:	mov	r4, r0
   17890:	bl	177c0 <__assert_fail@plt+0x616c>
   17894:	mov	r2, r4
   17898:	mov	r1, #0
   1789c:	pop	{r4, lr}
   178a0:	b	11510 <memset@plt>
   178a4:	push	{r3, lr}
   178a8:	bl	112ac <calloc@plt>
   178ac:	cmp	r0, #0
   178b0:	popne	{r3, pc}
   178b4:	bl	178f8 <__assert_fail@plt+0x62a4>
   178b8:	push	{r3, r4, r5, lr}
   178bc:	mov	r4, r1
   178c0:	mov	r5, r0
   178c4:	mov	r0, r1
   178c8:	bl	177c0 <__assert_fail@plt+0x616c>
   178cc:	mov	r1, r5
   178d0:	mov	r2, r4
   178d4:	pop	{r3, r4, r5, lr}
   178d8:	b	11324 <memcpy@plt>
   178dc:	push	{r4, lr}
   178e0:	mov	r4, r0
   178e4:	bl	114bc <strlen@plt>
   178e8:	add	r1, r0, #1
   178ec:	mov	r0, r4
   178f0:	pop	{r4, lr}
   178f4:	b	178b8 <__assert_fail@plt+0x6264>
   178f8:	movw	r3, #45412	; 0xb164
   178fc:	movt	r3, #2
   17900:	push	{r4, lr}
   17904:	mov	r2, #5
   17908:	movw	r1, #43040	; 0xa820
   1790c:	mov	r0, #0
   17910:	movt	r1, #1
   17914:	ldr	r4, [r3]
   17918:	bl	1136c <dcgettext@plt>
   1791c:	movw	r2, #41868	; 0xa38c
   17920:	mov	r1, #0
   17924:	movt	r2, #1
   17928:	mov	r3, r0
   1792c:	mov	r0, r4
   17930:	bl	1142c <error@plt>
   17934:	bl	11630 <abort@plt>
   17938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1793c:	movw	r5, #45488	; 0xb1b0
   17940:	movt	r5, #2
   17944:	mov	sl, r2
   17948:	cmp	r2, #36	; 0x24
   1794c:	sub	sp, sp, #20
   17950:	ldr	r2, [r5]
   17954:	mov	r6, r0
   17958:	mov	r7, r1
   1795c:	mov	r9, r3
   17960:	ldr	r8, [sp, #56]	; 0x38
   17964:	str	r2, [sp, #12]
   17968:	bhi	17e30 <__assert_fail@plt+0x67dc>
   1796c:	cmp	r1, #0
   17970:	addeq	r7, sp, #8
   17974:	bl	1148c <__ctype_b_loc@plt>
   17978:	ldrb	ip, [r6]
   1797c:	mov	r2, r6
   17980:	ldr	r1, [r0]
   17984:	b	1798c <__assert_fail@plt+0x6338>
   17988:	ldrb	ip, [r2, #1]!
   1798c:	lsl	r3, ip, #1
   17990:	ldrh	r4, [r1, r3]
   17994:	and	r4, r4, #8192	; 0x2000
   17998:	uxth	r4, r4
   1799c:	cmp	r4, #0
   179a0:	bne	17988 <__assert_fail@plt+0x6334>
   179a4:	cmp	ip, #45	; 0x2d
   179a8:	bne	179c8 <__assert_fail@plt+0x6374>
   179ac:	mov	r0, #4
   179b0:	ldr	r2, [sp, #12]
   179b4:	ldr	r3, [r5]
   179b8:	cmp	r2, r3
   179bc:	bne	17e2c <__assert_fail@plt+0x67d8>
   179c0:	add	sp, sp, #20
   179c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179c8:	bl	114f8 <__errno_location@plt>
   179cc:	mov	r2, sl
   179d0:	mov	r1, r7
   179d4:	str	r4, [r0]
   179d8:	mov	fp, r0
   179dc:	mov	r0, r6
   179e0:	bl	114b0 <strtoul@plt>
   179e4:	ldr	r3, [r7]
   179e8:	cmp	r3, r6
   179ec:	mov	sl, r0
   179f0:	beq	17b80 <__assert_fail@plt+0x652c>
   179f4:	ldr	r0, [fp]
   179f8:	cmp	r0, #0
   179fc:	bne	17a2c <__assert_fail@plt+0x63d8>
   17a00:	mov	r4, r0
   17a04:	cmp	r8, #0
   17a08:	streq	sl, [r9]
   17a0c:	moveq	r0, r4
   17a10:	beq	179b0 <__assert_fail@plt+0x635c>
   17a14:	ldrb	r6, [r3]
   17a18:	cmp	r6, #0
   17a1c:	bne	17a3c <__assert_fail@plt+0x63e8>
   17a20:	mov	r0, r4
   17a24:	str	sl, [r9]
   17a28:	b	179b0 <__assert_fail@plt+0x635c>
   17a2c:	cmp	r0, #34	; 0x22
   17a30:	moveq	r4, #1
   17a34:	bne	179ac <__assert_fail@plt+0x6358>
   17a38:	b	17a04 <__assert_fail@plt+0x63b0>
   17a3c:	mov	r0, r8
   17a40:	mov	r1, r6
   17a44:	str	r3, [sp, #4]
   17a48:	bl	114c8 <strchr@plt>
   17a4c:	ldr	r3, [sp, #4]
   17a50:	cmp	r0, #0
   17a54:	beq	17bb8 <__assert_fail@plt+0x6564>
   17a58:	mov	r0, r8
   17a5c:	mov	r1, #48	; 0x30
   17a60:	str	r3, [sp, #4]
   17a64:	bl	114c8 <strchr@plt>
   17a68:	ldr	r3, [sp, #4]
   17a6c:	cmp	r0, #0
   17a70:	beq	17a90 <__assert_fail@plt+0x643c>
   17a74:	ldrb	r2, [r3, #1]
   17a78:	cmp	r2, #68	; 0x44
   17a7c:	beq	17e14 <__assert_fail@plt+0x67c0>
   17a80:	cmp	r2, #105	; 0x69
   17a84:	beq	17dfc <__assert_fail@plt+0x67a8>
   17a88:	cmp	r2, #66	; 0x42
   17a8c:	beq	17e14 <__assert_fail@plt+0x67c0>
   17a90:	mov	r8, #1
   17a94:	mov	fp, #1024	; 0x400
   17a98:	sub	r6, r6, #66	; 0x42
   17a9c:	cmp	r6, #53	; 0x35
   17aa0:	ldrls	pc, [pc, r6, lsl #2]
   17aa4:	b	17bb8 <__assert_fail@plt+0x6564>
   17aa8:	andeq	r7, r1, r8, lsr #27
   17aac:			; <UNDEFINED> instruction: 0x00017bb8
   17ab0:			; <UNDEFINED> instruction: 0x00017bb8
   17ab4:	andeq	r7, r1, r8, ror #26
   17ab8:			; <UNDEFINED> instruction: 0x00017bb8
   17abc:			; <UNDEFINED> instruction: 0x00017dbc
   17ac0:			; <UNDEFINED> instruction: 0x00017bb8
   17ac4:			; <UNDEFINED> instruction: 0x00017bb8
   17ac8:			; <UNDEFINED> instruction: 0x00017bb8
   17acc:	andeq	r7, r1, r8, asr #26
   17ad0:			; <UNDEFINED> instruction: 0x00017bb8
   17ad4:	andeq	r7, r1, r4, lsl sp
   17ad8:			; <UNDEFINED> instruction: 0x00017bb8
   17adc:			; <UNDEFINED> instruction: 0x00017bb8
   17ae0:	ldrdeq	r7, [r1], -r4
   17ae4:			; <UNDEFINED> instruction: 0x00017bb8
   17ae8:			; <UNDEFINED> instruction: 0x00017bb8
   17aec:			; <UNDEFINED> instruction: 0x00017bb8
   17af0:	muleq	r1, r4, ip
   17af4:			; <UNDEFINED> instruction: 0x00017bb8
   17af8:			; <UNDEFINED> instruction: 0x00017bb8
   17afc:			; <UNDEFINED> instruction: 0x00017bb8
   17b00:			; <UNDEFINED> instruction: 0x00017bb8
   17b04:	andeq	r7, r1, r4, asr ip
   17b08:	andeq	r7, r1, r4, lsl ip
   17b0c:			; <UNDEFINED> instruction: 0x00017bb8
   17b10:			; <UNDEFINED> instruction: 0x00017bb8
   17b14:			; <UNDEFINED> instruction: 0x00017bb8
   17b18:			; <UNDEFINED> instruction: 0x00017bb8
   17b1c:			; <UNDEFINED> instruction: 0x00017bb8
   17b20:			; <UNDEFINED> instruction: 0x00017bb8
   17b24:			; <UNDEFINED> instruction: 0x00017bb8
   17b28:	andeq	r7, r1, r0, lsl #24
   17b2c:	andeq	r7, r1, r4, asr #23
   17b30:			; <UNDEFINED> instruction: 0x00017bb8
   17b34:			; <UNDEFINED> instruction: 0x00017bb8
   17b38:			; <UNDEFINED> instruction: 0x00017bb8
   17b3c:			; <UNDEFINED> instruction: 0x00017dbc
   17b40:			; <UNDEFINED> instruction: 0x00017bb8
   17b44:			; <UNDEFINED> instruction: 0x00017bb8
   17b48:			; <UNDEFINED> instruction: 0x00017bb8
   17b4c:	andeq	r7, r1, r8, asr #26
   17b50:			; <UNDEFINED> instruction: 0x00017bb8
   17b54:	andeq	r7, r1, r4, lsl sp
   17b58:			; <UNDEFINED> instruction: 0x00017bb8
   17b5c:			; <UNDEFINED> instruction: 0x00017bb8
   17b60:			; <UNDEFINED> instruction: 0x00017bb8
   17b64:			; <UNDEFINED> instruction: 0x00017bb8
   17b68:			; <UNDEFINED> instruction: 0x00017bb8
   17b6c:			; <UNDEFINED> instruction: 0x00017bb8
   17b70:	muleq	r1, r4, ip
   17b74:			; <UNDEFINED> instruction: 0x00017bb8
   17b78:			; <UNDEFINED> instruction: 0x00017bb8
   17b7c:	andeq	r7, r1, r4, ror #23
   17b80:	cmp	r8, #0
   17b84:	beq	179ac <__assert_fail@plt+0x6358>
   17b88:	ldrb	r6, [r6]
   17b8c:	cmp	r6, #0
   17b90:	beq	179ac <__assert_fail@plt+0x6358>
   17b94:	mov	r0, r8
   17b98:	mov	r1, r6
   17b9c:	str	r3, [sp, #4]
   17ba0:	bl	114c8 <strchr@plt>
   17ba4:	ldr	r3, [sp, #4]
   17ba8:	cmp	r0, #0
   17bac:	movne	sl, #1
   17bb0:	bne	17a58 <__assert_fail@plt+0x6404>
   17bb4:	b	179ac <__assert_fail@plt+0x6358>
   17bb8:	str	sl, [r9]
   17bbc:	orr	r0, r4, #2
   17bc0:	b	179b0 <__assert_fail@plt+0x635c>
   17bc4:	mov	r2, #0
   17bc8:	add	r1, r3, r8
   17bcc:	str	r1, [r7]
   17bd0:	ldrb	r3, [r3, r8]
   17bd4:	orr	r4, r4, r2
   17bd8:	cmp	r3, #0
   17bdc:	orrne	r4, r4, #2
   17be0:	b	17a20 <__assert_fail@plt+0x63cc>
   17be4:	cmn	sl, #-2147483647	; 0x80000001
   17be8:	lslls	sl, sl, #1
   17bec:	movls	r2, #0
   17bf0:	bls	17bc8 <__assert_fail@plt+0x6574>
   17bf4:	mvn	sl, #0
   17bf8:	mov	r2, #1
   17bfc:	b	17bc8 <__assert_fail@plt+0x6574>
   17c00:	cmp	sl, #8388608	; 0x800000
   17c04:	lslcc	sl, sl, #9
   17c08:	movcc	r2, #0
   17c0c:	bcc	17bc8 <__assert_fail@plt+0x6574>
   17c10:	b	17bf4 <__assert_fail@plt+0x65a0>
   17c14:	mov	r1, fp
   17c18:	mvn	r0, #0
   17c1c:	str	r3, [sp, #4]
   17c20:	bl	188b0 <__assert_fail@plt+0x725c>
   17c24:	ldr	r3, [sp, #4]
   17c28:	mov	r1, #7
   17c2c:	mov	r2, #0
   17c30:	cmp	r0, sl
   17c34:	movcs	ip, #0
   17c38:	movcc	ip, #1
   17c3c:	mulcs	sl, fp, sl
   17c40:	mvncc	sl, #0
   17c44:	subs	r1, r1, #1
   17c48:	orr	r2, r2, ip
   17c4c:	bne	17c30 <__assert_fail@plt+0x65dc>
   17c50:	b	17bc8 <__assert_fail@plt+0x6574>
   17c54:	mov	r1, fp
   17c58:	mvn	r0, #0
   17c5c:	str	r3, [sp, #4]
   17c60:	bl	188b0 <__assert_fail@plt+0x725c>
   17c64:	ldr	r3, [sp, #4]
   17c68:	mov	r1, #8
   17c6c:	mov	r2, #0
   17c70:	cmp	r0, sl
   17c74:	movcs	ip, #0
   17c78:	movcc	ip, #1
   17c7c:	mulcs	sl, fp, sl
   17c80:	mvncc	sl, #0
   17c84:	subs	r1, r1, #1
   17c88:	orr	r2, r2, ip
   17c8c:	bne	17c70 <__assert_fail@plt+0x661c>
   17c90:	b	17bc8 <__assert_fail@plt+0x6574>
   17c94:	mov	r1, fp
   17c98:	mvn	r0, #0
   17c9c:	str	r3, [sp, #4]
   17ca0:	bl	188b0 <__assert_fail@plt+0x725c>
   17ca4:	ldr	r3, [sp, #4]
   17ca8:	mov	r1, #4
   17cac:	mov	r2, #0
   17cb0:	cmp	r0, sl
   17cb4:	movcs	ip, #0
   17cb8:	movcc	ip, #1
   17cbc:	mulcs	sl, fp, sl
   17cc0:	mvncc	sl, #0
   17cc4:	subs	r1, r1, #1
   17cc8:	orr	r2, r2, ip
   17ccc:	bne	17cb0 <__assert_fail@plt+0x665c>
   17cd0:	b	17bc8 <__assert_fail@plt+0x6574>
   17cd4:	mov	r1, fp
   17cd8:	mvn	r0, #0
   17cdc:	str	r3, [sp, #4]
   17ce0:	bl	188b0 <__assert_fail@plt+0x725c>
   17ce4:	ldr	r3, [sp, #4]
   17ce8:	mov	r1, #5
   17cec:	mov	r2, #0
   17cf0:	cmp	r0, sl
   17cf4:	movcs	ip, #0
   17cf8:	movcc	ip, #1
   17cfc:	mulcs	sl, fp, sl
   17d00:	mvncc	sl, #0
   17d04:	subs	r1, r1, #1
   17d08:	orr	r2, r2, ip
   17d0c:	bne	17cf0 <__assert_fail@plt+0x669c>
   17d10:	b	17bc8 <__assert_fail@plt+0x6574>
   17d14:	mvn	r0, #0
   17d18:	mov	r1, fp
   17d1c:	str	r3, [sp, #4]
   17d20:	bl	188b0 <__assert_fail@plt+0x725c>
   17d24:	ldr	r3, [sp, #4]
   17d28:	cmp	sl, r0
   17d2c:	bhi	17e20 <__assert_fail@plt+0x67cc>
   17d30:	mul	sl, sl, fp
   17d34:	cmp	r0, sl
   17d38:	bcc	17e20 <__assert_fail@plt+0x67cc>
   17d3c:	mul	sl, fp, sl
   17d40:	mov	r2, #0
   17d44:	b	17bc8 <__assert_fail@plt+0x6574>
   17d48:	mvn	r0, #0
   17d4c:	mov	r1, fp
   17d50:	str	r3, [sp, #4]
   17d54:	bl	188b0 <__assert_fail@plt+0x725c>
   17d58:	ldr	r3, [sp, #4]
   17d5c:	cmp	sl, r0
   17d60:	bhi	17bf4 <__assert_fail@plt+0x65a0>
   17d64:	b	17d3c <__assert_fail@plt+0x66e8>
   17d68:	mov	r1, fp
   17d6c:	mvn	r0, #0
   17d70:	str	r3, [sp, #4]
   17d74:	bl	188b0 <__assert_fail@plt+0x725c>
   17d78:	ldr	r3, [sp, #4]
   17d7c:	mov	r1, #6
   17d80:	mov	r2, #0
   17d84:	cmp	r0, sl
   17d88:	movcs	ip, #0
   17d8c:	movcc	ip, #1
   17d90:	mulcs	sl, fp, sl
   17d94:	mvncc	sl, #0
   17d98:	subs	r1, r1, #1
   17d9c:	orr	r2, r2, ip
   17da0:	bne	17d84 <__assert_fail@plt+0x6730>
   17da4:	b	17bc8 <__assert_fail@plt+0x6574>
   17da8:	cmp	sl, #4194304	; 0x400000
   17dac:	lslcc	sl, sl, #10
   17db0:	movcc	r2, #0
   17db4:	bcc	17bc8 <__assert_fail@plt+0x6574>
   17db8:	b	17bf4 <__assert_fail@plt+0x65a0>
   17dbc:	mov	r1, fp
   17dc0:	mvn	r0, #0
   17dc4:	str	r3, [sp, #4]
   17dc8:	bl	188b0 <__assert_fail@plt+0x725c>
   17dcc:	ldr	r3, [sp, #4]
   17dd0:	mov	r1, #3
   17dd4:	mov	r2, #0
   17dd8:	cmp	r0, sl
   17ddc:	movcs	ip, #0
   17de0:	movcc	ip, #1
   17de4:	mulcs	sl, fp, sl
   17de8:	mvncc	sl, #0
   17dec:	subs	r1, r1, #1
   17df0:	orr	r2, r2, ip
   17df4:	bne	17dd8 <__assert_fail@plt+0x6784>
   17df8:	b	17bc8 <__assert_fail@plt+0x6574>
   17dfc:	ldrb	r8, [r3, #2]
   17e00:	mov	fp, #1024	; 0x400
   17e04:	cmp	r8, #66	; 0x42
   17e08:	moveq	r8, #3
   17e0c:	movne	r8, #1
   17e10:	b	17a98 <__assert_fail@plt+0x6444>
   17e14:	mov	r8, #2
   17e18:	mov	fp, #1000	; 0x3e8
   17e1c:	b	17a98 <__assert_fail@plt+0x6444>
   17e20:	mov	r2, #1
   17e24:	mvn	sl, #0
   17e28:	b	17bc8 <__assert_fail@plt+0x6574>
   17e2c:	bl	11378 <__stack_chk_fail@plt>
   17e30:	movw	r0, #43072	; 0xa840
   17e34:	movw	r1, #43112	; 0xa868
   17e38:	movw	r3, #43060	; 0xa834
   17e3c:	movt	r0, #1
   17e40:	movt	r1, #1
   17e44:	mov	r2, #96	; 0x60
   17e48:	movt	r3, #1
   17e4c:	bl	11654 <__assert_fail@plt>
   17e50:	push	{r1, r2, r3}
   17e54:	movw	ip, #1030	; 0x406
   17e58:	push	{r4, r5, r6, r7, r8, lr}
   17e5c:	sub	sp, sp, #12
   17e60:	movw	r4, #45488	; 0xb1b0
   17e64:	movt	r4, #2
   17e68:	ldr	r1, [sp, #36]	; 0x24
   17e6c:	add	r2, sp, #40	; 0x28
   17e70:	ldr	r3, [r4]
   17e74:	mov	r8, r0
   17e78:	cmp	r1, ip
   17e7c:	str	r2, [sp]
   17e80:	str	r3, [sp, #4]
   17e84:	bne	17ef8 <__assert_fail@plt+0x68a4>
   17e88:	movw	r5, #46020	; 0xb3c4
   17e8c:	movt	r5, #2
   17e90:	ldr	r7, [sp, #40]	; 0x28
   17e94:	add	r2, sp, #44	; 0x2c
   17e98:	ldr	r3, [r5]
   17e9c:	str	r2, [sp]
   17ea0:	cmp	r3, #0
   17ea4:	mov	r2, r7
   17ea8:	blt	17f84 <__assert_fail@plt+0x6930>
   17eac:	bl	114ec <fcntl@plt>
   17eb0:	subs	r6, r0, #0
   17eb4:	blt	17f08 <__assert_fail@plt+0x68b4>
   17eb8:	mov	r3, #1
   17ebc:	str	r3, [r5]
   17ec0:	cmp	r6, #0
   17ec4:	blt	17ed4 <__assert_fail@plt+0x6880>
   17ec8:	ldr	r3, [r5]
   17ecc:	cmn	r3, #1
   17ed0:	beq	17f38 <__assert_fail@plt+0x68e4>
   17ed4:	ldr	r2, [sp, #4]
   17ed8:	mov	r0, r6
   17edc:	ldr	r3, [r4]
   17ee0:	cmp	r2, r3
   17ee4:	bne	17f94 <__assert_fail@plt+0x6940>
   17ee8:	add	sp, sp, #12
   17eec:	pop	{r4, r5, r6, r7, r8, lr}
   17ef0:	add	sp, sp, #12
   17ef4:	bx	lr
   17ef8:	ldr	r2, [sp, #40]	; 0x28
   17efc:	bl	114ec <fcntl@plt>
   17f00:	mov	r6, r0
   17f04:	b	17ed4 <__assert_fail@plt+0x6880>
   17f08:	bl	114f8 <__errno_location@plt>
   17f0c:	ldr	r3, [r0]
   17f10:	cmp	r3, #22
   17f14:	bne	17eb8 <__assert_fail@plt+0x6864>
   17f18:	mov	r0, r8
   17f1c:	mov	r2, r7
   17f20:	mov	r1, #0
   17f24:	bl	17e50 <__assert_fail@plt+0x67fc>
   17f28:	subs	r6, r0, #0
   17f2c:	blt	17ed4 <__assert_fail@plt+0x6880>
   17f30:	mvn	r3, #0
   17f34:	str	r3, [r5]
   17f38:	mov	r0, r6
   17f3c:	mov	r1, #1
   17f40:	bl	114ec <fcntl@plt>
   17f44:	subs	r2, r0, #0
   17f48:	blt	17f64 <__assert_fail@plt+0x6910>
   17f4c:	orr	r2, r2, #1
   17f50:	mov	r0, r6
   17f54:	mov	r1, #2
   17f58:	bl	114ec <fcntl@plt>
   17f5c:	cmn	r0, #1
   17f60:	bne	17ed4 <__assert_fail@plt+0x6880>
   17f64:	bl	114f8 <__errno_location@plt>
   17f68:	ldr	r7, [r0]
   17f6c:	mov	r5, r0
   17f70:	mov	r0, r6
   17f74:	mvn	r6, #0
   17f78:	bl	1163c <close@plt>
   17f7c:	str	r7, [r5]
   17f80:	b	17ed4 <__assert_fail@plt+0x6880>
   17f84:	mov	r1, #0
   17f88:	bl	17e50 <__assert_fail@plt+0x67fc>
   17f8c:	mov	r6, r0
   17f90:	b	17ec0 <__assert_fail@plt+0x686c>
   17f94:	bl	11378 <__stack_chk_fail@plt>
   17f98:	push	{r4, lr}
   17f9c:	subs	r4, r0, #0
   17fa0:	sub	sp, sp, #8
   17fa4:	beq	17fb4 <__assert_fail@plt+0x6960>
   17fa8:	bl	11468 <__freading@plt>
   17fac:	cmp	r0, #0
   17fb0:	bne	17fc4 <__assert_fail@plt+0x6970>
   17fb4:	mov	r0, r4
   17fb8:	add	sp, sp, #8
   17fbc:	pop	{r4, lr}
   17fc0:	b	112e8 <fflush@plt>
   17fc4:	ldr	r3, [r4]
   17fc8:	tst	r3, #256	; 0x100
   17fcc:	beq	17fb4 <__assert_fail@plt+0x6960>
   17fd0:	mov	r3, #1
   17fd4:	mov	r0, r4
   17fd8:	str	r3, [sp]
   17fdc:	mov	r2, #0
   17fe0:	mov	r3, #0
   17fe4:	bl	18038 <__assert_fail@plt+0x69e4>
   17fe8:	mov	r0, r4
   17fec:	add	sp, sp, #8
   17ff0:	pop	{r4, lr}
   17ff4:	b	112e8 <fflush@plt>
   17ff8:	ldr	r2, [r0, #20]
   17ffc:	ldr	r3, [r0, #16]
   18000:	cmp	r2, r3
   18004:	bhi	18030 <__assert_fail@plt+0x69dc>
   18008:	ldr	r3, [r0]
   1800c:	ldr	r1, [r0, #8]
   18010:	ands	r3, r3, #256	; 0x100
   18014:	ldr	r2, [r0, #4]
   18018:	ldrne	r3, [r0, #36]	; 0x24
   1801c:	rsb	r2, r2, r1
   18020:	ldrne	r1, [r0, #44]	; 0x2c
   18024:	rsbne	r3, r3, r1
   18028:	add	r0, r2, r3
   1802c:	bx	lr
   18030:	mov	r0, #0
   18034:	bx	lr
   18038:	ldmib	r0, {r1, ip}
   1803c:	push	{r4, r5, r6, r7, lr}
   18040:	cmp	ip, r1
   18044:	sub	sp, sp, #20
   18048:	mov	r6, r0
   1804c:	ldr	r4, [sp, #40]	; 0x28
   18050:	beq	18068 <__assert_fail@plt+0x6a14>
   18054:	str	r4, [sp, #40]	; 0x28
   18058:	mov	r0, r6
   1805c:	add	sp, sp, #20
   18060:	pop	{r4, r5, r6, r7, lr}
   18064:	b	11594 <fseeko64@plt>
   18068:	ldr	ip, [r0, #20]
   1806c:	ldr	r1, [r0, #16]
   18070:	cmp	ip, r1
   18074:	bne	18054 <__assert_fail@plt+0x6a00>
   18078:	ldr	r7, [r0, #36]	; 0x24
   1807c:	cmp	r7, #0
   18080:	bne	18054 <__assert_fail@plt+0x6a00>
   18084:	str	r2, [sp, #12]
   18088:	mvn	r5, #0
   1808c:	str	r3, [sp, #8]
   18090:	bl	1154c <fileno@plt>
   18094:	str	r4, [sp]
   18098:	mvn	r4, #0
   1809c:	ldr	r2, [sp, #12]
   180a0:	ldr	r3, [sp, #8]
   180a4:	bl	113e4 <lseek64@plt>
   180a8:	mov	r2, r0
   180ac:	mov	r3, r1
   180b0:	cmp	r3, r5
   180b4:	cmpeq	r2, r4
   180b8:	beq	180d8 <__assert_fail@plt+0x6a84>
   180bc:	ldr	r1, [r6]
   180c0:	mov	r0, r7
   180c4:	strd	r2, [r6, #80]	; 0x50
   180c8:	bic	r3, r1, #16
   180cc:	str	r3, [r6]
   180d0:	add	sp, sp, #20
   180d4:	pop	{r4, r5, r6, r7, pc}
   180d8:	mvn	r0, #0
   180dc:	b	180d0 <__assert_fail@plt+0x6a7c>
   180e0:	push	{r4, r5, r6, lr}
   180e4:	mov	r5, r0
   180e8:	bl	11414 <__fpending@plt>
   180ec:	mov	r6, r0
   180f0:	mov	r0, r5
   180f4:	bl	1130c <ferror@plt>
   180f8:	mov	r4, r0
   180fc:	mov	r0, r5
   18100:	bl	11570 <fclose@plt>
   18104:	adds	r5, r0, #0
   18108:	movne	r5, #1
   1810c:	cmp	r4, #0
   18110:	bne	18130 <__assert_fail@plt+0x6adc>
   18114:	cmp	r5, #0
   18118:	beq	18128 <__assert_fail@plt+0x6ad4>
   1811c:	cmp	r6, #0
   18120:	beq	1814c <__assert_fail@plt+0x6af8>
   18124:	mvn	r4, #0
   18128:	mov	r0, r4
   1812c:	pop	{r4, r5, r6, pc}
   18130:	cmp	r5, #0
   18134:	bne	18124 <__assert_fail@plt+0x6ad0>
   18138:	bl	114f8 <__errno_location@plt>
   1813c:	mvn	r4, #0
   18140:	str	r5, [r0]
   18144:	mov	r0, r4
   18148:	pop	{r4, r5, r6, pc}
   1814c:	bl	114f8 <__errno_location@plt>
   18150:	ldr	r4, [r0]
   18154:	subs	r4, r4, #9
   18158:	mvnne	r4, #0
   1815c:	mov	r0, r4
   18160:	pop	{r4, r5, r6, pc}
   18164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18168:	movw	r7, #45488	; 0xb1b0
   1816c:	movt	r7, #2
   18170:	sub	sp, sp, #132	; 0x84
   18174:	mov	r0, #14
   18178:	movw	r5, #46024	; 0xb3c8
   1817c:	ldr	r3, [r7]
   18180:	movt	r5, #2
   18184:	movw	r6, #40880	; 0x9fb0
   18188:	movt	r6, #1
   1818c:	str	r3, [sp, #124]	; 0x7c
   18190:	bl	115dc <nl_langinfo@plt>
   18194:	ldr	r4, [r5]
   18198:	cmp	r0, #0
   1819c:	movne	r6, r0
   181a0:	cmp	r4, #0
   181a4:	beq	1824c <__assert_fail@plt+0x6bf8>
   181a8:	ldrb	r5, [r4]
   181ac:	cmp	r5, #0
   181b0:	bne	181e4 <__assert_fail@plt+0x6b90>
   181b4:	b	1821c <__assert_fail@plt+0x6bc8>
   181b8:	mov	r0, r4
   181bc:	bl	114bc <strlen@plt>
   181c0:	add	r0, r0, #1
   181c4:	add	r5, r4, r0
   181c8:	mov	r0, r5
   181cc:	bl	114bc <strlen@plt>
   181d0:	add	r0, r0, #1
   181d4:	add	r4, r5, r0
   181d8:	ldrb	r5, [r5, r0]
   181dc:	cmp	r5, #0
   181e0:	beq	1821c <__assert_fail@plt+0x6bc8>
   181e4:	mov	r0, r6
   181e8:	mov	r1, r4
   181ec:	bl	112c4 <strcmp@plt>
   181f0:	cmp	r0, #0
   181f4:	beq	1820c <__assert_fail@plt+0x6bb8>
   181f8:	cmp	r5, #42	; 0x2a
   181fc:	bne	181b8 <__assert_fail@plt+0x6b64>
   18200:	ldrb	r3, [r4, #1]
   18204:	cmp	r3, #0
   18208:	bne	181b8 <__assert_fail@plt+0x6b64>
   1820c:	mov	r0, r4
   18210:	bl	114bc <strlen@plt>
   18214:	add	r0, r0, #1
   18218:	add	r6, r4, r0
   1821c:	ldrb	r0, [r6]
   18220:	movw	r3, #43136	; 0xa880
   18224:	ldr	r1, [sp, #124]	; 0x7c
   18228:	movt	r3, #1
   1822c:	cmp	r0, #0
   18230:	ldr	r2, [r7]
   18234:	movne	r0, r6
   18238:	moveq	r0, r3
   1823c:	cmp	r1, r2
   18240:	bne	184f8 <__assert_fail@plt+0x6ea4>
   18244:	add	sp, sp, #132	; 0x84
   18248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1824c:	movw	r0, #43144	; 0xa888
   18250:	movt	r0, #1
   18254:	bl	11444 <getenv@plt>
   18258:	subs	r8, r0, #0
   1825c:	beq	184d0 <__assert_fail@plt+0x6e7c>
   18260:	ldrb	r3, [r8]
   18264:	cmp	r3, #0
   18268:	beq	18468 <__assert_fail@plt+0x6e14>
   1826c:	bl	114bc <strlen@plt>
   18270:	subs	sl, r0, #0
   18274:	subne	r3, sl, #1
   18278:	bne	18478 <__assert_fail@plt+0x6e24>
   1827c:	mov	ip, #0
   18280:	str	ip, [sp, #12]
   18284:	add	fp, sl, ip
   18288:	add	r0, fp, #14
   1828c:	bl	11450 <malloc@plt>
   18290:	subs	r9, r0, #0
   18294:	beq	184c4 <__assert_fail@plt+0x6e70>
   18298:	mov	r2, sl
   1829c:	mov	r1, r8
   182a0:	bl	11324 <memcpy@plt>
   182a4:	ldr	r3, [sp, #12]
   182a8:	add	lr, r9, fp
   182ac:	cmp	r3, #0
   182b0:	movne	r3, #47	; 0x2f
   182b4:	strbne	r3, [r9, sl]
   182b8:	movw	r3, #43160	; 0xa898
   182bc:	movt	r3, #1
   182c0:	ldm	r3!, {r0, r1, r2}
   182c4:	ldrh	r3, [r3]
   182c8:	str	r0, [r9, fp]
   182cc:	mov	r0, r9
   182d0:	str	r1, [lr, #4]
   182d4:	mov	r1, #32768	; 0x8000
   182d8:	strh	r3, [lr, #12]
   182dc:	str	r2, [lr, #8]
   182e0:	bl	11438 <open64@plt>
   182e4:	subs	sl, r0, #0
   182e8:	blt	18490 <__assert_fail@plt+0x6e3c>
   182ec:	movw	r1, #40344	; 0x9d98
   182f0:	movt	r1, #1
   182f4:	bl	112a0 <fdopen@plt>
   182f8:	subs	r8, r0, #0
   182fc:	beq	184e4 <__assert_fail@plt+0x6e90>
   18300:	mov	sl, #0
   18304:	ldr	r3, [r8, #4]
   18308:	ldr	r2, [r8, #8]
   1830c:	cmp	r3, r2
   18310:	bcs	183fc <__assert_fail@plt+0x6da8>
   18314:	add	r2, r3, #1
   18318:	str	r2, [r8, #4]
   1831c:	ldrb	r0, [r3]
   18320:	cmp	r0, #32
   18324:	beq	18304 <__assert_fail@plt+0x6cb0>
   18328:	sub	r3, r0, #9
   1832c:	cmp	r3, #1
   18330:	bls	18304 <__assert_fail@plt+0x6cb0>
   18334:	cmp	r0, #35	; 0x23
   18338:	beq	18410 <__assert_fail@plt+0x6dbc>
   1833c:	mov	r1, r8
   18340:	bl	114e0 <ungetc@plt>
   18344:	mov	r0, r8
   18348:	movw	r1, #43176	; 0xa8a8
   1834c:	add	r2, sp, #20
   18350:	movt	r1, #1
   18354:	add	r3, sp, #72	; 0x48
   18358:	bl	11528 <fscanf@plt>
   1835c:	cmp	r0, #1
   18360:	ble	18440 <__assert_fail@plt+0x6dec>
   18364:	add	r0, sp, #20
   18368:	bl	114bc <strlen@plt>
   1836c:	mov	fp, r0
   18370:	add	r0, sp, #72	; 0x48
   18374:	bl	114bc <strlen@plt>
   18378:	cmp	sl, #0
   1837c:	mov	ip, r0
   18380:	bne	1849c <__assert_fail@plt+0x6e48>
   18384:	add	sl, r0, fp
   18388:	str	ip, [sp, #4]
   1838c:	add	r0, sl, #3
   18390:	add	sl, sl, #2
   18394:	bl	11450 <malloc@plt>
   18398:	ldr	ip, [sp, #4]
   1839c:	mov	r2, r0
   183a0:	cmp	r2, #0
   183a4:	beq	184fc <__assert_fail@plt+0x6ea8>
   183a8:	movw	r3, #65534	; 0xfffe
   183ac:	movt	r3, #65535	; 0xffff
   183b0:	rsb	ip, ip, sl
   183b4:	rsb	r3, fp, r3
   183b8:	add	r0, r3, ip
   183bc:	add	r1, sp, #20
   183c0:	add	r0, r2, r0
   183c4:	mov	r4, r2
   183c8:	str	r2, [sp, #8]
   183cc:	str	ip, [sp, #4]
   183d0:	bl	11408 <strcpy@plt>
   183d4:	ldr	ip, [sp, #4]
   183d8:	add	r1, sp, #72	; 0x48
   183dc:	ldr	r2, [sp, #8]
   183e0:	sub	r0, ip, #1
   183e4:	add	r0, r2, r0
   183e8:	bl	11408 <strcpy@plt>
   183ec:	ldr	r3, [r8, #4]
   183f0:	ldr	r2, [r8, #8]
   183f4:	cmp	r3, r2
   183f8:	bcc	18314 <__assert_fail@plt+0x6cc0>
   183fc:	mov	r0, r8
   18400:	bl	115a0 <__uflow@plt>
   18404:	cmn	r0, #1
   18408:	beq	18440 <__assert_fail@plt+0x6dec>
   1840c:	b	18320 <__assert_fail@plt+0x6ccc>
   18410:	ldr	r3, [r8, #4]
   18414:	ldr	r2, [r8, #8]
   18418:	cmp	r3, r2
   1841c:	bcs	18518 <__assert_fail@plt+0x6ec4>
   18420:	add	r2, r3, #1
   18424:	str	r2, [r8, #4]
   18428:	ldrb	r0, [r3]
   1842c:	cmp	r0, #10
   18430:	cmnne	r0, #1
   18434:	bne	18410 <__assert_fail@plt+0x6dbc>
   18438:	cmn	r0, #1
   1843c:	bne	18304 <__assert_fail@plt+0x6cb0>
   18440:	mov	r0, r8
   18444:	bl	11570 <fclose@plt>
   18448:	cmp	sl, #0
   1844c:	beq	18490 <__assert_fail@plt+0x6e3c>
   18450:	mov	r3, #0
   18454:	strb	r3, [r4, sl]
   18458:	mov	r0, r9
   1845c:	bl	11300 <free@plt>
   18460:	str	r4, [r5]
   18464:	b	181a8 <__assert_fail@plt+0x6b54>
   18468:	movw	r8, #43124	; 0xa874
   1846c:	movt	r8, #1
   18470:	mov	r3, #7
   18474:	mov	sl, #8
   18478:	ldrb	r3, [r8, r3]
   1847c:	cmp	r3, #47	; 0x2f
   18480:	movne	ip, #1
   18484:	strne	ip, [sp, #12]
   18488:	bne	18284 <__assert_fail@plt+0x6c30>
   1848c:	b	1827c <__assert_fail@plt+0x6c28>
   18490:	movw	r4, #40880	; 0x9fb0
   18494:	movt	r4, #1
   18498:	b	18458 <__assert_fail@plt+0x6e04>
   1849c:	add	r3, fp, r0
   184a0:	mov	r0, r4
   184a4:	add	sl, r3, sl
   184a8:	str	ip, [sp, #4]
   184ac:	add	r1, sl, #3
   184b0:	add	sl, sl, #2
   184b4:	bl	11390 <realloc@plt>
   184b8:	ldr	ip, [sp, #4]
   184bc:	mov	r2, r0
   184c0:	b	183a0 <__assert_fail@plt+0x6d4c>
   184c4:	movw	r4, #40880	; 0x9fb0
   184c8:	movt	r4, #1
   184cc:	b	18460 <__assert_fail@plt+0x6e0c>
   184d0:	movw	r8, #43124	; 0xa874
   184d4:	mov	r3, #7
   184d8:	movt	r8, #1
   184dc:	mov	sl, #8
   184e0:	b	18478 <__assert_fail@plt+0x6e24>
   184e4:	mov	r0, sl
   184e8:	movw	r4, #40880	; 0x9fb0
   184ec:	bl	1163c <close@plt>
   184f0:	movt	r4, #1
   184f4:	b	18458 <__assert_fail@plt+0x6e04>
   184f8:	bl	11378 <__stack_chk_fail@plt>
   184fc:	mov	r0, r4
   18500:	movw	r4, #40880	; 0x9fb0
   18504:	bl	11300 <free@plt>
   18508:	mov	r0, r8
   1850c:	bl	11570 <fclose@plt>
   18510:	movt	r4, #1
   18514:	b	18458 <__assert_fail@plt+0x6e04>
   18518:	mov	r0, r8
   1851c:	bl	115a0 <__uflow@plt>
   18520:	b	1842c <__assert_fail@plt+0x6dd8>
   18524:	adds	r0, r0, #8
   18528:	push	{r4, lr}
   1852c:	bcs	18580 <__assert_fail@plt+0x6f2c>
   18530:	bl	11450 <malloc@plt>
   18534:	subs	ip, r0, #0
   18538:	beq	18580 <__assert_fail@plt+0x6f2c>
   1853c:	add	r1, ip, #8
   18540:	movw	r3, #65281	; 0xff01
   18544:	movt	r3, #65280	; 0xff00
   18548:	movw	r2, #46028	; 0xb3cc
   1854c:	movt	r2, #2
   18550:	mov	r0, r1
   18554:	umull	r4, r3, r3, r1
   18558:	movw	r4, #64330	; 0xfb4a
   1855c:	movt	r4, #5141	; 0x1415
   18560:	str	r4, [ip, #4]
   18564:	lsr	r3, r3, #8
   18568:	add	r3, r3, r3, lsl #8
   1856c:	rsb	r3, r3, r1
   18570:	ldr	r4, [r2, r3, lsl #2]
   18574:	str	r1, [r2, r3, lsl #2]
   18578:	str	r4, [ip]
   1857c:	pop	{r4, pc}
   18580:	mov	r0, #0
   18584:	pop	{r4, pc}
   18588:	cmp	r0, #0
   1858c:	bxeq	lr
   18590:	ldr	r2, [r0, #-4]
   18594:	movw	r3, #64330	; 0xfb4a
   18598:	movt	r3, #5141	; 0x1415
   1859c:	cmp	r2, r3
   185a0:	bxne	lr
   185a4:	movw	r3, #65281	; 0xff01
   185a8:	movt	r3, #65280	; 0xff00
   185ac:	movw	r1, #46028	; 0xb3cc
   185b0:	movt	r1, #2
   185b4:	umull	r2, r3, r3, r0
   185b8:	lsr	r3, r3, #8
   185bc:	add	r3, r3, r3, lsl #8
   185c0:	rsb	r3, r3, r0
   185c4:	ldr	r2, [r1, r3, lsl #2]
   185c8:	cmp	r2, #0
   185cc:	bxeq	lr
   185d0:	cmp	r0, r2
   185d4:	addeq	r2, r1, r3, lsl #2
   185d8:	bne	185ec <__assert_fail@plt+0x6f98>
   185dc:	b	18600 <__assert_fail@plt+0x6fac>
   185e0:	cmp	r0, r3
   185e4:	beq	185fc <__assert_fail@plt+0x6fa8>
   185e8:	mov	r2, r3
   185ec:	ldr	r3, [r2, #-8]
   185f0:	cmp	r3, #0
   185f4:	bne	185e0 <__assert_fail@plt+0x6f8c>
   185f8:	bx	lr
   185fc:	sub	r2, r2, #8
   18600:	ldr	ip, [r0, #-8]!
   18604:	str	ip, [r2]
   18608:	b	11300 <free@plt>
   1860c:	push	{r4, lr}
   18610:	mov	r4, r0
   18614:	bl	112f4 <wcwidth@plt>
   18618:	cmp	r0, #0
   1861c:	popge	{r4, pc}
   18620:	mov	r0, r4
   18624:	bl	113a8 <iswcntrl@plt>
   18628:	rsbs	r0, r0, #1
   1862c:	movcc	r0, #0
   18630:	pop	{r4, pc}
   18634:	push	{r3, r4, r5, lr}
   18638:	mov	r3, r1
   1863c:	mov	r4, r1
   18640:	ldr	r1, [r3], #16
   18644:	mov	r5, r0
   18648:	cmp	r1, r3
   1864c:	strne	r1, [r0]
   18650:	beq	18674 <__assert_fail@plt+0x7020>
   18654:	ldrb	r3, [r4, #8]
   18658:	ldr	r2, [r4, #4]
   1865c:	cmp	r3, #0
   18660:	strb	r3, [r5, #8]
   18664:	ldrne	r3, [r4, #12]
   18668:	str	r2, [r5, #4]
   1866c:	strne	r3, [r5, #12]
   18670:	pop	{r3, r4, r5, pc}
   18674:	add	r3, r0, #16
   18678:	ldr	r2, [r4, #4]
   1867c:	mov	r0, r3
   18680:	bl	11324 <memcpy@plt>
   18684:	str	r0, [r5]
   18688:	b	18654 <__assert_fail@plt+0x7000>
   1868c:	lsr	r2, r0, #5
   18690:	movw	r3, #43188	; 0xa8b4
   18694:	movt	r3, #1
   18698:	and	r0, r0, #31
   1869c:	ldr	r3, [r3, r2, lsl #2]
   186a0:	lsr	r0, r3, r0
   186a4:	and	r0, r0, #1
   186a8:	bx	lr
   186ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   186b0:	movw	r9, #45488	; 0xb1b0
   186b4:	movt	r9, #2
   186b8:	sub	sp, sp, #64	; 0x40
   186bc:	mov	sl, r0
   186c0:	ldr	r3, [r9]
   186c4:	str	r3, [sp, #60]	; 0x3c
   186c8:	bl	113fc <__ctype_get_mb_cur_max@plt>
   186cc:	cmp	r0, #1
   186d0:	bls	18860 <__assert_fail@plt+0x720c>
   186d4:	mov	r3, #0
   186d8:	movw	r8, #43188	; 0xa8b4
   186dc:	movt	r8, #1
   186e0:	mov	r5, r3
   186e4:	mov	r4, sl
   186e8:	mov	r7, r3
   186ec:	mov	r6, #1
   186f0:	str	sl, [sp, #20]
   186f4:	strb	r3, [sp, #4]
   186f8:	str	r3, [sp, #8]
   186fc:	strb	r3, [sp, #16]
   18700:	str	r3, [sp, #12]
   18704:	ldrb	r3, [sp, #4]
   18708:	cmp	r3, #0
   1870c:	bne	18778 <__assert_fail@plt+0x7124>
   18710:	ldrb	r3, [r4]
   18714:	and	r2, r3, #31
   18718:	lsr	r3, r3, #5
   1871c:	ldr	r3, [r8, r3, lsl #2]
   18720:	lsr	r3, r3, r2
   18724:	tst	r3, #1
   18728:	beq	18764 <__assert_fail@plt+0x7110>
   1872c:	str	r6, [sp, #24]
   18730:	ldrb	r4, [r4]
   18734:	strb	r6, [sp, #28]
   18738:	cmp	r4, #0
   1873c:	strb	r6, [sp, #16]
   18740:	str	r4, [sp, #32]
   18744:	bne	187dc <__assert_fail@plt+0x7188>
   18748:	mov	r0, r5
   1874c:	ldr	r2, [sp, #60]	; 0x3c
   18750:	ldr	r3, [r9]
   18754:	cmp	r2, r3
   18758:	bne	1888c <__assert_fail@plt+0x7238>
   1875c:	add	sp, sp, #64	; 0x40
   18760:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18764:	add	r0, sp, #8
   18768:	bl	1133c <mbsinit@plt>
   1876c:	cmp	r0, #0
   18770:	beq	1886c <__assert_fail@plt+0x7218>
   18774:	strb	r6, [sp, #4]
   18778:	bl	113fc <__ctype_get_mb_cur_max@plt>
   1877c:	mov	r1, r0
   18780:	mov	r0, r4
   18784:	bl	17284 <__assert_fail@plt+0x5c30>
   18788:	mov	r1, r4
   1878c:	add	r3, sp, #8
   18790:	mov	r2, r0
   18794:	add	r0, sp, #32
   18798:	bl	11420 <mbrtowc@plt>
   1879c:	cmn	r0, #1
   187a0:	str	r0, [sp, #24]
   187a4:	beq	187f8 <__assert_fail@plt+0x71a4>
   187a8:	cmn	r0, #2
   187ac:	beq	18848 <__assert_fail@plt+0x71f4>
   187b0:	cmp	r0, #0
   187b4:	beq	18808 <__assert_fail@plt+0x71b4>
   187b8:	ldr	r4, [sp, #32]
   187bc:	add	r0, sp, #8
   187c0:	strb	r6, [sp, #28]
   187c4:	bl	1133c <mbsinit@plt>
   187c8:	strb	r6, [sp, #16]
   187cc:	cmp	r0, #0
   187d0:	strbne	r7, [sp, #4]
   187d4:	cmp	r4, #0
   187d8:	beq	18748 <__assert_fail@plt+0x70f4>
   187dc:	ldr	r4, [sp, #20]
   187e0:	ldr	r3, [sp, #24]
   187e4:	add	r5, r5, #1
   187e8:	strb	r7, [sp, #16]
   187ec:	add	r4, r4, r3
   187f0:	str	r4, [sp, #20]
   187f4:	b	18704 <__assert_fail@plt+0x70b0>
   187f8:	str	r6, [sp, #24]
   187fc:	strb	r7, [sp, #28]
   18800:	ldr	r4, [sp, #20]
   18804:	b	187e0 <__assert_fail@plt+0x718c>
   18808:	ldr	r4, [sp, #20]
   1880c:	str	r6, [sp, #24]
   18810:	ldrb	r3, [r4]
   18814:	cmp	r3, #0
   18818:	bne	18890 <__assert_fail@plt+0x723c>
   1881c:	ldr	r4, [sp, #32]
   18820:	cmp	r4, #0
   18824:	beq	187bc <__assert_fail@plt+0x7168>
   18828:	movw	r0, #41964	; 0xa3ec
   1882c:	movw	r1, #41928	; 0xa3c8
   18830:	movw	r3, #43220	; 0xa8d4
   18834:	movt	r0, #1
   18838:	movt	r1, #1
   1883c:	mov	r2, #176	; 0xb0
   18840:	movt	r3, #1
   18844:	bl	11654 <__assert_fail@plt>
   18848:	ldr	r4, [sp, #20]
   1884c:	mov	r0, r4
   18850:	bl	114bc <strlen@plt>
   18854:	strb	r7, [sp, #28]
   18858:	str	r0, [sp, #24]
   1885c:	b	187e0 <__assert_fail@plt+0x718c>
   18860:	mov	r0, sl
   18864:	bl	114bc <strlen@plt>
   18868:	b	1874c <__assert_fail@plt+0x70f8>
   1886c:	movw	r0, #41904	; 0xa3b0
   18870:	movw	r1, #41928	; 0xa3c8
   18874:	movw	r3, #43220	; 0xa8d4
   18878:	movt	r0, #1
   1887c:	movt	r1, #1
   18880:	mov	r2, #147	; 0x93
   18884:	movt	r3, #1
   18888:	bl	11654 <__assert_fail@plt>
   1888c:	bl	11378 <__stack_chk_fail@plt>
   18890:	movw	r0, #41940	; 0xa3d4
   18894:	movw	r1, #41928	; 0xa3c8
   18898:	movw	r3, #43220	; 0xa8d4
   1889c:	movt	r0, #1
   188a0:	movt	r1, #1
   188a4:	mov	r2, #175	; 0xaf
   188a8:	movt	r3, #1
   188ac:	bl	11654 <__assert_fail@plt>
   188b0:	subs	r2, r1, #1
   188b4:	bxeq	lr
   188b8:	bcc	18a90 <__assert_fail@plt+0x743c>
   188bc:	cmp	r0, r1
   188c0:	bls	18a74 <__assert_fail@plt+0x7420>
   188c4:	tst	r1, r2
   188c8:	beq	18a80 <__assert_fail@plt+0x742c>
   188cc:	clz	r3, r0
   188d0:	clz	r2, r1
   188d4:	sub	r3, r2, r3
   188d8:	rsbs	r3, r3, #31
   188dc:	addne	r3, r3, r3, lsl #1
   188e0:	mov	r2, #0
   188e4:	addne	pc, pc, r3, lsl #2
   188e8:	nop	{0}
   188ec:	cmp	r0, r1, lsl #31
   188f0:	adc	r2, r2, r2
   188f4:	subcs	r0, r0, r1, lsl #31
   188f8:	cmp	r0, r1, lsl #30
   188fc:	adc	r2, r2, r2
   18900:	subcs	r0, r0, r1, lsl #30
   18904:	cmp	r0, r1, lsl #29
   18908:	adc	r2, r2, r2
   1890c:	subcs	r0, r0, r1, lsl #29
   18910:	cmp	r0, r1, lsl #28
   18914:	adc	r2, r2, r2
   18918:	subcs	r0, r0, r1, lsl #28
   1891c:	cmp	r0, r1, lsl #27
   18920:	adc	r2, r2, r2
   18924:	subcs	r0, r0, r1, lsl #27
   18928:	cmp	r0, r1, lsl #26
   1892c:	adc	r2, r2, r2
   18930:	subcs	r0, r0, r1, lsl #26
   18934:	cmp	r0, r1, lsl #25
   18938:	adc	r2, r2, r2
   1893c:	subcs	r0, r0, r1, lsl #25
   18940:	cmp	r0, r1, lsl #24
   18944:	adc	r2, r2, r2
   18948:	subcs	r0, r0, r1, lsl #24
   1894c:	cmp	r0, r1, lsl #23
   18950:	adc	r2, r2, r2
   18954:	subcs	r0, r0, r1, lsl #23
   18958:	cmp	r0, r1, lsl #22
   1895c:	adc	r2, r2, r2
   18960:	subcs	r0, r0, r1, lsl #22
   18964:	cmp	r0, r1, lsl #21
   18968:	adc	r2, r2, r2
   1896c:	subcs	r0, r0, r1, lsl #21
   18970:	cmp	r0, r1, lsl #20
   18974:	adc	r2, r2, r2
   18978:	subcs	r0, r0, r1, lsl #20
   1897c:	cmp	r0, r1, lsl #19
   18980:	adc	r2, r2, r2
   18984:	subcs	r0, r0, r1, lsl #19
   18988:	cmp	r0, r1, lsl #18
   1898c:	adc	r2, r2, r2
   18990:	subcs	r0, r0, r1, lsl #18
   18994:	cmp	r0, r1, lsl #17
   18998:	adc	r2, r2, r2
   1899c:	subcs	r0, r0, r1, lsl #17
   189a0:	cmp	r0, r1, lsl #16
   189a4:	adc	r2, r2, r2
   189a8:	subcs	r0, r0, r1, lsl #16
   189ac:	cmp	r0, r1, lsl #15
   189b0:	adc	r2, r2, r2
   189b4:	subcs	r0, r0, r1, lsl #15
   189b8:	cmp	r0, r1, lsl #14
   189bc:	adc	r2, r2, r2
   189c0:	subcs	r0, r0, r1, lsl #14
   189c4:	cmp	r0, r1, lsl #13
   189c8:	adc	r2, r2, r2
   189cc:	subcs	r0, r0, r1, lsl #13
   189d0:	cmp	r0, r1, lsl #12
   189d4:	adc	r2, r2, r2
   189d8:	subcs	r0, r0, r1, lsl #12
   189dc:	cmp	r0, r1, lsl #11
   189e0:	adc	r2, r2, r2
   189e4:	subcs	r0, r0, r1, lsl #11
   189e8:	cmp	r0, r1, lsl #10
   189ec:	adc	r2, r2, r2
   189f0:	subcs	r0, r0, r1, lsl #10
   189f4:	cmp	r0, r1, lsl #9
   189f8:	adc	r2, r2, r2
   189fc:	subcs	r0, r0, r1, lsl #9
   18a00:	cmp	r0, r1, lsl #8
   18a04:	adc	r2, r2, r2
   18a08:	subcs	r0, r0, r1, lsl #8
   18a0c:	cmp	r0, r1, lsl #7
   18a10:	adc	r2, r2, r2
   18a14:	subcs	r0, r0, r1, lsl #7
   18a18:	cmp	r0, r1, lsl #6
   18a1c:	adc	r2, r2, r2
   18a20:	subcs	r0, r0, r1, lsl #6
   18a24:	cmp	r0, r1, lsl #5
   18a28:	adc	r2, r2, r2
   18a2c:	subcs	r0, r0, r1, lsl #5
   18a30:	cmp	r0, r1, lsl #4
   18a34:	adc	r2, r2, r2
   18a38:	subcs	r0, r0, r1, lsl #4
   18a3c:	cmp	r0, r1, lsl #3
   18a40:	adc	r2, r2, r2
   18a44:	subcs	r0, r0, r1, lsl #3
   18a48:	cmp	r0, r1, lsl #2
   18a4c:	adc	r2, r2, r2
   18a50:	subcs	r0, r0, r1, lsl #2
   18a54:	cmp	r0, r1, lsl #1
   18a58:	adc	r2, r2, r2
   18a5c:	subcs	r0, r0, r1, lsl #1
   18a60:	cmp	r0, r1
   18a64:	adc	r2, r2, r2
   18a68:	subcs	r0, r0, r1
   18a6c:	mov	r0, r2
   18a70:	bx	lr
   18a74:	moveq	r0, #1
   18a78:	movne	r0, #0
   18a7c:	bx	lr
   18a80:	clz	r2, r1
   18a84:	rsb	r2, r2, #31
   18a88:	lsr	r0, r0, r2
   18a8c:	bx	lr
   18a90:	cmp	r0, #0
   18a94:	mvnne	r0, #0
   18a98:	b	18abc <__assert_fail@plt+0x7468>
   18a9c:	cmp	r1, #0
   18aa0:	beq	18a90 <__assert_fail@plt+0x743c>
   18aa4:	push	{r0, r1, lr}
   18aa8:	bl	188b0 <__assert_fail@plt+0x725c>
   18aac:	pop	{r1, r2, lr}
   18ab0:	mul	r3, r2, r0
   18ab4:	sub	r1, r1, r3
   18ab8:	bx	lr
   18abc:	push	{r1, lr}
   18ac0:	mov	r0, #8
   18ac4:	bl	112b8 <raise@plt>
   18ac8:	pop	{r1, pc}
   18acc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   18ad0:	mov	r7, r0
   18ad4:	ldr	r6, [pc, #76]	; 18b28 <__assert_fail@plt+0x74d4>
   18ad8:	mov	r8, r1
   18adc:	ldr	r5, [pc, #72]	; 18b2c <__assert_fail@plt+0x74d8>
   18ae0:	mov	r9, r2
   18ae4:	add	r6, pc, r6
   18ae8:	bl	11280 <fdopen@plt-0x20>
   18aec:	add	r5, pc, r5
   18af0:	rsb	r6, r5, r6
   18af4:	asrs	r6, r6, #2
   18af8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   18afc:	sub	r5, r5, #4
   18b00:	mov	r4, #0
   18b04:	add	r4, r4, #1
   18b08:	ldr	r3, [r5, #4]!
   18b0c:	mov	r0, r7
   18b10:	mov	r1, r8
   18b14:	mov	r2, r9
   18b18:	blx	r3
   18b1c:	cmp	r4, r6
   18b20:	bne	18b04 <__assert_fail@plt+0x74b0>
   18b24:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   18b28:	andeq	r2, r1, r4, lsl r4
   18b2c:	andeq	r2, r1, r8, lsl #8
   18b30:	bx	lr
   18b34:	ldr	r3, [pc, #28]	; 18b58 <__assert_fail@plt+0x7504>
   18b38:	mov	r1, #0
   18b3c:	ldr	r2, [pc, #24]	; 18b5c <__assert_fail@plt+0x7508>
   18b40:	add	r3, pc, r3
   18b44:	ldr	r3, [r3, r2]
   18b48:	cmp	r3, #0
   18b4c:	ldrne	r2, [r3]
   18b50:	moveq	r2, r3
   18b54:	b	11504 <__cxa_atexit@plt>
   18b58:			; <UNDEFINED> instruction: 0x000124b8
   18b5c:	andeq	r0, r0, r0, asr r1

Disassembly of section .fini:

00018b60 <.fini>:
   18b60:	push	{r3, lr}
   18b64:	pop	{r3, pc}
