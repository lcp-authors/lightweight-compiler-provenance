
centos-preinstalled/printenv:     file format elf32-littlearm


Disassembly of section .init:

00010e64 <.init>:
   10e64:	push	{r3, lr}
   10e68:	bl	113dc <close@plt+0x2f4>
   10e6c:	pop	{r3, pc}

Disassembly of section .plt:

00010e70 <fdopen@plt-0x14>:
   10e70:	push	{lr}		; (str lr, [sp, #-4]!)
   10e74:	ldr	lr, [pc, #4]	; 10e80 <fdopen@plt-0x4>
   10e78:	add	lr, pc, lr
   10e7c:	ldr	pc, [lr, #8]!
   10e80:	andeq	r4, r1, r0, lsl #3

00010e84 <fdopen@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #20, 20	; 0x14000
   10e8c:	ldr	pc, [ip, #384]!	; 0x180

00010e90 <calloc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #20, 20	; 0x14000
   10e98:	ldr	pc, [ip, #376]!	; 0x178

00010e9c <fputs_unlocked@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #20, 20	; 0x14000
   10ea4:	ldr	pc, [ip, #368]!	; 0x170

00010ea8 <raise@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #20, 20	; 0x14000
   10eb0:	ldr	pc, [ip, #360]!	; 0x168

00010eb4 <strcmp@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #20, 20	; 0x14000
   10ebc:	ldr	pc, [ip, #352]!	; 0x160

00010ec0 <fflush@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #20, 20	; 0x14000
   10ec8:	ldr	pc, [ip, #344]!	; 0x158

00010ecc <free@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #20, 20	; 0x14000
   10ed4:	ldr	pc, [ip, #336]!	; 0x150

00010ed8 <_exit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #20, 20	; 0x14000
   10ee0:	ldr	pc, [ip, #328]!	; 0x148

00010ee4 <memcpy@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #20, 20	; 0x14000
   10eec:	ldr	pc, [ip, #320]!	; 0x140

00010ef0 <mbsinit@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #20, 20	; 0x14000
   10ef8:	ldr	pc, [ip, #312]!	; 0x138

00010efc <memcmp@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #20, 20	; 0x14000
   10f04:	ldr	pc, [ip, #304]!	; 0x130

00010f08 <dcgettext@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #20, 20	; 0x14000
   10f10:	ldr	pc, [ip, #296]!	; 0x128

00010f14 <__stack_chk_fail@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #20, 20	; 0x14000
   10f1c:	ldr	pc, [ip, #288]!	; 0x120

00010f20 <realloc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #20, 20	; 0x14000
   10f28:	ldr	pc, [ip, #280]!	; 0x118

00010f2c <textdomain@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #20, 20	; 0x14000
   10f34:	ldr	pc, [ip, #272]!	; 0x110

00010f38 <iswprint@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #20, 20	; 0x14000
   10f40:	ldr	pc, [ip, #264]!	; 0x108

00010f44 <fwrite@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #20, 20	; 0x14000
   10f4c:	ldr	pc, [ip, #256]!	; 0x100

00010f50 <lseek64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #20, 20	; 0x14000
   10f58:	ldr	pc, [ip, #248]!	; 0xf8

00010f5c <__ctype_get_mb_cur_max@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #20, 20	; 0x14000
   10f64:	ldr	pc, [ip, #240]!	; 0xf0

00010f68 <strcpy@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #20, 20	; 0x14000
   10f70:	ldr	pc, [ip, #232]!	; 0xe8

00010f74 <__fpending@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #20, 20	; 0x14000
   10f7c:	ldr	pc, [ip, #224]!	; 0xe0

00010f80 <mbrtowc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #20, 20	; 0x14000
   10f88:	ldr	pc, [ip, #216]!	; 0xd8

00010f8c <error@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #20, 20	; 0x14000
   10f94:	ldr	pc, [ip, #208]!	; 0xd0

00010f98 <open64@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #20, 20	; 0x14000
   10fa0:	ldr	pc, [ip, #200]!	; 0xc8

00010fa4 <getenv@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #20, 20	; 0x14000
   10fac:	ldr	pc, [ip, #192]!	; 0xc0

00010fb0 <malloc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #20, 20	; 0x14000
   10fb8:	ldr	pc, [ip, #184]!	; 0xb8

00010fbc <__libc_start_main@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #20, 20	; 0x14000
   10fc4:	ldr	pc, [ip, #176]!	; 0xb0

00010fc8 <__freading@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #20, 20	; 0x14000
   10fd0:	ldr	pc, [ip, #168]!	; 0xa8

00010fd4 <__gmon_start__@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #20, 20	; 0x14000
   10fdc:	ldr	pc, [ip, #160]!	; 0xa0

00010fe0 <getopt_long@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #20, 20	; 0x14000
   10fe8:	ldr	pc, [ip, #152]!	; 0x98

00010fec <__ctype_b_loc@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #20, 20	; 0x14000
   10ff4:	ldr	pc, [ip, #144]!	; 0x90

00010ff8 <exit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #20, 20	; 0x14000
   11000:	ldr	pc, [ip, #136]!	; 0x88

00011004 <strlen@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #20, 20	; 0x14000
   1100c:	ldr	pc, [ip, #128]!	; 0x80

00011010 <strchr@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #20, 20	; 0x14000
   11018:	ldr	pc, [ip, #120]!	; 0x78

0001101c <ungetc@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #20, 20	; 0x14000
   11024:	ldr	pc, [ip, #112]!	; 0x70

00011028 <__errno_location@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #20, 20	; 0x14000
   11030:	ldr	pc, [ip, #104]!	; 0x68

00011034 <__cxa_atexit@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #20, 20	; 0x14000
   1103c:	ldr	pc, [ip, #96]!	; 0x60

00011040 <memset@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #20, 20	; 0x14000
   11048:	ldr	pc, [ip, #88]!	; 0x58

0001104c <fscanf@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #20, 20	; 0x14000
   11054:	ldr	pc, [ip, #80]!	; 0x50

00011058 <__printf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #20, 20	; 0x14000
   11060:	ldr	pc, [ip, #72]!	; 0x48

00011064 <fileno@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #20, 20	; 0x14000
   1106c:	ldr	pc, [ip, #64]!	; 0x40

00011070 <__fprintf_chk@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #20, 20	; 0x14000
   11078:	ldr	pc, [ip, #56]!	; 0x38

0001107c <fclose@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #20, 20	; 0x14000
   11084:	ldr	pc, [ip, #48]!	; 0x30

00011088 <fseeko64@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #20, 20	; 0x14000
   11090:	ldr	pc, [ip, #40]!	; 0x28

00011094 <__uflow@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #20, 20	; 0x14000
   1109c:	ldr	pc, [ip, #32]!

000110a0 <setlocale@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #20, 20	; 0x14000
   110a8:	ldr	pc, [ip, #24]!

000110ac <strrchr@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #20, 20	; 0x14000
   110b4:	ldr	pc, [ip, #16]!

000110b8 <nl_langinfo@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #20, 20	; 0x14000
   110c0:	ldr	pc, [ip, #8]!

000110c4 <bindtextdomain@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #20, 20	; 0x14000
   110cc:	ldr	pc, [ip, #0]!

000110d0 <strncmp@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #77824	; 0x13000
   110d8:	ldr	pc, [ip, #4088]!	; 0xff8

000110dc <abort@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #77824	; 0x13000
   110e4:	ldr	pc, [ip, #4080]!	; 0xff0

000110e8 <close@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #77824	; 0x13000
   110f0:	ldr	pc, [ip, #4072]!	; 0xfe8

Disassembly of section .text:

000110f4 <close_stdout@@Base-0x614>:
   110f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110f8:	mov	r5, r0
   110fc:	sub	sp, sp, #28
   11100:	ldr	r0, [r1]
   11104:	mov	r7, r1
   11108:	bl	118c4 <close_stdout@@Base+0x1bc>
   1110c:	ldr	r1, [pc, #580]	; 11358 <close@plt+0x270>
   11110:	mov	r0, #6
   11114:	ldr	r4, [pc, #576]	; 1135c <close@plt+0x274>
   11118:	mov	r6, #0
   1111c:	add	r1, pc, r1
   11120:	ldr	sl, [pc, #568]	; 11360 <close@plt+0x278>
   11124:	bl	110a0 <setlocale@plt>
   11128:	add	r4, pc, r4
   1112c:	ldr	r1, [pc, #560]	; 11364 <close@plt+0x27c>
   11130:	mov	fp, r6
   11134:	mov	r0, r4
   11138:	ldr	r8, [pc, #552]	; 11368 <close@plt+0x280>
   1113c:	add	r1, pc, r1
   11140:	add	sl, pc, sl
   11144:	bl	110c4 <bindtextdomain@plt>
   11148:	mov	r0, r4
   1114c:	ldr	r4, [pc, #536]	; 1136c <close@plt+0x284>
   11150:	bl	10f2c <textdomain@plt>
   11154:	ldr	r2, [pc, #532]	; 11370 <close@plt+0x288>
   11158:	mov	r1, #2
   1115c:	add	r4, pc, r4
   11160:	ldr	r3, [pc, #524]	; 11374 <close@plt+0x28c>
   11164:	add	r8, pc, r8
   11168:	ldr	r2, [r4, r2]
   1116c:	str	r1, [r2]
   11170:	ldr	r0, [r4, r3]
   11174:	bl	141f8 <close_stdout@@Base+0x2af0>
   11178:	str	fp, [sp]
   1117c:	mov	r0, r5
   11180:	mov	r1, r7
   11184:	mov	r2, sl
   11188:	mov	r3, r8
   1118c:	mov	r9, #0
   11190:	bl	10fe0 <getopt_long@plt>
   11194:	cmn	r0, #1
   11198:	beq	11214 <close@plt+0x12c>
   1119c:	cmn	r0, #2
   111a0:	beq	1120c <close@plt+0x124>
   111a4:	cmp	r0, #48	; 0x30
   111a8:	beq	11204 <close@plt+0x11c>
   111ac:	cmn	r0, #3
   111b0:	beq	111bc <close@plt+0xd4>
   111b4:	mov	r0, #2
   111b8:	bl	114d4 <close@plt+0x3ec>
   111bc:	ldr	r2, [pc, #436]	; 11378 <close@plt+0x290>
   111c0:	ldr	r3, [pc, #436]	; 1137c <close@plt+0x294>
   111c4:	ldr	r1, [pc, #436]	; 11380 <close@plt+0x298>
   111c8:	ldr	r0, [r4, r2]
   111cc:	ldr	r3, [r4, r3]
   111d0:	add	r1, pc, r1
   111d4:	ldr	r2, [pc, #424]	; 11384 <close@plt+0x29c>
   111d8:	ldr	r0, [r0]
   111dc:	add	r2, pc, r2
   111e0:	ldr	r3, [r3]
   111e4:	stm	sp, {r1, r2, r9}
   111e8:	ldr	r1, [pc, #408]	; 11388 <close@plt+0x2a0>
   111ec:	ldr	r2, [pc, #408]	; 1138c <close@plt+0x2a4>
   111f0:	add	r1, pc, r1
   111f4:	add	r2, pc, r2
   111f8:	bl	135b0 <close_stdout@@Base+0x1ea8>
   111fc:	mov	r0, r9
   11200:	bl	10ff8 <exit@plt>
   11204:	mov	r6, #1
   11208:	b	11178 <close@plt+0x90>
   1120c:	mov	r0, r9
   11210:	bl	114d4 <close@plt+0x3ec>
   11214:	ldr	r3, [pc, #372]	; 11390 <close@plt+0x2a8>
   11218:	ldr	r3, [r4, r3]
   1121c:	ldr	r8, [r3]
   11220:	str	r3, [sp, #20]
   11224:	cmp	r5, r8
   11228:	bgt	11274 <close@plt+0x18c>
   1122c:	ldr	r3, [pc, #352]	; 11394 <close@plt+0x2ac>
   11230:	ldr	r5, [pc, #352]	; 11398 <close@plt+0x2b0>
   11234:	ldr	r3, [r4, r3]
   11238:	add	r5, pc, r5
   1123c:	ldr	r4, [r3]
   11240:	sub	r4, r4, #4
   11244:	b	11260 <close@plt+0x178>
   11248:	cmp	r6, #0
   1124c:	mov	r0, #1
   11250:	mov	r1, r5
   11254:	moveq	r3, #10
   11258:	movne	r3, #0
   1125c:	bl	11058 <__printf_chk@plt>
   11260:	ldr	r2, [r4, #4]!
   11264:	cmp	r2, #0
   11268:	bne	11248 <close@plt+0x160>
   1126c:	mov	r0, #0
   11270:	bl	10ff8 <exit@plt>
   11274:	ldr	fp, [pc, #288]	; 1139c <close@plt+0x2b4>
   11278:	add	r7, r7, r8, lsl #2
   1127c:	add	fp, pc, fp
   11280:	b	11290 <close@plt+0x1a8>
   11284:	add	r8, r8, #1
   11288:	cmp	r8, r5
   1128c:	beq	1133c <close@plt+0x254>
   11290:	ldr	r0, [r7], #4
   11294:	mov	r1, #61	; 0x3d
   11298:	bl	11010 <strchr@plt>
   1129c:	cmp	r0, #0
   112a0:	bne	11284 <close@plt+0x19c>
   112a4:	ldr	r3, [pc, #232]	; 11394 <close@plt+0x2ac>
   112a8:	mov	lr, r0
   112ac:	ldr	r3, [r4, r3]
   112b0:	ldr	ip, [r3]
   112b4:	sub	sl, ip, #4
   112b8:	ldr	r3, [sl, #4]!
   112bc:	cmp	r3, #0
   112c0:	beq	11334 <close@plt+0x24c>
   112c4:	ldr	r0, [r7, #-4]
   112c8:	mov	r2, r3
   112cc:	ldrb	r3, [r3]
   112d0:	sub	r0, r0, #1
   112d4:	b	112dc <close@plt+0x1f4>
   112d8:	add	r2, r2, #1
   112dc:	cmp	r3, #0
   112e0:	beq	112b8 <close@plt+0x1d0>
   112e4:	ldrb	r1, [r0, #1]!
   112e8:	cmp	r1, #0
   112ec:	beq	112b8 <close@plt+0x1d0>
   112f0:	cmp	r3, r1
   112f4:	bne	112b8 <close@plt+0x1d0>
   112f8:	ldrb	r3, [r2, #1]
   112fc:	cmp	r3, #61	; 0x3d
   11300:	bne	112d8 <close@plt+0x1f0>
   11304:	ldrb	r1, [r0, #1]
   11308:	cmp	r1, #0
   1130c:	bne	112d8 <close@plt+0x1f0>
   11310:	cmp	r6, #0
   11314:	add	r2, r2, #2
   11318:	mov	r0, #1
   1131c:	mov	r1, fp
   11320:	moveq	r3, #10
   11324:	movne	r3, #0
   11328:	bl	11058 <__printf_chk@plt>
   1132c:	mov	lr, #1
   11330:	b	112b8 <close@plt+0x1d0>
   11334:	add	r9, r9, lr
   11338:	b	11284 <close@plt+0x19c>
   1133c:	ldr	r2, [sp, #20]
   11340:	ldr	r3, [r2]
   11344:	rsb	r8, r3, r8
   11348:	cmp	r9, r8
   1134c:	beq	1126c <close@plt+0x184>
   11350:	mov	r0, #1
   11354:	b	11270 <close@plt+0x188>
   11358:	andeq	r3, r0, r8, lsr r4
   1135c:	andeq	r3, r0, ip, ror #6
   11360:	andeq	r3, r0, r0, asr r4
   11364:	andeq	r3, r0, ip, lsl r4
   11368:	andeq	r3, r1, r8, lsr sp
   1136c:	muleq	r1, ip, lr
   11370:	andeq	r0, r0, r0, lsl #2
   11374:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11378:	strdeq	r0, [r0], -ip
   1137c:	andeq	r0, r0, r8, ror #1
   11380:	muleq	r0, ip, r3
   11384:	andeq	r3, r0, r0, lsr #7
   11388:	andeq	r3, r0, ip, ror r2
   1138c:	muleq	r0, ip, r2
   11390:	andeq	r0, r0, r4, ror #1
   11394:	andeq	r0, r0, r4, lsl r1
   11398:	andeq	r3, r0, r0, ror #6
   1139c:	andeq	r3, r0, ip, lsl r3
   113a0:	mov	fp, #0
   113a4:	mov	lr, #0
   113a8:	pop	{r1}		; (ldr r1, [sp], #4)
   113ac:	mov	r2, sp
   113b0:	push	{r2}		; (str r2, [sp, #-4]!)
   113b4:	push	{r0}		; (str r0, [sp, #-4]!)
   113b8:	ldr	ip, [pc, #16]	; 113d0 <close@plt+0x2e8>
   113bc:	push	{ip}		; (str ip, [sp, #-4]!)
   113c0:	ldr	r0, [pc, #12]	; 113d4 <close@plt+0x2ec>
   113c4:	ldr	r3, [pc, #12]	; 113d8 <close@plt+0x2f0>
   113c8:	bl	10fbc <__libc_start_main@plt>
   113cc:	bl	110dc <abort@plt>
   113d0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   113d4:	strdeq	r1, [r1], -r4
   113d8:	muleq	r1, r0, r1
   113dc:	ldr	r3, [pc, #20]	; 113f8 <close@plt+0x310>
   113e0:	ldr	r2, [pc, #20]	; 113fc <close@plt+0x314>
   113e4:	add	r3, pc, r3
   113e8:	ldr	r2, [r3, r2]
   113ec:	cmp	r2, #0
   113f0:	bxeq	lr
   113f4:	b	10fd4 <__gmon_start__@plt>
   113f8:	andeq	r3, r1, r4, lsl ip
   113fc:	strdeq	r0, [r0], -r4
   11400:	push	{r3, lr}
   11404:	movw	r0, #20836	; 0x5164
   11408:	ldr	r3, [pc, #36]	; 11434 <close@plt+0x34c>
   1140c:	movt	r0, #2
   11410:	rsb	r3, r0, r3
   11414:	cmp	r3, #6
   11418:	popls	{r3, pc}
   1141c:	movw	r3, #0
   11420:	movt	r3, #0
   11424:	cmp	r3, #0
   11428:	popeq	{r3, pc}
   1142c:	blx	r3
   11430:	pop	{r3, pc}
   11434:	andeq	r5, r2, r7, ror #2
   11438:	push	{r3, lr}
   1143c:	movw	r0, #20836	; 0x5164
   11440:	movw	r3, #20836	; 0x5164
   11444:	movt	r0, #2
   11448:	movt	r3, #2
   1144c:	rsb	r3, r0, r3
   11450:	asr	r3, r3, #2
   11454:	add	r3, r3, r3, lsr #31
   11458:	asrs	r1, r3, #1
   1145c:	popeq	{r3, pc}
   11460:	movw	r2, #0
   11464:	movt	r2, #0
   11468:	cmp	r2, #0
   1146c:	popeq	{r3, pc}
   11470:	blx	r2
   11474:	pop	{r3, pc}
   11478:	push	{r4, lr}
   1147c:	movw	r4, #20836	; 0x5164
   11480:	movt	r4, #2
   11484:	ldrb	r3, [r4]
   11488:	cmp	r3, #0
   1148c:	popne	{r4, pc}
   11490:	bl	11400 <close@plt+0x318>
   11494:	mov	r3, #1
   11498:	strb	r3, [r4]
   1149c:	pop	{r4, pc}
   114a0:	movw	r0, #20128	; 0x4ea0
   114a4:	movt	r0, #2
   114a8:	push	{r3, lr}
   114ac:	ldr	r3, [r0]
   114b0:	cmp	r3, #0
   114b4:	beq	114cc <close@plt+0x3e4>
   114b8:	movw	r3, #0
   114bc:	movt	r3, #0
   114c0:	cmp	r3, #0
   114c4:	beq	114cc <close@plt+0x3e4>
   114c8:	blx	r3
   114cc:	pop	{r3, lr}
   114d0:	b	11438 <close@plt+0x350>
   114d4:	push	{r4, r5, r6, lr}
   114d8:	subs	r4, r0, #0
   114dc:	ldr	r5, [pc, #440]	; 1169c <close@plt+0x5b4>
   114e0:	add	r5, pc, r5
   114e4:	beq	1152c <close@plt+0x444>
   114e8:	ldr	r3, [pc, #432]	; 116a0 <close@plt+0x5b8>
   114ec:	mov	r2, #5
   114f0:	ldr	r1, [pc, #428]	; 116a4 <close@plt+0x5bc>
   114f4:	mov	r0, #0
   114f8:	ldr	r3, [r5, r3]
   114fc:	add	r1, pc, r1
   11500:	ldr	r6, [r3]
   11504:	bl	10f08 <dcgettext@plt>
   11508:	ldr	r3, [pc, #408]	; 116a8 <close@plt+0x5c0>
   1150c:	mov	r1, #1
   11510:	ldr	r3, [r5, r3]
   11514:	ldr	r3, [r3]
   11518:	mov	r2, r0
   1151c:	mov	r0, r6
   11520:	bl	11070 <__fprintf_chk@plt>
   11524:	mov	r0, r4
   11528:	bl	10ff8 <exit@plt>
   1152c:	ldr	r1, [pc, #376]	; 116ac <close@plt+0x5c4>
   11530:	mov	r2, #5
   11534:	add	r1, pc, r1
   11538:	bl	10f08 <dcgettext@plt>
   1153c:	ldr	r3, [pc, #356]	; 116a8 <close@plt+0x5c0>
   11540:	ldr	r6, [r5, r3]
   11544:	ldr	r2, [r6]
   11548:	mov	r1, r0
   1154c:	mov	r0, #1
   11550:	bl	11058 <__printf_chk@plt>
   11554:	ldr	r1, [pc, #340]	; 116b0 <close@plt+0x5c8>
   11558:	mov	r2, #5
   1155c:	mov	r0, r4
   11560:	add	r1, pc, r1
   11564:	bl	10f08 <dcgettext@plt>
   11568:	ldr	r3, [pc, #324]	; 116b4 <close@plt+0x5cc>
   1156c:	ldr	r5, [r5, r3]
   11570:	ldr	r1, [r5]
   11574:	bl	10e9c <fputs_unlocked@plt>
   11578:	ldr	r1, [pc, #312]	; 116b8 <close@plt+0x5d0>
   1157c:	mov	r2, #5
   11580:	mov	r0, r4
   11584:	add	r1, pc, r1
   11588:	bl	10f08 <dcgettext@plt>
   1158c:	ldr	r1, [r5]
   11590:	bl	10e9c <fputs_unlocked@plt>
   11594:	ldr	r1, [pc, #288]	; 116bc <close@plt+0x5d4>
   11598:	mov	r2, #5
   1159c:	mov	r0, r4
   115a0:	add	r1, pc, r1
   115a4:	bl	10f08 <dcgettext@plt>
   115a8:	ldr	r1, [r5]
   115ac:	bl	10e9c <fputs_unlocked@plt>
   115b0:	ldr	r1, [pc, #264]	; 116c0 <close@plt+0x5d8>
   115b4:	mov	r2, #5
   115b8:	mov	r0, r4
   115bc:	add	r1, pc, r1
   115c0:	bl	10f08 <dcgettext@plt>
   115c4:	ldr	r2, [pc, #248]	; 116c4 <close@plt+0x5dc>
   115c8:	add	r2, pc, r2
   115cc:	mov	r1, r0
   115d0:	mov	r0, #1
   115d4:	bl	11058 <__printf_chk@plt>
   115d8:	ldr	r1, [pc, #232]	; 116c8 <close@plt+0x5e0>
   115dc:	mov	r2, #5
   115e0:	mov	r0, r4
   115e4:	add	r1, pc, r1
   115e8:	bl	10f08 <dcgettext@plt>
   115ec:	ldr	r2, [pc, #216]	; 116cc <close@plt+0x5e4>
   115f0:	ldr	r3, [pc, #216]	; 116d0 <close@plt+0x5e8>
   115f4:	add	r2, pc, r2
   115f8:	add	r3, pc, r3
   115fc:	mov	r1, r0
   11600:	mov	r0, #1
   11604:	bl	11058 <__printf_chk@plt>
   11608:	mov	r0, #5
   1160c:	mov	r1, r4
   11610:	bl	110a0 <setlocale@plt>
   11614:	cmp	r0, #0
   11618:	beq	11634 <close@plt+0x54c>
   1161c:	ldr	r1, [pc, #176]	; 116d4 <close@plt+0x5ec>
   11620:	mov	r2, #3
   11624:	add	r1, pc, r1
   11628:	bl	110d0 <strncmp@plt>
   1162c:	cmp	r0, #0
   11630:	bne	11668 <close@plt+0x580>
   11634:	ldr	r1, [pc, #156]	; 116d8 <close@plt+0x5f0>
   11638:	mov	r2, #5
   1163c:	mov	r0, #0
   11640:	add	r1, pc, r1
   11644:	bl	10f08 <dcgettext@plt>
   11648:	mov	r5, r0
   1164c:	ldr	r0, [r6]
   11650:	bl	11820 <close_stdout@@Base+0x118>
   11654:	mov	r1, r5
   11658:	mov	r2, r0
   1165c:	mov	r0, #1
   11660:	bl	11058 <__printf_chk@plt>
   11664:	b	11524 <close@plt+0x43c>
   11668:	ldr	r1, [pc, #108]	; 116dc <close@plt+0x5f4>
   1166c:	mov	r2, #5
   11670:	mov	r0, r4
   11674:	add	r1, pc, r1
   11678:	bl	10f08 <dcgettext@plt>
   1167c:	mov	r5, r0
   11680:	ldr	r0, [r6]
   11684:	bl	11820 <close_stdout@@Base+0x118>
   11688:	mov	r1, r5
   1168c:	mov	r2, r0
   11690:	mov	r0, #1
   11694:	bl	11058 <__printf_chk@plt>
   11698:	b	11634 <close@plt+0x54c>
   1169c:	andeq	r3, r1, r8, lsl fp
   116a0:	andeq	r0, r0, ip, ror #1
   116a4:	andeq	r2, r0, r0, lsr sp
   116a8:	andeq	r0, r0, r8, lsl #2
   116ac:	andeq	r2, r0, r0, lsr #26
   116b0:	muleq	r0, ip, sp
   116b4:	strdeq	r0, [r0], -ip
   116b8:	andeq	r2, r0, r0, asr #27
   116bc:	ldrdeq	r2, [r0], -r4
   116c0:	strdeq	r2, [r0], -r0
   116c4:	andeq	r2, r0, r4, lsr #29
   116c8:	muleq	r0, r4, lr
   116cc:	muleq	r0, ip, lr
   116d0:	andeq	r2, r0, r8, lsr #29
   116d4:	andeq	r2, r0, r4, lsr #29
   116d8:	ldrdeq	r2, [r0], -r4
   116dc:	andeq	r2, r0, r8, asr lr
   116e0:	ldr	r3, [pc, #8]	; 116f0 <close@plt+0x608>
   116e4:	add	r3, pc, r3
   116e8:	str	r0, [r3]
   116ec:	bx	lr
   116f0:	andeq	r3, r1, ip, ror sl
   116f4:	ldr	r3, [pc, #8]	; 11704 <close@plt+0x61c>
   116f8:	add	r3, pc, r3
   116fc:	strb	r0, [r3, #4]
   11700:	bx	lr
   11704:	andeq	r3, r1, r8, ror #20

00011708 <close_stdout@@Base>:
   11708:	push	{r4, r5, r6, r7, lr}
   1170c:	sub	sp, sp, #12
   11710:	ldr	r4, [pc, #228]	; 117fc <close_stdout@@Base+0xf4>
   11714:	ldr	r3, [pc, #228]	; 11800 <close_stdout@@Base+0xf8>
   11718:	add	r4, pc, r4
   1171c:	ldr	r3, [r4, r3]
   11720:	ldr	r0, [r3]
   11724:	bl	1392c <close_stdout@@Base+0x2224>
   11728:	cmp	r0, #0
   1172c:	beq	11754 <close_stdout@@Base+0x4c>
   11730:	ldr	r3, [pc, #204]	; 11804 <close_stdout@@Base+0xfc>
   11734:	add	r3, pc, r3
   11738:	ldrb	r3, [r3, #4]
   1173c:	cmp	r3, #0
   11740:	beq	11774 <close_stdout@@Base+0x6c>
   11744:	bl	11028 <__errno_location@plt>
   11748:	ldr	r3, [r0]
   1174c:	cmp	r3, #32
   11750:	bne	11774 <close_stdout@@Base+0x6c>
   11754:	ldr	r3, [pc, #172]	; 11808 <close_stdout@@Base+0x100>
   11758:	ldr	r3, [r4, r3]
   1175c:	ldr	r0, [r3]
   11760:	bl	1392c <close_stdout@@Base+0x2224>
   11764:	cmp	r0, #0
   11768:	bne	117c8 <close_stdout@@Base+0xc0>
   1176c:	add	sp, sp, #12
   11770:	pop	{r4, r5, r6, r7, pc}
   11774:	ldr	r1, [pc, #144]	; 1180c <close_stdout@@Base+0x104>
   11778:	mov	r0, #0
   1177c:	mov	r2, #5
   11780:	add	r1, pc, r1
   11784:	bl	10f08 <dcgettext@plt>
   11788:	ldr	r3, [pc, #128]	; 11810 <close_stdout@@Base+0x108>
   1178c:	ldr	r5, [pc, r3]
   11790:	cmp	r5, #0
   11794:	mov	r6, r0
   11798:	beq	117d8 <close_stdout@@Base+0xd0>
   1179c:	bl	11028 <__errno_location@plt>
   117a0:	ldr	r7, [r0]
   117a4:	mov	r0, r5
   117a8:	bl	12fc0 <close_stdout@@Base+0x18b8>
   117ac:	ldr	r2, [pc, #96]	; 11814 <close_stdout@@Base+0x10c>
   117b0:	str	r6, [sp]
   117b4:	mov	r1, r7
   117b8:	add	r2, pc, r2
   117bc:	mov	r3, r0
   117c0:	mov	r0, #0
   117c4:	bl	10f8c <error@plt>
   117c8:	ldr	r3, [pc, #72]	; 11818 <close_stdout@@Base+0x110>
   117cc:	ldr	r3, [r4, r3]
   117d0:	ldr	r0, [r3]
   117d4:	bl	10ed8 <_exit@plt>
   117d8:	bl	11028 <__errno_location@plt>
   117dc:	ldr	r2, [pc, #56]	; 1181c <close_stdout@@Base+0x114>
   117e0:	add	r2, pc, r2
   117e4:	mov	r3, r0
   117e8:	mov	r0, r5
   117ec:	ldr	r1, [r3]
   117f0:	mov	r3, r6
   117f4:	bl	10f8c <error@plt>
   117f8:	b	117c8 <close_stdout@@Base+0xc0>
   117fc:	andeq	r3, r1, r0, ror #17
   11800:	strdeq	r0, [r0], -ip
   11804:	andeq	r3, r1, ip, lsr #20
   11808:	andeq	r0, r0, ip, ror #1
   1180c:	andeq	r2, r0, r0, asr #28
   11810:	ldrdeq	r3, [r1], -r4
   11814:	andeq	r2, r0, r4, lsl lr
   11818:	andeq	r0, r0, r0, lsl #2
   1181c:	strdeq	r2, [r0], -r0
   11820:	ldrb	r3, [r0]
   11824:	cmp	r3, #47	; 0x2f
   11828:	bne	11844 <close_stdout@@Base+0x13c>
   1182c:	add	r2, r0, #1
   11830:	mov	r0, r2
   11834:	add	r2, r2, #1
   11838:	ldrb	r3, [r0]
   1183c:	cmp	r3, #47	; 0x2f
   11840:	beq	11830 <close_stdout@@Base+0x128>
   11844:	cmp	r3, #0
   11848:	bxeq	lr
   1184c:	mov	r2, r0
   11850:	mov	r1, #0
   11854:	cmp	r3, #47	; 0x2f
   11858:	moveq	r1, #1
   1185c:	beq	1186c <close_stdout@@Base+0x164>
   11860:	cmp	r1, #0
   11864:	movne	r0, r2
   11868:	movne	r1, #0
   1186c:	ldrb	r3, [r2, #1]!
   11870:	cmp	r3, #0
   11874:	bne	11854 <close_stdout@@Base+0x14c>
   11878:	bx	lr
   1187c:	push	{r4, lr}
   11880:	mov	r4, r0
   11884:	bl	11004 <strlen@plt>
   11888:	cmp	r0, #1
   1188c:	popls	{r4, pc}
   11890:	sub	r3, r0, #1
   11894:	ldrb	r2, [r4, r3]
   11898:	cmp	r2, #47	; 0x2f
   1189c:	popne	{r4, pc}
   118a0:	mov	r0, r3
   118a4:	cmp	r0, #1
   118a8:	sub	r3, r3, #1
   118ac:	beq	118c0 <close_stdout@@Base+0x1b8>
   118b0:	ldrb	r2, [r4, r3]
   118b4:	cmp	r2, #47	; 0x2f
   118b8:	popne	{r4, pc}
   118bc:	b	118a0 <close_stdout@@Base+0x198>
   118c0:	pop	{r4, pc}
   118c4:	push	{r3, r4, r5, r6, r7, lr}
   118c8:	subs	r4, r0, #0
   118cc:	ldr	r5, [pc, #172]	; 11980 <close_stdout@@Base+0x278>
   118d0:	add	r5, pc, r5
   118d4:	beq	1195c <close_stdout@@Base+0x254>
   118d8:	mov	r1, #47	; 0x2f
   118dc:	bl	110ac <strrchr@plt>
   118e0:	subs	r6, r0, #0
   118e4:	beq	11940 <close_stdout@@Base+0x238>
   118e8:	add	r7, r6, #1
   118ec:	rsb	r3, r4, r7
   118f0:	cmp	r3, #6
   118f4:	ble	11940 <close_stdout@@Base+0x238>
   118f8:	ldr	r1, [pc, #132]	; 11984 <close_stdout@@Base+0x27c>
   118fc:	sub	r0, r6, #6
   11900:	mov	r2, #7
   11904:	add	r1, pc, r1
   11908:	bl	110d0 <strncmp@plt>
   1190c:	cmp	r0, #0
   11910:	bne	11940 <close_stdout@@Base+0x238>
   11914:	ldr	r1, [pc, #108]	; 11988 <close_stdout@@Base+0x280>
   11918:	mov	r0, r7
   1191c:	mov	r2, #3
   11920:	add	r1, pc, r1
   11924:	bl	110d0 <strncmp@plt>
   11928:	cmp	r0, #0
   1192c:	movne	r4, r7
   11930:	ldreq	r3, [pc, #84]	; 1198c <close_stdout@@Base+0x284>
   11934:	addeq	r4, r6, #4
   11938:	ldreq	r3, [r5, r3]
   1193c:	streq	r4, [r3]
   11940:	ldr	r2, [pc, #72]	; 11990 <close_stdout@@Base+0x288>
   11944:	ldr	r3, [pc, #72]	; 11994 <close_stdout@@Base+0x28c>
   11948:	ldr	r2, [r5, r2]
   1194c:	str	r4, [r2]
   11950:	ldr	r3, [r5, r3]
   11954:	str	r4, [r3]
   11958:	pop	{r3, r4, r5, r6, r7, pc}
   1195c:	ldr	r3, [pc, #52]	; 11998 <close_stdout@@Base+0x290>
   11960:	mov	r1, #1
   11964:	ldr	r0, [pc, #48]	; 1199c <close_stdout@@Base+0x294>
   11968:	mov	r2, #55	; 0x37
   1196c:	ldr	r3, [r5, r3]
   11970:	add	r0, pc, r0
   11974:	ldr	r3, [r3]
   11978:	bl	10f44 <fwrite@plt>
   1197c:	bl	110dc <abort@plt>
   11980:	andeq	r3, r1, r8, lsr #14
   11984:	andeq	r2, r0, r8, lsl #26
   11988:	strdeq	r2, [r0], -r4
   1198c:	andeq	r0, r0, r0, lsl r1
   11990:	andeq	r0, r0, r8, lsl #2
   11994:	andeq	r0, r0, r4, lsl #2
   11998:	andeq	r0, r0, ip, ror #1
   1199c:	andeq	r2, r0, r4, ror #24
   119a0:	push	{r3, lr}
   119a4:	mov	r3, r0
   119a8:	mov	r2, #0
   119ac:	cmp	r1, #8
   119b0:	str	r2, [r3], #4
   119b4:	add	r3, r3, #4
   119b8:	str	r2, [r0, #4]
   119bc:	str	r2, [r3], #4
   119c0:	str	r2, [r3], #4
   119c4:	str	r2, [r3], #4
   119c8:	str	r2, [r3], #4
   119cc:	str	r2, [r3], #4
   119d0:	str	r2, [r3], #4
   119d4:	str	r2, [r3], #4
   119d8:	str	r2, [r3], #4
   119dc:	str	r2, [r3], #4
   119e0:	str	r2, [r3]
   119e4:	beq	119f0 <close_stdout@@Base+0x2e8>
   119e8:	str	r1, [r0]
   119ec:	pop	{r3, pc}
   119f0:	bl	110dc <abort@plt>
   119f4:	push	{r4, r5, r6, lr}
   119f8:	mov	r4, r0
   119fc:	mov	r6, r1
   11a00:	mov	r0, #0
   11a04:	mov	r1, r4
   11a08:	mov	r2, #5
   11a0c:	bl	10f08 <dcgettext@plt>
   11a10:	cmp	r0, r4
   11a14:	mov	r5, r0
   11a18:	beq	11a20 <close_stdout@@Base+0x318>
   11a1c:	pop	{r4, r5, r6, pc}
   11a20:	bl	139ac <close_stdout@@Base+0x22a4>
   11a24:	ldrb	r3, [r0]
   11a28:	bic	r3, r3, #32
   11a2c:	cmp	r3, #85	; 0x55
   11a30:	bne	11aa4 <close_stdout@@Base+0x39c>
   11a34:	ldrb	r3, [r0, #1]
   11a38:	bic	r3, r3, #32
   11a3c:	cmp	r3, #84	; 0x54
   11a40:	bne	11a90 <close_stdout@@Base+0x388>
   11a44:	ldrb	r3, [r0, #2]
   11a48:	bic	r3, r3, #32
   11a4c:	cmp	r3, #70	; 0x46
   11a50:	bne	11a90 <close_stdout@@Base+0x388>
   11a54:	ldrb	r3, [r0, #3]
   11a58:	cmp	r3, #45	; 0x2d
   11a5c:	bne	11a90 <close_stdout@@Base+0x388>
   11a60:	ldrb	r3, [r0, #4]
   11a64:	cmp	r3, #56	; 0x38
   11a68:	bne	11a90 <close_stdout@@Base+0x388>
   11a6c:	ldrb	r3, [r0, #5]
   11a70:	cmp	r3, #0
   11a74:	bne	11a90 <close_stdout@@Base+0x388>
   11a78:	ldrb	r3, [r5]
   11a7c:	cmp	r3, #96	; 0x60
   11a80:	beq	11b1c <close_stdout@@Base+0x414>
   11a84:	ldr	r0, [pc, #180]	; 11b40 <close_stdout@@Base+0x438>
   11a88:	add	r0, pc, r0
   11a8c:	pop	{r4, r5, r6, pc}
   11a90:	cmp	r6, #7
   11a94:	beq	11b28 <close_stdout@@Base+0x420>
   11a98:	ldr	r0, [pc, #164]	; 11b44 <close_stdout@@Base+0x43c>
   11a9c:	add	r0, pc, r0
   11aa0:	pop	{r4, r5, r6, pc}
   11aa4:	cmp	r3, #71	; 0x47
   11aa8:	bne	11a90 <close_stdout@@Base+0x388>
   11aac:	ldrb	r3, [r0, #1]
   11ab0:	bic	r3, r3, #32
   11ab4:	cmp	r3, #66	; 0x42
   11ab8:	bne	11a90 <close_stdout@@Base+0x388>
   11abc:	ldrb	r3, [r0, #2]
   11ac0:	cmp	r3, #49	; 0x31
   11ac4:	bne	11a90 <close_stdout@@Base+0x388>
   11ac8:	ldrb	r3, [r0, #3]
   11acc:	cmp	r3, #56	; 0x38
   11ad0:	bne	11a90 <close_stdout@@Base+0x388>
   11ad4:	ldrb	r3, [r0, #4]
   11ad8:	cmp	r3, #48	; 0x30
   11adc:	bne	11a90 <close_stdout@@Base+0x388>
   11ae0:	ldrb	r3, [r0, #5]
   11ae4:	cmp	r3, #51	; 0x33
   11ae8:	bne	11a90 <close_stdout@@Base+0x388>
   11aec:	ldrb	r3, [r0, #6]
   11af0:	cmp	r3, #48	; 0x30
   11af4:	bne	11a90 <close_stdout@@Base+0x388>
   11af8:	ldrb	r3, [r0, #7]
   11afc:	cmp	r3, #0
   11b00:	bne	11a90 <close_stdout@@Base+0x388>
   11b04:	ldrb	r3, [r5]
   11b08:	cmp	r3, #96	; 0x60
   11b0c:	beq	11b34 <close_stdout@@Base+0x42c>
   11b10:	ldr	r0, [pc, #48]	; 11b48 <close_stdout@@Base+0x440>
   11b14:	add	r0, pc, r0
   11b18:	pop	{r4, r5, r6, pc}
   11b1c:	ldr	r0, [pc, #40]	; 11b4c <close_stdout@@Base+0x444>
   11b20:	add	r0, pc, r0
   11b24:	pop	{r4, r5, r6, pc}
   11b28:	ldr	r0, [pc, #32]	; 11b50 <close_stdout@@Base+0x448>
   11b2c:	add	r0, pc, r0
   11b30:	pop	{r4, r5, r6, pc}
   11b34:	ldr	r0, [pc, #24]	; 11b54 <close_stdout@@Base+0x44c>
   11b38:	add	r0, pc, r0
   11b3c:	pop	{r4, r5, r6, pc}
   11b40:			; <UNDEFINED> instruction: 0x00002bb0
   11b44:	andeq	r2, r0, r4, lsr #23
   11b48:	andeq	r2, r0, r8, lsr #22
   11b4c:	andeq	r2, r0, ip, lsr #22
   11b50:	andeq	r2, r0, r8, lsl fp
   11b54:	andeq	r2, r0, r0, lsl fp
   11b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b5c:	sub	sp, sp, #124	; 0x7c
   11b60:	ldr	ip, [pc, #3304]	; 12850 <close_stdout@@Base+0x1148>
   11b64:	mov	sl, r1
   11b68:	str	r0, [sp, #40]	; 0x28
   11b6c:	mov	r8, r3
   11b70:	ldr	r0, [pc, #3292]	; 12854 <close_stdout@@Base+0x114c>
   11b74:	add	ip, pc, ip
   11b78:	str	r2, [sp, #32]
   11b7c:	ldr	r1, [sp, #164]	; 0xa4
   11b80:	mov	r3, ip
   11b84:	ldr	r0, [ip, r0]
   11b88:	ldr	r2, [sp, #172]	; 0xac
   11b8c:	ubfx	r1, r1, #1, #1
   11b90:	str	r1, [sp, #36]	; 0x24
   11b94:	str	r0, [sp, #56]	; 0x38
   11b98:	ldr	r0, [sp, #168]	; 0xa8
   11b9c:	ldr	r1, [sp, #176]	; 0xb0
   11ba0:	str	r2, [sp, #72]	; 0x48
   11ba4:	str	r0, [sp, #48]	; 0x30
   11ba8:	ldr	r0, [sp, #56]	; 0x38
   11bac:	str	r1, [sp, #68]	; 0x44
   11bb0:	ldr	r3, [r0]
   11bb4:	str	r3, [sp, #116]	; 0x74
   11bb8:	bl	10f5c <__ctype_get_mb_cur_max@plt>
   11bbc:	ldr	r2, [sp, #160]	; 0xa0
   11bc0:	str	r0, [sp, #64]	; 0x40
   11bc4:	cmp	r2, #8
   11bc8:	addls	pc, pc, r2, lsl #2
   11bcc:	b	1272c <close_stdout@@Base+0x1024>
   11bd0:	b	11bf4 <close_stdout@@Base+0x4ec>
   11bd4:	b	12444 <close_stdout@@Base+0xd3c>
   11bd8:	b	12474 <close_stdout@@Base+0xd6c>
   11bdc:	b	12324 <close_stdout@@Base+0xc1c>
   11be0:	b	12364 <close_stdout@@Base+0xc5c>
   11be4:	b	12390 <close_stdout@@Base+0xc88>
   11be8:	b	123b0 <close_stdout@@Base+0xca8>
   11bec:	b	123b0 <close_stdout@@Base+0xca8>
   11bf0:	b	123b0 <close_stdout@@Base+0xca8>
   11bf4:	mov	r2, #0
   11bf8:	str	r2, [sp, #36]	; 0x24
   11bfc:	mov	r9, r2
   11c00:	str	r2, [sp, #24]
   11c04:	str	r2, [sp, #28]
   11c08:	str	r2, [sp, #52]	; 0x34
   11c0c:	ldr	r0, [sp, #36]	; 0x24
   11c10:	mov	fp, #0
   11c14:	ldr	r1, [sp, #24]
   11c18:	eor	r2, r0, #1
   11c1c:	eor	r3, r1, #1
   11c20:	and	r3, r2, r3
   11c24:	and	r2, r1, r0
   11c28:	str	r3, [sp, #44]	; 0x2c
   11c2c:	str	r2, [sp, #76]	; 0x4c
   11c30:	cmn	r8, #1
   11c34:	beq	11fb4 <close_stdout@@Base+0x8ac>
   11c38:	subs	r3, fp, r8
   11c3c:	movne	r3, #1
   11c40:	cmp	r3, #0
   11c44:	beq	11fcc <close_stdout@@Base+0x8c4>
   11c48:	ldr	r3, [sp, #28]
   11c4c:	ldr	r0, [sp, #24]
   11c50:	adds	r7, r3, #0
   11c54:	movne	r7, #1
   11c58:	ands	r6, r7, r0
   11c5c:	bne	124b8 <close_stdout@@Base+0xdb0>
   11c60:	ldr	r1, [sp, #32]
   11c64:	add	r5, r1, fp
   11c68:	ldrb	r4, [r5]
   11c6c:	cmp	r4, #126	; 0x7e
   11c70:	addls	pc, pc, r4, lsl #2
   11c74:	b	12238 <close_stdout@@Base+0xb30>
   11c78:	b	12144 <close_stdout@@Base+0xa3c>
   11c7c:	b	12238 <close_stdout@@Base+0xb30>
   11c80:	b	12238 <close_stdout@@Base+0xb30>
   11c84:	b	12238 <close_stdout@@Base+0xb30>
   11c88:	b	12238 <close_stdout@@Base+0xb30>
   11c8c:	b	12238 <close_stdout@@Base+0xb30>
   11c90:	b	12238 <close_stdout@@Base+0xb30>
   11c94:	b	1212c <close_stdout@@Base+0xa24>
   11c98:	b	12114 <close_stdout@@Base+0xa0c>
   11c9c:	b	1213c <close_stdout@@Base+0xa34>
   11ca0:	b	12134 <close_stdout@@Base+0xa2c>
   11ca4:	b	12124 <close_stdout@@Base+0xa1c>
   11ca8:	b	1211c <close_stdout@@Base+0xa14>
   11cac:	b	120e0 <close_stdout@@Base+0x9d8>
   11cb0:	b	12238 <close_stdout@@Base+0xb30>
   11cb4:	b	12238 <close_stdout@@Base+0xb30>
   11cb8:	b	12238 <close_stdout@@Base+0xb30>
   11cbc:	b	12238 <close_stdout@@Base+0xb30>
   11cc0:	b	12238 <close_stdout@@Base+0xb30>
   11cc4:	b	12238 <close_stdout@@Base+0xb30>
   11cc8:	b	12238 <close_stdout@@Base+0xb30>
   11ccc:	b	12238 <close_stdout@@Base+0xb30>
   11cd0:	b	12238 <close_stdout@@Base+0xb30>
   11cd4:	b	12238 <close_stdout@@Base+0xb30>
   11cd8:	b	12238 <close_stdout@@Base+0xb30>
   11cdc:	b	12238 <close_stdout@@Base+0xb30>
   11ce0:	b	12238 <close_stdout@@Base+0xb30>
   11ce4:	b	12238 <close_stdout@@Base+0xb30>
   11ce8:	b	12238 <close_stdout@@Base+0xb30>
   11cec:	b	12238 <close_stdout@@Base+0xb30>
   11cf0:	b	12238 <close_stdout@@Base+0xb30>
   11cf4:	b	12238 <close_stdout@@Base+0xb30>
   11cf8:	b	1206c <close_stdout@@Base+0x964>
   11cfc:	b	1206c <close_stdout@@Base+0x964>
   11d00:	b	1206c <close_stdout@@Base+0x964>
   11d04:	b	12064 <close_stdout@@Base+0x95c>
   11d08:	b	1206c <close_stdout@@Base+0x964>
   11d0c:	b	11f40 <close_stdout@@Base+0x838>
   11d10:	b	1206c <close_stdout@@Base+0x964>
   11d14:	b	121e0 <close_stdout@@Base+0xad8>
   11d18:	b	1206c <close_stdout@@Base+0x964>
   11d1c:	b	1206c <close_stdout@@Base+0x964>
   11d20:	b	1206c <close_stdout@@Base+0x964>
   11d24:	b	11f40 <close_stdout@@Base+0x838>
   11d28:	b	11f40 <close_stdout@@Base+0x838>
   11d2c:	b	11f40 <close_stdout@@Base+0x838>
   11d30:	b	11f40 <close_stdout@@Base+0x838>
   11d34:	b	11f40 <close_stdout@@Base+0x838>
   11d38:	b	11f40 <close_stdout@@Base+0x838>
   11d3c:	b	11f40 <close_stdout@@Base+0x838>
   11d40:	b	11f40 <close_stdout@@Base+0x838>
   11d44:	b	11f40 <close_stdout@@Base+0x838>
   11d48:	b	11f40 <close_stdout@@Base+0x838>
   11d4c:	b	11f40 <close_stdout@@Base+0x838>
   11d50:	b	11f40 <close_stdout@@Base+0x838>
   11d54:	b	11f40 <close_stdout@@Base+0x838>
   11d58:	b	11f40 <close_stdout@@Base+0x838>
   11d5c:	b	11f40 <close_stdout@@Base+0x838>
   11d60:	b	11f40 <close_stdout@@Base+0x838>
   11d64:	b	1206c <close_stdout@@Base+0x964>
   11d68:	b	1206c <close_stdout@@Base+0x964>
   11d6c:	b	1206c <close_stdout@@Base+0x964>
   11d70:	b	1206c <close_stdout@@Base+0x964>
   11d74:	b	11e74 <close_stdout@@Base+0x76c>
   11d78:	b	12238 <close_stdout@@Base+0xb30>
   11d7c:	b	11f40 <close_stdout@@Base+0x838>
   11d80:	b	11f40 <close_stdout@@Base+0x838>
   11d84:	b	11f40 <close_stdout@@Base+0x838>
   11d88:	b	11f40 <close_stdout@@Base+0x838>
   11d8c:	b	11f40 <close_stdout@@Base+0x838>
   11d90:	b	11f40 <close_stdout@@Base+0x838>
   11d94:	b	11f40 <close_stdout@@Base+0x838>
   11d98:	b	11f40 <close_stdout@@Base+0x838>
   11d9c:	b	11f40 <close_stdout@@Base+0x838>
   11da0:	b	11f40 <close_stdout@@Base+0x838>
   11da4:	b	11f40 <close_stdout@@Base+0x838>
   11da8:	b	11f40 <close_stdout@@Base+0x838>
   11dac:	b	11f40 <close_stdout@@Base+0x838>
   11db0:	b	11f40 <close_stdout@@Base+0x838>
   11db4:	b	11f40 <close_stdout@@Base+0x838>
   11db8:	b	11f40 <close_stdout@@Base+0x838>
   11dbc:	b	11f40 <close_stdout@@Base+0x838>
   11dc0:	b	11f40 <close_stdout@@Base+0x838>
   11dc4:	b	11f40 <close_stdout@@Base+0x838>
   11dc8:	b	11f40 <close_stdout@@Base+0x838>
   11dcc:	b	11f40 <close_stdout@@Base+0x838>
   11dd0:	b	11f40 <close_stdout@@Base+0x838>
   11dd4:	b	11f40 <close_stdout@@Base+0x838>
   11dd8:	b	11f40 <close_stdout@@Base+0x838>
   11ddc:	b	11f40 <close_stdout@@Base+0x838>
   11de0:	b	11f40 <close_stdout@@Base+0x838>
   11de4:	b	1206c <close_stdout@@Base+0x964>
   11de8:	b	121c4 <close_stdout@@Base+0xabc>
   11dec:	b	11f40 <close_stdout@@Base+0x838>
   11df0:	b	1206c <close_stdout@@Base+0x964>
   11df4:	b	11f40 <close_stdout@@Base+0x838>
   11df8:	b	1206c <close_stdout@@Base+0x964>
   11dfc:	b	11f40 <close_stdout@@Base+0x838>
   11e00:	b	11f40 <close_stdout@@Base+0x838>
   11e04:	b	11f40 <close_stdout@@Base+0x838>
   11e08:	b	11f40 <close_stdout@@Base+0x838>
   11e0c:	b	11f40 <close_stdout@@Base+0x838>
   11e10:	b	11f40 <close_stdout@@Base+0x838>
   11e14:	b	11f40 <close_stdout@@Base+0x838>
   11e18:	b	11f40 <close_stdout@@Base+0x838>
   11e1c:	b	11f40 <close_stdout@@Base+0x838>
   11e20:	b	11f40 <close_stdout@@Base+0x838>
   11e24:	b	11f40 <close_stdout@@Base+0x838>
   11e28:	b	11f40 <close_stdout@@Base+0x838>
   11e2c:	b	11f40 <close_stdout@@Base+0x838>
   11e30:	b	11f40 <close_stdout@@Base+0x838>
   11e34:	b	11f40 <close_stdout@@Base+0x838>
   11e38:	b	11f40 <close_stdout@@Base+0x838>
   11e3c:	b	11f40 <close_stdout@@Base+0x838>
   11e40:	b	11f40 <close_stdout@@Base+0x838>
   11e44:	b	11f40 <close_stdout@@Base+0x838>
   11e48:	b	11f40 <close_stdout@@Base+0x838>
   11e4c:	b	11f40 <close_stdout@@Base+0x838>
   11e50:	b	11f40 <close_stdout@@Base+0x838>
   11e54:	b	11f40 <close_stdout@@Base+0x838>
   11e58:	b	11f40 <close_stdout@@Base+0x838>
   11e5c:	b	11f40 <close_stdout@@Base+0x838>
   11e60:	b	11f40 <close_stdout@@Base+0x838>
   11e64:	b	1204c <close_stdout@@Base+0x944>
   11e68:	b	1206c <close_stdout@@Base+0x964>
   11e6c:	b	1204c <close_stdout@@Base+0x944>
   11e70:	b	12064 <close_stdout@@Base+0x95c>
   11e74:	ldr	r3, [sp, #160]	; 0xa0
   11e78:	cmp	r3, #2
   11e7c:	beq	12708 <close_stdout@@Base+0x1000>
   11e80:	cmp	r3, #3
   11e84:	bne	11f40 <close_stdout@@Base+0x838>
   11e88:	ldr	r1, [sp, #164]	; 0xa4
   11e8c:	tst	r1, #4
   11e90:	beq	11f40 <close_stdout@@Base+0x838>
   11e94:	add	r3, fp, #2
   11e98:	cmp	r8, r3
   11e9c:	bls	11f40 <close_stdout@@Base+0x838>
   11ea0:	ldrb	r2, [r5, #1]
   11ea4:	mov	r1, #1
   11ea8:	cmp	r2, #63	; 0x3f
   11eac:	bne	11f40 <close_stdout@@Base+0x838>
   11eb0:	ldr	r0, [sp, #32]
   11eb4:	ldrb	ip, [r0, r3]
   11eb8:	sub	r0, ip, #33	; 0x21
   11ebc:	uxtb	r0, r0
   11ec0:	cmp	r0, #29
   11ec4:	bhi	11f40 <close_stdout@@Base+0x838>
   11ec8:	lsl	r1, r1, r0
   11ecc:	movw	r0, #20929	; 0x51c1
   11ed0:	movt	r0, #14336	; 0x3800
   11ed4:	and	r0, r1, r0
   11ed8:	cmp	r0, #0
   11edc:	beq	11f40 <close_stdout@@Base+0x838>
   11ee0:	ldr	r1, [sp, #36]	; 0x24
   11ee4:	cmp	r1, #0
   11ee8:	bne	12088 <close_stdout@@Base+0x980>
   11eec:	cmp	r9, sl
   11ef0:	mov	r4, ip
   11ef4:	mov	fp, r3
   11ef8:	ldrcc	r0, [sp, #40]	; 0x28
   11efc:	strbcc	r2, [r0, r9]
   11f00:	add	r2, r9, #1
   11f04:	cmp	sl, r2
   11f08:	ldrhi	r0, [sp, #40]	; 0x28
   11f0c:	movhi	r1, #34	; 0x22
   11f10:	strbhi	r1, [r0, r2]
   11f14:	add	r2, r9, #2
   11f18:	cmp	sl, r2
   11f1c:	ldrhi	r0, [sp, #40]	; 0x28
   11f20:	movhi	r1, #34	; 0x22
   11f24:	strbhi	r1, [r0, r2]
   11f28:	add	r2, r9, #3
   11f2c:	cmp	sl, r2
   11f30:	add	r9, r9, #4
   11f34:	ldrhi	r0, [sp, #40]	; 0x28
   11f38:	movhi	r1, #63	; 0x3f
   11f3c:	strbhi	r1, [r0, r2]
   11f40:	ldr	r0, [sp, #44]	; 0x2c
   11f44:	cmp	r0, #0
   11f48:	bne	11f70 <close_stdout@@Base+0x868>
   11f4c:	ldr	r1, [sp, #48]	; 0x30
   11f50:	cmp	r1, #0
   11f54:	beq	11f70 <close_stdout@@Base+0x868>
   11f58:	ubfx	r2, r4, #5, #8
   11f5c:	and	r3, r4, #31
   11f60:	ldr	r2, [r1, r2, lsl #2]
   11f64:	lsr	r3, r2, r3
   11f68:	tst	r3, #1
   11f6c:	bne	11f78 <close_stdout@@Base+0x870>
   11f70:	cmp	r6, #0
   11f74:	beq	11f98 <close_stdout@@Base+0x890>
   11f78:	ldr	r2, [sp, #36]	; 0x24
   11f7c:	cmp	r2, #0
   11f80:	bne	12088 <close_stdout@@Base+0x980>
   11f84:	cmp	r9, sl
   11f88:	ldrcc	r0, [sp, #40]	; 0x28
   11f8c:	movcc	r3, #92	; 0x5c
   11f90:	strbcc	r3, [r0, r9]
   11f94:	add	r9, r9, #1
   11f98:	add	fp, fp, #1
   11f9c:	cmp	r9, sl
   11fa0:	ldrcc	r1, [sp, #40]	; 0x28
   11fa4:	strbcc	r4, [r1, r9]
   11fa8:	cmn	r8, #1
   11fac:	add	r9, r9, #1
   11fb0:	bne	11c38 <close_stdout@@Base+0x530>
   11fb4:	ldr	r2, [sp, #32]
   11fb8:	ldrb	r3, [r2, fp]
   11fbc:	adds	r3, r3, #0
   11fc0:	movne	r3, #1
   11fc4:	cmp	r3, #0
   11fc8:	bne	11c48 <close_stdout@@Base+0x540>
   11fcc:	ldr	r3, [sp, #160]	; 0xa0
   11fd0:	cmp	r9, #0
   11fd4:	cmpeq	r3, #2
   11fd8:	bne	11fe8 <close_stdout@@Base+0x8e0>
   11fdc:	ldr	r0, [sp, #36]	; 0x24
   11fe0:	cmp	r0, #0
   11fe4:	bne	12088 <close_stdout@@Base+0x980>
   11fe8:	ldr	r1, [sp, #36]	; 0x24
   11fec:	ldr	r2, [sp, #52]	; 0x34
   11ff0:	eor	r3, r1, #1
   11ff4:	cmp	r2, #0
   11ff8:	moveq	r3, #0
   11ffc:	andne	r3, r3, #1
   12000:	cmp	r3, #0
   12004:	beq	12030 <close_stdout@@Base+0x928>
   12008:	ldrb	r3, [r2]
   1200c:	cmp	r3, #0
   12010:	beq	12030 <close_stdout@@Base+0x928>
   12014:	ldr	r1, [sp, #40]	; 0x28
   12018:	cmp	sl, r9
   1201c:	strbhi	r3, [r1, r9]
   12020:	ldrb	r3, [r2, #1]!
   12024:	add	r9, r9, #1
   12028:	cmp	r3, #0
   1202c:	bne	12018 <close_stdout@@Base+0x910>
   12030:	cmp	r9, sl
   12034:	movcs	r0, r9
   12038:	ldrcc	r1, [sp, #40]	; 0x28
   1203c:	movcc	r3, #0
   12040:	movcc	r0, r9
   12044:	strbcc	r3, [r1, r9]
   12048:	b	120c4 <close_stdout@@Base+0x9bc>
   1204c:	cmn	r8, #1
   12050:	beq	12718 <close_stdout@@Base+0x1010>
   12054:	subs	r3, r8, #1
   12058:	movne	r3, #1
   1205c:	cmp	r3, #0
   12060:	bne	11f40 <close_stdout@@Base+0x838>
   12064:	cmp	fp, #0
   12068:	bne	11f40 <close_stdout@@Base+0x838>
   1206c:	ldr	r3, [sp, #36]	; 0x24
   12070:	ldr	r0, [sp, #160]	; 0xa0
   12074:	cmp	r0, #2
   12078:	movne	r3, #0
   1207c:	andeq	r3, r3, #1
   12080:	cmp	r3, #0
   12084:	beq	11f40 <close_stdout@@Base+0x838>
   12088:	ldr	r2, [sp, #164]	; 0xa4
   1208c:	mov	ip, #0
   12090:	ldr	r0, [sp, #160]	; 0xa0
   12094:	bic	r3, r2, #2
   12098:	ldr	r1, [sp, #72]	; 0x48
   1209c:	ldr	r2, [sp, #68]	; 0x44
   120a0:	stm	sp, {r0, r3}
   120a4:	mov	r3, r8
   120a8:	str	r1, [sp, #12]
   120ac:	mov	r1, sl
   120b0:	str	r2, [sp, #16]
   120b4:	ldr	r0, [sp, #40]	; 0x28
   120b8:	ldr	r2, [sp, #32]
   120bc:	str	ip, [sp, #8]
   120c0:	bl	11b58 <close_stdout@@Base+0x450>
   120c4:	ldr	r1, [sp, #56]	; 0x38
   120c8:	ldr	r2, [sp, #116]	; 0x74
   120cc:	ldr	r3, [r1]
   120d0:	cmp	r2, r3
   120d4:	bne	12808 <close_stdout@@Base+0x1100>
   120d8:	add	sp, sp, #124	; 0x7c
   120dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e0:	mov	r3, #114	; 0x72
   120e4:	ldr	r2, [sp, #36]	; 0x24
   120e8:	ldr	r0, [sp, #160]	; 0xa0
   120ec:	cmp	r0, #2
   120f0:	movne	r2, #0
   120f4:	andeq	r2, r2, #1
   120f8:	cmp	r2, #0
   120fc:	bne	12088 <close_stdout@@Base+0x980>
   12100:	ldr	r1, [sp, #24]
   12104:	cmp	r1, #0
   12108:	beq	11f40 <close_stdout@@Base+0x838>
   1210c:	mov	r4, r3
   12110:	b	11f78 <close_stdout@@Base+0x870>
   12114:	mov	r3, #98	; 0x62
   12118:	b	12100 <close_stdout@@Base+0x9f8>
   1211c:	mov	r3, #102	; 0x66
   12120:	b	12100 <close_stdout@@Base+0x9f8>
   12124:	mov	r3, #118	; 0x76
   12128:	b	12100 <close_stdout@@Base+0x9f8>
   1212c:	mov	r3, #97	; 0x61
   12130:	b	12100 <close_stdout@@Base+0x9f8>
   12134:	mov	r3, #110	; 0x6e
   12138:	b	120e4 <close_stdout@@Base+0x9dc>
   1213c:	mov	r3, #116	; 0x74
   12140:	b	120e4 <close_stdout@@Base+0x9dc>
   12144:	ldr	r2, [sp, #24]
   12148:	cmp	r2, #0
   1214c:	beq	126f4 <close_stdout@@Base+0xfec>
   12150:	ldr	r3, [sp, #36]	; 0x24
   12154:	cmp	r3, #0
   12158:	bne	12088 <close_stdout@@Base+0x980>
   1215c:	cmp	r9, sl
   12160:	add	r2, r9, #1
   12164:	ldrcc	r0, [sp, #40]	; 0x28
   12168:	movcc	r3, #92	; 0x5c
   1216c:	strbcc	r3, [r0, r9]
   12170:	add	r3, fp, #1
   12174:	cmp	r8, r3
   12178:	bls	121b8 <close_stdout@@Base+0xab0>
   1217c:	ldr	r1, [sp, #32]
   12180:	ldrb	r3, [r1, r3]
   12184:	sub	r3, r3, #48	; 0x30
   12188:	cmp	r3, #9
   1218c:	bhi	121b8 <close_stdout@@Base+0xab0>
   12190:	cmp	sl, r2
   12194:	ldrhi	r0, [sp, #40]	; 0x28
   12198:	movhi	r3, #48	; 0x30
   1219c:	strbhi	r3, [r0, r2]
   121a0:	add	r3, r9, #2
   121a4:	cmp	sl, r3
   121a8:	ldrhi	r1, [sp, #40]	; 0x28
   121ac:	movhi	r2, #48	; 0x30
   121b0:	strbhi	r2, [r1, r3]
   121b4:	add	r2, r9, #3
   121b8:	mov	r9, r2
   121bc:	mov	r4, #48	; 0x30
   121c0:	b	11f4c <close_stdout@@Base+0x844>
   121c4:	ldr	r1, [sp, #76]	; 0x4c
   121c8:	cmp	r1, #0
   121cc:	beq	121d8 <close_stdout@@Base+0xad0>
   121d0:	cmp	r7, #0
   121d4:	bne	11f98 <close_stdout@@Base+0x890>
   121d8:	mov	r3, r4
   121dc:	b	120e4 <close_stdout@@Base+0x9dc>
   121e0:	ldr	r1, [sp, #160]	; 0xa0
   121e4:	cmp	r1, #2
   121e8:	bne	11f40 <close_stdout@@Base+0x838>
   121ec:	ldr	r2, [sp, #36]	; 0x24
   121f0:	cmp	r2, #0
   121f4:	bne	12088 <close_stdout@@Base+0x980>
   121f8:	cmp	r9, sl
   121fc:	ldrcc	r0, [sp, #40]	; 0x28
   12200:	movcc	r3, #39	; 0x27
   12204:	strbcc	r3, [r0, r9]
   12208:	add	r3, r9, #1
   1220c:	cmp	sl, r3
   12210:	ldrhi	r1, [sp, #40]	; 0x28
   12214:	movhi	r2, #92	; 0x5c
   12218:	strbhi	r2, [r1, r3]
   1221c:	add	r3, r9, #2
   12220:	cmp	sl, r3
   12224:	add	r9, r9, #3
   12228:	ldrhi	r0, [sp, #40]	; 0x28
   1222c:	movhi	r2, #39	; 0x27
   12230:	strbhi	r2, [r0, r3]
   12234:	b	11f40 <close_stdout@@Base+0x838>
   12238:	ldr	r1, [sp, #64]	; 0x40
   1223c:	cmp	r1, #1
   12240:	bne	12538 <close_stdout@@Base+0xe30>
   12244:	bl	10fec <__ctype_b_loc@plt>
   12248:	ldr	r2, [sp, #64]	; 0x40
   1224c:	sxth	r3, r4
   12250:	str	r2, [sp, #60]	; 0x3c
   12254:	lsl	r3, r3, #1
   12258:	ldr	r2, [r0]
   1225c:	ldrh	r2, [r2, r3]
   12260:	eor	r2, r2, #16384	; 0x4000
   12264:	ubfx	r2, r2, #14, #1
   12268:	ldr	r1, [sp, #24]
   1226c:	ands	r2, r2, r1
   12270:	beq	11f40 <close_stdout@@Base+0x838>
   12274:	ldr	r3, [sp, #60]	; 0x3c
   12278:	mov	r0, #92	; 0x5c
   1227c:	ldr	r7, [sp, #36]	; 0x24
   12280:	add	r1, r3, fp
   12284:	str	r8, [sp, #60]	; 0x3c
   12288:	ldr	r3, [sp, #40]	; 0x28
   1228c:	b	122f0 <close_stdout@@Base+0xbe8>
   12290:	cmp	r7, #0
   12294:	bne	12730 <close_stdout@@Base+0x1028>
   12298:	add	ip, r9, #1
   1229c:	cmp	r9, sl
   122a0:	strbcc	r0, [r3, r9]
   122a4:	cmp	sl, ip
   122a8:	lsrhi	r8, r4, #6
   122ac:	addhi	r8, r8, #48	; 0x30
   122b0:	strbhi	r8, [r3, ip]
   122b4:	add	ip, r9, #2
   122b8:	add	r9, r9, #3
   122bc:	cmp	sl, ip
   122c0:	ubfxhi	r8, r4, #3, #3
   122c4:	and	r4, r4, #7
   122c8:	add	r4, r4, #48	; 0x30
   122cc:	addhi	r8, r8, #48	; 0x30
   122d0:	strbhi	r8, [r3, ip]
   122d4:	add	fp, fp, #1
   122d8:	cmp	r1, fp
   122dc:	bls	1231c <close_stdout@@Base+0xc14>
   122e0:	cmp	r9, sl
   122e4:	strbcc	r4, [r3, r9]
   122e8:	ldrb	r4, [r5, #1]!
   122ec:	add	r9, r9, #1
   122f0:	cmp	r2, #0
   122f4:	bne	12290 <close_stdout@@Base+0xb88>
   122f8:	cmp	r6, #0
   122fc:	beq	122d4 <close_stdout@@Base+0xbcc>
   12300:	add	fp, fp, #1
   12304:	cmp	r9, sl
   12308:	strbcc	r0, [r3, r9]
   1230c:	cmp	r1, fp
   12310:	add	r9, r9, #1
   12314:	mov	r6, #0
   12318:	bhi	122e0 <close_stdout@@Base+0xbd8>
   1231c:	ldr	r8, [sp, #60]	; 0x3c
   12320:	b	11f9c <close_stdout@@Base+0x894>
   12324:	ldr	r3, [sp, #36]	; 0x24
   12328:	cmp	r3, #0
   1232c:	bne	12830 <close_stdout@@Base+0x1128>
   12330:	cmp	sl, #0
   12334:	beq	12748 <close_stdout@@Base+0x1040>
   12338:	ldr	r1, [sp, #40]	; 0x28
   1233c:	mov	r0, #1
   12340:	ldr	r2, [pc, #1296]	; 12858 <close_stdout@@Base+0x1150>
   12344:	mov	r3, #34	; 0x22
   12348:	str	r0, [sp, #24]
   1234c:	mov	r9, r0
   12350:	add	r2, pc, r2
   12354:	str	r0, [sp, #28]
   12358:	strb	r3, [r1]
   1235c:	str	r2, [sp, #52]	; 0x34
   12360:	b	11c0c <close_stdout@@Base+0x504>
   12364:	ldr	r3, [pc, #1264]	; 1285c <close_stdout@@Base+0x1154>
   12368:	mov	r2, #1
   1236c:	mov	r0, #3
   12370:	str	r2, [sp, #36]	; 0x24
   12374:	add	r3, pc, r3
   12378:	str	r2, [sp, #24]
   1237c:	str	r3, [sp, #52]	; 0x34
   12380:	mov	r9, #0
   12384:	str	r2, [sp, #28]
   12388:	str	r0, [sp, #160]	; 0xa0
   1238c:	b	11c0c <close_stdout@@Base+0x504>
   12390:	mov	r0, #0
   12394:	mov	r1, #1
   12398:	str	r0, [sp, #36]	; 0x24
   1239c:	mov	r9, r0
   123a0:	str	r1, [sp, #24]
   123a4:	str	r0, [sp, #28]
   123a8:	str	r0, [sp, #52]	; 0x34
   123ac:	b	11c0c <close_stdout@@Base+0x504>
   123b0:	ldr	r3, [sp, #160]	; 0xa0
   123b4:	cmp	r3, #8
   123b8:	beq	123e4 <close_stdout@@Base+0xcdc>
   123bc:	ldr	r0, [pc, #1180]	; 12860 <close_stdout@@Base+0x1158>
   123c0:	mov	r1, r3
   123c4:	add	r0, pc, r0
   123c8:	bl	119f4 <close_stdout@@Base+0x2ec>
   123cc:	ldr	r1, [sp, #160]	; 0xa0
   123d0:	str	r0, [sp, #72]	; 0x48
   123d4:	ldr	r0, [pc, #1160]	; 12864 <close_stdout@@Base+0x115c>
   123d8:	add	r0, pc, r0
   123dc:	bl	119f4 <close_stdout@@Base+0x2ec>
   123e0:	str	r0, [sp, #68]	; 0x44
   123e4:	ldr	r0, [sp, #36]	; 0x24
   123e8:	cmp	r0, #0
   123ec:	movne	r9, #0
   123f0:	bne	12428 <close_stdout@@Base+0xd20>
   123f4:	ldr	r1, [sp, #72]	; 0x48
   123f8:	ldrb	r3, [r1]
   123fc:	cmp	r3, #0
   12400:	beq	12800 <close_stdout@@Base+0x10f8>
   12404:	mov	r2, r1
   12408:	ldr	r1, [sp, #40]	; 0x28
   1240c:	mov	r9, r0
   12410:	cmp	r9, sl
   12414:	strbcc	r3, [r1, r9]
   12418:	ldrb	r3, [r2, #1]!
   1241c:	add	r9, r9, #1
   12420:	cmp	r3, #0
   12424:	bne	12410 <close_stdout@@Base+0xd08>
   12428:	ldr	r0, [sp, #68]	; 0x44
   1242c:	str	r0, [sp, #52]	; 0x34
   12430:	bl	11004 <strlen@plt>
   12434:	mov	r2, #1
   12438:	str	r2, [sp, #24]
   1243c:	str	r0, [sp, #28]
   12440:	b	11c0c <close_stdout@@Base+0x504>
   12444:	ldr	r3, [pc, #1052]	; 12868 <close_stdout@@Base+0x1160>
   12448:	mov	r2, #0
   1244c:	mov	r1, #1
   12450:	mov	r0, #2
   12454:	add	r3, pc, r3
   12458:	str	r1, [sp, #36]	; 0x24
   1245c:	str	r2, [sp, #24]
   12460:	mov	r9, r2
   12464:	str	r1, [sp, #28]
   12468:	str	r3, [sp, #52]	; 0x34
   1246c:	str	r0, [sp, #160]	; 0xa0
   12470:	b	11c0c <close_stdout@@Base+0x504>
   12474:	ldr	r3, [sp, #36]	; 0x24
   12478:	cmp	r3, #0
   1247c:	bne	1280c <close_stdout@@Base+0x1104>
   12480:	cmp	sl, #0
   12484:	beq	12768 <close_stdout@@Base+0x1060>
   12488:	ldr	r1, [sp, #40]	; 0x28
   1248c:	mov	r3, #39	; 0x27
   12490:	ldr	r2, [sp, #36]	; 0x24
   12494:	mov	r0, #1
   12498:	mov	r9, r0
   1249c:	str	r0, [sp, #28]
   124a0:	strb	r3, [r1]
   124a4:	ldr	r3, [pc, #960]	; 1286c <close_stdout@@Base+0x1164>
   124a8:	str	r2, [sp, #24]
   124ac:	add	r3, pc, r3
   124b0:	str	r3, [sp, #52]	; 0x34
   124b4:	b	11c0c <close_stdout@@Base+0x504>
   124b8:	ldr	r2, [sp, #28]
   124bc:	cmp	r2, #1
   124c0:	add	r4, fp, r2
   124c4:	movls	r3, #0
   124c8:	movhi	r3, #1
   124cc:	cmn	r8, #1
   124d0:	movne	r3, #0
   124d4:	cmp	r3, #0
   124d8:	beq	124e8 <close_stdout@@Base+0xde0>
   124dc:	ldr	r0, [sp, #32]
   124e0:	bl	11004 <strlen@plt>
   124e4:	mov	r8, r0
   124e8:	cmp	r8, r4
   124ec:	ldrcc	r3, [sp, #32]
   124f0:	movcc	r6, #0
   124f4:	addcc	r5, r3, fp
   124f8:	bcc	11c68 <close_stdout@@Base+0x560>
   124fc:	ldr	r0, [sp, #32]
   12500:	ldr	r1, [sp, #52]	; 0x34
   12504:	add	r5, r0, fp
   12508:	ldr	r2, [sp, #28]
   1250c:	mov	r0, r5
   12510:	bl	10efc <memcmp@plt>
   12514:	cmp	r0, #0
   12518:	bne	12530 <close_stdout@@Base+0xe28>
   1251c:	ldr	r1, [sp, #36]	; 0x24
   12520:	cmp	r1, #0
   12524:	bne	12088 <close_stdout@@Base+0x980>
   12528:	mov	r6, #1
   1252c:	b	11c68 <close_stdout@@Base+0x560>
   12530:	mov	r6, #0
   12534:	b	11c68 <close_stdout@@Base+0x560>
   12538:	add	r7, sp, #108	; 0x6c
   1253c:	cmn	r8, #1
   12540:	mov	r3, #0
   12544:	str	r3, [sp, #108]	; 0x6c
   12548:	str	r3, [r7, #4]
   1254c:	beq	12738 <close_stdout@@Base+0x1030>
   12550:	mov	r1, #0
   12554:	ldr	r0, [sp, #32]
   12558:	mov	ip, #1
   1255c:	str	r9, [sp, #88]	; 0x58
   12560:	str	r6, [sp, #96]	; 0x60
   12564:	mov	r9, r1
   12568:	str	r5, [sp, #100]	; 0x64
   1256c:	mov	r6, ip
   12570:	mov	r5, r7
   12574:	add	r3, sp, #104	; 0x68
   12578:	sub	r0, r0, #1
   1257c:	str	r3, [sp, #80]	; 0x50
   12580:	str	r0, [sp, #84]	; 0x54
   12584:	str	r1, [sp, #60]	; 0x3c
   12588:	str	r4, [sp, #92]	; 0x5c
   1258c:	ldr	r2, [sp, #32]
   12590:	add	r7, r9, fp
   12594:	add	r0, sp, #104	; 0x68
   12598:	mov	r3, r5
   1259c:	add	r4, r2, r7
   125a0:	rsb	r2, r7, r8
   125a4:	mov	r1, r4
   125a8:	bl	10f80 <mbrtowc@plt>
   125ac:	subs	r2, r0, #0
   125b0:	beq	126bc <close_stdout@@Base+0xfb4>
   125b4:	cmn	r2, #1
   125b8:	beq	127e4 <close_stdout@@Base+0x10dc>
   125bc:	cmn	r2, #2
   125c0:	beq	12788 <close_stdout@@Base+0x1080>
   125c4:	ldr	r3, [sp, #36]	; 0x24
   125c8:	ldr	r0, [sp, #160]	; 0xa0
   125cc:	cmp	r0, #2
   125d0:	movne	r3, #0
   125d4:	andeq	r3, r3, #1
   125d8:	cmp	r3, #0
   125dc:	beq	12698 <close_stdout@@Base+0xf90>
   125e0:	cmp	r2, #1
   125e4:	beq	12698 <close_stdout@@Base+0xf90>
   125e8:	ldr	r1, [sp, #84]	; 0x54
   125ec:	add	r3, r1, r2
   125f0:	add	r7, r3, r7
   125f4:	ldrb	r3, [r4, #1]!
   125f8:	sub	r3, r3, #91	; 0x5b
   125fc:	cmp	r3, #33	; 0x21
   12600:	addls	pc, pc, r3, lsl #2
   12604:	b	12690 <close_stdout@@Base+0xf88>
   12608:	b	12088 <close_stdout@@Base+0x980>
   1260c:	b	12088 <close_stdout@@Base+0x980>
   12610:	b	12690 <close_stdout@@Base+0xf88>
   12614:	b	12088 <close_stdout@@Base+0x980>
   12618:	b	12690 <close_stdout@@Base+0xf88>
   1261c:	b	12088 <close_stdout@@Base+0x980>
   12620:	b	12690 <close_stdout@@Base+0xf88>
   12624:	b	12690 <close_stdout@@Base+0xf88>
   12628:	b	12690 <close_stdout@@Base+0xf88>
   1262c:	b	12690 <close_stdout@@Base+0xf88>
   12630:	b	12690 <close_stdout@@Base+0xf88>
   12634:	b	12690 <close_stdout@@Base+0xf88>
   12638:	b	12690 <close_stdout@@Base+0xf88>
   1263c:	b	12690 <close_stdout@@Base+0xf88>
   12640:	b	12690 <close_stdout@@Base+0xf88>
   12644:	b	12690 <close_stdout@@Base+0xf88>
   12648:	b	12690 <close_stdout@@Base+0xf88>
   1264c:	b	12690 <close_stdout@@Base+0xf88>
   12650:	b	12690 <close_stdout@@Base+0xf88>
   12654:	b	12690 <close_stdout@@Base+0xf88>
   12658:	b	12690 <close_stdout@@Base+0xf88>
   1265c:	b	12690 <close_stdout@@Base+0xf88>
   12660:	b	12690 <close_stdout@@Base+0xf88>
   12664:	b	12690 <close_stdout@@Base+0xf88>
   12668:	b	12690 <close_stdout@@Base+0xf88>
   1266c:	b	12690 <close_stdout@@Base+0xf88>
   12670:	b	12690 <close_stdout@@Base+0xf88>
   12674:	b	12690 <close_stdout@@Base+0xf88>
   12678:	b	12690 <close_stdout@@Base+0xf88>
   1267c:	b	12690 <close_stdout@@Base+0xf88>
   12680:	b	12690 <close_stdout@@Base+0xf88>
   12684:	b	12690 <close_stdout@@Base+0xf88>
   12688:	b	12690 <close_stdout@@Base+0xf88>
   1268c:	b	12088 <close_stdout@@Base+0x980>
   12690:	cmp	r4, r7
   12694:	bne	125f4 <close_stdout@@Base+0xeec>
   12698:	ldr	r0, [sp, #104]	; 0x68
   1269c:	add	r9, r9, r2
   126a0:	bl	10f38 <iswprint@plt>
   126a4:	cmp	r0, #0
   126a8:	mov	r0, r5
   126ac:	moveq	r6, #0
   126b0:	bl	10ef0 <mbsinit@plt>
   126b4:	cmp	r0, #0
   126b8:	beq	1258c <close_stdout@@Base+0xe84>
   126bc:	mov	ip, r6
   126c0:	eor	r2, ip, #1
   126c4:	str	r9, [sp, #60]	; 0x3c
   126c8:	ldr	r4, [sp, #92]	; 0x5c
   126cc:	uxtb	r2, r2
   126d0:	ldr	r9, [sp, #88]	; 0x58
   126d4:	ldr	r6, [sp, #96]	; 0x60
   126d8:	ldr	r5, [sp, #100]	; 0x64
   126dc:	ldr	r3, [sp, #60]	; 0x3c
   126e0:	cmp	r3, #1
   126e4:	bls	12268 <close_stdout@@Base+0xb60>
   126e8:	ldr	r0, [sp, #24]
   126ec:	and	r2, r2, r0
   126f0:	b	12274 <close_stdout@@Base+0xb6c>
   126f4:	ldr	r2, [sp, #164]	; 0xa4
   126f8:	tst	r2, #1
   126fc:	addne	fp, fp, #1
   12700:	bne	11c30 <close_stdout@@Base+0x528>
   12704:	b	11f40 <close_stdout@@Base+0x838>
   12708:	ldr	r0, [sp, #36]	; 0x24
   1270c:	cmp	r0, #0
   12710:	beq	11f40 <close_stdout@@Base+0x838>
   12714:	b	12088 <close_stdout@@Base+0x980>
   12718:	ldr	r2, [sp, #32]
   1271c:	ldrb	r3, [r2, #1]
   12720:	adds	r3, r3, #0
   12724:	movne	r3, #1
   12728:	b	1205c <close_stdout@@Base+0x954>
   1272c:	bl	110dc <abort@plt>
   12730:	ldr	r8, [sp, #60]	; 0x3c
   12734:	b	12088 <close_stdout@@Base+0x980>
   12738:	ldr	r0, [sp, #32]
   1273c:	bl	11004 <strlen@plt>
   12740:	mov	r8, r0
   12744:	b	12550 <close_stdout@@Base+0xe48>
   12748:	ldr	r2, [pc, #288]	; 12870 <close_stdout@@Base+0x1168>
   1274c:	mov	r1, #1
   12750:	mov	r9, r1
   12754:	str	r1, [sp, #24]
   12758:	add	r2, pc, r2
   1275c:	str	r1, [sp, #28]
   12760:	str	r2, [sp, #52]	; 0x34
   12764:	b	11c0c <close_stdout@@Base+0x504>
   12768:	ldr	r2, [pc, #260]	; 12874 <close_stdout@@Base+0x116c>
   1276c:	mov	r3, #1
   12770:	mov	r9, r3
   12774:	str	r3, [sp, #28]
   12778:	add	r2, pc, r2
   1277c:	str	sl, [sp, #24]
   12780:	str	r2, [sp, #52]	; 0x34
   12784:	b	11c0c <close_stdout@@Base+0x504>
   12788:	cmp	r8, r7
   1278c:	str	r9, [sp, #60]	; 0x3c
   12790:	mov	ip, r4
   12794:	ldr	r6, [sp, #96]	; 0x60
   12798:	ldr	r9, [sp, #88]	; 0x58
   1279c:	ldr	r4, [sp, #92]	; 0x5c
   127a0:	ldr	r5, [sp, #100]	; 0x64
   127a4:	bls	127dc <close_stdout@@Base+0x10d4>
   127a8:	ldrb	r3, [ip]
   127ac:	cmp	r3, #0
   127b0:	beq	127dc <close_stdout@@Base+0x10d4>
   127b4:	ldr	r3, [sp, #60]	; 0x3c
   127b8:	b	127c8 <close_stdout@@Base+0x10c0>
   127bc:	ldrb	r2, [r5, r3]
   127c0:	cmp	r2, #0
   127c4:	beq	127d8 <close_stdout@@Base+0x10d0>
   127c8:	add	r3, r3, #1
   127cc:	add	r2, fp, r3
   127d0:	cmp	r8, r2
   127d4:	bhi	127bc <close_stdout@@Base+0x10b4>
   127d8:	str	r3, [sp, #60]	; 0x3c
   127dc:	mov	r2, #1
   127e0:	b	126dc <close_stdout@@Base+0xfd4>
   127e4:	str	r9, [sp, #60]	; 0x3c
   127e8:	mov	r2, #1
   127ec:	ldr	r4, [sp, #92]	; 0x5c
   127f0:	ldr	r6, [sp, #96]	; 0x60
   127f4:	ldr	r9, [sp, #88]	; 0x58
   127f8:	ldr	r5, [sp, #100]	; 0x64
   127fc:	b	126dc <close_stdout@@Base+0xfd4>
   12800:	ldr	r9, [sp, #36]	; 0x24
   12804:	b	12428 <close_stdout@@Base+0xd20>
   12808:	bl	10f14 <__stack_chk_fail@plt>
   1280c:	ldr	r1, [pc, #100]	; 12878 <close_stdout@@Base+0x1170>
   12810:	mov	r3, #0
   12814:	mov	r0, #1
   12818:	str	r3, [sp, #24]
   1281c:	add	r1, pc, r1
   12820:	str	r0, [sp, #28]
   12824:	mov	r9, r3
   12828:	str	r1, [sp, #52]	; 0x34
   1282c:	b	11c0c <close_stdout@@Base+0x504>
   12830:	ldr	r0, [pc, #68]	; 1287c <close_stdout@@Base+0x1174>
   12834:	mov	r3, #1
   12838:	mov	r9, #0
   1283c:	str	r3, [sp, #24]
   12840:	add	r0, pc, r0
   12844:	str	r3, [sp, #28]
   12848:	str	r0, [sp, #52]	; 0x34
   1284c:	b	11c0c <close_stdout@@Base+0x504>
   12850:	andeq	r3, r1, r4, lsl #9
   12854:	andeq	r0, r0, r0, ror #1
   12858:	strdeq	r2, [r0], -r4
   1285c:	ldrdeq	r2, [r0], -r0
   12860:	andeq	r2, r0, ip, lsl #5
   12864:	andeq	r2, r0, r8, ror #4
   12868:	andeq	r2, r0, ip, ror #3
   1286c:	muleq	r0, r4, r1
   12870:	andeq	r1, r0, ip, ror #29
   12874:	andeq	r1, r0, r8, asr #29
   12878:	andeq	r1, r0, r4, lsr #28
   1287c:	andeq	r1, r0, r4, lsl #28
   12880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12884:	sub	sp, sp, #44	; 0x2c
   12888:	mov	r6, r0
   1288c:	mov	r9, r1
   12890:	mov	sl, r2
   12894:	mov	r4, r3
   12898:	bl	11028 <__errno_location@plt>
   1289c:	ldr	fp, [pc, #412]	; 12a40 <close_stdout@@Base+0x1338>
   128a0:	cmp	r6, #0
   128a4:	add	fp, pc, fp
   128a8:	ldr	r5, [fp]
   128ac:	ldr	r1, [r0]
   128b0:	mov	r8, r0
   128b4:	str	r1, [sp, #36]	; 0x24
   128b8:	blt	12a38 <close_stdout@@Base+0x1330>
   128bc:	ldr	r3, [pc, #384]	; 12a44 <close_stdout@@Base+0x133c>
   128c0:	add	r3, pc, r3
   128c4:	ldr	r3, [r3]
   128c8:	cmp	r6, r3
   128cc:	bcc	12920 <close_stdout@@Base+0x1218>
   128d0:	add	r7, r6, #1
   128d4:	cmn	r7, #-536870911	; 0xe0000001
   128d8:	bhi	12a3c <close_stdout@@Base+0x1334>
   128dc:	add	r3, fp, #4
   128e0:	cmp	r5, r3
   128e4:	beq	12a10 <close_stdout@@Base+0x1308>
   128e8:	mov	r0, r5
   128ec:	lsl	r1, r7, #3
   128f0:	bl	13718 <close_stdout@@Base+0x2010>
   128f4:	mov	r5, r0
   128f8:	str	r0, [fp]
   128fc:	ldr	fp, [pc, #324]	; 12a48 <close_stdout@@Base+0x1340>
   12900:	mov	r1, #0
   12904:	add	fp, pc, fp
   12908:	ldr	r0, [fp]
   1290c:	rsb	r2, r0, r7
   12910:	add	r0, r5, r0, lsl #3
   12914:	lsl	r2, r2, #3
   12918:	bl	11040 <memset@plt>
   1291c:	str	r7, [fp]
   12920:	add	r2, r4, #8
   12924:	str	r2, [sp, #32]
   12928:	ldr	r1, [r4]
   1292c:	add	fp, r5, r6, lsl #3
   12930:	ldr	lr, [sp, #32]
   12934:	mov	r2, r9
   12938:	ldr	r3, [r4, #4]
   1293c:	ldr	ip, [r5, r6, lsl #3]
   12940:	ldr	r7, [fp, #4]
   12944:	orr	r3, r3, #1
   12948:	str	r1, [sp]
   1294c:	str	r3, [sp, #4]
   12950:	mov	r1, ip
   12954:	str	lr, [sp, #8]
   12958:	mov	r0, r7
   1295c:	ldr	lr, [r4, #40]	; 0x28
   12960:	str	r3, [sp, #28]
   12964:	mov	r3, sl
   12968:	str	lr, [sp, #12]
   1296c:	ldr	lr, [r4, #44]	; 0x2c
   12970:	str	ip, [sp, #24]
   12974:	str	lr, [sp, #16]
   12978:	bl	11b58 <close_stdout@@Base+0x450>
   1297c:	ldr	ip, [sp, #24]
   12980:	cmp	ip, r0
   12984:	bhi	129fc <close_stdout@@Base+0x12f4>
   12988:	ldr	r3, [pc, #188]	; 12a4c <close_stdout@@Base+0x1344>
   1298c:	add	r1, r0, #1
   12990:	str	r1, [r5, r6, lsl #3]
   12994:	add	r3, pc, r3
   12998:	cmp	r7, r3
   1299c:	beq	129b0 <close_stdout@@Base+0x12a8>
   129a0:	mov	r0, r7
   129a4:	str	r1, [sp, #24]
   129a8:	bl	10ecc <free@plt>
   129ac:	ldr	r1, [sp, #24]
   129b0:	mov	r0, r1
   129b4:	str	r1, [sp, #24]
   129b8:	bl	136c0 <close_stdout@@Base+0x1fb8>
   129bc:	ldr	r3, [sp, #28]
   129c0:	ldr	lr, [sp, #32]
   129c4:	mov	r2, r9
   129c8:	str	r0, [fp, #4]
   129cc:	mov	r7, r0
   129d0:	ldr	ip, [r4]
   129d4:	str	r3, [sp, #4]
   129d8:	mov	r3, sl
   129dc:	str	lr, [sp, #8]
   129e0:	str	ip, [sp]
   129e4:	ldr	ip, [r4, #40]	; 0x28
   129e8:	ldr	r1, [sp, #24]
   129ec:	str	ip, [sp, #12]
   129f0:	ldr	ip, [r4, #44]	; 0x2c
   129f4:	str	ip, [sp, #16]
   129f8:	bl	11b58 <close_stdout@@Base+0x450>
   129fc:	ldr	r1, [sp, #36]	; 0x24
   12a00:	mov	r0, r7
   12a04:	str	r1, [r8]
   12a08:	add	sp, sp, #44	; 0x2c
   12a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a10:	lsl	r1, r7, #3
   12a14:	mov	r0, #0
   12a18:	str	r3, [sp, #24]
   12a1c:	bl	13718 <close_stdout@@Base+0x2010>
   12a20:	ldr	r3, [sp, #24]
   12a24:	mov	r5, r0
   12a28:	ldm	r3, {r0, r1}
   12a2c:	str	r5, [fp]
   12a30:	stm	r5, {r0, r1}
   12a34:	b	128fc <close_stdout@@Base+0x11f4>
   12a38:	bl	110dc <abort@plt>
   12a3c:	bl	138d4 <close_stdout@@Base+0x21cc>
   12a40:	andeq	r2, r1, ip, lsr #17
   12a44:	andeq	r2, r1, ip, asr r8
   12a48:	andeq	r2, r1, r8, lsl r8
   12a4c:	ldrdeq	r2, [r1], -r8
   12a50:	push	{r4, r5, r6, lr}
   12a54:	mov	r5, r0
   12a58:	bl	11028 <__errno_location@plt>
   12a5c:	cmp	r5, #0
   12a60:	mov	r1, #48	; 0x30
   12a64:	mov	r4, r0
   12a68:	ldr	r0, [pc, #24]	; 12a88 <close_stdout@@Base+0x1380>
   12a6c:	ldr	r6, [r4]
   12a70:	add	r0, pc, r0
   12a74:	add	r0, r0, #256	; 0x100
   12a78:	movne	r0, r5
   12a7c:	bl	13894 <close_stdout@@Base+0x218c>
   12a80:	str	r6, [r4]
   12a84:	pop	{r4, r5, r6, pc}
   12a88:	strdeq	r2, [r1], -ip
   12a8c:	cmp	r0, #0
   12a90:	beq	12a9c <close_stdout@@Base+0x1394>
   12a94:	ldr	r0, [r0]
   12a98:	bx	lr
   12a9c:	ldr	r0, [pc, #12]	; 12ab0 <close_stdout@@Base+0x13a8>
   12aa0:	add	r0, pc, r0
   12aa4:	add	r0, r0, #256	; 0x100
   12aa8:	ldr	r0, [r0]
   12aac:	bx	lr
   12ab0:	andeq	r2, r1, ip, asr #13
   12ab4:	cmp	r0, #0
   12ab8:	beq	12ac4 <close_stdout@@Base+0x13bc>
   12abc:	str	r1, [r0]
   12ac0:	bx	lr
   12ac4:	ldr	r0, [pc, #12]	; 12ad8 <close_stdout@@Base+0x13d0>
   12ac8:	add	r0, pc, r0
   12acc:	add	r0, r0, #256	; 0x100
   12ad0:	str	r1, [r0]
   12ad4:	bx	lr
   12ad8:	andeq	r2, r1, r4, lsr #13
   12adc:	cmp	r0, #0
   12ae0:	movne	r3, r0
   12ae4:	beq	12b14 <close_stdout@@Base+0x140c>
   12ae8:	lsr	ip, r1, #5
   12aec:	and	r1, r1, #31
   12af0:	add	r3, r3, ip, lsl #2
   12af4:	ldr	ip, [r3, #8]
   12af8:	lsr	r0, ip, r1
   12afc:	eor	r2, r0, r2
   12b00:	and	r0, r0, #1
   12b04:	and	r2, r2, #1
   12b08:	eor	ip, ip, r2, lsl r1
   12b0c:	str	ip, [r3, #8]
   12b10:	bx	lr
   12b14:	ldr	r3, [pc, #8]	; 12b24 <close_stdout@@Base+0x141c>
   12b18:	add	r3, pc, r3
   12b1c:	add	r3, r3, #256	; 0x100
   12b20:	b	12ae8 <close_stdout@@Base+0x13e0>
   12b24:	andeq	r2, r1, r4, asr r6
   12b28:	subs	r3, r0, #0
   12b2c:	beq	12b3c <close_stdout@@Base+0x1434>
   12b30:	ldr	r0, [r3, #4]
   12b34:	str	r1, [r3, #4]
   12b38:	bx	lr
   12b3c:	ldr	r3, [pc, #8]	; 12b4c <close_stdout@@Base+0x1444>
   12b40:	add	r3, pc, r3
   12b44:	add	r3, r3, #256	; 0x100
   12b48:	b	12b30 <close_stdout@@Base+0x1428>
   12b4c:	andeq	r2, r1, ip, lsr #12
   12b50:	cmp	r0, #0
   12b54:	push	{r3, lr}
   12b58:	beq	12b7c <close_stdout@@Base+0x1474>
   12b5c:	cmp	r2, #0
   12b60:	cmpne	r1, #0
   12b64:	mov	r3, #8
   12b68:	strne	r1, [r0, #40]	; 0x28
   12b6c:	str	r3, [r0]
   12b70:	strne	r2, [r0, #44]	; 0x2c
   12b74:	popne	{r3, pc}
   12b78:	bl	110dc <abort@plt>
   12b7c:	ldr	r0, [pc, #8]	; 12b8c <close_stdout@@Base+0x1484>
   12b80:	add	r0, pc, r0
   12b84:	add	r0, r0, #256	; 0x100
   12b88:	b	12b5c <close_stdout@@Base+0x1454>
   12b8c:	andeq	r2, r1, ip, ror #11
   12b90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b94:	sub	sp, sp, #24
   12b98:	mov	r7, r0
   12b9c:	mov	sl, r1
   12ba0:	ldr	r4, [sp, #56]	; 0x38
   12ba4:	mov	r9, r2
   12ba8:	mov	r8, r3
   12bac:	cmp	r4, #0
   12bb0:	beq	12c04 <close_stdout@@Base+0x14fc>
   12bb4:	bl	11028 <__errno_location@plt>
   12bb8:	ldr	r3, [r4]
   12bbc:	add	lr, r4, #8
   12bc0:	mov	r1, sl
   12bc4:	mov	r2, r9
   12bc8:	ldr	r6, [r0]
   12bcc:	mov	r5, r0
   12bd0:	str	r3, [sp]
   12bd4:	mov	r0, r7
   12bd8:	ldr	ip, [r4, #4]
   12bdc:	mov	r3, r8
   12be0:	stmib	sp, {ip, lr}
   12be4:	ldr	ip, [r4, #40]	; 0x28
   12be8:	str	ip, [sp, #12]
   12bec:	ldr	ip, [r4, #44]	; 0x2c
   12bf0:	str	ip, [sp, #16]
   12bf4:	bl	11b58 <close_stdout@@Base+0x450>
   12bf8:	str	r6, [r5]
   12bfc:	add	sp, sp, #24
   12c00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c04:	ldr	r4, [pc, #8]	; 12c14 <close_stdout@@Base+0x150c>
   12c08:	add	r4, pc, r4
   12c0c:	add	r4, r4, #256	; 0x100
   12c10:	b	12bb4 <close_stdout@@Base+0x14ac>
   12c14:	andeq	r2, r1, r4, ror #10
   12c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c1c:	subs	r4, r3, #0
   12c20:	sub	sp, sp, #36	; 0x24
   12c24:	mov	r7, r0
   12c28:	mov	r6, r1
   12c2c:	mov	r5, r2
   12c30:	beq	12cec <close_stdout@@Base+0x15e4>
   12c34:	bl	11028 <__errno_location@plt>
   12c38:	ldr	r3, [r4]
   12c3c:	ldr	sl, [r4, #4]
   12c40:	add	r9, r4, #8
   12c44:	mov	r8, r0
   12c48:	mov	r0, #0
   12c4c:	ldr	r2, [r8]
   12c50:	cmp	r5, r0
   12c54:	orreq	sl, sl, #1
   12c58:	str	r9, [sp, #8]
   12c5c:	mov	r1, r0
   12c60:	stm	sp, {r3, sl}
   12c64:	mov	r3, r6
   12c68:	ldr	ip, [r4, #40]	; 0x28
   12c6c:	str	r2, [sp, #28]
   12c70:	mov	r2, r7
   12c74:	str	ip, [sp, #12]
   12c78:	ldr	ip, [r4, #44]	; 0x2c
   12c7c:	str	ip, [sp, #16]
   12c80:	bl	11b58 <close_stdout@@Base+0x450>
   12c84:	add	r1, r0, #1
   12c88:	mov	fp, r0
   12c8c:	str	r1, [sp, #24]
   12c90:	mov	r0, r1
   12c94:	bl	136c0 <close_stdout@@Base+0x1fb8>
   12c98:	ldr	lr, [r4]
   12c9c:	str	sl, [sp, #4]
   12ca0:	mov	r3, r6
   12ca4:	str	r9, [sp, #8]
   12ca8:	mov	r2, r7
   12cac:	str	lr, [sp]
   12cb0:	ldr	lr, [r4, #40]	; 0x28
   12cb4:	ldr	r1, [sp, #24]
   12cb8:	str	lr, [sp, #12]
   12cbc:	ldr	lr, [r4, #44]	; 0x2c
   12cc0:	str	lr, [sp, #16]
   12cc4:	str	r0, [sp, #24]
   12cc8:	bl	11b58 <close_stdout@@Base+0x450>
   12ccc:	ldr	r3, [sp, #28]
   12cd0:	cmp	r5, #0
   12cd4:	str	r3, [r8]
   12cd8:	ldr	ip, [sp, #24]
   12cdc:	strne	fp, [r5]
   12ce0:	mov	r0, ip
   12ce4:	add	sp, sp, #36	; 0x24
   12ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cec:	ldr	r4, [pc, #8]	; 12cfc <close_stdout@@Base+0x15f4>
   12cf0:	add	r4, pc, r4
   12cf4:	add	r4, r4, #256	; 0x100
   12cf8:	b	12c34 <close_stdout@@Base+0x152c>
   12cfc:	andeq	r2, r1, ip, ror r4
   12d00:	mov	r3, r2
   12d04:	mov	r2, #0
   12d08:	b	12c18 <close_stdout@@Base+0x1510>
   12d0c:	ldr	r2, [pc, #152]	; 12dac <close_stdout@@Base+0x16a4>
   12d10:	push	{r3, r4, r5, r6, r7, lr}
   12d14:	add	r2, pc, r2
   12d18:	ldr	r3, [pc, #144]	; 12db0 <close_stdout@@Base+0x16a8>
   12d1c:	ldr	r6, [r2]
   12d20:	add	r3, pc, r3
   12d24:	cmp	r6, #1
   12d28:	ldr	r7, [r3]
   12d2c:	movhi	r4, #1
   12d30:	movhi	r5, r7
   12d34:	bls	12d50 <close_stdout@@Base+0x1648>
   12d38:	ldr	r0, [r5, #12]
   12d3c:	add	r4, r4, #1
   12d40:	bl	10ecc <free@plt>
   12d44:	cmp	r4, r6
   12d48:	add	r5, r5, #8
   12d4c:	bne	12d38 <close_stdout@@Base+0x1630>
   12d50:	ldr	r4, [pc, #92]	; 12db4 <close_stdout@@Base+0x16ac>
   12d54:	ldr	r0, [r7, #4]
   12d58:	add	r4, pc, r4
   12d5c:	cmp	r0, r4
   12d60:	beq	12d78 <close_stdout@@Base+0x1670>
   12d64:	bl	10ecc <free@plt>
   12d68:	ldr	r3, [pc, #72]	; 12db8 <close_stdout@@Base+0x16b0>
   12d6c:	mov	r2, #256	; 0x100
   12d70:	add	r3, pc, r3
   12d74:	stmib	r3, {r2, r4}
   12d78:	ldr	r4, [pc, #60]	; 12dbc <close_stdout@@Base+0x16b4>
   12d7c:	add	r4, pc, r4
   12d80:	add	r5, r4, #4
   12d84:	cmp	r7, r5
   12d88:	beq	12d98 <close_stdout@@Base+0x1690>
   12d8c:	mov	r0, r7
   12d90:	bl	10ecc <free@plt>
   12d94:	str	r5, [r4]
   12d98:	ldr	r3, [pc, #32]	; 12dc0 <close_stdout@@Base+0x16b8>
   12d9c:	mov	r2, #1
   12da0:	add	r3, pc, r3
   12da4:	str	r2, [r3]
   12da8:	pop	{r3, r4, r5, r6, r7, pc}
   12dac:	andeq	r2, r1, r8, lsl #8
   12db0:	andeq	r2, r1, r0, lsr r4
   12db4:	andeq	r2, r1, r4, lsl r4
   12db8:	andeq	r2, r1, r0, ror #7
   12dbc:	ldrdeq	r2, [r1], -r4
   12dc0:	andeq	r2, r1, ip, ror r3
   12dc4:	ldr	r3, [pc, #12]	; 12dd8 <close_stdout@@Base+0x16d0>
   12dc8:	mvn	r2, #0
   12dcc:	add	r3, pc, r3
   12dd0:	add	r3, r3, #256	; 0x100
   12dd4:	b	12880 <close_stdout@@Base+0x1178>
   12dd8:	andeq	r2, r1, r0, lsr #7
   12ddc:	ldr	r3, [pc, #8]	; 12dec <close_stdout@@Base+0x16e4>
   12de0:	add	r3, pc, r3
   12de4:	add	r3, r3, #256	; 0x100
   12de8:	b	12880 <close_stdout@@Base+0x1178>
   12dec:	andeq	r2, r1, ip, lsl #7
   12df0:	mov	r1, r0
   12df4:	mov	r0, #0
   12df8:	b	12dc4 <close_stdout@@Base+0x16bc>
   12dfc:	mov	r2, r1
   12e00:	mov	r1, r0
   12e04:	mov	r0, #0
   12e08:	b	12ddc <close_stdout@@Base+0x16d4>
   12e0c:	ldr	r3, [pc, #92]	; 12e70 <close_stdout@@Base+0x1768>
   12e10:	ldr	ip, [pc, #92]	; 12e74 <close_stdout@@Base+0x176c>
   12e14:	add	r3, pc, r3
   12e18:	push	{r4, r5, r6, r7, lr}
   12e1c:	sub	sp, sp, #60	; 0x3c
   12e20:	ldr	r4, [r3, ip]
   12e24:	add	r5, sp, #4
   12e28:	mov	r7, r2
   12e2c:	mov	r6, r0
   12e30:	mov	r0, r5
   12e34:	ldr	r3, [r4]
   12e38:	str	r3, [sp, #52]	; 0x34
   12e3c:	bl	119a0 <close_stdout@@Base+0x298>
   12e40:	mov	r3, r5
   12e44:	mvn	r2, #0
   12e48:	mov	r0, r6
   12e4c:	mov	r1, r7
   12e50:	bl	12880 <close_stdout@@Base+0x1178>
   12e54:	ldr	r2, [sp, #52]	; 0x34
   12e58:	ldr	r3, [r4]
   12e5c:	cmp	r2, r3
   12e60:	bne	12e6c <close_stdout@@Base+0x1764>
   12e64:	add	sp, sp, #60	; 0x3c
   12e68:	pop	{r4, r5, r6, r7, pc}
   12e6c:	bl	10f14 <__stack_chk_fail@plt>
   12e70:	andeq	r2, r1, r4, ror #3
   12e74:	andeq	r0, r0, r0, ror #1
   12e78:	ldr	ip, [pc, #96]	; 12ee0 <close_stdout@@Base+0x17d8>
   12e7c:	push	{r4, r5, r6, r7, r8, lr}
   12e80:	add	ip, pc, ip
   12e84:	ldr	lr, [pc, #88]	; 12ee4 <close_stdout@@Base+0x17dc>
   12e88:	sub	sp, sp, #56	; 0x38
   12e8c:	mov	r8, r3
   12e90:	add	r5, sp, #4
   12e94:	mov	r7, r2
   12e98:	mov	r6, r0
   12e9c:	ldr	r4, [ip, lr]
   12ea0:	mov	r0, r5
   12ea4:	ldr	r3, [r4]
   12ea8:	str	r3, [sp, #52]	; 0x34
   12eac:	bl	119a0 <close_stdout@@Base+0x298>
   12eb0:	mov	r2, r8
   12eb4:	mov	r3, r5
   12eb8:	mov	r0, r6
   12ebc:	mov	r1, r7
   12ec0:	bl	12880 <close_stdout@@Base+0x1178>
   12ec4:	ldr	r2, [sp, #52]	; 0x34
   12ec8:	ldr	r3, [r4]
   12ecc:	cmp	r2, r3
   12ed0:	bne	12edc <close_stdout@@Base+0x17d4>
   12ed4:	add	sp, sp, #56	; 0x38
   12ed8:	pop	{r4, r5, r6, r7, r8, pc}
   12edc:	bl	10f14 <__stack_chk_fail@plt>
   12ee0:	andeq	r2, r1, r8, ror r1
   12ee4:	andeq	r0, r0, r0, ror #1
   12ee8:	mov	r2, r1
   12eec:	mov	r1, r0
   12ef0:	mov	r0, #0
   12ef4:	b	12e0c <close_stdout@@Base+0x1704>
   12ef8:	mov	ip, r1
   12efc:	mov	r3, r2
   12f00:	mov	r1, r0
   12f04:	mov	r2, ip
   12f08:	mov	r0, #0
   12f0c:	b	12e78 <close_stdout@@Base+0x1770>
   12f10:	push	{r4, r5, r6, r7, r8, lr}
   12f14:	mov	r5, r2
   12f18:	ldr	lr, [pc, #136]	; 12fa8 <close_stdout@@Base+0x18a0>
   12f1c:	mov	r7, r0
   12f20:	mov	r6, r1
   12f24:	ldr	r4, [pc, #128]	; 12fac <close_stdout@@Base+0x18a4>
   12f28:	add	lr, pc, lr
   12f2c:	sub	sp, sp, #56	; 0x38
   12f30:	add	lr, lr, #256	; 0x100
   12f34:	ldr	r8, [pc, #116]	; 12fb0 <close_stdout@@Base+0x18a8>
   12f38:	add	r4, pc, r4
   12f3c:	add	ip, sp, #4
   12f40:	ldm	lr!, {r0, r1, r2, r3}
   12f44:	ldr	r4, [r4, r8]
   12f48:	stmia	ip!, {r0, r1, r2, r3}
   12f4c:	ldm	lr!, {r0, r1, r2, r3}
   12f50:	ldr	r8, [r4]
   12f54:	stmia	ip!, {r0, r1, r2, r3}
   12f58:	ldm	lr, {r0, r1, r2, r3}
   12f5c:	str	r8, [sp, #52]	; 0x34
   12f60:	stm	ip, {r0, r1, r2, r3}
   12f64:	mov	r1, r5
   12f68:	add	r5, sp, #4
   12f6c:	mov	r2, #1
   12f70:	mov	r0, r5
   12f74:	bl	12adc <close_stdout@@Base+0x13d4>
   12f78:	mov	r2, r6
   12f7c:	mov	r3, r5
   12f80:	mov	r1, r7
   12f84:	mov	r0, #0
   12f88:	bl	12880 <close_stdout@@Base+0x1178>
   12f8c:	ldr	r2, [sp, #52]	; 0x34
   12f90:	ldr	r3, [r4]
   12f94:	cmp	r2, r3
   12f98:	bne	12fa4 <close_stdout@@Base+0x189c>
   12f9c:	add	sp, sp, #56	; 0x38
   12fa0:	pop	{r4, r5, r6, r7, r8, pc}
   12fa4:	bl	10f14 <__stack_chk_fail@plt>
   12fa8:	andeq	r2, r1, r4, asr #4
   12fac:	andeq	r2, r1, r0, asr #1
   12fb0:	andeq	r0, r0, r0, ror #1
   12fb4:	mov	r2, r1
   12fb8:	mvn	r1, #0
   12fbc:	b	12f10 <close_stdout@@Base+0x1808>
   12fc0:	mov	r1, #58	; 0x3a
   12fc4:	b	12fb4 <close_stdout@@Base+0x18ac>
   12fc8:	mov	r2, #58	; 0x3a
   12fcc:	b	12f10 <close_stdout@@Base+0x1808>
   12fd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fd4:	mov	r5, r2
   12fd8:	ldr	lr, [pc, #144]	; 13070 <close_stdout@@Base+0x1968>
   12fdc:	mov	r8, r0
   12fe0:	mov	r9, r1
   12fe4:	mov	r7, r3
   12fe8:	add	lr, pc, lr
   12fec:	ldr	r4, [pc, #128]	; 13074 <close_stdout@@Base+0x196c>
   12ff0:	add	lr, lr, #256	; 0x100
   12ff4:	sub	sp, sp, #56	; 0x38
   12ff8:	ldr	sl, [pc, #120]	; 13078 <close_stdout@@Base+0x1970>
   12ffc:	add	r4, pc, r4
   13000:	ldm	lr!, {r0, r1, r2, r3}
   13004:	add	ip, sp, #4
   13008:	ldr	r4, [r4, sl]
   1300c:	ldr	r6, [sp, #88]	; 0x58
   13010:	stmia	ip!, {r0, r1, r2, r3}
   13014:	ldm	lr!, {r0, r1, r2, r3}
   13018:	ldr	sl, [r4]
   1301c:	stmia	ip!, {r0, r1, r2, r3}
   13020:	ldm	lr, {r0, r1, r2, r3}
   13024:	str	sl, [sp, #52]	; 0x34
   13028:	stm	ip, {r0, r1, r2, r3}
   1302c:	mov	r2, r5
   13030:	add	r5, sp, #4
   13034:	mov	r1, r9
   13038:	mov	r0, r5
   1303c:	bl	12b50 <close_stdout@@Base+0x1448>
   13040:	mov	r2, r6
   13044:	mov	r3, r5
   13048:	mov	r0, r8
   1304c:	mov	r1, r7
   13050:	bl	12880 <close_stdout@@Base+0x1178>
   13054:	ldr	r2, [sp, #52]	; 0x34
   13058:	ldr	r3, [r4]
   1305c:	cmp	r2, r3
   13060:	bne	1306c <close_stdout@@Base+0x1964>
   13064:	add	sp, sp, #56	; 0x38
   13068:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1306c:	bl	10f14 <__stack_chk_fail@plt>
   13070:	andeq	r2, r1, r4, lsl #3
   13074:	strdeq	r1, [r1], -ip
   13078:	andeq	r0, r0, r0, ror #1
   1307c:	push	{lr}		; (str lr, [sp, #-4]!)
   13080:	sub	sp, sp, #12
   13084:	mvn	ip, #0
   13088:	str	ip, [sp]
   1308c:	bl	12fd0 <close_stdout@@Base+0x18c8>
   13090:	add	sp, sp, #12
   13094:	pop	{pc}		; (ldr pc, [sp], #4)
   13098:	mov	ip, r1
   1309c:	mov	r3, r2
   130a0:	mov	r1, r0
   130a4:	mov	r2, ip
   130a8:	mov	r0, #0
   130ac:	b	1307c <close_stdout@@Base+0x1974>
   130b0:	push	{lr}		; (str lr, [sp, #-4]!)
   130b4:	sub	sp, sp, #12
   130b8:	mov	lr, r1
   130bc:	mov	ip, r2
   130c0:	mov	r1, r0
   130c4:	str	r3, [sp]
   130c8:	mov	r2, lr
   130cc:	mov	r3, ip
   130d0:	mov	r0, #0
   130d4:	bl	12fd0 <close_stdout@@Base+0x18c8>
   130d8:	add	sp, sp, #12
   130dc:	pop	{pc}		; (ldr pc, [sp], #4)
   130e0:	ldr	r3, [pc, #12]	; 130f4 <close_stdout@@Base+0x19ec>
   130e4:	ldr	ip, [pc, #12]	; 130f8 <close_stdout@@Base+0x19f0>
   130e8:	add	r3, pc, r3
   130ec:	ldr	r3, [r3, ip]
   130f0:	b	12880 <close_stdout@@Base+0x1178>
   130f4:	andeq	r1, r1, r0, lsl pc
   130f8:	ldrdeq	r0, [r0], -ip
   130fc:	mov	r2, r1
   13100:	mov	r1, r0
   13104:	mov	r0, #0
   13108:	b	130e0 <close_stdout@@Base+0x19d8>
   1310c:	mvn	r2, #0
   13110:	b	130e0 <close_stdout@@Base+0x19d8>
   13114:	mov	r1, r0
   13118:	mov	r0, #0
   1311c:	b	1310c <close_stdout@@Base+0x1a04>
   13120:	push	{r4, r5, r6, r7, lr}
   13124:	cmp	r1, #0
   13128:	sub	sp, sp, #36	; 0x24
   1312c:	ldr	r7, [pc, #896]	; 134b4 <close_stdout@@Base+0x1dac>
   13130:	mov	ip, r3
   13134:	mov	r5, r0
   13138:	add	r7, pc, r7
   1313c:	ldr	r4, [sp, #56]	; 0x38
   13140:	ldr	r6, [sp, #60]	; 0x3c
   13144:	beq	13488 <close_stdout@@Base+0x1d80>
   13148:	str	r2, [sp]
   1314c:	mov	r3, r1
   13150:	ldr	r2, [pc, #864]	; 134b8 <close_stdout@@Base+0x1db0>
   13154:	mov	r1, #1
   13158:	str	ip, [sp, #4]
   1315c:	add	r2, pc, r2
   13160:	bl	11070 <__fprintf_chk@plt>
   13164:	ldr	r1, [pc, #848]	; 134bc <close_stdout@@Base+0x1db4>
   13168:	mov	r2, #5
   1316c:	mov	r0, #0
   13170:	add	r1, pc, r1
   13174:	bl	10f08 <dcgettext@plt>
   13178:	ldr	r2, [pc, #832]	; 134c0 <close_stdout@@Base+0x1db8>
   1317c:	movw	ip, #2013	; 0x7dd
   13180:	mov	r1, #1
   13184:	ldr	r2, [r7, r2]
   13188:	str	ip, [sp]
   1318c:	mov	r3, r0
   13190:	mov	r0, r5
   13194:	bl	11070 <__fprintf_chk@plt>
   13198:	ldr	r1, [pc, #804]	; 134c4 <close_stdout@@Base+0x1dbc>
   1319c:	mov	r0, #0
   131a0:	mov	r2, #5
   131a4:	add	r1, pc, r1
   131a8:	bl	10f08 <dcgettext@plt>
   131ac:	mov	r1, r5
   131b0:	bl	10e9c <fputs_unlocked@plt>
   131b4:	cmp	r6, #9
   131b8:	addls	pc, pc, r6, lsl #2
   131bc:	b	134a4 <close_stdout@@Base+0x1d9c>
   131c0:	b	13254 <close_stdout@@Base+0x1b4c>
   131c4:	b	13258 <close_stdout@@Base+0x1b50>
   131c8:	b	13288 <close_stdout@@Base+0x1b80>
   131cc:	b	132bc <close_stdout@@Base+0x1bb4>
   131d0:	b	132f8 <close_stdout@@Base+0x1bf0>
   131d4:	b	13338 <close_stdout@@Base+0x1c30>
   131d8:	b	13380 <close_stdout@@Base+0x1c78>
   131dc:	b	133d0 <close_stdout@@Base+0x1cc8>
   131e0:	b	13428 <close_stdout@@Base+0x1d20>
   131e4:	b	131e8 <close_stdout@@Base+0x1ae0>
   131e8:	ldr	r1, [pc, #728]	; 134c8 <close_stdout@@Base+0x1dc0>
   131ec:	mov	r0, #0
   131f0:	add	r1, pc, r1
   131f4:	mov	r2, #5
   131f8:	bl	10f08 <dcgettext@plt>
   131fc:	ldm	r4, {r3, ip}
   13200:	mov	r1, #1
   13204:	str	ip, [sp]
   13208:	ldr	ip, [r4, #8]
   1320c:	str	ip, [sp, #4]
   13210:	ldr	ip, [r4, #12]
   13214:	str	ip, [sp, #8]
   13218:	ldr	ip, [r4, #16]
   1321c:	str	ip, [sp, #12]
   13220:	ldr	ip, [r4, #20]
   13224:	str	ip, [sp, #16]
   13228:	ldr	ip, [r4, #24]
   1322c:	str	ip, [sp, #20]
   13230:	ldr	ip, [r4, #28]
   13234:	str	ip, [sp, #24]
   13238:	ldr	ip, [r4, #32]
   1323c:	str	ip, [sp, #28]
   13240:	mov	r2, r0
   13244:	mov	r0, r5
   13248:	bl	11070 <__fprintf_chk@plt>
   1324c:	add	sp, sp, #36	; 0x24
   13250:	pop	{r4, r5, r6, r7, pc}
   13254:	bl	110dc <abort@plt>
   13258:	ldr	r1, [pc, #620]	; 134cc <close_stdout@@Base+0x1dc4>
   1325c:	mov	r2, #5
   13260:	mov	r0, #0
   13264:	add	r1, pc, r1
   13268:	bl	10f08 <dcgettext@plt>
   1326c:	ldr	r3, [r4]
   13270:	mov	r1, #1
   13274:	mov	r2, r0
   13278:	mov	r0, r5
   1327c:	add	sp, sp, #36	; 0x24
   13280:	pop	{r4, r5, r6, r7, lr}
   13284:	b	11070 <__fprintf_chk@plt>
   13288:	ldr	r1, [pc, #576]	; 134d0 <close_stdout@@Base+0x1dc8>
   1328c:	mov	r2, #5
   13290:	mov	r0, #0
   13294:	add	r1, pc, r1
   13298:	bl	10f08 <dcgettext@plt>
   1329c:	ldm	r4, {r3, ip}
   132a0:	mov	r1, #1
   132a4:	str	ip, [sp, #56]	; 0x38
   132a8:	mov	r2, r0
   132ac:	mov	r0, r5
   132b0:	add	sp, sp, #36	; 0x24
   132b4:	pop	{r4, r5, r6, r7, lr}
   132b8:	b	11070 <__fprintf_chk@plt>
   132bc:	ldr	r1, [pc, #528]	; 134d4 <close_stdout@@Base+0x1dcc>
   132c0:	mov	r2, #5
   132c4:	mov	r0, #0
   132c8:	add	r1, pc, r1
   132cc:	bl	10f08 <dcgettext@plt>
   132d0:	ldm	r4, {r3, ip}
   132d4:	mov	r1, #1
   132d8:	str	ip, [sp, #56]	; 0x38
   132dc:	ldr	ip, [r4, #8]
   132e0:	str	ip, [sp, #60]	; 0x3c
   132e4:	mov	r2, r0
   132e8:	mov	r0, r5
   132ec:	add	sp, sp, #36	; 0x24
   132f0:	pop	{r4, r5, r6, r7, lr}
   132f4:	b	11070 <__fprintf_chk@plt>
   132f8:	ldr	r1, [pc, #472]	; 134d8 <close_stdout@@Base+0x1dd0>
   132fc:	mov	r2, #5
   13300:	mov	r0, #0
   13304:	add	r1, pc, r1
   13308:	bl	10f08 <dcgettext@plt>
   1330c:	ldm	r4, {r3, ip}
   13310:	mov	r1, #1
   13314:	str	ip, [sp]
   13318:	ldr	ip, [r4, #8]
   1331c:	str	ip, [sp, #4]
   13320:	ldr	ip, [r4, #12]
   13324:	str	ip, [sp, #8]
   13328:	mov	r2, r0
   1332c:	mov	r0, r5
   13330:	bl	11070 <__fprintf_chk@plt>
   13334:	b	1324c <close_stdout@@Base+0x1b44>
   13338:	ldr	r1, [pc, #412]	; 134dc <close_stdout@@Base+0x1dd4>
   1333c:	mov	r2, #5
   13340:	mov	r0, #0
   13344:	add	r1, pc, r1
   13348:	bl	10f08 <dcgettext@plt>
   1334c:	ldm	r4, {r3, ip}
   13350:	mov	r1, #1
   13354:	str	ip, [sp]
   13358:	ldr	ip, [r4, #8]
   1335c:	str	ip, [sp, #4]
   13360:	ldr	ip, [r4, #12]
   13364:	str	ip, [sp, #8]
   13368:	ldr	ip, [r4, #16]
   1336c:	str	ip, [sp, #12]
   13370:	mov	r2, r0
   13374:	mov	r0, r5
   13378:	bl	11070 <__fprintf_chk@plt>
   1337c:	b	1324c <close_stdout@@Base+0x1b44>
   13380:	ldr	r1, [pc, #344]	; 134e0 <close_stdout@@Base+0x1dd8>
   13384:	mov	r2, #5
   13388:	mov	r0, #0
   1338c:	add	r1, pc, r1
   13390:	bl	10f08 <dcgettext@plt>
   13394:	ldm	r4, {r3, ip}
   13398:	mov	r1, #1
   1339c:	str	ip, [sp]
   133a0:	ldr	ip, [r4, #8]
   133a4:	str	ip, [sp, #4]
   133a8:	ldr	ip, [r4, #12]
   133ac:	str	ip, [sp, #8]
   133b0:	ldr	ip, [r4, #16]
   133b4:	str	ip, [sp, #12]
   133b8:	ldr	ip, [r4, #20]
   133bc:	str	ip, [sp, #16]
   133c0:	mov	r2, r0
   133c4:	mov	r0, r5
   133c8:	bl	11070 <__fprintf_chk@plt>
   133cc:	b	1324c <close_stdout@@Base+0x1b44>
   133d0:	ldr	r1, [pc, #268]	; 134e4 <close_stdout@@Base+0x1ddc>
   133d4:	mov	r2, #5
   133d8:	mov	r0, #0
   133dc:	add	r1, pc, r1
   133e0:	bl	10f08 <dcgettext@plt>
   133e4:	ldm	r4, {r3, ip}
   133e8:	mov	r1, #1
   133ec:	str	ip, [sp]
   133f0:	ldr	ip, [r4, #8]
   133f4:	str	ip, [sp, #4]
   133f8:	ldr	ip, [r4, #12]
   133fc:	str	ip, [sp, #8]
   13400:	ldr	ip, [r4, #16]
   13404:	str	ip, [sp, #12]
   13408:	ldr	ip, [r4, #20]
   1340c:	str	ip, [sp, #16]
   13410:	ldr	ip, [r4, #24]
   13414:	str	ip, [sp, #20]
   13418:	mov	r2, r0
   1341c:	mov	r0, r5
   13420:	bl	11070 <__fprintf_chk@plt>
   13424:	b	1324c <close_stdout@@Base+0x1b44>
   13428:	ldr	r1, [pc, #184]	; 134e8 <close_stdout@@Base+0x1de0>
   1342c:	mov	r2, #5
   13430:	mov	r0, #0
   13434:	add	r1, pc, r1
   13438:	bl	10f08 <dcgettext@plt>
   1343c:	ldm	r4, {r3, ip}
   13440:	mov	r1, #1
   13444:	str	ip, [sp]
   13448:	ldr	ip, [r4, #8]
   1344c:	str	ip, [sp, #4]
   13450:	ldr	ip, [r4, #12]
   13454:	str	ip, [sp, #8]
   13458:	ldr	ip, [r4, #16]
   1345c:	str	ip, [sp, #12]
   13460:	ldr	ip, [r4, #20]
   13464:	str	ip, [sp, #16]
   13468:	ldr	ip, [r4, #24]
   1346c:	str	ip, [sp, #20]
   13470:	ldr	ip, [r4, #28]
   13474:	str	ip, [sp, #24]
   13478:	mov	r2, r0
   1347c:	mov	r0, r5
   13480:	bl	11070 <__fprintf_chk@plt>
   13484:	b	1324c <close_stdout@@Base+0x1b44>
   13488:	str	r3, [sp]
   1348c:	mov	r3, r2
   13490:	ldr	r2, [pc, #84]	; 134ec <close_stdout@@Base+0x1de4>
   13494:	mov	r1, #1
   13498:	add	r2, pc, r2
   1349c:	bl	11070 <__fprintf_chk@plt>
   134a0:	b	13164 <close_stdout@@Base+0x1a5c>
   134a4:	ldr	r1, [pc, #68]	; 134f0 <close_stdout@@Base+0x1de8>
   134a8:	mov	r0, #0
   134ac:	add	r1, pc, r1
   134b0:	b	131f4 <close_stdout@@Base+0x1aec>
   134b4:	andeq	r1, r1, r0, asr #29
   134b8:	andeq	r1, r0, ip, lsr r5
   134bc:	andeq	r1, r0, ip, lsr r5
   134c0:	andeq	r0, r0, ip, lsl #2
   134c4:	andeq	r1, r0, ip, lsl #10
   134c8:	muleq	r0, r8, r6
   134cc:	andeq	r1, r0, r8, lsl r5
   134d0:	strdeq	r1, [r0], -r8
   134d4:	ldrdeq	r1, [r0], -ip
   134d8:			; <UNDEFINED> instruction: 0x000014bc
   134dc:	muleq	r0, ip, r4
   134e0:	andeq	r1, r0, r8, ror r4
   134e4:	andeq	r1, r0, r0, asr r4
   134e8:	andeq	r1, r0, r4, lsr #8
   134ec:	andeq	r1, r0, ip, lsl #4
   134f0:	andeq	r1, r0, r0, lsl r4
   134f4:	push	{r4, r5, lr}
   134f8:	sub	sp, sp, #12
   134fc:	ldr	r5, [sp, #24]
   13500:	ldr	ip, [r5]
   13504:	cmp	ip, #0
   13508:	beq	13524 <close_stdout@@Base+0x1e1c>
   1350c:	mov	lr, r5
   13510:	mov	ip, #0
   13514:	ldr	r4, [lr, #4]!
   13518:	add	ip, ip, #1
   1351c:	cmp	r4, #0
   13520:	bne	13514 <close_stdout@@Base+0x1e0c>
   13524:	stm	sp, {r5, ip}
   13528:	bl	13120 <close_stdout@@Base+0x1a18>
   1352c:	add	sp, sp, #12
   13530:	pop	{r4, r5, pc}
   13534:	push	{r4, r5, r6, r7, lr}
   13538:	sub	sp, sp, #60	; 0x3c
   1353c:	ldr	r4, [pc, #100]	; 135a8 <close_stdout@@Base+0x1ea0>
   13540:	mov	ip, #0
   13544:	ldr	r5, [pc, #96]	; 135ac <close_stdout@@Base+0x1ea4>
   13548:	mov	lr, ip
   1354c:	add	r4, pc, r4
   13550:	ldr	r6, [sp, #80]	; 0x50
   13554:	ldr	r7, [r4, r5]
   13558:	add	r5, sp, #12
   1355c:	ldr	r4, [r7]
   13560:	str	r4, [sp, #52]	; 0x34
   13564:	ldr	r4, [r6, ip]
   13568:	cmp	r4, #0
   1356c:	str	r4, [r5, ip]
   13570:	beq	13584 <close_stdout@@Base+0x1e7c>
   13574:	add	lr, lr, #1
   13578:	add	ip, ip, #4
   1357c:	cmp	lr, #10
   13580:	bne	13564 <close_stdout@@Base+0x1e5c>
   13584:	stm	sp, {r5, lr}
   13588:	bl	13120 <close_stdout@@Base+0x1a18>
   1358c:	ldr	r2, [sp, #52]	; 0x34
   13590:	ldr	r3, [r7]
   13594:	cmp	r2, r3
   13598:	bne	135a4 <close_stdout@@Base+0x1e9c>
   1359c:	add	sp, sp, #60	; 0x3c
   135a0:	pop	{r4, r5, r6, r7, pc}
   135a4:	bl	10f14 <__stack_chk_fail@plt>
   135a8:	andeq	r1, r1, ip, lsr #21
   135ac:	andeq	r0, r0, r0, ror #1
   135b0:	push	{r3}		; (str r3, [sp, #-4]!)
   135b4:	push	{r4, lr}
   135b8:	sub	sp, sp, #20
   135bc:	ldr	lr, [pc, #72]	; 1360c <close_stdout@@Base+0x1f04>
   135c0:	add	ip, sp, #32
   135c4:	ldr	r4, [pc, #68]	; 13610 <close_stdout@@Base+0x1f08>
   135c8:	add	lr, pc, lr
   135cc:	ldr	r3, [sp, #28]
   135d0:	ldr	r4, [lr, r4]
   135d4:	str	ip, [sp]
   135d8:	str	ip, [sp, #8]
   135dc:	ldr	ip, [r4]
   135e0:	str	ip, [sp, #12]
   135e4:	bl	13534 <close_stdout@@Base+0x1e2c>
   135e8:	ldr	r2, [sp, #12]
   135ec:	ldr	r3, [r4]
   135f0:	cmp	r2, r3
   135f4:	bne	13608 <close_stdout@@Base+0x1f00>
   135f8:	add	sp, sp, #20
   135fc:	pop	{r4, lr}
   13600:	add	sp, sp, #4
   13604:	bx	lr
   13608:	bl	10f14 <__stack_chk_fail@plt>
   1360c:	andeq	r1, r1, r0, lsr sl
   13610:	andeq	r0, r0, r0, ror #1
   13614:	ldr	r1, [pc, #132]	; 136a0 <close_stdout@@Base+0x1f98>
   13618:	mov	r2, #5
   1361c:	push	{r4, lr}
   13620:	add	r1, pc, r1
   13624:	mov	r0, #0
   13628:	ldr	r4, [pc, #116]	; 136a4 <close_stdout@@Base+0x1f9c>
   1362c:	bl	10f08 <dcgettext@plt>
   13630:	ldr	r2, [pc, #112]	; 136a8 <close_stdout@@Base+0x1fa0>
   13634:	add	r4, pc, r4
   13638:	add	r2, pc, r2
   1363c:	mov	r1, r0
   13640:	mov	r0, #1
   13644:	bl	11058 <__printf_chk@plt>
   13648:	ldr	r1, [pc, #92]	; 136ac <close_stdout@@Base+0x1fa4>
   1364c:	mov	r2, #5
   13650:	mov	r0, #0
   13654:	add	r1, pc, r1
   13658:	bl	10f08 <dcgettext@plt>
   1365c:	ldr	r2, [pc, #76]	; 136b0 <close_stdout@@Base+0x1fa8>
   13660:	ldr	r3, [pc, #76]	; 136b4 <close_stdout@@Base+0x1fac>
   13664:	add	r2, pc, r2
   13668:	add	r3, pc, r3
   1366c:	mov	r1, r0
   13670:	mov	r0, #1
   13674:	bl	11058 <__printf_chk@plt>
   13678:	ldr	r1, [pc, #56]	; 136b8 <close_stdout@@Base+0x1fb0>
   1367c:	mov	r0, #0
   13680:	mov	r2, #5
   13684:	add	r1, pc, r1
   13688:	bl	10f08 <dcgettext@plt>
   1368c:	ldr	r3, [pc, #40]	; 136bc <close_stdout@@Base+0x1fb4>
   13690:	ldr	r3, [r4, r3]
   13694:	pop	{r4, lr}
   13698:	ldr	r1, [r3]
   1369c:	b	10e9c <fputs_unlocked@plt>
   136a0:	ldrdeq	r1, [r0], -r8
   136a4:	andeq	r1, r1, r4, asr #19
   136a8:	ldrdeq	r1, [r0], -r8
   136ac:	ldrdeq	r1, [r0], -r4
   136b0:	andeq	r0, r0, ip, lsr #28
   136b4:	andeq	r0, r0, r8, lsr lr
   136b8:			; <UNDEFINED> instruction: 0x000012b8
   136bc:	strdeq	r0, [r0], -ip
   136c0:	push	{r4, lr}
   136c4:	mov	r4, r0
   136c8:	bl	10fb0 <malloc@plt>
   136cc:	rsbs	r3, r0, #1
   136d0:	movcc	r3, #0
   136d4:	cmp	r4, #0
   136d8:	moveq	r3, #0
   136dc:	cmp	r3, #0
   136e0:	popeq	{r4, pc}
   136e4:	bl	138d4 <close_stdout@@Base+0x21cc>
   136e8:	push	{r3, r4, r5, lr}
   136ec:	mov	r4, r0
   136f0:	mvn	r0, #0
   136f4:	mov	r5, r1
   136f8:	bl	13f74 <close_stdout@@Base+0x286c>
   136fc:	cmp	r0, r4
   13700:	bcc	13710 <close_stdout@@Base+0x2008>
   13704:	mul	r0, r4, r5
   13708:	pop	{r3, r4, r5, lr}
   1370c:	b	136c0 <close_stdout@@Base+0x1fb8>
   13710:	bl	138d4 <close_stdout@@Base+0x21cc>
   13714:	b	136c0 <close_stdout@@Base+0x1fb8>
   13718:	rsbs	r3, r1, #1
   1371c:	push	{r4, lr}
   13720:	movcc	r3, #0
   13724:	cmp	r0, #0
   13728:	mov	r4, r1
   1372c:	moveq	r3, #0
   13730:	cmp	r3, #0
   13734:	bne	13758 <close_stdout@@Base+0x2050>
   13738:	bl	10f20 <realloc@plt>
   1373c:	rsbs	r3, r0, #1
   13740:	movcc	r3, #0
   13744:	cmp	r4, #0
   13748:	moveq	r3, #0
   1374c:	cmp	r3, #0
   13750:	popeq	{r4, pc}
   13754:	bl	138d4 <close_stdout@@Base+0x21cc>
   13758:	bl	10ecc <free@plt>
   1375c:	mov	r0, #0
   13760:	pop	{r4, pc}
   13764:	push	{r4, r5, r6, lr}
   13768:	mov	r5, r1
   1376c:	mov	r6, r0
   13770:	mov	r1, r2
   13774:	mvn	r0, #0
   13778:	mov	r4, r2
   1377c:	bl	13f74 <close_stdout@@Base+0x286c>
   13780:	cmp	r0, r5
   13784:	bcc	13798 <close_stdout@@Base+0x2090>
   13788:	mov	r0, r6
   1378c:	mul	r1, r5, r4
   13790:	pop	{r4, r5, r6, lr}
   13794:	b	13718 <close_stdout@@Base+0x2010>
   13798:	bl	138d4 <close_stdout@@Base+0x21cc>
   1379c:	push	{r3, r4, r5, r6, r7, lr}
   137a0:	subs	r7, r0, #0
   137a4:	mov	r5, r1
   137a8:	mov	r6, r2
   137ac:	ldr	r4, [r1]
   137b0:	beq	137e8 <close_stdout@@Base+0x20e0>
   137b4:	movw	r0, #43690	; 0xaaaa
   137b8:	mov	r1, r2
   137bc:	bfi	r0, r0, #16, #16
   137c0:	bl	13f74 <close_stdout@@Base+0x286c>
   137c4:	cmp	r4, r0
   137c8:	addcc	r3, r4, #1
   137cc:	addcc	r4, r4, r3, lsr #1
   137d0:	bcs	1380c <close_stdout@@Base+0x2104>
   137d4:	str	r4, [r5]
   137d8:	mov	r0, r7
   137dc:	mul	r1, r6, r4
   137e0:	pop	{r3, r4, r5, r6, r7, lr}
   137e4:	b	13718 <close_stdout@@Base+0x2010>
   137e8:	cmp	r4, #0
   137ec:	bne	137d4 <close_stdout@@Base+0x20cc>
   137f0:	mov	r0, #64	; 0x40
   137f4:	mov	r1, r2
   137f8:	bl	13f74 <close_stdout@@Base+0x286c>
   137fc:	cmp	r0, #0
   13800:	movne	r4, r0
   13804:	addeq	r4, r0, #1
   13808:	b	137d4 <close_stdout@@Base+0x20cc>
   1380c:	bl	138d4 <close_stdout@@Base+0x21cc>
   13810:	cmp	r0, #0
   13814:	push	{r3, lr}
   13818:	ldr	r3, [r1]
   1381c:	beq	13848 <close_stdout@@Base+0x2140>
   13820:	movw	r2, #43689	; 0xaaa9
   13824:	movt	r2, #43690	; 0xaaaa
   13828:	cmp	r3, r2
   1382c:	addls	r2, r3, #1
   13830:	addls	r3, r3, r2, lsr #1
   13834:	bhi	13860 <close_stdout@@Base+0x2158>
   13838:	str	r3, [r1]
   1383c:	mov	r1, r3
   13840:	pop	{r3, lr}
   13844:	b	13718 <close_stdout@@Base+0x2010>
   13848:	cmp	r3, #0
   1384c:	moveq	r3, #64	; 0x40
   13850:	str	r3, [r1]
   13854:	mov	r1, r3
   13858:	pop	{r3, lr}
   1385c:	b	13718 <close_stdout@@Base+0x2010>
   13860:	bl	138d4 <close_stdout@@Base+0x21cc>
   13864:	push	{r4, lr}
   13868:	mov	r4, r0
   1386c:	bl	136c0 <close_stdout@@Base+0x1fb8>
   13870:	mov	r2, r4
   13874:	mov	r1, #0
   13878:	pop	{r4, lr}
   1387c:	b	11040 <memset@plt>
   13880:	push	{r3, lr}
   13884:	bl	10e90 <calloc@plt>
   13888:	cmp	r0, #0
   1388c:	popne	{r3, pc}
   13890:	bl	138d4 <close_stdout@@Base+0x21cc>
   13894:	push	{r3, r4, r5, lr}
   13898:	mov	r4, r1
   1389c:	mov	r5, r0
   138a0:	mov	r0, r1
   138a4:	bl	136c0 <close_stdout@@Base+0x1fb8>
   138a8:	mov	r1, r5
   138ac:	mov	r2, r4
   138b0:	pop	{r3, r4, r5, lr}
   138b4:	b	10ee4 <memcpy@plt>
   138b8:	push	{r4, lr}
   138bc:	mov	r4, r0
   138c0:	bl	11004 <strlen@plt>
   138c4:	add	r1, r0, #1
   138c8:	mov	r0, r4
   138cc:	pop	{r4, lr}
   138d0:	b	13894 <close_stdout@@Base+0x218c>
   138d4:	ldr	r3, [pc, #64]	; 1391c <close_stdout@@Base+0x2214>
   138d8:	mov	r2, #5
   138dc:	ldr	ip, [pc, #60]	; 13920 <close_stdout@@Base+0x2218>
   138e0:	mov	r0, #0
   138e4:	add	r3, pc, r3
   138e8:	ldr	r1, [pc, #52]	; 13924 <close_stdout@@Base+0x221c>
   138ec:	push	{r4, lr}
   138f0:	add	r1, pc, r1
   138f4:	ldr	r3, [r3, ip]
   138f8:	ldr	r4, [r3]
   138fc:	bl	10f08 <dcgettext@plt>
   13900:	ldr	r2, [pc, #32]	; 13928 <close_stdout@@Base+0x2220>
   13904:	mov	r1, #0
   13908:	add	r2, pc, r2
   1390c:	mov	r3, r0
   13910:	mov	r0, r4
   13914:	bl	10f8c <error@plt>
   13918:	bl	110dc <abort@plt>
   1391c:	andeq	r1, r1, r4, lsl r7
   13920:	andeq	r0, r0, r0, lsl #2
   13924:	strheq	r1, [r0], -ip
   13928:	andeq	r0, r0, r8, asr #25
   1392c:	push	{r4, r5, r6, lr}
   13930:	mov	r4, r0
   13934:	bl	10f74 <__fpending@plt>
   13938:	mov	r6, r0
   1393c:	mov	r0, r4
   13940:	ldr	r4, [r4]
   13944:	bl	13dcc <close_stdout@@Base+0x26c4>
   13948:	and	r4, r4, #32
   1394c:	adds	r5, r0, #0
   13950:	movne	r5, #1
   13954:	cmp	r4, #0
   13958:	bne	13978 <close_stdout@@Base+0x2270>
   1395c:	cmp	r5, #0
   13960:	beq	13970 <close_stdout@@Base+0x2268>
   13964:	cmp	r6, #0
   13968:	beq	13994 <close_stdout@@Base+0x228c>
   1396c:	mvn	r4, #0
   13970:	mov	r0, r4
   13974:	pop	{r4, r5, r6, pc}
   13978:	cmp	r5, #0
   1397c:	bne	1396c <close_stdout@@Base+0x2264>
   13980:	bl	11028 <__errno_location@plt>
   13984:	mvn	r4, #0
   13988:	str	r5, [r0]
   1398c:	mov	r0, r4
   13990:	pop	{r4, r5, r6, pc}
   13994:	bl	11028 <__errno_location@plt>
   13998:	ldr	r4, [r0]
   1399c:	subs	r4, r4, #9
   139a0:	mvnne	r4, #0
   139a4:	mov	r0, r4
   139a8:	pop	{r4, r5, r6, pc}
   139ac:	ldr	r3, [pc, #984]	; 13d8c <close_stdout@@Base+0x2684>
   139b0:	mov	r0, #14
   139b4:	ldr	r2, [pc, #980]	; 13d90 <close_stdout@@Base+0x2688>
   139b8:	add	r3, pc, r3
   139bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139c0:	sub	sp, sp, #132	; 0x84
   139c4:	ldr	r6, [r3, r2]
   139c8:	ldr	r3, [r6]
   139cc:	str	r3, [sp, #124]	; 0x7c
   139d0:	bl	110b8 <nl_langinfo@plt>
   139d4:	subs	r5, r0, #0
   139d8:	beq	13a8c <close_stdout@@Base+0x2384>
   139dc:	ldr	r3, [pc, #944]	; 13d94 <close_stdout@@Base+0x268c>
   139e0:	ldr	r4, [pc, r3]
   139e4:	cmp	r4, #0
   139e8:	beq	13a98 <close_stdout@@Base+0x2390>
   139ec:	ldrb	r7, [r4]
   139f0:	cmp	r7, #0
   139f4:	bne	13a28 <close_stdout@@Base+0x2320>
   139f8:	b	13a60 <close_stdout@@Base+0x2358>
   139fc:	mov	r0, r4
   13a00:	bl	11004 <strlen@plt>
   13a04:	add	r0, r0, #1
   13a08:	add	r7, r4, r0
   13a0c:	mov	r0, r7
   13a10:	bl	11004 <strlen@plt>
   13a14:	add	r0, r0, #1
   13a18:	add	r4, r7, r0
   13a1c:	ldrb	r7, [r7, r0]
   13a20:	cmp	r7, #0
   13a24:	beq	13a60 <close_stdout@@Base+0x2358>
   13a28:	mov	r0, r5
   13a2c:	mov	r1, r4
   13a30:	bl	10eb4 <strcmp@plt>
   13a34:	cmp	r0, #0
   13a38:	beq	13a50 <close_stdout@@Base+0x2348>
   13a3c:	cmp	r7, #42	; 0x2a
   13a40:	bne	139fc <close_stdout@@Base+0x22f4>
   13a44:	ldrb	r3, [r4, #1]
   13a48:	cmp	r3, #0
   13a4c:	bne	139fc <close_stdout@@Base+0x22f4>
   13a50:	mov	r0, r4
   13a54:	bl	11004 <strlen@plt>
   13a58:	add	r0, r0, #1
   13a5c:	add	r5, r4, r0
   13a60:	ldrb	r3, [r5]
   13a64:	cmp	r3, #0
   13a68:	ldreq	r5, [pc, #808]	; 13d98 <close_stdout@@Base+0x2690>
   13a6c:	addeq	r5, pc, r5
   13a70:	ldr	r2, [sp, #124]	; 0x7c
   13a74:	mov	r0, r5
   13a78:	ldr	r3, [r6]
   13a7c:	cmp	r2, r3
   13a80:	bne	13d60 <close_stdout@@Base+0x2658>
   13a84:	add	sp, sp, #132	; 0x84
   13a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a8c:	ldr	r5, [pc, #776]	; 13d9c <close_stdout@@Base+0x2694>
   13a90:	add	r5, pc, r5
   13a94:	b	139dc <close_stdout@@Base+0x22d4>
   13a98:	ldr	r0, [pc, #768]	; 13da0 <close_stdout@@Base+0x2698>
   13a9c:	add	r0, pc, r0
   13aa0:	bl	10fa4 <getenv@plt>
   13aa4:	subs	r8, r0, #0
   13aa8:	beq	13d38 <close_stdout@@Base+0x2630>
   13aac:	ldrb	r3, [r8]
   13ab0:	cmp	r3, #0
   13ab4:	beq	13ccc <close_stdout@@Base+0x25c4>
   13ab8:	bl	11004 <strlen@plt>
   13abc:	subs	sl, r0, #0
   13ac0:	subne	r3, sl, #1
   13ac4:	bne	13cdc <close_stdout@@Base+0x25d4>
   13ac8:	mov	r9, #0
   13acc:	mov	fp, r9
   13ad0:	add	r9, sl, r9
   13ad4:	add	r0, r9, #14
   13ad8:	bl	10fb0 <malloc@plt>
   13adc:	subs	r7, r0, #0
   13ae0:	beq	13d2c <close_stdout@@Base+0x2624>
   13ae4:	mov	r1, r8
   13ae8:	mov	r2, sl
   13aec:	bl	10ee4 <memcpy@plt>
   13af0:	cmp	fp, #0
   13af4:	add	ip, r7, r9
   13af8:	movne	r3, #47	; 0x2f
   13afc:	strbne	r3, [r7, sl]
   13b00:	ldr	r3, [pc, #668]	; 13da4 <close_stdout@@Base+0x269c>
   13b04:	add	r3, pc, r3
   13b08:	ldm	r3!, {r0, r1, r2}
   13b0c:	ldrh	r3, [r3]
   13b10:	str	r0, [r7, r9]
   13b14:	mov	r0, r7
   13b18:	str	r1, [ip, #4]
   13b1c:	mov	r1, #32768	; 0x8000
   13b20:	strh	r3, [ip, #12]
   13b24:	str	r2, [ip, #8]
   13b28:	bl	10f98 <open64@plt>
   13b2c:	subs	r8, r0, #0
   13b30:	blt	13cf4 <close_stdout@@Base+0x25ec>
   13b34:	ldr	r1, [pc, #620]	; 13da8 <close_stdout@@Base+0x26a0>
   13b38:	add	r1, pc, r1
   13b3c:	bl	10e84 <fdopen@plt>
   13b40:	subs	fp, r0, #0
   13b44:	beq	13d4c <close_stdout@@Base+0x2644>
   13b48:	ldr	r0, [pc, #604]	; 13dac <close_stdout@@Base+0x26a4>
   13b4c:	add	sl, sp, #20
   13b50:	add	r9, sp, #72	; 0x48
   13b54:	mov	r8, #0
   13b58:	add	r0, pc, r0
   13b5c:	str	r0, [sp, #12]
   13b60:	ldr	r3, [fp, #4]
   13b64:	ldr	r2, [fp, #8]
   13b68:	cmp	r3, r2
   13b6c:	bcs	13c58 <close_stdout@@Base+0x2550>
   13b70:	add	r2, r3, #1
   13b74:	str	r2, [fp, #4]
   13b78:	ldrb	r0, [r3]
   13b7c:	cmp	r0, #32
   13b80:	beq	13b60 <close_stdout@@Base+0x2458>
   13b84:	sub	r3, r0, #9
   13b88:	cmp	r3, #1
   13b8c:	bls	13b60 <close_stdout@@Base+0x2458>
   13b90:	cmp	r0, #35	; 0x23
   13b94:	beq	13c6c <close_stdout@@Base+0x2564>
   13b98:	mov	r1, fp
   13b9c:	bl	1101c <ungetc@plt>
   13ba0:	mov	r0, fp
   13ba4:	ldr	r1, [sp, #12]
   13ba8:	mov	r2, sl
   13bac:	mov	r3, r9
   13bb0:	bl	1104c <fscanf@plt>
   13bb4:	cmp	r0, #1
   13bb8:	ble	13c9c <close_stdout@@Base+0x2594>
   13bbc:	mov	r0, sl
   13bc0:	bl	11004 <strlen@plt>
   13bc4:	str	r0, [sp, #8]
   13bc8:	mov	r0, r9
   13bcc:	bl	11004 <strlen@plt>
   13bd0:	cmp	r8, #0
   13bd4:	mov	r2, r0
   13bd8:	bne	13d00 <close_stdout@@Base+0x25f8>
   13bdc:	ldr	r3, [sp, #8]
   13be0:	str	r2, [sp]
   13be4:	add	r8, r0, r3
   13be8:	add	r0, r8, #3
   13bec:	add	r8, r8, #2
   13bf0:	bl	10fb0 <malloc@plt>
   13bf4:	ldr	r2, [sp]
   13bf8:	mov	r3, r0
   13bfc:	cmp	r3, #0
   13c00:	beq	13d64 <close_stdout@@Base+0x265c>
   13c04:	ldr	r0, [sp, #8]
   13c08:	movw	r1, #65534	; 0xfffe
   13c0c:	movt	r1, #65535	; 0xffff
   13c10:	rsb	r2, r2, r8
   13c14:	rsb	r1, r0, r1
   13c18:	stm	sp, {r2, r3}
   13c1c:	add	r0, r1, r2
   13c20:	mov	r1, sl
   13c24:	add	r0, r3, r0
   13c28:	mov	r4, r3
   13c2c:	bl	10f68 <strcpy@plt>
   13c30:	ldr	r2, [sp]
   13c34:	ldr	r3, [sp, #4]
   13c38:	mov	r1, r9
   13c3c:	sub	r0, r2, #1
   13c40:	add	r0, r3, r0
   13c44:	bl	10f68 <strcpy@plt>
   13c48:	ldr	r3, [fp, #4]
   13c4c:	ldr	r2, [fp, #8]
   13c50:	cmp	r3, r2
   13c54:	bcc	13b70 <close_stdout@@Base+0x2468>
   13c58:	mov	r0, fp
   13c5c:	bl	11094 <__uflow@plt>
   13c60:	cmn	r0, #1
   13c64:	beq	13c9c <close_stdout@@Base+0x2594>
   13c68:	b	13b7c <close_stdout@@Base+0x2474>
   13c6c:	ldr	r3, [fp, #4]
   13c70:	ldr	r2, [fp, #8]
   13c74:	cmp	r3, r2
   13c78:	bcs	13d80 <close_stdout@@Base+0x2678>
   13c7c:	add	r2, r3, #1
   13c80:	str	r2, [fp, #4]
   13c84:	ldrb	r0, [r3]
   13c88:	cmp	r0, #10
   13c8c:	cmnne	r0, #1
   13c90:	bne	13c6c <close_stdout@@Base+0x2564>
   13c94:	cmn	r0, #1
   13c98:	bne	13b60 <close_stdout@@Base+0x2458>
   13c9c:	mov	r0, fp
   13ca0:	bl	13dcc <close_stdout@@Base+0x26c4>
   13ca4:	cmp	r8, #0
   13ca8:	beq	13cf4 <close_stdout@@Base+0x25ec>
   13cac:	mov	r3, #0
   13cb0:	strb	r3, [r4, r8]
   13cb4:	mov	r0, r7
   13cb8:	bl	10ecc <free@plt>
   13cbc:	ldr	r3, [pc, #236]	; 13db0 <close_stdout@@Base+0x26a8>
   13cc0:	add	r3, pc, r3
   13cc4:	str	r4, [r3]
   13cc8:	b	139ec <close_stdout@@Base+0x22e4>
   13ccc:	ldr	r8, [pc, #224]	; 13db4 <close_stdout@@Base+0x26ac>
   13cd0:	mov	r3, #7
   13cd4:	mov	sl, #8
   13cd8:	add	r8, pc, r8
   13cdc:	ldrb	r3, [r8, r3]
   13ce0:	cmp	r3, #47	; 0x2f
   13ce4:	movne	r9, #1
   13ce8:	movne	fp, r9
   13cec:	bne	13ad0 <close_stdout@@Base+0x23c8>
   13cf0:	b	13ac8 <close_stdout@@Base+0x23c0>
   13cf4:	ldr	r4, [pc, #188]	; 13db8 <close_stdout@@Base+0x26b0>
   13cf8:	add	r4, pc, r4
   13cfc:	b	13cb4 <close_stdout@@Base+0x25ac>
   13d00:	ldr	r0, [sp, #8]
   13d04:	str	r2, [sp]
   13d08:	add	r3, r0, r2
   13d0c:	mov	r0, r4
   13d10:	add	r8, r3, r8
   13d14:	add	r1, r8, #3
   13d18:	add	r8, r8, #2
   13d1c:	bl	10f20 <realloc@plt>
   13d20:	ldr	r2, [sp]
   13d24:	mov	r3, r0
   13d28:	b	13bfc <close_stdout@@Base+0x24f4>
   13d2c:	ldr	r4, [pc, #136]	; 13dbc <close_stdout@@Base+0x26b4>
   13d30:	add	r4, pc, r4
   13d34:	b	13cbc <close_stdout@@Base+0x25b4>
   13d38:	ldr	r8, [pc, #128]	; 13dc0 <close_stdout@@Base+0x26b8>
   13d3c:	mov	r3, #7
   13d40:	mov	sl, #8
   13d44:	add	r8, pc, r8
   13d48:	b	13cdc <close_stdout@@Base+0x25d4>
   13d4c:	ldr	r4, [pc, #112]	; 13dc4 <close_stdout@@Base+0x26bc>
   13d50:	mov	r0, r8
   13d54:	add	r4, pc, r4
   13d58:	bl	110e8 <close@plt>
   13d5c:	b	13cb4 <close_stdout@@Base+0x25ac>
   13d60:	bl	10f14 <__stack_chk_fail@plt>
   13d64:	mov	r0, r4
   13d68:	ldr	r4, [pc, #88]	; 13dc8 <close_stdout@@Base+0x26c0>
   13d6c:	bl	10ecc <free@plt>
   13d70:	mov	r0, fp
   13d74:	add	r4, pc, r4
   13d78:	bl	13dcc <close_stdout@@Base+0x26c4>
   13d7c:	b	13cb4 <close_stdout@@Base+0x25ac>
   13d80:	mov	r0, fp
   13d84:	bl	11094 <__uflow@plt>
   13d88:	b	13c88 <close_stdout@@Base+0x2580>
   13d8c:	andeq	r1, r1, r0, asr #12
   13d90:	andeq	r0, r0, r0, ror #1
   13d94:			; <UNDEFINED> instruction: 0x000118bc
   13d98:	andeq	r0, r0, r0, ror #30
   13d9c:	andeq	r0, r0, r4, asr #21
   13da0:	andeq	r0, r0, r8, lsr pc
   13da4:	andeq	r0, r0, r0, ror #29
   13da8:			; <UNDEFINED> instruction: 0x00000ebc
   13dac:	andeq	r0, r0, r0, lsr #29
   13db0:	ldrdeq	r1, [r1], -ip
   13db4:	andeq	r0, r0, r8, ror #25
   13db8:	andeq	r0, r0, ip, asr r8
   13dbc:	andeq	r0, r0, r4, lsr #16
   13dc0:	andeq	r0, r0, ip, ror ip
   13dc4:	andeq	r0, r0, r0, lsl #16
   13dc8:	andeq	r0, r0, r0, ror #15
   13dcc:	push	{r4, r5, r6, lr}
   13dd0:	sub	sp, sp, #8
   13dd4:	mov	r4, r0
   13dd8:	bl	11064 <fileno@plt>
   13ddc:	cmp	r0, #0
   13de0:	mov	r0, r4
   13de4:	blt	13e60 <close_stdout@@Base+0x2758>
   13de8:	bl	10fc8 <__freading@plt>
   13dec:	cmp	r0, #0
   13df0:	bne	13e2c <close_stdout@@Base+0x2724>
   13df4:	mov	r0, r4
   13df8:	bl	13e6c <close_stdout@@Base+0x2764>
   13dfc:	cmp	r0, #0
   13e00:	beq	13e5c <close_stdout@@Base+0x2754>
   13e04:	bl	11028 <__errno_location@plt>
   13e08:	ldr	r6, [r0]
   13e0c:	mov	r5, r0
   13e10:	mov	r0, r4
   13e14:	bl	1107c <fclose@plt>
   13e18:	cmp	r6, #0
   13e1c:	mvnne	r0, #0
   13e20:	strne	r6, [r5]
   13e24:	add	sp, sp, #8
   13e28:	pop	{r4, r5, r6, pc}
   13e2c:	mov	r0, r4
   13e30:	bl	11064 <fileno@plt>
   13e34:	mov	r1, #1
   13e38:	mov	r2, #0
   13e3c:	mov	r3, #0
   13e40:	str	r1, [sp]
   13e44:	bl	10f50 <lseek64@plt>
   13e48:	mvn	r2, #0
   13e4c:	mvn	r3, #0
   13e50:	cmp	r1, r3
   13e54:	cmpeq	r0, r2
   13e58:	bne	13df4 <close_stdout@@Base+0x26ec>
   13e5c:	mov	r0, r4
   13e60:	add	sp, sp, #8
   13e64:	pop	{r4, r5, r6, lr}
   13e68:	b	1107c <fclose@plt>
   13e6c:	push	{r4, lr}
   13e70:	subs	r4, r0, #0
   13e74:	sub	sp, sp, #8
   13e78:	beq	13e88 <close_stdout@@Base+0x2780>
   13e7c:	bl	10fc8 <__freading@plt>
   13e80:	cmp	r0, #0
   13e84:	bne	13e98 <close_stdout@@Base+0x2790>
   13e88:	mov	r0, r4
   13e8c:	add	sp, sp, #8
   13e90:	pop	{r4, lr}
   13e94:	b	10ec0 <fflush@plt>
   13e98:	ldr	r3, [r4]
   13e9c:	tst	r3, #256	; 0x100
   13ea0:	beq	13e88 <close_stdout@@Base+0x2780>
   13ea4:	mov	r3, #1
   13ea8:	mov	r0, r4
   13eac:	str	r3, [sp]
   13eb0:	mov	r2, #0
   13eb4:	mov	r3, #0
   13eb8:	bl	13ecc <close_stdout@@Base+0x27c4>
   13ebc:	mov	r0, r4
   13ec0:	add	sp, sp, #8
   13ec4:	pop	{r4, lr}
   13ec8:	b	10ec0 <fflush@plt>
   13ecc:	push	{r4, r5, r6, r7, lr}
   13ed0:	sub	sp, sp, #20
   13ed4:	ldmib	r0, {r1, ip}
   13ed8:	mov	r6, r0
   13edc:	ldr	r4, [sp, #40]	; 0x28
   13ee0:	cmp	ip, r1
   13ee4:	beq	13efc <close_stdout@@Base+0x27f4>
   13ee8:	str	r4, [sp, #40]	; 0x28
   13eec:	mov	r0, r6
   13ef0:	add	sp, sp, #20
   13ef4:	pop	{r4, r5, r6, r7, lr}
   13ef8:	b	11088 <fseeko64@plt>
   13efc:	ldr	ip, [r0, #20]
   13f00:	ldr	r1, [r0, #16]
   13f04:	cmp	ip, r1
   13f08:	bne	13ee8 <close_stdout@@Base+0x27e0>
   13f0c:	ldr	r7, [r0, #36]	; 0x24
   13f10:	cmp	r7, #0
   13f14:	bne	13ee8 <close_stdout@@Base+0x27e0>
   13f18:	str	r2, [sp, #12]
   13f1c:	mvn	r5, #0
   13f20:	str	r3, [sp, #8]
   13f24:	bl	11064 <fileno@plt>
   13f28:	str	r4, [sp]
   13f2c:	mvn	r4, #0
   13f30:	ldr	r2, [sp, #12]
   13f34:	ldr	r3, [sp, #8]
   13f38:	bl	10f50 <lseek64@plt>
   13f3c:	mov	r2, r0
   13f40:	mov	r3, r1
   13f44:	cmp	r3, r5
   13f48:	cmpeq	r2, r4
   13f4c:	beq	13f6c <close_stdout@@Base+0x2864>
   13f50:	ldr	r1, [r6]
   13f54:	mov	r0, r7
   13f58:	strd	r2, [r6, #80]	; 0x50
   13f5c:	bic	r3, r1, #16
   13f60:	str	r3, [r6]
   13f64:	add	sp, sp, #20
   13f68:	pop	{r4, r5, r6, r7, pc}
   13f6c:	mvn	r0, #0
   13f70:	b	13f64 <close_stdout@@Base+0x285c>
   13f74:	subs	r2, r1, #1
   13f78:	bxeq	lr
   13f7c:	bcc	14154 <close_stdout@@Base+0x2a4c>
   13f80:	cmp	r0, r1
   13f84:	bls	14138 <close_stdout@@Base+0x2a30>
   13f88:	tst	r1, r2
   13f8c:	beq	14144 <close_stdout@@Base+0x2a3c>
   13f90:	clz	r3, r0
   13f94:	clz	r2, r1
   13f98:	sub	r3, r2, r3
   13f9c:	rsbs	r3, r3, #31
   13fa0:	addne	r3, r3, r3, lsl #1
   13fa4:	mov	r2, #0
   13fa8:	addne	pc, pc, r3, lsl #2
   13fac:	nop	{0}
   13fb0:	cmp	r0, r1, lsl #31
   13fb4:	adc	r2, r2, r2
   13fb8:	subcs	r0, r0, r1, lsl #31
   13fbc:	cmp	r0, r1, lsl #30
   13fc0:	adc	r2, r2, r2
   13fc4:	subcs	r0, r0, r1, lsl #30
   13fc8:	cmp	r0, r1, lsl #29
   13fcc:	adc	r2, r2, r2
   13fd0:	subcs	r0, r0, r1, lsl #29
   13fd4:	cmp	r0, r1, lsl #28
   13fd8:	adc	r2, r2, r2
   13fdc:	subcs	r0, r0, r1, lsl #28
   13fe0:	cmp	r0, r1, lsl #27
   13fe4:	adc	r2, r2, r2
   13fe8:	subcs	r0, r0, r1, lsl #27
   13fec:	cmp	r0, r1, lsl #26
   13ff0:	adc	r2, r2, r2
   13ff4:	subcs	r0, r0, r1, lsl #26
   13ff8:	cmp	r0, r1, lsl #25
   13ffc:	adc	r2, r2, r2
   14000:	subcs	r0, r0, r1, lsl #25
   14004:	cmp	r0, r1, lsl #24
   14008:	adc	r2, r2, r2
   1400c:	subcs	r0, r0, r1, lsl #24
   14010:	cmp	r0, r1, lsl #23
   14014:	adc	r2, r2, r2
   14018:	subcs	r0, r0, r1, lsl #23
   1401c:	cmp	r0, r1, lsl #22
   14020:	adc	r2, r2, r2
   14024:	subcs	r0, r0, r1, lsl #22
   14028:	cmp	r0, r1, lsl #21
   1402c:	adc	r2, r2, r2
   14030:	subcs	r0, r0, r1, lsl #21
   14034:	cmp	r0, r1, lsl #20
   14038:	adc	r2, r2, r2
   1403c:	subcs	r0, r0, r1, lsl #20
   14040:	cmp	r0, r1, lsl #19
   14044:	adc	r2, r2, r2
   14048:	subcs	r0, r0, r1, lsl #19
   1404c:	cmp	r0, r1, lsl #18
   14050:	adc	r2, r2, r2
   14054:	subcs	r0, r0, r1, lsl #18
   14058:	cmp	r0, r1, lsl #17
   1405c:	adc	r2, r2, r2
   14060:	subcs	r0, r0, r1, lsl #17
   14064:	cmp	r0, r1, lsl #16
   14068:	adc	r2, r2, r2
   1406c:	subcs	r0, r0, r1, lsl #16
   14070:	cmp	r0, r1, lsl #15
   14074:	adc	r2, r2, r2
   14078:	subcs	r0, r0, r1, lsl #15
   1407c:	cmp	r0, r1, lsl #14
   14080:	adc	r2, r2, r2
   14084:	subcs	r0, r0, r1, lsl #14
   14088:	cmp	r0, r1, lsl #13
   1408c:	adc	r2, r2, r2
   14090:	subcs	r0, r0, r1, lsl #13
   14094:	cmp	r0, r1, lsl #12
   14098:	adc	r2, r2, r2
   1409c:	subcs	r0, r0, r1, lsl #12
   140a0:	cmp	r0, r1, lsl #11
   140a4:	adc	r2, r2, r2
   140a8:	subcs	r0, r0, r1, lsl #11
   140ac:	cmp	r0, r1, lsl #10
   140b0:	adc	r2, r2, r2
   140b4:	subcs	r0, r0, r1, lsl #10
   140b8:	cmp	r0, r1, lsl #9
   140bc:	adc	r2, r2, r2
   140c0:	subcs	r0, r0, r1, lsl #9
   140c4:	cmp	r0, r1, lsl #8
   140c8:	adc	r2, r2, r2
   140cc:	subcs	r0, r0, r1, lsl #8
   140d0:	cmp	r0, r1, lsl #7
   140d4:	adc	r2, r2, r2
   140d8:	subcs	r0, r0, r1, lsl #7
   140dc:	cmp	r0, r1, lsl #6
   140e0:	adc	r2, r2, r2
   140e4:	subcs	r0, r0, r1, lsl #6
   140e8:	cmp	r0, r1, lsl #5
   140ec:	adc	r2, r2, r2
   140f0:	subcs	r0, r0, r1, lsl #5
   140f4:	cmp	r0, r1, lsl #4
   140f8:	adc	r2, r2, r2
   140fc:	subcs	r0, r0, r1, lsl #4
   14100:	cmp	r0, r1, lsl #3
   14104:	adc	r2, r2, r2
   14108:	subcs	r0, r0, r1, lsl #3
   1410c:	cmp	r0, r1, lsl #2
   14110:	adc	r2, r2, r2
   14114:	subcs	r0, r0, r1, lsl #2
   14118:	cmp	r0, r1, lsl #1
   1411c:	adc	r2, r2, r2
   14120:	subcs	r0, r0, r1, lsl #1
   14124:	cmp	r0, r1
   14128:	adc	r2, r2, r2
   1412c:	subcs	r0, r0, r1
   14130:	mov	r0, r2
   14134:	bx	lr
   14138:	moveq	r0, #1
   1413c:	movne	r0, #0
   14140:	bx	lr
   14144:	clz	r2, r1
   14148:	rsb	r2, r2, #31
   1414c:	lsr	r0, r0, r2
   14150:	bx	lr
   14154:	cmp	r0, #0
   14158:	mvnne	r0, #0
   1415c:	b	14180 <close_stdout@@Base+0x2a78>
   14160:	cmp	r1, #0
   14164:	beq	14154 <close_stdout@@Base+0x2a4c>
   14168:	push	{r0, r1, lr}
   1416c:	bl	13f74 <close_stdout@@Base+0x286c>
   14170:	pop	{r1, r2, lr}
   14174:	mul	r3, r2, r0
   14178:	sub	r1, r1, r3
   1417c:	bx	lr
   14180:	push	{r1, lr}
   14184:	mov	r0, #8
   14188:	bl	10ea8 <raise@plt>
   1418c:	pop	{r1, pc}
   14190:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14194:	mov	r7, r0
   14198:	ldr	r6, [pc, #76]	; 141ec <close_stdout@@Base+0x2ae4>
   1419c:	mov	r8, r1
   141a0:	ldr	r5, [pc, #72]	; 141f0 <close_stdout@@Base+0x2ae8>
   141a4:	mov	r9, r2
   141a8:	add	r6, pc, r6
   141ac:	bl	10e64 <fdopen@plt-0x20>
   141b0:	add	r5, pc, r5
   141b4:	rsb	r6, r5, r6
   141b8:	asrs	r6, r6, #2
   141bc:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   141c0:	sub	r5, r5, #4
   141c4:	mov	r4, #0
   141c8:	add	r4, r4, #1
   141cc:	ldr	r3, [r5, #4]!
   141d0:	mov	r0, r7
   141d4:	mov	r1, r8
   141d8:	mov	r2, r9
   141dc:	blx	r3
   141e0:	cmp	r4, r6
   141e4:	bne	141c8 <close_stdout@@Base+0x2ac0>
   141e8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   141ec:	andeq	r0, r1, ip, ror #25
   141f0:	andeq	r0, r1, r0, ror #25
   141f4:	bx	lr
   141f8:	ldr	r3, [pc, #28]	; 1421c <close_stdout@@Base+0x2b14>
   141fc:	mov	r1, #0
   14200:	ldr	r2, [pc, #24]	; 14220 <close_stdout@@Base+0x2b18>
   14204:	add	r3, pc, r3
   14208:	ldr	r3, [r3, r2]
   1420c:	cmp	r3, #0
   14210:	ldrne	r2, [r3]
   14214:	moveq	r2, r3
   14218:	b	11034 <__cxa_atexit@plt>
   1421c:	strdeq	r0, [r1], -r4
   14220:	strdeq	r0, [r0], -r8

Disassembly of section .fini:

00014224 <.fini>:
   14224:	push	{r3, lr}
   14228:	pop	{r3, pc}
