
centos-preinstalled/hostid:     file format elf32-littlearm


Disassembly of section .init:

00010e5c <.init>:
   10e5c:	push	{r3, lr}
   10e60:	bl	112a0 <close@plt+0x1c0>
   10e64:	pop	{r3, pc}

Disassembly of section .plt:

00010e68 <fdopen@plt-0x14>:
   10e68:	push	{lr}		; (str lr, [sp, #-4]!)
   10e6c:	ldr	lr, [pc, #4]	; 10e78 <fdopen@plt-0x4>
   10e70:	add	lr, pc, lr
   10e74:	ldr	pc, [lr, #8]!
   10e78:	andeq	r4, r1, r8, lsl #3

00010e7c <fdopen@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #20, 20	; 0x14000
   10e84:	ldr	pc, [ip, #392]!	; 0x188

00010e88 <calloc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #20, 20	; 0x14000
   10e90:	ldr	pc, [ip, #384]!	; 0x180

00010e94 <fputs_unlocked@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #20, 20	; 0x14000
   10e9c:	ldr	pc, [ip, #376]!	; 0x178

00010ea0 <raise@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #368]!	; 0x170

00010eac <strcmp@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #360]!	; 0x168

00010eb8 <fflush@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #352]!	; 0x160

00010ec4 <free@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #20, 20	; 0x14000
   10ecc:	ldr	pc, [ip, #344]!	; 0x158

00010ed0 <_exit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #20, 20	; 0x14000
   10ed8:	ldr	pc, [ip, #336]!	; 0x150

00010edc <memcpy@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #20, 20	; 0x14000
   10ee4:	ldr	pc, [ip, #328]!	; 0x148

00010ee8 <mbsinit@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #20, 20	; 0x14000
   10ef0:	ldr	pc, [ip, #320]!	; 0x140

00010ef4 <gethostid@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #20, 20	; 0x14000
   10efc:	ldr	pc, [ip, #312]!	; 0x138

00010f00 <memcmp@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #20, 20	; 0x14000
   10f08:	ldr	pc, [ip, #304]!	; 0x130

00010f0c <dcgettext@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #20, 20	; 0x14000
   10f14:	ldr	pc, [ip, #296]!	; 0x128

00010f18 <__stack_chk_fail@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #20, 20	; 0x14000
   10f20:	ldr	pc, [ip, #288]!	; 0x120

00010f24 <realloc@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #20, 20	; 0x14000
   10f2c:	ldr	pc, [ip, #280]!	; 0x118

00010f30 <textdomain@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #20, 20	; 0x14000
   10f38:	ldr	pc, [ip, #272]!	; 0x110

00010f3c <iswprint@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #20, 20	; 0x14000
   10f44:	ldr	pc, [ip, #264]!	; 0x108

00010f48 <fwrite@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #20, 20	; 0x14000
   10f50:	ldr	pc, [ip, #256]!	; 0x100

00010f54 <lseek64@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #20, 20	; 0x14000
   10f5c:	ldr	pc, [ip, #248]!	; 0xf8

00010f60 <__ctype_get_mb_cur_max@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #20, 20	; 0x14000
   10f68:	ldr	pc, [ip, #240]!	; 0xf0

00010f6c <strcpy@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #20, 20	; 0x14000
   10f74:	ldr	pc, [ip, #232]!	; 0xe8

00010f78 <__fpending@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #20, 20	; 0x14000
   10f80:	ldr	pc, [ip, #224]!	; 0xe0

00010f84 <mbrtowc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #20, 20	; 0x14000
   10f8c:	ldr	pc, [ip, #216]!	; 0xd8

00010f90 <error@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #20, 20	; 0x14000
   10f98:	ldr	pc, [ip, #208]!	; 0xd0

00010f9c <open64@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #20, 20	; 0x14000
   10fa4:	ldr	pc, [ip, #200]!	; 0xc8

00010fa8 <getenv@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #20, 20	; 0x14000
   10fb0:	ldr	pc, [ip, #192]!	; 0xc0

00010fb4 <malloc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #20, 20	; 0x14000
   10fbc:	ldr	pc, [ip, #184]!	; 0xb8

00010fc0 <__libc_start_main@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #20, 20	; 0x14000
   10fc8:	ldr	pc, [ip, #176]!	; 0xb0

00010fcc <__freading@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #20, 20	; 0x14000
   10fd4:	ldr	pc, [ip, #168]!	; 0xa8

00010fd8 <__gmon_start__@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #20, 20	; 0x14000
   10fe0:	ldr	pc, [ip, #160]!	; 0xa0

00010fe4 <getopt_long@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #20, 20	; 0x14000
   10fec:	ldr	pc, [ip, #152]!	; 0x98

00010ff0 <__ctype_b_loc@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #20, 20	; 0x14000
   10ff8:	ldr	pc, [ip, #144]!	; 0x90

00010ffc <exit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #20, 20	; 0x14000
   11004:	ldr	pc, [ip, #136]!	; 0x88

00011008 <strlen@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #20, 20	; 0x14000
   11010:	ldr	pc, [ip, #128]!	; 0x80

00011014 <ungetc@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #20, 20	; 0x14000
   1101c:	ldr	pc, [ip, #120]!	; 0x78

00011020 <__errno_location@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #20, 20	; 0x14000
   11028:	ldr	pc, [ip, #112]!	; 0x70

0001102c <__cxa_atexit@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #20, 20	; 0x14000
   11034:	ldr	pc, [ip, #104]!	; 0x68

00011038 <memset@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #20, 20	; 0x14000
   11040:	ldr	pc, [ip, #96]!	; 0x60

00011044 <fscanf@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #20, 20	; 0x14000
   1104c:	ldr	pc, [ip, #88]!	; 0x58

00011050 <__printf_chk@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #20, 20	; 0x14000
   11058:	ldr	pc, [ip, #80]!	; 0x50

0001105c <fileno@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #20, 20	; 0x14000
   11064:	ldr	pc, [ip, #72]!	; 0x48

00011068 <__fprintf_chk@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #20, 20	; 0x14000
   11070:	ldr	pc, [ip, #64]!	; 0x40

00011074 <fclose@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #20, 20	; 0x14000
   1107c:	ldr	pc, [ip, #56]!	; 0x38

00011080 <fseeko64@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #20, 20	; 0x14000
   11088:	ldr	pc, [ip, #48]!	; 0x30

0001108c <__uflow@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #20, 20	; 0x14000
   11094:	ldr	pc, [ip, #40]!	; 0x28

00011098 <setlocale@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #20, 20	; 0x14000
   110a0:	ldr	pc, [ip, #32]!

000110a4 <strrchr@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #20, 20	; 0x14000
   110ac:	ldr	pc, [ip, #24]!

000110b0 <nl_langinfo@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #20, 20	; 0x14000
   110b8:	ldr	pc, [ip, #16]!

000110bc <bindtextdomain@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #20, 20	; 0x14000
   110c4:	ldr	pc, [ip, #8]!

000110c8 <strncmp@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #20, 20	; 0x14000
   110d0:	ldr	pc, [ip, #0]!

000110d4 <abort@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #77824	; 0x13000
   110dc:	ldr	pc, [ip, #4088]!	; 0xff8

000110e0 <close@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #77824	; 0x13000
   110e8:	ldr	pc, [ip, #4080]!	; 0xff0

Disassembly of section .text:

000110ec <usage@@Base-0x2ac>:
   110ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   110f0:	mov	r7, r0
   110f4:	ldr	r8, [pc, #308]	; 11230 <close@plt+0x150>
   110f8:	sub	sp, sp, #20
   110fc:	ldr	r0, [r1]
   11100:	mov	r6, r1
   11104:	add	r8, pc, r8
   11108:	ldr	r9, [pc, #292]	; 11234 <close@plt+0x154>
   1110c:	bl	11844 <close_stdout@@Base+0x2c8>
   11110:	mov	r0, #6
   11114:	mov	r1, r8
   11118:	add	r9, pc, r9
   1111c:	bl	11098 <setlocale@plt>
   11120:	ldr	r1, [pc, #272]	; 11238 <close@plt+0x158>
   11124:	mov	r0, r9
   11128:	ldr	r4, [pc, #268]	; 1123c <close@plt+0x15c>
   1112c:	add	r1, pc, r1
   11130:	mov	r5, #0
   11134:	bl	110bc <bindtextdomain@plt>
   11138:	mov	r0, r9
   1113c:	bl	10f30 <textdomain@plt>
   11140:	ldr	r3, [pc, #248]	; 11240 <close@plt+0x160>
   11144:	add	r4, pc, r4
   11148:	ldr	r0, [r4, r3]
   1114c:	bl	14178 <close_stdout@@Base+0x2bfc>
   11150:	ldr	r3, [pc, #236]	; 11244 <close@plt+0x164>
   11154:	ldr	ip, [pc, #236]	; 11248 <close@plt+0x168>
   11158:	mov	r0, r7
   1115c:	ldr	lr, [pc, #232]	; 1124c <close@plt+0x16c>
   11160:	mov	r1, r6
   11164:	ldr	r9, [r4, r3]
   11168:	ldr	r2, [pc, #224]	; 11250 <close@plt+0x170>
   1116c:	add	lr, pc, lr
   11170:	ldr	r3, [pc, #220]	; 11254 <close@plt+0x174>
   11174:	ldr	r9, [r9]
   11178:	add	r2, pc, r2
   1117c:	add	r3, pc, r3
   11180:	str	r9, [sp]
   11184:	ldr	ip, [r4, ip]
   11188:	str	lr, [sp, #8]
   1118c:	str	r5, [sp, #12]
   11190:	str	ip, [sp, #4]
   11194:	bl	11738 <close_stdout@@Base+0x1bc>
   11198:	str	r5, [sp]
   1119c:	mov	r2, r8
   111a0:	mov	r0, r7
   111a4:	mov	r1, r6
   111a8:	mov	r3, r5
   111ac:	bl	10fe4 <getopt_long@plt>
   111b0:	cmn	r0, #1
   111b4:	beq	111c0 <close@plt+0xe0>
   111b8:	mov	r0, #1
   111bc:	bl	11398 <usage@@Base>
   111c0:	ldr	r3, [pc, #144]	; 11258 <close@plt+0x178>
   111c4:	ldr	r4, [r4, r3]
   111c8:	ldr	r3, [r4]
   111cc:	cmp	r7, r3
   111d0:	ble	11210 <close@plt+0x130>
   111d4:	ldr	r1, [pc, #128]	; 1125c <close@plt+0x17c>
   111d8:	mov	r2, #5
   111dc:	mov	r0, r5
   111e0:	add	r1, pc, r1
   111e4:	bl	10f0c <dcgettext@plt>
   111e8:	ldr	r3, [r4]
   111ec:	mov	r7, r0
   111f0:	ldr	r0, [r6, r3, lsl #2]
   111f4:	bl	13094 <close_stdout@@Base+0x1b18>
   111f8:	mov	r1, r5
   111fc:	mov	r2, r7
   11200:	mov	r3, r0
   11204:	mov	r0, r5
   11208:	bl	10f90 <error@plt>
   1120c:	b	111b8 <close@plt+0xd8>
   11210:	bl	10ef4 <gethostid@plt>
   11214:	ldr	r1, [pc, #68]	; 11260 <close@plt+0x180>
   11218:	add	r1, pc, r1
   1121c:	mov	r2, r0
   11220:	mov	r0, #1
   11224:	bl	11050 <__printf_chk@plt>
   11228:	mov	r0, r5
   1122c:	bl	10ffc <exit@plt>
   11230:	andeq	r3, r0, r8, lsr #2
   11234:	muleq	r0, ip, r1
   11238:	andeq	r3, r0, ip, asr #4
   1123c:			; <UNDEFINED> instruction: 0x00013eb4
   11240:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11244:	andeq	r0, r0, r8, ror #1
   11248:	andeq	r0, r0, r0, lsl #2
   1124c:	andeq	r3, r0, r8, lsr #4
   11250:	andeq	r3, r0, r4, lsl r2
   11254:	andeq	r3, r0, r4, lsr r1
   11258:	andeq	r0, r0, r4, ror #1
   1125c:	andeq	r3, r0, r4, asr #3
   11260:	andeq	r3, r0, r0, lsr #3
   11264:	mov	fp, #0
   11268:	mov	lr, #0
   1126c:	pop	{r1}		; (ldr r1, [sp], #4)
   11270:	mov	r2, sp
   11274:	push	{r2}		; (str r2, [sp, #-4]!)
   11278:	push	{r0}		; (str r0, [sp, #-4]!)
   1127c:	ldr	ip, [pc, #16]	; 11294 <close@plt+0x1b4>
   11280:	push	{ip}		; (str ip, [sp, #-4]!)
   11284:	ldr	r0, [pc, #12]	; 11298 <close@plt+0x1b8>
   11288:	ldr	r3, [pc, #12]	; 1129c <close@plt+0x1bc>
   1128c:	bl	10fc0 <__libc_start_main@plt>
   11290:	bl	110d4 <abort@plt>
   11294:	andeq	r4, r1, r4, ror r1
   11298:	andeq	r1, r1, ip, ror #1
   1129c:	andeq	r4, r1, r0, lsl r1
   112a0:	ldr	r3, [pc, #20]	; 112bc <close@plt+0x1dc>
   112a4:	ldr	r2, [pc, #20]	; 112c0 <close@plt+0x1e0>
   112a8:	add	r3, pc, r3
   112ac:	ldr	r2, [r3, r2]
   112b0:	cmp	r2, #0
   112b4:	bxeq	lr
   112b8:	b	10fd8 <__gmon_start__@plt>
   112bc:	andeq	r3, r1, r0, asr sp
   112c0:	strdeq	r0, [r0], -r4
   112c4:	push	{r3, lr}
   112c8:	movw	r0, #20840	; 0x5168
   112cc:	ldr	r3, [pc, #36]	; 112f8 <close@plt+0x218>
   112d0:	movt	r0, #2
   112d4:	rsb	r3, r0, r3
   112d8:	cmp	r3, #6
   112dc:	popls	{r3, pc}
   112e0:	movw	r3, #0
   112e4:	movt	r3, #0
   112e8:	cmp	r3, #0
   112ec:	popeq	{r3, pc}
   112f0:	blx	r3
   112f4:	pop	{r3, pc}
   112f8:	andeq	r5, r2, fp, ror #2
   112fc:	push	{r3, lr}
   11300:	movw	r0, #20840	; 0x5168
   11304:	movw	r3, #20840	; 0x5168
   11308:	movt	r0, #2
   1130c:	movt	r3, #2
   11310:	rsb	r3, r0, r3
   11314:	asr	r3, r3, #2
   11318:	add	r3, r3, r3, lsr #31
   1131c:	asrs	r1, r3, #1
   11320:	popeq	{r3, pc}
   11324:	movw	r2, #0
   11328:	movt	r2, #0
   1132c:	cmp	r2, #0
   11330:	popeq	{r3, pc}
   11334:	blx	r2
   11338:	pop	{r3, pc}
   1133c:	push	{r4, lr}
   11340:	movw	r4, #20840	; 0x5168
   11344:	movt	r4, #2
   11348:	ldrb	r3, [r4]
   1134c:	cmp	r3, #0
   11350:	popne	{r4, pc}
   11354:	bl	112c4 <close@plt+0x1e4>
   11358:	mov	r3, #1
   1135c:	strb	r3, [r4]
   11360:	pop	{r4, pc}
   11364:	movw	r0, #20144	; 0x4eb0
   11368:	movt	r0, #2
   1136c:	push	{r3, lr}
   11370:	ldr	r3, [r0]
   11374:	cmp	r3, #0
   11378:	beq	11390 <close@plt+0x2b0>
   1137c:	movw	r3, #0
   11380:	movt	r3, #0
   11384:	cmp	r3, #0
   11388:	beq	11390 <close@plt+0x2b0>
   1138c:	blx	r3
   11390:	pop	{r3, lr}
   11394:	b	112fc <close@plt+0x21c>

00011398 <usage@@Base>:
   11398:	push	{r4, r5, r6, lr}
   1139c:	subs	r4, r0, #0
   113a0:	ldr	r5, [pc, #372]	; 1151c <usage@@Base+0x184>
   113a4:	add	r5, pc, r5
   113a8:	beq	113f0 <usage@@Base+0x58>
   113ac:	ldr	r3, [pc, #364]	; 11520 <usage@@Base+0x188>
   113b0:	mov	r2, #5
   113b4:	ldr	r1, [pc, #360]	; 11524 <usage@@Base+0x18c>
   113b8:	mov	r0, #0
   113bc:	ldr	r3, [r5, r3]
   113c0:	add	r1, pc, r1
   113c4:	ldr	r6, [r3]
   113c8:	bl	10f0c <dcgettext@plt>
   113cc:	ldr	r3, [pc, #340]	; 11528 <usage@@Base+0x190>
   113d0:	mov	r1, #1
   113d4:	ldr	r3, [r5, r3]
   113d8:	ldr	r3, [r3]
   113dc:	mov	r2, r0
   113e0:	mov	r0, r6
   113e4:	bl	11068 <__fprintf_chk@plt>
   113e8:	mov	r0, r4
   113ec:	bl	10ffc <exit@plt>
   113f0:	ldr	r1, [pc, #308]	; 1152c <usage@@Base+0x194>
   113f4:	mov	r2, #5
   113f8:	add	r1, pc, r1
   113fc:	bl	10f0c <dcgettext@plt>
   11400:	ldr	r3, [pc, #288]	; 11528 <usage@@Base+0x190>
   11404:	ldr	r6, [r5, r3]
   11408:	ldr	r2, [r6]
   1140c:	mov	r1, r0
   11410:	mov	r0, #1
   11414:	bl	11050 <__printf_chk@plt>
   11418:	ldr	r1, [pc, #272]	; 11530 <usage@@Base+0x198>
   1141c:	mov	r2, #5
   11420:	mov	r0, r4
   11424:	add	r1, pc, r1
   11428:	bl	10f0c <dcgettext@plt>
   1142c:	ldr	r3, [pc, #256]	; 11534 <usage@@Base+0x19c>
   11430:	ldr	r5, [r5, r3]
   11434:	ldr	r1, [r5]
   11438:	bl	10e94 <fputs_unlocked@plt>
   1143c:	ldr	r1, [pc, #244]	; 11538 <usage@@Base+0x1a0>
   11440:	mov	r2, #5
   11444:	mov	r0, r4
   11448:	add	r1, pc, r1
   1144c:	bl	10f0c <dcgettext@plt>
   11450:	ldr	r1, [r5]
   11454:	bl	10e94 <fputs_unlocked@plt>
   11458:	ldr	r1, [pc, #220]	; 1153c <usage@@Base+0x1a4>
   1145c:	mov	r2, #5
   11460:	mov	r0, r4
   11464:	add	r1, pc, r1
   11468:	bl	10f0c <dcgettext@plt>
   1146c:	ldr	r2, [pc, #204]	; 11540 <usage@@Base+0x1a8>
   11470:	ldr	r3, [pc, #204]	; 11544 <usage@@Base+0x1ac>
   11474:	add	r2, pc, r2
   11478:	add	r3, pc, r3
   1147c:	mov	r1, r0
   11480:	mov	r0, #1
   11484:	bl	11050 <__printf_chk@plt>
   11488:	mov	r0, #5
   1148c:	mov	r1, r4
   11490:	bl	11098 <setlocale@plt>
   11494:	cmp	r0, #0
   11498:	beq	114b4 <usage@@Base+0x11c>
   1149c:	ldr	r1, [pc, #164]	; 11548 <usage@@Base+0x1b0>
   114a0:	mov	r2, #3
   114a4:	add	r1, pc, r1
   114a8:	bl	110c8 <strncmp@plt>
   114ac:	cmp	r0, #0
   114b0:	bne	114e8 <usage@@Base+0x150>
   114b4:	ldr	r1, [pc, #144]	; 1154c <usage@@Base+0x1b4>
   114b8:	mov	r2, #5
   114bc:	mov	r0, #0
   114c0:	add	r1, pc, r1
   114c4:	bl	10f0c <dcgettext@plt>
   114c8:	mov	r5, r0
   114cc:	ldr	r0, [r6]
   114d0:	bl	11694 <close_stdout@@Base+0x118>
   114d4:	mov	r1, r5
   114d8:	mov	r2, r0
   114dc:	mov	r0, #1
   114e0:	bl	11050 <__printf_chk@plt>
   114e4:	b	113e8 <usage@@Base+0x50>
   114e8:	ldr	r1, [pc, #96]	; 11550 <usage@@Base+0x1b8>
   114ec:	mov	r2, #5
   114f0:	mov	r0, r4
   114f4:	add	r1, pc, r1
   114f8:	bl	10f0c <dcgettext@plt>
   114fc:	mov	r5, r0
   11500:	ldr	r0, [r6]
   11504:	bl	11694 <close_stdout@@Base+0x118>
   11508:	mov	r1, r5
   1150c:	mov	r2, r0
   11510:	mov	r0, #1
   11514:	bl	11050 <__printf_chk@plt>
   11518:	b	114b4 <usage@@Base+0x11c>
   1151c:	andeq	r3, r1, r4, asr ip
   11520:	andeq	r0, r0, ip, ror #1
   11524:	andeq	r2, r0, ip, ror #27
   11528:	andeq	r0, r0, ip, lsl #2
   1152c:	ldrdeq	r2, [r0], -ip
   11530:	andeq	r2, r0, ip, lsl #28
   11534:	strdeq	r0, [r0], -ip
   11538:	andeq	r2, r0, r8, lsl lr
   1153c:	andeq	r2, r0, r4, lsr lr
   11540:	andeq	r2, r0, ip, lsr lr
   11544:	andeq	r2, r0, r8, asr #28
   11548:	andeq	r2, r0, r4, asr #28
   1154c:	andeq	r2, r0, r4, ror lr
   11550:	strdeq	r2, [r0], -r8
   11554:	ldr	r3, [pc, #8]	; 11564 <usage@@Base+0x1cc>
   11558:	add	r3, pc, r3
   1155c:	str	r0, [r3]
   11560:	bx	lr
   11564:	andeq	r3, r1, ip, lsl #24
   11568:	ldr	r3, [pc, #8]	; 11578 <usage@@Base+0x1e0>
   1156c:	add	r3, pc, r3
   11570:	strb	r0, [r3, #4]
   11574:	bx	lr
   11578:	strdeq	r3, [r1], -r8

0001157c <close_stdout@@Base>:
   1157c:	push	{r4, r5, r6, r7, lr}
   11580:	sub	sp, sp, #12
   11584:	ldr	r4, [pc, #228]	; 11670 <close_stdout@@Base+0xf4>
   11588:	ldr	r3, [pc, #228]	; 11674 <close_stdout@@Base+0xf8>
   1158c:	add	r4, pc, r4
   11590:	ldr	r3, [r4, r3]
   11594:	ldr	r0, [r3]
   11598:	bl	138ac <close_stdout@@Base+0x2330>
   1159c:	cmp	r0, #0
   115a0:	beq	115c8 <close_stdout@@Base+0x4c>
   115a4:	ldr	r3, [pc, #204]	; 11678 <close_stdout@@Base+0xfc>
   115a8:	add	r3, pc, r3
   115ac:	ldrb	r3, [r3, #4]
   115b0:	cmp	r3, #0
   115b4:	beq	115e8 <close_stdout@@Base+0x6c>
   115b8:	bl	11020 <__errno_location@plt>
   115bc:	ldr	r3, [r0]
   115c0:	cmp	r3, #32
   115c4:	bne	115e8 <close_stdout@@Base+0x6c>
   115c8:	ldr	r3, [pc, #172]	; 1167c <close_stdout@@Base+0x100>
   115cc:	ldr	r3, [r4, r3]
   115d0:	ldr	r0, [r3]
   115d4:	bl	138ac <close_stdout@@Base+0x2330>
   115d8:	cmp	r0, #0
   115dc:	bne	1163c <close_stdout@@Base+0xc0>
   115e0:	add	sp, sp, #12
   115e4:	pop	{r4, r5, r6, r7, pc}
   115e8:	ldr	r1, [pc, #144]	; 11680 <close_stdout@@Base+0x104>
   115ec:	mov	r0, #0
   115f0:	mov	r2, #5
   115f4:	add	r1, pc, r1
   115f8:	bl	10f0c <dcgettext@plt>
   115fc:	ldr	r3, [pc, #128]	; 11684 <close_stdout@@Base+0x108>
   11600:	ldr	r5, [pc, r3]
   11604:	cmp	r5, #0
   11608:	mov	r6, r0
   1160c:	beq	1164c <close_stdout@@Base+0xd0>
   11610:	bl	11020 <__errno_location@plt>
   11614:	ldr	r7, [r0]
   11618:	mov	r0, r5
   1161c:	bl	12f40 <close_stdout@@Base+0x19c4>
   11620:	ldr	r2, [pc, #96]	; 11688 <close_stdout@@Base+0x10c>
   11624:	str	r6, [sp]
   11628:	mov	r1, r7
   1162c:	add	r2, pc, r2
   11630:	mov	r3, r0
   11634:	mov	r0, #0
   11638:	bl	10f90 <error@plt>
   1163c:	ldr	r3, [pc, #72]	; 1168c <close_stdout@@Base+0x110>
   11640:	ldr	r3, [r4, r3]
   11644:	ldr	r0, [r3]
   11648:	bl	10ed0 <_exit@plt>
   1164c:	bl	11020 <__errno_location@plt>
   11650:	ldr	r2, [pc, #56]	; 11690 <close_stdout@@Base+0x114>
   11654:	add	r2, pc, r2
   11658:	mov	r3, r0
   1165c:	mov	r0, r5
   11660:	ldr	r1, [r3]
   11664:	mov	r3, r6
   11668:	bl	10f90 <error@plt>
   1166c:	b	1163c <close_stdout@@Base+0xc0>
   11670:	andeq	r3, r1, ip, ror #20
   11674:	strdeq	r0, [r0], -ip
   11678:			; <UNDEFINED> instruction: 0x00013bbc
   1167c:	andeq	r0, r0, ip, ror #1
   11680:	ldrdeq	r2, [r0], -r4
   11684:	andeq	r3, r1, r4, ror #22
   11688:	andeq	r2, r0, r8, lsr #27
   1168c:	andeq	r0, r0, r4, lsl #2
   11690:	andeq	r2, r0, r4, lsl #27
   11694:	ldrb	r3, [r0]
   11698:	cmp	r3, #47	; 0x2f
   1169c:	bne	116b8 <close_stdout@@Base+0x13c>
   116a0:	add	r2, r0, #1
   116a4:	mov	r0, r2
   116a8:	add	r2, r2, #1
   116ac:	ldrb	r3, [r0]
   116b0:	cmp	r3, #47	; 0x2f
   116b4:	beq	116a4 <close_stdout@@Base+0x128>
   116b8:	cmp	r3, #0
   116bc:	bxeq	lr
   116c0:	mov	r2, r0
   116c4:	mov	r1, #0
   116c8:	cmp	r3, #47	; 0x2f
   116cc:	moveq	r1, #1
   116d0:	beq	116e0 <close_stdout@@Base+0x164>
   116d4:	cmp	r1, #0
   116d8:	movne	r0, r2
   116dc:	movne	r1, #0
   116e0:	ldrb	r3, [r2, #1]!
   116e4:	cmp	r3, #0
   116e8:	bne	116c8 <close_stdout@@Base+0x14c>
   116ec:	bx	lr
   116f0:	push	{r4, lr}
   116f4:	mov	r4, r0
   116f8:	bl	11008 <strlen@plt>
   116fc:	cmp	r0, #1
   11700:	popls	{r4, pc}
   11704:	sub	r3, r0, #1
   11708:	ldrb	r2, [r4, r3]
   1170c:	cmp	r2, #47	; 0x2f
   11710:	popne	{r4, pc}
   11714:	mov	r0, r3
   11718:	cmp	r0, #1
   1171c:	sub	r3, r3, #1
   11720:	beq	11734 <close_stdout@@Base+0x1b8>
   11724:	ldrb	r2, [r4, r3]
   11728:	cmp	r2, #47	; 0x2f
   1172c:	popne	{r4, pc}
   11730:	b	11714 <close_stdout@@Base+0x198>
   11734:	pop	{r4, pc}
   11738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1173c:	mov	r9, r3
   11740:	ldr	r4, [pc, #224]	; 11828 <close_stdout@@Base+0x2ac>
   11744:	sub	sp, sp, #28
   11748:	ldr	ip, [pc, #220]	; 1182c <close_stdout@@Base+0x2b0>
   1174c:	cmp	r0, #2
   11750:	add	r4, pc, r4
   11754:	ldr	r5, [pc, #212]	; 11830 <close_stdout@@Base+0x2b4>
   11758:	mov	r7, #0
   1175c:	mov	sl, r2
   11760:	ldr	r6, [r4, ip]
   11764:	ldr	r8, [sp, #64]	; 0x40
   11768:	ldr	fp, [sp, #68]	; 0x44
   1176c:	ldr	r3, [r6]
   11770:	str	r3, [sp, #20]
   11774:	ldr	r5, [r4, r5]
   11778:	ldr	ip, [r5]
   1177c:	str	r7, [r5]
   11780:	beq	117b0 <close_stdout@@Base+0x234>
   11784:	ldr	r3, [pc, #168]	; 11834 <close_stdout@@Base+0x2b8>
   11788:	mov	r2, #0
   1178c:	ldr	r0, [sp, #20]
   11790:	ldr	r1, [r6]
   11794:	str	ip, [r5]
   11798:	ldr	r3, [r4, r3]
   1179c:	cmp	r0, r1
   117a0:	str	r2, [r3]
   117a4:	bne	11824 <close_stdout@@Base+0x2a8>
   117a8:	add	sp, sp, #28
   117ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117b0:	ldr	r2, [pc, #128]	; 11838 <close_stdout@@Base+0x2bc>
   117b4:	ldr	r3, [pc, #128]	; 1183c <close_stdout@@Base+0x2c0>
   117b8:	str	r7, [sp]
   117bc:	add	r2, pc, r2
   117c0:	add	r3, pc, r3
   117c4:	str	ip, [sp, #12]
   117c8:	bl	10fe4 <getopt_long@plt>
   117cc:	ldr	ip, [sp, #12]
   117d0:	cmn	r0, #1
   117d4:	beq	11784 <close_stdout@@Base+0x208>
   117d8:	cmp	r0, #104	; 0x68
   117dc:	beq	11818 <close_stdout@@Base+0x29c>
   117e0:	cmp	r0, #118	; 0x76
   117e4:	bne	11784 <close_stdout@@Base+0x208>
   117e8:	ldr	ip, [pc, #80]	; 11840 <close_stdout@@Base+0x2c4>
   117ec:	add	r0, sp, #72	; 0x48
   117f0:	str	r0, [sp, #16]
   117f4:	mov	r1, sl
   117f8:	mov	r2, r9
   117fc:	mov	r3, r8
   11800:	ldr	ip, [r4, ip]
   11804:	str	r0, [sp]
   11808:	ldr	r0, [ip]
   1180c:	bl	134b4 <close_stdout@@Base+0x1f38>
   11810:	mov	r0, #0
   11814:	bl	10ffc <exit@plt>
   11818:	mov	r0, r7
   1181c:	blx	fp
   11820:	b	117e8 <close_stdout@@Base+0x26c>
   11824:	bl	10f18 <__stack_chk_fail@plt>
   11828:	andeq	r3, r1, r8, lsr #17
   1182c:	andeq	r0, r0, r0, ror #1
   11830:	andeq	r0, r0, r4, lsl r1
   11834:	andeq	r0, r0, r4, ror #1
   11838:	andeq	r2, r0, r0, lsr #24
   1183c:	andeq	r3, r1, ip, ror #13
   11840:	strdeq	r0, [r0], -ip
   11844:	push	{r3, r4, r5, r6, r7, lr}
   11848:	subs	r4, r0, #0
   1184c:	ldr	r5, [pc, #172]	; 11900 <close_stdout@@Base+0x384>
   11850:	add	r5, pc, r5
   11854:	beq	118dc <close_stdout@@Base+0x360>
   11858:	mov	r1, #47	; 0x2f
   1185c:	bl	110a4 <strrchr@plt>
   11860:	subs	r6, r0, #0
   11864:	beq	118c0 <close_stdout@@Base+0x344>
   11868:	add	r7, r6, #1
   1186c:	rsb	r3, r4, r7
   11870:	cmp	r3, #6
   11874:	ble	118c0 <close_stdout@@Base+0x344>
   11878:	ldr	r1, [pc, #132]	; 11904 <close_stdout@@Base+0x388>
   1187c:	sub	r0, r6, #6
   11880:	mov	r2, #7
   11884:	add	r1, pc, r1
   11888:	bl	110c8 <strncmp@plt>
   1188c:	cmp	r0, #0
   11890:	bne	118c0 <close_stdout@@Base+0x344>
   11894:	ldr	r1, [pc, #108]	; 11908 <close_stdout@@Base+0x38c>
   11898:	mov	r0, r7
   1189c:	mov	r2, #3
   118a0:	add	r1, pc, r1
   118a4:	bl	110c8 <strncmp@plt>
   118a8:	cmp	r0, #0
   118ac:	movne	r4, r7
   118b0:	ldreq	r3, [pc, #84]	; 1190c <close_stdout@@Base+0x390>
   118b4:	addeq	r4, r6, #4
   118b8:	ldreq	r3, [r5, r3]
   118bc:	streq	r4, [r3]
   118c0:	ldr	r2, [pc, #72]	; 11910 <close_stdout@@Base+0x394>
   118c4:	ldr	r3, [pc, #72]	; 11914 <close_stdout@@Base+0x398>
   118c8:	ldr	r2, [r5, r2]
   118cc:	str	r4, [r2]
   118d0:	ldr	r3, [r5, r3]
   118d4:	str	r4, [r3]
   118d8:	pop	{r3, r4, r5, r6, r7, pc}
   118dc:	ldr	r3, [pc, #52]	; 11918 <close_stdout@@Base+0x39c>
   118e0:	mov	r1, #1
   118e4:	ldr	r0, [pc, #48]	; 1191c <close_stdout@@Base+0x3a0>
   118e8:	mov	r2, #55	; 0x37
   118ec:	ldr	r3, [r5, r3]
   118f0:	add	r0, pc, r0
   118f4:	ldr	r3, [r3]
   118f8:	bl	10f48 <fwrite@plt>
   118fc:	bl	110d4 <abort@plt>
   11900:	andeq	r3, r1, r8, lsr #15
   11904:	andeq	r2, r0, r4, lsr #23
   11908:	muleq	r0, r0, fp
   1190c:	andeq	r0, r0, r8, lsl r1
   11910:	andeq	r0, r0, ip, lsl #2
   11914:	andeq	r0, r0, r8, lsl #2
   11918:	andeq	r0, r0, ip, ror #1
   1191c:	andeq	r2, r0, r0, lsl #22
   11920:	push	{r3, lr}
   11924:	mov	r3, r0
   11928:	mov	r2, #0
   1192c:	cmp	r1, #8
   11930:	str	r2, [r3], #4
   11934:	add	r3, r3, #4
   11938:	str	r2, [r0, #4]
   1193c:	str	r2, [r3], #4
   11940:	str	r2, [r3], #4
   11944:	str	r2, [r3], #4
   11948:	str	r2, [r3], #4
   1194c:	str	r2, [r3], #4
   11950:	str	r2, [r3], #4
   11954:	str	r2, [r3], #4
   11958:	str	r2, [r3], #4
   1195c:	str	r2, [r3], #4
   11960:	str	r2, [r3]
   11964:	beq	11970 <close_stdout@@Base+0x3f4>
   11968:	str	r1, [r0]
   1196c:	pop	{r3, pc}
   11970:	bl	110d4 <abort@plt>
   11974:	push	{r4, r5, r6, lr}
   11978:	mov	r4, r0
   1197c:	mov	r6, r1
   11980:	mov	r0, #0
   11984:	mov	r1, r4
   11988:	mov	r2, #5
   1198c:	bl	10f0c <dcgettext@plt>
   11990:	cmp	r0, r4
   11994:	mov	r5, r0
   11998:	beq	119a0 <close_stdout@@Base+0x424>
   1199c:	pop	{r4, r5, r6, pc}
   119a0:	bl	1392c <close_stdout@@Base+0x23b0>
   119a4:	ldrb	r3, [r0]
   119a8:	bic	r3, r3, #32
   119ac:	cmp	r3, #85	; 0x55
   119b0:	bne	11a24 <close_stdout@@Base+0x4a8>
   119b4:	ldrb	r3, [r0, #1]
   119b8:	bic	r3, r3, #32
   119bc:	cmp	r3, #84	; 0x54
   119c0:	bne	11a10 <close_stdout@@Base+0x494>
   119c4:	ldrb	r3, [r0, #2]
   119c8:	bic	r3, r3, #32
   119cc:	cmp	r3, #70	; 0x46
   119d0:	bne	11a10 <close_stdout@@Base+0x494>
   119d4:	ldrb	r3, [r0, #3]
   119d8:	cmp	r3, #45	; 0x2d
   119dc:	bne	11a10 <close_stdout@@Base+0x494>
   119e0:	ldrb	r3, [r0, #4]
   119e4:	cmp	r3, #56	; 0x38
   119e8:	bne	11a10 <close_stdout@@Base+0x494>
   119ec:	ldrb	r3, [r0, #5]
   119f0:	cmp	r3, #0
   119f4:	bne	11a10 <close_stdout@@Base+0x494>
   119f8:	ldrb	r3, [r5]
   119fc:	cmp	r3, #96	; 0x60
   11a00:	beq	11a9c <close_stdout@@Base+0x520>
   11a04:	ldr	r0, [pc, #180]	; 11ac0 <close_stdout@@Base+0x544>
   11a08:	add	r0, pc, r0
   11a0c:	pop	{r4, r5, r6, pc}
   11a10:	cmp	r6, #7
   11a14:	beq	11aa8 <close_stdout@@Base+0x52c>
   11a18:	ldr	r0, [pc, #164]	; 11ac4 <close_stdout@@Base+0x548>
   11a1c:	add	r0, pc, r0
   11a20:	pop	{r4, r5, r6, pc}
   11a24:	cmp	r3, #71	; 0x47
   11a28:	bne	11a10 <close_stdout@@Base+0x494>
   11a2c:	ldrb	r3, [r0, #1]
   11a30:	bic	r3, r3, #32
   11a34:	cmp	r3, #66	; 0x42
   11a38:	bne	11a10 <close_stdout@@Base+0x494>
   11a3c:	ldrb	r3, [r0, #2]
   11a40:	cmp	r3, #49	; 0x31
   11a44:	bne	11a10 <close_stdout@@Base+0x494>
   11a48:	ldrb	r3, [r0, #3]
   11a4c:	cmp	r3, #56	; 0x38
   11a50:	bne	11a10 <close_stdout@@Base+0x494>
   11a54:	ldrb	r3, [r0, #4]
   11a58:	cmp	r3, #48	; 0x30
   11a5c:	bne	11a10 <close_stdout@@Base+0x494>
   11a60:	ldrb	r3, [r0, #5]
   11a64:	cmp	r3, #51	; 0x33
   11a68:	bne	11a10 <close_stdout@@Base+0x494>
   11a6c:	ldrb	r3, [r0, #6]
   11a70:	cmp	r3, #48	; 0x30
   11a74:	bne	11a10 <close_stdout@@Base+0x494>
   11a78:	ldrb	r3, [r0, #7]
   11a7c:	cmp	r3, #0
   11a80:	bne	11a10 <close_stdout@@Base+0x494>
   11a84:	ldrb	r3, [r5]
   11a88:	cmp	r3, #96	; 0x60
   11a8c:	beq	11ab4 <close_stdout@@Base+0x538>
   11a90:	ldr	r0, [pc, #48]	; 11ac8 <close_stdout@@Base+0x54c>
   11a94:	add	r0, pc, r0
   11a98:	pop	{r4, r5, r6, pc}
   11a9c:	ldr	r0, [pc, #40]	; 11acc <close_stdout@@Base+0x550>
   11aa0:	add	r0, pc, r0
   11aa4:	pop	{r4, r5, r6, pc}
   11aa8:	ldr	r0, [pc, #32]	; 11ad0 <close_stdout@@Base+0x554>
   11aac:	add	r0, pc, r0
   11ab0:	pop	{r4, r5, r6, pc}
   11ab4:	ldr	r0, [pc, #24]	; 11ad4 <close_stdout@@Base+0x558>
   11ab8:	add	r0, pc, r0
   11abc:	pop	{r4, r5, r6, pc}
   11ac0:	andeq	r2, r0, ip, asr #20
   11ac4:	andeq	r2, r0, r0, asr #20
   11ac8:	andeq	r2, r0, r4, asr #19
   11acc:	andeq	r2, r0, r8, asr #19
   11ad0:			; <UNDEFINED> instruction: 0x000029b4
   11ad4:	andeq	r2, r0, ip, lsr #19
   11ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11adc:	sub	sp, sp, #124	; 0x7c
   11ae0:	ldr	ip, [pc, #3304]	; 127d0 <close_stdout@@Base+0x1254>
   11ae4:	mov	sl, r1
   11ae8:	str	r0, [sp, #40]	; 0x28
   11aec:	mov	r8, r3
   11af0:	ldr	r0, [pc, #3292]	; 127d4 <close_stdout@@Base+0x1258>
   11af4:	add	ip, pc, ip
   11af8:	str	r2, [sp, #32]
   11afc:	ldr	r1, [sp, #164]	; 0xa4
   11b00:	mov	r3, ip
   11b04:	ldr	r0, [ip, r0]
   11b08:	ldr	r2, [sp, #172]	; 0xac
   11b0c:	ubfx	r1, r1, #1, #1
   11b10:	str	r1, [sp, #36]	; 0x24
   11b14:	str	r0, [sp, #56]	; 0x38
   11b18:	ldr	r0, [sp, #168]	; 0xa8
   11b1c:	ldr	r1, [sp, #176]	; 0xb0
   11b20:	str	r2, [sp, #72]	; 0x48
   11b24:	str	r0, [sp, #48]	; 0x30
   11b28:	ldr	r0, [sp, #56]	; 0x38
   11b2c:	str	r1, [sp, #68]	; 0x44
   11b30:	ldr	r3, [r0]
   11b34:	str	r3, [sp, #116]	; 0x74
   11b38:	bl	10f60 <__ctype_get_mb_cur_max@plt>
   11b3c:	ldr	r2, [sp, #160]	; 0xa0
   11b40:	str	r0, [sp, #64]	; 0x40
   11b44:	cmp	r2, #8
   11b48:	addls	pc, pc, r2, lsl #2
   11b4c:	b	126ac <close_stdout@@Base+0x1130>
   11b50:	b	11b74 <close_stdout@@Base+0x5f8>
   11b54:	b	123c4 <close_stdout@@Base+0xe48>
   11b58:	b	123f4 <close_stdout@@Base+0xe78>
   11b5c:	b	122a4 <close_stdout@@Base+0xd28>
   11b60:	b	122e4 <close_stdout@@Base+0xd68>
   11b64:	b	12310 <close_stdout@@Base+0xd94>
   11b68:	b	12330 <close_stdout@@Base+0xdb4>
   11b6c:	b	12330 <close_stdout@@Base+0xdb4>
   11b70:	b	12330 <close_stdout@@Base+0xdb4>
   11b74:	mov	r2, #0
   11b78:	str	r2, [sp, #36]	; 0x24
   11b7c:	mov	r9, r2
   11b80:	str	r2, [sp, #24]
   11b84:	str	r2, [sp, #28]
   11b88:	str	r2, [sp, #52]	; 0x34
   11b8c:	ldr	r0, [sp, #36]	; 0x24
   11b90:	mov	fp, #0
   11b94:	ldr	r1, [sp, #24]
   11b98:	eor	r2, r0, #1
   11b9c:	eor	r3, r1, #1
   11ba0:	and	r3, r2, r3
   11ba4:	and	r2, r1, r0
   11ba8:	str	r3, [sp, #44]	; 0x2c
   11bac:	str	r2, [sp, #76]	; 0x4c
   11bb0:	cmn	r8, #1
   11bb4:	beq	11f34 <close_stdout@@Base+0x9b8>
   11bb8:	subs	r3, fp, r8
   11bbc:	movne	r3, #1
   11bc0:	cmp	r3, #0
   11bc4:	beq	11f4c <close_stdout@@Base+0x9d0>
   11bc8:	ldr	r3, [sp, #28]
   11bcc:	ldr	r0, [sp, #24]
   11bd0:	adds	r7, r3, #0
   11bd4:	movne	r7, #1
   11bd8:	ands	r6, r7, r0
   11bdc:	bne	12438 <close_stdout@@Base+0xebc>
   11be0:	ldr	r1, [sp, #32]
   11be4:	add	r5, r1, fp
   11be8:	ldrb	r4, [r5]
   11bec:	cmp	r4, #126	; 0x7e
   11bf0:	addls	pc, pc, r4, lsl #2
   11bf4:	b	121b8 <close_stdout@@Base+0xc3c>
   11bf8:	b	120c4 <close_stdout@@Base+0xb48>
   11bfc:	b	121b8 <close_stdout@@Base+0xc3c>
   11c00:	b	121b8 <close_stdout@@Base+0xc3c>
   11c04:	b	121b8 <close_stdout@@Base+0xc3c>
   11c08:	b	121b8 <close_stdout@@Base+0xc3c>
   11c0c:	b	121b8 <close_stdout@@Base+0xc3c>
   11c10:	b	121b8 <close_stdout@@Base+0xc3c>
   11c14:	b	120ac <close_stdout@@Base+0xb30>
   11c18:	b	12094 <close_stdout@@Base+0xb18>
   11c1c:	b	120bc <close_stdout@@Base+0xb40>
   11c20:	b	120b4 <close_stdout@@Base+0xb38>
   11c24:	b	120a4 <close_stdout@@Base+0xb28>
   11c28:	b	1209c <close_stdout@@Base+0xb20>
   11c2c:	b	12060 <close_stdout@@Base+0xae4>
   11c30:	b	121b8 <close_stdout@@Base+0xc3c>
   11c34:	b	121b8 <close_stdout@@Base+0xc3c>
   11c38:	b	121b8 <close_stdout@@Base+0xc3c>
   11c3c:	b	121b8 <close_stdout@@Base+0xc3c>
   11c40:	b	121b8 <close_stdout@@Base+0xc3c>
   11c44:	b	121b8 <close_stdout@@Base+0xc3c>
   11c48:	b	121b8 <close_stdout@@Base+0xc3c>
   11c4c:	b	121b8 <close_stdout@@Base+0xc3c>
   11c50:	b	121b8 <close_stdout@@Base+0xc3c>
   11c54:	b	121b8 <close_stdout@@Base+0xc3c>
   11c58:	b	121b8 <close_stdout@@Base+0xc3c>
   11c5c:	b	121b8 <close_stdout@@Base+0xc3c>
   11c60:	b	121b8 <close_stdout@@Base+0xc3c>
   11c64:	b	121b8 <close_stdout@@Base+0xc3c>
   11c68:	b	121b8 <close_stdout@@Base+0xc3c>
   11c6c:	b	121b8 <close_stdout@@Base+0xc3c>
   11c70:	b	121b8 <close_stdout@@Base+0xc3c>
   11c74:	b	121b8 <close_stdout@@Base+0xc3c>
   11c78:	b	11fec <close_stdout@@Base+0xa70>
   11c7c:	b	11fec <close_stdout@@Base+0xa70>
   11c80:	b	11fec <close_stdout@@Base+0xa70>
   11c84:	b	11fe4 <close_stdout@@Base+0xa68>
   11c88:	b	11fec <close_stdout@@Base+0xa70>
   11c8c:	b	11ec0 <close_stdout@@Base+0x944>
   11c90:	b	11fec <close_stdout@@Base+0xa70>
   11c94:	b	12160 <close_stdout@@Base+0xbe4>
   11c98:	b	11fec <close_stdout@@Base+0xa70>
   11c9c:	b	11fec <close_stdout@@Base+0xa70>
   11ca0:	b	11fec <close_stdout@@Base+0xa70>
   11ca4:	b	11ec0 <close_stdout@@Base+0x944>
   11ca8:	b	11ec0 <close_stdout@@Base+0x944>
   11cac:	b	11ec0 <close_stdout@@Base+0x944>
   11cb0:	b	11ec0 <close_stdout@@Base+0x944>
   11cb4:	b	11ec0 <close_stdout@@Base+0x944>
   11cb8:	b	11ec0 <close_stdout@@Base+0x944>
   11cbc:	b	11ec0 <close_stdout@@Base+0x944>
   11cc0:	b	11ec0 <close_stdout@@Base+0x944>
   11cc4:	b	11ec0 <close_stdout@@Base+0x944>
   11cc8:	b	11ec0 <close_stdout@@Base+0x944>
   11ccc:	b	11ec0 <close_stdout@@Base+0x944>
   11cd0:	b	11ec0 <close_stdout@@Base+0x944>
   11cd4:	b	11ec0 <close_stdout@@Base+0x944>
   11cd8:	b	11ec0 <close_stdout@@Base+0x944>
   11cdc:	b	11ec0 <close_stdout@@Base+0x944>
   11ce0:	b	11ec0 <close_stdout@@Base+0x944>
   11ce4:	b	11fec <close_stdout@@Base+0xa70>
   11ce8:	b	11fec <close_stdout@@Base+0xa70>
   11cec:	b	11fec <close_stdout@@Base+0xa70>
   11cf0:	b	11fec <close_stdout@@Base+0xa70>
   11cf4:	b	11df4 <close_stdout@@Base+0x878>
   11cf8:	b	121b8 <close_stdout@@Base+0xc3c>
   11cfc:	b	11ec0 <close_stdout@@Base+0x944>
   11d00:	b	11ec0 <close_stdout@@Base+0x944>
   11d04:	b	11ec0 <close_stdout@@Base+0x944>
   11d08:	b	11ec0 <close_stdout@@Base+0x944>
   11d0c:	b	11ec0 <close_stdout@@Base+0x944>
   11d10:	b	11ec0 <close_stdout@@Base+0x944>
   11d14:	b	11ec0 <close_stdout@@Base+0x944>
   11d18:	b	11ec0 <close_stdout@@Base+0x944>
   11d1c:	b	11ec0 <close_stdout@@Base+0x944>
   11d20:	b	11ec0 <close_stdout@@Base+0x944>
   11d24:	b	11ec0 <close_stdout@@Base+0x944>
   11d28:	b	11ec0 <close_stdout@@Base+0x944>
   11d2c:	b	11ec0 <close_stdout@@Base+0x944>
   11d30:	b	11ec0 <close_stdout@@Base+0x944>
   11d34:	b	11ec0 <close_stdout@@Base+0x944>
   11d38:	b	11ec0 <close_stdout@@Base+0x944>
   11d3c:	b	11ec0 <close_stdout@@Base+0x944>
   11d40:	b	11ec0 <close_stdout@@Base+0x944>
   11d44:	b	11ec0 <close_stdout@@Base+0x944>
   11d48:	b	11ec0 <close_stdout@@Base+0x944>
   11d4c:	b	11ec0 <close_stdout@@Base+0x944>
   11d50:	b	11ec0 <close_stdout@@Base+0x944>
   11d54:	b	11ec0 <close_stdout@@Base+0x944>
   11d58:	b	11ec0 <close_stdout@@Base+0x944>
   11d5c:	b	11ec0 <close_stdout@@Base+0x944>
   11d60:	b	11ec0 <close_stdout@@Base+0x944>
   11d64:	b	11fec <close_stdout@@Base+0xa70>
   11d68:	b	12144 <close_stdout@@Base+0xbc8>
   11d6c:	b	11ec0 <close_stdout@@Base+0x944>
   11d70:	b	11fec <close_stdout@@Base+0xa70>
   11d74:	b	11ec0 <close_stdout@@Base+0x944>
   11d78:	b	11fec <close_stdout@@Base+0xa70>
   11d7c:	b	11ec0 <close_stdout@@Base+0x944>
   11d80:	b	11ec0 <close_stdout@@Base+0x944>
   11d84:	b	11ec0 <close_stdout@@Base+0x944>
   11d88:	b	11ec0 <close_stdout@@Base+0x944>
   11d8c:	b	11ec0 <close_stdout@@Base+0x944>
   11d90:	b	11ec0 <close_stdout@@Base+0x944>
   11d94:	b	11ec0 <close_stdout@@Base+0x944>
   11d98:	b	11ec0 <close_stdout@@Base+0x944>
   11d9c:	b	11ec0 <close_stdout@@Base+0x944>
   11da0:	b	11ec0 <close_stdout@@Base+0x944>
   11da4:	b	11ec0 <close_stdout@@Base+0x944>
   11da8:	b	11ec0 <close_stdout@@Base+0x944>
   11dac:	b	11ec0 <close_stdout@@Base+0x944>
   11db0:	b	11ec0 <close_stdout@@Base+0x944>
   11db4:	b	11ec0 <close_stdout@@Base+0x944>
   11db8:	b	11ec0 <close_stdout@@Base+0x944>
   11dbc:	b	11ec0 <close_stdout@@Base+0x944>
   11dc0:	b	11ec0 <close_stdout@@Base+0x944>
   11dc4:	b	11ec0 <close_stdout@@Base+0x944>
   11dc8:	b	11ec0 <close_stdout@@Base+0x944>
   11dcc:	b	11ec0 <close_stdout@@Base+0x944>
   11dd0:	b	11ec0 <close_stdout@@Base+0x944>
   11dd4:	b	11ec0 <close_stdout@@Base+0x944>
   11dd8:	b	11ec0 <close_stdout@@Base+0x944>
   11ddc:	b	11ec0 <close_stdout@@Base+0x944>
   11de0:	b	11ec0 <close_stdout@@Base+0x944>
   11de4:	b	11fcc <close_stdout@@Base+0xa50>
   11de8:	b	11fec <close_stdout@@Base+0xa70>
   11dec:	b	11fcc <close_stdout@@Base+0xa50>
   11df0:	b	11fe4 <close_stdout@@Base+0xa68>
   11df4:	ldr	r3, [sp, #160]	; 0xa0
   11df8:	cmp	r3, #2
   11dfc:	beq	12688 <close_stdout@@Base+0x110c>
   11e00:	cmp	r3, #3
   11e04:	bne	11ec0 <close_stdout@@Base+0x944>
   11e08:	ldr	r1, [sp, #164]	; 0xa4
   11e0c:	tst	r1, #4
   11e10:	beq	11ec0 <close_stdout@@Base+0x944>
   11e14:	add	r3, fp, #2
   11e18:	cmp	r8, r3
   11e1c:	bls	11ec0 <close_stdout@@Base+0x944>
   11e20:	ldrb	r2, [r5, #1]
   11e24:	mov	r1, #1
   11e28:	cmp	r2, #63	; 0x3f
   11e2c:	bne	11ec0 <close_stdout@@Base+0x944>
   11e30:	ldr	r0, [sp, #32]
   11e34:	ldrb	ip, [r0, r3]
   11e38:	sub	r0, ip, #33	; 0x21
   11e3c:	uxtb	r0, r0
   11e40:	cmp	r0, #29
   11e44:	bhi	11ec0 <close_stdout@@Base+0x944>
   11e48:	lsl	r1, r1, r0
   11e4c:	movw	r0, #20929	; 0x51c1
   11e50:	movt	r0, #14336	; 0x3800
   11e54:	and	r0, r1, r0
   11e58:	cmp	r0, #0
   11e5c:	beq	11ec0 <close_stdout@@Base+0x944>
   11e60:	ldr	r1, [sp, #36]	; 0x24
   11e64:	cmp	r1, #0
   11e68:	bne	12008 <close_stdout@@Base+0xa8c>
   11e6c:	cmp	r9, sl
   11e70:	mov	r4, ip
   11e74:	mov	fp, r3
   11e78:	ldrcc	r0, [sp, #40]	; 0x28
   11e7c:	strbcc	r2, [r0, r9]
   11e80:	add	r2, r9, #1
   11e84:	cmp	sl, r2
   11e88:	ldrhi	r0, [sp, #40]	; 0x28
   11e8c:	movhi	r1, #34	; 0x22
   11e90:	strbhi	r1, [r0, r2]
   11e94:	add	r2, r9, #2
   11e98:	cmp	sl, r2
   11e9c:	ldrhi	r0, [sp, #40]	; 0x28
   11ea0:	movhi	r1, #34	; 0x22
   11ea4:	strbhi	r1, [r0, r2]
   11ea8:	add	r2, r9, #3
   11eac:	cmp	sl, r2
   11eb0:	add	r9, r9, #4
   11eb4:	ldrhi	r0, [sp, #40]	; 0x28
   11eb8:	movhi	r1, #63	; 0x3f
   11ebc:	strbhi	r1, [r0, r2]
   11ec0:	ldr	r0, [sp, #44]	; 0x2c
   11ec4:	cmp	r0, #0
   11ec8:	bne	11ef0 <close_stdout@@Base+0x974>
   11ecc:	ldr	r1, [sp, #48]	; 0x30
   11ed0:	cmp	r1, #0
   11ed4:	beq	11ef0 <close_stdout@@Base+0x974>
   11ed8:	ubfx	r2, r4, #5, #8
   11edc:	and	r3, r4, #31
   11ee0:	ldr	r2, [r1, r2, lsl #2]
   11ee4:	lsr	r3, r2, r3
   11ee8:	tst	r3, #1
   11eec:	bne	11ef8 <close_stdout@@Base+0x97c>
   11ef0:	cmp	r6, #0
   11ef4:	beq	11f18 <close_stdout@@Base+0x99c>
   11ef8:	ldr	r2, [sp, #36]	; 0x24
   11efc:	cmp	r2, #0
   11f00:	bne	12008 <close_stdout@@Base+0xa8c>
   11f04:	cmp	r9, sl
   11f08:	ldrcc	r0, [sp, #40]	; 0x28
   11f0c:	movcc	r3, #92	; 0x5c
   11f10:	strbcc	r3, [r0, r9]
   11f14:	add	r9, r9, #1
   11f18:	add	fp, fp, #1
   11f1c:	cmp	r9, sl
   11f20:	ldrcc	r1, [sp, #40]	; 0x28
   11f24:	strbcc	r4, [r1, r9]
   11f28:	cmn	r8, #1
   11f2c:	add	r9, r9, #1
   11f30:	bne	11bb8 <close_stdout@@Base+0x63c>
   11f34:	ldr	r2, [sp, #32]
   11f38:	ldrb	r3, [r2, fp]
   11f3c:	adds	r3, r3, #0
   11f40:	movne	r3, #1
   11f44:	cmp	r3, #0
   11f48:	bne	11bc8 <close_stdout@@Base+0x64c>
   11f4c:	ldr	r3, [sp, #160]	; 0xa0
   11f50:	cmp	r9, #0
   11f54:	cmpeq	r3, #2
   11f58:	bne	11f68 <close_stdout@@Base+0x9ec>
   11f5c:	ldr	r0, [sp, #36]	; 0x24
   11f60:	cmp	r0, #0
   11f64:	bne	12008 <close_stdout@@Base+0xa8c>
   11f68:	ldr	r1, [sp, #36]	; 0x24
   11f6c:	ldr	r2, [sp, #52]	; 0x34
   11f70:	eor	r3, r1, #1
   11f74:	cmp	r2, #0
   11f78:	moveq	r3, #0
   11f7c:	andne	r3, r3, #1
   11f80:	cmp	r3, #0
   11f84:	beq	11fb0 <close_stdout@@Base+0xa34>
   11f88:	ldrb	r3, [r2]
   11f8c:	cmp	r3, #0
   11f90:	beq	11fb0 <close_stdout@@Base+0xa34>
   11f94:	ldr	r1, [sp, #40]	; 0x28
   11f98:	cmp	sl, r9
   11f9c:	strbhi	r3, [r1, r9]
   11fa0:	ldrb	r3, [r2, #1]!
   11fa4:	add	r9, r9, #1
   11fa8:	cmp	r3, #0
   11fac:	bne	11f98 <close_stdout@@Base+0xa1c>
   11fb0:	cmp	r9, sl
   11fb4:	movcs	r0, r9
   11fb8:	ldrcc	r1, [sp, #40]	; 0x28
   11fbc:	movcc	r3, #0
   11fc0:	movcc	r0, r9
   11fc4:	strbcc	r3, [r1, r9]
   11fc8:	b	12044 <close_stdout@@Base+0xac8>
   11fcc:	cmn	r8, #1
   11fd0:	beq	12698 <close_stdout@@Base+0x111c>
   11fd4:	subs	r3, r8, #1
   11fd8:	movne	r3, #1
   11fdc:	cmp	r3, #0
   11fe0:	bne	11ec0 <close_stdout@@Base+0x944>
   11fe4:	cmp	fp, #0
   11fe8:	bne	11ec0 <close_stdout@@Base+0x944>
   11fec:	ldr	r3, [sp, #36]	; 0x24
   11ff0:	ldr	r0, [sp, #160]	; 0xa0
   11ff4:	cmp	r0, #2
   11ff8:	movne	r3, #0
   11ffc:	andeq	r3, r3, #1
   12000:	cmp	r3, #0
   12004:	beq	11ec0 <close_stdout@@Base+0x944>
   12008:	ldr	r2, [sp, #164]	; 0xa4
   1200c:	mov	ip, #0
   12010:	ldr	r0, [sp, #160]	; 0xa0
   12014:	bic	r3, r2, #2
   12018:	ldr	r1, [sp, #72]	; 0x48
   1201c:	ldr	r2, [sp, #68]	; 0x44
   12020:	stm	sp, {r0, r3}
   12024:	mov	r3, r8
   12028:	str	r1, [sp, #12]
   1202c:	mov	r1, sl
   12030:	str	r2, [sp, #16]
   12034:	ldr	r0, [sp, #40]	; 0x28
   12038:	ldr	r2, [sp, #32]
   1203c:	str	ip, [sp, #8]
   12040:	bl	11ad8 <close_stdout@@Base+0x55c>
   12044:	ldr	r1, [sp, #56]	; 0x38
   12048:	ldr	r2, [sp, #116]	; 0x74
   1204c:	ldr	r3, [r1]
   12050:	cmp	r2, r3
   12054:	bne	12788 <close_stdout@@Base+0x120c>
   12058:	add	sp, sp, #124	; 0x7c
   1205c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12060:	mov	r3, #114	; 0x72
   12064:	ldr	r2, [sp, #36]	; 0x24
   12068:	ldr	r0, [sp, #160]	; 0xa0
   1206c:	cmp	r0, #2
   12070:	movne	r2, #0
   12074:	andeq	r2, r2, #1
   12078:	cmp	r2, #0
   1207c:	bne	12008 <close_stdout@@Base+0xa8c>
   12080:	ldr	r1, [sp, #24]
   12084:	cmp	r1, #0
   12088:	beq	11ec0 <close_stdout@@Base+0x944>
   1208c:	mov	r4, r3
   12090:	b	11ef8 <close_stdout@@Base+0x97c>
   12094:	mov	r3, #98	; 0x62
   12098:	b	12080 <close_stdout@@Base+0xb04>
   1209c:	mov	r3, #102	; 0x66
   120a0:	b	12080 <close_stdout@@Base+0xb04>
   120a4:	mov	r3, #118	; 0x76
   120a8:	b	12080 <close_stdout@@Base+0xb04>
   120ac:	mov	r3, #97	; 0x61
   120b0:	b	12080 <close_stdout@@Base+0xb04>
   120b4:	mov	r3, #110	; 0x6e
   120b8:	b	12064 <close_stdout@@Base+0xae8>
   120bc:	mov	r3, #116	; 0x74
   120c0:	b	12064 <close_stdout@@Base+0xae8>
   120c4:	ldr	r2, [sp, #24]
   120c8:	cmp	r2, #0
   120cc:	beq	12674 <close_stdout@@Base+0x10f8>
   120d0:	ldr	r3, [sp, #36]	; 0x24
   120d4:	cmp	r3, #0
   120d8:	bne	12008 <close_stdout@@Base+0xa8c>
   120dc:	cmp	r9, sl
   120e0:	add	r2, r9, #1
   120e4:	ldrcc	r0, [sp, #40]	; 0x28
   120e8:	movcc	r3, #92	; 0x5c
   120ec:	strbcc	r3, [r0, r9]
   120f0:	add	r3, fp, #1
   120f4:	cmp	r8, r3
   120f8:	bls	12138 <close_stdout@@Base+0xbbc>
   120fc:	ldr	r1, [sp, #32]
   12100:	ldrb	r3, [r1, r3]
   12104:	sub	r3, r3, #48	; 0x30
   12108:	cmp	r3, #9
   1210c:	bhi	12138 <close_stdout@@Base+0xbbc>
   12110:	cmp	sl, r2
   12114:	ldrhi	r0, [sp, #40]	; 0x28
   12118:	movhi	r3, #48	; 0x30
   1211c:	strbhi	r3, [r0, r2]
   12120:	add	r3, r9, #2
   12124:	cmp	sl, r3
   12128:	ldrhi	r1, [sp, #40]	; 0x28
   1212c:	movhi	r2, #48	; 0x30
   12130:	strbhi	r2, [r1, r3]
   12134:	add	r2, r9, #3
   12138:	mov	r9, r2
   1213c:	mov	r4, #48	; 0x30
   12140:	b	11ecc <close_stdout@@Base+0x950>
   12144:	ldr	r1, [sp, #76]	; 0x4c
   12148:	cmp	r1, #0
   1214c:	beq	12158 <close_stdout@@Base+0xbdc>
   12150:	cmp	r7, #0
   12154:	bne	11f18 <close_stdout@@Base+0x99c>
   12158:	mov	r3, r4
   1215c:	b	12064 <close_stdout@@Base+0xae8>
   12160:	ldr	r1, [sp, #160]	; 0xa0
   12164:	cmp	r1, #2
   12168:	bne	11ec0 <close_stdout@@Base+0x944>
   1216c:	ldr	r2, [sp, #36]	; 0x24
   12170:	cmp	r2, #0
   12174:	bne	12008 <close_stdout@@Base+0xa8c>
   12178:	cmp	r9, sl
   1217c:	ldrcc	r0, [sp, #40]	; 0x28
   12180:	movcc	r3, #39	; 0x27
   12184:	strbcc	r3, [r0, r9]
   12188:	add	r3, r9, #1
   1218c:	cmp	sl, r3
   12190:	ldrhi	r1, [sp, #40]	; 0x28
   12194:	movhi	r2, #92	; 0x5c
   12198:	strbhi	r2, [r1, r3]
   1219c:	add	r3, r9, #2
   121a0:	cmp	sl, r3
   121a4:	add	r9, r9, #3
   121a8:	ldrhi	r0, [sp, #40]	; 0x28
   121ac:	movhi	r2, #39	; 0x27
   121b0:	strbhi	r2, [r0, r3]
   121b4:	b	11ec0 <close_stdout@@Base+0x944>
   121b8:	ldr	r1, [sp, #64]	; 0x40
   121bc:	cmp	r1, #1
   121c0:	bne	124b8 <close_stdout@@Base+0xf3c>
   121c4:	bl	10ff0 <__ctype_b_loc@plt>
   121c8:	ldr	r2, [sp, #64]	; 0x40
   121cc:	sxth	r3, r4
   121d0:	str	r2, [sp, #60]	; 0x3c
   121d4:	lsl	r3, r3, #1
   121d8:	ldr	r2, [r0]
   121dc:	ldrh	r2, [r2, r3]
   121e0:	eor	r2, r2, #16384	; 0x4000
   121e4:	ubfx	r2, r2, #14, #1
   121e8:	ldr	r1, [sp, #24]
   121ec:	ands	r2, r2, r1
   121f0:	beq	11ec0 <close_stdout@@Base+0x944>
   121f4:	ldr	r3, [sp, #60]	; 0x3c
   121f8:	mov	r0, #92	; 0x5c
   121fc:	ldr	r7, [sp, #36]	; 0x24
   12200:	add	r1, r3, fp
   12204:	str	r8, [sp, #60]	; 0x3c
   12208:	ldr	r3, [sp, #40]	; 0x28
   1220c:	b	12270 <close_stdout@@Base+0xcf4>
   12210:	cmp	r7, #0
   12214:	bne	126b0 <close_stdout@@Base+0x1134>
   12218:	add	ip, r9, #1
   1221c:	cmp	r9, sl
   12220:	strbcc	r0, [r3, r9]
   12224:	cmp	sl, ip
   12228:	lsrhi	r8, r4, #6
   1222c:	addhi	r8, r8, #48	; 0x30
   12230:	strbhi	r8, [r3, ip]
   12234:	add	ip, r9, #2
   12238:	add	r9, r9, #3
   1223c:	cmp	sl, ip
   12240:	ubfxhi	r8, r4, #3, #3
   12244:	and	r4, r4, #7
   12248:	add	r4, r4, #48	; 0x30
   1224c:	addhi	r8, r8, #48	; 0x30
   12250:	strbhi	r8, [r3, ip]
   12254:	add	fp, fp, #1
   12258:	cmp	r1, fp
   1225c:	bls	1229c <close_stdout@@Base+0xd20>
   12260:	cmp	r9, sl
   12264:	strbcc	r4, [r3, r9]
   12268:	ldrb	r4, [r5, #1]!
   1226c:	add	r9, r9, #1
   12270:	cmp	r2, #0
   12274:	bne	12210 <close_stdout@@Base+0xc94>
   12278:	cmp	r6, #0
   1227c:	beq	12254 <close_stdout@@Base+0xcd8>
   12280:	add	fp, fp, #1
   12284:	cmp	r9, sl
   12288:	strbcc	r0, [r3, r9]
   1228c:	cmp	r1, fp
   12290:	add	r9, r9, #1
   12294:	mov	r6, #0
   12298:	bhi	12260 <close_stdout@@Base+0xce4>
   1229c:	ldr	r8, [sp, #60]	; 0x3c
   122a0:	b	11f1c <close_stdout@@Base+0x9a0>
   122a4:	ldr	r3, [sp, #36]	; 0x24
   122a8:	cmp	r3, #0
   122ac:	bne	127b0 <close_stdout@@Base+0x1234>
   122b0:	cmp	sl, #0
   122b4:	beq	126c8 <close_stdout@@Base+0x114c>
   122b8:	ldr	r1, [sp, #40]	; 0x28
   122bc:	mov	r0, #1
   122c0:	ldr	r2, [pc, #1296]	; 127d8 <close_stdout@@Base+0x125c>
   122c4:	mov	r3, #34	; 0x22
   122c8:	str	r0, [sp, #24]
   122cc:	mov	r9, r0
   122d0:	add	r2, pc, r2
   122d4:	str	r0, [sp, #28]
   122d8:	strb	r3, [r1]
   122dc:	str	r2, [sp, #52]	; 0x34
   122e0:	b	11b8c <close_stdout@@Base+0x610>
   122e4:	ldr	r3, [pc, #1264]	; 127dc <close_stdout@@Base+0x1260>
   122e8:	mov	r2, #1
   122ec:	mov	r0, #3
   122f0:	str	r2, [sp, #36]	; 0x24
   122f4:	add	r3, pc, r3
   122f8:	str	r2, [sp, #24]
   122fc:	str	r3, [sp, #52]	; 0x34
   12300:	mov	r9, #0
   12304:	str	r2, [sp, #28]
   12308:	str	r0, [sp, #160]	; 0xa0
   1230c:	b	11b8c <close_stdout@@Base+0x610>
   12310:	mov	r0, #0
   12314:	mov	r1, #1
   12318:	str	r0, [sp, #36]	; 0x24
   1231c:	mov	r9, r0
   12320:	str	r1, [sp, #24]
   12324:	str	r0, [sp, #28]
   12328:	str	r0, [sp, #52]	; 0x34
   1232c:	b	11b8c <close_stdout@@Base+0x610>
   12330:	ldr	r3, [sp, #160]	; 0xa0
   12334:	cmp	r3, #8
   12338:	beq	12364 <close_stdout@@Base+0xde8>
   1233c:	ldr	r0, [pc, #1180]	; 127e0 <close_stdout@@Base+0x1264>
   12340:	mov	r1, r3
   12344:	add	r0, pc, r0
   12348:	bl	11974 <close_stdout@@Base+0x3f8>
   1234c:	ldr	r1, [sp, #160]	; 0xa0
   12350:	str	r0, [sp, #72]	; 0x48
   12354:	ldr	r0, [pc, #1160]	; 127e4 <close_stdout@@Base+0x1268>
   12358:	add	r0, pc, r0
   1235c:	bl	11974 <close_stdout@@Base+0x3f8>
   12360:	str	r0, [sp, #68]	; 0x44
   12364:	ldr	r0, [sp, #36]	; 0x24
   12368:	cmp	r0, #0
   1236c:	movne	r9, #0
   12370:	bne	123a8 <close_stdout@@Base+0xe2c>
   12374:	ldr	r1, [sp, #72]	; 0x48
   12378:	ldrb	r3, [r1]
   1237c:	cmp	r3, #0
   12380:	beq	12780 <close_stdout@@Base+0x1204>
   12384:	mov	r2, r1
   12388:	ldr	r1, [sp, #40]	; 0x28
   1238c:	mov	r9, r0
   12390:	cmp	r9, sl
   12394:	strbcc	r3, [r1, r9]
   12398:	ldrb	r3, [r2, #1]!
   1239c:	add	r9, r9, #1
   123a0:	cmp	r3, #0
   123a4:	bne	12390 <close_stdout@@Base+0xe14>
   123a8:	ldr	r0, [sp, #68]	; 0x44
   123ac:	str	r0, [sp, #52]	; 0x34
   123b0:	bl	11008 <strlen@plt>
   123b4:	mov	r2, #1
   123b8:	str	r2, [sp, #24]
   123bc:	str	r0, [sp, #28]
   123c0:	b	11b8c <close_stdout@@Base+0x610>
   123c4:	ldr	r3, [pc, #1052]	; 127e8 <close_stdout@@Base+0x126c>
   123c8:	mov	r2, #0
   123cc:	mov	r1, #1
   123d0:	mov	r0, #2
   123d4:	add	r3, pc, r3
   123d8:	str	r1, [sp, #36]	; 0x24
   123dc:	str	r2, [sp, #24]
   123e0:	mov	r9, r2
   123e4:	str	r1, [sp, #28]
   123e8:	str	r3, [sp, #52]	; 0x34
   123ec:	str	r0, [sp, #160]	; 0xa0
   123f0:	b	11b8c <close_stdout@@Base+0x610>
   123f4:	ldr	r3, [sp, #36]	; 0x24
   123f8:	cmp	r3, #0
   123fc:	bne	1278c <close_stdout@@Base+0x1210>
   12400:	cmp	sl, #0
   12404:	beq	126e8 <close_stdout@@Base+0x116c>
   12408:	ldr	r1, [sp, #40]	; 0x28
   1240c:	mov	r3, #39	; 0x27
   12410:	ldr	r2, [sp, #36]	; 0x24
   12414:	mov	r0, #1
   12418:	mov	r9, r0
   1241c:	str	r0, [sp, #28]
   12420:	strb	r3, [r1]
   12424:	ldr	r3, [pc, #960]	; 127ec <close_stdout@@Base+0x1270>
   12428:	str	r2, [sp, #24]
   1242c:	add	r3, pc, r3
   12430:	str	r3, [sp, #52]	; 0x34
   12434:	b	11b8c <close_stdout@@Base+0x610>
   12438:	ldr	r2, [sp, #28]
   1243c:	cmp	r2, #1
   12440:	add	r4, fp, r2
   12444:	movls	r3, #0
   12448:	movhi	r3, #1
   1244c:	cmn	r8, #1
   12450:	movne	r3, #0
   12454:	cmp	r3, #0
   12458:	beq	12468 <close_stdout@@Base+0xeec>
   1245c:	ldr	r0, [sp, #32]
   12460:	bl	11008 <strlen@plt>
   12464:	mov	r8, r0
   12468:	cmp	r8, r4
   1246c:	ldrcc	r3, [sp, #32]
   12470:	movcc	r6, #0
   12474:	addcc	r5, r3, fp
   12478:	bcc	11be8 <close_stdout@@Base+0x66c>
   1247c:	ldr	r0, [sp, #32]
   12480:	ldr	r1, [sp, #52]	; 0x34
   12484:	add	r5, r0, fp
   12488:	ldr	r2, [sp, #28]
   1248c:	mov	r0, r5
   12490:	bl	10f00 <memcmp@plt>
   12494:	cmp	r0, #0
   12498:	bne	124b0 <close_stdout@@Base+0xf34>
   1249c:	ldr	r1, [sp, #36]	; 0x24
   124a0:	cmp	r1, #0
   124a4:	bne	12008 <close_stdout@@Base+0xa8c>
   124a8:	mov	r6, #1
   124ac:	b	11be8 <close_stdout@@Base+0x66c>
   124b0:	mov	r6, #0
   124b4:	b	11be8 <close_stdout@@Base+0x66c>
   124b8:	add	r7, sp, #108	; 0x6c
   124bc:	cmn	r8, #1
   124c0:	mov	r3, #0
   124c4:	str	r3, [sp, #108]	; 0x6c
   124c8:	str	r3, [r7, #4]
   124cc:	beq	126b8 <close_stdout@@Base+0x113c>
   124d0:	mov	r1, #0
   124d4:	ldr	r0, [sp, #32]
   124d8:	mov	ip, #1
   124dc:	str	r9, [sp, #88]	; 0x58
   124e0:	str	r6, [sp, #96]	; 0x60
   124e4:	mov	r9, r1
   124e8:	str	r5, [sp, #100]	; 0x64
   124ec:	mov	r6, ip
   124f0:	mov	r5, r7
   124f4:	add	r3, sp, #104	; 0x68
   124f8:	sub	r0, r0, #1
   124fc:	str	r3, [sp, #80]	; 0x50
   12500:	str	r0, [sp, #84]	; 0x54
   12504:	str	r1, [sp, #60]	; 0x3c
   12508:	str	r4, [sp, #92]	; 0x5c
   1250c:	ldr	r2, [sp, #32]
   12510:	add	r7, r9, fp
   12514:	add	r0, sp, #104	; 0x68
   12518:	mov	r3, r5
   1251c:	add	r4, r2, r7
   12520:	rsb	r2, r7, r8
   12524:	mov	r1, r4
   12528:	bl	10f84 <mbrtowc@plt>
   1252c:	subs	r2, r0, #0
   12530:	beq	1263c <close_stdout@@Base+0x10c0>
   12534:	cmn	r2, #1
   12538:	beq	12764 <close_stdout@@Base+0x11e8>
   1253c:	cmn	r2, #2
   12540:	beq	12708 <close_stdout@@Base+0x118c>
   12544:	ldr	r3, [sp, #36]	; 0x24
   12548:	ldr	r0, [sp, #160]	; 0xa0
   1254c:	cmp	r0, #2
   12550:	movne	r3, #0
   12554:	andeq	r3, r3, #1
   12558:	cmp	r3, #0
   1255c:	beq	12618 <close_stdout@@Base+0x109c>
   12560:	cmp	r2, #1
   12564:	beq	12618 <close_stdout@@Base+0x109c>
   12568:	ldr	r1, [sp, #84]	; 0x54
   1256c:	add	r3, r1, r2
   12570:	add	r7, r3, r7
   12574:	ldrb	r3, [r4, #1]!
   12578:	sub	r3, r3, #91	; 0x5b
   1257c:	cmp	r3, #33	; 0x21
   12580:	addls	pc, pc, r3, lsl #2
   12584:	b	12610 <close_stdout@@Base+0x1094>
   12588:	b	12008 <close_stdout@@Base+0xa8c>
   1258c:	b	12008 <close_stdout@@Base+0xa8c>
   12590:	b	12610 <close_stdout@@Base+0x1094>
   12594:	b	12008 <close_stdout@@Base+0xa8c>
   12598:	b	12610 <close_stdout@@Base+0x1094>
   1259c:	b	12008 <close_stdout@@Base+0xa8c>
   125a0:	b	12610 <close_stdout@@Base+0x1094>
   125a4:	b	12610 <close_stdout@@Base+0x1094>
   125a8:	b	12610 <close_stdout@@Base+0x1094>
   125ac:	b	12610 <close_stdout@@Base+0x1094>
   125b0:	b	12610 <close_stdout@@Base+0x1094>
   125b4:	b	12610 <close_stdout@@Base+0x1094>
   125b8:	b	12610 <close_stdout@@Base+0x1094>
   125bc:	b	12610 <close_stdout@@Base+0x1094>
   125c0:	b	12610 <close_stdout@@Base+0x1094>
   125c4:	b	12610 <close_stdout@@Base+0x1094>
   125c8:	b	12610 <close_stdout@@Base+0x1094>
   125cc:	b	12610 <close_stdout@@Base+0x1094>
   125d0:	b	12610 <close_stdout@@Base+0x1094>
   125d4:	b	12610 <close_stdout@@Base+0x1094>
   125d8:	b	12610 <close_stdout@@Base+0x1094>
   125dc:	b	12610 <close_stdout@@Base+0x1094>
   125e0:	b	12610 <close_stdout@@Base+0x1094>
   125e4:	b	12610 <close_stdout@@Base+0x1094>
   125e8:	b	12610 <close_stdout@@Base+0x1094>
   125ec:	b	12610 <close_stdout@@Base+0x1094>
   125f0:	b	12610 <close_stdout@@Base+0x1094>
   125f4:	b	12610 <close_stdout@@Base+0x1094>
   125f8:	b	12610 <close_stdout@@Base+0x1094>
   125fc:	b	12610 <close_stdout@@Base+0x1094>
   12600:	b	12610 <close_stdout@@Base+0x1094>
   12604:	b	12610 <close_stdout@@Base+0x1094>
   12608:	b	12610 <close_stdout@@Base+0x1094>
   1260c:	b	12008 <close_stdout@@Base+0xa8c>
   12610:	cmp	r4, r7
   12614:	bne	12574 <close_stdout@@Base+0xff8>
   12618:	ldr	r0, [sp, #104]	; 0x68
   1261c:	add	r9, r9, r2
   12620:	bl	10f3c <iswprint@plt>
   12624:	cmp	r0, #0
   12628:	mov	r0, r5
   1262c:	moveq	r6, #0
   12630:	bl	10ee8 <mbsinit@plt>
   12634:	cmp	r0, #0
   12638:	beq	1250c <close_stdout@@Base+0xf90>
   1263c:	mov	ip, r6
   12640:	eor	r2, ip, #1
   12644:	str	r9, [sp, #60]	; 0x3c
   12648:	ldr	r4, [sp, #92]	; 0x5c
   1264c:	uxtb	r2, r2
   12650:	ldr	r9, [sp, #88]	; 0x58
   12654:	ldr	r6, [sp, #96]	; 0x60
   12658:	ldr	r5, [sp, #100]	; 0x64
   1265c:	ldr	r3, [sp, #60]	; 0x3c
   12660:	cmp	r3, #1
   12664:	bls	121e8 <close_stdout@@Base+0xc6c>
   12668:	ldr	r0, [sp, #24]
   1266c:	and	r2, r2, r0
   12670:	b	121f4 <close_stdout@@Base+0xc78>
   12674:	ldr	r2, [sp, #164]	; 0xa4
   12678:	tst	r2, #1
   1267c:	addne	fp, fp, #1
   12680:	bne	11bb0 <close_stdout@@Base+0x634>
   12684:	b	11ec0 <close_stdout@@Base+0x944>
   12688:	ldr	r0, [sp, #36]	; 0x24
   1268c:	cmp	r0, #0
   12690:	beq	11ec0 <close_stdout@@Base+0x944>
   12694:	b	12008 <close_stdout@@Base+0xa8c>
   12698:	ldr	r2, [sp, #32]
   1269c:	ldrb	r3, [r2, #1]
   126a0:	adds	r3, r3, #0
   126a4:	movne	r3, #1
   126a8:	b	11fdc <close_stdout@@Base+0xa60>
   126ac:	bl	110d4 <abort@plt>
   126b0:	ldr	r8, [sp, #60]	; 0x3c
   126b4:	b	12008 <close_stdout@@Base+0xa8c>
   126b8:	ldr	r0, [sp, #32]
   126bc:	bl	11008 <strlen@plt>
   126c0:	mov	r8, r0
   126c4:	b	124d0 <close_stdout@@Base+0xf54>
   126c8:	ldr	r2, [pc, #288]	; 127f0 <close_stdout@@Base+0x1274>
   126cc:	mov	r1, #1
   126d0:	mov	r9, r1
   126d4:	str	r1, [sp, #24]
   126d8:	add	r2, pc, r2
   126dc:	str	r1, [sp, #28]
   126e0:	str	r2, [sp, #52]	; 0x34
   126e4:	b	11b8c <close_stdout@@Base+0x610>
   126e8:	ldr	r2, [pc, #260]	; 127f4 <close_stdout@@Base+0x1278>
   126ec:	mov	r3, #1
   126f0:	mov	r9, r3
   126f4:	str	r3, [sp, #28]
   126f8:	add	r2, pc, r2
   126fc:	str	sl, [sp, #24]
   12700:	str	r2, [sp, #52]	; 0x34
   12704:	b	11b8c <close_stdout@@Base+0x610>
   12708:	cmp	r8, r7
   1270c:	str	r9, [sp, #60]	; 0x3c
   12710:	mov	ip, r4
   12714:	ldr	r6, [sp, #96]	; 0x60
   12718:	ldr	r9, [sp, #88]	; 0x58
   1271c:	ldr	r4, [sp, #92]	; 0x5c
   12720:	ldr	r5, [sp, #100]	; 0x64
   12724:	bls	1275c <close_stdout@@Base+0x11e0>
   12728:	ldrb	r3, [ip]
   1272c:	cmp	r3, #0
   12730:	beq	1275c <close_stdout@@Base+0x11e0>
   12734:	ldr	r3, [sp, #60]	; 0x3c
   12738:	b	12748 <close_stdout@@Base+0x11cc>
   1273c:	ldrb	r2, [r5, r3]
   12740:	cmp	r2, #0
   12744:	beq	12758 <close_stdout@@Base+0x11dc>
   12748:	add	r3, r3, #1
   1274c:	add	r2, fp, r3
   12750:	cmp	r8, r2
   12754:	bhi	1273c <close_stdout@@Base+0x11c0>
   12758:	str	r3, [sp, #60]	; 0x3c
   1275c:	mov	r2, #1
   12760:	b	1265c <close_stdout@@Base+0x10e0>
   12764:	str	r9, [sp, #60]	; 0x3c
   12768:	mov	r2, #1
   1276c:	ldr	r4, [sp, #92]	; 0x5c
   12770:	ldr	r6, [sp, #96]	; 0x60
   12774:	ldr	r9, [sp, #88]	; 0x58
   12778:	ldr	r5, [sp, #100]	; 0x64
   1277c:	b	1265c <close_stdout@@Base+0x10e0>
   12780:	ldr	r9, [sp, #36]	; 0x24
   12784:	b	123a8 <close_stdout@@Base+0xe2c>
   12788:	bl	10f18 <__stack_chk_fail@plt>
   1278c:	ldr	r1, [pc, #100]	; 127f8 <close_stdout@@Base+0x127c>
   12790:	mov	r3, #0
   12794:	mov	r0, #1
   12798:	str	r3, [sp, #24]
   1279c:	add	r1, pc, r1
   127a0:	str	r0, [sp, #28]
   127a4:	mov	r9, r3
   127a8:	str	r1, [sp, #52]	; 0x34
   127ac:	b	11b8c <close_stdout@@Base+0x610>
   127b0:	ldr	r0, [pc, #68]	; 127fc <close_stdout@@Base+0x1280>
   127b4:	mov	r3, #1
   127b8:	mov	r9, #0
   127bc:	str	r3, [sp, #24]
   127c0:	add	r0, pc, r0
   127c4:	str	r3, [sp, #28]
   127c8:	str	r0, [sp, #52]	; 0x34
   127cc:	b	11b8c <close_stdout@@Base+0x610>
   127d0:	andeq	r3, r1, r4, lsl #10
   127d4:	andeq	r0, r0, r0, ror #1
   127d8:	muleq	r0, r0, r1
   127dc:	andeq	r2, r0, ip, ror #2
   127e0:	andeq	r2, r0, r8, lsr #2
   127e4:	andeq	r2, r0, r4, lsl #2
   127e8:	andeq	r2, r0, r8, lsl #1
   127ec:	andeq	r2, r0, r0, lsr r0
   127f0:	andeq	r1, r0, r8, lsl #27
   127f4:	andeq	r1, r0, r4, ror #26
   127f8:	andeq	r1, r0, r0, asr #25
   127fc:	andeq	r1, r0, r0, lsr #25
   12800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12804:	sub	sp, sp, #44	; 0x2c
   12808:	mov	r6, r0
   1280c:	mov	r9, r1
   12810:	mov	sl, r2
   12814:	mov	r4, r3
   12818:	bl	11020 <__errno_location@plt>
   1281c:	ldr	fp, [pc, #412]	; 129c0 <close_stdout@@Base+0x1444>
   12820:	cmp	r6, #0
   12824:	add	fp, pc, fp
   12828:	ldr	r5, [fp]
   1282c:	ldr	r1, [r0]
   12830:	mov	r8, r0
   12834:	str	r1, [sp, #36]	; 0x24
   12838:	blt	129b8 <close_stdout@@Base+0x143c>
   1283c:	ldr	r3, [pc, #384]	; 129c4 <close_stdout@@Base+0x1448>
   12840:	add	r3, pc, r3
   12844:	ldr	r3, [r3]
   12848:	cmp	r6, r3
   1284c:	bcc	128a0 <close_stdout@@Base+0x1324>
   12850:	add	r7, r6, #1
   12854:	cmn	r7, #-536870911	; 0xe0000001
   12858:	bhi	129bc <close_stdout@@Base+0x1440>
   1285c:	add	r3, fp, #4
   12860:	cmp	r5, r3
   12864:	beq	12990 <close_stdout@@Base+0x1414>
   12868:	mov	r0, r5
   1286c:	lsl	r1, r7, #3
   12870:	bl	13698 <close_stdout@@Base+0x211c>
   12874:	mov	r5, r0
   12878:	str	r0, [fp]
   1287c:	ldr	fp, [pc, #324]	; 129c8 <close_stdout@@Base+0x144c>
   12880:	mov	r1, #0
   12884:	add	fp, pc, fp
   12888:	ldr	r0, [fp]
   1288c:	rsb	r2, r0, r7
   12890:	add	r0, r5, r0, lsl #3
   12894:	lsl	r2, r2, #3
   12898:	bl	11038 <memset@plt>
   1289c:	str	r7, [fp]
   128a0:	add	r2, r4, #8
   128a4:	str	r2, [sp, #32]
   128a8:	ldr	r1, [r4]
   128ac:	add	fp, r5, r6, lsl #3
   128b0:	ldr	lr, [sp, #32]
   128b4:	mov	r2, r9
   128b8:	ldr	r3, [r4, #4]
   128bc:	ldr	ip, [r5, r6, lsl #3]
   128c0:	ldr	r7, [fp, #4]
   128c4:	orr	r3, r3, #1
   128c8:	str	r1, [sp]
   128cc:	str	r3, [sp, #4]
   128d0:	mov	r1, ip
   128d4:	str	lr, [sp, #8]
   128d8:	mov	r0, r7
   128dc:	ldr	lr, [r4, #40]	; 0x28
   128e0:	str	r3, [sp, #28]
   128e4:	mov	r3, sl
   128e8:	str	lr, [sp, #12]
   128ec:	ldr	lr, [r4, #44]	; 0x2c
   128f0:	str	ip, [sp, #24]
   128f4:	str	lr, [sp, #16]
   128f8:	bl	11ad8 <close_stdout@@Base+0x55c>
   128fc:	ldr	ip, [sp, #24]
   12900:	cmp	ip, r0
   12904:	bhi	1297c <close_stdout@@Base+0x1400>
   12908:	ldr	r3, [pc, #188]	; 129cc <close_stdout@@Base+0x1450>
   1290c:	add	r1, r0, #1
   12910:	str	r1, [r5, r6, lsl #3]
   12914:	add	r3, pc, r3
   12918:	cmp	r7, r3
   1291c:	beq	12930 <close_stdout@@Base+0x13b4>
   12920:	mov	r0, r7
   12924:	str	r1, [sp, #24]
   12928:	bl	10ec4 <free@plt>
   1292c:	ldr	r1, [sp, #24]
   12930:	mov	r0, r1
   12934:	str	r1, [sp, #24]
   12938:	bl	13640 <close_stdout@@Base+0x20c4>
   1293c:	ldr	r3, [sp, #28]
   12940:	ldr	lr, [sp, #32]
   12944:	mov	r2, r9
   12948:	str	r0, [fp, #4]
   1294c:	mov	r7, r0
   12950:	ldr	ip, [r4]
   12954:	str	r3, [sp, #4]
   12958:	mov	r3, sl
   1295c:	str	lr, [sp, #8]
   12960:	str	ip, [sp]
   12964:	ldr	ip, [r4, #40]	; 0x28
   12968:	ldr	r1, [sp, #24]
   1296c:	str	ip, [sp, #12]
   12970:	ldr	ip, [r4, #44]	; 0x2c
   12974:	str	ip, [sp, #16]
   12978:	bl	11ad8 <close_stdout@@Base+0x55c>
   1297c:	ldr	r1, [sp, #36]	; 0x24
   12980:	mov	r0, r7
   12984:	str	r1, [r8]
   12988:	add	sp, sp, #44	; 0x2c
   1298c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12990:	lsl	r1, r7, #3
   12994:	mov	r0, #0
   12998:	str	r3, [sp, #24]
   1299c:	bl	13698 <close_stdout@@Base+0x211c>
   129a0:	ldr	r3, [sp, #24]
   129a4:	mov	r5, r0
   129a8:	ldm	r3, {r0, r1}
   129ac:	str	r5, [fp]
   129b0:	stm	r5, {r0, r1}
   129b4:	b	1287c <close_stdout@@Base+0x1300>
   129b8:	bl	110d4 <abort@plt>
   129bc:	bl	13854 <close_stdout@@Base+0x22d8>
   129c0:	andeq	r2, r1, r0, lsr r9
   129c4:	andeq	r2, r1, r0, ror #17
   129c8:	muleq	r1, ip, r8
   129cc:	andeq	r2, r1, ip, asr r8
   129d0:	push	{r4, r5, r6, lr}
   129d4:	mov	r5, r0
   129d8:	bl	11020 <__errno_location@plt>
   129dc:	cmp	r5, #0
   129e0:	mov	r1, #48	; 0x30
   129e4:	mov	r4, r0
   129e8:	ldr	r0, [pc, #24]	; 12a08 <close_stdout@@Base+0x148c>
   129ec:	ldr	r6, [r4]
   129f0:	add	r0, pc, r0
   129f4:	add	r0, r0, #256	; 0x100
   129f8:	movne	r0, r5
   129fc:	bl	13814 <close_stdout@@Base+0x2298>
   12a00:	str	r6, [r4]
   12a04:	pop	{r4, r5, r6, pc}
   12a08:	andeq	r2, r1, r0, lsl #15
   12a0c:	cmp	r0, #0
   12a10:	beq	12a1c <close_stdout@@Base+0x14a0>
   12a14:	ldr	r0, [r0]
   12a18:	bx	lr
   12a1c:	ldr	r0, [pc, #12]	; 12a30 <close_stdout@@Base+0x14b4>
   12a20:	add	r0, pc, r0
   12a24:	add	r0, r0, #256	; 0x100
   12a28:	ldr	r0, [r0]
   12a2c:	bx	lr
   12a30:	andeq	r2, r1, r0, asr r7
   12a34:	cmp	r0, #0
   12a38:	beq	12a44 <close_stdout@@Base+0x14c8>
   12a3c:	str	r1, [r0]
   12a40:	bx	lr
   12a44:	ldr	r0, [pc, #12]	; 12a58 <close_stdout@@Base+0x14dc>
   12a48:	add	r0, pc, r0
   12a4c:	add	r0, r0, #256	; 0x100
   12a50:	str	r1, [r0]
   12a54:	bx	lr
   12a58:	andeq	r2, r1, r8, lsr #14
   12a5c:	cmp	r0, #0
   12a60:	movne	r3, r0
   12a64:	beq	12a94 <close_stdout@@Base+0x1518>
   12a68:	lsr	ip, r1, #5
   12a6c:	and	r1, r1, #31
   12a70:	add	r3, r3, ip, lsl #2
   12a74:	ldr	ip, [r3, #8]
   12a78:	lsr	r0, ip, r1
   12a7c:	eor	r2, r0, r2
   12a80:	and	r0, r0, #1
   12a84:	and	r2, r2, #1
   12a88:	eor	ip, ip, r2, lsl r1
   12a8c:	str	ip, [r3, #8]
   12a90:	bx	lr
   12a94:	ldr	r3, [pc, #8]	; 12aa4 <close_stdout@@Base+0x1528>
   12a98:	add	r3, pc, r3
   12a9c:	add	r3, r3, #256	; 0x100
   12aa0:	b	12a68 <close_stdout@@Base+0x14ec>
   12aa4:	ldrdeq	r2, [r1], -r8
   12aa8:	subs	r3, r0, #0
   12aac:	beq	12abc <close_stdout@@Base+0x1540>
   12ab0:	ldr	r0, [r3, #4]
   12ab4:	str	r1, [r3, #4]
   12ab8:	bx	lr
   12abc:	ldr	r3, [pc, #8]	; 12acc <close_stdout@@Base+0x1550>
   12ac0:	add	r3, pc, r3
   12ac4:	add	r3, r3, #256	; 0x100
   12ac8:	b	12ab0 <close_stdout@@Base+0x1534>
   12acc:			; <UNDEFINED> instruction: 0x000126b0
   12ad0:	cmp	r0, #0
   12ad4:	push	{r3, lr}
   12ad8:	beq	12afc <close_stdout@@Base+0x1580>
   12adc:	cmp	r2, #0
   12ae0:	cmpne	r1, #0
   12ae4:	mov	r3, #8
   12ae8:	strne	r1, [r0, #40]	; 0x28
   12aec:	str	r3, [r0]
   12af0:	strne	r2, [r0, #44]	; 0x2c
   12af4:	popne	{r3, pc}
   12af8:	bl	110d4 <abort@plt>
   12afc:	ldr	r0, [pc, #8]	; 12b0c <close_stdout@@Base+0x1590>
   12b00:	add	r0, pc, r0
   12b04:	add	r0, r0, #256	; 0x100
   12b08:	b	12adc <close_stdout@@Base+0x1560>
   12b0c:	andeq	r2, r1, r0, ror r6
   12b10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b14:	sub	sp, sp, #24
   12b18:	mov	r7, r0
   12b1c:	mov	sl, r1
   12b20:	ldr	r4, [sp, #56]	; 0x38
   12b24:	mov	r9, r2
   12b28:	mov	r8, r3
   12b2c:	cmp	r4, #0
   12b30:	beq	12b84 <close_stdout@@Base+0x1608>
   12b34:	bl	11020 <__errno_location@plt>
   12b38:	ldr	r3, [r4]
   12b3c:	add	lr, r4, #8
   12b40:	mov	r1, sl
   12b44:	mov	r2, r9
   12b48:	ldr	r6, [r0]
   12b4c:	mov	r5, r0
   12b50:	str	r3, [sp]
   12b54:	mov	r0, r7
   12b58:	ldr	ip, [r4, #4]
   12b5c:	mov	r3, r8
   12b60:	stmib	sp, {ip, lr}
   12b64:	ldr	ip, [r4, #40]	; 0x28
   12b68:	str	ip, [sp, #12]
   12b6c:	ldr	ip, [r4, #44]	; 0x2c
   12b70:	str	ip, [sp, #16]
   12b74:	bl	11ad8 <close_stdout@@Base+0x55c>
   12b78:	str	r6, [r5]
   12b7c:	add	sp, sp, #24
   12b80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b84:	ldr	r4, [pc, #8]	; 12b94 <close_stdout@@Base+0x1618>
   12b88:	add	r4, pc, r4
   12b8c:	add	r4, r4, #256	; 0x100
   12b90:	b	12b34 <close_stdout@@Base+0x15b8>
   12b94:	andeq	r2, r1, r8, ror #11
   12b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b9c:	subs	r4, r3, #0
   12ba0:	sub	sp, sp, #36	; 0x24
   12ba4:	mov	r7, r0
   12ba8:	mov	r6, r1
   12bac:	mov	r5, r2
   12bb0:	beq	12c6c <close_stdout@@Base+0x16f0>
   12bb4:	bl	11020 <__errno_location@plt>
   12bb8:	ldr	r3, [r4]
   12bbc:	ldr	sl, [r4, #4]
   12bc0:	add	r9, r4, #8
   12bc4:	mov	r8, r0
   12bc8:	mov	r0, #0
   12bcc:	ldr	r2, [r8]
   12bd0:	cmp	r5, r0
   12bd4:	orreq	sl, sl, #1
   12bd8:	str	r9, [sp, #8]
   12bdc:	mov	r1, r0
   12be0:	stm	sp, {r3, sl}
   12be4:	mov	r3, r6
   12be8:	ldr	ip, [r4, #40]	; 0x28
   12bec:	str	r2, [sp, #28]
   12bf0:	mov	r2, r7
   12bf4:	str	ip, [sp, #12]
   12bf8:	ldr	ip, [r4, #44]	; 0x2c
   12bfc:	str	ip, [sp, #16]
   12c00:	bl	11ad8 <close_stdout@@Base+0x55c>
   12c04:	add	r1, r0, #1
   12c08:	mov	fp, r0
   12c0c:	str	r1, [sp, #24]
   12c10:	mov	r0, r1
   12c14:	bl	13640 <close_stdout@@Base+0x20c4>
   12c18:	ldr	lr, [r4]
   12c1c:	str	sl, [sp, #4]
   12c20:	mov	r3, r6
   12c24:	str	r9, [sp, #8]
   12c28:	mov	r2, r7
   12c2c:	str	lr, [sp]
   12c30:	ldr	lr, [r4, #40]	; 0x28
   12c34:	ldr	r1, [sp, #24]
   12c38:	str	lr, [sp, #12]
   12c3c:	ldr	lr, [r4, #44]	; 0x2c
   12c40:	str	lr, [sp, #16]
   12c44:	str	r0, [sp, #24]
   12c48:	bl	11ad8 <close_stdout@@Base+0x55c>
   12c4c:	ldr	r3, [sp, #28]
   12c50:	cmp	r5, #0
   12c54:	str	r3, [r8]
   12c58:	ldr	ip, [sp, #24]
   12c5c:	strne	fp, [r5]
   12c60:	mov	r0, ip
   12c64:	add	sp, sp, #36	; 0x24
   12c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c6c:	ldr	r4, [pc, #8]	; 12c7c <close_stdout@@Base+0x1700>
   12c70:	add	r4, pc, r4
   12c74:	add	r4, r4, #256	; 0x100
   12c78:	b	12bb4 <close_stdout@@Base+0x1638>
   12c7c:	andeq	r2, r1, r0, lsl #10
   12c80:	mov	r3, r2
   12c84:	mov	r2, #0
   12c88:	b	12b98 <close_stdout@@Base+0x161c>
   12c8c:	ldr	r2, [pc, #152]	; 12d2c <close_stdout@@Base+0x17b0>
   12c90:	push	{r3, r4, r5, r6, r7, lr}
   12c94:	add	r2, pc, r2
   12c98:	ldr	r3, [pc, #144]	; 12d30 <close_stdout@@Base+0x17b4>
   12c9c:	ldr	r6, [r2]
   12ca0:	add	r3, pc, r3
   12ca4:	cmp	r6, #1
   12ca8:	ldr	r7, [r3]
   12cac:	movhi	r4, #1
   12cb0:	movhi	r5, r7
   12cb4:	bls	12cd0 <close_stdout@@Base+0x1754>
   12cb8:	ldr	r0, [r5, #12]
   12cbc:	add	r4, r4, #1
   12cc0:	bl	10ec4 <free@plt>
   12cc4:	cmp	r4, r6
   12cc8:	add	r5, r5, #8
   12ccc:	bne	12cb8 <close_stdout@@Base+0x173c>
   12cd0:	ldr	r4, [pc, #92]	; 12d34 <close_stdout@@Base+0x17b8>
   12cd4:	ldr	r0, [r7, #4]
   12cd8:	add	r4, pc, r4
   12cdc:	cmp	r0, r4
   12ce0:	beq	12cf8 <close_stdout@@Base+0x177c>
   12ce4:	bl	10ec4 <free@plt>
   12ce8:	ldr	r3, [pc, #72]	; 12d38 <close_stdout@@Base+0x17bc>
   12cec:	mov	r2, #256	; 0x100
   12cf0:	add	r3, pc, r3
   12cf4:	stmib	r3, {r2, r4}
   12cf8:	ldr	r4, [pc, #60]	; 12d3c <close_stdout@@Base+0x17c0>
   12cfc:	add	r4, pc, r4
   12d00:	add	r5, r4, #4
   12d04:	cmp	r7, r5
   12d08:	beq	12d18 <close_stdout@@Base+0x179c>
   12d0c:	mov	r0, r7
   12d10:	bl	10ec4 <free@plt>
   12d14:	str	r5, [r4]
   12d18:	ldr	r3, [pc, #32]	; 12d40 <close_stdout@@Base+0x17c4>
   12d1c:	mov	r2, #1
   12d20:	add	r3, pc, r3
   12d24:	str	r2, [r3]
   12d28:	pop	{r3, r4, r5, r6, r7, pc}
   12d2c:	andeq	r2, r1, ip, lsl #9
   12d30:			; <UNDEFINED> instruction: 0x000124b4
   12d34:	muleq	r1, r8, r4
   12d38:	andeq	r2, r1, r4, ror #8
   12d3c:	andeq	r2, r1, r8, asr r4
   12d40:	andeq	r2, r1, r0, lsl #8
   12d44:	ldr	r3, [pc, #12]	; 12d58 <close_stdout@@Base+0x17dc>
   12d48:	mvn	r2, #0
   12d4c:	add	r3, pc, r3
   12d50:	add	r3, r3, #256	; 0x100
   12d54:	b	12800 <close_stdout@@Base+0x1284>
   12d58:	andeq	r2, r1, r4, lsr #8
   12d5c:	ldr	r3, [pc, #8]	; 12d6c <close_stdout@@Base+0x17f0>
   12d60:	add	r3, pc, r3
   12d64:	add	r3, r3, #256	; 0x100
   12d68:	b	12800 <close_stdout@@Base+0x1284>
   12d6c:	andeq	r2, r1, r0, lsl r4
   12d70:	mov	r1, r0
   12d74:	mov	r0, #0
   12d78:	b	12d44 <close_stdout@@Base+0x17c8>
   12d7c:	mov	r2, r1
   12d80:	mov	r1, r0
   12d84:	mov	r0, #0
   12d88:	b	12d5c <close_stdout@@Base+0x17e0>
   12d8c:	ldr	r3, [pc, #92]	; 12df0 <close_stdout@@Base+0x1874>
   12d90:	ldr	ip, [pc, #92]	; 12df4 <close_stdout@@Base+0x1878>
   12d94:	add	r3, pc, r3
   12d98:	push	{r4, r5, r6, r7, lr}
   12d9c:	sub	sp, sp, #60	; 0x3c
   12da0:	ldr	r4, [r3, ip]
   12da4:	add	r5, sp, #4
   12da8:	mov	r7, r2
   12dac:	mov	r6, r0
   12db0:	mov	r0, r5
   12db4:	ldr	r3, [r4]
   12db8:	str	r3, [sp, #52]	; 0x34
   12dbc:	bl	11920 <close_stdout@@Base+0x3a4>
   12dc0:	mov	r3, r5
   12dc4:	mvn	r2, #0
   12dc8:	mov	r0, r6
   12dcc:	mov	r1, r7
   12dd0:	bl	12800 <close_stdout@@Base+0x1284>
   12dd4:	ldr	r2, [sp, #52]	; 0x34
   12dd8:	ldr	r3, [r4]
   12ddc:	cmp	r2, r3
   12de0:	bne	12dec <close_stdout@@Base+0x1870>
   12de4:	add	sp, sp, #60	; 0x3c
   12de8:	pop	{r4, r5, r6, r7, pc}
   12dec:	bl	10f18 <__stack_chk_fail@plt>
   12df0:	andeq	r2, r1, r4, ror #4
   12df4:	andeq	r0, r0, r0, ror #1
   12df8:	ldr	ip, [pc, #96]	; 12e60 <close_stdout@@Base+0x18e4>
   12dfc:	push	{r4, r5, r6, r7, r8, lr}
   12e00:	add	ip, pc, ip
   12e04:	ldr	lr, [pc, #88]	; 12e64 <close_stdout@@Base+0x18e8>
   12e08:	sub	sp, sp, #56	; 0x38
   12e0c:	mov	r8, r3
   12e10:	add	r5, sp, #4
   12e14:	mov	r7, r2
   12e18:	mov	r6, r0
   12e1c:	ldr	r4, [ip, lr]
   12e20:	mov	r0, r5
   12e24:	ldr	r3, [r4]
   12e28:	str	r3, [sp, #52]	; 0x34
   12e2c:	bl	11920 <close_stdout@@Base+0x3a4>
   12e30:	mov	r2, r8
   12e34:	mov	r3, r5
   12e38:	mov	r0, r6
   12e3c:	mov	r1, r7
   12e40:	bl	12800 <close_stdout@@Base+0x1284>
   12e44:	ldr	r2, [sp, #52]	; 0x34
   12e48:	ldr	r3, [r4]
   12e4c:	cmp	r2, r3
   12e50:	bne	12e5c <close_stdout@@Base+0x18e0>
   12e54:	add	sp, sp, #56	; 0x38
   12e58:	pop	{r4, r5, r6, r7, r8, pc}
   12e5c:	bl	10f18 <__stack_chk_fail@plt>
   12e60:	strdeq	r2, [r1], -r8
   12e64:	andeq	r0, r0, r0, ror #1
   12e68:	mov	r2, r1
   12e6c:	mov	r1, r0
   12e70:	mov	r0, #0
   12e74:	b	12d8c <close_stdout@@Base+0x1810>
   12e78:	mov	ip, r1
   12e7c:	mov	r3, r2
   12e80:	mov	r1, r0
   12e84:	mov	r2, ip
   12e88:	mov	r0, #0
   12e8c:	b	12df8 <close_stdout@@Base+0x187c>
   12e90:	push	{r4, r5, r6, r7, r8, lr}
   12e94:	mov	r5, r2
   12e98:	ldr	lr, [pc, #136]	; 12f28 <close_stdout@@Base+0x19ac>
   12e9c:	mov	r7, r0
   12ea0:	mov	r6, r1
   12ea4:	ldr	r4, [pc, #128]	; 12f2c <close_stdout@@Base+0x19b0>
   12ea8:	add	lr, pc, lr
   12eac:	sub	sp, sp, #56	; 0x38
   12eb0:	add	lr, lr, #256	; 0x100
   12eb4:	ldr	r8, [pc, #116]	; 12f30 <close_stdout@@Base+0x19b4>
   12eb8:	add	r4, pc, r4
   12ebc:	add	ip, sp, #4
   12ec0:	ldm	lr!, {r0, r1, r2, r3}
   12ec4:	ldr	r4, [r4, r8]
   12ec8:	stmia	ip!, {r0, r1, r2, r3}
   12ecc:	ldm	lr!, {r0, r1, r2, r3}
   12ed0:	ldr	r8, [r4]
   12ed4:	stmia	ip!, {r0, r1, r2, r3}
   12ed8:	ldm	lr, {r0, r1, r2, r3}
   12edc:	str	r8, [sp, #52]	; 0x34
   12ee0:	stm	ip, {r0, r1, r2, r3}
   12ee4:	mov	r1, r5
   12ee8:	add	r5, sp, #4
   12eec:	mov	r2, #1
   12ef0:	mov	r0, r5
   12ef4:	bl	12a5c <close_stdout@@Base+0x14e0>
   12ef8:	mov	r2, r6
   12efc:	mov	r3, r5
   12f00:	mov	r1, r7
   12f04:	mov	r0, #0
   12f08:	bl	12800 <close_stdout@@Base+0x1284>
   12f0c:	ldr	r2, [sp, #52]	; 0x34
   12f10:	ldr	r3, [r4]
   12f14:	cmp	r2, r3
   12f18:	bne	12f24 <close_stdout@@Base+0x19a8>
   12f1c:	add	sp, sp, #56	; 0x38
   12f20:	pop	{r4, r5, r6, r7, r8, pc}
   12f24:	bl	10f18 <__stack_chk_fail@plt>
   12f28:	andeq	r2, r1, r8, asr #5
   12f2c:	andeq	r2, r1, r0, asr #2
   12f30:	andeq	r0, r0, r0, ror #1
   12f34:	mov	r2, r1
   12f38:	mvn	r1, #0
   12f3c:	b	12e90 <close_stdout@@Base+0x1914>
   12f40:	mov	r1, #58	; 0x3a
   12f44:	b	12f34 <close_stdout@@Base+0x19b8>
   12f48:	mov	r2, #58	; 0x3a
   12f4c:	b	12e90 <close_stdout@@Base+0x1914>
   12f50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f54:	mov	r5, r2
   12f58:	ldr	lr, [pc, #144]	; 12ff0 <close_stdout@@Base+0x1a74>
   12f5c:	mov	r8, r0
   12f60:	mov	r9, r1
   12f64:	mov	r7, r3
   12f68:	add	lr, pc, lr
   12f6c:	ldr	r4, [pc, #128]	; 12ff4 <close_stdout@@Base+0x1a78>
   12f70:	add	lr, lr, #256	; 0x100
   12f74:	sub	sp, sp, #56	; 0x38
   12f78:	ldr	sl, [pc, #120]	; 12ff8 <close_stdout@@Base+0x1a7c>
   12f7c:	add	r4, pc, r4
   12f80:	ldm	lr!, {r0, r1, r2, r3}
   12f84:	add	ip, sp, #4
   12f88:	ldr	r4, [r4, sl]
   12f8c:	ldr	r6, [sp, #88]	; 0x58
   12f90:	stmia	ip!, {r0, r1, r2, r3}
   12f94:	ldm	lr!, {r0, r1, r2, r3}
   12f98:	ldr	sl, [r4]
   12f9c:	stmia	ip!, {r0, r1, r2, r3}
   12fa0:	ldm	lr, {r0, r1, r2, r3}
   12fa4:	str	sl, [sp, #52]	; 0x34
   12fa8:	stm	ip, {r0, r1, r2, r3}
   12fac:	mov	r2, r5
   12fb0:	add	r5, sp, #4
   12fb4:	mov	r1, r9
   12fb8:	mov	r0, r5
   12fbc:	bl	12ad0 <close_stdout@@Base+0x1554>
   12fc0:	mov	r2, r6
   12fc4:	mov	r3, r5
   12fc8:	mov	r0, r8
   12fcc:	mov	r1, r7
   12fd0:	bl	12800 <close_stdout@@Base+0x1284>
   12fd4:	ldr	r2, [sp, #52]	; 0x34
   12fd8:	ldr	r3, [r4]
   12fdc:	cmp	r2, r3
   12fe0:	bne	12fec <close_stdout@@Base+0x1a70>
   12fe4:	add	sp, sp, #56	; 0x38
   12fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fec:	bl	10f18 <__stack_chk_fail@plt>
   12ff0:	andeq	r2, r1, r8, lsl #4
   12ff4:	andeq	r2, r1, ip, ror r0
   12ff8:	andeq	r0, r0, r0, ror #1
   12ffc:	push	{lr}		; (str lr, [sp, #-4]!)
   13000:	sub	sp, sp, #12
   13004:	mvn	ip, #0
   13008:	str	ip, [sp]
   1300c:	bl	12f50 <close_stdout@@Base+0x19d4>
   13010:	add	sp, sp, #12
   13014:	pop	{pc}		; (ldr pc, [sp], #4)
   13018:	mov	ip, r1
   1301c:	mov	r3, r2
   13020:	mov	r1, r0
   13024:	mov	r2, ip
   13028:	mov	r0, #0
   1302c:	b	12ffc <close_stdout@@Base+0x1a80>
   13030:	push	{lr}		; (str lr, [sp, #-4]!)
   13034:	sub	sp, sp, #12
   13038:	mov	lr, r1
   1303c:	mov	ip, r2
   13040:	mov	r1, r0
   13044:	str	r3, [sp]
   13048:	mov	r2, lr
   1304c:	mov	r3, ip
   13050:	mov	r0, #0
   13054:	bl	12f50 <close_stdout@@Base+0x19d4>
   13058:	add	sp, sp, #12
   1305c:	pop	{pc}		; (ldr pc, [sp], #4)
   13060:	ldr	r3, [pc, #12]	; 13074 <close_stdout@@Base+0x1af8>
   13064:	ldr	ip, [pc, #12]	; 13078 <close_stdout@@Base+0x1afc>
   13068:	add	r3, pc, r3
   1306c:	ldr	r3, [r3, ip]
   13070:	b	12800 <close_stdout@@Base+0x1284>
   13074:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13078:	ldrdeq	r0, [r0], -ip
   1307c:	mov	r2, r1
   13080:	mov	r1, r0
   13084:	mov	r0, #0
   13088:	b	13060 <close_stdout@@Base+0x1ae4>
   1308c:	mvn	r2, #0
   13090:	b	13060 <close_stdout@@Base+0x1ae4>
   13094:	mov	r1, r0
   13098:	mov	r0, #0
   1309c:	b	1308c <close_stdout@@Base+0x1b10>
   130a0:	push	{r4, r5, r6, r7, lr}
   130a4:	cmp	r1, #0
   130a8:	sub	sp, sp, #36	; 0x24
   130ac:	ldr	r7, [pc, #896]	; 13434 <close_stdout@@Base+0x1eb8>
   130b0:	mov	ip, r3
   130b4:	mov	r5, r0
   130b8:	add	r7, pc, r7
   130bc:	ldr	r4, [sp, #56]	; 0x38
   130c0:	ldr	r6, [sp, #60]	; 0x3c
   130c4:	beq	13408 <close_stdout@@Base+0x1e8c>
   130c8:	str	r2, [sp]
   130cc:	mov	r3, r1
   130d0:	ldr	r2, [pc, #864]	; 13438 <close_stdout@@Base+0x1ebc>
   130d4:	mov	r1, #1
   130d8:	str	ip, [sp, #4]
   130dc:	add	r2, pc, r2
   130e0:	bl	11068 <__fprintf_chk@plt>
   130e4:	ldr	r1, [pc, #848]	; 1343c <close_stdout@@Base+0x1ec0>
   130e8:	mov	r2, #5
   130ec:	mov	r0, #0
   130f0:	add	r1, pc, r1
   130f4:	bl	10f0c <dcgettext@plt>
   130f8:	ldr	r2, [pc, #832]	; 13440 <close_stdout@@Base+0x1ec4>
   130fc:	movw	ip, #2013	; 0x7dd
   13100:	mov	r1, #1
   13104:	ldr	r2, [r7, r2]
   13108:	str	ip, [sp]
   1310c:	mov	r3, r0
   13110:	mov	r0, r5
   13114:	bl	11068 <__fprintf_chk@plt>
   13118:	ldr	r1, [pc, #804]	; 13444 <close_stdout@@Base+0x1ec8>
   1311c:	mov	r0, #0
   13120:	mov	r2, #5
   13124:	add	r1, pc, r1
   13128:	bl	10f0c <dcgettext@plt>
   1312c:	mov	r1, r5
   13130:	bl	10e94 <fputs_unlocked@plt>
   13134:	cmp	r6, #9
   13138:	addls	pc, pc, r6, lsl #2
   1313c:	b	13424 <close_stdout@@Base+0x1ea8>
   13140:	b	131d4 <close_stdout@@Base+0x1c58>
   13144:	b	131d8 <close_stdout@@Base+0x1c5c>
   13148:	b	13208 <close_stdout@@Base+0x1c8c>
   1314c:	b	1323c <close_stdout@@Base+0x1cc0>
   13150:	b	13278 <close_stdout@@Base+0x1cfc>
   13154:	b	132b8 <close_stdout@@Base+0x1d3c>
   13158:	b	13300 <close_stdout@@Base+0x1d84>
   1315c:	b	13350 <close_stdout@@Base+0x1dd4>
   13160:	b	133a8 <close_stdout@@Base+0x1e2c>
   13164:	b	13168 <close_stdout@@Base+0x1bec>
   13168:	ldr	r1, [pc, #728]	; 13448 <close_stdout@@Base+0x1ecc>
   1316c:	mov	r0, #0
   13170:	add	r1, pc, r1
   13174:	mov	r2, #5
   13178:	bl	10f0c <dcgettext@plt>
   1317c:	ldm	r4, {r3, ip}
   13180:	mov	r1, #1
   13184:	str	ip, [sp]
   13188:	ldr	ip, [r4, #8]
   1318c:	str	ip, [sp, #4]
   13190:	ldr	ip, [r4, #12]
   13194:	str	ip, [sp, #8]
   13198:	ldr	ip, [r4, #16]
   1319c:	str	ip, [sp, #12]
   131a0:	ldr	ip, [r4, #20]
   131a4:	str	ip, [sp, #16]
   131a8:	ldr	ip, [r4, #24]
   131ac:	str	ip, [sp, #20]
   131b0:	ldr	ip, [r4, #28]
   131b4:	str	ip, [sp, #24]
   131b8:	ldr	ip, [r4, #32]
   131bc:	str	ip, [sp, #28]
   131c0:	mov	r2, r0
   131c4:	mov	r0, r5
   131c8:	bl	11068 <__fprintf_chk@plt>
   131cc:	add	sp, sp, #36	; 0x24
   131d0:	pop	{r4, r5, r6, r7, pc}
   131d4:	bl	110d4 <abort@plt>
   131d8:	ldr	r1, [pc, #620]	; 1344c <close_stdout@@Base+0x1ed0>
   131dc:	mov	r2, #5
   131e0:	mov	r0, #0
   131e4:	add	r1, pc, r1
   131e8:	bl	10f0c <dcgettext@plt>
   131ec:	ldr	r3, [r4]
   131f0:	mov	r1, #1
   131f4:	mov	r2, r0
   131f8:	mov	r0, r5
   131fc:	add	sp, sp, #36	; 0x24
   13200:	pop	{r4, r5, r6, r7, lr}
   13204:	b	11068 <__fprintf_chk@plt>
   13208:	ldr	r1, [pc, #576]	; 13450 <close_stdout@@Base+0x1ed4>
   1320c:	mov	r2, #5
   13210:	mov	r0, #0
   13214:	add	r1, pc, r1
   13218:	bl	10f0c <dcgettext@plt>
   1321c:	ldm	r4, {r3, ip}
   13220:	mov	r1, #1
   13224:	str	ip, [sp, #56]	; 0x38
   13228:	mov	r2, r0
   1322c:	mov	r0, r5
   13230:	add	sp, sp, #36	; 0x24
   13234:	pop	{r4, r5, r6, r7, lr}
   13238:	b	11068 <__fprintf_chk@plt>
   1323c:	ldr	r1, [pc, #528]	; 13454 <close_stdout@@Base+0x1ed8>
   13240:	mov	r2, #5
   13244:	mov	r0, #0
   13248:	add	r1, pc, r1
   1324c:	bl	10f0c <dcgettext@plt>
   13250:	ldm	r4, {r3, ip}
   13254:	mov	r1, #1
   13258:	str	ip, [sp, #56]	; 0x38
   1325c:	ldr	ip, [r4, #8]
   13260:	str	ip, [sp, #60]	; 0x3c
   13264:	mov	r2, r0
   13268:	mov	r0, r5
   1326c:	add	sp, sp, #36	; 0x24
   13270:	pop	{r4, r5, r6, r7, lr}
   13274:	b	11068 <__fprintf_chk@plt>
   13278:	ldr	r1, [pc, #472]	; 13458 <close_stdout@@Base+0x1edc>
   1327c:	mov	r2, #5
   13280:	mov	r0, #0
   13284:	add	r1, pc, r1
   13288:	bl	10f0c <dcgettext@plt>
   1328c:	ldm	r4, {r3, ip}
   13290:	mov	r1, #1
   13294:	str	ip, [sp]
   13298:	ldr	ip, [r4, #8]
   1329c:	str	ip, [sp, #4]
   132a0:	ldr	ip, [r4, #12]
   132a4:	str	ip, [sp, #8]
   132a8:	mov	r2, r0
   132ac:	mov	r0, r5
   132b0:	bl	11068 <__fprintf_chk@plt>
   132b4:	b	131cc <close_stdout@@Base+0x1c50>
   132b8:	ldr	r1, [pc, #412]	; 1345c <close_stdout@@Base+0x1ee0>
   132bc:	mov	r2, #5
   132c0:	mov	r0, #0
   132c4:	add	r1, pc, r1
   132c8:	bl	10f0c <dcgettext@plt>
   132cc:	ldm	r4, {r3, ip}
   132d0:	mov	r1, #1
   132d4:	str	ip, [sp]
   132d8:	ldr	ip, [r4, #8]
   132dc:	str	ip, [sp, #4]
   132e0:	ldr	ip, [r4, #12]
   132e4:	str	ip, [sp, #8]
   132e8:	ldr	ip, [r4, #16]
   132ec:	str	ip, [sp, #12]
   132f0:	mov	r2, r0
   132f4:	mov	r0, r5
   132f8:	bl	11068 <__fprintf_chk@plt>
   132fc:	b	131cc <close_stdout@@Base+0x1c50>
   13300:	ldr	r1, [pc, #344]	; 13460 <close_stdout@@Base+0x1ee4>
   13304:	mov	r2, #5
   13308:	mov	r0, #0
   1330c:	add	r1, pc, r1
   13310:	bl	10f0c <dcgettext@plt>
   13314:	ldm	r4, {r3, ip}
   13318:	mov	r1, #1
   1331c:	str	ip, [sp]
   13320:	ldr	ip, [r4, #8]
   13324:	str	ip, [sp, #4]
   13328:	ldr	ip, [r4, #12]
   1332c:	str	ip, [sp, #8]
   13330:	ldr	ip, [r4, #16]
   13334:	str	ip, [sp, #12]
   13338:	ldr	ip, [r4, #20]
   1333c:	str	ip, [sp, #16]
   13340:	mov	r2, r0
   13344:	mov	r0, r5
   13348:	bl	11068 <__fprintf_chk@plt>
   1334c:	b	131cc <close_stdout@@Base+0x1c50>
   13350:	ldr	r1, [pc, #268]	; 13464 <close_stdout@@Base+0x1ee8>
   13354:	mov	r2, #5
   13358:	mov	r0, #0
   1335c:	add	r1, pc, r1
   13360:	bl	10f0c <dcgettext@plt>
   13364:	ldm	r4, {r3, ip}
   13368:	mov	r1, #1
   1336c:	str	ip, [sp]
   13370:	ldr	ip, [r4, #8]
   13374:	str	ip, [sp, #4]
   13378:	ldr	ip, [r4, #12]
   1337c:	str	ip, [sp, #8]
   13380:	ldr	ip, [r4, #16]
   13384:	str	ip, [sp, #12]
   13388:	ldr	ip, [r4, #20]
   1338c:	str	ip, [sp, #16]
   13390:	ldr	ip, [r4, #24]
   13394:	str	ip, [sp, #20]
   13398:	mov	r2, r0
   1339c:	mov	r0, r5
   133a0:	bl	11068 <__fprintf_chk@plt>
   133a4:	b	131cc <close_stdout@@Base+0x1c50>
   133a8:	ldr	r1, [pc, #184]	; 13468 <close_stdout@@Base+0x1eec>
   133ac:	mov	r2, #5
   133b0:	mov	r0, #0
   133b4:	add	r1, pc, r1
   133b8:	bl	10f0c <dcgettext@plt>
   133bc:	ldm	r4, {r3, ip}
   133c0:	mov	r1, #1
   133c4:	str	ip, [sp]
   133c8:	ldr	ip, [r4, #8]
   133cc:	str	ip, [sp, #4]
   133d0:	ldr	ip, [r4, #12]
   133d4:	str	ip, [sp, #8]
   133d8:	ldr	ip, [r4, #16]
   133dc:	str	ip, [sp, #12]
   133e0:	ldr	ip, [r4, #20]
   133e4:	str	ip, [sp, #16]
   133e8:	ldr	ip, [r4, #24]
   133ec:	str	ip, [sp, #20]
   133f0:	ldr	ip, [r4, #28]
   133f4:	str	ip, [sp, #24]
   133f8:	mov	r2, r0
   133fc:	mov	r0, r5
   13400:	bl	11068 <__fprintf_chk@plt>
   13404:	b	131cc <close_stdout@@Base+0x1c50>
   13408:	str	r3, [sp]
   1340c:	mov	r3, r2
   13410:	ldr	r2, [pc, #84]	; 1346c <close_stdout@@Base+0x1ef0>
   13414:	mov	r1, #1
   13418:	add	r2, pc, r2
   1341c:	bl	11068 <__fprintf_chk@plt>
   13420:	b	130e4 <close_stdout@@Base+0x1b68>
   13424:	ldr	r1, [pc, #68]	; 13470 <close_stdout@@Base+0x1ef4>
   13428:	mov	r0, #0
   1342c:	add	r1, pc, r1
   13430:	b	13174 <close_stdout@@Base+0x1bf8>
   13434:	andeq	r1, r1, r0, asr #30
   13438:	ldrdeq	r1, [r0], -r8
   1343c:	ldrdeq	r1, [r0], -r8
   13440:	andeq	r0, r0, r0, lsl r1
   13444:	andeq	r1, r0, r8, lsr #7
   13448:	andeq	r1, r0, r4, lsr r5
   1344c:			; <UNDEFINED> instruction: 0x000013b4
   13450:	muleq	r0, r4, r3
   13454:	andeq	r1, r0, r8, ror r3
   13458:	andeq	r1, r0, r8, asr r3
   1345c:	andeq	r1, r0, r8, lsr r3
   13460:	andeq	r1, r0, r4, lsl r3
   13464:	andeq	r1, r0, ip, ror #5
   13468:	andeq	r1, r0, r0, asr #5
   1346c:	andeq	r1, r0, r8, lsr #1
   13470:	andeq	r1, r0, ip, lsr #5
   13474:	push	{r4, r5, lr}
   13478:	sub	sp, sp, #12
   1347c:	ldr	r5, [sp, #24]
   13480:	ldr	ip, [r5]
   13484:	cmp	ip, #0
   13488:	beq	134a4 <close_stdout@@Base+0x1f28>
   1348c:	mov	lr, r5
   13490:	mov	ip, #0
   13494:	ldr	r4, [lr, #4]!
   13498:	add	ip, ip, #1
   1349c:	cmp	r4, #0
   134a0:	bne	13494 <close_stdout@@Base+0x1f18>
   134a4:	stm	sp, {r5, ip}
   134a8:	bl	130a0 <close_stdout@@Base+0x1b24>
   134ac:	add	sp, sp, #12
   134b0:	pop	{r4, r5, pc}
   134b4:	push	{r4, r5, r6, r7, lr}
   134b8:	sub	sp, sp, #60	; 0x3c
   134bc:	ldr	r4, [pc, #100]	; 13528 <close_stdout@@Base+0x1fac>
   134c0:	mov	ip, #0
   134c4:	ldr	r5, [pc, #96]	; 1352c <close_stdout@@Base+0x1fb0>
   134c8:	mov	lr, ip
   134cc:	add	r4, pc, r4
   134d0:	ldr	r6, [sp, #80]	; 0x50
   134d4:	ldr	r7, [r4, r5]
   134d8:	add	r5, sp, #12
   134dc:	ldr	r4, [r7]
   134e0:	str	r4, [sp, #52]	; 0x34
   134e4:	ldr	r4, [r6, ip]
   134e8:	cmp	r4, #0
   134ec:	str	r4, [r5, ip]
   134f0:	beq	13504 <close_stdout@@Base+0x1f88>
   134f4:	add	lr, lr, #1
   134f8:	add	ip, ip, #4
   134fc:	cmp	lr, #10
   13500:	bne	134e4 <close_stdout@@Base+0x1f68>
   13504:	stm	sp, {r5, lr}
   13508:	bl	130a0 <close_stdout@@Base+0x1b24>
   1350c:	ldr	r2, [sp, #52]	; 0x34
   13510:	ldr	r3, [r7]
   13514:	cmp	r2, r3
   13518:	bne	13524 <close_stdout@@Base+0x1fa8>
   1351c:	add	sp, sp, #60	; 0x3c
   13520:	pop	{r4, r5, r6, r7, pc}
   13524:	bl	10f18 <__stack_chk_fail@plt>
   13528:	andeq	r1, r1, ip, lsr #22
   1352c:	andeq	r0, r0, r0, ror #1
   13530:	push	{r3}		; (str r3, [sp, #-4]!)
   13534:	push	{r4, lr}
   13538:	sub	sp, sp, #20
   1353c:	ldr	lr, [pc, #72]	; 1358c <close_stdout@@Base+0x2010>
   13540:	add	ip, sp, #32
   13544:	ldr	r4, [pc, #68]	; 13590 <close_stdout@@Base+0x2014>
   13548:	add	lr, pc, lr
   1354c:	ldr	r3, [sp, #28]
   13550:	ldr	r4, [lr, r4]
   13554:	str	ip, [sp]
   13558:	str	ip, [sp, #8]
   1355c:	ldr	ip, [r4]
   13560:	str	ip, [sp, #12]
   13564:	bl	134b4 <close_stdout@@Base+0x1f38>
   13568:	ldr	r2, [sp, #12]
   1356c:	ldr	r3, [r4]
   13570:	cmp	r2, r3
   13574:	bne	13588 <close_stdout@@Base+0x200c>
   13578:	add	sp, sp, #20
   1357c:	pop	{r4, lr}
   13580:	add	sp, sp, #4
   13584:	bx	lr
   13588:	bl	10f18 <__stack_chk_fail@plt>
   1358c:			; <UNDEFINED> instruction: 0x00011ab0
   13590:	andeq	r0, r0, r0, ror #1
   13594:	ldr	r1, [pc, #132]	; 13620 <close_stdout@@Base+0x20a4>
   13598:	mov	r2, #5
   1359c:	push	{r4, lr}
   135a0:	add	r1, pc, r1
   135a4:	mov	r0, #0
   135a8:	ldr	r4, [pc, #116]	; 13624 <close_stdout@@Base+0x20a8>
   135ac:	bl	10f0c <dcgettext@plt>
   135b0:	ldr	r2, [pc, #112]	; 13628 <close_stdout@@Base+0x20ac>
   135b4:	add	r4, pc, r4
   135b8:	add	r2, pc, r2
   135bc:	mov	r1, r0
   135c0:	mov	r0, #1
   135c4:	bl	11050 <__printf_chk@plt>
   135c8:	ldr	r1, [pc, #92]	; 1362c <close_stdout@@Base+0x20b0>
   135cc:	mov	r2, #5
   135d0:	mov	r0, #0
   135d4:	add	r1, pc, r1
   135d8:	bl	10f0c <dcgettext@plt>
   135dc:	ldr	r2, [pc, #76]	; 13630 <close_stdout@@Base+0x20b4>
   135e0:	ldr	r3, [pc, #76]	; 13634 <close_stdout@@Base+0x20b8>
   135e4:	add	r2, pc, r2
   135e8:	add	r3, pc, r3
   135ec:	mov	r1, r0
   135f0:	mov	r0, #1
   135f4:	bl	11050 <__printf_chk@plt>
   135f8:	ldr	r1, [pc, #56]	; 13638 <close_stdout@@Base+0x20bc>
   135fc:	mov	r0, #0
   13600:	mov	r2, #5
   13604:	add	r1, pc, r1
   13608:	bl	10f0c <dcgettext@plt>
   1360c:	ldr	r3, [pc, #40]	; 1363c <close_stdout@@Base+0x20c0>
   13610:	ldr	r3, [r4, r3]
   13614:	pop	{r4, lr}
   13618:	ldr	r1, [r3]
   1361c:	b	10e94 <fputs_unlocked@plt>
   13620:	andeq	r1, r0, r4, ror r1
   13624:	andeq	r1, r1, r4, asr #20
   13628:	andeq	r1, r0, r4, ror r1
   1362c:	andeq	r1, r0, r0, ror r1
   13630:	andeq	r0, r0, ip, asr #25
   13634:	ldrdeq	r0, [r0], -r8
   13638:	andeq	r1, r0, r4, asr r1
   1363c:	strdeq	r0, [r0], -ip
   13640:	push	{r4, lr}
   13644:	mov	r4, r0
   13648:	bl	10fb4 <malloc@plt>
   1364c:	rsbs	r3, r0, #1
   13650:	movcc	r3, #0
   13654:	cmp	r4, #0
   13658:	moveq	r3, #0
   1365c:	cmp	r3, #0
   13660:	popeq	{r4, pc}
   13664:	bl	13854 <close_stdout@@Base+0x22d8>
   13668:	push	{r3, r4, r5, lr}
   1366c:	mov	r4, r0
   13670:	mvn	r0, #0
   13674:	mov	r5, r1
   13678:	bl	13ef4 <close_stdout@@Base+0x2978>
   1367c:	cmp	r0, r4
   13680:	bcc	13690 <close_stdout@@Base+0x2114>
   13684:	mul	r0, r4, r5
   13688:	pop	{r3, r4, r5, lr}
   1368c:	b	13640 <close_stdout@@Base+0x20c4>
   13690:	bl	13854 <close_stdout@@Base+0x22d8>
   13694:	b	13640 <close_stdout@@Base+0x20c4>
   13698:	rsbs	r3, r1, #1
   1369c:	push	{r4, lr}
   136a0:	movcc	r3, #0
   136a4:	cmp	r0, #0
   136a8:	mov	r4, r1
   136ac:	moveq	r3, #0
   136b0:	cmp	r3, #0
   136b4:	bne	136d8 <close_stdout@@Base+0x215c>
   136b8:	bl	10f24 <realloc@plt>
   136bc:	rsbs	r3, r0, #1
   136c0:	movcc	r3, #0
   136c4:	cmp	r4, #0
   136c8:	moveq	r3, #0
   136cc:	cmp	r3, #0
   136d0:	popeq	{r4, pc}
   136d4:	bl	13854 <close_stdout@@Base+0x22d8>
   136d8:	bl	10ec4 <free@plt>
   136dc:	mov	r0, #0
   136e0:	pop	{r4, pc}
   136e4:	push	{r4, r5, r6, lr}
   136e8:	mov	r5, r1
   136ec:	mov	r6, r0
   136f0:	mov	r1, r2
   136f4:	mvn	r0, #0
   136f8:	mov	r4, r2
   136fc:	bl	13ef4 <close_stdout@@Base+0x2978>
   13700:	cmp	r0, r5
   13704:	bcc	13718 <close_stdout@@Base+0x219c>
   13708:	mov	r0, r6
   1370c:	mul	r1, r5, r4
   13710:	pop	{r4, r5, r6, lr}
   13714:	b	13698 <close_stdout@@Base+0x211c>
   13718:	bl	13854 <close_stdout@@Base+0x22d8>
   1371c:	push	{r3, r4, r5, r6, r7, lr}
   13720:	subs	r7, r0, #0
   13724:	mov	r5, r1
   13728:	mov	r6, r2
   1372c:	ldr	r4, [r1]
   13730:	beq	13768 <close_stdout@@Base+0x21ec>
   13734:	movw	r0, #43690	; 0xaaaa
   13738:	mov	r1, r2
   1373c:	bfi	r0, r0, #16, #16
   13740:	bl	13ef4 <close_stdout@@Base+0x2978>
   13744:	cmp	r4, r0
   13748:	addcc	r3, r4, #1
   1374c:	addcc	r4, r4, r3, lsr #1
   13750:	bcs	1378c <close_stdout@@Base+0x2210>
   13754:	str	r4, [r5]
   13758:	mov	r0, r7
   1375c:	mul	r1, r6, r4
   13760:	pop	{r3, r4, r5, r6, r7, lr}
   13764:	b	13698 <close_stdout@@Base+0x211c>
   13768:	cmp	r4, #0
   1376c:	bne	13754 <close_stdout@@Base+0x21d8>
   13770:	mov	r0, #64	; 0x40
   13774:	mov	r1, r2
   13778:	bl	13ef4 <close_stdout@@Base+0x2978>
   1377c:	cmp	r0, #0
   13780:	movne	r4, r0
   13784:	addeq	r4, r0, #1
   13788:	b	13754 <close_stdout@@Base+0x21d8>
   1378c:	bl	13854 <close_stdout@@Base+0x22d8>
   13790:	cmp	r0, #0
   13794:	push	{r3, lr}
   13798:	ldr	r3, [r1]
   1379c:	beq	137c8 <close_stdout@@Base+0x224c>
   137a0:	movw	r2, #43689	; 0xaaa9
   137a4:	movt	r2, #43690	; 0xaaaa
   137a8:	cmp	r3, r2
   137ac:	addls	r2, r3, #1
   137b0:	addls	r3, r3, r2, lsr #1
   137b4:	bhi	137e0 <close_stdout@@Base+0x2264>
   137b8:	str	r3, [r1]
   137bc:	mov	r1, r3
   137c0:	pop	{r3, lr}
   137c4:	b	13698 <close_stdout@@Base+0x211c>
   137c8:	cmp	r3, #0
   137cc:	moveq	r3, #64	; 0x40
   137d0:	str	r3, [r1]
   137d4:	mov	r1, r3
   137d8:	pop	{r3, lr}
   137dc:	b	13698 <close_stdout@@Base+0x211c>
   137e0:	bl	13854 <close_stdout@@Base+0x22d8>
   137e4:	push	{r4, lr}
   137e8:	mov	r4, r0
   137ec:	bl	13640 <close_stdout@@Base+0x20c4>
   137f0:	mov	r2, r4
   137f4:	mov	r1, #0
   137f8:	pop	{r4, lr}
   137fc:	b	11038 <memset@plt>
   13800:	push	{r3, lr}
   13804:	bl	10e88 <calloc@plt>
   13808:	cmp	r0, #0
   1380c:	popne	{r3, pc}
   13810:	bl	13854 <close_stdout@@Base+0x22d8>
   13814:	push	{r3, r4, r5, lr}
   13818:	mov	r4, r1
   1381c:	mov	r5, r0
   13820:	mov	r0, r1
   13824:	bl	13640 <close_stdout@@Base+0x20c4>
   13828:	mov	r1, r5
   1382c:	mov	r2, r4
   13830:	pop	{r3, r4, r5, lr}
   13834:	b	10edc <memcpy@plt>
   13838:	push	{r4, lr}
   1383c:	mov	r4, r0
   13840:	bl	11008 <strlen@plt>
   13844:	add	r1, r0, #1
   13848:	mov	r0, r4
   1384c:	pop	{r4, lr}
   13850:	b	13814 <close_stdout@@Base+0x2298>
   13854:	ldr	r3, [pc, #64]	; 1389c <close_stdout@@Base+0x2320>
   13858:	mov	r2, #5
   1385c:	ldr	ip, [pc, #60]	; 138a0 <close_stdout@@Base+0x2324>
   13860:	mov	r0, #0
   13864:	add	r3, pc, r3
   13868:	ldr	r1, [pc, #52]	; 138a4 <close_stdout@@Base+0x2328>
   1386c:	push	{r4, lr}
   13870:	add	r1, pc, r1
   13874:	ldr	r3, [r3, ip]
   13878:	ldr	r4, [r3]
   1387c:	bl	10f0c <dcgettext@plt>
   13880:	ldr	r2, [pc, #32]	; 138a8 <close_stdout@@Base+0x232c>
   13884:	mov	r1, #0
   13888:	add	r2, pc, r2
   1388c:	mov	r3, r0
   13890:	mov	r0, r4
   13894:	bl	10f90 <error@plt>
   13898:	bl	110d4 <abort@plt>
   1389c:	muleq	r1, r4, r7
   138a0:	andeq	r0, r0, r4, lsl #2
   138a4:	andeq	r0, r0, r8, asr pc
   138a8:	andeq	r0, r0, r0, asr fp
   138ac:	push	{r4, r5, r6, lr}
   138b0:	mov	r4, r0
   138b4:	bl	10f78 <__fpending@plt>
   138b8:	mov	r6, r0
   138bc:	mov	r0, r4
   138c0:	ldr	r4, [r4]
   138c4:	bl	13d4c <close_stdout@@Base+0x27d0>
   138c8:	and	r4, r4, #32
   138cc:	adds	r5, r0, #0
   138d0:	movne	r5, #1
   138d4:	cmp	r4, #0
   138d8:	bne	138f8 <close_stdout@@Base+0x237c>
   138dc:	cmp	r5, #0
   138e0:	beq	138f0 <close_stdout@@Base+0x2374>
   138e4:	cmp	r6, #0
   138e8:	beq	13914 <close_stdout@@Base+0x2398>
   138ec:	mvn	r4, #0
   138f0:	mov	r0, r4
   138f4:	pop	{r4, r5, r6, pc}
   138f8:	cmp	r5, #0
   138fc:	bne	138ec <close_stdout@@Base+0x2370>
   13900:	bl	11020 <__errno_location@plt>
   13904:	mvn	r4, #0
   13908:	str	r5, [r0]
   1390c:	mov	r0, r4
   13910:	pop	{r4, r5, r6, pc}
   13914:	bl	11020 <__errno_location@plt>
   13918:	ldr	r4, [r0]
   1391c:	subs	r4, r4, #9
   13920:	mvnne	r4, #0
   13924:	mov	r0, r4
   13928:	pop	{r4, r5, r6, pc}
   1392c:	ldr	r3, [pc, #984]	; 13d0c <close_stdout@@Base+0x2790>
   13930:	mov	r0, #14
   13934:	ldr	r2, [pc, #980]	; 13d10 <close_stdout@@Base+0x2794>
   13938:	add	r3, pc, r3
   1393c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13940:	sub	sp, sp, #132	; 0x84
   13944:	ldr	r6, [r3, r2]
   13948:	ldr	r3, [r6]
   1394c:	str	r3, [sp, #124]	; 0x7c
   13950:	bl	110b0 <nl_langinfo@plt>
   13954:	subs	r5, r0, #0
   13958:	beq	13a0c <close_stdout@@Base+0x2490>
   1395c:	ldr	r3, [pc, #944]	; 13d14 <close_stdout@@Base+0x2798>
   13960:	ldr	r4, [pc, r3]
   13964:	cmp	r4, #0
   13968:	beq	13a18 <close_stdout@@Base+0x249c>
   1396c:	ldrb	r7, [r4]
   13970:	cmp	r7, #0
   13974:	bne	139a8 <close_stdout@@Base+0x242c>
   13978:	b	139e0 <close_stdout@@Base+0x2464>
   1397c:	mov	r0, r4
   13980:	bl	11008 <strlen@plt>
   13984:	add	r0, r0, #1
   13988:	add	r7, r4, r0
   1398c:	mov	r0, r7
   13990:	bl	11008 <strlen@plt>
   13994:	add	r0, r0, #1
   13998:	add	r4, r7, r0
   1399c:	ldrb	r7, [r7, r0]
   139a0:	cmp	r7, #0
   139a4:	beq	139e0 <close_stdout@@Base+0x2464>
   139a8:	mov	r0, r5
   139ac:	mov	r1, r4
   139b0:	bl	10eac <strcmp@plt>
   139b4:	cmp	r0, #0
   139b8:	beq	139d0 <close_stdout@@Base+0x2454>
   139bc:	cmp	r7, #42	; 0x2a
   139c0:	bne	1397c <close_stdout@@Base+0x2400>
   139c4:	ldrb	r3, [r4, #1]
   139c8:	cmp	r3, #0
   139cc:	bne	1397c <close_stdout@@Base+0x2400>
   139d0:	mov	r0, r4
   139d4:	bl	11008 <strlen@plt>
   139d8:	add	r0, r0, #1
   139dc:	add	r5, r4, r0
   139e0:	ldrb	r3, [r5]
   139e4:	cmp	r3, #0
   139e8:	ldreq	r5, [pc, #808]	; 13d18 <close_stdout@@Base+0x279c>
   139ec:	addeq	r5, pc, r5
   139f0:	ldr	r2, [sp, #124]	; 0x7c
   139f4:	mov	r0, r5
   139f8:	ldr	r3, [r6]
   139fc:	cmp	r2, r3
   13a00:	bne	13ce0 <close_stdout@@Base+0x2764>
   13a04:	add	sp, sp, #132	; 0x84
   13a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a0c:	ldr	r5, [pc, #776]	; 13d1c <close_stdout@@Base+0x27a0>
   13a10:	add	r5, pc, r5
   13a14:	b	1395c <close_stdout@@Base+0x23e0>
   13a18:	ldr	r0, [pc, #768]	; 13d20 <close_stdout@@Base+0x27a4>
   13a1c:	add	r0, pc, r0
   13a20:	bl	10fa8 <getenv@plt>
   13a24:	subs	r8, r0, #0
   13a28:	beq	13cb8 <close_stdout@@Base+0x273c>
   13a2c:	ldrb	r3, [r8]
   13a30:	cmp	r3, #0
   13a34:	beq	13c4c <close_stdout@@Base+0x26d0>
   13a38:	bl	11008 <strlen@plt>
   13a3c:	subs	sl, r0, #0
   13a40:	subne	r3, sl, #1
   13a44:	bne	13c5c <close_stdout@@Base+0x26e0>
   13a48:	mov	r9, #0
   13a4c:	mov	fp, r9
   13a50:	add	r9, sl, r9
   13a54:	add	r0, r9, #14
   13a58:	bl	10fb4 <malloc@plt>
   13a5c:	subs	r7, r0, #0
   13a60:	beq	13cac <close_stdout@@Base+0x2730>
   13a64:	mov	r1, r8
   13a68:	mov	r2, sl
   13a6c:	bl	10edc <memcpy@plt>
   13a70:	cmp	fp, #0
   13a74:	add	ip, r7, r9
   13a78:	movne	r3, #47	; 0x2f
   13a7c:	strbne	r3, [r7, sl]
   13a80:	ldr	r3, [pc, #668]	; 13d24 <close_stdout@@Base+0x27a8>
   13a84:	add	r3, pc, r3
   13a88:	ldm	r3!, {r0, r1, r2}
   13a8c:	ldrh	r3, [r3]
   13a90:	str	r0, [r7, r9]
   13a94:	mov	r0, r7
   13a98:	str	r1, [ip, #4]
   13a9c:	mov	r1, #32768	; 0x8000
   13aa0:	strh	r3, [ip, #12]
   13aa4:	str	r2, [ip, #8]
   13aa8:	bl	10f9c <open64@plt>
   13aac:	subs	r8, r0, #0
   13ab0:	blt	13c74 <close_stdout@@Base+0x26f8>
   13ab4:	ldr	r1, [pc, #620]	; 13d28 <close_stdout@@Base+0x27ac>
   13ab8:	add	r1, pc, r1
   13abc:	bl	10e7c <fdopen@plt>
   13ac0:	subs	fp, r0, #0
   13ac4:	beq	13ccc <close_stdout@@Base+0x2750>
   13ac8:	ldr	r0, [pc, #604]	; 13d2c <close_stdout@@Base+0x27b0>
   13acc:	add	sl, sp, #20
   13ad0:	add	r9, sp, #72	; 0x48
   13ad4:	mov	r8, #0
   13ad8:	add	r0, pc, r0
   13adc:	str	r0, [sp, #12]
   13ae0:	ldr	r3, [fp, #4]
   13ae4:	ldr	r2, [fp, #8]
   13ae8:	cmp	r3, r2
   13aec:	bcs	13bd8 <close_stdout@@Base+0x265c>
   13af0:	add	r2, r3, #1
   13af4:	str	r2, [fp, #4]
   13af8:	ldrb	r0, [r3]
   13afc:	cmp	r0, #32
   13b00:	beq	13ae0 <close_stdout@@Base+0x2564>
   13b04:	sub	r3, r0, #9
   13b08:	cmp	r3, #1
   13b0c:	bls	13ae0 <close_stdout@@Base+0x2564>
   13b10:	cmp	r0, #35	; 0x23
   13b14:	beq	13bec <close_stdout@@Base+0x2670>
   13b18:	mov	r1, fp
   13b1c:	bl	11014 <ungetc@plt>
   13b20:	mov	r0, fp
   13b24:	ldr	r1, [sp, #12]
   13b28:	mov	r2, sl
   13b2c:	mov	r3, r9
   13b30:	bl	11044 <fscanf@plt>
   13b34:	cmp	r0, #1
   13b38:	ble	13c1c <close_stdout@@Base+0x26a0>
   13b3c:	mov	r0, sl
   13b40:	bl	11008 <strlen@plt>
   13b44:	str	r0, [sp, #8]
   13b48:	mov	r0, r9
   13b4c:	bl	11008 <strlen@plt>
   13b50:	cmp	r8, #0
   13b54:	mov	r2, r0
   13b58:	bne	13c80 <close_stdout@@Base+0x2704>
   13b5c:	ldr	r3, [sp, #8]
   13b60:	str	r2, [sp]
   13b64:	add	r8, r0, r3
   13b68:	add	r0, r8, #3
   13b6c:	add	r8, r8, #2
   13b70:	bl	10fb4 <malloc@plt>
   13b74:	ldr	r2, [sp]
   13b78:	mov	r3, r0
   13b7c:	cmp	r3, #0
   13b80:	beq	13ce4 <close_stdout@@Base+0x2768>
   13b84:	ldr	r0, [sp, #8]
   13b88:	movw	r1, #65534	; 0xfffe
   13b8c:	movt	r1, #65535	; 0xffff
   13b90:	rsb	r2, r2, r8
   13b94:	rsb	r1, r0, r1
   13b98:	stm	sp, {r2, r3}
   13b9c:	add	r0, r1, r2
   13ba0:	mov	r1, sl
   13ba4:	add	r0, r3, r0
   13ba8:	mov	r4, r3
   13bac:	bl	10f6c <strcpy@plt>
   13bb0:	ldr	r2, [sp]
   13bb4:	ldr	r3, [sp, #4]
   13bb8:	mov	r1, r9
   13bbc:	sub	r0, r2, #1
   13bc0:	add	r0, r3, r0
   13bc4:	bl	10f6c <strcpy@plt>
   13bc8:	ldr	r3, [fp, #4]
   13bcc:	ldr	r2, [fp, #8]
   13bd0:	cmp	r3, r2
   13bd4:	bcc	13af0 <close_stdout@@Base+0x2574>
   13bd8:	mov	r0, fp
   13bdc:	bl	1108c <__uflow@plt>
   13be0:	cmn	r0, #1
   13be4:	beq	13c1c <close_stdout@@Base+0x26a0>
   13be8:	b	13afc <close_stdout@@Base+0x2580>
   13bec:	ldr	r3, [fp, #4]
   13bf0:	ldr	r2, [fp, #8]
   13bf4:	cmp	r3, r2
   13bf8:	bcs	13d00 <close_stdout@@Base+0x2784>
   13bfc:	add	r2, r3, #1
   13c00:	str	r2, [fp, #4]
   13c04:	ldrb	r0, [r3]
   13c08:	cmp	r0, #10
   13c0c:	cmnne	r0, #1
   13c10:	bne	13bec <close_stdout@@Base+0x2670>
   13c14:	cmn	r0, #1
   13c18:	bne	13ae0 <close_stdout@@Base+0x2564>
   13c1c:	mov	r0, fp
   13c20:	bl	13d4c <close_stdout@@Base+0x27d0>
   13c24:	cmp	r8, #0
   13c28:	beq	13c74 <close_stdout@@Base+0x26f8>
   13c2c:	mov	r3, #0
   13c30:	strb	r3, [r4, r8]
   13c34:	mov	r0, r7
   13c38:	bl	10ec4 <free@plt>
   13c3c:	ldr	r3, [pc, #236]	; 13d30 <close_stdout@@Base+0x27b4>
   13c40:	add	r3, pc, r3
   13c44:	str	r4, [r3]
   13c48:	b	1396c <close_stdout@@Base+0x23f0>
   13c4c:	ldr	r8, [pc, #224]	; 13d34 <close_stdout@@Base+0x27b8>
   13c50:	mov	r3, #7
   13c54:	mov	sl, #8
   13c58:	add	r8, pc, r8
   13c5c:	ldrb	r3, [r8, r3]
   13c60:	cmp	r3, #47	; 0x2f
   13c64:	movne	r9, #1
   13c68:	movne	fp, r9
   13c6c:	bne	13a50 <close_stdout@@Base+0x24d4>
   13c70:	b	13a48 <close_stdout@@Base+0x24cc>
   13c74:	ldr	r4, [pc, #188]	; 13d38 <close_stdout@@Base+0x27bc>
   13c78:	add	r4, pc, r4
   13c7c:	b	13c34 <close_stdout@@Base+0x26b8>
   13c80:	ldr	r0, [sp, #8]
   13c84:	str	r2, [sp]
   13c88:	add	r3, r0, r2
   13c8c:	mov	r0, r4
   13c90:	add	r8, r3, r8
   13c94:	add	r1, r8, #3
   13c98:	add	r8, r8, #2
   13c9c:	bl	10f24 <realloc@plt>
   13ca0:	ldr	r2, [sp]
   13ca4:	mov	r3, r0
   13ca8:	b	13b7c <close_stdout@@Base+0x2600>
   13cac:	ldr	r4, [pc, #136]	; 13d3c <close_stdout@@Base+0x27c0>
   13cb0:	add	r4, pc, r4
   13cb4:	b	13c3c <close_stdout@@Base+0x26c0>
   13cb8:	ldr	r8, [pc, #128]	; 13d40 <close_stdout@@Base+0x27c4>
   13cbc:	mov	r3, #7
   13cc0:	mov	sl, #8
   13cc4:	add	r8, pc, r8
   13cc8:	b	13c5c <close_stdout@@Base+0x26e0>
   13ccc:	ldr	r4, [pc, #112]	; 13d44 <close_stdout@@Base+0x27c8>
   13cd0:	mov	r0, r8
   13cd4:	add	r4, pc, r4
   13cd8:	bl	110e0 <close@plt>
   13cdc:	b	13c34 <close_stdout@@Base+0x26b8>
   13ce0:	bl	10f18 <__stack_chk_fail@plt>
   13ce4:	mov	r0, r4
   13ce8:	ldr	r4, [pc, #88]	; 13d48 <close_stdout@@Base+0x27cc>
   13cec:	bl	10ec4 <free@plt>
   13cf0:	mov	r0, fp
   13cf4:	add	r4, pc, r4
   13cf8:	bl	13d4c <close_stdout@@Base+0x27d0>
   13cfc:	b	13c34 <close_stdout@@Base+0x26b8>
   13d00:	mov	r0, fp
   13d04:	bl	1108c <__uflow@plt>
   13d08:	b	13c08 <close_stdout@@Base+0x268c>
   13d0c:	andeq	r1, r1, r0, asr #13
   13d10:	andeq	r0, r0, r0, ror #1
   13d14:	andeq	r1, r1, r0, asr #18
   13d18:	strdeq	r0, [r0], -ip
   13d1c:	andeq	r0, r0, ip, lsl r8
   13d20:	ldrdeq	r0, [r0], -r4
   13d24:	andeq	r0, r0, ip, ror sp
   13d28:	andeq	r0, r0, r8, asr sp
   13d2c:	andeq	r0, r0, ip, lsr sp
   13d30:	andeq	r1, r1, r0, ror #12
   13d34:	andeq	r0, r0, r4, lsl #23
   13d38:			; <UNDEFINED> instruction: 0x000005b4
   13d3c:	andeq	r0, r0, ip, ror r5
   13d40:	andeq	r0, r0, r8, lsl fp
   13d44:	andeq	r0, r0, r8, asr r5
   13d48:	andeq	r0, r0, r8, lsr r5
   13d4c:	push	{r4, r5, r6, lr}
   13d50:	sub	sp, sp, #8
   13d54:	mov	r4, r0
   13d58:	bl	1105c <fileno@plt>
   13d5c:	cmp	r0, #0
   13d60:	mov	r0, r4
   13d64:	blt	13de0 <close_stdout@@Base+0x2864>
   13d68:	bl	10fcc <__freading@plt>
   13d6c:	cmp	r0, #0
   13d70:	bne	13dac <close_stdout@@Base+0x2830>
   13d74:	mov	r0, r4
   13d78:	bl	13dec <close_stdout@@Base+0x2870>
   13d7c:	cmp	r0, #0
   13d80:	beq	13ddc <close_stdout@@Base+0x2860>
   13d84:	bl	11020 <__errno_location@plt>
   13d88:	ldr	r6, [r0]
   13d8c:	mov	r5, r0
   13d90:	mov	r0, r4
   13d94:	bl	11074 <fclose@plt>
   13d98:	cmp	r6, #0
   13d9c:	mvnne	r0, #0
   13da0:	strne	r6, [r5]
   13da4:	add	sp, sp, #8
   13da8:	pop	{r4, r5, r6, pc}
   13dac:	mov	r0, r4
   13db0:	bl	1105c <fileno@plt>
   13db4:	mov	r1, #1
   13db8:	mov	r2, #0
   13dbc:	mov	r3, #0
   13dc0:	str	r1, [sp]
   13dc4:	bl	10f54 <lseek64@plt>
   13dc8:	mvn	r2, #0
   13dcc:	mvn	r3, #0
   13dd0:	cmp	r1, r3
   13dd4:	cmpeq	r0, r2
   13dd8:	bne	13d74 <close_stdout@@Base+0x27f8>
   13ddc:	mov	r0, r4
   13de0:	add	sp, sp, #8
   13de4:	pop	{r4, r5, r6, lr}
   13de8:	b	11074 <fclose@plt>
   13dec:	push	{r4, lr}
   13df0:	subs	r4, r0, #0
   13df4:	sub	sp, sp, #8
   13df8:	beq	13e08 <close_stdout@@Base+0x288c>
   13dfc:	bl	10fcc <__freading@plt>
   13e00:	cmp	r0, #0
   13e04:	bne	13e18 <close_stdout@@Base+0x289c>
   13e08:	mov	r0, r4
   13e0c:	add	sp, sp, #8
   13e10:	pop	{r4, lr}
   13e14:	b	10eb8 <fflush@plt>
   13e18:	ldr	r3, [r4]
   13e1c:	tst	r3, #256	; 0x100
   13e20:	beq	13e08 <close_stdout@@Base+0x288c>
   13e24:	mov	r3, #1
   13e28:	mov	r0, r4
   13e2c:	str	r3, [sp]
   13e30:	mov	r2, #0
   13e34:	mov	r3, #0
   13e38:	bl	13e4c <close_stdout@@Base+0x28d0>
   13e3c:	mov	r0, r4
   13e40:	add	sp, sp, #8
   13e44:	pop	{r4, lr}
   13e48:	b	10eb8 <fflush@plt>
   13e4c:	push	{r4, r5, r6, r7, lr}
   13e50:	sub	sp, sp, #20
   13e54:	ldmib	r0, {r1, ip}
   13e58:	mov	r6, r0
   13e5c:	ldr	r4, [sp, #40]	; 0x28
   13e60:	cmp	ip, r1
   13e64:	beq	13e7c <close_stdout@@Base+0x2900>
   13e68:	str	r4, [sp, #40]	; 0x28
   13e6c:	mov	r0, r6
   13e70:	add	sp, sp, #20
   13e74:	pop	{r4, r5, r6, r7, lr}
   13e78:	b	11080 <fseeko64@plt>
   13e7c:	ldr	ip, [r0, #20]
   13e80:	ldr	r1, [r0, #16]
   13e84:	cmp	ip, r1
   13e88:	bne	13e68 <close_stdout@@Base+0x28ec>
   13e8c:	ldr	r7, [r0, #36]	; 0x24
   13e90:	cmp	r7, #0
   13e94:	bne	13e68 <close_stdout@@Base+0x28ec>
   13e98:	str	r2, [sp, #12]
   13e9c:	mvn	r5, #0
   13ea0:	str	r3, [sp, #8]
   13ea4:	bl	1105c <fileno@plt>
   13ea8:	str	r4, [sp]
   13eac:	mvn	r4, #0
   13eb0:	ldr	r2, [sp, #12]
   13eb4:	ldr	r3, [sp, #8]
   13eb8:	bl	10f54 <lseek64@plt>
   13ebc:	mov	r2, r0
   13ec0:	mov	r3, r1
   13ec4:	cmp	r3, r5
   13ec8:	cmpeq	r2, r4
   13ecc:	beq	13eec <close_stdout@@Base+0x2970>
   13ed0:	ldr	r1, [r6]
   13ed4:	mov	r0, r7
   13ed8:	strd	r2, [r6, #80]	; 0x50
   13edc:	bic	r3, r1, #16
   13ee0:	str	r3, [r6]
   13ee4:	add	sp, sp, #20
   13ee8:	pop	{r4, r5, r6, r7, pc}
   13eec:	mvn	r0, #0
   13ef0:	b	13ee4 <close_stdout@@Base+0x2968>
   13ef4:	subs	r2, r1, #1
   13ef8:	bxeq	lr
   13efc:	bcc	140d4 <close_stdout@@Base+0x2b58>
   13f00:	cmp	r0, r1
   13f04:	bls	140b8 <close_stdout@@Base+0x2b3c>
   13f08:	tst	r1, r2
   13f0c:	beq	140c4 <close_stdout@@Base+0x2b48>
   13f10:	clz	r3, r0
   13f14:	clz	r2, r1
   13f18:	sub	r3, r2, r3
   13f1c:	rsbs	r3, r3, #31
   13f20:	addne	r3, r3, r3, lsl #1
   13f24:	mov	r2, #0
   13f28:	addne	pc, pc, r3, lsl #2
   13f2c:	nop	{0}
   13f30:	cmp	r0, r1, lsl #31
   13f34:	adc	r2, r2, r2
   13f38:	subcs	r0, r0, r1, lsl #31
   13f3c:	cmp	r0, r1, lsl #30
   13f40:	adc	r2, r2, r2
   13f44:	subcs	r0, r0, r1, lsl #30
   13f48:	cmp	r0, r1, lsl #29
   13f4c:	adc	r2, r2, r2
   13f50:	subcs	r0, r0, r1, lsl #29
   13f54:	cmp	r0, r1, lsl #28
   13f58:	adc	r2, r2, r2
   13f5c:	subcs	r0, r0, r1, lsl #28
   13f60:	cmp	r0, r1, lsl #27
   13f64:	adc	r2, r2, r2
   13f68:	subcs	r0, r0, r1, lsl #27
   13f6c:	cmp	r0, r1, lsl #26
   13f70:	adc	r2, r2, r2
   13f74:	subcs	r0, r0, r1, lsl #26
   13f78:	cmp	r0, r1, lsl #25
   13f7c:	adc	r2, r2, r2
   13f80:	subcs	r0, r0, r1, lsl #25
   13f84:	cmp	r0, r1, lsl #24
   13f88:	adc	r2, r2, r2
   13f8c:	subcs	r0, r0, r1, lsl #24
   13f90:	cmp	r0, r1, lsl #23
   13f94:	adc	r2, r2, r2
   13f98:	subcs	r0, r0, r1, lsl #23
   13f9c:	cmp	r0, r1, lsl #22
   13fa0:	adc	r2, r2, r2
   13fa4:	subcs	r0, r0, r1, lsl #22
   13fa8:	cmp	r0, r1, lsl #21
   13fac:	adc	r2, r2, r2
   13fb0:	subcs	r0, r0, r1, lsl #21
   13fb4:	cmp	r0, r1, lsl #20
   13fb8:	adc	r2, r2, r2
   13fbc:	subcs	r0, r0, r1, lsl #20
   13fc0:	cmp	r0, r1, lsl #19
   13fc4:	adc	r2, r2, r2
   13fc8:	subcs	r0, r0, r1, lsl #19
   13fcc:	cmp	r0, r1, lsl #18
   13fd0:	adc	r2, r2, r2
   13fd4:	subcs	r0, r0, r1, lsl #18
   13fd8:	cmp	r0, r1, lsl #17
   13fdc:	adc	r2, r2, r2
   13fe0:	subcs	r0, r0, r1, lsl #17
   13fe4:	cmp	r0, r1, lsl #16
   13fe8:	adc	r2, r2, r2
   13fec:	subcs	r0, r0, r1, lsl #16
   13ff0:	cmp	r0, r1, lsl #15
   13ff4:	adc	r2, r2, r2
   13ff8:	subcs	r0, r0, r1, lsl #15
   13ffc:	cmp	r0, r1, lsl #14
   14000:	adc	r2, r2, r2
   14004:	subcs	r0, r0, r1, lsl #14
   14008:	cmp	r0, r1, lsl #13
   1400c:	adc	r2, r2, r2
   14010:	subcs	r0, r0, r1, lsl #13
   14014:	cmp	r0, r1, lsl #12
   14018:	adc	r2, r2, r2
   1401c:	subcs	r0, r0, r1, lsl #12
   14020:	cmp	r0, r1, lsl #11
   14024:	adc	r2, r2, r2
   14028:	subcs	r0, r0, r1, lsl #11
   1402c:	cmp	r0, r1, lsl #10
   14030:	adc	r2, r2, r2
   14034:	subcs	r0, r0, r1, lsl #10
   14038:	cmp	r0, r1, lsl #9
   1403c:	adc	r2, r2, r2
   14040:	subcs	r0, r0, r1, lsl #9
   14044:	cmp	r0, r1, lsl #8
   14048:	adc	r2, r2, r2
   1404c:	subcs	r0, r0, r1, lsl #8
   14050:	cmp	r0, r1, lsl #7
   14054:	adc	r2, r2, r2
   14058:	subcs	r0, r0, r1, lsl #7
   1405c:	cmp	r0, r1, lsl #6
   14060:	adc	r2, r2, r2
   14064:	subcs	r0, r0, r1, lsl #6
   14068:	cmp	r0, r1, lsl #5
   1406c:	adc	r2, r2, r2
   14070:	subcs	r0, r0, r1, lsl #5
   14074:	cmp	r0, r1, lsl #4
   14078:	adc	r2, r2, r2
   1407c:	subcs	r0, r0, r1, lsl #4
   14080:	cmp	r0, r1, lsl #3
   14084:	adc	r2, r2, r2
   14088:	subcs	r0, r0, r1, lsl #3
   1408c:	cmp	r0, r1, lsl #2
   14090:	adc	r2, r2, r2
   14094:	subcs	r0, r0, r1, lsl #2
   14098:	cmp	r0, r1, lsl #1
   1409c:	adc	r2, r2, r2
   140a0:	subcs	r0, r0, r1, lsl #1
   140a4:	cmp	r0, r1
   140a8:	adc	r2, r2, r2
   140ac:	subcs	r0, r0, r1
   140b0:	mov	r0, r2
   140b4:	bx	lr
   140b8:	moveq	r0, #1
   140bc:	movne	r0, #0
   140c0:	bx	lr
   140c4:	clz	r2, r1
   140c8:	rsb	r2, r2, #31
   140cc:	lsr	r0, r0, r2
   140d0:	bx	lr
   140d4:	cmp	r0, #0
   140d8:	mvnne	r0, #0
   140dc:	b	14100 <close_stdout@@Base+0x2b84>
   140e0:	cmp	r1, #0
   140e4:	beq	140d4 <close_stdout@@Base+0x2b58>
   140e8:	push	{r0, r1, lr}
   140ec:	bl	13ef4 <close_stdout@@Base+0x2978>
   140f0:	pop	{r1, r2, lr}
   140f4:	mul	r3, r2, r0
   140f8:	sub	r1, r1, r3
   140fc:	bx	lr
   14100:	push	{r1, lr}
   14104:	mov	r0, #8
   14108:	bl	10ea0 <raise@plt>
   1410c:	pop	{r1, pc}
   14110:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14114:	mov	r7, r0
   14118:	ldr	r6, [pc, #76]	; 1416c <close_stdout@@Base+0x2bf0>
   1411c:	mov	r8, r1
   14120:	ldr	r5, [pc, #72]	; 14170 <close_stdout@@Base+0x2bf4>
   14124:	mov	r9, r2
   14128:	add	r6, pc, r6
   1412c:	bl	10e5c <fdopen@plt-0x20>
   14130:	add	r5, pc, r5
   14134:	rsb	r6, r5, r6
   14138:	asrs	r6, r6, #2
   1413c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14140:	sub	r5, r5, #4
   14144:	mov	r4, #0
   14148:	add	r4, r4, #1
   1414c:	ldr	r3, [r5, #4]!
   14150:	mov	r0, r7
   14154:	mov	r1, r8
   14158:	mov	r2, r9
   1415c:	blx	r3
   14160:	cmp	r4, r6
   14164:	bne	14148 <close_stdout@@Base+0x2bcc>
   14168:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1416c:	andeq	r0, r1, ip, ror sp
   14170:	andeq	r0, r1, r0, ror sp
   14174:	bx	lr
   14178:	ldr	r3, [pc, #28]	; 1419c <close_stdout@@Base+0x2c20>
   1417c:	mov	r1, #0
   14180:	ldr	r2, [pc, #24]	; 141a0 <close_stdout@@Base+0x2c24>
   14184:	add	r3, pc, r3
   14188:	ldr	r3, [r3, r2]
   1418c:	cmp	r3, #0
   14190:	ldrne	r2, [r3]
   14194:	moveq	r2, r3
   14198:	b	1102c <__cxa_atexit@plt>
   1419c:	andeq	r0, r1, r4, ror lr
   141a0:	strdeq	r0, [r0], -r8

Disassembly of section .fini:

000141a4 <.fini>:
   141a4:	push	{r3, lr}
   141a8:	pop	{r3, pc}
