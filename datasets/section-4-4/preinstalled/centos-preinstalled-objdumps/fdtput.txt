
centos-preinstalled/fdtput:     file format elf32-littlearm


Disassembly of section .init:

0001092c <.init>:
   1092c:	push	{r3, lr}
   10930:	bl	113fc <__assert_fail@plt+0x918>
   10934:	pop	{r3, pc}

Disassembly of section .plt:

00010938 <strcmp@plt-0x14>:
   10938:	push	{lr}		; (str lr, [sp, #-4]!)
   1093c:	ldr	lr, [pc, #4]	; 10948 <strcmp@plt-0x4>
   10940:	add	lr, pc, lr
   10944:	ldr	pc, [lr, #8]!
   10948:			; <UNDEFINED> instruction: 0x000146b8

0001094c <strcmp@plt>:
   1094c:	add	ip, pc, #0, 12
   10950:	add	ip, ip, #20, 20	; 0x14000
   10954:	ldr	pc, [ip, #1720]!	; 0x6b8

00010958 <strtol@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #20, 20	; 0x14000
   10960:	ldr	pc, [ip, #1712]!	; 0x6b0

00010964 <printf@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #20, 20	; 0x14000
   1096c:	ldr	pc, [ip, #1704]!	; 0x6a8

00010970 <read@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #20, 20	; 0x14000
   10978:	ldr	pc, [ip, #1696]!	; 0x6a0

0001097c <memmove@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #20, 20	; 0x14000
   10984:	ldr	pc, [ip, #1688]!	; 0x698

00010988 <free@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #20, 20	; 0x14000
   10990:	ldr	pc, [ip, #1680]!	; 0x690

00010994 <memcpy@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #20, 20	; 0x14000
   1099c:	ldr	pc, [ip, #1672]!	; 0x688

000109a0 <memcmp@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #20, 20	; 0x14000
   109a8:	ldr	pc, [ip, #1664]!	; 0x680

000109ac <realloc@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #20, 20	; 0x14000
   109b4:	ldr	pc, [ip, #1656]!	; 0x678

000109b8 <malloc@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #20, 20	; 0x14000
   109c0:	ldr	pc, [ip, #1648]!	; 0x670

000109c4 <__libc_start_main@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #20, 20	; 0x14000
   109cc:	ldr	pc, [ip, #1640]!	; 0x668

000109d0 <strerror@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #20, 20	; 0x14000
   109d8:	ldr	pc, [ip, #1632]!	; 0x660

000109dc <__gmon_start__@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #20, 20	; 0x14000
   109e4:	ldr	pc, [ip, #1624]!	; 0x658

000109e8 <open@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #20, 20	; 0x14000
   109f0:	ldr	pc, [ip, #1616]!	; 0x650

000109f4 <getopt_long@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #20, 20	; 0x14000
   109fc:	ldr	pc, [ip, #1608]!	; 0x648

00010a00 <__ctype_b_loc@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #20, 20	; 0x14000
   10a08:	ldr	pc, [ip, #1600]!	; 0x640

00010a0c <exit@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #20, 20	; 0x14000
   10a14:	ldr	pc, [ip, #1592]!	; 0x638

00010a18 <strlen@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #20, 20	; 0x14000
   10a20:	ldr	pc, [ip, #1584]!	; 0x630

00010a24 <strchr@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #20, 20	; 0x14000
   10a2c:	ldr	pc, [ip, #1576]!	; 0x628

00010a30 <fprintf@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #20, 20	; 0x14000
   10a38:	ldr	pc, [ip, #1568]!	; 0x620

00010a3c <__errno_location@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #20, 20	; 0x14000
   10a44:	ldr	pc, [ip, #1560]!	; 0x618

00010a48 <__isoc99_sscanf@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #20, 20	; 0x14000
   10a50:	ldr	pc, [ip, #1552]!	; 0x610

00010a54 <memset@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #20, 20	; 0x14000
   10a5c:	ldr	pc, [ip, #1544]!	; 0x608

00010a60 <putchar@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #20, 20	; 0x14000
   10a68:	ldr	pc, [ip, #1536]!	; 0x600

00010a6c <strncpy@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #20, 20	; 0x14000
   10a74:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a78 <write@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #20, 20	; 0x14000
   10a80:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a84 <memchr@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #20, 20	; 0x14000
   10a8c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a90 <strnlen@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #20, 20	; 0x14000
   10a98:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a9c <strrchr@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #20, 20	; 0x14000
   10aa4:	ldr	pc, [ip, #1496]!	; 0x5d8

00010aa8 <vfprintf@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #20, 20	; 0x14000
   10ab0:	ldr	pc, [ip, #1488]!	; 0x5d0

00010ab4 <vsnprintf@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #20, 20	; 0x14000
   10abc:	ldr	pc, [ip, #1480]!	; 0x5c8

00010ac0 <fputs@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #20, 20	; 0x14000
   10ac8:	ldr	pc, [ip, #1472]!	; 0x5c0

00010acc <abort@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #20, 20	; 0x14000
   10ad4:	ldr	pc, [ip, #1464]!	; 0x5b8

00010ad8 <close@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #20, 20	; 0x14000
   10ae0:	ldr	pc, [ip, #1456]!	; 0x5b0

00010ae4 <__assert_fail@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #20, 20	; 0x14000
   10aec:	ldr	pc, [ip, #1448]!	; 0x5a8

Disassembly of section .text:

00010af0 <.text>:
   10af0:	push	{r0, r1, r2, r3}
   10af4:	ldr	r3, [pc, #64]	; 10b3c <__assert_fail@plt+0x58>
   10af8:	push	{r0, r1, r2, lr}
   10afc:	add	r2, sp, #20
   10b00:	str	r2, [sp, #4]
   10b04:	add	r3, pc, r3
   10b08:	ldr	r2, [pc, #48]	; 10b40 <__assert_fail@plt+0x5c>
   10b0c:	ldr	r0, [pc, #48]	; 10b44 <__assert_fail@plt+0x60>
   10b10:	ldr	r4, [r3, r2]
   10b14:	add	r0, pc, r0
   10b18:	ldr	r1, [r4]
   10b1c:	bl	10ac0 <fputs@plt>
   10b20:	ldr	r1, [pc, #32]	; 10b48 <__assert_fail@plt+0x64>
   10b24:	ldr	r0, [r4]
   10b28:	add	r1, pc, r1
   10b2c:	ldr	r2, [sp, #4]
   10b30:	bl	10aa8 <vfprintf@plt>
   10b34:	mov	r0, #1
   10b38:	bl	10a0c <exit@plt>
   10b3c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   10b40:	muleq	r0, ip, r0
   10b44:	andeq	r3, r0, r0, asr #20
   10b48:	andeq	r3, r0, sl, lsr sl
   10b4c:	push	{r0, r1, r2, r3}
   10b50:	ldr	r3, [pc, #60]	; 10b94 <__assert_fail@plt+0xb0>
   10b54:	push	{r0, r1, r2, lr}
   10b58:	add	r2, sp, #20
   10b5c:	str	r2, [sp, #4]
   10b60:	add	r3, pc, r3
   10b64:	ldr	r2, [pc, #44]	; 10b98 <__assert_fail@plt+0xb4>
   10b68:	ldr	r0, [pc, #44]	; 10b9c <__assert_fail@plt+0xb8>
   10b6c:	ldr	r4, [r3, r2]
   10b70:	add	r0, pc, r0
   10b74:	ldr	r1, [r4]
   10b78:	bl	10ac0 <fputs@plt>
   10b7c:	ldr	r0, [r4]
   10b80:	ldr	r1, [sp, #16]
   10b84:	ldr	r2, [sp, #4]
   10b88:	bl	10aa8 <vfprintf@plt>
   10b8c:	mov	r0, #1
   10b90:	bl	10a0c <exit@plt>
   10b94:	muleq	r1, r8, r4
   10b98:	muleq	r0, ip, r0
   10b9c:	andeq	r3, r0, r4, ror #19
   10ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ba4:	sub	sp, sp, #84	; 0x54
   10ba8:	ldr	fp, [pc, #1960]	; 11358 <__assert_fail@plt+0x874>
   10bac:	add	r8, sp, #60	; 0x3c
   10bb0:	ldr	r6, [pc, #1956]	; 1135c <__assert_fail@plt+0x878>
   10bb4:	mov	r5, r0
   10bb8:	add	fp, pc, fp
   10bbc:	mov	r7, r1
   10bc0:	add	sl, fp, #420	; 0x1a4
   10bc4:	mov	r0, r8
   10bc8:	add	sl, sl, #2
   10bcc:	mov	r1, #0
   10bd0:	mov	r2, #20
   10bd4:	add	r6, pc, r6
   10bd8:	bl	10a54 <memset@plt>
   10bdc:	mvn	r3, #0
   10be0:	str	r3, [sp, #68]	; 0x44
   10be4:	ldr	r4, [pc, #1908]	; 11360 <__assert_fail@plt+0x87c>
   10be8:	mov	r9, #0
   10bec:	add	r4, pc, r4
   10bf0:	str	r9, [sp]
   10bf4:	mov	r0, r5
   10bf8:	mov	r1, r7
   10bfc:	mov	r2, sl
   10c00:	mov	r3, r4
   10c04:	bl	109f4 <getopt_long@plt>
   10c08:	cmn	r0, #1
   10c0c:	beq	10d00 <__assert_fail@plt+0x21c>
   10c10:	cmp	r0, #104	; 0x68
   10c14:	beq	10c98 <__assert_fail@plt+0x1b4>
   10c18:	bgt	10c5c <__assert_fail@plt+0x178>
   10c1c:	cmp	r0, #86	; 0x56
   10c20:	beq	10ca8 <__assert_fail@plt+0x1c4>
   10c24:	bgt	10c44 <__assert_fail@plt+0x160>
   10c28:	cmp	r0, #63	; 0x3f
   10c2c:	bne	10bf0 <__assert_fail@plt+0x10c>
   10c30:	ldr	r0, [pc, #1836]	; 11364 <__assert_fail@plt+0x880>
   10c34:	add	r3, r4, #144	; 0x90
   10c38:	str	r3, [sp]
   10c3c:	add	r0, pc, r0
   10c40:	b	10cdc <__assert_fail@plt+0x1f8>
   10c44:	cmp	r0, #99	; 0x63
   10c48:	beq	10cec <__assert_fail@plt+0x208>
   10c4c:	cmp	r0, #100	; 0x64
   10c50:	bne	10bf0 <__assert_fail@plt+0x10c>
   10c54:	mov	r3, #3
   10c58:	b	10cf8 <__assert_fail@plt+0x214>
   10c5c:	cmp	r0, #114	; 0x72
   10c60:	beq	10cf4 <__assert_fail@plt+0x210>
   10c64:	bgt	10c7c <__assert_fail@plt+0x198>
   10c68:	cmp	r0, #112	; 0x70
   10c6c:	bne	10bf0 <__assert_fail@plt+0x10c>
   10c70:	mov	r3, #1
   10c74:	str	r3, [sp, #76]	; 0x4c
   10c78:	b	10be4 <__assert_fail@plt+0x100>
   10c7c:	cmp	r0, #116	; 0x74
   10c80:	beq	10cac <__assert_fail@plt+0x1c8>
   10c84:	cmp	r0, #118	; 0x76
   10c88:	bne	10bf0 <__assert_fail@plt+0x10c>
   10c8c:	mov	r3, #1
   10c90:	str	r3, [sp, #72]	; 0x48
   10c94:	b	10be4 <__assert_fail@plt+0x100>
   10c98:	add	r3, r4, #144	; 0x90
   10c9c:	mov	r0, #0
   10ca0:	str	r3, [sp]
   10ca4:	b	10cdc <__assert_fail@plt+0x1f8>
   10ca8:	bl	11f24 <__assert_fail@plt+0x1440>
   10cac:	ldr	r3, [pc, #1716]	; 11368 <__assert_fail@plt+0x884>
   10cb0:	add	r1, r8, #4
   10cb4:	add	r2, r8, #8
   10cb8:	ldr	r3, [r6, r3]
   10cbc:	ldr	r0, [r3]
   10cc0:	bl	11cb4 <__assert_fail@plt+0x11d0>
   10cc4:	cmp	r0, #0
   10cc8:	beq	10be4 <__assert_fail@plt+0x100>
   10ccc:	ldr	r0, [pc, #1688]	; 1136c <__assert_fail@plt+0x888>
   10cd0:	add	r3, r4, #144	; 0x90
   10cd4:	str	r3, [sp]
   10cd8:	add	r0, pc, r0
   10cdc:	mov	r1, fp
   10ce0:	mov	r2, sl
   10ce4:	mov	r3, r4
   10ce8:	bl	11f4c <__assert_fail@plt+0x1468>
   10cec:	mov	r3, #1
   10cf0:	b	10cf8 <__assert_fail@plt+0x214>
   10cf4:	mov	r3, #2
   10cf8:	str	r3, [sp, #60]	; 0x3c
   10cfc:	b	10be4 <__assert_fail@plt+0x100>
   10d00:	ldr	r3, [pc, #1640]	; 11370 <__assert_fail@plt+0x88c>
   10d04:	ldr	r1, [r6, r3]
   10d08:	ldr	r3, [r1]
   10d0c:	cmp	r3, r5
   10d10:	blt	10d3c <__assert_fail@plt+0x258>
   10d14:	ldr	r3, [pc, #1624]	; 11374 <__assert_fail@plt+0x890>
   10d18:	ldr	r1, [pc, #1624]	; 11378 <__assert_fail@plt+0x894>
   10d1c:	add	r3, pc, r3
   10d20:	add	r0, r3, #144	; 0x90
   10d24:	str	r0, [sp]
   10d28:	ldr	r0, [pc, #1612]	; 1137c <__assert_fail@plt+0x898>
   10d2c:	add	r1, pc, r1
   10d30:	add	r2, r1, #420	; 0x1a4
   10d34:	add	r0, pc, r0
   10d38:	b	10d9c <__assert_fail@plt+0x2b8>
   10d3c:	add	r2, r3, #1
   10d40:	lsl	r9, r3, #2
   10d44:	ldr	r3, [r7, r3, lsl #2]
   10d48:	str	r2, [r1]
   10d4c:	cmp	r3, #0
   10d50:	str	r3, [sp, #16]
   10d54:	beq	10d14 <__assert_fail@plt+0x230>
   10d58:	ldr	r3, [sp, #60]	; 0x3c
   10d5c:	add	r9, r9, #4
   10d60:	add	r8, r7, r9
   10d64:	rsb	r5, r2, r5
   10d68:	cmp	r3, #0
   10d6c:	bne	10dc0 <__assert_fail@plt+0x2dc>
   10d70:	cmp	r5, #0
   10d74:	bgt	10da4 <__assert_fail@plt+0x2c0>
   10d78:	ldr	r3, [pc, #1536]	; 11380 <__assert_fail@plt+0x89c>
   10d7c:	ldr	r1, [pc, #1536]	; 11384 <__assert_fail@plt+0x8a0>
   10d80:	add	r3, pc, r3
   10d84:	add	r0, r3, #144	; 0x90
   10d88:	str	r0, [sp]
   10d8c:	ldr	r0, [pc, #1524]	; 11388 <__assert_fail@plt+0x8a4>
   10d90:	add	r1, pc, r1
   10d94:	add	r2, r1, #420	; 0x1a4
   10d98:	add	r0, pc, r0
   10d9c:	add	r2, r2, #2
   10da0:	b	10ce8 <__assert_fail@plt+0x204>
   10da4:	cmp	r5, #1
   10da8:	bne	10dd0 <__assert_fail@plt+0x2ec>
   10dac:	ldr	r0, [pc, #1496]	; 1138c <__assert_fail@plt+0x8a8>
   10db0:	add	r3, r4, #144	; 0x90
   10db4:	str	r3, [sp]
   10db8:	add	r0, pc, r0
   10dbc:	b	10cdc <__assert_fail@plt+0x1f8>
   10dc0:	cmp	r3, #3
   10dc4:	bne	10dd0 <__assert_fail@plt+0x2ec>
   10dc8:	cmp	r5, #0
   10dcc:	ble	10d78 <__assert_fail@plt+0x294>
   10dd0:	ldr	r0, [sp, #16]
   10dd4:	bl	11b70 <__assert_fail@plt+0x108c>
   10dd8:	cmp	r0, #0
   10ddc:	str	r0, [sp, #48]	; 0x30
   10de0:	bne	10dec <__assert_fail@plt+0x308>
   10de4:	mvn	r6, #0
   10de8:	b	11328 <__assert_fail@plt+0x844>
   10dec:	ldr	r3, [sp, #60]	; 0x3c
   10df0:	cmp	r3, #3
   10df4:	addls	pc, pc, r3, lsl #2
   10df8:	b	11338 <__assert_fail@plt+0x854>
   10dfc:	b	10e24 <__assert_fail@plt+0x340>
   10e00:	b	10e14 <__assert_fail@plt+0x330>
   10e04:	b	10e0c <__assert_fail@plt+0x328>
   10e08:	b	112a0 <__assert_fail@plt+0x7bc>
   10e0c:	mov	r4, #0
   10e10:	b	11280 <__assert_fail@plt+0x79c>
   10e14:	add	r8, r8, #4
   10e18:	mov	r7, #0
   10e1c:	add	r9, sp, #48	; 0x30
   10e20:	b	11164 <__assert_fail@plt+0x680>
   10e24:	cmp	r5, #1
   10e28:	bgt	10e50 <__assert_fail@plt+0x36c>
   10e2c:	ldr	r3, [pc, #1372]	; 11390 <__assert_fail@plt+0x8ac>
   10e30:	movw	r2, #346	; 0x15a
   10e34:	ldr	r0, [pc, #1368]	; 11394 <__assert_fail@plt+0x8b0>
   10e38:	ldr	r1, [pc, #1368]	; 11398 <__assert_fail@plt+0x8b4>
   10e3c:	add	r3, pc, r3
   10e40:	add	r0, pc, r0
   10e44:	add	r3, r3, #432	; 0x1b0
   10e48:	add	r1, pc, r1
   10e4c:	bl	10ae4 <__assert_fail@plt>
   10e50:	ldr	r3, [sp, #76]	; 0x4c
   10e54:	cmp	r3, #0
   10e58:	bne	10e8c <__assert_fail@plt+0x3a8>
   10e5c:	ldr	r3, [sp, #72]	; 0x48
   10e60:	sub	r5, r5, #2
   10e64:	str	r5, [sp, #24]
   10e68:	cmp	r3, #0
   10e6c:	beq	10ea4 <__assert_fail@plt+0x3c0>
   10e70:	ldr	r3, [pc, #1316]	; 1139c <__assert_fail@plt+0x8b8>
   10e74:	ldr	r0, [pc, #1316]	; 113a0 <__assert_fail@plt+0x8bc>
   10e78:	ldr	r3, [r6, r3]
   10e7c:	add	r0, pc, r0
   10e80:	ldr	r1, [r3]
   10e84:	bl	10ac0 <fputs@plt>
   10e88:	b	10ea4 <__assert_fail@plt+0x3c0>
   10e8c:	add	r0, sp, #48	; 0x30
   10e90:	ldr	r1, [r7, r9]
   10e94:	bl	115c4 <__assert_fail@plt+0xae0>
   10e98:	cmp	r0, #0
   10e9c:	beq	10e5c <__assert_fail@plt+0x378>
   10ea0:	b	10de4 <__assert_fail@plt+0x300>
   10ea4:	mov	r3, #37	; 0x25
   10ea8:	strb	r3, [sp, #44]	; 0x2c
   10eac:	ldr	r3, [sp, #64]	; 0x40
   10eb0:	mov	r5, #0
   10eb4:	ldr	r2, [pc, #1256]	; 113a4 <__assert_fail@plt+0x8c0>
   10eb8:	add	sl, r8, #12
   10ebc:	cmp	r3, #0
   10ec0:	mov	fp, r5
   10ec4:	uxtbne	r3, r3
   10ec8:	add	r2, pc, r2
   10ecc:	moveq	r3, #100	; 0x64
   10ed0:	str	r2, [sp, #28]
   10ed4:	strb	r3, [sp, #45]	; 0x2d
   10ed8:	mov	r4, r5
   10edc:	ldr	r3, [pc, #1220]	; 113a8 <__assert_fail@plt+0x8c4>
   10ee0:	ldr	r2, [pc, #1220]	; 113ac <__assert_fail@plt+0x8c8>
   10ee4:	add	r3, pc, r3
   10ee8:	strb	r5, [sp, #46]	; 0x2e
   10eec:	add	r2, pc, r2
   10ef0:	str	r3, [sp, #32]
   10ef4:	str	r2, [sp, #36]	; 0x24
   10ef8:	ldr	r2, [sp, #24]
   10efc:	cmp	r2, #0
   10f00:	beq	11058 <__assert_fail@plt+0x574>
   10f04:	ldr	r3, [sp, #64]	; 0x40
   10f08:	cmp	r3, #115	; 0x73
   10f0c:	bne	10f20 <__assert_fail@plt+0x43c>
   10f10:	ldr	r0, [sl, #-4]
   10f14:	bl	10a18 <strlen@plt>
   10f18:	add	r3, r0, #1
   10f1c:	b	10f2c <__assert_fail@plt+0x448>
   10f20:	ldr	r3, [sp, #68]	; 0x44
   10f24:	cmn	r3, #1
   10f28:	moveq	r3, #4
   10f2c:	add	r2, r5, r3
   10f30:	str	r2, [sp, #20]
   10f34:	cmp	r2, fp
   10f38:	ble	10f6c <__assert_fail@plt+0x488>
   10f3c:	add	fp, r2, #500	; 0x1f4
   10f40:	mov	r0, r4
   10f44:	str	r3, [sp, #12]
   10f48:	mov	r1, fp
   10f4c:	bl	109ac <realloc@plt>
   10f50:	ldr	r3, [sp, #12]
   10f54:	subs	r4, r0, #0
   10f58:	bne	10f6c <__assert_fail@plt+0x488>
   10f5c:	ldr	r0, [pc, #1100]	; 113b0 <__assert_fail@plt+0x8cc>
   10f60:	mov	r1, fp
   10f64:	add	r0, pc, r0
   10f68:	bl	10af0 <__assert_fail@plt+0xc>
   10f6c:	ldr	r2, [sp, #64]	; 0x40
   10f70:	add	r5, r4, r5
   10f74:	cmp	r2, #115	; 0x73
   10f78:	bne	10fb8 <__assert_fail@plt+0x4d4>
   10f7c:	mov	r2, r3
   10f80:	mov	r0, r5
   10f84:	ldr	r1, [sl, #-4]
   10f88:	bl	10994 <memcpy@plt>
   10f8c:	ldr	r3, [sp, #72]	; 0x48
   10f90:	cmp	r3, #0
   10f94:	beq	11040 <__assert_fail@plt+0x55c>
   10f98:	ldr	r3, [pc, #1020]	; 1139c <__assert_fail@plt+0x8b8>
   10f9c:	mov	r2, r5
   10fa0:	ldr	r1, [pc, #1036]	; 113b4 <__assert_fail@plt+0x8d0>
   10fa4:	ldr	r3, [r6, r3]
   10fa8:	add	r1, pc, r1
   10fac:	ldr	r0, [r3]
   10fb0:	bl	10a30 <fprintf@plt>
   10fb4:	b	11040 <__assert_fail@plt+0x55c>
   10fb8:	add	r2, sp, #56	; 0x38
   10fbc:	ldr	r0, [sl, #-4]
   10fc0:	add	r1, sp, #44	; 0x2c
   10fc4:	str	r3, [sp, #12]
   10fc8:	bl	10a48 <__isoc99_sscanf@plt>
   10fcc:	ldr	r3, [sp, #12]
   10fd0:	cmp	r3, #4
   10fd4:	ldr	r3, [sp, #56]	; 0x38
   10fd8:	ubfxeq	r2, r3, #8, #8
   10fdc:	streq	r3, [sp, #52]	; 0x34
   10fe0:	strbne	r3, [r5]
   10fe4:	lsleq	r2, r2, #16
   10fe8:	orreq	r2, r2, r3, lsl #24
   10fec:	orreq	r2, r2, r3, lsr #24
   10ff0:	ubfxeq	r3, r3, #16, #8
   10ff4:	orreq	r3, r2, r3, lsl #8
   10ff8:	streq	r3, [r5]
   10ffc:	ldr	r3, [sp, #72]	; 0x48
   11000:	cmp	r3, #0
   11004:	beq	11040 <__assert_fail@plt+0x55c>
   11008:	ldr	r3, [pc, #908]	; 1139c <__assert_fail@plt+0x8b8>
   1100c:	ldr	r3, [r6, r3]
   11010:	ldr	r0, [r3]
   11014:	ldr	r3, [sp, #68]	; 0x44
   11018:	cmp	r3, #1
   1101c:	ldreq	r2, [sp, #32]
   11020:	beq	11034 <__assert_fail@plt+0x550>
   11024:	cmp	r3, #2
   11028:	ldrne	r2, [sp, #36]	; 0x24
   1102c:	ldreq	r2, [pc, #900]	; 113b8 <__assert_fail@plt+0x8d4>
   11030:	addeq	r2, pc, r2
   11034:	ldr	r1, [sp, #28]
   11038:	ldr	r3, [sp, #56]	; 0x38
   1103c:	bl	10a30 <fprintf@plt>
   11040:	ldr	r3, [sp, #24]
   11044:	add	sl, sl, #4
   11048:	ldr	r5, [sp, #20]
   1104c:	sub	r3, r3, #1
   11050:	str	r3, [sp, #24]
   11054:	b	10ef8 <__assert_fail@plt+0x414>
   11058:	ldr	r3, [sp, #72]	; 0x48
   1105c:	cmp	r3, #0
   11060:	beq	11080 <__assert_fail@plt+0x59c>
   11064:	ldr	r3, [pc, #816]	; 1139c <__assert_fail@plt+0x8b8>
   11068:	mov	r2, r5
   1106c:	ldr	r1, [pc, #840]	; 113bc <__assert_fail@plt+0x8d8>
   11070:	ldr	r3, [r6, r3]
   11074:	add	r1, pc, r1
   11078:	ldr	r0, [r3]
   1107c:	bl	10a30 <fprintf@plt>
   11080:	ldr	r9, [r7, r9]
   11084:	ldr	r0, [sp, #48]	; 0x30
   11088:	ldr	r6, [r8, #4]
   1108c:	mov	r1, r9
   11090:	bl	128d4 <__assert_fail@plt+0x1df0>
   11094:	subs	r7, r0, #0
   11098:	movlt	r0, r9
   1109c:	mvnlt	r1, #0
   110a0:	movlt	r2, r7
   110a4:	blt	1115c <__assert_fail@plt+0x678>
   110a8:	mov	r2, r6
   110ac:	str	r5, [sp]
   110b0:	ldr	r0, [sp, #48]	; 0x30
   110b4:	mov	r1, r7
   110b8:	mov	r3, r4
   110bc:	bl	13750 <__assert_fail@plt+0x2c6c>
   110c0:	cmn	r0, #3
   110c4:	mov	r2, r0
   110c8:	bne	1114c <__assert_fail@plt+0x668>
   110cc:	ldr	r8, [sp, #48]	; 0x30
   110d0:	add	r3, sp, #80	; 0x50
   110d4:	mov	r9, #0
   110d8:	mov	r1, r7
   110dc:	str	r9, [r3, #-24]!	; 0xffffffe8
   110e0:	mov	r2, r6
   110e4:	mov	r0, r8
   110e8:	bl	125c8 <__assert_fail@plt+0x1ae4>
   110ec:	cmp	r0, r9
   110f0:	movne	r1, r9
   110f4:	bne	11104 <__assert_fail@plt+0x620>
   110f8:	mov	r0, r6
   110fc:	bl	10a18 <strlen@plt>
   11100:	add	r1, r0, #13
   11104:	ldr	r3, [sp, #56]	; 0x38
   11108:	cmp	r5, r3
   1110c:	ble	11128 <__assert_fail@plt+0x644>
   11110:	add	r2, r5, #3
   11114:	add	r3, r3, #3
   11118:	bic	r2, r2, #3
   1111c:	bic	r3, r3, #3
   11120:	rsb	r3, r3, r2
   11124:	add	r1, r3, r1
   11128:	mov	r0, r8
   1112c:	bl	11560 <__assert_fail@plt+0xa7c>
   11130:	mov	r2, r6
   11134:	str	r5, [sp]
   11138:	mov	r1, r7
   1113c:	mov	r3, r4
   11140:	str	r0, [sp, #48]	; 0x30
   11144:	bl	13750 <__assert_fail@plt+0x2c6c>
   11148:	mov	r2, r0
   1114c:	cmp	r2, #0
   11150:	beq	1133c <__assert_fail@plt+0x858>
   11154:	mov	r0, r6
   11158:	mvn	r1, #0
   1115c:	bl	114f4 <__assert_fail@plt+0xa10>
   11160:	b	1130c <__assert_fail@plt+0x828>
   11164:	cmp	r7, r5
   11168:	beq	11338 <__assert_fail@plt+0x854>
   1116c:	ldr	sl, [sp, #76]	; 0x4c
   11170:	cmp	sl, #0
   11174:	beq	1118c <__assert_fail@plt+0x6a8>
   11178:	mov	r0, r9
   1117c:	ldr	r1, [r8, #-4]
   11180:	bl	115c4 <__assert_fail@plt+0xae0>
   11184:	mov	r6, r0
   11188:	b	11228 <__assert_fail@plt+0x744>
   1118c:	ldr	r6, [r8, #-4]
   11190:	mov	r1, #47	; 0x2f
   11194:	mov	r0, r6
   11198:	bl	10a9c <strrchr@plt>
   1119c:	subs	fp, r0, #0
   111a0:	moveq	r0, r6
   111a4:	mvneq	r1, #0
   111a8:	mvneq	r2, #4
   111ac:	beq	11220 <__assert_fail@plt+0x73c>
   111b0:	mov	r4, fp
   111b4:	strb	sl, [r4], #1
   111b8:	mov	r0, r4
   111bc:	bl	10a18 <strlen@plt>
   111c0:	add	r0, r0, #4
   111c4:	bic	r1, r0, #3
   111c8:	ldr	r0, [sp, #48]	; 0x30
   111cc:	add	r1, r1, #8
   111d0:	bl	11560 <__assert_fail@plt+0xa7c>
   111d4:	cmp	fp, r6
   111d8:	str	r0, [sp, #48]	; 0x30
   111dc:	bls	111f8 <__assert_fail@plt+0x714>
   111e0:	mov	r1, r6
   111e4:	bl	128d4 <__assert_fail@plt+0x1df0>
   111e8:	subs	r2, r0, #0
   111ec:	movlt	r0, r6
   111f0:	bge	111fc <__assert_fail@plt+0x718>
   111f4:	b	1121c <__assert_fail@plt+0x738>
   111f8:	mov	r2, sl
   111fc:	mov	r1, r2
   11200:	ldr	r0, [sp, #48]	; 0x30
   11204:	mov	r2, r4
   11208:	bl	139d4 <__assert_fail@plt+0x2ef0>
   1120c:	subs	r2, r0, #0
   11210:	movge	r6, #0
   11214:	bge	11228 <__assert_fail@plt+0x744>
   11218:	mov	r0, r4
   1121c:	mvn	r1, #0
   11220:	bl	114f4 <__assert_fail@plt+0xa10>
   11224:	mvn	r6, #0
   11228:	cmp	r6, #0
   1122c:	add	r7, r7, #1
   11230:	add	r8, r8, #4
   11234:	bge	11164 <__assert_fail@plt+0x680>
   11238:	mov	r4, #0
   1123c:	b	11310 <__assert_fail@plt+0x82c>
   11240:	ldr	r7, [sp, #48]	; 0x30
   11244:	ldr	r6, [r8, r4, lsl #2]
   11248:	mov	r0, r7
   1124c:	mov	r1, r6
   11250:	bl	128d4 <__assert_fail@plt+0x1df0>
   11254:	subs	r2, r0, #0
   11258:	blt	1128c <__assert_fail@plt+0x7a8>
   1125c:	mov	r1, r2
   11260:	mov	r0, r7
   11264:	bl	13a04 <__assert_fail@plt+0x2f20>
   11268:	subs	r2, r0, #0
   1126c:	movge	r3, #0
   11270:	blt	1128c <__assert_fail@plt+0x7a8>
   11274:	cmp	r3, #0
   11278:	add	r4, r4, #1
   1127c:	bne	112f0 <__assert_fail@plt+0x80c>
   11280:	cmp	r4, r5
   11284:	bne	11240 <__assert_fail@plt+0x75c>
   11288:	b	11338 <__assert_fail@plt+0x854>
   1128c:	mov	r0, r6
   11290:	mvn	r1, #0
   11294:	bl	114f4 <__assert_fail@plt+0xa10>
   11298:	mvn	r3, #0
   1129c:	b	11274 <__assert_fail@plt+0x790>
   112a0:	ldr	r4, [r7, r9]
   112a4:	cmp	r5, #1
   112a8:	ble	11338 <__assert_fail@plt+0x854>
   112ac:	ldr	r6, [sp, #48]	; 0x30
   112b0:	mov	r1, r4
   112b4:	ldr	r7, [r8, #4]!
   112b8:	mov	r0, r6
   112bc:	bl	128d4 <__assert_fail@plt+0x1df0>
   112c0:	subs	r2, r0, #0
   112c4:	blt	112f8 <__assert_fail@plt+0x814>
   112c8:	mov	r1, r2
   112cc:	mov	r0, r6
   112d0:	mov	r2, r7
   112d4:	bl	13870 <__assert_fail@plt+0x2d8c>
   112d8:	subs	r2, r0, #0
   112dc:	movge	r3, #0
   112e0:	blt	112f8 <__assert_fail@plt+0x814>
   112e4:	cmp	r3, #0
   112e8:	sub	r5, r5, #1
   112ec:	beq	112a4 <__assert_fail@plt+0x7c0>
   112f0:	mov	r4, #0
   112f4:	b	1130c <__assert_fail@plt+0x828>
   112f8:	mov	r0, r4
   112fc:	mvn	r1, #0
   11300:	bl	114f4 <__assert_fail@plt+0xa10>
   11304:	mvn	r3, #0
   11308:	b	112e4 <__assert_fail@plt+0x800>
   1130c:	mvn	r6, #0
   11310:	ldr	r0, [sp, #48]	; 0x30
   11314:	bl	10988 <free@plt>
   11318:	cmp	r4, #0
   1131c:	beq	11328 <__assert_fail@plt+0x844>
   11320:	mov	r0, r4
   11324:	bl	10988 <free@plt>
   11328:	adds	r0, r6, #0
   1132c:	movne	r0, #1
   11330:	add	sp, sp, #84	; 0x54
   11334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11338:	mov	r4, #0
   1133c:	ldr	r0, [sp, #48]	; 0x30
   11340:	bl	13c18 <__assert_fail@plt+0x3134>
   11344:	ldr	r0, [sp, #16]
   11348:	ldr	r1, [sp, #48]	; 0x30
   1134c:	bl	11c54 <__assert_fail@plt+0x1170>
   11350:	mov	r6, r0
   11354:	b	11310 <__assert_fail@plt+0x82c>
   11358:	andeq	r3, r0, ip, asr #15
   1135c:	andeq	r4, r1, r4, lsr #8
   11360:	andeq	r4, r1, r0, lsr #4
   11364:	andeq	r3, r0, r1, asr r9
   11368:	andeq	r0, r0, r8, lsr #1
   1136c:	andeq	r3, r0, r4, asr #17
   11370:	muleq	r0, r8, r0
   11374:	strdeq	r4, [r1], -r0
   11378:	andeq	r3, r0, r8, asr r6
   1137c:	andeq	r3, r0, ip, ror r8
   11380:	andeq	r4, r1, ip, lsl #1
   11384:	strdeq	r3, [r0], -r4
   11388:	andeq	r3, r0, r9, lsr #16
   1138c:	andeq	r3, r0, r6, lsl r8
   11390:	andeq	r3, r0, r8, asr #10
   11394:	muleq	r0, pc, r7	; <UNPREDICTABLE>
   11398:	andeq	r3, r0, r6, lsr #15
   1139c:	muleq	r0, ip, r0
   113a0:	andeq	r3, r0, fp, ror r7
   113a4:	andeq	r3, r0, pc, asr #14
   113a8:	muleq	r0, sl, r6
   113ac:	muleq	r0, r7, r6
   113b0:	strdeq	r3, [r0], -lr
   113b4:	andeq	r3, r0, r0, ror #12
   113b8:	andeq	r3, r0, r7, asr r5
   113bc:	andeq	r3, r0, ip, lsr #11
   113c0:	mov	fp, #0
   113c4:	mov	lr, #0
   113c8:	pop	{r1}		; (ldr r1, [sp], #4)
   113cc:	mov	r2, sp
   113d0:	push	{r2}		; (str r2, [sp, #-4]!)
   113d4:	push	{r0}		; (str r0, [sp, #-4]!)
   113d8:	ldr	ip, [pc, #16]	; 113f0 <__assert_fail@plt+0x90c>
   113dc:	push	{ip}		; (str ip, [sp, #-4]!)
   113e0:	ldr	r0, [pc, #12]	; 113f4 <__assert_fail@plt+0x910>
   113e4:	ldr	r3, [pc, #12]	; 113f8 <__assert_fail@plt+0x914>
   113e8:	bl	109c4 <__libc_start_main@plt>
   113ec:	bl	10acc <abort@plt>
   113f0:	andeq	r4, r1, r8, ror r3
   113f4:	andeq	r0, r1, r0, lsr #23
   113f8:	andeq	r4, r1, r4, lsl r3
   113fc:	ldr	r3, [pc, #20]	; 11418 <__assert_fail@plt+0x934>
   11400:	ldr	r2, [pc, #20]	; 1141c <__assert_fail@plt+0x938>
   11404:	add	r3, pc, r3
   11408:	ldr	r2, [r3, r2]
   1140c:	cmp	r2, #0
   11410:	bxeq	lr
   11414:	b	109dc <__gmon_start__@plt>
   11418:	strdeq	r3, [r1], -r4
   1141c:	andeq	r0, r0, r0, lsr #1
   11420:	push	{r3, lr}
   11424:	movw	r0, #20656	; 0x50b0
   11428:	ldr	r3, [pc, #36]	; 11454 <__assert_fail@plt+0x970>
   1142c:	movt	r0, #2
   11430:	rsb	r3, r0, r3
   11434:	cmp	r3, #6
   11438:	popls	{r3, pc}
   1143c:	movw	r3, #0
   11440:	movt	r3, #0
   11444:	cmp	r3, #0
   11448:	popeq	{r3, pc}
   1144c:	blx	r3
   11450:	pop	{r3, pc}
   11454:	strheq	r5, [r2], -r3
   11458:	push	{r3, lr}
   1145c:	movw	r0, #20656	; 0x50b0
   11460:	movw	r3, #20656	; 0x50b0
   11464:	movt	r0, #2
   11468:	movt	r3, #2
   1146c:	rsb	r3, r0, r3
   11470:	asr	r3, r3, #2
   11474:	add	r3, r3, r3, lsr #31
   11478:	asrs	r1, r3, #1
   1147c:	popeq	{r3, pc}
   11480:	movw	r2, #0
   11484:	movt	r2, #0
   11488:	cmp	r2, #0
   1148c:	popeq	{r3, pc}
   11490:	blx	r2
   11494:	pop	{r3, pc}
   11498:	push	{r4, lr}
   1149c:	movw	r4, #20656	; 0x50b0
   114a0:	movt	r4, #2
   114a4:	ldrb	r3, [r4]
   114a8:	cmp	r3, #0
   114ac:	popne	{r4, pc}
   114b0:	bl	11420 <__assert_fail@plt+0x93c>
   114b4:	mov	r3, #1
   114b8:	strb	r3, [r4]
   114bc:	pop	{r4, pc}
   114c0:	movw	r0, #19984	; 0x4e10
   114c4:	movt	r0, #2
   114c8:	push	{r3, lr}
   114cc:	ldr	r3, [r0]
   114d0:	cmp	r3, #0
   114d4:	beq	114ec <__assert_fail@plt+0xa08>
   114d8:	movw	r3, #0
   114dc:	movt	r3, #0
   114e0:	cmp	r3, #0
   114e4:	beq	114ec <__assert_fail@plt+0xa08>
   114e8:	blx	r3
   114ec:	pop	{r3, lr}
   114f0:	b	11458 <__assert_fail@plt+0x974>
   114f4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   114f8:	cmn	r1, #1
   114fc:	ldr	r5, [pc, #80]	; 11554 <__assert_fail@plt+0xa70>
   11500:	mov	r6, r0
   11504:	mov	r4, r1
   11508:	mov	r7, r2
   1150c:	add	r5, pc, r5
   11510:	bne	1151c <__assert_fail@plt+0xa38>
   11514:	bl	10a18 <strlen@plt>
   11518:	mov	r4, r0
   1151c:	ldr	r3, [pc, #52]	; 11558 <__assert_fail@plt+0xa74>
   11520:	mov	r0, r7
   11524:	ldr	r3, [r5, r3]
   11528:	ldr	r5, [r3]
   1152c:	bl	13c80 <__assert_fail@plt+0x319c>
   11530:	ldr	r1, [pc, #36]	; 1155c <__assert_fail@plt+0xa78>
   11534:	mov	r2, r4
   11538:	mov	r3, r6
   1153c:	add	r1, pc, r1
   11540:	str	r0, [sp]
   11544:	mov	r0, r5
   11548:	bl	10a30 <fprintf@plt>
   1154c:	add	sp, sp, #12
   11550:	pop	{r4, r5, r6, r7, pc}
   11554:	andeq	r3, r1, ip, ror #21
   11558:	muleq	r0, ip, r0
   1155c:	andeq	r3, r0, r2
   11560:	ldr	r3, [r0, #4]
   11564:	push	{r0, r1, r2, r4, r5, lr}
   11568:	ubfx	r4, r3, #8, #8
   1156c:	str	r3, [sp, #4]
   11570:	lsl	r4, r4, #16
   11574:	orr	r4, r4, r3, lsl #24
   11578:	orr	r4, r4, r3, lsr #24
   1157c:	ubfx	r3, r3, #16, #8
   11580:	orr	r4, r4, r3, lsl #8
   11584:	add	r4, r4, r1
   11588:	mov	r1, r4
   1158c:	bl	109ac <realloc@plt>
   11590:	subs	r5, r0, #0
   11594:	bne	115a8 <__assert_fail@plt+0xac4>
   11598:	ldr	r0, [pc, #32]	; 115c0 <__assert_fail@plt+0xadc>
   1159c:	mov	r1, r4
   115a0:	add	r0, pc, r0
   115a4:	bl	10af0 <__assert_fail@plt+0xc>
   115a8:	mov	r1, r5
   115ac:	mov	r2, r4
   115b0:	bl	13a64 <__assert_fail@plt+0x2f80>
   115b4:	mov	r0, r5
   115b8:	add	sp, sp, #12
   115bc:	pop	{r4, r5, pc}
   115c0:	andeq	r2, r0, r2, asr #31
   115c4:	push	{r4, r5, r6, r7, r8, lr}
   115c8:	mov	r7, r0
   115cc:	mov	r4, r1
   115d0:	add	r1, r1, #1
   115d4:	ldrb	r3, [r4]
   115d8:	cmp	r3, #47	; 0x2f
   115dc:	beq	115cc <__assert_fail@plt+0xae8>
   115e0:	mov	r5, r4
   115e4:	mov	r6, #0
   115e8:	ldrb	r0, [r5]
   115ec:	cmp	r0, #0
   115f0:	beq	11694 <__assert_fail@plt+0xbb0>
   115f4:	mov	r0, r4
   115f8:	mov	r1, #47	; 0x2f
   115fc:	bl	10a24 <strchr@plt>
   11600:	subs	r5, r0, #0
   11604:	bne	11614 <__assert_fail@plt+0xb30>
   11608:	mov	r0, r4
   1160c:	bl	10a18 <strlen@plt>
   11610:	add	r5, r4, r0
   11614:	rsb	r8, r4, r5
   11618:	mov	r2, r4
   1161c:	ldr	r0, [r7]
   11620:	mov	r1, r6
   11624:	mov	r3, r8
   11628:	bl	12310 <__assert_fail@plt+0x182c>
   1162c:	cmn	r0, #1
   11630:	mov	r2, r0
   11634:	bne	1166c <__assert_fail@plt+0xb88>
   11638:	mov	r0, r4
   1163c:	bl	10a18 <strlen@plt>
   11640:	add	r0, r0, #4
   11644:	bic	r1, r0, #3
   11648:	ldr	r0, [r7]
   1164c:	add	r1, r1, #8
   11650:	bl	11560 <__assert_fail@plt+0xa7c>
   11654:	mov	r2, r4
   11658:	mov	r1, r6
   1165c:	mov	r3, r8
   11660:	str	r0, [r7]
   11664:	bl	138d0 <__assert_fail@plt+0x2dec>
   11668:	mov	r2, r0
   1166c:	cmp	r2, #0
   11670:	bge	11688 <__assert_fail@plt+0xba4>
   11674:	mov	r0, r4
   11678:	mov	r1, r8
   1167c:	bl	114f4 <__assert_fail@plt+0xa10>
   11680:	mvn	r0, #0
   11684:	pop	{r4, r5, r6, r7, r8, pc}
   11688:	add	r4, r5, #1
   1168c:	mov	r6, r2
   11690:	b	115e8 <__assert_fail@plt+0xb04>
   11694:	pop	{r4, r5, r6, r7, r8, pc}
   11698:	push	{r3, lr}
   1169c:	bl	109b8 <malloc@plt>
   116a0:	cmp	r0, #0
   116a4:	popne	{r3, pc}
   116a8:	ldr	r0, [pc, #4]	; 116b4 <__assert_fail@plt+0xbd0>
   116ac:	add	r0, pc, r0
   116b0:	bl	10b4c <__assert_fail@plt+0x68>
   116b4:	strdeq	r3, [r0], -ip
   116b8:	push	{r3, r4, r5, lr}
   116bc:	mov	r5, r0
   116c0:	bl	10a18 <strlen@plt>
   116c4:	add	r4, r0, #1
   116c8:	mov	r0, r4
   116cc:	bl	11698 <__assert_fail@plt+0xbb4>
   116d0:	mov	r1, r5
   116d4:	mov	r2, r4
   116d8:	bl	10994 <memcpy@plt>
   116dc:	pop	{r3, r4, r5, pc}
   116e0:	push	{r1, r2, r3}
   116e4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   116e8:	add	r6, sp, #40	; 0x28
   116ec:	ldr	r8, [sp, #36]	; 0x24
   116f0:	mov	r7, r0
   116f4:	mov	r5, #0
   116f8:	mov	r4, #128	; 0x80
   116fc:	mov	r0, r5
   11700:	mov	r1, r4
   11704:	bl	109ac <realloc@plt>
   11708:	subs	r5, r0, #0
   1170c:	bne	11720 <__assert_fail@plt+0xc3c>
   11710:	ldr	r0, [pc, #100]	; 1177c <__assert_fail@plt+0xc98>
   11714:	mov	r1, r4
   11718:	add	r0, pc, r0
   1171c:	bl	10b4c <__assert_fail@plt+0x68>
   11720:	mov	r2, r8
   11724:	mov	r3, r6
   11728:	mov	r1, r4
   1172c:	str	r6, [sp, #4]
   11730:	bl	10ab4 <vsnprintf@plt>
   11734:	mvn	r3, r0
   11738:	lsr	r3, r3, #31
   1173c:	cmp	r0, r4
   11740:	movge	r2, #0
   11744:	andlt	r2, r3, #1
   11748:	cmp	r2, #0
   1174c:	bne	11760 <__assert_fail@plt+0xc7c>
   11750:	cmp	r3, #0
   11754:	addne	r4, r0, #1
   11758:	lsleq	r4, r4, #1
   1175c:	b	116fc <__assert_fail@plt+0xc18>
   11760:	str	r5, [r7]
   11764:	mov	r0, r5
   11768:	bl	10a18 <strlen@plt>
   1176c:	add	sp, sp, #12
   11770:	pop	{r4, r5, r6, r7, r8, lr}
   11774:	add	sp, sp, #12
   11778:	bx	lr
   1177c:	andeq	r2, r0, sl, asr #28
   11780:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11784:	mov	r7, r1
   11788:	mov	r9, r0
   1178c:	bl	10a18 <strlen@plt>
   11790:	mov	r4, r0
   11794:	mov	r8, r0
   11798:	mov	r0, r7
   1179c:	bl	10a18 <strlen@plt>
   117a0:	cmp	r4, #0
   117a4:	add	r3, r4, r0
   117a8:	mov	sl, r0
   117ac:	add	r0, r3, #2
   117b0:	ble	117cc <__assert_fail@plt+0xce8>
   117b4:	add	r2, r9, r4
   117b8:	ldrb	r2, [r2, #-1]
   117bc:	cmp	r2, #47	; 0x2f
   117c0:	addeq	r0, r3, #1
   117c4:	moveq	r6, #0
   117c8:	beq	117d0 <__assert_fail@plt+0xcec>
   117cc:	mov	r6, #1
   117d0:	bl	11698 <__assert_fail@plt+0xbb4>
   117d4:	mov	r1, r9
   117d8:	mov	r2, r4
   117dc:	mov	r5, r0
   117e0:	bl	10994 <memcpy@plt>
   117e4:	cmp	r6, #0
   117e8:	mov	r1, r7
   117ec:	addne	r8, r4, #1
   117f0:	add	r2, sl, #1
   117f4:	movne	r3, #47	; 0x2f
   117f8:	add	r0, r5, r8
   117fc:	strbne	r3, [r5, r4]
   11800:	bl	10994 <memcpy@plt>
   11804:	mov	r0, r5
   11808:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1180c:	cmp	r1, #0
   11810:	push	{r4, r5, r6, r7, r8, lr}
   11814:	mov	r4, r0
   11818:	beq	11888 <__assert_fail@plt+0xda4>
   1181c:	add	r7, r0, r1
   11820:	ldrb	r3, [r7, #-1]
   11824:	cmp	r3, #0
   11828:	bne	11888 <__assert_fail@plt+0xda4>
   1182c:	cmp	r4, r7
   11830:	bcs	11890 <__assert_fail@plt+0xdac>
   11834:	mov	r5, r4
   11838:	mov	r6, r5
   1183c:	ldrb	r8, [r5], #1
   11840:	cmp	r8, #0
   11844:	beq	1186c <__assert_fail@plt+0xd88>
   11848:	bl	10a00 <__ctype_b_loc@plt>
   1184c:	lsl	r8, r8, #1
   11850:	ldr	r3, [r0]
   11854:	ldrh	r3, [r3, r8]
   11858:	tst	r3, #16384	; 0x4000
   1185c:	beq	1186c <__assert_fail@plt+0xd88>
   11860:	cmp	r5, r7
   11864:	mov	r6, r5
   11868:	bne	11838 <__assert_fail@plt+0xd54>
   1186c:	ldrb	r0, [r6]
   11870:	cmp	r0, #0
   11874:	bne	11888 <__assert_fail@plt+0xda4>
   11878:	cmp	r6, r4
   1187c:	popeq	{r4, r5, r6, r7, r8, pc}
   11880:	add	r4, r6, #1
   11884:	b	1182c <__assert_fail@plt+0xd48>
   11888:	mov	r0, #0
   1188c:	pop	{r4, r5, r6, r7, r8, pc}
   11890:	mov	r0, #1
   11894:	pop	{r4, r5, r6, r7, r8, pc}
   11898:	push	{r0, r1, r4, r5, r6, lr}
   1189c:	mov	r3, r0
   118a0:	ldr	r5, [r1]
   118a4:	mov	r6, r1
   118a8:	add	r1, r0, r5
   118ac:	add	r4, r5, #1
   118b0:	ldrb	r0, [r0, r5]
   118b4:	cmp	r0, #102	; 0x66
   118b8:	beq	11938 <__assert_fail@plt+0xe54>
   118bc:	bhi	118e8 <__assert_fail@plt+0xe04>
   118c0:	cmp	r0, #97	; 0x61
   118c4:	beq	11920 <__assert_fail@plt+0xe3c>
   118c8:	bhi	118dc <__assert_fail@plt+0xdf8>
   118cc:	sub	r3, r0, #48	; 0x30
   118d0:	cmp	r3, #7
   118d4:	bls	11940 <__assert_fail@plt+0xe5c>
   118d8:	b	119e8 <__assert_fail@plt+0xf04>
   118dc:	cmp	r0, #98	; 0x62
   118e0:	moveq	r0, #8
   118e4:	b	119e8 <__assert_fail@plt+0xf04>
   118e8:	cmp	r0, #116	; 0x74
   118ec:	beq	11928 <__assert_fail@plt+0xe44>
   118f0:	bhi	1190c <__assert_fail@plt+0xe28>
   118f4:	cmp	r0, #110	; 0x6e
   118f8:	moveq	r0, #10
   118fc:	beq	119e8 <__assert_fail@plt+0xf04>
   11900:	cmp	r0, #114	; 0x72
   11904:	moveq	r0, #13
   11908:	b	119e8 <__assert_fail@plt+0xf04>
   1190c:	cmp	r0, #118	; 0x76
   11910:	beq	11930 <__assert_fail@plt+0xe4c>
   11914:	cmp	r0, #120	; 0x78
   11918:	beq	11998 <__assert_fail@plt+0xeb4>
   1191c:	b	119e8 <__assert_fail@plt+0xf04>
   11920:	mov	r0, #7
   11924:	b	119e8 <__assert_fail@plt+0xf04>
   11928:	mov	r0, #9
   1192c:	b	119e8 <__assert_fail@plt+0xf04>
   11930:	mov	r0, #11
   11934:	b	119e8 <__assert_fail@plt+0xf04>
   11938:	mov	r0, #12
   1193c:	b	119e8 <__assert_fail@plt+0xf04>
   11940:	mov	r2, #3
   11944:	mov	r0, sp
   11948:	mov	r3, #0
   1194c:	strb	r3, [sp, #3]
   11950:	bl	10a6c <strncpy@plt>
   11954:	mov	r0, sp
   11958:	add	r1, sp, #4
   1195c:	mov	r2, #8
   11960:	bl	10958 <strtol@plt>
   11964:	ldr	r3, [sp, #4]
   11968:	mov	r4, sp
   1196c:	cmp	r3, r4
   11970:	rsbhi	r4, r4, r3
   11974:	bhi	119e0 <__assert_fail@plt+0xefc>
   11978:	ldr	r0, [pc, #116]	; 119f4 <__assert_fail@plt+0xf10>
   1197c:	mov	r2, #150	; 0x96
   11980:	ldr	r1, [pc, #112]	; 119f8 <__assert_fail@plt+0xf14>
   11984:	ldr	r3, [pc, #112]	; 119fc <__assert_fail@plt+0xf18>
   11988:	add	r0, pc, r0
   1198c:	add	r1, pc, r1
   11990:	add	r3, pc, r3
   11994:	bl	10ae4 <__assert_fail@plt>
   11998:	add	r1, r3, r4
   1199c:	mov	r2, #0
   119a0:	mov	r0, sp
   119a4:	strb	r2, [sp, #2]
   119a8:	mov	r2, #2
   119ac:	mov	r5, sp
   119b0:	bl	10a6c <strncpy@plt>
   119b4:	mov	r0, sp
   119b8:	add	r1, sp, #4
   119bc:	mov	r2, #16
   119c0:	bl	10958 <strtol@plt>
   119c4:	ldr	r3, [sp, #4]
   119c8:	cmp	r3, r5
   119cc:	rsbhi	r5, r5, r3
   119d0:	bhi	119e0 <__assert_fail@plt+0xefc>
   119d4:	ldr	r0, [pc, #36]	; 11a00 <__assert_fail@plt+0xf1c>
   119d8:	add	r0, pc, r0
   119dc:	bl	10b4c <__assert_fail@plt+0x68>
   119e0:	add	r4, r4, r5
   119e4:	uxtb	r0, r0
   119e8:	str	r4, [r6]
   119ec:	add	sp, sp, #8
   119f0:	pop	{r4, r5, r6, pc}
   119f4:	andeq	r2, r0, r1, lsr lr
   119f8:	andeq	r2, r0, r6, lsr lr
   119fc:	andeq	r2, r0, r0, lsl #28
   11a00:	strdeq	r2, [r0], -r1
   11a04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11a08:	mov	r9, r1
   11a0c:	mov	r4, #0
   11a10:	str	r4, [r1]
   11a14:	ldr	r1, [pc, #208]	; 11aec <__assert_fail@plt+0x1008>
   11a18:	mov	r5, r0
   11a1c:	mov	sl, r2
   11a20:	add	r1, pc, r1
   11a24:	bl	1094c <strcmp@plt>
   11a28:	cmp	r0, #0
   11a2c:	beq	11a50 <__assert_fail@plt+0xf6c>
   11a30:	mov	r0, r5
   11a34:	mov	r1, r4
   11a38:	bl	109e8 <open@plt>
   11a3c:	subs	r8, r0, #0
   11a40:	bge	11a54 <__assert_fail@plt+0xf70>
   11a44:	bl	10a3c <__errno_location@plt>
   11a48:	ldr	r0, [r0]
   11a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a50:	mov	r8, r0
   11a54:	mov	r0, #1024	; 0x400
   11a58:	mov	r5, #0
   11a5c:	bl	11698 <__assert_fail@plt+0xbb4>
   11a60:	mov	r4, #1024	; 0x400
   11a64:	mov	r6, r0
   11a68:	mov	r0, r8
   11a6c:	add	r1, r6, r5
   11a70:	rsb	r2, r5, r4
   11a74:	bl	10970 <read@plt>
   11a78:	subs	r7, r0, #0
   11a7c:	bge	11a8c <__assert_fail@plt+0xfa8>
   11a80:	bl	10a3c <__errno_location@plt>
   11a84:	ldr	r7, [r0]
   11a88:	b	11ac4 <__assert_fail@plt+0xfe0>
   11a8c:	add	r5, r5, r7
   11a90:	beq	11ac4 <__assert_fail@plt+0xfe0>
   11a94:	cmp	r5, r4
   11a98:	bne	11a68 <__assert_fail@plt+0xf84>
   11a9c:	lsl	r4, r5, #1
   11aa0:	mov	r0, r6
   11aa4:	mov	r1, r4
   11aa8:	bl	109ac <realloc@plt>
   11aac:	subs	r6, r0, #0
   11ab0:	bne	11a68 <__assert_fail@plt+0xf84>
   11ab4:	ldr	r0, [pc, #52]	; 11af0 <__assert_fail@plt+0x100c>
   11ab8:	mov	r1, r4
   11abc:	add	r0, pc, r0
   11ac0:	bl	10b4c <__assert_fail@plt+0x68>
   11ac4:	mov	r0, r8
   11ac8:	bl	10ad8 <close@plt>
   11acc:	cmp	r7, #0
   11ad0:	streq	r6, [r9]
   11ad4:	beq	11ae0 <__assert_fail@plt+0xffc>
   11ad8:	mov	r0, r6
   11adc:	bl	10988 <free@plt>
   11ae0:	str	r4, [sl]
   11ae4:	mov	r0, r7
   11ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11aec:	andeq	r2, r0, pc, asr #27
   11af0:	andeq	r2, r0, r6, lsr #21
   11af4:	push	{r0, r1, r2, lr}
   11af8:	add	r2, sp, #4
   11afc:	bl	11a04 <__assert_fail@plt+0xf20>
   11b00:	add	sp, sp, #12
   11b04:	pop	{pc}		; (ldr pc, [sp], #4)
   11b08:	push	{r0, r1, r2, r4, r5, lr}
   11b0c:	mov	r2, r1
   11b10:	add	r1, sp, #4
   11b14:	mov	r5, r0
   11b18:	bl	11a04 <__assert_fail@plt+0xf20>
   11b1c:	ldr	r4, [pc, #64]	; 11b64 <__assert_fail@plt+0x1080>
   11b20:	add	r4, pc, r4
   11b24:	cmp	r0, #0
   11b28:	ldreq	r0, [sp, #4]
   11b2c:	beq	11b5c <__assert_fail@plt+0x1078>
   11b30:	ldr	r3, [pc, #48]	; 11b68 <__assert_fail@plt+0x1084>
   11b34:	ldr	r3, [r4, r3]
   11b38:	ldr	r4, [r3]
   11b3c:	bl	109d0 <strerror@plt>
   11b40:	ldr	r1, [pc, #36]	; 11b6c <__assert_fail@plt+0x1088>
   11b44:	mov	r2, r5
   11b48:	add	r1, pc, r1
   11b4c:	mov	r3, r0
   11b50:	mov	r0, r4
   11b54:	bl	10a30 <fprintf@plt>
   11b58:	mov	r0, #0
   11b5c:	add	sp, sp, #12
   11b60:	pop	{r4, r5, pc}
   11b64:	ldrdeq	r3, [r1], -r8
   11b68:	muleq	r0, ip, r0
   11b6c:	andeq	r2, r0, r9, lsr #25
   11b70:	push	{r0, r1, r2, lr}
   11b74:	add	r1, sp, #4
   11b78:	bl	11b08 <__assert_fail@plt+0x1024>
   11b7c:	add	sp, sp, #12
   11b80:	pop	{pc}		; (ldr pc, [sp], #4)
   11b84:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11b88:	mov	r7, r1
   11b8c:	ldr	r1, [pc, #188]	; 11c50 <__assert_fail@plt+0x116c>
   11b90:	mov	r4, r0
   11b94:	add	r1, pc, r1
   11b98:	bl	1094c <strcmp@plt>
   11b9c:	cmp	r0, #0
   11ba0:	moveq	r6, #1
   11ba4:	beq	11bcc <__assert_fail@plt+0x10e8>
   11ba8:	mov	r0, r4
   11bac:	movw	r1, #577	; 0x241
   11bb0:	movw	r2, #438	; 0x1b6
   11bb4:	bl	109e8 <open@plt>
   11bb8:	subs	r6, r0, #0
   11bbc:	bge	11bcc <__assert_fail@plt+0x10e8>
   11bc0:	bl	10a3c <__errno_location@plt>
   11bc4:	ldr	r0, [r0]
   11bc8:	b	11c48 <__assert_fail@plt+0x1164>
   11bcc:	ldr	r3, [r7, #4]
   11bd0:	mov	r4, #0
   11bd4:	mov	r5, r4
   11bd8:	ubfx	r8, r3, #8, #8
   11bdc:	str	r3, [sp, #4]
   11be0:	lsl	r8, r8, #16
   11be4:	orr	r8, r8, r3, lsl #24
   11be8:	orr	r8, r8, r3, lsr #24
   11bec:	ubfx	r3, r3, #16, #8
   11bf0:	orr	r8, r8, r3, lsl #8
   11bf4:	cmp	r5, r8
   11bf8:	bge	11c2c <__assert_fail@plt+0x1148>
   11bfc:	mov	r0, r6
   11c00:	add	r1, r7, r5
   11c04:	rsb	r2, r5, r8
   11c08:	bl	10a78 <write@plt>
   11c0c:	subs	r4, r0, #0
   11c10:	bge	11c24 <__assert_fail@plt+0x1140>
   11c14:	bl	10a3c <__errno_location@plt>
   11c18:	ldr	r4, [r0]
   11c1c:	rsb	r4, r4, #0
   11c20:	b	11c2c <__assert_fail@plt+0x1148>
   11c24:	add	r5, r5, r4
   11c28:	b	11bf4 <__assert_fail@plt+0x1110>
   11c2c:	cmp	r6, #1
   11c30:	beq	11c3c <__assert_fail@plt+0x1158>
   11c34:	mov	r0, r6
   11c38:	bl	10ad8 <close@plt>
   11c3c:	cmp	r4, #0
   11c40:	rsblt	r0, r4, #0
   11c44:	movge	r0, #0
   11c48:	add	sp, sp, #8
   11c4c:	pop	{r4, r5, r6, r7, r8, pc}
   11c50:	andeq	r2, r0, fp, asr ip
   11c54:	push	{r3, r4, r5, lr}
   11c58:	mov	r5, r0
   11c5c:	bl	11b84 <__assert_fail@plt+0x10a0>
   11c60:	ldr	r4, [pc, #64]	; 11ca8 <__assert_fail@plt+0x11c4>
   11c64:	add	r4, pc, r4
   11c68:	subs	r3, r0, #0
   11c6c:	beq	11ca0 <__assert_fail@plt+0x11bc>
   11c70:	ldr	r3, [pc, #52]	; 11cac <__assert_fail@plt+0x11c8>
   11c74:	ldr	r3, [r4, r3]
   11c78:	ldr	r4, [r3]
   11c7c:	bl	109d0 <strerror@plt>
   11c80:	ldr	r1, [pc, #40]	; 11cb0 <__assert_fail@plt+0x11cc>
   11c84:	mov	r2, r5
   11c88:	add	r1, pc, r1
   11c8c:	mov	r3, r0
   11c90:	mov	r0, r4
   11c94:	bl	10a30 <fprintf@plt>
   11c98:	mvn	r0, #0
   11c9c:	pop	{r3, r4, r5, pc}
   11ca0:	mov	r0, r3
   11ca4:	pop	{r3, r4, r5, pc}
   11ca8:	muleq	r1, r4, r3
   11cac:	muleq	r0, ip, r0
   11cb0:	andeq	r2, r0, fp, lsl #23
   11cb4:	push	{r4, r5, r6, r7, r8, lr}
   11cb8:	mov	r4, r0
   11cbc:	ldrb	r3, [r0]
   11cc0:	mov	r8, r1
   11cc4:	mov	r7, r2
   11cc8:	cmp	r3, #0
   11ccc:	bne	11cd8 <__assert_fail@plt+0x11f4>
   11cd0:	mvn	r0, #0
   11cd4:	pop	{r4, r5, r6, r7, r8, pc}
   11cd8:	mvn	r3, #0
   11cdc:	str	r3, [r2]
   11ce0:	ldrb	r5, [r0]
   11ce4:	ldr	r0, [pc, #156]	; 11d88 <__assert_fail@plt+0x12a4>
   11ce8:	mov	r1, r5
   11cec:	add	r0, pc, r0
   11cf0:	bl	10a24 <strchr@plt>
   11cf4:	cmp	r0, #0
   11cf8:	moveq	r5, r0
   11cfc:	beq	11d1c <__assert_fail@plt+0x1238>
   11d00:	ldrb	r3, [r4, #1]
   11d04:	cmp	r5, r3
   11d08:	addne	r4, r4, #1
   11d0c:	bne	11d1c <__assert_fail@plt+0x1238>
   11d10:	cmp	r5, #104	; 0x68
   11d14:	add	r4, r4, #2
   11d18:	moveq	r5, #98	; 0x62
   11d1c:	ldrb	r6, [r4]
   11d20:	cmp	r6, #0
   11d24:	beq	11cd0 <__assert_fail@plt+0x11ec>
   11d28:	ldr	r0, [pc, #92]	; 11d8c <__assert_fail@plt+0x12a8>
   11d2c:	mov	r1, r6
   11d30:	add	r0, pc, r0
   11d34:	bl	10a24 <strchr@plt>
   11d38:	cmp	r0, #0
   11d3c:	beq	11cd0 <__assert_fail@plt+0x11ec>
   11d40:	cmp	r6, #115	; 0x73
   11d44:	beq	11d70 <__assert_fail@plt+0x128c>
   11d48:	cmp	r5, #98	; 0x62
   11d4c:	moveq	r3, #1
   11d50:	beq	11d6c <__assert_fail@plt+0x1288>
   11d54:	cmp	r5, #104	; 0x68
   11d58:	moveq	r3, #2
   11d5c:	beq	11d6c <__assert_fail@plt+0x1288>
   11d60:	cmp	r5, #108	; 0x6c
   11d64:	mvnne	r3, #0
   11d68:	moveq	r3, #4
   11d6c:	str	r3, [r7]
   11d70:	ldrb	r3, [r4]
   11d74:	str	r3, [r8]
   11d78:	ldrb	r0, [r4, #1]
   11d7c:	subs	r0, r0, #0
   11d80:	mvnne	r0, #0
   11d84:	pop	{r4, r5, r6, r7, r8, pc}
   11d88:	andeq	r2, r0, r8, asr #22
   11d8c:	andeq	r2, r0, r9, lsl #22
   11d90:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11d94:	subs	r4, r1, #0
   11d98:	mov	r6, r0
   11d9c:	beq	11ef0 <__assert_fail@plt+0x140c>
   11da0:	bl	1180c <__assert_fail@plt+0xd28>
   11da4:	subs	r5, r0, #0
   11da8:	beq	11e00 <__assert_fail@plt+0x131c>
   11dac:	ldr	r0, [pc, #324]	; 11ef8 <__assert_fail@plt+0x1414>
   11db0:	mov	r5, r6
   11db4:	ldr	r7, [pc, #320]	; 11efc <__assert_fail@plt+0x1418>
   11db8:	add	r4, r6, r4
   11dbc:	add	r0, pc, r0
   11dc0:	ldr	r6, [pc, #312]	; 11f00 <__assert_fail@plt+0x141c>
   11dc4:	bl	10964 <printf@plt>
   11dc8:	add	r7, pc, r7
   11dcc:	add	r6, pc, r6
   11dd0:	mov	r1, r5
   11dd4:	mov	r0, r7
   11dd8:	bl	10964 <printf@plt>
   11ddc:	mov	r0, r5
   11de0:	bl	10a18 <strlen@plt>
   11de4:	add	r0, r0, #1
   11de8:	add	r5, r5, r0
   11dec:	cmp	r5, r4
   11df0:	bcs	11ef0 <__assert_fail@plt+0x140c>
   11df4:	mov	r0, r6
   11df8:	bl	10964 <printf@plt>
   11dfc:	b	11dd0 <__assert_fail@plt+0x12ec>
   11e00:	ands	r7, r4, #3
   11e04:	bne	11e90 <__assert_fail@plt+0x13ac>
   11e08:	ldr	r0, [pc, #244]	; 11f04 <__assert_fail@plt+0x1420>
   11e0c:	mov	r5, r7
   11e10:	ldr	r8, [pc, #240]	; 11f08 <__assert_fail@plt+0x1424>
   11e14:	add	r0, pc, r0
   11e18:	ldr	r7, [pc, #236]	; 11f0c <__assert_fail@plt+0x1428>
   11e1c:	bl	10964 <printf@plt>
   11e20:	add	r3, r4, #3
   11e24:	cmp	r4, #0
   11e28:	ldr	r9, [pc, #224]	; 11f10 <__assert_fail@plt+0x142c>
   11e2c:	add	r7, pc, r7
   11e30:	add	r8, pc, r8
   11e34:	movlt	r4, r3
   11e38:	add	r9, pc, r9
   11e3c:	asr	r4, r4, #2
   11e40:	cmp	r5, r4
   11e44:	bge	11e88 <__assert_fail@plt+0x13a4>
   11e48:	ldr	r3, [r6, r5, lsl #2]
   11e4c:	sub	r2, r4, #1
   11e50:	cmp	r5, r2
   11e54:	mov	r0, r9
   11e58:	ubfx	r1, r3, #8, #8
   11e5c:	add	r5, r5, #1
   11e60:	str	r3, [sp, #4]
   11e64:	movge	r2, r7
   11e68:	movlt	r2, r8
   11e6c:	lsl	r1, r1, #16
   11e70:	orr	r1, r1, r3, lsl #24
   11e74:	orr	r1, r1, r3, lsr #24
   11e78:	ubfx	r3, r3, #16, #8
   11e7c:	orr	r1, r1, r3, lsl #8
   11e80:	bl	10964 <printf@plt>
   11e84:	b	11e40 <__assert_fail@plt+0x135c>
   11e88:	mov	r0, #62	; 0x3e
   11e8c:	b	11ee4 <__assert_fail@plt+0x1400>
   11e90:	ldr	r0, [pc, #124]	; 11f14 <__assert_fail@plt+0x1430>
   11e94:	ldr	r7, [pc, #124]	; 11f18 <__assert_fail@plt+0x1434>
   11e98:	add	r0, pc, r0
   11e9c:	ldr	r8, [pc, #120]	; 11f1c <__assert_fail@plt+0x1438>
   11ea0:	bl	10964 <printf@plt>
   11ea4:	ldr	r9, [pc, #116]	; 11f20 <__assert_fail@plt+0x143c>
   11ea8:	add	r7, pc, r7
   11eac:	add	r8, pc, r8
   11eb0:	add	r9, pc, r9
   11eb4:	cmp	r5, r4
   11eb8:	bge	11ee0 <__assert_fail@plt+0x13fc>
   11ebc:	sub	r3, r4, #1
   11ec0:	ldrb	r1, [r6, r5]
   11ec4:	cmp	r5, r3
   11ec8:	mov	r0, r9
   11ecc:	add	r5, r5, #1
   11ed0:	movge	r2, r7
   11ed4:	movlt	r2, r8
   11ed8:	bl	10964 <printf@plt>
   11edc:	b	11eb4 <__assert_fail@plt+0x13d0>
   11ee0:	mov	r0, #93	; 0x5d
   11ee4:	add	sp, sp, #12
   11ee8:	pop	{r4, r5, r6, r7, r8, r9, lr}
   11eec:	b	10a60 <putchar@plt>
   11ef0:	add	sp, sp, #12
   11ef4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11ef8:	andeq	r2, r0, r2, lsl #21
   11efc:	andeq	r2, r0, sl, ror sl
   11f00:	andeq	r2, r0, pc, ror #21
   11f04:	andeq	r2, r0, r3, lsr sl
   11f08:	andeq	r2, r0, r4, lsl #21
   11f0c:	andeq	r2, r0, sl, ror #15
   11f10:	andeq	r2, r0, r4, lsl sl
   11f14:			; <UNDEFINED> instruction: 0x000029bd
   11f18:	andeq	r2, r0, lr, ror #14
   11f1c:	andeq	r2, r0, r8, lsl #20
   11f20:	andeq	r2, r0, sl, lsr #19
   11f24:	ldr	r0, [pc, #24]	; 11f44 <__assert_fail@plt+0x1460>
   11f28:	ldr	r1, [pc, #24]	; 11f48 <__assert_fail@plt+0x1464>
   11f2c:	push	{r3, lr}
   11f30:	add	r0, pc, r0
   11f34:	add	r1, pc, r1
   11f38:	bl	10964 <printf@plt>
   11f3c:	mov	r0, #0
   11f40:	bl	10a0c <exit@plt>
   11f44:	andeq	r2, r0, r1, lsr r9
   11f48:	andeq	r2, r0, sl, lsr r9
   11f4c:	ldr	ip, [pc, #444]	; 12110 <__assert_fail@plt+0x162c>
   11f50:	subs	r8, r0, #0
   11f54:	push	{r0, r1, r2, r3, r4, r5, r6, r7, fp, lr}
   11f58:	add	ip, pc, ip
   11f5c:	mov	r6, r1
   11f60:	mov	lr, r2
   11f64:	mov	r5, r3
   11f68:	ldrne	r3, [pc, #420]	; 12114 <__assert_fail@plt+0x1630>
   11f6c:	ldreq	r3, [pc, #420]	; 12118 <__assert_fail@plt+0x1634>
   11f70:	ldr	r3, [ip, r3]
   11f74:	mov	r2, r6
   11f78:	ldr	ip, [pc, #412]	; 1211c <__assert_fail@plt+0x1638>
   11f7c:	mov	r6, #0
   11f80:	ldr	r1, [pc, #408]	; 12120 <__assert_fail@plt+0x163c>
   11f84:	mov	r7, r6
   11f88:	add	ip, pc, ip
   11f8c:	ldr	r4, [r3]
   11f90:	add	r1, pc, r1
   11f94:	ldr	r0, [ip]
   11f98:	ldrh	r3, [ip, #4]
   11f9c:	str	r0, [sp, #16]
   11fa0:	mov	r0, r4
   11fa4:	strh	r3, [sp, #20]
   11fa8:	mov	r3, lr
   11fac:	bl	10a30 <fprintf@plt>
   11fb0:	ldr	r0, [r5, r6]
   11fb4:	cmp	r0, #0
   11fb8:	beq	11fe4 <__assert_fail@plt+0x1500>
   11fbc:	bl	10a18 <strlen@plt>
   11fc0:	add	r3, r5, r6
   11fc4:	add	r6, r6, #16
   11fc8:	ldr	r3, [r3, #4]
   11fcc:	cmp	r3, #1
   11fd0:	addne	r0, r0, #1
   11fd4:	addeq	r0, r0, #7
   11fd8:	cmp	r7, r0
   11fdc:	movlt	r7, r0
   11fe0:	b	11fb0 <__assert_fail@plt+0x14cc>
   11fe4:	ldr	r6, [sp, #40]	; 0x28
   11fe8:	ldr	r9, [pc, #308]	; 12124 <__assert_fail@plt+0x1640>
   11fec:	ldr	sl, [pc, #308]	; 12128 <__assert_fail@plt+0x1644>
   11ff0:	sub	r6, r6, #4
   11ff4:	ldr	fp, [pc, #304]	; 1212c <__assert_fail@plt+0x1648>
   11ff8:	add	r9, pc, r9
   11ffc:	add	sl, pc, sl
   12000:	add	fp, pc, fp
   12004:	ldr	r3, [r5]
   12008:	cmp	r3, #0
   1200c:	beq	120e8 <__assert_fail@plt+0x1604>
   12010:	ldr	r3, [r6, #4]
   12014:	cmp	r3, #0
   12018:	bne	12040 <__assert_fail@plt+0x155c>
   1201c:	ldr	r3, [pc, #268]	; 12130 <__assert_fail@plt+0x164c>
   12020:	movw	r2, #450	; 0x1c2
   12024:	ldr	r0, [pc, #264]	; 12134 <__assert_fail@plt+0x1650>
   12028:	ldr	r1, [pc, #264]	; 12138 <__assert_fail@plt+0x1654>
   1202c:	add	r3, pc, r3
   12030:	add	r0, pc, r0
   12034:	add	r3, r3, #13
   12038:	add	r1, pc, r1
   1203c:	bl	10ae4 <__assert_fail@plt>
   12040:	ldr	r2, [r5, #12]
   12044:	cmp	r2, #126	; 0x7e
   12048:	ble	1205c <__assert_fail@plt+0x1578>
   1204c:	mov	r0, sl
   12050:	mov	r1, r4
   12054:	bl	10ac0 <fputs@plt>
   12058:	b	12068 <__assert_fail@plt+0x1584>
   1205c:	mov	r0, r4
   12060:	mov	r1, r9
   12064:	bl	10a30 <fprintf@plt>
   12068:	ldr	r3, [r5, #4]
   1206c:	cmp	r3, #0
   12070:	bne	12090 <__assert_fail@plt+0x15ac>
   12074:	ldr	r1, [pc, #192]	; 1213c <__assert_fail@plt+0x1658>
   12078:	mov	r0, r4
   1207c:	mov	r2, r7
   12080:	ldr	r3, [r5]
   12084:	add	r1, pc, r1
   12088:	bl	10a30 <fprintf@plt>
   1208c:	b	120cc <__assert_fail@plt+0x15e8>
   12090:	ldr	r2, [r5]
   12094:	mov	r0, r2
   12098:	str	r2, [sp, #12]
   1209c:	bl	10a18 <strlen@plt>
   120a0:	sub	r3, r7, #6
   120a4:	mov	r1, fp
   120a8:	ldr	r2, [sp, #12]
   120ac:	rsb	r0, r0, r3
   120b0:	ldr	r3, [pc, #136]	; 12140 <__assert_fail@plt+0x165c>
   120b4:	str	r0, [sp]
   120b8:	mov	r0, r4
   120bc:	add	r3, pc, r3
   120c0:	str	r3, [sp, #4]
   120c4:	add	r3, sp, #16
   120c8:	bl	10a30 <fprintf@plt>
   120cc:	ldr	r1, [pc, #112]	; 12144 <__assert_fail@plt+0x1660>
   120d0:	mov	r0, r4
   120d4:	ldr	r2, [r6, #4]!
   120d8:	add	r5, r5, #16
   120dc:	add	r1, pc, r1
   120e0:	bl	10a30 <fprintf@plt>
   120e4:	b	12004 <__assert_fail@plt+0x1520>
   120e8:	cmp	r8, #0
   120ec:	moveq	r0, r8
   120f0:	beq	1210c <__assert_fail@plt+0x1628>
   120f4:	ldr	r1, [pc, #76]	; 12148 <__assert_fail@plt+0x1664>
   120f8:	mov	r0, r4
   120fc:	mov	r2, r8
   12100:	add	r1, pc, r1
   12104:	bl	10a30 <fprintf@plt>
   12108:	mov	r0, #1
   1210c:	bl	10a0c <exit@plt>
   12110:	andeq	r3, r1, r0, lsr #1
   12114:	muleq	r0, ip, r0
   12118:	andeq	r0, r0, r4, lsr #1
   1211c:	andeq	r2, r0, r4, asr r9
   12120:	andeq	r2, r0, r8, ror #17
   12124:			; <UNDEFINED> instruction: 0x000028be
   12128:			; <UNDEFINED> instruction: 0x000028b3
   1212c:	andeq	r2, r0, r5, asr #17
   12130:	andeq	r2, r0, r4, ror #14
   12134:	andeq	r2, r0, r3, ror #16
   12138:	andeq	r2, r0, sl, lsl #15
   1213c:	andeq	r2, r0, sl, lsr r8
   12140:	andeq	r2, r0, sl, asr r5
   12144:	andeq	r2, r0, r3, lsr r7
   12148:	ldrdeq	r2, [r0], -r0
   1214c:	ubfx	r3, r0, #8, #8
   12150:	sub	sp, sp, #8
   12154:	lsl	r3, r3, #16
   12158:	orr	r3, r3, r0, lsl #24
   1215c:	orr	r3, r3, r0, lsr #24
   12160:	ubfx	r0, r0, #16, #8
   12164:	orr	r0, r3, r0, lsl #8
   12168:	add	sp, sp, #8
   1216c:	bx	lr
   12170:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12174:	lsl	r3, r0, #24
   12178:	strd	r0, [sp]
   1217c:	lsl	r0, r0, #8
   12180:	ldrb	r6, [sp, #2]
   12184:	and	r5, r0, #16711680	; 0xff0000
   12188:	orr	r5, r5, r3
   1218c:	mov	r1, #0
   12190:	orr	r5, r5, r1
   12194:	ldrb	r0, [sp, #7]
   12198:	lsl	r1, r6, #8
   1219c:	ldrb	r6, [sp, #4]
   121a0:	mov	r2, #0
   121a4:	orr	r4, r2, r2
   121a8:	orr	r4, r4, r0
   121ac:	orr	r5, r5, r1
   121b0:	lsl	r0, r6, #24
   121b4:	ldrb	r6, [sp, #5]
   121b8:	orr	r4, r4, r2
   121bc:	ldrb	r1, [sp, #3]
   121c0:	orr	r4, r4, r2
   121c4:	orr	r4, r4, r0
   121c8:	lsl	r0, r6, #16
   121cc:	ldrb	r6, [sp, #6]
   121d0:	orr	r5, r5, r1
   121d4:	orr	r5, r5, r2
   121d8:	orr	r4, r4, r0
   121dc:	orr	r5, r5, r2
   121e0:	lsl	r0, r6, #8
   121e4:	orr	r1, r2, r5
   121e8:	orr	r0, r0, r4
   121ec:	add	sp, sp, #12
   121f0:	pop	{r4, r5, r6, r7, pc}
   121f4:	push	{r0, r1, r4, r5, r6, lr}
   121f8:	add	r6, sp, #4
   121fc:	mov	r5, r0
   12200:	mov	r4, r1
   12204:	mov	r0, r5
   12208:	mov	r1, r4
   1220c:	mov	r2, r6
   12210:	bl	13e04 <__assert_fail@plt+0x3320>
   12214:	cmp	r0, #3
   12218:	beq	12248 <__assert_fail@plt+0x1764>
   1221c:	cmp	r0, #9
   12220:	ldr	r4, [sp, #4]
   12224:	bne	12238 <__assert_fail@plt+0x1754>
   12228:	cmp	r4, #0
   1222c:	movlt	r0, r4
   12230:	mvnge	r0, #10
   12234:	b	1224c <__assert_fail@plt+0x1768>
   12238:	cmp	r0, #4
   1223c:	beq	12204 <__assert_fail@plt+0x1720>
   12240:	mvn	r0, #0
   12244:	b	1224c <__assert_fail@plt+0x1768>
   12248:	mov	r0, r4
   1224c:	add	sp, sp, #8
   12250:	pop	{r4, r5, r6, pc}
   12254:	push	{r3, r4, r5, lr}
   12258:	mov	r4, r0
   1225c:	ldr	r0, [r0, #12]
   12260:	mov	r5, r1
   12264:	bl	1214c <__assert_fail@plt+0x1668>
   12268:	add	r0, r0, r5
   1226c:	add	r0, r4, r0
   12270:	pop	{r3, r4, r5, pc}
   12274:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12278:	mov	r4, r0
   1227c:	mov	r5, r1
   12280:	mov	r8, r2
   12284:	mov	r7, r3
   12288:	bl	13d14 <__assert_fail@plt+0x3230>
   1228c:	subs	r9, r0, #0
   12290:	bne	122d0 <__assert_fail@plt+0x17ec>
   12294:	ldr	r6, [r4, #16]
   12298:	lsl	r5, r5, #4
   1229c:	mov	r0, r6
   122a0:	bl	1214c <__assert_fail@plt+0x1668>
   122a4:	add	r0, r4, r0
   122a8:	ldrd	r0, [r0, r5]
   122ac:	bl	12170 <__assert_fail@plt+0x168c>
   122b0:	strd	r0, [r8]
   122b4:	mov	r0, r6
   122b8:	bl	1214c <__assert_fail@plt+0x1668>
   122bc:	add	r0, r4, r0
   122c0:	add	r5, r0, r5
   122c4:	ldrd	r0, [r5, #8]
   122c8:	bl	12170 <__assert_fail@plt+0x168c>
   122cc:	strd	r0, [r7]
   122d0:	mov	r0, r9
   122d4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   122d8:	push	{r3, r4, r5, lr}
   122dc:	mov	r5, r0
   122e0:	ldr	r0, [r0, #16]
   122e4:	mov	r4, #0
   122e8:	bl	1214c <__assert_fail@plt+0x1668>
   122ec:	add	r5, r5, r0
   122f0:	ldrd	r0, [r5, #8]
   122f4:	add	r5, r5, #16
   122f8:	bl	12170 <__assert_fail@plt+0x168c>
   122fc:	orrs	r3, r0, r1
   12300:	addne	r4, r4, #1
   12304:	bne	122f0 <__assert_fail@plt+0x180c>
   12308:	mov	r0, r4
   1230c:	pop	{r3, r4, r5, pc}
   12310:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12314:	mov	r7, r0
   12318:	mov	r4, r1
   1231c:	mov	r8, r2
   12320:	mov	r5, r3
   12324:	bl	13d14 <__assert_fail@plt+0x3230>
   12328:	cmp	r0, #0
   1232c:	bne	123d8 <__assert_fail@plt+0x18f4>
   12330:	add	r6, sp, #8
   12334:	add	sl, r5, #1
   12338:	str	r0, [r6, #-4]!
   1233c:	ldr	r3, [sp, #4]
   12340:	cmp	r4, #0
   12344:	cmpge	r3, #0
   12348:	blt	123c4 <__assert_fail@plt+0x18e0>
   1234c:	cmp	r3, #1
   12350:	bne	123ac <__assert_fail@plt+0x18c8>
   12354:	mov	r0, r7
   12358:	add	r1, r4, #4
   1235c:	mov	r2, sl
   12360:	bl	13d94 <__assert_fail@plt+0x32b0>
   12364:	subs	r9, r0, #0
   12368:	beq	123ac <__assert_fail@plt+0x18c8>
   1236c:	mov	r1, r8
   12370:	mov	r2, r5
   12374:	bl	109a0 <memcmp@plt>
   12378:	cmp	r0, #0
   1237c:	bne	123ac <__assert_fail@plt+0x18c8>
   12380:	ldrb	r9, [r9, r5]
   12384:	cmp	r9, #0
   12388:	beq	123d4 <__assert_fail@plt+0x18f0>
   1238c:	mov	r0, r8
   12390:	mov	r1, #64	; 0x40
   12394:	mov	r2, r5
   12398:	bl	10a84 <memchr@plt>
   1239c:	cmp	r0, #0
   123a0:	bne	123ac <__assert_fail@plt+0x18c8>
   123a4:	cmp	r9, #64	; 0x40
   123a8:	beq	123d4 <__assert_fail@plt+0x18f0>
   123ac:	mov	r1, r4
   123b0:	mov	r0, r7
   123b4:	mov	r2, r6
   123b8:	bl	13f78 <__assert_fail@plt+0x3494>
   123bc:	mov	r4, r0
   123c0:	b	1233c <__assert_fail@plt+0x1858>
   123c4:	cmp	r3, #0
   123c8:	movge	r0, r4
   123cc:	mvnlt	r0, #0
   123d0:	b	123d8 <__assert_fail@plt+0x18f4>
   123d4:	mov	r0, r4
   123d8:	add	sp, sp, #8
   123dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   123e0:	push	{r4, r5, r6, lr}
   123e4:	mov	r5, r0
   123e8:	mov	r0, r2
   123ec:	mov	r6, r1
   123f0:	mov	r4, r2
   123f4:	bl	10a18 <strlen@plt>
   123f8:	mov	r1, r6
   123fc:	mov	r2, r4
   12400:	mov	r3, r0
   12404:	mov	r0, r5
   12408:	pop	{r4, r5, r6, lr}
   1240c:	b	12310 <__assert_fail@plt+0x182c>
   12410:	push	{r3, r4, r5, r6, r7, lr}
   12414:	mov	r5, r0
   12418:	ldr	r0, [r0, #8]
   1241c:	mov	r6, r1
   12420:	mov	r4, r2
   12424:	bl	1214c <__assert_fail@plt+0x1668>
   12428:	mov	r7, r0
   1242c:	mov	r0, r5
   12430:	bl	13d14 <__assert_fail@plt+0x3230>
   12434:	cmp	r0, #0
   12438:	bne	12478 <__assert_fail@plt+0x1994>
   1243c:	mov	r0, r5
   12440:	mov	r1, r6
   12444:	bl	13f00 <__assert_fail@plt+0x341c>
   12448:	cmp	r0, #0
   1244c:	blt	12478 <__assert_fail@plt+0x1994>
   12450:	add	r6, r7, r6
   12454:	cmp	r4, #0
   12458:	add	r5, r5, r6
   1245c:	add	r5, r5, #4
   12460:	beq	12470 <__assert_fail@plt+0x198c>
   12464:	mov	r0, r5
   12468:	bl	10a18 <strlen@plt>
   1246c:	str	r0, [r4]
   12470:	mov	r0, r5
   12474:	pop	{r3, r4, r5, r6, r7, pc}
   12478:	cmp	r4, #0
   1247c:	strne	r0, [r4]
   12480:	movne	r0, #0
   12484:	moveq	r0, r4
   12488:	pop	{r3, r4, r5, r6, r7, pc}
   1248c:	push	{r4, lr}
   12490:	mov	r4, r0
   12494:	bl	13f00 <__assert_fail@plt+0x341c>
   12498:	subs	r1, r0, #0
   1249c:	poplt	{r4, pc}
   124a0:	mov	r0, r4
   124a4:	pop	{r4, lr}
   124a8:	b	121f4 <__assert_fail@plt+0x1710>
   124ac:	push	{r4, lr}
   124b0:	mov	r4, r0
   124b4:	bl	13f3c <__assert_fail@plt+0x3458>
   124b8:	subs	r1, r0, #0
   124bc:	poplt	{r4, pc}
   124c0:	mov	r0, r4
   124c4:	pop	{r4, lr}
   124c8:	b	121f4 <__assert_fail@plt+0x1710>
   124cc:	push	{r4, r5, r6, lr}
   124d0:	mov	r6, r0
   124d4:	mov	r5, r1
   124d8:	mov	r4, r2
   124dc:	bl	13f3c <__assert_fail@plt+0x3458>
   124e0:	cmp	r0, #0
   124e4:	bge	124f8 <__assert_fail@plt+0x1a14>
   124e8:	cmp	r4, #0
   124ec:	strne	r0, [r4]
   124f0:	mov	r0, #0
   124f4:	pop	{r4, r5, r6, pc}
   124f8:	ldr	r0, [r6, #8]
   124fc:	bl	1214c <__assert_fail@plt+0x1668>
   12500:	cmp	r4, #0
   12504:	add	r0, r0, r5
   12508:	add	r5, r6, r0
   1250c:	beq	1251c <__assert_fail@plt+0x1a38>
   12510:	ldr	r0, [r5, #4]
   12514:	bl	1214c <__assert_fail@plt+0x1668>
   12518:	str	r0, [r4]
   1251c:	mov	r0, r5
   12520:	pop	{r4, r5, r6, pc}
   12524:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12528:	mov	r6, r0
   1252c:	mov	r9, r2
   12530:	mov	r7, r3
   12534:	ldr	r5, [sp, #32]
   12538:	bl	1248c <__assert_fail@plt+0x19a8>
   1253c:	mov	r4, r0
   12540:	cmp	r4, #0
   12544:	blt	125a8 <__assert_fail@plt+0x1ac4>
   12548:	mov	r0, r6
   1254c:	mov	r1, r4
   12550:	mov	r2, r5
   12554:	bl	124cc <__assert_fail@plt+0x19e8>
   12558:	subs	r8, r0, #0
   1255c:	beq	125a4 <__assert_fail@plt+0x1ac0>
   12560:	ldr	r0, [r8, #8]
   12564:	bl	1214c <__assert_fail@plt+0x1668>
   12568:	mov	r1, r0
   1256c:	mov	r0, r6
   12570:	bl	12254 <__assert_fail@plt+0x1770>
   12574:	mov	sl, r0
   12578:	bl	10a18 <strlen@plt>
   1257c:	cmp	r0, r7
   12580:	bne	125b8 <__assert_fail@plt+0x1ad4>
   12584:	mov	r0, sl
   12588:	mov	r1, r9
   1258c:	mov	r2, r7
   12590:	bl	109a0 <memcmp@plt>
   12594:	cmp	r0, #0
   12598:	bne	125b8 <__assert_fail@plt+0x1ad4>
   1259c:	mov	r0, r8
   125a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   125a4:	mvn	r4, #12
   125a8:	cmp	r5, #0
   125ac:	mov	r0, #0
   125b0:	strne	r4, [r5]
   125b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   125b8:	mov	r0, r6
   125bc:	mov	r1, r4
   125c0:	bl	124ac <__assert_fail@plt+0x19c8>
   125c4:	b	1253c <__assert_fail@plt+0x1a58>
   125c8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   125cc:	mov	r5, r0
   125d0:	mov	r0, r2
   125d4:	mov	r7, r3
   125d8:	mov	r6, r1
   125dc:	mov	r4, r2
   125e0:	bl	10a18 <strlen@plt>
   125e4:	str	r7, [sp]
   125e8:	mov	r1, r6
   125ec:	mov	r2, r4
   125f0:	mov	r3, r0
   125f4:	mov	r0, r5
   125f8:	bl	12524 <__assert_fail@plt+0x1a40>
   125fc:	add	sp, sp, #12
   12600:	pop	{r4, r5, r6, r7, pc}
   12604:	push	{r0, r1, r2, lr}
   12608:	ldr	ip, [sp, #16]
   1260c:	str	ip, [sp]
   12610:	bl	12524 <__assert_fail@plt+0x1a40>
   12614:	cmp	r0, #0
   12618:	addne	r0, r0, #12
   1261c:	add	sp, sp, #12
   12620:	pop	{pc}		; (ldr pc, [sp], #4)
   12624:	push	{r4, r5, r6, lr}
   12628:	mov	r5, r2
   1262c:	mov	r2, r3
   12630:	mov	r6, r0
   12634:	bl	124cc <__assert_fail@plt+0x19e8>
   12638:	subs	r4, r0, #0
   1263c:	beq	12668 <__assert_fail@plt+0x1b84>
   12640:	cmp	r5, #0
   12644:	beq	12660 <__assert_fail@plt+0x1b7c>
   12648:	ldr	r0, [r4, #8]
   1264c:	bl	1214c <__assert_fail@plt+0x1668>
   12650:	mov	r1, r0
   12654:	mov	r0, r6
   12658:	bl	12254 <__assert_fail@plt+0x1770>
   1265c:	str	r0, [r5]
   12660:	add	r0, r4, #12
   12664:	pop	{r4, r5, r6, pc}
   12668:	mov	r0, r4
   1266c:	pop	{r4, r5, r6, pc}
   12670:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12674:	mov	r5, r0
   12678:	mov	r0, r2
   1267c:	mov	r7, r3
   12680:	mov	r6, r1
   12684:	mov	r4, r2
   12688:	bl	10a18 <strlen@plt>
   1268c:	str	r7, [sp]
   12690:	mov	r1, r6
   12694:	mov	r2, r4
   12698:	mov	r3, r0
   1269c:	mov	r0, r5
   126a0:	bl	12604 <__assert_fail@plt+0x1b20>
   126a4:	add	sp, sp, #12
   126a8:	pop	{r4, r5, r6, r7, pc}
   126ac:	push	{r0, r1, r4, r5, r6, lr}
   126b0:	add	r4, sp, #4
   126b4:	ldr	r2, [pc, #100]	; 12720 <__assert_fail@plt+0x1c3c>
   126b8:	mov	r6, r0
   126bc:	mov	r3, r4
   126c0:	mov	r5, r1
   126c4:	add	r2, pc, r2
   126c8:	bl	12670 <__assert_fail@plt+0x1b8c>
   126cc:	cmp	r0, #0
   126d0:	beq	126e0 <__assert_fail@plt+0x1bfc>
   126d4:	ldr	r3, [sp, #4]
   126d8:	cmp	r3, #4
   126dc:	beq	12710 <__assert_fail@plt+0x1c2c>
   126e0:	ldr	r2, [pc, #60]	; 12724 <__assert_fail@plt+0x1c40>
   126e4:	mov	r0, r6
   126e8:	mov	r1, r5
   126ec:	mov	r3, r4
   126f0:	add	r2, pc, r2
   126f4:	bl	12670 <__assert_fail@plt+0x1b8c>
   126f8:	cmp	r0, #0
   126fc:	beq	12718 <__assert_fail@plt+0x1c34>
   12700:	ldr	r3, [sp, #4]
   12704:	cmp	r3, #4
   12708:	movne	r0, #0
   1270c:	bne	12718 <__assert_fail@plt+0x1c34>
   12710:	ldr	r0, [r0]
   12714:	bl	1214c <__assert_fail@plt+0x1668>
   12718:	add	sp, sp, #8
   1271c:	pop	{r4, r5, r6, pc}
   12720:	andeq	r2, r0, r4, lsr #4
   12724:	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
   12728:	push	{r4, r5, r6, lr}
   1272c:	mvn	r1, #0
   12730:	mov	r2, #0
   12734:	mov	r6, r0
   12738:	bl	13f78 <__assert_fail@plt+0x3494>
   1273c:	mov	r5, #0
   12740:	mov	r4, r0
   12744:	cmn	r4, #1
   12748:	beq	12788 <__assert_fail@plt+0x1ca4>
   1274c:	cmp	r4, #0
   12750:	blt	12790 <__assert_fail@plt+0x1cac>
   12754:	mov	r0, r6
   12758:	mov	r1, r4
   1275c:	bl	126ac <__assert_fail@plt+0x1bc8>
   12760:	cmn	r0, #1
   12764:	beq	12770 <__assert_fail@plt+0x1c8c>
   12768:	cmp	r5, r0
   1276c:	movcc	r5, r0
   12770:	mov	r1, r4
   12774:	mov	r0, r6
   12778:	mov	r2, #0
   1277c:	bl	13f78 <__assert_fail@plt+0x3494>
   12780:	mov	r4, r0
   12784:	b	12744 <__assert_fail@plt+0x1c60>
   12788:	mov	r0, r5
   1278c:	pop	{r4, r5, r6, pc}
   12790:	mvn	r0, #0
   12794:	pop	{r4, r5, r6, pc}
   12798:	push	{r0, r1, r4, r5, r6, lr}
   1279c:	mov	r5, r1
   127a0:	ldr	r1, [pc, #60]	; 127e4 <__assert_fail@plt+0x1d00>
   127a4:	mov	r6, r0
   127a8:	mov	r4, r2
   127ac:	add	r1, pc, r1
   127b0:	bl	128d4 <__assert_fail@plt+0x1df0>
   127b4:	mov	ip, #0
   127b8:	subs	r1, r0, #0
   127bc:	blt	127d8 <__assert_fail@plt+0x1cf4>
   127c0:	str	ip, [sp]
   127c4:	mov	r0, r6
   127c8:	mov	r2, r5
   127cc:	mov	r3, r4
   127d0:	bl	12604 <__assert_fail@plt+0x1b20>
   127d4:	b	127dc <__assert_fail@plt+0x1cf8>
   127d8:	mov	r0, ip
   127dc:	add	sp, sp, #8
   127e0:	pop	{r4, r5, r6, pc}
   127e4:	andeq	r2, r0, r4, asr #2
   127e8:	push	{r4, r5, r6, r7, r8, lr}
   127ec:	mov	r8, r0
   127f0:	mov	r4, r1
   127f4:	mov	r5, r2
   127f8:	bl	13d14 <__assert_fail@plt+0x3230>
   127fc:	cmp	r0, #0
   12800:	popne	{r4, r5, r6, r7, r8, pc}
   12804:	ldrb	r3, [r4]
   12808:	add	r5, r4, r5
   1280c:	cmp	r3, #47	; 0x2f
   12810:	beq	1285c <__assert_fail@plt+0x1d78>
   12814:	mov	r1, #47	; 0x2f
   12818:	rsb	r2, r4, r5
   1281c:	mov	r0, r4
   12820:	bl	10a84 <memchr@plt>
   12824:	mov	r1, r4
   12828:	cmp	r0, #0
   1282c:	movne	r7, r0
   12830:	moveq	r7, r5
   12834:	mov	r0, r8
   12838:	rsb	r2, r4, r7
   1283c:	bl	12798 <__assert_fail@plt+0x1cb4>
   12840:	subs	r1, r0, #0
   12844:	beq	128c4 <__assert_fail@plt+0x1de0>
   12848:	mov	r0, r8
   1284c:	mov	r4, r7
   12850:	bl	128d4 <__assert_fail@plt+0x1df0>
   12854:	mov	r6, r0
   12858:	b	12860 <__assert_fail@plt+0x1d7c>
   1285c:	mov	r6, r0
   12860:	cmp	r4, r5
   12864:	bcs	128cc <__assert_fail@plt+0x1de8>
   12868:	mov	r7, r4
   1286c:	add	r4, r4, #1
   12870:	ldrb	r3, [r7]
   12874:	cmp	r3, #47	; 0x2f
   12878:	bne	12888 <__assert_fail@plt+0x1da4>
   1287c:	cmp	r4, r5
   12880:	bne	12868 <__assert_fail@plt+0x1d84>
   12884:	b	128cc <__assert_fail@plt+0x1de8>
   12888:	mov	r1, #47	; 0x2f
   1288c:	rsb	r2, r7, r5
   12890:	mov	r0, r7
   12894:	bl	10a84 <memchr@plt>
   12898:	mov	r1, r6
   1289c:	mov	r2, r7
   128a0:	cmp	r0, #0
   128a4:	movne	r4, r0
   128a8:	moveq	r4, r5
   128ac:	mov	r0, r8
   128b0:	rsb	r3, r7, r4
   128b4:	bl	12310 <__assert_fail@plt+0x182c>
   128b8:	subs	r6, r0, #0
   128bc:	bge	12860 <__assert_fail@plt+0x1d7c>
   128c0:	b	128cc <__assert_fail@plt+0x1de8>
   128c4:	mvn	r0, #4
   128c8:	pop	{r4, r5, r6, r7, r8, pc}
   128cc:	mov	r0, r6
   128d0:	pop	{r4, r5, r6, r7, r8, pc}
   128d4:	push	{r3, r4, r5, lr}
   128d8:	mov	r5, r0
   128dc:	mov	r0, r1
   128e0:	mov	r4, r1
   128e4:	bl	10a18 <strlen@plt>
   128e8:	mov	r1, r4
   128ec:	mov	r2, r0
   128f0:	mov	r0, r5
   128f4:	pop	{r3, r4, r5, lr}
   128f8:	b	127e8 <__assert_fail@plt+0x1d04>
   128fc:	push	{r3, r4, r5, lr}
   12900:	mov	r5, r0
   12904:	mov	r0, r1
   12908:	mov	r4, r1
   1290c:	bl	10a18 <strlen@plt>
   12910:	mov	r1, r4
   12914:	mov	r2, r0
   12918:	mov	r0, r5
   1291c:	pop	{r3, r4, r5, lr}
   12920:	b	12798 <__assert_fail@plt+0x1cb4>
   12924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12928:	sub	sp, sp, #20
   1292c:	mov	r7, r0
   12930:	mov	r8, r1
   12934:	mov	r6, r2
   12938:	mov	r9, r3
   1293c:	bl	13d14 <__assert_fail@plt+0x3230>
   12940:	cmp	r0, #0
   12944:	bne	12a68 <__assert_fail@plt+0x1f84>
   12948:	cmp	r9, #1
   1294c:	bgt	12958 <__assert_fail@plt+0x1e74>
   12950:	mvn	r0, #2
   12954:	b	12a68 <__assert_fail@plt+0x1f84>
   12958:	add	fp, sp, #8
   1295c:	mov	r4, r0
   12960:	mov	r5, r0
   12964:	mov	sl, r0
   12968:	add	r3, sp, #12
   1296c:	str	r0, [sp, #8]
   12970:	str	r3, [sp, #4]
   12974:	cmp	r4, r8
   12978:	movgt	r2, #0
   1297c:	movle	r2, #1
   12980:	cmp	r4, #0
   12984:	movlt	r2, #0
   12988:	cmp	r2, #0
   1298c:	beq	12a4c <__assert_fail@plt+0x1f68>
   12990:	ldr	r1, [sp, #8]
   12994:	cmp	sl, r1
   12998:	ble	129bc <__assert_fail@plt+0x1ed8>
   1299c:	sub	r5, r5, #1
   129a0:	add	r2, r6, r5
   129a4:	rsb	r5, r6, r2
   129a8:	ldrb	r0, [r2, #-1]!
   129ac:	cmp	r0, #47	; 0x2f
   129b0:	bne	129a4 <__assert_fail@plt+0x1ec0>
   129b4:	sub	sl, sl, #1
   129b8:	b	12994 <__assert_fail@plt+0x1eb0>
   129bc:	blt	12a0c <__assert_fail@plt+0x1f28>
   129c0:	mov	r1, r4
   129c4:	add	r2, sp, #12
   129c8:	mov	r0, r7
   129cc:	bl	12410 <__assert_fail@plt+0x192c>
   129d0:	ldr	r2, [sp, #12]
   129d4:	subs	r1, r0, #0
   129d8:	moveq	r0, r2
   129dc:	beq	12a68 <__assert_fail@plt+0x1f84>
   129e0:	add	ip, r5, r2
   129e4:	cmp	ip, r9
   129e8:	bge	12a0c <__assert_fail@plt+0x1f28>
   129ec:	add	r0, r6, r5
   129f0:	str	ip, [sp]
   129f4:	bl	10994 <memcpy@plt>
   129f8:	ldr	ip, [sp]
   129fc:	add	sl, sl, #1
   12a00:	mov	r3, #47	; 0x2f
   12a04:	add	r5, ip, #1
   12a08:	strb	r3, [r6, ip]
   12a0c:	cmp	r4, r8
   12a10:	bne	12a34 <__assert_fail@plt+0x1f50>
   12a14:	ldr	r2, [sp, #8]
   12a18:	cmp	r2, sl
   12a1c:	bge	12950 <__assert_fail@plt+0x1e6c>
   12a20:	cmp	r5, #1
   12a24:	mov	r0, #0
   12a28:	subgt	r5, r5, #1
   12a2c:	strb	r0, [r6, r5]
   12a30:	b	12a68 <__assert_fail@plt+0x1f84>
   12a34:	mov	r1, r4
   12a38:	mov	r0, r7
   12a3c:	mov	r2, fp
   12a40:	bl	13f78 <__assert_fail@plt+0x3494>
   12a44:	mov	r4, r0
   12a48:	b	12974 <__assert_fail@plt+0x1e90>
   12a4c:	cmn	r4, #1
   12a50:	bge	12a64 <__assert_fail@plt+0x1f80>
   12a54:	cmn	r4, #4
   12a58:	movne	r0, r4
   12a5c:	mvneq	r0, #10
   12a60:	b	12a68 <__assert_fail@plt+0x1f84>
   12a64:	mvn	r0, #3
   12a68:	add	sp, sp, #20
   12a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a70:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12a74:	mov	r9, r0
   12a78:	mov	r7, r1
   12a7c:	mov	r4, r2
   12a80:	mov	r8, r3
   12a84:	bl	13d14 <__assert_fail@plt+0x3230>
   12a88:	cmp	r0, #0
   12a8c:	bne	12b20 <__assert_fail@plt+0x203c>
   12a90:	cmp	r4, #0
   12a94:	blt	12b1c <__assert_fail@plt+0x2038>
   12a98:	add	r6, sp, #8
   12a9c:	mvn	r5, #12
   12aa0:	str	r0, [r6, #-4]!
   12aa4:	cmp	r0, r7
   12aa8:	mov	r1, r0
   12aac:	movgt	r3, #0
   12ab0:	movle	r3, #1
   12ab4:	cmp	r0, #0
   12ab8:	movlt	r3, #0
   12abc:	cmp	r3, #0
   12ac0:	beq	12b00 <__assert_fail@plt+0x201c>
   12ac4:	ldr	r3, [sp, #4]
   12ac8:	cmp	r3, r4
   12acc:	moveq	r5, r1
   12ad0:	cmp	r1, r7
   12ad4:	bne	12af0 <__assert_fail@plt+0x200c>
   12ad8:	cmp	r8, #0
   12adc:	strne	r3, [r8]
   12ae0:	cmp	r4, r3
   12ae4:	movle	r0, r5
   12ae8:	mvngt	r0, #0
   12aec:	b	12b20 <__assert_fail@plt+0x203c>
   12af0:	mov	r0, r9
   12af4:	mov	r2, r6
   12af8:	bl	13f78 <__assert_fail@plt+0x3494>
   12afc:	b	12aa4 <__assert_fail@plt+0x1fc0>
   12b00:	cmn	r0, #1
   12b04:	bge	12b14 <__assert_fail@plt+0x2030>
   12b08:	cmn	r0, #4
   12b0c:	mvneq	r0, #10
   12b10:	b	12b20 <__assert_fail@plt+0x203c>
   12b14:	mvn	r0, #3
   12b18:	b	12b20 <__assert_fail@plt+0x203c>
   12b1c:	mvn	r0, #0
   12b20:	add	sp, sp, #12
   12b24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12b28:	push	{r0, r1, r2, lr}
   12b2c:	mov	r2, #0
   12b30:	add	r3, sp, #4
   12b34:	bl	12a70 <__assert_fail@plt+0x1f8c>
   12b38:	cmp	r0, #0
   12b3c:	ldreq	r0, [sp, #4]
   12b40:	beq	12b48 <__assert_fail@plt+0x2064>
   12b44:	mvnge	r0, #12
   12b48:	add	sp, sp, #12
   12b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b50:	push	{r4, r5, r6, lr}
   12b54:	mov	r5, r0
   12b58:	mov	r4, r1
   12b5c:	bl	12b28 <__assert_fail@plt+0x2044>
   12b60:	subs	r2, r0, #0
   12b64:	poplt	{r4, r5, r6, pc}
   12b68:	mov	r0, r5
   12b6c:	mov	r1, r4
   12b70:	sub	r2, r2, #1
   12b74:	mov	r3, #0
   12b78:	pop	{r4, r5, r6, lr}
   12b7c:	b	12a70 <__assert_fail@plt+0x1f8c>
   12b80:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12b84:	mov	r7, r2
   12b88:	mov	r5, r0
   12b8c:	mov	r9, r1
   12b90:	mov	r8, r3
   12b94:	ldr	r6, [sp, #40]	; 0x28
   12b98:	bl	13d14 <__assert_fail@plt+0x3230>
   12b9c:	subs	r2, r0, #0
   12ba0:	movne	r0, r2
   12ba4:	bne	12c1c <__assert_fail@plt+0x2138>
   12ba8:	mov	r1, r9
   12bac:	mov	r0, r5
   12bb0:	bl	13f78 <__assert_fail@plt+0x3494>
   12bb4:	add	r9, sp, #4
   12bb8:	mov	r4, r0
   12bbc:	cmp	r4, #0
   12bc0:	blt	12c18 <__assert_fail@plt+0x2134>
   12bc4:	mov	r0, r5
   12bc8:	mov	r1, r4
   12bcc:	mov	r2, r7
   12bd0:	mov	r3, r9
   12bd4:	bl	12670 <__assert_fail@plt+0x1b8c>
   12bd8:	cmp	r0, #0
   12bdc:	beq	12c00 <__assert_fail@plt+0x211c>
   12be0:	ldr	r3, [sp, #4]
   12be4:	cmp	r3, r6
   12be8:	bne	12c00 <__assert_fail@plt+0x211c>
   12bec:	mov	r1, r8
   12bf0:	mov	r2, r6
   12bf4:	bl	109a0 <memcmp@plt>
   12bf8:	cmp	r0, #0
   12bfc:	beq	12c18 <__assert_fail@plt+0x2134>
   12c00:	mov	r1, r4
   12c04:	mov	r0, r5
   12c08:	mov	r2, #0
   12c0c:	bl	13f78 <__assert_fail@plt+0x3494>
   12c10:	mov	r4, r0
   12c14:	b	12bbc <__assert_fail@plt+0x20d8>
   12c18:	mov	r0, r4
   12c1c:	add	sp, sp, #12
   12c20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12c24:	sub	r3, r1, #1
   12c28:	cmn	r3, #3
   12c2c:	push	{r4, r5, r6, lr}
   12c30:	mov	r5, r0
   12c34:	mov	r6, r1
   12c38:	bhi	12c84 <__assert_fail@plt+0x21a0>
   12c3c:	bl	13d14 <__assert_fail@plt+0x3230>
   12c40:	subs	r2, r0, #0
   12c44:	moveq	r0, r5
   12c48:	mvneq	r1, #0
   12c4c:	bne	12c8c <__assert_fail@plt+0x21a8>
   12c50:	bl	13f78 <__assert_fail@plt+0x3494>
   12c54:	cmp	r0, #0
   12c58:	mov	r4, r0
   12c5c:	blt	12c94 <__assert_fail@plt+0x21b0>
   12c60:	mov	r0, r5
   12c64:	mov	r1, r4
   12c68:	bl	126ac <__assert_fail@plt+0x1bc8>
   12c6c:	cmp	r0, r6
   12c70:	beq	12c94 <__assert_fail@plt+0x21b0>
   12c74:	mov	r0, r5
   12c78:	mov	r1, r4
   12c7c:	mov	r2, #0
   12c80:	b	12c50 <__assert_fail@plt+0x216c>
   12c84:	mvn	r0, #5
   12c88:	pop	{r4, r5, r6, pc}
   12c8c:	mov	r0, r2
   12c90:	pop	{r4, r5, r6, pc}
   12c94:	mov	r0, r4
   12c98:	pop	{r4, r5, r6, pc}
   12c9c:	push	{r4, r5, r6, r7, r8, lr}
   12ca0:	mov	r5, r0
   12ca4:	mov	r0, r2
   12ca8:	mov	r4, r1
   12cac:	mov	r7, r2
   12cb0:	bl	10a18 <strlen@plt>
   12cb4:	add	r8, r0, #1
   12cb8:	mov	r6, r0
   12cbc:	cmp	r4, r6
   12cc0:	blt	12d08 <__assert_fail@plt+0x2224>
   12cc4:	mov	r0, r7
   12cc8:	mov	r1, r5
   12ccc:	mov	r2, r8
   12cd0:	bl	109a0 <memcmp@plt>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12d10 <__assert_fail@plt+0x222c>
   12cdc:	mov	r0, r5
   12ce0:	mov	r1, #0
   12ce4:	mov	r2, r4
   12ce8:	bl	10a84 <memchr@plt>
   12cec:	cmp	r0, #0
   12cf0:	popeq	{r4, r5, r6, r7, r8, pc}
   12cf4:	rsb	r5, r5, r0
   12cf8:	mvn	r5, r5
   12cfc:	add	r4, r4, r5
   12d00:	add	r5, r0, #1
   12d04:	b	12cbc <__assert_fail@plt+0x21d8>
   12d08:	mov	r0, #0
   12d0c:	pop	{r4, r5, r6, r7, r8, pc}
   12d10:	mov	r0, #1
   12d14:	pop	{r4, r5, r6, r7, r8, pc}
   12d18:	push	{r0, r1, r4, r5, r6, lr}
   12d1c:	add	r3, sp, #4
   12d20:	bl	12670 <__assert_fail@plt+0x1b8c>
   12d24:	subs	r4, r0, #0
   12d28:	ldr	r0, [sp, #4]
   12d2c:	beq	12d74 <__assert_fail@plt+0x2290>
   12d30:	add	r6, r4, r0
   12d34:	mov	r5, #0
   12d38:	cmp	r4, r6
   12d3c:	bcs	12d68 <__assert_fail@plt+0x2284>
   12d40:	mov	r0, r4
   12d44:	rsb	r1, r4, r6
   12d48:	bl	10a90 <strnlen@plt>
   12d4c:	add	r0, r0, #1
   12d50:	str	r0, [sp, #4]
   12d54:	add	r4, r4, r0
   12d58:	cmp	r4, r6
   12d5c:	bhi	12d70 <__assert_fail@plt+0x228c>
   12d60:	add	r5, r5, #1
   12d64:	b	12d38 <__assert_fail@plt+0x2254>
   12d68:	mov	r0, r5
   12d6c:	b	12d74 <__assert_fail@plt+0x2290>
   12d70:	mvn	r0, #14
   12d74:	add	sp, sp, #8
   12d78:	pop	{r4, r5, r6, pc}
   12d7c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12d80:	mov	r8, r3
   12d84:	add	r3, sp, #4
   12d88:	bl	12670 <__assert_fail@plt+0x1b8c>
   12d8c:	ldr	r6, [sp, #4]
   12d90:	subs	r4, r0, #0
   12d94:	moveq	r0, r6
   12d98:	beq	12e18 <__assert_fail@plt+0x2334>
   12d9c:	mov	r0, r8
   12da0:	add	r6, r4, r6
   12da4:	bl	10a18 <strlen@plt>
   12da8:	mov	r5, #0
   12dac:	add	r7, r0, #1
   12db0:	cmp	r4, r6
   12db4:	bcs	12e04 <__assert_fail@plt+0x2320>
   12db8:	mov	r0, r4
   12dbc:	rsb	r1, r4, r6
   12dc0:	bl	10a90 <strnlen@plt>
   12dc4:	add	r0, r0, #1
   12dc8:	str	r0, [sp, #4]
   12dcc:	add	r9, r4, r0
   12dd0:	cmp	r9, r6
   12dd4:	bhi	12e0c <__assert_fail@plt+0x2328>
   12dd8:	cmp	r0, r7
   12ddc:	bne	12df8 <__assert_fail@plt+0x2314>
   12de0:	mov	r0, r4
   12de4:	mov	r1, r8
   12de8:	mov	r2, r7
   12dec:	bl	109a0 <memcmp@plt>
   12df0:	cmp	r0, #0
   12df4:	beq	12e14 <__assert_fail@plt+0x2330>
   12df8:	add	r5, r5, #1
   12dfc:	mov	r4, r9
   12e00:	b	12db0 <__assert_fail@plt+0x22cc>
   12e04:	mvn	r0, #0
   12e08:	b	12e18 <__assert_fail@plt+0x2334>
   12e0c:	mvn	r0, #14
   12e10:	b	12e18 <__assert_fail@plt+0x2334>
   12e14:	mov	r0, r5
   12e18:	add	sp, sp, #12
   12e1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12e20:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12e24:	mov	r6, r3
   12e28:	add	r3, sp, #4
   12e2c:	ldr	r5, [sp, #32]
   12e30:	bl	12670 <__assert_fail@plt+0x1b8c>
   12e34:	subs	r4, r0, #0
   12e38:	ldrne	r7, [sp, #4]
   12e3c:	addne	r7, r4, r7
   12e40:	bne	12e84 <__assert_fail@plt+0x23a0>
   12e44:	cmp	r5, #0
   12e48:	ldrne	r3, [sp, #4]
   12e4c:	bne	12eb8 <__assert_fail@plt+0x23d4>
   12e50:	b	12ebc <__assert_fail@plt+0x23d8>
   12e54:	mov	r0, r4
   12e58:	rsb	r1, r4, r7
   12e5c:	bl	10a90 <strnlen@plt>
   12e60:	add	r3, r0, #1
   12e64:	str	r3, [sp, #4]
   12e68:	add	r3, r4, r3
   12e6c:	cmp	r3, r7
   12e70:	bhi	12e90 <__assert_fail@plt+0x23ac>
   12e74:	cmp	r6, #0
   12e78:	beq	12ea0 <__assert_fail@plt+0x23bc>
   12e7c:	sub	r6, r6, #1
   12e80:	mov	r4, r3
   12e84:	cmp	r4, r7
   12e88:	bcc	12e54 <__assert_fail@plt+0x2370>
   12e8c:	b	12eac <__assert_fail@plt+0x23c8>
   12e90:	cmp	r5, #0
   12e94:	mvnne	r3, #14
   12e98:	bne	12eb8 <__assert_fail@plt+0x23d4>
   12e9c:	b	12ebc <__assert_fail@plt+0x23d8>
   12ea0:	cmp	r5, #0
   12ea4:	strne	r0, [r5]
   12ea8:	b	12ec4 <__assert_fail@plt+0x23e0>
   12eac:	cmp	r5, #0
   12eb0:	beq	12ebc <__assert_fail@plt+0x23d8>
   12eb4:	mvn	r3, #0
   12eb8:	str	r3, [r5]
   12ebc:	mov	r0, #0
   12ec0:	b	12ec8 <__assert_fail@plt+0x23e4>
   12ec4:	mov	r0, r4
   12ec8:	add	sp, sp, #12
   12ecc:	pop	{r4, r5, r6, r7, pc}
   12ed0:	push	{r0, r1, r4, lr}
   12ed4:	mov	r4, r2
   12ed8:	ldr	r2, [pc, #48]	; 12f10 <__assert_fail@plt+0x242c>
   12edc:	add	r3, sp, #4
   12ee0:	add	r2, pc, r2
   12ee4:	bl	12670 <__assert_fail@plt+0x1b8c>
   12ee8:	cmp	r0, #0
   12eec:	ldreq	r0, [sp, #4]
   12ef0:	beq	12f08 <__assert_fail@plt+0x2424>
   12ef4:	ldr	r1, [sp, #4]
   12ef8:	mov	r2, r4
   12efc:	bl	12c9c <__assert_fail@plt+0x21b8>
   12f00:	rsbs	r0, r0, #1
   12f04:	movcc	r0, #0
   12f08:	add	sp, sp, #8
   12f0c:	pop	{r4, pc}
   12f10:	andeq	r1, r0, r9, lsl sl
   12f14:	push	{r3, r4, r5, r6, r7, lr}
   12f18:	mov	r5, r0
   12f1c:	mov	r7, r1
   12f20:	mov	r6, r2
   12f24:	bl	13d14 <__assert_fail@plt+0x3230>
   12f28:	subs	r2, r0, #0
   12f2c:	moveq	r0, r5
   12f30:	moveq	r1, r7
   12f34:	bne	12f78 <__assert_fail@plt+0x2494>
   12f38:	bl	13f78 <__assert_fail@plt+0x3494>
   12f3c:	cmp	r0, #0
   12f40:	mov	r4, r0
   12f44:	blt	12f80 <__assert_fail@plt+0x249c>
   12f48:	mov	r0, r5
   12f4c:	mov	r1, r4
   12f50:	mov	r2, r6
   12f54:	bl	12ed0 <__assert_fail@plt+0x23ec>
   12f58:	cmn	r0, #1
   12f5c:	poplt	{r3, r4, r5, r6, r7, pc}
   12f60:	cmp	r0, #0
   12f64:	beq	12f80 <__assert_fail@plt+0x249c>
   12f68:	mov	r0, r5
   12f6c:	mov	r1, r4
   12f70:	mov	r2, #0
   12f74:	b	12f38 <__assert_fail@plt+0x2454>
   12f78:	mov	r0, r2
   12f7c:	pop	{r3, r4, r5, r6, r7, pc}
   12f80:	mov	r0, r4
   12f84:	pop	{r3, r4, r5, r6, r7, pc}
   12f88:	ubfx	r3, r0, #8, #8
   12f8c:	sub	sp, sp, #8
   12f90:	lsl	r3, r3, #16
   12f94:	orr	r3, r3, r0, lsl #24
   12f98:	orr	r3, r3, r0, lsr #24
   12f9c:	ubfx	r0, r0, #16, #8
   12fa0:	orr	r0, r3, r0, lsl #8
   12fa4:	add	sp, sp, #8
   12fa8:	bx	lr
   12fac:	ubfx	r3, r0, #8, #8
   12fb0:	sub	sp, sp, #8
   12fb4:	lsl	r3, r3, #16
   12fb8:	orr	r3, r3, r0, lsl #24
   12fbc:	orr	r3, r3, r0, lsr #24
   12fc0:	ubfx	r0, r0, #16, #8
   12fc4:	orr	r0, r3, r0, lsl #8
   12fc8:	add	sp, sp, #8
   12fcc:	bx	lr
   12fd0:	push	{r4, r5, r6, r7, r8, lr}
   12fd4:	mov	r4, r0
   12fd8:	ldr	r0, [r0, #16]
   12fdc:	mov	r8, r1
   12fe0:	mov	r7, r2
   12fe4:	bl	12f88 <__assert_fail@plt+0x24a4>
   12fe8:	cmp	r0, #39	; 0x27
   12fec:	mov	r5, r0
   12ff0:	bls	1304c <__assert_fail@plt+0x2568>
   12ff4:	ldr	r0, [r4, #8]
   12ff8:	add	r5, r5, r8
   12ffc:	bl	12f88 <__assert_fail@plt+0x24a4>
   13000:	cmp	r0, r5
   13004:	mov	r6, r0
   13008:	bcc	1304c <__assert_fail@plt+0x2568>
   1300c:	ldr	r0, [r4, #12]
   13010:	add	r6, r6, r7
   13014:	bl	12f88 <__assert_fail@plt+0x24a4>
   13018:	cmp	r0, r6
   1301c:	mov	r5, r0
   13020:	bcc	1304c <__assert_fail@plt+0x2568>
   13024:	ldr	r0, [r4, #4]
   13028:	bl	12f88 <__assert_fail@plt+0x24a4>
   1302c:	mov	r6, r0
   13030:	ldr	r0, [r4, #32]
   13034:	bl	12f88 <__assert_fail@plt+0x24a4>
   13038:	add	r0, r0, r5
   1303c:	cmp	r6, r0
   13040:	movcs	r0, #0
   13044:	movcc	r0, #1
   13048:	pop	{r4, r5, r6, r7, r8, pc}
   1304c:	mov	r0, #1
   13050:	pop	{r4, r5, r6, r7, r8, pc}
   13054:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13058:	mov	r4, r0
   1305c:	ldr	r0, [r0, #12]
   13060:	mov	r5, r2
   13064:	mov	r6, r1
   13068:	mov	r8, r3
   1306c:	bl	12f88 <__assert_fail@plt+0x24a4>
   13070:	mov	r7, r0
   13074:	ldr	r0, [r4, #32]
   13078:	bl	12f88 <__assert_fail@plt+0x24a4>
   1307c:	cmp	r5, #0
   13080:	add	r0, r0, r7
   13084:	add	r7, r4, r0
   13088:	blt	130e0 <__assert_fail@plt+0x25fc>
   1308c:	add	r9, r6, r5
   13090:	cmp	r9, r7
   13094:	bhi	130e0 <__assert_fail@plt+0x25fc>
   13098:	cmp	r6, r4
   1309c:	bcc	130e0 <__assert_fail@plt+0x25fc>
   130a0:	rsb	sl, r5, r8
   130a4:	add	sl, r7, sl
   130a8:	cmp	sl, r4
   130ac:	bcc	130e0 <__assert_fail@plt+0x25fc>
   130b0:	ldr	r0, [r4, #4]
   130b4:	bl	12f88 <__assert_fail@plt+0x24a4>
   130b8:	add	r0, r4, r0
   130bc:	cmp	sl, r0
   130c0:	bhi	130e8 <__assert_fail@plt+0x2604>
   130c4:	rsb	r2, r6, r7
   130c8:	add	r0, r6, r8
   130cc:	mov	r1, r9
   130d0:	rsb	r2, r5, r2
   130d4:	bl	1097c <memmove@plt>
   130d8:	mov	r0, #0
   130dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130e0:	mvn	r0, #3
   130e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130e8:	mvn	r0, #2
   130ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130f0:	push	{r3, r4, r5, r6, r7, lr}
   130f4:	mov	r4, r0
   130f8:	mov	r5, r2
   130fc:	mov	r6, r3
   13100:	bl	13054 <__assert_fail@plt+0x2570>
   13104:	subs	r7, r0, #0
   13108:	bne	13138 <__assert_fail@plt+0x2654>
   1310c:	ldr	r0, [r4, #36]	; 0x24
   13110:	rsb	r5, r5, r6
   13114:	bl	12f88 <__assert_fail@plt+0x24a4>
   13118:	add	r0, r0, r5
   1311c:	bl	12fac <__assert_fail@plt+0x24c8>
   13120:	str	r0, [r4, #36]	; 0x24
   13124:	ldr	r0, [r4, #12]
   13128:	bl	12f88 <__assert_fail@plt+0x24a4>
   1312c:	add	r0, r0, r5
   13130:	bl	12fac <__assert_fail@plt+0x24c8>
   13134:	str	r0, [r4, #12]
   13138:	mov	r0, r7
   1313c:	pop	{r3, r4, r5, r6, r7, pc}
   13140:	push	{r3, r4, r5, r6, r7, lr}
   13144:	mov	r5, r2
   13148:	mov	r6, r3
   1314c:	lsl	r2, r2, #4
   13150:	lsl	r3, r3, #4
   13154:	mov	r4, r0
   13158:	bl	13054 <__assert_fail@plt+0x2570>
   1315c:	subs	r7, r0, #0
   13160:	bne	13194 <__assert_fail@plt+0x26b0>
   13164:	ldr	r0, [r4, #8]
   13168:	rsb	r5, r5, r6
   1316c:	bl	12f88 <__assert_fail@plt+0x24a4>
   13170:	lsl	r5, r5, #4
   13174:	add	r0, r0, r5
   13178:	bl	12fac <__assert_fail@plt+0x24c8>
   1317c:	str	r0, [r4, #8]
   13180:	ldr	r0, [r4, #12]
   13184:	bl	12f88 <__assert_fail@plt+0x24a4>
   13188:	add	r0, r0, r5
   1318c:	bl	12fac <__assert_fail@plt+0x24c8>
   13190:	str	r0, [r4, #12]
   13194:	mov	r0, r7
   13198:	pop	{r3, r4, r5, r6, r7, pc}
   1319c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131a0:	mov	r4, r0
   131a4:	mov	r8, r2
   131a8:	mov	sl, r3
   131ac:	bl	13f00 <__assert_fail@plt+0x341c>
   131b0:	subs	r9, r0, #0
   131b4:	movlt	r5, r9
   131b8:	blt	132d0 <__assert_fail@plt+0x27ec>
   131bc:	ldr	r0, [r4, #12]
   131c0:	bl	12f88 <__assert_fail@plt+0x24a4>
   131c4:	add	r6, r4, r0
   131c8:	mov	r0, r8
   131cc:	bl	10a18 <strlen@plt>
   131d0:	mov	r7, r0
   131d4:	ldr	r0, [r4, #32]
   131d8:	bl	12f88 <__assert_fail@plt+0x24a4>
   131dc:	mov	r2, r8
   131e0:	mov	r1, r0
   131e4:	mov	r0, r6
   131e8:	bl	140d8 <__assert_fail@plt+0x35f4>
   131ec:	subs	fp, r0, #0
   131f0:	rsbne	r5, r6, fp
   131f4:	bne	13260 <__assert_fail@plt+0x277c>
   131f8:	ldr	r0, [r4, #32]
   131fc:	add	r7, r7, #1
   13200:	bl	12f88 <__assert_fail@plt+0x24a4>
   13204:	mov	r5, r0
   13208:	ldr	r0, [r4, #12]
   1320c:	bl	12f88 <__assert_fail@plt+0x24a4>
   13210:	mov	r2, fp
   13214:	mov	r3, r7
   13218:	add	r1, r0, r5
   1321c:	mov	r0, r4
   13220:	add	r1, r4, r1
   13224:	bl	13054 <__assert_fail@plt+0x2570>
   13228:	cmp	r0, #0
   1322c:	movne	r5, r0
   13230:	bne	13260 <__assert_fail@plt+0x277c>
   13234:	ldr	r0, [r4, #32]
   13238:	add	r5, r6, r5
   1323c:	bl	12f88 <__assert_fail@plt+0x24a4>
   13240:	add	r0, r0, r7
   13244:	bl	12fac <__assert_fail@plt+0x24c8>
   13248:	mov	r1, r8
   1324c:	mov	r2, r7
   13250:	str	r0, [r4, #32]
   13254:	mov	r0, r5
   13258:	bl	10994 <memcpy@plt>
   1325c:	rsb	r5, r6, r5
   13260:	cmp	r5, #0
   13264:	blt	132d0 <__assert_fail@plt+0x27ec>
   13268:	ldr	r0, [r4, #8]
   1326c:	bl	12f88 <__assert_fail@plt+0x24a4>
   13270:	ldr	r3, [sp, #40]	; 0x28
   13274:	mov	r2, #0
   13278:	add	r0, r0, r9
   1327c:	add	r1, r4, r0
   13280:	str	r1, [r3]
   13284:	add	r3, sl, #3
   13288:	mov	r0, r4
   1328c:	bic	r3, r3, #3
   13290:	add	r3, r3, #12
   13294:	bl	130f0 <__assert_fail@plt+0x260c>
   13298:	subs	r6, r0, #0
   1329c:	bne	132cc <__assert_fail@plt+0x27e8>
   132a0:	ldr	r3, [sp, #40]	; 0x28
   132a4:	mov	r0, #3
   132a8:	ldr	r4, [r3]
   132ac:	bl	12fac <__assert_fail@plt+0x24c8>
   132b0:	str	r0, [r4]
   132b4:	mov	r0, r5
   132b8:	bl	12fac <__assert_fail@plt+0x24c8>
   132bc:	str	r0, [r4, #8]
   132c0:	mov	r0, sl
   132c4:	bl	12fac <__assert_fail@plt+0x24c8>
   132c8:	str	r0, [r4, #4]
   132cc:	mov	r5, r6
   132d0:	mov	r0, r5
   132d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d8:	push	{r4, r5, r6, lr}
   132dc:	mov	r4, r0
   132e0:	bl	13d14 <__assert_fail@plt+0x3230>
   132e4:	cmp	r0, #0
   132e8:	movne	r5, r0
   132ec:	bne	13348 <__assert_fail@plt+0x2864>
   132f0:	ldr	r0, [r4, #20]
   132f4:	bl	12f88 <__assert_fail@plt+0x24a4>
   132f8:	cmp	r0, #16
   132fc:	mov	r6, r0
   13300:	bls	1333c <__assert_fail@plt+0x2858>
   13304:	ldr	r0, [r4, #36]	; 0x24
   13308:	bl	12f88 <__assert_fail@plt+0x24a4>
   1330c:	mov	r1, #16
   13310:	mov	r2, r0
   13314:	mov	r0, r4
   13318:	bl	12fd0 <__assert_fail@plt+0x24ec>
   1331c:	subs	r5, r0, #0
   13320:	bne	13344 <__assert_fail@plt+0x2860>
   13324:	cmp	r6, #17
   13328:	beq	13348 <__assert_fail@plt+0x2864>
   1332c:	mov	r0, #17
   13330:	bl	12fac <__assert_fail@plt+0x24c8>
   13334:	str	r0, [r4, #20]
   13338:	b	13348 <__assert_fail@plt+0x2864>
   1333c:	mvn	r5, #9
   13340:	b	13348 <__assert_fail@plt+0x2864>
   13344:	mvn	r5, #11
   13348:	mov	r0, r5
   1334c:	pop	{r4, r5, r6, pc}
   13350:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13354:	mov	r5, r0
   13358:	add	r7, r2, #40	; 0x28
   1335c:	ldr	r0, [r0, #16]
   13360:	mov	r6, r3
   13364:	add	r8, r7, r3
   13368:	mov	r4, r1
   1336c:	mov	r9, r2
   13370:	bl	12f88 <__assert_fail@plt+0x24a4>
   13374:	mov	r2, r9
   13378:	add	r9, r4, r7
   1337c:	add	r1, r5, r0
   13380:	add	r0, r4, #40	; 0x28
   13384:	bl	1097c <memmove@plt>
   13388:	mov	r0, #40	; 0x28
   1338c:	bl	12fac <__assert_fail@plt+0x24c8>
   13390:	str	r0, [r4, #16]
   13394:	ldr	r0, [r5, #8]
   13398:	bl	12f88 <__assert_fail@plt+0x24a4>
   1339c:	mov	r2, r6
   133a0:	add	r1, r5, r0
   133a4:	mov	r0, r9
   133a8:	bl	1097c <memmove@plt>
   133ac:	mov	r0, r7
   133b0:	bl	12fac <__assert_fail@plt+0x24c8>
   133b4:	add	r7, r4, r8
   133b8:	str	r0, [r4, #8]
   133bc:	mov	r0, r6
   133c0:	bl	12fac <__assert_fail@plt+0x24c8>
   133c4:	str	r0, [r4, #36]	; 0x24
   133c8:	ldr	r0, [r5, #12]
   133cc:	bl	12f88 <__assert_fail@plt+0x24a4>
   133d0:	add	r6, r5, r0
   133d4:	ldr	r0, [r5, #32]
   133d8:	bl	12f88 <__assert_fail@plt+0x24a4>
   133dc:	mov	r1, r6
   133e0:	mov	r2, r0
   133e4:	mov	r0, r7
   133e8:	bl	1097c <memmove@plt>
   133ec:	mov	r0, r8
   133f0:	bl	12fac <__assert_fail@plt+0x24c8>
   133f4:	str	r0, [r4, #12]
   133f8:	ldr	r0, [r5, #32]
   133fc:	bl	12f88 <__assert_fail@plt+0x24a4>
   13400:	bl	12fac <__assert_fail@plt+0x24c8>
   13404:	str	r0, [r4, #32]
   13408:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1340c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13410:	sub	sp, sp, #28
   13414:	mov	r5, r3
   13418:	mov	r6, r0
   1341c:	ldr	r3, [sp, #68]	; 0x44
   13420:	mov	r4, r2
   13424:	ldr	r8, [sp, #64]	; 0x40
   13428:	str	r3, [sp, #4]
   1342c:	bl	132d8 <__assert_fail@plt+0x27f4>
   13430:	subs	r7, r0, #0
   13434:	movne	r0, r7
   13438:	bne	1358c <__assert_fail@plt+0x2aa8>
   1343c:	mov	r0, r6
   13440:	bl	122d8 <__assert_fail@plt+0x17f4>
   13444:	mov	r9, r0
   13448:	ldr	r0, [r6, #16]
   1344c:	bl	12f88 <__assert_fail@plt+0x24a4>
   13450:	lsl	r9, r9, #4
   13454:	mov	r2, r7
   13458:	mov	r3, #1
   1345c:	add	sl, r6, r0
   13460:	mov	r0, r6
   13464:	add	fp, sl, r9
   13468:	mov	r1, fp
   1346c:	bl	13140 <__assert_fail@plt+0x265c>
   13470:	cmp	r0, #0
   13474:	bne	1358c <__assert_fail@plt+0x2aa8>
   13478:	str	r5, [sp, #12]
   1347c:	orr	r6, r0, r0
   13480:	ldrb	r2, [sp, #15]
   13484:	lsl	r3, r4, #8
   13488:	str	r4, [sp, #8]
   1348c:	lsl	r7, r4, #24
   13490:	orr	r4, r6, r2
   13494:	ldrb	r2, [sp, #10]
   13498:	and	r5, r3, #16711680	; 0xff0000
   1349c:	mov	r3, #0
   134a0:	orr	r7, r7, r5
   134a4:	orr	r6, r0, r4
   134a8:	orr	r5, r7, r3
   134ac:	lsl	r7, r2, #8
   134b0:	ldrb	r2, [sp, #12]
   134b4:	orr	r6, r6, r0
   134b8:	orr	r7, r7, r5
   134bc:	ldrb	r5, [sp, #11]
   134c0:	ldr	r3, [sp, #4]
   134c4:	lsl	r4, r2, #24
   134c8:	ldrb	r2, [sp, #13]
   134cc:	orr	r6, r6, r4
   134d0:	orr	r7, r7, r5
   134d4:	mov	r5, #0
   134d8:	orr	r7, r7, r5
   134dc:	lsl	r4, r2, #16
   134e0:	ldrb	r2, [sp, #14]
   134e4:	orr	r6, r6, r4
   134e8:	str	r3, [sp, #20]
   134ec:	mov	r5, #0
   134f0:	orr	r7, r7, r5
   134f4:	lsl	r4, r2, #8
   134f8:	mov	r5, #0
   134fc:	orr	r4, r4, r6
   13500:	ldrb	r6, [sp, #23]
   13504:	orr	r5, r5, r7
   13508:	strd	r4, [sl, r9]
   1350c:	orr	r4, r0, r0
   13510:	str	r8, [sp, #16]
   13514:	orr	r4, r4, r6
   13518:	ldrb	r6, [sp, #18]
   1351c:	lsl	r5, r8, #24
   13520:	lsl	r8, r8, #8
   13524:	and	r3, r8, #16711680	; 0xff0000
   13528:	mov	r7, #0
   1352c:	orr	r5, r5, r3
   13530:	lsl	r3, r6, #8
   13534:	ldrb	r6, [sp, #20]
   13538:	orr	r5, r5, r7
   1353c:	orr	r4, r4, r0
   13540:	orr	r5, r5, r3
   13544:	orr	r4, r4, r0
   13548:	ldrb	r3, [sp, #19]
   1354c:	lsl	r2, r6, #24
   13550:	ldrb	r6, [sp, #21]
   13554:	orr	r4, r4, r2
   13558:	orr	r5, r5, r3
   1355c:	mov	r3, #0
   13560:	orr	r5, r5, r3
   13564:	lsl	r2, r6, #16
   13568:	ldrb	r6, [sp, #22]
   1356c:	mov	r3, #0
   13570:	orr	r4, r4, r2
   13574:	orr	r5, r5, r3
   13578:	mov	r3, #0
   1357c:	lsl	r2, r6, #8
   13580:	orr	r3, r3, r5
   13584:	orr	r2, r2, r4
   13588:	strd	r2, [fp, #8]
   1358c:	add	sp, sp, #28
   13590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13594:	push	{r4, r5, r6, r7, r8, lr}
   13598:	mov	r4, r0
   1359c:	ldr	r0, [r0, #16]
   135a0:	mov	r5, r1
   135a4:	bl	12f88 <__assert_fail@plt+0x24a4>
   135a8:	mov	r7, r0
   135ac:	mov	r0, r4
   135b0:	bl	132d8 <__assert_fail@plt+0x27f4>
   135b4:	subs	r6, r0, #0
   135b8:	bne	135e8 <__assert_fail@plt+0x2b04>
   135bc:	mov	r0, r4
   135c0:	bl	122d8 <__assert_fail@plt+0x17f4>
   135c4:	cmp	r5, r0
   135c8:	bge	135f0 <__assert_fail@plt+0x2b0c>
   135cc:	add	r1, r4, r7
   135d0:	mov	r0, r4
   135d4:	add	r1, r1, r5, lsl #4
   135d8:	mov	r3, r6
   135dc:	mov	r2, #1
   135e0:	pop	{r4, r5, r6, r7, r8, lr}
   135e4:	b	13140 <__assert_fail@plt+0x265c>
   135e8:	mov	r0, r6
   135ec:	pop	{r4, r5, r6, r7, r8, pc}
   135f0:	mvn	r0, #0
   135f4:	pop	{r4, r5, r6, r7, r8, pc}
   135f8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   135fc:	mov	r6, r0
   13600:	mov	r5, r1
   13604:	mov	r4, r2
   13608:	bl	132d8 <__assert_fail@plt+0x27f4>
   1360c:	cmp	r0, #0
   13610:	bne	13678 <__assert_fail@plt+0x2b94>
   13614:	mov	r1, r5
   13618:	mov	r0, r6
   1361c:	add	r2, sp, #4
   13620:	bl	12410 <__assert_fail@plt+0x192c>
   13624:	ldr	r8, [sp, #4]
   13628:	subs	r5, r0, #0
   1362c:	moveq	r0, r8
   13630:	beq	13678 <__assert_fail@plt+0x2b94>
   13634:	mov	r0, r4
   13638:	bl	10a18 <strlen@plt>
   1363c:	add	r2, r8, #4
   13640:	mov	r1, r5
   13644:	bic	r2, r2, #3
   13648:	add	r3, r0, #4
   1364c:	mov	r7, r0
   13650:	bic	r3, r3, #3
   13654:	mov	r0, r6
   13658:	bl	130f0 <__assert_fail@plt+0x260c>
   1365c:	subs	r6, r0, #0
   13660:	bne	13674 <__assert_fail@plt+0x2b90>
   13664:	mov	r0, r5
   13668:	mov	r1, r4
   1366c:	add	r2, r7, #1
   13670:	bl	10994 <memcpy@plt>
   13674:	mov	r0, r6
   13678:	add	sp, sp, #8
   1367c:	pop	{r4, r5, r6, r7, r8, pc}
   13680:	push	{r4, r5, r7, r8, lr}
   13684:	sub	sp, sp, #20
   13688:	mov	r5, r0
   1368c:	mov	r8, r1
   13690:	mov	r7, r2
   13694:	mov	r4, r3
   13698:	bl	132d8 <__assert_fail@plt+0x27f4>
   1369c:	cmp	r0, #0
   136a0:	bne	13748 <__assert_fail@plt+0x2c64>
   136a4:	mov	r1, r8
   136a8:	mov	r0, r5
   136ac:	mov	r2, r7
   136b0:	add	r3, sp, #12
   136b4:	bl	125c8 <__assert_fail@plt+0x1ae4>
   136b8:	ldr	ip, [sp, #12]
   136bc:	cmp	r0, #0
   136c0:	mov	r1, r0
   136c4:	str	r0, [sp, #8]
   136c8:	moveq	r0, ip
   136cc:	beq	13708 <__assert_fail@plt+0x2c24>
   136d0:	add	r2, ip, #3
   136d4:	add	r3, r4, #3
   136d8:	mov	r0, r5
   136dc:	add	r1, r1, #12
   136e0:	bic	r2, r2, #3
   136e4:	bic	r3, r3, #3
   136e8:	bl	130f0 <__assert_fail@plt+0x260c>
   136ec:	cmp	r0, #0
   136f0:	bne	13708 <__assert_fail@plt+0x2c24>
   136f4:	mov	r0, r4
   136f8:	ldr	r5, [sp, #8]
   136fc:	bl	12fac <__assert_fail@plt+0x24c8>
   13700:	str	r0, [r5, #4]
   13704:	b	13734 <__assert_fail@plt+0x2c50>
   13708:	cmn	r0, #1
   1370c:	bne	1372c <__assert_fail@plt+0x2c48>
   13710:	add	r3, sp, #8
   13714:	mov	r0, r5
   13718:	str	r3, [sp]
   1371c:	mov	r1, r8
   13720:	mov	r2, r7
   13724:	mov	r3, r4
   13728:	bl	1319c <__assert_fail@plt+0x26b8>
   1372c:	cmp	r0, #0
   13730:	bne	13748 <__assert_fail@plt+0x2c64>
   13734:	ldr	r3, [sp, #40]	; 0x28
   13738:	mov	r0, #0
   1373c:	ldr	r2, [sp, #8]
   13740:	add	r2, r2, #12
   13744:	str	r2, [r3]
   13748:	add	sp, sp, #20
   1374c:	pop	{r4, r5, r7, r8, pc}
   13750:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13754:	mov	r6, r3
   13758:	ldr	r4, [sp, #32]
   1375c:	add	r3, sp, #12
   13760:	str	r3, [sp]
   13764:	mov	r3, r4
   13768:	bl	13680 <__assert_fail@plt+0x2b9c>
   1376c:	subs	r5, r0, #0
   13770:	bne	13790 <__assert_fail@plt+0x2cac>
   13774:	cmp	r4, #0
   13778:	moveq	r0, r4
   1377c:	beq	13794 <__assert_fail@plt+0x2cb0>
   13780:	ldr	r0, [sp, #12]
   13784:	mov	r1, r6
   13788:	mov	r2, r4
   1378c:	bl	10994 <memcpy@plt>
   13790:	mov	r0, r5
   13794:	add	sp, sp, #16
   13798:	pop	{r4, r5, r6, pc}
   1379c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   137a0:	mov	r5, r0
   137a4:	mov	r8, r1
   137a8:	mov	r7, r2
   137ac:	mov	r6, r3
   137b0:	ldr	r4, [sp, #40]	; 0x28
   137b4:	bl	132d8 <__assert_fail@plt+0x27f4>
   137b8:	cmp	r0, #0
   137bc:	bne	13868 <__assert_fail@plt+0x2d84>
   137c0:	mov	r1, r8
   137c4:	mov	r0, r5
   137c8:	mov	r2, r7
   137cc:	add	r3, sp, #12
   137d0:	bl	125c8 <__assert_fail@plt+0x1ae4>
   137d4:	cmp	r0, #0
   137d8:	mov	r1, r0
   137dc:	str	r0, [sp, #8]
   137e0:	beq	1382c <__assert_fail@plt+0x2d48>
   137e4:	ldr	r2, [sp, #12]
   137e8:	mov	r0, r5
   137ec:	add	r1, r1, #12
   137f0:	add	r7, r4, r2
   137f4:	add	r2, r2, #3
   137f8:	add	r3, r7, #3
   137fc:	bic	r2, r2, #3
   13800:	bic	r3, r3, #3
   13804:	bl	130f0 <__assert_fail@plt+0x260c>
   13808:	subs	r5, r0, #0
   1380c:	bne	13864 <__assert_fail@plt+0x2d80>
   13810:	mov	r0, r7
   13814:	ldr	r8, [sp, #8]
   13818:	bl	12fac <__assert_fail@plt+0x24c8>
   1381c:	ldr	r3, [sp, #12]
   13820:	str	r0, [r8, #4]
   13824:	add	r0, r8, r3
   13828:	b	13854 <__assert_fail@plt+0x2d70>
   1382c:	add	r3, sp, #8
   13830:	mov	r0, r5
   13834:	str	r3, [sp]
   13838:	mov	r1, r8
   1383c:	mov	r2, r7
   13840:	mov	r3, r4
   13844:	bl	1319c <__assert_fail@plt+0x26b8>
   13848:	subs	r5, r0, #0
   1384c:	bne	13864 <__assert_fail@plt+0x2d80>
   13850:	ldr	r0, [sp, #8]
   13854:	add	r0, r0, #12
   13858:	mov	r1, r6
   1385c:	mov	r2, r4
   13860:	bl	10994 <memcpy@plt>
   13864:	mov	r0, r5
   13868:	add	sp, sp, #16
   1386c:	pop	{r4, r5, r6, r7, r8, pc}
   13870:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13874:	mov	r4, r0
   13878:	mov	r7, r1
   1387c:	mov	r6, r2
   13880:	bl	132d8 <__assert_fail@plt+0x27f4>
   13884:	subs	r5, r0, #0
   13888:	movne	r0, r5
   1388c:	bne	138c8 <__assert_fail@plt+0x2de4>
   13890:	mov	r1, r7
   13894:	mov	r0, r4
   13898:	mov	r2, r6
   1389c:	add	r3, sp, #4
   138a0:	bl	125c8 <__assert_fail@plt+0x1ae4>
   138a4:	subs	r1, r0, #0
   138a8:	ldr	r0, [sp, #4]
   138ac:	beq	138c8 <__assert_fail@plt+0x2de4>
   138b0:	add	r0, r0, #3
   138b4:	mov	r3, r5
   138b8:	bic	r2, r0, #3
   138bc:	mov	r0, r4
   138c0:	add	r2, r2, #12
   138c4:	bl	130f0 <__assert_fail@plt+0x260c>
   138c8:	add	sp, sp, #12
   138cc:	pop	{r4, r5, r6, r7, pc}
   138d0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138d4:	mov	r4, r0
   138d8:	mov	r5, r1
   138dc:	mov	r9, r2
   138e0:	mov	r8, r3
   138e4:	bl	132d8 <__assert_fail@plt+0x27f4>
   138e8:	cmp	r0, #0
   138ec:	bne	139cc <__assert_fail@plt+0x2ee8>
   138f0:	mov	r0, r4
   138f4:	mov	r1, r5
   138f8:	mov	r2, r9
   138fc:	mov	r3, r8
   13900:	bl	12310 <__assert_fail@plt+0x182c>
   13904:	cmp	r0, #0
   13908:	bge	139c8 <__assert_fail@plt+0x2ee4>
   1390c:	cmn	r0, #1
   13910:	bne	139cc <__assert_fail@plt+0x2ee8>
   13914:	add	r6, sp, #4
   13918:	mov	r0, r4
   1391c:	mov	r1, r5
   13920:	mov	r2, r6
   13924:	bl	13e04 <__assert_fail@plt+0x3320>
   13928:	ldr	r5, [sp, #4]
   1392c:	mov	r0, r4
   13930:	mov	r2, r6
   13934:	mov	r1, r5
   13938:	bl	13e04 <__assert_fail@plt+0x3320>
   1393c:	sub	r0, r0, #3
   13940:	cmp	r0, #1
   13944:	bls	13928 <__assert_fail@plt+0x2e44>
   13948:	ldr	r0, [r4, #8]
   1394c:	add	r7, r8, #4
   13950:	bl	12f88 <__assert_fail@plt+0x24a4>
   13954:	bic	r7, r7, #3
   13958:	mov	r2, #0
   1395c:	add	r3, r7, #8
   13960:	add	sl, r5, r0
   13964:	mov	r0, r4
   13968:	add	r6, r4, sl
   1396c:	mov	r1, r6
   13970:	bl	130f0 <__assert_fail@plt+0x260c>
   13974:	subs	fp, r0, #0
   13978:	movne	r0, fp
   1397c:	bne	139cc <__assert_fail@plt+0x2ee8>
   13980:	mov	r0, #1
   13984:	bl	12fac <__assert_fail@plt+0x24c8>
   13988:	mov	r2, r7
   1398c:	mov	r1, fp
   13990:	add	r7, r7, #4
   13994:	str	r0, [r4, sl]
   13998:	add	r4, r6, #4
   1399c:	mov	r0, r4
   139a0:	bl	10a54 <memset@plt>
   139a4:	mov	r1, r9
   139a8:	mov	r2, r8
   139ac:	mov	r0, r4
   139b0:	bl	10994 <memcpy@plt>
   139b4:	mov	r0, #2
   139b8:	bl	12fac <__assert_fail@plt+0x24c8>
   139bc:	str	r0, [r6, r7]
   139c0:	mov	r0, r5
   139c4:	b	139cc <__assert_fail@plt+0x2ee8>
   139c8:	mvn	r0, #1
   139cc:	add	sp, sp, #12
   139d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139d4:	push	{r4, r5, r6, lr}
   139d8:	mov	r5, r0
   139dc:	mov	r0, r2
   139e0:	mov	r6, r1
   139e4:	mov	r4, r2
   139e8:	bl	10a18 <strlen@plt>
   139ec:	mov	r1, r6
   139f0:	mov	r2, r4
   139f4:	mov	r3, r0
   139f8:	mov	r0, r5
   139fc:	pop	{r4, r5, r6, lr}
   13a00:	b	138d0 <__assert_fail@plt+0x2dec>
   13a04:	push	{r4, r5, r6, r7, r8, lr}
   13a08:	mov	r5, r0
   13a0c:	mov	r4, r1
   13a10:	bl	132d8 <__assert_fail@plt+0x27f4>
   13a14:	subs	r6, r0, #0
   13a18:	bne	13a54 <__assert_fail@plt+0x2f70>
   13a1c:	mov	r0, r5
   13a20:	mov	r1, r4
   13a24:	bl	14290 <__assert_fail@plt+0x37ac>
   13a28:	subs	r7, r0, #0
   13a2c:	blt	13a5c <__assert_fail@plt+0x2f78>
   13a30:	ldr	r0, [r5, #8]
   13a34:	bl	12f88 <__assert_fail@plt+0x24a4>
   13a38:	rsb	r2, r4, r7
   13a3c:	mov	r3, r6
   13a40:	add	r1, r0, r4
   13a44:	mov	r0, r5
   13a48:	add	r1, r5, r1
   13a4c:	pop	{r4, r5, r6, r7, r8, lr}
   13a50:	b	130f0 <__assert_fail@plt+0x260c>
   13a54:	mov	r0, r6
   13a58:	pop	{r4, r5, r6, r7, r8, pc}
   13a5c:	mov	r0, r7
   13a60:	pop	{r4, r5, r6, r7, r8, pc}
   13a64:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13a68:	mov	r5, r0
   13a6c:	ldr	r0, [r0, #4]
   13a70:	mov	r4, r1
   13a74:	mov	r7, r2
   13a78:	bl	12f88 <__assert_fail@plt+0x24a4>
   13a7c:	mov	r6, r0
   13a80:	mov	r0, r5
   13a84:	bl	13d14 <__assert_fail@plt+0x3230>
   13a88:	subs	sl, r0, #0
   13a8c:	movne	r0, sl
   13a90:	bne	13c0c <__assert_fail@plt+0x3128>
   13a94:	mov	r0, r5
   13a98:	bl	122d8 <__assert_fail@plt+0x17f4>
   13a9c:	add	r0, r0, #1
   13aa0:	lsl	r9, r0, #4
   13aa4:	ldr	r0, [r5, #20]
   13aa8:	bl	12f88 <__assert_fail@plt+0x24a4>
   13aac:	cmp	r0, #16
   13ab0:	bls	13ac4 <__assert_fail@plt+0x2fe0>
   13ab4:	ldr	r0, [r5, #36]	; 0x24
   13ab8:	bl	12f88 <__assert_fail@plt+0x24a4>
   13abc:	str	r0, [sp, #4]
   13ac0:	b	13af0 <__assert_fail@plt+0x300c>
   13ac4:	add	r8, sp, #8
   13ac8:	str	sl, [r8, #-4]!
   13acc:	mov	r0, r5
   13ad0:	ldr	r1, [sp, #4]
   13ad4:	mov	r2, r8
   13ad8:	bl	13e04 <__assert_fail@plt+0x3320>
   13adc:	cmp	r0, #9
   13ae0:	bne	13acc <__assert_fail@plt+0x2fe8>
   13ae4:	ldr	r0, [sp, #4]
   13ae8:	cmp	r0, #0
   13aec:	blt	13c0c <__assert_fail@plt+0x3128>
   13af0:	ldr	sl, [sp, #4]
   13af4:	mov	r0, r5
   13af8:	mov	r1, r9
   13afc:	mov	r2, sl
   13b00:	bl	12fd0 <__assert_fail@plt+0x24ec>
   13b04:	cmp	r0, #0
   13b08:	bne	13b50 <__assert_fail@plt+0x306c>
   13b0c:	mov	r0, r5
   13b10:	mov	r1, r4
   13b14:	mov	r2, r7
   13b18:	bl	14134 <__assert_fail@plt+0x3650>
   13b1c:	subs	r5, r0, #0
   13b20:	movne	r0, r5
   13b24:	bne	13c0c <__assert_fail@plt+0x3128>
   13b28:	mov	r0, #17
   13b2c:	bl	12fac <__assert_fail@plt+0x24c8>
   13b30:	str	r0, [r4, #20]
   13b34:	ldr	r0, [sp, #4]
   13b38:	bl	12fac <__assert_fail@plt+0x24c8>
   13b3c:	str	r0, [r4, #36]	; 0x24
   13b40:	mov	r0, r7
   13b44:	bl	12fac <__assert_fail@plt+0x24c8>
   13b48:	str	r0, [r4, #4]
   13b4c:	b	13c00 <__assert_fail@plt+0x311c>
   13b50:	ldr	r0, [r5, #32]
   13b54:	add	r8, sl, #40	; 0x28
   13b58:	bl	12f88 <__assert_fail@plt+0x24a4>
   13b5c:	add	r8, r8, r9
   13b60:	add	r8, r8, r0
   13b64:	cmp	r7, r8
   13b68:	blt	13c08 <__assert_fail@plt+0x3124>
   13b6c:	add	r3, r4, r8
   13b70:	cmp	r5, r3
   13b74:	bcs	13b98 <__assert_fail@plt+0x30b4>
   13b78:	add	r6, r5, r6
   13b7c:	cmp	r4, r6
   13b80:	bcs	13b98 <__assert_fail@plt+0x30b4>
   13b84:	add	r2, r6, r8
   13b88:	add	r3, r4, r7
   13b8c:	cmp	r2, r3
   13b90:	bls	13b9c <__assert_fail@plt+0x30b8>
   13b94:	b	13c08 <__assert_fail@plt+0x3124>
   13b98:	mov	r6, r4
   13b9c:	mov	r3, sl
   13ba0:	mov	r0, r5
   13ba4:	mov	r1, r6
   13ba8:	mov	r2, r9
   13bac:	bl	13350 <__assert_fail@plt+0x286c>
   13bb0:	mov	r1, r6
   13bb4:	mov	r2, r8
   13bb8:	mov	r0, r4
   13bbc:	bl	1097c <memmove@plt>
   13bc0:	ldr	r0, [pc, #76]	; 13c14 <__assert_fail@plt+0x3130>
   13bc4:	bl	12fac <__assert_fail@plt+0x24c8>
   13bc8:	str	r0, [r4]
   13bcc:	mov	r0, r7
   13bd0:	bl	12fac <__assert_fail@plt+0x24c8>
   13bd4:	str	r0, [r4, #4]
   13bd8:	mov	r0, #17
   13bdc:	bl	12fac <__assert_fail@plt+0x24c8>
   13be0:	str	r0, [r4, #20]
   13be4:	mov	r0, #16
   13be8:	bl	12fac <__assert_fail@plt+0x24c8>
   13bec:	str	r0, [r4, #24]
   13bf0:	ldr	r0, [r5, #28]
   13bf4:	bl	12f88 <__assert_fail@plt+0x24a4>
   13bf8:	bl	12fac <__assert_fail@plt+0x24c8>
   13bfc:	str	r0, [r4, #28]
   13c00:	mov	r0, #0
   13c04:	b	13c0c <__assert_fail@plt+0x3128>
   13c08:	mvn	r0, #2
   13c0c:	add	sp, sp, #8
   13c10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c14:	andle	pc, sp, sp, ror #29
   13c18:	push	{r4, r5, r6, lr}
   13c1c:	mov	r4, r0
   13c20:	bl	132d8 <__assert_fail@plt+0x27f4>
   13c24:	subs	r5, r0, #0
   13c28:	bne	13c78 <__assert_fail@plt+0x3194>
   13c2c:	mov	r0, r4
   13c30:	bl	122d8 <__assert_fail@plt+0x17f4>
   13c34:	mov	r6, r0
   13c38:	ldr	r0, [r4, #36]	; 0x24
   13c3c:	bl	12f88 <__assert_fail@plt+0x24a4>
   13c40:	add	r2, r6, #1
   13c44:	mov	r1, r4
   13c48:	lsl	r2, r2, #4
   13c4c:	mov	r3, r0
   13c50:	mov	r0, r4
   13c54:	bl	13350 <__assert_fail@plt+0x286c>
   13c58:	ldr	r0, [r4, #12]
   13c5c:	bl	12f88 <__assert_fail@plt+0x24a4>
   13c60:	mov	r6, r0
   13c64:	ldr	r0, [r4, #32]
   13c68:	bl	12f88 <__assert_fail@plt+0x24a4>
   13c6c:	add	r0, r0, r6
   13c70:	bl	12fac <__assert_fail@plt+0x24c8>
   13c74:	str	r0, [r4, #4]
   13c78:	mov	r0, r5
   13c7c:	pop	{r4, r5, r6, pc}
   13c80:	cmp	r0, #0
   13c84:	bgt	13cb8 <__assert_fail@plt+0x31d4>
   13c88:	beq	13cc4 <__assert_fail@plt+0x31e0>
   13c8c:	cmn	r0, #18
   13c90:	bls	13cd0 <__assert_fail@plt+0x31ec>
   13c94:	ldr	r3, [pc, #64]	; 13cdc <__assert_fail@plt+0x31f8>
   13c98:	rsb	r0, r0, #0
   13c9c:	add	r3, pc, r3
   13ca0:	ldr	r0, [r3, r0, lsl #2]
   13ca4:	cmp	r0, #0
   13ca8:	bxne	lr
   13cac:	ldr	r0, [pc, #44]	; 13ce0 <__assert_fail@plt+0x31fc>
   13cb0:	add	r0, pc, r0
   13cb4:	bx	lr
   13cb8:	ldr	r0, [pc, #36]	; 13ce4 <__assert_fail@plt+0x3200>
   13cbc:	add	r0, pc, r0
   13cc0:	bx	lr
   13cc4:	ldr	r0, [pc, #28]	; 13ce8 <__assert_fail@plt+0x3204>
   13cc8:	add	r0, pc, r0
   13ccc:	bx	lr
   13cd0:	ldr	r0, [pc, #20]	; 13cec <__assert_fail@plt+0x3208>
   13cd4:	add	r0, pc, r0
   13cd8:	bx	lr
   13cdc:	andeq	r1, r1, r4, lsr #4
   13ce0:	andeq	r0, r0, r5, ror ip
   13ce4:	andeq	r0, r0, r8, asr #24
   13ce8:	andeq	r0, r0, r2, asr ip
   13cec:	andeq	r0, r0, r1, asr ip
   13cf0:	ubfx	r3, r0, #8, #8
   13cf4:	sub	sp, sp, #8
   13cf8:	lsl	r3, r3, #16
   13cfc:	orr	r3, r3, r0, lsl #24
   13d00:	orr	r3, r3, r0, lsr #24
   13d04:	ubfx	r0, r0, #16, #8
   13d08:	orr	r0, r3, r0, lsl #8
   13d0c:	add	sp, sp, #8
   13d10:	bx	lr
   13d14:	push	{r4, lr}
   13d18:	mov	r4, r0
   13d1c:	ldr	r0, [r0]
   13d20:	bl	13cf0 <__assert_fail@plt+0x320c>
   13d24:	ldr	r3, [pc, #96]	; 13d8c <__assert_fail@plt+0x32a8>
   13d28:	cmp	r0, r3
   13d2c:	bne	13d58 <__assert_fail@plt+0x3274>
   13d30:	ldr	r0, [r4, #20]
   13d34:	bl	13cf0 <__assert_fail@plt+0x320c>
   13d38:	cmp	r0, #15
   13d3c:	bls	13d7c <__assert_fail@plt+0x3298>
   13d40:	ldr	r0, [r4, #24]
   13d44:	bl	13cf0 <__assert_fail@plt+0x320c>
   13d48:	cmp	r0, #17
   13d4c:	mvnhi	r0, #9
   13d50:	movls	r0, #0
   13d54:	pop	{r4, pc}
   13d58:	ldr	r3, [pc, #48]	; 13d90 <__assert_fail@plt+0x32ac>
   13d5c:	cmp	r0, r3
   13d60:	bne	13d84 <__assert_fail@plt+0x32a0>
   13d64:	ldr	r0, [r4, #36]	; 0x24
   13d68:	bl	13cf0 <__assert_fail@plt+0x320c>
   13d6c:	cmp	r0, #0
   13d70:	mvneq	r0, #6
   13d74:	movne	r0, #0
   13d78:	pop	{r4, pc}
   13d7c:	mvn	r0, #9
   13d80:	pop	{r4, pc}
   13d84:	mvn	r0, #8
   13d88:	pop	{r4, pc}
   13d8c:	andle	pc, sp, sp, ror #29
   13d90:	svccs	0x00f20112
   13d94:	push	{r4, r5, r6, r7, r8, lr}
   13d98:	mov	r4, r0
   13d9c:	ldr	r0, [r0, #8]
   13da0:	mov	r5, r1
   13da4:	mov	r7, r2
   13da8:	bl	13cf0 <__assert_fail@plt+0x320c>
   13dac:	adds	r6, r0, r5
   13db0:	bcs	13dfc <__assert_fail@plt+0x3318>
   13db4:	adds	r8, r6, r7
   13db8:	bcs	13dfc <__assert_fail@plt+0x3318>
   13dbc:	ldr	r0, [r4, #4]
   13dc0:	bl	13cf0 <__assert_fail@plt+0x320c>
   13dc4:	cmp	r8, r0
   13dc8:	bhi	13dfc <__assert_fail@plt+0x3318>
   13dcc:	ldr	r0, [r4, #20]
   13dd0:	bl	13cf0 <__assert_fail@plt+0x320c>
   13dd4:	cmp	r0, #16
   13dd8:	bls	13df4 <__assert_fail@plt+0x3310>
   13ddc:	adds	r5, r5, r7
   13de0:	bcs	13dfc <__assert_fail@plt+0x3318>
   13de4:	ldr	r0, [r4, #36]	; 0x24
   13de8:	bl	13cf0 <__assert_fail@plt+0x320c>
   13dec:	cmp	r5, r0
   13df0:	bhi	13dfc <__assert_fail@plt+0x3318>
   13df4:	add	r0, r4, r6
   13df8:	pop	{r4, r5, r6, r7, r8, pc}
   13dfc:	mov	r0, #0
   13e00:	pop	{r4, r5, r6, r7, r8, pc}
   13e04:	push	{r4, r5, r6, r7, r8, lr}
   13e08:	mvn	r3, #7
   13e0c:	mov	r5, r2
   13e10:	str	r3, [r2]
   13e14:	mov	r2, #4
   13e18:	mov	r7, r0
   13e1c:	mov	r6, r1
   13e20:	bl	13d94 <__assert_fail@plt+0x32b0>
   13e24:	cmp	r0, #0
   13e28:	beq	13ef8 <__assert_fail@plt+0x3414>
   13e2c:	ldr	r0, [r0]
   13e30:	add	r4, r6, #4
   13e34:	bl	13cf0 <__assert_fail@plt+0x320c>
   13e38:	mvn	r3, #10
   13e3c:	str	r3, [r5]
   13e40:	sub	r3, r0, #1
   13e44:	mov	r8, r0
   13e48:	cmp	r3, #8
   13e4c:	addls	pc, pc, r3, lsl #2
   13e50:	b	13ef8 <__assert_fail@plt+0x3414>
   13e54:	b	13e84 <__assert_fail@plt+0x33a0>
   13e58:	b	13ecc <__assert_fail@plt+0x33e8>
   13e5c:	b	13ea4 <__assert_fail@plt+0x33c0>
   13e60:	b	13ecc <__assert_fail@plt+0x33e8>
   13e64:	b	13ef8 <__assert_fail@plt+0x3414>
   13e68:	b	13ef8 <__assert_fail@plt+0x3414>
   13e6c:	b	13ef8 <__assert_fail@plt+0x3414>
   13e70:	b	13ef8 <__assert_fail@plt+0x3414>
   13e74:	b	13ecc <__assert_fail@plt+0x33e8>
   13e78:	ldrb	r3, [r0]
   13e7c:	cmp	r3, #0
   13e80:	beq	13ecc <__assert_fail@plt+0x33e8>
   13e84:	mov	r1, r4
   13e88:	mov	r0, r7
   13e8c:	mov	r2, #1
   13e90:	add	r4, r4, #1
   13e94:	bl	13d94 <__assert_fail@plt+0x32b0>
   13e98:	cmp	r0, #0
   13e9c:	bne	13e78 <__assert_fail@plt+0x3394>
   13ea0:	b	13ef8 <__assert_fail@plt+0x3414>
   13ea4:	mov	r0, r7
   13ea8:	mov	r1, r4
   13eac:	mov	r2, #4
   13eb0:	bl	13d94 <__assert_fail@plt+0x32b0>
   13eb4:	cmp	r0, #0
   13eb8:	beq	13ef8 <__assert_fail@plt+0x3414>
   13ebc:	ldr	r0, [r0]
   13ec0:	add	r4, r6, #12
   13ec4:	bl	13cf0 <__assert_fail@plt+0x320c>
   13ec8:	add	r4, r4, r0
   13ecc:	mov	r0, r7
   13ed0:	mov	r1, r6
   13ed4:	rsb	r2, r6, r4
   13ed8:	bl	13d94 <__assert_fail@plt+0x32b0>
   13edc:	cmp	r0, #0
   13ee0:	beq	13ef8 <__assert_fail@plt+0x3414>
   13ee4:	add	r4, r4, #3
   13ee8:	mov	r0, r8
   13eec:	bic	r4, r4, #3
   13ef0:	str	r4, [r5]
   13ef4:	pop	{r4, r5, r6, r7, r8, pc}
   13ef8:	mov	r0, #9
   13efc:	pop	{r4, r5, r6, r7, r8, pc}
   13f00:	subs	r3, r1, #0
   13f04:	push	{r0, r1, r2, lr}
   13f08:	str	r1, [sp, #4]
   13f0c:	bge	13f18 <__assert_fail@plt+0x3434>
   13f10:	mvn	r0, #3
   13f14:	b	13f34 <__assert_fail@plt+0x3450>
   13f18:	tst	r3, #3
   13f1c:	bne	13f10 <__assert_fail@plt+0x342c>
   13f20:	add	r2, sp, #4
   13f24:	bl	13e04 <__assert_fail@plt+0x3320>
   13f28:	cmp	r0, #1
   13f2c:	bne	13f10 <__assert_fail@plt+0x342c>
   13f30:	ldr	r0, [sp, #4]
   13f34:	add	sp, sp, #12
   13f38:	pop	{pc}		; (ldr pc, [sp], #4)
   13f3c:	subs	r3, r1, #0
   13f40:	push	{r0, r1, r2, lr}
   13f44:	str	r1, [sp, #4]
   13f48:	bge	13f54 <__assert_fail@plt+0x3470>
   13f4c:	mvn	r0, #3
   13f50:	b	13f70 <__assert_fail@plt+0x348c>
   13f54:	tst	r3, #3
   13f58:	bne	13f4c <__assert_fail@plt+0x3468>
   13f5c:	add	r2, sp, #4
   13f60:	bl	13e04 <__assert_fail@plt+0x3320>
   13f64:	cmp	r0, #3
   13f68:	bne	13f4c <__assert_fail@plt+0x3468>
   13f6c:	ldr	r0, [sp, #4]
   13f70:	add	sp, sp, #12
   13f74:	pop	{pc}		; (ldr pc, [sp], #4)
   13f78:	mov	r3, #0
   13f7c:	cmp	r1, r3
   13f80:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13f84:	mov	r6, r0
   13f88:	mov	r4, r2
   13f8c:	str	r3, [sp, #4]
   13f90:	bge	13f9c <__assert_fail@plt+0x34b8>
   13f94:	add	r7, sp, #4
   13f98:	b	13fc0 <__assert_fail@plt+0x34dc>
   13f9c:	bl	13f00 <__assert_fail@plt+0x341c>
   13fa0:	cmp	r0, #0
   13fa4:	str	r0, [sp, #4]
   13fa8:	bge	13f94 <__assert_fail@plt+0x34b0>
   13fac:	b	14048 <__assert_fail@plt+0x3564>
   13fb0:	cmp	r0, #9
   13fb4:	beq	14018 <__assert_fail@plt+0x3534>
   13fb8:	cmp	r0, #1
   13fbc:	beq	13fe0 <__assert_fail@plt+0x34fc>
   13fc0:	ldr	r5, [sp, #4]
   13fc4:	mov	r0, r6
   13fc8:	mov	r2, r7
   13fcc:	mov	r1, r5
   13fd0:	bl	13e04 <__assert_fail@plt+0x3320>
   13fd4:	cmp	r0, #2
   13fd8:	bne	13fb0 <__assert_fail@plt+0x34cc>
   13fdc:	b	13ff4 <__assert_fail@plt+0x3510>
   13fe0:	cmp	r4, #0
   13fe4:	ldrne	r3, [r4]
   13fe8:	addne	r3, r3, #1
   13fec:	strne	r3, [r4]
   13ff0:	b	14044 <__assert_fail@plt+0x3560>
   13ff4:	cmp	r4, #0
   13ff8:	beq	13fc0 <__assert_fail@plt+0x34dc>
   13ffc:	ldr	r3, [r4]
   14000:	sub	r3, r3, #1
   14004:	str	r3, [r4]
   14008:	cmp	r3, #0
   1400c:	bge	13fc0 <__assert_fail@plt+0x34dc>
   14010:	ldr	r0, [sp, #4]
   14014:	b	14048 <__assert_fail@plt+0x3564>
   14018:	ldr	r0, [sp, #4]
   1401c:	cmp	r0, #0
   14020:	bge	1403c <__assert_fail@plt+0x3558>
   14024:	cmn	r0, #8
   14028:	bne	14048 <__assert_fail@plt+0x3564>
   1402c:	cmp	r4, #0
   14030:	mvneq	r0, #0
   14034:	mvnne	r0, #7
   14038:	b	14048 <__assert_fail@plt+0x3564>
   1403c:	mvn	r0, #0
   14040:	b	14048 <__assert_fail@plt+0x3564>
   14044:	mov	r0, r5
   14048:	add	sp, sp, #12
   1404c:	pop	{r4, r5, r6, r7, pc}
   14050:	push	{r0, r1, r2, lr}
   14054:	add	r2, sp, #8
   14058:	mov	r3, #0
   1405c:	str	r3, [r2, #-4]!
   14060:	bl	13f78 <__assert_fail@plt+0x3494>
   14064:	cmp	r0, #0
   14068:	blt	1407c <__assert_fail@plt+0x3598>
   1406c:	ldr	r3, [sp, #4]
   14070:	cmp	r3, #1
   14074:	mvnne	r0, #0
   14078:	b	14080 <__assert_fail@plt+0x359c>
   1407c:	mvn	r0, #0
   14080:	add	sp, sp, #12
   14084:	pop	{pc}		; (ldr pc, [sp], #4)
   14088:	push	{r0, r1, r2, r4, r5, lr}
   1408c:	add	r4, sp, #8
   14090:	mov	r5, r0
   14094:	mov	r3, #1
   14098:	str	r3, [r4, #-4]!
   1409c:	mov	r0, r5
   140a0:	mov	r2, r4
   140a4:	bl	13f78 <__assert_fail@plt+0x3494>
   140a8:	subs	r1, r0, #0
   140ac:	blt	140cc <__assert_fail@plt+0x35e8>
   140b0:	ldr	r3, [sp, #4]
   140b4:	cmp	r3, #0
   140b8:	ble	140cc <__assert_fail@plt+0x35e8>
   140bc:	cmp	r3, #1
   140c0:	bne	1409c <__assert_fail@plt+0x35b8>
   140c4:	mov	r0, r1
   140c8:	b	140d0 <__assert_fail@plt+0x35ec>
   140cc:	mvn	r0, #0
   140d0:	add	sp, sp, #12
   140d4:	pop	{r4, r5, pc}
   140d8:	push	{r3, r4, r5, r6, r7, lr}
   140dc:	mov	r4, r0
   140e0:	mov	r0, r2
   140e4:	mov	r7, r1
   140e8:	mov	r5, r2
   140ec:	bl	10a18 <strlen@plt>
   140f0:	add	r6, r0, #1
   140f4:	rsb	r7, r6, r7
   140f8:	add	r7, r4, r7
   140fc:	cmp	r4, r7
   14100:	bhi	14124 <__assert_fail@plt+0x3640>
   14104:	mov	r0, r4
   14108:	mov	r1, r5
   1410c:	mov	r2, r6
   14110:	bl	109a0 <memcmp@plt>
   14114:	cmp	r0, #0
   14118:	beq	1412c <__assert_fail@plt+0x3648>
   1411c:	add	r4, r4, #1
   14120:	b	140fc <__assert_fail@plt+0x3618>
   14124:	mov	r0, #0
   14128:	pop	{r3, r4, r5, r6, r7, pc}
   1412c:	mov	r0, r4
   14130:	pop	{r3, r4, r5, r6, r7, pc}
   14134:	push	{r3, r4, r5, r6, r7, lr}
   14138:	mov	r5, r0
   1413c:	mov	r6, r1
   14140:	mov	r7, r2
   14144:	bl	13d14 <__assert_fail@plt+0x3230>
   14148:	subs	r4, r0, #0
   1414c:	bne	14170 <__assert_fail@plt+0x368c>
   14150:	ldr	r0, [r5, #4]
   14154:	bl	13cf0 <__assert_fail@plt+0x320c>
   14158:	cmp	r0, r7
   1415c:	mov	r2, r0
   14160:	bhi	14178 <__assert_fail@plt+0x3694>
   14164:	mov	r0, r6
   14168:	mov	r1, r5
   1416c:	bl	1097c <memmove@plt>
   14170:	mov	r0, r4
   14174:	pop	{r3, r4, r5, r6, r7, pc}
   14178:	mvn	r0, #2
   1417c:	pop	{r3, r4, r5, r6, r7, pc}
   14180:	add	r1, r0, r1
   14184:	mov	r3, #67108864	; 0x4000000
   14188:	cmp	r0, r1
   1418c:	strcc	r3, [r0], #4
   14190:	bcc	14188 <__assert_fail@plt+0x36a4>
   14194:	bx	lr
   14198:	push	{r4, r5, lr}
   1419c:	sub	sp, sp, #20
   141a0:	add	ip, sp, #12
   141a4:	str	ip, [sp]
   141a8:	ldr	r5, [sp, #32]
   141ac:	ldr	r4, [sp, #40]	; 0x28
   141b0:	bl	12604 <__assert_fail@plt+0x1b20>
   141b4:	subs	r3, r0, #0
   141b8:	ldr	r0, [sp, #12]
   141bc:	beq	141e8 <__assert_fail@plt+0x3704>
   141c0:	add	r2, r4, r5
   141c4:	cmp	r0, r2
   141c8:	bcc	141e4 <__assert_fail@plt+0x3700>
   141cc:	add	r0, r3, r5
   141d0:	ldr	r1, [sp, #36]	; 0x24
   141d4:	mov	r2, r4
   141d8:	bl	10994 <memcpy@plt>
   141dc:	mov	r0, #0
   141e0:	b	141e8 <__assert_fail@plt+0x3704>
   141e4:	mvn	r0, #2
   141e8:	add	sp, sp, #20
   141ec:	pop	{r4, r5, pc}
   141f0:	push	{r4, r5, r6, r7, r8, lr}
   141f4:	sub	sp, sp, #24
   141f8:	mov	r8, r3
   141fc:	add	r3, sp, #20
   14200:	mov	r7, r0
   14204:	mov	r6, r1
   14208:	mov	r5, r2
   1420c:	bl	12670 <__assert_fail@plt+0x1b8c>
   14210:	ldr	r4, [sp, #20]
   14214:	cmp	r0, #0
   14218:	moveq	r0, r4
   1421c:	beq	14258 <__assert_fail@plt+0x3774>
   14220:	ldr	r3, [sp, #48]	; 0x30
   14224:	cmp	r4, r3
   14228:	mvnne	r0, #2
   1422c:	bne	14258 <__assert_fail@plt+0x3774>
   14230:	mov	r0, r5
   14234:	bl	10a18 <strlen@plt>
   14238:	mov	r2, #0
   1423c:	str	r4, [sp, #8]
   14240:	mov	r1, r6
   14244:	stm	sp, {r2, r8}
   14248:	mov	r2, r5
   1424c:	mov	r3, r0
   14250:	mov	r0, r7
   14254:	bl	14198 <__assert_fail@plt+0x36b4>
   14258:	add	sp, sp, #24
   1425c:	pop	{r4, r5, r6, r7, r8, pc}
   14260:	push	{r0, r1, r2, lr}
   14264:	add	r3, sp, #4
   14268:	bl	125c8 <__assert_fail@plt+0x1ae4>
   1426c:	ldr	r1, [sp, #4]
   14270:	cmp	r0, #0
   14274:	moveq	r0, r1
   14278:	beq	14288 <__assert_fail@plt+0x37a4>
   1427c:	add	r1, r1, #12
   14280:	bl	14180 <__assert_fail@plt+0x369c>
   14284:	mov	r0, #0
   14288:	add	sp, sp, #12
   1428c:	pop	{pc}		; (ldr pc, [sp], #4)
   14290:	push	{r0, r1, r2, r4, r5, lr}
   14294:	add	r4, sp, #8
   14298:	mov	r5, r0
   1429c:	mov	r3, #0
   142a0:	str	r3, [r4, #-4]!
   142a4:	ldr	r3, [sp, #4]
   142a8:	cmp	r1, #0
   142ac:	cmpge	r3, #0
   142b0:	blt	142c8 <__assert_fail@plt+0x37e4>
   142b4:	mov	r0, r5
   142b8:	mov	r2, r4
   142bc:	bl	13f78 <__assert_fail@plt+0x3494>
   142c0:	mov	r1, r0
   142c4:	b	142a4 <__assert_fail@plt+0x37c0>
   142c8:	mov	r0, r1
   142cc:	add	sp, sp, #12
   142d0:	pop	{r4, r5, pc}
   142d4:	push	{r4, r5, r6, lr}
   142d8:	mov	r6, r0
   142dc:	mov	r4, r1
   142e0:	bl	14290 <__assert_fail@plt+0x37ac>
   142e4:	subs	r5, r0, #0
   142e8:	blt	1430c <__assert_fail@plt+0x3828>
   142ec:	mov	r1, r4
   142f0:	mov	r2, #0
   142f4:	mov	r0, r6
   142f8:	bl	13d94 <__assert_fail@plt+0x32b0>
   142fc:	rsb	r1, r4, r5
   14300:	bl	14180 <__assert_fail@plt+0x369c>
   14304:	mov	r0, #0
   14308:	pop	{r4, r5, r6, pc}
   1430c:	mov	r0, r5
   14310:	pop	{r4, r5, r6, pc}
   14314:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14318:	mov	r7, r0
   1431c:	ldr	r6, [pc, #76]	; 14370 <__assert_fail@plt+0x388c>
   14320:	mov	r8, r1
   14324:	ldr	r5, [pc, #72]	; 14374 <__assert_fail@plt+0x3890>
   14328:	mov	r9, r2
   1432c:	add	r6, pc, r6
   14330:	bl	1092c <strcmp@plt-0x20>
   14334:	add	r5, pc, r5
   14338:	rsb	r6, r5, r6
   1433c:	asrs	r6, r6, #2
   14340:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14344:	sub	r5, r5, #4
   14348:	mov	r4, #0
   1434c:	add	r4, r4, #1
   14350:	ldr	r3, [r5, #4]!
   14354:	mov	r0, r7
   14358:	mov	r1, r8
   1435c:	mov	r2, r9
   14360:	blx	r3
   14364:	cmp	r4, r6
   14368:	bne	1434c <__assert_fail@plt+0x3868>
   1436c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14370:	ldrdeq	r0, [r1], -r8
   14374:	andeq	r0, r1, ip, asr #21
   14378:	bx	lr

Disassembly of section .fini:

0001437c <.fini>:
   1437c:	push	{r3, lr}
   14380:	pop	{r3, pc}
