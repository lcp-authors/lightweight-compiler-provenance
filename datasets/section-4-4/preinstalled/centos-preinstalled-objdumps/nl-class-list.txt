
centos-preinstalled/nl-class-list:     file format elf32-littlearm


Disassembly of section .init:

000108d8 <.init>:
   108d8:	push	{r3, lr}
   108dc:	bl	10bec <exit@plt+0x204>
   108e0:	pop	{r3, pc}

Disassembly of section .plt:

000108e4 <abort@plt-0x14>:
   108e4:	push	{lr}		; (str lr, [sp, #-4]!)
   108e8:	ldr	lr, [pc, #4]	; 108f4 <abort@plt-0x4>
   108ec:	add	lr, pc, lr
   108f0:	ldr	pc, [lr, #8]!
   108f4:	andeq	r1, r1, ip, lsl #14

000108f8 <abort@plt>:
   108f8:	add	ip, pc, #0, 12
   108fc:	add	ip, ip, #69632	; 0x11000
   10900:	ldr	pc, [ip, #1804]!	; 0x70c

00010904 <nl_cache_dump_filter@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #69632	; 0x11000
   1090c:	ldr	pc, [ip, #1796]!	; 0x704

00010910 <__libc_start_main@plt>:
   10910:	add	ip, pc, #0, 12
   10914:	add	ip, ip, #69632	; 0x11000
   10918:	ldr	pc, [ip, #1788]!	; 0x6fc

0001091c <__gmon_start__@plt>:
   1091c:	add	ip, pc, #0, 12
   10920:	add	ip, ip, #69632	; 0x11000
   10924:	ldr	pc, [ip, #1780]!	; 0x6f4

00010928 <nl_cli_tc_parse_parent@plt>:
   10928:	add	ip, pc, #0, 12
   1092c:	add	ip, ip, #69632	; 0x11000
   10930:	ldr	pc, [ip, #1772]!	; 0x6ec

00010934 <nl_cli_print_version@plt>:
   10934:	add	ip, pc, #0, 12
   10938:	add	ip, ip, #69632	; 0x11000
   1093c:	ldr	pc, [ip, #1764]!	; 0x6e4

00010940 <nl_cli_alloc_socket@plt>:
   10940:	add	ip, pc, #0, 12
   10944:	add	ip, ip, #69632	; 0x11000
   10948:	ldr	pc, [ip, #1756]!	; 0x6dc

0001094c <nl_cli_class_alloc_cache@plt>:
   1094c:	add	ip, pc, #0, 12
   10950:	add	ip, ip, #69632	; 0x11000
   10954:	ldr	pc, [ip, #1748]!	; 0x6d4

00010958 <getopt_long@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #69632	; 0x11000
   10960:	ldr	pc, [ip, #1740]!	; 0x6cc

00010964 <rtnl_tc_get_ifindex@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #69632	; 0x11000
   1096c:	ldr	pc, [ip, #1732]!	; 0x6c4

00010970 <nl_cli_link_alloc_cache@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #69632	; 0x11000
   10978:	ldr	pc, [ip, #1724]!	; 0x6bc

0001097c <__stack_chk_fail@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #69632	; 0x11000
   10984:	ldr	pc, [ip, #1716]!	; 0x6b4

00010988 <nl_cli_class_alloc@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #69632	; 0x11000
   10990:	ldr	pc, [ip, #1708]!	; 0x6ac

00010994 <nl_cli_tc_parse_kind@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #69632	; 0x11000
   1099c:	ldr	pc, [ip, #1700]!	; 0x6a4

000109a0 <rtnl_link_get_ifindex@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #69632	; 0x11000
   109a8:	ldr	pc, [ip, #1692]!	; 0x69c

000109ac <puts@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #69632	; 0x11000
   109b4:	ldr	pc, [ip, #1684]!	; 0x694

000109b8 <nl_cli_connect@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #69632	; 0x11000
   109c0:	ldr	pc, [ip, #1676]!	; 0x68c

000109c4 <nl_cli_tc_parse_dev@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #69632	; 0x11000
   109cc:	ldr	pc, [ip, #1668]!	; 0x684

000109d0 <nl_cache_foreach@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #69632	; 0x11000
   109d8:	ldr	pc, [ip, #1660]!	; 0x67c

000109dc <nl_cli_tc_parse_handle@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #69632	; 0x11000
   109e4:	ldr	pc, [ip, #1652]!	; 0x674

000109e8 <exit@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #69632	; 0x11000
   109f0:	ldr	pc, [ip, #1644]!	; 0x66c

Disassembly of section .text:

000109f4 <.text>:
   109f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109f8:	movw	fp, #8440	; 0x20f8
   109fc:	movt	fp, #2
   10a00:	sub	sp, sp, #28
   10a04:	mov	r6, r1
   10a08:	mov	r7, r0
   10a0c:	ldr	r3, [fp]
   10a10:	movw	r8, #8456	; 0x2108
   10a14:	movt	r8, #2
   10a18:	movw	r9, #8448	; 0x2100
   10a1c:	add	r5, sp, #16
   10a20:	movt	r9, #2
   10a24:	str	r3, [sp, #20]
   10a28:	bl	10940 <nl_cli_alloc_socket@plt>
   10a2c:	mov	r1, #0
   10a30:	mov	r4, r1
   10a34:	str	r0, [r8]
   10a38:	bl	109b8 <nl_cli_connect@plt>
   10a3c:	ldr	r0, [r8]
   10a40:	bl	10970 <nl_cli_link_alloc_cache@plt>
   10a44:	str	r0, [sp, #12]
   10a48:	bl	10988 <nl_cli_class_alloc@plt>
   10a4c:	movw	r3, #8444	; 0x20fc
   10a50:	movt	r3, #2
   10a54:	ldr	r3, [r3]
   10a58:	str	r3, [r8, #32]
   10a5c:	mov	sl, r0
   10a60:	str	r5, [sp]
   10a64:	movw	r2, #3468	; 0xd8c
   10a68:	movw	r3, #8296	; 0x2068
   10a6c:	movt	r2, #1
   10a70:	movt	r3, #2
   10a74:	mov	r0, r7
   10a78:	mov	r1, r6
   10a7c:	str	r4, [sp, #16]
   10a80:	bl	10958 <getopt_long@plt>
   10a84:	cmn	r0, #1
   10a88:	beq	10b50 <exit@plt+0x168>
   10a8c:	cmp	r0, #107	; 0x6b
   10a90:	beq	10b40 <exit@plt+0x158>
   10a94:	ble	10acc <exit@plt+0xe4>
   10a98:	cmp	r0, #118	; 0x76
   10a9c:	beq	10b24 <exit@plt+0x13c>
   10aa0:	ble	10af8 <exit@plt+0x110>
   10aa4:	movw	r3, #257	; 0x101
   10aa8:	cmp	r0, r3
   10aac:	moveq	r3, #1
   10ab0:	streq	r3, [r8, #4]
   10ab4:	beq	10a60 <exit@plt+0x78>
   10ab8:	add	r3, r3, #1
   10abc:	cmp	r0, r3
   10ac0:	moveq	r3, #2
   10ac4:	streq	r3, [r8, #4]
   10ac8:	b	10a60 <exit@plt+0x78>
   10acc:	cmp	r0, #104	; 0x68
   10ad0:	beq	10b2c <exit@plt+0x144>
   10ad4:	cmp	r0, #105	; 0x69
   10ad8:	beq	10b10 <exit@plt+0x128>
   10adc:	cmp	r0, #100	; 0x64
   10ae0:	bne	10a60 <exit@plt+0x78>
   10ae4:	mov	r0, sl
   10ae8:	ldr	r1, [sp, #12]
   10aec:	ldr	r2, [r9]
   10af0:	bl	109c4 <nl_cli_tc_parse_dev@plt>
   10af4:	b	10a60 <exit@plt+0x78>
   10af8:	cmp	r0, #112	; 0x70
   10afc:	bne	10a60 <exit@plt+0x78>
   10b00:	mov	r0, sl
   10b04:	ldr	r1, [r9]
   10b08:	bl	10928 <nl_cli_tc_parse_parent@plt>
   10b0c:	b	10a60 <exit@plt+0x78>
   10b10:	mov	r0, sl
   10b14:	ldr	r1, [r9]
   10b18:	mov	r2, #0
   10b1c:	bl	109dc <nl_cli_tc_parse_handle@plt>
   10b20:	b	10a60 <exit@plt+0x78>
   10b24:	bl	10934 <nl_cli_print_version@plt>
   10b28:	b	10a60 <exit@plt+0x78>
   10b2c:	movw	r0, #3480	; 0xd98
   10b30:	movt	r0, #1
   10b34:	bl	109ac <puts@plt>
   10b38:	mov	r0, #0
   10b3c:	bl	109e8 <exit@plt>
   10b40:	mov	r0, sl
   10b44:	ldr	r1, [r9]
   10b48:	bl	10994 <nl_cli_tc_parse_kind@plt>
   10b4c:	b	10a60 <exit@plt+0x78>
   10b50:	mov	r0, sl
   10b54:	bl	10964 <rtnl_tc_get_ifindex@plt>
   10b58:	subs	r1, r0, #0
   10b5c:	bne	10b90 <exit@plt+0x1a8>
   10b60:	movw	r1, #3300	; 0xce4
   10b64:	ldr	r0, [sp, #12]
   10b68:	mov	r2, sl
   10b6c:	movt	r1, #1
   10b70:	bl	109d0 <nl_cache_foreach@plt>
   10b74:	ldr	r2, [sp, #20]
   10b78:	mov	r0, #0
   10b7c:	ldr	r3, [fp]
   10b80:	cmp	r2, r3
   10b84:	bne	10ba8 <exit@plt+0x1c0>
   10b88:	add	sp, sp, #28
   10b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b90:	ldr	r0, [r8]
   10b94:	bl	1094c <nl_cli_class_alloc_cache@plt>
   10b98:	mov	r2, sl
   10b9c:	ldr	r1, [pc, #8]	; 10bac <exit@plt+0x1c4>
   10ba0:	bl	10904 <nl_cache_dump_filter@plt>
   10ba4:	b	10b74 <exit@plt+0x18c>
   10ba8:	bl	1097c <__stack_chk_fail@plt>
   10bac:	andeq	r2, r2, ip, lsl #2
   10bb0:	mov	fp, #0
   10bb4:	mov	lr, #0
   10bb8:	pop	{r1}		; (ldr r1, [sp], #4)
   10bbc:	mov	r2, sp
   10bc0:	push	{r2}		; (str r2, [sp, #-4]!)
   10bc4:	push	{r0}		; (str r0, [sp, #-4]!)
   10bc8:	ldr	ip, [pc, #16]	; 10be0 <exit@plt+0x1f8>
   10bcc:	push	{ip}		; (str ip, [sp, #-4]!)
   10bd0:	ldr	r0, [pc, #12]	; 10be4 <exit@plt+0x1fc>
   10bd4:	ldr	r3, [pc, #12]	; 10be8 <exit@plt+0x200>
   10bd8:	bl	10910 <__libc_start_main@plt>
   10bdc:	bl	108f8 <abort@plt>
   10be0:	andeq	r0, r1, r8, ror sp
   10be4:	strdeq	r0, [r1], -r4
   10be8:	andeq	r0, r1, r4, lsl sp
   10bec:	ldr	r3, [pc, #20]	; 10c08 <exit@plt+0x220>
   10bf0:	ldr	r2, [pc, #20]	; 10c0c <exit@plt+0x224>
   10bf4:	add	r3, pc, r3
   10bf8:	ldr	r2, [r3, r2]
   10bfc:	cmp	r2, #0
   10c00:	bxeq	lr
   10c04:	b	1091c <__gmon_start__@plt>
   10c08:	andeq	r1, r1, r4, lsl #8
   10c0c:	andeq	r0, r0, r0, rrx
   10c10:	push	{r3, lr}
   10c14:	movw	r0, #8440	; 0x20f8
   10c18:	ldr	r3, [pc, #36]	; 10c44 <exit@plt+0x25c>
   10c1c:	movt	r0, #2
   10c20:	rsb	r3, r0, r3
   10c24:	cmp	r3, #6
   10c28:	popls	{r3, pc}
   10c2c:	movw	r3, #0
   10c30:	movt	r3, #0
   10c34:	cmp	r3, #0
   10c38:	popeq	{r3, pc}
   10c3c:	blx	r3
   10c40:	pop	{r3, pc}
   10c44:	strdeq	r2, [r2], -fp
   10c48:	push	{r3, lr}
   10c4c:	movw	r0, #8440	; 0x20f8
   10c50:	movw	r3, #8440	; 0x20f8
   10c54:	movt	r0, #2
   10c58:	movt	r3, #2
   10c5c:	rsb	r3, r0, r3
   10c60:	asr	r3, r3, #2
   10c64:	add	r3, r3, r3, lsr #31
   10c68:	asrs	r1, r3, #1
   10c6c:	popeq	{r3, pc}
   10c70:	movw	r2, #0
   10c74:	movt	r2, #0
   10c78:	cmp	r2, #0
   10c7c:	popeq	{r3, pc}
   10c80:	blx	r2
   10c84:	pop	{r3, pc}
   10c88:	push	{r4, lr}
   10c8c:	movw	r4, #8452	; 0x2104
   10c90:	movt	r4, #2
   10c94:	ldrb	r3, [r4]
   10c98:	cmp	r3, #0
   10c9c:	popne	{r4, pc}
   10ca0:	bl	10c10 <exit@plt+0x228>
   10ca4:	mov	r3, #1
   10ca8:	strb	r3, [r4]
   10cac:	pop	{r4, pc}
   10cb0:	movw	r0, #7868	; 0x1ebc
   10cb4:	movt	r0, #2
   10cb8:	push	{r3, lr}
   10cbc:	ldr	r3, [r0]
   10cc0:	cmp	r3, #0
   10cc4:	beq	10cdc <exit@plt+0x2f4>
   10cc8:	movw	r3, #0
   10ccc:	movt	r3, #0
   10cd0:	cmp	r3, #0
   10cd4:	beq	10cdc <exit@plt+0x2f4>
   10cd8:	blx	r3
   10cdc:	pop	{r3, lr}
   10ce0:	b	10c48 <exit@plt+0x260>
   10ce4:	push	{r3, r4, r5, lr}
   10ce8:	mov	r5, r1
   10cec:	bl	109a0 <rtnl_link_get_ifindex@plt>
   10cf0:	movw	r4, #8456	; 0x2108
   10cf4:	movt	r4, #2
   10cf8:	mov	r1, r0
   10cfc:	ldr	r0, [r4], #4
   10d00:	bl	1094c <nl_cli_class_alloc_cache@plt>
   10d04:	mov	r2, r5
   10d08:	mov	r1, r4
   10d0c:	pop	{r3, r4, r5, lr}
   10d10:	b	10904 <nl_cache_dump_filter@plt>
   10d14:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10d18:	mov	r7, r0
   10d1c:	ldr	r6, [pc, #76]	; 10d70 <exit@plt+0x388>
   10d20:	mov	r8, r1
   10d24:	ldr	r5, [pc, #72]	; 10d74 <exit@plt+0x38c>
   10d28:	mov	r9, r2
   10d2c:	add	r6, pc, r6
   10d30:	bl	108d8 <abort@plt-0x20>
   10d34:	add	r5, pc, r5
   10d38:	rsb	r6, r5, r6
   10d3c:	asrs	r6, r6, #2
   10d40:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10d44:	sub	r5, r5, #4
   10d48:	mov	r4, #0
   10d4c:	add	r4, r4, #1
   10d50:	ldr	r3, [r5, #4]!
   10d54:	mov	r0, r7
   10d58:	mov	r1, r8
   10d5c:	mov	r2, r9
   10d60:	blx	r3
   10d64:	cmp	r4, r6
   10d68:	bne	10d4c <exit@plt+0x364>
   10d6c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10d70:	andeq	r1, r1, r4, lsl #3
   10d74:	andeq	r1, r1, r8, ror r1
   10d78:	bx	lr

Disassembly of section .fini:

00010d7c <.fini>:
   10d7c:	push	{r3, lr}
   10d80:	pop	{r3, pc}
