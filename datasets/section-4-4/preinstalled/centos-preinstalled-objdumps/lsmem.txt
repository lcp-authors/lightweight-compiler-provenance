
centos-preinstalled/lsmem:     file format elf32-littlearm


Disassembly of section .init:

00011394 <.init>:
   11394:	push	{r3, lr}
   11398:	bl	12380 <__assert_fail@plt+0xbe8>
   1139c:	pop	{r3, pc}

Disassembly of section .plt:

000113a0 <calloc@plt-0x14>:
   113a0:	push	{lr}		; (str lr, [sp, #-4]!)
   113a4:	ldr	lr, [pc, #4]	; 113b0 <calloc@plt-0x4>
   113a8:	add	lr, pc, lr
   113ac:	ldr	pc, [lr, #8]!
   113b0:	andeq	r6, r1, r0, asr ip

000113b4 <calloc@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #90112	; 0x16000
   113bc:	ldr	pc, [ip, #3152]!	; 0xc50

000113c0 <raise@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #90112	; 0x16000
   113c8:	ldr	pc, [ip, #3144]!	; 0xc48

000113cc <scols_line_refer_data@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #90112	; 0x16000
   113d4:	ldr	pc, [ip, #3136]!	; 0xc40

000113d8 <strcmp@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #90112	; 0x16000
   113e0:	ldr	pc, [ip, #3128]!	; 0xc38

000113e4 <strtol@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #90112	; 0x16000
   113ec:	ldr	pc, [ip, #3120]!	; 0xc30

000113f0 <strcspn@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #90112	; 0x16000
   113f8:	ldr	pc, [ip, #3112]!	; 0xc28

000113fc <scols_table_enable_noheadings@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #90112	; 0x16000
   11404:	ldr	pc, [ip, #3104]!	; 0xc20

00011408 <scols_table_new_column@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #90112	; 0x16000
   11410:	ldr	pc, [ip, #3096]!	; 0xc18

00011414 <free@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #90112	; 0x16000
   1141c:	ldr	pc, [ip, #3088]!	; 0xc10

00011420 <fgets@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #90112	; 0x16000
   11428:	ldr	pc, [ip, #3080]!	; 0xc08

0001142c <scols_table_enable_raw@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #90112	; 0x16000
   11434:	ldr	pc, [ip, #3072]!	; 0xc00

00011438 <ferror@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #90112	; 0x16000
   11440:	ldr	pc, [ip, #3064]!	; 0xbf8

00011444 <_exit@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #90112	; 0x16000
   1144c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011450 <__vsnprintf_chk@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #90112	; 0x16000
   11458:	ldr	pc, [ip, #3048]!	; 0xbe8

0001145c <memcpy@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #90112	; 0x16000
   11464:	ldr	pc, [ip, #3040]!	; 0xbe0

00011468 <__strtoull_internal@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #90112	; 0x16000
   11470:	ldr	pc, [ip, #3032]!	; 0xbd8

00011474 <versionsort64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #90112	; 0x16000
   1147c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011480 <memcmp@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #90112	; 0x16000
   11488:	ldr	pc, [ip, #3016]!	; 0xbc8

0001148c <dcgettext@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #90112	; 0x16000
   11494:	ldr	pc, [ip, #3008]!	; 0xbc0

00011498 <__stack_chk_fail@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #90112	; 0x16000
   114a0:	ldr	pc, [ip, #3000]!	; 0xbb8

000114a4 <realloc@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #90112	; 0x16000
   114ac:	ldr	pc, [ip, #2992]!	; 0xbb0

000114b0 <textdomain@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #90112	; 0x16000
   114b8:	ldr	pc, [ip, #2984]!	; 0xba8

000114bc <strcasecmp@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #90112	; 0x16000
   114c4:	ldr	pc, [ip, #2976]!	; 0xba0

000114c8 <__strndup@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #90112	; 0x16000
   114d0:	ldr	pc, [ip, #2968]!	; 0xb98

000114d4 <err@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #90112	; 0x16000
   114dc:	ldr	pc, [ip, #2960]!	; 0xb90

000114e0 <__memcpy_chk@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #90112	; 0x16000
   114e8:	ldr	pc, [ip, #2952]!	; 0xb88

000114ec <scols_new_table@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #90112	; 0x16000
   114f4:	ldr	pc, [ip, #2944]!	; 0xb80

000114f8 <usleep@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #90112	; 0x16000
   11500:	ldr	pc, [ip, #2936]!	; 0xb78

00011504 <scols_table_enable_export@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #90112	; 0x16000
   1150c:	ldr	pc, [ip, #2928]!	; 0xb70

00011510 <__fpending@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #90112	; 0x16000
   11518:	ldr	pc, [ip, #2920]!	; 0xb68

0001151c <opendir@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #90112	; 0x16000
   11524:	ldr	pc, [ip, #2912]!	; 0xb60

00011528 <open64@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #90112	; 0x16000
   11530:	ldr	pc, [ip, #2904]!	; 0xb58

00011534 <malloc@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #90112	; 0x16000
   1153c:	ldr	pc, [ip, #2896]!	; 0xb50

00011540 <__libc_start_main@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #90112	; 0x16000
   11548:	ldr	pc, [ip, #2888]!	; 0xb48

0001154c <scols_table_new_line@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #90112	; 0x16000
   11554:	ldr	pc, [ip, #2880]!	; 0xb40

00011558 <scols_unref_table@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #90112	; 0x16000
   11560:	ldr	pc, [ip, #2872]!	; 0xb38

00011564 <__ctype_tolower_loc@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #90112	; 0x16000
   1156c:	ldr	pc, [ip, #2864]!	; 0xb30

00011570 <__gmon_start__@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #90112	; 0x16000
   11578:	ldr	pc, [ip, #2856]!	; 0xb28

0001157c <getopt_long@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #90112	; 0x16000
   11584:	ldr	pc, [ip, #2848]!	; 0xb20

00011588 <__ctype_b_loc@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #90112	; 0x16000
   11590:	ldr	pc, [ip, #2840]!	; 0xb18

00011594 <exit@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #90112	; 0x16000
   1159c:	ldr	pc, [ip, #2832]!	; 0xb10

000115a0 <syscall@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #90112	; 0x16000
   115a8:	ldr	pc, [ip, #2824]!	; 0xb08

000115ac <strtoul@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #90112	; 0x16000
   115b4:	ldr	pc, [ip, #2816]!	; 0xb00

000115b8 <strlen@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #90112	; 0x16000
   115c0:	ldr	pc, [ip, #2808]!	; 0xaf8

000115c4 <strchr@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #90112	; 0x16000
   115cc:	ldr	pc, [ip, #2800]!	; 0xaf0

000115d0 <warnx@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #90112	; 0x16000
   115d8:	ldr	pc, [ip, #2792]!	; 0xae8

000115dc <__errno_location@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #90112	; 0x16000
   115e4:	ldr	pc, [ip, #2784]!	; 0xae0

000115e8 <strncasecmp@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #90112	; 0x16000
   115f0:	ldr	pc, [ip, #2776]!	; 0xad8

000115f4 <__cxa_atexit@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #90112	; 0x16000
   115fc:	ldr	pc, [ip, #2768]!	; 0xad0

00011600 <__vasprintf_chk@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #90112	; 0x16000
   11608:	ldr	pc, [ip, #2760]!	; 0xac8

0001160c <__strdup@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #90112	; 0x16000
   11614:	ldr	pc, [ip, #2752]!	; 0xac0

00011618 <__sched_cpufree@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #90112	; 0x16000
   11620:	ldr	pc, [ip, #2744]!	; 0xab8

00011624 <memset@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #90112	; 0x16000
   1162c:	ldr	pc, [ip, #2736]!	; 0xab0

00011630 <fscanf@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #90112	; 0x16000
   11638:	ldr	pc, [ip, #2728]!	; 0xaa8

0001163c <fgetc@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #90112	; 0x16000
   11644:	ldr	pc, [ip, #2720]!	; 0xaa0

00011648 <__printf_chk@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #90112	; 0x16000
   11650:	ldr	pc, [ip, #2712]!	; 0xa98

00011654 <strtod@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #90112	; 0x16000
   1165c:	ldr	pc, [ip, #2704]!	; 0xa90

00011660 <write@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #90112	; 0x16000
   11668:	ldr	pc, [ip, #2696]!	; 0xa88

0001166c <__sched_cpualloc@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #90112	; 0x16000
   11674:	ldr	pc, [ip, #2688]!	; 0xa80

00011678 <__fprintf_chk@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #90112	; 0x16000
   11680:	ldr	pc, [ip, #2680]!	; 0xa78

00011684 <access@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #90112	; 0x16000
   1168c:	ldr	pc, [ip, #2672]!	; 0xa70

00011690 <fclose@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #90112	; 0x16000
   11698:	ldr	pc, [ip, #2664]!	; 0xa68

0001169c <strtok@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #90112	; 0x16000
   116a4:	ldr	pc, [ip, #2656]!	; 0xa60

000116a8 <setlocale@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #90112	; 0x16000
   116b0:	ldr	pc, [ip, #2648]!	; 0xa58

000116b4 <errx@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #90112	; 0x16000
   116bc:	ldr	pc, [ip, #2640]!	; 0xa50

000116c0 <warn@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #90112	; 0x16000
   116c8:	ldr	pc, [ip, #2632]!	; 0xa48

000116cc <scols_print_table@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #90112	; 0x16000
   116d4:	ldr	pc, [ip, #2624]!	; 0xa40

000116d8 <fputc@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #90112	; 0x16000
   116e0:	ldr	pc, [ip, #2616]!	; 0xa38

000116e4 <sscanf@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #90112	; 0x16000
   116ec:	ldr	pc, [ip, #2608]!	; 0xa30

000116f0 <localeconv@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #90112	; 0x16000
   116f8:	ldr	pc, [ip, #2600]!	; 0xa28

000116fc <readdir64@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #90112	; 0x16000
   11704:	ldr	pc, [ip, #2592]!	; 0xa20

00011708 <__strtoll_internal@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #90112	; 0x16000
   11710:	ldr	pc, [ip, #2584]!	; 0xa18

00011714 <fopen64@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #90112	; 0x16000
   1171c:	ldr	pc, [ip, #2576]!	; 0xa10

00011720 <bindtextdomain@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #90112	; 0x16000
   11728:	ldr	pc, [ip, #2568]!	; 0xa08

0001172c <scandir64@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #90112	; 0x16000
   11734:	ldr	pc, [ip, #2560]!	; 0xa00

00011738 <fputs@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #90112	; 0x16000
   11740:	ldr	pc, [ip, #2552]!	; 0x9f8

00011744 <strncmp@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #90112	; 0x16000
   1174c:	ldr	pc, [ip, #2544]!	; 0x9f0

00011750 <abort@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #90112	; 0x16000
   11758:	ldr	pc, [ip, #2536]!	; 0x9e8

0001175c <close@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #90112	; 0x16000
   11764:	ldr	pc, [ip, #2528]!	; 0x9e0

00011768 <closedir@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #90112	; 0x16000
   11770:	ldr	pc, [ip, #2520]!	; 0x9d8

00011774 <__snprintf_chk@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #90112	; 0x16000
   1177c:	ldr	pc, [ip, #2512]!	; 0x9d0

00011780 <scols_init_debug@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #90112	; 0x16000
   11788:	ldr	pc, [ip, #2504]!	; 0x9c8

0001178c <strspn@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #90112	; 0x16000
   11794:	ldr	pc, [ip, #2496]!	; 0x9c0

00011798 <__assert_fail@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #90112	; 0x16000
   117a0:	ldr	pc, [ip, #2488]!	; 0x9b8

Disassembly of section .text:

000117a8 <.text>:
   117a8:	push	{r3, lr}
   117ac:	movw	r0, #28552	; 0x6f88
   117b0:	movw	r1, #28564	; 0x6f94
   117b4:	movt	r0, #1
   117b8:	movt	r1, #1
   117bc:	mov	r2, #185	; 0xb9
   117c0:	ldr	r3, [pc]	; 117c8 <__assert_fail@plt+0x30>
   117c4:	bl	11798 <__assert_fail@plt>
   117c8:	andeq	r6, r1, r4, asr #23
   117cc:	movw	r1, #28584	; 0x6fa8
   117d0:	mov	r0, #1
   117d4:	push	{r3, lr}
   117d8:	movt	r1, #1
   117dc:	bl	114d4 <err@plt>
   117e0:	mov	r2, #5
   117e4:	movw	r1, #28608	; 0x6fc0
   117e8:	push	{r3, lr}
   117ec:	movt	r1, #1
   117f0:	mov	r0, #0
   117f4:	bl	1148c <dcgettext@plt>
   117f8:	mov	r2, #13
   117fc:	mov	r1, r0
   11800:	mov	r0, #1
   11804:	bl	116b4 <errx@plt>
   11808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1180c:	movw	r6, #33368	; 0x8258
   11810:	movt	r6, #2
   11814:	sub	sp, sp, #108	; 0x6c
   11818:	mov	r3, #0
   1181c:	mov	r5, r1
   11820:	ldr	r2, [r6]
   11824:	mov	r4, r0
   11828:	movw	r1, #29040	; 0x7170
   1182c:	mov	r0, #6
   11830:	movt	r1, #1
   11834:	str	r3, [sp, #92]	; 0x5c
   11838:	mov	ip, #128	; 0x80
   1183c:	mov	r8, r3
   11840:	str	r3, [sp, #48]	; 0x30
   11844:	mov	r9, r3
   11848:	str	r3, [sp, #52]	; 0x34
   1184c:	movw	r7, #33392	; 0x8270
   11850:	str	r3, [sp, #56]	; 0x38
   11854:	movt	r7, #2
   11858:	str	r3, [sp, #60]	; 0x3c
   1185c:	str	r3, [sp, #64]	; 0x40
   11860:	str	r3, [sp, #68]	; 0x44
   11864:	str	r3, [sp, #72]	; 0x48
   11868:	str	r3, [sp, #76]	; 0x4c
   1186c:	str	r3, [sp, #80]	; 0x50
   11870:	str	r3, [sp, #84]	; 0x54
   11874:	str	r3, [sp, #88]	; 0x58
   11878:	str	r3, [sp, #8]
   1187c:	str	r3, [sp, #12]
   11880:	str	r3, [sp, #16]
   11884:	strb	ip, [sp, #92]	; 0x5c
   11888:	str	r2, [sp, #100]	; 0x64
   1188c:	mov	r2, #1
   11890:	strb	r2, [sp, #93]	; 0x5d
   11894:	bl	116a8 <setlocale@plt>
   11898:	movw	r0, #28960	; 0x7120
   1189c:	movw	r1, #28972	; 0x712c
   118a0:	movt	r0, #1
   118a4:	movt	r1, #1
   118a8:	bl	11720 <bindtextdomain@plt>
   118ac:	movw	r0, #28960	; 0x7120
   118b0:	movt	r0, #1
   118b4:	bl	114b0 <textdomain@plt>
   118b8:	movw	r0, #11812	; 0x2e24
   118bc:	movt	r0, #1
   118c0:	bl	16b68 <__assert_fail@plt+0x53d0>
   118c4:	mov	sl, #0
   118c8:	movw	r2, #29992	; 0x7528
   118cc:	str	sl, [sp]
   118d0:	movt	r2, #1
   118d4:	mov	r0, r4
   118d8:	mov	r1, r5
   118dc:	ldr	r3, [pc, #2636]	; 12330 <__assert_fail@plt+0xb98>
   118e0:	bl	1157c <getopt_long@plt>
   118e4:	cmn	r0, #1
   118e8:	beq	11ec0 <__assert_fail@plt+0x728>
   118ec:	cmp	r0, #73	; 0x49
   118f0:	ble	11970 <__assert_fail@plt+0x1d8>
   118f4:	ldr	r1, [pc, #2616]	; 12334 <__assert_fail@plt+0xb9c>
   118f8:	mov	ip, sl
   118fc:	mov	lr, sl
   11900:	add	fp, sp, #8
   11904:	sub	sl, r1, #64	; 0x40
   11908:	mov	r3, #74	; 0x4a
   1190c:	cmp	r0, r3
   11910:	blt	1194c <__assert_fail@plt+0x1b4>
   11914:	movne	r2, sl
   11918:	beq	11934 <__assert_fail@plt+0x19c>
   1191c:	ldr	r3, [r2, #4]!
   11920:	cmp	r3, #0
   11924:	beq	1194c <__assert_fail@plt+0x1b4>
   11928:	cmp	r0, r3
   1192c:	blt	1194c <__assert_fail@plt+0x1b4>
   11930:	bne	1191c <__assert_fail@plt+0x184>
   11934:	ldr	r3, [fp, lr, lsl #2]
   11938:	cmp	r3, #0
   1193c:	streq	r0, [fp, lr, lsl #2]
   11940:	beq	1194c <__assert_fail@plt+0x1b4>
   11944:	cmp	r0, r3
   11948:	bne	12138 <__assert_fail@plt+0x9a0>
   1194c:	ldr	r3, [r1]
   11950:	add	ip, ip, #1
   11954:	mov	sl, r1
   11958:	cmp	r3, #0
   1195c:	mov	lr, ip
   11960:	beq	11970 <__assert_fail@plt+0x1d8>
   11964:	cmp	r0, r3
   11968:	add	r1, r1, #64	; 0x40
   1196c:	bge	1190c <__assert_fail@plt+0x174>
   11970:	sub	r0, r0, #80	; 0x50
   11974:	cmp	r0, #48	; 0x30
   11978:	ldrls	pc, [pc, r0, lsl #2]
   1197c:	b	11e44 <__assert_fail@plt+0x6ac>
   11980:	andeq	r1, r1, r0, lsr lr
   11984:	andeq	r1, r1, r4, asr #28
   11988:	andeq	r1, r1, r4, asr #28
   1198c:	andeq	r1, r1, r8, lsr #28
   11990:	andeq	r1, r1, r4, asr #28
   11994:	andeq	r1, r1, r4, asr #28
   11998:	ldrdeq	r1, [r1], -r8
   1199c:	andeq	r1, r1, r4, asr #28
   119a0:	andeq	r1, r1, r4, asr #28
   119a4:	andeq	r1, r1, r4, asr #28
   119a8:	andeq	r1, r1, r4, asr #28
   119ac:	andeq	r1, r1, r4, asr #28
   119b0:	andeq	r1, r1, r4, asr #28
   119b4:	andeq	r1, r1, r4, asr #28
   119b8:	andeq	r1, r1, r4, asr #28
   119bc:	andeq	r1, r1, r4, asr #28
   119c0:	andeq	r1, r1, r4, asr #28
   119c4:	andeq	r1, r1, r8, asr #27
   119c8:			; <UNDEFINED> instruction: 0x00011db8
   119cc:	andeq	r1, r1, r4, asr #28
   119d0:	andeq	r1, r1, r4, asr #28
   119d4:	andeq	r1, r1, r4, asr #28
   119d8:	andeq	r1, r1, r4, asr #28
   119dc:	andeq	r1, r1, r4, asr #28
   119e0:	strdeq	r1, [r1], -r4
   119e4:	andeq	r1, r1, r4, asr #28
   119e8:	andeq	r1, r1, r4, asr #28
   119ec:	andeq	r1, r1, r4, asr #28
   119f0:	andeq	r1, r1, r4, asr #28
   119f4:	andeq	r1, r1, r4, asr #28
   119f8:	andeq	r1, r1, r4, ror #21
   119fc:	ldrdeq	r1, [r1], -ip
   11a00:	andeq	r1, r1, r4, asr #28
   11a04:	andeq	r1, r1, r4, asr #28
   11a08:	andeq	r1, r1, r8, asr #21
   11a0c:	muleq	r1, r0, sl
   11a10:	andeq	r1, r1, r4, asr #28
   11a14:	andeq	r1, r1, r4, asr #28
   11a18:	andeq	r1, r1, r4, asr #28
   11a1c:	andeq	r1, r1, r4, asr #28
   11a20:	andeq	r1, r1, r4, asr #28
   11a24:	andeq	r1, r1, r4, asr #28
   11a28:	andeq	r1, r1, r4, asr #28
   11a2c:	andeq	r1, r1, r4, asr #28
   11a30:	andeq	r1, r1, r4, asr #28
   11a34:	andeq	r1, r1, r4, asr #28
   11a38:	andeq	r1, r1, r4, asr #28
   11a3c:	andeq	r1, r1, r4, asr #28
   11a40:	andeq	r1, r1, r4, asr #20
   11a44:	ldr	sl, [r7]
   11a48:	cmp	sl, #0
   11a4c:	beq	12114 <__assert_fail@plt+0x97c>
   11a50:	movw	r1, #29896	; 0x74c8
   11a54:	mov	r0, sl
   11a58:	movt	r1, #1
   11a5c:	bl	113d8 <strcmp@plt>
   11a60:	cmp	r0, #0
   11a64:	beq	11e88 <__assert_fail@plt+0x6f0>
   11a68:	movw	r1, #29904	; 0x74d0
   11a6c:	mov	r0, sl
   11a70:	movt	r1, #1
   11a74:	bl	113d8 <strcmp@plt>
   11a78:	cmp	r0, #0
   11a7c:	bne	11e98 <__assert_fail@plt+0x700>
   11a80:	ldrb	r3, [sp, #93]	; 0x5d
   11a84:	bfi	r3, r0, #0, #1
   11a88:	strb	r3, [sp, #93]	; 0x5d
   11a8c:	b	118c4 <__assert_fail@plt+0x12c>
   11a90:	ldr	r0, [r7]
   11a94:	bl	13718 <__assert_fail@plt+0x1f80>
   11a98:	cmp	r0, #0
   11a9c:	beq	118c4 <__assert_fail@plt+0x12c>
   11aa0:	mov	r2, #5
   11aa4:	movw	r1, #29828	; 0x7484
   11aa8:	mov	r0, #0
   11aac:	movt	r1, #1
   11ab0:	bl	1148c <dcgettext@plt>
   11ab4:	movw	r2, #29852	; 0x749c
   11ab8:	movt	r2, #1
   11abc:	mov	r1, r0
   11ac0:	mov	r0, #1
   11ac4:	bl	114d4 <err@plt>
   11ac8:	ldrb	r3, [sp, #92]	; 0x5c
   11acc:	orr	r3, r3, #2
   11ad0:	bfc	r3, #7, #1
   11ad4:	strb	r3, [sp, #92]	; 0x5c
   11ad8:	b	118c4 <__assert_fail@plt+0x12c>
   11adc:	ldr	r9, [r7]
   11ae0:	b	118c4 <__assert_fail@plt+0x12c>
   11ae4:	ldrb	r3, [sp, #92]	; 0x5c
   11ae8:	orr	r3, r3, #8
   11aec:	strb	r3, [sp, #92]	; 0x5c
   11af0:	b	118c4 <__assert_fail@plt+0x12c>
   11af4:	movw	r3, #33384	; 0x8268
   11af8:	movt	r3, #2
   11afc:	mov	r2, #5
   11b00:	movw	r1, #29032	; 0x7168
   11b04:	ldr	r5, [r3]
   11b08:	movt	r1, #1
   11b0c:	mov	r0, #0
   11b10:	movw	r4, #33136	; 0x8170
   11b14:	bl	1148c <dcgettext@plt>
   11b18:	movt	r4, #2
   11b1c:	mov	r1, r5
   11b20:	add	r7, r4, #224	; 0xe0
   11b24:	bl	11738 <fputs@plt>
   11b28:	mov	r2, #5
   11b2c:	movw	r1, #29044	; 0x7174
   11b30:	mov	r0, #0
   11b34:	movt	r1, #1
   11b38:	bl	1148c <dcgettext@plt>
   11b3c:	movw	r3, #33360	; 0x8250
   11b40:	movt	r3, #2
   11b44:	mov	r1, #1
   11b48:	ldr	r3, [r3]
   11b4c:	mov	r2, r0
   11b50:	mov	r0, r5
   11b54:	bl	11678 <__fprintf_chk@plt>
   11b58:	mov	r2, #5
   11b5c:	movw	r1, #28464	; 0x6f30
   11b60:	mov	r0, #0
   11b64:	movt	r1, #1
   11b68:	bl	1148c <dcgettext@plt>
   11b6c:	mov	r1, r5
   11b70:	bl	11738 <fputs@plt>
   11b74:	mov	r2, #5
   11b78:	movw	r1, #29060	; 0x7184
   11b7c:	mov	r0, #0
   11b80:	movt	r1, #1
   11b84:	bl	1148c <dcgettext@plt>
   11b88:	mov	r1, r5
   11b8c:	bl	11738 <fputs@plt>
   11b90:	mov	r2, #5
   11b94:	movw	r1, #29124	; 0x71c4
   11b98:	mov	r0, #0
   11b9c:	movt	r1, #1
   11ba0:	bl	1148c <dcgettext@plt>
   11ba4:	mov	r1, r5
   11ba8:	bl	11738 <fputs@plt>
   11bac:	mov	r2, #5
   11bb0:	movw	r1, #29136	; 0x71d0
   11bb4:	mov	r0, #0
   11bb8:	movt	r1, #1
   11bbc:	bl	1148c <dcgettext@plt>
   11bc0:	mov	r1, r5
   11bc4:	bl	11738 <fputs@plt>
   11bc8:	mov	r2, #5
   11bcc:	movw	r1, #29192	; 0x7208
   11bd0:	mov	r0, #0
   11bd4:	movt	r1, #1
   11bd8:	bl	1148c <dcgettext@plt>
   11bdc:	mov	r1, r5
   11be0:	bl	11738 <fputs@plt>
   11be4:	mov	r2, #5
   11be8:	movw	r1, #29252	; 0x7244
   11bec:	mov	r0, #0
   11bf0:	movt	r1, #1
   11bf4:	bl	1148c <dcgettext@plt>
   11bf8:	mov	r1, r5
   11bfc:	bl	11738 <fputs@plt>
   11c00:	mov	r2, #5
   11c04:	movw	r1, #29332	; 0x7294
   11c08:	mov	r0, #0
   11c0c:	movt	r1, #1
   11c10:	bl	1148c <dcgettext@plt>
   11c14:	mov	r1, r5
   11c18:	bl	11738 <fputs@plt>
   11c1c:	mov	r2, #5
   11c20:	movw	r1, #29376	; 0x72c0
   11c24:	mov	r0, #0
   11c28:	movt	r1, #1
   11c2c:	bl	1148c <dcgettext@plt>
   11c30:	mov	r1, r5
   11c34:	bl	11738 <fputs@plt>
   11c38:	mov	r2, #5
   11c3c:	movw	r1, #29416	; 0x72e8
   11c40:	mov	r0, #0
   11c44:	movt	r1, #1
   11c48:	bl	1148c <dcgettext@plt>
   11c4c:	mov	r1, r5
   11c50:	bl	11738 <fputs@plt>
   11c54:	mov	r2, #5
   11c58:	movw	r1, #29464	; 0x7318
   11c5c:	mov	r0, #0
   11c60:	movt	r1, #1
   11c64:	bl	1148c <dcgettext@plt>
   11c68:	mov	r1, r5
   11c6c:	bl	11738 <fputs@plt>
   11c70:	mov	r2, #5
   11c74:	movw	r1, #29524	; 0x7354
   11c78:	mov	r0, #0
   11c7c:	movt	r1, #1
   11c80:	bl	1148c <dcgettext@plt>
   11c84:	mov	r1, r5
   11c88:	bl	11738 <fputs@plt>
   11c8c:	mov	r2, #5
   11c90:	movw	r1, #29592	; 0x7398
   11c94:	mov	r0, #0
   11c98:	movt	r1, #1
   11c9c:	bl	1148c <dcgettext@plt>
   11ca0:	mov	r1, r5
   11ca4:	bl	11738 <fputs@plt>
   11ca8:	mov	r2, #5
   11cac:	movw	r1, #28464	; 0x6f30
   11cb0:	mov	r0, #0
   11cb4:	movt	r1, #1
   11cb8:	bl	1148c <dcgettext@plt>
   11cbc:	mov	r1, r5
   11cc0:	bl	11738 <fputs@plt>
   11cc4:	mov	r2, #5
   11cc8:	movw	r1, #29664	; 0x73e0
   11ccc:	mov	r0, #0
   11cd0:	movt	r1, #1
   11cd4:	bl	1148c <dcgettext@plt>
   11cd8:	mov	r2, #5
   11cdc:	movw	r1, #29684	; 0x73f4
   11ce0:	movt	r1, #1
   11ce4:	mov	r6, r0
   11ce8:	mov	r0, #0
   11cec:	bl	1148c <dcgettext@plt>
   11cf0:	mov	r3, r6
   11cf4:	movw	r2, #29732	; 0x7424
   11cf8:	movw	r1, #29700	; 0x7404
   11cfc:	movt	r2, #1
   11d00:	movt	r1, #1
   11d04:	str	r2, [sp]
   11d08:	movw	r2, #29720	; 0x7418
   11d0c:	movt	r2, #1
   11d10:	str	r0, [sp, #4]
   11d14:	mov	r0, #1
   11d18:	bl	11648 <__printf_chk@plt>
   11d1c:	movw	r1, #29748	; 0x7434
   11d20:	mov	r0, #0
   11d24:	movt	r1, #1
   11d28:	mov	r2, #5
   11d2c:	bl	1148c <dcgettext@plt>
   11d30:	mov	r1, r5
   11d34:	bl	11738 <fputs@plt>
   11d38:	ldr	r1, [r4, #20]
   11d3c:	mov	r2, #5
   11d40:	mov	r0, #0
   11d44:	ldr	r6, [r4]
   11d48:	bl	1148c <dcgettext@plt>
   11d4c:	add	r4, r4, #32
   11d50:	movw	r2, #29776	; 0x7450
   11d54:	mov	r1, #1
   11d58:	mov	r3, r6
   11d5c:	movt	r2, #1
   11d60:	str	r0, [sp]
   11d64:	mov	r0, r5
   11d68:	bl	11678 <__fprintf_chk@plt>
   11d6c:	cmp	r4, r7
   11d70:	bne	11d38 <__assert_fail@plt+0x5a0>
   11d74:	mov	r2, #5
   11d78:	movw	r1, #29788	; 0x745c
   11d7c:	mov	r0, #0
   11d80:	movt	r1, #1
   11d84:	bl	1148c <dcgettext@plt>
   11d88:	movw	r2, #29816	; 0x7478
   11d8c:	movt	r2, #1
   11d90:	mov	r1, r0
   11d94:	mov	r0, #1
   11d98:	bl	11648 <__printf_chk@plt>
   11d9c:	movw	r3, #33380	; 0x8264
   11da0:	movt	r3, #2
   11da4:	ldr	r0, [r3]
   11da8:	subs	r3, r5, r0
   11dac:	rsbs	r0, r3, #0
   11db0:	adcs	r0, r0, r3
   11db4:	bl	11594 <exit@plt>
   11db8:	ldrb	r3, [sp, #92]	; 0x5c
   11dbc:	orr	r3, r3, #64	; 0x40
   11dc0:	strb	r3, [sp, #92]	; 0x5c
   11dc4:	b	118c4 <__assert_fail@plt+0x12c>
   11dc8:	ldrb	r3, [sp, #92]	; 0x5c
   11dcc:	orr	r3, r3, #32
   11dd0:	strb	r3, [sp, #92]	; 0x5c
   11dd4:	b	118c4 <__assert_fail@plt+0x12c>
   11dd8:	mov	r2, #5
   11ddc:	movw	r1, #29864	; 0x74a8
   11de0:	mov	r0, #0
   11de4:	movt	r1, #1
   11de8:	bl	1148c <dcgettext@plt>
   11dec:	movw	r2, #33360	; 0x8250
   11df0:	movt	r2, #2
   11df4:	movw	r3, #29876	; 0x74b4
   11df8:	movt	r3, #1
   11dfc:	ldr	r2, [r2]
   11e00:	mov	r1, r0
   11e04:	mov	r0, #1
   11e08:	bl	11648 <__printf_chk@plt>
   11e0c:	mov	r0, #0
   11e10:	ldr	r2, [sp, #100]	; 0x64
   11e14:	ldr	r3, [r6]
   11e18:	cmp	r2, r3
   11e1c:	bne	122a4 <__assert_fail@plt+0xb0c>
   11e20:	add	sp, sp, #108	; 0x6c
   11e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e28:	ldr	r8, [r7]
   11e2c:	b	118c4 <__assert_fail@plt+0x12c>
   11e30:	ldrb	r3, [sp, #92]	; 0x5c
   11e34:	orr	r3, r3, #4
   11e38:	bfc	r3, #7, #1
   11e3c:	strb	r3, [sp, #92]	; 0x5c
   11e40:	b	118c4 <__assert_fail@plt+0x12c>
   11e44:	movw	r3, #33380	; 0x8264
   11e48:	movt	r3, #2
   11e4c:	movw	r1, #29952	; 0x7500
   11e50:	movt	r1, #1
   11e54:	ldr	r4, [r3]
   11e58:	mov	r0, #0
   11e5c:	mov	r2, #5
   11e60:	bl	1148c <dcgettext@plt>
   11e64:	movw	r3, #33360	; 0x8250
   11e68:	movt	r3, #2
   11e6c:	mov	r1, #1
   11e70:	ldr	r3, [r3]
   11e74:	mov	r2, r0
   11e78:	mov	r0, r4
   11e7c:	bl	11678 <__fprintf_chk@plt>
   11e80:	mov	r0, #1
   11e84:	bl	11594 <exit@plt>
   11e88:	ldrb	r3, [sp, #92]	; 0x5c
   11e8c:	bfi	r3, r0, #7, #1
   11e90:	strb	r3, [sp, #92]	; 0x5c
   11e94:	b	118c4 <__assert_fail@plt+0x12c>
   11e98:	mov	r0, sl
   11e9c:	movw	r1, #29912	; 0x74d8
   11ea0:	movt	r1, #1
   11ea4:	bl	113d8 <strcmp@plt>
   11ea8:	cmp	r0, #0
   11eac:	bne	122a8 <__assert_fail@plt+0xb10>
   11eb0:	ldrb	r3, [sp, #92]	; 0x5c
   11eb4:	orr	r3, r3, #128	; 0x80
   11eb8:	strb	r3, [sp, #92]	; 0x5c
   11ebc:	b	118c4 <__assert_fail@plt+0x12c>
   11ec0:	movw	r3, #33376	; 0x8260
   11ec4:	movt	r3, #2
   11ec8:	ldr	r3, [r3]
   11ecc:	cmp	r4, r3
   11ed0:	bne	1224c <__assert_fail@plt+0xab4>
   11ed4:	ldrb	r3, [sp, #93]	; 0x5d
   11ed8:	ldrb	r2, [sp, #92]	; 0x5c
   11edc:	and	r3, r3, #1
   11ee0:	adds	r0, r3, r2, lsr #7
   11ee4:	beq	12230 <__assert_fail@plt+0xa98>
   11ee8:	ldrh	r3, [sp, #92]	; 0x5c
   11eec:	and	r3, r3, #384	; 0x180
   11ef0:	cmp	r3, #128	; 0x80
   11ef4:	beq	12284 <__assert_fail@plt+0xaec>
   11ef8:	movw	r5, #33400	; 0x8278
   11efc:	movt	r5, #2
   11f00:	ldr	r3, [r5]
   11f04:	cmp	r3, #0
   11f08:	bne	11f38 <__assert_fail@plt+0x7a0>
   11f0c:	mov	r2, #1
   11f10:	str	r3, [r5, #4]
   11f14:	str	r2, [r5, #8]
   11f18:	mov	r3, #2
   11f1c:	mov	r2, #3
   11f20:	str	r3, [r5, #12]
   11f24:	str	r2, [r5, #16]
   11f28:	mov	r3, #5
   11f2c:	str	r3, [r5]
   11f30:	mov	r3, #4
   11f34:	str	r3, [r5, #20]
   11f38:	cmp	r9, #0
   11f3c:	beq	11f6c <__assert_fail@plt+0x7d4>
   11f40:	movw	r3, #33400	; 0x8278
   11f44:	movt	r3, #2
   11f48:	mov	r0, r9
   11f4c:	movw	r2, #9476	; 0x2504
   11f50:	add	r1, r3, #4
   11f54:	movt	r2, #1
   11f58:	str	r2, [sp]
   11f5c:	mov	r2, #14
   11f60:	bl	14eb4 <__assert_fail@plt+0x371c>
   11f64:	cmp	r0, #0
   11f68:	blt	12130 <__assert_fail@plt+0x998>
   11f6c:	mov	r0, #0
   11f70:	bl	11780 <scols_init_debug@plt>
   11f74:	bl	114ec <scols_new_table@plt>
   11f78:	cmp	r0, #0
   11f7c:	str	r0, [sp, #88]	; 0x58
   11f80:	beq	12314 <__assert_fail@plt+0xb7c>
   11f84:	ldrb	r1, [sp, #92]	; 0x5c
   11f88:	movw	r9, #33400	; 0x8278
   11f8c:	movt	r9, #2
   11f90:	ubfx	r1, r1, #1, #1
   11f94:	bl	1142c <scols_table_enable_raw@plt>
   11f98:	ldrb	r1, [sp, #92]	; 0x5c
   11f9c:	ldr	r0, [sp, #88]	; 0x58
   11fa0:	ubfx	r1, r1, #2, #1
   11fa4:	bl	11504 <scols_table_enable_export@plt>
   11fa8:	ldrb	r1, [sp, #92]	; 0x5c
   11fac:	ldr	r0, [sp, #88]	; 0x58
   11fb0:	ubfx	r1, r1, #3, #1
   11fb4:	bl	113fc <scols_table_enable_noheadings@plt>
   11fb8:	ldr	r2, [r5]
   11fbc:	cmp	r2, #0
   11fc0:	ble	12020 <__assert_fail@plt+0x888>
   11fc4:	ldr	r3, [r9, #4]
   11fc8:	cmp	r3, #6
   11fcc:	bgt	122f8 <__assert_fail@plt+0xb60>
   11fd0:	movw	r7, #33136	; 0x8170
   11fd4:	add	r9, r9, #4
   11fd8:	movt	r7, #2
   11fdc:	mov	r4, #0
   11fe0:	b	11ff0 <__assert_fail@plt+0x858>
   11fe4:	ldr	r3, [r9, #4]!
   11fe8:	cmp	r3, #6
   11fec:	bgt	122f8 <__assert_fail@plt+0xb60>
   11ff0:	add	r2, r7, r3, lsl #5
   11ff4:	ldr	r1, [r7, r3, lsl #5]
   11ff8:	vldr	d0, [r2, #8]
   11ffc:	ldr	r0, [sp, #88]	; 0x58
   12000:	ldr	r2, [r2, #16]
   12004:	bl	11408 <scols_table_new_column@plt>
   12008:	cmp	r0, #0
   1200c:	beq	122dc <__assert_fail@plt+0xb44>
   12010:	ldr	r2, [r5]
   12014:	add	r4, r4, #1
   12018:	cmp	r2, r4
   1201c:	bgt	11fe4 <__assert_fail@plt+0x84c>
   12020:	cmp	r8, #0
   12024:	beq	122c8 <__assert_fail@plt+0xb30>
   12028:	mov	r1, #0
   1202c:	mov	r2, #28
   12030:	add	r0, sp, #20
   12034:	bl	11624 <memset@plt>
   12038:	mov	r0, r8
   1203c:	movw	r1, #30156	; 0x75cc
   12040:	movt	r1, #1
   12044:	bl	114bc <strcasecmp@plt>
   12048:	cmp	r0, #0
   1204c:	beq	12078 <__assert_fail@plt+0x8e0>
   12050:	mov	r0, r8
   12054:	movw	r3, #9476	; 0x2504
   12058:	add	r1, sp, #20
   1205c:	movt	r3, #1
   12060:	mov	r2, #7
   12064:	str	r3, [sp]
   12068:	ldr	r3, [pc, #712]	; 12338 <__assert_fail@plt+0xba0>
   1206c:	bl	14eb4 <__assert_fail@plt+0x371c>
   12070:	cmp	r0, #0
   12074:	blt	12130 <__assert_fail@plt+0x998>
   12078:	add	r4, sp, #48	; 0x30
   1207c:	add	r1, sp, #20
   12080:	ldr	r2, [r5, #60]	; 0x3c
   12084:	mov	r0, r4
   12088:	bl	12478 <__assert_fail@plt+0xce0>
   1208c:	mov	r0, r4
   12090:	bl	12684 <__assert_fail@plt+0xeec>
   12094:	mov	r0, r4
   12098:	bl	12768 <__assert_fail@plt+0xfd0>
   1209c:	ldrb	r3, [sp, #93]	; 0x5d
   120a0:	tst	r3, #1
   120a4:	movne	r5, #0
   120a8:	bne	120dc <__assert_fail@plt+0x944>
   120ac:	ldrb	r3, [sp, #92]	; 0x5c
   120b0:	lsrs	r3, r3, #7
   120b4:	bne	12124 <__assert_fail@plt+0x98c>
   120b8:	ldr	r0, [sp, #88]	; 0x58
   120bc:	bl	11558 <scols_unref_table@plt>
   120c0:	mov	r0, #0
   120c4:	b	11e10 <__assert_fail@plt+0x678>
   120c8:	ldr	r1, [sp, #56]	; 0x38
   120cc:	mov	r0, r4
   120d0:	add	r1, r1, r5, lsl #6
   120d4:	add	r5, r5, #1
   120d8:	bl	12f60 <__assert_fail@plt+0x17c8>
   120dc:	ldr	r3, [sp, #60]	; 0x3c
   120e0:	cmp	r5, r3
   120e4:	blt	120c8 <__assert_fail@plt+0x930>
   120e8:	ldr	r0, [sp, #88]	; 0x58
   120ec:	bl	116cc <scols_print_table@plt>
   120f0:	ldrb	r3, [sp, #92]	; 0x5c
   120f4:	lsrs	r3, r3, #7
   120f8:	beq	120b8 <__assert_fail@plt+0x920>
   120fc:	movw	r3, #33384	; 0x8268
   12100:	movt	r3, #2
   12104:	mov	r0, #10
   12108:	ldr	r1, [r3]
   1210c:	bl	116d8 <fputc@plt>
   12110:	b	120ac <__assert_fail@plt+0x914>
   12114:	ldrb	r3, [sp, #93]	; 0x5d
   12118:	bfi	r3, sl, #0, #1
   1211c:	strb	r3, [sp, #93]	; 0x5d
   12120:	b	118c4 <__assert_fail@plt+0x12c>
   12124:	mov	r0, r4
   12128:	bl	12c48 <__assert_fail@plt+0x14b0>
   1212c:	b	120b8 <__assert_fail@plt+0x920>
   12130:	mov	r0, #1
   12134:	b	11e10 <__assert_fail@plt+0x678>
   12138:	movw	r4, #33380	; 0x8264
   1213c:	movt	r4, #2
   12140:	mov	r0, #0
   12144:	mov	r2, #5
   12148:	movw	r1, #28992	; 0x7140
   1214c:	movt	r1, #1
   12150:	ldr	r6, [r4]
   12154:	mov	r5, r0
   12158:	bl	1148c <dcgettext@plt>
   1215c:	movw	r3, #33360	; 0x8250
   12160:	movt	r3, #2
   12164:	mov	r1, #1
   12168:	ldr	r3, [r3]
   1216c:	mov	r2, r0
   12170:	mov	r0, r6
   12174:	bl	11678 <__fprintf_chk@plt>
   12178:	ldr	r1, [sl, r5]
   1217c:	cmp	r1, #0
   12180:	beq	121d4 <__assert_fail@plt+0xa3c>
   12184:	cmp	r1, #97	; 0x61
   12188:	beq	12210 <__assert_fail@plt+0xa78>
   1218c:	ldr	r2, [pc, #412]	; 12330 <__assert_fail@plt+0xb98>
   12190:	b	121a4 <__assert_fail@plt+0xa0c>
   12194:	add	r2, r2, #16
   12198:	ldr	r0, [r2, #12]
   1219c:	cmp	r0, r1
   121a0:	beq	12218 <__assert_fail@plt+0xa80>
   121a4:	ldr	r3, [r2, #16]
   121a8:	cmp	r3, #0
   121ac:	bne	12194 <__assert_fail@plt+0x9fc>
   121b0:	mov	r3, r1
   121b4:	movw	r2, #30164	; 0x75d4
   121b8:	ldr	r0, [r4]
   121bc:	movt	r2, #1
   121c0:	mov	r1, #1
   121c4:	bl	11678 <__fprintf_chk@plt>
   121c8:	add	r5, r5, #4
   121cc:	cmp	r5, #60	; 0x3c
   121d0:	bne	12178 <__assert_fail@plt+0x9e0>
   121d4:	mov	r2, #5
   121d8:	movw	r1, #29008	; 0x7150
   121dc:	mov	r0, #0
   121e0:	movt	r1, #1
   121e4:	ldr	r5, [r4]
   121e8:	bl	1148c <dcgettext@plt>
   121ec:	mov	r1, #1
   121f0:	mov	r2, r0
   121f4:	mov	r0, r5
   121f8:	bl	11678 <__fprintf_chk@plt>
   121fc:	ldr	r1, [r4]
   12200:	mov	r0, #10
   12204:	bl	116d8 <fputc@plt>
   12208:	mov	r0, #1
   1220c:	bl	11594 <exit@plt>
   12210:	movw	r3, #28956	; 0x711c
   12214:	movt	r3, #1
   12218:	movw	r2, #30172	; 0x75dc
   1221c:	ldr	r0, [r4]
   12220:	movt	r2, #1
   12224:	mov	r1, #1
   12228:	bl	11678 <__fprintf_chk@plt>
   1222c:	b	121c8 <__assert_fail@plt+0xa30>
   12230:	movw	r1, #30020	; 0x7544
   12234:	mov	r2, #5
   12238:	movt	r1, #1
   1223c:	bl	1148c <dcgettext@plt>
   12240:	mov	r1, r0
   12244:	mov	r0, #1
   12248:	bl	116b4 <errx@plt>
   1224c:	mov	r2, #5
   12250:	movw	r1, #30008	; 0x7538
   12254:	mov	r0, sl
   12258:	movt	r1, #1
   1225c:	bl	1148c <dcgettext@plt>
   12260:	bl	115d0 <warnx@plt>
   12264:	movw	r3, #33380	; 0x8264
   12268:	movt	r3, #2
   1226c:	movw	r1, #29952	; 0x7500
   12270:	mov	r0, sl
   12274:	mov	r2, #5
   12278:	ldr	r4, [r3]
   1227c:	movt	r1, #1
   12280:	b	11e60 <__assert_fail@plt+0x6c8>
   12284:	add	r0, sp, #48	; 0x30
   12288:	bl	12684 <__assert_fail@plt+0xeec>
   1228c:	add	r0, sp, #48	; 0x30
   12290:	bl	12768 <__assert_fail@plt+0xfd0>
   12294:	add	r0, sp, #48	; 0x30
   12298:	bl	12c48 <__assert_fail@plt+0x14b0>
   1229c:	mov	r0, sl
   122a0:	b	11e10 <__assert_fail@plt+0x678>
   122a4:	bl	11498 <__stack_chk_fail@plt>
   122a8:	movw	r1, #29920	; 0x74e0
   122ac:	mov	r0, #0
   122b0:	movt	r1, #1
   122b4:	mov	r2, #5
   122b8:	bl	1148c <dcgettext@plt>
   122bc:	mov	r1, r0
   122c0:	mov	r0, #1
   122c4:	bl	116b4 <errx@plt>
   122c8:	add	r4, sp, #48	; 0x30
   122cc:	ldr	r1, [pc, #104]	; 1233c <__assert_fail@plt+0xba4>
   122d0:	mov	r0, r4
   122d4:	bl	12478 <__assert_fail@plt+0xce0>
   122d8:	b	1208c <__assert_fail@plt+0x8f4>
   122dc:	movw	r1, #30120	; 0x75a8
   122e0:	mov	r2, #5
   122e4:	movt	r1, #1
   122e8:	bl	1148c <dcgettext@plt>
   122ec:	mov	r1, r0
   122f0:	mov	r0, #1
   122f4:	bl	114d4 <err@plt>
   122f8:	movw	r0, #28680	; 0x7008
   122fc:	movw	r1, #28564	; 0x6f94
   12300:	movt	r0, #1
   12304:	movt	r1, #1
   12308:	mov	r2, #187	; 0xbb
   1230c:	ldr	r3, [pc, #44]	; 12340 <__assert_fail@plt+0xba8>
   12310:	bl	11798 <__assert_fail@plt>
   12314:	movw	r1, #30084	; 0x7584
   12318:	mov	r2, #5
   1231c:	movt	r1, #1
   12320:	bl	1148c <dcgettext@plt>
   12324:	mov	r1, r0
   12328:	mov	r0, #1
   1232c:	bl	116b4 <errx@plt>
   12330:	muleq	r1, r4, ip
   12334:	andeq	r6, r1, r4, lsl ip
   12338:			; <UNDEFINED> instruction: 0x000282b4
   1233c:	andeq	r8, r2, ip, ror r2
   12340:	andeq	r6, r1, r4, asr #23
   12344:	mov	fp, #0
   12348:	mov	lr, #0
   1234c:	pop	{r1}		; (ldr r1, [sp], #4)
   12350:	mov	r2, sp
   12354:	push	{r2}		; (str r2, [sp, #-4]!)
   12358:	push	{r0}		; (str r0, [sp, #-4]!)
   1235c:	ldr	ip, [pc, #16]	; 12374 <__assert_fail@plt+0xbdc>
   12360:	push	{ip}		; (str ip, [sp, #-4]!)
   12364:	ldr	r0, [pc, #12]	; 12378 <__assert_fail@plt+0xbe0>
   12368:	ldr	r3, [pc, #12]	; 1237c <__assert_fail@plt+0xbe4>
   1236c:	bl	11540 <__libc_start_main@plt>
   12370:	bl	11750 <abort@plt>
   12374:	andeq	r6, r1, r4, ror #22
   12378:	andeq	r1, r1, r8, lsl #16
   1237c:	andeq	r6, r1, r0, lsl #22
   12380:	ldr	r3, [pc, #20]	; 1239c <__assert_fail@plt+0xc04>
   12384:	ldr	r2, [pc, #20]	; 123a0 <__assert_fail@plt+0xc08>
   12388:	add	r3, pc, r3
   1238c:	ldr	r2, [r3, r2]
   12390:	cmp	r2, #0
   12394:	bxeq	lr
   12398:	b	11570 <__gmon_start__@plt>
   1239c:	andeq	r5, r1, r0, ror ip
   123a0:	andeq	r0, r0, r0, ror #2
   123a4:	push	{r3, lr}
   123a8:	movw	r0, #33360	; 0x8250
   123ac:	ldr	r3, [pc, #36]	; 123d8 <__assert_fail@plt+0xc40>
   123b0:	movt	r0, #2
   123b4:	rsb	r3, r0, r3
   123b8:	cmp	r3, #6
   123bc:	popls	{r3, pc}
   123c0:	movw	r3, #0
   123c4:	movt	r3, #0
   123c8:	cmp	r3, #0
   123cc:	popeq	{r3, pc}
   123d0:	blx	r3
   123d4:	pop	{r3, pc}
   123d8:	andeq	r8, r2, r3, asr r2
   123dc:	push	{r3, lr}
   123e0:	movw	r0, #33360	; 0x8250
   123e4:	movw	r3, #33360	; 0x8250
   123e8:	movt	r0, #2
   123ec:	movt	r3, #2
   123f0:	rsb	r3, r0, r3
   123f4:	asr	r3, r3, #2
   123f8:	add	r3, r3, r3, lsr #31
   123fc:	asrs	r1, r3, #1
   12400:	popeq	{r3, pc}
   12404:	movw	r2, #0
   12408:	movt	r2, #0
   1240c:	cmp	r2, #0
   12410:	popeq	{r3, pc}
   12414:	blx	r2
   12418:	pop	{r3, pc}
   1241c:	push	{r4, lr}
   12420:	movw	r4, #33396	; 0x8274
   12424:	movt	r4, #2
   12428:	ldrb	r3, [r4]
   1242c:	cmp	r3, #0
   12430:	popne	{r4, pc}
   12434:	bl	123a4 <__assert_fail@plt+0xc0c>
   12438:	mov	r3, #1
   1243c:	strb	r3, [r4]
   12440:	pop	{r4, pc}
   12444:	movw	r0, #32508	; 0x7efc
   12448:	movt	r0, #2
   1244c:	push	{r3, lr}
   12450:	ldr	r3, [r0]
   12454:	cmp	r3, #0
   12458:	beq	12470 <__assert_fail@plt+0xcd8>
   1245c:	movw	r3, #0
   12460:	movt	r3, #0
   12464:	cmp	r3, #0
   12468:	beq	12470 <__assert_fail@plt+0xcd8>
   1246c:	blx	r3
   12470:	pop	{r3, lr}
   12474:	b	123dc <__assert_fail@plt+0xc44>
   12478:	ldrb	r3, [r0, #45]	; 0x2d
   1247c:	cmp	r2, #0
   12480:	and	r3, r3, #241	; 0xf1
   12484:	bfc	r3, #4, #1
   12488:	strb	r3, [r0, #45]	; 0x2d
   1248c:	bxeq	lr
   12490:	add	r2, r1, r2, lsl #2
   12494:	ldr	r3, [r1], #4
   12498:	sub	r3, r3, #2
   1249c:	cmp	r3, #4
   124a0:	ldrls	pc, [pc, r3, lsl #2]
   124a4:	b	124c8 <__assert_fail@plt+0xd30>
   124a8:	andeq	r2, r1, r4, ror #9
   124ac:	strdeq	r2, [r1], -r4
   124b0:	andeq	r2, r1, r8, asr #9
   124b4:	ldrdeq	r2, [r1], -r4
   124b8:			; <UNDEFINED> instruction: 0x000124bc
   124bc:	ldrb	r3, [r0, #45]	; 0x2d
   124c0:	orr	r3, r3, #16
   124c4:	strb	r3, [r0, #45]	; 0x2d
   124c8:	cmp	r1, r2
   124cc:	bne	12494 <__assert_fail@plt+0xcfc>
   124d0:	bx	lr
   124d4:	ldrb	r3, [r0, #45]	; 0x2d
   124d8:	orr	r3, r3, #2
   124dc:	strb	r3, [r0, #45]	; 0x2d
   124e0:	b	124c8 <__assert_fail@plt+0xd30>
   124e4:	ldrb	r3, [r0, #45]	; 0x2d
   124e8:	orr	r3, r3, #4
   124ec:	strb	r3, [r0, #45]	; 0x2d
   124f0:	b	124c8 <__assert_fail@plt+0xd30>
   124f4:	ldrb	r3, [r0, #45]	; 0x2d
   124f8:	orr	r3, r3, #8
   124fc:	strb	r3, [r0, #45]	; 0x2d
   12500:	b	124c8 <__assert_fail@plt+0xd30>
   12504:	push	{r4, r5, r6, r7, r8, lr}
   12508:	movw	r7, #33136	; 0x8170
   1250c:	movt	r7, #2
   12510:	mov	r8, r0
   12514:	mov	r6, r1
   12518:	mov	r4, #0
   1251c:	ldr	r5, [r7, r4, lsl #5]
   12520:	mov	r0, r8
   12524:	mov	r2, r6
   12528:	mov	r1, r5
   1252c:	bl	115e8 <strncasecmp@plt>
   12530:	cmp	r0, #0
   12534:	bne	12544 <__assert_fail@plt+0xdac>
   12538:	ldrsb	r3, [r5, r6]
   1253c:	cmp	r3, #0
   12540:	beq	12574 <__assert_fail@plt+0xddc>
   12544:	add	r4, r4, #1
   12548:	cmp	r4, #7
   1254c:	bne	1251c <__assert_fail@plt+0xd84>
   12550:	mov	r2, #5
   12554:	movw	r1, #27988	; 0x6d54
   12558:	mov	r0, #0
   1255c:	movt	r1, #1
   12560:	bl	1148c <dcgettext@plt>
   12564:	mov	r1, r8
   12568:	bl	115d0 <warnx@plt>
   1256c:	mvn	r0, #0
   12570:	pop	{r4, r5, r6, r7, r8, pc}
   12574:	mov	r0, r4
   12578:	pop	{r4, r5, r6, r7, r8, pc}
   1257c:	push	{r4, lr}
   12580:	add	r1, r0, #19
   12584:	mov	r4, r0
   12588:	mov	r2, #6
   1258c:	movw	r0, #28880	; 0x70d0
   12590:	movt	r0, #1
   12594:	bl	11744 <strncmp@plt>
   12598:	cmp	r0, #0
   1259c:	beq	125a8 <__assert_fail@plt+0xe10>
   125a0:	mov	r0, #0
   125a4:	pop	{r4, pc}
   125a8:	add	r0, r4, #25
   125ac:	pop	{r4, lr}
   125b0:	b	142dc <__assert_fail@plt+0x2b44>
   125b4:	push	{r4, r5, r6, lr}
   125b8:	mov	r4, r0
   125bc:	mov	r1, r4
   125c0:	movw	r0, #28008	; 0x6d68
   125c4:	movt	r0, #1
   125c8:	bl	13774 <__assert_fail@plt+0x1fdc>
   125cc:	subs	r6, r0, #0
   125d0:	beq	1266c <__assert_fail@plt+0xed4>
   125d4:	bl	1151c <opendir@plt>
   125d8:	subs	r5, r0, #0
   125dc:	beq	1264c <__assert_fail@plt+0xeb4>
   125e0:	mov	r0, r5
   125e4:	bl	116fc <readdir64@plt>
   125e8:	subs	r4, r0, #0
   125ec:	beq	12644 <__assert_fail@plt+0xeac>
   125f0:	movw	r0, #28040	; 0x6d88
   125f4:	add	r1, r4, #19
   125f8:	movt	r0, #1
   125fc:	mov	r2, #4
   12600:	bl	11744 <strncmp@plt>
   12604:	subs	r6, r0, #0
   12608:	bne	125e0 <__assert_fail@plt+0xe48>
   1260c:	add	r4, r4, #23
   12610:	mov	r0, r4
   12614:	bl	142dc <__assert_fail@plt+0x2b44>
   12618:	cmp	r0, #0
   1261c:	beq	125e0 <__assert_fail@plt+0xe48>
   12620:	mov	r0, r4
   12624:	mov	r1, r6
   12628:	mov	r2, #10
   1262c:	bl	113e4 <strtol@plt>
   12630:	mov	r4, r0
   12634:	mov	r0, r5
   12638:	bl	11768 <closedir@plt>
   1263c:	mov	r0, r4
   12640:	pop	{r4, r5, r6, pc}
   12644:	mvn	r4, #0
   12648:	b	12634 <__assert_fail@plt+0xe9c>
   1264c:	mov	r2, #5
   12650:	movw	r1, #28048	; 0x6d90
   12654:	movt	r1, #1
   12658:	bl	1148c <dcgettext@plt>
   1265c:	mov	r2, r6
   12660:	mov	r1, r0
   12664:	mov	r0, #1
   12668:	bl	114d4 <err@plt>
   1266c:	mov	r2, #5
   12670:	movw	r1, #28048	; 0x6d90
   12674:	movt	r1, #1
   12678:	bl	1148c <dcgettext@plt>
   1267c:	mov	r2, r4
   12680:	b	12660 <__assert_fail@plt+0xec8>
   12684:	push	{r4, lr}
   12688:	mov	r4, r0
   1268c:	movw	r0, #28068	; 0x6da4
   12690:	movt	r0, #1
   12694:	bl	13cfc <__assert_fail@plt+0x2564>
   12698:	cmp	r0, #0
   1269c:	beq	1274c <__assert_fail@plt+0xfb4>
   126a0:	movw	r0, #28156	; 0x6dfc
   126a4:	movt	r0, #1
   126a8:	bl	13774 <__assert_fail@plt+0x1fdc>
   126ac:	cmp	r0, #0
   126b0:	movweq	r1, #28184	; 0x6e18
   126b4:	moveq	r2, #5
   126b8:	movteq	r1, #1
   126bc:	beq	12734 <__assert_fail@plt+0xf9c>
   126c0:	movw	r2, #9596	; 0x257c
   126c4:	movw	r3, #5236	; 0x1474
   126c8:	movt	r2, #1
   126cc:	movt	r3, #1
   126d0:	mov	r1, r4
   126d4:	bl	1172c <scandir64@plt>
   126d8:	cmp	r0, #0
   126dc:	str	r0, [r4, #4]
   126e0:	ble	12724 <__assert_fail@plt+0xf8c>
   126e4:	ldr	r3, [r4]
   126e8:	ldr	r0, [r3]
   126ec:	add	r0, r0, #19
   126f0:	bl	125b4 <__assert_fail@plt+0xe1c>
   126f4:	cmn	r0, #1
   126f8:	movw	r0, #28204	; 0x6e2c
   126fc:	movt	r0, #1
   12700:	ldrbne	r3, [r4, #44]	; 0x2c
   12704:	orrne	r3, r3, #1
   12708:	strbne	r3, [r4, #44]	; 0x2c
   1270c:	bl	13cfc <__assert_fail@plt+0x2564>
   12710:	cmp	r0, #0
   12714:	ldrbne	r3, [r4, #45]	; 0x2d
   12718:	orrne	r3, r3, #32
   1271c:	strbne	r3, [r4, #45]	; 0x2d
   12720:	pop	{r4, pc}
   12724:	movw	r1, #28184	; 0x6e18
   12728:	movt	r1, #1
   1272c:	mov	r0, #0
   12730:	mov	r2, #5
   12734:	bl	1148c <dcgettext@plt>
   12738:	movw	r2, #28156	; 0x6dfc
   1273c:	movt	r2, #1
   12740:	mov	r1, r0
   12744:	mov	r0, #1
   12748:	bl	114d4 <err@plt>
   1274c:	movw	r1, #28112	; 0x6dd0
   12750:	mov	r2, #5
   12754:	movt	r1, #1
   12758:	bl	1148c <dcgettext@plt>
   1275c:	mov	r1, r0
   12760:	mov	r0, #1
   12764:	bl	116b4 <errx@plt>
   12768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1276c:	movw	r4, #33368	; 0x8258
   12770:	movt	r4, #2
   12774:	sub	sp, sp, #16384	; 0x4000
   12778:	sub	sp, sp, #124	; 0x7c
   1277c:	mov	r7, r0
   12780:	ldr	r3, [r4]
   12784:	add	r5, sp, #16384	; 0x4000
   12788:	mov	r1, #8192	; 0x2000
   1278c:	add	r0, sp, #116	; 0x74
   12790:	movw	r2, #28068	; 0x6da4
   12794:	movt	r2, #1
   12798:	str	r3, [r5, #116]	; 0x74
   1279c:	str	r4, [sp, #44]	; 0x2c
   127a0:	bl	138b4 <__assert_fail@plt+0x211c>
   127a4:	mov	r1, #0
   127a8:	add	r0, sp, #116	; 0x74
   127ac:	mov	r3, r1
   127b0:	mov	r2, #16
   127b4:	bl	11468 <__strtoull_internal@plt>
   127b8:	ldr	r3, [r7, #4]
   127bc:	cmp	r3, #0
   127c0:	movgt	r8, #0
   127c4:	strd	r0, [r7, #16]
   127c8:	ble	12c1c <__assert_fail@plt+0x1484>
   127cc:	ldr	r0, [r7]
   127d0:	mov	r1, #0
   127d4:	mov	r3, r1
   127d8:	mov	r2, #10
   127dc:	ldr	r0, [r0, r8, lsl #2]
   127e0:	add	r4, r0, #19
   127e4:	add	r0, r0, #25
   127e8:	bl	11468 <__strtoull_internal@plt>
   127ec:	strd	r0, [sp, #16]
   127f0:	mov	r1, r4
   127f4:	movw	r0, #28252	; 0x6e5c
   127f8:	movt	r0, #1
   127fc:	bl	13ab0 <__assert_fail@plt+0x2318>
   12800:	mov	r3, r4
   12804:	mov	r1, #8192	; 0x2000
   12808:	movw	r2, #28292	; 0x6e84
   1280c:	movt	r2, #1
   12810:	and	r0, r0, #1
   12814:	str	r0, [sp, #24]
   12818:	add	r0, sp, #8256	; 0x2040
   1281c:	add	r0, r0, #52	; 0x34
   12820:	bl	138b4 <__assert_fail@plt+0x211c>
   12824:	add	r0, sp, #8256	; 0x2040
   12828:	add	r0, r0, #52	; 0x34
   1282c:	movw	r1, #28328	; 0x6ea8
   12830:	movt	r1, #1
   12834:	bl	113d8 <strcmp@plt>
   12838:	cmp	r0, #0
   1283c:	moveq	ip, #1
   12840:	streq	ip, [sp, #28]
   12844:	beq	1288c <__assert_fail@plt+0x10f4>
   12848:	add	r0, sp, #8256	; 0x2040
   1284c:	movw	r1, #28336	; 0x6eb0
   12850:	add	r0, r0, #52	; 0x34
   12854:	movt	r1, #1
   12858:	bl	113d8 <strcmp@plt>
   1285c:	cmp	r0, #0
   12860:	streq	r0, [sp, #28]
   12864:	beq	1288c <__assert_fail@plt+0x10f4>
   12868:	add	r0, sp, #8256	; 0x2040
   1286c:	movw	r1, #28344	; 0x6eb8
   12870:	add	r0, r0, #52	; 0x34
   12874:	movt	r1, #1
   12878:	bl	113d8 <strcmp@plt>
   1287c:	cmp	r0, #0
   12880:	moveq	r0, #2
   12884:	movne	r0, #3
   12888:	str	r0, [sp, #28]
   1288c:	ldrb	r3, [r7, #44]	; 0x2c
   12890:	tst	r3, #1
   12894:	bne	12b18 <__assert_fail@plt+0x1380>
   12898:	ldrb	r9, [r7, #45]	; 0x2d
   1289c:	ubfx	r9, r9, #5, #1
   128a0:	cmp	r9, #0
   128a4:	bne	12ae0 <__assert_fail@plt+0x1348>
   128a8:	mov	r2, #0
   128ac:	add	fp, sp, #80	; 0x50
   128b0:	add	sl, sp, #48	; 0x30
   128b4:	mov	r4, r2
   128b8:	str	r2, [sp, #4]
   128bc:	cmp	r9, #0
   128c0:	beq	1290c <__assert_fail@plt+0x1174>
   128c4:	ldr	r6, [pc, #888]	; 12c44 <__assert_fail@plt+0x14ac>
   128c8:	mov	r5, #0
   128cc:	mov	r0, r9
   128d0:	ldr	r1, [r6, #4]!
   128d4:	bl	114bc <strcasecmp@plt>
   128d8:	cmp	r0, #0
   128dc:	beq	128f0 <__assert_fail@plt+0x1158>
   128e0:	add	r5, r5, #1
   128e4:	cmp	r5, #8
   128e8:	bne	128cc <__assert_fail@plt+0x1134>
   128ec:	mov	r5, #7
   128f0:	movw	r1, #30176	; 0x75e0
   128f4:	mov	r0, #0
   128f8:	movt	r1, #1
   128fc:	str	r5, [sl, #28]
   12900:	bl	1169c <strtok@plt>
   12904:	add	r4, r4, #1
   12908:	mov	r9, r0
   1290c:	add	sl, sl, #4
   12910:	cmp	sl, fp
   12914:	bne	128bc <__assert_fail@plt+0x1124>
   12918:	ldr	sl, [r7, #12]
   1291c:	str	r4, [sp, #4]
   12920:	cmp	sl, #0
   12924:	beq	12ad8 <__assert_fail@plt+0x1340>
   12928:	ldrb	r3, [r7, #44]	; 0x2c
   1292c:	ldr	r0, [r7, #8]
   12930:	tst	r3, #32
   12934:	bne	12968 <__assert_fail@plt+0x11d0>
   12938:	sub	r3, sl, #-67108863	; 0xfc000001
   1293c:	lsl	ip, r3, #6
   12940:	add	r1, r0, ip
   12944:	ldrd	r4, [r0, ip]
   12948:	ldrd	r2, [r1, #8]
   1294c:	adds	r4, r4, r2
   12950:	adc	r5, r5, r3
   12954:	strd	r2, [sp, #32]
   12958:	ldrd	r2, [sp, #16]
   1295c:	cmp	r3, r5
   12960:	cmpeq	r2, r4
   12964:	beq	12b28 <__assert_fail@plt+0x1390>
   12968:	add	sl, sl, #1
   1296c:	str	sl, [r7, #12]
   12970:	lsl	sl, sl, #6
   12974:	mov	r1, sl
   12978:	bl	114a4 <realloc@plt>
   1297c:	rsbs	r3, r0, #1
   12980:	mov	r9, r0
   12984:	movcc	r3, #0
   12988:	cmp	sl, #0
   1298c:	moveq	r3, #0
   12990:	cmp	r3, #0
   12994:	bne	12c30 <__assert_fail@plt+0x1498>
   12998:	ldr	r5, [sp, #28]
   1299c:	movw	r1, #49080	; 0xbfb8
   129a0:	ldr	r4, [sp, #40]	; 0x28
   129a4:	movt	r1, #65535	; 0xffff
   129a8:	ldrd	r2, [sp, #16]
   129ac:	add	ip, sp, #48	; 0x30
   129b0:	str	r5, [sp, #64]	; 0x40
   129b4:	mov	r0, #1
   129b8:	ldr	r5, [sp, #4]
   129bc:	ldr	sl, [r7, #12]
   129c0:	str	r4, [sp, #68]	; 0x44
   129c4:	str	r5, [sp, #72]	; 0x48
   129c8:	add	r5, sp, #16384	; 0x4000
   129cc:	add	r5, r5, #120	; 0x78
   129d0:	sub	r4, sl, #-67108863	; 0xfc000001
   129d4:	str	r9, [r7, #8]
   129d8:	strd	r2, [r5, r1]
   129dc:	mov	r1, #0
   129e0:	strd	r0, [sp, #56]	; 0x38
   129e4:	add	r4, r9, r4, lsl #6
   129e8:	ldm	ip!, {r0, r1, r2, r3}
   129ec:	ldrb	r6, [sp, #108]	; 0x6c
   129f0:	ldr	r5, [sp, #24]
   129f4:	stmia	r4!, {r0, r1, r2, r3}
   129f8:	bfi	r6, r5, #0, #1
   129fc:	ldm	ip!, {r0, r1, r2, r3}
   12a00:	strb	r6, [sp, #108]	; 0x6c
   12a04:	stmia	r4!, {r0, r1, r2, r3}
   12a08:	ldm	ip!, {r0, r1, r2, r3}
   12a0c:	stmia	r4!, {r0, r1, r2, r3}
   12a10:	ldm	ip, {r0, r1, r2, r3}
   12a14:	stm	r4, {r0, r1, r2, r3}
   12a18:	add	r8, r8, #1
   12a1c:	ldr	r3, [r7, #4]
   12a20:	cmp	r3, r8
   12a24:	bgt	127cc <__assert_fail@plt+0x1034>
   12a28:	cmp	sl, #0
   12a2c:	ble	12ab4 <__assert_fail@plt+0x131c>
   12a30:	ldr	r1, [r7, #8]
   12a34:	mov	r5, r7
   12a38:	ldr	r0, [r7, #16]
   12a3c:	ldr	ip, [r7, #20]
   12a40:	add	r4, r1, sl, lsl #6
   12a44:	b	12a74 <__assert_fail@plt+0x12dc>
   12a48:	mul	r3, r2, ip
   12a4c:	ldrd	r6, [r5, #24]
   12a50:	mla	r8, r0, r8, r3
   12a54:	add	r1, r1, #64	; 0x40
   12a58:	umull	r2, r3, r2, r0
   12a5c:	adds	r2, r2, r6
   12a60:	add	r3, r8, r3
   12a64:	adc	r3, r3, r7
   12a68:	cmp	r1, r4
   12a6c:	strd	r2, [r5, #24]
   12a70:	beq	12ab4 <__assert_fail@plt+0x131c>
   12a74:	ldr	r3, [r1, #16]
   12a78:	ldr	r2, [r1, #8]
   12a7c:	cmp	r3, #0
   12a80:	ldr	r8, [r1, #12]
   12a84:	beq	12a48 <__assert_fail@plt+0x12b0>
   12a88:	mul	r3, r2, ip
   12a8c:	ldrd	r6, [r5, #32]
   12a90:	mla	r8, r0, r8, r3
   12a94:	add	r1, r1, #64	; 0x40
   12a98:	umull	r2, r3, r2, r0
   12a9c:	adds	r2, r2, r6
   12aa0:	add	r3, r8, r3
   12aa4:	adc	r3, r3, r7
   12aa8:	cmp	r1, r4
   12aac:	strd	r2, [r5, #32]
   12ab0:	bne	12a74 <__assert_fail@plt+0x12dc>
   12ab4:	ldr	r4, [sp, #44]	; 0x2c
   12ab8:	add	ip, sp, #16384	; 0x4000
   12abc:	ldr	r2, [ip, #116]	; 0x74
   12ac0:	ldr	r3, [r4]
   12ac4:	cmp	r2, r3
   12ac8:	bne	12c2c <__assert_fail@plt+0x1494>
   12acc:	add	sp, sp, #16384	; 0x4000
   12ad0:	add	sp, sp, #124	; 0x7c
   12ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ad8:	ldr	r0, [r7, #8]
   12adc:	b	12968 <__assert_fail@plt+0x11d0>
   12ae0:	add	r0, sp, #8256	; 0x2040
   12ae4:	mov	r3, r4
   12ae8:	add	r0, r0, #52	; 0x34
   12aec:	mov	r1, #8192	; 0x2000
   12af0:	movw	r2, #28360	; 0x6ec8
   12af4:	movt	r2, #1
   12af8:	bl	138b4 <__assert_fail@plt+0x211c>
   12afc:	add	r0, sp, #8256	; 0x2040
   12b00:	add	r0, r0, #52	; 0x34
   12b04:	movw	r1, #30176	; 0x75e0
   12b08:	movt	r1, #1
   12b0c:	bl	1169c <strtok@plt>
   12b10:	mov	r9, r0
   12b14:	b	128a8 <__assert_fail@plt+0x1110>
   12b18:	mov	r0, r4
   12b1c:	bl	125b4 <__assert_fail@plt+0xe1c>
   12b20:	str	r0, [sp, #40]	; 0x28
   12b24:	b	12898 <__assert_fail@plt+0x1100>
   12b28:	ldrb	r3, [r7, #45]	; 0x2d
   12b2c:	tst	r3, #4
   12b30:	beq	12b44 <__assert_fail@plt+0x13ac>
   12b34:	ldr	r2, [r1, #16]
   12b38:	ldr	r4, [sp, #28]
   12b3c:	cmp	r2, r4
   12b40:	bne	12968 <__assert_fail@plt+0x11d0>
   12b44:	tst	r3, #8
   12b48:	beq	12b60 <__assert_fail@plt+0x13c8>
   12b4c:	ldrb	r2, [r1, #60]	; 0x3c
   12b50:	ldr	r5, [sp, #24]
   12b54:	and	r2, r2, #1
   12b58:	cmp	r2, r5
   12b5c:	bne	12968 <__assert_fail@plt+0x11d0>
   12b60:	ldrh	r9, [r7, #44]	; 0x2c
   12b64:	movw	r2, #513	; 0x201
   12b68:	mov	ip, r2
   12b6c:	and	r2, r9, r2
   12b70:	cmp	r2, ip
   12b74:	beq	12c08 <__assert_fail@plt+0x1470>
   12b78:	and	r3, r3, #48	; 0x30
   12b7c:	cmp	r3, #48	; 0x30
   12b80:	beq	12b98 <__assert_fail@plt+0x1400>
   12b84:	ldrd	r2, [sp, #32]
   12b88:	adds	r2, r2, #1
   12b8c:	adc	r3, r3, #0
   12b90:	strd	r2, [r1, #8]
   12b94:	b	12a18 <__assert_fail@plt+0x1280>
   12b98:	ldr	r6, [r1, #24]
   12b9c:	ldr	r2, [sp, #4]
   12ba0:	cmp	r6, r2
   12ba4:	bne	12968 <__assert_fail@plt+0x11d0>
   12ba8:	cmp	r2, #0
   12bac:	beq	12b84 <__assert_fail@plt+0x13ec>
   12bb0:	ldr	r3, [r1, #28]
   12bb4:	cmp	r3, #7
   12bb8:	beq	12968 <__assert_fail@plt+0x11d0>
   12bbc:	ldr	r2, [sp, #76]	; 0x4c
   12bc0:	add	r9, sp, #76	; 0x4c
   12bc4:	cmp	r3, r2
   12bc8:	bne	12968 <__assert_fail@plt+0x11d0>
   12bcc:	mov	r2, r1
   12bd0:	mov	r3, #0
   12bd4:	ldr	r4, [sp, #4]
   12bd8:	b	12bf8 <__assert_fail@plt+0x1460>
   12bdc:	ldr	ip, [r2, #32]
   12be0:	cmp	ip, #7
   12be4:	beq	12c24 <__assert_fail@plt+0x148c>
   12be8:	ldr	r5, [r9, #4]!
   12bec:	add	r2, r2, #4
   12bf0:	cmp	ip, r5
   12bf4:	bne	12c24 <__assert_fail@plt+0x148c>
   12bf8:	add	r3, r3, #1
   12bfc:	cmp	r3, r6
   12c00:	bne	12bdc <__assert_fail@plt+0x1444>
   12c04:	b	12b84 <__assert_fail@plt+0x13ec>
   12c08:	ldr	r2, [r1, #20]
   12c0c:	ldr	ip, [sp, #40]	; 0x28
   12c10:	cmp	r2, ip
   12c14:	bne	12968 <__assert_fail@plt+0x11d0>
   12c18:	b	12b78 <__assert_fail@plt+0x13e0>
   12c1c:	ldr	sl, [r7, #12]
   12c20:	b	12a28 <__assert_fail@plt+0x1290>
   12c24:	str	r4, [sp, #4]
   12c28:	b	12968 <__assert_fail@plt+0x11d0>
   12c2c:	bl	11498 <__stack_chk_fail@plt>
   12c30:	movw	r1, #28404	; 0x6ef4
   12c34:	mov	r2, sl
   12c38:	mov	r0, #1
   12c3c:	movt	r1, #1
   12c40:	bl	114d4 <err@plt>
   12c44:	andeq	r6, r1, r0, lsr #23
   12c48:	push	{r4, r5, r6, lr}
   12c4c:	movw	r1, #28432	; 0x6f10
   12c50:	ldrb	r4, [r0, #44]	; 0x2c
   12c54:	sub	sp, sp, #8
   12c58:	mov	r6, r0
   12c5c:	ubfx	r4, r4, #6, #1
   12c60:	cmp	r4, #0
   12c64:	bne	12d20 <__assert_fail@plt+0x1588>
   12c68:	movt	r1, #1
   12c6c:	mov	r0, r4
   12c70:	mov	r2, #5
   12c74:	bl	1148c <dcgettext@plt>
   12c78:	ldrd	r2, [r6, #16]
   12c7c:	mov	r5, r0
   12c80:	mov	r0, r4
   12c84:	bl	14b60 <__assert_fail@plt+0x33c8>
   12c88:	mov	r2, r5
   12c8c:	movw	r1, #28516	; 0x6f64
   12c90:	movt	r1, #1
   12c94:	mov	r3, r0
   12c98:	mov	r0, #1
   12c9c:	bl	11648 <__printf_chk@plt>
   12ca0:	mov	r0, r4
   12ca4:	mov	r2, #5
   12ca8:	movw	r1, #28468	; 0x6f34
   12cac:	movt	r1, #1
   12cb0:	bl	1148c <dcgettext@plt>
   12cb4:	ldrd	r2, [r6, #24]
   12cb8:	mov	r5, r0
   12cbc:	mov	r0, r4
   12cc0:	bl	14b60 <__assert_fail@plt+0x33c8>
   12cc4:	mov	r2, r5
   12cc8:	movw	r1, #28516	; 0x6f64
   12ccc:	movt	r1, #1
   12cd0:	mov	r3, r0
   12cd4:	mov	r0, #1
   12cd8:	bl	11648 <__printf_chk@plt>
   12cdc:	mov	r0, r4
   12ce0:	mov	r2, #5
   12ce4:	movw	r1, #28492	; 0x6f4c
   12ce8:	movt	r1, #1
   12cec:	bl	1148c <dcgettext@plt>
   12cf0:	ldrd	r2, [r6, #32]
   12cf4:	mov	r5, r0
   12cf8:	mov	r0, r4
   12cfc:	bl	14b60 <__assert_fail@plt+0x33c8>
   12d00:	mov	r2, r5
   12d04:	movw	r1, #28516	; 0x6f64
   12d08:	movt	r1, #1
   12d0c:	mov	r3, r0
   12d10:	mov	r0, #1
   12d14:	add	sp, sp, #8
   12d18:	pop	{r4, r5, r6, lr}
   12d1c:	b	11648 <__printf_chk@plt>
   12d20:	movt	r1, #1
   12d24:	mov	r2, #5
   12d28:	mov	r0, #0
   12d2c:	bl	1148c <dcgettext@plt>
   12d30:	ldrd	r4, [r6, #16]
   12d34:	movw	r1, #28452	; 0x6f24
   12d38:	movt	r1, #1
   12d3c:	strd	r4, [sp]
   12d40:	mov	r2, r0
   12d44:	mov	r0, #1
   12d48:	bl	11648 <__printf_chk@plt>
   12d4c:	mov	r2, #5
   12d50:	movw	r1, #28468	; 0x6f34
   12d54:	mov	r0, #0
   12d58:	movt	r1, #1
   12d5c:	bl	1148c <dcgettext@plt>
   12d60:	ldrd	r4, [r6, #24]
   12d64:	movw	r1, #28452	; 0x6f24
   12d68:	movt	r1, #1
   12d6c:	strd	r4, [sp]
   12d70:	mov	r2, r0
   12d74:	mov	r0, #1
   12d78:	bl	11648 <__printf_chk@plt>
   12d7c:	mov	r2, #5
   12d80:	movw	r1, #28492	; 0x6f4c
   12d84:	mov	r0, #0
   12d88:	movt	r1, #1
   12d8c:	bl	1148c <dcgettext@plt>
   12d90:	ldrd	r4, [r6, #32]
   12d94:	movw	r1, #28452	; 0x6f24
   12d98:	movt	r1, #1
   12d9c:	strd	r4, [sp]
   12da0:	mov	r2, r0
   12da4:	mov	r0, #1
   12da8:	bl	11648 <__printf_chk@plt>
   12dac:	add	sp, sp, #8
   12db0:	pop	{r4, r5, r6, pc}
   12db4:	push	{r1, r2, r3}
   12db8:	mov	r1, #1
   12dbc:	push	{r4, lr}
   12dc0:	movw	r4, #33368	; 0x8258
   12dc4:	movt	r4, #2
   12dc8:	sub	sp, sp, #12
   12dcc:	add	ip, sp, #24
   12dd0:	ldr	lr, [r4]
   12dd4:	ldr	r2, [sp, #20]
   12dd8:	mov	r3, ip
   12ddc:	str	ip, [sp]
   12de0:	str	lr, [sp, #4]
   12de4:	bl	11600 <__vasprintf_chk@plt>
   12de8:	cmp	r0, #0
   12dec:	blt	12e14 <__assert_fail@plt+0x167c>
   12df0:	ldr	r2, [sp, #4]
   12df4:	ldr	r3, [r4]
   12df8:	cmp	r2, r3
   12dfc:	bne	12e10 <__assert_fail@plt+0x1678>
   12e00:	add	sp, sp, #12
   12e04:	pop	{r4, lr}
   12e08:	add	sp, sp, #12
   12e0c:	bx	lr
   12e10:	bl	11498 <__stack_chk_fail@plt>
   12e14:	movw	r1, #28528	; 0x6f70
   12e18:	mov	r0, #1
   12e1c:	movt	r1, #1
   12e20:	bl	114d4 <err@plt>
   12e24:	movw	r3, #33384	; 0x8268
   12e28:	movt	r3, #2
   12e2c:	push	{r4, r5, r6, lr}
   12e30:	ldr	r4, [r3]
   12e34:	mov	r0, r4
   12e38:	bl	11510 <__fpending@plt>
   12e3c:	mov	r6, r0
   12e40:	mov	r0, r4
   12e44:	bl	11438 <ferror@plt>
   12e48:	mov	r5, r0
   12e4c:	mov	r0, r4
   12e50:	bl	11690 <fclose@plt>
   12e54:	adds	r4, r0, #0
   12e58:	movne	r4, #1
   12e5c:	cmp	r5, #0
   12e60:	bne	12ed8 <__assert_fail@plt+0x1740>
   12e64:	cmp	r4, #0
   12e68:	beq	12e84 <__assert_fail@plt+0x16ec>
   12e6c:	cmp	r6, #0
   12e70:	beq	12f28 <__assert_fail@plt+0x1790>
   12e74:	bl	115dc <__errno_location@plt>
   12e78:	ldr	r3, [r0]
   12e7c:	cmp	r3, #32
   12e80:	bne	12f3c <__assert_fail@plt+0x17a4>
   12e84:	movw	r3, #33380	; 0x8264
   12e88:	movt	r3, #2
   12e8c:	ldr	r4, [r3]
   12e90:	mov	r0, r4
   12e94:	bl	11510 <__fpending@plt>
   12e98:	mov	r6, r0
   12e9c:	mov	r0, r4
   12ea0:	bl	11438 <ferror@plt>
   12ea4:	mov	r5, r0
   12ea8:	mov	r0, r4
   12eac:	bl	11690 <fclose@plt>
   12eb0:	adds	r4, r0, #0
   12eb4:	movne	r4, #1
   12eb8:	cmp	r5, #0
   12ebc:	beq	12f04 <__assert_fail@plt+0x176c>
   12ec0:	cmp	r4, #0
   12ec4:	bne	12ed0 <__assert_fail@plt+0x1738>
   12ec8:	bl	115dc <__errno_location@plt>
   12ecc:	str	r4, [r0]
   12ed0:	mov	r0, #1
   12ed4:	bl	11444 <_exit@plt>
   12ed8:	cmp	r4, #0
   12edc:	bne	12e74 <__assert_fail@plt+0x16dc>
   12ee0:	bl	115dc <__errno_location@plt>
   12ee4:	str	r4, [r0]
   12ee8:	mov	r2, #5
   12eec:	movw	r1, #28664	; 0x6ff8
   12ef0:	mov	r0, #0
   12ef4:	movt	r1, #1
   12ef8:	bl	1148c <dcgettext@plt>
   12efc:	bl	115d0 <warnx@plt>
   12f00:	b	12ed0 <__assert_fail@plt+0x1738>
   12f04:	cmp	r4, #0
   12f08:	popeq	{r4, r5, r6, pc}
   12f0c:	cmp	r6, #0
   12f10:	bne	12ed0 <__assert_fail@plt+0x1738>
   12f14:	bl	115dc <__errno_location@plt>
   12f18:	ldr	r3, [r0]
   12f1c:	cmp	r3, #9
   12f20:	bne	12ed0 <__assert_fail@plt+0x1738>
   12f24:	pop	{r4, r5, r6, pc}
   12f28:	bl	115dc <__errno_location@plt>
   12f2c:	ldr	r3, [r0]
   12f30:	cmp	r3, #9
   12f34:	bne	12e7c <__assert_fail@plt+0x16e4>
   12f38:	b	12e84 <__assert_fail@plt+0x16ec>
   12f3c:	cmp	r3, #0
   12f40:	beq	12ee8 <__assert_fail@plt+0x1750>
   12f44:	mov	r2, #5
   12f48:	movw	r1, #28664	; 0x6ff8
   12f4c:	mov	r0, #0
   12f50:	movt	r1, #1
   12f54:	bl	1148c <dcgettext@plt>
   12f58:	bl	116c0 <warn@plt>
   12f5c:	b	12ed0 <__assert_fail@plt+0x1738>
   12f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f64:	movw	r2, #33368	; 0x8258
   12f68:	sub	sp, sp, #8256	; 0x2040
   12f6c:	movt	r2, #2
   12f70:	sub	sp, sp, #4
   12f74:	mov	r7, r1
   12f78:	ldr	r3, [r2]
   12f7c:	mov	r1, #0
   12f80:	str	r2, [sp, #36]	; 0x24
   12f84:	add	r2, sp, #8192	; 0x2000
   12f88:	str	r0, [sp, #16]
   12f8c:	ldr	r0, [r0, #40]	; 0x28
   12f90:	str	r3, [r2, #60]	; 0x3c
   12f94:	bl	1154c <scols_table_new_line@plt>
   12f98:	cmp	r0, #0
   12f9c:	str	r0, [sp, #20]
   12fa0:	beq	13488 <__assert_fail@plt+0x1cf0>
   12fa4:	movw	r8, #33400	; 0x8278
   12fa8:	movt	r8, #2
   12fac:	ldr	r3, [r8]
   12fb0:	cmp	r3, #0
   12fb4:	ble	133d4 <__assert_fail@plt+0x1c3c>
   12fb8:	ldr	r3, [r8, #4]
   12fbc:	movw	r2, #57336	; 0xdff8
   12fc0:	add	r0, sp, #8256	; 0x2040
   12fc4:	movt	r2, #65535	; 0xffff
   12fc8:	cmp	r3, #6
   12fcc:	mov	r6, #0
   12fd0:	str	r6, [r0, r2]
   12fd4:	bgt	13180 <__assert_fail@plt+0x19e8>
   12fd8:	add	fp, r8, #4
   12fdc:	add	r9, sp, #60	; 0x3c
   12fe0:	movw	r1, #27556	; 0x6ba4
   12fe4:	movw	r2, #28952	; 0x7118
   12fe8:	movt	r1, #1
   12fec:	movt	r2, #1
   12ff0:	str	r1, [sp, #40]	; 0x28
   12ff4:	str	r2, [sp, #32]
   12ff8:	cmp	r3, #6
   12ffc:	ldrls	pc, [pc, r3, lsl #2]
   13000:	b	13388 <__assert_fail@plt+0x1bf0>
   13004:	andeq	r3, r1, r4, lsr #5
   13008:	andeq	r3, r1, ip, ror #3
   1300c:	andeq	r3, r1, ip, lsr #6
   13010:	andeq	r3, r1, r8, asr #4
   13014:	muleq	r1, ip, r1
   13018:	strdeq	r3, [r1], -ip
   1301c:	andeq	r3, r1, r0, lsr #32
   13020:	ldr	r2, [sp, #16]
   13024:	ldrb	r3, [r2, #45]	; 0x2d
   13028:	tst	r3, #32
   1302c:	beq	13370 <__assert_fail@plt+0x1bd8>
   13030:	movw	r3, #57340	; 0xdffc
   13034:	add	r0, sp, #8256	; 0x2040
   13038:	movt	r3, #65535	; 0xffff
   1303c:	mov	r4, #0
   13040:	str	fp, [sp, #24]
   13044:	mov	r5, r7
   13048:	ldr	sl, [r7, #24]
   1304c:	strb	r4, [r0, r3]
   13050:	str	r6, [sp, #44]	; 0x2c
   13054:	str	r7, [sp, #48]	; 0x30
   13058:	str	r8, [sp, #52]	; 0x34
   1305c:	ldr	fp, [sp, #40]	; 0x28
   13060:	b	130c0 <__assert_fail@plt+0x1928>
   13064:	mov	r0, r9
   13068:	bl	115b8 <strlen@plt>
   1306c:	ldr	r2, [r5, #28]
   13070:	ldr	r7, [fp, r2, lsl #2]
   13074:	mov	r8, r0
   13078:	mov	r0, r7
   1307c:	bl	115b8 <strlen@plt>
   13080:	movw	r1, #8190	; 0x1ffe
   13084:	add	r6, r0, r8
   13088:	mov	r2, r0
   1308c:	cmp	r6, r1
   13090:	bhi	130c8 <__assert_fail@plt+0x1930>
   13094:	add	r2, r2, #1
   13098:	mov	r3, #8192	; 0x2000
   1309c:	add	r0, r9, r8
   130a0:	mov	r1, r7
   130a4:	bl	114e0 <__memcpy_chk@plt>
   130a8:	add	r4, r4, #1
   130ac:	cmp	r4, sl
   130b0:	add	r5, r5, #4
   130b4:	ldrlt	r2, [sp, #32]
   130b8:	ldrhlt	r3, [r2]
   130bc:	strhlt	r3, [r9, r6]
   130c0:	cmp	r4, sl
   130c4:	blt	13064 <__assert_fail@plt+0x18cc>
   130c8:	add	r6, sp, #44	; 0x2c
   130cc:	mov	r0, r9
   130d0:	ldr	fp, [sp, #24]
   130d4:	ldm	r6, {r6, r7, r8}
   130d8:	bl	1160c <__strdup@plt>
   130dc:	cmp	r0, #0
   130e0:	beq	13384 <__assert_fail@plt+0x1bec>
   130e4:	movw	r3, #57336	; 0xdff8
   130e8:	add	r1, sp, #8256	; 0x2040
   130ec:	movt	r3, #65535	; 0xffff
   130f0:	mov	r2, r0
   130f4:	str	r0, [r1, r3]
   130f8:	b	1313c <__assert_fail@plt+0x19a4>
   130fc:	ldr	r2, [sp, #16]
   13100:	ldrb	r3, [r2, #44]	; 0x2c
   13104:	tst	r3, #1
   13108:	beq	13370 <__assert_fail@plt+0x1bd8>
   1310c:	movw	r1, #28948	; 0x7114
   13110:	add	r0, sp, #56	; 0x38
   13114:	movt	r1, #1
   13118:	ldr	r2, [r7, #20]
   1311c:	bl	12db4 <__assert_fail@plt+0x161c>
   13120:	movw	r3, #57336	; 0xdff8
   13124:	add	r1, sp, #8256	; 0x2040
   13128:	movt	r3, #65535	; 0xffff
   1312c:	ldr	r0, [r1, r3]
   13130:	cmp	r0, #0
   13134:	beq	13150 <__assert_fail@plt+0x19b8>
   13138:	mov	r2, r0
   1313c:	ldr	r0, [sp, #20]
   13140:	mov	r1, r6
   13144:	bl	113cc <scols_line_refer_data@plt>
   13148:	cmp	r0, #0
   1314c:	bne	1346c <__assert_fail@plt+0x1cd4>
   13150:	ldr	r3, [r8]
   13154:	add	r6, r6, #1
   13158:	cmp	r3, r6
   1315c:	ble	133d4 <__assert_fail@plt+0x1c3c>
   13160:	ldr	r3, [fp, #4]!
   13164:	movw	r2, #57336	; 0xdff8
   13168:	add	r0, sp, #8256	; 0x2040
   1316c:	movt	r2, #65535	; 0xffff
   13170:	cmp	r3, #6
   13174:	mov	r1, #0
   13178:	str	r1, [r0, r2]
   1317c:	ble	12ff8 <__assert_fail@plt+0x1860>
   13180:	movw	r0, #28680	; 0x7008
   13184:	movw	r1, #28564	; 0x6f94
   13188:	movt	r0, #1
   1318c:	movt	r1, #1
   13190:	mov	r2, #187	; 0xbb
   13194:	ldr	r3, [pc, #780]	; 134a8 <__assert_fail@plt+0x1d10>
   13198:	bl	11798 <__assert_fail@plt>
   1319c:	ldrd	r2, [r7, #8]
   131a0:	cmp	r3, #0
   131a4:	cmpeq	r2, #1
   131a8:	beq	13414 <__assert_fail@plt+0x1c7c>
   131ac:	ldrd	r4, [r7]
   131b0:	movw	r1, #28936	; 0x7108
   131b4:	add	r0, sp, #56	; 0x38
   131b8:	movt	r1, #1
   131bc:	adds	r4, r4, r2
   131c0:	adc	r5, r5, r3
   131c4:	subs	r4, r4, #1
   131c8:	ldrd	r2, [r7]
   131cc:	sbc	r5, r5, #0
   131d0:	strd	r4, [sp]
   131d4:	bl	12db4 <__assert_fail@plt+0x161c>
   131d8:	movw	r3, #57336	; 0xdff8
   131dc:	add	r1, sp, #8256	; 0x2040
   131e0:	movt	r3, #65535	; 0xffff
   131e4:	ldr	r0, [r1, r3]
   131e8:	b	13130 <__assert_fail@plt+0x1998>
   131ec:	ldr	r2, [sp, #16]
   131f0:	ldr	r1, [r7, #12]
   131f4:	ldrb	r0, [r2, #44]	; 0x2c
   131f8:	ubfx	r0, r0, #6, #1
   131fc:	cmp	r0, #0
   13200:	beq	1339c <__assert_fail@plt+0x1c04>
   13204:	ldr	r3, [sp, #16]
   13208:	add	r0, sp, #56	; 0x38
   1320c:	ldr	r2, [r2, #16]
   13210:	ldr	ip, [r3, #20]
   13214:	ldr	r3, [r7, #8]
   13218:	mul	r1, r2, r1
   1321c:	mla	ip, r3, ip, r1
   13220:	movw	r1, #28908	; 0x70ec
   13224:	umull	r2, r3, r2, r3
   13228:	movt	r1, #1
   1322c:	add	r3, ip, r3
   13230:	bl	12db4 <__assert_fail@plt+0x161c>
   13234:	movw	r3, #57336	; 0xdff8
   13238:	add	r1, sp, #8256	; 0x2040
   1323c:	movt	r3, #65535	; 0xffff
   13240:	ldr	r0, [r1, r3]
   13244:	b	13130 <__assert_fail@plt+0x1998>
   13248:	ldr	r3, [r7, #16]
   1324c:	cmp	r3, #0
   13250:	bne	13370 <__assert_fail@plt+0x1bd8>
   13254:	ldrb	r0, [r7, #60]	; 0x3c
   13258:	ands	r0, r0, #1
   1325c:	movwne	r1, #28924	; 0x70fc
   13260:	movweq	r1, #28928	; 0x7100
   13264:	movne	r0, r3
   13268:	movne	r2, #5
   1326c:	movtne	r1, #1
   13270:	moveq	r2, #5
   13274:	movteq	r1, #1
   13278:	bl	1148c <dcgettext@plt>
   1327c:	cmp	r0, #0
   13280:	beq	13290 <__assert_fail@plt+0x1af8>
   13284:	bl	1160c <__strdup@plt>
   13288:	cmp	r0, #0
   1328c:	beq	13384 <__assert_fail@plt+0x1bec>
   13290:	movw	r3, #57336	; 0xdff8
   13294:	add	r1, sp, #8256	; 0x2040
   13298:	movt	r3, #65535	; 0xffff
   1329c:	str	r0, [r1, r3]
   132a0:	b	13130 <__assert_fail@plt+0x1998>
   132a4:	ldr	r3, [sp, #16]
   132a8:	add	r0, sp, #56	; 0x38
   132ac:	ldr	sl, [r7]
   132b0:	ldr	lr, [r7, #4]
   132b4:	ldr	r3, [r3, #16]
   132b8:	ldr	ip, [r7, #12]
   132bc:	ldr	r2, [sp, #16]
   132c0:	str	r3, [sp, #12]
   132c4:	umull	r4, r5, sl, r3
   132c8:	ldr	r1, [r2, #20]
   132cc:	mul	lr, r3, lr
   132d0:	ldr	r2, [sp, #12]
   132d4:	mul	ip, r3, ip
   132d8:	ldr	r3, [r7, #8]
   132dc:	mla	lr, r1, sl, lr
   132e0:	mla	ip, r1, r3, ip
   132e4:	movw	r1, #28888	; 0x70d8
   132e8:	umull	r2, r3, r3, r2
   132ec:	add	r5, lr, r5
   132f0:	movt	r1, #1
   132f4:	add	ip, ip, r3
   132f8:	strd	r2, [sp, #24]
   132fc:	str	ip, [sp, #28]
   13300:	ldrd	r2, [sp, #24]
   13304:	adds	r2, r2, r4
   13308:	adc	r3, r3, r5
   1330c:	strd	r2, [sp, #24]
   13310:	mov	r2, r4
   13314:	mov	r3, r5
   13318:	ldrd	r4, [sp, #24]
   1331c:	subs	r4, r4, #1
   13320:	sbc	r5, r5, #0
   13324:	strd	r4, [sp]
   13328:	b	131d4 <__assert_fail@plt+0x1a3c>
   1332c:	ldr	r0, [r7, #16]
   13330:	cmp	r0, #0
   13334:	beq	133f8 <__assert_fail@plt+0x1c60>
   13338:	cmp	r0, #1
   1333c:	beq	1343c <__assert_fail@plt+0x1ca4>
   13340:	cmp	r0, #2
   13344:	movwne	r0, #28676	; 0x7004
   13348:	movtne	r0, #1
   1334c:	beq	13454 <__assert_fail@plt+0x1cbc>
   13350:	bl	1160c <__strdup@plt>
   13354:	cmp	r0, #0
   13358:	beq	13384 <__assert_fail@plt+0x1bec>
   1335c:	movw	r3, #57336	; 0xdff8
   13360:	add	r2, sp, #8256	; 0x2040
   13364:	movt	r3, #65535	; 0xffff
   13368:	str	r0, [r2, r3]
   1336c:	b	13130 <__assert_fail@plt+0x1998>
   13370:	movw	r0, #28932	; 0x7104
   13374:	movt	r0, #1
   13378:	bl	1160c <__strdup@plt>
   1337c:	cmp	r0, #0
   13380:	bne	130e4 <__assert_fail@plt+0x194c>
   13384:	bl	117cc <__assert_fail@plt+0x34>
   13388:	movw	r3, #57336	; 0xdff8
   1338c:	add	r2, sp, #8256	; 0x2040
   13390:	movt	r3, #65535	; 0xffff
   13394:	ldr	r0, [r2, r3]
   13398:	b	13130 <__assert_fail@plt+0x1998>
   1339c:	ldr	r3, [sp, #16]
   133a0:	ldr	r2, [r3, #16]
   133a4:	ldr	ip, [r3, #20]
   133a8:	ldr	r3, [r7, #8]
   133ac:	mul	r1, r2, r1
   133b0:	mla	r1, r3, ip, r1
   133b4:	umull	r2, r3, r2, r3
   133b8:	add	r3, r1, r3
   133bc:	bl	14b60 <__assert_fail@plt+0x33c8>
   133c0:	movw	r3, #57336	; 0xdff8
   133c4:	add	r1, sp, #8256	; 0x2040
   133c8:	movt	r3, #65535	; 0xffff
   133cc:	str	r0, [r1, r3]
   133d0:	b	13130 <__assert_fail@plt+0x1998>
   133d4:	ldr	r0, [sp, #36]	; 0x24
   133d8:	add	r3, sp, #8192	; 0x2000
   133dc:	ldr	r2, [r3, #60]	; 0x3c
   133e0:	ldr	r3, [r0]
   133e4:	cmp	r2, r3
   133e8:	bne	134a4 <__assert_fail@plt+0x1d0c>
   133ec:	add	sp, sp, #8256	; 0x2040
   133f0:	add	sp, sp, #4
   133f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133f8:	movw	r1, #28336	; 0x6eb0
   133fc:	mov	r2, #5
   13400:	movt	r1, #1
   13404:	bl	1148c <dcgettext@plt>
   13408:	cmp	r0, #0
   1340c:	bne	13350 <__assert_fail@plt+0x1bb8>
   13410:	b	1335c <__assert_fail@plt+0x1bc4>
   13414:	ldrd	r2, [r7]
   13418:	movw	r1, #28908	; 0x70ec
   1341c:	add	r0, sp, #56	; 0x38
   13420:	movt	r1, #1
   13424:	bl	12db4 <__assert_fail@plt+0x161c>
   13428:	movw	r3, #57336	; 0xdff8
   1342c:	add	r2, sp, #8256	; 0x2040
   13430:	movt	r3, #65535	; 0xffff
   13434:	ldr	r0, [r2, r3]
   13438:	b	13130 <__assert_fail@plt+0x1998>
   1343c:	movw	r1, #28328	; 0x6ea8
   13440:	mov	r2, #5
   13444:	movt	r1, #1
   13448:	mov	r0, #0
   1344c:	bl	1148c <dcgettext@plt>
   13450:	b	13408 <__assert_fail@plt+0x1c70>
   13454:	movw	r1, #28916	; 0x70f4
   13458:	mov	r2, #5
   1345c:	movt	r1, #1
   13460:	mov	r0, #0
   13464:	bl	1148c <dcgettext@plt>
   13468:	b	13408 <__assert_fail@plt+0x1c70>
   1346c:	movw	r1, #28856	; 0x70b8
   13470:	movw	r2, #28564	; 0x6f94
   13474:	movt	r1, #1
   13478:	movt	r2, #1
   1347c:	mov	r0, #1
   13480:	movw	r3, #306	; 0x132
   13484:	bl	114d4 <err@plt>
   13488:	movw	r1, #28856	; 0x70b8
   1348c:	movw	r2, #28564	; 0x6f94
   13490:	movt	r1, #1
   13494:	movt	r2, #1
   13498:	mov	r0, #1
   1349c:	mov	r3, #238	; 0xee
   134a0:	bl	114d4 <err@plt>
   134a4:	bl	11498 <__stack_chk_fail@plt>
   134a8:	andeq	r6, r1, r4, asr #23
   134ac:	ldr	r3, [pc, #104]	; 1351c <__assert_fail@plt+0x1d84>
   134b0:	mov	ip, r1
   134b4:	push	{lr}		; (str lr, [sp, #-4]!)
   134b8:	add	r3, pc, r3
   134bc:	sub	sp, sp, #12
   134c0:	ldr	r1, [r3]
   134c4:	cmp	r1, #0
   134c8:	bne	134f8 <__assert_fail@plt+0x1d60>
   134cc:	mov	r1, #4096	; 0x1000
   134d0:	stm	sp, {r0, ip}
   134d4:	mov	r2, #1
   134d8:	add	r0, r3, #4
   134dc:	mov	r3, r1
   134e0:	bl	11450 <__vsnprintf_chk@plt>
   134e4:	ldr	r0, [pc, #52]	; 13520 <__assert_fail@plt+0x1d88>
   134e8:	add	r0, pc, r0
   134ec:	add	r0, r0, #4
   134f0:	add	sp, sp, #12
   134f4:	pop	{pc}		; (ldr pc, [sp], #4)
   134f8:	add	r3, r3, #4
   134fc:	str	r0, [sp]
   13500:	str	ip, [sp, #4]
   13504:	add	r0, r3, r1
   13508:	mov	r2, #1
   1350c:	rsb	r1, r1, #4096	; 0x1000
   13510:	mvn	r3, #0
   13514:	bl	11450 <__vsnprintf_chk@plt>
   13518:	b	134e4 <__assert_fail@plt+0x1d4c>
   1351c:	strdeq	r4, [r1], -r8
   13520:	andeq	r4, r1, r8, asr #27
   13524:	push	{r4, r5, r6, lr}
   13528:	mov	r5, r0
   1352c:	mov	r4, r1
   13530:	mov	r0, r2
   13534:	mov	r1, r3
   13538:	bl	134ac <__assert_fail@plt+0x1d14>
   1353c:	mov	r1, r5
   13540:	mov	r6, r0
   13544:	bl	11714 <fopen64@plt>
   13548:	rsbs	r3, r0, #1
   1354c:	movcc	r3, #0
   13550:	cmp	r4, #0
   13554:	moveq	r3, #0
   13558:	cmp	r3, #0
   1355c:	popeq	{r4, r5, r6, pc}
   13560:	ldr	r1, [pc, #28]	; 13584 <__assert_fail@plt+0x1dec>
   13564:	mov	r2, #5
   13568:	mov	r0, #0
   1356c:	add	r1, pc, r1
   13570:	bl	1148c <dcgettext@plt>
   13574:	mov	r2, r6
   13578:	mov	r1, r0
   1357c:	mov	r0, #1
   13580:	bl	114d4 <err@plt>
   13584:	andeq	r4, r0, r4, lsl #4
   13588:	ldr	ip, [pc, #360]	; 136f8 <__assert_fail@plt+0x1f60>
   1358c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13590:	add	fp, sp, #28
   13594:	ldr	lr, [pc, #352]	; 136fc <__assert_fail@plt+0x1f64>
   13598:	sub	sp, sp, #8
   1359c:	add	ip, pc, ip
   135a0:	rsb	r5, r0, r0, lsl #3
   135a4:	mov	r4, r0
   135a8:	ldr	r7, [ip, lr]
   135ac:	add	r0, r5, #7
   135b0:	mov	r8, r1
   135b4:	bic	r1, r0, #7
   135b8:	ldr	r0, [pc, #320]	; 13700 <__assert_fail@plt+0x1f68>
   135bc:	sub	sp, sp, r1
   135c0:	ldr	ip, [r7]
   135c4:	mov	r1, #1
   135c8:	add	r0, pc, r0
   135cc:	mov	r9, sp
   135d0:	str	ip, [fp, #-32]	; 0xffffffe0
   135d4:	bl	13524 <__assert_fail@plt+0x1d8c>
   135d8:	mov	r1, r5
   135dc:	mov	r6, r0
   135e0:	mov	r0, sp
   135e4:	mov	r2, r6
   135e8:	bl	11420 <fgets@plt>
   135ec:	cmp	r0, #0
   135f0:	beq	136a4 <__assert_fail@plt+0x1f0c>
   135f4:	mov	r0, r6
   135f8:	bl	11690 <fclose@plt>
   135fc:	mov	r0, sp
   13600:	bl	115b8 <strlen@plt>
   13604:	sub	r1, fp, #36	; 0x24
   13608:	mov	r2, #0
   1360c:	sub	r0, r0, #1
   13610:	ldrsb	r3, [sp, r0]
   13614:	cmp	r3, #10
   13618:	moveq	r3, #0
   1361c:	strbeq	r3, [sp, r0]
   13620:	mov	r0, r4
   13624:	bl	15784 <__assert_fail@plt+0x3fec>
   13628:	subs	r4, r0, #0
   1362c:	beq	136cc <__assert_fail@plt+0x1f34>
   13630:	cmp	r8, #0
   13634:	mov	r0, sp
   13638:	mov	r1, r4
   1363c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13640:	bne	1366c <__assert_fail@plt+0x1ed4>
   13644:	bl	15b9c <__assert_fail@plt+0x4404>
   13648:	cmp	r0, #0
   1364c:	bne	136e8 <__assert_fail@plt+0x1f50>
   13650:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13654:	mov	r0, r4
   13658:	ldr	r3, [r7]
   1365c:	cmp	r2, r3
   13660:	bne	136a0 <__assert_fail@plt+0x1f08>
   13664:	sub	sp, fp, #28
   13668:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1366c:	mov	r3, #0
   13670:	bl	15d3c <__assert_fail@plt+0x45a4>
   13674:	cmp	r0, #0
   13678:	beq	13650 <__assert_fail@plt+0x1eb8>
   1367c:	ldr	r1, [pc, #128]	; 13704 <__assert_fail@plt+0x1f6c>
   13680:	mov	r0, #0
   13684:	add	r1, pc, r1
   13688:	mov	r2, #5
   1368c:	bl	1148c <dcgettext@plt>
   13690:	mov	r2, r9
   13694:	mov	r1, r0
   13698:	mov	r0, #1
   1369c:	bl	116b4 <errx@plt>
   136a0:	bl	11498 <__stack_chk_fail@plt>
   136a4:	ldr	r1, [pc, #92]	; 13708 <__assert_fail@plt+0x1f70>
   136a8:	mov	r2, #5
   136ac:	add	r1, pc, r1
   136b0:	bl	1148c <dcgettext@plt>
   136b4:	ldr	r2, [pc, #80]	; 1370c <__assert_fail@plt+0x1f74>
   136b8:	add	r2, pc, r2
   136bc:	add	r2, r2, #4
   136c0:	mov	r1, r0
   136c4:	mov	r0, #1
   136c8:	bl	114d4 <err@plt>
   136cc:	ldr	r1, [pc, #60]	; 13710 <__assert_fail@plt+0x1f78>
   136d0:	mov	r2, #5
   136d4:	add	r1, pc, r1
   136d8:	bl	1148c <dcgettext@plt>
   136dc:	mov	r1, r0
   136e0:	mov	r0, #1
   136e4:	bl	114d4 <err@plt>
   136e8:	ldr	r1, [pc, #36]	; 13714 <__assert_fail@plt+0x1f7c>
   136ec:	mov	r0, r8
   136f0:	add	r1, pc, r1
   136f4:	b	13688 <__assert_fail@plt+0x1ef0>
   136f8:	andeq	r4, r1, ip, asr sl
   136fc:	andeq	r0, r0, ip, asr r1
   13700:			; <UNDEFINED> instruction: 0x000041b8
   13704:	andeq	r4, r0, r0, lsr r1
   13708:	ldrdeq	r4, [r0], -r8
   1370c:	strdeq	r4, [r1], -r8
   13710:	andeq	r4, r0, r4, asr #1
   13714:	andeq	r4, r0, r0, ror #1
   13718:	push	{r4, lr}
   1371c:	mov	r4, r0
   13720:	bl	115b8 <strlen@plt>
   13724:	movw	r3, #4094	; 0xffe
   13728:	cmp	r0, r3
   1372c:	mov	ip, r0
   13730:	bhi	1375c <__assert_fail@plt+0x1fc4>
   13734:	ldr	r0, [pc, #52]	; 13770 <__assert_fail@plt+0x1fd8>
   13738:	mov	r3, #4096	; 0x1000
   1373c:	mov	r1, r4
   13740:	add	r2, ip, #1
   13744:	add	r0, pc, r0
   13748:	str	ip, [r0], #4
   1374c:	bl	114e0 <__memcpy_chk@plt>
   13750:	mov	r3, #0
   13754:	mov	r0, r3
   13758:	pop	{r4, pc}
   1375c:	bl	115dc <__errno_location@plt>
   13760:	mov	r2, #36	; 0x24
   13764:	mvn	r3, #0
   13768:	str	r2, [r0]
   1376c:	b	13754 <__assert_fail@plt+0x1fbc>
   13770:	andeq	r4, r1, ip, ror #22
   13774:	push	{r0, r1, r2, r3}
   13778:	ldr	r2, [pc, #80]	; 137d0 <__assert_fail@plt+0x2038>
   1377c:	ldr	ip, [pc, #80]	; 137d4 <__assert_fail@plt+0x203c>
   13780:	add	r2, pc, r2
   13784:	push	{r4, lr}
   13788:	sub	sp, sp, #8
   1378c:	ldr	r4, [r2, ip]
   13790:	add	r3, sp, #20
   13794:	str	r3, [sp]
   13798:	mov	r1, r3
   1379c:	ldr	r0, [sp, #16]
   137a0:	ldr	r3, [r4]
   137a4:	str	r3, [sp, #4]
   137a8:	bl	134ac <__assert_fail@plt+0x1d14>
   137ac:	ldr	r2, [sp, #4]
   137b0:	ldr	r3, [r4]
   137b4:	cmp	r2, r3
   137b8:	bne	137cc <__assert_fail@plt+0x2034>
   137bc:	add	sp, sp, #8
   137c0:	pop	{r4, lr}
   137c4:	add	sp, sp, #16
   137c8:	bx	lr
   137cc:	bl	11498 <__stack_chk_fail@plt>
   137d0:	andeq	r4, r1, r8, ror r8
   137d4:	andeq	r0, r0, ip, asr r1
   137d8:	push	{r0, r1, r2, r3}
   137dc:	ldr	r2, [pc, #100]	; 13848 <__assert_fail@plt+0x20b0>
   137e0:	ldr	ip, [pc, #100]	; 1384c <__assert_fail@plt+0x20b4>
   137e4:	add	r2, pc, r2
   137e8:	push	{r4, lr}
   137ec:	sub	sp, sp, #8
   137f0:	ldr	r4, [r2, ip]
   137f4:	add	r3, sp, #20
   137f8:	str	r3, [sp]
   137fc:	mov	r1, r3
   13800:	ldr	r0, [sp, #16]
   13804:	ldr	r3, [r4]
   13808:	str	r3, [sp, #4]
   1380c:	bl	134ac <__assert_fail@plt+0x1d14>
   13810:	subs	r3, r0, #0
   13814:	beq	1383c <__assert_fail@plt+0x20a4>
   13818:	bl	1160c <__strdup@plt>
   1381c:	ldr	r2, [sp, #4]
   13820:	ldr	r3, [r4]
   13824:	cmp	r2, r3
   13828:	bne	13844 <__assert_fail@plt+0x20ac>
   1382c:	add	sp, sp, #8
   13830:	pop	{r4, lr}
   13834:	add	sp, sp, #16
   13838:	bx	lr
   1383c:	mov	r0, r3
   13840:	b	1381c <__assert_fail@plt+0x2084>
   13844:	bl	11498 <__stack_chk_fail@plt>
   13848:	andeq	r4, r1, r4, lsl r8
   1384c:	andeq	r0, r0, ip, asr r1
   13850:	push	{r2, r3}
   13854:	push	{r4, lr}
   13858:	sub	sp, sp, #8
   1385c:	ldr	lr, [pc, #72]	; 138ac <__assert_fail@plt+0x2114>
   13860:	add	ip, sp, #20
   13864:	ldr	r4, [pc, #68]	; 138b0 <__assert_fail@plt+0x2118>
   13868:	add	lr, pc, lr
   1386c:	mov	r3, ip
   13870:	ldr	r2, [sp, #16]
   13874:	ldr	r4, [lr, r4]
   13878:	str	ip, [sp]
   1387c:	ldr	ip, [r4]
   13880:	str	ip, [sp, #4]
   13884:	bl	13524 <__assert_fail@plt+0x1d8c>
   13888:	ldr	r2, [sp, #4]
   1388c:	ldr	r3, [r4]
   13890:	cmp	r2, r3
   13894:	bne	138a8 <__assert_fail@plt+0x2110>
   13898:	add	sp, sp, #8
   1389c:	pop	{r4, lr}
   138a0:	add	sp, sp, #8
   138a4:	bx	lr
   138a8:	bl	11498 <__stack_chk_fail@plt>
   138ac:	muleq	r1, r0, r7
   138b0:	andeq	r0, r0, ip, asr r1
   138b4:	push	{r2, r3}
   138b8:	push	{r4, r5, r6, r7, lr}
   138bc:	sub	sp, sp, #12
   138c0:	ldr	lr, [pc, #196]	; 1398c <__assert_fail@plt+0x21f4>
   138c4:	add	ip, sp, #36	; 0x24
   138c8:	ldr	r5, [pc, #192]	; 13990 <__assert_fail@plt+0x21f8>
   138cc:	mov	r4, r0
   138d0:	add	lr, pc, lr
   138d4:	mov	r3, ip
   138d8:	ldr	r0, [pc, #180]	; 13994 <__assert_fail@plt+0x21fc>
   138dc:	mov	r7, r1
   138e0:	ldr	r5, [lr, r5]
   138e4:	mov	r1, #1
   138e8:	str	ip, [sp]
   138ec:	add	r0, pc, r0
   138f0:	ldr	r2, [sp, #32]
   138f4:	ldr	ip, [r5]
   138f8:	str	ip, [sp, #4]
   138fc:	bl	13524 <__assert_fail@plt+0x1d8c>
   13900:	mov	r1, r7
   13904:	mov	r6, r0
   13908:	mov	r0, r4
   1390c:	mov	r2, r6
   13910:	bl	11420 <fgets@plt>
   13914:	cmp	r0, #0
   13918:	beq	13960 <__assert_fail@plt+0x21c8>
   1391c:	mov	r0, r6
   13920:	bl	11690 <fclose@plt>
   13924:	mov	r0, r4
   13928:	bl	115b8 <strlen@plt>
   1392c:	ldr	r2, [sp, #4]
   13930:	sub	r0, r0, #1
   13934:	ldrsb	r3, [r4, r0]
   13938:	cmp	r3, #10
   1393c:	moveq	r3, #0
   13940:	strbeq	r3, [r4, r0]
   13944:	ldr	r3, [r5]
   13948:	cmp	r2, r3
   1394c:	bne	13988 <__assert_fail@plt+0x21f0>
   13950:	add	sp, sp, #12
   13954:	pop	{r4, r5, r6, r7, lr}
   13958:	add	sp, sp, #8
   1395c:	bx	lr
   13960:	ldr	r1, [pc, #48]	; 13998 <__assert_fail@plt+0x2200>
   13964:	mov	r2, #5
   13968:	add	r1, pc, r1
   1396c:	bl	1148c <dcgettext@plt>
   13970:	ldr	r2, [pc, #36]	; 1399c <__assert_fail@plt+0x2204>
   13974:	add	r2, pc, r2
   13978:	add	r2, r2, #4
   1397c:	mov	r1, r0
   13980:	mov	r0, #1
   13984:	bl	114d4 <err@plt>
   13988:	bl	11498 <__stack_chk_fail@plt>
   1398c:	andeq	r4, r1, r8, lsr #14
   13990:	andeq	r0, r0, ip, asr r1
   13994:	muleq	r0, r4, lr
   13998:	andeq	r3, r0, ip, lsl lr
   1399c:	andeq	r4, r1, ip, lsr r9
   139a0:	push	{r0, r1, r2, r3}
   139a4:	mov	r1, #1
   139a8:	push	{r4, r5, lr}
   139ac:	sub	sp, sp, #20
   139b0:	ldr	lr, [pc, #216]	; 13a90 <__assert_fail@plt+0x22f8>
   139b4:	add	ip, sp, #36	; 0x24
   139b8:	ldr	r4, [pc, #212]	; 13a94 <__assert_fail@plt+0x22fc>
   139bc:	add	lr, pc, lr
   139c0:	mov	r3, ip
   139c4:	ldr	r0, [pc, #204]	; 13a98 <__assert_fail@plt+0x2300>
   139c8:	ldr	r4, [lr, r4]
   139cc:	str	ip, [sp, #4]
   139d0:	add	r0, pc, r0
   139d4:	ldr	r2, [sp, #32]
   139d8:	ldr	ip, [r4]
   139dc:	str	ip, [sp, #12]
   139e0:	bl	13524 <__assert_fail@plt+0x1d8c>
   139e4:	ldr	r1, [pc, #176]	; 13a9c <__assert_fail@plt+0x2304>
   139e8:	add	r2, sp, #8
   139ec:	add	r1, pc, r1
   139f0:	mov	r5, r0
   139f4:	bl	11630 <fscanf@plt>
   139f8:	cmp	r0, #1
   139fc:	mov	r0, r5
   13a00:	beq	13a64 <__assert_fail@plt+0x22cc>
   13a04:	bl	11438 <ferror@plt>
   13a08:	cmp	r0, #0
   13a0c:	beq	13a3c <__assert_fail@plt+0x22a4>
   13a10:	ldr	r1, [pc, #136]	; 13aa0 <__assert_fail@plt+0x2308>
   13a14:	mov	r2, #5
   13a18:	mov	r0, #0
   13a1c:	add	r1, pc, r1
   13a20:	bl	1148c <dcgettext@plt>
   13a24:	ldr	r2, [pc, #120]	; 13aa4 <__assert_fail@plt+0x230c>
   13a28:	add	r2, pc, r2
   13a2c:	add	r2, r2, #4
   13a30:	mov	r1, r0
   13a34:	mov	r0, #1
   13a38:	bl	114d4 <err@plt>
   13a3c:	ldr	r1, [pc, #100]	; 13aa8 <__assert_fail@plt+0x2310>
   13a40:	mov	r2, #5
   13a44:	add	r1, pc, r1
   13a48:	bl	1148c <dcgettext@plt>
   13a4c:	ldr	r2, [pc, #88]	; 13aac <__assert_fail@plt+0x2314>
   13a50:	add	r2, pc, r2
   13a54:	add	r2, r2, #4
   13a58:	mov	r1, r0
   13a5c:	mov	r0, #1
   13a60:	bl	116b4 <errx@plt>
   13a64:	bl	11690 <fclose@plt>
   13a68:	ldr	r2, [sp, #12]
   13a6c:	ldr	r3, [r4]
   13a70:	ldr	r0, [sp, #8]
   13a74:	cmp	r2, r3
   13a78:	bne	13a8c <__assert_fail@plt+0x22f4>
   13a7c:	add	sp, sp, #20
   13a80:	pop	{r4, r5, lr}
   13a84:	add	sp, sp, #16
   13a88:	bx	lr
   13a8c:	bl	11498 <__stack_chk_fail@plt>
   13a90:	andeq	r4, r1, ip, lsr r6
   13a94:	andeq	r0, r0, ip, asr r1
   13a98:			; <UNDEFINED> instruction: 0x00003db0
   13a9c:	andeq	r3, r0, r0, lsr #14
   13aa0:	andeq	r3, r0, r8, ror #26
   13aa4:	andeq	r4, r1, r8, lsl #17
   13aa8:	andeq	r3, r0, r8, lsr #27
   13aac:	andeq	r4, r1, r0, ror #16
   13ab0:	push	{r0, r1, r2, r3}
   13ab4:	mov	r1, #1
   13ab8:	push	{r4, r5, lr}
   13abc:	sub	sp, sp, #28
   13ac0:	ldr	lr, [pc, #216]	; 13ba0 <__assert_fail@plt+0x2408>
   13ac4:	add	ip, sp, #44	; 0x2c
   13ac8:	ldr	r4, [pc, #212]	; 13ba4 <__assert_fail@plt+0x240c>
   13acc:	add	lr, pc, lr
   13ad0:	mov	r3, ip
   13ad4:	ldr	r0, [pc, #204]	; 13ba8 <__assert_fail@plt+0x2410>
   13ad8:	ldr	r4, [lr, r4]
   13adc:	str	ip, [sp, #4]
   13ae0:	add	r0, pc, r0
   13ae4:	ldr	r2, [sp, #40]	; 0x28
   13ae8:	ldr	ip, [r4]
   13aec:	str	ip, [sp, #20]
   13af0:	bl	13524 <__assert_fail@plt+0x1d8c>
   13af4:	ldr	r1, [pc, #176]	; 13bac <__assert_fail@plt+0x2414>
   13af8:	add	r2, sp, #8
   13afc:	add	r1, pc, r1
   13b00:	mov	r5, r0
   13b04:	bl	11630 <fscanf@plt>
   13b08:	cmp	r0, #1
   13b0c:	mov	r0, r5
   13b10:	beq	13b74 <__assert_fail@plt+0x23dc>
   13b14:	bl	11438 <ferror@plt>
   13b18:	cmp	r0, #0
   13b1c:	beq	13b4c <__assert_fail@plt+0x23b4>
   13b20:	ldr	r1, [pc, #136]	; 13bb0 <__assert_fail@plt+0x2418>
   13b24:	mov	r2, #5
   13b28:	mov	r0, #0
   13b2c:	add	r1, pc, r1
   13b30:	bl	1148c <dcgettext@plt>
   13b34:	ldr	r2, [pc, #120]	; 13bb4 <__assert_fail@plt+0x241c>
   13b38:	add	r2, pc, r2
   13b3c:	add	r2, r2, #4
   13b40:	mov	r1, r0
   13b44:	mov	r0, #1
   13b48:	bl	114d4 <err@plt>
   13b4c:	ldr	r1, [pc, #100]	; 13bb8 <__assert_fail@plt+0x2420>
   13b50:	mov	r2, #5
   13b54:	add	r1, pc, r1
   13b58:	bl	1148c <dcgettext@plt>
   13b5c:	ldr	r2, [pc, #88]	; 13bbc <__assert_fail@plt+0x2424>
   13b60:	add	r2, pc, r2
   13b64:	add	r2, r2, #4
   13b68:	mov	r1, r0
   13b6c:	mov	r0, #1
   13b70:	bl	116b4 <errx@plt>
   13b74:	bl	11690 <fclose@plt>
   13b78:	ldr	r2, [sp, #20]
   13b7c:	ldr	r3, [r4]
   13b80:	ldrd	r0, [sp, #8]
   13b84:	cmp	r2, r3
   13b88:	bne	13b9c <__assert_fail@plt+0x2404>
   13b8c:	add	sp, sp, #28
   13b90:	pop	{r4, r5, lr}
   13b94:	add	sp, sp, #16
   13b98:	bx	lr
   13b9c:	bl	11498 <__stack_chk_fail@plt>
   13ba0:	andeq	r4, r1, ip, lsr #10
   13ba4:	andeq	r0, r0, ip, asr r1
   13ba8:	andeq	r3, r0, r4, ror #19
   13bac:	andeq	r3, r0, r0, lsl #26
   13bb0:	andeq	r3, r0, r8, asr ip
   13bb4:	andeq	r4, r1, r8, ror r7
   13bb8:	muleq	r0, r8, ip
   13bbc:	andeq	r4, r1, r0, asr r7
   13bc0:	push	{r1, r2, r3}
   13bc4:	ldr	r2, [pc, #292]	; 13cf0 <__assert_fail@plt+0x2558>
   13bc8:	ldr	ip, [pc, #292]	; 13cf4 <__assert_fail@plt+0x255c>
   13bcc:	add	r2, pc, r2
   13bd0:	push	{r4, r5, r6, r7, r8, r9, lr}
   13bd4:	sub	sp, sp, #8
   13bd8:	ldr	r9, [r2, ip]
   13bdc:	add	r3, sp, #40	; 0x28
   13be0:	str	r3, [sp]
   13be4:	mov	r6, r0
   13be8:	mov	r1, r3
   13bec:	ldr	r0, [sp, #36]	; 0x24
   13bf0:	ldr	r3, [r9]
   13bf4:	str	r3, [sp, #4]
   13bf8:	bl	134ac <__assert_fail@plt+0x1d14>
   13bfc:	mov	r1, #1
   13c00:	movt	r1, #8
   13c04:	mov	r4, r0
   13c08:	bl	11528 <open64@plt>
   13c0c:	cmn	r0, #1
   13c10:	mov	r7, r0
   13c14:	beq	13cc8 <__assert_fail@plt+0x2530>
   13c18:	mov	r0, r6
   13c1c:	bl	115b8 <strlen@plt>
   13c20:	subs	r4, r0, #0
   13c24:	beq	13c98 <__assert_fail@plt+0x2500>
   13c28:	bl	115dc <__errno_location@plt>
   13c2c:	mov	r8, #0
   13c30:	mov	r5, r0
   13c34:	b	13c54 <__assert_fail@plt+0x24bc>
   13c38:	subs	r4, r4, r0
   13c3c:	ldr	r3, [r5]
   13c40:	addne	r6, r6, r0
   13c44:	cmp	r3, #11
   13c48:	beq	13c88 <__assert_fail@plt+0x24f0>
   13c4c:	cmp	r4, #0
   13c50:	beq	13c98 <__assert_fail@plt+0x2500>
   13c54:	str	r8, [r5]
   13c58:	mov	r0, r7
   13c5c:	mov	r1, r6
   13c60:	mov	r2, r4
   13c64:	bl	11660 <write@plt>
   13c68:	cmp	r0, #0
   13c6c:	bgt	13c38 <__assert_fail@plt+0x24a0>
   13c70:	ldr	r3, [r5]
   13c74:	cmp	r3, #11
   13c78:	cmpne	r3, #4
   13c7c:	beq	13c44 <__assert_fail@plt+0x24ac>
   13c80:	mvn	r4, #0
   13c84:	b	13c9c <__assert_fail@plt+0x2504>
   13c88:	movw	r0, #10000	; 0x2710
   13c8c:	bl	114f8 <usleep@plt>
   13c90:	cmp	r4, #0
   13c94:	bne	13c54 <__assert_fail@plt+0x24bc>
   13c98:	mov	r4, #0
   13c9c:	mov	r0, r7
   13ca0:	bl	1175c <close@plt>
   13ca4:	ldr	r2, [sp, #4]
   13ca8:	ldr	r3, [r9]
   13cac:	mov	r0, r4
   13cb0:	cmp	r2, r3
   13cb4:	bne	13cec <__assert_fail@plt+0x2554>
   13cb8:	add	sp, sp, #8
   13cbc:	pop	{r4, r5, r6, r7, r8, r9, lr}
   13cc0:	add	sp, sp, #12
   13cc4:	bx	lr
   13cc8:	ldr	r1, [pc, #40]	; 13cf8 <__assert_fail@plt+0x2560>
   13ccc:	mov	r2, #5
   13cd0:	mov	r0, #0
   13cd4:	add	r1, pc, r1
   13cd8:	bl	1148c <dcgettext@plt>
   13cdc:	mov	r2, r4
   13ce0:	mov	r1, r0
   13ce4:	mov	r0, #1
   13ce8:	bl	114d4 <err@plt>
   13cec:	bl	11498 <__stack_chk_fail@plt>
   13cf0:	andeq	r4, r1, ip, lsr #8
   13cf4:	andeq	r0, r0, ip, asr r1
   13cf8:	muleq	r0, ip, sl
   13cfc:	push	{r0, r1, r2, r3}
   13d00:	ldr	r2, [pc, #96]	; 13d68 <__assert_fail@plt+0x25d0>
   13d04:	ldr	ip, [pc, #96]	; 13d6c <__assert_fail@plt+0x25d4>
   13d08:	add	r2, pc, r2
   13d0c:	push	{r4, lr}
   13d10:	sub	sp, sp, #8
   13d14:	ldr	r4, [r2, ip]
   13d18:	add	r3, sp, #20
   13d1c:	str	r3, [sp]
   13d20:	mov	r1, r3
   13d24:	ldr	r0, [sp, #16]
   13d28:	ldr	r3, [r4]
   13d2c:	str	r3, [sp, #4]
   13d30:	bl	134ac <__assert_fail@plt+0x1d14>
   13d34:	mov	r1, #0
   13d38:	bl	11684 <access@plt>
   13d3c:	ldr	r2, [sp, #4]
   13d40:	ldr	r3, [r4]
   13d44:	rsbs	r0, r0, #1
   13d48:	movcc	r0, #0
   13d4c:	cmp	r2, r3
   13d50:	bne	13d64 <__assert_fail@plt+0x25cc>
   13d54:	add	sp, sp, #8
   13d58:	pop	{r4, lr}
   13d5c:	add	sp, sp, #16
   13d60:	bx	lr
   13d64:	bl	11498 <__stack_chk_fail@plt>
   13d68:	strdeq	r4, [r1], -r0
   13d6c:	andeq	r0, r0, ip, asr r1
   13d70:	push	{r1, r2, r3}
   13d74:	mov	r1, #0
   13d78:	push	{r4, lr}
   13d7c:	sub	sp, sp, #12
   13d80:	ldr	lr, [pc, #72]	; 13dd0 <__assert_fail@plt+0x2638>
   13d84:	add	ip, sp, #24
   13d88:	ldr	r4, [pc, #68]	; 13dd4 <__assert_fail@plt+0x263c>
   13d8c:	add	lr, pc, lr
   13d90:	mov	r3, ip
   13d94:	ldr	r2, [sp, #20]
   13d98:	ldr	r4, [lr, r4]
   13d9c:	str	ip, [sp]
   13da0:	ldr	ip, [r4]
   13da4:	str	ip, [sp, #4]
   13da8:	bl	13588 <__assert_fail@plt+0x1df0>
   13dac:	ldr	r2, [sp, #4]
   13db0:	ldr	r3, [r4]
   13db4:	cmp	r2, r3
   13db8:	bne	13dcc <__assert_fail@plt+0x2634>
   13dbc:	add	sp, sp, #12
   13dc0:	pop	{r4, lr}
   13dc4:	add	sp, sp, #12
   13dc8:	bx	lr
   13dcc:	bl	11498 <__stack_chk_fail@plt>
   13dd0:	andeq	r4, r1, ip, ror #4
   13dd4:	andeq	r0, r0, ip, asr r1
   13dd8:	push	{r1, r2, r3}
   13ddc:	mov	r1, #1
   13de0:	push	{r4, lr}
   13de4:	sub	sp, sp, #12
   13de8:	ldr	lr, [pc, #72]	; 13e38 <__assert_fail@plt+0x26a0>
   13dec:	add	ip, sp, #24
   13df0:	ldr	r4, [pc, #68]	; 13e3c <__assert_fail@plt+0x26a4>
   13df4:	add	lr, pc, lr
   13df8:	mov	r3, ip
   13dfc:	ldr	r2, [sp, #20]
   13e00:	ldr	r4, [lr, r4]
   13e04:	str	ip, [sp]
   13e08:	ldr	ip, [r4]
   13e0c:	str	ip, [sp, #4]
   13e10:	bl	13588 <__assert_fail@plt+0x1df0>
   13e14:	ldr	r2, [sp, #4]
   13e18:	ldr	r3, [r4]
   13e1c:	cmp	r2, r3
   13e20:	bne	13e34 <__assert_fail@plt+0x269c>
   13e24:	add	sp, sp, #12
   13e28:	pop	{r4, lr}
   13e2c:	add	sp, sp, #12
   13e30:	bx	lr
   13e34:	bl	11498 <__stack_chk_fail@plt>
   13e38:	andeq	r4, r1, r4, lsl #4
   13e3c:	andeq	r0, r0, ip, asr r1
   13e40:	cmp	r0, #0
   13e44:	mov	r3, #0
   13e48:	str	r3, [r1]
   13e4c:	bxeq	lr
   13e50:	ldrb	r2, [r0]
   13e54:	cmp	r2, #47	; 0x2f
   13e58:	bne	13ea0 <__assert_fail@plt+0x2708>
   13e5c:	ldrsb	r3, [r0, #1]
   13e60:	cmp	r3, #47	; 0x2f
   13e64:	bne	13ea8 <__assert_fail@plt+0x2710>
   13e68:	mov	r3, r0
   13e6c:	b	13e8c <__assert_fail@plt+0x26f4>
   13e70:	ldrb	r2, [r3, #1]
   13e74:	mov	r3, r0
   13e78:	cmp	r2, #47	; 0x2f
   13e7c:	bne	13ea0 <__assert_fail@plt+0x2708>
   13e80:	ldrsb	r2, [r0, #1]
   13e84:	cmp	r2, #47	; 0x2f
   13e88:	bne	13ea8 <__assert_fail@plt+0x2710>
   13e8c:	cmn	r3, #1
   13e90:	add	r0, r0, #1
   13e94:	bne	13e70 <__assert_fail@plt+0x26d8>
   13e98:	mov	r0, #0
   13e9c:	bx	lr
   13ea0:	cmp	r2, #0
   13ea4:	beq	13e98 <__assert_fail@plt+0x2700>
   13ea8:	mov	r3, #1
   13eac:	str	r3, [r1]
   13eb0:	ldrsb	r3, [r0, #1]
   13eb4:	cmp	r3, #47	; 0x2f
   13eb8:	cmpne	r3, #0
   13ebc:	bxeq	lr
   13ec0:	mov	r3, #2
   13ec4:	str	r3, [r1]
   13ec8:	ldrb	r2, [r0, r3]
   13ecc:	add	r3, r3, #1
   13ed0:	cmp	r2, #47	; 0x2f
   13ed4:	cmpne	r2, #0
   13ed8:	bne	13ec4 <__assert_fail@plt+0x272c>
   13edc:	bx	lr
   13ee0:	push	{r3, r4, r5, r6, r7, lr}
   13ee4:	mov	r7, r1
   13ee8:	ldrb	r3, [r0]
   13eec:	cmp	r3, #0
   13ef0:	beq	13f68 <__assert_fail@plt+0x27d0>
   13ef4:	mov	r4, #0
   13ef8:	mov	r5, r0
   13efc:	mov	r6, r4
   13f00:	b	13f30 <__assert_fail@plt+0x2798>
   13f04:	cmp	r3, #92	; 0x5c
   13f08:	mov	r0, r7
   13f0c:	mov	r1, r3
   13f10:	beq	13f58 <__assert_fail@plt+0x27c0>
   13f14:	bl	115c4 <strchr@plt>
   13f18:	cmp	r0, #0
   13f1c:	bne	13f60 <__assert_fail@plt+0x27c8>
   13f20:	ldrb	r3, [r5, #1]!
   13f24:	add	r4, r4, #1
   13f28:	cmp	r3, #0
   13f2c:	beq	13f50 <__assert_fail@plt+0x27b8>
   13f30:	cmp	r6, #0
   13f34:	sxtb	r3, r3
   13f38:	beq	13f04 <__assert_fail@plt+0x276c>
   13f3c:	ldrb	r3, [r5, #1]!
   13f40:	mov	r6, #0
   13f44:	add	r4, r4, #1
   13f48:	cmp	r3, #0
   13f4c:	bne	13f30 <__assert_fail@plt+0x2798>
   13f50:	rsb	r0, r6, r4
   13f54:	pop	{r3, r4, r5, r6, r7, pc}
   13f58:	mov	r6, #1
   13f5c:	b	13f20 <__assert_fail@plt+0x2788>
   13f60:	mov	r0, r4
   13f64:	pop	{r3, r4, r5, r6, r7, pc}
   13f68:	mov	r0, r3
   13f6c:	pop	{r3, r4, r5, r6, r7, pc}
   13f70:	ldr	r3, [pc, #224]	; 14058 <__assert_fail@plt+0x28c0>
   13f74:	push	{r4, r5, r6, r7, r8, r9, lr}
   13f78:	mov	r6, r0
   13f7c:	ldr	r0, [pc, #216]	; 1405c <__assert_fail@plt+0x28c4>
   13f80:	add	r3, pc, r3
   13f84:	sub	sp, sp, #12
   13f88:	mov	r4, #0
   13f8c:	mov	r9, r1
   13f90:	mov	r5, r2
   13f94:	ldr	r8, [r3, r0]
   13f98:	str	r4, [sp]
   13f9c:	ldr	r3, [r8]
   13fa0:	str	r3, [sp, #4]
   13fa4:	bl	115dc <__errno_location@plt>
   13fa8:	cmp	r6, r4
   13fac:	mov	r7, r0
   13fb0:	str	r4, [r0]
   13fb4:	beq	13fc4 <__assert_fail@plt+0x282c>
   13fb8:	ldrsb	r3, [r6]
   13fbc:	cmp	r3, r4
   13fc0:	bne	13fdc <__assert_fail@plt+0x2844>
   13fc4:	ldr	r1, [pc, #148]	; 14060 <__assert_fail@plt+0x28c8>
   13fc8:	mov	r2, r9
   13fcc:	mov	r3, r6
   13fd0:	mov	r0, #1
   13fd4:	add	r1, pc, r1
   13fd8:	bl	116b4 <errx@plt>
   13fdc:	mov	r3, r4
   13fe0:	mov	r2, r5
   13fe4:	mov	r0, r6
   13fe8:	mov	r1, sp
   13fec:	bl	11468 <__strtoull_internal@plt>
   13ff0:	ldr	r3, [r7]
   13ff4:	cmp	r3, r4
   13ff8:	bne	14034 <__assert_fail@plt+0x289c>
   13ffc:	ldr	r3, [sp]
   14000:	cmp	r6, r3
   14004:	beq	13fc4 <__assert_fail@plt+0x282c>
   14008:	cmp	r3, r4
   1400c:	beq	1401c <__assert_fail@plt+0x2884>
   14010:	ldrsb	r3, [r3]
   14014:	cmp	r3, r4
   14018:	bne	13fc4 <__assert_fail@plt+0x282c>
   1401c:	ldr	r2, [sp, #4]
   14020:	ldr	r3, [r8]
   14024:	cmp	r2, r3
   14028:	bne	14054 <__assert_fail@plt+0x28bc>
   1402c:	add	sp, sp, #12
   14030:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14034:	cmp	r3, #34	; 0x22
   14038:	bne	13fc4 <__assert_fail@plt+0x282c>
   1403c:	ldr	r1, [pc, #32]	; 14064 <__assert_fail@plt+0x28cc>
   14040:	mov	r2, r9
   14044:	mov	r3, r6
   14048:	mov	r0, #1
   1404c:	add	r1, pc, r1
   14050:	bl	114d4 <err@plt>
   14054:	bl	11498 <__stack_chk_fail@plt>
   14058:	andeq	r4, r1, r8, ror r0
   1405c:	andeq	r0, r0, ip, asr r1
   14060:	andeq	r3, r0, r0, lsr r8
   14064:			; <UNDEFINED> instruction: 0x000037b8
   14068:	ldr	r3, [pc, #596]	; 142c4 <__assert_fail@plt+0x2b2c>
   1406c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14070:	add	r3, pc, r3
   14074:	subs	r6, r0, #0
   14078:	ldr	r0, [pc, #584]	; 142c8 <__assert_fail@plt+0x2b30>
   1407c:	mov	r8, r1
   14080:	mov	r1, r3
   14084:	sub	sp, sp, #20
   14088:	mov	r9, r2
   1408c:	ldr	sl, [r1, r0]
   14090:	mov	r2, #0
   14094:	mov	r3, #0
   14098:	ldr	r1, [sl]
   1409c:	strd	r2, [r8]
   140a0:	str	r1, [sp, #12]
   140a4:	beq	1418c <__assert_fail@plt+0x29f4>
   140a8:	ldrb	r5, [r6]
   140ac:	cmp	r5, #0
   140b0:	beq	1418c <__assert_fail@plt+0x29f4>
   140b4:	str	r6, [sp, #8]
   140b8:	bl	11588 <__ctype_b_loc@plt>
   140bc:	mov	r3, r6
   140c0:	ldr	r1, [r0]
   140c4:	b	140d8 <__assert_fail@plt+0x2940>
   140c8:	add	r2, r3, #1
   140cc:	str	r2, [sp, #8]
   140d0:	ldrb	r5, [r3, #1]
   140d4:	mov	r3, r2
   140d8:	lsl	r2, r5, #1
   140dc:	ldrh	r4, [r1, r2]
   140e0:	and	r4, r4, #8192	; 0x2000
   140e4:	uxth	r4, r4
   140e8:	cmp	r4, #0
   140ec:	bne	140c8 <__assert_fail@plt+0x2930>
   140f0:	cmp	r5, #45	; 0x2d
   140f4:	beq	1418c <__assert_fail@plt+0x29f4>
   140f8:	add	r5, sp, #16
   140fc:	str	r4, [r5, #-8]!
   14100:	bl	115dc <__errno_location@plt>
   14104:	mov	r2, r4
   14108:	mov	r1, r5
   1410c:	mov	r3, r4
   14110:	mov	r7, r0
   14114:	mov	r0, r6
   14118:	str	r4, [r7]
   1411c:	bl	11468 <__strtoull_internal@plt>
   14120:	mov	r5, r1
   14124:	ldr	r1, [sp, #8]
   14128:	mov	r4, r0
   1412c:	cmp	r1, r6
   14130:	beq	1418c <__assert_fail@plt+0x29f4>
   14134:	ldr	r3, [r7]
   14138:	cmp	r3, #0
   1413c:	bne	14170 <__assert_fail@plt+0x29d8>
   14140:	cmp	r1, #0
   14144:	beq	14274 <__assert_fail@plt+0x2adc>
   14148:	ldrb	r0, [r1]
   1414c:	cmp	r0, #0
   14150:	bne	14194 <__assert_fail@plt+0x29fc>
   14154:	strd	r4, [r8]
   14158:	ldr	r2, [sp, #12]
   1415c:	ldr	r3, [sl]
   14160:	cmp	r2, r3
   14164:	bne	142c0 <__assert_fail@plt+0x2b28>
   14168:	add	sp, sp, #20
   1416c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14170:	subs	r2, r4, #1
   14174:	mvn	r6, #2
   14178:	sbc	r3, r5, #0
   1417c:	mvn	r7, #0
   14180:	cmp	r3, r7
   14184:	cmpeq	r2, r6
   14188:	bls	14140 <__assert_fail@plt+0x29a8>
   1418c:	mvn	r0, #0
   14190:	b	14158 <__assert_fail@plt+0x29c0>
   14194:	ldrb	r2, [r1, #1]
   14198:	sxtb	r3, r2
   1419c:	cmp	r3, #105	; 0x69
   141a0:	beq	1427c <__assert_fail@plt+0x2ae4>
   141a4:	cmp	r3, #66	; 0x42
   141a8:	beq	14258 <__assert_fail@plt+0x2ac0>
   141ac:	cmp	r2, #0
   141b0:	bne	1418c <__assert_fail@plt+0x29f4>
   141b4:	mov	r6, #1024	; 0x400
   141b8:	ldr	r7, [pc, #268]	; 142cc <__assert_fail@plt+0x2b34>
   141bc:	sxtb	r3, r0
   141c0:	str	r3, [sp, #4]
   141c4:	add	r7, pc, r7
   141c8:	mov	r1, r3
   141cc:	mov	r0, r7
   141d0:	bl	115c4 <strchr@plt>
   141d4:	ldr	r3, [sp, #4]
   141d8:	cmp	r0, #0
   141dc:	rsbne	fp, r7, r0
   141e0:	addne	fp, fp, #1
   141e4:	beq	14298 <__assert_fail@plt+0x2b00>
   141e8:	cmp	fp, #0
   141ec:	beq	14248 <__assert_fail@plt+0x2ab0>
   141f0:	asr	r7, r6, #31
   141f4:	mvn	r0, #0
   141f8:	mvn	r1, #0
   141fc:	mov	r2, r6
   14200:	mov	r3, r7
   14204:	bl	15f74 <__assert_fail@plt+0x47dc>
   14208:	cmp	r1, r5
   1420c:	cmpeq	r0, r4
   14210:	bcc	1426c <__assert_fail@plt+0x2ad4>
   14214:	sub	ip, fp, #1
   14218:	mov	r3, #0
   1421c:	b	14230 <__assert_fail@plt+0x2a98>
   14220:	cmp	r1, r5
   14224:	cmpeq	r0, r4
   14228:	add	r3, r3, #1
   1422c:	bcc	1426c <__assert_fail@plt+0x2ad4>
   14230:	mul	r2, r4, r7
   14234:	cmp	r3, ip
   14238:	mla	r2, r6, r5, r2
   1423c:	umull	r4, r5, r4, r6
   14240:	add	r5, r2, r5
   14244:	bne	14220 <__assert_fail@plt+0x2a88>
   14248:	mov	r0, #0
   1424c:	cmp	r9, #0
   14250:	strne	fp, [r9]
   14254:	b	14154 <__assert_fail@plt+0x29bc>
   14258:	ldrsb	r3, [r1, #2]
   1425c:	cmp	r3, #0
   14260:	bne	1418c <__assert_fail@plt+0x29f4>
   14264:	mov	r6, #1000	; 0x3e8
   14268:	b	141b8 <__assert_fail@plt+0x2a20>
   1426c:	mvn	r0, #1
   14270:	b	1424c <__assert_fail@plt+0x2ab4>
   14274:	mov	r0, r1
   14278:	b	14154 <__assert_fail@plt+0x29bc>
   1427c:	ldrsb	r3, [r1, #2]
   14280:	cmp	r3, #66	; 0x42
   14284:	bne	1418c <__assert_fail@plt+0x29f4>
   14288:	ldrsb	r3, [r1, #3]
   1428c:	cmp	r3, #0
   14290:	beq	141b4 <__assert_fail@plt+0x2a1c>
   14294:	b	1418c <__assert_fail@plt+0x29f4>
   14298:	ldr	r7, [pc, #48]	; 142d0 <__assert_fail@plt+0x2b38>
   1429c:	mov	r1, r3
   142a0:	add	r7, pc, r7
   142a4:	mov	r0, r7
   142a8:	bl	115c4 <strchr@plt>
   142ac:	cmp	r0, #0
   142b0:	beq	1418c <__assert_fail@plt+0x29f4>
   142b4:	rsb	r7, r7, r0
   142b8:	add	fp, r7, #1
   142bc:	b	141e8 <__assert_fail@plt+0x2a50>
   142c0:	bl	11498 <__stack_chk_fail@plt>
   142c4:	andeq	r3, r1, r8, lsl #31
   142c8:	andeq	r0, r0, ip, asr r1
   142cc:	andeq	r3, r0, ip, asr #12
   142d0:	andeq	r3, r0, ip, ror r5
   142d4:	mov	r2, #0
   142d8:	b	14068 <__assert_fail@plt+0x28d0>
   142dc:	push	{r4, r5, r6, lr}
   142e0:	subs	r6, r0, #0
   142e4:	beq	14368 <__assert_fail@plt+0x2bd0>
   142e8:	ldrb	r4, [r6]
   142ec:	cmp	r4, #0
   142f0:	beq	14370 <__assert_fail@plt+0x2bd8>
   142f4:	bl	11588 <__ctype_b_loc@plt>
   142f8:	mov	r3, r6
   142fc:	ldr	r5, [r0]
   14300:	b	1431c <__assert_fail@plt+0x2b84>
   14304:	cmn	r3, #1
   14308:	beq	14358 <__assert_fail@plt+0x2bc0>
   1430c:	ldrb	r4, [r3, #1]
   14310:	mov	r3, r1
   14314:	cmp	r4, #0
   14318:	beq	14360 <__assert_fail@plt+0x2bc8>
   1431c:	lsl	r4, r4, #1
   14320:	mov	ip, r3
   14324:	add	r1, r3, #1
   14328:	ldrh	r2, [r5, r4]
   1432c:	tst	r2, #2048	; 0x800
   14330:	bne	14304 <__assert_fail@plt+0x2b6c>
   14334:	cmp	ip, #0
   14338:	cmpne	ip, r6
   1433c:	movls	r0, #0
   14340:	movhi	r0, #1
   14344:	popls	{r4, r5, r6, pc}
   14348:	ldrsb	r0, [ip]
   1434c:	rsbs	r0, r0, #1
   14350:	movcc	r0, #0
   14354:	pop	{r4, r5, r6, pc}
   14358:	mov	r0, #0
   1435c:	pop	{r4, r5, r6, pc}
   14360:	mov	ip, r1
   14364:	b	14334 <__assert_fail@plt+0x2b9c>
   14368:	mov	r0, r6
   1436c:	pop	{r4, r5, r6, pc}
   14370:	mov	r0, r4
   14374:	pop	{r4, r5, r6, pc}
   14378:	cmp	r1, #0
   1437c:	push	{r4, r5}
   14380:	sub	r4, r1, #1
   14384:	beq	143f0 <__assert_fail@plt+0x2c58>
   14388:	ldrb	r1, [r0]
   1438c:	cmp	r1, #0
   14390:	beq	143f0 <__assert_fail@plt+0x2c58>
   14394:	sxtb	r1, r1
   14398:	sxtb	r2, r2
   1439c:	cmp	r1, r2
   143a0:	beq	143dc <__assert_fail@plt+0x2c44>
   143a4:	add	r1, r0, #1
   143a8:	mov	r3, #0
   143ac:	b	143c8 <__assert_fail@plt+0x2c30>
   143b0:	ldrb	r0, [r1], #1
   143b4:	cmp	r0, #0
   143b8:	sxtb	ip, r0
   143bc:	beq	143dc <__assert_fail@plt+0x2c44>
   143c0:	cmp	ip, r2
   143c4:	beq	143e4 <__assert_fail@plt+0x2c4c>
   143c8:	cmp	r3, r4
   143cc:	mov	r5, r1
   143d0:	add	r3, r3, #1
   143d4:	bne	143b0 <__assert_fail@plt+0x2c18>
   143d8:	mov	r0, #0
   143dc:	pop	{r4, r5}
   143e0:	bx	lr
   143e4:	mov	r0, r5
   143e8:	pop	{r4, r5}
   143ec:	bx	lr
   143f0:	mov	r0, r1
   143f4:	b	143dc <__assert_fail@plt+0x2c44>
   143f8:	ldr	r3, [pc, #228]	; 144e4 <__assert_fail@plt+0x2d4c>
   143fc:	ldr	r2, [pc, #228]	; 144e8 <__assert_fail@plt+0x2d50>
   14400:	add	r3, pc, r3
   14404:	push	{r4, r6, r7, r8, r9, lr}
   14408:	subs	r6, r0, #0
   1440c:	ldr	r7, [r3, r2]
   14410:	mov	r0, r3
   14414:	sub	sp, sp, #8
   14418:	mov	r4, #0
   1441c:	mov	r8, r1
   14420:	ldr	r3, [r7]
   14424:	str	r4, [sp]
   14428:	str	r3, [sp, #4]
   1442c:	beq	1443c <__assert_fail@plt+0x2ca4>
   14430:	ldrsb	r3, [r6]
   14434:	cmp	r3, r4
   14438:	bne	14464 <__assert_fail@plt+0x2ccc>
   1443c:	bl	115dc <__errno_location@plt>
   14440:	ldr	r3, [r0]
   14444:	cmp	r3, #0
   14448:	bne	14490 <__assert_fail@plt+0x2cf8>
   1444c:	ldr	r1, [pc, #152]	; 144ec <__assert_fail@plt+0x2d54>
   14450:	mov	r2, r8
   14454:	mov	r3, r6
   14458:	mov	r0, #1
   1445c:	add	r1, pc, r1
   14460:	bl	116b4 <errx@plt>
   14464:	bl	115dc <__errno_location@plt>
   14468:	mov	r3, r4
   1446c:	mov	r1, sp
   14470:	mov	r2, #10
   14474:	mov	r9, r0
   14478:	str	r4, [r0]
   1447c:	mov	r0, r6
   14480:	bl	11708 <__strtoll_internal@plt>
   14484:	ldr	r3, [r9]
   14488:	cmp	r3, r4
   1448c:	beq	144a8 <__assert_fail@plt+0x2d10>
   14490:	ldr	r1, [pc, #88]	; 144f0 <__assert_fail@plt+0x2d58>
   14494:	mov	r2, r8
   14498:	mov	r3, r6
   1449c:	mov	r0, #1
   144a0:	add	r1, pc, r1
   144a4:	bl	114d4 <err@plt>
   144a8:	ldr	r3, [sp]
   144ac:	cmp	r6, r3
   144b0:	beq	1444c <__assert_fail@plt+0x2cb4>
   144b4:	cmp	r3, #0
   144b8:	beq	144c8 <__assert_fail@plt+0x2d30>
   144bc:	ldrsb	r3, [r3]
   144c0:	cmp	r3, #0
   144c4:	bne	1444c <__assert_fail@plt+0x2cb4>
   144c8:	ldr	r2, [sp, #4]
   144cc:	ldr	r3, [r7]
   144d0:	cmp	r2, r3
   144d4:	bne	144e0 <__assert_fail@plt+0x2d48>
   144d8:	add	sp, sp, #8
   144dc:	pop	{r4, r6, r7, r8, r9, pc}
   144e0:	bl	11498 <__stack_chk_fail@plt>
   144e4:	strdeq	r3, [r1], -r8
   144e8:	andeq	r0, r0, ip, asr r1
   144ec:	andeq	r3, r0, r8, lsr #7
   144f0:	andeq	r3, r0, r4, ror #6
   144f4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   144f8:	mov	r8, r0
   144fc:	mov	r9, r1
   14500:	bl	143f8 <__assert_fail@plt+0x2c60>
   14504:	mvn	r4, #0
   14508:	mov	r5, #0
   1450c:	adds	r6, r0, #-2147483648	; 0x80000000
   14510:	adc	r7, r1, #0
   14514:	cmp	r7, r5
   14518:	cmpeq	r6, r4
   1451c:	popls	{r3, r4, r5, r6, r7, r8, r9, pc}
   14520:	ldr	r1, [pc, #16]	; 14538 <__assert_fail@plt+0x2da0>
   14524:	mov	r2, r9
   14528:	mov	r3, r8
   1452c:	mov	r0, #1
   14530:	add	r1, pc, r1
   14534:	bl	116b4 <errx@plt>
   14538:	ldrdeq	r3, [r0], -r4
   1453c:	push	{r3, r4, r5, lr}
   14540:	mov	r4, r0
   14544:	mov	r5, r1
   14548:	bl	144f4 <__assert_fail@plt+0x2d5c>
   1454c:	add	ip, r0, #32768	; 0x8000
   14550:	cmp	ip, #65536	; 0x10000
   14554:	bcs	14560 <__assert_fail@plt+0x2dc8>
   14558:	sxth	r0, r0
   1455c:	pop	{r3, r4, r5, pc}
   14560:	ldr	r1, [pc, #16]	; 14578 <__assert_fail@plt+0x2de0>
   14564:	mov	r2, r5
   14568:	mov	r3, r4
   1456c:	mov	r0, #1
   14570:	add	r1, pc, r1
   14574:	bl	116b4 <errx@plt>
   14578:	muleq	r0, r4, r2
   1457c:	mov	r2, #10
   14580:	b	13f70 <__assert_fail@plt+0x27d8>
   14584:	push	{r3, r4, r5, r6, r7, lr}
   14588:	mov	r6, r0
   1458c:	mov	r7, r1
   14590:	bl	1457c <__assert_fail@plt+0x2de4>
   14594:	mvn	r4, #0
   14598:	mov	r5, #0
   1459c:	cmp	r1, r5
   145a0:	cmpeq	r0, r4
   145a4:	popls	{r3, r4, r5, r6, r7, pc}
   145a8:	ldr	r1, [pc, #16]	; 145c0 <__assert_fail@plt+0x2e28>
   145ac:	mov	r2, r7
   145b0:	mov	r3, r6
   145b4:	mov	r0, #1
   145b8:	add	r1, pc, r1
   145bc:	bl	116b4 <errx@plt>
   145c0:	andeq	r3, r0, ip, asr #4
   145c4:	push	{r3, r4, r5, lr}
   145c8:	mov	r4, r0
   145cc:	mov	r5, r1
   145d0:	bl	14584 <__assert_fail@plt+0x2dec>
   145d4:	cmp	r0, #65536	; 0x10000
   145d8:	bcs	145e4 <__assert_fail@plt+0x2e4c>
   145dc:	uxth	r0, r0
   145e0:	pop	{r3, r4, r5, pc}
   145e4:	ldr	r1, [pc, #16]	; 145fc <__assert_fail@plt+0x2e64>
   145e8:	mov	r2, r5
   145ec:	mov	r3, r4
   145f0:	mov	r0, #1
   145f4:	add	r1, pc, r1
   145f8:	bl	116b4 <errx@plt>
   145fc:	andeq	r3, r0, r0, lsl r2
   14600:	mov	r2, #16
   14604:	b	13f70 <__assert_fail@plt+0x27d8>
   14608:	ldr	r3, [pc, #216]	; 146e8 <__assert_fail@plt+0x2f50>
   1460c:	push	{r4, r5, r6, r7, r8, lr}
   14610:	subs	r4, r0, #0
   14614:	ldr	r0, [pc, #208]	; 146ec <__assert_fail@plt+0x2f54>
   14618:	add	r3, pc, r3
   1461c:	sub	sp, sp, #8
   14620:	mov	r5, #0
   14624:	mov	r7, r1
   14628:	ldr	r6, [r3, r0]
   1462c:	str	r5, [sp]
   14630:	ldr	r3, [r6]
   14634:	str	r3, [sp, #4]
   14638:	beq	14648 <__assert_fail@plt+0x2eb0>
   1463c:	ldrsb	r3, [r4]
   14640:	cmp	r3, r5
   14644:	bne	14670 <__assert_fail@plt+0x2ed8>
   14648:	bl	115dc <__errno_location@plt>
   1464c:	ldr	r3, [r0]
   14650:	cmp	r3, #0
   14654:	bne	14694 <__assert_fail@plt+0x2efc>
   14658:	ldr	r1, [pc, #144]	; 146f0 <__assert_fail@plt+0x2f58>
   1465c:	mov	r2, r7
   14660:	mov	r3, r4
   14664:	mov	r0, #1
   14668:	add	r1, pc, r1
   1466c:	bl	116b4 <errx@plt>
   14670:	bl	115dc <__errno_location@plt>
   14674:	mov	r1, sp
   14678:	mov	r8, r0
   1467c:	str	r5, [r0]
   14680:	mov	r0, r4
   14684:	bl	11654 <strtod@plt>
   14688:	ldr	r3, [r8]
   1468c:	cmp	r3, r5
   14690:	beq	146ac <__assert_fail@plt+0x2f14>
   14694:	ldr	r1, [pc, #88]	; 146f4 <__assert_fail@plt+0x2f5c>
   14698:	mov	r2, r7
   1469c:	mov	r3, r4
   146a0:	mov	r0, #1
   146a4:	add	r1, pc, r1
   146a8:	bl	114d4 <err@plt>
   146ac:	ldr	r3, [sp]
   146b0:	cmp	r4, r3
   146b4:	beq	14658 <__assert_fail@plt+0x2ec0>
   146b8:	cmp	r3, #0
   146bc:	beq	146cc <__assert_fail@plt+0x2f34>
   146c0:	ldrsb	r3, [r3]
   146c4:	cmp	r3, #0
   146c8:	bne	14658 <__assert_fail@plt+0x2ec0>
   146cc:	ldr	r2, [sp, #4]
   146d0:	ldr	r3, [r6]
   146d4:	cmp	r2, r3
   146d8:	bne	146e4 <__assert_fail@plt+0x2f4c>
   146dc:	add	sp, sp, #8
   146e0:	pop	{r4, r5, r6, r7, r8, pc}
   146e4:	bl	11498 <__stack_chk_fail@plt>
   146e8:	andeq	r3, r1, r0, ror #19
   146ec:	andeq	r0, r0, ip, asr r1
   146f0:	muleq	r0, ip, r1
   146f4:	andeq	r3, r0, r0, ror #2
   146f8:	ldr	r3, [pc, #220]	; 147dc <__assert_fail@plt+0x3044>
   146fc:	push	{r4, r5, r6, r7, r8, lr}
   14700:	subs	r4, r0, #0
   14704:	ldr	r0, [pc, #212]	; 147e0 <__assert_fail@plt+0x3048>
   14708:	add	r3, pc, r3
   1470c:	sub	sp, sp, #8
   14710:	mov	r5, #0
   14714:	mov	r7, r1
   14718:	ldr	r6, [r3, r0]
   1471c:	str	r5, [sp]
   14720:	ldr	r3, [r6]
   14724:	str	r3, [sp, #4]
   14728:	beq	14738 <__assert_fail@plt+0x2fa0>
   1472c:	ldrsb	r3, [r4]
   14730:	cmp	r3, r5
   14734:	bne	14760 <__assert_fail@plt+0x2fc8>
   14738:	bl	115dc <__errno_location@plt>
   1473c:	ldr	r3, [r0]
   14740:	cmp	r3, #0
   14744:	bne	14788 <__assert_fail@plt+0x2ff0>
   14748:	ldr	r1, [pc, #148]	; 147e4 <__assert_fail@plt+0x304c>
   1474c:	mov	r2, r7
   14750:	mov	r3, r4
   14754:	mov	r0, #1
   14758:	add	r1, pc, r1
   1475c:	bl	116b4 <errx@plt>
   14760:	bl	115dc <__errno_location@plt>
   14764:	mov	r1, sp
   14768:	mov	r2, #10
   1476c:	mov	r8, r0
   14770:	str	r5, [r0]
   14774:	mov	r0, r4
   14778:	bl	113e4 <strtol@plt>
   1477c:	ldr	r3, [r8]
   14780:	cmp	r3, r5
   14784:	beq	147a0 <__assert_fail@plt+0x3008>
   14788:	ldr	r1, [pc, #88]	; 147e8 <__assert_fail@plt+0x3050>
   1478c:	mov	r2, r7
   14790:	mov	r3, r4
   14794:	mov	r0, #1
   14798:	add	r1, pc, r1
   1479c:	bl	114d4 <err@plt>
   147a0:	ldr	r3, [sp]
   147a4:	cmp	r4, r3
   147a8:	beq	14748 <__assert_fail@plt+0x2fb0>
   147ac:	cmp	r3, #0
   147b0:	beq	147c0 <__assert_fail@plt+0x3028>
   147b4:	ldrsb	r3, [r3]
   147b8:	cmp	r3, #0
   147bc:	bne	14748 <__assert_fail@plt+0x2fb0>
   147c0:	ldr	r2, [sp, #4]
   147c4:	ldr	r3, [r6]
   147c8:	cmp	r2, r3
   147cc:	bne	147d8 <__assert_fail@plt+0x3040>
   147d0:	add	sp, sp, #8
   147d4:	pop	{r4, r5, r6, r7, r8, pc}
   147d8:	bl	11498 <__stack_chk_fail@plt>
   147dc:	strdeq	r3, [r1], -r0
   147e0:	andeq	r0, r0, ip, asr r1
   147e4:	andeq	r3, r0, ip, lsr #1
   147e8:	andeq	r3, r0, ip, rrx
   147ec:	ldr	r3, [pc, #220]	; 148d0 <__assert_fail@plt+0x3138>
   147f0:	push	{r4, r5, r6, r7, r8, lr}
   147f4:	subs	r4, r0, #0
   147f8:	ldr	r0, [pc, #212]	; 148d4 <__assert_fail@plt+0x313c>
   147fc:	add	r3, pc, r3
   14800:	sub	sp, sp, #8
   14804:	mov	r5, #0
   14808:	mov	r7, r1
   1480c:	ldr	r6, [r3, r0]
   14810:	str	r5, [sp]
   14814:	ldr	r3, [r6]
   14818:	str	r3, [sp, #4]
   1481c:	beq	1482c <__assert_fail@plt+0x3094>
   14820:	ldrsb	r3, [r4]
   14824:	cmp	r3, r5
   14828:	bne	14854 <__assert_fail@plt+0x30bc>
   1482c:	bl	115dc <__errno_location@plt>
   14830:	ldr	r3, [r0]
   14834:	cmp	r3, #0
   14838:	bne	1487c <__assert_fail@plt+0x30e4>
   1483c:	ldr	r1, [pc, #148]	; 148d8 <__assert_fail@plt+0x3140>
   14840:	mov	r2, r7
   14844:	mov	r3, r4
   14848:	mov	r0, #1
   1484c:	add	r1, pc, r1
   14850:	bl	116b4 <errx@plt>
   14854:	bl	115dc <__errno_location@plt>
   14858:	mov	r1, sp
   1485c:	mov	r2, #10
   14860:	mov	r8, r0
   14864:	str	r5, [r0]
   14868:	mov	r0, r4
   1486c:	bl	115ac <strtoul@plt>
   14870:	ldr	r3, [r8]
   14874:	cmp	r3, r5
   14878:	beq	14894 <__assert_fail@plt+0x30fc>
   1487c:	ldr	r1, [pc, #88]	; 148dc <__assert_fail@plt+0x3144>
   14880:	mov	r2, r7
   14884:	mov	r3, r4
   14888:	mov	r0, #1
   1488c:	add	r1, pc, r1
   14890:	bl	114d4 <err@plt>
   14894:	ldr	r3, [sp]
   14898:	cmp	r4, r3
   1489c:	beq	1483c <__assert_fail@plt+0x30a4>
   148a0:	cmp	r3, #0
   148a4:	beq	148b4 <__assert_fail@plt+0x311c>
   148a8:	ldrsb	r3, [r3]
   148ac:	cmp	r3, #0
   148b0:	bne	1483c <__assert_fail@plt+0x30a4>
   148b4:	ldr	r2, [sp, #4]
   148b8:	ldr	r3, [r6]
   148bc:	cmp	r2, r3
   148c0:	bne	148cc <__assert_fail@plt+0x3134>
   148c4:	add	sp, sp, #8
   148c8:	pop	{r4, r5, r6, r7, r8, pc}
   148cc:	bl	11498 <__stack_chk_fail@plt>
   148d0:	strdeq	r3, [r1], -ip
   148d4:	andeq	r0, r0, ip, asr r1
   148d8:			; <UNDEFINED> instruction: 0x00002fb8
   148dc:	andeq	r2, r0, r8, ror pc
   148e0:	ldr	ip, [pc, #132]	; 1496c <__assert_fail@plt+0x31d4>
   148e4:	push	{r4, r5, r6, lr}
   148e8:	add	ip, pc, ip
   148ec:	ldr	lr, [pc, #124]	; 14970 <__assert_fail@plt+0x31d8>
   148f0:	sub	sp, sp, #16
   148f4:	mov	r6, r1
   148f8:	mov	r5, r0
   148fc:	mov	r1, sp
   14900:	ldr	r4, [ip, lr]
   14904:	ldr	ip, [r4]
   14908:	str	ip, [sp, #12]
   1490c:	bl	142d4 <__assert_fail@plt+0x2b3c>
   14910:	cmp	r0, #0
   14914:	bne	14934 <__assert_fail@plt+0x319c>
   14918:	ldr	r2, [sp, #12]
   1491c:	ldr	r3, [r4]
   14920:	ldrd	r0, [sp]
   14924:	cmp	r2, r3
   14928:	bne	14968 <__assert_fail@plt+0x31d0>
   1492c:	add	sp, sp, #16
   14930:	pop	{r4, r5, r6, pc}
   14934:	bl	115dc <__errno_location@plt>
   14938:	mov	r2, r6
   1493c:	ldr	r3, [r0]
   14940:	mov	r0, #1
   14944:	cmp	r3, #0
   14948:	mov	r3, r5
   1494c:	beq	1495c <__assert_fail@plt+0x31c4>
   14950:	ldr	r1, [pc, #28]	; 14974 <__assert_fail@plt+0x31dc>
   14954:	add	r1, pc, r1
   14958:	bl	114d4 <err@plt>
   1495c:	ldr	r1, [pc, #20]	; 14978 <__assert_fail@plt+0x31e0>
   14960:	add	r1, pc, r1
   14964:	bl	116b4 <errx@plt>
   14968:	bl	11498 <__stack_chk_fail@plt>
   1496c:	andeq	r3, r1, r0, lsl r7
   14970:	andeq	r0, r0, ip, asr r1
   14974:			; <UNDEFINED> instruction: 0x00002eb0
   14978:	andeq	r2, r0, r4, lsr #29
   1497c:	push	{r4, lr}
   14980:	mov	r4, r1
   14984:	mov	r1, r2
   14988:	bl	14608 <__assert_fail@plt+0x2e70>
   1498c:	vldr	d7, [pc, #28]	; 149b0 <__assert_fail@plt+0x3218>
   14990:	vcvt.s32.f64	s11, d0
   14994:	vcvt.f64.s32	d6, s11
   14998:	vstr	s11, [r4]
   1499c:	vsub.f64	d0, d0, d6
   149a0:	vmul.f64	d0, d0, d7
   149a4:	vcvt.s32.f64	s0, d0
   149a8:	vstr	s0, [r4, #4]
   149ac:	pop	{r4, pc}
   149b0:	andeq	r0, r0, r0
   149b4:	smlawbmi	lr, r0, r4, r8
   149b8:	and	r3, r0, #61440	; 0xf000
   149bc:	cmp	r3, #16384	; 0x4000
   149c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   149c4:	moveq	r3, #100	; 0x64
   149c8:	beq	14a40 <__assert_fail@plt+0x32a8>
   149cc:	cmp	r3, #40960	; 0xa000
   149d0:	moveq	r3, #108	; 0x6c
   149d4:	beq	14a40 <__assert_fail@plt+0x32a8>
   149d8:	cmp	r3, #8192	; 0x2000
   149dc:	moveq	r3, #99	; 0x63
   149e0:	beq	14a40 <__assert_fail@plt+0x32a8>
   149e4:	cmp	r3, #24576	; 0x6000
   149e8:	moveq	r3, #98	; 0x62
   149ec:	beq	14a40 <__assert_fail@plt+0x32a8>
   149f0:	cmp	r3, #49152	; 0xc000
   149f4:	moveq	r3, #115	; 0x73
   149f8:	beq	14a40 <__assert_fail@plt+0x32a8>
   149fc:	cmp	r3, #4096	; 0x1000
   14a00:	moveq	r3, #112	; 0x70
   14a04:	beq	14a40 <__assert_fail@plt+0x32a8>
   14a08:	cmp	r3, #32768	; 0x8000
   14a0c:	beq	14a3c <__assert_fail@plt+0x32a4>
   14a10:	mov	r4, #9
   14a14:	mov	r3, #8
   14a18:	mov	r6, #7
   14a1c:	mov	r7, #6
   14a20:	mov	r2, #5
   14a24:	mov	r8, #4
   14a28:	mov	r9, #3
   14a2c:	mov	ip, #2
   14a30:	mov	sl, #1
   14a34:	mov	fp, #0
   14a38:	b	14a6c <__assert_fail@plt+0x32d4>
   14a3c:	mov	r3, #45	; 0x2d
   14a40:	strb	r3, [r1]
   14a44:	mov	r4, #10
   14a48:	mov	r3, #9
   14a4c:	mov	r6, #8
   14a50:	mov	r7, #7
   14a54:	mov	r2, #6
   14a58:	mov	r8, #5
   14a5c:	mov	r9, #4
   14a60:	mov	ip, #3
   14a64:	mov	sl, #2
   14a68:	mov	fp, #1
   14a6c:	tst	r0, #256	; 0x100
   14a70:	add	ip, r1, ip
   14a74:	moveq	r5, #45	; 0x2d
   14a78:	movne	r5, #114	; 0x72
   14a7c:	tst	r0, #128	; 0x80
   14a80:	strb	r5, [r1, fp]
   14a84:	moveq	r5, #45	; 0x2d
   14a88:	movne	r5, #119	; 0x77
   14a8c:	tst	r0, #2048	; 0x800
   14a90:	strb	r5, [r1, sl]
   14a94:	beq	14b30 <__assert_fail@plt+0x3398>
   14a98:	tst	r0, #64	; 0x40
   14a9c:	moveq	r5, #83	; 0x53
   14aa0:	movne	r5, #115	; 0x73
   14aa4:	tst	r0, #32
   14aa8:	strb	r5, [ip]
   14aac:	add	r2, r1, r2
   14ab0:	moveq	ip, #45	; 0x2d
   14ab4:	movne	ip, #114	; 0x72
   14ab8:	tst	r0, #16
   14abc:	strb	ip, [r1, r9]
   14ac0:	moveq	ip, #45	; 0x2d
   14ac4:	movne	ip, #119	; 0x77
   14ac8:	tst	r0, #1024	; 0x400
   14acc:	strb	ip, [r1, r8]
   14ad0:	beq	14b50 <__assert_fail@plt+0x33b8>
   14ad4:	tst	r0, #8
   14ad8:	moveq	ip, #83	; 0x53
   14adc:	movne	ip, #115	; 0x73
   14ae0:	tst	r0, #4
   14ae4:	strb	ip, [r2]
   14ae8:	add	r3, r1, r3
   14aec:	moveq	r2, #45	; 0x2d
   14af0:	movne	r2, #114	; 0x72
   14af4:	tst	r0, #2
   14af8:	strb	r2, [r1, r7]
   14afc:	moveq	r2, #45	; 0x2d
   14b00:	movne	r2, #119	; 0x77
   14b04:	tst	r0, #512	; 0x200
   14b08:	strb	r2, [r1, r6]
   14b0c:	beq	14b40 <__assert_fail@plt+0x33a8>
   14b10:	tst	r0, #1
   14b14:	moveq	r2, #84	; 0x54
   14b18:	movne	r2, #116	; 0x74
   14b1c:	strb	r2, [r3]
   14b20:	mov	r3, #0
   14b24:	strb	r3, [r1, r4]
   14b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   14b2c:	bx	lr
   14b30:	tst	r0, #64	; 0x40
   14b34:	moveq	r5, #45	; 0x2d
   14b38:	movne	r5, #120	; 0x78
   14b3c:	b	14aa4 <__assert_fail@plt+0x330c>
   14b40:	tst	r0, #1
   14b44:	moveq	r2, #45	; 0x2d
   14b48:	movne	r2, #120	; 0x78
   14b4c:	b	14b1c <__assert_fail@plt+0x3384>
   14b50:	tst	r0, #8
   14b54:	moveq	ip, #45	; 0x2d
   14b58:	movne	ip, #120	; 0x78
   14b5c:	b	14ae0 <__assert_fail@plt+0x3348>
   14b60:	ldr	r1, [pc, #580]	; 14dac <__assert_fail@plt+0x3614>
   14b64:	tst	r0, #2
   14b68:	ldr	ip, [pc, #576]	; 14db0 <__assert_fail@plt+0x3618>
   14b6c:	add	r1, pc, r1
   14b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b74:	sub	sp, sp, #100	; 0x64
   14b78:	ldr	r6, [r1, ip]
   14b7c:	addeq	r7, sp, #52	; 0x34
   14b80:	addne	lr, sp, #53	; 0x35
   14b84:	addne	r7, sp, #52	; 0x34
   14b88:	moveq	lr, r7
   14b8c:	mov	ip, #10
   14b90:	ldr	r1, [r6]
   14b94:	str	r1, [sp, #92]	; 0x5c
   14b98:	movne	r1, #32
   14b9c:	strbne	r1, [sp, #52]	; 0x34
   14ba0:	mov	r1, #1
   14ba4:	sub	r9, ip, #32
   14ba8:	rsb	r8, ip, #32
   14bac:	lsl	r5, r1, r9
   14bb0:	lsl	r4, r1, ip
   14bb4:	orr	r5, r5, r1, lsr r8
   14bb8:	cmp	r3, r5
   14bbc:	cmpeq	r2, r4
   14bc0:	bcc	14d2c <__assert_fail@plt+0x3594>
   14bc4:	add	ip, ip, #10
   14bc8:	cmp	ip, #70	; 0x46
   14bcc:	bne	14ba4 <__assert_fail@plt+0x340c>
   14bd0:	mov	r1, #60	; 0x3c
   14bd4:	movw	r5, #26215	; 0x6667
   14bd8:	movt	r5, #26214	; 0x6666
   14bdc:	ldr	r8, [pc, #464]	; 14db4 <__assert_fail@plt+0x361c>
   14be0:	mov	fp, #1
   14be4:	smull	sl, r9, r5, r1
   14be8:	add	r8, pc, r8
   14bec:	str	r8, [sp, #36]	; 0x24
   14bf0:	sub	r8, r1, #32
   14bf4:	asr	r4, r1, #31
   14bf8:	lsl	r5, fp, r8
   14bfc:	str	r4, [sp, #44]	; 0x2c
   14c00:	lsl	r4, fp, r1
   14c04:	subs	r4, r4, #1
   14c08:	str	r9, [sp, #40]	; 0x28
   14c0c:	rsb	r9, r1, #32
   14c10:	ldr	sl, [sp, #40]	; 0x28
   14c14:	orr	r5, r5, fp, lsr r9
   14c18:	ldr	fp, [sp, #44]	; 0x2c
   14c1c:	sbc	r5, r5, #0
   14c20:	tst	r0, #1
   14c24:	lsr	r1, r2, r1
   14c28:	rsb	fp, fp, sl, asr #2
   14c2c:	ldr	sl, [sp, #36]	; 0x24
   14c30:	orr	r1, r1, r3, lsl r9
   14c34:	and	r5, r5, r3
   14c38:	orr	r8, r1, r3, lsr r8
   14c3c:	and	r4, r4, r2
   14c40:	ldrb	r0, [sl, fp]
   14c44:	add	r3, lr, #1
   14c48:	strb	r0, [lr]
   14c4c:	bne	14d10 <__assert_fail@plt+0x3578>
   14c50:	orrs	fp, r4, r5
   14c54:	mov	r2, #0
   14c58:	strb	r2, [r3]
   14c5c:	beq	14d44 <__assert_fail@plt+0x35ac>
   14c60:	sub	lr, ip, #20
   14c64:	sub	ip, ip, #52	; 0x34
   14c68:	rsb	r3, lr, #32
   14c6c:	lsr	r0, r4, lr
   14c70:	orr	r0, r0, r5, lsl r3
   14c74:	lsr	r1, r5, lr
   14c78:	orr	r0, r0, r5, lsr ip
   14c7c:	mov	r2, #100	; 0x64
   14c80:	adds	r0, r0, #50	; 0x32
   14c84:	mov	r3, #0
   14c88:	adc	r1, r1, #0
   14c8c:	bl	15f74 <__assert_fail@plt+0x47dc>
   14c90:	mov	r4, r0
   14c94:	mov	r5, r1
   14c98:	cmp	r5, #0
   14c9c:	cmpeq	r4, #10
   14ca0:	addeq	r8, r8, #1
   14ca4:	beq	14d44 <__assert_fail@plt+0x35ac>
   14ca8:	orrs	r2, r4, r5
   14cac:	beq	14d44 <__assert_fail@plt+0x35ac>
   14cb0:	bl	116f0 <localeconv@plt>
   14cb4:	cmp	r0, #0
   14cb8:	beq	14d90 <__assert_fail@plt+0x35f8>
   14cbc:	ldr	r3, [r0]
   14cc0:	cmp	r3, #0
   14cc4:	beq	14da0 <__assert_fail@plt+0x3608>
   14cc8:	ldrsb	r2, [r3]
   14ccc:	cmp	r2, #0
   14cd0:	ldreq	r3, [pc, #224]	; 14db8 <__assert_fail@plt+0x3620>
   14cd4:	addeq	r3, pc, r3
   14cd8:	add	r9, sp, #60	; 0x3c
   14cdc:	ldr	ip, [pc, #216]	; 14dbc <__assert_fail@plt+0x3624>
   14ce0:	mov	r1, #32
   14ce4:	str	r3, [sp, #8]
   14ce8:	add	ip, pc, ip
   14cec:	str	r8, [sp, #4]
   14cf0:	mov	r0, r9
   14cf4:	strd	r4, [sp, #16]
   14cf8:	mov	r3, r1
   14cfc:	str	r7, [sp, #24]
   14d00:	mov	r2, #1
   14d04:	str	ip, [sp]
   14d08:	bl	11774 <__snprintf_chk@plt>
   14d0c:	b	14d70 <__assert_fail@plt+0x35d8>
   14d10:	cmp	r0, #66	; 0x42
   14d14:	addne	r3, lr, #3
   14d18:	movne	r1, #105	; 0x69
   14d1c:	movne	r2, #66	; 0x42
   14d20:	strbne	r1, [lr, #1]
   14d24:	strbne	r2, [lr, #2]
   14d28:	b	14c50 <__assert_fail@plt+0x34b8>
   14d2c:	subs	r1, ip, #10
   14d30:	strbeq	r1, [lr, #1]
   14d34:	moveq	r3, #66	; 0x42
   14d38:	moveq	r8, r2
   14d3c:	strbeq	r3, [lr]
   14d40:	bne	14bd4 <__assert_fail@plt+0x343c>
   14d44:	ldr	r3, [pc, #116]	; 14dc0 <__assert_fail@plt+0x3628>
   14d48:	add	r9, sp, #60	; 0x3c
   14d4c:	mov	r1, #32
   14d50:	str	r8, [sp, #4]
   14d54:	add	r3, pc, r3
   14d58:	str	r7, [sp, #8]
   14d5c:	str	r3, [sp]
   14d60:	mov	r0, r9
   14d64:	mov	r3, r1
   14d68:	mov	r2, #1
   14d6c:	bl	11774 <__snprintf_chk@plt>
   14d70:	mov	r0, r9
   14d74:	bl	1160c <__strdup@plt>
   14d78:	ldr	r2, [sp, #92]	; 0x5c
   14d7c:	ldr	r3, [r6]
   14d80:	cmp	r2, r3
   14d84:	bne	14d9c <__assert_fail@plt+0x3604>
   14d88:	add	sp, sp, #100	; 0x64
   14d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d90:	ldr	r3, [pc, #44]	; 14dc4 <__assert_fail@plt+0x362c>
   14d94:	add	r3, pc, r3
   14d98:	b	14cd8 <__assert_fail@plt+0x3540>
   14d9c:	bl	11498 <__stack_chk_fail@plt>
   14da0:	ldr	r3, [pc, #32]	; 14dc8 <__assert_fail@plt+0x3630>
   14da4:	add	r3, pc, r3
   14da8:	b	14cd8 <__assert_fail@plt+0x3540>
   14dac:	andeq	r3, r1, ip, lsl #9
   14db0:	andeq	r0, r0, ip, asr r1
   14db4:	andeq	r2, r0, r4, asr #24
   14db8:	andeq	r2, r0, r4, asr fp
   14dbc:	andeq	r2, r0, ip, asr #22
   14dc0:	andeq	r2, r0, ip, ror #21
   14dc4:	muleq	r0, r4, sl
   14dc8:	andeq	r2, r0, r4, lsl #21
   14dcc:	cmp	r0, #0
   14dd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14dd4:	mov	r8, r1
   14dd8:	mov	sl, r2
   14ddc:	mov	r9, r3
   14de0:	beq	14e9c <__assert_fail@plt+0x3704>
   14de4:	ldrb	r5, [r0]
   14de8:	cmp	r5, #0
   14dec:	beq	14e9c <__assert_fail@plt+0x3704>
   14df0:	cmp	r2, #0
   14df4:	cmpne	r1, #0
   14df8:	movne	ip, #0
   14dfc:	moveq	ip, #1
   14e00:	beq	14e9c <__assert_fail@plt+0x3704>
   14e04:	cmp	r3, #0
   14e08:	movne	r4, r0
   14e0c:	movne	r6, ip
   14e10:	bne	14e24 <__assert_fail@plt+0x368c>
   14e14:	b	14e9c <__assert_fail@plt+0x3704>
   14e18:	ldrb	r5, [r4, #1]!
   14e1c:	cmp	r5, #0
   14e20:	beq	14e94 <__assert_fail@plt+0x36fc>
   14e24:	cmp	sl, r6
   14e28:	bls	14ea4 <__assert_fail@plt+0x370c>
   14e2c:	cmp	ip, #0
   14e30:	ldrsb	r7, [r4, #1]
   14e34:	moveq	ip, r4
   14e38:	cmp	r5, #44	; 0x2c
   14e3c:	mov	r0, ip
   14e40:	moveq	r5, r4
   14e44:	movne	r5, #0
   14e48:	cmp	r7, #0
   14e4c:	addeq	r5, r4, #1
   14e50:	cmp	r5, #0
   14e54:	rsb	r1, ip, r5
   14e58:	beq	14e8c <__assert_fail@plt+0x36f4>
   14e5c:	cmp	ip, r5
   14e60:	bcs	14e9c <__assert_fail@plt+0x3704>
   14e64:	blx	r9
   14e68:	mov	ip, #0
   14e6c:	add	r3, r6, #1
   14e70:	cmn	r0, #1
   14e74:	beq	14e9c <__assert_fail@plt+0x3704>
   14e78:	str	r0, [r8, r6, lsl #2]
   14e7c:	mov	r6, r3
   14e80:	ldrsb	r2, [r5]
   14e84:	cmp	r2, ip
   14e88:	beq	14eac <__assert_fail@plt+0x3714>
   14e8c:	cmn	r4, #1
   14e90:	bne	14e18 <__assert_fail@plt+0x3680>
   14e94:	mov	r0, r6
   14e98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e9c:	mvn	r0, #0
   14ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ea4:	mvn	r0, #1
   14ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14eac:	mov	r6, r3
   14eb0:	b	14e94 <__assert_fail@plt+0x36fc>
   14eb4:	cmp	r0, #0
   14eb8:	push	{r4, lr}
   14ebc:	mov	r4, r3
   14ec0:	beq	14f38 <__assert_fail@plt+0x37a0>
   14ec4:	ldrb	ip, [r0]
   14ec8:	cmp	ip, #0
   14ecc:	beq	14f38 <__assert_fail@plt+0x37a0>
   14ed0:	cmp	r3, #0
   14ed4:	beq	14f38 <__assert_fail@plt+0x37a0>
   14ed8:	ldr	r3, [r3]
   14edc:	cmp	r3, #0
   14ee0:	blt	14f38 <__assert_fail@plt+0x37a0>
   14ee4:	cmp	r3, r2
   14ee8:	bhi	14f38 <__assert_fail@plt+0x37a0>
   14eec:	cmp	ip, #43	; 0x2b
   14ef0:	lsleq	ip, r3, #2
   14ef4:	addeq	r0, r0, #1
   14ef8:	movne	ip, #0
   14efc:	strne	ip, [r4]
   14f00:	movne	r3, ip
   14f04:	add	r1, r1, ip
   14f08:	rsb	r2, r3, r2
   14f0c:	ldr	r3, [sp, #8]
   14f10:	bl	14dcc <__assert_fail@plt+0x3634>
   14f14:	subs	r3, r0, #0
   14f18:	ble	14f30 <__assert_fail@plt+0x3798>
   14f1c:	ldr	r2, [r4]
   14f20:	mov	r0, r3
   14f24:	add	r3, r2, r3
   14f28:	str	r3, [r4]
   14f2c:	pop	{r4, pc}
   14f30:	mov	r0, r3
   14f34:	pop	{r4, pc}
   14f38:	mvn	r0, #0
   14f3c:	pop	{r4, pc}
   14f40:	cmp	r2, #0
   14f44:	cmpne	r0, #0
   14f48:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14f4c:	mov	r4, r0
   14f50:	mov	r7, r2
   14f54:	movne	r3, #0
   14f58:	moveq	r3, #1
   14f5c:	mov	r9, r1
   14f60:	beq	14ffc <__assert_fail@plt+0x3864>
   14f64:	cmp	r1, #0
   14f68:	beq	14ffc <__assert_fail@plt+0x3864>
   14f6c:	mov	r6, r0
   14f70:	mov	r8, #1
   14f74:	ldrb	r5, [r6], #1
   14f78:	cmp	r5, #0
   14f7c:	beq	14fec <__assert_fail@plt+0x3854>
   14f80:	cmp	r5, #44	; 0x2c
   14f84:	ldrsb	r0, [r4, #1]
   14f88:	moveq	r5, r4
   14f8c:	movne	r5, #0
   14f90:	cmp	r3, #0
   14f94:	moveq	r3, r4
   14f98:	cmp	r0, #0
   14f9c:	mov	r0, r3
   14fa0:	moveq	r5, r6
   14fa4:	cmp	r5, #0
   14fa8:	rsb	r1, r3, r5
   14fac:	beq	14fe4 <__assert_fail@plt+0x384c>
   14fb0:	cmp	r3, r5
   14fb4:	bcs	14ff4 <__assert_fail@plt+0x385c>
   14fb8:	blx	r7
   14fbc:	mov	r3, #0
   14fc0:	cmp	r0, #0
   14fc4:	and	r2, r0, #7
   14fc8:	poplt	{r3, r4, r5, r6, r7, r8, r9, pc}
   14fcc:	ldrb	r1, [r9, r0, asr #3]
   14fd0:	orr	r2, r1, r8, lsl r2
   14fd4:	strb	r2, [r9, r0, asr #3]
   14fd8:	ldrsb	r2, [r5]
   14fdc:	cmp	r2, r3
   14fe0:	beq	14fec <__assert_fail@plt+0x3854>
   14fe4:	adds	r4, r4, #1
   14fe8:	bne	14f74 <__assert_fail@plt+0x37dc>
   14fec:	mov	r0, #0
   14ff0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14ff4:	mvn	r0, #0
   14ff8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14ffc:	mvn	r0, #21
   15000:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15004:	cmp	r2, #0
   15008:	cmpne	r0, #0
   1500c:	push	{r4, r5, r6, r7, r8, lr}
   15010:	movne	r3, #0
   15014:	moveq	r3, #1
   15018:	mov	r4, r0
   1501c:	mov	r8, r2
   15020:	mov	r7, r1
   15024:	beq	150b8 <__assert_fail@plt+0x3920>
   15028:	cmp	r1, #0
   1502c:	beq	150b8 <__assert_fail@plt+0x3920>
   15030:	mov	r6, r0
   15034:	ldrb	r5, [r6], #1
   15038:	cmp	r5, #0
   1503c:	beq	150a8 <__assert_fail@plt+0x3910>
   15040:	cmp	r5, #44	; 0x2c
   15044:	ldrsb	r0, [r4, #1]
   15048:	moveq	r5, r4
   1504c:	movne	r5, #0
   15050:	cmp	r3, #0
   15054:	moveq	r3, r4
   15058:	cmp	r0, #0
   1505c:	mov	r0, r3
   15060:	moveq	r5, r6
   15064:	cmp	r5, #0
   15068:	rsb	r1, r3, r5
   1506c:	beq	150a0 <__assert_fail@plt+0x3908>
   15070:	cmp	r3, r5
   15074:	bcs	150b0 <__assert_fail@plt+0x3918>
   15078:	blx	r8
   1507c:	mov	r3, #0
   15080:	cmp	r0, #0
   15084:	poplt	{r4, r5, r6, r7, r8, pc}
   15088:	ldr	r2, [r7]
   1508c:	orr	r0, r2, r0
   15090:	str	r0, [r7]
   15094:	ldrsb	r2, [r5]
   15098:	cmp	r2, r3
   1509c:	beq	150a8 <__assert_fail@plt+0x3910>
   150a0:	adds	r4, r4, #1
   150a4:	bne	15034 <__assert_fail@plt+0x389c>
   150a8:	mov	r0, #0
   150ac:	pop	{r4, r5, r6, r7, r8, pc}
   150b0:	mvn	r0, #0
   150b4:	pop	{r4, r5, r6, r7, r8, pc}
   150b8:	mvn	r0, #21
   150bc:	pop	{r4, r5, r6, r7, r8, pc}
   150c0:	ldr	ip, [pc, #380]	; 15244 <__assert_fail@plt+0x3aac>
   150c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   150c8:	subs	r4, r0, #0
   150cc:	ldr	r0, [pc, #372]	; 15248 <__assert_fail@plt+0x3ab0>
   150d0:	add	ip, pc, ip
   150d4:	mov	r6, r2
   150d8:	sub	sp, sp, #12
   150dc:	mov	r2, ip
   150e0:	mov	r8, #0
   150e4:	ldr	r7, [ip, r0]
   150e8:	mov	r9, r1
   150ec:	str	r8, [sp]
   150f0:	ldr	r2, [r7]
   150f4:	str	r2, [sp, #4]
   150f8:	beq	15168 <__assert_fail@plt+0x39d0>
   150fc:	str	r3, [r1]
   15100:	str	r3, [r6]
   15104:	bl	115dc <__errno_location@plt>
   15108:	str	r8, [r0]
   1510c:	mov	r5, r0
   15110:	ldrsb	r3, [r4]
   15114:	cmp	r3, #58	; 0x3a
   15118:	beq	15184 <__assert_fail@plt+0x39ec>
   1511c:	mov	r0, r4
   15120:	mov	r2, #10
   15124:	mov	r1, sp
   15128:	bl	113e4 <strtol@plt>
   1512c:	str	r0, [r9]
   15130:	str	r0, [r6]
   15134:	ldr	r0, [r5]
   15138:	cmp	r0, #0
   1513c:	bne	15238 <__assert_fail@plt+0x3aa0>
   15140:	ldr	r3, [sp]
   15144:	cmp	r3, #0
   15148:	beq	15238 <__assert_fail@plt+0x3aa0>
   1514c:	cmp	r4, r3
   15150:	beq	15238 <__assert_fail@plt+0x3aa0>
   15154:	ldrsb	r2, [r3]
   15158:	cmp	r2, #58	; 0x3a
   1515c:	beq	151d0 <__assert_fail@plt+0x3a38>
   15160:	cmp	r2, #45	; 0x2d
   15164:	beq	151e0 <__assert_fail@plt+0x3a48>
   15168:	mov	r0, #0
   1516c:	ldr	r2, [sp, #4]
   15170:	ldr	r3, [r7]
   15174:	cmp	r2, r3
   15178:	bne	15240 <__assert_fail@plt+0x3aa8>
   1517c:	add	sp, sp, #12
   15180:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15184:	add	r4, r4, #1
   15188:	mov	r1, sp
   1518c:	mov	r2, #10
   15190:	mov	r0, r4
   15194:	bl	113e4 <strtol@plt>
   15198:	str	r0, [r6]
   1519c:	ldr	r3, [r5]
   151a0:	cmp	r3, #0
   151a4:	bne	15238 <__assert_fail@plt+0x3aa0>
   151a8:	ldr	r3, [sp]
   151ac:	cmp	r3, #0
   151b0:	beq	15238 <__assert_fail@plt+0x3aa0>
   151b4:	ldrsb	r2, [r3]
   151b8:	cmp	r2, #0
   151bc:	bne	15238 <__assert_fail@plt+0x3aa0>
   151c0:	cmp	r4, r3
   151c4:	movne	r0, #0
   151c8:	mvneq	r0, #0
   151cc:	b	1516c <__assert_fail@plt+0x39d4>
   151d0:	ldrsb	r2, [r3, #1]
   151d4:	cmp	r2, #0
   151d8:	streq	r0, [r6]
   151dc:	beq	1516c <__assert_fail@plt+0x39d4>
   151e0:	add	r4, r3, #1
   151e4:	mov	ip, #0
   151e8:	mov	r1, sp
   151ec:	mov	r2, #10
   151f0:	mov	r0, r4
   151f4:	str	ip, [r5]
   151f8:	str	ip, [sp]
   151fc:	bl	113e4 <strtol@plt>
   15200:	str	r0, [r6]
   15204:	ldr	r3, [r5]
   15208:	cmp	r3, #0
   1520c:	bne	15238 <__assert_fail@plt+0x3aa0>
   15210:	ldr	r2, [sp]
   15214:	cmp	r2, #0
   15218:	beq	15238 <__assert_fail@plt+0x3aa0>
   1521c:	ldrsb	r3, [r2]
   15220:	cmp	r3, #0
   15224:	bne	15238 <__assert_fail@plt+0x3aa0>
   15228:	cmp	r4, r2
   1522c:	movne	r0, #0
   15230:	mvneq	r0, #0
   15234:	b	1516c <__assert_fail@plt+0x39d4>
   15238:	mvn	r0, #0
   1523c:	b	1516c <__assert_fail@plt+0x39d4>
   15240:	bl	11498 <__stack_chk_fail@plt>
   15244:	andeq	r2, r1, r8, lsr #30
   15248:	andeq	r0, r0, ip, asr r1
   1524c:	rsbs	r2, r0, #1
   15250:	push	{r4, r5, r6, lr}
   15254:	movcc	r2, #0
   15258:	rsbs	r3, r1, #1
   1525c:	mov	r5, r0
   15260:	mov	r4, r1
   15264:	movcc	r3, #0
   15268:	ands	ip, r2, r3
   1526c:	bne	152d8 <__assert_fail@plt+0x3b40>
   15270:	orrs	r3, r2, r3
   15274:	bne	152e0 <__assert_fail@plt+0x3b48>
   15278:	bl	113d8 <strcmp@plt>
   1527c:	cmp	r0, #0
   15280:	beq	152d8 <__assert_fail@plt+0x3b40>
   15284:	mov	r0, r5
   15288:	bl	115b8 <strlen@plt>
   1528c:	mov	r6, r0
   15290:	mov	r0, r4
   15294:	bl	115b8 <strlen@plt>
   15298:	cmp	r6, #0
   1529c:	beq	152b0 <__assert_fail@plt+0x3b18>
   152a0:	sub	r3, r6, #1
   152a4:	ldrsb	r2, [r5, r3]
   152a8:	cmp	r2, #47	; 0x2f
   152ac:	moveq	r6, r3
   152b0:	cmp	r0, #0
   152b4:	beq	152c8 <__assert_fail@plt+0x3b30>
   152b8:	sub	r3, r0, #1
   152bc:	ldrsb	r2, [r4, r3]
   152c0:	cmp	r2, #47	; 0x2f
   152c4:	moveq	r0, r3
   152c8:	cmp	r6, r0
   152cc:	beq	152e8 <__assert_fail@plt+0x3b50>
   152d0:	mov	r0, #0
   152d4:	pop	{r4, r5, r6, pc}
   152d8:	mov	r0, #1
   152dc:	pop	{r4, r5, r6, pc}
   152e0:	mov	r0, ip
   152e4:	pop	{r4, r5, r6, pc}
   152e8:	mov	r0, r5
   152ec:	mov	r1, r4
   152f0:	mov	r2, r6
   152f4:	bl	11744 <strncmp@plt>
   152f8:	rsbs	r0, r0, #1
   152fc:	movcc	r0, #0
   15300:	pop	{r4, r5, r6, pc}
   15304:	ldr	r3, [pc, #248]	; 15404 <__assert_fail@plt+0x3c6c>
   15308:	cmp	r0, #0
   1530c:	cmpne	r1, #0
   15310:	ldr	r2, [pc, #240]	; 15408 <__assert_fail@plt+0x3c70>
   15314:	add	r3, pc, r3
   15318:	push	{r4, r5, r6, r7, r8, r9, lr}
   1531c:	sub	sp, sp, #20
   15320:	ldr	r9, [r3, r2]
   15324:	mov	r6, r1
   15328:	addne	r8, sp, #4
   1532c:	addne	r7, sp, #8
   15330:	ldr	r3, [r9]
   15334:	str	r3, [sp, #12]
   15338:	bne	15380 <__assert_fail@plt+0x3be8>
   1533c:	b	153f8 <__assert_fail@plt+0x3c60>
   15340:	cmp	r4, r3
   15344:	bne	153f8 <__assert_fail@plt+0x3c60>
   15348:	mov	r0, r5
   1534c:	mov	r1, r6
   15350:	mov	r2, r4
   15354:	bl	11744 <strncmp@plt>
   15358:	cmp	r0, #0
   1535c:	bne	153f8 <__assert_fail@plt+0x3c60>
   15360:	adds	r6, r6, r4
   15364:	moveq	r3, #0
   15368:	movne	r3, #1
   1536c:	adds	r0, r5, r4
   15370:	moveq	r3, #0
   15374:	andne	r3, r3, #1
   15378:	cmp	r3, #0
   1537c:	beq	153f8 <__assert_fail@plt+0x3c60>
   15380:	mov	r1, r8
   15384:	bl	13e40 <__assert_fail@plt+0x26a8>
   15388:	mov	r1, r7
   1538c:	mov	r5, r0
   15390:	mov	r0, r6
   15394:	bl	13e40 <__assert_fail@plt+0x26a8>
   15398:	ldr	r4, [sp, #4]
   1539c:	ldr	r3, [sp, #8]
   153a0:	mov	r6, r0
   153a4:	adds	r0, r3, r4
   153a8:	beq	153dc <__assert_fail@plt+0x3c44>
   153ac:	cmp	r0, #1
   153b0:	bne	15340 <__assert_fail@plt+0x3ba8>
   153b4:	cmp	r5, #0
   153b8:	beq	153c8 <__assert_fail@plt+0x3c30>
   153bc:	ldrsb	r2, [r5]
   153c0:	cmp	r2, #47	; 0x2f
   153c4:	beq	153e0 <__assert_fail@plt+0x3c48>
   153c8:	cmp	r6, #0
   153cc:	beq	15340 <__assert_fail@plt+0x3ba8>
   153d0:	ldrsb	r2, [r6]
   153d4:	cmp	r2, #47	; 0x2f
   153d8:	bne	15340 <__assert_fail@plt+0x3ba8>
   153dc:	mov	r0, #1
   153e0:	ldr	r2, [sp, #12]
   153e4:	ldr	r3, [r9]
   153e8:	cmp	r2, r3
   153ec:	bne	15400 <__assert_fail@plt+0x3c68>
   153f0:	add	sp, sp, #20
   153f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   153f8:	mov	r0, #0
   153fc:	b	153e0 <__assert_fail@plt+0x3c48>
   15400:	bl	11498 <__stack_chk_fail@plt>
   15404:	andeq	r2, r1, r4, ror #25
   15408:	andeq	r0, r0, ip, asr r1
   1540c:	rsbs	r3, r0, #1
   15410:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15414:	movcc	r3, #0
   15418:	rsbs	r4, r1, #1
   1541c:	mov	r7, r1
   15420:	mov	r6, r2
   15424:	mov	sl, r0
   15428:	movcc	r4, #0
   1542c:	tst	r3, r4
   15430:	bne	15494 <__assert_fail@plt+0x3cfc>
   15434:	cmp	r3, #0
   15438:	bne	154ac <__assert_fail@plt+0x3d14>
   1543c:	cmp	r4, #0
   15440:	bne	154bc <__assert_fail@plt+0x3d24>
   15444:	bl	115b8 <strlen@plt>
   15448:	mvn	r3, r0
   1544c:	cmp	r6, r3
   15450:	mov	r5, r0
   15454:	bhi	154a4 <__assert_fail@plt+0x3d0c>
   15458:	add	r9, r0, r6
   1545c:	add	r0, r9, #1
   15460:	bl	11534 <malloc@plt>
   15464:	subs	r8, r0, #0
   15468:	beq	154c4 <__assert_fail@plt+0x3d2c>
   1546c:	mov	r1, sl
   15470:	mov	r2, r5
   15474:	bl	1145c <memcpy@plt>
   15478:	add	r0, r8, r5
   1547c:	mov	r1, r7
   15480:	mov	r2, r6
   15484:	bl	1145c <memcpy@plt>
   15488:	strb	r4, [r8, r9]
   1548c:	mov	r0, r8
   15490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15494:	mov	r0, #1
   15498:	mov	r1, r0
   1549c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   154a0:	b	113b4 <calloc@plt>
   154a4:	mov	r0, r4
   154a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154ac:	mov	r0, r1
   154b0:	mov	r1, r2
   154b4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   154b8:	b	114c8 <__strndup@plt>
   154bc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   154c0:	b	1160c <__strdup@plt>
   154c4:	mov	r0, r8
   154c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154cc:	push	{r3, r4, r5, lr}
   154d0:	subs	r4, r1, #0
   154d4:	mov	r5, r0
   154d8:	beq	154f8 <__assert_fail@plt+0x3d60>
   154dc:	mov	r0, r4
   154e0:	bl	115b8 <strlen@plt>
   154e4:	mov	r1, r4
   154e8:	mov	r2, r0
   154ec:	mov	r0, r5
   154f0:	pop	{r3, r4, r5, lr}
   154f4:	b	1540c <__assert_fail@plt+0x3c74>
   154f8:	mov	r2, r4
   154fc:	mov	r0, r5
   15500:	mov	r1, r4
   15504:	pop	{r3, r4, r5, lr}
   15508:	b	1540c <__assert_fail@plt+0x3c74>
   1550c:	push	{r1, r2, r3}
   15510:	mov	r1, #1
   15514:	push	{r4, r5, lr}
   15518:	sub	sp, sp, #16
   1551c:	ldr	lr, [pc, #124]	; 155a0 <__assert_fail@plt+0x3e08>
   15520:	add	ip, sp, #32
   15524:	ldr	r4, [pc, #120]	; 155a4 <__assert_fail@plt+0x3e0c>
   15528:	mov	r5, r0
   1552c:	add	lr, pc, lr
   15530:	mov	r3, ip
   15534:	ldr	r2, [sp, #28]
   15538:	add	r0, sp, #8
   1553c:	ldr	r4, [lr, r4]
   15540:	str	ip, [sp, #4]
   15544:	ldr	ip, [r4]
   15548:	str	ip, [sp, #12]
   1554c:	bl	11600 <__vasprintf_chk@plt>
   15550:	subs	r2, r0, #0
   15554:	blt	15594 <__assert_fail@plt+0x3dfc>
   15558:	mov	r0, r5
   1555c:	ldr	r1, [sp, #8]
   15560:	bl	1540c <__assert_fail@plt+0x3c74>
   15564:	mov	r5, r0
   15568:	ldr	r0, [sp, #8]
   1556c:	bl	11414 <free@plt>
   15570:	mov	r0, r5
   15574:	ldr	r2, [sp, #12]
   15578:	ldr	r3, [r4]
   1557c:	cmp	r2, r3
   15580:	bne	1559c <__assert_fail@plt+0x3e04>
   15584:	add	sp, sp, #16
   15588:	pop	{r4, r5, lr}
   1558c:	add	sp, sp, #12
   15590:	bx	lr
   15594:	mov	r0, #0
   15598:	b	15574 <__assert_fail@plt+0x3ddc>
   1559c:	bl	11498 <__stack_chk_fail@plt>
   155a0:	andeq	r2, r1, ip, asr #21
   155a4:	andeq	r0, r0, ip, asr r1
   155a8:	ldr	ip, [pc, #372]	; 15724 <__assert_fail@plt+0x3f8c>
   155ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155b0:	mov	r6, r0
   155b4:	ldr	r0, [pc, #364]	; 15728 <__assert_fail@plt+0x3f90>
   155b8:	add	ip, pc, ip
   155bc:	ldr	r4, [r6]
   155c0:	mov	r9, r3
   155c4:	sub	sp, sp, #12
   155c8:	mov	r7, r1
   155cc:	ldr	r5, [ip, r0]
   155d0:	mov	r8, r2
   155d4:	ldrsb	ip, [r4]
   155d8:	ldr	r3, [r5]
   155dc:	cmp	ip, #0
   155e0:	moveq	r0, ip
   155e4:	str	r3, [sp, #4]
   155e8:	beq	15698 <__assert_fail@plt+0x3f00>
   155ec:	mov	r0, r4
   155f0:	mov	r1, r2
   155f4:	bl	1178c <strspn@plt>
   155f8:	ldrb	sl, [r4, r0]
   155fc:	add	r4, r4, r0
   15600:	cmp	sl, #0
   15604:	beq	15714 <__assert_fail@plt+0x3f7c>
   15608:	cmp	r9, #0
   1560c:	beq	156b0 <__assert_fail@plt+0x3f18>
   15610:	sxtb	r9, sl
   15614:	ldr	r0, [pc, #272]	; 1572c <__assert_fail@plt+0x3f94>
   15618:	mov	r1, r9
   1561c:	add	r0, pc, r0
   15620:	bl	115c4 <strchr@plt>
   15624:	cmp	r0, #0
   15628:	beq	156d4 <__assert_fail@plt+0x3f3c>
   1562c:	add	fp, r4, #1
   15630:	mov	r1, sp
   15634:	mov	r3, #0
   15638:	strb	sl, [sp]
   1563c:	mov	r0, fp
   15640:	strb	r3, [sp, #1]
   15644:	bl	13ee0 <__assert_fail@plt+0x2748>
   15648:	add	r3, r4, r0
   1564c:	str	r0, [r7]
   15650:	ldrb	r3, [r3, #1]
   15654:	cmp	r3, #0
   15658:	beq	15714 <__assert_fail@plt+0x3f7c>
   1565c:	sxtb	r3, r3
   15660:	cmp	r9, r3
   15664:	bne	15714 <__assert_fail@plt+0x3f7c>
   15668:	add	r0, r0, #2
   1566c:	add	r7, r4, r0
   15670:	ldrb	r1, [r4, r0]
   15674:	cmp	r1, #0
   15678:	beq	15690 <__assert_fail@plt+0x3ef8>
   1567c:	mov	r0, r8
   15680:	sxtb	r1, r1
   15684:	bl	115c4 <strchr@plt>
   15688:	cmp	r0, #0
   1568c:	beq	15714 <__assert_fail@plt+0x3f7c>
   15690:	mov	r0, fp
   15694:	str	r7, [r6]
   15698:	ldr	r2, [sp, #4]
   1569c:	ldr	r3, [r5]
   156a0:	cmp	r2, r3
   156a4:	bne	15720 <__assert_fail@plt+0x3f88>
   156a8:	add	sp, sp, #12
   156ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156b0:	mov	r0, r4
   156b4:	mov	r1, r8
   156b8:	bl	113f0 <strcspn@plt>
   156bc:	mov	r3, r0
   156c0:	mov	r0, r4
   156c4:	add	r4, r4, r3
   156c8:	str	r3, [r7]
   156cc:	str	r4, [r6]
   156d0:	b	15698 <__assert_fail@plt+0x3f00>
   156d4:	mov	r1, r8
   156d8:	mov	r0, r4
   156dc:	bl	13ee0 <__assert_fail@plt+0x2748>
   156e0:	str	r0, [r7]
   156e4:	add	r7, r4, r0
   156e8:	ldrb	r1, [r4, r0]
   156ec:	cmp	r1, #0
   156f0:	beq	15708 <__assert_fail@plt+0x3f70>
   156f4:	mov	r0, r8
   156f8:	sxtb	r1, r1
   156fc:	bl	115c4 <strchr@plt>
   15700:	cmp	r0, #0
   15704:	beq	156cc <__assert_fail@plt+0x3f34>
   15708:	str	r7, [r6]
   1570c:	mov	r0, r4
   15710:	b	15698 <__assert_fail@plt+0x3f00>
   15714:	str	r4, [r6]
   15718:	mov	r0, #0
   1571c:	b	15698 <__assert_fail@plt+0x3f00>
   15720:	bl	11498 <__stack_chk_fail@plt>
   15724:	andeq	r2, r1, r0, asr #20
   15728:	andeq	r0, r0, ip, asr r1
   1572c:	andeq	r2, r0, ip, lsr #4
   15730:	push	{r4, lr}
   15734:	mov	r4, r0
   15738:	b	15744 <__assert_fail@plt+0x3fac>
   1573c:	cmp	r0, #10
   15740:	beq	1575c <__assert_fail@plt+0x3fc4>
   15744:	mov	r0, r4
   15748:	bl	1163c <fgetc@plt>
   1574c:	cmn	r0, #1
   15750:	bne	1573c <__assert_fail@plt+0x3fa4>
   15754:	mov	r0, #1
   15758:	pop	{r4, pc}
   1575c:	mov	r0, #0
   15760:	pop	{r4, pc}
   15764:	push	{r3, lr}
   15768:	subs	r3, r0, #0
   1576c:	beq	1577c <__assert_fail@plt+0x3fe4>
   15770:	bl	115c4 <strchr@plt>
   15774:	subs	r3, r0, #0
   15778:	addne	r3, r3, #1
   1577c:	mov	r0, r3
   15780:	pop	{r3, pc}
   15784:	push	{r4, r5, r6, lr}
   15788:	mov	r4, r1
   1578c:	mov	r5, r2
   15790:	mov	r6, r0
   15794:	bl	1166c <__sched_cpualloc@plt>
   15798:	cmp	r0, #0
   1579c:	popeq	{r4, r5, r6, pc}
   157a0:	cmp	r4, #0
   157a4:	addne	r3, r6, #31
   157a8:	lsrne	r3, r3, #5
   157ac:	lslne	r3, r3, #2
   157b0:	strne	r3, [r4]
   157b4:	cmp	r5, #0
   157b8:	addne	r6, r6, #31
   157bc:	bicne	r6, r6, #31
   157c0:	strne	r6, [r5]
   157c4:	pop	{r4, r5, r6, pc}
   157c8:	b	11618 <__sched_cpufree@plt>
   157cc:	ldr	r3, [pc, #212]	; 158a8 <__assert_fail@plt+0x4110>
   157d0:	mov	r0, #2048	; 0x800
   157d4:	ldr	ip, [pc, #208]	; 158ac <__assert_fail@plt+0x4114>
   157d8:	mov	r2, #0
   157dc:	add	r3, pc, r3
   157e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   157e4:	sub	sp, sp, #12
   157e8:	ldr	r9, [r3, ip]
   157ec:	mov	r1, sp
   157f0:	ldr	r3, [r9]
   157f4:	str	r3, [sp, #4]
   157f8:	bl	15784 <__assert_fail@plt+0x3fec>
   157fc:	subs	r4, r0, #0
   15800:	movne	r5, #10
   15804:	movne	r6, #2048	; 0x800
   15808:	bne	1584c <__assert_fail@plt+0x40b4>
   1580c:	b	1589c <__assert_fail@plt+0x4104>
   15810:	bl	115dc <__errno_location@plt>
   15814:	ldr	r3, [r0]
   15818:	cmp	r3, #22
   1581c:	bne	15878 <__assert_fail@plt+0x40e0>
   15820:	subs	r5, r5, #1
   15824:	beq	15878 <__assert_fail@plt+0x40e0>
   15828:	lsl	r6, r6, #1
   1582c:	mov	r0, r4
   15830:	bl	157c8 <__assert_fail@plt+0x4030>
   15834:	mov	r1, sp
   15838:	mov	r0, r6
   1583c:	mov	r2, #0
   15840:	bl	15784 <__assert_fail@plt+0x3fec>
   15844:	subs	r4, r0, #0
   15848:	beq	1589c <__assert_fail@plt+0x4104>
   1584c:	mov	r1, #0
   15850:	ldr	r2, [sp]
   15854:	mov	r0, r4
   15858:	bl	11624 <memset@plt>
   1585c:	mov	r0, #242	; 0xf2
   15860:	mov	r1, #0
   15864:	ldr	r2, [sp]
   15868:	mov	r3, r4
   1586c:	bl	115a0 <syscall@plt>
   15870:	subs	r8, r0, #0
   15874:	blt	15810 <__assert_fail@plt+0x4078>
   15878:	mov	r0, r4
   1587c:	bl	157c8 <__assert_fail@plt+0x4030>
   15880:	lsl	r0, r8, #3
   15884:	ldr	r2, [sp, #4]
   15888:	ldr	r3, [r9]
   1588c:	cmp	r2, r3
   15890:	bne	158a4 <__assert_fail@plt+0x410c>
   15894:	add	sp, sp, #12
   15898:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1589c:	mvn	r0, #0
   158a0:	b	15884 <__assert_fail@plt+0x40ec>
   158a4:	bl	11498 <__stack_chk_fail@plt>
   158a8:	andeq	r2, r1, ip, lsl r8
   158ac:	andeq	r0, r0, ip, asr r1
   158b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158b4:	lsls	r5, r3, #3
   158b8:	sub	sp, sp, #28
   158bc:	mov	r7, r1
   158c0:	mov	r6, r2
   158c4:	str	r0, [sp, #20]
   158c8:	beq	15a54 <__assert_fail@plt+0x42bc>
   158cc:	ldr	r9, [pc, #396]	; 15a60 <__assert_fail@plt+0x42c8>
   158d0:	mov	r1, #0
   158d4:	ldr	r8, [pc, #392]	; 15a64 <__assert_fail@plt+0x42cc>
   158d8:	mov	r4, r1
   158dc:	ldr	sl, [pc, #388]	; 15a68 <__assert_fail@plt+0x42d0>
   158e0:	add	r9, pc, r9
   158e4:	add	r8, pc, r8
   158e8:	mov	fp, r0
   158ec:	add	sl, pc, sl
   158f0:	b	15958 <__assert_fail@plt+0x41c0>
   158f4:	str	r9, [sp]
   158f8:	mov	r0, fp
   158fc:	str	r4, [sp, #4]
   15900:	mov	r1, r7
   15904:	mov	r2, #1
   15908:	mvn	r3, #0
   1590c:	bl	11774 <__snprintf_chk@plt>
   15910:	cmp	r0, #0
   15914:	blt	159f8 <__assert_fail@plt+0x4260>
   15918:	add	r3, r0, #1
   1591c:	cmp	r3, r7
   15920:	bhi	159f8 <__assert_fail@plt+0x4260>
   15924:	cmp	r7, r0
   15928:	add	fp, fp, r0
   1592c:	mov	r1, #1
   15930:	movls	r3, #0
   15934:	movhi	r3, #1
   15938:	cmp	r0, #0
   1593c:	movle	r3, #0
   15940:	cmp	r3, #0
   15944:	rsbne	r7, r0, r7
   15948:	moveq	r7, r3
   1594c:	add	r4, r4, #1
   15950:	cmp	r5, r4
   15954:	bls	15a3c <__assert_fail@plt+0x42a4>
   15958:	cmp	r5, r4
   1595c:	bls	1594c <__assert_fail@plt+0x41b4>
   15960:	lsr	r2, r4, #5
   15964:	and	r3, r4, #31
   15968:	ldr	r2, [r6, r2, lsl #2]
   1596c:	lsr	r3, r2, r3
   15970:	tst	r3, #1
   15974:	beq	1594c <__assert_fail@plt+0x41b4>
   15978:	add	lr, r4, #1
   1597c:	cmp	r5, lr
   15980:	bls	158f4 <__assert_fail@plt+0x415c>
   15984:	lsr	r2, lr, #5
   15988:	and	r3, lr, #31
   1598c:	ldr	r2, [r6, r2, lsl #2]
   15990:	lsr	r3, r2, r3
   15994:	tst	r3, #1
   15998:	movne	r3, lr
   1599c:	beq	158f4 <__assert_fail@plt+0x415c>
   159a0:	rsb	r2, r4, r3
   159a4:	add	r3, r3, #1
   159a8:	cmp	r5, r3
   159ac:	and	r0, r3, #31
   159b0:	lsr	r1, r3, #5
   159b4:	bhi	15a04 <__assert_fail@plt+0x426c>
   159b8:	cmp	r2, #0
   159bc:	beq	158f4 <__assert_fail@plt+0x415c>
   159c0:	cmp	r2, #1
   159c4:	beq	15a18 <__assert_fail@plt+0x4280>
   159c8:	add	lr, r2, r4
   159cc:	str	r4, [sp, #4]
   159d0:	str	r8, [sp]
   159d4:	mov	r0, fp
   159d8:	str	lr, [sp, #8]
   159dc:	mov	r1, r7
   159e0:	mov	r2, #1
   159e4:	mvn	r3, #0
   159e8:	mov	r4, lr
   159ec:	bl	11774 <__snprintf_chk@plt>
   159f0:	cmp	r0, #0
   159f4:	bge	15918 <__assert_fail@plt+0x4180>
   159f8:	mov	r0, #0
   159fc:	add	sp, sp, #28
   15a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a04:	ldr	r1, [r6, r1, lsl #2]
   15a08:	lsr	r1, r1, r0
   15a0c:	tst	r1, #1
   15a10:	bne	159a0 <__assert_fail@plt+0x4208>
   15a14:	b	159b8 <__assert_fail@plt+0x4220>
   15a18:	str	r4, [sp, #4]
   15a1c:	mov	r0, fp
   15a20:	str	sl, [sp]
   15a24:	mov	r1, r7
   15a28:	str	lr, [sp, #8]
   15a2c:	mvn	r3, #0
   15a30:	mov	r4, lr
   15a34:	bl	11774 <__snprintf_chk@plt>
   15a38:	b	15910 <__assert_fail@plt+0x4178>
   15a3c:	rsb	r1, r1, #0
   15a40:	ldr	r0, [sp, #20]
   15a44:	mov	r3, #0
   15a48:	strb	r3, [fp, r1]
   15a4c:	add	sp, sp, #28
   15a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a54:	mov	r1, r5
   15a58:	ldr	fp, [sp, #20]
   15a5c:	b	15a40 <__assert_fail@plt+0x42a8>
   15a60:	andeq	r1, r0, r0, ror pc
   15a64:	andeq	r1, r0, r4, ror pc
   15a68:	andeq	r1, r0, r0, ror #30
   15a6c:	lsl	r3, r3, #3
   15a70:	subs	ip, r3, #4
   15a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   15a78:	bmi	15b88 <__assert_fail@plt+0x43f0>
   15a7c:	cmp	r1, #0
   15a80:	mov	r9, r0
   15a84:	beq	15b88 <__assert_fail@plt+0x43f0>
   15a88:	sub	r7, r3, #1
   15a8c:	sub	r6, r3, #2
   15a90:	sub	r5, r3, #3
   15a94:	mov	r8, #0
   15a98:	b	15ab4 <__assert_fail@plt+0x431c>
   15a9c:	rsb	r4, r9, r0
   15aa0:	sub	r7, r7, #4
   15aa4:	cmp	r4, r1
   15aa8:	sub	r6, r6, #4
   15aac:	sub	r5, r5, #4
   15ab0:	beq	15b6c <__assert_fail@plt+0x43d4>
   15ab4:	cmp	r3, ip
   15ab8:	lsrhi	sl, ip, #5
   15abc:	andhi	r4, ip, #31
   15ac0:	movls	r4, #0
   15ac4:	ldrhi	sl, [r2, sl, lsl #2]
   15ac8:	lsrhi	r4, sl, r4
   15acc:	andhi	r4, r4, #1
   15ad0:	cmp	r3, r5
   15ad4:	bls	15af0 <__assert_fail@plt+0x4358>
   15ad8:	lsr	fp, r5, #5
   15adc:	and	sl, r5, #31
   15ae0:	ldr	fp, [r2, fp, lsl #2]
   15ae4:	lsr	sl, fp, sl
   15ae8:	tst	sl, #1
   15aec:	orrne	r4, r4, #2
   15af0:	cmp	r6, r3
   15af4:	bcs	15b10 <__assert_fail@plt+0x4378>
   15af8:	lsr	fp, r6, #5
   15afc:	and	sl, r6, #31
   15b00:	ldr	fp, [r2, fp, lsl #2]
   15b04:	lsr	sl, fp, sl
   15b08:	tst	sl, #1
   15b0c:	orrne	r4, r4, #4
   15b10:	cmp	r3, r7
   15b14:	bls	15b30 <__assert_fail@plt+0x4398>
   15b18:	lsr	fp, r7, #5
   15b1c:	and	sl, r7, #31
   15b20:	ldr	fp, [r2, fp, lsl #2]
   15b24:	lsr	sl, fp, sl
   15b28:	tst	sl, #1
   15b2c:	orrne	r4, r4, #8
   15b30:	sxtb	r4, r4
   15b34:	adds	sl, r4, #0
   15b38:	movne	sl, #1
   15b3c:	cmp	r8, #0
   15b40:	movne	sl, #0
   15b44:	cmp	sl, #0
   15b48:	movne	r8, r0
   15b4c:	cmp	r4, #9
   15b50:	addls	r4, r4, #48	; 0x30
   15b54:	addhi	r4, r4, #87	; 0x57
   15b58:	add	r0, r0, #1
   15b5c:	subs	ip, ip, #4
   15b60:	uxtb	r4, r4
   15b64:	strb	r4, [r0, #-1]
   15b68:	bpl	15a9c <__assert_fail@plt+0x4304>
   15b6c:	cmp	r8, #0
   15b70:	mov	r3, #0
   15b74:	strb	r3, [r0]
   15b78:	movne	r0, r8
   15b7c:	beq	15b90 <__assert_fail@plt+0x43f8>
   15b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   15b84:	bx	lr
   15b88:	mov	r3, #0
   15b8c:	strb	r3, [r0]
   15b90:	sub	r0, r0, #1
   15b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   15b98:	bx	lr
   15b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ba0:	sub	sp, sp, #12
   15ba4:	mov	r9, r0
   15ba8:	mov	r8, r1
   15bac:	mov	r5, r2
   15bb0:	bl	115b8 <strlen@plt>
   15bb4:	cmp	r0, #1
   15bb8:	sub	r4, r0, #1
   15bbc:	add	r4, r9, r4
   15bc0:	ble	15be0 <__assert_fail@plt+0x4448>
   15bc4:	ldr	r1, [pc, #364]	; 15d38 <__assert_fail@plt+0x45a0>
   15bc8:	mov	r0, r9
   15bcc:	mov	r2, #2
   15bd0:	add	r1, pc, r1
   15bd4:	bl	11480 <memcmp@plt>
   15bd8:	cmp	r0, #0
   15bdc:	addeq	r9, r9, #2
   15be0:	mov	r0, r8
   15be4:	mov	r1, #0
   15be8:	mov	r2, r5
   15bec:	bl	11624 <memset@plt>
   15bf0:	cmp	r9, r4
   15bf4:	bhi	15d20 <__assert_fail@plt+0x4588>
   15bf8:	bl	11564 <__ctype_tolower_loc@plt>
   15bfc:	mov	ip, #1
   15c00:	lsl	r2, r5, #3
   15c04:	mov	r7, #2
   15c08:	mov	r1, ip
   15c0c:	mov	r6, #3
   15c10:	mov	r5, #0
   15c14:	ldr	sl, [r0]
   15c18:	str	sl, [sp]
   15c1c:	ldrb	r0, [r4]
   15c20:	ldr	sl, [sp]
   15c24:	sxtb	r3, r0
   15c28:	cmp	r3, #44	; 0x2c
   15c2c:	ldrbeq	r0, [r4, #-1]
   15c30:	subeq	r4, r4, #1
   15c34:	sxtbeq	r3, r0
   15c38:	sxtb	r0, r0
   15c3c:	sub	r3, r3, #48	; 0x30
   15c40:	sxth	r0, r0
   15c44:	cmp	r3, #9
   15c48:	ldr	r0, [sl, r0, lsl #2]
   15c4c:	bls	15c60 <__assert_fail@plt+0x44c8>
   15c50:	sub	r3, r0, #97	; 0x61
   15c54:	cmp	r3, #5
   15c58:	bhi	15d2c <__assert_fail@plt+0x4594>
   15c5c:	sub	r3, r0, #87	; 0x57
   15c60:	sxtb	r0, r3
   15c64:	cmn	r0, #1
   15c68:	beq	15d24 <__assert_fail@plt+0x458c>
   15c6c:	tst	r3, #1
   15c70:	beq	15c94 <__assert_fail@plt+0x44fc>
   15c74:	cmp	r5, r2
   15c78:	bcs	15c94 <__assert_fail@plt+0x44fc>
   15c7c:	lsr	r0, r5, #5
   15c80:	and	fp, r5, #31
   15c84:	str	fp, [sp, #4]
   15c88:	ldr	sl, [r8, r0, lsl #2]
   15c8c:	orr	sl, sl, r1, lsl fp
   15c90:	str	sl, [r8, r0, lsl #2]
   15c94:	tst	r3, #2
   15c98:	beq	15cbc <__assert_fail@plt+0x4524>
   15c9c:	cmp	r2, ip
   15ca0:	bls	15cbc <__assert_fail@plt+0x4524>
   15ca4:	lsr	r0, ip, #5
   15ca8:	and	sl, ip, #31
   15cac:	str	sl, [sp, #4]
   15cb0:	ldr	fp, [r8, r0, lsl #2]
   15cb4:	orr	fp, fp, r1, lsl sl
   15cb8:	str	fp, [r8, r0, lsl #2]
   15cbc:	tst	r3, #4
   15cc0:	beq	15ce4 <__assert_fail@plt+0x454c>
   15cc4:	cmp	r2, r7
   15cc8:	bls	15ce4 <__assert_fail@plt+0x454c>
   15ccc:	lsr	r0, r7, #5
   15cd0:	and	fp, r7, #31
   15cd4:	str	fp, [sp, #4]
   15cd8:	ldr	sl, [r8, r0, lsl #2]
   15cdc:	orr	sl, sl, r1, lsl fp
   15ce0:	str	sl, [r8, r0, lsl #2]
   15ce4:	tst	r3, #8
   15ce8:	beq	15d04 <__assert_fail@plt+0x456c>
   15cec:	cmp	r2, r6
   15cf0:	lsrhi	r3, r6, #5
   15cf4:	andhi	r0, r6, #31
   15cf8:	ldrhi	fp, [r8, r3, lsl #2]
   15cfc:	orrhi	r0, fp, r1, lsl r0
   15d00:	strhi	r0, [r8, r3, lsl #2]
   15d04:	sub	r4, r4, #1
   15d08:	add	r5, r5, #4
   15d0c:	cmp	r9, r4
   15d10:	add	r6, r6, #4
   15d14:	add	r7, r7, #4
   15d18:	add	ip, ip, #4
   15d1c:	bls	15c1c <__assert_fail@plt+0x4484>
   15d20:	mov	r0, #0
   15d24:	add	sp, sp, #12
   15d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d2c:	mvn	r0, #0
   15d30:	add	sp, sp, #12
   15d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d38:	muleq	r0, r4, ip
   15d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d40:	sub	sp, sp, #52	; 0x34
   15d44:	ldr	lr, [pc, #540]	; 15f68 <__assert_fail@plt+0x47d0>
   15d48:	mov	r5, r3
   15d4c:	ldr	ip, [pc, #536]	; 15f6c <__assert_fail@plt+0x47d4>
   15d50:	mov	r4, r1
   15d54:	add	lr, pc, lr
   15d58:	mov	r1, #0
   15d5c:	mov	r8, r0
   15d60:	mov	r7, #1
   15d64:	ldr	ip, [lr, ip]
   15d68:	mov	r3, lr
   15d6c:	mov	r0, r4
   15d70:	lsl	r6, r2, #3
   15d74:	str	r1, [sp, #4]
   15d78:	add	sl, sp, #31
   15d7c:	str	ip, [sp, #20]
   15d80:	ldr	ip, [pc, #488]	; 15f70 <__assert_fail@plt+0x47d8>
   15d84:	add	ip, pc, ip
   15d88:	str	ip, [sp, #8]
   15d8c:	add	ip, sp, #32
   15d90:	str	ip, [sp, #16]
   15d94:	ldr	ip, [sp, #20]
   15d98:	ldr	r3, [ip]
   15d9c:	str	r3, [sp, #44]	; 0x2c
   15da0:	bl	11624 <memset@plt>
   15da4:	str	sl, [sp, #12]
   15da8:	mov	r0, r8
   15dac:	mov	r1, #44	; 0x2c
   15db0:	bl	15764 <__assert_fail@plt+0x3fcc>
   15db4:	cmp	r8, #0
   15db8:	mov	fp, r0
   15dbc:	beq	15f50 <__assert_fail@plt+0x47b8>
   15dc0:	mov	r0, r8
   15dc4:	ldr	r1, [sp, #8]
   15dc8:	add	r2, sp, #32
   15dcc:	ldr	r3, [sp, #12]
   15dd0:	bl	116e4 <sscanf@plt>
   15dd4:	cmp	r0, #0
   15dd8:	str	r0, [sp, #4]
   15ddc:	ble	15f0c <__assert_fail@plt+0x4774>
   15de0:	ldr	sl, [sp, #32]
   15de4:	mov	r0, r8
   15de8:	mov	r1, #45	; 0x2d
   15dec:	str	r7, [sp, #40]	; 0x28
   15df0:	str	sl, [sp, #36]	; 0x24
   15df4:	bl	15764 <__assert_fail@plt+0x3fcc>
   15df8:	mov	r1, #44	; 0x2c
   15dfc:	mov	r9, r0
   15e00:	mov	r0, r8
   15e04:	bl	15764 <__assert_fail@plt+0x3fcc>
   15e08:	cmp	r9, #0
   15e0c:	mov	r8, r0
   15e10:	beq	15e30 <__assert_fail@plt+0x4698>
   15e14:	rsbs	ip, r0, #1
   15e18:	movcc	ip, #0
   15e1c:	cmp	r9, r0
   15e20:	movcs	r2, ip
   15e24:	orrcc	r2, ip, #1
   15e28:	cmp	r2, #0
   15e2c:	bne	15eac <__assert_fail@plt+0x4714>
   15e30:	mov	r1, sl
   15e34:	mov	r3, sl
   15e38:	ldr	r0, [sp, #40]	; 0x28
   15e3c:	b	15e68 <__assert_fail@plt+0x46d0>
   15e40:	cmp	r6, r3
   15e44:	bls	15e8c <__assert_fail@plt+0x46f4>
   15e48:	lsr	r2, r3, #5
   15e4c:	and	ip, r3, #31
   15e50:	add	r3, r3, r0
   15e54:	ldr	r8, [r4, r2, lsl #2]
   15e58:	cmp	r3, r1
   15e5c:	orr	ip, r8, r7, lsl ip
   15e60:	str	ip, [r4, r2, lsl #2]
   15e64:	bhi	15e84 <__assert_fail@plt+0x46ec>
   15e68:	cmp	r5, #0
   15e6c:	bne	15e40 <__assert_fail@plt+0x46a8>
   15e70:	cmp	r6, r3
   15e74:	bhi	15e48 <__assert_fail@plt+0x46b0>
   15e78:	add	r3, r3, r0
   15e7c:	cmp	r3, r1
   15e80:	bls	15e68 <__assert_fail@plt+0x46d0>
   15e84:	mov	r8, fp
   15e88:	b	15da8 <__assert_fail@plt+0x4610>
   15e8c:	mov	r0, #2
   15e90:	ldr	ip, [sp, #20]
   15e94:	ldr	r2, [sp, #44]	; 0x2c
   15e98:	ldr	r3, [ip]
   15e9c:	cmp	r2, r3
   15ea0:	bne	15f64 <__assert_fail@plt+0x47cc>
   15ea4:	add	sp, sp, #52	; 0x34
   15ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eac:	mov	r0, r9
   15eb0:	ldr	r1, [sp, #8]
   15eb4:	add	r2, sp, #36	; 0x24
   15eb8:	ldr	r3, [sp, #12]
   15ebc:	str	ip, [sp]
   15ec0:	bl	116e4 <sscanf@plt>
   15ec4:	cmp	r0, #0
   15ec8:	str	r0, [sp, #4]
   15ecc:	ble	15f0c <__assert_fail@plt+0x4774>
   15ed0:	mov	r0, r9
   15ed4:	mov	r1, #58	; 0x3a
   15ed8:	bl	15764 <__assert_fail@plt+0x3fcc>
   15edc:	ldr	ip, [sp]
   15ee0:	subs	r3, r0, #0
   15ee4:	beq	15efc <__assert_fail@plt+0x4764>
   15ee8:	cmp	r8, r3
   15eec:	movls	r3, ip
   15ef0:	orrhi	r3, ip, #1
   15ef4:	cmp	r3, #0
   15ef8:	bne	15f14 <__assert_fail@plt+0x477c>
   15efc:	ldr	r1, [sp, #36]	; 0x24
   15f00:	ldr	r3, [sp, #32]
   15f04:	cmp	r3, r1
   15f08:	bls	15e38 <__assert_fail@plt+0x46a0>
   15f0c:	mov	r0, #1
   15f10:	b	15e90 <__assert_fail@plt+0x46f8>
   15f14:	ldr	r1, [sp, #8]
   15f18:	add	r2, sp, #40	; 0x28
   15f1c:	ldr	r3, [sp, #12]
   15f20:	bl	116e4 <sscanf@plt>
   15f24:	cmp	r0, #0
   15f28:	str	r0, [sp, #4]
   15f2c:	ble	15f0c <__assert_fail@plt+0x4774>
   15f30:	ldr	r3, [sp, #40]	; 0x28
   15f34:	cmp	r3, #0
   15f38:	beq	15f0c <__assert_fail@plt+0x4774>
   15f3c:	ldr	r1, [sp, #36]	; 0x24
   15f40:	ldr	r3, [sp, #32]
   15f44:	cmp	r3, r1
   15f48:	bls	15e38 <__assert_fail@plt+0x46a0>
   15f4c:	b	15f0c <__assert_fail@plt+0x4774>
   15f50:	ldr	r3, [sp, #4]
   15f54:	subs	r3, r3, #2
   15f58:	rsbs	r0, r3, #0
   15f5c:	adcs	r0, r0, r3
   15f60:	b	15e90 <__assert_fail@plt+0x46f8>
   15f64:	bl	11498 <__stack_chk_fail@plt>
   15f68:	andeq	r2, r1, r4, lsr #5
   15f6c:	andeq	r0, r0, ip, asr r1
   15f70:	andeq	r1, r0, r4, ror #21
   15f74:	cmp	r3, #0
   15f78:	cmpeq	r2, #0
   15f7c:	bne	15f94 <__assert_fail@plt+0x47fc>
   15f80:	cmp	r1, #0
   15f84:	cmpeq	r0, #0
   15f88:	mvnne	r1, #0
   15f8c:	mvnne	r0, #0
   15f90:	b	15fb0 <__assert_fail@plt+0x4818>
   15f94:	sub	sp, sp, #8
   15f98:	push	{sp, lr}
   15f9c:	bl	15ffc <__assert_fail@plt+0x4864>
   15fa0:	ldr	lr, [sp, #4]
   15fa4:	add	sp, sp, #8
   15fa8:	pop	{r2, r3}
   15fac:	bx	lr
   15fb0:	push	{r1, lr}
   15fb4:	mov	r0, #8
   15fb8:	bl	113c0 <raise@plt>
   15fbc:	pop	{r1, pc}
   15fc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15fc4:	mov	r8, r2
   15fc8:	mov	r6, r0
   15fcc:	mov	r7, r1
   15fd0:	mov	sl, r3
   15fd4:	ldr	r9, [sp, #32]
   15fd8:	bl	16038 <__assert_fail@plt+0x48a0>
   15fdc:	umull	r4, r5, r8, r0
   15fe0:	mul	r8, r8, r1
   15fe4:	mla	r2, r0, sl, r8
   15fe8:	add	r5, r2, r5
   15fec:	subs	r4, r6, r4
   15ff0:	sbc	r5, r7, r5
   15ff4:	strd	r4, [r9]
   15ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ffc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16000:	mov	r8, r2
   16004:	mov	r6, r0
   16008:	mov	r7, r1
   1600c:	mov	r5, r3
   16010:	ldr	r9, [sp, #32]
   16014:	bl	164c4 <__assert_fail@plt+0x4d2c>
   16018:	mul	r3, r0, r5
   1601c:	umull	r4, r5, r0, r8
   16020:	mla	r8, r8, r1, r3
   16024:	add	r5, r8, r5
   16028:	subs	r4, r6, r4
   1602c:	sbc	r5, r7, r5
   16030:	strd	r4, [r9]
   16034:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1603c:	rsbs	r4, r0, #0
   16040:	rsc	r5, r1, #0
   16044:	cmp	r1, #0
   16048:	mvn	r6, #0
   1604c:	sub	sp, sp, #12
   16050:	movge	r4, r0
   16054:	movge	r5, r1
   16058:	movge	r6, #0
   1605c:	cmp	r3, #0
   16060:	blt	16298 <__assert_fail@plt+0x4b00>
   16064:	cmp	r3, #0
   16068:	mov	sl, r4
   1606c:	mov	ip, r5
   16070:	mov	r0, r2
   16074:	mov	r1, r3
   16078:	mov	r8, r2
   1607c:	mov	r7, r4
   16080:	mov	r9, r5
   16084:	bne	1617c <__assert_fail@plt+0x49e4>
   16088:	cmp	r2, r5
   1608c:	bls	161b8 <__assert_fail@plt+0x4a20>
   16090:	clz	r3, r2
   16094:	cmp	r3, #0
   16098:	rsbne	r2, r3, #32
   1609c:	lslne	r8, r0, r3
   160a0:	lsrne	r2, r4, r2
   160a4:	lslne	r7, r4, r3
   160a8:	orrne	r9, r2, r5, lsl r3
   160ac:	lsr	r4, r8, #16
   160b0:	uxth	sl, r8
   160b4:	mov	r1, r4
   160b8:	mov	r0, r9
   160bc:	bl	168f4 <__assert_fail@plt+0x515c>
   160c0:	mov	r1, r4
   160c4:	mov	fp, r0
   160c8:	mov	r0, r9
   160cc:	bl	16ae0 <__assert_fail@plt+0x5348>
   160d0:	mul	r0, sl, fp
   160d4:	lsr	r2, r7, #16
   160d8:	orr	r1, r2, r1, lsl #16
   160dc:	cmp	r0, r1
   160e0:	bls	16104 <__assert_fail@plt+0x496c>
   160e4:	adds	r1, r1, r8
   160e8:	sub	r3, fp, #1
   160ec:	bcs	16100 <__assert_fail@plt+0x4968>
   160f0:	cmp	r0, r1
   160f4:	subhi	fp, fp, #2
   160f8:	addhi	r1, r1, r8
   160fc:	bhi	16104 <__assert_fail@plt+0x496c>
   16100:	mov	fp, r3
   16104:	rsb	r9, r0, r1
   16108:	mov	r1, r4
   1610c:	uxth	r7, r7
   16110:	mov	r0, r9
   16114:	bl	168f4 <__assert_fail@plt+0x515c>
   16118:	mov	r1, r4
   1611c:	mov	r5, r0
   16120:	mov	r0, r9
   16124:	bl	16ae0 <__assert_fail@plt+0x5348>
   16128:	mul	sl, sl, r5
   1612c:	orr	r1, r7, r1, lsl #16
   16130:	cmp	sl, r1
   16134:	bls	16154 <__assert_fail@plt+0x49bc>
   16138:	adds	r8, r1, r8
   1613c:	sub	r3, r5, #1
   16140:	bcs	16150 <__assert_fail@plt+0x49b8>
   16144:	cmp	sl, r8
   16148:	subhi	r5, r5, #2
   1614c:	bhi	16154 <__assert_fail@plt+0x49bc>
   16150:	mov	r5, r3
   16154:	orr	r3, r5, fp, lsl #16
   16158:	mov	r4, #0
   1615c:	cmp	r6, #0
   16160:	mov	r0, r3
   16164:	mov	r1, r4
   16168:	beq	16174 <__assert_fail@plt+0x49dc>
   1616c:	rsbs	r0, r0, #0
   16170:	rsc	r1, r1, #0
   16174:	add	sp, sp, #12
   16178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1617c:	cmp	r3, r5
   16180:	movhi	r4, #0
   16184:	movhi	r3, r4
   16188:	bhi	1615c <__assert_fail@plt+0x49c4>
   1618c:	clz	r5, r1
   16190:	cmp	r5, #0
   16194:	bne	16384 <__assert_fail@plt+0x4bec>
   16198:	cmp	r1, ip
   1619c:	cmpcs	r2, sl
   161a0:	movhi	r4, #0
   161a4:	movls	r4, #1
   161a8:	movls	r3, #1
   161ac:	movls	r4, r5
   161b0:	movhi	r3, r4
   161b4:	b	1615c <__assert_fail@plt+0x49c4>
   161b8:	cmp	r2, #0
   161bc:	bne	161d0 <__assert_fail@plt+0x4a38>
   161c0:	mov	r1, r2
   161c4:	mov	r0, #1
   161c8:	bl	168f4 <__assert_fail@plt+0x515c>
   161cc:	mov	r8, r0
   161d0:	clz	r3, r8
   161d4:	cmp	r3, #0
   161d8:	bne	162a8 <__assert_fail@plt+0x4b10>
   161dc:	rsb	r9, r8, r9
   161e0:	lsr	r5, r8, #16
   161e4:	uxth	sl, r8
   161e8:	mov	r4, #1
   161ec:	mov	r1, r5
   161f0:	mov	r0, r9
   161f4:	bl	168f4 <__assert_fail@plt+0x515c>
   161f8:	mov	r1, r5
   161fc:	mov	fp, r0
   16200:	mov	r0, r9
   16204:	bl	16ae0 <__assert_fail@plt+0x5348>
   16208:	mul	r0, sl, fp
   1620c:	lsr	r2, r7, #16
   16210:	orr	r1, r2, r1, lsl #16
   16214:	cmp	r0, r1
   16218:	bls	16238 <__assert_fail@plt+0x4aa0>
   1621c:	adds	r1, r1, r8
   16220:	sub	r3, fp, #1
   16224:	bcs	164a4 <__assert_fail@plt+0x4d0c>
   16228:	cmp	r0, r1
   1622c:	subhi	fp, fp, #2
   16230:	addhi	r1, r1, r8
   16234:	bls	164a4 <__assert_fail@plt+0x4d0c>
   16238:	rsb	r2, r0, r1
   1623c:	mov	r1, r5
   16240:	str	r2, [sp]
   16244:	uxth	r7, r7
   16248:	mov	r0, r2
   1624c:	bl	168f4 <__assert_fail@plt+0x515c>
   16250:	ldr	r2, [sp]
   16254:	mov	r1, r5
   16258:	mov	r9, r0
   1625c:	mov	r0, r2
   16260:	bl	16ae0 <__assert_fail@plt+0x5348>
   16264:	mul	sl, sl, r9
   16268:	orr	r1, r7, r1, lsl #16
   1626c:	cmp	sl, r1
   16270:	bls	16290 <__assert_fail@plt+0x4af8>
   16274:	adds	r8, r1, r8
   16278:	sub	r3, r9, #1
   1627c:	bcs	1628c <__assert_fail@plt+0x4af4>
   16280:	cmp	sl, r8
   16284:	subhi	r9, r9, #2
   16288:	bhi	16290 <__assert_fail@plt+0x4af8>
   1628c:	mov	r9, r3
   16290:	orr	r3, r9, fp, lsl #16
   16294:	b	1615c <__assert_fail@plt+0x49c4>
   16298:	mvn	r6, r6
   1629c:	rsbs	r2, r2, #0
   162a0:	rsc	r3, r3, #0
   162a4:	b	16064 <__assert_fail@plt+0x48cc>
   162a8:	lsl	r8, r8, r3
   162ac:	rsb	fp, r3, #32
   162b0:	lsr	r4, r9, fp
   162b4:	lsr	fp, r7, fp
   162b8:	lsr	r5, r8, #16
   162bc:	orr	fp, fp, r9, lsl r3
   162c0:	mov	r0, r4
   162c4:	lsl	r7, r7, r3
   162c8:	mov	r1, r5
   162cc:	uxth	sl, r8
   162d0:	bl	168f4 <__assert_fail@plt+0x515c>
   162d4:	mov	r1, r5
   162d8:	mov	r3, r0
   162dc:	mov	r0, r4
   162e0:	str	r3, [sp]
   162e4:	bl	16ae0 <__assert_fail@plt+0x5348>
   162e8:	ldr	r3, [sp]
   162ec:	lsr	r2, fp, #16
   162f0:	mul	r0, sl, r3
   162f4:	orr	r1, r2, r1, lsl #16
   162f8:	cmp	r0, r1
   162fc:	bls	1631c <__assert_fail@plt+0x4b84>
   16300:	adds	r1, r1, r8
   16304:	sub	r2, r3, #1
   16308:	bcs	164bc <__assert_fail@plt+0x4d24>
   1630c:	cmp	r0, r1
   16310:	subhi	r3, r3, #2
   16314:	addhi	r1, r1, r8
   16318:	bls	164bc <__assert_fail@plt+0x4d24>
   1631c:	rsb	r9, r0, r1
   16320:	mov	r1, r5
   16324:	str	r3, [sp]
   16328:	uxth	fp, fp
   1632c:	mov	r0, r9
   16330:	bl	168f4 <__assert_fail@plt+0x515c>
   16334:	mov	r1, r5
   16338:	mov	r4, r0
   1633c:	mov	r0, r9
   16340:	bl	16ae0 <__assert_fail@plt+0x5348>
   16344:	mul	r9, sl, r4
   16348:	ldr	r3, [sp]
   1634c:	orr	r1, fp, r1, lsl #16
   16350:	cmp	r9, r1
   16354:	bls	16378 <__assert_fail@plt+0x4be0>
   16358:	adds	r1, r1, r8
   1635c:	sub	r2, r4, #1
   16360:	bcs	16374 <__assert_fail@plt+0x4bdc>
   16364:	cmp	r9, r1
   16368:	subhi	r4, r4, #2
   1636c:	addhi	r1, r1, r8
   16370:	bhi	16378 <__assert_fail@plt+0x4be0>
   16374:	mov	r4, r2
   16378:	rsb	r9, r9, r1
   1637c:	orr	r4, r4, r3, lsl #16
   16380:	b	161ec <__assert_fail@plt+0x4a54>
   16384:	rsb	sl, r5, #32
   16388:	lsl	r3, r2, r5
   1638c:	lsr	r0, r2, sl
   16390:	lsr	r2, ip, sl
   16394:	orr	r4, r0, r1, lsl r5
   16398:	lsr	sl, r7, sl
   1639c:	mov	r0, r2
   163a0:	orr	sl, sl, ip, lsl r5
   163a4:	lsr	r9, r4, #16
   163a8:	str	r3, [sp, #4]
   163ac:	str	r2, [sp]
   163b0:	uxth	fp, r4
   163b4:	mov	r1, r9
   163b8:	bl	168f4 <__assert_fail@plt+0x515c>
   163bc:	ldr	r2, [sp]
   163c0:	mov	r1, r9
   163c4:	mov	r8, r0
   163c8:	mov	r0, r2
   163cc:	bl	16ae0 <__assert_fail@plt+0x5348>
   163d0:	mul	r0, fp, r8
   163d4:	lsr	r2, sl, #16
   163d8:	orr	r1, r2, r1, lsl #16
   163dc:	cmp	r0, r1
   163e0:	bls	16400 <__assert_fail@plt+0x4c68>
   163e4:	adds	r1, r1, r4
   163e8:	sub	r2, r8, #1
   163ec:	bcs	164b4 <__assert_fail@plt+0x4d1c>
   163f0:	cmp	r0, r1
   163f4:	subhi	r8, r8, #2
   163f8:	addhi	r1, r1, r4
   163fc:	bls	164b4 <__assert_fail@plt+0x4d1c>
   16400:	rsb	ip, r0, r1
   16404:	mov	r1, r9
   16408:	str	ip, [sp]
   1640c:	mov	r0, ip
   16410:	bl	168f4 <__assert_fail@plt+0x515c>
   16414:	ldr	ip, [sp]
   16418:	mov	r1, r9
   1641c:	mov	r2, r0
   16420:	mov	r0, ip
   16424:	str	r2, [sp]
   16428:	bl	16ae0 <__assert_fail@plt+0x5348>
   1642c:	ldr	r2, [sp]
   16430:	uxth	ip, sl
   16434:	mul	fp, fp, r2
   16438:	orr	ip, ip, r1, lsl #16
   1643c:	cmp	fp, ip
   16440:	bls	16460 <__assert_fail@plt+0x4cc8>
   16444:	adds	ip, ip, r4
   16448:	sub	r1, r2, #1
   1644c:	bcs	164ac <__assert_fail@plt+0x4d14>
   16450:	cmp	fp, ip
   16454:	subhi	r2, r2, #2
   16458:	addhi	ip, ip, r4
   1645c:	bls	164ac <__assert_fail@plt+0x4d14>
   16460:	ldr	r0, [sp, #4]
   16464:	orr	r1, r2, r8, lsl #16
   16468:	rsb	fp, fp, ip
   1646c:	umull	r2, r3, r1, r0
   16470:	cmp	fp, r3
   16474:	bcc	16498 <__assert_fail@plt+0x4d00>
   16478:	movne	r4, #0
   1647c:	moveq	r4, #1
   16480:	cmp	r2, r7, lsl r5
   16484:	movls	r4, #0
   16488:	andhi	r4, r4, #1
   1648c:	cmp	r4, #0
   16490:	moveq	r3, r1
   16494:	beq	1615c <__assert_fail@plt+0x49c4>
   16498:	sub	r3, r1, #1
   1649c:	mov	r4, #0
   164a0:	b	1615c <__assert_fail@plt+0x49c4>
   164a4:	mov	fp, r3
   164a8:	b	16238 <__assert_fail@plt+0x4aa0>
   164ac:	mov	r2, r1
   164b0:	b	16460 <__assert_fail@plt+0x4cc8>
   164b4:	mov	r8, r2
   164b8:	b	16400 <__assert_fail@plt+0x4c68>
   164bc:	mov	r3, r2
   164c0:	b	1631c <__assert_fail@plt+0x4b84>
   164c4:	cmp	r3, #0
   164c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164cc:	mov	r6, r0
   164d0:	sub	sp, sp, #12
   164d4:	mov	r5, r1
   164d8:	mov	r7, r0
   164dc:	mov	r4, r2
   164e0:	mov	r8, r1
   164e4:	bne	165c4 <__assert_fail@plt+0x4e2c>
   164e8:	cmp	r2, r1
   164ec:	bls	16600 <__assert_fail@plt+0x4e68>
   164f0:	clz	r3, r2
   164f4:	cmp	r3, #0
   164f8:	rsbne	r8, r3, #32
   164fc:	lslne	r4, r2, r3
   16500:	lsrne	r8, r0, r8
   16504:	lslne	r7, r0, r3
   16508:	orrne	r8, r8, r1, lsl r3
   1650c:	lsr	r5, r4, #16
   16510:	uxth	sl, r4
   16514:	mov	r1, r5
   16518:	mov	r0, r8
   1651c:	bl	168f4 <__assert_fail@plt+0x515c>
   16520:	mov	r1, r5
   16524:	mov	r9, r0
   16528:	mov	r0, r8
   1652c:	bl	16ae0 <__assert_fail@plt+0x5348>
   16530:	mul	r0, sl, r9
   16534:	lsr	r3, r7, #16
   16538:	orr	r1, r3, r1, lsl #16
   1653c:	cmp	r0, r1
   16540:	bls	16564 <__assert_fail@plt+0x4dcc>
   16544:	adds	r1, r1, r4
   16548:	sub	r2, r9, #1
   1654c:	bcs	16560 <__assert_fail@plt+0x4dc8>
   16550:	cmp	r0, r1
   16554:	subhi	r9, r9, #2
   16558:	addhi	r1, r1, r4
   1655c:	bhi	16564 <__assert_fail@plt+0x4dcc>
   16560:	mov	r9, r2
   16564:	rsb	r8, r0, r1
   16568:	mov	r1, r5
   1656c:	uxth	r7, r7
   16570:	mov	r0, r8
   16574:	bl	168f4 <__assert_fail@plt+0x515c>
   16578:	mov	r1, r5
   1657c:	mov	r6, r0
   16580:	mov	r0, r8
   16584:	bl	16ae0 <__assert_fail@plt+0x5348>
   16588:	mul	sl, sl, r6
   1658c:	orr	r1, r7, r1, lsl #16
   16590:	cmp	sl, r1
   16594:	bls	165b0 <__assert_fail@plt+0x4e18>
   16598:	adds	r4, r1, r4
   1659c:	sub	r3, r6, #1
   165a0:	bcs	168ac <__assert_fail@plt+0x5114>
   165a4:	cmp	sl, r4
   165a8:	subhi	r6, r6, #2
   165ac:	bls	168ac <__assert_fail@plt+0x5114>
   165b0:	orr	r0, r6, r9, lsl #16
   165b4:	mov	r6, #0
   165b8:	mov	r1, r6
   165bc:	add	sp, sp, #12
   165c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165c4:	cmp	r3, r1
   165c8:	movhi	r6, #0
   165cc:	movhi	r0, r6
   165d0:	bhi	165b8 <__assert_fail@plt+0x4e20>
   165d4:	clz	r7, r3
   165d8:	cmp	r7, #0
   165dc:	bne	166dc <__assert_fail@plt+0x4f44>
   165e0:	cmp	r3, r1
   165e4:	cmpcs	r2, r6
   165e8:	movhi	r6, #0
   165ec:	movls	r6, #1
   165f0:	movls	r0, #1
   165f4:	movls	r6, r7
   165f8:	movhi	r0, r6
   165fc:	b	165b8 <__assert_fail@plt+0x4e20>
   16600:	cmp	r2, #0
   16604:	bne	16618 <__assert_fail@plt+0x4e80>
   16608:	mov	r1, r2
   1660c:	mov	r0, #1
   16610:	bl	168f4 <__assert_fail@plt+0x515c>
   16614:	mov	r4, r0
   16618:	clz	r3, r4
   1661c:	cmp	r3, #0
   16620:	bne	167d8 <__assert_fail@plt+0x5040>
   16624:	rsb	r5, r4, r5
   16628:	lsr	r8, r4, #16
   1662c:	uxth	sl, r4
   16630:	mov	r6, #1
   16634:	mov	r1, r8
   16638:	mov	r0, r5
   1663c:	bl	168f4 <__assert_fail@plt+0x515c>
   16640:	mov	r1, r8
   16644:	mov	r9, r0
   16648:	mov	r0, r5
   1664c:	bl	16ae0 <__assert_fail@plt+0x5348>
   16650:	mul	r0, sl, r9
   16654:	lsr	r3, r7, #16
   16658:	orr	r1, r3, r1, lsl #16
   1665c:	cmp	r0, r1
   16660:	bls	16680 <__assert_fail@plt+0x4ee8>
   16664:	adds	r1, r1, r4
   16668:	sub	r2, r9, #1
   1666c:	bcs	168b4 <__assert_fail@plt+0x511c>
   16670:	cmp	r0, r1
   16674:	subhi	r9, r9, #2
   16678:	addhi	r1, r1, r4
   1667c:	bls	168b4 <__assert_fail@plt+0x511c>
   16680:	rsb	fp, r0, r1
   16684:	mov	r1, r8
   16688:	uxth	r7, r7
   1668c:	mov	r0, fp
   16690:	bl	168f4 <__assert_fail@plt+0x515c>
   16694:	mov	r1, r8
   16698:	mov	r5, r0
   1669c:	mov	r0, fp
   166a0:	bl	16ae0 <__assert_fail@plt+0x5348>
   166a4:	mul	sl, sl, r5
   166a8:	orr	r1, r7, r1, lsl #16
   166ac:	cmp	sl, r1
   166b0:	bls	166cc <__assert_fail@plt+0x4f34>
   166b4:	adds	r4, r1, r4
   166b8:	sub	r3, r5, #1
   166bc:	bcs	168bc <__assert_fail@plt+0x5124>
   166c0:	cmp	sl, r4
   166c4:	subhi	r5, r5, #2
   166c8:	bls	168bc <__assert_fail@plt+0x5124>
   166cc:	orr	r0, r5, r9, lsl #16
   166d0:	mov	r1, r6
   166d4:	add	sp, sp, #12
   166d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166dc:	rsb	r1, r7, #32
   166e0:	lsl	r0, r2, r7
   166e4:	lsr	r2, r2, r1
   166e8:	lsr	fp, r5, r1
   166ec:	orr	r8, r2, r3, lsl r7
   166f0:	lsr	r1, r6, r1
   166f4:	str	r0, [sp, #4]
   166f8:	orr	r5, r1, r5, lsl r7
   166fc:	lsr	r9, r8, #16
   16700:	mov	r0, fp
   16704:	uxth	sl, r8
   16708:	mov	r1, r9
   1670c:	bl	168f4 <__assert_fail@plt+0x515c>
   16710:	mov	r1, r9
   16714:	mov	r4, r0
   16718:	mov	r0, fp
   1671c:	bl	16ae0 <__assert_fail@plt+0x5348>
   16720:	mul	r0, sl, r4
   16724:	lsr	ip, r5, #16
   16728:	orr	r1, ip, r1, lsl #16
   1672c:	cmp	r0, r1
   16730:	bls	16744 <__assert_fail@plt+0x4fac>
   16734:	adds	r1, r1, r8
   16738:	sub	r2, r4, #1
   1673c:	bcc	168d8 <__assert_fail@plt+0x5140>
   16740:	mov	r4, r2
   16744:	rsb	ip, r0, r1
   16748:	mov	r1, r9
   1674c:	str	ip, [sp]
   16750:	uxth	r5, r5
   16754:	mov	r0, ip
   16758:	bl	168f4 <__assert_fail@plt+0x515c>
   1675c:	ldr	ip, [sp]
   16760:	mov	r1, r9
   16764:	mov	fp, r0
   16768:	mov	r0, ip
   1676c:	bl	16ae0 <__assert_fail@plt+0x5348>
   16770:	mul	sl, sl, fp
   16774:	orr	r1, r5, r1, lsl #16
   16778:	cmp	sl, r1
   1677c:	bls	16790 <__assert_fail@plt+0x4ff8>
   16780:	adds	r1, r1, r8
   16784:	sub	r2, fp, #1
   16788:	bcc	168c4 <__assert_fail@plt+0x512c>
   1678c:	mov	fp, r2
   16790:	ldr	r3, [sp, #4]
   16794:	orr	r0, fp, r4, lsl #16
   16798:	rsb	sl, sl, r1
   1679c:	umull	r4, r5, r0, r3
   167a0:	cmp	sl, r5
   167a4:	bcc	167c4 <__assert_fail@plt+0x502c>
   167a8:	movne	r3, #0
   167ac:	moveq	r3, #1
   167b0:	cmp	r4, r6, lsl r7
   167b4:	movls	r6, #0
   167b8:	andhi	r6, r3, #1
   167bc:	cmp	r6, #0
   167c0:	beq	165b8 <__assert_fail@plt+0x4e20>
   167c4:	mov	r6, #0
   167c8:	sub	r0, r0, #1
   167cc:	mov	r1, r6
   167d0:	add	sp, sp, #12
   167d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167d8:	lsl	r4, r4, r3
   167dc:	rsb	r9, r3, #32
   167e0:	lsr	r2, r5, r9
   167e4:	lsr	r9, r6, r9
   167e8:	lsr	r8, r4, #16
   167ec:	orr	r9, r9, r5, lsl r3
   167f0:	mov	r0, r2
   167f4:	lsl	r7, r6, r3
   167f8:	mov	r1, r8
   167fc:	str	r2, [sp]
   16800:	bl	168f4 <__assert_fail@plt+0x515c>
   16804:	ldr	r2, [sp]
   16808:	mov	r1, r8
   1680c:	uxth	sl, r4
   16810:	mov	fp, r0
   16814:	mov	r0, r2
   16818:	bl	16ae0 <__assert_fail@plt+0x5348>
   1681c:	mul	r0, sl, fp
   16820:	lsr	r3, r9, #16
   16824:	orr	r1, r3, r1, lsl #16
   16828:	cmp	r0, r1
   1682c:	bls	1684c <__assert_fail@plt+0x50b4>
   16830:	adds	r1, r1, r4
   16834:	sub	r3, fp, #1
   16838:	bcs	168ec <__assert_fail@plt+0x5154>
   1683c:	cmp	r0, r1
   16840:	subhi	fp, fp, #2
   16844:	addhi	r1, r1, r4
   16848:	bls	168ec <__assert_fail@plt+0x5154>
   1684c:	rsb	r5, r0, r1
   16850:	mov	r1, r8
   16854:	uxth	r9, r9
   16858:	mov	r0, r5
   1685c:	bl	168f4 <__assert_fail@plt+0x515c>
   16860:	mov	r1, r8
   16864:	mov	r6, r0
   16868:	mov	r0, r5
   1686c:	bl	16ae0 <__assert_fail@plt+0x5348>
   16870:	mul	r5, sl, r6
   16874:	orr	r1, r9, r1, lsl #16
   16878:	cmp	r5, r1
   1687c:	bls	168a0 <__assert_fail@plt+0x5108>
   16880:	adds	r1, r1, r4
   16884:	sub	r3, r6, #1
   16888:	bcs	1689c <__assert_fail@plt+0x5104>
   1688c:	cmp	r5, r1
   16890:	subhi	r6, r6, #2
   16894:	addhi	r1, r1, r4
   16898:	bhi	168a0 <__assert_fail@plt+0x5108>
   1689c:	mov	r6, r3
   168a0:	rsb	r5, r5, r1
   168a4:	orr	r6, r6, fp, lsl #16
   168a8:	b	16634 <__assert_fail@plt+0x4e9c>
   168ac:	mov	r6, r3
   168b0:	b	165b0 <__assert_fail@plt+0x4e18>
   168b4:	mov	r9, r2
   168b8:	b	16680 <__assert_fail@plt+0x4ee8>
   168bc:	mov	r5, r3
   168c0:	b	166cc <__assert_fail@plt+0x4f34>
   168c4:	cmp	sl, r1
   168c8:	subhi	fp, fp, #2
   168cc:	addhi	r1, r1, r8
   168d0:	bhi	16790 <__assert_fail@plt+0x4ff8>
   168d4:	b	1678c <__assert_fail@plt+0x4ff4>
   168d8:	cmp	r0, r1
   168dc:	subhi	r4, r4, #2
   168e0:	addhi	r1, r1, r8
   168e4:	bhi	16744 <__assert_fail@plt+0x4fac>
   168e8:	b	16740 <__assert_fail@plt+0x4fa8>
   168ec:	mov	fp, r3
   168f0:	b	1684c <__assert_fail@plt+0x50b4>
   168f4:	subs	r2, r1, #1
   168f8:	bxeq	lr
   168fc:	bcc	16ad4 <__assert_fail@plt+0x533c>
   16900:	cmp	r0, r1
   16904:	bls	16ab8 <__assert_fail@plt+0x5320>
   16908:	tst	r1, r2
   1690c:	beq	16ac4 <__assert_fail@plt+0x532c>
   16910:	clz	r3, r0
   16914:	clz	r2, r1
   16918:	sub	r3, r2, r3
   1691c:	rsbs	r3, r3, #31
   16920:	addne	r3, r3, r3, lsl #1
   16924:	mov	r2, #0
   16928:	addne	pc, pc, r3, lsl #2
   1692c:	nop	{0}
   16930:	cmp	r0, r1, lsl #31
   16934:	adc	r2, r2, r2
   16938:	subcs	r0, r0, r1, lsl #31
   1693c:	cmp	r0, r1, lsl #30
   16940:	adc	r2, r2, r2
   16944:	subcs	r0, r0, r1, lsl #30
   16948:	cmp	r0, r1, lsl #29
   1694c:	adc	r2, r2, r2
   16950:	subcs	r0, r0, r1, lsl #29
   16954:	cmp	r0, r1, lsl #28
   16958:	adc	r2, r2, r2
   1695c:	subcs	r0, r0, r1, lsl #28
   16960:	cmp	r0, r1, lsl #27
   16964:	adc	r2, r2, r2
   16968:	subcs	r0, r0, r1, lsl #27
   1696c:	cmp	r0, r1, lsl #26
   16970:	adc	r2, r2, r2
   16974:	subcs	r0, r0, r1, lsl #26
   16978:	cmp	r0, r1, lsl #25
   1697c:	adc	r2, r2, r2
   16980:	subcs	r0, r0, r1, lsl #25
   16984:	cmp	r0, r1, lsl #24
   16988:	adc	r2, r2, r2
   1698c:	subcs	r0, r0, r1, lsl #24
   16990:	cmp	r0, r1, lsl #23
   16994:	adc	r2, r2, r2
   16998:	subcs	r0, r0, r1, lsl #23
   1699c:	cmp	r0, r1, lsl #22
   169a0:	adc	r2, r2, r2
   169a4:	subcs	r0, r0, r1, lsl #22
   169a8:	cmp	r0, r1, lsl #21
   169ac:	adc	r2, r2, r2
   169b0:	subcs	r0, r0, r1, lsl #21
   169b4:	cmp	r0, r1, lsl #20
   169b8:	adc	r2, r2, r2
   169bc:	subcs	r0, r0, r1, lsl #20
   169c0:	cmp	r0, r1, lsl #19
   169c4:	adc	r2, r2, r2
   169c8:	subcs	r0, r0, r1, lsl #19
   169cc:	cmp	r0, r1, lsl #18
   169d0:	adc	r2, r2, r2
   169d4:	subcs	r0, r0, r1, lsl #18
   169d8:	cmp	r0, r1, lsl #17
   169dc:	adc	r2, r2, r2
   169e0:	subcs	r0, r0, r1, lsl #17
   169e4:	cmp	r0, r1, lsl #16
   169e8:	adc	r2, r2, r2
   169ec:	subcs	r0, r0, r1, lsl #16
   169f0:	cmp	r0, r1, lsl #15
   169f4:	adc	r2, r2, r2
   169f8:	subcs	r0, r0, r1, lsl #15
   169fc:	cmp	r0, r1, lsl #14
   16a00:	adc	r2, r2, r2
   16a04:	subcs	r0, r0, r1, lsl #14
   16a08:	cmp	r0, r1, lsl #13
   16a0c:	adc	r2, r2, r2
   16a10:	subcs	r0, r0, r1, lsl #13
   16a14:	cmp	r0, r1, lsl #12
   16a18:	adc	r2, r2, r2
   16a1c:	subcs	r0, r0, r1, lsl #12
   16a20:	cmp	r0, r1, lsl #11
   16a24:	adc	r2, r2, r2
   16a28:	subcs	r0, r0, r1, lsl #11
   16a2c:	cmp	r0, r1, lsl #10
   16a30:	adc	r2, r2, r2
   16a34:	subcs	r0, r0, r1, lsl #10
   16a38:	cmp	r0, r1, lsl #9
   16a3c:	adc	r2, r2, r2
   16a40:	subcs	r0, r0, r1, lsl #9
   16a44:	cmp	r0, r1, lsl #8
   16a48:	adc	r2, r2, r2
   16a4c:	subcs	r0, r0, r1, lsl #8
   16a50:	cmp	r0, r1, lsl #7
   16a54:	adc	r2, r2, r2
   16a58:	subcs	r0, r0, r1, lsl #7
   16a5c:	cmp	r0, r1, lsl #6
   16a60:	adc	r2, r2, r2
   16a64:	subcs	r0, r0, r1, lsl #6
   16a68:	cmp	r0, r1, lsl #5
   16a6c:	adc	r2, r2, r2
   16a70:	subcs	r0, r0, r1, lsl #5
   16a74:	cmp	r0, r1, lsl #4
   16a78:	adc	r2, r2, r2
   16a7c:	subcs	r0, r0, r1, lsl #4
   16a80:	cmp	r0, r1, lsl #3
   16a84:	adc	r2, r2, r2
   16a88:	subcs	r0, r0, r1, lsl #3
   16a8c:	cmp	r0, r1, lsl #2
   16a90:	adc	r2, r2, r2
   16a94:	subcs	r0, r0, r1, lsl #2
   16a98:	cmp	r0, r1, lsl #1
   16a9c:	adc	r2, r2, r2
   16aa0:	subcs	r0, r0, r1, lsl #1
   16aa4:	cmp	r0, r1
   16aa8:	adc	r2, r2, r2
   16aac:	subcs	r0, r0, r1
   16ab0:	mov	r0, r2
   16ab4:	bx	lr
   16ab8:	moveq	r0, #1
   16abc:	movne	r0, #0
   16ac0:	bx	lr
   16ac4:	clz	r2, r1
   16ac8:	rsb	r2, r2, #31
   16acc:	lsr	r0, r0, r2
   16ad0:	bx	lr
   16ad4:	cmp	r0, #0
   16ad8:	mvnne	r0, #0
   16adc:	b	15fb0 <__assert_fail@plt+0x4818>
   16ae0:	cmp	r1, #0
   16ae4:	beq	16ad4 <__assert_fail@plt+0x533c>
   16ae8:	push	{r0, r1, lr}
   16aec:	bl	168f4 <__assert_fail@plt+0x515c>
   16af0:	pop	{r1, r2, lr}
   16af4:	mul	r3, r2, r0
   16af8:	sub	r1, r1, r3
   16afc:	bx	lr
   16b00:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16b04:	mov	r7, r0
   16b08:	ldr	r6, [pc, #76]	; 16b5c <__assert_fail@plt+0x53c4>
   16b0c:	mov	r8, r1
   16b10:	ldr	r5, [pc, #72]	; 16b60 <__assert_fail@plt+0x53c8>
   16b14:	mov	r9, r2
   16b18:	add	r6, pc, r6
   16b1c:	bl	11394 <calloc@plt-0x20>
   16b20:	add	r5, pc, r5
   16b24:	rsb	r6, r5, r6
   16b28:	asrs	r6, r6, #2
   16b2c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   16b30:	sub	r5, r5, #4
   16b34:	mov	r4, #0
   16b38:	add	r4, r4, #1
   16b3c:	ldr	r3, [r5, #4]!
   16b40:	mov	r0, r7
   16b44:	mov	r1, r8
   16b48:	mov	r2, r9
   16b4c:	blx	r3
   16b50:	cmp	r4, r6
   16b54:	bne	16b38 <__assert_fail@plt+0x53a0>
   16b58:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16b5c:	ldrdeq	r1, [r1], -r8
   16b60:	andeq	r1, r1, ip, asr #7
   16b64:	bx	lr
   16b68:	ldr	r3, [pc, #28]	; 16b8c <__assert_fail@plt+0x53f4>
   16b6c:	mov	r1, #0
   16b70:	ldr	r2, [pc, #24]	; 16b90 <__assert_fail@plt+0x53f8>
   16b74:	add	r3, pc, r3
   16b78:	ldr	r3, [r3, r2]
   16b7c:	cmp	r3, #0
   16b80:	ldrne	r2, [r3]
   16b84:	moveq	r2, r3
   16b88:	b	115f4 <__cxa_atexit@plt>
   16b8c:	andeq	r1, r1, r4, lsl #9
   16b90:	andeq	r0, r0, r4, ror #2

Disassembly of section .fini:

00016b94 <.fini>:
   16b94:	push	{r3, lr}
   16b98:	pop	{r3, pc}
