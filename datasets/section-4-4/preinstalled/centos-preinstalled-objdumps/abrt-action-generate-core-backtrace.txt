
centos-preinstalled/abrt-action-generate-core-backtrace:     file format elf32-littlearm


Disassembly of section .init:

000008b0 <_init@@Base>:
 8b0:	push	{r3, lr}
 8b4:	bl	d14 <main@@Base+0x378>
 8b8:	pop	{r3, pc}

Disassembly of section .plt:

000008bc <abrt_get_backtrace@plt-0x14>:
 8bc:	push	{lr}		; (str lr, [sp, #-4]!)
 8c0:	ldr	lr, [pc, #4]	; 8cc <_init@@Base+0x1c>
 8c4:	add	lr, pc, lr
 8c8:	ldr	pc, [lr, #8]!
 8cc:			; <UNDEFINED> instruction: 0x000116b8

000008d0 <abrt_get_backtrace@plt>:
 8d0:	add	ip, pc, #0, 12
 8d4:	add	ip, ip, #69632	; 0x11000
 8d8:	ldr	pc, [ip, #1720]!	; 0x6b8

000008dc <free@plt>:
 8dc:	add	ip, pc, #0, 12
 8e0:	add	ip, ip, #69632	; 0x11000
 8e4:	ldr	pc, [ip, #1712]!	; 0x6b0

000008e8 <sr_abrt_create_core_stacktrace_from_gdb@plt>:
 8e8:	add	ip, pc, #0, 12
 8ec:	add	ip, ip, #69632	; 0x11000
 8f0:	ldr	pc, [ip, #1704]!	; 0x6a8

000008f4 <libreport_parse_opts@plt>:
 8f4:	add	ip, pc, #0, 12
 8f8:	add	ip, ip, #69632	; 0x11000
 8fc:	ldr	pc, [ip, #1696]!	; 0x6a0

00000900 <libreport_export_abrt_envvars@plt>:
 900:	add	ip, pc, #0, 12
 904:	add	ip, ip, #69632	; 0x11000
 908:	ldr	pc, [ip, #1688]!	; 0x698

0000090c <textdomain@plt>:
 90c:	add	ip, pc, #0, 12
 910:	add	ip, ip, #69632	; 0x11000
 914:	ldr	pc, [ip, #1680]!	; 0x690

00000918 <memset@plt>:
 918:	add	ip, pc, #0, 12
 91c:	add	ip, ip, #69632	; 0x11000
 920:	ldr	pc, [ip, #1672]!	; 0x688

00000924 <abort@plt>:
 924:	add	ip, pc, #0, 12
 928:	add	ip, ip, #69632	; 0x11000
 92c:	ldr	pc, [ip, #1664]!	; 0x680

00000930 <__stack_chk_fail@plt>:
 930:	add	ip, pc, #0, 12
 934:	add	ip, ip, #69632	; 0x11000
 938:	ldr	pc, [ip, #1656]!	; 0x678

0000093c <dcgettext@plt>:
 93c:	add	ip, pc, #0, 12
 940:	add	ip, ip, #69632	; 0x11000
 944:	ldr	pc, [ip, #1648]!	; 0x670

00000948 <log_wrapper@plt>:
 948:	add	ip, pc, #0, 12
 94c:	add	ip, ip, #69632	; 0x11000
 950:	ldr	pc, [ip, #1640]!	; 0x668

00000954 <bindtextdomain@plt>:
 954:	add	ip, pc, #0, 12
 958:	add	ip, ip, #69632	; 0x11000
 95c:	ldr	pc, [ip, #1632]!	; 0x660

00000960 <setlocale@plt>:
 960:	add	ip, pc, #0, 12
 964:	add	ip, ip, #69632	; 0x11000
 968:	ldr	pc, [ip, #1624]!	; 0x658

0000096c <abrt_init@plt>:
 96c:	add	ip, pc, #0, 12
 970:	add	ip, ip, #69632	; 0x11000
 974:	ldr	pc, [ip, #1616]!	; 0x650

00000978 <__libc_start_main@plt>:
 978:	add	ip, pc, #0, 12
 97c:	add	ip, ip, #69632	; 0x11000
 980:	ldr	pc, [ip, #1608]!	; 0x648

00000984 <__gmon_start__@plt>:
 984:	add	ip, pc, #0, 12
 988:	add	ip, ip, #69632	; 0x11000
 98c:	ldr	pc, [ip, #1600]!	; 0x640

00000990 <__cxa_finalize@plt>:
 990:	stmia	r6!, {}
 992:	b.n	eb4 <__libc_csu_init@@Base+0x1c>
 994:	ldmia	r2!, {r0, r4}
 996:	b.n	eb2 <__libc_csu_init@@Base+0x1a>
 998:	blx	ffa39514 <__bss_end__@@Base+0xffa2750c>

Disassembly of section .text:

0000099c <main@@Base>:
 99c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 9a0:	sub	sp, sp, #140	; 0x8c
 9a4:	ldr	r5, [pc, #700]	; c68 <main@@Base+0x2cc>
 9a8:	mov	r9, r1
 9ac:	ldr	r3, [pc, #696]	; c6c <main@@Base+0x2d0>
 9b0:	mov	fp, r0
 9b4:	add	r5, pc, r5
 9b8:	ldr	r1, [pc, #688]	; c70 <main@@Base+0x2d4>
 9bc:	ldr	r4, [pc, #688]	; c74 <main@@Base+0x2d8>
 9c0:	mov	r0, #6
 9c4:	ldr	r3, [r5, r3]
 9c8:	add	r1, pc, r1
 9cc:	add	r4, pc, r4
 9d0:	mov	r6, #0
 9d4:	add	sl, sp, #36	; 0x24
 9d8:	str	r3, [sp, #20]
 9dc:	ldr	r3, [r3]
 9e0:	str	r3, [sp, #132]	; 0x84
 9e4:	bl	960 <setlocale@plt>
 9e8:	ldr	r1, [pc, #648]	; c78 <main@@Base+0x2dc>
 9ec:	mov	r0, r4
 9f0:	add	r1, pc, r1
 9f4:	bl	954 <bindtextdomain@plt>
 9f8:	mov	r0, r4
 9fc:	bl	90c <textdomain@plt>
 a00:	mov	r0, r9
 a04:	bl	96c <abrt_init@plt>
 a08:	ldr	r1, [pc, #620]	; c7c <main@@Base+0x2e0>
 a0c:	ldr	r3, [pc, #620]	; c80 <main@@Base+0x2e4>
 a10:	mov	r2, #5
 a14:	add	r1, pc, r1
 a18:	mov	r0, r4
 a1c:	add	r3, pc, r3
 a20:	str	r6, [sp, #28]
 a24:	str	r3, [sp, #24]
 a28:	bl	93c <dcgettext@plt>
 a2c:	mov	r1, r6
 a30:	mov	r2, #96	; 0x60
 a34:	mov	r7, r0
 a38:	mov	r0, sl
 a3c:	bl	918 <memset@plt>
 a40:	ldr	r1, [pc, #572]	; c84 <main@@Base+0x2e8>
 a44:	ldr	r2, [pc, #572]	; c88 <main@@Base+0x2ec>
 a48:	mov	r0, #118	; 0x76
 a4c:	str	r0, [sp, #40]	; 0x28
 a50:	mov	r0, r4
 a54:	add	r2, pc, r2
 a58:	str	r2, [sp, #44]	; 0x2c
 a5c:	ldr	r8, [r5, r1]
 a60:	mov	r2, #5
 a64:	ldr	r1, [pc, #544]	; c8c <main@@Base+0x2f0>
 a68:	add	r1, pc, r1
 a6c:	str	r8, [sp, #48]	; 0x30
 a70:	bl	93c <dcgettext@plt>
 a74:	ldr	r1, [pc, #532]	; c90 <main@@Base+0x2f4>
 a78:	ldr	lr, [pc, #532]	; c94 <main@@Base+0x2f8>
 a7c:	mov	r2, #5
 a80:	add	r1, pc, r1
 a84:	mov	ip, #2
 a88:	add	lr, pc, lr
 a8c:	str	ip, [sp, #60]	; 0x3c
 a90:	str	lr, [sp, #76]	; 0x4c
 a94:	mov	ip, #100	; 0x64
 a98:	str	ip, [sp, #64]	; 0x40
 a9c:	add	ip, sp, #24
 aa0:	str	ip, [sp, #72]	; 0x48
 aa4:	str	r0, [sp, #56]	; 0x38
 aa8:	mov	r0, r4
 aac:	bl	93c <dcgettext@plt>
 ab0:	ldr	r1, [pc, #480]	; c98 <main@@Base+0x2fc>
 ab4:	ldr	ip, [pc, #480]	; c9c <main@@Base+0x300>
 ab8:	mov	r2, #5
 abc:	add	r1, pc, r1
 ac0:	mov	lr, #114	; 0x72
 ac4:	add	ip, pc, ip
 ac8:	str	lr, [sp, #88]	; 0x58
 acc:	str	ip, [sp, #92]	; 0x5c
 ad0:	add	ip, sp, #28
 ad4:	str	ip, [sp, #96]	; 0x60
 ad8:	str	r0, [sp, #80]	; 0x50
 adc:	mov	r0, r4
 ae0:	bl	93c <dcgettext@plt>
 ae4:	mov	r3, r7
 ae8:	mov	r1, r9
 aec:	mov	r2, sl
 af0:	mov	ip, #6
 af4:	str	ip, [sp, #108]	; 0x6c
 af8:	str	r0, [sp, #104]	; 0x68
 afc:	mov	r0, fp
 b00:	bl	8f4 <libreport_parse_opts@plt>
 b04:	mov	r0, r6
 b08:	bl	900 <libreport_export_abrt_envvars@plt>
 b0c:	ldr	r3, [r8]
 b10:	cmp	r3, #1
 b14:	ldrgt	r3, [pc, #388]	; ca0 <main@@Base+0x304>
 b18:	movgt	r2, #1
 b1c:	ldrgt	r3, [r5, r3]
 b20:	strbgt	r2, [r3]
 b24:	ldr	sl, [pc, #376]	; ca4 <main@@Base+0x308>
 b28:	mov	r2, #5
 b2c:	ldr	r1, [pc, #372]	; ca8 <main@@Base+0x30c>
 b30:	mov	r4, #0
 b34:	add	sl, pc, sl
 b38:	ldr	r9, [pc, #364]	; cac <main@@Base+0x310>
 b3c:	add	r1, pc, r1
 b40:	ldr	r8, [pc, #360]	; cb0 <main@@Base+0x314>
 b44:	mov	r0, sl
 b48:	add	r9, pc, r9
 b4c:	bl	93c <dcgettext@plt>
 b50:	add	r8, pc, r8
 b54:	mov	r1, r9
 b58:	mov	r2, #64	; 0x40
 b5c:	mov	r3, r8
 b60:	str	r4, [sp]
 b64:	str	r4, [sp, #4]
 b68:	str	r0, [sp, #8]
 b6c:	mov	r0, #4
 b70:	bl	948 <log_wrapper@plt>
 b74:	mov	r2, r4
 b78:	ldr	r0, [sp, #24]
 b7c:	mov	r1, #240	; 0xf0
 b80:	str	r4, [sp, #32]
 b84:	bl	8d0 <abrt_get_backtrace@plt>
 b88:	subs	r5, r0, #0
 b8c:	beq	c28 <main@@Base+0x28c>
 b90:	ldr	r2, [sp, #28]
 b94:	mov	r1, r5
 b98:	add	r3, sp, #32
 b9c:	ldr	r0, [sp, #24]
 ba0:	rsbs	r2, r2, #1
 ba4:	movcc	r2, #0
 ba8:	bl	8e8 <sr_abrt_create_core_stacktrace_from_gdb@plt>
 bac:	mov	r6, r0
 bb0:	mov	r0, r5
 bb4:	bl	8dc <free@plt>
 bb8:	cmp	r6, #0
 bbc:	movne	r0, r4
 bc0:	bne	c0c <main@@Base+0x270>
 bc4:	ldr	r1, [pc, #232]	; cb4 <main@@Base+0x318>
 bc8:	mov	r2, #5
 bcc:	mov	r0, sl
 bd0:	add	r1, pc, r1
 bd4:	bl	93c <dcgettext@plt>
 bd8:	ldr	r2, [sp, #32]
 bdc:	mov	r1, r9
 be0:	mov	r3, r8
 be4:	str	r6, [sp]
 be8:	str	r2, [sp, #12]
 bec:	mov	r2, #95	; 0x5f
 bf0:	str	r6, [sp, #4]
 bf4:	str	r0, [sp, #8]
 bf8:	mov	r0, #4
 bfc:	bl	948 <log_wrapper@plt>
 c00:	ldr	r0, [sp, #32]
 c04:	bl	8dc <free@plt>
 c08:	mov	r0, #1
 c0c:	ldr	r1, [sp, #20]
 c10:	ldr	r2, [sp, #132]	; 0x84
 c14:	ldr	r3, [r1]
 c18:	cmp	r2, r3
 c1c:	bne	c64 <main@@Base+0x2c8>
 c20:	add	sp, sp, #140	; 0x8c
 c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c28:	ldr	r1, [pc, #136]	; cb8 <main@@Base+0x31c>
 c2c:	mov	r2, #5
 c30:	mov	r0, sl
 c34:	add	r1, pc, r1
 c38:	bl	93c <dcgettext@plt>
 c3c:	str	r5, [sp]
 c40:	str	r5, [sp, #4]
 c44:	mov	r1, r9
 c48:	mov	r3, r8
 c4c:	mov	r2, #81	; 0x51
 c50:	str	r0, [sp, #8]
 c54:	mov	r0, #4
 c58:	bl	948 <log_wrapper@plt>
 c5c:	mov	r0, #1
 c60:	b	c0c <main@@Base+0x270>
 c64:	bl	930 <__stack_chk_fail@plt>
 c68:	andeq	r1, r1, r8, asr #11
 c6c:	andeq	r0, r0, r0, asr r0
 c70:	andeq	r0, r0, ip, lsl #12
 c74:	andeq	r0, r0, r0, asr #10
 c78:	andeq	r0, r0, r4, lsr #10
 c7c:	andeq	r0, r0, r8, lsl r5
 c80:	andeq	r0, r0, ip, lsl #10
 c84:	andeq	r0, r0, r0, rrx
 c88:	andeq	r0, r0, r8, lsr r5
 c8c:	andeq	r0, r0, ip, lsr #10
 c90:	andeq	r0, r0, r4, lsr #10
 c94:	andeq	r0, r0, r8, lsl r5
 c98:	andeq	r0, r0, r0, lsl #10
 c9c:	strdeq	r0, [r0], -r4
 ca0:	andeq	r0, r0, r8, asr r0
 ca4:	ldrdeq	r0, [r0], -r8
 ca8:	muleq	r0, ip, r4
 cac:	andeq	r0, r0, ip, lsr #9
 cb0:			; <UNDEFINED> instruction: 0x000003b4
 cb4:	andeq	r0, r0, r0, ror r4
 cb8:	andeq	r0, r0, r8, ror #7
 cbc:	mov	fp, #0
 cc0:	mov	lr, #0
 cc4:	pop	{r1}		; (ldr r1, [sp], #4)
 cc8:	mov	r2, sp
 ccc:	push	{r2}		; (str r2, [sp, #-4]!)
 cd0:	push	{r0}		; (str r0, [sp, #-4]!)
 cd4:	ldr	sl, [pc, #40]	; d04 <main@@Base+0x368>
 cd8:	add	r3, pc, #36	; 0x24
 cdc:	add	sl, sl, r3
 ce0:	ldr	ip, [pc, #32]	; d08 <main@@Base+0x36c>
 ce4:	ldr	ip, [sl, ip]
 ce8:	push	{ip}		; (str ip, [sp, #-4]!)
 cec:	ldr	r3, [pc, #24]	; d0c <main@@Base+0x370>
 cf0:	ldr	r3, [sl, r3]
 cf4:	ldr	r0, [pc, #20]	; d10 <main@@Base+0x374>
 cf8:	ldr	r0, [sl, r0]
 cfc:	bl	978 <__libc_start_main@plt>
 d00:	bl	924 <abort@plt>
 d04:	andeq	r1, r1, r0, lsl #5
 d08:	andeq	r0, r0, ip, rrx
 d0c:	andeq	r0, r0, r4, rrx
 d10:	andeq	r0, r0, r4, asr r0
 d14:	ldr	r3, [pc, #20]	; d30 <main@@Base+0x394>
 d18:	ldr	r2, [pc, #20]	; d34 <main@@Base+0x398>
 d1c:	add	r3, pc, r3
 d20:	ldr	r2, [r3, r2]
 d24:	cmp	r2, #0
 d28:	bxeq	lr
 d2c:	b	984 <__gmon_start__@plt>
 d30:	andeq	r1, r1, r0, ror #4
 d34:	andeq	r0, r0, r0, ror r0
 d38:	ldr	r2, [pc, #60]	; d7c <main@@Base+0x3e0>
 d3c:	ldr	r0, [pc, #60]	; d80 <main@@Base+0x3e4>
 d40:	add	r2, pc, r2
 d44:	add	r0, pc, r0
 d48:	add	r2, r2, #3
 d4c:	rsb	r2, r0, r2
 d50:	push	{r3, lr}
 d54:	cmp	r2, #6
 d58:	ldr	r3, [pc, #36]	; d84 <main@@Base+0x3e8>
 d5c:	add	r3, pc, r3
 d60:	popls	{r3, pc}
 d64:	ldr	r2, [pc, #28]	; d88 <main@@Base+0x3ec>
 d68:	ldr	r3, [r3, r2]
 d6c:	cmp	r3, #0
 d70:	popeq	{r3, pc}
 d74:	blx	r3
 d78:	pop	{r3, pc}
 d7c:			; <UNDEFINED> instruction: 0x000112bc
 d80:			; <UNDEFINED> instruction: 0x000112b8
 d84:	andeq	r1, r1, r0, lsr #4
 d88:	andeq	r0, r0, r8, rrx
 d8c:	push	{r3, lr}
 d90:	ldr	r0, [pc, #64]	; dd8 <main@@Base+0x43c>
 d94:	ldr	r3, [pc, #64]	; ddc <main@@Base+0x440>
 d98:	add	r0, pc, r0
 d9c:	ldr	r2, [pc, #60]	; de0 <main@@Base+0x444>
 da0:	add	r3, pc, r3
 da4:	rsb	r3, r0, r3
 da8:	add	r2, pc, r2
 dac:	asr	r3, r3, #2
 db0:	add	r3, r3, r3, lsr #31
 db4:	asrs	r3, r3, #1
 db8:	popeq	{r3, pc}
 dbc:	ldr	r1, [pc, #32]	; de4 <main@@Base+0x448>
 dc0:	ldr	r2, [r2, r1]
 dc4:	cmp	r2, #0
 dc8:	popeq	{r3, pc}
 dcc:	mov	r1, r3
 dd0:	blx	r2
 dd4:	pop	{r3, pc}
 dd8:	andeq	r1, r1, r4, ror #4
 ddc:	andeq	r1, r1, ip, asr r2
 de0:	ldrdeq	r1, [r1], -r4
 de4:	andeq	r0, r0, r4, ror r0
 de8:	ldr	r2, [pc, #76]	; e3c <main@@Base+0x4a0>
 dec:	push	{r3, lr}
 df0:	add	r2, pc, r2
 df4:	ldr	r3, [pc, #68]	; e40 <main@@Base+0x4a4>
 df8:	ldrb	r2, [r2]
 dfc:	add	r3, pc, r3
 e00:	cmp	r2, #0
 e04:	popne	{r3, pc}
 e08:	ldr	r2, [pc, #52]	; e44 <main@@Base+0x4a8>
 e0c:	ldr	r3, [r3, r2]
 e10:	cmp	r3, #0
 e14:	beq	e24 <main@@Base+0x488>
 e18:	ldr	r0, [pc, #40]	; e48 <main@@Base+0x4ac>
 e1c:	add	r0, pc, r0
 e20:	bl	990 <__cxa_finalize@plt>
 e24:	bl	d38 <main@@Base+0x39c>
 e28:	ldr	r3, [pc, #28]	; e4c <main@@Base+0x4b0>
 e2c:	mov	r2, #1
 e30:	add	r3, pc, r3
 e34:	strb	r2, [r3]
 e38:	pop	{r3, pc}
 e3c:	andeq	r1, r1, ip, lsl #4
 e40:	andeq	r1, r1, r0, lsl #3
 e44:	andeq	r0, r0, r8, ror r0
 e48:	andeq	r1, r1, r4, lsr #32
 e4c:	andeq	r1, r1, ip, asr #3
 e50:	ldr	r0, [pc, #52]	; e8c <main@@Base+0x4f0>
 e54:	push	{r3, lr}
 e58:	add	r0, pc, r0
 e5c:	ldr	r3, [pc, #44]	; e90 <main@@Base+0x4f4>
 e60:	ldr	r2, [r0]
 e64:	add	r3, pc, r3
 e68:	cmp	r2, #0
 e6c:	beq	e84 <main@@Base+0x4e8>
 e70:	ldr	r2, [pc, #28]	; e94 <main@@Base+0x4f8>
 e74:	ldr	r3, [r3, r2]
 e78:	cmp	r3, #0
 e7c:	beq	e84 <main@@Base+0x4e8>
 e80:	blx	r3
 e84:	pop	{r3, lr}
 e88:	b	d8c <main@@Base+0x3f0>
 e8c:	andeq	r0, r1, r4, ror #31
 e90:	andeq	r1, r1, r8, lsl r1
 e94:	andeq	r0, r0, ip, asr r0

00000e98 <__libc_csu_init@@Base>:
 e98:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 e9c:	mov	r7, r0
 ea0:	ldr	r6, [pc, #76]	; ef4 <__libc_csu_init@@Base+0x5c>
 ea4:	mov	r8, r1
 ea8:	ldr	r5, [pc, #72]	; ef8 <__libc_csu_init@@Base+0x60>
 eac:	mov	r9, r2
 eb0:	add	r6, pc, r6
 eb4:	bl	8b0 <_init@@Base>
 eb8:	add	r5, pc, r5
 ebc:	rsb	r6, r5, r6
 ec0:	asrs	r6, r6, #2
 ec4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
 ec8:	sub	r5, r5, #4
 ecc:	mov	r4, #0
 ed0:	add	r4, r4, #1
 ed4:	ldr	r3, [r5, #4]!
 ed8:	mov	r0, r7
 edc:	mov	r1, r8
 ee0:	mov	r2, r9
 ee4:	blx	r3
 ee8:	cmp	r4, r6
 eec:	bne	ed0 <__libc_csu_init@@Base+0x38>
 ef0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 ef4:	andeq	r0, r1, r8, lsl #31
 ef8:	andeq	r0, r1, ip, ror pc

00000efc <__libc_csu_fini@@Base>:
 efc:	bx	lr

Disassembly of section .fini:

00000f00 <_fini@@Base>:
 f00:	push	{r3, lr}
 f04:	pop	{r3, pc}
