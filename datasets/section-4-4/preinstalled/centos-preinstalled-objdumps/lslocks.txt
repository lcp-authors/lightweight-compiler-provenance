
centos-preinstalled/lslocks:     file format elf32-littlearm


Disassembly of section .init:

00011400 <_init@@Base>:
   11400:	push	{r3, lr}
   11404:	bl	11f04 <__assert_fail@plt+0x724>
   11408:	pop	{r3, pc}

Disassembly of section .plt:

0001140c <fdopen@plt-0x14>:
   1140c:	push	{lr}		; (str lr, [sp, #-4]!)
   11410:	ldr	lr, [pc, #4]	; 1141c <_init@@Base+0x1c>
   11414:	add	lr, pc, lr
   11418:	ldr	pc, [lr, #8]!
   1141c:	andeq	r6, r1, r4, ror #23

00011420 <fdopen@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #90112	; 0x16000
   11428:	ldr	pc, [ip, #3044]!	; 0xbe4

0001142c <calloc@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #90112	; 0x16000
   11434:	ldr	pc, [ip, #3036]!	; 0xbdc

00011438 <raise@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #90112	; 0x16000
   11440:	ldr	pc, [ip, #3028]!	; 0xbd4

00011444 <strcmp@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #90112	; 0x16000
   1144c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011450 <mnt_new_table_from_file@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #90112	; 0x16000
   11458:	ldr	pc, [ip, #3012]!	; 0xbc4

0001145c <strtol@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #90112	; 0x16000
   11464:	ldr	pc, [ip, #3004]!	; 0xbbc

00011468 <strcspn@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #90112	; 0x16000
   11470:	ldr	pc, [ip, #2996]!	; 0xbb4

00011474 <wcwidth@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #90112	; 0x16000
   1147c:	ldr	pc, [ip, #2988]!	; 0xbac

00011480 <free@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #90112	; 0x16000
   11488:	ldr	pc, [ip, #2980]!	; 0xba4

0001148c <fgets@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #90112	; 0x16000
   11494:	ldr	pc, [ip, #2972]!	; 0xb9c

00011498 <ferror@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #90112	; 0x16000
   114a0:	ldr	pc, [ip, #2964]!	; 0xb94

000114a4 <__openat64_2@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #90112	; 0x16000
   114ac:	ldr	pc, [ip, #2956]!	; 0xb8c

000114b0 <_exit@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #90112	; 0x16000
   114b8:	ldr	pc, [ip, #2948]!	; 0xb84

000114bc <memcpy@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #90112	; 0x16000
   114c4:	ldr	pc, [ip, #2940]!	; 0xb7c

000114c8 <mnt_table_find_devno@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #90112	; 0x16000
   114d0:	ldr	pc, [ip, #2932]!	; 0xb74

000114d4 <__strtoull_internal@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #90112	; 0x16000
   114dc:	ldr	pc, [ip, #2924]!	; 0xb6c

000114e0 <dcgettext@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #90112	; 0x16000
   114e8:	ldr	pc, [ip, #2916]!	; 0xb64

000114ec <__stack_chk_fail@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #90112	; 0x16000
   114f4:	ldr	pc, [ip, #2908]!	; 0xb5c

000114f8 <textdomain@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #90112	; 0x16000
   11500:	ldr	pc, [ip, #2900]!	; 0xb54

00011504 <__strndup@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #90112	; 0x16000
   1150c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011510 <err@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #90112	; 0x16000
   11518:	ldr	pc, [ip, #2884]!	; 0xb44

0001151c <__fxstatat64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #90112	; 0x16000
   11524:	ldr	pc, [ip, #2876]!	; 0xb3c

00011528 <iswprint@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #90112	; 0x16000
   11530:	ldr	pc, [ip, #2868]!	; 0xb34

00011534 <ioctl@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #90112	; 0x16000
   1153c:	ldr	pc, [ip, #2860]!	; 0xb2c

00011540 <__ctype_get_mb_cur_max@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #90112	; 0x16000
   11548:	ldr	pc, [ip, #2852]!	; 0xb24

0001154c <__fpending@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #90112	; 0x16000
   11554:	ldr	pc, [ip, #2844]!	; 0xb1c

00011558 <mbrtowc@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #90112	; 0x16000
   11560:	ldr	pc, [ip, #2836]!	; 0xb14

00011564 <wcstombs@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #90112	; 0x16000
   1156c:	ldr	pc, [ip, #2828]!	; 0xb0c

00011570 <opendir@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #90112	; 0x16000
   11578:	ldr	pc, [ip, #2820]!	; 0xb04

0001157c <mnt_fs_get_target@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #90112	; 0x16000
   11584:	ldr	pc, [ip, #2812]!	; 0xafc

00011588 <getenv@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #90112	; 0x16000
   11590:	ldr	pc, [ip, #2804]!	; 0xaf4

00011594 <malloc@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #90112	; 0x16000
   1159c:	ldr	pc, [ip, #2796]!	; 0xaec

000115a0 <__libc_start_main@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #90112	; 0x16000
   115a8:	ldr	pc, [ip, #2788]!	; 0xae4

000115ac <readlinkat@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #90112	; 0x16000
   115b4:	ldr	pc, [ip, #2780]!	; 0xadc

000115b8 <__gmon_start__@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #90112	; 0x16000
   115c0:	ldr	pc, [ip, #2772]!	; 0xad4

000115c4 <mempcpy@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #90112	; 0x16000
   115cc:	ldr	pc, [ip, #2764]!	; 0xacc

000115d0 <getopt_long@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #90112	; 0x16000
   115d8:	ldr	pc, [ip, #2756]!	; 0xac4

000115dc <__ctype_b_loc@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #90112	; 0x16000
   115e4:	ldr	pc, [ip, #2748]!	; 0xabc

000115e8 <exit@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #90112	; 0x16000
   115f0:	ldr	pc, [ip, #2740]!	; 0xab4

000115f4 <strtoul@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #90112	; 0x16000
   115fc:	ldr	pc, [ip, #2732]!	; 0xaac

00011600 <ttyname@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #90112	; 0x16000
   11608:	ldr	pc, [ip, #2724]!	; 0xaa4

0001160c <strlen@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #90112	; 0x16000
   11614:	ldr	pc, [ip, #2716]!	; 0xa9c

00011618 <strchr@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #90112	; 0x16000
   11620:	ldr	pc, [ip, #2708]!	; 0xa94

00011624 <warnx@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #90112	; 0x16000
   1162c:	ldr	pc, [ip, #2700]!	; 0xa8c

00011630 <__errno_location@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #90112	; 0x16000
   11638:	ldr	pc, [ip, #2692]!	; 0xa84

0001163c <strncasecmp@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #90112	; 0x16000
   11644:	ldr	pc, [ip, #2684]!	; 0xa7c

00011648 <__sprintf_chk@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #90112	; 0x16000
   11650:	ldr	pc, [ip, #2676]!	; 0xa74

00011654 <snprintf@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #90112	; 0x16000
   1165c:	ldr	pc, [ip, #2668]!	; 0xa6c

00011660 <__cxa_atexit@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #90112	; 0x16000
   11668:	ldr	pc, [ip, #2660]!	; 0xa64

0001166c <__vasprintf_chk@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #90112	; 0x16000
   11674:	ldr	pc, [ip, #2652]!	; 0xa5c

00011678 <__strdup@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #90112	; 0x16000
   11680:	ldr	pc, [ip, #2644]!	; 0xa54

00011684 <memset@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #90112	; 0x16000
   1168c:	ldr	pc, [ip, #2636]!	; 0xa4c

00011690 <strncpy@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #90112	; 0x16000
   11698:	ldr	pc, [ip, #2628]!	; 0xa44

0001169c <fgetc@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #90112	; 0x16000
   116a4:	ldr	pc, [ip, #2620]!	; 0xa3c

000116a8 <__printf_chk@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #90112	; 0x16000
   116b0:	ldr	pc, [ip, #2612]!	; 0xa34

000116b4 <strtod@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #90112	; 0x16000
   116bc:	ldr	pc, [ip, #2604]!	; 0xa2c

000116c0 <__fprintf_chk@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #90112	; 0x16000
   116c8:	ldr	pc, [ip, #2596]!	; 0xa24

000116cc <fclose@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #90112	; 0x16000
   116d4:	ldr	pc, [ip, #2588]!	; 0xa1c

000116d8 <strtok@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #90112	; 0x16000
   116e0:	ldr	pc, [ip, #2580]!	; 0xa14

000116e4 <setlocale@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #90112	; 0x16000
   116ec:	ldr	pc, [ip, #2572]!	; 0xa0c

000116f0 <errx@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #90112	; 0x16000
   116f8:	ldr	pc, [ip, #2564]!	; 0xa04

000116fc <warn@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #90112	; 0x16000
   11704:	ldr	pc, [ip, #2556]!	; 0x9fc

00011708 <nl_langinfo@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #90112	; 0x16000
   11710:	ldr	pc, [ip, #2548]!	; 0x9f4

00011714 <fputc@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #90112	; 0x16000
   1171c:	ldr	pc, [ip, #2540]!	; 0x9ec

00011720 <sscanf@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #90112	; 0x16000
   11728:	ldr	pc, [ip, #2532]!	; 0x9e4

0001172c <localeconv@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #90112	; 0x16000
   11734:	ldr	pc, [ip, #2524]!	; 0x9dc

00011738 <mbstowcs@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #90112	; 0x16000
   11740:	ldr	pc, [ip, #2516]!	; 0x9d4

00011744 <readdir64@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #90112	; 0x16000
   1174c:	ldr	pc, [ip, #2508]!	; 0x9cc

00011750 <dirfd@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #90112	; 0x16000
   11758:	ldr	pc, [ip, #2500]!	; 0x9c4

0001175c <__strtoll_internal@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #90112	; 0x16000
   11764:	ldr	pc, [ip, #2492]!	; 0x9bc

00011768 <fopen64@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #90112	; 0x16000
   11770:	ldr	pc, [ip, #2484]!	; 0x9b4

00011774 <bindtextdomain@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #90112	; 0x16000
   1177c:	ldr	pc, [ip, #2476]!	; 0x9ac

00011780 <mnt_free_table@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #90112	; 0x16000
   11788:	ldr	pc, [ip, #2468]!	; 0x9a4

0001178c <isatty@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #90112	; 0x16000
   11794:	ldr	pc, [ip, #2460]!	; 0x99c

00011798 <fputs@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #90112	; 0x16000
   117a0:	ldr	pc, [ip, #2452]!	; 0x994

000117a4 <strncmp@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #90112	; 0x16000
   117ac:	ldr	pc, [ip, #2444]!	; 0x98c

000117b0 <abort@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #90112	; 0x16000
   117b8:	ldr	pc, [ip, #2436]!	; 0x984

000117bc <closedir@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #90112	; 0x16000
   117c4:	ldr	pc, [ip, #2428]!	; 0x97c

000117c8 <__snprintf_chk@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #90112	; 0x16000
   117d0:	ldr	pc, [ip, #2420]!	; 0x974

000117d4 <strspn@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #90112	; 0x16000
   117dc:	ldr	pc, [ip, #2412]!	; 0x96c

000117e0 <__assert_fail@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #90112	; 0x16000
   117e8:	ldr	pc, [ip, #2404]!	; 0x964

Disassembly of section .text:

000117f0 <.text>:
   117f0:	push	{r3, lr}
   117f4:	movw	r0, #29584	; 0x7390
   117f8:	movw	r1, #29600	; 0x73a0
   117fc:	movw	r3, #28900	; 0x70e4
   11800:	movt	r0, #1
   11804:	movt	r1, #1
   11808:	mov	r2, #340	; 0x154
   1180c:	movt	r3, #1
   11810:	bl	117e0 <__assert_fail@plt>
   11814:	movw	r1, #29652	; 0x73d4
   11818:	mov	r0, #1
   1181c:	push	{r3, lr}
   11820:	movt	r1, #1
   11824:	bl	11510 <err@plt>
   11828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1182c:	movw	r4, #33376	; 0x8260
   11830:	movt	r4, #2
   11834:	sub	sp, sp, #52	; 0x34
   11838:	mov	sl, r1
   1183c:	mov	r7, r0
   11840:	ldr	r3, [r4]
   11844:	movw	r1, #29084	; 0x719c
   11848:	mov	r0, #6
   1184c:	movt	r1, #1
   11850:	ldr	r5, [pc, #1632]	; 11eb8 <__assert_fail@plt+0x6d8>
   11854:	mov	r9, #0
   11858:	str	r3, [sp, #44]	; 0x2c
   1185c:	bl	116e4 <setlocale@plt>
   11860:	movw	r0, #29908	; 0x74d4
   11864:	movw	r1, #29920	; 0x74e0
   11868:	movt	r0, #1
   1186c:	movt	r1, #1
   11870:	bl	11774 <bindtextdomain@plt>
   11874:	movw	r0, #29908	; 0x74d4
   11878:	movt	r0, #1
   1187c:	movw	r6, #33392	; 0x8270
   11880:	bl	114f8 <textdomain@plt>
   11884:	movw	r0, #8780	; 0x224c
   11888:	movt	r0, #1
   1188c:	movw	fp, #33400	; 0x8278
   11890:	bl	170a8 <__assert_fail@plt+0x58c8>
   11894:	movt	r6, #2
   11898:	movt	fp, #2
   1189c:	mov	r8, r9
   118a0:	mov	r3, #0
   118a4:	movw	r2, #29996	; 0x752c
   118a8:	str	r3, [sp]
   118ac:	movt	r2, #1
   118b0:	mov	r0, r7
   118b4:	mov	r1, sl
   118b8:	ldr	r3, [pc, #1532]	; 11ebc <__assert_fail@plt+0x6dc>
   118bc:	bl	115d0 <getopt_long@plt>
   118c0:	cmn	r0, #1
   118c4:	beq	11a38 <__assert_fail@plt+0x258>
   118c8:	sub	r0, r0, #86	; 0x56
   118cc:	cmp	r0, #31
   118d0:	ldrls	pc, [pc, r0, lsl #2]
   118d4:	b	11a28 <__assert_fail@plt+0x248>
   118d8:	ldrdeq	r1, [r1], -r8
   118dc:	andeq	r1, r1, r8, lsr #20
   118e0:	andeq	r1, r1, r8, lsr #20
   118e4:	andeq	r1, r1, r8, lsr #20
   118e8:	andeq	r1, r1, r8, lsr #20
   118ec:	andeq	r1, r1, r8, lsr #20
   118f0:	andeq	r1, r1, r8, lsr #20
   118f4:	andeq	r1, r1, r8, lsr #20
   118f8:	andeq	r1, r1, r8, lsr #20
   118fc:	andeq	r1, r1, r8, lsr #20
   11900:	andeq	r1, r1, r8, lsr #20
   11904:	andeq	r1, r1, r8, lsr #20
   11908:	andeq	r1, r1, r8, lsr #20
   1190c:	andeq	r1, r1, r8, lsr #20
   11910:	andeq	r1, r1, r8, lsr #20
   11914:	andeq	r1, r1, r8, lsr #20
   11918:	andeq	r1, r1, r8, lsr #20
   1191c:	andeq	r1, r1, r8, lsr #20
   11920:	andeq	r1, r1, r8, asr #19
   11924:	andeq	r1, r1, r8, lsr #20
   11928:	andeq	r1, r1, r8, lsr #20
   1192c:	andeq	r1, r1, r8, lsr #20
   11930:	andeq	r1, r1, r8, lsr #20
   11934:	andeq	r1, r1, r8, lsr #20
   11938:	andeq	r1, r1, r0, asr #19
   1193c:			; <UNDEFINED> instruction: 0x000119b8
   11940:	andeq	r1, r1, r4, lsl #19
   11944:	andeq	r1, r1, r8, lsr #20
   11948:	andeq	r1, r1, ip, ror r9
   1194c:	andeq	r1, r1, r8, lsr #20
   11950:	andeq	r1, r1, r8, lsr #20
   11954:	andeq	r1, r1, r8, asr r9
   11958:	movw	r3, #33128	; 0x8168
   1195c:	movt	r3, #2
   11960:	ldr	r2, [r3, #16]
   11964:	add	r3, r3, #24
   11968:	bic	r2, r2, #32
   1196c:	str	r2, [r3, #-8]
   11970:	cmp	r3, r5
   11974:	bne	11960 <__assert_fail@plt+0x180>
   11978:	b	118a0 <__assert_fail@plt+0xc0>
   1197c:	orr	r8, r8, #2
   11980:	b	118a0 <__assert_fail@plt+0xc0>
   11984:	ldr	r3, [r6]
   11988:	mov	r2, #5
   1198c:	movw	r1, #29940	; 0x74f4
   11990:	mov	r0, #0
   11994:	movt	r1, #1
   11998:	str	r3, [sp, #12]
   1199c:	bl	114e0 <dcgettext@plt>
   119a0:	ldr	r3, [sp, #12]
   119a4:	mov	r1, r0
   119a8:	mov	r0, r3
   119ac:	bl	131cc <__assert_fail@plt+0x19ec>
   119b0:	str	r0, [fp, #4]
   119b4:	b	118a0 <__assert_fail@plt+0xc0>
   119b8:	ldr	r9, [r6]
   119bc:	b	118a0 <__assert_fail@plt+0xc0>
   119c0:	orr	r8, r8, #8
   119c4:	b	118a0 <__assert_fail@plt+0xc0>
   119c8:	movw	r3, #33384	; 0x8268
   119cc:	movt	r3, #2
   119d0:	ldr	r0, [r3]
   119d4:	bl	11ffc <__assert_fail@plt+0x81c>
   119d8:	mov	r2, #5
   119dc:	movw	r1, #29964	; 0x750c
   119e0:	mov	r0, #0
   119e4:	movt	r1, #1
   119e8:	bl	114e0 <dcgettext@plt>
   119ec:	movw	r2, #33368	; 0x8258
   119f0:	movt	r2, #2
   119f4:	movw	r3, #29976	; 0x7518
   119f8:	movt	r3, #1
   119fc:	ldr	r2, [r2]
   11a00:	mov	r1, r0
   11a04:	mov	r0, #1
   11a08:	bl	116a8 <__printf_chk@plt>
   11a0c:	mov	r0, #0
   11a10:	ldr	r2, [sp, #44]	; 0x2c
   11a14:	ldr	r3, [r4]
   11a18:	cmp	r2, r3
   11a1c:	bne	11e58 <__assert_fail@plt+0x678>
   11a20:	add	sp, sp, #52	; 0x34
   11a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a28:	movw	r3, #33380	; 0x8264
   11a2c:	movt	r3, #2
   11a30:	ldr	r0, [r3]
   11a34:	bl	11ffc <__assert_fail@plt+0x81c>
   11a38:	movw	r5, #33400	; 0x8278
   11a3c:	movt	r5, #2
   11a40:	add	r7, sp, #36	; 0x24
   11a44:	str	r7, [sp, #36]	; 0x24
   11a48:	ldr	r3, [r5, #8]
   11a4c:	str	r7, [sp, #40]	; 0x28
   11a50:	cmp	r3, #0
   11a54:	bne	11aa4 <__assert_fail@plt+0x2c4>
   11a58:	mov	r2, #1
   11a5c:	str	r3, [r5, #12]
   11a60:	str	r2, [r5, #16]
   11a64:	mov	r3, #2
   11a68:	mov	r2, #3
   11a6c:	str	r3, [r5, #20]
   11a70:	str	r2, [r5, #24]
   11a74:	mov	r3, #4
   11a78:	mov	r2, #5
   11a7c:	str	r3, [r5, #28]
   11a80:	str	r2, [r5, #32]
   11a84:	mov	r3, #6
   11a88:	mov	r2, #7
   11a8c:	str	r3, [r5, #36]	; 0x24
   11a90:	str	r2, [r5, #40]	; 0x28
   11a94:	mov	r3, #9
   11a98:	str	r3, [r5, #8]
   11a9c:	mov	r3, #8
   11aa0:	str	r3, [r5, #44]	; 0x2c
   11aa4:	cmp	r9, #0
   11aa8:	beq	11ad4 <__assert_fail@plt+0x2f4>
   11aac:	ldr	r1, [pc, #1036]	; 11ec0 <__assert_fail@plt+0x6e0>
   11ab0:	mov	r0, r9
   11ab4:	movw	r3, #8616	; 0x21a8
   11ab8:	mov	r2, #10
   11abc:	movt	r3, #1
   11ac0:	str	r3, [sp]
   11ac4:	sub	r3, r1, #4
   11ac8:	bl	13b8c <__assert_fail@plt+0x23ac>
   11acc:	cmp	r0, #0
   11ad0:	blt	11e18 <__assert_fail@plt+0x638>
   11ad4:	mov	r0, r7
   11ad8:	bl	12388 <__assert_fail@plt+0xba8>
   11adc:	cmp	r0, #0
   11ae0:	str	r0, [sp, #20]
   11ae4:	bne	11e08 <__assert_fail@plt+0x628>
   11ae8:	ldr	r3, [sp, #36]	; 0x24
   11aec:	cmp	r3, r7
   11af0:	beq	11e08 <__assert_fail@plt+0x628>
   11af4:	mov	r0, r8
   11af8:	bl	1478c <__assert_fail@plt+0x2fac>
   11afc:	subs	r3, r0, #0
   11b00:	str	r3, [sp, #24]
   11b04:	beq	11e98 <__assert_fail@plt+0x6b8>
   11b08:	movw	sl, #33128	; 0x8168
   11b0c:	ldr	r6, [sp, #20]
   11b10:	movt	sl, #2
   11b14:	ldr	r9, [pc, #932]	; 11ec0 <__assert_fail@plt+0x6e0>
   11b18:	mov	r8, #24
   11b1c:	mov	fp, r3
   11b20:	b	11b58 <__assert_fail@plt+0x378>
   11b24:	ldr	r2, [r9, r6, lsl #2]
   11b28:	cmp	r2, #9
   11b2c:	bgt	11e78 <__assert_fail@plt+0x698>
   11b30:	mul	r2, r8, r2
   11b34:	mov	r0, fp
   11b38:	add	r3, sl, r2
   11b3c:	vldr	d0, [r3, #8]
   11b40:	ldr	r1, [sl, r2]
   11b44:	ldr	r2, [r3, #16]
   11b48:	bl	148bc <__assert_fail@plt+0x30dc>
   11b4c:	cmp	r0, #0
   11b50:	beq	11e20 <__assert_fail@plt+0x640>
   11b54:	add	r6, r6, #1
   11b58:	ldr	r3, [r5, #8]
   11b5c:	cmp	r6, r3
   11b60:	blt	11b24 <__assert_fail@plt+0x344>
   11b64:	movw	r3, #29084	; 0x719c
   11b68:	ldr	r6, [sp, #36]	; 0x24
   11b6c:	movt	r3, #1
   11b70:	ldr	r9, [pc, #840]	; 11ec0 <__assert_fail@plt+0x6e0>
   11b74:	str	r3, [sp, #16]
   11b78:	str	r4, [sp, #28]
   11b7c:	b	11b90 <__assert_fail@plt+0x3b0>
   11b80:	ldr	r2, [r6, #12]
   11b84:	cmp	r3, r2
   11b88:	beq	11bac <__assert_fail@plt+0x3cc>
   11b8c:	ldr	r6, [r6]
   11b90:	cmp	r6, r7
   11b94:	beq	11d94 <__assert_fail@plt+0x5b4>
   11b98:	ldr	r3, [r5, #4]
   11b9c:	cmp	r3, #0
   11ba0:	bne	11b80 <__assert_fail@plt+0x3a0>
   11ba4:	cmp	r6, #0
   11ba8:	beq	11e5c <__assert_fail@plt+0x67c>
   11bac:	ldr	r0, [sp, #24]
   11bb0:	mov	r1, #0
   11bb4:	bl	1494c <__assert_fail@plt+0x316c>
   11bb8:	subs	r8, r0, #0
   11bbc:	beq	11e40 <__assert_fail@plt+0x660>
   11bc0:	movw	sl, #29904	; 0x74d0
   11bc4:	movt	sl, #1
   11bc8:	mov	fp, #0
   11bcc:	mov	r3, sl
   11bd0:	mov	r4, fp
   11bd4:	mov	sl, fp
   11bd8:	mov	fp, r3
   11bdc:	ldr	r3, [r5, #8]
   11be0:	cmp	sl, r3
   11be4:	bge	11b8c <__assert_fail@plt+0x3ac>
   11be8:	ldr	r3, [r9, sl, lsl #2]
   11bec:	str	r4, [sp, #32]
   11bf0:	cmp	r3, #9
   11bf4:	bgt	11e78 <__assert_fail@plt+0x698>
   11bf8:	cmp	r3, #9
   11bfc:	ldrls	pc, [pc, r3, lsl #2]
   11c00:	b	11c8c <__assert_fail@plt+0x4ac>
   11c04:	andeq	r1, r1, ip, asr sp
   11c08:	andeq	r1, r1, r4, asr #26
   11c0c:	andeq	r1, r1, ip, ror sp
   11c10:	andeq	r1, r1, r4, ror #26
   11c14:	andeq	r1, r1, ip, lsl sp
   11c18:	andeq	r1, r1, r0, lsl #26
   11c1c:	andeq	r1, r1, r8, ror #25
   11c20:	ldrdeq	r1, [r1], -r0
   11c24:	andeq	r1, r1, ip, lsr #25
   11c28:	andeq	r1, r1, ip, lsr #24
   11c2c:	ldrb	r3, [r6, #48]	; 0x30
   11c30:	tst	r3, #2
   11c34:	beq	11ca4 <__assert_fail@plt+0x4c4>
   11c38:	ldr	r1, [r6, #56]	; 0x38
   11c3c:	cmp	r1, #0
   11c40:	ldrne	r3, [sp, #36]	; 0x24
   11c44:	bne	11c50 <__assert_fail@plt+0x470>
   11c48:	b	11ca4 <__assert_fail@plt+0x4c4>
   11c4c:	ldr	r3, [r3]
   11c50:	cmp	r3, r7
   11c54:	beq	11ca4 <__assert_fail@plt+0x4c4>
   11c58:	ldr	r2, [r3, #56]	; 0x38
   11c5c:	cmp	r1, r2
   11c60:	bne	11c4c <__assert_fail@plt+0x46c>
   11c64:	ldrb	r2, [r3, #48]	; 0x30
   11c68:	tst	r2, #2
   11c6c:	bne	11c4c <__assert_fail@plt+0x46c>
   11c70:	ldr	r2, [r3, #12]
   11c74:	cmp	r2, #0
   11c78:	beq	11ca4 <__assert_fail@plt+0x4c4>
   11c7c:	movw	r1, #30280	; 0x7648
   11c80:	add	r0, sp, #32
   11c84:	movt	r1, #1
   11c88:	bl	12138 <__assert_fail@plt+0x958>
   11c8c:	ldr	r2, [sp, #32]
   11c90:	cmp	r2, #0
   11c94:	beq	11ca4 <__assert_fail@plt+0x4c4>
   11c98:	mov	r0, r8
   11c9c:	mov	r1, sl
   11ca0:	bl	14a58 <__assert_fail@plt+0x3278>
   11ca4:	add	sl, sl, #1
   11ca8:	b	11bdc <__assert_fail@plt+0x3fc>
   11cac:	ldr	r2, [r6, #16]
   11cb0:	ldr	r3, [sp, #16]
   11cb4:	cmp	r2, #0
   11cb8:	movw	r1, #29648	; 0x73d0
   11cbc:	add	r0, sp, #32
   11cc0:	movt	r1, #1
   11cc4:	moveq	r2, r3
   11cc8:	bl	12138 <__assert_fail@plt+0x958>
   11ccc:	b	11c8c <__assert_fail@plt+0x4ac>
   11cd0:	movw	r1, #30292	; 0x7654
   11cd4:	add	r0, sp, #32
   11cd8:	movt	r1, #1
   11cdc:	ldrd	r2, [r6, #40]	; 0x28
   11ce0:	bl	12138 <__assert_fail@plt+0x958>
   11ce4:	b	11c8c <__assert_fail@plt+0x4ac>
   11ce8:	movw	r1, #30292	; 0x7654
   11cec:	add	r0, sp, #32
   11cf0:	movt	r1, #1
   11cf4:	ldrd	r2, [r6, #32]
   11cf8:	bl	12138 <__assert_fail@plt+0x958>
   11cfc:	b	11c8c <__assert_fail@plt+0x4ac>
   11d00:	ldrb	r2, [r6, #48]	; 0x30
   11d04:	movw	r1, #30280	; 0x7648
   11d08:	add	r0, sp, #32
   11d0c:	movt	r1, #1
   11d10:	and	r2, r2, #1
   11d14:	bl	12138 <__assert_fail@plt+0x958>
   11d18:	b	11c8c <__assert_fail@plt+0x4ac>
   11d1c:	ldrb	r3, [r6, #48]	; 0x30
   11d20:	movw	r1, #30284	; 0x764c
   11d24:	add	r0, sp, #32
   11d28:	movt	r1, #1
   11d2c:	tst	r3, #2
   11d30:	ldr	r3, [sp, #16]
   11d34:	ldr	r2, [r6, #24]
   11d38:	movne	r3, fp
   11d3c:	bl	12138 <__assert_fail@plt+0x958>
   11d40:	b	11c8c <__assert_fail@plt+0x4ac>
   11d44:	movw	r1, #30280	; 0x7648
   11d48:	add	r0, sp, #32
   11d4c:	movt	r1, #1
   11d50:	ldr	r2, [r6, #12]
   11d54:	bl	12138 <__assert_fail@plt+0x958>
   11d58:	b	11c8c <__assert_fail@plt+0x4ac>
   11d5c:	ldr	r2, [r6, #8]
   11d60:	b	11cb0 <__assert_fail@plt+0x4d0>
   11d64:	movw	r1, #29648	; 0x73d0
   11d68:	add	r0, sp, #32
   11d6c:	movt	r1, #1
   11d70:	ldr	r2, [r6, #52]	; 0x34
   11d74:	bl	12138 <__assert_fail@plt+0x958>
   11d78:	b	11c8c <__assert_fail@plt+0x4ac>
   11d7c:	movw	r1, #29648	; 0x73d0
   11d80:	add	r0, sp, #32
   11d84:	movt	r1, #1
   11d88:	ldr	r2, [r6, #20]
   11d8c:	bl	12138 <__assert_fail@plt+0x958>
   11d90:	b	11c8c <__assert_fail@plt+0x4ac>
   11d94:	ldr	r6, [sp, #36]	; 0x24
   11d98:	ldr	r4, [sp, #28]
   11d9c:	ldr	r8, [r6]
   11da0:	b	11df0 <__assert_fail@plt+0x610>
   11da4:	cmp	r6, #0
   11da8:	beq	11de8 <__assert_fail@plt+0x608>
   11dac:	ldr	r0, [r6, #16]
   11db0:	bl	11480 <free@plt>
   11db4:	ldr	r0, [r6, #52]	; 0x34
   11db8:	bl	11480 <free@plt>
   11dbc:	ldr	r0, [r6, #24]
   11dc0:	bl	11480 <free@plt>
   11dc4:	ldr	r0, [r6, #8]
   11dc8:	bl	11480 <free@plt>
   11dcc:	ldr	r0, [r6, #20]
   11dd0:	bl	11480 <free@plt>
   11dd4:	ldm	r6, {r2, r3}
   11dd8:	mov	r0, r6
   11ddc:	str	r3, [r2, #4]
   11de0:	str	r2, [r3]
   11de4:	bl	11480 <free@plt>
   11de8:	mov	r6, r8
   11dec:	ldr	r8, [r8]
   11df0:	cmp	r6, r7
   11df4:	bne	11da4 <__assert_fail@plt+0x5c4>
   11df8:	ldr	r0, [sp, #24]
   11dfc:	bl	150f4 <__assert_fail@plt+0x3914>
   11e00:	ldr	r0, [sp, #24]
   11e04:	bl	1486c <__assert_fail@plt+0x308c>
   11e08:	ldr	r0, [r5]
   11e0c:	bl	11780 <mnt_free_table@plt>
   11e10:	ldr	r0, [sp, #20]
   11e14:	b	11a10 <__assert_fail@plt+0x230>
   11e18:	mov	r0, #1
   11e1c:	b	11a10 <__assert_fail@plt+0x230>
   11e20:	mov	r2, #5
   11e24:	movw	r1, #30208	; 0x7600
   11e28:	movt	r1, #1
   11e2c:	mvn	r3, #0
   11e30:	str	r3, [sp, #20]
   11e34:	bl	114e0 <dcgettext@plt>
   11e38:	bl	11624 <warnx@plt>
   11e3c:	b	11e00 <__assert_fail@plt+0x620>
   11e40:	mov	r2, #5
   11e44:	movw	r1, #30248	; 0x7628
   11e48:	movt	r1, #1
   11e4c:	bl	114e0 <dcgettext@plt>
   11e50:	bl	116fc <warn@plt>
   11e54:	b	11b8c <__assert_fail@plt+0x3ac>
   11e58:	bl	114ec <__stack_chk_fail@plt>
   11e5c:	movw	r0, #30244	; 0x7624
   11e60:	movw	r1, #29600	; 0x73a0
   11e64:	movt	r0, #1
   11e68:	movt	r1, #1
   11e6c:	movw	r2, #391	; 0x187
   11e70:	ldr	r3, [pc, #76]	; 11ec4 <__assert_fail@plt+0x6e4>
   11e74:	bl	117e0 <__assert_fail@plt>
   11e78:	movw	r0, #30044	; 0x755c
   11e7c:	movw	r1, #29600	; 0x73a0
   11e80:	movw	r3, #28900	; 0x70e4
   11e84:	movt	r0, #1
   11e88:	movt	r1, #1
   11e8c:	movw	r2, #341	; 0x155
   11e90:	movt	r3, #1
   11e94:	bl	117e0 <__assert_fail@plt>
   11e98:	mov	r2, #5
   11e9c:	movw	r1, #30008	; 0x7538
   11ea0:	movt	r1, #1
   11ea4:	mvn	r3, #0
   11ea8:	str	r3, [sp, #20]
   11eac:	bl	114e0 <dcgettext@plt>
   11eb0:	bl	116fc <warn@plt>
   11eb4:	b	11e08 <__assert_fail@plt+0x628>
   11eb8:	andeq	r8, r2, r8, asr r2
   11ebc:	andeq	r7, r1, r8, lsl #2
   11ec0:	andeq	r8, r2, r4, lsl #5
   11ec4:	andeq	r7, r1, r8, lsl #3
   11ec8:	mov	fp, #0
   11ecc:	mov	lr, #0
   11ed0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ed4:	mov	r2, sp
   11ed8:	push	{r2}		; (str r2, [sp, #-4]!)
   11edc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ee0:	ldr	ip, [pc, #16]	; 11ef8 <__assert_fail@plt+0x718>
   11ee4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ee8:	ldr	r0, [pc, #12]	; 11efc <__assert_fail@plt+0x71c>
   11eec:	ldr	r3, [pc, #12]	; 11f00 <__assert_fail@plt+0x720>
   11ef0:	bl	115a0 <__libc_start_main@plt>
   11ef4:	bl	117b0 <abort@plt>
   11ef8:	andeq	r7, r1, r4, lsr #1
   11efc:	andeq	r1, r1, r8, lsr #16
   11f00:	andeq	r7, r1, r0, asr #32
   11f04:	ldr	r3, [pc, #20]	; 11f20 <__assert_fail@plt+0x740>
   11f08:	ldr	r2, [pc, #20]	; 11f24 <__assert_fail@plt+0x744>
   11f0c:	add	r3, pc, r3
   11f10:	ldr	r2, [r3, r2]
   11f14:	cmp	r2, #0
   11f18:	bxeq	lr
   11f1c:	b	115b8 <__gmon_start__@plt>
   11f20:	andeq	r6, r1, ip, ror #1
   11f24:	andeq	r0, r0, r4, asr r1
   11f28:	push	{r3, lr}
   11f2c:	movw	r0, #33368	; 0x8258
   11f30:	ldr	r3, [pc, #36]	; 11f5c <__assert_fail@plt+0x77c>
   11f34:	movt	r0, #2
   11f38:	rsb	r3, r0, r3
   11f3c:	cmp	r3, #6
   11f40:	popls	{r3, pc}
   11f44:	movw	r3, #0
   11f48:	movt	r3, #0
   11f4c:	cmp	r3, #0
   11f50:	popeq	{r3, pc}
   11f54:	blx	r3
   11f58:	pop	{r3, pc}
   11f5c:	andeq	r8, r2, fp, asr r2
   11f60:	push	{r3, lr}
   11f64:	movw	r0, #33368	; 0x8258
   11f68:	movw	r3, #33368	; 0x8258
   11f6c:	movt	r0, #2
   11f70:	movt	r3, #2
   11f74:	rsb	r3, r0, r3
   11f78:	asr	r3, r3, #2
   11f7c:	add	r3, r3, r3, lsr #31
   11f80:	asrs	r1, r3, #1
   11f84:	popeq	{r3, pc}
   11f88:	movw	r2, #0
   11f8c:	movt	r2, #0
   11f90:	cmp	r2, #0
   11f94:	popeq	{r3, pc}
   11f98:	blx	r2
   11f9c:	pop	{r3, pc}
   11fa0:	push	{r4, lr}
   11fa4:	movw	r4, #33396	; 0x8274
   11fa8:	movt	r4, #2
   11fac:	ldrb	r3, [r4]
   11fb0:	cmp	r3, #0
   11fb4:	popne	{r4, pc}
   11fb8:	bl	11f28 <__assert_fail@plt+0x748>
   11fbc:	mov	r3, #1
   11fc0:	strb	r3, [r4]
   11fc4:	pop	{r4, pc}
   11fc8:	movw	r0, #32460	; 0x7ecc
   11fcc:	movt	r0, #2
   11fd0:	push	{r3, lr}
   11fd4:	ldr	r3, [r0]
   11fd8:	cmp	r3, #0
   11fdc:	beq	11ff4 <__assert_fail@plt+0x814>
   11fe0:	movw	r3, #0
   11fe4:	movt	r3, #0
   11fe8:	cmp	r3, #0
   11fec:	beq	11ff4 <__assert_fail@plt+0x814>
   11ff0:	blx	r3
   11ff4:	pop	{r3, lr}
   11ff8:	b	11f60 <__assert_fail@plt+0x780>
   11ffc:	push	{r4, r5, r6, r7, lr}
   12000:	mov	r2, #5
   12004:	sub	sp, sp, #12
   12008:	mov	r6, r0
   1200c:	movw	r1, #29076	; 0x7194
   12010:	mov	r0, #0
   12014:	movt	r1, #1
   12018:	movw	r4, #33128	; 0x8168
   1201c:	bl	114e0 <dcgettext@plt>
   12020:	mov	r1, r6
   12024:	bl	11798 <fputs@plt>
   12028:	mov	r2, #5
   1202c:	movw	r1, #29088	; 0x71a0
   12030:	mov	r0, #0
   12034:	movt	r1, #1
   12038:	movt	r4, #2
   1203c:	bl	114e0 <dcgettext@plt>
   12040:	movw	r3, #33368	; 0x8258
   12044:	movt	r3, #2
   12048:	mov	r1, #1
   1204c:	add	r7, r4, #240	; 0xf0
   12050:	ldr	r3, [r3]
   12054:	mov	r2, r0
   12058:	mov	r0, r6
   1205c:	bl	116c0 <__fprintf_chk@plt>
   12060:	mov	r2, #5
   12064:	movw	r1, #29104	; 0x71b0
   12068:	mov	r0, #0
   1206c:	movt	r1, #1
   12070:	bl	114e0 <dcgettext@plt>
   12074:	mov	r1, r6
   12078:	bl	11798 <fputs@plt>
   1207c:	mov	r2, #5
   12080:	movw	r1, #29116	; 0x71bc
   12084:	mov	r0, #0
   12088:	movt	r1, #1
   1208c:	bl	114e0 <dcgettext@plt>
   12090:	mov	r1, r6
   12094:	bl	11798 <fputs@plt>
   12098:	movw	r1, #29472	; 0x7320
   1209c:	mov	r0, #0
   120a0:	movt	r1, #1
   120a4:	mov	r2, #5
   120a8:	bl	114e0 <dcgettext@plt>
   120ac:	mov	r1, r6
   120b0:	bl	11798 <fputs@plt>
   120b4:	ldr	r1, [r4, #20]
   120b8:	mov	r2, #5
   120bc:	mov	r0, #0
   120c0:	ldr	r5, [r4]
   120c4:	bl	114e0 <dcgettext@plt>
   120c8:	add	r4, r4, #24
   120cc:	movw	r2, #29508	; 0x7344
   120d0:	mov	r1, #1
   120d4:	mov	r3, r5
   120d8:	movt	r2, #1
   120dc:	str	r0, [sp]
   120e0:	mov	r0, r6
   120e4:	bl	116c0 <__fprintf_chk@plt>
   120e8:	cmp	r4, r7
   120ec:	bne	120b4 <__assert_fail@plt+0x8d4>
   120f0:	mov	r2, #5
   120f4:	movw	r1, #29520	; 0x7350
   120f8:	mov	r0, #0
   120fc:	movt	r1, #1
   12100:	bl	114e0 <dcgettext@plt>
   12104:	movw	r3, #29548	; 0x736c
   12108:	mov	r1, #1
   1210c:	movt	r3, #1
   12110:	mov	r2, r0
   12114:	mov	r0, r6
   12118:	bl	116c0 <__fprintf_chk@plt>
   1211c:	movw	r3, #33380	; 0x8264
   12120:	movt	r3, #2
   12124:	ldr	r0, [r3]
   12128:	subs	r3, r6, r0
   1212c:	rsbs	r0, r3, #0
   12130:	adcs	r0, r0, r3
   12134:	bl	115e8 <exit@plt>
   12138:	push	{r1, r2, r3}
   1213c:	mov	r1, #1
   12140:	push	{r4, lr}
   12144:	movw	r4, #33376	; 0x8260
   12148:	movt	r4, #2
   1214c:	sub	sp, sp, #12
   12150:	add	ip, sp, #24
   12154:	ldr	lr, [r4]
   12158:	ldr	r2, [sp, #20]
   1215c:	mov	r3, ip
   12160:	str	ip, [sp]
   12164:	str	lr, [sp, #4]
   12168:	bl	1166c <__vasprintf_chk@plt>
   1216c:	cmp	r0, #0
   12170:	blt	12198 <__assert_fail@plt+0x9b8>
   12174:	ldr	r2, [sp, #4]
   12178:	ldr	r3, [r4]
   1217c:	cmp	r2, r3
   12180:	bne	12194 <__assert_fail@plt+0x9b4>
   12184:	add	sp, sp, #12
   12188:	pop	{r4, lr}
   1218c:	add	sp, sp, #12
   12190:	bx	lr
   12194:	bl	114ec <__stack_chk_fail@plt>
   12198:	movw	r1, #29560	; 0x7378
   1219c:	mov	r0, #1
   121a0:	movt	r1, #1
   121a4:	bl	11510 <err@plt>
   121a8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   121ac:	subs	r9, r0, #0
   121b0:	mov	r7, r1
   121b4:	movne	r4, #0
   121b8:	movwne	r8, #33128	; 0x8168
   121bc:	movne	r6, r4
   121c0:	movtne	r8, #2
   121c4:	beq	1222c <__assert_fail@plt+0xa4c>
   121c8:	ldr	r5, [r8, r4]
   121cc:	mov	r0, r9
   121d0:	mov	r2, r7
   121d4:	mov	r1, r5
   121d8:	bl	1163c <strncasecmp@plt>
   121dc:	cmp	r0, #0
   121e0:	bne	121f0 <__assert_fail@plt+0xa10>
   121e4:	ldrsb	r3, [r5, r7]
   121e8:	cmp	r3, #0
   121ec:	beq	12224 <__assert_fail@plt+0xa44>
   121f0:	add	r4, r4, #24
   121f4:	add	r6, r6, #1
   121f8:	cmp	r4, #240	; 0xf0
   121fc:	bne	121c8 <__assert_fail@plt+0x9e8>
   12200:	mov	r2, #5
   12204:	movw	r1, #29632	; 0x73c0
   12208:	mov	r0, #0
   1220c:	movt	r1, #1
   12210:	bl	114e0 <dcgettext@plt>
   12214:	mov	r1, r9
   12218:	bl	11624 <warnx@plt>
   1221c:	mvn	r0, #0
   12220:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12224:	mov	r0, r6
   12228:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1222c:	movw	r0, #29624	; 0x73b8
   12230:	movw	r1, #29600	; 0x73a0
   12234:	movt	r0, #1
   12238:	movt	r1, #1
   1223c:	movw	r2, #325	; 0x145
   12240:	ldr	r3, [pc]	; 12248 <__assert_fail@plt+0xa68>
   12244:	bl	117e0 <__assert_fail@plt>
   12248:	strdeq	r7, [r1], -r4
   1224c:	movw	r3, #33384	; 0x8268
   12250:	movt	r3, #2
   12254:	push	{r4, r5, r6, lr}
   12258:	ldr	r4, [r3]
   1225c:	mov	r0, r4
   12260:	bl	1154c <__fpending@plt>
   12264:	mov	r6, r0
   12268:	mov	r0, r4
   1226c:	bl	11498 <ferror@plt>
   12270:	mov	r5, r0
   12274:	mov	r0, r4
   12278:	bl	116cc <fclose@plt>
   1227c:	adds	r4, r0, #0
   12280:	movne	r4, #1
   12284:	cmp	r5, #0
   12288:	bne	12300 <__assert_fail@plt+0xb20>
   1228c:	cmp	r4, #0
   12290:	beq	122ac <__assert_fail@plt+0xacc>
   12294:	cmp	r6, #0
   12298:	beq	12350 <__assert_fail@plt+0xb70>
   1229c:	bl	11630 <__errno_location@plt>
   122a0:	ldr	r3, [r0]
   122a4:	cmp	r3, #32
   122a8:	bne	12364 <__assert_fail@plt+0xb84>
   122ac:	movw	r3, #33380	; 0x8264
   122b0:	movt	r3, #2
   122b4:	ldr	r4, [r3]
   122b8:	mov	r0, r4
   122bc:	bl	1154c <__fpending@plt>
   122c0:	mov	r6, r0
   122c4:	mov	r0, r4
   122c8:	bl	11498 <ferror@plt>
   122cc:	mov	r5, r0
   122d0:	mov	r0, r4
   122d4:	bl	116cc <fclose@plt>
   122d8:	adds	r4, r0, #0
   122dc:	movne	r4, #1
   122e0:	cmp	r5, #0
   122e4:	beq	1232c <__assert_fail@plt+0xb4c>
   122e8:	cmp	r4, #0
   122ec:	bne	122f8 <__assert_fail@plt+0xb18>
   122f0:	bl	11630 <__errno_location@plt>
   122f4:	str	r4, [r0]
   122f8:	mov	r0, #1
   122fc:	bl	114b0 <_exit@plt>
   12300:	cmp	r4, #0
   12304:	bne	1229c <__assert_fail@plt+0xabc>
   12308:	bl	11630 <__errno_location@plt>
   1230c:	str	r4, [r0]
   12310:	mov	r2, #5
   12314:	movw	r1, #29676	; 0x73ec
   12318:	mov	r0, #0
   1231c:	movt	r1, #1
   12320:	bl	114e0 <dcgettext@plt>
   12324:	bl	11624 <warnx@plt>
   12328:	b	122f8 <__assert_fail@plt+0xb18>
   1232c:	cmp	r4, #0
   12330:	popeq	{r4, r5, r6, pc}
   12334:	cmp	r6, #0
   12338:	bne	122f8 <__assert_fail@plt+0xb18>
   1233c:	bl	11630 <__errno_location@plt>
   12340:	ldr	r3, [r0]
   12344:	cmp	r3, #9
   12348:	bne	122f8 <__assert_fail@plt+0xb18>
   1234c:	pop	{r4, r5, r6, pc}
   12350:	bl	11630 <__errno_location@plt>
   12354:	ldr	r3, [r0]
   12358:	cmp	r3, #9
   1235c:	bne	122a4 <__assert_fail@plt+0xac4>
   12360:	b	122ac <__assert_fail@plt+0xacc>
   12364:	cmp	r3, #0
   12368:	beq	12310 <__assert_fail@plt+0xb30>
   1236c:	mov	r2, #5
   12370:	movw	r1, #29676	; 0x73ec
   12374:	mov	r0, #0
   12378:	movt	r1, #1
   1237c:	bl	114e0 <dcgettext@plt>
   12380:	bl	116fc <warn@plt>
   12384:	b	122f8 <__assert_fail@plt+0xb18>
   12388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1238c:	movw	sl, #33376	; 0x8260
   12390:	movt	sl, #2
   12394:	sub	sp, sp, #16384	; 0x4000
   12398:	sub	sp, sp, #188	; 0xbc
   1239c:	movw	r1, #29700	; 0x7404
   123a0:	ldr	r3, [sl]
   123a4:	add	r2, sp, #16384	; 0x4000
   123a8:	str	r0, [sp, #44]	; 0x2c
   123ac:	movt	r1, #1
   123b0:	movw	r0, #29688	; 0x73f8
   123b4:	movt	r0, #1
   123b8:	str	r3, [r2, #180]	; 0xb4
   123bc:	bl	11768 <fopen64@plt>
   123c0:	cmp	r0, #0
   123c4:	str	r0, [sp, #40]	; 0x28
   123c8:	beq	12aa4 <__assert_fail@plt+0x12c4>
   123cc:	add	r8, sp, #4224	; 0x1080
   123d0:	mov	r0, #0
   123d4:	add	r8, r8, #56	; 0x38
   123d8:	mov	r1, #0
   123dc:	movw	r9, #33400	; 0x8278
   123e0:	sub	r8, r8, #4
   123e4:	movt	r9, #2
   123e8:	strd	r0, [sp, #24]
   123ec:	strd	r0, [sp, #32]
   123f0:	str	r8, [sp, #12]
   123f4:	str	sl, [sp, #60]	; 0x3c
   123f8:	str	r9, [sp, #56]	; 0x38
   123fc:	add	r0, sp, #180	; 0xb4
   12400:	mov	r1, #4096	; 0x1000
   12404:	ldr	r2, [sp, #40]	; 0x28
   12408:	bl	1148c <fgets@plt>
   1240c:	cmp	r0, #0
   12410:	beq	12a38 <__assert_fail@plt+0x1258>
   12414:	mov	r0, #1
   12418:	mov	r1, #64	; 0x40
   1241c:	bl	1142c <calloc@plt>
   12420:	subs	r5, r0, #0
   12424:	bne	1243c <__assert_fail@plt+0xc5c>
   12428:	movw	r1, #29704	; 0x7408
   1242c:	mov	r0, #1
   12430:	movt	r1, #1
   12434:	mov	r2, #64	; 0x40
   12438:	bl	11510 <err@plt>
   1243c:	str	r5, [r5]
   12440:	movw	r1, #29732	; 0x7424
   12444:	str	r5, [r5, #4]
   12448:	movt	r1, #1
   1244c:	add	r0, sp, #180	; 0xb4
   12450:	bl	116d8 <strtok@plt>
   12454:	subs	r4, r0, #0
   12458:	beq	125fc <__assert_fail@plt+0xe1c>
   1245c:	movw	fp, #49032	; 0xbf88
   12460:	movt	fp, #65535	; 0xffff
   12464:	mov	r6, #0
   12468:	cmp	r6, #7
   1246c:	ldrls	pc, [pc, r6, lsl #2]
   12470:	b	124d8 <__assert_fail@plt+0xcf8>
   12474:			; <UNDEFINED> instruction: 0x000127b4
   12478:	andeq	r2, r1, r0, lsl r8
   1247c:	strdeq	r2, [r1], -r0
   12480:	andeq	r2, r1, r4, lsr r8
   12484:	andeq	r2, r1, r4, lsl #14
   12488:	andeq	r2, r1, r8, asr #12
   1248c:	andeq	r2, r1, r4, lsl r6
   12490:	muleq	r1, r4, r4
   12494:	mov	r0, r4
   12498:	bl	1160c <strlen@plt>
   1249c:	mov	r3, #0
   124a0:	add	r0, r4, r0
   124a4:	strb	r3, [r0, #-1]
   124a8:	ldrb	r3, [r4]
   124ac:	cmp	r3, #69	; 0x45
   124b0:	beq	12990 <__assert_fail@plt+0x11b0>
   124b4:	movw	r1, #29844	; 0x7494
   124b8:	mov	r0, #0
   124bc:	movt	r1, #1
   124c0:	mov	r2, #5
   124c4:	bl	114e0 <dcgettext@plt>
   124c8:	mov	r1, r0
   124cc:	mov	r0, r4
   124d0:	bl	13254 <__assert_fail@plt+0x1a74>
   124d4:	strd	r0, [r5, #40]	; 0x28
   124d8:	add	r0, sp, #8320	; 0x2080
   124dc:	mov	r1, #0
   124e0:	mov	r2, #4096	; 0x1000
   124e4:	add	r0, r0, #52	; 0x34
   124e8:	ldr	r4, [r5, #12]
   124ec:	bl	11684 <memset@plt>
   124f0:	add	r0, sp, #12416	; 0x3080
   124f4:	mov	r1, #0
   124f8:	mov	r2, #4096	; 0x1000
   124fc:	add	r0, r0, #52	; 0x34
   12500:	bl	11684 <memset@plt>
   12504:	add	r0, sp, #8320	; 0x2080
   12508:	str	r4, [sp]
   1250c:	mov	r1, #1
   12510:	mov	r2, #4096	; 0x1000
   12514:	add	r0, r0, #52	; 0x34
   12518:	movw	r3, #29864	; 0x74a8
   1251c:	movt	r3, #1
   12520:	bl	11648 <__sprintf_chk@plt>
   12524:	add	r0, sp, #8320	; 0x2080
   12528:	add	r0, r0, #52	; 0x34
   1252c:	bl	11570 <opendir@plt>
   12530:	subs	r4, r0, #0
   12534:	beq	12a6c <__assert_fail@plt+0x128c>
   12538:	add	r0, sp, #8320	; 0x2080
   1253c:	add	r0, r0, #52	; 0x34
   12540:	bl	1160c <strlen@plt>
   12544:	movw	r3, #4093	; 0xffd
   12548:	cmp	r0, r3
   1254c:	bls	1284c <__assert_fail@plt+0x106c>
   12550:	mov	r0, r4
   12554:	bl	117bc <closedir@plt>
   12558:	mov	r3, #0
   1255c:	str	r3, [r5, #16]
   12560:	ldr	r8, [sp, #56]	; 0x38
   12564:	ldr	r3, [r8]
   12568:	cmp	r3, #0
   1256c:	beq	12a74 <__assert_fail@plt+0x1294>
   12570:	ldr	r9, [sp, #56]	; 0x38
   12574:	mov	r3, #1
   12578:	ldr	r0, [r9]
   1257c:	str	r3, [sp]
   12580:	ldrd	r2, [sp, #24]
   12584:	bl	114c8 <mnt_table_find_devno@plt>
   12588:	cmp	r0, #0
   1258c:	beq	12a94 <__assert_fail@plt+0x12b4>
   12590:	bl	1157c <mnt_fs_get_target@plt>
   12594:	subs	r3, r0, #0
   12598:	beq	125ac <__assert_fail@plt+0xdcc>
   1259c:	bl	11678 <__strdup@plt>
   125a0:	cmp	r0, #0
   125a4:	beq	12aac <__assert_fail@plt+0x12cc>
   125a8:	mov	r3, r0
   125ac:	mov	r2, #0
   125b0:	str	r3, [r5, #16]
   125b4:	mov	r0, #0
   125b8:	mov	r3, r0
   125bc:	bl	13838 <__assert_fail@plt+0x2058>
   125c0:	subs	r4, r0, #0
   125c4:	beq	129f0 <__assert_fail@plt+0x1210>
   125c8:	bl	11678 <__strdup@plt>
   125cc:	cmp	r0, #0
   125d0:	beq	12aac <__assert_fail@plt+0x12cc>
   125d4:	str	r0, [r5, #52]	; 0x34
   125d8:	mov	r0, r4
   125dc:	bl	11480 <free@plt>
   125e0:	movw	r1, #29732	; 0x7424
   125e4:	mov	r0, #0
   125e8:	movt	r1, #1
   125ec:	bl	116d8 <strtok@plt>
   125f0:	add	r6, r6, #1
   125f4:	subs	r4, r0, #0
   125f8:	bne	12468 <__assert_fail@plt+0xc88>
   125fc:	ldr	r8, [sp, #44]	; 0x2c
   12600:	ldr	r3, [r8]
   12604:	str	r5, [r3, #4]
   12608:	stm	r5, {r3, r8}
   1260c:	str	r5, [r8]
   12610:	b	123fc <__assert_fail@plt+0xc1c>
   12614:	ldrb	r3, [r4]
   12618:	cmp	r3, #69	; 0x45
   1261c:	beq	129c0 <__assert_fail@plt+0x11e0>
   12620:	movw	r1, #29820	; 0x747c
   12624:	mov	r0, #0
   12628:	movt	r1, #1
   1262c:	mov	r2, #5
   12630:	bl	114e0 <dcgettext@plt>
   12634:	mov	r1, r0
   12638:	mov	r0, r4
   1263c:	bl	13254 <__assert_fail@plt+0x1a74>
   12640:	strd	r0, [r5, #32]
   12644:	b	124d8 <__assert_fail@plt+0xcf8>
   12648:	add	ip, sp, #16384	; 0x4000
   1264c:	movw	sl, #49036	; 0xbf8c
   12650:	add	ip, ip, #184	; 0xb8
   12654:	movt	sl, #65535	; 0xffff
   12658:	movw	r7, #49040	; 0xbf90
   1265c:	movt	r7, #65535	; 0xffff
   12660:	mov	r0, r4
   12664:	add	r3, sp, #72	; 0x48
   12668:	mov	r4, #0
   1266c:	str	r3, [sp]
   12670:	add	r2, sp, #64	; 0x40
   12674:	add	r3, sp, #68	; 0x44
   12678:	mov	r8, #0
   1267c:	mov	r9, #0
   12680:	str	r4, [ip, sl]
   12684:	movw	r1, #29804	; 0x746c
   12688:	strd	r8, [ip, r7]
   1268c:	movt	r1, #1
   12690:	str	r4, [ip, fp]
   12694:	str	r4, [sp, #52]	; 0x34
   12698:	bl	11720 <sscanf@plt>
   1269c:	add	r0, sp, #16384	; 0x4000
   126a0:	str	r4, [sp, #16]
   126a4:	add	r0, r0, #184	; 0xb8
   126a8:	ldr	r2, [r0, sl]
   126ac:	ldrd	r8, [r0, r7]
   126b0:	ldr	r1, [r0, fp]
   126b4:	bic	r3, r2, #255	; 0xff
   126b8:	uxtb	r2, r2
   126bc:	bic	ip, r1, #4080	; 0xff0
   126c0:	ubfx	r1, r1, #0, #12
   126c4:	strd	r8, [sp, #32]
   126c8:	bic	r0, ip, #15
   126cc:	lsr	r8, r3, #20
   126d0:	str	r0, [sp, #20]
   126d4:	lsl	r3, r3, #12
   126d8:	str	r8, [sp, #52]	; 0x34
   126dc:	str	r3, [sp, #48]	; 0x30
   126e0:	orr	r1, r2, r1, lsl #8
   126e4:	ldrd	r8, [sp, #48]	; 0x30
   126e8:	ldrd	r2, [sp, #16]
   126ec:	orr	r3, r3, r9
   126f0:	orr	r2, r2, r8
   126f4:	orr	r8, r2, r1
   126f8:	mov	r9, r3
   126fc:	strd	r8, [sp, #24]
   12700:	b	124d8 <__assert_fail@plt+0xcf8>
   12704:	mov	r2, #5
   12708:	movw	r1, #29756	; 0x743c
   1270c:	mov	r0, #0
   12710:	movt	r1, #1
   12714:	bl	114e0 <dcgettext@plt>
   12718:	mov	r1, r0
   1271c:	mov	r0, r4
   12720:	bl	131cc <__assert_fail@plt+0x19ec>
   12724:	mov	r1, #1
   12728:	mov	r2, #4096	; 0x1000
   1272c:	movw	r3, #29776	; 0x7450
   12730:	movt	r3, #1
   12734:	str	r0, [r5, #12]
   12738:	str	r0, [sp]
   1273c:	ldr	r0, [sp, #12]
   12740:	bl	11648 <__sprintf_chk@plt>
   12744:	ldr	r0, [sp, #12]
   12748:	movw	r1, #29700	; 0x7404
   1274c:	movt	r1, #1
   12750:	bl	11768 <fopen64@plt>
   12754:	subs	r4, r0, #0
   12758:	beq	12a9c <__assert_fail@plt+0x12bc>
   1275c:	ldr	r0, [sp, #12]
   12760:	mov	r1, #4096	; 0x1000
   12764:	mov	r2, r4
   12768:	bl	1148c <fgets@plt>
   1276c:	subs	r7, r0, #0
   12770:	beq	129f8 <__assert_fail@plt+0x1218>
   12774:	ldr	r0, [sp, #12]
   12778:	add	r9, sp, #16384	; 0x4000
   1277c:	bl	1160c <strlen@plt>
   12780:	add	r9, r9, #184	; 0xb8
   12784:	mov	r2, #0
   12788:	add	r3, r9, r0
   1278c:	ldr	r0, [sp, #12]
   12790:	sub	r3, r3, #12288	; 0x3000
   12794:	strb	r2, [r3, #-5]
   12798:	bl	11678 <__strdup@plt>
   1279c:	subs	r7, r0, #0
   127a0:	beq	12aac <__assert_fail@plt+0x12cc>
   127a4:	mov	r0, r4
   127a8:	bl	116cc <fclose@plt>
   127ac:	str	r7, [r5, #8]
   127b0:	b	124d8 <__assert_fail@plt+0xcf8>
   127b4:	mov	r0, r4
   127b8:	bl	1160c <strlen@plt>
   127bc:	mov	r3, #0
   127c0:	mov	r2, #5
   127c4:	movw	r1, #29736	; 0x7428
   127c8:	movt	r1, #1
   127cc:	add	ip, r4, r0
   127d0:	mov	r0, r3
   127d4:	strb	r3, [ip, #-1]
   127d8:	bl	114e0 <dcgettext@plt>
   127dc:	mov	r1, r0
   127e0:	mov	r0, r4
   127e4:	bl	131cc <__assert_fail@plt+0x19ec>
   127e8:	str	r0, [r5, #56]	; 0x38
   127ec:	b	124d8 <__assert_fail@plt+0xcf8>
   127f0:	ldrsb	r2, [r4]
   127f4:	ldrb	r3, [r5, #48]	; 0x30
   127f8:	subs	r1, r2, #77	; 0x4d
   127fc:	rsbs	r2, r1, #0
   12800:	adcs	r2, r2, r1
   12804:	bfi	r3, r2, #0, #1
   12808:	strb	r3, [r5, #48]	; 0x30
   1280c:	b	124d8 <__assert_fail@plt+0xcf8>
   12810:	ldrb	r3, [r4]
   12814:	cmp	r3, #45	; 0x2d
   12818:	beq	12964 <__assert_fail@plt+0x1184>
   1281c:	mov	r0, r4
   12820:	bl	11678 <__strdup@plt>
   12824:	cmp	r0, #0
   12828:	beq	12aac <__assert_fail@plt+0x12cc>
   1282c:	str	r0, [r5, #20]
   12830:	b	124d8 <__assert_fail@plt+0xcf8>
   12834:	mov	r0, r4
   12838:	bl	11678 <__strdup@plt>
   1283c:	cmp	r0, #0
   12840:	beq	12aac <__assert_fail@plt+0x12cc>
   12844:	str	r0, [r5, #24]
   12848:	b	124d8 <__assert_fail@plt+0xcf8>
   1284c:	mov	r0, r4
   12850:	bl	11750 <dirfd@plt>
   12854:	subs	r9, r0, #0
   12858:	blt	12550 <__assert_fail@plt+0xd70>
   1285c:	add	r8, sp, #72	; 0x48
   12860:	mov	sl, #0
   12864:	mov	r0, r4
   12868:	bl	11744 <readdir64@plt>
   1286c:	cmp	r0, #0
   12870:	beq	12550 <__assert_fail@plt+0xd70>
   12874:	ldrb	r3, [r0, #19]
   12878:	cmp	r3, #46	; 0x2e
   1287c:	beq	12940 <__assert_fail@plt+0x1160>
   12880:	add	r7, r0, #19
   12884:	mov	r1, #0
   12888:	mov	r2, #10
   1288c:	mov	r0, r7
   12890:	bl	1145c <strtol@plt>
   12894:	cmp	r0, #0
   12898:	beq	12864 <__assert_fail@plt+0x1084>
   1289c:	add	r1, sp, #8320	; 0x2080
   128a0:	str	sl, [sp]
   128a4:	mov	r0, r9
   128a8:	add	r1, r1, #52	; 0x34
   128ac:	mov	r2, r7
   128b0:	mov	r3, r8
   128b4:	bl	12ab4 <__assert_fail@plt+0x12d4>
   128b8:	cmp	r0, #0
   128bc:	bne	128d4 <__assert_fail@plt+0x10f4>
   128c0:	ldrd	r2, [r8, #96]	; 0x60
   128c4:	ldrd	r0, [sp, #32]
   128c8:	cmp	r1, r3
   128cc:	cmpeq	r0, r2
   128d0:	bne	12864 <__assert_fail@plt+0x1084>
   128d4:	movw	r3, #4095	; 0xfff
   128d8:	add	r1, sp, #8320	; 0x2080
   128dc:	str	r3, [sp]
   128e0:	add	r3, sp, #12416	; 0x3080
   128e4:	add	r3, r3, #52	; 0x34
   128e8:	mov	r0, r9
   128ec:	add	r1, r1, #52	; 0x34
   128f0:	mov	r2, r7
   128f4:	bl	12b08 <__assert_fail@plt+0x1328>
   128f8:	subs	r3, r0, #0
   128fc:	beq	12550 <__assert_fail@plt+0xd70>
   12900:	add	r0, sp, #12416	; 0x3080
   12904:	mov	r2, #0
   12908:	add	r0, r0, #52	; 0x34
   1290c:	strb	r2, [r0, r3]
   12910:	ldr	r2, [sp, #120]	; 0x78
   12914:	str	r2, [sp, #8]
   12918:	bl	11678 <__strdup@plt>
   1291c:	ldr	r2, [sp, #8]
   12920:	subs	r7, r0, #0
   12924:	beq	12aac <__assert_fail@plt+0x12cc>
   12928:	mov	r0, r4
   1292c:	str	r2, [sp, #8]
   12930:	bl	117bc <closedir@plt>
   12934:	str	r7, [r5, #16]
   12938:	ldr	r2, [sp, #8]
   1293c:	b	125b4 <__assert_fail@plt+0xdd4>
   12940:	ldrb	r3, [r0, #20]
   12944:	cmp	r3, #0
   12948:	beq	12864 <__assert_fail@plt+0x1084>
   1294c:	cmp	r3, #46	; 0x2e
   12950:	bne	12880 <__assert_fail@plt+0x10a0>
   12954:	ldrb	r3, [r0, #21]
   12958:	cmp	r3, #0
   1295c:	beq	12864 <__assert_fail@plt+0x1084>
   12960:	b	12880 <__assert_fail@plt+0x10a0>
   12964:	ldrb	r3, [r4, #1]
   12968:	cmp	r3, #62	; 0x3e
   1296c:	bne	1281c <__assert_fail@plt+0x103c>
   12970:	ldrb	r2, [r4, #2]
   12974:	cmp	r2, #0
   12978:	bne	1281c <__assert_fail@plt+0x103c>
   1297c:	ldrb	r3, [r5, #48]	; 0x30
   12980:	mov	r6, r2
   12984:	orr	r3, r3, #2
   12988:	strb	r3, [r5, #48]	; 0x30
   1298c:	b	124d8 <__assert_fail@plt+0xcf8>
   12990:	ldrb	r3, [r4, #1]
   12994:	cmp	r3, #79	; 0x4f
   12998:	bne	124b4 <__assert_fail@plt+0xcd4>
   1299c:	ldrb	r3, [r4, #2]
   129a0:	cmp	r3, #70	; 0x46
   129a4:	bne	124b4 <__assert_fail@plt+0xcd4>
   129a8:	ldrb	r3, [r4, #3]
   129ac:	cmp	r3, #0
   129b0:	moveq	r0, #0
   129b4:	moveq	r1, #0
   129b8:	beq	124d4 <__assert_fail@plt+0xcf4>
   129bc:	b	124b4 <__assert_fail@plt+0xcd4>
   129c0:	ldrb	r3, [r4, #1]
   129c4:	cmp	r3, #79	; 0x4f
   129c8:	bne	12620 <__assert_fail@plt+0xe40>
   129cc:	ldrb	r3, [r4, #2]
   129d0:	cmp	r3, #70	; 0x46
   129d4:	bne	12620 <__assert_fail@plt+0xe40>
   129d8:	ldrb	r3, [r4, #3]
   129dc:	cmp	r3, #0
   129e0:	moveq	r0, #0
   129e4:	moveq	r1, #0
   129e8:	beq	12640 <__assert_fail@plt+0xe60>
   129ec:	b	12620 <__assert_fail@plt+0xe40>
   129f0:	mov	r0, r4
   129f4:	b	125d4 <__assert_fail@plt+0xdf4>
   129f8:	mov	r0, r4
   129fc:	bl	116cc <fclose@plt>
   12a00:	str	r7, [r5, #8]
   12a04:	movw	r1, #29792	; 0x7460
   12a08:	mov	r0, #0
   12a0c:	movt	r1, #1
   12a10:	mov	r2, #5
   12a14:	bl	114e0 <dcgettext@plt>
   12a18:	subs	r3, r0, #0
   12a1c:	beq	12a30 <__assert_fail@plt+0x1250>
   12a20:	bl	11678 <__strdup@plt>
   12a24:	cmp	r0, #0
   12a28:	beq	12aac <__assert_fail@plt+0x12cc>
   12a2c:	mov	r3, r0
   12a30:	str	r3, [r5, #8]
   12a34:	b	124d8 <__assert_fail@plt+0xcf8>
   12a38:	mov	r4, r0
   12a3c:	ldr	r0, [sp, #40]	; 0x28
   12a40:	ldr	sl, [sp, #60]	; 0x3c
   12a44:	bl	116cc <fclose@plt>
   12a48:	mov	r0, r4
   12a4c:	add	r9, sp, #16384	; 0x4000
   12a50:	ldr	r2, [r9, #180]	; 0xb4
   12a54:	ldr	r3, [sl]
   12a58:	cmp	r2, r3
   12a5c:	bne	12ab0 <__assert_fail@plt+0x12d0>
   12a60:	add	sp, sp, #16384	; 0x4000
   12a64:	add	sp, sp, #188	; 0xbc
   12a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a6c:	str	r4, [r5, #16]
   12a70:	b	12560 <__assert_fail@plt+0xd80>
   12a74:	movw	r0, #29880	; 0x74b8
   12a78:	movt	r0, #1
   12a7c:	bl	11450 <mnt_new_table_from_file@plt>
   12a80:	movw	ip, #33400	; 0x8278
   12a84:	movt	ip, #2
   12a88:	cmp	r0, #0
   12a8c:	str	r0, [ip]
   12a90:	bne	12570 <__assert_fail@plt+0xd90>
   12a94:	mov	r3, #0
   12a98:	b	125ac <__assert_fail@plt+0xdcc>
   12a9c:	str	r4, [r5, #8]
   12aa0:	b	12a04 <__assert_fail@plt+0x1224>
   12aa4:	mvn	r0, #0
   12aa8:	b	12a4c <__assert_fail@plt+0x126c>
   12aac:	bl	11814 <__assert_fail@plt+0x34>
   12ab0:	bl	114ec <__stack_chk_fail@plt>
   12ab4:	ldr	ip, [sp]
   12ab8:	mov	r1, r0
   12abc:	mov	r0, #3
   12ac0:	cmp	ip, #0
   12ac4:	movne	ip, #256	; 0x100
   12ac8:	moveq	ip, #0
   12acc:	str	ip, [sp]
   12ad0:	b	1151c <__fxstatat64@plt>
   12ad4:	mov	r1, r2
   12ad8:	mov	r2, r3
   12adc:	b	114a4 <__openat64_2@plt>
   12ae0:	push	{r4, lr}
   12ae4:	ldr	r4, [sp, #8]
   12ae8:	bl	12ad4 <__assert_fail@plt+0x12f4>
   12aec:	cmp	r0, #0
   12af0:	blt	12b00 <__assert_fail@plt+0x1320>
   12af4:	mov	r1, r4
   12af8:	pop	{r4, lr}
   12afc:	b	11420 <fdopen@plt>
   12b00:	mov	r0, #0
   12b04:	pop	{r4, pc}
   12b08:	mov	r1, r2
   12b0c:	mov	r2, r3
   12b10:	ldr	r3, [sp]
   12b14:	b	115ac <readlinkat@plt>
   12b18:	cmp	r0, #0
   12b1c:	mov	r3, #0
   12b20:	str	r3, [r1]
   12b24:	bxeq	lr
   12b28:	ldrb	r2, [r0]
   12b2c:	cmp	r2, #47	; 0x2f
   12b30:	bne	12b78 <__assert_fail@plt+0x1398>
   12b34:	ldrsb	r3, [r0, #1]
   12b38:	cmp	r3, #47	; 0x2f
   12b3c:	bne	12b80 <__assert_fail@plt+0x13a0>
   12b40:	mov	r3, r0
   12b44:	b	12b64 <__assert_fail@plt+0x1384>
   12b48:	ldrb	r2, [r3, #1]
   12b4c:	mov	r3, r0
   12b50:	cmp	r2, #47	; 0x2f
   12b54:	bne	12b78 <__assert_fail@plt+0x1398>
   12b58:	ldrsb	r2, [r0, #1]
   12b5c:	cmp	r2, #47	; 0x2f
   12b60:	bne	12b80 <__assert_fail@plt+0x13a0>
   12b64:	cmn	r3, #1
   12b68:	add	r0, r0, #1
   12b6c:	bne	12b48 <__assert_fail@plt+0x1368>
   12b70:	mov	r0, #0
   12b74:	bx	lr
   12b78:	cmp	r2, #0
   12b7c:	beq	12b70 <__assert_fail@plt+0x1390>
   12b80:	mov	r3, #1
   12b84:	str	r3, [r1]
   12b88:	ldrsb	r3, [r0, #1]
   12b8c:	cmp	r3, #47	; 0x2f
   12b90:	cmpne	r3, #0
   12b94:	bxeq	lr
   12b98:	mov	r3, #2
   12b9c:	str	r3, [r1]
   12ba0:	ldrb	r2, [r0, r3]
   12ba4:	add	r3, r3, #1
   12ba8:	cmp	r2, #47	; 0x2f
   12bac:	cmpne	r2, #0
   12bb0:	bne	12b9c <__assert_fail@plt+0x13bc>
   12bb4:	bx	lr
   12bb8:	push	{r3, r4, r5, r6, r7, lr}
   12bbc:	mov	r7, r1
   12bc0:	ldrb	r3, [r0]
   12bc4:	cmp	r3, #0
   12bc8:	beq	12c40 <__assert_fail@plt+0x1460>
   12bcc:	mov	r4, #0
   12bd0:	mov	r5, r0
   12bd4:	mov	r6, r4
   12bd8:	b	12c08 <__assert_fail@plt+0x1428>
   12bdc:	cmp	r3, #92	; 0x5c
   12be0:	mov	r0, r7
   12be4:	mov	r1, r3
   12be8:	beq	12c30 <__assert_fail@plt+0x1450>
   12bec:	bl	11618 <strchr@plt>
   12bf0:	cmp	r0, #0
   12bf4:	bne	12c38 <__assert_fail@plt+0x1458>
   12bf8:	ldrb	r3, [r5, #1]!
   12bfc:	add	r4, r4, #1
   12c00:	cmp	r3, #0
   12c04:	beq	12c28 <__assert_fail@plt+0x1448>
   12c08:	cmp	r6, #0
   12c0c:	sxtb	r3, r3
   12c10:	beq	12bdc <__assert_fail@plt+0x13fc>
   12c14:	ldrb	r3, [r5, #1]!
   12c18:	mov	r6, #0
   12c1c:	add	r4, r4, #1
   12c20:	cmp	r3, #0
   12c24:	bne	12c08 <__assert_fail@plt+0x1428>
   12c28:	rsb	r0, r6, r4
   12c2c:	pop	{r3, r4, r5, r6, r7, pc}
   12c30:	mov	r6, #1
   12c34:	b	12bf8 <__assert_fail@plt+0x1418>
   12c38:	mov	r0, r4
   12c3c:	pop	{r3, r4, r5, r6, r7, pc}
   12c40:	mov	r0, r3
   12c44:	pop	{r3, r4, r5, r6, r7, pc}
   12c48:	ldr	r3, [pc, #224]	; 12d30 <__assert_fail@plt+0x1550>
   12c4c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12c50:	mov	r6, r0
   12c54:	ldr	r0, [pc, #216]	; 12d34 <__assert_fail@plt+0x1554>
   12c58:	add	r3, pc, r3
   12c5c:	sub	sp, sp, #12
   12c60:	mov	r4, #0
   12c64:	mov	r9, r1
   12c68:	mov	r5, r2
   12c6c:	ldr	r8, [r3, r0]
   12c70:	str	r4, [sp]
   12c74:	ldr	r3, [r8]
   12c78:	str	r3, [sp, #4]
   12c7c:	bl	11630 <__errno_location@plt>
   12c80:	cmp	r6, r4
   12c84:	mov	r7, r0
   12c88:	str	r4, [r0]
   12c8c:	beq	12c9c <__assert_fail@plt+0x14bc>
   12c90:	ldrsb	r3, [r6]
   12c94:	cmp	r3, r4
   12c98:	bne	12cb4 <__assert_fail@plt+0x14d4>
   12c9c:	ldr	r1, [pc, #148]	; 12d38 <__assert_fail@plt+0x1558>
   12ca0:	mov	r2, r9
   12ca4:	mov	r3, r6
   12ca8:	mov	r0, #1
   12cac:	add	r1, pc, r1
   12cb0:	bl	116f0 <errx@plt>
   12cb4:	mov	r3, r4
   12cb8:	mov	r2, r5
   12cbc:	mov	r0, r6
   12cc0:	mov	r1, sp
   12cc4:	bl	114d4 <__strtoull_internal@plt>
   12cc8:	ldr	r3, [r7]
   12ccc:	cmp	r3, r4
   12cd0:	bne	12d0c <__assert_fail@plt+0x152c>
   12cd4:	ldr	r3, [sp]
   12cd8:	cmp	r6, r3
   12cdc:	beq	12c9c <__assert_fail@plt+0x14bc>
   12ce0:	cmp	r3, r4
   12ce4:	beq	12cf4 <__assert_fail@plt+0x1514>
   12ce8:	ldrsb	r3, [r3]
   12cec:	cmp	r3, r4
   12cf0:	bne	12c9c <__assert_fail@plt+0x14bc>
   12cf4:	ldr	r2, [sp, #4]
   12cf8:	ldr	r3, [r8]
   12cfc:	cmp	r2, r3
   12d00:	bne	12d2c <__assert_fail@plt+0x154c>
   12d04:	add	sp, sp, #12
   12d08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12d0c:	cmp	r3, #34	; 0x22
   12d10:	bne	12c9c <__assert_fail@plt+0x14bc>
   12d14:	ldr	r1, [pc, #32]	; 12d3c <__assert_fail@plt+0x155c>
   12d18:	mov	r2, r9
   12d1c:	mov	r3, r6
   12d20:	mov	r0, #1
   12d24:	add	r1, pc, r1
   12d28:	bl	11510 <err@plt>
   12d2c:	bl	114ec <__stack_chk_fail@plt>
   12d30:	andeq	r5, r1, r0, lsr #7
   12d34:	andeq	r0, r0, r0, asr r1
   12d38:	andeq	r4, r0, r4, ror #22
   12d3c:	andeq	r4, r0, ip, ror #21
   12d40:	ldr	r3, [pc, #596]	; 12f9c <__assert_fail@plt+0x17bc>
   12d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d48:	add	r3, pc, r3
   12d4c:	subs	r6, r0, #0
   12d50:	ldr	r0, [pc, #584]	; 12fa0 <__assert_fail@plt+0x17c0>
   12d54:	mov	r8, r1
   12d58:	mov	r1, r3
   12d5c:	sub	sp, sp, #20
   12d60:	mov	r9, r2
   12d64:	ldr	sl, [r1, r0]
   12d68:	mov	r2, #0
   12d6c:	mov	r3, #0
   12d70:	ldr	r1, [sl]
   12d74:	strd	r2, [r8]
   12d78:	str	r1, [sp, #12]
   12d7c:	beq	12e64 <__assert_fail@plt+0x1684>
   12d80:	ldrb	r5, [r6]
   12d84:	cmp	r5, #0
   12d88:	beq	12e64 <__assert_fail@plt+0x1684>
   12d8c:	str	r6, [sp, #8]
   12d90:	bl	115dc <__ctype_b_loc@plt>
   12d94:	mov	r3, r6
   12d98:	ldr	r1, [r0]
   12d9c:	b	12db0 <__assert_fail@plt+0x15d0>
   12da0:	add	r2, r3, #1
   12da4:	str	r2, [sp, #8]
   12da8:	ldrb	r5, [r3, #1]
   12dac:	mov	r3, r2
   12db0:	lsl	r2, r5, #1
   12db4:	ldrh	r4, [r1, r2]
   12db8:	and	r4, r4, #8192	; 0x2000
   12dbc:	uxth	r4, r4
   12dc0:	cmp	r4, #0
   12dc4:	bne	12da0 <__assert_fail@plt+0x15c0>
   12dc8:	cmp	r5, #45	; 0x2d
   12dcc:	beq	12e64 <__assert_fail@plt+0x1684>
   12dd0:	add	r5, sp, #16
   12dd4:	str	r4, [r5, #-8]!
   12dd8:	bl	11630 <__errno_location@plt>
   12ddc:	mov	r2, r4
   12de0:	mov	r1, r5
   12de4:	mov	r3, r4
   12de8:	mov	r7, r0
   12dec:	mov	r0, r6
   12df0:	str	r4, [r7]
   12df4:	bl	114d4 <__strtoull_internal@plt>
   12df8:	mov	r5, r1
   12dfc:	ldr	r1, [sp, #8]
   12e00:	mov	r4, r0
   12e04:	cmp	r1, r6
   12e08:	beq	12e64 <__assert_fail@plt+0x1684>
   12e0c:	ldr	r3, [r7]
   12e10:	cmp	r3, #0
   12e14:	bne	12e48 <__assert_fail@plt+0x1668>
   12e18:	cmp	r1, #0
   12e1c:	beq	12f4c <__assert_fail@plt+0x176c>
   12e20:	ldrb	r0, [r1]
   12e24:	cmp	r0, #0
   12e28:	bne	12e6c <__assert_fail@plt+0x168c>
   12e2c:	strd	r4, [r8]
   12e30:	ldr	r2, [sp, #12]
   12e34:	ldr	r3, [sl]
   12e38:	cmp	r2, r3
   12e3c:	bne	12f98 <__assert_fail@plt+0x17b8>
   12e40:	add	sp, sp, #20
   12e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e48:	subs	r2, r4, #1
   12e4c:	mvn	r6, #2
   12e50:	sbc	r3, r5, #0
   12e54:	mvn	r7, #0
   12e58:	cmp	r3, r7
   12e5c:	cmpeq	r2, r6
   12e60:	bls	12e18 <__assert_fail@plt+0x1638>
   12e64:	mvn	r0, #0
   12e68:	b	12e30 <__assert_fail@plt+0x1650>
   12e6c:	ldrb	r2, [r1, #1]
   12e70:	sxtb	r3, r2
   12e74:	cmp	r3, #105	; 0x69
   12e78:	beq	12f54 <__assert_fail@plt+0x1774>
   12e7c:	cmp	r3, #66	; 0x42
   12e80:	beq	12f30 <__assert_fail@plt+0x1750>
   12e84:	cmp	r2, #0
   12e88:	bne	12e64 <__assert_fail@plt+0x1684>
   12e8c:	mov	r6, #1024	; 0x400
   12e90:	ldr	r7, [pc, #268]	; 12fa4 <__assert_fail@plt+0x17c4>
   12e94:	sxtb	r3, r0
   12e98:	str	r3, [sp, #4]
   12e9c:	add	r7, pc, r7
   12ea0:	mov	r1, r3
   12ea4:	mov	r0, r7
   12ea8:	bl	11618 <strchr@plt>
   12eac:	ldr	r3, [sp, #4]
   12eb0:	cmp	r0, #0
   12eb4:	rsbne	fp, r7, r0
   12eb8:	addne	fp, fp, #1
   12ebc:	beq	12f70 <__assert_fail@plt+0x1790>
   12ec0:	cmp	fp, #0
   12ec4:	beq	12f20 <__assert_fail@plt+0x1740>
   12ec8:	asr	r7, r6, #31
   12ecc:	mvn	r0, #0
   12ed0:	mvn	r1, #0
   12ed4:	mov	r2, r6
   12ed8:	mov	r3, r7
   12edc:	bl	166c0 <__assert_fail@plt+0x4ee0>
   12ee0:	cmp	r1, r5
   12ee4:	cmpeq	r0, r4
   12ee8:	bcc	12f44 <__assert_fail@plt+0x1764>
   12eec:	sub	ip, fp, #1
   12ef0:	mov	r3, #0
   12ef4:	b	12f08 <__assert_fail@plt+0x1728>
   12ef8:	cmp	r1, r5
   12efc:	cmpeq	r0, r4
   12f00:	add	r3, r3, #1
   12f04:	bcc	12f44 <__assert_fail@plt+0x1764>
   12f08:	mul	r2, r4, r7
   12f0c:	cmp	r3, ip
   12f10:	mla	r2, r6, r5, r2
   12f14:	umull	r4, r5, r4, r6
   12f18:	add	r5, r2, r5
   12f1c:	bne	12ef8 <__assert_fail@plt+0x1718>
   12f20:	mov	r0, #0
   12f24:	cmp	r9, #0
   12f28:	strne	fp, [r9]
   12f2c:	b	12e2c <__assert_fail@plt+0x164c>
   12f30:	ldrsb	r3, [r1, #2]
   12f34:	cmp	r3, #0
   12f38:	bne	12e64 <__assert_fail@plt+0x1684>
   12f3c:	mov	r6, #1000	; 0x3e8
   12f40:	b	12e90 <__assert_fail@plt+0x16b0>
   12f44:	mvn	r0, #1
   12f48:	b	12f24 <__assert_fail@plt+0x1744>
   12f4c:	mov	r0, r1
   12f50:	b	12e2c <__assert_fail@plt+0x164c>
   12f54:	ldrsb	r3, [r1, #2]
   12f58:	cmp	r3, #66	; 0x42
   12f5c:	bne	12e64 <__assert_fail@plt+0x1684>
   12f60:	ldrsb	r3, [r1, #3]
   12f64:	cmp	r3, #0
   12f68:	beq	12e8c <__assert_fail@plt+0x16ac>
   12f6c:	b	12e64 <__assert_fail@plt+0x1684>
   12f70:	ldr	r7, [pc, #48]	; 12fa8 <__assert_fail@plt+0x17c8>
   12f74:	mov	r1, r3
   12f78:	add	r7, pc, r7
   12f7c:	mov	r0, r7
   12f80:	bl	11618 <strchr@plt>
   12f84:	cmp	r0, #0
   12f88:	beq	12e64 <__assert_fail@plt+0x1684>
   12f8c:	rsb	r7, r7, r0
   12f90:	add	fp, r7, #1
   12f94:	b	12ec0 <__assert_fail@plt+0x16e0>
   12f98:	bl	114ec <__stack_chk_fail@plt>
   12f9c:			; <UNDEFINED> instruction: 0x000152b0
   12fa0:	andeq	r0, r0, r0, asr r1
   12fa4:	andeq	r4, r0, r0, lsl #19
   12fa8:			; <UNDEFINED> instruction: 0x000048b0
   12fac:	mov	r2, #0
   12fb0:	b	12d40 <__assert_fail@plt+0x1560>
   12fb4:	push	{r4, r5, r6, lr}
   12fb8:	subs	r6, r0, #0
   12fbc:	beq	13040 <__assert_fail@plt+0x1860>
   12fc0:	ldrb	r4, [r6]
   12fc4:	cmp	r4, #0
   12fc8:	beq	13048 <__assert_fail@plt+0x1868>
   12fcc:	bl	115dc <__ctype_b_loc@plt>
   12fd0:	mov	r3, r6
   12fd4:	ldr	r5, [r0]
   12fd8:	b	12ff4 <__assert_fail@plt+0x1814>
   12fdc:	cmn	r3, #1
   12fe0:	beq	13030 <__assert_fail@plt+0x1850>
   12fe4:	ldrb	r4, [r3, #1]
   12fe8:	mov	r3, r1
   12fec:	cmp	r4, #0
   12ff0:	beq	13038 <__assert_fail@plt+0x1858>
   12ff4:	lsl	r4, r4, #1
   12ff8:	mov	ip, r3
   12ffc:	add	r1, r3, #1
   13000:	ldrh	r2, [r5, r4]
   13004:	tst	r2, #2048	; 0x800
   13008:	bne	12fdc <__assert_fail@plt+0x17fc>
   1300c:	cmp	ip, #0
   13010:	cmpne	ip, r6
   13014:	movls	r0, #0
   13018:	movhi	r0, #1
   1301c:	popls	{r4, r5, r6, pc}
   13020:	ldrsb	r0, [ip]
   13024:	rsbs	r0, r0, #1
   13028:	movcc	r0, #0
   1302c:	pop	{r4, r5, r6, pc}
   13030:	mov	r0, #0
   13034:	pop	{r4, r5, r6, pc}
   13038:	mov	ip, r1
   1303c:	b	1300c <__assert_fail@plt+0x182c>
   13040:	mov	r0, r6
   13044:	pop	{r4, r5, r6, pc}
   13048:	mov	r0, r4
   1304c:	pop	{r4, r5, r6, pc}
   13050:	cmp	r1, #0
   13054:	push	{r4, r5}
   13058:	sub	r4, r1, #1
   1305c:	beq	130c8 <__assert_fail@plt+0x18e8>
   13060:	ldrb	r1, [r0]
   13064:	cmp	r1, #0
   13068:	beq	130c8 <__assert_fail@plt+0x18e8>
   1306c:	sxtb	r1, r1
   13070:	sxtb	r2, r2
   13074:	cmp	r1, r2
   13078:	beq	130b4 <__assert_fail@plt+0x18d4>
   1307c:	add	r1, r0, #1
   13080:	mov	r3, #0
   13084:	b	130a0 <__assert_fail@plt+0x18c0>
   13088:	ldrb	r0, [r1], #1
   1308c:	cmp	r0, #0
   13090:	sxtb	ip, r0
   13094:	beq	130b4 <__assert_fail@plt+0x18d4>
   13098:	cmp	ip, r2
   1309c:	beq	130bc <__assert_fail@plt+0x18dc>
   130a0:	cmp	r3, r4
   130a4:	mov	r5, r1
   130a8:	add	r3, r3, #1
   130ac:	bne	13088 <__assert_fail@plt+0x18a8>
   130b0:	mov	r0, #0
   130b4:	pop	{r4, r5}
   130b8:	bx	lr
   130bc:	mov	r0, r5
   130c0:	pop	{r4, r5}
   130c4:	bx	lr
   130c8:	mov	r0, r1
   130cc:	b	130b4 <__assert_fail@plt+0x18d4>
   130d0:	ldr	r3, [pc, #228]	; 131bc <__assert_fail@plt+0x19dc>
   130d4:	ldr	r2, [pc, #228]	; 131c0 <__assert_fail@plt+0x19e0>
   130d8:	add	r3, pc, r3
   130dc:	push	{r4, r6, r7, r8, r9, lr}
   130e0:	subs	r6, r0, #0
   130e4:	ldr	r7, [r3, r2]
   130e8:	mov	r0, r3
   130ec:	sub	sp, sp, #8
   130f0:	mov	r4, #0
   130f4:	mov	r8, r1
   130f8:	ldr	r3, [r7]
   130fc:	str	r4, [sp]
   13100:	str	r3, [sp, #4]
   13104:	beq	13114 <__assert_fail@plt+0x1934>
   13108:	ldrsb	r3, [r6]
   1310c:	cmp	r3, r4
   13110:	bne	1313c <__assert_fail@plt+0x195c>
   13114:	bl	11630 <__errno_location@plt>
   13118:	ldr	r3, [r0]
   1311c:	cmp	r3, #0
   13120:	bne	13168 <__assert_fail@plt+0x1988>
   13124:	ldr	r1, [pc, #152]	; 131c4 <__assert_fail@plt+0x19e4>
   13128:	mov	r2, r8
   1312c:	mov	r3, r6
   13130:	mov	r0, #1
   13134:	add	r1, pc, r1
   13138:	bl	116f0 <errx@plt>
   1313c:	bl	11630 <__errno_location@plt>
   13140:	mov	r3, r4
   13144:	mov	r1, sp
   13148:	mov	r2, #10
   1314c:	mov	r9, r0
   13150:	str	r4, [r0]
   13154:	mov	r0, r6
   13158:	bl	1175c <__strtoll_internal@plt>
   1315c:	ldr	r3, [r9]
   13160:	cmp	r3, r4
   13164:	beq	13180 <__assert_fail@plt+0x19a0>
   13168:	ldr	r1, [pc, #88]	; 131c8 <__assert_fail@plt+0x19e8>
   1316c:	mov	r2, r8
   13170:	mov	r3, r6
   13174:	mov	r0, #1
   13178:	add	r1, pc, r1
   1317c:	bl	11510 <err@plt>
   13180:	ldr	r3, [sp]
   13184:	cmp	r6, r3
   13188:	beq	13124 <__assert_fail@plt+0x1944>
   1318c:	cmp	r3, #0
   13190:	beq	131a0 <__assert_fail@plt+0x19c0>
   13194:	ldrsb	r3, [r3]
   13198:	cmp	r3, #0
   1319c:	bne	13124 <__assert_fail@plt+0x1944>
   131a0:	ldr	r2, [sp, #4]
   131a4:	ldr	r3, [r7]
   131a8:	cmp	r2, r3
   131ac:	bne	131b8 <__assert_fail@plt+0x19d8>
   131b0:	add	sp, sp, #8
   131b4:	pop	{r4, r6, r7, r8, r9, pc}
   131b8:	bl	114ec <__stack_chk_fail@plt>
   131bc:	andeq	r4, r1, r0, lsr #30
   131c0:	andeq	r0, r0, r0, asr r1
   131c4:	ldrdeq	r4, [r0], -ip
   131c8:	muleq	r0, r8, r6
   131cc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   131d0:	mov	r8, r0
   131d4:	mov	r9, r1
   131d8:	bl	130d0 <__assert_fail@plt+0x18f0>
   131dc:	mvn	r4, #0
   131e0:	mov	r5, #0
   131e4:	adds	r6, r0, #-2147483648	; 0x80000000
   131e8:	adc	r7, r1, #0
   131ec:	cmp	r7, r5
   131f0:	cmpeq	r6, r4
   131f4:	popls	{r3, r4, r5, r6, r7, r8, r9, pc}
   131f8:	ldr	r1, [pc, #16]	; 13210 <__assert_fail@plt+0x1a30>
   131fc:	mov	r2, r9
   13200:	mov	r3, r8
   13204:	mov	r0, #1
   13208:	add	r1, pc, r1
   1320c:	bl	116f0 <errx@plt>
   13210:	andeq	r4, r0, r8, lsl #12
   13214:	push	{r3, r4, r5, lr}
   13218:	mov	r4, r0
   1321c:	mov	r5, r1
   13220:	bl	131cc <__assert_fail@plt+0x19ec>
   13224:	add	ip, r0, #32768	; 0x8000
   13228:	cmp	ip, #65536	; 0x10000
   1322c:	bcs	13238 <__assert_fail@plt+0x1a58>
   13230:	sxth	r0, r0
   13234:	pop	{r3, r4, r5, pc}
   13238:	ldr	r1, [pc, #16]	; 13250 <__assert_fail@plt+0x1a70>
   1323c:	mov	r2, r5
   13240:	mov	r3, r4
   13244:	mov	r0, #1
   13248:	add	r1, pc, r1
   1324c:	bl	116f0 <errx@plt>
   13250:	andeq	r4, r0, r8, asr #11
   13254:	mov	r2, #10
   13258:	b	12c48 <__assert_fail@plt+0x1468>
   1325c:	push	{r3, r4, r5, r6, r7, lr}
   13260:	mov	r6, r0
   13264:	mov	r7, r1
   13268:	bl	13254 <__assert_fail@plt+0x1a74>
   1326c:	mvn	r4, #0
   13270:	mov	r5, #0
   13274:	cmp	r1, r5
   13278:	cmpeq	r0, r4
   1327c:	popls	{r3, r4, r5, r6, r7, pc}
   13280:	ldr	r1, [pc, #16]	; 13298 <__assert_fail@plt+0x1ab8>
   13284:	mov	r2, r7
   13288:	mov	r3, r6
   1328c:	mov	r0, #1
   13290:	add	r1, pc, r1
   13294:	bl	116f0 <errx@plt>
   13298:	andeq	r4, r0, r0, lsl #11
   1329c:	push	{r3, r4, r5, lr}
   132a0:	mov	r4, r0
   132a4:	mov	r5, r1
   132a8:	bl	1325c <__assert_fail@plt+0x1a7c>
   132ac:	cmp	r0, #65536	; 0x10000
   132b0:	bcs	132bc <__assert_fail@plt+0x1adc>
   132b4:	uxth	r0, r0
   132b8:	pop	{r3, r4, r5, pc}
   132bc:	ldr	r1, [pc, #16]	; 132d4 <__assert_fail@plt+0x1af4>
   132c0:	mov	r2, r5
   132c4:	mov	r3, r4
   132c8:	mov	r0, #1
   132cc:	add	r1, pc, r1
   132d0:	bl	116f0 <errx@plt>
   132d4:	andeq	r4, r0, r4, asr #10
   132d8:	mov	r2, #16
   132dc:	b	12c48 <__assert_fail@plt+0x1468>
   132e0:	ldr	r3, [pc, #216]	; 133c0 <__assert_fail@plt+0x1be0>
   132e4:	push	{r4, r5, r6, r7, r8, lr}
   132e8:	subs	r4, r0, #0
   132ec:	ldr	r0, [pc, #208]	; 133c4 <__assert_fail@plt+0x1be4>
   132f0:	add	r3, pc, r3
   132f4:	sub	sp, sp, #8
   132f8:	mov	r5, #0
   132fc:	mov	r7, r1
   13300:	ldr	r6, [r3, r0]
   13304:	str	r5, [sp]
   13308:	ldr	r3, [r6]
   1330c:	str	r3, [sp, #4]
   13310:	beq	13320 <__assert_fail@plt+0x1b40>
   13314:	ldrsb	r3, [r4]
   13318:	cmp	r3, r5
   1331c:	bne	13348 <__assert_fail@plt+0x1b68>
   13320:	bl	11630 <__errno_location@plt>
   13324:	ldr	r3, [r0]
   13328:	cmp	r3, #0
   1332c:	bne	1336c <__assert_fail@plt+0x1b8c>
   13330:	ldr	r1, [pc, #144]	; 133c8 <__assert_fail@plt+0x1be8>
   13334:	mov	r2, r7
   13338:	mov	r3, r4
   1333c:	mov	r0, #1
   13340:	add	r1, pc, r1
   13344:	bl	116f0 <errx@plt>
   13348:	bl	11630 <__errno_location@plt>
   1334c:	mov	r1, sp
   13350:	mov	r8, r0
   13354:	str	r5, [r0]
   13358:	mov	r0, r4
   1335c:	bl	116b4 <strtod@plt>
   13360:	ldr	r3, [r8]
   13364:	cmp	r3, r5
   13368:	beq	13384 <__assert_fail@plt+0x1ba4>
   1336c:	ldr	r1, [pc, #88]	; 133cc <__assert_fail@plt+0x1bec>
   13370:	mov	r2, r7
   13374:	mov	r3, r4
   13378:	mov	r0, #1
   1337c:	add	r1, pc, r1
   13380:	bl	11510 <err@plt>
   13384:	ldr	r3, [sp]
   13388:	cmp	r4, r3
   1338c:	beq	13330 <__assert_fail@plt+0x1b50>
   13390:	cmp	r3, #0
   13394:	beq	133a4 <__assert_fail@plt+0x1bc4>
   13398:	ldrsb	r3, [r3]
   1339c:	cmp	r3, #0
   133a0:	bne	13330 <__assert_fail@plt+0x1b50>
   133a4:	ldr	r2, [sp, #4]
   133a8:	ldr	r3, [r6]
   133ac:	cmp	r2, r3
   133b0:	bne	133bc <__assert_fail@plt+0x1bdc>
   133b4:	add	sp, sp, #8
   133b8:	pop	{r4, r5, r6, r7, r8, pc}
   133bc:	bl	114ec <__stack_chk_fail@plt>
   133c0:	andeq	r4, r1, r8, lsl #26
   133c4:	andeq	r0, r0, r0, asr r1
   133c8:	ldrdeq	r4, [r0], -r0
   133cc:	muleq	r0, r4, r4
   133d0:	ldr	r3, [pc, #220]	; 134b4 <__assert_fail@plt+0x1cd4>
   133d4:	push	{r4, r5, r6, r7, r8, lr}
   133d8:	subs	r4, r0, #0
   133dc:	ldr	r0, [pc, #212]	; 134b8 <__assert_fail@plt+0x1cd8>
   133e0:	add	r3, pc, r3
   133e4:	sub	sp, sp, #8
   133e8:	mov	r5, #0
   133ec:	mov	r7, r1
   133f0:	ldr	r6, [r3, r0]
   133f4:	str	r5, [sp]
   133f8:	ldr	r3, [r6]
   133fc:	str	r3, [sp, #4]
   13400:	beq	13410 <__assert_fail@plt+0x1c30>
   13404:	ldrsb	r3, [r4]
   13408:	cmp	r3, r5
   1340c:	bne	13438 <__assert_fail@plt+0x1c58>
   13410:	bl	11630 <__errno_location@plt>
   13414:	ldr	r3, [r0]
   13418:	cmp	r3, #0
   1341c:	bne	13460 <__assert_fail@plt+0x1c80>
   13420:	ldr	r1, [pc, #148]	; 134bc <__assert_fail@plt+0x1cdc>
   13424:	mov	r2, r7
   13428:	mov	r3, r4
   1342c:	mov	r0, #1
   13430:	add	r1, pc, r1
   13434:	bl	116f0 <errx@plt>
   13438:	bl	11630 <__errno_location@plt>
   1343c:	mov	r1, sp
   13440:	mov	r2, #10
   13444:	mov	r8, r0
   13448:	str	r5, [r0]
   1344c:	mov	r0, r4
   13450:	bl	1145c <strtol@plt>
   13454:	ldr	r3, [r8]
   13458:	cmp	r3, r5
   1345c:	beq	13478 <__assert_fail@plt+0x1c98>
   13460:	ldr	r1, [pc, #88]	; 134c0 <__assert_fail@plt+0x1ce0>
   13464:	mov	r2, r7
   13468:	mov	r3, r4
   1346c:	mov	r0, #1
   13470:	add	r1, pc, r1
   13474:	bl	11510 <err@plt>
   13478:	ldr	r3, [sp]
   1347c:	cmp	r4, r3
   13480:	beq	13420 <__assert_fail@plt+0x1c40>
   13484:	cmp	r3, #0
   13488:	beq	13498 <__assert_fail@plt+0x1cb8>
   1348c:	ldrsb	r3, [r3]
   13490:	cmp	r3, #0
   13494:	bne	13420 <__assert_fail@plt+0x1c40>
   13498:	ldr	r2, [sp, #4]
   1349c:	ldr	r3, [r6]
   134a0:	cmp	r2, r3
   134a4:	bne	134b0 <__assert_fail@plt+0x1cd0>
   134a8:	add	sp, sp, #8
   134ac:	pop	{r4, r5, r6, r7, r8, pc}
   134b0:	bl	114ec <__stack_chk_fail@plt>
   134b4:	andeq	r4, r1, r8, lsl ip
   134b8:	andeq	r0, r0, r0, asr r1
   134bc:	andeq	r4, r0, r0, ror #7
   134c0:	andeq	r4, r0, r0, lsr #7
   134c4:	ldr	r3, [pc, #220]	; 135a8 <__assert_fail@plt+0x1dc8>
   134c8:	push	{r4, r5, r6, r7, r8, lr}
   134cc:	subs	r4, r0, #0
   134d0:	ldr	r0, [pc, #212]	; 135ac <__assert_fail@plt+0x1dcc>
   134d4:	add	r3, pc, r3
   134d8:	sub	sp, sp, #8
   134dc:	mov	r5, #0
   134e0:	mov	r7, r1
   134e4:	ldr	r6, [r3, r0]
   134e8:	str	r5, [sp]
   134ec:	ldr	r3, [r6]
   134f0:	str	r3, [sp, #4]
   134f4:	beq	13504 <__assert_fail@plt+0x1d24>
   134f8:	ldrsb	r3, [r4]
   134fc:	cmp	r3, r5
   13500:	bne	1352c <__assert_fail@plt+0x1d4c>
   13504:	bl	11630 <__errno_location@plt>
   13508:	ldr	r3, [r0]
   1350c:	cmp	r3, #0
   13510:	bne	13554 <__assert_fail@plt+0x1d74>
   13514:	ldr	r1, [pc, #148]	; 135b0 <__assert_fail@plt+0x1dd0>
   13518:	mov	r2, r7
   1351c:	mov	r3, r4
   13520:	mov	r0, #1
   13524:	add	r1, pc, r1
   13528:	bl	116f0 <errx@plt>
   1352c:	bl	11630 <__errno_location@plt>
   13530:	mov	r1, sp
   13534:	mov	r2, #10
   13538:	mov	r8, r0
   1353c:	str	r5, [r0]
   13540:	mov	r0, r4
   13544:	bl	115f4 <strtoul@plt>
   13548:	ldr	r3, [r8]
   1354c:	cmp	r3, r5
   13550:	beq	1356c <__assert_fail@plt+0x1d8c>
   13554:	ldr	r1, [pc, #88]	; 135b4 <__assert_fail@plt+0x1dd4>
   13558:	mov	r2, r7
   1355c:	mov	r3, r4
   13560:	mov	r0, #1
   13564:	add	r1, pc, r1
   13568:	bl	11510 <err@plt>
   1356c:	ldr	r3, [sp]
   13570:	cmp	r4, r3
   13574:	beq	13514 <__assert_fail@plt+0x1d34>
   13578:	cmp	r3, #0
   1357c:	beq	1358c <__assert_fail@plt+0x1dac>
   13580:	ldrsb	r3, [r3]
   13584:	cmp	r3, #0
   13588:	bne	13514 <__assert_fail@plt+0x1d34>
   1358c:	ldr	r2, [sp, #4]
   13590:	ldr	r3, [r6]
   13594:	cmp	r2, r3
   13598:	bne	135a4 <__assert_fail@plt+0x1dc4>
   1359c:	add	sp, sp, #8
   135a0:	pop	{r4, r5, r6, r7, r8, pc}
   135a4:	bl	114ec <__stack_chk_fail@plt>
   135a8:	andeq	r4, r1, r4, lsr #22
   135ac:	andeq	r0, r0, r0, asr r1
   135b0:	andeq	r4, r0, ip, ror #5
   135b4:	andeq	r4, r0, ip, lsr #5
   135b8:	ldr	ip, [pc, #132]	; 13644 <__assert_fail@plt+0x1e64>
   135bc:	push	{r4, r5, r6, lr}
   135c0:	add	ip, pc, ip
   135c4:	ldr	lr, [pc, #124]	; 13648 <__assert_fail@plt+0x1e68>
   135c8:	sub	sp, sp, #16
   135cc:	mov	r6, r1
   135d0:	mov	r5, r0
   135d4:	mov	r1, sp
   135d8:	ldr	r4, [ip, lr]
   135dc:	ldr	ip, [r4]
   135e0:	str	ip, [sp, #12]
   135e4:	bl	12fac <__assert_fail@plt+0x17cc>
   135e8:	cmp	r0, #0
   135ec:	bne	1360c <__assert_fail@plt+0x1e2c>
   135f0:	ldr	r2, [sp, #12]
   135f4:	ldr	r3, [r4]
   135f8:	ldrd	r0, [sp]
   135fc:	cmp	r2, r3
   13600:	bne	13640 <__assert_fail@plt+0x1e60>
   13604:	add	sp, sp, #16
   13608:	pop	{r4, r5, r6, pc}
   1360c:	bl	11630 <__errno_location@plt>
   13610:	mov	r2, r6
   13614:	ldr	r3, [r0]
   13618:	mov	r0, #1
   1361c:	cmp	r3, #0
   13620:	mov	r3, r5
   13624:	beq	13634 <__assert_fail@plt+0x1e54>
   13628:	ldr	r1, [pc, #28]	; 1364c <__assert_fail@plt+0x1e6c>
   1362c:	add	r1, pc, r1
   13630:	bl	11510 <err@plt>
   13634:	ldr	r1, [pc, #20]	; 13650 <__assert_fail@plt+0x1e70>
   13638:	add	r1, pc, r1
   1363c:	bl	116f0 <errx@plt>
   13640:	bl	114ec <__stack_chk_fail@plt>
   13644:	andeq	r4, r1, r8, lsr sl
   13648:	andeq	r0, r0, r0, asr r1
   1364c:	andeq	r4, r0, r4, ror #3
   13650:	ldrdeq	r4, [r0], -r8
   13654:	push	{r4, lr}
   13658:	mov	r4, r1
   1365c:	mov	r1, r2
   13660:	bl	132e0 <__assert_fail@plt+0x1b00>
   13664:	vldr	d7, [pc, #28]	; 13688 <__assert_fail@plt+0x1ea8>
   13668:	vcvt.s32.f64	s11, d0
   1366c:	vcvt.f64.s32	d6, s11
   13670:	vstr	s11, [r4]
   13674:	vsub.f64	d0, d0, d6
   13678:	vmul.f64	d0, d0, d7
   1367c:	vcvt.s32.f64	s0, d0
   13680:	vstr	s0, [r4, #4]
   13684:	pop	{r4, pc}
   13688:	andeq	r0, r0, r0
   1368c:	smlawbmi	lr, r0, r4, r8
   13690:	and	r3, r0, #61440	; 0xf000
   13694:	cmp	r3, #16384	; 0x4000
   13698:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   1369c:	moveq	r3, #100	; 0x64
   136a0:	beq	13718 <__assert_fail@plt+0x1f38>
   136a4:	cmp	r3, #40960	; 0xa000
   136a8:	moveq	r3, #108	; 0x6c
   136ac:	beq	13718 <__assert_fail@plt+0x1f38>
   136b0:	cmp	r3, #8192	; 0x2000
   136b4:	moveq	r3, #99	; 0x63
   136b8:	beq	13718 <__assert_fail@plt+0x1f38>
   136bc:	cmp	r3, #24576	; 0x6000
   136c0:	moveq	r3, #98	; 0x62
   136c4:	beq	13718 <__assert_fail@plt+0x1f38>
   136c8:	cmp	r3, #49152	; 0xc000
   136cc:	moveq	r3, #115	; 0x73
   136d0:	beq	13718 <__assert_fail@plt+0x1f38>
   136d4:	cmp	r3, #4096	; 0x1000
   136d8:	moveq	r3, #112	; 0x70
   136dc:	beq	13718 <__assert_fail@plt+0x1f38>
   136e0:	cmp	r3, #32768	; 0x8000
   136e4:	beq	13714 <__assert_fail@plt+0x1f34>
   136e8:	mov	r4, #9
   136ec:	mov	r3, #8
   136f0:	mov	r6, #7
   136f4:	mov	r7, #6
   136f8:	mov	r2, #5
   136fc:	mov	r8, #4
   13700:	mov	r9, #3
   13704:	mov	ip, #2
   13708:	mov	sl, #1
   1370c:	mov	fp, #0
   13710:	b	13744 <__assert_fail@plt+0x1f64>
   13714:	mov	r3, #45	; 0x2d
   13718:	strb	r3, [r1]
   1371c:	mov	r4, #10
   13720:	mov	r3, #9
   13724:	mov	r6, #8
   13728:	mov	r7, #7
   1372c:	mov	r2, #6
   13730:	mov	r8, #5
   13734:	mov	r9, #4
   13738:	mov	ip, #3
   1373c:	mov	sl, #2
   13740:	mov	fp, #1
   13744:	tst	r0, #256	; 0x100
   13748:	add	ip, r1, ip
   1374c:	moveq	r5, #45	; 0x2d
   13750:	movne	r5, #114	; 0x72
   13754:	tst	r0, #128	; 0x80
   13758:	strb	r5, [r1, fp]
   1375c:	moveq	r5, #45	; 0x2d
   13760:	movne	r5, #119	; 0x77
   13764:	tst	r0, #2048	; 0x800
   13768:	strb	r5, [r1, sl]
   1376c:	beq	13808 <__assert_fail@plt+0x2028>
   13770:	tst	r0, #64	; 0x40
   13774:	moveq	r5, #83	; 0x53
   13778:	movne	r5, #115	; 0x73
   1377c:	tst	r0, #32
   13780:	strb	r5, [ip]
   13784:	add	r2, r1, r2
   13788:	moveq	ip, #45	; 0x2d
   1378c:	movne	ip, #114	; 0x72
   13790:	tst	r0, #16
   13794:	strb	ip, [r1, r9]
   13798:	moveq	ip, #45	; 0x2d
   1379c:	movne	ip, #119	; 0x77
   137a0:	tst	r0, #1024	; 0x400
   137a4:	strb	ip, [r1, r8]
   137a8:	beq	13828 <__assert_fail@plt+0x2048>
   137ac:	tst	r0, #8
   137b0:	moveq	ip, #83	; 0x53
   137b4:	movne	ip, #115	; 0x73
   137b8:	tst	r0, #4
   137bc:	strb	ip, [r2]
   137c0:	add	r3, r1, r3
   137c4:	moveq	r2, #45	; 0x2d
   137c8:	movne	r2, #114	; 0x72
   137cc:	tst	r0, #2
   137d0:	strb	r2, [r1, r7]
   137d4:	moveq	r2, #45	; 0x2d
   137d8:	movne	r2, #119	; 0x77
   137dc:	tst	r0, #512	; 0x200
   137e0:	strb	r2, [r1, r6]
   137e4:	beq	13818 <__assert_fail@plt+0x2038>
   137e8:	tst	r0, #1
   137ec:	moveq	r2, #84	; 0x54
   137f0:	movne	r2, #116	; 0x74
   137f4:	strb	r2, [r3]
   137f8:	mov	r3, #0
   137fc:	strb	r3, [r1, r4]
   13800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   13804:	bx	lr
   13808:	tst	r0, #64	; 0x40
   1380c:	moveq	r5, #45	; 0x2d
   13810:	movne	r5, #120	; 0x78
   13814:	b	1377c <__assert_fail@plt+0x1f9c>
   13818:	tst	r0, #1
   1381c:	moveq	r2, #45	; 0x2d
   13820:	movne	r2, #120	; 0x78
   13824:	b	137f4 <__assert_fail@plt+0x2014>
   13828:	tst	r0, #8
   1382c:	moveq	ip, #45	; 0x2d
   13830:	movne	ip, #120	; 0x78
   13834:	b	137b8 <__assert_fail@plt+0x1fd8>
   13838:	ldr	r1, [pc, #580]	; 13a84 <__assert_fail@plt+0x22a4>
   1383c:	tst	r0, #2
   13840:	ldr	ip, [pc, #576]	; 13a88 <__assert_fail@plt+0x22a8>
   13844:	add	r1, pc, r1
   13848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384c:	sub	sp, sp, #100	; 0x64
   13850:	ldr	r6, [r1, ip]
   13854:	addeq	r7, sp, #52	; 0x34
   13858:	addne	lr, sp, #53	; 0x35
   1385c:	addne	r7, sp, #52	; 0x34
   13860:	moveq	lr, r7
   13864:	mov	ip, #10
   13868:	ldr	r1, [r6]
   1386c:	str	r1, [sp, #92]	; 0x5c
   13870:	movne	r1, #32
   13874:	strbne	r1, [sp, #52]	; 0x34
   13878:	mov	r1, #1
   1387c:	sub	r9, ip, #32
   13880:	rsb	r8, ip, #32
   13884:	lsl	r5, r1, r9
   13888:	lsl	r4, r1, ip
   1388c:	orr	r5, r5, r1, lsr r8
   13890:	cmp	r3, r5
   13894:	cmpeq	r2, r4
   13898:	bcc	13a04 <__assert_fail@plt+0x2224>
   1389c:	add	ip, ip, #10
   138a0:	cmp	ip, #70	; 0x46
   138a4:	bne	1387c <__assert_fail@plt+0x209c>
   138a8:	mov	r1, #60	; 0x3c
   138ac:	movw	r5, #26215	; 0x6667
   138b0:	movt	r5, #26214	; 0x6666
   138b4:	ldr	r8, [pc, #464]	; 13a8c <__assert_fail@plt+0x22ac>
   138b8:	mov	fp, #1
   138bc:	smull	sl, r9, r5, r1
   138c0:	add	r8, pc, r8
   138c4:	str	r8, [sp, #36]	; 0x24
   138c8:	sub	r8, r1, #32
   138cc:	asr	r4, r1, #31
   138d0:	lsl	r5, fp, r8
   138d4:	str	r4, [sp, #44]	; 0x2c
   138d8:	lsl	r4, fp, r1
   138dc:	subs	r4, r4, #1
   138e0:	str	r9, [sp, #40]	; 0x28
   138e4:	rsb	r9, r1, #32
   138e8:	ldr	sl, [sp, #40]	; 0x28
   138ec:	orr	r5, r5, fp, lsr r9
   138f0:	ldr	fp, [sp, #44]	; 0x2c
   138f4:	sbc	r5, r5, #0
   138f8:	tst	r0, #1
   138fc:	lsr	r1, r2, r1
   13900:	rsb	fp, fp, sl, asr #2
   13904:	ldr	sl, [sp, #36]	; 0x24
   13908:	orr	r1, r1, r3, lsl r9
   1390c:	and	r5, r5, r3
   13910:	orr	r8, r1, r3, lsr r8
   13914:	and	r4, r4, r2
   13918:	ldrb	r0, [sl, fp]
   1391c:	add	r3, lr, #1
   13920:	strb	r0, [lr]
   13924:	bne	139e8 <__assert_fail@plt+0x2208>
   13928:	orrs	fp, r4, r5
   1392c:	mov	r2, #0
   13930:	strb	r2, [r3]
   13934:	beq	13a1c <__assert_fail@plt+0x223c>
   13938:	sub	lr, ip, #20
   1393c:	sub	ip, ip, #52	; 0x34
   13940:	rsb	r3, lr, #32
   13944:	lsr	r0, r4, lr
   13948:	orr	r0, r0, r5, lsl r3
   1394c:	lsr	r1, r5, lr
   13950:	orr	r0, r0, r5, lsr ip
   13954:	mov	r2, #100	; 0x64
   13958:	adds	r0, r0, #50	; 0x32
   1395c:	mov	r3, #0
   13960:	adc	r1, r1, #0
   13964:	bl	166c0 <__assert_fail@plt+0x4ee0>
   13968:	mov	r4, r0
   1396c:	mov	r5, r1
   13970:	cmp	r5, #0
   13974:	cmpeq	r4, #10
   13978:	addeq	r8, r8, #1
   1397c:	beq	13a1c <__assert_fail@plt+0x223c>
   13980:	orrs	r2, r4, r5
   13984:	beq	13a1c <__assert_fail@plt+0x223c>
   13988:	bl	1172c <localeconv@plt>
   1398c:	cmp	r0, #0
   13990:	beq	13a68 <__assert_fail@plt+0x2288>
   13994:	ldr	r3, [r0]
   13998:	cmp	r3, #0
   1399c:	beq	13a78 <__assert_fail@plt+0x2298>
   139a0:	ldrsb	r2, [r3]
   139a4:	cmp	r2, #0
   139a8:	ldreq	r3, [pc, #224]	; 13a90 <__assert_fail@plt+0x22b0>
   139ac:	addeq	r3, pc, r3
   139b0:	add	r9, sp, #60	; 0x3c
   139b4:	ldr	ip, [pc, #216]	; 13a94 <__assert_fail@plt+0x22b4>
   139b8:	mov	r1, #32
   139bc:	str	r3, [sp, #8]
   139c0:	add	ip, pc, ip
   139c4:	str	r8, [sp, #4]
   139c8:	mov	r0, r9
   139cc:	strd	r4, [sp, #16]
   139d0:	mov	r3, r1
   139d4:	str	r7, [sp, #24]
   139d8:	mov	r2, #1
   139dc:	str	ip, [sp]
   139e0:	bl	117c8 <__snprintf_chk@plt>
   139e4:	b	13a48 <__assert_fail@plt+0x2268>
   139e8:	cmp	r0, #66	; 0x42
   139ec:	addne	r3, lr, #3
   139f0:	movne	r1, #105	; 0x69
   139f4:	movne	r2, #66	; 0x42
   139f8:	strbne	r1, [lr, #1]
   139fc:	strbne	r2, [lr, #2]
   13a00:	b	13928 <__assert_fail@plt+0x2148>
   13a04:	subs	r1, ip, #10
   13a08:	strbeq	r1, [lr, #1]
   13a0c:	moveq	r3, #66	; 0x42
   13a10:	moveq	r8, r2
   13a14:	strbeq	r3, [lr]
   13a18:	bne	138ac <__assert_fail@plt+0x20cc>
   13a1c:	ldr	r3, [pc, #116]	; 13a98 <__assert_fail@plt+0x22b8>
   13a20:	add	r9, sp, #60	; 0x3c
   13a24:	mov	r1, #32
   13a28:	str	r8, [sp, #4]
   13a2c:	add	r3, pc, r3
   13a30:	str	r7, [sp, #8]
   13a34:	str	r3, [sp]
   13a38:	mov	r0, r9
   13a3c:	mov	r3, r1
   13a40:	mov	r2, #1
   13a44:	bl	117c8 <__snprintf_chk@plt>
   13a48:	mov	r0, r9
   13a4c:	bl	11678 <__strdup@plt>
   13a50:	ldr	r2, [sp, #92]	; 0x5c
   13a54:	ldr	r3, [r6]
   13a58:	cmp	r2, r3
   13a5c:	bne	13a74 <__assert_fail@plt+0x2294>
   13a60:	add	sp, sp, #100	; 0x64
   13a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a68:	ldr	r3, [pc, #44]	; 13a9c <__assert_fail@plt+0x22bc>
   13a6c:	add	r3, pc, r3
   13a70:	b	139b0 <__assert_fail@plt+0x21d0>
   13a74:	bl	114ec <__stack_chk_fail@plt>
   13a78:	ldr	r3, [pc, #32]	; 13aa0 <__assert_fail@plt+0x22c0>
   13a7c:	add	r3, pc, r3
   13a80:	b	139b0 <__assert_fail@plt+0x21d0>
   13a84:			; <UNDEFINED> instruction: 0x000147b4
   13a88:	andeq	r0, r0, r0, asr r1
   13a8c:	andeq	r3, r0, r8, ror pc
   13a90:	andeq	r3, r0, r8, lsl #29
   13a94:	andeq	r3, r0, r0, lsl #29
   13a98:	andeq	r3, r0, r0, lsr #28
   13a9c:	andeq	r3, r0, r8, asr #27
   13aa0:			; <UNDEFINED> instruction: 0x00003db8
   13aa4:	cmp	r0, #0
   13aa8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13aac:	mov	r8, r1
   13ab0:	mov	sl, r2
   13ab4:	mov	r9, r3
   13ab8:	beq	13b74 <__assert_fail@plt+0x2394>
   13abc:	ldrb	r5, [r0]
   13ac0:	cmp	r5, #0
   13ac4:	beq	13b74 <__assert_fail@plt+0x2394>
   13ac8:	cmp	r2, #0
   13acc:	cmpne	r1, #0
   13ad0:	movne	ip, #0
   13ad4:	moveq	ip, #1
   13ad8:	beq	13b74 <__assert_fail@plt+0x2394>
   13adc:	cmp	r3, #0
   13ae0:	movne	r4, r0
   13ae4:	movne	r6, ip
   13ae8:	bne	13afc <__assert_fail@plt+0x231c>
   13aec:	b	13b74 <__assert_fail@plt+0x2394>
   13af0:	ldrb	r5, [r4, #1]!
   13af4:	cmp	r5, #0
   13af8:	beq	13b6c <__assert_fail@plt+0x238c>
   13afc:	cmp	sl, r6
   13b00:	bls	13b7c <__assert_fail@plt+0x239c>
   13b04:	cmp	ip, #0
   13b08:	ldrsb	r7, [r4, #1]
   13b0c:	moveq	ip, r4
   13b10:	cmp	r5, #44	; 0x2c
   13b14:	mov	r0, ip
   13b18:	moveq	r5, r4
   13b1c:	movne	r5, #0
   13b20:	cmp	r7, #0
   13b24:	addeq	r5, r4, #1
   13b28:	cmp	r5, #0
   13b2c:	rsb	r1, ip, r5
   13b30:	beq	13b64 <__assert_fail@plt+0x2384>
   13b34:	cmp	ip, r5
   13b38:	bcs	13b74 <__assert_fail@plt+0x2394>
   13b3c:	blx	r9
   13b40:	mov	ip, #0
   13b44:	add	r3, r6, #1
   13b48:	cmn	r0, #1
   13b4c:	beq	13b74 <__assert_fail@plt+0x2394>
   13b50:	str	r0, [r8, r6, lsl #2]
   13b54:	mov	r6, r3
   13b58:	ldrsb	r2, [r5]
   13b5c:	cmp	r2, ip
   13b60:	beq	13b84 <__assert_fail@plt+0x23a4>
   13b64:	cmn	r4, #1
   13b68:	bne	13af0 <__assert_fail@plt+0x2310>
   13b6c:	mov	r0, r6
   13b70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b74:	mvn	r0, #0
   13b78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b7c:	mvn	r0, #1
   13b80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b84:	mov	r6, r3
   13b88:	b	13b6c <__assert_fail@plt+0x238c>
   13b8c:	cmp	r0, #0
   13b90:	push	{r4, lr}
   13b94:	mov	r4, r3
   13b98:	beq	13c10 <__assert_fail@plt+0x2430>
   13b9c:	ldrb	ip, [r0]
   13ba0:	cmp	ip, #0
   13ba4:	beq	13c10 <__assert_fail@plt+0x2430>
   13ba8:	cmp	r3, #0
   13bac:	beq	13c10 <__assert_fail@plt+0x2430>
   13bb0:	ldr	r3, [r3]
   13bb4:	cmp	r3, #0
   13bb8:	blt	13c10 <__assert_fail@plt+0x2430>
   13bbc:	cmp	r3, r2
   13bc0:	bhi	13c10 <__assert_fail@plt+0x2430>
   13bc4:	cmp	ip, #43	; 0x2b
   13bc8:	lsleq	ip, r3, #2
   13bcc:	addeq	r0, r0, #1
   13bd0:	movne	ip, #0
   13bd4:	strne	ip, [r4]
   13bd8:	movne	r3, ip
   13bdc:	add	r1, r1, ip
   13be0:	rsb	r2, r3, r2
   13be4:	ldr	r3, [sp, #8]
   13be8:	bl	13aa4 <__assert_fail@plt+0x22c4>
   13bec:	subs	r3, r0, #0
   13bf0:	ble	13c08 <__assert_fail@plt+0x2428>
   13bf4:	ldr	r2, [r4]
   13bf8:	mov	r0, r3
   13bfc:	add	r3, r2, r3
   13c00:	str	r3, [r4]
   13c04:	pop	{r4, pc}
   13c08:	mov	r0, r3
   13c0c:	pop	{r4, pc}
   13c10:	mvn	r0, #0
   13c14:	pop	{r4, pc}
   13c18:	cmp	r2, #0
   13c1c:	cmpne	r0, #0
   13c20:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13c24:	mov	r4, r0
   13c28:	mov	r7, r2
   13c2c:	movne	r3, #0
   13c30:	moveq	r3, #1
   13c34:	mov	r9, r1
   13c38:	beq	13cd4 <__assert_fail@plt+0x24f4>
   13c3c:	cmp	r1, #0
   13c40:	beq	13cd4 <__assert_fail@plt+0x24f4>
   13c44:	mov	r6, r0
   13c48:	mov	r8, #1
   13c4c:	ldrb	r5, [r6], #1
   13c50:	cmp	r5, #0
   13c54:	beq	13cc4 <__assert_fail@plt+0x24e4>
   13c58:	cmp	r5, #44	; 0x2c
   13c5c:	ldrsb	r0, [r4, #1]
   13c60:	moveq	r5, r4
   13c64:	movne	r5, #0
   13c68:	cmp	r3, #0
   13c6c:	moveq	r3, r4
   13c70:	cmp	r0, #0
   13c74:	mov	r0, r3
   13c78:	moveq	r5, r6
   13c7c:	cmp	r5, #0
   13c80:	rsb	r1, r3, r5
   13c84:	beq	13cbc <__assert_fail@plt+0x24dc>
   13c88:	cmp	r3, r5
   13c8c:	bcs	13ccc <__assert_fail@plt+0x24ec>
   13c90:	blx	r7
   13c94:	mov	r3, #0
   13c98:	cmp	r0, #0
   13c9c:	and	r2, r0, #7
   13ca0:	poplt	{r3, r4, r5, r6, r7, r8, r9, pc}
   13ca4:	ldrb	r1, [r9, r0, asr #3]
   13ca8:	orr	r2, r1, r8, lsl r2
   13cac:	strb	r2, [r9, r0, asr #3]
   13cb0:	ldrsb	r2, [r5]
   13cb4:	cmp	r2, r3
   13cb8:	beq	13cc4 <__assert_fail@plt+0x24e4>
   13cbc:	adds	r4, r4, #1
   13cc0:	bne	13c4c <__assert_fail@plt+0x246c>
   13cc4:	mov	r0, #0
   13cc8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13ccc:	mvn	r0, #0
   13cd0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13cd4:	mvn	r0, #21
   13cd8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13cdc:	cmp	r2, #0
   13ce0:	cmpne	r0, #0
   13ce4:	push	{r4, r5, r6, r7, r8, lr}
   13ce8:	movne	r3, #0
   13cec:	moveq	r3, #1
   13cf0:	mov	r4, r0
   13cf4:	mov	r8, r2
   13cf8:	mov	r7, r1
   13cfc:	beq	13d90 <__assert_fail@plt+0x25b0>
   13d00:	cmp	r1, #0
   13d04:	beq	13d90 <__assert_fail@plt+0x25b0>
   13d08:	mov	r6, r0
   13d0c:	ldrb	r5, [r6], #1
   13d10:	cmp	r5, #0
   13d14:	beq	13d80 <__assert_fail@plt+0x25a0>
   13d18:	cmp	r5, #44	; 0x2c
   13d1c:	ldrsb	r0, [r4, #1]
   13d20:	moveq	r5, r4
   13d24:	movne	r5, #0
   13d28:	cmp	r3, #0
   13d2c:	moveq	r3, r4
   13d30:	cmp	r0, #0
   13d34:	mov	r0, r3
   13d38:	moveq	r5, r6
   13d3c:	cmp	r5, #0
   13d40:	rsb	r1, r3, r5
   13d44:	beq	13d78 <__assert_fail@plt+0x2598>
   13d48:	cmp	r3, r5
   13d4c:	bcs	13d88 <__assert_fail@plt+0x25a8>
   13d50:	blx	r8
   13d54:	mov	r3, #0
   13d58:	cmp	r0, #0
   13d5c:	poplt	{r4, r5, r6, r7, r8, pc}
   13d60:	ldr	r2, [r7]
   13d64:	orr	r0, r2, r0
   13d68:	str	r0, [r7]
   13d6c:	ldrsb	r2, [r5]
   13d70:	cmp	r2, r3
   13d74:	beq	13d80 <__assert_fail@plt+0x25a0>
   13d78:	adds	r4, r4, #1
   13d7c:	bne	13d0c <__assert_fail@plt+0x252c>
   13d80:	mov	r0, #0
   13d84:	pop	{r4, r5, r6, r7, r8, pc}
   13d88:	mvn	r0, #0
   13d8c:	pop	{r4, r5, r6, r7, r8, pc}
   13d90:	mvn	r0, #21
   13d94:	pop	{r4, r5, r6, r7, r8, pc}
   13d98:	ldr	ip, [pc, #380]	; 13f1c <__assert_fail@plt+0x273c>
   13d9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13da0:	subs	r4, r0, #0
   13da4:	ldr	r0, [pc, #372]	; 13f20 <__assert_fail@plt+0x2740>
   13da8:	add	ip, pc, ip
   13dac:	mov	r6, r2
   13db0:	sub	sp, sp, #12
   13db4:	mov	r2, ip
   13db8:	mov	r8, #0
   13dbc:	ldr	r7, [ip, r0]
   13dc0:	mov	r9, r1
   13dc4:	str	r8, [sp]
   13dc8:	ldr	r2, [r7]
   13dcc:	str	r2, [sp, #4]
   13dd0:	beq	13e40 <__assert_fail@plt+0x2660>
   13dd4:	str	r3, [r1]
   13dd8:	str	r3, [r6]
   13ddc:	bl	11630 <__errno_location@plt>
   13de0:	str	r8, [r0]
   13de4:	mov	r5, r0
   13de8:	ldrsb	r3, [r4]
   13dec:	cmp	r3, #58	; 0x3a
   13df0:	beq	13e5c <__assert_fail@plt+0x267c>
   13df4:	mov	r0, r4
   13df8:	mov	r2, #10
   13dfc:	mov	r1, sp
   13e00:	bl	1145c <strtol@plt>
   13e04:	str	r0, [r9]
   13e08:	str	r0, [r6]
   13e0c:	ldr	r0, [r5]
   13e10:	cmp	r0, #0
   13e14:	bne	13f10 <__assert_fail@plt+0x2730>
   13e18:	ldr	r3, [sp]
   13e1c:	cmp	r3, #0
   13e20:	beq	13f10 <__assert_fail@plt+0x2730>
   13e24:	cmp	r4, r3
   13e28:	beq	13f10 <__assert_fail@plt+0x2730>
   13e2c:	ldrsb	r2, [r3]
   13e30:	cmp	r2, #58	; 0x3a
   13e34:	beq	13ea8 <__assert_fail@plt+0x26c8>
   13e38:	cmp	r2, #45	; 0x2d
   13e3c:	beq	13eb8 <__assert_fail@plt+0x26d8>
   13e40:	mov	r0, #0
   13e44:	ldr	r2, [sp, #4]
   13e48:	ldr	r3, [r7]
   13e4c:	cmp	r2, r3
   13e50:	bne	13f18 <__assert_fail@plt+0x2738>
   13e54:	add	sp, sp, #12
   13e58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13e5c:	add	r4, r4, #1
   13e60:	mov	r1, sp
   13e64:	mov	r2, #10
   13e68:	mov	r0, r4
   13e6c:	bl	1145c <strtol@plt>
   13e70:	str	r0, [r6]
   13e74:	ldr	r3, [r5]
   13e78:	cmp	r3, #0
   13e7c:	bne	13f10 <__assert_fail@plt+0x2730>
   13e80:	ldr	r3, [sp]
   13e84:	cmp	r3, #0
   13e88:	beq	13f10 <__assert_fail@plt+0x2730>
   13e8c:	ldrsb	r2, [r3]
   13e90:	cmp	r2, #0
   13e94:	bne	13f10 <__assert_fail@plt+0x2730>
   13e98:	cmp	r4, r3
   13e9c:	movne	r0, #0
   13ea0:	mvneq	r0, #0
   13ea4:	b	13e44 <__assert_fail@plt+0x2664>
   13ea8:	ldrsb	r2, [r3, #1]
   13eac:	cmp	r2, #0
   13eb0:	streq	r0, [r6]
   13eb4:	beq	13e44 <__assert_fail@plt+0x2664>
   13eb8:	add	r4, r3, #1
   13ebc:	mov	ip, #0
   13ec0:	mov	r1, sp
   13ec4:	mov	r2, #10
   13ec8:	mov	r0, r4
   13ecc:	str	ip, [r5]
   13ed0:	str	ip, [sp]
   13ed4:	bl	1145c <strtol@plt>
   13ed8:	str	r0, [r6]
   13edc:	ldr	r3, [r5]
   13ee0:	cmp	r3, #0
   13ee4:	bne	13f10 <__assert_fail@plt+0x2730>
   13ee8:	ldr	r2, [sp]
   13eec:	cmp	r2, #0
   13ef0:	beq	13f10 <__assert_fail@plt+0x2730>
   13ef4:	ldrsb	r3, [r2]
   13ef8:	cmp	r3, #0
   13efc:	bne	13f10 <__assert_fail@plt+0x2730>
   13f00:	cmp	r4, r2
   13f04:	movne	r0, #0
   13f08:	mvneq	r0, #0
   13f0c:	b	13e44 <__assert_fail@plt+0x2664>
   13f10:	mvn	r0, #0
   13f14:	b	13e44 <__assert_fail@plt+0x2664>
   13f18:	bl	114ec <__stack_chk_fail@plt>
   13f1c:	andeq	r4, r1, r0, asr r2
   13f20:	andeq	r0, r0, r0, asr r1
   13f24:	rsbs	r2, r0, #1
   13f28:	push	{r4, r5, r6, lr}
   13f2c:	movcc	r2, #0
   13f30:	rsbs	r3, r1, #1
   13f34:	mov	r5, r0
   13f38:	mov	r4, r1
   13f3c:	movcc	r3, #0
   13f40:	ands	ip, r2, r3
   13f44:	bne	13fb0 <__assert_fail@plt+0x27d0>
   13f48:	orrs	r3, r2, r3
   13f4c:	bne	13fb8 <__assert_fail@plt+0x27d8>
   13f50:	bl	11444 <strcmp@plt>
   13f54:	cmp	r0, #0
   13f58:	beq	13fb0 <__assert_fail@plt+0x27d0>
   13f5c:	mov	r0, r5
   13f60:	bl	1160c <strlen@plt>
   13f64:	mov	r6, r0
   13f68:	mov	r0, r4
   13f6c:	bl	1160c <strlen@plt>
   13f70:	cmp	r6, #0
   13f74:	beq	13f88 <__assert_fail@plt+0x27a8>
   13f78:	sub	r3, r6, #1
   13f7c:	ldrsb	r2, [r5, r3]
   13f80:	cmp	r2, #47	; 0x2f
   13f84:	moveq	r6, r3
   13f88:	cmp	r0, #0
   13f8c:	beq	13fa0 <__assert_fail@plt+0x27c0>
   13f90:	sub	r3, r0, #1
   13f94:	ldrsb	r2, [r4, r3]
   13f98:	cmp	r2, #47	; 0x2f
   13f9c:	moveq	r0, r3
   13fa0:	cmp	r6, r0
   13fa4:	beq	13fc0 <__assert_fail@plt+0x27e0>
   13fa8:	mov	r0, #0
   13fac:	pop	{r4, r5, r6, pc}
   13fb0:	mov	r0, #1
   13fb4:	pop	{r4, r5, r6, pc}
   13fb8:	mov	r0, ip
   13fbc:	pop	{r4, r5, r6, pc}
   13fc0:	mov	r0, r5
   13fc4:	mov	r1, r4
   13fc8:	mov	r2, r6
   13fcc:	bl	117a4 <strncmp@plt>
   13fd0:	rsbs	r0, r0, #1
   13fd4:	movcc	r0, #0
   13fd8:	pop	{r4, r5, r6, pc}
   13fdc:	ldr	r3, [pc, #248]	; 140dc <__assert_fail@plt+0x28fc>
   13fe0:	cmp	r0, #0
   13fe4:	cmpne	r1, #0
   13fe8:	ldr	r2, [pc, #240]	; 140e0 <__assert_fail@plt+0x2900>
   13fec:	add	r3, pc, r3
   13ff0:	push	{r4, r5, r6, r7, r8, r9, lr}
   13ff4:	sub	sp, sp, #20
   13ff8:	ldr	r9, [r3, r2]
   13ffc:	mov	r6, r1
   14000:	addne	r8, sp, #4
   14004:	addne	r7, sp, #8
   14008:	ldr	r3, [r9]
   1400c:	str	r3, [sp, #12]
   14010:	bne	14058 <__assert_fail@plt+0x2878>
   14014:	b	140d0 <__assert_fail@plt+0x28f0>
   14018:	cmp	r4, r3
   1401c:	bne	140d0 <__assert_fail@plt+0x28f0>
   14020:	mov	r0, r5
   14024:	mov	r1, r6
   14028:	mov	r2, r4
   1402c:	bl	117a4 <strncmp@plt>
   14030:	cmp	r0, #0
   14034:	bne	140d0 <__assert_fail@plt+0x28f0>
   14038:	adds	r6, r6, r4
   1403c:	moveq	r3, #0
   14040:	movne	r3, #1
   14044:	adds	r0, r5, r4
   14048:	moveq	r3, #0
   1404c:	andne	r3, r3, #1
   14050:	cmp	r3, #0
   14054:	beq	140d0 <__assert_fail@plt+0x28f0>
   14058:	mov	r1, r8
   1405c:	bl	12b18 <__assert_fail@plt+0x1338>
   14060:	mov	r1, r7
   14064:	mov	r5, r0
   14068:	mov	r0, r6
   1406c:	bl	12b18 <__assert_fail@plt+0x1338>
   14070:	ldr	r4, [sp, #4]
   14074:	ldr	r3, [sp, #8]
   14078:	mov	r6, r0
   1407c:	adds	r0, r3, r4
   14080:	beq	140b4 <__assert_fail@plt+0x28d4>
   14084:	cmp	r0, #1
   14088:	bne	14018 <__assert_fail@plt+0x2838>
   1408c:	cmp	r5, #0
   14090:	beq	140a0 <__assert_fail@plt+0x28c0>
   14094:	ldrsb	r2, [r5]
   14098:	cmp	r2, #47	; 0x2f
   1409c:	beq	140b8 <__assert_fail@plt+0x28d8>
   140a0:	cmp	r6, #0
   140a4:	beq	14018 <__assert_fail@plt+0x2838>
   140a8:	ldrsb	r2, [r6]
   140ac:	cmp	r2, #47	; 0x2f
   140b0:	bne	14018 <__assert_fail@plt+0x2838>
   140b4:	mov	r0, #1
   140b8:	ldr	r2, [sp, #12]
   140bc:	ldr	r3, [r9]
   140c0:	cmp	r2, r3
   140c4:	bne	140d8 <__assert_fail@plt+0x28f8>
   140c8:	add	sp, sp, #20
   140cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   140d0:	mov	r0, #0
   140d4:	b	140b8 <__assert_fail@plt+0x28d8>
   140d8:	bl	114ec <__stack_chk_fail@plt>
   140dc:	andeq	r4, r1, ip
   140e0:	andeq	r0, r0, r0, asr r1
   140e4:	rsbs	r3, r0, #1
   140e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   140ec:	movcc	r3, #0
   140f0:	rsbs	r4, r1, #1
   140f4:	mov	r7, r1
   140f8:	mov	r6, r2
   140fc:	mov	sl, r0
   14100:	movcc	r4, #0
   14104:	tst	r3, r4
   14108:	bne	1416c <__assert_fail@plt+0x298c>
   1410c:	cmp	r3, #0
   14110:	bne	14184 <__assert_fail@plt+0x29a4>
   14114:	cmp	r4, #0
   14118:	bne	14194 <__assert_fail@plt+0x29b4>
   1411c:	bl	1160c <strlen@plt>
   14120:	mvn	r3, r0
   14124:	cmp	r6, r3
   14128:	mov	r5, r0
   1412c:	bhi	1417c <__assert_fail@plt+0x299c>
   14130:	add	r9, r0, r6
   14134:	add	r0, r9, #1
   14138:	bl	11594 <malloc@plt>
   1413c:	subs	r8, r0, #0
   14140:	beq	1419c <__assert_fail@plt+0x29bc>
   14144:	mov	r1, sl
   14148:	mov	r2, r5
   1414c:	bl	114bc <memcpy@plt>
   14150:	add	r0, r8, r5
   14154:	mov	r1, r7
   14158:	mov	r2, r6
   1415c:	bl	114bc <memcpy@plt>
   14160:	strb	r4, [r8, r9]
   14164:	mov	r0, r8
   14168:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1416c:	mov	r0, #1
   14170:	mov	r1, r0
   14174:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14178:	b	1142c <calloc@plt>
   1417c:	mov	r0, r4
   14180:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14184:	mov	r0, r1
   14188:	mov	r1, r2
   1418c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14190:	b	11504 <__strndup@plt>
   14194:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14198:	b	11678 <__strdup@plt>
   1419c:	mov	r0, r8
   141a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141a4:	push	{r3, r4, r5, lr}
   141a8:	subs	r4, r1, #0
   141ac:	mov	r5, r0
   141b0:	beq	141d0 <__assert_fail@plt+0x29f0>
   141b4:	mov	r0, r4
   141b8:	bl	1160c <strlen@plt>
   141bc:	mov	r1, r4
   141c0:	mov	r2, r0
   141c4:	mov	r0, r5
   141c8:	pop	{r3, r4, r5, lr}
   141cc:	b	140e4 <__assert_fail@plt+0x2904>
   141d0:	mov	r2, r4
   141d4:	mov	r0, r5
   141d8:	mov	r1, r4
   141dc:	pop	{r3, r4, r5, lr}
   141e0:	b	140e4 <__assert_fail@plt+0x2904>
   141e4:	push	{r1, r2, r3}
   141e8:	mov	r1, #1
   141ec:	push	{r4, r5, lr}
   141f0:	sub	sp, sp, #16
   141f4:	ldr	lr, [pc, #124]	; 14278 <__assert_fail@plt+0x2a98>
   141f8:	add	ip, sp, #32
   141fc:	ldr	r4, [pc, #120]	; 1427c <__assert_fail@plt+0x2a9c>
   14200:	mov	r5, r0
   14204:	add	lr, pc, lr
   14208:	mov	r3, ip
   1420c:	ldr	r2, [sp, #28]
   14210:	add	r0, sp, #8
   14214:	ldr	r4, [lr, r4]
   14218:	str	ip, [sp, #4]
   1421c:	ldr	ip, [r4]
   14220:	str	ip, [sp, #12]
   14224:	bl	1166c <__vasprintf_chk@plt>
   14228:	subs	r2, r0, #0
   1422c:	blt	1426c <__assert_fail@plt+0x2a8c>
   14230:	mov	r0, r5
   14234:	ldr	r1, [sp, #8]
   14238:	bl	140e4 <__assert_fail@plt+0x2904>
   1423c:	mov	r5, r0
   14240:	ldr	r0, [sp, #8]
   14244:	bl	11480 <free@plt>
   14248:	mov	r0, r5
   1424c:	ldr	r2, [sp, #12]
   14250:	ldr	r3, [r4]
   14254:	cmp	r2, r3
   14258:	bne	14274 <__assert_fail@plt+0x2a94>
   1425c:	add	sp, sp, #16
   14260:	pop	{r4, r5, lr}
   14264:	add	sp, sp, #12
   14268:	bx	lr
   1426c:	mov	r0, #0
   14270:	b	1424c <__assert_fail@plt+0x2a6c>
   14274:	bl	114ec <__stack_chk_fail@plt>
   14278:	strdeq	r3, [r1], -r4
   1427c:	andeq	r0, r0, r0, asr r1
   14280:	ldr	ip, [pc, #372]	; 143fc <__assert_fail@plt+0x2c1c>
   14284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14288:	mov	r6, r0
   1428c:	ldr	r0, [pc, #364]	; 14400 <__assert_fail@plt+0x2c20>
   14290:	add	ip, pc, ip
   14294:	ldr	r4, [r6]
   14298:	mov	r9, r3
   1429c:	sub	sp, sp, #12
   142a0:	mov	r7, r1
   142a4:	ldr	r5, [ip, r0]
   142a8:	mov	r8, r2
   142ac:	ldrsb	ip, [r4]
   142b0:	ldr	r3, [r5]
   142b4:	cmp	ip, #0
   142b8:	moveq	r0, ip
   142bc:	str	r3, [sp, #4]
   142c0:	beq	14370 <__assert_fail@plt+0x2b90>
   142c4:	mov	r0, r4
   142c8:	mov	r1, r2
   142cc:	bl	117d4 <strspn@plt>
   142d0:	ldrb	sl, [r4, r0]
   142d4:	add	r4, r4, r0
   142d8:	cmp	sl, #0
   142dc:	beq	143ec <__assert_fail@plt+0x2c0c>
   142e0:	cmp	r9, #0
   142e4:	beq	14388 <__assert_fail@plt+0x2ba8>
   142e8:	sxtb	r9, sl
   142ec:	ldr	r0, [pc, #272]	; 14404 <__assert_fail@plt+0x2c24>
   142f0:	mov	r1, r9
   142f4:	add	r0, pc, r0
   142f8:	bl	11618 <strchr@plt>
   142fc:	cmp	r0, #0
   14300:	beq	143ac <__assert_fail@plt+0x2bcc>
   14304:	add	fp, r4, #1
   14308:	mov	r1, sp
   1430c:	mov	r3, #0
   14310:	strb	sl, [sp]
   14314:	mov	r0, fp
   14318:	strb	r3, [sp, #1]
   1431c:	bl	12bb8 <__assert_fail@plt+0x13d8>
   14320:	add	r3, r4, r0
   14324:	str	r0, [r7]
   14328:	ldrb	r3, [r3, #1]
   1432c:	cmp	r3, #0
   14330:	beq	143ec <__assert_fail@plt+0x2c0c>
   14334:	sxtb	r3, r3
   14338:	cmp	r9, r3
   1433c:	bne	143ec <__assert_fail@plt+0x2c0c>
   14340:	add	r0, r0, #2
   14344:	add	r7, r4, r0
   14348:	ldrb	r1, [r4, r0]
   1434c:	cmp	r1, #0
   14350:	beq	14368 <__assert_fail@plt+0x2b88>
   14354:	mov	r0, r8
   14358:	sxtb	r1, r1
   1435c:	bl	11618 <strchr@plt>
   14360:	cmp	r0, #0
   14364:	beq	143ec <__assert_fail@plt+0x2c0c>
   14368:	mov	r0, fp
   1436c:	str	r7, [r6]
   14370:	ldr	r2, [sp, #4]
   14374:	ldr	r3, [r5]
   14378:	cmp	r2, r3
   1437c:	bne	143f8 <__assert_fail@plt+0x2c18>
   14380:	add	sp, sp, #12
   14384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14388:	mov	r0, r4
   1438c:	mov	r1, r8
   14390:	bl	11468 <strcspn@plt>
   14394:	mov	r3, r0
   14398:	mov	r0, r4
   1439c:	add	r4, r4, r3
   143a0:	str	r3, [r7]
   143a4:	str	r4, [r6]
   143a8:	b	14370 <__assert_fail@plt+0x2b90>
   143ac:	mov	r1, r8
   143b0:	mov	r0, r4
   143b4:	bl	12bb8 <__assert_fail@plt+0x13d8>
   143b8:	str	r0, [r7]
   143bc:	add	r7, r4, r0
   143c0:	ldrb	r1, [r4, r0]
   143c4:	cmp	r1, #0
   143c8:	beq	143e0 <__assert_fail@plt+0x2c00>
   143cc:	mov	r0, r8
   143d0:	sxtb	r1, r1
   143d4:	bl	11618 <strchr@plt>
   143d8:	cmp	r0, #0
   143dc:	beq	143a4 <__assert_fail@plt+0x2bc4>
   143e0:	str	r7, [r6]
   143e4:	mov	r0, r4
   143e8:	b	14370 <__assert_fail@plt+0x2b90>
   143ec:	str	r4, [r6]
   143f0:	mov	r0, #0
   143f4:	b	14370 <__assert_fail@plt+0x2b90>
   143f8:	bl	114ec <__stack_chk_fail@plt>
   143fc:	andeq	r3, r1, r8, ror #26
   14400:	andeq	r0, r0, r0, asr r1
   14404:	andeq	r3, r0, r0, ror #10
   14408:	push	{r4, lr}
   1440c:	mov	r4, r0
   14410:	b	1441c <__assert_fail@plt+0x2c3c>
   14414:	cmp	r0, #10
   14418:	beq	14434 <__assert_fail@plt+0x2c54>
   1441c:	mov	r0, r4
   14420:	bl	1169c <fgetc@plt>
   14424:	cmn	r0, #1
   14428:	bne	14414 <__assert_fail@plt+0x2c34>
   1442c:	mov	r0, #1
   14430:	pop	{r4, pc}
   14434:	mov	r0, #0
   14438:	pop	{r4, pc}
   1443c:	push	{r3, r4, r5, r6, r7, lr}
   14440:	mov	r4, r0
   14444:	ldr	r0, [r0, #40]	; 0x28
   14448:	mov	r7, r1
   1444c:	mov	r5, r2
   14450:	cmp	r0, #0
   14454:	beq	144c0 <__assert_fail@plt+0x2ce0>
   14458:	bl	1443c <__assert_fail@plt+0x2c5c>
   1445c:	subs	r7, r0, #0
   14460:	beq	144c0 <__assert_fail@plt+0x2ce0>
   14464:	ldr	r2, [r4, #40]	; 0x28
   14468:	add	r3, r4, #32
   1446c:	ldr	r2, [r2, #28]
   14470:	cmp	r2, r3
   14474:	beq	144d0 <__assert_fail@plt+0x2cf0>
   14478:	ldr	r3, [r4]
   1447c:	ldr	r3, [r3, #36]	; 0x24
   14480:	ldr	r6, [r3, #4]
   14484:	mov	r0, r6
   14488:	bl	1160c <strlen@plt>
   1448c:	mov	r4, r0
   14490:	ldr	r3, [r5]
   14494:	cmp	r3, r4
   14498:	bcc	144c8 <__assert_fail@plt+0x2ce8>
   1449c:	mov	r2, r4
   144a0:	mov	r1, r6
   144a4:	mov	r0, r7
   144a8:	bl	114bc <memcpy@plt>
   144ac:	ldr	r3, [r5]
   144b0:	add	r0, r7, r4
   144b4:	rsb	r4, r4, r3
   144b8:	str	r4, [r5]
   144bc:	pop	{r3, r4, r5, r6, r7, pc}
   144c0:	mov	r0, r7
   144c4:	pop	{r3, r4, r5, r6, r7, pc}
   144c8:	mov	r0, #0
   144cc:	pop	{r3, r4, r5, r6, r7, pc}
   144d0:	ldr	r6, [pc, #8]	; 144e0 <__assert_fail@plt+0x2d00>
   144d4:	mov	r4, #2
   144d8:	add	r6, pc, r6
   144dc:	b	14490 <__assert_fail@plt+0x2cb0>
   144e0:	andeq	r3, r0, r0, lsl #7
   144e4:	push	{r4, r5, r6, r7, r8, lr}
   144e8:	sub	sp, sp, #16
   144ec:	ldr	ip, [r0, #4]
   144f0:	mov	r4, r0
   144f4:	ldr	r7, [sp, #40]	; 0x28
   144f8:	mov	r8, r2
   144fc:	mov	r0, r3
   14500:	mov	r5, r3
   14504:	ldr	r6, [ip, r1, lsl #2]
   14508:	mov	r1, #0
   1450c:	mov	r2, r7
   14510:	bl	11684 <memset@plt>
   14514:	cmp	r6, #0
   14518:	beq	14620 <__assert_fail@plt+0x2e40>
   1451c:	ldr	r3, [r8]
   14520:	ands	r8, r3, #64	; 0x40
   14524:	beq	145c8 <__assert_fail@plt+0x2de8>
   14528:	ldr	r0, [r4, #40]	; 0x28
   1452c:	cmp	r0, #0
   14530:	beq	145a4 <__assert_fail@plt+0x2dc4>
   14534:	mov	r1, r5
   14538:	add	r2, sp, #40	; 0x28
   1453c:	bl	1443c <__assert_fail@plt+0x2c5c>
   14540:	subs	r8, r0, #0
   14544:	beq	14620 <__assert_fail@plt+0x2e40>
   14548:	ldr	r3, [r4, #40]	; 0x28
   1454c:	ldr	r2, [r4]
   14550:	cmp	r3, #0
   14554:	ldr	ip, [r2, #36]	; 0x24
   14558:	ldreq	r1, [sp, #40]	; 0x28
   1455c:	beq	145ac <__assert_fail@plt+0x2dcc>
   14560:	ldr	r3, [r3, #28]
   14564:	add	r4, r4, #32
   14568:	cmp	r3, r4
   1456c:	beq	145ec <__assert_fail@plt+0x2e0c>
   14570:	ldr	lr, [pc, #176]	; 14628 <__assert_fail@plt+0x2e48>
   14574:	mov	r2, #1
   14578:	ldr	r1, [sp, #40]	; 0x28
   1457c:	mvn	r3, #0
   14580:	add	lr, pc, lr
   14584:	str	lr, [sp]
   14588:	ldr	ip, [ip]
   1458c:	str	r6, [sp, #8]
   14590:	str	ip, [sp, #4]
   14594:	bl	117c8 <__snprintf_chk@plt>
   14598:	mov	r0, r5
   1459c:	add	sp, sp, #16
   145a0:	pop	{r4, r5, r6, r7, r8, pc}
   145a4:	mov	r1, r7
   145a8:	mov	r8, r5
   145ac:	ldr	r2, [pc, #120]	; 1462c <__assert_fail@plt+0x2e4c>
   145b0:	mov	r0, r8
   145b4:	mov	r3, r6
   145b8:	add	r2, pc, r2
   145bc:	bl	11654 <snprintf@plt>
   145c0:	mov	r0, r5
   145c4:	b	1459c <__assert_fail@plt+0x2dbc>
   145c8:	mov	r2, r7
   145cc:	mov	r1, r6
   145d0:	mov	r0, r5
   145d4:	add	r7, r5, r7
   145d8:	bl	11690 <strncpy@plt>
   145dc:	mov	r0, r5
   145e0:	strb	r8, [r7, #-1]
   145e4:	add	sp, sp, #16
   145e8:	pop	{r4, r5, r6, r7, r8, pc}
   145ec:	ldr	lr, [pc, #60]	; 14630 <__assert_fail@plt+0x2e50>
   145f0:	mov	r2, #1
   145f4:	ldr	r1, [sp, #40]	; 0x28
   145f8:	mvn	r3, #0
   145fc:	add	lr, pc, lr
   14600:	str	lr, [sp]
   14604:	ldr	ip, [ip, #8]
   14608:	str	r6, [sp, #8]
   1460c:	str	ip, [sp, #4]
   14610:	bl	117c8 <__snprintf_chk@plt>
   14614:	mov	r0, r5
   14618:	add	sp, sp, #16
   1461c:	pop	{r4, r5, r6, r7, r8, pc}
   14620:	mov	r0, #0
   14624:	b	1459c <__assert_fail@plt+0x2dbc>
   14628:	andeq	r3, r0, r4, asr #1
   1462c:	andeq	r2, r0, r0, lsl lr
   14630:	andeq	r3, r0, r8, asr #32
   14634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14638:	mov	r5, r0
   1463c:	ldr	fp, [r5, #28]!
   14640:	mov	sl, #0
   14644:	sub	sp, sp, #12
   14648:	mov	r4, r1
   1464c:	cmp	fp, r5
   14650:	mov	r6, r2
   14654:	mov	r7, r3
   14658:	str	sl, [r1, #8]
   1465c:	beq	14720 <__assert_fail@plt+0x2f40>
   14660:	add	r8, r1, #32
   14664:	mov	r9, sl
   14668:	b	146c4 <__assert_fail@plt+0x2ee4>
   1466c:	bl	15ac0 <__assert_fail@plt+0x42e0>
   14670:	cmn	r0, #1
   14674:	beq	146e4 <__assert_fail@plt+0x2f04>
   14678:	ldr	r3, [r4, #16]
   1467c:	cmp	r0, r3
   14680:	strhi	r0, [r4, #16]
   14684:	ldr	r3, [r4, #36]	; 0x24
   14688:	cmp	r3, #0
   1468c:	beq	1469c <__assert_fail@plt+0x2ebc>
   14690:	ldr	r3, [r4, #20]
   14694:	cmp	r0, r3, lsl #1
   14698:	bhi	146b8 <__assert_fail@plt+0x2ed8>
   1469c:	ldr	r3, [r4, #32]
   146a0:	tst	r3, #512	; 0x200
   146a4:	ldr	r3, [r4, #8]
   146a8:	addne	sl, sl, r0
   146ac:	addne	r9, r9, #1
   146b0:	cmp	r3, r0
   146b4:	strcc	r0, [r4, #8]
   146b8:	ldr	fp, [fp]
   146bc:	cmp	fp, r5
   146c0:	beq	146ec <__assert_fail@plt+0x2f0c>
   146c4:	ldr	r1, [r4, #4]
   146c8:	sub	r0, fp, #16
   146cc:	str	r7, [sp]
   146d0:	mov	r2, r8
   146d4:	mov	r3, r6
   146d8:	bl	144e4 <__assert_fail@plt+0x2d04>
   146dc:	cmp	r0, #0
   146e0:	bne	1466c <__assert_fail@plt+0x2e8c>
   146e4:	mov	r0, #0
   146e8:	b	14684 <__assert_fail@plt+0x2ea4>
   146ec:	cmp	r9, #0
   146f0:	beq	14720 <__assert_fail@plt+0x2f40>
   146f4:	ldr	r3, [r4, #20]
   146f8:	cmp	r3, #0
   146fc:	bne	14720 <__assert_fail@plt+0x2f40>
   14700:	mov	r0, sl
   14704:	mov	r1, r9
   14708:	bl	164b4 <__assert_fail@plt+0x4cd4>
   1470c:	ldr	r3, [r4, #16]
   14710:	cmp	r3, r0, lsl #1
   14714:	str	r0, [r4, #20]
   14718:	movhi	r3, #1
   1471c:	strhi	r3, [r4, #36]	; 0x24
   14720:	ldr	r0, [r4]
   14724:	cmp	r0, #0
   14728:	ldreq	r2, [r4, #12]
   1472c:	beq	1473c <__assert_fail@plt+0x2f5c>
   14730:	bl	15ac0 <__assert_fail@plt+0x42e0>
   14734:	mov	r2, r0
   14738:	str	r0, [r4, #12]
   1473c:	ldr	r3, [r4, #8]
   14740:	cmp	r2, r3
   14744:	bls	14758 <__assert_fail@plt+0x2f78>
   14748:	ldr	r1, [r4, #32]
   1474c:	tst	r1, #256	; 0x100
   14750:	streq	r2, [r4, #8]
   14754:	beq	14784 <__assert_fail@plt+0x2fa4>
   14758:	vmov.f64	d6, #112	; 0x3f800000  1.0
   1475c:	vldr	d7, [r4, #24]
   14760:	vcmpe.f64	d7, d6
   14764:	vmrs	APSR_nzcv, fpscr
   14768:	blt	14784 <__assert_fail@plt+0x2fa4>
   1476c:	vcvt.u32.f64	s13, d7
   14770:	vmov	r1, s13
   14774:	cmp	r3, r1
   14778:	bcs	14784 <__assert_fail@plt+0x2fa4>
   1477c:	cmp	r2, r1
   14780:	strcc	r1, [r4, #8]
   14784:	add	sp, sp, #12
   14788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1478c:	push	{r3, r4, r5, lr}
   14790:	mov	r1, #40	; 0x28
   14794:	mov	r5, r0
   14798:	mov	r0, #1
   1479c:	bl	1142c <calloc@plt>
   147a0:	subs	r4, r0, #0
   147a4:	beq	147e4 <__assert_fail@plt+0x3004>
   147a8:	tst	r5, #4
   147ac:	add	r2, r4, #28
   147b0:	add	r3, r4, #20
   147b4:	str	r5, [r4, #12]
   147b8:	str	r2, [r4, #28]
   147bc:	str	r2, [r4, #32]
   147c0:	str	r3, [r4, #20]
   147c4:	str	r3, [r4, #24]
   147c8:	beq	147ec <__assert_fail@plt+0x300c>
   147cc:	ldr	r3, [pc, #68]	; 14818 <__assert_fail@plt+0x3038>
   147d0:	add	r3, pc, r3
   147d4:	add	r3, r3, #12
   147d8:	str	r3, [r4, #36]	; 0x24
   147dc:	mov	r3, #1
   147e0:	str	r3, [r4, #16]
   147e4:	mov	r0, r4
   147e8:	pop	{r3, r4, r5, pc}
   147ec:	mov	r0, #14
   147f0:	bl	11708 <nl_langinfo@plt>
   147f4:	ldr	r1, [pc, #32]	; 1481c <__assert_fail@plt+0x303c>
   147f8:	add	r1, pc, r1
   147fc:	bl	11444 <strcmp@plt>
   14800:	cmp	r0, #0
   14804:	bne	147cc <__assert_fail@plt+0x2fec>
   14808:	ldr	r3, [pc, #16]	; 14820 <__assert_fail@plt+0x3040>
   1480c:	add	r3, pc, r3
   14810:	str	r3, [r4, #36]	; 0x24
   14814:	b	147dc <__assert_fail@plt+0x2ffc>
   14818:	strdeq	r3, [r1], -r8
   1481c:	andeq	r3, r0, r4, rrx
   14820:			; <UNDEFINED> instruction: 0x000136bc
   14824:	push	{r4, r5, r6, lr}
   14828:	subs	r5, r0, #0
   1482c:	popeq	{r4, r5, r6, pc}
   14830:	ldr	r4, [r5, #28]
   14834:	add	r6, r5, #28
   14838:	cmp	r6, r4
   1483c:	popeq	{r4, r5, r6, pc}
   14840:	ldm	r4, {r2, r3}
   14844:	ldr	r0, [r4, #-12]
   14848:	str	r3, [r2, #4]
   1484c:	str	r2, [r3]
   14850:	bl	11480 <free@plt>
   14854:	sub	r0, r4, #16
   14858:	bl	11480 <free@plt>
   1485c:	ldr	r4, [r5, #28]
   14860:	cmp	r4, r6
   14864:	bne	14840 <__assert_fail@plt+0x3060>
   14868:	pop	{r4, r5, r6, pc}
   1486c:	push	{r3, r4, r5, lr}
   14870:	subs	r4, r0, #0
   14874:	popeq	{r3, r4, r5, pc}
   14878:	bl	14824 <__assert_fail@plt+0x3044>
   1487c:	ldr	r3, [r4, #20]
   14880:	add	r5, r4, #20
   14884:	cmp	r5, r3
   14888:	beq	148b0 <__assert_fail@plt+0x30d0>
   1488c:	mov	r0, r3
   14890:	ldr	r3, [r3, #4]
   14894:	ldr	r2, [r0], #-40	; 0xffffffd8
   14898:	str	r3, [r2, #4]
   1489c:	str	r2, [r3]
   148a0:	bl	11480 <free@plt>
   148a4:	ldr	r3, [r4, #20]
   148a8:	cmp	r3, r5
   148ac:	bne	1488c <__assert_fail@plt+0x30ac>
   148b0:	mov	r0, r4
   148b4:	pop	{r3, r4, r5, lr}
   148b8:	b	11480 <free@plt>
   148bc:	push	{r4, r5, r6, lr}
   148c0:	vpush	{d8}
   148c4:	subs	r4, r0, #0
   148c8:	mov	r6, r1
   148cc:	vmov.f64	d8, d0
   148d0:	mov	r5, r2
   148d4:	beq	14944 <__assert_fail@plt+0x3164>
   148d8:	mov	r0, #1
   148dc:	mov	r1, #48	; 0x30
   148e0:	bl	1142c <calloc@plt>
   148e4:	subs	r3, r0, #0
   148e8:	beq	14944 <__assert_fail@plt+0x3164>
   148ec:	ldr	r2, [r4]
   148f0:	tst	r5, #64	; 0x40
   148f4:	str	r6, [r3]
   148f8:	vstr	d8, [r3, #24]
   148fc:	add	r1, r2, #1
   14900:	str	r5, [r3, #32]
   14904:	str	r1, [r4]
   14908:	mov	r0, r3
   1490c:	str	r2, [r3, #4]
   14910:	add	r4, r4, #20
   14914:	ldrne	r2, [r4, #-8]
   14918:	orrne	r2, r2, #64	; 0x40
   1491c:	strne	r2, [r4, #-8]
   14920:	add	r2, r3, #40	; 0x28
   14924:	str	r2, [r3, #44]	; 0x2c
   14928:	ldr	r1, [r4, #4]
   1492c:	str	r2, [r4, #4]
   14930:	str	r4, [r3, #40]	; 0x28
   14934:	str	r1, [r3, #44]	; 0x2c
   14938:	str	r2, [r1]
   1493c:	vpop	{d8}
   14940:	pop	{r4, r5, r6, pc}
   14944:	mov	r0, #0
   14948:	b	1493c <__assert_fail@plt+0x315c>
   1494c:	push	{r4, r5, r6, r7, r8, lr}
   14950:	subs	r5, r0, #0
   14954:	mov	r6, r1
   14958:	beq	14a04 <__assert_fail@plt+0x3224>
   1495c:	ldr	r7, [r5]
   14960:	cmp	r7, #0
   14964:	beq	14a04 <__assert_fail@plt+0x3224>
   14968:	mov	r0, #1
   1496c:	mov	r1, #44	; 0x2c
   14970:	bl	1142c <calloc@plt>
   14974:	cmp	r0, #0
   14978:	mov	r4, r0
   1497c:	mov	r8, r0
   14980:	beq	14a04 <__assert_fail@plt+0x3224>
   14984:	mov	r0, r7
   14988:	mov	r1, #4
   1498c:	bl	1142c <calloc@plt>
   14990:	cmp	r0, #0
   14994:	str	r0, [r4, #4]
   14998:	beq	14a08 <__assert_fail@plt+0x3228>
   1499c:	add	r2, r4, #16
   149a0:	add	r3, r4, #32
   149a4:	str	r2, [r4, #20]
   149a8:	add	r0, r4, #24
   149ac:	str	r3, [r4, #36]	; 0x24
   149b0:	cmp	r6, #0
   149b4:	str	r0, [r4, #28]
   149b8:	add	ip, r5, #28
   149bc:	ldr	r1, [r5, #32]
   149c0:	str	r5, [r4]
   149c4:	str	r6, [r4, #40]	; 0x28
   149c8:	str	r3, [r4, #32]
   149cc:	str	r0, [r4, #24]
   149d0:	str	r2, [r5, #32]
   149d4:	str	r1, [r4, #20]
   149d8:	str	ip, [r4, #16]
   149dc:	str	r2, [r1]
   149e0:	beq	14a18 <__assert_fail@plt+0x3238>
   149e4:	ldr	r2, [r6, #28]
   149e8:	add	r1, r6, #24
   149ec:	str	r3, [r6, #28]
   149f0:	mov	r0, r4
   149f4:	str	r1, [r4, #32]
   149f8:	str	r2, [r4, #36]	; 0x24
   149fc:	str	r3, [r2]
   14a00:	pop	{r4, r5, r6, r7, r8, pc}
   14a04:	mov	r8, #0
   14a08:	mov	r0, r8
   14a0c:	bl	11480 <free@plt>
   14a10:	mov	r0, #0
   14a14:	pop	{r4, r5, r6, r7, r8, pc}
   14a18:	mov	r0, r4
   14a1c:	pop	{r4, r5, r6, r7, r8, pc}
   14a20:	ldr	r3, [r0, #20]!
   14a24:	cmp	r3, r0
   14a28:	bne	14a3c <__assert_fail@plt+0x325c>
   14a2c:	b	14a50 <__assert_fail@plt+0x3270>
   14a30:	ldr	r3, [r3]
   14a34:	cmp	r3, r0
   14a38:	beq	14a50 <__assert_fail@plt+0x3270>
   14a3c:	ldr	r2, [r3, #-36]	; 0xffffffdc
   14a40:	cmp	r2, r1
   14a44:	bne	14a30 <__assert_fail@plt+0x3250>
   14a48:	sub	r0, r3, #40	; 0x28
   14a4c:	bx	lr
   14a50:	mov	r0, #0
   14a54:	bx	lr
   14a58:	push	{r3, r4, r5, r6, r7, lr}
   14a5c:	subs	r4, r0, #0
   14a60:	mov	r5, r2
   14a64:	beq	14ad0 <__assert_fail@plt+0x32f0>
   14a68:	ldr	r0, [r4]
   14a6c:	bl	14a20 <__assert_fail@plt+0x3240>
   14a70:	cmp	r0, #0
   14a74:	beq	14ad0 <__assert_fail@plt+0x32f0>
   14a78:	ldr	r7, [r0, #4]
   14a7c:	ldr	r6, [r4, #4]
   14a80:	ldr	r0, [r6, r7, lsl #2]
   14a84:	cmp	r0, #0
   14a88:	beq	14aa4 <__assert_fail@plt+0x32c4>
   14a8c:	bl	1160c <strlen@plt>
   14a90:	ldr	r3, [r4, #12]
   14a94:	cmp	r0, r3
   14a98:	rsbcc	r0, r0, r3
   14a9c:	movcs	r0, #0
   14aa0:	str	r0, [r4, #12]
   14aa4:	cmp	r5, #0
   14aa8:	str	r5, [r6, r7, lsl #2]
   14aac:	beq	14ac8 <__assert_fail@plt+0x32e8>
   14ab0:	mov	r0, r5
   14ab4:	mov	r5, #0
   14ab8:	bl	1160c <strlen@plt>
   14abc:	ldr	r3, [r4, #12]
   14ac0:	add	r0, r3, r0
   14ac4:	str	r0, [r4, #12]
   14ac8:	mov	r0, r5
   14acc:	pop	{r3, r4, r5, r6, r7, pc}
   14ad0:	mvn	r5, #0
   14ad4:	b	14ac8 <__assert_fail@plt+0x32e8>
   14ad8:	cmp	r0, #0
   14adc:	strne	r1, [r0, #8]
   14ae0:	movne	r0, #0
   14ae4:	mvneq	r0, #0
   14ae8:	bx	lr
   14aec:	push	{r4, r5, r6, r7, r8, lr}
   14af0:	mov	r6, r0
   14af4:	mov	r0, #34	; 0x22
   14af8:	mov	r7, r1
   14afc:	bl	11714 <fputc@plt>
   14b00:	cmp	r6, #0
   14b04:	beq	14b90 <__assert_fail@plt+0x33b0>
   14b08:	ldrb	r4, [r6]
   14b0c:	cmp	r4, #0
   14b10:	beq	14b90 <__assert_fail@plt+0x33b0>
   14b14:	ldr	r8, [pc, #132]	; 14ba0 <__assert_fail@plt+0x33c0>
   14b18:	add	r8, pc, r8
   14b1c:	b	14b44 <__assert_fail@plt+0x3364>
   14b20:	mov	r1, #1
   14b24:	mov	r0, r7
   14b28:	mov	r2, r8
   14b2c:	bl	116c0 <__fprintf_chk@plt>
   14b30:	cmn	r6, #1
   14b34:	beq	14b90 <__assert_fail@plt+0x33b0>
   14b38:	ldrb	r4, [r6, #1]!
   14b3c:	cmp	r4, #0
   14b40:	beq	14b90 <__assert_fail@plt+0x33b0>
   14b44:	sxtb	r5, r4
   14b48:	cmp	r5, #34	; 0x22
   14b4c:	cmpne	r5, #92	; 0x5c
   14b50:	uxtbeq	r3, r4
   14b54:	beq	14b20 <__assert_fail@plt+0x3340>
   14b58:	bl	115dc <__ctype_b_loc@plt>
   14b5c:	uxtb	r3, r4
   14b60:	movw	ip, #16386	; 0x4002
   14b64:	lsl	lr, r3, #1
   14b68:	ldr	r2, [r0]
   14b6c:	ldrh	r2, [r2, lr]
   14b70:	and	ip, r2, ip
   14b74:	cmp	ip, #16384	; 0x4000
   14b78:	bne	14b20 <__assert_fail@plt+0x3340>
   14b7c:	mov	r0, r5
   14b80:	mov	r1, r7
   14b84:	bl	11714 <fputc@plt>
   14b88:	cmn	r6, #1
   14b8c:	bne	14b38 <__assert_fail@plt+0x3358>
   14b90:	mov	r1, r7
   14b94:	mov	r0, #34	; 0x22
   14b98:	pop	{r4, r5, r6, r7, r8, lr}
   14b9c:	b	11714 <fputc@plt>
   14ba0:	andeq	r2, r0, ip, asr #26
   14ba4:	cmp	r0, #0
   14ba8:	push	{r4, r5, r6, r7, r8, lr}
   14bac:	mov	r6, r1
   14bb0:	popeq	{r4, r5, r6, r7, r8, pc}
   14bb4:	ldrb	r4, [r0]
   14bb8:	cmp	r4, #0
   14bbc:	popeq	{r4, r5, r6, r7, r8, pc}
   14bc0:	mov	r5, r0
   14bc4:	bl	115dc <__ctype_b_loc@plt>
   14bc8:	ldr	r7, [pc, #124]	; 14c4c <__assert_fail@plt+0x346c>
   14bcc:	add	r7, pc, r7
   14bd0:	mov	r8, r0
   14bd4:	b	14bf0 <__assert_fail@plt+0x3410>
   14bd8:	bl	116c0 <__fprintf_chk@plt>
   14bdc:	cmn	r5, #1
   14be0:	popeq	{r4, r5, r6, r7, r8, pc}
   14be4:	ldrb	r4, [r5, #1]!
   14be8:	cmp	r4, #0
   14bec:	beq	14c48 <__assert_fail@plt+0x3468>
   14bf0:	uxtb	r3, r4
   14bf4:	ldr	lr, [r8]
   14bf8:	mov	r1, #1
   14bfc:	mov	r0, r6
   14c00:	lsl	ip, r3, r1
   14c04:	mov	r2, r7
   14c08:	sxtb	r4, r4
   14c0c:	ldrh	lr, [lr, ip]
   14c10:	movw	ip, #16386	; 0x4002
   14c14:	tst	lr, #1
   14c18:	and	ip, lr, ip
   14c1c:	bne	14bd8 <__assert_fail@plt+0x33f8>
   14c20:	cmp	r4, #92	; 0x5c
   14c24:	beq	14bd8 <__assert_fail@plt+0x33f8>
   14c28:	cmp	ip, #16384	; 0x4000
   14c2c:	bne	14bd8 <__assert_fail@plt+0x33f8>
   14c30:	mov	r0, r4
   14c34:	mov	r1, r6
   14c38:	bl	11714 <fputc@plt>
   14c3c:	cmn	r5, #1
   14c40:	bne	14be4 <__assert_fail@plt+0x3404>
   14c44:	pop	{r4, r5, r6, r7, r8, pc}
   14c48:	pop	{r4, r5, r6, r7, r8, pc}
   14c4c:	muleq	r0, r8, ip
   14c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c54:	subs	r4, r2, #0
   14c58:	ldr	r5, [pc, #728]	; 14f38 <__assert_fail@plt+0x3758>
   14c5c:	sub	sp, sp, #36	; 0x24
   14c60:	ldr	r3, [pc, #724]	; 14f3c <__assert_fail@plt+0x375c>
   14c64:	mov	r2, #0
   14c68:	add	r5, pc, r5
   14c6c:	mov	r7, r0
   14c70:	mov	r8, r1
   14c74:	ldr	r9, [r5, r3]
   14c78:	str	r2, [sp, #20]
   14c7c:	ldr	r3, [r9]
   14c80:	str	r3, [sp, #28]
   14c84:	beq	14f1c <__assert_fail@plt+0x373c>
   14c88:	ldr	r3, [r7, #12]
   14c8c:	tst	r3, #2
   14c90:	bne	14e48 <__assert_fail@plt+0x3668>
   14c94:	tst	r3, #16
   14c98:	beq	14cf8 <__assert_fail@plt+0x3518>
   14c9c:	ldr	r0, [pc, #668]	; 14f40 <__assert_fail@plt+0x3760>
   14ca0:	mov	r1, #1
   14ca4:	ldr	r2, [pc, #664]	; 14f44 <__assert_fail@plt+0x3764>
   14ca8:	ldr	r3, [r8], #40	; 0x28
   14cac:	ldr	r5, [r5, r0]
   14cb0:	add	r2, pc, r2
   14cb4:	ldr	r0, [r5]
   14cb8:	bl	116c0 <__fprintf_chk@plt>
   14cbc:	mov	r0, r4
   14cc0:	ldr	r1, [r5]
   14cc4:	bl	14aec <__assert_fail@plt+0x330c>
   14cc8:	ldr	r3, [r7, #24]
   14ccc:	cmp	r3, r8
   14cd0:	beq	14ce0 <__assert_fail@plt+0x3500>
   14cd4:	ldr	r1, [r5]
   14cd8:	mov	r0, #32
   14cdc:	bl	11714 <fputc@plt>
   14ce0:	ldr	r2, [sp, #28]
   14ce4:	ldr	r3, [r9]
   14ce8:	cmp	r2, r3
   14cec:	bne	14f34 <__assert_fail@plt+0x3754>
   14cf0:	add	sp, sp, #36	; 0x24
   14cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cf8:	mov	r0, r4
   14cfc:	add	r1, sp, #20
   14d00:	bl	15fc4 <__assert_fail@plt+0x47e4>
   14d04:	subs	fp, r0, #0
   14d08:	movne	r4, fp
   14d0c:	beq	14f28 <__assert_fail@plt+0x3748>
   14d10:	ldr	r3, [sp, #20]
   14d14:	add	sl, r8, #40	; 0x28
   14d18:	ldr	r1, [r7, #24]
   14d1c:	sub	r2, r3, #1
   14d20:	cmn	r2, #3
   14d24:	movhi	r4, #0
   14d28:	movls	r2, r3
   14d2c:	ldr	r3, [r8, #8]
   14d30:	movhi	r2, r4
   14d34:	strhi	r4, [sp, #20]
   14d38:	cmp	sl, r1
   14d3c:	str	r3, [sp, #24]
   14d40:	beq	14d88 <__assert_fail@plt+0x35a8>
   14d44:	cmp	r3, r2
   14d48:	bcs	14d98 <__assert_fail@plt+0x35b8>
   14d4c:	ldr	r1, [r8, #32]
   14d50:	tst	r1, #32
   14d54:	beq	14d98 <__assert_fail@plt+0x35b8>
   14d58:	cmp	r4, #0
   14d5c:	beq	14d7c <__assert_fail@plt+0x359c>
   14d60:	mov	r0, r4
   14d64:	add	r1, sp, #24
   14d68:	bl	16078 <__assert_fail@plt+0x4898>
   14d6c:	cmn	r0, #1
   14d70:	str	r0, [sp, #20]
   14d74:	bne	14da4 <__assert_fail@plt+0x35c4>
   14d78:	ldr	r3, [sp, #24]
   14d7c:	mov	r4, #0
   14d80:	str	r4, [sp, #20]
   14d84:	b	14dd8 <__assert_fail@plt+0x35f8>
   14d88:	cmp	r3, r2
   14d8c:	strhi	r2, [sp, #24]
   14d90:	movhi	r3, r2
   14d94:	bls	14d44 <__assert_fail@plt+0x3564>
   14d98:	cmp	r4, #0
   14d9c:	moveq	r4, r2
   14da0:	beq	14dd8 <__assert_fail@plt+0x35f8>
   14da4:	ldr	r3, [r7, #12]
   14da8:	tst	r3, #2
   14dac:	bne	14dbc <__assert_fail@plt+0x35dc>
   14db0:	ldr	r3, [r8, #32]
   14db4:	tst	r3, #128	; 0x80
   14db8:	bne	14ed4 <__assert_fail@plt+0x36f4>
   14dbc:	ldr	r3, [pc, #380]	; 14f40 <__assert_fail@plt+0x3760>
   14dc0:	mov	r0, r4
   14dc4:	ldr	r6, [r5, r3]
   14dc8:	ldr	r1, [r6]
   14dcc:	bl	11798 <fputs@plt>
   14dd0:	ldr	r3, [sp, #24]
   14dd4:	ldr	r4, [sp, #20]
   14dd8:	cmp	r4, r3
   14ddc:	bcs	14e04 <__assert_fail@plt+0x3624>
   14de0:	ldr	r3, [pc, #344]	; 14f40 <__assert_fail@plt+0x3760>
   14de4:	ldr	r6, [r5, r3]
   14de8:	mov	r0, #32
   14dec:	ldr	r1, [r6]
   14df0:	bl	11714 <fputc@plt>
   14df4:	ldr	r3, [sp, #24]
   14df8:	add	r4, r4, #1
   14dfc:	cmp	r3, r4
   14e00:	bhi	14de8 <__assert_fail@plt+0x3608>
   14e04:	ldr	r2, [r7, #24]
   14e08:	cmp	sl, r2
   14e0c:	beq	14e3c <__assert_fail@plt+0x365c>
   14e10:	ldr	r2, [sp, #20]
   14e14:	cmp	r2, r3
   14e18:	ldr	r3, [pc, #288]	; 14f40 <__assert_fail@plt+0x3760>
   14e1c:	bls	14e2c <__assert_fail@plt+0x364c>
   14e20:	ldr	r4, [r8, #32]
   14e24:	ands	r4, r4, #32
   14e28:	beq	14e7c <__assert_fail@plt+0x369c>
   14e2c:	ldr	r3, [r5, r3]
   14e30:	mov	r0, #32
   14e34:	ldr	r1, [r3]
   14e38:	bl	11714 <fputc@plt>
   14e3c:	mov	r0, fp
   14e40:	bl	11480 <free@plt>
   14e44:	b	14ce0 <__assert_fail@plt+0x3500>
   14e48:	ldr	r3, [pc, #240]	; 14f40 <__assert_fail@plt+0x3760>
   14e4c:	mov	r0, r4
   14e50:	add	r8, r8, #40	; 0x28
   14e54:	ldr	r4, [r5, r3]
   14e58:	ldr	r1, [r4]
   14e5c:	bl	14ba4 <__assert_fail@plt+0x33c4>
   14e60:	ldr	r3, [r7, #24]
   14e64:	cmp	r3, r8
   14e68:	beq	14ce0 <__assert_fail@plt+0x3500>
   14e6c:	ldr	r1, [r4]
   14e70:	mov	r0, #32
   14e74:	bl	11714 <fputc@plt>
   14e78:	b	14ce0 <__assert_fail@plt+0x3500>
   14e7c:	ldr	r3, [r5, r3]
   14e80:	mov	r0, #10
   14e84:	ldr	sl, [pc, #188]	; 14f48 <__assert_fail@plt+0x3768>
   14e88:	ldr	r6, [pc, #188]	; 14f4c <__assert_fail@plt+0x376c>
   14e8c:	ldr	r1, [r3]
   14e90:	add	sl, pc, sl
   14e94:	add	r6, pc, r6
   14e98:	bl	11714 <fputc@plt>
   14e9c:	mov	r1, r4
   14ea0:	mov	r0, r7
   14ea4:	bl	14a20 <__assert_fail@plt+0x3240>
   14ea8:	mov	r3, r6
   14eac:	mov	r1, sl
   14eb0:	add	r4, r4, #1
   14eb4:	ldr	r2, [r0, #8]
   14eb8:	mov	r0, #1
   14ebc:	rsb	r2, r2, #0
   14ec0:	bl	116a8 <__printf_chk@plt>
   14ec4:	ldr	r3, [r8, #4]
   14ec8:	cmp	r3, r4
   14ecc:	bcs	14e9c <__assert_fail@plt+0x36bc>
   14ed0:	b	14e3c <__assert_fail@plt+0x365c>
   14ed4:	ldr	r3, [pc, #100]	; 14f40 <__assert_fail@plt+0x3760>
   14ed8:	mov	r1, #1
   14edc:	ldr	ip, [r8, #8]
   14ee0:	ldr	r2, [pc, #104]	; 14f50 <__assert_fail@plt+0x3770>
   14ee4:	ldr	r6, [r5, r3]
   14ee8:	add	r2, pc, r2
   14eec:	mov	r3, ip
   14ef0:	ldr	r0, [r6]
   14ef4:	str	r4, [sp]
   14ef8:	str	ip, [sp, #12]
   14efc:	bl	116c0 <__fprintf_chk@plt>
   14f00:	ldr	r4, [sp, #20]
   14f04:	ldr	ip, [sp, #12]
   14f08:	ldr	r3, [sp, #24]
   14f0c:	cmp	ip, r4
   14f10:	strhi	ip, [sp, #20]
   14f14:	movhi	r4, ip
   14f18:	b	14dd8 <__assert_fail@plt+0x35f8>
   14f1c:	ldr	r4, [pc, #48]	; 14f54 <__assert_fail@plt+0x3774>
   14f20:	add	r4, pc, r4
   14f24:	b	14c88 <__assert_fail@plt+0x34a8>
   14f28:	ldr	r4, [pc, #40]	; 14f58 <__assert_fail@plt+0x3778>
   14f2c:	add	r4, pc, r4
   14f30:	b	14d10 <__assert_fail@plt+0x3530>
   14f34:	bl	114ec <__stack_chk_fail@plt>
   14f38:	muleq	r1, r0, r3
   14f3c:	andeq	r0, r0, r0, asr r1
   14f40:	andeq	r0, r0, ip, asr r1
   14f44:			; <UNDEFINED> instruction: 0x00002bbc
   14f48:	andeq	r2, r0, r4, ror #19
   14f4c:	andeq	r2, r0, r8, lsl #11
   14f50:	andeq	r2, r0, r8, lsl #19
   14f54:	andeq	r2, r0, r4, ror r2
   14f58:	andeq	r2, r0, r8, ror #4
   14f5c:	ldr	r3, [r0, #16]
   14f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f64:	cmp	r3, #0
   14f68:	sub	sp, sp, #12
   14f6c:	mov	r8, r2
   14f70:	ldr	r2, [pc, #160]	; 15018 <__assert_fail@plt+0x3838>
   14f74:	mov	r6, r0
   14f78:	mov	r5, r1
   14f7c:	add	r2, pc, r2
   14f80:	str	r2, [sp, #4]
   14f84:	beq	15010 <__assert_fail@plt+0x3830>
   14f88:	ldr	sl, [r0, #12]
   14f8c:	ands	sl, sl, #24
   14f90:	bne	15010 <__assert_fail@plt+0x3830>
   14f94:	ldr	r2, [r0, #28]
   14f98:	add	r3, r0, #28
   14f9c:	cmp	r2, r3
   14fa0:	beq	15010 <__assert_fail@plt+0x3830>
   14fa4:	mov	r7, r0
   14fa8:	ldr	r4, [r7, #20]!
   14fac:	cmp	r4, r7
   14fb0:	subne	r9, r8, #1
   14fb4:	addne	r9, r1, r9
   14fb8:	beq	14ff0 <__assert_fail@plt+0x3810>
   14fbc:	mov	fp, r4
   14fc0:	mov	r2, r8
   14fc4:	ldr	r1, [fp, #-40]!	; 0xffffffd8
   14fc8:	mov	r0, r5
   14fcc:	bl	11690 <strncpy@plt>
   14fd0:	strb	sl, [r9]
   14fd4:	mov	r0, r6
   14fd8:	mov	r2, r5
   14fdc:	mov	r1, fp
   14fe0:	bl	14c50 <__assert_fail@plt+0x3470>
   14fe4:	ldr	r4, [r4]
   14fe8:	cmp	r7, r4
   14fec:	bne	14fbc <__assert_fail@plt+0x37dc>
   14ff0:	ldr	r2, [sp, #4]
   14ff4:	mov	r0, #10
   14ff8:	ldr	r3, [pc, #28]	; 1501c <__assert_fail@plt+0x383c>
   14ffc:	ldr	r3, [r2, r3]
   15000:	ldr	r1, [r3]
   15004:	add	sp, sp, #12
   15008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1500c:	b	11714 <fputc@plt>
   15010:	add	sp, sp, #12
   15014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15018:	andeq	r3, r1, ip, ror r0
   1501c:	andeq	r0, r0, ip, asr r1
   15020:	push	{r4, r5, r6, r7, r8, r9, lr}
   15024:	mov	r6, r0
   15028:	ldr	r5, [r0]
   1502c:	sub	sp, sp, #12
   15030:	ldr	r9, [pc, #112]	; 150a8 <__assert_fail@plt+0x38c8>
   15034:	mov	r8, r1
   15038:	mov	r7, r2
   1503c:	mov	r3, r5
   15040:	add	r9, pc, r9
   15044:	ldr	r4, [r3, #20]!
   15048:	cmp	r4, r3
   1504c:	beq	1508c <__assert_fail@plt+0x38ac>
   15050:	ldr	r1, [r4, #-36]	; 0xffffffdc
   15054:	sub	r2, r4, #8
   15058:	mov	r3, r8
   1505c:	mov	r0, r6
   15060:	str	r7, [sp]
   15064:	bl	144e4 <__assert_fail@plt+0x2d04>
   15068:	sub	r1, r4, #40	; 0x28
   1506c:	mov	r2, r0
   15070:	mov	r0, r5
   15074:	bl	14c50 <__assert_fail@plt+0x3470>
   15078:	ldr	r5, [r6]
   1507c:	ldr	r4, [r4]
   15080:	add	r0, r5, #20
   15084:	cmp	r4, r0
   15088:	bne	15050 <__assert_fail@plt+0x3870>
   1508c:	ldr	r3, [pc, #24]	; 150ac <__assert_fail@plt+0x38cc>
   15090:	mov	r0, #10
   15094:	ldr	r3, [r9, r3]
   15098:	ldr	r1, [r3]
   1509c:	add	sp, sp, #12
   150a0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   150a4:	b	11714 <fputc@plt>
   150a8:			; <UNDEFINED> instruction: 0x00012fb8
   150ac:	andeq	r0, r0, ip, asr r1
   150b0:	push	{r3, r4, r5, r6, r7, lr}
   150b4:	mov	r5, r0
   150b8:	mov	r7, r1
   150bc:	mov	r6, r2
   150c0:	bl	15020 <__assert_fail@plt+0x3840>
   150c4:	ldr	r4, [r5, #24]
   150c8:	add	r5, r5, #24
   150cc:	cmp	r5, r4
   150d0:	popeq	{r3, r4, r5, r6, r7, pc}
   150d4:	sub	r0, r4, #32
   150d8:	mov	r1, r7
   150dc:	mov	r2, r6
   150e0:	bl	150b0 <__assert_fail@plt+0x38d0>
   150e4:	ldr	r4, [r4]
   150e8:	cmp	r5, r4
   150ec:	bne	150d4 <__assert_fail@plt+0x38f4>
   150f0:	pop	{r3, r4, r5, r6, r7, pc}
   150f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f8:	subs	r6, r0, #0
   150fc:	sub	sp, sp, #12
   15100:	beq	154e8 <__assert_fail@plt+0x3d08>
   15104:	ldr	r3, [r6, #16]
   15108:	cmp	r3, #0
   1510c:	bne	15204 <__assert_fail@plt+0x3a24>
   15110:	ldr	r2, [r6, #4]
   15114:	mov	r4, r6
   15118:	ldr	r3, [r4, #28]!
   1511c:	cmp	r3, r4
   15120:	beq	15138 <__assert_fail@plt+0x3958>
   15124:	ldmda	r3, {r1, r3}
   15128:	cmp	r2, r1
   1512c:	movcc	r2, r1
   15130:	cmp	r3, r4
   15134:	bne	15124 <__assert_fail@plt+0x3944>
   15138:	add	r8, r2, #1
   1513c:	mov	r0, r8
   15140:	bl	11594 <malloc@plt>
   15144:	subs	r7, r0, #0
   15148:	beq	154e8 <__assert_fail@plt+0x3d08>
   1514c:	ldr	r3, [r6, #16]
   15150:	cmp	r3, #0
   15154:	beq	15164 <__assert_fail@plt+0x3984>
   15158:	ldr	fp, [r6, #12]
   1515c:	ands	fp, fp, #18
   15160:	beq	15240 <__assert_fail@plt+0x3a60>
   15164:	ldr	r3, [r6, #12]
   15168:	mov	r0, r6
   1516c:	mov	r1, r7
   15170:	mov	r2, r8
   15174:	tst	r3, #64	; 0x40
   15178:	beq	151c0 <__assert_fail@plt+0x39e0>
   1517c:	bl	14f5c <__assert_fail@plt+0x377c>
   15180:	ldr	r5, [r6, #28]
   15184:	cmp	r5, r4
   15188:	beq	151a4 <__assert_fail@plt+0x39c4>
   1518c:	ldr	r3, [r5, #24]
   15190:	cmp	r3, #0
   15194:	beq	151f0 <__assert_fail@plt+0x3a10>
   15198:	ldr	r5, [r5]
   1519c:	cmp	r5, r4
   151a0:	bne	1518c <__assert_fail@plt+0x39ac>
   151a4:	mov	r0, r7
   151a8:	bl	11480 <free@plt>
   151ac:	mov	r3, #0
   151b0:	mov	r0, r3
   151b4:	str	r3, [r6, #16]
   151b8:	add	sp, sp, #12
   151bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151c0:	bl	14f5c <__assert_fail@plt+0x377c>
   151c4:	ldr	r5, [r6, #28]
   151c8:	cmp	r5, r4
   151cc:	beq	151a4 <__assert_fail@plt+0x39c4>
   151d0:	sub	r0, r5, #16
   151d4:	mov	r1, r7
   151d8:	mov	r2, r8
   151dc:	bl	15020 <__assert_fail@plt+0x3840>
   151e0:	ldr	r5, [r5]
   151e4:	cmp	r5, r4
   151e8:	bne	151d0 <__assert_fail@plt+0x39f0>
   151ec:	b	151a4 <__assert_fail@plt+0x39c4>
   151f0:	sub	r0, r5, #16
   151f4:	mov	r1, r7
   151f8:	mov	r2, r8
   151fc:	bl	150b0 <__assert_fail@plt+0x38d0>
   15200:	b	15198 <__assert_fail@plt+0x39b8>
   15204:	mov	r0, #1
   15208:	bl	1178c <isatty@plt>
   1520c:	ldr	r2, [r6, #4]
   15210:	cmp	r0, #0
   15214:	str	r0, [r6, #8]
   15218:	beq	15230 <__assert_fail@plt+0x3a50>
   1521c:	cmp	r2, #0
   15220:	bne	15114 <__assert_fail@plt+0x3934>
   15224:	bl	156b0 <__assert_fail@plt+0x3ed0>
   15228:	mov	r2, r0
   1522c:	str	r0, [r6, #4]
   15230:	cmp	r2, #0
   15234:	moveq	r2, #80	; 0x50
   15238:	streq	r2, [r6, #4]
   1523c:	b	15114 <__assert_fail@plt+0x3934>
   15240:	mov	r9, r6
   15244:	mov	sl, fp
   15248:	ldr	r5, [r9, #20]!
   1524c:	cmp	r5, r9
   15250:	beq	15290 <__assert_fail@plt+0x3ab0>
   15254:	sub	r1, r5, #40	; 0x28
   15258:	mov	r2, r7
   1525c:	mov	r3, r8
   15260:	mov	r0, r6
   15264:	bl	14634 <__assert_fail@plt+0x2e54>
   15268:	ldr	r2, [r5, #-32]	; 0xffffffe0
   1526c:	ldr	r1, [r6, #24]
   15270:	ldr	r3, [r5, #-4]
   15274:	cmp	r1, r5
   15278:	addne	r2, r2, #1
   1527c:	ldr	r5, [r5]
   15280:	add	sl, sl, r2
   15284:	add	fp, fp, r3
   15288:	cmp	r5, r9
   1528c:	bne	15254 <__assert_fail@plt+0x3a74>
   15290:	ldr	r3, [r6, #8]
   15294:	cmp	r3, #0
   15298:	beq	15164 <__assert_fail@plt+0x3984>
   1529c:	ldr	r3, [r6, #4]
   152a0:	cmp	r3, sl
   152a4:	bcs	15318 <__assert_fail@plt+0x3b38>
   152a8:	cmp	fp, #0
   152ac:	ldr	r1, [r6, #20]
   152b0:	beq	1532c <__assert_fail@plt+0x3b4c>
   152b4:	cmp	r1, r9
   152b8:	mov	r5, r1
   152bc:	bne	152d0 <__assert_fail@plt+0x3af0>
   152c0:	b	1532c <__assert_fail@plt+0x3b4c>
   152c4:	ldr	r5, [r5]
   152c8:	cmp	r5, r9
   152cc:	beq	15314 <__assert_fail@plt+0x3b34>
   152d0:	ldr	r3, [r5, #-4]
   152d4:	cmp	r3, #0
   152d8:	beq	152c4 <__assert_fail@plt+0x3ae4>
   152dc:	ldr	ip, [r5, #-32]	; 0xffffffe0
   152e0:	mov	r2, r7
   152e4:	mov	r3, r8
   152e8:	mov	r0, r6
   152ec:	sub	r1, r5, #40	; 0x28
   152f0:	str	ip, [sp, #4]
   152f4:	bl	14634 <__assert_fail@plt+0x2e54>
   152f8:	ldr	r3, [r5, #-32]	; 0xffffffe0
   152fc:	ldr	ip, [sp, #4]
   15300:	cmp	ip, r3
   15304:	rsb	r2, ip, r3
   15308:	addhi	sl, sl, r2
   1530c:	subls	fp, fp, #1
   15310:	b	152c4 <__assert_fail@plt+0x3ae4>
   15314:	ldr	r3, [r6, #4]
   15318:	cmp	sl, r3
   1531c:	bcc	15454 <__assert_fail@plt+0x3c74>
   15320:	cmp	sl, r3
   15324:	bls	15164 <__assert_fail@plt+0x3984>
   15328:	ldr	r1, [r6, #20]
   1532c:	vmov.f64	d6, #112	; 0x3f800000  1.0
   15330:	mov	r0, #1
   15334:	cmp	r1, r9
   15338:	beq	15440 <__assert_fail@plt+0x3c60>
   1533c:	cmp	r3, sl
   15340:	bcs	15440 <__assert_fail@plt+0x3c60>
   15344:	mov	ip, r1
   15348:	mov	r5, sl
   1534c:	eor	fp, r0, #1
   15350:	b	1539c <__assert_fail@plt+0x3bbc>
   15354:	vcmpe.f64	d7, d6
   15358:	vmrs	APSR_nzcv, fpscr
   1535c:	ble	15388 <__assert_fail@plt+0x3ba8>
   15360:	ldr	r2, [ip, #-32]	; 0xffffffe0
   15364:	cmp	r2, #0
   15368:	beq	15388 <__assert_fail@plt+0x3ba8>
   1536c:	cmp	r5, #0
   15370:	moveq	lr, #0
   15374:	andne	lr, fp, #1
   15378:	cmp	lr, #0
   1537c:	subne	r5, r5, #1
   15380:	subne	r2, r2, #1
   15384:	strne	r2, [ip, #-32]	; 0xffffffe0
   15388:	ldr	ip, [ip]
   1538c:	cmp	ip, r9
   15390:	beq	15428 <__assert_fail@plt+0x3c48>
   15394:	cmp	r5, r3
   15398:	bls	15428 <__assert_fail@plt+0x3c48>
   1539c:	vldr	d7, [ip, #-16]
   153a0:	vcmpe.f64	d7, d6
   153a4:	ldr	lr, [ip, #-8]
   153a8:	vmrs	APSR_nzcv, fpscr
   153ac:	ble	153b8 <__assert_fail@plt+0x3bd8>
   153b0:	tst	lr, #32
   153b4:	beq	15388 <__assert_fail@plt+0x3ba8>
   153b8:	tst	lr, #64	; 0x40
   153bc:	bne	15388 <__assert_fail@plt+0x3ba8>
   153c0:	cmp	r0, #0
   153c4:	beq	153d0 <__assert_fail@plt+0x3bf0>
   153c8:	tst	lr, #32
   153cc:	beq	15388 <__assert_fail@plt+0x3ba8>
   153d0:	ldr	r2, [ip, #-32]	; 0xffffffe0
   153d4:	ldr	lr, [ip, #-28]	; 0xffffffe4
   153d8:	cmp	r2, lr
   153dc:	beq	15388 <__assert_fail@plt+0x3ba8>
   153e0:	vcmpe.f64	d7, d6
   153e4:	vmrs	APSR_nzcv, fpscr
   153e8:	bpl	15354 <__assert_fail@plt+0x3b74>
   153ec:	cmp	r2, #0
   153f0:	beq	15354 <__assert_fail@plt+0x3b74>
   153f4:	cmp	r5, #0
   153f8:	beq	15354 <__assert_fail@plt+0x3b74>
   153fc:	vmov	s7, r3
   15400:	vcvt.f64.u32	d5, s7
   15404:	vmov	s7, r2
   15408:	vmul.f64	d5, d7, d5
   1540c:	vcvt.f64.u32	d4, s7
   15410:	vcmpe.f64	d4, d5
   15414:	vmrs	APSR_nzcv, fpscr
   15418:	subgt	r2, r2, #1
   1541c:	subgt	r5, r5, #1
   15420:	strgt	r2, [ip, #-32]	; 0xffffffe0
   15424:	b	15354 <__assert_fail@plt+0x3b74>
   15428:	cmp	r5, sl
   1542c:	beq	15444 <__assert_fail@plt+0x3c64>
   15430:	cmp	r5, r3
   15434:	bls	15164 <__assert_fail@plt+0x3984>
   15438:	mov	sl, r5
   1543c:	b	15334 <__assert_fail@plt+0x3b54>
   15440:	mov	r5, sl
   15444:	cmp	r0, #0
   15448:	beq	15164 <__assert_fail@plt+0x3984>
   1544c:	mov	r0, #0
   15450:	b	15430 <__assert_fail@plt+0x3c50>
   15454:	cmp	fp, #0
   15458:	beq	154c4 <__assert_fail@plt+0x3ce4>
   1545c:	ldr	r2, [r6, #20]
   15460:	cmp	r2, r9
   15464:	bne	1548c <__assert_fail@plt+0x3cac>
   15468:	b	154c4 <__assert_fail@plt+0x3ce4>
   1546c:	ldr	r0, [r2, #-32]	; 0xffffffe0
   15470:	add	sl, sl, r1
   15474:	str	r0, [r2, #-32]	; 0xffffffe0
   15478:	cmp	sl, r3
   1547c:	beq	15164 <__assert_fail@plt+0x3984>
   15480:	ldr	r2, [r2]
   15484:	cmp	r2, r9
   15488:	beq	154bc <__assert_fail@plt+0x3cdc>
   1548c:	ldr	r1, [r2, #-4]
   15490:	cmp	r1, #0
   15494:	beq	15480 <__assert_fail@plt+0x3ca0>
   15498:	subs	r1, r3, sl
   1549c:	beq	1546c <__assert_fail@plt+0x3c8c>
   154a0:	ldr	lr, [r2, #-32]	; 0xffffffe0
   154a4:	ldr	ip, [r2, #-24]	; 0xffffffe8
   154a8:	add	r0, r1, lr
   154ac:	cmp	r0, ip
   154b0:	rsbhi	r1, lr, ip
   154b4:	movhi	r0, ip
   154b8:	b	15470 <__assert_fail@plt+0x3c90>
   154bc:	cmp	sl, r3
   154c0:	bcs	15320 <__assert_fail@plt+0x3b40>
   154c4:	ldr	r2, [r6, #24]
   154c8:	ldr	r1, [r2, #-8]
   154cc:	tst	r1, #128	; 0x80
   154d0:	bne	15320 <__assert_fail@plt+0x3b40>
   154d4:	ldr	r1, [r2, #-32]	; 0xffffffe0
   154d8:	add	r3, r3, r1
   154dc:	rsb	sl, sl, r3
   154e0:	str	sl, [r2, #-32]	; 0xffffffe0
   154e4:	b	15164 <__assert_fail@plt+0x3984>
   154e8:	mvn	r0, #0
   154ec:	b	151b8 <__assert_fail@plt+0x39d8>
   154f0:	ldr	r3, [pc, #164]	; 1559c <__assert_fail@plt+0x3dbc>
   154f4:	ldr	r2, [pc, #164]	; 155a0 <__assert_fail@plt+0x3dc0>
   154f8:	add	r3, pc, r3
   154fc:	push	{r4, r5, r6, r7, r8, lr}
   15500:	sub	sp, sp, #8
   15504:	ldr	r5, [r3, r2]
   15508:	ldr	r3, [r5]
   1550c:	str	r3, [sp, #4]
   15510:	bl	11588 <getenv@plt>
   15514:	subs	r8, r0, #0
   15518:	beq	15590 <__assert_fail@plt+0x3db0>
   1551c:	add	r4, sp, #8
   15520:	mov	r7, #0
   15524:	str	r7, [r4, #-8]!
   15528:	bl	11630 <__errno_location@plt>
   1552c:	mov	r1, sp
   15530:	mov	r2, #10
   15534:	mov	r6, r0
   15538:	mov	r0, r8
   1553c:	str	r7, [r6]
   15540:	bl	1145c <strtol@plt>
   15544:	ldr	r3, [r6]
   15548:	cmp	r3, r7
   1554c:	bne	15590 <__assert_fail@plt+0x3db0>
   15550:	ldr	r3, [sp]
   15554:	cmp	r3, r7
   15558:	beq	15590 <__assert_fail@plt+0x3db0>
   1555c:	ldrsb	r2, [r3]
   15560:	cmp	r2, r7
   15564:	bne	15590 <__assert_fail@plt+0x3db0>
   15568:	cmp	r8, r3
   1556c:	bcs	15590 <__assert_fail@plt+0x3db0>
   15570:	cmp	r0, r7
   15574:	ble	15590 <__assert_fail@plt+0x3db0>
   15578:	ldr	r2, [sp, #4]
   1557c:	ldr	r3, [r5]
   15580:	cmp	r2, r3
   15584:	bne	15598 <__assert_fail@plt+0x3db8>
   15588:	add	sp, sp, #8
   1558c:	pop	{r4, r5, r6, r7, r8, pc}
   15590:	mvn	r0, #0
   15594:	b	15578 <__assert_fail@plt+0x3d98>
   15598:	bl	114ec <__stack_chk_fail@plt>
   1559c:	andeq	r2, r1, r0, lsl #22
   155a0:	andeq	r0, r0, r0, asr r1
   155a4:	ldr	r3, [pc, #244]	; 156a0 <__assert_fail@plt+0x3ec0>
   155a8:	ldr	ip, [pc, #244]	; 156a4 <__assert_fail@plt+0x3ec4>
   155ac:	add	r3, pc, r3
   155b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155b4:	sub	sp, sp, #20
   155b8:	ldr	r5, [r3, ip]
   155bc:	mov	r9, r0
   155c0:	mov	r8, r1
   155c4:	mov	r0, #1
   155c8:	movw	r1, #21523	; 0x5413
   155cc:	add	r2, sp, #4
   155d0:	ldr	r3, [r5]
   155d4:	str	r3, [sp, #12]
   155d8:	bl	11534 <ioctl@plt>
   155dc:	cmp	r0, #0
   155e0:	bne	15648 <__assert_fail@plt+0x3e68>
   155e4:	ldrh	sl, [sp, #6]
   155e8:	ldrh	r4, [sp, #4]
   155ec:	rsbs	r3, sl, #1
   155f0:	movcc	r3, #0
   155f4:	rsbs	fp, r4, #1
   155f8:	movcc	fp, #0
   155fc:	adds	r7, r9, #0
   15600:	movne	r7, #1
   15604:	tst	r3, r7
   15608:	bne	15668 <__assert_fail@plt+0x3e88>
   1560c:	adds	r6, r8, #0
   15610:	movne	r6, #1
   15614:	tst	fp, r6
   15618:	bne	15688 <__assert_fail@plt+0x3ea8>
   1561c:	ldr	r2, [sp, #12]
   15620:	cmp	r7, #0
   15624:	ldr	r3, [r5]
   15628:	mov	r0, #0
   1562c:	strne	sl, [r9]
   15630:	cmp	r6, #0
   15634:	strne	r4, [r8]
   15638:	cmp	r2, r3
   1563c:	bne	1569c <__assert_fail@plt+0x3ebc>
   15640:	add	sp, sp, #20
   15644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15648:	adds	r7, r9, #0
   1564c:	mov	fp, #1
   15650:	mov	r3, fp
   15654:	mov	r4, #0
   15658:	movne	r7, #1
   1565c:	tst	r3, r7
   15660:	mov	sl, r4
   15664:	beq	1560c <__assert_fail@plt+0x3e2c>
   15668:	ldr	r0, [pc, #56]	; 156a8 <__assert_fail@plt+0x3ec8>
   1566c:	add	r0, pc, r0
   15670:	bl	154f0 <__assert_fail@plt+0x3d10>
   15674:	adds	r6, r8, #0
   15678:	movne	r6, #1
   1567c:	tst	fp, r6
   15680:	mov	sl, r0
   15684:	beq	1561c <__assert_fail@plt+0x3e3c>
   15688:	ldr	r0, [pc, #28]	; 156ac <__assert_fail@plt+0x3ecc>
   1568c:	add	r0, pc, r0
   15690:	bl	154f0 <__assert_fail@plt+0x3d10>
   15694:	mov	r4, r0
   15698:	b	1561c <__assert_fail@plt+0x3e3c>
   1569c:	bl	114ec <__stack_chk_fail@plt>
   156a0:	andeq	r2, r1, ip, asr #20
   156a4:	andeq	r0, r0, r0, asr r1
   156a8:	andeq	r2, r0, r4, lsr r2
   156ac:	andeq	r2, r0, ip, lsl r2
   156b0:	ldr	r3, [pc, #204]	; 15784 <__assert_fail@plt+0x3fa4>
   156b4:	mov	r0, #0
   156b8:	ldr	ip, [pc, #200]	; 15788 <__assert_fail@plt+0x3fa8>
   156bc:	movw	r1, #21523	; 0x5413
   156c0:	add	r3, pc, r3
   156c4:	push	{r4, r5, r6, r7, r8, lr}
   156c8:	sub	sp, sp, #16
   156cc:	ldr	r4, [r3, ip]
   156d0:	add	r2, sp, #4
   156d4:	ldr	r3, [r4]
   156d8:	str	r3, [sp, #12]
   156dc:	bl	11534 <ioctl@plt>
   156e0:	cmp	r0, #0
   156e4:	bne	15704 <__assert_fail@plt+0x3f24>
   156e8:	ldrh	r0, [sp, #6]
   156ec:	ldr	r2, [sp, #12]
   156f0:	ldr	r3, [r4]
   156f4:	cmp	r2, r3
   156f8:	bne	15780 <__assert_fail@plt+0x3fa0>
   156fc:	add	sp, sp, #16
   15700:	pop	{r4, r5, r6, r7, r8, pc}
   15704:	ldr	r0, [pc, #128]	; 1578c <__assert_fail@plt+0x3fac>
   15708:	add	r0, pc, r0
   1570c:	bl	11588 <getenv@plt>
   15710:	subs	r8, r0, #0
   15714:	moveq	r0, r8
   15718:	beq	156ec <__assert_fail@plt+0x3f0c>
   1571c:	add	r5, sp, #16
   15720:	mov	r7, #0
   15724:	str	r7, [r5, #-16]!
   15728:	bl	11630 <__errno_location@plt>
   1572c:	mov	r1, sp
   15730:	mov	r2, #10
   15734:	mov	r6, r0
   15738:	mov	r0, r8
   1573c:	str	r7, [r6]
   15740:	bl	1145c <strtol@plt>
   15744:	ldr	r3, [r6]
   15748:	cmp	r3, r7
   1574c:	bne	15778 <__assert_fail@plt+0x3f98>
   15750:	ldr	r3, [sp]
   15754:	cmp	r3, r7
   15758:	beq	15778 <__assert_fail@plt+0x3f98>
   1575c:	ldrsb	r2, [r3]
   15760:	cmp	r2, r7
   15764:	bne	15778 <__assert_fail@plt+0x3f98>
   15768:	cmp	r8, r3
   1576c:	bcs	15778 <__assert_fail@plt+0x3f98>
   15770:	cmp	r0, r7
   15774:	bgt	156ec <__assert_fail@plt+0x3f0c>
   15778:	mov	r0, #0
   1577c:	b	156ec <__assert_fail@plt+0x3f0c>
   15780:	bl	114ec <__stack_chk_fail@plt>
   15784:	andeq	r2, r1, r8, lsr r9
   15788:	andeq	r0, r0, r0, asr r1
   1578c:	muleq	r0, r8, r1
   15790:	push	{r3, r4, r5, r6, r7, lr}
   15794:	subs	r7, r2, #0
   15798:	mov	r5, r3
   1579c:	mov	r4, r1
   157a0:	movne	r3, #0
   157a4:	strne	r3, [r7]
   157a8:	cmp	r1, #0
   157ac:	movne	r3, #0
   157b0:	strne	r3, [r1]
   157b4:	cmp	r5, #0
   157b8:	movne	r3, #0
   157bc:	strne	r3, [r5]
   157c0:	bl	11600 <ttyname@plt>
   157c4:	subs	r6, r0, #0
   157c8:	beq	15864 <__assert_fail@plt+0x4084>
   157cc:	ldr	r1, [pc, #152]	; 1586c <__assert_fail@plt+0x408c>
   157d0:	cmp	r4, #0
   157d4:	mov	r0, r6
   157d8:	strne	r6, [r4]
   157dc:	add	r1, pc, r1
   157e0:	mov	r2, #5
   157e4:	bl	117a4 <strncmp@plt>
   157e8:	cmp	r0, #0
   157ec:	addeq	r6, r6, #5
   157f0:	cmp	r7, #0
   157f4:	strne	r6, [r7]
   157f8:	cmp	r5, #0
   157fc:	beq	1585c <__assert_fail@plt+0x407c>
   15800:	cmp	r6, #0
   15804:	beq	1585c <__assert_fail@plt+0x407c>
   15808:	ldrb	r4, [r6]
   1580c:	cmp	r4, #0
   15810:	beq	1585c <__assert_fail@plt+0x407c>
   15814:	bl	115dc <__ctype_b_loc@plt>
   15818:	mov	r2, r6
   1581c:	ldr	r3, [r0]
   15820:	b	15838 <__assert_fail@plt+0x4058>
   15824:	cmn	r2, #1
   15828:	beq	1585c <__assert_fail@plt+0x407c>
   1582c:	ldrb	r4, [r2, #1]!
   15830:	cmp	r4, #0
   15834:	beq	1585c <__assert_fail@plt+0x407c>
   15838:	sxtb	r4, r4
   1583c:	sxth	r4, r4
   15840:	lsl	r4, r4, #1
   15844:	ldrh	r4, [r3, r4]
   15848:	and	r4, r4, #2048	; 0x800
   1584c:	uxth	r4, r4
   15850:	cmp	r4, #0
   15854:	beq	15824 <__assert_fail@plt+0x4044>
   15858:	str	r2, [r5]
   1585c:	mov	r0, #0
   15860:	pop	{r3, r4, r5, r6, r7, pc}
   15864:	mvn	r0, #0
   15868:	pop	{r3, r4, r5, r6, r7, pc}
   1586c:	ldrdeq	r2, [r0], -r4
   15870:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15874:	mov	r6, r0
   15878:	ldr	r0, [r0]
   1587c:	mov	r7, r1
   15880:	cmp	r0, #0
   15884:	beq	158f0 <__assert_fail@plt+0x4110>
   15888:	add	r4, r6, #4
   1588c:	mov	r5, r6
   15890:	mov	r9, #0
   15894:	movw	r8, #65533	; 0xfffd
   15898:	b	158ac <__assert_fail@plt+0x40cc>
   1589c:	ldr	r0, [r5, #4]!
   158a0:	mov	r9, r3
   158a4:	cmp	r0, #0
   158a8:	beq	158e4 <__assert_fail@plt+0x4104>
   158ac:	bl	11474 <wcwidth@plt>
   158b0:	mov	r6, r5
   158b4:	mov	r2, r4
   158b8:	add	r4, r4, #4
   158bc:	cmn	r0, #1
   158c0:	streq	r8, [r4, #-8]
   158c4:	moveq	r0, #1
   158c8:	add	r3, r0, r9
   158cc:	cmp	r3, r7
   158d0:	bls	1589c <__assert_fail@plt+0x40bc>
   158d4:	mov	r3, #0
   158d8:	mov	r0, r9
   158dc:	str	r3, [r6]
   158e0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   158e4:	mov	r9, r3
   158e8:	mov	r6, r2
   158ec:	b	158d4 <__assert_fail@plt+0x40f4>
   158f0:	mov	r9, r0
   158f4:	b	158d4 <__assert_fail@plt+0x40f4>
   158f8:	ldr	r3, [pc, #440]	; 15ab8 <__assert_fail@plt+0x42d8>
   158fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15900:	subs	r4, r0, #0
   15904:	ldr	r0, [pc, #432]	; 15abc <__assert_fail@plt+0x42dc>
   15908:	sub	sp, sp, #28
   1590c:	add	r3, pc, r3
   15910:	add	r8, sp, #12
   15914:	str	r2, [sp, #4]
   15918:	mov	r5, #0
   1591c:	ldr	r0, [r3, r0]
   15920:	str	r5, [r8, #4]
   15924:	str	r5, [sp, #12]
   15928:	ldr	r3, [r0]
   1592c:	str	r0, [sp]
   15930:	str	r3, [sp, #20]
   15934:	beq	15aa0 <__assert_fail@plt+0x42c0>
   15938:	ldrb	sl, [r4]
   1593c:	cmp	sl, r5
   15940:	moveq	r5, sl
   15944:	moveq	r6, r5
   15948:	beq	15a1c <__assert_fail@plt+0x423c>
   1594c:	cmp	r1, r5
   15950:	beq	15a98 <__assert_fail@plt+0x42b8>
   15954:	sub	r1, r1, #1
   15958:	adds	r7, r4, r1
   1595c:	bcs	15aac <__assert_fail@plt+0x42cc>
   15960:	mov	r5, #0
   15964:	add	r9, sp, #8
   15968:	mov	r6, r5
   1596c:	b	15998 <__assert_fail@plt+0x41b8>
   15970:	add	r4, r4, #1
   15974:	add	r6, r6, #4
   15978:	cmp	r4, #0
   1597c:	add	r5, r5, #4
   15980:	beq	15a1c <__assert_fail@plt+0x423c>
   15984:	ldrb	sl, [r4]
   15988:	cmp	sl, #0
   1598c:	beq	15a1c <__assert_fail@plt+0x423c>
   15990:	cmp	r4, r7
   15994:	bhi	15a1c <__assert_fail@plt+0x423c>
   15998:	cmp	r4, r7
   1599c:	bcs	159a8 <__assert_fail@plt+0x41c8>
   159a0:	cmp	sl, #92	; 0x5c
   159a4:	beq	15a48 <__assert_fail@plt+0x4268>
   159a8:	bl	115dc <__ctype_b_loc@plt>
   159ac:	lsl	r3, sl, #1
   159b0:	ldr	r2, [r0]
   159b4:	mov	fp, r0
   159b8:	ldrh	r3, [r2, r3]
   159bc:	tst	r3, #2
   159c0:	bne	15970 <__assert_fail@plt+0x4190>
   159c4:	bl	11540 <__ctype_get_mb_cur_max@plt>
   159c8:	mov	r1, r4
   159cc:	mov	r3, r8
   159d0:	mov	r2, r0
   159d4:	mov	r0, r9
   159d8:	bl	11558 <mbrtowc@plt>
   159dc:	subs	sl, r0, #0
   159e0:	beq	15a1c <__assert_fail@plt+0x423c>
   159e4:	add	r2, sl, #2
   159e8:	cmp	r2, #1
   159ec:	bls	15a58 <__assert_fail@plt+0x4278>
   159f0:	ldr	fp, [sp, #8]
   159f4:	mov	r0, fp
   159f8:	bl	11528 <iswprint@plt>
   159fc:	cmp	r0, #0
   15a00:	bne	15a84 <__assert_fail@plt+0x42a4>
   15a04:	lsl	r2, sl, #2
   15a08:	add	r6, r6, r2
   15a0c:	add	r5, r5, r2
   15a10:	add	r4, r4, sl
   15a14:	cmp	r4, #0
   15a18:	bne	15984 <__assert_fail@plt+0x41a4>
   15a1c:	ldr	r3, [sp, #4]
   15a20:	mov	r0, r6
   15a24:	ldr	r1, [sp]
   15a28:	cmp	r3, #0
   15a2c:	ldr	r2, [sp, #20]
   15a30:	strne	r5, [r3]
   15a34:	ldr	r3, [r1]
   15a38:	cmp	r2, r3
   15a3c:	bne	15ab4 <__assert_fail@plt+0x42d4>
   15a40:	add	sp, sp, #28
   15a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a48:	ldrsb	r2, [r4, #1]
   15a4c:	cmp	r2, #120	; 0x78
   15a50:	bne	159a8 <__assert_fail@plt+0x41c8>
   15a54:	b	15970 <__assert_fail@plt+0x4190>
   15a58:	ldrb	r3, [r4]
   15a5c:	mov	sl, #1
   15a60:	ldr	r2, [fp]
   15a64:	lsl	r3, r3, #1
   15a68:	ldrh	r3, [r2, r3]
   15a6c:	tst	r3, #16384	; 0x4000
   15a70:	addne	r6, r6, #1
   15a74:	addne	r5, r5, #1
   15a78:	addeq	r6, r6, #4
   15a7c:	addeq	r5, r5, #4
   15a80:	b	15a10 <__assert_fail@plt+0x4230>
   15a84:	mov	r0, fp
   15a88:	add	r5, r5, sl
   15a8c:	bl	11474 <wcwidth@plt>
   15a90:	add	r6, r6, r0
   15a94:	b	15a10 <__assert_fail@plt+0x4230>
   15a98:	mov	r7, r4
   15a9c:	b	15960 <__assert_fail@plt+0x4180>
   15aa0:	mov	r5, r4
   15aa4:	mov	r6, r4
   15aa8:	b	15a1c <__assert_fail@plt+0x423c>
   15aac:	mov	r6, r5
   15ab0:	b	15a1c <__assert_fail@plt+0x423c>
   15ab4:	bl	114ec <__stack_chk_fail@plt>
   15ab8:	andeq	r2, r1, ip, ror #13
   15abc:	andeq	r0, r0, r0, asr r1
   15ac0:	push	{r4, lr}
   15ac4:	subs	r4, r0, #0
   15ac8:	beq	15ad8 <__assert_fail@plt+0x42f8>
   15acc:	ldrsb	r3, [r4]
   15ad0:	cmp	r3, #0
   15ad4:	bne	15ae0 <__assert_fail@plt+0x4300>
   15ad8:	mov	r0, #0
   15adc:	pop	{r4, pc}
   15ae0:	bl	1160c <strlen@plt>
   15ae4:	mov	r2, #0
   15ae8:	mov	r1, r0
   15aec:	mov	r0, r4
   15af0:	pop	{r4, lr}
   15af4:	b	158f8 <__assert_fail@plt+0x4118>
   15af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15afc:	sub	sp, sp, #52	; 0x34
   15b00:	ldr	r5, [pc, #664]	; 15da0 <__assert_fail@plt+0x45c0>
   15b04:	mov	r8, r3
   15b08:	ldr	ip, [pc, #660]	; 15da4 <__assert_fail@plt+0x45c4>
   15b0c:	subs	r4, r0, #0
   15b10:	add	r5, pc, r5
   15b14:	str	r2, [sp, #12]
   15b18:	mov	r6, r1
   15b1c:	ldr	ip, [r5, ip]
   15b20:	mov	r3, r5
   15b24:	ldr	r3, [ip]
   15b28:	str	ip, [sp, #20]
   15b2c:	str	r3, [sp, #44]	; 0x2c
   15b30:	beq	15d84 <__assert_fail@plt+0x45a4>
   15b34:	bl	1160c <strlen@plt>
   15b38:	ldr	r2, [sp, #12]
   15b3c:	mov	r3, #0
   15b40:	add	r1, sp, #36	; 0x24
   15b44:	str	r3, [sp, #36]	; 0x24
   15b48:	str	r1, [sp, #16]
   15b4c:	str	r3, [sp, #40]	; 0x28
   15b50:	cmp	r2, r3
   15b54:	cmpne	r0, r3
   15b58:	movne	r0, #0
   15b5c:	moveq	r0, #1
   15b60:	moveq	r0, r3
   15b64:	beq	15c50 <__assert_fail@plt+0x4470>
   15b68:	str	r0, [r6]
   15b6c:	ldrb	sl, [r4]
   15b70:	cmp	sl, r3
   15b74:	beq	15d94 <__assert_fail@plt+0x45b4>
   15b78:	ldr	r3, [pc, #552]	; 15da8 <__assert_fail@plt+0x45c8>
   15b7c:	mov	r5, r2
   15b80:	ldr	r9, [pc, #548]	; 15dac <__assert_fail@plt+0x45cc>
   15b84:	add	r1, sp, #32
   15b88:	ldr	r2, [pc, #544]	; 15db0 <__assert_fail@plt+0x45d0>
   15b8c:	add	r3, pc, r3
   15b90:	str	r1, [sp, #24]
   15b94:	add	r9, pc, r9
   15b98:	add	r2, pc, r2
   15b9c:	str	r3, [sp, #8]
   15ba0:	str	r2, [sp, #28]
   15ba4:	b	15bc8 <__assert_fail@plt+0x43e8>
   15ba8:	strb	sl, [r5]
   15bac:	add	r4, r4, #1
   15bb0:	add	r5, r5, #1
   15bb4:	cmp	r4, #0
   15bb8:	beq	15c44 <__assert_fail@plt+0x4464>
   15bbc:	ldrb	sl, [r4]
   15bc0:	cmp	sl, #0
   15bc4:	beq	15c44 <__assert_fail@plt+0x4464>
   15bc8:	cmp	r8, #0
   15bcc:	sxtb	r7, sl
   15bd0:	beq	15be8 <__assert_fail@plt+0x4408>
   15bd4:	mov	r0, r8
   15bd8:	mov	r1, r7
   15bdc:	bl	11618 <strchr@plt>
   15be0:	cmp	r0, #0
   15be4:	bne	15ba8 <__assert_fail@plt+0x43c8>
   15be8:	cmp	r7, #92	; 0x5c
   15bec:	beq	15c6c <__assert_fail@plt+0x448c>
   15bf0:	bl	115dc <__ctype_b_loc@plt>
   15bf4:	uxtb	sl, sl
   15bf8:	lsl	r3, sl, #1
   15bfc:	ldr	r2, [r0]
   15c00:	mov	r7, r0
   15c04:	ldrh	r3, [r2, r3]
   15c08:	tst	r3, #2
   15c0c:	beq	15c80 <__assert_fail@plt+0x44a0>
   15c10:	ldr	r3, [sp, #8]
   15c14:	mov	r0, r5
   15c18:	mov	r1, #1
   15c1c:	mvn	r2, #0
   15c20:	str	sl, [sp]
   15c24:	add	r4, r4, r1
   15c28:	bl	11648 <__sprintf_chk@plt>
   15c2c:	ldr	r3, [r6]
   15c30:	cmp	r4, #0
   15c34:	add	r5, r5, #4
   15c38:	add	r3, r3, #4
   15c3c:	str	r3, [r6]
   15c40:	bne	15bbc <__assert_fail@plt+0x43dc>
   15c44:	ldr	r0, [sp, #12]
   15c48:	mov	r3, #0
   15c4c:	strb	r3, [r5]
   15c50:	ldr	r1, [sp, #20]
   15c54:	ldr	r2, [sp, #44]	; 0x2c
   15c58:	ldr	r3, [r1]
   15c5c:	cmp	r2, r3
   15c60:	bne	15d9c <__assert_fail@plt+0x45bc>
   15c64:	add	sp, sp, #52	; 0x34
   15c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c6c:	ldrsb	r3, [r4, #1]
   15c70:	cmp	r3, #120	; 0x78
   15c74:	bne	15bf0 <__assert_fail@plt+0x4410>
   15c78:	mov	sl, r7
   15c7c:	b	15c10 <__assert_fail@plt+0x4430>
   15c80:	bl	11540 <__ctype_get_mb_cur_max@plt>
   15c84:	mov	r1, r4
   15c88:	add	r3, sp, #36	; 0x24
   15c8c:	mov	r2, r0
   15c90:	add	r0, sp, #32
   15c94:	bl	11558 <mbrtowc@plt>
   15c98:	subs	sl, r0, #0
   15c9c:	beq	15c44 <__assert_fail@plt+0x4464>
   15ca0:	add	r3, sl, #2
   15ca4:	cmp	r3, #1
   15ca8:	bls	15d08 <__assert_fail@plt+0x4528>
   15cac:	ldr	r7, [sp, #32]
   15cb0:	mov	r0, r7
   15cb4:	bl	11528 <iswprint@plt>
   15cb8:	cmp	r0, #0
   15cbc:	bne	15d3c <__assert_fail@plt+0x455c>
   15cc0:	mov	r7, r4
   15cc4:	add	r4, r4, sl
   15cc8:	mov	fp, r5
   15ccc:	ldrb	ip, [r7], #1
   15cd0:	mov	r0, fp
   15cd4:	mov	r3, r9
   15cd8:	mov	r1, #1
   15cdc:	mvn	r2, #0
   15ce0:	add	fp, fp, #4
   15ce4:	str	ip, [sp]
   15ce8:	bl	11648 <__sprintf_chk@plt>
   15cec:	ldr	r3, [r6]
   15cf0:	cmp	r7, r4
   15cf4:	add	r3, r3, #4
   15cf8:	str	r3, [r6]
   15cfc:	bne	15ccc <__assert_fail@plt+0x44ec>
   15d00:	add	r5, r5, sl, lsl #2
   15d04:	b	15bb4 <__assert_fail@plt+0x43d4>
   15d08:	ldrb	r3, [r4]
   15d0c:	ldr	r1, [r7]
   15d10:	lsl	r2, r3, #1
   15d14:	ldrh	r2, [r1, r2]
   15d18:	tst	r2, #16384	; 0x4000
   15d1c:	beq	15d6c <__assert_fail@plt+0x458c>
   15d20:	ldr	r3, [r6]
   15d24:	add	r5, r5, #1
   15d28:	add	r3, r3, #1
   15d2c:	str	r3, [r6]
   15d30:	ldrb	r3, [r4], #1
   15d34:	strb	r3, [r5, #-1]
   15d38:	b	15bb4 <__assert_fail@plt+0x43d4>
   15d3c:	mov	r1, r4
   15d40:	mov	r0, r5
   15d44:	mov	r2, sl
   15d48:	add	r5, r5, sl
   15d4c:	bl	114bc <memcpy@plt>
   15d50:	mov	r0, r7
   15d54:	ldr	r7, [r6]
   15d58:	bl	11474 <wcwidth@plt>
   15d5c:	add	r4, sl, r4
   15d60:	add	r0, r0, r7
   15d64:	str	r0, [r6]
   15d68:	b	15bb4 <__assert_fail@plt+0x43d4>
   15d6c:	str	r3, [sp]
   15d70:	mov	r0, r5
   15d74:	mov	r1, #1
   15d78:	mvn	r2, #0
   15d7c:	ldr	r3, [sp, #28]
   15d80:	b	15c24 <__assert_fail@plt+0x4444>
   15d84:	str	r4, [sp, #36]	; 0x24
   15d88:	mov	r0, r4
   15d8c:	str	r4, [sp, #40]	; 0x28
   15d90:	b	15c50 <__assert_fail@plt+0x4470>
   15d94:	ldr	r5, [sp, #12]
   15d98:	b	15c44 <__assert_fail@plt+0x4464>
   15d9c:	bl	114ec <__stack_chk_fail@plt>
   15da0:	andeq	r2, r1, r8, ror #9
   15da4:	andeq	r0, r0, r0, asr r1
   15da8:	ldrdeq	r1, [r0], -r8
   15dac:	ldrdeq	r1, [r0], -r0
   15db0:	andeq	r1, r0, ip, asr #25
   15db4:	ldr	r3, [pc, #492]	; 15fa8 <__assert_fail@plt+0x47c8>
   15db8:	ldr	ip, [pc, #492]	; 15fac <__assert_fail@plt+0x47cc>
   15dbc:	add	r3, pc, r3
   15dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dc4:	subs	r4, r0, #0
   15dc8:	ldr	ip, [r3, ip]
   15dcc:	sub	sp, sp, #44	; 0x2c
   15dd0:	mov	r6, r1
   15dd4:	mov	r9, r2
   15dd8:	ldr	r3, [ip]
   15ddc:	str	ip, [sp, #12]
   15de0:	str	r3, [sp, #36]	; 0x24
   15de4:	beq	15f8c <__assert_fail@plt+0x47ac>
   15de8:	bl	1160c <strlen@plt>
   15dec:	add	r7, sp, #28
   15df0:	mov	r3, #0
   15df4:	str	r3, [sp, #28]
   15df8:	str	r3, [r7, #4]
   15dfc:	cmp	r9, r3
   15e00:	cmpne	r0, r3
   15e04:	movne	r0, #0
   15e08:	moveq	r0, #1
   15e0c:	moveq	r0, r3
   15e10:	beq	15f14 <__assert_fail@plt+0x4734>
   15e14:	str	r0, [r6]
   15e18:	ldrsb	r3, [r4]
   15e1c:	cmp	r3, #0
   15e20:	beq	15f9c <__assert_fail@plt+0x47bc>
   15e24:	ldr	r1, [pc, #388]	; 15fb0 <__assert_fail@plt+0x47d0>
   15e28:	add	r8, sp, #24
   15e2c:	ldr	r2, [pc, #384]	; 15fb4 <__assert_fail@plt+0x47d4>
   15e30:	mov	r5, r9
   15e34:	add	r1, pc, r1
   15e38:	str	r1, [sp, #20]
   15e3c:	add	r2, pc, r2
   15e40:	str	r2, [sp, #16]
   15e44:	b	15e9c <__assert_fail@plt+0x46bc>
   15e48:	ldrsb	r3, [r4]
   15e4c:	cmp	r3, #92	; 0x5c
   15e50:	bne	15e60 <__assert_fail@plt+0x4680>
   15e54:	ldrsb	r2, [r4, #1]
   15e58:	cmp	r2, #120	; 0x78
   15e5c:	beq	15f60 <__assert_fail@plt+0x4780>
   15e60:	mov	r0, r5
   15e64:	mov	r1, r4
   15e68:	mov	r2, sl
   15e6c:	add	r5, r5, sl
   15e70:	bl	114bc <memcpy@plt>
   15e74:	ldr	r0, [sp, #24]
   15e78:	ldr	fp, [r6]
   15e7c:	bl	11474 <wcwidth@plt>
   15e80:	add	r0, r0, fp
   15e84:	str	r0, [r6]
   15e88:	adds	r4, r4, sl
   15e8c:	beq	15f08 <__assert_fail@plt+0x4728>
   15e90:	ldrsb	r3, [r4]
   15e94:	cmp	r3, #0
   15e98:	beq	15f08 <__assert_fail@plt+0x4728>
   15e9c:	bl	11540 <__ctype_get_mb_cur_max@plt>
   15ea0:	mov	r1, r4
   15ea4:	mov	r3, r7
   15ea8:	mov	r2, r0
   15eac:	mov	r0, r8
   15eb0:	bl	11558 <mbrtowc@plt>
   15eb4:	subs	sl, r0, #0
   15eb8:	beq	15f08 <__assert_fail@plt+0x4728>
   15ebc:	add	r3, sl, #2
   15ec0:	cmp	r3, #1
   15ec4:	bhi	15e48 <__assert_fail@plt+0x4668>
   15ec8:	bl	115dc <__ctype_b_loc@plt>
   15ecc:	ldrb	r3, [r4]
   15ed0:	lsl	r2, r3, #1
   15ed4:	ldr	r1, [r0]
   15ed8:	ldrh	r2, [r1, r2]
   15edc:	tst	r2, #16384	; 0x4000
   15ee0:	beq	15f30 <__assert_fail@plt+0x4750>
   15ee4:	ldr	r3, [r6]
   15ee8:	mov	sl, #1
   15eec:	add	r3, r3, sl
   15ef0:	str	r3, [r6]
   15ef4:	ldrb	r3, [r4]
   15ef8:	adds	r4, r4, sl
   15efc:	strb	r3, [r5]
   15f00:	add	r5, r5, sl
   15f04:	bne	15e90 <__assert_fail@plt+0x46b0>
   15f08:	mov	r0, r9
   15f0c:	mov	r3, #0
   15f10:	strb	r3, [r5]
   15f14:	ldr	r1, [sp, #12]
   15f18:	ldr	r2, [sp, #36]	; 0x24
   15f1c:	ldr	r3, [r1]
   15f20:	cmp	r2, r3
   15f24:	bne	15fa4 <__assert_fail@plt+0x47c4>
   15f28:	add	sp, sp, #44	; 0x2c
   15f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f30:	str	r3, [sp]
   15f34:	mov	r0, r5
   15f38:	ldr	r3, [sp, #16]
   15f3c:	mov	r1, #1
   15f40:	mvn	r2, #0
   15f44:	add	r5, r5, #4
   15f48:	bl	11648 <__sprintf_chk@plt>
   15f4c:	ldr	r3, [r6]
   15f50:	mov	sl, #1
   15f54:	add	r3, r3, #4
   15f58:	str	r3, [r6]
   15f5c:	b	15e88 <__assert_fail@plt+0x46a8>
   15f60:	str	r3, [sp]
   15f64:	mov	r0, r5
   15f68:	ldr	r3, [sp, #20]
   15f6c:	mov	r1, #1
   15f70:	mvn	r2, #0
   15f74:	add	r5, r5, #4
   15f78:	bl	11648 <__sprintf_chk@plt>
   15f7c:	ldr	r3, [r6]
   15f80:	add	r3, r3, #4
   15f84:	str	r3, [r6]
   15f88:	b	15e88 <__assert_fail@plt+0x46a8>
   15f8c:	str	r4, [sp, #28]
   15f90:	mov	r0, r4
   15f94:	str	r4, [sp, #32]
   15f98:	b	15f14 <__assert_fail@plt+0x4734>
   15f9c:	mov	r5, r9
   15fa0:	b	15f08 <__assert_fail@plt+0x4728>
   15fa4:	bl	114ec <__stack_chk_fail@plt>
   15fa8:	andeq	r2, r1, ip, lsr r2
   15fac:	andeq	r0, r0, r0, asr r1
   15fb0:	andeq	r1, r0, r0, lsr sl
   15fb4:	andeq	r1, r0, r8, lsr #20
   15fb8:	lsl	r0, r0, #2
   15fbc:	add	r0, r0, #1
   15fc0:	bx	lr
   15fc4:	push	{r4, r5, r6, lr}
   15fc8:	subs	r4, r0, #0
   15fcc:	mov	r6, r1
   15fd0:	beq	16018 <__assert_fail@plt+0x4838>
   15fd4:	bl	1160c <strlen@plt>
   15fd8:	subs	r3, r0, #0
   15fdc:	beq	16018 <__assert_fail@plt+0x4838>
   15fe0:	bl	15fb8 <__assert_fail@plt+0x47d8>
   15fe4:	bl	11594 <malloc@plt>
   15fe8:	subs	r5, r0, #0
   15fec:	beq	16010 <__assert_fail@plt+0x4830>
   15ff0:	mov	r0, r4
   15ff4:	mov	r1, r6
   15ff8:	mov	r2, r5
   15ffc:	mov	r3, #0
   16000:	bl	15af8 <__assert_fail@plt+0x4318>
   16004:	cmp	r0, #0
   16008:	beq	16010 <__assert_fail@plt+0x4830>
   1600c:	pop	{r4, r5, r6, pc}
   16010:	mov	r0, r5
   16014:	bl	11480 <free@plt>
   16018:	mov	r0, #0
   1601c:	pop	{r4, r5, r6, pc}
   16020:	push	{r4, r5, r6, lr}
   16024:	subs	r4, r0, #0
   16028:	mov	r6, r1
   1602c:	beq	16070 <__assert_fail@plt+0x4890>
   16030:	bl	1160c <strlen@plt>
   16034:	subs	r3, r0, #0
   16038:	beq	16070 <__assert_fail@plt+0x4890>
   1603c:	bl	15fb8 <__assert_fail@plt+0x47d8>
   16040:	bl	11594 <malloc@plt>
   16044:	subs	r5, r0, #0
   16048:	beq	16068 <__assert_fail@plt+0x4888>
   1604c:	mov	r0, r4
   16050:	mov	r1, r6
   16054:	mov	r2, r5
   16058:	bl	15db4 <__assert_fail@plt+0x45d4>
   1605c:	cmp	r0, #0
   16060:	beq	16068 <__assert_fail@plt+0x4888>
   16064:	pop	{r4, r5, r6, pc}
   16068:	mov	r0, r5
   1606c:	bl	11480 <free@plt>
   16070:	mov	r0, #0
   16074:	pop	{r4, r5, r6, pc}
   16078:	push	{r4, r5, r6, r7, r8, lr}
   1607c:	mov	r8, r1
   16080:	mov	r5, r0
   16084:	bl	1160c <strlen@plt>
   16088:	mov	r1, r5
   1608c:	mov	r4, r0
   16090:	mov	r0, #0
   16094:	mov	r2, r0
   16098:	bl	11738 <mbstowcs@plt>
   1609c:	cmn	r0, #1
   160a0:	mov	r6, r0
   160a4:	moveq	r7, #0
   160a8:	beq	160d8 <__assert_fail@plt+0x48f8>
   160ac:	add	r1, r0, #1
   160b0:	mov	r0, #1
   160b4:	lsl	r1, r1, #2
   160b8:	bl	1142c <calloc@plt>
   160bc:	subs	r7, r0, #0
   160c0:	beq	160d8 <__assert_fail@plt+0x48f8>
   160c4:	mov	r2, r6
   160c8:	mov	r1, r5
   160cc:	bl	11738 <mbstowcs@plt>
   160d0:	cmp	r0, #0
   160d4:	bne	160f4 <__assert_fail@plt+0x4914>
   160d8:	mov	r0, r7
   160dc:	bl	11480 <free@plt>
   160e0:	cmp	r4, #0
   160e4:	mov	r0, r4
   160e8:	movge	r3, #0
   160ec:	strbge	r3, [r5, r4]
   160f0:	pop	{r4, r5, r6, r7, r8, pc}
   160f4:	ldr	r1, [r8]
   160f8:	mov	r0, r7
   160fc:	bl	15870 <__assert_fail@plt+0x4090>
   16100:	mov	r2, r4
   16104:	mov	r1, r7
   16108:	str	r0, [r8]
   1610c:	mov	r0, r5
   16110:	bl	11564 <wcstombs@plt>
   16114:	mov	r4, r0
   16118:	b	160d8 <__assert_fail@plt+0x48f8>
   1611c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16120:	sub	sp, sp, #12
   16124:	mov	r8, r1
   16128:	mov	r9, r2
   1612c:	mov	r6, r3
   16130:	str	r0, [sp]
   16134:	bl	1160c <strlen@plt>
   16138:	mov	r7, r0
   1613c:	bl	11540 <__ctype_get_mb_cur_max@plt>
   16140:	cmp	r0, #1
   16144:	bls	162d8 <__assert_fail@plt+0x4af8>
   16148:	mov	r0, #0
   1614c:	ldr	r1, [sp]
   16150:	mov	r2, r0
   16154:	bl	11738 <mbstowcs@plt>
   16158:	cmn	r0, #1
   1615c:	mov	r4, r0
   16160:	beq	162bc <__assert_fail@plt+0x4adc>
   16164:	add	fp, r0, #1
   16168:	lsl	sl, fp, #2
   1616c:	mov	r0, sl
   16170:	bl	11594 <malloc@plt>
   16174:	subs	r5, r0, #0
   16178:	beq	16458 <__assert_fail@plt+0x4c78>
   1617c:	mov	r2, fp
   16180:	ldr	r1, [sp]
   16184:	bl	11738 <mbstowcs@plt>
   16188:	cmp	r0, #0
   1618c:	bne	16320 <__assert_fail@plt+0x4b40>
   16190:	mov	sl, r7
   16194:	mov	fp, #0
   16198:	ldr	r2, [r6]
   1619c:	cmp	sl, r2
   161a0:	movhi	sl, r2
   161a4:	movhi	r3, #0
   161a8:	bls	162f4 <__assert_fail@plt+0x4b14>
   161ac:	cmp	r9, #0
   161b0:	str	sl, [r6]
   161b4:	add	r6, r2, r3
   161b8:	beq	162a0 <__assert_fail@plt+0x4ac0>
   161bc:	ldr	r1, [sp, #48]	; 0x30
   161c0:	sub	r9, r9, #1
   161c4:	add	r9, r8, r9
   161c8:	cmp	r1, #1
   161cc:	beq	16428 <__assert_fail@plt+0x4c48>
   161d0:	bcc	16418 <__assert_fail@plt+0x4c38>
   161d4:	cmp	r1, #2
   161d8:	bne	1630c <__assert_fail@plt+0x4b2c>
   161dc:	lsr	r4, r3, #1
   161e0:	and	r3, r3, #1
   161e4:	adds	r3, r3, r4
   161e8:	moveq	r1, #0
   161ec:	movne	r1, #1
   161f0:	adds	r7, r4, #0
   161f4:	movne	r7, #1
   161f8:	cmp	r8, r9
   161fc:	movcs	r1, #0
   16200:	andcc	r1, r1, #1
   16204:	cmp	r1, #0
   16208:	beq	16238 <__assert_fail@plt+0x4a58>
   1620c:	ldr	r1, [sp, #56]	; 0x38
   16210:	uxtb	r0, r1
   16214:	subs	r3, r3, #1
   16218:	strb	r0, [r8], #1
   1621c:	moveq	r1, #0
   16220:	movne	r1, #1
   16224:	cmp	r9, r8
   16228:	movls	r1, #0
   1622c:	andhi	r1, r1, #1
   16230:	cmp	r1, #0
   16234:	bne	16214 <__assert_fail@plt+0x4a34>
   16238:	rsb	r3, r8, r9
   1623c:	ldr	r1, [sp]
   16240:	cmp	r3, r2
   16244:	movcc	r2, r3
   16248:	mov	r0, r8
   1624c:	mov	r3, #0
   16250:	strb	r3, [r8]
   16254:	bl	115c4 <mempcpy@plt>
   16258:	cmp	r9, r0
   1625c:	movls	r7, #0
   16260:	andhi	r7, r7, #1
   16264:	cmp	r7, #0
   16268:	beq	16298 <__assert_fail@plt+0x4ab8>
   1626c:	ldr	r3, [sp, #56]	; 0x38
   16270:	uxtb	r1, r3
   16274:	subs	r4, r4, #1
   16278:	strb	r1, [r0], #1
   1627c:	moveq	r2, #0
   16280:	movne	r2, #1
   16284:	cmp	r9, r0
   16288:	movls	r2, #0
   1628c:	andhi	r2, r2, #1
   16290:	cmp	r2, #0
   16294:	bne	16274 <__assert_fail@plt+0x4a94>
   16298:	mov	r2, #0
   1629c:	strb	r2, [r0]
   162a0:	mov	r0, r5
   162a4:	bl	11480 <free@plt>
   162a8:	mov	r0, fp
   162ac:	bl	11480 <free@plt>
   162b0:	mov	r0, r6
   162b4:	add	sp, sp, #12
   162b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162bc:	ldr	r1, [sp, #52]	; 0x34
   162c0:	tst	r1, #1
   162c4:	bne	16310 <__assert_fail@plt+0x4b30>
   162c8:	mov	r5, #0
   162cc:	mvn	r6, #0
   162d0:	mov	fp, r5
   162d4:	b	162a0 <__assert_fail@plt+0x4ac0>
   162d8:	mov	r5, #0
   162dc:	b	16190 <__assert_fail@plt+0x49b0>
   162e0:	ldr	r2, [r6]
   162e4:	cmp	r2, sl
   162e8:	addcc	r4, r7, #1
   162ec:	bcc	163dc <__assert_fail@plt+0x4bfc>
   162f0:	ldr	fp, [sp, #4]
   162f4:	cmp	r2, sl
   162f8:	rsbhi	r3, sl, r2
   162fc:	movls	r2, r7
   16300:	movls	r3, #0
   16304:	movhi	r2, r7
   16308:	b	161ac <__assert_fail@plt+0x49cc>
   1630c:	bl	117b0 <abort@plt>
   16310:	mov	r5, #0
   16314:	mov	sl, r7
   16318:	mov	fp, r5
   1631c:	b	16198 <__assert_fail@plt+0x49b8>
   16320:	add	sl, r5, sl
   16324:	mov	r3, #0
   16328:	str	r3, [sl, #-4]
   1632c:	ldr	r0, [r5]
   16330:	cmp	r0, r3
   16334:	beq	16480 <__assert_fail@plt+0x4ca0>
   16338:	add	fp, r5, #4
   1633c:	movw	sl, #65533	; 0xfffd
   16340:	str	r3, [sp, #4]
   16344:	bl	11528 <iswprint@plt>
   16348:	cmp	r0, #0
   1634c:	streq	sl, [fp, #-4]
   16350:	ldr	r0, [fp], #4
   16354:	moveq	r1, #1
   16358:	streq	r1, [sp, #4]
   1635c:	cmp	r0, #0
   16360:	bne	16344 <__assert_fail@plt+0x4b64>
   16364:	ldr	r0, [r5]
   16368:	cmp	r0, #0
   1636c:	beq	163b8 <__assert_fail@plt+0x4bd8>
   16370:	mov	sl, r5
   16374:	mov	fp, #0
   16378:	b	163ac <__assert_fail@plt+0x4bcc>
   1637c:	movw	r3, #65535	; 0xffff
   16380:	movt	r3, #32767	; 0x7fff
   16384:	rsb	r3, r0, r3
   16388:	cmp	r3, fp
   1638c:	blt	16478 <__assert_fail@plt+0x4c98>
   16390:	sub	r4, r4, #1
   16394:	add	fp, fp, r0
   16398:	cmn	r4, #1
   1639c:	beq	16470 <__assert_fail@plt+0x4c90>
   163a0:	ldr	r0, [sl, #4]!
   163a4:	cmp	r0, #0
   163a8:	beq	16470 <__assert_fail@plt+0x4c90>
   163ac:	bl	11474 <wcwidth@plt>
   163b0:	cmn	r0, #1
   163b4:	bne	1637c <__assert_fail@plt+0x4b9c>
   163b8:	mov	sl, r0
   163bc:	ldr	r3, [sp, #4]
   163c0:	cmp	r3, #0
   163c4:	beq	162e0 <__assert_fail@plt+0x4b00>
   163c8:	mov	r0, #0
   163cc:	mov	r1, r5
   163d0:	mov	r2, r0
   163d4:	bl	11564 <wcstombs@plt>
   163d8:	add	r4, r0, #1
   163dc:	mov	r0, r4
   163e0:	bl	11594 <malloc@plt>
   163e4:	subs	fp, r0, #0
   163e8:	beq	16444 <__assert_fail@plt+0x4c64>
   163ec:	ldr	r1, [r6]
   163f0:	mov	r0, r5
   163f4:	bl	15870 <__assert_fail@plt+0x4090>
   163f8:	mov	r1, r5
   163fc:	mov	r2, r4
   16400:	mov	sl, r0
   16404:	mov	r0, fp
   16408:	bl	11564 <wcstombs@plt>
   1640c:	str	fp, [sp]
   16410:	mov	r7, r0
   16414:	b	16198 <__assert_fail@plt+0x49b8>
   16418:	adds	r7, r3, #0
   1641c:	mov	r4, r3
   16420:	movne	r7, #1
   16424:	b	16238 <__assert_fail@plt+0x4a58>
   16428:	mov	r7, #0
   1642c:	cmp	r3, r7
   16430:	cmpne	r8, r9
   16434:	mov	r4, r7
   16438:	movcs	r1, #0
   1643c:	movcc	r1, #1
   16440:	b	16204 <__assert_fail@plt+0x4a24>
   16444:	ldr	r1, [sp, #52]	; 0x34
   16448:	tst	r1, #1
   1644c:	mvneq	r6, #0
   16450:	beq	162a0 <__assert_fail@plt+0x4ac0>
   16454:	b	16198 <__assert_fail@plt+0x49b8>
   16458:	ldr	r3, [sp, #52]	; 0x34
   1645c:	tst	r3, #1
   16460:	beq	162c8 <__assert_fail@plt+0x4ae8>
   16464:	mov	sl, r7
   16468:	mov	fp, r5
   1646c:	b	16198 <__assert_fail@plt+0x49b8>
   16470:	mov	sl, fp
   16474:	b	163bc <__assert_fail@plt+0x4bdc>
   16478:	mvn	sl, #0
   1647c:	b	163bc <__assert_fail@plt+0x4bdc>
   16480:	str	r0, [sp, #4]
   16484:	b	16364 <__assert_fail@plt+0x4b84>
   16488:	push	{r4, lr}
   1648c:	sub	sp, sp, #16
   16490:	mov	r4, #32
   16494:	ldr	lr, [sp, #24]
   16498:	ldr	ip, [sp, #28]
   1649c:	str	r4, [sp, #8]
   164a0:	str	lr, [sp]
   164a4:	str	ip, [sp, #4]
   164a8:	bl	1611c <__assert_fail@plt+0x493c>
   164ac:	add	sp, sp, #16
   164b0:	pop	{r4, pc}
   164b4:	subs	r2, r1, #1
   164b8:	bxeq	lr
   164bc:	bcc	16694 <__assert_fail@plt+0x4eb4>
   164c0:	cmp	r0, r1
   164c4:	bls	16678 <__assert_fail@plt+0x4e98>
   164c8:	tst	r1, r2
   164cc:	beq	16684 <__assert_fail@plt+0x4ea4>
   164d0:	clz	r3, r0
   164d4:	clz	r2, r1
   164d8:	sub	r3, r2, r3
   164dc:	rsbs	r3, r3, #31
   164e0:	addne	r3, r3, r3, lsl #1
   164e4:	mov	r2, #0
   164e8:	addne	pc, pc, r3, lsl #2
   164ec:	nop	{0}
   164f0:	cmp	r0, r1, lsl #31
   164f4:	adc	r2, r2, r2
   164f8:	subcs	r0, r0, r1, lsl #31
   164fc:	cmp	r0, r1, lsl #30
   16500:	adc	r2, r2, r2
   16504:	subcs	r0, r0, r1, lsl #30
   16508:	cmp	r0, r1, lsl #29
   1650c:	adc	r2, r2, r2
   16510:	subcs	r0, r0, r1, lsl #29
   16514:	cmp	r0, r1, lsl #28
   16518:	adc	r2, r2, r2
   1651c:	subcs	r0, r0, r1, lsl #28
   16520:	cmp	r0, r1, lsl #27
   16524:	adc	r2, r2, r2
   16528:	subcs	r0, r0, r1, lsl #27
   1652c:	cmp	r0, r1, lsl #26
   16530:	adc	r2, r2, r2
   16534:	subcs	r0, r0, r1, lsl #26
   16538:	cmp	r0, r1, lsl #25
   1653c:	adc	r2, r2, r2
   16540:	subcs	r0, r0, r1, lsl #25
   16544:	cmp	r0, r1, lsl #24
   16548:	adc	r2, r2, r2
   1654c:	subcs	r0, r0, r1, lsl #24
   16550:	cmp	r0, r1, lsl #23
   16554:	adc	r2, r2, r2
   16558:	subcs	r0, r0, r1, lsl #23
   1655c:	cmp	r0, r1, lsl #22
   16560:	adc	r2, r2, r2
   16564:	subcs	r0, r0, r1, lsl #22
   16568:	cmp	r0, r1, lsl #21
   1656c:	adc	r2, r2, r2
   16570:	subcs	r0, r0, r1, lsl #21
   16574:	cmp	r0, r1, lsl #20
   16578:	adc	r2, r2, r2
   1657c:	subcs	r0, r0, r1, lsl #20
   16580:	cmp	r0, r1, lsl #19
   16584:	adc	r2, r2, r2
   16588:	subcs	r0, r0, r1, lsl #19
   1658c:	cmp	r0, r1, lsl #18
   16590:	adc	r2, r2, r2
   16594:	subcs	r0, r0, r1, lsl #18
   16598:	cmp	r0, r1, lsl #17
   1659c:	adc	r2, r2, r2
   165a0:	subcs	r0, r0, r1, lsl #17
   165a4:	cmp	r0, r1, lsl #16
   165a8:	adc	r2, r2, r2
   165ac:	subcs	r0, r0, r1, lsl #16
   165b0:	cmp	r0, r1, lsl #15
   165b4:	adc	r2, r2, r2
   165b8:	subcs	r0, r0, r1, lsl #15
   165bc:	cmp	r0, r1, lsl #14
   165c0:	adc	r2, r2, r2
   165c4:	subcs	r0, r0, r1, lsl #14
   165c8:	cmp	r0, r1, lsl #13
   165cc:	adc	r2, r2, r2
   165d0:	subcs	r0, r0, r1, lsl #13
   165d4:	cmp	r0, r1, lsl #12
   165d8:	adc	r2, r2, r2
   165dc:	subcs	r0, r0, r1, lsl #12
   165e0:	cmp	r0, r1, lsl #11
   165e4:	adc	r2, r2, r2
   165e8:	subcs	r0, r0, r1, lsl #11
   165ec:	cmp	r0, r1, lsl #10
   165f0:	adc	r2, r2, r2
   165f4:	subcs	r0, r0, r1, lsl #10
   165f8:	cmp	r0, r1, lsl #9
   165fc:	adc	r2, r2, r2
   16600:	subcs	r0, r0, r1, lsl #9
   16604:	cmp	r0, r1, lsl #8
   16608:	adc	r2, r2, r2
   1660c:	subcs	r0, r0, r1, lsl #8
   16610:	cmp	r0, r1, lsl #7
   16614:	adc	r2, r2, r2
   16618:	subcs	r0, r0, r1, lsl #7
   1661c:	cmp	r0, r1, lsl #6
   16620:	adc	r2, r2, r2
   16624:	subcs	r0, r0, r1, lsl #6
   16628:	cmp	r0, r1, lsl #5
   1662c:	adc	r2, r2, r2
   16630:	subcs	r0, r0, r1, lsl #5
   16634:	cmp	r0, r1, lsl #4
   16638:	adc	r2, r2, r2
   1663c:	subcs	r0, r0, r1, lsl #4
   16640:	cmp	r0, r1, lsl #3
   16644:	adc	r2, r2, r2
   16648:	subcs	r0, r0, r1, lsl #3
   1664c:	cmp	r0, r1, lsl #2
   16650:	adc	r2, r2, r2
   16654:	subcs	r0, r0, r1, lsl #2
   16658:	cmp	r0, r1, lsl #1
   1665c:	adc	r2, r2, r2
   16660:	subcs	r0, r0, r1, lsl #1
   16664:	cmp	r0, r1
   16668:	adc	r2, r2, r2
   1666c:	subcs	r0, r0, r1
   16670:	mov	r0, r2
   16674:	bx	lr
   16678:	moveq	r0, #1
   1667c:	movne	r0, #0
   16680:	bx	lr
   16684:	clz	r2, r1
   16688:	rsb	r2, r2, #31
   1668c:	lsr	r0, r0, r2
   16690:	bx	lr
   16694:	cmp	r0, #0
   16698:	mvnne	r0, #0
   1669c:	b	166fc <__assert_fail@plt+0x4f1c>
   166a0:	cmp	r1, #0
   166a4:	beq	16694 <__assert_fail@plt+0x4eb4>
   166a8:	push	{r0, r1, lr}
   166ac:	bl	164b4 <__assert_fail@plt+0x4cd4>
   166b0:	pop	{r1, r2, lr}
   166b4:	mul	r3, r2, r0
   166b8:	sub	r1, r1, r3
   166bc:	bx	lr
   166c0:	cmp	r3, #0
   166c4:	cmpeq	r2, #0
   166c8:	bne	166e0 <__assert_fail@plt+0x4f00>
   166cc:	cmp	r1, #0
   166d0:	cmpeq	r0, #0
   166d4:	mvnne	r1, #0
   166d8:	mvnne	r0, #0
   166dc:	b	166fc <__assert_fail@plt+0x4f1c>
   166e0:	sub	sp, sp, #8
   166e4:	push	{sp, lr}
   166e8:	bl	16748 <__assert_fail@plt+0x4f68>
   166ec:	ldr	lr, [sp, #4]
   166f0:	add	sp, sp, #8
   166f4:	pop	{r2, r3}
   166f8:	bx	lr
   166fc:	push	{r1, lr}
   16700:	mov	r0, #8
   16704:	bl	11438 <raise@plt>
   16708:	pop	{r1, pc}
   1670c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16710:	mov	r8, r2
   16714:	mov	r6, r0
   16718:	mov	r7, r1
   1671c:	mov	sl, r3
   16720:	ldr	r9, [sp, #32]
   16724:	bl	16784 <__assert_fail@plt+0x4fa4>
   16728:	umull	r4, r5, r8, r0
   1672c:	mul	r8, r8, r1
   16730:	mla	r2, r0, sl, r8
   16734:	add	r5, r2, r5
   16738:	subs	r4, r6, r4
   1673c:	sbc	r5, r7, r5
   16740:	strd	r4, [r9]
   16744:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16748:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1674c:	mov	r8, r2
   16750:	mov	r6, r0
   16754:	mov	r7, r1
   16758:	mov	r5, r3
   1675c:	ldr	r9, [sp, #32]
   16760:	bl	16c10 <__assert_fail@plt+0x5430>
   16764:	mul	r3, r0, r5
   16768:	umull	r4, r5, r0, r8
   1676c:	mla	r8, r8, r1, r3
   16770:	add	r5, r8, r5
   16774:	subs	r4, r6, r4
   16778:	sbc	r5, r7, r5
   1677c:	strd	r4, [r9]
   16780:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16788:	rsbs	r4, r0, #0
   1678c:	rsc	r5, r1, #0
   16790:	cmp	r1, #0
   16794:	mvn	r6, #0
   16798:	sub	sp, sp, #12
   1679c:	movge	r4, r0
   167a0:	movge	r5, r1
   167a4:	movge	r6, #0
   167a8:	cmp	r3, #0
   167ac:	blt	169e4 <__assert_fail@plt+0x5204>
   167b0:	cmp	r3, #0
   167b4:	mov	sl, r4
   167b8:	mov	ip, r5
   167bc:	mov	r0, r2
   167c0:	mov	r1, r3
   167c4:	mov	r8, r2
   167c8:	mov	r7, r4
   167cc:	mov	r9, r5
   167d0:	bne	168c8 <__assert_fail@plt+0x50e8>
   167d4:	cmp	r2, r5
   167d8:	bls	16904 <__assert_fail@plt+0x5124>
   167dc:	clz	r3, r2
   167e0:	cmp	r3, #0
   167e4:	rsbne	r2, r3, #32
   167e8:	lslne	r8, r0, r3
   167ec:	lsrne	r2, r4, r2
   167f0:	lslne	r7, r4, r3
   167f4:	orrne	r9, r2, r5, lsl r3
   167f8:	lsr	r4, r8, #16
   167fc:	uxth	sl, r8
   16800:	mov	r1, r4
   16804:	mov	r0, r9
   16808:	bl	164b4 <__assert_fail@plt+0x4cd4>
   1680c:	mov	r1, r4
   16810:	mov	fp, r0
   16814:	mov	r0, r9
   16818:	bl	166a0 <__assert_fail@plt+0x4ec0>
   1681c:	mul	r0, sl, fp
   16820:	lsr	r2, r7, #16
   16824:	orr	r1, r2, r1, lsl #16
   16828:	cmp	r0, r1
   1682c:	bls	16850 <__assert_fail@plt+0x5070>
   16830:	adds	r1, r1, r8
   16834:	sub	r3, fp, #1
   16838:	bcs	1684c <__assert_fail@plt+0x506c>
   1683c:	cmp	r0, r1
   16840:	subhi	fp, fp, #2
   16844:	addhi	r1, r1, r8
   16848:	bhi	16850 <__assert_fail@plt+0x5070>
   1684c:	mov	fp, r3
   16850:	rsb	r9, r0, r1
   16854:	mov	r1, r4
   16858:	uxth	r7, r7
   1685c:	mov	r0, r9
   16860:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16864:	mov	r1, r4
   16868:	mov	r5, r0
   1686c:	mov	r0, r9
   16870:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16874:	mul	sl, sl, r5
   16878:	orr	r1, r7, r1, lsl #16
   1687c:	cmp	sl, r1
   16880:	bls	168a0 <__assert_fail@plt+0x50c0>
   16884:	adds	r8, r1, r8
   16888:	sub	r3, r5, #1
   1688c:	bcs	1689c <__assert_fail@plt+0x50bc>
   16890:	cmp	sl, r8
   16894:	subhi	r5, r5, #2
   16898:	bhi	168a0 <__assert_fail@plt+0x50c0>
   1689c:	mov	r5, r3
   168a0:	orr	r3, r5, fp, lsl #16
   168a4:	mov	r4, #0
   168a8:	cmp	r6, #0
   168ac:	mov	r0, r3
   168b0:	mov	r1, r4
   168b4:	beq	168c0 <__assert_fail@plt+0x50e0>
   168b8:	rsbs	r0, r0, #0
   168bc:	rsc	r1, r1, #0
   168c0:	add	sp, sp, #12
   168c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c8:	cmp	r3, r5
   168cc:	movhi	r4, #0
   168d0:	movhi	r3, r4
   168d4:	bhi	168a8 <__assert_fail@plt+0x50c8>
   168d8:	clz	r5, r1
   168dc:	cmp	r5, #0
   168e0:	bne	16ad0 <__assert_fail@plt+0x52f0>
   168e4:	cmp	r1, ip
   168e8:	cmpcs	r2, sl
   168ec:	movhi	r4, #0
   168f0:	movls	r4, #1
   168f4:	movls	r3, #1
   168f8:	movls	r4, r5
   168fc:	movhi	r3, r4
   16900:	b	168a8 <__assert_fail@plt+0x50c8>
   16904:	cmp	r2, #0
   16908:	bne	1691c <__assert_fail@plt+0x513c>
   1690c:	mov	r1, r2
   16910:	mov	r0, #1
   16914:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16918:	mov	r8, r0
   1691c:	clz	r3, r8
   16920:	cmp	r3, #0
   16924:	bne	169f4 <__assert_fail@plt+0x5214>
   16928:	rsb	r9, r8, r9
   1692c:	lsr	r5, r8, #16
   16930:	uxth	sl, r8
   16934:	mov	r4, #1
   16938:	mov	r1, r5
   1693c:	mov	r0, r9
   16940:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16944:	mov	r1, r5
   16948:	mov	fp, r0
   1694c:	mov	r0, r9
   16950:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16954:	mul	r0, sl, fp
   16958:	lsr	r2, r7, #16
   1695c:	orr	r1, r2, r1, lsl #16
   16960:	cmp	r0, r1
   16964:	bls	16984 <__assert_fail@plt+0x51a4>
   16968:	adds	r1, r1, r8
   1696c:	sub	r3, fp, #1
   16970:	bcs	16bf0 <__assert_fail@plt+0x5410>
   16974:	cmp	r0, r1
   16978:	subhi	fp, fp, #2
   1697c:	addhi	r1, r1, r8
   16980:	bls	16bf0 <__assert_fail@plt+0x5410>
   16984:	rsb	r2, r0, r1
   16988:	mov	r1, r5
   1698c:	str	r2, [sp]
   16990:	uxth	r7, r7
   16994:	mov	r0, r2
   16998:	bl	164b4 <__assert_fail@plt+0x4cd4>
   1699c:	ldr	r2, [sp]
   169a0:	mov	r1, r5
   169a4:	mov	r9, r0
   169a8:	mov	r0, r2
   169ac:	bl	166a0 <__assert_fail@plt+0x4ec0>
   169b0:	mul	sl, sl, r9
   169b4:	orr	r1, r7, r1, lsl #16
   169b8:	cmp	sl, r1
   169bc:	bls	169dc <__assert_fail@plt+0x51fc>
   169c0:	adds	r8, r1, r8
   169c4:	sub	r3, r9, #1
   169c8:	bcs	169d8 <__assert_fail@plt+0x51f8>
   169cc:	cmp	sl, r8
   169d0:	subhi	r9, r9, #2
   169d4:	bhi	169dc <__assert_fail@plt+0x51fc>
   169d8:	mov	r9, r3
   169dc:	orr	r3, r9, fp, lsl #16
   169e0:	b	168a8 <__assert_fail@plt+0x50c8>
   169e4:	mvn	r6, r6
   169e8:	rsbs	r2, r2, #0
   169ec:	rsc	r3, r3, #0
   169f0:	b	167b0 <__assert_fail@plt+0x4fd0>
   169f4:	lsl	r8, r8, r3
   169f8:	rsb	fp, r3, #32
   169fc:	lsr	r4, r9, fp
   16a00:	lsr	fp, r7, fp
   16a04:	lsr	r5, r8, #16
   16a08:	orr	fp, fp, r9, lsl r3
   16a0c:	mov	r0, r4
   16a10:	lsl	r7, r7, r3
   16a14:	mov	r1, r5
   16a18:	uxth	sl, r8
   16a1c:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16a20:	mov	r1, r5
   16a24:	mov	r3, r0
   16a28:	mov	r0, r4
   16a2c:	str	r3, [sp]
   16a30:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16a34:	ldr	r3, [sp]
   16a38:	lsr	r2, fp, #16
   16a3c:	mul	r0, sl, r3
   16a40:	orr	r1, r2, r1, lsl #16
   16a44:	cmp	r0, r1
   16a48:	bls	16a68 <__assert_fail@plt+0x5288>
   16a4c:	adds	r1, r1, r8
   16a50:	sub	r2, r3, #1
   16a54:	bcs	16c08 <__assert_fail@plt+0x5428>
   16a58:	cmp	r0, r1
   16a5c:	subhi	r3, r3, #2
   16a60:	addhi	r1, r1, r8
   16a64:	bls	16c08 <__assert_fail@plt+0x5428>
   16a68:	rsb	r9, r0, r1
   16a6c:	mov	r1, r5
   16a70:	str	r3, [sp]
   16a74:	uxth	fp, fp
   16a78:	mov	r0, r9
   16a7c:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16a80:	mov	r1, r5
   16a84:	mov	r4, r0
   16a88:	mov	r0, r9
   16a8c:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16a90:	mul	r9, sl, r4
   16a94:	ldr	r3, [sp]
   16a98:	orr	r1, fp, r1, lsl #16
   16a9c:	cmp	r9, r1
   16aa0:	bls	16ac4 <__assert_fail@plt+0x52e4>
   16aa4:	adds	r1, r1, r8
   16aa8:	sub	r2, r4, #1
   16aac:	bcs	16ac0 <__assert_fail@plt+0x52e0>
   16ab0:	cmp	r9, r1
   16ab4:	subhi	r4, r4, #2
   16ab8:	addhi	r1, r1, r8
   16abc:	bhi	16ac4 <__assert_fail@plt+0x52e4>
   16ac0:	mov	r4, r2
   16ac4:	rsb	r9, r9, r1
   16ac8:	orr	r4, r4, r3, lsl #16
   16acc:	b	16938 <__assert_fail@plt+0x5158>
   16ad0:	rsb	sl, r5, #32
   16ad4:	lsl	r3, r2, r5
   16ad8:	lsr	r0, r2, sl
   16adc:	lsr	r2, ip, sl
   16ae0:	orr	r4, r0, r1, lsl r5
   16ae4:	lsr	sl, r7, sl
   16ae8:	mov	r0, r2
   16aec:	orr	sl, sl, ip, lsl r5
   16af0:	lsr	r9, r4, #16
   16af4:	str	r3, [sp, #4]
   16af8:	str	r2, [sp]
   16afc:	uxth	fp, r4
   16b00:	mov	r1, r9
   16b04:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16b08:	ldr	r2, [sp]
   16b0c:	mov	r1, r9
   16b10:	mov	r8, r0
   16b14:	mov	r0, r2
   16b18:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16b1c:	mul	r0, fp, r8
   16b20:	lsr	r2, sl, #16
   16b24:	orr	r1, r2, r1, lsl #16
   16b28:	cmp	r0, r1
   16b2c:	bls	16b4c <__assert_fail@plt+0x536c>
   16b30:	adds	r1, r1, r4
   16b34:	sub	r2, r8, #1
   16b38:	bcs	16c00 <__assert_fail@plt+0x5420>
   16b3c:	cmp	r0, r1
   16b40:	subhi	r8, r8, #2
   16b44:	addhi	r1, r1, r4
   16b48:	bls	16c00 <__assert_fail@plt+0x5420>
   16b4c:	rsb	ip, r0, r1
   16b50:	mov	r1, r9
   16b54:	str	ip, [sp]
   16b58:	mov	r0, ip
   16b5c:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16b60:	ldr	ip, [sp]
   16b64:	mov	r1, r9
   16b68:	mov	r2, r0
   16b6c:	mov	r0, ip
   16b70:	str	r2, [sp]
   16b74:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16b78:	ldr	r2, [sp]
   16b7c:	uxth	ip, sl
   16b80:	mul	fp, fp, r2
   16b84:	orr	ip, ip, r1, lsl #16
   16b88:	cmp	fp, ip
   16b8c:	bls	16bac <__assert_fail@plt+0x53cc>
   16b90:	adds	ip, ip, r4
   16b94:	sub	r1, r2, #1
   16b98:	bcs	16bf8 <__assert_fail@plt+0x5418>
   16b9c:	cmp	fp, ip
   16ba0:	subhi	r2, r2, #2
   16ba4:	addhi	ip, ip, r4
   16ba8:	bls	16bf8 <__assert_fail@plt+0x5418>
   16bac:	ldr	r0, [sp, #4]
   16bb0:	orr	r1, r2, r8, lsl #16
   16bb4:	rsb	fp, fp, ip
   16bb8:	umull	r2, r3, r1, r0
   16bbc:	cmp	fp, r3
   16bc0:	bcc	16be4 <__assert_fail@plt+0x5404>
   16bc4:	movne	r4, #0
   16bc8:	moveq	r4, #1
   16bcc:	cmp	r2, r7, lsl r5
   16bd0:	movls	r4, #0
   16bd4:	andhi	r4, r4, #1
   16bd8:	cmp	r4, #0
   16bdc:	moveq	r3, r1
   16be0:	beq	168a8 <__assert_fail@plt+0x50c8>
   16be4:	sub	r3, r1, #1
   16be8:	mov	r4, #0
   16bec:	b	168a8 <__assert_fail@plt+0x50c8>
   16bf0:	mov	fp, r3
   16bf4:	b	16984 <__assert_fail@plt+0x51a4>
   16bf8:	mov	r2, r1
   16bfc:	b	16bac <__assert_fail@plt+0x53cc>
   16c00:	mov	r8, r2
   16c04:	b	16b4c <__assert_fail@plt+0x536c>
   16c08:	mov	r3, r2
   16c0c:	b	16a68 <__assert_fail@plt+0x5288>
   16c10:	cmp	r3, #0
   16c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c18:	mov	r6, r0
   16c1c:	sub	sp, sp, #12
   16c20:	mov	r5, r1
   16c24:	mov	r7, r0
   16c28:	mov	r4, r2
   16c2c:	mov	r8, r1
   16c30:	bne	16d10 <__assert_fail@plt+0x5530>
   16c34:	cmp	r2, r1
   16c38:	bls	16d4c <__assert_fail@plt+0x556c>
   16c3c:	clz	r3, r2
   16c40:	cmp	r3, #0
   16c44:	rsbne	r8, r3, #32
   16c48:	lslne	r4, r2, r3
   16c4c:	lsrne	r8, r0, r8
   16c50:	lslne	r7, r0, r3
   16c54:	orrne	r8, r8, r1, lsl r3
   16c58:	lsr	r5, r4, #16
   16c5c:	uxth	sl, r4
   16c60:	mov	r1, r5
   16c64:	mov	r0, r8
   16c68:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16c6c:	mov	r1, r5
   16c70:	mov	r9, r0
   16c74:	mov	r0, r8
   16c78:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16c7c:	mul	r0, sl, r9
   16c80:	lsr	r3, r7, #16
   16c84:	orr	r1, r3, r1, lsl #16
   16c88:	cmp	r0, r1
   16c8c:	bls	16cb0 <__assert_fail@plt+0x54d0>
   16c90:	adds	r1, r1, r4
   16c94:	sub	r2, r9, #1
   16c98:	bcs	16cac <__assert_fail@plt+0x54cc>
   16c9c:	cmp	r0, r1
   16ca0:	subhi	r9, r9, #2
   16ca4:	addhi	r1, r1, r4
   16ca8:	bhi	16cb0 <__assert_fail@plt+0x54d0>
   16cac:	mov	r9, r2
   16cb0:	rsb	r8, r0, r1
   16cb4:	mov	r1, r5
   16cb8:	uxth	r7, r7
   16cbc:	mov	r0, r8
   16cc0:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16cc4:	mov	r1, r5
   16cc8:	mov	r6, r0
   16ccc:	mov	r0, r8
   16cd0:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16cd4:	mul	sl, sl, r6
   16cd8:	orr	r1, r7, r1, lsl #16
   16cdc:	cmp	sl, r1
   16ce0:	bls	16cfc <__assert_fail@plt+0x551c>
   16ce4:	adds	r4, r1, r4
   16ce8:	sub	r3, r6, #1
   16cec:	bcs	16ff8 <__assert_fail@plt+0x5818>
   16cf0:	cmp	sl, r4
   16cf4:	subhi	r6, r6, #2
   16cf8:	bls	16ff8 <__assert_fail@plt+0x5818>
   16cfc:	orr	r0, r6, r9, lsl #16
   16d00:	mov	r6, #0
   16d04:	mov	r1, r6
   16d08:	add	sp, sp, #12
   16d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d10:	cmp	r3, r1
   16d14:	movhi	r6, #0
   16d18:	movhi	r0, r6
   16d1c:	bhi	16d04 <__assert_fail@plt+0x5524>
   16d20:	clz	r7, r3
   16d24:	cmp	r7, #0
   16d28:	bne	16e28 <__assert_fail@plt+0x5648>
   16d2c:	cmp	r3, r1
   16d30:	cmpcs	r2, r6
   16d34:	movhi	r6, #0
   16d38:	movls	r6, #1
   16d3c:	movls	r0, #1
   16d40:	movls	r6, r7
   16d44:	movhi	r0, r6
   16d48:	b	16d04 <__assert_fail@plt+0x5524>
   16d4c:	cmp	r2, #0
   16d50:	bne	16d64 <__assert_fail@plt+0x5584>
   16d54:	mov	r1, r2
   16d58:	mov	r0, #1
   16d5c:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16d60:	mov	r4, r0
   16d64:	clz	r3, r4
   16d68:	cmp	r3, #0
   16d6c:	bne	16f24 <__assert_fail@plt+0x5744>
   16d70:	rsb	r5, r4, r5
   16d74:	lsr	r8, r4, #16
   16d78:	uxth	sl, r4
   16d7c:	mov	r6, #1
   16d80:	mov	r1, r8
   16d84:	mov	r0, r5
   16d88:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16d8c:	mov	r1, r8
   16d90:	mov	r9, r0
   16d94:	mov	r0, r5
   16d98:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16d9c:	mul	r0, sl, r9
   16da0:	lsr	r3, r7, #16
   16da4:	orr	r1, r3, r1, lsl #16
   16da8:	cmp	r0, r1
   16dac:	bls	16dcc <__assert_fail@plt+0x55ec>
   16db0:	adds	r1, r1, r4
   16db4:	sub	r2, r9, #1
   16db8:	bcs	17000 <__assert_fail@plt+0x5820>
   16dbc:	cmp	r0, r1
   16dc0:	subhi	r9, r9, #2
   16dc4:	addhi	r1, r1, r4
   16dc8:	bls	17000 <__assert_fail@plt+0x5820>
   16dcc:	rsb	fp, r0, r1
   16dd0:	mov	r1, r8
   16dd4:	uxth	r7, r7
   16dd8:	mov	r0, fp
   16ddc:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16de0:	mov	r1, r8
   16de4:	mov	r5, r0
   16de8:	mov	r0, fp
   16dec:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16df0:	mul	sl, sl, r5
   16df4:	orr	r1, r7, r1, lsl #16
   16df8:	cmp	sl, r1
   16dfc:	bls	16e18 <__assert_fail@plt+0x5638>
   16e00:	adds	r4, r1, r4
   16e04:	sub	r3, r5, #1
   16e08:	bcs	17008 <__assert_fail@plt+0x5828>
   16e0c:	cmp	sl, r4
   16e10:	subhi	r5, r5, #2
   16e14:	bls	17008 <__assert_fail@plt+0x5828>
   16e18:	orr	r0, r5, r9, lsl #16
   16e1c:	mov	r1, r6
   16e20:	add	sp, sp, #12
   16e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e28:	rsb	r1, r7, #32
   16e2c:	lsl	r0, r2, r7
   16e30:	lsr	r2, r2, r1
   16e34:	lsr	fp, r5, r1
   16e38:	orr	r8, r2, r3, lsl r7
   16e3c:	lsr	r1, r6, r1
   16e40:	str	r0, [sp, #4]
   16e44:	orr	r5, r1, r5, lsl r7
   16e48:	lsr	r9, r8, #16
   16e4c:	mov	r0, fp
   16e50:	uxth	sl, r8
   16e54:	mov	r1, r9
   16e58:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16e5c:	mov	r1, r9
   16e60:	mov	r4, r0
   16e64:	mov	r0, fp
   16e68:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16e6c:	mul	r0, sl, r4
   16e70:	lsr	ip, r5, #16
   16e74:	orr	r1, ip, r1, lsl #16
   16e78:	cmp	r0, r1
   16e7c:	bls	16e90 <__assert_fail@plt+0x56b0>
   16e80:	adds	r1, r1, r8
   16e84:	sub	r2, r4, #1
   16e88:	bcc	17024 <__assert_fail@plt+0x5844>
   16e8c:	mov	r4, r2
   16e90:	rsb	ip, r0, r1
   16e94:	mov	r1, r9
   16e98:	str	ip, [sp]
   16e9c:	uxth	r5, r5
   16ea0:	mov	r0, ip
   16ea4:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16ea8:	ldr	ip, [sp]
   16eac:	mov	r1, r9
   16eb0:	mov	fp, r0
   16eb4:	mov	r0, ip
   16eb8:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16ebc:	mul	sl, sl, fp
   16ec0:	orr	r1, r5, r1, lsl #16
   16ec4:	cmp	sl, r1
   16ec8:	bls	16edc <__assert_fail@plt+0x56fc>
   16ecc:	adds	r1, r1, r8
   16ed0:	sub	r2, fp, #1
   16ed4:	bcc	17010 <__assert_fail@plt+0x5830>
   16ed8:	mov	fp, r2
   16edc:	ldr	r3, [sp, #4]
   16ee0:	orr	r0, fp, r4, lsl #16
   16ee4:	rsb	sl, sl, r1
   16ee8:	umull	r4, r5, r0, r3
   16eec:	cmp	sl, r5
   16ef0:	bcc	16f10 <__assert_fail@plt+0x5730>
   16ef4:	movne	r3, #0
   16ef8:	moveq	r3, #1
   16efc:	cmp	r4, r6, lsl r7
   16f00:	movls	r6, #0
   16f04:	andhi	r6, r3, #1
   16f08:	cmp	r6, #0
   16f0c:	beq	16d04 <__assert_fail@plt+0x5524>
   16f10:	mov	r6, #0
   16f14:	sub	r0, r0, #1
   16f18:	mov	r1, r6
   16f1c:	add	sp, sp, #12
   16f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f24:	lsl	r4, r4, r3
   16f28:	rsb	r9, r3, #32
   16f2c:	lsr	r2, r5, r9
   16f30:	lsr	r9, r6, r9
   16f34:	lsr	r8, r4, #16
   16f38:	orr	r9, r9, r5, lsl r3
   16f3c:	mov	r0, r2
   16f40:	lsl	r7, r6, r3
   16f44:	mov	r1, r8
   16f48:	str	r2, [sp]
   16f4c:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16f50:	ldr	r2, [sp]
   16f54:	mov	r1, r8
   16f58:	uxth	sl, r4
   16f5c:	mov	fp, r0
   16f60:	mov	r0, r2
   16f64:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16f68:	mul	r0, sl, fp
   16f6c:	lsr	r3, r9, #16
   16f70:	orr	r1, r3, r1, lsl #16
   16f74:	cmp	r0, r1
   16f78:	bls	16f98 <__assert_fail@plt+0x57b8>
   16f7c:	adds	r1, r1, r4
   16f80:	sub	r3, fp, #1
   16f84:	bcs	17038 <__assert_fail@plt+0x5858>
   16f88:	cmp	r0, r1
   16f8c:	subhi	fp, fp, #2
   16f90:	addhi	r1, r1, r4
   16f94:	bls	17038 <__assert_fail@plt+0x5858>
   16f98:	rsb	r5, r0, r1
   16f9c:	mov	r1, r8
   16fa0:	uxth	r9, r9
   16fa4:	mov	r0, r5
   16fa8:	bl	164b4 <__assert_fail@plt+0x4cd4>
   16fac:	mov	r1, r8
   16fb0:	mov	r6, r0
   16fb4:	mov	r0, r5
   16fb8:	bl	166a0 <__assert_fail@plt+0x4ec0>
   16fbc:	mul	r5, sl, r6
   16fc0:	orr	r1, r9, r1, lsl #16
   16fc4:	cmp	r5, r1
   16fc8:	bls	16fec <__assert_fail@plt+0x580c>
   16fcc:	adds	r1, r1, r4
   16fd0:	sub	r3, r6, #1
   16fd4:	bcs	16fe8 <__assert_fail@plt+0x5808>
   16fd8:	cmp	r5, r1
   16fdc:	subhi	r6, r6, #2
   16fe0:	addhi	r1, r1, r4
   16fe4:	bhi	16fec <__assert_fail@plt+0x580c>
   16fe8:	mov	r6, r3
   16fec:	rsb	r5, r5, r1
   16ff0:	orr	r6, r6, fp, lsl #16
   16ff4:	b	16d80 <__assert_fail@plt+0x55a0>
   16ff8:	mov	r6, r3
   16ffc:	b	16cfc <__assert_fail@plt+0x551c>
   17000:	mov	r9, r2
   17004:	b	16dcc <__assert_fail@plt+0x55ec>
   17008:	mov	r5, r3
   1700c:	b	16e18 <__assert_fail@plt+0x5638>
   17010:	cmp	sl, r1
   17014:	subhi	fp, fp, #2
   17018:	addhi	r1, r1, r8
   1701c:	bhi	16edc <__assert_fail@plt+0x56fc>
   17020:	b	16ed8 <__assert_fail@plt+0x56f8>
   17024:	cmp	r0, r1
   17028:	subhi	r4, r4, #2
   1702c:	addhi	r1, r1, r8
   17030:	bhi	16e90 <__assert_fail@plt+0x56b0>
   17034:	b	16e8c <__assert_fail@plt+0x56ac>
   17038:	mov	fp, r3
   1703c:	b	16f98 <__assert_fail@plt+0x57b8>
   17040:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17044:	mov	r7, r0
   17048:	ldr	r6, [pc, #76]	; 1709c <__assert_fail@plt+0x58bc>
   1704c:	mov	r8, r1
   17050:	ldr	r5, [pc, #72]	; 170a0 <__assert_fail@plt+0x58c0>
   17054:	mov	r9, r2
   17058:	add	r6, pc, r6
   1705c:	bl	11400 <_init@@Base>
   17060:	add	r5, pc, r5
   17064:	rsb	r6, r5, r6
   17068:	asrs	r6, r6, #2
   1706c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   17070:	sub	r5, r5, #4
   17074:	mov	r4, #0
   17078:	add	r4, r4, #1
   1707c:	ldr	r3, [r5, #4]!
   17080:	mov	r0, r7
   17084:	mov	r1, r8
   17088:	mov	r2, r9
   1708c:	blx	r3
   17090:	cmp	r4, r6
   17094:	bne	17078 <__assert_fail@plt+0x5898>
   17098:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1709c:	andeq	r0, r1, r8, ror #28
   170a0:	andeq	r0, r1, ip, asr lr
   170a4:	bx	lr
   170a8:	ldr	r3, [pc, #28]	; 170cc <__assert_fail@plt+0x58ec>
   170ac:	mov	r1, #0
   170b0:	ldr	r2, [pc, #24]	; 170d0 <__assert_fail@plt+0x58f0>
   170b4:	add	r3, pc, r3
   170b8:	ldr	r3, [r3, r2]
   170bc:	cmp	r3, #0
   170c0:	ldrne	r2, [r3]
   170c4:	moveq	r2, r3
   170c8:	b	11660 <__cxa_atexit@plt>
   170cc:	andeq	r0, r1, r4, asr #30
   170d0:	andeq	r0, r0, r8, asr r1

Disassembly of section .fini:

000170d4 <_fini@@Base>:
   170d4:	push	{r3, lr}
   170d8:	pop	{r3, pc}
