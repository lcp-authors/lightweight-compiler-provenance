
centos-preinstalled/c++filt:     file format elf32-littlearm


Disassembly of section .init:

00011228 <_init@@Base>:
   11228:	push	{r3, lr}
   1122c:	bl	119f4 <__assert_fail@plt+0x494>
   11230:	pop	{r3, pc}

Disassembly of section .plt:

00011234 <cplus_demangle_name_to_style@plt-0x14>:
   11234:	push	{lr}		; (str lr, [sp, #-4]!)
   11238:	ldr	lr, [pc, #4]	; 11244 <_init@@Base+0x1c>
   1123c:	add	lr, pc, lr
   11240:	ldr	pc, [lr, #8]!
   11244:			; <UNDEFINED> instruction: 0x00014dbc

00011248 <cplus_demangle_name_to_style@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #20, 20	; 0x14000
   11250:	ldr	pc, [ip, #3516]!	; 0xdbc

00011254 <bfd_scan_vma@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #20, 20	; 0x14000
   1125c:	ldr	pc, [ip, #3508]!	; 0xdb4

00011260 <strcmp@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #20, 20	; 0x14000
   11268:	ldr	pc, [ip, #3500]!	; 0xdac

0001126c <strtol@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #20, 20	; 0x14000
   11274:	ldr	pc, [ip, #3492]!	; 0xda4

00011278 <fflush@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #20, 20	; 0x14000
   11280:	ldr	pc, [ip, #3484]!	; 0xd9c

00011284 <bfd_arch_list@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #20, 20	; 0x14000
   1128c:	ldr	pc, [ip, #3476]!	; 0xd94

00011290 <memmove@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #20, 20	; 0x14000
   11298:	ldr	pc, [ip, #3468]!	; 0xd8c

0001129c <bfd_set_default_target@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #20, 20	; 0x14000
   112a4:	ldr	pc, [ip, #3460]!	; 0xd84

000112a8 <free@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #20, 20	; 0x14000
   112b0:	ldr	pc, [ip, #3452]!	; 0xd7c

000112b4 <ferror@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #20, 20	; 0x14000
   112bc:	ldr	pc, [ip, #3444]!	; 0xd74

000112c0 <cplus_demangle_set_style@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #20, 20	; 0x14000
   112c8:	ldr	pc, [ip, #3436]!	; 0xd6c

000112cc <memcpy@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #20, 20	; 0x14000
   112d4:	ldr	pc, [ip, #3428]!	; 0xd64

000112d8 <_IO_getc@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #20, 20	; 0x14000
   112e0:	ldr	pc, [ip, #3420]!	; 0xd5c

000112e4 <ftell@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #20, 20	; 0x14000
   112ec:	ldr	pc, [ip, #3412]!	; 0xd54

000112f0 <ctime@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #20, 20	; 0x14000
   112f8:	ldr	pc, [ip, #3404]!	; 0xd4c

000112fc <dcgettext@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #20, 20	; 0x14000
   11304:	ldr	pc, [ip, #3396]!	; 0xd44

00011308 <bfd_malloc@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #20, 20	; 0x14000
   11310:	ldr	pc, [ip, #3388]!	; 0xd3c

00011314 <__stack_chk_fail@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #20, 20	; 0x14000
   1131c:	ldr	pc, [ip, #3380]!	; 0xd34

00011320 <unlink@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #20, 20	; 0x14000
   11328:	ldr	pc, [ip, #3372]!	; 0xd2c

0001132c <xrealloc@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #20, 20	; 0x14000
   11334:	ldr	pc, [ip, #3364]!	; 0xd24

00011338 <bfd_target_list@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #20, 20	; 0x14000
   11340:	ldr	pc, [ip, #3356]!	; 0xd1c

00011344 <bfd_get_error@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #20, 20	; 0x14000
   1134c:	ldr	pc, [ip, #3348]!	; 0xd14

00011350 <_IO_putc@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #20, 20	; 0x14000
   11358:	ldr	pc, [ip, #3340]!	; 0xd0c

0001135c <fwrite@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #20, 20	; 0x14000
   11364:	ldr	pc, [ip, #3332]!	; 0xd04

00011368 <xmalloc@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #20, 20	; 0x14000
   11370:	ldr	pc, [ip, #3324]!	; 0xcfc

00011374 <xmalloc_set_program_name@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #20, 20	; 0x14000
   1137c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011380 <xstrdup@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #20, 20	; 0x14000
   11388:	ldr	pc, [ip, #3308]!	; 0xcec

0001138c <strcpy@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #20, 20	; 0x14000
   11394:	ldr	pc, [ip, #3300]!	; 0xce4

00011398 <fread@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #20, 20	; 0x14000
   113a0:	ldr	pc, [ip, #3292]!	; 0xcdc

000113a4 <mkstemps64@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #20, 20	; 0x14000
   113ac:	ldr	pc, [ip, #3284]!	; 0xcd4

000113b0 <getenv@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #20, 20	; 0x14000
   113b8:	ldr	pc, [ip, #3276]!	; 0xccc

000113bc <mkstemp64@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #20, 20	; 0x14000
   113c4:	ldr	pc, [ip, #3268]!	; 0xcc4

000113c8 <__gnu_Unwind_Find_exidx@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #20, 20	; 0x14000
   113d0:	ldr	pc, [ip, #3260]!	; 0xcbc

000113d4 <__cxa_begin_cleanup@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #20, 20	; 0x14000
   113dc:	ldr	pc, [ip, #3252]!	; 0xcb4

000113e0 <__libc_start_main@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #20, 20	; 0x14000
   113e8:	ldr	pc, [ip, #3244]!	; 0xcac

000113ec <strerror@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #20, 20	; 0x14000
   113f4:	ldr	pc, [ip, #3236]!	; 0xca4

000113f8 <__vfprintf_chk@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #20, 20	; 0x14000
   11400:	ldr	pc, [ip, #3228]!	; 0xc9c

00011404 <__gmon_start__@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #20, 20	; 0x14000
   1140c:	ldr	pc, [ip, #3220]!	; 0xc94

00011410 <bfd_set_format@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #20, 20	; 0x14000
   11418:	ldr	pc, [ip, #3212]!	; 0xc8c

0001141c <getopt_long@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #20, 20	; 0x14000
   11424:	ldr	pc, [ip, #3204]!	; 0xc84

00011428 <exit@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #20, 20	; 0x14000
   11430:	ldr	pc, [ip, #3196]!	; 0xc7c

00011434 <__cxa_type_match@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #20, 20	; 0x14000
   1143c:	ldr	pc, [ip, #3188]!	; 0xc74

00011440 <strlen@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #20, 20	; 0x14000
   11448:	ldr	pc, [ip, #3180]!	; 0xc6c

0001144c <bfd_close_all_done@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #20, 20	; 0x14000
   11454:	ldr	pc, [ip, #3172]!	; 0xc64

00011458 <strchr@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #20, 20	; 0x14000
   11460:	ldr	pc, [ip, #3164]!	; 0xc5c

00011464 <bfd_printable_arch_mach@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #20, 20	; 0x14000
   1146c:	ldr	pc, [ip, #3156]!	; 0xc54

00011470 <__errno_location@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #20, 20	; 0x14000
   11478:	ldr	pc, [ip, #3148]!	; 0xc4c

0001147c <__sprintf_chk@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #20, 20	; 0x14000
   11484:	ldr	pc, [ip, #3140]!	; 0xc44

00011488 <__printf_chk@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #20, 20	; 0x14000
   11490:	ldr	pc, [ip, #3132]!	; 0xc3c

00011494 <__fprintf_chk@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #20, 20	; 0x14000
   1149c:	ldr	pc, [ip, #3124]!	; 0xc34

000114a0 <access@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #20, 20	; 0x14000
   114a8:	ldr	pc, [ip, #3116]!	; 0xc2c

000114ac <fclose@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #20, 20	; 0x14000
   114b4:	ldr	pc, [ip, #3108]!	; 0xc24

000114b8 <bfd_openw@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #20, 20	; 0x14000
   114c0:	ldr	pc, [ip, #3100]!	; 0xc1c

000114c4 <cplus_demangle@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #20, 20	; 0x14000
   114cc:	ldr	pc, [ip, #3092]!	; 0xc14

000114d0 <bfd_set_error_program_name@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #20, 20	; 0x14000
   114d8:	ldr	pc, [ip, #3084]!	; 0xc0c

000114dc <strrchr@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #20, 20	; 0x14000
   114e4:	ldr	pc, [ip, #3076]!	; 0xc04

000114e8 <fputc@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #20, 20	; 0x14000
   114f0:	ldr	pc, [ip, #3068]!	; 0xbfc

000114f4 <xexit@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #20, 20	; 0x14000
   114fc:	ldr	pc, [ip, #3060]!	; 0xbf4

00011500 <mkdtemp@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #20, 20	; 0x14000
   11508:	ldr	pc, [ip, #3052]!	; 0xbec

0001150c <fopen64@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #20, 20	; 0x14000
   11514:	ldr	pc, [ip, #3044]!	; 0xbe4

00011518 <bfd_errmsg@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #20, 20	; 0x14000
   11520:	ldr	pc, [ip, #3036]!	; 0xbdc

00011524 <fseek@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #20, 20	; 0x14000
   1152c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011530 <__xstat64@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #20, 20	; 0x14000
   11538:	ldr	pc, [ip, #3020]!	; 0xbcc

0001153c <fputs@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #20, 20	; 0x14000
   11544:	ldr	pc, [ip, #3012]!	; 0xbc4

00011548 <abort@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #20, 20	; 0x14000
   11550:	ldr	pc, [ip, #3004]!	; 0xbbc

00011554 <close@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #20, 20	; 0x14000
   1155c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011560 <__assert_fail@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #20, 20	; 0x14000
   11568:	ldr	pc, [ip, #2988]!	; 0xbac

Disassembly of section .text:

0001156c <.text>:
   1156c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11570:	sub	sp, sp, #28
   11574:	movw	r5, #58392	; 0xe418
   11578:	movt	r5, #2
   1157c:	str	r1, [sp, #16]
   11580:	movw	r8, #25600	; 0x6400
   11584:	ldr	r3, [r1]
   11588:	movw	r7, #25608	; 0x6408
   1158c:	str	r0, [sp, #20]
   11590:	movw	r6, #24888	; 0x6138
   11594:	movt	r8, #2
   11598:	movt	r7, #2
   1159c:	mov	r0, r3
   115a0:	str	r3, [r5]
   115a4:	bl	11374 <xmalloc_set_program_name@plt>
   115a8:	ldr	r0, [r5]
   115ac:	bl	114d0 <bfd_set_error_program_name@plt>
   115b0:	add	r0, sp, #20
   115b4:	add	r1, sp, #16
   115b8:	movt	r6, #2
   115bc:	bl	131c0 <__assert_fail@plt+0x1c60>
   115c0:	mov	r9, #1
   115c4:	mov	r4, #0
   115c8:	ldr	r0, [sp, #20]
   115cc:	movw	r2, #21336	; 0x5358
   115d0:	ldr	r1, [sp, #16]
   115d4:	movt	r2, #1
   115d8:	str	r4, [sp]
   115dc:	movw	r3, #20288	; 0x4f40
   115e0:	movt	r3, #1
   115e4:	bl	1141c <getopt_long@plt>
   115e8:	cmn	r0, #1
   115ec:	beq	11784 <__assert_fail@plt+0x224>
   115f0:	sub	r0, r0, #63	; 0x3f
   115f4:	cmp	r0, #55	; 0x37
   115f8:	ldrls	pc, [pc, r0, lsl #2]
   115fc:	b	115c8 <__assert_fail@plt+0x68>
   11600:	andeq	r1, r1, r0, ror r7
   11604:	andeq	r1, r1, r8, asr #11
   11608:	andeq	r1, r1, r8, asr #11
   1160c:	andeq	r1, r1, r8, asr #11
   11610:	andeq	r1, r1, r8, asr #11
   11614:	andeq	r1, r1, r8, asr #11
   11618:	andeq	r1, r1, r8, asr #11
   1161c:	andeq	r1, r1, r8, asr #11
   11620:	andeq	r1, r1, r8, asr #11
   11624:	andeq	r1, r1, r8, asr #11
   11628:	andeq	r1, r1, r8, asr #11
   1162c:	andeq	r1, r1, r8, asr #11
   11630:	andeq	r1, r1, r8, asr #11
   11634:	andeq	r1, r1, r8, asr #11
   11638:	andeq	r1, r1, r8, asr #11
   1163c:	andeq	r1, r1, r8, asr #11
   11640:	andeq	r1, r1, r8, asr #11
   11644:	andeq	r1, r1, r8, asr #11
   11648:	andeq	r1, r1, r8, asr #11
   1164c:	andeq	r1, r1, r8, asr #11
   11650:	andeq	r1, r1, r8, asr #11
   11654:	andeq	r1, r1, r8, asr #11
   11658:	andeq	r1, r1, r8, asr #11
   1165c:	andeq	r1, r1, r8, asr #11
   11660:	andeq	r1, r1, r8, asr #11
   11664:	andeq	r1, r1, r8, asr #11
   11668:	andeq	r1, r1, r8, asr #11
   1166c:	andeq	r1, r1, r8, asr #11
   11670:	andeq	r1, r1, r8, asr #11
   11674:	andeq	r1, r1, r8, asr #11
   11678:	andeq	r1, r1, r8, asr #11
   1167c:	andeq	r1, r1, r8, asr #11
   11680:	andeq	r1, r1, r8, ror #14
   11684:	andeq	r1, r1, r8, asr #11
   11688:	andeq	r1, r1, r8, asr #11
   1168c:	andeq	r1, r1, r8, asr #11
   11690:	andeq	r1, r1, r8, asr #11
   11694:	andeq	r1, r1, r8, asr #11
   11698:	andeq	r1, r1, r8, asr #11
   1169c:	andeq	r1, r1, r8, asr #11
   116a0:	andeq	r1, r1, r8, asr #11
   116a4:	andeq	r1, r1, r4, asr r7
   116a8:	andeq	r1, r1, r4, asr #14
   116ac:	andeq	r1, r1, r8, asr #11
   116b0:	andeq	r1, r1, r8, asr #11
   116b4:	andeq	r1, r1, r8, asr #11
   116b8:	andeq	r1, r1, r8, asr #11
   116bc:	andeq	r1, r1, r8, lsr r7
   116c0:	andeq	r1, r1, r8, asr #11
   116c4:	andeq	r1, r1, r8, lsr #14
   116c8:	andeq	r1, r1, r8, asr #11
   116cc:	andeq	r1, r1, r8, asr #11
   116d0:	andeq	r1, r1, r8, lsl #14
   116d4:	strdeq	r1, [r1], -r8
   116d8:	andeq	r1, r1, r8, asr #11
   116dc:	andeq	r1, r1, r0, ror #13
   116e0:	movw	r0, #21292	; 0x532c
   116e4:	movt	r0, #1
   116e8:	bl	12c64 <__assert_fail@plt+0x1704>
   116ec:	mov	r0, #0
   116f0:	add	sp, sp, #28
   116f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116f8:	ldr	r3, [r6]
   116fc:	orr	r3, r3, #16
   11700:	str	r3, [r6]
   11704:	b	115c4 <__assert_fail@plt+0x64>
   11708:	ldr	r0, [r8]
   1170c:	movw	r4, #25600	; 0x6400
   11710:	bl	11248 <cplus_demangle_name_to_style@plt>
   11714:	movt	r4, #2
   11718:	cmp	r0, #0
   1171c:	beq	1196c <__assert_fail@plt+0x40c>
   11720:	bl	112c0 <cplus_demangle_set_style@plt>
   11724:	b	115c4 <__assert_fail@plt+0x64>
   11728:	ldr	r3, [r6]
   1172c:	bic	r3, r3, #1
   11730:	str	r3, [r6]
   11734:	b	115c4 <__assert_fail@plt+0x64>
   11738:	mov	r3, #0
   1173c:	str	r3, [r7]
   11740:	b	115c4 <__assert_fail@plt+0x64>
   11744:	ldr	r3, [r6]
   11748:	bic	r3, r3, #8
   1174c:	str	r3, [r6]
   11750:	b	115c4 <__assert_fail@plt+0x64>
   11754:	movw	r3, #25592	; 0x63f8
   11758:	movt	r3, #2
   1175c:	mov	r1, #0
   11760:	ldr	r0, [r3]
   11764:	bl	11aec <__assert_fail@plt+0x58c>
   11768:	str	r9, [r7]
   1176c:	b	115c4 <__assert_fail@plt+0x64>
   11770:	movw	r3, #25432	; 0x6358
   11774:	movt	r3, #2
   11778:	mov	r1, #1
   1177c:	ldr	r0, [r3]
   11780:	bl	11aec <__assert_fail@plt+0x58c>
   11784:	movw	r4, #24912	; 0x6150
   11788:	movt	r4, #2
   1178c:	ldr	r2, [sp, #20]
   11790:	ldr	r3, [r4]
   11794:	cmp	r3, r2
   11798:	blt	118b8 <__assert_fail@plt+0x358>
   1179c:	movw	r3, #24896	; 0x6140
   117a0:	movt	r3, #2
   117a4:	ldr	r3, [r3]
   117a8:	cmp	r3, #2048	; 0x800
   117ac:	beq	11938 <__assert_fail@plt+0x3d8>
   117b0:	ble	11944 <__assert_fail@plt+0x3e4>
   117b4:	cmp	r3, #16384	; 0x4000
   117b8:	beq	11938 <__assert_fail@plt+0x3d8>
   117bc:	bgt	11928 <__assert_fail@plt+0x3c8>
   117c0:	cmp	r3, #4096	; 0x1000
   117c4:	movweq	r8, #21272	; 0x5318
   117c8:	movteq	r8, #1
   117cc:	bne	1199c <__assert_fail@plt+0x43c>
   117d0:	movw	r4, #25440	; 0x6360
   117d4:	movw	r5, #24920	; 0x6158
   117d8:	movt	r4, #2
   117dc:	movt	r5, #2
   117e0:	movw	r6, #32766	; 0x7ffe
   117e4:	movw	r3, #25592	; 0x63f8
   117e8:	movw	r2, #25608	; 0x6408
   117ec:	movt	r3, #2
   117f0:	movt	r2, #2
   117f4:	str	r3, [sp, #8]
   117f8:	str	r2, [sp, #12]
   117fc:	ldr	r7, [pc, #432]	; 119b4 <__assert_fail@plt+0x454>
   11800:	ldr	r0, [r4]
   11804:	bl	112d8 <_IO_getc@plt>
   11808:	cmn	r0, #1
   1180c:	mov	fp, r0
   11810:	beq	11918 <__assert_fail@plt+0x3b8>
   11814:	mov	r9, #0
   11818:	b	11820 <__assert_fail@plt+0x2c0>
   1181c:	mov	r9, sl
   11820:	uxtb	r1, fp
   11824:	lsl	r1, r1, #1
   11828:	ldrh	r1, [r5, r1]
   1182c:	tst	r1, #140	; 0x8c
   11830:	bne	11848 <__assert_fail@plt+0x2e8>
   11834:	mov	r0, r8
   11838:	mov	r1, fp
   1183c:	bl	11458 <strchr@plt>
   11840:	cmp	r0, #0
   11844:	beq	11900 <__assert_fail@plt+0x3a0>
   11848:	cmp	r9, r6
   1184c:	beq	11910 <__assert_fail@plt+0x3b0>
   11850:	ldr	r0, [r4]
   11854:	add	sl, r9, #1
   11858:	strb	fp, [r9, r7]
   1185c:	bl	112d8 <_IO_getc@plt>
   11860:	cmn	r0, #1
   11864:	mov	fp, r0
   11868:	bne	1181c <__assert_fail@plt+0x2bc>
   1186c:	ldr	r3, [sp, #12]
   11870:	mov	r2, #0
   11874:	ldr	r0, [pc, #312]	; 119b4 <__assert_fail@plt+0x454>
   11878:	add	r1, r3, sl
   1187c:	strb	r2, [r1, #4]
   11880:	bl	11c38 <__assert_fail@plt+0x6d8>
   11884:	cmn	fp, #1
   11888:	beq	11918 <__assert_fail@plt+0x3b8>
   1188c:	ldr	r2, [sp, #8]
   11890:	mov	r0, fp
   11894:	ldr	r1, [r2]
   11898:	bl	11350 <_IO_putc@plt>
   1189c:	cmp	fp, #10
   118a0:	bne	11800 <__assert_fail@plt+0x2a0>
   118a4:	movw	r3, #25592	; 0x63f8
   118a8:	movt	r3, #2
   118ac:	ldr	r0, [r3]
   118b0:	bl	11278 <fflush@plt>
   118b4:	b	117fc <__assert_fail@plt+0x29c>
   118b8:	movw	r2, #25592	; 0x63f8
   118bc:	movt	r2, #2
   118c0:	str	r2, [sp, #8]
   118c4:	ldr	r2, [sp, #16]
   118c8:	ldr	r0, [r2, r3, lsl #2]
   118cc:	bl	11c38 <__assert_fail@plt+0x6d8>
   118d0:	ldr	r2, [sp, #8]
   118d4:	mov	r0, #10
   118d8:	ldr	r1, [r2]
   118dc:	bl	11350 <_IO_putc@plt>
   118e0:	ldr	r3, [r4]
   118e4:	ldr	r2, [sp, #20]
   118e8:	add	r3, r3, #1
   118ec:	str	r3, [r4]
   118f0:	cmp	r2, r3
   118f4:	bgt	118c4 <__assert_fail@plt+0x364>
   118f8:	mov	r0, #0
   118fc:	b	116f0 <__assert_fail@plt+0x190>
   11900:	cmp	r9, #0
   11904:	movne	sl, r9
   11908:	beq	11884 <__assert_fail@plt+0x324>
   1190c:	b	1186c <__assert_fail@plt+0x30c>
   11910:	mov	sl, r6
   11914:	b	1186c <__assert_fail@plt+0x30c>
   11918:	ldr	r2, [sp, #8]
   1191c:	ldr	r0, [r2]
   11920:	bl	11278 <fflush@plt>
   11924:	b	118f8 <__assert_fail@plt+0x398>
   11928:	cmp	r3, #32768	; 0x8000
   1192c:	beq	11938 <__assert_fail@plt+0x3d8>
   11930:	cmp	r3, #65536	; 0x10000
   11934:	bne	11960 <__assert_fail@plt+0x400>
   11938:	movw	r8, #21268	; 0x5314
   1193c:	movt	r8, #1
   11940:	b	117d0 <__assert_fail@plt+0x270>
   11944:	cmp	r3, #256	; 0x100
   11948:	beq	11938 <__assert_fail@plt+0x3d8>
   1194c:	ble	119a8 <__assert_fail@plt+0x448>
   11950:	cmp	r3, #512	; 0x200
   11954:	beq	11938 <__assert_fail@plt+0x3d8>
   11958:	cmp	r3, #1024	; 0x400
   1195c:	beq	11938 <__assert_fail@plt+0x3d8>
   11960:	movw	r0, #21348	; 0x5364
   11964:	movt	r0, #1
   11968:	bl	11eb8 <__assert_fail@plt+0x958>
   1196c:	ldr	ip, [r4]
   11970:	movw	r0, #25432	; 0x6358
   11974:	movt	r0, #2
   11978:	ldr	r3, [r5]
   1197c:	movw	r2, #21300	; 0x5334
   11980:	mov	r1, #1
   11984:	str	ip, [sp]
   11988:	movt	r2, #1
   1198c:	ldr	r0, [r0]
   11990:	bl	11494 <__fprintf_chk@plt>
   11994:	mov	r0, #1
   11998:	b	116f0 <__assert_fail@plt+0x190>
   1199c:	cmp	r3, #8192	; 0x2000
   119a0:	bne	11960 <__assert_fail@plt+0x400>
   119a4:	b	11938 <__assert_fail@plt+0x3d8>
   119a8:	cmp	r3, #4
   119ac:	bne	11960 <__assert_fail@plt+0x400>
   119b0:	b	11938 <__assert_fail@plt+0x3d8>
   119b4:	andeq	r6, r2, ip, lsl #8
   119b8:	mov	fp, #0
   119bc:	mov	lr, #0
   119c0:	pop	{r1}		; (ldr r1, [sp], #4)
   119c4:	mov	r2, sp
   119c8:	push	{r2}		; (str r2, [sp, #-4]!)
   119cc:	push	{r0}		; (str r0, [sp, #-4]!)
   119d0:	ldr	ip, [pc, #16]	; 119e8 <__assert_fail@plt+0x488>
   119d4:	push	{ip}		; (str ip, [sp, #-4]!)
   119d8:	ldr	r0, [pc, #12]	; 119ec <__assert_fail@plt+0x48c>
   119dc:	ldr	r3, [pc, #12]	; 119f0 <__assert_fail@plt+0x490>
   119e0:	bl	113e0 <__libc_start_main@plt>
   119e4:	bl	11548 <abort@plt>
   119e8:	andeq	r4, r1, ip, lsr #30
   119ec:	andeq	r1, r1, ip, ror #10
   119f0:	andeq	r4, r1, r8, asr #29
   119f4:	ldr	r3, [pc, #20]	; 11a10 <__assert_fail@plt+0x4b0>
   119f8:	ldr	r2, [pc, #20]	; 11a14 <__assert_fail@plt+0x4b4>
   119fc:	add	r3, pc, r3
   11a00:	ldr	r2, [r3, r2]
   11a04:	cmp	r2, #0
   11a08:	bxeq	lr
   11a0c:	b	11404 <__gmon_start__@plt>
   11a10:	strdeq	r4, [r1], -ip
   11a14:	andeq	r0, r0, r8, lsr #2
   11a18:	push	{r3, lr}
   11a1c:	movw	r0, #24892	; 0x613c
   11a20:	ldr	r3, [pc, #36]	; 11a4c <__assert_fail@plt+0x4ec>
   11a24:	movt	r0, #2
   11a28:	rsb	r3, r0, r3
   11a2c:	cmp	r3, #6
   11a30:	popls	{r3, pc}
   11a34:	movw	r3, #0
   11a38:	movt	r3, #0
   11a3c:	cmp	r3, #0
   11a40:	popeq	{r3, pc}
   11a44:	blx	r3
   11a48:	pop	{r3, pc}
   11a4c:	andeq	r6, r2, pc, lsr r1
   11a50:	push	{r3, lr}
   11a54:	movw	r0, #24892	; 0x613c
   11a58:	movw	r3, #24892	; 0x613c
   11a5c:	movt	r0, #2
   11a60:	movt	r3, #2
   11a64:	rsb	r3, r0, r3
   11a68:	asr	r3, r3, #2
   11a6c:	add	r3, r3, r3, lsr #31
   11a70:	asrs	r1, r3, #1
   11a74:	popeq	{r3, pc}
   11a78:	movw	r2, #0
   11a7c:	movt	r2, #0
   11a80:	cmp	r2, #0
   11a84:	popeq	{r3, pc}
   11a88:	blx	r2
   11a8c:	pop	{r3, pc}
   11a90:	push	{r4, lr}
   11a94:	movw	r4, #25604	; 0x6404
   11a98:	movt	r4, #2
   11a9c:	ldrb	r3, [r4]
   11aa0:	cmp	r3, #0
   11aa4:	popne	{r4, pc}
   11aa8:	bl	11a18 <__assert_fail@plt+0x4b8>
   11aac:	mov	r3, #1
   11ab0:	strb	r3, [r4]
   11ab4:	pop	{r4, pc}
   11ab8:	movw	r0, #24316	; 0x5efc
   11abc:	movt	r0, #2
   11ac0:	push	{r3, lr}
   11ac4:	ldr	r3, [r0]
   11ac8:	cmp	r3, #0
   11acc:	beq	11ae4 <__assert_fail@plt+0x584>
   11ad0:	movw	r3, #0
   11ad4:	movt	r3, #0
   11ad8:	cmp	r3, #0
   11adc:	beq	11ae4 <__assert_fail@plt+0x584>
   11ae0:	blx	r3
   11ae4:	pop	{r3, lr}
   11ae8:	b	11a50 <__assert_fail@plt+0x4f0>
   11aec:	movw	r3, #58392	; 0xe418
   11af0:	movt	r3, #2
   11af4:	push	{r4, r5, r6, lr}
   11af8:	movw	r2, #20432	; 0x4fd0
   11afc:	mov	r5, r0
   11b00:	ldr	r3, [r3]
   11b04:	movt	r2, #1
   11b08:	mov	r6, r1
   11b0c:	mov	r1, #1
   11b10:	movw	r4, #25444	; 0x6364
   11b14:	bl	11494 <__fprintf_chk@plt>
   11b18:	mov	r1, #1
   11b1c:	mov	r0, r5
   11b20:	movw	r2, #20472	; 0x4ff8
   11b24:	movw	r3, #21200	; 0x52d0
   11b28:	movt	r2, #1
   11b2c:	movt	r3, #1
   11b30:	movt	r4, #2
   11b34:	bl	11494 <__fprintf_chk@plt>
   11b38:	mov	r1, #1
   11b3c:	mov	r0, r5
   11b40:	movw	r2, #20552	; 0x5048
   11b44:	movw	r3, #20620	; 0x508c
   11b48:	movt	r2, #1
   11b4c:	movt	r3, #1
   11b50:	bl	11494 <__fprintf_chk@plt>
   11b54:	mov	r3, r5
   11b58:	mov	r1, #1
   11b5c:	mov	r2, #223	; 0xdf
   11b60:	movw	r0, #20632	; 0x5098
   11b64:	movt	r0, #1
   11b68:	bl	1135c <fwrite@plt>
   11b6c:	ldr	r3, [r4]
   11b70:	mov	r0, r5
   11b74:	movw	r2, #20856	; 0x5178
   11b78:	mov	r1, #1
   11b7c:	movt	r2, #1
   11b80:	bl	11494 <__fprintf_chk@plt>
   11b84:	ldr	r3, [r4, #16]
   11b88:	cmp	r3, #0
   11b8c:	addne	r4, r4, #24
   11b90:	beq	11bbc <__assert_fail@plt+0x65c>
   11b94:	ldr	r3, [r4, #-12]
   11b98:	add	r4, r4, #12
   11b9c:	movw	r2, #21204	; 0x52d4
   11ba0:	mov	r0, r5
   11ba4:	movt	r2, #1
   11ba8:	mov	r1, #1
   11bac:	bl	11494 <__fprintf_chk@plt>
   11bb0:	ldr	r2, [r4, #-8]
   11bb4:	cmp	r2, #0
   11bb8:	bne	11b94 <__assert_fail@plt+0x634>
   11bbc:	mov	r1, r5
   11bc0:	mov	r0, #125	; 0x7d
   11bc4:	bl	114e8 <fputc@plt>
   11bc8:	mov	r1, #1
   11bcc:	mov	r2, #2
   11bd0:	mov	r3, r5
   11bd4:	movw	r0, #20860	; 0x517c
   11bd8:	movt	r0, #1
   11bdc:	bl	1135c <fwrite@plt>
   11be0:	movw	r0, #20864	; 0x5180
   11be4:	mov	r1, #1
   11be8:	movt	r0, #1
   11bec:	mov	r2, #336	; 0x150
   11bf0:	mov	r3, r5
   11bf4:	bl	1135c <fwrite@plt>
   11bf8:	cmp	r6, #0
   11bfc:	beq	11c08 <__assert_fail@plt+0x6a8>
   11c00:	mov	r0, r6
   11c04:	bl	11428 <exit@plt>
   11c08:	mov	r0, r6
   11c0c:	mov	r2, #5
   11c10:	movw	r1, #21208	; 0x52d8
   11c14:	movt	r1, #1
   11c18:	bl	112fc <dcgettext@plt>
   11c1c:	movw	r3, #21228	; 0x52ec
   11c20:	mov	r1, #1
   11c24:	movt	r3, #1
   11c28:	mov	r2, r0
   11c2c:	mov	r0, r5
   11c30:	bl	11494 <__fprintf_chk@plt>
   11c34:	b	11c00 <__assert_fail@plt+0x6a0>
   11c38:	push	{r3, r4, r5, lr}
   11c3c:	movw	r3, #25608	; 0x6408
   11c40:	ldrb	r2, [r0]
   11c44:	movt	r3, #2
   11c48:	mov	r4, r0
   11c4c:	cmp	r2, #46	; 0x2e
   11c50:	cmpne	r2, #36	; 0x24
   11c54:	ldr	r3, [r3]
   11c58:	movne	r2, #0
   11c5c:	moveq	r2, #1
   11c60:	cmp	r3, #0
   11c64:	beq	11cc0 <__assert_fail@plt+0x760>
   11c68:	ldrb	r3, [r0, r2]
   11c6c:	add	r0, r0, r2
   11c70:	cmp	r3, #95	; 0x5f
   11c74:	beq	11cbc <__assert_fail@plt+0x75c>
   11c78:	movw	r3, #24888	; 0x6138
   11c7c:	movt	r3, #2
   11c80:	ldr	r1, [r3]
   11c84:	bl	114c4 <cplus_demangle@plt>
   11c88:	subs	r5, r0, #0
   11c8c:	beq	11cdc <__assert_fail@plt+0x77c>
   11c90:	ldrb	r0, [r4]
   11c94:	cmp	r0, #46	; 0x2e
   11c98:	beq	11cc8 <__assert_fail@plt+0x768>
   11c9c:	mov	r2, r5
   11ca0:	movw	r1, #22024	; 0x5608
   11ca4:	mov	r0, #1
   11ca8:	movt	r1, #1
   11cac:	bl	11488 <__printf_chk@plt>
   11cb0:	mov	r0, r5
   11cb4:	pop	{r3, r4, r5, lr}
   11cb8:	b	112a8 <free@plt>
   11cbc:	add	r2, r2, #1
   11cc0:	add	r0, r4, r2
   11cc4:	b	11c78 <__assert_fail@plt+0x718>
   11cc8:	movw	r3, #25592	; 0x63f8
   11ccc:	movt	r3, #2
   11cd0:	ldr	r1, [r3]
   11cd4:	bl	11350 <_IO_putc@plt>
   11cd8:	b	11c9c <__assert_fail@plt+0x73c>
   11cdc:	mov	r2, r4
   11ce0:	movw	r1, #22024	; 0x5608
   11ce4:	mov	r0, #1
   11ce8:	movt	r1, #1
   11cec:	pop	{r3, r4, r5, lr}
   11cf0:	b	11488 <__printf_chk@plt>
   11cf4:	push	{r4, r5, r6, lr}
   11cf8:	mov	r1, #47	; 0x2f
   11cfc:	mov	r6, r0
   11d00:	bl	114dc <strrchr@plt>
   11d04:	subs	r5, r0, #0
   11d08:	beq	11d5c <__assert_fail@plt+0x7fc>
   11d0c:	rsb	r4, r6, r5
   11d10:	add	r0, r4, #11
   11d14:	add	r5, r4, #1
   11d18:	bl	11368 <xmalloc@plt>
   11d1c:	mov	r1, r6
   11d20:	mov	r2, r4
   11d24:	bl	112cc <memcpy@plt>
   11d28:	mov	r3, #47	; 0x2f
   11d2c:	mov	ip, r0
   11d30:	strb	r3, [r0, r4]
   11d34:	movw	r3, #21532	; 0x541c
   11d38:	movt	r3, #1
   11d3c:	add	r2, ip, r5
   11d40:	ldm	r3!, {r0, r1}
   11d44:	ldrb	r3, [r3]
   11d48:	str	r0, [ip, r5]
   11d4c:	mov	r0, ip
   11d50:	str	r1, [r2, #4]
   11d54:	strb	r3, [r2, #8]
   11d58:	pop	{r4, r5, r6, pc}
   11d5c:	mov	r0, #9
   11d60:	bl	11368 <xmalloc@plt>
   11d64:	mov	ip, r0
   11d68:	b	11d34 <__assert_fail@plt+0x7d4>
   11d6c:	subs	r3, r0, #0
   11d70:	beq	11da4 <__assert_fail@plt+0x844>
   11d74:	cmp	r3, #1
   11d78:	bne	11d90 <__assert_fail@plt+0x830>
   11d7c:	movw	r1, #21556	; 0x5434
   11d80:	mov	r0, #0
   11d84:	movt	r1, #1
   11d88:	mov	r2, #5
   11d8c:	b	112fc <dcgettext@plt>
   11d90:	movw	r1, #21572	; 0x5444
   11d94:	mov	r0, #0
   11d98:	movt	r1, #1
   11d9c:	mov	r2, #5
   11da0:	b	112fc <dcgettext@plt>
   11da4:	movw	r1, #21544	; 0x5428
   11da8:	mov	r2, #5
   11dac:	movt	r1, #1
   11db0:	b	112fc <dcgettext@plt>
   11db4:	push	{r4, r5, lr}
   11db8:	sub	sp, sp, #12
   11dbc:	mov	r4, r0
   11dc0:	bl	11344 <bfd_get_error@plt>
   11dc4:	bl	11518 <bfd_errmsg@plt>
   11dc8:	movw	r3, #25592	; 0x63f8
   11dcc:	movt	r3, #2
   11dd0:	mov	r5, r0
   11dd4:	ldr	r0, [r3]
   11dd8:	bl	11278 <fflush@plt>
   11ddc:	cmp	r4, #0
   11de0:	movw	r1, #25432	; 0x6358
   11de4:	movw	r3, #58392	; 0xe418
   11de8:	movt	r1, #2
   11dec:	movt	r3, #2
   11df0:	beq	11e1c <__assert_fail@plt+0x8bc>
   11df4:	str	r4, [sp]
   11df8:	movw	r2, #21592	; 0x5458
   11dfc:	ldr	r0, [r1]
   11e00:	movt	r2, #1
   11e04:	ldr	r3, [r3]
   11e08:	mov	r1, #1
   11e0c:	str	r5, [sp, #4]
   11e10:	bl	11494 <__fprintf_chk@plt>
   11e14:	add	sp, sp, #12
   11e18:	pop	{r4, r5, pc}
   11e1c:	str	r5, [sp]
   11e20:	movw	r2, #21596	; 0x545c
   11e24:	ldr	r0, [r1]
   11e28:	movt	r2, #1
   11e2c:	ldr	r3, [r3]
   11e30:	mov	r1, #1
   11e34:	bl	11494 <__fprintf_chk@plt>
   11e38:	add	sp, sp, #12
   11e3c:	pop	{r4, r5, pc}
   11e40:	push	{r3, lr}
   11e44:	bl	11db4 <__assert_fail@plt+0x854>
   11e48:	mov	r0, #1
   11e4c:	bl	114f4 <xexit@plt>
   11e50:	movw	ip, #25592	; 0x63f8
   11e54:	movt	ip, #2
   11e58:	push	{r4, r5, r6, lr}
   11e5c:	mov	r6, r0
   11e60:	ldr	r0, [ip]
   11e64:	mov	r5, r1
   11e68:	movw	r4, #25432	; 0x6358
   11e6c:	bl	11278 <fflush@plt>
   11e70:	movt	r4, #2
   11e74:	movw	ip, #58392	; 0xe418
   11e78:	movt	ip, #2
   11e7c:	mov	r1, #1
   11e80:	ldr	r0, [r4]
   11e84:	movw	r2, #21604	; 0x5464
   11e88:	ldr	r3, [ip]
   11e8c:	movt	r2, #1
   11e90:	bl	11494 <__fprintf_chk@plt>
   11e94:	mov	r2, r6
   11e98:	mov	r3, r5
   11e9c:	ldr	r0, [r4]
   11ea0:	mov	r1, #1
   11ea4:	bl	113f8 <__vfprintf_chk@plt>
   11ea8:	ldr	r1, [r4]
   11eac:	mov	r0, #10
   11eb0:	pop	{r4, r5, r6, lr}
   11eb4:	b	11350 <_IO_putc@plt>
   11eb8:	push	{r0, r1, r2, r3}
   11ebc:	movw	r3, #24904	; 0x6148
   11ec0:	movt	r3, #2
   11ec4:	push	{lr}		; (str lr, [sp, #-4]!)
   11ec8:	sub	sp, sp, #12
   11ecc:	add	r2, sp, #20
   11ed0:	ldr	r3, [r3]
   11ed4:	ldr	r0, [sp, #16]
   11ed8:	mov	r1, r2
   11edc:	str	r2, [sp]
   11ee0:	str	r3, [sp, #4]
   11ee4:	bl	11e50 <__assert_fail@plt+0x8f0>
   11ee8:	mov	r0, #1
   11eec:	bl	114f4 <xexit@plt>
   11ef0:	push	{r0, r1, r2, r3}
   11ef4:	push	{r4, lr}
   11ef8:	movw	r4, #24904	; 0x6148
   11efc:	movt	r4, #2
   11f00:	sub	sp, sp, #8
   11f04:	add	r3, sp, #20
   11f08:	ldr	r2, [r4]
   11f0c:	mov	r1, r3
   11f10:	ldr	r0, [sp, #16]
   11f14:	str	r3, [sp]
   11f18:	str	r2, [sp, #4]
   11f1c:	bl	11e50 <__assert_fail@plt+0x8f0>
   11f20:	ldr	r2, [sp, #4]
   11f24:	ldr	r3, [r4]
   11f28:	cmp	r2, r3
   11f2c:	bne	11f40 <__assert_fail@plt+0x9e0>
   11f30:	add	sp, sp, #8
   11f34:	pop	{r4, lr}
   11f38:	add	sp, sp, #16
   11f3c:	bx	lr
   11f40:	bl	11314 <__stack_chk_fail@plt>
   11f44:	push	{r4, lr}
   11f48:	movw	r0, #21612	; 0x546c
   11f4c:	movt	r0, #1
   11f50:	bl	1129c <bfd_set_default_target@plt>
   11f54:	cmp	r0, #0
   11f58:	popne	{r4, pc}
   11f5c:	mov	r2, #5
   11f60:	movw	r1, #21644	; 0x548c
   11f64:	movt	r1, #1
   11f68:	bl	112fc <dcgettext@plt>
   11f6c:	mov	r4, r0
   11f70:	bl	11344 <bfd_get_error@plt>
   11f74:	bl	11518 <bfd_errmsg@plt>
   11f78:	movw	r1, #21612	; 0x546c
   11f7c:	movt	r1, #1
   11f80:	mov	r2, r0
   11f84:	mov	r0, r4
   11f88:	bl	11eb8 <__assert_fail@plt+0x958>
   11f8c:	movw	r3, #25592	; 0x63f8
   11f90:	movt	r3, #2
   11f94:	push	{r4, r5, r6, lr}
   11f98:	mov	r4, r0
   11f9c:	movw	r5, #25432	; 0x6358
   11fa0:	ldr	r0, [r3]
   11fa4:	movt	r5, #2
   11fa8:	bl	11278 <fflush@plt>
   11fac:	mov	r2, #5
   11fb0:	movw	r1, #21688	; 0x54b8
   11fb4:	mov	r0, #0
   11fb8:	movt	r1, #1
   11fbc:	ldr	r6, [r5]
   11fc0:	bl	112fc <dcgettext@plt>
   11fc4:	movw	r3, #58392	; 0xe418
   11fc8:	movt	r3, #2
   11fcc:	mov	r1, #1
   11fd0:	ldr	r3, [r3]
   11fd4:	mov	r2, r0
   11fd8:	mov	r0, r6
   11fdc:	bl	11494 <__fprintf_chk@plt>
   11fe0:	ldr	r3, [r4]
   11fe4:	cmp	r3, #0
   11fe8:	beq	1200c <__assert_fail@plt+0xaac>
   11fec:	movw	r2, #22088	; 0x5648
   11ff0:	ldr	r0, [r5]
   11ff4:	movt	r2, #1
   11ff8:	mov	r1, #1
   11ffc:	bl	11494 <__fprintf_chk@plt>
   12000:	ldr	r3, [r4, #4]!
   12004:	cmp	r3, #0
   12008:	bne	11fec <__assert_fail@plt+0xa8c>
   1200c:	ldr	r1, [r5]
   12010:	mov	r0, #10
   12014:	pop	{r4, r5, r6, lr}
   12018:	b	114e8 <fputc@plt>
   1201c:	push	{r4, r5, r6, lr}
   12020:	subs	r4, r0, #0
   12024:	mov	r5, r1
   12028:	beq	120a4 <__assert_fail@plt+0xb44>
   1202c:	mov	r2, #5
   12030:	movw	r1, #21732	; 0x54e4
   12034:	mov	r0, #0
   12038:	movt	r1, #1
   1203c:	bl	112fc <dcgettext@plt>
   12040:	mov	r3, r4
   12044:	mov	r1, #1
   12048:	mov	r2, r0
   1204c:	mov	r0, r5
   12050:	bl	11494 <__fprintf_chk@plt>
   12054:	bl	11338 <bfd_target_list@plt>
   12058:	ldr	r3, [r0]
   1205c:	mov	r6, r0
   12060:	cmp	r3, #0
   12064:	movne	r4, r0
   12068:	beq	1208c <__assert_fail@plt+0xb2c>
   1206c:	movw	r2, #22088	; 0x5648
   12070:	mov	r0, r5
   12074:	movt	r2, #1
   12078:	mov	r1, #1
   1207c:	bl	11494 <__fprintf_chk@plt>
   12080:	ldr	r3, [r4, #4]!
   12084:	cmp	r3, #0
   12088:	bne	1206c <__assert_fail@plt+0xb0c>
   1208c:	mov	r1, r5
   12090:	mov	r0, #10
   12094:	bl	114e8 <fputc@plt>
   12098:	mov	r0, r6
   1209c:	pop	{r4, r5, r6, lr}
   120a0:	b	112a8 <free@plt>
   120a4:	mov	r2, #5
   120a8:	movw	r1, #21712	; 0x54d0
   120ac:	movt	r1, #1
   120b0:	bl	112fc <dcgettext@plt>
   120b4:	mov	r1, #1
   120b8:	mov	r2, r0
   120bc:	mov	r0, r5
   120c0:	bl	11494 <__fprintf_chk@plt>
   120c4:	b	12054 <__assert_fail@plt+0xaf4>
   120c8:	push	{r4, r5, r6, lr}
   120cc:	subs	r4, r0, #0
   120d0:	mov	r5, r1
   120d4:	beq	12150 <__assert_fail@plt+0xbf0>
   120d8:	mov	r2, #5
   120dc:	movw	r1, #21784	; 0x5518
   120e0:	mov	r0, #0
   120e4:	movt	r1, #1
   120e8:	bl	112fc <dcgettext@plt>
   120ec:	mov	r3, r4
   120f0:	mov	r1, #1
   120f4:	mov	r2, r0
   120f8:	mov	r0, r5
   120fc:	bl	11494 <__fprintf_chk@plt>
   12100:	bl	11284 <bfd_arch_list@plt>
   12104:	ldr	r3, [r0]
   12108:	mov	r6, r0
   1210c:	cmp	r3, #0
   12110:	movne	r4, r0
   12114:	beq	12138 <__assert_fail@plt+0xbd8>
   12118:	movw	r2, #22088	; 0x5648
   1211c:	mov	r0, r5
   12120:	movt	r2, #1
   12124:	mov	r1, #1
   12128:	bl	11494 <__fprintf_chk@plt>
   1212c:	ldr	r3, [r4, #4]!
   12130:	cmp	r3, #0
   12134:	bne	12118 <__assert_fail@plt+0xbb8>
   12138:	mov	r1, r5
   1213c:	mov	r0, #10
   12140:	bl	114e8 <fputc@plt>
   12144:	mov	r0, r6
   12148:	pop	{r4, r5, r6, lr}
   1214c:	b	112a8 <free@plt>
   12150:	mov	r2, #5
   12154:	movw	r1, #21756	; 0x54fc
   12158:	movt	r1, #1
   1215c:	bl	112fc <dcgettext@plt>
   12160:	mov	r1, #1
   12164:	mov	r2, r0
   12168:	mov	r0, r5
   1216c:	bl	11494 <__fprintf_chk@plt>
   12170:	b	12100 <__assert_fail@plt+0xba0>
   12174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12178:	mov	r2, #5
   1217c:	sub	sp, sp, #44	; 0x2c
   12180:	movw	r1, #21816	; 0x5538
   12184:	mov	r0, #0
   12188:	movt	r1, #1
   1218c:	bl	112fc <dcgettext@plt>
   12190:	movw	r2, #21844	; 0x5554
   12194:	movt	r2, #1
   12198:	movw	fp, #25436	; 0x635c
   1219c:	movt	fp, #2
   121a0:	mov	r1, r0
   121a4:	mov	r0, #1
   121a8:	bl	11488 <__printf_chk@plt>
   121ac:	mov	r0, #0
   121b0:	bl	136e8 <__assert_fail@plt+0x2188>
   121b4:	ldr	r3, [fp]
   121b8:	ldr	r4, [r3]
   121bc:	cmp	r4, #0
   121c0:	mov	r6, r0
   121c4:	beq	12314 <__assert_fail@plt+0xdb4>
   121c8:	mov	r8, #4
   121cc:	mov	r7, #1
   121d0:	ldr	r1, [r4]
   121d4:	mov	r0, r6
   121d8:	bl	114b8 <bfd_openw@plt>
   121dc:	mov	r2, #5
   121e0:	movw	r1, #21872	; 0x5570
   121e4:	movt	r1, #1
   121e8:	mov	r5, r0
   121ec:	mov	r0, #0
   121f0:	bl	112fc <dcgettext@plt>
   121f4:	ldr	sl, [r4]
   121f8:	mov	r1, r0
   121fc:	ldr	r0, [r4, #12]
   12200:	str	r1, [sp, #8]
   12204:	bl	11d6c <__assert_fail@plt+0x80c>
   12208:	mov	r9, r0
   1220c:	ldr	r0, [r4, #8]
   12210:	bl	11d6c <__assert_fail@plt+0x80c>
   12214:	ldr	r1, [sp, #8]
   12218:	mov	r2, sl
   1221c:	mov	r3, r9
   12220:	str	r0, [sp]
   12224:	mov	r0, #1
   12228:	bl	11488 <__printf_chk@plt>
   1222c:	cmp	r5, #0
   12230:	beq	12304 <__assert_fail@plt+0xda4>
   12234:	mov	r0, r5
   12238:	mov	r1, #1
   1223c:	bl	11410 <bfd_set_format@plt>
   12240:	subs	r9, r0, #0
   12244:	movne	r4, #2
   12248:	bne	1225c <__assert_fail@plt+0xcfc>
   1224c:	b	122e8 <__assert_fail@plt+0xd88>
   12250:	add	r4, r4, #1
   12254:	cmp	r4, #92	; 0x5c
   12258:	beq	122a8 <__assert_fail@plt+0xd48>
   1225c:	ldr	r3, [r5, #4]
   12260:	mov	r0, r5
   12264:	mov	r1, r4
   12268:	mov	r2, #0
   1226c:	ldr	r3, [r3, #336]	; 0x150
   12270:	blx	r3
   12274:	cmp	r0, #0
   12278:	beq	12250 <__assert_fail@plt+0xcf0>
   1227c:	mov	r0, r4
   12280:	mov	r1, #0
   12284:	bl	11464 <bfd_printable_arch_mach@plt>
   12288:	add	r4, r4, #1
   1228c:	movw	r1, #21900	; 0x558c
   12290:	movt	r1, #1
   12294:	mov	r2, r0
   12298:	mov	r0, #1
   1229c:	bl	11488 <__printf_chk@plt>
   122a0:	cmp	r4, #92	; 0x5c
   122a4:	bne	1225c <__assert_fail@plt+0xcfc>
   122a8:	mov	r0, r5
   122ac:	bl	1144c <bfd_close_all_done@plt>
   122b0:	ldr	r3, [fp]
   122b4:	ldr	r4, [r3, r8]
   122b8:	add	r8, r8, #4
   122bc:	cmp	r4, #0
   122c0:	bne	121d0 <__assert_fail@plt+0xc70>
   122c4:	mov	r0, r6
   122c8:	bl	11320 <unlink@plt>
   122cc:	mov	r0, r6
   122d0:	bl	112a8 <free@plt>
   122d4:	cmp	r7, #0
   122d8:	moveq	r0, #1
   122dc:	bne	12320 <__assert_fail@plt+0xdc0>
   122e0:	add	sp, sp, #44	; 0x2c
   122e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122e8:	bl	11344 <bfd_get_error@plt>
   122ec:	cmp	r0, #5
   122f0:	beq	122a8 <__assert_fail@plt+0xd48>
   122f4:	ldr	r0, [r4]
   122f8:	mov	r7, r9
   122fc:	bl	11db4 <__assert_fail@plt+0x854>
   12300:	b	122a8 <__assert_fail@plt+0xd48>
   12304:	mov	r0, r6
   12308:	mov	r7, r5
   1230c:	bl	11db4 <__assert_fail@plt+0x854>
   12310:	b	122b0 <__assert_fail@plt+0xd50>
   12314:	bl	11320 <unlink@plt>
   12318:	mov	r0, r6
   1231c:	bl	112a8 <free@plt>
   12320:	movw	r0, #21908	; 0x5594
   12324:	movt	r0, #1
   12328:	bl	113b0 <getenv@plt>
   1232c:	cmp	r0, #0
   12330:	beq	12674 <__assert_fail@plt+0x1114>
   12334:	mov	r1, #0
   12338:	mov	r2, #10
   1233c:	bl	1126c <strtol@plt>
   12340:	cmp	r0, #0
   12344:	str	r0, [sp, #32]
   12348:	beq	12674 <__assert_fail@plt+0x1114>
   1234c:	movw	sl, #25592	; 0x63f8
   12350:	movt	sl, #2
   12354:	mov	r3, #1
   12358:	mov	r2, #0
   1235c:	str	r3, [sp, #36]	; 0x24
   12360:	str	r2, [sp, #16]
   12364:	ldr	r6, [fp]
   12368:	ldr	r3, [sp, #16]
   1236c:	ldr	r2, [sp, #16]
   12370:	lsl	r3, r3, #2
   12374:	str	r3, [sp, #24]
   12378:	ldr	r3, [r6, r2, lsl #2]
   1237c:	cmp	r3, #0
   12380:	beq	12660 <__assert_fail@plt+0x1100>
   12384:	ldr	r0, [r3]
   12388:	ldr	r3, [sp, #16]
   1238c:	add	r9, r3, #1
   12390:	bl	11440 <strlen@plt>
   12394:	ldr	r2, [sp, #32]
   12398:	add	r5, r0, #16
   1239c:	cmp	r5, r2
   123a0:	bge	12650 <__assert_fail@plt+0x10f0>
   123a4:	ldr	r2, [sp, #24]
   123a8:	add	r2, r2, #4
   123ac:	str	r2, [sp, #20]
   123b0:	add	r4, r6, r2
   123b4:	ldr	r3, [r6, r2]
   123b8:	cmp	r3, #0
   123bc:	beq	123f0 <__assert_fail@plt+0xe90>
   123c0:	ldr	r6, [sp, #32]
   123c4:	b	123d8 <__assert_fail@plt+0xe78>
   123c8:	ldr	r3, [r4, #4]!
   123cc:	add	r9, r9, #1
   123d0:	cmp	r3, #0
   123d4:	beq	123f0 <__assert_fail@plt+0xe90>
   123d8:	ldr	r0, [r3]
   123dc:	add	r5, r5, #1
   123e0:	bl	11440 <strlen@plt>
   123e4:	add	r5, r5, r0
   123e8:	cmp	r5, r6
   123ec:	blt	123c8 <__assert_fail@plt+0xe68>
   123f0:	movw	r1, #21916	; 0x559c
   123f4:	movw	r3, #21924	; 0x55a4
   123f8:	movt	r1, #1
   123fc:	movt	r3, #1
   12400:	mov	r0, #1
   12404:	mov	r2, #15
   12408:	bl	11488 <__printf_chk@plt>
   1240c:	ldr	r3, [sp, #16]
   12410:	cmp	r9, r3
   12414:	ble	1246c <__assert_fail@plt+0xf0c>
   12418:	ldr	r3, [fp]
   1241c:	ldr	r2, [sp, #24]
   12420:	ldr	r3, [r3, r2]
   12424:	cmp	r3, #0
   12428:	beq	1246c <__assert_fail@plt+0xf0c>
   1242c:	ldr	r5, [sp, #20]
   12430:	ldr	r4, [sp, #16]
   12434:	b	1244c <__assert_fail@plt+0xeec>
   12438:	ldr	r3, [fp]
   1243c:	ldr	r3, [r3, r5]
   12440:	add	r5, r5, #4
   12444:	cmp	r3, #0
   12448:	beq	1246c <__assert_fail@plt+0xf0c>
   1244c:	ldr	r2, [r3]
   12450:	add	r4, r4, #1
   12454:	movw	r1, #21928	; 0x55a8
   12458:	mov	r0, #1
   1245c:	movt	r1, #1
   12460:	bl	11488 <__printf_chk@plt>
   12464:	cmp	r4, r9
   12468:	bne	12438 <__assert_fail@plt+0xed8>
   1246c:	ldr	r1, [sl]
   12470:	mov	r0, #10
   12474:	bl	11350 <_IO_putc@plt>
   12478:	mov	r0, #0
   1247c:	bl	136e8 <__assert_fail@plt+0x2188>
   12480:	mov	r8, #2
   12484:	mov	r2, #1
   12488:	str	r2, [sp, #28]
   1248c:	str	r0, [sp, #12]
   12490:	b	124a0 <__assert_fail@plt+0xf40>
   12494:	add	r8, r8, #1
   12498:	cmp	r8, #92	; 0x5c
   1249c:	beq	125f0 <__assert_fail@plt+0x1090>
   124a0:	mov	r1, #0
   124a4:	mov	r0, r8
   124a8:	bl	11464 <bfd_printable_arch_mach@plt>
   124ac:	movw	r1, #21932	; 0x55ac
   124b0:	movt	r1, #1
   124b4:	bl	11260 <strcmp@plt>
   124b8:	cmp	r0, #0
   124bc:	beq	12494 <__assert_fail@plt+0xf34>
   124c0:	mov	r1, #0
   124c4:	mov	r0, r8
   124c8:	bl	11464 <bfd_printable_arch_mach@plt>
   124cc:	movw	r1, #21944	; 0x55b8
   124d0:	mov	r2, #14
   124d4:	movt	r1, #1
   124d8:	mov	r3, r0
   124dc:	mov	r0, #1
   124e0:	bl	11488 <__printf_chk@plt>
   124e4:	ldr	r3, [sp, #16]
   124e8:	cmp	r9, r3
   124ec:	ble	125d8 <__assert_fail@plt+0x1078>
   124f0:	ldr	r3, [fp]
   124f4:	ldr	r2, [sp, #24]
   124f8:	ldr	r4, [r3, r2]
   124fc:	cmp	r4, #0
   12500:	beq	125d8 <__assert_fail@plt+0x1078>
   12504:	ldr	r7, [sp, #20]
   12508:	ldr	r6, [sp, #16]
   1250c:	b	1254c <__assert_fail@plt+0xfec>
   12510:	movw	r1, #21928	; 0x55a8
   12514:	ldr	r2, [r4]
   12518:	mov	r0, #1
   1251c:	movt	r1, #1
   12520:	bl	11488 <__printf_chk@plt>
   12524:	mov	r0, r5
   12528:	add	r6, r6, #1
   1252c:	bl	1144c <bfd_close_all_done@plt>
   12530:	cmp	r6, r9
   12534:	beq	125d8 <__assert_fail@plt+0x1078>
   12538:	ldr	r3, [fp]
   1253c:	ldr	r4, [r3, r7]
   12540:	add	r7, r7, #4
   12544:	cmp	r4, #0
   12548:	beq	125d8 <__assert_fail@plt+0x1078>
   1254c:	ldr	r0, [sp, #12]
   12550:	ldr	r1, [r4]
   12554:	bl	114b8 <bfd_openw@plt>
   12558:	subs	r5, r0, #0
   1255c:	beq	12640 <__assert_fail@plt+0x10e0>
   12560:	mov	r1, #1
   12564:	bl	11410 <bfd_set_format@plt>
   12568:	subs	r3, r0, #0
   1256c:	beq	1261c <__assert_fail@plt+0x10bc>
   12570:	ldr	r3, [r5, #4]
   12574:	mov	r0, r5
   12578:	mov	r1, r8
   1257c:	mov	r2, #0
   12580:	ldr	r3, [r3, #336]	; 0x150
   12584:	blx	r3
   12588:	cmp	r0, #0
   1258c:	bne	12510 <__assert_fail@plt+0xfb0>
   12590:	ldr	r0, [r4]
   12594:	bl	11440 <strlen@plt>
   12598:	cmp	r0, #0
   1259c:	beq	125b8 <__assert_fail@plt+0x1058>
   125a0:	mov	r4, r0
   125a4:	mov	r0, #45	; 0x2d
   125a8:	ldr	r1, [sl]
   125ac:	bl	11350 <_IO_putc@plt>
   125b0:	subs	r4, r4, #1
   125b4:	bne	125a4 <__assert_fail@plt+0x1044>
   125b8:	mov	r0, #32
   125bc:	ldr	r1, [sl]
   125c0:	bl	11350 <_IO_putc@plt>
   125c4:	cmp	r5, #0
   125c8:	bne	12524 <__assert_fail@plt+0xfc4>
   125cc:	add	r6, r6, #1
   125d0:	cmp	r6, r9
   125d4:	bne	12538 <__assert_fail@plt+0xfd8>
   125d8:	mov	r0, #10
   125dc:	ldr	r1, [sl]
   125e0:	add	r8, r8, #1
   125e4:	bl	11350 <_IO_putc@plt>
   125e8:	cmp	r8, #92	; 0x5c
   125ec:	bne	124a0 <__assert_fail@plt+0xf40>
   125f0:	ldr	r2, [sp, #28]
   125f4:	ldr	r3, [sp, #36]	; 0x24
   125f8:	cmp	r2, #0
   125fc:	ldr	r0, [sp, #12]
   12600:	moveq	r3, #0
   12604:	str	r3, [sp, #36]	; 0x24
   12608:	bl	11320 <unlink@plt>
   1260c:	ldr	r0, [sp, #12]
   12610:	bl	112a8 <free@plt>
   12614:	str	r9, [sp, #16]
   12618:	b	12364 <__assert_fail@plt+0xe04>
   1261c:	str	r3, [sp, #8]
   12620:	bl	11344 <bfd_get_error@plt>
   12624:	ldr	r3, [sp, #8]
   12628:	cmp	r0, #5
   1262c:	beq	12590 <__assert_fail@plt+0x1030>
   12630:	ldr	r0, [r4]
   12634:	str	r3, [sp, #28]
   12638:	bl	11db4 <__assert_fail@plt+0x854>
   1263c:	b	12590 <__assert_fail@plt+0x1030>
   12640:	ldr	r0, [r4]
   12644:	str	r5, [sp, #28]
   12648:	bl	11db4 <__assert_fail@plt+0x854>
   1264c:	b	12590 <__assert_fail@plt+0x1030>
   12650:	ldr	r3, [sp, #24]
   12654:	add	r3, r3, #4
   12658:	str	r3, [sp, #20]
   1265c:	b	123f0 <__assert_fail@plt+0xe90>
   12660:	ldr	r3, [sp, #36]	; 0x24
   12664:	rsbs	r0, r3, #1
   12668:	movcc	r0, #0
   1266c:	add	sp, sp, #44	; 0x2c
   12670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12674:	mov	r2, #80	; 0x50
   12678:	str	r2, [sp, #32]
   1267c:	b	1234c <__assert_fail@plt+0xdec>
   12680:	push	{r4, r5, r6, r7, r8, r9, lr}
   12684:	movw	r6, #24904	; 0x6148
   12688:	movt	r6, #2
   1268c:	sub	sp, sp, #196	; 0xc4
   12690:	cmp	r2, #0
   12694:	mov	r8, r0
   12698:	ldr	r3, [r6]
   1269c:	mov	r7, r1
   126a0:	str	r3, [sp, #188]	; 0xbc
   126a4:	bne	126d8 <__assert_fail@plt+0x1178>
   126a8:	ldr	r3, [r7]
   126ac:	mov	r0, r8
   126b0:	movw	r2, #21600	; 0x5460
   126b4:	mov	r1, #1
   126b8:	movt	r2, #1
   126bc:	bl	11494 <__fprintf_chk@plt>
   126c0:	ldr	r2, [sp, #188]	; 0xbc
   126c4:	ldr	r3, [r6]
   126c8:	cmp	r2, r3
   126cc:	bne	127b0 <__assert_fail@plt+0x1250>
   126d0:	add	sp, sp, #196	; 0xc4
   126d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   126d8:	ldr	r3, [r1, #4]
   126dc:	mov	r0, r1
   126e0:	add	r1, sp, #32
   126e4:	ldr	r3, [r3, #252]	; 0xfc
   126e8:	blx	r3
   126ec:	cmp	r0, #0
   126f0:	bne	126a8 <__assert_fail@plt+0x1148>
   126f4:	ldr	r3, [sp, #112]	; 0x70
   126f8:	add	r0, sp, #192	; 0xc0
   126fc:	str	r3, [r0, #-164]!	; 0xffffff5c
   12700:	bl	112f0 <ctime@plt>
   12704:	subs	r3, r0, #0
   12708:	beq	12784 <__assert_fail@plt+0x1224>
   1270c:	add	r9, sp, #148	; 0x94
   12710:	add	r2, r3, #4
   12714:	mov	r1, #1
   12718:	add	r3, r3, #20
   1271c:	str	r2, [sp]
   12720:	mov	r0, r9
   12724:	str	r3, [sp, #4]
   12728:	mov	r2, #40	; 0x28
   1272c:	movw	r3, #21972	; 0x55d4
   12730:	movt	r3, #1
   12734:	bl	1147c <__sprintf_chk@plt>
   12738:	ldr	r0, [sp, #48]	; 0x30
   1273c:	add	r1, sp, #136	; 0x88
   12740:	bl	12ccc <__assert_fail@plt+0x176c>
   12744:	ldr	r1, [sp, #56]	; 0x38
   12748:	ldr	r3, [sp, #60]	; 0x3c
   1274c:	movw	r2, #21984	; 0x55e0
   12750:	ldrd	r4, [sp, #80]	; 0x50
   12754:	movt	r2, #1
   12758:	str	r1, [sp]
   1275c:	mov	r0, r8
   12760:	str	r3, [sp, #4]
   12764:	mov	r1, #1
   12768:	str	r9, [sp, #16]
   1276c:	add	r3, sp, #137	; 0x89
   12770:	strd	r4, [sp, #8]
   12774:	mov	ip, #0
   12778:	strb	ip, [sp, #146]	; 0x92
   1277c:	bl	11494 <__fprintf_chk@plt>
   12780:	b	126a8 <__assert_fail@plt+0x1148>
   12784:	mov	r2, #5
   12788:	movw	r1, #21952	; 0x55c0
   1278c:	movt	r1, #1
   12790:	add	r9, sp, #148	; 0x94
   12794:	bl	112fc <dcgettext@plt>
   12798:	mov	r1, #1
   1279c:	mov	r2, #40	; 0x28
   127a0:	mov	r3, r0
   127a4:	mov	r0, r9
   127a8:	bl	1147c <__sprintf_chk@plt>
   127ac:	b	12738 <__assert_fail@plt+0x11d8>
   127b0:	bl	11314 <__stack_chk_fail@plt>
   127b4:	push	{r4, lr}
   127b8:	bl	11cf4 <__assert_fail@plt+0x794>
   127bc:	mov	r4, r0
   127c0:	bl	113bc <mkstemp64@plt>
   127c4:	cmn	r0, #1
   127c8:	beq	127d8 <__assert_fail@plt+0x1278>
   127cc:	bl	11554 <close@plt>
   127d0:	mov	r0, r4
   127d4:	pop	{r4, pc}
   127d8:	mov	r0, r4
   127dc:	bl	112a8 <free@plt>
   127e0:	mov	r0, #0
   127e4:	pop	{r4, pc}
   127e8:	push	{r3, lr}
   127ec:	bl	11cf4 <__assert_fail@plt+0x794>
   127f0:	pop	{r3, lr}
   127f4:	b	11500 <mkdtemp@plt>
   127f8:	push	{r4, r5, r6, lr}
   127fc:	movw	r4, #24904	; 0x6148
   12800:	movt	r4, #2
   12804:	sub	sp, sp, #8
   12808:	mov	r6, r1
   1280c:	mov	r2, #0
   12810:	ldr	r3, [r4]
   12814:	mov	r1, sp
   12818:	mov	r5, r0
   1281c:	str	r3, [sp, #4]
   12820:	bl	11254 <bfd_scan_vma@plt>
   12824:	ldr	r3, [sp]
   12828:	ldrb	r3, [r3]
   1282c:	cmp	r3, #0
   12830:	bne	12850 <__assert_fail@plt+0x12f0>
   12834:	ldr	r2, [sp, #4]
   12838:	ldr	r3, [r4]
   1283c:	cmp	r2, r3
   12840:	bne	1284c <__assert_fail@plt+0x12ec>
   12844:	add	sp, sp, #8
   12848:	pop	{r4, r5, r6, pc}
   1284c:	bl	11314 <__stack_chk_fail@plt>
   12850:	mov	r2, #5
   12854:	movw	r1, #22008	; 0x55f8
   12858:	mov	r0, #0
   1285c:	movt	r1, #1
   12860:	bl	112fc <dcgettext@plt>
   12864:	mov	r1, r6
   12868:	mov	r2, r5
   1286c:	bl	11eb8 <__assert_fail@plt+0x958>
   12870:	push	{r4, r5, r6, r7, lr}
   12874:	movw	r4, #24904	; 0x6148
   12878:	movt	r4, #2
   1287c:	sub	sp, sp, #116	; 0x74
   12880:	mov	r1, r0
   12884:	mov	r5, r0
   12888:	ldr	r3, [r4]
   1288c:	mov	r2, sp
   12890:	mov	r0, #3
   12894:	str	r3, [sp, #108]	; 0x6c
   12898:	bl	11530 <__xstat64@plt>
   1289c:	cmp	r0, #0
   128a0:	blt	128f0 <__assert_fail@plt+0x1390>
   128a4:	ldr	r3, [sp, #16]
   128a8:	and	r3, r3, #61440	; 0xf000
   128ac:	cmp	r3, #32768	; 0x8000
   128b0:	bne	1294c <__assert_fail@plt+0x13ec>
   128b4:	ldrd	r2, [sp, #48]	; 0x30
   128b8:	cmp	r2, #0
   128bc:	sbcs	r1, r3, #0
   128c0:	movwlt	r1, #22132	; 0x5674
   128c4:	movlt	r0, #0
   128c8:	movtlt	r1, #1
   128cc:	blt	12958 <__assert_fail@plt+0x13f8>
   128d0:	mov	r0, r2
   128d4:	mov	r1, r3
   128d8:	ldr	r2, [sp, #108]	; 0x6c
   128dc:	ldr	r3, [r4]
   128e0:	cmp	r2, r3
   128e4:	bne	12974 <__assert_fail@plt+0x1414>
   128e8:	add	sp, sp, #116	; 0x74
   128ec:	pop	{r4, r5, r6, r7, pc}
   128f0:	bl	11470 <__errno_location@plt>
   128f4:	ldr	r3, [r0]
   128f8:	mov	r6, r0
   128fc:	cmp	r3, #2
   12900:	movweq	r1, #22028	; 0x560c
   12904:	moveq	r0, #0
   12908:	movteq	r1, #1
   1290c:	beq	12958 <__assert_fail@plt+0x13f8>
   12910:	mov	r2, #5
   12914:	movw	r1, #22048	; 0x5620
   12918:	mov	r0, #0
   1291c:	movt	r1, #1
   12920:	bl	112fc <dcgettext@plt>
   12924:	mov	r7, r0
   12928:	ldr	r0, [r6]
   1292c:	bl	113ec <strerror@plt>
   12930:	mov	r1, r5
   12934:	mov	r2, r0
   12938:	mov	r0, r7
   1293c:	bl	11ef0 <__assert_fail@plt+0x990>
   12940:	mvn	r0, #0
   12944:	mov	r1, r0
   12948:	b	128d8 <__assert_fail@plt+0x1378>
   1294c:	movw	r1, #22092	; 0x564c
   12950:	movt	r1, #1
   12954:	mov	r0, #0
   12958:	mov	r2, #5
   1295c:	bl	112fc <dcgettext@plt>
   12960:	mov	r1, r5
   12964:	bl	11ef0 <__assert_fail@plt+0x990>
   12968:	mvn	r0, #0
   1296c:	mov	r1, r0
   12970:	b	128d8 <__assert_fail@plt+0x1378>
   12974:	bl	11314 <__stack_chk_fail@plt>
   12978:	push	{r4, r5, r6, r7, r8, lr}
   1297c:	subs	r5, r0, #0
   12980:	sub	sp, sp, #8
   12984:	beq	12a58 <__assert_fail@plt+0x14f8>
   12988:	ldr	r3, [r5, #148]	; 0x94
   1298c:	cmp	r3, #0
   12990:	beq	12a38 <__assert_fail@plt+0x14d8>
   12994:	ldrb	r2, [r3, #44]	; 0x2c
   12998:	tst	r2, #1
   1299c:	bne	12a38 <__assert_fail@plt+0x14d8>
   129a0:	ldr	r6, [r3]
   129a4:	movw	r4, #58380	; 0xe40c
   129a8:	movt	r4, #2
   129ac:	mov	r0, r6
   129b0:	bl	11440 <strlen@plt>
   129b4:	ldr	r8, [r5]
   129b8:	mov	r7, r0
   129bc:	mov	r0, r8
   129c0:	bl	11440 <strlen@plt>
   129c4:	ldr	r3, [r4]
   129c8:	add	r0, r7, r0
   129cc:	add	r7, r0, #3
   129d0:	cmp	r7, r3
   129d4:	bls	12a44 <__assert_fail@plt+0x14e4>
   129d8:	cmp	r3, #0
   129dc:	bne	12a4c <__assert_fail@plt+0x14ec>
   129e0:	add	r0, r7, r7, lsr #1
   129e4:	mov	r1, #0
   129e8:	str	r0, [r4]
   129ec:	bl	11308 <bfd_malloc@plt>
   129f0:	movw	r6, #58380	; 0xe40c
   129f4:	movt	r6, #2
   129f8:	cmp	r0, #0
   129fc:	str	r0, [r4, #4]
   12a00:	beq	12a34 <__assert_fail@plt+0x14d4>
   12a04:	ldr	r3, [r5, #148]	; 0x94
   12a08:	ldr	r8, [r5]
   12a0c:	ldr	r6, [r3]
   12a10:	stm	sp, {r6, r8}
   12a14:	mov	r1, #1
   12a18:	mvn	r2, #0
   12a1c:	movw	r3, #22224	; 0x56d0
   12a20:	movt	r3, #1
   12a24:	bl	1147c <__sprintf_chk@plt>
   12a28:	ldr	r0, [r4, #4]
   12a2c:	add	sp, sp, #8
   12a30:	pop	{r4, r5, r6, r7, r8, pc}
   12a34:	str	r0, [r6]
   12a38:	ldr	r0, [r5]
   12a3c:	add	sp, sp, #8
   12a40:	pop	{r4, r5, r6, r7, r8, pc}
   12a44:	ldr	r0, [r4, #4]
   12a48:	b	12a10 <__assert_fail@plt+0x14b0>
   12a4c:	ldr	r0, [r4, #4]
   12a50:	bl	112a8 <free@plt>
   12a54:	b	129e0 <__assert_fail@plt+0x1480>
   12a58:	movw	r0, #22192	; 0x56b0
   12a5c:	movw	r1, #22212	; 0x56c4
   12a60:	movw	r3, #21504	; 0x5400
   12a64:	movt	r0, #1
   12a68:	movt	r1, #1
   12a6c:	movw	r2, #606	; 0x25e
   12a70:	movt	r3, #1
   12a74:	bl	11560 <__assert_fail@plt>
   12a78:	push	{r3}		; (str r3, [sp, #-4]!)
   12a7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a80:	movw	r5, #24904	; 0x6148
   12a84:	movt	r5, #2
   12a88:	sub	sp, sp, #20
   12a8c:	mov	sl, r1
   12a90:	mov	r8, r2
   12a94:	ldr	r3, [r5]
   12a98:	mov	r6, r0
   12a9c:	ldr	r7, [sp, #52]	; 0x34
   12aa0:	movw	r4, #25432	; 0x6358
   12aa4:	movt	r4, #2
   12aa8:	str	r3, [sp, #12]
   12aac:	bl	11344 <bfd_get_error@plt>
   12ab0:	bl	11518 <bfd_errmsg@plt>
   12ab4:	movw	ip, #25592	; 0x63f8
   12ab8:	movt	ip, #2
   12abc:	mov	r9, r0
   12ac0:	ldr	r0, [ip]
   12ac4:	bl	11278 <fflush@plt>
   12ac8:	movw	ip, #58392	; 0xe418
   12acc:	movt	ip, #2
   12ad0:	ldr	r1, [r4]
   12ad4:	add	r3, sp, #56	; 0x38
   12ad8:	str	r3, [sp, #8]
   12adc:	ldr	r0, [ip]
   12ae0:	bl	1153c <fputs@plt>
   12ae4:	cmp	sl, #0
   12ae8:	beq	12b90 <__assert_fail@plt+0x1630>
   12aec:	cmp	r6, #0
   12af0:	beq	12bac <__assert_fail@plt+0x164c>
   12af4:	cmp	r8, #0
   12af8:	beq	12b90 <__assert_fail@plt+0x1630>
   12afc:	ldr	r2, [r8]
   12b00:	cmp	r2, #0
   12b04:	beq	12b90 <__assert_fail@plt+0x1630>
   12b08:	str	r2, [sp]
   12b0c:	mov	r3, r6
   12b10:	movw	r2, #22232	; 0x56d8
   12b14:	ldr	r0, [r4]
   12b18:	mov	r1, #1
   12b1c:	movt	r2, #1
   12b20:	bl	11494 <__fprintf_chk@plt>
   12b24:	cmp	r7, #0
   12b28:	beq	12b58 <__assert_fail@plt+0x15f8>
   12b2c:	mov	r1, #1
   12b30:	mov	r2, #2
   12b34:	ldr	r3, [r4]
   12b38:	movw	r0, #22244	; 0x56e4
   12b3c:	movt	r0, #1
   12b40:	bl	1135c <fwrite@plt>
   12b44:	mov	r2, r7
   12b48:	ldr	r0, [r4]
   12b4c:	mov	r1, #1
   12b50:	ldr	r3, [sp, #8]
   12b54:	bl	113f8 <__vfprintf_chk@plt>
   12b58:	mov	r3, r9
   12b5c:	ldr	r0, [r4]
   12b60:	movw	r2, #22248	; 0x56e8
   12b64:	mov	r1, #1
   12b68:	movt	r2, #1
   12b6c:	bl	11494 <__fprintf_chk@plt>
   12b70:	ldr	r2, [sp, #12]
   12b74:	ldr	r3, [r5]
   12b78:	cmp	r2, r3
   12b7c:	bne	12bbc <__assert_fail@plt+0x165c>
   12b80:	add	sp, sp, #20
   12b84:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b88:	add	sp, sp, #4
   12b8c:	bx	lr
   12b90:	mov	r3, r6
   12b94:	movw	r2, #22240	; 0x56e0
   12b98:	ldr	r0, [r4]
   12b9c:	movt	r2, #1
   12ba0:	mov	r1, #1
   12ba4:	bl	11494 <__fprintf_chk@plt>
   12ba8:	b	12b24 <__assert_fail@plt+0x15c4>
   12bac:	mov	r0, sl
   12bb0:	bl	12978 <__assert_fail@plt+0x1418>
   12bb4:	mov	r6, r0
   12bb8:	b	12af4 <__assert_fail@plt+0x1594>
   12bbc:	bl	11314 <__stack_chk_fail@plt>
   12bc0:	ldrb	r3, [r0]
   12bc4:	cmp	r3, #47	; 0x2f
   12bc8:	beq	12c5c <__assert_fail@plt+0x16fc>
   12bcc:	cmp	r3, #0
   12bd0:	beq	12c2c <__assert_fail@plt+0x16cc>
   12bd4:	cmp	r3, #46	; 0x2e
   12bd8:	beq	12c34 <__assert_fail@plt+0x16d4>
   12bdc:	cmp	r3, #0
   12be0:	cmpne	r3, #47	; 0x2f
   12be4:	beq	12c04 <__assert_fail@plt+0x16a4>
   12be8:	add	r2, r0, #1
   12bec:	mov	r0, r2
   12bf0:	add	r2, r2, #1
   12bf4:	ldrb	r3, [r0]
   12bf8:	cmp	r3, #47	; 0x2f
   12bfc:	cmpne	r3, #0
   12c00:	bne	12bec <__assert_fail@plt+0x168c>
   12c04:	cmp	r3, #47	; 0x2f
   12c08:	bne	12bcc <__assert_fail@plt+0x166c>
   12c0c:	add	r2, r0, #1
   12c10:	mov	r0, r2
   12c14:	add	r2, r2, #1
   12c18:	ldrb	r3, [r0]
   12c1c:	cmp	r3, #47	; 0x2f
   12c20:	beq	12c10 <__assert_fail@plt+0x16b0>
   12c24:	cmp	r3, #0
   12c28:	bne	12bd4 <__assert_fail@plt+0x1674>
   12c2c:	mov	r0, #1
   12c30:	bx	lr
   12c34:	ldrb	r3, [r0, #1]
   12c38:	cmp	r3, #46	; 0x2e
   12c3c:	addne	r0, r0, #1
   12c40:	bne	12bdc <__assert_fail@plt+0x167c>
   12c44:	ldrb	r3, [r0, #2]
   12c48:	add	r0, r0, #2
   12c4c:	cmp	r3, #0
   12c50:	beq	12c5c <__assert_fail@plt+0x16fc>
   12c54:	cmp	r3, #47	; 0x2f
   12c58:	bne	12be8 <__assert_fail@plt+0x1688>
   12c5c:	mov	r0, #0
   12c60:	bx	lr
   12c64:	push	{r3, lr}
   12c68:	mov	r2, r0
   12c6c:	movw	r1, #22256	; 0x56f0
   12c70:	movw	r3, #21844	; 0x5554
   12c74:	movt	r1, #1
   12c78:	movt	r3, #1
   12c7c:	mov	r0, #1
   12c80:	bl	11488 <__printf_chk@plt>
   12c84:	mov	r2, #5
   12c88:	movw	r1, #22268	; 0x56fc
   12c8c:	mov	r0, #0
   12c90:	movt	r1, #1
   12c94:	bl	112fc <dcgettext@plt>
   12c98:	mov	r1, r0
   12c9c:	mov	r0, #1
   12ca0:	bl	11488 <__printf_chk@plt>
   12ca4:	mov	r2, #5
   12ca8:	movw	r1, #22320	; 0x5730
   12cac:	mov	r0, #0
   12cb0:	movt	r1, #1
   12cb4:	bl	112fc <dcgettext@plt>
   12cb8:	mov	r1, r0
   12cbc:	mov	r0, #1
   12cc0:	bl	11488 <__printf_chk@plt>
   12cc4:	mov	r0, #0
   12cc8:	bl	11428 <exit@plt>
   12ccc:	and	r3, r0, #61440	; 0xf000
   12cd0:	cmp	r3, #16384	; 0x4000
   12cd4:	moveq	r3, #100	; 0x64
   12cd8:	beq	12d18 <__assert_fail@plt+0x17b8>
   12cdc:	cmp	r3, #40960	; 0xa000
   12ce0:	moveq	r3, #108	; 0x6c
   12ce4:	beq	12d18 <__assert_fail@plt+0x17b8>
   12ce8:	cmp	r3, #24576	; 0x6000
   12cec:	moveq	r3, #98	; 0x62
   12cf0:	beq	12d18 <__assert_fail@plt+0x17b8>
   12cf4:	cmp	r3, #8192	; 0x2000
   12cf8:	moveq	r3, #99	; 0x63
   12cfc:	beq	12d18 <__assert_fail@plt+0x17b8>
   12d00:	cmp	r3, #49152	; 0xc000
   12d04:	moveq	r3, #115	; 0x73
   12d08:	beq	12d18 <__assert_fail@plt+0x17b8>
   12d0c:	cmp	r3, #4096	; 0x1000
   12d10:	movne	r3, #45	; 0x2d
   12d14:	moveq	r3, #112	; 0x70
   12d18:	tst	r0, #256	; 0x100
   12d1c:	strb	r3, [r1]
   12d20:	moveq	r3, #45	; 0x2d
   12d24:	movne	r3, #114	; 0x72
   12d28:	tst	r0, #128	; 0x80
   12d2c:	strb	r3, [r1, #1]
   12d30:	moveq	r3, #45	; 0x2d
   12d34:	movne	r3, #119	; 0x77
   12d38:	tst	r0, #64	; 0x40
   12d3c:	strb	r3, [r1, #2]
   12d40:	moveq	ip, #45	; 0x2d
   12d44:	movne	ip, #120	; 0x78
   12d48:	tst	r0, #32
   12d4c:	strb	ip, [r1, #3]
   12d50:	moveq	r3, #45	; 0x2d
   12d54:	movne	r3, #114	; 0x72
   12d58:	tst	r0, #16
   12d5c:	strb	r3, [r1, #4]
   12d60:	moveq	r3, #45	; 0x2d
   12d64:	movne	r3, #119	; 0x77
   12d68:	tst	r0, #8
   12d6c:	strb	r3, [r1, #5]
   12d70:	moveq	r2, #45	; 0x2d
   12d74:	movne	r2, #120	; 0x78
   12d78:	tst	r0, #4
   12d7c:	strb	r2, [r1, #6]
   12d80:	moveq	r3, #45	; 0x2d
   12d84:	movne	r3, #114	; 0x72
   12d88:	tst	r0, #2
   12d8c:	strb	r3, [r1, #7]
   12d90:	moveq	r3, #45	; 0x2d
   12d94:	movne	r3, #119	; 0x77
   12d98:	tst	r0, #1
   12d9c:	strb	r3, [r1, #8]
   12da0:	moveq	r3, #45	; 0x2d
   12da4:	movne	r3, #120	; 0x78
   12da8:	tst	r0, #2048	; 0x800
   12dac:	strb	r3, [r1, #9]
   12db0:	beq	12dc4 <__assert_fail@plt+0x1864>
   12db4:	cmp	ip, #120	; 0x78
   12db8:	movne	ip, #83	; 0x53
   12dbc:	moveq	ip, #115	; 0x73
   12dc0:	strb	ip, [r1, #3]
   12dc4:	tst	r0, #1024	; 0x400
   12dc8:	beq	12ddc <__assert_fail@plt+0x187c>
   12dcc:	cmp	r2, #120	; 0x78
   12dd0:	movne	r2, #83	; 0x53
   12dd4:	moveq	r2, #115	; 0x73
   12dd8:	strb	r2, [r1, #6]
   12ddc:	tst	r0, #512	; 0x200
   12de0:	bxeq	lr
   12de4:	cmp	r3, #120	; 0x78
   12de8:	movne	r3, #84	; 0x54
   12dec:	moveq	r3, #116	; 0x74
   12df0:	strb	r3, [r1, #9]
   12df4:	bx	lr
   12df8:	push	{r3, r4, r5, r6, r7, lr}
   12dfc:	subs	r4, r0, #0
   12e00:	beq	12e84 <__assert_fail@plt+0x1924>
   12e04:	ldr	r3, [r4]
   12e08:	cmp	r3, #0
   12e0c:	beq	12e74 <__assert_fail@plt+0x1914>
   12e10:	mov	r2, r4
   12e14:	mov	r3, #0
   12e18:	ldr	r1, [r2, #4]!
   12e1c:	add	r3, r3, #1
   12e20:	cmp	r1, #0
   12e24:	bne	12e18 <__assert_fail@plt+0x18b8>
   12e28:	add	r3, r3, #1
   12e2c:	lsl	r0, r3, #2
   12e30:	bl	11368 <xmalloc@plt>
   12e34:	mov	r6, r0
   12e38:	ldr	r0, [r4]
   12e3c:	cmp	r0, #0
   12e40:	beq	12e7c <__assert_fail@plt+0x191c>
   12e44:	rsb	r7, r4, #4
   12e48:	mov	r5, #0
   12e4c:	bl	11380 <xstrdup@plt>
   12e50:	str	r0, [r6, r5]
   12e54:	add	r5, r7, r4
   12e58:	ldr	r0, [r4, #4]!
   12e5c:	cmp	r0, #0
   12e60:	bne	12e4c <__assert_fail@plt+0x18ec>
   12e64:	mov	r3, #0
   12e68:	mov	r0, r6
   12e6c:	str	r3, [r6, r5]
   12e70:	pop	{r3, r4, r5, r6, r7, pc}
   12e74:	mov	r0, #4
   12e78:	b	12e30 <__assert_fail@plt+0x18d0>
   12e7c:	mov	r5, r0
   12e80:	b	12e64 <__assert_fail@plt+0x1904>
   12e84:	mov	r0, r4
   12e88:	pop	{r3, r4, r5, r6, r7, pc}
   12e8c:	push	{r3, r4, r5, lr}
   12e90:	subs	r5, r0, #0
   12e94:	popeq	{r3, r4, r5, pc}
   12e98:	ldr	r0, [r5]
   12e9c:	cmp	r0, #0
   12ea0:	movne	r4, r5
   12ea4:	beq	12eb8 <__assert_fail@plt+0x1958>
   12ea8:	bl	112a8 <free@plt>
   12eac:	ldr	r0, [r4, #4]!
   12eb0:	cmp	r0, #0
   12eb4:	bne	12ea8 <__assert_fail@plt+0x1948>
   12eb8:	mov	r0, r5
   12ebc:	pop	{r3, r4, r5, lr}
   12ec0:	b	112a8 <free@plt>
   12ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec8:	subs	r4, r0, #0
   12ecc:	ldr	r5, [pc, #536]	; 130ec <__assert_fail@plt+0x1b8c>
   12ed0:	sub	sp, sp, #12
   12ed4:	add	r5, pc, r5
   12ed8:	beq	130e4 <__assert_fail@plt+0x1b84>
   12edc:	bl	11440 <strlen@plt>
   12ee0:	mov	r9, #0
   12ee4:	mov	r7, r9
   12ee8:	mov	r8, r9
   12eec:	mov	r6, r9
   12ef0:	mov	fp, r9
   12ef4:	mov	sl, r9
   12ef8:	add	r0, r0, #1
   12efc:	bl	11368 <xmalloc@plt>
   12f00:	ldr	r3, [pc, #488]	; 130f0 <__assert_fail@plt+0x1b90>
   12f04:	str	r0, [sp]
   12f08:	ldr	r5, [r5, r3]
   12f0c:	ldrb	r3, [r4]
   12f10:	lsl	r3, r3, #1
   12f14:	ldrh	r3, [r5, r3]
   12f18:	tst	r3, #64	; 0x40
   12f1c:	beq	12f40 <__assert_fail@plt+0x19e0>
   12f20:	mov	r3, r4
   12f24:	ldrb	r2, [r3, #1]
   12f28:	add	r4, r3, #1
   12f2c:	mov	r3, r4
   12f30:	lsl	r2, r2, #1
   12f34:	ldrh	r2, [r5, r2]
   12f38:	tst	r2, #64	; 0x40
   12f3c:	bne	12f24 <__assert_fail@plt+0x19c4>
   12f40:	cmp	r7, #0
   12f44:	beq	12f5c <__assert_fail@plt+0x19fc>
   12f48:	sub	r3, r7, #1
   12f4c:	cmp	r9, r3
   12f50:	addlt	r3, r8, r9, lsl #2
   12f54:	strlt	r3, [sp, #4]
   12f58:	blt	12f88 <__assert_fail@plt+0x1a28>
   12f5c:	cmp	r8, #0
   12f60:	beq	130d0 <__assert_fail@plt+0x1b70>
   12f64:	lsl	r7, r7, #1
   12f68:	mov	r0, r8
   12f6c:	lsl	r1, r7, #2
   12f70:	bl	1132c <xrealloc@plt>
   12f74:	mov	r8, r0
   12f78:	add	r3, r8, r9, lsl #2
   12f7c:	str	r3, [sp, #4]
   12f80:	mov	r3, #0
   12f84:	str	r3, [r8, r9, lsl #2]
   12f88:	ldrb	r3, [r4]
   12f8c:	cmp	r3, #0
   12f90:	beq	13048 <__assert_fail@plt+0x1ae8>
   12f94:	mov	r2, r4
   12f98:	ldr	lr, [sp]
   12f9c:	b	12fc0 <__assert_fail@plt+0x1a60>
   12fa0:	strb	r3, [lr]
   12fa4:	add	lr, lr, #1
   12fa8:	mov	r6, #0
   12fac:	ldrb	r3, [r2, #1]
   12fb0:	add	r2, r2, #1
   12fb4:	cmp	r3, #0
   12fb8:	mov	r4, r2
   12fbc:	beq	1304c <__assert_fail@plt+0x1aec>
   12fc0:	lsl	r1, r3, #1
   12fc4:	mov	r4, r2
   12fc8:	ldrh	r1, [r5, r1]
   12fcc:	tst	r1, #64	; 0x40
   12fd0:	beq	12fe0 <__assert_fail@plt+0x1a80>
   12fd4:	orr	r0, r6, fp
   12fd8:	orrs	r0, r0, sl
   12fdc:	beq	130c4 <__assert_fail@plt+0x1b64>
   12fe0:	cmp	r6, #0
   12fe4:	bne	12fa0 <__assert_fail@plt+0x1a40>
   12fe8:	cmp	r3, #92	; 0x5c
   12fec:	moveq	r6, #1
   12ff0:	beq	12fac <__assert_fail@plt+0x1a4c>
   12ff4:	cmp	sl, #0
   12ff8:	beq	13014 <__assert_fail@plt+0x1ab4>
   12ffc:	cmp	r3, #39	; 0x27
   13000:	moveq	sl, r6
   13004:	beq	12fac <__assert_fail@plt+0x1a4c>
   13008:	strb	r3, [lr]
   1300c:	add	lr, lr, #1
   13010:	b	12fac <__assert_fail@plt+0x1a4c>
   13014:	cmp	fp, #0
   13018:	beq	1302c <__assert_fail@plt+0x1acc>
   1301c:	cmp	r3, #34	; 0x22
   13020:	moveq	fp, sl
   13024:	bne	13008 <__assert_fail@plt+0x1aa8>
   13028:	b	12fac <__assert_fail@plt+0x1a4c>
   1302c:	cmp	r3, #39	; 0x27
   13030:	moveq	sl, #1
   13034:	beq	12fac <__assert_fail@plt+0x1a4c>
   13038:	cmp	r3, #34	; 0x22
   1303c:	moveq	fp, #1
   13040:	bne	13008 <__assert_fail@plt+0x1aa8>
   13044:	b	12fac <__assert_fail@plt+0x1a4c>
   13048:	ldr	lr, [sp]
   1304c:	mov	r3, #0
   13050:	ldr	r0, [sp]
   13054:	strb	r3, [lr]
   13058:	add	r9, r9, #1
   1305c:	bl	11380 <xstrdup@plt>
   13060:	ldr	r3, [sp, #4]
   13064:	str	r0, [r3]
   13068:	mov	r3, #0
   1306c:	str	r3, [r8, r9, lsl #2]
   13070:	ldrb	r2, [r4]
   13074:	lsl	r3, r2, #1
   13078:	ldrh	r3, [r5, r3]
   1307c:	tst	r3, #64	; 0x40
   13080:	beq	130a4 <__assert_fail@plt+0x1b44>
   13084:	mov	r3, r4
   13088:	ldrb	r2, [r3, #1]
   1308c:	add	r4, r3, #1
   13090:	mov	r3, r4
   13094:	lsl	r1, r2, #1
   13098:	ldrh	r1, [r5, r1]
   1309c:	tst	r1, #64	; 0x40
   130a0:	bne	13088 <__assert_fail@plt+0x1b28>
   130a4:	cmp	r2, #0
   130a8:	bne	12f0c <__assert_fail@plt+0x19ac>
   130ac:	ldr	r0, [sp]
   130b0:	mov	r9, r8
   130b4:	bl	112a8 <free@plt>
   130b8:	mov	r0, r9
   130bc:	add	sp, sp, #12
   130c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c4:	mov	r6, r0
   130c8:	mov	sl, r0
   130cc:	b	1304c <__assert_fail@plt+0x1aec>
   130d0:	mov	r0, #32
   130d4:	mov	r7, #8
   130d8:	bl	11368 <xmalloc@plt>
   130dc:	mov	r8, r0
   130e0:	b	12f78 <__assert_fail@plt+0x1a18>
   130e4:	mov	r9, r4
   130e8:	b	130b8 <__assert_fail@plt+0x1b58>
   130ec:	andeq	r3, r1, r4, lsr #2
   130f0:	andeq	r0, r0, r8, lsl r1
   130f4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   130f8:	subs	r5, r1, #0
   130fc:	ldr	r8, [pc, #180]	; 131b8 <__assert_fail@plt+0x1c58>
   13100:	add	r8, pc, r8
   13104:	beq	13188 <__assert_fail@plt+0x1c28>
   13108:	ldr	r6, [r0]
   1310c:	cmp	r6, #0
   13110:	movne	r9, r0
   13114:	beq	131b0 <__assert_fail@plt+0x1c50>
   13118:	ldrb	r4, [r6]
   1311c:	cmp	r4, #0
   13120:	beq	13190 <__assert_fail@plt+0x1c30>
   13124:	ldr	r3, [pc, #144]	; 131bc <__assert_fail@plt+0x1c5c>
   13128:	ldr	r7, [r8, r3]
   1312c:	b	13158 <__assert_fail@plt+0x1bf8>
   13130:	cmp	r4, #34	; 0x22
   13134:	beq	1317c <__assert_fail@plt+0x1c1c>
   13138:	mov	r0, r4
   1313c:	mov	r1, r5
   13140:	bl	114e8 <fputc@plt>
   13144:	cmn	r0, #1
   13148:	beq	13188 <__assert_fail@plt+0x1c28>
   1314c:	ldrb	r4, [r6, #1]!
   13150:	cmp	r4, #0
   13154:	beq	13190 <__assert_fail@plt+0x1c30>
   13158:	lsl	r3, r4, #1
   1315c:	mov	r1, r5
   13160:	mov	r0, #92	; 0x5c
   13164:	ldrh	r3, [r7, r3]
   13168:	tst	r3, #64	; 0x40
   1316c:	bne	1317c <__assert_fail@plt+0x1c1c>
   13170:	cmp	r4, #39	; 0x27
   13174:	cmpne	r4, r0
   13178:	bne	13130 <__assert_fail@plt+0x1bd0>
   1317c:	bl	114e8 <fputc@plt>
   13180:	cmn	r0, #1
   13184:	bne	13138 <__assert_fail@plt+0x1bd8>
   13188:	mov	r0, #1
   1318c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13190:	mov	r0, #10
   13194:	mov	r1, r5
   13198:	bl	114e8 <fputc@plt>
   1319c:	cmn	r0, #1
   131a0:	beq	13188 <__assert_fail@plt+0x1c28>
   131a4:	ldr	r6, [r9, #4]!
   131a8:	cmp	r6, #0
   131ac:	bne	13118 <__assert_fail@plt+0x1bb8>
   131b0:	mov	r0, #0
   131b4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   131b8:	strdeq	r2, [r1], -r8
   131bc:	andeq	r0, r0, r8, lsl r1
   131c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131c4:	sub	sp, sp, #28
   131c8:	ldr	ip, [pc, #684]	; 1347c <__assert_fail@plt+0x1f1c>
   131cc:	mov	r6, r1
   131d0:	mov	sl, r0
   131d4:	mov	r5, #0
   131d8:	add	ip, pc, ip
   131dc:	str	ip, [sp, #12]
   131e0:	ldr	ip, [pc, #664]	; 13480 <__assert_fail@plt+0x1f20>
   131e4:	mov	r8, #2000	; 0x7d0
   131e8:	ldr	r1, [r0]
   131ec:	add	ip, pc, ip
   131f0:	mov	fp, ip
   131f4:	b	131fc <__assert_fail@plt+0x1c9c>
   131f8:	mov	r5, r4
   131fc:	add	r4, r5, #1
   13200:	cmp	r4, r1
   13204:	bge	133f8 <__assert_fail@plt+0x1e98>
   13208:	ldr	r3, [r6]
   1320c:	lsl	r7, r4, #2
   13210:	ldr	r0, [r3, r4, lsl #2]
   13214:	ldrb	r2, [r0]
   13218:	cmp	r2, #64	; 0x40
   1321c:	bne	131f8 <__assert_fail@plt+0x1c98>
   13220:	subs	r8, r8, #1
   13224:	beq	13450 <__assert_fail@plt+0x1ef0>
   13228:	add	r0, r0, #1
   1322c:	mov	r1, fp
   13230:	bl	1150c <fopen64@plt>
   13234:	subs	r9, r0, #0
   13238:	beq	133f0 <__assert_fail@plt+0x1e90>
   1323c:	mov	r1, #0
   13240:	mov	r2, #2
   13244:	bl	11524 <fseek@plt>
   13248:	cmn	r0, #1
   1324c:	beq	133e8 <__assert_fail@plt+0x1e88>
   13250:	mov	r0, r9
   13254:	bl	112e4 <ftell@plt>
   13258:	cmn	r0, #1
   1325c:	mov	ip, r0
   13260:	beq	133e8 <__assert_fail@plt+0x1e88>
   13264:	mov	r1, #0
   13268:	mov	r0, r9
   1326c:	mov	r2, r1
   13270:	str	ip, [sp, #4]
   13274:	bl	11524 <fseek@plt>
   13278:	ldr	ip, [sp, #4]
   1327c:	cmn	r0, #1
   13280:	beq	133e8 <__assert_fail@plt+0x1e88>
   13284:	add	r0, ip, #1
   13288:	bl	11368 <xmalloc@plt>
   1328c:	ldr	ip, [sp, #4]
   13290:	mov	r3, r9
   13294:	mov	r1, #1
   13298:	mov	r2, ip
   1329c:	str	r0, [sp, #16]
   132a0:	bl	11398 <fread@plt>
   132a4:	ldr	ip, [sp, #4]
   132a8:	cmp	ip, r0
   132ac:	mov	r3, r0
   132b0:	beq	132cc <__assert_fail@plt+0x1d6c>
   132b4:	mov	r0, r9
   132b8:	str	r3, [sp, #8]
   132bc:	bl	112b4 <ferror@plt>
   132c0:	ldr	r3, [sp, #8]
   132c4:	cmp	r0, #0
   132c8:	bne	133e8 <__assert_fail@plt+0x1e88>
   132cc:	ldr	ip, [sp, #16]
   132d0:	mov	r0, #0
   132d4:	strb	r0, [ip, r3]
   132d8:	ldrb	r3, [ip]
   132dc:	cmp	r3, #0
   132e0:	beq	13324 <__assert_fail@plt+0x1dc4>
   132e4:	ldr	r2, [pc, #408]	; 13484 <__assert_fail@plt+0x1f24>
   132e8:	lsl	r3, r3, #1
   132ec:	ldr	ip, [sp, #12]
   132f0:	ldr	r1, [ip, r2]
   132f4:	ldrh	r3, [r1, r3]
   132f8:	tst	r3, #64	; 0x40
   132fc:	beq	13400 <__assert_fail@plt+0x1ea0>
   13300:	ldr	r2, [sp, #16]
   13304:	b	13318 <__assert_fail@plt+0x1db8>
   13308:	lsl	r3, r3, #1
   1330c:	ldrh	r3, [r1, r3]
   13310:	tst	r3, #64	; 0x40
   13314:	beq	13400 <__assert_fail@plt+0x1ea0>
   13318:	ldrb	r3, [r2, #1]!
   1331c:	cmp	r3, #0
   13320:	bne	13308 <__assert_fail@plt+0x1da8>
   13324:	mov	r0, #4
   13328:	mov	ip, #0
   1332c:	str	ip, [sp, #4]
   13330:	bl	11368 <xmalloc@plt>
   13334:	ldr	ip, [sp, #4]
   13338:	mov	r1, #0
   1333c:	str	r0, [sp, #20]
   13340:	str	r1, [r0]
   13344:	ldr	r0, [r6]
   13348:	str	ip, [sp, #8]
   1334c:	bl	12df8 <__assert_fail@plt+0x1898>
   13350:	ldr	r3, [sp, #8]
   13354:	ldr	ip, [sp, #4]
   13358:	str	r0, [r6]
   1335c:	ldr	r1, [sl]
   13360:	str	ip, [sp, #4]
   13364:	add	r1, r1, #1
   13368:	str	r3, [sp, #8]
   1336c:	add	r1, r1, r3
   13370:	lsl	r1, r1, #2
   13374:	bl	1132c <xrealloc@plt>
   13378:	ldr	r3, [sp, #8]
   1337c:	ldr	r2, [sl]
   13380:	add	lr, r7, #4
   13384:	rsb	r2, r4, r2
   13388:	lsl	r2, r2, #2
   1338c:	mov	r1, r0
   13390:	add	r0, r3, r4
   13394:	str	r1, [r6]
   13398:	mov	r4, r5
   1339c:	add	r0, r1, r0, lsl #2
   133a0:	add	r1, r1, lr
   133a4:	str	r3, [sp, #8]
   133a8:	bl	11290 <memmove@plt>
   133ac:	ldr	ip, [sp, #4]
   133b0:	ldr	r0, [r6]
   133b4:	ldr	r1, [sp, #20]
   133b8:	mov	r2, ip
   133bc:	add	r0, r0, r7
   133c0:	bl	112cc <memcpy@plt>
   133c4:	ldr	r2, [sl]
   133c8:	ldr	r3, [sp, #8]
   133cc:	sub	r2, r2, #1
   133d0:	ldr	r0, [sp, #20]
   133d4:	add	r3, r2, r3
   133d8:	str	r3, [sl]
   133dc:	bl	112a8 <free@plt>
   133e0:	ldr	r0, [sp, #16]
   133e4:	bl	112a8 <free@plt>
   133e8:	mov	r0, r9
   133ec:	bl	114ac <fclose@plt>
   133f0:	ldr	r1, [sl]
   133f4:	b	131f8 <__assert_fail@plt+0x1c98>
   133f8:	add	sp, sp, #28
   133fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13400:	ldr	r0, [sp, #16]
   13404:	bl	12ec4 <__assert_fail@plt+0x1964>
   13408:	ldr	ip, [r0]
   1340c:	str	r0, [sp, #20]
   13410:	ldr	r0, [r6]
   13414:	str	ip, [sp, #4]
   13418:	bl	12df8 <__assert_fail@plt+0x1898>
   1341c:	ldr	ip, [sp, #4]
   13420:	cmp	ip, #0
   13424:	moveq	r3, ip
   13428:	str	r0, [r6]
   1342c:	beq	1335c <__assert_fail@plt+0x1dfc>
   13430:	ldr	r2, [sp, #20]
   13434:	mov	r3, #0
   13438:	ldr	r1, [r2, #4]!
   1343c:	add	r3, r3, #1
   13440:	cmp	r1, #0
   13444:	lsl	ip, r3, #2
   13448:	bne	13438 <__assert_fail@plt+0x1ed8>
   1344c:	b	1335c <__assert_fail@plt+0x1dfc>
   13450:	ldr	ip, [sp, #12]
   13454:	mov	r1, #1
   13458:	ldr	r0, [pc, #40]	; 13488 <__assert_fail@plt+0x1f28>
   1345c:	ldr	r2, [pc, #40]	; 1348c <__assert_fail@plt+0x1f2c>
   13460:	ldr	r3, [r3]
   13464:	ldr	r0, [ip, r0]
   13468:	add	r2, pc, r2
   1346c:	ldr	r0, [r0]
   13470:	bl	11494 <__fprintf_chk@plt>
   13474:	mov	r0, #1
   13478:	bl	114f4 <xexit@plt>
   1347c:	andeq	r2, r1, r0, lsr #28
   13480:	andeq	r2, r0, ip, lsr #12
   13484:	andeq	r0, r0, r8, lsl r1
   13488:	andeq	r0, r0, ip, lsl r1
   1348c:	andeq	r2, r0, r4, lsl #7
   13490:	subs	r3, r0, #0
   13494:	beq	134bc <__assert_fail@plt+0x1f5c>
   13498:	ldr	r0, [r3]
   1349c:	cmp	r0, #0
   134a0:	bxeq	lr
   134a4:	mov	r0, #0
   134a8:	ldr	r2, [r3, #4]!
   134ac:	add	r0, r0, #1
   134b0:	cmp	r2, #0
   134b4:	bne	134a8 <__assert_fail@plt+0x1f48>
   134b8:	bx	lr
   134bc:	mov	r0, r3
   134c0:	bx	lr
   134c4:	ldr	r3, [pc, #488]	; 136b4 <__assert_fail@plt+0x2154>
   134c8:	push	{r4, r5, r6, lr}
   134cc:	ldr	r0, [pc, r3]
   134d0:	cmp	r0, #0
   134d4:	popne	{r4, r5, r6, pc}
   134d8:	ldr	r0, [pc, #472]	; 136b8 <__assert_fail@plt+0x2158>
   134dc:	add	r0, pc, r0
   134e0:	bl	113b0 <getenv@plt>
   134e4:	subs	r4, r0, #0
   134e8:	beq	13560 <__assert_fail@plt+0x2000>
   134ec:	mov	r1, #7
   134f0:	bl	114a0 <access@plt>
   134f4:	cmp	r0, #0
   134f8:	bne	1359c <__assert_fail@plt+0x203c>
   134fc:	ldr	r0, [pc, #440]	; 136bc <__assert_fail@plt+0x215c>
   13500:	add	r0, pc, r0
   13504:	bl	113b0 <getenv@plt>
   13508:	ldr	r0, [pc, #432]	; 136c0 <__assert_fail@plt+0x2160>
   1350c:	add	r0, pc, r0
   13510:	bl	113b0 <getenv@plt>
   13514:	mov	r0, r4
   13518:	bl	11440 <strlen@plt>
   1351c:	mov	r3, r0
   13520:	mov	r5, r0
   13524:	add	r6, r3, #1
   13528:	add	r0, r0, #2
   1352c:	bl	11368 <xmalloc@plt>
   13530:	mov	r1, r4
   13534:	bl	1138c <strcpy@plt>
   13538:	ldr	r2, [pc, #388]	; 136c4 <__assert_fail@plt+0x2164>
   1353c:	mov	r1, #0
   13540:	add	r2, pc, r2
   13544:	mov	r3, r0
   13548:	mov	r0, #47	; 0x2f
   1354c:	str	r3, [r2]
   13550:	strb	r0, [r3, r5]
   13554:	mov	r0, r3
   13558:	strb	r1, [r3, r6]
   1355c:	pop	{r4, r5, r6, pc}
   13560:	ldr	r0, [pc, #352]	; 136c8 <__assert_fail@plt+0x2168>
   13564:	add	r0, pc, r0
   13568:	bl	113b0 <getenv@plt>
   1356c:	mov	r4, r0
   13570:	cmp	r4, #0
   13574:	beq	135b0 <__assert_fail@plt+0x2050>
   13578:	mov	r0, r4
   1357c:	mov	r1, #7
   13580:	bl	114a0 <access@plt>
   13584:	cmp	r0, #0
   13588:	bne	13640 <__assert_fail@plt+0x20e0>
   1358c:	ldr	r0, [pc, #312]	; 136cc <__assert_fail@plt+0x216c>
   13590:	add	r0, pc, r0
   13594:	bl	113b0 <getenv@plt>
   13598:	b	13514 <__assert_fail@plt+0x1fb4>
   1359c:	ldr	r0, [pc, #300]	; 136d0 <__assert_fail@plt+0x2170>
   135a0:	add	r0, pc, r0
   135a4:	bl	113b0 <getenv@plt>
   135a8:	mov	r4, r0
   135ac:	b	13570 <__assert_fail@plt+0x2010>
   135b0:	ldr	r0, [pc, #284]	; 136d4 <__assert_fail@plt+0x2174>
   135b4:	add	r0, pc, r0
   135b8:	bl	113b0 <getenv@plt>
   135bc:	mov	r4, r0
   135c0:	cmp	r4, #0
   135c4:	beq	135dc <__assert_fail@plt+0x207c>
   135c8:	mov	r0, r4
   135cc:	mov	r1, #7
   135d0:	bl	114a0 <access@plt>
   135d4:	cmp	r0, #0
   135d8:	beq	13514 <__assert_fail@plt+0x1fb4>
   135dc:	ldr	r4, [pc, #244]	; 136d8 <__assert_fail@plt+0x2178>
   135e0:	mov	r1, #7
   135e4:	add	r4, pc, r4
   135e8:	mov	r0, r4
   135ec:	bl	114a0 <access@plt>
   135f0:	cmp	r0, #0
   135f4:	moveq	r6, #5
   135f8:	moveq	r0, #6
   135fc:	moveq	r5, #4
   13600:	beq	1352c <__assert_fail@plt+0x1fcc>
   13604:	ldr	r5, [pc, #208]	; 136dc <__assert_fail@plt+0x217c>
   13608:	mov	r1, #7
   1360c:	add	r5, pc, r5
   13610:	add	r4, r5, #8
   13614:	mov	r0, r4
   13618:	bl	114a0 <access@plt>
   1361c:	cmp	r0, #0
   13620:	bne	13654 <__assert_fail@plt+0x20f4>
   13624:	mov	r0, r4
   13628:	bl	11440 <strlen@plt>
   1362c:	mov	r6, r0
   13630:	mov	r5, r0
   13634:	add	r6, r6, #1
   13638:	add	r0, r0, #2
   1363c:	b	1352c <__assert_fail@plt+0x1fcc>
   13640:	ldr	r0, [pc, #152]	; 136e0 <__assert_fail@plt+0x2180>
   13644:	add	r0, pc, r0
   13648:	bl	113b0 <getenv@plt>
   1364c:	mov	r4, r0
   13650:	b	135c0 <__assert_fail@plt+0x2060>
   13654:	add	r4, r5, #20
   13658:	mov	r1, #7
   1365c:	mov	r0, r4
   13660:	bl	114a0 <access@plt>
   13664:	cmp	r0, #0
   13668:	beq	13624 <__assert_fail@plt+0x20c4>
   1366c:	mov	r0, r5
   13670:	mov	r1, #7
   13674:	bl	114a0 <access@plt>
   13678:	cmp	r0, #0
   1367c:	bne	1369c <__assert_fail@plt+0x213c>
   13680:	mov	r0, r5
   13684:	mov	r4, r5
   13688:	bl	11440 <strlen@plt>
   1368c:	mov	r5, r0
   13690:	add	r0, r0, #2
   13694:	add	r6, r5, #1
   13698:	b	1352c <__assert_fail@plt+0x1fcc>
   1369c:	ldr	r4, [pc, #64]	; 136e4 <__assert_fail@plt+0x2184>
   136a0:	mov	r6, #2
   136a4:	mov	r0, #3
   136a8:	mov	r5, #1
   136ac:	add	r4, pc, r4
   136b0:	b	1352c <__assert_fail@plt+0x1fcc>
   136b4:	andeq	sl, r1, r0, asr #30
   136b8:	andeq	r2, r0, ip, ror #6
   136bc:	andeq	r2, r0, r0, asr r3
   136c0:	andeq	r2, r0, r8, asr #6
   136c4:	andeq	sl, r1, ip, asr #29
   136c8:	andeq	r2, r0, ip, ror #5
   136cc:	andeq	r2, r0, r4, asr #5
   136d0:			; <UNDEFINED> instruction: 0x000022b0
   136d4:	andeq	r2, r0, r0, lsr #5
   136d8:	andeq	r2, r0, ip, asr r2
   136dc:	andeq	r2, r0, r0, lsl r2
   136e0:	andeq	r2, r0, r0, lsl r2
   136e4:	muleq	r0, r0, r1
   136e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   136ec:	sub	sp, sp, #12
   136f0:	mov	r6, r0
   136f4:	bl	134c4 <__assert_fail@plt+0x1f64>
   136f8:	ldr	r9, [pc, #236]	; 137ec <__assert_fail@plt+0x228c>
   136fc:	cmp	r6, #0
   13700:	add	r9, pc, r9
   13704:	mov	r7, r0
   13708:	beq	1379c <__assert_fail@plt+0x223c>
   1370c:	mov	r0, r6
   13710:	bl	11440 <strlen@plt>
   13714:	mov	r8, r0
   13718:	mov	r4, r0
   1371c:	mov	r0, r7
   13720:	bl	11440 <strlen@plt>
   13724:	mov	r5, r0
   13728:	add	r0, r0, r4
   1372c:	add	r0, r0, #9
   13730:	bl	11368 <xmalloc@plt>
   13734:	mov	r1, r7
   13738:	mov	r4, r0
   1373c:	bl	1138c <strcpy@plt>
   13740:	ldr	r2, [pc, #168]	; 137f0 <__assert_fail@plt+0x2290>
   13744:	add	r3, r4, r5
   13748:	add	ip, r5, #8
   1374c:	add	r2, pc, r2
   13750:	ldm	r2!, {r0, r1}
   13754:	ldrb	r2, [r2]
   13758:	str	r0, [r4, r5]
   1375c:	add	r0, r4, ip
   13760:	str	r1, [r3, #4]
   13764:	mov	r1, r6
   13768:	strb	r2, [r3, #8]
   1376c:	bl	1138c <strcpy@plt>
   13770:	mov	r0, r4
   13774:	mov	r1, r8
   13778:	bl	113a4 <mkstemps64@plt>
   1377c:	cmn	r0, #1
   13780:	beq	137b0 <__assert_fail@plt+0x2250>
   13784:	bl	11554 <close@plt>
   13788:	cmp	r0, #0
   1378c:	bne	137e8 <__assert_fail@plt+0x2288>
   13790:	mov	r0, r4
   13794:	add	sp, sp, #12
   13798:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1379c:	mov	r8, r6
   137a0:	ldr	r6, [pc, #76]	; 137f4 <__assert_fail@plt+0x2294>
   137a4:	mov	r4, r8
   137a8:	add	r6, pc, r6
   137ac:	b	1371c <__assert_fail@plt+0x21bc>
   137b0:	ldr	r3, [pc, #64]	; 137f8 <__assert_fail@plt+0x2298>
   137b4:	ldr	r3, [r9, r3]
   137b8:	ldr	r4, [r3]
   137bc:	bl	11470 <__errno_location@plt>
   137c0:	ldr	r0, [r0]
   137c4:	bl	113ec <strerror@plt>
   137c8:	ldr	r2, [pc, #44]	; 137fc <__assert_fail@plt+0x229c>
   137cc:	mov	r3, r7
   137d0:	mov	r1, #1
   137d4:	add	r2, pc, r2
   137d8:	str	r0, [sp]
   137dc:	mov	r0, r4
   137e0:	bl	11494 <__fprintf_chk@plt>
   137e4:	bl	11548 <abort@plt>
   137e8:	bl	11548 <abort@plt>
   137ec:	strdeq	r2, [r1], -r8
   137f0:	andeq	r2, r0, r0, lsl r1
   137f4:	andeq	r1, r0, r0, lsr #22
   137f8:	andeq	r0, r0, ip, lsl r1
   137fc:	muleq	r0, r4, r0
   13800:	ldr	r3, [r0]
   13804:	tst	r3, #1073741824	; 0x40000000
   13808:	orrne	r3, r3, #-2147483648	; 0x80000000
   1380c:	biceq	r3, r3, #-2147483648	; 0x80000000
   13810:	add	r0, r0, r3
   13814:	bx	lr
   13818:	cmp	r1, #0
   1381c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13820:	mov	r6, r0
   13824:	sub	sp, sp, #12
   13828:	mov	r9, r2
   1382c:	beq	138b0 <__assert_fail@plt+0x2350>
   13830:	sub	r1, r1, #1
   13834:	mov	r7, #0
   13838:	str	r1, [sp, #4]
   1383c:	mov	r8, r1
   13840:	add	r4, r7, r8
   13844:	add	r4, r4, r4, lsr #31
   13848:	asr	r4, r4, #1
   1384c:	lsl	r5, r4, #3
   13850:	add	fp, r6, r5
   13854:	mov	r0, fp
   13858:	bl	13800 <__assert_fail@plt+0x22a0>
   1385c:	ldr	r3, [sp, #4]
   13860:	cmp	r3, r4
   13864:	mov	sl, r0
   13868:	add	r0, r5, #8
   1386c:	add	r0, r6, r0
   13870:	beq	138c0 <__assert_fail@plt+0x2360>
   13874:	bl	13800 <__assert_fail@plt+0x22a0>
   13878:	cmp	sl, r9
   1387c:	sub	r0, r0, #1
   13880:	bls	138a0 <__assert_fail@plt+0x2340>
   13884:	cmp	r4, r7
   13888:	sub	r8, r4, #1
   1388c:	bne	13840 <__assert_fail@plt+0x22e0>
   13890:	mov	fp, #0
   13894:	mov	r0, fp
   13898:	add	sp, sp, #12
   1389c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a0:	cmp	r0, r9
   138a4:	add	r7, r4, #1
   138a8:	bcc	13840 <__assert_fail@plt+0x22e0>
   138ac:	b	13894 <__assert_fail@plt+0x2334>
   138b0:	mov	fp, r1
   138b4:	mov	r0, fp
   138b8:	add	sp, sp, #12
   138bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138c0:	cmp	sl, r9
   138c4:	bhi	13884 <__assert_fail@plt+0x2324>
   138c8:	b	13894 <__assert_fail@plt+0x2334>
   138cc:	cmp	r0, #1
   138d0:	beq	13904 <__assert_fail@plt+0x23a4>
   138d4:	cmp	r0, #2
   138d8:	beq	138f8 <__assert_fail@plt+0x2398>
   138dc:	cmp	r0, #0
   138e0:	beq	138ec <__assert_fail@plt+0x238c>
   138e4:	mov	r0, #0
   138e8:	bx	lr
   138ec:	ldr	r0, [pc, #28]	; 13910 <__assert_fail@plt+0x23b0>
   138f0:	add	r0, pc, r0
   138f4:	bx	lr
   138f8:	ldr	r0, [pc, #20]	; 13914 <__assert_fail@plt+0x23b4>
   138fc:	add	r0, pc, r0
   13900:	bx	lr
   13904:	ldr	r0, [pc, #12]	; 13918 <__assert_fail@plt+0x23b8>
   13908:	add	r0, pc, r0
   1390c:	bx	lr
   13910:	andeq	r0, r0, r0, lsl #23
   13914:	andeq	r0, r0, r4, lsl #23
   13918:	andeq	r0, r0, r0, ror fp
   1391c:	ldr	r3, [pc, #276]	; 13a38 <__assert_fail@plt+0x24d8>
   13920:	ldr	r2, [pc, #276]	; 13a3c <__assert_fail@plt+0x24dc>
   13924:	add	r3, pc, r3
   13928:	push	{r4, r5, lr}
   1392c:	mov	r4, r0
   13930:	ldr	r2, [r3, r2]
   13934:	sub	sp, sp, #12
   13938:	sub	r5, r1, #2
   1393c:	cmp	r2, #0
   13940:	beq	13a18 <__assert_fail@plt+0x24b8>
   13944:	mov	r0, r5
   13948:	add	r1, sp, #4
   1394c:	bl	113c8 <__gnu_Unwind_Find_exidx@plt>
   13950:	cmp	r0, #0
   13954:	beq	139e4 <__assert_fail@plt+0x2484>
   13958:	mov	r2, r5
   1395c:	ldr	r1, [sp, #4]
   13960:	bl	13818 <__assert_fail@plt+0x22b8>
   13964:	subs	r5, r0, #0
   13968:	beq	139e4 <__assert_fail@plt+0x2484>
   1396c:	bl	13800 <__assert_fail@plt+0x22a0>
   13970:	ldr	r3, [r5, #4]
   13974:	cmp	r3, #1
   13978:	str	r0, [r4, #72]	; 0x48
   1397c:	beq	139cc <__assert_fail@plt+0x246c>
   13980:	cmp	r3, #0
   13984:	add	r0, r5, #4
   13988:	strlt	r0, [r4, #76]	; 0x4c
   1398c:	movlt	r3, #1
   13990:	strlt	r3, [r4, #80]	; 0x50
   13994:	blt	139a8 <__assert_fail@plt+0x2448>
   13998:	bl	13800 <__assert_fail@plt+0x22a0>
   1399c:	mov	r3, #0
   139a0:	str	r3, [r4, #80]	; 0x50
   139a4:	str	r0, [r4, #76]	; 0x4c
   139a8:	ldr	r3, [r0]
   139ac:	cmp	r3, #0
   139b0:	blt	139fc <__assert_fail@plt+0x249c>
   139b4:	bl	13800 <__assert_fail@plt+0x22a0>
   139b8:	mov	r3, #0
   139bc:	str	r0, [r4, #16]
   139c0:	mov	r0, r3
   139c4:	add	sp, sp, #12
   139c8:	pop	{r4, r5, pc}
   139cc:	mov	r3, #5
   139d0:	mov	r2, #0
   139d4:	mov	r0, r3
   139d8:	str	r2, [r4, #16]
   139dc:	add	sp, sp, #12
   139e0:	pop	{r4, r5, pc}
   139e4:	mov	r3, #9
   139e8:	mov	r2, #0
   139ec:	mov	r0, r3
   139f0:	str	r2, [r4, #16]
   139f4:	add	sp, sp, #12
   139f8:	pop	{r4, r5, pc}
   139fc:	ubfx	r0, r3, #24, #4
   13a00:	bl	138cc <__assert_fail@plt+0x236c>
   13a04:	cmp	r0, #0
   13a08:	str	r0, [r4, #16]
   13a0c:	moveq	r3, #9
   13a10:	movne	r3, #0
   13a14:	b	139c0 <__assert_fail@plt+0x2460>
   13a18:	ldr	r2, [pc, #32]	; 13a40 <__assert_fail@plt+0x24e0>
   13a1c:	ldr	r1, [pc, #32]	; 13a44 <__assert_fail@plt+0x24e4>
   13a20:	ldr	r2, [r3, r2]
   13a24:	ldr	r0, [r3, r1]
   13a28:	rsb	r3, r0, r2
   13a2c:	asr	r3, r3, #3
   13a30:	str	r3, [sp, #4]
   13a34:	b	13958 <__assert_fail@plt+0x23f8>
   13a38:	ldrdeq	r2, [r1], -r4
   13a3c:	andeq	r0, r0, r0, lsr #2
   13a40:	andeq	r0, r0, r4, lsr #2
   13a44:	andeq	r0, r0, ip, lsr #2
   13a48:	ldr	r3, [r0]
   13a4c:	push	{r4, lr}
   13a50:	tst	r3, #1
   13a54:	mov	r4, r0
   13a58:	bne	13a70 <__assert_fail@plt+0x2510>
   13a5c:	tst	r3, #2
   13a60:	add	r0, r0, #72	; 0x48
   13a64:	beq	13a94 <__assert_fail@plt+0x2534>
   13a68:	bl	14840 <__assert_fail@plt+0x32e0>
   13a6c:	ldr	r3, [r4]
   13a70:	tst	r3, #4
   13a74:	beq	13aa4 <__assert_fail@plt+0x2544>
   13a78:	tst	r3, #8
   13a7c:	beq	13ab8 <__assert_fail@plt+0x2558>
   13a80:	tst	r3, #16
   13a84:	popne	{r4, pc}
   13a88:	add	r0, r4, #464	; 0x1d0
   13a8c:	pop	{r4, lr}
   13a90:	b	148e8 <__assert_fail@plt+0x3388>
   13a94:	bl	14830 <__assert_fail@plt+0x32d0>
   13a98:	ldr	r3, [r4]
   13a9c:	tst	r3, #4
   13aa0:	bne	13a78 <__assert_fail@plt+0x2518>
   13aa4:	add	r0, r4, #208	; 0xd0
   13aa8:	bl	14850 <__assert_fail@plt+0x32f0>
   13aac:	ldr	r3, [r4]
   13ab0:	tst	r3, #8
   13ab4:	bne	13a80 <__assert_fail@plt+0x2520>
   13ab8:	add	r0, r4, #336	; 0x150
   13abc:	bl	14860 <__assert_fail@plt+0x3300>
   13ac0:	ldr	r3, [r4]
   13ac4:	tst	r3, #16
   13ac8:	popne	{r4, pc}
   13acc:	b	13a88 <__assert_fail@plt+0x2528>
   13ad0:	ldr	r3, [r0]
   13ad4:	cmp	r3, #0
   13ad8:	ldrne	r0, [r3, r0]
   13adc:	moveq	r0, r3
   13ae0:	bx	lr
   13ae4:	mov	r0, #9
   13ae8:	bx	lr
   13aec:	nop	{0}
   13af0:	bx	lr
   13af4:	push	{r4, r5, r6, lr}
   13af8:	mov	r4, r0
   13afc:	mov	r5, r1
   13b00:	b	13b28 <__assert_fail@plt+0x25c8>
   13b04:	ldr	ip, [r5, #64]	; 0x40
   13b08:	mov	r0, #1
   13b0c:	ldr	r3, [r4, #16]
   13b10:	mov	r1, r4
   13b14:	mov	r2, r5
   13b18:	str	ip, [r4, #20]
   13b1c:	blx	r3
   13b20:	cmp	r0, #8
   13b24:	bne	13b40 <__assert_fail@plt+0x25e0>
   13b28:	mov	r0, r4
   13b2c:	ldr	r1, [r5, #64]	; 0x40
   13b30:	bl	1391c <__assert_fail@plt+0x23bc>
   13b34:	subs	r6, r0, #0
   13b38:	beq	13b04 <__assert_fail@plt+0x25a4>
   13b3c:	bl	11548 <abort@plt>
   13b40:	cmp	r0, #7
   13b44:	bne	13b3c <__assert_fail@plt+0x25dc>
   13b48:	mov	r0, r6
   13b4c:	ldr	r1, [r5, #64]	; 0x40
   13b50:	bl	13aec <__assert_fail@plt+0x258c>
   13b54:	add	r0, r5, #4
   13b58:	bl	1481c <__assert_fail@plt+0x32bc>
   13b5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b60:	add	r5, r1, #4
   13b64:	sub	sp, sp, #980	; 0x3d4
   13b68:	mov	r4, r0
   13b6c:	mov	ip, r2
   13b70:	add	r3, sp, #20
   13b74:	str	r3, [sp, #12]
   13b78:	add	lr, sp, #20
   13b7c:	ldm	r5!, {r0, r1, r2, r3}
   13b80:	cmp	ip, #0
   13b84:	ldr	r9, [r4, #12]
   13b88:	mov	r8, #0
   13b8c:	ldr	sl, [r4, #24]
   13b90:	movne	fp, #10
   13b94:	moveq	fp, #9
   13b98:	add	r6, sp, #16
   13b9c:	stmia	lr!, {r0, r1, r2, r3}
   13ba0:	add	r7, sp, #496	; 0x1f0
   13ba4:	ldm	r5!, {r0, r1, r2, r3}
   13ba8:	stmia	lr!, {r0, r1, r2, r3}
   13bac:	ldm	r5!, {r0, r1, r2, r3}
   13bb0:	stmia	lr!, {r0, r1, r2, r3}
   13bb4:	ldm	r5, {r0, r1, r2, r3}
   13bb8:	stm	lr, {r0, r1, r2, r3}
   13bbc:	mov	r0, r4
   13bc0:	ldr	r1, [sp, #80]	; 0x50
   13bc4:	str	r8, [sp, #16]
   13bc8:	bl	1391c <__assert_fail@plt+0x23bc>
   13bcc:	mov	r5, r0
   13bd0:	cmp	r5, #0
   13bd4:	beq	13c10 <__assert_fail@plt+0x26b0>
   13bd8:	ldr	r0, [sp, #72]	; 0x48
   13bdc:	mov	r2, r4
   13be0:	str	r6, [sp]
   13be4:	orr	r1, fp, #16
   13be8:	str	sl, [sp, #4]
   13bec:	mov	r3, r4
   13bf0:	str	r0, [sp, #84]	; 0x54
   13bf4:	mov	r0, #1
   13bf8:	blx	r9
   13bfc:	cmp	r0, #0
   13c00:	bne	13ca4 <__assert_fail@plt+0x2744>
   13c04:	mov	r0, r5
   13c08:	add	sp, sp, #980	; 0x3d4
   13c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c10:	ldr	r3, [sp, #80]	; 0x50
   13c14:	mov	r1, r6
   13c18:	mov	r2, #480	; 0x1e0
   13c1c:	mov	r0, r7
   13c20:	str	r3, [r4, #20]
   13c24:	bl	112cc <memcpy@plt>
   13c28:	ldr	r3, [r4, #16]
   13c2c:	mov	r1, r4
   13c30:	mov	r2, r7
   13c34:	mov	r0, fp
   13c38:	blx	r3
   13c3c:	ldr	r3, [sp, #552]	; 0x228
   13c40:	mov	r1, fp
   13c44:	str	r6, [sp]
   13c48:	str	sl, [sp, #4]
   13c4c:	mov	r2, r4
   13c50:	str	r3, [sp, #84]	; 0x54
   13c54:	mov	r3, r4
   13c58:	mov	r8, r0
   13c5c:	mov	r0, #1
   13c60:	blx	r9
   13c64:	cmp	r0, #0
   13c68:	bne	13ca4 <__assert_fail@plt+0x2744>
   13c6c:	mov	r0, r6
   13c70:	mov	r1, r7
   13c74:	mov	r2, #480	; 0x1e0
   13c78:	bl	112cc <memcpy@plt>
   13c7c:	cmp	r8, #8
   13c80:	bne	13c9c <__assert_fail@plt+0x273c>
   13c84:	mov	r0, r4
   13c88:	ldr	r1, [sp, #80]	; 0x50
   13c8c:	bl	1391c <__assert_fail@plt+0x23bc>
   13c90:	mov	fp, #9
   13c94:	mov	r5, r0
   13c98:	b	13bd0 <__assert_fail@plt+0x2670>
   13c9c:	cmp	r8, #7
   13ca0:	beq	13cb0 <__assert_fail@plt+0x2750>
   13ca4:	mov	r0, #9
   13ca8:	add	sp, sp, #980	; 0x3d4
   13cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb0:	mov	r0, r5
   13cb4:	ldr	r1, [sp, #80]	; 0x50
   13cb8:	bl	13aec <__assert_fail@plt+0x258c>
   13cbc:	add	r0, sp, #20
   13cc0:	bl	1481c <__assert_fail@plt+0x32bc>
   13cc4:	ldr	r0, [r0, #68]	; 0x44
   13cc8:	bx	lr
   13ccc:	ldr	r3, [r1, #60]	; 0x3c
   13cd0:	push	{r4, r5, r6, r7, lr}
   13cd4:	add	lr, r1, #4
   13cd8:	str	r3, [r1, #64]	; 0x40
   13cdc:	mov	r7, r1
   13ce0:	mov	r4, r0
   13ce4:	sub	sp, sp, #484	; 0x1e4
   13ce8:	ldm	lr!, {r0, r1, r2, r3}
   13cec:	add	ip, sp, #4
   13cf0:	add	r6, sp, #480	; 0x1e0
   13cf4:	mvn	r5, #0
   13cf8:	stmia	ip!, {r0, r1, r2, r3}
   13cfc:	ldm	lr!, {r0, r1, r2, r3}
   13d00:	stmia	ip!, {r0, r1, r2, r3}
   13d04:	ldm	lr!, {r0, r1, r2, r3}
   13d08:	stmia	ip!, {r0, r1, r2, r3}
   13d0c:	ldm	lr, {r0, r1, r2, r3}
   13d10:	stm	ip, {r0, r1, r2, r3}
   13d14:	str	r5, [r6, #-480]!	; 0xfffffe20
   13d18:	b	13d38 <__assert_fail@plt+0x27d8>
   13d1c:	ldr	r3, [r4, #16]
   13d20:	mov	r1, r4
   13d24:	mov	r2, sp
   13d28:	blx	r3
   13d2c:	cmp	r0, #8
   13d30:	mov	r5, r0
   13d34:	bne	13d58 <__assert_fail@plt+0x27f8>
   13d38:	mov	r0, r4
   13d3c:	ldr	r1, [sp, #64]	; 0x40
   13d40:	bl	1391c <__assert_fail@plt+0x23bc>
   13d44:	cmp	r0, #0
   13d48:	beq	13d1c <__assert_fail@plt+0x27bc>
   13d4c:	mov	r0, #9
   13d50:	add	sp, sp, #484	; 0x1e4
   13d54:	pop	{r4, r5, r6, r7, pc}
   13d58:	mov	r0, sp
   13d5c:	bl	13a48 <__assert_fail@plt+0x24e8>
   13d60:	cmp	r5, #6
   13d64:	bne	13d4c <__assert_fail@plt+0x27ec>
   13d68:	mov	r0, r4
   13d6c:	mov	r1, r7
   13d70:	bl	13af4 <__assert_fail@plt+0x2594>
   13d74:	push	{r4}		; (str r4, [sp, #-4]!)
   13d78:	ldr	r4, [r3, #60]	; 0x3c
   13d7c:	str	r1, [r0, #12]
   13d80:	mov	r1, r3
   13d84:	str	r2, [r0, #24]
   13d88:	mov	r2, #0
   13d8c:	str	r4, [r3, #64]	; 0x40
   13d90:	pop	{r4}		; (ldr r4, [sp], #4)
   13d94:	b	13b5c <__assert_fail@plt+0x25fc>
   13d98:	push	{r4, r5, r6, lr}
   13d9c:	mov	r4, r0
   13da0:	ldr	r6, [r0, #12]
   13da4:	mov	r5, r1
   13da8:	ldr	r3, [r0, #20]
   13dac:	cmp	r6, #0
   13db0:	str	r3, [r1, #64]	; 0x40
   13db4:	beq	13dc4 <__assert_fail@plt+0x2864>
   13db8:	mov	r2, #1
   13dbc:	bl	13b5c <__assert_fail@plt+0x25fc>
   13dc0:	bl	11548 <abort@plt>
   13dc4:	ldr	r3, [r0, #16]
   13dc8:	mov	r1, r4
   13dcc:	mov	r0, #2
   13dd0:	mov	r2, r5
   13dd4:	blx	r3
   13dd8:	cmp	r0, #7
   13ddc:	beq	13df8 <__assert_fail@plt+0x2898>
   13de0:	cmp	r0, #8
   13de4:	bne	13df4 <__assert_fail@plt+0x2894>
   13de8:	mov	r0, r4
   13dec:	mov	r1, r5
   13df0:	bl	13af4 <__assert_fail@plt+0x2594>
   13df4:	bl	11548 <abort@plt>
   13df8:	mov	r0, r6
   13dfc:	ldr	r1, [r5, #64]	; 0x40
   13e00:	bl	13aec <__assert_fail@plt+0x258c>
   13e04:	add	r0, r5, #4
   13e08:	bl	1481c <__assert_fail@plt+0x32bc>
   13e0c:	ldr	r2, [r0, #12]
   13e10:	cmp	r2, #0
   13e14:	beq	13e28 <__assert_fail@plt+0x28c8>
   13e18:	ldr	ip, [r1, #60]	; 0x3c
   13e1c:	mov	r2, #0
   13e20:	str	ip, [r1, #64]	; 0x40
   13e24:	b	13b5c <__assert_fail@plt+0x25fc>
   13e28:	b	13ccc <__assert_fail@plt+0x276c>
   13e2c:	bx	lr
   13e30:	push	{r3, lr}
   13e34:	ldr	r3, [r0, #8]
   13e38:	cmp	r3, #0
   13e3c:	popeq	{r3, pc}
   13e40:	mov	r1, r0
   13e44:	mov	r0, #1
   13e48:	blx	r3
   13e4c:	pop	{r3, pc}
   13e50:	cmp	r1, #4
   13e54:	addls	pc, pc, r1, lsl #2
   13e58:	b	13e8c <__assert_fail@plt+0x292c>
   13e5c:	b	13e78 <__assert_fail@plt+0x2918>
   13e60:	b	13e70 <__assert_fail@plt+0x2910>
   13e64:	b	13e8c <__assert_fail@plt+0x292c>
   13e68:	b	13e70 <__assert_fail@plt+0x2910>
   13e6c:	b	13e70 <__assert_fail@plt+0x2910>
   13e70:	mov	r0, #1
   13e74:	bx	lr
   13e78:	cmp	r2, #15
   13e7c:	cmpls	r3, #0
   13e80:	moveq	r3, #0
   13e84:	movne	r3, #1
   13e88:	beq	13e94 <__assert_fail@plt+0x2934>
   13e8c:	mov	r0, #2
   13e90:	bx	lr
   13e94:	add	r2, r0, r2, lsl #2
   13e98:	mov	r0, r3
   13e9c:	ldr	r3, [r2, #4]
   13ea0:	ldr	r2, [sp]
   13ea4:	str	r3, [r2]
   13ea8:	bx	lr
   13eac:	push	{lr}		; (str lr, [sp, #-4]!)
   13eb0:	sub	sp, sp, #20
   13eb4:	mov	r2, r1
   13eb8:	mov	r1, #0
   13ebc:	add	ip, sp, #12
   13ec0:	mov	r3, r1
   13ec4:	str	ip, [sp]
   13ec8:	bl	13e50 <__assert_fail@plt+0x28f0>
   13ecc:	ldr	r0, [sp, #12]
   13ed0:	add	sp, sp, #20
   13ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ed8:	cmp	r1, #4
   13edc:	addls	pc, pc, r1, lsl #2
   13ee0:	b	13f14 <__assert_fail@plt+0x29b4>
   13ee4:	b	13f00 <__assert_fail@plt+0x29a0>
   13ee8:	b	13ef8 <__assert_fail@plt+0x2998>
   13eec:	b	13f14 <__assert_fail@plt+0x29b4>
   13ef0:	b	13ef8 <__assert_fail@plt+0x2998>
   13ef4:	b	13ef8 <__assert_fail@plt+0x2998>
   13ef8:	mov	r0, #1
   13efc:	bx	lr
   13f00:	cmp	r2, #15
   13f04:	cmpls	r3, #0
   13f08:	moveq	r3, #0
   13f0c:	movne	r3, #1
   13f10:	beq	13f1c <__assert_fail@plt+0x29bc>
   13f14:	mov	r0, #2
   13f18:	bx	lr
   13f1c:	ldr	ip, [sp]
   13f20:	add	r2, r0, r2, lsl #2
   13f24:	mov	r0, r3
   13f28:	ldr	r1, [ip]
   13f2c:	str	r1, [r2, #4]
   13f30:	bx	lr
   13f34:	push	{lr}		; (str lr, [sp, #-4]!)
   13f38:	sub	sp, sp, #20
   13f3c:	add	ip, sp, #16
   13f40:	mov	lr, r1
   13f44:	mov	r1, #0
   13f48:	str	r2, [ip, #-4]!
   13f4c:	mov	r3, r1
   13f50:	str	ip, [sp]
   13f54:	mov	r2, lr
   13f58:	bl	13ed8 <__assert_fail@plt+0x2978>
   13f5c:	add	sp, sp, #20
   13f60:	pop	{pc}		; (ldr pc, [sp], #4)
   13f64:	ldr	r3, [r2, #60]	; 0x3c
   13f68:	push	{r4, r5, r6, r7, r8, lr}
   13f6c:	add	lr, r2, #4
   13f70:	str	r3, [r2, #64]	; 0x40
   13f74:	mov	r8, r0
   13f78:	mov	r7, r1
   13f7c:	sub	sp, sp, #568	; 0x238
   13f80:	ldm	lr!, {r0, r1, r2, r3}
   13f84:	add	ip, sp, #92	; 0x5c
   13f88:	mvn	r6, #0
   13f8c:	add	r4, sp, #88	; 0x58
   13f90:	stmia	ip!, {r0, r1, r2, r3}
   13f94:	ldm	lr!, {r0, r1, r2, r3}
   13f98:	stmia	ip!, {r0, r1, r2, r3}
   13f9c:	ldm	lr!, {r0, r1, r2, r3}
   13fa0:	stmia	ip!, {r0, r1, r2, r3}
   13fa4:	ldm	lr, {r0, r1, r2, r3}
   13fa8:	stm	ip, {r0, r1, r2, r3}
   13fac:	str	r6, [sp, #88]	; 0x58
   13fb0:	b	13ff0 <__assert_fail@plt+0x2a90>
   13fb4:	bl	13f34 <__assert_fail@plt+0x29d4>
   13fb8:	mov	r1, r7
   13fbc:	mov	r0, r4
   13fc0:	blx	r8
   13fc4:	mov	r1, sp
   13fc8:	mov	r2, r4
   13fcc:	cmp	r0, #0
   13fd0:	mov	r0, #8
   13fd4:	bne	14010 <__assert_fail@plt+0x2ab0>
   13fd8:	ldr	r3, [sp, #16]
   13fdc:	blx	r3
   13fe0:	cmp	r0, #9
   13fe4:	cmpne	r0, #5
   13fe8:	mov	r6, r0
   13fec:	beq	14014 <__assert_fail@plt+0x2ab4>
   13ff0:	ldr	r1, [sp, #152]	; 0x98
   13ff4:	mov	r0, sp
   13ff8:	bl	1391c <__assert_fail@plt+0x23bc>
   13ffc:	mov	r2, sp
   14000:	mov	r1, #12
   14004:	cmp	r0, #0
   14008:	mov	r0, r4
   1400c:	beq	13fb4 <__assert_fail@plt+0x2a54>
   14010:	mov	r6, #9
   14014:	mov	r0, r4
   14018:	bl	13a48 <__assert_fail@plt+0x24e8>
   1401c:	mov	r0, r6
   14020:	add	sp, sp, #568	; 0x238
   14024:	pop	{r4, r5, r6, r7, r8, pc}
   14028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1402c:	mov	r4, r1
   14030:	ldr	r1, [r1, #76]	; 0x4c
   14034:	mov	r8, r2
   14038:	sub	sp, sp, #44	; 0x2c
   1403c:	subs	r6, r3, #0
   14040:	ldr	ip, [pc, #1064]	; 14470 <__assert_fail@plt+0x2f10>
   14044:	add	r3, r1, #4
   14048:	ldr	r2, [r1]
   1404c:	and	r7, r0, #3
   14050:	add	ip, pc, ip
   14054:	str	r3, [sp, #32]
   14058:	str	ip, [sp, #4]
   1405c:	str	r2, [sp, #28]
   14060:	bne	1420c <__assert_fail@plt+0x2cac>
   14064:	lsl	r2, r2, #8
   14068:	strb	r6, [sp, #37]	; 0x25
   1406c:	str	r2, [sp, #28]
   14070:	mov	r2, #3
   14074:	strb	r2, [sp, #36]	; 0x24
   14078:	cmp	r7, #2
   1407c:	ldr	r2, [r4, #80]	; 0x50
   14080:	ldreq	r3, [r4, #56]	; 0x38
   14084:	ands	r2, r2, #1
   14088:	bne	141e0 <__assert_fail@plt+0x2c80>
   1408c:	eor	r0, r0, #8
   14090:	str	r2, [sp, #8]
   14094:	ubfx	r0, r0, #3, #1
   14098:	str	r0, [sp, #12]
   1409c:	ldr	r9, [r3]
   140a0:	cmp	r9, #0
   140a4:	beq	141e8 <__assert_fail@plt+0x2c88>
   140a8:	cmp	r6, #2
   140ac:	mov	r0, r8
   140b0:	addeq	r5, r3, #8
   140b4:	addne	r5, r3, #4
   140b8:	ldreq	sl, [r3, #4]
   140bc:	mov	r1, #15
   140c0:	ldrhne	sl, [r3, #2]
   140c4:	ldrhne	r9, [r3]
   140c8:	ldr	r3, [r4, #72]	; 0x48
   140cc:	bic	fp, sl, #1
   140d0:	add	fp, fp, r3
   140d4:	bl	13eac <__assert_fail@plt+0x294c>
   140d8:	cmp	fp, r0
   140dc:	movhi	r0, #0
   140e0:	bhi	140f8 <__assert_fail@plt+0x2b98>
   140e4:	bic	r3, r9, #1
   140e8:	add	fp, fp, r3
   140ec:	cmp	r0, fp
   140f0:	movcs	r0, #0
   140f4:	movcc	r0, #1
   140f8:	and	sl, sl, #1
   140fc:	and	r9, r9, #1
   14100:	orr	r9, r9, sl, lsl #1
   14104:	cmp	r9, #1
   14108:	beq	14284 <__assert_fail@plt+0x2d24>
   1410c:	bcc	14268 <__assert_fail@plt+0x2d08>
   14110:	cmp	r9, #2
   14114:	bne	141fc <__assert_fail@plt+0x2c9c>
   14118:	ldr	r3, [r5]
   1411c:	cmp	r7, #0
   14120:	bic	fp, r3, #-2147483648	; 0x80000000
   14124:	bne	14238 <__assert_fail@plt+0x2cd8>
   14128:	cmp	r0, #0
   1412c:	beq	14254 <__assert_fail@plt+0x2cf4>
   14130:	ldr	r2, [sp, #12]
   14134:	cmp	fp, #0
   14138:	orreq	r2, r2, #1
   1413c:	cmp	r2, #0
   14140:	beq	14254 <__assert_fail@plt+0x2cf4>
   14144:	cmp	fp, #0
   14148:	beq	141bc <__assert_fail@plt+0x2c5c>
   1414c:	add	r2, r4, #88	; 0x58
   14150:	add	ip, sp, #24
   14154:	mov	sl, r7
   14158:	str	r7, [sp, #20]
   1415c:	str	r6, [sp, #16]
   14160:	add	r9, r5, #4
   14164:	mov	r7, r2
   14168:	mov	r6, ip
   1416c:	b	1417c <__assert_fail@plt+0x2c1c>
   14170:	cmp	r3, fp
   14174:	mov	sl, r3
   14178:	beq	141bc <__assert_fail@plt+0x2c5c>
   1417c:	mov	r0, r9
   14180:	str	r7, [sp, #24]
   14184:	bl	13ad0 <__assert_fail@plt+0x2570>
   14188:	mov	r3, r6
   1418c:	mov	r2, #0
   14190:	add	r9, r9, #4
   14194:	mov	r1, r0
   14198:	mov	r0, r4
   1419c:	bl	11434 <__cxa_type_match@plt>
   141a0:	add	r3, sl, #1
   141a4:	cmp	r0, #0
   141a8:	beq	14170 <__assert_fail@plt+0x2c10>
   141ac:	cmp	fp, sl
   141b0:	ldr	r7, [sp, #20]
   141b4:	ldr	r6, [sp, #16]
   141b8:	bne	14250 <__assert_fail@plt+0x2cf0>
   141bc:	mov	r0, r8
   141c0:	mov	r1, #13
   141c4:	bl	13eac <__assert_fail@plt+0x294c>
   141c8:	ldr	r2, [sp, #24]
   141cc:	str	r5, [r4, #40]	; 0x28
   141d0:	mov	r3, #6
   141d4:	str	r2, [r4, #36]	; 0x24
   141d8:	str	r0, [r4, #32]
   141dc:	b	14200 <__assert_fail@plt+0x2ca0>
   141e0:	mov	ip, #0
   141e4:	str	ip, [sp, #8]
   141e8:	cmp	r6, #2
   141ec:	ble	142e0 <__assert_fail@plt+0x2d80>
   141f0:	bl	13ae4 <__assert_fail@plt+0x2584>
   141f4:	cmp	r0, #0
   141f8:	beq	142f4 <__assert_fail@plt+0x2d94>
   141fc:	mov	r3, #9
   14200:	mov	r0, r3
   14204:	add	sp, sp, #44	; 0x2c
   14208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1420c:	cmp	r6, #2
   14210:	bgt	14078 <__assert_fail@plt+0x2b18>
   14214:	lsr	r1, r2, #16
   14218:	strb	r1, [sp, #37]	; 0x25
   1421c:	lsl	r2, r2, #16
   14220:	mov	ip, #2
   14224:	uxtb	r1, r1
   14228:	str	r2, [sp, #28]
   1422c:	strb	ip, [sp, #36]	; 0x24
   14230:	add	r3, r3, r1, lsl #2
   14234:	b	14078 <__assert_fail@plt+0x2b18>
   14238:	mov	r0, r8
   1423c:	mov	r1, #13
   14240:	ldr	r9, [r4, #32]
   14244:	bl	13eac <__assert_fail@plt+0x294c>
   14248:	cmp	r9, r0
   1424c:	beq	14394 <__assert_fail@plt+0x2e34>
   14250:	ldr	r3, [r5]
   14254:	cmp	r3, #0
   14258:	addlt	r5, r5, #4
   1425c:	add	fp, fp, #1
   14260:	add	r3, r5, fp, lsl #2
   14264:	b	1409c <__assert_fail@plt+0x2b3c>
   14268:	cmp	r7, #0
   1426c:	moveq	r0, #0
   14270:	andne	r0, r0, #1
   14274:	cmp	r0, #0
   14278:	bne	143f8 <__assert_fail@plt+0x2e98>
   1427c:	add	r3, r5, #4
   14280:	b	1409c <__assert_fail@plt+0x2b3c>
   14284:	cmp	r7, #0
   14288:	bne	14340 <__assert_fail@plt+0x2de0>
   1428c:	cmp	r0, #0
   14290:	beq	142d8 <__assert_fail@plt+0x2d78>
   14294:	ldm	r5, {r2, r3}
   14298:	cmn	r3, #2
   1429c:	lsr	r9, r2, #31
   142a0:	beq	141fc <__assert_fail@plt+0x2c9c>
   142a4:	cmn	r3, #1
   142a8:	add	r3, r4, #88	; 0x58
   142ac:	str	r3, [sp, #24]
   142b0:	beq	143d4 <__assert_fail@plt+0x2e74>
   142b4:	add	r0, r5, #4
   142b8:	bl	13ad0 <__assert_fail@plt+0x2570>
   142bc:	mov	r2, r9
   142c0:	add	r3, sp, #24
   142c4:	mov	r1, r0
   142c8:	mov	r0, r4
   142cc:	bl	11434 <__cxa_type_match@plt>
   142d0:	cmp	r0, #0
   142d4:	bne	14440 <__assert_fail@plt+0x2ee0>
   142d8:	add	r3, r5, #8
   142dc:	b	1409c <__assert_fail@plt+0x2b3c>
   142e0:	mov	r0, r8
   142e4:	add	r1, sp, #28
   142e8:	bl	14a58 <__assert_fail@plt+0x34f8>
   142ec:	cmp	r0, #0
   142f0:	bne	141fc <__assert_fail@plt+0x2c9c>
   142f4:	ldr	ip, [sp, #8]
   142f8:	cmp	ip, #0
   142fc:	moveq	r3, #8
   14300:	beq	14200 <__assert_fail@plt+0x2ca0>
   14304:	mov	r1, #15
   14308:	mov	r0, r8
   1430c:	bl	13eac <__assert_fail@plt+0x294c>
   14310:	mov	r1, #14
   14314:	mov	r2, r0
   14318:	mov	r0, r8
   1431c:	bl	13f34 <__assert_fail@plt+0x29d4>
   14320:	ldr	r3, [pc, #332]	; 14474 <__assert_fail@plt+0x2f14>
   14324:	ldr	ip, [sp, #4]
   14328:	mov	r0, r8
   1432c:	mov	r1, #15
   14330:	ldr	r2, [ip, r3]
   14334:	bl	13f34 <__assert_fail@plt+0x29d4>
   14338:	mov	r3, #7
   1433c:	b	14200 <__assert_fail@plt+0x2ca0>
   14340:	mov	r0, r8
   14344:	mov	r1, #13
   14348:	ldr	r9, [r4, #32]
   1434c:	bl	13eac <__assert_fail@plt+0x294c>
   14350:	cmp	r9, r0
   14354:	bne	142d8 <__assert_fail@plt+0x2d78>
   14358:	ldr	r3, [r4, #40]	; 0x28
   1435c:	cmp	r5, r3
   14360:	bne	142d8 <__assert_fail@plt+0x2d78>
   14364:	mov	r0, r5
   14368:	bl	13800 <__assert_fail@plt+0x22a0>
   1436c:	mov	r1, #15
   14370:	mov	r2, r0
   14374:	mov	r0, r8
   14378:	bl	13f34 <__assert_fail@plt+0x29d4>
   1437c:	mov	r0, r8
   14380:	mov	r2, r4
   14384:	mov	r1, #0
   14388:	bl	13f34 <__assert_fail@plt+0x29d4>
   1438c:	mov	r3, #7
   14390:	b	14200 <__assert_fail@plt+0x2ca0>
   14394:	ldr	r3, [r4, #40]	; 0x28
   14398:	cmp	r5, r3
   1439c:	bne	14250 <__assert_fail@plt+0x2cf0>
   143a0:	mov	r2, #4
   143a4:	mov	r3, #0
   143a8:	str	fp, [r4, #40]	; 0x28
   143ac:	str	r3, [r4, #44]	; 0x2c
   143b0:	add	r3, r5, r2
   143b4:	str	r2, [r4, #48]	; 0x30
   143b8:	str	r3, [r4, #52]	; 0x34
   143bc:	ldr	r3, [r5]
   143c0:	cmp	r3, #0
   143c4:	blt	14434 <__assert_fail@plt+0x2ed4>
   143c8:	mov	ip, #1
   143cc:	str	ip, [sp, #8]
   143d0:	b	1425c <__assert_fail@plt+0x2cfc>
   143d4:	mov	r0, r8
   143d8:	mov	r1, #13
   143dc:	bl	13eac <__assert_fail@plt+0x294c>
   143e0:	str	r0, [r4, #32]
   143e4:	ldr	r3, [sp, #24]
   143e8:	str	r3, [r4, #36]	; 0x24
   143ec:	str	r5, [r4, #40]	; 0x28
   143f0:	mov	r3, #6
   143f4:	b	14200 <__assert_fail@plt+0x2ca0>
   143f8:	mov	r0, r5
   143fc:	add	r5, r5, #4
   14400:	bl	13800 <__assert_fail@plt+0x22a0>
   14404:	str	r5, [r4, #56]	; 0x38
   14408:	mov	r6, r0
   1440c:	mov	r0, r4
   14410:	bl	113d4 <__cxa_begin_cleanup@plt>
   14414:	cmp	r0, #0
   14418:	beq	141fc <__assert_fail@plt+0x2c9c>
   1441c:	mov	r0, r8
   14420:	mov	r2, r6
   14424:	mov	r1, #15
   14428:	bl	13f34 <__assert_fail@plt+0x29d4>
   1442c:	mov	r3, #7
   14430:	b	14200 <__assert_fail@plt+0x2ca0>
   14434:	add	r0, fp, #1
   14438:	add	r0, r5, r0, lsl #2
   1443c:	b	14368 <__assert_fail@plt+0x2e08>
   14440:	mov	r9, r0
   14444:	mov	r1, #13
   14448:	mov	r0, r8
   1444c:	bl	13eac <__assert_fail@plt+0x294c>
   14450:	cmp	r9, #2
   14454:	str	r0, [r4, #32]
   14458:	bne	143e4 <__assert_fail@plt+0x2e84>
   1445c:	ldr	r2, [sp, #24]
   14460:	mov	r3, r4
   14464:	str	r2, [r3, #44]!	; 0x2c
   14468:	str	r3, [r4, #36]	; 0x24
   1446c:	b	143ec <__assert_fail@plt+0x2e8c>
   14470:	andeq	r1, r1, r8, lsr #31
   14474:	andeq	r0, r0, r0, lsr r1
   14478:	mov	r3, #0
   1447c:	b	14028 <__assert_fail@plt+0x2ac8>
   14480:	mov	r3, #1
   14484:	b	14028 <__assert_fail@plt+0x2ac8>
   14488:	mov	r3, #2
   1448c:	b	14028 <__assert_fail@plt+0x2ac8>
   14490:	push	{r4, r5, r6, r7, r8, lr}
   14494:	mov	r4, r0
   14498:	sub	sp, sp, #272	; 0x110
   1449c:	cmp	r1, #4
   144a0:	addls	pc, pc, r1, lsl #2
   144a4:	b	144c4 <__assert_fail@plt+0x2f64>
   144a8:	b	146b8 <__assert_fail@plt+0x3158>
   144ac:	b	14538 <__assert_fail@plt+0x2fd8>
   144b0:	b	144c4 <__assert_fail@plt+0x2f64>
   144b4:	b	144bc <__assert_fail@plt+0x2f5c>
   144b8:	b	144d0 <__assert_fail@plt+0x2f70>
   144bc:	cmp	r3, #3
   144c0:	beq	146fc <__assert_fail@plt+0x319c>
   144c4:	mov	r0, #2
   144c8:	add	sp, sp, #272	; 0x110
   144cc:	pop	{r4, r5, r6, r7, r8, pc}
   144d0:	cmp	r2, #16
   144d4:	cmpls	r3, #0
   144d8:	bne	144c4 <__assert_fail@plt+0x2f64>
   144dc:	ldr	r3, [r0]
   144e0:	tst	r3, #16
   144e4:	bne	14778 <__assert_fail@plt+0x3218>
   144e8:	add	r5, sp, #136	; 0x88
   144ec:	str	r2, [sp, #4]
   144f0:	mov	r0, r5
   144f4:	bl	148fc <__assert_fail@plt+0x339c>
   144f8:	ldr	r1, [r4, #56]	; 0x38
   144fc:	ldr	r2, [sp, #4]
   14500:	mov	r3, #0
   14504:	mov	r0, #1
   14508:	ands	ip, r2, r0, lsl r3
   1450c:	ldrne	ip, [r1]
   14510:	addne	r1, r1, #4
   14514:	strne	ip, [r5, r3, lsl #2]
   14518:	add	r3, r3, #1
   1451c:	cmp	r3, #4
   14520:	bne	14508 <__assert_fail@plt+0x2fa8>
   14524:	mov	r0, r5
   14528:	str	r1, [r4, #56]	; 0x38
   1452c:	bl	148e8 <__assert_fail@plt+0x3388>
   14530:	mov	r0, #0
   14534:	b	144c8 <__assert_fail@plt+0x2f68>
   14538:	bic	r1, r3, #4
   1453c:	cmp	r1, #1
   14540:	bne	144c4 <__assert_fail@plt+0x2f64>
   14544:	cmp	r3, #1
   14548:	lsr	r5, r2, #16
   1454c:	uxth	r6, r2
   14550:	add	r2, r6, r5
   14554:	movne	r1, #32
   14558:	moveq	r1, #16
   1455c:	cmp	r1, r2
   14560:	bcc	144c4 <__assert_fail@plt+0x2f64>
   14564:	subs	r0, r3, #1
   14568:	rsbs	r7, r0, #0
   1456c:	adcs	r7, r7, r0
   14570:	cmp	r5, #15
   14574:	movls	r1, #0
   14578:	movhi	r1, #1
   1457c:	tst	r7, r1
   14580:	bne	144c4 <__assert_fail@plt+0x2f64>
   14584:	cmp	r1, #0
   14588:	movne	r8, r6
   1458c:	bne	1459c <__assert_fail@plt+0x303c>
   14590:	cmp	r2, #16
   14594:	bls	147a0 <__assert_fail@plt+0x3240>
   14598:	sub	r8, r2, #16
   1459c:	cmp	r8, #0
   145a0:	cmpne	r3, #5
   145a4:	bne	144c4 <__assert_fail@plt+0x2f64>
   145a8:	cmp	r5, #15
   145ac:	bhi	145dc <__assert_fail@plt+0x307c>
   145b0:	ldr	r2, [r4]
   145b4:	tst	r2, #1
   145b8:	beq	145dc <__assert_fail@plt+0x307c>
   145bc:	cmp	r3, #5
   145c0:	mov	r0, r4
   145c4:	bic	r3, r2, #1
   145c8:	str	r3, [r4]
   145cc:	beq	1480c <__assert_fail@plt+0x32ac>
   145d0:	bic	r2, r2, #3
   145d4:	str	r2, [r0], #72	; 0x48
   145d8:	bl	14838 <__assert_fail@plt+0x32d8>
   145dc:	cmp	r8, #0
   145e0:	beq	145f0 <__assert_fail@plt+0x3090>
   145e4:	ldr	r3, [r4]
   145e8:	tst	r3, #4
   145ec:	bne	147e4 <__assert_fail@plt+0x3284>
   145f0:	cmp	r7, #0
   145f4:	bne	147f8 <__assert_fail@plt+0x3298>
   145f8:	cmp	r5, #15
   145fc:	bls	147c8 <__assert_fail@plt+0x3268>
   14600:	cmp	r8, #0
   14604:	bne	147d4 <__assert_fail@plt+0x3274>
   14608:	ldr	ip, [r4, #56]	; 0x38
   1460c:	cmp	r6, #0
   14610:	mov	r2, ip
   14614:	ble	14648 <__assert_fail@plt+0x30e8>
   14618:	add	r0, sp, #136	; 0x88
   1461c:	lsl	r6, r6, #1
   14620:	add	r0, r0, r5, lsl #3
   14624:	sub	r1, r6, #1
   14628:	rsb	r0, ip, r0
   1462c:	sub	r3, ip, #4
   14630:	sub	r1, r1, #1
   14634:	ldr	r2, [r3, #4]!
   14638:	cmn	r1, #1
   1463c:	str	r2, [r0, r3]
   14640:	bne	14630 <__assert_fail@plt+0x30d0>
   14644:	add	r2, ip, r6, lsl #2
   14648:	cmp	r8, #0
   1464c:	beq	1468c <__assert_fail@plt+0x312c>
   14650:	cmp	r5, #16
   14654:	movcs	r0, r5
   14658:	movcc	r0, #16
   1465c:	add	r6, sp, #272	; 0x110
   14660:	lsl	r1, r8, #1
   14664:	mov	ip, r2
   14668:	add	r0, r6, r0, lsl #3
   1466c:	sub	r3, r1, #1
   14670:	sub	r0, r0, #392	; 0x188
   14674:	sub	r3, r3, #1
   14678:	ldr	r6, [ip], #4
   1467c:	cmn	r3, #1
   14680:	str	r6, [r0], #4
   14684:	bne	14674 <__assert_fail@plt+0x3114>
   14688:	add	r2, r2, r1, lsl #2
   1468c:	cmp	r7, #0
   14690:	bne	147a8 <__assert_fail@plt+0x3248>
   14694:	cmp	r5, #15
   14698:	str	r2, [r4, #56]	; 0x38
   1469c:	bls	147bc <__assert_fail@plt+0x325c>
   146a0:	cmp	r8, #0
   146a4:	beq	146b0 <__assert_fail@plt+0x3150>
   146a8:	add	r0, sp, #8
   146ac:	bl	14850 <__assert_fail@plt+0x32f0>
   146b0:	mov	r0, #0
   146b4:	b	144c8 <__assert_fail@plt+0x2f68>
   146b8:	cmp	r3, #0
   146bc:	bne	144c4 <__assert_fail@plt+0x2f64>
   146c0:	ldr	r1, [r0, #56]	; 0x38
   146c4:	uxth	r5, r2
   146c8:	mov	ip, #1
   146cc:	ands	r0, r5, ip, lsl r3
   146d0:	add	r0, r4, r3, lsl #2
   146d4:	add	r3, r3, #1
   146d8:	ldrne	r6, [r1]
   146dc:	addne	r1, r1, #4
   146e0:	strne	r6, [r0, #4]
   146e4:	cmp	r3, #16
   146e8:	bne	146cc <__assert_fail@plt+0x316c>
   146ec:	ands	r0, r2, #8192	; 0x2000
   146f0:	streq	r1, [r4, #56]	; 0x38
   146f4:	beq	144c8 <__assert_fail@plt+0x2f68>
   146f8:	b	146b0 <__assert_fail@plt+0x3150>
   146fc:	lsr	r6, r2, #16
   14700:	uxth	r7, r2
   14704:	add	r3, r7, r6
   14708:	cmp	r3, #16
   1470c:	bhi	144c4 <__assert_fail@plt+0x2f64>
   14710:	ldr	r3, [r0]
   14714:	tst	r3, #8
   14718:	bne	14790 <__assert_fail@plt+0x3230>
   1471c:	add	r5, sp, #136	; 0x88
   14720:	lsl	r7, r7, #1
   14724:	mov	r0, r5
   14728:	bl	148a4 <__assert_fail@plt+0x3344>
   1472c:	ldr	ip, [r4, #56]	; 0x38
   14730:	cmp	r7, #0
   14734:	add	r0, r5, r6, lsl #3
   14738:	sub	r3, r7, #1
   1473c:	mov	r2, ip
   14740:	beq	14764 <__assert_fail@plt+0x3204>
   14744:	rsb	r0, ip, r0
   14748:	sub	r2, ip, #4
   1474c:	sub	r3, r3, #1
   14750:	ldr	r1, [r2, #4]!
   14754:	cmn	r3, #1
   14758:	str	r1, [r0, r2]
   1475c:	bne	1474c <__assert_fail@plt+0x31ec>
   14760:	add	r2, ip, r7, lsl #2
   14764:	mov	r0, r5
   14768:	str	r2, [r4, #56]	; 0x38
   1476c:	bl	14860 <__assert_fail@plt+0x3300>
   14770:	mov	r0, #0
   14774:	b	144c8 <__assert_fail@plt+0x2f68>
   14778:	bic	r3, r3, #16
   1477c:	str	r3, [r0], #464	; 0x1d0
   14780:	str	r2, [sp, #4]
   14784:	bl	148fc <__assert_fail@plt+0x339c>
   14788:	ldr	r2, [sp, #4]
   1478c:	b	144e8 <__assert_fail@plt+0x2f88>
   14790:	bic	r3, r3, #8
   14794:	str	r3, [r0], #336	; 0x150
   14798:	bl	148a4 <__assert_fail@plt+0x3344>
   1479c:	b	1471c <__assert_fail@plt+0x31bc>
   147a0:	mov	r8, r1
   147a4:	b	145a8 <__assert_fail@plt+0x3048>
   147a8:	add	r2, r2, #4
   147ac:	add	r0, sp, #136	; 0x88
   147b0:	str	r2, [r4, #56]	; 0x38
   147b4:	bl	14830 <__assert_fail@plt+0x32d0>
   147b8:	b	146b0 <__assert_fail@plt+0x3150>
   147bc:	add	r0, sp, #136	; 0x88
   147c0:	bl	14840 <__assert_fail@plt+0x32e0>
   147c4:	b	146a0 <__assert_fail@plt+0x3140>
   147c8:	add	r0, sp, #136	; 0x88
   147cc:	bl	14848 <__assert_fail@plt+0x32e8>
   147d0:	b	14600 <__assert_fail@plt+0x30a0>
   147d4:	add	r0, sp, #8
   147d8:	bl	14858 <__assert_fail@plt+0x32f8>
   147dc:	rsb	r6, r5, #16
   147e0:	b	14608 <__assert_fail@plt+0x30a8>
   147e4:	mov	r0, r4
   147e8:	bic	r3, r3, #4
   147ec:	str	r3, [r0], #208	; 0xd0
   147f0:	bl	14858 <__assert_fail@plt+0x32f8>
   147f4:	b	145f0 <__assert_fail@plt+0x3090>
   147f8:	add	r0, sp, #136	; 0x88
   147fc:	bl	14838 <__assert_fail@plt+0x32d8>
   14800:	cmp	r8, #0
   14804:	bne	147dc <__assert_fail@plt+0x327c>
   14808:	b	14608 <__assert_fail@plt+0x30a8>
   1480c:	orr	r3, r3, #2
   14810:	str	r3, [r0], #72	; 0x48
   14814:	bl	14848 <__assert_fail@plt+0x32e8>
   14818:	b	145dc <__assert_fail@plt+0x307c>
   1481c:	add	r1, r0, #52	; 0x34
   14820:	ldm	r1, {r3, r4, r5}
   14824:	push	{r3, r4, r5}
   14828:	ldm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1482c:	ldm	sp, {sp, lr, pc}
   14830:	fldmiax	r0, {d0-d15}	;@ Deprecated
   14834:	bx	lr
   14838:	fstmiax	r0, {d0-d15}	;@ Deprecated
   1483c:	bx	lr
   14840:	vldmia	r0, {d0-d15}
   14844:	bx	lr
   14848:	vstmia	r0, {d0-d15}
   1484c:	bx	lr
   14850:	vldmia	r0, {d16-d31}
   14854:	bx	lr
   14858:	vstmia	r0, {d16-d31}
   1485c:	bx	lr
   14860:	ldfe	f0, [r0], #8
   14864:	ldfe	f1, [r0], #8
   14868:	ldfe	f2, [r0], #8
   1486c:	ldfe	f3, [r0], #8
   14870:	ldfe	f4, [r0], #8
   14874:	ldfe	f5, [r0], #8
   14878:	ldfe	f6, [r0], #8
   1487c:	ldfe	f7, [r0], #8
   14880:	ldfp	f0, [r0], #8
   14884:	ldfp	f1, [r0], #8
   14888:	ldfp	f2, [r0], #8
   1488c:	ldfp	f3, [r0], #8
   14890:	ldfp	f4, [r0], #8
   14894:	ldfp	f5, [r0], #8
   14898:	ldfp	f6, [r0], #8
   1489c:	ldfp	f7, [r0], #8
   148a0:	bx	lr
   148a4:	stfe	f0, [r0], #8
   148a8:	stfe	f1, [r0], #8
   148ac:	stfe	f2, [r0], #8
   148b0:	stfe	f3, [r0], #8
   148b4:	stfe	f4, [r0], #8
   148b8:	stfe	f5, [r0], #8
   148bc:	stfe	f6, [r0], #8
   148c0:	stfe	f7, [r0], #8
   148c4:	stfp	f0, [r0], #8
   148c8:	stfp	f1, [r0], #8
   148cc:	stfp	f2, [r0], #8
   148d0:	stfp	f3, [r0], #8
   148d4:	stfp	f4, [r0], #8
   148d8:	stfp	f5, [r0], #8
   148dc:	stfp	f6, [r0], #8
   148e0:	stfp	f7, [r0], #8
   148e4:	bx	lr
   148e8:	ldc2	1, cr8, [r0], #4
   148ec:	ldc2	1, cr9, [r0], #4
   148f0:	ldc2	1, cr10, [r0], #4
   148f4:	ldc2	1, cr11, [r0], #4
   148f8:	bx	lr
   148fc:	stc2	1, cr8, [r0], #4
   14900:	stc2	1, cr9, [r0], #4
   14904:	stc2	1, cr10, [r0], #4
   14908:	stc2	1, cr11, [r0], #4
   1490c:	bx	lr
   14910:	push	{sp, lr, pc}
   14914:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14918:	mov	r3, #0
   1491c:	push	{r2, r3}
   14920:	add	r1, sp, #4
   14924:	bl	13ccc <__assert_fail@plt+0x276c>
   14928:	ldr	lr, [sp, #64]	; 0x40
   1492c:	add	sp, sp, #72	; 0x48
   14930:	bx	lr
   14934:	push	{sp, lr, pc}
   14938:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1493c:	mov	r3, #0
   14940:	push	{r2, r3}
   14944:	add	r1, sp, #4
   14948:	bl	13d98 <__assert_fail@plt+0x2838>
   1494c:	ldr	lr, [sp, #64]	; 0x40
   14950:	add	sp, sp, #72	; 0x48
   14954:	bx	lr
   14958:	push	{sp, lr, pc}
   1495c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14960:	mov	r3, #0
   14964:	push	{r2, r3}
   14968:	add	r1, sp, #4
   1496c:	bl	13e0c <__assert_fail@plt+0x28ac>
   14970:	ldr	lr, [sp, #64]	; 0x40
   14974:	add	sp, sp, #72	; 0x48
   14978:	bx	lr
   1497c:	push	{sp, lr, pc}
   14980:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14984:	mov	r3, #0
   14988:	push	{r2, r3}
   1498c:	add	r3, sp, #4
   14990:	bl	13d74 <__assert_fail@plt+0x2814>
   14994:	ldr	lr, [sp, #64]	; 0x40
   14998:	add	sp, sp, #72	; 0x48
   1499c:	bx	lr
   149a0:	push	{sp, lr, pc}
   149a4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   149a8:	mov	r3, #0
   149ac:	push	{r2, r3}
   149b0:	add	r2, sp, #4
   149b4:	bl	13f64 <__assert_fail@plt+0x2a04>
   149b8:	ldr	lr, [sp, #64]	; 0x40
   149bc:	add	sp, sp, #72	; 0x48
   149c0:	bx	lr
   149c4:	ldrb	r2, [r0, #8]
   149c8:	mov	r3, r0
   149cc:	cmp	r2, #0
   149d0:	bne	149e8 <__assert_fail@plt+0x3488>
   149d4:	ldrb	r2, [r0, #9]
   149d8:	cmp	r2, #0
   149dc:	bne	14a04 <__assert_fail@plt+0x34a4>
   149e0:	mov	r0, #176	; 0xb0
   149e4:	bx	lr
   149e8:	ldr	r0, [r0]
   149ec:	sub	r2, r2, #1
   149f0:	strb	r2, [r3, #8]
   149f4:	lsl	r2, r0, #8
   149f8:	lsr	r0, r0, #24
   149fc:	str	r2, [r3]
   14a00:	bx	lr
   14a04:	ldr	r1, [r0, #4]
   14a08:	sub	r2, r2, #1
   14a0c:	strb	r2, [r0, #9]
   14a10:	mov	r2, #3
   14a14:	add	r0, r1, #4
   14a18:	str	r0, [r3, #4]
   14a1c:	ldr	r0, [r1]
   14a20:	strb	r2, [r3, #8]
   14a24:	b	149f4 <__assert_fail@plt+0x3494>
   14a28:	push	{lr}		; (str lr, [sp, #-4]!)
   14a2c:	sub	sp, sp, #20
   14a30:	mov	r1, #0
   14a34:	add	r2, sp, #12
   14a38:	mov	r3, r1
   14a3c:	str	r2, [sp]
   14a40:	mov	r2, #12
   14a44:	bl	13e50 <__assert_fail@plt+0x28f0>
   14a48:	ldr	r0, [sp, #12]
   14a4c:	add	sp, sp, #20
   14a50:	pop	{pc}		; (ldr pc, [sp], #4)
   14a54:	b	14a28 <__assert_fail@plt+0x34c8>
   14a58:	push	{r4, r5, r6, r7, r8, r9, lr}
   14a5c:	sub	sp, sp, #20
   14a60:	add	r7, sp, #12
   14a64:	mov	r6, r0
   14a68:	mov	r5, r1
   14a6c:	mov	r8, #0
   14a70:	mov	r0, r5
   14a74:	bl	149c4 <__assert_fail@plt+0x3464>
   14a78:	cmp	r0, #176	; 0xb0
   14a7c:	mov	r4, r0
   14a80:	beq	14c9c <__assert_fail@plt+0x373c>
   14a84:	bic	r2, r0, #127	; 0x7f
   14a88:	ands	r1, r2, #255	; 0xff
   14a8c:	beq	14af8 <__assert_fail@plt+0x3598>
   14a90:	and	r2, r0, #240	; 0xf0
   14a94:	cmp	r2, #128	; 0x80
   14a98:	beq	14bf4 <__assert_fail@plt+0x3694>
   14a9c:	cmp	r2, #144	; 0x90
   14aa0:	beq	14b48 <__assert_fail@plt+0x35e8>
   14aa4:	cmp	r2, #160	; 0xa0
   14aa8:	beq	14b70 <__assert_fail@plt+0x3610>
   14aac:	cmp	r2, #176	; 0xb0
   14ab0:	beq	14ba8 <__assert_fail@plt+0x3648>
   14ab4:	cmp	r2, #192	; 0xc0
   14ab8:	beq	14c3c <__assert_fail@plt+0x36dc>
   14abc:	and	r3, r0, #248	; 0xf8
   14ac0:	cmp	r3, #208	; 0xd0
   14ac4:	bne	14aec <__assert_fail@plt+0x358c>
   14ac8:	and	r4, r0, #7
   14acc:	mov	r1, #1
   14ad0:	add	r2, r4, #1
   14ad4:	mov	r0, r6
   14ad8:	orr	r2, r2, #524288	; 0x80000
   14adc:	mov	r3, #5
   14ae0:	bl	14490 <__assert_fail@plt+0x2f30>
   14ae4:	cmp	r0, #0
   14ae8:	beq	14a70 <__assert_fail@plt+0x3510>
   14aec:	mov	r0, #9
   14af0:	add	sp, sp, #20
   14af4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14af8:	lsl	r9, r0, #2
   14afc:	mov	r3, r1
   14b00:	str	r7, [sp]
   14b04:	mov	r0, r6
   14b08:	mov	r2, #13
   14b0c:	uxtb	r9, r9
   14b10:	bl	13e50 <__assert_fail@plt+0x28f0>
   14b14:	ldr	r3, [sp, #12]
   14b18:	add	r9, r9, #4
   14b1c:	tst	r4, #64	; 0x40
   14b20:	rsbne	r9, r9, r3
   14b24:	addeq	r9, r3, r9
   14b28:	str	r9, [sp, #12]
   14b2c:	mov	r1, #0
   14b30:	str	r7, [sp]
   14b34:	mov	r3, r1
   14b38:	mov	r0, r6
   14b3c:	mov	r2, #13
   14b40:	bl	13ed8 <__assert_fail@plt+0x2978>
   14b44:	b	14a70 <__assert_fail@plt+0x3510>
   14b48:	and	r3, r0, #13
   14b4c:	cmp	r3, #13
   14b50:	beq	14aec <__assert_fail@plt+0x358c>
   14b54:	mov	r1, #0
   14b58:	and	r2, r0, #15
   14b5c:	str	r7, [sp]
   14b60:	mov	r3, r1
   14b64:	mov	r0, r6
   14b68:	bl	13e50 <__assert_fail@plt+0x28f0>
   14b6c:	b	14b2c <__assert_fail@plt+0x35cc>
   14b70:	mvn	r4, r0
   14b74:	mov	r2, #4080	; 0xff0
   14b78:	and	r4, r4, #7
   14b7c:	tst	r0, #8
   14b80:	asr	r2, r2, r4
   14b84:	mov	r1, #0
   14b88:	and	r2, r2, #4080	; 0xff0
   14b8c:	orrne	r2, r2, #16384	; 0x4000
   14b90:	mov	r3, r1
   14b94:	mov	r0, r6
   14b98:	bl	14490 <__assert_fail@plt+0x2f30>
   14b9c:	cmp	r0, #0
   14ba0:	bne	14aec <__assert_fail@plt+0x358c>
   14ba4:	b	14a70 <__assert_fail@plt+0x3510>
   14ba8:	cmp	r0, #177	; 0xb1
   14bac:	beq	14ce4 <__assert_fail@plt+0x3784>
   14bb0:	cmp	r0, #178	; 0xb2
   14bb4:	beq	14d00 <__assert_fail@plt+0x37a0>
   14bb8:	cmp	r0, #179	; 0xb3
   14bbc:	beq	14d80 <__assert_fail@plt+0x3820>
   14bc0:	and	r3, r0, #252	; 0xfc
   14bc4:	cmp	r3, #180	; 0xb4
   14bc8:	beq	14aec <__assert_fail@plt+0x358c>
   14bcc:	and	r2, r0, #7
   14bd0:	mov	r1, #1
   14bd4:	add	r2, r2, r1
   14bd8:	mov	r3, r1
   14bdc:	orr	r2, r2, #524288	; 0x80000
   14be0:	mov	r0, r6
   14be4:	bl	14490 <__assert_fail@plt+0x2f30>
   14be8:	cmp	r0, #0
   14bec:	bne	14aec <__assert_fail@plt+0x358c>
   14bf0:	b	14a70 <__assert_fail@plt+0x3510>
   14bf4:	mov	r0, r5
   14bf8:	lsl	r4, r4, #8
   14bfc:	bl	149c4 <__assert_fail@plt+0x3464>
   14c00:	orr	r0, r0, r4
   14c04:	cmp	r0, #32768	; 0x8000
   14c08:	beq	14aec <__assert_fail@plt+0x358c>
   14c0c:	lsl	r4, r0, #4
   14c10:	mov	r1, #0
   14c14:	movw	r2, #65520	; 0xfff0
   14c18:	mov	r3, r1
   14c1c:	and	r2, r4, r2
   14c20:	mov	r0, r6
   14c24:	bl	14490 <__assert_fail@plt+0x2f30>
   14c28:	cmp	r0, #0
   14c2c:	bne	14aec <__assert_fail@plt+0x358c>
   14c30:	tst	r4, #32768	; 0x8000
   14c34:	movne	r8, #1
   14c38:	b	14a70 <__assert_fail@plt+0x3510>
   14c3c:	cmp	r0, #198	; 0xc6
   14c40:	beq	14da0 <__assert_fail@plt+0x3840>
   14c44:	cmp	r0, #199	; 0xc7
   14c48:	beq	14dbc <__assert_fail@plt+0x385c>
   14c4c:	and	r3, r0, #248	; 0xf8
   14c50:	cmp	r3, #192	; 0xc0
   14c54:	beq	14dec <__assert_fail@plt+0x388c>
   14c58:	cmp	r0, #200	; 0xc8
   14c5c:	beq	14e14 <__assert_fail@plt+0x38b4>
   14c60:	cmp	r0, #201	; 0xc9
   14c64:	bne	14aec <__assert_fail@plt+0x358c>
   14c68:	mov	r0, r5
   14c6c:	bl	149c4 <__assert_fail@plt+0x3464>
   14c70:	mov	r1, #1
   14c74:	and	r3, r0, #15
   14c78:	and	r2, r0, #240	; 0xf0
   14c7c:	add	r3, r3, #1
   14c80:	mov	r0, r6
   14c84:	orr	r2, r3, r2, lsl #12
   14c88:	mov	r3, #5
   14c8c:	bl	14490 <__assert_fail@plt+0x2f30>
   14c90:	cmp	r0, #0
   14c94:	bne	14aec <__assert_fail@plt+0x358c>
   14c98:	b	14a70 <__assert_fail@plt+0x3510>
   14c9c:	cmp	r8, #0
   14ca0:	movne	r0, #0
   14ca4:	bne	14af0 <__assert_fail@plt+0x3590>
   14ca8:	add	r4, sp, #12
   14cac:	mov	r1, r8
   14cb0:	mov	r2, #14
   14cb4:	mov	r3, r8
   14cb8:	mov	r0, r6
   14cbc:	str	r4, [sp]
   14cc0:	bl	13e50 <__assert_fail@plt+0x28f0>
   14cc4:	str	r4, [sp]
   14cc8:	mov	r0, r6
   14ccc:	mov	r1, r8
   14cd0:	mov	r2, #15
   14cd4:	mov	r3, r8
   14cd8:	bl	13ed8 <__assert_fail@plt+0x2978>
   14cdc:	mov	r0, r8
   14ce0:	b	14af0 <__assert_fail@plt+0x3590>
   14ce4:	mov	r0, r5
   14ce8:	bl	149c4 <__assert_fail@plt+0x3464>
   14cec:	subs	r2, r0, #0
   14cf0:	beq	14aec <__assert_fail@plt+0x358c>
   14cf4:	ands	r1, r2, #240	; 0xf0
   14cf8:	beq	14b90 <__assert_fail@plt+0x3630>
   14cfc:	b	14aec <__assert_fail@plt+0x358c>
   14d00:	mov	r1, #0
   14d04:	mov	r2, #13
   14d08:	mov	r3, r1
   14d0c:	str	r7, [sp]
   14d10:	mov	r0, r6
   14d14:	mov	r4, #2
   14d18:	bl	13e50 <__assert_fail@plt+0x28f0>
   14d1c:	mov	r0, r5
   14d20:	bl	149c4 <__assert_fail@plt+0x3464>
   14d24:	tst	r0, #128	; 0x80
   14d28:	beq	14d50 <__assert_fail@plt+0x37f0>
   14d2c:	and	r2, r0, #127	; 0x7f
   14d30:	ldr	r3, [sp, #12]
   14d34:	mov	r0, r5
   14d38:	add	r3, r3, r2, lsl r4
   14d3c:	str	r3, [sp, #12]
   14d40:	bl	149c4 <__assert_fail@plt+0x3464>
   14d44:	add	r4, r4, #7
   14d48:	tst	r0, #128	; 0x80
   14d4c:	bne	14d2c <__assert_fail@plt+0x37cc>
   14d50:	ldr	ip, [sp, #12]
   14d54:	and	lr, r0, #127	; 0x7f
   14d58:	mov	r1, #0
   14d5c:	str	r7, [sp]
   14d60:	add	ip, ip, #516	; 0x204
   14d64:	mov	r3, r1
   14d68:	mov	r0, r6
   14d6c:	mov	r2, #13
   14d70:	add	r4, ip, lr, lsl r4
   14d74:	str	r4, [sp, #12]
   14d78:	bl	13ed8 <__assert_fail@plt+0x2978>
   14d7c:	b	14a70 <__assert_fail@plt+0x3510>
   14d80:	mov	r0, r5
   14d84:	bl	149c4 <__assert_fail@plt+0x3464>
   14d88:	mov	r1, #1
   14d8c:	and	r3, r0, #15
   14d90:	and	r2, r0, #240	; 0xf0
   14d94:	add	r3, r3, #1
   14d98:	orr	r2, r3, r2, lsl #12
   14d9c:	b	14b90 <__assert_fail@plt+0x3630>
   14da0:	mov	r0, r5
   14da4:	bl	149c4 <__assert_fail@plt+0x3464>
   14da8:	mov	r1, #3
   14dac:	and	r3, r0, #15
   14db0:	and	r2, r0, #240	; 0xf0
   14db4:	add	r3, r3, #1
   14db8:	b	14d98 <__assert_fail@plt+0x3838>
   14dbc:	mov	r0, r5
   14dc0:	bl	149c4 <__assert_fail@plt+0x3464>
   14dc4:	subs	r2, r0, #0
   14dc8:	beq	14aec <__assert_fail@plt+0x358c>
   14dcc:	ands	r3, r2, #240	; 0xf0
   14dd0:	bne	14aec <__assert_fail@plt+0x358c>
   14dd4:	mov	r0, r6
   14dd8:	mov	r1, #4
   14ddc:	bl	14490 <__assert_fail@plt+0x2f30>
   14de0:	cmp	r0, #0
   14de4:	bne	14aec <__assert_fail@plt+0x358c>
   14de8:	b	14a70 <__assert_fail@plt+0x3510>
   14dec:	and	r2, r0, #15
   14df0:	mov	r1, #3
   14df4:	add	r2, r2, #1
   14df8:	mov	r3, r1
   14dfc:	orr	r2, r2, #655360	; 0xa0000
   14e00:	mov	r0, r6
   14e04:	bl	14490 <__assert_fail@plt+0x2f30>
   14e08:	cmp	r0, #0
   14e0c:	bne	14aec <__assert_fail@plt+0x358c>
   14e10:	b	14a70 <__assert_fail@plt+0x3510>
   14e14:	mov	r0, r5
   14e18:	bl	149c4 <__assert_fail@plt+0x3464>
   14e1c:	mov	r1, #1
   14e20:	and	r2, r0, #240	; 0xf0
   14e24:	and	r3, r0, #15
   14e28:	add	r2, r2, #16
   14e2c:	add	r3, r3, #1
   14e30:	mov	r0, r6
   14e34:	orr	r2, r3, r2, lsl #12
   14e38:	mov	r3, #5
   14e3c:	bl	14490 <__assert_fail@plt+0x2f30>
   14e40:	cmp	r0, #0
   14e44:	bne	14aec <__assert_fail@plt+0x358c>
   14e48:	b	14a70 <__assert_fail@plt+0x3510>
   14e4c:	ldr	r3, [r0, #76]	; 0x4c
   14e50:	mov	r0, r1
   14e54:	push	{lr}		; (str lr, [sp, #-4]!)
   14e58:	sub	sp, sp, #20
   14e5c:	ldr	r2, [r3, #4]
   14e60:	add	ip, r3, #8
   14e64:	mov	lr, #3
   14e68:	strb	lr, [sp, #12]
   14e6c:	ldrb	r3, [r3, #7]
   14e70:	add	r1, sp, #4
   14e74:	lsl	r2, r2, #8
   14e78:	stmib	sp, {r2, ip}
   14e7c:	strb	r3, [sp, #13]
   14e80:	bl	14a58 <__assert_fail@plt+0x34f8>
   14e84:	add	sp, sp, #20
   14e88:	pop	{pc}		; (ldr pc, [sp], #4)
   14e8c:	push	{r3, lr}
   14e90:	bl	14a54 <__assert_fail@plt+0x34f4>
   14e94:	ldr	r0, [r0, #72]	; 0x48
   14e98:	pop	{r3, pc}
   14e9c:	push	{r3, lr}
   14ea0:	bl	14a54 <__assert_fail@plt+0x34f4>
   14ea4:	ldr	r3, [r0, #76]	; 0x4c
   14ea8:	ldrb	r2, [r3, #7]
   14eac:	add	r0, r3, r2, lsl #2
   14eb0:	add	r0, r0, #8
   14eb4:	pop	{r3, pc}
   14eb8:	push	{r3, lr}
   14ebc:	bl	11548 <abort@plt>
   14ec0:	push	{r3, lr}
   14ec4:	bl	11548 <abort@plt>
   14ec8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14ecc:	mov	r7, r0
   14ed0:	ldr	r6, [pc, #76]	; 14f24 <__assert_fail@plt+0x39c4>
   14ed4:	mov	r8, r1
   14ed8:	ldr	r5, [pc, #72]	; 14f28 <__assert_fail@plt+0x39c8>
   14edc:	mov	r9, r2
   14ee0:	add	r6, pc, r6
   14ee4:	bl	11228 <_init@@Base>
   14ee8:	add	r5, pc, r5
   14eec:	rsb	r6, r5, r6
   14ef0:	asrs	r6, r6, #2
   14ef4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14ef8:	sub	r5, r5, #4
   14efc:	mov	r4, #0
   14f00:	add	r4, r4, #1
   14f04:	ldr	r3, [r5, #4]!
   14f08:	mov	r0, r7
   14f0c:	mov	r1, r8
   14f10:	mov	r2, r9
   14f14:	blx	r3
   14f18:	cmp	r4, r6
   14f1c:	bne	14f00 <__assert_fail@plt+0x39a0>
   14f20:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14f24:	andeq	r1, r1, r0, lsl r0
   14f28:	andeq	r1, r1, r4
   14f2c:	bx	lr

Disassembly of section .fini:

00014f30 <_fini@@Base>:
   14f30:	push	{r3, lr}
   14f34:	pop	{r3, pc}
