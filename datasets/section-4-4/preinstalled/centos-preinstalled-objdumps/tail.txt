
centos-preinstalled/tail:     file format elf32-littlearm


Disassembly of section .init:

000112e4 <.init>:
   112e4:	push	{r3, lr}
   112e8:	bl	14108 <__assert_fail@plt+0x2a80>
   112ec:	pop	{r3, pc}

Disassembly of section .plt:

000112f0 <fdopen@plt-0x14>:
   112f0:	push	{lr}		; (str lr, [sp, #-4]!)
   112f4:	ldr	lr, [pc, #4]	; 11300 <fdopen@plt-0x4>
   112f8:	add	lr, pc, lr
   112fc:	ldr	pc, [lr, #8]!
   11300:	andeq	ip, r1, r0, lsl #26

00011304 <fdopen@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #28, 20	; 0x1c000
   1130c:	ldr	pc, [ip, #3328]!	; 0xd00

00011310 <fstatfs64@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #28, 20	; 0x1c000
   11318:	ldr	pc, [ip, #3320]!	; 0xcf8

0001131c <calloc@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #28, 20	; 0x1c000
   11324:	ldr	pc, [ip, #3312]!	; 0xcf0

00011328 <fputs_unlocked@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #28, 20	; 0x1c000
   11330:	ldr	pc, [ip, #3304]!	; 0xce8

00011334 <raise@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #28, 20	; 0x1c000
   1133c:	ldr	pc, [ip, #3296]!	; 0xce0

00011340 <strcmp@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #28, 20	; 0x1c000
   11348:	ldr	pc, [ip, #3288]!	; 0xcd8

0001134c <strtol@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #28, 20	; 0x1c000
   11354:	ldr	pc, [ip, #3280]!	; 0xcd0

00011358 <read@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #28, 20	; 0x1c000
   11360:	ldr	pc, [ip, #3272]!	; 0xcc8

00011364 <fflush@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #28, 20	; 0x1c000
   1136c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011370 <free@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #28, 20	; 0x1c000
   11378:	ldr	pc, [ip, #3256]!	; 0xcb8

0001137c <nanosleep@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #28, 20	; 0x1c000
   11384:	ldr	pc, [ip, #3248]!	; 0xcb0

00011388 <_exit@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #28, 20	; 0x1c000
   11390:	ldr	pc, [ip, #3240]!	; 0xca8

00011394 <memcpy@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #28, 20	; 0x1c000
   1139c:	ldr	pc, [ip, #3232]!	; 0xca0

000113a0 <__strtoull_internal@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #28, 20	; 0x1c000
   113a8:	ldr	pc, [ip, #3224]!	; 0xc98

000113ac <mbsinit@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #28, 20	; 0x1c000
   113b4:	ldr	pc, [ip, #3216]!	; 0xc90

000113b8 <fwrite_unlocked@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #28, 20	; 0x1c000
   113c0:	ldr	pc, [ip, #3208]!	; 0xc88

000113c4 <memcmp@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #28, 20	; 0x1c000
   113cc:	ldr	pc, [ip, #3200]!	; 0xc80

000113d0 <select@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #28, 20	; 0x1c000
   113d8:	ldr	pc, [ip, #3192]!	; 0xc78

000113dc <dcgettext@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #28, 20	; 0x1c000
   113e4:	ldr	pc, [ip, #3184]!	; 0xc70

000113e8 <__stack_chk_fail@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #28, 20	; 0x1c000
   113f0:	ldr	pc, [ip, #3176]!	; 0xc68

000113f4 <realloc@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #28, 20	; 0x1c000
   113fc:	ldr	pc, [ip, #3168]!	; 0xc60

00011400 <__fdelt_chk@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #28, 20	; 0x1c000
   11408:	ldr	pc, [ip, #3160]!	; 0xc58

0001140c <textdomain@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #28, 20	; 0x1c000
   11414:	ldr	pc, [ip, #3152]!	; 0xc50

00011418 <fflush_unlocked@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #28, 20	; 0x1c000
   11420:	ldr	pc, [ip, #3144]!	; 0xc48

00011424 <iswprint@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #28, 20	; 0x1c000
   1142c:	ldr	pc, [ip, #3136]!	; 0xc40

00011430 <__fxstat64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #28, 20	; 0x1c000
   11438:	ldr	pc, [ip, #3128]!	; 0xc38

0001143c <fwrite@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #28, 20	; 0x1c000
   11444:	ldr	pc, [ip, #3120]!	; 0xc30

00011448 <lseek64@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #28, 20	; 0x1c000
   11450:	ldr	pc, [ip, #3112]!	; 0xc28

00011454 <__ctype_get_mb_cur_max@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #28, 20	; 0x1c000
   1145c:	ldr	pc, [ip, #3104]!	; 0xc20

00011460 <strcpy@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #28, 20	; 0x1c000
   11468:	ldr	pc, [ip, #3096]!	; 0xc18

0001146c <__fpending@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #28, 20	; 0x1c000
   11474:	ldr	pc, [ip, #3088]!	; 0xc10

00011478 <mbrtowc@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #28, 20	; 0x1c000
   11480:	ldr	pc, [ip, #3080]!	; 0xc08

00011484 <error@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #28, 20	; 0x1c000
   1148c:	ldr	pc, [ip, #3072]!	; 0xc00

00011490 <open64@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #28, 20	; 0x1c000
   11498:	ldr	pc, [ip, #3064]!	; 0xbf8

0001149c <getenv@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #28, 20	; 0x1c000
   114a4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114a8 <malloc@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #28, 20	; 0x1c000
   114b0:	ldr	pc, [ip, #3048]!	; 0xbe8

000114b4 <__libc_start_main@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #28, 20	; 0x1c000
   114bc:	ldr	pc, [ip, #3040]!	; 0xbe0

000114c0 <__freading@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #28, 20	; 0x1c000
   114c8:	ldr	pc, [ip, #3032]!	; 0xbd8

000114cc <__gmon_start__@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #28, 20	; 0x1c000
   114d4:	ldr	pc, [ip, #3024]!	; 0xbd0

000114d8 <getopt_long@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #28, 20	; 0x1c000
   114e0:	ldr	pc, [ip, #3016]!	; 0xbc8

000114e4 <kill@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #28, 20	; 0x1c000
   114ec:	ldr	pc, [ip, #3008]!	; 0xbc0

000114f0 <__ctype_b_loc@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #28, 20	; 0x1c000
   114f8:	ldr	pc, [ip, #3000]!	; 0xbb8

000114fc <exit@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #28, 20	; 0x1c000
   11504:	ldr	pc, [ip, #2992]!	; 0xbb0

00011508 <strtoul@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #28, 20	; 0x1c000
   11510:	ldr	pc, [ip, #2984]!	; 0xba8

00011514 <strlen@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #28, 20	; 0x1c000
   1151c:	ldr	pc, [ip, #2976]!	; 0xba0

00011520 <inotify_init@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #28, 20	; 0x1c000
   11528:	ldr	pc, [ip, #2968]!	; 0xb98

0001152c <strchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #28, 20	; 0x1c000
   11534:	ldr	pc, [ip, #2960]!	; 0xb90

00011538 <memrchr@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #28, 20	; 0x1c000
   11540:	ldr	pc, [ip, #2952]!	; 0xb88

00011544 <ungetc@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #28, 20	; 0x1c000
   1154c:	ldr	pc, [ip, #2944]!	; 0xb80

00011550 <fcntl@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #28, 20	; 0x1c000
   11558:	ldr	pc, [ip, #2936]!	; 0xb78

0001155c <inotify_add_watch@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #28, 20	; 0x1c000
   11564:	ldr	pc, [ip, #2928]!	; 0xb70

00011568 <__errno_location@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #28, 20	; 0x1c000
   11570:	ldr	pc, [ip, #2920]!	; 0xb68

00011574 <__cxa_atexit@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #28, 20	; 0x1c000
   1157c:	ldr	pc, [ip, #2912]!	; 0xb60

00011580 <memset@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #28, 20	; 0x1c000
   11588:	ldr	pc, [ip, #2904]!	; 0xb58

0001158c <fscanf@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #28, 20	; 0x1c000
   11594:	ldr	pc, [ip, #2896]!	; 0xb50

00011598 <__printf_chk@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #28, 20	; 0x1c000
   115a0:	ldr	pc, [ip, #2888]!	; 0xb48

000115a4 <fileno@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #28, 20	; 0x1c000
   115ac:	ldr	pc, [ip, #2880]!	; 0xb40

000115b0 <__fprintf_chk@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #28, 20	; 0x1c000
   115b8:	ldr	pc, [ip, #2872]!	; 0xb38

000115bc <memchr@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #28, 20	; 0x1c000
   115c4:	ldr	pc, [ip, #2864]!	; 0xb30

000115c8 <fclose@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #28, 20	; 0x1c000
   115d0:	ldr	pc, [ip, #2856]!	; 0xb28

000115d4 <fseeko64@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #28, 20	; 0x1c000
   115dc:	ldr	pc, [ip, #2848]!	; 0xb20

000115e0 <strtod_l@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #28, 20	; 0x1c000
   115e8:	ldr	pc, [ip, #2840]!	; 0xb18

000115ec <__uflow@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #28, 20	; 0x1c000
   115f4:	ldr	pc, [ip, #2832]!	; 0xb10

000115f8 <__overflow@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #28, 20	; 0x1c000
   11600:	ldr	pc, [ip, #2824]!	; 0xb08

00011604 <setlocale@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #28, 20	; 0x1c000
   1160c:	ldr	pc, [ip, #2816]!	; 0xb00

00011610 <strrchr@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #28, 20	; 0x1c000
   11618:	ldr	pc, [ip, #2808]!	; 0xaf8

0001161c <nl_langinfo@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #28, 20	; 0x1c000
   11624:	ldr	pc, [ip, #2800]!	; 0xaf0

00011628 <newlocale@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #28, 20	; 0x1c000
   11630:	ldr	pc, [ip, #2792]!	; 0xae8

00011634 <bindtextdomain@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #28, 20	; 0x1c000
   1163c:	ldr	pc, [ip, #2784]!	; 0xae0

00011640 <isatty@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #28, 20	; 0x1c000
   11648:	ldr	pc, [ip, #2776]!	; 0xad8

0001164c <inotify_rm_watch@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #28, 20	; 0x1c000
   11654:	ldr	pc, [ip, #2768]!	; 0xad0

00011658 <strncmp@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #28, 20	; 0x1c000
   11660:	ldr	pc, [ip, #2760]!	; 0xac8

00011664 <abort@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #28, 20	; 0x1c000
   1166c:	ldr	pc, [ip, #2752]!	; 0xac0

00011670 <close@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #28, 20	; 0x1c000
   11678:	ldr	pc, [ip, #2744]!	; 0xab8

0001167c <__lxstat64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #28, 20	; 0x1c000
   11684:	ldr	pc, [ip, #2736]!	; 0xab0

00011688 <__assert_fail@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #28, 20	; 0x1c000
   11690:	ldr	pc, [ip, #2728]!	; 0xaa8

Disassembly of section .text:

00011698 <c_strtod@@Base-0x4bd0>:
   11698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1169c:	vpush	{d8-d9}
   116a0:	mov	r5, r1
   116a4:	ldr	sl, [pc, #4032]	; 1266c <__assert_fail@plt+0xfe4>
   116a8:	sub	sp, sp, #372	; 0x174
   116ac:	ldr	r1, [pc, #4028]	; 12670 <__assert_fail@plt+0xfe8>
   116b0:	add	r7, sp, #368	; 0x170
   116b4:	add	sl, pc, sl
   116b8:	mvn	ip, #255	; 0xff
   116bc:	mov	r2, #10
   116c0:	mov	r3, #0
   116c4:	ldr	r1, [sl, r1]
   116c8:	mov	r4, r0
   116cc:	strd	r2, [r7, ip]
   116d0:	ldr	r0, [r5]
   116d4:	ldr	r3, [r1]
   116d8:	ldr	r6, [pc, #3988]	; 12674 <__assert_fail@plt+0xfec>
   116dc:	str	r3, [sp, #364]	; 0x16c
   116e0:	bl	17820 <close_stdout@@Base+0x1514>
   116e4:	ldr	r1, [pc, #3980]	; 12678 <__assert_fail@plt+0xff0>
   116e8:	mov	r0, #6
   116ec:	add	r6, pc, r6
   116f0:	add	r1, pc, r1
   116f4:	bl	11604 <setlocale@plt>
   116f8:	ldr	r1, [pc, #3964]	; 1267c <__assert_fail@plt+0xff4>
   116fc:	mov	r0, r6
   11700:	add	r1, pc, r1
   11704:	bl	11634 <bindtextdomain@plt>
   11708:	mov	r0, r6
   1170c:	bl	1140c <textdomain@plt>
   11710:	ldr	r3, [pc, #3944]	; 12680 <__assert_fail@plt+0xff8>
   11714:	ldr	r0, [sl, r3]
   11718:	bl	1bc00 <close_stdout@@Base+0x58f4>
   1171c:	ldr	r3, [pc, #3936]	; 12684 <__assert_fail@plt+0xffc>
   11720:	cmp	r4, #2
   11724:	mov	r2, #0
   11728:	add	r3, pc, r3
   1172c:	mov	r1, #1
   11730:	strb	r2, [r3, #3]
   11734:	strb	r1, [r3, #4]
   11738:	strb	r2, [r3]
   1173c:	strb	r2, [r3, #5]
   11740:	strb	r2, [r3, #6]
   11744:	beq	11a4c <__assert_fail@plt+0x3c4>
   11748:	cmp	r4, #3
   1174c:	beq	11c2c <__assert_fail@plt+0x5a4>
   11750:	cmp	r4, #4
   11754:	beq	11a24 <__assert_fail@plt+0x39c>
   11758:	mov	r3, #0
   1175c:	vmov.f64	d8, #112	; 0x3f800000  1.0
   11760:	ldr	r6, [pc, #3872]	; 12688 <__assert_fail@plt+0x1000>
   11764:	ldr	fp, [pc, #3872]	; 1268c <__assert_fail@plt+0x1004>
   11768:	rsb	r4, r3, r4
   1176c:	add	r6, pc, r6
   11770:	ldr	r7, [pc, #3864]	; 12690 <__assert_fail@plt+0x1008>
   11774:	add	fp, pc, fp
   11778:	add	r5, r5, r3, lsl #2
   1177c:	add	fp, fp, #8
   11780:	add	r6, r6, #12
   11784:	str	fp, [sp, #36]	; 0x24
   11788:	add	r7, pc, r7
   1178c:	ldr	fp, [pc, #3840]	; 12694 <__assert_fail@plt+0x100c>
   11790:	mov	r9, #0
   11794:	add	ip, r7, #8
   11798:	str	ip, [sp, #40]	; 0x28
   1179c:	add	fp, pc, fp
   117a0:	str	fp, [sp, #32]
   117a4:	ldr	r2, [pc, #3820]	; 12698 <__assert_fail@plt+0x1010>
   117a8:	mov	fp, #0
   117ac:	mov	r0, r4
   117b0:	str	fp, [sp]
   117b4:	mov	r1, r5
   117b8:	add	r2, pc, r2
   117bc:	mov	r3, r6
   117c0:	bl	114d8 <getopt_long@plt>
   117c4:	cmn	r0, #1
   117c8:	beq	11d50 <__assert_fail@plt+0x6c8>
   117cc:	cmp	r0, #113	; 0x71
   117d0:	beq	11cf0 <__assert_fail@plt+0x668>
   117d4:	ble	11820 <__assert_fail@plt+0x198>
   117d8:	movw	r3, #257	; 0x101
   117dc:	cmp	r0, r3
   117e0:	beq	11c94 <__assert_fail@plt+0x60c>
   117e4:	ble	1184c <__assert_fail@plt+0x1c4>
   117e8:	movw	r3, #259	; 0x103
   117ec:	cmp	r0, r3
   117f0:	beq	11c80 <__assert_fail@plt+0x5f8>
   117f4:	blt	119c4 <__assert_fail@plt+0x33c>
   117f8:	cmp	r0, #260	; 0x104
   117fc:	beq	11bc4 <__assert_fail@plt+0x53c>
   11800:	add	r3, r3, #2
   11804:	cmp	r0, r3
   11808:	bne	11864 <__assert_fail@plt+0x1dc>
   1180c:	ldr	r3, [pc, #3720]	; 1269c <__assert_fail@plt+0x1014>
   11810:	mov	r2, #1
   11814:	add	r3, pc, r3
   11818:	strb	r2, [r3, #2]
   1181c:	b	117a4 <__assert_fail@plt+0x11c>
   11820:	cmp	r0, #57	; 0x39
   11824:	bgt	1186c <__assert_fail@plt+0x1e4>
   11828:	cmp	r0, #48	; 0x30
   1182c:	mov	r8, r0
   11830:	bge	11c4c <__assert_fail@plt+0x5c4>
   11834:	cmn	r0, #3
   11838:	beq	118a4 <__assert_fail@plt+0x21c>
   1183c:	cmn	r0, #2
   11840:	bne	11864 <__assert_fail@plt+0x1dc>
   11844:	mov	r0, fp
   11848:	bl	15bec <__assert_fail@plt+0x4564>
   1184c:	cmp	r0, #118	; 0x76
   11850:	beq	11c78 <__assert_fail@plt+0x5f0>
   11854:	cmp	r0, #256	; 0x100
   11858:	beq	11a10 <__assert_fail@plt+0x388>
   1185c:	cmp	r0, #115	; 0x73
   11860:	beq	11b5c <__assert_fail@plt+0x4d4>
   11864:	mov	r0, #1
   11868:	bl	15bec <__assert_fail@plt+0x4564>
   1186c:	cmp	r0, #99	; 0x63
   11870:	beq	11918 <__assert_fail@plt+0x290>
   11874:	bgt	11908 <__assert_fail@plt+0x280>
   11878:	cmp	r0, #70	; 0x46
   1187c:	bne	11864 <__assert_fail@plt+0x1dc>
   11880:	ldr	r2, [pc, #3608]	; 126a0 <__assert_fail@plt+0x1018>
   11884:	mov	r3, #1
   11888:	ldr	r1, [pc, #3604]	; 126a4 <__assert_fail@plt+0x101c>
   1188c:	add	r2, pc, r2
   11890:	add	r1, pc, r1
   11894:	strb	r3, [r2, #6]
   11898:	strb	r3, [r2, #1]
   1189c:	str	r3, [r1, #4]
   118a0:	b	117a4 <__assert_fail@plt+0x11c>
   118a4:	ldr	r2, [pc, #3900]	; 127e8 <__assert_fail@plt+0x1160>
   118a8:	ldr	r3, [pc, #3576]	; 126a8 <__assert_fail@plt+0x1020>
   118ac:	ldr	r1, [pc, #3576]	; 126ac <__assert_fail@plt+0x1024>
   118b0:	ldr	r0, [sl, r2]
   118b4:	ldr	r3, [sl, r3]
   118b8:	add	r1, pc, r1
   118bc:	ldr	r2, [pc, #3564]	; 126b0 <__assert_fail@plt+0x1028>
   118c0:	ldr	r0, [r0]
   118c4:	ldr	r3, [r3]
   118c8:	add	r2, pc, r2
   118cc:	str	r1, [sp, #8]
   118d0:	str	r2, [sp, #12]
   118d4:	ldr	r4, [pc, #3544]	; 126b4 <__assert_fail@plt+0x102c>
   118d8:	ldr	lr, [pc, #3544]	; 126b8 <__assert_fail@plt+0x1030>
   118dc:	ldr	r1, [pc, #3544]	; 126bc <__assert_fail@plt+0x1034>
   118e0:	add	r4, pc, r4
   118e4:	ldr	r2, [pc, #3540]	; 126c0 <__assert_fail@plt+0x1038>
   118e8:	add	lr, pc, lr
   118ec:	str	fp, [sp, #16]
   118f0:	add	r1, pc, r1
   118f4:	stm	sp, {r4, lr}
   118f8:	add	r2, pc, r2
   118fc:	bl	195a8 <close_stdout@@Base+0x329c>
   11900:	mov	r0, fp
   11904:	bl	114fc <exit@plt>
   11908:	cmp	r0, #102	; 0x66
   1190c:	beq	11bc4 <__assert_fail@plt+0x53c>
   11910:	cmp	r0, #110	; 0x6e
   11914:	bne	11864 <__assert_fail@plt+0x1dc>
   11918:	subs	r3, r0, #110	; 0x6e
   1191c:	ldr	r2, [pc, #3488]	; 126c4 <__assert_fail@plt+0x103c>
   11920:	rsbs	fp, r3, #0
   11924:	adcs	fp, fp, r3
   11928:	ldr	r3, [pc, #3480]	; 126c8 <__assert_fail@plt+0x1040>
   1192c:	add	r2, pc, r2
   11930:	strb	fp, [r2, #4]
   11934:	ldr	r8, [sl, r3]
   11938:	ldr	r1, [r8]
   1193c:	ldrb	r3, [r1]
   11940:	cmp	r3, #43	; 0x2b
   11944:	moveq	r3, #1
   11948:	strbeq	r3, [r2, #5]
   1194c:	beq	1195c <__assert_fail@plt+0x2d4>
   11950:	cmp	r3, #45	; 0x2d
   11954:	addeq	r1, r1, #1
   11958:	streq	r1, [r8]
   1195c:	ldr	r0, [pc, #3432]	; 126cc <__assert_fail@plt+0x1044>
   11960:	mov	r1, #0
   11964:	mov	r2, #10
   11968:	add	r3, sp, #112	; 0x70
   1196c:	add	r0, pc, r0
   11970:	str	r0, [sp]
   11974:	ldr	r0, [r8]
   11978:	bl	19fb8 <close_stdout@@Base+0x3cac>
   1197c:	cmp	r0, #0
   11980:	beq	117a4 <__assert_fail@plt+0x11c>
   11984:	cmp	fp, #0
   11988:	ldr	r8, [r8]
   1198c:	bne	12c08 <__assert_fail@plt+0x1580>
   11990:	ldr	r1, [pc, #3384]	; 126d0 <__assert_fail@plt+0x1048>
   11994:	mov	r0, fp
   11998:	mov	r2, #5
   1199c:	add	r1, pc, r1
   119a0:	bl	113dc <dcgettext@plt>
   119a4:	ldr	r2, [pc, #3368]	; 126d4 <__assert_fail@plt+0x104c>
   119a8:	mov	r3, r8
   119ac:	str	r0, [sp]
   119b0:	mov	r1, #0
   119b4:	mov	r0, #1
   119b8:	add	r2, pc, r2
   119bc:	bl	11484 <error@plt>
   119c0:	b	117a4 <__assert_fail@plt+0x11c>
   119c4:	ldr	r0, [pc, #3324]	; 126c8 <__assert_fail@plt+0x1040>
   119c8:	mov	r1, fp
   119cc:	ldr	ip, [pc, #3332]	; 126d8 <__assert_fail@plt+0x1050>
   119d0:	mov	r2, #10
   119d4:	add	r3, sp, #128	; 0x80
   119d8:	ldr	r8, [sl, r0]
   119dc:	add	ip, pc, ip
   119e0:	str	ip, [sp]
   119e4:	ldr	r0, [r8]
   119e8:	bl	19a80 <close_stdout@@Base+0x3774>
   119ec:	cmp	r0, #0
   119f0:	bne	11d0c <__assert_fail@plt+0x684>
   119f4:	ldr	r3, [sp, #128]	; 0x80
   119f8:	cmp	r3, #0
   119fc:	blt	11d0c <__assert_fail@plt+0x684>
   11a00:	ldr	r2, [pc, #3284]	; 126dc <__assert_fail@plt+0x1054>
   11a04:	add	r2, pc, r2
   11a08:	str	r3, [r2, #8]
   11a0c:	b	117a4 <__assert_fail@plt+0x11c>
   11a10:	ldr	r3, [pc, #3272]	; 126e0 <__assert_fail@plt+0x1058>
   11a14:	mov	r2, #1
   11a18:	add	r3, pc, r3
   11a1c:	strb	r2, [r3, #1]
   11a20:	b	117a4 <__assert_fail@plt+0x11c>
   11a24:	ldr	r3, [r5, #8]
   11a28:	ldrb	r2, [r3]
   11a2c:	cmp	r2, #45	; 0x2d
   11a30:	bne	11758 <__assert_fail@plt+0xd0>
   11a34:	ldrb	r2, [r3, #1]
   11a38:	cmp	r2, #45	; 0x2d
   11a3c:	bne	11758 <__assert_fail@plt+0xd0>
   11a40:	ldrb	r3, [r3, #2]
   11a44:	cmp	r3, #0
   11a48:	bne	11758 <__assert_fail@plt+0xd0>
   11a4c:	bl	17788 <close_stdout@@Base+0x147c>
   11a50:	ldr	r3, [r5, #4]
   11a54:	movw	r6, #3503	; 0xdaf
   11a58:	movt	r6, #3
   11a5c:	add	lr, r3, #1
   11a60:	ldrb	r2, [r3]
   11a64:	cmp	r0, r6
   11a68:	movgt	r0, #0
   11a6c:	movle	r0, #1
   11a70:	cmp	r2, #43	; 0x2b
   11a74:	beq	11d3c <__assert_fail@plt+0x6b4>
   11a78:	cmp	r2, #45	; 0x2d
   11a7c:	bne	11758 <__assert_fail@plt+0xd0>
   11a80:	cmp	r0, #0
   11a84:	ldrb	r2, [r3, #1]
   11a88:	bne	11aa4 <__assert_fail@plt+0x41c>
   11a8c:	subs	r0, r2, #99	; 0x63
   11a90:	rsbs	r1, r0, #0
   11a94:	adcs	r1, r1, r0
   11a98:	ldrb	r1, [lr, r1]
   11a9c:	cmp	r1, #0
   11aa0:	beq	11758 <__assert_fail@plt+0xd0>
   11aa4:	mov	r6, #0
   11aa8:	sub	r1, r2, #48	; 0x30
   11aac:	cmp	r1, #9
   11ab0:	bhi	12ce8 <__assert_fail@plt+0x1660>
   11ab4:	add	r3, r3, #2
   11ab8:	mov	ip, r3
   11abc:	ldrb	r2, [r3], #1
   11ac0:	sub	r1, r2, #48	; 0x30
   11ac4:	cmp	r1, #9
   11ac8:	bls	11ab8 <__assert_fail@plt+0x430>
   11acc:	cmp	r2, #99	; 0x63
   11ad0:	beq	11f40 <__assert_fail@plt+0x8b8>
   11ad4:	cmp	r2, #108	; 0x6c
   11ad8:	beq	11f34 <__assert_fail@plt+0x8ac>
   11adc:	cmp	r2, #98	; 0x62
   11ae0:	movne	r3, ip
   11ae4:	movne	r7, #1
   11ae8:	movne	r2, #10
   11aec:	beq	11f24 <__assert_fail@plt+0x89c>
   11af0:	ldrb	r1, [r3]
   11af4:	cmp	r1, #102	; 0x66
   11af8:	addeq	r3, r3, #1
   11afc:	moveq	r8, #1
   11b00:	movne	r8, #0
   11b04:	ldrb	r9, [r3]
   11b08:	cmp	r9, #0
   11b0c:	bne	11758 <__assert_fail@plt+0xd0>
   11b10:	cmp	lr, ip
   11b14:	beq	11f5c <__assert_fail@plt+0x8d4>
   11b18:	ldr	ip, [pc, #3012]	; 126e4 <__assert_fail@plt+0x105c>
   11b1c:	mov	r0, lr
   11b20:	mov	r1, r9
   11b24:	mov	r2, #10
   11b28:	add	ip, pc, ip
   11b2c:	add	r3, sp, #112	; 0x70
   11b30:	str	ip, [sp]
   11b34:	bl	19fb8 <close_stdout@@Base+0x3cac>
   11b38:	bics	ip, r0, #2
   11b3c:	bne	12c64 <__assert_fail@plt+0x15dc>
   11b40:	ldr	r2, [pc, #2976]	; 126e8 <__assert_fail@plt+0x1060>
   11b44:	mov	r3, #1
   11b48:	add	r2, pc, r2
   11b4c:	strb	r6, [r2, #5]
   11b50:	strb	r7, [r2, #4]
   11b54:	strb	r8, [r2, #6]
   11b58:	b	1175c <__assert_fail@plt+0xd4>
   11b5c:	ldr	r3, [pc, #2916]	; 126c8 <__assert_fail@plt+0x1040>
   11b60:	mov	r1, fp
   11b64:	ldr	r0, [pc, #2944]	; 126ec <__assert_fail@plt+0x1064>
   11b68:	add	r2, sp, #128	; 0x80
   11b6c:	ldr	r8, [sl, r3]
   11b70:	ldr	r3, [sl, r0]
   11b74:	ldr	r0, [r8]
   11b78:	bl	199b0 <close_stdout@@Base+0x36a4>
   11b7c:	cmp	r0, #0
   11b80:	beq	11b94 <__assert_fail@plt+0x50c>
   11b84:	vldr	d8, [sp, #128]	; 0x80
   11b88:	vcmpe.f64	d8, #0.0
   11b8c:	vmrs	APSR_nzcv, fpscr
   11b90:	bge	117a4 <__assert_fail@plt+0x11c>
   11b94:	ldr	r1, [pc, #2900]	; 126f0 <__assert_fail@plt+0x1068>
   11b98:	mov	r2, #5
   11b9c:	mov	r0, #0
   11ba0:	add	r1, pc, r1
   11ba4:	bl	113dc <dcgettext@plt>
   11ba8:	ldr	r3, [r8]
   11bac:	mov	r1, #0
   11bb0:	mov	r2, r0
   11bb4:	mov	r0, #1
   11bb8:	bl	11484 <error@plt>
   11bbc:	vldr	d8, [sp, #128]	; 0x80
   11bc0:	b	117a4 <__assert_fail@plt+0x11c>
   11bc4:	ldr	r3, [pc, #2812]	; 126c8 <__assert_fail@plt+0x1040>
   11bc8:	mov	r2, #1
   11bcc:	ldr	ip, [sp, #32]
   11bd0:	strb	r2, [ip, #6]
   11bd4:	ldr	r3, [sl, r3]
   11bd8:	ldr	r1, [r3]
   11bdc:	cmp	r1, #0
   11be0:	beq	11cf8 <__assert_fail@plt+0x670>
   11be4:	ldr	r2, [pc, #2824]	; 126f4 <__assert_fail@plt+0x106c>
   11be8:	mov	r3, #4
   11bec:	str	r3, [sp]
   11bf0:	ldr	r0, [pc, #2816]	; 126f8 <__assert_fail@plt+0x1070>
   11bf4:	ldr	ip, [sl, r2]
   11bf8:	ldr	r2, [pc, #2812]	; 126fc <__assert_fail@plt+0x1074>
   11bfc:	add	r0, pc, r0
   11c00:	ldr	r3, [sp, #40]	; 0x28
   11c04:	ldr	ip, [ip]
   11c08:	add	r2, pc, r2
   11c0c:	str	ip, [sp, #4]
   11c10:	bl	161a8 <__assert_fail@plt+0x4b20>
   11c14:	ldr	r3, [pc, #2788]	; 12700 <__assert_fail@plt+0x1078>
   11c18:	add	r3, pc, r3
   11c1c:	add	r0, r7, r0, lsl #2
   11c20:	ldr	r2, [r0, #8]
   11c24:	str	r2, [r3, #4]
   11c28:	b	117a4 <__assert_fail@plt+0x11c>
   11c2c:	ldr	r3, [r5, #8]
   11c30:	ldrb	r2, [r3]
   11c34:	cmp	r2, #45	; 0x2d
   11c38:	bne	11a4c <__assert_fail@plt+0x3c4>
   11c3c:	ldrb	r2, [r3, #1]
   11c40:	cmp	r2, #0
   11c44:	bne	11a28 <__assert_fail@plt+0x3a0>
   11c48:	b	11a4c <__assert_fail@plt+0x3c4>
   11c4c:	ldr	r1, [pc, #2736]	; 12704 <__assert_fail@plt+0x107c>
   11c50:	mov	r0, fp
   11c54:	mov	r2, #5
   11c58:	add	r1, pc, r1
   11c5c:	bl	113dc <dcgettext@plt>
   11c60:	mov	r1, fp
   11c64:	mov	r3, r8
   11c68:	mov	r2, r0
   11c6c:	mov	r0, #1
   11c70:	bl	11484 <error@plt>
   11c74:	b	11864 <__assert_fail@plt+0x1dc>
   11c78:	mov	r9, #1
   11c7c:	b	117a4 <__assert_fail@plt+0x11c>
   11c80:	ldr	r3, [pc, #2688]	; 12708 <__assert_fail@plt+0x1080>
   11c84:	mov	r2, #1
   11c88:	add	r3, pc, r3
   11c8c:	strb	r2, [r3, #12]
   11c90:	b	117a4 <__assert_fail@plt+0x11c>
   11c94:	ldr	ip, [pc, #2604]	; 126c8 <__assert_fail@plt+0x1040>
   11c98:	mov	r1, fp
   11c9c:	ldr	r0, [pc, #2664]	; 1270c <__assert_fail@plt+0x1084>
   11ca0:	mov	r2, #10
   11ca4:	ldr	r3, [sp, #36]	; 0x24
   11ca8:	ldr	r8, [sl, ip]
   11cac:	add	r0, pc, r0
   11cb0:	str	r0, [sp]
   11cb4:	ldr	r0, [r8]
   11cb8:	bl	19fb8 <close_stdout@@Base+0x3cac>
   11cbc:	cmp	r0, #0
   11cc0:	beq	117a4 <__assert_fail@plt+0x11c>
   11cc4:	ldr	r1, [pc, #2628]	; 12710 <__assert_fail@plt+0x1088>
   11cc8:	mov	r0, fp
   11ccc:	mov	r2, #5
   11cd0:	add	r1, pc, r1
   11cd4:	bl	113dc <dcgettext@plt>
   11cd8:	mov	r1, fp
   11cdc:	ldr	r3, [r8]
   11ce0:	mov	r2, r0
   11ce4:	mov	r0, #1
   11ce8:	bl	11484 <error@plt>
   11cec:	b	117a4 <__assert_fail@plt+0x11c>
   11cf0:	mov	r9, #2
   11cf4:	b	117a4 <__assert_fail@plt+0x11c>
   11cf8:	ldr	r3, [pc, #2580]	; 12714 <__assert_fail@plt+0x108c>
   11cfc:	mov	r2, #2
   11d00:	add	r3, pc, r3
   11d04:	str	r2, [r3, #4]
   11d08:	b	117a4 <__assert_fail@plt+0x11c>
   11d0c:	ldr	r1, [pc, #2564]	; 12718 <__assert_fail@plt+0x1090>
   11d10:	mov	r2, #5
   11d14:	mov	r0, #0
   11d18:	add	r1, pc, r1
   11d1c:	bl	113dc <dcgettext@plt>
   11d20:	ldr	r3, [r8]
   11d24:	mov	r1, #0
   11d28:	mov	r2, r0
   11d2c:	mov	r0, #1
   11d30:	bl	11484 <error@plt>
   11d34:	ldr	r3, [sp, #128]	; 0x80
   11d38:	b	11a00 <__assert_fail@plt+0x378>
   11d3c:	cmp	r0, #0
   11d40:	movne	r6, #1
   11d44:	ldrbne	r2, [r3, #1]
   11d48:	bne	11aa8 <__assert_fail@plt+0x420>
   11d4c:	b	11758 <__assert_fail@plt+0xd0>
   11d50:	ldr	r3, [pc, #2500]	; 1271c <__assert_fail@plt+0x1094>
   11d54:	add	r3, pc, r3
   11d58:	ldrb	r2, [r3, #1]
   11d5c:	cmp	r2, fp
   11d60:	beq	11da8 <__assert_fail@plt+0x720>
   11d64:	ldrb	r6, [r3, #6]
   11d68:	cmp	r6, fp
   11d6c:	beq	12e34 <__assert_fail@plt+0x17ac>
   11d70:	ldr	r3, [pc, #2472]	; 12720 <__assert_fail@plt+0x1098>
   11d74:	add	r3, pc, r3
   11d78:	ldr	r3, [r3, #4]
   11d7c:	cmp	r3, #2
   11d80:	bne	11da8 <__assert_fail@plt+0x720>
   11d84:	ldr	r1, [pc, #2456]	; 12724 <__assert_fail@plt+0x109c>
   11d88:	mov	r2, #5
   11d8c:	mov	r0, fp
   11d90:	add	r1, pc, r1
   11d94:	bl	113dc <dcgettext@plt>
   11d98:	mov	r1, fp
   11d9c:	mov	r2, r0
   11da0:	mov	r0, fp
   11da4:	bl	11484 <error@plt>
   11da8:	ldr	r6, [pc, #2424]	; 12728 <__assert_fail@plt+0x10a0>
   11dac:	add	r6, pc, r6
   11db0:	ldr	r0, [r6, #8]
   11db4:	cmp	r0, #0
   11db8:	beq	11e14 <__assert_fail@plt+0x78c>
   11dbc:	ldrb	r7, [r6, #6]
   11dc0:	cmp	r7, #0
   11dc4:	beq	13788 <__assert_fail@plt+0x2100>
   11dc8:	mov	r1, #0
   11dcc:	bl	114e4 <kill@plt>
   11dd0:	cmp	r0, #0
   11dd4:	beq	11e14 <__assert_fail@plt+0x78c>
   11dd8:	bl	11568 <__errno_location@plt>
   11ddc:	ldr	r3, [r0]
   11de0:	cmp	r3, #38	; 0x26
   11de4:	bne	11e14 <__assert_fail@plt+0x78c>
   11de8:	ldr	r1, [pc, #2364]	; 1272c <__assert_fail@plt+0x10a4>
   11dec:	mov	r2, #5
   11df0:	mov	r0, #0
   11df4:	add	r1, pc, r1
   11df8:	bl	113dc <dcgettext@plt>
   11dfc:	mov	r2, r0
   11e00:	mov	r0, #0
   11e04:	mov	r1, r0
   11e08:	bl	11484 <error@plt>
   11e0c:	mov	r3, #0
   11e10:	str	r3, [r6, #8]
   11e14:	ldr	r3, [pc, #2324]	; 12730 <__assert_fail@plt+0x10a8>
   11e18:	add	r3, pc, r3
   11e1c:	ldrb	r3, [r3, #5]
   11e20:	cmp	r3, #0
   11e24:	beq	11e48 <__assert_fail@plt+0x7c0>
   11e28:	add	lr, sp, #368	; 0x170
   11e2c:	mvn	r1, #255	; 0xff
   11e30:	ldrd	r2, [lr, r1]
   11e34:	orrs	r0, r2, r3
   11e38:	beq	11e48 <__assert_fail@plt+0x7c0>
   11e3c:	subs	r2, r2, #1
   11e40:	sbc	r3, r3, #0
   11e44:	strd	r2, [lr, r1]
   11e48:	ldr	r3, [pc, #2276]	; 12734 <__assert_fail@plt+0x10ac>
   11e4c:	ldr	r3, [sl, r3]
   11e50:	ldr	r3, [r3]
   11e54:	cmp	r4, r3
   11e58:	bgt	11f4c <__assert_fail@plt+0x8c4>
   11e5c:	ldr	r5, [pc, #2260]	; 12738 <__assert_fail@plt+0x10b0>
   11e60:	mov	fp, #1
   11e64:	add	r5, pc, r5
   11e68:	mov	ip, #0
   11e6c:	sub	r1, r5, #4
   11e70:	mov	r3, ip
   11e74:	ldr	r2, [r1, #4]!
   11e78:	ldrb	r0, [r2]
   11e7c:	cmp	r0, #45	; 0x2d
   11e80:	bne	11e90 <__assert_fail@plt+0x808>
   11e84:	ldrb	r2, [r2, #1]
   11e88:	cmp	r2, #0
   11e8c:	moveq	ip, #1
   11e90:	add	r3, r3, #1
   11e94:	cmp	r3, fp
   11e98:	bcc	11e74 <__assert_fail@plt+0x7ec>
   11e9c:	cmp	ip, #0
   11ea0:	beq	11edc <__assert_fail@plt+0x854>
   11ea4:	ldr	r3, [pc, #2192]	; 1273c <__assert_fail@plt+0x10b4>
   11ea8:	add	r3, pc, r3
   11eac:	ldr	r4, [r3, #4]
   11eb0:	cmp	r4, #1
   11eb4:	beq	13898 <__assert_fail@plt+0x2210>
   11eb8:	ldr	r3, [pc, #2176]	; 12740 <__assert_fail@plt+0x10b8>
   11ebc:	add	r3, pc, r3
   11ec0:	ldrb	r3, [r3, #6]
   11ec4:	cmp	r3, #0
   11ec8:	beq	11edc <__assert_fail@plt+0x854>
   11ecc:	mov	r0, #0
   11ed0:	bl	11640 <isatty@plt>
   11ed4:	cmp	r0, #0
   11ed8:	bne	13974 <__assert_fail@plt+0x22ec>
   11edc:	add	r1, sp, #368	; 0x170
   11ee0:	mvn	r3, #255	; 0xff
   11ee4:	ldrd	r2, [r3, r1]
   11ee8:	orrs	r4, r2, r3
   11eec:	bne	11f10 <__assert_fail@plt+0x888>
   11ef0:	ldr	r3, [pc, #2124]	; 12744 <__assert_fail@plt+0x10bc>
   11ef4:	add	r3, pc, r3
   11ef8:	ldrb	r2, [r3, #6]
   11efc:	cmp	r2, #0
   11f00:	bne	11f10 <__assert_fail@plt+0x888>
   11f04:	ldrb	r3, [r3, #5]
   11f08:	cmp	r3, #0
   11f0c:	beq	13870 <__assert_fail@plt+0x21e8>
   11f10:	movw	r3, #13107	; 0x3333
   11f14:	movt	r3, #819	; 0x333
   11f18:	cmp	fp, r3
   11f1c:	bls	11f70 <__assert_fail@plt+0x8e8>
   11f20:	bl	198cc <close_stdout@@Base+0x35c0>
   11f24:	mov	r7, #0
   11f28:	mov	r2, #5120	; 0x1400
   11f2c:	add	r3, ip, #1
   11f30:	b	11af0 <__assert_fail@plt+0x468>
   11f34:	mov	r7, #1
   11f38:	mov	r2, #10
   11f3c:	b	11f2c <__assert_fail@plt+0x8a4>
   11f40:	mov	r7, #0
   11f44:	mov	r2, #10
   11f48:	b	11f2c <__assert_fail@plt+0x8a4>
   11f4c:	subs	fp, r4, r3
   11f50:	add	r5, r5, r3, lsl #2
   11f54:	bne	11e68 <__assert_fail@plt+0x7e0>
   11f58:	b	11edc <__assert_fail@plt+0x854>
   11f5c:	add	fp, sp, #368	; 0x170
   11f60:	mvn	r1, #255	; 0xff
   11f64:	asr	r3, r2, #31
   11f68:	strd	r2, [fp, r1]
   11f6c:	b	11b40 <__assert_fail@plt+0x4b8>
   11f70:	mov	r6, #80	; 0x50
   11f74:	mul	r4, r6, fp
   11f78:	mov	r0, r4
   11f7c:	bl	196b8 <close_stdout@@Base+0x33ac>
   11f80:	mov	ip, r6
   11f84:	mov	r3, #0
   11f88:	str	r0, [sp, #72]	; 0x48
   11f8c:	b	11fa0 <__assert_fail@plt+0x918>
   11f90:	mul	r2, ip, r3
   11f94:	ldr	r1, [r5, r3, lsl #2]
   11f98:	add	r3, r3, #1
   11f9c:	str	r1, [r0, r2]
   11fa0:	cmp	r3, fp
   11fa4:	bne	11f90 <__assert_fail@plt+0x908>
   11fa8:	cmp	r9, #1
   11fac:	beq	11fc0 <__assert_fail@plt+0x938>
   11fb0:	cmp	r9, #0
   11fb4:	bne	11fd0 <__assert_fail@plt+0x948>
   11fb8:	cmp	fp, #1
   11fbc:	bls	11fd0 <__assert_fail@plt+0x948>
   11fc0:	ldr	r3, [pc, #1920]	; 12748 <__assert_fail@plt+0x10c0>
   11fc4:	mov	r2, #1
   11fc8:	add	r3, pc, r3
   11fcc:	strb	r2, [r3]
   11fd0:	ldr	r5, [sp, #72]	; 0x48
   11fd4:	mov	r7, #1
   11fd8:	ldr	ip, [pc, #1900]	; 1274c <__assert_fail@plt+0x10c4>
   11fdc:	add	r4, r4, r5
   11fe0:	add	r6, r5, #46	; 0x2e
   11fe4:	add	ip, pc, ip
   11fe8:	str	r4, [sp, #80]	; 0x50
   11fec:	str	r6, [sp, #44]	; 0x2c
   11ff0:	str	r5, [sp, #36]	; 0x24
   11ff4:	str	r7, [sp, #56]	; 0x38
   11ff8:	str	ip, [sp, #84]	; 0x54
   11ffc:	ldr	r4, [pc, #1868]	; 12750 <__assert_fail@plt+0x10c8>
   12000:	ldr	r5, [pc, #1868]	; 12754 <__assert_fail@plt+0x10cc>
   12004:	ldr	r6, [pc, #1868]	; 12758 <__assert_fail@plt+0x10d0>
   12008:	add	r4, pc, r4
   1200c:	ldr	r7, [pc, #1864]	; 1275c <__assert_fail@plt+0x10d4>
   12010:	add	r5, pc, r5
   12014:	ldr	ip, [pc, #1860]	; 12760 <__assert_fail@plt+0x10d8>
   12018:	add	r6, pc, r6
   1201c:	add	r7, pc, r7
   12020:	str	r4, [sp, #60]	; 0x3c
   12024:	add	ip, pc, ip
   12028:	str	r5, [sp, #88]	; 0x58
   1202c:	str	r6, [sp, #100]	; 0x64
   12030:	str	r7, [sp, #104]	; 0x68
   12034:	str	ip, [sp, #108]	; 0x6c
   12038:	str	fp, [sp, #92]	; 0x5c
   1203c:	str	sl, [sp, #96]	; 0x60
   12040:	b	12148 <__assert_fail@plt+0xac0>
   12044:	mov	r1, #0
   12048:	bl	16584 <close_stdout@@Base+0x278>
   1204c:	ldr	r3, [pc, #1808]	; 12764 <__assert_fail@plt+0x10dc>
   12050:	add	r3, pc, r3
   12054:	ldrb	r3, [r3, #1]
   12058:	cmp	r3, #0
   1205c:	str	r0, [sp, #32]
   12060:	bne	12340 <__assert_fail@plt+0xcb8>
   12064:	ldr	sl, [sp, #32]
   12068:	mov	r2, #1
   1206c:	ldr	fp, [sp, #36]	; 0x24
   12070:	cmn	sl, #1
   12074:	strb	r2, [fp, #46]	; 0x2e
   12078:	bne	139c8 <__assert_fail@plt+0x2340>
   1207c:	ldr	r3, [pc, #1764]	; 12768 <__assert_fail@plt+0x10e0>
   12080:	add	r3, pc, r3
   12084:	ldrb	r3, [r3, #6]
   12088:	cmp	r3, #0
   1208c:	beq	120c4 <__assert_fail@plt+0xa3c>
   12090:	ldr	ip, [sp, #36]	; 0x24
   12094:	mvn	r3, #0
   12098:	str	r3, [ip, #48]	; 0x30
   1209c:	bl	11568 <__errno_location@plt>
   120a0:	ldr	r4, [sp, #36]	; 0x24
   120a4:	mov	r2, #0
   120a8:	mov	r3, #0
   120ac:	mov	r1, #0
   120b0:	ldr	r0, [r0]
   120b4:	strb	r1, [r4, #44]	; 0x2c
   120b8:	strd	r2, [r4, #32]
   120bc:	str	r0, [r4, #52]	; 0x34
   120c0:	strd	r2, [r4, #24]
   120c4:	bl	11568 <__errno_location@plt>
   120c8:	ldr	r1, [pc, #1692]	; 1276c <__assert_fail@plt+0x10e4>
   120cc:	mov	r2, #5
   120d0:	add	r1, pc, r1
   120d4:	ldr	r5, [r0]
   120d8:	mov	r0, #0
   120dc:	bl	113dc <dcgettext@plt>
   120e0:	ldr	r6, [sp, #44]	; 0x2c
   120e4:	mov	r4, r0
   120e8:	ldr	r0, [r6, #-46]	; 0xffffffd2
   120ec:	ldrb	r3, [r0]
   120f0:	cmp	r3, #45	; 0x2d
   120f4:	bne	12108 <__assert_fail@plt+0xa80>
   120f8:	ldrb	r3, [r0, #1]
   120fc:	cmp	r3, #0
   12100:	bne	12108 <__assert_fail@plt+0xa80>
   12104:	bl	14294 <__assert_fail@plt+0x2c0c>
   12108:	bl	19070 <close_stdout@@Base+0x2d64>
   1210c:	mov	r6, #0
   12110:	mov	r1, r5
   12114:	mov	r2, r4
   12118:	mov	r3, r0
   1211c:	mov	r0, r6
   12120:	bl	11484 <error@plt>
   12124:	ldr	r7, [sp, #56]	; 0x38
   12128:	ldr	sl, [sp, #36]	; 0x24
   1212c:	ldr	fp, [sp, #44]	; 0x2c
   12130:	and	r7, r6, r7
   12134:	add	sl, sl, #80	; 0x50
   12138:	str	r7, [sp, #56]	; 0x38
   1213c:	add	fp, fp, #80	; 0x50
   12140:	str	sl, [sp, #36]	; 0x24
   12144:	str	fp, [sp, #44]	; 0x2c
   12148:	ldr	ip, [sp, #36]	; 0x24
   1214c:	ldr	r4, [sp, #80]	; 0x50
   12150:	cmp	ip, r4
   12154:	beq	12bc8 <__assert_fail@plt+0x1540>
   12158:	ldr	r4, [sp, #44]	; 0x2c
   1215c:	add	r7, sp, #368	; 0x170
   12160:	mvn	r3, #255	; 0xff
   12164:	ldrd	r6, [r7, r3]
   12168:	ldr	r0, [r4, #-46]	; 0xffffffd2
   1216c:	strd	r6, [sp, #48]	; 0x30
   12170:	ldrb	r3, [r0]
   12174:	cmp	r3, #45	; 0x2d
   12178:	bne	12044 <__assert_fail@plt+0x9bc>
   1217c:	ldrb	ip, [r0, #1]
   12180:	cmp	ip, #0
   12184:	bne	12044 <__assert_fail@plt+0x9bc>
   12188:	ldr	r2, [pc, #1504]	; 12770 <__assert_fail@plt+0x10e8>
   1218c:	mov	r3, #1
   12190:	add	r2, pc, r2
   12194:	ldrb	r1, [r2, #1]
   12198:	strb	r3, [r2, #3]
   1219c:	cmp	r1, #0
   121a0:	bne	12360 <__assert_fail@plt+0xcd8>
   121a4:	ldr	r4, [sp, #36]	; 0x24
   121a8:	str	r3, [sp, #64]	; 0x40
   121ac:	str	r1, [sp, #32]
   121b0:	strb	r3, [r4, #46]	; 0x2e
   121b4:	ldr	r7, [sp, #84]	; 0x54
   121b8:	ldrb	r3, [r7]
   121bc:	cmp	r3, #0
   121c0:	beq	121ec <__assert_fail@plt+0xb64>
   121c4:	ldr	sl, [sp, #44]	; 0x2c
   121c8:	ldr	r0, [sl, #-46]	; 0xffffffd2
   121cc:	ldrb	r3, [r0]
   121d0:	cmp	r3, #45	; 0x2d
   121d4:	bne	121e8 <__assert_fail@plt+0xb60>
   121d8:	ldrb	r3, [r0, #1]
   121dc:	cmp	r3, #0
   121e0:	bne	121e8 <__assert_fail@plt+0xb60>
   121e4:	bl	14294 <__assert_fail@plt+0x2c0c>
   121e8:	bl	1422c <__assert_fail@plt+0x2ba4>
   121ec:	ldr	fp, [sp, #44]	; 0x2c
   121f0:	ldr	r3, [fp, #-46]	; 0xffffffd2
   121f4:	ldrb	r2, [r3]
   121f8:	cmp	r2, #45	; 0x2d
   121fc:	bne	12338 <__assert_fail@plt+0xcb0>
   12200:	ldrb	r2, [r3, #1]
   12204:	cmp	r2, #0
   12208:	bne	12338 <__assert_fail@plt+0xcb0>
   1220c:	bl	14294 <__assert_fail@plt+0x2c0c>
   12210:	str	r0, [sp, #76]	; 0x4c
   12214:	ldr	ip, [sp, #60]	; 0x3c
   12218:	mov	r5, #0
   1221c:	mov	r4, r5
   12220:	str	r5, [sp, #120]	; 0x78
   12224:	str	r5, [sp, #124]	; 0x7c
   12228:	ldrb	r7, [ip, #4]
   1222c:	cmp	r7, r5
   12230:	bne	1236c <__assert_fail@plt+0xce4>
   12234:	add	sl, sp, #128	; 0x80
   12238:	mov	r0, #3
   1223c:	ldr	r1, [sp, #32]
   12240:	mov	r2, sl
   12244:	str	sl, [sp, #68]	; 0x44
   12248:	bl	11430 <__fxstat64@plt>
   1224c:	cmp	r0, #0
   12250:	bne	12c20 <__assert_fail@plt+0x1598>
   12254:	ldr	fp, [sp, #60]	; 0x3c
   12258:	ldrb	r3, [fp, #5]
   1225c:	cmp	r3, #0
   12260:	beq	1260c <__assert_fail@plt+0xf84>
   12264:	ldrb	r3, [fp, #12]
   12268:	cmp	r3, #0
   1226c:	bne	12280 <__assert_fail@plt+0xbf8>
   12270:	ldr	r3, [sp, #144]	; 0x90
   12274:	and	r3, r3, #61440	; 0xf000
   12278:	cmp	r3, #32768	; 0x8000
   1227c:	beq	12d40 <__assert_fail@plt+0x16b8>
   12280:	add	r1, sp, #120	; 0x78
   12284:	ldrd	r2, [sp, #48]	; 0x30
   12288:	str	r1, [sp]
   1228c:	ldr	r0, [sp, #76]	; 0x4c
   12290:	ldr	r1, [sp, #32]
   12294:	bl	14640 <__assert_fail@plt+0x2fb8>
   12298:	cmp	r0, #0
   1229c:	ldrdeq	r4, [sp, #120]	; 0x78
   122a0:	bne	12bc0 <__assert_fail@plt+0x1538>
   122a4:	ldr	r0, [sp, #76]	; 0x4c
   122a8:	mvn	r2, #0
   122ac:	ldr	r1, [sp, #32]
   122b0:	mvn	r3, #0
   122b4:	bl	144cc <__assert_fail@plt+0x2e44>
   122b8:	mov	r6, #1
   122bc:	adds	r0, r0, r4
   122c0:	adc	r1, r1, r5
   122c4:	strd	r0, [sp, #120]	; 0x78
   122c8:	ldr	fp, [sp, #88]	; 0x58
   122cc:	ldrb	r3, [fp, #6]
   122d0:	cmp	r3, #0
   122d4:	bne	12524 <__assert_fail@plt+0xe9c>
   122d8:	ldr	ip, [sp, #64]	; 0x40
   122dc:	cmp	ip, #0
   122e0:	bne	12124 <__assert_fail@plt+0xa9c>
   122e4:	ldr	r0, [sp, #32]
   122e8:	bl	11670 <close@plt>
   122ec:	cmp	r0, #0
   122f0:	beq	12124 <__assert_fail@plt+0xa9c>
   122f4:	bl	11568 <__errno_location@plt>
   122f8:	mov	r2, #5
   122fc:	ldr	r1, [sp, #100]	; 0x64
   12300:	ldr	r5, [r0]
   12304:	ldr	r0, [sp, #64]	; 0x40
   12308:	bl	113dc <dcgettext@plt>
   1230c:	ldr	r6, [sp, #44]	; 0x2c
   12310:	ldr	r3, [r6, #-46]	; 0xffffffd2
   12314:	ldrb	r2, [r3]
   12318:	cmp	r2, #45	; 0x2d
   1231c:	mov	r4, r0
   12320:	bne	12330 <__assert_fail@plt+0xca8>
   12324:	ldrb	r2, [r3, #1]
   12328:	cmp	r2, #0
   1232c:	beq	12104 <__assert_fail@plt+0xa7c>
   12330:	mov	r0, r3
   12334:	b	12108 <__assert_fail@plt+0xa80>
   12338:	str	r3, [sp, #76]	; 0x4c
   1233c:	b	12214 <__assert_fail@plt+0xb8c>
   12340:	cmn	r0, #1
   12344:	movne	sl, #0
   12348:	strne	sl, [sp, #64]	; 0x40
   1234c:	beq	12b68 <__assert_fail@plt+0x14e0>
   12350:	ldr	fp, [sp, #36]	; 0x24
   12354:	mov	r3, #1
   12358:	strb	r3, [fp, #46]	; 0x2e
   1235c:	b	121b4 <__assert_fail@plt+0xb2c>
   12360:	str	r3, [sp, #64]	; 0x40
   12364:	str	ip, [sp, #32]
   12368:	b	12350 <__assert_fail@plt+0xcc8>
   1236c:	add	r6, sp, #128	; 0x80
   12370:	mov	r0, #3
   12374:	ldr	r1, [sp, #32]
   12378:	mov	r2, r6
   1237c:	str	r6, [sp, #68]	; 0x44
   12380:	bl	11430 <__fxstat64@plt>
   12384:	cmp	r0, r5
   12388:	bne	12cf0 <__assert_fail@plt+0x1668>
   1238c:	ldr	r7, [sp, #60]	; 0x3c
   12390:	ldrb	r3, [r7, #5]
   12394:	cmp	r3, #0
   12398:	bne	12c9c <__assert_fail@plt+0x1614>
   1239c:	ldr	sl, [sp, #60]	; 0x3c
   123a0:	ldrb	r6, [sl, #12]
   123a4:	cmp	r6, #0
   123a8:	bne	123bc <__assert_fail@plt+0xd34>
   123ac:	ldr	r3, [sp, #144]	; 0x90
   123b0:	and	r3, r3, #61440	; 0xf000
   123b4:	cmp	r3, #32768	; 0x8000
   123b8:	beq	138d4 <__assert_fail@plt+0x224c>
   123bc:	movw	r0, #8204	; 0x200c
   123c0:	movw	r5, #8196	; 0x2004
   123c4:	bl	196b8 <close_stdout@@Base+0x33ac>
   123c8:	mov	r2, #8192	; 0x2000
   123cc:	movw	r3, #8200	; 0x2008
   123d0:	mov	r4, #0
   123d4:	str	r4, [sp, #40]	; 0x28
   123d8:	str	r4, [r0, r2]
   123dc:	mov	sl, r0
   123e0:	str	r4, [r0, r5]
   123e4:	mov	r9, sl
   123e8:	str	r4, [r0, r3]
   123ec:	movw	r0, #8204	; 0x200c
   123f0:	bl	196b8 <close_stdout@@Base+0x33ac>
   123f4:	mov	r4, r0
   123f8:	ldr	r0, [sp, #32]
   123fc:	mov	r1, r4
   12400:	mov	r2, #8192	; 0x2000
   12404:	bl	1907c <close_stdout@@Base+0x2d70>
   12408:	sub	r3, r0, #1
   1240c:	mov	r8, r0
   12410:	cmn	r3, #3
   12414:	bhi	1296c <__assert_fail@plt+0x12e4>
   12418:	mov	r3, #8192	; 0x2000
   1241c:	movw	lr, #8200	; 0x2008
   12420:	str	r0, [r4, r3]
   12424:	mov	fp, #0
   12428:	ldrd	r2, [sp, #120]	; 0x78
   1242c:	add	r7, r4, r0
   12430:	mov	r0, r4
   12434:	adds	r2, r2, r8
   12438:	adc	r3, r3, #0
   1243c:	strd	r2, [sp, #120]	; 0x78
   12440:	str	fp, [r4, r5]
   12444:	str	fp, [r4, lr]
   12448:	b	12454 <__assert_fail@plt+0xdcc>
   1244c:	add	r0, r0, #1
   12450:	str	fp, [r4, r5]
   12454:	mov	r1, #10
   12458:	rsb	r2, r0, r7
   1245c:	bl	115bc <memchr@plt>
   12460:	mov	r6, fp
   12464:	add	fp, fp, #1
   12468:	cmp	r0, #0
   1246c:	bne	1244c <__assert_fail@plt+0xdc4>
   12470:	mov	r7, #8192	; 0x2000
   12474:	ldr	r3, [sp, #40]	; 0x28
   12478:	ldr	r0, [sl, r7]
   1247c:	add	r3, r3, r6
   12480:	str	r3, [sp, #40]	; 0x28
   12484:	add	r3, r8, r0
   12488:	movw	r6, #8191	; 0x1fff
   1248c:	cmp	r3, r6
   12490:	bls	124dc <__assert_fail@plt+0xe54>
   12494:	movw	r7, #8200	; 0x2008
   12498:	mov	r3, #0
   1249c:	str	r4, [sl, r7]
   124a0:	ldr	sl, [sp, #40]	; 0x28
   124a4:	ldr	r1, [r9, r5]
   124a8:	ldrd	r6, [sp, #48]	; 0x30
   124ac:	rsb	r1, r1, sl
   124b0:	mov	r2, r1
   124b4:	cmp	r7, r3
   124b8:	cmpeq	r6, r2
   124bc:	bcs	12518 <__assert_fail@plt+0xe90>
   124c0:	movw	r7, #8200	; 0x2008
   124c4:	mov	r0, r9
   124c8:	ldr	r9, [r9, r7]
   124cc:	str	r1, [sp, #40]	; 0x28
   124d0:	mov	sl, r4
   124d4:	mov	r4, r0
   124d8:	b	123f8 <__assert_fail@plt+0xd70>
   124dc:	mov	r1, r4
   124e0:	mov	r2, r8
   124e4:	add	r0, sl, r0
   124e8:	bl	11394 <memcpy@plt>
   124ec:	ldr	r1, [r4, r7]
   124f0:	ldr	r2, [sl, r7]
   124f4:	mov	r0, r4
   124f8:	ldr	r3, [sl, r5]
   124fc:	add	r2, r1, r2
   12500:	str	r2, [sl, r7]
   12504:	ldr	r2, [r4, r5]
   12508:	mov	r4, sl
   1250c:	add	r3, r2, r3
   12510:	str	r3, [sl, r5]
   12514:	b	124d0 <__assert_fail@plt+0xe48>
   12518:	movw	r0, #8204	; 0x200c
   1251c:	bl	196b8 <close_stdout@@Base+0x33ac>
   12520:	b	124d0 <__assert_fail@plt+0xe48>
   12524:	ldr	ip, [sp, #36]	; 0x24
   12528:	sub	r3, r6, #1
   1252c:	ldr	r2, [sp, #68]	; 0x44
   12530:	mov	r0, #3
   12534:	ldr	r1, [sp, #32]
   12538:	str	r3, [ip, #52]	; 0x34
   1253c:	bl	11430 <__fxstat64@plt>
   12540:	cmp	r0, #0
   12544:	blt	136c4 <__assert_fail@plt+0x203c>
   12548:	ldr	r0, [sp, #144]	; 0x90
   1254c:	and	r3, r0, #61440	; 0xf000
   12550:	and	r2, r0, #45056	; 0xb000
   12554:	cmp	r2, #32768	; 0x8000
   12558:	cmpne	r3, #4096	; 0x1000
   1255c:	beq	12ac4 <__assert_fail@plt+0x143c>
   12560:	cmp	r3, #8192	; 0x2000
   12564:	beq	12ac4 <__assert_fail@plt+0x143c>
   12568:	mov	r2, #5
   1256c:	mov	r0, #0
   12570:	ldr	r1, [sp, #104]	; 0x68
   12574:	bl	113dc <dcgettext@plt>
   12578:	ldr	r7, [sp, #44]	; 0x2c
   1257c:	ldr	r3, [r7, #-46]	; 0xffffffd2
   12580:	ldrb	r2, [r3]
   12584:	cmp	r2, #45	; 0x2d
   12588:	mov	r4, r0
   1258c:	bne	125a4 <__assert_fail@plt+0xf1c>
   12590:	ldrb	r2, [r3, #1]
   12594:	cmp	r2, #0
   12598:	bne	125a4 <__assert_fail@plt+0xf1c>
   1259c:	bl	14294 <__assert_fail@plt+0x2c0c>
   125a0:	mov	r3, r0
   125a4:	mov	r0, #0
   125a8:	mov	r2, r4
   125ac:	mov	r1, r0
   125b0:	bl	11484 <error@plt>
   125b4:	ldr	sl, [sp, #36]	; 0x24
   125b8:	mvn	r2, #0
   125bc:	mov	r3, #1
   125c0:	str	r2, [sl, #52]	; 0x34
   125c4:	strb	r3, [sl, #44]	; 0x2c
   125c8:	ldr	fp, [sp, #44]	; 0x2c
   125cc:	ldr	r1, [fp, #-46]	; 0xffffffd2
   125d0:	ldrb	r3, [r1]
   125d4:	cmp	r3, #45	; 0x2d
   125d8:	bne	125f0 <__assert_fail@plt+0xf68>
   125dc:	ldrb	r3, [r1, #1]
   125e0:	cmp	r3, #0
   125e4:	bne	125f0 <__assert_fail@plt+0xf68>
   125e8:	bl	14294 <__assert_fail@plt+0x2c0c>
   125ec:	mov	r1, r0
   125f0:	ldr	r0, [sp, #32]
   125f4:	mov	r6, #0
   125f8:	bl	142ac <__assert_fail@plt+0x2c24>
   125fc:	ldr	ip, [sp, #36]	; 0x24
   12600:	mvn	r3, #0
   12604:	str	r3, [ip, #48]	; 0x30
   12608:	b	12124 <__assert_fail@plt+0xa9c>
   1260c:	ldr	fp, [sp, #60]	; 0x3c
   12610:	ldrb	r3, [fp, #12]
   12614:	cmp	r3, #0
   12618:	bne	1262c <__assert_fail@plt+0xfa4>
   1261c:	ldr	r3, [sp, #144]	; 0x90
   12620:	and	r3, r3, #61440	; 0xf000
   12624:	cmp	r3, #32768	; 0x8000
   12628:	beq	12d84 <__assert_fail@plt+0x16fc>
   1262c:	movw	r0, #8200	; 0x2008
   12630:	movw	r7, #8196	; 0x2004
   12634:	bl	196b8 <close_stdout@@Base+0x33ac>
   12638:	mov	r3, #8192	; 0x2000
   1263c:	mov	r4, #0
   12640:	movw	r8, #8191	; 0x1fff
   12644:	mov	r6, r4
   12648:	mov	r9, r6
   1264c:	str	r4, [r0, r3]
   12650:	mov	fp, r0
   12654:	str	r4, [r0, r7]
   12658:	movw	r0, #8200	; 0x2008
   1265c:	bl	196b8 <close_stdout@@Base+0x33ac>
   12660:	mov	r5, fp
   12664:	mov	r4, r0
   12668:	b	12840 <__assert_fail@plt+0x11b8>
   1266c:	andeq	ip, r1, r4, asr #18
   12670:	andeq	r0, r0, r0, asr #2
   12674:			; <UNDEFINED> instruction: 0x0000b2b0
   12678:	andeq	fp, r0, ip, ror #6
   1267c:	andeq	fp, r0, r4, ror #6
   12680:	andeq	r0, r0, r4, asr r1
   12684:			; <UNDEFINED> instruction: 0x0001cabc
   12688:	andeq	ip, r1, r4, ror r6
   1268c:	andeq	ip, r1, ip, lsl #20
   12690:	andeq	sl, r0, ip, lsr #9
   12694:	andeq	ip, r1, r8, asr #20
   12698:	andeq	fp, r0, r0, lsl r4
   1269c:	ldrdeq	ip, [r1], -r0
   126a0:	andeq	ip, r1, r8, asr r9
   126a4:	strdeq	ip, [r1], -r0
   126a8:	andeq	r0, r0, r8, asr #2
   126ac:	andeq	fp, r0, r4, asr #5
   126b0:	andeq	fp, r0, r8, asr #5
   126b4:	andeq	fp, r0, r0, lsl #5
   126b8:	andeq	fp, r0, r4, lsl #5
   126bc:	andeq	fp, r0, r8, ror #4
   126c0:	andeq	fp, r0, r0, lsr #1
   126c4:			; <UNDEFINED> instruction: 0x0001c8b8
   126c8:	andeq	r0, r0, ip, ror r1
   126cc:	andeq	fp, r0, ip, lsr #2
   126d0:	andeq	fp, r0, r4, lsr #2
   126d4:	andeq	fp, r0, r0, lsr #2
   126d8:	andeq	fp, r0, r0, lsl #1
   126dc:	andeq	ip, r1, r0, ror #15
   126e0:	andeq	ip, r1, ip, asr #15
   126e4:	andeq	sl, r0, r0, asr pc
   126e8:	muleq	r1, ip, r6
   126ec:	andeq	r0, r0, r4, ror r1
   126f0:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   126f4:	andeq	r0, r0, r0, asr r1
   126f8:	andeq	sl, r0, r4, ror #29
   126fc:	ldrdeq	ip, [r1], -r8
   12700:	andeq	ip, r1, r8, ror #10
   12704:	andeq	sl, r0, r8, asr #30
   12708:	andeq	ip, r1, ip, asr r5
   1270c:			; <UNDEFINED> instruction: 0x0000adb0
   12710:	andeq	sl, r0, ip, lsl lr
   12714:	andeq	ip, r1, r0, lsl #9
   12718:	andeq	sl, r0, r0, lsl lr
   1271c:	muleq	r1, r0, r4
   12720:	andeq	ip, r1, ip, lsl #8
   12724:	muleq	r0, r0, lr
   12728:	andeq	ip, r1, r8, lsr r4
   1272c:	andeq	sl, r0, r4, lsr #29
   12730:	andeq	ip, r1, ip, asr #7
   12734:	andeq	r0, r0, r4, asr #2
   12738:	andeq	ip, r1, ip, lsr #6
   1273c:	ldrdeq	ip, [r1], -r8
   12740:	andeq	ip, r1, r8, lsr #6
   12744:	strdeq	ip, [r1], -r0
   12748:	andeq	ip, r1, ip, lsl r2
   1274c:	andeq	ip, r1, r0, lsl #4
   12750:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12754:	ldrdeq	ip, [r1], -r4
   12758:	andeq	r9, r0, r8, ror ip
   1275c:	andeq	sl, r0, r0, asr #26
   12760:	andeq	r9, r0, ip, ror #24
   12764:	muleq	r1, r4, r1
   12768:	andeq	ip, r1, r4, ror #2
   1276c:	andeq	sl, r0, ip, asr ip
   12770:	andeq	ip, r1, r4, asr r0
   12774:	andeq	r9, r0, r4, lsl #3
   12778:	andeq	sl, r0, r4, lsr #5
   1277c:			; <UNDEFINED> instruction: 0x000092bc
   12780:	andeq	fp, r1, r4, lsl r6
   12784:	strdeq	fp, [r1], -ip
   12788:	muleq	r0, r4, lr
   1278c:	andeq	sl, r0, r8, lsl r1
   12790:	andeq	r9, r0, ip, lsl #28
   12794:	andeq	sl, r0, r8, asr #32
   12798:	muleq	r0, ip, sp
   1279c:	andeq	fp, r1, r0, lsl r3
   127a0:	strdeq	fp, [r1], -r0
   127a4:	andeq	fp, r1, ip, ror #4
   127a8:	andeq	fp, r1, r0, lsr #5
   127ac:	andeq	r8, r0, ip, asr #27
   127b0:	andeq	fp, r1, ip, lsr #4
   127b4:	andeq	r9, r0, ip, asr fp
   127b8:	andeq	r9, r0, r8, ror #29
   127bc:	ldrdeq	sl, [r1], -r0
   127c0:	muleq	r0, r0, sl
   127c4:	andeq	r0, r0, ip, asr #31
   127c8:	ldrdeq	r0, [r0], -ip
   127cc:	muleq	r0, r0, fp
   127d0:	andeq	sl, r1, r0, lsr #30
   127d4:	andeq	r9, r0, r8, asr fp
   127d8:	andeq	r9, r0, ip, ror #15
   127dc:	andeq	sl, r1, r8, lsr #27
   127e0:	andeq	sl, r1, r0, lsr sp
   127e4:	strdeq	sl, [r1], -r8
   127e8:	andeq	r0, r0, r0, ror #2
   127ec:	ldrdeq	sl, [r1], -r0
   127f0:	andeq	r9, r0, r4, asr r9
   127f4:	andeq	r9, r0, r0, ror r8
   127f8:	andeq	r9, r0, r0, lsr #11
   127fc:	andeq	r9, r0, r4, asr #9
   12800:	ldrdeq	r8, [r0], -r0
   12804:	andeq	r8, r0, ip, lsl #9
   12808:	str	r4, [fp, r7]
   1280c:	mov	r1, #0
   12810:	ldr	r2, [r5, sl]
   12814:	ldrd	sl, [sp, #48]	; 0x30
   12818:	rsb	r2, r2, r6
   1281c:	mov	r0, r2
   12820:	cmp	fp, r1
   12824:	cmpeq	sl, r0
   12828:	bcs	128b8 <__assert_fail@plt+0x1230>
   1282c:	mov	r0, r5
   12830:	ldr	r5, [r5, r7]
   12834:	mov	r6, r2
   12838:	mov	fp, r4
   1283c:	mov	r4, r0
   12840:	mov	r1, r4
   12844:	mov	r2, #8192	; 0x2000
   12848:	ldr	r0, [sp, #32]
   1284c:	bl	1907c <close_stdout@@Base+0x2d70>
   12850:	sub	r1, r0, #1
   12854:	mov	r2, r0
   12858:	cmn	r1, #3
   1285c:	bhi	128c4 <__assert_fail@plt+0x123c>
   12860:	ldrd	r0, [sp, #120]	; 0x78
   12864:	mov	sl, #8192	; 0x2000
   12868:	add	r6, r6, r2
   1286c:	adds	r0, r0, r2
   12870:	adc	r1, r1, #0
   12874:	strd	r0, [sp, #120]	; 0x78
   12878:	str	r9, [r4, r7]
   1287c:	str	r2, [r4, sl]
   12880:	ldr	r0, [fp, sl]
   12884:	add	r1, r2, r0
   12888:	cmp	r1, r8
   1288c:	bhi	12808 <__assert_fail@plt+0x1180>
   12890:	mov	r1, r4
   12894:	add	r0, fp, r0
   12898:	bl	11394 <memcpy@plt>
   1289c:	ldr	r1, [r4, sl]
   128a0:	ldr	r2, [fp, sl]
   128a4:	mov	r0, r4
   128a8:	mov	r4, fp
   128ac:	add	r2, r1, r2
   128b0:	str	r2, [fp, sl]
   128b4:	b	12838 <__assert_fail@plt+0x11b0>
   128b8:	movw	r0, #8200	; 0x2008
   128bc:	bl	196b8 <close_stdout@@Base+0x33ac>
   128c0:	b	12838 <__assert_fail@plt+0x11b0>
   128c4:	mov	r0, r4
   128c8:	str	r2, [sp, #28]
   128cc:	bl	11370 <free@plt>
   128d0:	ldr	r2, [sp, #28]
   128d4:	cmn	r2, #1
   128d8:	beq	137f4 <__assert_fail@plt+0x216c>
   128dc:	mov	r4, r5
   128e0:	mov	r0, #8192	; 0x2000
   128e4:	movw	lr, #8196	; 0x2004
   128e8:	ldrd	r8, [sp, #48]	; 0x30
   128ec:	b	128f8 <__assert_fail@plt+0x1270>
   128f0:	ldr	r4, [r4, lr]
   128f4:	mov	r6, r1
   128f8:	ldr	ip, [r4, r0]
   128fc:	mov	r3, #0
   12900:	rsb	r1, ip, r6
   12904:	mov	r2, r1
   12908:	cmp	r9, r3
   1290c:	cmpeq	r8, r2
   12910:	bcc	128f0 <__assert_fail@plt+0x1268>
   12914:	ldrd	sl, [sp, #48]	; 0x30
   12918:	mov	r2, r6
   1291c:	mov	r3, #0
   12920:	cmp	fp, r3
   12924:	cmpeq	sl, r2
   12928:	rsbcc	r0, sl, r6
   1292c:	movcs	r0, #0
   12930:	subs	r1, ip, r0
   12934:	bne	12d34 <__assert_fail@plt+0x16ac>
   12938:	movw	r7, #8196	; 0x2004
   1293c:	mov	r6, #8192	; 0x2000
   12940:	ldr	r4, [r4, r7]
   12944:	b	1294c <__assert_fail@plt+0x12c4>
   12948:	ldr	r4, [r4, r7]
   1294c:	cmp	r4, #0
   12950:	beq	12b9c <__assert_fail@plt+0x1514>
   12954:	ldr	r1, [r4, r6]
   12958:	cmp	r1, #0
   1295c:	beq	12948 <__assert_fail@plt+0x12c0>
   12960:	mov	r0, r4
   12964:	bl	1431c <__assert_fail@plt+0x2c94>
   12968:	b	12948 <__assert_fail@plt+0x12c0>
   1296c:	mov	r0, r4
   12970:	bl	11370 <free@plt>
   12974:	cmn	r8, #1
   12978:	beq	137b0 <__assert_fail@plt+0x2128>
   1297c:	mov	r3, #8192	; 0x2000
   12980:	ldr	r3, [sl, r3]
   12984:	cmp	r3, #0
   12988:	beq	12b78 <__assert_fail@plt+0x14f0>
   1298c:	ldrd	r4, [sp, #48]	; 0x30
   12990:	orrs	r5, r4, r5
   12994:	beq	12b78 <__assert_fail@plt+0x14f0>
   12998:	add	r3, sl, r3
   1299c:	ldrb	r3, [r3, #-1]
   129a0:	cmp	r3, #10
   129a4:	beq	129c4 <__assert_fail@plt+0x133c>
   129a8:	movw	r3, #8196	; 0x2004
   129ac:	ldr	r6, [sp, #40]	; 0x28
   129b0:	ldr	r2, [sl, r3]
   129b4:	add	r6, r6, #1
   129b8:	str	r6, [sp, #40]	; 0x28
   129bc:	add	r2, r2, #1
   129c0:	str	r2, [sl, r3]
   129c4:	movw	r0, #8196	; 0x2004
   129c8:	movw	ip, #8200	; 0x2008
   129cc:	mov	lr, r9
   129d0:	ldrd	r4, [sp, #48]	; 0x30
   129d4:	ldr	r6, [sp, #40]	; 0x28
   129d8:	b	129e4 <__assert_fail@plt+0x135c>
   129dc:	ldr	lr, [lr, ip]
   129e0:	mov	r6, r1
   129e4:	ldr	r1, [lr, r0]
   129e8:	mov	r3, #0
   129ec:	rsb	r1, r1, r6
   129f0:	mov	r2, r1
   129f4:	cmp	r5, r3
   129f8:	cmpeq	r4, r2
   129fc:	bcc	129dc <__assert_fail@plt+0x1354>
   12a00:	str	r6, [sp, #40]	; 0x28
   12a04:	mov	r2, r6
   12a08:	ldrd	r6, [sp, #48]	; 0x30
   12a0c:	mov	r3, #8192	; 0x2000
   12a10:	mov	fp, #0
   12a14:	ldr	r4, [lr, r3]
   12a18:	mov	r3, fp
   12a1c:	cmp	r7, r3
   12a20:	cmpeq	r6, r2
   12a24:	mov	r5, lr
   12a28:	mov	r0, lr
   12a2c:	ldrcc	r7, [sp, #40]	; 0x28
   12a30:	add	r4, lr, r4
   12a34:	rsbcc	fp, r6, r7
   12a38:	bcc	12a84 <__assert_fail@plt+0x13fc>
   12a3c:	subs	r1, r4, r0
   12a40:	bne	1396c <__assert_fail@plt+0x22e4>
   12a44:	movw	r3, #8200	; 0x2008
   12a48:	mov	r6, #8192	; 0x2000
   12a4c:	ldr	r4, [r5, r3]
   12a50:	mov	r5, r3
   12a54:	b	12a5c <__assert_fail@plt+0x13d4>
   12a58:	ldr	r4, [r4, r5]
   12a5c:	cmp	r4, #0
   12a60:	beq	12b78 <__assert_fail@plt+0x14f0>
   12a64:	ldr	r1, [r4, r6]
   12a68:	cmp	r1, #0
   12a6c:	beq	12a58 <__assert_fail@plt+0x13d0>
   12a70:	mov	r0, r4
   12a74:	bl	1431c <__assert_fail@plt+0x2c94>
   12a78:	b	12a58 <__assert_fail@plt+0x13d0>
   12a7c:	add	r0, r0, #1
   12a80:	sub	fp, fp, #1
   12a84:	cmp	fp, #0
   12a88:	beq	12a3c <__assert_fail@plt+0x13b4>
   12a8c:	mov	r1, #10
   12a90:	rsb	r2, r0, r4
   12a94:	bl	115bc <memchr@plt>
   12a98:	cmp	r0, #0
   12a9c:	bne	12a7c <__assert_fail@plt+0x13f4>
   12aa0:	ldr	r3, [pc, #-820]	; 12774 <__assert_fail@plt+0x10ec>
   12aa4:	movw	r2, #675	; 0x2a3
   12aa8:	ldr	r0, [pc, #-824]	; 12778 <__assert_fail@plt+0x10f0>
   12aac:	ldr	r1, [pc, #-824]	; 1277c <__assert_fail@plt+0x10f4>
   12ab0:	add	r3, pc, r3
   12ab4:	add	r0, pc, r0
   12ab8:	add	r3, r3, #16
   12abc:	add	r1, pc, r1
   12ac0:	bl	11688 <__assert_fail@plt>
   12ac4:	cmp	r6, #0
   12ac8:	beq	125c8 <__assert_fail@plt+0xf40>
   12acc:	ldr	r4, [sp, #64]	; 0x40
   12ad0:	ldr	r7, [sp, #36]	; 0x24
   12ad4:	ldr	r1, [sp, #212]	; 0xd4
   12ad8:	cmp	r4, #0
   12adc:	ldrd	r2, [sp, #120]	; 0x78
   12ae0:	str	r0, [r7, #40]	; 0x28
   12ae4:	moveq	r0, #1
   12ae8:	mvnne	r0, #0
   12aec:	str	r1, [r7, #20]
   12af0:	str	r0, [r7, #56]	; 0x38
   12af4:	ldrd	r0, [sp, #128]	; 0x80
   12af8:	strd	r2, [r7, #8]
   12afc:	mov	r3, #0
   12b00:	ldr	r2, [sp, #208]	; 0xd0
   12b04:	strd	r0, [r7, #24]
   12b08:	ldr	r5, [sp, #32]
   12b0c:	ldrd	r0, [sp, #224]	; 0xe0
   12b10:	ldr	sl, [sp, #44]	; 0x2c
   12b14:	str	r2, [r7, #16]
   12b18:	mov	r2, #0
   12b1c:	strb	r3, [r7, #44]	; 0x2c
   12b20:	mov	r3, #0
   12b24:	str	r5, [r7, #48]	; 0x30
   12b28:	strd	r2, [r7, #72]	; 0x48
   12b2c:	strd	r0, [r7, #32]
   12b30:	ldr	r1, [sl, #-46]	; 0xffffffd2
   12b34:	ldrb	r3, [r1]
   12b38:	cmp	r3, #45	; 0x2d
   12b3c:	bne	12b54 <__assert_fail@plt+0x14cc>
   12b40:	ldrb	r3, [r1, #1]
   12b44:	cmp	r3, #0
   12b48:	bne	12b54 <__assert_fail@plt+0x14cc>
   12b4c:	bl	14294 <__assert_fail@plt+0x2c0c>
   12b50:	mov	r1, r0
   12b54:	ldr	r0, [sp, #32]
   12b58:	bl	14e34 <__assert_fail@plt+0x37ac>
   12b5c:	ldr	fp, [sp, #36]	; 0x24
   12b60:	strb	r0, [fp, #45]	; 0x2d
   12b64:	b	12124 <__assert_fail@plt+0xa9c>
   12b68:	ldr	ip, [sp, #36]	; 0x24
   12b6c:	mov	r3, #0
   12b70:	strb	r3, [ip, #46]	; 0x2e
   12b74:	b	1207c <__assert_fail@plt+0x9f4>
   12b78:	mov	r6, #1
   12b7c:	movw	r4, #8200	; 0x2008
   12b80:	b	12b90 <__assert_fail@plt+0x1508>
   12b84:	mov	r0, r9
   12b88:	ldr	r9, [r9, r4]
   12b8c:	bl	11370 <free@plt>
   12b90:	cmp	r9, #0
   12b94:	bne	12b84 <__assert_fail@plt+0x14fc>
   12b98:	b	122c8 <__assert_fail@plt+0xc40>
   12b9c:	mov	r6, #1
   12ba0:	movw	r4, #8196	; 0x2004
   12ba4:	b	12bb4 <__assert_fail@plt+0x152c>
   12ba8:	mov	r0, r5
   12bac:	ldr	r5, [r5, r4]
   12bb0:	bl	11370 <free@plt>
   12bb4:	cmp	r5, #0
   12bb8:	bne	12ba8 <__assert_fail@plt+0x1520>
   12bbc:	b	122c8 <__assert_fail@plt+0xc40>
   12bc0:	lsr	r6, r0, #31
   12bc4:	b	122c8 <__assert_fail@plt+0xc40>
   12bc8:	ldr	r3, [pc, #-1104]	; 12780 <__assert_fail@plt+0x10f8>
   12bcc:	ldr	fp, [sp, #92]	; 0x5c
   12bd0:	add	r3, pc, r3
   12bd4:	ldr	sl, [sp, #96]	; 0x60
   12bd8:	ldrb	r3, [r3, #6]
   12bdc:	cmp	r3, #0
   12be0:	bne	12e60 <__assert_fail@plt+0x17d8>
   12be4:	ldr	r3, [pc, #-1128]	; 12784 <__assert_fail@plt+0x10fc>
   12be8:	add	r3, pc, r3
   12bec:	ldrb	r3, [r3, #3]
   12bf0:	cmp	r3, #0
   12bf4:	bne	13730 <__assert_fail@plt+0x20a8>
   12bf8:	ldr	r7, [sp, #56]	; 0x38
   12bfc:	rsbs	r0, r7, #1
   12c00:	movcc	r0, #0
   12c04:	bl	114fc <exit@plt>
   12c08:	ldr	r1, [pc, #-1160]	; 12788 <__assert_fail@plt+0x1100>
   12c0c:	mov	r2, #5
   12c10:	mov	r0, #0
   12c14:	add	r1, pc, r1
   12c18:	bl	113dc <dcgettext@plt>
   12c1c:	b	119a4 <__assert_fail@plt+0x31c>
   12c20:	bl	11568 <__errno_location@plt>
   12c24:	ldr	r1, [pc, #-1184]	; 1278c <__assert_fail@plt+0x1104>
   12c28:	mov	r2, #5
   12c2c:	mov	r6, r7
   12c30:	add	r1, pc, r1
   12c34:	ldr	r4, [r0]
   12c38:	mov	r0, r7
   12c3c:	bl	113dc <dcgettext@plt>
   12c40:	mov	r5, r0
   12c44:	ldr	r0, [sp, #76]	; 0x4c
   12c48:	bl	19070 <close_stdout@@Base+0x2d64>
   12c4c:	mov	r1, r4
   12c50:	mov	r2, r5
   12c54:	mov	r3, r0
   12c58:	mov	r0, r7
   12c5c:	bl	11484 <error@plt>
   12c60:	b	122c8 <__assert_fail@plt+0xc40>
   12c64:	ldr	r1, [pc, #-1244]	; 12790 <__assert_fail@plt+0x1108>
   12c68:	mov	r2, #5
   12c6c:	mov	r0, r9
   12c70:	add	r1, pc, r1
   12c74:	bl	113dc <dcgettext@plt>
   12c78:	mov	fp, r0
   12c7c:	ldr	r0, [r5, #4]
   12c80:	bl	19070 <close_stdout@@Base+0x2d64>
   12c84:	mov	r2, fp
   12c88:	mov	r1, r9
   12c8c:	mov	r3, r0
   12c90:	mov	r0, #1
   12c94:	bl	11484 <error@plt>
   12c98:	b	11b40 <__assert_fail@plt+0x4b8>
   12c9c:	add	r1, sp, #120	; 0x78
   12ca0:	ldrd	r2, [sp, #48]	; 0x30
   12ca4:	str	r1, [sp]
   12ca8:	ldr	r0, [sp, #76]	; 0x4c
   12cac:	ldr	r1, [sp, #32]
   12cb0:	bl	14384 <__assert_fail@plt+0x2cfc>
   12cb4:	cmp	r0, #0
   12cb8:	bne	12bc0 <__assert_fail@plt+0x1538>
   12cbc:	ldr	r0, [sp, #76]	; 0x4c
   12cc0:	mvn	r2, #0
   12cc4:	ldr	r1, [sp, #32]
   12cc8:	mvn	r3, #0
   12ccc:	ldrd	r4, [sp, #120]	; 0x78
   12cd0:	bl	144cc <__assert_fail@plt+0x2e44>
   12cd4:	mov	r6, #1
   12cd8:	adds	r0, r0, r4
   12cdc:	adc	r1, r1, r5
   12ce0:	strd	r0, [sp, #120]	; 0x78
   12ce4:	b	122c8 <__assert_fail@plt+0xc40>
   12ce8:	mov	ip, lr
   12cec:	b	11acc <__assert_fail@plt+0x444>
   12cf0:	bl	11568 <__errno_location@plt>
   12cf4:	ldr	r1, [pc, #-1384]	; 12794 <__assert_fail@plt+0x110c>
   12cf8:	mov	r2, #5
   12cfc:	mov	r6, r5
   12d00:	add	r1, pc, r1
   12d04:	ldr	r4, [r0]
   12d08:	mov	r0, r5
   12d0c:	bl	113dc <dcgettext@plt>
   12d10:	mov	r5, r0
   12d14:	ldr	r0, [sp, #76]	; 0x4c
   12d18:	bl	19070 <close_stdout@@Base+0x2d64>
   12d1c:	mov	r1, r4
   12d20:	mov	r2, r5
   12d24:	mov	r3, r0
   12d28:	mov	r0, r6
   12d2c:	bl	11484 <error@plt>
   12d30:	b	122c8 <__assert_fail@plt+0xc40>
   12d34:	add	r0, r4, r0
   12d38:	bl	1431c <__assert_fail@plt+0x2c94>
   12d3c:	b	12938 <__assert_fail@plt+0x12b0>
   12d40:	ldrd	r4, [sp, #48]	; 0x30
   12d44:	cmp	r4, #0
   12d48:	sbcs	r5, r5, #0
   12d4c:	blt	12280 <__assert_fail@plt+0xbf8>
   12d50:	ldr	r6, [sp, #76]	; 0x4c
   12d54:	mov	r3, #1
   12d58:	ldr	r0, [sp, #32]
   12d5c:	str	r3, [sp]
   12d60:	str	r6, [sp, #4]
   12d64:	ldrd	r2, [sp, #48]	; 0x30
   12d68:	bl	1477c <__assert_fail@plt+0x30f4>
   12d6c:	ldrd	r4, [sp, #120]	; 0x78
   12d70:	ldrd	sl, [sp, #48]	; 0x30
   12d74:	adds	r4, r4, sl
   12d78:	adc	r5, r5, fp
   12d7c:	strd	r4, [sp, #120]	; 0x78
   12d80:	b	122a4 <__assert_fail@plt+0xc1c>
   12d84:	ldrd	r6, [sp, #48]	; 0x30
   12d88:	cmp	r6, #0
   12d8c:	sbcs	r7, r7, #0
   12d90:	blt	1262c <__assert_fail@plt+0xfa4>
   12d94:	ldr	sl, [sp, #76]	; 0x4c
   12d98:	mov	r2, r5
   12d9c:	mov	r3, #1
   12da0:	ldr	r0, [sp, #32]
   12da4:	str	r3, [sp]
   12da8:	mov	r3, r5
   12dac:	str	sl, [sp, #4]
   12db0:	bl	1477c <__assert_fail@plt+0x30f4>
   12db4:	mov	r3, #2
   12db8:	mov	r2, r5
   12dbc:	str	r3, [sp]
   12dc0:	str	sl, [sp, #4]
   12dc4:	mov	r3, r5
   12dc8:	mov	r6, r0
   12dcc:	ldr	r0, [sp, #32]
   12dd0:	mov	r7, r1
   12dd4:	bl	1477c <__assert_fail@plt+0x30f4>
   12dd8:	subs	r0, r0, r6
   12ddc:	sbc	r1, r1, r7
   12de0:	cmp	r0, #0
   12de4:	sbcs	fp, r1, #0
   12de8:	movlt	r0, r5
   12dec:	movlt	r1, r5
   12df0:	ldrd	r4, [sp, #48]	; 0x30
   12df4:	cmp	r4, r0
   12df8:	sbcs	r5, r5, r1
   12dfc:	blt	1399c <__assert_fail@plt+0x2314>
   12e00:	ldr	sl, [sp, #76]	; 0x4c
   12e04:	mov	r1, #0
   12e08:	mov	r2, r6
   12e0c:	mov	r3, r7
   12e10:	str	r1, [sp]
   12e14:	str	sl, [sp, #4]
   12e18:	ldr	r0, [sp, #32]
   12e1c:	bl	1477c <__assert_fail@plt+0x30f4>
   12e20:	strd	r0, [sp, #120]	; 0x78
   12e24:	ldr	r0, [sp, #76]	; 0x4c
   12e28:	ldrd	r2, [sp, #48]	; 0x30
   12e2c:	ldr	r1, [sp, #32]
   12e30:	b	12ccc <__assert_fail@plt+0x1644>
   12e34:	ldr	r1, [pc, #-1700]	; 12798 <__assert_fail@plt+0x1110>
   12e38:	mov	r0, r6
   12e3c:	mov	r2, #5
   12e40:	strb	r6, [r3, #1]
   12e44:	add	r1, pc, r1
   12e48:	bl	113dc <dcgettext@plt>
   12e4c:	mov	r1, r6
   12e50:	mov	r2, r0
   12e54:	mov	r0, r6
   12e58:	bl	11484 <error@plt>
   12e5c:	b	11da8 <__assert_fail@plt+0x720>
   12e60:	ldr	r3, [sp, #72]	; 0x48
   12e64:	mov	r1, #0
   12e68:	mov	ip, #1
   12e6c:	mov	lr, r4
   12e70:	b	12ec0 <__assert_fail@plt+0x1838>
   12e74:	ldr	r2, [r3]
   12e78:	ldrb	r0, [r2]
   12e7c:	cmp	r0, #45	; 0x2d
   12e80:	bne	12eb8 <__assert_fail@plt+0x1830>
   12e84:	ldrb	r2, [r2, #1]
   12e88:	cmp	r2, #0
   12e8c:	bne	12eb8 <__assert_fail@plt+0x1830>
   12e90:	ldrb	r2, [r3, #44]	; 0x2c
   12e94:	cmp	r2, #0
   12e98:	bne	12eb8 <__assert_fail@plt+0x1830>
   12e9c:	ldr	r2, [r3, #48]	; 0x30
   12ea0:	cmp	r2, #0
   12ea4:	blt	12eb8 <__assert_fail@plt+0x1830>
   12ea8:	ldr	r2, [r3, #40]	; 0x28
   12eac:	and	r2, r2, #61440	; 0xf000
   12eb0:	cmp	r2, #4096	; 0x1000
   12eb4:	beq	13878 <__assert_fail@plt+0x21f0>
   12eb8:	add	r1, r1, #1
   12ebc:	add	r3, r3, #80	; 0x50
   12ec0:	cmp	r3, lr
   12ec4:	bne	12e74 <__assert_fail@plt+0x17ec>
   12ec8:	cmp	r1, #0
   12ecc:	beq	12be4 <__assert_fail@plt+0x155c>
   12ed0:	ldr	r3, [pc, #-1852]	; 1279c <__assert_fail@plt+0x1114>
   12ed4:	add	r3, pc, r3
   12ed8:	ldrb	r3, [r3, #2]
   12edc:	cmp	r3, #0
   12ee0:	ldreq	r3, [sp, #72]	; 0x48
   12ee4:	ldreq	r1, [sp, #80]	; 0x50
   12ee8:	beq	1311c <__assert_fail@plt+0x1a94>
   12eec:	ldr	r2, [pc, #-1876]	; 127a0 <__assert_fail@plt+0x1118>
   12ef0:	mov	r1, #1
   12ef4:	add	r2, pc, r2
   12ef8:	ldr	r3, [r2, #8]
   12efc:	strb	r1, [r2, #2]
   12f00:	cmp	r3, #0
   12f04:	movne	r4, #0
   12f08:	strne	r4, [sp, #48]	; 0x30
   12f0c:	bne	12f28 <__assert_fail@plt+0x18a0>
   12f10:	ldr	r2, [pc, #-1908]	; 127a4 <__assert_fail@plt+0x111c>
   12f14:	add	r2, pc, r2
   12f18:	ldr	r2, [r2, #4]
   12f1c:	cmp	r2, #2
   12f20:	beq	139f0 <__assert_fail@plt+0x2368>
   12f24:	str	r3, [sp, #48]	; 0x30
   12f28:	ldr	r5, [sp, #48]	; 0x30
   12f2c:	sub	r6, fp, #1
   12f30:	ldr	ip, [pc, #-1936]	; 127a8 <__assert_fail@plt+0x1120>
   12f34:	mov	r7, #0
   12f38:	and	r5, r5, #1
   12f3c:	ldr	r4, [pc, #-1944]	; 127ac <__assert_fail@plt+0x1124>
   12f40:	str	r5, [sp, #36]	; 0x24
   12f44:	add	ip, pc, ip
   12f48:	ldr	r5, [pc, #-1952]	; 127b0 <__assert_fail@plt+0x1128>
   12f4c:	add	r4, pc, r4
   12f50:	str	r6, [sp, #44]	; 0x2c
   12f54:	add	r5, pc, r5
   12f58:	str	r7, [sp, #64]	; 0x40
   12f5c:	str	ip, [sp, #68]	; 0x44
   12f60:	str	r4, [sp, #92]	; 0x5c
   12f64:	str	r5, [sp, #84]	; 0x54
   12f68:	str	sl, [sp, #76]	; 0x4c
   12f6c:	cmp	fp, #0
   12f70:	beq	13434 <__assert_fail@plt+0x1dac>
   12f74:	ldr	r7, [pc, #-1992]	; 127b4 <__assert_fail@plt+0x112c>
   12f78:	mov	r9, #0
   12f7c:	ldr	sl, [pc, #-1996]	; 127b8 <__assert_fail@plt+0x1130>
   12f80:	add	r7, pc, r7
   12f84:	ldr	r8, [sp, #72]	; 0x48
   12f88:	add	sl, pc, sl
   12f8c:	str	r7, [sp, #60]	; 0x3c
   12f90:	str	sl, [sp, #40]	; 0x28
   12f94:	mov	sl, r9
   12f98:	ldr	r5, [sp, #48]	; 0x30
   12f9c:	b	12fe0 <__assert_fail@plt+0x1958>
   12fa0:	mvn	r2, #1
   12fa4:	mvn	r3, #0
   12fa8:	mov	r0, r7
   12fac:	mov	r1, r6
   12fb0:	bl	144cc <__assert_fail@plt+0x2e44>
   12fb4:	ldrd	r2, [r8, #8]
   12fb8:	orrs	lr, r0, r1
   12fbc:	orrne	r9, r9, #1
   12fc0:	adds	r2, r2, r0
   12fc4:	adc	r3, r3, r1
   12fc8:	strd	r2, [r8, #8]
   12fcc:	uxtb	r9, r9
   12fd0:	add	sl, sl, #1
   12fd4:	add	r8, r8, #80	; 0x50
   12fd8:	cmp	sl, fp
   12fdc:	beq	13438 <__assert_fail@plt+0x1db0>
   12fe0:	ldrb	r3, [r8, #44]	; 0x2c
   12fe4:	cmp	r3, #0
   12fe8:	bne	12fd0 <__assert_fail@plt+0x1948>
   12fec:	ldr	r6, [r8, #48]	; 0x30
   12ff0:	cmp	r6, #0
   12ff4:	blt	13564 <__assert_fail@plt+0x1edc>
   12ff8:	ldr	r7, [r8]
   12ffc:	ldrb	r3, [r7]
   13000:	cmp	r3, #45	; 0x2d
   13004:	bne	1301c <__assert_fail@plt+0x1994>
   13008:	ldrb	r3, [r7, #1]
   1300c:	cmp	r3, #0
   13010:	bne	1301c <__assert_fail@plt+0x1994>
   13014:	bl	14294 <__assert_fail@plt+0x2c0c>
   13018:	mov	r7, r0
   1301c:	ldr	r4, [r8, #56]	; 0x38
   13020:	ldr	ip, [r8, #40]	; 0x28
   13024:	cmp	r5, r4
   13028:	str	ip, [sp, #32]
   1302c:	beq	13058 <__assert_fail@plt+0x19d0>
   13030:	mov	r0, r6
   13034:	mov	r1, #3
   13038:	bl	1a710 <close_stdout@@Base+0x4404>
   1303c:	ldr	r4, [sp, #36]	; 0x24
   13040:	cmp	r4, #0
   13044:	beq	133b8 <__assert_fail@plt+0x1d30>
   13048:	cmp	r0, #0
   1304c:	blt	133e0 <__assert_fail@plt+0x1d58>
   13050:	mov	r4, r5
   13054:	str	r5, [r8, #56]	; 0x38
   13058:	cmp	r4, #0
   1305c:	bne	12fa0 <__assert_fail@plt+0x1918>
   13060:	mov	r0, #3
   13064:	mov	r1, r6
   13068:	add	r2, sp, #128	; 0x80
   1306c:	bl	11430 <__fxstat64@plt>
   13070:	cmp	r0, #0
   13074:	bne	1359c <__assert_fail@plt+0x1f14>
   13078:	ldr	r3, [r8, #40]	; 0x28
   1307c:	ldr	ip, [sp, #144]	; 0x90
   13080:	cmp	r3, ip
   13084:	beq	135d4 <__assert_fail@plt+0x1f4c>
   13088:	ldr	r2, [sp, #212]	; 0xd4
   1308c:	ldr	r3, [sp, #208]	; 0xd0
   13090:	ldr	r4, [sp, #32]
   13094:	str	r3, [r8, #16]
   13098:	mov	r3, #0
   1309c:	and	r0, r4, #61440	; 0xf000
   130a0:	str	r2, [r8, #20]
   130a4:	cmp	r0, #32768	; 0x8000
   130a8:	mov	r2, #0
   130ac:	str	ip, [r8, #40]	; 0x28
   130b0:	strd	r2, [r8, #72]	; 0x48
   130b4:	beq	13654 <__assert_fail@plt+0x1fcc>
   130b8:	ldr	r4, [sp, #44]	; 0x2c
   130bc:	cmp	sl, r4
   130c0:	beq	130d8 <__assert_fail@plt+0x1a50>
   130c4:	ldr	ip, [sp, #68]	; 0x44
   130c8:	ldrb	r3, [ip]
   130cc:	cmp	r3, #0
   130d0:	streq	sl, [sp, #44]	; 0x2c
   130d4:	bne	136b4 <__assert_fail@plt+0x202c>
   130d8:	ldr	r3, [r8, #56]	; 0x38
   130dc:	cmp	r3, #0
   130e0:	mvneq	r2, #0
   130e4:	mvneq	r3, #0
   130e8:	beq	12fa8 <__assert_fail@plt+0x1920>
   130ec:	b	12fa0 <__assert_fail@plt+0x1918>
   130f0:	ldrb	r2, [r3, #44]	; 0x2c
   130f4:	cmp	r2, #0
   130f8:	bne	13118 <__assert_fail@plt+0x1a90>
   130fc:	ldr	r2, [r3]
   13100:	ldrb	r0, [r2]
   13104:	cmp	r0, #45	; 0x2d
   13108:	bne	13118 <__assert_fail@plt+0x1a90>
   1310c:	ldrb	r2, [r2, #1]
   13110:	cmp	r2, #0
   13114:	beq	12eec <__assert_fail@plt+0x1864>
   13118:	add	r3, r3, #80	; 0x50
   1311c:	cmp	r3, r1
   13120:	bne	130f0 <__assert_fail@plt+0x1a68>
   13124:	ldr	r3, [sp, #72]	; 0x48
   13128:	ldr	r1, [sp, #80]	; 0x50
   1312c:	b	1314c <__assert_fail@plt+0x1ac4>
   13130:	ldr	r2, [r3, #48]	; 0x30
   13134:	cmp	r2, #0
   13138:	blt	13148 <__assert_fail@plt+0x1ac0>
   1313c:	ldrb	r2, [r3, #45]	; 0x2d
   13140:	cmp	r2, #0
   13144:	bne	12eec <__assert_fail@plt+0x1864>
   13148:	add	r3, r3, #80	; 0x50
   1314c:	cmp	r3, r1
   13150:	bne	13130 <__assert_fail@plt+0x1aa8>
   13154:	mov	r4, #0
   13158:	mov	r6, #80	; 0x50
   1315c:	add	r5, sp, #128	; 0x80
   13160:	b	13198 <__assert_fail@plt+0x1b10>
   13164:	mul	r3, r6, r4
   13168:	ldr	r7, [sp, #72]	; 0x48
   1316c:	mov	r0, #3
   13170:	mov	r2, r5
   13174:	ldr	r1, [r7, r3]
   13178:	bl	1167c <__lxstat64@plt>
   1317c:	cmp	r0, #0
   13180:	bne	13194 <__assert_fail@plt+0x1b0c>
   13184:	ldr	r3, [sp, #144]	; 0x90
   13188:	and	r3, r3, #61440	; 0xf000
   1318c:	cmp	r3, #40960	; 0xa000
   13190:	beq	12eec <__assert_fail@plt+0x1864>
   13194:	add	r4, r4, #1
   13198:	cmp	r4, fp
   1319c:	bne	13164 <__assert_fail@plt+0x1adc>
   131a0:	ldr	r5, [sp, #56]	; 0x38
   131a4:	cmp	r5, #0
   131a8:	bne	131c0 <__assert_fail@plt+0x1b38>
   131ac:	ldr	r3, [pc, #-2552]	; 127bc <__assert_fail@plt+0x1134>
   131b0:	add	r3, pc, r3
   131b4:	ldr	r3, [r3, #4]
   131b8:	cmp	r3, #2
   131bc:	beq	12eec <__assert_fail@plt+0x1864>
   131c0:	bl	11520 <inotify_init@plt>
   131c4:	cmp	r0, #0
   131c8:	str	r0, [sp, #32]
   131cc:	blt	13b04 <__assert_fail@plt+0x247c>
   131d0:	ldr	r3, [pc, #-2544]	; 127e8 <__assert_fail@plt+0x1160>
   131d4:	ldr	r3, [sl, r3]
   131d8:	ldr	r0, [r3]
   131dc:	bl	11418 <fflush_unlocked@plt>
   131e0:	cmp	r0, #0
   131e4:	beq	13214 <__assert_fail@plt+0x1b8c>
   131e8:	bl	11568 <__errno_location@plt>
   131ec:	ldr	r1, [pc, #-2612]	; 127c0 <__assert_fail@plt+0x1138>
   131f0:	mov	r2, #5
   131f4:	add	r1, pc, r1
   131f8:	ldr	r4, [r0]
   131fc:	mov	r0, #0
   13200:	bl	113dc <dcgettext@plt>
   13204:	mov	r1, r4
   13208:	mov	r2, r0
   1320c:	mov	r0, #1
   13210:	bl	11484 <error@plt>
   13214:	ldr	r2, [pc, #-2648]	; 127c4 <__assert_fail@plt+0x113c>
   13218:	mov	r6, #0
   1321c:	ldr	r3, [pc, #-2652]	; 127c8 <__assert_fail@plt+0x1140>
   13220:	mov	r0, fp
   13224:	str	r6, [sp]
   13228:	mov	r1, r6
   1322c:	add	r2, pc, r2
   13230:	add	r3, pc, r3
   13234:	bl	16ee4 <close_stdout@@Base+0xbd8>
   13238:	cmp	r0, #0
   1323c:	str	r0, [sp, #60]	; 0x3c
   13240:	beq	11f20 <__assert_fail@plt+0x898>
   13244:	ldr	ip, [pc, #-2688]	; 127cc <__assert_fail@plt+0x1144>
   13248:	mov	r7, r6
   1324c:	ldr	r4, [sp, #72]	; 0x48
   13250:	add	ip, pc, ip
   13254:	ldr	r8, [pc, #-2700]	; 127d0 <__assert_fail@plt+0x1148>
   13258:	str	ip, [sp, #64]	; 0x40
   1325c:	ldr	r5, [pc, #-2704]	; 127d4 <__assert_fail@plt+0x114c>
   13260:	add	r8, pc, r8
   13264:	ldr	ip, [pc, #-2708]	; 127d8 <__assert_fail@plt+0x1150>
   13268:	mov	r9, r4
   1326c:	add	r5, pc, r5
   13270:	str	r6, [sp, #40]	; 0x28
   13274:	add	ip, pc, ip
   13278:	str	r6, [sp, #36]	; 0x24
   1327c:	str	r5, [sp, #68]	; 0x44
   13280:	str	ip, [sp, #76]	; 0x4c
   13284:	str	sl, [sp, #44]	; 0x2c
   13288:	b	132b0 <__assert_fail@plt+0x1c28>
   1328c:	ldr	r0, [sp, #60]	; 0x3c
   13290:	mov	r1, r9
   13294:	bl	1750c <close_stdout@@Base+0x1200>
   13298:	cmp	r0, #0
   1329c:	beq	11f20 <__assert_fail@plt+0x898>
   132a0:	mov	ip, #1
   132a4:	str	ip, [sp, #36]	; 0x24
   132a8:	add	r6, r6, #1
   132ac:	add	r9, r9, #80	; 0x50
   132b0:	cmp	r6, fp
   132b4:	beq	13a14 <__assert_fail@plt+0x238c>
   132b8:	ldrb	sl, [r9, #44]	; 0x2c
   132bc:	cmp	sl, #0
   132c0:	bne	132a8 <__assert_fail@plt+0x1c20>
   132c4:	ldr	r5, [r9]
   132c8:	mov	r0, r5
   132cc:	bl	11514 <strlen@plt>
   132d0:	ldr	r3, [r8, #4]
   132d4:	mvn	lr, #0
   132d8:	str	lr, [r9, #60]	; 0x3c
   132dc:	cmp	r7, r0
   132e0:	movcc	r7, r0
   132e4:	cmp	r3, #1
   132e8:	bne	13348 <__assert_fail@plt+0x1cc0>
   132ec:	mov	r0, r5
   132f0:	bl	16424 <close_stdout@@Base+0x118>
   132f4:	mov	r4, r0
   132f8:	mov	r0, r5
   132fc:	ldrb	r3, [r5, r4]
   13300:	str	r3, [sp, #48]	; 0x30
   13304:	bl	164e0 <close_stdout@@Base+0x1d4>
   13308:	cmp	r4, #0
   1330c:	mov	r2, #388	; 0x184
   13310:	ldreq	r1, [sp, #76]	; 0x4c
   13314:	rsb	r0, r5, r0
   13318:	str	r0, [r9, #68]	; 0x44
   1331c:	strb	sl, [r5, r4]
   13320:	ldr	r0, [sp, #32]
   13324:	ldrne	r1, [r9]
   13328:	bl	1155c <inotify_add_watch@plt>
   1332c:	ldr	r2, [r9]
   13330:	ldr	r5, [sp, #48]	; 0x30
   13334:	str	r0, [r9, #64]	; 0x40
   13338:	strb	r5, [r2, r4]
   1333c:	ldr	r3, [r9, #64]	; 0x40
   13340:	cmp	r3, #0
   13344:	blt	13ab0 <__assert_fail@plt+0x2428>
   13348:	ldr	r0, [sp, #32]
   1334c:	movw	r2, #3078	; 0xc06
   13350:	ldr	r1, [r9]
   13354:	bl	1155c <inotify_add_watch@plt>
   13358:	cmp	r0, #0
   1335c:	str	r0, [r9, #60]	; 0x3c
   13360:	bge	1328c <__assert_fail@plt+0x1c04>
   13364:	bl	11568 <__errno_location@plt>
   13368:	ldr	r4, [r0]
   1336c:	cmp	r4, #28
   13370:	beq	13a84 <__assert_fail@plt+0x23fc>
   13374:	ldr	r3, [r9, #52]	; 0x34
   13378:	cmp	r4, r3
   1337c:	beq	132a8 <__assert_fail@plt+0x1c20>
   13380:	ldr	r1, [sp, #64]	; 0x40
   13384:	mov	r2, #5
   13388:	mov	r0, #0
   1338c:	bl	113dc <dcgettext@plt>
   13390:	mov	r2, r0
   13394:	ldr	r0, [r9]
   13398:	str	r2, [sp, #28]
   1339c:	bl	19070 <close_stdout@@Base+0x2d64>
   133a0:	ldr	r2, [sp, #28]
   133a4:	mov	r1, r4
   133a8:	mov	r3, r0
   133ac:	mov	r0, #0
   133b0:	bl	11484 <error@plt>
   133b4:	b	132a8 <__assert_fail@plt+0x1c20>
   133b8:	cmp	r0, #0
   133bc:	blt	133e0 <__assert_fail@plt+0x1d58>
   133c0:	orr	r2, r0, #2048	; 0x800
   133c4:	cmp	r0, r2
   133c8:	beq	13050 <__assert_fail@plt+0x19c8>
   133cc:	mov	r0, r6
   133d0:	mov	r1, #4
   133d4:	bl	1a710 <close_stdout@@Base+0x4404>
   133d8:	cmn	r0, #1
   133dc:	bne	13050 <__assert_fail@plt+0x19c8>
   133e0:	ldr	r3, [r8, #40]	; 0x28
   133e4:	and	r3, r3, #61440	; 0xf000
   133e8:	cmp	r3, #32768	; 0x8000
   133ec:	bne	13400 <__assert_fail@plt+0x1d78>
   133f0:	bl	11568 <__errno_location@plt>
   133f4:	ldr	r3, [r0]
   133f8:	cmp	r3, #1
   133fc:	beq	1342c <__assert_fail@plt+0x1da4>
   13400:	bl	11568 <__errno_location@plt>
   13404:	ldr	r1, [sp, #40]	; 0x28
   13408:	mov	r2, #5
   1340c:	ldr	r4, [r0]
   13410:	mov	r0, #0
   13414:	bl	113dc <dcgettext@plt>
   13418:	mov	r3, r7
   1341c:	mov	r1, r4
   13420:	mov	r2, r0
   13424:	mov	r0, #1
   13428:	bl	11484 <error@plt>
   1342c:	ldr	r4, [r8, #56]	; 0x38
   13430:	b	13058 <__assert_fail@plt+0x19d0>
   13434:	mov	r9, fp
   13438:	ldr	r3, [pc, #-3172]	; 127dc <__assert_fail@plt+0x1154>
   1343c:	add	r3, pc, r3
   13440:	ldrb	r0, [r3, #1]
   13444:	cmp	r0, #0
   13448:	beq	13460 <__assert_fail@plt+0x1dd8>
   1344c:	ldr	r3, [pc, #-3188]	; 127e0 <__assert_fail@plt+0x1158>
   13450:	add	r3, pc, r3
   13454:	ldr	r3, [r3, #4]
   13458:	cmp	r3, #1
   1345c:	beq	134cc <__assert_fail@plt+0x1e44>
   13460:	cmp	fp, #0
   13464:	beq	13574 <__assert_fail@plt+0x1eec>
   13468:	ldr	r4, [sp, #72]	; 0x48
   1346c:	ldr	r3, [r4, #48]	; 0x30
   13470:	cmp	r3, #0
   13474:	bge	134cc <__assert_fail@plt+0x1e44>
   13478:	ldr	r2, [pc, #-3228]	; 127e4 <__assert_fail@plt+0x115c>
   1347c:	add	r3, r4, #80	; 0x50
   13480:	mov	r1, r4
   13484:	ldr	r5, [sp, #80]	; 0x50
   13488:	add	r2, pc, r2
   1348c:	ldr	ip, [r2, #4]
   13490:	b	134b0 <__assert_fail@plt+0x1e28>
   13494:	cmp	r3, r5
   13498:	beq	13574 <__assert_fail@plt+0x1eec>
   1349c:	mov	r1, r3
   134a0:	add	r3, r3, #80	; 0x50
   134a4:	ldr	r2, [r3, #-32]	; 0xffffffe0
   134a8:	cmp	r2, #0
   134ac:	bge	134cc <__assert_fail@plt+0x1e44>
   134b0:	cmp	r0, #0
   134b4:	beq	13494 <__assert_fail@plt+0x1e0c>
   134b8:	cmp	ip, #2
   134bc:	bne	13494 <__assert_fail@plt+0x1e0c>
   134c0:	ldrb	r2, [r1, #44]	; 0x2c
   134c4:	cmp	r2, #0
   134c8:	bne	13494 <__assert_fail@plt+0x1e0c>
   134cc:	ldr	ip, [sp, #36]	; 0x24
   134d0:	eor	r3, r9, #1
   134d4:	orr	r3, ip, r3
   134d8:	tst	r3, #255	; 0xff
   134dc:	beq	12f6c <__assert_fail@plt+0x18e4>
   134e0:	ldr	r5, [sp, #76]	; 0x4c
   134e4:	ldr	r3, [pc, #-3332]	; 127e8 <__assert_fail@plt+0x1160>
   134e8:	ldr	r3, [r5, r3]
   134ec:	ldr	r0, [r3]
   134f0:	bl	11418 <fflush_unlocked@plt>
   134f4:	cmp	r0, #0
   134f8:	bne	13840 <__assert_fail@plt+0x21b8>
   134fc:	cmp	r9, #0
   13500:	bne	12f6c <__assert_fail@plt+0x18e4>
   13504:	ldr	r6, [sp, #64]	; 0x40
   13508:	cmp	r6, #0
   1350c:	bne	12be4 <__assert_fail@plt+0x155c>
   13510:	ldr	r3, [pc, #-3372]	; 127ec <__assert_fail@plt+0x1164>
   13514:	add	r3, pc, r3
   13518:	ldr	r0, [r3, #8]
   1351c:	cmp	r0, #0
   13520:	bne	1375c <__assert_fail@plt+0x20d4>
   13524:	vmov.f64	d0, d8
   13528:	bl	19924 <close_stdout@@Base+0x3618>
   1352c:	cmp	r0, #0
   13530:	beq	12f6c <__assert_fail@plt+0x18e4>
   13534:	bl	11568 <__errno_location@plt>
   13538:	ldr	r1, [pc, #-3408]	; 127f0 <__assert_fail@plt+0x1168>
   1353c:	mov	r2, #5
   13540:	add	r1, pc, r1
   13544:	ldr	r4, [r0]
   13548:	mov	r0, #0
   1354c:	bl	113dc <dcgettext@plt>
   13550:	mov	r1, r4
   13554:	mov	r2, r0
   13558:	mov	r0, #1
   1355c:	bl	11484 <error@plt>
   13560:	b	12f6c <__assert_fail@plt+0x18e4>
   13564:	mov	r0, r8
   13568:	ldr	r1, [sp, #36]	; 0x24
   1356c:	bl	15590 <__assert_fail@plt+0x3f08>
   13570:	b	12fd0 <__assert_fail@plt+0x1948>
   13574:	ldr	r1, [pc, #-3464]	; 127f4 <__assert_fail@plt+0x116c>
   13578:	mov	r2, #5
   1357c:	mov	r0, #0
   13580:	add	r1, pc, r1
   13584:	bl	113dc <dcgettext@plt>
   13588:	mov	r2, r0
   1358c:	mov	r0, #0
   13590:	mov	r1, r0
   13594:	bl	11484 <error@plt>
   13598:	b	12be4 <__assert_fail@plt+0x155c>
   1359c:	mvn	r3, #0
   135a0:	str	r3, [r8, #48]	; 0x30
   135a4:	bl	11568 <__errno_location@plt>
   135a8:	mov	r3, r7
   135ac:	ldr	r2, [sp, #60]	; 0x3c
   135b0:	ldr	ip, [r0]
   135b4:	mov	r1, r0
   135b8:	mov	r0, r4
   135bc:	str	ip, [r8, #52]	; 0x34
   135c0:	ldr	r1, [r1]
   135c4:	bl	11484 <error@plt>
   135c8:	mov	r0, r6
   135cc:	bl	11670 <close@plt>
   135d0:	b	12fd0 <__assert_fail@plt+0x1948>
   135d4:	and	r3, ip, #61440	; 0xf000
   135d8:	cmp	r3, #32768	; 0x8000
   135dc:	beq	13880 <__assert_fail@plt+0x21f8>
   135e0:	ldr	r0, [r8, #16]
   135e4:	ldr	r3, [sp, #208]	; 0xd0
   135e8:	ldr	r2, [sp, #212]	; 0xd4
   135ec:	cmp	r3, r0
   135f0:	ldr	r0, [r8, #20]
   135f4:	bne	13090 <__assert_fail@plt+0x1a08>
   135f8:	cmp	r2, r0
   135fc:	bne	13090 <__assert_fail@plt+0x1a08>
   13600:	ldr	r4, [sp, #84]	; 0x54
   13604:	ldrd	r0, [r8, #72]	; 0x48
   13608:	ldrd	r6, [r4, #8]
   1360c:	adds	r2, r0, #1
   13610:	adc	r3, r1, #0
   13614:	strd	r2, [r8, #72]	; 0x48
   13618:	cmp	r1, r7
   1361c:	cmpeq	r0, r6
   13620:	bcc	12fd0 <__assert_fail@plt+0x1948>
   13624:	ldr	r3, [r4, #4]
   13628:	cmp	r3, #1
   1362c:	bne	12fd0 <__assert_fail@plt+0x1948>
   13630:	ldr	r1, [r8, #56]	; 0x38
   13634:	mov	r0, r8
   13638:	adds	r1, r1, #0
   1363c:	movne	r1, #1
   13640:	bl	15590 <__assert_fail@plt+0x3f08>
   13644:	mov	r2, #0
   13648:	mov	r3, #0
   1364c:	strd	r2, [r8, #72]	; 0x48
   13650:	b	12fd0 <__assert_fail@plt+0x1948>
   13654:	ldrd	r0, [sp, #176]	; 0xb0
   13658:	ldrd	r2, [r8, #8]
   1365c:	cmp	r0, r2
   13660:	sbcs	ip, r1, r3
   13664:	bge	130b8 <__assert_fail@plt+0x1a30>
   13668:	ldr	r1, [sp, #92]	; 0x5c
   1366c:	mov	r2, #5
   13670:	mov	r0, #0
   13674:	str	sl, [sp, #44]	; 0x2c
   13678:	bl	113dc <dcgettext@plt>
   1367c:	mov	r3, r7
   13680:	mov	r2, r0
   13684:	mov	r0, #0
   13688:	mov	r1, r0
   1368c:	bl	11484 <error@plt>
   13690:	ldrd	r2, [sp, #176]	; 0xb0
   13694:	mov	r1, #0
   13698:	str	r7, [sp, #4]
   1369c:	mov	r0, r6
   136a0:	str	r1, [sp]
   136a4:	bl	1477c <__assert_fail@plt+0x30f4>
   136a8:	ldrd	r2, [sp, #176]	; 0xb0
   136ac:	strd	r2, [r8, #8]
   136b0:	b	12fd0 <__assert_fail@plt+0x1948>
   136b4:	mov	r0, r7
   136b8:	str	sl, [sp, #44]	; 0x2c
   136bc:	bl	1422c <__assert_fail@plt+0x2ba4>
   136c0:	b	130d8 <__assert_fail@plt+0x1a50>
   136c4:	bl	11568 <__errno_location@plt>
   136c8:	ldr	r4, [sp, #36]	; 0x24
   136cc:	mov	r2, #5
   136d0:	ldr	r1, [sp, #108]	; 0x6c
   136d4:	ldr	ip, [r0]
   136d8:	mov	r3, r0
   136dc:	mov	r0, #0
   136e0:	str	ip, [r4, #52]	; 0x34
   136e4:	ldr	r4, [r3]
   136e8:	bl	113dc <dcgettext@plt>
   136ec:	ldr	r6, [sp, #44]	; 0x2c
   136f0:	ldr	r3, [r6, #-46]	; 0xffffffd2
   136f4:	ldrb	r2, [r3]
   136f8:	cmp	r2, #45	; 0x2d
   136fc:	mov	r5, r0
   13700:	bne	13838 <__assert_fail@plt+0x21b0>
   13704:	ldrb	r2, [r3, #1]
   13708:	cmp	r2, #0
   1370c:	bne	13838 <__assert_fail@plt+0x21b0>
   13710:	bl	14294 <__assert_fail@plt+0x2c0c>
   13714:	bl	19070 <close_stdout@@Base+0x2d64>
   13718:	mov	r1, r4
   1371c:	mov	r2, r5
   13720:	mov	r3, r0
   13724:	mov	r0, #0
   13728:	bl	11484 <error@plt>
   1372c:	b	125c8 <__assert_fail@plt+0xf40>
   13730:	mov	r0, #0
   13734:	bl	11670 <close@plt>
   13738:	cmp	r0, #0
   1373c:	bge	12bf8 <__assert_fail@plt+0x1570>
   13740:	bl	11568 <__errno_location@plt>
   13744:	ldr	r2, [pc, #-3924]	; 127f8 <__assert_fail@plt+0x1170>
   13748:	add	r2, pc, r2
   1374c:	ldr	r1, [r0]
   13750:	mov	r0, #1
   13754:	bl	11484 <error@plt>
   13758:	b	12bf8 <__assert_fail@plt+0x1570>
   1375c:	mov	r1, r6
   13760:	bl	114e4 <kill@plt>
   13764:	cmp	r0, #0
   13768:	beq	13524 <__assert_fail@plt+0x1e9c>
   1376c:	bl	11568 <__errno_location@plt>
   13770:	ldr	r3, [r0]
   13774:	cmp	r3, #1
   13778:	movne	r6, #1
   1377c:	strne	r6, [sp, #64]	; 0x40
   13780:	bne	12f6c <__assert_fail@plt+0x18e4>
   13784:	b	13524 <__assert_fail@plt+0x1e9c>
   13788:	ldr	r1, [pc, #-3988]	; 127fc <__assert_fail@plt+0x1174>
   1378c:	mov	r0, r7
   13790:	mov	r2, #5
   13794:	add	r1, pc, r1
   13798:	bl	113dc <dcgettext@plt>
   1379c:	mov	r1, r7
   137a0:	mov	r2, r0
   137a4:	mov	r0, r7
   137a8:	bl	11484 <error@plt>
   137ac:	b	11e14 <__assert_fail@plt+0x78c>
   137b0:	bl	11568 <__errno_location@plt>
   137b4:	ldr	r1, [pc, #-4028]	; 12800 <__assert_fail@plt+0x1178>
   137b8:	mov	r6, #0
   137bc:	mov	r2, #5
   137c0:	add	r1, pc, r1
   137c4:	ldr	r4, [r0]
   137c8:	mov	r0, r6
   137cc:	bl	113dc <dcgettext@plt>
   137d0:	mov	r5, r0
   137d4:	ldr	r0, [sp, #76]	; 0x4c
   137d8:	bl	19070 <close_stdout@@Base+0x2d64>
   137dc:	mov	r1, r4
   137e0:	mov	r2, r5
   137e4:	mov	r3, r0
   137e8:	mov	r0, r6
   137ec:	bl	11484 <error@plt>
   137f0:	b	12b7c <__assert_fail@plt+0x14f4>
   137f4:	bl	11568 <__errno_location@plt>
   137f8:	ldr	r1, [pc, #-4092]	; 12804 <__assert_fail@plt+0x117c>
   137fc:	mov	r6, #0
   13800:	mov	r2, #5
   13804:	add	r1, pc, r1
   13808:	ldr	r4, [r0]
   1380c:	mov	r0, r6
   13810:	bl	113dc <dcgettext@plt>
   13814:	mov	r7, r0
   13818:	ldr	r0, [sp, #76]	; 0x4c
   1381c:	bl	19070 <close_stdout@@Base+0x2d64>
   13820:	mov	r1, r4
   13824:	mov	r2, r7
   13828:	mov	r3, r0
   1382c:	mov	r0, r6
   13830:	bl	11484 <error@plt>
   13834:	b	12ba0 <__assert_fail@plt+0x1518>
   13838:	mov	r0, r3
   1383c:	b	13714 <__assert_fail@plt+0x208c>
   13840:	bl	11568 <__errno_location@plt>
   13844:	ldr	r1, [pc, #1860]	; 13f90 <__assert_fail@plt+0x2908>
   13848:	mov	r2, #5
   1384c:	add	r1, pc, r1
   13850:	ldr	r4, [r0]
   13854:	mov	r0, #0
   13858:	bl	113dc <dcgettext@plt>
   1385c:	mov	r1, r4
   13860:	mov	r2, r0
   13864:	mov	r0, #1
   13868:	bl	11484 <error@plt>
   1386c:	b	134fc <__assert_fail@plt+0x1e74>
   13870:	mov	r0, #0
   13874:	bl	114fc <exit@plt>
   13878:	strb	ip, [r3, #44]	; 0x2c
   1387c:	b	12ebc <__assert_fail@plt+0x1834>
   13880:	ldrd	r0, [r8, #8]
   13884:	ldrd	r2, [sp, #176]	; 0xb0
   13888:	cmp	r1, r3
   1388c:	cmpeq	r0, r2
   13890:	bne	13088 <__assert_fail@plt+0x1a00>
   13894:	b	135e0 <__assert_fail@plt+0x1f58>
   13898:	ldr	r1, [pc, #1780]	; 13f94 <__assert_fail@plt+0x290c>
   1389c:	mov	r2, #5
   138a0:	mov	r0, #0
   138a4:	add	r1, pc, r1
   138a8:	bl	113dc <dcgettext@plt>
   138ac:	mov	r6, r0
   138b0:	ldr	r0, [pc, #1760]	; 13f98 <__assert_fail@plt+0x2910>
   138b4:	add	r0, pc, r0
   138b8:	bl	19070 <close_stdout@@Base+0x2d64>
   138bc:	mov	r2, r6
   138c0:	mov	r1, #0
   138c4:	mov	r3, r0
   138c8:	mov	r0, r4
   138cc:	bl	11484 <error@plt>
   138d0:	b	11eb8 <__assert_fail@plt+0x830>
   138d4:	mov	r2, r5
   138d8:	mov	r3, r5
   138dc:	mov	r7, #1
   138e0:	ldr	r0, [sp, #32]
   138e4:	str	r7, [sp]
   138e8:	bl	11448 <lseek64@plt>
   138ec:	mvn	r2, #0
   138f0:	mvn	r3, #0
   138f4:	mov	r8, r0
   138f8:	mov	r9, r1
   138fc:	cmp	r9, r3
   13900:	cmpeq	r8, r2
   13904:	beq	123bc <__assert_fail@plt+0xd34>
   13908:	mov	r2, r5
   1390c:	mov	r3, r5
   13910:	mov	r1, #2
   13914:	ldr	r0, [sp, #32]
   13918:	str	r1, [sp]
   1391c:	bl	11448 <lseek64@plt>
   13920:	mov	r2, r0
   13924:	mov	r3, r1
   13928:	cmp	r8, r2
   1392c:	sbcs	fp, r9, r3
   13930:	bge	139d0 <__assert_fail@plt+0x2348>
   13934:	orrs	ip, r2, r3
   13938:	strd	r2, [sp, #120]	; 0x78
   1393c:	moveq	r6, r7
   13940:	beq	122c8 <__assert_fail@plt+0xc40>
   13944:	strd	r2, [sp, #8]
   13948:	add	ip, sp, #120	; 0x78
   1394c:	strd	r8, [sp]
   13950:	ldr	r0, [sp, #76]	; 0x4c
   13954:	ldrd	r2, [sp, #48]	; 0x30
   13958:	ldr	r1, [sp, #32]
   1395c:	str	ip, [sp, #16]
   13960:	bl	148a4 <__assert_fail@plt+0x321c>
   13964:	mov	r6, r0
   13968:	b	122c8 <__assert_fail@plt+0xc40>
   1396c:	bl	1431c <__assert_fail@plt+0x2c94>
   13970:	b	12a44 <__assert_fail@plt+0x13bc>
   13974:	ldr	r1, [pc, #1568]	; 13f9c <__assert_fail@plt+0x2914>
   13978:	mov	r2, #5
   1397c:	mov	r0, #0
   13980:	add	r1, pc, r1
   13984:	bl	113dc <dcgettext@plt>
   13988:	mov	r2, r0
   1398c:	mov	r0, #0
   13990:	mov	r1, r0
   13994:	bl	11484 <error@plt>
   13998:	b	11edc <__assert_fail@plt+0x854>
   1399c:	ldr	fp, [sp, #76]	; 0x4c
   139a0:	mov	r3, #2
   139a4:	str	r3, [sp]
   139a8:	ldrd	r2, [sp, #48]	; 0x30
   139ac:	str	fp, [sp, #4]
   139b0:	ldr	r0, [sp, #32]
   139b4:	rsbs	r2, r2, #0
   139b8:	rsc	r3, r3, #0
   139bc:	bl	1477c <__assert_fail@plt+0x30f4>
   139c0:	strd	r0, [sp, #120]	; 0x78
   139c4:	b	12e24 <__assert_fail@plt+0x179c>
   139c8:	str	r3, [sp, #64]	; 0x40
   139cc:	b	121b4 <__assert_fail@plt+0xb2c>
   139d0:	ldr	r4, [sp, #76]	; 0x4c
   139d4:	mov	r2, r8
   139d8:	str	r6, [sp]
   139dc:	mov	r3, r9
   139e0:	ldr	r0, [sp, #32]
   139e4:	str	r4, [sp, #4]
   139e8:	bl	1477c <__assert_fail@plt+0x30f4>
   139ec:	b	123bc <__assert_fail@plt+0xd34>
   139f0:	cmp	fp, r1
   139f4:	bne	12f24 <__assert_fail@plt+0x189c>
   139f8:	ldr	ip, [sp, #72]	; 0x48
   139fc:	ldr	r3, [ip, #40]	; 0x28
   13a00:	and	r3, r3, #61440	; 0xf000
   13a04:	subs	r3, r3, #32768	; 0x8000
   13a08:	movne	r3, #1
   13a0c:	str	r3, [sp, #48]	; 0x30
   13a10:	b	12f28 <__assert_fail@plt+0x18a0>
   13a14:	ldr	r4, [sp, #40]	; 0x28
   13a18:	ldr	sl, [sp, #44]	; 0x2c
   13a1c:	cmp	r4, #0
   13a20:	bne	13af8 <__assert_fail@plt+0x2470>
   13a24:	ldr	r3, [pc, #1396]	; 13fa0 <__assert_fail@plt+0x2918>
   13a28:	add	r3, pc, r3
   13a2c:	ldr	r3, [r3, #4]
   13a30:	cmp	r3, #2
   13a34:	beq	14098 <__assert_fail@plt+0x2a10>
   13a38:	ldr	r6, [sp, #80]	; 0x50
   13a3c:	add	r5, sp, #368	; 0x170
   13a40:	ldr	r4, [sp, #72]	; 0x48
   13a44:	ldr	r3, [r6, #-20]	; 0xffffffec
   13a48:	mov	r6, #0
   13a4c:	str	r3, [r5, #-248]!	; 0xffffff08
   13a50:	b	13a5c <__assert_fail@plt+0x23d4>
   13a54:	add	r6, r6, #1
   13a58:	add	r4, r4, #80	; 0x50
   13a5c:	cmp	r6, fp
   13a60:	beq	13b34 <__assert_fail@plt+0x24ac>
   13a64:	ldrb	r3, [r4, #44]	; 0x2c
   13a68:	cmp	r3, #0
   13a6c:	bne	13a54 <__assert_fail@plt+0x23cc>
   13a70:	mov	r0, r4
   13a74:	ldr	r1, [r4, #60]	; 0x3c
   13a78:	mov	r2, r5
   13a7c:	bl	14c24 <__assert_fail@plt+0x359c>
   13a80:	b	13a54 <__assert_fail@plt+0x23cc>
   13a84:	ldr	r1, [sp, #68]	; 0x44
   13a88:	mov	r2, #5
   13a8c:	mov	r0, #0
   13a90:	mov	sl, #1
   13a94:	str	sl, [sp, #40]	; 0x28
   13a98:	bl	113dc <dcgettext@plt>
   13a9c:	mov	r2, r0
   13aa0:	mov	r0, #0
   13aa4:	mov	r1, r0
   13aa8:	bl	11484 <error@plt>
   13aac:	b	132a8 <__assert_fail@plt+0x1c20>
   13ab0:	bl	11568 <__errno_location@plt>
   13ab4:	ldr	sl, [sp, #44]	; 0x2c
   13ab8:	ldr	r5, [r0]
   13abc:	mov	r0, #0
   13ac0:	cmp	r5, #28
   13ac4:	beq	140a8 <__assert_fail@plt+0x2a20>
   13ac8:	ldr	r1, [pc, #1236]	; 13fa4 <__assert_fail@plt+0x291c>
   13acc:	mov	r2, #5
   13ad0:	add	r1, pc, r1
   13ad4:	bl	113dc <dcgettext@plt>
   13ad8:	mov	r6, r0
   13adc:	ldr	r0, [r9]
   13ae0:	bl	19070 <close_stdout@@Base+0x2d64>
   13ae4:	mov	r2, r6
   13ae8:	mov	r1, r5
   13aec:	mov	r3, r0
   13af0:	mov	r0, #0
   13af4:	bl	11484 <error@plt>
   13af8:	bl	11568 <__errno_location@plt>
   13afc:	mov	r3, #0
   13b00:	str	r3, [r0]
   13b04:	bl	11568 <__errno_location@plt>
   13b08:	ldr	r1, [pc, #1176]	; 13fa8 <__assert_fail@plt+0x2920>
   13b0c:	mov	r2, #5
   13b10:	add	r1, pc, r1
   13b14:	ldr	r4, [r0]
   13b18:	mov	r0, #0
   13b1c:	bl	113dc <dcgettext@plt>
   13b20:	mov	r1, r4
   13b24:	mov	r2, r0
   13b28:	mov	r0, #0
   13b2c:	bl	11484 <error@plt>
   13b30:	b	12eec <__assert_fail@plt+0x1864>
   13b34:	add	r7, r7, #17
   13b38:	ldr	sl, [pc, #1132]	; 13fac <__assert_fail@plt+0x2924>
   13b3c:	str	r7, [sp, #80]	; 0x50
   13b40:	add	r7, sp, #236	; 0xec
   13b44:	ldr	ip, [pc, #1124]	; 13fb0 <__assert_fail@plt+0x2928>
   13b48:	add	sl, pc, sl
   13b4c:	ldr	r0, [sp, #80]	; 0x50
   13b50:	mov	r6, #0
   13b54:	str	r7, [sp, #64]	; 0x40
   13b58:	add	ip, pc, ip
   13b5c:	str	sl, [sp, #44]	; 0x2c
   13b60:	add	sl, sp, #360	; 0x168
   13b64:	str	ip, [sp, #76]	; 0x4c
   13b68:	bl	196b8 <close_stdout@@Base+0x33ac>
   13b6c:	ldr	r4, [sp, #32]
   13b70:	mov	r7, #3
   13b74:	ldr	r5, [pc, #1080]	; 13fb4 <__assert_fail@plt+0x292c>
   13b78:	mov	r2, #1
   13b7c:	and	r3, r4, #31
   13b80:	str	r7, [sp, #84]	; 0x54
   13b84:	mov	r9, sl
   13b88:	mov	r7, r6
   13b8c:	add	r5, pc, r5
   13b90:	lsl	r2, r2, r3
   13b94:	str	r5, [sp, #48]	; 0x30
   13b98:	vldr	d9, [pc, #1000]	; 13f88 <__assert_fail@plt+0x2900>
   13b9c:	str	r2, [sp, #68]	; 0x44
   13ba0:	str	r6, [sp, #40]	; 0x28
   13ba4:	str	r6, [sp, #36]	; 0x24
   13ba8:	str	r0, [sp, #56]	; 0x38
   13bac:	ldr	sl, [sp, #44]	; 0x2c
   13bb0:	ldr	r3, [sl, #4]
   13bb4:	cmp	r3, #1
   13bb8:	beq	13e4c <__assert_fail@plt+0x27c4>
   13bbc:	ldr	r4, [sp, #48]	; 0x30
   13bc0:	ldr	r0, [r4, #8]
   13bc4:	cmp	r0, #0
   13bc8:	beq	13c70 <__assert_fail@plt+0x25e8>
   13bcc:	ldr	r5, [sp, #36]	; 0x24
   13bd0:	cmp	r5, #0
   13bd4:	bne	13870 <__assert_fail@plt+0x21e8>
   13bd8:	mov	r1, r5
   13bdc:	bl	114e4 <kill@plt>
   13be0:	cmp	r0, #0
   13be4:	beq	13e2c <__assert_fail@plt+0x27a4>
   13be8:	bl	11568 <__errno_location@plt>
   13bec:	ldr	r3, [r0]
   13bf0:	cmp	r3, #1
   13bf4:	beq	13e2c <__assert_fail@plt+0x27a4>
   13bf8:	ldr	r6, [sp, #36]	; 0x24
   13bfc:	mov	sl, #1
   13c00:	str	sl, [sp, #36]	; 0x24
   13c04:	str	r6, [sp, #132]	; 0x84
   13c08:	str	r6, [sp, #128]	; 0x80
   13c0c:	add	r3, sp, #232	; 0xe8
   13c10:	mov	r2, #0
   13c14:	str	r2, [r3, #4]!
   13c18:	cmp	r3, r9
   13c1c:	bne	13c14 <__assert_fail@plt+0x258c>
   13c20:	ldr	r0, [sp, #32]
   13c24:	add	r6, sp, #368	; 0x170
   13c28:	bl	11400 <__fdelt_chk@plt>
   13c2c:	add	r1, sp, #128	; 0x80
   13c30:	ldr	sl, [sp, #32]
   13c34:	mov	r2, #0
   13c38:	str	r1, [sp]
   13c3c:	mov	r3, r2
   13c40:	ldr	ip, [sp, #68]	; 0x44
   13c44:	add	r1, sp, #236	; 0xec
   13c48:	add	lr, r6, r0, lsl #2
   13c4c:	add	r0, sl, #1
   13c50:	ldr	r4, [lr, #-132]	; 0xffffff7c
   13c54:	orr	r4, r4, ip
   13c58:	str	r4, [lr, #-132]	; 0xffffff7c
   13c5c:	bl	113d0 <select@plt>
   13c60:	cmp	r0, #0
   13c64:	beq	13bac <__assert_fail@plt+0x2524>
   13c68:	cmn	r0, #1
   13c6c:	beq	1404c <__assert_fail@plt+0x29c4>
   13c70:	ldr	r4, [sp, #40]	; 0x28
   13c74:	cmp	r4, r7
   13c78:	bls	13e94 <__assert_fail@plt+0x280c>
   13c7c:	ldr	r4, [sp, #56]	; 0x38
   13c80:	add	r8, r4, r7
   13c84:	ldr	r3, [r8, #12]
   13c88:	cmp	r3, #0
   13c8c:	add	r3, r3, #16
   13c90:	add	r7, r7, r3
   13c94:	beq	13f00 <__assert_fail@plt+0x2878>
   13c98:	cmp	fp, #0
   13c9c:	beq	13bac <__assert_fail@plt+0x2524>
   13ca0:	mov	r6, r8
   13ca4:	ldr	r4, [sp, #72]	; 0x48
   13ca8:	ldr	sl, [r6], #16
   13cac:	mov	r5, #0
   13cb0:	b	13cc4 <__assert_fail@plt+0x263c>
   13cb4:	add	r5, r5, #1
   13cb8:	add	r4, r4, #80	; 0x50
   13cbc:	cmp	r5, fp
   13cc0:	beq	13bac <__assert_fail@plt+0x2524>
   13cc4:	ldr	r3, [r4, #64]	; 0x40
   13cc8:	cmp	sl, r3
   13ccc:	bne	13cb4 <__assert_fail@plt+0x262c>
   13cd0:	ldr	r3, [r4, #68]	; 0x44
   13cd4:	mov	r0, r6
   13cd8:	ldr	r1, [r4]
   13cdc:	add	r1, r1, r3
   13ce0:	bl	11340 <strcmp@plt>
   13ce4:	cmp	r0, #0
   13ce8:	bne	13cb4 <__assert_fail@plt+0x262c>
   13cec:	cmp	fp, r5
   13cf0:	mov	ip, r0
   13cf4:	beq	13bac <__assert_fail@plt+0x2524>
   13cf8:	mov	r2, #80	; 0x50
   13cfc:	ldr	r6, [sp, #72]	; 0x48
   13d00:	mul	r5, r2, r5
   13d04:	ldr	r0, [sp, #32]
   13d08:	movw	r2, #3078	; 0xc06
   13d0c:	add	r4, r6, r5
   13d10:	ldr	r1, [r6, r5]
   13d14:	str	ip, [sp, #28]
   13d18:	bl	1155c <inotify_add_watch@plt>
   13d1c:	ldr	ip, [sp, #28]
   13d20:	subs	r6, r0, #0
   13d24:	blt	13ff8 <__assert_fail@plt+0x2970>
   13d28:	mov	r1, r4
   13d2c:	ldr	r0, [sp, #60]	; 0x3c
   13d30:	str	ip, [sp, #28]
   13d34:	bl	17580 <close_stdout@@Base+0x1274>
   13d38:	str	r6, [r4, #60]	; 0x3c
   13d3c:	mov	r1, r4
   13d40:	ldr	r0, [sp, #60]	; 0x3c
   13d44:	bl	17580 <close_stdout@@Base+0x1274>
   13d48:	ldr	ip, [sp, #28]
   13d4c:	cmp	r4, r0
   13d50:	cmpne	r0, #0
   13d54:	mov	r5, r0
   13d58:	beq	13da8 <__assert_fail@plt+0x2720>
   13d5c:	ldr	r2, [pc, #596]	; 13fb8 <__assert_fail@plt+0x2930>
   13d60:	add	r2, pc, r2
   13d64:	ldr	r2, [r2, #4]
   13d68:	cmp	r2, #1
   13d6c:	beq	1408c <__assert_fail@plt+0x2a04>
   13d70:	ldr	r3, [r5]
   13d74:	mvn	r2, #0
   13d78:	str	r2, [r5, #60]	; 0x3c
   13d7c:	ldr	r5, [r5, #48]	; 0x30
   13d80:	ldrb	r2, [r3]
   13d84:	cmp	r2, #45	; 0x2d
   13d88:	bne	14044 <__assert_fail@plt+0x29bc>
   13d8c:	ldrb	r2, [r3, #1]
   13d90:	cmp	r2, #0
   13d94:	bne	14044 <__assert_fail@plt+0x29bc>
   13d98:	bl	14294 <__assert_fail@plt+0x2c0c>
   13d9c:	mov	r1, r0
   13da0:	mov	r0, r5
   13da4:	bl	142ac <__assert_fail@plt+0x2c24>
   13da8:	ldr	r0, [sp, #60]	; 0x3c
   13dac:	mov	r1, r4
   13db0:	bl	1750c <close_stdout@@Base+0x1200>
   13db4:	cmp	r0, #0
   13db8:	beq	11f20 <__assert_fail@plt+0x898>
   13dbc:	ldr	r3, [pc, #504]	; 13fbc <__assert_fail@plt+0x2934>
   13dc0:	add	r3, pc, r3
   13dc4:	ldr	r3, [r3, #4]
   13dc8:	cmp	r3, #1
   13dcc:	beq	1407c <__assert_fail@plt+0x29f4>
   13dd0:	ldr	r2, [r8, #4]
   13dd4:	movw	r3, #3076	; 0xc04
   13dd8:	and	r3, r2, r3
   13ddc:	cmp	r3, #0
   13de0:	beq	13f74 <__assert_fail@plt+0x28ec>
   13de4:	tst	r2, #1024	; 0x400
   13de8:	bne	13fdc <__assert_fail@plt+0x2954>
   13dec:	tst	r2, #2048	; 0x800
   13df0:	beq	13e08 <__assert_fail@plt+0x2780>
   13df4:	ldr	r3, [pc, #452]	; 13fc0 <__assert_fail@plt+0x2938>
   13df8:	add	r3, pc, r3
   13dfc:	ldr	r3, [r3, #4]
   13e00:	cmp	r3, #2
   13e04:	beq	13fdc <__assert_fail@plt+0x2954>
   13e08:	ldr	r3, [pc, #436]	; 13fc4 <__assert_fail@plt+0x293c>
   13e0c:	add	r3, pc, r3
   13e10:	ldr	r3, [r3, #4]
   13e14:	cmp	r3, #1
   13e18:	bne	13bac <__assert_fail@plt+0x2524>
   13e1c:	mov	r0, r4
   13e20:	mov	r1, #0
   13e24:	bl	15590 <__assert_fail@plt+0x3f08>
   13e28:	b	13bac <__assert_fail@plt+0x2524>
   13e2c:	vcvt.s32.f64	s13, d8
   13e30:	vcvt.f64.s32	d7, s13
   13e34:	vstr	s13, [sp, #128]	; 0x80
   13e38:	vsub.f64	d7, d8, d7
   13e3c:	vmul.f64	d7, d7, d9
   13e40:	vcvt.s32.f64	s14, d7
   13e44:	vstr	s14, [sp, #132]	; 0x84
   13e48:	b	13c0c <__assert_fail@plt+0x2584>
   13e4c:	ldr	ip, [sp, #76]	; 0x4c
   13e50:	ldrb	r3, [ip, #1]
   13e54:	cmp	r3, #0
   13e58:	bne	13bbc <__assert_fail@plt+0x2534>
   13e5c:	ldr	r0, [sp, #60]	; 0x3c
   13e60:	bl	16a24 <close_stdout@@Base+0x718>
   13e64:	subs	r4, r0, #0
   13e68:	bne	13bbc <__assert_fail@plt+0x2534>
   13e6c:	ldr	r1, [pc, #340]	; 13fc8 <__assert_fail@plt+0x2940>
   13e70:	mov	r2, #5
   13e74:	add	r1, pc, r1
   13e78:	bl	113dc <dcgettext@plt>
   13e7c:	mov	r1, r4
   13e80:	mov	r2, r0
   13e84:	mov	r0, r4
   13e88:	bl	11484 <error@plt>
   13e8c:	mov	r0, #1
   13e90:	bl	114fc <exit@plt>
   13e94:	ldr	r0, [sp, #32]
   13e98:	ldr	r1, [sp, #56]	; 0x38
   13e9c:	ldr	r2, [sp, #80]	; 0x50
   13ea0:	bl	1907c <close_stdout@@Base+0x2d70>
   13ea4:	cmp	r0, #0
   13ea8:	str	r0, [sp, #40]	; 0x28
   13eac:	beq	13f30 <__assert_fail@plt+0x28a8>
   13eb0:	cmn	r0, #1
   13eb4:	beq	13f20 <__assert_fail@plt+0x2898>
   13eb8:	ldr	ip, [sp, #40]	; 0x28
   13ebc:	sub	r3, ip, #1
   13ec0:	cmn	r3, #3
   13ec4:	movls	r7, #0
   13ec8:	bls	13c7c <__assert_fail@plt+0x25f4>
   13ecc:	bl	11568 <__errno_location@plt>
   13ed0:	ldr	r1, [pc, #244]	; 13fcc <__assert_fail@plt+0x2944>
   13ed4:	mov	r7, #0
   13ed8:	mov	r2, #5
   13edc:	add	r1, pc, r1
   13ee0:	ldr	r4, [r0]
   13ee4:	mov	r0, r7
   13ee8:	bl	113dc <dcgettext@plt>
   13eec:	mov	r1, r4
   13ef0:	mov	r2, r0
   13ef4:	mov	r0, #1
   13ef8:	bl	11484 <error@plt>
   13efc:	b	13c7c <__assert_fail@plt+0x25f4>
   13f00:	ldr	r3, [r8]
   13f04:	add	r1, sp, #128	; 0x80
   13f08:	ldr	r0, [sp, #60]	; 0x3c
   13f0c:	str	r3, [sp, #188]	; 0xbc
   13f10:	bl	16c30 <close_stdout@@Base+0x924>
   13f14:	subs	r4, r0, #0
   13f18:	bne	13dd0 <__assert_fail@plt+0x2748>
   13f1c:	b	13bac <__assert_fail@plt+0x2524>
   13f20:	bl	11568 <__errno_location@plt>
   13f24:	ldr	r3, [r0]
   13f28:	cmp	r3, #22
   13f2c:	bne	13ecc <__assert_fail@plt+0x2844>
   13f30:	ldr	r5, [sp, #84]	; 0x54
   13f34:	cmp	r5, #0
   13f38:	mvneq	sl, #0
   13f3c:	streq	sl, [sp, #84]	; 0x54
   13f40:	beq	13eb8 <__assert_fail@plt+0x2830>
   13f44:	ldr	r6, [sp, #80]	; 0x50
   13f48:	mov	r7, #0
   13f4c:	ldr	r0, [sp, #56]	; 0x38
   13f50:	sub	r5, r5, #1
   13f54:	str	r7, [sp, #40]	; 0x28
   13f58:	lsl	r6, r6, #1
   13f5c:	str	r5, [sp, #84]	; 0x54
   13f60:	str	r6, [sp, #80]	; 0x50
   13f64:	mov	r1, r6
   13f68:	bl	19710 <close_stdout@@Base+0x3404>
   13f6c:	str	r0, [sp, #56]	; 0x38
   13f70:	b	13bac <__assert_fail@plt+0x2524>
   13f74:	mov	r0, r4
   13f78:	ldr	r1, [r8]
   13f7c:	add	r2, sp, #120	; 0x78
   13f80:	bl	14c24 <__assert_fail@plt+0x359c>
   13f84:	b	13bac <__assert_fail@plt+0x2524>
   13f88:	andeq	r0, r0, r0
   13f8c:	smlawbmi	lr, r0, r4, r8
   13f90:	andeq	r8, r0, r8, lsr r4
   13f94:	andeq	r9, r0, r8, lsr #8
   13f98:	andeq	r9, r0, r4, lsr r4
   13f9c:	andeq	r9, r0, ip, ror #6
   13fa0:	andeq	sl, r1, r8, asr r7
   13fa4:	ldrdeq	r9, [r0], -r0
   13fa8:	andeq	r9, r0, r0, lsr r3
   13fac:	andeq	sl, r1, r8, lsr r6
   13fb0:	andeq	sl, r1, ip, lsl #13
   13fb4:	andeq	sl, r1, r8, asr r6
   13fb8:	andeq	sl, r1, r0, lsr #8
   13fbc:	andeq	sl, r1, r0, asr #7
   13fc0:	andeq	sl, r1, r8, lsl #7
   13fc4:	andeq	sl, r1, r4, ror r3
   13fc8:	andeq	r8, r0, ip, ror pc
   13fcc:	andeq	r8, r0, r8, asr #30
   13fd0:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   13fd4:	andeq	r8, r0, ip, lsr #27
   13fd8:	andeq	r8, r0, r4, lsl sp
   13fdc:	ldr	r1, [r4, #60]	; 0x3c
   13fe0:	ldr	r0, [sp, #32]
   13fe4:	bl	1164c <inotify_rm_watch@plt>
   13fe8:	ldr	r0, [sp, #60]	; 0x3c
   13fec:	mov	r1, r4
   13ff0:	bl	17580 <close_stdout@@Base+0x1274>
   13ff4:	b	13e08 <__assert_fail@plt+0x2780>
   13ff8:	bl	11568 <__errno_location@plt>
   13ffc:	ldr	ip, [sp, #28]
   14000:	ldr	r1, [pc, #-56]	; 13fd0 <__assert_fail@plt+0x2948>
   14004:	mov	r2, #5
   14008:	add	r1, pc, r1
   1400c:	ldr	r4, [r0]
   14010:	mov	r0, ip
   14014:	bl	113dc <dcgettext@plt>
   14018:	ldr	sl, [sp, #72]	; 0x48
   1401c:	mov	r6, r0
   14020:	ldr	r0, [sl, r5]
   14024:	bl	19070 <close_stdout@@Base+0x2d64>
   14028:	ldr	ip, [sp, #28]
   1402c:	mov	r1, r4
   14030:	mov	r2, r6
   14034:	mov	r3, r0
   14038:	mov	r0, ip
   1403c:	bl	11484 <error@plt>
   14040:	b	13bac <__assert_fail@plt+0x2524>
   14044:	mov	r1, r3
   14048:	b	13da0 <__assert_fail@plt+0x2718>
   1404c:	bl	11568 <__errno_location@plt>
   14050:	ldr	r1, [pc, #-132]	; 13fd4 <__assert_fail@plt+0x294c>
   14054:	mov	r2, #5
   14058:	add	r1, pc, r1
   1405c:	ldr	r4, [r0]
   14060:	mov	r0, #0
   14064:	bl	113dc <dcgettext@plt>
   14068:	mov	r1, r4
   1406c:	mov	r2, r0
   14070:	mov	r0, #1
   14074:	bl	11484 <error@plt>
   14078:	b	13c70 <__assert_fail@plt+0x25e8>
   1407c:	mov	r0, r4
   14080:	mov	r1, #0
   14084:	bl	15590 <__assert_fail@plt+0x3f08>
   14088:	b	13dd0 <__assert_fail@plt+0x2748>
   1408c:	mov	r1, ip
   14090:	bl	15590 <__assert_fail@plt+0x3f08>
   14094:	b	13d70 <__assert_fail@plt+0x26e8>
   14098:	ldr	r5, [sp, #36]	; 0x24
   1409c:	cmp	r5, #0
   140a0:	bne	13a38 <__assert_fail@plt+0x23b0>
   140a4:	b	13e8c <__assert_fail@plt+0x2804>
   140a8:	ldr	r1, [pc, #-216]	; 13fd8 <__assert_fail@plt+0x2950>
   140ac:	mov	r2, #5
   140b0:	add	r1, pc, r1
   140b4:	bl	113dc <dcgettext@plt>
   140b8:	mov	r2, r0
   140bc:	mov	r0, #0
   140c0:	mov	r1, r0
   140c4:	bl	11484 <error@plt>
   140c8:	b	13af8 <__assert_fail@plt+0x2470>
   140cc:	mov	fp, #0
   140d0:	mov	lr, #0
   140d4:	pop	{r1}		; (ldr r1, [sp], #4)
   140d8:	mov	r2, sp
   140dc:	push	{r2}		; (str r2, [sp, #-4]!)
   140e0:	push	{r0}		; (str r0, [sp, #-4]!)
   140e4:	ldr	ip, [pc, #16]	; 140fc <__assert_fail@plt+0x2a74>
   140e8:	push	{ip}		; (str ip, [sp, #-4]!)
   140ec:	ldr	r0, [pc, #12]	; 14100 <__assert_fail@plt+0x2a78>
   140f0:	ldr	r3, [pc, #12]	; 14104 <__assert_fail@plt+0x2a7c>
   140f4:	bl	114b4 <__libc_start_main@plt>
   140f8:	bl	11664 <abort@plt>
   140fc:	strdeq	fp, [r1], -ip
   14100:	muleq	r1, r8, r6
   14104:	muleq	r1, r8, fp
   14108:	ldr	r3, [pc, #20]	; 14124 <__assert_fail@plt+0x2a9c>
   1410c:	ldr	r2, [pc, #20]	; 14128 <__assert_fail@plt+0x2aa0>
   14110:	add	r3, pc, r3
   14114:	ldr	r2, [r3, r2]
   14118:	cmp	r2, #0
   1411c:	bxeq	lr
   14120:	b	114cc <__gmon_start__@plt>
   14124:	andeq	r9, r1, r8, ror #29
   14128:	andeq	r0, r0, r8, asr r1
   1412c:	push	{r3, lr}
   14130:	movw	r0, #57832	; 0xe1e8
   14134:	ldr	r3, [pc, #36]	; 14160 <__assert_fail@plt+0x2ad8>
   14138:	movt	r0, #2
   1413c:	rsb	r3, r0, r3
   14140:	cmp	r3, #6
   14144:	popls	{r3, pc}
   14148:	movw	r3, #0
   1414c:	movt	r3, #0
   14150:	cmp	r3, #0
   14154:	popeq	{r3, pc}
   14158:	blx	r3
   1415c:	pop	{r3, pc}
   14160:	andeq	lr, r2, fp, ror #3
   14164:	push	{r3, lr}
   14168:	movw	r0, #57832	; 0xe1e8
   1416c:	movw	r3, #57832	; 0xe1e8
   14170:	movt	r0, #2
   14174:	movt	r3, #2
   14178:	rsb	r3, r0, r3
   1417c:	asr	r3, r3, #2
   14180:	add	r3, r3, r3, lsr #31
   14184:	asrs	r1, r3, #1
   14188:	popeq	{r3, pc}
   1418c:	movw	r2, #0
   14190:	movt	r2, #0
   14194:	cmp	r2, #0
   14198:	popeq	{r3, pc}
   1419c:	blx	r2
   141a0:	pop	{r3, pc}
   141a4:	push	{r4, lr}
   141a8:	movw	r4, #57832	; 0xe1e8
   141ac:	movt	r4, #2
   141b0:	ldrb	r3, [r4]
   141b4:	cmp	r3, #0
   141b8:	popne	{r4, pc}
   141bc:	bl	1412c <__assert_fail@plt+0x2aa4>
   141c0:	mov	r3, #1
   141c4:	strb	r3, [r4]
   141c8:	pop	{r4, pc}
   141cc:	movw	r0, #56804	; 0xdde4
   141d0:	movt	r0, #2
   141d4:	push	{r3, lr}
   141d8:	ldr	r3, [r0]
   141dc:	cmp	r3, #0
   141e0:	beq	141f8 <__assert_fail@plt+0x2b70>
   141e4:	movw	r3, #0
   141e8:	movt	r3, #0
   141ec:	cmp	r3, #0
   141f0:	beq	141f8 <__assert_fail@plt+0x2b70>
   141f4:	blx	r3
   141f8:	pop	{r3, lr}
   141fc:	b	14164 <__assert_fail@plt+0x2adc>
   14200:	push	{r3, lr}
   14204:	ldr	r0, [r0, #60]	; 0x3c
   14208:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1420c:	mov	r0, r1
   14210:	pop	{r3, pc}
   14214:	ldr	r3, [r0, #60]	; 0x3c
   14218:	ldr	r0, [r1, #60]	; 0x3c
   1421c:	subs	r3, r3, r0
   14220:	rsbs	r0, r3, #0
   14224:	adcs	r0, r0, r3
   14228:	bx	lr
   1422c:	ldr	r2, [pc, #76]	; 14280 <__assert_fail@plt+0x2bf8>
   14230:	push	{r3, lr}
   14234:	add	r2, pc, r2
   14238:	mov	r3, r0
   1423c:	ldrb	r2, [r2]
   14240:	cmp	r2, #0
   14244:	bne	14274 <__assert_fail@plt+0x2bec>
   14248:	ldr	r2, [pc, #52]	; 14284 <__assert_fail@plt+0x2bfc>
   1424c:	add	r2, pc, r2
   14250:	ldr	r1, [pc, #48]	; 14288 <__assert_fail@plt+0x2c00>
   14254:	mov	r0, #1
   14258:	add	r1, pc, r1
   1425c:	bl	11598 <__printf_chk@plt>
   14260:	ldr	r3, [pc, #36]	; 1428c <__assert_fail@plt+0x2c04>
   14264:	mov	r2, #0
   14268:	add	r3, pc, r3
   1426c:	strb	r2, [r3]
   14270:	pop	{r3, pc}
   14274:	ldr	r2, [pc, #20]	; 14290 <__assert_fail@plt+0x2c08>
   14278:	add	r2, pc, r2
   1427c:	b	14250 <__assert_fail@plt+0x2bc8>
   14280:	andeq	r9, r1, ip, asr #30
   14284:	andeq	r7, r0, ip, lsr #27
   14288:	strdeq	r7, [r0], -r8
   1428c:	andeq	r9, r1, r8, lsl pc
   14290:	andeq	r8, r0, r4, ror #15
   14294:	ldr	r1, [pc, #12]	; 142a8 <__assert_fail@plt+0x2c20>
   14298:	mov	r0, #0
   1429c:	mov	r2, #5
   142a0:	add	r1, pc, r1
   142a4:	b	113dc <dcgettext@plt>
   142a8:	andeq	r7, r0, r0, asr #19
   142ac:	add	r3, r0, #1
   142b0:	cmp	r3, #1
   142b4:	push	{r4, r5, r6, lr}
   142b8:	mov	r4, r0
   142bc:	sub	sp, sp, #8
   142c0:	mov	r5, r1
   142c4:	bls	142d4 <__assert_fail@plt+0x2c4c>
   142c8:	bl	11670 <close@plt>
   142cc:	cmp	r0, #0
   142d0:	bne	142dc <__assert_fail@plt+0x2c54>
   142d4:	add	sp, sp, #8
   142d8:	pop	{r4, r5, r6, pc}
   142dc:	bl	11568 <__errno_location@plt>
   142e0:	ldr	r1, [pc, #48]	; 14318 <__assert_fail@plt+0x2c90>
   142e4:	mov	r2, #5
   142e8:	add	r1, pc, r1
   142ec:	ldr	r6, [r0]
   142f0:	mov	r0, #0
   142f4:	bl	113dc <dcgettext@plt>
   142f8:	str	r4, [sp]
   142fc:	mov	r3, r5
   14300:	mov	r1, r6
   14304:	mov	r2, r0
   14308:	mov	r0, #0
   1430c:	bl	11484 <error@plt>
   14310:	add	sp, sp, #8
   14314:	pop	{r4, r5, r6, pc}
   14318:	andeq	r7, r0, r8, lsl #19
   1431c:	push	{r3, r4, r5, lr}
   14320:	mov	r2, r1
   14324:	ldr	r3, [pc, #76]	; 14378 <__assert_fail@plt+0x2cf0>
   14328:	mov	r1, #1
   1432c:	ldr	ip, [pc, #72]	; 1437c <__assert_fail@plt+0x2cf4>
   14330:	add	r3, pc, r3
   14334:	ldr	r3, [r3, ip]
   14338:	ldr	r3, [r3]
   1433c:	bl	113b8 <fwrite_unlocked@plt>
   14340:	subs	r4, r0, #0
   14344:	popne	{r3, r4, r5, pc}
   14348:	bl	11568 <__errno_location@plt>
   1434c:	ldr	r1, [pc, #44]	; 14380 <__assert_fail@plt+0x2cf8>
   14350:	mov	r2, #5
   14354:	add	r1, pc, r1
   14358:	ldr	r5, [r0]
   1435c:	mov	r0, r4
   14360:	bl	113dc <dcgettext@plt>
   14364:	mov	r1, r5
   14368:	pop	{r3, r4, r5, lr}
   1436c:	mov	r2, r0
   14370:	mov	r0, #1
   14374:	b	11484 <error@plt>
   14378:	andeq	r9, r1, r8, asr #25
   1437c:	andeq	r0, r0, r0, ror #2
   14380:	andeq	r7, r0, r0, lsr r9
   14384:	ldr	ip, [pc, #308]	; 144c0 <__assert_fail@plt+0x2e38>
   14388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1438c:	mov	r4, r2
   14390:	ldr	r2, [pc, #300]	; 144c4 <__assert_fail@plt+0x2e3c>
   14394:	add	ip, pc, ip
   14398:	sub	sp, sp, #8192	; 0x2000
   1439c:	mov	r5, r3
   143a0:	sub	sp, sp, #12
   143a4:	orrs	r3, r4, r5
   143a8:	ldr	fp, [ip, r2]
   143ac:	mov	r3, ip
   143b0:	mov	r9, r1
   143b4:	add	r1, sp, #8192	; 0x2000
   143b8:	mov	sl, r0
   143bc:	ldr	r3, [fp]
   143c0:	ldr	r8, [r1, #48]	; 0x30
   143c4:	str	r3, [r1, #4]
   143c8:	beq	14438 <__assert_fail@plt+0x2db0>
   143cc:	add	r7, sp, #4
   143d0:	mov	r1, r7
   143d4:	mov	r0, r9
   143d8:	mov	r2, #8192	; 0x2000
   143dc:	bl	1907c <close_stdout@@Base+0x2d70>
   143e0:	subs	r1, r0, #0
   143e4:	beq	14470 <__assert_fail@plt+0x2de8>
   143e8:	cmn	r1, #1
   143ec:	beq	14478 <__assert_fail@plt+0x2df0>
   143f0:	ldrd	r2, [r8]
   143f4:	add	r6, r7, r1
   143f8:	mov	r0, r7
   143fc:	adds	r2, r2, r1
   14400:	adc	r3, r3, #0
   14404:	strd	r2, [r8]
   14408:	mov	r1, #10
   1440c:	rsb	r2, r0, r6
   14410:	bl	115bc <memchr@plt>
   14414:	cmp	r0, #0
   14418:	beq	143d0 <__assert_fail@plt+0x2d48>
   1441c:	subs	r4, r4, #1
   14420:	add	r0, r0, #1
   14424:	sbc	r5, r5, #0
   14428:	orrs	r2, r4, r5
   1442c:	bne	14408 <__assert_fail@plt+0x2d80>
   14430:	cmp	r6, r0
   14434:	bhi	1445c <__assert_fail@plt+0x2dd4>
   14438:	mov	r0, #0
   1443c:	add	r3, sp, #8192	; 0x2000
   14440:	ldr	r2, [r3, #4]
   14444:	ldr	r3, [fp]
   14448:	cmp	r2, r3
   1444c:	bne	144bc <__assert_fail@plt+0x2e34>
   14450:	add	sp, sp, #8192	; 0x2000
   14454:	add	sp, sp, #12
   14458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1445c:	subs	r1, r6, r0
   14460:	beq	14438 <__assert_fail@plt+0x2db0>
   14464:	bl	1431c <__assert_fail@plt+0x2c94>
   14468:	mov	r0, #0
   1446c:	b	1443c <__assert_fail@plt+0x2db4>
   14470:	mvn	r0, #0
   14474:	b	1443c <__assert_fail@plt+0x2db4>
   14478:	bl	11568 <__errno_location@plt>
   1447c:	ldr	r1, [pc, #68]	; 144c8 <__assert_fail@plt+0x2e40>
   14480:	mov	r2, #5
   14484:	add	r1, pc, r1
   14488:	ldr	r4, [r0]
   1448c:	mov	r0, #0
   14490:	bl	113dc <dcgettext@plt>
   14494:	mov	r5, r0
   14498:	mov	r0, sl
   1449c:	bl	19070 <close_stdout@@Base+0x2d64>
   144a0:	mov	r1, r4
   144a4:	mov	r2, r5
   144a8:	mov	r3, r0
   144ac:	mov	r0, #0
   144b0:	bl	11484 <error@plt>
   144b4:	mov	r0, #1
   144b8:	b	1443c <__assert_fail@plt+0x2db4>
   144bc:	bl	113e8 <__stack_chk_fail@plt>
   144c0:	andeq	r9, r1, r4, ror #24
   144c4:	andeq	r0, r0, r0, asr #2
   144c8:	andeq	r7, r0, ip, lsl #16
   144cc:	ldr	ip, [pc, #352]	; 14634 <__assert_fail@plt+0x2fac>
   144d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144d4:	mov	r7, r3
   144d8:	sub	sp, sp, #8192	; 0x2000
   144dc:	ldr	r3, [pc, #340]	; 14638 <__assert_fail@plt+0x2fb0>
   144e0:	sub	sp, sp, #36	; 0x24
   144e4:	add	ip, pc, ip
   144e8:	mov	r8, #0
   144ec:	mov	r9, #0
   144f0:	str	r0, [sp, #20]
   144f4:	add	sl, sp, #28
   144f8:	strd	r8, [sp, #8]
   144fc:	mov	r6, r2
   14500:	ldr	r3, [ip, r3]
   14504:	add	ip, sp, #8192	; 0x2000
   14508:	mov	r4, r2
   1450c:	mov	r5, r7
   14510:	mvn	r8, #1
   14514:	mvn	r9, #0
   14518:	str	r3, [sp, #16]
   1451c:	mov	fp, r1
   14520:	ldr	r3, [r3]
   14524:	str	r3, [ip, #28]
   14528:	cmp	r5, #0
   1452c:	cmpeq	r4, #8192	; 0x2000
   14530:	mov	r2, r4
   14534:	mov	r0, fp
   14538:	mov	r1, sl
   1453c:	movhi	r2, #8192	; 0x2000
   14540:	bl	1907c <close_stdout@@Base+0x2d70>
   14544:	cmn	r0, #1
   14548:	mov	r3, r0
   1454c:	beq	145e8 <__assert_fail@plt+0x2f60>
   14550:	cmp	r0, #0
   14554:	beq	145c0 <__assert_fail@plt+0x2f38>
   14558:	mov	r1, r3
   1455c:	mov	r0, sl
   14560:	str	r3, [sp, #4]
   14564:	bl	1431c <__assert_fail@plt+0x2c94>
   14568:	ldr	r3, [sp, #4]
   1456c:	mov	r1, #0
   14570:	mov	r0, r3
   14574:	ldrd	r2, [sp, #8]
   14578:	adds	r2, r2, r0
   1457c:	adc	r3, r3, r1
   14580:	strd	r2, [sp, #8]
   14584:	mvn	r2, #0
   14588:	mvn	r3, #0
   1458c:	cmp	r7, r3
   14590:	cmpeq	r6, r2
   14594:	beq	14528 <__assert_fail@plt+0x2ea0>
   14598:	subs	r4, r4, r0
   1459c:	sbc	r5, r5, r1
   145a0:	orrs	r3, r4, r5
   145a4:	movne	r3, #0
   145a8:	moveq	r3, #1
   145ac:	cmp	r7, r9
   145b0:	cmpeq	r6, r8
   145b4:	orreq	r3, r3, #1
   145b8:	cmp	r3, #0
   145bc:	beq	14528 <__assert_fail@plt+0x2ea0>
   145c0:	ldr	r9, [sp, #16]
   145c4:	add	r8, sp, #8192	; 0x2000
   145c8:	ldrd	r0, [sp, #8]
   145cc:	ldr	r2, [r8, #28]
   145d0:	ldr	r3, [r9]
   145d4:	cmp	r2, r3
   145d8:	bne	14630 <__assert_fail@plt+0x2fa8>
   145dc:	add	sp, sp, #8192	; 0x2000
   145e0:	add	sp, sp, #36	; 0x24
   145e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145e8:	bl	11568 <__errno_location@plt>
   145ec:	ldr	r4, [r0]
   145f0:	cmp	r4, #11
   145f4:	beq	145c0 <__assert_fail@plt+0x2f38>
   145f8:	ldr	r1, [pc, #60]	; 1463c <__assert_fail@plt+0x2fb4>
   145fc:	mov	r2, #5
   14600:	mov	r0, #0
   14604:	add	r1, pc, r1
   14608:	bl	113dc <dcgettext@plt>
   1460c:	mov	r5, r0
   14610:	ldr	r0, [sp, #20]
   14614:	bl	19070 <close_stdout@@Base+0x2d64>
   14618:	mov	r2, r5
   1461c:	mov	r1, r4
   14620:	mov	r3, r0
   14624:	mov	r0, #1
   14628:	bl	11484 <error@plt>
   1462c:	b	145c0 <__assert_fail@plt+0x2f38>
   14630:	bl	113e8 <__stack_chk_fail@plt>
   14634:	andeq	r9, r1, r4, lsl fp
   14638:	andeq	r0, r0, r0, asr #2
   1463c:	andeq	r7, r0, ip, lsl #13
   14640:	ldr	ip, [pc, #296]	; 14770 <__assert_fail@plt+0x30e8>
   14644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14648:	mov	r4, r2
   1464c:	ldr	r2, [pc, #288]	; 14774 <__assert_fail@plt+0x30ec>
   14650:	add	ip, pc, ip
   14654:	sub	sp, sp, #8192	; 0x2000
   14658:	mov	r5, r3
   1465c:	sub	sp, sp, #20
   14660:	orrs	r3, r4, r5
   14664:	ldr	r2, [ip, r2]
   14668:	mov	r3, ip
   1466c:	mov	sl, r1
   14670:	add	r1, sp, #8192	; 0x2000
   14674:	mov	fp, r0
   14678:	addne	r8, sp, #12
   1467c:	ldr	r3, [r2]
   14680:	ldr	r9, [r1, #56]	; 0x38
   14684:	str	r2, [sp, #4]
   14688:	str	r3, [r1, #12]
   1468c:	bne	146d0 <__assert_fail@plt+0x3048>
   14690:	b	14700 <__assert_fail@plt+0x3078>
   14694:	cmn	r0, #1
   14698:	beq	14728 <__assert_fail@plt+0x30a0>
   1469c:	ldrd	r2, [r9]
   146a0:	mov	r7, #0
   146a4:	mov	r6, r0
   146a8:	adds	r2, r2, r0
   146ac:	adc	r3, r3, r7
   146b0:	cmp	r7, r5
   146b4:	cmpeq	r6, r4
   146b8:	strd	r2, [r9]
   146bc:	bhi	146f0 <__assert_fail@plt+0x3068>
   146c0:	subs	r4, r4, r6
   146c4:	sbc	r5, r5, r7
   146c8:	orrs	r2, r4, r5
   146cc:	beq	14700 <__assert_fail@plt+0x3078>
   146d0:	mov	r0, sl
   146d4:	mov	r1, r8
   146d8:	mov	r2, #8192	; 0x2000
   146dc:	bl	1907c <close_stdout@@Base+0x2d70>
   146e0:	cmp	r0, #0
   146e4:	bne	14694 <__assert_fail@plt+0x300c>
   146e8:	mvn	r0, #0
   146ec:	b	14704 <__assert_fail@plt+0x307c>
   146f0:	subs	r1, r0, r4
   146f4:	beq	14700 <__assert_fail@plt+0x3078>
   146f8:	add	r0, r8, r4
   146fc:	bl	1431c <__assert_fail@plt+0x2c94>
   14700:	mov	r0, #0
   14704:	ldr	r1, [sp, #4]
   14708:	add	r3, sp, #8192	; 0x2000
   1470c:	ldr	r2, [r3, #12]
   14710:	ldr	r3, [r1]
   14714:	cmp	r2, r3
   14718:	bne	1476c <__assert_fail@plt+0x30e4>
   1471c:	add	sp, sp, #8192	; 0x2000
   14720:	add	sp, sp, #20
   14724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14728:	bl	11568 <__errno_location@plt>
   1472c:	ldr	r1, [pc, #68]	; 14778 <__assert_fail@plt+0x30f0>
   14730:	mov	r2, #5
   14734:	add	r1, pc, r1
   14738:	ldr	r4, [r0]
   1473c:	mov	r0, #0
   14740:	bl	113dc <dcgettext@plt>
   14744:	mov	r5, r0
   14748:	mov	r0, fp
   1474c:	bl	19070 <close_stdout@@Base+0x2d64>
   14750:	mov	r1, r4
   14754:	mov	r2, r5
   14758:	mov	r3, r0
   1475c:	mov	r0, #0
   14760:	bl	11484 <error@plt>
   14764:	mov	r0, #1
   14768:	b	14704 <__assert_fail@plt+0x307c>
   1476c:	bl	113e8 <__stack_chk_fail@plt>
   14770:	andeq	r9, r1, r8, lsr #19
   14774:	andeq	r0, r0, r0, asr #2
   14778:	andeq	r7, r0, ip, asr r5
   1477c:	ldr	r1, [pc, #268]	; 14890 <__assert_fail@plt+0x3208>
   14780:	ldr	ip, [pc, #268]	; 14894 <__assert_fail@plt+0x320c>
   14784:	push	{r4, r5, r6, r7, r8, lr}
   14788:	add	r1, pc, r1
   1478c:	sub	sp, sp, #40	; 0x28
   14790:	mov	r5, r3
   14794:	ldr	r6, [r1, ip]
   14798:	mov	r4, r2
   1479c:	ldr	r7, [sp, #64]	; 0x40
   147a0:	ldr	r8, [sp, #68]	; 0x44
   147a4:	str	r7, [sp]
   147a8:	ldr	r1, [r6]
   147ac:	str	r1, [sp, #36]	; 0x24
   147b0:	bl	11448 <lseek64@plt>
   147b4:	cmp	r0, #0
   147b8:	sbcs	r3, r1, #0
   147bc:	blt	147d8 <__assert_fail@plt+0x3150>
   147c0:	ldr	r2, [sp, #36]	; 0x24
   147c4:	ldr	r3, [r6]
   147c8:	cmp	r2, r3
   147cc:	bne	1488c <__assert_fail@plt+0x3204>
   147d0:	add	sp, sp, #40	; 0x28
   147d4:	pop	{r4, r5, r6, r7, r8, pc}
   147d8:	mov	r0, r4
   147dc:	mov	r1, r5
   147e0:	add	r2, sp, #12
   147e4:	bl	176c0 <close_stdout@@Base+0x13b4>
   147e8:	cmp	r7, #1
   147ec:	mov	r4, r0
   147f0:	beq	1487c <__assert_fail@plt+0x31f4>
   147f4:	cmp	r7, #2
   147f8:	beq	14844 <__assert_fail@plt+0x31bc>
   147fc:	cmp	r7, #0
   14800:	beq	14808 <__assert_fail@plt+0x3180>
   14804:	bl	11664 <abort@plt>
   14808:	bl	11568 <__errno_location@plt>
   1480c:	ldr	r1, [pc, #132]	; 14898 <__assert_fail@plt+0x3210>
   14810:	mov	r2, #5
   14814:	add	r1, pc, r1
   14818:	ldr	r5, [r0]
   1481c:	mov	r0, r7
   14820:	bl	113dc <dcgettext@plt>
   14824:	str	r4, [sp]
   14828:	mov	r3, r8
   1482c:	mov	r1, r5
   14830:	mov	r2, r0
   14834:	mov	r0, r7
   14838:	bl	11484 <error@plt>
   1483c:	mov	r0, #1
   14840:	bl	114fc <exit@plt>
   14844:	bl	11568 <__errno_location@plt>
   14848:	ldr	r1, [pc, #76]	; 1489c <__assert_fail@plt+0x3214>
   1484c:	add	r1, pc, r1
   14850:	ldr	r5, [r0]
   14854:	mov	r2, #5
   14858:	mov	r0, #0
   1485c:	bl	113dc <dcgettext@plt>
   14860:	str	r4, [sp]
   14864:	mov	r1, r5
   14868:	mov	r3, r8
   1486c:	mov	r2, r0
   14870:	mov	r0, #0
   14874:	bl	11484 <error@plt>
   14878:	b	1483c <__assert_fail@plt+0x31b4>
   1487c:	bl	11568 <__errno_location@plt>
   14880:	ldr	r1, [pc, #24]	; 148a0 <__assert_fail@plt+0x3218>
   14884:	add	r1, pc, r1
   14888:	b	14850 <__assert_fail@plt+0x31c8>
   1488c:	bl	113e8 <__stack_chk_fail@plt>
   14890:	andeq	r9, r1, r0, ror r8
   14894:	andeq	r0, r0, r0, asr #2
   14898:	muleq	r0, r0, r4
   1489c:	andeq	r7, r0, r0, lsr #9
   148a0:	andeq	r7, r0, r0, asr #8
   148a4:	ldr	ip, [pc, #872]	; 14c14 <__assert_fail@plt+0x358c>
   148a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148ac:	mov	r4, r2
   148b0:	ldr	r2, [pc, #864]	; 14c18 <__assert_fail@plt+0x3590>
   148b4:	add	ip, pc, ip
   148b8:	sub	sp, sp, #8192	; 0x2000
   148bc:	mov	r5, r3
   148c0:	sub	sp, sp, #44	; 0x2c
   148c4:	orrs	r3, r4, r5
   148c8:	ldr	r2, [ip, r2]
   148cc:	mov	r3, ip
   148d0:	add	ip, sp, #8192	; 0x2000
   148d4:	mov	r8, r0
   148d8:	mov	r6, r1
   148dc:	ldr	r3, [r2]
   148e0:	str	r2, [sp, #28]
   148e4:	ldr	r7, [ip, #96]	; 0x60
   148e8:	str	r3, [ip, #36]	; 0x24
   148ec:	beq	14a90 <__assert_fail@plt+0x3408>
   148f0:	add	r3, sp, #8192	; 0x2000
   148f4:	movw	sl, #8191	; 0x1fff
   148f8:	mov	fp, #0
   148fc:	add	ip, sp, #8192	; 0x2000
   14900:	ldrd	r0, [r3, #88]	; 0x58
   14904:	add	r9, sp, #36	; 0x24
   14908:	ldrd	r2, [r3, #80]	; 0x50
   1490c:	subs	r0, r0, r2
   14910:	sbc	r1, r1, r3
   14914:	asr	r2, r1, #31
   14918:	eor	r0, r0, r2
   1491c:	asr	r3, r2, #31
   14920:	eor	r1, r1, r3
   14924:	subs	r0, r0, r2
   14928:	sbc	r1, r1, r3
   1492c:	and	r0, r0, sl
   14930:	and	r1, r1, fp
   14934:	eor	r0, r0, r2
   14938:	eor	r1, r1, r3
   1493c:	subs	r0, r0, r2
   14940:	sbc	r1, r1, r3
   14944:	ldrd	r2, [ip, #88]	; 0x58
   14948:	cmp	r0, #0
   1494c:	str	r8, [sp, #4]
   14950:	mov	sl, r0
   14954:	mov	fp, #0
   14958:	moveq	sl, #8192	; 0x2000
   1495c:	moveq	r0, #8192	; 0x2000
   14960:	movne	r1, #0
   14964:	moveq	r1, #0
   14968:	str	fp, [sp]
   1496c:	subs	r2, r2, r0
   14970:	sbc	r3, r3, r1
   14974:	mov	r0, r6
   14978:	strd	r2, [sp, #8]
   1497c:	bl	1477c <__assert_fail@plt+0x30f4>
   14980:	mov	r2, sl
   14984:	mov	r0, r6
   14988:	mov	r1, r9
   1498c:	bl	1907c <close_stdout@@Base+0x2d70>
   14990:	cmn	r0, #1
   14994:	mov	sl, r0
   14998:	beq	14b48 <__assert_fail@plt+0x34c0>
   1499c:	mov	r1, #0
   149a0:	mov	r2, r0
   149a4:	mov	r3, r1
   149a8:	strd	r0, [sp, #16]
   149ac:	ldrd	r0, [sp, #8]
   149b0:	adds	r2, r2, r0
   149b4:	adc	r3, r3, r1
   149b8:	cmp	sl, #0
   149bc:	strd	r2, [r7]
   149c0:	bne	14abc <__assert_fail@plt+0x3434>
   149c4:	mov	fp, #0
   149c8:	cmp	sl, #0
   149cc:	beq	14a10 <__assert_fail@plt+0x3388>
   149d0:	mov	r2, sl
   149d4:	b	149fc <__assert_fail@plt+0x3374>
   149d8:	subs	r0, r4, #1
   149dc:	sbc	r1, r5, #0
   149e0:	orrs	r2, r4, r5
   149e4:	rsb	r2, r9, r3
   149e8:	beq	14ae8 <__assert_fail@plt+0x3460>
   149ec:	cmp	r2, #0
   149f0:	mov	r4, r0
   149f4:	mov	r5, r1
   149f8:	beq	14a10 <__assert_fail@plt+0x3388>
   149fc:	mov	r0, r9
   14a00:	mov	r1, #10
   14a04:	bl	11538 <memrchr@plt>
   14a08:	subs	r3, r0, #0
   14a0c:	bne	149d8 <__assert_fail@plt+0x3350>
   14a10:	add	r3, sp, #8192	; 0x2000
   14a14:	ldrd	r0, [sp, #8]
   14a18:	ldrd	r2, [r3, #80]	; 0x50
   14a1c:	cmp	r1, r3
   14a20:	cmpeq	r0, r2
   14a24:	beq	14bcc <__assert_fail@plt+0x3544>
   14a28:	ldrd	r0, [sp, #8]
   14a2c:	str	fp, [sp]
   14a30:	subs	r0, r0, #8192	; 0x2000
   14a34:	str	r8, [sp, #4]
   14a38:	sbc	r1, r1, #0
   14a3c:	strd	r0, [sp, #8]
   14a40:	mov	r2, r0
   14a44:	mov	r0, r6
   14a48:	mov	r3, r1
   14a4c:	bl	1477c <__assert_fail@plt+0x30f4>
   14a50:	mov	r0, r6
   14a54:	mov	r1, r9
   14a58:	mov	r2, #8192	; 0x2000
   14a5c:	bl	1907c <close_stdout@@Base+0x2d70>
   14a60:	cmn	r0, #1
   14a64:	mov	sl, r0
   14a68:	beq	14b88 <__assert_fail@plt+0x3500>
   14a6c:	mov	r2, r0
   14a70:	ldrd	r0, [sp, #8]
   14a74:	mov	r3, #0
   14a78:	strd	r2, [sp, #16]
   14a7c:	adds	r2, sl, r0
   14a80:	adc	r3, r3, r1
   14a84:	cmp	sl, #0
   14a88:	strd	r2, [r7]
   14a8c:	bne	149c8 <__assert_fail@plt+0x3340>
   14a90:	mov	fp, #1
   14a94:	ldr	r4, [sp, #28]
   14a98:	add	r1, sp, #8192	; 0x2000
   14a9c:	mov	r0, fp
   14aa0:	ldr	r2, [r1, #36]	; 0x24
   14aa4:	ldr	r3, [r4]
   14aa8:	cmp	r2, r3
   14aac:	bne	14c10 <__assert_fail@plt+0x3588>
   14ab0:	add	sp, sp, #8192	; 0x2000
   14ab4:	add	sp, sp, #44	; 0x2c
   14ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14abc:	add	r1, sp, #8192	; 0x2000
   14ac0:	add	r1, r1, #40	; 0x28
   14ac4:	add	r3, r1, sl
   14ac8:	sub	r3, r3, #8192	; 0x2000
   14acc:	sub	r3, r3, #4
   14ad0:	ldrb	r3, [r3, #-1]
   14ad4:	cmp	r3, #10
   14ad8:	beq	149c4 <__assert_fail@plt+0x333c>
   14adc:	subs	r4, r4, #1
   14ae0:	sbc	r5, r5, #0
   14ae4:	b	149c4 <__assert_fail@plt+0x333c>
   14ae8:	sub	sl, sl, #1
   14aec:	cmp	r2, sl
   14af0:	beq	14b04 <__assert_fail@plt+0x347c>
   14af4:	subs	r1, sl, r2
   14af8:	beq	14b04 <__assert_fail@plt+0x347c>
   14afc:	add	r0, r3, #1
   14b00:	bl	1431c <__assert_fail@plt+0x2c94>
   14b04:	ldrd	r4, [sp, #16]
   14b08:	mov	r0, r8
   14b0c:	ldrd	r2, [sp, #8]
   14b10:	mov	r1, r6
   14b14:	mov	fp, #1
   14b18:	adds	r2, r2, r4
   14b1c:	adc	r3, r3, r5
   14b20:	add	r5, sp, #8192	; 0x2000
   14b24:	ldrd	r4, [r5, #88]	; 0x58
   14b28:	subs	r2, r4, r2
   14b2c:	sbc	r3, r5, r3
   14b30:	ldrd	r4, [r7]
   14b34:	bl	144cc <__assert_fail@plt+0x2e44>
   14b38:	adds	r0, r0, r4
   14b3c:	adc	r1, r1, r5
   14b40:	strd	r0, [r7]
   14b44:	b	14a94 <__assert_fail@plt+0x340c>
   14b48:	bl	11568 <__errno_location@plt>
   14b4c:	ldr	r1, [pc, #200]	; 14c1c <__assert_fail@plt+0x3594>
   14b50:	mov	r2, #5
   14b54:	add	r1, pc, r1
   14b58:	ldr	r4, [r0]
   14b5c:	mov	r0, fp
   14b60:	bl	113dc <dcgettext@plt>
   14b64:	mov	r5, r0
   14b68:	mov	r0, r8
   14b6c:	bl	19070 <close_stdout@@Base+0x2d64>
   14b70:	mov	r1, r4
   14b74:	mov	r2, r5
   14b78:	mov	r3, r0
   14b7c:	mov	r0, fp
   14b80:	bl	11484 <error@plt>
   14b84:	b	14a94 <__assert_fail@plt+0x340c>
   14b88:	bl	11568 <__errno_location@plt>
   14b8c:	ldr	r1, [pc, #140]	; 14c20 <__assert_fail@plt+0x3598>
   14b90:	mov	r2, #5
   14b94:	mov	fp, #0
   14b98:	add	r1, pc, r1
   14b9c:	ldr	r4, [r0]
   14ba0:	mov	r0, #0
   14ba4:	bl	113dc <dcgettext@plt>
   14ba8:	mov	r5, r0
   14bac:	mov	r0, r8
   14bb0:	bl	19070 <close_stdout@@Base+0x2d64>
   14bb4:	mov	r1, r4
   14bb8:	mov	r2, r5
   14bbc:	mov	r3, r0
   14bc0:	mov	r0, #0
   14bc4:	bl	11484 <error@plt>
   14bc8:	b	14a94 <__assert_fail@plt+0x340c>
   14bcc:	add	r4, sp, #8192	; 0x2000
   14bd0:	mov	r3, #0
   14bd4:	str	r8, [sp, #4]
   14bd8:	mov	r0, r6
   14bdc:	str	r3, [sp]
   14be0:	mov	fp, #1
   14be4:	ldrd	r2, [sp, #8]
   14be8:	bl	1477c <__assert_fail@plt+0x30f4>
   14bec:	ldrd	r2, [r4, #88]	; 0x58
   14bf0:	mov	r0, r8
   14bf4:	mov	r1, r6
   14bf8:	bl	144cc <__assert_fail@plt+0x2e44>
   14bfc:	ldrd	r4, [sp, #8]
   14c00:	adds	r0, r0, r4
   14c04:	adc	r1, r1, r5
   14c08:	strd	r0, [r7]
   14c0c:	b	14a94 <__assert_fail@plt+0x340c>
   14c10:	bl	113e8 <__stack_chk_fail@plt>
   14c14:	andeq	r9, r1, r4, asr #14
   14c18:	andeq	r0, r0, r0, asr #2
   14c1c:	andeq	r7, r0, ip, lsr r1
   14c20:	strdeq	r7, [r0], -r8
   14c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c28:	mov	sl, r1
   14c2c:	ldr	r9, [pc, #488]	; 14e1c <__assert_fail@plt+0x3794>
   14c30:	sub	sp, sp, #132	; 0x84
   14c34:	ldr	r3, [pc, #484]	; 14e20 <__assert_fail@plt+0x3798>
   14c38:	mov	r8, r0
   14c3c:	add	r9, pc, r9
   14c40:	ldr	r1, [r0, #48]	; 0x30
   14c44:	mov	r4, r2
   14c48:	ldr	r5, [r9, r3]
   14c4c:	cmn	r1, #1
   14c50:	ldr	r3, [r5]
   14c54:	str	r3, [sp, #124]	; 0x7c
   14c58:	beq	14d08 <__assert_fail@plt+0x3680>
   14c5c:	ldr	fp, [r0]
   14c60:	ldrb	r3, [fp]
   14c64:	cmp	r3, #45	; 0x2d
   14c68:	bne	14c84 <__assert_fail@plt+0x35fc>
   14c6c:	ldrb	r3, [fp, #1]
   14c70:	cmp	r3, #0
   14c74:	bne	14c84 <__assert_fail@plt+0x35fc>
   14c78:	bl	14294 <__assert_fail@plt+0x2c0c>
   14c7c:	ldr	r1, [r8, #48]	; 0x30
   14c80:	mov	fp, r0
   14c84:	mov	r0, #3
   14c88:	add	r2, sp, #16
   14c8c:	bl	11430 <__fxstat64@plt>
   14c90:	subs	ip, r0, #0
   14c94:	bne	14d20 <__assert_fail@plt+0x3698>
   14c98:	ldr	r3, [r8, #40]	; 0x28
   14c9c:	and	r3, r3, #61440	; 0xf000
   14ca0:	cmp	r3, #32768	; 0x8000
   14ca4:	beq	14d74 <__assert_fail@plt+0x36ec>
   14ca8:	ldr	r3, [r4]
   14cac:	cmp	r3, sl
   14cb0:	beq	14ccc <__assert_fail@plt+0x3644>
   14cb4:	ldr	r3, [pc, #360]	; 14e24 <__assert_fail@plt+0x379c>
   14cb8:	add	r3, pc, r3
   14cbc:	ldrb	r3, [r3]
   14cc0:	cmp	r3, #0
   14cc4:	bne	14db8 <__assert_fail@plt+0x3730>
   14cc8:	str	sl, [r4]
   14ccc:	mvn	r2, #0
   14cd0:	mvn	r3, #0
   14cd4:	mov	r0, fp
   14cd8:	ldr	r1, [r8, #48]	; 0x30
   14cdc:	bl	144cc <__assert_fail@plt+0x2e44>
   14ce0:	ldrd	r2, [r8, #8]
   14ce4:	ldr	ip, [pc, #316]	; 14e28 <__assert_fail@plt+0x37a0>
   14ce8:	adds	r0, r0, r2
   14cec:	adc	r1, r1, r3
   14cf0:	strd	r0, [r8, #8]
   14cf4:	ldr	r3, [r9, ip]
   14cf8:	ldr	r0, [r3]
   14cfc:	bl	11418 <fflush_unlocked@plt>
   14d00:	cmp	r0, #0
   14d04:	bne	14d44 <__assert_fail@plt+0x36bc>
   14d08:	ldr	r2, [sp, #124]	; 0x7c
   14d0c:	ldr	r3, [r5]
   14d10:	cmp	r2, r3
   14d14:	bne	14e18 <__assert_fail@plt+0x3790>
   14d18:	add	sp, sp, #132	; 0x84
   14d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d20:	bl	11568 <__errno_location@plt>
   14d24:	mov	r1, fp
   14d28:	ldr	r3, [r0]
   14d2c:	ldr	r0, [r8, #48]	; 0x30
   14d30:	str	r3, [r8, #52]	; 0x34
   14d34:	bl	142ac <__assert_fail@plt+0x2c24>
   14d38:	mvn	r3, #0
   14d3c:	str	r3, [r8, #48]	; 0x30
   14d40:	b	14d08 <__assert_fail@plt+0x3680>
   14d44:	bl	11568 <__errno_location@plt>
   14d48:	ldr	r1, [pc, #220]	; 14e2c <__assert_fail@plt+0x37a4>
   14d4c:	mov	r2, #5
   14d50:	add	r1, pc, r1
   14d54:	ldr	r4, [r0]
   14d58:	mov	r0, #0
   14d5c:	bl	113dc <dcgettext@plt>
   14d60:	mov	r1, r4
   14d64:	mov	r2, r0
   14d68:	mov	r0, #1
   14d6c:	bl	11484 <error@plt>
   14d70:	b	14d08 <__assert_fail@plt+0x3680>
   14d74:	ldrd	r6, [sp, #64]	; 0x40
   14d78:	ldrd	r2, [r8, #8]
   14d7c:	cmp	r6, r2
   14d80:	sbcs	r1, r7, r3
   14d84:	blt	14dc4 <__assert_fail@plt+0x373c>
   14d88:	cmp	r7, r3
   14d8c:	cmpeq	r6, r2
   14d90:	bne	14ca8 <__assert_fail@plt+0x3620>
   14d94:	ldr	r3, [r8, #16]
   14d98:	ldr	r2, [sp, #96]	; 0x60
   14d9c:	ldr	r1, [sp, #100]	; 0x64
   14da0:	cmp	r2, r3
   14da4:	ldr	r3, [r8, #20]
   14da8:	bne	14ca8 <__assert_fail@plt+0x3620>
   14dac:	cmp	r1, r3
   14db0:	beq	14d08 <__assert_fail@plt+0x3680>
   14db4:	b	14ca8 <__assert_fail@plt+0x3620>
   14db8:	mov	r0, fp
   14dbc:	bl	1422c <__assert_fail@plt+0x2ba4>
   14dc0:	b	14cc8 <__assert_fail@plt+0x3640>
   14dc4:	ldr	r1, [pc, #100]	; 14e30 <__assert_fail@plt+0x37a8>
   14dc8:	mov	r2, #5
   14dcc:	str	ip, [sp, #12]
   14dd0:	add	r1, pc, r1
   14dd4:	bl	113dc <dcgettext@plt>
   14dd8:	ldr	ip, [sp, #12]
   14ddc:	mov	r3, fp
   14de0:	mov	r1, ip
   14de4:	mov	r2, r0
   14de8:	mov	r0, ip
   14dec:	bl	11484 <error@plt>
   14df0:	str	sl, [r4]
   14df4:	ldr	ip, [sp, #12]
   14df8:	ldr	r0, [r8, #48]	; 0x30
   14dfc:	ldrd	r2, [sp, #64]	; 0x40
   14e00:	str	ip, [sp]
   14e04:	str	fp, [sp, #4]
   14e08:	bl	1477c <__assert_fail@plt+0x30f4>
   14e0c:	ldrd	r2, [sp, #64]	; 0x40
   14e10:	strd	r2, [r8, #8]
   14e14:	b	14ca8 <__assert_fail@plt+0x3620>
   14e18:	bl	113e8 <__stack_chk_fail@plt>
   14e1c:			; <UNDEFINED> instruction: 0x000193bc
   14e20:	andeq	r0, r0, r0, asr #2
   14e24:	andeq	r9, r1, ip, lsr #10
   14e28:	andeq	r0, r0, r0, ror #2
   14e2c:	andeq	r6, r0, r4, lsr pc
   14e30:	andeq	r6, r0, r8, asr #30
   14e34:	ldr	r3, [pc, #1864]	; 15584 <__assert_fail@plt+0x3efc>
   14e38:	ldr	r2, [pc, #1864]	; 15588 <__assert_fail@plt+0x3f00>
   14e3c:	add	r3, pc, r3
   14e40:	push	{r4, r5, r6, r7, lr}
   14e44:	sub	sp, sp, #100	; 0x64
   14e48:	ldr	r4, [r3, r2]
   14e4c:	mov	r5, r1
   14e50:	mov	r1, sp
   14e54:	ldr	r3, [r4]
   14e58:	str	r3, [sp, #92]	; 0x5c
   14e5c:	bl	11310 <fstatfs64@plt>
   14e60:	cmp	r0, #0
   14e64:	beq	14f24 <__assert_fail@plt+0x389c>
   14e68:	bl	11568 <__errno_location@plt>
   14e6c:	ldr	r6, [r0]
   14e70:	cmp	r6, #38	; 0x26
   14e74:	beq	14f08 <__assert_fail@plt+0x3880>
   14e78:	ldr	r1, [pc, #1804]	; 1558c <__assert_fail@plt+0x3f04>
   14e7c:	mov	r2, #5
   14e80:	mov	r0, #0
   14e84:	add	r1, pc, r1
   14e88:	bl	113dc <dcgettext@plt>
   14e8c:	mov	r7, r0
   14e90:	mov	r0, r5
   14e94:	bl	19070 <close_stdout@@Base+0x2d64>
   14e98:	mov	r2, r7
   14e9c:	mov	r1, r6
   14ea0:	mov	r3, r0
   14ea4:	mov	r0, #0
   14ea8:	bl	11484 <error@plt>
   14eac:	mov	r0, #1
   14eb0:	b	14f0c <__assert_fail@plt+0x3884>
   14eb4:	movw	r2, #33128	; 0x8168
   14eb8:	movt	r2, #51582	; 0xc97e
   14ebc:	cmp	r3, r2
   14ec0:	beq	1517c <__assert_fail@plt+0x3af4>
   14ec4:	bhi	15220 <__assert_fail@plt+0x3b98>
   14ec8:	movw	r2, #26686	; 0x683e
   14ecc:	movt	r2, #37155	; 0x9123
   14ed0:	cmp	r3, r2
   14ed4:	beq	1517c <__assert_fail@plt+0x3af4>
   14ed8:	movw	r2, #26686	; 0x683e
   14edc:	movt	r2, #37155	; 0x9123
   14ee0:	cmp	r3, r2
   14ee4:	bhi	153d8 <__assert_fail@plt+0x3d50>
   14ee8:	movw	r2, #24931	; 0x6163
   14eec:	movt	r2, #29810	; 0x7472
   14ef0:	cmp	r3, r2
   14ef4:	beq	1517c <__assert_fail@plt+0x3af4>
   14ef8:	movw	r2, #22774	; 0x58f6
   14efc:	movt	r2, #34180	; 0x8584
   14f00:	cmp	r3, r2
   14f04:	beq	1517c <__assert_fail@plt+0x3af4>
   14f08:	mov	r0, #1
   14f0c:	ldr	r2, [sp, #92]	; 0x5c
   14f10:	ldr	r3, [r4]
   14f14:	cmp	r2, r3
   14f18:	bne	15580 <__assert_fail@plt+0x3ef8>
   14f1c:	add	sp, sp, #100	; 0x64
   14f20:	pop	{r4, r5, r6, r7, pc}
   14f24:	ldr	r3, [sp]
   14f28:	movw	r2, #514	; 0x202
   14f2c:	movt	r2, #6528	; 0x1980
   14f30:	cmp	r3, r2
   14f34:	beq	1517c <__assert_fail@plt+0x3af4>
   14f38:	bhi	14f98 <__assert_fail@plt+0x3910>
   14f3c:	movw	r2, #38496	; 0x9660
   14f40:	cmp	r3, r2
   14f44:	beq	1517c <__assert_fail@plt+0x3af4>
   14f48:	bhi	15090 <__assert_fail@plt+0x3a08>
   14f4c:	movw	r2, #13364	; 0x3434
   14f50:	cmp	r3, r2
   14f54:	beq	1517c <__assert_fail@plt+0x3af4>
   14f58:	bhi	150f0 <__assert_fail@plt+0x3a68>
   14f5c:	movw	r2, #4989	; 0x137d
   14f60:	cmp	r3, r2
   14f64:	beq	1517c <__assert_fail@plt+0x3af4>
   14f68:	bls	152ec <__assert_fail@plt+0x3c64>
   14f6c:	movw	r2, #7377	; 0x1cd1
   14f70:	cmp	r3, r2
   14f74:	beq	1517c <__assert_fail@plt+0x3af4>
   14f78:	bhi	154c0 <__assert_fail@plt+0x3e38>
   14f7c:	movw	r2, #4991	; 0x137f
   14f80:	cmp	r3, r2
   14f84:	beq	1517c <__assert_fail@plt+0x3af4>
   14f88:	add	r2, r2, #16
   14f8c:	cmp	r3, r2
   14f90:	bne	14f08 <__assert_fail@plt+0x3880>
   14f94:	b	1517c <__assert_fail@plt+0x3af4>
   14f98:	movw	r2, #26476	; 0x676c
   14f9c:	movt	r2, #24933	; 0x6165
   14fa0:	cmp	r3, r2
   14fa4:	beq	1517c <__assert_fail@plt+0x3af4>
   14fa8:	bls	15018 <__assert_fail@plt+0x3990>
   14fac:	movw	r2, #29305	; 0x7279
   14fb0:	movt	r2, #29554	; 0x7372
   14fb4:	cmp	r3, r2
   14fb8:	beq	1517c <__assert_fail@plt+0x3af4>
   14fbc:	bhi	14eb4 <__assert_fail@plt+0x382c>
   14fc0:	movw	r2, #24952	; 0x6178
   14fc4:	movt	r2, #25700	; 0x6464
   14fc8:	cmp	r3, r2
   14fcc:	beq	1517c <__assert_fail@plt+0x3af4>
   14fd0:	bhi	151dc <__assert_fail@plt+0x3b54>
   14fd4:	movw	r2, #25970	; 0x6572
   14fd8:	movt	r2, #25189	; 0x6265
   14fdc:	cmp	r3, r2
   14fe0:	beq	1517c <__assert_fail@plt+0x3af4>
   14fe4:	movw	r2, #25970	; 0x6572
   14fe8:	movt	r2, #25189	; 0x6265
   14fec:	cmp	r3, r2
   14ff0:	bhi	15438 <__assert_fail@plt+0x3db0>
   14ff4:	movw	r2, #25974	; 0x6576
   14ff8:	movt	r2, #25188	; 0x6264
   14ffc:	cmp	r3, r2
   15000:	beq	1517c <__assert_fail@plt+0x3af4>
   15004:	movw	r2, #25968	; 0x6570
   15008:	movt	r2, #25189	; 0x6265
   1500c:	cmp	r3, r2
   15010:	bne	14f08 <__assert_fail@plt+0x3880>
   15014:	b	1517c <__assert_fail@plt+0x3af4>
   15018:	movw	r2, #18003	; 0x4653
   1501c:	movt	r2, #17752	; 0x4558
   15020:	cmp	r3, r2
   15024:	beq	1517c <__assert_fail@plt+0x3af4>
   15028:	bhi	15128 <__assert_fail@plt+0x3aa0>
   1502c:	movw	r2, #12225	; 0x2fc1
   15030:	movt	r2, #12225	; 0x2fc1
   15034:	cmp	r3, r2
   15038:	beq	1517c <__assert_fail@plt+0x3af4>
   1503c:	movw	r2, #12225	; 0x2fc1
   15040:	movt	r2, #12225	; 0x2fc1
   15044:	cmp	r3, r2
   15048:	bls	1530c <__assert_fail@plt+0x3c84>
   1504c:	movw	r2, #20045	; 0x4e4d
   15050:	movt	r2, #16969	; 0x4249
   15054:	cmp	r3, r2
   15058:	beq	1517c <__assert_fail@plt+0x3af4>
   1505c:	movw	r2, #20045	; 0x4e4d
   15060:	movt	r2, #16969	; 0x4249
   15064:	cmp	r3, r2
   15068:	bhi	153fc <__assert_fail@plt+0x3d74>
   1506c:	movw	r2, #17994	; 0x464a
   15070:	movt	r2, #12627	; 0x3153
   15074:	cmp	r3, r2
   15078:	beq	1517c <__assert_fail@plt+0x3af4>
   1507c:	movw	r2, #21297	; 0x5331
   15080:	movt	r2, #16966	; 0x4246
   15084:	cmp	r3, r2
   15088:	bne	14f08 <__assert_fail@plt+0x3880>
   1508c:	b	1517c <__assert_fail@plt+0x3af4>
   15090:	movw	r2, #65518	; 0xffee
   15094:	movt	r2, #192	; 0xc0
   15098:	cmp	r3, r2
   1509c:	beq	1517c <__assert_fail@plt+0x3af4>
   150a0:	bhi	15184 <__assert_fail@plt+0x3afc>
   150a4:	movw	r2, #61265	; 0xef51
   150a8:	cmp	r3, r2
   150ac:	beq	1517c <__assert_fail@plt+0x3af4>
   150b0:	bls	1536c <__assert_fail@plt+0x3ce4>
   150b4:	movw	r2, #6484	; 0x1954
   150b8:	movt	r2, #1
   150bc:	cmp	r3, r2
   150c0:	beq	1517c <__assert_fail@plt+0x3af4>
   150c4:	movw	r2, #6484	; 0x1954
   150c8:	movt	r2, #1
   150cc:	cmp	r3, r2
   150d0:	bhi	1545c <__assert_fail@plt+0x3dd4>
   150d4:	movw	r2, #61267	; 0xef53
   150d8:	cmp	r3, r2
   150dc:	beq	1517c <__assert_fail@plt+0x3af4>
   150e0:	add	r2, r2, #524	; 0x20c
   150e4:	cmp	r3, r2
   150e8:	bne	14f08 <__assert_fail@plt+0x3880>
   150ec:	b	1517c <__assert_fail@plt+0x3af4>
   150f0:	movw	r2, #18520	; 0x4858
   150f4:	cmp	r3, r2
   150f8:	beq	1517c <__assert_fail@plt+0x3af4>
   150fc:	bhi	15340 <__assert_fail@plt+0x3cb8>
   15100:	movw	r2, #16390	; 0x4006
   15104:	cmp	r3, r2
   15108:	beq	1517c <__assert_fail@plt+0x3af4>
   1510c:	bhi	154a4 <__assert_fail@plt+0x3e1c>
   15110:	cmp	r3, #16384	; 0x4000
   15114:	beq	1517c <__assert_fail@plt+0x3af4>
   15118:	movw	r2, #16388	; 0x4004
   1511c:	cmp	r3, r2
   15120:	bne	14f08 <__assert_fail@plt+0x3880>
   15124:	b	1517c <__assert_fail@plt+0x3af4>
   15128:	mov	r2, #256	; 0x100
   1512c:	movt	r2, #21529	; 0x5419
   15130:	cmp	r3, r2
   15134:	beq	1517c <__assert_fail@plt+0x3af4>
   15138:	bhi	152a8 <__assert_fail@plt+0x3c20>
   1513c:	movw	r2, #18502	; 0x4846
   15140:	movt	r2, #21318	; 0x5346
   15144:	cmp	r3, r2
   15148:	beq	1517c <__assert_fail@plt+0x3af4>
   1514c:	movw	r2, #18502	; 0x4846
   15150:	movt	r2, #21318	; 0x5346
   15154:	cmp	r3, r2
   15158:	bhi	153b4 <__assert_fail@plt+0x3d2c>
   1515c:	movw	r2, #18803	; 0x4973
   15160:	movt	r2, #21093	; 0x5265
   15164:	cmp	r3, r2
   15168:	beq	1517c <__assert_fail@plt+0x3af4>
   1516c:	movw	r2, #12621	; 0x314d
   15170:	movt	r2, #21318	; 0x5346
   15174:	cmp	r3, r2
   15178:	bne	14f08 <__assert_fail@plt+0x3880>
   1517c:	mov	r0, #0
   15180:	b	14f0c <__assert_fail@plt+0x3884>
   15184:	movw	r2, #22561	; 0x5821
   15188:	movt	r2, #1893	; 0x765
   1518c:	cmp	r3, r2
   15190:	beq	1517c <__assert_fail@plt+0x3af4>
   15194:	bls	15264 <__assert_fail@plt+0x3bdc>
   15198:	movw	r2, #30804	; 0x7854
   1519c:	movt	r2, #4400	; 0x1130
   151a0:	cmp	r3, r2
   151a4:	beq	1517c <__assert_fail@plt+0x3af4>
   151a8:	movw	r2, #30804	; 0x7854
   151ac:	movt	r2, #4400	; 0x1130
   151b0:	cmp	r3, r2
   151b4:	bhi	15528 <__assert_fail@plt+0x3ea0>
   151b8:	movw	r2, #6452	; 0x1934
   151bc:	movt	r2, #2308	; 0x904
   151c0:	cmp	r3, r2
   151c4:	beq	1517c <__assert_fail@plt+0x3af4>
   151c8:	movw	r2, #7658	; 0x1dea
   151cc:	movt	r2, #2989	; 0xbad
   151d0:	cmp	r3, r2
   151d4:	bne	14f08 <__assert_fail@plt+0x3880>
   151d8:	b	1517c <__assert_fail@plt+0x3af4>
   151dc:	movw	r2, #26227	; 0x6673
   151e0:	movt	r2, #28275	; 0x6e73
   151e4:	cmp	r3, r2
   151e8:	beq	1517c <__assert_fail@plt+0x3af4>
   151ec:	movw	r2, #26227	; 0x6673
   151f0:	movt	r2, #28275	; 0x6e73
   151f4:	cmp	r3, r2
   151f8:	bhi	15390 <__assert_fail@plt+0x3d08>
   151fc:	movw	r2, #26985	; 0x6969
   15200:	movt	r2, #26457	; 0x6759
   15204:	cmp	r3, r2
   15208:	beq	1517c <__assert_fail@plt+0x3af4>
   1520c:	movw	r2, #4386	; 0x1122
   15210:	movt	r2, #26649	; 0x6819
   15214:	cmp	r3, r2
   15218:	bne	14f08 <__assert_fail@plt+0x3880>
   1521c:	b	1517c <__assert_fail@plt+0x3af4>
   15220:	movw	r2, #8208	; 0x2010
   15224:	movt	r2, #62197	; 0xf2f5
   15228:	cmp	r3, r2
   1522c:	beq	1517c <__assert_fail@plt+0x3af4>
   15230:	movw	r2, #8208	; 0x2010
   15234:	movt	r2, #62197	; 0xf2f5
   15238:	cmp	r3, r2
   1523c:	bhi	154e0 <__assert_fail@plt+0x3e58>
   15240:	movw	r2, #18961	; 0x4a11
   15244:	movt	r2, #51966	; 0xcafe
   15248:	cmp	r3, r2
   1524c:	beq	1517c <__assert_fail@plt+0x3af4>
   15250:	movw	r2, #33252	; 0x81e4
   15254:	movt	r2, #56926	; 0xde5e
   15258:	cmp	r3, r2
   1525c:	bne	14f08 <__assert_fail@plt+0x3880>
   15260:	b	1517c <__assert_fail@plt+0x3af4>
   15264:	movw	r2, #53613	; 0xd16d
   15268:	movt	r2, #303	; 0x12f
   1526c:	cmp	r3, r2
   15270:	beq	1517c <__assert_fail@plt+0x3af4>
   15274:	movw	r2, #53613	; 0xd16d
   15278:	movt	r2, #303	; 0x12f
   1527c:	cmp	r3, r2
   15280:	bhi	15568 <__assert_fail@plt+0x3ee0>
   15284:	movw	r2, #6548	; 0x1994
   15288:	movt	r2, #258	; 0x102
   1528c:	cmp	r3, r2
   15290:	beq	1517c <__assert_fail@plt+0x3af4>
   15294:	movw	r2, #6551	; 0x1997
   15298:	movt	r2, #258	; 0x102
   1529c:	cmp	r3, r2
   152a0:	bne	14f08 <__assert_fail@plt+0x3880>
   152a4:	b	1517c <__assert_fail@plt+0x3af4>
   152a8:	movw	r2, #21314	; 0x5342
   152ac:	movt	r2, #22598	; 0x5846
   152b0:	cmp	r3, r2
   152b4:	beq	1517c <__assert_fail@plt+0x3af4>
   152b8:	movw	r2, #21314	; 0x5342
   152bc:	movt	r2, #22598	; 0x5846
   152c0:	cmp	r3, r2
   152c4:	bhi	15504 <__assert_fail@plt+0x3e7c>
   152c8:	movw	r2, #18003	; 0x4653
   152cc:	movt	r2, #22106	; 0x565a
   152d0:	cmp	r3, r2
   152d4:	beq	1517c <__assert_fail@plt+0x3af4>
   152d8:	movw	r2, #22569	; 0x5829
   152dc:	movt	r2, #22569	; 0x5829
   152e0:	cmp	r3, r2
   152e4:	bne	14f08 <__assert_fail@plt+0x3880>
   152e8:	b	1517c <__assert_fail@plt+0x3af4>
   152ec:	movw	r2, #391	; 0x187
   152f0:	cmp	r3, r2
   152f4:	beq	1517c <__assert_fail@plt+0x3af4>
   152f8:	cmp	r3, #392	; 0x188
   152fc:	bcs	15420 <__assert_fail@plt+0x3d98>
   15300:	cmp	r3, #47	; 0x2f
   15304:	bne	14f08 <__assert_fail@plt+0x3880>
   15308:	b	1517c <__assert_fail@plt+0x3af4>
   1530c:	movw	r2, #6405	; 0x1905
   15310:	movt	r2, #9221	; 0x2405
   15314:	cmp	r3, r2
   15318:	beq	1517c <__assert_fail@plt+0x3af4>
   1531c:	movw	r2, #6405	; 0x1905
   15320:	movt	r2, #9221	; 0x2405
   15324:	cmp	r3, r2
   15328:	bhi	15480 <__assert_fail@plt+0x3df8>
   1532c:	movw	r2, #64206	; 0xface
   15330:	movt	r2, #7085	; 0x1bad
   15334:	cmp	r3, r2
   15338:	bne	14f08 <__assert_fail@plt+0x3880>
   1533c:	b	1517c <__assert_fail@plt+0x3af4>
   15340:	movw	r2, #24053	; 0x5df5
   15344:	cmp	r3, r2
   15348:	beq	1517c <__assert_fail@plt+0x3af4>
   1534c:	bhi	1554c <__assert_fail@plt+0x3ec4>
   15350:	movw	r2, #19780	; 0x4d44
   15354:	cmp	r3, r2
   15358:	beq	1517c <__assert_fail@plt+0x3af4>
   1535c:	add	r2, r2, #22
   15360:	cmp	r3, r2
   15364:	bne	14f08 <__assert_fail@plt+0x3880>
   15368:	b	1517c <__assert_fail@plt+0x3af4>
   1536c:	movw	r2, #44533	; 0xadf5
   15370:	cmp	r3, r2
   15374:	beq	1517c <__assert_fail@plt+0x3af4>
   15378:	bhi	154d0 <__assert_fail@plt+0x3e48>
   1537c:	sub	r3, r3, #40704	; 0x9f00
   15380:	sub	r3, r3, #160	; 0xa0
   15384:	cmp	r3, #2
   15388:	bhi	14f08 <__assert_fail@plt+0x3880>
   1538c:	b	1517c <__assert_fail@plt+0x3af4>
   15390:	movw	r2, #26227	; 0x6673
   15394:	movt	r2, #29539	; 0x7363
   15398:	cmp	r3, r2
   1539c:	beq	1517c <__assert_fail@plt+0x3af4>
   153a0:	movw	r2, #29544	; 0x7368
   153a4:	movt	r2, #29553	; 0x7371
   153a8:	cmp	r3, r2
   153ac:	bne	14f08 <__assert_fail@plt+0x3880>
   153b0:	b	1517c <__assert_fail@plt+0x3af4>
   153b4:	movw	r2, #21582	; 0x544e
   153b8:	movt	r2, #21318	; 0x5346
   153bc:	cmp	r3, r2
   153c0:	beq	1517c <__assert_fail@plt+0x3af4>
   153c4:	movw	r2, #17227	; 0x434b
   153c8:	movt	r2, #21327	; 0x534f
   153cc:	cmp	r3, r2
   153d0:	bne	14f08 <__assert_fail@plt+0x3880>
   153d4:	b	1517c <__assert_fail@plt+0x3af4>
   153d8:	movw	r2, #22774	; 0x58f6
   153dc:	movt	r2, #38276	; 0x9584
   153e0:	cmp	r3, r2
   153e4:	beq	1517c <__assert_fail@plt+0x3af4>
   153e8:	movw	r2, #6516	; 0x1974
   153ec:	movt	r2, #43962	; 0xabba
   153f0:	cmp	r3, r2
   153f4:	bne	14f08 <__assert_fail@plt+0x3880>
   153f8:	b	1517c <__assert_fail@plt+0x3af4>
   153fc:	movw	r2, #23891	; 0x5d53
   15400:	movt	r2, #17217	; 0x4341
   15404:	cmp	r3, r2
   15408:	beq	1517c <__assert_fail@plt+0x3af4>
   1540c:	movw	r2, #52520	; 0xcd28
   15410:	movt	r2, #17725	; 0x453d
   15414:	cmp	r3, r2
   15418:	bne	14f08 <__assert_fail@plt+0x3880>
   1541c:	b	1517c <__assert_fail@plt+0x3af4>
   15420:	cmp	r3, #1984	; 0x7c0
   15424:	beq	1517c <__assert_fail@plt+0x3af4>
   15428:	movw	r2, #4979	; 0x1373
   1542c:	cmp	r3, r2
   15430:	bne	14f08 <__assert_fail@plt+0x3880>
   15434:	b	1517c <__assert_fail@plt+0x3af4>
   15438:	movw	r2, #29296	; 0x7270
   1543c:	movt	r2, #25447	; 0x6367
   15440:	cmp	r3, r2
   15444:	beq	1517c <__assert_fail@plt+0x3af4>
   15448:	movw	r2, #26400	; 0x6720
   1544c:	movt	r2, #25698	; 0x6462
   15450:	cmp	r3, r2
   15454:	bne	14f08 <__assert_fail@plt+0x3880>
   15458:	b	1517c <__assert_fail@plt+0x3af4>
   1545c:	movw	r2, #57579	; 0xe0eb
   15460:	movt	r2, #39	; 0x27
   15464:	cmp	r3, r2
   15468:	beq	1517c <__assert_fail@plt+0x3af4>
   1546c:	movw	r2, #19027	; 0x4a53
   15470:	movt	r2, #65	; 0x41
   15474:	cmp	r3, r2
   15478:	bne	14f08 <__assert_fail@plt+0x3880>
   1547c:	b	1517c <__assert_fail@plt+0x3af4>
   15480:	movw	r2, #15685	; 0x3d45
   15484:	movt	r2, #10445	; 0x28cd
   15488:	cmp	r3, r2
   1548c:	beq	1517c <__assert_fail@plt+0x3af4>
   15490:	movw	r2, #7658	; 0x1dea
   15494:	movt	r2, #11181	; 0x2bad
   15498:	cmp	r3, r2
   1549c:	bne	14f08 <__assert_fail@plt+0x3880>
   154a0:	b	1517c <__assert_fail@plt+0x3af4>
   154a4:	movw	r2, #16964	; 0x4244
   154a8:	cmp	r3, r2
   154ac:	beq	1517c <__assert_fail@plt+0x3af4>
   154b0:	movw	r2, #18475	; 0x482b
   154b4:	cmp	r3, r2
   154b8:	bne	14f08 <__assert_fail@plt+0x3880>
   154bc:	b	1517c <__assert_fail@plt+0x3af4>
   154c0:	movw	r2, #9320	; 0x2468
   154c4:	cmp	r3, r2
   154c8:	bne	14f88 <__assert_fail@plt+0x3900>
   154cc:	b	1517c <__assert_fail@plt+0x3af4>
   154d0:	movw	r2, #44543	; 0xadff
   154d4:	cmp	r3, r2
   154d8:	bne	14f08 <__assert_fail@plt+0x3880>
   154dc:	b	1517c <__assert_fail@plt+0x3af4>
   154e0:	movw	r2, #65420	; 0xff8c
   154e4:	movt	r2, #63868	; 0xf97c
   154e8:	cmp	r3, r2
   154ec:	beq	1517c <__assert_fail@plt+0x3af4>
   154f0:	movw	r2, #59465	; 0xe849
   154f4:	movt	r2, #63893	; 0xf995
   154f8:	cmp	r3, r2
   154fc:	bne	14f08 <__assert_fail@plt+0x3880>
   15500:	b	1517c <__assert_fail@plt+0x3af4>
   15504:	movw	r2, #27120	; 0x69f0
   15508:	movt	r2, #23100	; 0x5a3c
   1550c:	cmp	r3, r2
   15510:	beq	1517c <__assert_fail@plt+0x3af4>
   15514:	movw	r2, #11765	; 0x2df5
   15518:	movt	r2, #24010	; 0x5dca
   1551c:	cmp	r3, r2
   15520:	bne	14f08 <__assert_fail@plt+0x3880>
   15524:	b	1517c <__assert_fail@plt+0x3af4>
   15528:	movw	r2, #4966	; 0x1366
   1552c:	movt	r2, #4966	; 0x1366
   15530:	cmp	r3, r2
   15534:	beq	1517c <__assert_fail@plt+0x3af4>
   15538:	movw	r2, #13126	; 0x3346
   1553c:	movt	r2, #5377	; 0x1501
   15540:	cmp	r3, r2
   15544:	bne	14f08 <__assert_fail@plt+0x3880>
   15548:	b	1517c <__assert_fail@plt+0x3af4>
   1554c:	movw	r2, #29301	; 0x7275
   15550:	cmp	r3, r2
   15554:	beq	1517c <__assert_fail@plt+0x3af4>
   15558:	add	r2, r2, #65	; 0x41
   1555c:	cmp	r3, r2
   15560:	bne	14f08 <__assert_fail@plt+0x3880>
   15564:	b	1517c <__assert_fail@plt+0x3af4>
   15568:	movw	r2, #2124	; 0x84c
   1556c:	movt	r2, #65232	; 0xfed0
   15570:	add	r2, r3, r2
   15574:	cmp	r2, #3
   15578:	bhi	14f08 <__assert_fail@plt+0x3880>
   1557c:	b	1517c <__assert_fail@plt+0x3af4>
   15580:	bl	113e8 <__stack_chk_fail@plt>
   15584:			; <UNDEFINED> instruction: 0x000191bc
   15588:	andeq	r0, r0, r0, asr #2
   1558c:	andeq	r6, r0, r8, lsr #29
   15590:	ldr	r3, [pc, #1548]	; 15ba4 <__assert_fail@plt+0x451c>
   15594:	ldr	r2, [pc, #1548]	; 15ba8 <__assert_fail@plt+0x4520>
   15598:	add	r3, pc, r3
   1559c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155a0:	mov	r8, r0
   155a4:	ldr	r0, [r0]
   155a8:	sub	sp, sp, #124	; 0x7c
   155ac:	ldr	r5, [r3, r2]
   155b0:	mov	r6, r1
   155b4:	ldrb	r2, [r0]
   155b8:	ldr	r3, [r5]
   155bc:	cmp	r2, #45	; 0x2d
   155c0:	str	r3, [sp, #116]	; 0x74
   155c4:	bne	15750 <__assert_fail@plt+0x40c8>
   155c8:	ldrb	r4, [r0, #1]
   155cc:	ldr	r9, [r8, #52]	; 0x34
   155d0:	cmp	r4, #0
   155d4:	ldrb	sl, [r8, #46]	; 0x2e
   155d8:	moveq	r2, r9
   155dc:	moveq	r7, #1
   155e0:	bne	15758 <__assert_fail@plt+0x40d0>
   155e4:	ldr	r3, [r8, #48]	; 0x30
   155e8:	cmn	r3, #1
   155ec:	movne	r3, #0
   155f0:	moveq	r3, #1
   155f4:	cmp	r2, #0
   155f8:	eoreq	r3, r3, #1
   155fc:	cmp	r3, #0
   15600:	beq	15b64 <__assert_fail@plt+0x44dc>
   15604:	ldr	r2, [pc, #1440]	; 15bac <__assert_fail@plt+0x4524>
   15608:	add	r2, pc, r2
   1560c:	ldrb	r2, [r2, #1]
   15610:	cmp	r2, #0
   15614:	bne	15778 <__assert_fail@plt+0x40f0>
   15618:	ldr	r2, [pc, #1424]	; 15bb0 <__assert_fail@plt+0x4528>
   1561c:	strb	r3, [r8, #46]	; 0x2e
   15620:	add	r2, pc, r2
   15624:	ldrb	fp, [r2, #2]
   15628:	cmp	fp, #0
   1562c:	beq	15980 <__assert_fail@plt+0x42f8>
   15630:	cmn	r4, #1
   15634:	beq	156b4 <__assert_fail@plt+0x402c>
   15638:	mov	r0, #3
   1563c:	mov	r1, r4
   15640:	add	r2, sp, #8
   15644:	bl	11430 <__fxstat64@plt>
   15648:	cmp	r0, #0
   1564c:	blt	156b4 <__assert_fail@plt+0x402c>
   15650:	ldr	r3, [sp, #24]
   15654:	and	r2, r3, #61440	; 0xf000
   15658:	and	r3, r3, #45056	; 0xb000
   1565c:	cmp	r3, #32768	; 0x8000
   15660:	cmpne	r2, #4096	; 0x1000
   15664:	beq	157cc <__assert_fail@plt+0x4144>
   15668:	cmp	r2, #8192	; 0x2000
   1566c:	beq	157cc <__assert_fail@plt+0x4144>
   15670:	ldr	r1, [pc, #1340]	; 15bb4 <__assert_fail@plt+0x452c>
   15674:	mvn	r3, #0
   15678:	mov	r2, #5
   1567c:	str	r3, [r8, #52]	; 0x34
   15680:	mov	r0, #0
   15684:	add	r1, pc, r1
   15688:	bl	113dc <dcgettext@plt>
   1568c:	ldr	r3, [r8]
   15690:	ldrb	r2, [r3]
   15694:	cmp	r2, #45	; 0x2d
   15698:	mov	r6, r0
   1569c:	bne	15b1c <__assert_fail@plt+0x4494>
   156a0:	ldrb	r2, [r3, #1]
   156a4:	cmp	r2, #0
   156a8:	bne	15b1c <__assert_fail@plt+0x4494>
   156ac:	bl	14294 <__assert_fail@plt+0x2c0c>
   156b0:	b	15b20 <__assert_fail@plt+0x4498>
   156b4:	bl	11568 <__errno_location@plt>
   156b8:	ldrb	r3, [r8, #46]	; 0x2e
   156bc:	cmp	r3, #0
   156c0:	ldr	r6, [r0]
   156c4:	str	r6, [r8, #52]	; 0x34
   156c8:	bne	15784 <__assert_fail@plt+0x40fc>
   156cc:	cmp	sl, #0
   156d0:	bne	15a58 <__assert_fail@plt+0x43d0>
   156d4:	ldr	r1, [r8]
   156d8:	ldrb	r3, [r1]
   156dc:	cmp	r3, #45	; 0x2d
   156e0:	bne	156f8 <__assert_fail@plt+0x4070>
   156e4:	ldrb	r3, [r1, #1]
   156e8:	cmp	r3, #0
   156ec:	bne	156f8 <__assert_fail@plt+0x4070>
   156f0:	bl	14294 <__assert_fail@plt+0x2c0c>
   156f4:	mov	r1, r0
   156f8:	mov	r0, r4
   156fc:	bl	142ac <__assert_fail@plt+0x2c24>
   15700:	ldr	r1, [r8]
   15704:	ldr	r4, [r8, #48]	; 0x30
   15708:	ldrb	r3, [r1]
   1570c:	cmp	r3, #45	; 0x2d
   15710:	bne	15728 <__assert_fail@plt+0x40a0>
   15714:	ldrb	r3, [r1, #1]
   15718:	cmp	r3, #0
   1571c:	bne	15728 <__assert_fail@plt+0x40a0>
   15720:	bl	14294 <__assert_fail@plt+0x2c0c>
   15724:	mov	r1, r0
   15728:	mov	r0, r4
   1572c:	bl	142ac <__assert_fail@plt+0x2c24>
   15730:	mvn	r3, #0
   15734:	str	r3, [r8, #48]	; 0x30
   15738:	ldr	r2, [sp, #116]	; 0x74
   1573c:	ldr	r3, [r5]
   15740:	cmp	r2, r3
   15744:	bne	15b60 <__assert_fail@plt+0x44d8>
   15748:	add	sp, sp, #124	; 0x7c
   1574c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15750:	ldrb	sl, [r8, #46]	; 0x2e
   15754:	ldr	r9, [r8, #52]	; 0x34
   15758:	cmp	r6, #0
   1575c:	mov	r7, #0
   15760:	moveq	r1, #2048	; 0x800
   15764:	movne	r1, #0
   15768:	bl	16584 <close_stdout@@Base+0x278>
   1576c:	ldr	r2, [r8, #52]	; 0x34
   15770:	mov	r4, r0
   15774:	b	155e4 <__assert_fail@plt+0x3f5c>
   15778:	adds	r3, r4, #1
   1577c:	movne	r3, #1
   15780:	b	15618 <__assert_fail@plt+0x3f90>
   15784:	ldr	r6, [r0]
   15788:	cmp	r6, r9
   1578c:	beq	156d4 <__assert_fail@plt+0x404c>
   15790:	ldr	r3, [r8]
   15794:	ldrb	r2, [r3]
   15798:	cmp	r2, #45	; 0x2d
   1579c:	bne	157b4 <__assert_fail@plt+0x412c>
   157a0:	ldrb	r2, [r3, #1]
   157a4:	cmp	r2, #0
   157a8:	bne	157b4 <__assert_fail@plt+0x412c>
   157ac:	bl	14294 <__assert_fail@plt+0x2c0c>
   157b0:	mov	r3, r0
   157b4:	ldr	r2, [pc, #1020]	; 15bb8 <__assert_fail@plt+0x4530>
   157b8:	mov	r1, r6
   157bc:	mov	r0, #0
   157c0:	add	r2, pc, r2
   157c4:	bl	11484 <error@plt>
   157c8:	b	156d4 <__assert_fail@plt+0x404c>
   157cc:	cmp	fp, #0
   157d0:	bne	15808 <__assert_fail@plt+0x4180>
   157d4:	ldr	r1, [r8]
   157d8:	ldrb	r3, [r1]
   157dc:	cmp	r3, #45	; 0x2d
   157e0:	bne	157f8 <__assert_fail@plt+0x4170>
   157e4:	ldrb	r3, [r1, #1]
   157e8:	cmp	r3, #0
   157ec:	bne	157f8 <__assert_fail@plt+0x4170>
   157f0:	bl	14294 <__assert_fail@plt+0x2c0c>
   157f4:	mov	r1, r0
   157f8:	mov	r0, r4
   157fc:	bl	14e34 <__assert_fail@plt+0x37ac>
   15800:	cmp	r0, #0
   15804:	bne	15ab4 <__assert_fail@plt+0x442c>
   15808:	bics	r3, r9, #2
   1580c:	mov	r0, #0
   15810:	str	r0, [r8, #52]	; 0x34
   15814:	beq	1585c <__assert_fail@plt+0x41d4>
   15818:	ldr	r3, [r8, #48]	; 0x30
   1581c:	ldr	r1, [pc, #920]	; 15bbc <__assert_fail@plt+0x4534>
   15820:	cmn	r3, #1
   15824:	add	r1, pc, r1
   15828:	bne	15b84 <__assert_fail@plt+0x44fc>
   1582c:	mov	r2, #5
   15830:	bl	113dc <dcgettext@plt>
   15834:	ldr	r3, [r8]
   15838:	ldrb	r2, [r3]
   1583c:	cmp	r2, #45	; 0x2d
   15840:	mov	r9, r0
   15844:	bne	158c4 <__assert_fail@plt+0x423c>
   15848:	ldrb	r2, [r3, #1]
   1584c:	cmp	r2, #0
   15850:	bne	158c4 <__assert_fail@plt+0x423c>
   15854:	bl	14294 <__assert_fail@plt+0x2c0c>
   15858:	b	158c8 <__assert_fail@plt+0x4240>
   1585c:	ldrd	r0, [r8, #32]
   15860:	ldrd	r2, [sp, #104]	; 0x68
   15864:	cmp	r1, r3
   15868:	cmpeq	r0, r2
   1586c:	beq	15a08 <__assert_fail@plt+0x4380>
   15870:	ldr	r9, [r8, #48]	; 0x30
   15874:	mov	r0, #0
   15878:	ldr	r1, [pc, #832]	; 15bc0 <__assert_fail@plt+0x4538>
   1587c:	cmn	r9, #1
   15880:	add	r1, pc, r1
   15884:	beq	1582c <__assert_fail@plt+0x41a4>
   15888:	ldr	r1, [r8]
   1588c:	ldrb	r3, [r1]
   15890:	cmp	r3, #45	; 0x2d
   15894:	bne	158ac <__assert_fail@plt+0x4224>
   15898:	ldrb	r3, [r1, #1]
   1589c:	cmp	r3, #0
   158a0:	bne	158ac <__assert_fail@plt+0x4224>
   158a4:	bl	14294 <__assert_fail@plt+0x2c0c>
   158a8:	mov	r1, r0
   158ac:	mov	r0, r9
   158b0:	bl	142ac <__assert_fail@plt+0x2c24>
   158b4:	ldr	r1, [pc, #776]	; 15bc4 <__assert_fail@plt+0x453c>
   158b8:	mov	r0, #0
   158bc:	add	r1, pc, r1
   158c0:	b	1582c <__assert_fail@plt+0x41a4>
   158c4:	mov	r0, r3
   158c8:	bl	19070 <close_stdout@@Base+0x2d64>
   158cc:	mov	r2, r9
   158d0:	mov	r3, r0
   158d4:	mov	r0, #0
   158d8:	mov	r1, r0
   158dc:	bl	11484 <error@plt>
   158e0:	ldr	sl, [sp, #8]
   158e4:	ldr	fp, [sp, #12]
   158e8:	ldr	lr, [sp, #104]	; 0x68
   158ec:	ldr	r9, [sp, #108]	; 0x6c
   158f0:	cmp	r7, #0
   158f4:	ldr	ip, [sp, #92]	; 0x5c
   158f8:	ldr	r7, [sp, #88]	; 0x58
   158fc:	mov	r3, #0
   15900:	ldr	r1, [sp, #24]
   15904:	mvnne	r6, #0
   15908:	ldr	r0, [r8]
   1590c:	mov	r2, #0
   15910:	str	r6, [r8, #56]	; 0x38
   15914:	mov	r6, #0
   15918:	str	r4, [r8, #48]	; 0x30
   1591c:	str	sl, [r8, #24]
   15920:	str	fp, [r8, #28]
   15924:	str	lr, [r8, #32]
   15928:	str	r9, [r8, #36]	; 0x24
   1592c:	str	ip, [r8, #20]
   15930:	str	r7, [r8, #16]
   15934:	str	r1, [r8, #40]	; 0x28
   15938:	strd	r2, [r8, #8]
   1593c:	strd	r2, [r8, #72]	; 0x48
   15940:	strb	r6, [r8, #44]	; 0x2c
   15944:	ldrb	r3, [r0]
   15948:	cmp	r3, #45	; 0x2d
   1594c:	bne	15960 <__assert_fail@plt+0x42d8>
   15950:	ldrb	r3, [r0, #1]
   15954:	cmp	r3, #0
   15958:	bne	15960 <__assert_fail@plt+0x42d8>
   1595c:	bl	14294 <__assert_fail@plt+0x2c0c>
   15960:	str	r0, [sp, #4]
   15964:	mov	r1, #0
   15968:	mov	r0, r4
   1596c:	mov	r2, #0
   15970:	mov	r3, #0
   15974:	str	r1, [sp]
   15978:	bl	1477c <__assert_fail@plt+0x30f4>
   1597c:	b	15738 <__assert_fail@plt+0x40b0>
   15980:	mov	r0, #3
   15984:	ldr	r1, [r8]
   15988:	add	r2, sp, #8
   1598c:	bl	1167c <__lxstat64@plt>
   15990:	cmp	r0, #0
   15994:	bne	15630 <__assert_fail@plt+0x3fa8>
   15998:	ldr	r3, [sp, #24]
   1599c:	and	r3, r3, #61440	; 0xf000
   159a0:	cmp	r3, #40960	; 0xa000
   159a4:	bne	15630 <__assert_fail@plt+0x3fa8>
   159a8:	ldr	r1, [pc, #536]	; 15bc8 <__assert_fail@plt+0x4540>
   159ac:	mov	r3, #1
   159b0:	mvn	r2, #0
   159b4:	strb	r3, [r8, #44]	; 0x2c
   159b8:	str	r2, [r8, #52]	; 0x34
   159bc:	add	r1, pc, r1
   159c0:	mov	r2, #5
   159c4:	bl	113dc <dcgettext@plt>
   159c8:	ldr	r3, [r8]
   159cc:	ldrb	r2, [r3]
   159d0:	cmp	r2, #45	; 0x2d
   159d4:	mov	r6, r0
   159d8:	bne	15b4c <__assert_fail@plt+0x44c4>
   159dc:	ldrb	r2, [r3, #1]
   159e0:	cmp	r2, #0
   159e4:	bne	15b4c <__assert_fail@plt+0x44c4>
   159e8:	bl	14294 <__assert_fail@plt+0x2c0c>
   159ec:	bl	19070 <close_stdout@@Base+0x2d64>
   159f0:	mov	r2, r6
   159f4:	mov	r3, r0
   159f8:	mov	r0, #0
   159fc:	mov	r1, r0
   15a00:	bl	11484 <error@plt>
   15a04:	b	156d4 <__assert_fail@plt+0x404c>
   15a08:	ldrd	sl, [r8, #24]
   15a0c:	ldrd	r2, [sp, #8]
   15a10:	cmp	fp, r3
   15a14:	cmpeq	sl, r2
   15a18:	bne	15870 <__assert_fail@plt+0x41e8>
   15a1c:	ldr	r3, [r8, #48]	; 0x30
   15a20:	cmn	r3, #1
   15a24:	beq	15b54 <__assert_fail@plt+0x44cc>
   15a28:	ldr	r1, [r8]
   15a2c:	ldrb	r3, [r1]
   15a30:	cmp	r3, #45	; 0x2d
   15a34:	bne	15a4c <__assert_fail@plt+0x43c4>
   15a38:	ldrb	r3, [r1, #1]
   15a3c:	cmp	r3, #0
   15a40:	bne	15a4c <__assert_fail@plt+0x43c4>
   15a44:	bl	14294 <__assert_fail@plt+0x2c0c>
   15a48:	mov	r1, r0
   15a4c:	mov	r0, r4
   15a50:	bl	142ac <__assert_fail@plt+0x2c24>
   15a54:	b	15738 <__assert_fail@plt+0x40b0>
   15a58:	ldr	r1, [pc, #364]	; 15bcc <__assert_fail@plt+0x4544>
   15a5c:	mov	r0, r3
   15a60:	mov	r2, #5
   15a64:	add	r1, pc, r1
   15a68:	bl	113dc <dcgettext@plt>
   15a6c:	ldr	r3, [r8]
   15a70:	ldrb	r2, [r3]
   15a74:	cmp	r2, #45	; 0x2d
   15a78:	mov	r7, r0
   15a7c:	bne	15a94 <__assert_fail@plt+0x440c>
   15a80:	ldrb	r2, [r3, #1]
   15a84:	cmp	r2, #0
   15a88:	bne	15a94 <__assert_fail@plt+0x440c>
   15a8c:	bl	14294 <__assert_fail@plt+0x2c0c>
   15a90:	b	15a98 <__assert_fail@plt+0x4410>
   15a94:	mov	r0, r3
   15a98:	bl	19070 <close_stdout@@Base+0x2d64>
   15a9c:	mov	r1, r6
   15aa0:	mov	r2, r7
   15aa4:	mov	r3, r0
   15aa8:	mov	r0, #0
   15aac:	bl	11484 <error@plt>
   15ab0:	b	156d4 <__assert_fail@plt+0x404c>
   15ab4:	ldr	r1, [pc, #276]	; 15bd0 <__assert_fail@plt+0x4548>
   15ab8:	mvn	r3, #0
   15abc:	mov	r2, #5
   15ac0:	str	r3, [r8, #52]	; 0x34
   15ac4:	mov	r0, #0
   15ac8:	add	r1, pc, r1
   15acc:	bl	113dc <dcgettext@plt>
   15ad0:	ldr	r3, [r8]
   15ad4:	ldrb	r2, [r3]
   15ad8:	cmp	r2, #45	; 0x2d
   15adc:	mov	r6, r0
   15ae0:	bne	15b44 <__assert_fail@plt+0x44bc>
   15ae4:	ldrb	r2, [r3, #1]
   15ae8:	cmp	r2, #0
   15aec:	bne	15b44 <__assert_fail@plt+0x44bc>
   15af0:	bl	14294 <__assert_fail@plt+0x2c0c>
   15af4:	bl	19070 <close_stdout@@Base+0x2d64>
   15af8:	mov	r2, r6
   15afc:	mov	r3, r0
   15b00:	mov	r0, #0
   15b04:	mov	r1, r0
   15b08:	bl	11484 <error@plt>
   15b0c:	mov	r3, #1
   15b10:	strb	r3, [r8, #44]	; 0x2c
   15b14:	strb	r3, [r8, #45]	; 0x2d
   15b18:	b	156d4 <__assert_fail@plt+0x404c>
   15b1c:	mov	r0, r3
   15b20:	bl	19070 <close_stdout@@Base+0x2d64>
   15b24:	mov	r2, r6
   15b28:	mov	r3, r0
   15b2c:	mov	r0, #0
   15b30:	mov	r1, r0
   15b34:	bl	11484 <error@plt>
   15b38:	mov	r3, #1
   15b3c:	strb	r3, [r8, #44]	; 0x2c
   15b40:	b	156d4 <__assert_fail@plt+0x404c>
   15b44:	mov	r0, r3
   15b48:	b	15af4 <__assert_fail@plt+0x446c>
   15b4c:	mov	r0, r3
   15b50:	b	159ec <__assert_fail@plt+0x4364>
   15b54:	mov	lr, r0
   15b58:	mov	r9, r1
   15b5c:	b	158f0 <__assert_fail@plt+0x4268>
   15b60:	bl	113e8 <__stack_chk_fail@plt>
   15b64:	ldr	r0, [pc, #104]	; 15bd4 <__assert_fail@plt+0x454c>
   15b68:	mov	r2, #944	; 0x3b0
   15b6c:	ldr	r1, [pc, #100]	; 15bd8 <__assert_fail@plt+0x4550>
   15b70:	ldr	r3, [pc, #100]	; 15bdc <__assert_fail@plt+0x4554>
   15b74:	add	r0, pc, r0
   15b78:	add	r1, pc, r1
   15b7c:	add	r3, pc, r3
   15b80:	bl	11688 <__assert_fail@plt>
   15b84:	ldr	r0, [pc, #84]	; 15be0 <__assert_fail@plt+0x4558>
   15b88:	movw	r2, #1021	; 0x3fd
   15b8c:	ldr	r1, [pc, #80]	; 15be4 <__assert_fail@plt+0x455c>
   15b90:	ldr	r3, [pc, #80]	; 15be8 <__assert_fail@plt+0x4560>
   15b94:	add	r0, pc, r0
   15b98:	add	r1, pc, r1
   15b9c:	add	r3, pc, r3
   15ba0:	bl	11688 <__assert_fail@plt>
   15ba4:	andeq	r8, r1, r0, ror #20
   15ba8:	andeq	r0, r0, r0, asr #2
   15bac:	ldrdeq	r8, [r1], -ip
   15bb0:	andeq	r8, r1, r4, asr #23
   15bb4:	andeq	r6, r0, r0, ror #14
   15bb8:	andeq	r7, r0, ip, lsl r3
   15bbc:	andeq	r6, r0, r4, asr r6
   15bc0:	andeq	r6, r0, r4, lsl r6
   15bc4:	andeq	r6, r0, r4, lsl #12
   15bc8:	andeq	r6, r0, r8, asr #7
   15bcc:	andeq	r6, r0, r4, ror #6
   15bd0:	andeq	r6, r0, r4, ror #6
   15bd4:	strdeq	r6, [r0], -r0
   15bd8:	andeq	r6, r0, r0, lsl #4
   15bdc:	strheq	r6, [r0], -r8
   15be0:	ldrdeq	r6, [r0], -r8
   15be4:	andeq	r6, r0, r0, ror #3
   15be8:	muleq	r0, r8, r0
   15bec:	push	{r4, r5, r6, lr}
   15bf0:	subs	r4, r0, #0
   15bf4:	ldr	r5, [pc, #644]	; 15e80 <__assert_fail@plt+0x47f8>
   15bf8:	add	r5, pc, r5
   15bfc:	beq	15c44 <__assert_fail@plt+0x45bc>
   15c00:	ldr	r3, [pc, #636]	; 15e84 <__assert_fail@plt+0x47fc>
   15c04:	mov	r2, #5
   15c08:	ldr	r1, [pc, #632]	; 15e88 <__assert_fail@plt+0x4800>
   15c0c:	mov	r0, #0
   15c10:	ldr	r3, [r5, r3]
   15c14:	add	r1, pc, r1
   15c18:	ldr	r6, [r3]
   15c1c:	bl	113dc <dcgettext@plt>
   15c20:	ldr	r3, [pc, #612]	; 15e8c <__assert_fail@plt+0x4804>
   15c24:	mov	r1, #1
   15c28:	ldr	r3, [r5, r3]
   15c2c:	ldr	r3, [r3]
   15c30:	mov	r2, r0
   15c34:	mov	r0, r6
   15c38:	bl	115b0 <__fprintf_chk@plt>
   15c3c:	mov	r0, r4
   15c40:	bl	114fc <exit@plt>
   15c44:	ldr	r1, [pc, #580]	; 15e90 <__assert_fail@plt+0x4808>
   15c48:	mov	r2, #5
   15c4c:	add	r1, pc, r1
   15c50:	bl	113dc <dcgettext@plt>
   15c54:	ldr	r3, [pc, #560]	; 15e8c <__assert_fail@plt+0x4804>
   15c58:	ldr	r6, [r5, r3]
   15c5c:	ldr	r2, [r6]
   15c60:	mov	r1, r0
   15c64:	mov	r0, #1
   15c68:	bl	11598 <__printf_chk@plt>
   15c6c:	ldr	r1, [pc, #544]	; 15e94 <__assert_fail@plt+0x480c>
   15c70:	mov	r2, #5
   15c74:	mov	r0, r4
   15c78:	add	r1, pc, r1
   15c7c:	bl	113dc <dcgettext@plt>
   15c80:	mov	r2, #10
   15c84:	mov	r1, r0
   15c88:	mov	r0, #1
   15c8c:	bl	11598 <__printf_chk@plt>
   15c90:	ldr	r1, [pc, #512]	; 15e98 <__assert_fail@plt+0x4810>
   15c94:	mov	r2, #5
   15c98:	mov	r0, r4
   15c9c:	add	r1, pc, r1
   15ca0:	bl	113dc <dcgettext@plt>
   15ca4:	ldr	r3, [pc, #496]	; 15e9c <__assert_fail@plt+0x4814>
   15ca8:	ldr	r5, [r5, r3]
   15cac:	ldr	r1, [r5]
   15cb0:	bl	11328 <fputs_unlocked@plt>
   15cb4:	ldr	r1, [pc, #484]	; 15ea0 <__assert_fail@plt+0x4818>
   15cb8:	mov	r2, #5
   15cbc:	mov	r0, r4
   15cc0:	add	r1, pc, r1
   15cc4:	bl	113dc <dcgettext@plt>
   15cc8:	ldr	r1, [r5]
   15ccc:	bl	11328 <fputs_unlocked@plt>
   15cd0:	ldr	r1, [pc, #460]	; 15ea4 <__assert_fail@plt+0x481c>
   15cd4:	mov	r2, #5
   15cd8:	mov	r0, r4
   15cdc:	add	r1, pc, r1
   15ce0:	bl	113dc <dcgettext@plt>
   15ce4:	ldr	r1, [r5]
   15ce8:	bl	11328 <fputs_unlocked@plt>
   15cec:	ldr	r1, [pc, #436]	; 15ea8 <__assert_fail@plt+0x4820>
   15cf0:	mov	r2, #5
   15cf4:	mov	r0, r4
   15cf8:	add	r1, pc, r1
   15cfc:	bl	113dc <dcgettext@plt>
   15d00:	mov	r3, #5
   15d04:	mov	r2, #10
   15d08:	mov	r1, r0
   15d0c:	mov	r0, #1
   15d10:	bl	11598 <__printf_chk@plt>
   15d14:	ldr	r1, [pc, #400]	; 15eac <__assert_fail@plt+0x4824>
   15d18:	mov	r2, #5
   15d1c:	mov	r0, r4
   15d20:	add	r1, pc, r1
   15d24:	bl	113dc <dcgettext@plt>
   15d28:	ldr	r1, [r5]
   15d2c:	bl	11328 <fputs_unlocked@plt>
   15d30:	ldr	r1, [pc, #376]	; 15eb0 <__assert_fail@plt+0x4828>
   15d34:	mov	r2, #5
   15d38:	mov	r0, r4
   15d3c:	add	r1, pc, r1
   15d40:	bl	113dc <dcgettext@plt>
   15d44:	ldr	r1, [r5]
   15d48:	bl	11328 <fputs_unlocked@plt>
   15d4c:	ldr	r1, [pc, #352]	; 15eb4 <__assert_fail@plt+0x482c>
   15d50:	mov	r2, #5
   15d54:	mov	r0, r4
   15d58:	add	r1, pc, r1
   15d5c:	bl	113dc <dcgettext@plt>
   15d60:	ldr	r1, [r5]
   15d64:	bl	11328 <fputs_unlocked@plt>
   15d68:	ldr	r1, [pc, #328]	; 15eb8 <__assert_fail@plt+0x4830>
   15d6c:	mov	r2, #5
   15d70:	mov	r0, r4
   15d74:	add	r1, pc, r1
   15d78:	bl	113dc <dcgettext@plt>
   15d7c:	ldr	r1, [r5]
   15d80:	bl	11328 <fputs_unlocked@plt>
   15d84:	ldr	r1, [pc, #304]	; 15ebc <__assert_fail@plt+0x4834>
   15d88:	mov	r2, #5
   15d8c:	mov	r0, r4
   15d90:	add	r1, pc, r1
   15d94:	bl	113dc <dcgettext@plt>
   15d98:	ldr	r1, [r5]
   15d9c:	bl	11328 <fputs_unlocked@plt>
   15da0:	ldr	r1, [pc, #280]	; 15ec0 <__assert_fail@plt+0x4838>
   15da4:	mov	r2, #5
   15da8:	mov	r0, r4
   15dac:	add	r1, pc, r1
   15db0:	bl	113dc <dcgettext@plt>
   15db4:	ldr	r1, [r5]
   15db8:	bl	11328 <fputs_unlocked@plt>
   15dbc:	ldr	r1, [pc, #256]	; 15ec4 <__assert_fail@plt+0x483c>
   15dc0:	mov	r2, #5
   15dc4:	mov	r0, r4
   15dc8:	add	r1, pc, r1
   15dcc:	bl	113dc <dcgettext@plt>
   15dd0:	ldr	r2, [pc, #240]	; 15ec8 <__assert_fail@plt+0x4840>
   15dd4:	ldr	r3, [pc, #240]	; 15ecc <__assert_fail@plt+0x4844>
   15dd8:	add	r2, pc, r2
   15ddc:	add	r3, pc, r3
   15de0:	mov	r1, r0
   15de4:	mov	r0, #1
   15de8:	bl	11598 <__printf_chk@plt>
   15dec:	mov	r0, #5
   15df0:	mov	r1, r4
   15df4:	bl	11604 <setlocale@plt>
   15df8:	cmp	r0, #0
   15dfc:	beq	15e18 <__assert_fail@plt+0x4790>
   15e00:	ldr	r1, [pc, #200]	; 15ed0 <__assert_fail@plt+0x4848>
   15e04:	mov	r2, #3
   15e08:	add	r1, pc, r1
   15e0c:	bl	11658 <strncmp@plt>
   15e10:	cmp	r0, #0
   15e14:	bne	15e4c <__assert_fail@plt+0x47c4>
   15e18:	ldr	r1, [pc, #180]	; 15ed4 <__assert_fail@plt+0x484c>
   15e1c:	mov	r2, #5
   15e20:	mov	r0, #0
   15e24:	add	r1, pc, r1
   15e28:	bl	113dc <dcgettext@plt>
   15e2c:	mov	r5, r0
   15e30:	ldr	r0, [r6]
   15e34:	bl	164e0 <close_stdout@@Base+0x1d4>
   15e38:	mov	r1, r5
   15e3c:	mov	r2, r0
   15e40:	mov	r0, #1
   15e44:	bl	11598 <__printf_chk@plt>
   15e48:	b	15c3c <__assert_fail@plt+0x45b4>
   15e4c:	ldr	r1, [pc, #132]	; 15ed8 <__assert_fail@plt+0x4850>
   15e50:	mov	r2, #5
   15e54:	mov	r0, r4
   15e58:	add	r1, pc, r1
   15e5c:	bl	113dc <dcgettext@plt>
   15e60:	mov	r5, r0
   15e64:	ldr	r0, [r6]
   15e68:	bl	164e0 <close_stdout@@Base+0x1d4>
   15e6c:	mov	r1, r5
   15e70:	mov	r2, r0
   15e74:	mov	r0, #1
   15e78:	bl	11598 <__printf_chk@plt>
   15e7c:	b	15e18 <__assert_fail@plt+0x4790>
   15e80:	andeq	r8, r1, r0, lsl #8
   15e84:	andeq	r0, r0, ip, asr #2
   15e88:	andeq	r6, r0, r0, ror #5
   15e8c:	andeq	r0, r0, ip, ror #2
   15e90:	ldrdeq	r6, [r0], -r0
   15e94:	andeq	r6, r0, r8, asr #5
   15e98:	andeq	r6, r0, r0, ror #6
   15e9c:	andeq	r0, r0, r0, ror #2
   15ea0:	andeq	r6, r0, r8, lsl #7
   15ea4:	andeq	r6, r0, r0, lsl #8
   15ea8:	ldrdeq	r6, [r0], -r0
   15eac:	ldrdeq	r6, [r0], -r0
   15eb0:	andeq	r6, r0, ip, lsl #15
   15eb4:			; <UNDEFINED> instruction: 0x000068bc
   15eb8:	ldrdeq	r6, [r0], -r0
   15ebc:	andeq	r6, r0, ip, ror #17
   15ec0:	andeq	r6, r0, ip, lsl sl
   15ec4:			; <UNDEFINED> instruction: 0x00006bb8
   15ec8:	andeq	r6, r0, r0, asr #23
   15ecc:	andeq	r6, r0, ip, asr #23
   15ed0:	andeq	r6, r0, r8, asr #23
   15ed4:	strdeq	r6, [r0], -r8
   15ed8:	andeq	r6, r0, ip, ror fp
   15edc:	mov	r0, #1
   15ee0:	b	15bec <__assert_fail@plt+0x4564>
   15ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ee8:	sub	sp, sp, #12
   15eec:	mov	r7, r1
   15ef0:	mov	r6, r3
   15ef4:	str	r2, [sp]
   15ef8:	mov	sl, r0
   15efc:	bl	11514 <strlen@plt>
   15f00:	ldr	fp, [r7]
   15f04:	cmp	fp, #0
   15f08:	mov	r8, r0
   15f0c:	beq	15fd0 <__assert_fail@plt+0x4948>
   15f10:	mov	r3, #0
   15f14:	ldr	r4, [sp]
   15f18:	str	r3, [sp, #4]
   15f1c:	mov	r5, r3
   15f20:	mvn	r9, #0
   15f24:	b	15f50 <__assert_fail@plt+0x48c8>
   15f28:	bl	113c4 <memcmp@plt>
   15f2c:	ldr	r3, [sp, #4]
   15f30:	cmp	r0, #0
   15f34:	movne	r3, #1
   15f38:	str	r3, [sp, #4]
   15f3c:	ldr	fp, [r7, #4]!
   15f40:	add	r5, r5, #1
   15f44:	add	r4, r4, r6
   15f48:	cmp	fp, #0
   15f4c:	beq	15fac <__assert_fail@plt+0x4924>
   15f50:	mov	r0, fp
   15f54:	mov	r1, sl
   15f58:	mov	r2, r8
   15f5c:	bl	11658 <strncmp@plt>
   15f60:	cmp	r0, #0
   15f64:	mov	r0, fp
   15f68:	bne	15f3c <__assert_fail@plt+0x48b4>
   15f6c:	bl	11514 <strlen@plt>
   15f70:	ldr	r3, [sp]
   15f74:	mov	r1, r4
   15f78:	mov	r2, r6
   15f7c:	cmp	r0, r8
   15f80:	mla	r0, r6, r9, r3
   15f84:	beq	15fc4 <__assert_fail@plt+0x493c>
   15f88:	cmn	r9, #1
   15f8c:	moveq	r9, r5
   15f90:	beq	15f3c <__assert_fail@plt+0x48b4>
   15f94:	ldr	r3, [sp]
   15f98:	cmp	r3, #0
   15f9c:	bne	15f28 <__assert_fail@plt+0x48a0>
   15fa0:	mov	r3, #1
   15fa4:	str	r3, [sp, #4]
   15fa8:	b	15f3c <__assert_fail@plt+0x48b4>
   15fac:	ldr	r3, [sp, #4]
   15fb0:	cmp	r3, #0
   15fb4:	bne	15fd8 <__assert_fail@plt+0x4950>
   15fb8:	mov	r0, r9
   15fbc:	add	sp, sp, #12
   15fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fc4:	mov	r0, r5
   15fc8:	add	sp, sp, #12
   15fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fd0:	mvn	r9, #0
   15fd4:	b	15fb8 <__assert_fail@plt+0x4930>
   15fd8:	mvn	r0, #1
   15fdc:	b	15fbc <__assert_fail@plt+0x4934>
   15fe0:	cmn	r2, #1
   15fe4:	push	{r4, r5, r6, lr}
   15fe8:	mov	r4, r0
   15fec:	sub	sp, sp, #8
   15ff0:	mov	r5, r1
   15ff4:	mov	r0, #0
   15ff8:	beq	16050 <__assert_fail@plt+0x49c8>
   15ffc:	ldr	r1, [pc, #100]	; 16068 <__assert_fail@plt+0x49e0>
   16000:	mov	r2, #5
   16004:	add	r1, pc, r1
   16008:	bl	113dc <dcgettext@plt>
   1600c:	mov	r6, r0
   16010:	mov	r2, r5
   16014:	mov	r1, #6
   16018:	mov	r0, #0
   1601c:	bl	18d68 <close_stdout@@Base+0x2a5c>
   16020:	mov	r1, r4
   16024:	mov	r5, r0
   16028:	mov	r0, #1
   1602c:	bl	19068 <close_stdout@@Base+0x2d5c>
   16030:	mov	r3, r5
   16034:	mov	r2, r6
   16038:	str	r0, [sp]
   1603c:	mov	r0, #0
   16040:	mov	r1, r0
   16044:	bl	11484 <error@plt>
   16048:	add	sp, sp, #8
   1604c:	pop	{r4, r5, r6, pc}
   16050:	ldr	r1, [pc, #20]	; 1606c <__assert_fail@plt+0x49e4>
   16054:	mov	r2, #5
   16058:	add	r1, pc, r1
   1605c:	bl	113dc <dcgettext@plt>
   16060:	mov	r6, r0
   16064:	b	16010 <__assert_fail@plt+0x4988>
   16068:	andeq	r6, r0, r4, ror pc
   1606c:	andeq	r6, r0, r4, lsl #30
   16070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16074:	mov	r4, r1
   16078:	ldr	r1, [pc, #276]	; 16194 <__assert_fail@plt+0x4b0c>
   1607c:	sub	sp, sp, #12
   16080:	mov	r7, r0
   16084:	mov	r6, r2
   16088:	add	r1, pc, r1
   1608c:	mov	r2, #5
   16090:	mov	r0, #0
   16094:	bl	113dc <dcgettext@plt>
   16098:	ldr	r3, [pc, #248]	; 16198 <__assert_fail@plt+0x4b10>
   1609c:	ldr	r2, [pc, #248]	; 1619c <__assert_fail@plt+0x4b14>
   160a0:	add	r3, pc, r3
   160a4:	ldr	r9, [r3, r2]
   160a8:	ldr	r1, [r9]
   160ac:	bl	11328 <fputs_unlocked@plt>
   160b0:	ldr	fp, [r7]
   160b4:	cmp	fp, #0
   160b8:	beq	16158 <__assert_fail@plt+0x4ad0>
   160bc:	ldr	sl, [pc, #220]	; 161a0 <__assert_fail@plt+0x4b18>
   160c0:	mov	r8, #0
   160c4:	ldr	r3, [pc, #216]	; 161a4 <__assert_fail@plt+0x4b1c>
   160c8:	mov	r5, r8
   160cc:	add	sl, pc, sl
   160d0:	add	r3, pc, r3
   160d4:	str	r3, [sp, #4]
   160d8:	b	16114 <__assert_fail@plt+0x4a8c>
   160dc:	mov	r0, fp
   160e0:	ldr	fp, [r9]
   160e4:	bl	19070 <close_stdout@@Base+0x2d64>
   160e8:	mov	r1, #1
   160ec:	mov	r2, sl
   160f0:	mov	r8, r4
   160f4:	mov	r3, r0
   160f8:	mov	r0, fp
   160fc:	bl	115b0 <__fprintf_chk@plt>
   16100:	ldr	fp, [r7, #4]!
   16104:	add	r5, r5, #1
   16108:	add	r4, r4, r6
   1610c:	cmp	fp, #0
   16110:	beq	16158 <__assert_fail@plt+0x4ad0>
   16114:	cmp	r5, #0
   16118:	mov	r1, r4
   1611c:	mov	r2, r6
   16120:	mov	r0, r8
   16124:	beq	160dc <__assert_fail@plt+0x4a54>
   16128:	bl	113c4 <memcmp@plt>
   1612c:	cmp	r0, #0
   16130:	bne	160dc <__assert_fail@plt+0x4a54>
   16134:	mov	r0, fp
   16138:	ldr	fp, [r9]
   1613c:	bl	19070 <close_stdout@@Base+0x2d64>
   16140:	mov	r1, #1
   16144:	ldr	r2, [sp, #4]
   16148:	mov	r3, r0
   1614c:	mov	r0, fp
   16150:	bl	115b0 <__fprintf_chk@plt>
   16154:	b	16100 <__assert_fail@plt+0x4a78>
   16158:	ldr	r0, [r9]
   1615c:	ldr	r3, [r0, #20]
   16160:	ldr	r2, [r0, #24]
   16164:	cmp	r3, r2
   16168:	bcs	16184 <__assert_fail@plt+0x4afc>
   1616c:	add	r1, r3, #1
   16170:	mov	r2, #10
   16174:	str	r1, [r0, #20]
   16178:	strb	r2, [r3]
   1617c:	add	sp, sp, #12
   16180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16184:	mov	r1, #10
   16188:	add	sp, sp, #12
   1618c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16190:	b	115f8 <__overflow@plt>
   16194:	andeq	r6, r0, r0, lsl pc
   16198:	andeq	r7, r1, r8, asr pc
   1619c:	andeq	r0, r0, ip, asr #2
   161a0:	andeq	r6, r0, r4, ror #29
   161a4:	andeq	r6, r0, r8, ror #29
   161a8:	push	{r4, r5, r6, r7, r8, lr}
   161ac:	mov	r7, r1
   161b0:	ldr	r4, [sp, #24]
   161b4:	mov	r1, r2
   161b8:	mov	r6, r2
   161bc:	mov	r5, r3
   161c0:	mov	r2, r3
   161c4:	mov	r8, r0
   161c8:	mov	r3, r4
   161cc:	mov	r0, r7
   161d0:	bl	15ee4 <__assert_fail@plt+0x485c>
   161d4:	subs	r2, r0, #0
   161d8:	blt	161e4 <__assert_fail@plt+0x4b5c>
   161dc:	mov	r0, r2
   161e0:	pop	{r4, r5, r6, r7, r8, pc}
   161e4:	mov	r0, r8
   161e8:	mov	r1, r7
   161ec:	bl	15fe0 <__assert_fail@plt+0x4958>
   161f0:	mov	r0, r6
   161f4:	mov	r1, r5
   161f8:	mov	r2, r4
   161fc:	bl	16070 <__assert_fail@plt+0x49e8>
   16200:	ldr	r3, [sp, #28]
   16204:	blx	r3
   16208:	mvn	r0, #0
   1620c:	pop	{r4, r5, r6, r7, r8, pc}
   16210:	push	{r4, r5, r6, r7, r8, lr}
   16214:	mov	r8, r0
   16218:	ldr	r5, [r1]
   1621c:	mov	r6, r3
   16220:	cmp	r5, #0
   16224:	beq	1625c <__assert_fail@plt+0x4bd4>
   16228:	mov	r4, r2
   1622c:	mov	r7, r1
   16230:	b	16240 <__assert_fail@plt+0x4bb8>
   16234:	ldr	r5, [r7, #4]!
   16238:	cmp	r5, #0
   1623c:	beq	1625c <__assert_fail@plt+0x4bd4>
   16240:	mov	r1, r4
   16244:	mov	r0, r8
   16248:	mov	r2, r6
   1624c:	add	r4, r4, r6
   16250:	bl	113c4 <memcmp@plt>
   16254:	cmp	r0, #0
   16258:	bne	16234 <__assert_fail@plt+0x4bac>
   1625c:	mov	r0, r5
   16260:	pop	{r4, r5, r6, r7, r8, pc}
   16264:	andeq	r0, r0, r0

00016268 <c_strtod@@Base>:
   16268:	push	{r4, r5, r6, lr}
   1626c:	mov	r6, r0
   16270:	ldr	r5, [pc, #96]	; 162d8 <c_strtod@@Base+0x70>
   16274:	mov	r4, r1
   16278:	add	r5, pc, r5
   1627c:	ldr	r2, [r5]
   16280:	cmp	r2, #0
   16284:	beq	162b8 <c_strtod@@Base+0x50>
   16288:	ldr	r3, [pc, #76]	; 162dc <c_strtod@@Base+0x74>
   1628c:	ldr	r2, [pc, r3]
   16290:	cmp	r2, #0
   16294:	beq	162a8 <c_strtod@@Base+0x40>
   16298:	mov	r0, r6
   1629c:	mov	r1, r4
   162a0:	pop	{r4, r5, r6, lr}
   162a4:	b	115e0 <strtod_l@plt>
   162a8:	cmp	r4, #0
   162ac:	vldr	d0, [pc, #28]	; 162d0 <c_strtod@@Base+0x68>
   162b0:	strne	r6, [r4]
   162b4:	pop	{r4, r5, r6, pc}
   162b8:	ldr	r1, [pc, #32]	; 162e0 <c_strtod@@Base+0x78>
   162bc:	movw	r0, #8127	; 0x1fbf
   162c0:	add	r1, pc, r1
   162c4:	bl	11628 <newlocale@plt>
   162c8:	str	r0, [r5]
   162cc:	b	16288 <c_strtod@@Base+0x20>
	...
   162d8:	andeq	r7, r1, ip, ror pc
   162dc:	andeq	r7, r1, r8, ror #30
   162e0:	andeq	r6, r0, r0, lsl #26
   162e4:	ldr	r3, [pc, #8]	; 162f4 <c_strtod@@Base+0x8c>
   162e8:	add	r3, pc, r3
   162ec:	str	r0, [r3]
   162f0:	bx	lr
   162f4:	andeq	r7, r1, r0, lsl pc
   162f8:	ldr	r3, [pc, #8]	; 16308 <c_strtod@@Base+0xa0>
   162fc:	add	r3, pc, r3
   16300:	strb	r0, [r3, #4]
   16304:	bx	lr
   16308:	strdeq	r7, [r1], -ip

0001630c <close_stdout@@Base>:
   1630c:	push	{r4, r5, r6, r7, lr}
   16310:	sub	sp, sp, #12
   16314:	ldr	r4, [pc, #228]	; 16400 <close_stdout@@Base+0xf4>
   16318:	ldr	r3, [pc, #228]	; 16404 <close_stdout@@Base+0xf8>
   1631c:	add	r4, pc, r4
   16320:	ldr	r3, [r4, r3]
   16324:	ldr	r0, [r3]
   16328:	bl	1a884 <close_stdout@@Base+0x4578>
   1632c:	cmp	r0, #0
   16330:	beq	16358 <close_stdout@@Base+0x4c>
   16334:	ldr	r3, [pc, #204]	; 16408 <close_stdout@@Base+0xfc>
   16338:	add	r3, pc, r3
   1633c:	ldrb	r3, [r3, #4]
   16340:	cmp	r3, #0
   16344:	beq	16378 <close_stdout@@Base+0x6c>
   16348:	bl	11568 <__errno_location@plt>
   1634c:	ldr	r3, [r0]
   16350:	cmp	r3, #32
   16354:	bne	16378 <close_stdout@@Base+0x6c>
   16358:	ldr	r3, [pc, #172]	; 1640c <close_stdout@@Base+0x100>
   1635c:	ldr	r3, [r4, r3]
   16360:	ldr	r0, [r3]
   16364:	bl	1a884 <close_stdout@@Base+0x4578>
   16368:	cmp	r0, #0
   1636c:	bne	163cc <close_stdout@@Base+0xc0>
   16370:	add	sp, sp, #12
   16374:	pop	{r4, r5, r6, r7, pc}
   16378:	ldr	r1, [pc, #144]	; 16410 <close_stdout@@Base+0x104>
   1637c:	mov	r0, #0
   16380:	mov	r2, #5
   16384:	add	r1, pc, r1
   16388:	bl	113dc <dcgettext@plt>
   1638c:	ldr	r3, [pc, #128]	; 16414 <close_stdout@@Base+0x108>
   16390:	ldr	r5, [pc, r3]
   16394:	cmp	r5, #0
   16398:	mov	r6, r0
   1639c:	beq	163dc <close_stdout@@Base+0xd0>
   163a0:	bl	11568 <__errno_location@plt>
   163a4:	ldr	r7, [r0]
   163a8:	mov	r0, r5
   163ac:	bl	18f1c <close_stdout@@Base+0x2c10>
   163b0:	ldr	r2, [pc, #96]	; 16418 <close_stdout@@Base+0x10c>
   163b4:	str	r6, [sp]
   163b8:	mov	r1, r7
   163bc:	add	r2, pc, r2
   163c0:	mov	r3, r0
   163c4:	mov	r0, #0
   163c8:	bl	11484 <error@plt>
   163cc:	ldr	r3, [pc, #72]	; 1641c <close_stdout@@Base+0x110>
   163d0:	ldr	r3, [r4, r3]
   163d4:	ldr	r0, [r3]
   163d8:	bl	11388 <_exit@plt>
   163dc:	bl	11568 <__errno_location@plt>
   163e0:	ldr	r2, [pc, #56]	; 16420 <close_stdout@@Base+0x114>
   163e4:	add	r2, pc, r2
   163e8:	mov	r3, r0
   163ec:	mov	r0, r5
   163f0:	ldr	r1, [r3]
   163f4:	mov	r3, r6
   163f8:	bl	11484 <error@plt>
   163fc:	b	163cc <close_stdout@@Base+0xc0>
   16400:	ldrdeq	r7, [r1], -ip
   16404:	andeq	r0, r0, r0, ror #2
   16408:	andeq	r7, r1, r0, asr #29
   1640c:	andeq	r0, r0, ip, asr #2
   16410:	andeq	r5, r0, r0, lsl #18
   16414:	andeq	r7, r1, r8, ror #28
   16418:	andeq	r6, r0, ip, lsl r7
   1641c:	andeq	r0, r0, r4, ror #2
   16420:	strdeq	r6, [r0], -r8
   16424:	push	{r3, r4, r5, lr}
   16428:	mov	r4, r0
   1642c:	ldrb	r5, [r0]
   16430:	subs	r3, r5, #47	; 0x2f
   16434:	rsbs	r5, r3, #0
   16438:	adcs	r5, r5, r3
   1643c:	bl	164e0 <close_stdout@@Base+0x1d4>
   16440:	rsb	r3, r4, r0
   16444:	cmp	r3, r5
   16448:	bls	16480 <close_stdout@@Base+0x174>
   1644c:	sub	r0, r3, #1
   16450:	ldrb	r2, [r4, r0]
   16454:	cmp	r2, #47	; 0x2f
   16458:	beq	16470 <close_stdout@@Base+0x164>
   1645c:	b	16480 <close_stdout@@Base+0x174>
   16460:	ldrb	r2, [r4, r3]
   16464:	cmp	r2, #47	; 0x2f
   16468:	popne	{r3, r4, r5, pc}
   1646c:	mov	r0, r3
   16470:	cmp	r5, r0
   16474:	sub	r3, r0, #1
   16478:	bcc	16460 <close_stdout@@Base+0x154>
   1647c:	pop	{r3, r4, r5, pc}
   16480:	mov	r0, r3
   16484:	pop	{r3, r4, r5, pc}
   16488:	push	{r4, r5, r6, r7, r8, lr}
   1648c:	mov	r8, r0
   16490:	bl	16424 <close_stdout@@Base+0x118>
   16494:	rsbs	r6, r0, #1
   16498:	add	r7, r0, #1
   1649c:	mov	r4, r0
   164a0:	movcc	r6, #0
   164a4:	add	r0, r6, r7
   164a8:	bl	114a8 <malloc@plt>
   164ac:	subs	r5, r0, #0
   164b0:	beq	164d8 <close_stdout@@Base+0x1cc>
   164b4:	mov	r2, r4
   164b8:	mov	r1, r8
   164bc:	bl	11394 <memcpy@plt>
   164c0:	cmp	r6, #0
   164c4:	movne	r3, #46	; 0x2e
   164c8:	strbne	r3, [r5, r4]
   164cc:	movne	r4, r7
   164d0:	mov	r3, #0
   164d4:	strb	r3, [r5, r4]
   164d8:	mov	r0, r5
   164dc:	pop	{r4, r5, r6, r7, r8, pc}
   164e0:	ldrb	r3, [r0]
   164e4:	cmp	r3, #47	; 0x2f
   164e8:	bne	16504 <close_stdout@@Base+0x1f8>
   164ec:	add	r2, r0, #1
   164f0:	mov	r0, r2
   164f4:	add	r2, r2, #1
   164f8:	ldrb	r3, [r0]
   164fc:	cmp	r3, #47	; 0x2f
   16500:	beq	164f0 <close_stdout@@Base+0x1e4>
   16504:	cmp	r3, #0
   16508:	bxeq	lr
   1650c:	mov	r2, r0
   16510:	mov	r1, #0
   16514:	cmp	r3, #47	; 0x2f
   16518:	moveq	r1, #1
   1651c:	beq	1652c <close_stdout@@Base+0x220>
   16520:	cmp	r1, #0
   16524:	movne	r0, r2
   16528:	movne	r1, #0
   1652c:	ldrb	r3, [r2, #1]!
   16530:	cmp	r3, #0
   16534:	bne	16514 <close_stdout@@Base+0x208>
   16538:	bx	lr
   1653c:	push	{r4, lr}
   16540:	mov	r4, r0
   16544:	bl	11514 <strlen@plt>
   16548:	cmp	r0, #1
   1654c:	popls	{r4, pc}
   16550:	sub	r3, r0, #1
   16554:	ldrb	r2, [r4, r3]
   16558:	cmp	r2, #47	; 0x2f
   1655c:	popne	{r4, pc}
   16560:	mov	r0, r3
   16564:	cmp	r0, #1
   16568:	sub	r3, r3, #1
   1656c:	beq	16580 <close_stdout@@Base+0x274>
   16570:	ldrb	r2, [r4, r3]
   16574:	cmp	r2, #47	; 0x2f
   16578:	popne	{r4, pc}
   1657c:	b	16560 <close_stdout@@Base+0x254>
   16580:	pop	{r4, pc}
   16584:	push	{r1, r2, r3}
   16588:	ldr	r3, [pc, #88]	; 165e8 <close_stdout@@Base+0x2dc>
   1658c:	ldr	r2, [pc, #88]	; 165ec <close_stdout@@Base+0x2e0>
   16590:	add	r3, pc, r3
   16594:	push	{r4, lr}
   16598:	sub	sp, sp, #12
   1659c:	ldr	r4, [r3, r2]
   165a0:	ldr	r1, [sp, #20]
   165a4:	ldr	r3, [r4]
   165a8:	ands	r2, r1, #64	; 0x40
   165ac:	ldrne	r2, [sp, #24]
   165b0:	str	r3, [sp, #4]
   165b4:	addne	r3, sp, #24
   165b8:	strne	r3, [sp]
   165bc:	bl	11490 <open64@plt>
   165c0:	bl	190dc <close_stdout@@Base+0x2dd0>
   165c4:	ldr	r2, [sp, #4]
   165c8:	ldr	r3, [r4]
   165cc:	cmp	r2, r3
   165d0:	bne	165e4 <close_stdout@@Base+0x2d8>
   165d4:	add	sp, sp, #12
   165d8:	pop	{r4, lr}
   165dc:	add	sp, sp, #12
   165e0:	bx	lr
   165e4:	bl	113e8 <__stack_chk_fail@plt>
   165e8:	andeq	r7, r1, r8, ror #20
   165ec:	andeq	r0, r0, r0, asr #2
   165f0:	cmp	r0, #9
   165f4:	push	{r4, r5, r6, r7, r8, lr}
   165f8:	bhi	1668c <close_stdout@@Base+0x380>
   165fc:	mov	r7, #11
   16600:	movw	r8, #43691	; 0xaaab
   16604:	movt	r8, #43690	; 0xaaaa
   16608:	cmp	r7, #9
   1660c:	bls	16684 <close_stdout@@Base+0x378>
   16610:	umull	r2, r3, r8, r7
   16614:	lsr	r3, r3, #1
   16618:	add	r3, r3, r3, lsl #1
   1661c:	cmp	r7, r3
   16620:	beq	16670 <close_stdout@@Base+0x364>
   16624:	mov	r6, #16
   16628:	mov	r5, #9
   1662c:	mov	r4, #3
   16630:	b	16640 <close_stdout@@Base+0x334>
   16634:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   16638:	cmp	r1, #0
   1663c:	beq	16670 <close_stdout@@Base+0x364>
   16640:	add	r5, r5, r6
   16644:	add	r4, r4, #2
   16648:	cmp	r5, r7
   1664c:	mov	r0, r7
   16650:	add	r6, r6, #8
   16654:	mov	r1, r4
   16658:	bcc	16634 <close_stdout@@Base+0x328>
   1665c:	mov	r1, r4
   16660:	mov	r0, r7
   16664:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   16668:	cmp	r1, #0
   1666c:	bne	1667c <close_stdout@@Base+0x370>
   16670:	add	r7, r7, #2
   16674:	cmn	r7, #1
   16678:	bne	16608 <close_stdout@@Base+0x2fc>
   1667c:	mov	r0, r7
   16680:	pop	{r4, r5, r6, r7, r8, pc}
   16684:	mov	r4, #3
   16688:	b	1665c <close_stdout@@Base+0x350>
   1668c:	orr	r7, r0, #1
   16690:	cmn	r7, #1
   16694:	bne	16600 <close_stdout@@Base+0x2f4>
   16698:	b	1667c <close_stdout@@Base+0x370>
   1669c:	push	{r3, lr}
   166a0:	ror	r0, r0, #3
   166a4:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   166a8:	mov	r0, r1
   166ac:	pop	{r3, pc}
   166b0:	subs	r3, r1, r0
   166b4:	rsbs	r0, r3, #0
   166b8:	adcs	r0, r0, r3
   166bc:	bx	lr
   166c0:	push	{r4, lr}
   166c4:	mov	r4, r0
   166c8:	ldr	r3, [r4, #24]
   166cc:	mov	r0, r1
   166d0:	ldr	r1, [r4, #8]
   166d4:	blx	r3
   166d8:	ldr	r3, [r4, #8]
   166dc:	cmp	r0, r3
   166e0:	bcs	166f0 <close_stdout@@Base+0x3e4>
   166e4:	ldr	r3, [r4]
   166e8:	add	r0, r3, r0, lsl #3
   166ec:	pop	{r4, pc}
   166f0:	bl	11664 <abort@plt>
   166f4:	push	{r4, r5, r6, r7, r8, lr}
   166f8:	mov	r7, r2
   166fc:	mov	r8, r3
   16700:	mov	r6, r0
   16704:	mov	r5, r1
   16708:	bl	166c0 <close_stdout@@Base+0x3b4>
   1670c:	str	r0, [r7]
   16710:	mov	r4, r0
   16714:	ldr	r2, [r0]
   16718:	cmp	r2, #0
   1671c:	beq	167b0 <close_stdout@@Base+0x4a4>
   16720:	cmp	r5, r2
   16724:	beq	16744 <close_stdout@@Base+0x438>
   16728:	mov	r1, r2
   1672c:	ldr	r3, [r6, #28]
   16730:	mov	r0, r5
   16734:	blx	r3
   16738:	cmp	r0, #0
   1673c:	beq	167a4 <close_stdout@@Base+0x498>
   16740:	ldr	r2, [r4]
   16744:	cmp	r8, #0
   16748:	beq	16774 <close_stdout@@Base+0x468>
   1674c:	ldr	r3, [r4, #4]
   16750:	cmp	r3, #0
   16754:	streq	r3, [r4]
   16758:	ldmne	r3, {r0, r1}
   1675c:	movne	ip, #0
   16760:	stmne	r4, {r0, r1}
   16764:	strne	ip, [r3]
   16768:	ldrne	r1, [r6, #36]	; 0x24
   1676c:	strne	r1, [r3, #4]
   16770:	strne	r3, [r6, #36]	; 0x24
   16774:	mov	r0, r2
   16778:	pop	{r4, r5, r6, r7, r8, pc}
   1677c:	ldr	r2, [ip]
   16780:	cmp	r2, r5
   16784:	beq	167c4 <close_stdout@@Base+0x4b8>
   16788:	mov	r1, r2
   1678c:	mov	r0, r5
   16790:	ldr	r2, [r6, #28]
   16794:	blx	r2
   16798:	cmp	r0, #0
   1679c:	bne	167bc <close_stdout@@Base+0x4b0>
   167a0:	ldr	r4, [r4, #4]
   167a4:	ldr	ip, [r4, #4]
   167a8:	cmp	ip, #0
   167ac:	bne	1677c <close_stdout@@Base+0x470>
   167b0:	mov	r2, #0
   167b4:	mov	r0, r2
   167b8:	pop	{r4, r5, r6, r7, r8, pc}
   167bc:	ldr	ip, [r4, #4]
   167c0:	ldr	r2, [ip]
   167c4:	cmp	r8, #0
   167c8:	beq	16774 <close_stdout@@Base+0x468>
   167cc:	ldr	r1, [ip, #4]
   167d0:	mov	r3, #0
   167d4:	mov	r0, r2
   167d8:	str	r1, [r4, #4]
   167dc:	str	r3, [ip]
   167e0:	ldr	r3, [r6, #36]	; 0x24
   167e4:	str	r3, [ip, #4]
   167e8:	str	ip, [r6, #36]	; 0x24
   167ec:	pop	{r4, r5, r6, r7, r8, pc}
   167f0:	ldr	r1, [pc, #176]	; 168a8 <close_stdout@@Base+0x59c>
   167f4:	mov	r2, r0
   167f8:	ldr	r3, [r0]
   167fc:	add	r1, pc, r1
   16800:	cmp	r3, r1
   16804:	beq	16894 <close_stdout@@Base+0x588>
   16808:	vldr	s15, [r3, #8]
   1680c:	vldr	s14, [pc, #136]	; 1689c <close_stdout@@Base+0x590>
   16810:	vcmpe.f32	s15, s14
   16814:	vmrs	APSR_nzcv, fpscr
   16818:	ble	16880 <close_stdout@@Base+0x574>
   1681c:	vldr	s13, [pc, #124]	; 168a0 <close_stdout@@Base+0x594>
   16820:	vcmpe.f32	s15, s13
   16824:	vmrs	APSR_nzcv, fpscr
   16828:	bpl	16880 <close_stdout@@Base+0x574>
   1682c:	vldr	s13, [pc, #112]	; 168a4 <close_stdout@@Base+0x598>
   16830:	vldr	s12, [r3, #12]
   16834:	vcmpe.f32	s12, s13
   16838:	vmrs	APSR_nzcv, fpscr
   1683c:	ble	16880 <close_stdout@@Base+0x574>
   16840:	vldr	s13, [r3]
   16844:	vcmpe.f32	s13, #0.0
   16848:	vmrs	APSR_nzcv, fpscr
   1684c:	blt	16880 <close_stdout@@Base+0x574>
   16850:	vadd.f32	s14, s13, s14
   16854:	vldr	s12, [r3, #4]
   16858:	vcmpe.f32	s14, s12
   1685c:	vmrs	APSR_nzcv, fpscr
   16860:	bpl	16880 <close_stdout@@Base+0x574>
   16864:	vmov.f32	s13, #112	; 0x3f800000  1.0
   16868:	vcmpe.f32	s12, s13
   1686c:	vmrs	APSR_nzcv, fpscr
   16870:	bhi	16880 <close_stdout@@Base+0x574>
   16874:	vcmpe.f32	s15, s14
   16878:	vmrs	APSR_nzcv, fpscr
   1687c:	bgt	16894 <close_stdout@@Base+0x588>
   16880:	ldr	r3, [pc, #36]	; 168ac <close_stdout@@Base+0x5a0>
   16884:	mov	r0, #0
   16888:	add	r3, pc, r3
   1688c:	str	r3, [r2]
   16890:	bx	lr
   16894:	mov	r0, #1
   16898:	bx	lr
   1689c:	stclcc	12, cr12, [ip, #820]	; 0x334
   168a0:	svccc	0x00666666
   168a4:	svccc	0x008ccccd
   168a8:	andeq	r6, r0, r8, asr #15
   168ac:	andeq	r6, r0, ip, lsr r7
   168b0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168b4:	mov	r8, r1
   168b8:	ldr	r6, [r1]
   168bc:	mov	r5, r0
   168c0:	ldr	r3, [r1, #4]
   168c4:	mov	sl, r2
   168c8:	cmp	r6, r3
   168cc:	addcc	r6, r6, #8
   168d0:	movcc	r9, #0
   168d4:	bcs	1697c <close_stdout@@Base+0x670>
   168d8:	ldr	fp, [r6, #-8]
   168dc:	mov	r7, r6
   168e0:	cmp	fp, #0
   168e4:	beq	16970 <close_stdout@@Base+0x664>
   168e8:	ldr	r4, [r6, #-4]
   168ec:	cmp	r4, #0
   168f0:	bne	16910 <close_stdout@@Base+0x604>
   168f4:	b	16960 <close_stdout@@Base+0x654>
   168f8:	ldr	r2, [r0, #4]
   168fc:	cmp	r3, #0
   16900:	str	r2, [r4, #4]
   16904:	str	r4, [r0, #4]
   16908:	mov	r4, r3
   1690c:	beq	1695c <close_stdout@@Base+0x650>
   16910:	ldr	fp, [r4]
   16914:	mov	r0, r5
   16918:	mov	r1, fp
   1691c:	bl	166c0 <close_stdout@@Base+0x3b4>
   16920:	ldr	r3, [r4, #4]
   16924:	ldr	r2, [r0]
   16928:	cmp	r2, #0
   1692c:	bne	168f8 <close_stdout@@Base+0x5ec>
   16930:	str	fp, [r0]
   16934:	cmp	r3, #0
   16938:	ldr	r1, [r5, #12]
   1693c:	add	r1, r1, #1
   16940:	str	r1, [r5, #12]
   16944:	str	r2, [r4]
   16948:	ldr	r2, [r5, #36]	; 0x24
   1694c:	str	r2, [r4, #4]
   16950:	str	r4, [r5, #36]	; 0x24
   16954:	mov	r4, r3
   16958:	bne	16910 <close_stdout@@Base+0x604>
   1695c:	ldr	fp, [r6, #-8]
   16960:	cmp	sl, #0
   16964:	str	r9, [r6, #-4]
   16968:	beq	16984 <close_stdout@@Base+0x678>
   1696c:	ldr	r3, [r8, #4]
   16970:	cmp	r3, r7
   16974:	add	r6, r6, #8
   16978:	bhi	168d8 <close_stdout@@Base+0x5cc>
   1697c:	mov	r0, #1
   16980:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16984:	mov	r0, r5
   16988:	mov	r1, fp
   1698c:	bl	166c0 <close_stdout@@Base+0x3b4>
   16990:	ldr	r3, [r0]
   16994:	mov	r4, r0
   16998:	cmp	r3, #0
   1699c:	beq	169e8 <close_stdout@@Base+0x6dc>
   169a0:	ldr	r0, [r5, #36]	; 0x24
   169a4:	cmp	r0, #0
   169a8:	beq	169fc <close_stdout@@Base+0x6f0>
   169ac:	ldr	r2, [r0, #4]
   169b0:	str	r2, [r5, #36]	; 0x24
   169b4:	str	fp, [r0]
   169b8:	ldr	r2, [r4, #4]
   169bc:	str	r2, [r0, #4]
   169c0:	str	r0, [r4, #4]
   169c4:	str	r9, [r6, #-8]
   169c8:	add	r6, r6, #8
   169cc:	ldr	r3, [r8, #4]
   169d0:	ldr	r2, [r8, #12]
   169d4:	cmp	r3, r7
   169d8:	sub	r2, r2, #1
   169dc:	str	r2, [r8, #12]
   169e0:	bhi	168d8 <close_stdout@@Base+0x5cc>
   169e4:	b	1697c <close_stdout@@Base+0x670>
   169e8:	str	fp, [r0]
   169ec:	ldr	r3, [r5, #12]
   169f0:	add	r3, r3, #1
   169f4:	str	r3, [r5, #12]
   169f8:	b	169c4 <close_stdout@@Base+0x6b8>
   169fc:	mov	r0, #8
   16a00:	bl	114a8 <malloc@plt>
   16a04:	cmp	r0, #0
   16a08:	bne	169b4 <close_stdout@@Base+0x6a8>
   16a0c:	mov	r0, sl
   16a10:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a14:	ldr	r0, [r0, #8]
   16a18:	bx	lr
   16a1c:	ldr	r0, [r0, #12]
   16a20:	bx	lr
   16a24:	ldr	r0, [r0, #16]
   16a28:	bx	lr
   16a2c:	ldr	r3, [r0]
   16a30:	ldr	r2, [r0, #4]
   16a34:	cmp	r3, r2
   16a38:	bcs	16a9c <close_stdout@@Base+0x790>
   16a3c:	add	r1, r3, #8
   16a40:	add	r2, r2, #7
   16a44:	rsb	r2, r1, r2
   16a48:	add	r3, r3, #16
   16a4c:	bic	r2, r2, #7
   16a50:	mov	r0, #0
   16a54:	add	ip, r3, r2
   16a58:	ldr	r3, [r1, #-8]
   16a5c:	cmp	r3, #0
   16a60:	beq	16a8c <close_stdout@@Base+0x780>
   16a64:	ldr	r3, [r1, #-4]
   16a68:	mov	r2, #1
   16a6c:	cmp	r3, #0
   16a70:	beq	16a84 <close_stdout@@Base+0x778>
   16a74:	ldr	r3, [r3, #4]
   16a78:	add	r2, r2, #1
   16a7c:	cmp	r3, #0
   16a80:	bne	16a74 <close_stdout@@Base+0x768>
   16a84:	cmp	r0, r2
   16a88:	movcc	r0, r2
   16a8c:	add	r1, r1, #8
   16a90:	cmp	r1, ip
   16a94:	bne	16a58 <close_stdout@@Base+0x74c>
   16a98:	bx	lr
   16a9c:	mov	r0, #0
   16aa0:	bx	lr
   16aa4:	push	{r4}		; (str r4, [sp, #-4]!)
   16aa8:	ldr	r3, [r0]
   16aac:	ldr	r2, [r0, #4]
   16ab0:	cmp	r3, r2
   16ab4:	bcs	16b44 <close_stdout@@Base+0x838>
   16ab8:	add	r2, r2, #7
   16abc:	add	r1, r3, #8
   16ac0:	rsb	ip, r1, r2
   16ac4:	add	r3, r3, #16
   16ac8:	bic	ip, ip, #7
   16acc:	mov	r2, #0
   16ad0:	add	r4, r3, ip
   16ad4:	mov	ip, r2
   16ad8:	ldr	r3, [r1, #-8]
   16adc:	cmp	r3, #0
   16ae0:	beq	16b08 <close_stdout@@Base+0x7fc>
   16ae4:	ldr	r3, [r1, #-4]
   16ae8:	add	ip, ip, #1
   16aec:	add	r2, r2, #1
   16af0:	cmp	r3, #0
   16af4:	beq	16b08 <close_stdout@@Base+0x7fc>
   16af8:	ldr	r3, [r3, #4]
   16afc:	add	r2, r2, #1
   16b00:	cmp	r3, #0
   16b04:	bne	16af8 <close_stdout@@Base+0x7ec>
   16b08:	add	r1, r1, #8
   16b0c:	cmp	r1, r4
   16b10:	bne	16ad8 <close_stdout@@Base+0x7cc>
   16b14:	ldr	r3, [r0, #12]
   16b18:	cmp	r3, ip
   16b1c:	movne	r0, #0
   16b20:	beq	16b2c <close_stdout@@Base+0x820>
   16b24:	pop	{r4}		; (ldr r4, [sp], #4)
   16b28:	bx	lr
   16b2c:	ldr	r0, [r0, #16]
   16b30:	pop	{r4}		; (ldr r4, [sp], #4)
   16b34:	subs	r3, r0, r2
   16b38:	rsbs	r0, r3, #0
   16b3c:	adcs	r0, r0, r3
   16b40:	bx	lr
   16b44:	mov	r2, #0
   16b48:	mov	ip, r2
   16b4c:	b	16b14 <close_stdout@@Base+0x808>
   16b50:	push	{r4, r5, r6, r7, r8, lr}
   16b54:	sub	sp, sp, #8
   16b58:	mov	r4, r1
   16b5c:	mov	r5, r0
   16b60:	bl	16a24 <close_stdout@@Base+0x718>
   16b64:	mov	r8, r0
   16b68:	mov	r0, r5
   16b6c:	bl	16a14 <close_stdout@@Base+0x708>
   16b70:	mov	r6, r0
   16b74:	mov	r0, r5
   16b78:	bl	16a1c <close_stdout@@Base+0x710>
   16b7c:	mov	r7, r0
   16b80:	mov	r0, r5
   16b84:	bl	16a2c <close_stdout@@Base+0x720>
   16b88:	ldr	r2, [pc, #144]	; 16c20 <close_stdout@@Base+0x914>
   16b8c:	mov	r3, r8
   16b90:	mov	r1, #1
   16b94:	add	r2, pc, r2
   16b98:	mov	r5, r0
   16b9c:	mov	r0, r4
   16ba0:	bl	115b0 <__fprintf_chk@plt>
   16ba4:	ldr	r2, [pc, #120]	; 16c24 <close_stdout@@Base+0x918>
   16ba8:	mov	r3, r6
   16bac:	mov	r0, r4
   16bb0:	mov	r1, #1
   16bb4:	add	r2, pc, r2
   16bb8:	bl	115b0 <__fprintf_chk@plt>
   16bbc:	vmov	s15, r7
   16bc0:	vldr	d5, [pc, #80]	; 16c18 <close_stdout@@Base+0x90c>
   16bc4:	ldr	r2, [pc, #92]	; 16c28 <close_stdout@@Base+0x91c>
   16bc8:	vcvt.f64.u32	d4, s15
   16bcc:	mov	r3, r7
   16bd0:	vmov	s15, r6
   16bd4:	mov	r0, r4
   16bd8:	mov	r1, #1
   16bdc:	add	r2, pc, r2
   16be0:	vmul.f64	d5, d4, d5
   16be4:	vcvt.f64.u32	d6, s15
   16be8:	vdiv.f64	d7, d5, d6
   16bec:	vstr	d7, [sp]
   16bf0:	bl	115b0 <__fprintf_chk@plt>
   16bf4:	ldr	r2, [pc, #48]	; 16c2c <close_stdout@@Base+0x920>
   16bf8:	mov	r0, r4
   16bfc:	mov	r3, r5
   16c00:	mov	r1, #1
   16c04:	add	r2, pc, r2
   16c08:	add	sp, sp, #8
   16c0c:	pop	{r4, r5, r6, r7, r8, lr}
   16c10:	b	115b0 <__fprintf_chk@plt>
   16c14:	nop	{0}
   16c18:	andeq	r0, r0, r0
   16c1c:	subsmi	r0, r9, r0
   16c20:	andeq	r6, r0, r4, asr #8
   16c24:	andeq	r6, r0, ip, lsr r4
   16c28:	andeq	r6, r0, ip, lsr #8
   16c2c:	andeq	r6, r0, r8, lsr #8
   16c30:	push	{r4, r5, r6, lr}
   16c34:	mov	r6, r0
   16c38:	mov	r5, r1
   16c3c:	bl	166c0 <close_stdout@@Base+0x3b4>
   16c40:	ldr	r3, [r0]
   16c44:	mov	r4, r0
   16c48:	cmp	r3, #0
   16c4c:	bne	16c58 <close_stdout@@Base+0x94c>
   16c50:	b	16c84 <close_stdout@@Base+0x978>
   16c54:	ldr	r3, [r4]
   16c58:	cmp	r5, r3
   16c5c:	mov	r1, r3
   16c60:	mov	r0, r5
   16c64:	beq	16c90 <close_stdout@@Base+0x984>
   16c68:	ldr	r3, [r6, #28]
   16c6c:	blx	r3
   16c70:	cmp	r0, #0
   16c74:	bne	16c8c <close_stdout@@Base+0x980>
   16c78:	ldr	r4, [r4, #4]
   16c7c:	cmp	r4, #0
   16c80:	bne	16c54 <close_stdout@@Base+0x948>
   16c84:	mov	r0, #0
   16c88:	pop	{r4, r5, r6, pc}
   16c8c:	ldr	r3, [r4]
   16c90:	mov	r0, r3
   16c94:	pop	{r4, r5, r6, pc}
   16c98:	push	{r3, lr}
   16c9c:	ldr	r3, [r0, #16]
   16ca0:	cmp	r3, #0
   16ca4:	beq	16ce4 <close_stdout@@Base+0x9d8>
   16ca8:	ldr	r3, [r0]
   16cac:	ldr	r2, [r0, #4]
   16cb0:	cmp	r3, r2
   16cb4:	bcs	16ce0 <close_stdout@@Base+0x9d4>
   16cb8:	ldr	r0, [r3]
   16cbc:	cmp	r0, #0
   16cc0:	beq	16cd4 <close_stdout@@Base+0x9c8>
   16cc4:	b	16cec <close_stdout@@Base+0x9e0>
   16cc8:	ldr	r0, [r3]
   16ccc:	cmp	r0, #0
   16cd0:	popne	{r3, pc}
   16cd4:	add	r3, r3, #8
   16cd8:	cmp	r3, r2
   16cdc:	bcc	16cc8 <close_stdout@@Base+0x9bc>
   16ce0:	bl	11664 <abort@plt>
   16ce4:	mov	r0, r3
   16ce8:	pop	{r3, pc}
   16cec:	pop	{r3, pc}
   16cf0:	push	{r3, r4, r5, lr}
   16cf4:	mov	r5, r0
   16cf8:	mov	r4, r1
   16cfc:	bl	166c0 <close_stdout@@Base+0x3b4>
   16d00:	mov	r2, r0
   16d04:	mov	r3, r0
   16d08:	b	16d14 <close_stdout@@Base+0xa08>
   16d0c:	cmp	r3, #0
   16d10:	beq	16d2c <close_stdout@@Base+0xa20>
   16d14:	ldr	ip, [r3]
   16d18:	ldr	r3, [r3, #4]
   16d1c:	cmp	ip, r4
   16d20:	bne	16d0c <close_stdout@@Base+0xa00>
   16d24:	cmp	r3, #0
   16d28:	bne	16d54 <close_stdout@@Base+0xa48>
   16d2c:	ldr	r3, [r5, #4]
   16d30:	b	16d40 <close_stdout@@Base+0xa34>
   16d34:	ldr	r0, [r2]
   16d38:	cmp	r0, #0
   16d3c:	popne	{r3, r4, r5, pc}
   16d40:	add	r2, r2, #8
   16d44:	cmp	r2, r3
   16d48:	bcc	16d34 <close_stdout@@Base+0xa28>
   16d4c:	mov	r0, #0
   16d50:	pop	{r3, r4, r5, pc}
   16d54:	ldr	r0, [r3]
   16d58:	pop	{r3, r4, r5, pc}
   16d5c:	push	{r4, r5, r6, r7}
   16d60:	mov	r6, r0
   16d64:	ldm	r0, {r5, ip}
   16d68:	cmp	ip, r5
   16d6c:	bls	16df0 <close_stdout@@Base+0xae4>
   16d70:	add	r5, r5, #8
   16d74:	mov	r0, #0
   16d78:	ldr	r3, [r5, #-8]
   16d7c:	mov	r7, r5
   16d80:	cmp	r3, #0
   16d84:	beq	16dd0 <close_stdout@@Base+0xac4>
   16d88:	cmp	r2, r0
   16d8c:	bls	16ddc <close_stdout@@Base+0xad0>
   16d90:	str	r3, [r1, r0, lsl #2]
   16d94:	add	r4, r0, #1
   16d98:	ldr	r3, [r5, #-4]
   16d9c:	add	ip, r1, r0, lsl #2
   16da0:	cmp	r3, #0
   16da4:	beq	16de4 <close_stdout@@Base+0xad8>
   16da8:	mov	r0, r4
   16dac:	cmp	r0, r2
   16db0:	beq	16ddc <close_stdout@@Base+0xad0>
   16db4:	ldr	r4, [r3]
   16db8:	add	r0, r0, #1
   16dbc:	str	r4, [ip, #4]!
   16dc0:	ldr	r3, [r3, #4]
   16dc4:	cmp	r3, #0
   16dc8:	bne	16dac <close_stdout@@Base+0xaa0>
   16dcc:	ldr	ip, [r6, #4]
   16dd0:	cmp	ip, r7
   16dd4:	add	r5, r5, #8
   16dd8:	bhi	16d78 <close_stdout@@Base+0xa6c>
   16ddc:	pop	{r4, r5, r6, r7}
   16de0:	bx	lr
   16de4:	ldr	ip, [r6, #4]
   16de8:	mov	r0, r4
   16dec:	b	16dd0 <close_stdout@@Base+0xac4>
   16df0:	mov	r0, #0
   16df4:	b	16ddc <close_stdout@@Base+0xad0>
   16df8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16dfc:	mov	r7, r2
   16e00:	ldr	r8, [r0]
   16e04:	mov	r9, r0
   16e08:	ldr	r2, [r0, #4]
   16e0c:	mov	r6, r1
   16e10:	mov	r5, #0
   16e14:	cmp	r2, r8
   16e18:	bls	16e68 <close_stdout@@Base+0xb5c>
   16e1c:	ldr	r3, [r8]
   16e20:	cmp	r3, #0
   16e24:	beq	16e5c <close_stdout@@Base+0xb50>
   16e28:	mov	r0, r3
   16e2c:	mov	r4, r8
   16e30:	b	16e38 <close_stdout@@Base+0xb2c>
   16e34:	ldr	r0, [r4]
   16e38:	mov	r1, r7
   16e3c:	blx	r6
   16e40:	cmp	r0, #0
   16e44:	beq	16e68 <close_stdout@@Base+0xb5c>
   16e48:	ldr	r4, [r4, #4]
   16e4c:	add	r5, r5, #1
   16e50:	cmp	r4, #0
   16e54:	bne	16e34 <close_stdout@@Base+0xb28>
   16e58:	ldr	r2, [r9, #4]
   16e5c:	add	r8, r8, #8
   16e60:	cmp	r2, r8
   16e64:	bhi	16e1c <close_stdout@@Base+0xb10>
   16e68:	mov	r0, r5
   16e6c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16e70:	push	{r3, r4, r5, lr}
   16e74:	mov	r5, r1
   16e78:	ldrb	r3, [r0]
   16e7c:	cmp	r3, #0
   16e80:	beq	16eb0 <close_stdout@@Base+0xba4>
   16e84:	mov	r4, r0
   16e88:	mov	r1, #0
   16e8c:	rsb	r0, r1, r1, lsl #5
   16e90:	mov	r1, r5
   16e94:	add	r0, r3, r0
   16e98:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   16e9c:	ldrb	r3, [r4, #1]!
   16ea0:	cmp	r3, #0
   16ea4:	bne	16e8c <close_stdout@@Base+0xb80>
   16ea8:	mov	r0, r1
   16eac:	pop	{r3, r4, r5, pc}
   16eb0:	mov	r1, r3
   16eb4:	b	16ea8 <close_stdout@@Base+0xb9c>
   16eb8:	push	{r4}		; (str r4, [sp, #-4]!)
   16ebc:	mov	ip, r0
   16ec0:	ldr	r4, [pc, #24]	; 16ee0 <close_stdout@@Base+0xbd4>
   16ec4:	add	r4, pc, r4
   16ec8:	ldm	r4!, {r0, r1, r2, r3}
   16ecc:	ldr	r4, [r4]
   16ed0:	stmia	ip!, {r0, r1, r2, r3}
   16ed4:	str	r4, [ip]
   16ed8:	pop	{r4}		; (ldr r4, [sp], #4)
   16edc:	bx	lr
   16ee0:	andeq	r6, r0, r0, lsl #2
   16ee4:	push	{r4, r5, r6, r7, r8, lr}
   16ee8:	subs	r8, r2, #0
   16eec:	mov	r7, r0
   16ef0:	mov	r5, r1
   16ef4:	mov	r6, r3
   16ef8:	beq	16fec <close_stdout@@Base+0xce0>
   16efc:	cmp	r6, #0
   16f00:	beq	16fe0 <close_stdout@@Base+0xcd4>
   16f04:	mov	r0, #40	; 0x28
   16f08:	bl	114a8 <malloc@plt>
   16f0c:	subs	r4, r0, #0
   16f10:	beq	17004 <close_stdout@@Base+0xcf8>
   16f14:	cmp	r5, #0
   16f18:	beq	16ff8 <close_stdout@@Base+0xcec>
   16f1c:	mov	r0, r4
   16f20:	str	r5, [r0, #20]!
   16f24:	bl	167f0 <close_stdout@@Base+0x4e4>
   16f28:	cmp	r0, #0
   16f2c:	beq	16fd0 <close_stdout@@Base+0xcc4>
   16f30:	ldrb	r3, [r5, #16]
   16f34:	vldr	s15, [r5, #8]
   16f38:	cmp	r3, #0
   16f3c:	bne	16f64 <close_stdout@@Base+0xc58>
   16f40:	vmov	s14, r7
   16f44:	vcvt.f32.u32	s13, s14
   16f48:	vldr	s14, [pc, #188]	; 1700c <close_stdout@@Base+0xd00>
   16f4c:	vdiv.f32	s15, s13, s15
   16f50:	vcmpe.f32	s15, s14
   16f54:	vmrs	APSR_nzcv, fpscr
   16f58:	bge	16fc8 <close_stdout@@Base+0xcbc>
   16f5c:	vcvt.u32.f32	s15, s15
   16f60:	vmov	r7, s15
   16f64:	mov	r0, r7
   16f68:	bl	165f0 <close_stdout@@Base+0x2e4>
   16f6c:	cmn	r0, #-1073741823	; 0xc0000001
   16f70:	mov	r5, r0
   16f74:	bhi	16fc8 <close_stdout@@Base+0xcbc>
   16f78:	cmp	r0, #0
   16f7c:	str	r0, [r4, #8]
   16f80:	beq	16fd0 <close_stdout@@Base+0xcc4>
   16f84:	mov	r1, #8
   16f88:	bl	1131c <calloc@plt>
   16f8c:	cmp	r0, #0
   16f90:	str	r0, [r4]
   16f94:	beq	16fd0 <close_stdout@@Base+0xcc4>
   16f98:	ldr	r3, [sp, #24]
   16f9c:	mov	r2, #0
   16fa0:	add	r5, r0, r5, lsl #3
   16fa4:	str	r8, [r4, #24]
   16fa8:	str	r5, [r4, #4]
   16fac:	mov	r0, r4
   16fb0:	str	r6, [r4, #28]
   16fb4:	str	r3, [r4, #32]
   16fb8:	str	r2, [r4, #12]
   16fbc:	str	r2, [r4, #16]
   16fc0:	str	r2, [r4, #36]	; 0x24
   16fc4:	pop	{r4, r5, r6, r7, r8, pc}
   16fc8:	mov	r3, #0
   16fcc:	str	r3, [r4, #8]
   16fd0:	mov	r0, r4
   16fd4:	bl	11370 <free@plt>
   16fd8:	mov	r0, #0
   16fdc:	pop	{r4, r5, r6, r7, r8, pc}
   16fe0:	ldr	r6, [pc, #40]	; 17010 <close_stdout@@Base+0xd04>
   16fe4:	add	r6, pc, r6
   16fe8:	b	16f04 <close_stdout@@Base+0xbf8>
   16fec:	ldr	r8, [pc, #32]	; 17014 <close_stdout@@Base+0xd08>
   16ff0:	add	r8, pc, r8
   16ff4:	b	16efc <close_stdout@@Base+0xbf0>
   16ff8:	ldr	r5, [pc, #24]	; 17018 <close_stdout@@Base+0xd0c>
   16ffc:	add	r5, pc, r5
   17000:	b	16f1c <close_stdout@@Base+0xc10>
   17004:	mov	r0, r4
   17008:	pop	{r4, r5, r6, r7, r8, pc}
   1700c:	svcmi	0x00800000
   17010:			; <UNDEFINED> instruction: 0xfffff6c4
   17014:			; <UNDEFINED> instruction: 0xfffff6a4
   17018:	andeq	r5, r0, r8, asr #31
   1701c:	push	{r4, r5, r6, r7, r8, lr}
   17020:	mov	r5, r0
   17024:	ldr	r7, [r0]
   17028:	ldr	r3, [r0, #4]
   1702c:	cmp	r7, r3
   17030:	addcc	r7, r7, #8
   17034:	movcc	r6, #0
   17038:	bcs	170b8 <close_stdout@@Base+0xdac>
   1703c:	ldr	r2, [r7, #-8]
   17040:	mov	r8, r7
   17044:	cmp	r2, #0
   17048:	beq	170ac <close_stdout@@Base+0xda0>
   1704c:	ldr	r4, [r7, #-4]
   17050:	cmp	r4, #0
   17054:	beq	1708c <close_stdout@@Base+0xd80>
   17058:	ldr	r3, [r5, #32]
   1705c:	cmp	r3, #0
   17060:	beq	1706c <close_stdout@@Base+0xd60>
   17064:	ldr	r0, [r4]
   17068:	blx	r3
   1706c:	ldr	r3, [r4, #4]
   17070:	str	r6, [r4]
   17074:	ldr	r2, [r5, #36]	; 0x24
   17078:	cmp	r3, #0
   1707c:	str	r2, [r4, #4]
   17080:	str	r4, [r5, #36]	; 0x24
   17084:	mov	r4, r3
   17088:	bne	17058 <close_stdout@@Base+0xd4c>
   1708c:	ldr	r3, [r5, #32]
   17090:	cmp	r3, #0
   17094:	beq	170a0 <close_stdout@@Base+0xd94>
   17098:	ldr	r0, [r7, #-8]
   1709c:	blx	r3
   170a0:	str	r6, [r7, #-8]
   170a4:	str	r6, [r7, #-4]
   170a8:	ldr	r3, [r5, #4]
   170ac:	cmp	r3, r8
   170b0:	add	r7, r7, #8
   170b4:	bhi	1703c <close_stdout@@Base+0xd30>
   170b8:	mov	r3, #0
   170bc:	str	r3, [r5, #12]
   170c0:	str	r3, [r5, #16]
   170c4:	pop	{r4, r5, r6, r7, r8, pc}
   170c8:	push	{r3, r4, r5, r6, r7, lr}
   170cc:	mov	r5, r0
   170d0:	ldr	r3, [r0, #32]
   170d4:	cmp	r3, #0
   170d8:	beq	170e8 <close_stdout@@Base+0xddc>
   170dc:	ldr	r3, [r0, #16]
   170e0:	cmp	r3, #0
   170e4:	bne	17164 <close_stdout@@Base+0xe58>
   170e8:	ldr	r3, [r5, #4]
   170ec:	ldr	r6, [r5]
   170f0:	cmp	r6, r3
   170f4:	bcs	17130 <close_stdout@@Base+0xe24>
   170f8:	add	r6, r6, #8
   170fc:	ldr	r0, [r6, #-4]
   17100:	mov	r7, r6
   17104:	cmp	r0, #0
   17108:	beq	17124 <close_stdout@@Base+0xe18>
   1710c:	ldr	r4, [r0, #4]
   17110:	bl	11370 <free@plt>
   17114:	cmp	r4, #0
   17118:	mov	r0, r4
   1711c:	bne	1710c <close_stdout@@Base+0xe00>
   17120:	ldr	r3, [r5, #4]
   17124:	cmp	r7, r3
   17128:	add	r6, r6, #8
   1712c:	bcc	170fc <close_stdout@@Base+0xdf0>
   17130:	ldr	r0, [r5, #36]	; 0x24
   17134:	cmp	r0, #0
   17138:	beq	17150 <close_stdout@@Base+0xe44>
   1713c:	ldr	r4, [r0, #4]
   17140:	bl	11370 <free@plt>
   17144:	cmp	r4, #0
   17148:	mov	r0, r4
   1714c:	bne	1713c <close_stdout@@Base+0xe30>
   17150:	ldr	r0, [r5]
   17154:	bl	11370 <free@plt>
   17158:	mov	r0, r5
   1715c:	pop	{r3, r4, r5, r6, r7, lr}
   17160:	b	11370 <free@plt>
   17164:	ldr	r6, [r0]
   17168:	ldr	r3, [r0, #4]
   1716c:	cmp	r6, r3
   17170:	bcs	17130 <close_stdout@@Base+0xe24>
   17174:	ldr	r0, [r6]
   17178:	cmp	r0, #0
   1717c:	movne	r4, r6
   17180:	bne	1718c <close_stdout@@Base+0xe80>
   17184:	b	171a4 <close_stdout@@Base+0xe98>
   17188:	ldr	r0, [r4]
   1718c:	ldr	r3, [r5, #32]
   17190:	blx	r3
   17194:	ldr	r4, [r4, #4]
   17198:	cmp	r4, #0
   1719c:	bne	17188 <close_stdout@@Base+0xe7c>
   171a0:	ldr	r3, [r5, #4]
   171a4:	add	r6, r6, #8
   171a8:	cmp	r3, r6
   171ac:	bhi	17174 <close_stdout@@Base+0xe68>
   171b0:	b	170ec <close_stdout@@Base+0xde0>
   171b4:	ldr	r3, [pc, #392]	; 17344 <close_stdout@@Base+0x1038>
   171b8:	ldr	r2, [pc, #392]	; 17348 <close_stdout@@Base+0x103c>
   171bc:	add	r3, pc, r3
   171c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171c4:	sub	sp, sp, #52	; 0x34
   171c8:	ldr	r5, [r0, #20]
   171cc:	mov	r4, r0
   171d0:	ldr	r6, [r3, r2]
   171d4:	vldr	s15, [r5, #8]
   171d8:	ldrb	r2, [r5, #16]
   171dc:	ldr	r3, [r6]
   171e0:	cmp	r2, #0
   171e4:	str	r3, [sp, #44]	; 0x2c
   171e8:	bne	17210 <close_stdout@@Base+0xf04>
   171ec:	vmov	s14, r1
   171f0:	vcvt.f32.u32	s13, s14
   171f4:	vldr	s14, [pc, #324]	; 17340 <close_stdout@@Base+0x1034>
   171f8:	vdiv.f32	s15, s13, s15
   171fc:	vcmpe.f32	s15, s14
   17200:	vmrs	APSR_nzcv, fpscr
   17204:	bge	17308 <close_stdout@@Base+0xffc>
   17208:	vcvt.u32.f32	s15, s15
   1720c:	vmov	r1, s15
   17210:	mov	r0, r1
   17214:	bl	165f0 <close_stdout@@Base+0x2e4>
   17218:	sub	r3, r0, #1
   1721c:	mov	r7, r0
   17220:	cmn	r3, #-1073741822	; 0xc0000002
   17224:	bhi	17308 <close_stdout@@Base+0xffc>
   17228:	ldr	r3, [r4, #8]
   1722c:	cmp	r3, r0
   17230:	beq	172e8 <close_stdout@@Base+0xfdc>
   17234:	mov	r1, #8
   17238:	bl	1131c <calloc@plt>
   1723c:	cmp	r0, #0
   17240:	mov	r3, r0
   17244:	str	r0, [sp, #4]
   17248:	beq	17308 <close_stdout@@Base+0xffc>
   1724c:	ldr	fp, [r4, #24]
   17250:	add	r8, sp, #4
   17254:	ldr	sl, [r4, #28]
   17258:	mov	ip, #0
   1725c:	ldr	r9, [r4, #32]
   17260:	mov	r0, r8
   17264:	ldr	lr, [r4, #36]	; 0x24
   17268:	mov	r2, ip
   1726c:	mov	r1, r4
   17270:	add	r3, r3, r7, lsl #3
   17274:	str	r5, [sp, #24]
   17278:	str	r7, [sp, #12]
   1727c:	str	r3, [sp, #8]
   17280:	str	fp, [sp, #28]
   17284:	str	sl, [sp, #32]
   17288:	str	r9, [sp, #36]	; 0x24
   1728c:	str	lr, [sp, #40]	; 0x28
   17290:	str	ip, [sp, #16]
   17294:	str	ip, [sp, #20]
   17298:	bl	168b0 <close_stdout@@Base+0x5a4>
   1729c:	subs	r5, r0, #0
   172a0:	bne	17310 <close_stdout@@Base+0x1004>
   172a4:	ldr	r3, [sp, #40]	; 0x28
   172a8:	mov	r0, r4
   172ac:	mov	r1, r8
   172b0:	mov	r2, #1
   172b4:	str	r3, [r4, #36]	; 0x24
   172b8:	bl	168b0 <close_stdout@@Base+0x5a4>
   172bc:	cmp	r0, #0
   172c0:	beq	1733c <close_stdout@@Base+0x1030>
   172c4:	mov	r0, r4
   172c8:	mov	r1, r8
   172cc:	mov	r2, r5
   172d0:	bl	168b0 <close_stdout@@Base+0x5a4>
   172d4:	cmp	r0, #0
   172d8:	beq	1733c <close_stdout@@Base+0x1030>
   172dc:	ldr	r0, [sp, #4]
   172e0:	bl	11370 <free@plt>
   172e4:	b	172ec <close_stdout@@Base+0xfe0>
   172e8:	mov	r5, #1
   172ec:	ldr	r1, [sp, #44]	; 0x2c
   172f0:	mov	r0, r5
   172f4:	ldr	r3, [r6]
   172f8:	cmp	r1, r3
   172fc:	bne	17338 <close_stdout@@Base+0x102c>
   17300:	add	sp, sp, #52	; 0x34
   17304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17308:	mov	r5, #0
   1730c:	b	172ec <close_stdout@@Base+0xfe0>
   17310:	ldr	r0, [r4]
   17314:	bl	11370 <free@plt>
   17318:	add	r0, sp, #8
   1731c:	ldr	ip, [sp, #4]
   17320:	ldm	r0, {r0, r1, r2}
   17324:	ldr	r3, [sp, #40]	; 0x28
   17328:	str	ip, [r4]
   1732c:	stmib	r4, {r0, r1, r2}
   17330:	str	r3, [r4, #36]	; 0x24
   17334:	b	172ec <close_stdout@@Base+0xfe0>
   17338:	bl	113e8 <__stack_chk_fail@plt>
   1733c:	bl	11664 <abort@plt>
   17340:	svcmi	0x00800000
   17344:	andeq	r6, r1, ip, lsr lr
   17348:	andeq	r0, r0, r0, asr #2
   1734c:	ldr	r3, [pc, #428]	; 17500 <close_stdout@@Base+0x11f4>
   17350:	ldr	ip, [pc, #428]	; 17504 <close_stdout@@Base+0x11f8>
   17354:	add	r3, pc, r3
   17358:	push	{r4, r5, r6, r7, r8, lr}
   1735c:	subs	r8, r1, #0
   17360:	ldr	r4, [r3, ip]
   17364:	sub	sp, sp, #8
   17368:	mov	r5, r2
   1736c:	mov	r6, r0
   17370:	ldr	r3, [r4]
   17374:	str	r3, [sp, #4]
   17378:	beq	174b8 <close_stdout@@Base+0x11ac>
   1737c:	mov	r3, #0
   17380:	mov	r2, sp
   17384:	bl	166f4 <close_stdout@@Base+0x3e8>
   17388:	cmp	r0, #0
   1738c:	beq	173b8 <close_stdout@@Base+0x10ac>
   17390:	cmp	r5, #0
   17394:	moveq	r0, r5
   17398:	strne	r0, [r5]
   1739c:	movne	r0, #0
   173a0:	ldr	r2, [sp, #4]
   173a4:	ldr	r3, [r4]
   173a8:	cmp	r2, r3
   173ac:	bne	174f8 <close_stdout@@Base+0x11ec>
   173b0:	add	sp, sp, #8
   173b4:	pop	{r4, r5, r6, r7, r8, pc}
   173b8:	vldr	s11, [r6, #8]
   173bc:	vcvt.f32.u32	s14, s11
   173c0:	ldr	r3, [r6, #20]
   173c4:	vldr	s15, [r3, #8]
   173c8:	vldr	s13, [r6, #12]
   173cc:	vmul.f32	s15, s14, s15
   173d0:	vcvt.f32.u32	s14, s13
   173d4:	vcmpe.f32	s14, s15
   173d8:	vmrs	APSR_nzcv, fpscr
   173dc:	bgt	1742c <close_stdout@@Base+0x1120>
   173e0:	ldr	r3, [sp]
   173e4:	ldr	r2, [r3]
   173e8:	cmp	r2, #0
   173ec:	beq	174bc <close_stdout@@Base+0x11b0>
   173f0:	ldr	r3, [r6, #36]	; 0x24
   173f4:	cmp	r3, #0
   173f8:	beq	174e0 <close_stdout@@Base+0x11d4>
   173fc:	ldr	r2, [r3, #4]
   17400:	str	r2, [r6, #36]	; 0x24
   17404:	str	r8, [r3]
   17408:	mov	r0, #1
   1740c:	ldr	r2, [sp]
   17410:	ldr	r1, [r2, #4]
   17414:	str	r1, [r3, #4]
   17418:	str	r3, [r2, #4]
   1741c:	ldr	r3, [r6, #16]
   17420:	add	r3, r3, r0
   17424:	str	r3, [r6, #16]
   17428:	b	173a0 <close_stdout@@Base+0x1094>
   1742c:	add	r0, r6, #20
   17430:	bl	167f0 <close_stdout@@Base+0x4e4>
   17434:	vldr	s11, [r6, #8]
   17438:	vcvt.f32.u32	s15, s11
   1743c:	ldr	r3, [r6, #20]
   17440:	vldr	s14, [r3, #8]
   17444:	vldr	s11, [r6, #12]
   17448:	vmul.f32	s13, s14, s15
   1744c:	vcvt.f32.u32	s12, s11
   17450:	vcmpe.f32	s12, s13
   17454:	vmrs	APSR_nzcv, fpscr
   17458:	ble	173e0 <close_stdout@@Base+0x10d4>
   1745c:	ldrb	r2, [r3, #16]
   17460:	cmp	r2, #0
   17464:	vldreq	s13, [r3, #12]
   17468:	vldrne	s14, [r3, #12]
   1746c:	vmuleq.f32	s15, s15, s13
   17470:	vmul.f32	s15, s14, s15
   17474:	vldr	s14, [pc, #128]	; 174fc <close_stdout@@Base+0x11f0>
   17478:	vcmpe.f32	s15, s14
   1747c:	vmrs	APSR_nzcv, fpscr
   17480:	bge	174f0 <close_stdout@@Base+0x11e4>
   17484:	vcvt.u32.f32	s15, s15
   17488:	mov	r0, r6
   1748c:	vmov	r1, s15
   17490:	bl	171b4 <close_stdout@@Base+0xea8>
   17494:	cmp	r0, #0
   17498:	beq	174f0 <close_stdout@@Base+0x11e4>
   1749c:	mov	r2, sp
   174a0:	mov	r0, r6
   174a4:	mov	r1, r8
   174a8:	mov	r3, #0
   174ac:	bl	166f4 <close_stdout@@Base+0x3e8>
   174b0:	cmp	r0, #0
   174b4:	beq	173e0 <close_stdout@@Base+0x10d4>
   174b8:	bl	11664 <abort@plt>
   174bc:	str	r8, [r3]
   174c0:	mov	r0, #1
   174c4:	ldr	r2, [r6, #16]
   174c8:	ldr	r3, [r6, #12]
   174cc:	add	r2, r2, r0
   174d0:	str	r2, [r6, #16]
   174d4:	add	r3, r3, r0
   174d8:	str	r3, [r6, #12]
   174dc:	b	173a0 <close_stdout@@Base+0x1094>
   174e0:	mov	r0, #8
   174e4:	bl	114a8 <malloc@plt>
   174e8:	subs	r3, r0, #0
   174ec:	bne	17404 <close_stdout@@Base+0x10f8>
   174f0:	mvn	r0, #0
   174f4:	b	173a0 <close_stdout@@Base+0x1094>
   174f8:	bl	113e8 <__stack_chk_fail@plt>
   174fc:	svcmi	0x00800000
   17500:	andeq	r6, r1, r4, lsr #25
   17504:	andeq	r0, r0, r0, asr #2
   17508:	b	1734c <close_stdout@@Base+0x1040>
   1750c:	ldr	r3, [pc, #100]	; 17578 <close_stdout@@Base+0x126c>
   17510:	ldr	ip, [pc, #100]	; 1757c <close_stdout@@Base+0x1270>
   17514:	add	r3, pc, r3
   17518:	push	{r4, r5, lr}
   1751c:	sub	sp, sp, #12
   17520:	ldr	r4, [r3, ip]
   17524:	mov	r5, r1
   17528:	mov	r2, sp
   1752c:	ldr	r3, [r4]
   17530:	str	r3, [sp, #4]
   17534:	bl	1734c <close_stdout@@Base+0x1040>
   17538:	cmn	r0, #1
   1753c:	beq	1756c <close_stdout@@Base+0x1260>
   17540:	cmp	r0, #0
   17544:	movne	r0, r5
   17548:	beq	17564 <close_stdout@@Base+0x1258>
   1754c:	ldr	r2, [sp, #4]
   17550:	ldr	r3, [r4]
   17554:	cmp	r2, r3
   17558:	bne	17574 <close_stdout@@Base+0x1268>
   1755c:	add	sp, sp, #12
   17560:	pop	{r4, r5, pc}
   17564:	ldr	r0, [sp]
   17568:	b	1754c <close_stdout@@Base+0x1240>
   1756c:	mov	r0, #0
   17570:	b	1754c <close_stdout@@Base+0x1240>
   17574:	bl	113e8 <__stack_chk_fail@plt>
   17578:	andeq	r6, r1, r4, ror #21
   1757c:	andeq	r0, r0, r0, asr #2
   17580:	ldr	ip, [pc, #304]	; 176b8 <close_stdout@@Base+0x13ac>
   17584:	mov	r3, #1
   17588:	push	{r4, r5, r6, r7, lr}
   1758c:	add	ip, pc, ip
   17590:	ldr	lr, [pc, #292]	; 176bc <close_stdout@@Base+0x13b0>
   17594:	sub	sp, sp, #12
   17598:	mov	r4, r0
   1759c:	mov	r2, sp
   175a0:	ldr	r5, [ip, lr]
   175a4:	ldr	ip, [r5]
   175a8:	str	ip, [sp, #4]
   175ac:	bl	166f4 <close_stdout@@Base+0x3e8>
   175b0:	subs	r6, r0, #0
   175b4:	beq	175d4 <close_stdout@@Base+0x12c8>
   175b8:	ldr	r3, [sp]
   175bc:	ldr	r2, [r4, #16]
   175c0:	sub	r2, r2, #1
   175c4:	str	r2, [r4, #16]
   175c8:	ldr	r3, [r3]
   175cc:	cmp	r3, #0
   175d0:	beq	175f0 <close_stdout@@Base+0x12e4>
   175d4:	ldr	r2, [sp, #4]
   175d8:	mov	r0, r6
   175dc:	ldr	r3, [r5]
   175e0:	cmp	r2, r3
   175e4:	bne	176b4 <close_stdout@@Base+0x13a8>
   175e8:	add	sp, sp, #12
   175ec:	pop	{r4, r5, r6, r7, pc}
   175f0:	vldr	s12, [r4, #8]
   175f4:	vcvt.f32.u32	s14, s12
   175f8:	ldr	r3, [r4, #12]
   175fc:	ldr	r2, [r4, #20]
   17600:	sub	r3, r3, #1
   17604:	str	r3, [r4, #12]
   17608:	vldr	s15, [r2]
   1760c:	vmov	s13, r3
   17610:	vmul.f32	s15, s14, s15
   17614:	vcvt.f32.u32	s14, s13
   17618:	vcmpe.f32	s14, s15
   1761c:	vmrs	APSR_nzcv, fpscr
   17620:	bpl	175d4 <close_stdout@@Base+0x12c8>
   17624:	add	r0, r4, #20
   17628:	bl	167f0 <close_stdout@@Base+0x4e4>
   1762c:	vldr	s12, [r4, #8]
   17630:	vcvt.f32.u32	s15, s12
   17634:	ldr	r3, [r4, #20]
   17638:	vldr	s14, [r3]
   1763c:	vldr	s12, [r4, #12]
   17640:	vmul.f32	s14, s15, s14
   17644:	vcvt.f32.u32	s13, s12
   17648:	vcmpe.f32	s13, s14
   1764c:	vmrs	APSR_nzcv, fpscr
   17650:	bpl	175d4 <close_stdout@@Base+0x12c8>
   17654:	vldr	s14, [r3, #4]
   17658:	vmul.f32	s15, s15, s14
   1765c:	ldrb	r2, [r3, #16]
   17660:	mov	r0, r4
   17664:	cmp	r2, #0
   17668:	vldreq	s14, [r3, #8]
   1766c:	vmuleq.f32	s15, s15, s14
   17670:	vcvt.u32.f32	s15, s15
   17674:	vmov	r1, s15
   17678:	bl	171b4 <close_stdout@@Base+0xea8>
   1767c:	cmp	r0, #0
   17680:	bne	175d4 <close_stdout@@Base+0x12c8>
   17684:	ldr	r0, [r4, #36]	; 0x24
   17688:	cmp	r0, #0
   1768c:	bne	17698 <close_stdout@@Base+0x138c>
   17690:	b	176a8 <close_stdout@@Base+0x139c>
   17694:	mov	r0, r7
   17698:	ldr	r7, [r0, #4]
   1769c:	bl	11370 <free@plt>
   176a0:	cmp	r7, #0
   176a4:	bne	17694 <close_stdout@@Base+0x1388>
   176a8:	mov	r3, #0
   176ac:	str	r3, [r4, #36]	; 0x24
   176b0:	b	175d4 <close_stdout@@Base+0x12c8>
   176b4:	bl	113e8 <__stack_chk_fail@plt>
   176b8:	andeq	r6, r1, ip, ror #20
   176bc:	andeq	r0, r0, r0, asr #2
   176c0:	push	{r4, r5, r6, r7, r8, lr}
   176c4:	mov	r4, r0
   176c8:	mov	r5, r1
   176cc:	cmp	r4, #0
   176d0:	sbcs	r3, r5, #0
   176d4:	add	r6, r2, #19
   176d8:	mov	r3, #0
   176dc:	strb	r3, [r2, #20]
   176e0:	blt	17730 <close_stdout@@Base+0x1424>
   176e4:	mov	r0, r4
   176e8:	mov	r1, r5
   176ec:	mov	r2, #10
   176f0:	mov	r3, #0
   176f4:	bl	1b1d0 <close_stdout@@Base+0x4ec4>
   176f8:	mov	r7, r6
   176fc:	mov	r0, r4
   17700:	mov	r1, r5
   17704:	mov	r3, #0
   17708:	add	ip, r2, #48	; 0x30
   1770c:	mov	r2, #10
   17710:	strb	ip, [r6], #-1
   17714:	bl	1b1d0 <close_stdout@@Base+0x4ec4>
   17718:	mov	r4, r0
   1771c:	mov	r5, r1
   17720:	orrs	r3, r4, r5
   17724:	bne	176e4 <close_stdout@@Base+0x13d8>
   17728:	mov	r0, r7
   1772c:	pop	{r4, r5, r6, r7, r8, pc}
   17730:	mov	r0, r4
   17734:	mov	r1, r5
   17738:	mov	r2, #10
   1773c:	mov	r3, #0
   17740:	bl	1b1d0 <close_stdout@@Base+0x4ec4>
   17744:	mov	r8, r6
   17748:	mov	r0, r4
   1774c:	mov	r1, r5
   17750:	mov	r3, #0
   17754:	rsb	ip, r2, #48	; 0x30
   17758:	mov	r2, #10
   1775c:	strb	ip, [r6], #-1
   17760:	bl	1b1d0 <close_stdout@@Base+0x4ec4>
   17764:	mov	r4, r0
   17768:	mov	r5, r1
   1776c:	orrs	r3, r4, r5
   17770:	bne	17730 <close_stdout@@Base+0x1424>
   17774:	mov	r7, r6
   17778:	mov	r3, #45	; 0x2d
   1777c:	mov	r0, r7
   17780:	strb	r3, [r8, #-1]
   17784:	pop	{r4, r5, r6, r7, r8, pc}
   17788:	ldr	r3, [pc, #132]	; 17814 <close_stdout@@Base+0x1508>
   1778c:	ldr	r2, [pc, #132]	; 17818 <close_stdout@@Base+0x150c>
   17790:	add	r3, pc, r3
   17794:	ldr	r0, [pc, #128]	; 1781c <close_stdout@@Base+0x1510>
   17798:	push	{r4, lr}
   1779c:	sub	sp, sp, #8
   177a0:	ldr	r4, [r3, r2]
   177a4:	add	r0, pc, r0
   177a8:	ldr	r3, [r4]
   177ac:	str	r3, [sp, #4]
   177b0:	bl	1149c <getenv@plt>
   177b4:	subs	r3, r0, #0
   177b8:	beq	177c8 <close_stdout@@Base+0x14bc>
   177bc:	ldrb	r3, [r3]
   177c0:	cmp	r3, #0
   177c4:	bne	177e8 <close_stdout@@Base+0x14dc>
   177c8:	mov	r0, #3504	; 0xdb0
   177cc:	movt	r0, #3
   177d0:	ldr	r2, [sp, #4]
   177d4:	ldr	r3, [r4]
   177d8:	cmp	r2, r3
   177dc:	bne	17810 <close_stdout@@Base+0x1504>
   177e0:	add	sp, sp, #8
   177e4:	pop	{r4, pc}
   177e8:	mov	r2, #10
   177ec:	mov	r1, sp
   177f0:	bl	1134c <strtol@plt>
   177f4:	ldr	r2, [sp]
   177f8:	mov	r3, #3504	; 0xdb0
   177fc:	movt	r3, #3
   17800:	ldrb	r2, [r2]
   17804:	cmp	r2, #0
   17808:	movne	r0, r3
   1780c:	b	177d0 <close_stdout@@Base+0x14c4>
   17810:	bl	113e8 <__stack_chk_fail@plt>
   17814:	andeq	r6, r1, r8, ror #16
   17818:	andeq	r0, r0, r0, asr #2
   1781c:	andeq	r5, r0, r0, lsr #17
   17820:	push	{r3, r4, r5, r6, r7, lr}
   17824:	subs	r4, r0, #0
   17828:	ldr	r5, [pc, #172]	; 178dc <close_stdout@@Base+0x15d0>
   1782c:	add	r5, pc, r5
   17830:	beq	178b8 <close_stdout@@Base+0x15ac>
   17834:	mov	r1, #47	; 0x2f
   17838:	bl	11610 <strrchr@plt>
   1783c:	subs	r6, r0, #0
   17840:	beq	1789c <close_stdout@@Base+0x1590>
   17844:	add	r7, r6, #1
   17848:	rsb	r3, r4, r7
   1784c:	cmp	r3, #6
   17850:	ble	1789c <close_stdout@@Base+0x1590>
   17854:	ldr	r1, [pc, #132]	; 178e0 <close_stdout@@Base+0x15d4>
   17858:	sub	r0, r6, #6
   1785c:	mov	r2, #7
   17860:	add	r1, pc, r1
   17864:	bl	11658 <strncmp@plt>
   17868:	cmp	r0, #0
   1786c:	bne	1789c <close_stdout@@Base+0x1590>
   17870:	ldr	r1, [pc, #108]	; 178e4 <close_stdout@@Base+0x15d8>
   17874:	mov	r0, r7
   17878:	mov	r2, #3
   1787c:	add	r1, pc, r1
   17880:	bl	11658 <strncmp@plt>
   17884:	cmp	r0, #0
   17888:	movne	r4, r7
   1788c:	ldreq	r3, [pc, #84]	; 178e8 <close_stdout@@Base+0x15dc>
   17890:	addeq	r4, r6, #4
   17894:	ldreq	r3, [r5, r3]
   17898:	streq	r4, [r3]
   1789c:	ldr	r2, [pc, #72]	; 178ec <close_stdout@@Base+0x15e0>
   178a0:	ldr	r3, [pc, #72]	; 178f0 <close_stdout@@Base+0x15e4>
   178a4:	ldr	r2, [r5, r2]
   178a8:	str	r4, [r2]
   178ac:	ldr	r3, [r5, r3]
   178b0:	str	r4, [r3]
   178b4:	pop	{r3, r4, r5, r6, r7, pc}
   178b8:	ldr	r3, [pc, #52]	; 178f4 <close_stdout@@Base+0x15e8>
   178bc:	mov	r1, #1
   178c0:	ldr	r0, [pc, #48]	; 178f8 <close_stdout@@Base+0x15ec>
   178c4:	mov	r2, #55	; 0x37
   178c8:	ldr	r3, [r5, r3]
   178cc:	add	r0, pc, r0
   178d0:	ldr	r3, [r3]
   178d4:	bl	1143c <fwrite@plt>
   178d8:	bl	11664 <abort@plt>
   178dc:	andeq	r6, r1, ip, asr #15
   178e0:	andeq	r5, r0, ip, lsr #16
   178e4:	andeq	r5, r0, r8, lsl r8
   178e8:	andeq	r0, r0, r8, ror r1
   178ec:	andeq	r0, r0, ip, ror #2
   178f0:	andeq	r0, r0, r8, ror #2
   178f4:	andeq	r0, r0, ip, asr #2
   178f8:	andeq	r5, r0, r8, lsl #15
   178fc:	push	{r3, lr}
   17900:	mov	r3, r0
   17904:	mov	r2, #0
   17908:	cmp	r1, #8
   1790c:	str	r2, [r3], #4
   17910:	add	r3, r3, #4
   17914:	str	r2, [r0, #4]
   17918:	str	r2, [r3], #4
   1791c:	str	r2, [r3], #4
   17920:	str	r2, [r3], #4
   17924:	str	r2, [r3], #4
   17928:	str	r2, [r3], #4
   1792c:	str	r2, [r3], #4
   17930:	str	r2, [r3], #4
   17934:	str	r2, [r3], #4
   17938:	str	r2, [r3], #4
   1793c:	str	r2, [r3]
   17940:	beq	1794c <close_stdout@@Base+0x1640>
   17944:	str	r1, [r0]
   17948:	pop	{r3, pc}
   1794c:	bl	11664 <abort@plt>
   17950:	push	{r4, r5, r6, lr}
   17954:	mov	r4, r0
   17958:	mov	r6, r1
   1795c:	mov	r0, #0
   17960:	mov	r1, r4
   17964:	mov	r2, #5
   17968:	bl	113dc <dcgettext@plt>
   1796c:	cmp	r0, r4
   17970:	mov	r5, r0
   17974:	beq	1797c <close_stdout@@Base+0x1670>
   17978:	pop	{r4, r5, r6, pc}
   1797c:	bl	1a9f0 <close_stdout@@Base+0x46e4>
   17980:	ldrb	r3, [r0]
   17984:	bic	r3, r3, #32
   17988:	cmp	r3, #85	; 0x55
   1798c:	bne	17a00 <close_stdout@@Base+0x16f4>
   17990:	ldrb	r3, [r0, #1]
   17994:	bic	r3, r3, #32
   17998:	cmp	r3, #84	; 0x54
   1799c:	bne	179ec <close_stdout@@Base+0x16e0>
   179a0:	ldrb	r3, [r0, #2]
   179a4:	bic	r3, r3, #32
   179a8:	cmp	r3, #70	; 0x46
   179ac:	bne	179ec <close_stdout@@Base+0x16e0>
   179b0:	ldrb	r3, [r0, #3]
   179b4:	cmp	r3, #45	; 0x2d
   179b8:	bne	179ec <close_stdout@@Base+0x16e0>
   179bc:	ldrb	r3, [r0, #4]
   179c0:	cmp	r3, #56	; 0x38
   179c4:	bne	179ec <close_stdout@@Base+0x16e0>
   179c8:	ldrb	r3, [r0, #5]
   179cc:	cmp	r3, #0
   179d0:	bne	179ec <close_stdout@@Base+0x16e0>
   179d4:	ldrb	r3, [r5]
   179d8:	cmp	r3, #96	; 0x60
   179dc:	beq	17a78 <close_stdout@@Base+0x176c>
   179e0:	ldr	r0, [pc, #180]	; 17a9c <close_stdout@@Base+0x1790>
   179e4:	add	r0, pc, r0
   179e8:	pop	{r4, r5, r6, pc}
   179ec:	cmp	r6, #7
   179f0:	beq	17a84 <close_stdout@@Base+0x1778>
   179f4:	ldr	r0, [pc, #164]	; 17aa0 <close_stdout@@Base+0x1794>
   179f8:	add	r0, pc, r0
   179fc:	pop	{r4, r5, r6, pc}
   17a00:	cmp	r3, #71	; 0x47
   17a04:	bne	179ec <close_stdout@@Base+0x16e0>
   17a08:	ldrb	r3, [r0, #1]
   17a0c:	bic	r3, r3, #32
   17a10:	cmp	r3, #66	; 0x42
   17a14:	bne	179ec <close_stdout@@Base+0x16e0>
   17a18:	ldrb	r3, [r0, #2]
   17a1c:	cmp	r3, #49	; 0x31
   17a20:	bne	179ec <close_stdout@@Base+0x16e0>
   17a24:	ldrb	r3, [r0, #3]
   17a28:	cmp	r3, #56	; 0x38
   17a2c:	bne	179ec <close_stdout@@Base+0x16e0>
   17a30:	ldrb	r3, [r0, #4]
   17a34:	cmp	r3, #48	; 0x30
   17a38:	bne	179ec <close_stdout@@Base+0x16e0>
   17a3c:	ldrb	r3, [r0, #5]
   17a40:	cmp	r3, #51	; 0x33
   17a44:	bne	179ec <close_stdout@@Base+0x16e0>
   17a48:	ldrb	r3, [r0, #6]
   17a4c:	cmp	r3, #48	; 0x30
   17a50:	bne	179ec <close_stdout@@Base+0x16e0>
   17a54:	ldrb	r3, [r0, #7]
   17a58:	cmp	r3, #0
   17a5c:	bne	179ec <close_stdout@@Base+0x16e0>
   17a60:	ldrb	r3, [r5]
   17a64:	cmp	r3, #96	; 0x60
   17a68:	beq	17a90 <close_stdout@@Base+0x1784>
   17a6c:	ldr	r0, [pc, #48]	; 17aa4 <close_stdout@@Base+0x1798>
   17a70:	add	r0, pc, r0
   17a74:	pop	{r4, r5, r6, pc}
   17a78:	ldr	r0, [pc, #40]	; 17aa8 <close_stdout@@Base+0x179c>
   17a7c:	add	r0, pc, r0
   17a80:	pop	{r4, r5, r6, pc}
   17a84:	ldr	r0, [pc, #32]	; 17aac <close_stdout@@Base+0x17a0>
   17a88:	add	r0, pc, r0
   17a8c:	pop	{r4, r5, r6, pc}
   17a90:	ldr	r0, [pc, #24]	; 17ab0 <close_stdout@@Base+0x17a4>
   17a94:	add	r0, pc, r0
   17a98:	pop	{r4, r5, r6, pc}
   17a9c:	ldrdeq	r5, [r0], -r4
   17aa0:	andeq	r5, r0, r8, asr #13
   17aa4:	andeq	r5, r0, ip, asr #12
   17aa8:	andeq	r5, r0, r0, asr r6
   17aac:	andeq	r5, r0, ip, lsr r6
   17ab0:	andeq	r5, r0, r4, lsr r6
   17ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ab8:	sub	sp, sp, #124	; 0x7c
   17abc:	ldr	ip, [pc, #3304]	; 187ac <close_stdout@@Base+0x24a0>
   17ac0:	mov	sl, r1
   17ac4:	str	r0, [sp, #40]	; 0x28
   17ac8:	mov	r8, r3
   17acc:	ldr	r0, [pc, #3292]	; 187b0 <close_stdout@@Base+0x24a4>
   17ad0:	add	ip, pc, ip
   17ad4:	str	r2, [sp, #32]
   17ad8:	ldr	r1, [sp, #164]	; 0xa4
   17adc:	mov	r3, ip
   17ae0:	ldr	r0, [ip, r0]
   17ae4:	ldr	r2, [sp, #172]	; 0xac
   17ae8:	ubfx	r1, r1, #1, #1
   17aec:	str	r1, [sp, #36]	; 0x24
   17af0:	str	r0, [sp, #56]	; 0x38
   17af4:	ldr	r0, [sp, #168]	; 0xa8
   17af8:	ldr	r1, [sp, #176]	; 0xb0
   17afc:	str	r2, [sp, #72]	; 0x48
   17b00:	str	r0, [sp, #48]	; 0x30
   17b04:	ldr	r0, [sp, #56]	; 0x38
   17b08:	str	r1, [sp, #68]	; 0x44
   17b0c:	ldr	r3, [r0]
   17b10:	str	r3, [sp, #116]	; 0x74
   17b14:	bl	11454 <__ctype_get_mb_cur_max@plt>
   17b18:	ldr	r2, [sp, #160]	; 0xa0
   17b1c:	str	r0, [sp, #64]	; 0x40
   17b20:	cmp	r2, #8
   17b24:	addls	pc, pc, r2, lsl #2
   17b28:	b	18688 <close_stdout@@Base+0x237c>
   17b2c:	b	17b50 <close_stdout@@Base+0x1844>
   17b30:	b	183a0 <close_stdout@@Base+0x2094>
   17b34:	b	183d0 <close_stdout@@Base+0x20c4>
   17b38:	b	18280 <close_stdout@@Base+0x1f74>
   17b3c:	b	182c0 <close_stdout@@Base+0x1fb4>
   17b40:	b	182ec <close_stdout@@Base+0x1fe0>
   17b44:	b	1830c <close_stdout@@Base+0x2000>
   17b48:	b	1830c <close_stdout@@Base+0x2000>
   17b4c:	b	1830c <close_stdout@@Base+0x2000>
   17b50:	mov	r2, #0
   17b54:	str	r2, [sp, #36]	; 0x24
   17b58:	mov	r9, r2
   17b5c:	str	r2, [sp, #24]
   17b60:	str	r2, [sp, #28]
   17b64:	str	r2, [sp, #52]	; 0x34
   17b68:	ldr	r0, [sp, #36]	; 0x24
   17b6c:	mov	fp, #0
   17b70:	ldr	r1, [sp, #24]
   17b74:	eor	r2, r0, #1
   17b78:	eor	r3, r1, #1
   17b7c:	and	r3, r2, r3
   17b80:	and	r2, r1, r0
   17b84:	str	r3, [sp, #44]	; 0x2c
   17b88:	str	r2, [sp, #76]	; 0x4c
   17b8c:	cmn	r8, #1
   17b90:	beq	17f10 <close_stdout@@Base+0x1c04>
   17b94:	subs	r3, fp, r8
   17b98:	movne	r3, #1
   17b9c:	cmp	r3, #0
   17ba0:	beq	17f28 <close_stdout@@Base+0x1c1c>
   17ba4:	ldr	r3, [sp, #28]
   17ba8:	ldr	r0, [sp, #24]
   17bac:	adds	r7, r3, #0
   17bb0:	movne	r7, #1
   17bb4:	ands	r6, r7, r0
   17bb8:	bne	18414 <close_stdout@@Base+0x2108>
   17bbc:	ldr	r1, [sp, #32]
   17bc0:	add	r5, r1, fp
   17bc4:	ldrb	r4, [r5]
   17bc8:	cmp	r4, #126	; 0x7e
   17bcc:	addls	pc, pc, r4, lsl #2
   17bd0:	b	18194 <close_stdout@@Base+0x1e88>
   17bd4:	b	180a0 <close_stdout@@Base+0x1d94>
   17bd8:	b	18194 <close_stdout@@Base+0x1e88>
   17bdc:	b	18194 <close_stdout@@Base+0x1e88>
   17be0:	b	18194 <close_stdout@@Base+0x1e88>
   17be4:	b	18194 <close_stdout@@Base+0x1e88>
   17be8:	b	18194 <close_stdout@@Base+0x1e88>
   17bec:	b	18194 <close_stdout@@Base+0x1e88>
   17bf0:	b	18088 <close_stdout@@Base+0x1d7c>
   17bf4:	b	18070 <close_stdout@@Base+0x1d64>
   17bf8:	b	18098 <close_stdout@@Base+0x1d8c>
   17bfc:	b	18090 <close_stdout@@Base+0x1d84>
   17c00:	b	18080 <close_stdout@@Base+0x1d74>
   17c04:	b	18078 <close_stdout@@Base+0x1d6c>
   17c08:	b	1803c <close_stdout@@Base+0x1d30>
   17c0c:	b	18194 <close_stdout@@Base+0x1e88>
   17c10:	b	18194 <close_stdout@@Base+0x1e88>
   17c14:	b	18194 <close_stdout@@Base+0x1e88>
   17c18:	b	18194 <close_stdout@@Base+0x1e88>
   17c1c:	b	18194 <close_stdout@@Base+0x1e88>
   17c20:	b	18194 <close_stdout@@Base+0x1e88>
   17c24:	b	18194 <close_stdout@@Base+0x1e88>
   17c28:	b	18194 <close_stdout@@Base+0x1e88>
   17c2c:	b	18194 <close_stdout@@Base+0x1e88>
   17c30:	b	18194 <close_stdout@@Base+0x1e88>
   17c34:	b	18194 <close_stdout@@Base+0x1e88>
   17c38:	b	18194 <close_stdout@@Base+0x1e88>
   17c3c:	b	18194 <close_stdout@@Base+0x1e88>
   17c40:	b	18194 <close_stdout@@Base+0x1e88>
   17c44:	b	18194 <close_stdout@@Base+0x1e88>
   17c48:	b	18194 <close_stdout@@Base+0x1e88>
   17c4c:	b	18194 <close_stdout@@Base+0x1e88>
   17c50:	b	18194 <close_stdout@@Base+0x1e88>
   17c54:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17c58:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17c5c:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17c60:	b	17fc0 <close_stdout@@Base+0x1cb4>
   17c64:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17c68:	b	17e9c <close_stdout@@Base+0x1b90>
   17c6c:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17c70:	b	1813c <close_stdout@@Base+0x1e30>
   17c74:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17c78:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17c7c:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17c80:	b	17e9c <close_stdout@@Base+0x1b90>
   17c84:	b	17e9c <close_stdout@@Base+0x1b90>
   17c88:	b	17e9c <close_stdout@@Base+0x1b90>
   17c8c:	b	17e9c <close_stdout@@Base+0x1b90>
   17c90:	b	17e9c <close_stdout@@Base+0x1b90>
   17c94:	b	17e9c <close_stdout@@Base+0x1b90>
   17c98:	b	17e9c <close_stdout@@Base+0x1b90>
   17c9c:	b	17e9c <close_stdout@@Base+0x1b90>
   17ca0:	b	17e9c <close_stdout@@Base+0x1b90>
   17ca4:	b	17e9c <close_stdout@@Base+0x1b90>
   17ca8:	b	17e9c <close_stdout@@Base+0x1b90>
   17cac:	b	17e9c <close_stdout@@Base+0x1b90>
   17cb0:	b	17e9c <close_stdout@@Base+0x1b90>
   17cb4:	b	17e9c <close_stdout@@Base+0x1b90>
   17cb8:	b	17e9c <close_stdout@@Base+0x1b90>
   17cbc:	b	17e9c <close_stdout@@Base+0x1b90>
   17cc0:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17cc4:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17cc8:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17ccc:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17cd0:	b	17dd0 <close_stdout@@Base+0x1ac4>
   17cd4:	b	18194 <close_stdout@@Base+0x1e88>
   17cd8:	b	17e9c <close_stdout@@Base+0x1b90>
   17cdc:	b	17e9c <close_stdout@@Base+0x1b90>
   17ce0:	b	17e9c <close_stdout@@Base+0x1b90>
   17ce4:	b	17e9c <close_stdout@@Base+0x1b90>
   17ce8:	b	17e9c <close_stdout@@Base+0x1b90>
   17cec:	b	17e9c <close_stdout@@Base+0x1b90>
   17cf0:	b	17e9c <close_stdout@@Base+0x1b90>
   17cf4:	b	17e9c <close_stdout@@Base+0x1b90>
   17cf8:	b	17e9c <close_stdout@@Base+0x1b90>
   17cfc:	b	17e9c <close_stdout@@Base+0x1b90>
   17d00:	b	17e9c <close_stdout@@Base+0x1b90>
   17d04:	b	17e9c <close_stdout@@Base+0x1b90>
   17d08:	b	17e9c <close_stdout@@Base+0x1b90>
   17d0c:	b	17e9c <close_stdout@@Base+0x1b90>
   17d10:	b	17e9c <close_stdout@@Base+0x1b90>
   17d14:	b	17e9c <close_stdout@@Base+0x1b90>
   17d18:	b	17e9c <close_stdout@@Base+0x1b90>
   17d1c:	b	17e9c <close_stdout@@Base+0x1b90>
   17d20:	b	17e9c <close_stdout@@Base+0x1b90>
   17d24:	b	17e9c <close_stdout@@Base+0x1b90>
   17d28:	b	17e9c <close_stdout@@Base+0x1b90>
   17d2c:	b	17e9c <close_stdout@@Base+0x1b90>
   17d30:	b	17e9c <close_stdout@@Base+0x1b90>
   17d34:	b	17e9c <close_stdout@@Base+0x1b90>
   17d38:	b	17e9c <close_stdout@@Base+0x1b90>
   17d3c:	b	17e9c <close_stdout@@Base+0x1b90>
   17d40:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17d44:	b	18120 <close_stdout@@Base+0x1e14>
   17d48:	b	17e9c <close_stdout@@Base+0x1b90>
   17d4c:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17d50:	b	17e9c <close_stdout@@Base+0x1b90>
   17d54:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17d58:	b	17e9c <close_stdout@@Base+0x1b90>
   17d5c:	b	17e9c <close_stdout@@Base+0x1b90>
   17d60:	b	17e9c <close_stdout@@Base+0x1b90>
   17d64:	b	17e9c <close_stdout@@Base+0x1b90>
   17d68:	b	17e9c <close_stdout@@Base+0x1b90>
   17d6c:	b	17e9c <close_stdout@@Base+0x1b90>
   17d70:	b	17e9c <close_stdout@@Base+0x1b90>
   17d74:	b	17e9c <close_stdout@@Base+0x1b90>
   17d78:	b	17e9c <close_stdout@@Base+0x1b90>
   17d7c:	b	17e9c <close_stdout@@Base+0x1b90>
   17d80:	b	17e9c <close_stdout@@Base+0x1b90>
   17d84:	b	17e9c <close_stdout@@Base+0x1b90>
   17d88:	b	17e9c <close_stdout@@Base+0x1b90>
   17d8c:	b	17e9c <close_stdout@@Base+0x1b90>
   17d90:	b	17e9c <close_stdout@@Base+0x1b90>
   17d94:	b	17e9c <close_stdout@@Base+0x1b90>
   17d98:	b	17e9c <close_stdout@@Base+0x1b90>
   17d9c:	b	17e9c <close_stdout@@Base+0x1b90>
   17da0:	b	17e9c <close_stdout@@Base+0x1b90>
   17da4:	b	17e9c <close_stdout@@Base+0x1b90>
   17da8:	b	17e9c <close_stdout@@Base+0x1b90>
   17dac:	b	17e9c <close_stdout@@Base+0x1b90>
   17db0:	b	17e9c <close_stdout@@Base+0x1b90>
   17db4:	b	17e9c <close_stdout@@Base+0x1b90>
   17db8:	b	17e9c <close_stdout@@Base+0x1b90>
   17dbc:	b	17e9c <close_stdout@@Base+0x1b90>
   17dc0:	b	17fa8 <close_stdout@@Base+0x1c9c>
   17dc4:	b	17fc8 <close_stdout@@Base+0x1cbc>
   17dc8:	b	17fa8 <close_stdout@@Base+0x1c9c>
   17dcc:	b	17fc0 <close_stdout@@Base+0x1cb4>
   17dd0:	ldr	r3, [sp, #160]	; 0xa0
   17dd4:	cmp	r3, #2
   17dd8:	beq	18664 <close_stdout@@Base+0x2358>
   17ddc:	cmp	r3, #3
   17de0:	bne	17e9c <close_stdout@@Base+0x1b90>
   17de4:	ldr	r1, [sp, #164]	; 0xa4
   17de8:	tst	r1, #4
   17dec:	beq	17e9c <close_stdout@@Base+0x1b90>
   17df0:	add	r3, fp, #2
   17df4:	cmp	r8, r3
   17df8:	bls	17e9c <close_stdout@@Base+0x1b90>
   17dfc:	ldrb	r2, [r5, #1]
   17e00:	mov	r1, #1
   17e04:	cmp	r2, #63	; 0x3f
   17e08:	bne	17e9c <close_stdout@@Base+0x1b90>
   17e0c:	ldr	r0, [sp, #32]
   17e10:	ldrb	ip, [r0, r3]
   17e14:	sub	r0, ip, #33	; 0x21
   17e18:	uxtb	r0, r0
   17e1c:	cmp	r0, #29
   17e20:	bhi	17e9c <close_stdout@@Base+0x1b90>
   17e24:	lsl	r1, r1, r0
   17e28:	movw	r0, #20929	; 0x51c1
   17e2c:	movt	r0, #14336	; 0x3800
   17e30:	and	r0, r1, r0
   17e34:	cmp	r0, #0
   17e38:	beq	17e9c <close_stdout@@Base+0x1b90>
   17e3c:	ldr	r1, [sp, #36]	; 0x24
   17e40:	cmp	r1, #0
   17e44:	bne	17fe4 <close_stdout@@Base+0x1cd8>
   17e48:	cmp	r9, sl
   17e4c:	mov	r4, ip
   17e50:	mov	fp, r3
   17e54:	ldrcc	r0, [sp, #40]	; 0x28
   17e58:	strbcc	r2, [r0, r9]
   17e5c:	add	r2, r9, #1
   17e60:	cmp	sl, r2
   17e64:	ldrhi	r0, [sp, #40]	; 0x28
   17e68:	movhi	r1, #34	; 0x22
   17e6c:	strbhi	r1, [r0, r2]
   17e70:	add	r2, r9, #2
   17e74:	cmp	sl, r2
   17e78:	ldrhi	r0, [sp, #40]	; 0x28
   17e7c:	movhi	r1, #34	; 0x22
   17e80:	strbhi	r1, [r0, r2]
   17e84:	add	r2, r9, #3
   17e88:	cmp	sl, r2
   17e8c:	add	r9, r9, #4
   17e90:	ldrhi	r0, [sp, #40]	; 0x28
   17e94:	movhi	r1, #63	; 0x3f
   17e98:	strbhi	r1, [r0, r2]
   17e9c:	ldr	r0, [sp, #44]	; 0x2c
   17ea0:	cmp	r0, #0
   17ea4:	bne	17ecc <close_stdout@@Base+0x1bc0>
   17ea8:	ldr	r1, [sp, #48]	; 0x30
   17eac:	cmp	r1, #0
   17eb0:	beq	17ecc <close_stdout@@Base+0x1bc0>
   17eb4:	ubfx	r2, r4, #5, #8
   17eb8:	and	r3, r4, #31
   17ebc:	ldr	r2, [r1, r2, lsl #2]
   17ec0:	lsr	r3, r2, r3
   17ec4:	tst	r3, #1
   17ec8:	bne	17ed4 <close_stdout@@Base+0x1bc8>
   17ecc:	cmp	r6, #0
   17ed0:	beq	17ef4 <close_stdout@@Base+0x1be8>
   17ed4:	ldr	r2, [sp, #36]	; 0x24
   17ed8:	cmp	r2, #0
   17edc:	bne	17fe4 <close_stdout@@Base+0x1cd8>
   17ee0:	cmp	r9, sl
   17ee4:	ldrcc	r0, [sp, #40]	; 0x28
   17ee8:	movcc	r3, #92	; 0x5c
   17eec:	strbcc	r3, [r0, r9]
   17ef0:	add	r9, r9, #1
   17ef4:	add	fp, fp, #1
   17ef8:	cmp	r9, sl
   17efc:	ldrcc	r1, [sp, #40]	; 0x28
   17f00:	strbcc	r4, [r1, r9]
   17f04:	cmn	r8, #1
   17f08:	add	r9, r9, #1
   17f0c:	bne	17b94 <close_stdout@@Base+0x1888>
   17f10:	ldr	r2, [sp, #32]
   17f14:	ldrb	r3, [r2, fp]
   17f18:	adds	r3, r3, #0
   17f1c:	movne	r3, #1
   17f20:	cmp	r3, #0
   17f24:	bne	17ba4 <close_stdout@@Base+0x1898>
   17f28:	ldr	r3, [sp, #160]	; 0xa0
   17f2c:	cmp	r9, #0
   17f30:	cmpeq	r3, #2
   17f34:	bne	17f44 <close_stdout@@Base+0x1c38>
   17f38:	ldr	r0, [sp, #36]	; 0x24
   17f3c:	cmp	r0, #0
   17f40:	bne	17fe4 <close_stdout@@Base+0x1cd8>
   17f44:	ldr	r1, [sp, #36]	; 0x24
   17f48:	ldr	r2, [sp, #52]	; 0x34
   17f4c:	eor	r3, r1, #1
   17f50:	cmp	r2, #0
   17f54:	moveq	r3, #0
   17f58:	andne	r3, r3, #1
   17f5c:	cmp	r3, #0
   17f60:	beq	17f8c <close_stdout@@Base+0x1c80>
   17f64:	ldrb	r3, [r2]
   17f68:	cmp	r3, #0
   17f6c:	beq	17f8c <close_stdout@@Base+0x1c80>
   17f70:	ldr	r1, [sp, #40]	; 0x28
   17f74:	cmp	sl, r9
   17f78:	strbhi	r3, [r1, r9]
   17f7c:	ldrb	r3, [r2, #1]!
   17f80:	add	r9, r9, #1
   17f84:	cmp	r3, #0
   17f88:	bne	17f74 <close_stdout@@Base+0x1c68>
   17f8c:	cmp	r9, sl
   17f90:	movcs	r0, r9
   17f94:	ldrcc	r1, [sp, #40]	; 0x28
   17f98:	movcc	r3, #0
   17f9c:	movcc	r0, r9
   17fa0:	strbcc	r3, [r1, r9]
   17fa4:	b	18020 <close_stdout@@Base+0x1d14>
   17fa8:	cmn	r8, #1
   17fac:	beq	18674 <close_stdout@@Base+0x2368>
   17fb0:	subs	r3, r8, #1
   17fb4:	movne	r3, #1
   17fb8:	cmp	r3, #0
   17fbc:	bne	17e9c <close_stdout@@Base+0x1b90>
   17fc0:	cmp	fp, #0
   17fc4:	bne	17e9c <close_stdout@@Base+0x1b90>
   17fc8:	ldr	r3, [sp, #36]	; 0x24
   17fcc:	ldr	r0, [sp, #160]	; 0xa0
   17fd0:	cmp	r0, #2
   17fd4:	movne	r3, #0
   17fd8:	andeq	r3, r3, #1
   17fdc:	cmp	r3, #0
   17fe0:	beq	17e9c <close_stdout@@Base+0x1b90>
   17fe4:	ldr	r2, [sp, #164]	; 0xa4
   17fe8:	mov	ip, #0
   17fec:	ldr	r0, [sp, #160]	; 0xa0
   17ff0:	bic	r3, r2, #2
   17ff4:	ldr	r1, [sp, #72]	; 0x48
   17ff8:	ldr	r2, [sp, #68]	; 0x44
   17ffc:	stm	sp, {r0, r3}
   18000:	mov	r3, r8
   18004:	str	r1, [sp, #12]
   18008:	mov	r1, sl
   1800c:	str	r2, [sp, #16]
   18010:	ldr	r0, [sp, #40]	; 0x28
   18014:	ldr	r2, [sp, #32]
   18018:	str	ip, [sp, #8]
   1801c:	bl	17ab4 <close_stdout@@Base+0x17a8>
   18020:	ldr	r1, [sp, #56]	; 0x38
   18024:	ldr	r2, [sp, #116]	; 0x74
   18028:	ldr	r3, [r1]
   1802c:	cmp	r2, r3
   18030:	bne	18764 <close_stdout@@Base+0x2458>
   18034:	add	sp, sp, #124	; 0x7c
   18038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1803c:	mov	r3, #114	; 0x72
   18040:	ldr	r2, [sp, #36]	; 0x24
   18044:	ldr	r0, [sp, #160]	; 0xa0
   18048:	cmp	r0, #2
   1804c:	movne	r2, #0
   18050:	andeq	r2, r2, #1
   18054:	cmp	r2, #0
   18058:	bne	17fe4 <close_stdout@@Base+0x1cd8>
   1805c:	ldr	r1, [sp, #24]
   18060:	cmp	r1, #0
   18064:	beq	17e9c <close_stdout@@Base+0x1b90>
   18068:	mov	r4, r3
   1806c:	b	17ed4 <close_stdout@@Base+0x1bc8>
   18070:	mov	r3, #98	; 0x62
   18074:	b	1805c <close_stdout@@Base+0x1d50>
   18078:	mov	r3, #102	; 0x66
   1807c:	b	1805c <close_stdout@@Base+0x1d50>
   18080:	mov	r3, #118	; 0x76
   18084:	b	1805c <close_stdout@@Base+0x1d50>
   18088:	mov	r3, #97	; 0x61
   1808c:	b	1805c <close_stdout@@Base+0x1d50>
   18090:	mov	r3, #110	; 0x6e
   18094:	b	18040 <close_stdout@@Base+0x1d34>
   18098:	mov	r3, #116	; 0x74
   1809c:	b	18040 <close_stdout@@Base+0x1d34>
   180a0:	ldr	r2, [sp, #24]
   180a4:	cmp	r2, #0
   180a8:	beq	18650 <close_stdout@@Base+0x2344>
   180ac:	ldr	r3, [sp, #36]	; 0x24
   180b0:	cmp	r3, #0
   180b4:	bne	17fe4 <close_stdout@@Base+0x1cd8>
   180b8:	cmp	r9, sl
   180bc:	add	r2, r9, #1
   180c0:	ldrcc	r0, [sp, #40]	; 0x28
   180c4:	movcc	r3, #92	; 0x5c
   180c8:	strbcc	r3, [r0, r9]
   180cc:	add	r3, fp, #1
   180d0:	cmp	r8, r3
   180d4:	bls	18114 <close_stdout@@Base+0x1e08>
   180d8:	ldr	r1, [sp, #32]
   180dc:	ldrb	r3, [r1, r3]
   180e0:	sub	r3, r3, #48	; 0x30
   180e4:	cmp	r3, #9
   180e8:	bhi	18114 <close_stdout@@Base+0x1e08>
   180ec:	cmp	sl, r2
   180f0:	ldrhi	r0, [sp, #40]	; 0x28
   180f4:	movhi	r3, #48	; 0x30
   180f8:	strbhi	r3, [r0, r2]
   180fc:	add	r3, r9, #2
   18100:	cmp	sl, r3
   18104:	ldrhi	r1, [sp, #40]	; 0x28
   18108:	movhi	r2, #48	; 0x30
   1810c:	strbhi	r2, [r1, r3]
   18110:	add	r2, r9, #3
   18114:	mov	r9, r2
   18118:	mov	r4, #48	; 0x30
   1811c:	b	17ea8 <close_stdout@@Base+0x1b9c>
   18120:	ldr	r1, [sp, #76]	; 0x4c
   18124:	cmp	r1, #0
   18128:	beq	18134 <close_stdout@@Base+0x1e28>
   1812c:	cmp	r7, #0
   18130:	bne	17ef4 <close_stdout@@Base+0x1be8>
   18134:	mov	r3, r4
   18138:	b	18040 <close_stdout@@Base+0x1d34>
   1813c:	ldr	r1, [sp, #160]	; 0xa0
   18140:	cmp	r1, #2
   18144:	bne	17e9c <close_stdout@@Base+0x1b90>
   18148:	ldr	r2, [sp, #36]	; 0x24
   1814c:	cmp	r2, #0
   18150:	bne	17fe4 <close_stdout@@Base+0x1cd8>
   18154:	cmp	r9, sl
   18158:	ldrcc	r0, [sp, #40]	; 0x28
   1815c:	movcc	r3, #39	; 0x27
   18160:	strbcc	r3, [r0, r9]
   18164:	add	r3, r9, #1
   18168:	cmp	sl, r3
   1816c:	ldrhi	r1, [sp, #40]	; 0x28
   18170:	movhi	r2, #92	; 0x5c
   18174:	strbhi	r2, [r1, r3]
   18178:	add	r3, r9, #2
   1817c:	cmp	sl, r3
   18180:	add	r9, r9, #3
   18184:	ldrhi	r0, [sp, #40]	; 0x28
   18188:	movhi	r2, #39	; 0x27
   1818c:	strbhi	r2, [r0, r3]
   18190:	b	17e9c <close_stdout@@Base+0x1b90>
   18194:	ldr	r1, [sp, #64]	; 0x40
   18198:	cmp	r1, #1
   1819c:	bne	18494 <close_stdout@@Base+0x2188>
   181a0:	bl	114f0 <__ctype_b_loc@plt>
   181a4:	ldr	r2, [sp, #64]	; 0x40
   181a8:	sxth	r3, r4
   181ac:	str	r2, [sp, #60]	; 0x3c
   181b0:	lsl	r3, r3, #1
   181b4:	ldr	r2, [r0]
   181b8:	ldrh	r2, [r2, r3]
   181bc:	eor	r2, r2, #16384	; 0x4000
   181c0:	ubfx	r2, r2, #14, #1
   181c4:	ldr	r1, [sp, #24]
   181c8:	ands	r2, r2, r1
   181cc:	beq	17e9c <close_stdout@@Base+0x1b90>
   181d0:	ldr	r3, [sp, #60]	; 0x3c
   181d4:	mov	r0, #92	; 0x5c
   181d8:	ldr	r7, [sp, #36]	; 0x24
   181dc:	add	r1, r3, fp
   181e0:	str	r8, [sp, #60]	; 0x3c
   181e4:	ldr	r3, [sp, #40]	; 0x28
   181e8:	b	1824c <close_stdout@@Base+0x1f40>
   181ec:	cmp	r7, #0
   181f0:	bne	1868c <close_stdout@@Base+0x2380>
   181f4:	add	ip, r9, #1
   181f8:	cmp	r9, sl
   181fc:	strbcc	r0, [r3, r9]
   18200:	cmp	sl, ip
   18204:	lsrhi	r8, r4, #6
   18208:	addhi	r8, r8, #48	; 0x30
   1820c:	strbhi	r8, [r3, ip]
   18210:	add	ip, r9, #2
   18214:	add	r9, r9, #3
   18218:	cmp	sl, ip
   1821c:	ubfxhi	r8, r4, #3, #3
   18220:	and	r4, r4, #7
   18224:	add	r4, r4, #48	; 0x30
   18228:	addhi	r8, r8, #48	; 0x30
   1822c:	strbhi	r8, [r3, ip]
   18230:	add	fp, fp, #1
   18234:	cmp	r1, fp
   18238:	bls	18278 <close_stdout@@Base+0x1f6c>
   1823c:	cmp	r9, sl
   18240:	strbcc	r4, [r3, r9]
   18244:	ldrb	r4, [r5, #1]!
   18248:	add	r9, r9, #1
   1824c:	cmp	r2, #0
   18250:	bne	181ec <close_stdout@@Base+0x1ee0>
   18254:	cmp	r6, #0
   18258:	beq	18230 <close_stdout@@Base+0x1f24>
   1825c:	add	fp, fp, #1
   18260:	cmp	r9, sl
   18264:	strbcc	r0, [r3, r9]
   18268:	cmp	r1, fp
   1826c:	add	r9, r9, #1
   18270:	mov	r6, #0
   18274:	bhi	1823c <close_stdout@@Base+0x1f30>
   18278:	ldr	r8, [sp, #60]	; 0x3c
   1827c:	b	17ef8 <close_stdout@@Base+0x1bec>
   18280:	ldr	r3, [sp, #36]	; 0x24
   18284:	cmp	r3, #0
   18288:	bne	1878c <close_stdout@@Base+0x2480>
   1828c:	cmp	sl, #0
   18290:	beq	186a4 <close_stdout@@Base+0x2398>
   18294:	ldr	r1, [sp, #40]	; 0x28
   18298:	mov	r0, #1
   1829c:	ldr	r2, [pc, #1296]	; 187b4 <close_stdout@@Base+0x24a8>
   182a0:	mov	r3, #34	; 0x22
   182a4:	str	r0, [sp, #24]
   182a8:	mov	r9, r0
   182ac:	add	r2, pc, r2
   182b0:	str	r0, [sp, #28]
   182b4:	strb	r3, [r1]
   182b8:	str	r2, [sp, #52]	; 0x34
   182bc:	b	17b68 <close_stdout@@Base+0x185c>
   182c0:	ldr	r3, [pc, #1264]	; 187b8 <close_stdout@@Base+0x24ac>
   182c4:	mov	r2, #1
   182c8:	mov	r0, #3
   182cc:	str	r2, [sp, #36]	; 0x24
   182d0:	add	r3, pc, r3
   182d4:	str	r2, [sp, #24]
   182d8:	str	r3, [sp, #52]	; 0x34
   182dc:	mov	r9, #0
   182e0:	str	r2, [sp, #28]
   182e4:	str	r0, [sp, #160]	; 0xa0
   182e8:	b	17b68 <close_stdout@@Base+0x185c>
   182ec:	mov	r0, #0
   182f0:	mov	r1, #1
   182f4:	str	r0, [sp, #36]	; 0x24
   182f8:	mov	r9, r0
   182fc:	str	r1, [sp, #24]
   18300:	str	r0, [sp, #28]
   18304:	str	r0, [sp, #52]	; 0x34
   18308:	b	17b68 <close_stdout@@Base+0x185c>
   1830c:	ldr	r3, [sp, #160]	; 0xa0
   18310:	cmp	r3, #8
   18314:	beq	18340 <close_stdout@@Base+0x2034>
   18318:	ldr	r0, [pc, #1180]	; 187bc <close_stdout@@Base+0x24b0>
   1831c:	mov	r1, r3
   18320:	add	r0, pc, r0
   18324:	bl	17950 <close_stdout@@Base+0x1644>
   18328:	ldr	r1, [sp, #160]	; 0xa0
   1832c:	str	r0, [sp, #72]	; 0x48
   18330:	ldr	r0, [pc, #1160]	; 187c0 <close_stdout@@Base+0x24b4>
   18334:	add	r0, pc, r0
   18338:	bl	17950 <close_stdout@@Base+0x1644>
   1833c:	str	r0, [sp, #68]	; 0x44
   18340:	ldr	r0, [sp, #36]	; 0x24
   18344:	cmp	r0, #0
   18348:	movne	r9, #0
   1834c:	bne	18384 <close_stdout@@Base+0x2078>
   18350:	ldr	r1, [sp, #72]	; 0x48
   18354:	ldrb	r3, [r1]
   18358:	cmp	r3, #0
   1835c:	beq	1875c <close_stdout@@Base+0x2450>
   18360:	mov	r2, r1
   18364:	ldr	r1, [sp, #40]	; 0x28
   18368:	mov	r9, r0
   1836c:	cmp	r9, sl
   18370:	strbcc	r3, [r1, r9]
   18374:	ldrb	r3, [r2, #1]!
   18378:	add	r9, r9, #1
   1837c:	cmp	r3, #0
   18380:	bne	1836c <close_stdout@@Base+0x2060>
   18384:	ldr	r0, [sp, #68]	; 0x44
   18388:	str	r0, [sp, #52]	; 0x34
   1838c:	bl	11514 <strlen@plt>
   18390:	mov	r2, #1
   18394:	str	r2, [sp, #24]
   18398:	str	r0, [sp, #28]
   1839c:	b	17b68 <close_stdout@@Base+0x185c>
   183a0:	ldr	r3, [pc, #1052]	; 187c4 <close_stdout@@Base+0x24b8>
   183a4:	mov	r2, #0
   183a8:	mov	r1, #1
   183ac:	mov	r0, #2
   183b0:	add	r3, pc, r3
   183b4:	str	r1, [sp, #36]	; 0x24
   183b8:	str	r2, [sp, #24]
   183bc:	mov	r9, r2
   183c0:	str	r1, [sp, #28]
   183c4:	str	r3, [sp, #52]	; 0x34
   183c8:	str	r0, [sp, #160]	; 0xa0
   183cc:	b	17b68 <close_stdout@@Base+0x185c>
   183d0:	ldr	r3, [sp, #36]	; 0x24
   183d4:	cmp	r3, #0
   183d8:	bne	18768 <close_stdout@@Base+0x245c>
   183dc:	cmp	sl, #0
   183e0:	beq	186c4 <close_stdout@@Base+0x23b8>
   183e4:	ldr	r1, [sp, #40]	; 0x28
   183e8:	mov	r3, #39	; 0x27
   183ec:	ldr	r2, [sp, #36]	; 0x24
   183f0:	mov	r0, #1
   183f4:	mov	r9, r0
   183f8:	str	r0, [sp, #28]
   183fc:	strb	r3, [r1]
   18400:	ldr	r3, [pc, #960]	; 187c8 <close_stdout@@Base+0x24bc>
   18404:	str	r2, [sp, #24]
   18408:	add	r3, pc, r3
   1840c:	str	r3, [sp, #52]	; 0x34
   18410:	b	17b68 <close_stdout@@Base+0x185c>
   18414:	ldr	r2, [sp, #28]
   18418:	cmp	r2, #1
   1841c:	add	r4, fp, r2
   18420:	movls	r3, #0
   18424:	movhi	r3, #1
   18428:	cmn	r8, #1
   1842c:	movne	r3, #0
   18430:	cmp	r3, #0
   18434:	beq	18444 <close_stdout@@Base+0x2138>
   18438:	ldr	r0, [sp, #32]
   1843c:	bl	11514 <strlen@plt>
   18440:	mov	r8, r0
   18444:	cmp	r8, r4
   18448:	ldrcc	r3, [sp, #32]
   1844c:	movcc	r6, #0
   18450:	addcc	r5, r3, fp
   18454:	bcc	17bc4 <close_stdout@@Base+0x18b8>
   18458:	ldr	r0, [sp, #32]
   1845c:	ldr	r1, [sp, #52]	; 0x34
   18460:	add	r5, r0, fp
   18464:	ldr	r2, [sp, #28]
   18468:	mov	r0, r5
   1846c:	bl	113c4 <memcmp@plt>
   18470:	cmp	r0, #0
   18474:	bne	1848c <close_stdout@@Base+0x2180>
   18478:	ldr	r1, [sp, #36]	; 0x24
   1847c:	cmp	r1, #0
   18480:	bne	17fe4 <close_stdout@@Base+0x1cd8>
   18484:	mov	r6, #1
   18488:	b	17bc4 <close_stdout@@Base+0x18b8>
   1848c:	mov	r6, #0
   18490:	b	17bc4 <close_stdout@@Base+0x18b8>
   18494:	add	r7, sp, #108	; 0x6c
   18498:	cmn	r8, #1
   1849c:	mov	r3, #0
   184a0:	str	r3, [sp, #108]	; 0x6c
   184a4:	str	r3, [r7, #4]
   184a8:	beq	18694 <close_stdout@@Base+0x2388>
   184ac:	mov	r1, #0
   184b0:	ldr	r0, [sp, #32]
   184b4:	mov	ip, #1
   184b8:	str	r9, [sp, #88]	; 0x58
   184bc:	str	r6, [sp, #96]	; 0x60
   184c0:	mov	r9, r1
   184c4:	str	r5, [sp, #100]	; 0x64
   184c8:	mov	r6, ip
   184cc:	mov	r5, r7
   184d0:	add	r3, sp, #104	; 0x68
   184d4:	sub	r0, r0, #1
   184d8:	str	r3, [sp, #80]	; 0x50
   184dc:	str	r0, [sp, #84]	; 0x54
   184e0:	str	r1, [sp, #60]	; 0x3c
   184e4:	str	r4, [sp, #92]	; 0x5c
   184e8:	ldr	r2, [sp, #32]
   184ec:	add	r7, r9, fp
   184f0:	add	r0, sp, #104	; 0x68
   184f4:	mov	r3, r5
   184f8:	add	r4, r2, r7
   184fc:	rsb	r2, r7, r8
   18500:	mov	r1, r4
   18504:	bl	11478 <mbrtowc@plt>
   18508:	subs	r2, r0, #0
   1850c:	beq	18618 <close_stdout@@Base+0x230c>
   18510:	cmn	r2, #1
   18514:	beq	18740 <close_stdout@@Base+0x2434>
   18518:	cmn	r2, #2
   1851c:	beq	186e4 <close_stdout@@Base+0x23d8>
   18520:	ldr	r3, [sp, #36]	; 0x24
   18524:	ldr	r0, [sp, #160]	; 0xa0
   18528:	cmp	r0, #2
   1852c:	movne	r3, #0
   18530:	andeq	r3, r3, #1
   18534:	cmp	r3, #0
   18538:	beq	185f4 <close_stdout@@Base+0x22e8>
   1853c:	cmp	r2, #1
   18540:	beq	185f4 <close_stdout@@Base+0x22e8>
   18544:	ldr	r1, [sp, #84]	; 0x54
   18548:	add	r3, r1, r2
   1854c:	add	r7, r3, r7
   18550:	ldrb	r3, [r4, #1]!
   18554:	sub	r3, r3, #91	; 0x5b
   18558:	cmp	r3, #33	; 0x21
   1855c:	addls	pc, pc, r3, lsl #2
   18560:	b	185ec <close_stdout@@Base+0x22e0>
   18564:	b	17fe4 <close_stdout@@Base+0x1cd8>
   18568:	b	17fe4 <close_stdout@@Base+0x1cd8>
   1856c:	b	185ec <close_stdout@@Base+0x22e0>
   18570:	b	17fe4 <close_stdout@@Base+0x1cd8>
   18574:	b	185ec <close_stdout@@Base+0x22e0>
   18578:	b	17fe4 <close_stdout@@Base+0x1cd8>
   1857c:	b	185ec <close_stdout@@Base+0x22e0>
   18580:	b	185ec <close_stdout@@Base+0x22e0>
   18584:	b	185ec <close_stdout@@Base+0x22e0>
   18588:	b	185ec <close_stdout@@Base+0x22e0>
   1858c:	b	185ec <close_stdout@@Base+0x22e0>
   18590:	b	185ec <close_stdout@@Base+0x22e0>
   18594:	b	185ec <close_stdout@@Base+0x22e0>
   18598:	b	185ec <close_stdout@@Base+0x22e0>
   1859c:	b	185ec <close_stdout@@Base+0x22e0>
   185a0:	b	185ec <close_stdout@@Base+0x22e0>
   185a4:	b	185ec <close_stdout@@Base+0x22e0>
   185a8:	b	185ec <close_stdout@@Base+0x22e0>
   185ac:	b	185ec <close_stdout@@Base+0x22e0>
   185b0:	b	185ec <close_stdout@@Base+0x22e0>
   185b4:	b	185ec <close_stdout@@Base+0x22e0>
   185b8:	b	185ec <close_stdout@@Base+0x22e0>
   185bc:	b	185ec <close_stdout@@Base+0x22e0>
   185c0:	b	185ec <close_stdout@@Base+0x22e0>
   185c4:	b	185ec <close_stdout@@Base+0x22e0>
   185c8:	b	185ec <close_stdout@@Base+0x22e0>
   185cc:	b	185ec <close_stdout@@Base+0x22e0>
   185d0:	b	185ec <close_stdout@@Base+0x22e0>
   185d4:	b	185ec <close_stdout@@Base+0x22e0>
   185d8:	b	185ec <close_stdout@@Base+0x22e0>
   185dc:	b	185ec <close_stdout@@Base+0x22e0>
   185e0:	b	185ec <close_stdout@@Base+0x22e0>
   185e4:	b	185ec <close_stdout@@Base+0x22e0>
   185e8:	b	17fe4 <close_stdout@@Base+0x1cd8>
   185ec:	cmp	r4, r7
   185f0:	bne	18550 <close_stdout@@Base+0x2244>
   185f4:	ldr	r0, [sp, #104]	; 0x68
   185f8:	add	r9, r9, r2
   185fc:	bl	11424 <iswprint@plt>
   18600:	cmp	r0, #0
   18604:	mov	r0, r5
   18608:	moveq	r6, #0
   1860c:	bl	113ac <mbsinit@plt>
   18610:	cmp	r0, #0
   18614:	beq	184e8 <close_stdout@@Base+0x21dc>
   18618:	mov	ip, r6
   1861c:	eor	r2, ip, #1
   18620:	str	r9, [sp, #60]	; 0x3c
   18624:	ldr	r4, [sp, #92]	; 0x5c
   18628:	uxtb	r2, r2
   1862c:	ldr	r9, [sp, #88]	; 0x58
   18630:	ldr	r6, [sp, #96]	; 0x60
   18634:	ldr	r5, [sp, #100]	; 0x64
   18638:	ldr	r3, [sp, #60]	; 0x3c
   1863c:	cmp	r3, #1
   18640:	bls	181c4 <close_stdout@@Base+0x1eb8>
   18644:	ldr	r0, [sp, #24]
   18648:	and	r2, r2, r0
   1864c:	b	181d0 <close_stdout@@Base+0x1ec4>
   18650:	ldr	r2, [sp, #164]	; 0xa4
   18654:	tst	r2, #1
   18658:	addne	fp, fp, #1
   1865c:	bne	17b8c <close_stdout@@Base+0x1880>
   18660:	b	17e9c <close_stdout@@Base+0x1b90>
   18664:	ldr	r0, [sp, #36]	; 0x24
   18668:	cmp	r0, #0
   1866c:	beq	17e9c <close_stdout@@Base+0x1b90>
   18670:	b	17fe4 <close_stdout@@Base+0x1cd8>
   18674:	ldr	r2, [sp, #32]
   18678:	ldrb	r3, [r2, #1]
   1867c:	adds	r3, r3, #0
   18680:	movne	r3, #1
   18684:	b	17fb8 <close_stdout@@Base+0x1cac>
   18688:	bl	11664 <abort@plt>
   1868c:	ldr	r8, [sp, #60]	; 0x3c
   18690:	b	17fe4 <close_stdout@@Base+0x1cd8>
   18694:	ldr	r0, [sp, #32]
   18698:	bl	11514 <strlen@plt>
   1869c:	mov	r8, r0
   186a0:	b	184ac <close_stdout@@Base+0x21a0>
   186a4:	ldr	r2, [pc, #288]	; 187cc <close_stdout@@Base+0x24c0>
   186a8:	mov	r1, #1
   186ac:	mov	r9, r1
   186b0:	str	r1, [sp, #24]
   186b4:	add	r2, pc, r2
   186b8:	str	r1, [sp, #28]
   186bc:	str	r2, [sp, #52]	; 0x34
   186c0:	b	17b68 <close_stdout@@Base+0x185c>
   186c4:	ldr	r2, [pc, #260]	; 187d0 <close_stdout@@Base+0x24c4>
   186c8:	mov	r3, #1
   186cc:	mov	r9, r3
   186d0:	str	r3, [sp, #28]
   186d4:	add	r2, pc, r2
   186d8:	str	sl, [sp, #24]
   186dc:	str	r2, [sp, #52]	; 0x34
   186e0:	b	17b68 <close_stdout@@Base+0x185c>
   186e4:	cmp	r8, r7
   186e8:	str	r9, [sp, #60]	; 0x3c
   186ec:	mov	ip, r4
   186f0:	ldr	r6, [sp, #96]	; 0x60
   186f4:	ldr	r9, [sp, #88]	; 0x58
   186f8:	ldr	r4, [sp, #92]	; 0x5c
   186fc:	ldr	r5, [sp, #100]	; 0x64
   18700:	bls	18738 <close_stdout@@Base+0x242c>
   18704:	ldrb	r3, [ip]
   18708:	cmp	r3, #0
   1870c:	beq	18738 <close_stdout@@Base+0x242c>
   18710:	ldr	r3, [sp, #60]	; 0x3c
   18714:	b	18724 <close_stdout@@Base+0x2418>
   18718:	ldrb	r2, [r5, r3]
   1871c:	cmp	r2, #0
   18720:	beq	18734 <close_stdout@@Base+0x2428>
   18724:	add	r3, r3, #1
   18728:	add	r2, fp, r3
   1872c:	cmp	r8, r2
   18730:	bhi	18718 <close_stdout@@Base+0x240c>
   18734:	str	r3, [sp, #60]	; 0x3c
   18738:	mov	r2, #1
   1873c:	b	18638 <close_stdout@@Base+0x232c>
   18740:	str	r9, [sp, #60]	; 0x3c
   18744:	mov	r2, #1
   18748:	ldr	r4, [sp, #92]	; 0x5c
   1874c:	ldr	r6, [sp, #96]	; 0x60
   18750:	ldr	r9, [sp, #88]	; 0x58
   18754:	ldr	r5, [sp, #100]	; 0x64
   18758:	b	18638 <close_stdout@@Base+0x232c>
   1875c:	ldr	r9, [sp, #36]	; 0x24
   18760:	b	18384 <close_stdout@@Base+0x2078>
   18764:	bl	113e8 <__stack_chk_fail@plt>
   18768:	ldr	r1, [pc, #100]	; 187d4 <close_stdout@@Base+0x24c8>
   1876c:	mov	r3, #0
   18770:	mov	r0, #1
   18774:	str	r3, [sp, #24]
   18778:	add	r1, pc, r1
   1877c:	str	r0, [sp, #28]
   18780:	mov	r9, r3
   18784:	str	r1, [sp, #52]	; 0x34
   18788:	b	17b68 <close_stdout@@Base+0x185c>
   1878c:	ldr	r0, [pc, #68]	; 187d8 <close_stdout@@Base+0x24cc>
   18790:	mov	r3, #1
   18794:	mov	r9, #0
   18798:	str	r3, [sp, #24]
   1879c:	add	r0, pc, r0
   187a0:	str	r3, [sp, #28]
   187a4:	str	r0, [sp, #52]	; 0x34
   187a8:	b	17b68 <close_stdout@@Base+0x185c>
   187ac:	andeq	r6, r1, r8, lsr #10
   187b0:	andeq	r0, r0, r0, asr #2
   187b4:	andeq	r4, r0, r8, lsl lr
   187b8:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   187bc:			; <UNDEFINED> instruction: 0x00004db0
   187c0:	andeq	r4, r0, ip, lsl #27
   187c4:	andeq	r4, r0, r0, lsl sp
   187c8:			; <UNDEFINED> instruction: 0x00004cb8
   187cc:	andeq	r4, r0, r0, lsl sl
   187d0:	andeq	r4, r0, ip, ror #19
   187d4:	andeq	r4, r0, r8, asr #18
   187d8:	andeq	r4, r0, r8, lsr #18
   187dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187e0:	sub	sp, sp, #44	; 0x2c
   187e4:	mov	r6, r0
   187e8:	mov	r9, r1
   187ec:	mov	sl, r2
   187f0:	mov	r4, r3
   187f4:	bl	11568 <__errno_location@plt>
   187f8:	ldr	fp, [pc, #412]	; 1899c <close_stdout@@Base+0x2690>
   187fc:	cmp	r6, #0
   18800:	add	fp, pc, fp
   18804:	ldr	r5, [fp]
   18808:	ldr	r1, [r0]
   1880c:	mov	r8, r0
   18810:	str	r1, [sp, #36]	; 0x24
   18814:	blt	18994 <close_stdout@@Base+0x2688>
   18818:	ldr	r3, [pc, #384]	; 189a0 <close_stdout@@Base+0x2694>
   1881c:	add	r3, pc, r3
   18820:	ldr	r3, [r3]
   18824:	cmp	r6, r3
   18828:	bcc	1887c <close_stdout@@Base+0x2570>
   1882c:	add	r7, r6, #1
   18830:	cmn	r7, #-536870911	; 0xe0000001
   18834:	bhi	18998 <close_stdout@@Base+0x268c>
   18838:	add	r3, fp, #4
   1883c:	cmp	r5, r3
   18840:	beq	1896c <close_stdout@@Base+0x2660>
   18844:	mov	r0, r5
   18848:	lsl	r1, r7, #3
   1884c:	bl	19710 <close_stdout@@Base+0x3404>
   18850:	mov	r5, r0
   18854:	str	r0, [fp]
   18858:	ldr	fp, [pc, #324]	; 189a4 <close_stdout@@Base+0x2698>
   1885c:	mov	r1, #0
   18860:	add	fp, pc, fp
   18864:	ldr	r0, [fp]
   18868:	rsb	r2, r0, r7
   1886c:	add	r0, r5, r0, lsl #3
   18870:	lsl	r2, r2, #3
   18874:	bl	11580 <memset@plt>
   18878:	str	r7, [fp]
   1887c:	add	r2, r4, #8
   18880:	str	r2, [sp, #32]
   18884:	ldr	r1, [r4]
   18888:	add	fp, r5, r6, lsl #3
   1888c:	ldr	lr, [sp, #32]
   18890:	mov	r2, r9
   18894:	ldr	r3, [r4, #4]
   18898:	ldr	ip, [r5, r6, lsl #3]
   1889c:	ldr	r7, [fp, #4]
   188a0:	orr	r3, r3, #1
   188a4:	str	r1, [sp]
   188a8:	str	r3, [sp, #4]
   188ac:	mov	r1, ip
   188b0:	str	lr, [sp, #8]
   188b4:	mov	r0, r7
   188b8:	ldr	lr, [r4, #40]	; 0x28
   188bc:	str	r3, [sp, #28]
   188c0:	mov	r3, sl
   188c4:	str	lr, [sp, #12]
   188c8:	ldr	lr, [r4, #44]	; 0x2c
   188cc:	str	ip, [sp, #24]
   188d0:	str	lr, [sp, #16]
   188d4:	bl	17ab4 <close_stdout@@Base+0x17a8>
   188d8:	ldr	ip, [sp, #24]
   188dc:	cmp	ip, r0
   188e0:	bhi	18958 <close_stdout@@Base+0x264c>
   188e4:	ldr	r3, [pc, #188]	; 189a8 <close_stdout@@Base+0x269c>
   188e8:	add	r1, r0, #1
   188ec:	str	r1, [r5, r6, lsl #3]
   188f0:	add	r3, pc, r3
   188f4:	cmp	r7, r3
   188f8:	beq	1890c <close_stdout@@Base+0x2600>
   188fc:	mov	r0, r7
   18900:	str	r1, [sp, #24]
   18904:	bl	11370 <free@plt>
   18908:	ldr	r1, [sp, #24]
   1890c:	mov	r0, r1
   18910:	str	r1, [sp, #24]
   18914:	bl	196b8 <close_stdout@@Base+0x33ac>
   18918:	ldr	r3, [sp, #28]
   1891c:	ldr	lr, [sp, #32]
   18920:	mov	r2, r9
   18924:	str	r0, [fp, #4]
   18928:	mov	r7, r0
   1892c:	ldr	ip, [r4]
   18930:	str	r3, [sp, #4]
   18934:	mov	r3, sl
   18938:	str	lr, [sp, #8]
   1893c:	str	ip, [sp]
   18940:	ldr	ip, [r4, #40]	; 0x28
   18944:	ldr	r1, [sp, #24]
   18948:	str	ip, [sp, #12]
   1894c:	ldr	ip, [r4, #44]	; 0x2c
   18950:	str	ip, [sp, #16]
   18954:	bl	17ab4 <close_stdout@@Base+0x17a8>
   18958:	ldr	r1, [sp, #36]	; 0x24
   1895c:	mov	r0, r7
   18960:	str	r1, [r8]
   18964:	add	sp, sp, #44	; 0x2c
   18968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1896c:	lsl	r1, r7, #3
   18970:	mov	r0, #0
   18974:	str	r3, [sp, #24]
   18978:	bl	19710 <close_stdout@@Base+0x3404>
   1897c:	ldr	r3, [sp, #24]
   18980:	mov	r5, r0
   18984:	ldm	r3, {r0, r1}
   18988:	str	r5, [fp]
   1898c:	stm	r5, {r0, r1}
   18990:	b	18858 <close_stdout@@Base+0x254c>
   18994:	bl	11664 <abort@plt>
   18998:	bl	198cc <close_stdout@@Base+0x35c0>
   1899c:	ldrdeq	r5, [r1], -r4
   189a0:	andeq	r5, r1, r4, lsl #19
   189a4:	andeq	r5, r1, r0, asr #18
   189a8:	andeq	r5, r1, r4, lsl r9
   189ac:	push	{r4, r5, r6, lr}
   189b0:	mov	r5, r0
   189b4:	bl	11568 <__errno_location@plt>
   189b8:	cmp	r5, #0
   189bc:	mov	r1, #48	; 0x30
   189c0:	mov	r4, r0
   189c4:	ldr	r0, [pc, #24]	; 189e4 <close_stdout@@Base+0x26d8>
   189c8:	ldr	r6, [r4]
   189cc:	add	r0, pc, r0
   189d0:	add	r0, r0, #256	; 0x100
   189d4:	movne	r0, r5
   189d8:	bl	1988c <close_stdout@@Base+0x3580>
   189dc:	str	r6, [r4]
   189e0:	pop	{r4, r5, r6, pc}
   189e4:	andeq	r5, r1, r8, lsr r8
   189e8:	cmp	r0, #0
   189ec:	beq	189f8 <close_stdout@@Base+0x26ec>
   189f0:	ldr	r0, [r0]
   189f4:	bx	lr
   189f8:	ldr	r0, [pc, #12]	; 18a0c <close_stdout@@Base+0x2700>
   189fc:	add	r0, pc, r0
   18a00:	add	r0, r0, #256	; 0x100
   18a04:	ldr	r0, [r0]
   18a08:	bx	lr
   18a0c:	andeq	r5, r1, r8, lsl #16
   18a10:	cmp	r0, #0
   18a14:	beq	18a20 <close_stdout@@Base+0x2714>
   18a18:	str	r1, [r0]
   18a1c:	bx	lr
   18a20:	ldr	r0, [pc, #12]	; 18a34 <close_stdout@@Base+0x2728>
   18a24:	add	r0, pc, r0
   18a28:	add	r0, r0, #256	; 0x100
   18a2c:	str	r1, [r0]
   18a30:	bx	lr
   18a34:	andeq	r5, r1, r0, ror #15
   18a38:	cmp	r0, #0
   18a3c:	movne	r3, r0
   18a40:	beq	18a70 <close_stdout@@Base+0x2764>
   18a44:	lsr	ip, r1, #5
   18a48:	and	r1, r1, #31
   18a4c:	add	r3, r3, ip, lsl #2
   18a50:	ldr	ip, [r3, #8]
   18a54:	lsr	r0, ip, r1
   18a58:	eor	r2, r0, r2
   18a5c:	and	r0, r0, #1
   18a60:	and	r2, r2, #1
   18a64:	eor	ip, ip, r2, lsl r1
   18a68:	str	ip, [r3, #8]
   18a6c:	bx	lr
   18a70:	ldr	r3, [pc, #8]	; 18a80 <close_stdout@@Base+0x2774>
   18a74:	add	r3, pc, r3
   18a78:	add	r3, r3, #256	; 0x100
   18a7c:	b	18a44 <close_stdout@@Base+0x2738>
   18a80:	muleq	r1, r0, r7
   18a84:	subs	r3, r0, #0
   18a88:	beq	18a98 <close_stdout@@Base+0x278c>
   18a8c:	ldr	r0, [r3, #4]
   18a90:	str	r1, [r3, #4]
   18a94:	bx	lr
   18a98:	ldr	r3, [pc, #8]	; 18aa8 <close_stdout@@Base+0x279c>
   18a9c:	add	r3, pc, r3
   18aa0:	add	r3, r3, #256	; 0x100
   18aa4:	b	18a8c <close_stdout@@Base+0x2780>
   18aa8:	andeq	r5, r1, r8, ror #14
   18aac:	cmp	r0, #0
   18ab0:	push	{r3, lr}
   18ab4:	beq	18ad8 <close_stdout@@Base+0x27cc>
   18ab8:	cmp	r2, #0
   18abc:	cmpne	r1, #0
   18ac0:	mov	r3, #8
   18ac4:	strne	r1, [r0, #40]	; 0x28
   18ac8:	str	r3, [r0]
   18acc:	strne	r2, [r0, #44]	; 0x2c
   18ad0:	popne	{r3, pc}
   18ad4:	bl	11664 <abort@plt>
   18ad8:	ldr	r0, [pc, #8]	; 18ae8 <close_stdout@@Base+0x27dc>
   18adc:	add	r0, pc, r0
   18ae0:	add	r0, r0, #256	; 0x100
   18ae4:	b	18ab8 <close_stdout@@Base+0x27ac>
   18ae8:	andeq	r5, r1, r8, lsr #14
   18aec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18af0:	sub	sp, sp, #24
   18af4:	mov	r7, r0
   18af8:	mov	sl, r1
   18afc:	ldr	r4, [sp, #56]	; 0x38
   18b00:	mov	r9, r2
   18b04:	mov	r8, r3
   18b08:	cmp	r4, #0
   18b0c:	beq	18b60 <close_stdout@@Base+0x2854>
   18b10:	bl	11568 <__errno_location@plt>
   18b14:	ldr	r3, [r4]
   18b18:	add	lr, r4, #8
   18b1c:	mov	r1, sl
   18b20:	mov	r2, r9
   18b24:	ldr	r6, [r0]
   18b28:	mov	r5, r0
   18b2c:	str	r3, [sp]
   18b30:	mov	r0, r7
   18b34:	ldr	ip, [r4, #4]
   18b38:	mov	r3, r8
   18b3c:	stmib	sp, {ip, lr}
   18b40:	ldr	ip, [r4, #40]	; 0x28
   18b44:	str	ip, [sp, #12]
   18b48:	ldr	ip, [r4, #44]	; 0x2c
   18b4c:	str	ip, [sp, #16]
   18b50:	bl	17ab4 <close_stdout@@Base+0x17a8>
   18b54:	str	r6, [r5]
   18b58:	add	sp, sp, #24
   18b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b60:	ldr	r4, [pc, #8]	; 18b70 <close_stdout@@Base+0x2864>
   18b64:	add	r4, pc, r4
   18b68:	add	r4, r4, #256	; 0x100
   18b6c:	b	18b10 <close_stdout@@Base+0x2804>
   18b70:	andeq	r5, r1, r0, lsr #13
   18b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b78:	subs	r4, r3, #0
   18b7c:	sub	sp, sp, #36	; 0x24
   18b80:	mov	r7, r0
   18b84:	mov	r6, r1
   18b88:	mov	r5, r2
   18b8c:	beq	18c48 <close_stdout@@Base+0x293c>
   18b90:	bl	11568 <__errno_location@plt>
   18b94:	ldr	r3, [r4]
   18b98:	ldr	sl, [r4, #4]
   18b9c:	add	r9, r4, #8
   18ba0:	mov	r8, r0
   18ba4:	mov	r0, #0
   18ba8:	ldr	r2, [r8]
   18bac:	cmp	r5, r0
   18bb0:	orreq	sl, sl, #1
   18bb4:	str	r9, [sp, #8]
   18bb8:	mov	r1, r0
   18bbc:	stm	sp, {r3, sl}
   18bc0:	mov	r3, r6
   18bc4:	ldr	ip, [r4, #40]	; 0x28
   18bc8:	str	r2, [sp, #28]
   18bcc:	mov	r2, r7
   18bd0:	str	ip, [sp, #12]
   18bd4:	ldr	ip, [r4, #44]	; 0x2c
   18bd8:	str	ip, [sp, #16]
   18bdc:	bl	17ab4 <close_stdout@@Base+0x17a8>
   18be0:	add	r1, r0, #1
   18be4:	mov	fp, r0
   18be8:	str	r1, [sp, #24]
   18bec:	mov	r0, r1
   18bf0:	bl	196b8 <close_stdout@@Base+0x33ac>
   18bf4:	ldr	lr, [r4]
   18bf8:	str	sl, [sp, #4]
   18bfc:	mov	r3, r6
   18c00:	str	r9, [sp, #8]
   18c04:	mov	r2, r7
   18c08:	str	lr, [sp]
   18c0c:	ldr	lr, [r4, #40]	; 0x28
   18c10:	ldr	r1, [sp, #24]
   18c14:	str	lr, [sp, #12]
   18c18:	ldr	lr, [r4, #44]	; 0x2c
   18c1c:	str	lr, [sp, #16]
   18c20:	str	r0, [sp, #24]
   18c24:	bl	17ab4 <close_stdout@@Base+0x17a8>
   18c28:	ldr	r3, [sp, #28]
   18c2c:	cmp	r5, #0
   18c30:	str	r3, [r8]
   18c34:	ldr	ip, [sp, #24]
   18c38:	strne	fp, [r5]
   18c3c:	mov	r0, ip
   18c40:	add	sp, sp, #36	; 0x24
   18c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c48:	ldr	r4, [pc, #8]	; 18c58 <close_stdout@@Base+0x294c>
   18c4c:	add	r4, pc, r4
   18c50:	add	r4, r4, #256	; 0x100
   18c54:	b	18b90 <close_stdout@@Base+0x2884>
   18c58:			; <UNDEFINED> instruction: 0x000155b8
   18c5c:	mov	r3, r2
   18c60:	mov	r2, #0
   18c64:	b	18b74 <close_stdout@@Base+0x2868>
   18c68:	ldr	r2, [pc, #152]	; 18d08 <close_stdout@@Base+0x29fc>
   18c6c:	push	{r3, r4, r5, r6, r7, lr}
   18c70:	add	r2, pc, r2
   18c74:	ldr	r3, [pc, #144]	; 18d0c <close_stdout@@Base+0x2a00>
   18c78:	ldr	r6, [r2]
   18c7c:	add	r3, pc, r3
   18c80:	cmp	r6, #1
   18c84:	ldr	r7, [r3]
   18c88:	movhi	r4, #1
   18c8c:	movhi	r5, r7
   18c90:	bls	18cac <close_stdout@@Base+0x29a0>
   18c94:	ldr	r0, [r5, #12]
   18c98:	add	r4, r4, #1
   18c9c:	bl	11370 <free@plt>
   18ca0:	cmp	r4, r6
   18ca4:	add	r5, r5, #8
   18ca8:	bne	18c94 <close_stdout@@Base+0x2988>
   18cac:	ldr	r4, [pc, #92]	; 18d10 <close_stdout@@Base+0x2a04>
   18cb0:	ldr	r0, [r7, #4]
   18cb4:	add	r4, pc, r4
   18cb8:	cmp	r0, r4
   18cbc:	beq	18cd4 <close_stdout@@Base+0x29c8>
   18cc0:	bl	11370 <free@plt>
   18cc4:	ldr	r3, [pc, #72]	; 18d14 <close_stdout@@Base+0x2a08>
   18cc8:	mov	r2, #256	; 0x100
   18ccc:	add	r3, pc, r3
   18cd0:	stmib	r3, {r2, r4}
   18cd4:	ldr	r4, [pc, #60]	; 18d18 <close_stdout@@Base+0x2a0c>
   18cd8:	add	r4, pc, r4
   18cdc:	add	r5, r4, #4
   18ce0:	cmp	r7, r5
   18ce4:	beq	18cf4 <close_stdout@@Base+0x29e8>
   18ce8:	mov	r0, r7
   18cec:	bl	11370 <free@plt>
   18cf0:	str	r5, [r4]
   18cf4:	ldr	r3, [pc, #32]	; 18d1c <close_stdout@@Base+0x2a10>
   18cf8:	mov	r2, #1
   18cfc:	add	r3, pc, r3
   18d00:	str	r2, [r3]
   18d04:	pop	{r3, r4, r5, r6, r7, pc}
   18d08:	andeq	r5, r1, r0, lsr r5
   18d0c:	andeq	r5, r1, r8, asr r5
   18d10:	andeq	r5, r1, r0, asr r5
   18d14:	andeq	r5, r1, r8, lsl #10
   18d18:	strdeq	r5, [r1], -ip
   18d1c:	andeq	r5, r1, r4, lsr #9
   18d20:	ldr	r3, [pc, #12]	; 18d34 <close_stdout@@Base+0x2a28>
   18d24:	mvn	r2, #0
   18d28:	add	r3, pc, r3
   18d2c:	add	r3, r3, #256	; 0x100
   18d30:	b	187dc <close_stdout@@Base+0x24d0>
   18d34:	ldrdeq	r5, [r1], -ip
   18d38:	ldr	r3, [pc, #8]	; 18d48 <close_stdout@@Base+0x2a3c>
   18d3c:	add	r3, pc, r3
   18d40:	add	r3, r3, #256	; 0x100
   18d44:	b	187dc <close_stdout@@Base+0x24d0>
   18d48:	andeq	r5, r1, r8, asr #9
   18d4c:	mov	r1, r0
   18d50:	mov	r0, #0
   18d54:	b	18d20 <close_stdout@@Base+0x2a14>
   18d58:	mov	r2, r1
   18d5c:	mov	r1, r0
   18d60:	mov	r0, #0
   18d64:	b	18d38 <close_stdout@@Base+0x2a2c>
   18d68:	ldr	r3, [pc, #92]	; 18dcc <close_stdout@@Base+0x2ac0>
   18d6c:	ldr	ip, [pc, #92]	; 18dd0 <close_stdout@@Base+0x2ac4>
   18d70:	add	r3, pc, r3
   18d74:	push	{r4, r5, r6, r7, lr}
   18d78:	sub	sp, sp, #60	; 0x3c
   18d7c:	ldr	r4, [r3, ip]
   18d80:	add	r5, sp, #4
   18d84:	mov	r7, r2
   18d88:	mov	r6, r0
   18d8c:	mov	r0, r5
   18d90:	ldr	r3, [r4]
   18d94:	str	r3, [sp, #52]	; 0x34
   18d98:	bl	178fc <close_stdout@@Base+0x15f0>
   18d9c:	mov	r3, r5
   18da0:	mvn	r2, #0
   18da4:	mov	r0, r6
   18da8:	mov	r1, r7
   18dac:	bl	187dc <close_stdout@@Base+0x24d0>
   18db0:	ldr	r2, [sp, #52]	; 0x34
   18db4:	ldr	r3, [r4]
   18db8:	cmp	r2, r3
   18dbc:	bne	18dc8 <close_stdout@@Base+0x2abc>
   18dc0:	add	sp, sp, #60	; 0x3c
   18dc4:	pop	{r4, r5, r6, r7, pc}
   18dc8:	bl	113e8 <__stack_chk_fail@plt>
   18dcc:	andeq	r5, r1, r8, lsl #5
   18dd0:	andeq	r0, r0, r0, asr #2
   18dd4:	ldr	ip, [pc, #96]	; 18e3c <close_stdout@@Base+0x2b30>
   18dd8:	push	{r4, r5, r6, r7, r8, lr}
   18ddc:	add	ip, pc, ip
   18de0:	ldr	lr, [pc, #88]	; 18e40 <close_stdout@@Base+0x2b34>
   18de4:	sub	sp, sp, #56	; 0x38
   18de8:	mov	r8, r3
   18dec:	add	r5, sp, #4
   18df0:	mov	r7, r2
   18df4:	mov	r6, r0
   18df8:	ldr	r4, [ip, lr]
   18dfc:	mov	r0, r5
   18e00:	ldr	r3, [r4]
   18e04:	str	r3, [sp, #52]	; 0x34
   18e08:	bl	178fc <close_stdout@@Base+0x15f0>
   18e0c:	mov	r2, r8
   18e10:	mov	r3, r5
   18e14:	mov	r0, r6
   18e18:	mov	r1, r7
   18e1c:	bl	187dc <close_stdout@@Base+0x24d0>
   18e20:	ldr	r2, [sp, #52]	; 0x34
   18e24:	ldr	r3, [r4]
   18e28:	cmp	r2, r3
   18e2c:	bne	18e38 <close_stdout@@Base+0x2b2c>
   18e30:	add	sp, sp, #56	; 0x38
   18e34:	pop	{r4, r5, r6, r7, r8, pc}
   18e38:	bl	113e8 <__stack_chk_fail@plt>
   18e3c:	andeq	r5, r1, ip, lsl r2
   18e40:	andeq	r0, r0, r0, asr #2
   18e44:	mov	r2, r1
   18e48:	mov	r1, r0
   18e4c:	mov	r0, #0
   18e50:	b	18d68 <close_stdout@@Base+0x2a5c>
   18e54:	mov	ip, r1
   18e58:	mov	r3, r2
   18e5c:	mov	r1, r0
   18e60:	mov	r2, ip
   18e64:	mov	r0, #0
   18e68:	b	18dd4 <close_stdout@@Base+0x2ac8>
   18e6c:	push	{r4, r5, r6, r7, r8, lr}
   18e70:	mov	r5, r2
   18e74:	ldr	lr, [pc, #136]	; 18f04 <close_stdout@@Base+0x2bf8>
   18e78:	mov	r7, r0
   18e7c:	mov	r6, r1
   18e80:	ldr	r4, [pc, #128]	; 18f08 <close_stdout@@Base+0x2bfc>
   18e84:	add	lr, pc, lr
   18e88:	sub	sp, sp, #56	; 0x38
   18e8c:	add	lr, lr, #256	; 0x100
   18e90:	ldr	r8, [pc, #116]	; 18f0c <close_stdout@@Base+0x2c00>
   18e94:	add	r4, pc, r4
   18e98:	add	ip, sp, #4
   18e9c:	ldm	lr!, {r0, r1, r2, r3}
   18ea0:	ldr	r4, [r4, r8]
   18ea4:	stmia	ip!, {r0, r1, r2, r3}
   18ea8:	ldm	lr!, {r0, r1, r2, r3}
   18eac:	ldr	r8, [r4]
   18eb0:	stmia	ip!, {r0, r1, r2, r3}
   18eb4:	ldm	lr, {r0, r1, r2, r3}
   18eb8:	str	r8, [sp, #52]	; 0x34
   18ebc:	stm	ip, {r0, r1, r2, r3}
   18ec0:	mov	r1, r5
   18ec4:	add	r5, sp, #4
   18ec8:	mov	r2, #1
   18ecc:	mov	r0, r5
   18ed0:	bl	18a38 <close_stdout@@Base+0x272c>
   18ed4:	mov	r2, r6
   18ed8:	mov	r3, r5
   18edc:	mov	r1, r7
   18ee0:	mov	r0, #0
   18ee4:	bl	187dc <close_stdout@@Base+0x24d0>
   18ee8:	ldr	r2, [sp, #52]	; 0x34
   18eec:	ldr	r3, [r4]
   18ef0:	cmp	r2, r3
   18ef4:	bne	18f00 <close_stdout@@Base+0x2bf4>
   18ef8:	add	sp, sp, #56	; 0x38
   18efc:	pop	{r4, r5, r6, r7, r8, pc}
   18f00:	bl	113e8 <__stack_chk_fail@plt>
   18f04:	andeq	r5, r1, r0, lsl #7
   18f08:	andeq	r5, r1, r4, ror #2
   18f0c:	andeq	r0, r0, r0, asr #2
   18f10:	mov	r2, r1
   18f14:	mvn	r1, #0
   18f18:	b	18e6c <close_stdout@@Base+0x2b60>
   18f1c:	mov	r1, #58	; 0x3a
   18f20:	b	18f10 <close_stdout@@Base+0x2c04>
   18f24:	mov	r2, #58	; 0x3a
   18f28:	b	18e6c <close_stdout@@Base+0x2b60>
   18f2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f30:	mov	r5, r2
   18f34:	ldr	lr, [pc, #144]	; 18fcc <close_stdout@@Base+0x2cc0>
   18f38:	mov	r8, r0
   18f3c:	mov	r9, r1
   18f40:	mov	r7, r3
   18f44:	add	lr, pc, lr
   18f48:	ldr	r4, [pc, #128]	; 18fd0 <close_stdout@@Base+0x2cc4>
   18f4c:	add	lr, lr, #256	; 0x100
   18f50:	sub	sp, sp, #56	; 0x38
   18f54:	ldr	sl, [pc, #120]	; 18fd4 <close_stdout@@Base+0x2cc8>
   18f58:	add	r4, pc, r4
   18f5c:	ldm	lr!, {r0, r1, r2, r3}
   18f60:	add	ip, sp, #4
   18f64:	ldr	r4, [r4, sl]
   18f68:	ldr	r6, [sp, #88]	; 0x58
   18f6c:	stmia	ip!, {r0, r1, r2, r3}
   18f70:	ldm	lr!, {r0, r1, r2, r3}
   18f74:	ldr	sl, [r4]
   18f78:	stmia	ip!, {r0, r1, r2, r3}
   18f7c:	ldm	lr, {r0, r1, r2, r3}
   18f80:	str	sl, [sp, #52]	; 0x34
   18f84:	stm	ip, {r0, r1, r2, r3}
   18f88:	mov	r2, r5
   18f8c:	add	r5, sp, #4
   18f90:	mov	r1, r9
   18f94:	mov	r0, r5
   18f98:	bl	18aac <close_stdout@@Base+0x27a0>
   18f9c:	mov	r2, r6
   18fa0:	mov	r3, r5
   18fa4:	mov	r0, r8
   18fa8:	mov	r1, r7
   18fac:	bl	187dc <close_stdout@@Base+0x24d0>
   18fb0:	ldr	r2, [sp, #52]	; 0x34
   18fb4:	ldr	r3, [r4]
   18fb8:	cmp	r2, r3
   18fbc:	bne	18fc8 <close_stdout@@Base+0x2cbc>
   18fc0:	add	sp, sp, #56	; 0x38
   18fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fc8:	bl	113e8 <__stack_chk_fail@plt>
   18fcc:	andeq	r5, r1, r0, asr #5
   18fd0:	andeq	r5, r1, r0, lsr #1
   18fd4:	andeq	r0, r0, r0, asr #2
   18fd8:	push	{lr}		; (str lr, [sp, #-4]!)
   18fdc:	sub	sp, sp, #12
   18fe0:	mvn	ip, #0
   18fe4:	str	ip, [sp]
   18fe8:	bl	18f2c <close_stdout@@Base+0x2c20>
   18fec:	add	sp, sp, #12
   18ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ff4:	mov	ip, r1
   18ff8:	mov	r3, r2
   18ffc:	mov	r1, r0
   19000:	mov	r2, ip
   19004:	mov	r0, #0
   19008:	b	18fd8 <close_stdout@@Base+0x2ccc>
   1900c:	push	{lr}		; (str lr, [sp, #-4]!)
   19010:	sub	sp, sp, #12
   19014:	mov	lr, r1
   19018:	mov	ip, r2
   1901c:	mov	r1, r0
   19020:	str	r3, [sp]
   19024:	mov	r2, lr
   19028:	mov	r3, ip
   1902c:	mov	r0, #0
   19030:	bl	18f2c <close_stdout@@Base+0x2c20>
   19034:	add	sp, sp, #12
   19038:	pop	{pc}		; (ldr pc, [sp], #4)
   1903c:	ldr	r3, [pc, #12]	; 19050 <close_stdout@@Base+0x2d44>
   19040:	ldr	ip, [pc, #12]	; 19054 <close_stdout@@Base+0x2d48>
   19044:	add	r3, pc, r3
   19048:	ldr	r3, [r3, ip]
   1904c:	b	187dc <close_stdout@@Base+0x24d0>
   19050:			; <UNDEFINED> instruction: 0x00014fb4
   19054:	andeq	r0, r0, ip, lsr r1
   19058:	mov	r2, r1
   1905c:	mov	r1, r0
   19060:	mov	r0, #0
   19064:	b	1903c <close_stdout@@Base+0x2d30>
   19068:	mvn	r2, #0
   1906c:	b	1903c <close_stdout@@Base+0x2d30>
   19070:	mov	r1, r0
   19074:	mov	r0, #0
   19078:	b	19068 <close_stdout@@Base+0x2d5c>
   1907c:	push	{r4, r5, r6, r7, r8, lr}
   19080:	mov	r8, #57344	; 0xe000
   19084:	movt	r8, #32767	; 0x7fff
   19088:	mov	r7, r0
   1908c:	mov	r6, r1
   19090:	mov	r4, r2
   19094:	mov	r0, r7
   19098:	mov	r1, r6
   1909c:	mov	r2, r4
   190a0:	bl	11358 <read@plt>
   190a4:	subs	r5, r0, #0
   190a8:	bge	190d4 <close_stdout@@Base+0x2dc8>
   190ac:	bl	11568 <__errno_location@plt>
   190b0:	ldr	r3, [r0]
   190b4:	cmp	r3, #4
   190b8:	beq	19094 <close_stdout@@Base+0x2d88>
   190bc:	cmp	r3, #22
   190c0:	bne	190d4 <close_stdout@@Base+0x2dc8>
   190c4:	cmp	r4, r8
   190c8:	mov	r4, #57344	; 0xe000
   190cc:	movt	r4, #32767	; 0x7fff
   190d0:	bhi	19094 <close_stdout@@Base+0x2d88>
   190d4:	mov	r0, r5
   190d8:	pop	{r4, r5, r6, r7, r8, pc}
   190dc:	cmp	r0, #2
   190e0:	push	{r3, r4, r5, r6, r7, lr}
   190e4:	mov	r4, r0
   190e8:	bhi	19110 <close_stdout@@Base+0x2e04>
   190ec:	bl	1ae10 <close_stdout@@Base+0x4b04>
   190f0:	mov	r7, r0
   190f4:	bl	11568 <__errno_location@plt>
   190f8:	ldr	r6, [r0]
   190fc:	mov	r5, r0
   19100:	mov	r0, r4
   19104:	mov	r4, r7
   19108:	bl	11670 <close@plt>
   1910c:	str	r6, [r5]
   19110:	mov	r0, r4
   19114:	pop	{r3, r4, r5, r6, r7, pc}
   19118:	push	{r4, r5, r6, r7, lr}
   1911c:	cmp	r1, #0
   19120:	sub	sp, sp, #36	; 0x24
   19124:	ldr	r7, [pc, #896]	; 194ac <close_stdout@@Base+0x31a0>
   19128:	mov	ip, r3
   1912c:	mov	r5, r0
   19130:	add	r7, pc, r7
   19134:	ldr	r4, [sp, #56]	; 0x38
   19138:	ldr	r6, [sp, #60]	; 0x3c
   1913c:	beq	19480 <close_stdout@@Base+0x3174>
   19140:	str	r2, [sp]
   19144:	mov	r3, r1
   19148:	ldr	r2, [pc, #864]	; 194b0 <close_stdout@@Base+0x31a4>
   1914c:	mov	r1, #1
   19150:	str	ip, [sp, #4]
   19154:	add	r2, pc, r2
   19158:	bl	115b0 <__fprintf_chk@plt>
   1915c:	ldr	r1, [pc, #848]	; 194b4 <close_stdout@@Base+0x31a8>
   19160:	mov	r2, #5
   19164:	mov	r0, #0
   19168:	add	r1, pc, r1
   1916c:	bl	113dc <dcgettext@plt>
   19170:	ldr	r2, [pc, #832]	; 194b8 <close_stdout@@Base+0x31ac>
   19174:	movw	ip, #2013	; 0x7dd
   19178:	mov	r1, #1
   1917c:	ldr	r2, [r7, r2]
   19180:	str	ip, [sp]
   19184:	mov	r3, r0
   19188:	mov	r0, r5
   1918c:	bl	115b0 <__fprintf_chk@plt>
   19190:	ldr	r1, [pc, #804]	; 194bc <close_stdout@@Base+0x31b0>
   19194:	mov	r0, #0
   19198:	mov	r2, #5
   1919c:	add	r1, pc, r1
   191a0:	bl	113dc <dcgettext@plt>
   191a4:	mov	r1, r5
   191a8:	bl	11328 <fputs_unlocked@plt>
   191ac:	cmp	r6, #9
   191b0:	addls	pc, pc, r6, lsl #2
   191b4:	b	1949c <close_stdout@@Base+0x3190>
   191b8:	b	1924c <close_stdout@@Base+0x2f40>
   191bc:	b	19250 <close_stdout@@Base+0x2f44>
   191c0:	b	19280 <close_stdout@@Base+0x2f74>
   191c4:	b	192b4 <close_stdout@@Base+0x2fa8>
   191c8:	b	192f0 <close_stdout@@Base+0x2fe4>
   191cc:	b	19330 <close_stdout@@Base+0x3024>
   191d0:	b	19378 <close_stdout@@Base+0x306c>
   191d4:	b	193c8 <close_stdout@@Base+0x30bc>
   191d8:	b	19420 <close_stdout@@Base+0x3114>
   191dc:	b	191e0 <close_stdout@@Base+0x2ed4>
   191e0:	ldr	r1, [pc, #728]	; 194c0 <close_stdout@@Base+0x31b4>
   191e4:	mov	r0, #0
   191e8:	add	r1, pc, r1
   191ec:	mov	r2, #5
   191f0:	bl	113dc <dcgettext@plt>
   191f4:	ldm	r4, {r3, ip}
   191f8:	mov	r1, #1
   191fc:	str	ip, [sp]
   19200:	ldr	ip, [r4, #8]
   19204:	str	ip, [sp, #4]
   19208:	ldr	ip, [r4, #12]
   1920c:	str	ip, [sp, #8]
   19210:	ldr	ip, [r4, #16]
   19214:	str	ip, [sp, #12]
   19218:	ldr	ip, [r4, #20]
   1921c:	str	ip, [sp, #16]
   19220:	ldr	ip, [r4, #24]
   19224:	str	ip, [sp, #20]
   19228:	ldr	ip, [r4, #28]
   1922c:	str	ip, [sp, #24]
   19230:	ldr	ip, [r4, #32]
   19234:	str	ip, [sp, #28]
   19238:	mov	r2, r0
   1923c:	mov	r0, r5
   19240:	bl	115b0 <__fprintf_chk@plt>
   19244:	add	sp, sp, #36	; 0x24
   19248:	pop	{r4, r5, r6, r7, pc}
   1924c:	bl	11664 <abort@plt>
   19250:	ldr	r1, [pc, #620]	; 194c4 <close_stdout@@Base+0x31b8>
   19254:	mov	r2, #5
   19258:	mov	r0, #0
   1925c:	add	r1, pc, r1
   19260:	bl	113dc <dcgettext@plt>
   19264:	ldr	r3, [r4]
   19268:	mov	r1, #1
   1926c:	mov	r2, r0
   19270:	mov	r0, r5
   19274:	add	sp, sp, #36	; 0x24
   19278:	pop	{r4, r5, r6, r7, lr}
   1927c:	b	115b0 <__fprintf_chk@plt>
   19280:	ldr	r1, [pc, #576]	; 194c8 <close_stdout@@Base+0x31bc>
   19284:	mov	r2, #5
   19288:	mov	r0, #0
   1928c:	add	r1, pc, r1
   19290:	bl	113dc <dcgettext@plt>
   19294:	ldm	r4, {r3, ip}
   19298:	mov	r1, #1
   1929c:	str	ip, [sp, #56]	; 0x38
   192a0:	mov	r2, r0
   192a4:	mov	r0, r5
   192a8:	add	sp, sp, #36	; 0x24
   192ac:	pop	{r4, r5, r6, r7, lr}
   192b0:	b	115b0 <__fprintf_chk@plt>
   192b4:	ldr	r1, [pc, #528]	; 194cc <close_stdout@@Base+0x31c0>
   192b8:	mov	r2, #5
   192bc:	mov	r0, #0
   192c0:	add	r1, pc, r1
   192c4:	bl	113dc <dcgettext@plt>
   192c8:	ldm	r4, {r3, ip}
   192cc:	mov	r1, #1
   192d0:	str	ip, [sp, #56]	; 0x38
   192d4:	ldr	ip, [r4, #8]
   192d8:	str	ip, [sp, #60]	; 0x3c
   192dc:	mov	r2, r0
   192e0:	mov	r0, r5
   192e4:	add	sp, sp, #36	; 0x24
   192e8:	pop	{r4, r5, r6, r7, lr}
   192ec:	b	115b0 <__fprintf_chk@plt>
   192f0:	ldr	r1, [pc, #472]	; 194d0 <close_stdout@@Base+0x31c4>
   192f4:	mov	r2, #5
   192f8:	mov	r0, #0
   192fc:	add	r1, pc, r1
   19300:	bl	113dc <dcgettext@plt>
   19304:	ldm	r4, {r3, ip}
   19308:	mov	r1, #1
   1930c:	str	ip, [sp]
   19310:	ldr	ip, [r4, #8]
   19314:	str	ip, [sp, #4]
   19318:	ldr	ip, [r4, #12]
   1931c:	str	ip, [sp, #8]
   19320:	mov	r2, r0
   19324:	mov	r0, r5
   19328:	bl	115b0 <__fprintf_chk@plt>
   1932c:	b	19244 <close_stdout@@Base+0x2f38>
   19330:	ldr	r1, [pc, #412]	; 194d4 <close_stdout@@Base+0x31c8>
   19334:	mov	r2, #5
   19338:	mov	r0, #0
   1933c:	add	r1, pc, r1
   19340:	bl	113dc <dcgettext@plt>
   19344:	ldm	r4, {r3, ip}
   19348:	mov	r1, #1
   1934c:	str	ip, [sp]
   19350:	ldr	ip, [r4, #8]
   19354:	str	ip, [sp, #4]
   19358:	ldr	ip, [r4, #12]
   1935c:	str	ip, [sp, #8]
   19360:	ldr	ip, [r4, #16]
   19364:	str	ip, [sp, #12]
   19368:	mov	r2, r0
   1936c:	mov	r0, r5
   19370:	bl	115b0 <__fprintf_chk@plt>
   19374:	b	19244 <close_stdout@@Base+0x2f38>
   19378:	ldr	r1, [pc, #344]	; 194d8 <close_stdout@@Base+0x31cc>
   1937c:	mov	r2, #5
   19380:	mov	r0, #0
   19384:	add	r1, pc, r1
   19388:	bl	113dc <dcgettext@plt>
   1938c:	ldm	r4, {r3, ip}
   19390:	mov	r1, #1
   19394:	str	ip, [sp]
   19398:	ldr	ip, [r4, #8]
   1939c:	str	ip, [sp, #4]
   193a0:	ldr	ip, [r4, #12]
   193a4:	str	ip, [sp, #8]
   193a8:	ldr	ip, [r4, #16]
   193ac:	str	ip, [sp, #12]
   193b0:	ldr	ip, [r4, #20]
   193b4:	str	ip, [sp, #16]
   193b8:	mov	r2, r0
   193bc:	mov	r0, r5
   193c0:	bl	115b0 <__fprintf_chk@plt>
   193c4:	b	19244 <close_stdout@@Base+0x2f38>
   193c8:	ldr	r1, [pc, #268]	; 194dc <close_stdout@@Base+0x31d0>
   193cc:	mov	r2, #5
   193d0:	mov	r0, #0
   193d4:	add	r1, pc, r1
   193d8:	bl	113dc <dcgettext@plt>
   193dc:	ldm	r4, {r3, ip}
   193e0:	mov	r1, #1
   193e4:	str	ip, [sp]
   193e8:	ldr	ip, [r4, #8]
   193ec:	str	ip, [sp, #4]
   193f0:	ldr	ip, [r4, #12]
   193f4:	str	ip, [sp, #8]
   193f8:	ldr	ip, [r4, #16]
   193fc:	str	ip, [sp, #12]
   19400:	ldr	ip, [r4, #20]
   19404:	str	ip, [sp, #16]
   19408:	ldr	ip, [r4, #24]
   1940c:	str	ip, [sp, #20]
   19410:	mov	r2, r0
   19414:	mov	r0, r5
   19418:	bl	115b0 <__fprintf_chk@plt>
   1941c:	b	19244 <close_stdout@@Base+0x2f38>
   19420:	ldr	r1, [pc, #184]	; 194e0 <close_stdout@@Base+0x31d4>
   19424:	mov	r2, #5
   19428:	mov	r0, #0
   1942c:	add	r1, pc, r1
   19430:	bl	113dc <dcgettext@plt>
   19434:	ldm	r4, {r3, ip}
   19438:	mov	r1, #1
   1943c:	str	ip, [sp]
   19440:	ldr	ip, [r4, #8]
   19444:	str	ip, [sp, #4]
   19448:	ldr	ip, [r4, #12]
   1944c:	str	ip, [sp, #8]
   19450:	ldr	ip, [r4, #16]
   19454:	str	ip, [sp, #12]
   19458:	ldr	ip, [r4, #20]
   1945c:	str	ip, [sp, #16]
   19460:	ldr	ip, [r4, #24]
   19464:	str	ip, [sp, #20]
   19468:	ldr	ip, [r4, #28]
   1946c:	str	ip, [sp, #24]
   19470:	mov	r2, r0
   19474:	mov	r0, r5
   19478:	bl	115b0 <__fprintf_chk@plt>
   1947c:	b	19244 <close_stdout@@Base+0x2f38>
   19480:	str	r3, [sp]
   19484:	mov	r3, r2
   19488:	ldr	r2, [pc, #84]	; 194e4 <close_stdout@@Base+0x31d8>
   1948c:	mov	r1, #1
   19490:	add	r2, pc, r2
   19494:	bl	115b0 <__fprintf_chk@plt>
   19498:	b	1915c <close_stdout@@Base+0x2e50>
   1949c:	ldr	r1, [pc, #68]	; 194e8 <close_stdout@@Base+0x31dc>
   194a0:	mov	r0, #0
   194a4:	add	r1, pc, r1
   194a8:	b	191ec <close_stdout@@Base+0x2ee0>
   194ac:	andeq	r4, r1, r8, asr #29
   194b0:	andeq	r3, r0, r0, asr #31
   194b4:	andeq	r3, r0, r0, asr #31
   194b8:	andeq	r0, r0, r0, ror r1
   194bc:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   194c0:	andeq	r4, r0, ip, lsl r1
   194c4:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   194c8:	andeq	r3, r0, ip, ror pc
   194cc:	andeq	r3, r0, r0, ror #30
   194d0:	andeq	r3, r0, r0, asr #30
   194d4:	andeq	r3, r0, r0, lsr #30
   194d8:	strdeq	r3, [r0], -ip
   194dc:	ldrdeq	r3, [r0], -r4
   194e0:	andeq	r3, r0, r8, lsr #29
   194e4:	muleq	r0, r0, ip
   194e8:	muleq	r0, r4, lr
   194ec:	push	{r4, r5, lr}
   194f0:	sub	sp, sp, #12
   194f4:	ldr	r5, [sp, #24]
   194f8:	ldr	ip, [r5]
   194fc:	cmp	ip, #0
   19500:	beq	1951c <close_stdout@@Base+0x3210>
   19504:	mov	lr, r5
   19508:	mov	ip, #0
   1950c:	ldr	r4, [lr, #4]!
   19510:	add	ip, ip, #1
   19514:	cmp	r4, #0
   19518:	bne	1950c <close_stdout@@Base+0x3200>
   1951c:	stm	sp, {r5, ip}
   19520:	bl	19118 <close_stdout@@Base+0x2e0c>
   19524:	add	sp, sp, #12
   19528:	pop	{r4, r5, pc}
   1952c:	push	{r4, r5, r6, r7, lr}
   19530:	sub	sp, sp, #60	; 0x3c
   19534:	ldr	r4, [pc, #100]	; 195a0 <close_stdout@@Base+0x3294>
   19538:	mov	ip, #0
   1953c:	ldr	r5, [pc, #96]	; 195a4 <close_stdout@@Base+0x3298>
   19540:	mov	lr, ip
   19544:	add	r4, pc, r4
   19548:	ldr	r6, [sp, #80]	; 0x50
   1954c:	ldr	r7, [r4, r5]
   19550:	add	r5, sp, #12
   19554:	ldr	r4, [r7]
   19558:	str	r4, [sp, #52]	; 0x34
   1955c:	ldr	r4, [r6, ip]
   19560:	cmp	r4, #0
   19564:	str	r4, [r5, ip]
   19568:	beq	1957c <close_stdout@@Base+0x3270>
   1956c:	add	lr, lr, #1
   19570:	add	ip, ip, #4
   19574:	cmp	lr, #10
   19578:	bne	1955c <close_stdout@@Base+0x3250>
   1957c:	stm	sp, {r5, lr}
   19580:	bl	19118 <close_stdout@@Base+0x2e0c>
   19584:	ldr	r2, [sp, #52]	; 0x34
   19588:	ldr	r3, [r7]
   1958c:	cmp	r2, r3
   19590:	bne	1959c <close_stdout@@Base+0x3290>
   19594:	add	sp, sp, #60	; 0x3c
   19598:	pop	{r4, r5, r6, r7, pc}
   1959c:	bl	113e8 <__stack_chk_fail@plt>
   195a0:			; <UNDEFINED> instruction: 0x00014ab4
   195a4:	andeq	r0, r0, r0, asr #2
   195a8:	push	{r3}		; (str r3, [sp, #-4]!)
   195ac:	push	{r4, lr}
   195b0:	sub	sp, sp, #20
   195b4:	ldr	lr, [pc, #72]	; 19604 <close_stdout@@Base+0x32f8>
   195b8:	add	ip, sp, #32
   195bc:	ldr	r4, [pc, #68]	; 19608 <close_stdout@@Base+0x32fc>
   195c0:	add	lr, pc, lr
   195c4:	ldr	r3, [sp, #28]
   195c8:	ldr	r4, [lr, r4]
   195cc:	str	ip, [sp]
   195d0:	str	ip, [sp, #8]
   195d4:	ldr	ip, [r4]
   195d8:	str	ip, [sp, #12]
   195dc:	bl	1952c <close_stdout@@Base+0x3220>
   195e0:	ldr	r2, [sp, #12]
   195e4:	ldr	r3, [r4]
   195e8:	cmp	r2, r3
   195ec:	bne	19600 <close_stdout@@Base+0x32f4>
   195f0:	add	sp, sp, #20
   195f4:	pop	{r4, lr}
   195f8:	add	sp, sp, #4
   195fc:	bx	lr
   19600:	bl	113e8 <__stack_chk_fail@plt>
   19604:	andeq	r4, r1, r8, lsr sl
   19608:	andeq	r0, r0, r0, asr #2
   1960c:	ldr	r1, [pc, #132]	; 19698 <close_stdout@@Base+0x338c>
   19610:	mov	r2, #5
   19614:	push	{r4, lr}
   19618:	add	r1, pc, r1
   1961c:	mov	r0, #0
   19620:	ldr	r4, [pc, #116]	; 1969c <close_stdout@@Base+0x3390>
   19624:	bl	113dc <dcgettext@plt>
   19628:	ldr	r2, [pc, #112]	; 196a0 <close_stdout@@Base+0x3394>
   1962c:	add	r4, pc, r4
   19630:	add	r2, pc, r2
   19634:	mov	r1, r0
   19638:	mov	r0, #1
   1963c:	bl	11598 <__printf_chk@plt>
   19640:	ldr	r1, [pc, #92]	; 196a4 <close_stdout@@Base+0x3398>
   19644:	mov	r2, #5
   19648:	mov	r0, #0
   1964c:	add	r1, pc, r1
   19650:	bl	113dc <dcgettext@plt>
   19654:	ldr	r2, [pc, #76]	; 196a8 <close_stdout@@Base+0x339c>
   19658:	ldr	r3, [pc, #76]	; 196ac <close_stdout@@Base+0x33a0>
   1965c:	add	r2, pc, r2
   19660:	add	r3, pc, r3
   19664:	mov	r1, r0
   19668:	mov	r0, #1
   1966c:	bl	11598 <__printf_chk@plt>
   19670:	ldr	r1, [pc, #56]	; 196b0 <close_stdout@@Base+0x33a4>
   19674:	mov	r0, #0
   19678:	mov	r2, #5
   1967c:	add	r1, pc, r1
   19680:	bl	113dc <dcgettext@plt>
   19684:	ldr	r3, [pc, #40]	; 196b4 <close_stdout@@Base+0x33a8>
   19688:	ldr	r3, [r4, r3]
   1968c:	pop	{r4, lr}
   19690:	ldr	r1, [r3]
   19694:	b	11328 <fputs_unlocked@plt>
   19698:	andeq	r3, r0, ip, asr sp
   1969c:	andeq	r4, r1, ip, asr #19
   196a0:	andeq	r3, r0, ip, asr sp
   196a4:	andeq	r3, r0, r8, asr sp
   196a8:	andeq	r3, r0, ip, lsr r3
   196ac:	andeq	r3, r0, r8, asr #6
   196b0:	andeq	r3, r0, ip, lsr sp
   196b4:	andeq	r0, r0, r0, ror #2
   196b8:	push	{r4, lr}
   196bc:	mov	r4, r0
   196c0:	bl	114a8 <malloc@plt>
   196c4:	rsbs	r3, r0, #1
   196c8:	movcc	r3, #0
   196cc:	cmp	r4, #0
   196d0:	moveq	r3, #0
   196d4:	cmp	r3, #0
   196d8:	popeq	{r4, pc}
   196dc:	bl	198cc <close_stdout@@Base+0x35c0>
   196e0:	push	{r3, r4, r5, lr}
   196e4:	mov	r4, r0
   196e8:	mvn	r0, #0
   196ec:	mov	r5, r1
   196f0:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   196f4:	cmp	r0, r4
   196f8:	bcc	19708 <close_stdout@@Base+0x33fc>
   196fc:	mul	r0, r4, r5
   19700:	pop	{r3, r4, r5, lr}
   19704:	b	196b8 <close_stdout@@Base+0x33ac>
   19708:	bl	198cc <close_stdout@@Base+0x35c0>
   1970c:	b	196b8 <close_stdout@@Base+0x33ac>
   19710:	rsbs	r3, r1, #1
   19714:	push	{r4, lr}
   19718:	movcc	r3, #0
   1971c:	cmp	r0, #0
   19720:	mov	r4, r1
   19724:	moveq	r3, #0
   19728:	cmp	r3, #0
   1972c:	bne	19750 <close_stdout@@Base+0x3444>
   19730:	bl	113f4 <realloc@plt>
   19734:	rsbs	r3, r0, #1
   19738:	movcc	r3, #0
   1973c:	cmp	r4, #0
   19740:	moveq	r3, #0
   19744:	cmp	r3, #0
   19748:	popeq	{r4, pc}
   1974c:	bl	198cc <close_stdout@@Base+0x35c0>
   19750:	bl	11370 <free@plt>
   19754:	mov	r0, #0
   19758:	pop	{r4, pc}
   1975c:	push	{r4, r5, r6, lr}
   19760:	mov	r5, r1
   19764:	mov	r6, r0
   19768:	mov	r1, r2
   1976c:	mvn	r0, #0
   19770:	mov	r4, r2
   19774:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   19778:	cmp	r0, r5
   1977c:	bcc	19790 <close_stdout@@Base+0x3484>
   19780:	mov	r0, r6
   19784:	mul	r1, r5, r4
   19788:	pop	{r4, r5, r6, lr}
   1978c:	b	19710 <close_stdout@@Base+0x3404>
   19790:	bl	198cc <close_stdout@@Base+0x35c0>
   19794:	push	{r3, r4, r5, r6, r7, lr}
   19798:	subs	r7, r0, #0
   1979c:	mov	r5, r1
   197a0:	mov	r6, r2
   197a4:	ldr	r4, [r1]
   197a8:	beq	197e0 <close_stdout@@Base+0x34d4>
   197ac:	movw	r0, #43690	; 0xaaaa
   197b0:	mov	r1, r2
   197b4:	bfi	r0, r0, #16, #16
   197b8:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   197bc:	cmp	r4, r0
   197c0:	addcc	r3, r4, #1
   197c4:	addcc	r4, r4, r3, lsr #1
   197c8:	bcs	19804 <close_stdout@@Base+0x34f8>
   197cc:	str	r4, [r5]
   197d0:	mov	r0, r7
   197d4:	mul	r1, r6, r4
   197d8:	pop	{r3, r4, r5, r6, r7, lr}
   197dc:	b	19710 <close_stdout@@Base+0x3404>
   197e0:	cmp	r4, #0
   197e4:	bne	197cc <close_stdout@@Base+0x34c0>
   197e8:	mov	r0, #64	; 0x40
   197ec:	mov	r1, r2
   197f0:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   197f4:	cmp	r0, #0
   197f8:	movne	r4, r0
   197fc:	addeq	r4, r0, #1
   19800:	b	197cc <close_stdout@@Base+0x34c0>
   19804:	bl	198cc <close_stdout@@Base+0x35c0>
   19808:	cmp	r0, #0
   1980c:	push	{r3, lr}
   19810:	ldr	r3, [r1]
   19814:	beq	19840 <close_stdout@@Base+0x3534>
   19818:	movw	r2, #43689	; 0xaaa9
   1981c:	movt	r2, #43690	; 0xaaaa
   19820:	cmp	r3, r2
   19824:	addls	r2, r3, #1
   19828:	addls	r3, r3, r2, lsr #1
   1982c:	bhi	19858 <close_stdout@@Base+0x354c>
   19830:	str	r3, [r1]
   19834:	mov	r1, r3
   19838:	pop	{r3, lr}
   1983c:	b	19710 <close_stdout@@Base+0x3404>
   19840:	cmp	r3, #0
   19844:	moveq	r3, #64	; 0x40
   19848:	str	r3, [r1]
   1984c:	mov	r1, r3
   19850:	pop	{r3, lr}
   19854:	b	19710 <close_stdout@@Base+0x3404>
   19858:	bl	198cc <close_stdout@@Base+0x35c0>
   1985c:	push	{r4, lr}
   19860:	mov	r4, r0
   19864:	bl	196b8 <close_stdout@@Base+0x33ac>
   19868:	mov	r2, r4
   1986c:	mov	r1, #0
   19870:	pop	{r4, lr}
   19874:	b	11580 <memset@plt>
   19878:	push	{r3, lr}
   1987c:	bl	1131c <calloc@plt>
   19880:	cmp	r0, #0
   19884:	popne	{r3, pc}
   19888:	bl	198cc <close_stdout@@Base+0x35c0>
   1988c:	push	{r3, r4, r5, lr}
   19890:	mov	r4, r1
   19894:	mov	r5, r0
   19898:	mov	r0, r1
   1989c:	bl	196b8 <close_stdout@@Base+0x33ac>
   198a0:	mov	r1, r5
   198a4:	mov	r2, r4
   198a8:	pop	{r3, r4, r5, lr}
   198ac:	b	11394 <memcpy@plt>
   198b0:	push	{r4, lr}
   198b4:	mov	r4, r0
   198b8:	bl	11514 <strlen@plt>
   198bc:	add	r1, r0, #1
   198c0:	mov	r0, r4
   198c4:	pop	{r4, lr}
   198c8:	b	1988c <close_stdout@@Base+0x3580>
   198cc:	ldr	r3, [pc, #64]	; 19914 <close_stdout@@Base+0x3608>
   198d0:	mov	r2, #5
   198d4:	ldr	ip, [pc, #60]	; 19918 <close_stdout@@Base+0x360c>
   198d8:	mov	r0, #0
   198dc:	add	r3, pc, r3
   198e0:	ldr	r1, [pc, #52]	; 1991c <close_stdout@@Base+0x3610>
   198e4:	push	{r4, lr}
   198e8:	add	r1, pc, r1
   198ec:	ldr	r3, [r3, ip]
   198f0:	ldr	r4, [r3]
   198f4:	bl	113dc <dcgettext@plt>
   198f8:	ldr	r2, [pc, #32]	; 19920 <close_stdout@@Base+0x3614>
   198fc:	mov	r1, #0
   19900:	add	r2, pc, r2
   19904:	mov	r3, r0
   19908:	mov	r0, r4
   1990c:	bl	11484 <error@plt>
   19910:	bl	11664 <abort@plt>
   19914:	andeq	r4, r1, ip, lsl r7
   19918:	andeq	r0, r0, r4, ror #2
   1991c:	andeq	r3, r0, r0, asr #22
   19920:	ldrdeq	r3, [r0], -ip
   19924:	ldr	r3, [pc, #124]	; 199a8 <close_stdout@@Base+0x369c>
   19928:	ldr	r2, [pc, #124]	; 199ac <close_stdout@@Base+0x36a0>
   1992c:	add	r3, pc, r3
   19930:	push	{r4, r5, r6, r7, lr}
   19934:	sub	sp, sp, #20
   19938:	ldr	r7, [r3, r2]
   1993c:	add	r5, sp, #4
   19940:	mov	r6, #0
   19944:	mov	r0, r5
   19948:	ldr	r3, [r7]
   1994c:	str	r3, [sp, #12]
   19950:	bl	1a908 <close_stdout@@Base+0x45fc>
   19954:	bl	11568 <__errno_location@plt>
   19958:	mov	r4, r0
   1995c:	b	1996c <close_stdout@@Base+0x3660>
   19960:	ldr	r3, [r4]
   19964:	bics	r2, r3, #4
   19968:	bne	1999c <close_stdout@@Base+0x3690>
   1996c:	str	r6, [r4]
   19970:	mov	r0, r5
   19974:	mov	r1, #0
   19978:	bl	1137c <nanosleep@plt>
   1997c:	cmp	r0, #0
   19980:	bne	19960 <close_stdout@@Base+0x3654>
   19984:	ldr	r2, [sp, #12]
   19988:	ldr	r3, [r7]
   1998c:	cmp	r2, r3
   19990:	bne	199a4 <close_stdout@@Base+0x3698>
   19994:	add	sp, sp, #20
   19998:	pop	{r4, r5, r6, r7, pc}
   1999c:	mvn	r0, #0
   199a0:	b	19984 <close_stdout@@Base+0x3678>
   199a4:	bl	113e8 <__stack_chk_fail@plt>
   199a8:	andeq	r4, r1, ip, asr #13
   199ac:	andeq	r0, r0, r0, asr #2
   199b0:	ldr	ip, [pc, #192]	; 19a78 <close_stdout@@Base+0x376c>
   199b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   199b8:	mov	r6, r0
   199bc:	ldr	r0, [pc, #184]	; 19a7c <close_stdout@@Base+0x3770>
   199c0:	add	ip, pc, ip
   199c4:	mov	sl, r3
   199c8:	sub	sp, sp, #8
   199cc:	mov	r9, r2
   199d0:	mov	r4, r1
   199d4:	ldr	r5, [ip, r0]
   199d8:	mov	r1, ip
   199dc:	mov	r8, #0
   199e0:	ldr	r3, [r5]
   199e4:	str	r3, [sp, #4]
   199e8:	bl	11568 <__errno_location@plt>
   199ec:	mov	r1, sp
   199f0:	mov	r7, r0
   199f4:	mov	r0, r6
   199f8:	str	r8, [r7]
   199fc:	blx	sl
   19a00:	ldr	r3, [sp]
   19a04:	cmp	r3, r6
   19a08:	beq	19a58 <close_stdout@@Base+0x374c>
   19a0c:	cmp	r4, r8
   19a10:	beq	19a60 <close_stdout@@Base+0x3754>
   19a14:	vcmp.f64	d0, #0.0
   19a18:	vmrs	APSR_nzcv, fpscr
   19a1c:	moveq	r0, #1
   19a20:	bne	19a48 <close_stdout@@Base+0x373c>
   19a24:	cmp	r4, #0
   19a28:	strne	r3, [r4]
   19a2c:	ldr	r2, [sp, #4]
   19a30:	vstr	d0, [r9]
   19a34:	ldr	r3, [r5]
   19a38:	cmp	r2, r3
   19a3c:	bne	19a74 <close_stdout@@Base+0x3768>
   19a40:	add	sp, sp, #8
   19a44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a48:	ldr	r0, [r7]
   19a4c:	subs	r0, r0, #34	; 0x22
   19a50:	movne	r0, #1
   19a54:	b	19a24 <close_stdout@@Base+0x3718>
   19a58:	mov	r0, r8
   19a5c:	b	19a24 <close_stdout@@Base+0x3718>
   19a60:	ldrb	r2, [r3]
   19a64:	cmp	r2, r8
   19a68:	movne	r0, r4
   19a6c:	bne	19a2c <close_stdout@@Base+0x3720>
   19a70:	b	19a14 <close_stdout@@Base+0x3708>
   19a74:	bl	113e8 <__stack_chk_fail@plt>
   19a78:	andeq	r4, r1, r8, lsr r6
   19a7c:	andeq	r0, r0, r0, asr #2
   19a80:	ldr	ip, [pc, #1308]	; 19fa4 <close_stdout@@Base+0x3c98>
   19a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a88:	mov	sl, r2
   19a8c:	ldr	r2, [pc, #1300]	; 19fa8 <close_stdout@@Base+0x3c9c>
   19a90:	add	ip, pc, ip
   19a94:	mov	r9, r3
   19a98:	sub	sp, sp, #20
   19a9c:	mov	r3, ip
   19aa0:	cmp	sl, #36	; 0x24
   19aa4:	ldr	r6, [ip, r2]
   19aa8:	mov	r5, r0
   19aac:	mov	r7, r1
   19ab0:	ldr	r8, [sp, #56]	; 0x38
   19ab4:	ldr	r3, [r6]
   19ab8:	str	r3, [sp, #12]
   19abc:	bhi	19f84 <close_stdout@@Base+0x3c78>
   19ac0:	cmp	r1, #0
   19ac4:	addeq	r7, sp, #8
   19ac8:	bl	114f0 <__ctype_b_loc@plt>
   19acc:	ldrb	ip, [r5]
   19ad0:	mov	r2, r5
   19ad4:	ldr	r1, [r0]
   19ad8:	b	19ae0 <close_stdout@@Base+0x37d4>
   19adc:	ldrb	ip, [r2, #1]!
   19ae0:	lsl	r3, ip, #1
   19ae4:	ldrh	r4, [r1, r3]
   19ae8:	and	r4, r4, #8192	; 0x2000
   19aec:	uxth	r4, r4
   19af0:	cmp	r4, #0
   19af4:	bne	19adc <close_stdout@@Base+0x37d0>
   19af8:	cmp	ip, #45	; 0x2d
   19afc:	bne	19b1c <close_stdout@@Base+0x3810>
   19b00:	mov	r0, #4
   19b04:	ldr	r2, [sp, #12]
   19b08:	ldr	r3, [r6]
   19b0c:	cmp	r2, r3
   19b10:	bne	19f80 <close_stdout@@Base+0x3c74>
   19b14:	add	sp, sp, #20
   19b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b1c:	bl	11568 <__errno_location@plt>
   19b20:	mov	r2, sl
   19b24:	mov	r1, r7
   19b28:	str	r4, [r0]
   19b2c:	mov	fp, r0
   19b30:	mov	r0, r5
   19b34:	bl	11508 <strtoul@plt>
   19b38:	ldr	r3, [r7]
   19b3c:	cmp	r3, r5
   19b40:	mov	sl, r0
   19b44:	beq	19cd4 <close_stdout@@Base+0x39c8>
   19b48:	ldr	r0, [fp]
   19b4c:	cmp	r0, #0
   19b50:	bne	19b80 <close_stdout@@Base+0x3874>
   19b54:	mov	r4, r0
   19b58:	cmp	r8, #0
   19b5c:	streq	sl, [r9]
   19b60:	moveq	r0, r4
   19b64:	beq	19b04 <close_stdout@@Base+0x37f8>
   19b68:	ldrb	r5, [r3]
   19b6c:	cmp	r5, #0
   19b70:	bne	19b90 <close_stdout@@Base+0x3884>
   19b74:	mov	r0, r4
   19b78:	str	sl, [r9]
   19b7c:	b	19b04 <close_stdout@@Base+0x37f8>
   19b80:	cmp	r0, #34	; 0x22
   19b84:	moveq	r4, #1
   19b88:	bne	19b00 <close_stdout@@Base+0x37f4>
   19b8c:	b	19b58 <close_stdout@@Base+0x384c>
   19b90:	mov	r0, r8
   19b94:	mov	r1, r5
   19b98:	str	r3, [sp, #4]
   19b9c:	bl	1152c <strchr@plt>
   19ba0:	ldr	r3, [sp, #4]
   19ba4:	cmp	r0, #0
   19ba8:	beq	19d0c <close_stdout@@Base+0x3a00>
   19bac:	mov	r0, r8
   19bb0:	mov	r1, #48	; 0x30
   19bb4:	str	r3, [sp, #4]
   19bb8:	bl	1152c <strchr@plt>
   19bbc:	ldr	r3, [sp, #4]
   19bc0:	cmp	r0, #0
   19bc4:	beq	19be4 <close_stdout@@Base+0x38d8>
   19bc8:	ldrb	r2, [r3, #1]
   19bcc:	cmp	r2, #68	; 0x44
   19bd0:	beq	19f68 <close_stdout@@Base+0x3c5c>
   19bd4:	cmp	r2, #105	; 0x69
   19bd8:	beq	19f50 <close_stdout@@Base+0x3c44>
   19bdc:	cmp	r2, #66	; 0x42
   19be0:	beq	19f68 <close_stdout@@Base+0x3c5c>
   19be4:	mov	r8, #1
   19be8:	mov	fp, #1024	; 0x400
   19bec:	sub	r5, r5, #66	; 0x42
   19bf0:	cmp	r5, #53	; 0x35
   19bf4:	addls	pc, pc, r5, lsl #2
   19bf8:	b	19d0c <close_stdout@@Base+0x3a00>
   19bfc:	b	19efc <close_stdout@@Base+0x3bf0>
   19c00:	b	19d0c <close_stdout@@Base+0x3a00>
   19c04:	b	19d0c <close_stdout@@Base+0x3a00>
   19c08:	b	19ebc <close_stdout@@Base+0x3bb0>
   19c0c:	b	19d0c <close_stdout@@Base+0x3a00>
   19c10:	b	19f10 <close_stdout@@Base+0x3c04>
   19c14:	b	19d0c <close_stdout@@Base+0x3a00>
   19c18:	b	19d0c <close_stdout@@Base+0x3a00>
   19c1c:	b	19d0c <close_stdout@@Base+0x3a00>
   19c20:	b	19e9c <close_stdout@@Base+0x3b90>
   19c24:	b	19d0c <close_stdout@@Base+0x3a00>
   19c28:	b	19e68 <close_stdout@@Base+0x3b5c>
   19c2c:	b	19d0c <close_stdout@@Base+0x3a00>
   19c30:	b	19d0c <close_stdout@@Base+0x3a00>
   19c34:	b	19e28 <close_stdout@@Base+0x3b1c>
   19c38:	b	19d0c <close_stdout@@Base+0x3a00>
   19c3c:	b	19d0c <close_stdout@@Base+0x3a00>
   19c40:	b	19d0c <close_stdout@@Base+0x3a00>
   19c44:	b	19de8 <close_stdout@@Base+0x3adc>
   19c48:	b	19d0c <close_stdout@@Base+0x3a00>
   19c4c:	b	19d0c <close_stdout@@Base+0x3a00>
   19c50:	b	19d0c <close_stdout@@Base+0x3a00>
   19c54:	b	19d0c <close_stdout@@Base+0x3a00>
   19c58:	b	19da8 <close_stdout@@Base+0x3a9c>
   19c5c:	b	19d68 <close_stdout@@Base+0x3a5c>
   19c60:	b	19d0c <close_stdout@@Base+0x3a00>
   19c64:	b	19d0c <close_stdout@@Base+0x3a00>
   19c68:	b	19d0c <close_stdout@@Base+0x3a00>
   19c6c:	b	19d0c <close_stdout@@Base+0x3a00>
   19c70:	b	19d0c <close_stdout@@Base+0x3a00>
   19c74:	b	19d0c <close_stdout@@Base+0x3a00>
   19c78:	b	19d0c <close_stdout@@Base+0x3a00>
   19c7c:	b	19d54 <close_stdout@@Base+0x3a48>
   19c80:	b	19d18 <close_stdout@@Base+0x3a0c>
   19c84:	b	19d0c <close_stdout@@Base+0x3a00>
   19c88:	b	19d0c <close_stdout@@Base+0x3a00>
   19c8c:	b	19d0c <close_stdout@@Base+0x3a00>
   19c90:	b	19f10 <close_stdout@@Base+0x3c04>
   19c94:	b	19d0c <close_stdout@@Base+0x3a00>
   19c98:	b	19d0c <close_stdout@@Base+0x3a00>
   19c9c:	b	19d0c <close_stdout@@Base+0x3a00>
   19ca0:	b	19e9c <close_stdout@@Base+0x3b90>
   19ca4:	b	19d0c <close_stdout@@Base+0x3a00>
   19ca8:	b	19e68 <close_stdout@@Base+0x3b5c>
   19cac:	b	19d0c <close_stdout@@Base+0x3a00>
   19cb0:	b	19d0c <close_stdout@@Base+0x3a00>
   19cb4:	b	19d0c <close_stdout@@Base+0x3a00>
   19cb8:	b	19d0c <close_stdout@@Base+0x3a00>
   19cbc:	b	19d0c <close_stdout@@Base+0x3a00>
   19cc0:	b	19d0c <close_stdout@@Base+0x3a00>
   19cc4:	b	19de8 <close_stdout@@Base+0x3adc>
   19cc8:	b	19d0c <close_stdout@@Base+0x3a00>
   19ccc:	b	19d0c <close_stdout@@Base+0x3a00>
   19cd0:	b	19d38 <close_stdout@@Base+0x3a2c>
   19cd4:	cmp	r8, #0
   19cd8:	beq	19b00 <close_stdout@@Base+0x37f4>
   19cdc:	ldrb	r5, [r5]
   19ce0:	cmp	r5, #0
   19ce4:	beq	19b00 <close_stdout@@Base+0x37f4>
   19ce8:	mov	r0, r8
   19cec:	mov	r1, r5
   19cf0:	str	r3, [sp, #4]
   19cf4:	bl	1152c <strchr@plt>
   19cf8:	ldr	r3, [sp, #4]
   19cfc:	cmp	r0, #0
   19d00:	movne	sl, #1
   19d04:	bne	19bac <close_stdout@@Base+0x38a0>
   19d08:	b	19b00 <close_stdout@@Base+0x37f4>
   19d0c:	str	sl, [r9]
   19d10:	orr	r0, r4, #2
   19d14:	b	19b04 <close_stdout@@Base+0x37f8>
   19d18:	mov	r2, #0
   19d1c:	add	r1, r3, r8
   19d20:	str	r1, [r7]
   19d24:	ldrb	r3, [r3, r8]
   19d28:	orr	r4, r4, r2
   19d2c:	cmp	r3, #0
   19d30:	orrne	r4, r4, #2
   19d34:	b	19b74 <close_stdout@@Base+0x3868>
   19d38:	cmn	sl, #-2147483647	; 0x80000001
   19d3c:	lslls	sl, sl, #1
   19d40:	movls	r2, #0
   19d44:	bls	19d1c <close_stdout@@Base+0x3a10>
   19d48:	mvn	sl, #0
   19d4c:	mov	r2, #1
   19d50:	b	19d1c <close_stdout@@Base+0x3a10>
   19d54:	cmp	sl, #8388608	; 0x800000
   19d58:	lslcc	sl, sl, #9
   19d5c:	movcc	r2, #0
   19d60:	bcc	19d1c <close_stdout@@Base+0x3a10>
   19d64:	b	19d48 <close_stdout@@Base+0x3a3c>
   19d68:	mov	r1, fp
   19d6c:	mvn	r0, #0
   19d70:	str	r3, [sp, #4]
   19d74:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   19d78:	ldr	r3, [sp, #4]
   19d7c:	mov	r1, #7
   19d80:	mov	r2, #0
   19d84:	cmp	r0, sl
   19d88:	movcs	ip, #0
   19d8c:	movcc	ip, #1
   19d90:	mulcs	sl, fp, sl
   19d94:	mvncc	sl, #0
   19d98:	subs	r1, r1, #1
   19d9c:	orr	r2, r2, ip
   19da0:	bne	19d84 <close_stdout@@Base+0x3a78>
   19da4:	b	19d1c <close_stdout@@Base+0x3a10>
   19da8:	mov	r1, fp
   19dac:	mvn	r0, #0
   19db0:	str	r3, [sp, #4]
   19db4:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   19db8:	ldr	r3, [sp, #4]
   19dbc:	mov	r1, #8
   19dc0:	mov	r2, #0
   19dc4:	cmp	r0, sl
   19dc8:	movcs	ip, #0
   19dcc:	movcc	ip, #1
   19dd0:	mulcs	sl, fp, sl
   19dd4:	mvncc	sl, #0
   19dd8:	subs	r1, r1, #1
   19ddc:	orr	r2, r2, ip
   19de0:	bne	19dc4 <close_stdout@@Base+0x3ab8>
   19de4:	b	19d1c <close_stdout@@Base+0x3a10>
   19de8:	mov	r1, fp
   19dec:	mvn	r0, #0
   19df0:	str	r3, [sp, #4]
   19df4:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   19df8:	ldr	r3, [sp, #4]
   19dfc:	mov	r1, #4
   19e00:	mov	r2, #0
   19e04:	cmp	r0, sl
   19e08:	movcs	ip, #0
   19e0c:	movcc	ip, #1
   19e10:	mulcs	sl, fp, sl
   19e14:	mvncc	sl, #0
   19e18:	subs	r1, r1, #1
   19e1c:	orr	r2, r2, ip
   19e20:	bne	19e04 <close_stdout@@Base+0x3af8>
   19e24:	b	19d1c <close_stdout@@Base+0x3a10>
   19e28:	mov	r1, fp
   19e2c:	mvn	r0, #0
   19e30:	str	r3, [sp, #4]
   19e34:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   19e38:	ldr	r3, [sp, #4]
   19e3c:	mov	r1, #5
   19e40:	mov	r2, #0
   19e44:	cmp	r0, sl
   19e48:	movcs	ip, #0
   19e4c:	movcc	ip, #1
   19e50:	mulcs	sl, fp, sl
   19e54:	mvncc	sl, #0
   19e58:	subs	r1, r1, #1
   19e5c:	orr	r2, r2, ip
   19e60:	bne	19e44 <close_stdout@@Base+0x3b38>
   19e64:	b	19d1c <close_stdout@@Base+0x3a10>
   19e68:	mvn	r0, #0
   19e6c:	mov	r1, fp
   19e70:	str	r3, [sp, #4]
   19e74:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   19e78:	ldr	r3, [sp, #4]
   19e7c:	cmp	sl, r0
   19e80:	bhi	19f74 <close_stdout@@Base+0x3c68>
   19e84:	mul	sl, sl, fp
   19e88:	cmp	r0, sl
   19e8c:	bcc	19f74 <close_stdout@@Base+0x3c68>
   19e90:	mul	sl, fp, sl
   19e94:	mov	r2, #0
   19e98:	b	19d1c <close_stdout@@Base+0x3a10>
   19e9c:	mvn	r0, #0
   19ea0:	mov	r1, fp
   19ea4:	str	r3, [sp, #4]
   19ea8:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   19eac:	ldr	r3, [sp, #4]
   19eb0:	cmp	sl, r0
   19eb4:	bhi	19d48 <close_stdout@@Base+0x3a3c>
   19eb8:	b	19e90 <close_stdout@@Base+0x3b84>
   19ebc:	mov	r1, fp
   19ec0:	mvn	r0, #0
   19ec4:	str	r3, [sp, #4]
   19ec8:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   19ecc:	ldr	r3, [sp, #4]
   19ed0:	mov	r1, #6
   19ed4:	mov	r2, #0
   19ed8:	cmp	r0, sl
   19edc:	movcs	ip, #0
   19ee0:	movcc	ip, #1
   19ee4:	mulcs	sl, fp, sl
   19ee8:	mvncc	sl, #0
   19eec:	subs	r1, r1, #1
   19ef0:	orr	r2, r2, ip
   19ef4:	bne	19ed8 <close_stdout@@Base+0x3bcc>
   19ef8:	b	19d1c <close_stdout@@Base+0x3a10>
   19efc:	cmp	sl, #4194304	; 0x400000
   19f00:	lslcc	sl, sl, #10
   19f04:	movcc	r2, #0
   19f08:	bcc	19d1c <close_stdout@@Base+0x3a10>
   19f0c:	b	19d48 <close_stdout@@Base+0x3a3c>
   19f10:	mov	r1, fp
   19f14:	mvn	r0, #0
   19f18:	str	r3, [sp, #4]
   19f1c:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   19f20:	ldr	r3, [sp, #4]
   19f24:	mov	r1, #3
   19f28:	mov	r2, #0
   19f2c:	cmp	r0, sl
   19f30:	movcs	ip, #0
   19f34:	movcc	ip, #1
   19f38:	mulcs	sl, fp, sl
   19f3c:	mvncc	sl, #0
   19f40:	subs	r1, r1, #1
   19f44:	orr	r2, r2, ip
   19f48:	bne	19f2c <close_stdout@@Base+0x3c20>
   19f4c:	b	19d1c <close_stdout@@Base+0x3a10>
   19f50:	ldrb	r8, [r3, #2]
   19f54:	mov	fp, #1024	; 0x400
   19f58:	cmp	r8, #66	; 0x42
   19f5c:	moveq	r8, #3
   19f60:	movne	r8, #1
   19f64:	b	19bec <close_stdout@@Base+0x38e0>
   19f68:	mov	r8, #2
   19f6c:	mov	fp, #1000	; 0x3e8
   19f70:	b	19bec <close_stdout@@Base+0x38e0>
   19f74:	mov	r2, #1
   19f78:	mvn	sl, #0
   19f7c:	b	19d1c <close_stdout@@Base+0x3a10>
   19f80:	bl	113e8 <__stack_chk_fail@plt>
   19f84:	ldr	r0, [pc, #32]	; 19fac <close_stdout@@Base+0x3ca0>
   19f88:	mov	r2, #96	; 0x60
   19f8c:	ldr	r1, [pc, #28]	; 19fb0 <close_stdout@@Base+0x3ca4>
   19f90:	ldr	r3, [pc, #28]	; 19fb4 <close_stdout@@Base+0x3ca8>
   19f94:	add	r0, pc, r0
   19f98:	add	r1, pc, r1
   19f9c:	add	r3, pc, r3
   19fa0:	bl	11688 <__assert_fail@plt>
   19fa4:	andeq	r4, r1, r8, ror #10
   19fa8:	andeq	r0, r0, r0, asr #2
   19fac:			; <UNDEFINED> instruction: 0x000034b4
   19fb0:	ldrdeq	r3, [r0], -r8
   19fb4:	andeq	r3, r0, r0, lsr #9
   19fb8:	ldr	ip, [pc, #1852]	; 1a6fc <close_stdout@@Base+0x43f0>
   19fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fc0:	mov	fp, r2
   19fc4:	ldr	r2, [pc, #1844]	; 1a700 <close_stdout@@Base+0x43f4>
   19fc8:	add	ip, pc, ip
   19fcc:	mov	r9, r3
   19fd0:	sub	sp, sp, #36	; 0x24
   19fd4:	mov	r3, ip
   19fd8:	cmp	fp, #36	; 0x24
   19fdc:	ldr	sl, [ip, r2]
   19fe0:	mov	r5, r0
   19fe4:	mov	r8, r1
   19fe8:	ldr	r6, [sp, #72]	; 0x48
   19fec:	ldr	r3, [sl]
   19ff0:	str	r3, [sp, #28]
   19ff4:	bhi	1a6dc <close_stdout@@Base+0x43d0>
   19ff8:	cmp	r1, #0
   19ffc:	addeq	r8, sp, #24
   1a000:	bl	114f0 <__ctype_b_loc@plt>
   1a004:	ldrb	r3, [r5]
   1a008:	mov	r1, r5
   1a00c:	ldr	r0, [r0]
   1a010:	b	1a018 <close_stdout@@Base+0x3d0c>
   1a014:	ldrb	r3, [r1, #1]!
   1a018:	lsl	r2, r3, #1
   1a01c:	ldrh	r4, [r0, r2]
   1a020:	and	r4, r4, #8192	; 0x2000
   1a024:	uxth	r4, r4
   1a028:	cmp	r4, #0
   1a02c:	bne	1a014 <close_stdout@@Base+0x3d08>
   1a030:	cmp	r3, #45	; 0x2d
   1a034:	bne	1a054 <close_stdout@@Base+0x3d48>
   1a038:	mov	r0, #4
   1a03c:	ldr	r2, [sp, #28]
   1a040:	ldr	r3, [sl]
   1a044:	cmp	r2, r3
   1a048:	bne	1a6d8 <close_stdout@@Base+0x43cc>
   1a04c:	add	sp, sp, #36	; 0x24
   1a050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a054:	bl	11568 <__errno_location@plt>
   1a058:	mov	r2, fp
   1a05c:	mov	r1, r8
   1a060:	mov	r3, r4
   1a064:	str	r4, [r0]
   1a068:	mov	r7, r0
   1a06c:	mov	r0, r5
   1a070:	bl	113a0 <__strtoull_internal@plt>
   1a074:	ldr	fp, [r8]
   1a078:	cmp	fp, r5
   1a07c:	strd	r0, [sp]
   1a080:	beq	1a1fc <close_stdout@@Base+0x3ef0>
   1a084:	ldr	ip, [r7]
   1a088:	cmp	ip, #0
   1a08c:	bne	1a0b8 <close_stdout@@Base+0x3dac>
   1a090:	mov	r7, ip
   1a094:	cmp	r6, #0
   1a098:	beq	1a668 <close_stdout@@Base+0x435c>
   1a09c:	ldrb	r5, [fp]
   1a0a0:	cmp	r5, #0
   1a0a4:	bne	1a0c8 <close_stdout@@Base+0x3dbc>
   1a0a8:	ldrd	r2, [sp]
   1a0ac:	mov	r0, r7
   1a0b0:	strd	r2, [r9]
   1a0b4:	b	1a03c <close_stdout@@Base+0x3d30>
   1a0b8:	cmp	ip, #34	; 0x22
   1a0bc:	moveq	r7, #1
   1a0c0:	bne	1a038 <close_stdout@@Base+0x3d2c>
   1a0c4:	b	1a094 <close_stdout@@Base+0x3d88>
   1a0c8:	mov	r0, r6
   1a0cc:	mov	r1, r5
   1a0d0:	bl	1152c <strchr@plt>
   1a0d4:	cmp	r0, #0
   1a0d8:	beq	1a238 <close_stdout@@Base+0x3f2c>
   1a0dc:	mov	r0, r6
   1a0e0:	mov	r1, #48	; 0x30
   1a0e4:	bl	1152c <strchr@plt>
   1a0e8:	cmp	r0, #0
   1a0ec:	beq	1a10c <close_stdout@@Base+0x3e00>
   1a0f0:	ldrb	r3, [fp, #1]
   1a0f4:	cmp	r3, #68	; 0x44
   1a0f8:	beq	1a690 <close_stdout@@Base+0x4384>
   1a0fc:	cmp	r3, #105	; 0x69
   1a100:	beq	1a678 <close_stdout@@Base+0x436c>
   1a104:	cmp	r3, #66	; 0x42
   1a108:	beq	1a690 <close_stdout@@Base+0x4384>
   1a10c:	mov	r6, #1
   1a110:	mov	r4, #1024	; 0x400
   1a114:	sub	r5, r5, #66	; 0x42
   1a118:	cmp	r5, #53	; 0x35
   1a11c:	addls	pc, pc, r5, lsl #2
   1a120:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a124:	b	1a4e0 <close_stdout@@Base+0x41d4>
   1a128:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a12c:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a130:	b	1a474 <close_stdout@@Base+0x4168>
   1a134:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a138:	b	1a408 <close_stdout@@Base+0x40fc>
   1a13c:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a140:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a144:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a148:	b	1a3b0 <close_stdout@@Base+0x40a4>
   1a14c:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a150:	b	1a588 <close_stdout@@Base+0x427c>
   1a154:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a158:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a15c:	b	1a51c <close_stdout@@Base+0x4210>
   1a160:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a164:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a168:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a16c:	b	1a5fc <close_stdout@@Base+0x42f0>
   1a170:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a174:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a178:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a17c:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a180:	b	1a344 <close_stdout@@Base+0x4038>
   1a184:	b	1a2cc <close_stdout@@Base+0x3fc0>
   1a188:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a18c:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a190:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a194:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a198:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a19c:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1a0:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1a4:	b	1a290 <close_stdout@@Base+0x3f84>
   1a1a8:	b	1a248 <close_stdout@@Base+0x3f3c>
   1a1ac:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1b0:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1b4:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1b8:	b	1a408 <close_stdout@@Base+0x40fc>
   1a1bc:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1c0:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1c4:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1c8:	b	1a3b0 <close_stdout@@Base+0x40a4>
   1a1cc:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1d0:	b	1a588 <close_stdout@@Base+0x427c>
   1a1d4:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1d8:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1dc:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1e0:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1e4:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1e8:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1ec:	b	1a5fc <close_stdout@@Base+0x42f0>
   1a1f0:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1f4:	b	1a238 <close_stdout@@Base+0x3f2c>
   1a1f8:	b	1a268 <close_stdout@@Base+0x3f5c>
   1a1fc:	cmp	r6, #0
   1a200:	beq	1a038 <close_stdout@@Base+0x3d2c>
   1a204:	ldrb	r5, [r5]
   1a208:	cmp	r5, #0
   1a20c:	beq	1a038 <close_stdout@@Base+0x3d2c>
   1a210:	mov	r0, r6
   1a214:	mov	r1, r5
   1a218:	bl	1152c <strchr@plt>
   1a21c:	cmp	r0, #0
   1a220:	beq	1a038 <close_stdout@@Base+0x3d2c>
   1a224:	mov	r0, #1
   1a228:	mov	r1, #0
   1a22c:	mov	r7, r4
   1a230:	strd	r0, [sp]
   1a234:	b	1a0dc <close_stdout@@Base+0x3dd0>
   1a238:	ldrd	r2, [sp]
   1a23c:	orr	r0, r7, #2
   1a240:	strd	r2, [r9]
   1a244:	b	1a03c <close_stdout@@Base+0x3d30>
   1a248:	mov	r3, #0
   1a24c:	add	r2, fp, r6
   1a250:	str	r2, [r8]
   1a254:	ldrb	r2, [fp, r6]
   1a258:	orr	r7, r7, r3
   1a25c:	cmp	r2, #0
   1a260:	orrne	r7, r7, #2
   1a264:	b	1a0a8 <close_stdout@@Base+0x3d9c>
   1a268:	ldrd	r2, [sp]
   1a26c:	cmp	r2, #0
   1a270:	sbcs	r3, r3, #0
   1a274:	blt	1a6b0 <close_stdout@@Base+0x43a4>
   1a278:	ldrd	r0, [sp]
   1a27c:	mov	r3, #0
   1a280:	adds	r0, r0, r0
   1a284:	adc	r1, r1, r1
   1a288:	strd	r0, [sp]
   1a28c:	b	1a24c <close_stdout@@Base+0x3f40>
   1a290:	ldrd	r0, [sp]
   1a294:	movw	r3, #65535	; 0xffff
   1a298:	movt	r3, #127	; 0x7f
   1a29c:	mvn	r2, #0
   1a2a0:	cmp	r1, r3
   1a2a4:	cmpeq	r0, r2
   1a2a8:	bhi	1a6b0 <close_stdout@@Base+0x43a4>
   1a2ac:	lsl	r2, r1, #9
   1a2b0:	ldr	r1, [sp]
   1a2b4:	lsl	r3, r0, #9
   1a2b8:	str	r3, [sp]
   1a2bc:	mov	r3, #0
   1a2c0:	orr	r2, r2, r1, lsr #23
   1a2c4:	str	r2, [sp, #4]
   1a2c8:	b	1a24c <close_stdout@@Base+0x3f40>
   1a2cc:	asr	r5, r4, #31
   1a2d0:	mov	r2, r4
   1a2d4:	mvn	r0, #0
   1a2d8:	mvn	r1, #0
   1a2dc:	mov	r3, r5
   1a2e0:	bl	1b218 <close_stdout@@Base+0x4f0c>
   1a2e4:	mov	ip, r7
   1a2e8:	str	r6, [sp, #20]
   1a2ec:	mov	r2, #7
   1a2f0:	ldrd	r6, [sp]
   1a2f4:	mov	r3, #0
   1a2f8:	strd	r0, [sp, #8]
   1a2fc:	ldrd	r0, [sp, #8]
   1a300:	cmp	r1, r7
   1a304:	cmpeq	r0, r6
   1a308:	mulcs	r0, r6, r5
   1a30c:	movcs	r1, #0
   1a310:	mlacs	r0, r4, r7, r0
   1a314:	movcc	r1, #1
   1a318:	umullcs	r6, r7, r6, r4
   1a31c:	mvncc	r6, #0
   1a320:	mvncc	r7, #0
   1a324:	orr	r3, r3, r1
   1a328:	addcs	r7, r0, r7
   1a32c:	subs	r2, r2, #1
   1a330:	bne	1a2fc <close_stdout@@Base+0x3ff0>
   1a334:	strd	r6, [sp]
   1a338:	mov	r7, ip
   1a33c:	ldr	r6, [sp, #20]
   1a340:	b	1a24c <close_stdout@@Base+0x3f40>
   1a344:	asr	r5, r4, #31
   1a348:	mov	r2, r4
   1a34c:	mvn	r0, #0
   1a350:	mvn	r1, #0
   1a354:	mov	r3, r5
   1a358:	bl	1b218 <close_stdout@@Base+0x4f0c>
   1a35c:	mov	ip, r7
   1a360:	str	r6, [sp, #20]
   1a364:	mov	r2, #8
   1a368:	ldrd	r6, [sp]
   1a36c:	mov	r3, #0
   1a370:	strd	r0, [sp, #8]
   1a374:	ldrd	r0, [sp, #8]
   1a378:	cmp	r1, r7
   1a37c:	cmpeq	r0, r6
   1a380:	mulcs	r0, r6, r5
   1a384:	movcs	r1, #0
   1a388:	mlacs	r0, r4, r7, r0
   1a38c:	movcc	r1, #1
   1a390:	umullcs	r6, r7, r6, r4
   1a394:	mvncc	r6, #0
   1a398:	mvncc	r7, #0
   1a39c:	orr	r3, r3, r1
   1a3a0:	addcs	r7, r0, r7
   1a3a4:	subs	r2, r2, #1
   1a3a8:	bne	1a374 <close_stdout@@Base+0x4068>
   1a3ac:	b	1a334 <close_stdout@@Base+0x4028>
   1a3b0:	mov	r2, r4
   1a3b4:	asr	r3, r4, #31
   1a3b8:	mvn	r0, #0
   1a3bc:	mvn	r1, #0
   1a3c0:	strd	r2, [sp, #8]
   1a3c4:	bl	1b218 <close_stdout@@Base+0x4f0c>
   1a3c8:	ldrd	r2, [sp]
   1a3cc:	cmp	r3, r1
   1a3d0:	cmpeq	r2, r0
   1a3d4:	bhi	1a69c <close_stdout@@Base+0x4390>
   1a3d8:	ldr	r3, [sp]
   1a3dc:	ldr	ip, [sp, #12]
   1a3e0:	ldr	r0, [sp, #4]
   1a3e4:	ldr	r1, [sp]
   1a3e8:	mul	r2, r3, ip
   1a3ec:	mov	r3, #0
   1a3f0:	mla	r2, r4, r0, r2
   1a3f4:	umull	r0, r1, r1, r4
   1a3f8:	add	r2, r2, r1
   1a3fc:	strd	r0, [sp]
   1a400:	str	r2, [sp, #4]
   1a404:	b	1a24c <close_stdout@@Base+0x3f40>
   1a408:	asr	r5, r4, #31
   1a40c:	mov	r2, r4
   1a410:	mvn	r0, #0
   1a414:	mvn	r1, #0
   1a418:	mov	r3, r5
   1a41c:	bl	1b218 <close_stdout@@Base+0x4f0c>
   1a420:	mov	ip, r7
   1a424:	str	r6, [sp, #20]
   1a428:	mov	r2, #3
   1a42c:	ldrd	r6, [sp]
   1a430:	mov	r3, #0
   1a434:	strd	r0, [sp, #8]
   1a438:	ldrd	r0, [sp, #8]
   1a43c:	cmp	r1, r7
   1a440:	cmpeq	r0, r6
   1a444:	mulcs	r0, r6, r5
   1a448:	movcs	r1, #0
   1a44c:	mlacs	r0, r4, r7, r0
   1a450:	movcc	r1, #1
   1a454:	umullcs	r6, r7, r6, r4
   1a458:	mvncc	r6, #0
   1a45c:	mvncc	r7, #0
   1a460:	orr	r3, r3, r1
   1a464:	addcs	r7, r0, r7
   1a468:	subs	r2, r2, #1
   1a46c:	bne	1a438 <close_stdout@@Base+0x412c>
   1a470:	b	1a334 <close_stdout@@Base+0x4028>
   1a474:	asr	r5, r4, #31
   1a478:	mov	r2, r4
   1a47c:	mvn	r0, #0
   1a480:	mvn	r1, #0
   1a484:	mov	r3, r5
   1a488:	bl	1b218 <close_stdout@@Base+0x4f0c>
   1a48c:	mov	ip, r7
   1a490:	str	r6, [sp, #20]
   1a494:	mov	r2, #6
   1a498:	ldrd	r6, [sp]
   1a49c:	mov	r3, #0
   1a4a0:	strd	r0, [sp, #8]
   1a4a4:	ldrd	r0, [sp, #8]
   1a4a8:	cmp	r1, r7
   1a4ac:	cmpeq	r0, r6
   1a4b0:	mulcs	r0, r6, r5
   1a4b4:	movcs	r1, #0
   1a4b8:	mlacs	r0, r4, r7, r0
   1a4bc:	movcc	r1, #1
   1a4c0:	umullcs	r6, r7, r6, r4
   1a4c4:	mvncc	r6, #0
   1a4c8:	mvncc	r7, #0
   1a4cc:	orr	r3, r3, r1
   1a4d0:	addcs	r7, r0, r7
   1a4d4:	subs	r2, r2, #1
   1a4d8:	bne	1a4a4 <close_stdout@@Base+0x4198>
   1a4dc:	b	1a334 <close_stdout@@Base+0x4028>
   1a4e0:	ldrd	r0, [sp]
   1a4e4:	movw	r3, #65535	; 0xffff
   1a4e8:	movt	r3, #63	; 0x3f
   1a4ec:	mvn	r2, #0
   1a4f0:	cmp	r1, r3
   1a4f4:	cmpeq	r0, r2
   1a4f8:	bhi	1a69c <close_stdout@@Base+0x4390>
   1a4fc:	lsl	r2, r1, #10
   1a500:	ldr	r1, [sp]
   1a504:	lsl	r3, r0, #10
   1a508:	str	r3, [sp]
   1a50c:	mov	r3, #0
   1a510:	orr	r2, r2, r1, lsr #22
   1a514:	str	r2, [sp, #4]
   1a518:	b	1a24c <close_stdout@@Base+0x3f40>
   1a51c:	asr	r5, r4, #31
   1a520:	mov	r2, r4
   1a524:	mvn	r0, #0
   1a528:	mvn	r1, #0
   1a52c:	mov	r3, r5
   1a530:	bl	1b218 <close_stdout@@Base+0x4f0c>
   1a534:	mov	ip, r7
   1a538:	str	r6, [sp, #20]
   1a53c:	mov	r2, #5
   1a540:	ldrd	r6, [sp]
   1a544:	mov	r3, #0
   1a548:	strd	r0, [sp, #8]
   1a54c:	ldrd	r0, [sp, #8]
   1a550:	cmp	r1, r7
   1a554:	cmpeq	r0, r6
   1a558:	mulcs	r0, r6, r5
   1a55c:	movcs	r1, #0
   1a560:	mlacs	r0, r4, r7, r0
   1a564:	movcc	r1, #1
   1a568:	umullcs	r6, r7, r6, r4
   1a56c:	mvncc	r6, #0
   1a570:	mvncc	r7, #0
   1a574:	orr	r3, r3, r1
   1a578:	addcs	r7, r0, r7
   1a57c:	subs	r2, r2, #1
   1a580:	bne	1a54c <close_stdout@@Base+0x4240>
   1a584:	b	1a334 <close_stdout@@Base+0x4028>
   1a588:	mov	r2, r4
   1a58c:	asr	r3, r4, #31
   1a590:	mvn	r0, #0
   1a594:	mvn	r1, #0
   1a598:	strd	r2, [sp, #8]
   1a59c:	bl	1b218 <close_stdout@@Base+0x4f0c>
   1a5a0:	ldrd	r2, [sp]
   1a5a4:	cmp	r3, r1
   1a5a8:	cmpeq	r2, r0
   1a5ac:	bhi	1a6c4 <close_stdout@@Base+0x43b8>
   1a5b0:	ldr	ip, [sp, #4]
   1a5b4:	mul	r3, r4, ip
   1a5b8:	ldr	ip, [sp, #12]
   1a5bc:	mla	r3, r2, ip, r3
   1a5c0:	ldr	r2, [sp]
   1a5c4:	umull	r4, r5, r4, r2
   1a5c8:	add	r5, r3, r5
   1a5cc:	cmp	r1, r5
   1a5d0:	cmpeq	r0, r4
   1a5d4:	bcc	1a6c4 <close_stdout@@Base+0x43b8>
   1a5d8:	mul	r2, r4, ip
   1a5dc:	ldr	ip, [sp, #8]
   1a5e0:	mov	r3, #0
   1a5e4:	umull	r0, r1, r4, ip
   1a5e8:	mla	r2, ip, r5, r2
   1a5ec:	strd	r0, [sp]
   1a5f0:	add	r2, r2, r1
   1a5f4:	str	r2, [sp, #4]
   1a5f8:	b	1a24c <close_stdout@@Base+0x3f40>
   1a5fc:	asr	r5, r4, #31
   1a600:	mov	r2, r4
   1a604:	mvn	r0, #0
   1a608:	mvn	r1, #0
   1a60c:	mov	r3, r5
   1a610:	bl	1b218 <close_stdout@@Base+0x4f0c>
   1a614:	mov	ip, r7
   1a618:	str	r6, [sp, #20]
   1a61c:	mov	r2, #4
   1a620:	ldrd	r6, [sp]
   1a624:	mov	r3, #0
   1a628:	strd	r0, [sp, #8]
   1a62c:	ldrd	r0, [sp, #8]
   1a630:	cmp	r1, r7
   1a634:	cmpeq	r0, r6
   1a638:	mulcs	r0, r6, r5
   1a63c:	movcs	r1, #0
   1a640:	mlacs	r0, r4, r7, r0
   1a644:	movcc	r1, #1
   1a648:	umullcs	r6, r7, r6, r4
   1a64c:	mvncc	r6, #0
   1a650:	mvncc	r7, #0
   1a654:	orr	r3, r3, r1
   1a658:	addcs	r7, r0, r7
   1a65c:	subs	r2, r2, #1
   1a660:	bne	1a62c <close_stdout@@Base+0x4320>
   1a664:	b	1a334 <close_stdout@@Base+0x4028>
   1a668:	ldrd	r0, [sp]
   1a66c:	strd	r0, [r9]
   1a670:	mov	r0, r7
   1a674:	b	1a03c <close_stdout@@Base+0x3d30>
   1a678:	ldrb	r3, [fp, #2]
   1a67c:	mov	r4, #1024	; 0x400
   1a680:	cmp	r3, #66	; 0x42
   1a684:	moveq	r6, #3
   1a688:	movne	r6, #1
   1a68c:	b	1a114 <close_stdout@@Base+0x3e08>
   1a690:	mov	r6, #2
   1a694:	mov	r4, #1000	; 0x3e8
   1a698:	b	1a114 <close_stdout@@Base+0x3e08>
   1a69c:	mvn	r3, #0
   1a6a0:	mvn	r2, #0
   1a6a4:	strd	r2, [sp]
   1a6a8:	mov	r3, #1
   1a6ac:	b	1a24c <close_stdout@@Base+0x3f40>
   1a6b0:	mvn	r0, #0
   1a6b4:	mvn	r1, #0
   1a6b8:	mov	r3, #1
   1a6bc:	strd	r0, [sp]
   1a6c0:	b	1a24c <close_stdout@@Base+0x3f40>
   1a6c4:	mvn	r0, #0
   1a6c8:	mvn	r1, #0
   1a6cc:	mov	r3, #1
   1a6d0:	strd	r0, [sp]
   1a6d4:	b	1a24c <close_stdout@@Base+0x3f40>
   1a6d8:	bl	113e8 <__stack_chk_fail@plt>
   1a6dc:	ldr	r0, [pc, #32]	; 1a704 <close_stdout@@Base+0x43f8>
   1a6e0:	mov	r2, #96	; 0x60
   1a6e4:	ldr	r1, [pc, #28]	; 1a708 <close_stdout@@Base+0x43fc>
   1a6e8:	ldr	r3, [pc, #28]	; 1a70c <close_stdout@@Base+0x4400>
   1a6ec:	add	r0, pc, r0
   1a6f0:	add	r1, pc, r1
   1a6f4:	add	r3, pc, r3
   1a6f8:	bl	11688 <__assert_fail@plt>
   1a6fc:	andeq	r4, r1, r0, lsr r0
   1a700:	andeq	r0, r0, r0, asr #2
   1a704:	andeq	r2, r0, ip, asr sp
   1a708:	andeq	r2, r0, r0, lsl #27
   1a70c:	andeq	r2, r0, ip, lsl #27
   1a710:	push	{r1, r2, r3}
   1a714:	movw	ip, #1030	; 0x406
   1a718:	ldr	r3, [pc, #336]	; 1a870 <close_stdout@@Base+0x4564>
   1a71c:	push	{r4, r5, r6, r7, r8, lr}
   1a720:	add	r3, pc, r3
   1a724:	ldr	lr, [pc, #328]	; 1a874 <close_stdout@@Base+0x4568>
   1a728:	sub	sp, sp, #12
   1a72c:	add	r2, sp, #40	; 0x28
   1a730:	mov	r6, r0
   1a734:	ldr	r1, [sp, #36]	; 0x24
   1a738:	ldr	r4, [r3, lr]
   1a73c:	cmp	r1, ip
   1a740:	str	r2, [sp]
   1a744:	ldr	r3, [r4]
   1a748:	str	r3, [sp, #4]
   1a74c:	bne	1a7d0 <close_stdout@@Base+0x44c4>
   1a750:	ldr	r8, [pc, #288]	; 1a878 <close_stdout@@Base+0x456c>
   1a754:	add	r3, sp, #44	; 0x2c
   1a758:	str	r3, [sp]
   1a75c:	add	r8, pc, r8
   1a760:	ldr	r7, [sp, #40]	; 0x28
   1a764:	ldr	r3, [r8]
   1a768:	mov	r2, r7
   1a76c:	cmp	r3, #0
   1a770:	blt	1a85c <close_stdout@@Base+0x4550>
   1a774:	bl	11550 <fcntl@plt>
   1a778:	subs	r5, r0, #0
   1a77c:	blt	1a7e0 <close_stdout@@Base+0x44d4>
   1a780:	ldr	r3, [pc, #244]	; 1a87c <close_stdout@@Base+0x4570>
   1a784:	mov	r2, #1
   1a788:	add	r3, pc, r3
   1a78c:	str	r2, [r3]
   1a790:	cmp	r5, #0
   1a794:	blt	1a7ac <close_stdout@@Base+0x44a0>
   1a798:	ldr	r3, [pc, #224]	; 1a880 <close_stdout@@Base+0x4574>
   1a79c:	add	r3, pc, r3
   1a7a0:	ldr	r3, [r3]
   1a7a4:	cmn	r3, #1
   1a7a8:	beq	1a810 <close_stdout@@Base+0x4504>
   1a7ac:	ldr	r2, [sp, #4]
   1a7b0:	mov	r0, r5
   1a7b4:	ldr	r3, [r4]
   1a7b8:	cmp	r2, r3
   1a7bc:	bne	1a86c <close_stdout@@Base+0x4560>
   1a7c0:	add	sp, sp, #12
   1a7c4:	pop	{r4, r5, r6, r7, r8, lr}
   1a7c8:	add	sp, sp, #12
   1a7cc:	bx	lr
   1a7d0:	ldr	r2, [sp, #40]	; 0x28
   1a7d4:	bl	11550 <fcntl@plt>
   1a7d8:	mov	r5, r0
   1a7dc:	b	1a7ac <close_stdout@@Base+0x44a0>
   1a7e0:	bl	11568 <__errno_location@plt>
   1a7e4:	ldr	r3, [r0]
   1a7e8:	cmp	r3, #22
   1a7ec:	bne	1a780 <close_stdout@@Base+0x4474>
   1a7f0:	mov	r0, r6
   1a7f4:	mov	r2, r7
   1a7f8:	mov	r1, #0
   1a7fc:	bl	1a710 <close_stdout@@Base+0x4404>
   1a800:	subs	r5, r0, #0
   1a804:	blt	1a7ac <close_stdout@@Base+0x44a0>
   1a808:	mvn	r3, #0
   1a80c:	str	r3, [r8]
   1a810:	mov	r0, r5
   1a814:	mov	r1, #1
   1a818:	bl	11550 <fcntl@plt>
   1a81c:	subs	r2, r0, #0
   1a820:	blt	1a83c <close_stdout@@Base+0x4530>
   1a824:	orr	r2, r2, #1
   1a828:	mov	r0, r5
   1a82c:	mov	r1, #2
   1a830:	bl	11550 <fcntl@plt>
   1a834:	cmn	r0, #1
   1a838:	bne	1a7ac <close_stdout@@Base+0x44a0>
   1a83c:	bl	11568 <__errno_location@plt>
   1a840:	ldr	r7, [r0]
   1a844:	mov	r6, r0
   1a848:	mov	r0, r5
   1a84c:	mvn	r5, #0
   1a850:	bl	11670 <close@plt>
   1a854:	str	r7, [r6]
   1a858:	b	1a7ac <close_stdout@@Base+0x44a0>
   1a85c:	mov	r1, #0
   1a860:	bl	1a710 <close_stdout@@Base+0x4404>
   1a864:	mov	r5, r0
   1a868:	b	1a790 <close_stdout@@Base+0x4484>
   1a86c:	bl	113e8 <__stack_chk_fail@plt>
   1a870:	ldrdeq	r3, [r1], -r8
   1a874:	andeq	r0, r0, r0, asr #2
   1a878:	ldrdeq	r3, [r1], -r8
   1a87c:	andeq	r3, r1, ip, lsr #23
   1a880:	muleq	r1, r8, fp
   1a884:	push	{r4, r5, r6, lr}
   1a888:	mov	r4, r0
   1a88c:	bl	1146c <__fpending@plt>
   1a890:	mov	r6, r0
   1a894:	mov	r0, r4
   1a898:	ldr	r4, [r4]
   1a89c:	bl	1ae1c <close_stdout@@Base+0x4b10>
   1a8a0:	and	r4, r4, #32
   1a8a4:	adds	r5, r0, #0
   1a8a8:	movne	r5, #1
   1a8ac:	cmp	r4, #0
   1a8b0:	bne	1a8d0 <close_stdout@@Base+0x45c4>
   1a8b4:	cmp	r5, #0
   1a8b8:	beq	1a8c8 <close_stdout@@Base+0x45bc>
   1a8bc:	cmp	r6, #0
   1a8c0:	beq	1a8ec <close_stdout@@Base+0x45e0>
   1a8c4:	mvn	r4, #0
   1a8c8:	mov	r0, r4
   1a8cc:	pop	{r4, r5, r6, pc}
   1a8d0:	cmp	r5, #0
   1a8d4:	bne	1a8c4 <close_stdout@@Base+0x45b8>
   1a8d8:	bl	11568 <__errno_location@plt>
   1a8dc:	mvn	r4, #0
   1a8e0:	str	r5, [r0]
   1a8e4:	mov	r0, r4
   1a8e8:	pop	{r4, r5, r6, pc}
   1a8ec:	bl	11568 <__errno_location@plt>
   1a8f0:	ldr	r4, [r0]
   1a8f4:	subs	r4, r4, #9
   1a8f8:	mvnne	r4, #0
   1a8fc:	mov	r0, r4
   1a900:	pop	{r4, r5, r6, pc}
   1a904:	andeq	r0, r0, r0
   1a908:	vldr	d7, [pc, #200]	; 1a9d8 <close_stdout@@Base+0x46cc>
   1a90c:	vcmpe.f64	d0, d7
   1a910:	push	{r4}		; (str r4, [sp, #-4]!)
   1a914:	vmrs	APSR_nzcv, fpscr
   1a918:	ble	1a9c4 <close_stdout@@Base+0x46b8>
   1a91c:	vldr	d7, [pc, #188]	; 1a9e0 <close_stdout@@Base+0x46d4>
   1a920:	vcmpe.f64	d0, d7
   1a924:	vmrs	APSR_nzcv, fpscr
   1a928:	bpl	1a9ac <close_stdout@@Base+0x46a0>
   1a92c:	vcvt.s32.f64	s11, d0
   1a930:	vldr	d7, [pc, #176]	; 1a9e8 <close_stdout@@Base+0x46dc>
   1a934:	movw	r3, #12193	; 0x2fa1
   1a938:	movt	r3, #17592	; 0x44b8
   1a93c:	mov	r1, #51712	; 0xca00
   1a940:	movt	r1, #15258	; 0x3b9a
   1a944:	vcvt.f64.s32	d6, s11
   1a948:	vsub.f64	d0, d0, d6
   1a94c:	vmul.f64	d0, d0, d7
   1a950:	vcvt.s32.f64	s13, d0
   1a954:	vmov	r4, s13
   1a958:	vcvt.f64.s32	d7, s13
   1a95c:	vcmpe.f64	d7, d0
   1a960:	vmrs	APSR_nzcv, fpscr
   1a964:	movpl	r2, #0
   1a968:	movmi	r2, #1
   1a96c:	add	r2, r2, r4
   1a970:	vmov	r4, s11
   1a974:	smull	ip, r3, r3, r2
   1a978:	asr	ip, r2, #31
   1a97c:	rsb	r3, ip, r3, asr #28
   1a980:	add	ip, r3, r4
   1a984:	mls	r3, r1, r3, r2
   1a988:	cmp	r3, #0
   1a98c:	addlt	r3, r3, #998244352	; 0x3b800000
   1a990:	sublt	ip, ip, #1
   1a994:	addlt	r3, r3, #1753088	; 0x1ac000
   1a998:	str	ip, [r0]
   1a99c:	addlt	r3, r3, #2560	; 0xa00
   1a9a0:	str	r3, [r0, #4]
   1a9a4:	pop	{r4}		; (ldr r4, [sp], #4)
   1a9a8:	bx	lr
   1a9ac:	movw	r3, #51711	; 0xc9ff
   1a9b0:	mvn	r2, #-2147483648	; 0x80000000
   1a9b4:	movt	r3, #15258	; 0x3b9a
   1a9b8:	stm	r0, {r2, r3}
   1a9bc:	pop	{r4}		; (ldr r4, [sp], #4)
   1a9c0:	bx	lr
   1a9c4:	mov	r2, #-2147483648	; 0x80000000
   1a9c8:	mov	r3, #0
   1a9cc:	stm	r0, {r2, r3}
   1a9d0:	pop	{r4}		; (ldr r4, [sp], #4)
   1a9d4:	bx	lr
   1a9d8:	andeq	r0, r0, r0
   1a9dc:	mvngt	r0, r0
   1a9e0:	andeq	r0, r0, r0
   1a9e4:	mvnmi	r0, r0
   1a9e8:	andeq	r0, r0, r0
   1a9ec:	bicmi	ip, sp, r5, ror #26
   1a9f0:	ldr	r3, [pc, #984]	; 1add0 <close_stdout@@Base+0x4ac4>
   1a9f4:	mov	r0, #14
   1a9f8:	ldr	r2, [pc, #980]	; 1add4 <close_stdout@@Base+0x4ac8>
   1a9fc:	add	r3, pc, r3
   1aa00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa04:	sub	sp, sp, #132	; 0x84
   1aa08:	ldr	r6, [r3, r2]
   1aa0c:	ldr	r3, [r6]
   1aa10:	str	r3, [sp, #124]	; 0x7c
   1aa14:	bl	1161c <nl_langinfo@plt>
   1aa18:	subs	r5, r0, #0
   1aa1c:	beq	1aad0 <close_stdout@@Base+0x47c4>
   1aa20:	ldr	r3, [pc, #944]	; 1add8 <close_stdout@@Base+0x4acc>
   1aa24:	ldr	r4, [pc, r3]
   1aa28:	cmp	r4, #0
   1aa2c:	beq	1aadc <close_stdout@@Base+0x47d0>
   1aa30:	ldrb	r7, [r4]
   1aa34:	cmp	r7, #0
   1aa38:	bne	1aa6c <close_stdout@@Base+0x4760>
   1aa3c:	b	1aaa4 <close_stdout@@Base+0x4798>
   1aa40:	mov	r0, r4
   1aa44:	bl	11514 <strlen@plt>
   1aa48:	add	r0, r0, #1
   1aa4c:	add	r7, r4, r0
   1aa50:	mov	r0, r7
   1aa54:	bl	11514 <strlen@plt>
   1aa58:	add	r0, r0, #1
   1aa5c:	add	r4, r7, r0
   1aa60:	ldrb	r7, [r7, r0]
   1aa64:	cmp	r7, #0
   1aa68:	beq	1aaa4 <close_stdout@@Base+0x4798>
   1aa6c:	mov	r0, r5
   1aa70:	mov	r1, r4
   1aa74:	bl	11340 <strcmp@plt>
   1aa78:	cmp	r0, #0
   1aa7c:	beq	1aa94 <close_stdout@@Base+0x4788>
   1aa80:	cmp	r7, #42	; 0x2a
   1aa84:	bne	1aa40 <close_stdout@@Base+0x4734>
   1aa88:	ldrb	r3, [r4, #1]
   1aa8c:	cmp	r3, #0
   1aa90:	bne	1aa40 <close_stdout@@Base+0x4734>
   1aa94:	mov	r0, r4
   1aa98:	bl	11514 <strlen@plt>
   1aa9c:	add	r0, r0, #1
   1aaa0:	add	r5, r4, r0
   1aaa4:	ldrb	r3, [r5]
   1aaa8:	cmp	r3, #0
   1aaac:	ldreq	r5, [pc, #808]	; 1addc <close_stdout@@Base+0x4ad0>
   1aab0:	addeq	r5, pc, r5
   1aab4:	ldr	r2, [sp, #124]	; 0x7c
   1aab8:	mov	r0, r5
   1aabc:	ldr	r3, [r6]
   1aac0:	cmp	r2, r3
   1aac4:	bne	1ada4 <close_stdout@@Base+0x4a98>
   1aac8:	add	sp, sp, #132	; 0x84
   1aacc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aad0:	ldr	r5, [pc, #776]	; 1ade0 <close_stdout@@Base+0x4ad4>
   1aad4:	add	r5, pc, r5
   1aad8:	b	1aa20 <close_stdout@@Base+0x4714>
   1aadc:	ldr	r0, [pc, #768]	; 1ade4 <close_stdout@@Base+0x4ad8>
   1aae0:	add	r0, pc, r0
   1aae4:	bl	1149c <getenv@plt>
   1aae8:	subs	r8, r0, #0
   1aaec:	beq	1ad7c <close_stdout@@Base+0x4a70>
   1aaf0:	ldrb	r3, [r8]
   1aaf4:	cmp	r3, #0
   1aaf8:	beq	1ad10 <close_stdout@@Base+0x4a04>
   1aafc:	bl	11514 <strlen@plt>
   1ab00:	subs	sl, r0, #0
   1ab04:	subne	r3, sl, #1
   1ab08:	bne	1ad20 <close_stdout@@Base+0x4a14>
   1ab0c:	mov	r9, #0
   1ab10:	mov	fp, r9
   1ab14:	add	r9, sl, r9
   1ab18:	add	r0, r9, #14
   1ab1c:	bl	114a8 <malloc@plt>
   1ab20:	subs	r7, r0, #0
   1ab24:	beq	1ad70 <close_stdout@@Base+0x4a64>
   1ab28:	mov	r1, r8
   1ab2c:	mov	r2, sl
   1ab30:	bl	11394 <memcpy@plt>
   1ab34:	cmp	fp, #0
   1ab38:	add	ip, r7, r9
   1ab3c:	movne	r3, #47	; 0x2f
   1ab40:	strbne	r3, [r7, sl]
   1ab44:	ldr	r3, [pc, #668]	; 1ade8 <close_stdout@@Base+0x4adc>
   1ab48:	add	r3, pc, r3
   1ab4c:	ldm	r3!, {r0, r1, r2}
   1ab50:	ldrh	r3, [r3]
   1ab54:	str	r0, [r7, r9]
   1ab58:	mov	r0, r7
   1ab5c:	str	r1, [ip, #4]
   1ab60:	mov	r1, #32768	; 0x8000
   1ab64:	strh	r3, [ip, #12]
   1ab68:	str	r2, [ip, #8]
   1ab6c:	bl	11490 <open64@plt>
   1ab70:	subs	r8, r0, #0
   1ab74:	blt	1ad38 <close_stdout@@Base+0x4a2c>
   1ab78:	ldr	r1, [pc, #620]	; 1adec <close_stdout@@Base+0x4ae0>
   1ab7c:	add	r1, pc, r1
   1ab80:	bl	11304 <fdopen@plt>
   1ab84:	subs	fp, r0, #0
   1ab88:	beq	1ad90 <close_stdout@@Base+0x4a84>
   1ab8c:	ldr	r0, [pc, #604]	; 1adf0 <close_stdout@@Base+0x4ae4>
   1ab90:	add	sl, sp, #20
   1ab94:	add	r9, sp, #72	; 0x48
   1ab98:	mov	r8, #0
   1ab9c:	add	r0, pc, r0
   1aba0:	str	r0, [sp, #12]
   1aba4:	ldr	r3, [fp, #4]
   1aba8:	ldr	r2, [fp, #8]
   1abac:	cmp	r3, r2
   1abb0:	bcs	1ac9c <close_stdout@@Base+0x4990>
   1abb4:	add	r2, r3, #1
   1abb8:	str	r2, [fp, #4]
   1abbc:	ldrb	r0, [r3]
   1abc0:	cmp	r0, #32
   1abc4:	beq	1aba4 <close_stdout@@Base+0x4898>
   1abc8:	sub	r3, r0, #9
   1abcc:	cmp	r3, #1
   1abd0:	bls	1aba4 <close_stdout@@Base+0x4898>
   1abd4:	cmp	r0, #35	; 0x23
   1abd8:	beq	1acb0 <close_stdout@@Base+0x49a4>
   1abdc:	mov	r1, fp
   1abe0:	bl	11544 <ungetc@plt>
   1abe4:	mov	r0, fp
   1abe8:	ldr	r1, [sp, #12]
   1abec:	mov	r2, sl
   1abf0:	mov	r3, r9
   1abf4:	bl	1158c <fscanf@plt>
   1abf8:	cmp	r0, #1
   1abfc:	ble	1ace0 <close_stdout@@Base+0x49d4>
   1ac00:	mov	r0, sl
   1ac04:	bl	11514 <strlen@plt>
   1ac08:	str	r0, [sp, #8]
   1ac0c:	mov	r0, r9
   1ac10:	bl	11514 <strlen@plt>
   1ac14:	cmp	r8, #0
   1ac18:	mov	r2, r0
   1ac1c:	bne	1ad44 <close_stdout@@Base+0x4a38>
   1ac20:	ldr	r3, [sp, #8]
   1ac24:	str	r2, [sp]
   1ac28:	add	r8, r0, r3
   1ac2c:	add	r0, r8, #3
   1ac30:	add	r8, r8, #2
   1ac34:	bl	114a8 <malloc@plt>
   1ac38:	ldr	r2, [sp]
   1ac3c:	mov	r3, r0
   1ac40:	cmp	r3, #0
   1ac44:	beq	1ada8 <close_stdout@@Base+0x4a9c>
   1ac48:	ldr	r0, [sp, #8]
   1ac4c:	movw	r1, #65534	; 0xfffe
   1ac50:	movt	r1, #65535	; 0xffff
   1ac54:	rsb	r2, r2, r8
   1ac58:	rsb	r1, r0, r1
   1ac5c:	stm	sp, {r2, r3}
   1ac60:	add	r0, r1, r2
   1ac64:	mov	r1, sl
   1ac68:	add	r0, r3, r0
   1ac6c:	mov	r4, r3
   1ac70:	bl	11460 <strcpy@plt>
   1ac74:	ldr	r2, [sp]
   1ac78:	ldr	r3, [sp, #4]
   1ac7c:	mov	r1, r9
   1ac80:	sub	r0, r2, #1
   1ac84:	add	r0, r3, r0
   1ac88:	bl	11460 <strcpy@plt>
   1ac8c:	ldr	r3, [fp, #4]
   1ac90:	ldr	r2, [fp, #8]
   1ac94:	cmp	r3, r2
   1ac98:	bcc	1abb4 <close_stdout@@Base+0x48a8>
   1ac9c:	mov	r0, fp
   1aca0:	bl	115ec <__uflow@plt>
   1aca4:	cmn	r0, #1
   1aca8:	beq	1ace0 <close_stdout@@Base+0x49d4>
   1acac:	b	1abc0 <close_stdout@@Base+0x48b4>
   1acb0:	ldr	r3, [fp, #4]
   1acb4:	ldr	r2, [fp, #8]
   1acb8:	cmp	r3, r2
   1acbc:	bcs	1adc4 <close_stdout@@Base+0x4ab8>
   1acc0:	add	r2, r3, #1
   1acc4:	str	r2, [fp, #4]
   1acc8:	ldrb	r0, [r3]
   1accc:	cmp	r0, #10
   1acd0:	cmnne	r0, #1
   1acd4:	bne	1acb0 <close_stdout@@Base+0x49a4>
   1acd8:	cmn	r0, #1
   1acdc:	bne	1aba4 <close_stdout@@Base+0x4898>
   1ace0:	mov	r0, fp
   1ace4:	bl	1ae1c <close_stdout@@Base+0x4b10>
   1ace8:	cmp	r8, #0
   1acec:	beq	1ad38 <close_stdout@@Base+0x4a2c>
   1acf0:	mov	r3, #0
   1acf4:	strb	r3, [r4, r8]
   1acf8:	mov	r0, r7
   1acfc:	bl	11370 <free@plt>
   1ad00:	ldr	r3, [pc, #236]	; 1adf4 <close_stdout@@Base+0x4ae8>
   1ad04:	add	r3, pc, r3
   1ad08:	str	r4, [r3]
   1ad0c:	b	1aa30 <close_stdout@@Base+0x4724>
   1ad10:	ldr	r8, [pc, #224]	; 1adf8 <close_stdout@@Base+0x4aec>
   1ad14:	mov	r3, #7
   1ad18:	mov	sl, #8
   1ad1c:	add	r8, pc, r8
   1ad20:	ldrb	r3, [r8, r3]
   1ad24:	cmp	r3, #47	; 0x2f
   1ad28:	movne	r9, #1
   1ad2c:	movne	fp, r9
   1ad30:	bne	1ab14 <close_stdout@@Base+0x4808>
   1ad34:	b	1ab0c <close_stdout@@Base+0x4800>
   1ad38:	ldr	r4, [pc, #188]	; 1adfc <close_stdout@@Base+0x4af0>
   1ad3c:	add	r4, pc, r4
   1ad40:	b	1acf8 <close_stdout@@Base+0x49ec>
   1ad44:	ldr	r0, [sp, #8]
   1ad48:	str	r2, [sp]
   1ad4c:	add	r3, r0, r2
   1ad50:	mov	r0, r4
   1ad54:	add	r8, r3, r8
   1ad58:	add	r1, r8, #3
   1ad5c:	add	r8, r8, #2
   1ad60:	bl	113f4 <realloc@plt>
   1ad64:	ldr	r2, [sp]
   1ad68:	mov	r3, r0
   1ad6c:	b	1ac40 <close_stdout@@Base+0x4934>
   1ad70:	ldr	r4, [pc, #136]	; 1ae00 <close_stdout@@Base+0x4af4>
   1ad74:	add	r4, pc, r4
   1ad78:	b	1ad00 <close_stdout@@Base+0x49f4>
   1ad7c:	ldr	r8, [pc, #128]	; 1ae04 <close_stdout@@Base+0x4af8>
   1ad80:	mov	r3, #7
   1ad84:	mov	sl, #8
   1ad88:	add	r8, pc, r8
   1ad8c:	b	1ad20 <close_stdout@@Base+0x4a14>
   1ad90:	ldr	r4, [pc, #112]	; 1ae08 <close_stdout@@Base+0x4afc>
   1ad94:	mov	r0, r8
   1ad98:	add	r4, pc, r4
   1ad9c:	bl	11670 <close@plt>
   1ada0:	b	1acf8 <close_stdout@@Base+0x49ec>
   1ada4:	bl	113e8 <__stack_chk_fail@plt>
   1ada8:	mov	r0, r4
   1adac:	ldr	r4, [pc, #88]	; 1ae0c <close_stdout@@Base+0x4b00>
   1adb0:	bl	11370 <free@plt>
   1adb4:	mov	r0, fp
   1adb8:	add	r4, pc, r4
   1adbc:	bl	1ae1c <close_stdout@@Base+0x4b10>
   1adc0:	b	1acf8 <close_stdout@@Base+0x49ec>
   1adc4:	mov	r0, fp
   1adc8:	bl	115ec <__uflow@plt>
   1adcc:	b	1accc <close_stdout@@Base+0x49c0>
   1add0:	strdeq	r3, [r1], -ip
   1add4:	andeq	r0, r0, r0, asr #2
   1add8:	andeq	r3, r1, r4, lsl r9
   1addc:	andeq	r2, r0, r8, ror #19
   1ade0:	andeq	r1, r0, r8, lsl #31
   1ade4:	andeq	r2, r0, r0, asr #19
   1ade8:	andeq	r2, r0, r8, ror #18
   1adec:	andeq	r2, r0, r4, asr #18
   1adf0:	andeq	r2, r0, r8, lsr #18
   1adf4:	andeq	r3, r1, r4, lsr r6
   1adf8:	andeq	r2, r0, r0, ror r7
   1adfc:	andeq	r1, r0, r0, lsr #26
   1ae00:	andeq	r1, r0, r8, ror #25
   1ae04:	andeq	r2, r0, r4, lsl #14
   1ae08:	andeq	r1, r0, r4, asr #25
   1ae0c:	andeq	r1, r0, r4, lsr #25
   1ae10:	mov	r1, #0
   1ae14:	mov	r2, #3
   1ae18:	b	1a710 <close_stdout@@Base+0x4404>
   1ae1c:	push	{r4, r5, r6, lr}
   1ae20:	sub	sp, sp, #8
   1ae24:	mov	r4, r0
   1ae28:	bl	115a4 <fileno@plt>
   1ae2c:	cmp	r0, #0
   1ae30:	mov	r0, r4
   1ae34:	blt	1aeb0 <close_stdout@@Base+0x4ba4>
   1ae38:	bl	114c0 <__freading@plt>
   1ae3c:	cmp	r0, #0
   1ae40:	bne	1ae7c <close_stdout@@Base+0x4b70>
   1ae44:	mov	r0, r4
   1ae48:	bl	1aebc <close_stdout@@Base+0x4bb0>
   1ae4c:	cmp	r0, #0
   1ae50:	beq	1aeac <close_stdout@@Base+0x4ba0>
   1ae54:	bl	11568 <__errno_location@plt>
   1ae58:	ldr	r6, [r0]
   1ae5c:	mov	r5, r0
   1ae60:	mov	r0, r4
   1ae64:	bl	115c8 <fclose@plt>
   1ae68:	cmp	r6, #0
   1ae6c:	mvnne	r0, #0
   1ae70:	strne	r6, [r5]
   1ae74:	add	sp, sp, #8
   1ae78:	pop	{r4, r5, r6, pc}
   1ae7c:	mov	r0, r4
   1ae80:	bl	115a4 <fileno@plt>
   1ae84:	mov	r1, #1
   1ae88:	mov	r2, #0
   1ae8c:	mov	r3, #0
   1ae90:	str	r1, [sp]
   1ae94:	bl	11448 <lseek64@plt>
   1ae98:	mvn	r2, #0
   1ae9c:	mvn	r3, #0
   1aea0:	cmp	r1, r3
   1aea4:	cmpeq	r0, r2
   1aea8:	bne	1ae44 <close_stdout@@Base+0x4b38>
   1aeac:	mov	r0, r4
   1aeb0:	add	sp, sp, #8
   1aeb4:	pop	{r4, r5, r6, lr}
   1aeb8:	b	115c8 <fclose@plt>
   1aebc:	push	{r4, lr}
   1aec0:	subs	r4, r0, #0
   1aec4:	sub	sp, sp, #8
   1aec8:	beq	1aed8 <close_stdout@@Base+0x4bcc>
   1aecc:	bl	114c0 <__freading@plt>
   1aed0:	cmp	r0, #0
   1aed4:	bne	1aee8 <close_stdout@@Base+0x4bdc>
   1aed8:	mov	r0, r4
   1aedc:	add	sp, sp, #8
   1aee0:	pop	{r4, lr}
   1aee4:	b	11364 <fflush@plt>
   1aee8:	ldr	r3, [r4]
   1aeec:	tst	r3, #256	; 0x100
   1aef0:	beq	1aed8 <close_stdout@@Base+0x4bcc>
   1aef4:	mov	r3, #1
   1aef8:	mov	r0, r4
   1aefc:	str	r3, [sp]
   1af00:	mov	r2, #0
   1af04:	mov	r3, #0
   1af08:	bl	1af1c <close_stdout@@Base+0x4c10>
   1af0c:	mov	r0, r4
   1af10:	add	sp, sp, #8
   1af14:	pop	{r4, lr}
   1af18:	b	11364 <fflush@plt>
   1af1c:	push	{r4, r5, r6, r7, lr}
   1af20:	sub	sp, sp, #20
   1af24:	ldmib	r0, {r1, ip}
   1af28:	mov	r6, r0
   1af2c:	ldr	r4, [sp, #40]	; 0x28
   1af30:	cmp	ip, r1
   1af34:	beq	1af4c <close_stdout@@Base+0x4c40>
   1af38:	str	r4, [sp, #40]	; 0x28
   1af3c:	mov	r0, r6
   1af40:	add	sp, sp, #20
   1af44:	pop	{r4, r5, r6, r7, lr}
   1af48:	b	115d4 <fseeko64@plt>
   1af4c:	ldr	ip, [r0, #20]
   1af50:	ldr	r1, [r0, #16]
   1af54:	cmp	ip, r1
   1af58:	bne	1af38 <close_stdout@@Base+0x4c2c>
   1af5c:	ldr	r7, [r0, #36]	; 0x24
   1af60:	cmp	r7, #0
   1af64:	bne	1af38 <close_stdout@@Base+0x4c2c>
   1af68:	str	r2, [sp, #12]
   1af6c:	mvn	r5, #0
   1af70:	str	r3, [sp, #8]
   1af74:	bl	115a4 <fileno@plt>
   1af78:	str	r4, [sp]
   1af7c:	mvn	r4, #0
   1af80:	ldr	r2, [sp, #12]
   1af84:	ldr	r3, [sp, #8]
   1af88:	bl	11448 <lseek64@plt>
   1af8c:	mov	r2, r0
   1af90:	mov	r3, r1
   1af94:	cmp	r3, r5
   1af98:	cmpeq	r2, r4
   1af9c:	beq	1afbc <close_stdout@@Base+0x4cb0>
   1afa0:	ldr	r1, [r6]
   1afa4:	mov	r0, r7
   1afa8:	strd	r2, [r6, #80]	; 0x50
   1afac:	bic	r3, r1, #16
   1afb0:	str	r3, [r6]
   1afb4:	add	sp, sp, #20
   1afb8:	pop	{r4, r5, r6, r7, pc}
   1afbc:	mvn	r0, #0
   1afc0:	b	1afb4 <close_stdout@@Base+0x4ca8>
   1afc4:	subs	r2, r1, #1
   1afc8:	bxeq	lr
   1afcc:	bcc	1b1a4 <close_stdout@@Base+0x4e98>
   1afd0:	cmp	r0, r1
   1afd4:	bls	1b188 <close_stdout@@Base+0x4e7c>
   1afd8:	tst	r1, r2
   1afdc:	beq	1b194 <close_stdout@@Base+0x4e88>
   1afe0:	clz	r3, r0
   1afe4:	clz	r2, r1
   1afe8:	sub	r3, r2, r3
   1afec:	rsbs	r3, r3, #31
   1aff0:	addne	r3, r3, r3, lsl #1
   1aff4:	mov	r2, #0
   1aff8:	addne	pc, pc, r3, lsl #2
   1affc:	nop	{0}
   1b000:	cmp	r0, r1, lsl #31
   1b004:	adc	r2, r2, r2
   1b008:	subcs	r0, r0, r1, lsl #31
   1b00c:	cmp	r0, r1, lsl #30
   1b010:	adc	r2, r2, r2
   1b014:	subcs	r0, r0, r1, lsl #30
   1b018:	cmp	r0, r1, lsl #29
   1b01c:	adc	r2, r2, r2
   1b020:	subcs	r0, r0, r1, lsl #29
   1b024:	cmp	r0, r1, lsl #28
   1b028:	adc	r2, r2, r2
   1b02c:	subcs	r0, r0, r1, lsl #28
   1b030:	cmp	r0, r1, lsl #27
   1b034:	adc	r2, r2, r2
   1b038:	subcs	r0, r0, r1, lsl #27
   1b03c:	cmp	r0, r1, lsl #26
   1b040:	adc	r2, r2, r2
   1b044:	subcs	r0, r0, r1, lsl #26
   1b048:	cmp	r0, r1, lsl #25
   1b04c:	adc	r2, r2, r2
   1b050:	subcs	r0, r0, r1, lsl #25
   1b054:	cmp	r0, r1, lsl #24
   1b058:	adc	r2, r2, r2
   1b05c:	subcs	r0, r0, r1, lsl #24
   1b060:	cmp	r0, r1, lsl #23
   1b064:	adc	r2, r2, r2
   1b068:	subcs	r0, r0, r1, lsl #23
   1b06c:	cmp	r0, r1, lsl #22
   1b070:	adc	r2, r2, r2
   1b074:	subcs	r0, r0, r1, lsl #22
   1b078:	cmp	r0, r1, lsl #21
   1b07c:	adc	r2, r2, r2
   1b080:	subcs	r0, r0, r1, lsl #21
   1b084:	cmp	r0, r1, lsl #20
   1b088:	adc	r2, r2, r2
   1b08c:	subcs	r0, r0, r1, lsl #20
   1b090:	cmp	r0, r1, lsl #19
   1b094:	adc	r2, r2, r2
   1b098:	subcs	r0, r0, r1, lsl #19
   1b09c:	cmp	r0, r1, lsl #18
   1b0a0:	adc	r2, r2, r2
   1b0a4:	subcs	r0, r0, r1, lsl #18
   1b0a8:	cmp	r0, r1, lsl #17
   1b0ac:	adc	r2, r2, r2
   1b0b0:	subcs	r0, r0, r1, lsl #17
   1b0b4:	cmp	r0, r1, lsl #16
   1b0b8:	adc	r2, r2, r2
   1b0bc:	subcs	r0, r0, r1, lsl #16
   1b0c0:	cmp	r0, r1, lsl #15
   1b0c4:	adc	r2, r2, r2
   1b0c8:	subcs	r0, r0, r1, lsl #15
   1b0cc:	cmp	r0, r1, lsl #14
   1b0d0:	adc	r2, r2, r2
   1b0d4:	subcs	r0, r0, r1, lsl #14
   1b0d8:	cmp	r0, r1, lsl #13
   1b0dc:	adc	r2, r2, r2
   1b0e0:	subcs	r0, r0, r1, lsl #13
   1b0e4:	cmp	r0, r1, lsl #12
   1b0e8:	adc	r2, r2, r2
   1b0ec:	subcs	r0, r0, r1, lsl #12
   1b0f0:	cmp	r0, r1, lsl #11
   1b0f4:	adc	r2, r2, r2
   1b0f8:	subcs	r0, r0, r1, lsl #11
   1b0fc:	cmp	r0, r1, lsl #10
   1b100:	adc	r2, r2, r2
   1b104:	subcs	r0, r0, r1, lsl #10
   1b108:	cmp	r0, r1, lsl #9
   1b10c:	adc	r2, r2, r2
   1b110:	subcs	r0, r0, r1, lsl #9
   1b114:	cmp	r0, r1, lsl #8
   1b118:	adc	r2, r2, r2
   1b11c:	subcs	r0, r0, r1, lsl #8
   1b120:	cmp	r0, r1, lsl #7
   1b124:	adc	r2, r2, r2
   1b128:	subcs	r0, r0, r1, lsl #7
   1b12c:	cmp	r0, r1, lsl #6
   1b130:	adc	r2, r2, r2
   1b134:	subcs	r0, r0, r1, lsl #6
   1b138:	cmp	r0, r1, lsl #5
   1b13c:	adc	r2, r2, r2
   1b140:	subcs	r0, r0, r1, lsl #5
   1b144:	cmp	r0, r1, lsl #4
   1b148:	adc	r2, r2, r2
   1b14c:	subcs	r0, r0, r1, lsl #4
   1b150:	cmp	r0, r1, lsl #3
   1b154:	adc	r2, r2, r2
   1b158:	subcs	r0, r0, r1, lsl #3
   1b15c:	cmp	r0, r1, lsl #2
   1b160:	adc	r2, r2, r2
   1b164:	subcs	r0, r0, r1, lsl #2
   1b168:	cmp	r0, r1, lsl #1
   1b16c:	adc	r2, r2, r2
   1b170:	subcs	r0, r0, r1, lsl #1
   1b174:	cmp	r0, r1
   1b178:	adc	r2, r2, r2
   1b17c:	subcs	r0, r0, r1
   1b180:	mov	r0, r2
   1b184:	bx	lr
   1b188:	moveq	r0, #1
   1b18c:	movne	r0, #0
   1b190:	bx	lr
   1b194:	clz	r2, r1
   1b198:	rsb	r2, r2, #31
   1b19c:	lsr	r0, r0, r2
   1b1a0:	bx	lr
   1b1a4:	cmp	r0, #0
   1b1a8:	mvnne	r0, #0
   1b1ac:	b	1b254 <close_stdout@@Base+0x4f48>
   1b1b0:	cmp	r1, #0
   1b1b4:	beq	1b1a4 <close_stdout@@Base+0x4e98>
   1b1b8:	push	{r0, r1, lr}
   1b1bc:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b1c0:	pop	{r1, r2, lr}
   1b1c4:	mul	r3, r2, r0
   1b1c8:	sub	r1, r1, r3
   1b1cc:	bx	lr
   1b1d0:	cmp	r3, #0
   1b1d4:	cmpeq	r2, #0
   1b1d8:	bne	1b1fc <close_stdout@@Base+0x4ef0>
   1b1dc:	cmp	r1, #0
   1b1e0:	movlt	r1, #-2147483648	; 0x80000000
   1b1e4:	movlt	r0, #0
   1b1e8:	blt	1b1f8 <close_stdout@@Base+0x4eec>
   1b1ec:	cmpeq	r0, #0
   1b1f0:	mvnne	r1, #-2147483648	; 0x80000000
   1b1f4:	mvnne	r0, #0
   1b1f8:	b	1b254 <close_stdout@@Base+0x4f48>
   1b1fc:	sub	sp, sp, #8
   1b200:	push	{sp, lr}
   1b204:	bl	1b264 <close_stdout@@Base+0x4f58>
   1b208:	ldr	lr, [sp, #4]
   1b20c:	add	sp, sp, #8
   1b210:	pop	{r2, r3}
   1b214:	bx	lr
   1b218:	cmp	r3, #0
   1b21c:	cmpeq	r2, #0
   1b220:	bne	1b238 <close_stdout@@Base+0x4f2c>
   1b224:	cmp	r1, #0
   1b228:	cmpeq	r0, #0
   1b22c:	mvnne	r1, #0
   1b230:	mvnne	r0, #0
   1b234:	b	1b254 <close_stdout@@Base+0x4f48>
   1b238:	sub	sp, sp, #8
   1b23c:	push	{sp, lr}
   1b240:	bl	1b2a0 <close_stdout@@Base+0x4f94>
   1b244:	ldr	lr, [sp, #4]
   1b248:	add	sp, sp, #8
   1b24c:	pop	{r2, r3}
   1b250:	bx	lr
   1b254:	push	{r1, lr}
   1b258:	mov	r0, #8
   1b25c:	bl	11334 <raise@plt>
   1b260:	pop	{r1, pc}
   1b264:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b268:	mov	r8, r2
   1b26c:	mov	r6, r0
   1b270:	mov	r7, r1
   1b274:	mov	sl, r3
   1b278:	ldr	r9, [sp, #32]
   1b27c:	bl	1b2dc <close_stdout@@Base+0x4fd0>
   1b280:	umull	r4, r5, r8, r0
   1b284:	mul	r8, r8, r1
   1b288:	mla	r2, r0, sl, r8
   1b28c:	add	r5, r2, r5
   1b290:	subs	r4, r6, r4
   1b294:	sbc	r5, r7, r5
   1b298:	strd	r4, [r9]
   1b29c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b2a0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1b2a4:	mov	r8, r2
   1b2a8:	mov	r6, r0
   1b2ac:	mov	r7, r1
   1b2b0:	mov	r5, r3
   1b2b4:	ldr	r9, [sp, #32]
   1b2b8:	bl	1b768 <close_stdout@@Base+0x545c>
   1b2bc:	mul	r3, r0, r5
   1b2c0:	umull	r4, r5, r0, r8
   1b2c4:	mla	r8, r8, r1, r3
   1b2c8:	add	r5, r8, r5
   1b2cc:	subs	r4, r6, r4
   1b2d0:	sbc	r5, r7, r5
   1b2d4:	strd	r4, [r9]
   1b2d8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1b2dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2e0:	rsbs	r4, r0, #0
   1b2e4:	rsc	r5, r1, #0
   1b2e8:	cmp	r1, #0
   1b2ec:	mvn	r6, #0
   1b2f0:	sub	sp, sp, #12
   1b2f4:	movge	r4, r0
   1b2f8:	movge	r5, r1
   1b2fc:	movge	r6, #0
   1b300:	cmp	r3, #0
   1b304:	blt	1b53c <close_stdout@@Base+0x5230>
   1b308:	cmp	r3, #0
   1b30c:	mov	sl, r4
   1b310:	mov	ip, r5
   1b314:	mov	r0, r2
   1b318:	mov	r1, r3
   1b31c:	mov	r8, r2
   1b320:	mov	r7, r4
   1b324:	mov	r9, r5
   1b328:	bne	1b420 <close_stdout@@Base+0x5114>
   1b32c:	cmp	r2, r5
   1b330:	bls	1b45c <close_stdout@@Base+0x5150>
   1b334:	clz	r3, r2
   1b338:	cmp	r3, #0
   1b33c:	rsbne	r2, r3, #32
   1b340:	lslne	r8, r0, r3
   1b344:	lsrne	r2, r4, r2
   1b348:	lslne	r7, r4, r3
   1b34c:	orrne	r9, r2, r5, lsl r3
   1b350:	lsr	r4, r8, #16
   1b354:	uxth	sl, r8
   1b358:	mov	r1, r4
   1b35c:	mov	r0, r9
   1b360:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b364:	mov	r1, r4
   1b368:	mov	fp, r0
   1b36c:	mov	r0, r9
   1b370:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b374:	mul	r0, sl, fp
   1b378:	lsr	r2, r7, #16
   1b37c:	orr	r1, r2, r1, lsl #16
   1b380:	cmp	r0, r1
   1b384:	bls	1b3a8 <close_stdout@@Base+0x509c>
   1b388:	adds	r1, r1, r8
   1b38c:	sub	r3, fp, #1
   1b390:	bcs	1b3a4 <close_stdout@@Base+0x5098>
   1b394:	cmp	r0, r1
   1b398:	subhi	fp, fp, #2
   1b39c:	addhi	r1, r1, r8
   1b3a0:	bhi	1b3a8 <close_stdout@@Base+0x509c>
   1b3a4:	mov	fp, r3
   1b3a8:	rsb	r9, r0, r1
   1b3ac:	mov	r1, r4
   1b3b0:	uxth	r7, r7
   1b3b4:	mov	r0, r9
   1b3b8:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b3bc:	mov	r1, r4
   1b3c0:	mov	r5, r0
   1b3c4:	mov	r0, r9
   1b3c8:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b3cc:	mul	sl, sl, r5
   1b3d0:	orr	r1, r7, r1, lsl #16
   1b3d4:	cmp	sl, r1
   1b3d8:	bls	1b3f8 <close_stdout@@Base+0x50ec>
   1b3dc:	adds	r8, r1, r8
   1b3e0:	sub	r3, r5, #1
   1b3e4:	bcs	1b3f4 <close_stdout@@Base+0x50e8>
   1b3e8:	cmp	sl, r8
   1b3ec:	subhi	r5, r5, #2
   1b3f0:	bhi	1b3f8 <close_stdout@@Base+0x50ec>
   1b3f4:	mov	r5, r3
   1b3f8:	orr	r3, r5, fp, lsl #16
   1b3fc:	mov	r4, #0
   1b400:	cmp	r6, #0
   1b404:	mov	r0, r3
   1b408:	mov	r1, r4
   1b40c:	beq	1b418 <close_stdout@@Base+0x510c>
   1b410:	rsbs	r0, r0, #0
   1b414:	rsc	r1, r1, #0
   1b418:	add	sp, sp, #12
   1b41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b420:	cmp	r3, r5
   1b424:	movhi	r4, #0
   1b428:	movhi	r3, r4
   1b42c:	bhi	1b400 <close_stdout@@Base+0x50f4>
   1b430:	clz	r5, r1
   1b434:	cmp	r5, #0
   1b438:	bne	1b628 <close_stdout@@Base+0x531c>
   1b43c:	cmp	r1, ip
   1b440:	cmpcs	r2, sl
   1b444:	movhi	r4, #0
   1b448:	movls	r4, #1
   1b44c:	movls	r3, #1
   1b450:	movls	r4, r5
   1b454:	movhi	r3, r4
   1b458:	b	1b400 <close_stdout@@Base+0x50f4>
   1b45c:	cmp	r2, #0
   1b460:	bne	1b474 <close_stdout@@Base+0x5168>
   1b464:	mov	r1, r2
   1b468:	mov	r0, #1
   1b46c:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b470:	mov	r8, r0
   1b474:	clz	r3, r8
   1b478:	cmp	r3, #0
   1b47c:	bne	1b54c <close_stdout@@Base+0x5240>
   1b480:	rsb	r9, r8, r9
   1b484:	lsr	r5, r8, #16
   1b488:	uxth	sl, r8
   1b48c:	mov	r4, #1
   1b490:	mov	r1, r5
   1b494:	mov	r0, r9
   1b498:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b49c:	mov	r1, r5
   1b4a0:	mov	fp, r0
   1b4a4:	mov	r0, r9
   1b4a8:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b4ac:	mul	r0, sl, fp
   1b4b0:	lsr	r2, r7, #16
   1b4b4:	orr	r1, r2, r1, lsl #16
   1b4b8:	cmp	r0, r1
   1b4bc:	bls	1b4dc <close_stdout@@Base+0x51d0>
   1b4c0:	adds	r1, r1, r8
   1b4c4:	sub	r3, fp, #1
   1b4c8:	bcs	1b748 <close_stdout@@Base+0x543c>
   1b4cc:	cmp	r0, r1
   1b4d0:	subhi	fp, fp, #2
   1b4d4:	addhi	r1, r1, r8
   1b4d8:	bls	1b748 <close_stdout@@Base+0x543c>
   1b4dc:	rsb	r2, r0, r1
   1b4e0:	mov	r1, r5
   1b4e4:	str	r2, [sp]
   1b4e8:	uxth	r7, r7
   1b4ec:	mov	r0, r2
   1b4f0:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b4f4:	ldr	r2, [sp]
   1b4f8:	mov	r1, r5
   1b4fc:	mov	r9, r0
   1b500:	mov	r0, r2
   1b504:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b508:	mul	sl, sl, r9
   1b50c:	orr	r1, r7, r1, lsl #16
   1b510:	cmp	sl, r1
   1b514:	bls	1b534 <close_stdout@@Base+0x5228>
   1b518:	adds	r8, r1, r8
   1b51c:	sub	r3, r9, #1
   1b520:	bcs	1b530 <close_stdout@@Base+0x5224>
   1b524:	cmp	sl, r8
   1b528:	subhi	r9, r9, #2
   1b52c:	bhi	1b534 <close_stdout@@Base+0x5228>
   1b530:	mov	r9, r3
   1b534:	orr	r3, r9, fp, lsl #16
   1b538:	b	1b400 <close_stdout@@Base+0x50f4>
   1b53c:	mvn	r6, r6
   1b540:	rsbs	r2, r2, #0
   1b544:	rsc	r3, r3, #0
   1b548:	b	1b308 <close_stdout@@Base+0x4ffc>
   1b54c:	lsl	r8, r8, r3
   1b550:	rsb	fp, r3, #32
   1b554:	lsr	r4, r9, fp
   1b558:	lsr	fp, r7, fp
   1b55c:	lsr	r5, r8, #16
   1b560:	orr	fp, fp, r9, lsl r3
   1b564:	mov	r0, r4
   1b568:	lsl	r7, r7, r3
   1b56c:	mov	r1, r5
   1b570:	uxth	sl, r8
   1b574:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b578:	mov	r1, r5
   1b57c:	mov	r3, r0
   1b580:	mov	r0, r4
   1b584:	str	r3, [sp]
   1b588:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b58c:	ldr	r3, [sp]
   1b590:	lsr	r2, fp, #16
   1b594:	mul	r0, sl, r3
   1b598:	orr	r1, r2, r1, lsl #16
   1b59c:	cmp	r0, r1
   1b5a0:	bls	1b5c0 <close_stdout@@Base+0x52b4>
   1b5a4:	adds	r1, r1, r8
   1b5a8:	sub	r2, r3, #1
   1b5ac:	bcs	1b760 <close_stdout@@Base+0x5454>
   1b5b0:	cmp	r0, r1
   1b5b4:	subhi	r3, r3, #2
   1b5b8:	addhi	r1, r1, r8
   1b5bc:	bls	1b760 <close_stdout@@Base+0x5454>
   1b5c0:	rsb	r9, r0, r1
   1b5c4:	mov	r1, r5
   1b5c8:	str	r3, [sp]
   1b5cc:	uxth	fp, fp
   1b5d0:	mov	r0, r9
   1b5d4:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b5d8:	mov	r1, r5
   1b5dc:	mov	r4, r0
   1b5e0:	mov	r0, r9
   1b5e4:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b5e8:	mul	r9, sl, r4
   1b5ec:	ldr	r3, [sp]
   1b5f0:	orr	r1, fp, r1, lsl #16
   1b5f4:	cmp	r9, r1
   1b5f8:	bls	1b61c <close_stdout@@Base+0x5310>
   1b5fc:	adds	r1, r1, r8
   1b600:	sub	r2, r4, #1
   1b604:	bcs	1b618 <close_stdout@@Base+0x530c>
   1b608:	cmp	r9, r1
   1b60c:	subhi	r4, r4, #2
   1b610:	addhi	r1, r1, r8
   1b614:	bhi	1b61c <close_stdout@@Base+0x5310>
   1b618:	mov	r4, r2
   1b61c:	rsb	r9, r9, r1
   1b620:	orr	r4, r4, r3, lsl #16
   1b624:	b	1b490 <close_stdout@@Base+0x5184>
   1b628:	rsb	sl, r5, #32
   1b62c:	lsl	r3, r2, r5
   1b630:	lsr	r0, r2, sl
   1b634:	lsr	r2, ip, sl
   1b638:	orr	r4, r0, r1, lsl r5
   1b63c:	lsr	sl, r7, sl
   1b640:	mov	r0, r2
   1b644:	orr	sl, sl, ip, lsl r5
   1b648:	lsr	r9, r4, #16
   1b64c:	str	r3, [sp, #4]
   1b650:	str	r2, [sp]
   1b654:	uxth	fp, r4
   1b658:	mov	r1, r9
   1b65c:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b660:	ldr	r2, [sp]
   1b664:	mov	r1, r9
   1b668:	mov	r8, r0
   1b66c:	mov	r0, r2
   1b670:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b674:	mul	r0, fp, r8
   1b678:	lsr	r2, sl, #16
   1b67c:	orr	r1, r2, r1, lsl #16
   1b680:	cmp	r0, r1
   1b684:	bls	1b6a4 <close_stdout@@Base+0x5398>
   1b688:	adds	r1, r1, r4
   1b68c:	sub	r2, r8, #1
   1b690:	bcs	1b758 <close_stdout@@Base+0x544c>
   1b694:	cmp	r0, r1
   1b698:	subhi	r8, r8, #2
   1b69c:	addhi	r1, r1, r4
   1b6a0:	bls	1b758 <close_stdout@@Base+0x544c>
   1b6a4:	rsb	ip, r0, r1
   1b6a8:	mov	r1, r9
   1b6ac:	str	ip, [sp]
   1b6b0:	mov	r0, ip
   1b6b4:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b6b8:	ldr	ip, [sp]
   1b6bc:	mov	r1, r9
   1b6c0:	mov	r2, r0
   1b6c4:	mov	r0, ip
   1b6c8:	str	r2, [sp]
   1b6cc:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b6d0:	ldr	r2, [sp]
   1b6d4:	uxth	ip, sl
   1b6d8:	mul	fp, fp, r2
   1b6dc:	orr	ip, ip, r1, lsl #16
   1b6e0:	cmp	fp, ip
   1b6e4:	bls	1b704 <close_stdout@@Base+0x53f8>
   1b6e8:	adds	ip, ip, r4
   1b6ec:	sub	r1, r2, #1
   1b6f0:	bcs	1b750 <close_stdout@@Base+0x5444>
   1b6f4:	cmp	fp, ip
   1b6f8:	subhi	r2, r2, #2
   1b6fc:	addhi	ip, ip, r4
   1b700:	bls	1b750 <close_stdout@@Base+0x5444>
   1b704:	ldr	r0, [sp, #4]
   1b708:	orr	r1, r2, r8, lsl #16
   1b70c:	rsb	fp, fp, ip
   1b710:	umull	r2, r3, r1, r0
   1b714:	cmp	fp, r3
   1b718:	bcc	1b73c <close_stdout@@Base+0x5430>
   1b71c:	movne	r4, #0
   1b720:	moveq	r4, #1
   1b724:	cmp	r2, r7, lsl r5
   1b728:	movls	r4, #0
   1b72c:	andhi	r4, r4, #1
   1b730:	cmp	r4, #0
   1b734:	moveq	r3, r1
   1b738:	beq	1b400 <close_stdout@@Base+0x50f4>
   1b73c:	sub	r3, r1, #1
   1b740:	mov	r4, #0
   1b744:	b	1b400 <close_stdout@@Base+0x50f4>
   1b748:	mov	fp, r3
   1b74c:	b	1b4dc <close_stdout@@Base+0x51d0>
   1b750:	mov	r2, r1
   1b754:	b	1b704 <close_stdout@@Base+0x53f8>
   1b758:	mov	r8, r2
   1b75c:	b	1b6a4 <close_stdout@@Base+0x5398>
   1b760:	mov	r3, r2
   1b764:	b	1b5c0 <close_stdout@@Base+0x52b4>
   1b768:	cmp	r3, #0
   1b76c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b770:	mov	r6, r0
   1b774:	sub	sp, sp, #12
   1b778:	mov	r5, r1
   1b77c:	mov	r7, r0
   1b780:	mov	r4, r2
   1b784:	mov	r8, r1
   1b788:	bne	1b868 <close_stdout@@Base+0x555c>
   1b78c:	cmp	r2, r1
   1b790:	bls	1b8a4 <close_stdout@@Base+0x5598>
   1b794:	clz	r3, r2
   1b798:	cmp	r3, #0
   1b79c:	rsbne	r8, r3, #32
   1b7a0:	lslne	r4, r2, r3
   1b7a4:	lsrne	r8, r0, r8
   1b7a8:	lslne	r7, r0, r3
   1b7ac:	orrne	r8, r8, r1, lsl r3
   1b7b0:	lsr	r5, r4, #16
   1b7b4:	uxth	sl, r4
   1b7b8:	mov	r1, r5
   1b7bc:	mov	r0, r8
   1b7c0:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b7c4:	mov	r1, r5
   1b7c8:	mov	r9, r0
   1b7cc:	mov	r0, r8
   1b7d0:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b7d4:	mul	r0, sl, r9
   1b7d8:	lsr	r3, r7, #16
   1b7dc:	orr	r1, r3, r1, lsl #16
   1b7e0:	cmp	r0, r1
   1b7e4:	bls	1b808 <close_stdout@@Base+0x54fc>
   1b7e8:	adds	r1, r1, r4
   1b7ec:	sub	r2, r9, #1
   1b7f0:	bcs	1b804 <close_stdout@@Base+0x54f8>
   1b7f4:	cmp	r0, r1
   1b7f8:	subhi	r9, r9, #2
   1b7fc:	addhi	r1, r1, r4
   1b800:	bhi	1b808 <close_stdout@@Base+0x54fc>
   1b804:	mov	r9, r2
   1b808:	rsb	r8, r0, r1
   1b80c:	mov	r1, r5
   1b810:	uxth	r7, r7
   1b814:	mov	r0, r8
   1b818:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b81c:	mov	r1, r5
   1b820:	mov	r6, r0
   1b824:	mov	r0, r8
   1b828:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b82c:	mul	sl, sl, r6
   1b830:	orr	r1, r7, r1, lsl #16
   1b834:	cmp	sl, r1
   1b838:	bls	1b854 <close_stdout@@Base+0x5548>
   1b83c:	adds	r4, r1, r4
   1b840:	sub	r3, r6, #1
   1b844:	bcs	1bb50 <close_stdout@@Base+0x5844>
   1b848:	cmp	sl, r4
   1b84c:	subhi	r6, r6, #2
   1b850:	bls	1bb50 <close_stdout@@Base+0x5844>
   1b854:	orr	r0, r6, r9, lsl #16
   1b858:	mov	r6, #0
   1b85c:	mov	r1, r6
   1b860:	add	sp, sp, #12
   1b864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b868:	cmp	r3, r1
   1b86c:	movhi	r6, #0
   1b870:	movhi	r0, r6
   1b874:	bhi	1b85c <close_stdout@@Base+0x5550>
   1b878:	clz	r7, r3
   1b87c:	cmp	r7, #0
   1b880:	bne	1b980 <close_stdout@@Base+0x5674>
   1b884:	cmp	r3, r1
   1b888:	cmpcs	r2, r6
   1b88c:	movhi	r6, #0
   1b890:	movls	r6, #1
   1b894:	movls	r0, #1
   1b898:	movls	r6, r7
   1b89c:	movhi	r0, r6
   1b8a0:	b	1b85c <close_stdout@@Base+0x5550>
   1b8a4:	cmp	r2, #0
   1b8a8:	bne	1b8bc <close_stdout@@Base+0x55b0>
   1b8ac:	mov	r1, r2
   1b8b0:	mov	r0, #1
   1b8b4:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b8b8:	mov	r4, r0
   1b8bc:	clz	r3, r4
   1b8c0:	cmp	r3, #0
   1b8c4:	bne	1ba7c <close_stdout@@Base+0x5770>
   1b8c8:	rsb	r5, r4, r5
   1b8cc:	lsr	r8, r4, #16
   1b8d0:	uxth	sl, r4
   1b8d4:	mov	r6, #1
   1b8d8:	mov	r1, r8
   1b8dc:	mov	r0, r5
   1b8e0:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b8e4:	mov	r1, r8
   1b8e8:	mov	r9, r0
   1b8ec:	mov	r0, r5
   1b8f0:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b8f4:	mul	r0, sl, r9
   1b8f8:	lsr	r3, r7, #16
   1b8fc:	orr	r1, r3, r1, lsl #16
   1b900:	cmp	r0, r1
   1b904:	bls	1b924 <close_stdout@@Base+0x5618>
   1b908:	adds	r1, r1, r4
   1b90c:	sub	r2, r9, #1
   1b910:	bcs	1bb58 <close_stdout@@Base+0x584c>
   1b914:	cmp	r0, r1
   1b918:	subhi	r9, r9, #2
   1b91c:	addhi	r1, r1, r4
   1b920:	bls	1bb58 <close_stdout@@Base+0x584c>
   1b924:	rsb	fp, r0, r1
   1b928:	mov	r1, r8
   1b92c:	uxth	r7, r7
   1b930:	mov	r0, fp
   1b934:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b938:	mov	r1, r8
   1b93c:	mov	r5, r0
   1b940:	mov	r0, fp
   1b944:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b948:	mul	sl, sl, r5
   1b94c:	orr	r1, r7, r1, lsl #16
   1b950:	cmp	sl, r1
   1b954:	bls	1b970 <close_stdout@@Base+0x5664>
   1b958:	adds	r4, r1, r4
   1b95c:	sub	r3, r5, #1
   1b960:	bcs	1bb60 <close_stdout@@Base+0x5854>
   1b964:	cmp	sl, r4
   1b968:	subhi	r5, r5, #2
   1b96c:	bls	1bb60 <close_stdout@@Base+0x5854>
   1b970:	orr	r0, r5, r9, lsl #16
   1b974:	mov	r1, r6
   1b978:	add	sp, sp, #12
   1b97c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b980:	rsb	r1, r7, #32
   1b984:	lsl	r0, r2, r7
   1b988:	lsr	r2, r2, r1
   1b98c:	lsr	fp, r5, r1
   1b990:	orr	r8, r2, r3, lsl r7
   1b994:	lsr	r1, r6, r1
   1b998:	str	r0, [sp, #4]
   1b99c:	orr	r5, r1, r5, lsl r7
   1b9a0:	lsr	r9, r8, #16
   1b9a4:	mov	r0, fp
   1b9a8:	uxth	sl, r8
   1b9ac:	mov	r1, r9
   1b9b0:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1b9b4:	mov	r1, r9
   1b9b8:	mov	r4, r0
   1b9bc:	mov	r0, fp
   1b9c0:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1b9c4:	mul	r0, sl, r4
   1b9c8:	lsr	ip, r5, #16
   1b9cc:	orr	r1, ip, r1, lsl #16
   1b9d0:	cmp	r0, r1
   1b9d4:	bls	1b9e8 <close_stdout@@Base+0x56dc>
   1b9d8:	adds	r1, r1, r8
   1b9dc:	sub	r2, r4, #1
   1b9e0:	bcc	1bb7c <close_stdout@@Base+0x5870>
   1b9e4:	mov	r4, r2
   1b9e8:	rsb	ip, r0, r1
   1b9ec:	mov	r1, r9
   1b9f0:	str	ip, [sp]
   1b9f4:	uxth	r5, r5
   1b9f8:	mov	r0, ip
   1b9fc:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1ba00:	ldr	ip, [sp]
   1ba04:	mov	r1, r9
   1ba08:	mov	fp, r0
   1ba0c:	mov	r0, ip
   1ba10:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1ba14:	mul	sl, sl, fp
   1ba18:	orr	r1, r5, r1, lsl #16
   1ba1c:	cmp	sl, r1
   1ba20:	bls	1ba34 <close_stdout@@Base+0x5728>
   1ba24:	adds	r1, r1, r8
   1ba28:	sub	r2, fp, #1
   1ba2c:	bcc	1bb68 <close_stdout@@Base+0x585c>
   1ba30:	mov	fp, r2
   1ba34:	ldr	r3, [sp, #4]
   1ba38:	orr	r0, fp, r4, lsl #16
   1ba3c:	rsb	sl, sl, r1
   1ba40:	umull	r4, r5, r0, r3
   1ba44:	cmp	sl, r5
   1ba48:	bcc	1ba68 <close_stdout@@Base+0x575c>
   1ba4c:	movne	r3, #0
   1ba50:	moveq	r3, #1
   1ba54:	cmp	r4, r6, lsl r7
   1ba58:	movls	r6, #0
   1ba5c:	andhi	r6, r3, #1
   1ba60:	cmp	r6, #0
   1ba64:	beq	1b85c <close_stdout@@Base+0x5550>
   1ba68:	mov	r6, #0
   1ba6c:	sub	r0, r0, #1
   1ba70:	mov	r1, r6
   1ba74:	add	sp, sp, #12
   1ba78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba7c:	lsl	r4, r4, r3
   1ba80:	rsb	r9, r3, #32
   1ba84:	lsr	r2, r5, r9
   1ba88:	lsr	r9, r6, r9
   1ba8c:	lsr	r8, r4, #16
   1ba90:	orr	r9, r9, r5, lsl r3
   1ba94:	mov	r0, r2
   1ba98:	lsl	r7, r6, r3
   1ba9c:	mov	r1, r8
   1baa0:	str	r2, [sp]
   1baa4:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1baa8:	ldr	r2, [sp]
   1baac:	mov	r1, r8
   1bab0:	uxth	sl, r4
   1bab4:	mov	fp, r0
   1bab8:	mov	r0, r2
   1babc:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1bac0:	mul	r0, sl, fp
   1bac4:	lsr	r3, r9, #16
   1bac8:	orr	r1, r3, r1, lsl #16
   1bacc:	cmp	r0, r1
   1bad0:	bls	1baf0 <close_stdout@@Base+0x57e4>
   1bad4:	adds	r1, r1, r4
   1bad8:	sub	r3, fp, #1
   1badc:	bcs	1bb90 <close_stdout@@Base+0x5884>
   1bae0:	cmp	r0, r1
   1bae4:	subhi	fp, fp, #2
   1bae8:	addhi	r1, r1, r4
   1baec:	bls	1bb90 <close_stdout@@Base+0x5884>
   1baf0:	rsb	r5, r0, r1
   1baf4:	mov	r1, r8
   1baf8:	uxth	r9, r9
   1bafc:	mov	r0, r5
   1bb00:	bl	1afc4 <close_stdout@@Base+0x4cb8>
   1bb04:	mov	r1, r8
   1bb08:	mov	r6, r0
   1bb0c:	mov	r0, r5
   1bb10:	bl	1b1b0 <close_stdout@@Base+0x4ea4>
   1bb14:	mul	r5, sl, r6
   1bb18:	orr	r1, r9, r1, lsl #16
   1bb1c:	cmp	r5, r1
   1bb20:	bls	1bb44 <close_stdout@@Base+0x5838>
   1bb24:	adds	r1, r1, r4
   1bb28:	sub	r3, r6, #1
   1bb2c:	bcs	1bb40 <close_stdout@@Base+0x5834>
   1bb30:	cmp	r5, r1
   1bb34:	subhi	r6, r6, #2
   1bb38:	addhi	r1, r1, r4
   1bb3c:	bhi	1bb44 <close_stdout@@Base+0x5838>
   1bb40:	mov	r6, r3
   1bb44:	rsb	r5, r5, r1
   1bb48:	orr	r6, r6, fp, lsl #16
   1bb4c:	b	1b8d8 <close_stdout@@Base+0x55cc>
   1bb50:	mov	r6, r3
   1bb54:	b	1b854 <close_stdout@@Base+0x5548>
   1bb58:	mov	r9, r2
   1bb5c:	b	1b924 <close_stdout@@Base+0x5618>
   1bb60:	mov	r5, r3
   1bb64:	b	1b970 <close_stdout@@Base+0x5664>
   1bb68:	cmp	sl, r1
   1bb6c:	subhi	fp, fp, #2
   1bb70:	addhi	r1, r1, r8
   1bb74:	bhi	1ba34 <close_stdout@@Base+0x5728>
   1bb78:	b	1ba30 <close_stdout@@Base+0x5724>
   1bb7c:	cmp	r0, r1
   1bb80:	subhi	r4, r4, #2
   1bb84:	addhi	r1, r1, r8
   1bb88:	bhi	1b9e8 <close_stdout@@Base+0x56dc>
   1bb8c:	b	1b9e4 <close_stdout@@Base+0x56d8>
   1bb90:	mov	fp, r3
   1bb94:	b	1baf0 <close_stdout@@Base+0x57e4>
   1bb98:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1bb9c:	mov	r7, r0
   1bba0:	ldr	r6, [pc, #76]	; 1bbf4 <close_stdout@@Base+0x58e8>
   1bba4:	mov	r8, r1
   1bba8:	ldr	r5, [pc, #72]	; 1bbf8 <close_stdout@@Base+0x58ec>
   1bbac:	mov	r9, r2
   1bbb0:	add	r6, pc, r6
   1bbb4:	bl	112e4 <fdopen@plt-0x20>
   1bbb8:	add	r5, pc, r5
   1bbbc:	rsb	r6, r5, r6
   1bbc0:	asrs	r6, r6, #2
   1bbc4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1bbc8:	sub	r5, r5, #4
   1bbcc:	mov	r4, #0
   1bbd0:	add	r4, r4, #1
   1bbd4:	ldr	r3, [r5, #4]!
   1bbd8:	mov	r0, r7
   1bbdc:	mov	r1, r8
   1bbe0:	mov	r2, r9
   1bbe4:	blx	r3
   1bbe8:	cmp	r4, r6
   1bbec:	bne	1bbd0 <close_stdout@@Base+0x58c4>
   1bbf0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1bbf4:	andeq	r2, r1, r8, lsr #4
   1bbf8:	andeq	r2, r1, ip, lsl r2
   1bbfc:	bx	lr
   1bc00:	ldr	r3, [pc, #28]	; 1bc24 <close_stdout@@Base+0x5918>
   1bc04:	mov	r1, #0
   1bc08:	ldr	r2, [pc, #24]	; 1bc28 <close_stdout@@Base+0x591c>
   1bc0c:	add	r3, pc, r3
   1bc10:	ldr	r3, [r3, r2]
   1bc14:	cmp	r3, #0
   1bc18:	ldrne	r2, [r3]
   1bc1c:	moveq	r2, r3
   1bc20:	b	11574 <__cxa_atexit@plt>
   1bc24:	andeq	r2, r1, ip, ror #7
   1bc28:	andeq	r0, r0, ip, asr r1

Disassembly of section .fini:

0001bc2c <.fini>:
   1bc2c:	push	{r3, lr}
   1bc30:	pop	{r3, pc}
